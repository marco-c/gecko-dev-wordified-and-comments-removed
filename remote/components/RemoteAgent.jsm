"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
RemoteAgent
"
"
RemoteAgentFactory
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
CDP
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
CDP
.
jsm
"
HttpServer
:
"
chrome
:
/
/
remote
/
content
/
server
/
HTTPD
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
activeProtocols
"
(
)
=
>
{
const
protocols
=
Services
.
prefs
.
getIntPref
(
"
remote
.
active
-
protocols
"
)
;
if
(
protocols
<
1
|
|
protocols
>
3
)
{
throw
Error
(
Invalid
remote
protocol
identifier
:
{
protocols
}
)
;
}
return
protocols
;
}
)
;
const
CDP_ACTIVE
=
0x2
;
const
LOOPBACKS
=
[
"
localhost
"
"
127
.
0
.
0
.
1
"
"
[
:
:
1
]
"
]
;
const
PREF_FORCE_LOCAL
=
"
remote
.
force
-
local
"
;
class
RemoteAgentClass
{
constructor
(
)
{
this
.
server
=
null
;
if
(
(
activeProtocols
&
CDP_ACTIVE
)
=
=
=
CDP_ACTIVE
)
{
this
.
cdp
=
new
CDP
(
this
)
;
logger
.
debug
(
"
CDP
enabled
"
)
;
}
else
{
this
.
cdp
=
null
;
}
}
get
debuggerAddress
(
)
{
if
(
!
this
.
server
)
{
return
"
"
;
}
return
{
this
.
host
}
:
{
this
.
port
}
;
}
get
host
(
)
{
return
this
.
server
?
.
_host
;
}
get
listening
(
)
{
return
!
!
this
.
server
&
&
!
this
.
server
.
isStopped
(
)
;
}
get
port
(
)
{
return
this
.
server
?
.
_port
;
}
get
scheme
(
)
{
return
this
.
server
?
.
identity
.
primaryScheme
;
}
listen
(
url
)
{
if
(
Services
.
appinfo
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
)
{
throw
Components
.
Exception
(
"
May
only
be
instantiated
in
parent
process
"
Cr
.
NS_ERROR_LAUNCHED_CHILD_PROCESS
)
;
}
if
(
this
.
listening
)
{
return
Promise
.
resolve
(
)
;
}
if
(
!
(
url
instanceof
Ci
.
nsIURI
)
)
{
url
=
Services
.
io
.
newURI
(
url
)
;
}
let
{
host
port
}
=
url
;
if
(
Preferences
.
get
(
PREF_FORCE_LOCAL
)
&
&
!
LOOPBACKS
.
includes
(
host
)
)
{
throw
Components
.
Exception
(
"
Restricted
to
loopback
devices
"
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
}
if
(
port
=
=
=
0
)
{
port
=
-
1
;
}
this
.
server
=
new
HttpServer
(
)
;
return
this
.
asyncListen
(
host
port
)
;
}
async
asyncListen
(
host
port
)
{
try
{
this
.
server
.
_start
(
port
host
)
;
await
this
.
cdp
?
.
start
(
)
;
}
catch
(
e
)
{
await
this
.
close
(
)
;
logger
.
error
(
Unable
to
start
remote
agent
:
{
e
.
message
}
e
)
;
}
}
close
(
)
{
try
{
this
.
cdp
?
.
stop
(
)
;
if
(
this
.
listening
)
{
return
this
.
server
.
stop
(
)
;
}
}
catch
(
e
)
{
logger
.
error
(
"
unable
to
stop
listener
"
e
)
;
}
finally
{
this
.
server
=
null
;
}
return
Promise
.
resolve
(
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIRemoteAgent
"
]
)
;
}
}
var
RemoteAgent
=
new
RemoteAgentClass
(
)
;
var
RemoteAgentFactory
=
function
(
)
{
return
RemoteAgent
;
}
;
