"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContextObserver
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
class
ContextObserver
{
constructor
(
chromeEventHandler
)
{
this
.
chromeEventHandler
=
chromeEventHandler
;
EventEmitter
.
decorate
(
this
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
DOMWindowCreated
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
}
destructor
(
)
{
this
.
chromeEventHandler
.
removeEventListener
(
"
DOMWindowCreated
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
removeEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
removeEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
Services
.
obs
.
removeObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
}
handleEvent
(
{
type
target
persisted
}
)
{
const
window
=
target
.
defaultView
;
if
(
window
!
=
this
.
chromeEventHandler
.
ownerGlobal
)
{
return
;
}
const
{
windowUtils
}
=
window
;
const
frameId
=
windowUtils
.
outerWindowID
.
toString
(
)
;
const
id
=
windowUtils
.
currentInnerWindowID
;
switch
(
type
)
{
case
"
DOMWindowCreated
"
:
this
.
emit
(
"
context
-
destroyed
"
{
frameId
}
)
;
this
.
emit
(
"
frame
-
navigated
"
{
frameId
window
}
)
;
this
.
emit
(
"
context
-
created
"
{
id
window
}
)
;
break
;
case
"
pageshow
"
:
if
(
!
persisted
)
{
return
;
}
this
.
emit
(
"
context
-
created
"
{
id
window
}
)
;
break
;
case
"
pagehide
"
:
if
(
!
persisted
)
{
return
;
}
this
.
emit
(
"
context
-
destroyed
"
{
id
}
)
;
break
;
}
}
observe
(
subject
topic
data
)
{
const
innerWindowID
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
this
.
emit
(
"
context
-
destroyed
"
{
id
:
innerWindowID
}
)
;
}
}
