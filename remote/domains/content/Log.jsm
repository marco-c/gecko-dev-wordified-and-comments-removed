"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Log
"
]
;
const
{
Domain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domain
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
Log
extends
Domain
{
constructor
(
session
target
)
{
super
(
session
target
)
;
this
.
enabled
=
false
;
}
destructor
(
)
{
this
.
disable
(
)
;
}
enable
(
)
{
if
(
!
this
.
enabled
)
{
this
.
enabled
=
true
;
Services
.
console
.
registerListener
(
this
)
;
Services
.
obs
.
addObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
}
}
disable
(
)
{
if
(
this
.
enabled
)
{
this
.
enabled
=
false
;
Services
.
console
.
unregisterListener
(
this
)
;
Services
.
obs
.
removeObserver
(
this
"
console
-
api
-
log
-
event
"
)
;
}
}
observe
(
message
topic
)
{
let
entry
;
if
(
message
instanceof
Ci
.
nsIScriptError
)
{
entry
=
fromScriptError
(
message
)
;
}
else
if
(
message
instanceof
Ci
.
nsIConsoleMessage
)
{
entry
=
fromConsoleMessage
(
message
)
;
}
else
if
(
topic
=
=
"
console
-
api
-
log
-
event
"
)
{
entry
=
fromConsoleAPI
(
message
.
wrappedJSObject
)
;
}
this
.
emit
(
"
Log
.
entryAdded
"
{
entry
}
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
Ci
.
nsIConsoleListener
]
)
;
}
}
function
fromConsoleMessage
(
message
)
{
const
levels
=
{
[
Ci
.
nsIConsoleMessage
.
debug
]
:
"
verbose
"
[
Ci
.
nsIConsoleMessage
.
info
]
:
"
info
"
[
Ci
.
nsIConsoleMessage
.
warn
]
:
"
warning
"
[
Ci
.
nsIConsoleMessage
.
error
]
:
"
error
"
}
;
const
level
=
levels
[
message
.
logLevel
]
;
return
{
source
:
"
javascript
"
level
text
:
message
.
message
timestamp
:
Date
.
now
(
)
}
;
}
function
fromConsoleAPI
(
message
)
{
const
levels
=
{
"
log
"
:
"
verbose
"
"
info
"
:
"
info
"
"
warn
"
:
"
warning
"
"
error
"
:
"
error
"
"
exception
"
:
"
error
"
}
;
const
level
=
levels
[
message
.
level
]
|
|
"
info
"
;
return
{
source
:
"
javascript
"
level
text
:
message
.
arguments
url
:
message
.
filename
lineNumber
:
message
.
lineNumber
stackTrace
:
message
.
stacktrace
timestamp
:
Date
.
now
(
)
}
;
}
function
fromScriptError
(
error
)
{
const
{
flags
errorMessage
sourceName
lineNumber
stack
}
=
error
;
let
level
=
"
verbose
"
;
if
(
(
flags
&
Ci
.
nsIScriptError
.
exceptionFlag
)
|
|
(
flags
&
Ci
.
nsIScriptError
.
errorFlag
)
)
{
level
=
"
error
"
;
}
else
if
(
(
flags
&
Ci
.
nsIScriptError
.
warningFlag
)
|
|
(
flags
&
Ci
.
nsIScriptError
.
strictFlag
)
)
{
level
=
"
warning
"
;
}
else
if
(
flags
&
Ci
.
nsIScriptError
.
infoFlag
)
{
level
=
"
info
"
;
}
return
{
source
:
"
javascript
"
level
text
:
errorMessage
timestamp
:
Date
.
now
(
)
url
:
sourceName
lineNumber
stackTrace
:
stack
}
;
}
