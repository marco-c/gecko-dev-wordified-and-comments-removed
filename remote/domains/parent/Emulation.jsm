"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Emulation
"
]
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
{
Domain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domain
.
jsm
"
)
;
const
MAX_WINDOW_SIZE
=
10000000
;
class
Emulation
extends
Domain
{
destructor
(
)
{
this
.
setUserAgentOverride
(
{
userAgent
:
"
"
platform
:
"
"
}
)
;
super
.
destructor
(
)
;
}
async
setDeviceMetricsOverride
(
options
=
{
}
)
{
const
{
width
height
deviceScaleFactor
}
=
options
;
if
(
width
<
0
|
|
width
>
MAX_WINDOW_SIZE
|
|
height
<
0
|
|
height
>
MAX_WINDOW_SIZE
)
{
throw
new
TypeError
(
Width
and
height
values
must
be
positive
not
greater
than
{
MAX_WINDOW_SIZE
}
)
;
}
if
(
typeof
deviceScaleFactor
!
=
"
number
"
)
{
throw
new
TypeError
(
"
deviceScaleFactor
:
number
expected
"
)
;
}
if
(
deviceScaleFactor
<
0
)
{
throw
new
TypeError
(
"
deviceScaleFactor
:
must
be
positive
"
)
;
}
const
{
tab
}
=
this
.
session
.
target
;
const
{
linkedBrowser
:
browser
}
=
tab
;
await
this
.
executeInChild
(
"
_setDPPXOverride
"
deviceScaleFactor
)
;
const
{
layoutViewport
}
=
await
this
.
session
.
execute
(
this
.
session
.
id
"
Page
"
"
getLayoutMetrics
"
)
;
const
targetWidth
=
width
>
0
?
width
:
layoutViewport
.
clientWidth
;
const
targetHeight
=
height
>
0
?
height
:
layoutViewport
.
clientHeight
;
browser
.
style
.
setProperty
(
"
min
-
width
"
targetWidth
+
"
px
"
)
;
browser
.
style
.
setProperty
(
"
max
-
width
"
targetWidth
+
"
px
"
)
;
browser
.
style
.
setProperty
(
"
min
-
height
"
targetHeight
+
"
px
"
)
;
browser
.
style
.
setProperty
(
"
max
-
height
"
targetHeight
+
"
px
"
)
;
await
this
.
executeInChild
(
"
_awaitViewportDimensions
"
{
width
:
targetWidth
height
:
targetHeight
}
)
;
}
async
setUserAgentOverride
(
options
=
{
}
)
{
const
{
userAgent
platform
}
=
options
;
if
(
typeof
userAgent
!
=
"
string
"
)
{
throw
new
TypeError
(
"
Invalid
parameters
(
userAgent
:
string
value
expected
)
"
)
;
}
if
(
!
[
"
undefined
"
"
string
"
]
.
includes
(
typeof
platform
)
)
{
throw
new
TypeError
(
"
platform
:
string
value
expected
"
)
;
}
const
{
browsingContext
}
=
this
.
session
.
target
;
if
(
userAgent
.
length
=
=
0
)
{
browsingContext
.
customUserAgent
=
null
;
}
else
if
(
this
.
_isValidHTTPRequestHeaderValue
(
userAgent
)
)
{
browsingContext
.
customUserAgent
=
userAgent
;
}
else
{
throw
new
TypeError
(
"
Invalid
characters
found
in
userAgent
"
)
;
}
if
(
platform
?
.
length
>
0
)
{
browsingContext
.
customPlatform
=
platform
;
}
else
{
browsingContext
.
customPlatform
=
null
;
}
}
_isValidHTTPRequestHeaderValue
(
value
)
{
try
{
const
channel
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
"
loadUsingSystemPrincipal
:
true
}
)
;
channel
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
channel
.
setRequestHeader
(
"
X
-
check
"
value
false
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
}
