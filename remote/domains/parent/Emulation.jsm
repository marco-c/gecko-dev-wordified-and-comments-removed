"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Emulation
"
]
;
const
{
Domain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domain
.
jsm
"
)
;
const
{
UnsupportedError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Error
.
jsm
"
)
;
const
{
NetUtil
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PREF_USER_AGENT_OVERRIDE
=
"
general
.
useragent
.
override
"
;
class
Emulation
extends
Domain
{
destructor
(
)
{
this
.
setUserAgentOverride
(
{
userAgent
:
"
"
}
)
;
super
.
destructor
(
)
;
}
setUserAgentOverride
(
options
=
{
}
)
{
const
{
userAgent
}
=
options
;
if
(
options
.
acceptLanguage
)
{
throw
new
UnsupportedError
(
"
'
acceptLanguage
'
not
supported
"
)
;
}
if
(
options
.
platform
)
{
throw
new
UnsupportedError
(
"
'
platform
'
not
supported
"
)
;
}
if
(
userAgent
.
length
=
=
0
)
{
Services
.
prefs
.
clearUserPref
(
PREF_USER_AGENT_OVERRIDE
)
;
}
else
if
(
this
.
_isValidHTTPRequestHeaderValue
(
userAgent
)
)
{
Services
.
prefs
.
setStringPref
(
PREF_USER_AGENT_OVERRIDE
userAgent
)
;
}
else
{
throw
new
Error
(
"
Invalid
characters
found
in
userAgent
"
)
;
}
}
_isValidHTTPRequestHeaderValue
(
value
)
{
try
{
const
channel
=
NetUtil
.
newChannel
(
{
uri
:
"
http
:
/
/
localhost
"
loadUsingSystemPrincipal
:
true
}
)
;
channel
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
channel
.
setRequestHeader
(
"
X
-
check
"
value
false
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
}
