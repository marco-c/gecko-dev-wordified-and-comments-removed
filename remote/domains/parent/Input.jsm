"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Input
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
Domain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domain
.
jsm
"
)
;
class
Input
extends
Domain
{
async
dispatchKeyEvent
(
options
)
{
const
{
key
modifiers
type
windowsVirtualKeyCode
}
=
options
;
let
domType
;
if
(
type
=
=
"
keyDown
"
|
|
type
=
=
"
rawKeyDown
"
)
{
domType
=
"
keydown
"
;
}
else
if
(
type
=
=
"
keyUp
"
|
|
type
=
=
"
char
"
)
{
domType
=
"
keyup
"
;
}
else
{
throw
new
Error
(
Unknown
key
event
type
{
type
}
)
;
}
const
{
browser
}
=
this
.
session
.
target
;
const
browserWindow
=
browser
.
ownerGlobal
;
const
EventUtils
=
this
.
_getEventUtils
(
browserWindow
)
;
const
eventId
=
await
this
.
executeInChild
(
"
addContentEventListener
"
domType
)
;
if
(
type
=
=
"
char
"
)
{
EventUtils
.
synthesizeKey
(
key
{
}
browserWindow
)
;
}
else
{
const
eventUtilsKey
=
key
.
length
=
=
1
?
key
:
"
KEY_
"
+
key
;
EventUtils
.
synthesizeKey
(
eventUtilsKey
{
keyCode
:
windowsVirtualKeyCode
type
:
domType
altKey
:
!
!
(
modifiers
&
1
)
ctrlKey
:
!
!
(
modifiers
&
2
)
metaKey
:
!
!
(
modifiers
&
4
)
shiftKey
:
!
!
(
modifiers
&
8
)
}
browserWindow
)
;
}
await
this
.
executeInChild
(
"
waitForContentEvent
"
eventId
)
;
}
async
dispatchMouseEvent
(
{
type
button
x
y
modifiers
clickCount
}
)
{
if
(
type
=
=
"
mousePressed
"
)
{
type
=
"
mousedown
"
;
}
else
if
(
type
=
=
"
mouseReleased
"
)
{
type
=
"
mouseup
"
;
}
else
if
(
type
=
=
"
mouseMoved
"
)
{
type
=
"
mousemove
"
;
}
else
{
throw
new
Error
(
Mouse
type
is
not
supported
:
{
type
}
)
;
}
if
(
type
=
=
=
"
mousedown
"
&
&
button
=
=
=
"
right
"
)
{
type
=
"
contextmenu
"
;
}
if
(
button
=
=
undefined
|
|
button
=
=
"
none
"
|
|
button
=
=
"
left
"
)
{
button
=
0
;
}
else
if
(
button
=
=
"
middle
"
)
{
button
=
1
;
}
else
if
(
button
=
=
"
right
"
)
{
button
=
2
;
}
else
if
(
button
=
=
"
back
"
)
{
button
=
3
;
}
else
if
(
button
=
=
"
forward
"
)
{
button
=
4
;
}
else
{
throw
new
Error
(
Mouse
button
is
not
supported
:
{
button
}
)
;
}
const
{
browser
}
=
this
.
session
.
target
;
const
currentWindow
=
browser
.
ownerGlobal
;
const
EventUtils
=
this
.
_getEventUtils
(
currentWindow
)
;
EventUtils
.
synthesizeMouse
(
browser
x
y
{
type
button
clickCount
:
clickCount
|
|
1
altKey
:
!
!
(
modifiers
&
1
)
ctrlKey
:
!
!
(
modifiers
&
2
)
metaKey
:
!
!
(
modifiers
&
4
)
shiftKey
:
!
!
(
modifiers
&
8
)
}
)
;
}
_getEventUtils
(
win
)
{
if
(
!
this
.
_eventUtils
)
{
this
.
_eventUtils
=
{
window
:
win
parent
:
win
_EU_Ci
:
Ci
_EU_Cc
:
Cc
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
remote
/
content
/
external
/
EventUtils
.
js
"
this
.
_eventUtils
)
;
}
return
this
.
_eventUtils
;
}
}
