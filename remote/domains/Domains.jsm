"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Domains
"
]
;
const
{
UnknownMethodError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Error
.
jsm
"
)
;
const
{
Domain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domain
.
jsm
"
)
;
class
Domains
{
constructor
(
session
modules
)
{
this
.
session
=
session
;
this
.
modules
=
modules
;
this
.
instances
=
new
Map
(
)
;
}
domainSupportsMethod
(
name
method
)
{
const
domain
=
this
.
modules
[
name
]
;
if
(
domain
)
{
return
domain
.
implements
(
method
)
;
}
return
false
;
}
get
(
name
)
{
let
inst
=
this
.
instances
.
get
(
name
)
;
if
(
!
inst
)
{
const
Cls
=
this
.
modules
[
name
]
;
if
(
!
Cls
)
{
throw
new
UnknownMethodError
(
name
)
;
}
if
(
!
isConstructor
(
Cls
)
)
{
throw
new
TypeError
(
"
Domain
cannot
be
constructed
"
)
;
}
inst
=
new
Cls
(
this
.
session
)
;
if
(
!
(
inst
instanceof
Domain
)
)
{
throw
new
TypeError
(
"
Instance
not
a
domain
"
)
;
}
inst
.
addEventListener
(
this
.
session
)
;
this
.
instances
.
set
(
name
inst
)
;
}
return
inst
;
}
has
(
name
)
{
return
name
in
this
.
modules
;
}
get
size
(
)
{
return
this
.
instances
.
size
;
}
execute
(
domain
command
params
)
{
if
(
!
this
.
domainSupportsMethod
(
domain
command
)
)
{
throw
new
UnknownMethodError
(
domain
command
)
;
}
const
inst
=
this
.
get
(
domain
)
;
return
inst
[
command
]
(
params
)
;
}
clear
(
)
{
for
(
const
inst
of
this
.
instances
.
values
(
)
)
{
inst
.
destructor
(
)
;
}
this
.
instances
.
clear
(
)
;
}
}
function
isConstructor
(
obj
)
{
return
!
!
obj
.
prototype
&
&
!
!
obj
.
prototype
.
constructor
.
name
;
}
