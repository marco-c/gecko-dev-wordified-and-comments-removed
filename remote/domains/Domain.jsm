"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Domain
"
]
;
class
Domain
{
constructor
(
session
)
{
this
.
session
=
session
;
this
.
name
=
this
.
constructor
.
name
;
this
.
eventListeners_
=
new
Set
(
)
;
this
.
_requestCounter
=
0
;
}
destructor
(
)
{
}
emit
(
eventName
params
=
{
}
)
{
for
(
const
listener
of
this
.
eventListeners_
)
{
try
{
if
(
isEventHandler
(
listener
)
)
{
listener
.
onEvent
(
eventName
params
)
;
}
else
{
listener
.
call
(
this
eventName
params
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
executeInChild
(
method
params
)
{
if
(
!
this
.
session
.
executeInChild
)
{
throw
new
Error
(
"
executeInChild
can
only
be
used
in
Domains
managed
by
a
TabSession
"
)
;
}
this
.
_requestCounter
+
+
;
const
id
=
this
.
name
+
"
-
"
+
this
.
_requestCounter
;
return
this
.
session
.
executeInChild
(
id
this
.
name
method
params
)
;
}
addEventListener
(
listener
)
{
if
(
typeof
listener
!
=
"
function
"
&
&
!
isEventHandler
(
listener
)
)
{
throw
new
TypeError
(
)
;
}
this
.
eventListeners_
.
add
(
listener
)
;
}
static
implements
(
command
)
{
return
command
&
&
typeof
this
.
prototype
[
command
]
=
=
"
function
"
;
}
}
function
isEventHandler
(
listener
)
{
return
(
listener
&
&
"
onEvent
"
in
listener
&
&
typeof
listener
.
onEvent
=
=
"
function
"
)
;
}
