"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Session
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
DomainCache
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
domains
/
DomainCache
.
jsm
"
NetworkObserver
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
observers
/
NetworkObserver
.
jsm
"
ParentProcessDomains
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
domains
/
ParentProcessDomains
.
jsm
"
}
)
;
class
Session
{
constructor
(
connection
target
id
)
{
this
.
connection
=
connection
;
this
.
target
=
target
;
this
.
id
=
id
;
this
.
domains
=
new
lazy
.
DomainCache
(
this
lazy
.
ParentProcessDomains
)
;
}
destructor
(
)
{
if
(
this
.
networkObserver
&
&
this
.
networkObserver
.
isActive
(
this
.
target
.
browser
)
)
{
this
.
networkObserver
.
dispose
(
)
;
}
this
.
domains
.
clear
(
)
;
}
execute
(
id
domain
command
params
)
{
return
this
.
domains
.
execute
(
domain
command
params
)
;
}
get
networkObserver
(
)
{
if
(
!
this
.
_networkObserver
)
{
this
.
_networkObserver
=
new
lazy
.
NetworkObserver
(
)
;
}
return
this
.
_networkObserver
;
}
onEvent
(
eventName
params
)
{
this
.
connection
.
sendEvent
(
eventName
params
this
.
id
)
;
}
toString
(
)
{
return
[
object
{
this
.
constructor
.
name
}
{
this
.
connection
.
id
}
]
;
}
}
