"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TabSession
"
]
;
const
{
Session
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
cdp
/
sessions
/
Session
.
jsm
"
)
;
class
TabSession
extends
Session
{
constructor
(
connection
target
id
)
{
super
(
connection
target
id
)
;
this
.
requestPromises
=
new
Map
(
)
;
this
.
mm
.
addMessageListener
(
"
remote
:
event
"
this
)
;
this
.
mm
.
addMessageListener
(
"
remote
:
result
"
this
)
;
this
.
mm
.
addMessageListener
(
"
remote
:
error
"
this
)
;
this
.
mm
.
loadFrameScript
(
"
chrome
:
/
/
remote
/
content
/
cdp
/
sessions
/
frame
-
script
.
js
"
false
)
;
}
destructor
(
)
{
super
.
destructor
(
)
;
this
.
requestPromises
.
clear
(
)
;
this
.
mm
.
sendAsyncMessage
(
"
remote
:
destroy
"
{
browsingContextId
:
this
.
browsingContext
.
id
}
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
event
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
result
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
error
"
this
)
;
}
execute
(
id
domain
command
params
)
{
if
(
this
.
domains
.
domainSupportsMethod
(
domain
command
)
)
{
return
super
.
execute
(
id
domain
command
params
)
;
}
return
this
.
executeInChild
(
id
domain
command
params
)
;
}
executeInChild
(
id
domain
command
params
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
requestPromises
.
set
(
id
{
resolve
reject
}
)
;
this
.
mm
.
sendAsyncMessage
(
"
remote
:
request
"
{
browsingContextId
:
this
.
browsingContext
.
id
request
:
{
id
domain
command
params
}
}
)
;
}
)
;
}
get
mm
(
)
{
return
this
.
target
.
mm
;
}
get
browsingContext
(
)
{
return
this
.
target
.
browsingContext
;
}
receiveMessage
(
{
name
data
}
)
{
const
{
id
result
event
error
}
=
data
;
switch
(
name
)
{
case
"
remote
:
result
"
:
const
{
resolve
}
=
this
.
requestPromises
.
get
(
id
)
;
resolve
(
result
)
;
this
.
requestPromises
.
delete
(
id
)
;
break
;
case
"
remote
:
event
"
:
this
.
connection
.
onEvent
(
event
.
eventName
event
.
params
this
.
id
)
;
break
;
case
"
remote
:
error
"
:
const
{
reject
}
=
this
.
requestPromises
.
get
(
id
)
;
reject
(
error
)
;
this
.
requestPromises
.
delete
(
id
)
;
break
;
}
}
}
