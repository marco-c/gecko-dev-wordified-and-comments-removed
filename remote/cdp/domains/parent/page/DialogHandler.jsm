"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DialogHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
}
)
;
const
DIALOG_TYPES
=
{
ALERT
:
"
alert
"
BEFOREUNLOAD
:
"
beforeunload
"
CONFIRM
:
"
confirm
"
PROMPT
:
"
prompt
"
}
;
class
DialogHandler
{
constructor
(
browser
)
{
lazy
.
EventEmitter
.
decorate
(
this
)
;
this
.
_dialog
=
null
;
this
.
_browser
=
browser
;
this
.
_onCommonDialogLoaded
=
this
.
_onCommonDialogLoaded
.
bind
(
this
)
;
this
.
_onTabDialogLoaded
=
this
.
_onTabDialogLoaded
.
bind
(
this
)
;
Services
.
obs
.
addObserver
(
this
.
_onCommonDialogLoaded
"
common
-
dialog
-
loaded
"
)
;
Services
.
obs
.
addObserver
(
this
.
_onTabDialogLoaded
"
tabmodal
-
dialog
-
loaded
"
)
;
}
destructor
(
)
{
this
.
_dialog
=
null
;
this
.
_pageTarget
=
null
;
Services
.
obs
.
removeObserver
(
this
.
_onCommonDialogLoaded
"
common
-
dialog
-
loaded
"
)
;
Services
.
obs
.
removeObserver
(
this
.
_onTabDialogLoaded
"
tabmodal
-
dialog
-
loaded
"
)
;
}
async
handleJavaScriptDialog
(
{
accept
promptText
}
)
{
if
(
!
this
.
_dialog
)
{
throw
new
Error
(
"
No
dialog
available
for
handleJavaScriptDialog
"
)
;
}
const
type
=
this
.
_getDialogType
(
)
;
if
(
promptText
&
&
type
=
=
=
"
prompt
"
)
{
this
.
_dialog
.
ui
.
loginTextbox
.
value
=
promptText
;
}
const
onDialogClosed
=
new
Promise
(
r
=
>
{
this
.
_browser
.
addEventListener
(
"
DOMModalDialogClosed
"
r
{
once
:
true
}
)
;
}
)
;
if
(
accept
)
{
this
.
_dialog
.
ui
.
button0
.
click
(
)
;
}
else
{
this
.
_dialog
.
ui
.
button1
.
click
(
)
;
}
await
onDialogClosed
;
this
.
_dialog
=
null
;
}
_getDialogType
(
)
{
const
{
inPermitUnload
promptType
}
=
this
.
_dialog
.
args
;
if
(
inPermitUnload
)
{
return
DIALOG_TYPES
.
BEFOREUNLOAD
;
}
switch
(
promptType
)
{
case
"
alert
"
:
return
DIALOG_TYPES
.
ALERT
;
case
"
confirm
"
:
return
DIALOG_TYPES
.
CONFIRM
;
case
"
prompt
"
:
return
DIALOG_TYPES
.
PROMPT
;
default
:
throw
new
Error
(
"
Unsupported
dialog
type
:
"
+
promptType
)
;
}
}
_onCommonDialogLoaded
(
dialogWindow
)
{
const
dialogs
=
this
.
_browser
.
tabDialogBox
.
getContentDialogManager
(
)
.
dialogs
;
const
dialog
=
dialogs
.
find
(
d
=
>
d
.
frameContentWindow
=
=
=
dialogWindow
)
;
if
(
!
dialog
)
{
return
;
}
this
.
_dialog
=
dialogWindow
.
Dialog
;
const
message
=
this
.
_dialog
.
args
.
text
;
const
type
=
this
.
_getDialogType
(
)
;
this
.
emit
(
"
dialog
-
loaded
"
{
message
type
}
)
;
}
_onTabDialogLoaded
(
promptContainer
)
{
const
prompts
=
this
.
_browser
.
tabModalPromptBox
.
listPrompts
(
)
;
const
prompt
=
prompts
.
find
(
p
=
>
p
.
ui
.
promptContainer
=
=
=
promptContainer
)
;
if
(
!
prompt
)
{
return
;
}
this
.
_dialog
=
prompt
;
const
message
=
this
.
_dialog
.
args
.
text
;
const
type
=
this
.
_getDialogType
(
)
;
this
.
emit
(
"
dialog
-
loaded
"
{
message
type
}
)
;
}
}
