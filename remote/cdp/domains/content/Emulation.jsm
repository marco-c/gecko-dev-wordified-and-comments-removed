"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Emulation
"
]
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
ContentProcessDomain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
cdp
/
domains
/
ContentProcessDomain
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AnimationFramePromise
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Sync
.
jsm
"
}
)
;
class
Emulation
extends
ContentProcessDomain
{
async
_awaitViewportDimensions
(
{
width
height
}
)
{
const
win
=
this
.
content
;
let
resized
;
await
lazy
.
AnimationFramePromise
(
win
)
;
const
checkBrowserSize
=
(
)
=
>
{
if
(
win
.
innerWidth
=
=
=
width
&
&
win
.
innerHeight
=
=
=
height
)
{
resized
(
)
;
}
}
;
return
new
Promise
(
resolve
=
>
{
resized
=
resolve
;
win
.
addEventListener
(
"
resize
"
checkBrowserSize
)
;
checkBrowserSize
(
)
;
}
)
.
finally
(
(
)
=
>
{
win
.
removeEventListener
(
"
resize
"
checkBrowserSize
)
;
}
)
;
}
}
