"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Input
"
]
;
const
{
ContentProcessDomain
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
cdp
/
domains
/
ContentProcessDomain
.
jsm
"
)
;
class
Input
extends
ContentProcessDomain
{
constructor
(
session
)
{
super
(
session
)
;
this
.
_eventId
=
0
;
this
.
_eventPromises
=
new
Map
(
)
;
}
_addContentEventListener
(
eventName
)
{
const
eventPromise
=
new
Promise
(
resolve
=
>
{
this
.
chromeEventHandler
.
addEventListener
(
eventName
resolve
{
mozSystemGroup
:
true
once
:
true
}
)
;
}
)
;
this
.
_eventId
+
+
;
this
.
_eventPromises
.
set
(
this
.
_eventId
eventPromise
)
;
return
this
.
_eventId
;
}
async
_waitForContentEvent
(
eventId
)
{
const
eventPromise
=
this
.
_eventPromises
.
get
(
eventId
)
;
if
(
!
eventPromise
)
{
throw
new
Error
(
"
No
event
promise
found
for
id
"
+
eventId
)
;
}
await
eventPromise
;
this
.
_eventPromises
.
delete
(
eventId
)
;
}
}
