"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
CDP
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
JSONHandler
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
JSONHandler
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
RecommendedPreferences
:
"
chrome
:
/
/
remote
/
content
/
shared
/
RecommendedPreferences
.
jsm
"
TargetList
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
targets
/
TargetList
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
lazy
.
Log
.
TYPES
.
CDP
)
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
textEncoder
"
(
)
=
>
new
TextEncoder
(
)
)
;
const
RECOMMENDED_PREFS
=
new
Map
(
[
[
"
browser
.
contentblocking
.
features
.
standard
"
"
-
tp
tpPrivate
cookieBehavior0
-
cm
-
fp
"
]
[
"
network
.
cookie
.
cookieBehavior
"
0
]
]
)
;
class
CDP
{
constructor
(
agent
)
{
this
.
agent
=
agent
;
this
.
targetList
=
null
;
this
.
_running
=
false
;
this
.
_activePortPath
;
}
get
address
(
)
{
const
mainTarget
=
this
.
targetList
.
getMainProcessTarget
(
)
;
return
mainTarget
.
wsDebuggerURL
;
}
get
mainTargetPath
(
)
{
const
mainTarget
=
this
.
targetList
.
getMainProcessTarget
(
)
;
return
mainTarget
.
path
;
}
async
start
(
)
{
if
(
this
.
_running
)
{
return
;
}
this
.
_running
=
true
;
lazy
.
RecommendedPreferences
.
applyPreferences
(
RECOMMENDED_PREFS
)
;
this
.
agent
.
server
.
registerPrefixHandler
(
"
/
json
/
"
new
lazy
.
JSONHandler
(
this
)
)
;
this
.
targetList
=
new
lazy
.
TargetList
(
)
;
this
.
targetList
.
on
(
"
target
-
created
"
(
eventName
target
)
=
>
{
this
.
agent
.
server
.
registerPathHandler
(
target
.
path
target
)
;
}
)
;
this
.
targetList
.
on
(
"
target
-
destroyed
"
(
eventName
target
)
=
>
{
this
.
agent
.
server
.
registerPathHandler
(
target
.
path
null
)
;
}
)
;
await
this
.
targetList
.
watchForTargets
(
)
;
lazy
.
logger
.
debug
(
Waiting
for
initial
application
window
)
;
await
this
.
agent
.
browserStartupFinished
;
Cu
.
printStderr
(
DevTools
listening
on
{
this
.
address
}
\
n
)
;
this
.
_activePortPath
=
PathUtils
.
join
(
PathUtils
.
profileDir
"
DevToolsActivePort
"
)
;
const
data
=
{
this
.
agent
.
port
}
\
n
{
this
.
mainTargetPath
}
;
try
{
await
IOUtils
.
write
(
this
.
_activePortPath
lazy
.
textEncoder
.
encode
(
data
)
)
;
}
catch
(
e
)
{
lazy
.
logger
.
warn
(
Failed
to
create
{
this
.
_activePortPath
}
(
{
e
.
message
}
)
)
;
}
}
async
stop
(
)
{
if
(
!
this
.
_running
)
{
return
;
}
try
{
try
{
await
IOUtils
.
remove
(
this
.
_activePortPath
)
;
}
catch
(
e
)
{
lazy
.
logger
.
warn
(
Failed
to
remove
{
this
.
_activePortPath
}
(
{
e
.
message
}
)
)
;
}
this
.
targetList
?
.
destructor
(
)
;
this
.
targetList
=
null
;
lazy
.
RecommendedPreferences
.
restorePreferences
(
RECOMMENDED_PREFS
)
;
}
finally
{
this
.
_running
=
false
;
}
}
}
