"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
CDP
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
JSONHandler
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
JSONHandler
.
jsm
"
RecommendedPreferences
:
"
chrome
:
/
/
remote
/
content
/
shared
/
RecommendedPreferences
.
jsm
"
TargetList
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
targets
/
TargetList
.
jsm
"
}
)
;
const
RECOMMENDED_PREFS
=
new
Map
(
[
[
"
browser
.
contentblocking
.
features
.
standard
"
"
-
tp
tpPrivate
cookieBehavior0
-
cm
-
fp
"
]
[
"
network
.
cookie
.
cookieBehavior
"
0
]
]
)
;
class
CDP
{
constructor
(
server
)
{
this
.
server
=
server
;
this
.
server
.
registerPrefixHandler
(
"
/
json
/
"
new
JSONHandler
(
this
)
)
;
this
.
targetList
=
new
TargetList
(
)
;
this
.
targetList
.
on
(
"
target
-
created
"
(
eventName
target
)
=
>
{
this
.
server
.
registerPathHandler
(
target
.
path
target
)
;
}
)
;
this
.
targetList
.
on
(
"
target
-
destroyed
"
(
eventName
target
)
=
>
{
this
.
server
.
registerPathHandler
(
target
.
path
null
)
;
}
)
;
RecommendedPreferences
.
applyPreferences
(
RECOMMENDED_PREFS
)
;
}
async
start
(
)
{
await
this
.
targetList
.
watchForTargets
(
)
;
const
mainTarget
=
this
.
targetList
.
getMainProcessTarget
(
)
;
Services
.
obs
.
notifyObservers
(
null
"
remote
-
listening
"
DevTools
listening
on
{
mainTarget
.
wsDebuggerURL
}
)
;
}
stop
(
)
{
this
.
targetList
.
destructor
(
)
;
RecommendedPreferences
.
restorePreferences
(
RECOMMENDED_PREFS
)
;
}
}
