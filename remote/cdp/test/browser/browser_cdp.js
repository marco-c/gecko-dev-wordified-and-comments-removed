"
use
strict
"
;
add_task
(
async
function
testCDP
(
{
client
}
)
{
const
{
Browser
Log
Page
}
=
client
;
ok
(
"
Browser
"
in
client
"
Browser
domain
is
available
"
)
;
ok
(
"
Log
"
in
client
"
Log
domain
is
available
"
)
;
ok
(
"
Page
"
in
client
"
Page
domain
is
available
"
)
;
const
version
=
await
Browser
.
getVersion
(
)
;
const
{
isHeadless
}
=
Cc
[
"
mozilla
.
org
/
gfx
/
info
;
1
"
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
is
(
version
.
product
isHeadless
?
"
Headless
Firefox
"
:
Services
.
appinfo
.
name
"
Browser
.
getVersion
works
and
depends
on
headless
mode
"
)
;
is
(
version
.
userAgent
window
.
navigator
.
userAgent
"
Browser
.
getVersion
(
)
.
userAgent
is
correct
"
)
;
is
(
version
.
revision
Services
.
appinfo
.
sourceURL
.
split
(
"
/
"
)
.
pop
(
)
"
Browser
.
getVersion
(
)
.
revision
is
correct
"
)
;
let
result
=
await
Log
.
enable
(
)
;
info
(
"
Log
domain
has
been
enabled
"
)
;
Assert
.
deepEqual
(
result
{
}
"
Got
expected
result
value
"
)
;
Log
.
entryAdded
(
(
{
entry
}
)
=
>
{
const
{
timestamp
level
text
args
}
=
entry
;
const
msg
=
text
|
|
args
.
join
(
"
"
)
;
console
.
log
(
{
new
Date
(
timestamp
)
}
\
t
{
level
.
toUpperCase
(
)
}
\
t
{
msg
}
)
;
}
)
;
result
=
await
Page
.
enable
(
)
;
info
(
"
Page
domain
has
been
enabled
"
)
;
Assert
.
deepEqual
(
result
{
}
"
Got
expected
result
value
"
)
;
const
frameStoppedLoading
=
Page
.
frameStoppedLoading
(
)
;
const
frameNavigated
=
Page
.
frameNavigated
(
)
;
const
loadEventFired
=
Page
.
loadEventFired
(
)
;
await
Page
.
navigate
(
{
url
:
toDataURL
(
<
script
>
console
.
log
(
"
foo
"
)
<
/
script
>
)
}
)
;
info
(
"
A
new
page
has
been
requested
"
)
;
await
loadEventFired
;
info
(
"
Page
.
loadEventFired
fired
"
)
;
await
frameStoppedLoading
;
info
(
"
Page
.
frameStoppedLoading
fired
"
)
;
await
frameNavigated
;
info
(
"
Page
.
frameNavigated
fired
"
)
;
}
)
;
