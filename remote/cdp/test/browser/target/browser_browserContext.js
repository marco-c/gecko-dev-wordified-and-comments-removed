"
use
strict
"
;
add_task
(
async
function
(
{
CDP
}
)
{
const
{
webSocketDebuggerUrl
}
=
await
CDP
.
Version
(
)
;
const
client
=
await
CDP
(
{
target
:
webSocketDebuggerUrl
}
)
;
info
(
"
CDP
client
has
been
instantiated
"
)
;
const
{
Target
}
=
client
;
await
getDiscoveredTargets
(
Target
)
;
const
{
browserContextIds
:
browserContextIdsBefore
}
=
await
Target
.
getBrowserContexts
(
)
;
is
(
browserContextIdsBefore
.
length
0
"
No
browser
context
is
open
by
default
"
)
;
const
{
browserContextId
}
=
await
Target
.
createBrowserContext
(
)
;
const
{
browserContextIds
}
=
await
Target
.
getBrowserContexts
(
)
;
is
(
browserContextIds
.
length
1
"
Got
expected
length
of
browser
contexts
"
)
;
is
(
browserContextIds
[
0
]
browserContextId
"
Got
expected
browser
context
id
from
getBrowserContexts
"
)
;
const
targetCreated
=
Target
.
targetCreated
(
)
;
const
{
targetId
}
=
await
Target
.
createTarget
(
{
browserContextId
}
)
;
ok
(
!
!
targetId
"
Target
.
createTarget
returns
a
non
-
empty
target
id
"
)
;
const
{
targetInfo
}
=
await
targetCreated
;
is
(
targetId
targetInfo
.
targetId
"
targetCreated
refers
to
the
same
target
id
"
)
;
is
(
browserContextId
targetInfo
.
browserContextId
"
targetCreated
refers
to
the
same
browser
context
"
)
;
is
(
targetInfo
.
type
"
page
"
"
The
target
is
a
page
"
)
;
await
Target
.
disposeBrowserContext
(
{
browserContextId
}
)
;
const
{
browserContextIds
:
browserContextIdsAfter
}
=
await
Target
.
getBrowserContexts
(
)
;
is
(
browserContextIdsAfter
.
length
0
"
After
closing
all
browser
contexts
none
is
available
anymore
"
)
;
await
client
.
close
(
)
;
info
(
"
The
client
is
closed
"
)
;
}
)
;
