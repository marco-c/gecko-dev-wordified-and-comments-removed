"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContextObserver
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
executeSoon
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Sync
.
jsm
"
}
)
;
class
ContextObserver
{
constructor
(
chromeEventHandler
)
{
this
.
chromeEventHandler
=
chromeEventHandler
;
EventEmitter
.
decorate
(
this
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
DOMWindowCreated
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
addEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
Services
.
obs
.
addObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
Services
.
obs
.
addObserver
(
this
"
webnavigation
-
create
"
)
;
Services
.
obs
.
addObserver
(
this
"
webnavigation
-
destroy
"
)
;
}
destructor
(
)
{
this
.
chromeEventHandler
.
removeEventListener
(
"
DOMWindowCreated
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
removeEventListener
(
"
pageshow
"
this
{
mozSystemGroup
:
true
}
)
;
this
.
chromeEventHandler
.
removeEventListener
(
"
pagehide
"
this
{
mozSystemGroup
:
true
}
)
;
Services
.
obs
.
removeObserver
(
this
"
inner
-
window
-
destroyed
"
)
;
Services
.
obs
.
removeObserver
(
this
"
webnavigation
-
create
"
)
;
Services
.
obs
.
removeObserver
(
this
"
webnavigation
-
destroy
"
)
;
}
handleEvent
(
{
type
target
persisted
}
)
{
const
window
=
target
.
defaultView
;
const
frameId
=
window
.
browsingContext
.
id
;
const
id
=
window
.
windowGlobalChild
.
innerWindowId
;
switch
(
type
)
{
case
"
DOMWindowCreated
"
:
this
.
emit
(
"
context
-
destroyed
"
{
frameId
}
)
;
this
.
emit
(
"
frame
-
navigated
"
{
frameId
window
}
)
;
this
.
emit
(
"
context
-
created
"
{
windowId
:
id
window
}
)
;
executeSoon
(
(
)
=
>
{
this
.
emit
(
"
script
-
loaded
"
{
windowId
:
id
window
}
)
;
}
)
;
break
;
case
"
pageshow
"
:
if
(
!
persisted
)
{
return
;
}
this
.
emit
(
"
context
-
created
"
{
windowId
:
id
window
}
)
;
this
.
emit
(
"
script
-
loaded
"
{
windowId
:
id
window
}
)
;
break
;
case
"
pagehide
"
:
if
(
!
persisted
)
{
return
;
}
this
.
emit
(
"
context
-
destroyed
"
{
windowId
:
id
}
)
;
break
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
inner
-
window
-
destroyed
"
:
const
windowId
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
this
.
emit
(
"
context
-
destroyed
"
{
windowId
}
)
;
break
;
case
"
webnavigation
-
create
"
:
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
this
.
onDocShellCreated
(
subject
)
;
break
;
case
"
webnavigation
-
destroy
"
:
subject
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
this
.
onDocShellDestroyed
(
subject
)
;
break
;
}
}
onDocShellCreated
(
docShell
)
{
this
.
emit
(
"
docshell
-
created
"
{
id
:
docShell
.
browsingContext
.
id
}
)
;
}
onDocShellDestroyed
(
docShell
)
{
this
.
emit
(
"
docshell
-
destroyed
"
{
id
:
docShell
.
browsingContext
.
id
}
)
;
}
}
