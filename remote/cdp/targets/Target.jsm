"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Target
"
]
;
const
{
Connection
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
cdp
/
Connection
.
jsm
"
)
;
const
{
WebSocketTransport
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketTransport
.
jsm
"
)
;
const
{
WebSocketHandshake
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketHandshake
.
jsm
"
)
;
const
UUIDGen
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
class
Target
{
constructor
(
targets
sessionClass
)
{
this
.
targets
=
targets
;
this
.
sessionClass
=
sessionClass
;
this
.
connections
=
new
Set
(
)
;
this
.
id
=
UUIDGen
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
}
destructor
(
)
{
for
(
const
conn
of
this
.
connections
)
{
conn
.
close
(
)
;
}
}
async
handle
(
request
response
)
{
const
so
=
await
WebSocketHandshake
.
upgrade
(
request
response
)
;
const
transport
=
new
WebSocketTransport
(
so
)
;
const
conn
=
new
Connection
(
transport
response
.
_connection
)
;
const
session
=
new
this
.
sessionClass
(
conn
this
)
;
conn
.
registerSession
(
session
)
;
this
.
connections
.
add
(
conn
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIHttpRequestHandler
"
]
)
;
}
}
