"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TabTarget
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
RemoteAgent
:
"
chrome
:
/
/
remote
/
content
/
components
/
RemoteAgent
.
jsm
"
TabSession
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
sessions
/
TabSession
.
jsm
"
Target
:
"
chrome
:
/
/
remote
/
content
/
cdp
/
targets
/
Target
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
Favicons
"
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
"
nsIFaviconService
"
)
;
class
TabTarget
extends
Target
{
constructor
(
targetList
browser
)
{
super
(
targetList
TabSession
)
;
this
.
browser
=
browser
;
this
.
path
=
/
devtools
/
page
/
{
this
.
id
}
;
Services
.
obs
.
addObserver
(
this
"
message
-
manager
-
disconnect
"
)
;
}
destructor
(
)
{
Services
.
obs
.
removeObserver
(
this
"
message
-
manager
-
disconnect
"
)
;
super
.
destructor
(
)
;
}
get
browserContextId
(
)
{
return
parseInt
(
this
.
browser
.
getAttribute
(
"
usercontextid
"
)
)
;
}
get
browsingContext
(
)
{
return
this
.
browser
.
browsingContext
;
}
get
mm
(
)
{
return
this
.
browser
.
messageManager
;
}
get
window
(
)
{
return
this
.
browser
.
ownerGlobal
;
}
get
tab
(
)
{
return
this
.
window
.
gBrowser
.
getTabForBrowser
(
this
.
browser
)
;
}
get
closed
(
)
{
return
!
this
.
browser
|
|
!
this
.
browser
.
isConnected
;
}
get
description
(
)
{
return
"
"
;
}
get
frontendURL
(
)
{
return
null
;
}
get
faviconUrl
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Favicons
.
getFaviconURLForPage
(
this
.
browser
.
currentURI
url
=
>
{
if
(
url
)
{
resolve
(
url
.
spec
)
;
}
else
{
resolve
(
null
)
;
}
}
)
;
}
)
;
}
get
title
(
)
{
return
this
.
browsingContext
.
currentWindowGlobal
.
documentTitle
;
}
get
type
(
)
{
return
"
page
"
;
}
get
url
(
)
{
return
this
.
browser
.
currentURI
.
spec
;
}
get
wsDebuggerURL
(
)
{
const
{
host
port
}
=
RemoteAgent
;
return
ws
:
/
/
{
host
}
:
{
port
}
{
this
.
path
}
;
}
toString
(
)
{
return
[
object
Target
{
this
.
id
}
]
;
}
toJSON
(
)
{
return
{
description
:
this
.
description
devtoolsFrontendUrl
:
this
.
frontendURL
faviconUrl
:
"
"
id
:
this
.
id
type
:
this
.
type
url
:
this
.
url
browsingContextId
:
this
.
browsingContext
.
id
webSocketDebuggerUrl
:
this
.
wsDebuggerURL
}
;
}
observe
(
subject
topic
data
)
{
if
(
subject
=
=
=
this
.
mm
&
&
subject
=
=
"
message
-
manager
-
disconnect
"
)
{
if
(
this
.
closed
)
{
this
.
disconnect
(
)
;
}
}
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIHttpRequestHandler
"
"
nsIObserver
"
]
)
;
}
}
