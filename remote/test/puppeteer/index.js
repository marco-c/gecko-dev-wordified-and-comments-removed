const
{
helper
}
=
require
(
'
.
/
lib
/
helper
'
)
;
const
api
=
require
(
'
.
/
lib
/
api
'
)
;
const
{
Page
}
=
require
(
'
.
/
lib
/
Page
'
)
;
for
(
const
className
in
api
)
{
if
(
typeof
api
[
className
]
=
=
=
'
function
'
)
helper
.
installAsyncStackHooks
(
api
[
className
]
)
;
}
Page
.
prototype
.
emulateMedia
=
Page
.
prototype
.
emulateMediaType
;
const
{
Puppeteer
}
=
require
(
'
.
/
lib
/
Puppeteer
'
)
;
const
packageJson
=
require
(
'
.
/
package
.
json
'
)
;
let
preferredRevision
=
packageJson
.
puppeteer
.
chromium_revision
;
const
isPuppeteerCore
=
packageJson
.
name
=
=
=
'
puppeteer
-
core
'
;
const
product
=
isPuppeteerCore
?
undefined
:
process
.
env
.
PUPPETEER_PRODUCT
|
|
process
.
env
.
npm_config_puppeteer_product
|
|
process
.
env
.
npm_package_config_puppeteer_product
;
if
(
!
isPuppeteerCore
&
&
product
=
=
=
'
firefox
'
)
preferredRevision
=
packageJson
.
puppeteer
.
firefox_revision
;
const
puppeteer
=
new
Puppeteer
(
__dirname
preferredRevision
isPuppeteerCore
product
)
;
puppeteer
.
_lazyLauncher
=
undefined
;
module
.
exports
=
puppeteer
;
