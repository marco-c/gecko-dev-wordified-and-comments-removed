let
asyncawait
=
true
;
try
{
new
Function
(
'
async
function
test
(
)
{
await
1
}
'
)
;
}
catch
(
error
)
{
asyncawait
=
false
;
}
if
(
asyncawait
)
{
const
{
helper
}
=
require
(
'
.
/
lib
/
helper
'
)
;
const
api
=
require
(
'
.
/
lib
/
api
'
)
;
for
(
const
className
in
api
)
{
if
(
typeof
api
[
className
]
=
=
=
'
function
'
)
helper
.
installAsyncStackHooks
(
api
[
className
]
)
;
}
}
const
Puppeteer
=
asyncawait
?
require
(
'
.
/
lib
/
Puppeteer
'
)
:
require
(
'
.
/
node6
/
lib
/
Puppeteer
'
)
;
const
packageJson
=
require
(
'
.
/
package
.
json
'
)
;
const
preferredRevision
=
packageJson
.
puppeteer
.
chromium_revision
;
const
isPuppeteerCore
=
packageJson
.
name
=
=
=
'
puppeteer
-
core
'
;
module
.
exports
=
new
Puppeteer
(
__dirname
preferredRevision
isPuppeteerCore
)
;
