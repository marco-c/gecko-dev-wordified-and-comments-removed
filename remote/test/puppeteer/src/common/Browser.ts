import
{
ChildProcess
}
from
'
child_process
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
assert
}
from
'
.
/
assert
.
js
'
;
import
{
CDPSession
Connection
ConnectionEmittedEvents
}
from
'
.
/
Connection
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
waitWithTimeout
}
from
'
.
/
util
.
js
'
;
import
{
Page
}
from
'
.
/
Page
.
js
'
;
import
{
Viewport
}
from
'
.
/
PuppeteerViewport
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
import
{
TaskQueue
}
from
'
.
/
TaskQueue
.
js
'
;
import
{
TargetManager
TargetManagerEmittedEvents
}
from
'
.
/
TargetManager
.
js
'
;
import
{
ChromeTargetManager
}
from
'
.
/
ChromeTargetManager
.
js
'
;
import
{
FirefoxTargetManager
}
from
'
.
/
FirefoxTargetManager
.
js
'
;
export
interface
BrowserContextOptions
{
proxyServer
?
:
string
;
proxyBypassList
?
:
string
[
]
;
}
export
type
BrowserCloseCallback
=
(
)
=
>
Promise
<
void
>
|
void
;
export
type
TargetFilterCallback
=
(
target
:
Protocol
.
Target
.
TargetInfo
)
=
>
boolean
;
export
type
IsPageTargetCallback
=
(
target
:
Protocol
.
Target
.
TargetInfo
)
=
>
boolean
;
const
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
=
new
Map
<
Permission
Protocol
.
Browser
.
PermissionType
>
(
[
[
'
geolocation
'
'
geolocation
'
]
[
'
midi
'
'
midi
'
]
[
'
notifications
'
'
notifications
'
]
[
'
camera
'
'
videoCapture
'
]
[
'
microphone
'
'
audioCapture
'
]
[
'
background
-
sync
'
'
backgroundSync
'
]
[
'
ambient
-
light
-
sensor
'
'
sensors
'
]
[
'
accelerometer
'
'
sensors
'
]
[
'
gyroscope
'
'
sensors
'
]
[
'
magnetometer
'
'
sensors
'
]
[
'
accessibility
-
events
'
'
accessibilityEvents
'
]
[
'
clipboard
-
read
'
'
clipboardReadWrite
'
]
[
'
clipboard
-
write
'
'
clipboardReadWrite
'
]
[
'
payment
-
handler
'
'
paymentHandler
'
]
[
'
persistent
-
storage
'
'
durableStorage
'
]
[
'
idle
-
detection
'
'
idleDetection
'
]
[
'
midi
-
sysex
'
'
midiSysex
'
]
]
)
;
export
type
Permission
=
|
'
geolocation
'
|
'
midi
'
|
'
notifications
'
|
'
camera
'
|
'
microphone
'
|
'
background
-
sync
'
|
'
ambient
-
light
-
sensor
'
|
'
accelerometer
'
|
'
gyroscope
'
|
'
magnetometer
'
|
'
accessibility
-
events
'
|
'
clipboard
-
read
'
|
'
clipboard
-
write
'
|
'
payment
-
handler
'
|
'
persistent
-
storage
'
|
'
idle
-
detection
'
|
'
midi
-
sysex
'
;
export
interface
WaitForTargetOptions
{
timeout
?
:
number
;
}
export
const
enum
BrowserEmittedEvents
{
Disconnected
=
'
disconnected
'
TargetChanged
=
'
targetchanged
'
TargetCreated
=
'
targetcreated
'
TargetDestroyed
=
'
targetdestroyed
'
}
export
class
Browser
extends
EventEmitter
{
static
async
_create
(
product
:
'
firefox
'
|
'
chrome
'
|
undefined
connection
:
Connection
contextIds
:
string
[
]
ignoreHTTPSErrors
:
boolean
defaultViewport
?
:
Viewport
|
null
process
?
:
ChildProcess
closeCallback
?
:
BrowserCloseCallback
targetFilterCallback
?
:
TargetFilterCallback
isPageTargetCallback
?
:
IsPageTargetCallback
)
:
Promise
<
Browser
>
{
const
browser
=
new
Browser
(
product
connection
contextIds
ignoreHTTPSErrors
defaultViewport
process
closeCallback
targetFilterCallback
isPageTargetCallback
)
;
await
browser
.
_attach
(
)
;
return
browser
;
}
#
ignoreHTTPSErrors
:
boolean
;
#
defaultViewport
?
:
Viewport
|
null
;
#
process
?
:
ChildProcess
;
#
connection
:
Connection
;
#
closeCallback
:
BrowserCloseCallback
;
#
targetFilterCallback
:
TargetFilterCallback
;
#
isPageTargetCallback
!
:
IsPageTargetCallback
;
#
defaultContext
:
BrowserContext
;
#
contexts
:
Map
<
string
BrowserContext
>
;
#
screenshotTaskQueue
:
TaskQueue
;
#
targetManager
:
TargetManager
;
get
_targets
(
)
:
Map
<
string
Target
>
{
return
this
.
#
targetManager
.
getAvailableTargets
(
)
;
}
constructor
(
product
:
'
chrome
'
|
'
firefox
'
|
undefined
connection
:
Connection
contextIds
:
string
[
]
ignoreHTTPSErrors
:
boolean
defaultViewport
?
:
Viewport
|
null
process
?
:
ChildProcess
closeCallback
?
:
BrowserCloseCallback
targetFilterCallback
?
:
TargetFilterCallback
isPageTargetCallback
?
:
IsPageTargetCallback
)
{
super
(
)
;
product
=
product
|
|
'
chrome
'
;
this
.
#
ignoreHTTPSErrors
=
ignoreHTTPSErrors
;
this
.
#
defaultViewport
=
defaultViewport
;
this
.
#
process
=
process
;
this
.
#
screenshotTaskQueue
=
new
TaskQueue
(
)
;
this
.
#
connection
=
connection
;
this
.
#
closeCallback
=
closeCallback
|
|
function
(
)
:
void
{
}
;
this
.
#
targetFilterCallback
=
targetFilterCallback
|
|
(
(
)
:
boolean
=
>
{
return
true
;
}
)
;
this
.
#
setIsPageTargetCallback
(
isPageTargetCallback
)
;
if
(
product
=
=
=
'
firefox
'
)
{
this
.
#
targetManager
=
new
FirefoxTargetManager
(
connection
this
.
#
createTarget
this
.
#
targetFilterCallback
)
;
}
else
{
this
.
#
targetManager
=
new
ChromeTargetManager
(
connection
this
.
#
createTarget
this
.
#
targetFilterCallback
)
;
}
this
.
#
defaultContext
=
new
BrowserContext
(
this
.
#
connection
this
)
;
this
.
#
contexts
=
new
Map
(
)
;
for
(
const
contextId
of
contextIds
)
{
this
.
#
contexts
.
set
(
contextId
new
BrowserContext
(
this
.
#
connection
this
contextId
)
)
;
}
}
#
emitDisconnected
=
(
)
=
>
{
this
.
emit
(
BrowserEmittedEvents
.
Disconnected
)
;
}
;
async
_attach
(
)
:
Promise
<
void
>
{
this
.
#
connection
.
on
(
ConnectionEmittedEvents
.
Disconnected
this
.
#
emitDisconnected
)
;
this
.
#
targetManager
.
on
(
TargetManagerEmittedEvents
.
TargetAvailable
this
.
#
onAttachedToTarget
)
;
this
.
#
targetManager
.
on
(
TargetManagerEmittedEvents
.
TargetGone
this
.
#
onDetachedFromTarget
)
;
this
.
#
targetManager
.
on
(
TargetManagerEmittedEvents
.
TargetChanged
this
.
#
onTargetChanged
)
;
this
.
#
targetManager
.
on
(
TargetManagerEmittedEvents
.
TargetDiscovered
this
.
#
onTargetDiscovered
)
;
await
this
.
#
targetManager
.
initialize
(
)
;
}
_detach
(
)
:
void
{
this
.
#
connection
.
off
(
ConnectionEmittedEvents
.
Disconnected
this
.
#
emitDisconnected
)
;
this
.
#
targetManager
.
off
(
TargetManagerEmittedEvents
.
TargetAvailable
this
.
#
onAttachedToTarget
)
;
this
.
#
targetManager
.
off
(
TargetManagerEmittedEvents
.
TargetGone
this
.
#
onDetachedFromTarget
)
;
this
.
#
targetManager
.
off
(
TargetManagerEmittedEvents
.
TargetChanged
this
.
#
onTargetChanged
)
;
this
.
#
targetManager
.
off
(
TargetManagerEmittedEvents
.
TargetDiscovered
this
.
#
onTargetDiscovered
)
;
}
process
(
)
:
ChildProcess
|
null
{
return
this
.
#
process
?
?
null
;
}
_targetManager
(
)
:
TargetManager
{
return
this
.
#
targetManager
;
}
#
setIsPageTargetCallback
(
isPageTargetCallback
?
:
IsPageTargetCallback
)
:
void
{
this
.
#
isPageTargetCallback
=
isPageTargetCallback
|
|
(
(
target
:
Protocol
.
Target
.
TargetInfo
)
:
boolean
=
>
{
return
(
target
.
type
=
=
=
'
page
'
|
|
target
.
type
=
=
=
'
background_page
'
|
|
target
.
type
=
=
=
'
webview
'
)
;
}
)
;
}
_getIsPageTargetCallback
(
)
:
IsPageTargetCallback
|
undefined
{
return
this
.
#
isPageTargetCallback
;
}
async
createIncognitoBrowserContext
(
options
:
BrowserContextOptions
=
{
}
)
:
Promise
<
BrowserContext
>
{
const
{
proxyServer
proxyBypassList
}
=
options
;
const
{
browserContextId
}
=
await
this
.
#
connection
.
send
(
'
Target
.
createBrowserContext
'
{
proxyServer
proxyBypassList
:
proxyBypassList
&
&
proxyBypassList
.
join
(
'
'
)
}
)
;
const
context
=
new
BrowserContext
(
this
.
#
connection
this
browserContextId
)
;
this
.
#
contexts
.
set
(
browserContextId
context
)
;
return
context
;
}
browserContexts
(
)
:
BrowserContext
[
]
{
return
[
this
.
#
defaultContext
.
.
.
Array
.
from
(
this
.
#
contexts
.
values
(
)
)
]
;
}
defaultBrowserContext
(
)
:
BrowserContext
{
return
this
.
#
defaultContext
;
}
async
_disposeContext
(
contextId
?
:
string
)
:
Promise
<
void
>
{
if
(
!
contextId
)
{
return
;
}
await
this
.
#
connection
.
send
(
'
Target
.
disposeBrowserContext
'
{
browserContextId
:
contextId
}
)
;
this
.
#
contexts
.
delete
(
contextId
)
;
}
#
createTarget
=
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
?
:
CDPSession
)
=
>
{
const
{
browserContextId
}
=
targetInfo
;
const
context
=
browserContextId
&
&
this
.
#
contexts
.
has
(
browserContextId
)
?
this
.
#
contexts
.
get
(
browserContextId
)
:
this
.
#
defaultContext
;
if
(
!
context
)
{
throw
new
Error
(
'
Missing
browser
context
'
)
;
}
return
new
Target
(
targetInfo
session
context
this
.
#
targetManager
(
isAutoAttachEmulated
:
boolean
)
=
>
{
return
this
.
#
connection
.
_createSession
(
targetInfo
isAutoAttachEmulated
)
;
}
this
.
#
ignoreHTTPSErrors
this
.
#
defaultViewport
?
?
null
this
.
#
screenshotTaskQueue
this
.
#
isPageTargetCallback
)
;
}
;
#
onAttachedToTarget
=
async
(
target
:
Target
)
=
>
{
if
(
await
target
.
_initializedPromise
)
{
this
.
emit
(
BrowserEmittedEvents
.
TargetCreated
target
)
;
target
.
browserContext
(
)
.
emit
(
BrowserContextEmittedEvents
.
TargetCreated
target
)
;
}
}
;
#
onDetachedFromTarget
=
async
(
target
:
Target
)
:
Promise
<
void
>
=
>
{
target
.
_initializedCallback
(
false
)
;
target
.
_closedCallback
(
)
;
if
(
await
target
.
_initializedPromise
)
{
this
.
emit
(
BrowserEmittedEvents
.
TargetDestroyed
target
)
;
target
.
browserContext
(
)
.
emit
(
BrowserContextEmittedEvents
.
TargetDestroyed
target
)
;
}
}
;
#
onTargetChanged
=
(
{
target
targetInfo
}
:
{
target
:
Target
;
targetInfo
:
Protocol
.
Target
.
TargetInfo
;
}
)
:
void
=
>
{
const
previousURL
=
target
.
url
(
)
;
const
wasInitialized
=
target
.
_isInitialized
;
target
.
_targetInfoChanged
(
targetInfo
)
;
if
(
wasInitialized
&
&
previousURL
!
=
=
target
.
url
(
)
)
{
this
.
emit
(
BrowserEmittedEvents
.
TargetChanged
target
)
;
target
.
browserContext
(
)
.
emit
(
BrowserContextEmittedEvents
.
TargetChanged
target
)
;
}
}
;
#
onTargetDiscovered
=
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
void
=
>
{
this
.
emit
(
'
targetdiscovered
'
targetInfo
)
;
}
;
wsEndpoint
(
)
:
string
{
return
this
.
#
connection
.
url
(
)
;
}
async
newPage
(
)
:
Promise
<
Page
>
{
return
this
.
#
defaultContext
.
newPage
(
)
;
}
async
_createPageInContext
(
contextId
?
:
string
)
:
Promise
<
Page
>
{
const
{
targetId
}
=
await
this
.
#
connection
.
send
(
'
Target
.
createTarget
'
{
url
:
'
about
:
blank
'
browserContextId
:
contextId
|
|
undefined
}
)
;
const
target
=
this
.
#
targetManager
.
getAvailableTargets
(
)
.
get
(
targetId
)
;
if
(
!
target
)
{
throw
new
Error
(
Missing
target
for
page
(
id
=
{
targetId
}
)
)
;
}
const
initialized
=
await
target
.
_initializedPromise
;
if
(
!
initialized
)
{
throw
new
Error
(
Failed
to
create
target
for
page
(
id
=
{
targetId
}
)
)
;
}
const
page
=
await
target
.
page
(
)
;
if
(
!
page
)
{
throw
new
Error
(
Failed
to
create
a
page
for
context
(
id
=
{
contextId
}
)
)
;
}
return
page
;
}
targets
(
)
:
Target
[
]
{
return
Array
.
from
(
this
.
#
targetManager
.
getAvailableTargets
(
)
.
values
(
)
)
.
filter
(
target
=
>
{
return
target
.
_isInitialized
;
}
)
;
}
target
(
)
:
Target
{
const
browserTarget
=
this
.
targets
(
)
.
find
(
target
=
>
{
return
target
.
type
(
)
=
=
=
'
browser
'
;
}
)
;
if
(
!
browserTarget
)
{
throw
new
Error
(
'
Browser
target
is
not
found
'
)
;
}
return
browserTarget
;
}
async
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
:
WaitForTargetOptions
=
{
}
)
:
Promise
<
Target
>
{
const
{
timeout
=
30000
}
=
options
;
let
resolve
:
(
value
:
Target
|
PromiseLike
<
Target
>
)
=
>
void
;
let
isResolved
=
false
;
const
targetPromise
=
new
Promise
<
Target
>
(
x
=
>
{
return
(
resolve
=
x
)
;
}
)
;
this
.
on
(
BrowserEmittedEvents
.
TargetCreated
check
)
;
this
.
on
(
BrowserEmittedEvents
.
TargetChanged
check
)
;
try
{
this
.
targets
(
)
.
forEach
(
check
)
;
if
(
!
timeout
)
{
return
await
targetPromise
;
}
return
await
waitWithTimeout
(
targetPromise
'
target
'
timeout
)
;
}
finally
{
this
.
off
(
BrowserEmittedEvents
.
TargetCreated
check
)
;
this
.
off
(
BrowserEmittedEvents
.
TargetChanged
check
)
;
}
async
function
check
(
target
:
Target
)
:
Promise
<
void
>
{
if
(
(
await
predicate
(
target
)
)
&
&
!
isResolved
)
{
isResolved
=
true
;
resolve
(
target
)
;
}
}
}
async
pages
(
)
:
Promise
<
Page
[
]
>
{
const
contextPages
=
await
Promise
.
all
(
this
.
browserContexts
(
)
.
map
(
context
=
>
{
return
context
.
pages
(
)
;
}
)
)
;
return
contextPages
.
reduce
(
(
acc
x
)
=
>
{
return
acc
.
concat
(
x
)
;
}
[
]
)
;
}
async
version
(
)
:
Promise
<
string
>
{
const
version
=
await
this
.
#
getVersion
(
)
;
return
version
.
product
;
}
async
userAgent
(
)
:
Promise
<
string
>
{
const
version
=
await
this
.
#
getVersion
(
)
;
return
version
.
userAgent
;
}
async
close
(
)
:
Promise
<
void
>
{
await
this
.
#
closeCallback
.
call
(
null
)
;
this
.
disconnect
(
)
;
}
disconnect
(
)
:
void
{
this
.
#
targetManager
.
dispose
(
)
;
this
.
#
connection
.
dispose
(
)
;
}
isConnected
(
)
:
boolean
{
return
!
this
.
#
connection
.
_closed
;
}
#
getVersion
(
)
:
Promise
<
Protocol
.
Browser
.
GetVersionResponse
>
{
return
this
.
#
connection
.
send
(
'
Browser
.
getVersion
'
)
;
}
}
export
const
enum
BrowserContextEmittedEvents
{
TargetChanged
=
'
targetchanged
'
TargetCreated
=
'
targetcreated
'
TargetDestroyed
=
'
targetdestroyed
'
}
export
class
BrowserContext
extends
EventEmitter
{
#
connection
:
Connection
;
#
browser
:
Browser
;
#
id
?
:
string
;
constructor
(
connection
:
Connection
browser
:
Browser
contextId
?
:
string
)
{
super
(
)
;
this
.
#
connection
=
connection
;
this
.
#
browser
=
browser
;
this
.
#
id
=
contextId
;
}
targets
(
)
:
Target
[
]
{
return
this
.
#
browser
.
targets
(
)
.
filter
(
target
=
>
{
return
target
.
browserContext
(
)
=
=
=
this
;
}
)
;
}
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
:
{
timeout
?
:
number
}
=
{
}
)
:
Promise
<
Target
>
{
return
this
.
#
browser
.
waitForTarget
(
target
=
>
{
return
target
.
browserContext
(
)
=
=
=
this
&
&
predicate
(
target
)
;
}
options
)
;
}
async
pages
(
)
:
Promise
<
Page
[
]
>
{
const
pages
=
await
Promise
.
all
(
this
.
targets
(
)
.
filter
(
target
=
>
{
return
(
target
.
type
(
)
=
=
=
'
page
'
|
|
(
target
.
type
(
)
=
=
=
'
other
'
&
&
this
.
#
browser
.
_getIsPageTargetCallback
(
)
?
.
(
target
.
_getTargetInfo
(
)
)
)
)
;
}
)
.
map
(
target
=
>
{
return
target
.
page
(
)
;
}
)
)
;
return
pages
.
filter
(
(
page
)
:
page
is
Page
=
>
{
return
!
!
page
;
}
)
;
}
isIncognito
(
)
:
boolean
{
return
!
!
this
.
#
id
;
}
async
overridePermissions
(
origin
:
string
permissions
:
Permission
[
]
)
:
Promise
<
void
>
{
const
protocolPermissions
=
permissions
.
map
(
permission
=
>
{
const
protocolPermission
=
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
.
get
(
permission
)
;
if
(
!
protocolPermission
)
{
throw
new
Error
(
'
Unknown
permission
:
'
+
permission
)
;
}
return
protocolPermission
;
}
)
;
await
this
.
#
connection
.
send
(
'
Browser
.
grantPermissions
'
{
origin
browserContextId
:
this
.
#
id
|
|
undefined
permissions
:
protocolPermissions
}
)
;
}
async
clearPermissionOverrides
(
)
:
Promise
<
void
>
{
await
this
.
#
connection
.
send
(
'
Browser
.
resetPermissions
'
{
browserContextId
:
this
.
#
id
|
|
undefined
}
)
;
}
newPage
(
)
:
Promise
<
Page
>
{
return
this
.
#
browser
.
_createPageInContext
(
this
.
#
id
)
;
}
browser
(
)
:
Browser
{
return
this
.
#
browser
;
}
async
close
(
)
:
Promise
<
void
>
{
assert
(
this
.
#
id
'
Non
-
incognito
profiles
cannot
be
closed
!
'
)
;
await
this
.
#
browser
.
_disposeContext
(
this
.
#
id
)
;
}
}
