import
{
assert
}
from
'
.
/
assert
.
js
'
;
import
{
debug
}
from
'
.
/
Debug
.
js
'
;
const
debugProtocolSend
=
debug
(
'
puppeteer
:
protocol
:
SEND
'
)
;
const
debugProtocolReceive
=
debug
(
'
puppeteer
:
protocol
:
RECV
'
)
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
{
ConnectionTransport
}
from
'
.
/
ConnectionTransport
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ProtocolError
}
from
'
.
/
Errors
.
js
'
;
export
{
ConnectionTransport
ProtocolMapping
}
;
export
interface
ConnectionCallback
{
resolve
:
Function
;
reject
:
Function
;
error
:
ProtocolError
;
method
:
string
;
}
export
const
ConnectionEmittedEvents
=
{
Disconnected
:
Symbol
(
'
Connection
.
Disconnected
'
)
}
as
const
;
export
class
Connection
extends
EventEmitter
{
_url
:
string
;
_transport
:
ConnectionTransport
;
_delay
:
number
;
_lastId
=
0
;
_sessions
:
Map
<
string
CDPSession
>
=
new
Map
(
)
;
_closed
=
false
;
_callbacks
:
Map
<
number
ConnectionCallback
>
=
new
Map
(
)
;
constructor
(
url
:
string
transport
:
ConnectionTransport
delay
=
0
)
{
super
(
)
;
this
.
_url
=
url
;
this
.
_delay
=
delay
;
this
.
_transport
=
transport
;
this
.
_transport
.
onmessage
=
this
.
_onMessage
.
bind
(
this
)
;
this
.
_transport
.
onclose
=
this
.
_onClose
.
bind
(
this
)
;
}
static
fromSession
(
session
:
CDPSession
)
:
Connection
{
return
session
.
_connection
;
}
session
(
sessionId
:
string
)
:
CDPSession
|
null
{
return
this
.
_sessions
.
get
(
sessionId
)
|
|
null
;
}
url
(
)
:
string
{
return
this
.
_url
;
}
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
{
const
params
=
paramArgs
.
length
?
paramArgs
[
0
]
:
undefined
;
const
id
=
this
.
_rawSend
(
{
method
params
}
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
_callbacks
.
set
(
id
{
resolve
reject
error
:
new
ProtocolError
(
)
method
}
)
;
}
)
;
}
_rawSend
(
message
:
Record
<
string
unknown
>
)
:
number
{
const
id
=
+
+
this
.
_lastId
;
const
stringifiedMessage
=
JSON
.
stringify
(
Object
.
assign
(
{
}
message
{
id
}
)
)
;
debugProtocolSend
(
stringifiedMessage
)
;
this
.
_transport
.
send
(
stringifiedMessage
)
;
return
id
;
}
async
_onMessage
(
message
:
string
)
:
Promise
<
void
>
{
if
(
this
.
_delay
)
await
new
Promise
(
(
f
)
=
>
setTimeout
(
f
this
.
_delay
)
)
;
debugProtocolReceive
(
message
)
;
const
object
=
JSON
.
parse
(
message
)
;
if
(
object
.
method
=
=
=
'
Target
.
attachedToTarget
'
)
{
const
sessionId
=
object
.
params
.
sessionId
;
const
session
=
new
CDPSession
(
this
object
.
params
.
targetInfo
.
type
sessionId
)
;
this
.
_sessions
.
set
(
sessionId
session
)
;
this
.
emit
(
'
sessionattached
'
session
)
;
const
parentSession
=
this
.
_sessions
.
get
(
object
.
sessionId
)
;
if
(
parentSession
)
{
parentSession
.
emit
(
'
sessionattached
'
session
)
;
}
}
else
if
(
object
.
method
=
=
=
'
Target
.
detachedFromTarget
'
)
{
const
session
=
this
.
_sessions
.
get
(
object
.
params
.
sessionId
)
;
if
(
session
)
{
session
.
_onClosed
(
)
;
this
.
_sessions
.
delete
(
object
.
params
.
sessionId
)
;
this
.
emit
(
'
sessiondetached
'
session
)
;
const
parentSession
=
this
.
_sessions
.
get
(
object
.
sessionId
)
;
if
(
parentSession
)
{
parentSession
.
emit
(
'
sessiondetached
'
session
)
;
}
}
}
if
(
object
.
sessionId
)
{
const
session
=
this
.
_sessions
.
get
(
object
.
sessionId
)
;
if
(
session
)
session
.
_onMessage
(
object
)
;
}
else
if
(
object
.
id
)
{
const
callback
=
this
.
_callbacks
.
get
(
object
.
id
)
;
if
(
callback
)
{
this
.
_callbacks
.
delete
(
object
.
id
)
;
if
(
object
.
error
)
callback
.
reject
(
createProtocolError
(
callback
.
error
callback
.
method
object
)
)
;
else
callback
.
resolve
(
object
.
result
)
;
}
}
else
{
this
.
emit
(
object
.
method
object
.
params
)
;
}
}
_onClose
(
)
:
void
{
if
(
this
.
_closed
)
return
;
this
.
_closed
=
true
;
this
.
_transport
.
onmessage
=
null
;
this
.
_transport
.
onclose
=
null
;
for
(
const
callback
of
this
.
_callbacks
.
values
(
)
)
callback
.
reject
(
rewriteError
(
callback
.
error
Protocol
error
(
{
callback
.
method
}
)
:
Target
closed
.
)
)
;
this
.
_callbacks
.
clear
(
)
;
for
(
const
session
of
this
.
_sessions
.
values
(
)
)
session
.
_onClosed
(
)
;
this
.
_sessions
.
clear
(
)
;
this
.
emit
(
ConnectionEmittedEvents
.
Disconnected
)
;
}
dispose
(
)
:
void
{
this
.
_onClose
(
)
;
this
.
_transport
.
close
(
)
;
}
async
createSession
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
Promise
<
CDPSession
>
{
const
{
sessionId
}
=
await
this
.
send
(
'
Target
.
attachToTarget
'
{
targetId
:
targetInfo
.
targetId
flatten
:
true
}
)
;
return
this
.
_sessions
.
get
(
sessionId
)
;
}
}
export
interface
CDPSessionOnMessageObject
{
id
?
:
number
;
method
:
string
;
params
:
Record
<
string
unknown
>
;
error
:
{
message
:
string
;
data
:
any
;
code
:
number
}
;
result
?
:
any
;
}
export
const
CDPSessionEmittedEvents
=
{
Disconnected
:
Symbol
(
'
CDPSession
.
Disconnected
'
)
}
as
const
;
export
class
CDPSession
extends
EventEmitter
{
_connection
:
Connection
;
private
_sessionId
:
string
;
private
_targetType
:
string
;
private
_callbacks
:
Map
<
number
ConnectionCallback
>
=
new
Map
(
)
;
constructor
(
connection
:
Connection
targetType
:
string
sessionId
:
string
)
{
super
(
)
;
this
.
_connection
=
connection
;
this
.
_targetType
=
targetType
;
this
.
_sessionId
=
sessionId
;
}
connection
(
)
:
Connection
{
return
this
.
_connection
;
}
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
{
if
(
!
this
.
_connection
)
return
Promise
.
reject
(
new
Error
(
Protocol
error
(
{
method
}
)
:
Session
closed
.
Most
likely
the
{
this
.
_targetType
}
has
been
closed
.
)
)
;
const
params
=
paramArgs
.
length
?
paramArgs
[
0
]
:
undefined
;
const
id
=
this
.
_connection
.
_rawSend
(
{
sessionId
:
this
.
_sessionId
method
params
}
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
_callbacks
.
set
(
id
{
resolve
reject
error
:
new
ProtocolError
(
)
method
}
)
;
}
)
;
}
_onMessage
(
object
:
CDPSessionOnMessageObject
)
:
void
{
if
(
object
.
id
&
&
this
.
_callbacks
.
has
(
object
.
id
)
)
{
const
callback
=
this
.
_callbacks
.
get
(
object
.
id
)
;
this
.
_callbacks
.
delete
(
object
.
id
)
;
if
(
object
.
error
)
callback
.
reject
(
createProtocolError
(
callback
.
error
callback
.
method
object
)
)
;
else
callback
.
resolve
(
object
.
result
)
;
}
else
{
assert
(
!
object
.
id
)
;
this
.
emit
(
object
.
method
object
.
params
)
;
}
}
async
detach
(
)
:
Promise
<
void
>
{
if
(
!
this
.
_connection
)
throw
new
Error
(
Session
already
detached
.
Most
likely
the
{
this
.
_targetType
}
has
been
closed
.
)
;
await
this
.
_connection
.
send
(
'
Target
.
detachFromTarget
'
{
sessionId
:
this
.
_sessionId
}
)
;
}
_onClosed
(
)
:
void
{
for
(
const
callback
of
this
.
_callbacks
.
values
(
)
)
callback
.
reject
(
rewriteError
(
callback
.
error
Protocol
error
(
{
callback
.
method
}
)
:
Target
closed
.
)
)
;
this
.
_callbacks
.
clear
(
)
;
this
.
_connection
=
null
;
this
.
emit
(
CDPSessionEmittedEvents
.
Disconnected
)
;
}
id
(
)
:
string
{
return
this
.
_sessionId
;
}
}
function
createProtocolError
(
error
:
ProtocolError
method
:
string
object
:
{
error
:
{
message
:
string
;
data
:
any
;
code
:
number
}
}
)
:
Error
{
let
message
=
Protocol
error
(
{
method
}
)
:
{
object
.
error
.
message
}
;
if
(
'
data
'
in
object
.
error
)
message
+
=
{
object
.
error
.
data
}
;
return
rewriteError
(
error
message
object
.
error
.
message
)
;
}
function
rewriteError
(
error
:
ProtocolError
message
:
string
originalMessage
?
:
string
)
:
Error
{
error
.
message
=
message
;
error
.
originalMessage
=
originalMessage
;
return
error
;
}
