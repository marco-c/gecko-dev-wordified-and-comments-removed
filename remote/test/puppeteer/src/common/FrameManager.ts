import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
assert
}
from
'
.
/
assert
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
EVALUATION_SCRIPT_URL
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
HTTPResponse
}
from
'
.
/
HTTPResponse
.
js
'
;
import
{
MouseButton
}
from
'
.
/
Input
.
js
'
;
import
{
MAIN_WORLD
IsolatedWorld
IsolatedWorldChart
PUPPETEER_WORLD
WaitForSelectorOptions
}
from
'
.
/
IsolatedWorld
.
js
'
;
import
{
LifecycleWatcher
PuppeteerLifeCycleEvent
}
from
'
.
/
LifecycleWatcher
.
js
'
;
import
{
NetworkManager
}
from
'
.
/
NetworkManager
.
js
'
;
import
{
Page
}
from
'
.
/
Page
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
import
{
TimeoutSettings
}
from
'
.
/
TimeoutSettings
.
js
'
;
import
{
EvaluateFunc
HandleFor
NodeFor
}
from
'
.
/
types
.
js
'
;
import
{
createDeferredPromiseWithTimer
debugError
DeferredPromise
isErrorLike
}
from
'
.
/
util
.
js
'
;
const
UTILITY_WORLD_NAME
=
'
__puppeteer_utility_world__
'
;
export
const
FrameManagerEmittedEvents
=
{
FrameAttached
:
Symbol
(
'
FrameManager
.
FrameAttached
'
)
FrameNavigated
:
Symbol
(
'
FrameManager
.
FrameNavigated
'
)
FrameDetached
:
Symbol
(
'
FrameManager
.
FrameDetached
'
)
FrameSwapped
:
Symbol
(
'
FrameManager
.
FrameSwapped
'
)
LifecycleEvent
:
Symbol
(
'
FrameManager
.
LifecycleEvent
'
)
FrameNavigatedWithinDocument
:
Symbol
(
'
FrameManager
.
FrameNavigatedWithinDocument
'
)
ExecutionContextCreated
:
Symbol
(
'
FrameManager
.
ExecutionContextCreated
'
)
ExecutionContextDestroyed
:
Symbol
(
'
FrameManager
.
ExecutionContextDestroyed
'
)
}
;
export
class
FrameManager
extends
EventEmitter
{
#
page
:
Page
;
#
networkManager
:
NetworkManager
;
#
timeoutSettings
:
TimeoutSettings
;
#
frames
=
new
Map
<
string
Frame
>
(
)
;
#
contextIdToContext
=
new
Map
<
string
ExecutionContext
>
(
)
;
#
isolatedWorlds
=
new
Set
<
string
>
(
)
;
#
mainFrame
?
:
Frame
;
#
client
:
CDPSession
;
#
framesPendingTargetInit
=
new
Map
<
string
DeferredPromise
<
void
>
>
(
)
;
#
framesPendingAttachment
=
new
Map
<
string
DeferredPromise
<
void
>
>
(
)
;
get
timeoutSettings
(
)
:
TimeoutSettings
{
return
this
.
#
timeoutSettings
;
}
get
networkManager
(
)
:
NetworkManager
{
return
this
.
#
networkManager
;
}
get
client
(
)
:
CDPSession
{
return
this
.
#
client
;
}
constructor
(
client
:
CDPSession
page
:
Page
ignoreHTTPSErrors
:
boolean
timeoutSettings
:
TimeoutSettings
)
{
super
(
)
;
this
.
#
client
=
client
;
this
.
#
page
=
page
;
this
.
#
networkManager
=
new
NetworkManager
(
client
ignoreHTTPSErrors
this
)
;
this
.
#
timeoutSettings
=
timeoutSettings
;
this
.
setupEventListeners
(
this
.
#
client
)
;
}
private
setupEventListeners
(
session
:
CDPSession
)
{
session
.
on
(
'
Page
.
frameAttached
'
event
=
>
{
this
.
#
onFrameAttached
(
session
event
.
frameId
event
.
parentFrameId
)
;
}
)
;
session
.
on
(
'
Page
.
frameNavigated
'
event
=
>
{
this
.
#
onFrameNavigated
(
event
.
frame
)
;
}
)
;
session
.
on
(
'
Page
.
navigatedWithinDocument
'
event
=
>
{
this
.
#
onFrameNavigatedWithinDocument
(
event
.
frameId
event
.
url
)
;
}
)
;
session
.
on
(
'
Page
.
frameDetached
'
(
event
:
Protocol
.
Page
.
FrameDetachedEvent
)
=
>
{
this
.
#
onFrameDetached
(
event
.
frameId
event
.
reason
as
Protocol
.
Page
.
FrameDetachedEventReason
)
;
}
)
;
session
.
on
(
'
Page
.
frameStartedLoading
'
event
=
>
{
this
.
#
onFrameStartedLoading
(
event
.
frameId
)
;
}
)
;
session
.
on
(
'
Page
.
frameStoppedLoading
'
event
=
>
{
this
.
#
onFrameStoppedLoading
(
event
.
frameId
)
;
}
)
;
session
.
on
(
'
Runtime
.
executionContextCreated
'
event
=
>
{
this
.
#
onExecutionContextCreated
(
event
.
context
session
)
;
}
)
;
session
.
on
(
'
Runtime
.
executionContextDestroyed
'
event
=
>
{
this
.
#
onExecutionContextDestroyed
(
event
.
executionContextId
session
)
;
}
)
;
session
.
on
(
'
Runtime
.
executionContextsCleared
'
(
)
=
>
{
this
.
#
onExecutionContextsCleared
(
session
)
;
}
)
;
session
.
on
(
'
Page
.
lifecycleEvent
'
event
=
>
{
this
.
#
onLifecycleEvent
(
event
)
;
}
)
;
}
async
initialize
(
targetId
:
string
client
:
CDPSession
=
this
.
#
client
)
:
Promise
<
void
>
{
try
{
if
(
!
this
.
#
framesPendingTargetInit
.
has
(
targetId
)
)
{
this
.
#
framesPendingTargetInit
.
set
(
targetId
createDeferredPromiseWithTimer
(
Waiting
for
target
frame
{
targetId
}
failed
)
)
;
}
const
result
=
await
Promise
.
all
(
[
client
.
send
(
'
Page
.
enable
'
)
client
.
send
(
'
Page
.
getFrameTree
'
)
]
)
;
const
{
frameTree
}
=
result
[
1
]
;
this
.
#
handleFrameTree
(
client
frameTree
)
;
await
Promise
.
all
(
[
client
.
send
(
'
Page
.
setLifecycleEventsEnabled
'
{
enabled
:
true
}
)
client
.
send
(
'
Runtime
.
enable
'
)
.
then
(
(
)
=
>
{
return
this
.
#
createIsolatedWorld
(
client
UTILITY_WORLD_NAME
)
;
}
)
client
=
=
=
this
.
#
client
?
this
.
#
networkManager
.
initialize
(
)
:
Promise
.
resolve
(
)
]
)
;
}
catch
(
error
)
{
if
(
isErrorLike
(
error
)
&
&
(
error
.
message
.
includes
(
'
Target
closed
'
)
|
|
error
.
message
.
includes
(
'
Session
closed
'
)
)
)
{
return
;
}
throw
error
;
}
finally
{
this
.
#
framesPendingTargetInit
.
get
(
targetId
)
?
.
resolve
(
)
;
this
.
#
framesPendingTargetInit
.
delete
(
targetId
)
;
}
}
executionContextById
(
contextId
:
number
session
:
CDPSession
=
this
.
#
client
)
:
ExecutionContext
{
const
key
=
{
session
.
id
(
)
}
:
{
contextId
}
;
const
context
=
this
.
#
contextIdToContext
.
get
(
key
)
;
assert
(
context
'
INTERNAL
ERROR
:
missing
context
with
id
=
'
+
contextId
)
;
return
context
;
}
page
(
)
:
Page
{
return
this
.
#
page
;
}
mainFrame
(
)
:
Frame
{
assert
(
this
.
#
mainFrame
'
Requesting
main
frame
too
early
!
'
)
;
return
this
.
#
mainFrame
;
}
frames
(
)
:
Frame
[
]
{
return
Array
.
from
(
this
.
#
frames
.
values
(
)
)
;
}
frame
(
frameId
:
string
)
:
Frame
|
null
{
return
this
.
#
frames
.
get
(
frameId
)
|
|
null
;
}
onAttachedToTarget
(
target
:
Target
)
:
void
{
if
(
target
.
_getTargetInfo
(
)
.
type
!
=
=
'
iframe
'
)
{
return
;
}
const
frame
=
this
.
#
frames
.
get
(
target
.
_getTargetInfo
(
)
.
targetId
)
;
if
(
frame
)
{
frame
.
updateClient
(
target
.
_session
(
)
!
)
;
}
this
.
setupEventListeners
(
target
.
_session
(
)
!
)
;
this
.
initialize
(
target
.
_getTargetInfo
(
)
.
targetId
target
.
_session
(
)
)
;
}
onDetachedFromTarget
(
target
:
Target
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
target
.
_targetId
)
;
if
(
frame
&
&
frame
.
isOOPFrame
(
)
)
{
this
.
#
removeFramesRecursively
(
frame
)
;
}
}
#
onLifecycleEvent
(
event
:
Protocol
.
Page
.
LifecycleEventEvent
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
event
.
frameId
)
;
if
(
!
frame
)
{
return
;
}
frame
.
_onLifecycleEvent
(
event
.
loaderId
event
.
name
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
LifecycleEvent
frame
)
;
}
#
onFrameStartedLoading
(
frameId
:
string
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
frameId
)
;
if
(
!
frame
)
{
return
;
}
frame
.
_onLoadingStarted
(
)
;
}
#
onFrameStoppedLoading
(
frameId
:
string
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
frameId
)
;
if
(
!
frame
)
{
return
;
}
frame
.
_onLoadingStopped
(
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
LifecycleEvent
frame
)
;
}
#
handleFrameTree
(
session
:
CDPSession
frameTree
:
Protocol
.
Page
.
FrameTree
)
:
void
{
if
(
frameTree
.
frame
.
parentId
)
{
this
.
#
onFrameAttached
(
session
frameTree
.
frame
.
id
frameTree
.
frame
.
parentId
)
;
}
this
.
#
onFrameNavigated
(
frameTree
.
frame
)
;
if
(
!
frameTree
.
childFrames
)
{
return
;
}
for
(
const
child
of
frameTree
.
childFrames
)
{
this
.
#
handleFrameTree
(
session
child
)
;
}
}
#
onFrameAttached
(
session
:
CDPSession
frameId
:
string
parentFrameId
:
string
)
:
void
{
if
(
this
.
#
frames
.
has
(
frameId
)
)
{
const
frame
=
this
.
#
frames
.
get
(
frameId
)
!
;
if
(
session
&
&
frame
.
isOOPFrame
(
)
)
{
frame
.
updateClient
(
session
)
;
}
return
;
}
const
parentFrame
=
this
.
#
frames
.
get
(
parentFrameId
)
;
const
complete
=
(
parentFrame
:
Frame
)
=
>
{
assert
(
parentFrame
Parent
frame
{
parentFrameId
}
not
found
)
;
const
frame
=
new
Frame
(
this
parentFrame
frameId
session
)
;
this
.
#
frames
.
set
(
frame
.
_id
frame
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
FrameAttached
frame
)
;
}
;
if
(
parentFrame
)
{
return
complete
(
parentFrame
)
;
}
const
frame
=
this
.
#
framesPendingTargetInit
.
get
(
parentFrameId
)
;
if
(
frame
)
{
if
(
!
this
.
#
framesPendingAttachment
.
has
(
frameId
)
)
{
this
.
#
framesPendingAttachment
.
set
(
frameId
createDeferredPromiseWithTimer
(
Waiting
for
frame
{
frameId
}
to
attach
failed
)
)
;
}
frame
.
then
(
(
)
=
>
{
complete
(
this
.
#
frames
.
get
(
parentFrameId
)
!
)
;
this
.
#
framesPendingAttachment
.
get
(
frameId
)
?
.
resolve
(
)
;
this
.
#
framesPendingAttachment
.
delete
(
frameId
)
;
}
)
;
return
;
}
throw
new
Error
(
Parent
frame
{
parentFrameId
}
not
found
)
;
}
#
onFrameNavigated
(
framePayload
:
Protocol
.
Page
.
Frame
)
:
void
{
const
frameId
=
framePayload
.
id
;
const
isMainFrame
=
!
framePayload
.
parentId
;
const
frame
=
isMainFrame
?
this
.
#
mainFrame
:
this
.
#
frames
.
get
(
frameId
)
;
const
complete
=
(
frame
?
:
Frame
)
=
>
{
assert
(
isMainFrame
|
|
frame
Missing
frame
isMainFrame
=
{
isMainFrame
}
frameId
=
{
frameId
}
)
;
if
(
frame
)
{
for
(
const
child
of
frame
.
childFrames
(
)
)
{
this
.
#
removeFramesRecursively
(
child
)
;
}
}
if
(
isMainFrame
)
{
if
(
frame
)
{
this
.
#
frames
.
delete
(
frame
.
_id
)
;
frame
.
_id
=
frameId
;
}
else
{
frame
=
new
Frame
(
this
null
frameId
this
.
#
client
)
;
}
this
.
#
frames
.
set
(
frameId
frame
)
;
this
.
#
mainFrame
=
frame
;
}
assert
(
frame
)
;
frame
.
_navigated
(
framePayload
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
FrameNavigated
frame
)
;
}
;
const
pendingFrame
=
this
.
#
framesPendingAttachment
.
get
(
frameId
)
;
if
(
pendingFrame
)
{
pendingFrame
.
then
(
(
)
=
>
{
complete
(
isMainFrame
?
this
.
#
mainFrame
:
this
.
#
frames
.
get
(
frameId
)
)
;
}
)
;
}
else
{
complete
(
frame
)
;
}
}
async
#
createIsolatedWorld
(
session
:
CDPSession
name
:
string
)
:
Promise
<
void
>
{
const
key
=
{
session
.
id
(
)
}
:
{
name
}
;
if
(
this
.
#
isolatedWorlds
.
has
(
key
)
)
{
return
;
}
await
session
.
send
(
'
Page
.
addScriptToEvaluateOnNewDocument
'
{
source
:
/
/
#
sourceURL
=
{
EVALUATION_SCRIPT_URL
}
worldName
:
name
}
)
;
await
Promise
.
all
(
this
.
frames
(
)
.
filter
(
frame
=
>
{
return
frame
.
_client
(
)
=
=
=
session
;
}
)
.
map
(
frame
=
>
{
return
session
.
send
(
'
Page
.
createIsolatedWorld
'
{
frameId
:
frame
.
_id
worldName
:
name
grantUniveralAccess
:
true
}
)
.
catch
(
debugError
)
;
}
)
)
;
this
.
#
isolatedWorlds
.
add
(
key
)
;
}
#
onFrameNavigatedWithinDocument
(
frameId
:
string
url
:
string
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
frameId
)
;
if
(
!
frame
)
{
return
;
}
frame
.
_navigatedWithinDocument
(
url
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
FrameNavigatedWithinDocument
frame
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
FrameNavigated
frame
)
;
}
#
onFrameDetached
(
frameId
:
string
reason
:
Protocol
.
Page
.
FrameDetachedEventReason
)
:
void
{
const
frame
=
this
.
#
frames
.
get
(
frameId
)
;
if
(
reason
=
=
=
'
remove
'
)
{
if
(
frame
)
{
this
.
#
removeFramesRecursively
(
frame
)
;
}
}
else
if
(
reason
=
=
=
'
swap
'
)
{
this
.
emit
(
FrameManagerEmittedEvents
.
FrameSwapped
frame
)
;
}
}
#
onExecutionContextCreated
(
contextPayload
:
Protocol
.
Runtime
.
ExecutionContextDescription
session
:
CDPSession
)
:
void
{
const
auxData
=
contextPayload
.
auxData
as
{
frameId
?
:
string
}
|
undefined
;
const
frameId
=
auxData
&
&
auxData
.
frameId
;
const
frame
=
typeof
frameId
=
=
=
'
string
'
?
this
.
#
frames
.
get
(
frameId
)
:
undefined
;
let
world
:
IsolatedWorld
|
undefined
;
if
(
frame
)
{
if
(
frame
.
_client
(
)
!
=
=
session
)
{
return
;
}
if
(
contextPayload
.
auxData
&
&
!
!
contextPayload
.
auxData
[
'
isDefault
'
]
)
{
world
=
frame
.
worlds
[
MAIN_WORLD
]
;
}
else
if
(
contextPayload
.
name
=
=
=
UTILITY_WORLD_NAME
&
&
!
frame
.
worlds
[
PUPPETEER_WORLD
]
.
hasContext
(
)
)
{
world
=
frame
.
worlds
[
PUPPETEER_WORLD
]
;
}
}
const
context
=
new
ExecutionContext
(
frame
?
.
_client
(
)
|
|
this
.
#
client
contextPayload
world
)
;
if
(
world
)
{
world
.
setContext
(
context
)
;
}
const
key
=
{
session
.
id
(
)
}
:
{
contextPayload
.
id
}
;
this
.
#
contextIdToContext
.
set
(
key
context
)
;
}
#
onExecutionContextDestroyed
(
executionContextId
:
number
session
:
CDPSession
)
:
void
{
const
key
=
{
session
.
id
(
)
}
:
{
executionContextId
}
;
const
context
=
this
.
#
contextIdToContext
.
get
(
key
)
;
if
(
!
context
)
{
return
;
}
this
.
#
contextIdToContext
.
delete
(
key
)
;
if
(
context
.
_world
)
{
context
.
_world
.
clearContext
(
)
;
}
}
#
onExecutionContextsCleared
(
session
:
CDPSession
)
:
void
{
for
(
const
[
key
context
]
of
this
.
#
contextIdToContext
.
entries
(
)
)
{
if
(
context
.
_client
!
=
=
session
)
{
continue
;
}
if
(
context
.
_world
)
{
context
.
_world
.
clearContext
(
)
;
}
this
.
#
contextIdToContext
.
delete
(
key
)
;
}
}
#
removeFramesRecursively
(
frame
:
Frame
)
:
void
{
for
(
const
child
of
frame
.
childFrames
(
)
)
{
this
.
#
removeFramesRecursively
(
child
)
;
}
frame
.
_detach
(
)
;
this
.
#
frames
.
delete
(
frame
.
_id
)
;
this
.
emit
(
FrameManagerEmittedEvents
.
FrameDetached
frame
)
;
}
}
export
interface
FrameWaitForFunctionOptions
{
polling
?
:
string
|
number
;
timeout
?
:
number
;
}
export
interface
FrameAddScriptTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
type
?
:
string
;
}
export
interface
FrameAddStyleTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
}
export
class
Frame
{
#
parentFrame
:
Frame
|
null
;
#
url
=
'
'
;
#
detached
=
false
;
#
client
!
:
CDPSession
;
worlds
!
:
IsolatedWorldChart
;
_frameManager
:
FrameManager
;
_id
:
string
;
_loaderId
=
'
'
;
_name
?
:
string
;
_hasStartedLoading
=
false
;
_lifecycleEvents
=
new
Set
<
string
>
(
)
;
_childFrames
:
Set
<
Frame
>
;
constructor
(
frameManager
:
FrameManager
parentFrame
:
Frame
|
null
frameId
:
string
client
:
CDPSession
)
{
this
.
_frameManager
=
frameManager
;
this
.
#
parentFrame
=
parentFrame
?
?
null
;
this
.
#
url
=
'
'
;
this
.
_id
=
frameId
;
this
.
#
detached
=
false
;
this
.
_loaderId
=
'
'
;
this
.
_childFrames
=
new
Set
(
)
;
if
(
this
.
#
parentFrame
)
{
this
.
#
parentFrame
.
_childFrames
.
add
(
this
)
;
}
this
.
updateClient
(
client
)
;
}
updateClient
(
client
:
CDPSession
)
:
void
{
this
.
#
client
=
client
;
this
.
worlds
=
{
[
MAIN_WORLD
]
:
new
IsolatedWorld
(
client
this
.
_frameManager
this
this
.
_frameManager
.
timeoutSettings
)
[
PUPPETEER_WORLD
]
:
new
IsolatedWorld
(
client
this
.
_frameManager
this
this
.
_frameManager
.
timeoutSettings
)
}
;
}
page
(
)
:
Page
{
return
this
.
_frameManager
.
page
(
)
;
}
isOOPFrame
(
)
:
boolean
{
return
this
.
#
client
!
=
=
this
.
_frameManager
.
client
;
}
async
goto
(
url
:
string
options
:
{
referer
?
:
string
;
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
HTTPResponse
|
null
>
{
assertNoLegacyNavigationOptions
(
options
)
;
const
{
referer
=
this
.
_frameManager
.
networkManager
.
extraHTTPHeaders
(
)
[
'
referer
'
]
waitUntil
=
[
'
load
'
]
timeout
=
this
.
_frameManager
.
timeoutSettings
.
navigationTimeout
(
)
}
=
options
;
let
ensureNewDocumentNavigation
=
false
;
const
watcher
=
new
LifecycleWatcher
(
this
.
_frameManager
this
waitUntil
timeout
)
;
let
error
=
await
Promise
.
race
(
[
navigate
(
this
.
#
client
url
referer
this
.
_id
)
watcher
.
timeoutOrTerminationPromise
(
)
]
)
;
if
(
!
error
)
{
error
=
await
Promise
.
race
(
[
watcher
.
timeoutOrTerminationPromise
(
)
ensureNewDocumentNavigation
?
watcher
.
newDocumentNavigationPromise
(
)
:
watcher
.
sameDocumentNavigationPromise
(
)
]
)
;
}
try
{
if
(
error
)
{
throw
error
;
}
return
await
watcher
.
navigationResponse
(
)
;
}
finally
{
watcher
.
dispose
(
)
;
}
async
function
navigate
(
client
:
CDPSession
url
:
string
referrer
:
string
|
undefined
frameId
:
string
)
:
Promise
<
Error
|
null
>
{
try
{
const
response
=
await
client
.
send
(
'
Page
.
navigate
'
{
url
referrer
frameId
}
)
;
ensureNewDocumentNavigation
=
!
!
response
.
loaderId
;
return
response
.
errorText
?
new
Error
(
{
response
.
errorText
}
at
{
url
}
)
:
null
;
}
catch
(
error
)
{
if
(
isErrorLike
(
error
)
)
{
return
error
;
}
throw
error
;
}
}
}
async
waitForNavigation
(
options
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
HTTPResponse
|
null
>
{
assertNoLegacyNavigationOptions
(
options
)
;
const
{
waitUntil
=
[
'
load
'
]
timeout
=
this
.
_frameManager
.
timeoutSettings
.
navigationTimeout
(
)
}
=
options
;
const
watcher
=
new
LifecycleWatcher
(
this
.
_frameManager
this
waitUntil
timeout
)
;
const
error
=
await
Promise
.
race
(
[
watcher
.
timeoutOrTerminationPromise
(
)
watcher
.
sameDocumentNavigationPromise
(
)
watcher
.
newDocumentNavigationPromise
(
)
]
)
;
try
{
if
(
error
)
{
throw
error
;
}
return
await
watcher
.
navigationResponse
(
)
;
}
finally
{
watcher
.
dispose
(
)
;
}
}
_client
(
)
:
CDPSession
{
return
this
.
#
client
;
}
executionContext
(
)
:
Promise
<
ExecutionContext
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
executionContext
(
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
(
selector
)
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
(
selector
)
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
eval
(
selector
pageFunction
.
.
.
args
)
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
eval
(
selector
pageFunction
.
.
.
args
)
;
}
async
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
x
(
expression
)
;
}
async
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
:
WaitForSelectorOptions
=
{
}
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
const
handle
=
await
this
.
worlds
[
PUPPETEER_WORLD
]
.
waitForSelector
(
selector
options
)
;
if
(
!
handle
)
{
return
null
;
}
const
mainHandle
=
(
await
this
.
worlds
[
MAIN_WORLD
]
.
adoptHandle
(
handle
)
)
as
ElementHandle
<
NodeFor
<
Selector
>
>
;
await
handle
.
dispose
(
)
;
return
mainHandle
;
}
async
waitForXPath
(
xpath
:
string
options
:
WaitForSelectorOptions
=
{
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
{
if
(
xpath
.
startsWith
(
'
/
/
'
)
)
{
xpath
=
.
{
xpath
}
;
}
return
this
.
waitForSelector
(
xpath
/
{
xpath
}
options
)
;
}
waitForFunction
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
options
:
FrameWaitForFunctionOptions
=
{
}
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
waitForFunction
(
pageFunction
options
.
.
.
args
)
as
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
}
async
content
(
)
:
Promise
<
string
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
content
(
)
;
}
async
setContent
(
html
:
string
options
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
setContent
(
html
options
)
;
}
name
(
)
:
string
{
return
this
.
_name
|
|
'
'
;
}
url
(
)
:
string
{
return
this
.
#
url
;
}
parentFrame
(
)
:
Frame
|
null
{
return
this
.
#
parentFrame
;
}
childFrames
(
)
:
Frame
[
]
{
return
Array
.
from
(
this
.
_childFrames
)
;
}
isDetached
(
)
:
boolean
{
return
this
.
#
detached
;
}
async
addScriptTag
(
options
:
FrameAddScriptTagOptions
)
:
Promise
<
ElementHandle
<
HTMLScriptElement
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
addScriptTag
(
options
)
;
}
async
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
|
HTMLLinkElement
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
addStyleTag
(
options
)
;
}
async
click
(
selector
:
string
options
:
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
=
{
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
click
(
selector
options
)
;
}
async
focus
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
focus
(
selector
)
;
}
async
hover
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
hover
(
selector
)
;
}
select
(
selector
:
string
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
select
(
selector
.
.
.
values
)
;
}
async
tap
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
tap
(
selector
)
;
}
async
type
(
selector
:
string
text
:
string
options
?
:
{
delay
:
number
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
type
(
selector
text
options
)
;
}
waitForTimeout
(
milliseconds
:
number
)
:
Promise
<
void
>
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
milliseconds
)
;
}
)
;
}
async
title
(
)
:
Promise
<
string
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
title
(
)
;
}
_navigated
(
framePayload
:
Protocol
.
Page
.
Frame
)
:
void
{
this
.
_name
=
framePayload
.
name
;
this
.
#
url
=
{
framePayload
.
url
}
{
framePayload
.
urlFragment
|
|
'
'
}
;
}
_navigatedWithinDocument
(
url
:
string
)
:
void
{
this
.
#
url
=
url
;
}
_onLifecycleEvent
(
loaderId
:
string
name
:
string
)
:
void
{
if
(
name
=
=
=
'
init
'
)
{
this
.
_loaderId
=
loaderId
;
this
.
_lifecycleEvents
.
clear
(
)
;
}
this
.
_lifecycleEvents
.
add
(
name
)
;
}
_onLoadingStopped
(
)
:
void
{
this
.
_lifecycleEvents
.
add
(
'
DOMContentLoaded
'
)
;
this
.
_lifecycleEvents
.
add
(
'
load
'
)
;
}
_onLoadingStarted
(
)
:
void
{
this
.
_hasStartedLoading
=
true
;
}
_detach
(
)
:
void
{
this
.
#
detached
=
true
;
this
.
worlds
[
MAIN_WORLD
]
.
_detach
(
)
;
this
.
worlds
[
PUPPETEER_WORLD
]
.
_detach
(
)
;
if
(
this
.
#
parentFrame
)
{
this
.
#
parentFrame
.
_childFrames
.
delete
(
this
)
;
}
this
.
#
parentFrame
=
null
;
}
}
function
assertNoLegacyNavigationOptions
(
options
:
{
[
optionName
:
string
]
:
unknown
;
}
)
:
void
{
assert
(
options
[
'
networkIdleTimeout
'
]
=
=
=
undefined
'
ERROR
:
networkIdleTimeout
option
is
no
longer
supported
.
'
)
;
assert
(
options
[
'
networkIdleInflight
'
]
=
=
=
undefined
'
ERROR
:
networkIdleInflight
option
is
no
longer
supported
.
'
)
;
assert
(
options
[
'
waitUntil
'
]
!
=
=
'
networkidle
'
'
ERROR
:
"
networkidle
"
option
is
no
longer
supported
.
Use
"
networkidle2
"
instead
'
)
;
}
