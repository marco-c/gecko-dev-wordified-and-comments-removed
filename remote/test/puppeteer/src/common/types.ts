import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
LazyArg
}
from
'
.
/
LazyArg
.
js
'
;
export
type
Awaitable
<
T
>
=
T
|
PromiseLike
<
T
>
;
export
type
HandleFor
<
T
>
=
T
extends
Node
?
ElementHandle
<
T
>
:
JSHandle
<
T
>
;
export
type
HandleOr
<
T
>
=
HandleFor
<
T
>
|
JSHandle
<
T
>
|
T
;
export
type
FlattenHandle
<
T
>
=
T
extends
HandleOr
<
infer
U
>
?
U
:
never
;
export
type
FlattenLazyArg
<
T
>
=
T
extends
LazyArg
<
infer
U
>
?
U
:
T
;
export
type
InnerParams
<
T
extends
unknown
[
]
>
=
{
[
K
in
keyof
T
]
:
FlattenHandle
<
FlattenLazyArg
<
FlattenHandle
<
T
[
K
]
>
>
>
;
}
;
export
type
EvaluateFunc
<
T
extends
unknown
[
]
>
=
(
.
.
.
params
:
InnerParams
<
T
>
)
=
>
Awaitable
<
unknown
>
;
export
type
NodeFor
<
Selector
extends
string
>
=
Selector
extends
keyof
HTMLElementTagNameMap
?
HTMLElementTagNameMap
[
Selector
]
:
Selector
extends
keyof
SVGElementTagNameMap
?
SVGElementTagNameMap
[
Selector
]
:
Element
;
