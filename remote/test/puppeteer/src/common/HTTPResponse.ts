import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
Frame
}
from
'
.
/
FrameManager
.
js
'
;
import
{
HTTPRequest
}
from
'
.
/
HTTPRequest
.
js
'
;
import
{
SecurityDetails
}
from
'
.
/
SecurityDetails
.
js
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ProtocolError
}
from
'
.
/
Errors
.
js
'
;
export
interface
RemoteAddress
{
ip
?
:
string
;
port
?
:
number
;
}
interface
CDPSession
extends
EventEmitter
{
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
export
class
HTTPResponse
{
#
client
:
CDPSession
;
#
request
:
HTTPRequest
;
#
contentPromise
:
Promise
<
Buffer
>
|
null
=
null
;
#
bodyLoadedPromise
:
Promise
<
Error
|
void
>
;
#
bodyLoadedPromiseFulfill
:
(
err
:
Error
|
void
)
=
>
void
=
(
)
=
>
{
}
;
#
remoteAddress
:
RemoteAddress
;
#
status
:
number
;
#
statusText
:
string
;
#
url
:
string
;
#
fromDiskCache
:
boolean
;
#
fromServiceWorker
:
boolean
;
#
headers
:
Record
<
string
string
>
=
{
}
;
#
securityDetails
:
SecurityDetails
|
null
;
#
timing
:
Protocol
.
Network
.
ResourceTiming
|
null
;
constructor
(
client
:
CDPSession
request
:
HTTPRequest
responsePayload
:
Protocol
.
Network
.
Response
extraInfo
:
Protocol
.
Network
.
ResponseReceivedExtraInfoEvent
|
null
)
{
this
.
#
client
=
client
;
this
.
#
request
=
request
;
this
.
#
bodyLoadedPromise
=
new
Promise
(
fulfill
=
>
{
this
.
#
bodyLoadedPromiseFulfill
=
fulfill
;
}
)
;
this
.
#
remoteAddress
=
{
ip
:
responsePayload
.
remoteIPAddress
port
:
responsePayload
.
remotePort
}
;
this
.
#
statusText
=
this
.
#
parseStatusTextFromExtrInfo
(
extraInfo
)
|
|
responsePayload
.
statusText
;
this
.
#
url
=
request
.
url
(
)
;
this
.
#
fromDiskCache
=
!
!
responsePayload
.
fromDiskCache
;
this
.
#
fromServiceWorker
=
!
!
responsePayload
.
fromServiceWorker
;
this
.
#
status
=
extraInfo
?
extraInfo
.
statusCode
:
responsePayload
.
status
;
const
headers
=
extraInfo
?
extraInfo
.
headers
:
responsePayload
.
headers
;
for
(
const
[
key
value
]
of
Object
.
entries
(
headers
)
)
{
this
.
#
headers
[
key
.
toLowerCase
(
)
]
=
value
;
}
this
.
#
securityDetails
=
responsePayload
.
securityDetails
?
new
SecurityDetails
(
responsePayload
.
securityDetails
)
:
null
;
this
.
#
timing
=
responsePayload
.
timing
|
|
null
;
}
#
parseStatusTextFromExtrInfo
(
extraInfo
:
Protocol
.
Network
.
ResponseReceivedExtraInfoEvent
|
null
)
:
string
|
undefined
{
if
(
!
extraInfo
|
|
!
extraInfo
.
headersText
)
{
return
;
}
const
firstLine
=
extraInfo
.
headersText
.
split
(
'
\
r
'
1
)
[
0
]
;
if
(
!
firstLine
)
{
return
;
}
const
match
=
firstLine
.
match
(
/
[
^
]
*
[
^
]
*
(
.
*
)
/
)
;
if
(
!
match
)
{
return
;
}
const
statusText
=
match
[
1
]
;
if
(
!
statusText
)
{
return
;
}
return
statusText
;
}
_resolveBody
(
err
:
Error
|
null
)
:
void
{
if
(
err
)
{
return
this
.
#
bodyLoadedPromiseFulfill
(
err
)
;
}
return
this
.
#
bodyLoadedPromiseFulfill
(
)
;
}
remoteAddress
(
)
:
RemoteAddress
{
return
this
.
#
remoteAddress
;
}
url
(
)
:
string
{
return
this
.
#
url
;
}
ok
(
)
:
boolean
{
return
this
.
#
status
=
=
=
0
|
|
(
this
.
#
status
>
=
200
&
&
this
.
#
status
<
=
299
)
;
}
status
(
)
:
number
{
return
this
.
#
status
;
}
statusText
(
)
:
string
{
return
this
.
#
statusText
;
}
headers
(
)
:
Record
<
string
string
>
{
return
this
.
#
headers
;
}
securityDetails
(
)
:
SecurityDetails
|
null
{
return
this
.
#
securityDetails
;
}
timing
(
)
:
Protocol
.
Network
.
ResourceTiming
|
null
{
return
this
.
#
timing
;
}
buffer
(
)
:
Promise
<
Buffer
>
{
if
(
!
this
.
#
contentPromise
)
{
this
.
#
contentPromise
=
this
.
#
bodyLoadedPromise
.
then
(
async
error
=
>
{
if
(
error
)
{
throw
error
;
}
try
{
const
response
=
await
this
.
#
client
.
send
(
'
Network
.
getResponseBody
'
{
requestId
:
this
.
#
request
.
_requestId
}
)
;
return
Buffer
.
from
(
response
.
body
response
.
base64Encoded
?
'
base64
'
:
'
utf8
'
)
;
}
catch
(
error
)
{
if
(
error
instanceof
ProtocolError
&
&
error
.
originalMessage
=
=
=
'
No
resource
with
given
identifier
found
'
)
{
throw
new
ProtocolError
(
'
Could
not
load
body
for
this
request
.
This
might
happen
if
the
request
is
a
preflight
request
.
'
)
;
}
throw
error
;
}
}
)
;
}
return
this
.
#
contentPromise
;
}
async
text
(
)
:
Promise
<
string
>
{
const
content
=
await
this
.
buffer
(
)
;
return
content
.
toString
(
'
utf8
'
)
;
}
async
json
(
)
:
Promise
<
any
>
{
const
content
=
await
this
.
text
(
)
;
return
JSON
.
parse
(
content
)
;
}
request
(
)
:
HTTPRequest
{
return
this
.
#
request
;
}
fromCache
(
)
:
boolean
{
return
this
.
#
fromDiskCache
|
|
this
.
#
request
.
_fromMemoryCache
;
}
fromServiceWorker
(
)
:
boolean
{
return
this
.
#
fromServiceWorker
;
}
frame
(
)
:
Frame
|
null
{
return
this
.
#
request
.
frame
(
)
;
}
}
