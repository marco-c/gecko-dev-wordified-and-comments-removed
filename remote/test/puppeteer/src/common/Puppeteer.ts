import
{
Browser
}
from
'
.
/
Browser
.
js
'
;
import
{
BrowserConnectOptions
_connectToBrowser
}
from
'
.
/
BrowserConnector
.
js
'
;
import
{
ConnectionTransport
}
from
'
.
/
ConnectionTransport
.
js
'
;
import
{
devices
}
from
'
.
/
DeviceDescriptors
.
js
'
;
import
{
errors
}
from
'
.
/
Errors
.
js
'
;
import
{
networkConditions
}
from
'
.
/
NetworkConditions
.
js
'
;
import
{
clearCustomQueryHandlers
CustomQueryHandler
customQueryHandlerNames
registerCustomQueryHandler
unregisterCustomQueryHandler
}
from
'
.
/
QueryHandler
.
js
'
;
export
interface
CommonPuppeteerSettings
{
isPuppeteerCore
:
boolean
;
}
export
interface
ConnectOptions
extends
BrowserConnectOptions
{
browserWSEndpoint
?
:
string
;
browserURL
?
:
string
;
transport
?
:
ConnectionTransport
;
}
export
class
Puppeteer
{
protected
_isPuppeteerCore
:
boolean
;
protected
_changedProduct
=
false
;
constructor
(
settings
:
CommonPuppeteerSettings
)
{
this
.
_isPuppeteerCore
=
settings
.
isPuppeteerCore
;
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
}
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
{
return
_connectToBrowser
(
options
)
;
}
get
devices
(
)
:
typeof
devices
{
return
devices
;
}
get
errors
(
)
:
typeof
errors
{
return
errors
;
}
get
networkConditions
(
)
:
typeof
networkConditions
{
return
networkConditions
;
}
registerCustomQueryHandler
(
name
:
string
queryHandler
:
CustomQueryHandler
)
:
void
{
return
registerCustomQueryHandler
(
name
queryHandler
)
;
}
unregisterCustomQueryHandler
(
name
:
string
)
:
void
{
return
unregisterCustomQueryHandler
(
name
)
;
}
customQueryHandlerNames
(
)
:
string
[
]
{
return
customQueryHandlerNames
(
)
;
}
clearCustomQueryHandlers
(
)
:
void
{
return
clearCustomQueryHandlers
(
)
;
}
}
