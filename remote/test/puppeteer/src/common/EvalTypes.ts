import
{
JSHandle
ElementHandle
}
from
'
.
/
JSHandle
.
js
'
;
export
type
EvaluateFn
<
T
=
unknown
>
=
|
string
|
(
(
arg1
:
T
.
.
.
args
:
unknown
[
]
)
=
>
unknown
)
;
export
type
UnwrapPromiseLike
<
T
>
=
T
extends
PromiseLike
<
infer
U
>
?
U
:
T
;
export
type
EvaluateFnReturnType
<
T
extends
EvaluateFn
>
=
T
extends
(
.
.
.
args
:
unknown
[
]
)
=
>
infer
R
?
R
:
unknown
;
export
type
EvaluateHandleFn
=
string
|
(
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
)
;
export
type
Serializable
=
|
number
|
string
|
boolean
|
null
|
BigInt
|
JSONArray
|
JSONObject
;
export
type
JSONArray
=
Serializable
[
]
;
export
interface
JSONObject
{
[
key
:
string
]
:
Serializable
;
}
export
type
SerializableOrJSHandle
=
Serializable
|
JSHandle
;
export
type
WrapElementHandle
<
X
>
=
X
extends
Element
?
ElementHandle
<
X
>
:
X
;
export
type
UnwrapElementHandle
<
X
>
=
X
extends
ElementHandle
<
infer
E
>
?
E
:
X
;
