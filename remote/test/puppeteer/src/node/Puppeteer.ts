import
{
Puppeteer
CommonPuppeteerSettings
ConnectOptions
}
from
'
.
.
/
common
/
Puppeteer
.
js
'
;
import
{
BrowserFetcher
BrowserFetcherOptions
}
from
'
.
/
BrowserFetcher
.
js
'
;
import
{
LaunchOptions
BrowserLaunchArgumentOptions
}
from
'
.
/
LaunchOptions
.
js
'
;
import
{
BrowserConnectOptions
}
from
'
.
.
/
common
/
BrowserConnector
.
js
'
;
import
{
Browser
}
from
'
.
.
/
common
/
Browser
.
js
'
;
import
Launcher
{
ProductLauncher
}
from
'
.
/
Launcher
.
js
'
;
import
{
PUPPETEER_REVISIONS
}
from
'
.
.
/
revisions
.
js
'
;
import
{
Product
}
from
'
.
.
/
common
/
Product
.
js
'
;
export
class
PuppeteerNode
extends
Puppeteer
{
private
_lazyLauncher
:
ProductLauncher
;
private
_projectRoot
:
string
;
private
__productName
?
:
Product
;
_preferredRevision
:
string
;
constructor
(
settings
:
{
projectRoot
:
string
;
preferredRevision
:
string
;
productName
?
:
Product
;
}
&
CommonPuppeteerSettings
)
{
const
{
projectRoot
preferredRevision
productName
.
.
.
commonSettings
}
=
settings
;
super
(
commonSettings
)
;
this
.
_projectRoot
=
projectRoot
;
this
.
__productName
=
productName
;
this
.
_preferredRevision
=
preferredRevision
;
}
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
{
if
(
options
.
product
)
this
.
_productName
=
options
.
product
;
return
super
.
connect
(
options
)
;
}
get
_productName
(
)
:
Product
{
return
this
.
__productName
;
}
set
_productName
(
name
:
Product
)
{
if
(
this
.
__productName
!
=
=
name
)
this
.
_changedProduct
=
true
;
this
.
__productName
=
name
;
}
launch
(
options
:
LaunchOptions
&
BrowserLaunchArgumentOptions
&
BrowserConnectOptions
&
{
product
?
:
Product
;
extraPrefsFirefox
?
:
Record
<
string
unknown
>
;
}
=
{
}
)
:
Promise
<
Browser
>
{
if
(
options
.
product
)
this
.
_productName
=
options
.
product
;
return
this
.
_launcher
.
launch
(
options
)
;
}
executablePath
(
)
:
string
{
return
this
.
_launcher
.
executablePath
(
)
;
}
get
_launcher
(
)
:
ProductLauncher
{
if
(
!
this
.
_lazyLauncher
|
|
this
.
_lazyLauncher
.
product
!
=
=
this
.
_productName
|
|
this
.
_changedProduct
)
{
switch
(
this
.
_productName
)
{
case
'
firefox
'
:
this
.
_preferredRevision
=
PUPPETEER_REVISIONS
.
firefox
;
break
;
case
'
chrome
'
:
default
:
this
.
_preferredRevision
=
PUPPETEER_REVISIONS
.
chromium
;
}
this
.
_changedProduct
=
false
;
this
.
_lazyLauncher
=
Launcher
(
this
.
_projectRoot
this
.
_preferredRevision
this
.
_isPuppeteerCore
this
.
_productName
)
;
}
return
this
.
_lazyLauncher
;
}
get
product
(
)
:
string
{
return
this
.
_launcher
.
product
;
}
defaultArgs
(
options
:
BrowserLaunchArgumentOptions
=
{
}
)
:
string
[
]
{
return
this
.
_launcher
.
defaultArgs
(
options
)
;
}
createBrowserFetcher
(
options
:
BrowserFetcherOptions
)
:
BrowserFetcher
{
return
new
BrowserFetcher
(
this
.
_projectRoot
options
)
;
}
}
