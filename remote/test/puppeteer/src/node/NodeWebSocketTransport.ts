import
{
ConnectionTransport
}
from
'
.
.
/
common
/
ConnectionTransport
.
js
'
;
import
NodeWebSocket
from
'
ws
'
;
export
class
NodeWebSocketTransport
implements
ConnectionTransport
{
static
create
(
url
:
string
)
:
Promise
<
NodeWebSocketTransport
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
ws
=
new
NodeWebSocket
(
url
[
]
{
perMessageDeflate
:
false
maxPayload
:
256
*
1024
*
1024
}
)
;
ws
.
addEventListener
(
'
open
'
(
)
=
>
resolve
(
new
NodeWebSocketTransport
(
ws
)
)
)
;
ws
.
addEventListener
(
'
error
'
reject
)
;
}
)
;
}
private
_ws
:
NodeWebSocket
;
onmessage
?
:
(
message
:
string
)
=
>
void
;
onclose
?
:
(
)
=
>
void
;
constructor
(
ws
:
NodeWebSocket
)
{
this
.
_ws
=
ws
;
this
.
_ws
.
addEventListener
(
'
message
'
(
event
)
=
>
{
if
(
this
.
onmessage
)
this
.
onmessage
.
call
(
null
event
.
data
)
;
}
)
;
this
.
_ws
.
addEventListener
(
'
close
'
(
)
=
>
{
if
(
this
.
onclose
)
this
.
onclose
.
call
(
null
)
;
}
)
;
this
.
_ws
.
addEventListener
(
'
error
'
(
)
=
>
{
}
)
;
this
.
onmessage
=
null
;
this
.
onclose
=
null
;
}
send
(
message
:
string
)
:
void
{
this
.
_ws
.
send
(
message
)
;
}
close
(
)
:
void
{
this
.
_ws
.
close
(
)
;
}
}
