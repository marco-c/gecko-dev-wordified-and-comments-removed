import
{
assert
}
from
'
.
/
helper
'
;
import
{
CDPSession
}
from
'
.
/
Connection
'
;
export
enum
DialogType
{
Alert
=
'
alert
'
BeforeUnload
=
'
beforeunload
'
Confirm
=
'
confirm
'
Prompt
=
'
prompt
'
}
export
class
Dialog
{
static
Type
=
DialogType
;
private
_client
:
CDPSession
;
private
_type
:
DialogType
;
private
_message
:
string
;
private
_defaultValue
:
string
;
private
_handled
=
false
;
constructor
(
client
:
CDPSession
type
:
DialogType
message
:
string
defaultValue
=
'
'
)
{
this
.
_client
=
client
;
this
.
_type
=
type
;
this
.
_message
=
message
;
this
.
_defaultValue
=
defaultValue
;
}
type
(
)
:
DialogType
{
return
this
.
_type
;
}
message
(
)
:
string
{
return
this
.
_message
;
}
defaultValue
(
)
:
string
{
return
this
.
_defaultValue
;
}
async
accept
(
promptText
?
:
string
)
:
Promise
<
void
>
{
assert
(
!
this
.
_handled
'
Cannot
accept
dialog
which
is
already
handled
!
'
)
;
this
.
_handled
=
true
;
await
this
.
_client
.
send
(
'
Page
.
handleJavaScriptDialog
'
{
accept
:
true
promptText
:
promptText
}
)
;
}
async
dismiss
(
)
:
Promise
<
void
>
{
assert
(
!
this
.
_handled
'
Cannot
dismiss
dialog
which
is
already
handled
!
'
)
;
this
.
_handled
=
true
;
await
this
.
_client
.
send
(
'
Page
.
handleJavaScriptDialog
'
{
accept
:
false
}
)
;
}
}
