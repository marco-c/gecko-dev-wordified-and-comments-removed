const
api
=
require
(
'
.
/
api
'
)
;
import
{
helper
}
from
'
.
/
common
/
helper
'
;
import
{
Puppeteer
}
from
'
.
/
common
/
Puppeteer
'
;
import
{
PUPPETEER_REVISIONS
}
from
'
.
/
revisions
'
;
import
pkgDir
from
'
pkg
-
dir
'
;
export
const
initializePuppeteer
=
(
packageName
:
string
)
:
Puppeteer
=
>
{
const
puppeteerRootDirectory
=
pkgDir
.
sync
(
__dirname
)
;
for
(
const
className
in
api
)
{
if
(
typeof
api
[
className
]
=
=
=
'
function
'
)
helper
.
installAsyncStackHooks
(
api
[
className
]
)
;
}
let
preferredRevision
=
PUPPETEER_REVISIONS
.
chromium
;
const
isPuppeteerCore
=
packageName
=
=
=
'
puppeteer
-
core
'
;
const
product
=
isPuppeteerCore
?
undefined
:
process
.
env
.
PUPPETEER_PRODUCT
|
|
process
.
env
.
npm_config_puppeteer_product
|
|
process
.
env
.
npm_package_config_puppeteer_product
;
if
(
!
isPuppeteerCore
&
&
product
=
=
=
'
firefox
'
)
preferredRevision
=
PUPPETEER_REVISIONS
.
firefox
;
const
puppeteer
=
new
Puppeteer
(
puppeteerRootDirectory
preferredRevision
isPuppeteerCore
product
)
;
puppeteer
.
_lazyLauncher
=
undefined
;
return
puppeteer
;
}
;
