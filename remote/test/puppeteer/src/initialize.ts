const
api
=
require
(
'
.
/
api
'
)
;
import
{
helper
}
from
'
.
/
common
/
helper
'
;
import
{
Puppeteer
}
from
'
.
/
common
/
Puppeteer
'
;
interface
InitOptions
{
packageJson
:
{
puppeteer
:
{
chromium_revision
:
string
;
firefox_revision
:
string
;
}
;
name
:
string
;
}
;
rootDirectory
:
string
;
}
export
const
initializePuppeteer
=
(
options
:
InitOptions
)
:
Puppeteer
=
>
{
const
{
packageJson
rootDirectory
}
=
options
;
for
(
const
className
in
api
)
{
if
(
typeof
api
[
className
]
=
=
=
'
function
'
)
helper
.
installAsyncStackHooks
(
api
[
className
]
)
;
}
let
preferredRevision
=
packageJson
.
puppeteer
.
chromium_revision
;
const
isPuppeteerCore
=
packageJson
.
name
=
=
=
'
puppeteer
-
core
'
;
const
product
=
isPuppeteerCore
?
undefined
:
process
.
env
.
PUPPETEER_PRODUCT
|
|
process
.
env
.
npm_config_puppeteer_product
|
|
process
.
env
.
npm_package_config_puppeteer_product
;
if
(
!
isPuppeteerCore
&
&
product
=
=
=
'
firefox
'
)
preferredRevision
=
packageJson
.
puppeteer
.
firefox_revision
;
const
puppeteer
=
new
Puppeteer
(
rootDirectory
preferredRevision
isPuppeteerCore
product
)
;
puppeteer
.
_lazyLauncher
=
undefined
;
return
puppeteer
;
}
;
