type
binary
=
string
;
declare
global
{
module
Protocol
{
export
module
Accessibility
{
export
type
AXNodeId
=
string
;
export
type
AXValueType
=
"
boolean
"
|
"
tristate
"
|
"
booleanOrUndefined
"
|
"
idref
"
|
"
idrefList
"
|
"
integer
"
|
"
node
"
|
"
nodeList
"
|
"
number
"
|
"
string
"
|
"
computedString
"
|
"
token
"
|
"
tokenList
"
|
"
domRelation
"
|
"
role
"
|
"
internalRole
"
|
"
valueUndefined
"
;
export
type
AXValueSourceType
=
"
attribute
"
|
"
implicit
"
|
"
style
"
|
"
contents
"
|
"
placeholder
"
|
"
relatedElement
"
;
export
type
AXValueNativeSourceType
=
"
figcaption
"
|
"
label
"
|
"
labelfor
"
|
"
labelwrapped
"
|
"
legend
"
|
"
tablecaption
"
|
"
title
"
|
"
other
"
;
export
interface
AXValueSource
{
type
:
AXValueSourceType
;
value
?
:
AXValue
;
attribute
?
:
string
;
attributeValue
?
:
AXValue
;
superseded
?
:
boolean
;
nativeSource
?
:
AXValueNativeSourceType
;
nativeSourceValue
?
:
AXValue
;
invalid
?
:
boolean
;
invalidReason
?
:
string
;
}
export
interface
AXRelatedNode
{
backendDOMNodeId
:
DOM
.
BackendNodeId
;
idref
?
:
string
;
text
?
:
string
;
}
export
interface
AXProperty
{
name
:
AXPropertyName
;
value
:
AXValue
;
}
export
interface
AXValue
{
type
:
AXValueType
;
value
?
:
any
;
relatedNodes
?
:
AXRelatedNode
[
]
;
sources
?
:
AXValueSource
[
]
;
}
export
type
AXPropertyName
=
"
busy
"
|
"
disabled
"
|
"
editable
"
|
"
focusable
"
|
"
focused
"
|
"
hidden
"
|
"
hiddenRoot
"
|
"
invalid
"
|
"
keyshortcuts
"
|
"
settable
"
|
"
roledescription
"
|
"
live
"
|
"
atomic
"
|
"
relevant
"
|
"
root
"
|
"
autocomplete
"
|
"
hasPopup
"
|
"
level
"
|
"
multiselectable
"
|
"
orientation
"
|
"
multiline
"
|
"
readonly
"
|
"
required
"
|
"
valuemin
"
|
"
valuemax
"
|
"
valuetext
"
|
"
checked
"
|
"
expanded
"
|
"
modal
"
|
"
pressed
"
|
"
selected
"
|
"
activedescendant
"
|
"
controls
"
|
"
describedby
"
|
"
details
"
|
"
errormessage
"
|
"
flowto
"
|
"
labelledby
"
|
"
owns
"
;
export
interface
AXNode
{
nodeId
:
AXNodeId
;
ignored
:
boolean
;
ignoredReasons
?
:
AXProperty
[
]
;
role
?
:
AXValue
;
name
?
:
AXValue
;
description
?
:
AXValue
;
value
?
:
AXValue
;
properties
?
:
AXProperty
[
]
;
childIds
?
:
AXNodeId
[
]
;
backendDOMNodeId
?
:
DOM
.
BackendNodeId
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getPartialAXTreeParameters
=
{
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
fetchRelatives
?
:
boolean
;
}
export
type
getPartialAXTreeReturnValue
=
{
nodes
:
AXNode
[
]
;
}
export
type
getFullAXTreeParameters
=
{
}
export
type
getFullAXTreeReturnValue
=
{
nodes
:
AXNode
[
]
;
}
}
export
module
Animation
{
export
interface
Animation
{
id
:
string
;
name
:
string
;
pausedState
:
boolean
;
playState
:
string
;
playbackRate
:
number
;
startTime
:
number
;
currentTime
:
number
;
type
:
"
CSSTransition
"
|
"
CSSAnimation
"
|
"
WebAnimation
"
;
source
?
:
AnimationEffect
;
cssId
?
:
string
;
}
export
interface
AnimationEffect
{
delay
:
number
;
endDelay
:
number
;
iterationStart
:
number
;
iterations
:
number
;
duration
:
number
;
direction
:
string
;
fill
:
string
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
keyframesRule
?
:
KeyframesRule
;
easing
:
string
;
}
export
interface
KeyframesRule
{
name
?
:
string
;
keyframes
:
KeyframeStyle
[
]
;
}
export
interface
KeyframeStyle
{
offset
:
string
;
easing
:
string
;
}
export
type
animationCanceledPayload
=
{
id
:
string
;
}
export
type
animationCreatedPayload
=
{
id
:
string
;
}
export
type
animationStartedPayload
=
{
animation
:
Animation
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getCurrentTimeParameters
=
{
id
:
string
;
}
export
type
getCurrentTimeReturnValue
=
{
currentTime
:
number
;
}
export
type
getPlaybackRateParameters
=
{
}
export
type
getPlaybackRateReturnValue
=
{
playbackRate
:
number
;
}
export
type
releaseAnimationsParameters
=
{
animations
:
string
[
]
;
}
export
type
releaseAnimationsReturnValue
=
{
}
export
type
resolveAnimationParameters
=
{
animationId
:
string
;
}
export
type
resolveAnimationReturnValue
=
{
remoteObject
:
Runtime
.
RemoteObject
;
}
export
type
seekAnimationsParameters
=
{
animations
:
string
[
]
;
currentTime
:
number
;
}
export
type
seekAnimationsReturnValue
=
{
}
export
type
setPausedParameters
=
{
animations
:
string
[
]
;
paused
:
boolean
;
}
export
type
setPausedReturnValue
=
{
}
export
type
setPlaybackRateParameters
=
{
playbackRate
:
number
;
}
export
type
setPlaybackRateReturnValue
=
{
}
export
type
setTimingParameters
=
{
animationId
:
string
;
duration
:
number
;
delay
:
number
;
}
export
type
setTimingReturnValue
=
{
}
}
export
module
ApplicationCache
{
export
interface
ApplicationCacheResource
{
url
:
string
;
size
:
number
;
type
:
string
;
}
export
interface
ApplicationCache
{
manifestURL
:
string
;
size
:
number
;
creationTime
:
number
;
updateTime
:
number
;
resources
:
ApplicationCacheResource
[
]
;
}
export
interface
FrameWithManifest
{
frameId
:
Page
.
FrameId
;
manifestURL
:
string
;
status
:
number
;
}
export
type
applicationCacheStatusUpdatedPayload
=
{
frameId
:
Page
.
FrameId
;
manifestURL
:
string
;
status
:
number
;
}
export
type
networkStateUpdatedPayload
=
{
isNowOnline
:
boolean
;
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getApplicationCacheForFrameParameters
=
{
frameId
:
Page
.
FrameId
;
}
export
type
getApplicationCacheForFrameReturnValue
=
{
applicationCache
:
ApplicationCache
;
}
export
type
getFramesWithManifestsParameters
=
{
}
export
type
getFramesWithManifestsReturnValue
=
{
frameIds
:
FrameWithManifest
[
]
;
}
export
type
getManifestForFrameParameters
=
{
frameId
:
Page
.
FrameId
;
}
export
type
getManifestForFrameReturnValue
=
{
manifestURL
:
string
;
}
}
export
module
Audits
{
export
interface
AffectedCookie
{
name
:
string
;
path
:
string
;
domain
:
string
;
siteForCookies
?
:
string
;
}
export
type
SameSiteCookieExclusionReason
=
"
ExcludeSameSiteUnspecifiedTreatedAsLax
"
|
"
ExcludeSameSiteNoneInsecure
"
;
export
type
SameSiteCookieWarningReason
=
"
WarnSameSiteUnspecifiedCrossSiteContext
"
|
"
WarnSameSiteNoneInsecure
"
|
"
WarnSameSiteUnspecifiedLaxAllowUnsafe
"
|
"
WarnSameSiteCrossSchemeSecureUrlMethodUnsafe
"
|
"
WarnSameSiteCrossSchemeSecureUrlLax
"
|
"
WarnSameSiteCrossSchemeSecureUrlStrict
"
|
"
WarnSameSiteCrossSchemeInsecureUrlMethodUnsafe
"
|
"
WarnSameSiteCrossSchemeInsecureUrlLax
"
|
"
WarnSameSiteCrossSchemeInsecureUrlStrict
"
;
export
interface
SameSiteCookieIssueDetails
{
cookieWarningReasons
:
SameSiteCookieWarningReason
[
]
;
cookieExclusionReasons
:
SameSiteCookieExclusionReason
[
]
;
}
export
interface
AffectedResources
{
cookies
?
:
AffectedCookie
[
]
;
}
export
type
InspectorIssueCode
=
"
SameSiteCookieIssue
"
;
export
interface
InspectorIssueDetails
{
sameSiteCookieIssueDetails
?
:
SameSiteCookieIssueDetails
;
}
export
interface
InspectorIssue
{
code
:
InspectorIssueCode
;
details
:
InspectorIssueDetails
;
resources
:
AffectedResources
;
}
export
type
issueAddedPayload
=
{
issue
:
InspectorIssue
;
}
export
type
getEncodedResponseParameters
=
{
requestId
:
Network
.
RequestId
;
encoding
:
"
webp
"
|
"
jpeg
"
|
"
png
"
;
quality
?
:
number
;
sizeOnly
?
:
boolean
;
}
export
type
getEncodedResponseReturnValue
=
{
body
?
:
binary
;
originalSize
:
number
;
encodedSize
:
number
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
}
export
module
BackgroundService
{
export
type
ServiceName
=
"
backgroundFetch
"
|
"
backgroundSync
"
|
"
pushMessaging
"
|
"
notifications
"
|
"
paymentHandler
"
|
"
periodicBackgroundSync
"
;
export
interface
EventMetadata
{
key
:
string
;
value
:
string
;
}
export
interface
BackgroundServiceEvent
{
timestamp
:
Network
.
TimeSinceEpoch
;
origin
:
string
;
serviceWorkerRegistrationId
:
ServiceWorker
.
RegistrationID
;
service
:
ServiceName
;
eventName
:
string
;
instanceId
:
string
;
eventMetadata
:
EventMetadata
[
]
;
}
export
type
recordingStateChangedPayload
=
{
isRecording
:
boolean
;
service
:
ServiceName
;
}
export
type
backgroundServiceEventReceivedPayload
=
{
backgroundServiceEvent
:
BackgroundServiceEvent
;
}
export
type
startObservingParameters
=
{
service
:
ServiceName
;
}
export
type
startObservingReturnValue
=
{
}
export
type
stopObservingParameters
=
{
service
:
ServiceName
;
}
export
type
stopObservingReturnValue
=
{
}
export
type
setRecordingParameters
=
{
shouldRecord
:
boolean
;
service
:
ServiceName
;
}
export
type
setRecordingReturnValue
=
{
}
export
type
clearEventsParameters
=
{
service
:
ServiceName
;
}
export
type
clearEventsReturnValue
=
{
}
}
export
module
Browser
{
export
type
BrowserContextID
=
string
;
export
type
WindowID
=
number
;
export
type
WindowState
=
"
normal
"
|
"
minimized
"
|
"
maximized
"
|
"
fullscreen
"
;
export
interface
Bounds
{
left
?
:
number
;
top
?
:
number
;
width
?
:
number
;
height
?
:
number
;
windowState
?
:
WindowState
;
}
export
type
PermissionType
=
"
accessibilityEvents
"
|
"
audioCapture
"
|
"
backgroundSync
"
|
"
backgroundFetch
"
|
"
clipboardReadWrite
"
|
"
clipboardSanitizedWrite
"
|
"
durableStorage
"
|
"
flash
"
|
"
geolocation
"
|
"
midi
"
|
"
midiSysex
"
|
"
nfc
"
|
"
notifications
"
|
"
paymentHandler
"
|
"
periodicBackgroundSync
"
|
"
protectedMediaIdentifier
"
|
"
sensors
"
|
"
videoCapture
"
|
"
idleDetection
"
|
"
wakeLockScreen
"
|
"
wakeLockSystem
"
;
export
type
PermissionSetting
=
"
granted
"
|
"
denied
"
|
"
prompt
"
;
export
interface
PermissionDescriptor
{
name
:
string
;
sysex
?
:
boolean
;
userVisibleOnly
?
:
boolean
;
type
?
:
string
;
allowWithoutSanitization
?
:
boolean
;
}
export
interface
Bucket
{
low
:
number
;
high
:
number
;
count
:
number
;
}
export
interface
Histogram
{
name
:
string
;
sum
:
number
;
count
:
number
;
buckets
:
Bucket
[
]
;
}
export
type
setPermissionParameters
=
{
origin
?
:
string
;
permission
:
PermissionDescriptor
;
setting
:
PermissionSetting
;
browserContextId
?
:
BrowserContextID
;
}
export
type
setPermissionReturnValue
=
{
}
export
type
grantPermissionsParameters
=
{
origin
?
:
string
;
permissions
:
PermissionType
[
]
;
browserContextId
?
:
BrowserContextID
;
}
export
type
grantPermissionsReturnValue
=
{
}
export
type
resetPermissionsParameters
=
{
browserContextId
?
:
BrowserContextID
;
}
export
type
resetPermissionsReturnValue
=
{
}
export
type
setDownloadBehaviorParameters
=
{
behavior
:
"
deny
"
|
"
allow
"
|
"
allowAndName
"
|
"
default
"
;
browserContextId
?
:
BrowserContextID
;
downloadPath
?
:
string
;
}
export
type
setDownloadBehaviorReturnValue
=
{
}
export
type
closeParameters
=
{
}
export
type
closeReturnValue
=
{
}
export
type
crashParameters
=
{
}
export
type
crashReturnValue
=
{
}
export
type
crashGpuProcessParameters
=
{
}
export
type
crashGpuProcessReturnValue
=
{
}
export
type
getVersionParameters
=
{
}
export
type
getVersionReturnValue
=
{
protocolVersion
:
string
;
product
:
string
;
revision
:
string
;
userAgent
:
string
;
jsVersion
:
string
;
}
export
type
getBrowserCommandLineParameters
=
{
}
export
type
getBrowserCommandLineReturnValue
=
{
arguments
:
string
[
]
;
}
export
type
getHistogramsParameters
=
{
query
?
:
string
;
delta
?
:
boolean
;
}
export
type
getHistogramsReturnValue
=
{
histograms
:
Histogram
[
]
;
}
export
type
getHistogramParameters
=
{
name
:
string
;
delta
?
:
boolean
;
}
export
type
getHistogramReturnValue
=
{
histogram
:
Histogram
;
}
export
type
getWindowBoundsParameters
=
{
windowId
:
WindowID
;
}
export
type
getWindowBoundsReturnValue
=
{
bounds
:
Bounds
;
}
export
type
getWindowForTargetParameters
=
{
targetId
?
:
Target
.
TargetID
;
}
export
type
getWindowForTargetReturnValue
=
{
windowId
:
WindowID
;
bounds
:
Bounds
;
}
export
type
setWindowBoundsParameters
=
{
windowId
:
WindowID
;
bounds
:
Bounds
;
}
export
type
setWindowBoundsReturnValue
=
{
}
export
type
setDockTileParameters
=
{
badgeLabel
?
:
string
;
image
?
:
binary
;
}
export
type
setDockTileReturnValue
=
{
}
}
export
module
CSS
{
export
type
StyleSheetId
=
string
;
export
type
StyleSheetOrigin
=
"
injected
"
|
"
user
-
agent
"
|
"
inspector
"
|
"
regular
"
;
export
interface
PseudoElementMatches
{
pseudoType
:
DOM
.
PseudoType
;
matches
:
RuleMatch
[
]
;
}
export
interface
InheritedStyleEntry
{
inlineStyle
?
:
CSSStyle
;
matchedCSSRules
:
RuleMatch
[
]
;
}
export
interface
RuleMatch
{
rule
:
CSSRule
;
matchingSelectors
:
number
[
]
;
}
export
interface
Value
{
text
:
string
;
range
?
:
SourceRange
;
}
export
interface
SelectorList
{
selectors
:
Value
[
]
;
text
:
string
;
}
export
interface
CSSStyleSheetHeader
{
styleSheetId
:
StyleSheetId
;
frameId
:
Page
.
FrameId
;
sourceURL
:
string
;
sourceMapURL
?
:
string
;
origin
:
StyleSheetOrigin
;
title
:
string
;
ownerNode
?
:
DOM
.
BackendNodeId
;
disabled
:
boolean
;
hasSourceURL
?
:
boolean
;
isInline
:
boolean
;
startLine
:
number
;
startColumn
:
number
;
length
:
number
;
endLine
:
number
;
endColumn
:
number
;
}
export
interface
CSSRule
{
styleSheetId
?
:
StyleSheetId
;
selectorList
:
SelectorList
;
origin
:
StyleSheetOrigin
;
style
:
CSSStyle
;
media
?
:
CSSMedia
[
]
;
}
export
interface
RuleUsage
{
styleSheetId
:
StyleSheetId
;
startOffset
:
number
;
endOffset
:
number
;
used
:
boolean
;
}
export
interface
SourceRange
{
startLine
:
number
;
startColumn
:
number
;
endLine
:
number
;
endColumn
:
number
;
}
export
interface
ShorthandEntry
{
name
:
string
;
value
:
string
;
important
?
:
boolean
;
}
export
interface
CSSComputedStyleProperty
{
name
:
string
;
value
:
string
;
}
export
interface
CSSStyle
{
styleSheetId
?
:
StyleSheetId
;
cssProperties
:
CSSProperty
[
]
;
shorthandEntries
:
ShorthandEntry
[
]
;
cssText
?
:
string
;
range
?
:
SourceRange
;
}
export
interface
CSSProperty
{
name
:
string
;
value
:
string
;
important
?
:
boolean
;
implicit
?
:
boolean
;
text
?
:
string
;
parsedOk
?
:
boolean
;
disabled
?
:
boolean
;
range
?
:
SourceRange
;
}
export
interface
CSSMedia
{
text
:
string
;
source
:
"
mediaRule
"
|
"
importRule
"
|
"
linkedSheet
"
|
"
inlineSheet
"
;
sourceURL
?
:
string
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
mediaList
?
:
MediaQuery
[
]
;
}
export
interface
MediaQuery
{
expressions
:
MediaQueryExpression
[
]
;
active
:
boolean
;
}
export
interface
MediaQueryExpression
{
value
:
number
;
unit
:
string
;
feature
:
string
;
valueRange
?
:
SourceRange
;
computedLength
?
:
number
;
}
export
interface
PlatformFontUsage
{
familyName
:
string
;
isCustomFont
:
boolean
;
glyphCount
:
number
;
}
export
interface
FontFace
{
fontFamily
:
string
;
fontStyle
:
string
;
fontVariant
:
string
;
fontWeight
:
string
;
fontStretch
:
string
;
unicodeRange
:
string
;
src
:
string
;
platformFontFamily
:
string
;
}
export
interface
CSSKeyframesRule
{
animationName
:
Value
;
keyframes
:
CSSKeyframeRule
[
]
;
}
export
interface
CSSKeyframeRule
{
styleSheetId
?
:
StyleSheetId
;
origin
:
StyleSheetOrigin
;
keyText
:
Value
;
style
:
CSSStyle
;
}
export
interface
StyleDeclarationEdit
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
type
fontsUpdatedPayload
=
{
font
?
:
FontFace
;
}
export
type
mediaQueryResultChangedPayload
=
void
;
export
type
styleSheetAddedPayload
=
{
header
:
CSSStyleSheetHeader
;
}
export
type
styleSheetChangedPayload
=
{
styleSheetId
:
StyleSheetId
;
}
export
type
styleSheetRemovedPayload
=
{
styleSheetId
:
StyleSheetId
;
}
export
type
addRuleParameters
=
{
styleSheetId
:
StyleSheetId
;
ruleText
:
string
;
location
:
SourceRange
;
}
export
type
addRuleReturnValue
=
{
rule
:
CSSRule
;
}
export
type
collectClassNamesParameters
=
{
styleSheetId
:
StyleSheetId
;
}
export
type
collectClassNamesReturnValue
=
{
classNames
:
string
[
]
;
}
export
type
createStyleSheetParameters
=
{
frameId
:
Page
.
FrameId
;
}
export
type
createStyleSheetReturnValue
=
{
styleSheetId
:
StyleSheetId
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
forcePseudoStateParameters
=
{
nodeId
:
DOM
.
NodeId
;
forcedPseudoClasses
:
string
[
]
;
}
export
type
forcePseudoStateReturnValue
=
{
}
export
type
getBackgroundColorsParameters
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
getBackgroundColorsReturnValue
=
{
backgroundColors
?
:
string
[
]
;
computedFontSize
?
:
string
;
computedFontWeight
?
:
string
;
}
export
type
getComputedStyleForNodeParameters
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
getComputedStyleForNodeReturnValue
=
{
computedStyle
:
CSSComputedStyleProperty
[
]
;
}
export
type
getInlineStylesForNodeParameters
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
getInlineStylesForNodeReturnValue
=
{
inlineStyle
?
:
CSSStyle
;
attributesStyle
?
:
CSSStyle
;
}
export
type
getMatchedStylesForNodeParameters
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
getMatchedStylesForNodeReturnValue
=
{
inlineStyle
?
:
CSSStyle
;
attributesStyle
?
:
CSSStyle
;
matchedCSSRules
?
:
RuleMatch
[
]
;
pseudoElements
?
:
PseudoElementMatches
[
]
;
inherited
?
:
InheritedStyleEntry
[
]
;
cssKeyframesRules
?
:
CSSKeyframesRule
[
]
;
}
export
type
getMediaQueriesParameters
=
{
}
export
type
getMediaQueriesReturnValue
=
{
medias
:
CSSMedia
[
]
;
}
export
type
getPlatformFontsForNodeParameters
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
getPlatformFontsForNodeReturnValue
=
{
fonts
:
PlatformFontUsage
[
]
;
}
export
type
getStyleSheetTextParameters
=
{
styleSheetId
:
StyleSheetId
;
}
export
type
getStyleSheetTextReturnValue
=
{
text
:
string
;
}
export
type
setEffectivePropertyValueForNodeParameters
=
{
nodeId
:
DOM
.
NodeId
;
propertyName
:
string
;
value
:
string
;
}
export
type
setEffectivePropertyValueForNodeReturnValue
=
{
}
export
type
setKeyframeKeyParameters
=
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
keyText
:
string
;
}
export
type
setKeyframeKeyReturnValue
=
{
keyText
:
Value
;
}
export
type
setMediaTextParameters
=
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
type
setMediaTextReturnValue
=
{
media
:
CSSMedia
;
}
export
type
setRuleSelectorParameters
=
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
selector
:
string
;
}
export
type
setRuleSelectorReturnValue
=
{
selectorList
:
SelectorList
;
}
export
type
setStyleSheetTextParameters
=
{
styleSheetId
:
StyleSheetId
;
text
:
string
;
}
export
type
setStyleSheetTextReturnValue
=
{
sourceMapURL
?
:
string
;
}
export
type
setStyleTextsParameters
=
{
edits
:
StyleDeclarationEdit
[
]
;
}
export
type
setStyleTextsReturnValue
=
{
styles
:
CSSStyle
[
]
;
}
export
type
startRuleUsageTrackingParameters
=
{
}
export
type
startRuleUsageTrackingReturnValue
=
{
}
export
type
stopRuleUsageTrackingParameters
=
{
}
export
type
stopRuleUsageTrackingReturnValue
=
{
ruleUsage
:
RuleUsage
[
]
;
}
export
type
takeCoverageDeltaParameters
=
{
}
export
type
takeCoverageDeltaReturnValue
=
{
coverage
:
RuleUsage
[
]
;
timestamp
:
number
;
}
}
export
module
CacheStorage
{
export
type
CacheId
=
string
;
export
type
CachedResponseType
=
"
basic
"
|
"
cors
"
|
"
default
"
|
"
error
"
|
"
opaqueResponse
"
|
"
opaqueRedirect
"
;
export
interface
DataEntry
{
requestURL
:
string
;
requestMethod
:
string
;
requestHeaders
:
Header
[
]
;
responseTime
:
number
;
responseStatus
:
number
;
responseStatusText
:
string
;
responseType
:
CachedResponseType
;
responseHeaders
:
Header
[
]
;
}
export
interface
Cache
{
cacheId
:
CacheId
;
securityOrigin
:
string
;
cacheName
:
string
;
}
export
interface
Header
{
name
:
string
;
value
:
string
;
}
export
interface
CachedResponse
{
body
:
binary
;
}
export
type
deleteCacheParameters
=
{
cacheId
:
CacheId
;
}
export
type
deleteCacheReturnValue
=
{
}
export
type
deleteEntryParameters
=
{
cacheId
:
CacheId
;
request
:
string
;
}
export
type
deleteEntryReturnValue
=
{
}
export
type
requestCacheNamesParameters
=
{
securityOrigin
:
string
;
}
export
type
requestCacheNamesReturnValue
=
{
caches
:
Cache
[
]
;
}
export
type
requestCachedResponseParameters
=
{
cacheId
:
CacheId
;
requestURL
:
string
;
requestHeaders
:
Header
[
]
;
}
export
type
requestCachedResponseReturnValue
=
{
response
:
CachedResponse
;
}
export
type
requestEntriesParameters
=
{
cacheId
:
CacheId
;
skipCount
?
:
number
;
pageSize
?
:
number
;
pathFilter
?
:
string
;
}
export
type
requestEntriesReturnValue
=
{
cacheDataEntries
:
DataEntry
[
]
;
returnCount
:
number
;
}
}
export
module
Cast
{
export
interface
Sink
{
name
:
string
;
id
:
string
;
session
?
:
string
;
}
export
type
sinksUpdatedPayload
=
{
sinks
:
Sink
[
]
;
}
export
type
issueUpdatedPayload
=
{
issueMessage
:
string
;
}
export
type
enableParameters
=
{
presentationUrl
?
:
string
;
}
export
type
enableReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
setSinkToUseParameters
=
{
sinkName
:
string
;
}
export
type
setSinkToUseReturnValue
=
{
}
export
type
startTabMirroringParameters
=
{
sinkName
:
string
;
}
export
type
startTabMirroringReturnValue
=
{
}
export
type
stopCastingParameters
=
{
sinkName
:
string
;
}
export
type
stopCastingReturnValue
=
{
}
}
export
module
DOM
{
export
type
NodeId
=
number
;
export
type
BackendNodeId
=
number
;
export
interface
BackendNode
{
nodeType
:
number
;
nodeName
:
string
;
backendNodeId
:
BackendNodeId
;
}
export
type
PseudoType
=
"
first
-
line
"
|
"
first
-
letter
"
|
"
before
"
|
"
after
"
|
"
marker
"
|
"
backdrop
"
|
"
selection
"
|
"
first
-
line
-
inherited
"
|
"
scrollbar
"
|
"
scrollbar
-
thumb
"
|
"
scrollbar
-
button
"
|
"
scrollbar
-
track
"
|
"
scrollbar
-
track
-
piece
"
|
"
scrollbar
-
corner
"
|
"
resizer
"
|
"
input
-
list
-
button
"
;
export
type
ShadowRootType
=
"
user
-
agent
"
|
"
open
"
|
"
closed
"
;
export
interface
Node
{
nodeId
:
NodeId
;
parentId
?
:
NodeId
;
backendNodeId
:
BackendNodeId
;
nodeType
:
number
;
nodeName
:
string
;
localName
:
string
;
nodeValue
:
string
;
childNodeCount
?
:
number
;
children
?
:
Node
[
]
;
attributes
?
:
string
[
]
;
documentURL
?
:
string
;
baseURL
?
:
string
;
publicId
?
:
string
;
systemId
?
:
string
;
internalSubset
?
:
string
;
xmlVersion
?
:
string
;
name
?
:
string
;
value
?
:
string
;
pseudoType
?
:
PseudoType
;
shadowRootType
?
:
ShadowRootType
;
frameId
?
:
Page
.
FrameId
;
contentDocument
?
:
Node
;
shadowRoots
?
:
Node
[
]
;
templateContent
?
:
Node
;
pseudoElements
?
:
Node
[
]
;
importedDocument
?
:
Node
;
distributedNodes
?
:
BackendNode
[
]
;
isSVG
?
:
boolean
;
}
export
interface
RGBA
{
r
:
number
;
g
:
number
;
b
:
number
;
a
?
:
number
;
}
export
type
Quad
=
number
[
]
;
export
interface
BoxModel
{
content
:
Quad
;
padding
:
Quad
;
border
:
Quad
;
margin
:
Quad
;
width
:
number
;
height
:
number
;
shapeOutside
?
:
ShapeOutsideInfo
;
}
export
interface
ShapeOutsideInfo
{
bounds
:
Quad
;
shape
:
any
[
]
;
marginShape
:
any
[
]
;
}
export
interface
Rect
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
}
export
type
attributeModifiedPayload
=
{
nodeId
:
NodeId
;
name
:
string
;
value
:
string
;
}
export
type
attributeRemovedPayload
=
{
nodeId
:
NodeId
;
name
:
string
;
}
export
type
characterDataModifiedPayload
=
{
nodeId
:
NodeId
;
characterData
:
string
;
}
export
type
childNodeCountUpdatedPayload
=
{
nodeId
:
NodeId
;
childNodeCount
:
number
;
}
export
type
childNodeInsertedPayload
=
{
parentNodeId
:
NodeId
;
previousNodeId
:
NodeId
;
node
:
Node
;
}
export
type
childNodeRemovedPayload
=
{
parentNodeId
:
NodeId
;
nodeId
:
NodeId
;
}
export
type
distributedNodesUpdatedPayload
=
{
insertionPointId
:
NodeId
;
distributedNodes
:
BackendNode
[
]
;
}
export
type
documentUpdatedPayload
=
void
;
export
type
inlineStyleInvalidatedPayload
=
{
nodeIds
:
NodeId
[
]
;
}
export
type
pseudoElementAddedPayload
=
{
parentId
:
NodeId
;
pseudoElement
:
Node
;
}
export
type
pseudoElementRemovedPayload
=
{
parentId
:
NodeId
;
pseudoElementId
:
NodeId
;
}
export
type
setChildNodesPayload
=
{
parentId
:
NodeId
;
nodes
:
Node
[
]
;
}
export
type
shadowRootPoppedPayload
=
{
hostId
:
NodeId
;
rootId
:
NodeId
;
}
export
type
shadowRootPushedPayload
=
{
hostId
:
NodeId
;
root
:
Node
;
}
export
type
collectClassNamesFromSubtreeParameters
=
{
nodeId
:
NodeId
;
}
export
type
collectClassNamesFromSubtreeReturnValue
=
{
classNames
:
string
[
]
;
}
export
type
copyToParameters
=
{
nodeId
:
NodeId
;
targetNodeId
:
NodeId
;
insertBeforeNodeId
?
:
NodeId
;
}
export
type
copyToReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
describeNodeParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
depth
?
:
number
;
pierce
?
:
boolean
;
}
export
type
describeNodeReturnValue
=
{
node
:
Node
;
}
export
type
scrollIntoViewIfNeededParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
rect
?
:
Rect
;
}
export
type
scrollIntoViewIfNeededReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
discardSearchResultsParameters
=
{
searchId
:
string
;
}
export
type
discardSearchResultsReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
focusParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
type
focusReturnValue
=
{
}
export
type
getAttributesParameters
=
{
nodeId
:
NodeId
;
}
export
type
getAttributesReturnValue
=
{
attributes
:
string
[
]
;
}
export
type
getBoxModelParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
type
getBoxModelReturnValue
=
{
model
:
BoxModel
;
}
export
type
getContentQuadsParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
type
getContentQuadsReturnValue
=
{
quads
:
Quad
[
]
;
}
export
type
getDocumentParameters
=
{
depth
?
:
number
;
pierce
?
:
boolean
;
}
export
type
getDocumentReturnValue
=
{
root
:
Node
;
}
export
type
getFlattenedDocumentParameters
=
{
depth
?
:
number
;
pierce
?
:
boolean
;
}
export
type
getFlattenedDocumentReturnValue
=
{
nodes
:
Node
[
]
;
}
export
type
getNodeForLocationParameters
=
{
x
:
number
;
y
:
number
;
includeUserAgentShadowDOM
?
:
boolean
;
ignorePointerEventsNone
?
:
boolean
;
}
export
type
getNodeForLocationReturnValue
=
{
backendNodeId
:
BackendNodeId
;
frameId
:
Page
.
FrameId
;
nodeId
?
:
NodeId
;
}
export
type
getOuterHTMLParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
type
getOuterHTMLReturnValue
=
{
outerHTML
:
string
;
}
export
type
getRelayoutBoundaryParameters
=
{
nodeId
:
NodeId
;
}
export
type
getRelayoutBoundaryReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
getSearchResultsParameters
=
{
searchId
:
string
;
fromIndex
:
number
;
toIndex
:
number
;
}
export
type
getSearchResultsReturnValue
=
{
nodeIds
:
NodeId
[
]
;
}
export
type
hideHighlightParameters
=
{
}
export
type
hideHighlightReturnValue
=
{
}
export
type
highlightNodeParameters
=
{
}
export
type
highlightNodeReturnValue
=
{
}
export
type
highlightRectParameters
=
{
}
export
type
highlightRectReturnValue
=
{
}
export
type
markUndoableStateParameters
=
{
}
export
type
markUndoableStateReturnValue
=
{
}
export
type
moveToParameters
=
{
nodeId
:
NodeId
;
targetNodeId
:
NodeId
;
insertBeforeNodeId
?
:
NodeId
;
}
export
type
moveToReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
performSearchParameters
=
{
query
:
string
;
includeUserAgentShadowDOM
?
:
boolean
;
}
export
type
performSearchReturnValue
=
{
searchId
:
string
;
resultCount
:
number
;
}
export
type
pushNodeByPathToFrontendParameters
=
{
path
:
string
;
}
export
type
pushNodeByPathToFrontendReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
pushNodesByBackendIdsToFrontendParameters
=
{
backendNodeIds
:
BackendNodeId
[
]
;
}
export
type
pushNodesByBackendIdsToFrontendReturnValue
=
{
nodeIds
:
NodeId
[
]
;
}
export
type
querySelectorParameters
=
{
nodeId
:
NodeId
;
selector
:
string
;
}
export
type
querySelectorReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
querySelectorAllParameters
=
{
nodeId
:
NodeId
;
selector
:
string
;
}
export
type
querySelectorAllReturnValue
=
{
nodeIds
:
NodeId
[
]
;
}
export
type
redoParameters
=
{
}
export
type
redoReturnValue
=
{
}
export
type
removeAttributeParameters
=
{
nodeId
:
NodeId
;
name
:
string
;
}
export
type
removeAttributeReturnValue
=
{
}
export
type
removeNodeParameters
=
{
nodeId
:
NodeId
;
}
export
type
removeNodeReturnValue
=
{
}
export
type
requestChildNodesParameters
=
{
nodeId
:
NodeId
;
depth
?
:
number
;
pierce
?
:
boolean
;
}
export
type
requestChildNodesReturnValue
=
{
}
export
type
requestNodeParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
type
requestNodeReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
resolveNodeParameters
=
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectGroup
?
:
string
;
executionContextId
?
:
Runtime
.
ExecutionContextId
;
}
export
type
resolveNodeReturnValue
=
{
object
:
Runtime
.
RemoteObject
;
}
export
type
setAttributeValueParameters
=
{
nodeId
:
NodeId
;
name
:
string
;
value
:
string
;
}
export
type
setAttributeValueReturnValue
=
{
}
export
type
setAttributesAsTextParameters
=
{
nodeId
:
NodeId
;
text
:
string
;
name
?
:
string
;
}
export
type
setAttributesAsTextReturnValue
=
{
}
export
type
setFileInputFilesParameters
=
{
files
:
string
[
]
;
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
type
setFileInputFilesReturnValue
=
{
}
export
type
setNodeStackTracesEnabledParameters
=
{
enable
:
boolean
;
}
export
type
setNodeStackTracesEnabledReturnValue
=
{
}
export
type
getNodeStackTracesParameters
=
{
nodeId
:
NodeId
;
}
export
type
getNodeStackTracesReturnValue
=
{
creation
?
:
Runtime
.
StackTrace
;
}
export
type
getFileInfoParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
type
getFileInfoReturnValue
=
{
path
:
string
;
}
export
type
setInspectedNodeParameters
=
{
nodeId
:
NodeId
;
}
export
type
setInspectedNodeReturnValue
=
{
}
export
type
setNodeNameParameters
=
{
nodeId
:
NodeId
;
name
:
string
;
}
export
type
setNodeNameReturnValue
=
{
nodeId
:
NodeId
;
}
export
type
setNodeValueParameters
=
{
nodeId
:
NodeId
;
value
:
string
;
}
export
type
setNodeValueReturnValue
=
{
}
export
type
setOuterHTMLParameters
=
{
nodeId
:
NodeId
;
outerHTML
:
string
;
}
export
type
setOuterHTMLReturnValue
=
{
}
export
type
undoParameters
=
{
}
export
type
undoReturnValue
=
{
}
export
type
getFrameOwnerParameters
=
{
frameId
:
Page
.
FrameId
;
}
export
type
getFrameOwnerReturnValue
=
{
backendNodeId
:
BackendNodeId
;
nodeId
?
:
NodeId
;
}
}
export
module
DOMDebugger
{
export
type
DOMBreakpointType
=
"
subtree
-
modified
"
|
"
attribute
-
modified
"
|
"
node
-
removed
"
;
export
interface
EventListener
{
type
:
string
;
useCapture
:
boolean
;
passive
:
boolean
;
once
:
boolean
;
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
number
;
columnNumber
:
number
;
handler
?
:
Runtime
.
RemoteObject
;
originalHandler
?
:
Runtime
.
RemoteObject
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
}
export
type
getEventListenersParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
depth
?
:
number
;
pierce
?
:
boolean
;
}
export
type
getEventListenersReturnValue
=
{
listeners
:
EventListener
[
]
;
}
export
type
removeDOMBreakpointParameters
=
{
nodeId
:
DOM
.
NodeId
;
type
:
DOMBreakpointType
;
}
export
type
removeDOMBreakpointReturnValue
=
{
}
export
type
removeEventListenerBreakpointParameters
=
{
eventName
:
string
;
targetName
?
:
string
;
}
export
type
removeEventListenerBreakpointReturnValue
=
{
}
export
type
removeInstrumentationBreakpointParameters
=
{
eventName
:
string
;
}
export
type
removeInstrumentationBreakpointReturnValue
=
{
}
export
type
removeXHRBreakpointParameters
=
{
url
:
string
;
}
export
type
removeXHRBreakpointReturnValue
=
{
}
export
type
setDOMBreakpointParameters
=
{
nodeId
:
DOM
.
NodeId
;
type
:
DOMBreakpointType
;
}
export
type
setDOMBreakpointReturnValue
=
{
}
export
type
setEventListenerBreakpointParameters
=
{
eventName
:
string
;
targetName
?
:
string
;
}
export
type
setEventListenerBreakpointReturnValue
=
{
}
export
type
setInstrumentationBreakpointParameters
=
{
eventName
:
string
;
}
export
type
setInstrumentationBreakpointReturnValue
=
{
}
export
type
setXHRBreakpointParameters
=
{
url
:
string
;
}
export
type
setXHRBreakpointReturnValue
=
{
}
}
export
module
DOMSnapshot
{
export
interface
DOMNode
{
nodeType
:
number
;
nodeName
:
string
;
nodeValue
:
string
;
textValue
?
:
string
;
inputValue
?
:
string
;
inputChecked
?
:
boolean
;
optionSelected
?
:
boolean
;
backendNodeId
:
DOM
.
BackendNodeId
;
childNodeIndexes
?
:
number
[
]
;
attributes
?
:
NameValue
[
]
;
pseudoElementIndexes
?
:
number
[
]
;
layoutNodeIndex
?
:
number
;
documentURL
?
:
string
;
baseURL
?
:
string
;
contentLanguage
?
:
string
;
documentEncoding
?
:
string
;
publicId
?
:
string
;
systemId
?
:
string
;
frameId
?
:
Page
.
FrameId
;
contentDocumentIndex
?
:
number
;
pseudoType
?
:
DOM
.
PseudoType
;
shadowRootType
?
:
DOM
.
ShadowRootType
;
isClickable
?
:
boolean
;
eventListeners
?
:
DOMDebugger
.
EventListener
[
]
;
currentSourceURL
?
:
string
;
originURL
?
:
string
;
scrollOffsetX
?
:
number
;
scrollOffsetY
?
:
number
;
}
export
interface
InlineTextBox
{
boundingBox
:
DOM
.
Rect
;
startCharacterIndex
:
number
;
numCharacters
:
number
;
}
export
interface
LayoutTreeNode
{
domNodeIndex
:
number
;
boundingBox
:
DOM
.
Rect
;
layoutText
?
:
string
;
inlineTextNodes
?
:
InlineTextBox
[
]
;
styleIndex
?
:
number
;
paintOrder
?
:
number
;
isStackingContext
?
:
boolean
;
}
export
interface
ComputedStyle
{
properties
:
NameValue
[
]
;
}
export
interface
NameValue
{
name
:
string
;
value
:
string
;
}
export
type
StringIndex
=
number
;
export
type
ArrayOfStrings
=
StringIndex
[
]
;
export
interface
RareStringData
{
index
:
number
[
]
;
value
:
StringIndex
[
]
;
}
export
interface
RareBooleanData
{
index
:
number
[
]
;
}
export
interface
RareIntegerData
{
index
:
number
[
]
;
value
:
number
[
]
;
}
export
type
Rectangle
=
number
[
]
;
export
interface
DocumentSnapshot
{
documentURL
:
StringIndex
;
title
:
StringIndex
;
baseURL
:
StringIndex
;
contentLanguage
:
StringIndex
;
encodingName
:
StringIndex
;
publicId
:
StringIndex
;
systemId
:
StringIndex
;
frameId
:
StringIndex
;
nodes
:
NodeTreeSnapshot
;
layout
:
LayoutTreeSnapshot
;
textBoxes
:
TextBoxSnapshot
;
scrollOffsetX
?
:
number
;
scrollOffsetY
?
:
number
;
contentWidth
?
:
number
;
contentHeight
?
:
number
;
}
export
interface
NodeTreeSnapshot
{
parentIndex
?
:
number
[
]
;
nodeType
?
:
number
[
]
;
nodeName
?
:
StringIndex
[
]
;
nodeValue
?
:
StringIndex
[
]
;
backendNodeId
?
:
DOM
.
BackendNodeId
[
]
;
attributes
?
:
ArrayOfStrings
[
]
;
textValue
?
:
RareStringData
;
inputValue
?
:
RareStringData
;
inputChecked
?
:
RareBooleanData
;
optionSelected
?
:
RareBooleanData
;
contentDocumentIndex
?
:
RareIntegerData
;
pseudoType
?
:
RareStringData
;
isClickable
?
:
RareBooleanData
;
currentSourceURL
?
:
RareStringData
;
originURL
?
:
RareStringData
;
}
export
interface
LayoutTreeSnapshot
{
nodeIndex
:
number
[
]
;
styles
:
ArrayOfStrings
[
]
;
bounds
:
Rectangle
[
]
;
text
:
StringIndex
[
]
;
stackingContexts
:
RareBooleanData
;
paintOrders
?
:
number
[
]
;
offsetRects
?
:
Rectangle
[
]
;
scrollRects
?
:
Rectangle
[
]
;
clientRects
?
:
Rectangle
[
]
;
}
export
interface
TextBoxSnapshot
{
layoutIndex
:
number
[
]
;
bounds
:
Rectangle
[
]
;
start
:
number
[
]
;
length
:
number
[
]
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getSnapshotParameters
=
{
computedStyleWhitelist
:
string
[
]
;
includeEventListeners
?
:
boolean
;
includePaintOrder
?
:
boolean
;
includeUserAgentShadowTree
?
:
boolean
;
}
export
type
getSnapshotReturnValue
=
{
domNodes
:
DOMNode
[
]
;
layoutTreeNodes
:
LayoutTreeNode
[
]
;
computedStyles
:
ComputedStyle
[
]
;
}
export
type
captureSnapshotParameters
=
{
computedStyles
:
string
[
]
;
includePaintOrder
?
:
boolean
;
includeDOMRects
?
:
boolean
;
}
export
type
captureSnapshotReturnValue
=
{
documents
:
DocumentSnapshot
[
]
;
strings
:
string
[
]
;
}
}
export
module
DOMStorage
{
export
interface
StorageId
{
securityOrigin
:
string
;
isLocalStorage
:
boolean
;
}
export
type
Item
=
string
[
]
;
export
type
domStorageItemAddedPayload
=
{
storageId
:
StorageId
;
key
:
string
;
newValue
:
string
;
}
export
type
domStorageItemRemovedPayload
=
{
storageId
:
StorageId
;
key
:
string
;
}
export
type
domStorageItemUpdatedPayload
=
{
storageId
:
StorageId
;
key
:
string
;
oldValue
:
string
;
newValue
:
string
;
}
export
type
domStorageItemsClearedPayload
=
{
storageId
:
StorageId
;
}
export
type
clearParameters
=
{
storageId
:
StorageId
;
}
export
type
clearReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getDOMStorageItemsParameters
=
{
storageId
:
StorageId
;
}
export
type
getDOMStorageItemsReturnValue
=
{
entries
:
Item
[
]
;
}
export
type
removeDOMStorageItemParameters
=
{
storageId
:
StorageId
;
key
:
string
;
}
export
type
removeDOMStorageItemReturnValue
=
{
}
export
type
setDOMStorageItemParameters
=
{
storageId
:
StorageId
;
key
:
string
;
value
:
string
;
}
export
type
setDOMStorageItemReturnValue
=
{
}
}
export
module
Database
{
export
type
DatabaseId
=
string
;
export
interface
Database
{
id
:
DatabaseId
;
domain
:
string
;
name
:
string
;
version
:
string
;
}
export
interface
Error
{
message
:
string
;
code
:
number
;
}
export
type
addDatabasePayload
=
{
database
:
Database
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
executeSQLParameters
=
{
databaseId
:
DatabaseId
;
query
:
string
;
}
export
type
executeSQLReturnValue
=
{
columnNames
?
:
string
[
]
;
values
?
:
any
[
]
;
sqlError
?
:
Error
;
}
export
type
getDatabaseTableNamesParameters
=
{
databaseId
:
DatabaseId
;
}
export
type
getDatabaseTableNamesReturnValue
=
{
tableNames
:
string
[
]
;
}
}
export
module
DeviceOrientation
{
export
type
clearDeviceOrientationOverrideParameters
=
{
}
export
type
clearDeviceOrientationOverrideReturnValue
=
{
}
export
type
setDeviceOrientationOverrideParameters
=
{
alpha
:
number
;
beta
:
number
;
gamma
:
number
;
}
export
type
setDeviceOrientationOverrideReturnValue
=
{
}
}
export
module
Emulation
{
export
interface
ScreenOrientation
{
type
:
"
portraitPrimary
"
|
"
portraitSecondary
"
|
"
landscapePrimary
"
|
"
landscapeSecondary
"
;
angle
:
number
;
}
export
interface
MediaFeature
{
name
:
string
;
value
:
string
;
}
export
type
VirtualTimePolicy
=
"
advance
"
|
"
pause
"
|
"
pauseIfNetworkFetchesPending
"
;
export
type
virtualTimeBudgetExpiredPayload
=
void
;
export
type
canEmulateParameters
=
{
}
export
type
canEmulateReturnValue
=
{
result
:
boolean
;
}
export
type
clearDeviceMetricsOverrideParameters
=
{
}
export
type
clearDeviceMetricsOverrideReturnValue
=
{
}
export
type
clearGeolocationOverrideParameters
=
{
}
export
type
clearGeolocationOverrideReturnValue
=
{
}
export
type
resetPageScaleFactorParameters
=
{
}
export
type
resetPageScaleFactorReturnValue
=
{
}
export
type
setFocusEmulationEnabledParameters
=
{
enabled
:
boolean
;
}
export
type
setFocusEmulationEnabledReturnValue
=
{
}
export
type
setCPUThrottlingRateParameters
=
{
rate
:
number
;
}
export
type
setCPUThrottlingRateReturnValue
=
{
}
export
type
setDefaultBackgroundColorOverrideParameters
=
{
color
?
:
DOM
.
RGBA
;
}
export
type
setDefaultBackgroundColorOverrideReturnValue
=
{
}
export
type
setDeviceMetricsOverrideParameters
=
{
width
:
number
;
height
:
number
;
deviceScaleFactor
:
number
;
mobile
:
boolean
;
scale
?
:
number
;
screenWidth
?
:
number
;
screenHeight
?
:
number
;
positionX
?
:
number
;
positionY
?
:
number
;
dontSetVisibleSize
?
:
boolean
;
screenOrientation
?
:
ScreenOrientation
;
viewport
?
:
Page
.
Viewport
;
}
export
type
setDeviceMetricsOverrideReturnValue
=
{
}
export
type
setScrollbarsHiddenParameters
=
{
hidden
:
boolean
;
}
export
type
setScrollbarsHiddenReturnValue
=
{
}
export
type
setDocumentCookieDisabledParameters
=
{
disabled
:
boolean
;
}
export
type
setDocumentCookieDisabledReturnValue
=
{
}
export
type
setEmitTouchEventsForMouseParameters
=
{
enabled
:
boolean
;
configuration
?
:
"
mobile
"
|
"
desktop
"
;
}
export
type
setEmitTouchEventsForMouseReturnValue
=
{
}
export
type
setEmulatedMediaParameters
=
{
media
?
:
string
;
features
?
:
MediaFeature
[
]
;
}
export
type
setEmulatedMediaReturnValue
=
{
}
export
type
setEmulatedVisionDeficiencyParameters
=
{
type
:
"
none
"
|
"
achromatopsia
"
|
"
blurredVision
"
|
"
deuteranopia
"
|
"
protanopia
"
|
"
tritanopia
"
;
}
export
type
setEmulatedVisionDeficiencyReturnValue
=
{
}
export
type
setGeolocationOverrideParameters
=
{
latitude
?
:
number
;
longitude
?
:
number
;
accuracy
?
:
number
;
}
export
type
setGeolocationOverrideReturnValue
=
{
}
export
type
setNavigatorOverridesParameters
=
{
platform
:
string
;
}
export
type
setNavigatorOverridesReturnValue
=
{
}
export
type
setPageScaleFactorParameters
=
{
pageScaleFactor
:
number
;
}
export
type
setPageScaleFactorReturnValue
=
{
}
export
type
setScriptExecutionDisabledParameters
=
{
value
:
boolean
;
}
export
type
setScriptExecutionDisabledReturnValue
=
{
}
export
type
setTouchEmulationEnabledParameters
=
{
enabled
:
boolean
;
maxTouchPoints
?
:
number
;
}
export
type
setTouchEmulationEnabledReturnValue
=
{
}
export
type
setVirtualTimePolicyParameters
=
{
policy
:
VirtualTimePolicy
;
budget
?
:
number
;
maxVirtualTimeTaskStarvationCount
?
:
number
;
waitForNavigation
?
:
boolean
;
initialVirtualTime
?
:
Network
.
TimeSinceEpoch
;
}
export
type
setVirtualTimePolicyReturnValue
=
{
virtualTimeTicksBase
:
number
;
}
export
type
setLocaleOverrideParameters
=
{
locale
?
:
string
;
}
export
type
setLocaleOverrideReturnValue
=
{
}
export
type
setTimezoneOverrideParameters
=
{
timezoneId
:
string
;
}
export
type
setTimezoneOverrideReturnValue
=
{
}
export
type
setVisibleSizeParameters
=
{
width
:
number
;
height
:
number
;
}
export
type
setVisibleSizeReturnValue
=
{
}
export
type
setUserAgentOverrideParameters
=
{
userAgent
:
string
;
acceptLanguage
?
:
string
;
platform
?
:
string
;
}
export
type
setUserAgentOverrideReturnValue
=
{
}
}
export
module
HeadlessExperimental
{
export
interface
ScreenshotParams
{
format
?
:
"
jpeg
"
|
"
png
"
;
quality
?
:
number
;
}
export
type
needsBeginFramesChangedPayload
=
{
needsBeginFrames
:
boolean
;
}
export
type
beginFrameParameters
=
{
frameTimeTicks
?
:
number
;
interval
?
:
number
;
noDisplayUpdates
?
:
boolean
;
screenshot
?
:
ScreenshotParams
;
}
export
type
beginFrameReturnValue
=
{
hasDamage
:
boolean
;
screenshotData
?
:
binary
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
}
export
module
IO
{
export
type
StreamHandle
=
string
;
export
type
closeParameters
=
{
handle
:
StreamHandle
;
}
export
type
closeReturnValue
=
{
}
export
type
readParameters
=
{
handle
:
StreamHandle
;
offset
?
:
number
;
size
?
:
number
;
}
export
type
readReturnValue
=
{
base64Encoded
?
:
boolean
;
data
:
string
;
eof
:
boolean
;
}
export
type
resolveBlobParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
type
resolveBlobReturnValue
=
{
uuid
:
string
;
}
}
export
module
IndexedDB
{
export
interface
DatabaseWithObjectStores
{
name
:
string
;
version
:
number
;
objectStores
:
ObjectStore
[
]
;
}
export
interface
ObjectStore
{
name
:
string
;
keyPath
:
KeyPath
;
autoIncrement
:
boolean
;
indexes
:
ObjectStoreIndex
[
]
;
}
export
interface
ObjectStoreIndex
{
name
:
string
;
keyPath
:
KeyPath
;
unique
:
boolean
;
multiEntry
:
boolean
;
}
export
interface
Key
{
type
:
"
number
"
|
"
string
"
|
"
date
"
|
"
array
"
;
number
?
:
number
;
string
?
:
string
;
date
?
:
number
;
array
?
:
Key
[
]
;
}
export
interface
KeyRange
{
lower
?
:
Key
;
upper
?
:
Key
;
lowerOpen
:
boolean
;
upperOpen
:
boolean
;
}
export
interface
DataEntry
{
key
:
Runtime
.
RemoteObject
;
primaryKey
:
Runtime
.
RemoteObject
;
value
:
Runtime
.
RemoteObject
;
}
export
interface
KeyPath
{
type
:
"
null
"
|
"
string
"
|
"
array
"
;
string
?
:
string
;
array
?
:
string
[
]
;
}
export
type
clearObjectStoreParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
type
clearObjectStoreReturnValue
=
{
}
export
type
deleteDatabaseParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
}
export
type
deleteDatabaseReturnValue
=
{
}
export
type
deleteObjectStoreEntriesParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
keyRange
:
KeyRange
;
}
export
type
deleteObjectStoreEntriesReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
requestDataParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
indexName
:
string
;
skipCount
:
number
;
pageSize
:
number
;
keyRange
?
:
KeyRange
;
}
export
type
requestDataReturnValue
=
{
objectStoreDataEntries
:
DataEntry
[
]
;
hasMore
:
boolean
;
}
export
type
getMetadataParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
type
getMetadataReturnValue
=
{
entriesCount
:
number
;
keyGeneratorValue
:
number
;
}
export
type
requestDatabaseParameters
=
{
securityOrigin
:
string
;
databaseName
:
string
;
}
export
type
requestDatabaseReturnValue
=
{
databaseWithObjectStores
:
DatabaseWithObjectStores
;
}
export
type
requestDatabaseNamesParameters
=
{
securityOrigin
:
string
;
}
export
type
requestDatabaseNamesReturnValue
=
{
databaseNames
:
string
[
]
;
}
}
export
module
Input
{
export
interface
TouchPoint
{
x
:
number
;
y
:
number
;
radiusX
?
:
number
;
radiusY
?
:
number
;
rotationAngle
?
:
number
;
force
?
:
number
;
id
?
:
number
;
}
export
type
GestureSourceType
=
"
default
"
|
"
touch
"
|
"
mouse
"
;
export
type
MouseButton
=
"
none
"
|
"
left
"
|
"
middle
"
|
"
right
"
|
"
back
"
|
"
forward
"
;
export
type
TimeSinceEpoch
=
number
;
export
type
dispatchKeyEventParameters
=
{
type
:
"
keyDown
"
|
"
keyUp
"
|
"
rawKeyDown
"
|
"
char
"
;
modifiers
?
:
number
;
timestamp
?
:
TimeSinceEpoch
;
text
?
:
string
;
unmodifiedText
?
:
string
;
keyIdentifier
?
:
string
;
code
?
:
string
;
key
?
:
string
;
windowsVirtualKeyCode
?
:
number
;
nativeVirtualKeyCode
?
:
number
;
autoRepeat
?
:
boolean
;
isKeypad
?
:
boolean
;
isSystemKey
?
:
boolean
;
location
?
:
number
;
}
export
type
dispatchKeyEventReturnValue
=
{
}
export
type
insertTextParameters
=
{
text
:
string
;
}
export
type
insertTextReturnValue
=
{
}
export
type
dispatchMouseEventParameters
=
{
type
:
"
mousePressed
"
|
"
mouseReleased
"
|
"
mouseMoved
"
|
"
mouseWheel
"
;
x
:
number
;
y
:
number
;
modifiers
?
:
number
;
timestamp
?
:
TimeSinceEpoch
;
button
?
:
MouseButton
;
buttons
?
:
number
;
clickCount
?
:
number
;
deltaX
?
:
number
;
deltaY
?
:
number
;
pointerType
?
:
"
mouse
"
|
"
pen
"
;
}
export
type
dispatchMouseEventReturnValue
=
{
}
export
type
dispatchTouchEventParameters
=
{
type
:
"
touchStart
"
|
"
touchEnd
"
|
"
touchMove
"
|
"
touchCancel
"
;
touchPoints
:
TouchPoint
[
]
;
modifiers
?
:
number
;
timestamp
?
:
TimeSinceEpoch
;
}
export
type
dispatchTouchEventReturnValue
=
{
}
export
type
emulateTouchFromMouseEventParameters
=
{
type
:
"
mousePressed
"
|
"
mouseReleased
"
|
"
mouseMoved
"
|
"
mouseWheel
"
;
x
:
number
;
y
:
number
;
button
:
MouseButton
;
timestamp
?
:
TimeSinceEpoch
;
deltaX
?
:
number
;
deltaY
?
:
number
;
modifiers
?
:
number
;
clickCount
?
:
number
;
}
export
type
emulateTouchFromMouseEventReturnValue
=
{
}
export
type
setIgnoreInputEventsParameters
=
{
ignore
:
boolean
;
}
export
type
setIgnoreInputEventsReturnValue
=
{
}
export
type
synthesizePinchGestureParameters
=
{
x
:
number
;
y
:
number
;
scaleFactor
:
number
;
relativeSpeed
?
:
number
;
gestureSourceType
?
:
GestureSourceType
;
}
export
type
synthesizePinchGestureReturnValue
=
{
}
export
type
synthesizeScrollGestureParameters
=
{
x
:
number
;
y
:
number
;
xDistance
?
:
number
;
yDistance
?
:
number
;
xOverscroll
?
:
number
;
yOverscroll
?
:
number
;
preventFling
?
:
boolean
;
speed
?
:
number
;
gestureSourceType
?
:
GestureSourceType
;
repeatCount
?
:
number
;
repeatDelayMs
?
:
number
;
interactionMarkerName
?
:
string
;
}
export
type
synthesizeScrollGestureReturnValue
=
{
}
export
type
synthesizeTapGestureParameters
=
{
x
:
number
;
y
:
number
;
duration
?
:
number
;
tapCount
?
:
number
;
gestureSourceType
?
:
GestureSourceType
;
}
export
type
synthesizeTapGestureReturnValue
=
{
}
}
export
module
Inspector
{
export
type
detachedPayload
=
{
reason
:
string
;
}
export
type
targetCrashedPayload
=
void
;
export
type
targetReloadedAfterCrashPayload
=
void
;
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
}
export
module
LayerTree
{
export
type
LayerId
=
string
;
export
type
SnapshotId
=
string
;
export
interface
ScrollRect
{
rect
:
DOM
.
Rect
;
type
:
"
RepaintsOnScroll
"
|
"
TouchEventHandler
"
|
"
WheelEventHandler
"
;
}
export
interface
StickyPositionConstraint
{
stickyBoxRect
:
DOM
.
Rect
;
containingBlockRect
:
DOM
.
Rect
;
nearestLayerShiftingStickyBox
?
:
LayerId
;
nearestLayerShiftingContainingBlock
?
:
LayerId
;
}
export
interface
PictureTile
{
x
:
number
;
y
:
number
;
picture
:
binary
;
}
export
interface
Layer
{
layerId
:
LayerId
;
parentLayerId
?
:
LayerId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
offsetX
:
number
;
offsetY
:
number
;
width
:
number
;
height
:
number
;
transform
?
:
number
[
]
;
anchorX
?
:
number
;
anchorY
?
:
number
;
anchorZ
?
:
number
;
paintCount
:
number
;
drawsContent
:
boolean
;
invisible
?
:
boolean
;
scrollRects
?
:
ScrollRect
[
]
;
stickyPositionConstraint
?
:
StickyPositionConstraint
;
}
export
type
PaintProfile
=
number
[
]
;
export
type
layerPaintedPayload
=
{
layerId
:
LayerId
;
clip
:
DOM
.
Rect
;
}
export
type
layerTreeDidChangePayload
=
{
layers
?
:
Layer
[
]
;
}
export
type
compositingReasonsParameters
=
{
layerId
:
LayerId
;
}
export
type
compositingReasonsReturnValue
=
{
compositingReasons
:
string
[
]
;
compositingReasonIds
:
string
[
]
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
loadSnapshotParameters
=
{
tiles
:
PictureTile
[
]
;
}
export
type
loadSnapshotReturnValue
=
{
snapshotId
:
SnapshotId
;
}
export
type
makeSnapshotParameters
=
{
layerId
:
LayerId
;
}
export
type
makeSnapshotReturnValue
=
{
snapshotId
:
SnapshotId
;
}
export
type
profileSnapshotParameters
=
{
snapshotId
:
SnapshotId
;
minRepeatCount
?
:
number
;
minDuration
?
:
number
;
clipRect
?
:
DOM
.
Rect
;
}
export
type
profileSnapshotReturnValue
=
{
timings
:
PaintProfile
[
]
;
}
export
type
releaseSnapshotParameters
=
{
snapshotId
:
SnapshotId
;
}
export
type
releaseSnapshotReturnValue
=
{
}
export
type
replaySnapshotParameters
=
{
snapshotId
:
SnapshotId
;
fromStep
?
:
number
;
toStep
?
:
number
;
scale
?
:
number
;
}
export
type
replaySnapshotReturnValue
=
{
dataURL
:
string
;
}
export
type
snapshotCommandLogParameters
=
{
snapshotId
:
SnapshotId
;
}
export
type
snapshotCommandLogReturnValue
=
{
commandLog
:
object
[
]
;
}
}
export
module
Log
{
export
interface
LogEntry
{
source
:
"
xml
"
|
"
javascript
"
|
"
network
"
|
"
storage
"
|
"
appcache
"
|
"
rendering
"
|
"
security
"
|
"
deprecation
"
|
"
worker
"
|
"
violation
"
|
"
intervention
"
|
"
recommendation
"
|
"
other
"
;
level
:
"
verbose
"
|
"
info
"
|
"
warning
"
|
"
error
"
;
text
:
string
;
timestamp
:
Runtime
.
Timestamp
;
url
?
:
string
;
lineNumber
?
:
number
;
stackTrace
?
:
Runtime
.
StackTrace
;
networkRequestId
?
:
Network
.
RequestId
;
workerId
?
:
string
;
args
?
:
Runtime
.
RemoteObject
[
]
;
}
export
interface
ViolationSetting
{
name
:
"
longTask
"
|
"
longLayout
"
|
"
blockedEvent
"
|
"
blockedParser
"
|
"
discouragedAPIUse
"
|
"
handler
"
|
"
recurringHandler
"
;
threshold
:
number
;
}
export
type
entryAddedPayload
=
{
entry
:
LogEntry
;
}
export
type
clearParameters
=
{
}
export
type
clearReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
startViolationsReportParameters
=
{
config
:
ViolationSetting
[
]
;
}
export
type
startViolationsReportReturnValue
=
{
}
export
type
stopViolationsReportParameters
=
{
}
export
type
stopViolationsReportReturnValue
=
{
}
}
export
module
Memory
{
export
type
PressureLevel
=
"
moderate
"
|
"
critical
"
;
export
interface
SamplingProfileNode
{
size
:
number
;
total
:
number
;
stack
:
string
[
]
;
}
export
interface
SamplingProfile
{
samples
:
SamplingProfileNode
[
]
;
modules
:
Module
[
]
;
}
export
interface
Module
{
name
:
string
;
uuid
:
string
;
baseAddress
:
string
;
size
:
number
;
}
export
type
getDOMCountersParameters
=
{
}
export
type
getDOMCountersReturnValue
=
{
documents
:
number
;
nodes
:
number
;
jsEventListeners
:
number
;
}
export
type
prepareForLeakDetectionParameters
=
{
}
export
type
prepareForLeakDetectionReturnValue
=
{
}
export
type
forciblyPurgeJavaScriptMemoryParameters
=
{
}
export
type
forciblyPurgeJavaScriptMemoryReturnValue
=
{
}
export
type
setPressureNotificationsSuppressedParameters
=
{
suppressed
:
boolean
;
}
export
type
setPressureNotificationsSuppressedReturnValue
=
{
}
export
type
simulatePressureNotificationParameters
=
{
level
:
PressureLevel
;
}
export
type
simulatePressureNotificationReturnValue
=
{
}
export
type
startSamplingParameters
=
{
samplingInterval
?
:
number
;
suppressRandomness
?
:
boolean
;
}
export
type
startSamplingReturnValue
=
{
}
export
type
stopSamplingParameters
=
{
}
export
type
stopSamplingReturnValue
=
{
}
export
type
getAllTimeSamplingProfileParameters
=
{
}
export
type
getAllTimeSamplingProfileReturnValue
=
{
profile
:
SamplingProfile
;
}
export
type
getBrowserSamplingProfileParameters
=
{
}
export
type
getBrowserSamplingProfileReturnValue
=
{
profile
:
SamplingProfile
;
}
export
type
getSamplingProfileParameters
=
{
}
export
type
getSamplingProfileReturnValue
=
{
profile
:
SamplingProfile
;
}
}
export
module
Network
{
export
type
ResourceType
=
"
Document
"
|
"
Stylesheet
"
|
"
Image
"
|
"
Media
"
|
"
Font
"
|
"
Script
"
|
"
TextTrack
"
|
"
XHR
"
|
"
Fetch
"
|
"
EventSource
"
|
"
WebSocket
"
|
"
Manifest
"
|
"
SignedExchange
"
|
"
Ping
"
|
"
CSPViolationReport
"
|
"
Other
"
;
export
type
LoaderId
=
string
;
export
type
RequestId
=
string
;
export
type
InterceptionId
=
string
;
export
type
ErrorReason
=
"
Failed
"
|
"
Aborted
"
|
"
TimedOut
"
|
"
AccessDenied
"
|
"
ConnectionClosed
"
|
"
ConnectionReset
"
|
"
ConnectionRefused
"
|
"
ConnectionAborted
"
|
"
ConnectionFailed
"
|
"
NameNotResolved
"
|
"
InternetDisconnected
"
|
"
AddressUnreachable
"
|
"
BlockedByClient
"
|
"
BlockedByResponse
"
;
export
type
TimeSinceEpoch
=
number
;
export
type
MonotonicTime
=
number
;
export
type
Headers
=
object
;
export
type
ConnectionType
=
"
none
"
|
"
cellular2g
"
|
"
cellular3g
"
|
"
cellular4g
"
|
"
bluetooth
"
|
"
ethernet
"
|
"
wifi
"
|
"
wimax
"
|
"
other
"
;
export
type
CookieSameSite
=
"
Strict
"
|
"
Lax
"
|
"
None
"
;
export
type
CookiePriority
=
"
Low
"
|
"
Medium
"
|
"
High
"
;
export
interface
ResourceTiming
{
requestTime
:
number
;
proxyStart
:
number
;
proxyEnd
:
number
;
dnsStart
:
number
;
dnsEnd
:
number
;
connectStart
:
number
;
connectEnd
:
number
;
sslStart
:
number
;
sslEnd
:
number
;
workerStart
:
number
;
workerReady
:
number
;
sendStart
:
number
;
sendEnd
:
number
;
pushStart
:
number
;
pushEnd
:
number
;
receiveHeadersEnd
:
number
;
}
export
type
ResourcePriority
=
"
VeryLow
"
|
"
Low
"
|
"
Medium
"
|
"
High
"
|
"
VeryHigh
"
;
export
interface
Request
{
url
:
string
;
urlFragment
?
:
string
;
method
:
string
;
headers
:
Headers
;
postData
?
:
string
;
hasPostData
?
:
boolean
;
mixedContentType
?
:
Security
.
MixedContentType
;
initialPriority
:
ResourcePriority
;
referrerPolicy
:
"
unsafe
-
url
"
|
"
no
-
referrer
-
when
-
downgrade
"
|
"
no
-
referrer
"
|
"
origin
"
|
"
origin
-
when
-
cross
-
origin
"
|
"
same
-
origin
"
|
"
strict
-
origin
"
|
"
strict
-
origin
-
when
-
cross
-
origin
"
;
isLinkPreload
?
:
boolean
;
}
export
interface
SignedCertificateTimestamp
{
status
:
string
;
origin
:
string
;
logDescription
:
string
;
logId
:
string
;
timestamp
:
TimeSinceEpoch
;
hashAlgorithm
:
string
;
signatureAlgorithm
:
string
;
signatureData
:
string
;
}
export
interface
SecurityDetails
{
protocol
:
string
;
keyExchange
:
string
;
keyExchangeGroup
?
:
string
;
cipher
:
string
;
mac
?
:
string
;
certificateId
:
Security
.
CertificateId
;
subjectName
:
string
;
sanList
:
string
[
]
;
issuer
:
string
;
validFrom
:
TimeSinceEpoch
;
validTo
:
TimeSinceEpoch
;
signedCertificateTimestampList
:
SignedCertificateTimestamp
[
]
;
certificateTransparencyCompliance
:
CertificateTransparencyCompliance
;
}
export
type
CertificateTransparencyCompliance
=
"
unknown
"
|
"
not
-
compliant
"
|
"
compliant
"
;
export
type
BlockedReason
=
"
other
"
|
"
csp
"
|
"
mixed
-
content
"
|
"
origin
"
|
"
inspector
"
|
"
subresource
-
filter
"
|
"
content
-
type
"
|
"
collapsed
-
by
-
client
"
|
"
coep
-
frame
-
resource
-
needs
-
coep
-
header
"
|
"
coop
-
sandboxed
-
iframe
-
cannot
-
navigate
-
to
-
coop
-
page
"
|
"
corp
-
not
-
same
-
origin
"
|
"
corp
-
not
-
same
-
origin
-
after
-
defaulted
-
to
-
same
-
origin
-
by
-
coep
"
|
"
corp
-
not
-
same
-
site
"
;
export
interface
Response
{
url
:
string
;
status
:
number
;
statusText
:
string
;
headers
:
Headers
;
headersText
?
:
string
;
mimeType
:
string
;
requestHeaders
?
:
Headers
;
requestHeadersText
?
:
string
;
connectionReused
:
boolean
;
connectionId
:
number
;
remoteIPAddress
?
:
string
;
remotePort
?
:
number
;
fromDiskCache
?
:
boolean
;
fromServiceWorker
?
:
boolean
;
fromPrefetchCache
?
:
boolean
;
encodedDataLength
:
number
;
timing
?
:
ResourceTiming
;
protocol
?
:
string
;
securityState
:
Security
.
SecurityState
;
securityDetails
?
:
SecurityDetails
;
}
export
interface
WebSocketRequest
{
headers
:
Headers
;
}
export
interface
WebSocketResponse
{
status
:
number
;
statusText
:
string
;
headers
:
Headers
;
headersText
?
:
string
;
requestHeaders
?
:
Headers
;
requestHeadersText
?
:
string
;
}
export
interface
WebSocketFrame
{
opcode
:
number
;
mask
:
boolean
;
payloadData
:
string
;
}
export
interface
CachedResource
{
url
:
string
;
type
:
ResourceType
;
response
?
:
Response
;
bodySize
:
number
;
}
export
interface
Initiator
{
type
:
"
parser
"
|
"
script
"
|
"
preload
"
|
"
SignedExchange
"
|
"
other
"
;
stack
?
:
Runtime
.
StackTrace
;
url
?
:
string
;
lineNumber
?
:
number
;
}
export
interface
Cookie
{
name
:
string
;
value
:
string
;
domain
:
string
;
path
:
string
;
expires
:
number
;
size
:
number
;
httpOnly
:
boolean
;
secure
:
boolean
;
session
:
boolean
;
sameSite
?
:
CookieSameSite
;
priority
:
CookiePriority
;
}
export
type
SetCookieBlockedReason
=
"
SecureOnly
"
|
"
SameSiteStrict
"
|
"
SameSiteLax
"
|
"
SameSiteUnspecifiedTreatedAsLax
"
|
"
SameSiteNoneInsecure
"
|
"
UserPreferences
"
|
"
SyntaxError
"
|
"
SchemeNotSupported
"
|
"
OverwriteSecure
"
|
"
InvalidDomain
"
|
"
InvalidPrefix
"
|
"
UnknownError
"
;
export
type
CookieBlockedReason
=
"
SecureOnly
"
|
"
NotOnPath
"
|
"
DomainMismatch
"
|
"
SameSiteStrict
"
|
"
SameSiteLax
"
|
"
SameSiteUnspecifiedTreatedAsLax
"
|
"
SameSiteNoneInsecure
"
|
"
UserPreferences
"
|
"
UnknownError
"
;
export
interface
BlockedSetCookieWithReason
{
blockedReasons
:
SetCookieBlockedReason
[
]
;
cookieLine
:
string
;
cookie
?
:
Cookie
;
}
export
interface
BlockedCookieWithReason
{
blockedReasons
:
CookieBlockedReason
[
]
;
cookie
:
Cookie
;
}
export
interface
CookieParam
{
name
:
string
;
value
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
secure
?
:
boolean
;
httpOnly
?
:
boolean
;
sameSite
?
:
CookieSameSite
;
expires
?
:
TimeSinceEpoch
;
priority
?
:
CookiePriority
;
}
export
interface
AuthChallenge
{
source
?
:
"
Server
"
|
"
Proxy
"
;
origin
:
string
;
scheme
:
string
;
realm
:
string
;
}
export
interface
AuthChallengeResponse
{
response
:
"
Default
"
|
"
CancelAuth
"
|
"
ProvideCredentials
"
;
username
?
:
string
;
password
?
:
string
;
}
export
type
InterceptionStage
=
"
Request
"
|
"
HeadersReceived
"
;
export
interface
RequestPattern
{
urlPattern
?
:
string
;
resourceType
?
:
ResourceType
;
interceptionStage
?
:
InterceptionStage
;
}
export
interface
SignedExchangeSignature
{
label
:
string
;
signature
:
string
;
integrity
:
string
;
certUrl
?
:
string
;
certSha256
?
:
string
;
validityUrl
:
string
;
date
:
number
;
expires
:
number
;
certificates
?
:
string
[
]
;
}
export
interface
SignedExchangeHeader
{
requestUrl
:
string
;
responseCode
:
number
;
responseHeaders
:
Headers
;
signatures
:
SignedExchangeSignature
[
]
;
headerIntegrity
:
string
;
}
export
type
SignedExchangeErrorField
=
"
signatureSig
"
|
"
signatureIntegrity
"
|
"
signatureCertUrl
"
|
"
signatureCertSha256
"
|
"
signatureValidityUrl
"
|
"
signatureTimestamps
"
;
export
interface
SignedExchangeError
{
message
:
string
;
signatureIndex
?
:
number
;
errorField
?
:
SignedExchangeErrorField
;
}
export
interface
SignedExchangeInfo
{
outerResponse
:
Response
;
header
?
:
SignedExchangeHeader
;
securityDetails
?
:
SecurityDetails
;
errors
?
:
SignedExchangeError
[
]
;
}
export
type
dataReceivedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
dataLength
:
number
;
encodedDataLength
:
number
;
}
export
type
eventSourceMessageReceivedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
eventName
:
string
;
eventId
:
string
;
data
:
string
;
}
export
type
loadingFailedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
type
:
ResourceType
;
errorText
:
string
;
canceled
?
:
boolean
;
blockedReason
?
:
BlockedReason
;
}
export
type
loadingFinishedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
encodedDataLength
:
number
;
shouldReportCorbBlocking
?
:
boolean
;
}
export
type
requestInterceptedPayload
=
{
interceptionId
:
InterceptionId
;
request
:
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
ResourceType
;
isNavigationRequest
:
boolean
;
isDownload
?
:
boolean
;
redirectUrl
?
:
string
;
authChallenge
?
:
AuthChallenge
;
responseErrorReason
?
:
ErrorReason
;
responseStatusCode
?
:
number
;
responseHeaders
?
:
Headers
;
requestId
?
:
RequestId
;
}
export
type
requestServedFromCachePayload
=
{
requestId
:
RequestId
;
}
export
type
requestWillBeSentPayload
=
{
requestId
:
RequestId
;
loaderId
:
LoaderId
;
documentURL
:
string
;
request
:
Request
;
timestamp
:
MonotonicTime
;
wallTime
:
TimeSinceEpoch
;
initiator
:
Initiator
;
redirectResponse
?
:
Response
;
type
?
:
ResourceType
;
frameId
?
:
Page
.
FrameId
;
hasUserGesture
?
:
boolean
;
}
export
type
resourceChangedPriorityPayload
=
{
requestId
:
RequestId
;
newPriority
:
ResourcePriority
;
timestamp
:
MonotonicTime
;
}
export
type
signedExchangeReceivedPayload
=
{
requestId
:
RequestId
;
info
:
SignedExchangeInfo
;
}
export
type
responseReceivedPayload
=
{
requestId
:
RequestId
;
loaderId
:
LoaderId
;
timestamp
:
MonotonicTime
;
type
:
ResourceType
;
response
:
Response
;
frameId
?
:
Page
.
FrameId
;
}
export
type
webSocketClosedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
}
export
type
webSocketCreatedPayload
=
{
requestId
:
RequestId
;
url
:
string
;
initiator
?
:
Initiator
;
}
export
type
webSocketFrameErrorPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
errorMessage
:
string
;
}
export
type
webSocketFrameReceivedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketFrame
;
}
export
type
webSocketFrameSentPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketFrame
;
}
export
type
webSocketHandshakeResponseReceivedPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketResponse
;
}
export
type
webSocketWillSendHandshakeRequestPayload
=
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
wallTime
:
TimeSinceEpoch
;
request
:
WebSocketRequest
;
}
export
type
requestWillBeSentExtraInfoPayload
=
{
requestId
:
RequestId
;
blockedCookies
:
BlockedCookieWithReason
[
]
;
headers
:
Headers
;
}
export
type
responseReceivedExtraInfoPayload
=
{
requestId
:
RequestId
;
blockedCookies
:
BlockedSetCookieWithReason
[
]
;
headers
:
Headers
;
headersText
?
:
string
;
}
export
type
canClearBrowserCacheParameters
=
{
}
export
type
canClearBrowserCacheReturnValue
=
{
result
:
boolean
;
}
export
type
canClearBrowserCookiesParameters
=
{
}
export
type
canClearBrowserCookiesReturnValue
=
{
result
:
boolean
;
}
export
type
canEmulateNetworkConditionsParameters
=
{
}
export
type
canEmulateNetworkConditionsReturnValue
=
{
result
:
boolean
;
}
export
type
clearBrowserCacheParameters
=
{
}
export
type
clearBrowserCacheReturnValue
=
{
}
export
type
clearBrowserCookiesParameters
=
{
}
export
type
clearBrowserCookiesReturnValue
=
{
}
export
type
continueInterceptedRequestParameters
=
{
interceptionId
:
InterceptionId
;
errorReason
?
:
ErrorReason
;
rawResponse
?
:
binary
;
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
Headers
;
authChallengeResponse
?
:
AuthChallengeResponse
;
}
export
type
continueInterceptedRequestReturnValue
=
{
}
export
type
deleteCookiesParameters
=
{
name
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
}
export
type
deleteCookiesReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
emulateNetworkConditionsParameters
=
{
offline
:
boolean
;
latency
:
number
;
downloadThroughput
:
number
;
uploadThroughput
:
number
;
connectionType
?
:
ConnectionType
;
}
export
type
emulateNetworkConditionsReturnValue
=
{
}
export
type
enableParameters
=
{
maxTotalBufferSize
?
:
number
;
maxResourceBufferSize
?
:
number
;
maxPostDataSize
?
:
number
;
}
export
type
enableReturnValue
=
{
}
export
type
getAllCookiesParameters
=
{
}
export
type
getAllCookiesReturnValue
=
{
cookies
:
Cookie
[
]
;
}
export
type
getCertificateParameters
=
{
origin
:
string
;
}
export
type
getCertificateReturnValue
=
{
tableNames
:
string
[
]
;
}
export
type
getCookiesParameters
=
{
urls
?
:
string
[
]
;
}
export
type
getCookiesReturnValue
=
{
cookies
:
Cookie
[
]
;
}
export
type
getResponseBodyParameters
=
{
requestId
:
RequestId
;
}
export
type
getResponseBodyReturnValue
=
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
type
getRequestPostDataParameters
=
{
requestId
:
RequestId
;
}
export
type
getRequestPostDataReturnValue
=
{
postData
:
string
;
}
export
type
getResponseBodyForInterceptionParameters
=
{
interceptionId
:
InterceptionId
;
}
export
type
getResponseBodyForInterceptionReturnValue
=
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
type
takeResponseBodyForInterceptionAsStreamParameters
=
{
interceptionId
:
InterceptionId
;
}
export
type
takeResponseBodyForInterceptionAsStreamReturnValue
=
{
stream
:
IO
.
StreamHandle
;
}
export
type
replayXHRParameters
=
{
requestId
:
RequestId
;
}
export
type
replayXHRReturnValue
=
{
}
export
type
searchInResponseBodyParameters
=
{
requestId
:
RequestId
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
type
searchInResponseBodyReturnValue
=
{
result
:
Debugger
.
SearchMatch
[
]
;
}
export
type
setBlockedURLsParameters
=
{
urls
:
string
[
]
;
}
export
type
setBlockedURLsReturnValue
=
{
}
export
type
setBypassServiceWorkerParameters
=
{
bypass
:
boolean
;
}
export
type
setBypassServiceWorkerReturnValue
=
{
}
export
type
setCacheDisabledParameters
=
{
cacheDisabled
:
boolean
;
}
export
type
setCacheDisabledReturnValue
=
{
}
export
type
setCookieParameters
=
{
name
:
string
;
value
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
secure
?
:
boolean
;
httpOnly
?
:
boolean
;
sameSite
?
:
CookieSameSite
;
expires
?
:
TimeSinceEpoch
;
priority
?
:
CookiePriority
;
}
export
type
setCookieReturnValue
=
{
success
:
boolean
;
}
export
type
setCookiesParameters
=
{
cookies
:
CookieParam
[
]
;
}
export
type
setCookiesReturnValue
=
{
}
export
type
setDataSizeLimitsForTestParameters
=
{
maxTotalSize
:
number
;
maxResourceSize
:
number
;
}
export
type
setDataSizeLimitsForTestReturnValue
=
{
}
export
type
setExtraHTTPHeadersParameters
=
{
headers
:
Headers
;
}
export
type
setExtraHTTPHeadersReturnValue
=
{
}
export
type
setRequestInterceptionParameters
=
{
patterns
:
RequestPattern
[
]
;
}
export
type
setRequestInterceptionReturnValue
=
{
}
export
type
setUserAgentOverrideParameters
=
{
userAgent
:
string
;
acceptLanguage
?
:
string
;
platform
?
:
string
;
}
export
type
setUserAgentOverrideReturnValue
=
{
}
}
export
module
Overlay
{
export
interface
HighlightConfig
{
showInfo
?
:
boolean
;
showStyles
?
:
boolean
;
showRulers
?
:
boolean
;
showExtensionLines
?
:
boolean
;
contentColor
?
:
DOM
.
RGBA
;
paddingColor
?
:
DOM
.
RGBA
;
borderColor
?
:
DOM
.
RGBA
;
marginColor
?
:
DOM
.
RGBA
;
eventTargetColor
?
:
DOM
.
RGBA
;
shapeColor
?
:
DOM
.
RGBA
;
shapeMarginColor
?
:
DOM
.
RGBA
;
cssGridColor
?
:
DOM
.
RGBA
;
}
export
type
InspectMode
=
"
searchForNode
"
|
"
searchForUAShadowDOM
"
|
"
captureAreaScreenshot
"
|
"
showDistances
"
|
"
none
"
;
export
type
inspectNodeRequestedPayload
=
{
backendNodeId
:
DOM
.
BackendNodeId
;
}
export
type
nodeHighlightRequestedPayload
=
{
nodeId
:
DOM
.
NodeId
;
}
export
type
screenshotRequestedPayload
=
{
viewport
:
Page
.
Viewport
;
}
export
type
inspectModeCanceledPayload
=
void
;
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getHighlightObjectForTestParameters
=
{
nodeId
:
DOM
.
NodeId
;
includeDistance
?
:
boolean
;
includeStyle
?
:
boolean
;
}
export
type
getHighlightObjectForTestReturnValue
=
{
highlight
:
object
;
}
export
type
hideHighlightParameters
=
{
}
export
type
hideHighlightReturnValue
=
{
}
export
type
highlightFrameParameters
=
{
frameId
:
Page
.
FrameId
;
contentColor
?
:
DOM
.
RGBA
;
contentOutlineColor
?
:
DOM
.
RGBA
;
}
export
type
highlightFrameReturnValue
=
{
}
export
type
highlightNodeParameters
=
{
highlightConfig
:
HighlightConfig
;
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
selector
?
:
string
;
}
export
type
highlightNodeReturnValue
=
{
}
export
type
highlightQuadParameters
=
{
quad
:
DOM
.
Quad
;
color
?
:
DOM
.
RGBA
;
outlineColor
?
:
DOM
.
RGBA
;
}
export
type
highlightQuadReturnValue
=
{
}
export
type
highlightRectParameters
=
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
color
?
:
DOM
.
RGBA
;
outlineColor
?
:
DOM
.
RGBA
;
}
export
type
highlightRectReturnValue
=
{
}
export
type
setInspectModeParameters
=
{
mode
:
InspectMode
;
highlightConfig
?
:
HighlightConfig
;
}
export
type
setInspectModeReturnValue
=
{
}
export
type
setShowAdHighlightsParameters
=
{
show
:
boolean
;
}
export
type
setShowAdHighlightsReturnValue
=
{
}
export
type
setPausedInDebuggerMessageParameters
=
{
message
?
:
string
;
}
export
type
setPausedInDebuggerMessageReturnValue
=
{
}
export
type
setShowDebugBordersParameters
=
{
show
:
boolean
;
}
export
type
setShowDebugBordersReturnValue
=
{
}
export
type
setShowFPSCounterParameters
=
{
show
:
boolean
;
}
export
type
setShowFPSCounterReturnValue
=
{
}
export
type
setShowPaintRectsParameters
=
{
result
:
boolean
;
}
export
type
setShowPaintRectsReturnValue
=
{
}
export
type
setShowLayoutShiftRegionsParameters
=
{
result
:
boolean
;
}
export
type
setShowLayoutShiftRegionsReturnValue
=
{
}
export
type
setShowScrollBottleneckRectsParameters
=
{
show
:
boolean
;
}
export
type
setShowScrollBottleneckRectsReturnValue
=
{
}
export
type
setShowHitTestBordersParameters
=
{
show
:
boolean
;
}
export
type
setShowHitTestBordersReturnValue
=
{
}
export
type
setShowViewportSizeOnResizeParameters
=
{
show
:
boolean
;
}
export
type
setShowViewportSizeOnResizeReturnValue
=
{
}
}
export
module
Page
{
export
type
FrameId
=
string
;
export
interface
Frame
{
id
:
FrameId
;
parentId
?
:
string
;
loaderId
:
Network
.
LoaderId
;
name
?
:
string
;
url
:
string
;
urlFragment
?
:
string
;
securityOrigin
:
string
;
mimeType
:
string
;
unreachableUrl
?
:
string
;
}
export
interface
FrameResource
{
url
:
string
;
type
:
Network
.
ResourceType
;
mimeType
:
string
;
lastModified
?
:
Network
.
TimeSinceEpoch
;
contentSize
?
:
number
;
failed
?
:
boolean
;
canceled
?
:
boolean
;
}
export
interface
FrameResourceTree
{
frame
:
Frame
;
childFrames
?
:
FrameResourceTree
[
]
;
resources
:
FrameResource
[
]
;
}
export
interface
FrameTree
{
frame
:
Frame
;
childFrames
?
:
FrameTree
[
]
;
}
export
type
ScriptIdentifier
=
string
;
export
type
TransitionType
=
"
link
"
|
"
typed
"
|
"
address_bar
"
|
"
auto_bookmark
"
|
"
auto_subframe
"
|
"
manual_subframe
"
|
"
generated
"
|
"
auto_toplevel
"
|
"
form_submit
"
|
"
reload
"
|
"
keyword
"
|
"
keyword_generated
"
|
"
other
"
;
export
interface
NavigationEntry
{
id
:
number
;
url
:
string
;
userTypedURL
:
string
;
title
:
string
;
transitionType
:
TransitionType
;
}
export
interface
ScreencastFrameMetadata
{
offsetTop
:
number
;
pageScaleFactor
:
number
;
deviceWidth
:
number
;
deviceHeight
:
number
;
scrollOffsetX
:
number
;
scrollOffsetY
:
number
;
timestamp
?
:
Network
.
TimeSinceEpoch
;
}
export
type
DialogType
=
"
alert
"
|
"
confirm
"
|
"
prompt
"
|
"
beforeunload
"
;
export
interface
AppManifestError
{
message
:
string
;
critical
:
number
;
line
:
number
;
column
:
number
;
}
export
interface
AppManifestParsedProperties
{
scope
:
string
;
}
export
interface
LayoutViewport
{
pageX
:
number
;
pageY
:
number
;
clientWidth
:
number
;
clientHeight
:
number
;
}
export
interface
VisualViewport
{
offsetX
:
number
;
offsetY
:
number
;
pageX
:
number
;
pageY
:
number
;
clientWidth
:
number
;
clientHeight
:
number
;
scale
:
number
;
zoom
?
:
number
;
}
export
interface
Viewport
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
scale
:
number
;
}
export
interface
FontFamilies
{
standard
?
:
string
;
fixed
?
:
string
;
serif
?
:
string
;
sansSerif
?
:
string
;
cursive
?
:
string
;
fantasy
?
:
string
;
pictograph
?
:
string
;
}
export
interface
FontSizes
{
standard
?
:
number
;
fixed
?
:
number
;
}
export
type
ClientNavigationReason
=
"
formSubmissionGet
"
|
"
formSubmissionPost
"
|
"
httpHeaderRefresh
"
|
"
scriptInitiated
"
|
"
metaTagRefresh
"
|
"
pageBlockInterstitial
"
|
"
reload
"
|
"
anchorClick
"
;
export
interface
InstallabilityErrorArgument
{
name
:
string
;
value
:
string
;
}
export
interface
InstallabilityError
{
errorId
:
string
;
errorArguments
:
InstallabilityErrorArgument
[
]
;
}
export
type
ReferrerPolicy
=
"
noReferrer
"
|
"
noReferrerWhenDowngrade
"
|
"
origin
"
|
"
originWhenCrossOrigin
"
|
"
sameOrigin
"
|
"
strictOrigin
"
|
"
strictOriginWhenCrossOrigin
"
|
"
unsafeUrl
"
;
export
type
domContentEventFiredPayload
=
{
timestamp
:
Network
.
MonotonicTime
;
}
export
type
fileChooserOpenedPayload
=
{
frameId
:
FrameId
;
backendNodeId
:
DOM
.
BackendNodeId
;
mode
:
"
selectSingle
"
|
"
selectMultiple
"
;
}
export
type
frameAttachedPayload
=
{
frameId
:
FrameId
;
parentFrameId
:
FrameId
;
stack
?
:
Runtime
.
StackTrace
;
}
export
type
frameClearedScheduledNavigationPayload
=
{
frameId
:
FrameId
;
}
export
type
frameDetachedPayload
=
{
frameId
:
FrameId
;
}
export
type
frameNavigatedPayload
=
{
frame
:
Frame
;
}
export
type
frameResizedPayload
=
void
;
export
type
frameRequestedNavigationPayload
=
{
frameId
:
FrameId
;
reason
:
ClientNavigationReason
;
url
:
string
;
}
export
type
frameScheduledNavigationPayload
=
{
frameId
:
FrameId
;
delay
:
number
;
reason
:
ClientNavigationReason
;
url
:
string
;
}
export
type
frameStartedLoadingPayload
=
{
frameId
:
FrameId
;
}
export
type
frameStoppedLoadingPayload
=
{
frameId
:
FrameId
;
}
export
type
downloadWillBeginPayload
=
{
frameId
:
FrameId
;
guid
:
string
;
url
:
string
;
}
export
type
downloadProgressPayload
=
{
guid
:
string
;
totalBytes
:
number
;
receivedBytes
:
number
;
state
:
"
inProgress
"
|
"
completed
"
|
"
canceled
"
;
}
export
type
interstitialHiddenPayload
=
void
;
export
type
interstitialShownPayload
=
void
;
export
type
javascriptDialogClosedPayload
=
{
result
:
boolean
;
userInput
:
string
;
}
export
type
javascriptDialogOpeningPayload
=
{
url
:
string
;
message
:
string
;
type
:
DialogType
;
hasBrowserHandler
:
boolean
;
defaultPrompt
?
:
string
;
}
export
type
lifecycleEventPayload
=
{
frameId
:
FrameId
;
loaderId
:
Network
.
LoaderId
;
name
:
string
;
timestamp
:
Network
.
MonotonicTime
;
}
export
type
loadEventFiredPayload
=
{
timestamp
:
Network
.
MonotonicTime
;
}
export
type
navigatedWithinDocumentPayload
=
{
frameId
:
FrameId
;
url
:
string
;
}
export
type
screencastFramePayload
=
{
data
:
binary
;
metadata
:
ScreencastFrameMetadata
;
sessionId
:
number
;
}
export
type
screencastVisibilityChangedPayload
=
{
visible
:
boolean
;
}
export
type
windowOpenPayload
=
{
url
:
string
;
windowName
:
string
;
windowFeatures
:
string
[
]
;
userGesture
:
boolean
;
}
export
type
compilationCacheProducedPayload
=
{
url
:
string
;
data
:
binary
;
}
export
type
addScriptToEvaluateOnLoadParameters
=
{
scriptSource
:
string
;
}
export
type
addScriptToEvaluateOnLoadReturnValue
=
{
identifier
:
ScriptIdentifier
;
}
export
type
addScriptToEvaluateOnNewDocumentParameters
=
{
source
:
string
;
worldName
?
:
string
;
}
export
type
addScriptToEvaluateOnNewDocumentReturnValue
=
{
identifier
:
ScriptIdentifier
;
}
export
type
bringToFrontParameters
=
{
}
export
type
bringToFrontReturnValue
=
{
}
export
type
captureScreenshotParameters
=
{
format
?
:
"
jpeg
"
|
"
png
"
;
quality
?
:
number
;
clip
?
:
Viewport
;
fromSurface
?
:
boolean
;
}
export
type
captureScreenshotReturnValue
=
{
data
:
binary
;
}
export
type
captureSnapshotParameters
=
{
format
?
:
"
mhtml
"
;
}
export
type
captureSnapshotReturnValue
=
{
data
:
string
;
}
export
type
clearDeviceMetricsOverrideParameters
=
{
}
export
type
clearDeviceMetricsOverrideReturnValue
=
{
}
export
type
clearDeviceOrientationOverrideParameters
=
{
}
export
type
clearDeviceOrientationOverrideReturnValue
=
{
}
export
type
clearGeolocationOverrideParameters
=
{
}
export
type
clearGeolocationOverrideReturnValue
=
{
}
export
type
createIsolatedWorldParameters
=
{
frameId
:
FrameId
;
worldName
?
:
string
;
grantUniveralAccess
?
:
boolean
;
}
export
type
createIsolatedWorldReturnValue
=
{
executionContextId
:
Runtime
.
ExecutionContextId
;
}
export
type
deleteCookieParameters
=
{
cookieName
:
string
;
url
:
string
;
}
export
type
deleteCookieReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getAppManifestParameters
=
{
}
export
type
getAppManifestReturnValue
=
{
url
:
string
;
errors
:
AppManifestError
[
]
;
data
?
:
string
;
parsed
?
:
AppManifestParsedProperties
;
}
export
type
getInstallabilityErrorsParameters
=
{
}
export
type
getInstallabilityErrorsReturnValue
=
{
installabilityErrors
:
InstallabilityError
[
]
;
}
export
type
getManifestIconsParameters
=
{
}
export
type
getManifestIconsReturnValue
=
{
primaryIcon
?
:
binary
;
}
export
type
getCookiesParameters
=
{
}
export
type
getCookiesReturnValue
=
{
cookies
:
Network
.
Cookie
[
]
;
}
export
type
getFrameTreeParameters
=
{
}
export
type
getFrameTreeReturnValue
=
{
frameTree
:
FrameTree
;
}
export
type
getLayoutMetricsParameters
=
{
}
export
type
getLayoutMetricsReturnValue
=
{
layoutViewport
:
LayoutViewport
;
visualViewport
:
VisualViewport
;
contentSize
:
DOM
.
Rect
;
}
export
type
getNavigationHistoryParameters
=
{
}
export
type
getNavigationHistoryReturnValue
=
{
currentIndex
:
number
;
entries
:
NavigationEntry
[
]
;
}
export
type
resetNavigationHistoryParameters
=
{
}
export
type
resetNavigationHistoryReturnValue
=
{
}
export
type
getResourceContentParameters
=
{
frameId
:
FrameId
;
url
:
string
;
}
export
type
getResourceContentReturnValue
=
{
content
:
string
;
base64Encoded
:
boolean
;
}
export
type
getResourceTreeParameters
=
{
}
export
type
getResourceTreeReturnValue
=
{
frameTree
:
FrameResourceTree
;
}
export
type
handleJavaScriptDialogParameters
=
{
accept
:
boolean
;
promptText
?
:
string
;
}
export
type
handleJavaScriptDialogReturnValue
=
{
}
export
type
navigateParameters
=
{
url
:
string
;
referrer
?
:
string
;
transitionType
?
:
TransitionType
;
frameId
?
:
FrameId
;
referrerPolicy
?
:
ReferrerPolicy
;
}
export
type
navigateReturnValue
=
{
frameId
:
FrameId
;
loaderId
?
:
Network
.
LoaderId
;
errorText
?
:
string
;
}
export
type
navigateToHistoryEntryParameters
=
{
entryId
:
number
;
}
export
type
navigateToHistoryEntryReturnValue
=
{
}
export
type
printToPDFParameters
=
{
landscape
?
:
boolean
;
displayHeaderFooter
?
:
boolean
;
printBackground
?
:
boolean
;
scale
?
:
number
;
paperWidth
?
:
number
;
paperHeight
?
:
number
;
marginTop
?
:
number
;
marginBottom
?
:
number
;
marginLeft
?
:
number
;
marginRight
?
:
number
;
pageRanges
?
:
string
;
ignoreInvalidPageRanges
?
:
boolean
;
headerTemplate
?
:
string
;
footerTemplate
?
:
string
;
preferCSSPageSize
?
:
boolean
;
transferMode
?
:
"
ReturnAsBase64
"
|
"
ReturnAsStream
"
;
}
export
type
printToPDFReturnValue
=
{
data
:
binary
;
stream
?
:
IO
.
StreamHandle
;
}
export
type
reloadParameters
=
{
ignoreCache
?
:
boolean
;
scriptToEvaluateOnLoad
?
:
string
;
}
export
type
reloadReturnValue
=
{
}
export
type
removeScriptToEvaluateOnLoadParameters
=
{
identifier
:
ScriptIdentifier
;
}
export
type
removeScriptToEvaluateOnLoadReturnValue
=
{
}
export
type
removeScriptToEvaluateOnNewDocumentParameters
=
{
identifier
:
ScriptIdentifier
;
}
export
type
removeScriptToEvaluateOnNewDocumentReturnValue
=
{
}
export
type
screencastFrameAckParameters
=
{
sessionId
:
number
;
}
export
type
screencastFrameAckReturnValue
=
{
}
export
type
searchInResourceParameters
=
{
frameId
:
FrameId
;
url
:
string
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
type
searchInResourceReturnValue
=
{
result
:
Debugger
.
SearchMatch
[
]
;
}
export
type
setAdBlockingEnabledParameters
=
{
enabled
:
boolean
;
}
export
type
setAdBlockingEnabledReturnValue
=
{
}
export
type
setBypassCSPParameters
=
{
enabled
:
boolean
;
}
export
type
setBypassCSPReturnValue
=
{
}
export
type
setDeviceMetricsOverrideParameters
=
{
width
:
number
;
height
:
number
;
deviceScaleFactor
:
number
;
mobile
:
boolean
;
scale
?
:
number
;
screenWidth
?
:
number
;
screenHeight
?
:
number
;
positionX
?
:
number
;
positionY
?
:
number
;
dontSetVisibleSize
?
:
boolean
;
screenOrientation
?
:
Emulation
.
ScreenOrientation
;
viewport
?
:
Viewport
;
}
export
type
setDeviceMetricsOverrideReturnValue
=
{
}
export
type
setDeviceOrientationOverrideParameters
=
{
alpha
:
number
;
beta
:
number
;
gamma
:
number
;
}
export
type
setDeviceOrientationOverrideReturnValue
=
{
}
export
type
setFontFamiliesParameters
=
{
fontFamilies
:
FontFamilies
;
}
export
type
setFontFamiliesReturnValue
=
{
}
export
type
setFontSizesParameters
=
{
fontSizes
:
FontSizes
;
}
export
type
setFontSizesReturnValue
=
{
}
export
type
setDocumentContentParameters
=
{
frameId
:
FrameId
;
html
:
string
;
}
export
type
setDocumentContentReturnValue
=
{
}
export
type
setDownloadBehaviorParameters
=
{
behavior
:
"
deny
"
|
"
allow
"
|
"
default
"
;
downloadPath
?
:
string
;
}
export
type
setDownloadBehaviorReturnValue
=
{
}
export
type
setGeolocationOverrideParameters
=
{
latitude
?
:
number
;
longitude
?
:
number
;
accuracy
?
:
number
;
}
export
type
setGeolocationOverrideReturnValue
=
{
}
export
type
setLifecycleEventsEnabledParameters
=
{
enabled
:
boolean
;
}
export
type
setLifecycleEventsEnabledReturnValue
=
{
}
export
type
setTouchEmulationEnabledParameters
=
{
enabled
:
boolean
;
configuration
?
:
"
mobile
"
|
"
desktop
"
;
}
export
type
setTouchEmulationEnabledReturnValue
=
{
}
export
type
startScreencastParameters
=
{
format
?
:
"
jpeg
"
|
"
png
"
;
quality
?
:
number
;
maxWidth
?
:
number
;
maxHeight
?
:
number
;
everyNthFrame
?
:
number
;
}
export
type
startScreencastReturnValue
=
{
}
export
type
stopLoadingParameters
=
{
}
export
type
stopLoadingReturnValue
=
{
}
export
type
crashParameters
=
{
}
export
type
crashReturnValue
=
{
}
export
type
closeParameters
=
{
}
export
type
closeReturnValue
=
{
}
export
type
setWebLifecycleStateParameters
=
{
state
:
"
frozen
"
|
"
active
"
;
}
export
type
setWebLifecycleStateReturnValue
=
{
}
export
type
stopScreencastParameters
=
{
}
export
type
stopScreencastReturnValue
=
{
}
export
type
setProduceCompilationCacheParameters
=
{
enabled
:
boolean
;
}
export
type
setProduceCompilationCacheReturnValue
=
{
}
export
type
addCompilationCacheParameters
=
{
url
:
string
;
data
:
binary
;
}
export
type
addCompilationCacheReturnValue
=
{
}
export
type
clearCompilationCacheParameters
=
{
}
export
type
clearCompilationCacheReturnValue
=
{
}
export
type
generateTestReportParameters
=
{
message
:
string
;
group
?
:
string
;
}
export
type
generateTestReportReturnValue
=
{
}
export
type
waitForDebuggerParameters
=
{
}
export
type
waitForDebuggerReturnValue
=
{
}
export
type
setInterceptFileChooserDialogParameters
=
{
enabled
:
boolean
;
}
export
type
setInterceptFileChooserDialogReturnValue
=
{
}
}
export
module
Performance
{
export
interface
Metric
{
name
:
string
;
value
:
number
;
}
export
type
metricsPayload
=
{
metrics
:
Metric
[
]
;
title
:
string
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
timeDomain
?
:
"
timeTicks
"
|
"
threadTicks
"
;
}
export
type
enableReturnValue
=
{
}
export
type
setTimeDomainParameters
=
{
timeDomain
:
"
timeTicks
"
|
"
threadTicks
"
;
}
export
type
setTimeDomainReturnValue
=
{
}
export
type
getMetricsParameters
=
{
}
export
type
getMetricsReturnValue
=
{
metrics
:
Metric
[
]
;
}
}
export
module
Security
{
export
type
CertificateId
=
number
;
export
type
MixedContentType
=
"
blockable
"
|
"
optionally
-
blockable
"
|
"
none
"
;
export
type
SecurityState
=
"
unknown
"
|
"
neutral
"
|
"
insecure
"
|
"
secure
"
|
"
info
"
|
"
insecure
-
broken
"
;
export
interface
CertificateSecurityState
{
protocol
:
string
;
keyExchange
:
string
;
keyExchangeGroup
?
:
string
;
cipher
:
string
;
mac
?
:
string
;
certificate
:
string
[
]
;
subjectName
:
string
;
issuer
:
string
;
validFrom
:
Network
.
TimeSinceEpoch
;
validTo
:
Network
.
TimeSinceEpoch
;
certificateNetworkError
?
:
string
;
certificateHasWeakSignature
:
boolean
;
certificateHasSha1Signature
:
boolean
;
modernSSL
:
boolean
;
obsoleteSslProtocol
:
boolean
;
obsoleteSslKeyExchange
:
boolean
;
obsoleteSslCipher
:
boolean
;
obsoleteSslSignature
:
boolean
;
}
export
type
SafetyTipStatus
=
"
badReputation
"
|
"
lookalike
"
;
export
interface
SafetyTipInfo
{
safetyTipStatus
:
SafetyTipStatus
;
safeUrl
?
:
string
;
}
export
interface
VisibleSecurityState
{
securityState
:
SecurityState
;
certificateSecurityState
?
:
CertificateSecurityState
;
safetyTipInfo
?
:
SafetyTipInfo
;
securityStateIssueIds
:
string
[
]
;
}
export
interface
SecurityStateExplanation
{
securityState
:
SecurityState
;
title
:
string
;
summary
:
string
;
description
:
string
;
mixedContentType
:
MixedContentType
;
certificate
:
string
[
]
;
recommendations
?
:
string
[
]
;
}
export
interface
InsecureContentStatus
{
ranMixedContent
:
boolean
;
displayedMixedContent
:
boolean
;
containedMixedForm
:
boolean
;
ranContentWithCertErrors
:
boolean
;
displayedContentWithCertErrors
:
boolean
;
ranInsecureContentStyle
:
SecurityState
;
displayedInsecureContentStyle
:
SecurityState
;
}
export
type
CertificateErrorAction
=
"
continue
"
|
"
cancel
"
;
export
type
certificateErrorPayload
=
{
eventId
:
number
;
errorType
:
string
;
requestURL
:
string
;
}
export
type
visibleSecurityStateChangedPayload
=
{
visibleSecurityState
:
VisibleSecurityState
;
}
export
type
securityStateChangedPayload
=
{
securityState
:
SecurityState
;
schemeIsCryptographic
:
boolean
;
explanations
:
SecurityStateExplanation
[
]
;
insecureContentStatus
:
InsecureContentStatus
;
summary
?
:
string
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
setIgnoreCertificateErrorsParameters
=
{
ignore
:
boolean
;
}
export
type
setIgnoreCertificateErrorsReturnValue
=
{
}
export
type
handleCertificateErrorParameters
=
{
eventId
:
number
;
action
:
CertificateErrorAction
;
}
export
type
handleCertificateErrorReturnValue
=
{
}
export
type
setOverrideCertificateErrorsParameters
=
{
override
:
boolean
;
}
export
type
setOverrideCertificateErrorsReturnValue
=
{
}
}
export
module
ServiceWorker
{
export
type
RegistrationID
=
string
;
export
interface
ServiceWorkerRegistration
{
registrationId
:
RegistrationID
;
scopeURL
:
string
;
isDeleted
:
boolean
;
}
export
type
ServiceWorkerVersionRunningStatus
=
"
stopped
"
|
"
starting
"
|
"
running
"
|
"
stopping
"
;
export
type
ServiceWorkerVersionStatus
=
"
new
"
|
"
installing
"
|
"
installed
"
|
"
activating
"
|
"
activated
"
|
"
redundant
"
;
export
interface
ServiceWorkerVersion
{
versionId
:
string
;
registrationId
:
RegistrationID
;
scriptURL
:
string
;
runningStatus
:
ServiceWorkerVersionRunningStatus
;
status
:
ServiceWorkerVersionStatus
;
scriptLastModified
?
:
number
;
scriptResponseTime
?
:
number
;
controlledClients
?
:
Target
.
TargetID
[
]
;
targetId
?
:
Target
.
TargetID
;
}
export
interface
ServiceWorkerErrorMessage
{
errorMessage
:
string
;
registrationId
:
RegistrationID
;
versionId
:
string
;
sourceURL
:
string
;
lineNumber
:
number
;
columnNumber
:
number
;
}
export
type
workerErrorReportedPayload
=
{
errorMessage
:
ServiceWorkerErrorMessage
;
}
export
type
workerRegistrationUpdatedPayload
=
{
registrations
:
ServiceWorkerRegistration
[
]
;
}
export
type
workerVersionUpdatedPayload
=
{
versions
:
ServiceWorkerVersion
[
]
;
}
export
type
deliverPushMessageParameters
=
{
origin
:
string
;
registrationId
:
RegistrationID
;
data
:
string
;
}
export
type
deliverPushMessageReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
dispatchSyncEventParameters
=
{
origin
:
string
;
registrationId
:
RegistrationID
;
tag
:
string
;
lastChance
:
boolean
;
}
export
type
dispatchSyncEventReturnValue
=
{
}
export
type
dispatchPeriodicSyncEventParameters
=
{
origin
:
string
;
registrationId
:
RegistrationID
;
tag
:
string
;
}
export
type
dispatchPeriodicSyncEventReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
inspectWorkerParameters
=
{
versionId
:
string
;
}
export
type
inspectWorkerReturnValue
=
{
}
export
type
setForceUpdateOnPageLoadParameters
=
{
forceUpdateOnPageLoad
:
boolean
;
}
export
type
setForceUpdateOnPageLoadReturnValue
=
{
}
export
type
skipWaitingParameters
=
{
scopeURL
:
string
;
}
export
type
skipWaitingReturnValue
=
{
}
export
type
startWorkerParameters
=
{
scopeURL
:
string
;
}
export
type
startWorkerReturnValue
=
{
}
export
type
stopAllWorkersParameters
=
{
}
export
type
stopAllWorkersReturnValue
=
{
}
export
type
stopWorkerParameters
=
{
versionId
:
string
;
}
export
type
stopWorkerReturnValue
=
{
}
export
type
unregisterParameters
=
{
scopeURL
:
string
;
}
export
type
unregisterReturnValue
=
{
}
export
type
updateRegistrationParameters
=
{
scopeURL
:
string
;
}
export
type
updateRegistrationReturnValue
=
{
}
}
export
module
Storage
{
export
type
StorageType
=
"
appcache
"
|
"
cookies
"
|
"
file_systems
"
|
"
indexeddb
"
|
"
local_storage
"
|
"
shader_cache
"
|
"
websql
"
|
"
service_workers
"
|
"
cache_storage
"
|
"
all
"
|
"
other
"
;
export
interface
UsageForType
{
storageType
:
StorageType
;
usage
:
number
;
}
export
type
cacheStorageContentUpdatedPayload
=
{
origin
:
string
;
cacheName
:
string
;
}
export
type
cacheStorageListUpdatedPayload
=
{
origin
:
string
;
}
export
type
indexedDBContentUpdatedPayload
=
{
origin
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
type
indexedDBListUpdatedPayload
=
{
origin
:
string
;
}
export
type
clearDataForOriginParameters
=
{
origin
:
string
;
storageTypes
:
string
;
}
export
type
clearDataForOriginReturnValue
=
{
}
export
type
getCookiesParameters
=
{
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
type
getCookiesReturnValue
=
{
cookies
:
Network
.
Cookie
[
]
;
}
export
type
setCookiesParameters
=
{
cookies
:
Network
.
CookieParam
[
]
;
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
type
setCookiesReturnValue
=
{
}
export
type
clearCookiesParameters
=
{
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
type
clearCookiesReturnValue
=
{
}
export
type
getUsageAndQuotaParameters
=
{
origin
:
string
;
}
export
type
getUsageAndQuotaReturnValue
=
{
usage
:
number
;
quota
:
number
;
usageBreakdown
:
UsageForType
[
]
;
}
export
type
trackCacheStorageForOriginParameters
=
{
origin
:
string
;
}
export
type
trackCacheStorageForOriginReturnValue
=
{
}
export
type
trackIndexedDBForOriginParameters
=
{
origin
:
string
;
}
export
type
trackIndexedDBForOriginReturnValue
=
{
}
export
type
untrackCacheStorageForOriginParameters
=
{
origin
:
string
;
}
export
type
untrackCacheStorageForOriginReturnValue
=
{
}
export
type
untrackIndexedDBForOriginParameters
=
{
origin
:
string
;
}
export
type
untrackIndexedDBForOriginReturnValue
=
{
}
}
export
module
SystemInfo
{
export
interface
GPUDevice
{
vendorId
:
number
;
deviceId
:
number
;
subSysId
?
:
number
;
revision
?
:
number
;
vendorString
:
string
;
deviceString
:
string
;
driverVendor
:
string
;
driverVersion
:
string
;
}
export
interface
Size
{
width
:
number
;
height
:
number
;
}
export
interface
VideoDecodeAcceleratorCapability
{
profile
:
string
;
maxResolution
:
Size
;
minResolution
:
Size
;
}
export
interface
VideoEncodeAcceleratorCapability
{
profile
:
string
;
maxResolution
:
Size
;
maxFramerateNumerator
:
number
;
maxFramerateDenominator
:
number
;
}
export
type
SubsamplingFormat
=
"
yuv420
"
|
"
yuv422
"
|
"
yuv444
"
;
export
type
ImageType
=
"
jpeg
"
|
"
webp
"
|
"
unknown
"
;
export
interface
ImageDecodeAcceleratorCapability
{
imageType
:
ImageType
;
maxDimensions
:
Size
;
minDimensions
:
Size
;
subsamplings
:
SubsamplingFormat
[
]
;
}
export
interface
GPUInfo
{
devices
:
GPUDevice
[
]
;
auxAttributes
?
:
object
;
featureStatus
?
:
object
;
driverBugWorkarounds
:
string
[
]
;
videoDecoding
:
VideoDecodeAcceleratorCapability
[
]
;
videoEncoding
:
VideoEncodeAcceleratorCapability
[
]
;
imageDecoding
:
ImageDecodeAcceleratorCapability
[
]
;
}
export
interface
ProcessInfo
{
type
:
string
;
id
:
number
;
cpuTime
:
number
;
}
export
type
getInfoParameters
=
{
}
export
type
getInfoReturnValue
=
{
gpu
:
GPUInfo
;
modelName
:
string
;
modelVersion
:
string
;
commandLine
:
string
;
}
export
type
getProcessInfoParameters
=
{
}
export
type
getProcessInfoReturnValue
=
{
processInfo
:
ProcessInfo
[
]
;
}
}
export
module
Target
{
export
type
TargetID
=
string
;
export
type
SessionID
=
string
;
export
interface
TargetInfo
{
targetId
:
TargetID
;
type
:
string
;
title
:
string
;
url
:
string
;
attached
:
boolean
;
openerId
?
:
TargetID
;
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
interface
RemoteLocation
{
host
:
string
;
port
:
number
;
}
export
type
attachedToTargetPayload
=
{
sessionId
:
SessionID
;
targetInfo
:
TargetInfo
;
waitingForDebugger
:
boolean
;
}
export
type
detachedFromTargetPayload
=
{
sessionId
:
SessionID
;
targetId
?
:
TargetID
;
}
export
type
receivedMessageFromTargetPayload
=
{
sessionId
:
SessionID
;
message
:
string
;
targetId
?
:
TargetID
;
}
export
type
targetCreatedPayload
=
{
targetInfo
:
TargetInfo
;
}
export
type
targetDestroyedPayload
=
{
targetId
:
TargetID
;
}
export
type
targetCrashedPayload
=
{
targetId
:
TargetID
;
status
:
string
;
errorCode
:
number
;
}
export
type
targetInfoChangedPayload
=
{
targetInfo
:
TargetInfo
;
}
export
type
activateTargetParameters
=
{
targetId
:
TargetID
;
}
export
type
activateTargetReturnValue
=
{
}
export
type
attachToTargetParameters
=
{
targetId
:
TargetID
;
flatten
?
:
boolean
;
}
export
type
attachToTargetReturnValue
=
{
sessionId
:
SessionID
;
}
export
type
attachToBrowserTargetParameters
=
{
}
export
type
attachToBrowserTargetReturnValue
=
{
sessionId
:
SessionID
;
}
export
type
closeTargetParameters
=
{
targetId
:
TargetID
;
}
export
type
closeTargetReturnValue
=
{
success
:
boolean
;
}
export
type
exposeDevToolsProtocolParameters
=
{
targetId
:
TargetID
;
bindingName
?
:
string
;
}
export
type
exposeDevToolsProtocolReturnValue
=
{
}
export
type
createBrowserContextParameters
=
{
disposeOnDetach
?
:
boolean
;
}
export
type
createBrowserContextReturnValue
=
{
browserContextId
:
Browser
.
BrowserContextID
;
}
export
type
getBrowserContextsParameters
=
{
}
export
type
getBrowserContextsReturnValue
=
{
browserContextIds
:
Browser
.
BrowserContextID
[
]
;
}
export
type
createTargetParameters
=
{
url
:
string
;
width
?
:
number
;
height
?
:
number
;
browserContextId
?
:
Browser
.
BrowserContextID
;
enableBeginFrameControl
?
:
boolean
;
newWindow
?
:
boolean
;
background
?
:
boolean
;
}
export
type
createTargetReturnValue
=
{
targetId
:
TargetID
;
}
export
type
detachFromTargetParameters
=
{
sessionId
?
:
SessionID
;
targetId
?
:
TargetID
;
}
export
type
detachFromTargetReturnValue
=
{
}
export
type
disposeBrowserContextParameters
=
{
browserContextId
:
Browser
.
BrowserContextID
;
}
export
type
disposeBrowserContextReturnValue
=
{
}
export
type
getTargetInfoParameters
=
{
targetId
?
:
TargetID
;
}
export
type
getTargetInfoReturnValue
=
{
targetInfo
:
TargetInfo
;
}
export
type
getTargetsParameters
=
{
}
export
type
getTargetsReturnValue
=
{
targetInfos
:
TargetInfo
[
]
;
}
export
type
sendMessageToTargetParameters
=
{
message
:
string
;
sessionId
?
:
SessionID
;
targetId
?
:
TargetID
;
}
export
type
sendMessageToTargetReturnValue
=
{
}
export
type
setAutoAttachParameters
=
{
autoAttach
:
boolean
;
waitForDebuggerOnStart
:
boolean
;
flatten
?
:
boolean
;
}
export
type
setAutoAttachReturnValue
=
{
}
export
type
setDiscoverTargetsParameters
=
{
discover
:
boolean
;
}
export
type
setDiscoverTargetsReturnValue
=
{
}
export
type
setRemoteLocationsParameters
=
{
locations
:
RemoteLocation
[
]
;
}
export
type
setRemoteLocationsReturnValue
=
{
}
}
export
module
Tethering
{
export
type
acceptedPayload
=
{
port
:
number
;
connectionId
:
string
;
}
export
type
bindParameters
=
{
port
:
number
;
}
export
type
bindReturnValue
=
{
}
export
type
unbindParameters
=
{
port
:
number
;
}
export
type
unbindReturnValue
=
{
}
}
export
module
Tracing
{
export
type
MemoryDumpConfig
=
object
;
export
interface
TraceConfig
{
recordMode
?
:
"
recordUntilFull
"
|
"
recordContinuously
"
|
"
recordAsMuchAsPossible
"
|
"
echoToConsole
"
;
enableSampling
?
:
boolean
;
enableSystrace
?
:
boolean
;
enableArgumentFilter
?
:
boolean
;
includedCategories
?
:
string
[
]
;
excludedCategories
?
:
string
[
]
;
syntheticDelays
?
:
string
[
]
;
memoryDumpConfig
?
:
MemoryDumpConfig
;
}
export
type
StreamFormat
=
"
json
"
|
"
proto
"
;
export
type
StreamCompression
=
"
none
"
|
"
gzip
"
;
export
type
bufferUsagePayload
=
{
percentFull
?
:
number
;
eventCount
?
:
number
;
value
?
:
number
;
}
export
type
dataCollectedPayload
=
{
value
:
object
[
]
;
}
export
type
tracingCompletePayload
=
{
dataLossOccurred
:
boolean
;
stream
?
:
IO
.
StreamHandle
;
traceFormat
?
:
StreamFormat
;
streamCompression
?
:
StreamCompression
;
}
export
type
endParameters
=
{
}
export
type
endReturnValue
=
{
}
export
type
getCategoriesParameters
=
{
}
export
type
getCategoriesReturnValue
=
{
categories
:
string
[
]
;
}
export
type
recordClockSyncMarkerParameters
=
{
syncId
:
string
;
}
export
type
recordClockSyncMarkerReturnValue
=
{
}
export
type
requestMemoryDumpParameters
=
{
deterministic
?
:
boolean
;
}
export
type
requestMemoryDumpReturnValue
=
{
dumpGuid
:
string
;
success
:
boolean
;
}
export
type
startParameters
=
{
categories
?
:
string
;
options
?
:
string
;
bufferUsageReportingInterval
?
:
number
;
transferMode
?
:
"
ReportEvents
"
|
"
ReturnAsStream
"
;
streamFormat
?
:
StreamFormat
;
streamCompression
?
:
StreamCompression
;
traceConfig
?
:
TraceConfig
;
}
export
type
startReturnValue
=
{
}
}
export
module
Fetch
{
export
type
RequestId
=
string
;
export
type
RequestStage
=
"
Request
"
|
"
Response
"
;
export
interface
RequestPattern
{
urlPattern
?
:
string
;
resourceType
?
:
Network
.
ResourceType
;
requestStage
?
:
RequestStage
;
}
export
interface
HeaderEntry
{
name
:
string
;
value
:
string
;
}
export
interface
AuthChallenge
{
source
?
:
"
Server
"
|
"
Proxy
"
;
origin
:
string
;
scheme
:
string
;
realm
:
string
;
}
export
interface
AuthChallengeResponse
{
response
:
"
Default
"
|
"
CancelAuth
"
|
"
ProvideCredentials
"
;
username
?
:
string
;
password
?
:
string
;
}
export
type
requestPausedPayload
=
{
requestId
:
RequestId
;
request
:
Network
.
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
Network
.
ResourceType
;
responseErrorReason
?
:
Network
.
ErrorReason
;
responseStatusCode
?
:
number
;
responseHeaders
?
:
HeaderEntry
[
]
;
networkId
?
:
RequestId
;
}
export
type
authRequiredPayload
=
{
requestId
:
RequestId
;
request
:
Network
.
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
Network
.
ResourceType
;
authChallenge
:
AuthChallenge
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
patterns
?
:
RequestPattern
[
]
;
handleAuthRequests
?
:
boolean
;
}
export
type
enableReturnValue
=
{
}
export
type
failRequestParameters
=
{
requestId
:
RequestId
;
errorReason
:
Network
.
ErrorReason
;
}
export
type
failRequestReturnValue
=
{
}
export
type
fulfillRequestParameters
=
{
requestId
:
RequestId
;
responseCode
:
number
;
responseHeaders
?
:
HeaderEntry
[
]
;
binaryResponseHeaders
?
:
binary
;
body
?
:
binary
;
responsePhrase
?
:
string
;
}
export
type
fulfillRequestReturnValue
=
{
}
export
type
continueRequestParameters
=
{
requestId
:
RequestId
;
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
HeaderEntry
[
]
;
}
export
type
continueRequestReturnValue
=
{
}
export
type
continueWithAuthParameters
=
{
requestId
:
RequestId
;
authChallengeResponse
:
AuthChallengeResponse
;
}
export
type
continueWithAuthReturnValue
=
{
}
export
type
getResponseBodyParameters
=
{
requestId
:
RequestId
;
}
export
type
getResponseBodyReturnValue
=
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
type
takeResponseBodyAsStreamParameters
=
{
requestId
:
RequestId
;
}
export
type
takeResponseBodyAsStreamReturnValue
=
{
stream
:
IO
.
StreamHandle
;
}
}
export
module
WebAudio
{
export
type
GraphObjectId
=
string
;
export
type
ContextType
=
"
realtime
"
|
"
offline
"
;
export
type
ContextState
=
"
suspended
"
|
"
running
"
|
"
closed
"
;
export
type
NodeType
=
string
;
export
type
ChannelCountMode
=
"
clamped
-
max
"
|
"
explicit
"
|
"
max
"
;
export
type
ChannelInterpretation
=
"
discrete
"
|
"
speakers
"
;
export
type
ParamType
=
string
;
export
type
AutomationRate
=
"
a
-
rate
"
|
"
k
-
rate
"
;
export
interface
ContextRealtimeData
{
currentTime
:
number
;
renderCapacity
:
number
;
callbackIntervalMean
:
number
;
callbackIntervalVariance
:
number
;
}
export
interface
BaseAudioContext
{
contextId
:
GraphObjectId
;
contextType
:
ContextType
;
contextState
:
ContextState
;
realtimeData
?
:
ContextRealtimeData
;
callbackBufferSize
:
number
;
maxOutputChannelCount
:
number
;
sampleRate
:
number
;
}
export
interface
AudioListener
{
listenerId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
}
export
interface
AudioNode
{
nodeId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
nodeType
:
NodeType
;
numberOfInputs
:
number
;
numberOfOutputs
:
number
;
channelCount
:
number
;
channelCountMode
:
ChannelCountMode
;
channelInterpretation
:
ChannelInterpretation
;
}
export
interface
AudioParam
{
paramId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
paramType
:
ParamType
;
rate
:
AutomationRate
;
defaultValue
:
number
;
minValue
:
number
;
maxValue
:
number
;
}
export
type
contextCreatedPayload
=
{
context
:
BaseAudioContext
;
}
export
type
contextWillBeDestroyedPayload
=
{
contextId
:
GraphObjectId
;
}
export
type
contextChangedPayload
=
{
context
:
BaseAudioContext
;
}
export
type
audioListenerCreatedPayload
=
{
listener
:
AudioListener
;
}
export
type
audioListenerWillBeDestroyedPayload
=
{
contextId
:
GraphObjectId
;
listenerId
:
GraphObjectId
;
}
export
type
audioNodeCreatedPayload
=
{
node
:
AudioNode
;
}
export
type
audioNodeWillBeDestroyedPayload
=
{
contextId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
}
export
type
audioParamCreatedPayload
=
{
param
:
AudioParam
;
}
export
type
audioParamWillBeDestroyedPayload
=
{
contextId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
paramId
:
GraphObjectId
;
}
export
type
nodesConnectedPayload
=
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
destinationInputIndex
?
:
number
;
}
export
type
nodesDisconnectedPayload
=
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
destinationInputIndex
?
:
number
;
}
export
type
nodeParamConnectedPayload
=
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
}
export
type
nodeParamDisconnectedPayload
=
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
getRealtimeDataParameters
=
{
contextId
:
GraphObjectId
;
}
export
type
getRealtimeDataReturnValue
=
{
realtimeData
:
ContextRealtimeData
;
}
}
export
module
WebAuthn
{
export
type
AuthenticatorId
=
string
;
export
type
AuthenticatorProtocol
=
"
u2f
"
|
"
ctap2
"
;
export
type
AuthenticatorTransport
=
"
usb
"
|
"
nfc
"
|
"
ble
"
|
"
cable
"
|
"
internal
"
;
export
interface
VirtualAuthenticatorOptions
{
protocol
:
AuthenticatorProtocol
;
transport
:
AuthenticatorTransport
;
hasResidentKey
?
:
boolean
;
hasUserVerification
?
:
boolean
;
automaticPresenceSimulation
?
:
boolean
;
isUserVerified
?
:
boolean
;
}
export
interface
Credential
{
credentialId
:
binary
;
isResidentCredential
:
boolean
;
rpId
?
:
string
;
privateKey
:
binary
;
userHandle
?
:
binary
;
signCount
:
number
;
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
addVirtualAuthenticatorParameters
=
{
options
:
VirtualAuthenticatorOptions
;
}
export
type
addVirtualAuthenticatorReturnValue
=
{
authenticatorId
:
AuthenticatorId
;
}
export
type
removeVirtualAuthenticatorParameters
=
{
authenticatorId
:
AuthenticatorId
;
}
export
type
removeVirtualAuthenticatorReturnValue
=
{
}
export
type
addCredentialParameters
=
{
authenticatorId
:
AuthenticatorId
;
credential
:
Credential
;
}
export
type
addCredentialReturnValue
=
{
}
export
type
getCredentialParameters
=
{
authenticatorId
:
AuthenticatorId
;
credentialId
:
binary
;
}
export
type
getCredentialReturnValue
=
{
credential
:
Credential
;
}
export
type
getCredentialsParameters
=
{
authenticatorId
:
AuthenticatorId
;
}
export
type
getCredentialsReturnValue
=
{
credentials
:
Credential
[
]
;
}
export
type
removeCredentialParameters
=
{
authenticatorId
:
AuthenticatorId
;
credentialId
:
binary
;
}
export
type
removeCredentialReturnValue
=
{
}
export
type
clearCredentialsParameters
=
{
authenticatorId
:
AuthenticatorId
;
}
export
type
clearCredentialsReturnValue
=
{
}
export
type
setUserVerifiedParameters
=
{
authenticatorId
:
AuthenticatorId
;
isUserVerified
:
boolean
;
}
export
type
setUserVerifiedReturnValue
=
{
}
}
export
module
Media
{
export
type
PlayerId
=
string
;
export
type
Timestamp
=
number
;
export
interface
PlayerProperty
{
name
:
string
;
value
?
:
string
;
}
export
type
PlayerEventType
=
"
errorEvent
"
|
"
triggeredEvent
"
|
"
messageEvent
"
;
export
interface
PlayerEvent
{
type
:
PlayerEventType
;
timestamp
:
Timestamp
;
name
:
string
;
value
:
string
;
}
export
type
playerPropertiesChangedPayload
=
{
playerId
:
PlayerId
;
properties
:
PlayerProperty
[
]
;
}
export
type
playerEventsAddedPayload
=
{
playerId
:
PlayerId
;
events
:
PlayerEvent
[
]
;
}
export
type
playersCreatedPayload
=
{
players
:
PlayerId
[
]
;
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
}
export
module
Console
{
export
interface
ConsoleMessage
{
source
:
"
xml
"
|
"
javascript
"
|
"
network
"
|
"
console
-
api
"
|
"
storage
"
|
"
appcache
"
|
"
rendering
"
|
"
security
"
|
"
other
"
|
"
deprecation
"
|
"
worker
"
;
level
:
"
log
"
|
"
warning
"
|
"
error
"
|
"
debug
"
|
"
info
"
;
text
:
string
;
url
?
:
string
;
line
?
:
number
;
column
?
:
number
;
}
export
type
messageAddedPayload
=
{
message
:
ConsoleMessage
;
}
export
type
clearMessagesParameters
=
{
}
export
type
clearMessagesReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
}
export
module
Debugger
{
export
type
BreakpointId
=
string
;
export
type
CallFrameId
=
string
;
export
interface
Location
{
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
number
;
columnNumber
?
:
number
;
}
export
interface
ScriptPosition
{
lineNumber
:
number
;
columnNumber
:
number
;
}
export
interface
CallFrame
{
callFrameId
:
CallFrameId
;
functionName
:
string
;
functionLocation
?
:
Location
;
location
:
Location
;
url
:
string
;
scopeChain
:
Scope
[
]
;
this
:
Runtime
.
RemoteObject
;
returnValue
?
:
Runtime
.
RemoteObject
;
}
export
interface
Scope
{
type
:
"
global
"
|
"
local
"
|
"
with
"
|
"
closure
"
|
"
catch
"
|
"
block
"
|
"
script
"
|
"
eval
"
|
"
module
"
|
"
wasm
-
expression
-
stack
"
;
object
:
Runtime
.
RemoteObject
;
name
?
:
string
;
startLocation
?
:
Location
;
endLocation
?
:
Location
;
}
export
interface
SearchMatch
{
lineNumber
:
number
;
lineContent
:
string
;
}
export
interface
BreakLocation
{
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
number
;
columnNumber
?
:
number
;
type
?
:
"
debuggerStatement
"
|
"
call
"
|
"
return
"
;
}
export
type
ScriptLanguage
=
"
JavaScript
"
|
"
WebAssembly
"
;
export
type
breakpointResolvedPayload
=
{
breakpointId
:
BreakpointId
;
location
:
Location
;
}
export
type
pausedPayload
=
{
callFrames
:
CallFrame
[
]
;
reason
:
"
ambiguous
"
|
"
assert
"
|
"
debugCommand
"
|
"
DOM
"
|
"
EventListener
"
|
"
exception
"
|
"
instrumentation
"
|
"
OOM
"
|
"
other
"
|
"
promiseRejection
"
|
"
XHR
"
;
data
?
:
object
;
hitBreakpoints
?
:
string
[
]
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
asyncCallStackTraceId
?
:
Runtime
.
StackTraceId
;
}
export
type
resumedPayload
=
void
;
export
type
scriptFailedToParsePayload
=
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
startLine
:
number
;
startColumn
:
number
;
endLine
:
number
;
endColumn
:
number
;
executionContextId
:
Runtime
.
ExecutionContextId
;
hash
:
string
;
executionContextAuxData
?
:
object
;
sourceMapURL
?
:
string
;
hasSourceURL
?
:
boolean
;
isModule
?
:
boolean
;
length
?
:
number
;
stackTrace
?
:
Runtime
.
StackTrace
;
codeOffset
?
:
number
;
scriptLanguage
?
:
Debugger
.
ScriptLanguage
;
}
export
type
scriptParsedPayload
=
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
startLine
:
number
;
startColumn
:
number
;
endLine
:
number
;
endColumn
:
number
;
executionContextId
:
Runtime
.
ExecutionContextId
;
hash
:
string
;
executionContextAuxData
?
:
object
;
isLiveEdit
?
:
boolean
;
sourceMapURL
?
:
string
;
hasSourceURL
?
:
boolean
;
isModule
?
:
boolean
;
length
?
:
number
;
stackTrace
?
:
Runtime
.
StackTrace
;
codeOffset
?
:
number
;
scriptLanguage
?
:
Debugger
.
ScriptLanguage
;
}
export
type
continueToLocationParameters
=
{
location
:
Location
;
targetCallFrames
?
:
"
any
"
|
"
current
"
;
}
export
type
continueToLocationReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
maxScriptsCacheSize
?
:
number
;
}
export
type
enableReturnValue
=
{
debuggerId
:
Runtime
.
UniqueDebuggerId
;
}
export
type
evaluateOnCallFrameParameters
=
{
callFrameId
:
CallFrameId
;
expression
:
string
;
objectGroup
?
:
string
;
includeCommandLineAPI
?
:
boolean
;
silent
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
throwOnSideEffect
?
:
boolean
;
timeout
?
:
Runtime
.
TimeDelta
;
}
export
type
evaluateOnCallFrameReturnValue
=
{
result
:
Runtime
.
RemoteObject
;
exceptionDetails
?
:
Runtime
.
ExceptionDetails
;
}
export
type
getPossibleBreakpointsParameters
=
{
start
:
Location
;
end
?
:
Location
;
restrictToFunction
?
:
boolean
;
}
export
type
getPossibleBreakpointsReturnValue
=
{
locations
:
BreakLocation
[
]
;
}
export
type
getScriptSourceParameters
=
{
scriptId
:
Runtime
.
ScriptId
;
}
export
type
getScriptSourceReturnValue
=
{
scriptSource
:
string
;
bytecode
?
:
binary
;
}
export
type
getWasmBytecodeParameters
=
{
scriptId
:
Runtime
.
ScriptId
;
}
export
type
getWasmBytecodeReturnValue
=
{
bytecode
:
binary
;
}
export
type
getStackTraceParameters
=
{
stackTraceId
:
Runtime
.
StackTraceId
;
}
export
type
getStackTraceReturnValue
=
{
stackTrace
:
Runtime
.
StackTrace
;
}
export
type
pauseParameters
=
{
}
export
type
pauseReturnValue
=
{
}
export
type
pauseOnAsyncCallParameters
=
{
parentStackTraceId
:
Runtime
.
StackTraceId
;
}
export
type
pauseOnAsyncCallReturnValue
=
{
}
export
type
removeBreakpointParameters
=
{
breakpointId
:
BreakpointId
;
}
export
type
removeBreakpointReturnValue
=
{
}
export
type
restartFrameParameters
=
{
callFrameId
:
CallFrameId
;
}
export
type
restartFrameReturnValue
=
{
callFrames
:
CallFrame
[
]
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
}
export
type
resumeParameters
=
{
terminateOnResume
?
:
boolean
;
}
export
type
resumeReturnValue
=
{
}
export
type
searchInContentParameters
=
{
scriptId
:
Runtime
.
ScriptId
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
type
searchInContentReturnValue
=
{
result
:
SearchMatch
[
]
;
}
export
type
setAsyncCallStackDepthParameters
=
{
maxDepth
:
number
;
}
export
type
setAsyncCallStackDepthReturnValue
=
{
}
export
type
setBlackboxPatternsParameters
=
{
patterns
:
string
[
]
;
}
export
type
setBlackboxPatternsReturnValue
=
{
}
export
type
setBlackboxedRangesParameters
=
{
scriptId
:
Runtime
.
ScriptId
;
positions
:
ScriptPosition
[
]
;
}
export
type
setBlackboxedRangesReturnValue
=
{
}
export
type
setBreakpointParameters
=
{
location
:
Location
;
condition
?
:
string
;
}
export
type
setBreakpointReturnValue
=
{
breakpointId
:
BreakpointId
;
actualLocation
:
Location
;
}
export
type
setInstrumentationBreakpointParameters
=
{
instrumentation
:
"
beforeScriptExecution
"
|
"
beforeScriptWithSourceMapExecution
"
;
}
export
type
setInstrumentationBreakpointReturnValue
=
{
breakpointId
:
BreakpointId
;
}
export
type
setBreakpointByUrlParameters
=
{
lineNumber
:
number
;
url
?
:
string
;
urlRegex
?
:
string
;
scriptHash
?
:
string
;
columnNumber
?
:
number
;
condition
?
:
string
;
}
export
type
setBreakpointByUrlReturnValue
=
{
breakpointId
:
BreakpointId
;
locations
:
Location
[
]
;
}
export
type
setBreakpointOnFunctionCallParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
condition
?
:
string
;
}
export
type
setBreakpointOnFunctionCallReturnValue
=
{
breakpointId
:
BreakpointId
;
}
export
type
setBreakpointsActiveParameters
=
{
active
:
boolean
;
}
export
type
setBreakpointsActiveReturnValue
=
{
}
export
type
setPauseOnExceptionsParameters
=
{
state
:
"
none
"
|
"
uncaught
"
|
"
all
"
;
}
export
type
setPauseOnExceptionsReturnValue
=
{
}
export
type
setReturnValueParameters
=
{
newValue
:
Runtime
.
CallArgument
;
}
export
type
setReturnValueReturnValue
=
{
}
export
type
setScriptSourceParameters
=
{
scriptId
:
Runtime
.
ScriptId
;
scriptSource
:
string
;
dryRun
?
:
boolean
;
}
export
type
setScriptSourceReturnValue
=
{
callFrames
?
:
CallFrame
[
]
;
stackChanged
?
:
boolean
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
exceptionDetails
?
:
Runtime
.
ExceptionDetails
;
}
export
type
setSkipAllPausesParameters
=
{
skip
:
boolean
;
}
export
type
setSkipAllPausesReturnValue
=
{
}
export
type
setVariableValueParameters
=
{
scopeNumber
:
number
;
variableName
:
string
;
newValue
:
Runtime
.
CallArgument
;
callFrameId
:
CallFrameId
;
}
export
type
setVariableValueReturnValue
=
{
}
export
type
stepIntoParameters
=
{
breakOnAsyncCall
?
:
boolean
;
}
export
type
stepIntoReturnValue
=
{
}
export
type
stepOutParameters
=
{
}
export
type
stepOutReturnValue
=
{
}
export
type
stepOverParameters
=
{
}
export
type
stepOverReturnValue
=
{
}
}
export
module
HeapProfiler
{
export
type
HeapSnapshotObjectId
=
string
;
export
interface
SamplingHeapProfileNode
{
callFrame
:
Runtime
.
CallFrame
;
selfSize
:
number
;
id
:
number
;
children
:
SamplingHeapProfileNode
[
]
;
}
export
interface
SamplingHeapProfileSample
{
size
:
number
;
nodeId
:
number
;
ordinal
:
number
;
}
export
interface
SamplingHeapProfile
{
head
:
SamplingHeapProfileNode
;
samples
:
SamplingHeapProfileSample
[
]
;
}
export
type
addHeapSnapshotChunkPayload
=
{
chunk
:
string
;
}
export
type
heapStatsUpdatePayload
=
{
statsUpdate
:
number
[
]
;
}
export
type
lastSeenObjectIdPayload
=
{
lastSeenObjectId
:
number
;
timestamp
:
number
;
}
export
type
reportHeapSnapshotProgressPayload
=
{
done
:
number
;
total
:
number
;
finished
?
:
boolean
;
}
export
type
resetProfilesPayload
=
void
;
export
type
addInspectedHeapObjectParameters
=
{
heapObjectId
:
HeapSnapshotObjectId
;
}
export
type
addInspectedHeapObjectReturnValue
=
{
}
export
type
collectGarbageParameters
=
{
}
export
type
collectGarbageReturnValue
=
{
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getHeapObjectIdParameters
=
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
type
getHeapObjectIdReturnValue
=
{
heapSnapshotObjectId
:
HeapSnapshotObjectId
;
}
export
type
getObjectByHeapObjectIdParameters
=
{
objectId
:
HeapSnapshotObjectId
;
objectGroup
?
:
string
;
}
export
type
getObjectByHeapObjectIdReturnValue
=
{
result
:
Runtime
.
RemoteObject
;
}
export
type
getSamplingProfileParameters
=
{
}
export
type
getSamplingProfileReturnValue
=
{
profile
:
SamplingHeapProfile
;
}
export
type
startSamplingParameters
=
{
samplingInterval
?
:
number
;
}
export
type
startSamplingReturnValue
=
{
}
export
type
startTrackingHeapObjectsParameters
=
{
trackAllocations
?
:
boolean
;
}
export
type
startTrackingHeapObjectsReturnValue
=
{
}
export
type
stopSamplingParameters
=
{
}
export
type
stopSamplingReturnValue
=
{
profile
:
SamplingHeapProfile
;
}
export
type
stopTrackingHeapObjectsParameters
=
{
reportProgress
?
:
boolean
;
treatGlobalObjectsAsRoots
?
:
boolean
;
}
export
type
stopTrackingHeapObjectsReturnValue
=
{
}
export
type
takeHeapSnapshotParameters
=
{
reportProgress
?
:
boolean
;
treatGlobalObjectsAsRoots
?
:
boolean
;
}
export
type
takeHeapSnapshotReturnValue
=
{
}
}
export
module
Profiler
{
export
interface
ProfileNode
{
id
:
number
;
callFrame
:
Runtime
.
CallFrame
;
hitCount
?
:
number
;
children
?
:
number
[
]
;
deoptReason
?
:
string
;
positionTicks
?
:
PositionTickInfo
[
]
;
}
export
interface
Profile
{
nodes
:
ProfileNode
[
]
;
startTime
:
number
;
endTime
:
number
;
samples
?
:
number
[
]
;
timeDeltas
?
:
number
[
]
;
}
export
interface
PositionTickInfo
{
line
:
number
;
ticks
:
number
;
}
export
interface
CoverageRange
{
startOffset
:
number
;
endOffset
:
number
;
count
:
number
;
}
export
interface
FunctionCoverage
{
functionName
:
string
;
ranges
:
CoverageRange
[
]
;
isBlockCoverage
:
boolean
;
}
export
interface
ScriptCoverage
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
functions
:
FunctionCoverage
[
]
;
}
export
interface
TypeObject
{
name
:
string
;
}
export
interface
TypeProfileEntry
{
offset
:
number
;
types
:
TypeObject
[
]
;
}
export
interface
ScriptTypeProfile
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
entries
:
TypeProfileEntry
[
]
;
}
export
interface
CounterInfo
{
name
:
string
;
value
:
number
;
}
export
type
consoleProfileFinishedPayload
=
{
id
:
string
;
location
:
Debugger
.
Location
;
profile
:
Profile
;
title
?
:
string
;
}
export
type
consoleProfileStartedPayload
=
{
id
:
string
;
location
:
Debugger
.
Location
;
title
?
:
string
;
}
export
type
preciseCoverageDeltaUpdatePayload
=
{
timestamp
:
number
;
occassion
:
string
;
result
:
ScriptCoverage
[
]
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
getBestEffortCoverageParameters
=
{
}
export
type
getBestEffortCoverageReturnValue
=
{
result
:
ScriptCoverage
[
]
;
}
export
type
setSamplingIntervalParameters
=
{
interval
:
number
;
}
export
type
setSamplingIntervalReturnValue
=
{
}
export
type
startParameters
=
{
}
export
type
startReturnValue
=
{
}
export
type
startPreciseCoverageParameters
=
{
callCount
?
:
boolean
;
detailed
?
:
boolean
;
allowTriggeredUpdates
?
:
boolean
;
}
export
type
startPreciseCoverageReturnValue
=
{
timestamp
:
number
;
}
export
type
startTypeProfileParameters
=
{
}
export
type
startTypeProfileReturnValue
=
{
}
export
type
stopParameters
=
{
}
export
type
stopReturnValue
=
{
profile
:
Profile
;
}
export
type
stopPreciseCoverageParameters
=
{
}
export
type
stopPreciseCoverageReturnValue
=
{
}
export
type
stopTypeProfileParameters
=
{
}
export
type
stopTypeProfileReturnValue
=
{
}
export
type
takePreciseCoverageParameters
=
{
}
export
type
takePreciseCoverageReturnValue
=
{
result
:
ScriptCoverage
[
]
;
timestamp
:
number
;
}
export
type
takeTypeProfileParameters
=
{
}
export
type
takeTypeProfileReturnValue
=
{
result
:
ScriptTypeProfile
[
]
;
}
export
type
enableRuntimeCallStatsParameters
=
{
}
export
type
enableRuntimeCallStatsReturnValue
=
{
}
export
type
disableRuntimeCallStatsParameters
=
{
}
export
type
disableRuntimeCallStatsReturnValue
=
{
}
export
type
getRuntimeCallStatsParameters
=
{
}
export
type
getRuntimeCallStatsReturnValue
=
{
result
:
CounterInfo
[
]
;
}
}
export
module
Runtime
{
export
type
ScriptId
=
string
;
export
type
RemoteObjectId
=
string
;
export
type
UnserializableValue
=
string
;
export
interface
RemoteObject
{
type
:
"
object
"
|
"
function
"
|
"
undefined
"
|
"
string
"
|
"
number
"
|
"
boolean
"
|
"
symbol
"
|
"
bigint
"
|
"
wasm
"
;
subtype
?
:
"
array
"
|
"
null
"
|
"
node
"
|
"
regexp
"
|
"
date
"
|
"
map
"
|
"
set
"
|
"
weakmap
"
|
"
weakset
"
|
"
iterator
"
|
"
generator
"
|
"
error
"
|
"
proxy
"
|
"
promise
"
|
"
typedarray
"
|
"
arraybuffer
"
|
"
dataview
"
|
"
i32
"
|
"
i64
"
|
"
f32
"
|
"
f64
"
|
"
v128
"
;
className
?
:
string
;
value
?
:
any
;
unserializableValue
?
:
UnserializableValue
;
description
?
:
string
;
objectId
?
:
RemoteObjectId
;
preview
?
:
ObjectPreview
;
customPreview
?
:
CustomPreview
;
}
export
interface
CustomPreview
{
header
:
string
;
bodyGetterId
?
:
RemoteObjectId
;
}
export
interface
ObjectPreview
{
type
:
"
object
"
|
"
function
"
|
"
undefined
"
|
"
string
"
|
"
number
"
|
"
boolean
"
|
"
symbol
"
|
"
bigint
"
;
subtype
?
:
"
array
"
|
"
null
"
|
"
node
"
|
"
regexp
"
|
"
date
"
|
"
map
"
|
"
set
"
|
"
weakmap
"
|
"
weakset
"
|
"
iterator
"
|
"
generator
"
|
"
error
"
;
description
?
:
string
;
overflow
:
boolean
;
properties
:
PropertyPreview
[
]
;
entries
?
:
EntryPreview
[
]
;
}
export
interface
PropertyPreview
{
name
:
string
;
type
:
"
object
"
|
"
function
"
|
"
undefined
"
|
"
string
"
|
"
number
"
|
"
boolean
"
|
"
symbol
"
|
"
accessor
"
|
"
bigint
"
;
value
?
:
string
;
valuePreview
?
:
ObjectPreview
;
subtype
?
:
"
array
"
|
"
null
"
|
"
node
"
|
"
regexp
"
|
"
date
"
|
"
map
"
|
"
set
"
|
"
weakmap
"
|
"
weakset
"
|
"
iterator
"
|
"
generator
"
|
"
error
"
;
}
export
interface
EntryPreview
{
key
?
:
ObjectPreview
;
value
:
ObjectPreview
;
}
export
interface
PropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
writable
?
:
boolean
;
get
?
:
RemoteObject
;
set
?
:
RemoteObject
;
configurable
:
boolean
;
enumerable
:
boolean
;
wasThrown
?
:
boolean
;
isOwn
?
:
boolean
;
symbol
?
:
RemoteObject
;
}
export
interface
InternalPropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
}
export
interface
PrivatePropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
get
?
:
RemoteObject
;
set
?
:
RemoteObject
;
}
export
interface
CallArgument
{
value
?
:
any
;
unserializableValue
?
:
UnserializableValue
;
objectId
?
:
RemoteObjectId
;
}
export
type
ExecutionContextId
=
number
;
export
interface
ExecutionContextDescription
{
id
:
ExecutionContextId
;
origin
:
string
;
name
:
string
;
auxData
?
:
object
;
}
export
interface
ExceptionDetails
{
exceptionId
:
number
;
text
:
string
;
lineNumber
:
number
;
columnNumber
:
number
;
scriptId
?
:
ScriptId
;
url
?
:
string
;
stackTrace
?
:
StackTrace
;
exception
?
:
RemoteObject
;
executionContextId
?
:
ExecutionContextId
;
}
export
type
Timestamp
=
number
;
export
type
TimeDelta
=
number
;
export
interface
CallFrame
{
functionName
:
string
;
scriptId
:
ScriptId
;
url
:
string
;
lineNumber
:
number
;
columnNumber
:
number
;
}
export
interface
StackTrace
{
description
?
:
string
;
callFrames
:
CallFrame
[
]
;
parent
?
:
StackTrace
;
parentId
?
:
StackTraceId
;
}
export
type
UniqueDebuggerId
=
string
;
export
interface
StackTraceId
{
id
:
string
;
debuggerId
?
:
UniqueDebuggerId
;
}
export
type
bindingCalledPayload
=
{
name
:
string
;
payload
:
string
;
executionContextId
:
ExecutionContextId
;
}
export
type
consoleAPICalledPayload
=
{
type
:
"
log
"
|
"
debug
"
|
"
info
"
|
"
error
"
|
"
warning
"
|
"
dir
"
|
"
dirxml
"
|
"
table
"
|
"
trace
"
|
"
clear
"
|
"
startGroup
"
|
"
startGroupCollapsed
"
|
"
endGroup
"
|
"
assert
"
|
"
profile
"
|
"
profileEnd
"
|
"
count
"
|
"
timeEnd
"
;
args
:
RemoteObject
[
]
;
executionContextId
:
ExecutionContextId
;
timestamp
:
Timestamp
;
stackTrace
?
:
StackTrace
;
context
?
:
string
;
}
export
type
exceptionRevokedPayload
=
{
reason
:
string
;
exceptionId
:
number
;
}
export
type
exceptionThrownPayload
=
{
timestamp
:
Timestamp
;
exceptionDetails
:
ExceptionDetails
;
}
export
type
executionContextCreatedPayload
=
{
context
:
ExecutionContextDescription
;
}
export
type
executionContextDestroyedPayload
=
{
executionContextId
:
ExecutionContextId
;
}
export
type
executionContextsClearedPayload
=
void
;
export
type
inspectRequestedPayload
=
{
object
:
RemoteObject
;
hints
:
object
;
}
export
type
awaitPromiseParameters
=
{
promiseObjectId
:
RemoteObjectId
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
}
export
type
awaitPromiseReturnValue
=
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
callFunctionOnParameters
=
{
functionDeclaration
:
string
;
objectId
?
:
RemoteObjectId
;
arguments
?
:
CallArgument
[
]
;
silent
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
userGesture
?
:
boolean
;
awaitPromise
?
:
boolean
;
executionContextId
?
:
ExecutionContextId
;
objectGroup
?
:
string
;
}
export
type
callFunctionOnReturnValue
=
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
compileScriptParameters
=
{
expression
:
string
;
sourceURL
:
string
;
persistScript
:
boolean
;
executionContextId
?
:
ExecutionContextId
;
}
export
type
compileScriptReturnValue
=
{
scriptId
?
:
ScriptId
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
disableParameters
=
{
}
export
type
disableReturnValue
=
{
}
export
type
discardConsoleEntriesParameters
=
{
}
export
type
discardConsoleEntriesReturnValue
=
{
}
export
type
enableParameters
=
{
}
export
type
enableReturnValue
=
{
}
export
type
evaluateParameters
=
{
expression
:
string
;
objectGroup
?
:
string
;
includeCommandLineAPI
?
:
boolean
;
silent
?
:
boolean
;
contextId
?
:
ExecutionContextId
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
userGesture
?
:
boolean
;
awaitPromise
?
:
boolean
;
throwOnSideEffect
?
:
boolean
;
timeout
?
:
TimeDelta
;
disableBreaks
?
:
boolean
;
replMode
?
:
boolean
;
}
export
type
evaluateReturnValue
=
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
getIsolateIdParameters
=
{
}
export
type
getIsolateIdReturnValue
=
{
id
:
string
;
}
export
type
getHeapUsageParameters
=
{
}
export
type
getHeapUsageReturnValue
=
{
usedSize
:
number
;
totalSize
:
number
;
}
export
type
getPropertiesParameters
=
{
objectId
:
RemoteObjectId
;
ownProperties
?
:
boolean
;
accessorPropertiesOnly
?
:
boolean
;
generatePreview
?
:
boolean
;
}
export
type
getPropertiesReturnValue
=
{
result
:
PropertyDescriptor
[
]
;
internalProperties
?
:
InternalPropertyDescriptor
[
]
;
privateProperties
?
:
PrivatePropertyDescriptor
[
]
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
globalLexicalScopeNamesParameters
=
{
executionContextId
?
:
ExecutionContextId
;
}
export
type
globalLexicalScopeNamesReturnValue
=
{
names
:
string
[
]
;
}
export
type
queryObjectsParameters
=
{
prototypeObjectId
:
RemoteObjectId
;
objectGroup
?
:
string
;
}
export
type
queryObjectsReturnValue
=
{
objects
:
RemoteObject
;
}
export
type
releaseObjectParameters
=
{
objectId
:
RemoteObjectId
;
}
export
type
releaseObjectReturnValue
=
{
}
export
type
releaseObjectGroupParameters
=
{
objectGroup
:
string
;
}
export
type
releaseObjectGroupReturnValue
=
{
}
export
type
runIfWaitingForDebuggerParameters
=
{
}
export
type
runIfWaitingForDebuggerReturnValue
=
{
}
export
type
runScriptParameters
=
{
scriptId
:
ScriptId
;
executionContextId
?
:
ExecutionContextId
;
objectGroup
?
:
string
;
silent
?
:
boolean
;
includeCommandLineAPI
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
awaitPromise
?
:
boolean
;
}
export
type
runScriptReturnValue
=
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
type
setAsyncCallStackDepthParameters
=
{
maxDepth
:
number
;
}
export
type
setAsyncCallStackDepthReturnValue
=
{
}
export
type
setCustomObjectFormatterEnabledParameters
=
{
enabled
:
boolean
;
}
export
type
setCustomObjectFormatterEnabledReturnValue
=
{
}
export
type
setMaxCallStackSizeToCaptureParameters
=
{
size
:
number
;
}
export
type
setMaxCallStackSizeToCaptureReturnValue
=
{
}
export
type
terminateExecutionParameters
=
{
}
export
type
terminateExecutionReturnValue
=
{
}
export
type
addBindingParameters
=
{
name
:
string
;
executionContextId
?
:
ExecutionContextId
;
}
export
type
addBindingReturnValue
=
{
}
export
type
removeBindingParameters
=
{
name
:
string
;
}
export
type
removeBindingReturnValue
=
{
}
}
export
module
Schema
{
export
interface
Domain
{
name
:
string
;
version
:
string
;
}
export
type
getDomainsParameters
=
{
}
export
type
getDomainsReturnValue
=
{
domains
:
Domain
[
]
;
}
}
export
interface
Events
{
"
Animation
.
animationCanceled
"
:
Animation
.
animationCanceledPayload
;
"
Animation
.
animationCreated
"
:
Animation
.
animationCreatedPayload
;
"
Animation
.
animationStarted
"
:
Animation
.
animationStartedPayload
;
"
ApplicationCache
.
applicationCacheStatusUpdated
"
:
ApplicationCache
.
applicationCacheStatusUpdatedPayload
;
"
ApplicationCache
.
networkStateUpdated
"
:
ApplicationCache
.
networkStateUpdatedPayload
;
"
Audits
.
issueAdded
"
:
Audits
.
issueAddedPayload
;
"
BackgroundService
.
recordingStateChanged
"
:
BackgroundService
.
recordingStateChangedPayload
;
"
BackgroundService
.
backgroundServiceEventReceived
"
:
BackgroundService
.
backgroundServiceEventReceivedPayload
;
"
CSS
.
fontsUpdated
"
:
CSS
.
fontsUpdatedPayload
;
"
CSS
.
mediaQueryResultChanged
"
:
CSS
.
mediaQueryResultChangedPayload
;
"
CSS
.
styleSheetAdded
"
:
CSS
.
styleSheetAddedPayload
;
"
CSS
.
styleSheetChanged
"
:
CSS
.
styleSheetChangedPayload
;
"
CSS
.
styleSheetRemoved
"
:
CSS
.
styleSheetRemovedPayload
;
"
Cast
.
sinksUpdated
"
:
Cast
.
sinksUpdatedPayload
;
"
Cast
.
issueUpdated
"
:
Cast
.
issueUpdatedPayload
;
"
DOM
.
attributeModified
"
:
DOM
.
attributeModifiedPayload
;
"
DOM
.
attributeRemoved
"
:
DOM
.
attributeRemovedPayload
;
"
DOM
.
characterDataModified
"
:
DOM
.
characterDataModifiedPayload
;
"
DOM
.
childNodeCountUpdated
"
:
DOM
.
childNodeCountUpdatedPayload
;
"
DOM
.
childNodeInserted
"
:
DOM
.
childNodeInsertedPayload
;
"
DOM
.
childNodeRemoved
"
:
DOM
.
childNodeRemovedPayload
;
"
DOM
.
distributedNodesUpdated
"
:
DOM
.
distributedNodesUpdatedPayload
;
"
DOM
.
documentUpdated
"
:
DOM
.
documentUpdatedPayload
;
"
DOM
.
inlineStyleInvalidated
"
:
DOM
.
inlineStyleInvalidatedPayload
;
"
DOM
.
pseudoElementAdded
"
:
DOM
.
pseudoElementAddedPayload
;
"
DOM
.
pseudoElementRemoved
"
:
DOM
.
pseudoElementRemovedPayload
;
"
DOM
.
setChildNodes
"
:
DOM
.
setChildNodesPayload
;
"
DOM
.
shadowRootPopped
"
:
DOM
.
shadowRootPoppedPayload
;
"
DOM
.
shadowRootPushed
"
:
DOM
.
shadowRootPushedPayload
;
"
DOMStorage
.
domStorageItemAdded
"
:
DOMStorage
.
domStorageItemAddedPayload
;
"
DOMStorage
.
domStorageItemRemoved
"
:
DOMStorage
.
domStorageItemRemovedPayload
;
"
DOMStorage
.
domStorageItemUpdated
"
:
DOMStorage
.
domStorageItemUpdatedPayload
;
"
DOMStorage
.
domStorageItemsCleared
"
:
DOMStorage
.
domStorageItemsClearedPayload
;
"
Database
.
addDatabase
"
:
Database
.
addDatabasePayload
;
"
Emulation
.
virtualTimeBudgetExpired
"
:
Emulation
.
virtualTimeBudgetExpiredPayload
;
"
HeadlessExperimental
.
needsBeginFramesChanged
"
:
HeadlessExperimental
.
needsBeginFramesChangedPayload
;
"
Inspector
.
detached
"
:
Inspector
.
detachedPayload
;
"
Inspector
.
targetCrashed
"
:
Inspector
.
targetCrashedPayload
;
"
Inspector
.
targetReloadedAfterCrash
"
:
Inspector
.
targetReloadedAfterCrashPayload
;
"
LayerTree
.
layerPainted
"
:
LayerTree
.
layerPaintedPayload
;
"
LayerTree
.
layerTreeDidChange
"
:
LayerTree
.
layerTreeDidChangePayload
;
"
Log
.
entryAdded
"
:
Log
.
entryAddedPayload
;
"
Network
.
dataReceived
"
:
Network
.
dataReceivedPayload
;
"
Network
.
eventSourceMessageReceived
"
:
Network
.
eventSourceMessageReceivedPayload
;
"
Network
.
loadingFailed
"
:
Network
.
loadingFailedPayload
;
"
Network
.
loadingFinished
"
:
Network
.
loadingFinishedPayload
;
"
Network
.
requestIntercepted
"
:
Network
.
requestInterceptedPayload
;
"
Network
.
requestServedFromCache
"
:
Network
.
requestServedFromCachePayload
;
"
Network
.
requestWillBeSent
"
:
Network
.
requestWillBeSentPayload
;
"
Network
.
resourceChangedPriority
"
:
Network
.
resourceChangedPriorityPayload
;
"
Network
.
signedExchangeReceived
"
:
Network
.
signedExchangeReceivedPayload
;
"
Network
.
responseReceived
"
:
Network
.
responseReceivedPayload
;
"
Network
.
webSocketClosed
"
:
Network
.
webSocketClosedPayload
;
"
Network
.
webSocketCreated
"
:
Network
.
webSocketCreatedPayload
;
"
Network
.
webSocketFrameError
"
:
Network
.
webSocketFrameErrorPayload
;
"
Network
.
webSocketFrameReceived
"
:
Network
.
webSocketFrameReceivedPayload
;
"
Network
.
webSocketFrameSent
"
:
Network
.
webSocketFrameSentPayload
;
"
Network
.
webSocketHandshakeResponseReceived
"
:
Network
.
webSocketHandshakeResponseReceivedPayload
;
"
Network
.
webSocketWillSendHandshakeRequest
"
:
Network
.
webSocketWillSendHandshakeRequestPayload
;
"
Network
.
requestWillBeSentExtraInfo
"
:
Network
.
requestWillBeSentExtraInfoPayload
;
"
Network
.
responseReceivedExtraInfo
"
:
Network
.
responseReceivedExtraInfoPayload
;
"
Overlay
.
inspectNodeRequested
"
:
Overlay
.
inspectNodeRequestedPayload
;
"
Overlay
.
nodeHighlightRequested
"
:
Overlay
.
nodeHighlightRequestedPayload
;
"
Overlay
.
screenshotRequested
"
:
Overlay
.
screenshotRequestedPayload
;
"
Overlay
.
inspectModeCanceled
"
:
Overlay
.
inspectModeCanceledPayload
;
"
Page
.
domContentEventFired
"
:
Page
.
domContentEventFiredPayload
;
"
Page
.
fileChooserOpened
"
:
Page
.
fileChooserOpenedPayload
;
"
Page
.
frameAttached
"
:
Page
.
frameAttachedPayload
;
"
Page
.
frameClearedScheduledNavigation
"
:
Page
.
frameClearedScheduledNavigationPayload
;
"
Page
.
frameDetached
"
:
Page
.
frameDetachedPayload
;
"
Page
.
frameNavigated
"
:
Page
.
frameNavigatedPayload
;
"
Page
.
frameResized
"
:
Page
.
frameResizedPayload
;
"
Page
.
frameRequestedNavigation
"
:
Page
.
frameRequestedNavigationPayload
;
"
Page
.
frameScheduledNavigation
"
:
Page
.
frameScheduledNavigationPayload
;
"
Page
.
frameStartedLoading
"
:
Page
.
frameStartedLoadingPayload
;
"
Page
.
frameStoppedLoading
"
:
Page
.
frameStoppedLoadingPayload
;
"
Page
.
downloadWillBegin
"
:
Page
.
downloadWillBeginPayload
;
"
Page
.
downloadProgress
"
:
Page
.
downloadProgressPayload
;
"
Page
.
interstitialHidden
"
:
Page
.
interstitialHiddenPayload
;
"
Page
.
interstitialShown
"
:
Page
.
interstitialShownPayload
;
"
Page
.
javascriptDialogClosed
"
:
Page
.
javascriptDialogClosedPayload
;
"
Page
.
javascriptDialogOpening
"
:
Page
.
javascriptDialogOpeningPayload
;
"
Page
.
lifecycleEvent
"
:
Page
.
lifecycleEventPayload
;
"
Page
.
loadEventFired
"
:
Page
.
loadEventFiredPayload
;
"
Page
.
navigatedWithinDocument
"
:
Page
.
navigatedWithinDocumentPayload
;
"
Page
.
screencastFrame
"
:
Page
.
screencastFramePayload
;
"
Page
.
screencastVisibilityChanged
"
:
Page
.
screencastVisibilityChangedPayload
;
"
Page
.
windowOpen
"
:
Page
.
windowOpenPayload
;
"
Page
.
compilationCacheProduced
"
:
Page
.
compilationCacheProducedPayload
;
"
Performance
.
metrics
"
:
Performance
.
metricsPayload
;
"
Security
.
certificateError
"
:
Security
.
certificateErrorPayload
;
"
Security
.
visibleSecurityStateChanged
"
:
Security
.
visibleSecurityStateChangedPayload
;
"
Security
.
securityStateChanged
"
:
Security
.
securityStateChangedPayload
;
"
ServiceWorker
.
workerErrorReported
"
:
ServiceWorker
.
workerErrorReportedPayload
;
"
ServiceWorker
.
workerRegistrationUpdated
"
:
ServiceWorker
.
workerRegistrationUpdatedPayload
;
"
ServiceWorker
.
workerVersionUpdated
"
:
ServiceWorker
.
workerVersionUpdatedPayload
;
"
Storage
.
cacheStorageContentUpdated
"
:
Storage
.
cacheStorageContentUpdatedPayload
;
"
Storage
.
cacheStorageListUpdated
"
:
Storage
.
cacheStorageListUpdatedPayload
;
"
Storage
.
indexedDBContentUpdated
"
:
Storage
.
indexedDBContentUpdatedPayload
;
"
Storage
.
indexedDBListUpdated
"
:
Storage
.
indexedDBListUpdatedPayload
;
"
Target
.
attachedToTarget
"
:
Target
.
attachedToTargetPayload
;
"
Target
.
detachedFromTarget
"
:
Target
.
detachedFromTargetPayload
;
"
Target
.
receivedMessageFromTarget
"
:
Target
.
receivedMessageFromTargetPayload
;
"
Target
.
targetCreated
"
:
Target
.
targetCreatedPayload
;
"
Target
.
targetDestroyed
"
:
Target
.
targetDestroyedPayload
;
"
Target
.
targetCrashed
"
:
Target
.
targetCrashedPayload
;
"
Target
.
targetInfoChanged
"
:
Target
.
targetInfoChangedPayload
;
"
Tethering
.
accepted
"
:
Tethering
.
acceptedPayload
;
"
Tracing
.
bufferUsage
"
:
Tracing
.
bufferUsagePayload
;
"
Tracing
.
dataCollected
"
:
Tracing
.
dataCollectedPayload
;
"
Tracing
.
tracingComplete
"
:
Tracing
.
tracingCompletePayload
;
"
Fetch
.
requestPaused
"
:
Fetch
.
requestPausedPayload
;
"
Fetch
.
authRequired
"
:
Fetch
.
authRequiredPayload
;
"
WebAudio
.
contextCreated
"
:
WebAudio
.
contextCreatedPayload
;
"
WebAudio
.
contextWillBeDestroyed
"
:
WebAudio
.
contextWillBeDestroyedPayload
;
"
WebAudio
.
contextChanged
"
:
WebAudio
.
contextChangedPayload
;
"
WebAudio
.
audioListenerCreated
"
:
WebAudio
.
audioListenerCreatedPayload
;
"
WebAudio
.
audioListenerWillBeDestroyed
"
:
WebAudio
.
audioListenerWillBeDestroyedPayload
;
"
WebAudio
.
audioNodeCreated
"
:
WebAudio
.
audioNodeCreatedPayload
;
"
WebAudio
.
audioNodeWillBeDestroyed
"
:
WebAudio
.
audioNodeWillBeDestroyedPayload
;
"
WebAudio
.
audioParamCreated
"
:
WebAudio
.
audioParamCreatedPayload
;
"
WebAudio
.
audioParamWillBeDestroyed
"
:
WebAudio
.
audioParamWillBeDestroyedPayload
;
"
WebAudio
.
nodesConnected
"
:
WebAudio
.
nodesConnectedPayload
;
"
WebAudio
.
nodesDisconnected
"
:
WebAudio
.
nodesDisconnectedPayload
;
"
WebAudio
.
nodeParamConnected
"
:
WebAudio
.
nodeParamConnectedPayload
;
"
WebAudio
.
nodeParamDisconnected
"
:
WebAudio
.
nodeParamDisconnectedPayload
;
"
Media
.
playerPropertiesChanged
"
:
Media
.
playerPropertiesChangedPayload
;
"
Media
.
playerEventsAdded
"
:
Media
.
playerEventsAddedPayload
;
"
Media
.
playersCreated
"
:
Media
.
playersCreatedPayload
;
"
Console
.
messageAdded
"
:
Console
.
messageAddedPayload
;
"
Debugger
.
breakpointResolved
"
:
Debugger
.
breakpointResolvedPayload
;
"
Debugger
.
paused
"
:
Debugger
.
pausedPayload
;
"
Debugger
.
resumed
"
:
Debugger
.
resumedPayload
;
"
Debugger
.
scriptFailedToParse
"
:
Debugger
.
scriptFailedToParsePayload
;
"
Debugger
.
scriptParsed
"
:
Debugger
.
scriptParsedPayload
;
"
HeapProfiler
.
addHeapSnapshotChunk
"
:
HeapProfiler
.
addHeapSnapshotChunkPayload
;
"
HeapProfiler
.
heapStatsUpdate
"
:
HeapProfiler
.
heapStatsUpdatePayload
;
"
HeapProfiler
.
lastSeenObjectId
"
:
HeapProfiler
.
lastSeenObjectIdPayload
;
"
HeapProfiler
.
reportHeapSnapshotProgress
"
:
HeapProfiler
.
reportHeapSnapshotProgressPayload
;
"
HeapProfiler
.
resetProfiles
"
:
HeapProfiler
.
resetProfilesPayload
;
"
Profiler
.
consoleProfileFinished
"
:
Profiler
.
consoleProfileFinishedPayload
;
"
Profiler
.
consoleProfileStarted
"
:
Profiler
.
consoleProfileStartedPayload
;
"
Profiler
.
preciseCoverageDeltaUpdate
"
:
Profiler
.
preciseCoverageDeltaUpdatePayload
;
"
Runtime
.
bindingCalled
"
:
Runtime
.
bindingCalledPayload
;
"
Runtime
.
consoleAPICalled
"
:
Runtime
.
consoleAPICalledPayload
;
"
Runtime
.
exceptionRevoked
"
:
Runtime
.
exceptionRevokedPayload
;
"
Runtime
.
exceptionThrown
"
:
Runtime
.
exceptionThrownPayload
;
"
Runtime
.
executionContextCreated
"
:
Runtime
.
executionContextCreatedPayload
;
"
Runtime
.
executionContextDestroyed
"
:
Runtime
.
executionContextDestroyedPayload
;
"
Runtime
.
executionContextsCleared
"
:
Runtime
.
executionContextsClearedPayload
;
"
Runtime
.
inspectRequested
"
:
Runtime
.
inspectRequestedPayload
;
}
export
interface
CommandParameters
{
"
Accessibility
.
disable
"
:
Accessibility
.
disableParameters
;
"
Accessibility
.
enable
"
:
Accessibility
.
enableParameters
;
"
Accessibility
.
getPartialAXTree
"
:
Accessibility
.
getPartialAXTreeParameters
;
"
Accessibility
.
getFullAXTree
"
:
Accessibility
.
getFullAXTreeParameters
;
"
Animation
.
disable
"
:
Animation
.
disableParameters
;
"
Animation
.
enable
"
:
Animation
.
enableParameters
;
"
Animation
.
getCurrentTime
"
:
Animation
.
getCurrentTimeParameters
;
"
Animation
.
getPlaybackRate
"
:
Animation
.
getPlaybackRateParameters
;
"
Animation
.
releaseAnimations
"
:
Animation
.
releaseAnimationsParameters
;
"
Animation
.
resolveAnimation
"
:
Animation
.
resolveAnimationParameters
;
"
Animation
.
seekAnimations
"
:
Animation
.
seekAnimationsParameters
;
"
Animation
.
setPaused
"
:
Animation
.
setPausedParameters
;
"
Animation
.
setPlaybackRate
"
:
Animation
.
setPlaybackRateParameters
;
"
Animation
.
setTiming
"
:
Animation
.
setTimingParameters
;
"
ApplicationCache
.
enable
"
:
ApplicationCache
.
enableParameters
;
"
ApplicationCache
.
getApplicationCacheForFrame
"
:
ApplicationCache
.
getApplicationCacheForFrameParameters
;
"
ApplicationCache
.
getFramesWithManifests
"
:
ApplicationCache
.
getFramesWithManifestsParameters
;
"
ApplicationCache
.
getManifestForFrame
"
:
ApplicationCache
.
getManifestForFrameParameters
;
"
Audits
.
getEncodedResponse
"
:
Audits
.
getEncodedResponseParameters
;
"
Audits
.
disable
"
:
Audits
.
disableParameters
;
"
Audits
.
enable
"
:
Audits
.
enableParameters
;
"
BackgroundService
.
startObserving
"
:
BackgroundService
.
startObservingParameters
;
"
BackgroundService
.
stopObserving
"
:
BackgroundService
.
stopObservingParameters
;
"
BackgroundService
.
setRecording
"
:
BackgroundService
.
setRecordingParameters
;
"
BackgroundService
.
clearEvents
"
:
BackgroundService
.
clearEventsParameters
;
"
Browser
.
setPermission
"
:
Browser
.
setPermissionParameters
;
"
Browser
.
grantPermissions
"
:
Browser
.
grantPermissionsParameters
;
"
Browser
.
resetPermissions
"
:
Browser
.
resetPermissionsParameters
;
"
Browser
.
setDownloadBehavior
"
:
Browser
.
setDownloadBehaviorParameters
;
"
Browser
.
close
"
:
Browser
.
closeParameters
;
"
Browser
.
crash
"
:
Browser
.
crashParameters
;
"
Browser
.
crashGpuProcess
"
:
Browser
.
crashGpuProcessParameters
;
"
Browser
.
getVersion
"
:
Browser
.
getVersionParameters
;
"
Browser
.
getBrowserCommandLine
"
:
Browser
.
getBrowserCommandLineParameters
;
"
Browser
.
getHistograms
"
:
Browser
.
getHistogramsParameters
;
"
Browser
.
getHistogram
"
:
Browser
.
getHistogramParameters
;
"
Browser
.
getWindowBounds
"
:
Browser
.
getWindowBoundsParameters
;
"
Browser
.
getWindowForTarget
"
:
Browser
.
getWindowForTargetParameters
;
"
Browser
.
setWindowBounds
"
:
Browser
.
setWindowBoundsParameters
;
"
Browser
.
setDockTile
"
:
Browser
.
setDockTileParameters
;
"
CSS
.
addRule
"
:
CSS
.
addRuleParameters
;
"
CSS
.
collectClassNames
"
:
CSS
.
collectClassNamesParameters
;
"
CSS
.
createStyleSheet
"
:
CSS
.
createStyleSheetParameters
;
"
CSS
.
disable
"
:
CSS
.
disableParameters
;
"
CSS
.
enable
"
:
CSS
.
enableParameters
;
"
CSS
.
forcePseudoState
"
:
CSS
.
forcePseudoStateParameters
;
"
CSS
.
getBackgroundColors
"
:
CSS
.
getBackgroundColorsParameters
;
"
CSS
.
getComputedStyleForNode
"
:
CSS
.
getComputedStyleForNodeParameters
;
"
CSS
.
getInlineStylesForNode
"
:
CSS
.
getInlineStylesForNodeParameters
;
"
CSS
.
getMatchedStylesForNode
"
:
CSS
.
getMatchedStylesForNodeParameters
;
"
CSS
.
getMediaQueries
"
:
CSS
.
getMediaQueriesParameters
;
"
CSS
.
getPlatformFontsForNode
"
:
CSS
.
getPlatformFontsForNodeParameters
;
"
CSS
.
getStyleSheetText
"
:
CSS
.
getStyleSheetTextParameters
;
"
CSS
.
setEffectivePropertyValueForNode
"
:
CSS
.
setEffectivePropertyValueForNodeParameters
;
"
CSS
.
setKeyframeKey
"
:
CSS
.
setKeyframeKeyParameters
;
"
CSS
.
setMediaText
"
:
CSS
.
setMediaTextParameters
;
"
CSS
.
setRuleSelector
"
:
CSS
.
setRuleSelectorParameters
;
"
CSS
.
setStyleSheetText
"
:
CSS
.
setStyleSheetTextParameters
;
"
CSS
.
setStyleTexts
"
:
CSS
.
setStyleTextsParameters
;
"
CSS
.
startRuleUsageTracking
"
:
CSS
.
startRuleUsageTrackingParameters
;
"
CSS
.
stopRuleUsageTracking
"
:
CSS
.
stopRuleUsageTrackingParameters
;
"
CSS
.
takeCoverageDelta
"
:
CSS
.
takeCoverageDeltaParameters
;
"
CacheStorage
.
deleteCache
"
:
CacheStorage
.
deleteCacheParameters
;
"
CacheStorage
.
deleteEntry
"
:
CacheStorage
.
deleteEntryParameters
;
"
CacheStorage
.
requestCacheNames
"
:
CacheStorage
.
requestCacheNamesParameters
;
"
CacheStorage
.
requestCachedResponse
"
:
CacheStorage
.
requestCachedResponseParameters
;
"
CacheStorage
.
requestEntries
"
:
CacheStorage
.
requestEntriesParameters
;
"
Cast
.
enable
"
:
Cast
.
enableParameters
;
"
Cast
.
disable
"
:
Cast
.
disableParameters
;
"
Cast
.
setSinkToUse
"
:
Cast
.
setSinkToUseParameters
;
"
Cast
.
startTabMirroring
"
:
Cast
.
startTabMirroringParameters
;
"
Cast
.
stopCasting
"
:
Cast
.
stopCastingParameters
;
"
DOM
.
collectClassNamesFromSubtree
"
:
DOM
.
collectClassNamesFromSubtreeParameters
;
"
DOM
.
copyTo
"
:
DOM
.
copyToParameters
;
"
DOM
.
describeNode
"
:
DOM
.
describeNodeParameters
;
"
DOM
.
scrollIntoViewIfNeeded
"
:
DOM
.
scrollIntoViewIfNeededParameters
;
"
DOM
.
disable
"
:
DOM
.
disableParameters
;
"
DOM
.
discardSearchResults
"
:
DOM
.
discardSearchResultsParameters
;
"
DOM
.
enable
"
:
DOM
.
enableParameters
;
"
DOM
.
focus
"
:
DOM
.
focusParameters
;
"
DOM
.
getAttributes
"
:
DOM
.
getAttributesParameters
;
"
DOM
.
getBoxModel
"
:
DOM
.
getBoxModelParameters
;
"
DOM
.
getContentQuads
"
:
DOM
.
getContentQuadsParameters
;
"
DOM
.
getDocument
"
:
DOM
.
getDocumentParameters
;
"
DOM
.
getFlattenedDocument
"
:
DOM
.
getFlattenedDocumentParameters
;
"
DOM
.
getNodeForLocation
"
:
DOM
.
getNodeForLocationParameters
;
"
DOM
.
getOuterHTML
"
:
DOM
.
getOuterHTMLParameters
;
"
DOM
.
getRelayoutBoundary
"
:
DOM
.
getRelayoutBoundaryParameters
;
"
DOM
.
getSearchResults
"
:
DOM
.
getSearchResultsParameters
;
"
DOM
.
hideHighlight
"
:
DOM
.
hideHighlightParameters
;
"
DOM
.
highlightNode
"
:
DOM
.
highlightNodeParameters
;
"
DOM
.
highlightRect
"
:
DOM
.
highlightRectParameters
;
"
DOM
.
markUndoableState
"
:
DOM
.
markUndoableStateParameters
;
"
DOM
.
moveTo
"
:
DOM
.
moveToParameters
;
"
DOM
.
performSearch
"
:
DOM
.
performSearchParameters
;
"
DOM
.
pushNodeByPathToFrontend
"
:
DOM
.
pushNodeByPathToFrontendParameters
;
"
DOM
.
pushNodesByBackendIdsToFrontend
"
:
DOM
.
pushNodesByBackendIdsToFrontendParameters
;
"
DOM
.
querySelector
"
:
DOM
.
querySelectorParameters
;
"
DOM
.
querySelectorAll
"
:
DOM
.
querySelectorAllParameters
;
"
DOM
.
redo
"
:
DOM
.
redoParameters
;
"
DOM
.
removeAttribute
"
:
DOM
.
removeAttributeParameters
;
"
DOM
.
removeNode
"
:
DOM
.
removeNodeParameters
;
"
DOM
.
requestChildNodes
"
:
DOM
.
requestChildNodesParameters
;
"
DOM
.
requestNode
"
:
DOM
.
requestNodeParameters
;
"
DOM
.
resolveNode
"
:
DOM
.
resolveNodeParameters
;
"
DOM
.
setAttributeValue
"
:
DOM
.
setAttributeValueParameters
;
"
DOM
.
setAttributesAsText
"
:
DOM
.
setAttributesAsTextParameters
;
"
DOM
.
setFileInputFiles
"
:
DOM
.
setFileInputFilesParameters
;
"
DOM
.
setNodeStackTracesEnabled
"
:
DOM
.
setNodeStackTracesEnabledParameters
;
"
DOM
.
getNodeStackTraces
"
:
DOM
.
getNodeStackTracesParameters
;
"
DOM
.
getFileInfo
"
:
DOM
.
getFileInfoParameters
;
"
DOM
.
setInspectedNode
"
:
DOM
.
setInspectedNodeParameters
;
"
DOM
.
setNodeName
"
:
DOM
.
setNodeNameParameters
;
"
DOM
.
setNodeValue
"
:
DOM
.
setNodeValueParameters
;
"
DOM
.
setOuterHTML
"
:
DOM
.
setOuterHTMLParameters
;
"
DOM
.
undo
"
:
DOM
.
undoParameters
;
"
DOM
.
getFrameOwner
"
:
DOM
.
getFrameOwnerParameters
;
"
DOMDebugger
.
getEventListeners
"
:
DOMDebugger
.
getEventListenersParameters
;
"
DOMDebugger
.
removeDOMBreakpoint
"
:
DOMDebugger
.
removeDOMBreakpointParameters
;
"
DOMDebugger
.
removeEventListenerBreakpoint
"
:
DOMDebugger
.
removeEventListenerBreakpointParameters
;
"
DOMDebugger
.
removeInstrumentationBreakpoint
"
:
DOMDebugger
.
removeInstrumentationBreakpointParameters
;
"
DOMDebugger
.
removeXHRBreakpoint
"
:
DOMDebugger
.
removeXHRBreakpointParameters
;
"
DOMDebugger
.
setDOMBreakpoint
"
:
DOMDebugger
.
setDOMBreakpointParameters
;
"
DOMDebugger
.
setEventListenerBreakpoint
"
:
DOMDebugger
.
setEventListenerBreakpointParameters
;
"
DOMDebugger
.
setInstrumentationBreakpoint
"
:
DOMDebugger
.
setInstrumentationBreakpointParameters
;
"
DOMDebugger
.
setXHRBreakpoint
"
:
DOMDebugger
.
setXHRBreakpointParameters
;
"
DOMSnapshot
.
disable
"
:
DOMSnapshot
.
disableParameters
;
"
DOMSnapshot
.
enable
"
:
DOMSnapshot
.
enableParameters
;
"
DOMSnapshot
.
getSnapshot
"
:
DOMSnapshot
.
getSnapshotParameters
;
"
DOMSnapshot
.
captureSnapshot
"
:
DOMSnapshot
.
captureSnapshotParameters
;
"
DOMStorage
.
clear
"
:
DOMStorage
.
clearParameters
;
"
DOMStorage
.
disable
"
:
DOMStorage
.
disableParameters
;
"
DOMStorage
.
enable
"
:
DOMStorage
.
enableParameters
;
"
DOMStorage
.
getDOMStorageItems
"
:
DOMStorage
.
getDOMStorageItemsParameters
;
"
DOMStorage
.
removeDOMStorageItem
"
:
DOMStorage
.
removeDOMStorageItemParameters
;
"
DOMStorage
.
setDOMStorageItem
"
:
DOMStorage
.
setDOMStorageItemParameters
;
"
Database
.
disable
"
:
Database
.
disableParameters
;
"
Database
.
enable
"
:
Database
.
enableParameters
;
"
Database
.
executeSQL
"
:
Database
.
executeSQLParameters
;
"
Database
.
getDatabaseTableNames
"
:
Database
.
getDatabaseTableNamesParameters
;
"
DeviceOrientation
.
clearDeviceOrientationOverride
"
:
DeviceOrientation
.
clearDeviceOrientationOverrideParameters
;
"
DeviceOrientation
.
setDeviceOrientationOverride
"
:
DeviceOrientation
.
setDeviceOrientationOverrideParameters
;
"
Emulation
.
canEmulate
"
:
Emulation
.
canEmulateParameters
;
"
Emulation
.
clearDeviceMetricsOverride
"
:
Emulation
.
clearDeviceMetricsOverrideParameters
;
"
Emulation
.
clearGeolocationOverride
"
:
Emulation
.
clearGeolocationOverrideParameters
;
"
Emulation
.
resetPageScaleFactor
"
:
Emulation
.
resetPageScaleFactorParameters
;
"
Emulation
.
setFocusEmulationEnabled
"
:
Emulation
.
setFocusEmulationEnabledParameters
;
"
Emulation
.
setCPUThrottlingRate
"
:
Emulation
.
setCPUThrottlingRateParameters
;
"
Emulation
.
setDefaultBackgroundColorOverride
"
:
Emulation
.
setDefaultBackgroundColorOverrideParameters
;
"
Emulation
.
setDeviceMetricsOverride
"
:
Emulation
.
setDeviceMetricsOverrideParameters
;
"
Emulation
.
setScrollbarsHidden
"
:
Emulation
.
setScrollbarsHiddenParameters
;
"
Emulation
.
setDocumentCookieDisabled
"
:
Emulation
.
setDocumentCookieDisabledParameters
;
"
Emulation
.
setEmitTouchEventsForMouse
"
:
Emulation
.
setEmitTouchEventsForMouseParameters
;
"
Emulation
.
setEmulatedMedia
"
:
Emulation
.
setEmulatedMediaParameters
;
"
Emulation
.
setEmulatedVisionDeficiency
"
:
Emulation
.
setEmulatedVisionDeficiencyParameters
;
"
Emulation
.
setGeolocationOverride
"
:
Emulation
.
setGeolocationOverrideParameters
;
"
Emulation
.
setNavigatorOverrides
"
:
Emulation
.
setNavigatorOverridesParameters
;
"
Emulation
.
setPageScaleFactor
"
:
Emulation
.
setPageScaleFactorParameters
;
"
Emulation
.
setScriptExecutionDisabled
"
:
Emulation
.
setScriptExecutionDisabledParameters
;
"
Emulation
.
setTouchEmulationEnabled
"
:
Emulation
.
setTouchEmulationEnabledParameters
;
"
Emulation
.
setVirtualTimePolicy
"
:
Emulation
.
setVirtualTimePolicyParameters
;
"
Emulation
.
setLocaleOverride
"
:
Emulation
.
setLocaleOverrideParameters
;
"
Emulation
.
setTimezoneOverride
"
:
Emulation
.
setTimezoneOverrideParameters
;
"
Emulation
.
setVisibleSize
"
:
Emulation
.
setVisibleSizeParameters
;
"
Emulation
.
setUserAgentOverride
"
:
Emulation
.
setUserAgentOverrideParameters
;
"
HeadlessExperimental
.
beginFrame
"
:
HeadlessExperimental
.
beginFrameParameters
;
"
HeadlessExperimental
.
disable
"
:
HeadlessExperimental
.
disableParameters
;
"
HeadlessExperimental
.
enable
"
:
HeadlessExperimental
.
enableParameters
;
"
IO
.
close
"
:
IO
.
closeParameters
;
"
IO
.
read
"
:
IO
.
readParameters
;
"
IO
.
resolveBlob
"
:
IO
.
resolveBlobParameters
;
"
IndexedDB
.
clearObjectStore
"
:
IndexedDB
.
clearObjectStoreParameters
;
"
IndexedDB
.
deleteDatabase
"
:
IndexedDB
.
deleteDatabaseParameters
;
"
IndexedDB
.
deleteObjectStoreEntries
"
:
IndexedDB
.
deleteObjectStoreEntriesParameters
;
"
IndexedDB
.
disable
"
:
IndexedDB
.
disableParameters
;
"
IndexedDB
.
enable
"
:
IndexedDB
.
enableParameters
;
"
IndexedDB
.
requestData
"
:
IndexedDB
.
requestDataParameters
;
"
IndexedDB
.
getMetadata
"
:
IndexedDB
.
getMetadataParameters
;
"
IndexedDB
.
requestDatabase
"
:
IndexedDB
.
requestDatabaseParameters
;
"
IndexedDB
.
requestDatabaseNames
"
:
IndexedDB
.
requestDatabaseNamesParameters
;
"
Input
.
dispatchKeyEvent
"
:
Input
.
dispatchKeyEventParameters
;
"
Input
.
insertText
"
:
Input
.
insertTextParameters
;
"
Input
.
dispatchMouseEvent
"
:
Input
.
dispatchMouseEventParameters
;
"
Input
.
dispatchTouchEvent
"
:
Input
.
dispatchTouchEventParameters
;
"
Input
.
emulateTouchFromMouseEvent
"
:
Input
.
emulateTouchFromMouseEventParameters
;
"
Input
.
setIgnoreInputEvents
"
:
Input
.
setIgnoreInputEventsParameters
;
"
Input
.
synthesizePinchGesture
"
:
Input
.
synthesizePinchGestureParameters
;
"
Input
.
synthesizeScrollGesture
"
:
Input
.
synthesizeScrollGestureParameters
;
"
Input
.
synthesizeTapGesture
"
:
Input
.
synthesizeTapGestureParameters
;
"
Inspector
.
disable
"
:
Inspector
.
disableParameters
;
"
Inspector
.
enable
"
:
Inspector
.
enableParameters
;
"
LayerTree
.
compositingReasons
"
:
LayerTree
.
compositingReasonsParameters
;
"
LayerTree
.
disable
"
:
LayerTree
.
disableParameters
;
"
LayerTree
.
enable
"
:
LayerTree
.
enableParameters
;
"
LayerTree
.
loadSnapshot
"
:
LayerTree
.
loadSnapshotParameters
;
"
LayerTree
.
makeSnapshot
"
:
LayerTree
.
makeSnapshotParameters
;
"
LayerTree
.
profileSnapshot
"
:
LayerTree
.
profileSnapshotParameters
;
"
LayerTree
.
releaseSnapshot
"
:
LayerTree
.
releaseSnapshotParameters
;
"
LayerTree
.
replaySnapshot
"
:
LayerTree
.
replaySnapshotParameters
;
"
LayerTree
.
snapshotCommandLog
"
:
LayerTree
.
snapshotCommandLogParameters
;
"
Log
.
clear
"
:
Log
.
clearParameters
;
"
Log
.
disable
"
:
Log
.
disableParameters
;
"
Log
.
enable
"
:
Log
.
enableParameters
;
"
Log
.
startViolationsReport
"
:
Log
.
startViolationsReportParameters
;
"
Log
.
stopViolationsReport
"
:
Log
.
stopViolationsReportParameters
;
"
Memory
.
getDOMCounters
"
:
Memory
.
getDOMCountersParameters
;
"
Memory
.
prepareForLeakDetection
"
:
Memory
.
prepareForLeakDetectionParameters
;
"
Memory
.
forciblyPurgeJavaScriptMemory
"
:
Memory
.
forciblyPurgeJavaScriptMemoryParameters
;
"
Memory
.
setPressureNotificationsSuppressed
"
:
Memory
.
setPressureNotificationsSuppressedParameters
;
"
Memory
.
simulatePressureNotification
"
:
Memory
.
simulatePressureNotificationParameters
;
"
Memory
.
startSampling
"
:
Memory
.
startSamplingParameters
;
"
Memory
.
stopSampling
"
:
Memory
.
stopSamplingParameters
;
"
Memory
.
getAllTimeSamplingProfile
"
:
Memory
.
getAllTimeSamplingProfileParameters
;
"
Memory
.
getBrowserSamplingProfile
"
:
Memory
.
getBrowserSamplingProfileParameters
;
"
Memory
.
getSamplingProfile
"
:
Memory
.
getSamplingProfileParameters
;
"
Network
.
canClearBrowserCache
"
:
Network
.
canClearBrowserCacheParameters
;
"
Network
.
canClearBrowserCookies
"
:
Network
.
canClearBrowserCookiesParameters
;
"
Network
.
canEmulateNetworkConditions
"
:
Network
.
canEmulateNetworkConditionsParameters
;
"
Network
.
clearBrowserCache
"
:
Network
.
clearBrowserCacheParameters
;
"
Network
.
clearBrowserCookies
"
:
Network
.
clearBrowserCookiesParameters
;
"
Network
.
continueInterceptedRequest
"
:
Network
.
continueInterceptedRequestParameters
;
"
Network
.
deleteCookies
"
:
Network
.
deleteCookiesParameters
;
"
Network
.
disable
"
:
Network
.
disableParameters
;
"
Network
.
emulateNetworkConditions
"
:
Network
.
emulateNetworkConditionsParameters
;
"
Network
.
enable
"
:
Network
.
enableParameters
;
"
Network
.
getAllCookies
"
:
Network
.
getAllCookiesParameters
;
"
Network
.
getCertificate
"
:
Network
.
getCertificateParameters
;
"
Network
.
getCookies
"
:
Network
.
getCookiesParameters
;
"
Network
.
getResponseBody
"
:
Network
.
getResponseBodyParameters
;
"
Network
.
getRequestPostData
"
:
Network
.
getRequestPostDataParameters
;
"
Network
.
getResponseBodyForInterception
"
:
Network
.
getResponseBodyForInterceptionParameters
;
"
Network
.
takeResponseBodyForInterceptionAsStream
"
:
Network
.
takeResponseBodyForInterceptionAsStreamParameters
;
"
Network
.
replayXHR
"
:
Network
.
replayXHRParameters
;
"
Network
.
searchInResponseBody
"
:
Network
.
searchInResponseBodyParameters
;
"
Network
.
setBlockedURLs
"
:
Network
.
setBlockedURLsParameters
;
"
Network
.
setBypassServiceWorker
"
:
Network
.
setBypassServiceWorkerParameters
;
"
Network
.
setCacheDisabled
"
:
Network
.
setCacheDisabledParameters
;
"
Network
.
setCookie
"
:
Network
.
setCookieParameters
;
"
Network
.
setCookies
"
:
Network
.
setCookiesParameters
;
"
Network
.
setDataSizeLimitsForTest
"
:
Network
.
setDataSizeLimitsForTestParameters
;
"
Network
.
setExtraHTTPHeaders
"
:
Network
.
setExtraHTTPHeadersParameters
;
"
Network
.
setRequestInterception
"
:
Network
.
setRequestInterceptionParameters
;
"
Network
.
setUserAgentOverride
"
:
Network
.
setUserAgentOverrideParameters
;
"
Overlay
.
disable
"
:
Overlay
.
disableParameters
;
"
Overlay
.
enable
"
:
Overlay
.
enableParameters
;
"
Overlay
.
getHighlightObjectForTest
"
:
Overlay
.
getHighlightObjectForTestParameters
;
"
Overlay
.
hideHighlight
"
:
Overlay
.
hideHighlightParameters
;
"
Overlay
.
highlightFrame
"
:
Overlay
.
highlightFrameParameters
;
"
Overlay
.
highlightNode
"
:
Overlay
.
highlightNodeParameters
;
"
Overlay
.
highlightQuad
"
:
Overlay
.
highlightQuadParameters
;
"
Overlay
.
highlightRect
"
:
Overlay
.
highlightRectParameters
;
"
Overlay
.
setInspectMode
"
:
Overlay
.
setInspectModeParameters
;
"
Overlay
.
setShowAdHighlights
"
:
Overlay
.
setShowAdHighlightsParameters
;
"
Overlay
.
setPausedInDebuggerMessage
"
:
Overlay
.
setPausedInDebuggerMessageParameters
;
"
Overlay
.
setShowDebugBorders
"
:
Overlay
.
setShowDebugBordersParameters
;
"
Overlay
.
setShowFPSCounter
"
:
Overlay
.
setShowFPSCounterParameters
;
"
Overlay
.
setShowPaintRects
"
:
Overlay
.
setShowPaintRectsParameters
;
"
Overlay
.
setShowLayoutShiftRegions
"
:
Overlay
.
setShowLayoutShiftRegionsParameters
;
"
Overlay
.
setShowScrollBottleneckRects
"
:
Overlay
.
setShowScrollBottleneckRectsParameters
;
"
Overlay
.
setShowHitTestBorders
"
:
Overlay
.
setShowHitTestBordersParameters
;
"
Overlay
.
setShowViewportSizeOnResize
"
:
Overlay
.
setShowViewportSizeOnResizeParameters
;
"
Page
.
addScriptToEvaluateOnLoad
"
:
Page
.
addScriptToEvaluateOnLoadParameters
;
"
Page
.
addScriptToEvaluateOnNewDocument
"
:
Page
.
addScriptToEvaluateOnNewDocumentParameters
;
"
Page
.
bringToFront
"
:
Page
.
bringToFrontParameters
;
"
Page
.
captureScreenshot
"
:
Page
.
captureScreenshotParameters
;
"
Page
.
captureSnapshot
"
:
Page
.
captureSnapshotParameters
;
"
Page
.
clearDeviceMetricsOverride
"
:
Page
.
clearDeviceMetricsOverrideParameters
;
"
Page
.
clearDeviceOrientationOverride
"
:
Page
.
clearDeviceOrientationOverrideParameters
;
"
Page
.
clearGeolocationOverride
"
:
Page
.
clearGeolocationOverrideParameters
;
"
Page
.
createIsolatedWorld
"
:
Page
.
createIsolatedWorldParameters
;
"
Page
.
deleteCookie
"
:
Page
.
deleteCookieParameters
;
"
Page
.
disable
"
:
Page
.
disableParameters
;
"
Page
.
enable
"
:
Page
.
enableParameters
;
"
Page
.
getAppManifest
"
:
Page
.
getAppManifestParameters
;
"
Page
.
getInstallabilityErrors
"
:
Page
.
getInstallabilityErrorsParameters
;
"
Page
.
getManifestIcons
"
:
Page
.
getManifestIconsParameters
;
"
Page
.
getCookies
"
:
Page
.
getCookiesParameters
;
"
Page
.
getFrameTree
"
:
Page
.
getFrameTreeParameters
;
"
Page
.
getLayoutMetrics
"
:
Page
.
getLayoutMetricsParameters
;
"
Page
.
getNavigationHistory
"
:
Page
.
getNavigationHistoryParameters
;
"
Page
.
resetNavigationHistory
"
:
Page
.
resetNavigationHistoryParameters
;
"
Page
.
getResourceContent
"
:
Page
.
getResourceContentParameters
;
"
Page
.
getResourceTree
"
:
Page
.
getResourceTreeParameters
;
"
Page
.
handleJavaScriptDialog
"
:
Page
.
handleJavaScriptDialogParameters
;
"
Page
.
navigate
"
:
Page
.
navigateParameters
;
"
Page
.
navigateToHistoryEntry
"
:
Page
.
navigateToHistoryEntryParameters
;
"
Page
.
printToPDF
"
:
Page
.
printToPDFParameters
;
"
Page
.
reload
"
:
Page
.
reloadParameters
;
"
Page
.
removeScriptToEvaluateOnLoad
"
:
Page
.
removeScriptToEvaluateOnLoadParameters
;
"
Page
.
removeScriptToEvaluateOnNewDocument
"
:
Page
.
removeScriptToEvaluateOnNewDocumentParameters
;
"
Page
.
screencastFrameAck
"
:
Page
.
screencastFrameAckParameters
;
"
Page
.
searchInResource
"
:
Page
.
searchInResourceParameters
;
"
Page
.
setAdBlockingEnabled
"
:
Page
.
setAdBlockingEnabledParameters
;
"
Page
.
setBypassCSP
"
:
Page
.
setBypassCSPParameters
;
"
Page
.
setDeviceMetricsOverride
"
:
Page
.
setDeviceMetricsOverrideParameters
;
"
Page
.
setDeviceOrientationOverride
"
:
Page
.
setDeviceOrientationOverrideParameters
;
"
Page
.
setFontFamilies
"
:
Page
.
setFontFamiliesParameters
;
"
Page
.
setFontSizes
"
:
Page
.
setFontSizesParameters
;
"
Page
.
setDocumentContent
"
:
Page
.
setDocumentContentParameters
;
"
Page
.
setDownloadBehavior
"
:
Page
.
setDownloadBehaviorParameters
;
"
Page
.
setGeolocationOverride
"
:
Page
.
setGeolocationOverrideParameters
;
"
Page
.
setLifecycleEventsEnabled
"
:
Page
.
setLifecycleEventsEnabledParameters
;
"
Page
.
setTouchEmulationEnabled
"
:
Page
.
setTouchEmulationEnabledParameters
;
"
Page
.
startScreencast
"
:
Page
.
startScreencastParameters
;
"
Page
.
stopLoading
"
:
Page
.
stopLoadingParameters
;
"
Page
.
crash
"
:
Page
.
crashParameters
;
"
Page
.
close
"
:
Page
.
closeParameters
;
"
Page
.
setWebLifecycleState
"
:
Page
.
setWebLifecycleStateParameters
;
"
Page
.
stopScreencast
"
:
Page
.
stopScreencastParameters
;
"
Page
.
setProduceCompilationCache
"
:
Page
.
setProduceCompilationCacheParameters
;
"
Page
.
addCompilationCache
"
:
Page
.
addCompilationCacheParameters
;
"
Page
.
clearCompilationCache
"
:
Page
.
clearCompilationCacheParameters
;
"
Page
.
generateTestReport
"
:
Page
.
generateTestReportParameters
;
"
Page
.
waitForDebugger
"
:
Page
.
waitForDebuggerParameters
;
"
Page
.
setInterceptFileChooserDialog
"
:
Page
.
setInterceptFileChooserDialogParameters
;
"
Performance
.
disable
"
:
Performance
.
disableParameters
;
"
Performance
.
enable
"
:
Performance
.
enableParameters
;
"
Performance
.
setTimeDomain
"
:
Performance
.
setTimeDomainParameters
;
"
Performance
.
getMetrics
"
:
Performance
.
getMetricsParameters
;
"
Security
.
disable
"
:
Security
.
disableParameters
;
"
Security
.
enable
"
:
Security
.
enableParameters
;
"
Security
.
setIgnoreCertificateErrors
"
:
Security
.
setIgnoreCertificateErrorsParameters
;
"
Security
.
handleCertificateError
"
:
Security
.
handleCertificateErrorParameters
;
"
Security
.
setOverrideCertificateErrors
"
:
Security
.
setOverrideCertificateErrorsParameters
;
"
ServiceWorker
.
deliverPushMessage
"
:
ServiceWorker
.
deliverPushMessageParameters
;
"
ServiceWorker
.
disable
"
:
ServiceWorker
.
disableParameters
;
"
ServiceWorker
.
dispatchSyncEvent
"
:
ServiceWorker
.
dispatchSyncEventParameters
;
"
ServiceWorker
.
dispatchPeriodicSyncEvent
"
:
ServiceWorker
.
dispatchPeriodicSyncEventParameters
;
"
ServiceWorker
.
enable
"
:
ServiceWorker
.
enableParameters
;
"
ServiceWorker
.
inspectWorker
"
:
ServiceWorker
.
inspectWorkerParameters
;
"
ServiceWorker
.
setForceUpdateOnPageLoad
"
:
ServiceWorker
.
setForceUpdateOnPageLoadParameters
;
"
ServiceWorker
.
skipWaiting
"
:
ServiceWorker
.
skipWaitingParameters
;
"
ServiceWorker
.
startWorker
"
:
ServiceWorker
.
startWorkerParameters
;
"
ServiceWorker
.
stopAllWorkers
"
:
ServiceWorker
.
stopAllWorkersParameters
;
"
ServiceWorker
.
stopWorker
"
:
ServiceWorker
.
stopWorkerParameters
;
"
ServiceWorker
.
unregister
"
:
ServiceWorker
.
unregisterParameters
;
"
ServiceWorker
.
updateRegistration
"
:
ServiceWorker
.
updateRegistrationParameters
;
"
Storage
.
clearDataForOrigin
"
:
Storage
.
clearDataForOriginParameters
;
"
Storage
.
getCookies
"
:
Storage
.
getCookiesParameters
;
"
Storage
.
setCookies
"
:
Storage
.
setCookiesParameters
;
"
Storage
.
clearCookies
"
:
Storage
.
clearCookiesParameters
;
"
Storage
.
getUsageAndQuota
"
:
Storage
.
getUsageAndQuotaParameters
;
"
Storage
.
trackCacheStorageForOrigin
"
:
Storage
.
trackCacheStorageForOriginParameters
;
"
Storage
.
trackIndexedDBForOrigin
"
:
Storage
.
trackIndexedDBForOriginParameters
;
"
Storage
.
untrackCacheStorageForOrigin
"
:
Storage
.
untrackCacheStorageForOriginParameters
;
"
Storage
.
untrackIndexedDBForOrigin
"
:
Storage
.
untrackIndexedDBForOriginParameters
;
"
SystemInfo
.
getInfo
"
:
SystemInfo
.
getInfoParameters
;
"
SystemInfo
.
getProcessInfo
"
:
SystemInfo
.
getProcessInfoParameters
;
"
Target
.
activateTarget
"
:
Target
.
activateTargetParameters
;
"
Target
.
attachToTarget
"
:
Target
.
attachToTargetParameters
;
"
Target
.
attachToBrowserTarget
"
:
Target
.
attachToBrowserTargetParameters
;
"
Target
.
closeTarget
"
:
Target
.
closeTargetParameters
;
"
Target
.
exposeDevToolsProtocol
"
:
Target
.
exposeDevToolsProtocolParameters
;
"
Target
.
createBrowserContext
"
:
Target
.
createBrowserContextParameters
;
"
Target
.
getBrowserContexts
"
:
Target
.
getBrowserContextsParameters
;
"
Target
.
createTarget
"
:
Target
.
createTargetParameters
;
"
Target
.
detachFromTarget
"
:
Target
.
detachFromTargetParameters
;
"
Target
.
disposeBrowserContext
"
:
Target
.
disposeBrowserContextParameters
;
"
Target
.
getTargetInfo
"
:
Target
.
getTargetInfoParameters
;
"
Target
.
getTargets
"
:
Target
.
getTargetsParameters
;
"
Target
.
sendMessageToTarget
"
:
Target
.
sendMessageToTargetParameters
;
"
Target
.
setAutoAttach
"
:
Target
.
setAutoAttachParameters
;
"
Target
.
setDiscoverTargets
"
:
Target
.
setDiscoverTargetsParameters
;
"
Target
.
setRemoteLocations
"
:
Target
.
setRemoteLocationsParameters
;
"
Tethering
.
bind
"
:
Tethering
.
bindParameters
;
"
Tethering
.
unbind
"
:
Tethering
.
unbindParameters
;
"
Tracing
.
end
"
:
Tracing
.
endParameters
;
"
Tracing
.
getCategories
"
:
Tracing
.
getCategoriesParameters
;
"
Tracing
.
recordClockSyncMarker
"
:
Tracing
.
recordClockSyncMarkerParameters
;
"
Tracing
.
requestMemoryDump
"
:
Tracing
.
requestMemoryDumpParameters
;
"
Tracing
.
start
"
:
Tracing
.
startParameters
;
"
Fetch
.
disable
"
:
Fetch
.
disableParameters
;
"
Fetch
.
enable
"
:
Fetch
.
enableParameters
;
"
Fetch
.
failRequest
"
:
Fetch
.
failRequestParameters
;
"
Fetch
.
fulfillRequest
"
:
Fetch
.
fulfillRequestParameters
;
"
Fetch
.
continueRequest
"
:
Fetch
.
continueRequestParameters
;
"
Fetch
.
continueWithAuth
"
:
Fetch
.
continueWithAuthParameters
;
"
Fetch
.
getResponseBody
"
:
Fetch
.
getResponseBodyParameters
;
"
Fetch
.
takeResponseBodyAsStream
"
:
Fetch
.
takeResponseBodyAsStreamParameters
;
"
WebAudio
.
enable
"
:
WebAudio
.
enableParameters
;
"
WebAudio
.
disable
"
:
WebAudio
.
disableParameters
;
"
WebAudio
.
getRealtimeData
"
:
WebAudio
.
getRealtimeDataParameters
;
"
WebAuthn
.
enable
"
:
WebAuthn
.
enableParameters
;
"
WebAuthn
.
disable
"
:
WebAuthn
.
disableParameters
;
"
WebAuthn
.
addVirtualAuthenticator
"
:
WebAuthn
.
addVirtualAuthenticatorParameters
;
"
WebAuthn
.
removeVirtualAuthenticator
"
:
WebAuthn
.
removeVirtualAuthenticatorParameters
;
"
WebAuthn
.
addCredential
"
:
WebAuthn
.
addCredentialParameters
;
"
WebAuthn
.
getCredential
"
:
WebAuthn
.
getCredentialParameters
;
"
WebAuthn
.
getCredentials
"
:
WebAuthn
.
getCredentialsParameters
;
"
WebAuthn
.
removeCredential
"
:
WebAuthn
.
removeCredentialParameters
;
"
WebAuthn
.
clearCredentials
"
:
WebAuthn
.
clearCredentialsParameters
;
"
WebAuthn
.
setUserVerified
"
:
WebAuthn
.
setUserVerifiedParameters
;
"
Media
.
enable
"
:
Media
.
enableParameters
;
"
Media
.
disable
"
:
Media
.
disableParameters
;
"
Console
.
clearMessages
"
:
Console
.
clearMessagesParameters
;
"
Console
.
disable
"
:
Console
.
disableParameters
;
"
Console
.
enable
"
:
Console
.
enableParameters
;
"
Debugger
.
continueToLocation
"
:
Debugger
.
continueToLocationParameters
;
"
Debugger
.
disable
"
:
Debugger
.
disableParameters
;
"
Debugger
.
enable
"
:
Debugger
.
enableParameters
;
"
Debugger
.
evaluateOnCallFrame
"
:
Debugger
.
evaluateOnCallFrameParameters
;
"
Debugger
.
getPossibleBreakpoints
"
:
Debugger
.
getPossibleBreakpointsParameters
;
"
Debugger
.
getScriptSource
"
:
Debugger
.
getScriptSourceParameters
;
"
Debugger
.
getWasmBytecode
"
:
Debugger
.
getWasmBytecodeParameters
;
"
Debugger
.
getStackTrace
"
:
Debugger
.
getStackTraceParameters
;
"
Debugger
.
pause
"
:
Debugger
.
pauseParameters
;
"
Debugger
.
pauseOnAsyncCall
"
:
Debugger
.
pauseOnAsyncCallParameters
;
"
Debugger
.
removeBreakpoint
"
:
Debugger
.
removeBreakpointParameters
;
"
Debugger
.
restartFrame
"
:
Debugger
.
restartFrameParameters
;
"
Debugger
.
resume
"
:
Debugger
.
resumeParameters
;
"
Debugger
.
searchInContent
"
:
Debugger
.
searchInContentParameters
;
"
Debugger
.
setAsyncCallStackDepth
"
:
Debugger
.
setAsyncCallStackDepthParameters
;
"
Debugger
.
setBlackboxPatterns
"
:
Debugger
.
setBlackboxPatternsParameters
;
"
Debugger
.
setBlackboxedRanges
"
:
Debugger
.
setBlackboxedRangesParameters
;
"
Debugger
.
setBreakpoint
"
:
Debugger
.
setBreakpointParameters
;
"
Debugger
.
setInstrumentationBreakpoint
"
:
Debugger
.
setInstrumentationBreakpointParameters
;
"
Debugger
.
setBreakpointByUrl
"
:
Debugger
.
setBreakpointByUrlParameters
;
"
Debugger
.
setBreakpointOnFunctionCall
"
:
Debugger
.
setBreakpointOnFunctionCallParameters
;
"
Debugger
.
setBreakpointsActive
"
:
Debugger
.
setBreakpointsActiveParameters
;
"
Debugger
.
setPauseOnExceptions
"
:
Debugger
.
setPauseOnExceptionsParameters
;
"
Debugger
.
setReturnValue
"
:
Debugger
.
setReturnValueParameters
;
"
Debugger
.
setScriptSource
"
:
Debugger
.
setScriptSourceParameters
;
"
Debugger
.
setSkipAllPauses
"
:
Debugger
.
setSkipAllPausesParameters
;
"
Debugger
.
setVariableValue
"
:
Debugger
.
setVariableValueParameters
;
"
Debugger
.
stepInto
"
:
Debugger
.
stepIntoParameters
;
"
Debugger
.
stepOut
"
:
Debugger
.
stepOutParameters
;
"
Debugger
.
stepOver
"
:
Debugger
.
stepOverParameters
;
"
HeapProfiler
.
addInspectedHeapObject
"
:
HeapProfiler
.
addInspectedHeapObjectParameters
;
"
HeapProfiler
.
collectGarbage
"
:
HeapProfiler
.
collectGarbageParameters
;
"
HeapProfiler
.
disable
"
:
HeapProfiler
.
disableParameters
;
"
HeapProfiler
.
enable
"
:
HeapProfiler
.
enableParameters
;
"
HeapProfiler
.
getHeapObjectId
"
:
HeapProfiler
.
getHeapObjectIdParameters
;
"
HeapProfiler
.
getObjectByHeapObjectId
"
:
HeapProfiler
.
getObjectByHeapObjectIdParameters
;
"
HeapProfiler
.
getSamplingProfile
"
:
HeapProfiler
.
getSamplingProfileParameters
;
"
HeapProfiler
.
startSampling
"
:
HeapProfiler
.
startSamplingParameters
;
"
HeapProfiler
.
startTrackingHeapObjects
"
:
HeapProfiler
.
startTrackingHeapObjectsParameters
;
"
HeapProfiler
.
stopSampling
"
:
HeapProfiler
.
stopSamplingParameters
;
"
HeapProfiler
.
stopTrackingHeapObjects
"
:
HeapProfiler
.
stopTrackingHeapObjectsParameters
;
"
HeapProfiler
.
takeHeapSnapshot
"
:
HeapProfiler
.
takeHeapSnapshotParameters
;
"
Profiler
.
disable
"
:
Profiler
.
disableParameters
;
"
Profiler
.
enable
"
:
Profiler
.
enableParameters
;
"
Profiler
.
getBestEffortCoverage
"
:
Profiler
.
getBestEffortCoverageParameters
;
"
Profiler
.
setSamplingInterval
"
:
Profiler
.
setSamplingIntervalParameters
;
"
Profiler
.
start
"
:
Profiler
.
startParameters
;
"
Profiler
.
startPreciseCoverage
"
:
Profiler
.
startPreciseCoverageParameters
;
"
Profiler
.
startTypeProfile
"
:
Profiler
.
startTypeProfileParameters
;
"
Profiler
.
stop
"
:
Profiler
.
stopParameters
;
"
Profiler
.
stopPreciseCoverage
"
:
Profiler
.
stopPreciseCoverageParameters
;
"
Profiler
.
stopTypeProfile
"
:
Profiler
.
stopTypeProfileParameters
;
"
Profiler
.
takePreciseCoverage
"
:
Profiler
.
takePreciseCoverageParameters
;
"
Profiler
.
takeTypeProfile
"
:
Profiler
.
takeTypeProfileParameters
;
"
Profiler
.
enableRuntimeCallStats
"
:
Profiler
.
enableRuntimeCallStatsParameters
;
"
Profiler
.
disableRuntimeCallStats
"
:
Profiler
.
disableRuntimeCallStatsParameters
;
"
Profiler
.
getRuntimeCallStats
"
:
Profiler
.
getRuntimeCallStatsParameters
;
"
Runtime
.
awaitPromise
"
:
Runtime
.
awaitPromiseParameters
;
"
Runtime
.
callFunctionOn
"
:
Runtime
.
callFunctionOnParameters
;
"
Runtime
.
compileScript
"
:
Runtime
.
compileScriptParameters
;
"
Runtime
.
disable
"
:
Runtime
.
disableParameters
;
"
Runtime
.
discardConsoleEntries
"
:
Runtime
.
discardConsoleEntriesParameters
;
"
Runtime
.
enable
"
:
Runtime
.
enableParameters
;
"
Runtime
.
evaluate
"
:
Runtime
.
evaluateParameters
;
"
Runtime
.
getIsolateId
"
:
Runtime
.
getIsolateIdParameters
;
"
Runtime
.
getHeapUsage
"
:
Runtime
.
getHeapUsageParameters
;
"
Runtime
.
getProperties
"
:
Runtime
.
getPropertiesParameters
;
"
Runtime
.
globalLexicalScopeNames
"
:
Runtime
.
globalLexicalScopeNamesParameters
;
"
Runtime
.
queryObjects
"
:
Runtime
.
queryObjectsParameters
;
"
Runtime
.
releaseObject
"
:
Runtime
.
releaseObjectParameters
;
"
Runtime
.
releaseObjectGroup
"
:
Runtime
.
releaseObjectGroupParameters
;
"
Runtime
.
runIfWaitingForDebugger
"
:
Runtime
.
runIfWaitingForDebuggerParameters
;
"
Runtime
.
runScript
"
:
Runtime
.
runScriptParameters
;
"
Runtime
.
setAsyncCallStackDepth
"
:
Runtime
.
setAsyncCallStackDepthParameters
;
"
Runtime
.
setCustomObjectFormatterEnabled
"
:
Runtime
.
setCustomObjectFormatterEnabledParameters
;
"
Runtime
.
setMaxCallStackSizeToCapture
"
:
Runtime
.
setMaxCallStackSizeToCaptureParameters
;
"
Runtime
.
terminateExecution
"
:
Runtime
.
terminateExecutionParameters
;
"
Runtime
.
addBinding
"
:
Runtime
.
addBindingParameters
;
"
Runtime
.
removeBinding
"
:
Runtime
.
removeBindingParameters
;
"
Schema
.
getDomains
"
:
Schema
.
getDomainsParameters
;
}
export
interface
CommandReturnValues
{
"
Accessibility
.
disable
"
:
Accessibility
.
disableReturnValue
;
"
Accessibility
.
enable
"
:
Accessibility
.
enableReturnValue
;
"
Accessibility
.
getPartialAXTree
"
:
Accessibility
.
getPartialAXTreeReturnValue
;
"
Accessibility
.
getFullAXTree
"
:
Accessibility
.
getFullAXTreeReturnValue
;
"
Animation
.
disable
"
:
Animation
.
disableReturnValue
;
"
Animation
.
enable
"
:
Animation
.
enableReturnValue
;
"
Animation
.
getCurrentTime
"
:
Animation
.
getCurrentTimeReturnValue
;
"
Animation
.
getPlaybackRate
"
:
Animation
.
getPlaybackRateReturnValue
;
"
Animation
.
releaseAnimations
"
:
Animation
.
releaseAnimationsReturnValue
;
"
Animation
.
resolveAnimation
"
:
Animation
.
resolveAnimationReturnValue
;
"
Animation
.
seekAnimations
"
:
Animation
.
seekAnimationsReturnValue
;
"
Animation
.
setPaused
"
:
Animation
.
setPausedReturnValue
;
"
Animation
.
setPlaybackRate
"
:
Animation
.
setPlaybackRateReturnValue
;
"
Animation
.
setTiming
"
:
Animation
.
setTimingReturnValue
;
"
ApplicationCache
.
enable
"
:
ApplicationCache
.
enableReturnValue
;
"
ApplicationCache
.
getApplicationCacheForFrame
"
:
ApplicationCache
.
getApplicationCacheForFrameReturnValue
;
"
ApplicationCache
.
getFramesWithManifests
"
:
ApplicationCache
.
getFramesWithManifestsReturnValue
;
"
ApplicationCache
.
getManifestForFrame
"
:
ApplicationCache
.
getManifestForFrameReturnValue
;
"
Audits
.
getEncodedResponse
"
:
Audits
.
getEncodedResponseReturnValue
;
"
Audits
.
disable
"
:
Audits
.
disableReturnValue
;
"
Audits
.
enable
"
:
Audits
.
enableReturnValue
;
"
BackgroundService
.
startObserving
"
:
BackgroundService
.
startObservingReturnValue
;
"
BackgroundService
.
stopObserving
"
:
BackgroundService
.
stopObservingReturnValue
;
"
BackgroundService
.
setRecording
"
:
BackgroundService
.
setRecordingReturnValue
;
"
BackgroundService
.
clearEvents
"
:
BackgroundService
.
clearEventsReturnValue
;
"
Browser
.
setPermission
"
:
Browser
.
setPermissionReturnValue
;
"
Browser
.
grantPermissions
"
:
Browser
.
grantPermissionsReturnValue
;
"
Browser
.
resetPermissions
"
:
Browser
.
resetPermissionsReturnValue
;
"
Browser
.
setDownloadBehavior
"
:
Browser
.
setDownloadBehaviorReturnValue
;
"
Browser
.
close
"
:
Browser
.
closeReturnValue
;
"
Browser
.
crash
"
:
Browser
.
crashReturnValue
;
"
Browser
.
crashGpuProcess
"
:
Browser
.
crashGpuProcessReturnValue
;
"
Browser
.
getVersion
"
:
Browser
.
getVersionReturnValue
;
"
Browser
.
getBrowserCommandLine
"
:
Browser
.
getBrowserCommandLineReturnValue
;
"
Browser
.
getHistograms
"
:
Browser
.
getHistogramsReturnValue
;
"
Browser
.
getHistogram
"
:
Browser
.
getHistogramReturnValue
;
"
Browser
.
getWindowBounds
"
:
Browser
.
getWindowBoundsReturnValue
;
"
Browser
.
getWindowForTarget
"
:
Browser
.
getWindowForTargetReturnValue
;
"
Browser
.
setWindowBounds
"
:
Browser
.
setWindowBoundsReturnValue
;
"
Browser
.
setDockTile
"
:
Browser
.
setDockTileReturnValue
;
"
CSS
.
addRule
"
:
CSS
.
addRuleReturnValue
;
"
CSS
.
collectClassNames
"
:
CSS
.
collectClassNamesReturnValue
;
"
CSS
.
createStyleSheet
"
:
CSS
.
createStyleSheetReturnValue
;
"
CSS
.
disable
"
:
CSS
.
disableReturnValue
;
"
CSS
.
enable
"
:
CSS
.
enableReturnValue
;
"
CSS
.
forcePseudoState
"
:
CSS
.
forcePseudoStateReturnValue
;
"
CSS
.
getBackgroundColors
"
:
CSS
.
getBackgroundColorsReturnValue
;
"
CSS
.
getComputedStyleForNode
"
:
CSS
.
getComputedStyleForNodeReturnValue
;
"
CSS
.
getInlineStylesForNode
"
:
CSS
.
getInlineStylesForNodeReturnValue
;
"
CSS
.
getMatchedStylesForNode
"
:
CSS
.
getMatchedStylesForNodeReturnValue
;
"
CSS
.
getMediaQueries
"
:
CSS
.
getMediaQueriesReturnValue
;
"
CSS
.
getPlatformFontsForNode
"
:
CSS
.
getPlatformFontsForNodeReturnValue
;
"
CSS
.
getStyleSheetText
"
:
CSS
.
getStyleSheetTextReturnValue
;
"
CSS
.
setEffectivePropertyValueForNode
"
:
CSS
.
setEffectivePropertyValueForNodeReturnValue
;
"
CSS
.
setKeyframeKey
"
:
CSS
.
setKeyframeKeyReturnValue
;
"
CSS
.
setMediaText
"
:
CSS
.
setMediaTextReturnValue
;
"
CSS
.
setRuleSelector
"
:
CSS
.
setRuleSelectorReturnValue
;
"
CSS
.
setStyleSheetText
"
:
CSS
.
setStyleSheetTextReturnValue
;
"
CSS
.
setStyleTexts
"
:
CSS
.
setStyleTextsReturnValue
;
"
CSS
.
startRuleUsageTracking
"
:
CSS
.
startRuleUsageTrackingReturnValue
;
"
CSS
.
stopRuleUsageTracking
"
:
CSS
.
stopRuleUsageTrackingReturnValue
;
"
CSS
.
takeCoverageDelta
"
:
CSS
.
takeCoverageDeltaReturnValue
;
"
CacheStorage
.
deleteCache
"
:
CacheStorage
.
deleteCacheReturnValue
;
"
CacheStorage
.
deleteEntry
"
:
CacheStorage
.
deleteEntryReturnValue
;
"
CacheStorage
.
requestCacheNames
"
:
CacheStorage
.
requestCacheNamesReturnValue
;
"
CacheStorage
.
requestCachedResponse
"
:
CacheStorage
.
requestCachedResponseReturnValue
;
"
CacheStorage
.
requestEntries
"
:
CacheStorage
.
requestEntriesReturnValue
;
"
Cast
.
enable
"
:
Cast
.
enableReturnValue
;
"
Cast
.
disable
"
:
Cast
.
disableReturnValue
;
"
Cast
.
setSinkToUse
"
:
Cast
.
setSinkToUseReturnValue
;
"
Cast
.
startTabMirroring
"
:
Cast
.
startTabMirroringReturnValue
;
"
Cast
.
stopCasting
"
:
Cast
.
stopCastingReturnValue
;
"
DOM
.
collectClassNamesFromSubtree
"
:
DOM
.
collectClassNamesFromSubtreeReturnValue
;
"
DOM
.
copyTo
"
:
DOM
.
copyToReturnValue
;
"
DOM
.
describeNode
"
:
DOM
.
describeNodeReturnValue
;
"
DOM
.
scrollIntoViewIfNeeded
"
:
DOM
.
scrollIntoViewIfNeededReturnValue
;
"
DOM
.
disable
"
:
DOM
.
disableReturnValue
;
"
DOM
.
discardSearchResults
"
:
DOM
.
discardSearchResultsReturnValue
;
"
DOM
.
enable
"
:
DOM
.
enableReturnValue
;
"
DOM
.
focus
"
:
DOM
.
focusReturnValue
;
"
DOM
.
getAttributes
"
:
DOM
.
getAttributesReturnValue
;
"
DOM
.
getBoxModel
"
:
DOM
.
getBoxModelReturnValue
;
"
DOM
.
getContentQuads
"
:
DOM
.
getContentQuadsReturnValue
;
"
DOM
.
getDocument
"
:
DOM
.
getDocumentReturnValue
;
"
DOM
.
getFlattenedDocument
"
:
DOM
.
getFlattenedDocumentReturnValue
;
"
DOM
.
getNodeForLocation
"
:
DOM
.
getNodeForLocationReturnValue
;
"
DOM
.
getOuterHTML
"
:
DOM
.
getOuterHTMLReturnValue
;
"
DOM
.
getRelayoutBoundary
"
:
DOM
.
getRelayoutBoundaryReturnValue
;
"
DOM
.
getSearchResults
"
:
DOM
.
getSearchResultsReturnValue
;
"
DOM
.
hideHighlight
"
:
DOM
.
hideHighlightReturnValue
;
"
DOM
.
highlightNode
"
:
DOM
.
highlightNodeReturnValue
;
"
DOM
.
highlightRect
"
:
DOM
.
highlightRectReturnValue
;
"
DOM
.
markUndoableState
"
:
DOM
.
markUndoableStateReturnValue
;
"
DOM
.
moveTo
"
:
DOM
.
moveToReturnValue
;
"
DOM
.
performSearch
"
:
DOM
.
performSearchReturnValue
;
"
DOM
.
pushNodeByPathToFrontend
"
:
DOM
.
pushNodeByPathToFrontendReturnValue
;
"
DOM
.
pushNodesByBackendIdsToFrontend
"
:
DOM
.
pushNodesByBackendIdsToFrontendReturnValue
;
"
DOM
.
querySelector
"
:
DOM
.
querySelectorReturnValue
;
"
DOM
.
querySelectorAll
"
:
DOM
.
querySelectorAllReturnValue
;
"
DOM
.
redo
"
:
DOM
.
redoReturnValue
;
"
DOM
.
removeAttribute
"
:
DOM
.
removeAttributeReturnValue
;
"
DOM
.
removeNode
"
:
DOM
.
removeNodeReturnValue
;
"
DOM
.
requestChildNodes
"
:
DOM
.
requestChildNodesReturnValue
;
"
DOM
.
requestNode
"
:
DOM
.
requestNodeReturnValue
;
"
DOM
.
resolveNode
"
:
DOM
.
resolveNodeReturnValue
;
"
DOM
.
setAttributeValue
"
:
DOM
.
setAttributeValueReturnValue
;
"
DOM
.
setAttributesAsText
"
:
DOM
.
setAttributesAsTextReturnValue
;
"
DOM
.
setFileInputFiles
"
:
DOM
.
setFileInputFilesReturnValue
;
"
DOM
.
setNodeStackTracesEnabled
"
:
DOM
.
setNodeStackTracesEnabledReturnValue
;
"
DOM
.
getNodeStackTraces
"
:
DOM
.
getNodeStackTracesReturnValue
;
"
DOM
.
getFileInfo
"
:
DOM
.
getFileInfoReturnValue
;
"
DOM
.
setInspectedNode
"
:
DOM
.
setInspectedNodeReturnValue
;
"
DOM
.
setNodeName
"
:
DOM
.
setNodeNameReturnValue
;
"
DOM
.
setNodeValue
"
:
DOM
.
setNodeValueReturnValue
;
"
DOM
.
setOuterHTML
"
:
DOM
.
setOuterHTMLReturnValue
;
"
DOM
.
undo
"
:
DOM
.
undoReturnValue
;
"
DOM
.
getFrameOwner
"
:
DOM
.
getFrameOwnerReturnValue
;
"
DOMDebugger
.
getEventListeners
"
:
DOMDebugger
.
getEventListenersReturnValue
;
"
DOMDebugger
.
removeDOMBreakpoint
"
:
DOMDebugger
.
removeDOMBreakpointReturnValue
;
"
DOMDebugger
.
removeEventListenerBreakpoint
"
:
DOMDebugger
.
removeEventListenerBreakpointReturnValue
;
"
DOMDebugger
.
removeInstrumentationBreakpoint
"
:
DOMDebugger
.
removeInstrumentationBreakpointReturnValue
;
"
DOMDebugger
.
removeXHRBreakpoint
"
:
DOMDebugger
.
removeXHRBreakpointReturnValue
;
"
DOMDebugger
.
setDOMBreakpoint
"
:
DOMDebugger
.
setDOMBreakpointReturnValue
;
"
DOMDebugger
.
setEventListenerBreakpoint
"
:
DOMDebugger
.
setEventListenerBreakpointReturnValue
;
"
DOMDebugger
.
setInstrumentationBreakpoint
"
:
DOMDebugger
.
setInstrumentationBreakpointReturnValue
;
"
DOMDebugger
.
setXHRBreakpoint
"
:
DOMDebugger
.
setXHRBreakpointReturnValue
;
"
DOMSnapshot
.
disable
"
:
DOMSnapshot
.
disableReturnValue
;
"
DOMSnapshot
.
enable
"
:
DOMSnapshot
.
enableReturnValue
;
"
DOMSnapshot
.
getSnapshot
"
:
DOMSnapshot
.
getSnapshotReturnValue
;
"
DOMSnapshot
.
captureSnapshot
"
:
DOMSnapshot
.
captureSnapshotReturnValue
;
"
DOMStorage
.
clear
"
:
DOMStorage
.
clearReturnValue
;
"
DOMStorage
.
disable
"
:
DOMStorage
.
disableReturnValue
;
"
DOMStorage
.
enable
"
:
DOMStorage
.
enableReturnValue
;
"
DOMStorage
.
getDOMStorageItems
"
:
DOMStorage
.
getDOMStorageItemsReturnValue
;
"
DOMStorage
.
removeDOMStorageItem
"
:
DOMStorage
.
removeDOMStorageItemReturnValue
;
"
DOMStorage
.
setDOMStorageItem
"
:
DOMStorage
.
setDOMStorageItemReturnValue
;
"
Database
.
disable
"
:
Database
.
disableReturnValue
;
"
Database
.
enable
"
:
Database
.
enableReturnValue
;
"
Database
.
executeSQL
"
:
Database
.
executeSQLReturnValue
;
"
Database
.
getDatabaseTableNames
"
:
Database
.
getDatabaseTableNamesReturnValue
;
"
DeviceOrientation
.
clearDeviceOrientationOverride
"
:
DeviceOrientation
.
clearDeviceOrientationOverrideReturnValue
;
"
DeviceOrientation
.
setDeviceOrientationOverride
"
:
DeviceOrientation
.
setDeviceOrientationOverrideReturnValue
;
"
Emulation
.
canEmulate
"
:
Emulation
.
canEmulateReturnValue
;
"
Emulation
.
clearDeviceMetricsOverride
"
:
Emulation
.
clearDeviceMetricsOverrideReturnValue
;
"
Emulation
.
clearGeolocationOverride
"
:
Emulation
.
clearGeolocationOverrideReturnValue
;
"
Emulation
.
resetPageScaleFactor
"
:
Emulation
.
resetPageScaleFactorReturnValue
;
"
Emulation
.
setFocusEmulationEnabled
"
:
Emulation
.
setFocusEmulationEnabledReturnValue
;
"
Emulation
.
setCPUThrottlingRate
"
:
Emulation
.
setCPUThrottlingRateReturnValue
;
"
Emulation
.
setDefaultBackgroundColorOverride
"
:
Emulation
.
setDefaultBackgroundColorOverrideReturnValue
;
"
Emulation
.
setDeviceMetricsOverride
"
:
Emulation
.
setDeviceMetricsOverrideReturnValue
;
"
Emulation
.
setScrollbarsHidden
"
:
Emulation
.
setScrollbarsHiddenReturnValue
;
"
Emulation
.
setDocumentCookieDisabled
"
:
Emulation
.
setDocumentCookieDisabledReturnValue
;
"
Emulation
.
setEmitTouchEventsForMouse
"
:
Emulation
.
setEmitTouchEventsForMouseReturnValue
;
"
Emulation
.
setEmulatedMedia
"
:
Emulation
.
setEmulatedMediaReturnValue
;
"
Emulation
.
setEmulatedVisionDeficiency
"
:
Emulation
.
setEmulatedVisionDeficiencyReturnValue
;
"
Emulation
.
setGeolocationOverride
"
:
Emulation
.
setGeolocationOverrideReturnValue
;
"
Emulation
.
setNavigatorOverrides
"
:
Emulation
.
setNavigatorOverridesReturnValue
;
"
Emulation
.
setPageScaleFactor
"
:
Emulation
.
setPageScaleFactorReturnValue
;
"
Emulation
.
setScriptExecutionDisabled
"
:
Emulation
.
setScriptExecutionDisabledReturnValue
;
"
Emulation
.
setTouchEmulationEnabled
"
:
Emulation
.
setTouchEmulationEnabledReturnValue
;
"
Emulation
.
setVirtualTimePolicy
"
:
Emulation
.
setVirtualTimePolicyReturnValue
;
"
Emulation
.
setLocaleOverride
"
:
Emulation
.
setLocaleOverrideReturnValue
;
"
Emulation
.
setTimezoneOverride
"
:
Emulation
.
setTimezoneOverrideReturnValue
;
"
Emulation
.
setVisibleSize
"
:
Emulation
.
setVisibleSizeReturnValue
;
"
Emulation
.
setUserAgentOverride
"
:
Emulation
.
setUserAgentOverrideReturnValue
;
"
HeadlessExperimental
.
beginFrame
"
:
HeadlessExperimental
.
beginFrameReturnValue
;
"
HeadlessExperimental
.
disable
"
:
HeadlessExperimental
.
disableReturnValue
;
"
HeadlessExperimental
.
enable
"
:
HeadlessExperimental
.
enableReturnValue
;
"
IO
.
close
"
:
IO
.
closeReturnValue
;
"
IO
.
read
"
:
IO
.
readReturnValue
;
"
IO
.
resolveBlob
"
:
IO
.
resolveBlobReturnValue
;
"
IndexedDB
.
clearObjectStore
"
:
IndexedDB
.
clearObjectStoreReturnValue
;
"
IndexedDB
.
deleteDatabase
"
:
IndexedDB
.
deleteDatabaseReturnValue
;
"
IndexedDB
.
deleteObjectStoreEntries
"
:
IndexedDB
.
deleteObjectStoreEntriesReturnValue
;
"
IndexedDB
.
disable
"
:
IndexedDB
.
disableReturnValue
;
"
IndexedDB
.
enable
"
:
IndexedDB
.
enableReturnValue
;
"
IndexedDB
.
requestData
"
:
IndexedDB
.
requestDataReturnValue
;
"
IndexedDB
.
getMetadata
"
:
IndexedDB
.
getMetadataReturnValue
;
"
IndexedDB
.
requestDatabase
"
:
IndexedDB
.
requestDatabaseReturnValue
;
"
IndexedDB
.
requestDatabaseNames
"
:
IndexedDB
.
requestDatabaseNamesReturnValue
;
"
Input
.
dispatchKeyEvent
"
:
Input
.
dispatchKeyEventReturnValue
;
"
Input
.
insertText
"
:
Input
.
insertTextReturnValue
;
"
Input
.
dispatchMouseEvent
"
:
Input
.
dispatchMouseEventReturnValue
;
"
Input
.
dispatchTouchEvent
"
:
Input
.
dispatchTouchEventReturnValue
;
"
Input
.
emulateTouchFromMouseEvent
"
:
Input
.
emulateTouchFromMouseEventReturnValue
;
"
Input
.
setIgnoreInputEvents
"
:
Input
.
setIgnoreInputEventsReturnValue
;
"
Input
.
synthesizePinchGesture
"
:
Input
.
synthesizePinchGestureReturnValue
;
"
Input
.
synthesizeScrollGesture
"
:
Input
.
synthesizeScrollGestureReturnValue
;
"
Input
.
synthesizeTapGesture
"
:
Input
.
synthesizeTapGestureReturnValue
;
"
Inspector
.
disable
"
:
Inspector
.
disableReturnValue
;
"
Inspector
.
enable
"
:
Inspector
.
enableReturnValue
;
"
LayerTree
.
compositingReasons
"
:
LayerTree
.
compositingReasonsReturnValue
;
"
LayerTree
.
disable
"
:
LayerTree
.
disableReturnValue
;
"
LayerTree
.
enable
"
:
LayerTree
.
enableReturnValue
;
"
LayerTree
.
loadSnapshot
"
:
LayerTree
.
loadSnapshotReturnValue
;
"
LayerTree
.
makeSnapshot
"
:
LayerTree
.
makeSnapshotReturnValue
;
"
LayerTree
.
profileSnapshot
"
:
LayerTree
.
profileSnapshotReturnValue
;
"
LayerTree
.
releaseSnapshot
"
:
LayerTree
.
releaseSnapshotReturnValue
;
"
LayerTree
.
replaySnapshot
"
:
LayerTree
.
replaySnapshotReturnValue
;
"
LayerTree
.
snapshotCommandLog
"
:
LayerTree
.
snapshotCommandLogReturnValue
;
"
Log
.
clear
"
:
Log
.
clearReturnValue
;
"
Log
.
disable
"
:
Log
.
disableReturnValue
;
"
Log
.
enable
"
:
Log
.
enableReturnValue
;
"
Log
.
startViolationsReport
"
:
Log
.
startViolationsReportReturnValue
;
"
Log
.
stopViolationsReport
"
:
Log
.
stopViolationsReportReturnValue
;
"
Memory
.
getDOMCounters
"
:
Memory
.
getDOMCountersReturnValue
;
"
Memory
.
prepareForLeakDetection
"
:
Memory
.
prepareForLeakDetectionReturnValue
;
"
Memory
.
forciblyPurgeJavaScriptMemory
"
:
Memory
.
forciblyPurgeJavaScriptMemoryReturnValue
;
"
Memory
.
setPressureNotificationsSuppressed
"
:
Memory
.
setPressureNotificationsSuppressedReturnValue
;
"
Memory
.
simulatePressureNotification
"
:
Memory
.
simulatePressureNotificationReturnValue
;
"
Memory
.
startSampling
"
:
Memory
.
startSamplingReturnValue
;
"
Memory
.
stopSampling
"
:
Memory
.
stopSamplingReturnValue
;
"
Memory
.
getAllTimeSamplingProfile
"
:
Memory
.
getAllTimeSamplingProfileReturnValue
;
"
Memory
.
getBrowserSamplingProfile
"
:
Memory
.
getBrowserSamplingProfileReturnValue
;
"
Memory
.
getSamplingProfile
"
:
Memory
.
getSamplingProfileReturnValue
;
"
Network
.
canClearBrowserCache
"
:
Network
.
canClearBrowserCacheReturnValue
;
"
Network
.
canClearBrowserCookies
"
:
Network
.
canClearBrowserCookiesReturnValue
;
"
Network
.
canEmulateNetworkConditions
"
:
Network
.
canEmulateNetworkConditionsReturnValue
;
"
Network
.
clearBrowserCache
"
:
Network
.
clearBrowserCacheReturnValue
;
"
Network
.
clearBrowserCookies
"
:
Network
.
clearBrowserCookiesReturnValue
;
"
Network
.
continueInterceptedRequest
"
:
Network
.
continueInterceptedRequestReturnValue
;
"
Network
.
deleteCookies
"
:
Network
.
deleteCookiesReturnValue
;
"
Network
.
disable
"
:
Network
.
disableReturnValue
;
"
Network
.
emulateNetworkConditions
"
:
Network
.
emulateNetworkConditionsReturnValue
;
"
Network
.
enable
"
:
Network
.
enableReturnValue
;
"
Network
.
getAllCookies
"
:
Network
.
getAllCookiesReturnValue
;
"
Network
.
getCertificate
"
:
Network
.
getCertificateReturnValue
;
"
Network
.
getCookies
"
:
Network
.
getCookiesReturnValue
;
"
Network
.
getResponseBody
"
:
Network
.
getResponseBodyReturnValue
;
"
Network
.
getRequestPostData
"
:
Network
.
getRequestPostDataReturnValue
;
"
Network
.
getResponseBodyForInterception
"
:
Network
.
getResponseBodyForInterceptionReturnValue
;
"
Network
.
takeResponseBodyForInterceptionAsStream
"
:
Network
.
takeResponseBodyForInterceptionAsStreamReturnValue
;
"
Network
.
replayXHR
"
:
Network
.
replayXHRReturnValue
;
"
Network
.
searchInResponseBody
"
:
Network
.
searchInResponseBodyReturnValue
;
"
Network
.
setBlockedURLs
"
:
Network
.
setBlockedURLsReturnValue
;
"
Network
.
setBypassServiceWorker
"
:
Network
.
setBypassServiceWorkerReturnValue
;
"
Network
.
setCacheDisabled
"
:
Network
.
setCacheDisabledReturnValue
;
"
Network
.
setCookie
"
:
Network
.
setCookieReturnValue
;
"
Network
.
setCookies
"
:
Network
.
setCookiesReturnValue
;
"
Network
.
setDataSizeLimitsForTest
"
:
Network
.
setDataSizeLimitsForTestReturnValue
;
"
Network
.
setExtraHTTPHeaders
"
:
Network
.
setExtraHTTPHeadersReturnValue
;
"
Network
.
setRequestInterception
"
:
Network
.
setRequestInterceptionReturnValue
;
"
Network
.
setUserAgentOverride
"
:
Network
.
setUserAgentOverrideReturnValue
;
"
Overlay
.
disable
"
:
Overlay
.
disableReturnValue
;
"
Overlay
.
enable
"
:
Overlay
.
enableReturnValue
;
"
Overlay
.
getHighlightObjectForTest
"
:
Overlay
.
getHighlightObjectForTestReturnValue
;
"
Overlay
.
hideHighlight
"
:
Overlay
.
hideHighlightReturnValue
;
"
Overlay
.
highlightFrame
"
:
Overlay
.
highlightFrameReturnValue
;
"
Overlay
.
highlightNode
"
:
Overlay
.
highlightNodeReturnValue
;
"
Overlay
.
highlightQuad
"
:
Overlay
.
highlightQuadReturnValue
;
"
Overlay
.
highlightRect
"
:
Overlay
.
highlightRectReturnValue
;
"
Overlay
.
setInspectMode
"
:
Overlay
.
setInspectModeReturnValue
;
"
Overlay
.
setShowAdHighlights
"
:
Overlay
.
setShowAdHighlightsReturnValue
;
"
Overlay
.
setPausedInDebuggerMessage
"
:
Overlay
.
setPausedInDebuggerMessageReturnValue
;
"
Overlay
.
setShowDebugBorders
"
:
Overlay
.
setShowDebugBordersReturnValue
;
"
Overlay
.
setShowFPSCounter
"
:
Overlay
.
setShowFPSCounterReturnValue
;
"
Overlay
.
setShowPaintRects
"
:
Overlay
.
setShowPaintRectsReturnValue
;
"
Overlay
.
setShowLayoutShiftRegions
"
:
Overlay
.
setShowLayoutShiftRegionsReturnValue
;
"
Overlay
.
setShowScrollBottleneckRects
"
:
Overlay
.
setShowScrollBottleneckRectsReturnValue
;
"
Overlay
.
setShowHitTestBorders
"
:
Overlay
.
setShowHitTestBordersReturnValue
;
"
Overlay
.
setShowViewportSizeOnResize
"
:
Overlay
.
setShowViewportSizeOnResizeReturnValue
;
"
Page
.
addScriptToEvaluateOnLoad
"
:
Page
.
addScriptToEvaluateOnLoadReturnValue
;
"
Page
.
addScriptToEvaluateOnNewDocument
"
:
Page
.
addScriptToEvaluateOnNewDocumentReturnValue
;
"
Page
.
bringToFront
"
:
Page
.
bringToFrontReturnValue
;
"
Page
.
captureScreenshot
"
:
Page
.
captureScreenshotReturnValue
;
"
Page
.
captureSnapshot
"
:
Page
.
captureSnapshotReturnValue
;
"
Page
.
clearDeviceMetricsOverride
"
:
Page
.
clearDeviceMetricsOverrideReturnValue
;
"
Page
.
clearDeviceOrientationOverride
"
:
Page
.
clearDeviceOrientationOverrideReturnValue
;
"
Page
.
clearGeolocationOverride
"
:
Page
.
clearGeolocationOverrideReturnValue
;
"
Page
.
createIsolatedWorld
"
:
Page
.
createIsolatedWorldReturnValue
;
"
Page
.
deleteCookie
"
:
Page
.
deleteCookieReturnValue
;
"
Page
.
disable
"
:
Page
.
disableReturnValue
;
"
Page
.
enable
"
:
Page
.
enableReturnValue
;
"
Page
.
getAppManifest
"
:
Page
.
getAppManifestReturnValue
;
"
Page
.
getInstallabilityErrors
"
:
Page
.
getInstallabilityErrorsReturnValue
;
"
Page
.
getManifestIcons
"
:
Page
.
getManifestIconsReturnValue
;
"
Page
.
getCookies
"
:
Page
.
getCookiesReturnValue
;
"
Page
.
getFrameTree
"
:
Page
.
getFrameTreeReturnValue
;
"
Page
.
getLayoutMetrics
"
:
Page
.
getLayoutMetricsReturnValue
;
"
Page
.
getNavigationHistory
"
:
Page
.
getNavigationHistoryReturnValue
;
"
Page
.
resetNavigationHistory
"
:
Page
.
resetNavigationHistoryReturnValue
;
"
Page
.
getResourceContent
"
:
Page
.
getResourceContentReturnValue
;
"
Page
.
getResourceTree
"
:
Page
.
getResourceTreeReturnValue
;
"
Page
.
handleJavaScriptDialog
"
:
Page
.
handleJavaScriptDialogReturnValue
;
"
Page
.
navigate
"
:
Page
.
navigateReturnValue
;
"
Page
.
navigateToHistoryEntry
"
:
Page
.
navigateToHistoryEntryReturnValue
;
"
Page
.
printToPDF
"
:
Page
.
printToPDFReturnValue
;
"
Page
.
reload
"
:
Page
.
reloadReturnValue
;
"
Page
.
removeScriptToEvaluateOnLoad
"
:
Page
.
removeScriptToEvaluateOnLoadReturnValue
;
"
Page
.
removeScriptToEvaluateOnNewDocument
"
:
Page
.
removeScriptToEvaluateOnNewDocumentReturnValue
;
"
Page
.
screencastFrameAck
"
:
Page
.
screencastFrameAckReturnValue
;
"
Page
.
searchInResource
"
:
Page
.
searchInResourceReturnValue
;
"
Page
.
setAdBlockingEnabled
"
:
Page
.
setAdBlockingEnabledReturnValue
;
"
Page
.
setBypassCSP
"
:
Page
.
setBypassCSPReturnValue
;
"
Page
.
setDeviceMetricsOverride
"
:
Page
.
setDeviceMetricsOverrideReturnValue
;
"
Page
.
setDeviceOrientationOverride
"
:
Page
.
setDeviceOrientationOverrideReturnValue
;
"
Page
.
setFontFamilies
"
:
Page
.
setFontFamiliesReturnValue
;
"
Page
.
setFontSizes
"
:
Page
.
setFontSizesReturnValue
;
"
Page
.
setDocumentContent
"
:
Page
.
setDocumentContentReturnValue
;
"
Page
.
setDownloadBehavior
"
:
Page
.
setDownloadBehaviorReturnValue
;
"
Page
.
setGeolocationOverride
"
:
Page
.
setGeolocationOverrideReturnValue
;
"
Page
.
setLifecycleEventsEnabled
"
:
Page
.
setLifecycleEventsEnabledReturnValue
;
"
Page
.
setTouchEmulationEnabled
"
:
Page
.
setTouchEmulationEnabledReturnValue
;
"
Page
.
startScreencast
"
:
Page
.
startScreencastReturnValue
;
"
Page
.
stopLoading
"
:
Page
.
stopLoadingReturnValue
;
"
Page
.
crash
"
:
Page
.
crashReturnValue
;
"
Page
.
close
"
:
Page
.
closeReturnValue
;
"
Page
.
setWebLifecycleState
"
:
Page
.
setWebLifecycleStateReturnValue
;
"
Page
.
stopScreencast
"
:
Page
.
stopScreencastReturnValue
;
"
Page
.
setProduceCompilationCache
"
:
Page
.
setProduceCompilationCacheReturnValue
;
"
Page
.
addCompilationCache
"
:
Page
.
addCompilationCacheReturnValue
;
"
Page
.
clearCompilationCache
"
:
Page
.
clearCompilationCacheReturnValue
;
"
Page
.
generateTestReport
"
:
Page
.
generateTestReportReturnValue
;
"
Page
.
waitForDebugger
"
:
Page
.
waitForDebuggerReturnValue
;
"
Page
.
setInterceptFileChooserDialog
"
:
Page
.
setInterceptFileChooserDialogReturnValue
;
"
Performance
.
disable
"
:
Performance
.
disableReturnValue
;
"
Performance
.
enable
"
:
Performance
.
enableReturnValue
;
"
Performance
.
setTimeDomain
"
:
Performance
.
setTimeDomainReturnValue
;
"
Performance
.
getMetrics
"
:
Performance
.
getMetricsReturnValue
;
"
Security
.
disable
"
:
Security
.
disableReturnValue
;
"
Security
.
enable
"
:
Security
.
enableReturnValue
;
"
Security
.
setIgnoreCertificateErrors
"
:
Security
.
setIgnoreCertificateErrorsReturnValue
;
"
Security
.
handleCertificateError
"
:
Security
.
handleCertificateErrorReturnValue
;
"
Security
.
setOverrideCertificateErrors
"
:
Security
.
setOverrideCertificateErrorsReturnValue
;
"
ServiceWorker
.
deliverPushMessage
"
:
ServiceWorker
.
deliverPushMessageReturnValue
;
"
ServiceWorker
.
disable
"
:
ServiceWorker
.
disableReturnValue
;
"
ServiceWorker
.
dispatchSyncEvent
"
:
ServiceWorker
.
dispatchSyncEventReturnValue
;
"
ServiceWorker
.
dispatchPeriodicSyncEvent
"
:
ServiceWorker
.
dispatchPeriodicSyncEventReturnValue
;
"
ServiceWorker
.
enable
"
:
ServiceWorker
.
enableReturnValue
;
"
ServiceWorker
.
inspectWorker
"
:
ServiceWorker
.
inspectWorkerReturnValue
;
"
ServiceWorker
.
setForceUpdateOnPageLoad
"
:
ServiceWorker
.
setForceUpdateOnPageLoadReturnValue
;
"
ServiceWorker
.
skipWaiting
"
:
ServiceWorker
.
skipWaitingReturnValue
;
"
ServiceWorker
.
startWorker
"
:
ServiceWorker
.
startWorkerReturnValue
;
"
ServiceWorker
.
stopAllWorkers
"
:
ServiceWorker
.
stopAllWorkersReturnValue
;
"
ServiceWorker
.
stopWorker
"
:
ServiceWorker
.
stopWorkerReturnValue
;
"
ServiceWorker
.
unregister
"
:
ServiceWorker
.
unregisterReturnValue
;
"
ServiceWorker
.
updateRegistration
"
:
ServiceWorker
.
updateRegistrationReturnValue
;
"
Storage
.
clearDataForOrigin
"
:
Storage
.
clearDataForOriginReturnValue
;
"
Storage
.
getCookies
"
:
Storage
.
getCookiesReturnValue
;
"
Storage
.
setCookies
"
:
Storage
.
setCookiesReturnValue
;
"
Storage
.
clearCookies
"
:
Storage
.
clearCookiesReturnValue
;
"
Storage
.
getUsageAndQuota
"
:
Storage
.
getUsageAndQuotaReturnValue
;
"
Storage
.
trackCacheStorageForOrigin
"
:
Storage
.
trackCacheStorageForOriginReturnValue
;
"
Storage
.
trackIndexedDBForOrigin
"
:
Storage
.
trackIndexedDBForOriginReturnValue
;
"
Storage
.
untrackCacheStorageForOrigin
"
:
Storage
.
untrackCacheStorageForOriginReturnValue
;
"
Storage
.
untrackIndexedDBForOrigin
"
:
Storage
.
untrackIndexedDBForOriginReturnValue
;
"
SystemInfo
.
getInfo
"
:
SystemInfo
.
getInfoReturnValue
;
"
SystemInfo
.
getProcessInfo
"
:
SystemInfo
.
getProcessInfoReturnValue
;
"
Target
.
activateTarget
"
:
Target
.
activateTargetReturnValue
;
"
Target
.
attachToTarget
"
:
Target
.
attachToTargetReturnValue
;
"
Target
.
attachToBrowserTarget
"
:
Target
.
attachToBrowserTargetReturnValue
;
"
Target
.
closeTarget
"
:
Target
.
closeTargetReturnValue
;
"
Target
.
exposeDevToolsProtocol
"
:
Target
.
exposeDevToolsProtocolReturnValue
;
"
Target
.
createBrowserContext
"
:
Target
.
createBrowserContextReturnValue
;
"
Target
.
getBrowserContexts
"
:
Target
.
getBrowserContextsReturnValue
;
"
Target
.
createTarget
"
:
Target
.
createTargetReturnValue
;
"
Target
.
detachFromTarget
"
:
Target
.
detachFromTargetReturnValue
;
"
Target
.
disposeBrowserContext
"
:
Target
.
disposeBrowserContextReturnValue
;
"
Target
.
getTargetInfo
"
:
Target
.
getTargetInfoReturnValue
;
"
Target
.
getTargets
"
:
Target
.
getTargetsReturnValue
;
"
Target
.
sendMessageToTarget
"
:
Target
.
sendMessageToTargetReturnValue
;
"
Target
.
setAutoAttach
"
:
Target
.
setAutoAttachReturnValue
;
"
Target
.
setDiscoverTargets
"
:
Target
.
setDiscoverTargetsReturnValue
;
"
Target
.
setRemoteLocations
"
:
Target
.
setRemoteLocationsReturnValue
;
"
Tethering
.
bind
"
:
Tethering
.
bindReturnValue
;
"
Tethering
.
unbind
"
:
Tethering
.
unbindReturnValue
;
"
Tracing
.
end
"
:
Tracing
.
endReturnValue
;
"
Tracing
.
getCategories
"
:
Tracing
.
getCategoriesReturnValue
;
"
Tracing
.
recordClockSyncMarker
"
:
Tracing
.
recordClockSyncMarkerReturnValue
;
"
Tracing
.
requestMemoryDump
"
:
Tracing
.
requestMemoryDumpReturnValue
;
"
Tracing
.
start
"
:
Tracing
.
startReturnValue
;
"
Fetch
.
disable
"
:
Fetch
.
disableReturnValue
;
"
Fetch
.
enable
"
:
Fetch
.
enableReturnValue
;
"
Fetch
.
failRequest
"
:
Fetch
.
failRequestReturnValue
;
"
Fetch
.
fulfillRequest
"
:
Fetch
.
fulfillRequestReturnValue
;
"
Fetch
.
continueRequest
"
:
Fetch
.
continueRequestReturnValue
;
"
Fetch
.
continueWithAuth
"
:
Fetch
.
continueWithAuthReturnValue
;
"
Fetch
.
getResponseBody
"
:
Fetch
.
getResponseBodyReturnValue
;
"
Fetch
.
takeResponseBodyAsStream
"
:
Fetch
.
takeResponseBodyAsStreamReturnValue
;
"
WebAudio
.
enable
"
:
WebAudio
.
enableReturnValue
;
"
WebAudio
.
disable
"
:
WebAudio
.
disableReturnValue
;
"
WebAudio
.
getRealtimeData
"
:
WebAudio
.
getRealtimeDataReturnValue
;
"
WebAuthn
.
enable
"
:
WebAuthn
.
enableReturnValue
;
"
WebAuthn
.
disable
"
:
WebAuthn
.
disableReturnValue
;
"
WebAuthn
.
addVirtualAuthenticator
"
:
WebAuthn
.
addVirtualAuthenticatorReturnValue
;
"
WebAuthn
.
removeVirtualAuthenticator
"
:
WebAuthn
.
removeVirtualAuthenticatorReturnValue
;
"
WebAuthn
.
addCredential
"
:
WebAuthn
.
addCredentialReturnValue
;
"
WebAuthn
.
getCredential
"
:
WebAuthn
.
getCredentialReturnValue
;
"
WebAuthn
.
getCredentials
"
:
WebAuthn
.
getCredentialsReturnValue
;
"
WebAuthn
.
removeCredential
"
:
WebAuthn
.
removeCredentialReturnValue
;
"
WebAuthn
.
clearCredentials
"
:
WebAuthn
.
clearCredentialsReturnValue
;
"
WebAuthn
.
setUserVerified
"
:
WebAuthn
.
setUserVerifiedReturnValue
;
"
Media
.
enable
"
:
Media
.
enableReturnValue
;
"
Media
.
disable
"
:
Media
.
disableReturnValue
;
"
Console
.
clearMessages
"
:
Console
.
clearMessagesReturnValue
;
"
Console
.
disable
"
:
Console
.
disableReturnValue
;
"
Console
.
enable
"
:
Console
.
enableReturnValue
;
"
Debugger
.
continueToLocation
"
:
Debugger
.
continueToLocationReturnValue
;
"
Debugger
.
disable
"
:
Debugger
.
disableReturnValue
;
"
Debugger
.
enable
"
:
Debugger
.
enableReturnValue
;
"
Debugger
.
evaluateOnCallFrame
"
:
Debugger
.
evaluateOnCallFrameReturnValue
;
"
Debugger
.
getPossibleBreakpoints
"
:
Debugger
.
getPossibleBreakpointsReturnValue
;
"
Debugger
.
getScriptSource
"
:
Debugger
.
getScriptSourceReturnValue
;
"
Debugger
.
getWasmBytecode
"
:
Debugger
.
getWasmBytecodeReturnValue
;
"
Debugger
.
getStackTrace
"
:
Debugger
.
getStackTraceReturnValue
;
"
Debugger
.
pause
"
:
Debugger
.
pauseReturnValue
;
"
Debugger
.
pauseOnAsyncCall
"
:
Debugger
.
pauseOnAsyncCallReturnValue
;
"
Debugger
.
removeBreakpoint
"
:
Debugger
.
removeBreakpointReturnValue
;
"
Debugger
.
restartFrame
"
:
Debugger
.
restartFrameReturnValue
;
"
Debugger
.
resume
"
:
Debugger
.
resumeReturnValue
;
"
Debugger
.
searchInContent
"
:
Debugger
.
searchInContentReturnValue
;
"
Debugger
.
setAsyncCallStackDepth
"
:
Debugger
.
setAsyncCallStackDepthReturnValue
;
"
Debugger
.
setBlackboxPatterns
"
:
Debugger
.
setBlackboxPatternsReturnValue
;
"
Debugger
.
setBlackboxedRanges
"
:
Debugger
.
setBlackboxedRangesReturnValue
;
"
Debugger
.
setBreakpoint
"
:
Debugger
.
setBreakpointReturnValue
;
"
Debugger
.
setInstrumentationBreakpoint
"
:
Debugger
.
setInstrumentationBreakpointReturnValue
;
"
Debugger
.
setBreakpointByUrl
"
:
Debugger
.
setBreakpointByUrlReturnValue
;
"
Debugger
.
setBreakpointOnFunctionCall
"
:
Debugger
.
setBreakpointOnFunctionCallReturnValue
;
"
Debugger
.
setBreakpointsActive
"
:
Debugger
.
setBreakpointsActiveReturnValue
;
"
Debugger
.
setPauseOnExceptions
"
:
Debugger
.
setPauseOnExceptionsReturnValue
;
"
Debugger
.
setReturnValue
"
:
Debugger
.
setReturnValueReturnValue
;
"
Debugger
.
setScriptSource
"
:
Debugger
.
setScriptSourceReturnValue
;
"
Debugger
.
setSkipAllPauses
"
:
Debugger
.
setSkipAllPausesReturnValue
;
"
Debugger
.
setVariableValue
"
:
Debugger
.
setVariableValueReturnValue
;
"
Debugger
.
stepInto
"
:
Debugger
.
stepIntoReturnValue
;
"
Debugger
.
stepOut
"
:
Debugger
.
stepOutReturnValue
;
"
Debugger
.
stepOver
"
:
Debugger
.
stepOverReturnValue
;
"
HeapProfiler
.
addInspectedHeapObject
"
:
HeapProfiler
.
addInspectedHeapObjectReturnValue
;
"
HeapProfiler
.
collectGarbage
"
:
HeapProfiler
.
collectGarbageReturnValue
;
"
HeapProfiler
.
disable
"
:
HeapProfiler
.
disableReturnValue
;
"
HeapProfiler
.
enable
"
:
HeapProfiler
.
enableReturnValue
;
"
HeapProfiler
.
getHeapObjectId
"
:
HeapProfiler
.
getHeapObjectIdReturnValue
;
"
HeapProfiler
.
getObjectByHeapObjectId
"
:
HeapProfiler
.
getObjectByHeapObjectIdReturnValue
;
"
HeapProfiler
.
getSamplingProfile
"
:
HeapProfiler
.
getSamplingProfileReturnValue
;
"
HeapProfiler
.
startSampling
"
:
HeapProfiler
.
startSamplingReturnValue
;
"
HeapProfiler
.
startTrackingHeapObjects
"
:
HeapProfiler
.
startTrackingHeapObjectsReturnValue
;
"
HeapProfiler
.
stopSampling
"
:
HeapProfiler
.
stopSamplingReturnValue
;
"
HeapProfiler
.
stopTrackingHeapObjects
"
:
HeapProfiler
.
stopTrackingHeapObjectsReturnValue
;
"
HeapProfiler
.
takeHeapSnapshot
"
:
HeapProfiler
.
takeHeapSnapshotReturnValue
;
"
Profiler
.
disable
"
:
Profiler
.
disableReturnValue
;
"
Profiler
.
enable
"
:
Profiler
.
enableReturnValue
;
"
Profiler
.
getBestEffortCoverage
"
:
Profiler
.
getBestEffortCoverageReturnValue
;
"
Profiler
.
setSamplingInterval
"
:
Profiler
.
setSamplingIntervalReturnValue
;
"
Profiler
.
start
"
:
Profiler
.
startReturnValue
;
"
Profiler
.
startPreciseCoverage
"
:
Profiler
.
startPreciseCoverageReturnValue
;
"
Profiler
.
startTypeProfile
"
:
Profiler
.
startTypeProfileReturnValue
;
"
Profiler
.
stop
"
:
Profiler
.
stopReturnValue
;
"
Profiler
.
stopPreciseCoverage
"
:
Profiler
.
stopPreciseCoverageReturnValue
;
"
Profiler
.
stopTypeProfile
"
:
Profiler
.
stopTypeProfileReturnValue
;
"
Profiler
.
takePreciseCoverage
"
:
Profiler
.
takePreciseCoverageReturnValue
;
"
Profiler
.
takeTypeProfile
"
:
Profiler
.
takeTypeProfileReturnValue
;
"
Profiler
.
enableRuntimeCallStats
"
:
Profiler
.
enableRuntimeCallStatsReturnValue
;
"
Profiler
.
disableRuntimeCallStats
"
:
Profiler
.
disableRuntimeCallStatsReturnValue
;
"
Profiler
.
getRuntimeCallStats
"
:
Profiler
.
getRuntimeCallStatsReturnValue
;
"
Runtime
.
awaitPromise
"
:
Runtime
.
awaitPromiseReturnValue
;
"
Runtime
.
callFunctionOn
"
:
Runtime
.
callFunctionOnReturnValue
;
"
Runtime
.
compileScript
"
:
Runtime
.
compileScriptReturnValue
;
"
Runtime
.
disable
"
:
Runtime
.
disableReturnValue
;
"
Runtime
.
discardConsoleEntries
"
:
Runtime
.
discardConsoleEntriesReturnValue
;
"
Runtime
.
enable
"
:
Runtime
.
enableReturnValue
;
"
Runtime
.
evaluate
"
:
Runtime
.
evaluateReturnValue
;
"
Runtime
.
getIsolateId
"
:
Runtime
.
getIsolateIdReturnValue
;
"
Runtime
.
getHeapUsage
"
:
Runtime
.
getHeapUsageReturnValue
;
"
Runtime
.
getProperties
"
:
Runtime
.
getPropertiesReturnValue
;
"
Runtime
.
globalLexicalScopeNames
"
:
Runtime
.
globalLexicalScopeNamesReturnValue
;
"
Runtime
.
queryObjects
"
:
Runtime
.
queryObjectsReturnValue
;
"
Runtime
.
releaseObject
"
:
Runtime
.
releaseObjectReturnValue
;
"
Runtime
.
releaseObjectGroup
"
:
Runtime
.
releaseObjectGroupReturnValue
;
"
Runtime
.
runIfWaitingForDebugger
"
:
Runtime
.
runIfWaitingForDebuggerReturnValue
;
"
Runtime
.
runScript
"
:
Runtime
.
runScriptReturnValue
;
"
Runtime
.
setAsyncCallStackDepth
"
:
Runtime
.
setAsyncCallStackDepthReturnValue
;
"
Runtime
.
setCustomObjectFormatterEnabled
"
:
Runtime
.
setCustomObjectFormatterEnabledReturnValue
;
"
Runtime
.
setMaxCallStackSizeToCapture
"
:
Runtime
.
setMaxCallStackSizeToCaptureReturnValue
;
"
Runtime
.
terminateExecution
"
:
Runtime
.
terminateExecutionReturnValue
;
"
Runtime
.
addBinding
"
:
Runtime
.
addBindingReturnValue
;
"
Runtime
.
removeBinding
"
:
Runtime
.
removeBindingReturnValue
;
"
Schema
.
getDomains
"
:
Schema
.
getDomainsReturnValue
;
}
}
}
export
default
Protocol
;
