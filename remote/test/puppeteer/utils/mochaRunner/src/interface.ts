import
Mocha
from
'
mocha
'
;
import
commonInterface
from
'
mocha
/
lib
/
interfaces
/
common
'
;
import
{
getTestId
}
from
'
.
/
utils
.
js
'
;
type
SuiteFunction
=
(
(
this
:
Mocha
.
Suite
)
=
>
void
)
|
undefined
;
type
ExclusiveSuiteFunction
=
(
this
:
Mocha
.
Suite
)
=
>
void
;
const
skippedTests
:
Array
<
{
testIdPattern
:
string
;
skip
:
true
}
>
=
process
.
env
[
'
PUPPETEER_SKIPPED_TEST_CONFIG
'
]
?
JSON
.
parse
(
process
.
env
[
'
PUPPETEER_SKIPPED_TEST_CONFIG
'
]
)
:
[
]
;
skippedTests
.
reverse
(
)
;
function
shouldSkipTest
(
test
:
Mocha
.
Test
)
:
boolean
{
const
testIdForFileName
=
getTestId
(
test
.
file
!
)
;
const
testIdForTestName
=
getTestId
(
test
.
file
!
test
.
fullTitle
(
)
)
;
const
defintion
=
skippedTests
.
find
(
skippedTest
=
>
{
return
(
'
'
=
=
=
skippedTest
.
testIdPattern
|
|
testIdForFileName
=
=
=
skippedTest
.
testIdPattern
|
|
testIdForTestName
=
=
=
skippedTest
.
testIdPattern
)
;
}
)
;
if
(
defintion
&
&
defintion
.
skip
)
{
return
true
;
}
return
false
;
}
function
customBDDInterface
(
suite
:
Mocha
.
Suite
)
{
const
suites
=
[
suite
]
;
suite
.
on
(
Mocha
.
Suite
.
constants
.
EVENT_FILE_PRE_REQUIRE
function
(
context
file
mocha
)
{
const
common
=
commonInterface
(
suites
context
mocha
)
;
context
[
'
before
'
]
=
common
.
before
;
context
[
'
after
'
]
=
common
.
after
;
context
[
'
beforeEach
'
]
=
common
.
beforeEach
;
context
[
'
afterEach
'
]
=
common
.
afterEach
;
if
(
mocha
.
options
.
delay
)
{
context
[
'
run
'
]
=
common
.
runWithSuite
(
suite
)
;
}
function
describe
(
title
:
string
fn
:
SuiteFunction
)
{
return
common
.
suite
.
create
(
{
title
:
title
file
:
file
fn
:
fn
}
)
;
}
describe
.
only
=
function
(
title
:
string
fn
:
ExclusiveSuiteFunction
)
{
return
common
.
suite
.
only
(
{
title
:
title
file
:
file
fn
:
fn
}
)
;
}
;
describe
.
skip
=
function
(
title
:
string
fn
:
SuiteFunction
)
{
return
common
.
suite
.
skip
(
{
title
:
title
file
:
file
fn
:
fn
}
)
;
}
;
context
[
'
describe
'
]
=
describe
;
function
it
(
title
:
string
fn
:
Mocha
.
TestFunction
)
{
const
suite
=
suites
[
0
]
!
;
const
test
=
new
Mocha
.
Test
(
title
suite
.
isPending
(
)
?
undefined
:
fn
)
;
test
.
file
=
file
;
test
.
parent
=
suite
;
if
(
shouldSkipTest
(
test
)
)
{
const
test
=
new
Mocha
.
Test
(
title
)
;
test
.
file
=
file
;
suite
.
addTest
(
test
)
;
return
test
;
}
else
{
suite
.
addTest
(
test
)
;
return
test
;
}
}
it
.
only
=
function
(
title
:
string
fn
:
Mocha
.
TestFunction
)
{
return
common
.
test
.
only
(
mocha
context
[
'
it
'
]
(
title
fn
)
)
;
}
;
it
.
skip
=
function
(
title
:
string
)
{
return
context
[
'
it
'
]
(
title
)
;
}
;
context
.
it
=
it
;
}
)
;
}
customBDDInterface
.
description
=
'
Custom
BDD
'
;
module
.
exports
=
customBDDInterface
;
