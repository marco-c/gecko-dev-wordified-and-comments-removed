class
Documentation
{
constructor
(
classesArray
)
{
this
.
classesArray
=
classesArray
;
this
.
classes
=
new
Map
(
)
;
for
(
const
cls
of
classesArray
)
this
.
classes
.
set
(
cls
.
name
cls
)
;
}
}
Documentation
.
Class
=
class
{
constructor
(
name
membersArray
extendsName
=
null
comment
=
'
'
)
{
this
.
name
=
name
;
this
.
membersArray
=
membersArray
;
this
.
members
=
new
Map
(
)
;
this
.
properties
=
new
Map
(
)
;
this
.
propertiesArray
=
[
]
;
this
.
methods
=
new
Map
(
)
;
this
.
methodsArray
=
[
]
;
this
.
events
=
new
Map
(
)
;
this
.
eventsArray
=
[
]
;
this
.
comment
=
comment
;
this
.
extends
=
extendsName
;
for
(
const
member
of
membersArray
)
{
this
.
members
.
set
(
member
.
name
member
)
;
if
(
member
.
kind
=
=
=
'
method
'
)
{
this
.
methods
.
set
(
member
.
name
member
)
;
this
.
methodsArray
.
push
(
member
)
;
}
else
if
(
member
.
kind
=
=
=
'
property
'
)
{
this
.
properties
.
set
(
member
.
name
member
)
;
this
.
propertiesArray
.
push
(
member
)
;
}
else
if
(
member
.
kind
=
=
=
'
event
'
)
{
this
.
events
.
set
(
member
.
name
member
)
;
this
.
eventsArray
.
push
(
member
)
;
}
}
}
}
;
Documentation
.
Member
=
class
{
constructor
(
kind
name
type
argsArray
comment
=
'
'
returnComment
=
'
'
required
=
true
)
{
this
.
kind
=
kind
;
this
.
name
=
name
;
this
.
type
=
type
;
this
.
comment
=
comment
;
this
.
returnComment
=
returnComment
;
this
.
argsArray
=
argsArray
;
this
.
required
=
required
;
this
.
args
=
new
Map
(
)
;
for
(
const
arg
of
argsArray
)
this
.
args
.
set
(
arg
.
name
arg
)
;
}
static
createMethod
(
name
argsArray
returnType
returnComment
comment
)
{
return
new
Documentation
.
Member
(
'
method
'
name
returnType
argsArray
comment
returnComment
)
;
}
static
createProperty
(
name
type
comment
required
)
{
return
new
Documentation
.
Member
(
'
property
'
name
type
[
]
comment
undefined
required
)
;
}
static
createEvent
(
name
type
=
null
comment
)
{
return
new
Documentation
.
Member
(
'
event
'
name
type
[
]
comment
)
;
}
}
;
Documentation
.
Type
=
class
{
constructor
(
name
properties
=
[
]
)
{
this
.
name
=
name
;
this
.
properties
=
properties
;
}
}
;
module
.
exports
=
Documentation
;
