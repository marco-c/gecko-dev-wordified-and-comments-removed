module
.
exports
=
{
root
:
true
env
:
{
node
:
true
es6
:
true
}
parser
:
'
typescript
-
eslint
/
parser
'
plugins
:
[
'
mocha
'
'
typescript
-
eslint
'
'
import
'
]
extends
:
[
'
plugin
:
prettier
/
recommended
'
]
rules
:
{
curly
:
[
2
'
all
'
]
'
arrow
-
body
-
style
'
:
[
'
error
'
'
always
'
]
'
prettier
/
prettier
'
:
2
'
spaced
-
comment
'
:
[
2
'
always
'
{
markers
:
[
'
*
'
]
}
]
eqeqeq
:
[
2
]
'
accessor
-
pairs
'
:
[
2
{
getWithoutSet
:
false
setWithoutGet
:
false
}
]
'
new
-
parens
'
:
2
'
func
-
call
-
spacing
'
:
2
'
prefer
-
const
'
:
2
'
max
-
len
'
:
[
2
{
code
:
200
comments
:
90
ignoreTemplateLiterals
:
true
ignoreUrls
:
true
ignoreStrings
:
true
ignoreRegExpLiterals
:
true
}
]
'
no
-
var
'
:
2
'
no
-
with
'
:
2
'
no
-
multi
-
str
'
:
2
'
no
-
caller
'
:
2
'
no
-
implied
-
eval
'
:
2
'
no
-
labels
'
:
2
'
no
-
new
-
object
'
:
2
'
no
-
octal
-
escape
'
:
2
'
no
-
self
-
compare
'
:
2
'
no
-
shadow
-
restricted
-
names
'
:
2
'
no
-
cond
-
assign
'
:
2
'
no
-
debugger
'
:
2
'
no
-
dupe
-
keys
'
:
2
'
no
-
duplicate
-
case
'
:
2
'
no
-
empty
-
character
-
class
'
:
2
'
no
-
unreachable
'
:
2
'
no
-
unsafe
-
negation
'
:
2
radix
:
2
'
valid
-
typeof
'
:
2
'
no
-
unused
-
vars
'
:
[
2
{
args
:
'
none
'
vars
:
'
local
'
varsIgnorePattern
:
'
(
[
fx
]
?
describe
|
[
fx
]
?
it
|
beforeAll
|
beforeEach
|
afterAll
|
afterEach
)
'
}
]
'
no
-
implicit
-
globals
'
:
[
2
]
'
require
-
yield
'
:
2
'
template
-
curly
-
spacing
'
:
[
2
'
never
'
]
'
mocha
/
no
-
exclusive
-
tests
'
:
'
error
'
'
no
-
restricted
-
imports
'
:
[
'
error
'
{
patterns
:
[
'
*
Events
'
]
paths
:
[
{
name
:
'
mitt
'
message
:
'
Import
mitt
from
the
vendored
location
:
third_party
/
mitt
/
index
.
js
'
}
]
}
]
'
import
/
extensions
'
:
[
'
error
'
'
ignorePackages
'
]
'
import
/
order
'
:
[
'
error
'
{
'
newlines
-
between
'
:
'
always
'
alphabetize
:
{
order
:
'
asc
'
caseInsensitive
:
true
}
}
]
'
no
-
restricted
-
syntax
'
:
[
'
error
'
]
}
overrides
:
[
{
files
:
[
'
*
.
ts
'
]
extends
:
[
'
plugin
:
typescript
-
eslint
/
eslint
-
recommended
'
'
plugin
:
typescript
-
eslint
/
recommended
'
]
plugins
:
[
'
eslint
-
plugin
-
tsdoc
'
'
local
'
]
rules
:
{
'
local
/
prettier
-
comments
'
:
2
curly
:
[
2
'
all
'
]
'
arrow
-
body
-
style
'
:
[
'
error
'
'
always
'
]
'
tsdoc
/
syntax
'
:
2
'
typescript
-
eslint
/
array
-
type
'
:
[
'
error
'
{
default
:
'
array
-
simple
'
}
]
'
no
-
unused
-
vars
'
:
0
'
typescript
-
eslint
/
no
-
unused
-
vars
'
:
[
'
error
'
{
argsIgnorePattern
:
'
^
_
'
}
]
'
func
-
call
-
spacing
'
:
0
'
typescript
-
eslint
/
func
-
call
-
spacing
'
:
2
semi
:
0
'
typescript
-
eslint
/
semi
'
:
2
'
typescript
-
eslint
/
no
-
empty
-
function
'
:
0
'
typescript
-
eslint
/
no
-
use
-
before
-
define
'
:
0
'
typescript
-
eslint
/
no
-
explicit
-
any
'
:
0
'
typescript
-
eslint
/
explicit
-
function
-
return
-
type
'
:
0
'
typescript
-
eslint
/
no
-
non
-
null
-
assertion
'
:
0
'
typescript
-
eslint
/
ban
-
types
'
:
[
'
error
'
{
extendDefaults
:
true
types
:
{
Function
:
false
}
}
]
'
typescript
-
eslint
/
explicit
-
module
-
boundary
-
types
'
:
2
'
no
-
restricted
-
syntax
'
:
[
'
error
'
{
selector
:
"
CallExpression
[
callee
.
name
=
'
require
'
]
"
message
:
'
require
statements
are
not
allowed
.
Use
import
.
'
}
]
}
}
]
}
;
