import
{
Connection
}
from
'
.
.
/
lib
/
esm
/
puppeteer
/
common
/
Connection
.
js
'
;
import
{
BrowserWebSocketTransport
}
from
'
.
.
/
lib
/
esm
/
puppeteer
/
common
/
BrowserWebSocketTransport
.
js
'
;
import
puppeteer
from
'
.
.
/
lib
/
esm
/
puppeteer
/
web
.
js
'
;
import
expect
from
'
.
.
/
node_modules
/
expect
/
build
-
es5
/
index
.
js
'
;
import
{
getWebSocketEndpoint
}
from
'
.
/
helper
.
js
'
;
describe
(
'
creating
a
Connection
'
(
)
=
>
{
it
(
'
can
create
a
real
connection
to
the
backend
and
send
messages
'
async
(
)
=
>
{
const
wsUrl
=
getWebSocketEndpoint
(
)
;
const
transport
=
await
BrowserWebSocketTransport
.
create
(
wsUrl
)
;
const
connection
=
new
Connection
(
wsUrl
transport
)
;
const
result
=
await
connection
.
send
(
'
Browser
.
getVersion
'
)
;
expect
(
result
)
.
toEqual
(
{
protocolVersion
:
expect
.
any
(
String
)
jsVersion
:
expect
.
any
(
String
)
revision
:
expect
.
any
(
String
)
userAgent
:
expect
.
any
(
String
)
product
:
expect
.
any
(
String
)
}
)
;
}
)
;
}
)
;
describe
(
'
puppeteer
.
connect
'
(
)
=
>
{
it
(
'
can
connect
over
websocket
and
make
requests
to
the
backend
'
async
(
)
=
>
{
const
wsUrl
=
getWebSocketEndpoint
(
)
;
const
browser
=
await
puppeteer
.
connect
(
{
browserWSEndpoint
:
wsUrl
}
)
;
const
version
=
await
browser
.
version
(
)
;
const
versionLooksCorrect
=
/
.
+
Chrome
\
/
\
d
{
2
}
/
.
test
(
version
)
;
expect
(
version
)
.
toEqual
(
expect
.
any
(
String
)
)
;
expect
(
versionLooksCorrect
)
.
toEqual
(
true
)
;
}
)
;
}
)
;
