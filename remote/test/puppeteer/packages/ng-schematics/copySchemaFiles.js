const
fs
=
require
(
'
fs
/
promises
'
)
;
const
path
=
require
(
'
path
'
)
;
async
function
findSchemaFiles
(
directory
files
=
[
]
)
{
const
items
=
await
fs
.
readdir
(
directory
)
;
const
promises
=
[
]
;
const
regEx
=
/
^
.
*
\
.
[
^
\
s
]
*
/
;
items
.
forEach
(
item
=
>
{
if
(
!
item
.
match
(
regEx
)
)
{
promises
.
push
(
findSchemaFiles
(
{
directory
}
/
{
item
}
files
)
)
;
}
else
if
(
item
.
endsWith
(
'
.
json
'
)
|
|
directory
.
includes
(
'
files
'
)
)
{
files
.
push
(
{
directory
}
/
{
item
}
)
;
}
}
)
;
await
Promise
.
all
(
promises
)
;
return
files
;
}
async
function
copySchemaFiles
(
)
{
const
srcDir
=
'
.
/
src
'
;
const
outputDir
=
'
.
/
lib
'
;
const
files
=
await
findSchemaFiles
(
srcDir
)
;
const
moves
=
files
.
map
(
file
=
>
{
const
to
=
file
.
replace
(
srcDir
outputDir
)
;
return
{
from
:
file
to
}
;
}
)
;
await
Promise
.
all
(
moves
.
map
(
(
{
to
}
)
=
>
{
const
dir
=
path
.
dirname
(
to
)
;
return
fs
.
mkdir
(
dir
{
recursive
:
true
}
)
;
}
)
)
;
await
Promise
.
all
(
moves
.
map
(
(
{
from
to
}
)
=
>
{
return
fs
.
copyFile
(
from
to
)
;
}
)
)
;
}
copySchemaFiles
(
)
;
