const
{
spawn
}
=
require
(
'
child_process
'
)
;
const
{
readFile
writeFile
}
=
require
(
'
fs
/
promises
'
)
;
const
{
join
}
=
require
(
'
path
'
)
;
const
{
cwd
}
=
require
(
'
process
'
)
;
const
isInit
=
process
.
argv
.
indexOf
(
'
-
-
init
'
)
!
=
=
-
1
;
const
isBuild
=
process
.
argv
.
indexOf
(
'
-
-
build
'
)
!
=
=
-
1
;
const
commands
=
{
build
:
[
'
npm
run
build
'
]
createSandbox
:
[
'
npx
ng
new
sandbox
-
-
defaults
'
]
runSchematics
:
[
{
command
:
'
npm
run
schematics
'
options
:
{
cwd
:
join
(
cwd
(
)
'
/
sandbox
/
'
)
}
}
]
}
;
const
scripts
=
{
'
delete
:
file
'
:
'
rm
-
f
.
puppeteerrc
.
cjs
&
&
rm
-
f
tsconfig
.
e2e
.
json
&
&
rm
-
R
-
f
e2e
/
'
schematics
:
'
npm
run
delete
:
file
&
&
schematics
.
.
/
:
ng
-
add
-
-
dry
-
run
=
false
'
}
;
async
function
executeCommand
(
commands
)
{
for
(
const
toExecute
of
commands
)
{
let
executable
;
let
args
;
let
options
=
{
}
;
if
(
typeof
toExecute
=
=
=
'
string
'
)
{
[
executable
.
.
.
args
]
=
toExecute
.
split
(
'
'
)
;
}
else
{
[
executable
.
.
.
args
]
=
toExecute
.
command
.
split
(
'
'
)
;
options
=
toExecute
.
options
?
?
{
}
;
}
await
new
Promise
(
(
resolve
reject
)
=
>
{
const
createProcess
=
spawn
(
executable
args
{
stdio
:
'
inherit
'
shell
:
true
.
.
.
options
}
)
;
createProcess
.
on
(
'
error
'
message
=
>
{
console
.
error
(
message
)
;
reject
(
message
)
;
}
)
;
createProcess
.
on
(
'
exit
'
code
=
>
{
if
(
code
=
=
=
0
)
{
resolve
(
true
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
)
;
}
}
async
function
main
(
)
{
if
(
isInit
)
{
await
executeCommand
(
commands
.
createSandbox
)
;
const
packageJsonFile
=
join
(
cwd
(
)
'
/
sandbox
/
package
.
json
'
)
;
const
packageJson
=
JSON
.
parse
(
await
readFile
(
packageJsonFile
)
)
;
packageJson
[
'
scripts
'
]
=
{
.
.
.
packageJson
[
'
scripts
'
]
.
.
.
scripts
}
;
await
writeFile
(
packageJsonFile
JSON
.
stringify
(
packageJson
null
2
)
)
;
}
else
{
if
(
isBuild
)
{
await
executeCommand
(
commands
.
build
)
;
}
await
executeCommand
(
commands
.
runSchematics
)
;
}
}
main
(
)
.
catch
(
(
)
=
>
{
console
.
log
(
'
\
n
'
)
;
}
)
;
