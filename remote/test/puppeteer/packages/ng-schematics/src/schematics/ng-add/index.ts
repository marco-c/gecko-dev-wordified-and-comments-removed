import
{
chain
Rule
SchematicContext
Tree
}
from
'
angular
-
devkit
/
schematics
'
;
import
{
NodePackageInstallTask
}
from
'
angular
-
devkit
/
schematics
/
tasks
'
;
import
{
concatMap
map
scan
}
from
'
rxjs
/
operators
'
;
import
{
of
}
from
'
rxjs
'
;
import
{
addBaseFiles
addFrameworkFiles
getNgCommandName
}
from
'
.
.
/
utils
/
files
.
js
'
;
import
{
addPackageJsonDependencies
addPackageJsonScripts
getDependenciesFromOptions
getPackageLatestNpmVersion
DependencyType
type
NodePackage
updateAngularJsonScripts
}
from
'
.
.
/
utils
/
packages
.
js
'
;
import
{
type
SchematicsOptions
}
from
'
.
.
/
utils
/
types
.
js
'
;
import
{
getAngularConfig
}
from
'
.
.
/
utils
/
json
.
js
'
;
export
function
ngAdd
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
=
>
{
return
chain
(
[
addDependencies
(
options
)
addPuppeteerFiles
(
options
)
addOtherFiles
(
options
)
updateScripts
(
options
)
updateAngularConfig
(
options
)
]
)
(
tree
context
)
;
}
;
}
function
addDependencies
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
=
>
{
context
.
logger
.
debug
(
'
Adding
dependencies
to
"
package
.
json
"
'
)
;
const
dependencies
=
getDependenciesFromOptions
(
options
)
;
return
of
(
.
.
.
dependencies
)
.
pipe
(
concatMap
(
(
packageName
:
string
)
=
>
{
return
getPackageLatestNpmVersion
(
packageName
)
;
}
)
scan
(
(
array
nodePackage
)
=
>
{
array
.
push
(
nodePackage
)
;
return
array
;
}
[
]
as
NodePackage
[
]
)
map
(
packages
=
>
{
context
.
logger
.
debug
(
'
Updating
dependencies
.
.
.
'
)
;
addPackageJsonDependencies
(
tree
packages
DependencyType
.
Dev
)
;
context
.
addTask
(
new
NodePackageInstallTask
(
)
)
;
return
tree
;
}
)
)
;
}
;
}
function
updateScripts
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
:
Tree
=
>
{
context
.
logger
.
debug
(
'
Updating
"
package
.
json
"
scripts
'
)
;
const
angularJson
=
getAngularConfig
(
tree
)
;
const
projects
=
Object
.
keys
(
angularJson
[
'
projects
'
]
)
;
if
(
projects
.
length
=
=
=
1
)
{
const
name
=
getNgCommandName
(
options
)
;
const
prefix
=
options
.
isDefaultTester
?
'
'
:
run
{
projects
[
0
]
}
:
;
return
addPackageJsonScripts
(
tree
[
{
name
script
:
ng
{
prefix
}
{
name
}
}
]
)
;
}
return
tree
;
}
;
}
function
addPuppeteerFiles
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
=
>
{
context
.
logger
.
debug
(
'
Adding
Puppeteer
base
files
.
'
)
;
const
{
projects
}
=
getAngularConfig
(
tree
)
;
return
addBaseFiles
(
tree
context
{
projects
options
}
)
;
}
;
}
function
addOtherFiles
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
=
>
{
context
.
logger
.
debug
(
'
Adding
Puppeteer
additional
files
.
'
)
;
const
{
projects
}
=
getAngularConfig
(
tree
)
;
return
addFrameworkFiles
(
tree
context
{
projects
options
}
)
;
}
;
}
function
updateAngularConfig
(
options
:
SchematicsOptions
)
:
Rule
{
return
(
tree
:
Tree
context
:
SchematicContext
)
:
Tree
=
>
{
context
.
logger
.
debug
(
'
Updating
"
angular
.
json
"
.
'
)
;
return
updateAngularJsonScripts
(
tree
options
)
;
}
;
}
