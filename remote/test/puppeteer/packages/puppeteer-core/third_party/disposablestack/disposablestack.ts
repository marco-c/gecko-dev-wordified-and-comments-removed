import
'
disposablestack
/
auto
'
;
declare
global
{
class
DisposableStack
implements
Disposable
{
constructor
(
)
;
get
disposed
(
)
:
boolean
;
dispose
(
)
:
void
;
use
<
T
>
(
value
:
T
)
:
T
;
adopt
<
T
>
(
value
:
T
onDispose
:
(
value
:
T
)
=
>
void
)
:
T
;
defer
(
onDispose
:
(
)
=
>
void
)
:
void
;
move
(
)
:
DisposableStack
;
[
Symbol
.
dispose
]
(
)
:
void
;
}
class
AsyncDisposableStack
implements
AsyncDisposable
{
constructor
(
)
;
get
disposed
(
)
:
boolean
;
dispose
(
)
:
void
;
use
<
T
>
(
value
:
T
)
:
T
;
adopt
<
T
>
(
value
:
T
onDispose
:
(
value
:
T
)
=
>
Promise
<
void
>
)
:
T
;
defer
(
onDispose
:
(
)
=
>
Promise
<
void
>
)
:
void
;
move
(
)
:
AsyncDisposableStack
;
[
Symbol
.
asyncDispose
]
(
)
:
Promise
<
void
>
;
}
}
export
const
Symbol
=
globalThis
.
Symbol
;
export
const
DisposableStack
=
(
globalThis
as
unknown
as
{
DisposableStack
:
DisposableStack
}
)
.
DisposableStack
;
export
const
AsyncDisposableStack
=
(
globalThis
as
unknown
as
{
AsyncDisposableStack
:
AsyncDisposableStack
}
)
.
AsyncDisposableStack
;
