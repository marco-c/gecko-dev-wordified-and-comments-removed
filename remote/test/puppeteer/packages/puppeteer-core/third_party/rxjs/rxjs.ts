export
{
catchError
defaultIfEmpty
defer
delay
EMPTY
filter
first
firstValueFrom
from
fromEvent
identity
ignoreElements
map
merge
mergeMap
NEVER
noop
Observable
of
OperatorFunction
pipe
race
raceWith
retry
startWith
switchMap
tap
throwIfEmpty
timer
}
from
'
rxjs
'
;
import
{
mergeMap
from
filter
map
type
Observable
}
from
'
rxjs
'
;
export
function
filterAsync
<
T
>
(
predicate
:
(
value
:
T
)
=
>
boolean
|
PromiseLike
<
boolean
>
)
{
return
mergeMap
<
T
Observable
<
T
>
>
(
value
=
>
{
return
from
(
Promise
.
resolve
(
predicate
(
value
)
)
)
.
pipe
(
filter
(
isMatch
=
>
{
return
isMatch
;
}
)
map
(
(
)
=
>
{
return
value
;
}
)
)
;
}
)
;
}
