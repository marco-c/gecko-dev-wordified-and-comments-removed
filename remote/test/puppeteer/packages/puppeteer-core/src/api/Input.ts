import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
KeyInput
}
from
'
.
.
/
common
/
USKeyboardLayout
.
js
'
;
import
{
Point
}
from
'
.
/
ElementHandle
.
js
'
;
export
interface
KeyDownOptions
{
text
?
:
string
;
commands
?
:
string
[
]
;
}
export
interface
KeyboardTypeOptions
{
delay
?
:
number
;
}
export
type
KeyPressOptions
=
KeyDownOptions
&
KeyboardTypeOptions
;
export
class
Keyboard
{
constructor
(
)
{
}
async
down
(
key
:
KeyInput
options
?
:
Readonly
<
KeyDownOptions
>
)
:
Promise
<
void
>
;
async
down
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
up
(
key
:
KeyInput
)
:
Promise
<
void
>
;
async
up
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
sendCharacter
(
char
:
string
)
:
Promise
<
void
>
;
async
sendCharacter
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
type
(
text
:
string
options
?
:
Readonly
<
KeyboardTypeOptions
>
)
:
Promise
<
void
>
;
async
type
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
press
(
key
:
KeyInput
options
?
:
Readonly
<
KeyPressOptions
>
)
:
Promise
<
void
>
;
async
press
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
export
interface
MouseOptions
{
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
export
interface
MouseClickOptions
extends
MouseOptions
{
delay
?
:
number
;
count
?
:
number
;
}
export
interface
MouseWheelOptions
{
deltaX
?
:
number
;
deltaY
?
:
number
;
}
export
interface
MouseMoveOptions
{
steps
?
:
number
;
}
export
const
MouseButton
=
Object
.
freeze
(
{
Left
:
'
left
'
Right
:
'
right
'
Middle
:
'
middle
'
Back
:
'
back
'
Forward
:
'
forward
'
}
)
satisfies
Record
<
string
Protocol
.
Input
.
MouseButton
>
;
export
type
MouseButton
=
(
typeof
MouseButton
)
[
keyof
typeof
MouseButton
]
;
export
class
Mouse
{
constructor
(
)
{
}
async
reset
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
move
(
x
:
number
y
:
number
options
?
:
Readonly
<
MouseMoveOptions
>
)
:
Promise
<
void
>
;
async
move
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
down
(
options
?
:
Readonly
<
MouseOptions
>
)
:
Promise
<
void
>
;
async
down
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
up
(
options
?
:
Readonly
<
MouseOptions
>
)
:
Promise
<
void
>
;
async
up
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
click
(
x
:
number
y
:
number
options
?
:
Readonly
<
MouseClickOptions
>
)
:
Promise
<
void
>
;
async
click
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
wheel
(
options
?
:
Readonly
<
MouseWheelOptions
>
)
:
Promise
<
void
>
;
async
wheel
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
drag
(
start
:
Point
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
async
drag
(
)
:
Promise
<
Protocol
.
Input
.
DragData
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragEnter
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
dragEnter
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragOver
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
dragOver
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
drop
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
drop
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragAndDrop
(
start
:
Point
target
:
Point
options
?
:
{
delay
?
:
number
}
)
:
Promise
<
void
>
;
async
dragAndDrop
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
export
class
Touchscreen
{
constructor
(
)
{
}
async
tap
(
x
:
number
y
:
number
)
:
Promise
<
void
>
;
async
tap
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchStart
(
x
:
number
y
:
number
)
:
Promise
<
void
>
;
async
touchStart
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchMove
(
x
:
number
y
:
number
)
:
Promise
<
void
>
;
async
touchMove
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchEnd
(
)
:
Promise
<
void
>
;
async
touchEnd
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
