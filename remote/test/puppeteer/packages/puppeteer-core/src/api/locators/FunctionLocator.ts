import
{
Observable
defer
from
throwIfEmpty
}
from
'
.
.
/
.
.
/
.
.
/
third_party
/
rxjs
/
rxjs
.
js
'
;
import
{
Awaitable
HandleFor
}
from
'
.
.
/
.
.
/
common
/
types
.
js
'
;
import
{
Frame
}
from
'
.
.
/
Frame
.
js
'
;
import
{
Page
}
from
'
.
.
/
Page
.
js
'
;
import
{
ActionOptions
Locator
}
from
'
.
/
locators
.
js
'
;
export
class
FunctionLocator
<
T
>
extends
Locator
<
T
>
{
static
create
<
Ret
>
(
pageOrFrame
:
Page
|
Frame
func
:
(
)
=
>
Awaitable
<
Ret
>
)
:
Locator
<
Ret
>
{
return
new
FunctionLocator
<
Ret
>
(
pageOrFrame
func
)
.
setTimeout
(
'
getDefaultTimeout
'
in
pageOrFrame
?
pageOrFrame
.
getDefaultTimeout
(
)
:
pageOrFrame
.
page
(
)
.
getDefaultTimeout
(
)
)
;
}
#
pageOrFrame
:
Page
|
Frame
;
#
func
:
(
)
=
>
Awaitable
<
T
>
;
private
constructor
(
pageOrFrame
:
Page
|
Frame
func
:
(
)
=
>
Awaitable
<
T
>
)
{
super
(
)
;
this
.
#
pageOrFrame
=
pageOrFrame
;
this
.
#
func
=
func
;
}
override
_clone
(
)
:
FunctionLocator
<
T
>
{
return
new
FunctionLocator
(
this
.
#
pageOrFrame
this
.
#
func
)
;
}
_wait
(
options
?
:
Readonly
<
ActionOptions
>
)
:
Observable
<
HandleFor
<
T
>
>
{
const
signal
=
options
?
.
signal
;
return
defer
(
(
)
=
>
{
return
from
(
this
.
#
pageOrFrame
.
waitForFunction
(
this
.
#
func
{
timeout
:
this
.
timeout
signal
}
)
)
;
}
)
.
pipe
(
throwIfEmpty
(
)
)
;
}
}
