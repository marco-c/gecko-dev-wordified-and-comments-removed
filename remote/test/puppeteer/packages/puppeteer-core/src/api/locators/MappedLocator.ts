import
{
Observable
from
mergeMap
}
from
'
.
.
/
.
.
/
.
.
/
third_party
/
rxjs
/
rxjs
.
js
'
;
import
{
Awaitable
HandleFor
}
from
'
.
.
/
.
.
/
common
/
common
.
js
'
;
import
{
ActionOptions
DelegatedLocator
Locator
}
from
'
.
/
locators
.
js
'
;
export
type
Mapper
<
From
To
>
=
(
value
:
From
)
=
>
Awaitable
<
To
>
;
export
type
HandleMapper
<
From
To
>
=
(
value
:
HandleFor
<
From
>
signal
?
:
AbortSignal
)
=
>
Awaitable
<
HandleFor
<
To
>
>
;
export
class
MappedLocator
<
From
To
>
extends
DelegatedLocator
<
From
To
>
{
#
mapper
:
HandleMapper
<
From
To
>
;
constructor
(
base
:
Locator
<
From
>
mapper
:
HandleMapper
<
From
To
>
)
{
super
(
base
)
;
this
.
#
mapper
=
mapper
;
}
override
_clone
(
)
:
MappedLocator
<
From
To
>
{
return
new
MappedLocator
(
this
.
delegate
.
clone
(
)
this
.
#
mapper
)
.
copyOptions
(
this
)
;
}
override
_wait
(
options
?
:
Readonly
<
ActionOptions
>
)
:
Observable
<
HandleFor
<
To
>
>
{
return
this
.
delegate
.
_wait
(
options
)
.
pipe
(
mergeMap
(
handle
=
>
{
return
from
(
Promise
.
resolve
(
this
.
#
mapper
(
handle
options
?
.
signal
)
)
)
;
}
)
)
;
}
}
