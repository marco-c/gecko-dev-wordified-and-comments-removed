import
type
Protocol
from
'
devtools
-
protocol
'
;
import
type
{
SecurityDetails
}
from
'
.
.
/
common
/
SecurityDetails
.
js
'
;
import
type
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
type
{
HTTPRequest
}
from
'
.
/
HTTPRequest
.
js
'
;
export
interface
RemoteAddress
{
ip
?
:
string
;
port
?
:
number
;
}
export
abstract
class
HTTPResponse
{
constructor
(
)
{
}
abstract
remoteAddress
(
)
:
RemoteAddress
;
abstract
url
(
)
:
string
;
ok
(
)
:
boolean
{
const
status
=
this
.
status
(
)
;
return
status
=
=
=
0
|
|
(
status
>
=
200
&
&
status
<
=
299
)
;
}
abstract
status
(
)
:
number
;
abstract
statusText
(
)
:
string
;
abstract
headers
(
)
:
Record
<
string
string
>
;
abstract
securityDetails
(
)
:
SecurityDetails
|
null
;
abstract
timing
(
)
:
Protocol
.
Network
.
ResourceTiming
|
null
;
abstract
buffer
(
)
:
Promise
<
Buffer
>
;
async
text
(
)
:
Promise
<
string
>
{
const
content
=
await
this
.
buffer
(
)
;
return
content
.
toString
(
'
utf8
'
)
;
}
async
json
(
)
:
Promise
<
any
>
{
const
content
=
await
this
.
text
(
)
;
return
JSON
.
parse
(
content
)
;
}
abstract
request
(
)
:
HTTPRequest
;
abstract
fromCache
(
)
:
boolean
;
abstract
fromServiceWorker
(
)
:
boolean
;
abstract
frame
(
)
:
Frame
|
null
;
}
