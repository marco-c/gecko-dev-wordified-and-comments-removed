import
type
{
ChildProcess
}
from
'
node
:
child_process
'
;
import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
firstValueFrom
from
merge
raceWith
}
from
'
.
.
/
.
.
/
third_party
/
rxjs
/
rxjs
.
js
'
;
import
type
{
ProtocolType
}
from
'
.
.
/
common
/
ConnectOptions
.
js
'
;
import
type
{
Cookie
CookieData
}
from
'
.
.
/
common
/
Cookie
.
js
'
;
import
type
{
DownloadBehavior
}
from
'
.
.
/
common
/
DownloadBehavior
.
js
'
;
import
{
EventEmitter
type
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
{
debugError
fromEmitterEvent
filterAsync
timeout
fromAbortSignal
}
from
'
.
.
/
common
/
util
.
js
'
;
import
{
asyncDisposeSymbol
disposeSymbol
}
from
'
.
.
/
util
/
disposable
.
js
'
;
import
type
{
BrowserContext
}
from
'
.
/
BrowserContext
.
js
'
;
import
type
{
Page
}
from
'
.
/
Page
.
js
'
;
import
type
{
Target
}
from
'
.
/
Target
.
js
'
;
export
interface
BrowserContextOptions
{
proxyServer
?
:
string
;
proxyBypassList
?
:
string
[
]
;
downloadBehavior
?
:
DownloadBehavior
;
}
export
type
BrowserCloseCallback
=
(
)
=
>
Promise
<
void
>
|
void
;
export
type
TargetFilterCallback
=
(
target
:
Target
)
=
>
boolean
;
export
type
IsPageTargetCallback
=
(
target
:
Target
)
=
>
boolean
;
export
const
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
=
new
Map
<
Permission
Protocol
.
Browser
.
PermissionType
>
(
[
[
'
accelerometer
'
'
sensors
'
]
[
'
ambient
-
light
-
sensor
'
'
sensors
'
]
[
'
background
-
sync
'
'
backgroundSync
'
]
[
'
camera
'
'
videoCapture
'
]
[
'
clipboard
-
read
'
'
clipboardReadWrite
'
]
[
'
clipboard
-
sanitized
-
write
'
'
clipboardSanitizedWrite
'
]
[
'
clipboard
-
write
'
'
clipboardReadWrite
'
]
[
'
geolocation
'
'
geolocation
'
]
[
'
gyroscope
'
'
sensors
'
]
[
'
idle
-
detection
'
'
idleDetection
'
]
[
'
keyboard
-
lock
'
'
keyboardLock
'
]
[
'
magnetometer
'
'
sensors
'
]
[
'
microphone
'
'
audioCapture
'
]
[
'
midi
'
'
midi
'
]
[
'
notifications
'
'
notifications
'
]
[
'
payment
-
handler
'
'
paymentHandler
'
]
[
'
persistent
-
storage
'
'
durableStorage
'
]
[
'
pointer
-
lock
'
'
pointerLock
'
]
[
'
midi
-
sysex
'
'
midiSysex
'
]
]
)
;
export
type
Permission
=
|
'
accelerometer
'
|
'
ambient
-
light
-
sensor
'
|
'
background
-
sync
'
|
'
camera
'
|
'
clipboard
-
read
'
|
'
clipboard
-
sanitized
-
write
'
|
'
clipboard
-
write
'
|
'
geolocation
'
|
'
gyroscope
'
|
'
idle
-
detection
'
|
'
keyboard
-
lock
'
|
'
magnetometer
'
|
'
microphone
'
|
'
midi
-
sysex
'
|
'
midi
'
|
'
notifications
'
|
'
payment
-
handler
'
|
'
persistent
-
storage
'
|
'
pointer
-
lock
'
;
export
interface
WaitForTargetOptions
{
timeout
?
:
number
;
signal
?
:
AbortSignal
;
}
export
const
enum
BrowserEvent
{
Disconnected
=
'
disconnected
'
TargetChanged
=
'
targetchanged
'
TargetCreated
=
'
targetcreated
'
TargetDestroyed
=
'
targetdestroyed
'
TargetDiscovered
=
'
targetdiscovered
'
}
export
interface
BrowserEvents
extends
Record
<
EventType
unknown
>
{
[
BrowserEvent
.
Disconnected
]
:
undefined
;
[
BrowserEvent
.
TargetCreated
]
:
Target
;
[
BrowserEvent
.
TargetDestroyed
]
:
Target
;
[
BrowserEvent
.
TargetChanged
]
:
Target
;
[
BrowserEvent
.
TargetDiscovered
]
:
Protocol
.
Target
.
TargetInfo
;
}
export
interface
DebugInfo
{
pendingProtocolErrors
:
Error
[
]
;
}
export
abstract
class
Browser
extends
EventEmitter
<
BrowserEvents
>
{
constructor
(
)
{
super
(
)
;
}
abstract
process
(
)
:
ChildProcess
|
null
;
abstract
createBrowserContext
(
options
?
:
BrowserContextOptions
)
:
Promise
<
BrowserContext
>
;
abstract
browserContexts
(
)
:
BrowserContext
[
]
;
abstract
defaultBrowserContext
(
)
:
BrowserContext
;
abstract
wsEndpoint
(
)
:
string
;
abstract
newPage
(
)
:
Promise
<
Page
>
;
abstract
targets
(
)
:
Target
[
]
;
abstract
target
(
)
:
Target
;
async
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
:
WaitForTargetOptions
=
{
}
)
:
Promise
<
Target
>
{
const
{
timeout
:
ms
=
30000
signal
}
=
options
;
return
await
firstValueFrom
(
merge
(
fromEmitterEvent
(
this
BrowserEvent
.
TargetCreated
)
fromEmitterEvent
(
this
BrowserEvent
.
TargetChanged
)
from
(
this
.
targets
(
)
)
)
.
pipe
(
filterAsync
(
predicate
)
raceWith
(
fromAbortSignal
(
signal
)
timeout
(
ms
)
)
)
)
;
}
async
pages
(
)
:
Promise
<
Page
[
]
>
{
const
contextPages
=
await
Promise
.
all
(
this
.
browserContexts
(
)
.
map
(
context
=
>
{
return
context
.
pages
(
)
;
}
)
)
;
return
contextPages
.
reduce
(
(
acc
x
)
=
>
{
return
acc
.
concat
(
x
)
;
}
[
]
)
;
}
abstract
version
(
)
:
Promise
<
string
>
;
abstract
userAgent
(
)
:
Promise
<
string
>
;
abstract
close
(
)
:
Promise
<
void
>
;
abstract
disconnect
(
)
:
Promise
<
void
>
;
async
cookies
(
)
:
Promise
<
Cookie
[
]
>
{
return
await
this
.
defaultBrowserContext
(
)
.
cookies
(
)
;
}
async
setCookie
(
.
.
.
cookies
:
CookieData
[
]
)
:
Promise
<
void
>
{
return
await
this
.
defaultBrowserContext
(
)
.
setCookie
(
.
.
.
cookies
)
;
}
async
deleteCookie
(
.
.
.
cookies
:
Cookie
[
]
)
:
Promise
<
void
>
{
return
await
this
.
defaultBrowserContext
(
)
.
deleteCookie
(
.
.
.
cookies
)
;
}
abstract
installExtension
(
path
:
string
)
:
Promise
<
string
>
;
abstract
uninstallExtension
(
id
:
string
)
:
Promise
<
void
>
;
isConnected
(
)
:
boolean
{
return
this
.
connected
;
}
abstract
get
connected
(
)
:
boolean
;
override
[
disposeSymbol
]
(
)
:
void
{
if
(
this
.
process
(
)
)
{
return
void
this
.
close
(
)
.
catch
(
debugError
)
;
}
return
void
this
.
disconnect
(
)
.
catch
(
debugError
)
;
}
[
asyncDisposeSymbol
]
(
)
:
Promise
<
void
>
{
if
(
this
.
process
(
)
)
{
return
this
.
close
(
)
;
}
return
this
.
disconnect
(
)
;
}
abstract
get
protocol
(
)
:
ProtocolType
;
abstract
get
debugInfo
(
)
:
DebugInfo
;
}
