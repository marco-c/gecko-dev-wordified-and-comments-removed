import
{
EventEmitter
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
{
Page
}
from
'
.
/
Page
.
js
'
;
import
{
Target
}
from
'
.
.
/
common
/
Target
.
js
'
;
import
type
{
Permission
Browser
}
from
'
.
/
Browser
.
js
'
;
export
class
BrowserContext
extends
EventEmitter
{
constructor
(
)
{
super
(
)
;
}
targets
(
)
:
Target
[
]
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
{
timeout
?
:
number
}
)
:
Promise
<
Target
>
;
waitForTarget
(
)
:
Promise
<
Target
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
pages
(
)
:
Promise
<
Page
[
]
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
isIncognito
(
)
:
boolean
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
overridePermissions
(
origin
:
string
permissions
:
Permission
[
]
)
:
Promise
<
void
>
;
overridePermissions
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
clearPermissionOverrides
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
newPage
(
)
:
Promise
<
Page
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
browser
(
)
:
Browser
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
close
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
id
(
)
:
string
|
undefined
{
return
undefined
;
}
}
