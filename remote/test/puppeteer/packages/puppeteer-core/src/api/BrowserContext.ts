import
{
EventEmitter
type
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
{
debugError
}
from
'
.
.
/
common
/
util
.
js
'
;
import
{
asyncDisposeSymbol
disposeSymbol
}
from
'
.
.
/
util
/
disposable
.
js
'
;
import
type
{
Browser
Permission
WaitForTargetOptions
}
from
'
.
/
Browser
.
js
'
;
import
type
{
Page
}
from
'
.
/
Page
.
js
'
;
import
type
{
Target
}
from
'
.
/
Target
.
js
'
;
export
const
enum
BrowserContextEvent
{
TargetChanged
=
'
targetchanged
'
TargetCreated
=
'
targetcreated
'
TargetDestroyed
=
'
targetdestroyed
'
}
export
{
BrowserContextEvent
as
BrowserContextEmittedEvents
}
;
export
interface
BrowserContextEvents
extends
Record
<
EventType
unknown
>
{
[
BrowserContextEvent
.
TargetChanged
]
:
Target
;
[
BrowserContextEvent
.
TargetCreated
]
:
Target
;
[
BrowserContextEvent
.
TargetDestroyed
]
:
Target
;
}
export
abstract
class
BrowserContext
extends
EventEmitter
<
BrowserContextEvents
>
{
constructor
(
)
{
super
(
)
;
}
abstract
targets
(
)
:
Target
[
]
;
abstract
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
WaitForTargetOptions
)
:
Promise
<
Target
>
;
abstract
pages
(
)
:
Promise
<
Page
[
]
>
;
abstract
isIncognito
(
)
:
boolean
;
abstract
overridePermissions
(
origin
:
string
permissions
:
Permission
[
]
)
:
Promise
<
void
>
;
abstract
clearPermissionOverrides
(
)
:
Promise
<
void
>
;
abstract
newPage
(
)
:
Promise
<
Page
>
;
abstract
browser
(
)
:
Browser
;
abstract
close
(
)
:
Promise
<
void
>
;
get
closed
(
)
:
boolean
{
return
!
this
.
browser
(
)
.
browserContexts
(
)
.
includes
(
this
)
;
}
get
id
(
)
:
string
|
undefined
{
return
undefined
;
}
[
disposeSymbol
]
(
)
:
void
{
return
void
this
.
close
(
)
.
catch
(
debugError
)
;
}
[
asyncDisposeSymbol
]
(
)
:
Promise
<
void
>
{
return
this
.
close
(
)
;
}
}
