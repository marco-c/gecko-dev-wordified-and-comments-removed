import
{
EventEmitter
type
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
{
TimeoutSettings
}
from
'
.
.
/
common
/
TimeoutSettings
.
js
'
;
import
type
{
EvaluateFunc
HandleFor
}
from
'
.
.
/
common
/
types
.
js
'
;
import
{
withSourcePuppeteerURLIfNone
}
from
'
.
.
/
common
/
util
.
js
'
;
import
type
{
CDPSession
}
from
'
.
/
CDPSession
.
js
'
;
import
type
{
Realm
}
from
'
.
/
Realm
.
js
'
;
export
abstract
class
WebWorker
extends
EventEmitter
<
Record
<
EventType
unknown
>
>
{
readonly
timeoutSettings
=
new
TimeoutSettings
(
)
;
readonly
#
url
:
string
;
constructor
(
url
:
string
)
{
super
(
)
;
this
.
#
url
=
url
;
}
abstract
mainRealm
(
)
:
Realm
;
url
(
)
:
string
{
return
this
.
#
url
;
}
abstract
get
client
(
)
:
CDPSession
;
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
func
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
func
=
withSourcePuppeteerURLIfNone
(
this
.
evaluate
.
name
func
)
;
return
await
this
.
mainRealm
(
)
.
evaluate
(
func
.
.
.
args
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
func
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
func
=
withSourcePuppeteerURLIfNone
(
this
.
evaluateHandle
.
name
func
)
;
return
await
this
.
mainRealm
(
)
.
evaluateHandle
(
func
.
.
.
args
)
;
}
}
