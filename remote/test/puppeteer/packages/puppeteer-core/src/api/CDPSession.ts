import
type
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
type
{
Connection
}
from
'
.
.
/
cdp
/
Connection
.
js
'
;
import
{
EventEmitter
type
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
export
type
CDPEvents
=
{
[
Property
in
keyof
ProtocolMapping
.
Events
]
:
ProtocolMapping
.
Events
[
Property
]
[
0
]
;
}
;
export
namespace
CDPSessionEvent
{
export
const
Disconnected
=
Symbol
(
'
CDPSession
.
Disconnected
'
)
;
export
const
Swapped
=
Symbol
(
'
CDPSession
.
Swapped
'
)
;
export
const
Ready
=
Symbol
(
'
CDPSession
.
Ready
'
)
;
export
const
SessionAttached
=
'
sessionattached
'
as
const
;
export
const
SessionDetached
=
'
sessiondetached
'
as
const
;
}
export
interface
CDPSessionEvents
extends
CDPEvents
Record
<
EventType
unknown
>
{
[
CDPSessionEvent
.
Disconnected
]
:
undefined
;
[
CDPSessionEvent
.
Swapped
]
:
CDPSession
;
[
CDPSessionEvent
.
Ready
]
:
CDPSession
;
[
CDPSessionEvent
.
SessionAttached
]
:
CDPSession
;
[
CDPSessionEvent
.
SessionDetached
]
:
CDPSession
;
}
export
interface
CommandOptions
{
timeout
:
number
;
}
export
abstract
class
CDPSession
extends
EventEmitter
<
CDPSessionEvents
>
{
constructor
(
)
{
super
(
)
;
}
abstract
connection
(
)
:
Connection
|
undefined
;
parentSession
(
)
:
CDPSession
|
undefined
{
return
undefined
;
}
abstract
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
params
?
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
[
0
]
options
?
:
CommandOptions
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
abstract
detach
(
)
:
Promise
<
void
>
;
abstract
id
(
)
:
string
;
}
