import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
CDPSession
}
from
'
.
/
CDPSession
.
js
'
;
import
type
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
type
{
HTTPResponse
}
from
'
.
/
HTTPResponse
.
js
'
;
export
interface
ContinueRequestOverrides
{
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
Record
<
string
string
>
;
}
export
interface
InterceptResolutionState
{
action
:
InterceptResolutionAction
;
priority
?
:
number
;
}
export
interface
ResponseForRequest
{
status
:
number
;
headers
:
Record
<
string
unknown
>
;
contentType
:
string
;
body
:
string
|
Buffer
;
}
export
type
ResourceType
=
Lowercase
<
Protocol
.
Network
.
ResourceType
>
;
export
const
DEFAULT_INTERCEPT_RESOLUTION_PRIORITY
=
0
;
export
abstract
class
HTTPRequest
{
_requestId
=
'
'
;
_interceptionId
:
string
|
undefined
;
_failureText
:
string
|
null
=
null
;
_response
:
HTTPResponse
|
null
=
null
;
_fromMemoryCache
=
false
;
_redirectChain
:
HTTPRequest
[
]
=
[
]
;
abstract
get
client
(
)
:
CDPSession
;
constructor
(
)
{
}
abstract
url
(
)
:
string
;
abstract
continueRequestOverrides
(
)
:
ContinueRequestOverrides
;
abstract
responseForRequest
(
)
:
Partial
<
ResponseForRequest
>
|
null
;
abstract
abortErrorReason
(
)
:
Protocol
.
Network
.
ErrorReason
|
null
;
abstract
interceptResolutionState
(
)
:
InterceptResolutionState
;
abstract
isInterceptResolutionHandled
(
)
:
boolean
;
abstract
enqueueInterceptAction
(
pendingHandler
:
(
)
=
>
void
|
PromiseLike
<
unknown
>
)
:
void
;
abstract
finalizeInterceptions
(
)
:
Promise
<
void
>
;
abstract
resourceType
(
)
:
ResourceType
;
abstract
method
(
)
:
string
;
abstract
postData
(
)
:
string
|
undefined
;
abstract
headers
(
)
:
Record
<
string
string
>
;
abstract
response
(
)
:
HTTPResponse
|
null
;
abstract
frame
(
)
:
Frame
|
null
;
abstract
isNavigationRequest
(
)
:
boolean
;
abstract
initiator
(
)
:
Protocol
.
Network
.
Initiator
|
undefined
;
abstract
redirectChain
(
)
:
HTTPRequest
[
]
;
abstract
failure
(
)
:
{
errorText
:
string
}
|
null
;
abstract
continue
(
overrides
?
:
ContinueRequestOverrides
priority
?
:
number
)
:
Promise
<
void
>
;
abstract
respond
(
response
:
Partial
<
ResponseForRequest
>
priority
?
:
number
)
:
Promise
<
void
>
;
abstract
abort
(
errorCode
?
:
ErrorCode
priority
?
:
number
)
:
Promise
<
void
>
;
}
export
enum
InterceptResolutionAction
{
Abort
=
'
abort
'
Respond
=
'
respond
'
Continue
=
'
continue
'
Disabled
=
'
disabled
'
None
=
'
none
'
AlreadyHandled
=
'
already
-
handled
'
}
export
type
InterceptResolutionStrategy
=
InterceptResolutionAction
;
export
type
ErrorCode
=
|
'
aborted
'
|
'
accessdenied
'
|
'
addressunreachable
'
|
'
blockedbyclient
'
|
'
blockedbyresponse
'
|
'
connectionaborted
'
|
'
connectionclosed
'
|
'
connectionfailed
'
|
'
connectionrefused
'
|
'
connectionreset
'
|
'
internetdisconnected
'
|
'
namenotresolved
'
|
'
timedout
'
|
'
failed
'
;
export
type
ActionResult
=
'
continue
'
|
'
abort
'
|
'
respond
'
;
export
function
headersArray
(
headers
:
Record
<
string
string
|
string
[
]
>
)
:
Array
<
{
name
:
string
;
value
:
string
}
>
{
const
result
=
[
]
;
for
(
const
name
in
headers
)
{
const
value
=
headers
[
name
]
;
if
(
!
Object
.
is
(
value
undefined
)
)
{
const
values
=
Array
.
isArray
(
value
)
?
value
:
[
value
]
;
result
.
push
(
.
.
.
values
.
map
(
value
=
>
{
return
{
name
value
:
value
+
'
'
}
;
}
)
)
;
}
}
return
result
;
}
export
const
STATUS_TEXTS
:
Record
<
string
string
>
=
{
'
100
'
:
'
Continue
'
'
101
'
:
'
Switching
Protocols
'
'
102
'
:
'
Processing
'
'
103
'
:
'
Early
Hints
'
'
200
'
:
'
OK
'
'
201
'
:
'
Created
'
'
202
'
:
'
Accepted
'
'
203
'
:
'
Non
-
Authoritative
Information
'
'
204
'
:
'
No
Content
'
'
205
'
:
'
Reset
Content
'
'
206
'
:
'
Partial
Content
'
'
207
'
:
'
Multi
-
Status
'
'
208
'
:
'
Already
Reported
'
'
226
'
:
'
IM
Used
'
'
300
'
:
'
Multiple
Choices
'
'
301
'
:
'
Moved
Permanently
'
'
302
'
:
'
Found
'
'
303
'
:
'
See
Other
'
'
304
'
:
'
Not
Modified
'
'
305
'
:
'
Use
Proxy
'
'
306
'
:
'
Switch
Proxy
'
'
307
'
:
'
Temporary
Redirect
'
'
308
'
:
'
Permanent
Redirect
'
'
400
'
:
'
Bad
Request
'
'
401
'
:
'
Unauthorized
'
'
402
'
:
'
Payment
Required
'
'
403
'
:
'
Forbidden
'
'
404
'
:
'
Not
Found
'
'
405
'
:
'
Method
Not
Allowed
'
'
406
'
:
'
Not
Acceptable
'
'
407
'
:
'
Proxy
Authentication
Required
'
'
408
'
:
'
Request
Timeout
'
'
409
'
:
'
Conflict
'
'
410
'
:
'
Gone
'
'
411
'
:
'
Length
Required
'
'
412
'
:
'
Precondition
Failed
'
'
413
'
:
'
Payload
Too
Large
'
'
414
'
:
'
URI
Too
Long
'
'
415
'
:
'
Unsupported
Media
Type
'
'
416
'
:
'
Range
Not
Satisfiable
'
'
417
'
:
'
Expectation
Failed
'
'
418
'
:
"
I
'
m
a
teapot
"
'
421
'
:
'
Misdirected
Request
'
'
422
'
:
'
Unprocessable
Entity
'
'
423
'
:
'
Locked
'
'
424
'
:
'
Failed
Dependency
'
'
425
'
:
'
Too
Early
'
'
426
'
:
'
Upgrade
Required
'
'
428
'
:
'
Precondition
Required
'
'
429
'
:
'
Too
Many
Requests
'
'
431
'
:
'
Request
Header
Fields
Too
Large
'
'
451
'
:
'
Unavailable
For
Legal
Reasons
'
'
500
'
:
'
Internal
Server
Error
'
'
501
'
:
'
Not
Implemented
'
'
502
'
:
'
Bad
Gateway
'
'
503
'
:
'
Service
Unavailable
'
'
504
'
:
'
Gateway
Timeout
'
'
505
'
:
'
HTTP
Version
Not
Supported
'
'
506
'
:
'
Variant
Also
Negotiates
'
'
507
'
:
'
Insufficient
Storage
'
'
508
'
:
'
Loop
Detected
'
'
510
'
:
'
Not
Extended
'
'
511
'
:
'
Network
Authentication
Required
'
}
as
const
;
