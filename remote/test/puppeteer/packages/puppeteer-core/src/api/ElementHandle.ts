import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
Frame
}
from
'
.
.
/
api
/
Frame
.
js
'
;
import
{
CDPSession
}
from
'
.
.
/
common
/
Connection
.
js
'
;
import
{
ExecutionContext
}
from
'
.
.
/
common
/
ExecutionContext
.
js
'
;
import
{
getQueryHandlerAndSelector
}
from
'
.
.
/
common
/
GetQueryHandler
.
js
'
;
import
{
WaitForSelectorOptions
}
from
'
.
.
/
common
/
IsolatedWorld
.
js
'
;
import
{
LazyArg
}
from
'
.
.
/
common
/
LazyArg
.
js
'
;
import
{
ElementFor
EvaluateFuncWith
HandleFor
HandleOr
NodeFor
}
from
'
.
.
/
common
/
types
.
js
'
;
import
{
KeyInput
}
from
'
.
.
/
common
/
USKeyboardLayout
.
js
'
;
import
{
isString
withSourcePuppeteerURLIfNone
}
from
'
.
.
/
common
/
util
.
js
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
AsyncIterableUtil
}
from
'
.
.
/
util
/
AsyncIterableUtil
.
js
'
;
import
{
KeyPressOptions
MouseClickOptions
KeyboardTypeOptions
}
from
'
.
/
Input
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
import
{
ScreenshotOptions
}
from
'
.
/
Page
.
js
'
;
export
interface
BoxModel
{
content
:
Point
[
]
;
padding
:
Point
[
]
;
border
:
Point
[
]
;
margin
:
Point
[
]
;
width
:
number
;
height
:
number
;
}
export
interface
BoundingBox
extends
Point
{
width
:
number
;
height
:
number
;
}
export
interface
Offset
{
x
:
number
;
y
:
number
;
}
export
interface
ClickOptions
extends
MouseClickOptions
{
offset
?
:
Offset
;
}
export
interface
Point
{
x
:
number
;
y
:
number
;
}
export
class
ElementHandle
<
ElementType
extends
Node
=
Element
>
extends
JSHandle
<
ElementType
>
{
protected
handle
;
constructor
(
handle
:
JSHandle
<
ElementType
>
)
{
super
(
)
;
this
.
handle
=
handle
;
}
override
get
id
(
)
:
string
|
undefined
{
return
this
.
handle
.
id
;
}
override
get
disposed
(
)
:
boolean
{
return
this
.
handle
.
disposed
;
}
override
async
getProperty
<
K
extends
keyof
ElementType
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
ElementType
[
K
]
>
>
;
override
async
getProperty
(
propertyName
:
string
)
:
Promise
<
JSHandle
<
unknown
>
>
;
override
async
getProperty
<
K
extends
keyof
ElementType
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
ElementType
[
K
]
>
>
{
return
this
.
handle
.
getProperty
(
propertyName
)
;
}
override
async
getProperties
(
)
:
Promise
<
Map
<
string
JSHandle
>
>
{
return
this
.
handle
.
getProperties
(
)
;
}
override
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
ElementType
Params
>
=
EvaluateFuncWith
<
ElementType
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
handle
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
override
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
ElementType
Params
>
=
EvaluateFuncWith
<
ElementType
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
return
this
.
handle
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
override
async
jsonValue
(
)
:
Promise
<
ElementType
>
{
return
this
.
handle
.
jsonValue
(
)
;
}
override
toString
(
)
:
string
{
return
this
.
handle
.
toString
(
)
;
}
override
async
dispose
(
)
:
Promise
<
void
>
{
return
await
this
.
handle
.
dispose
(
)
;
}
override
asElement
(
)
:
ElementHandle
<
ElementType
>
{
return
this
;
}
override
executionContext
(
)
:
ExecutionContext
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
override
get
client
(
)
:
CDPSession
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
frame
(
)
:
Frame
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
const
{
updatedSelector
QueryHandler
}
=
getQueryHandlerAndSelector
(
selector
)
;
return
(
await
QueryHandler
.
queryOne
(
this
updatedSelector
)
)
as
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
{
const
{
updatedSelector
QueryHandler
}
=
getQueryHandlerAndSelector
(
selector
)
;
return
AsyncIterableUtil
.
collect
(
QueryHandler
.
queryAll
(
this
updatedSelector
)
)
as
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
NodeFor
<
Selector
>
Params
>
=
EvaluateFuncWith
<
NodeFor
<
Selector
>
Params
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
eval
.
name
pageFunction
)
;
const
elementHandle
=
await
this
.
(
selector
)
;
if
(
!
elementHandle
)
{
throw
new
Error
(
Error
:
failed
to
find
element
matching
selector
"
{
selector
}
"
)
;
}
const
result
=
await
elementHandle
.
evaluate
(
pageFunction
.
.
.
args
)
;
await
elementHandle
.
dispose
(
)
;
return
result
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
Array
<
NodeFor
<
Selector
>
>
Params
>
=
EvaluateFuncWith
<
Array
<
NodeFor
<
Selector
>
>
Params
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
eval
.
name
pageFunction
)
;
const
results
=
await
this
.
(
selector
)
;
const
elements
=
await
this
.
evaluateHandle
(
(
_
.
.
.
elements
)
=
>
{
return
elements
;
}
.
.
.
results
)
;
const
[
result
]
=
await
Promise
.
all
(
[
elements
.
evaluate
(
pageFunction
.
.
.
args
)
.
.
.
results
.
map
(
results
=
>
{
return
results
.
dispose
(
)
;
}
)
]
)
;
await
elements
.
dispose
(
)
;
return
result
;
}
async
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
{
if
(
expression
.
startsWith
(
'
/
/
'
)
)
{
expression
=
.
{
expression
}
;
}
return
this
.
(
xpath
/
{
expression
}
)
;
}
async
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
:
WaitForSelectorOptions
=
{
}
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
const
{
updatedSelector
QueryHandler
}
=
getQueryHandlerAndSelector
(
selector
)
;
return
(
await
QueryHandler
.
waitFor
(
this
updatedSelector
options
)
)
as
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
;
}
async
#
checkVisibility
(
visibility
:
boolean
)
:
Promise
<
boolean
>
{
const
element
=
await
this
.
frame
.
isolatedRealm
(
)
.
adoptHandle
(
this
)
;
try
{
return
await
this
.
frame
.
isolatedRealm
(
)
.
evaluate
(
async
(
PuppeteerUtil
element
visibility
)
=
>
{
return
Boolean
(
PuppeteerUtil
.
checkVisibility
(
element
visibility
)
)
;
}
LazyArg
.
create
(
context
=
>
{
return
context
.
puppeteerUtil
;
}
)
element
visibility
)
;
}
finally
{
await
element
.
dispose
(
)
;
}
}
async
isVisible
(
)
:
Promise
<
boolean
>
{
return
this
.
#
checkVisibility
(
true
)
;
}
async
isHidden
(
)
:
Promise
<
boolean
>
{
return
this
.
#
checkVisibility
(
false
)
;
}
async
waitForXPath
(
xpath
:
string
options
:
{
visible
?
:
boolean
;
hidden
?
:
boolean
;
timeout
?
:
number
;
}
=
{
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
{
if
(
xpath
.
startsWith
(
'
/
/
'
)
)
{
xpath
=
.
{
xpath
}
;
}
return
this
.
waitForSelector
(
xpath
/
{
xpath
}
options
)
;
}
async
toElement
<
K
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
>
(
tagName
:
K
)
:
Promise
<
HandleFor
<
ElementFor
<
K
>
>
>
{
const
isMatchingTagName
=
await
this
.
evaluate
(
(
node
tagName
)
=
>
{
return
node
.
nodeName
=
=
=
tagName
.
toUpperCase
(
)
;
}
tagName
)
;
if
(
!
isMatchingTagName
)
{
throw
new
Error
(
Element
is
not
a
(
n
)
\
{
tagName
}
\
element
)
;
}
return
this
as
unknown
as
HandleFor
<
ElementFor
<
K
>
>
;
}
async
contentFrame
(
)
:
Promise
<
Frame
|
null
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
clickablePoint
(
offset
?
:
Offset
)
:
Promise
<
Point
>
;
async
clickablePoint
(
)
:
Promise
<
Point
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
hover
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
click
(
this
:
ElementHandle
<
Element
>
options
?
:
ClickOptions
)
:
Promise
<
void
>
;
async
click
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
drag
(
this
:
ElementHandle
<
Element
>
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
async
drag
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
Protocol
.
Input
.
DragData
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragEnter
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
dragEnter
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragOver
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
dragOver
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
drop
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
async
drop
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dragAndDrop
(
this
:
ElementHandle
<
Element
>
target
:
ElementHandle
<
Node
>
options
?
:
{
delay
:
number
}
)
:
Promise
<
void
>
;
async
dragAndDrop
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
select
(
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
{
for
(
const
value
of
values
)
{
assert
(
isString
(
value
)
'
Values
must
be
strings
.
Found
value
"
'
+
value
+
'
"
of
type
"
'
+
typeof
value
+
'
"
'
)
;
}
return
this
.
evaluate
(
(
element
vals
)
:
string
[
]
=
>
{
const
values
=
new
Set
(
vals
)
;
if
(
!
(
element
instanceof
HTMLSelectElement
)
)
{
throw
new
Error
(
'
Element
is
not
a
<
select
>
element
.
'
)
;
}
const
selectedValues
=
new
Set
<
string
>
(
)
;
if
(
!
element
.
multiple
)
{
for
(
const
option
of
element
.
options
)
{
option
.
selected
=
false
;
}
for
(
const
option
of
element
.
options
)
{
if
(
values
.
has
(
option
.
value
)
)
{
option
.
selected
=
true
;
selectedValues
.
add
(
option
.
value
)
;
break
;
}
}
}
else
{
for
(
const
option
of
element
.
options
)
{
option
.
selected
=
values
.
has
(
option
.
value
)
;
if
(
option
.
selected
)
{
selectedValues
.
add
(
option
.
value
)
;
}
}
}
element
.
dispatchEvent
(
new
Event
(
'
input
'
{
bubbles
:
true
}
)
)
;
element
.
dispatchEvent
(
new
Event
(
'
change
'
{
bubbles
:
true
}
)
)
;
return
[
.
.
.
selectedValues
.
values
(
)
]
;
}
values
)
;
}
async
uploadFile
(
this
:
ElementHandle
<
HTMLInputElement
>
.
.
.
paths
:
string
[
]
)
:
Promise
<
void
>
;
async
uploadFile
(
this
:
ElementHandle
<
HTMLInputElement
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
tap
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchStart
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchMove
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
touchEnd
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
focus
(
)
:
Promise
<
void
>
{
await
this
.
evaluate
(
element
=
>
{
if
(
!
(
element
instanceof
HTMLElement
)
)
{
throw
new
Error
(
'
Cannot
focus
non
-
HTMLElement
'
)
;
}
return
element
.
focus
(
)
;
}
)
;
}
async
type
(
text
:
string
options
?
:
Readonly
<
KeyboardTypeOptions
>
)
:
Promise
<
void
>
;
async
type
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
press
(
key
:
KeyInput
options
?
:
Readonly
<
KeyPressOptions
>
)
:
Promise
<
void
>
;
async
press
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
boundingBox
(
)
:
Promise
<
BoundingBox
|
null
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
boxModel
(
)
:
Promise
<
BoxModel
|
null
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
screenshot
(
this
:
ElementHandle
<
Element
>
options
?
:
ScreenshotOptions
)
:
Promise
<
string
|
Buffer
>
;
async
screenshot
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
string
|
Buffer
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
protected
async
assertConnectedElement
(
)
:
Promise
<
void
>
{
const
error
=
await
this
.
evaluate
(
async
(
element
)
:
Promise
<
string
|
undefined
>
=
>
{
if
(
!
element
.
isConnected
)
{
return
'
Node
is
detached
from
document
'
;
}
if
(
element
.
nodeType
!
=
=
Node
.
ELEMENT_NODE
)
{
return
'
Node
is
not
of
type
HTMLElement
'
;
}
return
;
}
)
;
if
(
error
)
{
throw
new
Error
(
error
)
;
}
}
protected
async
scrollIntoViewIfNeeded
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
if
(
await
this
.
isIntersectingViewport
(
{
threshold
:
1
}
)
)
{
return
;
}
await
this
.
scrollIntoView
(
)
;
}
async
isIntersectingViewport
(
this
:
ElementHandle
<
Element
>
options
?
:
{
threshold
?
:
number
;
}
)
:
Promise
<
boolean
>
{
await
this
.
assertConnectedElement
(
)
;
const
{
threshold
=
0
}
=
options
?
?
{
}
;
const
svgHandle
=
await
this
.
#
asSVGElementHandle
(
this
)
;
const
intersectionTarget
:
ElementHandle
<
Element
>
=
svgHandle
?
await
this
.
#
getOwnerSVGElement
(
svgHandle
)
:
this
;
try
{
return
await
intersectionTarget
.
evaluate
(
async
(
element
threshold
)
=
>
{
const
visibleRatio
=
await
new
Promise
<
number
>
(
resolve
=
>
{
const
observer
=
new
IntersectionObserver
(
entries
=
>
{
resolve
(
entries
[
0
]
!
.
intersectionRatio
)
;
observer
.
disconnect
(
)
;
}
)
;
observer
.
observe
(
element
)
;
}
)
;
return
threshold
=
=
=
1
?
visibleRatio
=
=
=
1
:
visibleRatio
>
threshold
;
}
threshold
)
;
}
finally
{
if
(
intersectionTarget
!
=
=
this
)
{
await
intersectionTarget
.
dispose
(
)
;
}
}
}
async
scrollIntoView
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
assertConnectedElement
(
)
;
await
this
.
evaluate
(
async
(
element
)
:
Promise
<
void
>
=
>
{
element
.
scrollIntoView
(
{
block
:
'
center
'
inline
:
'
center
'
behavior
:
'
instant
'
}
)
;
}
)
;
}
async
#
asSVGElementHandle
(
handle
:
ElementHandle
<
Element
>
)
:
Promise
<
ElementHandle
<
SVGElement
>
|
null
>
{
if
(
await
handle
.
evaluate
(
element
=
>
{
return
element
instanceof
SVGElement
;
}
)
)
{
return
handle
as
ElementHandle
<
SVGElement
>
;
}
else
{
return
null
;
}
}
async
#
getOwnerSVGElement
(
handle
:
ElementHandle
<
SVGElement
>
)
:
Promise
<
ElementHandle
<
SVGSVGElement
>
>
{
return
await
handle
.
evaluateHandle
(
element
=
>
{
if
(
element
instanceof
SVGSVGElement
)
{
return
element
;
}
return
element
.
ownerSVGElement
!
;
}
)
;
}
assertElementHasWorld
(
)
:
asserts
this
{
assert
(
this
.
executionContext
(
)
.
_world
)
;
}
autofill
(
data
:
AutofillData
)
:
Promise
<
void
>
;
autofill
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
export
interface
AutofillData
{
creditCard
:
{
number
:
string
;
name
:
string
;
expiryMonth
:
string
;
expiryYear
:
string
;
cvc
:
string
;
}
;
}
