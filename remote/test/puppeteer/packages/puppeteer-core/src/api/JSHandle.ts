import
Protocol
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
.
/
common
/
Connection
.
js
'
;
import
{
ExecutionContext
}
from
'
.
.
/
common
/
ExecutionContext
.
js
'
;
import
{
EvaluateFuncWith
HandleFor
HandleOr
}
from
'
.
.
/
common
/
types
.
js
'
;
import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
export
class
JSHandle
<
T
=
unknown
>
{
declare
_
?
:
T
;
constructor
(
)
{
}
get
disposed
(
)
:
boolean
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
executionContext
(
)
:
ExecutionContext
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
client
(
)
:
CDPSession
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
T
Params
>
=
EvaluateFuncWith
<
T
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
async
evaluate
(
)
:
Promise
<
unknown
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
T
Params
>
=
EvaluateFuncWith
<
T
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
async
evaluateHandle
(
)
:
Promise
<
HandleFor
<
unknown
>
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
getProperty
<
K
extends
keyof
T
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
T
[
K
]
>
>
;
async
getProperty
(
propertyName
:
string
)
:
Promise
<
JSHandle
<
unknown
>
>
;
async
getProperty
<
K
extends
keyof
T
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
T
[
K
]
>
>
;
async
getProperty
<
K
extends
keyof
T
>
(
)
:
Promise
<
HandleFor
<
T
[
K
]
>
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
getProperties
(
)
:
Promise
<
Map
<
string
JSHandle
>
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
jsonValue
(
)
:
Promise
<
T
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
asElement
(
)
:
ElementHandle
<
Node
>
|
null
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
dispose
(
)
:
Promise
<
void
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
toString
(
)
:
string
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
id
(
)
:
string
|
undefined
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
remoteObject
(
)
:
Protocol
.
Runtime
.
RemoteObject
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
