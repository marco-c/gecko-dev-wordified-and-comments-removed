import
type
{
Browser
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
type
{
BrowserContext
}
from
'
.
.
/
api
/
BrowserContext
.
js
'
;
import
type
{
Page
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
type
{
WebWorker
}
from
'
.
.
/
cdp
/
WebWorker
.
js
'
;
import
type
{
CDPSession
}
from
'
.
/
CDPSession
.
js
'
;
export
enum
TargetType
{
PAGE
=
'
page
'
BACKGROUND_PAGE
=
'
background_page
'
SERVICE_WORKER
=
'
service_worker
'
SHARED_WORKER
=
'
shared_worker
'
BROWSER
=
'
browser
'
WEBVIEW
=
'
webview
'
OTHER
=
'
other
'
TAB
=
'
tab
'
}
export
abstract
class
Target
{
protected
constructor
(
)
{
}
async
worker
(
)
:
Promise
<
WebWorker
|
null
>
{
return
null
;
}
async
page
(
)
:
Promise
<
Page
|
null
>
{
return
null
;
}
abstract
url
(
)
:
string
;
abstract
createCDPSession
(
)
:
Promise
<
CDPSession
>
;
abstract
type
(
)
:
TargetType
;
abstract
browser
(
)
:
Browser
;
abstract
browserContext
(
)
:
BrowserContext
;
abstract
opener
(
)
:
Target
|
undefined
;
}
