import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
export
abstract
class
Dialog
{
#
type
:
Protocol
.
Page
.
DialogType
;
#
message
:
string
;
#
defaultValue
:
string
;
#
handled
=
false
;
constructor
(
type
:
Protocol
.
Page
.
DialogType
message
:
string
defaultValue
=
'
'
)
{
this
.
#
type
=
type
;
this
.
#
message
=
message
;
this
.
#
defaultValue
=
defaultValue
;
}
type
(
)
:
Protocol
.
Page
.
DialogType
{
return
this
.
#
type
;
}
message
(
)
:
string
{
return
this
.
#
message
;
}
defaultValue
(
)
:
string
{
return
this
.
#
defaultValue
;
}
protected
abstract
sendCommand
(
options
:
{
accept
:
boolean
;
text
?
:
string
;
}
)
:
Promise
<
void
>
;
async
accept
(
promptText
?
:
string
)
:
Promise
<
void
>
{
assert
(
!
this
.
#
handled
'
Cannot
accept
dialog
which
is
already
handled
!
'
)
;
this
.
#
handled
=
true
;
await
this
.
sendCommand
(
{
accept
:
true
text
:
promptText
}
)
;
}
async
dismiss
(
)
:
Promise
<
void
>
{
assert
(
!
this
.
#
handled
'
Cannot
dismiss
dialog
which
is
already
handled
!
'
)
;
this
.
#
handled
=
true
;
await
this
.
sendCommand
(
{
accept
:
false
}
)
;
}
}
