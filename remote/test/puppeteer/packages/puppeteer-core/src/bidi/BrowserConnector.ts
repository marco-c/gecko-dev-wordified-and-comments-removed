import
type
{
BrowserCloseCallback
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
Connection
}
from
'
.
.
/
cdp
/
Connection
.
js
'
;
import
type
{
ConnectionTransport
}
from
'
.
.
/
common
/
ConnectionTransport
.
js
'
;
import
type
{
BrowserConnectOptions
ConnectOptions
}
from
'
.
.
/
common
/
ConnectOptions
.
js
'
;
import
{
ProtocolError
UnsupportedOperation
}
from
'
.
.
/
common
/
Errors
.
js
'
;
import
{
debugError
DEFAULT_VIEWPORT
}
from
'
.
.
/
common
/
util
.
js
'
;
import
type
{
BidiBrowser
}
from
'
.
/
Browser
.
js
'
;
import
type
{
BidiConnection
}
from
'
.
/
Connection
.
js
'
;
export
async
function
_connectToBiDiBrowser
(
connectionTransport
:
ConnectionTransport
url
:
string
options
:
BrowserConnectOptions
&
ConnectOptions
)
:
Promise
<
BidiBrowser
>
{
const
{
ignoreHTTPSErrors
=
false
defaultViewport
=
DEFAULT_VIEWPORT
}
=
options
;
const
{
bidiConnection
closeCallback
}
=
await
getBiDiConnection
(
connectionTransport
url
options
)
;
const
BiDi
=
await
import
(
'
.
/
bidi
.
js
'
)
;
const
bidiBrowser
=
await
BiDi
.
BidiBrowser
.
create
(
{
connection
:
bidiConnection
closeCallback
process
:
undefined
defaultViewport
:
defaultViewport
ignoreHTTPSErrors
:
ignoreHTTPSErrors
}
)
;
return
bidiBrowser
;
}
async
function
getBiDiConnection
(
connectionTransport
:
ConnectionTransport
url
:
string
options
:
BrowserConnectOptions
)
:
Promise
<
{
bidiConnection
:
BidiConnection
;
closeCallback
:
BrowserCloseCallback
;
}
>
{
const
BiDi
=
await
import
(
'
.
/
bidi
.
js
'
)
;
const
{
ignoreHTTPSErrors
=
false
slowMo
=
0
protocolTimeout
}
=
options
;
const
pureBidiConnection
=
new
BiDi
.
BidiConnection
(
url
connectionTransport
slowMo
protocolTimeout
)
;
try
{
const
result
=
await
pureBidiConnection
.
send
(
'
session
.
status
'
{
}
)
;
if
(
'
type
'
in
result
&
&
result
.
type
=
=
=
'
success
'
)
{
return
{
bidiConnection
:
pureBidiConnection
closeCallback
:
async
(
)
=
>
{
await
pureBidiConnection
.
send
(
'
browser
.
close
'
{
}
)
.
catch
(
debugError
)
;
}
}
;
}
}
catch
(
e
)
{
if
(
!
(
e
instanceof
ProtocolError
)
)
{
throw
e
;
}
}
pureBidiConnection
.
unbind
(
)
;
const
cdpConnection
=
new
Connection
(
url
connectionTransport
slowMo
protocolTimeout
)
;
const
version
=
await
cdpConnection
.
send
(
'
Browser
.
getVersion
'
)
;
if
(
version
.
product
.
toLowerCase
(
)
.
includes
(
'
firefox
'
)
)
{
throw
new
UnsupportedOperation
(
'
Firefox
is
not
supported
in
BiDi
over
CDP
mode
.
'
)
;
}
const
bidiOverCdpConnection
=
await
BiDi
.
connectBidiOverCdp
(
cdpConnection
{
acceptInsecureCerts
:
ignoreHTTPSErrors
}
)
;
return
{
bidiConnection
:
bidiOverCdpConnection
closeCallback
:
async
(
)
=
>
{
await
cdpConnection
.
send
(
'
Browser
.
close
'
)
.
catch
(
debugError
)
;
}
}
;
}
