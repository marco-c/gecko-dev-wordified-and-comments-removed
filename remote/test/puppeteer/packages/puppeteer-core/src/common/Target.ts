import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
Browser
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
type
{
BrowserContext
}
from
'
.
.
/
api
/
BrowserContext
.
js
'
;
import
{
Page
PageEmittedEvents
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
Deferred
}
from
'
.
.
/
util
/
Deferred
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
CDPPage
}
from
'
.
/
Page
.
js
'
;
import
{
Viewport
}
from
'
.
/
PuppeteerViewport
.
js
'
;
import
{
TargetManager
}
from
'
.
/
TargetManager
.
js
'
;
import
{
TaskQueue
}
from
'
.
/
TaskQueue
.
js
'
;
import
{
debugError
}
from
'
.
/
util
.
js
'
;
import
{
WebWorker
}
from
'
.
/
WebWorker
.
js
'
;
export
enum
InitializationStatus
{
SUCCESS
=
'
success
'
ABORTED
=
'
aborted
'
}
export
class
Target
{
#
browserContext
:
BrowserContext
;
#
session
?
:
CDPSession
;
#
targetInfo
:
Protocol
.
Target
.
TargetInfo
;
#
targetManager
:
TargetManager
;
#
sessionFactory
:
(
isAutoAttachEmulated
:
boolean
)
=
>
Promise
<
CDPSession
>
;
_initializedDeferred
=
Deferred
.
create
<
InitializationStatus
>
(
)
;
_isClosedDeferred
=
Deferred
.
create
<
void
>
(
)
;
_targetId
:
string
;
constructor
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
:
CDPSession
|
undefined
browserContext
:
BrowserContext
targetManager
:
TargetManager
sessionFactory
:
(
isAutoAttachEmulated
:
boolean
)
=
>
Promise
<
CDPSession
>
)
{
this
.
#
session
=
session
;
this
.
#
targetManager
=
targetManager
;
this
.
#
targetInfo
=
targetInfo
;
this
.
#
browserContext
=
browserContext
;
this
.
_targetId
=
targetInfo
.
targetId
;
this
.
#
sessionFactory
=
sessionFactory
;
this
.
_initialize
(
)
;
}
_session
(
)
:
CDPSession
|
undefined
{
return
this
.
#
session
;
}
protected
_sessionFactory
(
)
:
(
isAutoAttachEmulated
:
boolean
)
=
>
Promise
<
CDPSession
>
{
return
this
.
#
sessionFactory
;
}
createCDPSession
(
)
:
Promise
<
CDPSession
>
{
return
this
.
#
sessionFactory
(
false
)
;
}
_targetManager
(
)
:
TargetManager
{
return
this
.
#
targetManager
;
}
_getTargetInfo
(
)
:
Protocol
.
Target
.
TargetInfo
{
return
this
.
#
targetInfo
;
}
async
worker
(
)
:
Promise
<
WebWorker
|
null
>
{
return
null
;
}
url
(
)
:
string
{
return
this
.
#
targetInfo
.
url
;
}
type
(
)
:
|
'
page
'
|
'
background_page
'
|
'
service_worker
'
|
'
shared_worker
'
|
'
other
'
|
'
browser
'
|
'
webview
'
{
const
type
=
this
.
#
targetInfo
.
type
;
if
(
type
=
=
=
'
page
'
|
|
type
=
=
=
'
background_page
'
|
|
type
=
=
=
'
service_worker
'
|
|
type
=
=
=
'
shared_worker
'
|
|
type
=
=
=
'
browser
'
|
|
type
=
=
=
'
webview
'
)
{
return
type
;
}
return
'
other
'
;
}
browser
(
)
:
Browser
{
return
this
.
#
browserContext
.
browser
(
)
;
}
browserContext
(
)
:
BrowserContext
{
return
this
.
#
browserContext
;
}
opener
(
)
:
Target
|
undefined
{
const
{
openerId
}
=
this
.
#
targetInfo
;
if
(
!
openerId
)
{
return
;
}
return
this
.
browser
(
)
.
_targets
.
get
(
openerId
)
;
}
_targetInfoChanged
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
void
{
this
.
#
targetInfo
=
targetInfo
;
this
.
_checkIfInitialized
(
)
;
}
protected
_initialize
(
)
:
void
{
this
.
_initializedDeferred
.
resolve
(
InitializationStatus
.
SUCCESS
)
;
}
protected
_checkIfInitialized
(
)
:
void
{
if
(
!
this
.
_initializedDeferred
.
resolved
(
)
)
{
this
.
_initializedDeferred
.
resolve
(
InitializationStatus
.
SUCCESS
)
;
}
}
async
page
(
)
:
Promise
<
Page
|
null
>
{
return
null
;
}
}
export
class
PageTarget
extends
Target
{
#
defaultViewport
?
:
Viewport
;
protected
pagePromise
?
:
Promise
<
Page
>
;
#
screenshotTaskQueue
:
TaskQueue
;
#
ignoreHTTPSErrors
:
boolean
;
constructor
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
:
CDPSession
|
undefined
browserContext
:
BrowserContext
targetManager
:
TargetManager
sessionFactory
:
(
isAutoAttachEmulated
:
boolean
)
=
>
Promise
<
CDPSession
>
ignoreHTTPSErrors
:
boolean
defaultViewport
:
Viewport
|
null
screenshotTaskQueue
:
TaskQueue
)
{
super
(
targetInfo
session
browserContext
targetManager
sessionFactory
)
;
this
.
#
ignoreHTTPSErrors
=
ignoreHTTPSErrors
;
this
.
#
defaultViewport
=
defaultViewport
?
?
undefined
;
this
.
#
screenshotTaskQueue
=
screenshotTaskQueue
;
}
protected
override
_initialize
(
)
:
void
{
this
.
_initializedDeferred
.
valueOrThrow
(
)
.
then
(
async
result
=
>
{
if
(
result
=
=
=
InitializationStatus
.
ABORTED
)
{
return
;
}
const
opener
=
this
.
opener
(
)
;
if
(
!
(
opener
instanceof
PageTarget
)
)
{
return
;
}
if
(
!
opener
|
|
!
opener
.
pagePromise
|
|
this
.
type
(
)
!
=
=
'
page
'
)
{
return
true
;
}
const
openerPage
=
await
opener
.
pagePromise
;
if
(
!
openerPage
.
listenerCount
(
PageEmittedEvents
.
Popup
)
)
{
return
true
;
}
const
popupPage
=
await
this
.
page
(
)
;
openerPage
.
emit
(
PageEmittedEvents
.
Popup
popupPage
)
;
return
true
;
}
)
.
catch
(
debugError
)
;
this
.
_checkIfInitialized
(
)
;
}
override
async
page
(
)
:
Promise
<
Page
|
null
>
{
if
(
!
this
.
pagePromise
)
{
const
session
=
this
.
_session
(
)
;
this
.
pagePromise
=
(
session
?
Promise
.
resolve
(
session
)
:
this
.
_sessionFactory
(
)
(
false
)
)
.
then
(
client
=
>
{
return
CDPPage
.
_create
(
client
this
this
.
#
ignoreHTTPSErrors
this
.
#
defaultViewport
?
?
null
this
.
#
screenshotTaskQueue
)
;
}
)
;
}
return
(
await
this
.
pagePromise
)
?
?
null
;
}
override
_checkIfInitialized
(
)
:
void
{
if
(
this
.
_initializedDeferred
.
resolved
(
)
)
{
return
;
}
if
(
this
.
_getTargetInfo
(
)
.
url
!
=
=
'
'
)
{
this
.
_initializedDeferred
.
resolve
(
InitializationStatus
.
SUCCESS
)
;
}
}
}
export
class
WorkerTarget
extends
Target
{
#
workerPromise
?
:
Promise
<
WebWorker
>
;
override
async
worker
(
)
:
Promise
<
WebWorker
|
null
>
{
if
(
!
this
.
#
workerPromise
)
{
const
session
=
this
.
_session
(
)
;
this
.
#
workerPromise
=
(
session
?
Promise
.
resolve
(
session
)
:
this
.
_sessionFactory
(
)
(
false
)
)
.
then
(
client
=
>
{
return
new
WebWorker
(
client
this
.
_getTargetInfo
(
)
.
url
(
)
=
>
{
}
(
)
=
>
{
}
)
;
}
)
;
}
return
this
.
#
workerPromise
;
}
}
export
class
OtherTarget
extends
Target
{
}
