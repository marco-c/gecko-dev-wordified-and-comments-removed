import
{
BrowserContext
as
BrowserContextBase
}
from
'
.
.
/
.
.
/
api
/
BrowserContext
.
js
'
;
import
{
Page
as
PageBase
}
from
'
.
.
/
.
.
/
api
/
Page
.
js
'
;
import
{
Viewport
}
from
'
.
.
/
PuppeteerViewport
.
js
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
import
{
Context
}
from
'
.
/
Context
.
js
'
;
import
{
Page
}
from
'
.
/
Page
.
js
'
;
interface
BrowserContextOptions
{
defaultViewport
:
Viewport
|
null
;
}
export
class
BrowserContext
extends
BrowserContextBase
{
#
connection
:
Connection
;
#
defaultViewport
:
Viewport
|
null
;
constructor
(
connection
:
Connection
options
:
BrowserContextOptions
)
{
super
(
)
;
this
.
#
connection
=
connection
;
this
.
#
defaultViewport
=
options
.
defaultViewport
;
}
override
async
newPage
(
)
:
Promise
<
PageBase
>
{
const
{
result
}
=
await
this
.
#
connection
.
send
(
'
browsingContext
.
create
'
{
type
:
'
tab
'
}
)
;
const
context
=
this
.
#
connection
.
context
(
result
.
context
)
as
Context
;
const
page
=
new
Page
(
context
)
;
if
(
this
.
#
defaultViewport
)
{
try
{
await
page
.
setViewport
(
this
.
#
defaultViewport
)
;
}
catch
{
}
}
return
page
;
}
override
async
close
(
)
:
Promise
<
void
>
{
}
}
