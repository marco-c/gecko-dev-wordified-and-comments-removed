import
{
ChildProcess
}
from
'
child_process
'
;
import
*
as
Bidi
from
'
chromium
-
bidi
/
lib
/
cjs
/
protocol
/
protocol
.
js
'
;
import
{
Browser
as
BrowserBase
BrowserCloseCallback
BrowserContextOptions
BrowserEmittedEvents
}
from
'
.
.
/
.
.
/
api
/
Browser
.
js
'
;
import
{
BrowserContext
as
BrowserContextBase
}
from
'
.
.
/
.
.
/
api
/
BrowserContext
.
js
'
;
import
{
Page
}
from
'
.
.
/
.
.
/
api
/
Page
.
js
'
;
import
{
Viewport
}
from
'
.
.
/
PuppeteerViewport
.
js
'
;
import
{
BrowserContext
}
from
'
.
/
BrowserContext
.
js
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
import
{
debugError
}
from
'
.
/
utils
.
js
'
;
export
class
Browser
extends
BrowserBase
{
static
readonly
subscribeModules
:
Bidi
.
Session
.
SubscriptionRequestEvent
[
]
=
[
'
browsingContext
'
'
network
'
'
log
'
]
;
static
readonly
subscribeCdpEvents
:
Bidi
.
Cdp
.
EventNames
[
]
=
[
'
cdp
.
Debugger
.
scriptParsed
'
'
cdp
.
CSS
.
styleSheetAdded
'
'
cdp
.
Runtime
.
executionContextsCleared
'
'
cdp
.
Tracing
.
tracingComplete
'
]
;
#
browserName
=
'
'
;
#
browserVersion
=
'
'
;
static
async
create
(
opts
:
Options
)
:
Promise
<
Browser
>
{
let
browserName
=
'
'
;
let
browserVersion
=
'
'
;
try
{
const
{
result
}
=
await
opts
.
connection
.
send
(
'
session
.
new
'
{
capabilities
:
{
alwaysMatch
:
{
acceptInsecureCerts
:
opts
.
ignoreHTTPSErrors
}
}
}
)
;
browserName
=
result
.
capabilities
.
browserName
?
?
'
'
;
browserVersion
=
result
.
capabilities
.
browserVersion
?
?
'
'
;
}
catch
(
err
)
{
debugError
(
err
)
;
}
await
opts
.
connection
.
send
(
'
session
.
subscribe
'
{
events
:
browserName
.
toLocaleLowerCase
(
)
.
includes
(
'
firefox
'
)
?
Browser
.
subscribeModules
:
[
.
.
.
Browser
.
subscribeModules
.
.
.
Browser
.
subscribeCdpEvents
]
}
)
;
return
new
Browser
(
{
.
.
.
opts
browserName
browserVersion
}
)
;
}
#
process
?
:
ChildProcess
;
#
closeCallback
?
:
BrowserCloseCallback
;
#
connection
:
Connection
;
#
defaultViewport
:
Viewport
|
null
;
#
defaultContext
:
BrowserContext
;
constructor
(
opts
:
Options
&
{
browserName
:
string
;
browserVersion
:
string
;
}
)
{
super
(
)
;
this
.
#
process
=
opts
.
process
;
this
.
#
closeCallback
=
opts
.
closeCallback
;
this
.
#
connection
=
opts
.
connection
;
this
.
#
defaultViewport
=
opts
.
defaultViewport
;
this
.
#
browserName
=
opts
.
browserName
;
this
.
#
browserVersion
=
opts
.
browserVersion
;
this
.
#
process
?
.
once
(
'
close
'
(
)
=
>
{
this
.
#
connection
.
dispose
(
)
;
this
.
emit
(
BrowserEmittedEvents
.
Disconnected
)
;
}
)
;
this
.
#
defaultContext
=
new
BrowserContext
(
this
{
defaultViewport
:
this
.
#
defaultViewport
isDefault
:
true
}
)
;
}
get
connection
(
)
:
Connection
{
return
this
.
#
connection
;
}
override
wsEndpoint
(
)
:
string
{
return
this
.
#
connection
.
url
;
}
override
async
close
(
)
:
Promise
<
void
>
{
if
(
this
.
#
connection
.
closed
)
{
return
;
}
this
.
#
connection
.
dispose
(
)
;
await
this
.
#
closeCallback
?
.
call
(
null
)
;
}
override
isConnected
(
)
:
boolean
{
return
!
this
.
#
connection
.
closed
;
}
override
process
(
)
:
ChildProcess
|
null
{
return
this
.
#
process
?
?
null
;
}
override
async
createIncognitoBrowserContext
(
_options
?
:
BrowserContextOptions
)
:
Promise
<
BrowserContextBase
>
{
return
new
BrowserContext
(
this
{
defaultViewport
:
this
.
#
defaultViewport
isDefault
:
false
}
)
;
}
override
async
version
(
)
:
Promise
<
string
>
{
return
{
this
.
#
browserName
}
/
{
this
.
#
browserVersion
}
;
}
override
browserContexts
(
)
:
BrowserContext
[
]
{
return
[
this
.
#
defaultContext
]
;
}
override
defaultBrowserContext
(
)
:
BrowserContext
{
return
this
.
#
defaultContext
;
}
override
newPage
(
)
:
Promise
<
Page
>
{
return
this
.
#
defaultContext
.
newPage
(
)
;
}
}
interface
Options
{
process
?
:
ChildProcess
;
closeCallback
?
:
BrowserCloseCallback
;
connection
:
Connection
;
defaultViewport
:
Viewport
|
null
;
ignoreHTTPSErrors
?
:
boolean
;
}
