import
{
ChildProcess
}
from
'
child_process
'
;
import
*
as
Bidi
from
'
chromium
-
bidi
/
lib
/
cjs
/
protocol
/
protocol
.
js
'
;
import
{
Browser
as
BrowserBase
BrowserCloseCallback
BrowserContextOptions
}
from
'
.
.
/
.
.
/
api
/
Browser
.
js
'
;
import
{
BrowserContext
as
BrowserContextBase
}
from
'
.
.
/
.
.
/
api
/
BrowserContext
.
js
'
;
import
{
Viewport
}
from
'
.
.
/
PuppeteerViewport
.
js
'
;
import
{
BrowserContext
}
from
'
.
/
BrowserContext
.
js
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
export
class
Browser
extends
BrowserBase
{
static
async
create
(
opts
:
Options
)
:
Promise
<
Browser
>
{
try
{
await
opts
.
connection
.
send
(
'
session
.
new
'
{
}
)
;
}
catch
{
}
await
opts
.
connection
.
send
(
'
session
.
subscribe
'
{
events
:
[
'
browsingContext
.
contextCreated
'
]
as
Bidi
.
Session
.
SubscribeParametersEvent
[
]
}
)
;
return
new
Browser
(
opts
)
;
}
#
process
?
:
ChildProcess
;
#
closeCallback
?
:
BrowserCloseCallback
;
#
connection
:
Connection
;
#
defaultViewport
:
Viewport
|
null
;
constructor
(
opts
:
Options
)
{
super
(
)
;
this
.
#
process
=
opts
.
process
;
this
.
#
closeCallback
=
opts
.
closeCallback
;
this
.
#
connection
=
opts
.
connection
;
this
.
#
defaultViewport
=
opts
.
defaultViewport
;
}
override
async
close
(
)
:
Promise
<
void
>
{
this
.
#
connection
.
dispose
(
)
;
await
this
.
#
closeCallback
?
.
call
(
null
)
;
}
override
isConnected
(
)
:
boolean
{
return
!
this
.
#
connection
.
closed
;
}
override
process
(
)
:
ChildProcess
|
null
{
return
this
.
#
process
?
?
null
;
}
override
async
createIncognitoBrowserContext
(
_options
?
:
BrowserContextOptions
)
:
Promise
<
BrowserContextBase
>
{
return
new
BrowserContext
(
this
.
#
connection
{
defaultViewport
:
this
.
#
defaultViewport
}
)
;
}
}
interface
Options
{
process
?
:
ChildProcess
;
closeCallback
?
:
BrowserCloseCallback
;
connection
:
Connection
;
defaultViewport
:
Viewport
|
null
;
}
