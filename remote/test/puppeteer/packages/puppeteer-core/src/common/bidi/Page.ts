import
{
Page
as
PageBase
}
from
'
.
.
/
.
.
/
api
/
Page
.
js
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
import
type
{
EvaluateFunc
}
from
'
.
.
/
/
types
.
js
'
;
export
class
Page
extends
PageBase
{
#
connection
:
Connection
;
#
contextId
:
string
;
constructor
(
connection
:
Connection
contextId
:
string
)
{
super
(
)
;
this
.
#
connection
=
connection
;
this
.
#
contextId
=
contextId
;
}
override
async
close
(
)
:
Promise
<
void
>
{
await
this
.
#
connection
.
send
(
'
browsingContext
.
close
'
{
context
:
this
.
#
contextId
}
)
;
}
override
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
_args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
const
str
=
(
{
pageFunction
.
toString
(
)
}
)
(
)
;
const
result
=
(
await
this
.
#
connection
.
send
(
'
script
.
evaluate
'
{
expression
:
str
target
:
{
context
:
this
.
#
contextId
}
awaitPromise
:
true
}
)
)
as
{
result
:
{
type
:
string
;
value
:
any
}
}
;
return
result
.
result
.
value
;
}
}
