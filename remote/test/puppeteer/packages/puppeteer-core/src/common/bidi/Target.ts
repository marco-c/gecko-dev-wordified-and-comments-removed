import
{
Target
TargetType
}
from
'
.
.
/
.
.
/
api
/
Target
.
js
'
;
import
{
CDPSession
}
from
'
.
.
/
Connection
.
js
'
;
import
type
{
WebWorker
}
from
'
.
.
/
WebWorker
.
js
'
;
import
{
BidiBrowser
}
from
'
.
/
Browser
.
js
'
;
import
{
BidiBrowserContext
}
from
'
.
/
BrowserContext
.
js
'
;
import
{
BrowsingContext
CDPSessionWrapper
}
from
'
.
/
BrowsingContext
.
js
'
;
import
{
BidiPage
}
from
'
.
/
Page
.
js
'
;
export
class
BidiTarget
extends
Target
{
protected
_browserContext
:
BidiBrowserContext
;
constructor
(
browserContext
:
BidiBrowserContext
)
{
super
(
)
;
this
.
_browserContext
=
browserContext
;
}
override
async
worker
(
)
:
Promise
<
WebWorker
|
null
>
{
return
null
;
}
override
browser
(
)
:
BidiBrowser
{
return
this
.
_browserContext
.
browser
(
)
;
}
override
browserContext
(
)
:
BidiBrowserContext
{
return
this
.
_browserContext
;
}
override
opener
(
)
:
Target
|
undefined
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
_setBrowserContext
(
browserContext
:
BidiBrowserContext
)
:
void
{
this
.
_browserContext
=
browserContext
;
}
}
export
class
BiDiBrowserTarget
extends
BidiTarget
{
override
url
(
)
:
string
{
return
'
'
;
}
override
type
(
)
:
TargetType
{
return
TargetType
.
BROWSER
;
}
}
export
class
BiDiBrowsingContextTarget
extends
BidiTarget
{
protected
_browsingContext
:
BrowsingContext
;
constructor
(
browserContext
:
BidiBrowserContext
browsingContext
:
BrowsingContext
)
{
super
(
browserContext
)
;
this
.
_browsingContext
=
browsingContext
;
}
override
url
(
)
:
string
{
return
this
.
_browsingContext
.
url
;
}
override
async
createCDPSession
(
)
:
Promise
<
CDPSession
>
{
const
{
sessionId
}
=
await
this
.
_browsingContext
.
cdpSession
.
send
(
'
Target
.
attachToTarget
'
{
targetId
:
this
.
_browsingContext
.
id
flatten
:
true
}
)
;
return
new
CDPSessionWrapper
(
this
.
_browsingContext
sessionId
)
;
}
override
type
(
)
:
TargetType
{
return
TargetType
.
PAGE
;
}
}
export
class
BiDiPageTarget
extends
BiDiBrowsingContextTarget
{
#
page
:
BidiPage
;
constructor
(
browserContext
:
BidiBrowserContext
browsingContext
:
BrowsingContext
)
{
super
(
browserContext
browsingContext
)
;
this
.
#
page
=
new
BidiPage
(
browsingContext
browserContext
)
;
}
override
async
page
(
)
:
Promise
<
BidiPage
|
null
>
{
return
this
.
#
page
;
}
override
_setBrowserContext
(
browserContext
:
BidiBrowserContext
)
:
void
{
super
.
_setBrowserContext
(
browserContext
)
;
this
.
#
page
.
_setBrowserContext
(
browserContext
)
;
}
}
