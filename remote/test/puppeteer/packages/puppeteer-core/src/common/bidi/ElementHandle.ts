import
*
as
Bidi
from
'
chromium
-
bidi
/
lib
/
cjs
/
protocol
/
protocol
.
js
'
;
import
{
ElementHandle
as
BaseElementHandle
}
from
'
.
.
/
.
.
/
api
/
ElementHandle
.
js
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
import
{
Context
}
from
'
.
/
Context
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
export
class
ElementHandle
<
ElementType
extends
Node
=
Element
>
extends
BaseElementHandle
<
ElementType
>
{
declare
handle
:
JSHandle
<
ElementType
>
;
constructor
(
context
:
Context
remoteValue
:
Bidi
.
CommonDataTypes
.
RemoteValue
)
{
super
(
new
JSHandle
(
context
remoteValue
)
)
;
}
context
(
)
:
Context
{
return
this
.
handle
.
context
(
)
;
}
get
connection
(
)
:
Connection
{
return
this
.
handle
.
connection
;
}
get
isPrimitiveValue
(
)
:
boolean
{
return
this
.
handle
.
isPrimitiveValue
;
}
remoteValue
(
)
:
Bidi
.
CommonDataTypes
.
RemoteValue
{
return
this
.
handle
.
remoteValue
(
)
;
}
}
