import
*
as
Bidi
from
'
chromium
-
bidi
/
lib
/
cjs
/
protocol
/
protocol
.
js
'
;
import
{
AutofillData
ElementHandle
as
BaseElementHandle
ClickOptions
}
from
'
.
.
/
.
.
/
api
/
ElementHandle
.
js
'
;
import
{
KeyPressOptions
KeyboardTypeOptions
}
from
'
.
.
/
.
.
/
api
/
Input
.
js
'
;
import
{
assert
}
from
'
.
.
/
.
.
/
util
/
assert
.
js
'
;
import
{
KeyInput
}
from
'
.
.
/
USKeyboardLayout
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
import
{
Realm
}
from
'
.
/
Realm
.
js
'
;
export
class
ElementHandle
<
ElementType
extends
Node
=
Element
>
extends
BaseElementHandle
<
ElementType
>
{
declare
handle
:
JSHandle
<
ElementType
>
;
#
frame
:
Frame
;
constructor
(
realm
:
Realm
remoteValue
:
Bidi
.
CommonDataTypes
.
RemoteValue
frame
:
Frame
)
{
super
(
new
JSHandle
(
realm
remoteValue
)
)
;
this
.
#
frame
=
frame
;
}
override
get
frame
(
)
:
Frame
{
return
this
.
#
frame
;
}
context
(
)
:
Realm
{
return
this
.
handle
.
context
(
)
;
}
get
isPrimitiveValue
(
)
:
boolean
{
return
this
.
handle
.
isPrimitiveValue
;
}
remoteValue
(
)
:
Bidi
.
CommonDataTypes
.
RemoteValue
{
return
this
.
handle
.
remoteValue
(
)
;
}
override
assertElementHasWorld
(
)
:
asserts
this
{
return
;
}
override
async
autofill
(
data
:
AutofillData
)
:
Promise
<
void
>
{
const
client
=
this
.
#
frame
.
context
(
)
.
cdpSession
;
const
nodeInfo
=
await
client
.
send
(
'
DOM
.
describeNode
'
{
objectId
:
this
.
handle
.
id
}
)
;
const
fieldId
=
nodeInfo
.
node
.
backendNodeId
;
const
frameId
=
this
.
#
frame
.
_id
;
await
client
.
send
(
'
Autofill
.
trigger
'
{
fieldId
frameId
card
:
data
.
creditCard
}
)
;
}
override
async
click
(
this
:
ElementHandle
<
Element
>
options
?
:
Readonly
<
ClickOptions
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
const
{
x
=
0
y
=
0
}
=
options
?
.
offset
?
?
{
}
;
const
remoteValue
=
this
.
remoteValue
(
)
;
assert
(
'
sharedId
'
in
remoteValue
)
;
return
this
.
#
frame
.
page
(
)
.
mouse
.
click
(
x
y
Object
.
assign
(
{
}
options
{
origin
:
{
type
:
'
element
'
as
const
element
:
remoteValue
as
Bidi
.
CommonDataTypes
.
SharedReference
}
}
)
)
;
}
override
async
hover
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
const
remoteValue
=
this
.
remoteValue
(
)
;
assert
(
'
sharedId
'
in
remoteValue
)
;
return
this
.
#
frame
.
page
(
)
.
mouse
.
move
(
0
0
{
origin
:
{
type
:
'
element
'
as
const
element
:
remoteValue
as
Bidi
.
CommonDataTypes
.
SharedReference
}
}
)
;
}
override
async
tap
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
const
remoteValue
=
this
.
remoteValue
(
)
;
assert
(
'
sharedId
'
in
remoteValue
)
;
return
this
.
#
frame
.
page
(
)
.
touchscreen
.
tap
(
0
0
{
origin
:
{
type
:
'
element
'
as
const
element
:
remoteValue
as
Bidi
.
CommonDataTypes
.
SharedReference
}
}
)
;
}
override
async
touchStart
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
const
remoteValue
=
this
.
remoteValue
(
)
;
assert
(
'
sharedId
'
in
remoteValue
)
;
return
this
.
#
frame
.
page
(
)
.
touchscreen
.
touchStart
(
0
0
{
origin
:
{
type
:
'
element
'
as
const
element
:
remoteValue
as
Bidi
.
CommonDataTypes
.
SharedReference
}
}
)
;
}
override
async
touchMove
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
const
remoteValue
=
this
.
remoteValue
(
)
;
assert
(
'
sharedId
'
in
remoteValue
)
;
return
this
.
#
frame
.
page
(
)
.
touchscreen
.
touchMove
(
0
0
{
origin
:
{
type
:
'
element
'
as
const
element
:
remoteValue
as
Bidi
.
CommonDataTypes
.
SharedReference
}
}
)
;
}
override
async
touchEnd
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
{
await
this
.
scrollIntoViewIfNeeded
(
)
;
await
this
.
#
frame
.
page
(
)
.
touchscreen
.
touchEnd
(
)
;
}
override
async
type
(
text
:
string
options
?
:
Readonly
<
KeyboardTypeOptions
>
)
:
Promise
<
void
>
{
await
this
.
focus
(
)
;
await
this
.
#
frame
.
page
(
)
.
keyboard
.
type
(
text
options
)
;
}
override
async
press
(
key
:
KeyInput
options
?
:
Readonly
<
KeyPressOptions
>
)
:
Promise
<
void
>
{
await
this
.
focus
(
)
;
await
this
.
#
frame
.
page
(
)
.
keyboard
.
press
(
key
options
)
;
}
}
