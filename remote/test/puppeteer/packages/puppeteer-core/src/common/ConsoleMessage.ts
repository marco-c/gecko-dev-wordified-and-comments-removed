import
type
{
Frame
}
from
'
.
.
/
api
/
Frame
.
js
'
;
import
type
{
JSHandle
}
from
'
.
.
/
api
/
JSHandle
.
js
'
;
export
interface
ConsoleMessageLocation
{
url
?
:
string
;
lineNumber
?
:
number
;
columnNumber
?
:
number
;
}
export
type
ConsoleMessageType
=
|
'
log
'
|
'
debug
'
|
'
info
'
|
'
error
'
|
'
warn
'
|
'
dir
'
|
'
dirxml
'
|
'
table
'
|
'
trace
'
|
'
clear
'
|
'
startGroup
'
|
'
startGroupCollapsed
'
|
'
endGroup
'
|
'
assert
'
|
'
profile
'
|
'
profileEnd
'
|
'
count
'
|
'
timeEnd
'
|
'
verbose
'
;
export
class
ConsoleMessage
{
#
type
:
ConsoleMessageType
;
#
text
:
string
;
#
args
:
JSHandle
[
]
;
#
stackTraceLocations
:
ConsoleMessageLocation
[
]
;
#
frame
?
:
Frame
;
constructor
(
type
:
ConsoleMessageType
text
:
string
args
:
JSHandle
[
]
stackTraceLocations
:
ConsoleMessageLocation
[
]
frame
?
:
Frame
)
{
this
.
#
type
=
type
;
this
.
#
text
=
text
;
this
.
#
args
=
args
;
this
.
#
stackTraceLocations
=
stackTraceLocations
;
this
.
#
frame
=
frame
;
}
type
(
)
:
ConsoleMessageType
{
return
this
.
#
type
;
}
text
(
)
:
string
{
return
this
.
#
text
;
}
args
(
)
:
JSHandle
[
]
{
return
this
.
#
args
;
}
location
(
)
:
ConsoleMessageLocation
{
return
(
this
.
#
stackTraceLocations
[
0
]
?
?
(
this
.
#
frame
?
{
url
:
this
.
#
frame
.
url
(
)
}
:
{
}
)
)
;
}
stackTrace
(
)
:
ConsoleMessageLocation
[
]
{
return
this
.
#
stackTraceLocations
;
}
}
