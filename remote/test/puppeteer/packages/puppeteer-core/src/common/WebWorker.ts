import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
ConsoleMessageType
}
from
'
.
/
ConsoleMessage
.
js
'
;
import
{
EvaluateFunc
HandleFor
}
from
'
.
/
types
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
import
{
debugError
}
from
'
.
/
util
.
js
'
;
import
{
createDeferredPromise
}
from
'
.
.
/
util
/
DeferredPromise
.
js
'
;
export
type
ConsoleAPICalledCallback
=
(
eventType
:
ConsoleMessageType
handles
:
JSHandle
[
]
trace
:
Protocol
.
Runtime
.
StackTrace
)
=
>
void
;
export
type
ExceptionThrownCallback
=
(
details
:
Protocol
.
Runtime
.
ExceptionDetails
)
=
>
void
;
export
class
WebWorker
extends
EventEmitter
{
#
executionContext
=
createDeferredPromise
<
ExecutionContext
>
(
)
;
#
client
:
CDPSession
;
#
url
:
string
;
constructor
(
client
:
CDPSession
url
:
string
consoleAPICalled
:
ConsoleAPICalledCallback
exceptionThrown
:
ExceptionThrownCallback
)
{
super
(
)
;
this
.
#
client
=
client
;
this
.
#
url
=
url
;
this
.
#
client
.
once
(
'
Runtime
.
executionContextCreated
'
async
event
=
>
{
const
context
=
new
ExecutionContext
(
client
event
.
context
)
;
this
.
#
executionContext
.
resolve
(
context
)
;
}
)
;
this
.
#
client
.
on
(
'
Runtime
.
consoleAPICalled
'
async
event
=
>
{
const
context
=
await
this
.
#
executionContext
;
return
consoleAPICalled
(
event
.
type
event
.
args
.
map
(
(
object
:
Protocol
.
Runtime
.
RemoteObject
)
=
>
{
return
new
JSHandle
(
context
object
)
;
}
)
event
.
stackTrace
)
;
}
)
;
this
.
#
client
.
on
(
'
Runtime
.
exceptionThrown
'
exception
=
>
{
return
exceptionThrown
(
exception
.
exceptionDetails
)
;
}
)
;
this
.
#
client
.
send
(
'
Runtime
.
enable
'
)
.
catch
(
debugError
)
;
}
async
executionContext
(
)
:
Promise
<
ExecutionContext
>
{
return
this
.
#
executionContext
;
}
url
(
)
:
string
{
return
this
.
#
url
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
const
context
=
await
this
.
#
executionContext
;
return
context
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
const
context
=
await
this
.
#
executionContext
;
return
context
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
}
