import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
ElementHandle
}
from
'
.
.
/
api
/
ElementHandle
.
js
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
export
class
FileChooser
{
#
element
:
ElementHandle
<
HTMLInputElement
>
;
#
multiple
:
boolean
;
#
handled
=
false
;
constructor
(
element
:
ElementHandle
<
HTMLInputElement
>
event
:
Protocol
.
Page
.
FileChooserOpenedEvent
)
{
this
.
#
element
=
element
;
this
.
#
multiple
=
event
.
mode
!
=
=
'
selectSingle
'
;
}
isMultiple
(
)
:
boolean
{
return
this
.
#
multiple
;
}
async
accept
(
paths
:
string
[
]
)
:
Promise
<
void
>
{
assert
(
!
this
.
#
handled
'
Cannot
accept
FileChooser
which
is
already
handled
!
'
)
;
this
.
#
handled
=
true
;
await
this
.
#
element
.
uploadFile
(
.
.
.
paths
)
;
}
async
cancel
(
)
:
Promise
<
void
>
{
assert
(
!
this
.
#
handled
'
Cannot
cancel
FileChooser
which
is
already
handled
!
'
)
;
this
.
#
handled
=
true
;
await
this
.
#
element
.
evaluate
(
element
=
>
{
element
.
dispatchEvent
(
new
Event
(
'
cancel
'
{
bubbles
:
true
}
)
)
;
}
)
;
}
}
