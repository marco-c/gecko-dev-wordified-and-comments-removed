import
{
ARIAQueryHandler
}
from
'
.
/
AriaQueryHandler
.
js
'
;
import
{
customQueryHandlers
}
from
'
.
/
CustomQueryHandler
.
js
'
;
import
{
PierceQueryHandler
}
from
'
.
/
PierceQueryHandler
.
js
'
;
import
{
PQueryHandler
}
from
'
.
/
PQueryHandler
.
js
'
;
import
type
{
QueryHandler
}
from
'
.
/
QueryHandler
.
js
'
;
import
{
TextQueryHandler
}
from
'
.
/
TextQueryHandler
.
js
'
;
import
{
XPathQueryHandler
}
from
'
.
/
XPathQueryHandler
.
js
'
;
export
const
BUILTIN_QUERY_HANDLERS
=
Object
.
freeze
(
{
aria
:
ARIAQueryHandler
pierce
:
PierceQueryHandler
xpath
:
XPathQueryHandler
text
:
TextQueryHandler
}
)
;
const
QUERY_SEPARATORS
=
[
'
=
'
'
/
'
]
;
export
function
getQueryHandlerByName
(
name
:
string
)
:
typeof
QueryHandler
|
undefined
{
if
(
name
in
BUILTIN_QUERY_HANDLERS
)
{
return
BUILTIN_QUERY_HANDLERS
[
name
as
'
aria
'
]
;
}
return
customQueryHandlers
.
get
(
name
)
;
}
export
function
getQueryHandlerAndSelector
(
selector
:
string
)
:
{
updatedSelector
:
string
;
QueryHandler
:
typeof
QueryHandler
;
}
{
for
(
const
handlerMap
of
[
customQueryHandlers
.
names
(
)
.
map
(
name
=
>
{
return
[
name
customQueryHandlers
.
get
(
name
)
!
]
as
const
;
}
)
Object
.
entries
(
BUILTIN_QUERY_HANDLERS
)
]
)
{
for
(
const
[
name
QueryHandler
]
of
handlerMap
)
{
for
(
const
separator
of
QUERY_SEPARATORS
)
{
const
prefix
=
{
name
}
{
separator
}
;
if
(
selector
.
startsWith
(
prefix
)
)
{
selector
=
selector
.
slice
(
prefix
.
length
)
;
return
{
updatedSelector
:
selector
QueryHandler
}
;
}
}
}
}
return
{
updatedSelector
:
selector
QueryHandler
:
PQueryHandler
}
;
}
