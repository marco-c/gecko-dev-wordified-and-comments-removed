import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
TargetFilterCallback
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
Deferred
}
from
'
.
.
/
util
/
Deferred
.
js
'
;
import
{
CDPSession
CDPSessionEmittedEvents
Connection
}
from
'
.
/
Connection
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
CDPTarget
}
from
'
.
/
Target
.
js
'
;
import
{
TargetFactory
TargetManagerEmittedEvents
TargetManager
}
from
'
.
/
TargetManager
.
js
'
;
export
class
FirefoxTargetManager
extends
EventEmitter
implements
TargetManager
{
#
connection
:
Connection
;
#
discoveredTargetsByTargetId
=
new
Map
<
string
Protocol
.
Target
.
TargetInfo
>
(
)
;
#
availableTargetsByTargetId
=
new
Map
<
string
CDPTarget
>
(
)
;
#
availableTargetsBySessionId
=
new
Map
<
string
CDPTarget
>
(
)
;
#
ignoredTargets
=
new
Set
<
string
>
(
)
;
#
targetFilterCallback
:
TargetFilterCallback
|
undefined
;
#
targetFactory
:
TargetFactory
;
#
attachedToTargetListenersBySession
=
new
WeakMap
<
CDPSession
|
Connection
(
event
:
Protocol
.
Target
.
AttachedToTargetEvent
)
=
>
Promise
<
void
>
>
(
)
;
#
initializeDeferred
=
Deferred
.
create
<
void
>
(
)
;
#
targetsIdsForInit
=
new
Set
<
string
>
(
)
;
constructor
(
connection
:
Connection
targetFactory
:
TargetFactory
targetFilterCallback
?
:
TargetFilterCallback
)
{
super
(
)
;
this
.
#
connection
=
connection
;
this
.
#
targetFilterCallback
=
targetFilterCallback
;
this
.
#
targetFactory
=
targetFactory
;
this
.
#
connection
.
on
(
'
Target
.
targetCreated
'
this
.
#
onTargetCreated
)
;
this
.
#
connection
.
on
(
'
Target
.
targetDestroyed
'
this
.
#
onTargetDestroyed
)
;
this
.
#
connection
.
on
(
'
sessiondetached
'
this
.
#
onSessionDetached
)
;
this
.
setupAttachmentListeners
(
this
.
#
connection
)
;
}
setupAttachmentListeners
(
session
:
CDPSession
|
Connection
)
:
void
{
const
listener
=
(
event
:
Protocol
.
Target
.
AttachedToTargetEvent
)
=
>
{
return
this
.
#
onAttachedToTarget
(
session
event
)
;
}
;
assert
(
!
this
.
#
attachedToTargetListenersBySession
.
has
(
session
)
)
;
this
.
#
attachedToTargetListenersBySession
.
set
(
session
listener
)
;
session
.
on
(
'
Target
.
attachedToTarget
'
listener
)
;
}
#
onSessionDetached
=
(
session
:
CDPSession
)
=
>
{
this
.
removeSessionListeners
(
session
)
;
this
.
#
availableTargetsBySessionId
.
delete
(
session
.
id
(
)
)
;
}
;
removeSessionListeners
(
session
:
CDPSession
)
:
void
{
if
(
this
.
#
attachedToTargetListenersBySession
.
has
(
session
)
)
{
session
.
off
(
'
Target
.
attachedToTarget
'
this
.
#
attachedToTargetListenersBySession
.
get
(
session
)
!
)
;
this
.
#
attachedToTargetListenersBySession
.
delete
(
session
)
;
}
}
getAvailableTargets
(
)
:
Map
<
string
CDPTarget
>
{
return
this
.
#
availableTargetsByTargetId
;
}
dispose
(
)
:
void
{
this
.
#
connection
.
off
(
'
Target
.
targetCreated
'
this
.
#
onTargetCreated
)
;
this
.
#
connection
.
off
(
'
Target
.
targetDestroyed
'
this
.
#
onTargetDestroyed
)
;
}
async
initialize
(
)
:
Promise
<
void
>
{
await
this
.
#
connection
.
send
(
'
Target
.
setDiscoverTargets
'
{
discover
:
true
filter
:
[
{
}
]
}
)
;
this
.
#
targetsIdsForInit
=
new
Set
(
this
.
#
discoveredTargetsByTargetId
.
keys
(
)
)
;
await
this
.
#
initializeDeferred
.
valueOrThrow
(
)
;
}
#
onTargetCreated
=
async
(
event
:
Protocol
.
Target
.
TargetCreatedEvent
)
:
Promise
<
void
>
=
>
{
if
(
this
.
#
discoveredTargetsByTargetId
.
has
(
event
.
targetInfo
.
targetId
)
)
{
return
;
}
this
.
#
discoveredTargetsByTargetId
.
set
(
event
.
targetInfo
.
targetId
event
.
targetInfo
)
;
if
(
event
.
targetInfo
.
type
=
=
=
'
browser
'
&
&
event
.
targetInfo
.
attached
)
{
const
target
=
this
.
#
targetFactory
(
event
.
targetInfo
undefined
)
;
target
.
_initialize
(
)
;
this
.
#
availableTargetsByTargetId
.
set
(
event
.
targetInfo
.
targetId
target
)
;
this
.
#
finishInitializationIfReady
(
target
.
_targetId
)
;
return
;
}
const
target
=
this
.
#
targetFactory
(
event
.
targetInfo
undefined
)
;
if
(
this
.
#
targetFilterCallback
&
&
!
this
.
#
targetFilterCallback
(
target
)
)
{
this
.
#
ignoredTargets
.
add
(
event
.
targetInfo
.
targetId
)
;
this
.
#
finishInitializationIfReady
(
event
.
targetInfo
.
targetId
)
;
return
;
}
target
.
_initialize
(
)
;
this
.
#
availableTargetsByTargetId
.
set
(
event
.
targetInfo
.
targetId
target
)
;
this
.
emit
(
TargetManagerEmittedEvents
.
TargetAvailable
target
)
;
this
.
#
finishInitializationIfReady
(
target
.
_targetId
)
;
}
;
#
onTargetDestroyed
=
(
event
:
Protocol
.
Target
.
TargetDestroyedEvent
)
:
void
=
>
{
this
.
#
discoveredTargetsByTargetId
.
delete
(
event
.
targetId
)
;
this
.
#
finishInitializationIfReady
(
event
.
targetId
)
;
const
target
=
this
.
#
availableTargetsByTargetId
.
get
(
event
.
targetId
)
;
if
(
target
)
{
this
.
emit
(
TargetManagerEmittedEvents
.
TargetGone
target
)
;
this
.
#
availableTargetsByTargetId
.
delete
(
event
.
targetId
)
;
}
}
;
#
onAttachedToTarget
=
async
(
parentSession
:
Connection
|
CDPSession
event
:
Protocol
.
Target
.
AttachedToTargetEvent
)
=
>
{
const
targetInfo
=
event
.
targetInfo
;
const
session
=
this
.
#
connection
.
session
(
event
.
sessionId
)
;
if
(
!
session
)
{
throw
new
Error
(
Session
{
event
.
sessionId
}
was
not
created
.
)
;
}
const
target
=
this
.
#
availableTargetsByTargetId
.
get
(
targetInfo
.
targetId
)
;
assert
(
target
Target
{
targetInfo
.
targetId
}
is
missing
)
;
this
.
setupAttachmentListeners
(
session
)
;
this
.
#
availableTargetsBySessionId
.
set
(
session
.
id
(
)
this
.
#
availableTargetsByTargetId
.
get
(
targetInfo
.
targetId
)
!
)
;
parentSession
.
emit
(
CDPSessionEmittedEvents
.
Ready
session
)
;
}
;
#
finishInitializationIfReady
(
targetId
:
string
)
:
void
{
this
.
#
targetsIdsForInit
.
delete
(
targetId
)
;
if
(
this
.
#
targetsIdsForInit
.
size
=
=
=
0
)
{
this
.
#
initializeDeferred
.
resolve
(
)
;
}
}
}
