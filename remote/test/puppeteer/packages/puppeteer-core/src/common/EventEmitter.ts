import
mitt
{
Emitter
EventHandlerMap
}
from
'
.
.
/
.
.
/
third_party
/
mitt
/
index
.
js
'
;
export
type
EventType
=
string
|
symbol
;
export
type
Handler
<
T
=
unknown
>
=
(
event
:
T
)
=
>
void
;
export
interface
CommonEventEmitter
{
on
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
off
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
addListener
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
removeListener
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
emit
(
event
:
EventType
eventData
?
:
unknown
)
:
boolean
;
once
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
listenerCount
(
event
:
string
)
:
number
;
removeAllListeners
(
event
?
:
EventType
)
:
CommonEventEmitter
;
}
export
class
EventEmitter
implements
CommonEventEmitter
{
private
emitter
:
Emitter
<
Record
<
string
|
symbol
any
>
>
;
private
eventsMap
:
EventHandlerMap
<
Record
<
string
|
symbol
any
>
>
=
new
Map
(
)
;
constructor
(
)
{
this
.
emitter
=
mitt
(
this
.
eventsMap
)
;
}
on
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
{
this
.
emitter
.
on
(
event
handler
)
;
return
this
;
}
off
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
{
this
.
emitter
.
off
(
event
handler
)
;
return
this
;
}
removeListener
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
{
this
.
off
(
event
handler
)
;
return
this
;
}
addListener
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
{
this
.
on
(
event
handler
)
;
return
this
;
}
emit
(
event
:
EventType
eventData
?
:
unknown
)
:
boolean
{
this
.
emitter
.
emit
(
event
eventData
)
;
return
this
.
eventListenersCount
(
event
)
>
0
;
}
once
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
{
const
onceHandler
:
Handler
<
any
>
=
eventData
=
>
{
handler
(
eventData
)
;
this
.
off
(
event
onceHandler
)
;
}
;
return
this
.
on
(
event
onceHandler
)
;
}
listenerCount
(
event
:
EventType
)
:
number
{
return
this
.
eventListenersCount
(
event
)
;
}
removeAllListeners
(
event
?
:
EventType
)
:
EventEmitter
{
if
(
event
)
{
this
.
eventsMap
.
delete
(
event
)
;
}
else
{
this
.
eventsMap
.
clear
(
)
;
}
return
this
;
}
private
eventListenersCount
(
event
:
EventType
)
:
number
{
return
this
.
eventsMap
.
get
(
event
)
?
.
length
|
|
0
;
}
}
