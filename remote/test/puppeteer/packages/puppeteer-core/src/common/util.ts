import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
Readable
}
from
'
stream
'
;
import
{
isNode
}
from
'
.
.
/
environment
.
js
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
isErrorLike
}
from
'
.
.
/
util
/
ErrorLike
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
debug
}
from
'
.
/
Debug
.
js
'
;
import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
TimeoutError
}
from
'
.
/
Errors
.
js
'
;
import
{
CommonEventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
export
const
debugError
=
debug
(
'
puppeteer
:
error
'
)
;
export
function
getExceptionMessage
(
exceptionDetails
:
Protocol
.
Runtime
.
ExceptionDetails
)
:
string
{
if
(
exceptionDetails
.
exception
)
{
return
(
exceptionDetails
.
exception
.
description
|
|
exceptionDetails
.
exception
.
value
)
;
}
let
message
=
exceptionDetails
.
text
;
if
(
exceptionDetails
.
stackTrace
)
{
for
(
const
callframe
of
exceptionDetails
.
stackTrace
.
callFrames
)
{
const
location
=
callframe
.
url
+
'
:
'
+
callframe
.
lineNumber
+
'
:
'
+
callframe
.
columnNumber
;
const
functionName
=
callframe
.
functionName
|
|
'
<
anonymous
>
'
;
message
+
=
\
n
at
{
functionName
}
(
{
location
}
)
;
}
}
return
message
;
}
export
function
valueFromRemoteObject
(
remoteObject
:
Protocol
.
Runtime
.
RemoteObject
)
:
any
{
assert
(
!
remoteObject
.
objectId
'
Cannot
extract
value
when
objectId
is
given
'
)
;
if
(
remoteObject
.
unserializableValue
)
{
if
(
remoteObject
.
type
=
=
=
'
bigint
'
&
&
typeof
BigInt
!
=
=
'
undefined
'
)
{
return
BigInt
(
remoteObject
.
unserializableValue
.
replace
(
'
n
'
'
'
)
)
;
}
switch
(
remoteObject
.
unserializableValue
)
{
case
'
-
0
'
:
return
-
0
;
case
'
NaN
'
:
return
NaN
;
case
'
Infinity
'
:
return
Infinity
;
case
'
-
Infinity
'
:
return
-
Infinity
;
default
:
throw
new
Error
(
'
Unsupported
unserializable
value
:
'
+
remoteObject
.
unserializableValue
)
;
}
}
return
remoteObject
.
value
;
}
export
async
function
releaseObject
(
client
:
CDPSession
remoteObject
:
Protocol
.
Runtime
.
RemoteObject
)
:
Promise
<
void
>
{
if
(
!
remoteObject
.
objectId
)
{
return
;
}
await
client
.
send
(
'
Runtime
.
releaseObject
'
{
objectId
:
remoteObject
.
objectId
}
)
.
catch
(
error
=
>
{
debugError
(
error
)
;
}
)
;
}
export
interface
PuppeteerEventListener
{
emitter
:
CommonEventEmitter
;
eventName
:
string
|
symbol
;
handler
:
(
.
.
.
args
:
any
[
]
)
=
>
void
;
}
export
function
addEventListener
(
emitter
:
CommonEventEmitter
eventName
:
string
|
symbol
handler
:
(
.
.
.
args
:
any
[
]
)
=
>
void
)
:
PuppeteerEventListener
{
emitter
.
on
(
eventName
handler
)
;
return
{
emitter
eventName
handler
}
;
}
export
function
removeEventListeners
(
listeners
:
Array
<
{
emitter
:
CommonEventEmitter
;
eventName
:
string
|
symbol
;
handler
:
(
.
.
.
args
:
any
[
]
)
=
>
void
;
}
>
)
:
void
{
for
(
const
listener
of
listeners
)
{
listener
.
emitter
.
removeListener
(
listener
.
eventName
listener
.
handler
)
;
}
listeners
.
length
=
0
;
}
export
const
isString
=
(
obj
:
unknown
)
:
obj
is
string
=
>
{
return
typeof
obj
=
=
=
'
string
'
|
|
obj
instanceof
String
;
}
;
export
const
isNumber
=
(
obj
:
unknown
)
:
obj
is
number
=
>
{
return
typeof
obj
=
=
=
'
number
'
|
|
obj
instanceof
Number
;
}
;
export
async
function
waitForEvent
<
T
>
(
emitter
:
CommonEventEmitter
eventName
:
string
|
symbol
predicate
:
(
event
:
T
)
=
>
Promise
<
boolean
>
|
boolean
timeout
:
number
abortPromise
:
Promise
<
Error
>
)
:
Promise
<
T
>
{
let
eventTimeout
:
NodeJS
.
Timeout
;
let
resolveCallback
:
(
value
:
T
|
PromiseLike
<
T
>
)
=
>
void
;
let
rejectCallback
:
(
value
:
Error
)
=
>
void
;
const
promise
=
new
Promise
<
T
>
(
(
resolve
reject
)
=
>
{
resolveCallback
=
resolve
;
rejectCallback
=
reject
;
}
)
;
const
listener
=
addEventListener
(
emitter
eventName
async
event
=
>
{
if
(
!
(
await
predicate
(
event
)
)
)
{
return
;
}
resolveCallback
(
event
)
;
}
)
;
if
(
timeout
)
{
eventTimeout
=
setTimeout
(
(
)
=
>
{
rejectCallback
(
new
TimeoutError
(
'
Timeout
exceeded
while
waiting
for
event
'
)
)
;
}
timeout
)
;
}
function
cleanup
(
)
:
void
{
removeEventListeners
(
[
listener
]
)
;
clearTimeout
(
eventTimeout
)
;
}
const
result
=
await
Promise
.
race
(
[
promise
abortPromise
]
)
.
then
(
r
=
>
{
cleanup
(
)
;
return
r
;
}
error
=
>
{
cleanup
(
)
;
throw
error
;
}
)
;
if
(
isErrorLike
(
result
)
)
{
throw
result
;
}
return
result
;
}
export
function
createJSHandle
(
context
:
ExecutionContext
remoteObject
:
Protocol
.
Runtime
.
RemoteObject
)
:
JSHandle
|
ElementHandle
<
Node
>
{
if
(
remoteObject
.
subtype
=
=
=
'
node
'
&
&
context
.
_world
)
{
return
new
ElementHandle
(
context
remoteObject
context
.
_world
.
frame
(
)
)
;
}
return
new
JSHandle
(
context
remoteObject
)
;
}
export
function
evaluationString
(
fun
:
Function
|
string
.
.
.
args
:
unknown
[
]
)
:
string
{
if
(
isString
(
fun
)
)
{
assert
(
args
.
length
=
=
=
0
'
Cannot
evaluate
a
string
with
arguments
'
)
;
return
fun
;
}
function
serializeArgument
(
arg
:
unknown
)
:
string
{
if
(
Object
.
is
(
arg
undefined
)
)
{
return
'
undefined
'
;
}
return
JSON
.
stringify
(
arg
)
;
}
return
(
{
fun
}
)
(
{
args
.
map
(
serializeArgument
)
.
join
(
'
'
)
}
)
;
}
export
function
pageBindingInitString
(
type
:
string
name
:
string
)
:
string
{
function
addPageBinding
(
type
:
string
name
:
string
)
:
void
{
const
callCDP
=
self
[
name
]
;
Object
.
assign
(
self
{
[
name
]
(
.
.
.
args
:
unknown
[
]
)
:
Promise
<
unknown
>
{
const
callPuppeteer
=
self
[
name
]
;
callPuppeteer
.
callbacks
?
?
=
new
Map
(
)
;
const
seq
=
(
callPuppeteer
.
lastSeq
?
?
0
)
+
1
;
callPuppeteer
.
lastSeq
=
seq
;
callCDP
(
JSON
.
stringify
(
{
type
name
seq
args
}
)
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
callPuppeteer
.
callbacks
.
set
(
seq
{
resolve
reject
}
)
;
}
)
;
}
}
)
;
}
return
evaluationString
(
addPageBinding
type
name
)
;
}
export
function
pageBindingDeliverResultString
(
name
:
string
seq
:
number
result
:
unknown
)
:
string
{
function
deliverResult
(
name
:
string
seq
:
number
result
:
unknown
)
:
void
{
(
window
as
any
)
[
name
]
.
callbacks
.
get
(
seq
)
.
resolve
(
result
)
;
(
window
as
any
)
[
name
]
.
callbacks
.
delete
(
seq
)
;
}
return
evaluationString
(
deliverResult
name
seq
result
)
;
}
export
function
pageBindingDeliverErrorString
(
name
:
string
seq
:
number
message
:
string
stack
?
:
string
)
:
string
{
function
deliverError
(
name
:
string
seq
:
number
message
:
string
stack
?
:
string
)
:
void
{
const
error
=
new
Error
(
message
)
;
error
.
stack
=
stack
;
(
window
as
any
)
[
name
]
.
callbacks
.
get
(
seq
)
.
reject
(
error
)
;
(
window
as
any
)
[
name
]
.
callbacks
.
delete
(
seq
)
;
}
return
evaluationString
(
deliverError
name
seq
message
stack
)
;
}
export
function
pageBindingDeliverErrorValueString
(
name
:
string
seq
:
number
value
:
unknown
)
:
string
{
function
deliverErrorValue
(
name
:
string
seq
:
number
value
:
unknown
)
:
void
{
(
window
as
any
)
[
name
]
.
callbacks
.
get
(
seq
)
.
reject
(
value
)
;
(
window
as
any
)
[
name
]
.
callbacks
.
delete
(
seq
)
;
}
return
evaluationString
(
deliverErrorValue
name
seq
value
)
;
}
export
async
function
waitWithTimeout
<
T
>
(
promise
:
Promise
<
T
>
taskName
:
string
timeout
:
number
)
:
Promise
<
T
>
{
let
reject
:
(
reason
?
:
Error
)
=
>
void
;
const
timeoutError
=
new
TimeoutError
(
waiting
for
{
taskName
}
failed
:
timeout
{
timeout
}
ms
exceeded
)
;
const
timeoutPromise
=
new
Promise
<
T
>
(
(
_res
rej
)
=
>
{
return
(
reject
=
rej
)
;
}
)
;
let
timeoutTimer
=
null
;
if
(
timeout
)
{
timeoutTimer
=
setTimeout
(
(
)
=
>
{
return
reject
(
timeoutError
)
;
}
timeout
)
;
}
try
{
return
await
Promise
.
race
(
[
promise
timeoutPromise
]
)
;
}
finally
{
if
(
timeoutTimer
)
{
clearTimeout
(
timeoutTimer
)
;
}
}
}
let
fs
:
typeof
import
(
'
fs
'
)
|
null
=
null
;
export
async
function
importFS
(
)
:
Promise
<
typeof
import
(
'
fs
'
)
>
{
if
(
!
fs
)
{
fs
=
await
import
(
'
fs
'
)
;
}
return
fs
;
}
export
async
function
getReadableAsBuffer
(
readable
:
Readable
path
?
:
string
)
:
Promise
<
Buffer
|
null
>
{
const
buffers
=
[
]
;
if
(
path
)
{
let
fs
:
typeof
import
(
'
fs
'
)
.
promises
;
try
{
fs
=
(
await
importFS
(
)
)
.
promises
;
}
catch
(
error
)
{
if
(
error
instanceof
TypeError
)
{
throw
new
Error
(
'
Cannot
write
to
a
path
outside
of
a
Node
-
like
environment
.
'
)
;
}
throw
error
;
}
const
fileHandle
=
await
fs
.
open
(
path
'
w
+
'
)
;
for
await
(
const
chunk
of
readable
)
{
buffers
.
push
(
chunk
)
;
await
fileHandle
.
writeFile
(
chunk
)
;
}
await
fileHandle
.
close
(
)
;
}
else
{
for
await
(
const
chunk
of
readable
)
{
buffers
.
push
(
chunk
)
;
}
}
try
{
return
Buffer
.
concat
(
buffers
)
;
}
catch
(
error
)
{
return
null
;
}
}
export
async
function
getReadableFromProtocolStream
(
client
:
CDPSession
handle
:
string
)
:
Promise
<
Readable
>
{
if
(
!
isNode
)
{
throw
new
Error
(
'
Cannot
create
a
stream
outside
of
Node
.
js
environment
.
'
)
;
}
const
{
Readable
}
=
await
import
(
'
stream
'
)
;
let
eof
=
false
;
return
new
Readable
(
{
async
read
(
size
:
number
)
{
if
(
eof
)
{
return
;
}
const
response
=
await
client
.
send
(
'
IO
.
read
'
{
handle
size
}
)
;
this
.
push
(
response
.
data
response
.
base64Encoded
?
'
base64
'
:
undefined
)
;
if
(
response
.
eof
)
{
eof
=
true
;
await
client
.
send
(
'
IO
.
close
'
{
handle
}
)
;
this
.
push
(
null
)
;
}
}
}
)
;
}
