import
type
{
ParseSelector
}
from
'
typed
-
query
-
selector
/
parser
.
js
'
;
import
type
{
ElementHandle
}
from
'
.
.
/
api
/
ElementHandle
.
js
'
;
import
type
{
JSHandle
}
from
'
.
.
/
api
/
JSHandle
.
js
'
;
import
type
{
LazyArg
}
from
'
.
/
LazyArg
.
js
'
;
export
type
AwaitablePredicate
<
T
>
=
(
value
:
T
)
=
>
Awaitable
<
boolean
>
;
export
interface
Moveable
{
move
(
)
:
this
;
}
export
interface
Disposed
{
get
disposed
(
)
:
boolean
;
}
export
interface
BindingPayload
{
type
:
string
;
name
:
string
;
seq
:
number
;
args
:
unknown
[
]
;
isTrivial
:
boolean
;
}
export
type
AwaitableIterator
<
T
>
=
Iterator
<
T
>
|
AsyncIterator
<
T
>
;
export
type
AwaitableIterable
<
T
>
=
Iterable
<
T
>
|
AsyncIterable
<
T
>
;
export
type
Awaitable
<
T
>
=
T
|
PromiseLike
<
T
>
;
export
type
HandleFor
<
T
>
=
T
extends
Node
?
ElementHandle
<
T
>
:
JSHandle
<
T
>
;
export
type
HandleOr
<
T
>
=
HandleFor
<
T
>
|
JSHandle
<
T
>
|
T
;
export
type
FlattenHandle
<
T
>
=
T
extends
HandleOr
<
infer
U
>
?
U
:
never
;
export
type
FlattenLazyArg
<
T
>
=
T
extends
LazyArg
<
infer
U
>
?
U
:
T
;
export
type
InnerLazyParams
<
T
extends
unknown
[
]
>
=
{
[
K
in
keyof
T
]
:
FlattenLazyArg
<
T
[
K
]
>
;
}
;
export
type
InnerParams
<
T
extends
unknown
[
]
>
=
{
[
K
in
keyof
T
]
:
FlattenHandle
<
T
[
K
]
>
;
}
;
export
type
ElementFor
<
TagName
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
>
=
TagName
extends
keyof
HTMLElementTagNameMap
?
HTMLElementTagNameMap
[
TagName
]
:
TagName
extends
keyof
SVGElementTagNameMap
?
SVGElementTagNameMap
[
TagName
]
:
never
;
export
type
EvaluateFunc
<
T
extends
unknown
[
]
>
=
(
.
.
.
params
:
InnerParams
<
T
>
)
=
>
Awaitable
<
unknown
>
;
export
type
EvaluateFuncWith
<
V
T
extends
unknown
[
]
>
=
(
.
.
.
params
:
[
V
.
.
.
InnerParams
<
T
>
]
)
=
>
Awaitable
<
unknown
>
;
export
type
NodeFor
<
ComplexSelector
extends
string
>
=
ParseSelector
<
ComplexSelector
>
;
