import
type
PuppeteerUtil
from
'
.
.
/
injected
/
injected
.
js
'
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
interpolateFunction
stringifyFunction
}
from
'
.
.
/
util
/
Function
.
js
'
;
import
{
QueryHandler
QuerySelector
QuerySelectorAll
}
from
'
.
/
QueryHandler
.
js
'
;
import
{
scriptInjector
}
from
'
.
/
ScriptInjector
.
js
'
;
export
interface
CustomQueryHandler
{
queryOne
?
:
(
node
:
Node
selector
:
string
)
=
>
Node
|
null
;
queryAll
?
:
(
node
:
Node
selector
:
string
)
=
>
Iterable
<
Node
>
;
}
export
class
CustomQueryHandlerRegistry
{
#
handlers
=
new
Map
<
string
[
registerScript
:
string
Handler
:
typeof
QueryHandler
]
>
(
)
;
get
(
name
:
string
)
:
typeof
QueryHandler
|
undefined
{
const
handler
=
this
.
#
handlers
.
get
(
name
)
;
return
handler
?
handler
[
1
]
:
undefined
;
}
register
(
name
:
string
handler
:
CustomQueryHandler
)
:
void
{
assert
(
!
this
.
#
handlers
.
has
(
name
)
Cannot
register
over
existing
handler
:
{
name
}
)
;
assert
(
/
^
[
a
-
zA
-
Z
]
+
/
.
test
(
name
)
Custom
query
handler
names
may
only
contain
[
a
-
zA
-
Z
]
)
;
assert
(
handler
.
queryAll
|
|
handler
.
queryOne
At
least
one
query
method
must
be
implemented
.
)
;
const
Handler
=
class
extends
QueryHandler
{
static
override
querySelectorAll
:
QuerySelectorAll
=
interpolateFunction
(
(
node
selector
PuppeteerUtil
)
=
>
{
return
PuppeteerUtil
.
customQuerySelectors
.
get
(
PLACEHOLDER
(
'
name
'
)
)
!
.
querySelectorAll
(
node
selector
)
;
}
{
name
:
JSON
.
stringify
(
name
)
}
)
;
static
override
querySelector
:
QuerySelector
=
interpolateFunction
(
(
node
selector
PuppeteerUtil
)
=
>
{
return
PuppeteerUtil
.
customQuerySelectors
.
get
(
PLACEHOLDER
(
'
name
'
)
)
!
.
querySelector
(
node
selector
)
;
}
{
name
:
JSON
.
stringify
(
name
)
}
)
;
}
;
const
registerScript
=
interpolateFunction
(
(
PuppeteerUtil
:
PuppeteerUtil
)
=
>
{
PuppeteerUtil
.
customQuerySelectors
.
register
(
PLACEHOLDER
(
'
name
'
)
{
queryAll
:
PLACEHOLDER
(
'
queryAll
'
)
queryOne
:
PLACEHOLDER
(
'
queryOne
'
)
}
)
;
}
{
name
:
JSON
.
stringify
(
name
)
queryAll
:
handler
.
queryAll
?
stringifyFunction
(
handler
.
queryAll
)
:
String
(
undefined
)
queryOne
:
handler
.
queryOne
?
stringifyFunction
(
handler
.
queryOne
)
:
String
(
undefined
)
}
)
.
toString
(
)
;
this
.
#
handlers
.
set
(
name
[
registerScript
Handler
]
)
;
scriptInjector
.
append
(
registerScript
)
;
}
unregister
(
name
:
string
)
:
void
{
const
handler
=
this
.
#
handlers
.
get
(
name
)
;
if
(
!
handler
)
{
throw
new
Error
(
Cannot
unregister
unknown
handler
:
{
name
}
)
;
}
scriptInjector
.
pop
(
handler
[
0
]
)
;
this
.
#
handlers
.
delete
(
name
)
;
}
names
(
)
:
string
[
]
{
return
[
.
.
.
this
.
#
handlers
.
keys
(
)
]
;
}
clear
(
)
:
void
{
for
(
const
[
registerScript
]
of
this
.
#
handlers
)
{
scriptInjector
.
pop
(
registerScript
)
;
}
this
.
#
handlers
.
clear
(
)
;
}
}
export
const
customQueryHandlers
=
new
CustomQueryHandlerRegistry
(
)
;
export
function
registerCustomQueryHandler
(
name
:
string
handler
:
CustomQueryHandler
)
:
void
{
customQueryHandlers
.
register
(
name
handler
)
;
}
export
function
unregisterCustomQueryHandler
(
name
:
string
)
:
void
{
customQueryHandlers
.
unregister
(
name
)
;
}
export
function
customQueryHandlerNames
(
)
:
string
[
]
{
return
customQueryHandlers
.
names
(
)
;
}
export
function
clearCustomQueryHandlers
(
)
:
void
{
customQueryHandlers
.
clear
(
)
;
}
