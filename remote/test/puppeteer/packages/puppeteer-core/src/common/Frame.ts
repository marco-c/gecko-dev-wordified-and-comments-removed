import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ElementHandle
}
from
'
.
.
/
api
/
ElementHandle
.
js
'
;
import
{
Page
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
isErrorLike
}
from
'
.
.
/
util
/
ErrorLike
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
FrameManager
}
from
'
.
/
FrameManager
.
js
'
;
import
{
getQueryHandlerAndSelector
}
from
'
.
/
GetQueryHandler
.
js
'
;
import
{
HTTPResponse
}
from
'
.
/
HTTPResponse
.
js
'
;
import
{
MouseButton
}
from
'
.
/
Input
.
js
'
;
import
{
IsolatedWorld
IsolatedWorldChart
WaitForSelectorOptions
}
from
'
.
/
IsolatedWorld
.
js
'
;
import
{
MAIN_WORLD
PUPPETEER_WORLD
}
from
'
.
/
IsolatedWorlds
.
js
'
;
import
{
LazyArg
}
from
'
.
/
LazyArg
.
js
'
;
import
{
LifecycleWatcher
PuppeteerLifeCycleEvent
}
from
'
.
/
LifecycleWatcher
.
js
'
;
import
{
EvaluateFunc
EvaluateFuncWith
HandleFor
NodeFor
}
from
'
.
/
types
.
js
'
;
import
{
importFS
}
from
'
.
/
util
.
js
'
;
export
interface
FrameWaitForFunctionOptions
{
polling
?
:
'
raf
'
|
'
mutation
'
|
number
;
timeout
?
:
number
;
}
export
interface
FrameAddScriptTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
type
?
:
string
;
id
?
:
string
;
}
export
interface
FrameAddStyleTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
}
export
class
Frame
{
#
url
=
'
'
;
#
detached
=
false
;
#
client
!
:
CDPSession
;
worlds
!
:
IsolatedWorldChart
;
_frameManager
:
FrameManager
;
_id
:
string
;
_loaderId
=
'
'
;
_name
?
:
string
;
_hasStartedLoading
=
false
;
_lifecycleEvents
=
new
Set
<
string
>
(
)
;
_parentId
?
:
string
;
constructor
(
frameManager
:
FrameManager
frameId
:
string
parentFrameId
:
string
|
undefined
client
:
CDPSession
)
{
this
.
_frameManager
=
frameManager
;
this
.
#
url
=
'
'
;
this
.
_id
=
frameId
;
this
.
_parentId
=
parentFrameId
;
this
.
#
detached
=
false
;
this
.
_loaderId
=
'
'
;
this
.
updateClient
(
client
)
;
}
updateClient
(
client
:
CDPSession
)
:
void
{
this
.
#
client
=
client
;
this
.
worlds
=
{
[
MAIN_WORLD
]
:
new
IsolatedWorld
(
this
)
[
PUPPETEER_WORLD
]
:
new
IsolatedWorld
(
this
)
}
;
}
page
(
)
:
Page
{
return
this
.
_frameManager
.
page
(
)
;
}
isOOPFrame
(
)
:
boolean
{
return
this
.
#
client
!
=
=
this
.
_frameManager
.
client
;
}
async
goto
(
url
:
string
options
:
{
referer
?
:
string
;
referrerPolicy
?
:
string
;
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
HTTPResponse
|
null
>
{
const
{
referer
=
this
.
_frameManager
.
networkManager
.
extraHTTPHeaders
(
)
[
'
referer
'
]
referrerPolicy
=
this
.
_frameManager
.
networkManager
.
extraHTTPHeaders
(
)
[
'
referer
-
policy
'
]
waitUntil
=
[
'
load
'
]
timeout
=
this
.
_frameManager
.
timeoutSettings
.
navigationTimeout
(
)
}
=
options
;
let
ensureNewDocumentNavigation
=
false
;
const
watcher
=
new
LifecycleWatcher
(
this
.
_frameManager
this
waitUntil
timeout
)
;
let
error
=
await
Promise
.
race
(
[
navigate
(
this
.
#
client
url
referer
referrerPolicy
as
Protocol
.
Page
.
ReferrerPolicy
this
.
_id
)
watcher
.
timeoutOrTerminationPromise
(
)
]
)
;
if
(
!
error
)
{
error
=
await
Promise
.
race
(
[
watcher
.
timeoutOrTerminationPromise
(
)
ensureNewDocumentNavigation
?
watcher
.
newDocumentNavigationPromise
(
)
:
watcher
.
sameDocumentNavigationPromise
(
)
]
)
;
}
try
{
if
(
error
)
{
throw
error
;
}
return
await
watcher
.
navigationResponse
(
)
;
}
finally
{
watcher
.
dispose
(
)
;
}
async
function
navigate
(
client
:
CDPSession
url
:
string
referrer
:
string
|
undefined
referrerPolicy
:
Protocol
.
Page
.
ReferrerPolicy
|
undefined
frameId
:
string
)
:
Promise
<
Error
|
null
>
{
try
{
const
response
=
await
client
.
send
(
'
Page
.
navigate
'
{
url
referrer
frameId
referrerPolicy
}
)
;
ensureNewDocumentNavigation
=
!
!
response
.
loaderId
;
if
(
response
.
errorText
=
=
=
'
net
:
:
ERR_HTTP_RESPONSE_CODE_FAILURE
'
)
{
return
null
;
}
return
response
.
errorText
?
new
Error
(
{
response
.
errorText
}
at
{
url
}
)
:
null
;
}
catch
(
error
)
{
if
(
isErrorLike
(
error
)
)
{
return
error
;
}
throw
error
;
}
}
}
async
waitForNavigation
(
options
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
HTTPResponse
|
null
>
{
const
{
waitUntil
=
[
'
load
'
]
timeout
=
this
.
_frameManager
.
timeoutSettings
.
navigationTimeout
(
)
}
=
options
;
const
watcher
=
new
LifecycleWatcher
(
this
.
_frameManager
this
waitUntil
timeout
)
;
const
error
=
await
Promise
.
race
(
[
watcher
.
timeoutOrTerminationPromise
(
)
watcher
.
sameDocumentNavigationPromise
(
)
watcher
.
newDocumentNavigationPromise
(
)
]
)
;
try
{
if
(
error
)
{
throw
error
;
}
return
await
watcher
.
navigationResponse
(
)
;
}
finally
{
watcher
.
dispose
(
)
;
}
}
_client
(
)
:
CDPSession
{
return
this
.
#
client
;
}
executionContext
(
)
:
Promise
<
ExecutionContext
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
executionContext
(
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
(
selector
)
;
}
async
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
(
selector
)
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
NodeFor
<
Selector
>
Params
>
=
EvaluateFuncWith
<
NodeFor
<
Selector
>
Params
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
eval
(
selector
pageFunction
.
.
.
args
)
;
}
async
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFuncWith
<
Array
<
NodeFor
<
Selector
>
>
Params
>
=
EvaluateFuncWith
<
Array
<
NodeFor
<
Selector
>
>
Params
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
eval
(
selector
pageFunction
.
.
.
args
)
;
}
async
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
x
(
expression
)
;
}
async
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
:
WaitForSelectorOptions
=
{
}
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
{
const
{
updatedSelector
QueryHandler
}
=
getQueryHandlerAndSelector
(
selector
)
;
return
(
await
QueryHandler
.
waitFor
(
this
updatedSelector
options
)
)
as
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
;
}
async
waitForXPath
(
xpath
:
string
options
:
WaitForSelectorOptions
=
{
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
{
if
(
xpath
.
startsWith
(
'
/
/
'
)
)
{
xpath
=
.
{
xpath
}
;
}
return
this
.
waitForSelector
(
xpath
/
{
xpath
}
options
)
;
}
waitForFunction
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
options
:
FrameWaitForFunctionOptions
=
{
}
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
return
this
.
worlds
[
MAIN_WORLD
]
.
waitForFunction
(
pageFunction
options
.
.
.
args
)
as
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
}
async
content
(
)
:
Promise
<
string
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
content
(
)
;
}
async
setContent
(
html
:
string
options
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
=
{
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
setContent
(
html
options
)
;
}
name
(
)
:
string
{
return
this
.
_name
|
|
'
'
;
}
url
(
)
:
string
{
return
this
.
#
url
;
}
parentFrame
(
)
:
Frame
|
null
{
return
this
.
_frameManager
.
_frameTree
.
parentFrame
(
this
.
_id
)
|
|
null
;
}
childFrames
(
)
:
Frame
[
]
{
return
this
.
_frameManager
.
_frameTree
.
childFrames
(
this
.
_id
)
;
}
isDetached
(
)
:
boolean
{
return
this
.
#
detached
;
}
async
addScriptTag
(
options
:
FrameAddScriptTagOptions
)
:
Promise
<
ElementHandle
<
HTMLScriptElement
>
>
{
let
{
content
=
'
'
type
}
=
options
;
const
{
path
}
=
options
;
if
(
+
!
!
options
.
url
+
+
!
!
path
+
+
!
!
content
!
=
=
1
)
{
throw
new
Error
(
'
Exactly
one
of
url
path
or
content
must
be
specified
.
'
)
;
}
if
(
path
)
{
let
fs
;
try
{
fs
=
(
await
import
(
'
fs
'
)
)
.
promises
;
}
catch
(
error
)
{
if
(
error
instanceof
TypeError
)
{
throw
new
Error
(
'
Can
only
pass
a
file
path
in
a
Node
-
like
environment
.
'
)
;
}
throw
error
;
}
content
=
await
fs
.
readFile
(
path
'
utf8
'
)
;
content
+
=
/
/
#
sourceURL
=
{
path
.
replace
(
/
\
n
/
g
'
'
)
}
;
}
type
=
type
?
?
'
text
/
javascript
'
;
return
this
.
worlds
[
MAIN_WORLD
]
.
transferHandle
(
await
this
.
worlds
[
PUPPETEER_WORLD
]
.
evaluateHandle
(
async
(
{
createDeferredPromise
}
{
url
id
type
content
}
)
=
>
{
const
promise
=
createDeferredPromise
<
void
>
(
)
;
const
script
=
document
.
createElement
(
'
script
'
)
;
script
.
type
=
type
;
script
.
text
=
content
;
if
(
url
)
{
script
.
src
=
url
;
script
.
addEventListener
(
'
load
'
(
)
=
>
{
return
promise
.
resolve
(
)
;
}
{
once
:
true
}
)
;
script
.
addEventListener
(
'
error
'
event
=
>
{
promise
.
reject
(
new
Error
(
event
.
message
?
?
'
Could
not
load
script
'
)
)
;
}
{
once
:
true
}
)
;
}
else
{
promise
.
resolve
(
)
;
}
if
(
id
)
{
script
.
id
=
id
;
}
document
.
head
.
appendChild
(
script
)
;
await
promise
;
return
script
;
}
LazyArg
.
create
(
context
=
>
{
return
context
.
puppeteerUtil
;
}
)
{
.
.
.
options
type
content
}
)
)
;
}
async
addStyleTag
(
options
:
Omit
<
FrameAddStyleTagOptions
'
url
'
>
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
>
>
;
async
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLLinkElement
>
>
;
async
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
|
HTMLLinkElement
>
>
{
let
{
content
=
'
'
}
=
options
;
const
{
path
}
=
options
;
if
(
+
!
!
options
.
url
+
+
!
!
path
+
+
!
!
content
!
=
=
1
)
{
throw
new
Error
(
'
Exactly
one
of
url
path
or
content
must
be
specified
.
'
)
;
}
if
(
path
)
{
let
fs
:
typeof
import
(
'
fs
'
)
.
promises
;
try
{
fs
=
(
await
importFS
(
)
)
.
promises
;
}
catch
(
error
)
{
if
(
error
instanceof
TypeError
)
{
throw
new
Error
(
'
Can
only
pass
a
file
path
in
a
Node
-
like
environment
.
'
)
;
}
throw
error
;
}
content
=
await
fs
.
readFile
(
path
'
utf8
'
)
;
content
+
=
'
/
*
#
sourceURL
=
'
+
path
.
replace
(
/
\
n
/
g
'
'
)
+
'
*
/
'
;
options
.
content
=
content
;
}
return
this
.
worlds
[
MAIN_WORLD
]
.
transferHandle
(
await
this
.
worlds
[
PUPPETEER_WORLD
]
.
evaluateHandle
(
async
(
{
createDeferredPromise
}
{
url
content
}
)
=
>
{
const
promise
=
createDeferredPromise
<
void
>
(
)
;
let
element
:
HTMLStyleElement
|
HTMLLinkElement
;
if
(
!
url
)
{
element
=
document
.
createElement
(
'
style
'
)
;
element
.
appendChild
(
document
.
createTextNode
(
content
!
)
)
;
}
else
{
const
link
=
document
.
createElement
(
'
link
'
)
;
link
.
rel
=
'
stylesheet
'
;
link
.
href
=
url
;
element
=
link
;
}
element
.
addEventListener
(
'
load
'
(
)
=
>
{
promise
.
resolve
(
)
;
}
{
once
:
true
}
)
;
element
.
addEventListener
(
'
error
'
event
=
>
{
promise
.
reject
(
new
Error
(
(
event
as
ErrorEvent
)
.
message
?
?
'
Could
not
load
style
'
)
)
;
}
{
once
:
true
}
)
;
document
.
head
.
appendChild
(
element
)
;
await
promise
;
return
element
;
}
LazyArg
.
create
(
context
=
>
{
return
context
.
puppeteerUtil
;
}
)
options
)
)
;
}
async
click
(
selector
:
string
options
:
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
=
{
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
click
(
selector
options
)
;
}
async
focus
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
focus
(
selector
)
;
}
async
hover
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
hover
(
selector
)
;
}
select
(
selector
:
string
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
select
(
selector
.
.
.
values
)
;
}
async
tap
(
selector
:
string
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
tap
(
selector
)
;
}
async
type
(
selector
:
string
text
:
string
options
?
:
{
delay
:
number
}
)
:
Promise
<
void
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
type
(
selector
text
options
)
;
}
waitForTimeout
(
milliseconds
:
number
)
:
Promise
<
void
>
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
milliseconds
)
;
}
)
;
}
async
title
(
)
:
Promise
<
string
>
{
return
this
.
worlds
[
PUPPETEER_WORLD
]
.
title
(
)
;
}
_navigated
(
framePayload
:
Protocol
.
Page
.
Frame
)
:
void
{
this
.
_name
=
framePayload
.
name
;
this
.
#
url
=
{
framePayload
.
url
}
{
framePayload
.
urlFragment
|
|
'
'
}
;
}
_navigatedWithinDocument
(
url
:
string
)
:
void
{
this
.
#
url
=
url
;
}
_onLifecycleEvent
(
loaderId
:
string
name
:
string
)
:
void
{
if
(
name
=
=
=
'
init
'
)
{
this
.
_loaderId
=
loaderId
;
this
.
_lifecycleEvents
.
clear
(
)
;
}
this
.
_lifecycleEvents
.
add
(
name
)
;
}
_onLoadingStopped
(
)
:
void
{
this
.
_lifecycleEvents
.
add
(
'
DOMContentLoaded
'
)
;
this
.
_lifecycleEvents
.
add
(
'
load
'
)
;
}
_onLoadingStarted
(
)
:
void
{
this
.
_hasStartedLoading
=
true
;
}
_detach
(
)
:
void
{
this
.
#
detached
=
true
;
this
.
worlds
[
MAIN_WORLD
]
.
_detach
(
)
;
this
.
worlds
[
PUPPETEER_WORLD
]
.
_detach
(
)
;
}
}
