import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
export
type
TargetFactory
=
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
?
:
CDPSession
)
=
>
Target
;
export
type
TargetInterceptor
=
(
createdTarget
:
Target
parentTarget
:
Target
|
null
)
=
>
void
;
export
interface
TargetManager
extends
EventEmitter
{
getAvailableTargets
(
)
:
Map
<
string
Target
>
;
initialize
(
)
:
Promise
<
void
>
;
dispose
(
)
:
void
;
addTargetInterceptor
(
session
:
CDPSession
interceptor
:
TargetInterceptor
)
:
void
;
removeTargetInterceptor
(
session
:
CDPSession
interceptor
:
TargetInterceptor
)
:
void
;
}
export
const
enum
TargetManagerEmittedEvents
{
TargetDiscovered
=
'
targetDiscovered
'
TargetAvailable
=
'
targetAvailable
'
TargetGone
=
'
targetGone
'
TargetChanged
=
'
targetChanged
'
}
