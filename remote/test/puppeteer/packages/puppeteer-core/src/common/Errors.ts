export
class
CustomError
extends
Error
{
constructor
(
message
?
:
string
)
{
super
(
message
)
;
this
.
name
=
this
.
constructor
.
name
;
}
get
[
Symbol
.
toStringTag
]
(
)
:
string
{
return
this
.
constructor
.
name
;
}
}
export
class
TimeoutError
extends
CustomError
{
}
export
class
ProtocolError
extends
CustomError
{
#
code
?
:
number
;
#
originalMessage
=
'
'
;
set
code
(
code
:
number
|
undefined
)
{
this
.
#
code
=
code
;
}
get
code
(
)
:
number
|
undefined
{
return
this
.
#
code
;
}
set
originalMessage
(
originalMessage
:
string
)
{
this
.
#
originalMessage
=
originalMessage
;
}
get
originalMessage
(
)
:
string
{
return
this
.
#
originalMessage
;
}
}
export
class
UnsupportedOperation
extends
CustomError
{
}
export
class
TargetCloseError
extends
ProtocolError
{
}
export
interface
PuppeteerErrors
{
TimeoutError
:
typeof
TimeoutError
;
ProtocolError
:
typeof
ProtocolError
;
}
export
const
errors
:
PuppeteerErrors
=
Object
.
freeze
(
{
TimeoutError
ProtocolError
}
)
;
