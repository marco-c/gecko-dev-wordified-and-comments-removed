import
type
{
Browser
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
_connectToBrowser
}
from
'
.
/
BrowserConnector
.
js
'
;
import
type
{
ConnectOptions
}
from
'
.
/
ConnectOptions
.
js
'
;
import
{
type
CustomQueryHandler
customQueryHandlers
}
from
'
.
/
CustomQueryHandler
.
js
'
;
export
interface
CommonPuppeteerSettings
{
isPuppeteerCore
:
boolean
;
}
export
class
Puppeteer
{
static
customQueryHandlers
=
customQueryHandlers
;
static
registerCustomQueryHandler
(
name
:
string
queryHandler
:
CustomQueryHandler
)
:
void
{
return
this
.
customQueryHandlers
.
register
(
name
queryHandler
)
;
}
static
unregisterCustomQueryHandler
(
name
:
string
)
:
void
{
return
this
.
customQueryHandlers
.
unregister
(
name
)
;
}
static
customQueryHandlerNames
(
)
:
string
[
]
{
return
this
.
customQueryHandlers
.
names
(
)
;
}
static
clearCustomQueryHandlers
(
)
:
void
{
return
this
.
customQueryHandlers
.
clear
(
)
;
}
_isPuppeteerCore
:
boolean
;
protected
_changedBrowsers
=
false
;
constructor
(
settings
:
CommonPuppeteerSettings
)
{
this
.
_isPuppeteerCore
=
settings
.
isPuppeteerCore
;
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
}
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
{
return
_connectToBrowser
(
options
)
;
}
}
