export
function
stringToTypedArray
(
string
:
string
base64Encoded
=
false
)
:
Uint8Array
{
if
(
base64Encoded
)
{
const
binaryString
=
atob
(
string
)
;
return
Uint8Array
.
from
(
binaryString
m
=
>
{
return
m
.
codePointAt
(
0
)
;
}
)
;
}
return
new
TextEncoder
(
)
.
encode
(
string
)
;
}
export
function
stringToBase64
(
str
:
string
)
:
string
{
return
typedArrayToBase64
(
new
TextEncoder
(
)
.
encode
(
str
)
)
;
}
export
function
typedArrayToBase64
(
typedArray
:
Uint8Array
)
:
string
{
const
binaryString
=
Array
.
from
(
typedArray
byte
=
>
{
return
String
.
fromCodePoint
(
byte
)
;
}
)
.
join
(
'
'
)
;
return
btoa
(
binaryString
)
;
}
export
function
mergeUint8Arrays
(
items
:
Uint8Array
[
]
)
:
Uint8Array
{
let
length
=
0
;
for
(
const
item
of
items
)
{
length
+
=
item
.
length
;
}
const
result
=
new
Uint8Array
(
length
)
;
let
offset
=
0
;
for
(
const
item
of
items
)
{
result
.
set
(
item
offset
)
;
offset
+
=
item
.
length
;
}
return
result
;
}
