const
createdFunctions
=
new
Map
<
string
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
>
(
)
;
export
const
createFunction
=
(
functionValue
:
string
)
:
(
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
)
=
>
{
let
fn
=
createdFunctions
.
get
(
functionValue
)
;
if
(
fn
)
{
return
fn
;
}
fn
=
new
Function
(
return
{
functionValue
}
)
(
)
as
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
;
createdFunctions
.
set
(
functionValue
fn
)
;
return
fn
;
}
;
export
function
stringifyFunction
(
fn
:
(
.
.
.
args
:
never
)
=
>
unknown
)
:
string
{
let
value
=
fn
.
toString
(
)
;
try
{
new
Function
(
(
{
value
}
)
)
;
}
catch
(
err
)
{
if
(
(
err
as
Error
)
.
message
.
includes
(
Refused
to
evaluate
a
string
as
JavaScript
because
'
unsafe
-
eval
'
is
not
an
allowed
source
of
script
in
the
following
Content
Security
Policy
directive
)
)
{
return
value
;
}
let
prefix
=
'
function
'
;
if
(
value
.
startsWith
(
'
async
'
)
)
{
prefix
=
async
{
prefix
}
;
value
=
value
.
substring
(
'
async
'
.
length
)
;
}
value
=
{
prefix
}
{
value
}
;
try
{
new
Function
(
(
{
value
}
)
)
;
}
catch
{
throw
new
Error
(
'
Passed
function
cannot
be
serialized
!
'
)
;
}
}
return
value
;
}
export
const
interpolateFunction
=
<
T
extends
(
.
.
.
args
:
never
[
]
)
=
>
unknown
>
(
fn
:
T
replacements
:
Record
<
string
string
>
)
:
T
=
>
{
let
value
=
stringifyFunction
(
fn
)
;
for
(
const
[
name
jsValue
]
of
Object
.
entries
(
replacements
)
)
{
value
=
value
.
replace
(
new
RegExp
(
PLACEHOLDER
\
\
(
\
\
s
*
(
?
:
'
{
name
}
'
|
"
{
name
}
"
)
\
\
s
*
\
\
)
'
g
'
)
(
{
jsValue
}
)
)
;
}
return
createFunction
(
value
)
as
unknown
as
T
;
}
;
declare
global
{
function
PLACEHOLDER
<
T
>
(
name
:
string
)
:
T
;
}
