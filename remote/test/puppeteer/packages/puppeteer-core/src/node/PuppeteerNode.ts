import
{
join
}
from
'
path
'
;
import
{
Browser
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
BrowserConnectOptions
}
from
'
.
.
/
common
/
BrowserConnector
.
js
'
;
import
{
Product
}
from
'
.
.
/
common
/
Product
.
js
'
;
import
{
CommonPuppeteerSettings
ConnectOptions
Puppeteer
}
from
'
.
.
/
common
/
Puppeteer
.
js
'
;
import
{
Configuration
}
from
'
.
.
/
common
/
Configuration
.
js
'
;
import
{
PUPPETEER_REVISIONS
}
from
'
.
.
/
revisions
.
js
'
;
import
{
BrowserFetcher
BrowserFetcherOptions
}
from
'
.
/
BrowserFetcher
.
js
'
;
import
{
ChromeLauncher
}
from
'
.
/
ChromeLauncher
.
js
'
;
import
{
FirefoxLauncher
}
from
'
.
/
FirefoxLauncher
.
js
'
;
import
{
BrowserLaunchArgumentOptions
ChromeReleaseChannel
LaunchOptions
}
from
'
.
/
LaunchOptions
.
js
'
;
import
{
ProductLauncher
}
from
'
.
/
ProductLauncher
.
js
'
;
export
interface
PuppeteerLaunchOptions
extends
LaunchOptions
BrowserLaunchArgumentOptions
BrowserConnectOptions
{
product
?
:
Product
;
extraPrefsFirefox
?
:
Record
<
string
unknown
>
;
}
export
class
PuppeteerNode
extends
Puppeteer
{
#
_launcher
?
:
ProductLauncher
;
#
lastLaunchedProduct
?
:
Product
;
defaultBrowserRevision
:
string
;
configuration
:
Configuration
=
{
}
;
constructor
(
settings
:
{
configuration
?
:
Configuration
;
}
&
CommonPuppeteerSettings
)
{
const
{
configuration
.
.
.
commonSettings
}
=
settings
;
super
(
commonSettings
)
;
if
(
configuration
)
{
this
.
configuration
=
configuration
;
}
switch
(
this
.
configuration
.
defaultProduct
)
{
case
'
firefox
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
firefox
;
break
;
default
:
this
.
configuration
.
defaultProduct
=
'
chrome
'
;
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
chromium
;
break
;
}
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
launch
=
this
.
launch
.
bind
(
this
)
;
this
.
executablePath
=
this
.
executablePath
.
bind
(
this
)
;
this
.
defaultArgs
=
this
.
defaultArgs
.
bind
(
this
)
;
this
.
createBrowserFetcher
=
this
.
createBrowserFetcher
.
bind
(
this
)
;
}
override
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
{
return
super
.
connect
(
options
)
;
}
launch
(
options
:
PuppeteerLaunchOptions
=
{
}
)
:
Promise
<
Browser
>
{
const
{
product
=
this
.
defaultProduct
}
=
options
;
this
.
#
lastLaunchedProduct
=
product
;
return
this
.
#
launcher
.
launch
(
options
)
;
}
get
#
launcher
(
)
:
ProductLauncher
{
if
(
this
.
#
_launcher
&
&
this
.
#
_launcher
.
product
=
=
=
this
.
lastLaunchedProduct
)
{
return
this
.
#
_launcher
;
}
switch
(
this
.
lastLaunchedProduct
)
{
case
'
chrome
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
chromium
;
this
.
#
_launcher
=
new
ChromeLauncher
(
this
)
;
break
;
case
'
firefox
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
firefox
;
this
.
#
_launcher
=
new
FirefoxLauncher
(
this
)
;
break
;
default
:
throw
new
Error
(
Unknown
product
:
{
this
.
#
lastLaunchedProduct
}
)
;
}
return
this
.
#
_launcher
;
}
executablePath
(
channel
?
:
ChromeReleaseChannel
)
:
string
{
return
this
.
#
launcher
.
executablePath
(
channel
)
;
}
get
browserRevision
(
)
:
string
{
return
(
this
.
#
_launcher
?
.
getActualBrowserRevision
(
)
?
?
this
.
configuration
.
browserRevision
?
?
this
.
defaultBrowserRevision
!
)
;
}
get
defaultDownloadPath
(
)
:
string
|
undefined
{
return
(
this
.
configuration
.
downloadPath
?
?
join
(
this
.
configuration
.
cacheDirectory
!
this
.
product
)
)
;
}
get
lastLaunchedProduct
(
)
:
Product
{
return
this
.
#
lastLaunchedProduct
?
?
this
.
defaultProduct
;
}
get
defaultProduct
(
)
:
Product
{
return
this
.
configuration
.
defaultProduct
?
?
'
chrome
'
;
}
get
product
(
)
:
string
{
return
this
.
#
launcher
.
product
;
}
defaultArgs
(
options
:
BrowserLaunchArgumentOptions
=
{
}
)
:
string
[
]
{
return
this
.
#
launcher
.
defaultArgs
(
options
)
;
}
createBrowserFetcher
(
options
:
Partial
<
BrowserFetcherOptions
>
=
{
}
)
:
BrowserFetcher
{
const
downloadPath
=
this
.
defaultDownloadPath
;
if
(
!
options
.
path
&
&
downloadPath
)
{
options
.
path
=
downloadPath
;
}
if
(
!
options
.
path
)
{
throw
new
Error
(
'
A
path
must
be
specified
for
puppeteer
-
core
.
'
)
;
}
if
(
!
(
'
useMacOSARMBinary
'
in
options
)
&
&
this
.
configuration
.
experiments
?
.
macArmChromiumEnabled
)
{
options
.
useMacOSARMBinary
=
true
;
}
if
(
!
(
'
host
'
in
options
)
&
&
this
.
configuration
.
downloadHost
)
{
options
.
host
=
this
.
configuration
.
downloadHost
;
}
if
(
!
(
'
product
'
in
options
)
&
&
this
.
configuration
.
defaultProduct
)
{
options
.
product
=
this
.
configuration
.
defaultProduct
;
}
return
new
BrowserFetcher
(
options
as
BrowserFetcherOptions
)
;
}
}
