import
{
existsSync
}
from
'
fs
'
;
import
os
{
tmpdir
}
from
'
os
'
;
import
{
join
}
from
'
path
'
;
import
{
Browser
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
Product
}
from
'
.
.
/
common
/
Product
.
js
'
;
import
{
BrowserLaunchArgumentOptions
ChromeReleaseChannel
PuppeteerNodeLaunchOptions
}
from
'
.
/
LaunchOptions
.
js
'
;
import
{
PuppeteerNode
}
from
'
.
/
PuppeteerNode
.
js
'
;
export
class
ProductLauncher
{
#
product
:
Product
;
puppeteer
:
PuppeteerNode
;
protected
actualBrowserRevision
?
:
string
;
constructor
(
puppeteer
:
PuppeteerNode
product
:
Product
)
{
this
.
puppeteer
=
puppeteer
;
this
.
#
product
=
product
;
}
get
product
(
)
:
Product
{
return
this
.
#
product
;
}
launch
(
object
:
PuppeteerNodeLaunchOptions
)
:
Promise
<
Browser
>
;
launch
(
)
:
Promise
<
Browser
>
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
executablePath
(
channel
?
:
ChromeReleaseChannel
)
:
string
;
executablePath
(
)
:
string
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
defaultArgs
(
object
:
BrowserLaunchArgumentOptions
)
:
string
[
]
;
defaultArgs
(
)
:
string
[
]
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
getActualBrowserRevision
(
)
:
string
|
undefined
{
return
this
.
actualBrowserRevision
;
}
protected
getProfilePath
(
)
:
string
{
return
join
(
this
.
puppeteer
.
configuration
.
temporaryDirectory
?
?
tmpdir
(
)
puppeteer_dev_
{
this
.
product
}
_profile
-
)
;
}
protected
resolveExecutablePath
(
)
:
string
{
const
executablePath
=
this
.
puppeteer
.
configuration
.
executablePath
;
if
(
executablePath
)
{
if
(
!
existsSync
(
executablePath
)
)
{
throw
new
Error
(
Tried
to
find
the
browser
at
the
configured
path
(
{
executablePath
}
)
but
no
executable
was
found
.
)
;
}
return
executablePath
;
}
const
ubuntuChromiumPath
=
'
/
usr
/
bin
/
chromium
-
browser
'
;
if
(
this
.
product
=
=
=
'
chrome
'
&
&
os
.
platform
(
)
!
=
=
'
darwin
'
&
&
os
.
arch
(
)
=
=
=
'
arm64
'
&
&
existsSync
(
ubuntuChromiumPath
)
)
{
return
ubuntuChromiumPath
;
}
const
browserFetcher
=
this
.
puppeteer
.
createBrowserFetcher
(
{
product
:
this
.
product
path
:
this
.
puppeteer
.
defaultDownloadPath
!
}
)
;
const
revisionInfo
=
browserFetcher
.
revisionInfo
(
this
.
puppeteer
.
browserRevision
)
;
if
(
!
revisionInfo
.
local
)
{
if
(
this
.
puppeteer
.
configuration
.
browserRevision
)
{
throw
new
Error
(
Tried
to
find
the
browser
at
the
configured
path
(
{
revisionInfo
.
executablePath
}
)
for
revision
{
this
.
puppeteer
.
browserRevision
}
but
no
executable
was
found
.
)
;
}
switch
(
this
.
product
)
{
case
'
chrome
'
:
throw
new
Error
(
Could
not
find
Chromium
(
rev
.
{
this
.
puppeteer
.
browserRevision
}
)
.
This
can
occur
if
either
\
n
+
'
1
.
you
did
not
perform
an
installation
before
running
the
script
(
e
.
g
.
npm
install
)
or
\
n
'
+
2
.
your
cache
path
is
incorrectly
configured
(
which
is
:
{
this
.
puppeteer
.
configuration
.
cacheDirectory
}
)
.
\
n
+
'
For
(
2
)
check
out
our
guide
on
configuring
puppeteer
at
https
:
/
/
pptr
.
dev
/
guides
/
configuration
.
'
)
;
case
'
firefox
'
:
throw
new
Error
(
Could
not
find
Firefox
(
rev
.
{
this
.
puppeteer
.
browserRevision
}
)
.
This
can
occur
if
either
\
n
+
'
1
.
you
did
not
perform
an
installation
for
Firefox
before
running
the
script
(
e
.
g
.
PUPPETEER_PRODUCT
=
firefox
npm
install
)
or
\
n
'
+
2
.
your
cache
path
is
incorrectly
configured
(
which
is
:
{
this
.
puppeteer
.
configuration
.
cacheDirectory
}
)
.
\
n
+
'
For
(
2
)
check
out
our
guide
on
configuring
puppeteer
at
https
:
/
/
pptr
.
dev
/
guides
/
configuration
.
'
)
;
}
}
return
revisionInfo
.
executablePath
;
}
}
