import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
CDPSession
}
from
'
.
.
/
api
/
CDPSession
.
js
'
;
import
type
{
Realm
}
from
'
.
.
/
api
/
Realm
.
js
'
;
import
type
{
ConsoleMessageType
}
from
'
.
.
/
common
/
ConsoleMessage
.
js
'
;
import
{
EventEmitter
type
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
{
TimeoutSettings
}
from
'
.
.
/
common
/
TimeoutSettings
.
js
'
;
import
type
{
EvaluateFunc
HandleFor
}
from
'
.
.
/
common
/
types
.
js
'
;
import
{
debugError
withSourcePuppeteerURLIfNone
}
from
'
.
.
/
common
/
util
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
IsolatedWorld
}
from
'
.
/
IsolatedWorld
.
js
'
;
import
{
CdpJSHandle
}
from
'
.
/
JSHandle
.
js
'
;
export
type
ConsoleAPICalledCallback
=
(
eventType
:
ConsoleMessageType
handles
:
CdpJSHandle
[
]
trace
?
:
Protocol
.
Runtime
.
StackTrace
)
=
>
void
;
export
type
ExceptionThrownCallback
=
(
event
:
Protocol
.
Runtime
.
ExceptionThrownEvent
)
=
>
void
;
export
class
WebWorker
extends
EventEmitter
<
Record
<
EventType
unknown
>
>
{
readonly
timeoutSettings
=
new
TimeoutSettings
(
)
;
#
world
:
IsolatedWorld
;
#
client
:
CDPSession
;
#
url
:
string
;
constructor
(
client
:
CDPSession
url
:
string
consoleAPICalled
:
ConsoleAPICalledCallback
exceptionThrown
:
ExceptionThrownCallback
)
{
super
(
)
;
this
.
#
client
=
client
;
this
.
#
url
=
url
;
this
.
#
world
=
new
IsolatedWorld
(
this
new
TimeoutSettings
(
)
)
;
this
.
#
client
.
once
(
'
Runtime
.
executionContextCreated
'
async
event
=
>
{
this
.
#
world
.
setContext
(
new
ExecutionContext
(
client
event
.
context
this
.
#
world
)
)
;
}
)
;
this
.
#
client
.
on
(
'
Runtime
.
consoleAPICalled
'
async
event
=
>
{
try
{
return
consoleAPICalled
(
event
.
type
event
.
args
.
map
(
(
object
:
Protocol
.
Runtime
.
RemoteObject
)
=
>
{
return
new
CdpJSHandle
(
this
.
#
world
object
)
;
}
)
event
.
stackTrace
)
;
}
catch
(
err
)
{
debugError
(
err
)
;
}
}
)
;
this
.
#
client
.
on
(
'
Runtime
.
exceptionThrown
'
exceptionThrown
)
;
this
.
#
client
.
send
(
'
Runtime
.
enable
'
)
.
catch
(
debugError
)
;
}
mainRealm
(
)
:
Realm
{
return
this
.
#
world
;
}
url
(
)
:
string
{
return
this
.
#
url
;
}
get
client
(
)
:
CDPSession
{
return
this
.
#
client
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
evaluate
.
name
pageFunction
)
;
return
await
this
.
mainRealm
(
)
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
evaluateHandle
.
name
pageFunction
)
;
return
await
this
.
mainRealm
(
)
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
}
