import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
CDPSession
}
from
'
.
.
/
api
/
CDPSession
.
js
'
;
import
type
{
JSHandle
}
from
'
.
.
/
api
/
JSHandle
.
js
'
;
import
{
Realm
}
from
'
.
.
/
api
/
Realm
.
js
'
;
import
type
{
TimeoutSettings
}
from
'
.
.
/
common
/
TimeoutSettings
.
js
'
;
import
type
{
BindingPayload
EvaluateFunc
HandleFor
}
from
'
.
.
/
common
/
types
.
js
'
;
import
{
addPageBinding
debugError
withSourcePuppeteerURLIfNone
}
from
'
.
.
/
common
/
util
.
js
'
;
import
{
Deferred
}
from
'
.
.
/
util
/
Deferred
.
js
'
;
import
{
disposeSymbol
}
from
'
.
.
/
util
/
disposable
.
js
'
;
import
{
Mutex
}
from
'
.
.
/
util
/
Mutex
.
js
'
;
import
type
{
Binding
}
from
'
.
/
Binding
.
js
'
;
import
{
ExecutionContext
createCdpHandle
}
from
'
.
/
ExecutionContext
.
js
'
;
import
type
{
CdpFrame
}
from
'
.
/
Frame
.
js
'
;
import
type
{
MAIN_WORLD
PUPPETEER_WORLD
}
from
'
.
/
IsolatedWorlds
.
js
'
;
import
type
{
WebWorker
}
from
'
.
/
WebWorker
.
js
'
;
export
interface
PageBinding
{
name
:
string
;
pptrFunction
:
Function
;
}
export
interface
IsolatedWorldChart
{
[
key
:
string
]
:
IsolatedWorld
;
[
MAIN_WORLD
]
:
IsolatedWorld
;
[
PUPPETEER_WORLD
]
:
IsolatedWorld
;
}
export
class
IsolatedWorld
extends
Realm
{
#
context
=
Deferred
.
create
<
ExecutionContext
>
(
)
;
#
contextBindings
=
new
Set
<
string
>
(
)
;
#
bindings
=
new
Map
<
string
Binding
>
(
)
;
get
_bindings
(
)
:
Map
<
string
Binding
>
{
return
this
.
#
bindings
;
}
readonly
#
frameOrWorker
:
CdpFrame
|
WebWorker
;
constructor
(
frameOrWorker
:
CdpFrame
|
WebWorker
timeoutSettings
:
TimeoutSettings
)
{
super
(
timeoutSettings
)
;
this
.
#
frameOrWorker
=
frameOrWorker
;
this
.
frameUpdated
(
)
;
}
get
environment
(
)
:
CdpFrame
|
WebWorker
{
return
this
.
#
frameOrWorker
;
}
frameUpdated
(
)
:
void
{
this
.
client
.
on
(
'
Runtime
.
bindingCalled
'
this
.
#
onBindingCalled
)
;
}
get
client
(
)
:
CDPSession
{
return
this
.
#
frameOrWorker
.
client
;
}
clearContext
(
)
:
void
{
this
.
#
context
=
Deferred
.
create
(
)
;
if
(
'
clearDocumentHandle
'
in
this
.
#
frameOrWorker
)
{
this
.
#
frameOrWorker
.
clearDocumentHandle
(
)
;
}
}
setContext
(
context
:
ExecutionContext
)
:
void
{
this
.
#
contextBindings
.
clear
(
)
;
this
.
#
context
.
resolve
(
context
)
;
void
this
.
taskManager
.
rerunAll
(
)
;
}
hasContext
(
)
:
boolean
{
return
this
.
#
context
.
resolved
(
)
;
}
#
executionContext
(
)
:
Promise
<
ExecutionContext
>
{
if
(
this
.
disposed
)
{
throw
new
Error
(
Execution
context
is
not
available
in
detached
frame
"
{
this
.
environment
.
url
(
)
}
"
(
are
you
trying
to
evaluate
?
)
)
;
}
if
(
this
.
#
context
=
=
=
null
)
{
throw
new
Error
(
Execution
content
promise
is
missing
)
;
}
return
this
.
#
context
.
valueOrThrow
(
)
;
}
async
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
evaluateHandle
.
name
pageFunction
)
;
const
context
=
await
this
.
#
executionContext
(
)
;
return
await
context
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
async
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
{
pageFunction
=
withSourcePuppeteerURLIfNone
(
this
.
evaluate
.
name
pageFunction
)
;
let
context
=
this
.
#
context
.
value
(
)
;
if
(
!
context
|
|
!
(
context
instanceof
ExecutionContext
)
)
{
context
=
await
this
.
#
executionContext
(
)
;
}
return
await
context
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
#
mutex
=
new
Mutex
(
)
;
async
_addBindingToContext
(
context
:
ExecutionContext
name
:
string
)
:
Promise
<
void
>
{
if
(
this
.
#
contextBindings
.
has
(
name
)
)
{
return
;
}
using
_
=
await
this
.
#
mutex
.
acquire
(
)
;
try
{
await
context
.
_client
.
send
(
'
Runtime
.
addBinding
'
context
.
_contextName
?
{
name
executionContextName
:
context
.
_contextName
}
:
{
name
executionContextId
:
context
.
_contextId
}
)
;
await
context
.
evaluate
(
addPageBinding
'
internal
'
name
)
;
this
.
#
contextBindings
.
add
(
name
)
;
}
catch
(
error
)
{
if
(
error
instanceof
Error
)
{
if
(
error
.
message
.
includes
(
'
Execution
context
was
destroyed
'
)
)
{
return
;
}
if
(
error
.
message
.
includes
(
'
Cannot
find
context
with
specified
id
'
)
)
{
return
;
}
}
debugError
(
error
)
;
}
}
#
onBindingCalled
=
async
(
event
:
Protocol
.
Runtime
.
BindingCalledEvent
)
:
Promise
<
void
>
=
>
{
let
payload
:
BindingPayload
;
try
{
payload
=
JSON
.
parse
(
event
.
payload
)
;
}
catch
{
return
;
}
const
{
type
name
seq
args
isTrivial
}
=
payload
;
if
(
type
!
=
=
'
internal
'
)
{
return
;
}
if
(
!
this
.
#
contextBindings
.
has
(
name
)
)
{
return
;
}
try
{
const
context
=
await
this
.
#
context
.
valueOrThrow
(
)
;
if
(
event
.
executionContextId
!
=
=
context
.
_contextId
)
{
return
;
}
const
binding
=
this
.
_bindings
.
get
(
name
)
;
await
binding
?
.
run
(
context
seq
args
isTrivial
)
;
}
catch
(
err
)
{
debugError
(
err
)
;
}
}
;
override
async
adoptBackendNode
(
backendNodeId
?
:
Protocol
.
DOM
.
BackendNodeId
)
:
Promise
<
JSHandle
<
Node
>
>
{
const
executionContext
=
await
this
.
#
executionContext
(
)
;
const
{
object
}
=
await
this
.
client
.
send
(
'
DOM
.
resolveNode
'
{
backendNodeId
:
backendNodeId
executionContextId
:
executionContext
.
_contextId
}
)
;
return
createCdpHandle
(
this
object
)
as
JSHandle
<
Node
>
;
}
async
adoptHandle
<
T
extends
JSHandle
<
Node
>
>
(
handle
:
T
)
:
Promise
<
T
>
{
if
(
handle
.
realm
=
=
=
this
)
{
return
(
await
handle
.
evaluateHandle
(
value
=
>
{
return
value
;
}
)
)
as
unknown
as
T
;
}
const
nodeInfo
=
await
this
.
client
.
send
(
'
DOM
.
describeNode
'
{
objectId
:
handle
.
id
}
)
;
return
(
await
this
.
adoptBackendNode
(
nodeInfo
.
node
.
backendNodeId
)
)
as
T
;
}
async
transferHandle
<
T
extends
JSHandle
<
Node
>
>
(
handle
:
T
)
:
Promise
<
T
>
{
if
(
handle
.
realm
=
=
=
this
)
{
return
handle
;
}
if
(
handle
.
remoteObject
(
)
.
objectId
=
=
=
undefined
)
{
return
handle
;
}
const
info
=
await
this
.
client
.
send
(
'
DOM
.
describeNode
'
{
objectId
:
handle
.
remoteObject
(
)
.
objectId
}
)
;
const
newHandle
=
(
await
this
.
adoptBackendNode
(
info
.
node
.
backendNodeId
)
)
as
T
;
await
handle
.
dispose
(
)
;
return
newHandle
;
}
[
disposeSymbol
]
(
)
:
void
{
super
[
disposeSymbol
]
(
)
;
this
.
client
.
off
(
'
Runtime
.
bindingCalled
'
this
.
#
onBindingCalled
)
;
}
}
