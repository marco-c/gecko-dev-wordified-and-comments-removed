import
type
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
type
{
CDPSession
}
from
'
.
.
/
api
/
CDPSession
.
js
'
;
import
type
{
EventEmitter
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
type
{
CdpTarget
}
from
'
.
/
Target
.
js
'
;
export
type
TargetFactory
=
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
?
:
CDPSession
parentSession
?
:
CDPSession
)
=
>
CdpTarget
;
export
const
enum
TargetManagerEvent
{
TargetDiscovered
=
'
targetDiscovered
'
TargetAvailable
=
'
targetAvailable
'
TargetGone
=
'
targetGone
'
TargetChanged
=
'
targetChanged
'
}
export
interface
TargetManagerEvents
extends
Record
<
EventType
unknown
>
{
[
TargetManagerEvent
.
TargetAvailable
]
:
CdpTarget
;
[
TargetManagerEvent
.
TargetDiscovered
]
:
Protocol
.
Target
.
TargetInfo
;
[
TargetManagerEvent
.
TargetGone
]
:
CdpTarget
;
[
TargetManagerEvent
.
TargetChanged
]
:
{
target
:
CdpTarget
;
wasInitialized
:
true
;
previousURL
:
string
;
}
;
}
export
interface
TargetManager
extends
EventEmitter
<
TargetManagerEvents
>
{
getAvailableTargets
(
)
:
ReadonlyMap
<
string
CdpTarget
>
;
getChildTargets
(
target
:
CdpTarget
)
:
ReadonlySet
<
CdpTarget
>
;
initialize
(
)
:
Promise
<
void
>
;
dispose
(
)
:
void
;
}
