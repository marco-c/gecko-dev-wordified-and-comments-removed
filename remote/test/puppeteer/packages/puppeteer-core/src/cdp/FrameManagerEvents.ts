import
type
Protocol
from
'
devtools
-
protocol
'
;
import
type
{
EventType
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
type
{
CdpFrame
}
from
'
.
/
Frame
.
js
'
;
import
type
{
IsolatedWorld
}
from
'
.
/
IsolatedWorld
.
js
'
;
export
namespace
FrameManagerEvent
{
export
const
FrameAttached
=
Symbol
(
'
FrameManager
.
FrameAttached
'
)
;
export
const
FrameNavigated
=
Symbol
(
'
FrameManager
.
FrameNavigated
'
)
;
export
const
FrameDetached
=
Symbol
(
'
FrameManager
.
FrameDetached
'
)
;
export
const
FrameSwapped
=
Symbol
(
'
FrameManager
.
FrameSwapped
'
)
;
export
const
LifecycleEvent
=
Symbol
(
'
FrameManager
.
LifecycleEvent
'
)
;
export
const
FrameNavigatedWithinDocument
=
Symbol
(
'
FrameManager
.
FrameNavigatedWithinDocument
'
)
;
export
const
ConsoleApiCalled
=
Symbol
(
'
FrameManager
.
ConsoleApiCalled
'
)
;
export
const
BindingCalled
=
Symbol
(
'
FrameManager
.
BindingCalled
'
)
;
}
export
interface
FrameManagerEvents
extends
Record
<
EventType
unknown
>
{
[
FrameManagerEvent
.
FrameAttached
]
:
CdpFrame
;
[
FrameManagerEvent
.
FrameNavigated
]
:
CdpFrame
;
[
FrameManagerEvent
.
FrameDetached
]
:
CdpFrame
;
[
FrameManagerEvent
.
FrameSwapped
]
:
CdpFrame
;
[
FrameManagerEvent
.
LifecycleEvent
]
:
CdpFrame
;
[
FrameManagerEvent
.
FrameNavigatedWithinDocument
]
:
CdpFrame
;
[
FrameManagerEvent
.
ConsoleApiCalled
]
:
[
IsolatedWorld
Protocol
.
Runtime
.
ConsoleAPICalledEvent
]
;
[
FrameManagerEvent
.
BindingCalled
]
:
[
IsolatedWorld
Protocol
.
Runtime
.
BindingCalledEvent
]
;
}
