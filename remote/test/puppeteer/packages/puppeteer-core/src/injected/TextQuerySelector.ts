import
{
createTextContent
isSuitableNodeForTextMatching
}
from
'
.
/
TextContent
.
js
'
;
export
const
textQuerySelectorAll
=
function
*
(
root
:
Node
selector
:
string
)
:
Generator
<
Element
>
{
let
yielded
=
false
;
for
(
const
node
of
root
.
childNodes
)
{
if
(
node
instanceof
Element
&
&
isSuitableNodeForTextMatching
(
node
)
)
{
let
matches
:
Generator
<
Element
boolean
>
;
if
(
!
node
.
shadowRoot
)
{
matches
=
textQuerySelectorAll
(
node
selector
)
;
}
else
{
matches
=
textQuerySelectorAll
(
node
.
shadowRoot
selector
)
;
}
for
(
const
match
of
matches
)
{
yield
match
;
yielded
=
true
;
}
}
}
if
(
yielded
)
{
return
;
}
if
(
root
instanceof
Element
&
&
isSuitableNodeForTextMatching
(
root
)
)
{
const
textContent
=
createTextContent
(
root
)
;
if
(
textContent
.
full
.
includes
(
selector
)
)
{
yield
root
;
}
}
}
;
