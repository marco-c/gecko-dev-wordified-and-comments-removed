const
createdFunctions
=
new
Map
<
string
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
>
(
)
;
export
const
createFunction
=
(
functionValue
:
string
)
:
(
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
)
=
>
{
let
fn
=
createdFunctions
.
get
(
functionValue
)
;
if
(
fn
)
{
return
fn
;
}
fn
=
new
Function
(
return
{
functionValue
}
)
(
)
as
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
;
createdFunctions
.
set
(
functionValue
fn
)
;
return
fn
;
}
;
const
HIDDEN_VISIBILITY_VALUES
=
[
'
hidden
'
'
collapse
'
]
;
export
const
checkVisibility
=
(
node
:
Node
|
null
visible
?
:
boolean
)
:
Node
|
boolean
=
>
{
if
(
!
node
)
{
return
visible
=
=
=
false
;
}
if
(
visible
=
=
=
undefined
)
{
return
node
;
}
const
element
=
(
node
.
nodeType
=
=
=
Node
.
TEXT_NODE
?
node
.
parentElement
:
node
)
as
Element
;
const
style
=
window
.
getComputedStyle
(
element
)
;
const
isVisible
=
style
&
&
!
HIDDEN_VISIBILITY_VALUES
.
includes
(
style
.
visibility
)
&
&
!
isBoundingBoxEmpty
(
element
)
;
return
visible
=
=
=
isVisible
?
node
:
false
;
}
;
function
isBoundingBoxEmpty
(
element
:
Element
)
:
boolean
{
const
rect
=
element
.
getBoundingClientRect
(
)
;
return
rect
.
width
=
=
=
0
|
|
rect
.
height
=
=
=
0
;
}
