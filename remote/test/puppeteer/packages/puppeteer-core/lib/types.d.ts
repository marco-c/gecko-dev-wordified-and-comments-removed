import
{
ChildProcess
}
from
'
child_process
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
type
{
Readable
}
from
'
stream
'
;
declare
const
__JSHandleSymbol
:
unique
symbol
;
export
declare
class
Accessibility
{
#
private
;
snapshot
(
options
?
:
SnapshotOptions
)
:
Promise
<
SerializedAXNode
|
null
>
;
private
serializeTree
;
private
collectInterestingNodes
;
}
export
declare
type
ActionResult
=
'
continue
'
|
'
abort
'
|
'
respond
'
;
export
declare
type
Awaitable
<
T
>
=
T
|
PromiseLike
<
T
>
;
declare
type
BeginSubclassSelectorTokens
=
[
'
.
'
'
#
'
'
[
'
'
:
'
]
;
export
declare
interface
BoundingBox
extends
Point
{
width
:
number
;
height
:
number
;
}
export
declare
interface
BoxModel
{
content
:
Point
[
]
;
padding
:
Point
[
]
;
border
:
Point
[
]
;
margin
:
Point
[
]
;
width
:
number
;
height
:
number
;
}
export
declare
class
Browser
extends
EventEmitter
{
process
(
)
:
ChildProcess
|
null
;
createIncognitoBrowserContext
(
options
?
:
BrowserContextOptions
)
:
Promise
<
BrowserContext
>
;
browserContexts
(
)
:
BrowserContext
[
]
;
defaultBrowserContext
(
)
:
BrowserContext
;
wsEndpoint
(
)
:
string
;
newPage
(
)
:
Promise
<
Page
>
;
targets
(
)
:
Target
[
]
;
target
(
)
:
Target
;
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
WaitForTargetOptions
)
:
Promise
<
Target
>
;
pages
(
)
:
Promise
<
Page
[
]
>
;
version
(
)
:
Promise
<
string
>
;
userAgent
(
)
:
Promise
<
string
>
;
close
(
)
:
Promise
<
void
>
;
disconnect
(
)
:
void
;
isConnected
(
)
:
boolean
;
}
export
declare
interface
BrowserConnectOptions
{
ignoreHTTPSErrors
?
:
boolean
;
defaultViewport
?
:
Viewport
|
null
;
slowMo
?
:
number
;
targetFilter
?
:
TargetFilterCallback
;
}
export
declare
class
BrowserContext
extends
EventEmitter
{
targets
(
)
:
Target
[
]
;
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
{
timeout
?
:
number
;
}
)
:
Promise
<
Target
>
;
pages
(
)
:
Promise
<
Page
[
]
>
;
isIncognito
(
)
:
boolean
;
overridePermissions
(
origin
:
string
permissions
:
Permission
[
]
)
:
Promise
<
void
>
;
clearPermissionOverrides
(
)
:
Promise
<
void
>
;
newPage
(
)
:
Promise
<
Page
>
;
browser
(
)
:
Browser
;
close
(
)
:
Promise
<
void
>
;
get
id
(
)
:
string
|
undefined
;
}
export
declare
const
enum
BrowserContextEmittedEvents
{
TargetChanged
=
"
targetchanged
"
TargetCreated
=
"
targetcreated
"
TargetDestroyed
=
"
targetdestroyed
"
}
export
declare
interface
BrowserContextOptions
{
proxyServer
?
:
string
;
proxyBypassList
?
:
string
[
]
;
}
export
declare
const
enum
BrowserEmittedEvents
{
Disconnected
=
"
disconnected
"
TargetChanged
=
"
targetchanged
"
TargetCreated
=
"
targetcreated
"
TargetDestroyed
=
"
targetdestroyed
"
}
export
declare
class
BrowserFetcher
{
#
private
;
constructor
(
options
:
BrowserFetcherOptions
)
;
platform
(
)
:
Platform
;
product
(
)
:
Product
;
host
(
)
:
string
;
canDownload
(
revision
:
string
)
:
Promise
<
boolean
>
;
download
(
revision
:
string
progressCallback
?
:
(
x
:
number
y
:
number
)
=
>
void
)
:
Promise
<
BrowserFetcherRevisionInfo
|
undefined
>
;
localRevisions
(
)
:
string
[
]
;
remove
(
revision
:
string
)
:
Promise
<
void
>
;
revisionInfo
(
revision
:
string
)
:
BrowserFetcherRevisionInfo
;
}
export
declare
interface
BrowserFetcherOptions
{
path
:
string
;
platform
?
:
Platform
;
product
?
:
'
chrome
'
|
'
firefox
'
;
host
?
:
string
;
useMacOSARMBinary
?
:
boolean
;
}
export
declare
interface
BrowserFetcherRevisionInfo
{
folderPath
:
string
;
executablePath
:
string
;
url
:
string
;
local
:
boolean
;
revision
:
string
;
product
:
string
;
}
export
declare
interface
BrowserLaunchArgumentOptions
{
headless
?
:
boolean
|
'
new
'
;
userDataDir
?
:
string
;
devtools
?
:
boolean
;
debuggingPort
?
:
number
;
args
?
:
string
[
]
;
}
export
declare
class
CDPSession
extends
EventEmitter
{
connection
(
)
:
Connection
|
undefined
;
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
detach
(
)
:
Promise
<
void
>
;
id
(
)
:
string
;
}
declare
interface
CDPSession_2
extends
EventEmitter
{
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
declare
interface
CDPSession_3
extends
EventEmitter
{
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
export
declare
interface
CDPSessionOnMessageObject
{
id
?
:
number
;
method
:
string
;
params
:
Record
<
string
unknown
>
;
error
:
{
message
:
string
;
data
:
any
;
code
:
number
;
}
;
result
?
:
any
;
}
export
declare
type
ChromeReleaseChannel
=
'
chrome
'
|
'
chrome
-
beta
'
|
'
chrome
-
canary
'
|
'
chrome
-
dev
'
;
export
declare
function
clearCustomQueryHandlers
(
)
:
void
;
export
declare
interface
ClickOptions
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
offset
?
:
Offset
;
}
declare
type
CombinatorTokens
=
[
'
'
'
>
'
'
+
'
'
~
'
'
|
'
'
|
'
]
;
declare
interface
CommandResponse
{
id
:
number
;
result
:
object
;
}
export
declare
interface
CommonEventEmitter
{
on
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
off
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
addListener
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
removeListener
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
emit
(
event
:
EventType
eventData
?
:
unknown
)
:
boolean
;
once
(
event
:
EventType
handler
:
Handler
)
:
CommonEventEmitter
;
listenerCount
(
event
:
string
)
:
number
;
removeAllListeners
(
event
?
:
EventType
)
:
CommonEventEmitter
;
}
declare
type
CompoundSelectorsOfComplexSelector
<
ComplexSelector
extends
string
>
=
SplitWithDelemiters
<
ComplexSelector
CombinatorTokens
>
extends
infer
IntermediateTokens
?
IntermediateTokens
extends
readonly
string
[
]
?
Drop
<
IntermediateTokens
'
'
>
:
never
:
never
;
export
declare
interface
Configuration
{
browserRevision
?
:
string
;
cacheDirectory
?
:
string
;
downloadHost
?
:
string
;
downloadPath
?
:
string
;
executablePath
?
:
string
;
defaultProduct
?
:
Product
;
temporaryDirectory
?
:
string
;
skipDownload
?
:
boolean
;
logLevel
?
:
'
silent
'
|
'
error
'
|
'
warn
'
;
experiments
?
:
ExperimentsConfiguration
;
}
export
declare
const
connect
:
(
options
:
ConnectOptions
)
=
>
Promise
<
Browser
>
;
export
declare
class
Connection
extends
EventEmitter
{
#
private
;
constructor
(
url
:
string
transport
:
ConnectionTransport
delay
?
:
number
)
;
static
fromSession
(
session
:
CDPSession
)
:
Connection
|
undefined
;
session
(
sessionId
:
string
)
:
CDPSession
|
null
;
url
(
)
:
string
;
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
dispose
(
)
:
void
;
createSession
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
Promise
<
CDPSession
>
;
}
export
declare
interface
ConnectionCallback
{
resolve
(
args
:
unknown
)
:
void
;
reject
(
args
:
unknown
)
:
void
;
error
:
ProtocolError
;
method
:
string
;
}
export
declare
interface
ConnectionTransport
{
send
(
message
:
string
)
:
void
;
close
(
)
:
void
;
onmessage
?
:
(
message
:
string
)
=
>
void
;
onclose
?
:
(
)
=
>
void
;
}
export
declare
interface
ConnectOptions
extends
BrowserConnectOptions
{
browserWSEndpoint
?
:
string
;
browserURL
?
:
string
;
transport
?
:
ConnectionTransport
;
headers
?
:
Record
<
string
string
>
;
}
export
declare
class
ConsoleMessage
{
#
private
;
constructor
(
type
:
ConsoleMessageType
text
:
string
args
:
JSHandle
[
]
stackTraceLocations
:
ConsoleMessageLocation
[
]
)
;
type
(
)
:
ConsoleMessageType
;
text
(
)
:
string
;
args
(
)
:
JSHandle
[
]
;
location
(
)
:
ConsoleMessageLocation
;
stackTrace
(
)
:
ConsoleMessageLocation
[
]
;
}
export
declare
interface
ConsoleMessageLocation
{
url
?
:
string
;
lineNumber
?
:
number
;
columnNumber
?
:
number
;
}
export
declare
type
ConsoleMessageType
=
'
log
'
|
'
debug
'
|
'
info
'
|
'
error
'
|
'
warning
'
|
'
dir
'
|
'
dirxml
'
|
'
table
'
|
'
trace
'
|
'
clear
'
|
'
startGroup
'
|
'
startGroupCollapsed
'
|
'
endGroup
'
|
'
assert
'
|
'
profile
'
|
'
profileEnd
'
|
'
count
'
|
'
timeEnd
'
|
'
verbose
'
;
export
declare
interface
ContinueRequestOverrides
{
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
Record
<
string
string
>
;
}
export
declare
class
Coverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
startJSCoverage
(
options
?
:
JSCoverageOptions
)
:
Promise
<
void
>
;
stopJSCoverage
(
)
:
Promise
<
JSCoverageEntry
[
]
>
;
startCSSCoverage
(
options
?
:
CSSCoverageOptions
)
:
Promise
<
void
>
;
stopCSSCoverage
(
)
:
Promise
<
CoverageEntry
[
]
>
;
}
export
declare
interface
CoverageEntry
{
url
:
string
;
text
:
string
;
ranges
:
Array
<
{
start
:
number
;
end
:
number
;
}
>
;
}
export
declare
const
createBrowserFetcher
:
(
options
?
:
Partial
<
BrowserFetcherOptions
>
)
=
>
BrowserFetcher
;
export
declare
interface
Credentials
{
username
:
string
;
password
:
string
;
}
export
declare
class
CSSCoverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
start
(
options
?
:
{
resetOnNavigation
?
:
boolean
;
}
)
:
Promise
<
void
>
;
stop
(
)
:
Promise
<
CoverageEntry
[
]
>
;
}
export
declare
interface
CSSCoverageOptions
{
resetOnNavigation
?
:
boolean
;
}
export
declare
class
CustomError
extends
Error
{
}
export
declare
interface
CustomQueryHandler
{
queryOne
?
:
(
node
:
Node
selector
:
string
)
=
>
Node
|
null
;
queryAll
?
:
(
node
:
Node
selector
:
string
)
=
>
Node
[
]
;
}
export
declare
function
customQueryHandlerNames
(
)
:
string
[
]
;
export
declare
const
DEFAULT_INTERCEPT_RESOLUTION_PRIORITY
=
0
;
export
declare
const
defaultArgs
:
(
options
?
:
BrowserLaunchArgumentOptions
)
=
>
string
[
]
;
export
declare
interface
Device
{
userAgent
:
string
;
viewport
:
Viewport
;
}
export
declare
const
devices
:
Readonly
<
Record
<
"
Blackberry
PlayBook
"
|
"
Blackberry
PlayBook
landscape
"
|
"
BlackBerry
Z30
"
|
"
BlackBerry
Z30
landscape
"
|
"
Galaxy
Note
3
"
|
"
Galaxy
Note
3
landscape
"
|
"
Galaxy
Note
II
"
|
"
Galaxy
Note
II
landscape
"
|
"
Galaxy
S
III
"
|
"
Galaxy
S
III
landscape
"
|
"
Galaxy
S5
"
|
"
Galaxy
S5
landscape
"
|
"
Galaxy
S8
"
|
"
Galaxy
S8
landscape
"
|
"
Galaxy
S9
+
"
|
"
Galaxy
S9
+
landscape
"
|
"
Galaxy
Tab
S4
"
|
"
Galaxy
Tab
S4
landscape
"
|
"
iPad
"
|
"
iPad
landscape
"
|
"
iPad
(
gen
6
)
"
|
"
iPad
(
gen
6
)
landscape
"
|
"
iPad
(
gen
7
)
"
|
"
iPad
(
gen
7
)
landscape
"
|
"
iPad
Mini
"
|
"
iPad
Mini
landscape
"
|
"
iPad
Pro
"
|
"
iPad
Pro
landscape
"
|
"
iPad
Pro
11
"
|
"
iPad
Pro
11
landscape
"
|
"
iPhone
4
"
|
"
iPhone
4
landscape
"
|
"
iPhone
5
"
|
"
iPhone
5
landscape
"
|
"
iPhone
6
"
|
"
iPhone
6
landscape
"
|
"
iPhone
6
Plus
"
|
"
iPhone
6
Plus
landscape
"
|
"
iPhone
7
"
|
"
iPhone
7
landscape
"
|
"
iPhone
7
Plus
"
|
"
iPhone
7
Plus
landscape
"
|
"
iPhone
8
"
|
"
iPhone
8
landscape
"
|
"
iPhone
8
Plus
"
|
"
iPhone
8
Plus
landscape
"
|
"
iPhone
SE
"
|
"
iPhone
SE
landscape
"
|
"
iPhone
X
"
|
"
iPhone
X
landscape
"
|
"
iPhone
XR
"
|
"
iPhone
XR
landscape
"
|
"
iPhone
11
"
|
"
iPhone
11
landscape
"
|
"
iPhone
11
Pro
"
|
"
iPhone
11
Pro
landscape
"
|
"
iPhone
11
Pro
Max
"
|
"
iPhone
11
Pro
Max
landscape
"
|
"
iPhone
12
"
|
"
iPhone
12
landscape
"
|
"
iPhone
12
Pro
"
|
"
iPhone
12
Pro
landscape
"
|
"
iPhone
12
Pro
Max
"
|
"
iPhone
12
Pro
Max
landscape
"
|
"
iPhone
12
Mini
"
|
"
iPhone
12
Mini
landscape
"
|
"
iPhone
13
"
|
"
iPhone
13
landscape
"
|
"
iPhone
13
Pro
"
|
"
iPhone
13
Pro
landscape
"
|
"
iPhone
13
Pro
Max
"
|
"
iPhone
13
Pro
Max
landscape
"
|
"
iPhone
13
Mini
"
|
"
iPhone
13
Mini
landscape
"
|
"
JioPhone
2
"
|
"
JioPhone
2
landscape
"
|
"
Kindle
Fire
HDX
"
|
"
Kindle
Fire
HDX
landscape
"
|
"
LG
Optimus
L70
"
|
"
LG
Optimus
L70
landscape
"
|
"
Microsoft
Lumia
550
"
|
"
Microsoft
Lumia
950
"
|
"
Microsoft
Lumia
950
landscape
"
|
"
Nexus
10
"
|
"
Nexus
10
landscape
"
|
"
Nexus
4
"
|
"
Nexus
4
landscape
"
|
"
Nexus
5
"
|
"
Nexus
5
landscape
"
|
"
Nexus
5X
"
|
"
Nexus
5X
landscape
"
|
"
Nexus
6
"
|
"
Nexus
6
landscape
"
|
"
Nexus
6P
"
|
"
Nexus
6P
landscape
"
|
"
Nexus
7
"
|
"
Nexus
7
landscape
"
|
"
Nokia
Lumia
520
"
|
"
Nokia
Lumia
520
landscape
"
|
"
Nokia
N9
"
|
"
Nokia
N9
landscape
"
|
"
Pixel
2
"
|
"
Pixel
2
landscape
"
|
"
Pixel
2
XL
"
|
"
Pixel
2
XL
landscape
"
|
"
Pixel
3
"
|
"
Pixel
3
landscape
"
|
"
Pixel
4
"
|
"
Pixel
4
landscape
"
|
"
Pixel
4a
(
5G
)
"
|
"
Pixel
4a
(
5G
)
landscape
"
|
"
Pixel
5
"
|
"
Pixel
5
landscape
"
|
"
Moto
G4
"
|
"
Moto
G4
landscape
"
Device
>
>
;
export
declare
class
Dialog
{
#
private
;
type
(
)
:
Protocol
.
Page
.
DialogType
;
message
(
)
:
string
;
defaultValue
(
)
:
string
;
accept
(
promptText
?
:
string
)
:
Promise
<
void
>
;
dismiss
(
)
:
Promise
<
void
>
;
}
declare
type
Drop
<
Arr
extends
readonly
unknown
[
]
Remove
Acc
extends
unknown
[
]
=
[
]
>
=
Arr
extends
[
infer
Head
.
.
.
infer
Tail
]
?
Head
extends
Remove
?
Drop
<
Tail
Remove
>
:
Drop
<
Tail
Remove
[
.
.
.
Acc
Head
]
>
:
Acc
;
export
declare
type
ElementFor
<
TagName
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
>
=
TagName
extends
keyof
HTMLElementTagNameMap
?
HTMLElementTagNameMap
[
TagName
]
:
TagName
extends
keyof
SVGElementTagNameMap
?
SVGElementTagNameMap
[
TagName
]
:
never
;
export
declare
class
ElementHandle
<
ElementType
extends
Node
=
Element
>
extends
JSHandle
<
ElementType
>
{
#
private
;
get
frame
(
)
:
Frame
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
HandleFor
<
Array
<
NodeFor
<
Selector
>
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
HandleFor
<
Array
<
NodeFor
<
Selector
>
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
;
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
?
:
WaitForSelectorOptions
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
waitForXPath
(
xpath
:
string
options
?
:
{
visible
?
:
boolean
;
hidden
?
:
boolean
;
timeout
?
:
number
;
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
;
toElement
<
K
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
>
(
tagName
:
K
)
:
Promise
<
HandleFor
<
ElementFor
<
K
>
>
>
;
asElement
(
)
:
ElementHandle
<
ElementType
>
|
null
;
contentFrame
(
)
:
Promise
<
Frame
|
null
>
;
clickablePoint
(
offset
?
:
Offset
)
:
Promise
<
Point
>
;
hover
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
;
click
(
this
:
ElementHandle
<
Element
>
options
?
:
ClickOptions
)
:
Promise
<
void
>
;
drag
(
this
:
ElementHandle
<
Element
>
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
dragEnter
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragOver
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
drop
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragAndDrop
(
this
:
ElementHandle
<
Element
>
target
:
ElementHandle
<
Node
>
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
select
(
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
;
uploadFile
(
this
:
ElementHandle
<
HTMLInputElement
>
.
.
.
filePaths
:
string
[
]
)
:
Promise
<
void
>
;
tap
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
;
focus
(
)
:
Promise
<
void
>
;
type
(
text
:
string
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
press
(
key
:
KeyInput
options
?
:
PressOptions
)
:
Promise
<
void
>
;
boundingBox
(
)
:
Promise
<
BoundingBox
|
null
>
;
boxModel
(
)
:
Promise
<
BoxModel
|
null
>
;
screenshot
(
this
:
ElementHandle
<
Element
>
options
?
:
ScreenshotOptions
)
:
Promise
<
string
|
Buffer
>
;
isIntersectingViewport
(
this
:
ElementHandle
<
Element
>
options
?
:
{
threshold
?
:
number
;
}
)
:
Promise
<
boolean
>
;
}
export
declare
type
ErrorCode
=
'
aborted
'
|
'
accessdenied
'
|
'
addressunreachable
'
|
'
blockedbyclient
'
|
'
blockedbyresponse
'
|
'
connectionaborted
'
|
'
connectionclosed
'
|
'
connectionfailed
'
|
'
connectionrefused
'
|
'
connectionreset
'
|
'
internetdisconnected
'
|
'
namenotresolved
'
|
'
timedout
'
|
'
failed
'
;
export
declare
const
errors
:
PuppeteerErrors
;
export
declare
type
EvaluateFunc
<
T
extends
unknown
[
]
>
=
(
.
.
.
params
:
InnerParams
<
T
>
)
=
>
Awaitable
<
unknown
>
;
export
declare
const
EVALUATION_SCRIPT_URL
=
"
pptr
:
/
/
__puppeteer_evaluation_script__
"
;
export
declare
class
EventEmitter
implements
CommonEventEmitter
{
private
emitter
;
private
eventsMap
;
on
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
;
off
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
;
removeListener
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
;
addListener
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
;
emit
(
event
:
EventType
eventData
?
:
unknown
)
:
boolean
;
once
(
event
:
EventType
handler
:
Handler
<
any
>
)
:
EventEmitter
;
listenerCount
(
event
:
EventType
)
:
number
;
removeAllListeners
(
event
?
:
EventType
)
:
EventEmitter
;
private
eventListenersCount
;
}
export
declare
type
EventType
=
string
|
symbol
;
export
declare
const
executablePath
:
(
channel
?
:
ChromeReleaseChannel
|
undefined
)
=
>
string
;
export
declare
interface
ExperimentsConfiguration
{
macArmChromiumEnabled
?
:
boolean
;
}
export
declare
class
FileChooser
{
#
private
;
isMultiple
(
)
:
boolean
;
accept
(
filePaths
:
string
[
]
)
:
Promise
<
void
>
;
cancel
(
)
:
void
;
}
declare
type
FlatmapSplitWithDelemiters
<
Inputs
extends
readonly
string
[
]
Delemiters
extends
readonly
string
[
]
Acc
extends
string
[
]
=
[
]
>
=
Inputs
extends
[
infer
FirstInput
.
.
.
infer
RestInputs
]
?
FirstInput
extends
string
?
RestInputs
extends
readonly
string
[
]
?
FlatmapSplitWithDelemiters
<
RestInputs
Delemiters
[
.
.
.
Acc
.
.
.
SplitWithDelemiters
<
FirstInput
Delemiters
>
]
>
:
Acc
:
Acc
:
Acc
;
export
declare
type
FlattenHandle
<
T
>
=
T
extends
HandleOr
<
infer
U
>
?
U
:
never
;
export
declare
class
Frame
{
#
private
;
page
(
)
:
Page
;
isOOPFrame
(
)
:
boolean
;
goto
(
url
:
string
options
?
:
{
referer
?
:
string
;
referrerPolicy
?
:
string
;
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
)
:
Promise
<
HTTPResponse
|
null
>
;
waitForNavigation
(
options
?
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
)
:
Promise
<
HTTPResponse
|
null
>
;
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
;
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
?
:
WaitForSelectorOptions
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
waitForXPath
(
xpath
:
string
options
?
:
WaitForSelectorOptions
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
;
waitForFunction
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
options
?
:
FrameWaitForFunctionOptions
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
content
(
)
:
Promise
<
string
>
;
setContent
(
html
:
string
options
?
:
{
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
)
:
Promise
<
void
>
;
name
(
)
:
string
;
url
(
)
:
string
;
parentFrame
(
)
:
Frame
|
null
;
childFrames
(
)
:
Frame
[
]
;
isDetached
(
)
:
boolean
;
addScriptTag
(
options
:
FrameAddScriptTagOptions
)
:
Promise
<
ElementHandle
<
HTMLScriptElement
>
>
;
addStyleTag
(
options
:
Omit
<
FrameAddStyleTagOptions
'
url
'
>
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
>
>
;
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLLinkElement
>
>
;
click
(
selector
:
string
options
?
:
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
)
:
Promise
<
void
>
;
focus
(
selector
:
string
)
:
Promise
<
void
>
;
hover
(
selector
:
string
)
:
Promise
<
void
>
;
select
(
selector
:
string
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
;
tap
(
selector
:
string
)
:
Promise
<
void
>
;
type
(
selector
:
string
text
:
string
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
waitForTimeout
(
milliseconds
:
number
)
:
Promise
<
void
>
;
title
(
)
:
Promise
<
string
>
;
}
export
declare
interface
FrameAddScriptTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
type
?
:
string
;
id
?
:
string
;
}
export
declare
interface
FrameAddStyleTagOptions
{
url
?
:
string
;
path
?
:
string
;
content
?
:
string
;
}
declare
interface
FrameManager_2
{
frame
(
frameId
:
string
)
:
Frame
|
null
;
}
export
declare
interface
FrameWaitForFunctionOptions
{
polling
?
:
'
raf
'
|
'
mutation
'
|
number
;
timeout
?
:
number
;
}
export
declare
interface
GeolocationOptions
{
longitude
:
number
;
latitude
:
number
;
accuracy
?
:
number
;
}
export
declare
type
HandleFor
<
T
>
=
T
extends
Node
?
ElementHandle
<
T
>
:
JSHandle
<
T
>
;
export
declare
type
HandleOr
<
T
>
=
HandleFor
<
T
>
|
JSHandle
<
T
>
|
T
;
export
declare
type
Handler
<
T
=
unknown
>
=
(
event
:
T
)
=
>
void
;
export
declare
class
HTTPRequest
{
#
private
;
get
client
(
)
:
CDPSession_3
;
url
(
)
:
string
;
continueRequestOverrides
(
)
:
ContinueRequestOverrides
;
responseForRequest
(
)
:
Partial
<
ResponseForRequest
>
|
null
;
abortErrorReason
(
)
:
Protocol
.
Network
.
ErrorReason
|
null
;
interceptResolutionState
(
)
:
InterceptResolutionState
;
isInterceptResolutionHandled
(
)
:
boolean
;
enqueueInterceptAction
(
pendingHandler
:
(
)
=
>
void
|
PromiseLike
<
unknown
>
)
:
void
;
finalizeInterceptions
(
)
:
Promise
<
void
>
;
resourceType
(
)
:
ResourceType
;
method
(
)
:
string
;
postData
(
)
:
string
|
undefined
;
headers
(
)
:
Record
<
string
string
>
;
response
(
)
:
HTTPResponse
|
null
;
frame
(
)
:
Frame
|
null
;
isNavigationRequest
(
)
:
boolean
;
initiator
(
)
:
Protocol
.
Network
.
Initiator
;
redirectChain
(
)
:
HTTPRequest
[
]
;
failure
(
)
:
{
errorText
:
string
;
}
|
null
;
continue
(
overrides
?
:
ContinueRequestOverrides
priority
?
:
number
)
:
Promise
<
void
>
;
respond
(
response
:
Partial
<
ResponseForRequest
>
priority
?
:
number
)
:
Promise
<
void
>
;
abort
(
errorCode
?
:
ErrorCode
priority
?
:
number
)
:
Promise
<
void
>
;
}
export
declare
class
HTTPResponse
{
#
private
;
remoteAddress
(
)
:
RemoteAddress
;
url
(
)
:
string
;
ok
(
)
:
boolean
;
status
(
)
:
number
;
statusText
(
)
:
string
;
headers
(
)
:
Record
<
string
string
>
;
securityDetails
(
)
:
SecurityDetails
|
null
;
timing
(
)
:
Protocol
.
Network
.
ResourceTiming
|
null
;
buffer
(
)
:
Promise
<
Buffer
>
;
text
(
)
:
Promise
<
string
>
;
json
(
)
:
Promise
<
any
>
;
request
(
)
:
HTTPRequest
;
fromCache
(
)
:
boolean
;
fromServiceWorker
(
)
:
boolean
;
frame
(
)
:
Frame
|
null
;
}
export
declare
type
InnerParams
<
T
extends
unknown
[
]
>
=
{
[
K
in
keyof
T
]
:
FlattenHandle
<
T
[
K
]
>
;
}
;
export
declare
enum
InterceptResolutionAction
{
Abort
=
"
abort
"
Respond
=
"
respond
"
Continue
=
"
continue
"
Disabled
=
"
disabled
"
None
=
"
none
"
AlreadyHandled
=
"
already
-
handled
"
}
export
declare
interface
InterceptResolutionState
{
action
:
InterceptResolutionAction
;
priority
?
:
number
;
}
export
declare
type
InterceptResolutionStrategy
=
InterceptResolutionAction
;
export
declare
interface
InternalNetworkConditions
extends
NetworkConditions
{
offline
:
boolean
;
}
export
declare
class
JSCoverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
start
(
options
?
:
{
resetOnNavigation
?
:
boolean
;
reportAnonymousScripts
?
:
boolean
;
includeRawScriptCoverage
?
:
boolean
;
useBlockCoverage
?
:
boolean
;
}
)
:
Promise
<
void
>
;
stop
(
)
:
Promise
<
JSCoverageEntry
[
]
>
;
}
export
declare
interface
JSCoverageEntry
extends
CoverageEntry
{
rawScriptCoverage
?
:
Protocol
.
Profiler
.
ScriptCoverage
;
}
export
declare
interface
JSCoverageOptions
{
resetOnNavigation
?
:
boolean
;
reportAnonymousScripts
?
:
boolean
;
includeRawScriptCoverage
?
:
boolean
;
useBlockCoverage
?
:
boolean
;
}
export
declare
class
JSHandle
<
T
=
unknown
>
{
#
private
;
[
__JSHandleSymbol
]
?
:
T
;
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
this
.
.
.
Params
]
>
=
EvaluateFunc
<
[
this
.
.
.
Params
]
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
this
.
.
.
Params
]
>
=
EvaluateFunc
<
[
this
.
.
.
Params
]
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
getProperty
<
K
extends
keyof
T
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
T
[
K
]
>
>
;
getProperty
(
propertyName
:
string
)
:
Promise
<
JSHandle
<
unknown
>
>
;
getProperties
(
)
:
Promise
<
Map
<
string
JSHandle
>
>
;
jsonValue
(
)
:
Promise
<
T
>
;
asElement
(
)
:
ElementHandle
<
Node
>
|
null
;
dispose
(
)
:
Promise
<
void
>
;
toString
(
)
:
string
;
remoteObject
(
)
:
Protocol
.
Runtime
.
RemoteObject
;
}
export
declare
class
Keyboard
{
#
private
;
down
(
key
:
KeyInput
options
?
:
{
text
?
:
string
;
commands
?
:
string
[
]
;
}
)
:
Promise
<
void
>
;
up
(
key
:
KeyInput
)
:
Promise
<
void
>
;
sendCharacter
(
char
:
string
)
:
Promise
<
void
>
;
private
charIsKey
;
type
(
text
:
string
options
?
:
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
press
(
key
:
KeyInput
options
?
:
{
delay
?
:
number
;
text
?
:
string
;
commands
?
:
string
[
]
;
}
)
:
Promise
<
void
>
;
}
export
declare
type
KeyInput
=
'
0
'
|
'
1
'
|
'
2
'
|
'
3
'
|
'
4
'
|
'
5
'
|
'
6
'
|
'
7
'
|
'
8
'
|
'
9
'
|
'
Power
'
|
'
Eject
'
|
'
Abort
'
|
'
Help
'
|
'
Backspace
'
|
'
Tab
'
|
'
Numpad5
'
|
'
NumpadEnter
'
|
'
Enter
'
|
'
\
r
'
|
'
\
n
'
|
'
ShiftLeft
'
|
'
ShiftRight
'
|
'
ControlLeft
'
|
'
ControlRight
'
|
'
AltLeft
'
|
'
AltRight
'
|
'
Pause
'
|
'
CapsLock
'
|
'
Escape
'
|
'
Convert
'
|
'
NonConvert
'
|
'
Space
'
|
'
Numpad9
'
|
'
PageUp
'
|
'
Numpad3
'
|
'
PageDown
'
|
'
End
'
|
'
Numpad1
'
|
'
Home
'
|
'
Numpad7
'
|
'
ArrowLeft
'
|
'
Numpad4
'
|
'
Numpad8
'
|
'
ArrowUp
'
|
'
ArrowRight
'
|
'
Numpad6
'
|
'
Numpad2
'
|
'
ArrowDown
'
|
'
Select
'
|
'
Open
'
|
'
PrintScreen
'
|
'
Insert
'
|
'
Numpad0
'
|
'
Delete
'
|
'
NumpadDecimal
'
|
'
Digit0
'
|
'
Digit1
'
|
'
Digit2
'
|
'
Digit3
'
|
'
Digit4
'
|
'
Digit5
'
|
'
Digit6
'
|
'
Digit7
'
|
'
Digit8
'
|
'
Digit9
'
|
'
KeyA
'
|
'
KeyB
'
|
'
KeyC
'
|
'
KeyD
'
|
'
KeyE
'
|
'
KeyF
'
|
'
KeyG
'
|
'
KeyH
'
|
'
KeyI
'
|
'
KeyJ
'
|
'
KeyK
'
|
'
KeyL
'
|
'
KeyM
'
|
'
KeyN
'
|
'
KeyO
'
|
'
KeyP
'
|
'
KeyQ
'
|
'
KeyR
'
|
'
KeyS
'
|
'
KeyT
'
|
'
KeyU
'
|
'
KeyV
'
|
'
KeyW
'
|
'
KeyX
'
|
'
KeyY
'
|
'
KeyZ
'
|
'
MetaLeft
'
|
'
MetaRight
'
|
'
ContextMenu
'
|
'
NumpadMultiply
'
|
'
NumpadAdd
'
|
'
NumpadSubtract
'
|
'
NumpadDivide
'
|
'
F1
'
|
'
F2
'
|
'
F3
'
|
'
F4
'
|
'
F5
'
|
'
F6
'
|
'
F7
'
|
'
F8
'
|
'
F9
'
|
'
F10
'
|
'
F11
'
|
'
F12
'
|
'
F13
'
|
'
F14
'
|
'
F15
'
|
'
F16
'
|
'
F17
'
|
'
F18
'
|
'
F19
'
|
'
F20
'
|
'
F21
'
|
'
F22
'
|
'
F23
'
|
'
F24
'
|
'
NumLock
'
|
'
ScrollLock
'
|
'
AudioVolumeMute
'
|
'
AudioVolumeDown
'
|
'
AudioVolumeUp
'
|
'
MediaTrackNext
'
|
'
MediaTrackPrevious
'
|
'
MediaStop
'
|
'
MediaPlayPause
'
|
'
Semicolon
'
|
'
Equal
'
|
'
NumpadEqual
'
|
'
Comma
'
|
'
Minus
'
|
'
Period
'
|
'
Slash
'
|
'
Backquote
'
|
'
BracketLeft
'
|
'
Backslash
'
|
'
BracketRight
'
|
'
Quote
'
|
'
AltGraph
'
|
'
Props
'
|
'
Cancel
'
|
'
Clear
'
|
'
Shift
'
|
'
Control
'
|
'
Alt
'
|
'
Accept
'
|
'
ModeChange
'
|
'
'
|
'
Print
'
|
'
Execute
'
|
'
\
u0000
'
|
'
a
'
|
'
b
'
|
'
c
'
|
'
d
'
|
'
e
'
|
'
f
'
|
'
g
'
|
'
h
'
|
'
i
'
|
'
j
'
|
'
k
'
|
'
l
'
|
'
m
'
|
'
n
'
|
'
o
'
|
'
p
'
|
'
q
'
|
'
r
'
|
'
s
'
|
'
t
'
|
'
u
'
|
'
v
'
|
'
w
'
|
'
x
'
|
'
y
'
|
'
z
'
|
'
Meta
'
|
'
*
'
|
'
+
'
|
'
-
'
|
'
/
'
|
'
;
'
|
'
=
'
|
'
'
|
'
.
'
|
'
'
|
'
[
'
|
'
\
\
'
|
'
]
'
|
"
'
"
|
'
Attn
'
|
'
CrSel
'
|
'
ExSel
'
|
'
EraseEof
'
|
'
Play
'
|
'
ZoomOut
'
|
'
)
'
|
'
!
'
|
'
'
|
'
#
'
|
'
'
|
'
%
'
|
'
^
'
|
'
&
'
|
'
(
'
|
'
A
'
|
'
B
'
|
'
C
'
|
'
D
'
|
'
E
'
|
'
F
'
|
'
G
'
|
'
H
'
|
'
I
'
|
'
J
'
|
'
K
'
|
'
L
'
|
'
M
'
|
'
N
'
|
'
O
'
|
'
P
'
|
'
Q
'
|
'
R
'
|
'
S
'
|
'
T
'
|
'
U
'
|
'
V
'
|
'
W
'
|
'
X
'
|
'
Y
'
|
'
Z
'
|
'
:
'
|
'
<
'
|
'
_
'
|
'
>
'
|
'
?
'
|
'
~
'
|
'
{
'
|
'
|
'
|
'
}
'
|
'
"
'
|
'
SoftLeft
'
|
'
SoftRight
'
|
'
Camera
'
|
'
Call
'
|
'
EndCall
'
|
'
VolumeDown
'
|
'
VolumeUp
'
;
export
declare
const
KnownDevices
:
Readonly
<
Record
<
"
Blackberry
PlayBook
"
|
"
Blackberry
PlayBook
landscape
"
|
"
BlackBerry
Z30
"
|
"
BlackBerry
Z30
landscape
"
|
"
Galaxy
Note
3
"
|
"
Galaxy
Note
3
landscape
"
|
"
Galaxy
Note
II
"
|
"
Galaxy
Note
II
landscape
"
|
"
Galaxy
S
III
"
|
"
Galaxy
S
III
landscape
"
|
"
Galaxy
S5
"
|
"
Galaxy
S5
landscape
"
|
"
Galaxy
S8
"
|
"
Galaxy
S8
landscape
"
|
"
Galaxy
S9
+
"
|
"
Galaxy
S9
+
landscape
"
|
"
Galaxy
Tab
S4
"
|
"
Galaxy
Tab
S4
landscape
"
|
"
iPad
"
|
"
iPad
landscape
"
|
"
iPad
(
gen
6
)
"
|
"
iPad
(
gen
6
)
landscape
"
|
"
iPad
(
gen
7
)
"
|
"
iPad
(
gen
7
)
landscape
"
|
"
iPad
Mini
"
|
"
iPad
Mini
landscape
"
|
"
iPad
Pro
"
|
"
iPad
Pro
landscape
"
|
"
iPad
Pro
11
"
|
"
iPad
Pro
11
landscape
"
|
"
iPhone
4
"
|
"
iPhone
4
landscape
"
|
"
iPhone
5
"
|
"
iPhone
5
landscape
"
|
"
iPhone
6
"
|
"
iPhone
6
landscape
"
|
"
iPhone
6
Plus
"
|
"
iPhone
6
Plus
landscape
"
|
"
iPhone
7
"
|
"
iPhone
7
landscape
"
|
"
iPhone
7
Plus
"
|
"
iPhone
7
Plus
landscape
"
|
"
iPhone
8
"
|
"
iPhone
8
landscape
"
|
"
iPhone
8
Plus
"
|
"
iPhone
8
Plus
landscape
"
|
"
iPhone
SE
"
|
"
iPhone
SE
landscape
"
|
"
iPhone
X
"
|
"
iPhone
X
landscape
"
|
"
iPhone
XR
"
|
"
iPhone
XR
landscape
"
|
"
iPhone
11
"
|
"
iPhone
11
landscape
"
|
"
iPhone
11
Pro
"
|
"
iPhone
11
Pro
landscape
"
|
"
iPhone
11
Pro
Max
"
|
"
iPhone
11
Pro
Max
landscape
"
|
"
iPhone
12
"
|
"
iPhone
12
landscape
"
|
"
iPhone
12
Pro
"
|
"
iPhone
12
Pro
landscape
"
|
"
iPhone
12
Pro
Max
"
|
"
iPhone
12
Pro
Max
landscape
"
|
"
iPhone
12
Mini
"
|
"
iPhone
12
Mini
landscape
"
|
"
iPhone
13
"
|
"
iPhone
13
landscape
"
|
"
iPhone
13
Pro
"
|
"
iPhone
13
Pro
landscape
"
|
"
iPhone
13
Pro
Max
"
|
"
iPhone
13
Pro
Max
landscape
"
|
"
iPhone
13
Mini
"
|
"
iPhone
13
Mini
landscape
"
|
"
JioPhone
2
"
|
"
JioPhone
2
landscape
"
|
"
Kindle
Fire
HDX
"
|
"
Kindle
Fire
HDX
landscape
"
|
"
LG
Optimus
L70
"
|
"
LG
Optimus
L70
landscape
"
|
"
Microsoft
Lumia
550
"
|
"
Microsoft
Lumia
950
"
|
"
Microsoft
Lumia
950
landscape
"
|
"
Nexus
10
"
|
"
Nexus
10
landscape
"
|
"
Nexus
4
"
|
"
Nexus
4
landscape
"
|
"
Nexus
5
"
|
"
Nexus
5
landscape
"
|
"
Nexus
5X
"
|
"
Nexus
5X
landscape
"
|
"
Nexus
6
"
|
"
Nexus
6
landscape
"
|
"
Nexus
6P
"
|
"
Nexus
6P
landscape
"
|
"
Nexus
7
"
|
"
Nexus
7
landscape
"
|
"
Nokia
Lumia
520
"
|
"
Nokia
Lumia
520
landscape
"
|
"
Nokia
N9
"
|
"
Nokia
N9
landscape
"
|
"
Pixel
2
"
|
"
Pixel
2
landscape
"
|
"
Pixel
2
XL
"
|
"
Pixel
2
XL
landscape
"
|
"
Pixel
3
"
|
"
Pixel
3
landscape
"
|
"
Pixel
4
"
|
"
Pixel
4
landscape
"
|
"
Pixel
4a
(
5G
)
"
|
"
Pixel
4a
(
5G
)
landscape
"
|
"
Pixel
5
"
|
"
Pixel
5
landscape
"
|
"
Moto
G4
"
|
"
Moto
G4
landscape
"
Device
>
>
;
declare
type
Last
<
Arr
extends
NonEmptyReadonlyArray
<
unknown
>
>
=
Arr
extends
[
infer
Head
.
.
.
infer
Tail
]
?
Tail
extends
NonEmptyReadonlyArray
<
unknown
>
?
Last
<
Tail
>
:
Head
:
never
;
export
declare
const
launch
:
(
options
?
:
PuppeteerLaunchOptions
)
=
>
Promise
<
Browser
>
;
export
declare
interface
LaunchOptions
{
channel
?
:
ChromeReleaseChannel
;
executablePath
?
:
string
;
ignoreDefaultArgs
?
:
boolean
|
string
[
]
;
handleSIGINT
?
:
boolean
;
handleSIGTERM
?
:
boolean
;
handleSIGHUP
?
:
boolean
;
timeout
?
:
number
;
dumpio
?
:
boolean
;
env
?
:
Record
<
string
string
|
undefined
>
;
pipe
?
:
boolean
;
product
?
:
Product
;
extraPrefsFirefox
?
:
Record
<
string
unknown
>
;
waitForInitialPage
?
:
boolean
;
}
export
declare
type
LowerCasePaperFormat
=
'
letter
'
|
'
legal
'
|
'
tabloid
'
|
'
ledger
'
|
'
a0
'
|
'
a1
'
|
'
a2
'
|
'
a3
'
|
'
a4
'
|
'
a5
'
|
'
a6
'
;
export
declare
interface
MediaFeature
{
name
:
string
;
value
:
string
;
}
export
declare
interface
Metrics
{
Timestamp
?
:
number
;
Documents
?
:
number
;
Frames
?
:
number
;
JSEventListeners
?
:
number
;
Nodes
?
:
number
;
LayoutCount
?
:
number
;
RecalcStyleCount
?
:
number
;
LayoutDuration
?
:
number
;
RecalcStyleDuration
?
:
number
;
ScriptDuration
?
:
number
;
TaskDuration
?
:
number
;
JSHeapUsedSize
?
:
number
;
JSHeapTotalSize
?
:
number
;
}
export
declare
class
Mouse
{
#
private
;
move
(
x
:
number
y
:
number
options
?
:
{
steps
?
:
number
;
}
)
:
Promise
<
void
>
;
click
(
x
:
number
y
:
number
options
?
:
MouseOptions
&
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
down
(
options
?
:
MouseOptions
)
:
Promise
<
void
>
;
up
(
options
?
:
MouseOptions
)
:
Promise
<
void
>
;
wheel
(
options
?
:
MouseWheelOptions
)
:
Promise
<
void
>
;
drag
(
start
:
Point
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
dragEnter
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragOver
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
drop
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragAndDrop
(
start
:
Point
target
:
Point
options
?
:
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
}
export
declare
type
MouseButton
=
'
left
'
|
'
right
'
|
'
middle
'
|
'
back
'
|
'
forward
'
;
export
declare
interface
MouseOptions
{
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
export
declare
interface
MouseWheelOptions
{
deltaX
?
:
number
;
deltaY
?
:
number
;
}
export
declare
interface
NetworkConditions
{
download
:
number
;
upload
:
number
;
latency
:
number
;
}
export
declare
const
networkConditions
:
Readonly
<
{
'
Slow
3G
'
:
NetworkConditions
;
'
Fast
3G
'
:
NetworkConditions
;
}
>
;
export
declare
type
NodeFor
<
ComplexSelector
extends
string
>
=
TypeSelectorOfComplexSelector
<
ComplexSelector
>
extends
infer
TypeSelector
?
TypeSelector
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
?
ElementFor
<
TypeSelector
>
:
Element
:
never
;
declare
type
NonEmptyReadonlyArray
<
T
>
=
[
T
.
.
.
(
readonly
T
[
]
)
]
;
export
declare
interface
Offset
{
x
:
number
;
y
:
number
;
}
export
declare
class
Page
extends
EventEmitter
{
#
private
;
isDragInterceptionEnabled
(
)
:
boolean
;
isJavaScriptEnabled
(
)
:
boolean
;
on
<
K
extends
keyof
PageEventObject
>
(
eventName
:
K
handler
:
(
event
:
PageEventObject
[
K
]
)
=
>
void
)
:
EventEmitter
;
once
<
K
extends
keyof
PageEventObject
>
(
eventName
:
K
handler
:
(
event
:
PageEventObject
[
K
]
)
=
>
void
)
:
EventEmitter
;
off
<
K
extends
keyof
PageEventObject
>
(
eventName
:
K
handler
:
(
event
:
PageEventObject
[
K
]
)
=
>
void
)
:
EventEmitter
;
waitForFileChooser
(
options
?
:
WaitTimeoutOptions
)
:
Promise
<
FileChooser
>
;
setGeolocation
(
options
:
GeolocationOptions
)
:
Promise
<
void
>
;
target
(
)
:
Target
;
browser
(
)
:
Browser
;
browserContext
(
)
:
BrowserContext
;
mainFrame
(
)
:
Frame
;
get
keyboard
(
)
:
Keyboard
;
get
touchscreen
(
)
:
Touchscreen
;
get
coverage
(
)
:
Coverage
;
get
tracing
(
)
:
Tracing
;
get
accessibility
(
)
:
Accessibility
;
frames
(
)
:
Frame
[
]
;
workers
(
)
:
WebWorker
[
]
;
setRequestInterception
(
value
:
boolean
)
:
Promise
<
void
>
;
setDragInterception
(
enabled
:
boolean
)
:
Promise
<
void
>
;
setOfflineMode
(
enabled
:
boolean
)
:
Promise
<
void
>
;
emulateNetworkConditions
(
networkConditions
:
NetworkConditions
|
null
)
:
Promise
<
void
>
;
setDefaultNavigationTimeout
(
timeout
:
number
)
:
void
;
setDefaultTimeout
(
timeout
:
number
)
:
void
;
getDefaultTimeout
(
)
:
number
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
;
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
queryObjects
<
Prototype
>
(
prototypeHandle
:
JSHandle
<
Prototype
>
)
:
Promise
<
JSHandle
<
Prototype
[
]
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
Array
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
;
cookies
(
.
.
.
urls
:
string
[
]
)
:
Promise
<
Protocol
.
Network
.
Cookie
[
]
>
;
deleteCookie
(
.
.
.
cookies
:
Protocol
.
Network
.
DeleteCookiesRequest
[
]
)
:
Promise
<
void
>
;
setCookie
(
.
.
.
cookies
:
Protocol
.
Network
.
CookieParam
[
]
)
:
Promise
<
void
>
;
addScriptTag
(
options
:
FrameAddScriptTagOptions
)
:
Promise
<
ElementHandle
<
HTMLScriptElement
>
>
;
addStyleTag
(
options
:
Omit
<
FrameAddStyleTagOptions
'
url
'
>
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
>
>
;
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLLinkElement
>
>
;
addStyleTag
(
options
:
FrameAddStyleTagOptions
)
:
Promise
<
ElementHandle
<
HTMLStyleElement
|
HTMLLinkElement
>
>
;
exposeFunction
(
name
:
string
pptrFunction
:
Function
|
{
default
:
Function
;
}
)
:
Promise
<
void
>
;
authenticate
(
credentials
:
Credentials
)
:
Promise
<
void
>
;
setExtraHTTPHeaders
(
headers
:
Record
<
string
string
>
)
:
Promise
<
void
>
;
setUserAgent
(
userAgent
:
string
userAgentMetadata
?
:
Protocol
.
Emulation
.
UserAgentMetadata
)
:
Promise
<
void
>
;
metrics
(
)
:
Promise
<
Metrics
>
;
url
(
)
:
string
;
content
(
)
:
Promise
<
string
>
;
setContent
(
html
:
string
options
?
:
WaitForOptions
)
:
Promise
<
void
>
;
goto
(
url
:
string
options
?
:
WaitForOptions
&
{
referer
?
:
string
;
referrerPolicy
?
:
string
;
}
)
:
Promise
<
HTTPResponse
|
null
>
;
reload
(
options
?
:
WaitForOptions
)
:
Promise
<
HTTPResponse
|
null
>
;
waitForNavigation
(
options
?
:
WaitForOptions
)
:
Promise
<
HTTPResponse
|
null
>
;
waitForRequest
(
urlOrPredicate
:
string
|
(
(
req
:
HTTPRequest
)
=
>
boolean
|
Promise
<
boolean
>
)
options
?
:
{
timeout
?
:
number
;
}
)
:
Promise
<
HTTPRequest
>
;
waitForResponse
(
urlOrPredicate
:
string
|
(
(
res
:
HTTPResponse
)
=
>
boolean
|
Promise
<
boolean
>
)
options
?
:
{
timeout
?
:
number
;
}
)
:
Promise
<
HTTPResponse
>
;
waitForNetworkIdle
(
options
?
:
{
idleTime
?
:
number
;
timeout
?
:
number
;
}
)
:
Promise
<
void
>
;
waitForFrame
(
urlOrPredicate
:
string
|
(
(
frame
:
Frame
)
=
>
boolean
|
Promise
<
boolean
>
)
options
?
:
{
timeout
?
:
number
;
}
)
:
Promise
<
Frame
>
;
goBack
(
options
?
:
WaitForOptions
)
:
Promise
<
HTTPResponse
|
null
>
;
goForward
(
options
?
:
WaitForOptions
)
:
Promise
<
HTTPResponse
|
null
>
;
bringToFront
(
)
:
Promise
<
void
>
;
emulate
(
device
:
Device
)
:
Promise
<
void
>
;
setJavaScriptEnabled
(
enabled
:
boolean
)
:
Promise
<
void
>
;
setBypassCSP
(
enabled
:
boolean
)
:
Promise
<
void
>
;
emulateMediaType
(
type
?
:
string
)
:
Promise
<
void
>
;
emulateCPUThrottling
(
factor
:
number
|
null
)
:
Promise
<
void
>
;
emulateMediaFeatures
(
features
?
:
MediaFeature
[
]
)
:
Promise
<
void
>
;
emulateTimezone
(
timezoneId
?
:
string
)
:
Promise
<
void
>
;
emulateIdleState
(
overrides
?
:
{
isUserActive
:
boolean
;
isScreenUnlocked
:
boolean
;
}
)
:
Promise
<
void
>
;
emulateVisionDeficiency
(
type
?
:
Protocol
.
Emulation
.
SetEmulatedVisionDeficiencyRequest
[
'
type
'
]
)
:
Promise
<
void
>
;
setViewport
(
viewport
:
Viewport
)
:
Promise
<
void
>
;
viewport
(
)
:
Viewport
|
null
;
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
evaluateOnNewDocument
<
Params
extends
unknown
[
]
Func
extends
(
.
.
.
args
:
Params
)
=
>
unknown
=
(
.
.
.
args
:
Params
)
=
>
unknown
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
void
>
;
setCacheEnabled
(
enabled
?
:
boolean
)
:
Promise
<
void
>
;
screenshot
(
options
:
ScreenshotOptions
&
{
encoding
:
'
base64
'
;
}
)
:
Promise
<
string
>
;
screenshot
(
options
?
:
ScreenshotOptions
&
{
encoding
?
:
'
binary
'
;
}
)
:
Promise
<
Buffer
>
;
screenshot
(
options
?
:
ScreenshotOptions
)
:
Promise
<
Buffer
|
string
>
;
createPDFStream
(
options
?
:
PDFOptions
)
:
Promise
<
Readable
>
;
pdf
(
options
?
:
PDFOptions
)
:
Promise
<
Buffer
>
;
title
(
)
:
Promise
<
string
>
;
close
(
options
?
:
{
runBeforeUnload
?
:
boolean
;
}
)
:
Promise
<
void
>
;
isClosed
(
)
:
boolean
;
get
mouse
(
)
:
Mouse
;
click
(
selector
:
string
options
?
:
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
)
:
Promise
<
void
>
;
focus
(
selector
:
string
)
:
Promise
<
void
>
;
hover
(
selector
:
string
)
:
Promise
<
void
>
;
select
(
selector
:
string
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
;
tap
(
selector
:
string
)
:
Promise
<
void
>
;
type
(
selector
:
string
text
:
string
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
waitForTimeout
(
milliseconds
:
number
)
:
Promise
<
void
>
;
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
?
:
WaitForSelectorOptions
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
waitForXPath
(
xpath
:
string
options
?
:
{
visible
?
:
boolean
;
hidden
?
:
boolean
;
timeout
?
:
number
;
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
;
waitForFunction
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
options
?
:
FrameWaitForFunctionOptions
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
}
export
declare
const
enum
PageEmittedEvents
{
Close
=
"
close
"
Console
=
"
console
"
Dialog
=
"
dialog
"
DOMContentLoaded
=
"
domcontentloaded
"
Error
=
"
error
"
FrameAttached
=
"
frameattached
"
FrameDetached
=
"
framedetached
"
FrameNavigated
=
"
framenavigated
"
Load
=
"
load
"
Metrics
=
"
metrics
"
PageError
=
"
pageerror
"
Popup
=
"
popup
"
Request
=
"
request
"
RequestServedFromCache
=
"
requestservedfromcache
"
RequestFailed
=
"
requestfailed
"
RequestFinished
=
"
requestfinished
"
Response
=
"
response
"
WorkerCreated
=
"
workercreated
"
WorkerDestroyed
=
"
workerdestroyed
"
}
export
declare
interface
PageEventObject
{
close
:
never
;
console
:
ConsoleMessage
;
dialog
:
Dialog
;
domcontentloaded
:
never
;
error
:
Error
;
frameattached
:
Frame
;
framedetached
:
Frame
;
framenavigated
:
Frame
;
load
:
never
;
metrics
:
{
title
:
string
;
metrics
:
Metrics
;
}
;
pageerror
:
Error
;
popup
:
Page
;
request
:
HTTPRequest
;
response
:
HTTPResponse
;
requestfailed
:
HTTPRequest
;
requestfinished
:
HTTPRequest
;
requestservedfromcache
:
HTTPRequest
;
workercreated
:
WebWorker
;
workerdestroyed
:
WebWorker
;
}
export
declare
type
PaperFormat
=
Uppercase
<
LowerCasePaperFormat
>
|
Capitalize
<
LowerCasePaperFormat
>
|
LowerCasePaperFormat
;
export
declare
interface
PDFMargin
{
top
?
:
string
|
number
;
bottom
?
:
string
|
number
;
left
?
:
string
|
number
;
right
?
:
string
|
number
;
}
export
declare
interface
PDFOptions
{
scale
?
:
number
;
displayHeaderFooter
?
:
boolean
;
headerTemplate
?
:
string
;
footerTemplate
?
:
string
;
printBackground
?
:
boolean
;
landscape
?
:
boolean
;
pageRanges
?
:
string
;
format
?
:
PaperFormat
;
width
?
:
string
|
number
;
height
?
:
string
|
number
;
preferCSSPageSize
?
:
boolean
;
margin
?
:
PDFMargin
;
path
?
:
string
;
omitBackground
?
:
boolean
;
timeout
?
:
number
;
}
export
declare
type
Permission
=
'
geolocation
'
|
'
midi
'
|
'
notifications
'
|
'
camera
'
|
'
microphone
'
|
'
background
-
sync
'
|
'
ambient
-
light
-
sensor
'
|
'
accelerometer
'
|
'
gyroscope
'
|
'
magnetometer
'
|
'
accessibility
-
events
'
|
'
clipboard
-
read
'
|
'
clipboard
-
write
'
|
'
payment
-
handler
'
|
'
persistent
-
storage
'
|
'
idle
-
detection
'
|
'
midi
-
sysex
'
;
export
declare
type
Platform
=
'
linux
'
|
'
mac
'
|
'
mac_arm
'
|
'
win32
'
|
'
win64
'
;
export
declare
interface
Point
{
x
:
number
;
y
:
number
;
}
export
declare
const
PredefinedNetworkConditions
:
Readonly
<
{
'
Slow
3G
'
:
NetworkConditions
;
'
Fast
3G
'
:
NetworkConditions
;
}
>
;
export
declare
interface
PressOptions
{
delay
?
:
number
;
text
?
:
string
;
}
export
declare
type
Product
=
'
chrome
'
|
'
firefox
'
;
export
declare
class
ProductLauncher
{
#
private
;
get
product
(
)
:
Product
;
launch
(
object
:
PuppeteerNodeLaunchOptions
)
:
Promise
<
Browser
>
;
executablePath
(
channel
?
:
ChromeReleaseChannel
)
:
string
;
defaultArgs
(
object
:
BrowserLaunchArgumentOptions
)
:
string
[
]
;
}
export
{
Protocol
}
export
declare
class
ProtocolError
extends
CustomError
{
#
private
;
set
code
(
code
:
number
|
undefined
)
;
get
code
(
)
:
number
|
undefined
;
set
originalMessage
(
originalMessage
:
string
)
;
get
originalMessage
(
)
:
string
;
}
export
declare
type
ProtocolLifeCycleEvent
=
'
load
'
|
'
DOMContentLoaded
'
|
'
networkIdle
'
|
'
networkAlmostIdle
'
;
export
{
ProtocolMapping
}
export
declare
class
Puppeteer
{
static
registerCustomQueryHandler
(
name
:
string
queryHandler
:
CustomQueryHandler
)
:
void
;
static
unregisterCustomQueryHandler
(
name
:
string
)
:
void
;
static
customQueryHandlerNames
(
)
:
string
[
]
;
static
clearCustomQueryHandlers
(
)
:
void
;
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
;
}
declare
const
puppeteer
:
PuppeteerNode
;
export
default
puppeteer
;
export
declare
interface
PuppeteerErrors
{
TimeoutError
:
typeof
TimeoutError
;
ProtocolError
:
typeof
ProtocolError
;
}
export
declare
interface
PuppeteerLaunchOptions
extends
LaunchOptions
BrowserLaunchArgumentOptions
BrowserConnectOptions
{
product
?
:
Product
;
extraPrefsFirefox
?
:
Record
<
string
unknown
>
;
}
export
declare
type
PuppeteerLifeCycleEvent
=
'
load
'
|
'
domcontentloaded
'
|
'
networkidle0
'
|
'
networkidle2
'
;
export
declare
class
PuppeteerNode
extends
Puppeteer
{
#
private
;
connect
(
options
:
ConnectOptions
)
:
Promise
<
Browser
>
;
launch
(
options
?
:
PuppeteerLaunchOptions
)
:
Promise
<
Browser
>
;
executablePath
(
channel
?
:
ChromeReleaseChannel
)
:
string
;
get
lastLaunchedProduct
(
)
:
Product
;
get
defaultProduct
(
)
:
Product
;
get
product
(
)
:
string
;
defaultArgs
(
options
?
:
BrowserLaunchArgumentOptions
)
:
string
[
]
;
createBrowserFetcher
(
options
?
:
Partial
<
BrowserFetcherOptions
>
)
:
BrowserFetcher
;
}
export
declare
type
PuppeteerNodeLaunchOptions
=
BrowserLaunchArgumentOptions
&
LaunchOptions
&
BrowserConnectOptions
;
export
declare
function
registerCustomQueryHandler
(
name
:
string
handler
:
CustomQueryHandler
)
:
void
;
export
declare
interface
RemoteAddress
{
ip
?
:
string
;
port
?
:
number
;
}
export
declare
type
ResourceType
=
Lowercase
<
Protocol
.
Network
.
ResourceType
>
;
export
declare
interface
ResponseForRequest
{
status
:
number
;
headers
:
Record
<
string
unknown
>
;
contentType
:
string
;
body
:
string
|
Buffer
;
}
export
declare
interface
ScreenshotClip
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
scale
?
:
number
;
}
export
declare
interface
ScreenshotOptions
{
type
?
:
'
png
'
|
'
jpeg
'
|
'
webp
'
;
path
?
:
string
;
fullPage
?
:
boolean
;
clip
?
:
ScreenshotClip
;
quality
?
:
number
;
omitBackground
?
:
boolean
;
encoding
?
:
'
base64
'
|
'
binary
'
;
captureBeyondViewport
?
:
boolean
;
fromSurface
?
:
boolean
;
}
export
declare
class
SecurityDetails
{
#
private
;
issuer
(
)
:
string
;
validFrom
(
)
:
number
;
validTo
(
)
:
number
;
protocol
(
)
:
string
;
subjectName
(
)
:
string
;
subjectAlternativeNames
(
)
:
string
[
]
;
}
export
declare
interface
SerializedAXNode
{
role
:
string
;
name
?
:
string
;
value
?
:
string
|
number
;
description
?
:
string
;
keyshortcuts
?
:
string
;
roledescription
?
:
string
;
valuetext
?
:
string
;
disabled
?
:
boolean
;
expanded
?
:
boolean
;
focused
?
:
boolean
;
modal
?
:
boolean
;
multiline
?
:
boolean
;
multiselectable
?
:
boolean
;
readonly
?
:
boolean
;
required
?
:
boolean
;
selected
?
:
boolean
;
checked
?
:
boolean
|
'
mixed
'
;
pressed
?
:
boolean
|
'
mixed
'
;
level
?
:
number
;
valuemin
?
:
number
;
valuemax
?
:
number
;
autocomplete
?
:
string
;
haspopup
?
:
string
;
invalid
?
:
string
;
orientation
?
:
string
;
children
?
:
SerializedAXNode
[
]
;
}
export
declare
interface
SnapshotOptions
{
interestingOnly
?
:
boolean
;
root
?
:
ElementHandle
<
Node
>
;
}
declare
type
Split
<
Input
extends
string
Delimiter
extends
string
Acc
extends
string
[
]
=
[
]
>
=
Input
extends
{
infer
Prefix
}
{
Delimiter
}
{
infer
Suffix
}
?
Split
<
Suffix
Delimiter
[
.
.
.
Acc
Prefix
]
>
:
[
.
.
.
Acc
Input
]
;
declare
type
SplitWithDelemiters
<
Input
extends
string
Delemiters
extends
readonly
string
[
]
>
=
Delemiters
extends
[
infer
FirstDelemiter
.
.
.
infer
RestDelemiters
]
?
FirstDelemiter
extends
string
?
RestDelemiters
extends
readonly
string
[
]
?
FlatmapSplitWithDelemiters
<
Split
<
Input
FirstDelemiter
>
RestDelemiters
>
:
never
:
never
:
[
Input
]
;
/
*
Excluded
from
this
release
type
:
supportedMetrics
*
/
/
*
*
*
Target
represents
a
*
{
link
https
:
/
/
chromedevtools
.
github
.
io
/
devtools
-
protocol
/
tot
/
Target
/
|
CDP
target
}
.
*
In
CDP
a
target
is
something
that
can
be
debugged
such
a
frame
a
page
or
a
*
worker
.
*
*
public
*
/
export
declare
class
Target
{
#
private
;
/
*
Excluded
from
this
release
type
:
_initializedPromise
*
/
/
*
Excluded
from
this
release
type
:
_initializedCallback
*
/
/
*
Excluded
from
this
release
type
:
_isClosedPromise
*
/
/
*
Excluded
from
this
release
type
:
_closedCallback
*
/
/
*
Excluded
from
this
release
type
:
_isInitialized
*
/
/
*
Excluded
from
this
release
type
:
_targetId
*
/
/
*
Excluded
from
this
release
type
:
_isPageTargetCallback
*
/
/
*
Excluded
from
this
release
type
:
__constructor
*
/
/
*
Excluded
from
this
release
type
:
_session
*
/
/
*
*
*
Creates
a
Chrome
Devtools
Protocol
session
attached
to
the
target
.
*
/
createCDPSession
(
)
:
Promise
<
CDPSession
>
;
/
*
Excluded
from
this
release
type
:
_targetManager
*
/
/
*
Excluded
from
this
release
type
:
_getTargetInfo
*
/
/
*
*
*
If
the
target
is
not
of
type
"
page
"
or
"
background_page
"
returns
null
.
*
/
page
(
)
:
Promise
<
Page
|
null
>
;
/
*
*
*
If
the
target
is
not
of
type
"
service_worker
"
or
"
shared_worker
"
returns
null
.
*
/
worker
(
)
:
Promise
<
WebWorker
|
null
>
;
url
(
)
:
string
;
/
*
*
*
Identifies
what
kind
of
target
this
is
.
*
*
remarks
*
*
See
{
link
https
:
/
/
developer
.
chrome
.
com
/
extensions
/
background_pages
|
docs
}
for
more
info
about
background
pages
.
*
/
type
(
)
:
'
page
'
|
'
background_page
'
|
'
service_worker
'
|
'
shared_worker
'
|
'
other
'
|
'
browser
'
|
'
webview
'
;
/
*
*
*
Get
the
browser
the
target
belongs
to
.
*
/
browser
(
)
:
Browser
;
/
*
*
*
Get
the
browser
context
the
target
belongs
to
.
*
/
browserContext
(
)
:
BrowserContext
;
/
*
*
*
Get
the
target
that
opened
this
target
.
Top
-
level
targets
return
null
.
*
/
opener
(
)
:
Target
|
undefined
;
/
*
Excluded
from
this
release
type
:
_targetInfoChanged
*
/
}
/
*
Excluded
from
this
release
type
:
TargetFactory
*
/
/
*
*
*
public
*
/
export
declare
type
TargetFilterCallback
=
(
target
:
Protocol
.
Target
.
TargetInfo
)
=
>
boolean
;
/
*
Excluded
from
this
release
type
:
TargetInterceptor
*
/
/
*
Excluded
from
this
release
type
:
TargetManager
*
/
/
*
Excluded
from
this
release
type
:
TargetManagerEmittedEvents
*
/
/
*
Excluded
from
this
release
type
:
TaskManager
*
/
/
*
Excluded
from
this
release
type
:
TaskQueue
*
/
/
*
Excluded
from
this
release
type
:
TextContent
*
/
/
*
*
*
TimeoutError
is
emitted
whenever
certain
operations
are
terminated
due
to
*
timeout
.
*
*
remarks
*
Example
operations
are
{
link
Page
.
waitForSelector
|
page
.
waitForSelector
}
or
*
{
link
PuppeteerNode
.
launch
|
puppeteer
.
launch
}
.
*
*
public
*
/
export
declare
class
TimeoutError
extends
CustomError
{
}
/
*
Excluded
from
this
release
type
:
TimeoutSettings
*
/
/
*
*
*
The
Touchscreen
class
exposes
touchscreen
events
.
*
public
*
/
export
declare
class
Touchscreen
{
#
private
;
/
*
Excluded
from
this
release
type
:
__constructor
*
/
/
*
*
*
Dispatches
a
touchstart
and
touchend
event
.
*
param
x
-
Horizontal
position
of
the
tap
.
*
param
y
-
Vertical
position
of
the
tap
.
*
/
tap
(
x
:
number
y
:
number
)
:
Promise
<
void
>
;
}
/
*
*
*
The
Tracing
class
exposes
the
tracing
audit
interface
.
*
remarks
*
You
can
use
tracing
.
start
and
tracing
.
stop
to
create
a
trace
file
*
which
can
be
opened
in
Chrome
DevTools
or
{
link
https
:
/
/
chromedevtools
.
github
.
io
/
timeline
-
viewer
/
|
timeline
viewer
}
.
*
*
example
*
*
ts
*
await
page
.
tracing
.
start
(
{
path
:
'
trace
.
json
'
}
)
;
*
await
page
.
goto
(
'
https
:
/
/
www
.
google
.
com
'
)
;
*
await
page
.
tracing
.
stop
(
)
;
*
*
*
public
*
/
export
declare
class
Tracing
{
#
private
;
/
*
Excluded
from
this
release
type
:
__constructor
*
/
/
*
*
*
Starts
a
trace
for
the
current
page
.
*
remarks
*
Only
one
trace
can
be
active
at
a
time
per
browser
.
*
*
param
options
-
Optional
TracingOptions
.
*
/
start
(
options
?
:
TracingOptions
)
:
Promise
<
void
>
;
/
*
*
*
Stops
a
trace
started
with
the
start
method
.
*
returns
Promise
which
resolves
to
buffer
with
trace
data
.
*
/
stop
(
)
:
Promise
<
Buffer
|
undefined
>
;
}
/
*
*
*
public
*
/
export
declare
interface
TracingOptions
{
path
?
:
string
;
screenshots
?
:
boolean
;
categories
?
:
string
[
]
;
}
declare
type
TypeSelectorOfComplexSelector
<
ComplexSelector
extends
string
>
=
CompoundSelectorsOfComplexSelector
<
ComplexSelector
>
extends
infer
CompoundSelectors
?
CompoundSelectors
extends
NonEmptyReadonlyArray
<
string
>
?
Last
<
CompoundSelectors
>
extends
infer
LastCompoundSelector
?
LastCompoundSelector
extends
string
?
TypeSelectorOfCompoundSelector
<
LastCompoundSelector
>
:
never
:
never
:
unknown
:
never
;
declare
type
TypeSelectorOfCompoundSelector
<
CompoundSelector
extends
string
>
=
SplitWithDelemiters
<
CompoundSelector
BeginSubclassSelectorTokens
>
extends
infer
CompoundSelectorTokens
?
CompoundSelectorTokens
extends
[
infer
TypeSelector
.
.
.
any
[
]
]
?
TypeSelector
extends
'
'
?
unknown
:
TypeSelector
:
never
:
never
;
/
*
Excluded
from
this
release
type
:
unitToPixels
*
/
/
*
*
*
deprecated
Import
{
link
Puppeteer
}
and
use
the
static
method
*
{
link
Puppeteer
.
unregisterCustomQueryHandler
}
*
*
public
*
/
export
declare
function
unregisterCustomQueryHandler
(
name
:
string
)
:
void
;
/
*
Excluded
from
this
release
type
:
valueFromRemoteObject
*
/
/
*
*
*
Copyright
2020
Google
Inc
.
All
rights
reserved
.
*
*
Licensed
under
the
Apache
License
Version
2
.
0
(
the
"
License
"
)
;
*
you
may
not
use
this
file
except
in
compliance
with
the
License
.
*
You
may
obtain
a
copy
of
the
License
at
*
*
http
:
/
/
www
.
apache
.
org
/
licenses
/
LICENSE
-
2
.
0
*
*
Unless
required
by
applicable
law
or
agreed
to
in
writing
software
*
distributed
under
the
License
is
distributed
on
an
"
AS
IS
"
BASIS
*
WITHOUT
WARRANTIES
OR
CONDITIONS
OF
ANY
KIND
either
express
or
implied
.
*
See
the
License
for
the
specific
language
governing
permissions
and
*
limitations
under
the
License
.
*
/
/
*
*
*
*
Sets
the
viewport
of
the
page
.
*
public
*
/
export
declare
interface
Viewport
{
/
*
*
*
The
page
width
in
pixels
.
*
/
width
:
number
;
/
*
*
*
The
page
height
in
pixels
.
*
/
height
:
number
;
/
*
*
*
Specify
device
scale
factor
.
*
See
{
link
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Web
/
API
/
Window
/
devicePixelRatio
|
devicePixelRatio
}
for
more
info
.
*
defaultValue
1
*
/
deviceScaleFactor
?
:
number
;
/
*
*
*
Whether
the
meta
viewport
tag
is
taken
into
account
.
*
defaultValue
false
*
/
isMobile
?
:
boolean
;
/
*
*
*
Specifies
if
the
viewport
is
in
landscape
mode
.
*
defaultValue
false
*
/
isLandscape
?
:
boolean
;
/
*
*
*
Specify
if
the
viewport
supports
touch
events
.
*
defaultValue
false
*
/
hasTouch
?
:
boolean
;
}
/
*
Excluded
from
this
release
type
:
waitForEvent
*
/
/
*
*
*
public
*
/
export
declare
interface
WaitForOptions
{
/
*
*
*
Maximum
wait
time
in
milliseconds
.
Pass
0
to
disable
the
timeout
.
*
*
The
default
value
can
be
changed
by
using
the
*
{
link
Page
.
setDefaultTimeout
}
or
{
link
Page
.
setDefaultNavigationTimeout
}
*
methods
.
*
*
defaultValue
30000
*
/
timeout
?
:
number
;
waitUntil
?
:
PuppeteerLifeCycleEvent
|
PuppeteerLifeCycleEvent
[
]
;
}
/
*
*
*
public
*
/
export
declare
interface
WaitForSelectorOptions
{
/
*
*
*
Wait
for
the
selected
element
to
be
present
in
DOM
and
to
be
visible
i
.
e
.
*
to
not
have
display
:
none
or
visibility
:
hidden
CSS
properties
.
*
*
defaultValue
false
*
/
visible
?
:
boolean
;
/
*
*
*
Wait
for
the
selected
element
to
not
be
found
in
the
DOM
or
to
be
hidden
*
i
.
e
.
have
display
:
none
or
visibility
:
hidden
CSS
properties
.
*
*
defaultValue
false
*
/
hidden
?
:
boolean
;
/
*
*
*
Maximum
time
to
wait
in
milliseconds
.
Pass
0
to
disable
timeout
.
*
*
The
default
value
can
be
changed
by
using
{
link
Page
.
setDefaultTimeout
}
*
*
defaultValue
30000
(
30
seconds
)
*
/
timeout
?
:
number
;
}
/
*
*
*
public
*
/
export
declare
interface
WaitForTargetOptions
{
/
*
*
*
Maximum
wait
time
in
milliseconds
.
Pass
0
to
disable
the
timeout
.
*
defaultValue
30
seconds
.
*
/
timeout
?
:
number
;
}
/
*
Excluded
from
this
release
type
:
WaitTask
*
/
/
*
Excluded
from
this
release
type
:
WaitTaskOptions
*
/
/
*
*
*
public
*
/
export
declare
interface
WaitTimeoutOptions
{
/
*
*
*
Maximum
wait
time
in
milliseconds
.
Pass
0
to
disable
the
timeout
.
*
*
The
default
value
can
be
changed
by
using
the
*
{
link
Page
.
setDefaultTimeout
}
method
.
*
*
defaultValue
30000
*
/
timeout
?
:
number
;
}
/
*
Excluded
from
this
release
type
:
waitWithTimeout
*
/
/
*
Excluded
from
this
release
type
:
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
*
/
/
*
*
*
This
class
represents
a
*
{
link
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
docs
/
Web
/
API
/
Web_Workers_API
|
WebWorker
}
.
*
*
remarks
*
The
events
workercreated
and
workerdestroyed
are
emitted
on
the
page
*
object
to
signal
the
worker
lifecycle
.
*
*
example
*
*
ts
*
page
.
on
(
'
workercreated
'
worker
=
>
*
console
.
log
(
'
Worker
created
:
'
+
worker
.
url
(
)
)
*
)
;
*
page
.
on
(
'
workerdestroyed
'
worker
=
>
*
console
.
log
(
'
Worker
destroyed
:
'
+
worker
.
url
(
)
)
*
)
;
*
*
console
.
log
(
'
Current
workers
:
'
)
;
*
for
(
const
worker
of
page
.
workers
(
)
)
{
*
console
.
log
(
'
'
+
worker
.
url
(
)
)
;
*
}
*
*
*
public
*
/
export
declare
class
WebWorker
extends
EventEmitter
{
#
private
;
/
*
Excluded
from
this
release
type
:
__constructor
*
/
/
*
Excluded
from
this
release
type
:
executionContext
*
/
/
*
*
*
returns
The
URL
of
this
web
worker
.
*
/
url
(
)
:
string
;
/
*
*
*
If
the
function
passed
to
the
worker
.
evaluate
returns
a
Promise
then
*
worker
.
evaluate
would
wait
for
the
promise
to
resolve
and
return
its
*
value
.
If
the
function
passed
to
the
worker
.
evaluate
returns
a
*
non
-
serializable
value
then
worker
.
evaluate
resolves
to
undefined
.
*
DevTools
Protocol
also
supports
transferring
some
additional
values
that
*
are
not
serializable
by
JSON
:
-
0
NaN
Infinity
-
Infinity
and
*
bigint
literals
.
*
Shortcut
for
await
worker
.
executionContext
(
)
)
.
evaluate
(
pageFunction
.
.
.
args
)
.
*
*
param
pageFunction
-
Function
to
be
evaluated
in
the
worker
context
.
*
param
args
-
Arguments
to
pass
to
pageFunction
.
*
returns
Promise
which
resolves
to
the
return
value
of
pageFunction
.
*
/
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
/
*
*
*
The
only
difference
between
worker
.
evaluate
and
worker
.
evaluateHandle
*
is
that
worker
.
evaluateHandle
returns
in
-
page
object
(
JSHandle
)
.
If
the
*
function
passed
to
the
worker
.
evaluateHandle
returns
a
Promise
then
*
worker
.
evaluateHandle
would
wait
for
the
promise
to
resolve
and
return
*
its
value
.
Shortcut
for
*
await
worker
.
executionContext
(
)
)
.
evaluateHandle
(
pageFunction
.
.
.
args
)
*
*
param
pageFunction
-
Function
to
be
evaluated
in
the
page
context
.
*
param
args
-
Arguments
to
pass
to
pageFunction
.
*
returns
Promise
which
resolves
to
the
return
value
of
pageFunction
.
*
/
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
}
export
{
}
