declare
namespace
Protocol
{
export
type
integer
=
number
export
namespace
Console
{
export
const
enum
ConsoleMessageSource
{
XML
=
'
xml
'
Javascript
=
'
javascript
'
Network
=
'
network
'
ConsoleAPI
=
'
console
-
api
'
Storage
=
'
storage
'
Appcache
=
'
appcache
'
Rendering
=
'
rendering
'
Security
=
'
security
'
Other
=
'
other
'
Deprecation
=
'
deprecation
'
Worker
=
'
worker
'
}
export
const
enum
ConsoleMessageLevel
{
Log
=
'
log
'
Warning
=
'
warning
'
Error
=
'
error
'
Debug
=
'
debug
'
Info
=
'
info
'
}
export
interface
ConsoleMessage
{
source
:
(
'
xml
'
|
'
javascript
'
|
'
network
'
|
'
console
-
api
'
|
'
storage
'
|
'
appcache
'
|
'
rendering
'
|
'
security
'
|
'
other
'
|
'
deprecation
'
|
'
worker
'
)
;
level
:
(
'
log
'
|
'
warning
'
|
'
error
'
|
'
debug
'
|
'
info
'
)
;
text
:
string
;
url
?
:
string
;
line
?
:
integer
;
column
?
:
integer
;
}
export
interface
MessageAddedEvent
{
message
:
ConsoleMessage
;
}
}
export
namespace
Debugger
{
export
type
BreakpointId
=
string
;
export
type
CallFrameId
=
string
;
export
interface
Location
{
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
integer
;
columnNumber
?
:
integer
;
}
export
interface
ScriptPosition
{
lineNumber
:
integer
;
columnNumber
:
integer
;
}
export
interface
LocationRange
{
scriptId
:
Runtime
.
ScriptId
;
start
:
ScriptPosition
;
end
:
ScriptPosition
;
}
export
interface
CallFrame
{
callFrameId
:
CallFrameId
;
functionName
:
string
;
functionLocation
?
:
Location
;
location
:
Location
;
url
:
string
;
scopeChain
:
Scope
[
]
;
this
:
Runtime
.
RemoteObject
;
returnValue
?
:
Runtime
.
RemoteObject
;
canBeRestarted
?
:
boolean
;
}
export
const
enum
ScopeType
{
Global
=
'
global
'
Local
=
'
local
'
With
=
'
with
'
Closure
=
'
closure
'
Catch
=
'
catch
'
Block
=
'
block
'
Script
=
'
script
'
Eval
=
'
eval
'
Module
=
'
module
'
WasmExpressionStack
=
'
wasm
-
expression
-
stack
'
}
export
interface
Scope
{
type
:
(
'
global
'
|
'
local
'
|
'
with
'
|
'
closure
'
|
'
catch
'
|
'
block
'
|
'
script
'
|
'
eval
'
|
'
module
'
|
'
wasm
-
expression
-
stack
'
)
;
object
:
Runtime
.
RemoteObject
;
name
?
:
string
;
startLocation
?
:
Location
;
endLocation
?
:
Location
;
}
export
interface
SearchMatch
{
lineNumber
:
number
;
lineContent
:
string
;
}
export
const
enum
BreakLocationType
{
DebuggerStatement
=
'
debuggerStatement
'
Call
=
'
call
'
Return
=
'
return
'
}
export
interface
BreakLocation
{
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
integer
;
columnNumber
?
:
integer
;
type
?
:
(
'
debuggerStatement
'
|
'
call
'
|
'
return
'
)
;
}
export
interface
WasmDisassemblyChunk
{
lines
:
string
[
]
;
bytecodeOffsets
:
integer
[
]
;
}
export
type
ScriptLanguage
=
(
'
JavaScript
'
|
'
WebAssembly
'
)
;
export
const
enum
DebugSymbolsType
{
None
=
'
None
'
SourceMap
=
'
SourceMap
'
EmbeddedDWARF
=
'
EmbeddedDWARF
'
ExternalDWARF
=
'
ExternalDWARF
'
}
export
interface
DebugSymbols
{
type
:
(
'
None
'
|
'
SourceMap
'
|
'
EmbeddedDWARF
'
|
'
ExternalDWARF
'
)
;
externalURL
?
:
string
;
}
export
const
enum
ContinueToLocationRequestTargetCallFrames
{
Any
=
'
any
'
Current
=
'
current
'
}
export
interface
ContinueToLocationRequest
{
location
:
Location
;
targetCallFrames
?
:
(
'
any
'
|
'
current
'
)
;
}
export
interface
EnableRequest
{
maxScriptsCacheSize
?
:
number
;
}
export
interface
EnableResponse
{
debuggerId
:
Runtime
.
UniqueDebuggerId
;
}
export
interface
EvaluateOnCallFrameRequest
{
callFrameId
:
CallFrameId
;
expression
:
string
;
objectGroup
?
:
string
;
includeCommandLineAPI
?
:
boolean
;
silent
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
throwOnSideEffect
?
:
boolean
;
timeout
?
:
Runtime
.
TimeDelta
;
}
export
interface
EvaluateOnCallFrameResponse
{
result
:
Runtime
.
RemoteObject
;
exceptionDetails
?
:
Runtime
.
ExceptionDetails
;
}
export
interface
GetPossibleBreakpointsRequest
{
start
:
Location
;
end
?
:
Location
;
restrictToFunction
?
:
boolean
;
}
export
interface
GetPossibleBreakpointsResponse
{
locations
:
BreakLocation
[
]
;
}
export
interface
GetScriptSourceRequest
{
scriptId
:
Runtime
.
ScriptId
;
}
export
interface
GetScriptSourceResponse
{
scriptSource
:
string
;
bytecode
?
:
string
;
}
export
interface
DisassembleWasmModuleRequest
{
scriptId
:
Runtime
.
ScriptId
;
}
export
interface
DisassembleWasmModuleResponse
{
streamId
?
:
string
;
totalNumberOfLines
:
integer
;
functionBodyOffsets
:
integer
[
]
;
chunk
:
WasmDisassemblyChunk
;
}
export
interface
NextWasmDisassemblyChunkRequest
{
streamId
:
string
;
}
export
interface
NextWasmDisassemblyChunkResponse
{
chunk
:
WasmDisassemblyChunk
;
}
export
interface
GetWasmBytecodeRequest
{
scriptId
:
Runtime
.
ScriptId
;
}
export
interface
GetWasmBytecodeResponse
{
bytecode
:
string
;
}
export
interface
GetStackTraceRequest
{
stackTraceId
:
Runtime
.
StackTraceId
;
}
export
interface
GetStackTraceResponse
{
stackTrace
:
Runtime
.
StackTrace
;
}
export
interface
PauseOnAsyncCallRequest
{
parentStackTraceId
:
Runtime
.
StackTraceId
;
}
export
interface
RemoveBreakpointRequest
{
breakpointId
:
BreakpointId
;
}
export
const
enum
RestartFrameRequestMode
{
StepInto
=
'
StepInto
'
}
export
interface
RestartFrameRequest
{
callFrameId
:
CallFrameId
;
mode
?
:
(
'
StepInto
'
)
;
}
export
interface
RestartFrameResponse
{
callFrames
:
CallFrame
[
]
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
}
export
interface
ResumeRequest
{
terminateOnResume
?
:
boolean
;
}
export
interface
SearchInContentRequest
{
scriptId
:
Runtime
.
ScriptId
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
interface
SearchInContentResponse
{
result
:
SearchMatch
[
]
;
}
export
interface
SetAsyncCallStackDepthRequest
{
maxDepth
:
integer
;
}
export
interface
SetBlackboxPatternsRequest
{
patterns
:
string
[
]
;
}
export
interface
SetBlackboxedRangesRequest
{
scriptId
:
Runtime
.
ScriptId
;
positions
:
ScriptPosition
[
]
;
}
export
interface
SetBreakpointRequest
{
location
:
Location
;
condition
?
:
string
;
}
export
interface
SetBreakpointResponse
{
breakpointId
:
BreakpointId
;
actualLocation
:
Location
;
}
export
const
enum
SetInstrumentationBreakpointRequestInstrumentation
{
BeforeScriptExecution
=
'
beforeScriptExecution
'
BeforeScriptWithSourceMapExecution
=
'
beforeScriptWithSourceMapExecution
'
}
export
interface
SetInstrumentationBreakpointRequest
{
instrumentation
:
(
'
beforeScriptExecution
'
|
'
beforeScriptWithSourceMapExecution
'
)
;
}
export
interface
SetInstrumentationBreakpointResponse
{
breakpointId
:
BreakpointId
;
}
export
interface
SetBreakpointByUrlRequest
{
lineNumber
:
integer
;
url
?
:
string
;
urlRegex
?
:
string
;
scriptHash
?
:
string
;
columnNumber
?
:
integer
;
condition
?
:
string
;
}
export
interface
SetBreakpointByUrlResponse
{
breakpointId
:
BreakpointId
;
locations
:
Location
[
]
;
}
export
interface
SetBreakpointOnFunctionCallRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
condition
?
:
string
;
}
export
interface
SetBreakpointOnFunctionCallResponse
{
breakpointId
:
BreakpointId
;
}
export
interface
SetBreakpointsActiveRequest
{
active
:
boolean
;
}
export
const
enum
SetPauseOnExceptionsRequestState
{
None
=
'
none
'
Caught
=
'
caught
'
Uncaught
=
'
uncaught
'
All
=
'
all
'
}
export
interface
SetPauseOnExceptionsRequest
{
state
:
(
'
none
'
|
'
caught
'
|
'
uncaught
'
|
'
all
'
)
;
}
export
interface
SetReturnValueRequest
{
newValue
:
Runtime
.
CallArgument
;
}
export
const
enum
SetScriptSourceResponseStatus
{
Ok
=
'
Ok
'
CompileError
=
'
CompileError
'
BlockedByActiveGenerator
=
'
BlockedByActiveGenerator
'
BlockedByActiveFunction
=
'
BlockedByActiveFunction
'
}
export
interface
SetScriptSourceRequest
{
scriptId
:
Runtime
.
ScriptId
;
scriptSource
:
string
;
dryRun
?
:
boolean
;
allowTopFrameEditing
?
:
boolean
;
}
export
interface
SetScriptSourceResponse
{
callFrames
?
:
CallFrame
[
]
;
stackChanged
?
:
boolean
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
status
:
(
'
Ok
'
|
'
CompileError
'
|
'
BlockedByActiveGenerator
'
|
'
BlockedByActiveFunction
'
)
;
exceptionDetails
?
:
Runtime
.
ExceptionDetails
;
}
export
interface
SetSkipAllPausesRequest
{
skip
:
boolean
;
}
export
interface
SetVariableValueRequest
{
scopeNumber
:
integer
;
variableName
:
string
;
newValue
:
Runtime
.
CallArgument
;
callFrameId
:
CallFrameId
;
}
export
interface
StepIntoRequest
{
breakOnAsyncCall
?
:
boolean
;
skipList
?
:
LocationRange
[
]
;
}
export
interface
StepOverRequest
{
skipList
?
:
LocationRange
[
]
;
}
export
interface
BreakpointResolvedEvent
{
breakpointId
:
BreakpointId
;
location
:
Location
;
}
export
const
enum
PausedEventReason
{
Ambiguous
=
'
ambiguous
'
Assert
=
'
assert
'
CSPViolation
=
'
CSPViolation
'
DebugCommand
=
'
debugCommand
'
DOM
=
'
DOM
'
EventListener
=
'
EventListener
'
Exception
=
'
exception
'
Instrumentation
=
'
instrumentation
'
OOM
=
'
OOM
'
Other
=
'
other
'
PromiseRejection
=
'
promiseRejection
'
XHR
=
'
XHR
'
}
export
interface
PausedEvent
{
callFrames
:
CallFrame
[
]
;
reason
:
(
'
ambiguous
'
|
'
assert
'
|
'
CSPViolation
'
|
'
debugCommand
'
|
'
DOM
'
|
'
EventListener
'
|
'
exception
'
|
'
instrumentation
'
|
'
OOM
'
|
'
other
'
|
'
promiseRejection
'
|
'
XHR
'
)
;
data
?
:
any
;
hitBreakpoints
?
:
string
[
]
;
asyncStackTrace
?
:
Runtime
.
StackTrace
;
asyncStackTraceId
?
:
Runtime
.
StackTraceId
;
asyncCallStackTraceId
?
:
Runtime
.
StackTraceId
;
}
export
interface
ScriptFailedToParseEvent
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
startLine
:
integer
;
startColumn
:
integer
;
endLine
:
integer
;
endColumn
:
integer
;
executionContextId
:
Runtime
.
ExecutionContextId
;
hash
:
string
;
executionContextAuxData
?
:
any
;
sourceMapURL
?
:
string
;
hasSourceURL
?
:
boolean
;
isModule
?
:
boolean
;
length
?
:
integer
;
stackTrace
?
:
Runtime
.
StackTrace
;
codeOffset
?
:
integer
;
scriptLanguage
?
:
Debugger
.
ScriptLanguage
;
embedderName
?
:
string
;
}
export
interface
ScriptParsedEvent
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
startLine
:
integer
;
startColumn
:
integer
;
endLine
:
integer
;
endColumn
:
integer
;
executionContextId
:
Runtime
.
ExecutionContextId
;
hash
:
string
;
executionContextAuxData
?
:
any
;
isLiveEdit
?
:
boolean
;
sourceMapURL
?
:
string
;
hasSourceURL
?
:
boolean
;
isModule
?
:
boolean
;
length
?
:
integer
;
stackTrace
?
:
Runtime
.
StackTrace
;
codeOffset
?
:
integer
;
scriptLanguage
?
:
Debugger
.
ScriptLanguage
;
debugSymbols
?
:
Debugger
.
DebugSymbols
;
embedderName
?
:
string
;
}
}
export
namespace
HeapProfiler
{
export
type
HeapSnapshotObjectId
=
string
;
export
interface
SamplingHeapProfileNode
{
callFrame
:
Runtime
.
CallFrame
;
selfSize
:
number
;
id
:
integer
;
children
:
SamplingHeapProfileNode
[
]
;
}
export
interface
SamplingHeapProfileSample
{
size
:
number
;
nodeId
:
integer
;
ordinal
:
number
;
}
export
interface
SamplingHeapProfile
{
head
:
SamplingHeapProfileNode
;
samples
:
SamplingHeapProfileSample
[
]
;
}
export
interface
AddInspectedHeapObjectRequest
{
heapObjectId
:
HeapSnapshotObjectId
;
}
export
interface
GetHeapObjectIdRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetHeapObjectIdResponse
{
heapSnapshotObjectId
:
HeapSnapshotObjectId
;
}
export
interface
GetObjectByHeapObjectIdRequest
{
objectId
:
HeapSnapshotObjectId
;
objectGroup
?
:
string
;
}
export
interface
GetObjectByHeapObjectIdResponse
{
result
:
Runtime
.
RemoteObject
;
}
export
interface
GetSamplingProfileResponse
{
profile
:
SamplingHeapProfile
;
}
export
interface
StartSamplingRequest
{
samplingInterval
?
:
number
;
includeObjectsCollectedByMajorGC
?
:
boolean
;
includeObjectsCollectedByMinorGC
?
:
boolean
;
}
export
interface
StartTrackingHeapObjectsRequest
{
trackAllocations
?
:
boolean
;
}
export
interface
StopSamplingResponse
{
profile
:
SamplingHeapProfile
;
}
export
interface
StopTrackingHeapObjectsRequest
{
reportProgress
?
:
boolean
;
treatGlobalObjectsAsRoots
?
:
boolean
;
captureNumericValue
?
:
boolean
;
exposeInternals
?
:
boolean
;
}
export
interface
TakeHeapSnapshotRequest
{
reportProgress
?
:
boolean
;
treatGlobalObjectsAsRoots
?
:
boolean
;
captureNumericValue
?
:
boolean
;
exposeInternals
?
:
boolean
;
}
export
interface
AddHeapSnapshotChunkEvent
{
chunk
:
string
;
}
export
interface
HeapStatsUpdateEvent
{
statsUpdate
:
integer
[
]
;
}
export
interface
LastSeenObjectIdEvent
{
lastSeenObjectId
:
integer
;
timestamp
:
number
;
}
export
interface
ReportHeapSnapshotProgressEvent
{
done
:
integer
;
total
:
integer
;
finished
?
:
boolean
;
}
}
export
namespace
Profiler
{
export
interface
ProfileNode
{
id
:
integer
;
callFrame
:
Runtime
.
CallFrame
;
hitCount
?
:
integer
;
children
?
:
integer
[
]
;
deoptReason
?
:
string
;
positionTicks
?
:
PositionTickInfo
[
]
;
}
export
interface
Profile
{
nodes
:
ProfileNode
[
]
;
startTime
:
number
;
endTime
:
number
;
samples
?
:
integer
[
]
;
timeDeltas
?
:
integer
[
]
;
}
export
interface
PositionTickInfo
{
line
:
integer
;
ticks
:
integer
;
}
export
interface
CoverageRange
{
startOffset
:
integer
;
endOffset
:
integer
;
count
:
integer
;
}
export
interface
FunctionCoverage
{
functionName
:
string
;
ranges
:
CoverageRange
[
]
;
isBlockCoverage
:
boolean
;
}
export
interface
ScriptCoverage
{
scriptId
:
Runtime
.
ScriptId
;
url
:
string
;
functions
:
FunctionCoverage
[
]
;
}
export
interface
GetBestEffortCoverageResponse
{
result
:
ScriptCoverage
[
]
;
}
export
interface
SetSamplingIntervalRequest
{
interval
:
integer
;
}
export
interface
StartPreciseCoverageRequest
{
callCount
?
:
boolean
;
detailed
?
:
boolean
;
allowTriggeredUpdates
?
:
boolean
;
}
export
interface
StartPreciseCoverageResponse
{
timestamp
:
number
;
}
export
interface
StopResponse
{
profile
:
Profile
;
}
export
interface
TakePreciseCoverageResponse
{
result
:
ScriptCoverage
[
]
;
timestamp
:
number
;
}
export
interface
ConsoleProfileFinishedEvent
{
id
:
string
;
location
:
Debugger
.
Location
;
profile
:
Profile
;
title
?
:
string
;
}
export
interface
ConsoleProfileStartedEvent
{
id
:
string
;
location
:
Debugger
.
Location
;
title
?
:
string
;
}
export
interface
PreciseCoverageDeltaUpdateEvent
{
timestamp
:
number
;
occasion
:
string
;
result
:
ScriptCoverage
[
]
;
}
}
export
namespace
Runtime
{
export
type
ScriptId
=
string
;
export
const
enum
WebDriverValueType
{
Undefined
=
'
undefined
'
Null
=
'
null
'
String
=
'
string
'
Number
=
'
number
'
Boolean
=
'
boolean
'
Bigint
=
'
bigint
'
Regexp
=
'
regexp
'
Date
=
'
date
'
Symbol
=
'
symbol
'
Array
=
'
array
'
Object
=
'
object
'
Function
=
'
function
'
Map
=
'
map
'
Set
=
'
set
'
Weakmap
=
'
weakmap
'
Weakset
=
'
weakset
'
Error
=
'
error
'
Proxy
=
'
proxy
'
Promise
=
'
promise
'
Typedarray
=
'
typedarray
'
Arraybuffer
=
'
arraybuffer
'
Node
=
'
node
'
Window
=
'
window
'
}
export
interface
WebDriverValue
{
type
:
(
'
undefined
'
|
'
null
'
|
'
string
'
|
'
number
'
|
'
boolean
'
|
'
bigint
'
|
'
regexp
'
|
'
date
'
|
'
symbol
'
|
'
array
'
|
'
object
'
|
'
function
'
|
'
map
'
|
'
set
'
|
'
weakmap
'
|
'
weakset
'
|
'
error
'
|
'
proxy
'
|
'
promise
'
|
'
typedarray
'
|
'
arraybuffer
'
|
'
node
'
|
'
window
'
)
;
value
?
:
any
;
objectId
?
:
string
;
}
export
type
RemoteObjectId
=
string
;
export
type
UnserializableValue
=
string
;
export
const
enum
RemoteObjectType
{
Object
=
'
object
'
Function
=
'
function
'
Undefined
=
'
undefined
'
String
=
'
string
'
Number
=
'
number
'
Boolean
=
'
boolean
'
Symbol
=
'
symbol
'
Bigint
=
'
bigint
'
}
export
const
enum
RemoteObjectSubtype
{
Array
=
'
array
'
Null
=
'
null
'
Node
=
'
node
'
Regexp
=
'
regexp
'
Date
=
'
date
'
Map
=
'
map
'
Set
=
'
set
'
Weakmap
=
'
weakmap
'
Weakset
=
'
weakset
'
Iterator
=
'
iterator
'
Generator
=
'
generator
'
Error
=
'
error
'
Proxy
=
'
proxy
'
Promise
=
'
promise
'
Typedarray
=
'
typedarray
'
Arraybuffer
=
'
arraybuffer
'
Dataview
=
'
dataview
'
Webassemblymemory
=
'
webassemblymemory
'
Wasmvalue
=
'
wasmvalue
'
}
export
interface
RemoteObject
{
type
:
(
'
object
'
|
'
function
'
|
'
undefined
'
|
'
string
'
|
'
number
'
|
'
boolean
'
|
'
symbol
'
|
'
bigint
'
)
;
subtype
?
:
(
'
array
'
|
'
null
'
|
'
node
'
|
'
regexp
'
|
'
date
'
|
'
map
'
|
'
set
'
|
'
weakmap
'
|
'
weakset
'
|
'
iterator
'
|
'
generator
'
|
'
error
'
|
'
proxy
'
|
'
promise
'
|
'
typedarray
'
|
'
arraybuffer
'
|
'
dataview
'
|
'
webassemblymemory
'
|
'
wasmvalue
'
)
;
className
?
:
string
;
value
?
:
any
;
unserializableValue
?
:
UnserializableValue
;
description
?
:
string
;
webDriverValue
?
:
WebDriverValue
;
objectId
?
:
RemoteObjectId
;
preview
?
:
ObjectPreview
;
customPreview
?
:
CustomPreview
;
}
export
interface
CustomPreview
{
header
:
string
;
bodyGetterId
?
:
RemoteObjectId
;
}
export
const
enum
ObjectPreviewType
{
Object
=
'
object
'
Function
=
'
function
'
Undefined
=
'
undefined
'
String
=
'
string
'
Number
=
'
number
'
Boolean
=
'
boolean
'
Symbol
=
'
symbol
'
Bigint
=
'
bigint
'
}
export
const
enum
ObjectPreviewSubtype
{
Array
=
'
array
'
Null
=
'
null
'
Node
=
'
node
'
Regexp
=
'
regexp
'
Date
=
'
date
'
Map
=
'
map
'
Set
=
'
set
'
Weakmap
=
'
weakmap
'
Weakset
=
'
weakset
'
Iterator
=
'
iterator
'
Generator
=
'
generator
'
Error
=
'
error
'
Proxy
=
'
proxy
'
Promise
=
'
promise
'
Typedarray
=
'
typedarray
'
Arraybuffer
=
'
arraybuffer
'
Dataview
=
'
dataview
'
Webassemblymemory
=
'
webassemblymemory
'
Wasmvalue
=
'
wasmvalue
'
}
export
interface
ObjectPreview
{
type
:
(
'
object
'
|
'
function
'
|
'
undefined
'
|
'
string
'
|
'
number
'
|
'
boolean
'
|
'
symbol
'
|
'
bigint
'
)
;
subtype
?
:
(
'
array
'
|
'
null
'
|
'
node
'
|
'
regexp
'
|
'
date
'
|
'
map
'
|
'
set
'
|
'
weakmap
'
|
'
weakset
'
|
'
iterator
'
|
'
generator
'
|
'
error
'
|
'
proxy
'
|
'
promise
'
|
'
typedarray
'
|
'
arraybuffer
'
|
'
dataview
'
|
'
webassemblymemory
'
|
'
wasmvalue
'
)
;
description
?
:
string
;
overflow
:
boolean
;
properties
:
PropertyPreview
[
]
;
entries
?
:
EntryPreview
[
]
;
}
export
const
enum
PropertyPreviewType
{
Object
=
'
object
'
Function
=
'
function
'
Undefined
=
'
undefined
'
String
=
'
string
'
Number
=
'
number
'
Boolean
=
'
boolean
'
Symbol
=
'
symbol
'
Accessor
=
'
accessor
'
Bigint
=
'
bigint
'
}
export
const
enum
PropertyPreviewSubtype
{
Array
=
'
array
'
Null
=
'
null
'
Node
=
'
node
'
Regexp
=
'
regexp
'
Date
=
'
date
'
Map
=
'
map
'
Set
=
'
set
'
Weakmap
=
'
weakmap
'
Weakset
=
'
weakset
'
Iterator
=
'
iterator
'
Generator
=
'
generator
'
Error
=
'
error
'
Proxy
=
'
proxy
'
Promise
=
'
promise
'
Typedarray
=
'
typedarray
'
Arraybuffer
=
'
arraybuffer
'
Dataview
=
'
dataview
'
Webassemblymemory
=
'
webassemblymemory
'
Wasmvalue
=
'
wasmvalue
'
}
export
interface
PropertyPreview
{
name
:
string
;
type
:
(
'
object
'
|
'
function
'
|
'
undefined
'
|
'
string
'
|
'
number
'
|
'
boolean
'
|
'
symbol
'
|
'
accessor
'
|
'
bigint
'
)
;
value
?
:
string
;
valuePreview
?
:
ObjectPreview
;
subtype
?
:
(
'
array
'
|
'
null
'
|
'
node
'
|
'
regexp
'
|
'
date
'
|
'
map
'
|
'
set
'
|
'
weakmap
'
|
'
weakset
'
|
'
iterator
'
|
'
generator
'
|
'
error
'
|
'
proxy
'
|
'
promise
'
|
'
typedarray
'
|
'
arraybuffer
'
|
'
dataview
'
|
'
webassemblymemory
'
|
'
wasmvalue
'
)
;
}
export
interface
EntryPreview
{
key
?
:
ObjectPreview
;
value
:
ObjectPreview
;
}
export
interface
PropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
writable
?
:
boolean
;
get
?
:
RemoteObject
;
set
?
:
RemoteObject
;
configurable
:
boolean
;
enumerable
:
boolean
;
wasThrown
?
:
boolean
;
isOwn
?
:
boolean
;
symbol
?
:
RemoteObject
;
}
export
interface
InternalPropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
}
export
interface
PrivatePropertyDescriptor
{
name
:
string
;
value
?
:
RemoteObject
;
get
?
:
RemoteObject
;
set
?
:
RemoteObject
;
}
export
interface
CallArgument
{
value
?
:
any
;
unserializableValue
?
:
UnserializableValue
;
objectId
?
:
RemoteObjectId
;
}
export
type
ExecutionContextId
=
integer
;
export
interface
ExecutionContextDescription
{
id
:
ExecutionContextId
;
origin
:
string
;
name
:
string
;
uniqueId
:
string
;
auxData
?
:
any
;
}
export
interface
ExceptionDetails
{
exceptionId
:
integer
;
text
:
string
;
lineNumber
:
integer
;
columnNumber
:
integer
;
scriptId
?
:
ScriptId
;
url
?
:
string
;
stackTrace
?
:
StackTrace
;
exception
?
:
RemoteObject
;
executionContextId
?
:
ExecutionContextId
;
exceptionMetaData
?
:
any
;
}
export
type
Timestamp
=
number
;
export
type
TimeDelta
=
number
;
export
interface
CallFrame
{
functionName
:
string
;
scriptId
:
ScriptId
;
url
:
string
;
lineNumber
:
integer
;
columnNumber
:
integer
;
}
export
interface
StackTrace
{
description
?
:
string
;
callFrames
:
CallFrame
[
]
;
parent
?
:
StackTrace
;
parentId
?
:
StackTraceId
;
}
export
type
UniqueDebuggerId
=
string
;
export
interface
StackTraceId
{
id
:
string
;
debuggerId
?
:
UniqueDebuggerId
;
}
export
interface
AwaitPromiseRequest
{
promiseObjectId
:
RemoteObjectId
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
}
export
interface
AwaitPromiseResponse
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
CallFunctionOnRequest
{
functionDeclaration
:
string
;
objectId
?
:
RemoteObjectId
;
arguments
?
:
CallArgument
[
]
;
silent
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
userGesture
?
:
boolean
;
awaitPromise
?
:
boolean
;
executionContextId
?
:
ExecutionContextId
;
objectGroup
?
:
string
;
throwOnSideEffect
?
:
boolean
;
generateWebDriverValue
?
:
boolean
;
}
export
interface
CallFunctionOnResponse
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
CompileScriptRequest
{
expression
:
string
;
sourceURL
:
string
;
persistScript
:
boolean
;
executionContextId
?
:
ExecutionContextId
;
}
export
interface
CompileScriptResponse
{
scriptId
?
:
ScriptId
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
EvaluateRequest
{
expression
:
string
;
objectGroup
?
:
string
;
includeCommandLineAPI
?
:
boolean
;
silent
?
:
boolean
;
contextId
?
:
ExecutionContextId
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
userGesture
?
:
boolean
;
awaitPromise
?
:
boolean
;
throwOnSideEffect
?
:
boolean
;
timeout
?
:
TimeDelta
;
disableBreaks
?
:
boolean
;
replMode
?
:
boolean
;
allowUnsafeEvalBlockedByCSP
?
:
boolean
;
uniqueContextId
?
:
string
;
generateWebDriverValue
?
:
boolean
;
}
export
interface
EvaluateResponse
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
GetIsolateIdResponse
{
id
:
string
;
}
export
interface
GetHeapUsageResponse
{
usedSize
:
number
;
totalSize
:
number
;
}
export
interface
GetPropertiesRequest
{
objectId
:
RemoteObjectId
;
ownProperties
?
:
boolean
;
accessorPropertiesOnly
?
:
boolean
;
generatePreview
?
:
boolean
;
nonIndexedPropertiesOnly
?
:
boolean
;
}
export
interface
GetPropertiesResponse
{
result
:
PropertyDescriptor
[
]
;
internalProperties
?
:
InternalPropertyDescriptor
[
]
;
privateProperties
?
:
PrivatePropertyDescriptor
[
]
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
GlobalLexicalScopeNamesRequest
{
executionContextId
?
:
ExecutionContextId
;
}
export
interface
GlobalLexicalScopeNamesResponse
{
names
:
string
[
]
;
}
export
interface
QueryObjectsRequest
{
prototypeObjectId
:
RemoteObjectId
;
objectGroup
?
:
string
;
}
export
interface
QueryObjectsResponse
{
objects
:
RemoteObject
;
}
export
interface
ReleaseObjectRequest
{
objectId
:
RemoteObjectId
;
}
export
interface
ReleaseObjectGroupRequest
{
objectGroup
:
string
;
}
export
interface
RunScriptRequest
{
scriptId
:
ScriptId
;
executionContextId
?
:
ExecutionContextId
;
objectGroup
?
:
string
;
silent
?
:
boolean
;
includeCommandLineAPI
?
:
boolean
;
returnByValue
?
:
boolean
;
generatePreview
?
:
boolean
;
awaitPromise
?
:
boolean
;
}
export
interface
RunScriptResponse
{
result
:
RemoteObject
;
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
SetAsyncCallStackDepthRequest
{
maxDepth
:
integer
;
}
export
interface
SetCustomObjectFormatterEnabledRequest
{
enabled
:
boolean
;
}
export
interface
SetMaxCallStackSizeToCaptureRequest
{
size
:
integer
;
}
export
interface
AddBindingRequest
{
name
:
string
;
executionContextId
?
:
ExecutionContextId
;
executionContextName
?
:
string
;
}
export
interface
RemoveBindingRequest
{
name
:
string
;
}
export
interface
GetExceptionDetailsRequest
{
errorObjectId
:
RemoteObjectId
;
}
export
interface
GetExceptionDetailsResponse
{
exceptionDetails
?
:
ExceptionDetails
;
}
export
interface
BindingCalledEvent
{
name
:
string
;
payload
:
string
;
executionContextId
:
ExecutionContextId
;
}
export
const
enum
ConsoleAPICalledEventType
{
Log
=
'
log
'
Debug
=
'
debug
'
Info
=
'
info
'
Error
=
'
error
'
Warning
=
'
warning
'
Dir
=
'
dir
'
DirXML
=
'
dirxml
'
Table
=
'
table
'
Trace
=
'
trace
'
Clear
=
'
clear
'
StartGroup
=
'
startGroup
'
StartGroupCollapsed
=
'
startGroupCollapsed
'
EndGroup
=
'
endGroup
'
Assert
=
'
assert
'
Profile
=
'
profile
'
ProfileEnd
=
'
profileEnd
'
Count
=
'
count
'
TimeEnd
=
'
timeEnd
'
}
export
interface
ConsoleAPICalledEvent
{
type
:
(
'
log
'
|
'
debug
'
|
'
info
'
|
'
error
'
|
'
warning
'
|
'
dir
'
|
'
dirxml
'
|
'
table
'
|
'
trace
'
|
'
clear
'
|
'
startGroup
'
|
'
startGroupCollapsed
'
|
'
endGroup
'
|
'
assert
'
|
'
profile
'
|
'
profileEnd
'
|
'
count
'
|
'
timeEnd
'
)
;
args
:
RemoteObject
[
]
;
executionContextId
:
ExecutionContextId
;
timestamp
:
Timestamp
;
stackTrace
?
:
StackTrace
;
context
?
:
string
;
}
export
interface
ExceptionRevokedEvent
{
reason
:
string
;
exceptionId
:
integer
;
}
export
interface
ExceptionThrownEvent
{
timestamp
:
Timestamp
;
exceptionDetails
:
ExceptionDetails
;
}
export
interface
ExecutionContextCreatedEvent
{
context
:
ExecutionContextDescription
;
}
export
interface
ExecutionContextDestroyedEvent
{
executionContextId
:
ExecutionContextId
;
}
export
interface
InspectRequestedEvent
{
object
:
RemoteObject
;
hints
:
any
;
executionContextId
?
:
ExecutionContextId
;
}
}
export
namespace
Schema
{
export
interface
Domain
{
name
:
string
;
version
:
string
;
}
export
interface
GetDomainsResponse
{
domains
:
Domain
[
]
;
}
}
export
namespace
Accessibility
{
export
type
AXNodeId
=
string
;
export
type
AXValueType
=
(
'
boolean
'
|
'
tristate
'
|
'
booleanOrUndefined
'
|
'
idref
'
|
'
idrefList
'
|
'
integer
'
|
'
node
'
|
'
nodeList
'
|
'
number
'
|
'
string
'
|
'
computedString
'
|
'
token
'
|
'
tokenList
'
|
'
domRelation
'
|
'
role
'
|
'
internalRole
'
|
'
valueUndefined
'
)
;
export
type
AXValueSourceType
=
(
'
attribute
'
|
'
implicit
'
|
'
style
'
|
'
contents
'
|
'
placeholder
'
|
'
relatedElement
'
)
;
export
type
AXValueNativeSourceType
=
(
'
description
'
|
'
figcaption
'
|
'
label
'
|
'
labelfor
'
|
'
labelwrapped
'
|
'
legend
'
|
'
rubyannotation
'
|
'
tablecaption
'
|
'
title
'
|
'
other
'
)
;
export
interface
AXValueSource
{
type
:
AXValueSourceType
;
value
?
:
AXValue
;
attribute
?
:
string
;
attributeValue
?
:
AXValue
;
superseded
?
:
boolean
;
nativeSource
?
:
AXValueNativeSourceType
;
nativeSourceValue
?
:
AXValue
;
invalid
?
:
boolean
;
invalidReason
?
:
string
;
}
export
interface
AXRelatedNode
{
backendDOMNodeId
:
DOM
.
BackendNodeId
;
idref
?
:
string
;
text
?
:
string
;
}
export
interface
AXProperty
{
name
:
AXPropertyName
;
value
:
AXValue
;
}
export
interface
AXValue
{
type
:
AXValueType
;
value
?
:
any
;
relatedNodes
?
:
AXRelatedNode
[
]
;
sources
?
:
AXValueSource
[
]
;
}
export
type
AXPropertyName
=
(
'
busy
'
|
'
disabled
'
|
'
editable
'
|
'
focusable
'
|
'
focused
'
|
'
hidden
'
|
'
hiddenRoot
'
|
'
invalid
'
|
'
keyshortcuts
'
|
'
settable
'
|
'
roledescription
'
|
'
live
'
|
'
atomic
'
|
'
relevant
'
|
'
root
'
|
'
autocomplete
'
|
'
hasPopup
'
|
'
level
'
|
'
multiselectable
'
|
'
orientation
'
|
'
multiline
'
|
'
readonly
'
|
'
required
'
|
'
valuemin
'
|
'
valuemax
'
|
'
valuetext
'
|
'
checked
'
|
'
expanded
'
|
'
modal
'
|
'
pressed
'
|
'
selected
'
|
'
activedescendant
'
|
'
controls
'
|
'
describedby
'
|
'
details
'
|
'
errormessage
'
|
'
flowto
'
|
'
labelledby
'
|
'
owns
'
)
;
export
interface
AXNode
{
nodeId
:
AXNodeId
;
ignored
:
boolean
;
ignoredReasons
?
:
AXProperty
[
]
;
role
?
:
AXValue
;
chromeRole
?
:
AXValue
;
name
?
:
AXValue
;
description
?
:
AXValue
;
value
?
:
AXValue
;
properties
?
:
AXProperty
[
]
;
parentId
?
:
AXNodeId
;
childIds
?
:
AXNodeId
[
]
;
backendDOMNodeId
?
:
DOM
.
BackendNodeId
;
frameId
?
:
Page
.
FrameId
;
}
export
interface
GetPartialAXTreeRequest
{
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
fetchRelatives
?
:
boolean
;
}
export
interface
GetPartialAXTreeResponse
{
nodes
:
AXNode
[
]
;
}
export
interface
GetFullAXTreeRequest
{
depth
?
:
integer
;
frameId
?
:
Page
.
FrameId
;
}
export
interface
GetFullAXTreeResponse
{
nodes
:
AXNode
[
]
;
}
export
interface
GetRootAXNodeRequest
{
frameId
?
:
Page
.
FrameId
;
}
export
interface
GetRootAXNodeResponse
{
node
:
AXNode
;
}
export
interface
GetAXNodeAndAncestorsRequest
{
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetAXNodeAndAncestorsResponse
{
nodes
:
AXNode
[
]
;
}
export
interface
GetChildAXNodesRequest
{
id
:
AXNodeId
;
frameId
?
:
Page
.
FrameId
;
}
export
interface
GetChildAXNodesResponse
{
nodes
:
AXNode
[
]
;
}
export
interface
QueryAXTreeRequest
{
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
accessibleName
?
:
string
;
role
?
:
string
;
}
export
interface
QueryAXTreeResponse
{
nodes
:
AXNode
[
]
;
}
export
interface
LoadCompleteEvent
{
root
:
AXNode
;
}
export
interface
NodesUpdatedEvent
{
nodes
:
AXNode
[
]
;
}
}
export
namespace
Animation
{
export
const
enum
AnimationType
{
CSSTransition
=
'
CSSTransition
'
CSSAnimation
=
'
CSSAnimation
'
WebAnimation
=
'
WebAnimation
'
}
export
interface
Animation
{
id
:
string
;
name
:
string
;
pausedState
:
boolean
;
playState
:
string
;
playbackRate
:
number
;
startTime
:
number
;
currentTime
:
number
;
type
:
(
'
CSSTransition
'
|
'
CSSAnimation
'
|
'
WebAnimation
'
)
;
source
?
:
AnimationEffect
;
cssId
?
:
string
;
}
export
interface
AnimationEffect
{
delay
:
number
;
endDelay
:
number
;
iterationStart
:
number
;
iterations
:
number
;
duration
:
number
;
direction
:
string
;
fill
:
string
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
keyframesRule
?
:
KeyframesRule
;
easing
:
string
;
}
export
interface
KeyframesRule
{
name
?
:
string
;
keyframes
:
KeyframeStyle
[
]
;
}
export
interface
KeyframeStyle
{
offset
:
string
;
easing
:
string
;
}
export
interface
GetCurrentTimeRequest
{
id
:
string
;
}
export
interface
GetCurrentTimeResponse
{
currentTime
:
number
;
}
export
interface
GetPlaybackRateResponse
{
playbackRate
:
number
;
}
export
interface
ReleaseAnimationsRequest
{
animations
:
string
[
]
;
}
export
interface
ResolveAnimationRequest
{
animationId
:
string
;
}
export
interface
ResolveAnimationResponse
{
remoteObject
:
Runtime
.
RemoteObject
;
}
export
interface
SeekAnimationsRequest
{
animations
:
string
[
]
;
currentTime
:
number
;
}
export
interface
SetPausedRequest
{
animations
:
string
[
]
;
paused
:
boolean
;
}
export
interface
SetPlaybackRateRequest
{
playbackRate
:
number
;
}
export
interface
SetTimingRequest
{
animationId
:
string
;
duration
:
number
;
delay
:
number
;
}
export
interface
AnimationCanceledEvent
{
id
:
string
;
}
export
interface
AnimationCreatedEvent
{
id
:
string
;
}
export
interface
AnimationStartedEvent
{
animation
:
Animation
;
}
}
export
namespace
Audits
{
export
interface
AffectedCookie
{
name
:
string
;
path
:
string
;
domain
:
string
;
}
export
interface
AffectedRequest
{
requestId
:
Network
.
RequestId
;
url
?
:
string
;
}
export
interface
AffectedFrame
{
frameId
:
Page
.
FrameId
;
}
export
type
CookieExclusionReason
=
(
'
ExcludeSameSiteUnspecifiedTreatedAsLax
'
|
'
ExcludeSameSiteNoneInsecure
'
|
'
ExcludeSameSiteLax
'
|
'
ExcludeSameSiteStrict
'
|
'
ExcludeInvalidSameParty
'
|
'
ExcludeSamePartyCrossPartyContext
'
|
'
ExcludeDomainNonASCII
'
|
'
ExcludeThirdPartyCookieBlockedInFirstPartySet
'
)
;
export
type
CookieWarningReason
=
(
'
WarnSameSiteUnspecifiedCrossSiteContext
'
|
'
WarnSameSiteNoneInsecure
'
|
'
WarnSameSiteUnspecifiedLaxAllowUnsafe
'
|
'
WarnSameSiteStrictLaxDowngradeStrict
'
|
'
WarnSameSiteStrictCrossDowngradeStrict
'
|
'
WarnSameSiteStrictCrossDowngradeLax
'
|
'
WarnSameSiteLaxCrossDowngradeStrict
'
|
'
WarnSameSiteLaxCrossDowngradeLax
'
|
'
WarnAttributeValueExceedsMaxSize
'
|
'
WarnDomainNonASCII
'
)
;
export
type
CookieOperation
=
(
'
SetCookie
'
|
'
ReadCookie
'
)
;
export
interface
CookieIssueDetails
{
cookie
?
:
AffectedCookie
;
rawCookieLine
?
:
string
;
cookieWarningReasons
:
CookieWarningReason
[
]
;
cookieExclusionReasons
:
CookieExclusionReason
[
]
;
operation
:
CookieOperation
;
siteForCookies
?
:
string
;
cookieUrl
?
:
string
;
request
?
:
AffectedRequest
;
}
export
type
MixedContentResolutionStatus
=
(
'
MixedContentBlocked
'
|
'
MixedContentAutomaticallyUpgraded
'
|
'
MixedContentWarning
'
)
;
export
type
MixedContentResourceType
=
(
'
AttributionSrc
'
|
'
Audio
'
|
'
Beacon
'
|
'
CSPReport
'
|
'
Download
'
|
'
EventSource
'
|
'
Favicon
'
|
'
Font
'
|
'
Form
'
|
'
Frame
'
|
'
Image
'
|
'
Import
'
|
'
Manifest
'
|
'
Ping
'
|
'
PluginData
'
|
'
PluginResource
'
|
'
Prefetch
'
|
'
Resource
'
|
'
Script
'
|
'
ServiceWorker
'
|
'
SharedWorker
'
|
'
Stylesheet
'
|
'
Track
'
|
'
Video
'
|
'
Worker
'
|
'
XMLHttpRequest
'
|
'
XSLT
'
)
;
export
interface
MixedContentIssueDetails
{
resourceType
?
:
MixedContentResourceType
;
resolutionStatus
:
MixedContentResolutionStatus
;
insecureURL
:
string
;
mainResourceURL
:
string
;
request
?
:
AffectedRequest
;
frame
?
:
AffectedFrame
;
}
export
type
BlockedByResponseReason
=
(
'
CoepFrameResourceNeedsCoepHeader
'
|
'
CoopSandboxedIFrameCannotNavigateToCoopPage
'
|
'
CorpNotSameOrigin
'
|
'
CorpNotSameOriginAfterDefaultedToSameOriginByCoep
'
|
'
CorpNotSameSite
'
)
;
export
interface
BlockedByResponseIssueDetails
{
request
:
AffectedRequest
;
parentFrame
?
:
AffectedFrame
;
blockedFrame
?
:
AffectedFrame
;
reason
:
BlockedByResponseReason
;
}
export
type
HeavyAdResolutionStatus
=
(
'
HeavyAdBlocked
'
|
'
HeavyAdWarning
'
)
;
export
type
HeavyAdReason
=
(
'
NetworkTotalLimit
'
|
'
CpuTotalLimit
'
|
'
CpuPeakLimit
'
)
;
export
interface
HeavyAdIssueDetails
{
resolution
:
HeavyAdResolutionStatus
;
reason
:
HeavyAdReason
;
frame
:
AffectedFrame
;
}
export
type
ContentSecurityPolicyViolationType
=
(
'
kInlineViolation
'
|
'
kEvalViolation
'
|
'
kURLViolation
'
|
'
kTrustedTypesSinkViolation
'
|
'
kTrustedTypesPolicyViolation
'
|
'
kWasmEvalViolation
'
)
;
export
interface
SourceCodeLocation
{
scriptId
?
:
Runtime
.
ScriptId
;
url
:
string
;
lineNumber
:
integer
;
columnNumber
:
integer
;
}
export
interface
ContentSecurityPolicyIssueDetails
{
blockedURL
?
:
string
;
violatedDirective
:
string
;
isReportOnly
:
boolean
;
contentSecurityPolicyViolationType
:
ContentSecurityPolicyViolationType
;
frameAncestor
?
:
AffectedFrame
;
sourceCodeLocation
?
:
SourceCodeLocation
;
violatingNodeId
?
:
DOM
.
BackendNodeId
;
}
export
type
SharedArrayBufferIssueType
=
(
'
TransferIssue
'
|
'
CreationIssue
'
)
;
export
interface
SharedArrayBufferIssueDetails
{
sourceCodeLocation
:
SourceCodeLocation
;
isWarning
:
boolean
;
type
:
SharedArrayBufferIssueType
;
}
export
type
TwaQualityEnforcementViolationType
=
(
'
kHttpError
'
|
'
kUnavailableOffline
'
|
'
kDigitalAssetLinks
'
)
;
export
interface
TrustedWebActivityIssueDetails
{
url
:
string
;
violationType
:
TwaQualityEnforcementViolationType
;
httpStatusCode
?
:
integer
;
packageName
?
:
string
;
signature
?
:
string
;
}
export
interface
LowTextContrastIssueDetails
{
violatingNodeId
:
DOM
.
BackendNodeId
;
violatingNodeSelector
:
string
;
contrastRatio
:
number
;
thresholdAA
:
number
;
thresholdAAA
:
number
;
fontSize
:
string
;
fontWeight
:
string
;
}
export
interface
CorsIssueDetails
{
corsErrorStatus
:
Network
.
CorsErrorStatus
;
isWarning
:
boolean
;
request
:
AffectedRequest
;
location
?
:
SourceCodeLocation
;
initiatorOrigin
?
:
string
;
resourceIPAddressSpace
?
:
Network
.
IPAddressSpace
;
clientSecurityState
?
:
Network
.
ClientSecurityState
;
}
export
type
AttributionReportingIssueType
=
(
'
PermissionPolicyDisabled
'
|
'
PermissionPolicyNotDelegated
'
|
'
UntrustworthyReportingOrigin
'
|
'
InsecureContext
'
|
'
InvalidHeader
'
|
'
InvalidRegisterTriggerHeader
'
|
'
InvalidEligibleHeader
'
|
'
TooManyConcurrentRequests
'
|
'
SourceAndTriggerHeaders
'
|
'
SourceIgnored
'
|
'
TriggerIgnored
'
)
;
export
interface
AttributionReportingIssueDetails
{
violationType
:
AttributionReportingIssueType
;
request
?
:
AffectedRequest
;
violatingNodeId
?
:
DOM
.
BackendNodeId
;
invalidParameter
?
:
string
;
}
export
interface
QuirksModeIssueDetails
{
isLimitedQuirksMode
:
boolean
;
documentNodeId
:
DOM
.
BackendNodeId
;
url
:
string
;
frameId
:
Page
.
FrameId
;
loaderId
:
Network
.
LoaderId
;
}
export
interface
NavigatorUserAgentIssueDetails
{
url
:
string
;
location
?
:
SourceCodeLocation
;
}
export
type
GenericIssueErrorType
=
(
'
CrossOriginPortalPostMessageError
'
)
;
export
interface
GenericIssueDetails
{
errorType
:
GenericIssueErrorType
;
frameId
?
:
Page
.
FrameId
;
}
export
type
DeprecationIssueType
=
(
'
AuthorizationCoveredByWildcard
'
|
'
CanRequestURLHTTPContainingNewline
'
|
'
ChromeLoadTimesConnectionInfo
'
|
'
ChromeLoadTimesFirstPaintAfterLoadTime
'
|
'
ChromeLoadTimesWasAlternateProtocolAvailable
'
|
'
CookieWithTruncatingChar
'
|
'
CrossOriginAccessBasedOnDocumentDomain
'
|
'
CrossOriginWindowAlert
'
|
'
CrossOriginWindowConfirm
'
|
'
CSSSelectorInternalMediaControlsOverlayCastButton
'
|
'
DeprecationExample
'
|
'
DocumentDomainSettingWithoutOriginAgentClusterHeader
'
|
'
EventPath
'
|
'
ExpectCTHeader
'
|
'
GeolocationInsecureOrigin
'
|
'
GeolocationInsecureOriginDeprecatedNotRemoved
'
|
'
GetUserMediaInsecureOrigin
'
|
'
HostCandidateAttributeGetter
'
|
'
IdentityInCanMakePaymentEvent
'
|
'
InsecurePrivateNetworkSubresourceRequest
'
|
'
LocalCSSFileExtensionRejected
'
|
'
MediaSourceAbortRemove
'
|
'
MediaSourceDurationTruncatingBuffered
'
|
'
NoSysexWebMIDIWithoutPermission
'
|
'
NotificationInsecureOrigin
'
|
'
NotificationPermissionRequestedIframe
'
|
'
ObsoleteWebRtcCipherSuite
'
|
'
OpenWebDatabaseInsecureContext
'
|
'
OverflowVisibleOnReplacedElement
'
|
'
PaymentInstruments
'
|
'
PaymentRequestCSPViolation
'
|
'
PersistentQuotaType
'
|
'
PictureSourceSrc
'
|
'
PrefixedCancelAnimationFrame
'
|
'
PrefixedRequestAnimationFrame
'
|
'
PrefixedStorageInfo
'
|
'
PrefixedVideoDisplayingFullscreen
'
|
'
PrefixedVideoEnterFullscreen
'
|
'
PrefixedVideoEnterFullScreen
'
|
'
PrefixedVideoExitFullscreen
'
|
'
PrefixedVideoExitFullScreen
'
|
'
PrefixedVideoSupportsFullscreen
'
|
'
RangeExpand
'
|
'
RequestedSubresourceWithEmbeddedCredentials
'
|
'
RTCConstraintEnableDtlsSrtpFalse
'
|
'
RTCConstraintEnableDtlsSrtpTrue
'
|
'
RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics
'
|
'
RTCPeerConnectionSdpSemanticsPlanB
'
|
'
RtcpMuxPolicyNegotiate
'
|
'
SharedArrayBufferConstructedWithoutIsolation
'
|
'
TextToSpeech_DisallowedByAutoplay
'
|
'
V8SharedArrayBufferConstructedInExtensionWithoutIsolation
'
|
'
XHRJSONEncodingDetection
'
|
'
XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload
'
|
'
XRSupportsSession
'
)
;
export
interface
DeprecationIssueDetails
{
affectedFrame
?
:
AffectedFrame
;
sourceCodeLocation
:
SourceCodeLocation
;
type
:
DeprecationIssueType
;
}
export
type
ClientHintIssueReason
=
(
'
MetaTagAllowListInvalidOrigin
'
|
'
MetaTagModifiedHTML
'
)
;
export
interface
FederatedAuthRequestIssueDetails
{
federatedAuthRequestIssueReason
:
FederatedAuthRequestIssueReason
;
}
export
type
FederatedAuthRequestIssueReason
=
(
'
ShouldEmbargo
'
|
'
TooManyRequests
'
|
'
WellKnownHttpNotFound
'
|
'
WellKnownNoResponse
'
|
'
WellKnownInvalidResponse
'
|
'
ConfigNotInWellKnown
'
|
'
WellKnownTooBig
'
|
'
ConfigHttpNotFound
'
|
'
ConfigNoResponse
'
|
'
ConfigInvalidResponse
'
|
'
ClientMetadataHttpNotFound
'
|
'
ClientMetadataNoResponse
'
|
'
ClientMetadataInvalidResponse
'
|
'
DisabledInSettings
'
|
'
ErrorFetchingSignin
'
|
'
InvalidSigninResponse
'
|
'
AccountsHttpNotFound
'
|
'
AccountsNoResponse
'
|
'
AccountsInvalidResponse
'
|
'
IdTokenHttpNotFound
'
|
'
IdTokenNoResponse
'
|
'
IdTokenInvalidResponse
'
|
'
IdTokenInvalidRequest
'
|
'
ErrorIdToken
'
|
'
Canceled
'
|
'
RpPageNotVisible
'
)
;
export
interface
ClientHintIssueDetails
{
sourceCodeLocation
:
SourceCodeLocation
;
clientHintIssueReason
:
ClientHintIssueReason
;
}
export
type
InspectorIssueCode
=
(
'
CookieIssue
'
|
'
MixedContentIssue
'
|
'
BlockedByResponseIssue
'
|
'
HeavyAdIssue
'
|
'
ContentSecurityPolicyIssue
'
|
'
SharedArrayBufferIssue
'
|
'
TrustedWebActivityIssue
'
|
'
LowTextContrastIssue
'
|
'
CorsIssue
'
|
'
AttributionReportingIssue
'
|
'
QuirksModeIssue
'
|
'
NavigatorUserAgentIssue
'
|
'
GenericIssue
'
|
'
DeprecationIssue
'
|
'
ClientHintIssue
'
|
'
FederatedAuthRequestIssue
'
)
;
export
interface
InspectorIssueDetails
{
cookieIssueDetails
?
:
CookieIssueDetails
;
mixedContentIssueDetails
?
:
MixedContentIssueDetails
;
blockedByResponseIssueDetails
?
:
BlockedByResponseIssueDetails
;
heavyAdIssueDetails
?
:
HeavyAdIssueDetails
;
contentSecurityPolicyIssueDetails
?
:
ContentSecurityPolicyIssueDetails
;
sharedArrayBufferIssueDetails
?
:
SharedArrayBufferIssueDetails
;
twaQualityEnforcementDetails
?
:
TrustedWebActivityIssueDetails
;
lowTextContrastIssueDetails
?
:
LowTextContrastIssueDetails
;
corsIssueDetails
?
:
CorsIssueDetails
;
attributionReportingIssueDetails
?
:
AttributionReportingIssueDetails
;
quirksModeIssueDetails
?
:
QuirksModeIssueDetails
;
navigatorUserAgentIssueDetails
?
:
NavigatorUserAgentIssueDetails
;
genericIssueDetails
?
:
GenericIssueDetails
;
deprecationIssueDetails
?
:
DeprecationIssueDetails
;
clientHintIssueDetails
?
:
ClientHintIssueDetails
;
federatedAuthRequestIssueDetails
?
:
FederatedAuthRequestIssueDetails
;
}
export
type
IssueId
=
string
;
export
interface
InspectorIssue
{
code
:
InspectorIssueCode
;
details
:
InspectorIssueDetails
;
issueId
?
:
IssueId
;
}
export
const
enum
GetEncodedResponseRequestEncoding
{
Webp
=
'
webp
'
Jpeg
=
'
jpeg
'
Png
=
'
png
'
}
export
interface
GetEncodedResponseRequest
{
requestId
:
Network
.
RequestId
;
encoding
:
(
'
webp
'
|
'
jpeg
'
|
'
png
'
)
;
quality
?
:
number
;
sizeOnly
?
:
boolean
;
}
export
interface
GetEncodedResponseResponse
{
body
?
:
string
;
originalSize
:
integer
;
encodedSize
:
integer
;
}
export
interface
CheckContrastRequest
{
reportAAA
?
:
boolean
;
}
export
interface
IssueAddedEvent
{
issue
:
InspectorIssue
;
}
}
export
namespace
BackgroundService
{
export
type
ServiceName
=
(
'
backgroundFetch
'
|
'
backgroundSync
'
|
'
pushMessaging
'
|
'
notifications
'
|
'
paymentHandler
'
|
'
periodicBackgroundSync
'
)
;
export
interface
EventMetadata
{
key
:
string
;
value
:
string
;
}
export
interface
BackgroundServiceEvent
{
timestamp
:
Network
.
TimeSinceEpoch
;
origin
:
string
;
serviceWorkerRegistrationId
:
ServiceWorker
.
RegistrationID
;
service
:
ServiceName
;
eventName
:
string
;
instanceId
:
string
;
eventMetadata
:
EventMetadata
[
]
;
storageKey
:
string
;
}
export
interface
StartObservingRequest
{
service
:
ServiceName
;
}
export
interface
StopObservingRequest
{
service
:
ServiceName
;
}
export
interface
SetRecordingRequest
{
shouldRecord
:
boolean
;
service
:
ServiceName
;
}
export
interface
ClearEventsRequest
{
service
:
ServiceName
;
}
export
interface
RecordingStateChangedEvent
{
isRecording
:
boolean
;
service
:
ServiceName
;
}
export
interface
BackgroundServiceEventReceivedEvent
{
backgroundServiceEvent
:
BackgroundServiceEvent
;
}
}
export
namespace
Browser
{
export
type
BrowserContextID
=
string
;
export
type
WindowID
=
integer
;
export
type
WindowState
=
(
'
normal
'
|
'
minimized
'
|
'
maximized
'
|
'
fullscreen
'
)
;
export
interface
Bounds
{
left
?
:
integer
;
top
?
:
integer
;
width
?
:
integer
;
height
?
:
integer
;
windowState
?
:
WindowState
;
}
export
type
PermissionType
=
(
'
accessibilityEvents
'
|
'
audioCapture
'
|
'
backgroundSync
'
|
'
backgroundFetch
'
|
'
clipboardReadWrite
'
|
'
clipboardSanitizedWrite
'
|
'
displayCapture
'
|
'
durableStorage
'
|
'
flash
'
|
'
geolocation
'
|
'
idleDetection
'
|
'
localFonts
'
|
'
midi
'
|
'
midiSysex
'
|
'
nfc
'
|
'
notifications
'
|
'
paymentHandler
'
|
'
periodicBackgroundSync
'
|
'
protectedMediaIdentifier
'
|
'
sensors
'
|
'
storageAccess
'
|
'
videoCapture
'
|
'
videoCapturePanTiltZoom
'
|
'
wakeLockScreen
'
|
'
wakeLockSystem
'
|
'
windowManagement
'
)
;
export
type
PermissionSetting
=
(
'
granted
'
|
'
denied
'
|
'
prompt
'
)
;
export
interface
PermissionDescriptor
{
name
:
string
;
sysex
?
:
boolean
;
userVisibleOnly
?
:
boolean
;
allowWithoutSanitization
?
:
boolean
;
panTiltZoom
?
:
boolean
;
}
export
type
BrowserCommandId
=
(
'
openTabSearch
'
|
'
closeTabSearch
'
)
;
export
interface
Bucket
{
low
:
integer
;
high
:
integer
;
count
:
integer
;
}
export
interface
Histogram
{
name
:
string
;
sum
:
integer
;
count
:
integer
;
buckets
:
Bucket
[
]
;
}
export
interface
SetPermissionRequest
{
permission
:
PermissionDescriptor
;
setting
:
PermissionSetting
;
origin
?
:
string
;
browserContextId
?
:
BrowserContextID
;
}
export
interface
GrantPermissionsRequest
{
permissions
:
PermissionType
[
]
;
origin
?
:
string
;
browserContextId
?
:
BrowserContextID
;
}
export
interface
ResetPermissionsRequest
{
browserContextId
?
:
BrowserContextID
;
}
export
const
enum
SetDownloadBehaviorRequestBehavior
{
Deny
=
'
deny
'
Allow
=
'
allow
'
AllowAndName
=
'
allowAndName
'
Default
=
'
default
'
}
export
interface
SetDownloadBehaviorRequest
{
behavior
:
(
'
deny
'
|
'
allow
'
|
'
allowAndName
'
|
'
default
'
)
;
browserContextId
?
:
BrowserContextID
;
downloadPath
?
:
string
;
eventsEnabled
?
:
boolean
;
}
export
interface
CancelDownloadRequest
{
guid
:
string
;
browserContextId
?
:
BrowserContextID
;
}
export
interface
GetVersionResponse
{
protocolVersion
:
string
;
product
:
string
;
revision
:
string
;
userAgent
:
string
;
jsVersion
:
string
;
}
export
interface
GetBrowserCommandLineResponse
{
arguments
:
string
[
]
;
}
export
interface
GetHistogramsRequest
{
query
?
:
string
;
delta
?
:
boolean
;
}
export
interface
GetHistogramsResponse
{
histograms
:
Histogram
[
]
;
}
export
interface
GetHistogramRequest
{
name
:
string
;
delta
?
:
boolean
;
}
export
interface
GetHistogramResponse
{
histogram
:
Histogram
;
}
export
interface
GetWindowBoundsRequest
{
windowId
:
WindowID
;
}
export
interface
GetWindowBoundsResponse
{
bounds
:
Bounds
;
}
export
interface
GetWindowForTargetRequest
{
targetId
?
:
Target
.
TargetID
;
}
export
interface
GetWindowForTargetResponse
{
windowId
:
WindowID
;
bounds
:
Bounds
;
}
export
interface
SetWindowBoundsRequest
{
windowId
:
WindowID
;
bounds
:
Bounds
;
}
export
interface
SetDockTileRequest
{
badgeLabel
?
:
string
;
image
?
:
string
;
}
export
interface
ExecuteBrowserCommandRequest
{
commandId
:
BrowserCommandId
;
}
export
interface
DownloadWillBeginEvent
{
frameId
:
Page
.
FrameId
;
guid
:
string
;
url
:
string
;
suggestedFilename
:
string
;
}
export
const
enum
DownloadProgressEventState
{
InProgress
=
'
inProgress
'
Completed
=
'
completed
'
Canceled
=
'
canceled
'
}
export
interface
DownloadProgressEvent
{
guid
:
string
;
totalBytes
:
number
;
receivedBytes
:
number
;
state
:
(
'
inProgress
'
|
'
completed
'
|
'
canceled
'
)
;
}
}
export
namespace
CSS
{
export
type
StyleSheetId
=
string
;
export
type
StyleSheetOrigin
=
(
'
injected
'
|
'
user
-
agent
'
|
'
inspector
'
|
'
regular
'
)
;
export
interface
PseudoElementMatches
{
pseudoType
:
DOM
.
PseudoType
;
pseudoIdentifier
?
:
string
;
matches
:
RuleMatch
[
]
;
}
export
interface
InheritedStyleEntry
{
inlineStyle
?
:
CSSStyle
;
matchedCSSRules
:
RuleMatch
[
]
;
}
export
interface
InheritedPseudoElementMatches
{
pseudoElements
:
PseudoElementMatches
[
]
;
}
export
interface
RuleMatch
{
rule
:
CSSRule
;
matchingSelectors
:
integer
[
]
;
}
export
interface
Value
{
text
:
string
;
range
?
:
SourceRange
;
}
export
interface
SelectorList
{
selectors
:
Value
[
]
;
text
:
string
;
}
export
interface
CSSStyleSheetHeader
{
styleSheetId
:
StyleSheetId
;
frameId
:
Page
.
FrameId
;
sourceURL
:
string
;
sourceMapURL
?
:
string
;
origin
:
StyleSheetOrigin
;
title
:
string
;
ownerNode
?
:
DOM
.
BackendNodeId
;
disabled
:
boolean
;
hasSourceURL
?
:
boolean
;
isInline
:
boolean
;
isMutable
:
boolean
;
isConstructed
:
boolean
;
startLine
:
number
;
startColumn
:
number
;
length
:
number
;
endLine
:
number
;
endColumn
:
number
;
}
export
interface
CSSRule
{
styleSheetId
?
:
StyleSheetId
;
selectorList
:
SelectorList
;
origin
:
StyleSheetOrigin
;
style
:
CSSStyle
;
media
?
:
CSSMedia
[
]
;
containerQueries
?
:
CSSContainerQuery
[
]
;
supports
?
:
CSSSupports
[
]
;
layers
?
:
CSSLayer
[
]
;
scopes
?
:
CSSScope
[
]
;
}
export
interface
RuleUsage
{
styleSheetId
:
StyleSheetId
;
startOffset
:
number
;
endOffset
:
number
;
used
:
boolean
;
}
export
interface
SourceRange
{
startLine
:
integer
;
startColumn
:
integer
;
endLine
:
integer
;
endColumn
:
integer
;
}
export
interface
ShorthandEntry
{
name
:
string
;
value
:
string
;
important
?
:
boolean
;
}
export
interface
CSSComputedStyleProperty
{
name
:
string
;
value
:
string
;
}
export
interface
CSSStyle
{
styleSheetId
?
:
StyleSheetId
;
cssProperties
:
CSSProperty
[
]
;
shorthandEntries
:
ShorthandEntry
[
]
;
cssText
?
:
string
;
range
?
:
SourceRange
;
}
export
interface
CSSProperty
{
name
:
string
;
value
:
string
;
important
?
:
boolean
;
implicit
?
:
boolean
;
text
?
:
string
;
parsedOk
?
:
boolean
;
disabled
?
:
boolean
;
range
?
:
SourceRange
;
longhandProperties
?
:
CSSProperty
[
]
;
}
export
const
enum
CSSMediaSource
{
MediaRule
=
'
mediaRule
'
ImportRule
=
'
importRule
'
LinkedSheet
=
'
linkedSheet
'
InlineSheet
=
'
inlineSheet
'
}
export
interface
CSSMedia
{
text
:
string
;
source
:
(
'
mediaRule
'
|
'
importRule
'
|
'
linkedSheet
'
|
'
inlineSheet
'
)
;
sourceURL
?
:
string
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
mediaList
?
:
MediaQuery
[
]
;
}
export
interface
MediaQuery
{
expressions
:
MediaQueryExpression
[
]
;
active
:
boolean
;
}
export
interface
MediaQueryExpression
{
value
:
number
;
unit
:
string
;
feature
:
string
;
valueRange
?
:
SourceRange
;
computedLength
?
:
number
;
}
export
interface
CSSContainerQuery
{
text
:
string
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
name
?
:
string
;
physicalAxes
?
:
DOM
.
PhysicalAxes
;
logicalAxes
?
:
DOM
.
LogicalAxes
;
}
export
interface
CSSSupports
{
text
:
string
;
active
:
boolean
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
}
export
interface
CSSScope
{
text
:
string
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
}
export
interface
CSSLayer
{
text
:
string
;
range
?
:
SourceRange
;
styleSheetId
?
:
StyleSheetId
;
}
export
interface
CSSLayerData
{
name
:
string
;
subLayers
?
:
CSSLayerData
[
]
;
order
:
number
;
}
export
interface
PlatformFontUsage
{
familyName
:
string
;
isCustomFont
:
boolean
;
glyphCount
:
number
;
}
export
interface
FontVariationAxis
{
tag
:
string
;
name
:
string
;
minValue
:
number
;
maxValue
:
number
;
defaultValue
:
number
;
}
export
interface
FontFace
{
fontFamily
:
string
;
fontStyle
:
string
;
fontVariant
:
string
;
fontWeight
:
string
;
fontStretch
:
string
;
fontDisplay
:
string
;
unicodeRange
:
string
;
src
:
string
;
platformFontFamily
:
string
;
fontVariationAxes
?
:
FontVariationAxis
[
]
;
}
export
interface
CSSKeyframesRule
{
animationName
:
Value
;
keyframes
:
CSSKeyframeRule
[
]
;
}
export
interface
CSSKeyframeRule
{
styleSheetId
?
:
StyleSheetId
;
origin
:
StyleSheetOrigin
;
keyText
:
Value
;
style
:
CSSStyle
;
}
export
interface
StyleDeclarationEdit
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
interface
AddRuleRequest
{
styleSheetId
:
StyleSheetId
;
ruleText
:
string
;
location
:
SourceRange
;
}
export
interface
AddRuleResponse
{
rule
:
CSSRule
;
}
export
interface
CollectClassNamesRequest
{
styleSheetId
:
StyleSheetId
;
}
export
interface
CollectClassNamesResponse
{
classNames
:
string
[
]
;
}
export
interface
CreateStyleSheetRequest
{
frameId
:
Page
.
FrameId
;
}
export
interface
CreateStyleSheetResponse
{
styleSheetId
:
StyleSheetId
;
}
export
interface
ForcePseudoStateRequest
{
nodeId
:
DOM
.
NodeId
;
forcedPseudoClasses
:
string
[
]
;
}
export
interface
GetBackgroundColorsRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetBackgroundColorsResponse
{
backgroundColors
?
:
string
[
]
;
computedFontSize
?
:
string
;
computedFontWeight
?
:
string
;
}
export
interface
GetComputedStyleForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetComputedStyleForNodeResponse
{
computedStyle
:
CSSComputedStyleProperty
[
]
;
}
export
interface
GetInlineStylesForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetInlineStylesForNodeResponse
{
inlineStyle
?
:
CSSStyle
;
attributesStyle
?
:
CSSStyle
;
}
export
interface
GetMatchedStylesForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetMatchedStylesForNodeResponse
{
inlineStyle
?
:
CSSStyle
;
attributesStyle
?
:
CSSStyle
;
matchedCSSRules
?
:
RuleMatch
[
]
;
pseudoElements
?
:
PseudoElementMatches
[
]
;
inherited
?
:
InheritedStyleEntry
[
]
;
inheritedPseudoElements
?
:
InheritedPseudoElementMatches
[
]
;
cssKeyframesRules
?
:
CSSKeyframesRule
[
]
;
parentLayoutNodeId
?
:
DOM
.
NodeId
;
}
export
interface
GetMediaQueriesResponse
{
medias
:
CSSMedia
[
]
;
}
export
interface
GetPlatformFontsForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetPlatformFontsForNodeResponse
{
fonts
:
PlatformFontUsage
[
]
;
}
export
interface
GetStyleSheetTextRequest
{
styleSheetId
:
StyleSheetId
;
}
export
interface
GetStyleSheetTextResponse
{
text
:
string
;
}
export
interface
GetLayersForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetLayersForNodeResponse
{
rootLayer
:
CSSLayerData
;
}
export
interface
TrackComputedStyleUpdatesRequest
{
propertiesToTrack
:
CSSComputedStyleProperty
[
]
;
}
export
interface
TakeComputedStyleUpdatesResponse
{
nodeIds
:
DOM
.
NodeId
[
]
;
}
export
interface
SetEffectivePropertyValueForNodeRequest
{
nodeId
:
DOM
.
NodeId
;
propertyName
:
string
;
value
:
string
;
}
export
interface
SetKeyframeKeyRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
keyText
:
string
;
}
export
interface
SetKeyframeKeyResponse
{
keyText
:
Value
;
}
export
interface
SetMediaTextRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
interface
SetMediaTextResponse
{
media
:
CSSMedia
;
}
export
interface
SetContainerQueryTextRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
interface
SetContainerQueryTextResponse
{
containerQuery
:
CSSContainerQuery
;
}
export
interface
SetSupportsTextRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
interface
SetSupportsTextResponse
{
supports
:
CSSSupports
;
}
export
interface
SetScopeTextRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
text
:
string
;
}
export
interface
SetScopeTextResponse
{
scope
:
CSSScope
;
}
export
interface
SetRuleSelectorRequest
{
styleSheetId
:
StyleSheetId
;
range
:
SourceRange
;
selector
:
string
;
}
export
interface
SetRuleSelectorResponse
{
selectorList
:
SelectorList
;
}
export
interface
SetStyleSheetTextRequest
{
styleSheetId
:
StyleSheetId
;
text
:
string
;
}
export
interface
SetStyleSheetTextResponse
{
sourceMapURL
?
:
string
;
}
export
interface
SetStyleTextsRequest
{
edits
:
StyleDeclarationEdit
[
]
;
}
export
interface
SetStyleTextsResponse
{
styles
:
CSSStyle
[
]
;
}
export
interface
StopRuleUsageTrackingResponse
{
ruleUsage
:
RuleUsage
[
]
;
}
export
interface
TakeCoverageDeltaResponse
{
coverage
:
RuleUsage
[
]
;
timestamp
:
number
;
}
export
interface
SetLocalFontsEnabledRequest
{
enabled
:
boolean
;
}
export
interface
FontsUpdatedEvent
{
font
?
:
FontFace
;
}
export
interface
StyleSheetAddedEvent
{
header
:
CSSStyleSheetHeader
;
}
export
interface
StyleSheetChangedEvent
{
styleSheetId
:
StyleSheetId
;
}
export
interface
StyleSheetRemovedEvent
{
styleSheetId
:
StyleSheetId
;
}
}
export
namespace
CacheStorage
{
export
type
CacheId
=
string
;
export
type
CachedResponseType
=
(
'
basic
'
|
'
cors
'
|
'
default
'
|
'
error
'
|
'
opaqueResponse
'
|
'
opaqueRedirect
'
)
;
export
interface
DataEntry
{
requestURL
:
string
;
requestMethod
:
string
;
requestHeaders
:
Header
[
]
;
responseTime
:
number
;
responseStatus
:
integer
;
responseStatusText
:
string
;
responseType
:
CachedResponseType
;
responseHeaders
:
Header
[
]
;
}
export
interface
Cache
{
cacheId
:
CacheId
;
securityOrigin
:
string
;
storageKey
:
string
;
cacheName
:
string
;
}
export
interface
Header
{
name
:
string
;
value
:
string
;
}
export
interface
CachedResponse
{
body
:
string
;
}
export
interface
DeleteCacheRequest
{
cacheId
:
CacheId
;
}
export
interface
DeleteEntryRequest
{
cacheId
:
CacheId
;
request
:
string
;
}
export
interface
RequestCacheNamesRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
}
export
interface
RequestCacheNamesResponse
{
caches
:
Cache
[
]
;
}
export
interface
RequestCachedResponseRequest
{
cacheId
:
CacheId
;
requestURL
:
string
;
requestHeaders
:
Header
[
]
;
}
export
interface
RequestCachedResponseResponse
{
response
:
CachedResponse
;
}
export
interface
RequestEntriesRequest
{
cacheId
:
CacheId
;
skipCount
?
:
integer
;
pageSize
?
:
integer
;
pathFilter
?
:
string
;
}
export
interface
RequestEntriesResponse
{
cacheDataEntries
:
DataEntry
[
]
;
returnCount
:
number
;
}
}
export
namespace
Cast
{
export
interface
Sink
{
name
:
string
;
id
:
string
;
session
?
:
string
;
}
export
interface
EnableRequest
{
presentationUrl
?
:
string
;
}
export
interface
SetSinkToUseRequest
{
sinkName
:
string
;
}
export
interface
StartDesktopMirroringRequest
{
sinkName
:
string
;
}
export
interface
StartTabMirroringRequest
{
sinkName
:
string
;
}
export
interface
StopCastingRequest
{
sinkName
:
string
;
}
export
interface
SinksUpdatedEvent
{
sinks
:
Sink
[
]
;
}
export
interface
IssueUpdatedEvent
{
issueMessage
:
string
;
}
}
export
namespace
DOM
{
export
type
NodeId
=
integer
;
export
type
BackendNodeId
=
integer
;
export
interface
BackendNode
{
nodeType
:
integer
;
nodeName
:
string
;
backendNodeId
:
BackendNodeId
;
}
export
type
PseudoType
=
(
'
first
-
line
'
|
'
first
-
letter
'
|
'
before
'
|
'
after
'
|
'
marker
'
|
'
backdrop
'
|
'
selection
'
|
'
target
-
text
'
|
'
spelling
-
error
'
|
'
grammar
-
error
'
|
'
highlight
'
|
'
first
-
line
-
inherited
'
|
'
scrollbar
'
|
'
scrollbar
-
thumb
'
|
'
scrollbar
-
button
'
|
'
scrollbar
-
track
'
|
'
scrollbar
-
track
-
piece
'
|
'
scrollbar
-
corner
'
|
'
resizer
'
|
'
input
-
list
-
button
'
|
'
view
-
transition
'
|
'
view
-
transition
-
group
'
|
'
view
-
transition
-
image
-
pair
'
|
'
view
-
transition
-
old
'
|
'
view
-
transition
-
new
'
)
;
export
type
ShadowRootType
=
(
'
user
-
agent
'
|
'
open
'
|
'
closed
'
)
;
export
type
CompatibilityMode
=
(
'
QuirksMode
'
|
'
LimitedQuirksMode
'
|
'
NoQuirksMode
'
)
;
export
type
PhysicalAxes
=
(
'
Horizontal
'
|
'
Vertical
'
|
'
Both
'
)
;
export
type
LogicalAxes
=
(
'
Inline
'
|
'
Block
'
|
'
Both
'
)
;
export
interface
Node
{
nodeId
:
NodeId
;
parentId
?
:
NodeId
;
backendNodeId
:
BackendNodeId
;
nodeType
:
integer
;
nodeName
:
string
;
localName
:
string
;
nodeValue
:
string
;
childNodeCount
?
:
integer
;
children
?
:
Node
[
]
;
attributes
?
:
string
[
]
;
documentURL
?
:
string
;
baseURL
?
:
string
;
publicId
?
:
string
;
systemId
?
:
string
;
internalSubset
?
:
string
;
xmlVersion
?
:
string
;
name
?
:
string
;
value
?
:
string
;
pseudoType
?
:
PseudoType
;
pseudoIdentifier
?
:
string
;
shadowRootType
?
:
ShadowRootType
;
frameId
?
:
Page
.
FrameId
;
contentDocument
?
:
Node
;
shadowRoots
?
:
Node
[
]
;
templateContent
?
:
Node
;
pseudoElements
?
:
Node
[
]
;
importedDocument
?
:
Node
;
distributedNodes
?
:
BackendNode
[
]
;
isSVG
?
:
boolean
;
compatibilityMode
?
:
CompatibilityMode
;
assignedSlot
?
:
BackendNode
;
}
export
interface
RGBA
{
r
:
integer
;
g
:
integer
;
b
:
integer
;
a
?
:
number
;
}
export
type
Quad
=
number
[
]
;
export
interface
BoxModel
{
content
:
Quad
;
padding
:
Quad
;
border
:
Quad
;
margin
:
Quad
;
width
:
integer
;
height
:
integer
;
shapeOutside
?
:
ShapeOutsideInfo
;
}
export
interface
ShapeOutsideInfo
{
bounds
:
Quad
;
shape
:
any
[
]
;
marginShape
:
any
[
]
;
}
export
interface
Rect
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
}
export
interface
CSSComputedStyleProperty
{
name
:
string
;
value
:
string
;
}
export
interface
CollectClassNamesFromSubtreeRequest
{
nodeId
:
NodeId
;
}
export
interface
CollectClassNamesFromSubtreeResponse
{
classNames
:
string
[
]
;
}
export
interface
CopyToRequest
{
nodeId
:
NodeId
;
targetNodeId
:
NodeId
;
insertBeforeNodeId
?
:
NodeId
;
}
export
interface
CopyToResponse
{
nodeId
:
NodeId
;
}
export
interface
DescribeNodeRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
depth
?
:
integer
;
pierce
?
:
boolean
;
}
export
interface
DescribeNodeResponse
{
node
:
Node
;
}
export
interface
ScrollIntoViewIfNeededRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
rect
?
:
Rect
;
}
export
interface
DiscardSearchResultsRequest
{
searchId
:
string
;
}
export
const
enum
EnableRequestIncludeWhitespace
{
None
=
'
none
'
All
=
'
all
'
}
export
interface
EnableRequest
{
includeWhitespace
?
:
(
'
none
'
|
'
all
'
)
;
}
export
interface
FocusRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetAttributesRequest
{
nodeId
:
NodeId
;
}
export
interface
GetAttributesResponse
{
attributes
:
string
[
]
;
}
export
interface
GetBoxModelRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetBoxModelResponse
{
model
:
BoxModel
;
}
export
interface
GetContentQuadsRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetContentQuadsResponse
{
quads
:
Quad
[
]
;
}
export
interface
GetDocumentRequest
{
depth
?
:
integer
;
pierce
?
:
boolean
;
}
export
interface
GetDocumentResponse
{
root
:
Node
;
}
export
interface
GetFlattenedDocumentRequest
{
depth
?
:
integer
;
pierce
?
:
boolean
;
}
export
interface
GetFlattenedDocumentResponse
{
nodes
:
Node
[
]
;
}
export
interface
GetNodesForSubtreeByStyleRequest
{
nodeId
:
NodeId
;
computedStyles
:
CSSComputedStyleProperty
[
]
;
pierce
?
:
boolean
;
}
export
interface
GetNodesForSubtreeByStyleResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
GetNodeForLocationRequest
{
x
:
integer
;
y
:
integer
;
includeUserAgentShadowDOM
?
:
boolean
;
ignorePointerEventsNone
?
:
boolean
;
}
export
interface
GetNodeForLocationResponse
{
backendNodeId
:
BackendNodeId
;
frameId
:
Page
.
FrameId
;
nodeId
?
:
NodeId
;
}
export
interface
GetOuterHTMLRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetOuterHTMLResponse
{
outerHTML
:
string
;
}
export
interface
GetRelayoutBoundaryRequest
{
nodeId
:
NodeId
;
}
export
interface
GetRelayoutBoundaryResponse
{
nodeId
:
NodeId
;
}
export
interface
GetSearchResultsRequest
{
searchId
:
string
;
fromIndex
:
integer
;
toIndex
:
integer
;
}
export
interface
GetSearchResultsResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
MoveToRequest
{
nodeId
:
NodeId
;
targetNodeId
:
NodeId
;
insertBeforeNodeId
?
:
NodeId
;
}
export
interface
MoveToResponse
{
nodeId
:
NodeId
;
}
export
interface
PerformSearchRequest
{
query
:
string
;
includeUserAgentShadowDOM
?
:
boolean
;
}
export
interface
PerformSearchResponse
{
searchId
:
string
;
resultCount
:
integer
;
}
export
interface
PushNodeByPathToFrontendRequest
{
path
:
string
;
}
export
interface
PushNodeByPathToFrontendResponse
{
nodeId
:
NodeId
;
}
export
interface
PushNodesByBackendIdsToFrontendRequest
{
backendNodeIds
:
BackendNodeId
[
]
;
}
export
interface
PushNodesByBackendIdsToFrontendResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
QuerySelectorRequest
{
nodeId
:
NodeId
;
selector
:
string
;
}
export
interface
QuerySelectorResponse
{
nodeId
:
NodeId
;
}
export
interface
QuerySelectorAllRequest
{
nodeId
:
NodeId
;
selector
:
string
;
}
export
interface
QuerySelectorAllResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
GetTopLayerElementsResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
RemoveAttributeRequest
{
nodeId
:
NodeId
;
name
:
string
;
}
export
interface
RemoveNodeRequest
{
nodeId
:
NodeId
;
}
export
interface
RequestChildNodesRequest
{
nodeId
:
NodeId
;
depth
?
:
integer
;
pierce
?
:
boolean
;
}
export
interface
RequestNodeRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
interface
RequestNodeResponse
{
nodeId
:
NodeId
;
}
export
interface
ResolveNodeRequest
{
nodeId
?
:
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectGroup
?
:
string
;
executionContextId
?
:
Runtime
.
ExecutionContextId
;
}
export
interface
ResolveNodeResponse
{
object
:
Runtime
.
RemoteObject
;
}
export
interface
SetAttributeValueRequest
{
nodeId
:
NodeId
;
name
:
string
;
value
:
string
;
}
export
interface
SetAttributesAsTextRequest
{
nodeId
:
NodeId
;
text
:
string
;
name
?
:
string
;
}
export
interface
SetFileInputFilesRequest
{
files
:
string
[
]
;
nodeId
?
:
NodeId
;
backendNodeId
?
:
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
SetNodeStackTracesEnabledRequest
{
enable
:
boolean
;
}
export
interface
GetNodeStackTracesRequest
{
nodeId
:
NodeId
;
}
export
interface
GetNodeStackTracesResponse
{
creation
?
:
Runtime
.
StackTrace
;
}
export
interface
GetFileInfoRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
interface
GetFileInfoResponse
{
path
:
string
;
}
export
interface
SetInspectedNodeRequest
{
nodeId
:
NodeId
;
}
export
interface
SetNodeNameRequest
{
nodeId
:
NodeId
;
name
:
string
;
}
export
interface
SetNodeNameResponse
{
nodeId
:
NodeId
;
}
export
interface
SetNodeValueRequest
{
nodeId
:
NodeId
;
value
:
string
;
}
export
interface
SetOuterHTMLRequest
{
nodeId
:
NodeId
;
outerHTML
:
string
;
}
export
interface
GetFrameOwnerRequest
{
frameId
:
Page
.
FrameId
;
}
export
interface
GetFrameOwnerResponse
{
backendNodeId
:
BackendNodeId
;
nodeId
?
:
NodeId
;
}
export
interface
GetContainerForNodeRequest
{
nodeId
:
NodeId
;
containerName
?
:
string
;
physicalAxes
?
:
PhysicalAxes
;
logicalAxes
?
:
LogicalAxes
;
}
export
interface
GetContainerForNodeResponse
{
nodeId
?
:
NodeId
;
}
export
interface
GetQueryingDescendantsForContainerRequest
{
nodeId
:
NodeId
;
}
export
interface
GetQueryingDescendantsForContainerResponse
{
nodeIds
:
NodeId
[
]
;
}
export
interface
AttributeModifiedEvent
{
nodeId
:
NodeId
;
name
:
string
;
value
:
string
;
}
export
interface
AttributeRemovedEvent
{
nodeId
:
NodeId
;
name
:
string
;
}
export
interface
CharacterDataModifiedEvent
{
nodeId
:
NodeId
;
characterData
:
string
;
}
export
interface
ChildNodeCountUpdatedEvent
{
nodeId
:
NodeId
;
childNodeCount
:
integer
;
}
export
interface
ChildNodeInsertedEvent
{
parentNodeId
:
NodeId
;
previousNodeId
:
NodeId
;
node
:
Node
;
}
export
interface
ChildNodeRemovedEvent
{
parentNodeId
:
NodeId
;
nodeId
:
NodeId
;
}
export
interface
DistributedNodesUpdatedEvent
{
insertionPointId
:
NodeId
;
distributedNodes
:
BackendNode
[
]
;
}
export
interface
InlineStyleInvalidatedEvent
{
nodeIds
:
NodeId
[
]
;
}
export
interface
PseudoElementAddedEvent
{
parentId
:
NodeId
;
pseudoElement
:
Node
;
}
export
interface
PseudoElementRemovedEvent
{
parentId
:
NodeId
;
pseudoElementId
:
NodeId
;
}
export
interface
SetChildNodesEvent
{
parentId
:
NodeId
;
nodes
:
Node
[
]
;
}
export
interface
ShadowRootPoppedEvent
{
hostId
:
NodeId
;
rootId
:
NodeId
;
}
export
interface
ShadowRootPushedEvent
{
hostId
:
NodeId
;
root
:
Node
;
}
}
export
namespace
DOMDebugger
{
export
type
DOMBreakpointType
=
(
'
subtree
-
modified
'
|
'
attribute
-
modified
'
|
'
node
-
removed
'
)
;
export
type
CSPViolationType
=
(
'
trustedtype
-
sink
-
violation
'
|
'
trustedtype
-
policy
-
violation
'
)
;
export
interface
EventListener
{
type
:
string
;
useCapture
:
boolean
;
passive
:
boolean
;
once
:
boolean
;
scriptId
:
Runtime
.
ScriptId
;
lineNumber
:
integer
;
columnNumber
:
integer
;
handler
?
:
Runtime
.
RemoteObject
;
originalHandler
?
:
Runtime
.
RemoteObject
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
}
export
interface
GetEventListenersRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
depth
?
:
integer
;
pierce
?
:
boolean
;
}
export
interface
GetEventListenersResponse
{
listeners
:
EventListener
[
]
;
}
export
interface
RemoveDOMBreakpointRequest
{
nodeId
:
DOM
.
NodeId
;
type
:
DOMBreakpointType
;
}
export
interface
RemoveEventListenerBreakpointRequest
{
eventName
:
string
;
targetName
?
:
string
;
}
export
interface
RemoveInstrumentationBreakpointRequest
{
eventName
:
string
;
}
export
interface
RemoveXHRBreakpointRequest
{
url
:
string
;
}
export
interface
SetBreakOnCSPViolationRequest
{
violationTypes
:
CSPViolationType
[
]
;
}
export
interface
SetDOMBreakpointRequest
{
nodeId
:
DOM
.
NodeId
;
type
:
DOMBreakpointType
;
}
export
interface
SetEventListenerBreakpointRequest
{
eventName
:
string
;
targetName
?
:
string
;
}
export
interface
SetInstrumentationBreakpointRequest
{
eventName
:
string
;
}
export
interface
SetXHRBreakpointRequest
{
url
:
string
;
}
}
export
namespace
EventBreakpoints
{
export
interface
SetInstrumentationBreakpointRequest
{
eventName
:
string
;
}
export
interface
RemoveInstrumentationBreakpointRequest
{
eventName
:
string
;
}
}
export
namespace
DOMSnapshot
{
export
interface
DOMNode
{
nodeType
:
integer
;
nodeName
:
string
;
nodeValue
:
string
;
textValue
?
:
string
;
inputValue
?
:
string
;
inputChecked
?
:
boolean
;
optionSelected
?
:
boolean
;
backendNodeId
:
DOM
.
BackendNodeId
;
childNodeIndexes
?
:
integer
[
]
;
attributes
?
:
NameValue
[
]
;
pseudoElementIndexes
?
:
integer
[
]
;
layoutNodeIndex
?
:
integer
;
documentURL
?
:
string
;
baseURL
?
:
string
;
contentLanguage
?
:
string
;
documentEncoding
?
:
string
;
publicId
?
:
string
;
systemId
?
:
string
;
frameId
?
:
Page
.
FrameId
;
contentDocumentIndex
?
:
integer
;
pseudoType
?
:
DOM
.
PseudoType
;
shadowRootType
?
:
DOM
.
ShadowRootType
;
isClickable
?
:
boolean
;
eventListeners
?
:
DOMDebugger
.
EventListener
[
]
;
currentSourceURL
?
:
string
;
originURL
?
:
string
;
scrollOffsetX
?
:
number
;
scrollOffsetY
?
:
number
;
}
export
interface
InlineTextBox
{
boundingBox
:
DOM
.
Rect
;
startCharacterIndex
:
integer
;
numCharacters
:
integer
;
}
export
interface
LayoutTreeNode
{
domNodeIndex
:
integer
;
boundingBox
:
DOM
.
Rect
;
layoutText
?
:
string
;
inlineTextNodes
?
:
InlineTextBox
[
]
;
styleIndex
?
:
integer
;
paintOrder
?
:
integer
;
isStackingContext
?
:
boolean
;
}
export
interface
ComputedStyle
{
properties
:
NameValue
[
]
;
}
export
interface
NameValue
{
name
:
string
;
value
:
string
;
}
export
type
StringIndex
=
integer
;
export
type
ArrayOfStrings
=
StringIndex
[
]
;
export
interface
RareStringData
{
index
:
integer
[
]
;
value
:
StringIndex
[
]
;
}
export
interface
RareBooleanData
{
index
:
integer
[
]
;
}
export
interface
RareIntegerData
{
index
:
integer
[
]
;
value
:
integer
[
]
;
}
export
type
Rectangle
=
number
[
]
;
export
interface
DocumentSnapshot
{
documentURL
:
StringIndex
;
title
:
StringIndex
;
baseURL
:
StringIndex
;
contentLanguage
:
StringIndex
;
encodingName
:
StringIndex
;
publicId
:
StringIndex
;
systemId
:
StringIndex
;
frameId
:
StringIndex
;
nodes
:
NodeTreeSnapshot
;
layout
:
LayoutTreeSnapshot
;
textBoxes
:
TextBoxSnapshot
;
scrollOffsetX
?
:
number
;
scrollOffsetY
?
:
number
;
contentWidth
?
:
number
;
contentHeight
?
:
number
;
}
export
interface
NodeTreeSnapshot
{
parentIndex
?
:
integer
[
]
;
nodeType
?
:
integer
[
]
;
shadowRootType
?
:
RareStringData
;
nodeName
?
:
StringIndex
[
]
;
nodeValue
?
:
StringIndex
[
]
;
backendNodeId
?
:
DOM
.
BackendNodeId
[
]
;
attributes
?
:
ArrayOfStrings
[
]
;
textValue
?
:
RareStringData
;
inputValue
?
:
RareStringData
;
inputChecked
?
:
RareBooleanData
;
optionSelected
?
:
RareBooleanData
;
contentDocumentIndex
?
:
RareIntegerData
;
pseudoType
?
:
RareStringData
;
pseudoIdentifier
?
:
RareStringData
;
isClickable
?
:
RareBooleanData
;
currentSourceURL
?
:
RareStringData
;
originURL
?
:
RareStringData
;
}
export
interface
LayoutTreeSnapshot
{
nodeIndex
:
integer
[
]
;
styles
:
ArrayOfStrings
[
]
;
bounds
:
Rectangle
[
]
;
text
:
StringIndex
[
]
;
stackingContexts
:
RareBooleanData
;
paintOrders
?
:
integer
[
]
;
offsetRects
?
:
Rectangle
[
]
;
scrollRects
?
:
Rectangle
[
]
;
clientRects
?
:
Rectangle
[
]
;
blendedBackgroundColors
?
:
StringIndex
[
]
;
textColorOpacities
?
:
number
[
]
;
}
export
interface
TextBoxSnapshot
{
layoutIndex
:
integer
[
]
;
bounds
:
Rectangle
[
]
;
start
:
integer
[
]
;
length
:
integer
[
]
;
}
export
interface
GetSnapshotRequest
{
computedStyleWhitelist
:
string
[
]
;
includeEventListeners
?
:
boolean
;
includePaintOrder
?
:
boolean
;
includeUserAgentShadowTree
?
:
boolean
;
}
export
interface
GetSnapshotResponse
{
domNodes
:
DOMNode
[
]
;
layoutTreeNodes
:
LayoutTreeNode
[
]
;
computedStyles
:
ComputedStyle
[
]
;
}
export
interface
CaptureSnapshotRequest
{
computedStyles
:
string
[
]
;
includePaintOrder
?
:
boolean
;
includeDOMRects
?
:
boolean
;
includeBlendedBackgroundColors
?
:
boolean
;
includeTextColorOpacities
?
:
boolean
;
}
export
interface
CaptureSnapshotResponse
{
documents
:
DocumentSnapshot
[
]
;
strings
:
string
[
]
;
}
}
export
namespace
DOMStorage
{
export
type
SerializedStorageKey
=
string
;
export
interface
StorageId
{
securityOrigin
?
:
string
;
storageKey
?
:
SerializedStorageKey
;
isLocalStorage
:
boolean
;
}
export
type
Item
=
string
[
]
;
export
interface
ClearRequest
{
storageId
:
StorageId
;
}
export
interface
GetDOMStorageItemsRequest
{
storageId
:
StorageId
;
}
export
interface
GetDOMStorageItemsResponse
{
entries
:
Item
[
]
;
}
export
interface
RemoveDOMStorageItemRequest
{
storageId
:
StorageId
;
key
:
string
;
}
export
interface
SetDOMStorageItemRequest
{
storageId
:
StorageId
;
key
:
string
;
value
:
string
;
}
export
interface
DomStorageItemAddedEvent
{
storageId
:
StorageId
;
key
:
string
;
newValue
:
string
;
}
export
interface
DomStorageItemRemovedEvent
{
storageId
:
StorageId
;
key
:
string
;
}
export
interface
DomStorageItemUpdatedEvent
{
storageId
:
StorageId
;
key
:
string
;
oldValue
:
string
;
newValue
:
string
;
}
export
interface
DomStorageItemsClearedEvent
{
storageId
:
StorageId
;
}
}
export
namespace
Database
{
export
type
DatabaseId
=
string
;
export
interface
Database
{
id
:
DatabaseId
;
domain
:
string
;
name
:
string
;
version
:
string
;
}
export
interface
Error
{
message
:
string
;
code
:
integer
;
}
export
interface
ExecuteSQLRequest
{
databaseId
:
DatabaseId
;
query
:
string
;
}
export
interface
ExecuteSQLResponse
{
columnNames
?
:
string
[
]
;
values
?
:
any
[
]
;
sqlError
?
:
Error
;
}
export
interface
GetDatabaseTableNamesRequest
{
databaseId
:
DatabaseId
;
}
export
interface
GetDatabaseTableNamesResponse
{
tableNames
:
string
[
]
;
}
export
interface
AddDatabaseEvent
{
database
:
Database
;
}
}
export
namespace
DeviceOrientation
{
export
interface
SetDeviceOrientationOverrideRequest
{
alpha
:
number
;
beta
:
number
;
gamma
:
number
;
}
}
export
namespace
Emulation
{
export
const
enum
ScreenOrientationType
{
PortraitPrimary
=
'
portraitPrimary
'
PortraitSecondary
=
'
portraitSecondary
'
LandscapePrimary
=
'
landscapePrimary
'
LandscapeSecondary
=
'
landscapeSecondary
'
}
export
interface
ScreenOrientation
{
type
:
(
'
portraitPrimary
'
|
'
portraitSecondary
'
|
'
landscapePrimary
'
|
'
landscapeSecondary
'
)
;
angle
:
integer
;
}
export
const
enum
DisplayFeatureOrientation
{
Vertical
=
'
vertical
'
Horizontal
=
'
horizontal
'
}
export
interface
DisplayFeature
{
orientation
:
(
'
vertical
'
|
'
horizontal
'
)
;
offset
:
integer
;
maskLength
:
integer
;
}
export
interface
MediaFeature
{
name
:
string
;
value
:
string
;
}
export
type
VirtualTimePolicy
=
(
'
advance
'
|
'
pause
'
|
'
pauseIfNetworkFetchesPending
'
)
;
export
interface
UserAgentBrandVersion
{
brand
:
string
;
version
:
string
;
}
export
interface
UserAgentMetadata
{
brands
?
:
UserAgentBrandVersion
[
]
;
fullVersionList
?
:
UserAgentBrandVersion
[
]
;
fullVersion
?
:
string
;
platform
:
string
;
platformVersion
:
string
;
architecture
:
string
;
model
:
string
;
mobile
:
boolean
;
bitness
?
:
string
;
wow64
?
:
boolean
;
}
export
type
DisabledImageType
=
(
'
avif
'
|
'
webp
'
)
;
export
interface
CanEmulateResponse
{
result
:
boolean
;
}
export
interface
SetFocusEmulationEnabledRequest
{
enabled
:
boolean
;
}
export
interface
SetAutoDarkModeOverrideRequest
{
enabled
?
:
boolean
;
}
export
interface
SetCPUThrottlingRateRequest
{
rate
:
number
;
}
export
interface
SetDefaultBackgroundColorOverrideRequest
{
color
?
:
DOM
.
RGBA
;
}
export
interface
SetDeviceMetricsOverrideRequest
{
width
:
integer
;
height
:
integer
;
deviceScaleFactor
:
number
;
mobile
:
boolean
;
scale
?
:
number
;
screenWidth
?
:
integer
;
screenHeight
?
:
integer
;
positionX
?
:
integer
;
positionY
?
:
integer
;
dontSetVisibleSize
?
:
boolean
;
screenOrientation
?
:
ScreenOrientation
;
viewport
?
:
Page
.
Viewport
;
displayFeature
?
:
DisplayFeature
;
}
export
interface
SetScrollbarsHiddenRequest
{
hidden
:
boolean
;
}
export
interface
SetDocumentCookieDisabledRequest
{
disabled
:
boolean
;
}
export
const
enum
SetEmitTouchEventsForMouseRequestConfiguration
{
Mobile
=
'
mobile
'
Desktop
=
'
desktop
'
}
export
interface
SetEmitTouchEventsForMouseRequest
{
enabled
:
boolean
;
configuration
?
:
(
'
mobile
'
|
'
desktop
'
)
;
}
export
interface
SetEmulatedMediaRequest
{
media
?
:
string
;
features
?
:
MediaFeature
[
]
;
}
export
const
enum
SetEmulatedVisionDeficiencyRequestType
{
None
=
'
none
'
Achromatopsia
=
'
achromatopsia
'
BlurredVision
=
'
blurredVision
'
Deuteranopia
=
'
deuteranopia
'
Protanopia
=
'
protanopia
'
Tritanopia
=
'
tritanopia
'
}
export
interface
SetEmulatedVisionDeficiencyRequest
{
type
:
(
'
none
'
|
'
achromatopsia
'
|
'
blurredVision
'
|
'
deuteranopia
'
|
'
protanopia
'
|
'
tritanopia
'
)
;
}
export
interface
SetGeolocationOverrideRequest
{
latitude
?
:
number
;
longitude
?
:
number
;
accuracy
?
:
number
;
}
export
interface
SetIdleOverrideRequest
{
isUserActive
:
boolean
;
isScreenUnlocked
:
boolean
;
}
export
interface
SetNavigatorOverridesRequest
{
platform
:
string
;
}
export
interface
SetPageScaleFactorRequest
{
pageScaleFactor
:
number
;
}
export
interface
SetScriptExecutionDisabledRequest
{
value
:
boolean
;
}
export
interface
SetTouchEmulationEnabledRequest
{
enabled
:
boolean
;
maxTouchPoints
?
:
integer
;
}
export
interface
SetVirtualTimePolicyRequest
{
policy
:
VirtualTimePolicy
;
budget
?
:
number
;
maxVirtualTimeTaskStarvationCount
?
:
integer
;
initialVirtualTime
?
:
Network
.
TimeSinceEpoch
;
}
export
interface
SetVirtualTimePolicyResponse
{
virtualTimeTicksBase
:
number
;
}
export
interface
SetLocaleOverrideRequest
{
locale
?
:
string
;
}
export
interface
SetTimezoneOverrideRequest
{
timezoneId
:
string
;
}
export
interface
SetVisibleSizeRequest
{
width
:
integer
;
height
:
integer
;
}
export
interface
SetDisabledImageTypesRequest
{
imageTypes
:
DisabledImageType
[
]
;
}
export
interface
SetHardwareConcurrencyOverrideRequest
{
hardwareConcurrency
:
integer
;
}
export
interface
SetUserAgentOverrideRequest
{
userAgent
:
string
;
acceptLanguage
?
:
string
;
platform
?
:
string
;
userAgentMetadata
?
:
UserAgentMetadata
;
}
export
interface
SetAutomationOverrideRequest
{
enabled
:
boolean
;
}
}
export
namespace
HeadlessExperimental
{
export
const
enum
ScreenshotParamsFormat
{
Jpeg
=
'
jpeg
'
Png
=
'
png
'
Webp
=
'
webp
'
}
export
interface
ScreenshotParams
{
format
?
:
(
'
jpeg
'
|
'
png
'
|
'
webp
'
)
;
quality
?
:
integer
;
optimizeForSpeed
?
:
boolean
;
}
export
interface
BeginFrameRequest
{
frameTimeTicks
?
:
number
;
interval
?
:
number
;
noDisplayUpdates
?
:
boolean
;
screenshot
?
:
ScreenshotParams
;
}
export
interface
BeginFrameResponse
{
hasDamage
:
boolean
;
screenshotData
?
:
string
;
}
}
export
namespace
IO
{
export
type
StreamHandle
=
string
;
export
interface
CloseRequest
{
handle
:
StreamHandle
;
}
export
interface
ReadRequest
{
handle
:
StreamHandle
;
offset
?
:
integer
;
size
?
:
integer
;
}
export
interface
ReadResponse
{
base64Encoded
?
:
boolean
;
data
:
string
;
eof
:
boolean
;
}
export
interface
ResolveBlobRequest
{
objectId
:
Runtime
.
RemoteObjectId
;
}
export
interface
ResolveBlobResponse
{
uuid
:
string
;
}
}
export
namespace
IndexedDB
{
export
interface
DatabaseWithObjectStores
{
name
:
string
;
version
:
number
;
objectStores
:
ObjectStore
[
]
;
}
export
interface
ObjectStore
{
name
:
string
;
keyPath
:
KeyPath
;
autoIncrement
:
boolean
;
indexes
:
ObjectStoreIndex
[
]
;
}
export
interface
ObjectStoreIndex
{
name
:
string
;
keyPath
:
KeyPath
;
unique
:
boolean
;
multiEntry
:
boolean
;
}
export
const
enum
KeyType
{
Number
=
'
number
'
String
=
'
string
'
Date
=
'
date
'
Array
=
'
array
'
}
export
interface
Key
{
type
:
(
'
number
'
|
'
string
'
|
'
date
'
|
'
array
'
)
;
number
?
:
number
;
string
?
:
string
;
date
?
:
number
;
array
?
:
Key
[
]
;
}
export
interface
KeyRange
{
lower
?
:
Key
;
upper
?
:
Key
;
lowerOpen
:
boolean
;
upperOpen
:
boolean
;
}
export
interface
DataEntry
{
key
:
Runtime
.
RemoteObject
;
primaryKey
:
Runtime
.
RemoteObject
;
value
:
Runtime
.
RemoteObject
;
}
export
const
enum
KeyPathType
{
Null
=
'
null
'
String
=
'
string
'
Array
=
'
array
'
}
export
interface
KeyPath
{
type
:
(
'
null
'
|
'
string
'
|
'
array
'
)
;
string
?
:
string
;
array
?
:
string
[
]
;
}
export
interface
ClearObjectStoreRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
interface
DeleteDatabaseRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
}
export
interface
DeleteObjectStoreEntriesRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
keyRange
:
KeyRange
;
}
export
interface
RequestDataRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
indexName
:
string
;
skipCount
:
integer
;
pageSize
:
integer
;
keyRange
?
:
KeyRange
;
}
export
interface
RequestDataResponse
{
objectStoreDataEntries
:
DataEntry
[
]
;
hasMore
:
boolean
;
}
export
interface
GetMetadataRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
interface
GetMetadataResponse
{
entriesCount
:
number
;
keyGeneratorValue
:
number
;
}
export
interface
RequestDatabaseRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
databaseName
:
string
;
}
export
interface
RequestDatabaseResponse
{
databaseWithObjectStores
:
DatabaseWithObjectStores
;
}
export
interface
RequestDatabaseNamesRequest
{
securityOrigin
?
:
string
;
storageKey
?
:
string
;
}
export
interface
RequestDatabaseNamesResponse
{
databaseNames
:
string
[
]
;
}
}
export
namespace
Input
{
export
interface
TouchPoint
{
x
:
number
;
y
:
number
;
radiusX
?
:
number
;
radiusY
?
:
number
;
rotationAngle
?
:
number
;
force
?
:
number
;
tangentialPressure
?
:
number
;
tiltX
?
:
integer
;
tiltY
?
:
integer
;
twist
?
:
integer
;
id
?
:
number
;
}
export
type
GestureSourceType
=
(
'
default
'
|
'
touch
'
|
'
mouse
'
)
;
export
type
MouseButton
=
(
'
none
'
|
'
left
'
|
'
middle
'
|
'
right
'
|
'
back
'
|
'
forward
'
)
;
export
type
TimeSinceEpoch
=
number
;
export
interface
DragDataItem
{
mimeType
:
string
;
data
:
string
;
title
?
:
string
;
baseURL
?
:
string
;
}
export
interface
DragData
{
items
:
DragDataItem
[
]
;
files
?
:
string
[
]
;
dragOperationsMask
:
integer
;
}
export
const
enum
DispatchDragEventRequestType
{
DragEnter
=
'
dragEnter
'
DragOver
=
'
dragOver
'
Drop
=
'
drop
'
DragCancel
=
'
dragCancel
'
}
export
interface
DispatchDragEventRequest
{
type
:
(
'
dragEnter
'
|
'
dragOver
'
|
'
drop
'
|
'
dragCancel
'
)
;
x
:
number
;
y
:
number
;
data
:
DragData
;
modifiers
?
:
integer
;
}
export
const
enum
DispatchKeyEventRequestType
{
KeyDown
=
'
keyDown
'
KeyUp
=
'
keyUp
'
RawKeyDown
=
'
rawKeyDown
'
Char
=
'
char
'
}
export
interface
DispatchKeyEventRequest
{
type
:
(
'
keyDown
'
|
'
keyUp
'
|
'
rawKeyDown
'
|
'
char
'
)
;
modifiers
?
:
integer
;
timestamp
?
:
TimeSinceEpoch
;
text
?
:
string
;
unmodifiedText
?
:
string
;
keyIdentifier
?
:
string
;
code
?
:
string
;
key
?
:
string
;
windowsVirtualKeyCode
?
:
integer
;
nativeVirtualKeyCode
?
:
integer
;
autoRepeat
?
:
boolean
;
isKeypad
?
:
boolean
;
isSystemKey
?
:
boolean
;
location
?
:
integer
;
commands
?
:
string
[
]
;
}
export
interface
InsertTextRequest
{
text
:
string
;
}
export
interface
ImeSetCompositionRequest
{
text
:
string
;
selectionStart
:
integer
;
selectionEnd
:
integer
;
replacementStart
?
:
integer
;
replacementEnd
?
:
integer
;
}
export
const
enum
DispatchMouseEventRequestType
{
MousePressed
=
'
mousePressed
'
MouseReleased
=
'
mouseReleased
'
MouseMoved
=
'
mouseMoved
'
MouseWheel
=
'
mouseWheel
'
}
export
const
enum
DispatchMouseEventRequestPointerType
{
Mouse
=
'
mouse
'
Pen
=
'
pen
'
}
export
interface
DispatchMouseEventRequest
{
type
:
(
'
mousePressed
'
|
'
mouseReleased
'
|
'
mouseMoved
'
|
'
mouseWheel
'
)
;
x
:
number
;
y
:
number
;
modifiers
?
:
integer
;
timestamp
?
:
TimeSinceEpoch
;
button
?
:
MouseButton
;
buttons
?
:
integer
;
clickCount
?
:
integer
;
force
?
:
number
;
tangentialPressure
?
:
number
;
tiltX
?
:
integer
;
tiltY
?
:
integer
;
twist
?
:
integer
;
deltaX
?
:
number
;
deltaY
?
:
number
;
pointerType
?
:
(
'
mouse
'
|
'
pen
'
)
;
}
export
const
enum
DispatchTouchEventRequestType
{
TouchStart
=
'
touchStart
'
TouchEnd
=
'
touchEnd
'
TouchMove
=
'
touchMove
'
TouchCancel
=
'
touchCancel
'
}
export
interface
DispatchTouchEventRequest
{
type
:
(
'
touchStart
'
|
'
touchEnd
'
|
'
touchMove
'
|
'
touchCancel
'
)
;
touchPoints
:
TouchPoint
[
]
;
modifiers
?
:
integer
;
timestamp
?
:
TimeSinceEpoch
;
}
export
const
enum
EmulateTouchFromMouseEventRequestType
{
MousePressed
=
'
mousePressed
'
MouseReleased
=
'
mouseReleased
'
MouseMoved
=
'
mouseMoved
'
MouseWheel
=
'
mouseWheel
'
}
export
interface
EmulateTouchFromMouseEventRequest
{
type
:
(
'
mousePressed
'
|
'
mouseReleased
'
|
'
mouseMoved
'
|
'
mouseWheel
'
)
;
x
:
integer
;
y
:
integer
;
button
:
MouseButton
;
timestamp
?
:
TimeSinceEpoch
;
deltaX
?
:
number
;
deltaY
?
:
number
;
modifiers
?
:
integer
;
clickCount
?
:
integer
;
}
export
interface
SetIgnoreInputEventsRequest
{
ignore
:
boolean
;
}
export
interface
SetInterceptDragsRequest
{
enabled
:
boolean
;
}
export
interface
SynthesizePinchGestureRequest
{
x
:
number
;
y
:
number
;
scaleFactor
:
number
;
relativeSpeed
?
:
integer
;
gestureSourceType
?
:
GestureSourceType
;
}
export
interface
SynthesizeScrollGestureRequest
{
x
:
number
;
y
:
number
;
xDistance
?
:
number
;
yDistance
?
:
number
;
xOverscroll
?
:
number
;
yOverscroll
?
:
number
;
preventFling
?
:
boolean
;
speed
?
:
integer
;
gestureSourceType
?
:
GestureSourceType
;
repeatCount
?
:
integer
;
repeatDelayMs
?
:
integer
;
interactionMarkerName
?
:
string
;
}
export
interface
SynthesizeTapGestureRequest
{
x
:
number
;
y
:
number
;
duration
?
:
integer
;
tapCount
?
:
integer
;
gestureSourceType
?
:
GestureSourceType
;
}
export
interface
DragInterceptedEvent
{
data
:
DragData
;
}
}
export
namespace
Inspector
{
export
interface
DetachedEvent
{
reason
:
string
;
}
}
export
namespace
LayerTree
{
export
type
LayerId
=
string
;
export
type
SnapshotId
=
string
;
export
const
enum
ScrollRectType
{
RepaintsOnScroll
=
'
RepaintsOnScroll
'
TouchEventHandler
=
'
TouchEventHandler
'
WheelEventHandler
=
'
WheelEventHandler
'
}
export
interface
ScrollRect
{
rect
:
DOM
.
Rect
;
type
:
(
'
RepaintsOnScroll
'
|
'
TouchEventHandler
'
|
'
WheelEventHandler
'
)
;
}
export
interface
StickyPositionConstraint
{
stickyBoxRect
:
DOM
.
Rect
;
containingBlockRect
:
DOM
.
Rect
;
nearestLayerShiftingStickyBox
?
:
LayerId
;
nearestLayerShiftingContainingBlock
?
:
LayerId
;
}
export
interface
PictureTile
{
x
:
number
;
y
:
number
;
picture
:
string
;
}
export
interface
Layer
{
layerId
:
LayerId
;
parentLayerId
?
:
LayerId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
offsetX
:
number
;
offsetY
:
number
;
width
:
number
;
height
:
number
;
transform
?
:
number
[
]
;
anchorX
?
:
number
;
anchorY
?
:
number
;
anchorZ
?
:
number
;
paintCount
:
integer
;
drawsContent
:
boolean
;
invisible
?
:
boolean
;
scrollRects
?
:
ScrollRect
[
]
;
stickyPositionConstraint
?
:
StickyPositionConstraint
;
}
export
type
PaintProfile
=
number
[
]
;
export
interface
CompositingReasonsRequest
{
layerId
:
LayerId
;
}
export
interface
CompositingReasonsResponse
{
compositingReasons
:
string
[
]
;
compositingReasonIds
:
string
[
]
;
}
export
interface
LoadSnapshotRequest
{
tiles
:
PictureTile
[
]
;
}
export
interface
LoadSnapshotResponse
{
snapshotId
:
SnapshotId
;
}
export
interface
MakeSnapshotRequest
{
layerId
:
LayerId
;
}
export
interface
MakeSnapshotResponse
{
snapshotId
:
SnapshotId
;
}
export
interface
ProfileSnapshotRequest
{
snapshotId
:
SnapshotId
;
minRepeatCount
?
:
integer
;
minDuration
?
:
number
;
clipRect
?
:
DOM
.
Rect
;
}
export
interface
ProfileSnapshotResponse
{
timings
:
PaintProfile
[
]
;
}
export
interface
ReleaseSnapshotRequest
{
snapshotId
:
SnapshotId
;
}
export
interface
ReplaySnapshotRequest
{
snapshotId
:
SnapshotId
;
fromStep
?
:
integer
;
toStep
?
:
integer
;
scale
?
:
number
;
}
export
interface
ReplaySnapshotResponse
{
dataURL
:
string
;
}
export
interface
SnapshotCommandLogRequest
{
snapshotId
:
SnapshotId
;
}
export
interface
SnapshotCommandLogResponse
{
commandLog
:
any
[
]
;
}
export
interface
LayerPaintedEvent
{
layerId
:
LayerId
;
clip
:
DOM
.
Rect
;
}
export
interface
LayerTreeDidChangeEvent
{
layers
?
:
Layer
[
]
;
}
}
export
namespace
Log
{
export
const
enum
LogEntrySource
{
XML
=
'
xml
'
Javascript
=
'
javascript
'
Network
=
'
network
'
Storage
=
'
storage
'
Appcache
=
'
appcache
'
Rendering
=
'
rendering
'
Security
=
'
security
'
Deprecation
=
'
deprecation
'
Worker
=
'
worker
'
Violation
=
'
violation
'
Intervention
=
'
intervention
'
Recommendation
=
'
recommendation
'
Other
=
'
other
'
}
export
const
enum
LogEntryLevel
{
Verbose
=
'
verbose
'
Info
=
'
info
'
Warning
=
'
warning
'
Error
=
'
error
'
}
export
const
enum
LogEntryCategory
{
Cors
=
'
cors
'
}
export
interface
LogEntry
{
source
:
(
'
xml
'
|
'
javascript
'
|
'
network
'
|
'
storage
'
|
'
appcache
'
|
'
rendering
'
|
'
security
'
|
'
deprecation
'
|
'
worker
'
|
'
violation
'
|
'
intervention
'
|
'
recommendation
'
|
'
other
'
)
;
level
:
(
'
verbose
'
|
'
info
'
|
'
warning
'
|
'
error
'
)
;
text
:
string
;
category
?
:
(
'
cors
'
)
;
timestamp
:
Runtime
.
Timestamp
;
url
?
:
string
;
lineNumber
?
:
integer
;
stackTrace
?
:
Runtime
.
StackTrace
;
networkRequestId
?
:
Network
.
RequestId
;
workerId
?
:
string
;
args
?
:
Runtime
.
RemoteObject
[
]
;
}
export
const
enum
ViolationSettingName
{
LongTask
=
'
longTask
'
LongLayout
=
'
longLayout
'
BlockedEvent
=
'
blockedEvent
'
BlockedParser
=
'
blockedParser
'
DiscouragedAPIUse
=
'
discouragedAPIUse
'
Handler
=
'
handler
'
RecurringHandler
=
'
recurringHandler
'
}
export
interface
ViolationSetting
{
name
:
(
'
longTask
'
|
'
longLayout
'
|
'
blockedEvent
'
|
'
blockedParser
'
|
'
discouragedAPIUse
'
|
'
handler
'
|
'
recurringHandler
'
)
;
threshold
:
number
;
}
export
interface
StartViolationsReportRequest
{
config
:
ViolationSetting
[
]
;
}
export
interface
EntryAddedEvent
{
entry
:
LogEntry
;
}
}
export
namespace
Memory
{
export
type
PressureLevel
=
(
'
moderate
'
|
'
critical
'
)
;
export
interface
SamplingProfileNode
{
size
:
number
;
total
:
number
;
stack
:
string
[
]
;
}
export
interface
SamplingProfile
{
samples
:
SamplingProfileNode
[
]
;
modules
:
Module
[
]
;
}
export
interface
Module
{
name
:
string
;
uuid
:
string
;
baseAddress
:
string
;
size
:
number
;
}
export
interface
GetDOMCountersResponse
{
documents
:
integer
;
nodes
:
integer
;
jsEventListeners
:
integer
;
}
export
interface
SetPressureNotificationsSuppressedRequest
{
suppressed
:
boolean
;
}
export
interface
SimulatePressureNotificationRequest
{
level
:
PressureLevel
;
}
export
interface
StartSamplingRequest
{
samplingInterval
?
:
integer
;
suppressRandomness
?
:
boolean
;
}
export
interface
GetAllTimeSamplingProfileResponse
{
profile
:
SamplingProfile
;
}
export
interface
GetBrowserSamplingProfileResponse
{
profile
:
SamplingProfile
;
}
export
interface
GetSamplingProfileResponse
{
profile
:
SamplingProfile
;
}
}
export
namespace
Network
{
export
type
ResourceType
=
(
'
Document
'
|
'
Stylesheet
'
|
'
Image
'
|
'
Media
'
|
'
Font
'
|
'
Script
'
|
'
TextTrack
'
|
'
XHR
'
|
'
Fetch
'
|
'
Prefetch
'
|
'
EventSource
'
|
'
WebSocket
'
|
'
Manifest
'
|
'
SignedExchange
'
|
'
Ping
'
|
'
CSPViolationReport
'
|
'
Preflight
'
|
'
Other
'
)
;
export
type
LoaderId
=
string
;
export
type
RequestId
=
string
;
export
type
InterceptionId
=
string
;
export
type
ErrorReason
=
(
'
Failed
'
|
'
Aborted
'
|
'
TimedOut
'
|
'
AccessDenied
'
|
'
ConnectionClosed
'
|
'
ConnectionReset
'
|
'
ConnectionRefused
'
|
'
ConnectionAborted
'
|
'
ConnectionFailed
'
|
'
NameNotResolved
'
|
'
InternetDisconnected
'
|
'
AddressUnreachable
'
|
'
BlockedByClient
'
|
'
BlockedByResponse
'
)
;
export
type
TimeSinceEpoch
=
number
;
export
type
MonotonicTime
=
number
;
export
interface
Headers
{
[
key
:
string
]
:
string
;
}
export
type
ConnectionType
=
(
'
none
'
|
'
cellular2g
'
|
'
cellular3g
'
|
'
cellular4g
'
|
'
bluetooth
'
|
'
ethernet
'
|
'
wifi
'
|
'
wimax
'
|
'
other
'
)
;
export
type
CookieSameSite
=
(
'
Strict
'
|
'
Lax
'
|
'
None
'
)
;
export
type
CookiePriority
=
(
'
Low
'
|
'
Medium
'
|
'
High
'
)
;
export
type
CookieSourceScheme
=
(
'
Unset
'
|
'
NonSecure
'
|
'
Secure
'
)
;
export
interface
ResourceTiming
{
requestTime
:
number
;
proxyStart
:
number
;
proxyEnd
:
number
;
dnsStart
:
number
;
dnsEnd
:
number
;
connectStart
:
number
;
connectEnd
:
number
;
sslStart
:
number
;
sslEnd
:
number
;
workerStart
:
number
;
workerReady
:
number
;
workerFetchStart
:
number
;
workerRespondWithSettled
:
number
;
sendStart
:
number
;
sendEnd
:
number
;
pushStart
:
number
;
pushEnd
:
number
;
receiveHeadersEnd
:
number
;
}
export
type
ResourcePriority
=
(
'
VeryLow
'
|
'
Low
'
|
'
Medium
'
|
'
High
'
|
'
VeryHigh
'
)
;
export
interface
PostDataEntry
{
bytes
?
:
string
;
}
export
const
enum
RequestReferrerPolicy
{
UnsafeUrl
=
'
unsafe
-
url
'
NoReferrerWhenDowngrade
=
'
no
-
referrer
-
when
-
downgrade
'
NoReferrer
=
'
no
-
referrer
'
Origin
=
'
origin
'
OriginWhenCrossOrigin
=
'
origin
-
when
-
cross
-
origin
'
SameOrigin
=
'
same
-
origin
'
StrictOrigin
=
'
strict
-
origin
'
StrictOriginWhenCrossOrigin
=
'
strict
-
origin
-
when
-
cross
-
origin
'
}
export
interface
Request
{
url
:
string
;
urlFragment
?
:
string
;
method
:
string
;
headers
:
Headers
;
postData
?
:
string
;
hasPostData
?
:
boolean
;
postDataEntries
?
:
PostDataEntry
[
]
;
mixedContentType
?
:
Security
.
MixedContentType
;
initialPriority
:
ResourcePriority
;
referrerPolicy
:
(
'
unsafe
-
url
'
|
'
no
-
referrer
-
when
-
downgrade
'
|
'
no
-
referrer
'
|
'
origin
'
|
'
origin
-
when
-
cross
-
origin
'
|
'
same
-
origin
'
|
'
strict
-
origin
'
|
'
strict
-
origin
-
when
-
cross
-
origin
'
)
;
isLinkPreload
?
:
boolean
;
trustTokenParams
?
:
TrustTokenParams
;
isSameSite
?
:
boolean
;
}
export
interface
SignedCertificateTimestamp
{
status
:
string
;
origin
:
string
;
logDescription
:
string
;
logId
:
string
;
timestamp
:
number
;
hashAlgorithm
:
string
;
signatureAlgorithm
:
string
;
signatureData
:
string
;
}
export
interface
SecurityDetails
{
protocol
:
string
;
keyExchange
:
string
;
keyExchangeGroup
?
:
string
;
cipher
:
string
;
mac
?
:
string
;
certificateId
:
Security
.
CertificateId
;
subjectName
:
string
;
sanList
:
string
[
]
;
issuer
:
string
;
validFrom
:
TimeSinceEpoch
;
validTo
:
TimeSinceEpoch
;
signedCertificateTimestampList
:
SignedCertificateTimestamp
[
]
;
certificateTransparencyCompliance
:
CertificateTransparencyCompliance
;
serverSignatureAlgorithm
?
:
integer
;
encryptedClientHello
:
boolean
;
}
export
type
CertificateTransparencyCompliance
=
(
'
unknown
'
|
'
not
-
compliant
'
|
'
compliant
'
)
;
export
type
BlockedReason
=
(
'
other
'
|
'
csp
'
|
'
mixed
-
content
'
|
'
origin
'
|
'
inspector
'
|
'
subresource
-
filter
'
|
'
content
-
type
'
|
'
coep
-
frame
-
resource
-
needs
-
coep
-
header
'
|
'
coop
-
sandboxed
-
iframe
-
cannot
-
navigate
-
to
-
coop
-
page
'
|
'
corp
-
not
-
same
-
origin
'
|
'
corp
-
not
-
same
-
origin
-
after
-
defaulted
-
to
-
same
-
origin
-
by
-
coep
'
|
'
corp
-
not
-
same
-
site
'
)
;
export
type
CorsError
=
(
'
DisallowedByMode
'
|
'
InvalidResponse
'
|
'
WildcardOriginNotAllowed
'
|
'
MissingAllowOriginHeader
'
|
'
MultipleAllowOriginValues
'
|
'
InvalidAllowOriginValue
'
|
'
AllowOriginMismatch
'
|
'
InvalidAllowCredentials
'
|
'
CorsDisabledScheme
'
|
'
PreflightInvalidStatus
'
|
'
PreflightDisallowedRedirect
'
|
'
PreflightWildcardOriginNotAllowed
'
|
'
PreflightMissingAllowOriginHeader
'
|
'
PreflightMultipleAllowOriginValues
'
|
'
PreflightInvalidAllowOriginValue
'
|
'
PreflightAllowOriginMismatch
'
|
'
PreflightInvalidAllowCredentials
'
|
'
PreflightMissingAllowExternal
'
|
'
PreflightInvalidAllowExternal
'
|
'
PreflightMissingAllowPrivateNetwork
'
|
'
PreflightInvalidAllowPrivateNetwork
'
|
'
InvalidAllowMethodsPreflightResponse
'
|
'
InvalidAllowHeadersPreflightResponse
'
|
'
MethodDisallowedByPreflightResponse
'
|
'
HeaderDisallowedByPreflightResponse
'
|
'
RedirectContainsCredentials
'
|
'
InsecurePrivateNetwork
'
|
'
InvalidPrivateNetworkAccess
'
|
'
UnexpectedPrivateNetworkAccess
'
|
'
NoCorsRedirectModeNotFollow
'
)
;
export
interface
CorsErrorStatus
{
corsError
:
CorsError
;
failedParameter
:
string
;
}
export
type
ServiceWorkerResponseSource
=
(
'
cache
-
storage
'
|
'
http
-
cache
'
|
'
fallback
-
code
'
|
'
network
'
)
;
export
const
enum
TrustTokenParamsRefreshPolicy
{
UseCached
=
'
UseCached
'
Refresh
=
'
Refresh
'
}
export
interface
TrustTokenParams
{
type
:
TrustTokenOperationType
;
refreshPolicy
:
(
'
UseCached
'
|
'
Refresh
'
)
;
issuers
?
:
string
[
]
;
}
export
type
TrustTokenOperationType
=
(
'
Issuance
'
|
'
Redemption
'
|
'
Signing
'
)
;
export
type
AlternateProtocolUsage
=
(
'
alternativeJobWonWithoutRace
'
|
'
alternativeJobWonRace
'
|
'
mainJobWonRace
'
|
'
mappingMissing
'
|
'
broken
'
|
'
dnsAlpnH3JobWonWithoutRace
'
|
'
dnsAlpnH3JobWonRace
'
|
'
unspecifiedReason
'
)
;
export
interface
Response
{
url
:
string
;
status
:
integer
;
statusText
:
string
;
headers
:
Headers
;
headersText
?
:
string
;
mimeType
:
string
;
requestHeaders
?
:
Headers
;
requestHeadersText
?
:
string
;
connectionReused
:
boolean
;
connectionId
:
number
;
remoteIPAddress
?
:
string
;
remotePort
?
:
integer
;
fromDiskCache
?
:
boolean
;
fromServiceWorker
?
:
boolean
;
fromPrefetchCache
?
:
boolean
;
encodedDataLength
:
number
;
timing
?
:
ResourceTiming
;
serviceWorkerResponseSource
?
:
ServiceWorkerResponseSource
;
responseTime
?
:
TimeSinceEpoch
;
cacheStorageCacheName
?
:
string
;
protocol
?
:
string
;
alternateProtocolUsage
?
:
AlternateProtocolUsage
;
securityState
:
Security
.
SecurityState
;
securityDetails
?
:
SecurityDetails
;
}
export
interface
WebSocketRequest
{
headers
:
Headers
;
}
export
interface
WebSocketResponse
{
status
:
integer
;
statusText
:
string
;
headers
:
Headers
;
headersText
?
:
string
;
requestHeaders
?
:
Headers
;
requestHeadersText
?
:
string
;
}
export
interface
WebSocketFrame
{
opcode
:
number
;
mask
:
boolean
;
payloadData
:
string
;
}
export
interface
CachedResource
{
url
:
string
;
type
:
ResourceType
;
response
?
:
Response
;
bodySize
:
number
;
}
export
const
enum
InitiatorType
{
Parser
=
'
parser
'
Script
=
'
script
'
Preload
=
'
preload
'
SignedExchange
=
'
SignedExchange
'
Preflight
=
'
preflight
'
Other
=
'
other
'
}
export
interface
Initiator
{
type
:
(
'
parser
'
|
'
script
'
|
'
preload
'
|
'
SignedExchange
'
|
'
preflight
'
|
'
other
'
)
;
stack
?
:
Runtime
.
StackTrace
;
url
?
:
string
;
lineNumber
?
:
number
;
columnNumber
?
:
number
;
requestId
?
:
RequestId
;
}
export
interface
Cookie
{
name
:
string
;
value
:
string
;
domain
:
string
;
path
:
string
;
expires
:
number
;
size
:
integer
;
httpOnly
:
boolean
;
secure
:
boolean
;
session
:
boolean
;
sameSite
?
:
CookieSameSite
;
priority
:
CookiePriority
;
sameParty
:
boolean
;
sourceScheme
:
CookieSourceScheme
;
sourcePort
:
integer
;
partitionKey
?
:
string
;
partitionKeyOpaque
?
:
boolean
;
}
export
type
SetCookieBlockedReason
=
(
'
SecureOnly
'
|
'
SameSiteStrict
'
|
'
SameSiteLax
'
|
'
SameSiteUnspecifiedTreatedAsLax
'
|
'
SameSiteNoneInsecure
'
|
'
UserPreferences
'
|
'
ThirdPartyBlockedInFirstPartySet
'
|
'
SyntaxError
'
|
'
SchemeNotSupported
'
|
'
OverwriteSecure
'
|
'
InvalidDomain
'
|
'
InvalidPrefix
'
|
'
UnknownError
'
|
'
SchemefulSameSiteStrict
'
|
'
SchemefulSameSiteLax
'
|
'
SchemefulSameSiteUnspecifiedTreatedAsLax
'
|
'
SamePartyFromCrossPartyContext
'
|
'
SamePartyConflictsWithOtherAttributes
'
|
'
NameValuePairExceedsMaxSize
'
)
;
export
type
CookieBlockedReason
=
(
'
SecureOnly
'
|
'
NotOnPath
'
|
'
DomainMismatch
'
|
'
SameSiteStrict
'
|
'
SameSiteLax
'
|
'
SameSiteUnspecifiedTreatedAsLax
'
|
'
SameSiteNoneInsecure
'
|
'
UserPreferences
'
|
'
ThirdPartyBlockedInFirstPartySet
'
|
'
UnknownError
'
|
'
SchemefulSameSiteStrict
'
|
'
SchemefulSameSiteLax
'
|
'
SchemefulSameSiteUnspecifiedTreatedAsLax
'
|
'
SamePartyFromCrossPartyContext
'
|
'
NameValuePairExceedsMaxSize
'
)
;
export
interface
BlockedSetCookieWithReason
{
blockedReasons
:
SetCookieBlockedReason
[
]
;
cookieLine
:
string
;
cookie
?
:
Cookie
;
}
export
interface
BlockedCookieWithReason
{
blockedReasons
:
CookieBlockedReason
[
]
;
cookie
:
Cookie
;
}
export
interface
CookieParam
{
name
:
string
;
value
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
secure
?
:
boolean
;
httpOnly
?
:
boolean
;
sameSite
?
:
CookieSameSite
;
expires
?
:
TimeSinceEpoch
;
priority
?
:
CookiePriority
;
sameParty
?
:
boolean
;
sourceScheme
?
:
CookieSourceScheme
;
sourcePort
?
:
integer
;
partitionKey
?
:
string
;
}
export
const
enum
AuthChallengeSource
{
Server
=
'
Server
'
Proxy
=
'
Proxy
'
}
export
interface
AuthChallenge
{
source
?
:
(
'
Server
'
|
'
Proxy
'
)
;
origin
:
string
;
scheme
:
string
;
realm
:
string
;
}
export
const
enum
AuthChallengeResponseResponse
{
Default
=
'
Default
'
CancelAuth
=
'
CancelAuth
'
ProvideCredentials
=
'
ProvideCredentials
'
}
export
interface
AuthChallengeResponse
{
response
:
(
'
Default
'
|
'
CancelAuth
'
|
'
ProvideCredentials
'
)
;
username
?
:
string
;
password
?
:
string
;
}
export
type
InterceptionStage
=
(
'
Request
'
|
'
HeadersReceived
'
)
;
export
interface
RequestPattern
{
urlPattern
?
:
string
;
resourceType
?
:
ResourceType
;
interceptionStage
?
:
InterceptionStage
;
}
export
interface
SignedExchangeSignature
{
label
:
string
;
signature
:
string
;
integrity
:
string
;
certUrl
?
:
string
;
certSha256
?
:
string
;
validityUrl
:
string
;
date
:
integer
;
expires
:
integer
;
certificates
?
:
string
[
]
;
}
export
interface
SignedExchangeHeader
{
requestUrl
:
string
;
responseCode
:
integer
;
responseHeaders
:
Headers
;
signatures
:
SignedExchangeSignature
[
]
;
headerIntegrity
:
string
;
}
export
type
SignedExchangeErrorField
=
(
'
signatureSig
'
|
'
signatureIntegrity
'
|
'
signatureCertUrl
'
|
'
signatureCertSha256
'
|
'
signatureValidityUrl
'
|
'
signatureTimestamps
'
)
;
export
interface
SignedExchangeError
{
message
:
string
;
signatureIndex
?
:
integer
;
errorField
?
:
SignedExchangeErrorField
;
}
export
interface
SignedExchangeInfo
{
outerResponse
:
Response
;
header
?
:
SignedExchangeHeader
;
securityDetails
?
:
SecurityDetails
;
errors
?
:
SignedExchangeError
[
]
;
}
export
type
ContentEncoding
=
(
'
deflate
'
|
'
gzip
'
|
'
br
'
)
;
export
type
PrivateNetworkRequestPolicy
=
(
'
Allow
'
|
'
BlockFromInsecureToMorePrivate
'
|
'
WarnFromInsecureToMorePrivate
'
|
'
PreflightBlock
'
|
'
PreflightWarn
'
)
;
export
type
IPAddressSpace
=
(
'
Local
'
|
'
Private
'
|
'
Public
'
|
'
Unknown
'
)
;
export
interface
ConnectTiming
{
requestTime
:
number
;
}
export
interface
ClientSecurityState
{
initiatorIsSecureContext
:
boolean
;
initiatorIPAddressSpace
:
IPAddressSpace
;
privateNetworkRequestPolicy
:
PrivateNetworkRequestPolicy
;
}
export
type
CrossOriginOpenerPolicyValue
=
(
'
SameOrigin
'
|
'
SameOriginAllowPopups
'
|
'
RestrictProperties
'
|
'
UnsafeNone
'
|
'
SameOriginPlusCoep
'
|
'
RestrictPropertiesPlusCoep
'
)
;
export
interface
CrossOriginOpenerPolicyStatus
{
value
:
CrossOriginOpenerPolicyValue
;
reportOnlyValue
:
CrossOriginOpenerPolicyValue
;
reportingEndpoint
?
:
string
;
reportOnlyReportingEndpoint
?
:
string
;
}
export
type
CrossOriginEmbedderPolicyValue
=
(
'
None
'
|
'
Credentialless
'
|
'
RequireCorp
'
)
;
export
interface
CrossOriginEmbedderPolicyStatus
{
value
:
CrossOriginEmbedderPolicyValue
;
reportOnlyValue
:
CrossOriginEmbedderPolicyValue
;
reportingEndpoint
?
:
string
;
reportOnlyReportingEndpoint
?
:
string
;
}
export
interface
SecurityIsolationStatus
{
coop
?
:
CrossOriginOpenerPolicyStatus
;
coep
?
:
CrossOriginEmbedderPolicyStatus
;
}
export
type
ReportStatus
=
(
'
Queued
'
|
'
Pending
'
|
'
MarkedForRemoval
'
|
'
Success
'
)
;
export
type
ReportId
=
string
;
export
interface
ReportingApiReport
{
id
:
ReportId
;
initiatorUrl
:
string
;
destination
:
string
;
type
:
string
;
timestamp
:
Network
.
TimeSinceEpoch
;
depth
:
integer
;
completedAttempts
:
integer
;
body
:
any
;
status
:
ReportStatus
;
}
export
interface
ReportingApiEndpoint
{
url
:
string
;
groupName
:
string
;
}
export
interface
LoadNetworkResourcePageResult
{
success
:
boolean
;
netError
?
:
number
;
netErrorName
?
:
string
;
httpStatusCode
?
:
number
;
stream
?
:
IO
.
StreamHandle
;
headers
?
:
Network
.
Headers
;
}
export
interface
LoadNetworkResourceOptions
{
disableCache
:
boolean
;
includeCredentials
:
boolean
;
}
export
interface
SetAcceptedEncodingsRequest
{
encodings
:
ContentEncoding
[
]
;
}
export
interface
CanClearBrowserCacheResponse
{
result
:
boolean
;
}
export
interface
CanClearBrowserCookiesResponse
{
result
:
boolean
;
}
export
interface
CanEmulateNetworkConditionsResponse
{
result
:
boolean
;
}
export
interface
ContinueInterceptedRequestRequest
{
interceptionId
:
InterceptionId
;
errorReason
?
:
ErrorReason
;
rawResponse
?
:
string
;
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
Headers
;
authChallengeResponse
?
:
AuthChallengeResponse
;
}
export
interface
DeleteCookiesRequest
{
name
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
}
export
interface
EmulateNetworkConditionsRequest
{
offline
:
boolean
;
latency
:
number
;
downloadThroughput
:
number
;
uploadThroughput
:
number
;
connectionType
?
:
ConnectionType
;
}
export
interface
EnableRequest
{
maxTotalBufferSize
?
:
integer
;
maxResourceBufferSize
?
:
integer
;
maxPostDataSize
?
:
integer
;
}
export
interface
GetAllCookiesResponse
{
cookies
:
Cookie
[
]
;
}
export
interface
GetCertificateRequest
{
origin
:
string
;
}
export
interface
GetCertificateResponse
{
tableNames
:
string
[
]
;
}
export
interface
GetCookiesRequest
{
urls
?
:
string
[
]
;
}
export
interface
GetCookiesResponse
{
cookies
:
Cookie
[
]
;
}
export
interface
GetResponseBodyRequest
{
requestId
:
RequestId
;
}
export
interface
GetResponseBodyResponse
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
interface
GetRequestPostDataRequest
{
requestId
:
RequestId
;
}
export
interface
GetRequestPostDataResponse
{
postData
:
string
;
}
export
interface
GetResponseBodyForInterceptionRequest
{
interceptionId
:
InterceptionId
;
}
export
interface
GetResponseBodyForInterceptionResponse
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
interface
TakeResponseBodyForInterceptionAsStreamRequest
{
interceptionId
:
InterceptionId
;
}
export
interface
TakeResponseBodyForInterceptionAsStreamResponse
{
stream
:
IO
.
StreamHandle
;
}
export
interface
ReplayXHRRequest
{
requestId
:
RequestId
;
}
export
interface
SearchInResponseBodyRequest
{
requestId
:
RequestId
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
interface
SearchInResponseBodyResponse
{
result
:
Debugger
.
SearchMatch
[
]
;
}
export
interface
SetBlockedURLsRequest
{
urls
:
string
[
]
;
}
export
interface
SetBypassServiceWorkerRequest
{
bypass
:
boolean
;
}
export
interface
SetCacheDisabledRequest
{
cacheDisabled
:
boolean
;
}
export
interface
SetCookieRequest
{
name
:
string
;
value
:
string
;
url
?
:
string
;
domain
?
:
string
;
path
?
:
string
;
secure
?
:
boolean
;
httpOnly
?
:
boolean
;
sameSite
?
:
CookieSameSite
;
expires
?
:
TimeSinceEpoch
;
priority
?
:
CookiePriority
;
sameParty
?
:
boolean
;
sourceScheme
?
:
CookieSourceScheme
;
sourcePort
?
:
integer
;
partitionKey
?
:
string
;
}
export
interface
SetCookieResponse
{
success
:
boolean
;
}
export
interface
SetCookiesRequest
{
cookies
:
CookieParam
[
]
;
}
export
interface
SetExtraHTTPHeadersRequest
{
headers
:
Headers
;
}
export
interface
SetAttachDebugStackRequest
{
enabled
:
boolean
;
}
export
interface
SetRequestInterceptionRequest
{
patterns
:
RequestPattern
[
]
;
}
export
interface
SetUserAgentOverrideRequest
{
userAgent
:
string
;
acceptLanguage
?
:
string
;
platform
?
:
string
;
userAgentMetadata
?
:
Emulation
.
UserAgentMetadata
;
}
export
interface
GetSecurityIsolationStatusRequest
{
frameId
?
:
Page
.
FrameId
;
}
export
interface
GetSecurityIsolationStatusResponse
{
status
:
SecurityIsolationStatus
;
}
export
interface
EnableReportingApiRequest
{
enable
:
boolean
;
}
export
interface
LoadNetworkResourceRequest
{
frameId
?
:
Page
.
FrameId
;
url
:
string
;
options
:
LoadNetworkResourceOptions
;
}
export
interface
LoadNetworkResourceResponse
{
resource
:
LoadNetworkResourcePageResult
;
}
export
interface
DataReceivedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
dataLength
:
integer
;
encodedDataLength
:
integer
;
}
export
interface
EventSourceMessageReceivedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
eventName
:
string
;
eventId
:
string
;
data
:
string
;
}
export
interface
LoadingFailedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
type
:
ResourceType
;
errorText
:
string
;
canceled
?
:
boolean
;
blockedReason
?
:
BlockedReason
;
corsErrorStatus
?
:
CorsErrorStatus
;
}
export
interface
LoadingFinishedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
encodedDataLength
:
number
;
shouldReportCorbBlocking
?
:
boolean
;
}
export
interface
RequestInterceptedEvent
{
interceptionId
:
InterceptionId
;
request
:
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
ResourceType
;
isNavigationRequest
:
boolean
;
isDownload
?
:
boolean
;
redirectUrl
?
:
string
;
authChallenge
?
:
AuthChallenge
;
responseErrorReason
?
:
ErrorReason
;
responseStatusCode
?
:
integer
;
responseHeaders
?
:
Headers
;
requestId
?
:
RequestId
;
}
export
interface
RequestServedFromCacheEvent
{
requestId
:
RequestId
;
}
export
interface
RequestWillBeSentEvent
{
requestId
:
RequestId
;
loaderId
:
LoaderId
;
documentURL
:
string
;
request
:
Request
;
timestamp
:
MonotonicTime
;
wallTime
:
TimeSinceEpoch
;
initiator
:
Initiator
;
redirectHasExtraInfo
:
boolean
;
redirectResponse
?
:
Response
;
type
?
:
ResourceType
;
frameId
?
:
Page
.
FrameId
;
hasUserGesture
?
:
boolean
;
}
export
interface
ResourceChangedPriorityEvent
{
requestId
:
RequestId
;
newPriority
:
ResourcePriority
;
timestamp
:
MonotonicTime
;
}
export
interface
SignedExchangeReceivedEvent
{
requestId
:
RequestId
;
info
:
SignedExchangeInfo
;
}
export
interface
ResponseReceivedEvent
{
requestId
:
RequestId
;
loaderId
:
LoaderId
;
timestamp
:
MonotonicTime
;
type
:
ResourceType
;
response
:
Response
;
hasExtraInfo
:
boolean
;
frameId
?
:
Page
.
FrameId
;
}
export
interface
WebSocketClosedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
}
export
interface
WebSocketCreatedEvent
{
requestId
:
RequestId
;
url
:
string
;
initiator
?
:
Initiator
;
}
export
interface
WebSocketFrameErrorEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
errorMessage
:
string
;
}
export
interface
WebSocketFrameReceivedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketFrame
;
}
export
interface
WebSocketFrameSentEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketFrame
;
}
export
interface
WebSocketHandshakeResponseReceivedEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
response
:
WebSocketResponse
;
}
export
interface
WebSocketWillSendHandshakeRequestEvent
{
requestId
:
RequestId
;
timestamp
:
MonotonicTime
;
wallTime
:
TimeSinceEpoch
;
request
:
WebSocketRequest
;
}
export
interface
WebTransportCreatedEvent
{
transportId
:
RequestId
;
url
:
string
;
timestamp
:
MonotonicTime
;
initiator
?
:
Initiator
;
}
export
interface
WebTransportConnectionEstablishedEvent
{
transportId
:
RequestId
;
timestamp
:
MonotonicTime
;
}
export
interface
WebTransportClosedEvent
{
transportId
:
RequestId
;
timestamp
:
MonotonicTime
;
}
export
interface
RequestWillBeSentExtraInfoEvent
{
requestId
:
RequestId
;
associatedCookies
:
BlockedCookieWithReason
[
]
;
headers
:
Headers
;
connectTiming
:
ConnectTiming
;
clientSecurityState
?
:
ClientSecurityState
;
siteHasCookieInOtherPartition
?
:
boolean
;
}
export
interface
ResponseReceivedExtraInfoEvent
{
requestId
:
RequestId
;
blockedCookies
:
BlockedSetCookieWithReason
[
]
;
headers
:
Headers
;
resourceIPAddressSpace
:
IPAddressSpace
;
statusCode
:
integer
;
headersText
?
:
string
;
}
export
const
enum
TrustTokenOperationDoneEventStatus
{
Ok
=
'
Ok
'
InvalidArgument
=
'
InvalidArgument
'
FailedPrecondition
=
'
FailedPrecondition
'
ResourceExhausted
=
'
ResourceExhausted
'
AlreadyExists
=
'
AlreadyExists
'
Unavailable
=
'
Unavailable
'
BadResponse
=
'
BadResponse
'
InternalError
=
'
InternalError
'
UnknownError
=
'
UnknownError
'
FulfilledLocally
=
'
FulfilledLocally
'
}
export
interface
TrustTokenOperationDoneEvent
{
status
:
(
'
Ok
'
|
'
InvalidArgument
'
|
'
FailedPrecondition
'
|
'
ResourceExhausted
'
|
'
AlreadyExists
'
|
'
Unavailable
'
|
'
BadResponse
'
|
'
InternalError
'
|
'
UnknownError
'
|
'
FulfilledLocally
'
)
;
type
:
TrustTokenOperationType
;
requestId
:
RequestId
;
topLevelOrigin
?
:
string
;
issuerOrigin
?
:
string
;
issuedTokenCount
?
:
integer
;
}
export
interface
SubresourceWebBundleMetadataReceivedEvent
{
requestId
:
RequestId
;
urls
:
string
[
]
;
}
export
interface
SubresourceWebBundleMetadataErrorEvent
{
requestId
:
RequestId
;
errorMessage
:
string
;
}
export
interface
SubresourceWebBundleInnerResponseParsedEvent
{
innerRequestId
:
RequestId
;
innerRequestURL
:
string
;
bundleRequestId
?
:
RequestId
;
}
export
interface
SubresourceWebBundleInnerResponseErrorEvent
{
innerRequestId
:
RequestId
;
innerRequestURL
:
string
;
errorMessage
:
string
;
bundleRequestId
?
:
RequestId
;
}
export
interface
ReportingApiReportAddedEvent
{
report
:
ReportingApiReport
;
}
export
interface
ReportingApiReportUpdatedEvent
{
report
:
ReportingApiReport
;
}
export
interface
ReportingApiEndpointsChangedForOriginEvent
{
origin
:
string
;
endpoints
:
ReportingApiEndpoint
[
]
;
}
}
export
namespace
Overlay
{
export
interface
SourceOrderConfig
{
parentOutlineColor
:
DOM
.
RGBA
;
childOutlineColor
:
DOM
.
RGBA
;
}
export
interface
GridHighlightConfig
{
showGridExtensionLines
?
:
boolean
;
showPositiveLineNumbers
?
:
boolean
;
showNegativeLineNumbers
?
:
boolean
;
showAreaNames
?
:
boolean
;
showLineNames
?
:
boolean
;
showTrackSizes
?
:
boolean
;
gridBorderColor
?
:
DOM
.
RGBA
;
cellBorderColor
?
:
DOM
.
RGBA
;
rowLineColor
?
:
DOM
.
RGBA
;
columnLineColor
?
:
DOM
.
RGBA
;
gridBorderDash
?
:
boolean
;
cellBorderDash
?
:
boolean
;
rowLineDash
?
:
boolean
;
columnLineDash
?
:
boolean
;
rowGapColor
?
:
DOM
.
RGBA
;
rowHatchColor
?
:
DOM
.
RGBA
;
columnGapColor
?
:
DOM
.
RGBA
;
columnHatchColor
?
:
DOM
.
RGBA
;
areaBorderColor
?
:
DOM
.
RGBA
;
gridBackgroundColor
?
:
DOM
.
RGBA
;
}
export
interface
FlexContainerHighlightConfig
{
containerBorder
?
:
LineStyle
;
lineSeparator
?
:
LineStyle
;
itemSeparator
?
:
LineStyle
;
mainDistributedSpace
?
:
BoxStyle
;
crossDistributedSpace
?
:
BoxStyle
;
rowGapSpace
?
:
BoxStyle
;
columnGapSpace
?
:
BoxStyle
;
crossAlignment
?
:
LineStyle
;
}
export
interface
FlexItemHighlightConfig
{
baseSizeBox
?
:
BoxStyle
;
baseSizeBorder
?
:
LineStyle
;
flexibilityArrow
?
:
LineStyle
;
}
export
const
enum
LineStylePattern
{
Dashed
=
'
dashed
'
Dotted
=
'
dotted
'
}
export
interface
LineStyle
{
color
?
:
DOM
.
RGBA
;
pattern
?
:
(
'
dashed
'
|
'
dotted
'
)
;
}
export
interface
BoxStyle
{
fillColor
?
:
DOM
.
RGBA
;
hatchColor
?
:
DOM
.
RGBA
;
}
export
type
ContrastAlgorithm
=
(
'
aa
'
|
'
aaa
'
|
'
apca
'
)
;
export
interface
HighlightConfig
{
showInfo
?
:
boolean
;
showStyles
?
:
boolean
;
showRulers
?
:
boolean
;
showAccessibilityInfo
?
:
boolean
;
showExtensionLines
?
:
boolean
;
contentColor
?
:
DOM
.
RGBA
;
paddingColor
?
:
DOM
.
RGBA
;
borderColor
?
:
DOM
.
RGBA
;
marginColor
?
:
DOM
.
RGBA
;
eventTargetColor
?
:
DOM
.
RGBA
;
shapeColor
?
:
DOM
.
RGBA
;
shapeMarginColor
?
:
DOM
.
RGBA
;
cssGridColor
?
:
DOM
.
RGBA
;
colorFormat
?
:
ColorFormat
;
gridHighlightConfig
?
:
GridHighlightConfig
;
flexContainerHighlightConfig
?
:
FlexContainerHighlightConfig
;
flexItemHighlightConfig
?
:
FlexItemHighlightConfig
;
contrastAlgorithm
?
:
ContrastAlgorithm
;
containerQueryContainerHighlightConfig
?
:
ContainerQueryContainerHighlightConfig
;
}
export
type
ColorFormat
=
(
'
rgb
'
|
'
hsl
'
|
'
hwb
'
|
'
hex
'
)
;
export
interface
GridNodeHighlightConfig
{
gridHighlightConfig
:
GridHighlightConfig
;
nodeId
:
DOM
.
NodeId
;
}
export
interface
FlexNodeHighlightConfig
{
flexContainerHighlightConfig
:
FlexContainerHighlightConfig
;
nodeId
:
DOM
.
NodeId
;
}
export
interface
ScrollSnapContainerHighlightConfig
{
snapportBorder
?
:
LineStyle
;
snapAreaBorder
?
:
LineStyle
;
scrollMarginColor
?
:
DOM
.
RGBA
;
scrollPaddingColor
?
:
DOM
.
RGBA
;
}
export
interface
ScrollSnapHighlightConfig
{
scrollSnapContainerHighlightConfig
:
ScrollSnapContainerHighlightConfig
;
nodeId
:
DOM
.
NodeId
;
}
export
interface
HingeConfig
{
rect
:
DOM
.
Rect
;
contentColor
?
:
DOM
.
RGBA
;
outlineColor
?
:
DOM
.
RGBA
;
}
export
interface
ContainerQueryHighlightConfig
{
containerQueryContainerHighlightConfig
:
ContainerQueryContainerHighlightConfig
;
nodeId
:
DOM
.
NodeId
;
}
export
interface
ContainerQueryContainerHighlightConfig
{
containerBorder
?
:
LineStyle
;
descendantBorder
?
:
LineStyle
;
}
export
interface
IsolatedElementHighlightConfig
{
isolationModeHighlightConfig
:
IsolationModeHighlightConfig
;
nodeId
:
DOM
.
NodeId
;
}
export
interface
IsolationModeHighlightConfig
{
resizerColor
?
:
DOM
.
RGBA
;
resizerHandleColor
?
:
DOM
.
RGBA
;
maskColor
?
:
DOM
.
RGBA
;
}
export
type
InspectMode
=
(
'
searchForNode
'
|
'
searchForUAShadowDOM
'
|
'
captureAreaScreenshot
'
|
'
showDistances
'
|
'
none
'
)
;
export
interface
GetHighlightObjectForTestRequest
{
nodeId
:
DOM
.
NodeId
;
includeDistance
?
:
boolean
;
includeStyle
?
:
boolean
;
colorFormat
?
:
ColorFormat
;
showAccessibilityInfo
?
:
boolean
;
}
export
interface
GetHighlightObjectForTestResponse
{
highlight
:
any
;
}
export
interface
GetGridHighlightObjectsForTestRequest
{
nodeIds
:
DOM
.
NodeId
[
]
;
}
export
interface
GetGridHighlightObjectsForTestResponse
{
highlights
:
any
;
}
export
interface
GetSourceOrderHighlightObjectForTestRequest
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
GetSourceOrderHighlightObjectForTestResponse
{
highlight
:
any
;
}
export
interface
HighlightFrameRequest
{
frameId
:
Page
.
FrameId
;
contentColor
?
:
DOM
.
RGBA
;
contentOutlineColor
?
:
DOM
.
RGBA
;
}
export
interface
HighlightNodeRequest
{
highlightConfig
:
HighlightConfig
;
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
selector
?
:
string
;
}
export
interface
HighlightQuadRequest
{
quad
:
DOM
.
Quad
;
color
?
:
DOM
.
RGBA
;
outlineColor
?
:
DOM
.
RGBA
;
}
export
interface
HighlightRectRequest
{
x
:
integer
;
y
:
integer
;
width
:
integer
;
height
:
integer
;
color
?
:
DOM
.
RGBA
;
outlineColor
?
:
DOM
.
RGBA
;
}
export
interface
HighlightSourceOrderRequest
{
sourceOrderConfig
:
SourceOrderConfig
;
nodeId
?
:
DOM
.
NodeId
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
objectId
?
:
Runtime
.
RemoteObjectId
;
}
export
interface
SetInspectModeRequest
{
mode
:
InspectMode
;
highlightConfig
?
:
HighlightConfig
;
}
export
interface
SetShowAdHighlightsRequest
{
show
:
boolean
;
}
export
interface
SetPausedInDebuggerMessageRequest
{
message
?
:
string
;
}
export
interface
SetShowDebugBordersRequest
{
show
:
boolean
;
}
export
interface
SetShowFPSCounterRequest
{
show
:
boolean
;
}
export
interface
SetShowGridOverlaysRequest
{
gridNodeHighlightConfigs
:
GridNodeHighlightConfig
[
]
;
}
export
interface
SetShowFlexOverlaysRequest
{
flexNodeHighlightConfigs
:
FlexNodeHighlightConfig
[
]
;
}
export
interface
SetShowScrollSnapOverlaysRequest
{
scrollSnapHighlightConfigs
:
ScrollSnapHighlightConfig
[
]
;
}
export
interface
SetShowContainerQueryOverlaysRequest
{
containerQueryHighlightConfigs
:
ContainerQueryHighlightConfig
[
]
;
}
export
interface
SetShowPaintRectsRequest
{
result
:
boolean
;
}
export
interface
SetShowLayoutShiftRegionsRequest
{
result
:
boolean
;
}
export
interface
SetShowScrollBottleneckRectsRequest
{
show
:
boolean
;
}
export
interface
SetShowHitTestBordersRequest
{
show
:
boolean
;
}
export
interface
SetShowWebVitalsRequest
{
show
:
boolean
;
}
export
interface
SetShowViewportSizeOnResizeRequest
{
show
:
boolean
;
}
export
interface
SetShowHingeRequest
{
hingeConfig
?
:
HingeConfig
;
}
export
interface
SetShowIsolatedElementsRequest
{
isolatedElementHighlightConfigs
:
IsolatedElementHighlightConfig
[
]
;
}
export
interface
InspectNodeRequestedEvent
{
backendNodeId
:
DOM
.
BackendNodeId
;
}
export
interface
NodeHighlightRequestedEvent
{
nodeId
:
DOM
.
NodeId
;
}
export
interface
ScreenshotRequestedEvent
{
viewport
:
Page
.
Viewport
;
}
}
export
namespace
Page
{
export
type
FrameId
=
string
;
export
type
AdFrameType
=
(
'
none
'
|
'
child
'
|
'
root
'
)
;
export
type
AdFrameExplanation
=
(
'
ParentIsAd
'
|
'
CreatedByAdScript
'
|
'
MatchedBlockingRule
'
)
;
export
interface
AdFrameStatus
{
adFrameType
:
AdFrameType
;
explanations
?
:
AdFrameExplanation
[
]
;
}
export
interface
AdScriptId
{
scriptId
:
Runtime
.
ScriptId
;
debuggerId
:
Runtime
.
UniqueDebuggerId
;
}
export
type
SecureContextType
=
(
'
Secure
'
|
'
SecureLocalhost
'
|
'
InsecureScheme
'
|
'
InsecureAncestor
'
)
;
export
type
CrossOriginIsolatedContextType
=
(
'
Isolated
'
|
'
NotIsolated
'
|
'
NotIsolatedFeatureDisabled
'
)
;
export
type
GatedAPIFeatures
=
(
'
SharedArrayBuffers
'
|
'
SharedArrayBuffersTransferAllowed
'
|
'
PerformanceMeasureMemory
'
|
'
PerformanceProfile
'
)
;
export
type
PermissionsPolicyFeature
=
(
'
accelerometer
'
|
'
ambient
-
light
-
sensor
'
|
'
attribution
-
reporting
'
|
'
autoplay
'
|
'
bluetooth
'
|
'
browsing
-
topics
'
|
'
camera
'
|
'
ch
-
dpr
'
|
'
ch
-
device
-
memory
'
|
'
ch
-
downlink
'
|
'
ch
-
ect
'
|
'
ch
-
prefers
-
color
-
scheme
'
|
'
ch
-
prefers
-
reduced
-
motion
'
|
'
ch
-
rtt
'
|
'
ch
-
save
-
data
'
|
'
ch
-
ua
'
|
'
ch
-
ua
-
arch
'
|
'
ch
-
ua
-
bitness
'
|
'
ch
-
ua
-
platform
'
|
'
ch
-
ua
-
model
'
|
'
ch
-
ua
-
mobile
'
|
'
ch
-
ua
-
full
'
|
'
ch
-
ua
-
full
-
version
'
|
'
ch
-
ua
-
full
-
version
-
list
'
|
'
ch
-
ua
-
platform
-
version
'
|
'
ch
-
ua
-
reduced
'
|
'
ch
-
ua
-
wow64
'
|
'
ch
-
viewport
-
height
'
|
'
ch
-
viewport
-
width
'
|
'
ch
-
width
'
|
'
clipboard
-
read
'
|
'
clipboard
-
write
'
|
'
compute
-
pressure
'
|
'
cross
-
origin
-
isolated
'
|
'
direct
-
sockets
'
|
'
display
-
capture
'
|
'
document
-
domain
'
|
'
encrypted
-
media
'
|
'
execution
-
while
-
out
-
of
-
viewport
'
|
'
execution
-
while
-
not
-
rendered
'
|
'
focus
-
without
-
user
-
activation
'
|
'
fullscreen
'
|
'
frobulate
'
|
'
gamepad
'
|
'
geolocation
'
|
'
gyroscope
'
|
'
hid
'
|
'
identity
-
credentials
-
get
'
|
'
idle
-
detection
'
|
'
interest
-
cohort
'
|
'
join
-
ad
-
interest
-
group
'
|
'
keyboard
-
map
'
|
'
local
-
fonts
'
|
'
magnetometer
'
|
'
microphone
'
|
'
midi
'
|
'
otp
-
credentials
'
|
'
payment
'
|
'
picture
-
in
-
picture
'
|
'
publickey
-
credentials
-
get
'
|
'
run
-
ad
-
auction
'
|
'
screen
-
wake
-
lock
'
|
'
serial
'
|
'
shared
-
autofill
'
|
'
shared
-
storage
'
|
'
smart
-
card
'
|
'
storage
-
access
'
|
'
sync
-
xhr
'
|
'
trust
-
token
-
redemption
'
|
'
unload
'
|
'
usb
'
|
'
vertical
-
scroll
'
|
'
web
-
share
'
|
'
window
-
placement
'
|
'
xr
-
spatial
-
tracking
'
)
;
export
type
PermissionsPolicyBlockReason
=
(
'
Header
'
|
'
IframeAttribute
'
|
'
InFencedFrameTree
'
|
'
InIsolatedApp
'
)
;
export
interface
PermissionsPolicyBlockLocator
{
frameId
:
FrameId
;
blockReason
:
PermissionsPolicyBlockReason
;
}
export
interface
PermissionsPolicyFeatureState
{
feature
:
PermissionsPolicyFeature
;
allowed
:
boolean
;
locator
?
:
PermissionsPolicyBlockLocator
;
}
export
type
OriginTrialTokenStatus
=
(
'
Success
'
|
'
NotSupported
'
|
'
Insecure
'
|
'
Expired
'
|
'
WrongOrigin
'
|
'
InvalidSignature
'
|
'
Malformed
'
|
'
WrongVersion
'
|
'
FeatureDisabled
'
|
'
TokenDisabled
'
|
'
FeatureDisabledForUser
'
|
'
UnknownTrial
'
)
;
export
type
OriginTrialStatus
=
(
'
Enabled
'
|
'
ValidTokenNotProvided
'
|
'
OSNotSupported
'
|
'
TrialNotAllowed
'
)
;
export
type
OriginTrialUsageRestriction
=
(
'
None
'
|
'
Subset
'
)
;
export
interface
OriginTrialToken
{
origin
:
string
;
matchSubDomains
:
boolean
;
trialName
:
string
;
expiryTime
:
Network
.
TimeSinceEpoch
;
isThirdParty
:
boolean
;
usageRestriction
:
OriginTrialUsageRestriction
;
}
export
interface
OriginTrialTokenWithStatus
{
rawTokenText
:
string
;
parsedToken
?
:
OriginTrialToken
;
status
:
OriginTrialTokenStatus
;
}
export
interface
OriginTrial
{
trialName
:
string
;
status
:
OriginTrialStatus
;
tokensWithStatus
:
OriginTrialTokenWithStatus
[
]
;
}
export
interface
Frame
{
id
:
FrameId
;
parentId
?
:
FrameId
;
loaderId
:
Network
.
LoaderId
;
name
?
:
string
;
url
:
string
;
urlFragment
?
:
string
;
domainAndRegistry
:
string
;
securityOrigin
:
string
;
mimeType
:
string
;
unreachableUrl
?
:
string
;
adFrameStatus
?
:
AdFrameStatus
;
secureContextType
:
SecureContextType
;
crossOriginIsolatedContextType
:
CrossOriginIsolatedContextType
;
gatedAPIFeatures
:
GatedAPIFeatures
[
]
;
}
export
interface
FrameResource
{
url
:
string
;
type
:
Network
.
ResourceType
;
mimeType
:
string
;
lastModified
?
:
Network
.
TimeSinceEpoch
;
contentSize
?
:
number
;
failed
?
:
boolean
;
canceled
?
:
boolean
;
}
export
interface
FrameResourceTree
{
frame
:
Frame
;
childFrames
?
:
FrameResourceTree
[
]
;
resources
:
FrameResource
[
]
;
}
export
interface
FrameTree
{
frame
:
Frame
;
childFrames
?
:
FrameTree
[
]
;
}
export
type
ScriptIdentifier
=
string
;
export
type
TransitionType
=
(
'
link
'
|
'
typed
'
|
'
address_bar
'
|
'
auto_bookmark
'
|
'
auto_subframe
'
|
'
manual_subframe
'
|
'
generated
'
|
'
auto_toplevel
'
|
'
form_submit
'
|
'
reload
'
|
'
keyword
'
|
'
keyword_generated
'
|
'
other
'
)
;
export
interface
NavigationEntry
{
id
:
integer
;
url
:
string
;
userTypedURL
:
string
;
title
:
string
;
transitionType
:
TransitionType
;
}
export
interface
ScreencastFrameMetadata
{
offsetTop
:
number
;
pageScaleFactor
:
number
;
deviceWidth
:
number
;
deviceHeight
:
number
;
scrollOffsetX
:
number
;
scrollOffsetY
:
number
;
timestamp
?
:
Network
.
TimeSinceEpoch
;
}
export
type
DialogType
=
(
'
alert
'
|
'
confirm
'
|
'
prompt
'
|
'
beforeunload
'
)
;
export
interface
AppManifestError
{
message
:
string
;
critical
:
integer
;
line
:
integer
;
column
:
integer
;
}
export
interface
AppManifestParsedProperties
{
scope
:
string
;
}
export
interface
LayoutViewport
{
pageX
:
integer
;
pageY
:
integer
;
clientWidth
:
integer
;
clientHeight
:
integer
;
}
export
interface
VisualViewport
{
offsetX
:
number
;
offsetY
:
number
;
pageX
:
number
;
pageY
:
number
;
clientWidth
:
number
;
clientHeight
:
number
;
scale
:
number
;
zoom
?
:
number
;
}
export
interface
Viewport
{
x
:
number
;
y
:
number
;
width
:
number
;
height
:
number
;
scale
:
number
;
}
export
interface
FontFamilies
{
standard
?
:
string
;
fixed
?
:
string
;
serif
?
:
string
;
sansSerif
?
:
string
;
cursive
?
:
string
;
fantasy
?
:
string
;
math
?
:
string
;
}
export
interface
ScriptFontFamilies
{
script
:
string
;
fontFamilies
:
FontFamilies
;
}
export
interface
FontSizes
{
standard
?
:
integer
;
fixed
?
:
integer
;
}
export
type
ClientNavigationReason
=
(
'
formSubmissionGet
'
|
'
formSubmissionPost
'
|
'
httpHeaderRefresh
'
|
'
scriptInitiated
'
|
'
metaTagRefresh
'
|
'
pageBlockInterstitial
'
|
'
reload
'
|
'
anchorClick
'
)
;
export
type
ClientNavigationDisposition
=
(
'
currentTab
'
|
'
newTab
'
|
'
newWindow
'
|
'
download
'
)
;
export
interface
InstallabilityErrorArgument
{
name
:
string
;
value
:
string
;
}
export
interface
InstallabilityError
{
errorId
:
string
;
errorArguments
:
InstallabilityErrorArgument
[
]
;
}
export
type
ReferrerPolicy
=
(
'
noReferrer
'
|
'
noReferrerWhenDowngrade
'
|
'
origin
'
|
'
originWhenCrossOrigin
'
|
'
sameOrigin
'
|
'
strictOrigin
'
|
'
strictOriginWhenCrossOrigin
'
|
'
unsafeUrl
'
)
;
export
interface
CompilationCacheParams
{
url
:
string
;
eager
?
:
boolean
;
}
export
type
NavigationType
=
(
'
Navigation
'
|
'
BackForwardCacheRestore
'
)
;
export
type
BackForwardCacheNotRestoredReason
=
(
'
NotPrimaryMainFrame
'
|
'
BackForwardCacheDisabled
'
|
'
RelatedActiveContentsExist
'
|
'
HTTPStatusNotOK
'
|
'
SchemeNotHTTPOrHTTPS
'
|
'
Loading
'
|
'
WasGrantedMediaAccess
'
|
'
DisableForRenderFrameHostCalled
'
|
'
DomainNotAllowed
'
|
'
HTTPMethodNotGET
'
|
'
SubframeIsNavigating
'
|
'
Timeout
'
|
'
CacheLimit
'
|
'
JavaScriptExecution
'
|
'
RendererProcessKilled
'
|
'
RendererProcessCrashed
'
|
'
SchedulerTrackedFeatureUsed
'
|
'
ConflictingBrowsingInstance
'
|
'
CacheFlushed
'
|
'
ServiceWorkerVersionActivation
'
|
'
SessionRestored
'
|
'
ServiceWorkerPostMessage
'
|
'
EnteredBackForwardCacheBeforeServiceWorkerHostAdded
'
|
'
RenderFrameHostReused_SameSite
'
|
'
RenderFrameHostReused_CrossSite
'
|
'
ServiceWorkerClaim
'
|
'
IgnoreEventAndEvict
'
|
'
HaveInnerContents
'
|
'
TimeoutPuttingInCache
'
|
'
BackForwardCacheDisabledByLowMemory
'
|
'
BackForwardCacheDisabledByCommandLine
'
|
'
NetworkRequestDatapipeDrainedAsBytesConsumer
'
|
'
NetworkRequestRedirected
'
|
'
NetworkRequestTimeout
'
|
'
NetworkExceedsBufferLimit
'
|
'
NavigationCancelledWhileRestoring
'
|
'
NotMostRecentNavigationEntry
'
|
'
BackForwardCacheDisabledForPrerender
'
|
'
UserAgentOverrideDiffers
'
|
'
ForegroundCacheLimit
'
|
'
BrowsingInstanceNotSwapped
'
|
'
BackForwardCacheDisabledForDelegate
'
|
'
UnloadHandlerExistsInMainFrame
'
|
'
UnloadHandlerExistsInSubFrame
'
|
'
ServiceWorkerUnregistration
'
|
'
CacheControlNoStore
'
|
'
CacheControlNoStoreCookieModified
'
|
'
CacheControlNoStoreHTTPOnlyCookieModified
'
|
'
NoResponseHead
'
|
'
Unknown
'
|
'
ActivationNavigationsDisallowedForBug1234857
'
|
'
ErrorDocument
'
|
'
FencedFramesEmbedder
'
|
'
WebSocket
'
|
'
WebTransport
'
|
'
WebRTC
'
|
'
MainResourceHasCacheControlNoStore
'
|
'
MainResourceHasCacheControlNoCache
'
|
'
SubresourceHasCacheControlNoStore
'
|
'
SubresourceHasCacheControlNoCache
'
|
'
ContainsPlugins
'
|
'
DocumentLoaded
'
|
'
DedicatedWorkerOrWorklet
'
|
'
OutstandingNetworkRequestOthers
'
|
'
OutstandingIndexedDBTransaction
'
|
'
RequestedMIDIPermission
'
|
'
RequestedAudioCapturePermission
'
|
'
RequestedVideoCapturePermission
'
|
'
RequestedBackForwardCacheBlockedSensors
'
|
'
RequestedBackgroundWorkPermission
'
|
'
BroadcastChannel
'
|
'
IndexedDBConnection
'
|
'
WebXR
'
|
'
SharedWorker
'
|
'
WebLocks
'
|
'
WebHID
'
|
'
WebShare
'
|
'
RequestedStorageAccessGrant
'
|
'
WebNfc
'
|
'
OutstandingNetworkRequestFetch
'
|
'
OutstandingNetworkRequestXHR
'
|
'
AppBanner
'
|
'
Printing
'
|
'
WebDatabase
'
|
'
PictureInPicture
'
|
'
Portal
'
|
'
SpeechRecognizer
'
|
'
IdleManager
'
|
'
PaymentManager
'
|
'
SpeechSynthesis
'
|
'
KeyboardLock
'
|
'
WebOTPService
'
|
'
OutstandingNetworkRequestDirectSocket
'
|
'
InjectedJavascript
'
|
'
InjectedStyleSheet
'
|
'
KeepaliveRequest
'
|
'
Dummy
'
|
'
AuthorizationHeader
'
|
'
ContentSecurityHandler
'
|
'
ContentWebAuthenticationAPI
'
|
'
ContentFileChooser
'
|
'
ContentSerial
'
|
'
ContentFileSystemAccess
'
|
'
ContentMediaDevicesDispatcherHost
'
|
'
ContentWebBluetooth
'
|
'
ContentWebUSB
'
|
'
ContentMediaSessionService
'
|
'
ContentScreenReader
'
|
'
EmbedderPopupBlockerTabHelper
'
|
'
EmbedderSafeBrowsingTriggeredPopupBlocker
'
|
'
EmbedderSafeBrowsingThreatDetails
'
|
'
EmbedderAppBannerManager
'
|
'
EmbedderDomDistillerViewerSource
'
|
'
EmbedderDomDistillerSelfDeletingRequestDelegate
'
|
'
EmbedderOomInterventionTabHelper
'
|
'
EmbedderOfflinePage
'
|
'
EmbedderChromePasswordManagerClientBindCredentialManager
'
|
'
EmbedderPermissionRequestManager
'
|
'
EmbedderModalDialog
'
|
'
EmbedderExtensions
'
|
'
EmbedderExtensionMessaging
'
|
'
EmbedderExtensionMessagingForOpenPort
'
|
'
EmbedderExtensionSentMessageToCachedFrame
'
)
;
export
type
BackForwardCacheNotRestoredReasonType
=
(
'
SupportPending
'
|
'
PageSupportNeeded
'
|
'
Circumstantial
'
)
;
export
interface
BackForwardCacheNotRestoredExplanation
{
type
:
BackForwardCacheNotRestoredReasonType
;
reason
:
BackForwardCacheNotRestoredReason
;
context
?
:
string
;
}
export
interface
BackForwardCacheNotRestoredExplanationTree
{
url
:
string
;
explanations
:
BackForwardCacheNotRestoredExplanation
[
]
;
children
:
BackForwardCacheNotRestoredExplanationTree
[
]
;
}
export
type
PrerenderFinalStatus
=
(
'
Activated
'
|
'
Destroyed
'
|
'
LowEndDevice
'
|
'
InvalidSchemeRedirect
'
|
'
InvalidSchemeNavigation
'
|
'
InProgressNavigation
'
|
'
NavigationRequestBlockedByCsp
'
|
'
MainFrameNavigation
'
|
'
MojoBinderPolicy
'
|
'
RendererProcessCrashed
'
|
'
RendererProcessKilled
'
|
'
Download
'
|
'
TriggerDestroyed
'
|
'
NavigationNotCommitted
'
|
'
NavigationBadHttpStatus
'
|
'
ClientCertRequested
'
|
'
NavigationRequestNetworkError
'
|
'
MaxNumOfRunningPrerendersExceeded
'
|
'
CancelAllHostsForTesting
'
|
'
DidFailLoad
'
|
'
Stop
'
|
'
SslCertificateError
'
|
'
LoginAuthRequested
'
|
'
UaChangeRequiresReload
'
|
'
BlockedByClient
'
|
'
AudioOutputDeviceRequested
'
|
'
MixedContent
'
|
'
TriggerBackgrounded
'
|
'
EmbedderTriggeredAndCrossOriginRedirected
'
|
'
MemoryLimitExceeded
'
|
'
FailToGetMemoryUsage
'
|
'
DataSaverEnabled
'
|
'
HasEffectiveUrl
'
|
'
ActivatedBeforeStarted
'
|
'
InactivePageRestriction
'
|
'
StartFailed
'
|
'
TimeoutBackgrounded
'
|
'
CrossSiteRedirect
'
|
'
CrossSiteNavigation
'
|
'
SameSiteCrossOriginRedirect
'
|
'
SameSiteCrossOriginNavigation
'
|
'
SameSiteCrossOriginRedirectNotOptIn
'
|
'
SameSiteCrossOriginNavigationNotOptIn
'
|
'
ActivationNavigationParameterMismatch
'
|
'
ActivatedInBackground
'
|
'
EmbedderHostDisallowed
'
)
;
export
interface
AddScriptToEvaluateOnLoadRequest
{
scriptSource
:
string
;
}
export
interface
AddScriptToEvaluateOnLoadResponse
{
identifier
:
ScriptIdentifier
;
}
export
interface
AddScriptToEvaluateOnNewDocumentRequest
{
source
:
string
;
worldName
?
:
string
;
includeCommandLineAPI
?
:
boolean
;
}
export
interface
AddScriptToEvaluateOnNewDocumentResponse
{
identifier
:
ScriptIdentifier
;
}
export
const
enum
CaptureScreenshotRequestFormat
{
Jpeg
=
'
jpeg
'
Png
=
'
png
'
Webp
=
'
webp
'
}
export
interface
CaptureScreenshotRequest
{
format
?
:
(
'
jpeg
'
|
'
png
'
|
'
webp
'
)
;
quality
?
:
integer
;
clip
?
:
Viewport
;
fromSurface
?
:
boolean
;
captureBeyondViewport
?
:
boolean
;
optimizeForSpeed
?
:
boolean
;
}
export
interface
CaptureScreenshotResponse
{
data
:
string
;
}
export
const
enum
CaptureSnapshotRequestFormat
{
MHTML
=
'
mhtml
'
}
export
interface
CaptureSnapshotRequest
{
format
?
:
(
'
mhtml
'
)
;
}
export
interface
CaptureSnapshotResponse
{
data
:
string
;
}
export
interface
CreateIsolatedWorldRequest
{
frameId
:
FrameId
;
worldName
?
:
string
;
grantUniveralAccess
?
:
boolean
;
}
export
interface
CreateIsolatedWorldResponse
{
executionContextId
:
Runtime
.
ExecutionContextId
;
}
export
interface
DeleteCookieRequest
{
cookieName
:
string
;
url
:
string
;
}
export
interface
GetAppManifestResponse
{
url
:
string
;
errors
:
AppManifestError
[
]
;
data
?
:
string
;
parsed
?
:
AppManifestParsedProperties
;
}
export
interface
GetInstallabilityErrorsResponse
{
installabilityErrors
:
InstallabilityError
[
]
;
}
export
interface
GetManifestIconsResponse
{
primaryIcon
?
:
string
;
}
export
interface
GetAppIdResponse
{
appId
?
:
string
;
recommendedId
?
:
string
;
}
export
interface
GetAdScriptIdRequest
{
frameId
:
FrameId
;
}
export
interface
GetAdScriptIdResponse
{
adScriptId
?
:
AdScriptId
;
}
export
interface
GetCookiesResponse
{
cookies
:
Network
.
Cookie
[
]
;
}
export
interface
GetFrameTreeResponse
{
frameTree
:
FrameTree
;
}
export
interface
GetLayoutMetricsResponse
{
layoutViewport
:
LayoutViewport
;
visualViewport
:
VisualViewport
;
contentSize
:
DOM
.
Rect
;
cssLayoutViewport
:
LayoutViewport
;
cssVisualViewport
:
VisualViewport
;
cssContentSize
:
DOM
.
Rect
;
}
export
interface
GetNavigationHistoryResponse
{
currentIndex
:
integer
;
entries
:
NavigationEntry
[
]
;
}
export
interface
GetResourceContentRequest
{
frameId
:
FrameId
;
url
:
string
;
}
export
interface
GetResourceContentResponse
{
content
:
string
;
base64Encoded
:
boolean
;
}
export
interface
GetResourceTreeResponse
{
frameTree
:
FrameResourceTree
;
}
export
interface
HandleJavaScriptDialogRequest
{
accept
:
boolean
;
promptText
?
:
string
;
}
export
interface
NavigateRequest
{
url
:
string
;
referrer
?
:
string
;
transitionType
?
:
TransitionType
;
frameId
?
:
FrameId
;
referrerPolicy
?
:
ReferrerPolicy
;
}
export
interface
NavigateResponse
{
frameId
:
FrameId
;
loaderId
?
:
Network
.
LoaderId
;
errorText
?
:
string
;
}
export
interface
NavigateToHistoryEntryRequest
{
entryId
:
integer
;
}
export
const
enum
PrintToPDFRequestTransferMode
{
ReturnAsBase64
=
'
ReturnAsBase64
'
ReturnAsStream
=
'
ReturnAsStream
'
}
export
interface
PrintToPDFRequest
{
landscape
?
:
boolean
;
displayHeaderFooter
?
:
boolean
;
printBackground
?
:
boolean
;
scale
?
:
number
;
paperWidth
?
:
number
;
paperHeight
?
:
number
;
marginTop
?
:
number
;
marginBottom
?
:
number
;
marginLeft
?
:
number
;
marginRight
?
:
number
;
pageRanges
?
:
string
;
headerTemplate
?
:
string
;
footerTemplate
?
:
string
;
preferCSSPageSize
?
:
boolean
;
transferMode
?
:
(
'
ReturnAsBase64
'
|
'
ReturnAsStream
'
)
;
}
export
interface
PrintToPDFResponse
{
data
:
string
;
stream
?
:
IO
.
StreamHandle
;
}
export
interface
ReloadRequest
{
ignoreCache
?
:
boolean
;
scriptToEvaluateOnLoad
?
:
string
;
}
export
interface
RemoveScriptToEvaluateOnLoadRequest
{
identifier
:
ScriptIdentifier
;
}
export
interface
RemoveScriptToEvaluateOnNewDocumentRequest
{
identifier
:
ScriptIdentifier
;
}
export
interface
ScreencastFrameAckRequest
{
sessionId
:
integer
;
}
export
interface
SearchInResourceRequest
{
frameId
:
FrameId
;
url
:
string
;
query
:
string
;
caseSensitive
?
:
boolean
;
isRegex
?
:
boolean
;
}
export
interface
SearchInResourceResponse
{
result
:
Debugger
.
SearchMatch
[
]
;
}
export
interface
SetAdBlockingEnabledRequest
{
enabled
:
boolean
;
}
export
interface
SetBypassCSPRequest
{
enabled
:
boolean
;
}
export
interface
GetPermissionsPolicyStateRequest
{
frameId
:
FrameId
;
}
export
interface
GetPermissionsPolicyStateResponse
{
states
:
PermissionsPolicyFeatureState
[
]
;
}
export
interface
GetOriginTrialsRequest
{
frameId
:
FrameId
;
}
export
interface
GetOriginTrialsResponse
{
originTrials
:
OriginTrial
[
]
;
}
export
interface
SetDeviceMetricsOverrideRequest
{
width
:
integer
;
height
:
integer
;
deviceScaleFactor
:
number
;
mobile
:
boolean
;
scale
?
:
number
;
screenWidth
?
:
integer
;
screenHeight
?
:
integer
;
positionX
?
:
integer
;
positionY
?
:
integer
;
dontSetVisibleSize
?
:
boolean
;
screenOrientation
?
:
Emulation
.
ScreenOrientation
;
viewport
?
:
Viewport
;
}
export
interface
SetDeviceOrientationOverrideRequest
{
alpha
:
number
;
beta
:
number
;
gamma
:
number
;
}
export
interface
SetFontFamiliesRequest
{
fontFamilies
:
FontFamilies
;
forScripts
?
:
ScriptFontFamilies
[
]
;
}
export
interface
SetFontSizesRequest
{
fontSizes
:
FontSizes
;
}
export
interface
SetDocumentContentRequest
{
frameId
:
FrameId
;
html
:
string
;
}
export
const
enum
SetDownloadBehaviorRequestBehavior
{
Deny
=
'
deny
'
Allow
=
'
allow
'
Default
=
'
default
'
}
export
interface
SetDownloadBehaviorRequest
{
behavior
:
(
'
deny
'
|
'
allow
'
|
'
default
'
)
;
downloadPath
?
:
string
;
}
export
interface
SetGeolocationOverrideRequest
{
latitude
?
:
number
;
longitude
?
:
number
;
accuracy
?
:
number
;
}
export
interface
SetLifecycleEventsEnabledRequest
{
enabled
:
boolean
;
}
export
const
enum
SetTouchEmulationEnabledRequestConfiguration
{
Mobile
=
'
mobile
'
Desktop
=
'
desktop
'
}
export
interface
SetTouchEmulationEnabledRequest
{
enabled
:
boolean
;
configuration
?
:
(
'
mobile
'
|
'
desktop
'
)
;
}
export
const
enum
StartScreencastRequestFormat
{
Jpeg
=
'
jpeg
'
Png
=
'
png
'
}
export
interface
StartScreencastRequest
{
format
?
:
(
'
jpeg
'
|
'
png
'
)
;
quality
?
:
integer
;
maxWidth
?
:
integer
;
maxHeight
?
:
integer
;
everyNthFrame
?
:
integer
;
}
export
const
enum
SetWebLifecycleStateRequestState
{
Frozen
=
'
frozen
'
Active
=
'
active
'
}
export
interface
SetWebLifecycleStateRequest
{
state
:
(
'
frozen
'
|
'
active
'
)
;
}
export
interface
ProduceCompilationCacheRequest
{
scripts
:
CompilationCacheParams
[
]
;
}
export
interface
AddCompilationCacheRequest
{
url
:
string
;
data
:
string
;
}
export
const
enum
SetSPCTransactionModeRequestMode
{
None
=
'
none
'
AutoAccept
=
'
autoAccept
'
AutoReject
=
'
autoReject
'
AutoOptOut
=
'
autoOptOut
'
}
export
interface
SetSPCTransactionModeRequest
{
mode
:
(
'
none
'
|
'
autoAccept
'
|
'
autoReject
'
|
'
autoOptOut
'
)
;
}
export
interface
GenerateTestReportRequest
{
message
:
string
;
group
?
:
string
;
}
export
interface
SetInterceptFileChooserDialogRequest
{
enabled
:
boolean
;
}
export
interface
DomContentEventFiredEvent
{
timestamp
:
Network
.
MonotonicTime
;
}
export
const
enum
FileChooserOpenedEventMode
{
SelectSingle
=
'
selectSingle
'
SelectMultiple
=
'
selectMultiple
'
}
export
interface
FileChooserOpenedEvent
{
frameId
:
FrameId
;
mode
:
(
'
selectSingle
'
|
'
selectMultiple
'
)
;
backendNodeId
?
:
DOM
.
BackendNodeId
;
}
export
interface
FrameAttachedEvent
{
frameId
:
FrameId
;
parentFrameId
:
FrameId
;
stack
?
:
Runtime
.
StackTrace
;
}
export
interface
FrameClearedScheduledNavigationEvent
{
frameId
:
FrameId
;
}
export
const
enum
FrameDetachedEventReason
{
Remove
=
'
remove
'
Swap
=
'
swap
'
}
export
interface
FrameDetachedEvent
{
frameId
:
FrameId
;
reason
:
(
'
remove
'
|
'
swap
'
)
;
}
export
interface
FrameNavigatedEvent
{
frame
:
Frame
;
type
:
NavigationType
;
}
export
interface
DocumentOpenedEvent
{
frame
:
Frame
;
}
export
interface
FrameRequestedNavigationEvent
{
frameId
:
FrameId
;
reason
:
ClientNavigationReason
;
url
:
string
;
disposition
:
ClientNavigationDisposition
;
}
export
interface
FrameScheduledNavigationEvent
{
frameId
:
FrameId
;
delay
:
number
;
reason
:
ClientNavigationReason
;
url
:
string
;
}
export
interface
FrameStartedLoadingEvent
{
frameId
:
FrameId
;
}
export
interface
FrameStoppedLoadingEvent
{
frameId
:
FrameId
;
}
export
interface
DownloadWillBeginEvent
{
frameId
:
FrameId
;
guid
:
string
;
url
:
string
;
suggestedFilename
:
string
;
}
export
const
enum
DownloadProgressEventState
{
InProgress
=
'
inProgress
'
Completed
=
'
completed
'
Canceled
=
'
canceled
'
}
export
interface
DownloadProgressEvent
{
guid
:
string
;
totalBytes
:
number
;
receivedBytes
:
number
;
state
:
(
'
inProgress
'
|
'
completed
'
|
'
canceled
'
)
;
}
export
interface
JavascriptDialogClosedEvent
{
result
:
boolean
;
userInput
:
string
;
}
export
interface
JavascriptDialogOpeningEvent
{
url
:
string
;
message
:
string
;
type
:
DialogType
;
hasBrowserHandler
:
boolean
;
defaultPrompt
?
:
string
;
}
export
interface
LifecycleEventEvent
{
frameId
:
FrameId
;
loaderId
:
Network
.
LoaderId
;
name
:
string
;
timestamp
:
Network
.
MonotonicTime
;
}
export
interface
BackForwardCacheNotUsedEvent
{
loaderId
:
Network
.
LoaderId
;
frameId
:
FrameId
;
notRestoredExplanations
:
BackForwardCacheNotRestoredExplanation
[
]
;
notRestoredExplanationsTree
?
:
BackForwardCacheNotRestoredExplanationTree
;
}
export
interface
PrerenderAttemptCompletedEvent
{
initiatingFrameId
:
FrameId
;
prerenderingUrl
:
string
;
finalStatus
:
PrerenderFinalStatus
;
disallowedApiMethod
?
:
string
;
}
export
interface
LoadEventFiredEvent
{
timestamp
:
Network
.
MonotonicTime
;
}
export
interface
NavigatedWithinDocumentEvent
{
frameId
:
FrameId
;
url
:
string
;
}
export
interface
ScreencastFrameEvent
{
data
:
string
;
metadata
:
ScreencastFrameMetadata
;
sessionId
:
integer
;
}
export
interface
ScreencastVisibilityChangedEvent
{
visible
:
boolean
;
}
export
interface
WindowOpenEvent
{
url
:
string
;
windowName
:
string
;
windowFeatures
:
string
[
]
;
userGesture
:
boolean
;
}
export
interface
CompilationCacheProducedEvent
{
url
:
string
;
data
:
string
;
}
}
export
namespace
Performance
{
export
interface
Metric
{
name
:
string
;
value
:
number
;
}
export
const
enum
EnableRequestTimeDomain
{
TimeTicks
=
'
timeTicks
'
ThreadTicks
=
'
threadTicks
'
}
export
interface
EnableRequest
{
timeDomain
?
:
(
'
timeTicks
'
|
'
threadTicks
'
)
;
}
export
const
enum
SetTimeDomainRequestTimeDomain
{
TimeTicks
=
'
timeTicks
'
ThreadTicks
=
'
threadTicks
'
}
export
interface
SetTimeDomainRequest
{
timeDomain
:
(
'
timeTicks
'
|
'
threadTicks
'
)
;
}
export
interface
GetMetricsResponse
{
metrics
:
Metric
[
]
;
}
export
interface
MetricsEvent
{
metrics
:
Metric
[
]
;
title
:
string
;
}
}
export
namespace
PerformanceTimeline
{
export
interface
LargestContentfulPaint
{
renderTime
:
Network
.
TimeSinceEpoch
;
loadTime
:
Network
.
TimeSinceEpoch
;
size
:
number
;
elementId
?
:
string
;
url
?
:
string
;
nodeId
?
:
DOM
.
BackendNodeId
;
}
export
interface
LayoutShiftAttribution
{
previousRect
:
DOM
.
Rect
;
currentRect
:
DOM
.
Rect
;
nodeId
?
:
DOM
.
BackendNodeId
;
}
export
interface
LayoutShift
{
value
:
number
;
hadRecentInput
:
boolean
;
lastInputTime
:
Network
.
TimeSinceEpoch
;
sources
:
LayoutShiftAttribution
[
]
;
}
export
interface
TimelineEvent
{
frameId
:
Page
.
FrameId
;
type
:
string
;
name
:
string
;
time
:
Network
.
TimeSinceEpoch
;
duration
?
:
number
;
lcpDetails
?
:
LargestContentfulPaint
;
layoutShiftDetails
?
:
LayoutShift
;
}
export
interface
EnableRequest
{
eventTypes
:
string
[
]
;
}
export
interface
TimelineEventAddedEvent
{
event
:
TimelineEvent
;
}
}
export
namespace
Security
{
export
type
CertificateId
=
integer
;
export
type
MixedContentType
=
(
'
blockable
'
|
'
optionally
-
blockable
'
|
'
none
'
)
;
export
type
SecurityState
=
(
'
unknown
'
|
'
neutral
'
|
'
insecure
'
|
'
secure
'
|
'
info
'
|
'
insecure
-
broken
'
)
;
export
interface
CertificateSecurityState
{
protocol
:
string
;
keyExchange
:
string
;
keyExchangeGroup
?
:
string
;
cipher
:
string
;
mac
?
:
string
;
certificate
:
string
[
]
;
subjectName
:
string
;
issuer
:
string
;
validFrom
:
Network
.
TimeSinceEpoch
;
validTo
:
Network
.
TimeSinceEpoch
;
certificateNetworkError
?
:
string
;
certificateHasWeakSignature
:
boolean
;
certificateHasSha1Signature
:
boolean
;
modernSSL
:
boolean
;
obsoleteSslProtocol
:
boolean
;
obsoleteSslKeyExchange
:
boolean
;
obsoleteSslCipher
:
boolean
;
obsoleteSslSignature
:
boolean
;
}
export
type
SafetyTipStatus
=
(
'
badReputation
'
|
'
lookalike
'
)
;
export
interface
SafetyTipInfo
{
safetyTipStatus
:
SafetyTipStatus
;
safeUrl
?
:
string
;
}
export
interface
VisibleSecurityState
{
securityState
:
SecurityState
;
certificateSecurityState
?
:
CertificateSecurityState
;
safetyTipInfo
?
:
SafetyTipInfo
;
securityStateIssueIds
:
string
[
]
;
}
export
interface
SecurityStateExplanation
{
securityState
:
SecurityState
;
title
:
string
;
summary
:
string
;
description
:
string
;
mixedContentType
:
MixedContentType
;
certificate
:
string
[
]
;
recommendations
?
:
string
[
]
;
}
export
interface
InsecureContentStatus
{
ranMixedContent
:
boolean
;
displayedMixedContent
:
boolean
;
containedMixedForm
:
boolean
;
ranContentWithCertErrors
:
boolean
;
displayedContentWithCertErrors
:
boolean
;
ranInsecureContentStyle
:
SecurityState
;
displayedInsecureContentStyle
:
SecurityState
;
}
export
type
CertificateErrorAction
=
(
'
continue
'
|
'
cancel
'
)
;
export
interface
SetIgnoreCertificateErrorsRequest
{
ignore
:
boolean
;
}
export
interface
HandleCertificateErrorRequest
{
eventId
:
integer
;
action
:
CertificateErrorAction
;
}
export
interface
SetOverrideCertificateErrorsRequest
{
override
:
boolean
;
}
export
interface
CertificateErrorEvent
{
eventId
:
integer
;
errorType
:
string
;
requestURL
:
string
;
}
export
interface
VisibleSecurityStateChangedEvent
{
visibleSecurityState
:
VisibleSecurityState
;
}
export
interface
SecurityStateChangedEvent
{
securityState
:
SecurityState
;
schemeIsCryptographic
:
boolean
;
explanations
:
SecurityStateExplanation
[
]
;
insecureContentStatus
:
InsecureContentStatus
;
summary
?
:
string
;
}
}
export
namespace
ServiceWorker
{
export
type
RegistrationID
=
string
;
export
interface
ServiceWorkerRegistration
{
registrationId
:
RegistrationID
;
scopeURL
:
string
;
isDeleted
:
boolean
;
}
export
type
ServiceWorkerVersionRunningStatus
=
(
'
stopped
'
|
'
starting
'
|
'
running
'
|
'
stopping
'
)
;
export
type
ServiceWorkerVersionStatus
=
(
'
new
'
|
'
installing
'
|
'
installed
'
|
'
activating
'
|
'
activated
'
|
'
redundant
'
)
;
export
interface
ServiceWorkerVersion
{
versionId
:
string
;
registrationId
:
RegistrationID
;
scriptURL
:
string
;
runningStatus
:
ServiceWorkerVersionRunningStatus
;
status
:
ServiceWorkerVersionStatus
;
scriptLastModified
?
:
number
;
scriptResponseTime
?
:
number
;
controlledClients
?
:
Target
.
TargetID
[
]
;
targetId
?
:
Target
.
TargetID
;
}
export
interface
ServiceWorkerErrorMessage
{
errorMessage
:
string
;
registrationId
:
RegistrationID
;
versionId
:
string
;
sourceURL
:
string
;
lineNumber
:
integer
;
columnNumber
:
integer
;
}
export
interface
DeliverPushMessageRequest
{
origin
:
string
;
registrationId
:
RegistrationID
;
data
:
string
;
}
export
interface
DispatchSyncEventRequest
{
origin
:
string
;
registrationId
:
RegistrationID
;
tag
:
string
;
lastChance
:
boolean
;
}
export
interface
DispatchPeriodicSyncEventRequest
{
origin
:
string
;
registrationId
:
RegistrationID
;
tag
:
string
;
}
export
interface
InspectWorkerRequest
{
versionId
:
string
;
}
export
interface
SetForceUpdateOnPageLoadRequest
{
forceUpdateOnPageLoad
:
boolean
;
}
export
interface
SkipWaitingRequest
{
scopeURL
:
string
;
}
export
interface
StartWorkerRequest
{
scopeURL
:
string
;
}
export
interface
StopWorkerRequest
{
versionId
:
string
;
}
export
interface
UnregisterRequest
{
scopeURL
:
string
;
}
export
interface
UpdateRegistrationRequest
{
scopeURL
:
string
;
}
export
interface
WorkerErrorReportedEvent
{
errorMessage
:
ServiceWorkerErrorMessage
;
}
export
interface
WorkerRegistrationUpdatedEvent
{
registrations
:
ServiceWorkerRegistration
[
]
;
}
export
interface
WorkerVersionUpdatedEvent
{
versions
:
ServiceWorkerVersion
[
]
;
}
}
export
namespace
Storage
{
export
type
SerializedStorageKey
=
string
;
export
type
StorageType
=
(
'
appcache
'
|
'
cookies
'
|
'
file_systems
'
|
'
indexeddb
'
|
'
local_storage
'
|
'
shader_cache
'
|
'
websql
'
|
'
service_workers
'
|
'
cache_storage
'
|
'
interest_groups
'
|
'
shared_storage
'
|
'
all
'
|
'
other
'
)
;
export
interface
UsageForType
{
storageType
:
StorageType
;
usage
:
number
;
}
export
interface
TrustTokens
{
issuerOrigin
:
string
;
count
:
number
;
}
export
type
InterestGroupAccessType
=
(
'
join
'
|
'
leave
'
|
'
update
'
|
'
loaded
'
|
'
bid
'
|
'
win
'
)
;
export
interface
InterestGroupAd
{
renderUrl
:
string
;
metadata
?
:
string
;
}
export
interface
InterestGroupDetails
{
ownerOrigin
:
string
;
name
:
string
;
expirationTime
:
Network
.
TimeSinceEpoch
;
joiningOrigin
:
string
;
biddingUrl
?
:
string
;
biddingWasmHelperUrl
?
:
string
;
updateUrl
?
:
string
;
trustedBiddingSignalsUrl
?
:
string
;
trustedBiddingSignalsKeys
:
string
[
]
;
userBiddingSignals
?
:
string
;
ads
:
InterestGroupAd
[
]
;
adComponents
:
InterestGroupAd
[
]
;
}
export
type
SharedStorageAccessType
=
(
'
documentAddModule
'
|
'
documentSelectURL
'
|
'
documentRun
'
|
'
documentSet
'
|
'
documentAppend
'
|
'
documentDelete
'
|
'
documentClear
'
|
'
workletSet
'
|
'
workletAppend
'
|
'
workletDelete
'
|
'
workletClear
'
|
'
workletGet
'
|
'
workletKeys
'
|
'
workletEntries
'
|
'
workletLength
'
|
'
workletRemainingBudget
'
)
;
export
interface
SharedStorageEntry
{
key
:
string
;
value
:
string
;
}
export
interface
SharedStorageMetadata
{
creationTime
:
Network
.
TimeSinceEpoch
;
length
:
integer
;
remainingBudget
:
number
;
}
export
interface
SharedStorageReportingMetadata
{
eventType
:
string
;
reportingUrl
:
string
;
}
export
interface
SharedStorageUrlWithMetadata
{
url
:
string
;
reportingMetadata
:
SharedStorageReportingMetadata
[
]
;
}
export
interface
SharedStorageAccessParams
{
scriptSourceUrl
?
:
string
;
operationName
?
:
string
;
serializedData
?
:
string
;
urlsWithMetadata
?
:
SharedStorageUrlWithMetadata
[
]
;
key
?
:
string
;
value
?
:
string
;
ignoreIfPresent
?
:
boolean
;
}
export
interface
GetStorageKeyForFrameRequest
{
frameId
:
Page
.
FrameId
;
}
export
interface
GetStorageKeyForFrameResponse
{
storageKey
:
SerializedStorageKey
;
}
export
interface
ClearDataForOriginRequest
{
origin
:
string
;
storageTypes
:
string
;
}
export
interface
ClearDataForStorageKeyRequest
{
storageKey
:
string
;
storageTypes
:
string
;
}
export
interface
GetCookiesRequest
{
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
interface
GetCookiesResponse
{
cookies
:
Network
.
Cookie
[
]
;
}
export
interface
SetCookiesRequest
{
cookies
:
Network
.
CookieParam
[
]
;
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
interface
ClearCookiesRequest
{
browserContextId
?
:
Browser
.
BrowserContextID
;
}
export
interface
GetUsageAndQuotaRequest
{
origin
:
string
;
}
export
interface
GetUsageAndQuotaResponse
{
usage
:
number
;
quota
:
number
;
overrideActive
:
boolean
;
usageBreakdown
:
UsageForType
[
]
;
}
export
interface
OverrideQuotaForOriginRequest
{
origin
:
string
;
quotaSize
?
:
number
;
}
export
interface
TrackCacheStorageForOriginRequest
{
origin
:
string
;
}
export
interface
TrackCacheStorageForStorageKeyRequest
{
storageKey
:
string
;
}
export
interface
TrackIndexedDBForOriginRequest
{
origin
:
string
;
}
export
interface
TrackIndexedDBForStorageKeyRequest
{
storageKey
:
string
;
}
export
interface
UntrackCacheStorageForOriginRequest
{
origin
:
string
;
}
export
interface
UntrackCacheStorageForStorageKeyRequest
{
storageKey
:
string
;
}
export
interface
UntrackIndexedDBForOriginRequest
{
origin
:
string
;
}
export
interface
UntrackIndexedDBForStorageKeyRequest
{
storageKey
:
string
;
}
export
interface
GetTrustTokensResponse
{
tokens
:
TrustTokens
[
]
;
}
export
interface
ClearTrustTokensRequest
{
issuerOrigin
:
string
;
}
export
interface
ClearTrustTokensResponse
{
didDeleteTokens
:
boolean
;
}
export
interface
GetInterestGroupDetailsRequest
{
ownerOrigin
:
string
;
name
:
string
;
}
export
interface
GetInterestGroupDetailsResponse
{
details
:
InterestGroupDetails
;
}
export
interface
SetInterestGroupTrackingRequest
{
enable
:
boolean
;
}
export
interface
GetSharedStorageMetadataRequest
{
ownerOrigin
:
string
;
}
export
interface
GetSharedStorageMetadataResponse
{
metadata
:
SharedStorageMetadata
;
}
export
interface
GetSharedStorageEntriesRequest
{
ownerOrigin
:
string
;
}
export
interface
GetSharedStorageEntriesResponse
{
entries
:
SharedStorageEntry
[
]
;
}
export
interface
SetSharedStorageEntryRequest
{
ownerOrigin
:
string
;
key
:
string
;
value
:
string
;
ignoreIfPresent
?
:
boolean
;
}
export
interface
DeleteSharedStorageEntryRequest
{
ownerOrigin
:
string
;
key
:
string
;
}
export
interface
ClearSharedStorageEntriesRequest
{
ownerOrigin
:
string
;
}
export
interface
SetSharedStorageTrackingRequest
{
enable
:
boolean
;
}
export
interface
CacheStorageContentUpdatedEvent
{
origin
:
string
;
storageKey
:
string
;
cacheName
:
string
;
}
export
interface
CacheStorageListUpdatedEvent
{
origin
:
string
;
storageKey
:
string
;
}
export
interface
IndexedDBContentUpdatedEvent
{
origin
:
string
;
storageKey
:
string
;
databaseName
:
string
;
objectStoreName
:
string
;
}
export
interface
IndexedDBListUpdatedEvent
{
origin
:
string
;
storageKey
:
string
;
}
export
interface
InterestGroupAccessedEvent
{
accessTime
:
Network
.
TimeSinceEpoch
;
type
:
InterestGroupAccessType
;
ownerOrigin
:
string
;
name
:
string
;
}
export
interface
SharedStorageAccessedEvent
{
accessTime
:
Network
.
TimeSinceEpoch
;
type
:
SharedStorageAccessType
;
mainFrameId
:
Page
.
FrameId
;
ownerOrigin
:
string
;
params
:
SharedStorageAccessParams
;
}
}
export
namespace
SystemInfo
{
export
interface
GPUDevice
{
vendorId
:
number
;
deviceId
:
number
;
subSysId
?
:
number
;
revision
?
:
number
;
vendorString
:
string
;
deviceString
:
string
;
driverVendor
:
string
;
driverVersion
:
string
;
}
export
interface
Size
{
width
:
integer
;
height
:
integer
;
}
export
interface
VideoDecodeAcceleratorCapability
{
profile
:
string
;
maxResolution
:
Size
;
minResolution
:
Size
;
}
export
interface
VideoEncodeAcceleratorCapability
{
profile
:
string
;
maxResolution
:
Size
;
maxFramerateNumerator
:
integer
;
maxFramerateDenominator
:
integer
;
}
export
type
SubsamplingFormat
=
(
'
yuv420
'
|
'
yuv422
'
|
'
yuv444
'
)
;
export
type
ImageType
=
(
'
jpeg
'
|
'
webp
'
|
'
unknown
'
)
;
export
interface
ImageDecodeAcceleratorCapability
{
imageType
:
ImageType
;
maxDimensions
:
Size
;
minDimensions
:
Size
;
subsamplings
:
SubsamplingFormat
[
]
;
}
export
interface
GPUInfo
{
devices
:
GPUDevice
[
]
;
auxAttributes
?
:
any
;
featureStatus
?
:
any
;
driverBugWorkarounds
:
string
[
]
;
videoDecoding
:
VideoDecodeAcceleratorCapability
[
]
;
videoEncoding
:
VideoEncodeAcceleratorCapability
[
]
;
imageDecoding
:
ImageDecodeAcceleratorCapability
[
]
;
}
export
interface
ProcessInfo
{
type
:
string
;
id
:
integer
;
cpuTime
:
number
;
}
export
interface
GetInfoResponse
{
gpu
:
GPUInfo
;
modelName
:
string
;
modelVersion
:
string
;
commandLine
:
string
;
}
export
interface
GetFeatureStateRequest
{
featureState
:
string
;
}
export
interface
GetFeatureStateResponse
{
featureEnabled
:
boolean
;
}
export
interface
GetProcessInfoResponse
{
processInfo
:
ProcessInfo
[
]
;
}
}
export
namespace
Target
{
export
type
TargetID
=
string
;
export
type
SessionID
=
string
;
export
interface
TargetInfo
{
targetId
:
TargetID
;
type
:
string
;
title
:
string
;
url
:
string
;
attached
:
boolean
;
openerId
?
:
TargetID
;
canAccessOpener
:
boolean
;
openerFrameId
?
:
Page
.
FrameId
;
browserContextId
?
:
Browser
.
BrowserContextID
;
subtype
?
:
string
;
}
export
interface
FilterEntry
{
exclude
?
:
boolean
;
type
?
:
string
;
}
export
type
TargetFilter
=
FilterEntry
[
]
;
export
interface
RemoteLocation
{
host
:
string
;
port
:
integer
;
}
export
interface
ActivateTargetRequest
{
targetId
:
TargetID
;
}
export
interface
AttachToTargetRequest
{
targetId
:
TargetID
;
flatten
?
:
boolean
;
}
export
interface
AttachToTargetResponse
{
sessionId
:
SessionID
;
}
export
interface
AttachToBrowserTargetResponse
{
sessionId
:
SessionID
;
}
export
interface
CloseTargetRequest
{
targetId
:
TargetID
;
}
export
interface
CloseTargetResponse
{
success
:
boolean
;
}
export
interface
ExposeDevToolsProtocolRequest
{
targetId
:
TargetID
;
bindingName
?
:
string
;
}
export
interface
CreateBrowserContextRequest
{
disposeOnDetach
?
:
boolean
;
proxyServer
?
:
string
;
proxyBypassList
?
:
string
;
originsWithUniversalNetworkAccess
?
:
string
[
]
;
}
export
interface
CreateBrowserContextResponse
{
browserContextId
:
Browser
.
BrowserContextID
;
}
export
interface
GetBrowserContextsResponse
{
browserContextIds
:
Browser
.
BrowserContextID
[
]
;
}
export
interface
CreateTargetRequest
{
url
:
string
;
width
?
:
integer
;
height
?
:
integer
;
browserContextId
?
:
Browser
.
BrowserContextID
;
enableBeginFrameControl
?
:
boolean
;
newWindow
?
:
boolean
;
background
?
:
boolean
;
}
export
interface
CreateTargetResponse
{
targetId
:
TargetID
;
}
export
interface
DetachFromTargetRequest
{
sessionId
?
:
SessionID
;
targetId
?
:
TargetID
;
}
export
interface
DisposeBrowserContextRequest
{
browserContextId
:
Browser
.
BrowserContextID
;
}
export
interface
GetTargetInfoRequest
{
targetId
?
:
TargetID
;
}
export
interface
GetTargetInfoResponse
{
targetInfo
:
TargetInfo
;
}
export
interface
GetTargetsRequest
{
filter
?
:
TargetFilter
;
}
export
interface
GetTargetsResponse
{
targetInfos
:
TargetInfo
[
]
;
}
export
interface
SendMessageToTargetRequest
{
message
:
string
;
sessionId
?
:
SessionID
;
targetId
?
:
TargetID
;
}
export
interface
SetAutoAttachRequest
{
autoAttach
:
boolean
;
waitForDebuggerOnStart
:
boolean
;
flatten
?
:
boolean
;
filter
?
:
TargetFilter
;
}
export
interface
AutoAttachRelatedRequest
{
targetId
:
TargetID
;
waitForDebuggerOnStart
:
boolean
;
filter
?
:
TargetFilter
;
}
export
interface
SetDiscoverTargetsRequest
{
discover
:
boolean
;
filter
?
:
TargetFilter
;
}
export
interface
SetRemoteLocationsRequest
{
locations
:
RemoteLocation
[
]
;
}
export
interface
AttachedToTargetEvent
{
sessionId
:
SessionID
;
targetInfo
:
TargetInfo
;
waitingForDebugger
:
boolean
;
}
export
interface
DetachedFromTargetEvent
{
sessionId
:
SessionID
;
targetId
?
:
TargetID
;
}
export
interface
ReceivedMessageFromTargetEvent
{
sessionId
:
SessionID
;
message
:
string
;
targetId
?
:
TargetID
;
}
export
interface
TargetCreatedEvent
{
targetInfo
:
TargetInfo
;
}
export
interface
TargetDestroyedEvent
{
targetId
:
TargetID
;
}
export
interface
TargetCrashedEvent
{
targetId
:
TargetID
;
status
:
string
;
errorCode
:
integer
;
}
export
interface
TargetInfoChangedEvent
{
targetInfo
:
TargetInfo
;
}
}
export
namespace
Tethering
{
export
interface
BindRequest
{
port
:
integer
;
}
export
interface
UnbindRequest
{
port
:
integer
;
}
export
interface
AcceptedEvent
{
port
:
integer
;
connectionId
:
string
;
}
}
export
namespace
Tracing
{
export
interface
MemoryDumpConfig
{
[
key
:
string
]
:
string
;
}
export
const
enum
TraceConfigRecordMode
{
RecordUntilFull
=
'
recordUntilFull
'
RecordContinuously
=
'
recordContinuously
'
RecordAsMuchAsPossible
=
'
recordAsMuchAsPossible
'
EchoToConsole
=
'
echoToConsole
'
}
export
interface
TraceConfig
{
recordMode
?
:
(
'
recordUntilFull
'
|
'
recordContinuously
'
|
'
recordAsMuchAsPossible
'
|
'
echoToConsole
'
)
;
traceBufferSizeInKb
?
:
number
;
enableSampling
?
:
boolean
;
enableSystrace
?
:
boolean
;
enableArgumentFilter
?
:
boolean
;
includedCategories
?
:
string
[
]
;
excludedCategories
?
:
string
[
]
;
syntheticDelays
?
:
string
[
]
;
memoryDumpConfig
?
:
MemoryDumpConfig
;
}
export
type
StreamFormat
=
(
'
json
'
|
'
proto
'
)
;
export
type
StreamCompression
=
(
'
none
'
|
'
gzip
'
)
;
export
type
MemoryDumpLevelOfDetail
=
(
'
background
'
|
'
light
'
|
'
detailed
'
)
;
export
type
TracingBackend
=
(
'
auto
'
|
'
chrome
'
|
'
system
'
)
;
export
interface
GetCategoriesResponse
{
categories
:
string
[
]
;
}
export
interface
RecordClockSyncMarkerRequest
{
syncId
:
string
;
}
export
interface
RequestMemoryDumpRequest
{
deterministic
?
:
boolean
;
levelOfDetail
?
:
MemoryDumpLevelOfDetail
;
}
export
interface
RequestMemoryDumpResponse
{
dumpGuid
:
string
;
success
:
boolean
;
}
export
const
enum
StartRequestTransferMode
{
ReportEvents
=
'
ReportEvents
'
ReturnAsStream
=
'
ReturnAsStream
'
}
export
interface
StartRequest
{
categories
?
:
string
;
options
?
:
string
;
bufferUsageReportingInterval
?
:
number
;
transferMode
?
:
(
'
ReportEvents
'
|
'
ReturnAsStream
'
)
;
streamFormat
?
:
StreamFormat
;
streamCompression
?
:
StreamCompression
;
traceConfig
?
:
TraceConfig
;
perfettoConfig
?
:
string
;
tracingBackend
?
:
TracingBackend
;
}
export
interface
BufferUsageEvent
{
percentFull
?
:
number
;
eventCount
?
:
number
;
value
?
:
number
;
}
export
interface
DataCollectedEvent
{
value
:
any
[
]
;
}
export
interface
TracingCompleteEvent
{
dataLossOccurred
:
boolean
;
stream
?
:
IO
.
StreamHandle
;
traceFormat
?
:
StreamFormat
;
streamCompression
?
:
StreamCompression
;
}
}
export
namespace
Fetch
{
export
type
RequestId
=
string
;
export
type
RequestStage
=
(
'
Request
'
|
'
Response
'
)
;
export
interface
RequestPattern
{
urlPattern
?
:
string
;
resourceType
?
:
Network
.
ResourceType
;
requestStage
?
:
RequestStage
;
}
export
interface
HeaderEntry
{
name
:
string
;
value
:
string
;
}
export
const
enum
AuthChallengeSource
{
Server
=
'
Server
'
Proxy
=
'
Proxy
'
}
export
interface
AuthChallenge
{
source
?
:
(
'
Server
'
|
'
Proxy
'
)
;
origin
:
string
;
scheme
:
string
;
realm
:
string
;
}
export
const
enum
AuthChallengeResponseResponse
{
Default
=
'
Default
'
CancelAuth
=
'
CancelAuth
'
ProvideCredentials
=
'
ProvideCredentials
'
}
export
interface
AuthChallengeResponse
{
response
:
(
'
Default
'
|
'
CancelAuth
'
|
'
ProvideCredentials
'
)
;
username
?
:
string
;
password
?
:
string
;
}
export
interface
EnableRequest
{
patterns
?
:
RequestPattern
[
]
;
handleAuthRequests
?
:
boolean
;
}
export
interface
FailRequestRequest
{
requestId
:
RequestId
;
errorReason
:
Network
.
ErrorReason
;
}
export
interface
FulfillRequestRequest
{
requestId
:
RequestId
;
responseCode
:
integer
;
responseHeaders
?
:
HeaderEntry
[
]
;
binaryResponseHeaders
?
:
string
;
body
?
:
string
;
responsePhrase
?
:
string
;
}
export
interface
ContinueRequestRequest
{
requestId
:
RequestId
;
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
HeaderEntry
[
]
;
interceptResponse
?
:
boolean
;
}
export
interface
ContinueWithAuthRequest
{
requestId
:
RequestId
;
authChallengeResponse
:
AuthChallengeResponse
;
}
export
interface
ContinueResponseRequest
{
requestId
:
RequestId
;
responseCode
?
:
integer
;
responsePhrase
?
:
string
;
responseHeaders
?
:
HeaderEntry
[
]
;
binaryResponseHeaders
?
:
string
;
}
export
interface
GetResponseBodyRequest
{
requestId
:
RequestId
;
}
export
interface
GetResponseBodyResponse
{
body
:
string
;
base64Encoded
:
boolean
;
}
export
interface
TakeResponseBodyAsStreamRequest
{
requestId
:
RequestId
;
}
export
interface
TakeResponseBodyAsStreamResponse
{
stream
:
IO
.
StreamHandle
;
}
export
interface
RequestPausedEvent
{
requestId
:
RequestId
;
request
:
Network
.
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
Network
.
ResourceType
;
responseErrorReason
?
:
Network
.
ErrorReason
;
responseStatusCode
?
:
integer
;
responseStatusText
?
:
string
;
responseHeaders
?
:
HeaderEntry
[
]
;
networkId
?
:
Network
.
RequestId
;
redirectedRequestId
?
:
RequestId
;
}
export
interface
AuthRequiredEvent
{
requestId
:
RequestId
;
request
:
Network
.
Request
;
frameId
:
Page
.
FrameId
;
resourceType
:
Network
.
ResourceType
;
authChallenge
:
AuthChallenge
;
}
}
export
namespace
WebAudio
{
export
type
GraphObjectId
=
string
;
export
type
ContextType
=
(
'
realtime
'
|
'
offline
'
)
;
export
type
ContextState
=
(
'
suspended
'
|
'
running
'
|
'
closed
'
)
;
export
type
NodeType
=
string
;
export
type
ChannelCountMode
=
(
'
clamped
-
max
'
|
'
explicit
'
|
'
max
'
)
;
export
type
ChannelInterpretation
=
(
'
discrete
'
|
'
speakers
'
)
;
export
type
ParamType
=
string
;
export
type
AutomationRate
=
(
'
a
-
rate
'
|
'
k
-
rate
'
)
;
export
interface
ContextRealtimeData
{
currentTime
:
number
;
renderCapacity
:
number
;
callbackIntervalMean
:
number
;
callbackIntervalVariance
:
number
;
}
export
interface
BaseAudioContext
{
contextId
:
GraphObjectId
;
contextType
:
ContextType
;
contextState
:
ContextState
;
realtimeData
?
:
ContextRealtimeData
;
callbackBufferSize
:
number
;
maxOutputChannelCount
:
number
;
sampleRate
:
number
;
}
export
interface
AudioListener
{
listenerId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
}
export
interface
AudioNode
{
nodeId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
nodeType
:
NodeType
;
numberOfInputs
:
number
;
numberOfOutputs
:
number
;
channelCount
:
number
;
channelCountMode
:
ChannelCountMode
;
channelInterpretation
:
ChannelInterpretation
;
}
export
interface
AudioParam
{
paramId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
contextId
:
GraphObjectId
;
paramType
:
ParamType
;
rate
:
AutomationRate
;
defaultValue
:
number
;
minValue
:
number
;
maxValue
:
number
;
}
export
interface
GetRealtimeDataRequest
{
contextId
:
GraphObjectId
;
}
export
interface
GetRealtimeDataResponse
{
realtimeData
:
ContextRealtimeData
;
}
export
interface
ContextCreatedEvent
{
context
:
BaseAudioContext
;
}
export
interface
ContextWillBeDestroyedEvent
{
contextId
:
GraphObjectId
;
}
export
interface
ContextChangedEvent
{
context
:
BaseAudioContext
;
}
export
interface
AudioListenerCreatedEvent
{
listener
:
AudioListener
;
}
export
interface
AudioListenerWillBeDestroyedEvent
{
contextId
:
GraphObjectId
;
listenerId
:
GraphObjectId
;
}
export
interface
AudioNodeCreatedEvent
{
node
:
AudioNode
;
}
export
interface
AudioNodeWillBeDestroyedEvent
{
contextId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
}
export
interface
AudioParamCreatedEvent
{
param
:
AudioParam
;
}
export
interface
AudioParamWillBeDestroyedEvent
{
contextId
:
GraphObjectId
;
nodeId
:
GraphObjectId
;
paramId
:
GraphObjectId
;
}
export
interface
NodesConnectedEvent
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
destinationInputIndex
?
:
number
;
}
export
interface
NodesDisconnectedEvent
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
destinationInputIndex
?
:
number
;
}
export
interface
NodeParamConnectedEvent
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
}
export
interface
NodeParamDisconnectedEvent
{
contextId
:
GraphObjectId
;
sourceId
:
GraphObjectId
;
destinationId
:
GraphObjectId
;
sourceOutputIndex
?
:
number
;
}
}
export
namespace
WebAuthn
{
export
type
AuthenticatorId
=
string
;
export
type
AuthenticatorProtocol
=
(
'
u2f
'
|
'
ctap2
'
)
;
export
type
Ctap2Version
=
(
'
ctap2_0
'
|
'
ctap2_1
'
)
;
export
type
AuthenticatorTransport
=
(
'
usb
'
|
'
nfc
'
|
'
ble
'
|
'
cable
'
|
'
internal
'
)
;
export
interface
VirtualAuthenticatorOptions
{
protocol
:
AuthenticatorProtocol
;
ctap2Version
?
:
Ctap2Version
;
transport
:
AuthenticatorTransport
;
hasResidentKey
?
:
boolean
;
hasUserVerification
?
:
boolean
;
hasLargeBlob
?
:
boolean
;
hasCredBlob
?
:
boolean
;
hasMinPinLength
?
:
boolean
;
automaticPresenceSimulation
?
:
boolean
;
isUserVerified
?
:
boolean
;
}
export
interface
Credential
{
credentialId
:
string
;
isResidentCredential
:
boolean
;
rpId
?
:
string
;
privateKey
:
string
;
userHandle
?
:
string
;
signCount
:
integer
;
largeBlob
?
:
string
;
}
export
interface
EnableRequest
{
enableUI
?
:
boolean
;
}
export
interface
AddVirtualAuthenticatorRequest
{
options
:
VirtualAuthenticatorOptions
;
}
export
interface
AddVirtualAuthenticatorResponse
{
authenticatorId
:
AuthenticatorId
;
}
export
interface
SetResponseOverrideBitsRequest
{
authenticatorId
:
AuthenticatorId
;
isBogusSignature
?
:
boolean
;
isBadUV
?
:
boolean
;
isBadUP
?
:
boolean
;
}
export
interface
RemoveVirtualAuthenticatorRequest
{
authenticatorId
:
AuthenticatorId
;
}
export
interface
AddCredentialRequest
{
authenticatorId
:
AuthenticatorId
;
credential
:
Credential
;
}
export
interface
GetCredentialRequest
{
authenticatorId
:
AuthenticatorId
;
credentialId
:
string
;
}
export
interface
GetCredentialResponse
{
credential
:
Credential
;
}
export
interface
GetCredentialsRequest
{
authenticatorId
:
AuthenticatorId
;
}
export
interface
GetCredentialsResponse
{
credentials
:
Credential
[
]
;
}
export
interface
RemoveCredentialRequest
{
authenticatorId
:
AuthenticatorId
;
credentialId
:
string
;
}
export
interface
ClearCredentialsRequest
{
authenticatorId
:
AuthenticatorId
;
}
export
interface
SetUserVerifiedRequest
{
authenticatorId
:
AuthenticatorId
;
isUserVerified
:
boolean
;
}
export
interface
SetAutomaticPresenceSimulationRequest
{
authenticatorId
:
AuthenticatorId
;
enabled
:
boolean
;
}
export
interface
CredentialAddedEvent
{
authenticatorId
:
AuthenticatorId
;
credential
:
Credential
;
}
export
interface
CredentialAssertedEvent
{
authenticatorId
:
AuthenticatorId
;
credential
:
Credential
;
}
}
export
namespace
Media
{
export
type
PlayerId
=
string
;
export
type
Timestamp
=
number
;
export
const
enum
PlayerMessageLevel
{
Error
=
'
error
'
Warning
=
'
warning
'
Info
=
'
info
'
Debug
=
'
debug
'
}
export
interface
PlayerMessage
{
level
:
(
'
error
'
|
'
warning
'
|
'
info
'
|
'
debug
'
)
;
message
:
string
;
}
export
interface
PlayerProperty
{
name
:
string
;
value
:
string
;
}
export
interface
PlayerEvent
{
timestamp
:
Timestamp
;
value
:
string
;
}
export
interface
PlayerErrorSourceLocation
{
file
:
string
;
line
:
integer
;
}
export
interface
PlayerError
{
errorType
:
string
;
code
:
integer
;
stack
:
PlayerErrorSourceLocation
[
]
;
cause
:
PlayerError
[
]
;
data
:
any
;
}
export
interface
PlayerPropertiesChangedEvent
{
playerId
:
PlayerId
;
properties
:
PlayerProperty
[
]
;
}
export
interface
PlayerEventsAddedEvent
{
playerId
:
PlayerId
;
events
:
PlayerEvent
[
]
;
}
export
interface
PlayerMessagesLoggedEvent
{
playerId
:
PlayerId
;
messages
:
PlayerMessage
[
]
;
}
export
interface
PlayerErrorsRaisedEvent
{
playerId
:
PlayerId
;
errors
:
PlayerError
[
]
;
}
export
interface
PlayersCreatedEvent
{
players
:
PlayerId
[
]
;
}
}
}
declare
namespace
ProtocolMapping
{
export
interface
Events
{
'
Console
.
messageAdded
'
:
[
Protocol
.
Console
.
MessageAddedEvent
]
;
'
Debugger
.
breakpointResolved
'
:
[
Protocol
.
Debugger
.
BreakpointResolvedEvent
]
;
'
Debugger
.
paused
'
:
[
Protocol
.
Debugger
.
PausedEvent
]
;
'
Debugger
.
resumed
'
:
[
]
;
'
Debugger
.
scriptFailedToParse
'
:
[
Protocol
.
Debugger
.
ScriptFailedToParseEvent
]
;
'
Debugger
.
scriptParsed
'
:
[
Protocol
.
Debugger
.
ScriptParsedEvent
]
;
'
HeapProfiler
.
addHeapSnapshotChunk
'
:
[
Protocol
.
HeapProfiler
.
AddHeapSnapshotChunkEvent
]
;
'
HeapProfiler
.
heapStatsUpdate
'
:
[
Protocol
.
HeapProfiler
.
HeapStatsUpdateEvent
]
;
'
HeapProfiler
.
lastSeenObjectId
'
:
[
Protocol
.
HeapProfiler
.
LastSeenObjectIdEvent
]
;
'
HeapProfiler
.
reportHeapSnapshotProgress
'
:
[
Protocol
.
HeapProfiler
.
ReportHeapSnapshotProgressEvent
]
;
'
HeapProfiler
.
resetProfiles
'
:
[
]
;
'
Profiler
.
consoleProfileFinished
'
:
[
Protocol
.
Profiler
.
ConsoleProfileFinishedEvent
]
;
'
Profiler
.
consoleProfileStarted
'
:
[
Protocol
.
Profiler
.
ConsoleProfileStartedEvent
]
;
'
Profiler
.
preciseCoverageDeltaUpdate
'
:
[
Protocol
.
Profiler
.
PreciseCoverageDeltaUpdateEvent
]
;
'
Runtime
.
bindingCalled
'
:
[
Protocol
.
Runtime
.
BindingCalledEvent
]
;
'
Runtime
.
consoleAPICalled
'
:
[
Protocol
.
Runtime
.
ConsoleAPICalledEvent
]
;
'
Runtime
.
exceptionRevoked
'
:
[
Protocol
.
Runtime
.
ExceptionRevokedEvent
]
;
'
Runtime
.
exceptionThrown
'
:
[
Protocol
.
Runtime
.
ExceptionThrownEvent
]
;
'
Runtime
.
executionContextCreated
'
:
[
Protocol
.
Runtime
.
ExecutionContextCreatedEvent
]
;
'
Runtime
.
executionContextDestroyed
'
:
[
Protocol
.
Runtime
.
ExecutionContextDestroyedEvent
]
;
'
Runtime
.
executionContextsCleared
'
:
[
]
;
'
Runtime
.
inspectRequested
'
:
[
Protocol
.
Runtime
.
InspectRequestedEvent
]
;
'
Accessibility
.
loadComplete
'
:
[
Protocol
.
Accessibility
.
LoadCompleteEvent
]
;
'
Accessibility
.
nodesUpdated
'
:
[
Protocol
.
Accessibility
.
NodesUpdatedEvent
]
;
'
Animation
.
animationCanceled
'
:
[
Protocol
.
Animation
.
AnimationCanceledEvent
]
;
'
Animation
.
animationCreated
'
:
[
Protocol
.
Animation
.
AnimationCreatedEvent
]
;
'
Animation
.
animationStarted
'
:
[
Protocol
.
Animation
.
AnimationStartedEvent
]
;
'
Audits
.
issueAdded
'
:
[
Protocol
.
Audits
.
IssueAddedEvent
]
;
'
BackgroundService
.
recordingStateChanged
'
:
[
Protocol
.
BackgroundService
.
RecordingStateChangedEvent
]
;
'
BackgroundService
.
backgroundServiceEventReceived
'
:
[
Protocol
.
BackgroundService
.
BackgroundServiceEventReceivedEvent
]
;
'
Browser
.
downloadWillBegin
'
:
[
Protocol
.
Browser
.
DownloadWillBeginEvent
]
;
'
Browser
.
downloadProgress
'
:
[
Protocol
.
Browser
.
DownloadProgressEvent
]
;
'
CSS
.
fontsUpdated
'
:
[
Protocol
.
CSS
.
FontsUpdatedEvent
]
;
'
CSS
.
mediaQueryResultChanged
'
:
[
]
;
'
CSS
.
styleSheetAdded
'
:
[
Protocol
.
CSS
.
StyleSheetAddedEvent
]
;
'
CSS
.
styleSheetChanged
'
:
[
Protocol
.
CSS
.
StyleSheetChangedEvent
]
;
'
CSS
.
styleSheetRemoved
'
:
[
Protocol
.
CSS
.
StyleSheetRemovedEvent
]
;
'
Cast
.
sinksUpdated
'
:
[
Protocol
.
Cast
.
SinksUpdatedEvent
]
;
'
Cast
.
issueUpdated
'
:
[
Protocol
.
Cast
.
IssueUpdatedEvent
]
;
'
DOM
.
attributeModified
'
:
[
Protocol
.
DOM
.
AttributeModifiedEvent
]
;
'
DOM
.
attributeRemoved
'
:
[
Protocol
.
DOM
.
AttributeRemovedEvent
]
;
'
DOM
.
characterDataModified
'
:
[
Protocol
.
DOM
.
CharacterDataModifiedEvent
]
;
'
DOM
.
childNodeCountUpdated
'
:
[
Protocol
.
DOM
.
ChildNodeCountUpdatedEvent
]
;
'
DOM
.
childNodeInserted
'
:
[
Protocol
.
DOM
.
ChildNodeInsertedEvent
]
;
'
DOM
.
childNodeRemoved
'
:
[
Protocol
.
DOM
.
ChildNodeRemovedEvent
]
;
'
DOM
.
distributedNodesUpdated
'
:
[
Protocol
.
DOM
.
DistributedNodesUpdatedEvent
]
;
'
DOM
.
documentUpdated
'
:
[
]
;
'
DOM
.
inlineStyleInvalidated
'
:
[
Protocol
.
DOM
.
InlineStyleInvalidatedEvent
]
;
'
DOM
.
pseudoElementAdded
'
:
[
Protocol
.
DOM
.
PseudoElementAddedEvent
]
;
'
DOM
.
topLayerElementsUpdated
'
:
[
]
;
'
DOM
.
pseudoElementRemoved
'
:
[
Protocol
.
DOM
.
PseudoElementRemovedEvent
]
;
'
DOM
.
setChildNodes
'
:
[
Protocol
.
DOM
.
SetChildNodesEvent
]
;
'
DOM
.
shadowRootPopped
'
:
[
Protocol
.
DOM
.
ShadowRootPoppedEvent
]
;
'
DOM
.
shadowRootPushed
'
:
[
Protocol
.
DOM
.
ShadowRootPushedEvent
]
;
'
DOMStorage
.
domStorageItemAdded
'
:
[
Protocol
.
DOMStorage
.
DomStorageItemAddedEvent
]
;
'
DOMStorage
.
domStorageItemRemoved
'
:
[
Protocol
.
DOMStorage
.
DomStorageItemRemovedEvent
]
;
'
DOMStorage
.
domStorageItemUpdated
'
:
[
Protocol
.
DOMStorage
.
DomStorageItemUpdatedEvent
]
;
'
DOMStorage
.
domStorageItemsCleared
'
:
[
Protocol
.
DOMStorage
.
DomStorageItemsClearedEvent
]
;
'
Database
.
addDatabase
'
:
[
Protocol
.
Database
.
AddDatabaseEvent
]
;
'
Emulation
.
virtualTimeBudgetExpired
'
:
[
]
;
'
Input
.
dragIntercepted
'
:
[
Protocol
.
Input
.
DragInterceptedEvent
]
;
'
Inspector
.
detached
'
:
[
Protocol
.
Inspector
.
DetachedEvent
]
;
'
Inspector
.
targetCrashed
'
:
[
]
;
'
Inspector
.
targetReloadedAfterCrash
'
:
[
]
;
'
LayerTree
.
layerPainted
'
:
[
Protocol
.
LayerTree
.
LayerPaintedEvent
]
;
'
LayerTree
.
layerTreeDidChange
'
:
[
Protocol
.
LayerTree
.
LayerTreeDidChangeEvent
]
;
'
Log
.
entryAdded
'
:
[
Protocol
.
Log
.
EntryAddedEvent
]
;
'
Network
.
dataReceived
'
:
[
Protocol
.
Network
.
DataReceivedEvent
]
;
'
Network
.
eventSourceMessageReceived
'
:
[
Protocol
.
Network
.
EventSourceMessageReceivedEvent
]
;
'
Network
.
loadingFailed
'
:
[
Protocol
.
Network
.
LoadingFailedEvent
]
;
'
Network
.
loadingFinished
'
:
[
Protocol
.
Network
.
LoadingFinishedEvent
]
;
'
Network
.
requestIntercepted
'
:
[
Protocol
.
Network
.
RequestInterceptedEvent
]
;
'
Network
.
requestServedFromCache
'
:
[
Protocol
.
Network
.
RequestServedFromCacheEvent
]
;
'
Network
.
requestWillBeSent
'
:
[
Protocol
.
Network
.
RequestWillBeSentEvent
]
;
'
Network
.
resourceChangedPriority
'
:
[
Protocol
.
Network
.
ResourceChangedPriorityEvent
]
;
'
Network
.
signedExchangeReceived
'
:
[
Protocol
.
Network
.
SignedExchangeReceivedEvent
]
;
'
Network
.
responseReceived
'
:
[
Protocol
.
Network
.
ResponseReceivedEvent
]
;
'
Network
.
webSocketClosed
'
:
[
Protocol
.
Network
.
WebSocketClosedEvent
]
;
'
Network
.
webSocketCreated
'
:
[
Protocol
.
Network
.
WebSocketCreatedEvent
]
;
'
Network
.
webSocketFrameError
'
:
[
Protocol
.
Network
.
WebSocketFrameErrorEvent
]
;
'
Network
.
webSocketFrameReceived
'
:
[
Protocol
.
Network
.
WebSocketFrameReceivedEvent
]
;
'
Network
.
webSocketFrameSent
'
:
[
Protocol
.
Network
.
WebSocketFrameSentEvent
]
;
'
Network
.
webSocketHandshakeResponseReceived
'
:
[
Protocol
.
Network
.
WebSocketHandshakeResponseReceivedEvent
]
;
'
Network
.
webSocketWillSendHandshakeRequest
'
:
[
Protocol
.
Network
.
WebSocketWillSendHandshakeRequestEvent
]
;
'
Network
.
webTransportCreated
'
:
[
Protocol
.
Network
.
WebTransportCreatedEvent
]
;
'
Network
.
webTransportConnectionEstablished
'
:
[
Protocol
.
Network
.
WebTransportConnectionEstablishedEvent
]
;
'
Network
.
webTransportClosed
'
:
[
Protocol
.
Network
.
WebTransportClosedEvent
]
;
'
Network
.
requestWillBeSentExtraInfo
'
:
[
Protocol
.
Network
.
RequestWillBeSentExtraInfoEvent
]
;
'
Network
.
responseReceivedExtraInfo
'
:
[
Protocol
.
Network
.
ResponseReceivedExtraInfoEvent
]
;
'
Network
.
trustTokenOperationDone
'
:
[
Protocol
.
Network
.
TrustTokenOperationDoneEvent
]
;
'
Network
.
subresourceWebBundleMetadataReceived
'
:
[
Protocol
.
Network
.
SubresourceWebBundleMetadataReceivedEvent
]
;
'
Network
.
subresourceWebBundleMetadataError
'
:
[
Protocol
.
Network
.
SubresourceWebBundleMetadataErrorEvent
]
;
'
Network
.
subresourceWebBundleInnerResponseParsed
'
:
[
Protocol
.
Network
.
SubresourceWebBundleInnerResponseParsedEvent
]
;
'
Network
.
subresourceWebBundleInnerResponseError
'
:
[
Protocol
.
Network
.
SubresourceWebBundleInnerResponseErrorEvent
]
;
'
Network
.
reportingApiReportAdded
'
:
[
Protocol
.
Network
.
ReportingApiReportAddedEvent
]
;
'
Network
.
reportingApiReportUpdated
'
:
[
Protocol
.
Network
.
ReportingApiReportUpdatedEvent
]
;
'
Network
.
reportingApiEndpointsChangedForOrigin
'
:
[
Protocol
.
Network
.
ReportingApiEndpointsChangedForOriginEvent
]
;
'
Overlay
.
inspectNodeRequested
'
:
[
Protocol
.
Overlay
.
InspectNodeRequestedEvent
]
;
'
Overlay
.
nodeHighlightRequested
'
:
[
Protocol
.
Overlay
.
NodeHighlightRequestedEvent
]
;
'
Overlay
.
screenshotRequested
'
:
[
Protocol
.
Overlay
.
ScreenshotRequestedEvent
]
;
'
Overlay
.
inspectModeCanceled
'
:
[
]
;
'
Page
.
domContentEventFired
'
:
[
Protocol
.
Page
.
DomContentEventFiredEvent
]
;
'
Page
.
fileChooserOpened
'
:
[
Protocol
.
Page
.
FileChooserOpenedEvent
]
;
'
Page
.
frameAttached
'
:
[
Protocol
.
Page
.
FrameAttachedEvent
]
;
'
Page
.
frameClearedScheduledNavigation
'
:
[
Protocol
.
Page
.
FrameClearedScheduledNavigationEvent
]
;
'
Page
.
frameDetached
'
:
[
Protocol
.
Page
.
FrameDetachedEvent
]
;
'
Page
.
frameNavigated
'
:
[
Protocol
.
Page
.
FrameNavigatedEvent
]
;
'
Page
.
documentOpened
'
:
[
Protocol
.
Page
.
DocumentOpenedEvent
]
;
'
Page
.
frameResized
'
:
[
]
;
'
Page
.
frameRequestedNavigation
'
:
[
Protocol
.
Page
.
FrameRequestedNavigationEvent
]
;
'
Page
.
frameScheduledNavigation
'
:
[
Protocol
.
Page
.
FrameScheduledNavigationEvent
]
;
'
Page
.
frameStartedLoading
'
:
[
Protocol
.
Page
.
FrameStartedLoadingEvent
]
;
'
Page
.
frameStoppedLoading
'
:
[
Protocol
.
Page
.
FrameStoppedLoadingEvent
]
;
'
Page
.
downloadWillBegin
'
:
[
Protocol
.
Page
.
DownloadWillBeginEvent
]
;
'
Page
.
downloadProgress
'
:
[
Protocol
.
Page
.
DownloadProgressEvent
]
;
'
Page
.
interstitialHidden
'
:
[
]
;
'
Page
.
interstitialShown
'
:
[
]
;
'
Page
.
javascriptDialogClosed
'
:
[
Protocol
.
Page
.
JavascriptDialogClosedEvent
]
;
'
Page
.
javascriptDialogOpening
'
:
[
Protocol
.
Page
.
JavascriptDialogOpeningEvent
]
;
'
Page
.
lifecycleEvent
'
:
[
Protocol
.
Page
.
LifecycleEventEvent
]
;
'
Page
.
backForwardCacheNotUsed
'
:
[
Protocol
.
Page
.
BackForwardCacheNotUsedEvent
]
;
'
Page
.
prerenderAttemptCompleted
'
:
[
Protocol
.
Page
.
PrerenderAttemptCompletedEvent
]
;
'
Page
.
loadEventFired
'
:
[
Protocol
.
Page
.
LoadEventFiredEvent
]
;
'
Page
.
navigatedWithinDocument
'
:
[
Protocol
.
Page
.
NavigatedWithinDocumentEvent
]
;
'
Page
.
screencastFrame
'
:
[
Protocol
.
Page
.
ScreencastFrameEvent
]
;
'
Page
.
screencastVisibilityChanged
'
:
[
Protocol
.
Page
.
ScreencastVisibilityChangedEvent
]
;
'
Page
.
windowOpen
'
:
[
Protocol
.
Page
.
WindowOpenEvent
]
;
'
Page
.
compilationCacheProduced
'
:
[
Protocol
.
Page
.
CompilationCacheProducedEvent
]
;
'
Performance
.
metrics
'
:
[
Protocol
.
Performance
.
MetricsEvent
]
;
'
PerformanceTimeline
.
timelineEventAdded
'
:
[
Protocol
.
PerformanceTimeline
.
TimelineEventAddedEvent
]
;
'
Security
.
certificateError
'
:
[
Protocol
.
Security
.
CertificateErrorEvent
]
;
'
Security
.
visibleSecurityStateChanged
'
:
[
Protocol
.
Security
.
VisibleSecurityStateChangedEvent
]
;
'
Security
.
securityStateChanged
'
:
[
Protocol
.
Security
.
SecurityStateChangedEvent
]
;
'
ServiceWorker
.
workerErrorReported
'
:
[
Protocol
.
ServiceWorker
.
WorkerErrorReportedEvent
]
;
'
ServiceWorker
.
workerRegistrationUpdated
'
:
[
Protocol
.
ServiceWorker
.
WorkerRegistrationUpdatedEvent
]
;
'
ServiceWorker
.
workerVersionUpdated
'
:
[
Protocol
.
ServiceWorker
.
WorkerVersionUpdatedEvent
]
;
'
Storage
.
cacheStorageContentUpdated
'
:
[
Protocol
.
Storage
.
CacheStorageContentUpdatedEvent
]
;
'
Storage
.
cacheStorageListUpdated
'
:
[
Protocol
.
Storage
.
CacheStorageListUpdatedEvent
]
;
'
Storage
.
indexedDBContentUpdated
'
:
[
Protocol
.
Storage
.
IndexedDBContentUpdatedEvent
]
;
'
Storage
.
indexedDBListUpdated
'
:
[
Protocol
.
Storage
.
IndexedDBListUpdatedEvent
]
;
'
Storage
.
interestGroupAccessed
'
:
[
Protocol
.
Storage
.
InterestGroupAccessedEvent
]
;
'
Storage
.
sharedStorageAccessed
'
:
[
Protocol
.
Storage
.
SharedStorageAccessedEvent
]
;
'
Target
.
attachedToTarget
'
:
[
Protocol
.
Target
.
AttachedToTargetEvent
]
;
'
Target
.
detachedFromTarget
'
:
[
Protocol
.
Target
.
DetachedFromTargetEvent
]
;
'
Target
.
receivedMessageFromTarget
'
:
[
Protocol
.
Target
.
ReceivedMessageFromTargetEvent
]
;
'
Target
.
targetCreated
'
:
[
Protocol
.
Target
.
TargetCreatedEvent
]
;
'
Target
.
targetDestroyed
'
:
[
Protocol
.
Target
.
TargetDestroyedEvent
]
;
'
Target
.
targetCrashed
'
:
[
Protocol
.
Target
.
TargetCrashedEvent
]
;
'
Target
.
targetInfoChanged
'
:
[
Protocol
.
Target
.
TargetInfoChangedEvent
]
;
'
Tethering
.
accepted
'
:
[
Protocol
.
Tethering
.
AcceptedEvent
]
;
'
Tracing
.
bufferUsage
'
:
[
Protocol
.
Tracing
.
BufferUsageEvent
]
;
'
Tracing
.
dataCollected
'
:
[
Protocol
.
Tracing
.
DataCollectedEvent
]
;
'
Tracing
.
tracingComplete
'
:
[
Protocol
.
Tracing
.
TracingCompleteEvent
]
;
'
Fetch
.
requestPaused
'
:
[
Protocol
.
Fetch
.
RequestPausedEvent
]
;
'
Fetch
.
authRequired
'
:
[
Protocol
.
Fetch
.
AuthRequiredEvent
]
;
'
WebAudio
.
contextCreated
'
:
[
Protocol
.
WebAudio
.
ContextCreatedEvent
]
;
'
WebAudio
.
contextWillBeDestroyed
'
:
[
Protocol
.
WebAudio
.
ContextWillBeDestroyedEvent
]
;
'
WebAudio
.
contextChanged
'
:
[
Protocol
.
WebAudio
.
ContextChangedEvent
]
;
'
WebAudio
.
audioListenerCreated
'
:
[
Protocol
.
WebAudio
.
AudioListenerCreatedEvent
]
;
'
WebAudio
.
audioListenerWillBeDestroyed
'
:
[
Protocol
.
WebAudio
.
AudioListenerWillBeDestroyedEvent
]
;
'
WebAudio
.
audioNodeCreated
'
:
[
Protocol
.
WebAudio
.
AudioNodeCreatedEvent
]
;
'
WebAudio
.
audioNodeWillBeDestroyed
'
:
[
Protocol
.
WebAudio
.
AudioNodeWillBeDestroyedEvent
]
;
'
WebAudio
.
audioParamCreated
'
:
[
Protocol
.
WebAudio
.
AudioParamCreatedEvent
]
;
'
WebAudio
.
audioParamWillBeDestroyed
'
:
[
Protocol
.
WebAudio
.
AudioParamWillBeDestroyedEvent
]
;
'
WebAudio
.
nodesConnected
'
:
[
Protocol
.
WebAudio
.
NodesConnectedEvent
]
;
'
WebAudio
.
nodesDisconnected
'
:
[
Protocol
.
WebAudio
.
NodesDisconnectedEvent
]
;
'
WebAudio
.
nodeParamConnected
'
:
[
Protocol
.
WebAudio
.
NodeParamConnectedEvent
]
;
'
WebAudio
.
nodeParamDisconnected
'
:
[
Protocol
.
WebAudio
.
NodeParamDisconnectedEvent
]
;
'
WebAuthn
.
credentialAdded
'
:
[
Protocol
.
WebAuthn
.
CredentialAddedEvent
]
;
'
WebAuthn
.
credentialAsserted
'
:
[
Protocol
.
WebAuthn
.
CredentialAssertedEvent
]
;
'
Media
.
playerPropertiesChanged
'
:
[
Protocol
.
Media
.
PlayerPropertiesChangedEvent
]
;
'
Media
.
playerEventsAdded
'
:
[
Protocol
.
Media
.
PlayerEventsAddedEvent
]
;
'
Media
.
playerMessagesLogged
'
:
[
Protocol
.
Media
.
PlayerMessagesLoggedEvent
]
;
'
Media
.
playerErrorsRaised
'
:
[
Protocol
.
Media
.
PlayerErrorsRaisedEvent
]
;
'
Media
.
playersCreated
'
:
[
Protocol
.
Media
.
PlayersCreatedEvent
]
;
}
export
interface
Commands
{
'
Console
.
clearMessages
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Console
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Console
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Debugger
.
continueToLocation
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
ContinueToLocationRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Debugger
.
enable
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
EnableRequest
?
]
;
returnType
:
Protocol
.
Debugger
.
EnableResponse
;
}
;
'
Debugger
.
evaluateOnCallFrame
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
EvaluateOnCallFrameRequest
]
;
returnType
:
Protocol
.
Debugger
.
EvaluateOnCallFrameResponse
;
}
;
'
Debugger
.
getPossibleBreakpoints
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
GetPossibleBreakpointsRequest
]
;
returnType
:
Protocol
.
Debugger
.
GetPossibleBreakpointsResponse
;
}
;
'
Debugger
.
getScriptSource
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
GetScriptSourceRequest
]
;
returnType
:
Protocol
.
Debugger
.
GetScriptSourceResponse
;
}
;
'
Debugger
.
disassembleWasmModule
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
DisassembleWasmModuleRequest
]
;
returnType
:
Protocol
.
Debugger
.
DisassembleWasmModuleResponse
;
}
;
'
Debugger
.
nextWasmDisassemblyChunk
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
NextWasmDisassemblyChunkRequest
]
;
returnType
:
Protocol
.
Debugger
.
NextWasmDisassemblyChunkResponse
;
}
;
'
Debugger
.
getWasmBytecode
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
GetWasmBytecodeRequest
]
;
returnType
:
Protocol
.
Debugger
.
GetWasmBytecodeResponse
;
}
;
'
Debugger
.
getStackTrace
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
GetStackTraceRequest
]
;
returnType
:
Protocol
.
Debugger
.
GetStackTraceResponse
;
}
;
'
Debugger
.
pause
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Debugger
.
pauseOnAsyncCall
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
PauseOnAsyncCallRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
removeBreakpoint
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
RemoveBreakpointRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
restartFrame
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
RestartFrameRequest
]
;
returnType
:
Protocol
.
Debugger
.
RestartFrameResponse
;
}
;
'
Debugger
.
resume
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
ResumeRequest
?
]
;
returnType
:
void
;
}
;
'
Debugger
.
searchInContent
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SearchInContentRequest
]
;
returnType
:
Protocol
.
Debugger
.
SearchInContentResponse
;
}
;
'
Debugger
.
setAsyncCallStackDepth
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetAsyncCallStackDepthRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setBlackboxPatterns
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBlackboxPatternsRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setBlackboxedRanges
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBlackboxedRangesRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setBreakpoint
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBreakpointRequest
]
;
returnType
:
Protocol
.
Debugger
.
SetBreakpointResponse
;
}
;
'
Debugger
.
setInstrumentationBreakpoint
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetInstrumentationBreakpointRequest
]
;
returnType
:
Protocol
.
Debugger
.
SetInstrumentationBreakpointResponse
;
}
;
'
Debugger
.
setBreakpointByUrl
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBreakpointByUrlRequest
]
;
returnType
:
Protocol
.
Debugger
.
SetBreakpointByUrlResponse
;
}
;
'
Debugger
.
setBreakpointOnFunctionCall
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBreakpointOnFunctionCallRequest
]
;
returnType
:
Protocol
.
Debugger
.
SetBreakpointOnFunctionCallResponse
;
}
;
'
Debugger
.
setBreakpointsActive
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetBreakpointsActiveRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setPauseOnExceptions
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetPauseOnExceptionsRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setReturnValue
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetReturnValueRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setScriptSource
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetScriptSourceRequest
]
;
returnType
:
Protocol
.
Debugger
.
SetScriptSourceResponse
;
}
;
'
Debugger
.
setSkipAllPauses
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetSkipAllPausesRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
setVariableValue
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
SetVariableValueRequest
]
;
returnType
:
void
;
}
;
'
Debugger
.
stepInto
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
StepIntoRequest
?
]
;
returnType
:
void
;
}
;
'
Debugger
.
stepOut
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Debugger
.
stepOver
'
:
{
paramsType
:
[
Protocol
.
Debugger
.
StepOverRequest
?
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
addInspectedHeapObject
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
AddInspectedHeapObjectRequest
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
collectGarbage
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
getHeapObjectId
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
GetHeapObjectIdRequest
]
;
returnType
:
Protocol
.
HeapProfiler
.
GetHeapObjectIdResponse
;
}
;
'
HeapProfiler
.
getObjectByHeapObjectId
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
GetObjectByHeapObjectIdRequest
]
;
returnType
:
Protocol
.
HeapProfiler
.
GetObjectByHeapObjectIdResponse
;
}
;
'
HeapProfiler
.
getSamplingProfile
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
HeapProfiler
.
GetSamplingProfileResponse
;
}
;
'
HeapProfiler
.
startSampling
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
StartSamplingRequest
?
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
startTrackingHeapObjects
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
StartTrackingHeapObjectsRequest
?
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
stopSampling
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
HeapProfiler
.
StopSamplingResponse
;
}
;
'
HeapProfiler
.
stopTrackingHeapObjects
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
StopTrackingHeapObjectsRequest
?
]
;
returnType
:
void
;
}
;
'
HeapProfiler
.
takeHeapSnapshot
'
:
{
paramsType
:
[
Protocol
.
HeapProfiler
.
TakeHeapSnapshotRequest
?
]
;
returnType
:
void
;
}
;
'
Profiler
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Profiler
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Profiler
.
getBestEffortCoverage
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Profiler
.
GetBestEffortCoverageResponse
;
}
;
'
Profiler
.
setSamplingInterval
'
:
{
paramsType
:
[
Protocol
.
Profiler
.
SetSamplingIntervalRequest
]
;
returnType
:
void
;
}
;
'
Profiler
.
start
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Profiler
.
startPreciseCoverage
'
:
{
paramsType
:
[
Protocol
.
Profiler
.
StartPreciseCoverageRequest
?
]
;
returnType
:
Protocol
.
Profiler
.
StartPreciseCoverageResponse
;
}
;
'
Profiler
.
stop
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Profiler
.
StopResponse
;
}
;
'
Profiler
.
stopPreciseCoverage
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Profiler
.
takePreciseCoverage
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Profiler
.
TakePreciseCoverageResponse
;
}
;
'
Runtime
.
awaitPromise
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
AwaitPromiseRequest
]
;
returnType
:
Protocol
.
Runtime
.
AwaitPromiseResponse
;
}
;
'
Runtime
.
callFunctionOn
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
CallFunctionOnRequest
]
;
returnType
:
Protocol
.
Runtime
.
CallFunctionOnResponse
;
}
;
'
Runtime
.
compileScript
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
CompileScriptRequest
]
;
returnType
:
Protocol
.
Runtime
.
CompileScriptResponse
;
}
;
'
Runtime
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Runtime
.
discardConsoleEntries
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Runtime
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Runtime
.
evaluate
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
EvaluateRequest
]
;
returnType
:
Protocol
.
Runtime
.
EvaluateResponse
;
}
;
'
Runtime
.
getIsolateId
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Runtime
.
GetIsolateIdResponse
;
}
;
'
Runtime
.
getHeapUsage
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Runtime
.
GetHeapUsageResponse
;
}
;
'
Runtime
.
getProperties
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
GetPropertiesRequest
]
;
returnType
:
Protocol
.
Runtime
.
GetPropertiesResponse
;
}
;
'
Runtime
.
globalLexicalScopeNames
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
GlobalLexicalScopeNamesRequest
?
]
;
returnType
:
Protocol
.
Runtime
.
GlobalLexicalScopeNamesResponse
;
}
;
'
Runtime
.
queryObjects
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
QueryObjectsRequest
]
;
returnType
:
Protocol
.
Runtime
.
QueryObjectsResponse
;
}
;
'
Runtime
.
releaseObject
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
ReleaseObjectRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
releaseObjectGroup
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
ReleaseObjectGroupRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
runIfWaitingForDebugger
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Runtime
.
runScript
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
RunScriptRequest
]
;
returnType
:
Protocol
.
Runtime
.
RunScriptResponse
;
}
;
'
Runtime
.
setAsyncCallStackDepth
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
SetAsyncCallStackDepthRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
setCustomObjectFormatterEnabled
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
SetCustomObjectFormatterEnabledRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
setMaxCallStackSizeToCapture
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
SetMaxCallStackSizeToCaptureRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
terminateExecution
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Runtime
.
addBinding
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
AddBindingRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
removeBinding
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
RemoveBindingRequest
]
;
returnType
:
void
;
}
;
'
Runtime
.
getExceptionDetails
'
:
{
paramsType
:
[
Protocol
.
Runtime
.
GetExceptionDetailsRequest
]
;
returnType
:
Protocol
.
Runtime
.
GetExceptionDetailsResponse
;
}
;
'
Schema
.
getDomains
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Schema
.
GetDomainsResponse
;
}
;
'
Accessibility
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Accessibility
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Accessibility
.
getPartialAXTree
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
GetPartialAXTreeRequest
?
]
;
returnType
:
Protocol
.
Accessibility
.
GetPartialAXTreeResponse
;
}
;
'
Accessibility
.
getFullAXTree
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
GetFullAXTreeRequest
?
]
;
returnType
:
Protocol
.
Accessibility
.
GetFullAXTreeResponse
;
}
;
'
Accessibility
.
getRootAXNode
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
GetRootAXNodeRequest
?
]
;
returnType
:
Protocol
.
Accessibility
.
GetRootAXNodeResponse
;
}
;
'
Accessibility
.
getAXNodeAndAncestors
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
GetAXNodeAndAncestorsRequest
?
]
;
returnType
:
Protocol
.
Accessibility
.
GetAXNodeAndAncestorsResponse
;
}
;
'
Accessibility
.
getChildAXNodes
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
GetChildAXNodesRequest
]
;
returnType
:
Protocol
.
Accessibility
.
GetChildAXNodesResponse
;
}
;
'
Accessibility
.
queryAXTree
'
:
{
paramsType
:
[
Protocol
.
Accessibility
.
QueryAXTreeRequest
?
]
;
returnType
:
Protocol
.
Accessibility
.
QueryAXTreeResponse
;
}
;
'
Animation
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Animation
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Animation
.
getCurrentTime
'
:
{
paramsType
:
[
Protocol
.
Animation
.
GetCurrentTimeRequest
]
;
returnType
:
Protocol
.
Animation
.
GetCurrentTimeResponse
;
}
;
'
Animation
.
getPlaybackRate
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Animation
.
GetPlaybackRateResponse
;
}
;
'
Animation
.
releaseAnimations
'
:
{
paramsType
:
[
Protocol
.
Animation
.
ReleaseAnimationsRequest
]
;
returnType
:
void
;
}
;
'
Animation
.
resolveAnimation
'
:
{
paramsType
:
[
Protocol
.
Animation
.
ResolveAnimationRequest
]
;
returnType
:
Protocol
.
Animation
.
ResolveAnimationResponse
;
}
;
'
Animation
.
seekAnimations
'
:
{
paramsType
:
[
Protocol
.
Animation
.
SeekAnimationsRequest
]
;
returnType
:
void
;
}
;
'
Animation
.
setPaused
'
:
{
paramsType
:
[
Protocol
.
Animation
.
SetPausedRequest
]
;
returnType
:
void
;
}
;
'
Animation
.
setPlaybackRate
'
:
{
paramsType
:
[
Protocol
.
Animation
.
SetPlaybackRateRequest
]
;
returnType
:
void
;
}
;
'
Animation
.
setTiming
'
:
{
paramsType
:
[
Protocol
.
Animation
.
SetTimingRequest
]
;
returnType
:
void
;
}
;
'
Audits
.
getEncodedResponse
'
:
{
paramsType
:
[
Protocol
.
Audits
.
GetEncodedResponseRequest
]
;
returnType
:
Protocol
.
Audits
.
GetEncodedResponseResponse
;
}
;
'
Audits
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Audits
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Audits
.
checkContrast
'
:
{
paramsType
:
[
Protocol
.
Audits
.
CheckContrastRequest
?
]
;
returnType
:
void
;
}
;
'
BackgroundService
.
startObserving
'
:
{
paramsType
:
[
Protocol
.
BackgroundService
.
StartObservingRequest
]
;
returnType
:
void
;
}
;
'
BackgroundService
.
stopObserving
'
:
{
paramsType
:
[
Protocol
.
BackgroundService
.
StopObservingRequest
]
;
returnType
:
void
;
}
;
'
BackgroundService
.
setRecording
'
:
{
paramsType
:
[
Protocol
.
BackgroundService
.
SetRecordingRequest
]
;
returnType
:
void
;
}
;
'
BackgroundService
.
clearEvents
'
:
{
paramsType
:
[
Protocol
.
BackgroundService
.
ClearEventsRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
setPermission
'
:
{
paramsType
:
[
Protocol
.
Browser
.
SetPermissionRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
grantPermissions
'
:
{
paramsType
:
[
Protocol
.
Browser
.
GrantPermissionsRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
resetPermissions
'
:
{
paramsType
:
[
Protocol
.
Browser
.
ResetPermissionsRequest
?
]
;
returnType
:
void
;
}
;
'
Browser
.
setDownloadBehavior
'
:
{
paramsType
:
[
Protocol
.
Browser
.
SetDownloadBehaviorRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
cancelDownload
'
:
{
paramsType
:
[
Protocol
.
Browser
.
CancelDownloadRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
close
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Browser
.
crash
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Browser
.
crashGpuProcess
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Browser
.
getVersion
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Browser
.
GetVersionResponse
;
}
;
'
Browser
.
getBrowserCommandLine
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Browser
.
GetBrowserCommandLineResponse
;
}
;
'
Browser
.
getHistograms
'
:
{
paramsType
:
[
Protocol
.
Browser
.
GetHistogramsRequest
?
]
;
returnType
:
Protocol
.
Browser
.
GetHistogramsResponse
;
}
;
'
Browser
.
getHistogram
'
:
{
paramsType
:
[
Protocol
.
Browser
.
GetHistogramRequest
]
;
returnType
:
Protocol
.
Browser
.
GetHistogramResponse
;
}
;
'
Browser
.
getWindowBounds
'
:
{
paramsType
:
[
Protocol
.
Browser
.
GetWindowBoundsRequest
]
;
returnType
:
Protocol
.
Browser
.
GetWindowBoundsResponse
;
}
;
'
Browser
.
getWindowForTarget
'
:
{
paramsType
:
[
Protocol
.
Browser
.
GetWindowForTargetRequest
?
]
;
returnType
:
Protocol
.
Browser
.
GetWindowForTargetResponse
;
}
;
'
Browser
.
setWindowBounds
'
:
{
paramsType
:
[
Protocol
.
Browser
.
SetWindowBoundsRequest
]
;
returnType
:
void
;
}
;
'
Browser
.
setDockTile
'
:
{
paramsType
:
[
Protocol
.
Browser
.
SetDockTileRequest
?
]
;
returnType
:
void
;
}
;
'
Browser
.
executeBrowserCommand
'
:
{
paramsType
:
[
Protocol
.
Browser
.
ExecuteBrowserCommandRequest
]
;
returnType
:
void
;
}
;
'
CSS
.
addRule
'
:
{
paramsType
:
[
Protocol
.
CSS
.
AddRuleRequest
]
;
returnType
:
Protocol
.
CSS
.
AddRuleResponse
;
}
;
'
CSS
.
collectClassNames
'
:
{
paramsType
:
[
Protocol
.
CSS
.
CollectClassNamesRequest
]
;
returnType
:
Protocol
.
CSS
.
CollectClassNamesResponse
;
}
;
'
CSS
.
createStyleSheet
'
:
{
paramsType
:
[
Protocol
.
CSS
.
CreateStyleSheetRequest
]
;
returnType
:
Protocol
.
CSS
.
CreateStyleSheetResponse
;
}
;
'
CSS
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
CSS
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
CSS
.
forcePseudoState
'
:
{
paramsType
:
[
Protocol
.
CSS
.
ForcePseudoStateRequest
]
;
returnType
:
void
;
}
;
'
CSS
.
getBackgroundColors
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetBackgroundColorsRequest
]
;
returnType
:
Protocol
.
CSS
.
GetBackgroundColorsResponse
;
}
;
'
CSS
.
getComputedStyleForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetComputedStyleForNodeRequest
]
;
returnType
:
Protocol
.
CSS
.
GetComputedStyleForNodeResponse
;
}
;
'
CSS
.
getInlineStylesForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetInlineStylesForNodeRequest
]
;
returnType
:
Protocol
.
CSS
.
GetInlineStylesForNodeResponse
;
}
;
'
CSS
.
getMatchedStylesForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetMatchedStylesForNodeRequest
]
;
returnType
:
Protocol
.
CSS
.
GetMatchedStylesForNodeResponse
;
}
;
'
CSS
.
getMediaQueries
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
CSS
.
GetMediaQueriesResponse
;
}
;
'
CSS
.
getPlatformFontsForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetPlatformFontsForNodeRequest
]
;
returnType
:
Protocol
.
CSS
.
GetPlatformFontsForNodeResponse
;
}
;
'
CSS
.
getStyleSheetText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetStyleSheetTextRequest
]
;
returnType
:
Protocol
.
CSS
.
GetStyleSheetTextResponse
;
}
;
'
CSS
.
getLayersForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
GetLayersForNodeRequest
]
;
returnType
:
Protocol
.
CSS
.
GetLayersForNodeResponse
;
}
;
'
CSS
.
trackComputedStyleUpdates
'
:
{
paramsType
:
[
Protocol
.
CSS
.
TrackComputedStyleUpdatesRequest
]
;
returnType
:
void
;
}
;
'
CSS
.
takeComputedStyleUpdates
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
CSS
.
TakeComputedStyleUpdatesResponse
;
}
;
'
CSS
.
setEffectivePropertyValueForNode
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetEffectivePropertyValueForNodeRequest
]
;
returnType
:
void
;
}
;
'
CSS
.
setKeyframeKey
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetKeyframeKeyRequest
]
;
returnType
:
Protocol
.
CSS
.
SetKeyframeKeyResponse
;
}
;
'
CSS
.
setMediaText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetMediaTextRequest
]
;
returnType
:
Protocol
.
CSS
.
SetMediaTextResponse
;
}
;
'
CSS
.
setContainerQueryText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetContainerQueryTextRequest
]
;
returnType
:
Protocol
.
CSS
.
SetContainerQueryTextResponse
;
}
;
'
CSS
.
setSupportsText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetSupportsTextRequest
]
;
returnType
:
Protocol
.
CSS
.
SetSupportsTextResponse
;
}
;
'
CSS
.
setScopeText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetScopeTextRequest
]
;
returnType
:
Protocol
.
CSS
.
SetScopeTextResponse
;
}
;
'
CSS
.
setRuleSelector
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetRuleSelectorRequest
]
;
returnType
:
Protocol
.
CSS
.
SetRuleSelectorResponse
;
}
;
'
CSS
.
setStyleSheetText
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetStyleSheetTextRequest
]
;
returnType
:
Protocol
.
CSS
.
SetStyleSheetTextResponse
;
}
;
'
CSS
.
setStyleTexts
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetStyleTextsRequest
]
;
returnType
:
Protocol
.
CSS
.
SetStyleTextsResponse
;
}
;
'
CSS
.
startRuleUsageTracking
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
CSS
.
stopRuleUsageTracking
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
CSS
.
StopRuleUsageTrackingResponse
;
}
;
'
CSS
.
takeCoverageDelta
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
CSS
.
TakeCoverageDeltaResponse
;
}
;
'
CSS
.
setLocalFontsEnabled
'
:
{
paramsType
:
[
Protocol
.
CSS
.
SetLocalFontsEnabledRequest
]
;
returnType
:
void
;
}
;
'
CacheStorage
.
deleteCache
'
:
{
paramsType
:
[
Protocol
.
CacheStorage
.
DeleteCacheRequest
]
;
returnType
:
void
;
}
;
'
CacheStorage
.
deleteEntry
'
:
{
paramsType
:
[
Protocol
.
CacheStorage
.
DeleteEntryRequest
]
;
returnType
:
void
;
}
;
'
CacheStorage
.
requestCacheNames
'
:
{
paramsType
:
[
Protocol
.
CacheStorage
.
RequestCacheNamesRequest
?
]
;
returnType
:
Protocol
.
CacheStorage
.
RequestCacheNamesResponse
;
}
;
'
CacheStorage
.
requestCachedResponse
'
:
{
paramsType
:
[
Protocol
.
CacheStorage
.
RequestCachedResponseRequest
]
;
returnType
:
Protocol
.
CacheStorage
.
RequestCachedResponseResponse
;
}
;
'
CacheStorage
.
requestEntries
'
:
{
paramsType
:
[
Protocol
.
CacheStorage
.
RequestEntriesRequest
]
;
returnType
:
Protocol
.
CacheStorage
.
RequestEntriesResponse
;
}
;
'
Cast
.
enable
'
:
{
paramsType
:
[
Protocol
.
Cast
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
Cast
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Cast
.
setSinkToUse
'
:
{
paramsType
:
[
Protocol
.
Cast
.
SetSinkToUseRequest
]
;
returnType
:
void
;
}
;
'
Cast
.
startDesktopMirroring
'
:
{
paramsType
:
[
Protocol
.
Cast
.
StartDesktopMirroringRequest
]
;
returnType
:
void
;
}
;
'
Cast
.
startTabMirroring
'
:
{
paramsType
:
[
Protocol
.
Cast
.
StartTabMirroringRequest
]
;
returnType
:
void
;
}
;
'
Cast
.
stopCasting
'
:
{
paramsType
:
[
Protocol
.
Cast
.
StopCastingRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
collectClassNamesFromSubtree
'
:
{
paramsType
:
[
Protocol
.
DOM
.
CollectClassNamesFromSubtreeRequest
]
;
returnType
:
Protocol
.
DOM
.
CollectClassNamesFromSubtreeResponse
;
}
;
'
DOM
.
copyTo
'
:
{
paramsType
:
[
Protocol
.
DOM
.
CopyToRequest
]
;
returnType
:
Protocol
.
DOM
.
CopyToResponse
;
}
;
'
DOM
.
describeNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
DescribeNodeRequest
?
]
;
returnType
:
Protocol
.
DOM
.
DescribeNodeResponse
;
}
;
'
DOM
.
scrollIntoViewIfNeeded
'
:
{
paramsType
:
[
Protocol
.
DOM
.
ScrollIntoViewIfNeededRequest
?
]
;
returnType
:
void
;
}
;
'
DOM
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
discardSearchResults
'
:
{
paramsType
:
[
Protocol
.
DOM
.
DiscardSearchResultsRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
enable
'
:
{
paramsType
:
[
Protocol
.
DOM
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
DOM
.
focus
'
:
{
paramsType
:
[
Protocol
.
DOM
.
FocusRequest
?
]
;
returnType
:
void
;
}
;
'
DOM
.
getAttributes
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetAttributesRequest
]
;
returnType
:
Protocol
.
DOM
.
GetAttributesResponse
;
}
;
'
DOM
.
getBoxModel
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetBoxModelRequest
?
]
;
returnType
:
Protocol
.
DOM
.
GetBoxModelResponse
;
}
;
'
DOM
.
getContentQuads
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetContentQuadsRequest
?
]
;
returnType
:
Protocol
.
DOM
.
GetContentQuadsResponse
;
}
;
'
DOM
.
getDocument
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetDocumentRequest
?
]
;
returnType
:
Protocol
.
DOM
.
GetDocumentResponse
;
}
;
'
DOM
.
getFlattenedDocument
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetFlattenedDocumentRequest
?
]
;
returnType
:
Protocol
.
DOM
.
GetFlattenedDocumentResponse
;
}
;
'
DOM
.
getNodesForSubtreeByStyle
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetNodesForSubtreeByStyleRequest
]
;
returnType
:
Protocol
.
DOM
.
GetNodesForSubtreeByStyleResponse
;
}
;
'
DOM
.
getNodeForLocation
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetNodeForLocationRequest
]
;
returnType
:
Protocol
.
DOM
.
GetNodeForLocationResponse
;
}
;
'
DOM
.
getOuterHTML
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetOuterHTMLRequest
?
]
;
returnType
:
Protocol
.
DOM
.
GetOuterHTMLResponse
;
}
;
'
DOM
.
getRelayoutBoundary
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetRelayoutBoundaryRequest
]
;
returnType
:
Protocol
.
DOM
.
GetRelayoutBoundaryResponse
;
}
;
'
DOM
.
getSearchResults
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetSearchResultsRequest
]
;
returnType
:
Protocol
.
DOM
.
GetSearchResultsResponse
;
}
;
'
DOM
.
hideHighlight
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
highlightNode
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
highlightRect
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
markUndoableState
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
moveTo
'
:
{
paramsType
:
[
Protocol
.
DOM
.
MoveToRequest
]
;
returnType
:
Protocol
.
DOM
.
MoveToResponse
;
}
;
'
DOM
.
performSearch
'
:
{
paramsType
:
[
Protocol
.
DOM
.
PerformSearchRequest
]
;
returnType
:
Protocol
.
DOM
.
PerformSearchResponse
;
}
;
'
DOM
.
pushNodeByPathToFrontend
'
:
{
paramsType
:
[
Protocol
.
DOM
.
PushNodeByPathToFrontendRequest
]
;
returnType
:
Protocol
.
DOM
.
PushNodeByPathToFrontendResponse
;
}
;
'
DOM
.
pushNodesByBackendIdsToFrontend
'
:
{
paramsType
:
[
Protocol
.
DOM
.
PushNodesByBackendIdsToFrontendRequest
]
;
returnType
:
Protocol
.
DOM
.
PushNodesByBackendIdsToFrontendResponse
;
}
;
'
DOM
.
querySelector
'
:
{
paramsType
:
[
Protocol
.
DOM
.
QuerySelectorRequest
]
;
returnType
:
Protocol
.
DOM
.
QuerySelectorResponse
;
}
;
'
DOM
.
querySelectorAll
'
:
{
paramsType
:
[
Protocol
.
DOM
.
QuerySelectorAllRequest
]
;
returnType
:
Protocol
.
DOM
.
QuerySelectorAllResponse
;
}
;
'
DOM
.
getTopLayerElements
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
DOM
.
GetTopLayerElementsResponse
;
}
;
'
DOM
.
redo
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
removeAttribute
'
:
{
paramsType
:
[
Protocol
.
DOM
.
RemoveAttributeRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
removeNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
RemoveNodeRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
requestChildNodes
'
:
{
paramsType
:
[
Protocol
.
DOM
.
RequestChildNodesRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
requestNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
RequestNodeRequest
]
;
returnType
:
Protocol
.
DOM
.
RequestNodeResponse
;
}
;
'
DOM
.
resolveNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
ResolveNodeRequest
?
]
;
returnType
:
Protocol
.
DOM
.
ResolveNodeResponse
;
}
;
'
DOM
.
setAttributeValue
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetAttributeValueRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
setAttributesAsText
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetAttributesAsTextRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
setFileInputFiles
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetFileInputFilesRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
setNodeStackTracesEnabled
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetNodeStackTracesEnabledRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
getNodeStackTraces
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetNodeStackTracesRequest
]
;
returnType
:
Protocol
.
DOM
.
GetNodeStackTracesResponse
;
}
;
'
DOM
.
getFileInfo
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetFileInfoRequest
]
;
returnType
:
Protocol
.
DOM
.
GetFileInfoResponse
;
}
;
'
DOM
.
setInspectedNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetInspectedNodeRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
setNodeName
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetNodeNameRequest
]
;
returnType
:
Protocol
.
DOM
.
SetNodeNameResponse
;
}
;
'
DOM
.
setNodeValue
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetNodeValueRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
setOuterHTML
'
:
{
paramsType
:
[
Protocol
.
DOM
.
SetOuterHTMLRequest
]
;
returnType
:
void
;
}
;
'
DOM
.
undo
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOM
.
getFrameOwner
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetFrameOwnerRequest
]
;
returnType
:
Protocol
.
DOM
.
GetFrameOwnerResponse
;
}
;
'
DOM
.
getContainerForNode
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetContainerForNodeRequest
]
;
returnType
:
Protocol
.
DOM
.
GetContainerForNodeResponse
;
}
;
'
DOM
.
getQueryingDescendantsForContainer
'
:
{
paramsType
:
[
Protocol
.
DOM
.
GetQueryingDescendantsForContainerRequest
]
;
returnType
:
Protocol
.
DOM
.
GetQueryingDescendantsForContainerResponse
;
}
;
'
DOMDebugger
.
getEventListeners
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
GetEventListenersRequest
]
;
returnType
:
Protocol
.
DOMDebugger
.
GetEventListenersResponse
;
}
;
'
DOMDebugger
.
removeDOMBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
RemoveDOMBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
removeEventListenerBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
RemoveEventListenerBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
removeInstrumentationBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
RemoveInstrumentationBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
removeXHRBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
RemoveXHRBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
setBreakOnCSPViolation
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
SetBreakOnCSPViolationRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
setDOMBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
SetDOMBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
setEventListenerBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
SetEventListenerBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
setInstrumentationBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
SetInstrumentationBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMDebugger
.
setXHRBreakpoint
'
:
{
paramsType
:
[
Protocol
.
DOMDebugger
.
SetXHRBreakpointRequest
]
;
returnType
:
void
;
}
;
'
EventBreakpoints
.
setInstrumentationBreakpoint
'
:
{
paramsType
:
[
Protocol
.
EventBreakpoints
.
SetInstrumentationBreakpointRequest
]
;
returnType
:
void
;
}
;
'
EventBreakpoints
.
removeInstrumentationBreakpoint
'
:
{
paramsType
:
[
Protocol
.
EventBreakpoints
.
RemoveInstrumentationBreakpointRequest
]
;
returnType
:
void
;
}
;
'
DOMSnapshot
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOMSnapshot
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOMSnapshot
.
getSnapshot
'
:
{
paramsType
:
[
Protocol
.
DOMSnapshot
.
GetSnapshotRequest
]
;
returnType
:
Protocol
.
DOMSnapshot
.
GetSnapshotResponse
;
}
;
'
DOMSnapshot
.
captureSnapshot
'
:
{
paramsType
:
[
Protocol
.
DOMSnapshot
.
CaptureSnapshotRequest
]
;
returnType
:
Protocol
.
DOMSnapshot
.
CaptureSnapshotResponse
;
}
;
'
DOMStorage
.
clear
'
:
{
paramsType
:
[
Protocol
.
DOMStorage
.
ClearRequest
]
;
returnType
:
void
;
}
;
'
DOMStorage
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOMStorage
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DOMStorage
.
getDOMStorageItems
'
:
{
paramsType
:
[
Protocol
.
DOMStorage
.
GetDOMStorageItemsRequest
]
;
returnType
:
Protocol
.
DOMStorage
.
GetDOMStorageItemsResponse
;
}
;
'
DOMStorage
.
removeDOMStorageItem
'
:
{
paramsType
:
[
Protocol
.
DOMStorage
.
RemoveDOMStorageItemRequest
]
;
returnType
:
void
;
}
;
'
DOMStorage
.
setDOMStorageItem
'
:
{
paramsType
:
[
Protocol
.
DOMStorage
.
SetDOMStorageItemRequest
]
;
returnType
:
void
;
}
;
'
Database
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Database
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Database
.
executeSQL
'
:
{
paramsType
:
[
Protocol
.
Database
.
ExecuteSQLRequest
]
;
returnType
:
Protocol
.
Database
.
ExecuteSQLResponse
;
}
;
'
Database
.
getDatabaseTableNames
'
:
{
paramsType
:
[
Protocol
.
Database
.
GetDatabaseTableNamesRequest
]
;
returnType
:
Protocol
.
Database
.
GetDatabaseTableNamesResponse
;
}
;
'
DeviceOrientation
.
clearDeviceOrientationOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
DeviceOrientation
.
setDeviceOrientationOverride
'
:
{
paramsType
:
[
Protocol
.
DeviceOrientation
.
SetDeviceOrientationOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
canEmulate
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Emulation
.
CanEmulateResponse
;
}
;
'
Emulation
.
clearDeviceMetricsOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Emulation
.
clearGeolocationOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Emulation
.
resetPageScaleFactor
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Emulation
.
setFocusEmulationEnabled
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetFocusEmulationEnabledRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setAutoDarkModeOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetAutoDarkModeOverrideRequest
?
]
;
returnType
:
void
;
}
;
'
Emulation
.
setCPUThrottlingRate
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetCPUThrottlingRateRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setDefaultBackgroundColorOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetDefaultBackgroundColorOverrideRequest
?
]
;
returnType
:
void
;
}
;
'
Emulation
.
setDeviceMetricsOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetDeviceMetricsOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setScrollbarsHidden
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetScrollbarsHiddenRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setDocumentCookieDisabled
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetDocumentCookieDisabledRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setEmitTouchEventsForMouse
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetEmitTouchEventsForMouseRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setEmulatedMedia
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetEmulatedMediaRequest
?
]
;
returnType
:
void
;
}
;
'
Emulation
.
setEmulatedVisionDeficiency
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetEmulatedVisionDeficiencyRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setGeolocationOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetGeolocationOverrideRequest
?
]
;
returnType
:
void
;
}
;
'
Emulation
.
setIdleOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetIdleOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
clearIdleOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Emulation
.
setNavigatorOverrides
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetNavigatorOverridesRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setPageScaleFactor
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetPageScaleFactorRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setScriptExecutionDisabled
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetScriptExecutionDisabledRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setTouchEmulationEnabled
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetTouchEmulationEnabledRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setVirtualTimePolicy
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetVirtualTimePolicyRequest
]
;
returnType
:
Protocol
.
Emulation
.
SetVirtualTimePolicyResponse
;
}
;
'
Emulation
.
setLocaleOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetLocaleOverrideRequest
?
]
;
returnType
:
void
;
}
;
'
Emulation
.
setTimezoneOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetTimezoneOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setVisibleSize
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetVisibleSizeRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setDisabledImageTypes
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetDisabledImageTypesRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setHardwareConcurrencyOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetHardwareConcurrencyOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setUserAgentOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetUserAgentOverrideRequest
]
;
returnType
:
void
;
}
;
'
Emulation
.
setAutomationOverride
'
:
{
paramsType
:
[
Protocol
.
Emulation
.
SetAutomationOverrideRequest
]
;
returnType
:
void
;
}
;
'
HeadlessExperimental
.
beginFrame
'
:
{
paramsType
:
[
Protocol
.
HeadlessExperimental
.
BeginFrameRequest
?
]
;
returnType
:
Protocol
.
HeadlessExperimental
.
BeginFrameResponse
;
}
;
'
HeadlessExperimental
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
HeadlessExperimental
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
IO
.
close
'
:
{
paramsType
:
[
Protocol
.
IO
.
CloseRequest
]
;
returnType
:
void
;
}
;
'
IO
.
read
'
:
{
paramsType
:
[
Protocol
.
IO
.
ReadRequest
]
;
returnType
:
Protocol
.
IO
.
ReadResponse
;
}
;
'
IO
.
resolveBlob
'
:
{
paramsType
:
[
Protocol
.
IO
.
ResolveBlobRequest
]
;
returnType
:
Protocol
.
IO
.
ResolveBlobResponse
;
}
;
'
IndexedDB
.
clearObjectStore
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
ClearObjectStoreRequest
]
;
returnType
:
void
;
}
;
'
IndexedDB
.
deleteDatabase
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
DeleteDatabaseRequest
]
;
returnType
:
void
;
}
;
'
IndexedDB
.
deleteObjectStoreEntries
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
DeleteObjectStoreEntriesRequest
]
;
returnType
:
void
;
}
;
'
IndexedDB
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
IndexedDB
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
IndexedDB
.
requestData
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
RequestDataRequest
]
;
returnType
:
Protocol
.
IndexedDB
.
RequestDataResponse
;
}
;
'
IndexedDB
.
getMetadata
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
GetMetadataRequest
]
;
returnType
:
Protocol
.
IndexedDB
.
GetMetadataResponse
;
}
;
'
IndexedDB
.
requestDatabase
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
RequestDatabaseRequest
]
;
returnType
:
Protocol
.
IndexedDB
.
RequestDatabaseResponse
;
}
;
'
IndexedDB
.
requestDatabaseNames
'
:
{
paramsType
:
[
Protocol
.
IndexedDB
.
RequestDatabaseNamesRequest
?
]
;
returnType
:
Protocol
.
IndexedDB
.
RequestDatabaseNamesResponse
;
}
;
'
Input
.
dispatchDragEvent
'
:
{
paramsType
:
[
Protocol
.
Input
.
DispatchDragEventRequest
]
;
returnType
:
void
;
}
;
'
Input
.
dispatchKeyEvent
'
:
{
paramsType
:
[
Protocol
.
Input
.
DispatchKeyEventRequest
]
;
returnType
:
void
;
}
;
'
Input
.
insertText
'
:
{
paramsType
:
[
Protocol
.
Input
.
InsertTextRequest
]
;
returnType
:
void
;
}
;
'
Input
.
imeSetComposition
'
:
{
paramsType
:
[
Protocol
.
Input
.
ImeSetCompositionRequest
]
;
returnType
:
void
;
}
;
'
Input
.
dispatchMouseEvent
'
:
{
paramsType
:
[
Protocol
.
Input
.
DispatchMouseEventRequest
]
;
returnType
:
void
;
}
;
'
Input
.
dispatchTouchEvent
'
:
{
paramsType
:
[
Protocol
.
Input
.
DispatchTouchEventRequest
]
;
returnType
:
void
;
}
;
'
Input
.
emulateTouchFromMouseEvent
'
:
{
paramsType
:
[
Protocol
.
Input
.
EmulateTouchFromMouseEventRequest
]
;
returnType
:
void
;
}
;
'
Input
.
setIgnoreInputEvents
'
:
{
paramsType
:
[
Protocol
.
Input
.
SetIgnoreInputEventsRequest
]
;
returnType
:
void
;
}
;
'
Input
.
setInterceptDrags
'
:
{
paramsType
:
[
Protocol
.
Input
.
SetInterceptDragsRequest
]
;
returnType
:
void
;
}
;
'
Input
.
synthesizePinchGesture
'
:
{
paramsType
:
[
Protocol
.
Input
.
SynthesizePinchGestureRequest
]
;
returnType
:
void
;
}
;
'
Input
.
synthesizeScrollGesture
'
:
{
paramsType
:
[
Protocol
.
Input
.
SynthesizeScrollGestureRequest
]
;
returnType
:
void
;
}
;
'
Input
.
synthesizeTapGesture
'
:
{
paramsType
:
[
Protocol
.
Input
.
SynthesizeTapGestureRequest
]
;
returnType
:
void
;
}
;
'
Inspector
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Inspector
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
LayerTree
.
compositingReasons
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
CompositingReasonsRequest
]
;
returnType
:
Protocol
.
LayerTree
.
CompositingReasonsResponse
;
}
;
'
LayerTree
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
LayerTree
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
LayerTree
.
loadSnapshot
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
LoadSnapshotRequest
]
;
returnType
:
Protocol
.
LayerTree
.
LoadSnapshotResponse
;
}
;
'
LayerTree
.
makeSnapshot
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
MakeSnapshotRequest
]
;
returnType
:
Protocol
.
LayerTree
.
MakeSnapshotResponse
;
}
;
'
LayerTree
.
profileSnapshot
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
ProfileSnapshotRequest
]
;
returnType
:
Protocol
.
LayerTree
.
ProfileSnapshotResponse
;
}
;
'
LayerTree
.
releaseSnapshot
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
ReleaseSnapshotRequest
]
;
returnType
:
void
;
}
;
'
LayerTree
.
replaySnapshot
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
ReplaySnapshotRequest
]
;
returnType
:
Protocol
.
LayerTree
.
ReplaySnapshotResponse
;
}
;
'
LayerTree
.
snapshotCommandLog
'
:
{
paramsType
:
[
Protocol
.
LayerTree
.
SnapshotCommandLogRequest
]
;
returnType
:
Protocol
.
LayerTree
.
SnapshotCommandLogResponse
;
}
;
'
Log
.
clear
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Log
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Log
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Log
.
startViolationsReport
'
:
{
paramsType
:
[
Protocol
.
Log
.
StartViolationsReportRequest
]
;
returnType
:
void
;
}
;
'
Log
.
stopViolationsReport
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Memory
.
getDOMCounters
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Memory
.
GetDOMCountersResponse
;
}
;
'
Memory
.
prepareForLeakDetection
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Memory
.
forciblyPurgeJavaScriptMemory
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Memory
.
setPressureNotificationsSuppressed
'
:
{
paramsType
:
[
Protocol
.
Memory
.
SetPressureNotificationsSuppressedRequest
]
;
returnType
:
void
;
}
;
'
Memory
.
simulatePressureNotification
'
:
{
paramsType
:
[
Protocol
.
Memory
.
SimulatePressureNotificationRequest
]
;
returnType
:
void
;
}
;
'
Memory
.
startSampling
'
:
{
paramsType
:
[
Protocol
.
Memory
.
StartSamplingRequest
?
]
;
returnType
:
void
;
}
;
'
Memory
.
stopSampling
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Memory
.
getAllTimeSamplingProfile
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Memory
.
GetAllTimeSamplingProfileResponse
;
}
;
'
Memory
.
getBrowserSamplingProfile
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Memory
.
GetBrowserSamplingProfileResponse
;
}
;
'
Memory
.
getSamplingProfile
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Memory
.
GetSamplingProfileResponse
;
}
;
'
Network
.
setAcceptedEncodings
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetAcceptedEncodingsRequest
]
;
returnType
:
void
;
}
;
'
Network
.
clearAcceptedEncodingsOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Network
.
canClearBrowserCache
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Network
.
CanClearBrowserCacheResponse
;
}
;
'
Network
.
canClearBrowserCookies
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Network
.
CanClearBrowserCookiesResponse
;
}
;
'
Network
.
canEmulateNetworkConditions
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Network
.
CanEmulateNetworkConditionsResponse
;
}
;
'
Network
.
clearBrowserCache
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Network
.
clearBrowserCookies
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Network
.
continueInterceptedRequest
'
:
{
paramsType
:
[
Protocol
.
Network
.
ContinueInterceptedRequestRequest
]
;
returnType
:
void
;
}
;
'
Network
.
deleteCookies
'
:
{
paramsType
:
[
Protocol
.
Network
.
DeleteCookiesRequest
]
;
returnType
:
void
;
}
;
'
Network
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Network
.
emulateNetworkConditions
'
:
{
paramsType
:
[
Protocol
.
Network
.
EmulateNetworkConditionsRequest
]
;
returnType
:
void
;
}
;
'
Network
.
enable
'
:
{
paramsType
:
[
Protocol
.
Network
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
Network
.
getAllCookies
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Network
.
GetAllCookiesResponse
;
}
;
'
Network
.
getCertificate
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetCertificateRequest
]
;
returnType
:
Protocol
.
Network
.
GetCertificateResponse
;
}
;
'
Network
.
getCookies
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetCookiesRequest
?
]
;
returnType
:
Protocol
.
Network
.
GetCookiesResponse
;
}
;
'
Network
.
getResponseBody
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetResponseBodyRequest
]
;
returnType
:
Protocol
.
Network
.
GetResponseBodyResponse
;
}
;
'
Network
.
getRequestPostData
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetRequestPostDataRequest
]
;
returnType
:
Protocol
.
Network
.
GetRequestPostDataResponse
;
}
;
'
Network
.
getResponseBodyForInterception
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetResponseBodyForInterceptionRequest
]
;
returnType
:
Protocol
.
Network
.
GetResponseBodyForInterceptionResponse
;
}
;
'
Network
.
takeResponseBodyForInterceptionAsStream
'
:
{
paramsType
:
[
Protocol
.
Network
.
TakeResponseBodyForInterceptionAsStreamRequest
]
;
returnType
:
Protocol
.
Network
.
TakeResponseBodyForInterceptionAsStreamResponse
;
}
;
'
Network
.
replayXHR
'
:
{
paramsType
:
[
Protocol
.
Network
.
ReplayXHRRequest
]
;
returnType
:
void
;
}
;
'
Network
.
searchInResponseBody
'
:
{
paramsType
:
[
Protocol
.
Network
.
SearchInResponseBodyRequest
]
;
returnType
:
Protocol
.
Network
.
SearchInResponseBodyResponse
;
}
;
'
Network
.
setBlockedURLs
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetBlockedURLsRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setBypassServiceWorker
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetBypassServiceWorkerRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setCacheDisabled
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetCacheDisabledRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setCookie
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetCookieRequest
]
;
returnType
:
Protocol
.
Network
.
SetCookieResponse
;
}
;
'
Network
.
setCookies
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetCookiesRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setExtraHTTPHeaders
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetExtraHTTPHeadersRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setAttachDebugStack
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetAttachDebugStackRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setRequestInterception
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetRequestInterceptionRequest
]
;
returnType
:
void
;
}
;
'
Network
.
setUserAgentOverride
'
:
{
paramsType
:
[
Protocol
.
Network
.
SetUserAgentOverrideRequest
]
;
returnType
:
void
;
}
;
'
Network
.
getSecurityIsolationStatus
'
:
{
paramsType
:
[
Protocol
.
Network
.
GetSecurityIsolationStatusRequest
?
]
;
returnType
:
Protocol
.
Network
.
GetSecurityIsolationStatusResponse
;
}
;
'
Network
.
enableReportingApi
'
:
{
paramsType
:
[
Protocol
.
Network
.
EnableReportingApiRequest
]
;
returnType
:
void
;
}
;
'
Network
.
loadNetworkResource
'
:
{
paramsType
:
[
Protocol
.
Network
.
LoadNetworkResourceRequest
]
;
returnType
:
Protocol
.
Network
.
LoadNetworkResourceResponse
;
}
;
'
Overlay
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Overlay
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Overlay
.
getHighlightObjectForTest
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
GetHighlightObjectForTestRequest
]
;
returnType
:
Protocol
.
Overlay
.
GetHighlightObjectForTestResponse
;
}
;
'
Overlay
.
getGridHighlightObjectsForTest
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
GetGridHighlightObjectsForTestRequest
]
;
returnType
:
Protocol
.
Overlay
.
GetGridHighlightObjectsForTestResponse
;
}
;
'
Overlay
.
getSourceOrderHighlightObjectForTest
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
GetSourceOrderHighlightObjectForTestRequest
]
;
returnType
:
Protocol
.
Overlay
.
GetSourceOrderHighlightObjectForTestResponse
;
}
;
'
Overlay
.
hideHighlight
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Overlay
.
highlightFrame
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
HighlightFrameRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
highlightNode
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
HighlightNodeRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
highlightQuad
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
HighlightQuadRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
highlightRect
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
HighlightRectRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
highlightSourceOrder
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
HighlightSourceOrderRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setInspectMode
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetInspectModeRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowAdHighlights
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowAdHighlightsRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setPausedInDebuggerMessage
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetPausedInDebuggerMessageRequest
?
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowDebugBorders
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowDebugBordersRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowFPSCounter
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowFPSCounterRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowGridOverlays
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowGridOverlaysRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowFlexOverlays
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowFlexOverlaysRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowScrollSnapOverlays
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowScrollSnapOverlaysRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowContainerQueryOverlays
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowContainerQueryOverlaysRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowPaintRects
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowPaintRectsRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowLayoutShiftRegions
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowLayoutShiftRegionsRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowScrollBottleneckRects
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowScrollBottleneckRectsRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowHitTestBorders
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowHitTestBordersRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowWebVitals
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowWebVitalsRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowViewportSizeOnResize
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowViewportSizeOnResizeRequest
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowHinge
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowHingeRequest
?
]
;
returnType
:
void
;
}
;
'
Overlay
.
setShowIsolatedElements
'
:
{
paramsType
:
[
Protocol
.
Overlay
.
SetShowIsolatedElementsRequest
]
;
returnType
:
void
;
}
;
'
Page
.
addScriptToEvaluateOnLoad
'
:
{
paramsType
:
[
Protocol
.
Page
.
AddScriptToEvaluateOnLoadRequest
]
;
returnType
:
Protocol
.
Page
.
AddScriptToEvaluateOnLoadResponse
;
}
;
'
Page
.
addScriptToEvaluateOnNewDocument
'
:
{
paramsType
:
[
Protocol
.
Page
.
AddScriptToEvaluateOnNewDocumentRequest
]
;
returnType
:
Protocol
.
Page
.
AddScriptToEvaluateOnNewDocumentResponse
;
}
;
'
Page
.
bringToFront
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
captureScreenshot
'
:
{
paramsType
:
[
Protocol
.
Page
.
CaptureScreenshotRequest
?
]
;
returnType
:
Protocol
.
Page
.
CaptureScreenshotResponse
;
}
;
'
Page
.
captureSnapshot
'
:
{
paramsType
:
[
Protocol
.
Page
.
CaptureSnapshotRequest
?
]
;
returnType
:
Protocol
.
Page
.
CaptureSnapshotResponse
;
}
;
'
Page
.
clearDeviceMetricsOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
clearDeviceOrientationOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
clearGeolocationOverride
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
createIsolatedWorld
'
:
{
paramsType
:
[
Protocol
.
Page
.
CreateIsolatedWorldRequest
]
;
returnType
:
Protocol
.
Page
.
CreateIsolatedWorldResponse
;
}
;
'
Page
.
deleteCookie
'
:
{
paramsType
:
[
Protocol
.
Page
.
DeleteCookieRequest
]
;
returnType
:
void
;
}
;
'
Page
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
getAppManifest
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetAppManifestResponse
;
}
;
'
Page
.
getInstallabilityErrors
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetInstallabilityErrorsResponse
;
}
;
'
Page
.
getManifestIcons
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetManifestIconsResponse
;
}
;
'
Page
.
getAppId
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetAppIdResponse
;
}
;
'
Page
.
getAdScriptId
'
:
{
paramsType
:
[
Protocol
.
Page
.
GetAdScriptIdRequest
]
;
returnType
:
Protocol
.
Page
.
GetAdScriptIdResponse
;
}
;
'
Page
.
getCookies
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetCookiesResponse
;
}
;
'
Page
.
getFrameTree
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetFrameTreeResponse
;
}
;
'
Page
.
getLayoutMetrics
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetLayoutMetricsResponse
;
}
;
'
Page
.
getNavigationHistory
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetNavigationHistoryResponse
;
}
;
'
Page
.
resetNavigationHistory
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
getResourceContent
'
:
{
paramsType
:
[
Protocol
.
Page
.
GetResourceContentRequest
]
;
returnType
:
Protocol
.
Page
.
GetResourceContentResponse
;
}
;
'
Page
.
getResourceTree
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Page
.
GetResourceTreeResponse
;
}
;
'
Page
.
handleJavaScriptDialog
'
:
{
paramsType
:
[
Protocol
.
Page
.
HandleJavaScriptDialogRequest
]
;
returnType
:
void
;
}
;
'
Page
.
navigate
'
:
{
paramsType
:
[
Protocol
.
Page
.
NavigateRequest
]
;
returnType
:
Protocol
.
Page
.
NavigateResponse
;
}
;
'
Page
.
navigateToHistoryEntry
'
:
{
paramsType
:
[
Protocol
.
Page
.
NavigateToHistoryEntryRequest
]
;
returnType
:
void
;
}
;
'
Page
.
printToPDF
'
:
{
paramsType
:
[
Protocol
.
Page
.
PrintToPDFRequest
?
]
;
returnType
:
Protocol
.
Page
.
PrintToPDFResponse
;
}
;
'
Page
.
reload
'
:
{
paramsType
:
[
Protocol
.
Page
.
ReloadRequest
?
]
;
returnType
:
void
;
}
;
'
Page
.
removeScriptToEvaluateOnLoad
'
:
{
paramsType
:
[
Protocol
.
Page
.
RemoveScriptToEvaluateOnLoadRequest
]
;
returnType
:
void
;
}
;
'
Page
.
removeScriptToEvaluateOnNewDocument
'
:
{
paramsType
:
[
Protocol
.
Page
.
RemoveScriptToEvaluateOnNewDocumentRequest
]
;
returnType
:
void
;
}
;
'
Page
.
screencastFrameAck
'
:
{
paramsType
:
[
Protocol
.
Page
.
ScreencastFrameAckRequest
]
;
returnType
:
void
;
}
;
'
Page
.
searchInResource
'
:
{
paramsType
:
[
Protocol
.
Page
.
SearchInResourceRequest
]
;
returnType
:
Protocol
.
Page
.
SearchInResourceResponse
;
}
;
'
Page
.
setAdBlockingEnabled
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetAdBlockingEnabledRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setBypassCSP
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetBypassCSPRequest
]
;
returnType
:
void
;
}
;
'
Page
.
getPermissionsPolicyState
'
:
{
paramsType
:
[
Protocol
.
Page
.
GetPermissionsPolicyStateRequest
]
;
returnType
:
Protocol
.
Page
.
GetPermissionsPolicyStateResponse
;
}
;
'
Page
.
getOriginTrials
'
:
{
paramsType
:
[
Protocol
.
Page
.
GetOriginTrialsRequest
]
;
returnType
:
Protocol
.
Page
.
GetOriginTrialsResponse
;
}
;
'
Page
.
setDeviceMetricsOverride
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetDeviceMetricsOverrideRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setDeviceOrientationOverride
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetDeviceOrientationOverrideRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setFontFamilies
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetFontFamiliesRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setFontSizes
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetFontSizesRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setDocumentContent
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetDocumentContentRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setDownloadBehavior
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetDownloadBehaviorRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setGeolocationOverride
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetGeolocationOverrideRequest
?
]
;
returnType
:
void
;
}
;
'
Page
.
setLifecycleEventsEnabled
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetLifecycleEventsEnabledRequest
]
;
returnType
:
void
;
}
;
'
Page
.
setTouchEmulationEnabled
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetTouchEmulationEnabledRequest
]
;
returnType
:
void
;
}
;
'
Page
.
startScreencast
'
:
{
paramsType
:
[
Protocol
.
Page
.
StartScreencastRequest
?
]
;
returnType
:
void
;
}
;
'
Page
.
stopLoading
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
crash
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
close
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
setWebLifecycleState
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetWebLifecycleStateRequest
]
;
returnType
:
void
;
}
;
'
Page
.
stopScreencast
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
produceCompilationCache
'
:
{
paramsType
:
[
Protocol
.
Page
.
ProduceCompilationCacheRequest
]
;
returnType
:
void
;
}
;
'
Page
.
addCompilationCache
'
:
{
paramsType
:
[
Protocol
.
Page
.
AddCompilationCacheRequest
]
;
returnType
:
void
;
}
;
'
Page
.
clearCompilationCache
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
setSPCTransactionMode
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetSPCTransactionModeRequest
]
;
returnType
:
void
;
}
;
'
Page
.
generateTestReport
'
:
{
paramsType
:
[
Protocol
.
Page
.
GenerateTestReportRequest
]
;
returnType
:
void
;
}
;
'
Page
.
waitForDebugger
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Page
.
setInterceptFileChooserDialog
'
:
{
paramsType
:
[
Protocol
.
Page
.
SetInterceptFileChooserDialogRequest
]
;
returnType
:
void
;
}
;
'
Performance
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Performance
.
enable
'
:
{
paramsType
:
[
Protocol
.
Performance
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
Performance
.
setTimeDomain
'
:
{
paramsType
:
[
Protocol
.
Performance
.
SetTimeDomainRequest
]
;
returnType
:
void
;
}
;
'
Performance
.
getMetrics
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Performance
.
GetMetricsResponse
;
}
;
'
PerformanceTimeline
.
enable
'
:
{
paramsType
:
[
Protocol
.
PerformanceTimeline
.
EnableRequest
]
;
returnType
:
void
;
}
;
'
Security
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Security
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Security
.
setIgnoreCertificateErrors
'
:
{
paramsType
:
[
Protocol
.
Security
.
SetIgnoreCertificateErrorsRequest
]
;
returnType
:
void
;
}
;
'
Security
.
handleCertificateError
'
:
{
paramsType
:
[
Protocol
.
Security
.
HandleCertificateErrorRequest
]
;
returnType
:
void
;
}
;
'
Security
.
setOverrideCertificateErrors
'
:
{
paramsType
:
[
Protocol
.
Security
.
SetOverrideCertificateErrorsRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
deliverPushMessage
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
DeliverPushMessageRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
dispatchSyncEvent
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
DispatchSyncEventRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
dispatchPeriodicSyncEvent
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
DispatchPeriodicSyncEventRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
inspectWorker
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
InspectWorkerRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
setForceUpdateOnPageLoad
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
SetForceUpdateOnPageLoadRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
skipWaiting
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
SkipWaitingRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
startWorker
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
StartWorkerRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
stopAllWorkers
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
stopWorker
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
StopWorkerRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
unregister
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
UnregisterRequest
]
;
returnType
:
void
;
}
;
'
ServiceWorker
.
updateRegistration
'
:
{
paramsType
:
[
Protocol
.
ServiceWorker
.
UpdateRegistrationRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
getStorageKeyForFrame
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetStorageKeyForFrameRequest
]
;
returnType
:
Protocol
.
Storage
.
GetStorageKeyForFrameResponse
;
}
;
'
Storage
.
clearDataForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
ClearDataForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
clearDataForStorageKey
'
:
{
paramsType
:
[
Protocol
.
Storage
.
ClearDataForStorageKeyRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
getCookies
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetCookiesRequest
?
]
;
returnType
:
Protocol
.
Storage
.
GetCookiesResponse
;
}
;
'
Storage
.
setCookies
'
:
{
paramsType
:
[
Protocol
.
Storage
.
SetCookiesRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
clearCookies
'
:
{
paramsType
:
[
Protocol
.
Storage
.
ClearCookiesRequest
?
]
;
returnType
:
void
;
}
;
'
Storage
.
getUsageAndQuota
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetUsageAndQuotaRequest
]
;
returnType
:
Protocol
.
Storage
.
GetUsageAndQuotaResponse
;
}
;
'
Storage
.
overrideQuotaForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
OverrideQuotaForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
trackCacheStorageForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
TrackCacheStorageForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
trackCacheStorageForStorageKey
'
:
{
paramsType
:
[
Protocol
.
Storage
.
TrackCacheStorageForStorageKeyRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
trackIndexedDBForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
TrackIndexedDBForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
trackIndexedDBForStorageKey
'
:
{
paramsType
:
[
Protocol
.
Storage
.
TrackIndexedDBForStorageKeyRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
untrackCacheStorageForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
UntrackCacheStorageForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
untrackCacheStorageForStorageKey
'
:
{
paramsType
:
[
Protocol
.
Storage
.
UntrackCacheStorageForStorageKeyRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
untrackIndexedDBForOrigin
'
:
{
paramsType
:
[
Protocol
.
Storage
.
UntrackIndexedDBForOriginRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
untrackIndexedDBForStorageKey
'
:
{
paramsType
:
[
Protocol
.
Storage
.
UntrackIndexedDBForStorageKeyRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
getTrustTokens
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Storage
.
GetTrustTokensResponse
;
}
;
'
Storage
.
clearTrustTokens
'
:
{
paramsType
:
[
Protocol
.
Storage
.
ClearTrustTokensRequest
]
;
returnType
:
Protocol
.
Storage
.
ClearTrustTokensResponse
;
}
;
'
Storage
.
getInterestGroupDetails
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetInterestGroupDetailsRequest
]
;
returnType
:
Protocol
.
Storage
.
GetInterestGroupDetailsResponse
;
}
;
'
Storage
.
setInterestGroupTracking
'
:
{
paramsType
:
[
Protocol
.
Storage
.
SetInterestGroupTrackingRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
getSharedStorageMetadata
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetSharedStorageMetadataRequest
]
;
returnType
:
Protocol
.
Storage
.
GetSharedStorageMetadataResponse
;
}
;
'
Storage
.
getSharedStorageEntries
'
:
{
paramsType
:
[
Protocol
.
Storage
.
GetSharedStorageEntriesRequest
]
;
returnType
:
Protocol
.
Storage
.
GetSharedStorageEntriesResponse
;
}
;
'
Storage
.
setSharedStorageEntry
'
:
{
paramsType
:
[
Protocol
.
Storage
.
SetSharedStorageEntryRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
deleteSharedStorageEntry
'
:
{
paramsType
:
[
Protocol
.
Storage
.
DeleteSharedStorageEntryRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
clearSharedStorageEntries
'
:
{
paramsType
:
[
Protocol
.
Storage
.
ClearSharedStorageEntriesRequest
]
;
returnType
:
void
;
}
;
'
Storage
.
setSharedStorageTracking
'
:
{
paramsType
:
[
Protocol
.
Storage
.
SetSharedStorageTrackingRequest
]
;
returnType
:
void
;
}
;
'
SystemInfo
.
getInfo
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
SystemInfo
.
GetInfoResponse
;
}
;
'
SystemInfo
.
getFeatureState
'
:
{
paramsType
:
[
Protocol
.
SystemInfo
.
GetFeatureStateRequest
]
;
returnType
:
Protocol
.
SystemInfo
.
GetFeatureStateResponse
;
}
;
'
SystemInfo
.
getProcessInfo
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
SystemInfo
.
GetProcessInfoResponse
;
}
;
'
Target
.
activateTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
ActivateTargetRequest
]
;
returnType
:
void
;
}
;
'
Target
.
attachToTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
AttachToTargetRequest
]
;
returnType
:
Protocol
.
Target
.
AttachToTargetResponse
;
}
;
'
Target
.
attachToBrowserTarget
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Target
.
AttachToBrowserTargetResponse
;
}
;
'
Target
.
closeTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
CloseTargetRequest
]
;
returnType
:
Protocol
.
Target
.
CloseTargetResponse
;
}
;
'
Target
.
exposeDevToolsProtocol
'
:
{
paramsType
:
[
Protocol
.
Target
.
ExposeDevToolsProtocolRequest
]
;
returnType
:
void
;
}
;
'
Target
.
createBrowserContext
'
:
{
paramsType
:
[
Protocol
.
Target
.
CreateBrowserContextRequest
?
]
;
returnType
:
Protocol
.
Target
.
CreateBrowserContextResponse
;
}
;
'
Target
.
getBrowserContexts
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Target
.
GetBrowserContextsResponse
;
}
;
'
Target
.
createTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
CreateTargetRequest
]
;
returnType
:
Protocol
.
Target
.
CreateTargetResponse
;
}
;
'
Target
.
detachFromTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
DetachFromTargetRequest
?
]
;
returnType
:
void
;
}
;
'
Target
.
disposeBrowserContext
'
:
{
paramsType
:
[
Protocol
.
Target
.
DisposeBrowserContextRequest
]
;
returnType
:
void
;
}
;
'
Target
.
getTargetInfo
'
:
{
paramsType
:
[
Protocol
.
Target
.
GetTargetInfoRequest
?
]
;
returnType
:
Protocol
.
Target
.
GetTargetInfoResponse
;
}
;
'
Target
.
getTargets
'
:
{
paramsType
:
[
Protocol
.
Target
.
GetTargetsRequest
?
]
;
returnType
:
Protocol
.
Target
.
GetTargetsResponse
;
}
;
'
Target
.
sendMessageToTarget
'
:
{
paramsType
:
[
Protocol
.
Target
.
SendMessageToTargetRequest
]
;
returnType
:
void
;
}
;
'
Target
.
setAutoAttach
'
:
{
paramsType
:
[
Protocol
.
Target
.
SetAutoAttachRequest
]
;
returnType
:
void
;
}
;
'
Target
.
autoAttachRelated
'
:
{
paramsType
:
[
Protocol
.
Target
.
AutoAttachRelatedRequest
]
;
returnType
:
void
;
}
;
'
Target
.
setDiscoverTargets
'
:
{
paramsType
:
[
Protocol
.
Target
.
SetDiscoverTargetsRequest
]
;
returnType
:
void
;
}
;
'
Target
.
setRemoteLocations
'
:
{
paramsType
:
[
Protocol
.
Target
.
SetRemoteLocationsRequest
]
;
returnType
:
void
;
}
;
'
Tethering
.
bind
'
:
{
paramsType
:
[
Protocol
.
Tethering
.
BindRequest
]
;
returnType
:
void
;
}
;
'
Tethering
.
unbind
'
:
{
paramsType
:
[
Protocol
.
Tethering
.
UnbindRequest
]
;
returnType
:
void
;
}
;
'
Tracing
.
end
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Tracing
.
getCategories
'
:
{
paramsType
:
[
]
;
returnType
:
Protocol
.
Tracing
.
GetCategoriesResponse
;
}
;
'
Tracing
.
recordClockSyncMarker
'
:
{
paramsType
:
[
Protocol
.
Tracing
.
RecordClockSyncMarkerRequest
]
;
returnType
:
void
;
}
;
'
Tracing
.
requestMemoryDump
'
:
{
paramsType
:
[
Protocol
.
Tracing
.
RequestMemoryDumpRequest
?
]
;
returnType
:
Protocol
.
Tracing
.
RequestMemoryDumpResponse
;
}
;
'
Tracing
.
start
'
:
{
paramsType
:
[
Protocol
.
Tracing
.
StartRequest
?
]
;
returnType
:
void
;
}
;
'
Fetch
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Fetch
.
enable
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
Fetch
.
failRequest
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
FailRequestRequest
]
;
returnType
:
void
;
}
;
'
Fetch
.
fulfillRequest
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
FulfillRequestRequest
]
;
returnType
:
void
;
}
;
'
Fetch
.
continueRequest
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
ContinueRequestRequest
]
;
returnType
:
void
;
}
;
'
Fetch
.
continueWithAuth
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
ContinueWithAuthRequest
]
;
returnType
:
void
;
}
;
'
Fetch
.
continueResponse
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
ContinueResponseRequest
]
;
returnType
:
void
;
}
;
'
Fetch
.
getResponseBody
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
GetResponseBodyRequest
]
;
returnType
:
Protocol
.
Fetch
.
GetResponseBodyResponse
;
}
;
'
Fetch
.
takeResponseBodyAsStream
'
:
{
paramsType
:
[
Protocol
.
Fetch
.
TakeResponseBodyAsStreamRequest
]
;
returnType
:
Protocol
.
Fetch
.
TakeResponseBodyAsStreamResponse
;
}
;
'
WebAudio
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
WebAudio
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
WebAudio
.
getRealtimeData
'
:
{
paramsType
:
[
Protocol
.
WebAudio
.
GetRealtimeDataRequest
]
;
returnType
:
Protocol
.
WebAudio
.
GetRealtimeDataResponse
;
}
;
'
WebAuthn
.
enable
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
EnableRequest
?
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
addVirtualAuthenticator
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
AddVirtualAuthenticatorRequest
]
;
returnType
:
Protocol
.
WebAuthn
.
AddVirtualAuthenticatorResponse
;
}
;
'
WebAuthn
.
setResponseOverrideBits
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
SetResponseOverrideBitsRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
removeVirtualAuthenticator
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
RemoveVirtualAuthenticatorRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
addCredential
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
AddCredentialRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
getCredential
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
GetCredentialRequest
]
;
returnType
:
Protocol
.
WebAuthn
.
GetCredentialResponse
;
}
;
'
WebAuthn
.
getCredentials
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
GetCredentialsRequest
]
;
returnType
:
Protocol
.
WebAuthn
.
GetCredentialsResponse
;
}
;
'
WebAuthn
.
removeCredential
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
RemoveCredentialRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
clearCredentials
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
ClearCredentialsRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
setUserVerified
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
SetUserVerifiedRequest
]
;
returnType
:
void
;
}
;
'
WebAuthn
.
setAutomaticPresenceSimulation
'
:
{
paramsType
:
[
Protocol
.
WebAuthn
.
SetAutomaticPresenceSimulationRequest
]
;
returnType
:
void
;
}
;
'
Media
.
enable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
'
Media
.
disable
'
:
{
paramsType
:
[
]
;
returnType
:
void
;
}
;
}
}
declare
type
EventType
=
string
|
symbol
;
declare
type
Handler
<
T
=
unknown
>
=
(
event
:
T
)
=
>
void
;
declare
type
WildcardHandler
<
T
=
Record
<
string
unknown
>
>
=
(
type
:
keyof
T
event
:
T
[
keyof
T
]
)
=
>
void
;
declare
class
EventEmitter
<
Events
extends
Record
<
EventType
unknown
>
>
{
#
private
;
on
(
type
:
'
*
'
handler
:
WildcardHandler
<
Events
>
)
:
EventEmitter
<
Events
>
;
on
<
Key
extends
keyof
Events
>
(
type
:
Key
handler
:
Handler
<
Events
[
Key
]
>
)
:
EventEmitter
<
Events
>
;
once
(
event
:
EventType
handler
:
Handler
)
:
EventEmitter
<
Events
>
;
off
(
type
:
'
*
'
handler
:
WildcardHandler
<
Events
>
)
:
EventEmitter
<
Events
>
;
off
<
Key
extends
keyof
Events
>
(
type
:
Key
handler
:
Handler
<
Events
[
Key
]
>
)
:
EventEmitter
<
Events
>
;
emit
(
event
:
EventType
eventData
:
Events
[
EventType
]
)
:
void
;
}
declare
type
CdpEvents
=
{
[
Property
in
keyof
ProtocolMapping
.
Events
]
:
ProtocolMapping
.
Events
[
Property
]
[
0
]
;
}
;
interface
CdpConnection
{
browserClient
(
)
:
CdpClient
;
getCdpClient
(
sessionId
:
string
)
:
CdpClient
;
}
interface
CdpClient
extends
EventEmitter
<
CdpEvents
>
{
sendCommand
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
params
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
interface
EventResponse
<
MethodType
ParamsType
>
{
method
:
MethodType
;
params
:
ParamsType
;
}
declare
namespace
Message
{
type
OutgoingMessage
=
CommandResponse
|
EventMessage
|
{
launched
:
true
;
}
;
type
RawCommandRequest
=
{
id
:
number
;
method
:
string
;
params
:
object
;
channel
?
:
string
;
}
;
type
CommandRequest
=
{
id
:
number
;
}
&
(
BrowsingContext
.
Command
|
Script
.
Command
|
Session
.
Command
|
CDP
.
Command
)
;
type
CommandResponse
=
{
id
:
number
;
}
&
CommandResponseResult
;
type
CommandResponseResult
=
BrowsingContext
.
CommandResult
|
Script
.
CommandResult
|
Session
.
CommandResult
|
CDP
.
CommandResult
|
ErrorResult
;
type
EventMessage
=
BrowsingContext
.
Event
|
Log
.
Event
|
CDP
.
Event
;
type
ErrorCode
=
'
unknown
error
'
|
'
unknown
command
'
|
'
invalid
argument
'
|
'
no
such
frame
'
;
type
ErrorResult
=
{
readonly
error
:
ErrorCode
;
readonly
message
:
string
;
readonly
stacktrace
?
:
string
;
}
;
class
ErrorResponseClass
implements
Message
.
ErrorResult
{
protected
constructor
(
error
:
Message
.
ErrorCode
message
:
string
stacktrace
?
:
string
)
;
readonly
error
:
Message
.
ErrorCode
;
readonly
message
:
string
;
readonly
stacktrace
?
:
string
;
toErrorResponse
(
commandId
:
number
)
:
Message
.
CommandResponse
;
}
class
UnknownException
extends
ErrorResponseClass
{
constructor
(
message
:
string
stacktrace
?
:
string
)
;
}
class
UnknownCommandException
extends
ErrorResponseClass
{
constructor
(
message
:
string
stacktrace
?
:
string
)
;
}
class
InvalidArgumentException
extends
ErrorResponseClass
{
constructor
(
message
:
string
stacktrace
?
:
string
)
;
}
class
NoSuchFrameException
extends
ErrorResponseClass
{
constructor
(
message
:
string
)
;
}
}
declare
namespace
CommonDataTypes
{
type
RemoteReference
=
{
handle
:
string
;
}
;
type
UndefinedValue
=
{
type
:
'
undefined
'
;
}
;
type
NullValue
=
{
type
:
'
null
'
;
}
;
type
StringValue
=
{
type
:
'
string
'
;
value
:
string
;
}
;
type
SpecialNumber
=
'
NaN
'
|
'
-
0
'
|
'
Infinity
'
|
'
+
Infinity
'
|
'
-
Infinity
'
;
type
NumberValue
=
{
type
:
'
number
'
;
value
:
SpecialNumber
|
number
;
}
;
type
BooleanValue
=
{
type
:
'
boolean
'
;
value
:
boolean
;
}
;
type
BigIntValue
=
{
type
:
'
bigint
'
;
value
:
string
;
}
;
type
PrimitiveProtocolValue
=
UndefinedValue
|
NullValue
|
StringValue
|
NumberValue
|
BooleanValue
|
BigIntValue
;
type
LocalValue
=
PrimitiveProtocolValue
|
ArrayLocalValue
|
DateLocalValue
|
MapLocalValue
|
ObjectLocalValue
|
RegExpLocalValue
|
SetLocalValue
;
type
LocalOrRemoteValue
=
RemoteReference
|
LocalValue
;
type
ListLocalValue
=
Array
<
LocalOrRemoteValue
>
;
type
ArrayLocalValue
=
{
type
:
'
array
'
;
value
:
ListLocalValue
;
}
;
type
DateLocalValue
=
{
type
:
'
date
'
;
value
:
string
;
}
;
type
MappingLocalValue
=
Array
<
[
string
|
LocalOrRemoteValue
LocalOrRemoteValue
]
>
;
type
MapLocalValue
=
{
type
:
'
map
'
;
value
:
MappingLocalValue
;
}
;
type
ObjectLocalValue
=
{
type
:
'
object
'
;
value
:
MappingLocalValue
;
}
;
type
RegExpLocalValue
=
{
type
:
'
regexp
'
;
value
:
{
pattern
:
string
;
flags
?
:
string
;
}
;
}
;
type
SetLocalValue
=
{
type
:
'
set
'
;
value
:
ListLocalValue
;
}
;
type
RemoteValue
=
PrimitiveProtocolValue
|
SymbolRemoteValue
|
ArrayRemoteValue
|
ObjectRemoteValue
|
FunctionRemoteValue
|
RegExpRemoteValue
|
DateRemoteValue
|
MapRemoteValue
|
SetRemoteValue
|
WeakMapRemoteValue
|
WeakSetRemoteValue
|
IteratorRemoteValue
|
GeneratorRemoteValue
|
ProxyRemoteValue
|
ErrorRemoteValue
|
PromiseRemoteValue
|
TypedArrayRemoteValue
|
ArrayBufferRemoteValue
|
NodeRemoteValue
|
WindowProxyRemoteValue
;
type
ListRemoteValue
=
RemoteValue
[
]
;
type
MappingRemoteValue
=
[
RemoteValue
|
string
RemoteValue
]
[
]
;
type
SymbolRemoteValue
=
RemoteReference
&
{
type
:
'
symbol
'
;
}
;
type
ArrayRemoteValue
=
RemoteReference
&
{
type
:
'
array
'
;
value
?
:
ListRemoteValue
;
}
;
type
ObjectRemoteValue
=
RemoteReference
&
{
type
:
'
object
'
;
value
?
:
MappingRemoteValue
;
}
;
type
FunctionRemoteValue
=
RemoteReference
&
{
type
:
'
function
'
;
}
;
type
RegExpRemoteValue
=
RemoteReference
&
RegExpLocalValue
;
type
DateRemoteValue
=
RemoteReference
&
DateLocalValue
;
type
MapRemoteValue
=
RemoteReference
&
{
type
:
'
map
'
;
value
:
MappingRemoteValue
;
}
;
type
SetRemoteValue
=
RemoteReference
&
{
type
:
'
set
'
;
value
:
ListRemoteValue
;
}
;
type
WeakMapRemoteValue
=
RemoteReference
&
{
type
:
'
weakmap
'
;
}
;
type
WeakSetRemoteValue
=
RemoteReference
&
{
type
:
'
weakset
'
;
}
;
type
IteratorRemoteValue
=
RemoteReference
&
{
type
:
'
iterator
'
;
}
;
type
GeneratorRemoteValue
=
RemoteReference
&
{
type
:
'
generator
'
;
}
;
type
ProxyRemoteValue
=
RemoteReference
&
{
type
:
'
proxy
'
;
}
;
type
ErrorRemoteValue
=
RemoteReference
&
{
type
:
'
error
'
;
}
;
type
PromiseRemoteValue
=
RemoteReference
&
{
type
:
'
promise
'
;
}
;
type
TypedArrayRemoteValue
=
RemoteReference
&
{
type
:
'
typedarray
'
;
}
;
type
ArrayBufferRemoteValue
=
RemoteReference
&
{
type
:
'
arraybuffer
'
;
}
;
type
NodeRemoteValue
=
RemoteReference
&
{
type
:
'
node
'
;
value
?
:
NodeProperties
;
}
;
type
NodeProperties
=
RemoteReference
&
{
nodeType
:
number
;
nodeValue
:
string
;
localName
?
:
string
;
namespaceURI
?
:
string
;
childNodeCount
:
number
;
children
?
:
[
NodeRemoteValue
]
;
attributes
?
:
any
;
shadowRoot
?
:
NodeRemoteValue
|
null
;
}
;
type
WindowProxyRemoteValue
=
RemoteReference
&
{
type
:
'
window
'
;
}
;
type
BrowsingContext
=
string
;
}
declare
namespace
Script
{
type
Command
=
EvaluateCommand
|
CallFunctionCommand
|
GetRealmsCommand
|
DisownCommand
;
type
CommandResult
=
EvaluateResult
|
CallFunctionResult
|
GetRealmsResult
|
DisownResult
;
type
Realm
=
string
;
type
ScriptResult
=
ScriptResultSuccess
|
ScriptResultException
;
type
ScriptResultSuccess
=
{
type
:
'
success
'
;
result
:
CommonDataTypes
.
RemoteValue
;
realm
:
string
;
}
;
type
ScriptResultException
=
{
exceptionDetails
:
ExceptionDetails
;
type
:
'
exception
'
;
realm
:
string
;
}
;
type
ExceptionDetails
=
{
columnNumber
:
number
;
exception
:
CommonDataTypes
.
RemoteValue
;
lineNumber
:
number
;
stackTrace
:
Script
.
StackTrace
;
text
:
string
;
}
;
type
RealmInfo
=
WindowRealmInfo
|
DedicatedWorkerRealmInfo
|
SharedWorkerRealmInfo
|
ServiceWorkerRealmInfo
|
WorkerRealmInfo
|
PaintWorkletRealmInfo
|
AudioWorkletRealmInfo
|
WorkletRealmInfo
;
type
BaseRealmInfo
=
{
realm
:
Realm
;
origin
:
string
;
}
;
type
WindowRealmInfo
=
BaseRealmInfo
&
{
type
:
'
window
'
;
context
:
CommonDataTypes
.
BrowsingContext
;
sandbox
?
:
string
;
}
;
type
DedicatedWorkerRealmInfo
=
BaseRealmInfo
&
{
type
:
'
dedicated
-
worker
'
;
}
;
type
SharedWorkerRealmInfo
=
BaseRealmInfo
&
{
type
:
'
shared
-
worker
'
;
}
;
type
ServiceWorkerRealmInfo
=
BaseRealmInfo
&
{
type
:
'
service
-
worker
'
;
}
;
type
WorkerRealmInfo
=
BaseRealmInfo
&
{
type
:
'
worker
'
;
}
;
type
PaintWorkletRealmInfo
=
BaseRealmInfo
&
{
type
:
'
paint
-
worklet
'
;
}
;
type
AudioWorkletRealmInfo
=
BaseRealmInfo
&
{
type
:
'
audio
-
worklet
'
;
}
;
type
WorkletRealmInfo
=
BaseRealmInfo
&
{
type
:
'
worklet
'
;
}
;
type
RealmType
=
'
window
'
|
'
dedicated
-
worker
'
|
'
shared
-
worker
'
|
'
service
-
worker
'
|
'
worker
'
|
'
paint
-
worklet
'
|
'
audio
-
worklet
'
|
'
worklet
'
;
type
GetRealmsParameters
=
{
context
?
:
CommonDataTypes
.
BrowsingContext
;
type
?
:
RealmType
;
}
;
type
GetRealmsCommand
=
{
method
:
'
script
.
getRealms
'
;
params
:
GetRealmsParameters
;
}
;
type
GetRealmsResult
=
{
result
:
{
realms
:
RealmInfo
[
]
;
}
;
}
;
type
EvaluateCommand
=
{
method
:
'
script
.
evaluate
'
;
params
:
EvaluateParameters
;
}
;
type
ContextTarget
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
sandbox
?
:
string
;
}
;
type
RealmTarget
=
{
realm
:
string
;
}
;
type
Target
=
RealmTarget
|
ContextTarget
;
type
OwnershipModel
=
'
root
'
|
'
none
'
;
type
EvaluateParameters
=
{
expression
:
string
;
awaitPromise
:
boolean
;
target
:
Target
;
resultOwnership
?
:
OwnershipModel
;
}
;
type
EvaluateResult
=
{
result
:
ScriptResult
;
}
;
type
DisownCommand
=
{
method
:
'
script
.
disown
'
;
params
:
EvaluateParameters
;
}
;
type
DisownParameters
=
{
target
:
Target
;
handles
:
Array
<
string
>
;
}
;
type
DisownResult
=
{
result
:
{
}
;
}
;
type
CallFunctionCommand
=
{
method
:
'
script
.
callFunction
'
;
params
:
CallFunctionParameters
;
}
;
type
ArgumentValue
=
CommonDataTypes
.
RemoteReference
|
CommonDataTypes
.
LocalValue
;
type
CallFunctionParameters
=
{
functionDeclaration
:
string
;
target
:
Target
;
arguments
?
:
Array
<
ArgumentValue
>
;
this
?
:
ArgumentValue
;
awaitPromise
:
boolean
;
resultOwnership
?
:
OwnershipModel
;
}
;
type
CallFunctionResult
=
{
result
:
ScriptResult
;
}
;
type
Source
=
{
realm
:
Realm
;
context
?
:
CommonDataTypes
.
BrowsingContext
;
}
;
type
StackTrace
=
{
callFrames
:
StackFrame
[
]
;
}
;
type
StackFrame
=
{
columnNumber
:
number
;
functionName
:
string
;
lineNumber
:
number
;
url
:
string
;
}
;
}
declare
namespace
BrowsingContext
{
type
Command
=
GetTreeCommand
|
NavigateCommand
|
CreateCommand
|
CloseCommand
;
type
CommandResult
=
GetTreeResult
|
NavigateResult
|
CreateResult
|
CloseResult
;
type
Event
=
LoadEvent
|
DomContentLoadedEvent
|
ContextCreatedEvent
|
ContextDestroyedEvent
;
type
Navigation
=
string
;
type
GetTreeCommand
=
{
method
:
'
browsingContext
.
getTree
'
;
params
:
GetTreeParameters
;
}
;
type
GetTreeParameters
=
{
maxDepth
?
:
number
;
root
?
:
CommonDataTypes
.
BrowsingContext
;
}
;
type
GetTreeResult
=
{
result
:
{
contexts
:
InfoList
;
}
;
}
;
type
InfoList
=
Info
[
]
;
type
Info
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
parent
?
:
CommonDataTypes
.
BrowsingContext
|
null
;
url
:
string
;
children
:
InfoList
|
null
;
}
;
type
NavigateCommand
=
{
method
:
'
browsingContext
.
navigate
'
;
params
:
NavigateParameters
;
}
;
type
ReadinessState
=
'
none
'
|
'
interactive
'
|
'
complete
'
;
type
NavigateParameters
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
url
:
string
;
wait
?
:
ReadinessState
;
}
;
type
NavigateResult
=
{
result
:
{
navigation
:
Navigation
|
null
;
url
:
string
;
}
;
}
;
type
CreateCommand
=
{
method
:
'
browsingContext
.
create
'
;
params
:
CreateParameters
;
}
;
type
CreateParameters
=
{
type
:
'
tab
'
|
'
window
'
;
referenceContext
?
:
CommonDataTypes
.
BrowsingContext
;
}
;
type
CreateResult
=
{
result
:
Info
;
}
;
type
CloseCommand
=
{
method
:
'
browsingContext
.
close
'
;
params
:
CloseParameters
;
}
;
type
CloseParameters
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
}
;
type
CloseResult
=
{
result
:
{
}
;
}
;
type
LoadEvent
=
EventResponse
<
EventNames
.
LoadEvent
NavigationInfo
>
;
type
DomContentLoadedEvent
=
EventResponse
<
EventNames
.
DomContentLoadedEvent
NavigationInfo
>
;
type
NavigationInfo
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
navigation
:
Navigation
|
null
;
url
:
string
;
}
;
type
ContextCreatedEvent
=
EventResponse
<
EventNames
.
ContextCreatedEvent
BrowsingContext
.
Info
>
;
type
ContextDestroyedEvent
=
EventResponse
<
EventNames
.
ContextDestroyedEvent
BrowsingContext
.
Info
>
;
enum
EventNames
{
LoadEvent
=
"
browsingContext
.
load
"
DomContentLoadedEvent
=
"
browsingContext
.
domContentLoaded
"
ContextCreatedEvent
=
"
browsingContext
.
contextCreated
"
ContextDestroyedEvent
=
"
browsingContext
.
contextDestroyed
"
}
}
declare
namespace
Log
{
type
LogEntry
=
GenericLogEntry
|
ConsoleLogEntry
|
JavascriptLogEntry
;
type
Event
=
LogEntryAddedEvent
;
type
LogLevel
=
'
debug
'
|
'
info
'
|
'
warn
'
|
'
error
'
;
type
BaseLogEntry
=
{
level
:
LogLevel
;
source
:
Script
.
Source
;
text
:
string
|
null
;
timestamp
:
number
;
stackTrace
?
:
Script
.
StackTrace
;
}
;
type
GenericLogEntry
=
BaseLogEntry
&
{
type
:
string
;
}
;
type
ConsoleLogEntry
=
BaseLogEntry
&
{
type
:
'
console
'
;
method
:
string
;
args
:
CommonDataTypes
.
RemoteValue
[
]
;
}
;
type
JavascriptLogEntry
=
BaseLogEntry
&
{
type
:
'
javascript
'
;
}
;
type
LogEntryAddedEvent
=
EventResponse
<
EventNames
.
LogEntryAddedEvent
LogEntry
>
;
enum
EventNames
{
LogEntryAddedEvent
=
"
log
.
entryAdded
"
}
}
declare
namespace
CDP
{
type
Command
=
SendCommandCommand
|
GetSessionCommand
;
type
CommandResult
=
SendCommandResult
|
GetSessionResult
;
type
Event
=
EventReceivedEvent
;
type
SendCommandCommand
=
{
method
:
'
cdp
.
sendCommand
'
;
params
:
SendCommandParams
;
}
;
type
SendCommandParams
=
{
cdpMethod
:
string
;
cdpParams
:
object
;
cdpSession
?
:
any
;
}
;
type
SendCommandResult
=
{
result
:
any
;
}
;
type
GetSessionCommand
=
{
method
:
'
cdp
.
getSession
'
;
params
:
GetSessionParams
;
}
;
type
GetSessionParams
=
{
context
:
CommonDataTypes
.
BrowsingContext
;
}
;
type
GetSessionResult
=
{
result
:
{
session
:
string
;
}
;
}
;
type
EventReceivedEvent
=
EventResponse
<
EventNames
.
EventReceivedEvent
EventReceivedParams
>
;
type
EventReceivedParams
=
{
cdpMethod
:
string
;
cdpParams
:
object
;
cdpSession
:
string
;
}
;
enum
EventNames
{
EventReceivedEvent
=
"
cdp
.
eventReceived
"
}
}
declare
namespace
Session
{
type
Command
=
StatusCommand
|
SubscribeCommand
|
UnsubscribeCommand
;
type
CommandResult
=
StatusResult
|
SubscribeResult
|
UnsubscribeResult
;
type
StatusCommand
=
{
method
:
'
session
.
status
'
;
params
:
{
}
;
}
;
type
StatusResult
=
{
result
:
{
ready
:
boolean
;
message
:
string
;
}
;
}
;
type
SubscribeCommand
=
{
method
:
'
session
.
subscribe
'
;
params
:
SubscribeParameters
;
}
;
type
SubscribeParameters
=
{
events
:
Array
<
BrowsingContext
.
EventNames
|
Log
.
EventNames
|
CDP
.
EventNames
>
;
contexts
?
:
Array
<
CommonDataTypes
.
BrowsingContext
>
;
}
;
type
SubscribeResult
=
{
result
:
{
}
;
}
;
type
UnsubscribeCommand
=
{
method
:
'
session
.
unsubscribe
'
;
params
:
SubscribeParameters
;
}
;
type
UnsubscribeResult
=
{
result
:
{
}
;
}
;
}
type
protocol_d_EventResponse
<
MethodType
ParamsType
>
=
EventResponse
<
MethodType
ParamsType
>
;
declare
const
protocol_d_Message
:
typeof
Message
;
declare
const
protocol_d_CommonDataTypes
:
typeof
CommonDataTypes
;
declare
const
protocol_d_Script
:
typeof
Script
;
declare
const
protocol_d_BrowsingContext
:
typeof
BrowsingContext
;
declare
const
protocol_d_Log
:
typeof
Log
;
declare
const
protocol_d_CDP
:
typeof
CDP
;
declare
const
protocol_d_Session
:
typeof
Session
;
declare
namespace
protocol_d
{
export
{
protocol_d_EventResponse
as
EventResponse
protocol_d_Message
as
Message
protocol_d_CommonDataTypes
as
CommonDataTypes
protocol_d_Script
as
Script
protocol_d_BrowsingContext
as
BrowsingContext
protocol_d_Log
as
Log
protocol_d_CDP
as
CDP
protocol_d_Session
as
Session
}
;
}
interface
BidiTransport
{
setOnMessage
:
(
handler
:
(
message
:
Message
.
RawCommandRequest
)
=
>
Promise
<
void
>
)
=
>
void
;
sendMessage
:
(
message
:
Message
.
OutgoingMessage
)
=
>
Promise
<
void
>
;
close
(
)
:
void
;
}
declare
class
OutgoingBidiMessage
{
#
private
;
private
constructor
(
)
;
static
createFromPromise
(
messagePromise
:
Promise
<
Message
.
OutgoingMessage
>
channel
:
string
|
null
)
:
Promise
<
OutgoingBidiMessage
>
;
static
createResolved
(
message
:
Message
.
OutgoingMessage
channel
:
string
|
null
)
:
Promise
<
OutgoingBidiMessage
>
;
get
message
(
)
:
Message
.
OutgoingMessage
;
get
channel
(
)
:
string
|
null
;
}
interface
BidiParser
{
parseGetRealmsParams
(
params
:
object
)
:
Script
.
GetRealmsParameters
;
parseCallFunctionParams
(
params
:
object
)
:
Script
.
CallFunctionParameters
;
parseEvaluateParams
(
params
:
object
)
:
Script
.
EvaluateParameters
;
parseDisownParams
(
params
:
object
)
:
Script
.
DisownParameters
;
parseSendCommandParams
(
params
:
object
)
:
CDP
.
SendCommandParams
;
parseGetSessionParams
(
params
:
object
)
:
CDP
.
GetSessionParams
;
parseNavigateParams
(
params
:
object
)
:
BrowsingContext
.
NavigateParameters
;
parseGetTreeParams
(
params
:
object
)
:
BrowsingContext
.
GetTreeParameters
;
parseSubscribeParams
(
params
:
object
)
:
Session
.
SubscribeParameters
;
parseCreateParams
(
params
:
object
)
:
BrowsingContext
.
CreateParameters
;
parseCloseParams
(
params
:
object
)
:
BrowsingContext
.
CloseParameters
;
}
declare
type
BidiServerEvents
=
{
message
:
Message
.
RawCommandRequest
;
}
;
declare
class
BidiServer
extends
EventEmitter
<
BidiServerEvents
>
{
#
private
;
private
constructor
(
)
;
static
createAndStart
(
bidiTransport
:
BidiTransport
cdpConnection
:
CdpConnection
selfTargetId
:
string
parser
?
:
BidiParser
)
:
Promise
<
BidiServer
>
;
emitOutgoingMessage
(
messageEntry
:
Promise
<
OutgoingBidiMessage
>
)
:
void
;
close
(
)
:
void
;
}
type
bidiMapper_d_CdpConnection
=
CdpConnection
;
type
bidiMapper_d_CdpClient
=
CdpClient
;
type
bidiMapper_d_BidiServer
=
BidiServer
;
declare
const
bidiMapper_d_BidiServer
:
typeof
BidiServer
;
type
bidiMapper_d_BidiTransport
=
BidiTransport
;
type
bidiMapper_d_EventEmitter
<
Events
extends
Record
<
EventType
unknown
>
>
=
EventEmitter
<
Events
>
;
declare
const
bidiMapper_d_EventEmitter
:
typeof
EventEmitter
;
declare
namespace
bidiMapper_d
{
export
{
bidiMapper_d_CdpConnection
as
CdpConnection
bidiMapper_d_CdpClient
as
CdpClient
bidiMapper_d_BidiServer
as
BidiServer
bidiMapper_d_BidiTransport
as
BidiTransport
bidiMapper_d_EventEmitter
as
EventEmitter
}
;
}
export
{
protocol_d
as
Bidi
bidiMapper_d
as
BidiMapper
}
;
