import
{
ChildProcess
}
from
'
child_process
'
;
import
{
Connection
}
from
'
.
/
Connection
.
js
'
;
import
{
Page
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
Viewport
}
from
'
.
/
PuppeteerViewport
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
import
{
TargetManager
}
from
'
.
/
TargetManager
.
js
'
;
import
{
Browser
as
BrowserBase
BrowserCloseCallback
TargetFilterCallback
IsPageTargetCallback
BrowserContextOptions
WaitForTargetOptions
Permission
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
BrowserContext
}
from
'
.
.
/
api
/
BrowserContext
.
js
'
;
export
declare
class
CDPBrowser
extends
BrowserBase
{
#
private
;
static
_create
(
product
:
'
firefox
'
|
'
chrome
'
|
undefined
connection
:
Connection
contextIds
:
string
[
]
ignoreHTTPSErrors
:
boolean
defaultViewport
?
:
Viewport
|
null
process
?
:
ChildProcess
closeCallback
?
:
BrowserCloseCallback
targetFilterCallback
?
:
TargetFilterCallback
isPageTargetCallback
?
:
IsPageTargetCallback
)
:
Promise
<
CDPBrowser
>
;
get
_targets
(
)
:
Map
<
string
Target
>
;
constructor
(
product
:
'
chrome
'
|
'
firefox
'
|
undefined
connection
:
Connection
contextIds
:
string
[
]
ignoreHTTPSErrors
:
boolean
defaultViewport
?
:
Viewport
|
null
process
?
:
ChildProcess
closeCallback
?
:
BrowserCloseCallback
targetFilterCallback
?
:
TargetFilterCallback
isPageTargetCallback
?
:
IsPageTargetCallback
)
;
_attach
(
)
:
Promise
<
void
>
;
_detach
(
)
:
void
;
process
(
)
:
ChildProcess
|
null
;
_targetManager
(
)
:
TargetManager
;
_getIsPageTargetCallback
(
)
:
IsPageTargetCallback
|
undefined
;
createIncognitoBrowserContext
(
options
?
:
BrowserContextOptions
)
:
Promise
<
CDPBrowserContext
>
;
browserContexts
(
)
:
CDPBrowserContext
[
]
;
defaultBrowserContext
(
)
:
CDPBrowserContext
;
_disposeContext
(
contextId
?
:
string
)
:
Promise
<
void
>
;
wsEndpoint
(
)
:
string
;
newPage
(
)
:
Promise
<
Page
>
;
_createPageInContext
(
contextId
?
:
string
)
:
Promise
<
Page
>
;
targets
(
)
:
Target
[
]
;
target
(
)
:
Target
;
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
WaitForTargetOptions
)
:
Promise
<
Target
>
;
pages
(
)
:
Promise
<
Page
[
]
>
;
version
(
)
:
Promise
<
string
>
;
userAgent
(
)
:
Promise
<
string
>
;
close
(
)
:
Promise
<
void
>
;
disconnect
(
)
:
void
;
isConnected
(
)
:
boolean
;
}
export
declare
class
CDPBrowserContext
extends
BrowserContext
{
#
private
;
constructor
(
connection
:
Connection
browser
:
CDPBrowser
contextId
?
:
string
)
;
get
id
(
)
:
string
|
undefined
;
targets
(
)
:
Target
[
]
;
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
{
timeout
?
:
number
;
}
)
:
Promise
<
Target
>
;
pages
(
)
:
Promise
<
Page
[
]
>
;
isIncognito
(
)
:
boolean
;
overridePermissions
(
origin
:
string
permissions
:
Permission
[
]
)
:
Promise
<
void
>
;
clearPermissionOverrides
(
)
:
Promise
<
void
>
;
newPage
(
)
:
Promise
<
Page
>
;
browser
(
)
:
CDPBrowser
;
close
(
)
:
Promise
<
void
>
;
}
