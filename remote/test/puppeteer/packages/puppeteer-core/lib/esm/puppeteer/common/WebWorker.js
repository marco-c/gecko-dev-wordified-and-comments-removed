var
__classPrivateFieldSet
=
(
this
&
&
this
.
__classPrivateFieldSet
)
|
|
function
(
receiver
state
value
kind
f
)
{
if
(
kind
=
=
=
"
m
"
)
throw
new
TypeError
(
"
Private
method
is
not
writable
"
)
;
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
setter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
write
private
member
to
an
object
whose
class
did
not
declare
it
"
)
;
return
(
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
value
)
:
f
?
f
.
value
=
value
:
state
.
set
(
receiver
value
)
)
value
;
}
;
var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
_WebWorker_executionContext
_WebWorker_client
_WebWorker_url
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
import
{
debugError
}
from
'
.
/
util
.
js
'
;
import
{
createDeferredPromise
}
from
'
.
.
/
util
/
DeferredPromise
.
js
'
;
export
class
WebWorker
extends
EventEmitter
{
constructor
(
client
url
consoleAPICalled
exceptionThrown
)
{
super
(
)
;
_WebWorker_executionContext
.
set
(
this
createDeferredPromise
(
)
)
;
_WebWorker_client
.
set
(
this
void
0
)
;
_WebWorker_url
.
set
(
this
void
0
)
;
__classPrivateFieldSet
(
this
_WebWorker_client
client
"
f
"
)
;
__classPrivateFieldSet
(
this
_WebWorker_url
url
"
f
"
)
;
__classPrivateFieldGet
(
this
_WebWorker_client
"
f
"
)
.
once
(
'
Runtime
.
executionContextCreated
'
async
(
event
)
=
>
{
const
context
=
new
ExecutionContext
(
client
event
.
context
)
;
__classPrivateFieldGet
(
this
_WebWorker_executionContext
"
f
"
)
.
resolve
(
context
)
;
}
)
;
__classPrivateFieldGet
(
this
_WebWorker_client
"
f
"
)
.
on
(
'
Runtime
.
consoleAPICalled
'
async
(
event
)
=
>
{
const
context
=
await
__classPrivateFieldGet
(
this
_WebWorker_executionContext
"
f
"
)
;
return
consoleAPICalled
(
event
.
type
event
.
args
.
map
(
(
object
)
=
>
{
return
new
JSHandle
(
context
object
)
;
}
)
event
.
stackTrace
)
;
}
)
;
__classPrivateFieldGet
(
this
_WebWorker_client
"
f
"
)
.
on
(
'
Runtime
.
exceptionThrown
'
exception
=
>
{
return
exceptionThrown
(
exception
.
exceptionDetails
)
;
}
)
;
__classPrivateFieldGet
(
this
_WebWorker_client
"
f
"
)
.
send
(
'
Runtime
.
enable
'
)
.
catch
(
debugError
)
;
}
async
executionContext
(
)
{
return
__classPrivateFieldGet
(
this
_WebWorker_executionContext
"
f
"
)
;
}
url
(
)
{
return
__classPrivateFieldGet
(
this
_WebWorker_url
"
f
"
)
;
}
async
evaluate
(
pageFunction
.
.
.
args
)
{
const
context
=
await
__classPrivateFieldGet
(
this
_WebWorker_executionContext
"
f
"
)
;
return
context
.
evaluate
(
pageFunction
.
.
.
args
)
;
}
async
evaluateHandle
(
pageFunction
.
.
.
args
)
{
const
context
=
await
__classPrivateFieldGet
(
this
_WebWorker_executionContext
"
f
"
)
;
return
context
.
evaluateHandle
(
pageFunction
.
.
.
args
)
;
}
}
_WebWorker_executionContext
=
new
WeakMap
(
)
_WebWorker_client
=
new
WeakMap
(
)
_WebWorker_url
=
new
WeakMap
(
)
;
