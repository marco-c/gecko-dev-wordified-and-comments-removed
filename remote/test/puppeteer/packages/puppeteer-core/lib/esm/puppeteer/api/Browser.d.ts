import
{
ChildProcess
}
from
'
child_process
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
EventEmitter
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
import
type
{
Page
}
from
'
.
/
Page
.
js
'
;
import
type
{
Target
}
from
'
.
.
/
common
/
Target
.
js
'
;
import
type
{
BrowserContext
}
from
'
.
/
BrowserContext
.
js
'
;
export
interface
BrowserContextOptions
{
proxyServer
?
:
string
;
proxyBypassList
?
:
string
[
]
;
}
export
type
BrowserCloseCallback
=
(
)
=
>
Promise
<
void
>
|
void
;
export
type
TargetFilterCallback
=
(
target
:
Protocol
.
Target
.
TargetInfo
)
=
>
boolean
;
export
type
IsPageTargetCallback
=
(
target
:
Protocol
.
Target
.
TargetInfo
)
=
>
boolean
;
export
declare
const
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
:
Map
<
Permission
Protocol
.
Browser
.
PermissionType
>
;
export
type
Permission
=
'
geolocation
'
|
'
midi
'
|
'
notifications
'
|
'
camera
'
|
'
microphone
'
|
'
background
-
sync
'
|
'
ambient
-
light
-
sensor
'
|
'
accelerometer
'
|
'
gyroscope
'
|
'
magnetometer
'
|
'
accessibility
-
events
'
|
'
clipboard
-
read
'
|
'
clipboard
-
write
'
|
'
payment
-
handler
'
|
'
persistent
-
storage
'
|
'
idle
-
detection
'
|
'
midi
-
sysex
'
;
export
interface
WaitForTargetOptions
{
timeout
?
:
number
;
}
export
declare
const
enum
BrowserEmittedEvents
{
Disconnected
=
"
disconnected
"
TargetChanged
=
"
targetchanged
"
TargetCreated
=
"
targetcreated
"
TargetDestroyed
=
"
targetdestroyed
"
}
export
declare
class
Browser
extends
EventEmitter
{
constructor
(
)
;
_attach
(
)
:
Promise
<
void
>
;
_detach
(
)
:
void
;
get
_targets
(
)
:
Map
<
string
Target
>
;
process
(
)
:
ChildProcess
|
null
;
_getIsPageTargetCallback
(
)
:
IsPageTargetCallback
|
undefined
;
createIncognitoBrowserContext
(
options
?
:
BrowserContextOptions
)
:
Promise
<
BrowserContext
>
;
browserContexts
(
)
:
BrowserContext
[
]
;
defaultBrowserContext
(
)
:
BrowserContext
;
_disposeContext
(
contextId
?
:
string
)
:
Promise
<
void
>
;
wsEndpoint
(
)
:
string
;
newPage
(
)
:
Promise
<
Page
>
;
_createPageInContext
(
contextId
?
:
string
)
:
Promise
<
Page
>
;
targets
(
)
:
Target
[
]
;
target
(
)
:
Target
;
waitForTarget
(
predicate
:
(
x
:
Target
)
=
>
boolean
|
Promise
<
boolean
>
options
?
:
WaitForTargetOptions
)
:
Promise
<
Target
>
;
pages
(
)
:
Promise
<
Page
[
]
>
;
version
(
)
:
Promise
<
string
>
;
userAgent
(
)
:
Promise
<
string
>
;
close
(
)
:
Promise
<
void
>
;
disconnect
(
)
:
void
;
isConnected
(
)
:
boolean
;
}
export
declare
const
enum
BrowserContextEmittedEvents
{
TargetChanged
=
"
targetchanged
"
TargetCreated
=
"
targetcreated
"
TargetDestroyed
=
"
targetdestroyed
"
}
