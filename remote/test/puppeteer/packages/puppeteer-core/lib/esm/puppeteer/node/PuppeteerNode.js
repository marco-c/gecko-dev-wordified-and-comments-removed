var
__classPrivateFieldSet
=
(
this
&
&
this
.
__classPrivateFieldSet
)
|
|
function
(
receiver
state
value
kind
f
)
{
if
(
kind
=
=
=
"
m
"
)
throw
new
TypeError
(
"
Private
method
is
not
writable
"
)
;
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
setter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
write
private
member
to
an
object
whose
class
did
not
declare
it
"
)
;
return
(
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
value
)
:
f
?
f
.
value
=
value
:
state
.
set
(
receiver
value
)
)
value
;
}
;
var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
_PuppeteerNode_instances
_PuppeteerNode__launcher
_PuppeteerNode_lastLaunchedProduct
_PuppeteerNode_launcher_get
;
import
{
join
}
from
'
path
'
;
import
{
Puppeteer
}
from
'
.
.
/
common
/
Puppeteer
.
js
'
;
import
{
PUPPETEER_REVISIONS
}
from
'
.
.
/
revisions
.
js
'
;
import
{
BrowserFetcher
}
from
'
.
/
BrowserFetcher
.
js
'
;
import
{
ChromeLauncher
}
from
'
.
/
ChromeLauncher
.
js
'
;
import
{
FirefoxLauncher
}
from
'
.
/
FirefoxLauncher
.
js
'
;
export
class
PuppeteerNode
extends
Puppeteer
{
constructor
(
settings
)
{
const
{
configuration
.
.
.
commonSettings
}
=
settings
;
super
(
commonSettings
)
;
_PuppeteerNode_instances
.
add
(
this
)
;
_PuppeteerNode__launcher
.
set
(
this
void
0
)
;
_PuppeteerNode_lastLaunchedProduct
.
set
(
this
void
0
)
;
this
.
configuration
=
{
}
;
if
(
configuration
)
{
this
.
configuration
=
configuration
;
}
switch
(
this
.
configuration
.
defaultProduct
)
{
case
'
firefox
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
firefox
;
break
;
default
:
this
.
configuration
.
defaultProduct
=
'
chrome
'
;
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
chromium
;
break
;
}
this
.
connect
=
this
.
connect
.
bind
(
this
)
;
this
.
launch
=
this
.
launch
.
bind
(
this
)
;
this
.
executablePath
=
this
.
executablePath
.
bind
(
this
)
;
this
.
defaultArgs
=
this
.
defaultArgs
.
bind
(
this
)
;
this
.
createBrowserFetcher
=
this
.
createBrowserFetcher
.
bind
(
this
)
;
}
connect
(
options
)
{
return
super
.
connect
(
options
)
;
}
launch
(
options
=
{
}
)
{
const
{
product
=
this
.
defaultProduct
}
=
options
;
__classPrivateFieldSet
(
this
_PuppeteerNode_lastLaunchedProduct
product
"
f
"
)
;
return
__classPrivateFieldGet
(
this
_PuppeteerNode_instances
"
a
"
_PuppeteerNode_launcher_get
)
.
launch
(
options
)
;
}
executablePath
(
channel
)
{
return
__classPrivateFieldGet
(
this
_PuppeteerNode_instances
"
a
"
_PuppeteerNode_launcher_get
)
.
executablePath
(
channel
)
;
}
get
browserRevision
(
)
{
var
_a
_b
_c
;
return
(
(
_c
=
(
_b
=
(
_a
=
__classPrivateFieldGet
(
this
_PuppeteerNode__launcher
"
f
"
)
)
=
=
=
null
|
|
_a
=
=
=
void
0
?
void
0
:
_a
.
getActualBrowserRevision
(
)
)
!
=
=
null
&
&
_b
!
=
=
void
0
?
_b
:
this
.
configuration
.
browserRevision
)
!
=
=
null
&
&
_c
!
=
=
void
0
?
_c
:
this
.
defaultBrowserRevision
)
;
}
get
defaultDownloadPath
(
)
{
var
_a
;
return
(
(
_a
=
this
.
configuration
.
downloadPath
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
join
(
this
.
configuration
.
cacheDirectory
this
.
product
)
)
;
}
get
lastLaunchedProduct
(
)
{
var
_a
;
return
(
_a
=
__classPrivateFieldGet
(
this
_PuppeteerNode_lastLaunchedProduct
"
f
"
)
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
this
.
defaultProduct
;
}
get
defaultProduct
(
)
{
var
_a
;
return
(
_a
=
this
.
configuration
.
defaultProduct
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
'
chrome
'
;
}
get
product
(
)
{
return
__classPrivateFieldGet
(
this
_PuppeteerNode_instances
"
a
"
_PuppeteerNode_launcher_get
)
.
product
;
}
defaultArgs
(
options
=
{
}
)
{
return
__classPrivateFieldGet
(
this
_PuppeteerNode_instances
"
a
"
_PuppeteerNode_launcher_get
)
.
defaultArgs
(
options
)
;
}
createBrowserFetcher
(
options
=
{
}
)
{
var
_a
;
const
downloadPath
=
this
.
defaultDownloadPath
;
if
(
!
options
.
path
&
&
downloadPath
)
{
options
.
path
=
downloadPath
;
}
if
(
!
options
.
path
)
{
throw
new
Error
(
'
A
path
must
be
specified
for
puppeteer
-
core
.
'
)
;
}
if
(
!
(
'
useMacOSARMBinary
'
in
options
)
&
&
(
(
_a
=
this
.
configuration
.
experiments
)
=
=
=
null
|
|
_a
=
=
=
void
0
?
void
0
:
_a
.
macArmChromiumEnabled
)
)
{
options
.
useMacOSARMBinary
=
true
;
}
if
(
!
(
'
host
'
in
options
)
&
&
this
.
configuration
.
downloadHost
)
{
options
.
host
=
this
.
configuration
.
downloadHost
;
}
if
(
!
(
'
product
'
in
options
)
&
&
this
.
configuration
.
defaultProduct
)
{
options
.
product
=
this
.
configuration
.
defaultProduct
;
}
return
new
BrowserFetcher
(
options
)
;
}
}
_PuppeteerNode__launcher
=
new
WeakMap
(
)
_PuppeteerNode_lastLaunchedProduct
=
new
WeakMap
(
)
_PuppeteerNode_instances
=
new
WeakSet
(
)
_PuppeteerNode_launcher_get
=
function
_PuppeteerNode_launcher_get
(
)
{
if
(
__classPrivateFieldGet
(
this
_PuppeteerNode__launcher
"
f
"
)
&
&
__classPrivateFieldGet
(
this
_PuppeteerNode__launcher
"
f
"
)
.
product
=
=
=
this
.
lastLaunchedProduct
)
{
return
__classPrivateFieldGet
(
this
_PuppeteerNode__launcher
"
f
"
)
;
}
switch
(
this
.
lastLaunchedProduct
)
{
case
'
chrome
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
chromium
;
__classPrivateFieldSet
(
this
_PuppeteerNode__launcher
new
ChromeLauncher
(
this
)
"
f
"
)
;
break
;
case
'
firefox
'
:
this
.
defaultBrowserRevision
=
PUPPETEER_REVISIONS
.
firefox
;
__classPrivateFieldSet
(
this
_PuppeteerNode__launcher
new
FirefoxLauncher
(
this
)
"
f
"
)
;
break
;
default
:
throw
new
Error
(
Unknown
product
:
{
__classPrivateFieldGet
(
this
_PuppeteerNode_lastLaunchedProduct
"
f
"
)
}
)
;
}
return
__classPrivateFieldGet
(
this
_PuppeteerNode__launcher
"
f
"
)
;
}
;
