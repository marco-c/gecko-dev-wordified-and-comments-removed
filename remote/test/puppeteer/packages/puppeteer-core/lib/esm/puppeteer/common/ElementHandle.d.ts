import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
WaitForSelectorOptions
}
from
'
.
/
IsolatedWorld
.
js
'
;
import
{
BoundingBox
BoxModel
ClickOptions
JSHandle
Offset
Point
PressOptions
}
from
'
.
/
JSHandle
.
js
'
;
import
{
ScreenshotOptions
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
ElementFor
EvaluateFunc
HandleFor
NodeFor
}
from
'
.
/
types
.
js
'
;
import
{
KeyInput
}
from
'
.
/
USKeyboardLayout
.
js
'
;
export
declare
class
ElementHandle
<
ElementType
extends
Node
=
Element
>
extends
JSHandle
<
ElementType
>
{
#
private
;
constructor
(
context
:
ExecutionContext
remoteObject
:
Protocol
.
Runtime
.
RemoteObject
frame
:
Frame
)
;
get
frame
(
)
:
Frame
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
<
Selector
extends
string
>
(
selector
:
Selector
)
:
Promise
<
Array
<
ElementHandle
<
NodeFor
<
Selector
>
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
ElementHandle
<
NodeFor
<
Selector
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
eval
<
Selector
extends
string
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
HandleFor
<
Array
<
NodeFor
<
Selector
>
>
>
.
.
.
Params
]
>
=
EvaluateFunc
<
[
HandleFor
<
Array
<
NodeFor
<
Selector
>
>
>
.
.
.
Params
]
>
>
(
selector
:
Selector
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
x
(
expression
:
string
)
:
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
;
waitForSelector
<
Selector
extends
string
>
(
selector
:
Selector
options
?
:
WaitForSelectorOptions
)
:
Promise
<
ElementHandle
<
NodeFor
<
Selector
>
>
|
null
>
;
waitForXPath
(
xpath
:
string
options
?
:
{
visible
?
:
boolean
;
hidden
?
:
boolean
;
timeout
?
:
number
;
}
)
:
Promise
<
ElementHandle
<
Node
>
|
null
>
;
toElement
<
K
extends
keyof
HTMLElementTagNameMap
|
keyof
SVGElementTagNameMap
>
(
tagName
:
K
)
:
Promise
<
HandleFor
<
ElementFor
<
K
>
>
>
;
asElement
(
)
:
ElementHandle
<
ElementType
>
|
null
;
contentFrame
(
)
:
Promise
<
Frame
|
null
>
;
clickablePoint
(
offset
?
:
Offset
)
:
Promise
<
Point
>
;
hover
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
;
click
(
this
:
ElementHandle
<
Element
>
options
?
:
ClickOptions
)
:
Promise
<
void
>
;
drag
(
this
:
ElementHandle
<
Element
>
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
dragEnter
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragOver
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
drop
(
this
:
ElementHandle
<
Element
>
data
?
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragAndDrop
(
this
:
ElementHandle
<
Element
>
target
:
ElementHandle
<
Node
>
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
select
(
.
.
.
values
:
string
[
]
)
:
Promise
<
string
[
]
>
;
uploadFile
(
this
:
ElementHandle
<
HTMLInputElement
>
.
.
.
filePaths
:
string
[
]
)
:
Promise
<
void
>
;
tap
(
this
:
ElementHandle
<
Element
>
)
:
Promise
<
void
>
;
focus
(
)
:
Promise
<
void
>
;
type
(
text
:
string
options
?
:
{
delay
:
number
;
}
)
:
Promise
<
void
>
;
press
(
key
:
KeyInput
options
?
:
PressOptions
)
:
Promise
<
void
>
;
boundingBox
(
)
:
Promise
<
BoundingBox
|
null
>
;
boxModel
(
)
:
Promise
<
BoxModel
|
null
>
;
screenshot
(
this
:
ElementHandle
<
Element
>
options
?
:
ScreenshotOptions
)
:
Promise
<
string
|
Buffer
>
;
isIntersectingViewport
(
this
:
ElementHandle
<
Element
>
options
?
:
{
threshold
?
:
number
;
}
)
:
Promise
<
boolean
>
;
}
