import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
IsolatedWorld
}
from
'
.
/
IsolatedWorld
.
js
'
;
import
{
HandleFor
}
from
'
.
/
types
.
js
'
;
export
interface
WaitTaskOptions
{
bindings
?
:
Map
<
string
(
.
.
.
args
:
never
[
]
)
=
>
unknown
>
;
polling
:
'
raf
'
|
'
mutation
'
|
number
;
root
?
:
ElementHandle
<
Node
>
;
timeout
:
number
;
}
export
declare
class
WaitTask
<
T
=
unknown
>
{
#
private
;
constructor
(
world
:
IsolatedWorld
options
:
WaitTaskOptions
fn
:
(
(
.
.
.
args
:
unknown
[
]
)
=
>
Promise
<
T
>
)
|
string
.
.
.
args
:
unknown
[
]
)
;
get
result
(
)
:
Promise
<
HandleFor
<
T
>
>
;
rerun
(
)
:
Promise
<
void
>
;
terminate
(
error
?
:
unknown
)
:
Promise
<
void
>
;
getBadError
(
error
:
unknown
)
:
unknown
;
}
export
declare
class
TaskManager
{
#
private
;
add
(
task
:
WaitTask
<
any
>
)
:
void
;
delete
(
task
:
WaitTask
<
any
>
)
:
void
;
terminateAll
(
error
?
:
Error
)
:
void
;
rerunAll
(
)
:
Promise
<
void
>
;
}
