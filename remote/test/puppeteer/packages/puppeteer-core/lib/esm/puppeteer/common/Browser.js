var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
__classPrivateFieldSet
=
(
this
&
&
this
.
__classPrivateFieldSet
)
|
|
function
(
receiver
state
value
kind
f
)
{
if
(
kind
=
=
=
"
m
"
)
throw
new
TypeError
(
"
Private
method
is
not
writable
"
)
;
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
setter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
write
private
member
to
an
object
whose
class
did
not
declare
it
"
)
;
return
(
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
value
)
:
f
?
f
.
value
=
value
:
state
.
set
(
receiver
value
)
)
value
;
}
;
var
_CDPBrowser_instances
_CDPBrowser_ignoreHTTPSErrors
_CDPBrowser_defaultViewport
_CDPBrowser_process
_CDPBrowser_connection
_CDPBrowser_closeCallback
_CDPBrowser_targetFilterCallback
_CDPBrowser_isPageTargetCallback
_CDPBrowser_defaultContext
_CDPBrowser_contexts
_CDPBrowser_screenshotTaskQueue
_CDPBrowser_targetManager
_CDPBrowser_emitDisconnected
_CDPBrowser_setIsPageTargetCallback
_CDPBrowser_createTarget
_CDPBrowser_onAttachedToTarget
_CDPBrowser_onDetachedFromTarget
_CDPBrowser_onTargetChanged
_CDPBrowser_onTargetDiscovered
_CDPBrowser_getVersion
_CDPBrowserContext_connection
_CDPBrowserContext_browser
_CDPBrowserContext_id
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
ConnectionEmittedEvents
}
from
'
.
/
Connection
.
js
'
;
import
{
waitWithTimeout
}
from
'
.
/
util
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
import
{
TaskQueue
}
from
'
.
/
TaskQueue
.
js
'
;
import
{
ChromeTargetManager
}
from
'
.
/
ChromeTargetManager
.
js
'
;
import
{
FirefoxTargetManager
}
from
'
.
/
FirefoxTargetManager
.
js
'
;
import
{
Browser
as
BrowserBase
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
{
BrowserContext
}
from
'
.
.
/
api
/
BrowserContext
.
js
'
;
export
class
CDPBrowser
extends
BrowserBase
{
static
async
_create
(
product
connection
contextIds
ignoreHTTPSErrors
defaultViewport
process
closeCallback
targetFilterCallback
isPageTargetCallback
)
{
const
browser
=
new
CDPBrowser
(
product
connection
contextIds
ignoreHTTPSErrors
defaultViewport
process
closeCallback
targetFilterCallback
isPageTargetCallback
)
;
await
browser
.
_attach
(
)
;
return
browser
;
}
get
_targets
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
getAvailableTargets
(
)
;
}
constructor
(
product
connection
contextIds
ignoreHTTPSErrors
defaultViewport
process
closeCallback
targetFilterCallback
isPageTargetCallback
)
{
super
(
)
;
_CDPBrowser_instances
.
add
(
this
)
;
_CDPBrowser_ignoreHTTPSErrors
.
set
(
this
void
0
)
;
_CDPBrowser_defaultViewport
.
set
(
this
void
0
)
;
_CDPBrowser_process
.
set
(
this
void
0
)
;
_CDPBrowser_connection
.
set
(
this
void
0
)
;
_CDPBrowser_closeCallback
.
set
(
this
void
0
)
;
_CDPBrowser_targetFilterCallback
.
set
(
this
void
0
)
;
_CDPBrowser_isPageTargetCallback
.
set
(
this
void
0
)
;
_CDPBrowser_defaultContext
.
set
(
this
void
0
)
;
_CDPBrowser_contexts
.
set
(
this
void
0
)
;
_CDPBrowser_screenshotTaskQueue
.
set
(
this
void
0
)
;
_CDPBrowser_targetManager
.
set
(
this
void
0
)
;
_CDPBrowser_emitDisconnected
.
set
(
this
(
)
=
>
{
this
.
emit
(
"
disconnected
"
)
;
}
)
;
_CDPBrowser_createTarget
.
set
(
this
(
targetInfo
session
)
=
>
{
var
_a
;
const
{
browserContextId
}
=
targetInfo
;
const
context
=
browserContextId
&
&
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
has
(
browserContextId
)
?
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
get
(
browserContextId
)
:
__classPrivateFieldGet
(
this
_CDPBrowser_defaultContext
"
f
"
)
;
if
(
!
context
)
{
throw
new
Error
(
'
Missing
browser
context
'
)
;
}
return
new
Target
(
targetInfo
session
context
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
(
isAutoAttachEmulated
)
=
>
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
_createSession
(
targetInfo
isAutoAttachEmulated
)
;
}
__classPrivateFieldGet
(
this
_CDPBrowser_ignoreHTTPSErrors
"
f
"
)
(
_a
=
__classPrivateFieldGet
(
this
_CDPBrowser_defaultViewport
"
f
"
)
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
null
__classPrivateFieldGet
(
this
_CDPBrowser_screenshotTaskQueue
"
f
"
)
__classPrivateFieldGet
(
this
_CDPBrowser_isPageTargetCallback
"
f
"
)
)
;
}
)
;
_CDPBrowser_onAttachedToTarget
.
set
(
this
async
(
target
)
=
>
{
if
(
await
target
.
_initializedPromise
)
{
this
.
emit
(
"
targetcreated
"
target
)
;
target
.
browserContext
(
)
.
emit
(
"
targetcreated
"
target
)
;
}
}
)
;
_CDPBrowser_onDetachedFromTarget
.
set
(
this
async
(
target
)
=
>
{
target
.
_initializedCallback
(
false
)
;
target
.
_closedCallback
(
)
;
if
(
await
target
.
_initializedPromise
)
{
this
.
emit
(
"
targetdestroyed
"
target
)
;
target
.
browserContext
(
)
.
emit
(
"
targetdestroyed
"
target
)
;
}
}
)
;
_CDPBrowser_onTargetChanged
.
set
(
this
(
{
target
targetInfo
}
)
=
>
{
const
previousURL
=
target
.
url
(
)
;
const
wasInitialized
=
target
.
_isInitialized
;
target
.
_targetInfoChanged
(
targetInfo
)
;
if
(
wasInitialized
&
&
previousURL
!
=
=
target
.
url
(
)
)
{
this
.
emit
(
"
targetchanged
"
target
)
;
target
.
browserContext
(
)
.
emit
(
"
targetchanged
"
target
)
;
}
}
)
;
_CDPBrowser_onTargetDiscovered
.
set
(
this
(
targetInfo
)
=
>
{
this
.
emit
(
'
targetdiscovered
'
targetInfo
)
;
}
)
;
product
=
product
|
|
'
chrome
'
;
__classPrivateFieldSet
(
this
_CDPBrowser_ignoreHTTPSErrors
ignoreHTTPSErrors
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_defaultViewport
defaultViewport
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_process
process
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_screenshotTaskQueue
new
TaskQueue
(
)
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_connection
connection
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_closeCallback
closeCallback
|
|
function
(
)
{
}
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_targetFilterCallback
targetFilterCallback
|
|
(
(
)
=
>
{
return
true
;
}
)
"
f
"
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_instances
"
m
"
_CDPBrowser_setIsPageTargetCallback
)
.
call
(
this
isPageTargetCallback
)
;
if
(
product
=
=
=
'
firefox
'
)
{
__classPrivateFieldSet
(
this
_CDPBrowser_targetManager
new
FirefoxTargetManager
(
connection
__classPrivateFieldGet
(
this
_CDPBrowser_createTarget
"
f
"
)
__classPrivateFieldGet
(
this
_CDPBrowser_targetFilterCallback
"
f
"
)
)
"
f
"
)
;
}
else
{
__classPrivateFieldSet
(
this
_CDPBrowser_targetManager
new
ChromeTargetManager
(
connection
__classPrivateFieldGet
(
this
_CDPBrowser_createTarget
"
f
"
)
__classPrivateFieldGet
(
this
_CDPBrowser_targetFilterCallback
"
f
"
)
)
"
f
"
)
;
}
__classPrivateFieldSet
(
this
_CDPBrowser_defaultContext
new
CDPBrowserContext
(
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
this
)
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowser_contexts
new
Map
(
)
"
f
"
)
;
for
(
const
contextId
of
contextIds
)
{
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
set
(
contextId
new
CDPBrowserContext
(
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
this
contextId
)
)
;
}
}
async
_attach
(
)
{
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
on
(
ConnectionEmittedEvents
.
Disconnected
__classPrivateFieldGet
(
this
_CDPBrowser_emitDisconnected
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
on
(
"
targetAvailable
"
__classPrivateFieldGet
(
this
_CDPBrowser_onAttachedToTarget
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
on
(
"
targetGone
"
__classPrivateFieldGet
(
this
_CDPBrowser_onDetachedFromTarget
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
on
(
"
targetChanged
"
__classPrivateFieldGet
(
this
_CDPBrowser_onTargetChanged
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
on
(
"
targetDiscovered
"
__classPrivateFieldGet
(
this
_CDPBrowser_onTargetDiscovered
"
f
"
)
)
;
await
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
initialize
(
)
;
}
_detach
(
)
{
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
off
(
ConnectionEmittedEvents
.
Disconnected
__classPrivateFieldGet
(
this
_CDPBrowser_emitDisconnected
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
off
(
"
targetAvailable
"
__classPrivateFieldGet
(
this
_CDPBrowser_onAttachedToTarget
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
off
(
"
targetGone
"
__classPrivateFieldGet
(
this
_CDPBrowser_onDetachedFromTarget
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
off
(
"
targetChanged
"
__classPrivateFieldGet
(
this
_CDPBrowser_onTargetChanged
"
f
"
)
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
off
(
"
targetDiscovered
"
__classPrivateFieldGet
(
this
_CDPBrowser_onTargetDiscovered
"
f
"
)
)
;
}
process
(
)
{
var
_a
;
return
(
_a
=
__classPrivateFieldGet
(
this
_CDPBrowser_process
"
f
"
)
)
!
=
=
null
&
&
_a
!
=
=
void
0
?
_a
:
null
;
}
_targetManager
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
;
}
_getIsPageTargetCallback
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_isPageTargetCallback
"
f
"
)
;
}
async
createIncognitoBrowserContext
(
options
=
{
}
)
{
const
{
proxyServer
proxyBypassList
}
=
options
;
const
{
browserContextId
}
=
await
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
send
(
'
Target
.
createBrowserContext
'
{
proxyServer
proxyBypassList
:
proxyBypassList
&
&
proxyBypassList
.
join
(
'
'
)
}
)
;
const
context
=
new
CDPBrowserContext
(
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
this
browserContextId
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
set
(
browserContextId
context
)
;
return
context
;
}
browserContexts
(
)
{
return
[
__classPrivateFieldGet
(
this
_CDPBrowser_defaultContext
"
f
"
)
.
.
.
Array
.
from
(
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
values
(
)
)
]
;
}
defaultBrowserContext
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_defaultContext
"
f
"
)
;
}
async
_disposeContext
(
contextId
)
{
if
(
!
contextId
)
{
return
;
}
await
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
send
(
'
Target
.
disposeBrowserContext
'
{
browserContextId
:
contextId
}
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_contexts
"
f
"
)
.
delete
(
contextId
)
;
}
wsEndpoint
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
url
(
)
;
}
async
newPage
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_defaultContext
"
f
"
)
.
newPage
(
)
;
}
async
_createPageInContext
(
contextId
)
{
const
{
targetId
}
=
await
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
send
(
'
Target
.
createTarget
'
{
url
:
'
about
:
blank
'
browserContextId
:
contextId
|
|
undefined
}
)
;
const
target
=
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
getAvailableTargets
(
)
.
get
(
targetId
)
;
if
(
!
target
)
{
throw
new
Error
(
Missing
target
for
page
(
id
=
{
targetId
}
)
)
;
}
const
initialized
=
await
target
.
_initializedPromise
;
if
(
!
initialized
)
{
throw
new
Error
(
Failed
to
create
target
for
page
(
id
=
{
targetId
}
)
)
;
}
const
page
=
await
target
.
page
(
)
;
if
(
!
page
)
{
throw
new
Error
(
Failed
to
create
a
page
for
context
(
id
=
{
contextId
}
)
)
;
}
return
page
;
}
targets
(
)
{
return
Array
.
from
(
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
getAvailableTargets
(
)
.
values
(
)
)
.
filter
(
target
=
>
{
return
target
.
_isInitialized
;
}
)
;
}
target
(
)
{
const
browserTarget
=
this
.
targets
(
)
.
find
(
target
=
>
{
return
target
.
type
(
)
=
=
=
'
browser
'
;
}
)
;
if
(
!
browserTarget
)
{
throw
new
Error
(
'
Browser
target
is
not
found
'
)
;
}
return
browserTarget
;
}
async
waitForTarget
(
predicate
options
=
{
}
)
{
const
{
timeout
=
30000
}
=
options
;
let
resolve
;
let
isResolved
=
false
;
const
targetPromise
=
new
Promise
(
x
=
>
{
return
(
resolve
=
x
)
;
}
)
;
this
.
on
(
"
targetcreated
"
check
)
;
this
.
on
(
"
targetchanged
"
check
)
;
try
{
this
.
targets
(
)
.
forEach
(
check
)
;
if
(
!
timeout
)
{
return
await
targetPromise
;
}
return
await
waitWithTimeout
(
targetPromise
'
target
'
timeout
)
;
}
finally
{
this
.
off
(
"
targetcreated
"
check
)
;
this
.
off
(
"
targetchanged
"
check
)
;
}
async
function
check
(
target
)
{
if
(
(
await
predicate
(
target
)
)
&
&
!
isResolved
)
{
isResolved
=
true
;
resolve
(
target
)
;
}
}
}
async
pages
(
)
{
const
contextPages
=
await
Promise
.
all
(
this
.
browserContexts
(
)
.
map
(
context
=
>
{
return
context
.
pages
(
)
;
}
)
)
;
return
contextPages
.
reduce
(
(
acc
x
)
=
>
{
return
acc
.
concat
(
x
)
;
}
[
]
)
;
}
async
version
(
)
{
const
version
=
await
__classPrivateFieldGet
(
this
_CDPBrowser_instances
"
m
"
_CDPBrowser_getVersion
)
.
call
(
this
)
;
return
version
.
product
;
}
async
userAgent
(
)
{
const
version
=
await
__classPrivateFieldGet
(
this
_CDPBrowser_instances
"
m
"
_CDPBrowser_getVersion
)
.
call
(
this
)
;
return
version
.
userAgent
;
}
async
close
(
)
{
await
__classPrivateFieldGet
(
this
_CDPBrowser_closeCallback
"
f
"
)
.
call
(
null
)
;
this
.
disconnect
(
)
;
}
disconnect
(
)
{
__classPrivateFieldGet
(
this
_CDPBrowser_targetManager
"
f
"
)
.
dispose
(
)
;
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
dispose
(
)
;
}
isConnected
(
)
{
return
!
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
_closed
;
}
}
_CDPBrowser_ignoreHTTPSErrors
=
new
WeakMap
(
)
_CDPBrowser_defaultViewport
=
new
WeakMap
(
)
_CDPBrowser_process
=
new
WeakMap
(
)
_CDPBrowser_connection
=
new
WeakMap
(
)
_CDPBrowser_closeCallback
=
new
WeakMap
(
)
_CDPBrowser_targetFilterCallback
=
new
WeakMap
(
)
_CDPBrowser_isPageTargetCallback
=
new
WeakMap
(
)
_CDPBrowser_defaultContext
=
new
WeakMap
(
)
_CDPBrowser_contexts
=
new
WeakMap
(
)
_CDPBrowser_screenshotTaskQueue
=
new
WeakMap
(
)
_CDPBrowser_targetManager
=
new
WeakMap
(
)
_CDPBrowser_emitDisconnected
=
new
WeakMap
(
)
_CDPBrowser_createTarget
=
new
WeakMap
(
)
_CDPBrowser_onAttachedToTarget
=
new
WeakMap
(
)
_CDPBrowser_onDetachedFromTarget
=
new
WeakMap
(
)
_CDPBrowser_onTargetChanged
=
new
WeakMap
(
)
_CDPBrowser_onTargetDiscovered
=
new
WeakMap
(
)
_CDPBrowser_instances
=
new
WeakSet
(
)
_CDPBrowser_setIsPageTargetCallback
=
function
_CDPBrowser_setIsPageTargetCallback
(
isPageTargetCallback
)
{
__classPrivateFieldSet
(
this
_CDPBrowser_isPageTargetCallback
isPageTargetCallback
|
|
(
(
target
)
=
>
{
return
(
target
.
type
=
=
=
'
page
'
|
|
target
.
type
=
=
=
'
background_page
'
|
|
target
.
type
=
=
=
'
webview
'
)
;
}
)
"
f
"
)
;
}
_CDPBrowser_getVersion
=
function
_CDPBrowser_getVersion
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowser_connection
"
f
"
)
.
send
(
'
Browser
.
getVersion
'
)
;
}
;
export
class
CDPBrowserContext
extends
BrowserContext
{
constructor
(
connection
browser
contextId
)
{
super
(
)
;
_CDPBrowserContext_connection
.
set
(
this
void
0
)
;
_CDPBrowserContext_browser
.
set
(
this
void
0
)
;
_CDPBrowserContext_id
.
set
(
this
void
0
)
;
__classPrivateFieldSet
(
this
_CDPBrowserContext_connection
connection
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowserContext_browser
browser
"
f
"
)
;
__classPrivateFieldSet
(
this
_CDPBrowserContext_id
contextId
"
f
"
)
;
}
get
id
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
;
}
targets
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
.
targets
(
)
.
filter
(
target
=
>
{
return
target
.
browserContext
(
)
=
=
=
this
;
}
)
;
}
waitForTarget
(
predicate
options
=
{
}
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
.
waitForTarget
(
target
=
>
{
return
target
.
browserContext
(
)
=
=
=
this
&
&
predicate
(
target
)
;
}
options
)
;
}
async
pages
(
)
{
const
pages
=
await
Promise
.
all
(
this
.
targets
(
)
.
filter
(
target
=
>
{
var
_a
;
return
(
target
.
type
(
)
=
=
=
'
page
'
|
|
(
target
.
type
(
)
=
=
=
'
other
'
&
&
(
(
_a
=
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
.
_getIsPageTargetCallback
(
)
)
=
=
=
null
|
|
_a
=
=
=
void
0
?
void
0
:
_a
(
target
.
_getTargetInfo
(
)
)
)
)
)
;
}
)
.
map
(
target
=
>
{
return
target
.
page
(
)
;
}
)
)
;
return
pages
.
filter
(
(
page
)
=
>
{
return
!
!
page
;
}
)
;
}
isIncognito
(
)
{
return
!
!
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
;
}
async
overridePermissions
(
origin
permissions
)
{
const
protocolPermissions
=
permissions
.
map
(
permission
=
>
{
const
protocolPermission
=
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
.
get
(
permission
)
;
if
(
!
protocolPermission
)
{
throw
new
Error
(
'
Unknown
permission
:
'
+
permission
)
;
}
return
protocolPermission
;
}
)
;
await
__classPrivateFieldGet
(
this
_CDPBrowserContext_connection
"
f
"
)
.
send
(
'
Browser
.
grantPermissions
'
{
origin
browserContextId
:
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
|
|
undefined
permissions
:
protocolPermissions
}
)
;
}
async
clearPermissionOverrides
(
)
{
await
__classPrivateFieldGet
(
this
_CDPBrowserContext_connection
"
f
"
)
.
send
(
'
Browser
.
resetPermissions
'
{
browserContextId
:
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
|
|
undefined
}
)
;
}
newPage
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
.
_createPageInContext
(
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
)
;
}
browser
(
)
{
return
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
;
}
async
close
(
)
{
assert
(
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
'
Non
-
incognito
profiles
cannot
be
closed
!
'
)
;
await
__classPrivateFieldGet
(
this
_CDPBrowserContext_browser
"
f
"
)
.
_disposeContext
(
__classPrivateFieldGet
(
this
_CDPBrowserContext_id
"
f
"
)
)
;
}
}
_CDPBrowserContext_connection
=
new
WeakMap
(
)
_CDPBrowserContext_browser
=
new
WeakMap
(
)
_CDPBrowserContext_id
=
new
WeakMap
(
)
;
