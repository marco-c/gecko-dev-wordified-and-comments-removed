import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
FrameTree
}
from
'
.
/
FrameTree
.
js
'
;
import
{
NetworkManager
}
from
'
.
/
NetworkManager
.
js
'
;
import
{
Page
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
Target
}
from
'
.
/
Target
.
js
'
;
import
{
TimeoutSettings
}
from
'
.
/
TimeoutSettings
.
js
'
;
export
declare
const
FrameManagerEmittedEvents
:
{
FrameAttached
:
symbol
;
FrameNavigated
:
symbol
;
FrameDetached
:
symbol
;
FrameSwapped
:
symbol
;
LifecycleEvent
:
symbol
;
FrameNavigatedWithinDocument
:
symbol
;
ExecutionContextCreated
:
symbol
;
ExecutionContextDestroyed
:
symbol
;
}
;
export
declare
class
FrameManager
extends
EventEmitter
{
#
private
;
_frameTree
:
FrameTree
;
get
timeoutSettings
(
)
:
TimeoutSettings
;
get
networkManager
(
)
:
NetworkManager
;
get
client
(
)
:
CDPSession
;
constructor
(
client
:
CDPSession
page
:
Page
ignoreHTTPSErrors
:
boolean
timeoutSettings
:
TimeoutSettings
)
;
private
setupEventListeners
;
initialize
(
client
?
:
CDPSession
)
:
Promise
<
void
>
;
executionContextById
(
contextId
:
number
session
?
:
CDPSession
)
:
ExecutionContext
;
page
(
)
:
Page
;
mainFrame
(
)
:
Frame
;
frames
(
)
:
Frame
[
]
;
frame
(
frameId
:
string
)
:
Frame
|
null
;
onAttachedToTarget
(
target
:
Target
)
:
void
;
}
