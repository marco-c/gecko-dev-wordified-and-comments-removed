import
{
isNode
}
from
'
.
.
/
environment
.
js
'
;
let
debugModule
=
null
;
export
async
function
importDebug
(
)
{
if
(
!
debugModule
)
{
debugModule
=
(
await
import
(
'
debug
'
)
)
.
default
;
}
return
debugModule
;
}
export
const
debug
=
(
prefix
)
=
>
{
if
(
isNode
)
{
return
async
(
.
.
.
logArgs
)
=
>
{
if
(
captureLogs
)
{
capturedLogs
.
push
(
prefix
+
logArgs
)
;
}
(
await
importDebug
(
)
)
(
prefix
)
(
logArgs
)
;
}
;
}
return
(
.
.
.
logArgs
)
=
>
{
const
debugLevel
=
globalThis
.
__PUPPETEER_DEBUG
;
if
(
!
debugLevel
)
{
return
;
}
const
everythingShouldBeLogged
=
debugLevel
=
=
=
'
*
'
;
const
prefixMatchesDebugLevel
=
everythingShouldBeLogged
|
|
(
debugLevel
.
endsWith
(
'
*
'
)
?
prefix
.
startsWith
(
debugLevel
)
:
prefix
=
=
=
debugLevel
)
;
if
(
!
prefixMatchesDebugLevel
)
{
return
;
}
console
.
log
(
{
prefix
}
:
.
.
.
logArgs
)
;
}
;
}
;
let
capturedLogs
=
[
]
;
let
captureLogs
=
false
;
export
function
setLogCapture
(
value
)
{
capturedLogs
=
[
]
;
captureLogs
=
value
;
}
export
function
getCapturedLogs
(
)
{
return
capturedLogs
;
}
