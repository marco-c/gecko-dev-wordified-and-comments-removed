import
{
Page
}
from
'
.
.
/
api
/
Page
.
js
'
;
import
{
WebWorker
}
from
'
.
/
WebWorker
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
type
{
Browser
IsPageTargetCallback
}
from
'
.
.
/
api
/
Browser
.
js
'
;
import
type
{
BrowserContext
}
from
'
.
.
/
api
/
BrowserContext
.
js
'
;
import
{
Viewport
}
from
'
.
/
PuppeteerViewport
.
js
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
TaskQueue
}
from
'
.
/
TaskQueue
.
js
'
;
import
{
TargetManager
}
from
'
.
/
TargetManager
.
js
'
;
export
declare
class
Target
{
#
private
;
_initializedPromise
:
Promise
<
boolean
>
;
_initializedCallback
:
(
x
:
boolean
)
=
>
void
;
_isClosedPromise
:
Promise
<
void
>
;
_closedCallback
:
(
)
=
>
void
;
_isInitialized
:
boolean
;
_targetId
:
string
;
_isPageTargetCallback
:
IsPageTargetCallback
;
constructor
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
session
:
CDPSession
|
undefined
browserContext
:
BrowserContext
targetManager
:
TargetManager
sessionFactory
:
(
isAutoAttachEmulated
:
boolean
)
=
>
Promise
<
CDPSession
>
ignoreHTTPSErrors
:
boolean
defaultViewport
:
Viewport
|
null
screenshotTaskQueue
:
TaskQueue
isPageTargetCallback
:
IsPageTargetCallback
)
;
_session
(
)
:
CDPSession
|
undefined
;
createCDPSession
(
)
:
Promise
<
CDPSession
>
;
_targetManager
(
)
:
TargetManager
;
_getTargetInfo
(
)
:
Protocol
.
Target
.
TargetInfo
;
page
(
)
:
Promise
<
Page
|
null
>
;
worker
(
)
:
Promise
<
WebWorker
|
null
>
;
url
(
)
:
string
;
type
(
)
:
'
page
'
|
'
background_page
'
|
'
service_worker
'
|
'
shared_worker
'
|
'
other
'
|
'
browser
'
|
'
webview
'
;
browser
(
)
:
Browser
;
browserContext
(
)
:
BrowserContext
;
opener
(
)
:
Target
|
undefined
;
_targetInfoChanged
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
void
;
}
