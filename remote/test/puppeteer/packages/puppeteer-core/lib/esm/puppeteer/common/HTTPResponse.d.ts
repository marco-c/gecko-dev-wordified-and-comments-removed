import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
HTTPRequest
}
from
'
.
/
HTTPRequest
.
js
'
;
import
{
SecurityDetails
}
from
'
.
/
SecurityDetails
.
js
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
export
interface
RemoteAddress
{
ip
?
:
string
;
port
?
:
number
;
}
interface
CDPSession
extends
EventEmitter
{
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
export
declare
class
HTTPResponse
{
#
private
;
constructor
(
client
:
CDPSession
request
:
HTTPRequest
responsePayload
:
Protocol
.
Network
.
Response
extraInfo
:
Protocol
.
Network
.
ResponseReceivedExtraInfoEvent
|
null
)
;
_resolveBody
(
err
:
Error
|
null
)
:
void
;
remoteAddress
(
)
:
RemoteAddress
;
url
(
)
:
string
;
ok
(
)
:
boolean
;
status
(
)
:
number
;
statusText
(
)
:
string
;
headers
(
)
:
Record
<
string
string
>
;
securityDetails
(
)
:
SecurityDetails
|
null
;
timing
(
)
:
Protocol
.
Network
.
ResourceTiming
|
null
;
buffer
(
)
:
Promise
<
Buffer
>
;
text
(
)
:
Promise
<
string
>
;
json
(
)
:
Promise
<
any
>
;
request
(
)
:
HTTPRequest
;
fromCache
(
)
:
boolean
;
fromServiceWorker
(
)
:
boolean
;
frame
(
)
:
Frame
|
null
;
}
export
{
}
;
