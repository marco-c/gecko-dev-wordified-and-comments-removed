var
__classPrivateFieldSet
=
(
this
&
&
this
.
__classPrivateFieldSet
)
|
|
function
(
receiver
state
value
kind
f
)
{
if
(
kind
=
=
=
"
m
"
)
throw
new
TypeError
(
"
Private
method
is
not
writable
"
)
;
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
setter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
write
private
member
to
an
object
whose
class
did
not
declare
it
"
)
;
return
(
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
value
)
:
f
?
f
.
value
=
value
:
state
.
set
(
receiver
value
)
)
value
;
}
;
var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
_Keyboard_instances
_Keyboard_client
_Keyboard_pressedKeys
_Keyboard_modifierBit
_Keyboard_keyDescriptionForString
_Mouse_client
_Mouse_keyboard
_Mouse_x
_Mouse_y
_Mouse_button
_Touchscreen_client
_Touchscreen_keyboard
;
import
{
assert
}
from
'
.
.
/
util
/
assert
.
js
'
;
import
{
_keyDefinitions
}
from
'
.
/
USKeyboardLayout
.
js
'
;
export
class
Keyboard
{
constructor
(
client
)
{
_Keyboard_instances
.
add
(
this
)
;
_Keyboard_client
.
set
(
this
void
0
)
;
_Keyboard_pressedKeys
.
set
(
this
new
Set
(
)
)
;
this
.
_modifiers
=
0
;
__classPrivateFieldSet
(
this
_Keyboard_client
client
"
f
"
)
;
}
async
down
(
key
options
=
{
text
:
undefined
commands
:
[
]
}
)
{
const
description
=
__classPrivateFieldGet
(
this
_Keyboard_instances
"
m
"
_Keyboard_keyDescriptionForString
)
.
call
(
this
key
)
;
const
autoRepeat
=
__classPrivateFieldGet
(
this
_Keyboard_pressedKeys
"
f
"
)
.
has
(
description
.
code
)
;
__classPrivateFieldGet
(
this
_Keyboard_pressedKeys
"
f
"
)
.
add
(
description
.
code
)
;
this
.
_modifiers
|
=
__classPrivateFieldGet
(
this
_Keyboard_instances
"
m
"
_Keyboard_modifierBit
)
.
call
(
this
description
.
key
)
;
const
text
=
options
.
text
=
=
=
undefined
?
description
.
text
:
options
.
text
;
await
__classPrivateFieldGet
(
this
_Keyboard_client
"
f
"
)
.
send
(
'
Input
.
dispatchKeyEvent
'
{
type
:
text
?
'
keyDown
'
:
'
rawKeyDown
'
modifiers
:
this
.
_modifiers
windowsVirtualKeyCode
:
description
.
keyCode
code
:
description
.
code
key
:
description
.
key
text
:
text
unmodifiedText
:
text
autoRepeat
location
:
description
.
location
isKeypad
:
description
.
location
=
=
=
3
commands
:
options
.
commands
}
)
;
}
async
up
(
key
)
{
const
description
=
__classPrivateFieldGet
(
this
_Keyboard_instances
"
m
"
_Keyboard_keyDescriptionForString
)
.
call
(
this
key
)
;
this
.
_modifiers
&
=
~
__classPrivateFieldGet
(
this
_Keyboard_instances
"
m
"
_Keyboard_modifierBit
)
.
call
(
this
description
.
key
)
;
__classPrivateFieldGet
(
this
_Keyboard_pressedKeys
"
f
"
)
.
delete
(
description
.
code
)
;
await
__classPrivateFieldGet
(
this
_Keyboard_client
"
f
"
)
.
send
(
'
Input
.
dispatchKeyEvent
'
{
type
:
'
keyUp
'
modifiers
:
this
.
_modifiers
key
:
description
.
key
windowsVirtualKeyCode
:
description
.
keyCode
code
:
description
.
code
location
:
description
.
location
}
)
;
}
async
sendCharacter
(
char
)
{
await
__classPrivateFieldGet
(
this
_Keyboard_client
"
f
"
)
.
send
(
'
Input
.
insertText
'
{
text
:
char
}
)
;
}
charIsKey
(
char
)
{
return
!
!
_keyDefinitions
[
char
]
;
}
async
type
(
text
options
=
{
}
)
{
const
delay
=
options
.
delay
|
|
undefined
;
for
(
const
char
of
text
)
{
if
(
this
.
charIsKey
(
char
)
)
{
await
this
.
press
(
char
{
delay
}
)
;
}
else
{
if
(
delay
)
{
await
new
Promise
(
f
=
>
{
return
setTimeout
(
f
delay
)
;
}
)
;
}
await
this
.
sendCharacter
(
char
)
;
}
}
}
async
press
(
key
options
=
{
}
)
{
const
{
delay
=
null
}
=
options
;
await
this
.
down
(
key
options
)
;
if
(
delay
)
{
await
new
Promise
(
f
=
>
{
return
setTimeout
(
f
options
.
delay
)
;
}
)
;
}
await
this
.
up
(
key
)
;
}
}
_Keyboard_client
=
new
WeakMap
(
)
_Keyboard_pressedKeys
=
new
WeakMap
(
)
_Keyboard_instances
=
new
WeakSet
(
)
_Keyboard_modifierBit
=
function
_Keyboard_modifierBit
(
key
)
{
if
(
key
=
=
=
'
Alt
'
)
{
return
1
;
}
if
(
key
=
=
=
'
Control
'
)
{
return
2
;
}
if
(
key
=
=
=
'
Meta
'
)
{
return
4
;
}
if
(
key
=
=
=
'
Shift
'
)
{
return
8
;
}
return
0
;
}
_Keyboard_keyDescriptionForString
=
function
_Keyboard_keyDescriptionForString
(
keyString
)
{
const
shift
=
this
.
_modifiers
&
8
;
const
description
=
{
key
:
'
'
keyCode
:
0
code
:
'
'
text
:
'
'
location
:
0
}
;
const
definition
=
_keyDefinitions
[
keyString
]
;
assert
(
definition
Unknown
key
:
"
{
keyString
}
"
)
;
if
(
definition
.
key
)
{
description
.
key
=
definition
.
key
;
}
if
(
shift
&
&
definition
.
shiftKey
)
{
description
.
key
=
definition
.
shiftKey
;
}
if
(
definition
.
keyCode
)
{
description
.
keyCode
=
definition
.
keyCode
;
}
if
(
shift
&
&
definition
.
shiftKeyCode
)
{
description
.
keyCode
=
definition
.
shiftKeyCode
;
}
if
(
definition
.
code
)
{
description
.
code
=
definition
.
code
;
}
if
(
definition
.
location
)
{
description
.
location
=
definition
.
location
;
}
if
(
description
.
key
.
length
=
=
=
1
)
{
description
.
text
=
description
.
key
;
}
if
(
definition
.
text
)
{
description
.
text
=
definition
.
text
;
}
if
(
shift
&
&
definition
.
shiftText
)
{
description
.
text
=
definition
.
shiftText
;
}
if
(
this
.
_modifiers
&
~
8
)
{
description
.
text
=
'
'
;
}
return
description
;
}
;
export
class
Mouse
{
constructor
(
client
keyboard
)
{
_Mouse_client
.
set
(
this
void
0
)
;
_Mouse_keyboard
.
set
(
this
void
0
)
;
_Mouse_x
.
set
(
this
0
)
;
_Mouse_y
.
set
(
this
0
)
;
_Mouse_button
.
set
(
this
'
none
'
)
;
__classPrivateFieldSet
(
this
_Mouse_client
client
"
f
"
)
;
__classPrivateFieldSet
(
this
_Mouse_keyboard
keyboard
"
f
"
)
;
}
async
move
(
x
y
options
=
{
}
)
{
const
{
steps
=
1
}
=
options
;
const
fromX
=
__classPrivateFieldGet
(
this
_Mouse_x
"
f
"
)
fromY
=
__classPrivateFieldGet
(
this
_Mouse_y
"
f
"
)
;
__classPrivateFieldSet
(
this
_Mouse_x
x
"
f
"
)
;
__classPrivateFieldSet
(
this
_Mouse_y
y
"
f
"
)
;
for
(
let
i
=
1
;
i
<
=
steps
;
i
+
+
)
{
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mouseMoved
'
button
:
__classPrivateFieldGet
(
this
_Mouse_button
"
f
"
)
x
:
fromX
+
(
__classPrivateFieldGet
(
this
_Mouse_x
"
f
"
)
-
fromX
)
*
(
i
/
steps
)
y
:
fromY
+
(
__classPrivateFieldGet
(
this
_Mouse_y
"
f
"
)
-
fromY
)
*
(
i
/
steps
)
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
}
)
;
}
}
async
click
(
x
y
options
=
{
}
)
{
const
{
delay
=
null
}
=
options
;
if
(
delay
!
=
=
null
)
{
await
this
.
move
(
x
y
)
;
await
this
.
down
(
options
)
;
await
new
Promise
(
f
=
>
{
return
setTimeout
(
f
delay
)
;
}
)
;
await
this
.
up
(
options
)
;
}
else
{
await
this
.
move
(
x
y
)
;
await
this
.
down
(
options
)
;
await
this
.
up
(
options
)
;
}
}
async
down
(
options
=
{
}
)
{
const
{
button
=
'
left
'
clickCount
=
1
}
=
options
;
__classPrivateFieldSet
(
this
_Mouse_button
button
"
f
"
)
;
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mousePressed
'
button
x
:
__classPrivateFieldGet
(
this
_Mouse_x
"
f
"
)
y
:
__classPrivateFieldGet
(
this
_Mouse_y
"
f
"
)
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
clickCount
}
)
;
}
async
up
(
options
=
{
}
)
{
const
{
button
=
'
left
'
clickCount
=
1
}
=
options
;
__classPrivateFieldSet
(
this
_Mouse_button
'
none
'
"
f
"
)
;
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mouseReleased
'
button
x
:
__classPrivateFieldGet
(
this
_Mouse_x
"
f
"
)
y
:
__classPrivateFieldGet
(
this
_Mouse_y
"
f
"
)
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
clickCount
}
)
;
}
async
wheel
(
options
=
{
}
)
{
const
{
deltaX
=
0
deltaY
=
0
}
=
options
;
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mouseWheel
'
x
:
__classPrivateFieldGet
(
this
_Mouse_x
"
f
"
)
y
:
__classPrivateFieldGet
(
this
_Mouse_y
"
f
"
)
deltaX
deltaY
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
pointerType
:
'
mouse
'
}
)
;
}
async
drag
(
start
target
)
{
const
promise
=
new
Promise
(
resolve
=
>
{
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
once
(
'
Input
.
dragIntercepted
'
event
=
>
{
return
resolve
(
event
.
data
)
;
}
)
;
}
)
;
await
this
.
move
(
start
.
x
start
.
y
)
;
await
this
.
down
(
)
;
await
this
.
move
(
target
.
x
target
.
y
)
;
return
promise
;
}
async
dragEnter
(
target
data
)
{
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchDragEvent
'
{
type
:
'
dragEnter
'
x
:
target
.
x
y
:
target
.
y
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
data
}
)
;
}
async
dragOver
(
target
data
)
{
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchDragEvent
'
{
type
:
'
dragOver
'
x
:
target
.
x
y
:
target
.
y
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
data
}
)
;
}
async
drop
(
target
data
)
{
await
__classPrivateFieldGet
(
this
_Mouse_client
"
f
"
)
.
send
(
'
Input
.
dispatchDragEvent
'
{
type
:
'
drop
'
x
:
target
.
x
y
:
target
.
y
modifiers
:
__classPrivateFieldGet
(
this
_Mouse_keyboard
"
f
"
)
.
_modifiers
data
}
)
;
}
async
dragAndDrop
(
start
target
options
=
{
}
)
{
const
{
delay
=
null
}
=
options
;
const
data
=
await
this
.
drag
(
start
target
)
;
await
this
.
dragEnter
(
target
data
)
;
await
this
.
dragOver
(
target
data
)
;
if
(
delay
)
{
await
new
Promise
(
resolve
=
>
{
return
setTimeout
(
resolve
delay
)
;
}
)
;
}
await
this
.
drop
(
target
data
)
;
await
this
.
up
(
)
;
}
}
_Mouse_client
=
new
WeakMap
(
)
_Mouse_keyboard
=
new
WeakMap
(
)
_Mouse_x
=
new
WeakMap
(
)
_Mouse_y
=
new
WeakMap
(
)
_Mouse_button
=
new
WeakMap
(
)
;
export
class
Touchscreen
{
constructor
(
client
keyboard
)
{
_Touchscreen_client
.
set
(
this
void
0
)
;
_Touchscreen_keyboard
.
set
(
this
void
0
)
;
__classPrivateFieldSet
(
this
_Touchscreen_client
client
"
f
"
)
;
__classPrivateFieldSet
(
this
_Touchscreen_keyboard
keyboard
"
f
"
)
;
}
async
tap
(
x
y
)
{
const
touchPoints
=
[
{
x
:
Math
.
round
(
x
)
y
:
Math
.
round
(
y
)
}
]
;
await
__classPrivateFieldGet
(
this
_Touchscreen_client
"
f
"
)
.
send
(
'
Input
.
dispatchTouchEvent
'
{
type
:
'
touchStart
'
touchPoints
modifiers
:
__classPrivateFieldGet
(
this
_Touchscreen_keyboard
"
f
"
)
.
_modifiers
}
)
;
await
__classPrivateFieldGet
(
this
_Touchscreen_client
"
f
"
)
.
send
(
'
Input
.
dispatchTouchEvent
'
{
type
:
'
touchEnd
'
touchPoints
:
[
]
modifiers
:
__classPrivateFieldGet
(
this
_Touchscreen_keyboard
"
f
"
)
.
_modifiers
}
)
;
}
}
_Touchscreen_client
=
new
WeakMap
(
)
_Touchscreen_keyboard
=
new
WeakMap
(
)
;
