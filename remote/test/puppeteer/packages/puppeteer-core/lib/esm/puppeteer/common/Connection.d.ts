import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
{
ConnectionTransport
}
from
'
.
/
ConnectionTransport
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ProtocolError
}
from
'
.
/
Errors
.
js
'
;
export
{
ConnectionTransport
ProtocolMapping
}
;
export
interface
ConnectionCallback
{
resolve
(
args
:
unknown
)
:
void
;
reject
(
args
:
unknown
)
:
void
;
error
:
ProtocolError
;
method
:
string
;
}
export
declare
const
ConnectionEmittedEvents
:
{
readonly
Disconnected
:
symbol
;
}
;
export
declare
class
Connection
extends
EventEmitter
{
#
private
;
constructor
(
url
:
string
transport
:
ConnectionTransport
delay
?
:
number
)
;
static
fromSession
(
session
:
CDPSession
)
:
Connection
|
undefined
;
get
_closed
(
)
:
boolean
;
get
_sessions
(
)
:
Map
<
string
CDPSession
>
;
session
(
sessionId
:
string
)
:
CDPSession
|
null
;
url
(
)
:
string
;
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
_rawSend
(
message
:
Record
<
string
unknown
>
)
:
number
;
protected
onMessage
(
message
:
string
)
:
Promise
<
void
>
;
dispose
(
)
:
void
;
isAutoAttached
(
targetId
:
string
)
:
boolean
;
_createSession
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
isAutoAttachEmulated
?
:
boolean
)
:
Promise
<
CDPSession
>
;
createSession
(
targetInfo
:
Protocol
.
Target
.
TargetInfo
)
:
Promise
<
CDPSession
>
;
}
export
interface
CDPSessionOnMessageObject
{
id
?
:
number
;
method
:
string
;
params
:
Record
<
string
unknown
>
;
error
:
{
message
:
string
;
data
:
any
;
code
:
number
;
}
;
result
?
:
any
;
}
export
declare
const
CDPSessionEmittedEvents
:
{
readonly
Disconnected
:
symbol
;
}
;
export
declare
class
CDPSession
extends
EventEmitter
{
constructor
(
)
;
connection
(
)
:
Connection
|
undefined
;
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
detach
(
)
:
Promise
<
void
>
;
id
(
)
:
string
;
}
export
declare
class
CDPSessionImpl
extends
CDPSession
{
#
private
;
constructor
(
connection
:
Connection
targetType
:
string
sessionId
:
string
)
;
connection
(
)
:
Connection
|
undefined
;
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
_onMessage
(
object
:
CDPSessionOnMessageObject
)
:
void
;
detach
(
)
:
Promise
<
void
>
;
_onClosed
(
)
:
void
;
id
(
)
:
string
;
}
export
declare
function
isTargetClosedError
(
err
:
Error
)
:
boolean
;
