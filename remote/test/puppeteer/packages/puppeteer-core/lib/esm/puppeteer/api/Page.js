var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
_Page_handlerMap
;
import
{
EventEmitter
}
from
'
.
.
/
common
/
EventEmitter
.
js
'
;
export
class
Page
extends
EventEmitter
{
constructor
(
)
{
super
(
)
;
_Page_handlerMap
.
set
(
this
new
WeakMap
(
)
)
;
}
isDragInterceptionEnabled
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
isJavaScriptEnabled
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
on
(
eventName
handler
)
{
if
(
eventName
=
=
=
'
request
'
)
{
const
wrap
=
__classPrivateFieldGet
(
this
_Page_handlerMap
"
f
"
)
.
get
(
handler
)
|
|
(
(
event
)
=
>
{
event
.
enqueueInterceptAction
(
(
)
=
>
{
return
handler
(
event
)
;
}
)
;
}
)
;
__classPrivateFieldGet
(
this
_Page_handlerMap
"
f
"
)
.
set
(
handler
wrap
)
;
return
super
.
on
(
eventName
wrap
)
;
}
return
super
.
on
(
eventName
handler
)
;
}
once
(
eventName
handler
)
{
return
super
.
once
(
eventName
handler
)
;
}
off
(
eventName
handler
)
{
if
(
eventName
=
=
=
'
request
'
)
{
handler
=
__classPrivateFieldGet
(
this
_Page_handlerMap
"
f
"
)
.
get
(
handler
)
|
|
handler
;
}
return
super
.
off
(
eventName
handler
)
;
}
waitForFileChooser
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setGeolocation
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
target
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
browser
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
browserContext
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
mainFrame
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
keyboard
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
touchscreen
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
coverage
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
tracing
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
accessibility
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
frames
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
workers
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setRequestInterception
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setDragInterception
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
setOfflineMode
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
emulateNetworkConditions
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
setDefaultNavigationTimeout
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
setDefaultTimeout
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
getDefaultTimeout
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
evaluateHandle
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
queryObjects
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
eval
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
eval
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
x
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
cookies
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
deleteCookie
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setCookie
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
addScriptTag
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
addStyleTag
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
exposeFunction
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
authenticate
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setExtraHTTPHeaders
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setUserAgent
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
metrics
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
url
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
content
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setContent
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
goto
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
reload
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForNavigation
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForRequest
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForResponse
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForNetworkIdle
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForFrame
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
goBack
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
goForward
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
bringToFront
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulate
(
device
)
{
await
Promise
.
all
(
[
this
.
setUserAgent
(
device
.
userAgent
)
this
.
setViewport
(
device
.
viewport
)
]
)
;
}
async
setJavaScriptEnabled
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setBypassCSP
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateMediaType
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateCPUThrottling
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateMediaFeatures
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateTimezone
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateIdleState
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
emulateVisionDeficiency
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setViewport
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
viewport
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
evaluate
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
evaluateOnNewDocument
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
setCacheEnabled
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
screenshot
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
createPDFStream
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
pdf
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
title
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
close
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
isClosed
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
mouse
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
click
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
focus
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
hover
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
select
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
tap
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
type
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
waitForTimeout
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
async
waitForSelector
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
waitForXPath
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
waitForFunction
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
_Page_handlerMap
=
new
WeakMap
(
)
;
export
const
supportedMetrics
=
new
Set
(
[
'
Timestamp
'
'
Documents
'
'
Frames
'
'
JSEventListeners
'
'
Nodes
'
'
LayoutCount
'
'
RecalcStyleCount
'
'
LayoutDuration
'
'
RecalcStyleDuration
'
'
ScriptDuration
'
'
TaskDuration
'
'
JSHeapUsedSize
'
'
JSHeapTotalSize
'
]
)
;
export
const
unitToPixels
=
{
px
:
1
in
:
96
cm
:
37
.
8
mm
:
3
.
78
}
;
