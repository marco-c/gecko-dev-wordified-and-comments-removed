"
use
strict
"
;
var
__createBinding
=
(
this
&
&
this
.
__createBinding
)
|
|
(
Object
.
create
?
(
function
(
o
m
k
k2
)
{
if
(
k2
=
=
=
undefined
)
k2
=
k
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
m
k
)
;
if
(
!
desc
|
|
(
"
get
"
in
desc
?
!
m
.
__esModule
:
desc
.
writable
|
|
desc
.
configurable
)
)
{
desc
=
{
enumerable
:
true
get
:
function
(
)
{
return
m
[
k
]
;
}
}
;
}
Object
.
defineProperty
(
o
k2
desc
)
;
}
)
:
(
function
(
o
m
k
k2
)
{
if
(
k2
=
=
=
undefined
)
k2
=
k
;
o
[
k2
]
=
m
[
k
]
;
}
)
)
;
var
__setModuleDefault
=
(
this
&
&
this
.
__setModuleDefault
)
|
|
(
Object
.
create
?
(
function
(
o
v
)
{
Object
.
defineProperty
(
o
"
default
"
{
enumerable
:
true
value
:
v
}
)
;
}
)
:
function
(
o
v
)
{
o
[
"
default
"
]
=
v
;
}
)
;
var
__importStar
=
(
this
&
&
this
.
__importStar
)
|
|
function
(
mod
)
{
if
(
mod
&
&
mod
.
__esModule
)
return
mod
;
var
result
=
{
}
;
if
(
mod
!
=
null
)
for
(
var
k
in
mod
)
if
(
k
!
=
=
"
default
"
&
&
Object
.
prototype
.
hasOwnProperty
.
call
(
mod
k
)
)
__createBinding
(
result
mod
k
)
;
__setModuleDefault
(
result
mod
)
;
return
result
;
}
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
getCapturedLogs
=
exports
.
setLogCapture
=
exports
.
debug
=
exports
.
importDebug
=
void
0
;
const
environment_js_1
=
require
(
"
.
.
/
environment
.
js
"
)
;
let
debugModule
=
null
;
async
function
importDebug
(
)
{
if
(
!
debugModule
)
{
debugModule
=
(
await
Promise
.
resolve
(
)
.
then
(
(
)
=
>
__importStar
(
require
(
'
debug
'
)
)
)
)
.
default
;
}
return
debugModule
;
}
exports
.
importDebug
=
importDebug
;
const
debug
=
(
prefix
)
=
>
{
if
(
environment_js_1
.
isNode
)
{
return
async
(
.
.
.
logArgs
)
=
>
{
if
(
captureLogs
)
{
capturedLogs
.
push
(
prefix
+
logArgs
)
;
}
(
await
importDebug
(
)
)
(
prefix
)
(
logArgs
)
;
}
;
}
return
(
.
.
.
logArgs
)
=
>
{
const
debugLevel
=
globalThis
.
__PUPPETEER_DEBUG
;
if
(
!
debugLevel
)
{
return
;
}
const
everythingShouldBeLogged
=
debugLevel
=
=
=
'
*
'
;
const
prefixMatchesDebugLevel
=
everythingShouldBeLogged
|
|
(
debugLevel
.
endsWith
(
'
*
'
)
?
prefix
.
startsWith
(
debugLevel
)
:
prefix
=
=
=
debugLevel
)
;
if
(
!
prefixMatchesDebugLevel
)
{
return
;
}
console
.
log
(
{
prefix
}
:
.
.
.
logArgs
)
;
}
;
}
;
exports
.
debug
=
debug
;
let
capturedLogs
=
[
]
;
let
captureLogs
=
false
;
function
setLogCapture
(
value
)
{
capturedLogs
=
[
]
;
captureLogs
=
value
;
}
exports
.
setLogCapture
=
setLogCapture
;
function
getCapturedLogs
(
)
{
return
capturedLogs
;
}
exports
.
getCapturedLogs
=
getCapturedLogs
;
