import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
type
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
MouseButton
}
from
'
.
/
Input
.
js
'
;
import
{
EvaluateFunc
HandleFor
HandleOr
}
from
'
.
/
types
.
js
'
;
declare
const
__JSHandleSymbol
:
unique
symbol
;
export
interface
BoxModel
{
content
:
Point
[
]
;
padding
:
Point
[
]
;
border
:
Point
[
]
;
margin
:
Point
[
]
;
width
:
number
;
height
:
number
;
}
export
interface
BoundingBox
extends
Point
{
width
:
number
;
height
:
number
;
}
export
declare
class
JSHandle
<
T
=
unknown
>
{
#
private
;
[
__JSHandleSymbol
]
?
:
T
;
get
client
(
)
:
CDPSession
;
get
disposed
(
)
:
boolean
;
constructor
(
context
:
ExecutionContext
remoteObject
:
Protocol
.
Runtime
.
RemoteObject
)
;
executionContext
(
)
:
ExecutionContext
;
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
this
.
.
.
Params
]
>
=
EvaluateFunc
<
[
this
.
.
.
Params
]
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
[
this
.
.
.
Params
]
>
=
EvaluateFunc
<
[
this
.
.
.
Params
]
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
getProperty
<
K
extends
keyof
T
>
(
propertyName
:
HandleOr
<
K
>
)
:
Promise
<
HandleFor
<
T
[
K
]
>
>
;
getProperty
(
propertyName
:
string
)
:
Promise
<
JSHandle
<
unknown
>
>
;
getProperties
(
)
:
Promise
<
Map
<
string
JSHandle
>
>
;
jsonValue
(
)
:
Promise
<
T
>
;
asElement
(
)
:
ElementHandle
<
Node
>
|
null
;
dispose
(
)
:
Promise
<
void
>
;
toString
(
)
:
string
;
remoteObject
(
)
:
Protocol
.
Runtime
.
RemoteObject
;
}
export
interface
Offset
{
x
:
number
;
y
:
number
;
}
export
interface
ClickOptions
{
delay
?
:
number
;
button
?
:
MouseButton
;
clickCount
?
:
number
;
offset
?
:
Offset
;
}
export
interface
PressOptions
{
delay
?
:
number
;
text
?
:
string
;
}
export
interface
Point
{
x
:
number
;
y
:
number
;
}
export
{
}
;
