import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
ProtocolMapping
}
from
'
devtools
-
protocol
/
types
/
protocol
-
mapping
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
HTTPResponse
}
from
'
.
/
HTTPResponse
.
js
'
;
export
interface
ContinueRequestOverrides
{
url
?
:
string
;
method
?
:
string
;
postData
?
:
string
;
headers
?
:
Record
<
string
string
>
;
}
export
interface
InterceptResolutionState
{
action
:
InterceptResolutionAction
;
priority
?
:
number
;
}
export
interface
ResponseForRequest
{
status
:
number
;
headers
:
Record
<
string
unknown
>
;
contentType
:
string
;
body
:
string
|
Buffer
;
}
export
type
ResourceType
=
Lowercase
<
Protocol
.
Network
.
ResourceType
>
;
export
declare
const
DEFAULT_INTERCEPT_RESOLUTION_PRIORITY
=
0
;
interface
CDPSession
extends
EventEmitter
{
send
<
T
extends
keyof
ProtocolMapping
.
Commands
>
(
method
:
T
.
.
.
paramArgs
:
ProtocolMapping
.
Commands
[
T
]
[
'
paramsType
'
]
)
:
Promise
<
ProtocolMapping
.
Commands
[
T
]
[
'
returnType
'
]
>
;
}
export
declare
class
HTTPRequest
{
#
private
;
_requestId
:
string
;
_interceptionId
:
string
|
undefined
;
_failureText
:
string
|
null
;
_response
:
HTTPResponse
|
null
;
_fromMemoryCache
:
boolean
;
_redirectChain
:
HTTPRequest
[
]
;
get
client
(
)
:
CDPSession
;
constructor
(
client
:
CDPSession
frame
:
Frame
|
null
interceptionId
:
string
|
undefined
allowInterception
:
boolean
event
:
Protocol
.
Network
.
RequestWillBeSentEvent
redirectChain
:
HTTPRequest
[
]
)
;
url
(
)
:
string
;
continueRequestOverrides
(
)
:
ContinueRequestOverrides
;
responseForRequest
(
)
:
Partial
<
ResponseForRequest
>
|
null
;
abortErrorReason
(
)
:
Protocol
.
Network
.
ErrorReason
|
null
;
interceptResolutionState
(
)
:
InterceptResolutionState
;
isInterceptResolutionHandled
(
)
:
boolean
;
enqueueInterceptAction
(
pendingHandler
:
(
)
=
>
void
|
PromiseLike
<
unknown
>
)
:
void
;
finalizeInterceptions
(
)
:
Promise
<
void
>
;
resourceType
(
)
:
ResourceType
;
method
(
)
:
string
;
postData
(
)
:
string
|
undefined
;
headers
(
)
:
Record
<
string
string
>
;
response
(
)
:
HTTPResponse
|
null
;
frame
(
)
:
Frame
|
null
;
isNavigationRequest
(
)
:
boolean
;
initiator
(
)
:
Protocol
.
Network
.
Initiator
;
redirectChain
(
)
:
HTTPRequest
[
]
;
failure
(
)
:
{
errorText
:
string
;
}
|
null
;
continue
(
overrides
?
:
ContinueRequestOverrides
priority
?
:
number
)
:
Promise
<
void
>
;
respond
(
response
:
Partial
<
ResponseForRequest
>
priority
?
:
number
)
:
Promise
<
void
>
;
abort
(
errorCode
?
:
ErrorCode
priority
?
:
number
)
:
Promise
<
void
>
;
}
export
declare
enum
InterceptResolutionAction
{
Abort
=
"
abort
"
Respond
=
"
respond
"
Continue
=
"
continue
"
Disabled
=
"
disabled
"
None
=
"
none
"
AlreadyHandled
=
"
already
-
handled
"
}
export
type
InterceptResolutionStrategy
=
InterceptResolutionAction
;
export
type
ErrorCode
=
'
aborted
'
|
'
accessdenied
'
|
'
addressunreachable
'
|
'
blockedbyclient
'
|
'
blockedbyresponse
'
|
'
connectionaborted
'
|
'
connectionclosed
'
|
'
connectionfailed
'
|
'
connectionrefused
'
|
'
connectionreset
'
|
'
internetdisconnected
'
|
'
namenotresolved
'
|
'
timedout
'
|
'
failed
'
;
export
type
ActionResult
=
'
continue
'
|
'
abort
'
|
'
respond
'
;
export
{
}
;
