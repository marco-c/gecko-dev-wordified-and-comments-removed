import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
ConsoleMessageType
}
from
'
.
/
ConsoleMessage
.
js
'
;
import
{
EvaluateFunc
HandleFor
}
from
'
.
/
types
.
js
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
ExecutionContext
}
from
'
.
/
ExecutionContext
.
js
'
;
import
{
JSHandle
}
from
'
.
/
JSHandle
.
js
'
;
export
type
ConsoleAPICalledCallback
=
(
eventType
:
ConsoleMessageType
handles
:
JSHandle
[
]
trace
:
Protocol
.
Runtime
.
StackTrace
)
=
>
void
;
export
type
ExceptionThrownCallback
=
(
details
:
Protocol
.
Runtime
.
ExceptionDetails
)
=
>
void
;
export
declare
class
WebWorker
extends
EventEmitter
{
#
private
;
constructor
(
client
:
CDPSession
url
:
string
consoleAPICalled
:
ConsoleAPICalledCallback
exceptionThrown
:
ExceptionThrownCallback
)
;
executionContext
(
)
:
Promise
<
ExecutionContext
>
;
url
(
)
:
string
;
evaluate
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
Awaited
<
ReturnType
<
Func
>
>
>
;
evaluateHandle
<
Params
extends
unknown
[
]
Func
extends
EvaluateFunc
<
Params
>
=
EvaluateFunc
<
Params
>
>
(
pageFunction
:
Func
|
string
.
.
.
args
:
Params
)
:
Promise
<
HandleFor
<
Awaited
<
ReturnType
<
Func
>
>
>
>
;
}
