"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
Browser
=
exports
.
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
=
void
0
;
const
EventEmitter_js_1
=
require
(
"
.
.
/
common
/
EventEmitter
.
js
"
)
;
exports
.
WEB_PERMISSION_TO_PROTOCOL_PERMISSION
=
new
Map
(
[
[
'
geolocation
'
'
geolocation
'
]
[
'
midi
'
'
midi
'
]
[
'
notifications
'
'
notifications
'
]
[
'
camera
'
'
videoCapture
'
]
[
'
microphone
'
'
audioCapture
'
]
[
'
background
-
sync
'
'
backgroundSync
'
]
[
'
ambient
-
light
-
sensor
'
'
sensors
'
]
[
'
accelerometer
'
'
sensors
'
]
[
'
gyroscope
'
'
sensors
'
]
[
'
magnetometer
'
'
sensors
'
]
[
'
accessibility
-
events
'
'
accessibilityEvents
'
]
[
'
clipboard
-
read
'
'
clipboardReadWrite
'
]
[
'
clipboard
-
write
'
'
clipboardReadWrite
'
]
[
'
payment
-
handler
'
'
paymentHandler
'
]
[
'
persistent
-
storage
'
'
durableStorage
'
]
[
'
idle
-
detection
'
'
idleDetection
'
]
[
'
midi
-
sysex
'
'
midiSysex
'
]
]
)
;
class
Browser
extends
EventEmitter_js_1
.
EventEmitter
{
constructor
(
)
{
super
(
)
;
}
_attach
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
_detach
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
get
_targets
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
process
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
_getIsPageTargetCallback
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
createIncognitoBrowserContext
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
browserContexts
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
defaultBrowserContext
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
_disposeContext
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
wsEndpoint
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
newPage
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
_createPageInContext
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
targets
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
target
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
waitForTarget
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
pages
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
version
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
userAgent
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
close
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
disconnect
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
isConnected
(
)
{
throw
new
Error
(
'
Not
implemented
'
)
;
}
}
exports
.
Browser
=
Browser
;
