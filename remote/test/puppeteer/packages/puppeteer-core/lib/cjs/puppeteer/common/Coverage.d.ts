import
{
PuppeteerEventListener
}
from
'
.
/
util
.
js
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
export
{
PuppeteerEventListener
}
;
export
interface
CoverageEntry
{
url
:
string
;
text
:
string
;
ranges
:
Array
<
{
start
:
number
;
end
:
number
;
}
>
;
}
export
interface
JSCoverageEntry
extends
CoverageEntry
{
rawScriptCoverage
?
:
Protocol
.
Profiler
.
ScriptCoverage
;
}
export
interface
JSCoverageOptions
{
resetOnNavigation
?
:
boolean
;
reportAnonymousScripts
?
:
boolean
;
includeRawScriptCoverage
?
:
boolean
;
useBlockCoverage
?
:
boolean
;
}
export
interface
CSSCoverageOptions
{
resetOnNavigation
?
:
boolean
;
}
export
declare
class
Coverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
startJSCoverage
(
options
?
:
JSCoverageOptions
)
:
Promise
<
void
>
;
stopJSCoverage
(
)
:
Promise
<
JSCoverageEntry
[
]
>
;
startCSSCoverage
(
options
?
:
CSSCoverageOptions
)
:
Promise
<
void
>
;
stopCSSCoverage
(
)
:
Promise
<
CoverageEntry
[
]
>
;
}
export
declare
class
JSCoverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
start
(
options
?
:
{
resetOnNavigation
?
:
boolean
;
reportAnonymousScripts
?
:
boolean
;
includeRawScriptCoverage
?
:
boolean
;
useBlockCoverage
?
:
boolean
;
}
)
:
Promise
<
void
>
;
stop
(
)
:
Promise
<
JSCoverageEntry
[
]
>
;
}
export
declare
class
CSSCoverage
{
#
private
;
constructor
(
client
:
CDPSession
)
;
start
(
options
?
:
{
resetOnNavigation
?
:
boolean
;
}
)
:
Promise
<
void
>
;
stop
(
)
:
Promise
<
CoverageEntry
[
]
>
;
}
