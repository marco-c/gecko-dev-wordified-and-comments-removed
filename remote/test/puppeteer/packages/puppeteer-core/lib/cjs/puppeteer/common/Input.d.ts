import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
import
{
KeyInput
}
from
'
.
/
USKeyboardLayout
.
js
'
;
import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
Point
}
from
'
.
/
JSHandle
.
js
'
;
export
declare
class
Keyboard
{
#
private
;
_modifiers
:
number
;
constructor
(
client
:
CDPSession
)
;
down
(
key
:
KeyInput
options
?
:
{
text
?
:
string
;
commands
?
:
string
[
]
;
}
)
:
Promise
<
void
>
;
up
(
key
:
KeyInput
)
:
Promise
<
void
>
;
sendCharacter
(
char
:
string
)
:
Promise
<
void
>
;
private
charIsKey
;
type
(
text
:
string
options
?
:
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
press
(
key
:
KeyInput
options
?
:
{
delay
?
:
number
;
text
?
:
string
;
commands
?
:
string
[
]
;
}
)
:
Promise
<
void
>
;
}
export
type
MouseButton
=
'
left
'
|
'
right
'
|
'
middle
'
|
'
back
'
|
'
forward
'
;
export
interface
MouseOptions
{
button
?
:
MouseButton
;
clickCount
?
:
number
;
}
export
interface
MouseWheelOptions
{
deltaX
?
:
number
;
deltaY
?
:
number
;
}
export
declare
class
Mouse
{
#
private
;
constructor
(
client
:
CDPSession
keyboard
:
Keyboard
)
;
move
(
x
:
number
y
:
number
options
?
:
{
steps
?
:
number
;
}
)
:
Promise
<
void
>
;
click
(
x
:
number
y
:
number
options
?
:
MouseOptions
&
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
down
(
options
?
:
MouseOptions
)
:
Promise
<
void
>
;
up
(
options
?
:
MouseOptions
)
:
Promise
<
void
>
;
wheel
(
options
?
:
MouseWheelOptions
)
:
Promise
<
void
>
;
drag
(
start
:
Point
target
:
Point
)
:
Promise
<
Protocol
.
Input
.
DragData
>
;
dragEnter
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragOver
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
drop
(
target
:
Point
data
:
Protocol
.
Input
.
DragData
)
:
Promise
<
void
>
;
dragAndDrop
(
start
:
Point
target
:
Point
options
?
:
{
delay
?
:
number
;
}
)
:
Promise
<
void
>
;
}
export
declare
class
Touchscreen
{
#
private
;
constructor
(
client
:
CDPSession
keyboard
:
Keyboard
)
;
tap
(
x
:
number
y
:
number
)
:
Promise
<
void
>
;
}
