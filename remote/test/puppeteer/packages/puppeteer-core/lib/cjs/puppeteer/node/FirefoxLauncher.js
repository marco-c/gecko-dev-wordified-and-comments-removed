"
use
strict
"
;
var
__createBinding
=
(
this
&
&
this
.
__createBinding
)
|
|
(
Object
.
create
?
(
function
(
o
m
k
k2
)
{
if
(
k2
=
=
=
undefined
)
k2
=
k
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
m
k
)
;
if
(
!
desc
|
|
(
"
get
"
in
desc
?
!
m
.
__esModule
:
desc
.
writable
|
|
desc
.
configurable
)
)
{
desc
=
{
enumerable
:
true
get
:
function
(
)
{
return
m
[
k
]
;
}
}
;
}
Object
.
defineProperty
(
o
k2
desc
)
;
}
)
:
(
function
(
o
m
k
k2
)
{
if
(
k2
=
=
=
undefined
)
k2
=
k
;
o
[
k2
]
=
m
[
k
]
;
}
)
)
;
var
__setModuleDefault
=
(
this
&
&
this
.
__setModuleDefault
)
|
|
(
Object
.
create
?
(
function
(
o
v
)
{
Object
.
defineProperty
(
o
"
default
"
{
enumerable
:
true
value
:
v
}
)
;
}
)
:
function
(
o
v
)
{
o
[
"
default
"
]
=
v
;
}
)
;
var
__importStar
=
(
this
&
&
this
.
__importStar
)
|
|
function
(
mod
)
{
if
(
mod
&
&
mod
.
__esModule
)
return
mod
;
var
result
=
{
}
;
if
(
mod
!
=
null
)
for
(
var
k
in
mod
)
if
(
k
!
=
=
"
default
"
&
&
Object
.
prototype
.
hasOwnProperty
.
call
(
mod
k
)
)
__createBinding
(
result
mod
k
)
;
__setModuleDefault
(
result
mod
)
;
return
result
;
}
;
var
__importDefault
=
(
this
&
&
this
.
__importDefault
)
|
|
function
(
mod
)
{
return
(
mod
&
&
mod
.
__esModule
)
?
mod
:
{
"
default
"
:
mod
}
;
}
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
FirefoxLauncher
=
void
0
;
const
fs_1
=
__importDefault
(
require
(
"
fs
"
)
)
;
const
os_1
=
__importDefault
(
require
(
"
os
"
)
)
;
const
path_1
=
__importDefault
(
require
(
"
path
"
)
)
;
const
Browser_js_1
=
require
(
"
.
.
/
common
/
Browser
.
js
"
)
;
const
assert_js_1
=
require
(
"
.
.
/
util
/
assert
.
js
"
)
;
const
BrowserRunner_js_1
=
require
(
"
.
/
BrowserRunner
.
js
"
)
;
const
ProductLauncher_js_1
=
require
(
"
.
/
ProductLauncher
.
js
"
)
;
class
FirefoxLauncher
extends
ProductLauncher_js_1
.
ProductLauncher
{
constructor
(
puppeteer
)
{
super
(
puppeteer
'
firefox
'
)
;
}
async
launch
(
options
=
{
}
)
{
const
{
ignoreDefaultArgs
=
false
args
=
[
]
dumpio
=
false
executablePath
pipe
=
false
env
=
process
.
env
handleSIGINT
=
true
handleSIGTERM
=
true
handleSIGHUP
=
true
ignoreHTTPSErrors
=
false
defaultViewport
=
{
width
:
800
height
:
600
}
slowMo
=
0
timeout
=
30000
extraPrefsFirefox
=
{
}
waitForInitialPage
=
true
debuggingPort
=
null
protocol
=
'
cdp
'
}
=
options
;
const
firefoxArguments
=
[
]
;
if
(
!
ignoreDefaultArgs
)
{
firefoxArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
)
;
}
else
if
(
Array
.
isArray
(
ignoreDefaultArgs
)
)
{
firefoxArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
.
filter
(
arg
=
>
{
return
!
ignoreDefaultArgs
.
includes
(
arg
)
;
}
)
)
;
}
else
{
firefoxArguments
.
push
(
.
.
.
args
)
;
}
if
(
!
firefoxArguments
.
some
(
argument
=
>
{
return
argument
.
startsWith
(
'
-
-
remote
-
debugging
-
'
)
;
}
)
)
{
if
(
pipe
)
{
(
0
assert_js_1
.
assert
)
(
debuggingPort
=
=
=
null
'
Browser
should
be
launched
with
either
pipe
or
debugging
port
-
not
both
.
'
)
;
}
firefoxArguments
.
push
(
-
-
remote
-
debugging
-
port
=
{
debuggingPort
|
|
0
}
)
;
}
let
userDataDir
;
let
isTempUserDataDir
=
true
;
const
profileArgIndex
=
firefoxArguments
.
findIndex
(
arg
=
>
{
return
[
'
-
profile
'
'
-
-
profile
'
]
.
includes
(
arg
)
;
}
)
;
if
(
profileArgIndex
!
=
=
-
1
)
{
userDataDir
=
firefoxArguments
[
profileArgIndex
+
1
]
;
if
(
!
userDataDir
|
|
!
fs_1
.
default
.
existsSync
(
userDataDir
)
)
{
throw
new
Error
(
Firefox
profile
not
found
at
'
{
userDataDir
}
'
)
;
}
isTempUserDataDir
=
false
;
const
prefs
=
this
.
defaultPreferences
(
extraPrefsFirefox
)
;
this
.
writePreferences
(
prefs
userDataDir
)
;
}
else
{
userDataDir
=
await
this
.
_createProfile
(
extraPrefsFirefox
)
;
firefoxArguments
.
push
(
'
-
-
profile
'
)
;
firefoxArguments
.
push
(
userDataDir
)
;
}
let
firefoxExecutable
;
if
(
this
.
puppeteer
.
_isPuppeteerCore
|
|
executablePath
)
{
(
0
assert_js_1
.
assert
)
(
executablePath
An
\
executablePath
\
must
be
specified
for
\
puppeteer
-
core
\
)
;
firefoxExecutable
=
executablePath
;
}
else
{
firefoxExecutable
=
this
.
executablePath
(
)
;
}
const
runner
=
new
BrowserRunner_js_1
.
BrowserRunner
(
this
.
product
firefoxExecutable
firefoxArguments
userDataDir
isTempUserDataDir
)
;
runner
.
start
(
{
handleSIGHUP
handleSIGTERM
handleSIGINT
dumpio
env
pipe
}
)
;
if
(
protocol
=
=
=
'
webDriverBiDi
'
)
{
let
browser
;
try
{
const
connection
=
await
runner
.
setupWebDriverBiDiConnection
(
{
timeout
slowMo
preferredRevision
:
this
.
puppeteer
.
browserRevision
}
)
;
const
BiDi
=
await
Promise
.
resolve
(
)
.
then
(
(
)
=
>
__importStar
(
require
(
'
.
.
/
common
/
bidi
/
bidi
.
js
'
)
)
)
;
browser
=
await
BiDi
.
Browser
.
create
(
{
connection
closeCallback
:
runner
.
close
.
bind
(
runner
)
process
:
runner
.
proc
}
)
;
}
catch
(
error
)
{
runner
.
kill
(
)
;
throw
error
;
}
return
browser
;
}
let
browser
;
try
{
const
connection
=
await
runner
.
setupConnection
(
{
usePipe
:
pipe
timeout
slowMo
preferredRevision
:
this
.
puppeteer
.
browserRevision
}
)
;
browser
=
await
Browser_js_1
.
CDPBrowser
.
_create
(
this
.
product
connection
[
]
ignoreHTTPSErrors
defaultViewport
runner
.
proc
runner
.
close
.
bind
(
runner
)
options
.
targetFilter
)
;
}
catch
(
error
)
{
runner
.
kill
(
)
;
throw
error
;
}
if
(
waitForInitialPage
)
{
try
{
await
browser
.
waitForTarget
(
t
=
>
{
return
t
.
type
(
)
=
=
=
'
page
'
;
}
{
timeout
}
)
;
}
catch
(
error
)
{
await
browser
.
close
(
)
;
throw
error
;
}
}
return
browser
;
}
executablePath
(
)
{
if
(
this
.
puppeteer
.
browserRevision
=
=
=
'
latest
'
)
{
const
browserFetcher
=
this
.
puppeteer
.
createBrowserFetcher
(
{
product
:
this
.
product
path
:
this
.
puppeteer
.
defaultDownloadPath
}
)
;
const
localRevisions
=
browserFetcher
.
localRevisions
(
)
;
if
(
localRevisions
[
0
]
)
{
this
.
actualBrowserRevision
=
localRevisions
[
0
]
;
}
}
return
this
.
resolveExecutablePath
(
)
;
}
defaultArgs
(
options
=
{
}
)
{
const
{
devtools
=
false
headless
=
!
devtools
args
=
[
]
userDataDir
=
null
}
=
options
;
const
firefoxArguments
=
[
'
-
-
no
-
remote
'
]
;
switch
(
os_1
.
default
.
platform
(
)
)
{
case
'
darwin
'
:
firefoxArguments
.
push
(
'
-
-
foreground
'
)
;
break
;
case
'
win32
'
:
firefoxArguments
.
push
(
'
-
-
wait
-
for
-
browser
'
)
;
break
;
}
if
(
userDataDir
)
{
firefoxArguments
.
push
(
'
-
-
profile
'
)
;
firefoxArguments
.
push
(
userDataDir
)
;
}
if
(
headless
)
{
firefoxArguments
.
push
(
'
-
-
headless
'
)
;
}
if
(
devtools
)
{
firefoxArguments
.
push
(
'
-
-
devtools
'
)
;
}
if
(
args
.
every
(
arg
=
>
{
return
arg
.
startsWith
(
'
-
'
)
;
}
)
)
{
firefoxArguments
.
push
(
'
about
:
blank
'
)
;
}
firefoxArguments
.
push
(
.
.
.
args
)
;
return
firefoxArguments
;
}
defaultPreferences
(
extraPrefs
)
{
const
server
=
'
dummy
.
test
'
;
const
defaultPrefs
=
{
'
app
.
normandy
.
api_url
'
:
'
'
'
app
.
update
.
checkInstallTime
'
:
false
'
app
.
update
.
disabledForTesting
'
:
true
'
apz
.
content_response_timeout
'
:
60000
'
browser
.
contentblocking
.
features
.
standard
'
:
'
-
tp
tpPrivate
cookieBehavior0
-
cm
-
fp
'
'
browser
.
dom
.
window
.
dump
.
enabled
'
:
true
'
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topstories
'
:
false
'
browser
.
newtabpage
.
enabled
'
:
false
'
browser
.
pagethumbnails
.
capturing_disabled
'
:
true
'
browser
.
safebrowsing
.
blockedURIs
.
enabled
'
:
false
'
browser
.
safebrowsing
.
downloads
.
enabled
'
:
false
'
browser
.
safebrowsing
.
malware
.
enabled
'
:
false
'
browser
.
safebrowsing
.
passwords
.
enabled
'
:
false
'
browser
.
safebrowsing
.
phishing
.
enabled
'
:
false
'
browser
.
search
.
update
'
:
false
'
browser
.
sessionstore
.
resume_from_crash
'
:
false
'
browser
.
shell
.
checkDefaultBrowser
'
:
false
'
browser
.
startup
.
homepage
'
:
'
about
:
blank
'
'
browser
.
startup
.
homepage_override
.
mstone
'
:
'
ignore
'
'
browser
.
startup
.
page
'
:
0
'
browser
.
tabs
.
disableBackgroundZombification
'
:
false
'
browser
.
tabs
.
warnOnCloseOtherTabs
'
:
false
'
browser
.
tabs
.
warnOnOpen
'
:
false
'
browser
.
uitour
.
enabled
'
:
false
'
browser
.
urlbar
.
suggest
.
searches
'
:
false
'
browser
.
usedOnWindows10
.
introURL
'
:
'
'
'
browser
.
warnOnQuit
'
:
false
'
datareporting
.
healthreport
.
documentServerURI
'
:
http
:
/
/
{
server
}
/
dummy
/
healthreport
/
'
datareporting
.
healthreport
.
logging
.
consoleEnabled
'
:
false
'
datareporting
.
healthreport
.
service
.
enabled
'
:
false
'
datareporting
.
healthreport
.
service
.
firstRun
'
:
false
'
datareporting
.
healthreport
.
uploadEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionPolicyBypassNotification
'
:
true
'
devtools
.
jsonview
.
enabled
'
:
false
'
dom
.
disable_open_during_load
'
:
false
'
dom
.
file
.
createInChild
'
:
true
'
dom
.
ipc
.
reportProcessHangs
'
:
false
'
dom
.
max_chrome_script_run_time
'
:
0
'
dom
.
max_script_run_time
'
:
0
'
extensions
.
autoDisableScopes
'
:
0
'
extensions
.
enabledScopes
'
:
5
'
extensions
.
getAddons
.
cache
.
enabled
'
:
false
'
extensions
.
installDistroAddons
'
:
false
'
extensions
.
screenshots
.
disabled
'
:
true
'
extensions
.
update
.
enabled
'
:
false
'
extensions
.
update
.
notifyUser
'
:
false
'
extensions
.
webservice
.
discoverURL
'
:
http
:
/
/
{
server
}
/
dummy
/
discoveryURL
'
fission
.
bfcacheInParent
'
:
false
'
fission
.
webContentIsolationStrategy
'
:
0
'
focusmanager
.
testmode
'
:
true
'
general
.
useragent
.
updates
.
enabled
'
:
false
'
geo
.
provider
.
testing
'
:
true
'
geo
.
wifi
.
scan
'
:
false
'
hangmonitor
.
timeout
'
:
0
'
javascript
.
options
.
showInConsole
'
:
true
'
media
.
gmp
-
manager
.
updateEnabled
'
:
false
'
network
.
cookie
.
cookieBehavior
'
:
0
'
network
.
cookie
.
sameSite
.
laxByDefault
'
:
false
'
network
.
http
.
prompt
-
temp
-
redirect
'
:
false
'
network
.
http
.
speculative
-
parallel
-
limit
'
:
0
'
network
.
manage
-
offline
-
status
'
:
false
'
network
.
sntp
.
pools
'
:
server
'
plugin
.
state
.
flash
'
:
0
'
privacy
.
trackingprotection
.
enabled
'
:
false
'
remote
.
enabled
'
:
true
'
security
.
certerrors
.
mitm
.
priming
.
enabled
'
:
false
'
security
.
fileuri
.
strict_origin_policy
'
:
false
'
security
.
notification_enable_delay
'
:
0
'
services
.
settings
.
server
'
:
http
:
/
/
{
server
}
/
dummy
/
blocklist
/
'
signon
.
autofillForms
'
:
false
'
signon
.
rememberSignons
'
:
false
'
startup
.
homepage_welcome_url
'
:
'
about
:
blank
'
'
startup
.
homepage_welcome_url
.
additional
'
:
'
'
'
toolkit
.
cosmeticAnimations
.
enabled
'
:
false
'
toolkit
.
startup
.
max_resumed_crashes
'
:
-
1
}
;
return
Object
.
assign
(
defaultPrefs
extraPrefs
)
;
}
async
writePreferences
(
prefs
profilePath
)
{
const
lines
=
Object
.
entries
(
prefs
)
.
map
(
(
[
key
value
]
)
=
>
{
return
user_pref
(
{
JSON
.
stringify
(
key
)
}
{
JSON
.
stringify
(
value
)
}
)
;
;
}
)
;
await
fs_1
.
default
.
promises
.
writeFile
(
path_1
.
default
.
join
(
profilePath
'
user
.
js
'
)
lines
.
join
(
'
\
n
'
)
)
;
const
prefsPath
=
path_1
.
default
.
join
(
profilePath
'
prefs
.
js
'
)
;
if
(
fs_1
.
default
.
existsSync
(
prefsPath
)
)
{
const
prefsBackupPath
=
path_1
.
default
.
join
(
profilePath
'
prefs
.
js
.
puppeteer
'
)
;
await
fs_1
.
default
.
promises
.
copyFile
(
prefsPath
prefsBackupPath
)
;
}
}
async
_createProfile
(
extraPrefs
)
{
const
temporaryProfilePath
=
await
fs_1
.
default
.
promises
.
mkdtemp
(
this
.
getProfilePath
(
)
)
;
const
prefs
=
this
.
defaultPreferences
(
extraPrefs
)
;
await
this
.
writePreferences
(
prefs
temporaryProfilePath
)
;
return
temporaryProfilePath
;
}
}
exports
.
FirefoxLauncher
=
FirefoxLauncher
;
