import
{
Protocol
}
from
'
devtools
-
protocol
'
;
import
{
EventEmitter
}
from
'
.
/
EventEmitter
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
CDPSession
}
from
'
.
/
Connection
.
js
'
;
export
interface
Credentials
{
username
:
string
;
password
:
string
;
}
export
interface
NetworkConditions
{
download
:
number
;
upload
:
number
;
latency
:
number
;
}
export
interface
InternalNetworkConditions
extends
NetworkConditions
{
offline
:
boolean
;
}
export
declare
const
NetworkManagerEmittedEvents
:
{
readonly
Request
:
symbol
;
readonly
RequestServedFromCache
:
symbol
;
readonly
Response
:
symbol
;
readonly
RequestFailed
:
symbol
;
readonly
RequestFinished
:
symbol
;
}
;
interface
FrameManager
{
frame
(
frameId
:
string
)
:
Frame
|
null
;
}
export
declare
class
NetworkManager
extends
EventEmitter
{
#
private
;
constructor
(
client
:
CDPSession
ignoreHTTPSErrors
:
boolean
frameManager
:
FrameManager
)
;
initialize
(
)
:
Promise
<
void
>
;
authenticate
(
credentials
?
:
Credentials
)
:
Promise
<
void
>
;
setExtraHTTPHeaders
(
extraHTTPHeaders
:
Record
<
string
string
>
)
:
Promise
<
void
>
;
extraHTTPHeaders
(
)
:
Record
<
string
string
>
;
numRequestsInProgress
(
)
:
number
;
setOfflineMode
(
value
:
boolean
)
:
Promise
<
void
>
;
emulateNetworkConditions
(
networkConditions
:
NetworkConditions
|
null
)
:
Promise
<
void
>
;
setUserAgent
(
userAgent
:
string
userAgentMetadata
?
:
Protocol
.
Emulation
.
UserAgentMetadata
)
:
Promise
<
void
>
;
setCacheEnabled
(
enabled
:
boolean
)
:
Promise
<
void
>
;
setRequestInterception
(
value
:
boolean
)
:
Promise
<
void
>
;
}
export
{
}
;
