import
PuppeteerUtil
from
'
.
.
/
injected
/
injected
.
js
'
;
import
{
ElementHandle
}
from
'
.
/
ElementHandle
.
js
'
;
import
{
Frame
}
from
'
.
/
Frame
.
js
'
;
import
{
WaitForSelectorOptions
}
from
'
.
/
IsolatedWorld
.
js
'
;
export
interface
CustomQueryHandler
{
queryOne
?
:
(
node
:
Node
selector
:
string
)
=
>
Node
|
null
;
queryAll
?
:
(
node
:
Node
selector
:
string
)
=
>
Node
[
]
;
}
export
interface
InternalQueryHandler
{
queryOne
?
:
(
node
:
Node
selector
:
string
PuppeteerUtil
:
PuppeteerUtil
)
=
>
Node
|
null
;
queryAll
?
:
(
node
:
Node
selector
:
string
PuppeteerUtil
:
PuppeteerUtil
)
=
>
Node
[
]
;
}
export
interface
PuppeteerQueryHandler
{
queryOne
?
:
(
element
:
ElementHandle
<
Node
>
selector
:
string
)
=
>
Promise
<
ElementHandle
<
Node
>
|
null
>
;
queryAll
?
:
(
element
:
ElementHandle
<
Node
>
selector
:
string
)
=
>
Promise
<
Array
<
ElementHandle
<
Node
>
>
>
;
waitFor
?
:
(
elementOrFrame
:
ElementHandle
<
Node
>
|
Frame
selector
:
string
options
:
WaitForSelectorOptions
)
=
>
Promise
<
ElementHandle
<
Node
>
|
null
>
;
}
export
declare
function
registerCustomQueryHandler
(
name
:
string
handler
:
CustomQueryHandler
)
:
void
;
export
declare
function
unregisterCustomQueryHandler
(
name
:
string
)
:
void
;
export
declare
function
customQueryHandlerNames
(
)
:
string
[
]
;
export
declare
function
clearCustomQueryHandlers
(
)
:
void
;
export
declare
function
getQueryHandlerAndSelector
(
selector
:
string
)
:
{
updatedSelector
:
string
;
queryHandler
:
PuppeteerQueryHandler
;
}
;
