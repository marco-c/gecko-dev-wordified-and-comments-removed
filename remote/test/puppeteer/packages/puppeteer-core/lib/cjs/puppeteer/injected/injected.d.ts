import
{
createDeferredPromise
}
from
'
.
.
/
util
/
DeferredPromise
.
js
'
;
import
{
RAFPoller
MutationPoller
IntervalPoller
}
from
'
.
/
Poller
.
js
'
;
declare
const
PuppeteerUtil
:
Readonly
<
{
createDeferredPromise
:
typeof
createDeferredPromise
;
createTextContent
:
(
root
:
Node
)
=
>
import
(
"
.
/
TextContent
.
js
"
)
.
TextContent
;
IntervalPoller
:
typeof
IntervalPoller
;
isSuitableNodeForTextMatching
:
(
node
:
Node
)
=
>
boolean
;
MutationPoller
:
typeof
MutationPoller
;
RAFPoller
:
typeof
RAFPoller
;
pierceQuerySelector
:
(
root
:
Node
selector
:
string
)
=
>
Element
|
null
;
pierceQuerySelectorAll
:
(
element
:
Node
selector
:
string
)
=
>
Element
[
]
;
xpathQuerySelector
:
(
root
:
Node
selector
:
string
)
=
>
Node
|
null
;
xpathQuerySelectorAll
:
(
root
:
Node
selector
:
string
)
=
>
Node
[
]
;
textQuerySelector
:
(
root
:
Node
selector
:
string
)
=
>
Element
|
null
;
textQuerySelectorAll
:
(
root
:
Node
selector
:
string
)
=
>
Element
[
]
;
createFunction
:
(
functionValue
:
string
)
=
>
(
.
.
.
args
:
unknown
[
]
)
=
>
unknown
;
checkVisibility
:
(
node
:
Node
|
null
visible
?
:
boolean
|
undefined
)
=
>
boolean
|
Node
;
}
>
;
type
PuppeteerUtil
=
typeof
PuppeteerUtil
;
export
default
PuppeteerUtil
;
