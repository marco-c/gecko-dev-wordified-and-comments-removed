"
use
strict
"
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
textQuerySelectorAll
=
exports
.
textQuerySelector
=
void
0
;
const
TextContent_js_1
=
require
(
"
.
/
TextContent
.
js
"
)
;
const
textQuerySelector
=
(
root
selector
)
=
>
{
for
(
const
node
of
root
.
childNodes
)
{
if
(
node
instanceof
Element
&
&
(
0
TextContent_js_1
.
isSuitableNodeForTextMatching
)
(
node
)
)
{
let
matchedNode
;
if
(
node
.
shadowRoot
)
{
matchedNode
=
(
0
exports
.
textQuerySelector
)
(
node
.
shadowRoot
selector
)
;
}
else
{
matchedNode
=
(
0
exports
.
textQuerySelector
)
(
node
selector
)
;
}
if
(
matchedNode
)
{
return
matchedNode
;
}
}
}
if
(
root
instanceof
Element
)
{
const
textContent
=
(
0
TextContent_js_1
.
createTextContent
)
(
root
)
;
if
(
textContent
.
full
.
includes
(
selector
)
)
{
return
root
;
}
}
return
null
;
}
;
exports
.
textQuerySelector
=
textQuerySelector
;
const
textQuerySelectorAll
=
(
root
selector
)
=
>
{
let
results
=
[
]
;
for
(
const
node
of
root
.
childNodes
)
{
if
(
node
instanceof
Element
)
{
let
matchedNodes
;
if
(
node
.
shadowRoot
)
{
matchedNodes
=
(
0
exports
.
textQuerySelectorAll
)
(
node
.
shadowRoot
selector
)
;
}
else
{
matchedNodes
=
(
0
exports
.
textQuerySelectorAll
)
(
node
selector
)
;
}
results
=
results
.
concat
(
matchedNodes
)
;
}
}
if
(
results
.
length
>
0
)
{
return
results
;
}
if
(
root
instanceof
Element
)
{
const
textContent
=
(
0
TextContent_js_1
.
createTextContent
)
(
root
)
;
if
(
textContent
.
full
.
includes
(
selector
)
)
{
return
[
root
]
;
}
}
return
[
]
;
}
;
exports
.
textQuerySelectorAll
=
textQuerySelectorAll
;
