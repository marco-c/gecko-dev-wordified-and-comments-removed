"
use
strict
"
;
var
__classPrivateFieldGet
=
(
this
&
&
this
.
__classPrivateFieldGet
)
|
|
function
(
receiver
state
kind
f
)
{
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
getter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
read
private
member
from
an
object
whose
class
did
not
declare
it
"
)
;
return
kind
=
=
=
"
m
"
?
f
:
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
)
:
f
?
f
.
value
:
state
.
get
(
receiver
)
;
}
;
var
__classPrivateFieldSet
=
(
this
&
&
this
.
__classPrivateFieldSet
)
|
|
function
(
receiver
state
value
kind
f
)
{
if
(
kind
=
=
=
"
m
"
)
throw
new
TypeError
(
"
Private
method
is
not
writable
"
)
;
if
(
kind
=
=
=
"
a
"
&
&
!
f
)
throw
new
TypeError
(
"
Private
accessor
was
defined
without
a
setter
"
)
;
if
(
typeof
state
=
=
=
"
function
"
?
receiver
!
=
=
state
|
|
!
f
:
!
state
.
has
(
receiver
)
)
throw
new
TypeError
(
"
Cannot
write
private
member
to
an
object
whose
class
did
not
declare
it
"
)
;
return
(
kind
=
=
=
"
a
"
?
f
.
call
(
receiver
value
)
:
f
?
f
.
value
=
value
:
state
.
set
(
receiver
value
)
)
value
;
}
;
var
_JSHandle_disposed
_JSHandle_context
_JSHandle_remoteObject
;
Object
.
defineProperty
(
exports
"
__esModule
"
{
value
:
true
}
)
;
exports
.
JSHandle
=
void
0
;
const
assert_js_1
=
require
(
"
.
.
/
util
/
assert
.
js
"
)
;
const
util_js_1
=
require
(
"
.
/
util
.
js
"
)
;
class
JSHandle
{
get
client
(
)
{
return
__classPrivateFieldGet
(
this
_JSHandle_context
"
f
"
)
.
_client
;
}
get
disposed
(
)
{
return
__classPrivateFieldGet
(
this
_JSHandle_disposed
"
f
"
)
;
}
constructor
(
context
remoteObject
)
{
_JSHandle_disposed
.
set
(
this
false
)
;
_JSHandle_context
.
set
(
this
void
0
)
;
_JSHandle_remoteObject
.
set
(
this
void
0
)
;
__classPrivateFieldSet
(
this
_JSHandle_context
context
"
f
"
)
;
__classPrivateFieldSet
(
this
_JSHandle_remoteObject
remoteObject
"
f
"
)
;
}
executionContext
(
)
{
return
__classPrivateFieldGet
(
this
_JSHandle_context
"
f
"
)
;
}
async
evaluate
(
pageFunction
.
.
.
args
)
{
return
await
this
.
executionContext
(
)
.
evaluate
(
pageFunction
this
.
.
.
args
)
;
}
async
evaluateHandle
(
pageFunction
.
.
.
args
)
{
return
await
this
.
executionContext
(
)
.
evaluateHandle
(
pageFunction
this
.
.
.
args
)
;
}
async
getProperty
(
propertyName
)
{
return
this
.
evaluateHandle
(
(
object
propertyName
)
=
>
{
return
object
[
propertyName
]
;
}
propertyName
)
;
}
async
getProperties
(
)
{
(
0
assert_js_1
.
assert
)
(
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
objectId
)
;
const
response
=
await
this
.
client
.
send
(
'
Runtime
.
getProperties
'
{
objectId
:
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
objectId
ownProperties
:
true
}
)
;
const
result
=
new
Map
(
)
;
for
(
const
property
of
response
.
result
)
{
if
(
!
property
.
enumerable
|
|
!
property
.
value
)
{
continue
;
}
result
.
set
(
property
.
name
(
0
util_js_1
.
createJSHandle
)
(
__classPrivateFieldGet
(
this
_JSHandle_context
"
f
"
)
property
.
value
)
)
;
}
return
result
;
}
async
jsonValue
(
)
{
if
(
!
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
objectId
)
{
return
(
0
util_js_1
.
valueFromRemoteObject
)
(
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
)
;
}
const
value
=
await
this
.
evaluate
(
object
=
>
{
return
object
;
}
)
;
if
(
value
=
=
=
undefined
)
{
throw
new
Error
(
'
Could
not
serialize
referenced
object
'
)
;
}
return
value
;
}
asElement
(
)
{
return
null
;
}
async
dispose
(
)
{
if
(
__classPrivateFieldGet
(
this
_JSHandle_disposed
"
f
"
)
)
{
return
;
}
__classPrivateFieldSet
(
this
_JSHandle_disposed
true
"
f
"
)
;
await
(
0
util_js_1
.
releaseObject
)
(
this
.
client
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
)
;
}
toString
(
)
{
if
(
!
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
objectId
)
{
return
'
JSHandle
:
'
+
(
0
util_js_1
.
valueFromRemoteObject
)
(
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
)
;
}
const
type
=
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
subtype
|
|
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
.
type
;
return
'
JSHandle
'
+
type
;
}
remoteObject
(
)
{
return
__classPrivateFieldGet
(
this
_JSHandle_remoteObject
"
f
"
)
;
}
}
exports
.
JSHandle
=
JSHandle
;
_JSHandle_disposed
=
new
WeakMap
(
)
_JSHandle_context
=
new
WeakMap
(
)
_JSHandle_remoteObject
=
new
WeakMap
(
)
;
