import
assert
from
'
assert
'
;
import
path
from
'
path
'
;
import
{
BrowserPlatform
}
from
'
.
.
/
.
.
/
lib
/
cjs
/
browsers
/
browsers
.
js
'
;
import
{
relativeExecutablePath
resolveDownloadUrl
}
from
'
.
.
/
.
.
/
lib
/
cjs
/
browsers
/
firefox
.
js
'
;
describe
(
'
Firefox
'
(
)
=
>
{
it
(
'
should
resolve
download
URLs
'
(
)
=
>
{
assert
.
strictEqual
(
resolveDownloadUrl
(
BrowserPlatform
.
LINUX
'
111
.
0a1
'
)
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
/
firefox
-
111
.
0a1
.
en
-
US
.
linux
-
x86_64
.
tar
.
bz2
'
)
;
assert
.
strictEqual
(
resolveDownloadUrl
(
BrowserPlatform
.
MAC
'
111
.
0a1
'
)
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
/
firefox
-
111
.
0a1
.
en
-
US
.
mac
.
dmg
'
)
;
assert
.
strictEqual
(
resolveDownloadUrl
(
BrowserPlatform
.
MAC_ARM
'
111
.
0a1
'
)
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
/
firefox
-
111
.
0a1
.
en
-
US
.
mac
.
dmg
'
)
;
assert
.
strictEqual
(
resolveDownloadUrl
(
BrowserPlatform
.
WIN32
'
111
.
0a1
'
)
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
/
firefox
-
111
.
0a1
.
en
-
US
.
win32
.
zip
'
)
;
assert
.
strictEqual
(
resolveDownloadUrl
(
BrowserPlatform
.
WIN64
'
111
.
0a1
'
)
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
/
firefox
-
111
.
0a1
.
en
-
US
.
win64
.
zip
'
)
;
}
)
;
it
(
'
should
resolve
executable
paths
'
(
)
=
>
{
assert
.
strictEqual
(
relativeExecutablePath
(
BrowserPlatform
.
LINUX
'
111
.
0a1
'
)
path
.
join
(
'
firefox
'
'
firefox
'
)
)
;
assert
.
strictEqual
(
relativeExecutablePath
(
BrowserPlatform
.
MAC
'
111
.
0a1
'
)
path
.
join
(
'
Firefox
Nightly
.
app
'
'
Contents
'
'
MacOS
'
'
firefox
'
)
)
;
assert
.
strictEqual
(
relativeExecutablePath
(
BrowserPlatform
.
MAC_ARM
'
111
.
0a1
'
)
path
.
join
(
'
Firefox
Nightly
.
app
'
'
Contents
'
'
MacOS
'
'
firefox
'
)
)
;
assert
.
strictEqual
(
relativeExecutablePath
(
BrowserPlatform
.
WIN32
'
111
.
0a1
'
)
path
.
join
(
'
firefox
'
'
firefox
.
exe
'
)
)
;
assert
.
strictEqual
(
relativeExecutablePath
(
BrowserPlatform
.
WIN64
'
111
.
0a1
'
)
path
.
join
(
'
firefox
'
'
firefox
.
exe
'
)
)
;
}
)
;
}
)
;
