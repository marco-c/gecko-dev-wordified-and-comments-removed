import
*
as
chrome
from
'
.
/
chrome
.
js
'
;
import
*
as
chromedriver
from
'
.
/
chromedriver
.
js
'
;
import
*
as
chromium
from
'
.
/
chromium
.
js
'
;
import
*
as
firefox
from
'
.
/
firefox
.
js
'
;
import
{
Browser
BrowserPlatform
BrowserTag
ChromeReleaseChannel
ProfileOptions
}
from
'
.
/
types
.
js
'
;
export
{
ProfileOptions
}
;
export
const
downloadUrls
=
{
[
Browser
.
CHROMEDRIVER
]
:
chromedriver
.
resolveDownloadUrl
[
Browser
.
CHROME
]
:
chrome
.
resolveDownloadUrl
[
Browser
.
CHROMIUM
]
:
chromium
.
resolveDownloadUrl
[
Browser
.
FIREFOX
]
:
firefox
.
resolveDownloadUrl
}
;
export
const
downloadPaths
=
{
[
Browser
.
CHROMEDRIVER
]
:
chromedriver
.
resolveDownloadPath
[
Browser
.
CHROME
]
:
chrome
.
resolveDownloadPath
[
Browser
.
CHROMIUM
]
:
chromium
.
resolveDownloadPath
[
Browser
.
FIREFOX
]
:
firefox
.
resolveDownloadPath
}
;
export
const
executablePathByBrowser
=
{
[
Browser
.
CHROMEDRIVER
]
:
chromedriver
.
relativeExecutablePath
[
Browser
.
CHROME
]
:
chrome
.
relativeExecutablePath
[
Browser
.
CHROMIUM
]
:
chromium
.
relativeExecutablePath
[
Browser
.
FIREFOX
]
:
firefox
.
relativeExecutablePath
}
;
export
{
Browser
BrowserPlatform
ChromeReleaseChannel
}
;
export
async
function
resolveBuildId
(
browser
:
Browser
platform
:
BrowserPlatform
tag
:
string
)
:
Promise
<
string
>
{
switch
(
browser
)
{
case
Browser
.
FIREFOX
:
switch
(
tag
as
BrowserTag
)
{
case
BrowserTag
.
LATEST
:
return
await
firefox
.
resolveBuildId
(
'
FIREFOX_NIGHTLY
'
)
;
}
case
Browser
.
CHROME
:
switch
(
tag
as
BrowserTag
)
{
case
BrowserTag
.
LATEST
:
return
await
chrome
.
resolveBuildId
(
platform
'
beta
'
)
;
}
case
Browser
.
CHROMEDRIVER
:
switch
(
tag
as
BrowserTag
)
{
case
BrowserTag
.
LATEST
:
return
await
chromedriver
.
resolveBuildId
(
'
latest
'
)
;
}
case
Browser
.
CHROMIUM
:
switch
(
tag
as
BrowserTag
)
{
case
BrowserTag
.
LATEST
:
return
await
chromium
.
resolveBuildId
(
platform
'
latest
'
)
;
}
}
return
tag
;
}
export
async
function
createProfile
(
browser
:
Browser
opts
:
ProfileOptions
)
:
Promise
<
void
>
{
switch
(
browser
)
{
case
Browser
.
FIREFOX
:
return
await
firefox
.
createProfile
(
opts
)
;
case
Browser
.
CHROME
:
case
Browser
.
CHROMIUM
:
throw
new
Error
(
Profile
creation
is
not
support
for
{
browser
}
yet
)
;
}
}
export
function
resolveSystemExecutablePath
(
browser
:
Browser
platform
:
BrowserPlatform
channel
:
ChromeReleaseChannel
)
:
string
{
switch
(
browser
)
{
case
Browser
.
CHROMEDRIVER
:
case
Browser
.
FIREFOX
:
throw
new
Error
(
System
browser
detection
is
not
supported
for
{
browser
}
yet
.
)
;
case
Browser
.
CHROME
:
return
chromium
.
resolveSystemExecutablePath
(
platform
channel
)
;
case
Browser
.
CHROMIUM
:
return
chrome
.
resolveSystemExecutablePath
(
platform
channel
)
;
}
}
