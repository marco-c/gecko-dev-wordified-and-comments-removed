import
fs
from
'
fs
'
;
import
path
from
'
path
'
;
import
{
httpRequest
}
from
'
.
.
/
httpUtil
.
js
'
;
import
{
BrowserPlatform
ProfileOptions
}
from
'
.
/
types
.
js
'
;
function
archive
(
platform
:
BrowserPlatform
buildId
:
string
)
:
string
{
switch
(
platform
)
{
case
BrowserPlatform
.
LINUX
:
return
firefox
-
{
buildId
}
.
en
-
US
.
{
platform
}
-
x86_64
.
tar
.
bz2
;
case
BrowserPlatform
.
MAC_ARM
:
case
BrowserPlatform
.
MAC
:
return
firefox
-
{
buildId
}
.
en
-
US
.
mac
.
dmg
;
case
BrowserPlatform
.
WIN32
:
case
BrowserPlatform
.
WIN64
:
return
firefox
-
{
buildId
}
.
en
-
US
.
{
platform
}
.
zip
;
}
}
export
function
resolveDownloadUrl
(
platform
:
BrowserPlatform
buildId
:
string
baseUrl
=
'
https
:
/
/
archive
.
mozilla
.
org
/
pub
/
firefox
/
nightly
/
latest
-
mozilla
-
central
'
)
:
string
{
return
{
baseUrl
}
/
{
resolveDownloadPath
(
platform
buildId
)
.
join
(
'
/
'
)
}
;
}
export
function
resolveDownloadPath
(
platform
:
BrowserPlatform
buildId
:
string
)
:
string
[
]
{
return
[
archive
(
platform
buildId
)
]
;
}
export
function
relativeExecutablePath
(
platform
:
BrowserPlatform
_buildId
:
string
)
:
string
{
switch
(
platform
)
{
case
BrowserPlatform
.
MAC_ARM
:
case
BrowserPlatform
.
MAC
:
return
path
.
join
(
'
Firefox
Nightly
.
app
'
'
Contents
'
'
MacOS
'
'
firefox
'
)
;
case
BrowserPlatform
.
LINUX
:
return
path
.
join
(
'
firefox
'
'
firefox
'
)
;
case
BrowserPlatform
.
WIN32
:
case
BrowserPlatform
.
WIN64
:
return
path
.
join
(
'
firefox
'
'
firefox
.
exe
'
)
;
}
}
export
async
function
resolveBuildId
(
channel
:
'
FIREFOX_NIGHTLY
'
=
'
FIREFOX_NIGHTLY
'
)
:
Promise
<
string
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
request
=
httpRequest
(
new
URL
(
'
https
:
/
/
product
-
details
.
mozilla
.
org
/
1
.
0
/
firefox_versions
.
json
'
)
'
GET
'
response
=
>
{
let
data
=
'
'
;
if
(
response
.
statusCode
&
&
response
.
statusCode
>
=
400
)
{
return
reject
(
new
Error
(
Got
status
code
{
response
.
statusCode
}
)
)
;
}
response
.
on
(
'
data
'
chunk
=
>
{
data
+
=
chunk
;
}
)
;
response
.
on
(
'
end
'
(
)
=
>
{
try
{
const
versions
=
JSON
.
parse
(
data
)
;
return
resolve
(
versions
[
channel
]
)
;
}
catch
{
return
reject
(
new
Error
(
'
Firefox
version
not
found
'
)
)
;
}
}
)
;
}
false
)
;
request
.
on
(
'
error
'
err
=
>
{
reject
(
err
)
;
}
)
;
}
)
;
}
export
async
function
createProfile
(
options
:
ProfileOptions
)
:
Promise
<
void
>
{
if
(
!
fs
.
existsSync
(
options
.
path
)
)
{
await
fs
.
promises
.
mkdir
(
options
.
path
{
recursive
:
true
}
)
;
}
await
writePreferences
(
{
preferences
:
{
.
.
.
defaultProfilePreferences
(
options
.
preferences
)
.
.
.
options
.
preferences
}
path
:
options
.
path
}
)
;
}
function
defaultProfilePreferences
(
extraPrefs
:
Record
<
string
unknown
>
)
:
Record
<
string
unknown
>
{
const
server
=
'
dummy
.
test
'
;
const
defaultPrefs
=
{
'
app
.
normandy
.
api_url
'
:
'
'
'
app
.
update
.
checkInstallTime
'
:
false
'
app
.
update
.
disabledForTesting
'
:
true
'
apz
.
content_response_timeout
'
:
60000
'
browser
.
contentblocking
.
features
.
standard
'
:
'
-
tp
tpPrivate
cookieBehavior0
-
cm
-
fp
'
'
browser
.
dom
.
window
.
dump
.
enabled
'
:
true
'
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topstories
'
:
false
'
browser
.
newtabpage
.
enabled
'
:
false
'
browser
.
pagethumbnails
.
capturing_disabled
'
:
true
'
browser
.
safebrowsing
.
blockedURIs
.
enabled
'
:
false
'
browser
.
safebrowsing
.
downloads
.
enabled
'
:
false
'
browser
.
safebrowsing
.
malware
.
enabled
'
:
false
'
browser
.
safebrowsing
.
passwords
.
enabled
'
:
false
'
browser
.
safebrowsing
.
phishing
.
enabled
'
:
false
'
browser
.
search
.
update
'
:
false
'
browser
.
sessionstore
.
resume_from_crash
'
:
false
'
browser
.
shell
.
checkDefaultBrowser
'
:
false
'
browser
.
startup
.
homepage
'
:
'
about
:
blank
'
'
browser
.
startup
.
homepage_override
.
mstone
'
:
'
ignore
'
'
browser
.
startup
.
page
'
:
0
'
browser
.
tabs
.
disableBackgroundZombification
'
:
false
'
browser
.
tabs
.
warnOnCloseOtherTabs
'
:
false
'
browser
.
tabs
.
warnOnOpen
'
:
false
'
browser
.
uitour
.
enabled
'
:
false
'
browser
.
urlbar
.
suggest
.
searches
'
:
false
'
browser
.
usedOnWindows10
.
introURL
'
:
'
'
'
browser
.
warnOnQuit
'
:
false
'
datareporting
.
healthreport
.
documentServerURI
'
:
http
:
/
/
{
server
}
/
dummy
/
healthreport
/
'
datareporting
.
healthreport
.
logging
.
consoleEnabled
'
:
false
'
datareporting
.
healthreport
.
service
.
enabled
'
:
false
'
datareporting
.
healthreport
.
service
.
firstRun
'
:
false
'
datareporting
.
healthreport
.
uploadEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionPolicyBypassNotification
'
:
true
'
devtools
.
jsonview
.
enabled
'
:
false
'
dom
.
disable_open_during_load
'
:
false
'
dom
.
file
.
createInChild
'
:
true
'
dom
.
ipc
.
reportProcessHangs
'
:
false
'
dom
.
max_chrome_script_run_time
'
:
0
'
dom
.
max_script_run_time
'
:
0
'
extensions
.
autoDisableScopes
'
:
0
'
extensions
.
enabledScopes
'
:
5
'
extensions
.
getAddons
.
cache
.
enabled
'
:
false
'
extensions
.
installDistroAddons
'
:
false
'
extensions
.
screenshots
.
disabled
'
:
true
'
extensions
.
update
.
enabled
'
:
false
'
extensions
.
update
.
notifyUser
'
:
false
'
extensions
.
webservice
.
discoverURL
'
:
http
:
/
/
{
server
}
/
dummy
/
discoveryURL
'
fission
.
bfcacheInParent
'
:
false
'
fission
.
webContentIsolationStrategy
'
:
0
'
focusmanager
.
testmode
'
:
true
'
general
.
useragent
.
updates
.
enabled
'
:
false
'
geo
.
provider
.
testing
'
:
true
'
geo
.
wifi
.
scan
'
:
false
'
hangmonitor
.
timeout
'
:
0
'
javascript
.
options
.
showInConsole
'
:
true
'
media
.
gmp
-
manager
.
updateEnabled
'
:
false
'
network
.
cookie
.
cookieBehavior
'
:
0
'
network
.
cookie
.
sameSite
.
laxByDefault
'
:
false
'
network
.
http
.
prompt
-
temp
-
redirect
'
:
false
'
network
.
http
.
speculative
-
parallel
-
limit
'
:
0
'
network
.
manage
-
offline
-
status
'
:
false
'
network
.
sntp
.
pools
'
:
server
'
plugin
.
state
.
flash
'
:
0
'
privacy
.
trackingprotection
.
enabled
'
:
false
'
remote
.
enabled
'
:
true
'
security
.
certerrors
.
mitm
.
priming
.
enabled
'
:
false
'
security
.
fileuri
.
strict_origin_policy
'
:
false
'
security
.
notification_enable_delay
'
:
0
'
services
.
settings
.
server
'
:
http
:
/
/
{
server
}
/
dummy
/
blocklist
/
'
signon
.
autofillForms
'
:
false
'
signon
.
rememberSignons
'
:
false
'
startup
.
homepage_welcome_url
'
:
'
about
:
blank
'
'
startup
.
homepage_welcome_url
.
additional
'
:
'
'
'
toolkit
.
cosmeticAnimations
.
enabled
'
:
false
'
toolkit
.
startup
.
max_resumed_crashes
'
:
-
1
}
;
return
Object
.
assign
(
defaultPrefs
extraPrefs
)
;
}
async
function
writePreferences
(
options
:
ProfileOptions
)
:
Promise
<
void
>
{
const
lines
=
Object
.
entries
(
options
.
preferences
)
.
map
(
(
[
key
value
]
)
=
>
{
return
user_pref
(
{
JSON
.
stringify
(
key
)
}
{
JSON
.
stringify
(
value
)
}
)
;
;
}
)
;
await
fs
.
promises
.
writeFile
(
path
.
join
(
options
.
path
'
user
.
js
'
)
lines
.
join
(
'
\
n
'
)
)
;
const
prefsPath
=
path
.
join
(
options
.
path
'
prefs
.
js
'
)
;
if
(
fs
.
existsSync
(
prefsPath
)
)
{
const
prefsBackupPath
=
path
.
join
(
options
.
path
'
prefs
.
js
.
puppeteer
'
)
;
await
fs
.
promises
.
copyFile
(
prefsPath
prefsBackupPath
)
;
}
}
