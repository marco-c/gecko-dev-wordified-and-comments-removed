const
path
=
require
(
'
path
'
)
;
const
fs
=
require
(
'
fs
'
)
;
function
traceAPICoverage
(
apiCoverage
events
className
classType
)
{
className
=
className
.
substring
(
0
1
)
.
toLowerCase
(
)
+
className
.
substring
(
1
)
;
for
(
const
methodName
of
Reflect
.
ownKeys
(
classType
.
prototype
)
)
{
const
method
=
Reflect
.
get
(
classType
.
prototype
methodName
)
;
if
(
methodName
=
=
=
'
constructor
'
|
|
typeof
methodName
!
=
=
'
string
'
|
|
methodName
.
startsWith
(
'
_
'
)
|
|
typeof
method
!
=
=
'
function
'
)
continue
;
apiCoverage
.
set
(
{
className
}
.
{
methodName
}
false
)
;
Reflect
.
set
(
classType
.
prototype
methodName
function
(
.
.
.
args
)
{
apiCoverage
.
set
(
{
className
}
.
{
methodName
}
true
)
;
return
method
.
call
(
this
.
.
.
args
)
;
}
)
;
}
if
(
events
[
classType
.
name
]
)
{
for
(
const
event
of
Object
.
values
(
events
[
classType
.
name
]
)
)
{
if
(
typeof
event
!
=
=
'
symbol
'
)
apiCoverage
.
set
(
{
className
}
.
emit
(
{
JSON
.
stringify
(
event
)
}
)
false
)
;
}
const
method
=
Reflect
.
get
(
classType
.
prototype
'
emit
'
)
;
Reflect
.
set
(
classType
.
prototype
'
emit
'
function
(
event
.
.
.
args
)
{
if
(
typeof
event
!
=
=
'
symbol
'
&
&
this
.
listenerCount
(
event
)
)
apiCoverage
.
set
(
{
className
}
.
emit
(
{
JSON
.
stringify
(
event
)
}
)
true
)
;
return
method
.
call
(
this
event
.
.
.
args
)
;
}
)
;
}
}
const
coverageLocation
=
path
.
join
(
__dirname
'
coverage
.
json
'
)
;
const
clearOldCoverage
=
(
)
=
>
{
try
{
fs
.
unlinkSync
(
coverageLocation
)
;
}
catch
(
error
)
{
}
}
;
const
writeCoverage
=
(
coverage
)
=
>
{
fs
.
writeFileSync
(
coverageLocation
JSON
.
stringify
(
[
.
.
.
coverage
.
entries
(
)
]
)
)
;
}
;
const
getCoverageResults
=
(
)
=
>
{
let
contents
;
try
{
contents
=
fs
.
readFileSync
(
coverageLocation
{
encoding
:
'
utf8
'
}
)
;
}
catch
(
error
)
{
console
.
error
(
'
Warning
:
coverage
file
does
not
exist
or
is
not
readable
.
'
)
;
}
const
coverageMap
=
new
Map
(
JSON
.
parse
(
contents
)
)
;
return
coverageMap
;
}
;
const
trackCoverage
=
(
)
=
>
{
clearOldCoverage
(
)
;
const
coverageMap
=
new
Map
(
)
;
before
(
(
)
=
>
{
const
api
=
require
(
'
.
.
/
lib
/
api
'
)
;
const
events
=
require
(
'
.
.
/
lib
/
Events
'
)
;
for
(
const
[
className
classType
]
of
Object
.
entries
(
api
)
)
traceAPICoverage
(
coverageMap
events
className
classType
)
;
}
)
;
after
(
(
)
=
>
{
writeCoverage
(
coverageMap
)
;
}
)
;
}
;
module
.
exports
=
{
trackCoverage
getCoverageResults
}
;
