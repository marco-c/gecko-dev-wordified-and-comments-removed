import
path
from
'
node
:
path
'
;
import
expect
from
'
expect
'
;
import
{
setupSeparateTestBrowserHooks
}
from
'
.
.
/
mocha
-
utils
.
js
'
;
const
extensionPath
=
path
.
join
(
__dirname
'
.
.
'
'
.
.
'
'
assets
'
'
simple
-
extension
'
)
;
describe
(
'
extensions
'
function
(
)
{
const
state
=
setupSeparateTestBrowserHooks
(
{
enableExtensions
:
true
args
:
[
-
-
load
-
extension
=
{
extensionPath
}
]
}
{
createContext
:
false
}
)
;
it
(
'
service_worker
target
type
should
be
available
'
async
function
(
)
{
const
{
browser
}
=
state
;
const
serviceWorkerTarget
=
await
browser
.
waitForTarget
(
target
=
>
{
return
target
.
type
(
)
=
=
=
'
service_worker
'
;
}
)
;
expect
(
serviceWorkerTarget
)
.
toBeTruthy
(
)
;
}
)
;
it
(
'
can
evaluate
in
the
service
worker
'
async
function
(
)
{
const
{
browser
}
=
state
;
const
serviceWorkerTarget
=
await
browser
.
waitForTarget
(
target
=
>
{
return
target
.
type
(
)
=
=
=
'
service_worker
'
;
}
)
;
const
worker
=
await
serviceWorkerTarget
.
worker
(
)
!
;
let
result
=
'
'
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
try
{
result
=
await
worker
!
.
evaluate
(
(
)
=
>
{
return
globalThis
.
MAGIC
;
}
)
;
break
;
}
catch
{
}
await
new
Promise
(
resolve
=
>
{
return
setTimeout
(
resolve
200
)
;
}
)
;
}
expect
(
result
)
.
toBe
(
42
)
;
}
)
;
}
)
;
