import
expect
from
'
expect
'
;
import
{
getTestState
setupTestBrowserHooks
}
from
'
.
.
/
mocha
-
utils
.
js
'
;
describe
(
'
page
.
queryObjects
'
function
(
)
{
setupTestBrowserHooks
(
)
;
it
(
'
should
work
'
async
(
)
=
>
{
const
{
page
}
=
await
getTestState
(
)
;
using
classHandle
=
await
page
.
evaluateHandle
(
(
)
=
>
{
return
class
CustomClass
{
}
;
}
)
;
await
page
.
evaluate
(
CustomClass
=
>
{
self
.
customClass
=
new
CustomClass
(
)
;
}
classHandle
)
;
using
prototypeHandle
=
await
page
.
evaluateHandle
(
CustomClass
=
>
{
return
CustomClass
.
prototype
;
}
classHandle
)
;
using
objectsHandle
=
await
page
.
queryObjects
(
prototypeHandle
)
;
await
expect
(
page
.
evaluate
(
objects
=
>
{
return
objects
.
length
;
}
objectsHandle
)
)
.
resolves
.
toBe
(
1
)
;
await
expect
(
page
.
evaluate
(
objects
=
>
{
return
objects
[
0
]
=
=
=
self
.
customClass
;
}
objectsHandle
)
)
.
resolves
.
toBeTruthy
(
)
;
}
)
;
it
(
'
should
work
for
non
-
trivial
page
'
async
(
)
=
>
{
const
{
page
server
}
=
await
getTestState
(
)
;
await
page
.
goto
(
server
.
EMPTY_PAGE
)
;
using
classHandle
=
await
page
.
evaluateHandle
(
(
)
=
>
{
return
class
CustomClass
{
}
;
}
)
;
await
page
.
evaluate
(
CustomClass
=
>
{
self
.
customClass
=
new
CustomClass
(
)
;
}
classHandle
)
;
using
prototypeHandle
=
await
page
.
evaluateHandle
(
CustomClass
=
>
{
return
CustomClass
.
prototype
;
}
classHandle
)
;
using
objectsHandle
=
await
page
.
queryObjects
(
prototypeHandle
)
;
await
expect
(
page
.
evaluate
(
objects
=
>
{
return
objects
.
length
;
}
objectsHandle
)
)
.
resolves
.
toBe
(
1
)
;
await
expect
(
page
.
evaluate
(
objects
=
>
{
return
objects
[
0
]
=
=
=
self
.
customClass
;
}
objectsHandle
)
)
.
resolves
.
toBeTruthy
(
)
;
}
)
;
it
(
'
should
fail
for
disposed
handles
'
async
(
)
=
>
{
const
{
page
}
=
await
getTestState
(
)
;
using
prototypeHandle
=
await
page
.
evaluateHandle
(
(
)
=
>
{
return
HTMLBodyElement
.
prototype
;
}
)
;
await
prototypeHandle
.
dispose
(
)
;
let
error
!
:
Error
;
await
page
.
queryObjects
(
prototypeHandle
)
.
catch
(
error_
=
>
{
return
(
error
=
error_
)
;
}
)
;
expect
(
error
.
message
)
.
toBe
(
'
Prototype
JSHandle
is
disposed
!
'
)
;
}
)
;
it
(
'
should
fail
primitive
values
as
prototypes
'
async
(
)
=
>
{
const
{
page
}
=
await
getTestState
(
)
;
using
prototypeHandle
=
await
page
.
evaluateHandle
(
(
)
=
>
{
return
42
;
}
)
;
let
error
!
:
Error
;
await
page
.
queryObjects
(
prototypeHandle
)
.
catch
(
error_
=
>
{
return
(
error
=
error_
)
;
}
)
;
expect
(
error
.
message
)
.
toBe
(
'
Prototype
JSHandle
must
not
be
referencing
primitive
value
'
)
;
}
)
;
}
)
;
