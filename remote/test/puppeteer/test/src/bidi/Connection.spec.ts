import
expect
from
'
expect
'
;
import
{
Connection
}
from
'
.
.
/
.
.
/
.
.
/
lib
/
cjs
/
puppeteer
/
common
/
bidi
/
Connection
.
js
'
;
import
{
ConnectionTransport
}
from
'
.
.
/
.
.
/
.
.
/
lib
/
cjs
/
puppeteer
/
common
/
ConnectionTransport
.
js
'
;
describe
(
'
WebDriver
BiDi
'
(
)
=
>
{
describe
(
'
Connection
'
(
)
=
>
{
class
TestConnectionTransport
implements
ConnectionTransport
{
sent
:
string
[
]
=
[
]
;
closed
=
false
;
send
(
message
:
string
)
{
this
.
sent
.
push
(
message
)
;
}
close
(
)
:
void
{
this
.
closed
=
true
;
}
}
it
(
'
should
work
'
async
(
)
=
>
{
const
transport
=
new
TestConnectionTransport
(
)
;
const
connection
=
new
Connection
(
transport
)
;
const
responsePromise
=
connection
.
send
(
'
session
.
status
'
{
context
:
'
context
'
}
)
;
expect
(
transport
.
sent
)
.
toEqual
(
[
{
"
id
"
:
1
"
method
"
:
"
session
.
status
"
"
params
"
:
{
"
context
"
:
"
context
"
}
}
]
)
;
const
id
=
JSON
.
parse
(
transport
.
sent
[
0
]
!
)
.
id
;
const
rawResponse
=
{
id
result
:
{
ready
:
false
message
:
'
already
connected
'
}
}
;
(
transport
as
ConnectionTransport
)
.
onmessage
?
.
(
JSON
.
stringify
(
rawResponse
)
)
;
const
response
=
await
responsePromise
;
expect
(
response
)
.
toEqual
(
rawResponse
.
result
)
;
connection
.
dispose
(
)
;
expect
(
transport
.
closed
)
.
toBeTruthy
(
)
;
}
)
;
}
)
;
}
)
;
