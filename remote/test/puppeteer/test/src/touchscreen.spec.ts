import
expect
from
'
expect
'
;
import
{
KnownDevices
BoundingBox
}
from
'
puppeteer
'
;
import
{
getTestState
setupTestBrowserHooks
setupTestPageAndContextHooks
}
from
'
.
/
mocha
-
utils
.
js
'
;
describe
(
'
Touchscreen
'
function
(
)
{
setupTestBrowserHooks
(
)
;
setupTestPageAndContextHooks
(
)
;
it
(
'
should
tap
the
button
'
async
(
)
=
>
{
const
{
page
server
}
=
getTestState
(
)
;
const
iPhone
=
KnownDevices
[
'
iPhone
6
'
]
!
;
await
page
.
emulate
(
iPhone
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
input
/
button
.
html
'
)
;
await
page
.
tap
(
'
button
'
)
;
expect
(
await
page
.
evaluate
(
(
)
=
>
{
return
(
globalThis
as
any
)
.
result
;
}
)
)
.
toBe
(
'
Clicked
'
)
;
}
)
;
it
(
'
should
report
touches
'
async
(
)
=
>
{
const
{
page
server
}
=
getTestState
(
)
;
const
iPhone
=
KnownDevices
[
'
iPhone
6
'
]
!
;
await
page
.
emulate
(
iPhone
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
input
/
touches
.
html
'
)
;
const
button
=
(
await
page
.
(
'
button
'
)
)
!
;
await
button
.
tap
(
)
;
expect
(
await
page
.
evaluate
(
(
)
=
>
{
return
(
globalThis
as
any
)
.
getResult
(
)
;
}
)
)
.
toEqual
(
[
'
Touchstart
:
0
'
'
Touchend
:
0
'
]
)
;
}
)
;
it
(
'
should
report
touchMove
'
async
(
)
=
>
{
const
{
page
server
}
=
getTestState
(
)
;
const
iPhone
=
KnownDevices
[
'
iPhone
6
'
]
!
;
await
page
.
emulate
(
iPhone
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
input
/
touches
-
move
.
html
'
)
;
const
touch
=
(
await
page
.
(
'
#
touch
'
)
)
!
;
const
touchObj
=
(
await
touch
.
boundingBox
(
)
)
as
BoundingBox
;
await
page
.
touchscreen
.
touchStart
(
touchObj
.
x
touchObj
.
y
)
;
const
movePosx
=
100
;
const
movePosy
=
100
;
await
page
.
touchscreen
.
touchMove
(
movePosx
movePosy
)
;
await
page
.
touchscreen
.
touchEnd
(
)
;
expect
(
await
page
.
evaluate
(
(
)
=
>
{
return
(
globalThis
as
any
)
.
touchX
;
}
)
)
.
toBe
(
movePosx
)
;
expect
(
await
page
.
evaluate
(
(
)
=
>
{
return
(
globalThis
as
any
)
.
touchY
;
}
)
)
.
toBe
(
movePosy
)
;
}
)
;
}
)
;
