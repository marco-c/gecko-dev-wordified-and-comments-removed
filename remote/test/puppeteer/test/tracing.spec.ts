import
fs
from
'
fs
'
;
import
path
from
'
path
'
;
import
expect
from
'
expect
'
;
import
{
getTestState
describeChromeOnly
}
from
'
.
/
mocha
-
utils
'
;
describeChromeOnly
(
'
Tracing
'
function
(
)
{
let
outputFile
;
let
browser
;
let
page
;
beforeEach
(
async
(
)
=
>
{
const
{
defaultBrowserOptions
puppeteer
}
=
getTestState
(
)
;
browser
=
await
puppeteer
.
launch
(
defaultBrowserOptions
)
;
page
=
await
browser
.
newPage
(
)
;
outputFile
=
path
.
join
(
__dirname
'
assets
'
'
trace
.
json
'
)
;
}
)
;
afterEach
(
async
(
)
=
>
{
await
browser
.
close
(
)
;
browser
=
null
;
page
=
null
;
if
(
fs
.
existsSync
(
outputFile
)
)
{
fs
.
unlinkSync
(
outputFile
)
;
outputFile
=
null
;
}
}
)
;
it
(
'
should
output
a
trace
'
async
(
)
=
>
{
const
{
server
}
=
getTestState
(
)
;
await
page
.
tracing
.
start
(
{
screenshots
:
true
path
:
outputFile
}
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
grid
.
html
'
)
;
await
page
.
tracing
.
stop
(
)
;
expect
(
fs
.
existsSync
(
outputFile
)
)
.
toBe
(
true
)
;
}
)
;
it
(
'
should
run
with
custom
categories
if
provided
'
async
(
)
=
>
{
await
page
.
tracing
.
start
(
{
path
:
outputFile
categories
:
[
'
-
*
'
'
disabled
-
by
-
default
-
devtools
.
timeline
.
frame
'
]
}
)
;
await
page
.
tracing
.
stop
(
)
;
const
traceJson
=
JSON
.
parse
(
fs
.
readFileSync
(
outputFile
{
encoding
:
'
utf8
'
}
)
)
;
const
traceConfig
=
JSON
.
parse
(
traceJson
.
metadata
[
'
trace
-
config
'
]
)
;
expect
(
traceConfig
.
included_categories
)
.
toEqual
(
[
'
disabled
-
by
-
default
-
devtools
.
timeline
.
frame
'
]
)
;
expect
(
traceConfig
.
excluded_categories
)
.
toEqual
(
[
'
*
'
]
)
;
expect
(
traceJson
.
traceEvents
)
.
not
.
toContainEqual
(
expect
.
objectContaining
(
{
cat
:
'
toplevel
'
}
)
)
;
}
)
;
it
(
'
should
run
with
default
categories
'
async
(
)
=
>
{
await
page
.
tracing
.
start
(
{
path
:
outputFile
}
)
;
await
page
.
tracing
.
stop
(
)
;
const
traceJson
=
JSON
.
parse
(
fs
.
readFileSync
(
outputFile
{
encoding
:
'
utf8
'
}
)
)
;
expect
(
traceJson
.
traceEvents
)
.
toContainEqual
(
expect
.
objectContaining
(
{
cat
:
'
toplevel
'
}
)
)
;
}
)
;
it
(
'
should
throw
if
tracing
on
two
pages
'
async
(
)
=
>
{
await
page
.
tracing
.
start
(
{
path
:
outputFile
}
)
;
const
newPage
=
await
browser
.
newPage
(
)
;
let
error
=
null
;
await
newPage
.
tracing
.
start
(
{
path
:
outputFile
}
)
.
catch
(
(
error_
)
=
>
(
error
=
error_
)
)
;
await
newPage
.
close
(
)
;
expect
(
error
)
.
toBeTruthy
(
)
;
await
page
.
tracing
.
stop
(
)
;
}
)
;
it
(
'
should
return
a
buffer
'
async
(
)
=
>
{
const
{
server
}
=
getTestState
(
)
;
await
page
.
tracing
.
start
(
{
screenshots
:
true
path
:
outputFile
}
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
grid
.
html
'
)
;
const
trace
=
await
page
.
tracing
.
stop
(
)
;
const
buf
=
fs
.
readFileSync
(
outputFile
)
;
expect
(
trace
.
toString
(
)
)
.
toEqual
(
buf
.
toString
(
)
)
;
}
)
;
it
(
'
should
work
without
options
'
async
(
)
=
>
{
const
{
server
}
=
getTestState
(
)
;
await
page
.
tracing
.
start
(
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
grid
.
html
'
)
;
const
trace
=
await
page
.
tracing
.
stop
(
)
;
expect
(
trace
)
.
toBeTruthy
(
)
;
}
)
;
it
(
'
should
return
null
in
case
of
Buffer
error
'
async
(
)
=
>
{
const
{
server
}
=
getTestState
(
)
;
await
page
.
tracing
.
start
(
{
screenshots
:
true
}
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
grid
.
html
'
)
;
const
oldBufferConcat
=
Buffer
.
concat
;
Buffer
.
concat
=
(
)
=
>
{
throw
'
error
'
;
}
;
const
trace
=
await
page
.
tracing
.
stop
(
)
;
expect
(
trace
)
.
toEqual
(
null
)
;
Buffer
.
concat
=
oldBufferConcat
;
}
)
;
it
(
'
should
support
a
buffer
without
a
path
'
async
(
)
=
>
{
const
{
server
}
=
getTestState
(
)
;
await
page
.
tracing
.
start
(
{
screenshots
:
true
}
)
;
await
page
.
goto
(
server
.
PREFIX
+
'
/
grid
.
html
'
)
;
const
trace
=
await
page
.
tracing
.
stop
(
)
;
expect
(
trace
.
toString
(
)
)
.
toContain
(
'
screenshot
'
)
;
}
)
;
it
(
'
should
properly
fail
if
readProtocolStream
errors
out
'
async
(
)
=
>
{
await
page
.
tracing
.
start
(
{
path
:
__dirname
}
)
;
let
error
:
Error
=
null
;
try
{
await
page
.
tracing
.
stop
(
)
;
}
catch
(
error_
)
{
error
=
error_
;
}
expect
(
error
)
.
toBeDefined
(
)
;
}
)
;
}
)
;
