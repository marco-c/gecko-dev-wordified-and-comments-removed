import
expect
from
'
expect
'
;
import
sinon
from
'
sinon
'
;
import
{
getTestState
setupTestPageAndContextHooks
setupTestBrowserHooks
}
from
'
.
/
mocha
-
utils
'
;
describe
(
'
Page
.
Events
.
Dialog
'
function
(
)
{
setupTestBrowserHooks
(
)
;
setupTestPageAndContextHooks
(
)
;
it
(
'
should
fire
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
onDialog
=
sinon
.
stub
(
)
.
callsFake
(
(
dialog
)
=
>
{
dialog
.
accept
(
)
;
}
)
;
page
.
on
(
'
dialog
'
onDialog
)
;
await
page
.
evaluate
(
(
)
=
>
alert
(
'
yo
'
)
)
;
expect
(
onDialog
.
callCount
)
.
toEqual
(
1
)
;
const
dialog
=
onDialog
.
firstCall
.
args
[
0
]
;
expect
(
dialog
.
type
(
)
)
.
toBe
(
'
alert
'
)
;
expect
(
dialog
.
defaultValue
(
)
)
.
toBe
(
'
'
)
;
expect
(
dialog
.
message
(
)
)
.
toBe
(
'
yo
'
)
;
}
)
;
it
(
'
should
allow
accepting
prompts
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
onDialog
=
sinon
.
stub
(
)
.
callsFake
(
(
dialog
)
=
>
{
dialog
.
accept
(
'
answer
!
'
)
;
}
)
;
page
.
on
(
'
dialog
'
onDialog
)
;
const
result
=
await
page
.
evaluate
(
(
)
=
>
prompt
(
'
question
?
'
'
yes
.
'
)
)
;
expect
(
onDialog
.
callCount
)
.
toEqual
(
1
)
;
const
dialog
=
onDialog
.
firstCall
.
args
[
0
]
;
expect
(
dialog
.
type
(
)
)
.
toBe
(
'
prompt
'
)
;
expect
(
dialog
.
defaultValue
(
)
)
.
toBe
(
'
yes
.
'
)
;
expect
(
dialog
.
message
(
)
)
.
toBe
(
'
question
?
'
)
;
expect
(
result
)
.
toBe
(
'
answer
!
'
)
;
}
)
;
it
(
'
should
dismiss
the
prompt
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
page
.
on
(
'
dialog
'
(
dialog
)
=
>
{
dialog
.
dismiss
(
)
;
}
)
;
const
result
=
await
page
.
evaluate
(
(
)
=
>
prompt
(
'
question
?
'
)
)
;
expect
(
result
)
.
toBe
(
null
)
;
}
)
;
}
)
;
