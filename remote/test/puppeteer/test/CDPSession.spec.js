const
{
waitEvent
}
=
require
(
'
.
/
utils
'
)
;
const
expect
=
require
(
'
expect
'
)
;
const
{
getTestState
setupTestBrowserHooks
setupTestPageAndContextHooks
}
=
require
(
'
.
/
mocha
-
utils
'
)
;
describeChromeOnly
(
'
Target
.
createCDPSession
'
function
(
)
{
setupTestBrowserHooks
(
)
;
setupTestPageAndContextHooks
(
)
;
it
(
'
should
work
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
client
=
await
page
.
target
(
)
.
createCDPSession
(
)
;
await
Promise
.
all
(
[
client
.
send
(
'
Runtime
.
enable
'
)
client
.
send
(
'
Runtime
.
evaluate
'
{
expression
:
'
window
.
foo
=
"
bar
"
'
}
)
]
)
;
const
foo
=
await
page
.
evaluate
(
(
)
=
>
window
.
foo
)
;
expect
(
foo
)
.
toBe
(
'
bar
'
)
;
}
)
;
it
(
'
should
send
events
'
async
(
)
=
>
{
const
{
page
server
}
=
getTestState
(
)
;
const
client
=
await
page
.
target
(
)
.
createCDPSession
(
)
;
await
client
.
send
(
'
Network
.
enable
'
)
;
const
events
=
[
]
;
client
.
on
(
'
Network
.
requestWillBeSent
'
(
event
)
=
>
events
.
push
(
event
)
)
;
await
page
.
goto
(
server
.
EMPTY_PAGE
)
;
expect
(
events
.
length
)
.
toBe
(
1
)
;
}
)
;
it
(
'
should
enable
and
disable
domains
independently
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
client
=
await
page
.
target
(
)
.
createCDPSession
(
)
;
await
client
.
send
(
'
Runtime
.
enable
'
)
;
await
client
.
send
(
'
Debugger
.
enable
'
)
;
await
page
.
coverage
.
startJSCoverage
(
)
;
await
page
.
coverage
.
stopJSCoverage
(
)
;
const
[
event
]
=
await
Promise
.
all
(
[
waitEvent
(
client
'
Debugger
.
scriptParsed
'
)
page
.
evaluate
(
'
/
/
#
sourceURL
=
foo
.
js
'
)
]
)
;
expect
(
event
.
url
)
.
toBe
(
'
foo
.
js
'
)
;
}
)
;
it
(
'
should
be
able
to
detach
session
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
client
=
await
page
.
target
(
)
.
createCDPSession
(
)
;
await
client
.
send
(
'
Runtime
.
enable
'
)
;
const
evalResponse
=
await
client
.
send
(
'
Runtime
.
evaluate
'
{
expression
:
'
1
+
2
'
returnByValue
:
true
}
)
;
expect
(
evalResponse
.
result
.
value
)
.
toBe
(
3
)
;
await
client
.
detach
(
)
;
let
error
=
null
;
try
{
await
client
.
send
(
'
Runtime
.
evaluate
'
{
expression
:
'
3
+
1
'
returnByValue
:
true
}
)
;
}
catch
(
error_
)
{
error
=
error_
;
}
expect
(
error
.
message
)
.
toContain
(
'
Session
closed
.
'
)
;
}
)
;
it
(
'
should
throw
nice
errors
'
async
(
)
=
>
{
const
{
page
}
=
getTestState
(
)
;
const
client
=
await
page
.
target
(
)
.
createCDPSession
(
)
;
const
error
=
await
theSourceOfTheProblems
(
)
.
catch
(
(
error
)
=
>
error
)
;
expect
(
error
.
stack
)
.
toContain
(
'
theSourceOfTheProblems
'
)
;
expect
(
error
.
message
)
.
toContain
(
'
ThisCommand
.
DoesNotExist
'
)
;
async
function
theSourceOfTheProblems
(
)
{
await
client
.
send
(
'
ThisCommand
.
DoesNotExist
'
)
;
}
}
)
;
}
)
;
