const
WebSocket
=
require
(
'
ws
'
)
;
class
WebSocketTransport
{
static
create
(
url
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
ws
=
new
WebSocket
(
url
[
]
{
perMessageDeflate
:
false
maxPayload
:
256
*
1024
*
1024
}
)
;
ws
.
addEventListener
(
'
open
'
(
)
=
>
resolve
(
new
WebSocketTransport
(
ws
)
)
)
;
ws
.
addEventListener
(
'
error
'
reject
)
;
}
)
;
}
constructor
(
ws
)
{
this
.
_ws
=
ws
;
this
.
_ws
.
addEventListener
(
'
message
'
event
=
>
{
if
(
this
.
onmessage
)
this
.
onmessage
.
call
(
null
event
.
data
)
;
}
)
;
this
.
_ws
.
addEventListener
(
'
close
'
event
=
>
{
if
(
this
.
onclose
)
this
.
onclose
.
call
(
null
)
;
}
)
;
this
.
_ws
.
addEventListener
(
'
error
'
(
)
=
>
{
}
)
;
this
.
onmessage
=
null
;
this
.
onclose
=
null
;
}
send
(
message
)
{
this
.
_ws
.
send
(
message
)
;
}
close
(
)
{
this
.
_ws
.
close
(
)
;
}
}
module
.
exports
=
WebSocketTransport
;
