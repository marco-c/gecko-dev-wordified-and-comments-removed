const
os
=
require
(
'
os
'
)
;
const
path
=
require
(
'
path
'
)
;
const
http
=
require
(
'
http
'
)
;
const
https
=
require
(
'
https
'
)
;
const
URL
=
require
(
'
url
'
)
;
const
removeFolder
=
require
(
'
rimraf
'
)
;
const
childProcess
=
require
(
'
child_process
'
)
;
const
BrowserFetcher
=
require
(
'
.
/
BrowserFetcher
'
)
;
const
{
Connection
}
=
require
(
'
.
/
Connection
'
)
;
const
{
Browser
}
=
require
(
'
.
/
Browser
'
)
;
const
readline
=
require
(
'
readline
'
)
;
const
fs
=
require
(
'
fs
'
)
;
const
{
helper
assert
debugError
}
=
require
(
'
.
/
helper
'
)
;
const
debugLauncher
=
require
(
'
debug
'
)
(
puppeteer
:
launcher
)
;
const
{
TimeoutError
}
=
require
(
'
.
/
Errors
'
)
;
const
WebSocketTransport
=
require
(
'
.
/
WebSocketTransport
'
)
;
const
PipeTransport
=
require
(
'
.
/
PipeTransport
'
)
;
const
mkdtempAsync
=
helper
.
promisify
(
fs
.
mkdtemp
)
;
const
removeFolderAsync
=
helper
.
promisify
(
removeFolder
)
;
const
writeFileAsync
=
helper
.
promisify
(
fs
.
writeFile
)
;
class
BrowserRunner
{
constructor
(
executablePath
processArguments
tempDirectory
)
{
this
.
_executablePath
=
executablePath
;
this
.
_processArguments
=
processArguments
;
this
.
_tempDirectory
=
tempDirectory
;
this
.
proc
=
null
;
this
.
connection
=
null
;
this
.
_closed
=
true
;
this
.
_listeners
=
[
]
;
}
start
(
options
=
{
}
)
{
const
{
handleSIGINT
handleSIGTERM
handleSIGHUP
dumpio
env
pipe
}
=
options
;
let
stdio
=
[
'
pipe
'
'
pipe
'
'
pipe
'
]
;
if
(
pipe
)
{
if
(
dumpio
)
stdio
=
[
'
ignore
'
'
pipe
'
'
pipe
'
'
pipe
'
'
pipe
'
]
;
else
stdio
=
[
'
ignore
'
'
ignore
'
'
ignore
'
'
pipe
'
'
pipe
'
]
;
}
assert
(
!
this
.
proc
'
This
process
has
previously
been
started
.
'
)
;
debugLauncher
(
Calling
{
this
.
_executablePath
}
{
this
.
_processArguments
.
join
(
'
'
)
}
)
;
this
.
proc
=
childProcess
.
spawn
(
this
.
_executablePath
this
.
_processArguments
{
detached
:
process
.
platform
!
=
=
'
win32
'
env
stdio
}
)
;
if
(
dumpio
)
{
this
.
proc
.
stderr
.
pipe
(
process
.
stderr
)
;
this
.
proc
.
stdout
.
pipe
(
process
.
stdout
)
;
}
this
.
_closed
=
false
;
this
.
_processClosing
=
new
Promise
(
(
fulfill
reject
)
=
>
{
this
.
proc
.
once
(
'
exit
'
(
)
=
>
{
this
.
_closed
=
true
;
if
(
this
.
_tempDirectory
)
{
removeFolderAsync
(
this
.
_tempDirectory
)
.
then
(
(
)
=
>
fulfill
(
)
)
.
catch
(
err
=
>
console
.
error
(
err
)
)
;
}
else
{
fulfill
(
)
;
}
}
)
;
}
)
;
this
.
_listeners
=
[
helper
.
addEventListener
(
process
'
exit
'
this
.
kill
.
bind
(
this
)
)
]
;
if
(
handleSIGINT
)
this
.
_listeners
.
push
(
helper
.
addEventListener
(
process
'
SIGINT
'
(
)
=
>
{
this
.
kill
(
)
;
process
.
exit
(
130
)
;
}
)
)
;
if
(
handleSIGTERM
)
this
.
_listeners
.
push
(
helper
.
addEventListener
(
process
'
SIGTERM
'
this
.
close
.
bind
(
this
)
)
)
;
if
(
handleSIGHUP
)
this
.
_listeners
.
push
(
helper
.
addEventListener
(
process
'
SIGHUP
'
this
.
close
.
bind
(
this
)
)
)
;
}
close
(
)
{
if
(
this
.
_closed
)
return
Promise
.
resolve
(
)
;
helper
.
removeEventListeners
(
this
.
_listeners
)
;
if
(
this
.
_tempDirectory
)
{
this
.
kill
(
)
;
}
else
if
(
this
.
connection
)
{
this
.
connection
.
send
(
'
Browser
.
close
'
)
.
catch
(
error
=
>
{
debugError
(
error
)
;
this
.
kill
(
)
;
}
)
;
}
return
this
.
_processClosing
;
}
kill
(
)
{
helper
.
removeEventListeners
(
this
.
_listeners
)
;
if
(
this
.
proc
&
&
this
.
proc
.
pid
&
&
!
this
.
proc
.
killed
&
&
!
this
.
_closed
)
{
try
{
if
(
process
.
platform
=
=
=
'
win32
'
)
childProcess
.
execSync
(
taskkill
/
pid
{
this
.
proc
.
pid
}
/
T
/
F
)
;
else
process
.
kill
(
-
this
.
proc
.
pid
'
SIGKILL
'
)
;
}
catch
(
error
)
{
}
}
try
{
removeFolder
.
sync
(
this
.
_tempDirectory
)
;
}
catch
(
error
)
{
}
}
async
setupConnection
(
options
)
{
const
{
usePipe
timeout
slowMo
preferredRevision
}
=
options
;
if
(
!
usePipe
)
{
const
browserWSEndpoint
=
await
waitForWSEndpoint
(
this
.
proc
timeout
preferredRevision
)
;
const
transport
=
await
WebSocketTransport
.
create
(
browserWSEndpoint
)
;
this
.
connection
=
new
Connection
(
browserWSEndpoint
transport
slowMo
)
;
}
else
{
const
transport
=
new
PipeTransport
(
(
this
.
proc
.
stdio
[
3
]
)
(
this
.
proc
.
stdio
[
4
]
)
)
;
this
.
connection
=
new
Connection
(
'
'
transport
slowMo
)
;
}
return
this
.
connection
;
}
}
class
ChromeLauncher
{
constructor
(
projectRoot
preferredRevision
isPuppeteerCore
)
{
this
.
_projectRoot
=
projectRoot
;
this
.
_preferredRevision
=
preferredRevision
;
this
.
_isPuppeteerCore
=
isPuppeteerCore
;
}
async
launch
(
options
=
{
}
)
{
const
{
ignoreDefaultArgs
=
false
args
=
[
]
dumpio
=
false
executablePath
=
null
pipe
=
false
env
=
process
.
env
handleSIGINT
=
true
handleSIGTERM
=
true
handleSIGHUP
=
true
ignoreHTTPSErrors
=
false
defaultViewport
=
{
width
:
800
height
:
600
}
slowMo
=
0
timeout
=
30000
}
=
options
;
const
profilePath
=
path
.
join
(
os
.
tmpdir
(
)
'
puppeteer_dev_chrome_profile
-
'
)
;
const
chromeArguments
=
[
]
;
if
(
!
ignoreDefaultArgs
)
chromeArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
)
;
else
if
(
Array
.
isArray
(
ignoreDefaultArgs
)
)
chromeArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
.
filter
(
arg
=
>
!
ignoreDefaultArgs
.
includes
(
arg
)
)
)
;
else
chromeArguments
.
push
(
.
.
.
args
)
;
let
temporaryUserDataDir
=
null
;
if
(
!
chromeArguments
.
some
(
argument
=
>
argument
.
startsWith
(
'
-
-
remote
-
debugging
-
'
)
)
)
chromeArguments
.
push
(
pipe
?
'
-
-
remote
-
debugging
-
pipe
'
:
'
-
-
remote
-
debugging
-
port
=
0
'
)
;
if
(
!
chromeArguments
.
some
(
arg
=
>
arg
.
startsWith
(
'
-
-
user
-
data
-
dir
'
)
)
)
{
temporaryUserDataDir
=
await
mkdtempAsync
(
profilePath
)
;
chromeArguments
.
push
(
-
-
user
-
data
-
dir
=
{
temporaryUserDataDir
}
)
;
}
let
chromeExecutable
=
executablePath
;
if
(
!
executablePath
)
{
const
{
missingText
executablePath
}
=
resolveExecutablePath
(
this
)
;
if
(
missingText
)
throw
new
Error
(
missingText
)
;
chromeExecutable
=
executablePath
;
}
const
usePipe
=
chromeArguments
.
includes
(
'
-
-
remote
-
debugging
-
pipe
'
)
;
const
runner
=
new
BrowserRunner
(
chromeExecutable
chromeArguments
temporaryUserDataDir
)
;
runner
.
start
(
{
handleSIGHUP
handleSIGTERM
handleSIGINT
dumpio
env
pipe
:
usePipe
}
)
;
try
{
const
connection
=
await
runner
.
setupConnection
(
{
usePipe
timeout
slowMo
preferredRevision
:
this
.
_preferredRevision
}
)
;
const
browser
=
await
Browser
.
create
(
connection
[
]
ignoreHTTPSErrors
defaultViewport
runner
.
proc
runner
.
close
.
bind
(
runner
)
)
;
await
browser
.
waitForTarget
(
t
=
>
t
.
type
(
)
=
=
=
'
page
'
)
;
return
browser
;
}
catch
(
error
)
{
runner
.
kill
(
)
;
throw
error
;
}
}
defaultArgs
(
options
=
{
}
)
{
const
chromeArguments
=
[
'
-
-
disable
-
background
-
networking
'
'
-
-
enable
-
features
=
NetworkService
NetworkServiceInProcess
'
'
-
-
disable
-
background
-
timer
-
throttling
'
'
-
-
disable
-
backgrounding
-
occluded
-
windows
'
'
-
-
disable
-
breakpad
'
'
-
-
disable
-
client
-
side
-
phishing
-
detection
'
'
-
-
disable
-
component
-
extensions
-
with
-
background
-
pages
'
'
-
-
disable
-
default
-
apps
'
'
-
-
disable
-
dev
-
shm
-
usage
'
'
-
-
disable
-
extensions
'
'
-
-
disable
-
features
=
TranslateUI
'
'
-
-
disable
-
hang
-
monitor
'
'
-
-
disable
-
ipc
-
flooding
-
protection
'
'
-
-
disable
-
popup
-
blocking
'
'
-
-
disable
-
prompt
-
on
-
repost
'
'
-
-
disable
-
renderer
-
backgrounding
'
'
-
-
disable
-
sync
'
'
-
-
force
-
color
-
profile
=
srgb
'
'
-
-
metrics
-
recording
-
only
'
'
-
-
no
-
first
-
run
'
'
-
-
enable
-
automation
'
'
-
-
password
-
store
=
basic
'
'
-
-
use
-
mock
-
keychain
'
]
;
const
{
devtools
=
false
headless
=
!
devtools
args
=
[
]
userDataDir
=
null
}
=
options
;
if
(
userDataDir
)
chromeArguments
.
push
(
-
-
user
-
data
-
dir
=
{
userDataDir
}
)
;
if
(
devtools
)
chromeArguments
.
push
(
'
-
-
auto
-
open
-
devtools
-
for
-
tabs
'
)
;
if
(
headless
)
{
chromeArguments
.
push
(
'
-
-
headless
'
'
-
-
hide
-
scrollbars
'
'
-
-
mute
-
audio
'
)
;
}
if
(
args
.
every
(
arg
=
>
arg
.
startsWith
(
'
-
'
)
)
)
chromeArguments
.
push
(
'
about
:
blank
'
)
;
chromeArguments
.
push
(
.
.
.
args
)
;
return
chromeArguments
;
}
executablePath
(
)
{
return
resolveExecutablePath
(
this
)
.
executablePath
;
}
get
product
(
)
{
return
'
chrome
'
;
}
async
connect
(
options
)
{
const
{
browserWSEndpoint
browserURL
ignoreHTTPSErrors
=
false
defaultViewport
=
{
width
:
800
height
:
600
}
transport
slowMo
=
0
}
=
options
;
assert
(
Number
(
!
!
browserWSEndpoint
)
+
Number
(
!
!
browserURL
)
+
Number
(
!
!
transport
)
=
=
=
1
'
Exactly
one
of
browserWSEndpoint
browserURL
or
transport
must
be
passed
to
puppeteer
.
connect
'
)
;
let
connection
=
null
;
if
(
transport
)
{
connection
=
new
Connection
(
'
'
transport
slowMo
)
;
}
else
if
(
browserWSEndpoint
)
{
const
connectionTransport
=
await
WebSocketTransport
.
create
(
browserWSEndpoint
)
;
connection
=
new
Connection
(
browserWSEndpoint
connectionTransport
slowMo
)
;
}
else
if
(
browserURL
)
{
const
connectionURL
=
await
getWSEndpoint
(
browserURL
)
;
const
connectionTransport
=
await
WebSocketTransport
.
create
(
connectionURL
)
;
connection
=
new
Connection
(
connectionURL
connectionTransport
slowMo
)
;
}
const
{
browserContextIds
}
=
await
connection
.
send
(
'
Target
.
getBrowserContexts
'
)
;
return
Browser
.
create
(
connection
browserContextIds
ignoreHTTPSErrors
defaultViewport
null
(
)
=
>
connection
.
send
(
'
Browser
.
close
'
)
.
catch
(
debugError
)
)
;
}
}
class
FirefoxLauncher
{
constructor
(
projectRoot
preferredRevision
isPuppeteerCore
)
{
this
.
_projectRoot
=
projectRoot
;
this
.
_preferredRevision
=
preferredRevision
;
this
.
_isPuppeteerCore
=
isPuppeteerCore
;
}
async
launch
(
options
=
{
}
)
{
const
{
ignoreDefaultArgs
=
false
args
=
[
]
dumpio
=
false
executablePath
=
null
pipe
=
false
env
=
process
.
env
handleSIGINT
=
true
handleSIGTERM
=
true
handleSIGHUP
=
true
ignoreHTTPSErrors
=
false
defaultViewport
=
{
width
:
800
height
:
600
}
slowMo
=
0
timeout
=
30000
extraPrefsFirefox
=
{
}
}
=
options
;
const
firefoxArguments
=
[
]
;
if
(
!
ignoreDefaultArgs
)
firefoxArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
)
;
else
if
(
Array
.
isArray
(
ignoreDefaultArgs
)
)
firefoxArguments
.
push
(
.
.
.
this
.
defaultArgs
(
options
)
.
filter
(
arg
=
>
!
ignoreDefaultArgs
.
includes
(
arg
)
)
)
;
else
firefoxArguments
.
push
(
.
.
.
args
)
;
if
(
!
firefoxArguments
.
some
(
argument
=
>
argument
.
startsWith
(
'
-
-
remote
-
debugging
-
'
)
)
)
firefoxArguments
.
push
(
'
-
-
remote
-
debugging
-
port
=
0
'
)
;
let
temporaryUserDataDir
=
null
;
if
(
!
firefoxArguments
.
includes
(
'
-
profile
'
)
&
&
!
firefoxArguments
.
includes
(
'
-
-
profile
'
)
)
{
temporaryUserDataDir
=
await
this
.
_createProfile
(
extraPrefsFirefox
)
;
firefoxArguments
.
push
(
'
-
-
profile
'
)
;
firefoxArguments
.
push
(
temporaryUserDataDir
)
;
}
let
executable
=
executablePath
;
if
(
!
executablePath
)
{
const
{
missingText
executablePath
}
=
resolveExecutablePath
(
this
)
;
if
(
missingText
)
throw
new
Error
(
missingText
)
;
executable
=
executablePath
;
}
const
runner
=
new
BrowserRunner
(
executable
firefoxArguments
temporaryUserDataDir
)
;
runner
.
start
(
{
handleSIGHUP
handleSIGTERM
handleSIGINT
dumpio
env
pipe
}
)
;
try
{
const
connection
=
await
runner
.
setupConnection
(
{
usePipe
:
pipe
timeout
slowMo
preferredRevision
:
this
.
_preferredRevision
}
)
;
const
browser
=
await
Browser
.
create
(
connection
[
]
ignoreHTTPSErrors
defaultViewport
runner
.
proc
runner
.
close
.
bind
(
runner
)
)
;
await
browser
.
waitForTarget
(
t
=
>
t
.
type
(
)
=
=
=
'
page
'
)
;
return
browser
;
}
catch
(
error
)
{
runner
.
kill
(
)
;
throw
error
;
}
}
async
connect
(
options
)
{
const
{
browserWSEndpoint
browserURL
ignoreHTTPSErrors
=
false
defaultViewport
=
{
width
:
800
height
:
600
}
transport
slowMo
=
0
}
=
options
;
assert
(
Number
(
!
!
browserWSEndpoint
)
+
Number
(
!
!
browserURL
)
+
Number
(
!
!
transport
)
=
=
=
1
'
Exactly
one
of
browserWSEndpoint
browserURL
or
transport
must
be
passed
to
puppeteer
.
connect
'
)
;
let
connection
=
null
;
if
(
transport
)
{
connection
=
new
Connection
(
'
'
transport
slowMo
)
;
}
else
if
(
browserWSEndpoint
)
{
const
connectionTransport
=
await
WebSocketTransport
.
create
(
browserWSEndpoint
)
;
connection
=
new
Connection
(
browserWSEndpoint
connectionTransport
slowMo
)
;
}
else
if
(
browserURL
)
{
const
connectionURL
=
await
getWSEndpoint
(
browserURL
)
;
const
connectionTransport
=
await
WebSocketTransport
.
create
(
connectionURL
)
;
connection
=
new
Connection
(
connectionURL
connectionTransport
slowMo
)
;
}
const
{
browserContextIds
}
=
await
connection
.
send
(
'
Target
.
getBrowserContexts
'
)
;
return
Browser
.
create
(
connection
browserContextIds
ignoreHTTPSErrors
defaultViewport
null
(
)
=
>
connection
.
send
(
'
Browser
.
close
'
)
.
catch
(
debugError
)
)
;
}
executablePath
(
)
{
const
executablePath
=
process
.
env
.
PUPPETEER_EXECUTABLE_PATH
|
|
process
.
env
.
npm_config_puppeteer_executable_path
|
|
process
.
env
.
npm_package_config_puppeteer_executable_path
;
if
(
!
executablePath
)
throw
new
Error
(
'
Please
set
PUPPETEER_EXECUTABLE_PATH
to
a
Firefox
binary
.
'
)
;
return
executablePath
;
}
get
product
(
)
{
return
'
firefox
'
;
}
defaultArgs
(
options
=
{
}
)
{
const
firefoxArguments
=
[
'
-
-
no
-
remote
'
'
-
-
foreground
'
]
;
const
{
devtools
=
false
headless
=
!
devtools
args
=
[
]
userDataDir
=
null
}
=
options
;
if
(
userDataDir
)
{
firefoxArguments
.
push
(
'
-
-
profile
'
)
;
firefoxArguments
.
push
(
userDataDir
)
;
}
if
(
headless
)
firefoxArguments
.
push
(
'
-
-
headless
'
)
;
if
(
devtools
)
firefoxArguments
.
push
(
'
-
-
devtools
'
)
;
if
(
args
.
every
(
arg
=
>
arg
.
startsWith
(
'
-
'
)
)
)
firefoxArguments
.
push
(
'
about
:
blank
'
)
;
firefoxArguments
.
push
(
.
.
.
args
)
;
return
firefoxArguments
;
}
async
_createProfile
(
extraPrefs
)
{
const
profilePath
=
await
mkdtempAsync
(
path
.
join
(
os
.
tmpdir
(
)
'
puppeteer_dev_firefox_profile
-
'
)
)
;
const
prefsJS
=
[
]
;
const
userJS
=
[
]
;
const
server
=
'
dummy
.
test
'
;
const
defaultPreferences
=
{
'
app
.
normandy
.
api_url
'
:
'
'
'
app
.
update
.
checkInstallTime
'
:
false
'
app
.
update
.
disabledForTesting
'
:
true
'
apz
.
content_response_timeout
'
:
60000
'
browser
.
contentblocking
.
features
.
standard
'
:
'
-
tp
tpPrivate
cookieBehavior0
-
cm
-
fp
'
'
browser
.
dom
.
window
.
dump
.
enabled
'
:
true
'
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
section
.
topstories
'
:
false
'
browser
.
newtabpage
.
enabled
'
:
false
'
browser
.
pagethumbnails
.
capturing_disabled
'
:
true
'
browser
.
safebrowsing
.
blockedURIs
.
enabled
'
:
false
'
browser
.
safebrowsing
.
downloads
.
enabled
'
:
false
'
browser
.
safebrowsing
.
malware
.
enabled
'
:
false
'
browser
.
safebrowsing
.
passwords
.
enabled
'
:
false
'
browser
.
safebrowsing
.
phishing
.
enabled
'
:
false
'
browser
.
search
.
update
'
:
false
'
browser
.
sessionstore
.
resume_from_crash
'
:
false
'
browser
.
shell
.
checkDefaultBrowser
'
:
false
'
browser
.
startup
.
homepage
'
:
'
about
:
blank
'
'
browser
.
startup
.
homepage_override
.
mstone
'
:
'
ignore
'
'
browser
.
startup
.
page
'
:
0
'
browser
.
tabs
.
disableBackgroundZombification
'
:
false
'
browser
.
tabs
.
warnOnCloseOtherTabs
'
:
false
'
browser
.
tabs
.
warnOnOpen
'
:
false
'
browser
.
uitour
.
enabled
'
:
false
'
browser
.
urlbar
.
suggest
.
searches
'
:
false
'
browser
.
usedOnWindows10
.
introURL
'
:
'
'
'
browser
.
warnOnQuit
'
:
false
'
datareporting
.
healthreport
.
about
.
reportUrl
'
:
http
:
/
/
{
server
}
/
dummy
/
abouthealthreport
/
'
datareporting
.
healthreport
.
documentServerURI
'
:
http
:
/
/
{
server
}
/
dummy
/
healthreport
/
'
datareporting
.
healthreport
.
logging
.
consoleEnabled
'
:
false
'
datareporting
.
healthreport
.
service
.
enabled
'
:
false
'
datareporting
.
healthreport
.
service
.
firstRun
'
:
false
'
datareporting
.
healthreport
.
uploadEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionEnabled
'
:
false
'
datareporting
.
policy
.
dataSubmissionPolicyAccepted
'
:
false
'
datareporting
.
policy
.
dataSubmissionPolicyBypassNotification
'
:
true
'
devtools
.
jsonview
.
enabled
'
:
false
'
dom
.
disable_open_during_load
'
:
false
'
dom
.
file
.
createInChild
'
:
true
'
dom
.
ipc
.
reportProcessHangs
'
:
false
'
dom
.
max_chrome_script_run_time
'
:
0
'
dom
.
max_script_run_time
'
:
0
'
extensions
.
autoDisableScopes
'
:
0
'
extensions
.
enabledScopes
'
:
5
'
extensions
.
getAddons
.
cache
.
enabled
'
:
false
'
extensions
.
installDistroAddons
'
:
false
'
extensions
.
screenshots
.
disabled
'
:
true
'
extensions
.
update
.
enabled
'
:
false
'
extensions
.
update
.
notifyUser
'
:
false
'
extensions
.
webservice
.
discoverURL
'
:
http
:
/
/
{
server
}
/
dummy
/
discoveryURL
'
focusmanager
.
testmode
'
:
true
'
general
.
useragent
.
updates
.
enabled
'
:
false
'
geo
.
provider
.
testing
'
:
true
'
geo
.
wifi
.
scan
'
:
false
'
hangmonitor
.
timeout
'
:
0
'
javascript
.
options
.
showInConsole
'
:
true
'
media
.
gmp
-
manager
.
updateEnabled
'
:
false
'
network
.
cookie
.
cookieBehavior
'
:
0
'
network
.
http
.
prompt
-
temp
-
redirect
'
:
false
'
network
.
http
.
speculative
-
parallel
-
limit
'
:
0
'
network
.
manage
-
offline
-
status
'
:
false
'
network
.
sntp
.
pools
'
:
server
'
plugin
.
state
.
flash
'
:
0
'
privacy
.
trackingprotection
.
enabled
'
:
false
'
remote
.
enabled
'
:
true
'
security
.
certerrors
.
mitm
.
priming
.
enabled
'
:
false
'
security
.
fileuri
.
strict_origin_policy
'
:
false
'
security
.
notification_enable_delay
'
:
0
'
services
.
settings
.
server
'
:
http
:
/
/
{
server
}
/
dummy
/
blocklist
/
'
signon
.
autofillForms
'
:
false
'
signon
.
rememberSignons
'
:
false
'
startup
.
homepage_welcome_url
'
:
'
about
:
blank
'
'
startup
.
homepage_welcome_url
.
additional
'
:
'
'
'
toolkit
.
cosmeticAnimations
.
enabled
'
:
false
'
toolkit
.
telemetry
.
server
'
:
https
:
/
/
{
server
}
/
dummy
/
telemetry
/
'
toolkit
.
startup
.
max_resumed_crashes
'
:
-
1
}
;
Object
.
assign
(
defaultPreferences
extraPrefs
)
;
for
(
const
[
key
value
]
of
Object
.
entries
(
defaultPreferences
)
)
userJS
.
push
(
user_pref
(
{
JSON
.
stringify
(
key
)
}
{
JSON
.
stringify
(
value
)
}
)
;
)
;
await
writeFileAsync
(
path
.
join
(
profilePath
'
user
.
js
'
)
userJS
.
join
(
'
\
n
'
)
)
;
await
writeFileAsync
(
path
.
join
(
profilePath
'
prefs
.
js
'
)
prefsJS
.
join
(
'
\
n
'
)
)
;
return
profilePath
;
}
}
function
waitForWSEndpoint
(
browserProcess
timeout
preferredRevision
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
rl
=
readline
.
createInterface
(
{
input
:
browserProcess
.
stderr
}
)
;
let
stderr
=
'
'
;
const
listeners
=
[
helper
.
addEventListener
(
rl
'
line
'
onLine
)
helper
.
addEventListener
(
rl
'
close
'
(
)
=
>
onClose
(
)
)
helper
.
addEventListener
(
browserProcess
'
exit
'
(
)
=
>
onClose
(
)
)
helper
.
addEventListener
(
browserProcess
'
error
'
error
=
>
onClose
(
error
)
)
]
;
const
timeoutId
=
timeout
?
setTimeout
(
onTimeout
timeout
)
:
0
;
function
onClose
(
error
)
{
cleanup
(
)
;
reject
(
new
Error
(
[
'
Failed
to
launch
the
browser
process
!
'
+
(
error
?
'
'
+
error
.
message
:
'
'
)
stderr
'
'
'
TROUBLESHOOTING
:
https
:
/
/
github
.
com
/
puppeteer
/
puppeteer
/
blob
/
master
/
docs
/
troubleshooting
.
md
'
'
'
]
.
join
(
'
\
n
'
)
)
)
;
}
function
onTimeout
(
)
{
cleanup
(
)
;
reject
(
new
TimeoutError
(
Timed
out
after
{
timeout
}
ms
while
trying
to
connect
to
the
browser
!
Only
Chrome
at
revision
r
{
preferredRevision
}
is
guaranteed
to
work
.
)
)
;
}
function
onLine
(
line
)
{
stderr
+
=
line
+
'
\
n
'
;
const
match
=
line
.
match
(
/
^
DevTools
listening
on
(
ws
:
\
/
\
/
.
*
)
/
)
;
if
(
!
match
)
return
;
cleanup
(
)
;
resolve
(
match
[
1
]
)
;
}
function
cleanup
(
)
{
if
(
timeoutId
)
clearTimeout
(
timeoutId
)
;
helper
.
removeEventListeners
(
listeners
)
;
}
}
)
;
}
function
getWSEndpoint
(
browserURL
)
{
let
resolve
reject
;
const
promise
=
new
Promise
(
(
res
rej
)
=
>
{
resolve
=
res
;
reject
=
rej
;
}
)
;
const
endpointURL
=
URL
.
resolve
(
browserURL
'
/
json
/
version
'
)
;
const
protocol
=
endpointURL
.
startsWith
(
'
https
'
)
?
https
:
http
;
const
requestOptions
=
Object
.
assign
(
URL
.
parse
(
endpointURL
)
{
method
:
'
GET
'
}
)
;
const
request
=
protocol
.
request
(
requestOptions
res
=
>
{
let
data
=
'
'
;
if
(
res
.
statusCode
!
=
=
200
)
{
res
.
resume
(
)
;
reject
(
new
Error
(
'
HTTP
'
+
res
.
statusCode
)
)
;
return
;
}
res
.
setEncoding
(
'
utf8
'
)
;
res
.
on
(
'
data
'
chunk
=
>
data
+
=
chunk
)
;
res
.
on
(
'
end
'
(
)
=
>
resolve
(
JSON
.
parse
(
data
)
.
webSocketDebuggerUrl
)
)
;
}
)
;
request
.
on
(
'
error
'
reject
)
;
request
.
end
(
)
;
return
promise
.
catch
(
e
=
>
{
e
.
message
=
Failed
to
fetch
browser
webSocket
url
from
{
endpointURL
}
:
+
e
.
message
;
throw
e
;
}
)
;
}
function
resolveExecutablePath
(
launcher
)
{
if
(
!
launcher
.
_isPuppeteerCore
)
{
const
executablePath
=
process
.
env
.
PUPPETEER_EXECUTABLE_PATH
|
|
process
.
env
.
npm_config_puppeteer_executable_path
|
|
process
.
env
.
npm_package_config_puppeteer_executable_path
;
if
(
executablePath
)
{
const
missingText
=
!
fs
.
existsSync
(
executablePath
)
?
'
Tried
to
use
PUPPETEER_EXECUTABLE_PATH
env
variable
to
launch
browser
but
did
not
find
any
executable
at
:
'
+
executablePath
:
null
;
return
{
executablePath
missingText
}
;
}
}
const
browserFetcher
=
new
BrowserFetcher
(
launcher
.
_projectRoot
)
;
if
(
!
launcher
.
_isPuppeteerCore
)
{
const
revision
=
process
.
env
[
'
PUPPETEER_CHROMIUM_REVISION
'
]
;
if
(
revision
)
{
const
revisionInfo
=
browserFetcher
.
revisionInfo
(
revision
)
;
const
missingText
=
!
revisionInfo
.
local
?
'
Tried
to
use
PUPPETEER_CHROMIUM_REVISION
env
variable
to
launch
browser
but
did
not
find
executable
at
:
'
+
revisionInfo
.
executablePath
:
null
;
return
{
executablePath
:
revisionInfo
.
executablePath
missingText
}
;
}
}
const
revisionInfo
=
browserFetcher
.
revisionInfo
(
launcher
.
_preferredRevision
)
;
const
missingText
=
!
revisionInfo
.
local
?
Browser
is
not
downloaded
.
Run
"
npm
install
"
or
"
yarn
install
"
:
null
;
return
{
executablePath
:
revisionInfo
.
executablePath
missingText
}
;
}
function
Launcher
(
projectRoot
preferredRevision
isPuppeteerCore
product
)
{
if
(
!
product
&
&
!
isPuppeteerCore
)
product
=
process
.
env
.
PUPPETEER_PRODUCT
|
|
process
.
env
.
npm_config_puppeteer_product
|
|
process
.
env
.
npm_package_config_puppeteer_product
;
switch
(
product
)
{
case
'
firefox
'
:
return
new
FirefoxLauncher
(
projectRoot
preferredRevision
isPuppeteerCore
)
;
case
'
chrome
'
:
default
:
return
new
ChromeLauncher
(
projectRoot
preferredRevision
isPuppeteerCore
)
;
}
}
module
.
exports
=
Launcher
;
