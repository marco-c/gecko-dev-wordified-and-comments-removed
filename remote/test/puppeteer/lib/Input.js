const
{
assert
}
=
require
(
'
.
/
helper
'
)
;
const
keyDefinitions
=
require
(
'
.
/
USKeyboardLayout
'
)
;
class
Keyboard
{
constructor
(
client
)
{
this
.
_client
=
client
;
this
.
_modifiers
=
0
;
this
.
_pressedKeys
=
new
Set
(
)
;
}
async
down
(
key
options
=
{
text
:
undefined
}
)
{
const
description
=
this
.
_keyDescriptionForString
(
key
)
;
const
autoRepeat
=
this
.
_pressedKeys
.
has
(
description
.
code
)
;
this
.
_pressedKeys
.
add
(
description
.
code
)
;
this
.
_modifiers
|
=
this
.
_modifierBit
(
description
.
key
)
;
const
text
=
options
.
text
=
=
=
undefined
?
description
.
text
:
options
.
text
;
await
this
.
_client
.
send
(
'
Input
.
dispatchKeyEvent
'
{
type
:
text
?
'
keyDown
'
:
'
rawKeyDown
'
modifiers
:
this
.
_modifiers
windowsVirtualKeyCode
:
description
.
keyCode
code
:
description
.
code
key
:
description
.
key
text
:
text
unmodifiedText
:
text
autoRepeat
location
:
description
.
location
isKeypad
:
description
.
location
=
=
=
3
}
)
;
}
_modifierBit
(
key
)
{
if
(
key
=
=
=
'
Alt
'
)
return
1
;
if
(
key
=
=
=
'
Control
'
)
return
2
;
if
(
key
=
=
=
'
Meta
'
)
return
4
;
if
(
key
=
=
=
'
Shift
'
)
return
8
;
return
0
;
}
_keyDescriptionForString
(
keyString
)
{
const
shift
=
this
.
_modifiers
&
8
;
const
description
=
{
key
:
'
'
keyCode
:
0
code
:
'
'
text
:
'
'
location
:
0
}
;
const
definition
=
keyDefinitions
[
keyString
]
;
assert
(
definition
Unknown
key
:
"
{
keyString
}
"
)
;
if
(
definition
.
key
)
description
.
key
=
definition
.
key
;
if
(
shift
&
&
definition
.
shiftKey
)
description
.
key
=
definition
.
shiftKey
;
if
(
definition
.
keyCode
)
description
.
keyCode
=
definition
.
keyCode
;
if
(
shift
&
&
definition
.
shiftKeyCode
)
description
.
keyCode
=
definition
.
shiftKeyCode
;
if
(
definition
.
code
)
description
.
code
=
definition
.
code
;
if
(
definition
.
location
)
description
.
location
=
definition
.
location
;
if
(
description
.
key
.
length
=
=
=
1
)
description
.
text
=
description
.
key
;
if
(
definition
.
text
)
description
.
text
=
definition
.
text
;
if
(
shift
&
&
definition
.
shiftText
)
description
.
text
=
definition
.
shiftText
;
if
(
this
.
_modifiers
&
~
8
)
description
.
text
=
'
'
;
return
description
;
}
async
up
(
key
)
{
const
description
=
this
.
_keyDescriptionForString
(
key
)
;
this
.
_modifiers
&
=
~
this
.
_modifierBit
(
description
.
key
)
;
this
.
_pressedKeys
.
delete
(
description
.
code
)
;
await
this
.
_client
.
send
(
'
Input
.
dispatchKeyEvent
'
{
type
:
'
keyUp
'
modifiers
:
this
.
_modifiers
key
:
description
.
key
windowsVirtualKeyCode
:
description
.
keyCode
code
:
description
.
code
location
:
description
.
location
}
)
;
}
async
sendCharacter
(
char
)
{
await
this
.
_client
.
send
(
'
Input
.
insertText
'
{
text
:
char
}
)
;
}
async
type
(
text
options
)
{
let
delay
=
0
;
if
(
options
&
&
options
.
delay
)
delay
=
options
.
delay
;
for
(
const
char
of
text
)
{
if
(
keyDefinitions
[
char
]
)
await
this
.
press
(
char
{
delay
}
)
;
else
await
this
.
sendCharacter
(
char
)
;
if
(
delay
)
await
new
Promise
(
f
=
>
setTimeout
(
f
delay
)
)
;
}
}
async
press
(
key
options
=
{
}
)
{
const
{
delay
=
null
}
=
options
;
await
this
.
down
(
key
options
)
;
if
(
delay
!
=
=
null
)
await
new
Promise
(
f
=
>
setTimeout
(
f
options
.
delay
)
)
;
await
this
.
up
(
key
)
;
}
}
class
Mouse
{
constructor
(
client
keyboard
)
{
this
.
_client
=
client
;
this
.
_keyboard
=
keyboard
;
this
.
_x
=
0
;
this
.
_y
=
0
;
this
.
_button
=
'
none
'
;
}
async
move
(
x
y
options
=
{
}
)
{
const
{
steps
=
1
}
=
options
;
const
fromX
=
this
.
_x
fromY
=
this
.
_y
;
this
.
_x
=
x
;
this
.
_y
=
y
;
for
(
let
i
=
1
;
i
<
=
steps
;
i
+
+
)
{
await
this
.
_client
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mouseMoved
'
button
:
this
.
_button
x
:
fromX
+
(
this
.
_x
-
fromX
)
*
(
i
/
steps
)
y
:
fromY
+
(
this
.
_y
-
fromY
)
*
(
i
/
steps
)
modifiers
:
this
.
_keyboard
.
_modifiers
}
)
;
}
}
async
click
(
x
y
options
=
{
}
)
{
const
{
delay
=
null
}
=
options
;
this
.
move
(
x
y
)
;
this
.
down
(
options
)
;
if
(
delay
!
=
=
null
)
await
new
Promise
(
f
=
>
setTimeout
(
f
delay
)
)
;
await
this
.
up
(
options
)
;
}
async
down
(
options
=
{
}
)
{
const
{
button
=
'
left
'
clickCount
=
1
}
=
options
;
this
.
_button
=
button
;
await
this
.
_client
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mousePressed
'
button
x
:
this
.
_x
y
:
this
.
_y
modifiers
:
this
.
_keyboard
.
_modifiers
clickCount
}
)
;
}
async
up
(
options
=
{
}
)
{
const
{
button
=
'
left
'
clickCount
=
1
}
=
options
;
this
.
_button
=
'
none
'
;
await
this
.
_client
.
send
(
'
Input
.
dispatchMouseEvent
'
{
type
:
'
mouseReleased
'
button
x
:
this
.
_x
y
:
this
.
_y
modifiers
:
this
.
_keyboard
.
_modifiers
clickCount
}
)
;
}
}
class
Touchscreen
{
constructor
(
client
keyboard
)
{
this
.
_client
=
client
;
this
.
_keyboard
=
keyboard
;
}
async
tap
(
x
y
)
{
await
this
.
_client
.
send
(
'
Runtime
.
evaluate
'
{
expression
:
'
new
Promise
(
x
=
>
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
x
)
)
)
'
awaitPromise
:
true
}
)
;
const
touchPoints
=
[
{
x
:
Math
.
round
(
x
)
y
:
Math
.
round
(
y
)
}
]
;
await
this
.
_client
.
send
(
'
Input
.
dispatchTouchEvent
'
{
type
:
'
touchStart
'
touchPoints
modifiers
:
this
.
_keyboard
.
_modifiers
}
)
;
await
this
.
_client
.
send
(
'
Input
.
dispatchTouchEvent
'
{
type
:
'
touchEnd
'
touchPoints
:
[
]
modifiers
:
this
.
_keyboard
.
_modifiers
}
)
;
}
}
module
.
exports
=
{
Keyboard
Mouse
Touchscreen
}
;
