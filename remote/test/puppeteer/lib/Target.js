const
{
Events
}
=
require
(
'
.
/
Events
'
)
;
const
{
Page
}
=
require
(
'
.
/
Page
'
)
;
const
{
Worker
}
=
require
(
'
.
/
Worker
'
)
;
const
{
Connection
}
=
require
(
'
.
/
Connection
'
)
;
class
Target
{
constructor
(
targetInfo
browserContext
sessionFactory
ignoreHTTPSErrors
defaultViewport
screenshotTaskQueue
)
{
this
.
_targetInfo
=
targetInfo
;
this
.
_browserContext
=
browserContext
;
this
.
_targetId
=
targetInfo
.
targetId
;
this
.
_sessionFactory
=
sessionFactory
;
this
.
_ignoreHTTPSErrors
=
ignoreHTTPSErrors
;
this
.
_defaultViewport
=
defaultViewport
;
this
.
_screenshotTaskQueue
=
screenshotTaskQueue
;
this
.
_pagePromise
=
null
;
this
.
_workerPromise
=
null
;
this
.
_initializedPromise
=
new
Promise
(
fulfill
=
>
this
.
_initializedCallback
=
fulfill
)
.
then
(
async
success
=
>
{
if
(
!
success
)
return
false
;
const
opener
=
this
.
opener
(
)
;
if
(
!
opener
|
|
!
opener
.
_pagePromise
|
|
this
.
type
(
)
!
=
=
'
page
'
)
return
true
;
const
openerPage
=
await
opener
.
_pagePromise
;
if
(
!
openerPage
.
listenerCount
(
Events
.
Page
.
Popup
)
)
return
true
;
const
popupPage
=
await
this
.
page
(
)
;
openerPage
.
emit
(
Events
.
Page
.
Popup
popupPage
)
;
return
true
;
}
)
;
this
.
_isClosedPromise
=
new
Promise
(
fulfill
=
>
this
.
_closedCallback
=
fulfill
)
;
this
.
_isInitialized
=
this
.
_targetInfo
.
type
!
=
=
'
page
'
|
|
this
.
_targetInfo
.
url
!
=
=
'
'
;
if
(
this
.
_isInitialized
)
this
.
_initializedCallback
(
true
)
;
}
createCDPSession
(
)
{
return
this
.
_sessionFactory
(
)
;
}
async
page
(
)
{
if
(
(
this
.
_targetInfo
.
type
=
=
=
'
page
'
|
|
this
.
_targetInfo
.
type
=
=
=
'
background_page
'
)
&
&
!
this
.
_pagePromise
)
{
this
.
_pagePromise
=
this
.
_sessionFactory
(
)
.
then
(
client
=
>
Page
.
create
(
client
this
this
.
_ignoreHTTPSErrors
this
.
_defaultViewport
this
.
_screenshotTaskQueue
)
)
;
}
return
this
.
_pagePromise
;
}
async
worker
(
)
{
if
(
this
.
_targetInfo
.
type
!
=
=
'
service_worker
'
&
&
this
.
_targetInfo
.
type
!
=
=
'
shared_worker
'
)
return
null
;
if
(
!
this
.
_workerPromise
)
{
this
.
_workerPromise
=
this
.
_sessionFactory
(
)
.
then
(
async
client
=
>
{
const
[
targetAttached
]
=
await
Promise
.
all
(
[
new
Promise
(
x
=
>
client
.
once
(
'
Target
.
attachedToTarget
'
x
)
)
client
.
send
(
'
Target
.
setAutoAttach
'
{
autoAttach
:
true
waitForDebuggerOnStart
:
false
flatten
:
true
}
)
]
)
;
const
session
=
Connection
.
fromSession
(
client
)
.
session
(
targetAttached
.
sessionId
)
;
return
new
Worker
(
session
this
.
_targetInfo
.
url
(
)
=
>
{
}
(
)
=
>
{
}
)
;
}
)
;
}
return
this
.
_workerPromise
;
}
url
(
)
{
return
this
.
_targetInfo
.
url
;
}
type
(
)
{
const
type
=
this
.
_targetInfo
.
type
;
if
(
type
=
=
=
'
page
'
|
|
type
=
=
=
'
background_page
'
|
|
type
=
=
=
'
service_worker
'
|
|
type
=
=
=
'
shared_worker
'
|
|
type
=
=
=
'
browser
'
)
return
type
;
return
'
other
'
;
}
browser
(
)
{
return
this
.
_browserContext
.
browser
(
)
;
}
browserContext
(
)
{
return
this
.
_browserContext
;
}
opener
(
)
{
const
{
openerId
}
=
this
.
_targetInfo
;
if
(
!
openerId
)
return
null
;
return
this
.
browser
(
)
.
_targets
.
get
(
openerId
)
;
}
_targetInfoChanged
(
targetInfo
)
{
this
.
_targetInfo
=
targetInfo
;
if
(
!
this
.
_isInitialized
&
&
(
this
.
_targetInfo
.
type
!
=
=
'
page
'
|
|
this
.
_targetInfo
.
url
!
=
=
'
'
)
)
{
this
.
_isInitialized
=
true
;
this
.
_initializedCallback
(
true
)
;
return
;
}
}
}
module
.
exports
=
{
Target
}
;
