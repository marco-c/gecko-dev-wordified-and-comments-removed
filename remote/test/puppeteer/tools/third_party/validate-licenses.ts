import
*
as
path
from
'
path
'
;
import
checker
from
'
license
-
checker
'
;
import
spdxSatisfies
from
'
spdx
-
satisfies
'
;
const
allowedLicenses
=
[
'
MIT
'
'
ISC
'
'
Apache
-
2
.
0
'
'
Python
-
2
.
0
'
'
Artistic
-
2
.
0
'
'
BlueOak
-
1
.
0
.
0
'
'
BSD
-
2
-
Clause
'
'
BSD
-
3
-
Clause
'
'
BSD
-
4
-
Clause
'
'
CC
-
BY
-
3
.
0
'
'
CC
-
BY
-
4
.
0
'
'
Unlicense
'
'
CC0
-
1
.
0
'
'
0BSD
'
'
(
AFL
-
2
.
1
OR
BSD
-
2
-
Clause
)
'
]
;
const
licenseReplacements
:
{
[
key
:
string
]
:
string
}
=
{
'
Apache
License
Version
2
.
0
'
:
'
Apache
-
2
.
0
'
Apache2
:
'
Apache
-
2
.
0
'
'
Apache
2
.
0
'
:
'
Apache
-
2
.
0
'
'
Apache
v2
'
:
'
Apache
-
2
.
0
'
'
AFLv2
.
1
'
:
'
AFL
-
2
.
1
'
BSD
:
'
BSD
-
2
-
Clause
'
}
;
const
ignoredPackages
=
[
'
spdx
-
license
-
ids
3
.
0
.
5
'
]
;
function
_passesSpdx
(
licenses
:
string
[
]
accepted
:
string
[
]
)
{
try
{
return
spdxSatisfies
(
licenses
.
join
(
'
AND
'
)
accepted
.
join
(
'
OR
'
)
)
;
}
catch
{
return
false
;
}
}
function
main
(
)
:
Promise
<
number
>
{
return
new
Promise
(
resolve
=
>
{
const
startFolder
=
path
.
join
(
__dirname
'
.
.
'
'
.
.
'
)
;
checker
.
init
(
{
start
:
startFolder
excludePrivatePackages
:
true
}
(
err
:
Error
json
:
object
)
=
>
{
if
(
err
)
{
console
.
error
(
Something
happened
:
\
n
{
err
.
message
}
)
;
resolve
(
1
)
;
}
else
{
console
.
info
(
Testing
{
Object
.
keys
(
json
)
.
length
}
packages
.
\
n
)
;
const
badLicensePackages
=
Object
.
keys
(
json
)
.
map
(
key
=
>
{
return
{
id
:
key
licenses
:
(
[
]
as
string
[
]
)
.
concat
(
(
json
[
key
]
as
{
licenses
:
string
[
]
}
)
.
licenses
)
.
map
(
x
=
>
{
return
x
.
replace
(
/
\
*
/
'
'
)
;
}
)
.
map
(
x
=
>
{
return
x
in
licenseReplacements
?
licenseReplacements
[
x
]
:
x
;
}
)
}
;
}
)
.
filter
(
pkg
=
>
{
return
!
_passesSpdx
(
pkg
.
licenses
allowedLicenses
)
;
}
)
.
filter
(
pkg
=
>
{
return
!
ignoredPackages
.
find
(
ignored
=
>
{
return
ignored
=
=
=
pkg
.
id
;
}
)
;
}
)
;
if
(
badLicensePackages
.
length
>
0
)
{
console
.
error
(
'
Invalid
package
licences
found
:
'
)
;
badLicensePackages
.
forEach
(
pkg
=
>
{
console
.
error
(
{
pkg
.
id
}
:
{
JSON
.
stringify
(
pkg
.
licenses
)
}
)
;
}
)
;
console
.
error
(
\
n
{
badLicensePackages
.
length
}
total
packages
with
invalid
licenses
.
)
;
resolve
(
2
)
;
}
else
{
console
.
info
(
'
All
package
licenses
are
valid
.
'
)
;
resolve
(
0
)
;
}
}
}
)
;
}
)
;
}
main
(
)
.
then
(
code
=
>
{
return
process
.
exit
(
code
)
;
}
)
;
