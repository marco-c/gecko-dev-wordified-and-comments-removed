"
use
strict
"
;
const
CDP
=
require
(
"
chrome
-
remote
-
interface
"
)
;
async
function
demo
(
)
{
let
client
;
try
{
client
=
await
CDP
(
)
;
const
{
Log
Page
Runtime
}
=
client
;
Runtime
.
enable
(
)
;
const
{
context
}
=
await
Runtime
.
executionContextCreated
(
)
;
const
contextId
=
context
.
id
;
let
{
result
}
=
await
Runtime
.
evaluate
(
{
expression
:
"
this
.
obj
=
{
foo
:
true
}
;
this
.
obj
"
contextId
}
)
;
console
.
log
(
"
1
"
result
)
;
(
{
result
}
=
await
Runtime
.
evaluate
(
{
expression
:
"
this
.
obj
"
contextId
}
)
)
;
console
.
log
(
"
2
"
result
)
;
(
{
result
}
=
await
Runtime
.
evaluate
(
{
expression
:
"
this
.
obj
.
foo
"
contextId
}
)
)
;
console
.
log
(
"
3
"
result
)
;
Log
.
enable
(
)
;
Log
.
entryAdded
(
(
{
entry
}
)
=
>
{
const
{
timestamp
level
text
args
}
=
entry
;
const
msg
=
text
|
|
args
.
join
(
"
"
)
;
console
.
log
(
{
new
Date
(
timestamp
)
}
\
t
{
level
.
toUpperCase
(
)
}
\
t
{
msg
}
)
;
}
)
;
await
Page
.
enable
(
)
;
const
onLoad
=
Page
.
loadEventFired
(
)
;
await
Page
.
navigate
(
{
url
:
"
data
:
text
/
html
test
-
page
<
script
>
console
.
log
(
'
foo
'
)
;
<
/
script
>
<
script
>
'
<
/
script
>
"
}
)
;
await
onLoad
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
finally
{
if
(
client
)
{
await
client
.
close
(
)
;
}
}
}
demo
(
)
;
