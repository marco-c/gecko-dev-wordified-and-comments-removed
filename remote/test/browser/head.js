"
use
strict
"
;
const
{
RemoteAgent
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
RemoteAgent
.
jsm
"
)
;
const
{
RemoteAgentError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Error
.
jsm
"
)
;
const
original_add_task
=
add_task
.
bind
(
this
)
;
this
.
add_task
=
function
(
test
)
{
original_add_task
(
async
function
(
)
{
try
{
await
test
(
)
;
}
catch
(
e
)
{
if
(
e
.
response
)
{
throw
RemoteAgentError
.
fromJSON
(
e
.
response
)
;
}
else
{
throw
e
;
}
}
}
)
;
}
;
const
CRI_URI
=
"
http
:
/
/
example
.
com
/
browser
/
remote
/
test
/
browser
/
chrome
-
remote
-
interface
.
js
"
;
function
createTestDocument
(
)
{
const
browser
=
Services
.
appShell
.
createWindowlessBrowser
(
true
)
;
const
webNavigation
=
browser
.
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
const
system
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
webNavigation
.
createAboutBlankContentViewer
(
system
system
)
;
registerCleanupFunction
(
(
)
=
>
browser
.
close
(
)
)
;
return
webNavigation
.
document
;
}
async
function
getCDP
(
)
{
const
document
=
createTestDocument
(
)
;
const
script
=
document
.
createElement
(
"
script
"
)
;
script
.
setAttribute
(
"
src
"
CRI_URI
)
;
document
.
documentElement
.
appendChild
(
script
)
;
await
new
Promise
(
resolve
=
>
{
script
.
addEventListener
(
"
load
"
resolve
{
once
:
true
}
)
;
}
)
;
const
window
=
document
.
defaultView
.
wrappedJSObject
;
window
.
criRequest
=
(
options
callback
)
=
>
{
const
{
host
port
path
}
=
options
;
const
url
=
http
:
/
/
{
host
}
:
{
port
}
{
path
}
;
const
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
GET
"
url
true
)
;
xhr
.
overrideMimeType
(
"
text
/
plain
"
)
;
xhr
.
send
(
null
)
;
xhr
.
onload
=
(
)
=
>
callback
(
null
xhr
.
responseText
)
;
xhr
.
onerror
=
e
=
>
callback
(
e
null
)
;
}
;
return
window
.
CDP
;
}
function
getTargets
(
CDP
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
CDP
.
List
(
null
(
err
targets
)
=
>
{
if
(
err
)
{
reject
(
err
)
;
return
;
}
resolve
(
targets
)
;
}
)
;
}
)
;
}
async
function
setupTestForUri
(
uri
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
uri
)
;
await
RemoteAgent
.
listen
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
:
9222
"
)
)
;
const
CDP
=
await
getCDP
(
)
;
const
client
=
await
CDP
(
{
target
(
list
)
{
return
list
.
find
(
target
=
>
{
return
target
.
url
=
=
uri
;
}
)
;
}
}
)
;
ok
(
true
"
CDP
client
has
been
instantiated
"
)
;
return
{
client
tab
}
;
}
function
toDataURL
(
src
doctype
=
"
html
"
)
{
let
doc
mime
;
switch
(
doctype
)
{
case
"
html
"
:
mime
=
"
text
/
html
;
charset
=
utf
-
8
"
;
doc
=
<
!
doctype
html
>
\
n
<
meta
charset
=
utf
-
8
>
\
n
{
src
}
;
break
;
default
:
throw
new
Error
(
"
Unexpected
doctype
:
"
+
doctype
)
;
}
return
data
:
{
mime
}
{
encodeURIComponent
(
doc
)
}
;
}
function
getContentProperty
(
prop
)
{
info
(
Retrieve
{
prop
}
on
the
content
window
)
;
return
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
prop
_prop
=
>
content
[
_prop
]
)
;
}
