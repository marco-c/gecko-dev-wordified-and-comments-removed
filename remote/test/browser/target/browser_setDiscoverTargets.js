"
use
strict
"
;
add_task
(
async
function
mainTarget
(
{
Target
}
)
{
const
{
targetInfo
}
=
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
Target
.
targetCreated
(
target
=
>
{
if
(
target
.
targetInfo
.
type
=
=
"
browser
"
)
{
unsubscribe
(
)
;
resolve
(
target
)
;
}
}
)
;
Target
.
setDiscoverTargets
(
{
discover
:
true
}
)
;
}
)
;
ok
(
!
!
targetInfo
"
Target
info
for
main
target
has
been
found
"
)
;
ok
(
!
!
targetInfo
.
targetId
"
Main
target
has
a
non
-
empty
target
id
"
)
;
is
(
targetInfo
.
type
"
browser
"
"
Type
of
target
is
browser
"
)
;
}
{
createTab
:
false
}
)
;
add_task
(
async
function
pageTargets
(
{
Target
}
_
tab
)
{
const
url
=
toDataURL
(
"
pageTargets
"
)
;
await
loadURL
(
url
)
;
const
targets
=
await
new
Promise
(
resolve
=
>
{
const
targets
=
[
]
;
const
unsubscribe
=
Target
.
targetCreated
(
target
=
>
{
if
(
target
.
targetInfo
.
type
=
=
"
page
"
)
{
targets
.
push
(
target
)
;
if
(
targets
.
length
=
=
gBrowser
.
tabs
.
length
)
{
unsubscribe
(
)
;
resolve
(
targets
)
;
}
}
}
)
;
Target
.
setDiscoverTargets
(
{
discover
:
true
}
)
;
}
)
;
const
filtered_targets
=
targets
.
filter
(
target
=
>
{
return
target
.
targetInfo
.
targetId
=
=
tab
.
linkedBrowser
.
browsingContext
.
id
;
}
)
;
is
(
filtered_targets
.
length
1
"
The
current
target
has
been
found
"
)
;
const
{
targetInfo
}
=
filtered_targets
[
0
]
;
ok
(
!
!
targetInfo
"
Target
info
for
current
tab
has
been
found
"
)
;
ok
(
!
!
targetInfo
.
targetId
"
Page
target
has
a
non
-
empty
target
id
"
)
;
is
(
targetInfo
.
type
"
page
"
"
Type
of
current
target
is
'
page
'
"
)
;
is
(
targetInfo
.
url
url
"
Page
target
has
a
non
-
empty
target
id
"
)
;
}
)
;
