"
use
strict
"
;
const
{
RemoteAgent
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
RemoteAgent
.
jsm
"
)
;
add_task
(
async
function
(
)
{
try
{
await
testCDP
(
)
;
}
catch
(
e
)
{
if
(
e
.
response
)
{
throw
new
Error
(
"
CDP
Exception
:
\
n
"
+
e
.
response
+
"
\
n
"
)
;
}
else
{
throw
e
;
}
}
}
)
;
async
function
testCDP
(
)
{
RemoteAgent
.
init
(
)
;
RemoteAgent
.
tabs
.
start
(
)
;
RemoteAgent
.
listen
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
:
9222
"
)
)
;
const
CDP
=
await
getCDP
(
)
;
const
{
webSocketDebuggerUrl
}
=
await
CDP
.
Version
(
)
;
is
(
webSocketDebuggerUrl
"
ws
:
/
/
localhost
:
9222
/
devtools
/
browser
"
"
Version
endpoint
refers
to
/
devtools
/
browser
target
"
)
;
const
client
=
await
CDP
(
{
"
target
"
:
webSocketDebuggerUrl
}
)
;
ok
(
true
"
CDP
client
has
been
instantiated
"
)
;
const
{
Target
}
=
client
;
ok
(
"
Target
"
in
client
"
Target
domain
is
available
"
)
;
Target
.
setDiscoverTargets
(
{
discover
:
true
}
)
;
const
targetCreated
=
Target
.
targetCreated
(
)
;
const
{
targetId
}
=
await
Target
.
createTarget
(
)
;
ok
(
true
"
Target
created
"
)
;
ok
(
!
!
targetId
"
createTarget
returns
a
non
-
empty
target
id
"
)
;
const
{
targetInfo
}
=
await
targetCreated
;
is
(
targetId
targetInfo
.
targetId
"
createTarget
and
targetCreated
refers
to
the
same
target
id
"
)
;
is
(
targetInfo
.
type
"
page
"
"
The
target
is
a
page
"
)
;
const
attachedToTarget
=
Target
.
attachedToTarget
(
)
;
const
{
sessionId
}
=
await
Target
.
attachToTarget
(
{
targetId
}
)
;
ok
(
true
"
Target
attached
"
)
;
const
attachedEvent
=
await
attachedToTarget
;
ok
(
true
"
Received
Target
.
attachToTarget
event
"
)
;
is
(
attachedEvent
.
sessionId
sessionId
"
attachedToTarget
and
attachToTarget
returns
the
same
session
id
"
)
;
is
(
attachedEvent
.
targetInfo
.
type
"
page
"
"
attachedToTarget
creates
a
tab
by
default
"
)
;
await
client
.
close
(
)
;
ok
(
true
"
The
client
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
RemoteAgent
.
close
(
)
;
}
