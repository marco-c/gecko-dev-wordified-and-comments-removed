"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
default
-
test
-
page
"
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
await
RemoteAgent
.
listen
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
:
9222
"
)
)
;
const
CDP
=
await
getCDP
(
)
;
const
client
=
await
CDP
(
{
target
(
list
)
{
return
list
.
find
(
target
=
>
target
.
url
=
=
TEST_URI
)
;
}
}
)
;
ok
(
true
"
CDP
client
has
been
instantiated
"
)
;
const
firstContext
=
await
testRuntimeEnable
(
client
)
;
const
contextId
=
firstContext
.
id
;
await
testObjectReferences
(
client
contextId
)
;
await
testExceptions
(
client
contextId
)
;
await
client
.
close
(
)
;
ok
(
true
"
The
client
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
RemoteAgent
.
close
(
)
;
}
)
;
async
function
testRuntimeEnable
(
{
Runtime
}
)
{
await
Runtime
.
enable
(
)
;
ok
(
true
"
Runtime
domain
has
been
enabled
"
)
;
const
{
context
}
=
await
Runtime
.
executionContextCreated
(
)
;
ok
(
!
!
context
.
id
"
The
execution
context
has
an
id
"
)
;
ok
(
context
.
auxData
.
isDefault
"
The
execution
context
is
the
default
one
"
)
;
ok
(
!
!
context
.
auxData
.
frameId
"
The
execution
context
has
a
frame
id
set
"
)
;
return
context
;
}
async
function
testObjectReferences
(
{
Runtime
}
contextId
)
{
const
{
result
}
=
await
Runtime
.
evaluate
(
{
contextId
expression
:
"
(
{
foo
:
1
}
)
"
}
)
;
is
(
result
.
type
"
object
"
"
The
type
is
correct
"
)
;
is
(
result
.
subtype
null
"
The
subtype
is
null
for
objects
"
)
;
ok
(
!
!
result
.
objectId
"
Got
an
object
id
"
)
;
const
{
result
:
result2
}
=
await
Runtime
.
callFunctionOn
(
{
executionContextId
:
contextId
functionDeclaration
:
"
arg
=
>
+
+
arg
.
foo
"
arguments
:
[
{
objectId
:
result
.
objectId
}
]
}
)
;
is
(
result2
.
type
"
number
"
"
The
type
is
correct
"
)
;
is
(
result2
.
subtype
null
"
The
subtype
is
null
for
numbers
"
)
;
is
(
result2
.
value
2
"
Updated
the
existing
object
and
returned
the
incremented
value
"
)
;
const
{
result
:
result3
}
=
await
Runtime
.
callFunctionOn
(
{
executionContextId
:
contextId
functionDeclaration
:
"
arg
=
>
{
arg
.
foo
+
+
;
return
arg
;
}
"
arguments
:
[
{
objectId
:
result
.
objectId
}
]
}
)
;
is
(
result3
.
type
"
object
"
"
The
type
is
correct
"
)
;
is
(
result3
.
subtype
null
"
The
subtype
is
null
for
objects
"
)
;
ok
(
!
!
result3
.
objectId
"
Got
an
object
id
"
)
;
isnot
(
result3
.
objectId
result
.
objectId
"
The
object
id
is
stable
"
)
;
const
{
result
:
result4
}
=
await
Runtime
.
callFunctionOn
(
{
executionContextId
:
contextId
functionDeclaration
:
"
arg
=
>
arg
.
foo
"
arguments
:
[
{
objectId
:
result3
.
objectId
}
]
}
)
;
is
(
result4
.
type
"
number
"
"
The
type
is
correct
"
)
;
is
(
result4
.
subtype
null
"
The
subtype
is
null
for
numbers
"
)
;
is
(
result4
.
value
3
"
Updated
the
existing
object
and
returned
the
incremented
value
"
)
;
}
async
function
testExceptions
(
{
Runtime
}
executionContextId
)
{
let
{
exceptionDetails
}
=
await
Runtime
.
callFunctionOn
(
{
executionContextId
functionDeclaration
:
"
doesNotExists
(
)
"
}
)
;
is
(
exceptionDetails
.
text
"
doesNotExists
is
not
defined
"
"
Exception
message
is
passed
to
the
client
"
)
;
(
{
exceptionDetails
}
=
await
Runtime
.
callFunctionOn
(
{
executionContextId
functionDeclaration
:
"
(
)
=
>
doesNotExists
(
)
"
}
)
)
;
is
(
exceptionDetails
.
text
"
doesNotExists
is
not
defined
"
"
Exception
message
is
passed
to
the
client
"
)
;
}
