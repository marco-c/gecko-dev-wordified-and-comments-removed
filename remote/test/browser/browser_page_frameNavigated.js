"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
default
-
test
-
page
"
;
add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
await
RemoteAgent
.
listen
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
:
9222
"
)
)
;
const
CDP
=
await
getCDP
(
)
;
const
client
=
await
CDP
(
{
target
(
list
)
{
return
list
.
find
(
target
=
>
target
.
url
=
=
TEST_URI
)
;
}
}
)
;
ok
(
true
"
CDP
client
has
been
instantiated
"
)
;
const
{
Page
}
=
client
;
await
Page
.
enable
(
)
;
ok
(
true
"
Page
domain
has
been
enabled
"
)
;
const
promises
=
[
]
;
const
resolutions
=
new
Map
(
)
;
function
recordPromise
(
name
promise
)
{
promise
.
then
(
event
=
>
{
ok
(
true
Received
Page
.
{
name
}
)
;
resolutions
.
set
(
name
event
)
;
}
)
;
promises
.
push
(
promise
)
;
}
recordPromise
(
"
frameStoppedLoading
"
Page
.
frameStoppedLoading
(
)
)
;
recordPromise
(
"
navigatedWithinDocument
"
Page
.
navigatedWithinDocument
(
)
)
;
recordPromise
(
"
domContentEventFired
"
Page
.
domContentEventFired
(
)
)
;
recordPromise
(
"
loadEventFired
"
Page
.
loadEventFired
(
)
)
;
recordPromise
(
"
frameNavigated
"
Page
.
frameNavigated
(
)
)
;
const
url
=
"
data
:
text
/
html
;
charset
=
utf
-
8
test
-
page
"
;
const
{
frameId
}
=
await
Page
.
navigate
(
{
url
}
)
;
ok
(
true
"
A
new
page
has
been
loaded
"
)
;
ok
(
frameId
"
Page
.
navigate
returned
a
frameId
"
)
;
await
Promise
.
all
(
promises
)
;
const
expectedResolutions
=
[
"
frameNavigated
"
"
domContentEventFired
"
"
loadEventFired
"
"
navigatedWithinDocument
"
"
frameStoppedLoading
"
]
;
Assert
.
deepEqual
(
[
.
.
.
resolutions
.
keys
(
)
]
expectedResolutions
"
Received
various
Page
navigation
events
in
the
expected
order
"
)
;
const
frameNavigated
=
resolutions
.
get
(
"
frameNavigated
"
)
;
ok
(
!
frameNavigated
.
frame
.
parentId
"
frameNavigated
is
for
the
top
level
document
and
"
+
"
has
a
null
parentId
"
)
;
is
(
frameNavigated
.
frame
.
id
frameId
"
frameNavigated
id
is
the
same
than
the
one
"
+
"
returned
by
Page
.
navigate
"
)
;
is
(
frameNavigated
.
frame
.
name
undefined
"
frameNavigated
name
isn
'
t
implemented
yet
"
)
;
is
(
frameNavigated
.
frame
.
url
url
"
frameNavigated
url
is
the
same
being
given
to
"
+
"
Page
.
navigate
"
)
;
const
navigatedWithinDocument
=
resolutions
.
get
(
"
navigatedWithinDocument
"
)
;
is
(
navigatedWithinDocument
.
frameId
frameId
"
navigatedWithinDocument
frameId
is
"
+
"
the
same
than
the
one
returned
by
Page
.
navigate
"
)
;
is
(
navigatedWithinDocument
.
url
url
"
navigatedWithinDocument
url
is
the
same
than
"
+
"
the
one
being
given
to
Page
.
navigate
"
)
;
const
frameStoppedLoading
=
resolutions
.
get
(
"
frameStoppedLoading
"
)
;
is
(
frameStoppedLoading
.
frameId
frameId
"
frameStoppedLoading
frameId
is
the
same
"
+
"
than
the
one
returned
by
Page
.
navigate
"
)
;
await
client
.
close
(
)
;
ok
(
true
"
The
client
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
RemoteAgent
.
close
(
)
;
}
)
;
