"
use
strict
"
;
const
TEST_URI
=
"
data
:
text
/
html
;
charset
=
utf
-
8
default
-
test
-
page
"
;
add_task
(
async
function
(
)
{
try
{
await
testCDP
(
)
;
}
catch
(
e
)
{
if
(
e
.
response
)
{
throw
new
Error
(
"
CDP
Exception
:
\
n
"
+
e
.
response
+
"
\
n
"
)
;
}
else
{
throw
e
;
}
}
}
)
;
async
function
testCDP
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
const
RemoteAgent
=
Cc
[
"
mozilla
.
org
/
remote
/
agent
"
]
.
getService
(
Ci
.
nsISupports
)
.
wrappedJSObject
;
RemoteAgent
.
tabs
.
start
(
)
;
RemoteAgent
.
listen
(
Services
.
io
.
newURI
(
"
http
:
/
/
localhost
:
9222
"
)
)
;
const
CDP
=
await
getCDP
(
)
;
const
client
=
await
CDP
(
{
target
(
list
)
{
return
list
.
find
(
target
=
>
{
return
target
.
url
=
=
TEST_URI
;
}
)
;
}
}
)
;
ok
(
true
"
CDP
client
has
been
instantiated
"
)
;
const
{
Browser
Log
Page
}
=
client
;
ok
(
"
Browser
"
in
client
"
Browser
domain
is
available
"
)
;
ok
(
"
Log
"
in
client
"
Log
domain
is
available
"
)
;
ok
(
"
Page
"
in
client
"
Page
domain
is
available
"
)
;
const
version
=
await
Browser
.
getVersion
(
)
;
is
(
version
.
product
"
Firefox
"
"
Browser
.
getVersion
works
"
)
;
Log
.
enable
(
)
;
ok
(
true
"
Log
domain
has
been
enabled
"
)
;
Log
.
entryAdded
(
(
{
entry
}
)
=
>
{
const
{
timestamp
level
text
args
}
=
entry
;
const
msg
=
text
|
|
args
.
join
(
"
"
)
;
console
.
log
(
{
new
Date
(
timestamp
)
}
\
t
{
level
.
toUpperCase
(
)
}
\
t
{
msg
}
)
;
}
)
;
await
Page
.
enable
(
)
;
ok
(
true
"
Page
domain
has
been
enabled
"
)
;
const
frameStoppedLoading
=
Page
.
frameStoppedLoading
(
)
;
const
navigatedWithinDocument
=
Page
.
navigatedWithinDocument
(
)
;
const
loadEventFired
=
Page
.
loadEventFired
(
)
;
await
Page
.
navigate
(
{
url
:
"
data
:
text
/
html
;
charset
=
utf
-
8
test
-
page
<
script
>
console
.
log
(
'
foo
'
)
;
<
/
script
>
<
script
>
'
<
/
script
>
"
}
)
;
ok
(
true
"
A
new
page
has
been
loaded
"
)
;
await
loadEventFired
;
ok
(
true
"
Page
.
loadEventFired
fired
"
)
;
await
frameStoppedLoading
;
ok
(
true
"
Page
.
frameStoppedLoading
fired
"
)
;
await
navigatedWithinDocument
;
ok
(
true
"
Page
.
navigatedWithinDocument
fired
"
)
;
await
client
.
close
(
)
;
ok
(
true
"
The
client
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
RemoteAgent
.
close
(
)
;
}
