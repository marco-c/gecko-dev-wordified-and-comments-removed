"
use
strict
"
;
const
PAGE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
remote
/
test
/
browser
/
doc_input_dispatchKeyEvent_race
.
html
"
;
add_task
(
async
function
(
)
{
const
{
client
tab
}
=
await
setupForURL
(
PAGE_URL
)
;
is
(
gBrowser
.
selectedTab
tab
"
Selected
tab
is
the
target
tab
"
)
;
const
{
Input
Runtime
}
=
client
;
info
(
"
Enable
the
Runtime
domain
"
)
;
await
Runtime
.
enable
(
)
;
const
{
context
}
=
await
Runtime
.
executionContextCreated
(
)
;
info
(
"
Focus
the
input
on
the
page
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
(
)
{
const
input
=
content
.
document
.
querySelector
(
"
input
"
)
;
input
.
focus
(
)
;
is
(
input
content
.
document
.
activeElement
"
Input
should
be
focused
"
)
;
}
)
;
await
checkWindowTestValue
(
"
initial
-
value
"
context
.
id
Runtime
)
;
info
(
"
Write
'
hhhhhh
'
(
'
h
'
times
6
)
"
)
;
for
(
let
i
=
0
;
i
<
6
;
i
+
+
)
{
await
dispatchKeyEvent
(
Input
"
h
"
72
"
keyDown
"
)
;
await
dispatchKeyEvent
(
Input
"
h
"
72
"
keyUp
"
)
;
}
await
checkWindowTestValue
(
"
hhhhhh
"
context
.
id
Runtime
)
;
info
(
"
Write
'
aaaaaa
'
with
6
consecutive
keydown
and
one
keyup
"
)
;
await
Promise
.
all
(
[
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
dispatchKeyEvent
(
Input
"
a
"
65
"
keyDown
"
)
]
)
;
await
dispatchKeyEvent
(
Input
"
a
"
65
"
keyUp
"
)
;
await
checkWindowTestValue
(
"
hhhhhhaaaaaa
"
context
.
id
Runtime
)
;
await
client
.
close
(
)
;
ok
(
true
"
The
client
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
RemoteAgent
.
close
(
)
;
}
)
;
function
dispatchKeyEvent
(
Input
key
keyCode
type
modifiers
=
0
)
{
info
(
Send
{
type
}
for
key
{
key
}
)
;
return
Input
.
dispatchKeyEvent
(
{
type
modifiers
windowsVirtualKeyCode
:
keyCode
key
}
)
;
}
async
function
checkWindowTestValue
(
expected
contextId
Runtime
)
{
info
(
"
Retrieve
the
value
of
window
.
testValue
in
the
test
page
"
)
;
const
{
result
}
=
await
Runtime
.
evaluate
(
{
contextId
expression
:
"
window
.
testValue
"
}
)
;
is
(
result
.
value
expected
"
Content
window
test
value
is
correct
"
)
;
}
