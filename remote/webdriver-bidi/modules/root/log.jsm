"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
log
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContextDescriptorType
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
Module
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
}
)
;
class
Log
extends
Module
{
destroy
(
)
{
}
_subscribeEvent
(
params
)
{
switch
(
params
.
event
)
{
case
"
log
.
entryAdded
"
:
return
this
.
messageHandler
.
addSessionData
(
{
moduleName
:
"
log
"
category
:
"
event
"
contextDescriptor
:
{
type
:
ContextDescriptorType
.
All
}
values
:
[
"
log
.
entryAdded
"
]
}
)
;
default
:
throw
new
Error
(
Unsupported
event
for
log
module
{
params
.
event
}
)
;
}
}
_unsubscribeEvent
(
params
)
{
switch
(
params
.
event
)
{
case
"
log
.
entryAdded
"
:
return
this
.
messageHandler
.
removeSessionData
(
{
moduleName
:
"
log
"
category
:
"
event
"
contextDescriptor
:
{
type
:
ContextDescriptorType
.
All
}
values
:
[
"
log
.
entryAdded
"
]
}
)
;
default
:
throw
new
Error
(
Unsupported
event
for
log
module
{
params
.
event
}
)
;
}
}
static
get
supportedEvents
(
)
{
return
[
"
log
.
entryAdded
"
]
;
}
}
const
log
=
Log
;
