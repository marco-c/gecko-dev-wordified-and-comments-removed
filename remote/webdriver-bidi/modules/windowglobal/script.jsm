"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
script
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Module
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
addDebuggerToGlobal
:
"
resource
:
/
/
gre
/
modules
/
jsdebugger
.
jsm
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
serialize
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
RemoteValue
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
dbg
"
(
)
=
>
{
lazy
.
addDebuggerToGlobal
(
globalThis
)
;
return
new
Debugger
(
)
;
}
)
;
class
ScriptModule
extends
Module
{
#
global
;
constructor
(
messageHandler
)
{
super
(
messageHandler
)
;
this
.
#
global
=
lazy
.
dbg
.
makeGlobalObjectReference
(
this
.
messageHandler
.
window
)
;
}
destroy
(
)
{
this
.
#
global
=
null
;
}
#
toRawObject
(
maybeDebuggerObject
)
{
if
(
maybeDebuggerObject
instanceof
Debugger
.
Object
)
{
const
rawObject
=
maybeDebuggerObject
.
unsafeDereference
(
)
;
return
Cu
.
waiveXrays
(
rawObject
)
;
}
return
maybeDebuggerObject
;
}
evaluateExpression
(
options
)
{
const
{
expression
}
=
options
;
const
rv
=
this
.
#
global
.
executeInGlobal
(
expression
)
;
if
(
"
return
"
in
rv
)
{
return
{
result
:
lazy
.
serialize
(
this
.
#
toRawObject
(
rv
.
return
)
1
)
}
;
}
throw
new
lazy
.
error
.
UnsupportedOperationError
(
Unsupported
completion
value
for
expression
evaluation
)
;
}
}
const
script
=
ScriptModule
;
