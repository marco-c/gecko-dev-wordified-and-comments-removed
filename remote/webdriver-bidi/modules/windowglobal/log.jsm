"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
log
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
Module
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ConsoleAPIListener
:
"
chrome
:
/
/
remote
/
content
/
shared
/
listeners
/
ConsoleAPIListener
.
jsm
"
ConsoleListener
:
"
chrome
:
/
/
remote
/
content
/
shared
/
listeners
/
ConsoleListener
.
jsm
"
isChromeFrame
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Stack
.
jsm
"
serialize
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
RemoteValue
.
jsm
"
}
)
;
class
LogModule
extends
Module
{
#
consoleAPIListener
;
#
consoleMessageListener
;
constructor
(
messageHandler
)
{
super
(
messageHandler
)
;
this
.
#
consoleAPIListener
=
new
lazy
.
ConsoleAPIListener
(
this
.
messageHandler
.
innerWindowId
)
;
this
.
#
consoleAPIListener
.
on
(
"
message
"
this
.
#
onConsoleAPIMessage
)
;
this
.
#
consoleMessageListener
=
new
lazy
.
ConsoleListener
(
this
.
messageHandler
.
innerWindowId
)
;
this
.
#
consoleMessageListener
.
on
(
"
error
"
this
.
#
onJavaScriptError
)
;
}
destroy
(
)
{
this
.
#
consoleAPIListener
.
off
(
"
message
"
this
.
#
onConsoleAPIMessage
)
;
this
.
#
consoleAPIListener
.
destroy
(
)
;
this
.
#
consoleMessageListener
.
off
(
"
error
"
this
.
#
onJavaScriptError
)
;
this
.
#
consoleMessageListener
.
destroy
(
)
;
}
#
buildSource
(
)
{
return
{
realm
:
this
.
messageHandler
.
window
.
windowGlobalChild
?
.
innerWindowId
.
toString
(
)
context
:
this
.
messageHandler
.
context
}
;
}
#
buildStackTrace
(
stackTrace
)
{
if
(
stackTrace
=
=
undefined
)
{
return
undefined
;
}
const
callFrames
=
stackTrace
.
filter
(
frame
=
>
!
lazy
.
isChromeFrame
(
frame
)
)
.
map
(
frame
=
>
{
return
{
columnNumber
:
frame
.
columnNumber
functionName
:
frame
.
functionName
lineNumber
:
frame
.
lineNumber
-
1
url
:
frame
.
filename
}
;
}
)
;
return
{
callFrames
}
;
}
#
getLogEntryLevelFromConsoleMethod
(
method
)
{
switch
(
method
)
{
case
"
assert
"
:
case
"
error
"
:
return
"
error
"
;
case
"
debug
"
:
case
"
trace
"
:
return
"
debug
"
;
case
"
warn
"
:
case
"
warning
"
:
return
"
warning
"
;
default
:
return
"
info
"
;
}
}
#
onConsoleAPIMessage
=
(
eventName
data
=
{
}
)
=
>
{
const
{
arguments
:
messageArguments
level
:
method
stacktrace
timeStamp
}
=
data
;
const
logEntrylevel
=
this
.
#
getLogEntryLevelFromConsoleMethod
(
method
)
;
const
timestamp
=
timeStamp
|
|
Date
.
now
(
)
;
let
text
=
"
"
;
const
args
=
messageArguments
|
|
[
]
;
text
+
=
args
.
map
(
String
)
.
join
(
"
"
)
;
const
serializedArgs
=
[
]
;
for
(
const
arg
of
args
)
{
serializedArgs
.
push
(
lazy
.
serialize
(
arg
)
)
;
}
const
source
=
this
.
#
buildSource
(
)
;
let
stackTrace
;
if
(
[
"
assert
"
"
error
"
"
trace
"
"
warn
"
]
.
includes
(
method
)
)
{
stackTrace
=
this
.
#
buildStackTrace
(
stacktrace
)
;
}
const
entry
=
{
type
:
"
console
"
method
source
args
:
serializedArgs
level
:
logEntrylevel
text
timestamp
stackTrace
}
;
this
.
emitProtocolEvent
(
"
log
.
entryAdded
"
entry
)
;
}
;
#
onJavaScriptError
=
(
eventName
data
=
{
}
)
=
>
{
const
{
level
message
stacktrace
timeStamp
}
=
data
;
const
entry
=
{
type
:
"
javascript
"
level
source
:
this
.
#
buildSource
(
)
text
:
message
timestamp
:
timeStamp
|
|
Date
.
now
(
)
stackTrace
:
this
.
#
buildStackTrace
(
stacktrace
)
}
;
this
.
emitProtocolEvent
(
"
log
.
entryAdded
"
entry
)
;
}
;
#
subscribeEvent
(
event
)
{
if
(
event
=
=
=
"
log
.
entryAdded
"
)
{
this
.
#
consoleAPIListener
.
startListening
(
)
;
this
.
#
consoleMessageListener
.
startListening
(
)
;
}
}
#
unsubscribeEvent
(
event
)
{
if
(
event
=
=
=
"
log
.
entryAdded
"
)
{
this
.
#
consoleAPIListener
.
stopListening
(
)
;
this
.
#
consoleMessageListener
.
stopListening
(
)
;
}
}
_applySessionData
(
params
)
{
const
{
category
added
=
[
]
removed
=
[
]
}
=
params
;
if
(
category
=
=
=
"
event
"
)
{
for
(
const
event
of
added
)
{
this
.
#
subscribeEvent
(
event
)
;
}
for
(
const
event
of
removed
)
{
this
.
#
unsubscribeEvent
(
event
)
;
}
}
}
}
const
log
=
LogModule
;
