"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
log
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
ConsoleListener
:
"
chrome
:
/
/
remote
/
content
/
shared
/
listeners
/
ConsoleListener
.
jsm
"
Module
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
serialize
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
RemoteValue
.
jsm
"
}
)
;
class
Log
extends
Module
{
#
consoleMessageListener
;
constructor
(
messageHandler
)
{
super
(
messageHandler
)
;
this
.
#
consoleMessageListener
=
new
ConsoleListener
(
this
.
messageHandler
.
innerWindowId
)
;
this
.
#
consoleMessageListener
.
on
(
"
error
"
this
.
#
onJavaScriptError
)
;
}
destroy
(
)
{
this
.
#
consoleMessageListener
.
off
(
"
error
"
this
.
#
onJavaScriptError
)
;
this
.
#
consoleMessageListener
.
destroy
(
)
;
Services
.
obs
.
removeObserver
(
this
.
#
onConsoleAPILogEvent
"
console
-
api
-
log
-
event
"
)
;
}
/
*
*
*
Private
methods
*
/
_applySessionData
(
params
)
{
/
/
TODO
:
Bug
1741861
.
Move
this
logic
to
a
shared
module
or
the
an
abstract
/
/
class
.
if
(
params
.
category
=
=
=
"
event
"
)
{
for
(
const
event
of
params
.
values
)
{
this
.
_subscribeEvent
(
event
)
;
}
}
}
_subscribeEvent
(
event
)
{
if
(
event
=
=
=
"
log
.
entryAdded
"
)
{
this
.
#
consoleMessageListener
.
startListening
(
)
;
Services
.
obs
.
addObserver
(
this
.
#
onConsoleAPILogEvent
"
console
-
api
-
log
-
event
"
)
;
}
}
#
onConsoleAPILogEvent
=
message
=
>
{
const
messageObject
=
message
.
wrappedJSObject
;
if
(
messageObject
.
innerID
!
=
=
this
.
messageHandler
.
innerWindowId
)
{
/
/
If
the
message
doesn
'
t
match
the
innerWindowId
of
the
current
context
/
/
ignore
it
.
return
;
}
/
/
Step
numbers
below
refer
to
the
specifications
at
/
/
https
:
/
/
w3c
.
github
.
io
/
webdriver
-
bidi
/
#
event
-
log
-
entryAdded
/
/
1
.
The
console
method
used
to
create
the
messageObject
is
stored
in
the
/
/
level
property
.
Translate
it
to
a
log
.
LogEntry
level
const
method
=
messageObject
.
level
;
const
level
=
this
.
_getLogEntryLevelFromConsoleMethod
(
method
)
;
/
/
2
.
Use
the
message
'
s
timeStamp
or
fallback
on
the
current
time
value
.
const
timestamp
=
messageObject
.
timeStamp
|
|
Date
.
now
(
)
;
/
/
3
.
Start
assembling
the
text
representation
of
the
message
.
let
text
=
"
"
;
const
args
=
messageObject
.
arguments
|
|
[
]
;
text
+
=
args
.
map
(
String
)
.
join
(
"
"
)
;
const
serializedArgs
=
[
]
;
for
(
const
arg
of
args
)
{
serializedArgs
.
push
(
serialize
(
arg
)
)
;
}
const
entry
=
{
type
:
"
console
"
level
text
timestamp
method
realm
:
null
args
:
serializedArgs
}
;
this
.
messageHandler
.
emitMessageHandlerEvent
(
"
log
.
entryAdded
"
entry
)
;
}
;
#
onJavaScriptError
=
(
eventName
data
=
{
}
)
=
>
{
const
{
level
message
timestamp
}
=
data
;
const
entry
=
{
type
:
"
javascript
"
level
text
:
message
timestamp
stackTrace
:
undefined
}
;
this
.
messageHandler
.
emitMessageHandlerEvent
(
"
log
.
entryAdded
"
entry
)
;
}
;
_getLogEntryLevelFromConsoleMethod
(
method
)
{
switch
(
method
)
{
case
"
assert
"
:
case
"
error
"
:
return
"
error
"
;
case
"
debug
"
:
case
"
trace
"
:
return
"
debug
"
;
case
"
warn
"
:
case
"
warning
"
:
return
"
warning
"
;
default
:
return
"
info
"
;
}
}
}
const
log
=
Log
;
