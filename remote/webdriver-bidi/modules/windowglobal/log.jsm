"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
log
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Module
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
serialize
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
RemoteValue
.
jsm
"
}
)
;
class
Log
extends
Module
{
constructor
(
messageHandler
)
{
super
(
messageHandler
)
;
this
.
_onConsoleAPILogEvent
=
this
.
_onConsoleAPILogEvent
.
bind
(
this
)
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
.
_onConsoleAPILogEvent
"
console
-
api
-
log
-
event
"
)
;
}
_applySessionData
(
params
)
{
if
(
params
.
category
=
=
=
"
event
"
)
{
for
(
const
event
of
params
.
values
)
{
this
.
_subscribeEvent
(
event
)
;
}
}
}
_subscribeEvent
(
event
)
{
if
(
event
=
=
=
"
log
.
entryAdded
"
)
{
Services
.
obs
.
addObserver
(
this
.
_onConsoleAPILogEvent
"
console
-
api
-
log
-
event
"
)
;
}
}
_onConsoleAPILogEvent
(
message
)
{
const
browsingContext
=
BrowsingContext
.
get
(
this
.
messageHandler
.
contextId
)
;
const
innerWindowId
=
browsingContext
.
window
.
windowGlobalChild
?
.
innerWindowId
;
const
messageObject
=
message
.
wrappedJSObject
;
if
(
innerWindowId
!
=
=
messageObject
.
innerID
)
{
return
;
}
const
method
=
messageObject
.
level
;
const
level
=
this
.
_getLogEntryLevelFromConsoleMethod
(
method
)
;
const
timestamp
=
messageObject
.
timeStamp
|
|
Date
.
now
(
)
;
let
text
=
"
"
;
const
args
=
messageObject
.
arguments
|
|
[
]
;
text
+
=
args
.
map
(
String
)
.
join
(
"
"
)
;
const
serializedArgs
=
[
]
;
for
(
const
arg
of
args
)
{
serializedArgs
.
push
(
serialize
(
arg
)
)
;
}
const
entry
=
{
level
text
timestamp
method
realm
:
null
args
:
serializedArgs
type
:
"
console
"
}
;
this
.
messageHandler
.
emitMessageHandlerEvent
(
"
log
.
entryAdded
"
entry
)
;
}
_getLogEntryLevelFromConsoleMethod
(
method
)
{
switch
(
method
)
{
case
"
assert
"
:
case
"
error
"
:
return
"
error
"
;
case
"
debug
"
:
case
"
trace
"
:
return
"
debug
"
;
case
"
warn
"
:
case
"
warning
"
:
return
"
warning
"
;
default
:
return
"
info
"
;
}
}
}
const
log
=
Log
;
