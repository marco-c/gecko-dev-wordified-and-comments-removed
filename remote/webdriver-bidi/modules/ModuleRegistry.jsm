"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
getModuleClass
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
modules
=
{
root
:
{
}
"
windowglobal
-
in
-
root
"
:
{
}
windowglobal
:
{
}
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
modules
.
root
{
browsingContext
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
root
/
browsingContext
.
jsm
"
log
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
root
/
log
.
jsm
"
script
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
root
/
script
.
jsm
"
session
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
root
/
session
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
modules
[
"
windowglobal
-
in
-
root
"
]
{
browsingContext
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
windowglobal
-
in
-
root
/
browsingContext
.
jsm
"
log
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
windowglobal
-
in
-
root
/
log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
modules
.
windowglobal
{
browsingContext
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
windowglobal
/
browsingContext
.
jsm
"
log
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
windowglobal
/
log
.
jsm
"
script
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
modules
/
windowglobal
/
script
.
jsm
"
}
)
;
const
getModuleClass
=
function
(
moduleName
moduleFolder
)
{
if
(
!
modules
[
moduleFolder
]
)
{
throw
new
Error
(
Invalid
module
folder
"
{
moduleFolder
}
"
expected
one
of
"
{
Object
.
keys
(
modules
)
}
"
)
;
}
if
(
!
modules
[
moduleFolder
]
[
moduleName
]
)
{
return
null
;
}
return
modules
[
moduleFolder
]
[
moduleName
]
;
}
;
