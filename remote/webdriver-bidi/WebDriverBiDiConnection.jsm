"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
WebDriverBiDiConnection
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
truncate
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Format
.
jsm
"
WebSocketConnection
:
"
chrome
:
/
/
remote
/
content
/
shared
/
WebSocketConnection
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
Log
.
TYPES
.
WEBDRIVER_BIDI
)
)
;
class
WebDriverBiDiConnection
extends
WebSocketConnection
{
constructor
(
webSocket
httpdConnection
)
{
super
(
webSocket
httpdConnection
)
;
this
.
session
=
null
;
}
registerSession
(
session
)
{
if
(
this
.
session
)
{
throw
new
error
.
UnknownError
(
"
A
session
has
already
been
set
"
)
;
}
this
.
session
=
session
;
}
send
(
data
)
{
const
payload
=
JSON
.
stringify
(
data
null
Log
.
verbose
?
"
\
t
"
:
null
)
;
logger
.
trace
(
truncate
{
this
.
constructor
.
name
}
{
this
.
id
}
<
-
{
payload
}
)
;
super
.
send
(
data
)
;
}
sendError
(
id
error
)
{
}
sendEvent
(
method
params
)
{
}
sendResult
(
id
result
)
{
this
.
send
(
{
id
result
}
)
;
}
onClosed
(
)
{
super
.
onClosed
(
)
;
}
async
onPacket
(
packet
)
{
const
payload
=
JSON
.
stringify
(
packet
null
Log
.
verbose
?
"
\
t
"
:
null
)
;
logger
.
trace
(
truncate
{
this
.
constructor
.
name
}
{
this
.
id
}
-
>
{
payload
}
)
;
const
{
id
method
}
=
packet
;
try
{
if
(
typeof
id
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
id
'
field
"
)
;
}
if
(
typeof
method
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
method
'
field
"
)
;
}
let
result
;
this
.
sendResult
(
id
result
)
;
}
catch
(
e
)
{
this
.
sendError
(
packet
.
id
e
)
;
}
}
}
