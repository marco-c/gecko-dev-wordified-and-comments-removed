"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
WebDriverNewSessionHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
WebDriverBiDiConnection
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
WebDriverBiDiConnection
.
jsm
"
WebSocketHandshake
:
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketHandshake
.
jsm
"
}
)
;
class
WebDriverNewSessionHandler
{
constructor
(
webDriverBiDi
)
{
this
.
webDriverBiDi
=
webDriverBiDi
;
}
async
handle
(
request
response
)
{
const
webSocket
=
await
lazy
.
WebSocketHandshake
.
upgrade
(
request
response
)
;
const
conn
=
new
lazy
.
WebDriverBiDiConnection
(
webSocket
response
.
_connection
)
;
this
.
webDriverBiDi
.
addSessionlessConnection
(
conn
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIHttpRequestHandler
"
]
)
;
}
}
