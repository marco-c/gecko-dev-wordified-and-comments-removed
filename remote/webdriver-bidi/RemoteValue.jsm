"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
serialize
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
Log
.
TYPES
.
WEBDRIVER_BIDI
)
)
;
function
serialize
(
value
)
{
const
type
=
typeof
value
;
let
remoteValue
;
if
(
type
=
=
"
undefined
"
)
{
remoteValue
=
{
type
}
;
}
else
if
(
Object
.
is
(
value
null
)
)
{
remoteValue
=
{
type
:
"
null
"
}
;
}
else
if
(
Object
.
is
(
value
NaN
)
)
{
remoteValue
=
{
type
:
"
number
"
value
:
"
NaN
"
}
;
}
else
if
(
Object
.
is
(
value
-
0
)
)
{
remoteValue
=
{
type
:
"
number
"
value
:
"
-
0
"
}
;
}
else
if
(
Object
.
is
(
value
Infinity
)
)
{
remoteValue
=
{
type
:
"
number
"
value
:
"
+
Infinity
"
}
;
}
else
if
(
Object
.
is
(
value
-
Infinity
)
)
{
remoteValue
=
{
type
:
"
number
"
value
:
"
-
Infinity
"
}
;
}
else
if
(
type
=
=
"
bigint
"
)
{
remoteValue
=
{
type
value
:
value
.
toString
(
)
}
;
}
else
if
(
[
"
boolean
"
"
number
"
"
string
"
]
.
includes
(
type
)
)
{
remoteValue
=
{
type
value
}
;
}
else
{
logger
.
warn
(
Unsupported
type
for
remote
value
:
{
value
.
toString
(
)
}
)
;
}
return
remoteValue
;
}
