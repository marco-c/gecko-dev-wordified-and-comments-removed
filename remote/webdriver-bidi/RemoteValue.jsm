"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
deserialize
"
"
serialize
"
"
stringify
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
assert
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Assert
.
jsm
"
InvalidArgumentError
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
lazy
.
Log
.
TYPES
.
WEBDRIVER_BIDI
)
)
;
function
checkDateTimeString
(
dateString
)
{
const
expandedYear
=
"
[
+
-
]
\
\
d
{
6
}
"
;
const
year
=
"
\
\
d
{
4
}
"
;
const
YYYY
=
{
expandedYear
}
|
{
year
}
;
const
MM
=
"
\
\
d
{
2
}
"
;
const
DD
=
"
\
\
d
{
2
}
"
;
const
date
=
{
YYYY
}
(
?
:
-
{
MM
}
)
?
(
?
:
-
{
DD
}
)
?
;
const
HH_mm
=
"
\
\
d
{
2
}
:
\
\
d
{
2
}
"
;
const
SS
=
"
\
\
d
{
2
}
"
;
const
sss
=
"
\
\
d
{
3
}
"
;
const
TZ
=
Z
|
[
+
-
]
{
HH_mm
}
;
const
time
=
T
{
HH_mm
}
(
?
:
:
{
SS
}
(
?
:
\
\
.
{
sss
}
)
?
(
?
:
{
TZ
}
)
?
)
?
;
const
iso8601Format
=
new
RegExp
(
^
{
date
}
(
?
:
{
time
}
)
?
)
;
if
(
Number
.
isNaN
(
Date
.
parse
(
dateString
)
)
|
|
!
iso8601Format
.
test
(
dateString
)
)
{
throw
new
lazy
.
InvalidArgumentError
(
Expected
"
value
"
for
Date
to
be
a
Date
Time
string
got
{
dateString
}
)
;
}
}
function
deserializeValueList
(
serializedValueList
)
{
lazy
.
assert
.
array
(
serializedValueList
Expected
"
serializedValueList
"
to
be
an
array
got
{
serializedValueList
}
)
;
const
deserializedValues
=
[
]
;
for
(
const
item
of
serializedValueList
)
{
deserializedValues
.
push
(
deserialize
(
item
)
)
;
}
return
deserializedValues
;
}
function
deserializeKeyValueList
(
serializedKeyValueList
)
{
lazy
.
assert
.
array
(
serializedKeyValueList
Expected
"
serializedKeyValueList
"
to
be
an
array
got
{
serializedKeyValueList
}
)
;
const
deserializedKeyValueList
=
[
]
;
for
(
const
serializedKeyValue
of
serializedKeyValueList
)
{
if
(
!
Array
.
isArray
(
serializedKeyValue
)
|
|
serializedKeyValue
.
length
!
=
2
)
{
throw
new
lazy
.
InvalidArgumentError
(
Expected
key
-
value
pair
to
be
an
array
with
2
elements
got
{
serializedKeyValue
}
)
;
}
const
[
serializedKey
serializedValue
]
=
serializedKeyValue
;
const
deserializedKey
=
typeof
serializedKey
=
=
"
string
"
?
serializedKey
:
deserialize
(
serializedKey
)
;
const
deserializedValue
=
deserialize
(
serializedValue
)
;
deserializedKeyValueList
.
push
(
[
deserializedKey
deserializedValue
]
)
;
}
return
deserializedKeyValueList
;
}
function
deserialize
(
serializedValue
)
{
const
{
objectId
type
value
}
=
serializedValue
;
if
(
objectId
!
=
=
undefined
)
{
lazy
.
assert
.
string
(
objectId
Expected
"
objectId
"
to
be
a
string
got
{
objectId
}
)
;
lazy
.
logger
.
warn
(
Unsupported
type
remote
reference
with
objectId
{
objectId
}
)
;
return
undefined
;
}
lazy
.
assert
.
string
(
type
Expected
"
type
"
to
be
a
string
got
{
type
}
)
;
switch
(
type
)
{
case
"
undefined
"
:
return
undefined
;
case
"
null
"
:
return
null
;
case
"
string
"
:
lazy
.
assert
.
string
(
value
Expected
"
value
"
to
be
a
string
got
{
value
}
)
;
return
value
;
case
"
number
"
:
if
(
typeof
value
=
=
=
"
number
"
)
{
return
value
;
}
lazy
.
assert
.
in
(
value
[
"
NaN
"
"
-
0
"
"
Infinity
"
"
-
Infinity
"
]
)
;
return
Number
(
value
)
;
case
"
boolean
"
:
lazy
.
assert
.
boolean
(
value
Expected
"
value
"
to
be
a
boolean
got
{
value
}
)
;
return
value
;
case
"
bigint
"
:
lazy
.
assert
.
string
(
value
Expected
"
value
"
to
be
a
string
got
{
value
}
)
;
try
{
return
BigInt
(
value
)
;
}
catch
(
e
)
{
throw
new
lazy
.
InvalidArgumentError
(
Failed
to
deserialize
value
as
BigInt
:
{
value
}
)
;
}
case
"
array
"
:
return
deserializeValueList
(
value
)
;
case
"
date
"
:
checkDateTimeString
(
value
)
;
return
new
Date
(
value
)
;
case
"
map
"
:
return
new
Map
(
deserializeKeyValueList
(
value
)
)
;
case
"
object
"
:
return
Object
.
fromEntries
(
deserializeKeyValueList
(
value
)
)
;
case
"
regexp
"
:
lazy
.
assert
.
object
(
value
Expected
"
value
"
for
RegExp
to
be
an
object
got
{
value
}
)
;
const
{
pattern
flags
}
=
value
;
lazy
.
assert
.
string
(
pattern
Expected
"
pattern
"
for
RegExp
to
be
a
string
got
{
pattern
}
)
;
if
(
flags
!
=
=
undefined
)
{
lazy
.
assert
.
string
(
flags
Expected
"
flags
"
for
RegExp
to
be
a
string
got
{
flags
}
)
;
}
try
{
return
new
RegExp
(
pattern
flags
)
;
}
catch
(
e
)
{
throw
new
lazy
.
InvalidArgumentError
(
Failed
to
deserialize
value
as
RegExp
:
{
value
}
)
;
}
case
"
set
"
:
return
new
Set
(
deserializeValueList
(
value
)
)
;
}
lazy
.
logger
.
warn
(
Unsupported
type
for
local
value
{
type
}
)
;
return
undefined
;
}
function
serializeList
(
iterable
maxDepth
)
{
const
serialized
=
[
]
;
const
childDepth
=
maxDepth
!
=
=
null
?
maxDepth
-
1
:
null
;
for
(
const
item
of
iterable
)
{
serialized
.
push
(
serialize
(
item
childDepth
)
)
;
}
return
serialized
;
}
function
serializeMapping
(
iterable
maxDepth
)
{
const
serialized
=
[
]
;
const
childDepth
=
maxDepth
!
=
=
null
?
maxDepth
-
1
:
null
;
for
(
const
[
key
item
]
of
iterable
)
{
const
serializedKey
=
typeof
key
=
=
"
string
"
?
key
:
serialize
(
key
childDepth
)
;
const
serializedValue
=
serialize
(
item
childDepth
)
;
serialized
.
push
(
[
serializedKey
serializedValue
]
)
;
}
return
serialized
;
}
function
serialize
(
value
maxDepth
)
{
const
type
=
typeof
value
;
if
(
type
=
=
"
undefined
"
)
{
return
{
type
}
;
}
else
if
(
Object
.
is
(
value
null
)
)
{
return
{
type
:
"
null
"
}
;
}
else
if
(
Object
.
is
(
value
NaN
)
)
{
return
{
type
:
"
number
"
value
:
"
NaN
"
}
;
}
else
if
(
Object
.
is
(
value
-
0
)
)
{
return
{
type
:
"
number
"
value
:
"
-
0
"
}
;
}
else
if
(
Object
.
is
(
value
Infinity
)
)
{
return
{
type
:
"
number
"
value
:
"
Infinity
"
}
;
}
else
if
(
Object
.
is
(
value
-
Infinity
)
)
{
return
{
type
:
"
number
"
value
:
"
-
Infinity
"
}
;
}
else
if
(
type
=
=
"
bigint
"
)
{
return
{
type
value
:
value
.
toString
(
)
}
;
}
else
if
(
[
"
boolean
"
"
number
"
"
string
"
]
.
includes
(
type
)
)
{
return
{
type
value
}
;
}
const
className
=
ChromeUtils
.
getClassName
(
value
)
;
if
(
className
=
=
"
Array
"
)
{
const
remoteValue
=
{
type
:
"
array
"
}
;
if
(
maxDepth
!
=
=
null
&
&
maxDepth
>
0
)
{
remoteValue
.
value
=
serializeList
(
value
maxDepth
)
;
}
return
remoteValue
;
}
else
if
(
className
=
=
"
RegExp
"
)
{
return
{
type
:
"
regexp
"
value
:
{
pattern
:
value
.
source
flags
:
value
.
flags
}
}
;
}
else
if
(
className
=
=
"
Date
"
)
{
return
{
type
:
"
date
"
value
:
value
.
toISOString
(
)
}
;
}
else
if
(
className
=
=
"
Map
"
)
{
const
remoteValue
=
{
type
:
"
map
"
}
;
if
(
maxDepth
!
=
=
null
&
&
maxDepth
>
0
)
{
remoteValue
.
value
=
serializeMapping
(
value
.
entries
(
)
maxDepth
)
;
}
return
remoteValue
;
}
else
if
(
className
=
=
"
Set
"
)
{
const
remoteValue
=
{
type
:
"
set
"
}
;
if
(
maxDepth
!
=
=
null
&
&
maxDepth
>
0
)
{
remoteValue
.
value
=
serializeList
(
value
.
values
(
)
maxDepth
)
;
}
return
remoteValue
;
}
lazy
.
logger
.
warn
(
Unsupported
type
:
{
type
}
for
remote
value
:
{
stringify
(
value
)
}
)
;
return
undefined
;
}
function
stringify
(
obj
)
{
let
text
;
try
{
text
=
obj
!
=
=
null
&
&
typeof
obj
=
=
=
"
object
"
?
obj
.
toString
(
)
:
String
(
obj
)
;
}
catch
(
e
)
{
}
finally
{
if
(
typeof
text
!
=
"
string
"
)
{
text
=
Object
.
prototype
.
toString
.
apply
(
obj
)
;
}
}
return
text
;
}
