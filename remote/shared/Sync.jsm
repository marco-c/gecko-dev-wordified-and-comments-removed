"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AnimationFramePromise
"
"
Deferred
"
"
EventPromise
"
"
executeSoon
"
"
PollPromise
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
const
{
TYPE_REPEATING_SLACK
}
=
Ci
.
nsITimer
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
lazy
.
Log
.
TYPES
.
REMOTE_AGENT
)
)
;
function
AnimationFramePromise
(
win
)
{
const
animationFramePromise
=
new
Promise
(
resolve
=
>
{
win
.
requestAnimationFrame
(
resolve
)
;
}
)
;
const
windowClosedPromise
=
new
PollPromise
(
resolve
=
>
{
if
(
win
.
closed
)
{
resolve
(
)
;
}
}
)
;
return
Promise
.
race
(
[
animationFramePromise
windowClosedPromise
]
)
;
}
function
Deferred
(
)
{
const
deferred
=
{
}
;
deferred
.
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
fulfilled
=
false
;
deferred
.
pending
=
true
;
deferred
.
rejected
=
false
;
deferred
.
resolve
=
(
.
.
.
args
)
=
>
{
deferred
.
fulfilled
=
true
;
deferred
.
pending
=
false
;
resolve
(
.
.
.
args
)
;
}
;
deferred
.
reject
=
(
.
.
.
args
)
=
>
{
deferred
.
pending
=
false
;
deferred
.
rejected
=
true
;
reject
(
.
.
.
args
)
;
}
;
}
)
;
return
deferred
;
}
function
EventPromise
(
subject
eventName
options
=
{
}
)
{
const
{
capture
=
false
checkFn
=
null
mozSystemGroup
=
false
wantUntrusted
=
false
}
=
options
;
if
(
!
subject
|
|
!
(
"
addEventListener
"
in
subject
)
|
|
typeof
eventName
!
=
"
string
"
|
|
typeof
capture
!
=
"
boolean
"
|
|
(
checkFn
&
&
typeof
checkFn
!
=
"
function
"
)
|
|
typeof
mozSystemGroup
!
=
"
boolean
"
|
|
typeof
wantUntrusted
!
=
"
boolean
"
)
{
throw
new
TypeError
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
listener
(
event
)
{
lazy
.
logger
.
trace
(
Received
DOM
event
{
event
.
type
}
for
{
event
.
target
}
)
;
try
{
if
(
checkFn
&
&
!
checkFn
(
event
)
)
{
return
;
}
}
catch
(
e
)
{
lazy
.
logger
.
warn
(
Event
check
failed
:
{
e
.
message
}
)
;
}
subject
.
removeEventListener
(
eventName
listener
capture
)
;
executeSoon
(
(
)
=
>
resolve
(
event
)
)
;
}
subject
.
addEventListener
(
eventName
listener
{
capture
mozSystemGroup
wantUntrusted
}
)
;
}
)
;
}
function
executeSoon
(
fn
)
{
if
(
typeof
fn
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
Services
.
tm
.
dispatchToMainThread
(
fn
)
;
}
function
PollPromise
(
func
{
timeout
=
null
interval
=
10
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
if
(
typeof
func
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
if
(
timeout
!
=
null
&
&
typeof
timeout
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
if
(
typeof
interval
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
if
(
(
timeout
&
&
(
!
Number
.
isInteger
(
timeout
)
|
|
timeout
<
0
)
)
|
|
!
Number
.
isInteger
(
interval
)
|
|
interval
<
0
)
{
throw
new
RangeError
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
start
end
;
if
(
Number
.
isInteger
(
timeout
)
)
{
start
=
new
Date
(
)
.
getTime
(
)
;
end
=
start
+
timeout
;
}
let
evalFn
=
(
)
=
>
{
new
Promise
(
func
)
.
then
(
resolve
rejected
=
>
{
if
(
typeof
rejected
!
=
"
undefined
"
)
{
throw
rejected
;
}
if
(
typeof
end
!
=
"
undefined
"
&
&
(
start
=
=
end
|
|
new
Date
(
)
.
getTime
(
)
>
=
end
)
)
{
resolve
(
rejected
)
;
}
}
)
.
catch
(
reject
)
;
}
;
evalFn
(
)
;
timer
.
init
(
evalFn
interval
TYPE_REPEATING_SLACK
)
;
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
