"
use
strict
"
;
var
{
CONTEXT_DESCRIPTOR_TYPES
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
)
;
var
contextDescriptorAll
=
{
type
:
CONTEXT_DESCRIPTOR_TYPES
.
ALL
}
;
function
createRootMessageHandler
(
sessionId
)
{
const
{
RootMessageHandlerRegistry
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
RootMessageHandlerRegistry
.
jsm
"
)
;
return
RootMessageHandlerRegistry
.
getOrCreateMessageHandler
(
sessionId
)
;
}
async
function
loadURL
(
browser
url
)
{
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
return
loaded
;
}
async
function
addTab
(
url
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
removeTab
(
tab
)
;
}
)
;
return
tab
;
}
function
createFrame
(
domain
)
{
return
createFrameForUri
(
https
:
/
/
{
domain
}
/
document
-
builder
.
sjs
?
html
=
frame
-
{
domain
}
)
;
}
function
createFrameForUri
(
uri
)
{
return
<
iframe
src
=
"
{
encodeURI
(
uri
)
}
"
>
<
/
iframe
>
;
}
function
createParentBrowserElement
(
tab
type
)
{
const
parentBrowser
=
gBrowser
.
ownerDocument
.
createXULElement
(
"
browser
"
)
;
parentBrowser
.
setAttribute
(
"
type
"
type
)
;
const
container
=
gBrowser
.
getBrowserContainer
(
tab
.
linkedBrowser
)
;
container
.
appendChild
(
parentBrowser
)
;
return
parentBrowser
;
}
function
createTestMarkupWithFrames
(
)
{
const
NESTED_FRAME_MARKUP
=
createFrameForUri
(
https
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
createFrame
(
"
example
.
net
"
)
}
)
;
const
TEST_URI_MARKUP
=
{
NESTED_FRAME_MARKUP
}
{
createFrame
(
"
example
.
com
"
)
}
;
return
https
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
encodeURI
(
TEST_URI_MARKUP
)
}
;
}
async
function
installSidebarExtension
(
)
{
info
(
"
Load
the
test
extension
"
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
sidebar_action
:
{
default_panel
:
"
sidebar
.
html
"
}
}
useAddonManager
:
"
temporary
"
files
:
{
"
sidebar
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
Test
extension
<
script
src
=
"
sidebar
.
js
"
>
<
/
script
>
<
/
html
>
"
sidebar
.
js
"
:
function
(
)
{
const
{
browser
}
=
this
;
browser
.
test
.
sendMessage
(
"
sidebar
-
loaded
"
{
bcId
:
SpecialPowers
.
wrap
(
window
)
.
browsingContext
.
id
}
)
;
}
"
tab
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
Test
extension
(
tab
)
<
script
src
=
"
tab
.
js
"
>
<
/
script
>
<
/
html
>
"
tab
.
js
"
:
function
(
)
{
const
{
browser
}
=
this
;
browser
.
test
.
sendMessage
(
"
tab
-
loaded
"
{
bcId
:
SpecialPowers
.
wrap
(
window
)
.
browsingContext
.
id
}
)
;
}
}
}
)
;
info
(
"
Wait
for
the
extension
to
start
"
)
;
await
extension
.
startup
(
)
;
info
(
"
Wait
for
the
extension
browsing
context
"
)
;
const
{
bcId
}
=
await
extension
.
awaitMessage
(
"
sidebar
-
loaded
"
)
;
const
sidebarBrowser
=
BrowsingContext
.
get
(
bcId
)
.
top
.
embedderElement
;
ok
(
sidebarBrowser
"
Got
a
browser
element
for
the
extension
sidebar
"
)
;
return
{
extension
sidebarBrowser
}
;
}
