"
use
strict
"
;
add_task
(
async
function
test_broadcasting_with_frames
(
)
{
info
(
"
Navigate
the
initial
tab
to
the
test
URL
"
)
;
const
tab
=
gBrowser
.
selectedTab
;
const
NESTED_FRAME_MARKUP
=
createFrameForUri
(
http
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
createFrame
(
"
example
.
net
"
)
}
)
;
const
TEST_URI_MARKUP
=
{
NESTED_FRAME_MARKUP
}
{
createFrame
(
"
example
.
com
"
)
}
;
const
TEST_URI
=
http
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
encodeURI
(
TEST_URI_MARKUP
)
}
;
await
loadURL
(
tab
.
linkedBrowser
TEST_URI
)
;
const
contexts
=
tab
.
linkedBrowser
.
browsingContext
.
getAllBrowsingContextsInSubtree
(
)
;
is
(
contexts
.
length
4
"
Test
tab
has
3
children
contexts
"
)
;
const
rootMessageHandler
=
createRootMessageHandler
(
"
session
-
id
-
broadcasting_with_frames
"
)
;
const
broadcastValue
=
await
sendTestBroadcastCommand
(
"
TestOnlyInWindowGlobalModule
"
"
testBroadcast
"
{
}
rootMessageHandler
)
;
ok
(
Array
.
isArray
(
broadcastValue
)
"
The
broadcast
returned
an
array
of
values
"
)
;
is
(
broadcastValue
.
length
4
"
The
broadcast
returned
4
values
as
expected
"
)
;
for
(
const
context
of
contexts
)
{
ok
(
broadcastValue
.
includes
(
"
broadcast
-
"
+
context
.
id
)
"
The
broadcast
contains
the
value
for
browsing
context
"
+
context
.
id
)
;
}
rootMessageHandler
.
destroy
(
)
;
}
)
;
function
createFrame
(
domain
)
{
return
createFrameForUri
(
http
:
/
/
{
domain
}
/
document
-
builder
.
sjs
?
html
=
frame
-
{
domain
}
)
;
}
function
createFrameForUri
(
uri
)
{
return
<
iframe
src
=
"
{
encodeURI
(
uri
)
}
"
>
<
/
iframe
>
;
}
