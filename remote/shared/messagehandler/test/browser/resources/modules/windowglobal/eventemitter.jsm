"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
eventemitter
"
]
;
const
{
Module
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
)
;
class
EventEmitterModule
extends
Module
{
#
isSubscribed
;
constructor
(
messageHandler
)
{
super
(
messageHandler
)
;
this
.
#
isSubscribed
=
false
;
}
destroy
(
)
{
}
emitTestEvent
(
)
{
if
(
this
.
#
isSubscribed
)
{
const
text
=
event
from
{
this
.
messageHandler
.
contextId
}
;
this
.
emitEvent
(
"
eventemitter
.
testEvent
"
{
text
}
)
;
}
this
.
emitEvent
(
"
eventemitter
.
monitoringEvent
"
{
}
)
;
}
isSubscribed
(
)
{
return
this
.
#
isSubscribed
;
}
_applySessionData
(
params
)
{
const
{
category
added
=
[
]
removed
=
[
]
}
=
params
;
if
(
category
=
=
=
"
event
"
)
{
for
(
const
event
of
added
)
{
this
.
#
subscribeEvent
(
event
)
;
}
for
(
const
event
of
removed
)
{
this
.
#
unsubscribeEvent
(
event
)
;
}
}
}
#
subscribeEvent
(
event
)
{
if
(
event
=
=
=
"
eventemitter
.
testEvent
"
)
{
if
(
this
.
#
isSubscribed
)
{
throw
new
Error
(
"
Already
subscribed
to
eventemitter
.
testEvent
"
)
;
}
this
.
#
isSubscribed
=
true
;
}
}
#
unsubscribeEvent
(
event
)
{
if
(
event
=
=
=
"
eventemitter
.
testEvent
"
)
{
if
(
!
this
.
#
isSubscribed
)
{
throw
new
Error
(
"
Not
subscribed
to
eventemitter
.
testEvent
"
)
;
}
this
.
#
isSubscribed
=
false
;
}
}
}
const
eventemitter
=
EventEmitterModule
;
