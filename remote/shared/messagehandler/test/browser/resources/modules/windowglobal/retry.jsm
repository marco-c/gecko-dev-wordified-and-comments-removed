"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
retry
"
]
;
const
{
Module
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Module
.
jsm
"
)
;
let
callsToBlockedOneTime
=
0
;
let
callsToBlockedTenTimes
=
0
;
let
callsToBlockedElevenTimes
=
0
;
class
RetryModule
extends
Module
{
destroy
(
)
{
}
async
blockedOnNetDomain
(
params
)
{
const
uri
=
this
.
messageHandler
.
window
.
document
.
baseURI
;
if
(
!
uri
.
includes
(
"
example
.
net
"
)
)
{
await
new
Promise
(
r
=
>
{
}
)
;
}
return
{
.
.
.
params
}
;
}
async
blockedOneTime
(
params
)
{
callsToBlockedOneTime
+
+
;
if
(
callsToBlockedOneTime
<
2
)
{
await
new
Promise
(
r
=
>
{
}
)
;
}
return
{
.
.
.
params
callsToCommand
:
callsToBlockedOneTime
}
;
}
async
blockedTenTimes
(
params
)
{
callsToBlockedTenTimes
+
+
;
if
(
callsToBlockedTenTimes
<
11
)
{
await
new
Promise
(
r
=
>
{
}
)
;
}
return
{
.
.
.
params
callsToCommand
:
callsToBlockedTenTimes
}
;
}
async
blockedElevenTimes
(
params
)
{
callsToBlockedElevenTimes
+
+
;
if
(
callsToBlockedElevenTimes
<
12
)
{
await
new
Promise
(
r
=
>
{
}
)
;
}
return
{
.
.
.
params
callsToCommand
:
callsToBlockedElevenTimes
}
;
}
cleanup
(
)
{
callsToBlockedOneTime
=
0
;
callsToBlockedTenTimes
=
0
;
callsToBlockedElevenTimes
=
0
;
}
}
const
retry
=
RetryModule
;
