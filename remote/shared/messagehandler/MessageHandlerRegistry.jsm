"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
getMessageHandlerClass
"
"
MessageHandlerRegistry
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
RootMessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
RootMessageHandler
.
jsm
"
WindowGlobalMessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
WindowGlobalMessageHandler
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
MessageHandlerClasses
"
(
)
=
>
new
Map
(
[
[
RootMessageHandler
.
type
RootMessageHandler
]
[
WindowGlobalMessageHandler
.
type
WindowGlobalMessageHandler
]
]
)
)
;
function
getMessageHandlerClass
(
type
)
{
if
(
!
MessageHandlerClasses
.
has
(
type
)
)
{
throw
new
Error
(
No
MessageHandler
class
available
for
type
"
{
type
}
"
)
;
}
return
MessageHandlerClasses
.
get
(
type
)
;
}
class
MessageHandlerRegistry
extends
EventEmitter
{
constructor
(
type
context
)
{
super
(
)
;
this
.
_messageHandlerClass
=
getMessageHandlerClass
(
type
)
;
this
.
_context
=
context
;
this
.
_type
=
type
;
this
.
_messageHandlersMap
=
new
Map
(
)
;
this
.
_onMessageHandlerDestroyed
=
this
.
_onMessageHandlerDestroyed
.
bind
(
this
)
;
this
.
_onMessageHandlerEvent
=
this
.
_onMessageHandlerEvent
.
bind
(
this
)
;
}
getExistingMessageHandler
(
sessionId
)
{
return
this
.
_messageHandlersMap
.
get
(
sessionId
)
;
}
destroy
(
)
{
this
.
_messageHandlersMap
.
forEach
(
messageHandler
=
>
{
messageHandler
.
destroy
(
)
;
}
)
;
}
getOrCreateMessageHandler
(
sessionId
)
{
let
messageHandler
=
this
.
getExistingMessageHandler
(
sessionId
)
;
if
(
!
messageHandler
)
{
messageHandler
=
this
.
_createMessageHandler
(
sessionId
)
;
}
return
messageHandler
;
}
getRootMessageHandler
(
sessionId
)
{
const
rootMessageHandler
=
this
.
getExistingMessageHandler
(
sessionId
RootMessageHandler
.
type
)
;
if
(
!
rootMessageHandler
)
{
throw
new
Error
(
Unable
to
find
a
root
MessageHandler
for
session
id
{
sessionId
}
)
;
}
return
rootMessageHandler
;
}
toString
(
)
{
return
[
object
{
this
.
constructor
.
name
}
]
;
}
_createMessageHandler
(
sessionId
)
{
const
messageHandler
=
new
this
.
_messageHandlerClass
(
sessionId
this
.
_context
)
;
this
.
_messageHandlersMap
.
set
(
sessionId
messageHandler
)
;
logger
.
trace
(
Created
MessageHandler
{
this
.
_type
}
for
session
{
sessionId
}
)
;
messageHandler
.
on
(
"
message
-
handler
-
destroyed
"
this
.
_onMessageHandlerDestroyed
)
;
messageHandler
.
on
(
"
message
-
handler
-
event
"
this
.
_onMessageHandlerEvent
)
;
return
messageHandler
;
}
_onMessageHandlerDestroyed
(
eventName
messageHandler
)
{
messageHandler
.
off
(
"
message
-
handler
-
destroyed
"
this
.
_onMessageHandlerDestroyed
)
;
messageHandler
.
off
(
"
message
-
handler
-
event
"
this
.
_onMessageHandlerEvent
)
;
this
.
_messageHandlersMap
.
delete
(
messageHandler
.
sessionId
)
;
logger
.
trace
(
Unregistered
MessageHandler
{
messageHandler
.
type
}
for
session
{
messageHandler
.
sessionId
}
)
;
}
_onMessageHandlerEvent
(
eventName
messageHandlerEvent
)
{
this
.
emit
(
"
message
-
handler
-
registry
-
event
"
messageHandlerEvent
)
;
}
}
