"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
WindowGlobalMessageHandler
"
]
;
const
{
ContextDescriptorType
MessageHandler
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
)
;
class
WindowGlobalMessageHandler
extends
MessageHandler
{
#
innerWindowId
;
constructor
(
)
{
super
(
.
.
.
arguments
)
;
this
.
#
innerWindowId
=
this
.
context
.
window
.
windowGlobalChild
.
innerWindowId
;
}
static
get
modulePath
(
)
{
return
"
windowglobal
"
;
}
static
get
type
(
)
{
return
"
WINDOW_GLOBAL
"
;
}
static
getIdFromContext
(
context
)
{
return
context
.
id
;
}
get
innerWindowId
(
)
{
return
this
.
#
innerWindowId
;
}
get
window
(
)
{
return
this
.
context
.
window
;
}
async
applyInitialSessionDataItems
(
sessionDataItems
)
{
if
(
!
Array
.
isArray
(
sessionDataItems
)
)
{
return
;
}
const
destination
=
{
type
:
WindowGlobalMessageHandler
.
type
}
;
const
sessionDataPromises
=
sessionDataItems
.
map
(
sessionDataItem
=
>
{
const
{
moduleName
category
contextDescriptor
value
}
=
sessionDataItem
;
if
(
!
this
.
_matchesContext
(
contextDescriptor
)
)
{
return
Promise
.
resolve
(
)
;
}
if
(
!
this
.
moduleCache
.
hasModule
(
moduleName
destination
)
)
{
return
Promise
.
resolve
(
)
;
}
return
this
.
handleCommand
(
{
moduleName
commandName
:
"
_applySessionData
"
params
:
{
category
added
:
[
value
]
}
destination
}
)
;
}
)
;
await
Promise
.
all
(
sessionDataPromises
)
;
this
.
emitEvent
(
"
window
-
global
-
handler
-
created
"
{
contextId
:
this
.
contextId
innerWindowId
:
this
.
#
innerWindowId
}
)
;
}
forwardCommand
(
command
)
{
throw
new
Error
(
Cannot
forward
commands
from
a
"
WINDOW_GLOBAL
"
MessageHandler
)
;
}
_matchesContext
(
contextDescriptor
)
{
return
(
contextDescriptor
.
type
=
=
=
ContextDescriptorType
.
All
|
|
(
contextDescriptor
.
type
=
=
=
ContextDescriptorType
.
TopBrowsingContext
&
&
contextDescriptor
.
id
=
=
=
this
.
context
.
browserId
)
)
;
}
}
