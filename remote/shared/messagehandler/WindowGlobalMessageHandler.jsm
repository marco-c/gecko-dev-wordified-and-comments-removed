"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
WindowGlobalMessageHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CONTEXT_DESCRIPTOR_TYPES
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
MessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
}
)
;
class
WindowGlobalMessageHandler
extends
MessageHandler
{
static
get
modulePath
(
)
{
return
"
windowglobal
"
;
}
static
get
type
(
)
{
return
"
WINDOW_GLOBAL
"
;
}
static
getIdFromContext
(
context
)
{
return
context
.
id
;
}
forwardCommand
(
command
)
{
throw
new
Error
(
Cannot
forward
commands
from
a
"
WINDOW_GLOBAL
"
MessageHandler
)
;
}
async
_applyInitialSessionDataItems
(
sessionDataItems
)
{
for
(
const
sessionDataItem
of
sessionDataItems
)
{
const
{
moduleName
category
contextDescriptor
value
}
=
sessionDataItem
;
if
(
this
.
_isRelevantContext
(
contextDescriptor
)
)
{
await
this
.
handleCommand
(
{
moduleName
commandName
:
"
_applySessionData
"
params
:
{
category
values
:
[
value
]
}
destination
:
{
type
:
WindowGlobalMessageHandler
.
type
}
}
)
;
}
}
}
_isRelevantContext
(
contextDescriptor
)
{
return
contextDescriptor
.
type
=
=
=
CONTEXT_DESCRIPTOR_TYPES
.
ALL
;
}
}
