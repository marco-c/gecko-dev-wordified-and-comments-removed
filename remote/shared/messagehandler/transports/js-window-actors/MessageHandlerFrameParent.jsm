"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
MessageHandlerFrameParent
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
Errors
.
jsm
"
RootMessageHandlerRegistry
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
RootMessageHandlerRegistry
.
jsm
"
WindowGlobalMessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
WindowGlobalMessageHandler
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
WebDriverError
"
(
)
=
>
{
return
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
)
.
error
.
WebDriverError
;
}
)
;
class
MessageHandlerFrameParent
extends
JSWindowActorParent
{
async
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
MessageHandlerFrameChild
:
messageHandlerEvent
"
:
const
{
name
data
sessionId
}
=
message
.
data
;
const
[
moduleName
]
=
name
.
split
(
"
.
"
)
;
const
messageHandler
=
lazy
.
RootMessageHandlerRegistry
.
getExistingMessageHandler
(
sessionId
)
;
const
module
=
messageHandler
.
moduleCache
.
getModuleInstance
(
moduleName
{
type
:
lazy
.
WindowGlobalMessageHandler
.
type
}
)
;
let
eventPayload
=
data
;
if
(
module
?
.
interceptEvent
)
{
eventPayload
=
await
module
.
interceptEvent
(
name
data
)
;
if
(
!
eventPayload
)
{
throw
new
Error
(
{
moduleName
}
.
interceptEvent
doesn
'
t
return
the
event
payload
)
;
}
}
messageHandler
.
emitEvent
(
name
eventPayload
)
;
break
;
default
:
throw
new
Error
(
"
Unsupported
message
:
"
+
message
.
name
)
;
}
}
async
sendCommand
(
command
sessionId
)
{
const
result
=
await
this
.
sendQuery
(
"
MessageHandlerFrameParent
:
sendCommand
"
{
command
sessionId
}
)
;
if
(
result
?
.
error
)
{
if
(
result
.
isMessageHandlerError
)
{
throw
lazy
.
error
.
MessageHandlerError
.
fromJSON
(
result
.
error
)
;
}
throw
lazy
.
WebDriverError
.
fromJSON
(
result
.
error
)
;
}
return
result
;
}
}
