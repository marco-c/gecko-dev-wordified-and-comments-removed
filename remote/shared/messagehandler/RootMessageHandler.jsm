"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
RootMessageHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
FrameTransport
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
transports
/
FrameTransport
.
jsm
"
MessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandler
.
jsm
"
SessionData
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
sessiondata
/
SessionData
.
jsm
"
WindowGlobalMessageHandler
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
WindowGlobalMessageHandler
.
jsm
"
}
)
;
class
RootMessageHandler
extends
MessageHandler
{
static
get
modulePath
(
)
{
return
"
root
"
;
}
static
get
type
(
)
{
return
"
ROOT
"
;
}
static
getIdFromContext
(
context
)
{
return
RootMessageHandler
.
type
;
}
constructor
(
sessionId
)
{
super
(
sessionId
null
)
;
this
.
_frameTransport
=
new
FrameTransport
(
this
)
;
this
.
_sessionData
=
new
SessionData
(
this
)
;
}
get
sessionData
(
)
{
return
this
.
_sessionData
;
}
destroy
(
)
{
this
.
_sessionData
.
destroy
(
)
;
super
.
destroy
(
)
;
}
addSessionData
(
sessionData
=
{
}
)
{
const
{
moduleName
category
contextDescriptor
values
}
=
sessionData
;
const
addedValues
=
this
.
_sessionData
.
addSessionData
(
moduleName
category
contextDescriptor
values
)
;
if
(
addedValues
.
length
=
=
0
)
{
return
[
]
;
}
return
this
.
handleCommand
(
{
moduleName
commandName
:
"
_applySessionData
"
params
:
{
values
:
addedValues
category
}
destination
:
{
broadcast
:
true
type
:
WindowGlobalMessageHandler
.
type
}
}
)
;
}
forwardCommand
(
command
)
{
switch
(
command
.
destination
.
type
)
{
case
WindowGlobalMessageHandler
.
type
:
return
this
.
_frameTransport
.
forwardCommand
(
command
)
;
default
:
throw
new
Error
(
Cannot
forward
command
to
"
{
command
.
destination
.
type
}
"
from
"
{
this
.
constructor
.
type
}
"
.
)
;
}
}
}
