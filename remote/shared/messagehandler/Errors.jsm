"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
error
"
]
;
class
MessageHandlerError
extends
Error
{
constructor
(
x
)
{
super
(
x
)
;
this
.
name
=
this
.
constructor
.
name
;
this
.
status
=
"
message
handler
error
"
;
if
(
typeof
x
?
.
stack
!
=
=
"
undefined
"
)
{
this
.
stack
=
x
.
stack
;
}
}
toJSON
(
)
{
return
{
error
:
this
.
status
message
:
this
.
message
|
|
"
"
stacktrace
:
this
.
stack
|
|
"
"
}
;
}
static
fromJSON
(
json
)
{
if
(
typeof
json
.
error
=
=
"
undefined
"
)
{
let
s
=
JSON
.
stringify
(
json
)
;
throw
new
TypeError
(
"
Undeserialisable
error
type
:
"
+
s
)
;
}
if
(
!
STATUSES
.
has
(
json
.
error
)
)
{
throw
new
TypeError
(
"
Not
of
MessageHandlerError
descent
:
"
+
json
.
error
)
;
}
let
cls
=
STATUSES
.
get
(
json
.
error
)
;
let
err
=
new
cls
(
)
;
if
(
"
message
"
in
json
)
{
err
.
message
=
json
.
message
;
}
if
(
"
stacktrace
"
in
json
)
{
err
.
stack
=
json
.
stacktrace
;
}
return
err
;
}
}
class
UnsupportedCommandError
extends
MessageHandlerError
{
constructor
(
message
)
{
super
(
message
)
;
this
.
status
=
"
unsupported
message
handler
command
"
;
}
}
const
STATUSES
=
new
Map
(
[
[
"
message
handler
error
"
MessageHandlerError
]
[
"
unsupported
message
handler
command
"
UnsupportedCommandError
]
]
)
;
this
.
error
=
{
MessageHandlerError
UnsupportedCommandError
}
;
