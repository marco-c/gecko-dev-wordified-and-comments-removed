"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
MessageHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
MessageHandlerInfo
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
MessageHandlerInfo
.
jsm
"
ModuleCache
:
"
chrome
:
/
/
remote
/
content
/
shared
/
messagehandler
/
ModuleCache
.
jsm
"
}
)
;
class
MessageHandler
extends
EventEmitter
{
constructor
(
sessionId
context
)
{
super
(
)
;
this
.
_messageHandlerInfo
=
new
MessageHandlerInfo
(
sessionId
this
.
constructor
.
type
this
.
constructor
.
getIdFromContext
(
context
)
)
;
this
.
_moduleCache
=
new
ModuleCache
(
this
)
;
}
get
contextId
(
)
{
return
this
.
_messageHandlerInfo
.
contextId
;
}
get
key
(
)
{
return
this
.
_messageHandlerInfo
.
key
;
}
get
sessionId
(
)
{
return
this
.
_messageHandlerInfo
.
sessionId
;
}
destroy
(
)
{
this
.
_moduleCache
.
destroy
(
)
;
this
.
emit
(
"
message
-
handler
-
destroyed
"
this
)
;
}
handleCommand
(
command
)
{
const
{
moduleName
commandName
destination
params
}
=
command
;
const
mod
=
this
.
_moduleCache
.
getModuleInstance
(
moduleName
destination
)
;
if
(
this
.
_isCommandSupportedByModule
(
commandName
mod
)
)
{
return
mod
[
commandName
]
(
destination
params
)
;
}
return
this
.
forwardCommand
(
command
)
;
}
_isCommandSupportedByModule
(
commandName
mod
)
{
return
mod
&
&
typeof
mod
[
commandName
]
=
=
=
"
function
"
;
}
static
get
modulePath
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
static
get
type
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
static
getIdFromContext
(
context
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
forwardCommand
(
command
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
}
