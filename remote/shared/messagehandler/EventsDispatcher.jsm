"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
EventsDispatcher
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
)
)
;
class
EventsDispatcher
{
#
messageHandler
;
#
eventListeners
;
constructor
(
messageHandler
)
{
this
.
#
messageHandler
=
messageHandler
;
this
.
#
eventListeners
=
new
Map
(
)
;
}
destroy
(
)
{
this
.
#
eventListeners
.
clear
(
)
;
}
async
off
(
event
contextDescriptor
callback
)
{
const
listeners
=
this
.
#
eventListeners
.
get
(
event
)
;
if
(
!
listeners
)
{
return
;
}
const
key
=
this
.
#
getContextKey
(
contextDescriptor
)
;
const
callbacks
=
listeners
.
get
(
key
)
;
if
(
!
callbacks
)
{
return
;
}
if
(
callbacks
.
has
(
callback
)
)
{
callbacks
.
delete
(
callback
)
;
if
(
callbacks
.
size
=
=
=
0
)
{
listeners
.
delete
(
key
)
;
if
(
listeners
.
size
=
=
=
0
)
{
this
.
#
messageHandler
.
off
(
event
this
.
#
onMessageHandlerEvent
)
;
this
.
#
eventListeners
.
delete
(
event
)
;
}
await
this
.
#
messageHandler
.
removeSessionData
(
this
.
#
getSessionDataItem
(
event
contextDescriptor
)
)
;
}
}
}
async
on
(
event
contextDescriptor
callback
)
{
if
(
!
this
.
#
eventListeners
.
has
(
event
)
)
{
this
.
#
eventListeners
.
set
(
event
new
Map
(
)
)
;
this
.
#
messageHandler
.
on
(
event
this
.
#
onMessageHandlerEvent
)
;
}
const
key
=
this
.
#
getContextKey
(
contextDescriptor
)
;
const
listeners
=
this
.
#
eventListeners
.
get
(
event
)
;
if
(
listeners
.
has
(
key
)
)
{
const
callbacks
=
listeners
.
get
(
key
)
;
callbacks
.
add
(
callback
)
;
}
else
{
listeners
.
set
(
key
new
Set
(
[
callback
]
)
)
;
await
this
.
#
messageHandler
.
addSessionData
(
this
.
#
getSessionDataItem
(
event
contextDescriptor
)
)
;
}
}
#
getContextKey
(
contextDescriptor
)
{
const
{
id
type
}
=
contextDescriptor
;
return
{
type
}
-
{
id
}
;
}
#
getSessionDataItem
(
event
contextDescriptor
)
{
const
[
moduleName
]
=
event
.
split
(
"
.
"
)
;
return
{
moduleName
category
:
"
event
"
contextDescriptor
values
:
[
event
]
}
;
}
#
onMessageHandlerEvent
=
(
name
event
)
=
>
{
const
listeners
=
this
.
#
eventListeners
.
get
(
name
)
;
for
(
const
[
callbacks
]
of
listeners
)
{
for
(
const
callback
of
callbacks
)
{
try
{
callback
(
name
event
)
;
}
catch
(
e
)
{
lazy
.
logger
.
debug
(
Error
while
executing
callback
for
{
name
}
:
{
e
.
message
}
)
;
}
}
}
}
;
}
