"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
MobileTabBrowser
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
GeckoViewTabUtil
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewTestUtils
.
jsm
"
windowManager
:
"
chrome
:
/
/
remote
/
content
/
shared
/
WindowManager
.
jsm
"
}
)
;
class
MobileTabBrowser
{
constructor
(
window
)
{
this
.
window
=
window
;
}
get
tabs
(
)
{
return
[
this
.
window
.
tab
]
;
}
get
selectedTab
(
)
{
return
this
.
window
.
tab
;
}
set
selectedTab
(
tab
)
{
if
(
tab
!
=
this
.
selectedTab
)
{
throw
new
Error
(
"
GeckoView
only
supports
a
single
tab
"
)
;
}
const
event
=
this
.
window
.
CustomEvent
(
"
TabSelect
"
{
bubbles
:
true
cancelable
:
false
detail
:
{
previousTab
:
this
.
selectedTab
}
}
)
;
this
.
window
.
document
.
dispatchEvent
(
event
)
;
}
get
selectedBrowser
(
)
{
return
this
.
selectedTab
.
linkedBrowser
;
}
addEventListener
(
)
{
this
.
window
.
addEventListener
(
.
.
.
arguments
)
;
}
addTab
(
url
)
{
return
lazy
.
GeckoViewTabUtil
.
createNewTab
(
url
)
;
}
getTabForBrowser
(
browser
)
{
if
(
browser
!
=
this
.
selectedBrowser
)
{
throw
new
Error
(
"
GeckoView
only
supports
a
single
tab
"
)
;
}
return
this
.
selectedTab
;
}
removeEventListener
(
)
{
this
.
window
.
removeEventListener
(
.
.
.
arguments
)
;
}
removeTab
(
tab
)
{
if
(
tab
!
=
this
.
selectedTab
)
{
throw
new
Error
(
"
GeckoView
only
supports
a
single
tab
"
)
;
}
return
lazy
.
windowManager
.
closeWindow
(
this
.
window
)
;
}
}
