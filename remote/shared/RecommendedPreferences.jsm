"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
RecommendedPreferences
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
useRecommendedPrefs
"
"
remote
.
prefs
.
recommended
"
false
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
if
(
Services
.
appinfo
.
processType
!
=
Ci
.
nsIXULRuntime
.
PROCESS_TYPE_DEFAULT
)
{
throw
new
Error
(
"
RecommendedPreferences
should
only
be
loaded
in
the
parent
process
"
)
;
}
const
COMMON_PREFERENCES
=
new
Map
(
[
[
"
app
.
normandy
.
api_url
"
"
"
]
[
"
app
.
update
.
disabledForTesting
"
true
]
[
"
apz
.
content_response_timeout
"
60000
]
[
"
browser
.
contentblocking
.
introCount
"
99
]
[
"
browser
.
download
.
panel
.
shown
"
true
]
[
"
browser
.
newtabpage
.
enabled
"
false
]
[
"
browser
.
pagethumbnails
.
capturing_disabled
"
true
]
[
"
browser
.
safebrowsing
.
blockedURIs
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
downloads
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
passwords
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
malware
.
enabled
"
false
]
[
"
browser
.
safebrowsing
.
phishing
.
enabled
"
false
]
[
"
browser
.
search
.
update
"
false
]
[
"
browser
.
sessionstore
.
resume_from_crash
"
false
]
[
"
browser
.
shell
.
checkDefaultBrowser
"
false
]
[
"
browser
.
startup
.
homepage_override
.
mstone
"
"
ignore
"
]
[
"
browser
.
tabs
.
closeWindowWithLastTab
"
false
]
[
"
browser
.
tabs
.
disableBackgroundZombification
"
false
]
[
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
false
]
[
"
browser
.
tabs
.
unloadOnLowMemory
"
false
]
[
"
browser
.
tabs
.
warnOnClose
"
false
]
[
"
browser
.
tabs
.
warnOnCloseOtherTabs
"
false
]
[
"
browser
.
tabs
.
warnOnOpen
"
false
]
[
"
browser
.
toolbars
.
bookmarks
.
visibility
"
"
never
"
]
[
"
browser
.
usedOnWindows10
.
introURL
"
"
"
]
[
"
browser
.
uitour
.
enabled
"
false
]
[
"
browser
.
urlbar
.
suggest
.
searches
"
false
]
[
"
browser
.
warnOnQuit
"
false
]
[
"
datareporting
.
healthreport
.
documentServerURI
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
healthreport
/
"
]
[
"
datareporting
.
healthreport
.
logging
.
consoleEnabled
"
false
]
[
"
datareporting
.
healthreport
.
service
.
enabled
"
false
]
[
"
datareporting
.
healthreport
.
service
.
firstRun
"
false
]
[
"
datareporting
.
healthreport
.
uploadEnabled
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionEnabled
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionPolicyAccepted
"
false
]
[
"
datareporting
.
policy
.
dataSubmissionPolicyBypassNotification
"
true
]
[
"
dom
.
disable_open_during_load
"
false
]
[
"
dom
.
file
.
createInChild
"
true
]
[
"
dom
.
ipc
.
reportProcessHangs
"
false
]
[
"
dom
.
max_chrome_script_run_time
"
0
]
[
"
dom
.
max_script_run_time
"
0
]
[
"
dom
.
push
.
connection
.
enabled
"
false
]
[
"
extensions
.
autoDisableScopes
"
0
]
[
"
extensions
.
enabledScopes
"
5
]
[
"
extensions
.
getAddons
.
cache
.
enabled
"
false
]
[
"
extensions
.
installDistroAddons
"
false
]
[
"
extensions
.
update
.
enabled
"
false
]
[
"
extensions
.
update
.
notifyUser
"
false
]
[
"
extensions
.
getAddons
.
discovery
.
api_url
"
"
data
:
"
]
[
"
focusmanager
.
testmode
"
true
]
[
"
general
.
useragent
.
updates
.
enabled
"
false
]
[
"
geo
.
provider
.
testing
"
true
]
[
"
geo
.
wifi
.
scan
"
false
]
[
"
network
.
http
.
phishy
-
userpass
-
length
"
255
]
[
"
network
.
http
.
prompt
-
temp
-
redirect
"
false
]
[
"
network
.
manage
-
offline
-
status
"
false
]
[
"
network
.
sntp
.
pools
"
"
%
(
server
)
s
"
]
[
"
privacy
.
trackingprotection
.
enabled
"
false
]
[
"
security
.
certerrors
.
mitm
.
priming
.
enabled
"
false
]
[
"
security
.
fileuri
.
strict_origin_policy
"
false
]
[
"
security
.
notification_enable_delay
"
0
]
[
"
services
.
settings
.
server
"
"
http
:
/
/
%
(
server
)
s
/
dummy
/
blocklist
/
"
]
[
"
signon
.
autofillForms
"
false
]
[
"
signon
.
rememberSignons
"
false
]
[
"
startup
.
homepage_welcome_url
"
"
about
:
blank
"
]
[
"
startup
.
homepage_welcome_url
.
additional
"
"
"
]
[
"
toolkit
.
startup
.
max_resumed_crashes
"
-
1
]
]
)
;
const
RecommendedPreferences
=
{
alteredPrefs
:
new
Set
(
)
isInitialized
:
false
applyPreferences
(
preferences
)
{
if
(
!
useRecommendedPrefs
)
{
return
;
}
if
(
!
this
.
isInitialized
)
{
preferences
=
new
Map
(
[
.
.
.
COMMON_PREFERENCES
.
.
.
preferences
]
)
;
Services
.
obs
.
addObserver
(
this
"
quit
-
application
"
)
;
this
.
isInitialized
=
true
;
}
for
(
const
[
k
v
]
of
preferences
)
{
if
(
!
Preferences
.
isSet
(
k
)
)
{
logger
.
debug
(
Setting
recommended
pref
{
k
}
to
{
v
}
)
;
Preferences
.
set
(
k
v
)
;
this
.
alteredPrefs
.
add
(
k
)
;
}
}
}
observe
(
subject
topic
)
{
if
(
topic
=
=
=
"
quit
-
application
"
)
{
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
"
)
;
this
.
restoreAllPreferences
(
)
;
}
}
restoreAllPreferences
(
)
{
this
.
restorePreferences
(
this
.
alteredPrefs
)
;
this
.
isInitialized
=
false
;
}
restorePreferences
(
preferences
)
{
for
(
const
k
of
preferences
.
keys
(
)
)
{
logger
.
debug
(
Resetting
recommended
pref
{
k
}
)
;
Preferences
.
reset
(
k
)
;
this
.
alteredPrefs
.
delete
(
k
)
;
}
}
}
;
