"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Log
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Log
:
StdLog
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PREF_REMOTE_LOG_LEVEL
=
"
remote
.
log
.
level
"
;
const
PREF_MARIONETTE_LOG_LEVEL
=
"
marionette
.
log
.
level
"
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
prefLogLevel
"
(
)
=
>
{
function
getLogLevelNumber
(
pref
)
{
const
level
=
Services
.
prefs
.
getCharPref
(
pref
"
Fatal
"
)
;
return
(
StdLog
.
Level
.
Numbers
[
level
.
toUpperCase
(
)
]
|
|
StdLog
.
Level
.
Numbers
.
FATAL
)
;
}
const
marionetteNumber
=
getLogLevelNumber
(
PREF_MARIONETTE_LOG_LEVEL
)
;
const
remoteNumber
=
getLogLevelNumber
(
PREF_REMOTE_LOG_LEVEL
)
;
if
(
marionetteNumber
<
remoteNumber
)
{
return
PREF_MARIONETTE_LOG_LEVEL
;
}
return
PREF_REMOTE_LOG_LEVEL
;
}
)
;
class
Log
{
static
TYPES
=
{
CDP
:
"
CDP
"
MARIONETTE
:
"
Marionette
"
REMOTE_AGENT
:
"
RemoteAgent
"
WEBDRIVER_BIDI
:
"
WebDriver
BiDi
"
}
;
static
get
(
type
=
Log
.
TYPES
.
REMOTE_AGENT
)
{
const
logger
=
StdLog
.
repository
.
getLogger
(
type
)
;
if
(
logger
.
ownAppenders
.
length
=
=
0
)
{
logger
.
addAppender
(
new
StdLog
.
DumpAppender
(
)
)
;
logger
.
manageLevelFromPref
(
lazy
.
prefLogLevel
)
;
}
return
logger
;
}
static
get
isTraceLevel
(
)
{
return
[
StdLog
.
Level
.
All
StdLog
.
Level
.
Trace
]
.
includes
(
lazy
.
prefLogLevel
)
;
}
static
get
verbose
(
)
{
const
level
=
Services
.
prefs
.
getStringPref
(
PREF_REMOTE_LOG_LEVEL
"
Info
"
)
;
return
StdLog
.
Level
[
level
]
>
=
StdLog
.
Level
.
Info
;
}
}
