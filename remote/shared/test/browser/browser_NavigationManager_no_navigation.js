const
{
NavigationManager
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
remote
/
content
/
shared
/
NavigationManager
.
sys
.
mjs
"
)
;
const
{
TabManager
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
remote
/
content
/
shared
/
TabManager
.
sys
.
mjs
"
)
;
add_task
(
async
function
testDocumentOpenWriteClose
(
)
{
const
events
=
[
]
;
const
onEvent
=
(
name
data
)
=
>
events
.
push
(
{
name
data
}
)
;
const
navigationManager
=
new
NavigationManager
(
)
;
navigationManager
.
on
(
"
navigation
-
started
"
onEvent
)
;
navigationManager
.
on
(
"
navigation
-
stopped
"
onEvent
)
;
const
url
=
"
https
:
/
/
example
.
com
/
document
-
builder
.
sjs
?
html
=
test
"
;
const
tab
=
addTab
(
gBrowser
url
)
;
const
browser
=
tab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
navigationManager
.
startMonitoring
(
)
;
is
(
events
.
length
0
"
No
event
recorded
"
)
;
info
(
"
Replace
the
document
"
)
;
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
eval
(
document
.
open
(
)
;
document
.
write
(
"
<
h1
>
Replaced
<
/
h1
>
"
)
;
document
.
close
(
)
;
)
;
}
)
;
await
wait
(
500
)
;
todo_is
(
events
.
length
0
"
No
event
recorded
after
replacing
the
document
"
)
;
info
(
"
Reload
the
page
which
should
trigger
a
navigation
"
)
;
await
loadURL
(
browser
url
)
;
todo_is
(
events
.
length
2
"
Recorded
navigation
events
"
)
;
navigationManager
.
off
(
"
navigation
-
started
"
onEvent
)
;
navigationManager
.
off
(
"
navigation
-
stopped
"
onEvent
)
;
navigationManager
.
stopMonitoring
(
)
;
}
)
;
function
wait
(
ms
)
{
info
(
Wait
for
{
ms
}
milliseconds
)
;
return
new
Promise
(
r
=
>
setTimeout
(
r
ms
)
)
;
}
