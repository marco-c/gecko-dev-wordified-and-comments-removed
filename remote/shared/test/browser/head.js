"
use
strict
"
;
function
addTab
(
browser
url
)
{
const
tab
=
BrowserTestUtils
.
addTab
(
browser
url
)
;
registerCleanupFunction
(
(
)
=
>
browser
.
removeTab
(
tab
)
)
;
return
tab
;
}
function
assertNavigation
(
navigation
expectedUrl
)
{
ok
(
!
!
navigation
"
Retrieved
a
navigation
"
)
;
is
(
navigation
.
url
expectedUrl
"
Navigation
has
the
expected
URL
"
)
;
is
(
typeof
navigation
.
navigationId
"
string
"
"
Navigation
has
a
string
navigationId
"
)
;
}
function
assertNavigationEvents
(
events
url
navigationId
navigableId
isSameDocument
)
{
const
expectedEvents
=
isSameDocument
?
3
:
2
;
const
navigationEvents
=
events
.
filter
(
e
=
>
e
.
data
.
navigationId
=
=
navigationId
)
;
is
(
navigationEvents
.
length
expectedEvents
Found
{
expectedEvents
}
events
for
navigationId
{
navigationId
}
)
;
const
started
=
navigationEvents
.
find
(
e
=
>
e
.
name
=
=
=
"
navigation
-
started
"
)
;
const
stopped
=
navigationEvents
.
find
(
e
=
>
e
.
name
=
=
=
"
navigation
-
stopped
"
)
;
is
(
started
.
name
"
navigation
-
started
"
"
event
has
the
expected
name
"
)
;
is
(
started
.
data
.
url
url
"
event
has
the
expected
url
"
)
;
is
(
started
.
data
.
navigableId
navigableId
"
event
has
the
expected
navigable
"
)
;
is
(
stopped
.
name
"
navigation
-
stopped
"
"
event
has
the
expected
name
"
)
;
is
(
stopped
.
data
.
url
url
"
event
has
the
expected
url
"
)
;
is
(
stopped
.
data
.
navigableId
navigableId
"
event
has
the
expected
navigable
"
)
;
if
(
isSameDocument
)
{
const
locationChanged
=
navigationEvents
.
find
(
e
=
>
e
.
name
=
=
=
"
location
-
changed
"
)
;
is
(
locationChanged
.
name
"
location
-
changed
"
"
event
has
the
expected
name
"
)
;
is
(
locationChanged
.
data
.
url
url
"
event
has
the
expected
url
"
)
;
is
(
locationChanged
.
data
.
navigableId
navigableId
"
event
has
the
expected
navigable
"
)
;
}
}
function
assertUniqueNavigationIds
(
.
.
.
navigations
)
{
const
ids
=
navigations
.
map
(
navigation
=
>
navigation
.
navigationId
)
;
is
(
new
Set
(
ids
)
.
size
ids
.
length
"
Navigation
ids
are
all
different
"
)
;
}
function
createFrame
(
domain
)
{
return
createFrameForUri
(
https
:
/
/
{
domain
}
/
document
-
builder
.
sjs
?
html
=
frame
-
{
domain
}
)
;
}
function
createFrameForUri
(
uri
)
{
return
<
iframe
src
=
"
{
encodeURI
(
uri
)
}
"
>
<
/
iframe
>
;
}
function
createTestPageWithFrames
(
)
{
const
NESTED_FRAME_MARKUP
=
createFrameForUri
(
https
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
createFrame
(
"
example
.
net
"
)
}
)
;
const
TEST_URI_MARKUP
=
{
NESTED_FRAME_MARKUP
}
{
createFrame
(
"
example
.
com
"
)
}
;
return
https
:
/
/
example
.
org
/
document
-
builder
.
sjs
?
html
=
{
encodeURI
(
TEST_URI_MARKUP
)
}
;
}
async
function
loadURL
(
browser
url
options
=
{
}
)
{
const
{
includeSubFrames
=
false
maybeErrorPage
=
false
}
=
options
;
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
includeSubFrames
url
maybeErrorPage
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
url
)
;
return
loaded
;
}
