const
{
parseChallengeHeader
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
remote
/
content
/
shared
/
ChallengeHeaderParser
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_single_scheme
(
)
{
const
TEST_HEADERS
=
[
{
header
:
'
Basic
realm
=
"
test
"
'
params
:
[
{
name
:
"
realm
"
value
:
"
test
"
}
]
}
{
header
:
"
Basic
realm
=
'
test
'
"
params
:
[
{
name
:
"
realm
"
value
:
"
test
"
}
]
}
{
header
:
Basic
realm
=
'
test
'
params
:
[
{
name
:
"
realm
"
value
:
"
test
"
}
]
}
{
header
:
'
Basic
realm
=
"
test
"
charset
=
"
UTF
-
8
"
'
params
:
[
{
name
:
"
realm
"
value
:
"
test
"
}
{
name
:
"
charset
"
value
:
"
UTF
-
8
"
}
]
}
]
;
for
(
const
{
header
params
}
of
TEST_HEADERS
)
{
const
challenges
=
parseChallengeHeader
(
header
)
;
equal
(
challenges
.
length
1
)
;
equal
(
challenges
[
0
]
.
scheme
"
Basic
"
)
;
deepEqual
(
challenges
[
0
]
.
params
params
)
;
}
}
)
;
add_task
(
async
function
test_realmless_scheme
(
)
{
const
TEST_HEADERS
=
[
{
header
:
"
Custom
"
params
:
[
]
}
{
header
:
"
Custom
charset
=
'
UTF
-
8
'
"
params
:
[
{
name
:
"
charset
"
value
:
"
UTF
-
8
"
}
]
}
]
;
for
(
const
{
header
params
}
of
TEST_HEADERS
)
{
const
challenges
=
parseChallengeHeader
(
header
)
;
equal
(
challenges
.
length
1
)
;
equal
(
challenges
[
0
]
.
scheme
"
Custom
"
)
;
deepEqual
(
challenges
[
0
]
.
params
params
)
;
}
}
)
;
add_task
(
async
function
test_multiple_schemes
(
)
{
const
TEST_HEADERS
=
[
{
header
:
'
Scheme1
realm
=
"
foo
"
Scheme2
realm
=
"
bar
"
'
params
:
[
[
{
name
:
"
realm
"
value
:
"
foo
"
}
]
[
{
name
:
"
realm
"
value
:
"
bar
"
}
]
]
}
{
header
:
'
Scheme1
realm
=
"
foo
"
charset
=
"
UTF
-
8
"
Scheme2
realm
=
"
bar
"
'
params
:
[
[
{
name
:
"
realm
"
value
:
"
foo
"
}
{
name
:
"
charset
"
value
:
"
UTF
-
8
"
}
]
[
{
name
:
"
realm
"
value
:
"
bar
"
}
]
]
}
{
header
:
Scheme1
realm
=
"
foo
"
charset
=
"
UTF
-
8
"
Scheme2
realm
=
"
bar
"
params
:
[
[
{
name
:
"
realm
"
value
:
"
foo
"
}
{
name
:
"
charset
"
value
:
"
UTF
-
8
"
}
]
[
{
name
:
"
realm
"
value
:
"
bar
"
}
]
]
}
]
;
for
(
const
{
header
params
}
of
TEST_HEADERS
)
{
const
challenges
=
parseChallengeHeader
(
header
)
;
equal
(
challenges
.
length
2
)
;
equal
(
challenges
[
0
]
.
scheme
"
Scheme1
"
)
;
deepEqual
(
challenges
[
0
]
.
params
params
[
0
]
)
;
equal
(
challenges
[
1
]
.
scheme
"
Scheme2
"
)
;
deepEqual
(
challenges
[
1
]
.
params
params
[
1
]
)
;
}
}
)
;
add_task
(
async
function
test_digest_scheme
(
)
{
const
header
=
Digest
realm
=
"
http
-
auth
example
.
org
"
qop
=
"
auth
auth
-
int
"
algorithm
=
SHA
-
256
nonce
=
"
7ypf
/
xlj9XXwfDPEoM4URrv
/
xwf94BcCAzFZH4GiTo0v
"
opaque
=
"
FQhe
/
qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS
"
;
const
challenges
=
parseChallengeHeader
(
header
)
;
equal
(
challenges
.
length
1
)
;
equal
(
challenges
[
0
]
.
scheme
"
Digest
"
)
;
const
realmParam
=
challenges
[
0
]
.
params
.
find
(
param
=
>
param
.
name
=
=
=
"
realm
"
)
;
ok
(
realmParam
)
;
equal
(
realmParam
.
value
"
http
-
auth
example
.
org
"
)
;
notDeepEqual
(
challenges
[
0
]
.
params
[
{
name
:
"
realm
"
value
:
"
http
-
auth
example
.
org
"
}
{
name
:
"
qop
"
value
:
"
auth
auth
-
int
"
}
{
name
:
"
algorithm
"
value
:
"
SHA
-
256
"
}
{
name
:
"
nonce
"
value
:
"
7ypf
/
xlj9XXwfDPEoM4URrv
/
xwf94BcCAzFZH4GiTo0v
"
}
{
name
:
"
opaque
"
value
:
"
FQhe
/
qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS
"
}
]
"
notDeepEqual
should
be
changed
to
deepEqual
when
Bug
1857847
is
fixed
"
)
;
}
)
;
