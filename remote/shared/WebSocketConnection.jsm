"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
WebSocketConnection
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
WebSocketTransport
:
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketTransport
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
)
)
;
class
WebSocketConnection
{
constructor
(
webSocket
httpdConnection
)
{
this
.
id
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
this
.
httpdConnection
=
httpdConnection
;
this
.
transport
=
new
lazy
.
WebSocketTransport
(
webSocket
)
;
this
.
transport
.
hooks
=
this
;
this
.
transport
.
ready
(
)
;
lazy
.
logger
.
debug
(
{
this
.
constructor
.
name
}
{
this
.
id
}
accepted
)
;
}
close
(
)
{
this
.
transport
.
close
(
)
;
this
.
httpdConnection
.
close
(
)
;
}
registerSession
(
session
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
send
(
data
)
{
this
.
transport
.
send
(
data
)
;
}
sendError
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
sendEvent
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
sendResult
(
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
toString
(
)
{
return
[
object
{
this
.
constructor
.
name
}
{
this
.
id
}
]
;
}
onClosed
(
status
)
{
lazy
.
logger
.
debug
(
{
this
.
constructor
.
name
}
{
this
.
id
}
closed
)
;
}
async
onPacket
(
packet
)
{
throw
new
Error
(
"
Not
implemented
"
)
;
}
}
