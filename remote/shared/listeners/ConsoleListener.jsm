"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
ConsoleListener
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
class
ConsoleListener
{
#
innerWindowId
;
#
listening
;
constructor
(
innerWindowId
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
#
listening
=
false
;
this
.
#
innerWindowId
=
innerWindowId
;
}
get
listening
(
)
{
return
this
.
#
listening
;
}
destroy
(
)
{
this
.
stopListening
(
)
;
}
startListening
(
)
{
if
(
this
.
#
listening
)
{
return
;
}
Services
.
console
.
registerListener
(
this
.
#
onConsoleMessage
)
;
this
.
#
listening
=
true
;
}
stopListening
(
)
{
if
(
!
this
.
#
listening
)
{
return
;
}
Services
.
console
.
unregisterListener
(
this
.
#
onConsoleMessage
)
;
this
.
#
listening
=
false
;
}
#
onConsoleMessage
=
message
=
>
{
if
(
!
(
message
instanceof
Ci
.
nsIScriptError
)
)
{
return
;
}
if
(
message
.
innerWindowID
!
=
=
this
.
#
innerWindowId
)
{
return
;
}
const
{
errorFlag
warningFlag
infoFlag
}
=
Ci
.
nsIScriptError
;
let
level
;
if
(
(
message
.
flags
&
warningFlag
)
=
=
warningFlag
)
{
level
=
"
warning
"
;
}
else
if
(
(
message
.
flags
&
infoFlag
)
=
=
infoFlag
)
{
level
=
"
info
"
;
}
else
if
(
(
message
.
flags
&
errorFlag
)
=
=
errorFlag
)
{
level
=
"
error
"
;
}
else
{
logger
.
warn
(
Not
able
to
process
console
message
with
unknown
flags
{
message
.
flags
}
)
;
return
;
}
this
.
emit
(
level
{
level
message
:
message
.
errorMessage
rawMessage
:
message
timestamp
:
message
.
timestamp
|
|
Date
.
now
(
)
}
)
;
}
;
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIConsoleListener
"
]
)
;
}
}
