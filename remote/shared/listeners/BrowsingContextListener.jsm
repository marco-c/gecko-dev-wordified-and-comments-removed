"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
BrowsingContextListener
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
OBSERVER_TOPIC_ATTACHED
=
"
browsing
-
context
-
attached
"
;
const
OBSERVER_TOPIC_DISCARDED
=
"
browsing
-
context
-
discarded
"
;
class
BrowsingContextListener
{
#
listening
;
constructor
(
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
#
listening
=
false
;
}
destroy
(
)
{
this
.
stopListening
(
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
OBSERVER_TOPIC_ATTACHED
:
this
.
emit
(
"
attached
"
{
browsingContext
:
subject
why
:
data
}
)
;
break
;
case
OBSERVER_TOPIC_DISCARDED
:
this
.
emit
(
"
discarded
"
{
browsingContext
:
subject
why
:
data
}
)
;
break
;
}
}
startListening
(
)
{
if
(
this
.
#
listening
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
OBSERVER_TOPIC_ATTACHED
)
;
Services
.
obs
.
addObserver
(
this
OBSERVER_TOPIC_DISCARDED
)
;
this
.
#
listening
=
true
;
}
stopListening
(
)
{
if
(
!
this
.
#
listening
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
OBSERVER_TOPIC_ATTACHED
)
;
Services
.
obs
.
removeObserver
(
this
OBSERVER_TOPIC_DISCARDED
)
;
this
.
#
listening
=
false
;
}
}
