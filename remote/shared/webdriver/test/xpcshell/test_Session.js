"
use
strict
"
;
const
{
Timeouts
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Capabilities
.
sys
.
mjs
"
)
;
const
{
getWebDriverSessionById
WebDriverSession
}
=
ChromeUtils
.
importESModule
(
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Session
.
sys
.
mjs
"
)
;
function
createSession
(
options
=
{
}
)
{
const
{
capabilities
=
{
}
connection
isBidi
=
false
}
=
options
;
const
flags
=
new
Set
(
)
;
if
(
isBidi
)
{
flags
.
add
(
"
bidi
"
)
;
}
else
{
flags
.
add
(
"
http
"
)
;
}
return
new
WebDriverSession
(
capabilities
flags
connection
)
;
}
add_task
(
function
test_WebDriverSession_ctor
(
)
{
Assert
.
throws
(
(
)
=
>
new
WebDriverSession
(
{
}
)
/
TypeError
/
)
;
for
(
const
flags
of
[
[
]
[
"
bidi
"
"
http
"
]
]
)
{
Assert
.
throws
(
(
)
=
>
new
WebDriverSession
(
{
}
new
Set
(
flags
)
)
/
SessionNotCreatedError
:
/
)
;
}
let
session
=
createSession
(
)
;
equal
(
typeof
session
.
id
"
string
"
)
;
equal
(
session
.
path
/
session
/
{
session
.
id
}
)
;
session
=
createSession
(
{
isBidi
:
false
}
)
;
equal
(
session
.
bidi
false
)
;
equal
(
session
.
http
true
)
;
session
=
createSession
(
{
isBidi
:
true
}
)
;
equal
(
session
.
bidi
true
)
;
equal
(
session
.
http
false
)
;
const
capabilities
=
{
acceptInsecureCerts
:
true
unhandledPromptBehavior
:
"
ignore
"
pageLoadStrategy
:
"
eager
"
strictFileInteractability
:
true
timeouts
:
{
script
:
1000
}
}
;
session
=
createSession
(
{
capabilities
isBidi
:
false
}
)
;
equal
(
session
.
acceptInsecureCerts
true
)
;
equal
(
session
.
pageLoadStrategy
"
eager
"
)
;
equal
(
session
.
strictFileInteractability
true
)
;
equal
(
session
.
timeouts
.
script
1000
)
;
equal
(
session
.
userPromptHandler
.
toJSON
(
)
"
ignore
"
)
;
session
=
createSession
(
{
capabilities
isBidi
:
true
}
)
;
equal
(
session
.
acceptInsecureCerts
true
)
;
equal
(
session
.
userPromptHandler
.
toJSON
(
)
"
dismiss
and
notify
"
)
;
equal
(
session
.
pageLoadStrategy
undefined
)
;
equal
(
session
.
strictFileInteractability
undefined
)
;
equal
(
session
.
timeouts
undefined
)
;
}
)
;
add_task
(
function
test_WebDriverSession_destroy
(
)
{
const
session
=
createSession
(
)
;
session
.
destroy
(
)
;
session
.
destroy
(
)
;
}
)
;
add_task
(
function
test_WebDriverSession_getters
(
)
{
const
session
=
createSession
(
)
;
equal
(
session
.
a11yChecks
session
.
capabilities
.
get
(
"
moz
:
accessibilityChecks
"
)
)
;
equal
(
session
.
acceptInsecureCerts
session
.
capabilities
.
get
(
"
acceptInsecureCerts
"
)
)
;
equal
(
session
.
pageLoadStrategy
session
.
capabilities
.
get
(
"
pageLoadStrategy
"
)
)
;
equal
(
session
.
proxy
session
.
capabilities
.
get
(
"
proxy
"
)
)
;
equal
(
session
.
strictFileInteractability
session
.
capabilities
.
get
(
"
strictFileInteractability
"
)
)
;
equal
(
session
.
timeouts
session
.
capabilities
.
get
(
"
timeouts
"
)
)
;
equal
(
session
.
userPromptHandler
session
.
capabilities
.
get
(
"
unhandledPromptBehavior
"
)
)
;
}
)
;
add_task
(
function
test_WebDriverSession_setters
(
)
{
const
session
=
createSession
(
)
;
const
timeouts
=
new
Timeouts
(
)
;
timeouts
.
pageLoad
=
45
;
session
.
timeouts
=
timeouts
;
equal
(
session
.
timeouts
session
.
capabilities
.
get
(
"
timeouts
"
)
)
;
}
)
;
add_task
(
function
test_getWebDriverSessionById
(
)
{
const
session1
=
createSession
(
)
;
const
session2
=
createSession
(
)
;
equal
(
getWebDriverSessionById
(
session1
.
id
)
session1
)
;
equal
(
getWebDriverSessionById
(
session2
.
id
)
session2
)
;
session1
.
destroy
(
)
;
equal
(
getWebDriverSessionById
(
session1
.
id
)
undefined
)
;
equal
(
getWebDriverSessionById
(
session2
.
id
)
session2
)
;
session2
.
destroy
(
)
;
equal
(
getWebDriverSessionById
(
session1
.
id
)
undefined
)
;
equal
(
getWebDriverSessionById
(
session2
.
id
)
undefined
)
;
}
)
;
