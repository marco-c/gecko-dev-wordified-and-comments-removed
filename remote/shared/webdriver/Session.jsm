"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
WebDriverSession
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
accessibility
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
accessibility
.
js
"
allowAllCerts
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
cert
.
js
"
Capabilities
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Capabilities
.
jsm
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
WebDriverBiDiConnection
:
"
chrome
:
/
/
remote
/
content
/
webdriver
-
bidi
/
WebDriverBiDiConnection
.
jsm
"
WebSocketHandshake
:
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketHandshake
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
uuidGen
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
class
WebDriverSession
{
constructor
(
capabilities
)
{
this
.
_connections
=
new
Set
(
)
;
this
.
id
=
uuidGen
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
this
.
path
=
/
session
/
{
this
.
id
}
;
try
{
this
.
capabilities
=
Capabilities
.
fromJSON
(
capabilities
)
;
}
catch
(
e
)
{
throw
new
error
.
SessionNotCreatedError
(
e
)
;
}
if
(
this
.
capabilities
.
get
(
"
acceptInsecureCerts
"
)
)
{
logger
.
warn
(
"
TLS
certificate
errors
will
be
ignored
for
this
session
"
)
;
allowAllCerts
.
enable
(
)
;
}
if
(
this
.
proxy
.
init
(
)
)
{
logger
.
info
(
Proxy
settings
initialised
:
{
JSON
.
stringify
(
this
.
proxy
)
}
)
;
}
if
(
this
.
a11yChecks
&
&
accessibility
.
service
)
{
logger
.
info
(
"
Preemptively
starting
accessibility
service
in
Chrome
"
)
;
}
}
destroy
(
)
{
allowAllCerts
.
disable
(
)
;
this
.
_connections
.
forEach
(
connection
=
>
connection
.
close
(
)
)
;
this
.
_connections
.
clear
(
)
;
}
get
a11yChecks
(
)
{
return
this
.
capabilities
.
get
(
"
moz
:
accessibilityChecks
"
)
;
}
get
pageLoadStrategy
(
)
{
return
this
.
capabilities
.
get
(
"
pageLoadStrategy
"
)
;
}
get
proxy
(
)
{
return
this
.
capabilities
.
get
(
"
proxy
"
)
;
}
get
strictFileInteractability
(
)
{
return
this
.
capabilities
.
get
(
"
strictFileInteractability
"
)
;
}
get
timeouts
(
)
{
return
this
.
capabilities
.
get
(
"
timeouts
"
)
;
}
set
timeouts
(
timeouts
)
{
this
.
capabilities
.
set
(
"
timeouts
"
timeouts
)
;
}
get
unhandledPromptBehavior
(
)
{
return
this
.
capabilities
.
get
(
"
unhandledPromptBehavior
"
)
;
}
async
handle
(
request
response
)
{
const
webSocket
=
await
WebSocketHandshake
.
upgrade
(
request
response
)
;
const
conn
=
new
WebDriverBiDiConnection
(
webSocket
response
.
_connection
)
;
conn
.
registerSession
(
this
)
;
this
.
_connections
.
add
(
conn
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
"
nsIHttpRequestHandler
"
]
)
;
}
}
