"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
assert
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppInfo
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
appinfo
.
js
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
pprint
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
format
.
js
"
}
)
;
this
.
assert
=
{
}
;
assert
.
session
=
function
(
session
msg
=
"
"
)
{
msg
=
msg
|
|
"
WebDriver
session
does
not
exist
or
is
not
active
"
;
assert
.
that
(
session
=
>
session
&
&
typeof
session
.
id
=
=
"
string
"
msg
error
.
InvalidSessionIDError
)
(
session
)
;
}
;
assert
.
firefox
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Only
supported
in
Firefox
"
;
assert
.
that
(
isFirefox
=
>
isFirefox
msg
error
.
UnsupportedOperationError
)
(
AppInfo
.
isFirefox
)
;
}
;
assert
.
desktop
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Only
supported
in
desktop
applications
"
;
assert
.
that
(
isDesktop
=
>
isDesktop
msg
error
.
UnsupportedOperationError
)
(
!
AppInfo
.
isAndroid
)
;
}
;
assert
.
mobile
=
function
(
msg
=
"
"
)
{
msg
=
msg
|
|
"
Only
supported
on
Android
"
;
assert
.
that
(
isAndroid
=
>
isAndroid
msg
error
.
UnsupportedOperationError
)
(
AppInfo
.
isAndroid
)
;
}
;
assert
.
content
=
function
(
context
msg
=
"
"
)
{
msg
=
msg
|
|
"
Only
supported
in
content
context
"
;
assert
.
that
(
c
=
>
c
.
toString
(
)
=
=
"
content
"
msg
error
.
UnsupportedOperationError
)
(
context
)
;
}
;
assert
.
open
=
function
(
browsingContext
msg
=
"
"
)
{
msg
=
msg
|
|
"
Browsing
context
has
been
discarded
"
;
return
assert
.
that
(
browsingContext
=
>
!
!
browsingContext
?
.
currentWindowGlobal
msg
error
.
NoSuchWindowError
)
(
browsingContext
)
;
}
;
assert
.
noUserPrompt
=
function
(
dialog
msg
=
"
"
)
{
assert
.
that
(
d
=
>
d
=
=
=
null
|
|
typeof
d
=
=
"
undefined
"
msg
error
.
UnexpectedAlertOpenError
)
(
dialog
)
;
}
;
assert
.
defined
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
defined
;
return
assert
.
that
(
o
=
>
typeof
o
!
=
"
undefined
"
msg
)
(
obj
)
;
}
;
assert
.
number
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
finite
number
;
return
assert
.
that
(
Number
.
isFinite
msg
)
(
obj
)
;
}
;
assert
.
positiveNumber
=
function
(
obj
msg
=
"
"
)
{
assert
.
number
(
obj
msg
)
;
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
>
=
0
;
return
assert
.
that
(
n
=
>
n
>
=
0
msg
)
(
obj
)
;
}
;
assert
.
callable
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
{
obj
}
is
not
callable
;
return
assert
.
that
(
o
=
>
typeof
o
=
=
"
function
"
msg
)
(
obj
)
;
}
;
assert
.
unsignedShort
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
>
=
0
and
<
65536
;
return
assert
.
that
(
n
=
>
n
>
=
0
&
&
n
<
65536
msg
)
(
obj
)
;
}
;
assert
.
integer
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
an
integer
;
return
assert
.
that
(
Number
.
isSafeInteger
msg
)
(
obj
)
;
}
;
assert
.
positiveInteger
=
function
(
obj
msg
=
"
"
)
{
assert
.
integer
(
obj
msg
)
;
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
>
=
0
;
return
assert
.
that
(
n
=
>
n
>
=
0
msg
)
(
obj
)
;
}
;
assert
.
boolean
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
boolean
;
return
assert
.
that
(
b
=
>
typeof
b
=
=
"
boolean
"
msg
)
(
obj
)
;
}
;
assert
.
string
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
a
string
;
return
assert
.
that
(
s
=
>
typeof
s
=
=
"
string
"
msg
)
(
obj
)
;
}
;
assert
.
object
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
an
object
;
return
assert
.
that
(
o
=
>
{
let
s
=
Object
.
prototype
.
toString
.
call
(
o
)
;
return
s
=
=
"
[
object
Object
]
"
|
|
s
=
=
"
[
object
nsJSIID
]
"
;
}
msg
)
(
obj
)
;
}
;
assert
.
in
=
function
(
prop
obj
msg
=
"
"
)
{
if
(
Array
.
isArray
(
obj
)
)
{
assert
.
that
(
p
=
>
obj
.
includes
(
p
)
msg
)
(
prop
)
;
return
prop
;
}
assert
.
object
(
obj
msg
)
;
msg
=
msg
|
|
pprint
Expected
{
prop
}
in
{
obj
}
;
assert
.
that
(
p
=
>
obj
.
hasOwnProperty
(
p
)
msg
)
(
prop
)
;
return
obj
[
prop
]
;
}
;
assert
.
array
=
function
(
obj
msg
=
"
"
)
{
msg
=
msg
|
|
pprint
Expected
{
obj
}
to
be
an
Array
;
return
assert
.
that
(
Array
.
isArray
msg
)
(
obj
)
;
}
;
assert
.
that
=
function
(
predicate
message
=
"
"
err
=
error
.
InvalidArgumentError
)
{
return
obj
=
>
{
if
(
!
predicate
(
obj
)
)
{
throw
new
err
(
message
)
;
}
return
obj
;
}
;
}
;
