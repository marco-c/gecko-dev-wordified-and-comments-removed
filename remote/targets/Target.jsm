"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Target
"
]
;
const
{
Connection
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Connection
.
jsm
"
)
;
const
{
WebSocketTransport
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketTransport
.
jsm
"
)
;
const
{
WebSocketHandshake
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
server
/
WebSocketHandshake
.
jsm
"
)
;
class
Target
{
constructor
(
targets
sessionClass
)
{
this
.
targets
=
targets
;
this
.
sessionClass
=
sessionClass
;
this
.
sessions
=
new
Map
(
)
;
}
destructor
(
)
{
for
(
const
[
conn
]
of
this
.
sessions
)
{
conn
.
close
(
)
;
}
}
async
handle
(
request
response
)
{
const
so
=
await
WebSocketHandshake
.
upgrade
(
request
response
)
;
const
transport
=
new
WebSocketTransport
(
so
)
;
const
conn
=
new
Connection
(
transport
response
.
_connection
)
;
this
.
sessions
.
set
(
conn
new
this
.
sessionClass
(
conn
this
)
)
;
}
get
QueryInterface
(
)
{
return
ChromeUtils
.
generateQI
(
[
Ci
.
nsIHttpRequestHandler
]
)
;
}
}
