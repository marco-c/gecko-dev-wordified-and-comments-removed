"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Targets
"
]
;
const
{
EventEmitter
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
)
;
const
{
MessagePromise
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Sync
.
jsm
"
)
;
const
{
TabTarget
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
targets
/
TabTarget
.
jsm
"
)
;
const
{
MainProcessTarget
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
targets
/
MainProcessTarget
.
jsm
"
)
;
class
Targets
{
constructor
(
)
{
this
.
_targets
=
new
Map
(
)
;
EventEmitter
.
decorate
(
this
)
;
}
async
connect
(
browser
)
{
if
(
!
browser
.
browsingContext
)
{
await
new
MessagePromise
(
browser
.
messageManager
"
Browser
:
Init
"
)
;
}
const
target
=
new
TabTarget
(
this
browser
)
;
target
.
connect
(
)
;
this
.
_targets
.
set
(
target
.
id
target
)
;
this
.
emit
(
"
connect
"
target
)
;
}
disconnect
(
browser
)
{
if
(
!
browser
.
browsingContext
)
{
return
;
}
const
target
=
this
.
_targets
.
get
(
browser
.
browsingContext
.
id
)
;
if
(
target
)
{
this
.
emit
(
"
disconnect
"
target
)
;
target
.
disconnect
(
)
;
this
.
_targets
.
delete
(
target
.
id
)
;
}
}
clear
(
)
{
for
(
const
target
of
this
)
{
this
.
disconnect
(
target
.
browser
)
;
}
if
(
this
.
mainProcessTarget
)
{
this
.
mainProcessTarget
.
disconnect
(
)
;
this
.
mainProcessTarget
=
null
;
}
}
get
size
(
)
{
return
this
.
_targets
.
size
;
}
getById
(
id
)
{
return
this
.
_targets
.
get
(
id
)
;
}
getMainProcessTarget
(
)
{
if
(
!
this
.
mainProcessTarget
)
{
this
.
mainProcessTarget
=
new
MainProcessTarget
(
this
)
;
this
.
emit
(
"
connect
"
this
.
mainProcessTarget
)
;
}
return
this
.
mainProcessTarget
;
}
*
[
Symbol
.
iterator
]
(
)
{
for
(
const
target
of
this
.
_targets
.
values
(
)
)
{
yield
target
;
}
}
toJSON
(
)
{
return
[
.
.
.
this
]
;
}
toString
(
)
{
return
[
object
Targets
{
this
.
size
}
]
;
}
}
