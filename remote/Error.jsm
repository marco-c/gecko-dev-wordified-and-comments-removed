"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FatalError
"
"
formatError
"
"
UnknownMethodError
"
"
UnsupportedError
"
]
;
const
{
Log
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Log
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
Log
.
get
)
;
class
RemoteAgentError
extends
Error
{
constructor
(
message
=
"
"
cause
=
undefined
)
{
super
(
cause
)
;
this
.
name
=
this
.
constructor
.
name
;
this
.
message
=
message
;
this
.
cause
=
cause
;
this
.
notify
(
)
;
}
notify
(
)
{
Cu
.
reportError
(
this
)
;
log
.
error
(
formatError
(
this
)
)
;
}
format
(
)
{
return
formatError
(
this
)
;
}
}
class
FatalError
extends
RemoteAgentError
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
this
.
quit
(
)
;
}
notify
(
)
{
log
.
fatal
(
this
.
format
(
)
)
;
}
format
(
)
{
return
formatError
(
this
{
stack
:
true
}
)
;
}
quit
(
mode
=
Ci
.
nsIAppStartup
.
eForceQuit
)
{
Services
.
startup
.
quit
(
mode
)
;
}
}
class
UnsupportedError
extends
RemoteAgentError
{
}
class
UnknownMethodError
extends
RemoteAgentError
{
}
function
formatError
(
error
{
stack
=
false
}
=
{
}
)
{
const
ls
=
[
]
;
ls
.
push
(
{
error
.
name
}
:
{
error
.
message
?
{
error
.
message
}
:
:
"
"
}
)
;
if
(
stack
)
{
const
stack
=
error
.
stack
.
trim
(
)
.
split
(
"
\
n
"
)
;
ls
.
push
(
stack
.
map
(
line
=
>
\
t
{
line
}
)
.
join
(
"
\
n
"
)
)
;
if
(
error
.
cause
)
{
ls
.
push
(
"
caused
by
:
"
+
formatError
(
error
.
cause
{
stack
}
)
)
;
}
}
return
ls
.
join
(
"
\
n
"
)
;
}
