"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TabSession
"
]
;
const
{
Domains
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domains
.
jsm
"
)
;
const
{
Session
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
sessions
/
Session
.
jsm
"
)
;
class
TabSession
extends
Session
{
constructor
(
connection
target
id
parentSession
)
{
super
(
connection
target
id
)
;
this
.
parentSession
=
parentSession
;
this
.
mm
.
addMessageListener
(
"
remote
:
event
"
this
)
;
this
.
mm
.
addMessageListener
(
"
remote
:
result
"
this
)
;
this
.
mm
.
addMessageListener
(
"
remote
:
error
"
this
)
;
this
.
mm
.
loadFrameScript
(
"
chrome
:
/
/
remote
/
content
/
sessions
/
frame
-
script
.
js
"
false
)
;
}
destructor
(
)
{
super
.
destructor
(
)
;
this
.
mm
.
sendAsyncMessage
(
"
remote
:
destroy
"
{
browsingContextId
:
this
.
browsingContext
.
id
}
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
event
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
result
"
this
)
;
this
.
mm
.
removeMessageListener
(
"
remote
:
error
"
this
)
;
}
async
onMessage
(
{
id
method
params
}
)
{
try
{
if
(
typeof
id
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
id
'
field
"
)
;
}
if
(
typeof
method
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
method
'
field
"
)
;
}
const
{
domain
command
}
=
Domains
.
splitMethod
(
method
)
;
if
(
this
.
domains
.
domainSupportsMethod
(
domain
command
)
)
{
await
this
.
execute
(
id
domain
command
params
)
;
}
else
{
this
.
executeInChild
(
id
domain
command
params
)
;
}
}
catch
(
e
)
{
this
.
onError
(
id
e
)
;
}
}
executeInChild
(
id
domain
command
params
)
{
this
.
mm
.
sendAsyncMessage
(
"
remote
:
request
"
{
browsingContextId
:
this
.
browsingContext
.
id
request
:
{
id
domain
command
params
}
}
)
;
}
onResult
(
id
result
)
{
super
.
onResult
(
id
result
)
;
if
(
this
.
parentSession
)
{
this
.
parentSession
.
onEvent
(
"
Target
.
receivedMessageFromTarget
"
{
sessionId
:
this
.
id
message
:
JSON
.
stringify
(
{
id
result
}
)
}
)
;
}
}
onEvent
(
eventName
params
)
{
super
.
onEvent
(
eventName
params
)
;
if
(
this
.
parentSession
)
{
this
.
parentSession
.
onEvent
(
"
Target
.
receivedMessageFromTarget
"
{
sessionId
:
this
.
id
message
:
JSON
.
stringify
(
{
method
:
eventName
params
}
)
}
)
;
}
}
get
mm
(
)
{
return
this
.
target
.
mm
;
}
get
browsingContext
(
)
{
return
this
.
target
.
browsingContext
;
}
receiveMessage
(
{
name
data
}
)
{
const
{
id
result
event
error
}
=
data
;
switch
(
name
)
{
case
"
remote
:
result
"
:
this
.
onResult
(
id
result
)
;
break
;
case
"
remote
:
event
"
:
this
.
onEvent
(
event
.
eventName
event
.
params
)
;
break
;
case
"
remote
:
error
"
:
this
.
onError
(
id
error
)
;
break
;
}
}
}
