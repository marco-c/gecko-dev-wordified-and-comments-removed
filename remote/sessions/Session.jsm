"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Session
"
]
;
const
{
ParentProcessDomains
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
ParentProcessDomains
.
jsm
"
)
;
const
{
Domains
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
domains
/
Domains
.
jsm
"
)
;
const
{
RemoteAgentError
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Error
.
jsm
"
)
;
class
Session
{
constructor
(
connection
target
id
)
{
this
.
connection
=
connection
;
this
.
target
=
target
;
this
.
id
=
id
;
this
.
destructor
=
this
.
destructor
.
bind
(
this
)
;
this
.
connection
.
registerSession
(
this
)
;
this
.
connection
.
transport
.
on
(
"
close
"
this
.
destructor
)
;
this
.
domains
=
new
Domains
(
this
ParentProcessDomains
)
;
}
destructor
(
)
{
this
.
domains
.
clear
(
)
;
}
async
onMessage
(
{
id
method
params
}
)
{
try
{
if
(
typeof
id
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
id
'
field
"
)
;
}
if
(
typeof
method
=
=
"
undefined
"
)
{
throw
new
TypeError
(
"
Message
missing
'
method
'
field
"
)
;
}
const
[
domainName
methodName
]
=
Domains
.
splitMethod
(
method
)
;
await
this
.
execute
(
id
domainName
methodName
params
)
;
}
catch
(
e
)
{
this
.
onError
(
id
e
)
;
}
}
async
execute
(
id
domain
method
params
)
{
const
inst
=
this
.
domains
.
get
(
domain
)
;
const
result
=
await
inst
[
method
]
(
params
)
;
this
.
onResult
(
id
result
)
;
}
onResult
(
id
result
)
{
this
.
connection
.
send
(
{
id
sessionId
:
this
.
id
result
}
)
;
}
onError
(
id
error
)
{
this
.
connection
.
send
(
{
id
sessionId
:
this
.
id
error
:
{
message
:
RemoteAgentError
.
format
(
error
{
stack
:
true
}
)
}
}
)
;
}
onEvent
(
eventName
params
)
{
this
.
connection
.
send
(
{
sessionId
:
this
.
id
method
:
eventName
params
}
)
;
}
toString
(
)
{
return
[
object
{
this
.
constructor
.
name
}
{
this
.
connection
.
id
}
]
;
}
}
