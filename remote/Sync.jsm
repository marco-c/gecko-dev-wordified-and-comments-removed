"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DOMContentLoadedPromise
"
"
EventPromise
"
"
executeSoon
"
"
MessagePromise
"
"
PollPromise
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
TYPE_REPEATING_SLACK
}
=
Ci
.
nsITimer
;
function
EventPromise
(
listener
type
options
=
{
capture
:
false
wantsUntrusted
:
false
mozSystemGroup
:
false
}
)
{
if
(
!
listener
|
|
!
(
"
addEventListener
"
in
listener
)
)
{
throw
new
TypeError
(
)
;
}
if
(
typeof
type
!
=
"
string
"
)
{
throw
new
TypeError
(
)
;
}
if
(
(
"
capture
"
in
options
&
&
typeof
options
.
capture
!
=
"
boolean
"
)
|
|
(
"
wantsUntrusted
"
in
options
&
&
typeof
options
.
wantsUntrusted
!
=
"
boolean
"
)
|
|
(
"
mozSystemGroup
"
in
options
&
&
typeof
options
.
mozSystemGroup
!
=
"
boolean
"
)
)
{
throw
new
TypeError
(
)
;
}
options
.
once
=
true
;
return
new
Promise
(
resolve
=
>
{
listener
.
addEventListener
(
type
event
=
>
{
executeSoon
(
(
)
=
>
resolve
(
event
)
)
;
}
options
)
;
}
)
;
}
function
executeSoon
(
fn
)
{
if
(
typeof
fn
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
Services
.
tm
.
dispatchToMainThread
(
fn
)
;
}
function
DOMContentLoadedPromise
(
window
options
=
{
mozSystemGroup
:
true
}
)
{
if
(
window
.
document
.
readyState
=
=
"
complete
"
|
|
window
.
document
.
readyState
=
=
"
interactive
"
)
{
return
Promise
.
resolve
(
)
;
}
return
new
EventPromise
(
window
"
DOMContentLoaded
"
options
)
;
}
function
MessagePromise
(
target
name
)
{
if
(
!
(
target
instanceof
Ci
.
nsIMessageSender
)
)
{
throw
new
TypeError
(
)
;
}
return
new
Promise
(
resolve
=
>
{
const
onMessage
=
(
.
.
.
args
)
=
>
{
target
.
removeMessageListener
(
name
onMessage
)
;
resolve
(
.
.
.
args
)
;
}
;
target
.
addMessageListener
(
name
onMessage
)
;
}
)
;
}
function
PollPromise
(
func
{
timeout
=
null
interval
=
10
}
=
{
}
)
{
const
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
if
(
typeof
func
!
=
"
function
"
)
{
throw
new
TypeError
(
)
;
}
if
(
timeout
!
=
null
&
&
typeof
timeout
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
if
(
typeof
interval
!
=
"
number
"
)
{
throw
new
TypeError
(
)
;
}
if
(
(
timeout
&
&
(
!
Number
.
isInteger
(
timeout
)
|
|
timeout
<
0
)
)
|
|
!
Number
.
isInteger
(
interval
)
|
|
interval
<
0
)
{
throw
new
RangeError
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
start
end
;
if
(
Number
.
isInteger
(
timeout
)
)
{
start
=
new
Date
(
)
.
getTime
(
)
;
end
=
start
+
timeout
;
}
let
evalFn
=
(
)
=
>
{
new
Promise
(
func
)
.
then
(
resolve
rejected
=
>
{
if
(
typeof
rejected
!
=
"
undefined
"
)
{
throw
rejected
;
}
if
(
typeof
end
!
=
"
undefined
"
&
&
(
start
=
=
end
|
|
new
Date
(
)
.
getTime
(
)
>
=
end
)
)
{
resolve
(
rejected
)
;
}
}
)
.
catch
(
reject
)
;
}
;
evalFn
(
)
;
timer
.
init
(
evalFn
interval
TYPE_REPEATING_SLACK
)
;
}
)
.
then
(
res
=
>
{
timer
.
cancel
(
)
;
return
res
;
}
err
=
>
{
timer
.
cancel
(
)
;
throw
err
;
}
)
;
}
