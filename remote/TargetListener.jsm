"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TargetListener
"
]
;
const
{
Connection
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Connection
.
jsm
"
)
;
const
{
Session
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
Session
.
jsm
"
)
;
const
{
SocketListener
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
server
/
Socket
.
jsm
"
)
;
class
TargetListener
{
constructor
(
target
)
{
this
.
target
=
target
;
this
.
listener
=
null
;
this
.
sessions
=
new
Map
(
)
;
this
.
nextConnID
=
0
;
}
get
listening
(
)
{
return
!
!
this
.
listener
&
&
this
.
listener
.
listening
;
}
listen
(
)
{
if
(
this
.
listener
)
{
return
;
}
this
.
listener
=
new
SocketListener
(
)
;
this
.
listener
.
on
(
"
accepted
"
this
.
onConnectionAccepted
.
bind
(
this
)
)
;
this
.
listener
.
listen
(
"
ws
"
0
)
;
}
close
(
)
{
this
.
listener
.
off
(
"
accepted
"
this
.
onConnectionAccepted
.
bind
(
this
)
)
;
for
(
const
[
conn
session
]
of
this
.
sessions
)
{
session
.
destructor
(
)
;
conn
.
close
(
)
;
}
this
.
listener
.
close
(
)
;
this
.
listener
=
null
;
this
.
sessions
.
clear
(
)
;
}
onConnectionAccepted
(
transport
listener
)
{
const
conn
=
new
Connection
(
this
.
nextConnID
+
+
transport
listener
)
;
transport
.
ready
(
)
;
this
.
sessions
.
set
(
conn
new
Session
(
conn
this
.
target
)
)
;
}
get
url
(
)
{
if
(
this
.
listening
)
{
const
{
network
host
port
}
=
this
.
listener
;
return
{
network
}
:
/
/
{
host
}
:
{
port
}
/
;
}
return
null
;
}
toString
(
)
{
return
[
object
TargetListener
{
this
.
url
|
|
"
disconnected
"
}
]
;
}
}
