"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
GeckoDriver
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
element
}
=
ChromeUtils
.
import
(
"
chrome
:
/
/
remote
/
content
/
marionette
/
element
.
js
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
Addon
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
addon
.
js
"
AppInfo
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
appinfo
.
js
"
assert
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Assert
.
jsm
"
atom
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
atom
.
js
"
browser
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
browser
.
js
"
capture
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
capture
.
js
"
clearElementIdCache
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteCommandsParent
.
jsm
"
Context
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
browser
.
js
"
cookie
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
cookie
.
js
"
DebounceCallback
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
sync
.
js
"
disableEventsActor
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsParent
.
jsm
"
enableEventsActor
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsParent
.
jsm
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
EventPromise
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Sync
.
jsm
"
getMarionetteCommandsActorProxy
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteCommandsParent
.
jsm
"
IdlePromise
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
sync
.
js
"
l10n
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
l10n
.
js
"
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
Marionette
:
"
chrome
:
/
/
remote
/
content
/
components
/
Marionette
.
jsm
"
MarionettePrefs
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
prefs
.
js
"
modal
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
modal
.
js
"
navigate
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
navigate
.
js
"
permissions
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
permissions
.
js
"
pprint
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Format
.
jsm
"
print
:
"
chrome
:
/
/
remote
/
content
/
shared
/
PDF
.
jsm
"
reftest
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
reftest
.
js
"
registerCommandsActor
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteCommandsParent
.
jsm
"
RemoteAgent
:
"
chrome
:
/
/
remote
/
content
/
components
/
RemoteAgent
.
jsm
"
TabManager
:
"
chrome
:
/
/
remote
/
content
/
shared
/
TabManager
.
jsm
"
TimedPromise
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
sync
.
js
"
Timeouts
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Capabilities
.
jsm
"
UnhandledPromptBehavior
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Capabilities
.
jsm
"
unregisterCommandsActor
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteCommandsParent
.
jsm
"
waitForInitialNavigationCompleted
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Navigate
.
jsm
"
waitForObserverTopic
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
sync
.
js
"
WebDriverSession
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Session
.
jsm
"
WebReference
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
element
.
js
"
windowManager
:
"
chrome
:
/
/
remote
/
content
/
shared
/
WindowManager
.
jsm
"
WindowState
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
browser
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
lazy
.
Log
.
TYPES
.
MARIONETTE
)
)
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
SUPPORTED_STRATEGIES
=
new
Set
(
[
element
.
Strategy
.
ClassName
element
.
Strategy
.
Selector
element
.
Strategy
.
ID
element
.
Strategy
.
Name
element
.
Strategy
.
LinkText
element
.
Strategy
.
PartialLinkText
element
.
Strategy
.
TagName
element
.
Strategy
.
XPath
]
)
;
const
TIMEOUT_NO_WINDOW_MANAGER
=
5000
;
const
TOPIC_BROWSER_READY
=
"
browser
-
delayed
-
startup
-
finished
"
;
function
GeckoDriver
(
server
)
{
this
.
_server
=
server
;
this
.
_currentSession
=
null
;
this
.
browsers
=
{
}
;
this
.
curBrowser
=
null
;
this
.
mainFrame
=
null
;
this
.
context
=
lazy
.
Context
.
Content
;
this
.
dialog
=
null
;
this
.
dialogObserver
=
null
;
}
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
context
"
{
get
(
)
{
return
this
.
_context
;
}
set
(
context
)
{
this
.
_context
=
lazy
.
Context
.
fromString
(
context
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
currentSession
"
{
get
(
)
{
if
(
lazy
.
RemoteAgent
.
webDriverBiDi
)
{
return
lazy
.
RemoteAgent
.
webDriverBiDi
.
session
;
}
return
this
.
_currentSession
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
currentURL
"
{
get
(
)
{
const
browsingContext
=
this
.
getBrowsingContext
(
{
top
:
true
}
)
;
return
new
URL
(
browsingContext
.
currentWindowGlobal
.
documentURI
.
spec
)
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
title
"
{
get
(
)
{
const
browsingContext
=
this
.
getBrowsingContext
(
{
top
:
true
}
)
;
return
browsingContext
.
currentWindowGlobal
.
documentTitle
;
}
}
)
;
Object
.
defineProperty
(
GeckoDriver
.
prototype
"
windowType
"
{
get
(
)
{
return
this
.
curBrowser
.
window
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
}
}
)
;
GeckoDriver
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
;
GeckoDriver
.
prototype
.
handleModalDialog
=
function
(
action
dialog
)
{
if
(
!
this
.
currentSession
)
{
return
;
}
if
(
action
=
=
=
lazy
.
modal
.
ACTION_OPENED
)
{
this
.
dialog
=
new
lazy
.
modal
.
Dialog
(
(
)
=
>
this
.
curBrowser
dialog
)
;
this
.
getActor
(
)
.
notifyDialogOpened
(
)
;
}
else
if
(
action
=
=
=
lazy
.
modal
.
ACTION_CLOSED
)
{
this
.
dialog
=
null
;
}
}
;
GeckoDriver
.
prototype
.
_getCurrentURL
=
function
(
)
{
const
browsingContext
=
this
.
getBrowsingContext
(
{
top
:
true
}
)
;
return
new
URL
(
browsingContext
.
currentURI
.
spec
)
;
}
;
GeckoDriver
.
prototype
.
getActor
=
function
(
options
=
{
}
)
{
return
lazy
.
getMarionetteCommandsActorProxy
(
(
)
=
>
this
.
getBrowsingContext
(
options
)
)
;
}
;
GeckoDriver
.
prototype
.
getBrowsingContext
=
function
(
options
=
{
}
)
{
const
{
context
=
this
.
context
parent
=
false
top
=
false
}
=
options
;
let
browsingContext
=
null
;
if
(
context
=
=
=
lazy
.
Context
.
Chrome
)
{
browsingContext
=
this
.
currentSession
?
.
chromeBrowsingContext
;
}
else
{
browsingContext
=
this
.
currentSession
?
.
contentBrowsingContext
;
}
if
(
browsingContext
&
&
parent
)
{
browsingContext
=
browsingContext
.
parent
;
}
if
(
browsingContext
&
&
top
)
{
browsingContext
=
browsingContext
.
top
;
}
return
browsingContext
;
}
;
GeckoDriver
.
prototype
.
getCurrentWindow
=
function
(
options
=
{
}
)
{
const
{
context
=
this
.
context
}
=
options
;
let
win
=
null
;
switch
(
context
)
{
case
lazy
.
Context
.
Chrome
:
if
(
this
.
curBrowser
)
{
win
=
this
.
curBrowser
.
window
;
}
break
;
case
lazy
.
Context
.
Content
:
if
(
this
.
curBrowser
&
&
this
.
curBrowser
.
contentBrowser
)
{
win
=
this
.
curBrowser
.
window
;
}
break
;
}
return
win
;
}
;
GeckoDriver
.
prototype
.
isReftestBrowser
=
function
(
element
)
{
return
(
this
.
_reftest
&
&
element
&
&
element
.
tagName
=
=
=
"
xul
:
browser
"
&
&
element
.
parentElement
&
&
element
.
parentElement
.
id
=
=
=
"
reftest
"
)
;
}
;
GeckoDriver
.
prototype
.
addBrowser
=
function
(
win
)
{
let
context
=
new
lazy
.
browser
.
Context
(
win
this
)
;
let
winId
=
lazy
.
windowManager
.
getIdForWindow
(
win
)
;
this
.
browsers
[
winId
]
=
context
;
this
.
curBrowser
=
this
.
browsers
[
winId
]
;
}
;
GeckoDriver
.
prototype
.
getVisibleText
=
function
(
el
lines
)
{
try
{
if
(
lazy
.
atom
.
isElementDisplayed
(
el
this
.
getCurrentWindow
(
)
)
)
{
if
(
el
.
value
)
{
lines
.
push
(
el
.
value
)
;
}
for
(
let
child
in
el
.
childNodes
)
{
this
.
getVisibleText
(
el
.
childNodes
[
child
]
lines
)
;
}
}
}
catch
(
e
)
{
if
(
el
.
nodeName
=
=
"
#
text
"
)
{
lines
.
push
(
el
.
textContent
)
;
}
}
}
;
GeckoDriver
.
prototype
.
registerBrowser
=
function
(
browserElement
)
{
if
(
!
lazy
.
AppInfo
.
isFirefox
|
|
browserElement
.
namespaceURI
!
=
XUL_NS
|
|
browserElement
.
nodeName
!
=
"
browser
"
|
|
browserElement
.
getTabBrowser
(
)
)
{
this
.
curBrowser
.
register
(
browserElement
)
;
}
}
;
GeckoDriver
.
prototype
.
newSession
=
async
function
(
cmd
)
{
if
(
this
.
currentSession
)
{
throw
new
lazy
.
error
.
SessionNotCreatedError
(
"
Maximum
number
of
active
sessions
"
)
;
}
const
{
parameters
:
capabilities
}
=
cmd
;
try
{
if
(
lazy
.
RemoteAgent
.
webDriverBiDi
)
{
await
lazy
.
RemoteAgent
.
webDriverBiDi
.
createSession
(
capabilities
)
;
}
else
{
this
.
_currentSession
=
new
lazy
.
WebDriverSession
(
capabilities
)
;
this
.
_currentSession
.
capabilities
.
delete
(
"
webSocketUrl
"
)
;
}
if
(
!
this
.
currentSession
.
capabilities
.
get
(
"
moz
:
windowless
"
)
)
{
lazy
.
logger
.
debug
(
Waiting
for
initial
application
window
)
;
await
lazy
.
Marionette
.
browserStartupFinished
;
const
appWin
=
await
lazy
.
windowManager
.
waitForInitialApplicationWindowLoaded
(
)
;
if
(
lazy
.
MarionettePrefs
.
clickToStart
)
{
Services
.
prompt
.
alert
(
appWin
"
"
"
Click
to
start
execution
of
marionette
tests
"
)
;
}
this
.
addBrowser
(
appWin
)
;
this
.
mainFrame
=
appWin
;
this
.
dialogObserver
=
new
lazy
.
modal
.
DialogObserver
(
(
)
=
>
this
.
curBrowser
)
;
this
.
dialogObserver
.
add
(
this
.
handleModalDialog
.
bind
(
this
)
)
;
for
(
let
win
of
lazy
.
windowManager
.
windows
)
{
const
tabBrowser
=
lazy
.
TabManager
.
getTabBrowser
(
win
)
;
if
(
tabBrowser
)
{
for
(
const
tab
of
tabBrowser
.
tabs
)
{
const
contentBrowser
=
lazy
.
TabManager
.
getBrowserForTab
(
tab
)
;
this
.
registerBrowser
(
contentBrowser
)
;
}
}
this
.
registerListenersForWindow
(
win
)
;
}
if
(
this
.
mainFrame
)
{
this
.
currentSession
.
chromeBrowsingContext
=
this
.
mainFrame
.
browsingContext
;
this
.
mainFrame
.
focus
(
)
;
}
if
(
this
.
curBrowser
.
tab
)
{
const
browsingContext
=
this
.
curBrowser
.
contentBrowser
.
browsingContext
;
this
.
currentSession
.
contentBrowsingContext
=
browsingContext
;
await
lazy
.
waitForInitialNavigationCompleted
(
browsingContext
.
webProgress
)
;
this
.
curBrowser
.
contentBrowser
.
focus
(
)
;
}
this
.
dialog
=
lazy
.
modal
.
findModalDialogs
(
this
.
curBrowser
)
;
}
lazy
.
registerCommandsActor
(
)
;
lazy
.
enableEventsActor
(
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_BROWSER_READY
)
;
}
catch
(
e
)
{
throw
new
lazy
.
error
.
SessionNotCreatedError
(
e
)
;
}
return
{
sessionId
:
this
.
currentSession
.
id
capabilities
:
this
.
currentSession
.
capabilities
}
;
}
;
GeckoDriver
.
prototype
.
registerListenersForWindow
=
function
(
win
)
{
const
tabBrowser
=
lazy
.
TabManager
.
getTabBrowser
(
win
)
;
tabBrowser
?
.
addEventListener
(
"
XULFrameLoaderCreated
"
this
)
;
}
;
GeckoDriver
.
prototype
.
unregisterListenersForWindow
=
function
(
win
)
{
const
tabBrowser
=
lazy
.
TabManager
.
getTabBrowser
(
win
)
;
tabBrowser
?
.
removeEventListener
(
"
XULFrameLoaderCreated
"
this
)
;
}
;
GeckoDriver
.
prototype
.
handleEvent
=
function
(
{
target
type
}
)
{
switch
(
type
)
{
case
"
XULFrameLoaderCreated
"
:
if
(
target
=
=
=
this
.
curBrowser
.
contentBrowser
)
{
lazy
.
logger
.
trace
(
"
Remoteness
change
detected
.
Set
new
top
-
level
browsing
context
"
+
to
{
target
.
browsingContext
.
id
}
)
;
this
.
currentSession
.
contentBrowsingContext
=
target
.
browsingContext
;
}
break
;
}
}
;
GeckoDriver
.
prototype
.
observe
=
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
TOPIC_BROWSER_READY
:
this
.
registerListenersForWindow
(
subject
)
;
break
;
}
}
;
GeckoDriver
.
prototype
.
getSessionCapabilities
=
function
(
)
{
return
{
capabilities
:
this
.
currentSession
.
capabilities
}
;
}
;
GeckoDriver
.
prototype
.
setContext
=
function
(
cmd
)
{
let
value
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
value
)
;
this
.
context
=
value
;
}
;
GeckoDriver
.
prototype
.
getContext
=
function
(
)
{
return
this
.
context
;
}
;
GeckoDriver
.
prototype
.
executeScript
=
async
function
(
cmd
)
{
let
{
script
args
}
=
cmd
.
parameters
;
let
opts
=
{
script
:
cmd
.
parameters
.
script
args
:
cmd
.
parameters
.
args
sandboxName
:
cmd
.
parameters
.
sandbox
newSandbox
:
cmd
.
parameters
.
newSandbox
file
:
cmd
.
parameters
.
filename
line
:
cmd
.
parameters
.
line
}
;
return
{
value
:
await
this
.
execute_
(
script
args
opts
)
}
;
}
;
GeckoDriver
.
prototype
.
executeAsyncScript
=
async
function
(
cmd
)
{
let
{
script
args
}
=
cmd
.
parameters
;
let
opts
=
{
script
:
cmd
.
parameters
.
script
args
:
cmd
.
parameters
.
args
sandboxName
:
cmd
.
parameters
.
sandbox
newSandbox
:
cmd
.
parameters
.
newSandbox
file
:
cmd
.
parameters
.
filename
line
:
cmd
.
parameters
.
line
async
:
true
}
;
return
{
value
:
await
this
.
execute_
(
script
args
opts
)
}
;
}
;
GeckoDriver
.
prototype
.
execute_
=
async
function
(
script
args
=
[
]
{
sandboxName
=
null
newSandbox
=
false
file
=
"
"
line
=
0
async
=
false
}
=
{
}
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
lazy
.
assert
.
string
(
script
lazy
.
pprint
Expected
"
script
"
to
be
a
string
:
{
script
}
)
;
lazy
.
assert
.
array
(
args
lazy
.
pprint
Expected
script
args
to
be
an
array
:
{
args
}
)
;
if
(
sandboxName
!
=
=
null
)
{
lazy
.
assert
.
string
(
sandboxName
lazy
.
pprint
Expected
sandbox
name
to
be
a
string
:
{
sandboxName
}
)
;
}
lazy
.
assert
.
boolean
(
newSandbox
lazy
.
pprint
Expected
newSandbox
to
be
boolean
:
{
newSandbox
}
)
;
lazy
.
assert
.
string
(
file
lazy
.
pprint
Expected
file
to
be
a
string
:
{
file
}
)
;
lazy
.
assert
.
number
(
line
lazy
.
pprint
Expected
line
to
be
a
number
:
{
line
}
)
;
let
opts
=
{
timeout
:
this
.
currentSession
.
timeouts
.
script
sandboxName
newSandbox
file
line
async
}
;
return
this
.
getActor
(
)
.
executeScript
(
script
args
opts
)
;
}
;
GeckoDriver
.
prototype
.
navigateTo
=
async
function
(
cmd
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
const
browsingContext
=
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
validURL
;
try
{
validURL
=
new
URL
(
cmd
.
parameters
.
url
)
;
}
catch
(
e
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
Malformed
URL
:
{
e
.
message
}
)
;
}
this
.
currentSession
.
contentBrowsingContext
=
browsingContext
;
const
loadEventExpected
=
lazy
.
navigate
.
isLoadEventExpected
(
this
.
_getCurrentURL
(
)
{
future
:
validURL
}
)
;
await
lazy
.
navigate
.
waitForNavigationCompleted
(
this
(
)
=
>
{
lazy
.
navigate
.
navigateTo
(
browsingContext
validURL
)
;
}
{
loadEventExpected
}
)
;
this
.
curBrowser
.
contentBrowser
.
focus
(
)
;
}
;
GeckoDriver
.
prototype
.
getCurrentUrl
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
return
this
.
_getCurrentURL
(
)
.
href
;
}
;
GeckoDriver
.
prototype
.
getTitle
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
return
this
.
title
;
}
;
GeckoDriver
.
prototype
.
getWindowType
=
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
return
this
.
windowType
;
}
;
GeckoDriver
.
prototype
.
getPageSource
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
return
this
.
getActor
(
)
.
getPageSource
(
)
;
}
;
GeckoDriver
.
prototype
.
goBack
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
const
browsingContext
=
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
if
(
!
browsingContext
.
embedderElement
?
.
canGoBack
)
{
return
;
}
await
lazy
.
navigate
.
waitForNavigationCompleted
(
this
(
)
=
>
{
browsingContext
.
goBack
(
)
;
}
)
;
}
;
GeckoDriver
.
prototype
.
goForward
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
const
browsingContext
=
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
if
(
!
browsingContext
.
embedderElement
?
.
canGoForward
)
{
return
;
}
await
lazy
.
navigate
.
waitForNavigationCompleted
(
this
(
)
=
>
{
browsingContext
.
goForward
(
)
;
}
)
;
}
;
GeckoDriver
.
prototype
.
refresh
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
const
browsingContext
=
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
this
.
currentSession
.
contentBrowsingContext
=
browsingContext
;
await
lazy
.
navigate
.
waitForNavigationCompleted
(
this
(
)
=
>
{
lazy
.
navigate
.
refresh
(
browsingContext
)
;
}
)
;
}
;
GeckoDriver
.
prototype
.
getWindowHandle
=
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
if
(
this
.
context
=
=
lazy
.
Context
.
Chrome
)
{
return
lazy
.
windowManager
.
getIdForWindow
(
this
.
curBrowser
.
window
)
;
}
return
lazy
.
TabManager
.
getIdForBrowser
(
this
.
curBrowser
.
contentBrowser
)
;
}
;
GeckoDriver
.
prototype
.
getWindowHandles
=
function
(
)
{
if
(
this
.
context
=
=
lazy
.
Context
.
Chrome
)
{
return
lazy
.
windowManager
.
chromeWindowHandles
.
map
(
String
)
;
}
return
lazy
.
TabManager
.
allBrowserUniqueIds
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
getWindowRect
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
setWindowRect
=
async
function
(
cmd
)
{
lazy
.
assert
.
desktop
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
{
x
=
null
y
=
null
width
=
null
height
=
null
}
=
cmd
.
parameters
;
if
(
x
!
=
=
null
)
{
lazy
.
assert
.
integer
(
x
)
;
}
if
(
y
!
=
=
null
)
{
lazy
.
assert
.
integer
(
y
)
;
}
if
(
height
!
=
=
null
)
{
lazy
.
assert
.
positiveInteger
(
height
)
;
}
if
(
width
!
=
=
null
)
{
lazy
.
assert
.
positiveInteger
(
width
)
;
}
const
win
=
this
.
getCurrentWindow
(
)
;
switch
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
)
{
case
lazy
.
WindowState
.
Fullscreen
:
await
exitFullscreen
(
win
)
;
break
;
case
lazy
.
WindowState
.
Maximized
:
case
lazy
.
WindowState
.
Minimized
:
await
restoreWindow
(
win
)
;
break
;
}
function
geometryMatches
(
)
{
if
(
width
!
=
=
null
&
&
height
!
=
=
null
&
&
(
win
.
outerWidth
!
=
=
width
|
|
win
.
outerHeight
!
=
=
height
)
)
{
return
false
;
}
if
(
x
!
=
=
null
&
&
y
!
=
=
null
&
&
(
win
.
screenX
!
=
=
x
|
|
win
.
screenY
!
=
=
y
)
)
{
return
false
;
}
lazy
.
logger
.
trace
(
Requested
window
geometry
matches
)
;
return
true
;
}
if
(
!
geometryMatches
(
)
)
{
const
options
=
{
checkFn
:
geometryMatches
timeout
:
500
}
;
const
promises
=
[
]
;
if
(
width
!
=
=
null
&
&
height
!
=
=
null
)
{
promises
.
push
(
new
lazy
.
EventPromise
(
win
"
resize
"
options
)
)
;
win
.
resizeTo
(
width
height
)
;
}
if
(
x
!
=
=
null
&
&
y
!
=
=
null
)
{
promises
.
push
(
new
lazy
.
EventPromise
(
win
.
windowRoot
"
MozUpdateWindowPos
"
options
)
)
;
win
.
moveTo
(
x
y
)
;
}
try
{
await
Promise
.
race
(
promises
)
;
}
catch
(
e
)
{
if
(
e
instanceof
lazy
.
error
.
TimeoutError
)
{
}
else
{
throw
e
;
}
}
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
switchToWindow
=
async
function
(
cmd
)
{
const
{
focus
=
true
handle
}
=
cmd
.
parameters
;
lazy
.
assert
.
string
(
handle
lazy
.
pprint
Expected
"
handle
"
to
be
a
string
got
{
handle
}
)
;
lazy
.
assert
.
boolean
(
focus
lazy
.
pprint
Expected
"
focus
"
to
be
a
boolean
got
{
focus
}
)
;
const
found
=
lazy
.
windowManager
.
findWindowByHandle
(
handle
)
;
let
selected
=
false
;
if
(
found
)
{
try
{
await
this
.
setWindowHandle
(
found
focus
)
;
selected
=
true
;
}
catch
(
e
)
{
lazy
.
logger
.
error
(
e
)
;
}
}
if
(
!
selected
)
{
throw
new
lazy
.
error
.
NoSuchWindowError
(
Unable
to
locate
window
:
{
handle
}
)
;
}
}
;
GeckoDriver
.
prototype
.
setWindowHandle
=
async
function
(
winProperties
focus
=
true
)
{
if
(
!
(
winProperties
.
id
in
this
.
browsers
)
)
{
this
.
addBrowser
(
winProperties
.
win
)
;
this
.
mainFrame
=
winProperties
.
win
;
this
.
currentSession
.
chromeBrowsingContext
=
this
.
mainFrame
.
browsingContext
;
if
(
!
winProperties
.
hasTabBrowser
)
{
this
.
currentSession
.
contentBrowsingContext
=
null
;
}
else
{
const
tabBrowser
=
lazy
.
TabManager
.
getTabBrowser
(
winProperties
.
win
)
;
const
contentBrowser
=
tabBrowser
.
tabs
?
tabBrowser
.
selectedBrowser
:
tabBrowser
;
this
.
currentSession
.
contentBrowsingContext
=
contentBrowser
.
browsingContext
;
this
.
registerBrowser
(
contentBrowser
)
;
}
}
else
{
this
.
curBrowser
=
this
.
browsers
[
winProperties
.
id
]
;
this
.
mainFrame
=
this
.
curBrowser
.
window
;
let
tab
=
null
;
if
(
winProperties
.
hasTabBrowser
)
{
tab
=
await
this
.
curBrowser
.
switchToTab
(
winProperties
.
tabIndex
winProperties
.
win
focus
)
;
}
this
.
currentSession
.
chromeBrowsingContext
=
this
.
mainFrame
.
browsingContext
;
this
.
currentSession
.
contentBrowsingContext
=
tab
?
.
linkedBrowser
.
browsingContext
;
}
this
.
dialog
=
lazy
.
modal
.
findModalDialogs
(
this
.
curBrowser
)
;
if
(
focus
&
&
!
this
.
dialog
?
.
isWindowModal
)
{
await
this
.
curBrowser
.
focusWindow
(
)
;
}
}
;
GeckoDriver
.
prototype
.
switchToParentFrame
=
async
function
(
)
{
let
browsingContext
=
this
.
getBrowsingContext
(
)
;
if
(
browsingContext
&
&
!
browsingContext
.
parent
)
{
return
;
}
browsingContext
=
lazy
.
assert
.
open
(
browsingContext
?
.
parent
)
;
this
.
currentSession
.
contentBrowsingContext
=
browsingContext
;
}
;
GeckoDriver
.
prototype
.
switchToFrame
=
async
function
(
cmd
)
{
const
{
element
:
el
id
}
=
cmd
.
parameters
;
if
(
typeof
id
=
=
"
number
"
)
{
lazy
.
assert
.
unsignedShort
(
id
Expected
id
to
be
unsigned
short
got
{
id
}
)
;
}
const
top
=
id
=
=
null
&
&
el
=
=
null
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
byFrame
;
if
(
typeof
el
=
=
"
string
"
)
{
byFrame
=
lazy
.
WebReference
.
fromUUID
(
el
)
;
}
else
if
(
el
)
{
byFrame
=
lazy
.
WebReference
.
fromJSON
(
el
)
;
}
const
{
browsingContext
}
=
await
this
.
getActor
(
{
top
}
)
.
switchToFrame
(
byFrame
|
|
id
)
;
this
.
currentSession
.
contentBrowsingContext
=
browsingContext
;
}
;
GeckoDriver
.
prototype
.
getTimeouts
=
function
(
)
{
return
this
.
currentSession
.
timeouts
;
}
;
GeckoDriver
.
prototype
.
setTimeouts
=
function
(
cmd
)
{
let
merged
=
Object
.
assign
(
this
.
currentSession
.
timeouts
.
toJSON
(
)
cmd
.
parameters
)
;
this
.
currentSession
.
timeouts
=
lazy
.
Timeouts
.
fromJSON
(
merged
)
;
}
;
GeckoDriver
.
prototype
.
singleTap
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
let
{
id
x
y
}
=
cmd
.
parameters
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
await
this
.
getActor
(
)
.
singleTap
(
webEl
x
y
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
performActions
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
actions
=
cmd
.
parameters
.
actions
;
await
this
.
getActor
(
)
.
performActions
(
actions
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
releaseActions
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
await
this
.
getActor
(
)
.
releaseActions
(
)
;
}
;
GeckoDriver
.
prototype
.
findElement
=
async
function
(
cmd
)
{
const
{
element
:
el
using
value
}
=
cmd
.
parameters
;
if
(
!
SUPPORTED_STRATEGIES
.
has
(
using
)
)
{
throw
new
lazy
.
error
.
InvalidSelectorError
(
Strategy
not
supported
:
{
using
}
)
;
}
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
startNode
;
if
(
typeof
el
!
=
"
undefined
"
)
{
startNode
=
lazy
.
WebReference
.
fromUUID
(
el
)
;
}
let
opts
=
{
startNode
timeout
:
this
.
currentSession
.
timeouts
.
implicit
all
:
false
}
;
return
this
.
getActor
(
)
.
findElement
(
using
value
opts
)
;
}
;
GeckoDriver
.
prototype
.
findElements
=
async
function
(
cmd
)
{
const
{
element
:
el
using
value
}
=
cmd
.
parameters
;
if
(
!
SUPPORTED_STRATEGIES
.
has
(
using
)
)
{
throw
new
lazy
.
error
.
InvalidSelectorError
(
Strategy
not
supported
:
{
using
}
)
;
}
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
startNode
;
if
(
typeof
el
!
=
"
undefined
"
)
{
startNode
=
lazy
.
WebReference
.
fromUUID
(
el
)
;
}
let
opts
=
{
startNode
timeout
:
this
.
currentSession
.
timeouts
.
implicit
all
:
true
}
;
return
this
.
getActor
(
)
.
findElements
(
using
value
opts
)
;
}
;
GeckoDriver
.
prototype
.
getShadowRoot
=
async
function
(
cmd
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
lazy
.
pprint
Expected
"
id
"
to
be
a
string
got
{
cmd
.
parameters
.
id
}
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getShadowRoot
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
getActiveElement
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
return
this
.
getActor
(
)
.
getActiveElement
(
)
;
}
;
GeckoDriver
.
prototype
.
clickElement
=
async
function
(
cmd
)
{
const
browsingContext
=
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
const
actor
=
this
.
getActor
(
)
;
const
loadEventExpected
=
lazy
.
navigate
.
isLoadEventExpected
(
this
.
_getCurrentURL
(
)
{
browsingContext
target
:
await
actor
.
getElementAttribute
(
webEl
"
target
"
)
}
)
;
await
lazy
.
navigate
.
waitForNavigationCompleted
(
this
(
)
=
>
actor
.
clickElement
(
webEl
this
.
currentSession
.
capabilities
)
{
loadEventExpected
requireBeforeUnload
:
false
}
)
;
}
;
GeckoDriver
.
prototype
.
getElementAttribute
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
const
name
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
name
)
;
const
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementAttribute
(
webEl
name
)
;
}
;
GeckoDriver
.
prototype
.
getElementProperty
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
const
name
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
name
)
;
const
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementProperty
(
webEl
name
)
;
}
;
GeckoDriver
.
prototype
.
getElementText
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementText
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
getElementTagName
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementTagName
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
isElementDisplayed
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
isElementDisplayed
(
webEl
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
getElementValueOfCssProperty
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
prop
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
propertyName
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementValueOfCssProperty
(
webEl
prop
)
;
}
;
GeckoDriver
.
prototype
.
isElementEnabled
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
isElementEnabled
(
webEl
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
isElementSelected
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
isElementSelected
(
webEl
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
getElementRect
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
getElementRect
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
sendKeysToElement
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
text
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
text
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
return
this
.
getActor
(
)
.
sendKeysToElement
(
webEl
text
this
.
currentSession
.
capabilities
)
;
}
;
GeckoDriver
.
prototype
.
clearElement
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
id
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
id
)
;
let
webEl
=
lazy
.
WebReference
.
fromUUID
(
id
)
;
await
this
.
getActor
(
)
.
clearElement
(
webEl
)
;
}
;
GeckoDriver
.
prototype
.
addCookie
=
async
function
(
cmd
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
{
protocol
hostname
}
=
this
.
_getCurrentURL
(
)
;
const
networkSchemes
=
[
"
http
:
"
"
https
:
"
]
;
if
(
!
networkSchemes
.
includes
(
protocol
)
)
{
throw
new
lazy
.
error
.
InvalidCookieDomainError
(
"
Document
is
cookie
-
averse
"
)
;
}
let
newCookie
=
lazy
.
cookie
.
fromJSON
(
cmd
.
parameters
.
cookie
)
;
lazy
.
cookie
.
add
(
newCookie
{
restrictToHost
:
hostname
protocol
}
)
;
}
;
GeckoDriver
.
prototype
.
getCookies
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
{
hostname
pathname
}
=
this
.
_getCurrentURL
(
)
;
return
[
.
.
.
lazy
.
cookie
.
iter
(
hostname
pathname
)
]
;
}
;
GeckoDriver
.
prototype
.
deleteAllCookies
=
async
function
(
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
{
hostname
pathname
}
=
this
.
_getCurrentURL
(
)
;
for
(
let
toDelete
of
lazy
.
cookie
.
iter
(
hostname
pathname
)
)
{
lazy
.
cookie
.
remove
(
toDelete
)
;
}
}
;
GeckoDriver
.
prototype
.
deleteCookie
=
async
function
(
cmd
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
{
hostname
pathname
}
=
this
.
_getCurrentURL
(
)
;
let
name
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
name
)
;
for
(
let
c
of
lazy
.
cookie
.
iter
(
hostname
pathname
)
)
{
if
(
c
.
name
=
=
=
name
)
{
lazy
.
cookie
.
remove
(
c
)
;
}
}
}
;
GeckoDriver
.
prototype
.
newWindow
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
focus
=
false
;
if
(
typeof
cmd
.
parameters
.
focus
!
=
"
undefined
"
)
{
focus
=
lazy
.
assert
.
boolean
(
cmd
.
parameters
.
focus
lazy
.
pprint
Expected
"
focus
"
to
be
a
boolean
got
{
cmd
.
parameters
.
focus
}
)
;
}
let
isPrivate
=
false
;
if
(
typeof
cmd
.
parameters
.
private
!
=
"
undefined
"
)
{
isPrivate
=
lazy
.
assert
.
boolean
(
cmd
.
parameters
.
private
lazy
.
pprint
Expected
"
private
"
to
be
a
boolean
got
{
cmd
.
parameters
.
private
}
)
;
}
let
type
;
if
(
typeof
cmd
.
parameters
.
type
!
=
"
undefined
"
)
{
type
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
type
lazy
.
pprint
Expected
"
type
"
to
be
a
string
got
{
cmd
.
parameters
.
type
}
)
;
}
if
(
typeof
type
=
=
"
undefined
"
|
|
!
[
"
tab
"
"
window
"
]
.
includes
(
type
)
)
{
type
=
"
tab
"
;
}
let
contentBrowser
;
switch
(
type
)
{
case
"
window
"
:
let
win
=
await
this
.
curBrowser
.
openBrowserWindow
(
focus
isPrivate
)
;
contentBrowser
=
lazy
.
TabManager
.
getTabBrowser
(
win
)
.
selectedBrowser
;
break
;
default
:
let
tab
=
await
this
.
curBrowser
.
openTab
(
focus
)
;
contentBrowser
=
lazy
.
TabManager
.
getBrowserForTab
(
tab
)
;
}
await
lazy
.
waitForInitialNavigationCompleted
(
contentBrowser
.
browsingContext
.
webProgress
)
;
const
id
=
lazy
.
TabManager
.
getIdForBrowser
(
contentBrowser
)
;
return
{
handle
:
id
.
toString
(
)
type
}
;
}
;
GeckoDriver
.
prototype
.
close
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
context
:
lazy
.
Context
.
Content
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
if
(
lazy
.
TabManager
.
getTabCount
(
)
=
=
=
1
&
&
!
this
.
currentSession
.
capabilities
.
get
(
"
moz
:
windowless
"
)
)
{
return
[
]
;
}
await
this
.
curBrowser
.
closeTab
(
)
;
this
.
currentSession
.
contentBrowsingContext
=
null
;
return
lazy
.
TabManager
.
allBrowserUniqueIds
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
closeChromeWindow
=
async
function
(
)
{
lazy
.
assert
.
desktop
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
context
:
lazy
.
Context
.
Chrome
top
:
true
}
)
)
;
let
nwins
=
0
;
for
(
let
_
of
lazy
.
windowManager
.
windows
)
{
nwins
+
+
;
}
if
(
nwins
=
=
1
&
&
!
this
.
currentSession
.
capabilities
.
get
(
"
moz
:
windowless
"
)
)
{
return
[
]
;
}
await
this
.
curBrowser
.
closeWindow
(
)
;
this
.
currentSession
.
chromeBrowsingContext
=
null
;
this
.
currentSession
.
contentBrowsingContext
=
null
;
return
lazy
.
windowManager
.
chromeWindowHandles
.
map
(
String
)
;
}
;
GeckoDriver
.
prototype
.
deleteSession
=
function
(
)
{
if
(
!
this
.
currentSession
)
{
return
;
}
for
(
let
win
of
lazy
.
windowManager
.
windows
)
{
this
.
unregisterListenersForWindow
(
win
)
;
}
this
.
mainFrame
=
null
;
if
(
this
.
dialogObserver
)
{
this
.
dialogObserver
.
cleanup
(
)
;
this
.
dialogObserver
=
null
;
}
try
{
Services
.
obs
.
removeObserver
(
this
TOPIC_BROWSER_READY
)
;
}
catch
(
e
)
{
lazy
.
logger
.
debug
(
Failed
to
remove
observer
"
{
TOPIC_BROWSER_READY
}
"
)
;
}
lazy
.
clearElementIdCache
(
)
;
lazy
.
unregisterCommandsActor
(
)
;
lazy
.
disableEventsActor
(
)
;
if
(
lazy
.
RemoteAgent
.
webDriverBiDi
)
{
lazy
.
RemoteAgent
.
webDriverBiDi
.
deleteSession
(
)
;
}
else
{
this
.
currentSession
.
destroy
(
)
;
this
.
_currentSession
=
null
;
}
}
;
GeckoDriver
.
prototype
.
takeScreenshot
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
let
{
id
full
hash
scroll
}
=
cmd
.
parameters
;
let
format
=
hash
?
lazy
.
capture
.
Format
.
Hash
:
lazy
.
capture
.
Format
.
Base64
;
full
=
typeof
full
=
=
"
undefined
"
?
true
:
full
;
scroll
=
typeof
scroll
=
=
"
undefined
"
?
true
:
scroll
;
let
webEl
=
id
?
lazy
.
WebReference
.
fromUUID
(
id
)
:
null
;
full
=
webEl
?
false
:
full
;
return
this
.
getActor
(
)
.
takeScreenshot
(
webEl
format
full
scroll
)
;
}
;
GeckoDriver
.
prototype
.
getScreenOrientation
=
function
(
)
{
lazy
.
assert
.
mobile
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
const
win
=
this
.
getCurrentWindow
(
)
;
return
win
.
screen
.
mozOrientation
;
}
;
GeckoDriver
.
prototype
.
setScreenOrientation
=
function
(
cmd
)
{
lazy
.
assert
.
mobile
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
const
ors
=
[
"
portrait
"
"
landscape
"
"
portrait
-
primary
"
"
landscape
-
primary
"
"
portrait
-
secondary
"
"
landscape
-
secondary
"
]
;
let
or
=
String
(
cmd
.
parameters
.
orientation
)
;
lazy
.
assert
.
string
(
or
)
;
let
mozOr
=
or
.
toLowerCase
(
)
;
if
(
!
ors
.
includes
(
mozOr
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
Unknown
screen
orientation
:
{
or
}
)
;
}
const
win
=
this
.
getCurrentWindow
(
)
;
if
(
!
win
.
screen
.
mozLockOrientation
(
mozOr
)
)
{
throw
new
lazy
.
error
.
WebDriverError
(
Unable
to
set
screen
orientation
:
{
or
}
)
;
}
}
;
GeckoDriver
.
prototype
.
minimizeWindow
=
async
function
(
)
{
lazy
.
assert
.
desktop
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
win
=
this
.
getCurrentWindow
(
)
;
switch
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
)
{
case
lazy
.
WindowState
.
Fullscreen
:
await
exitFullscreen
(
win
)
;
break
;
case
lazy
.
WindowState
.
Maximized
:
await
restoreWindow
(
win
)
;
break
;
}
if
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
!
=
lazy
.
WindowState
.
Minimized
)
{
let
cb
;
await
new
lazy
.
TimedPromise
(
resolve
=
>
{
cb
=
new
lazy
.
DebounceCallback
(
resolve
)
;
win
.
addEventListener
(
"
sizemodechange
"
cb
)
;
win
.
minimize
(
)
;
}
{
throws
:
null
timeout
:
TIMEOUT_NO_WINDOW_MANAGER
}
)
;
win
.
removeEventListener
(
"
sizemodechange
"
cb
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
maximizeWindow
=
async
function
(
)
{
lazy
.
assert
.
desktop
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
win
=
this
.
getCurrentWindow
(
)
;
switch
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
)
{
case
lazy
.
WindowState
.
Fullscreen
:
await
exitFullscreen
(
win
)
;
break
;
case
lazy
.
WindowState
.
Minimized
:
await
restoreWindow
(
win
)
;
break
;
}
if
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
!
=
lazy
.
WindowState
.
Maximized
)
{
let
cb
;
await
new
lazy
.
TimedPromise
(
resolve
=
>
{
cb
=
new
lazy
.
DebounceCallback
(
resolve
)
;
win
.
addEventListener
(
"
sizemodechange
"
cb
)
;
win
.
maximize
(
)
;
}
{
throws
:
null
timeout
:
TIMEOUT_NO_WINDOW_MANAGER
}
)
;
win
.
removeEventListener
(
"
sizemodechange
"
cb
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
fullscreenWindow
=
async
function
(
)
{
lazy
.
assert
.
desktop
(
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
win
=
this
.
getCurrentWindow
(
)
;
switch
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
)
{
case
lazy
.
WindowState
.
Maximized
:
case
lazy
.
WindowState
.
Minimized
:
await
restoreWindow
(
win
)
;
break
;
}
if
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
!
=
lazy
.
WindowState
.
Fullscreen
)
{
let
cb
;
await
new
lazy
.
TimedPromise
(
resolve
=
>
{
cb
=
new
lazy
.
DebounceCallback
(
resolve
)
;
win
.
addEventListener
(
"
sizemodechange
"
cb
)
;
win
.
fullScreen
=
true
;
}
{
throws
:
null
timeout
:
TIMEOUT_NO_WINDOW_MANAGER
}
)
;
win
.
removeEventListener
(
"
sizemodechange
"
cb
)
;
}
await
new
lazy
.
IdlePromise
(
win
)
;
return
this
.
curBrowser
.
rect
;
}
;
GeckoDriver
.
prototype
.
dismissDialog
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
const
dialogClosed
=
this
.
dialogObserver
.
dialogClosed
(
)
;
this
.
dialog
.
dismiss
(
)
;
await
dialogClosed
;
const
win
=
this
.
getCurrentWindow
(
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
;
GeckoDriver
.
prototype
.
acceptDialog
=
async
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
const
dialogClosed
=
this
.
dialogObserver
.
dialogClosed
(
)
;
this
.
dialog
.
accept
(
)
;
await
dialogClosed
;
const
win
=
this
.
getCurrentWindow
(
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
;
GeckoDriver
.
prototype
.
getTextFromDialog
=
function
(
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
return
this
.
dialog
.
text
;
}
;
GeckoDriver
.
prototype
.
sendKeysToDialog
=
async
function
(
cmd
)
{
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
this
.
_checkIfAlertIsPresent
(
)
;
let
text
=
lazy
.
assert
.
string
(
cmd
.
parameters
.
text
)
;
let
promptType
=
this
.
dialog
.
args
.
promptType
;
switch
(
promptType
)
{
case
"
alert
"
:
case
"
confirm
"
:
throw
new
lazy
.
error
.
ElementNotInteractableError
(
User
prompt
of
type
{
promptType
}
is
not
interactable
)
;
case
"
prompt
"
:
break
;
default
:
await
this
.
dismissDialog
(
)
;
throw
new
lazy
.
error
.
UnsupportedOperationError
(
User
prompt
of
type
{
promptType
}
is
not
supported
)
;
}
this
.
dialog
.
text
=
text
;
}
;
GeckoDriver
.
prototype
.
_checkIfAlertIsPresent
=
function
(
)
{
if
(
!
this
.
dialog
|
|
!
this
.
dialog
.
isOpen
)
{
throw
new
lazy
.
error
.
NoSuchAlertError
(
)
;
}
}
;
GeckoDriver
.
prototype
.
_handleUserPrompts
=
async
function
(
)
{
if
(
!
this
.
dialog
|
|
!
this
.
dialog
.
isOpen
)
{
return
;
}
let
textContent
=
this
.
dialog
.
text
;
const
behavior
=
this
.
currentSession
.
unhandledPromptBehavior
;
switch
(
behavior
)
{
case
lazy
.
UnhandledPromptBehavior
.
Accept
:
await
this
.
acceptDialog
(
)
;
break
;
case
lazy
.
UnhandledPromptBehavior
.
AcceptAndNotify
:
await
this
.
acceptDialog
(
)
;
throw
new
lazy
.
error
.
UnexpectedAlertOpenError
(
Accepted
user
prompt
dialog
:
{
textContent
}
)
;
case
lazy
.
UnhandledPromptBehavior
.
Dismiss
:
await
this
.
dismissDialog
(
)
;
break
;
case
lazy
.
UnhandledPromptBehavior
.
DismissAndNotify
:
await
this
.
dismissDialog
(
)
;
throw
new
lazy
.
error
.
UnexpectedAlertOpenError
(
Dismissed
user
prompt
dialog
:
{
textContent
}
)
;
case
lazy
.
UnhandledPromptBehavior
.
Ignore
:
throw
new
lazy
.
error
.
UnexpectedAlertOpenError
(
"
Encountered
unhandled
user
prompt
dialog
"
)
;
default
:
throw
new
TypeError
(
Unknown
unhandledPromptBehavior
"
{
behavior
}
"
)
;
}
}
;
GeckoDriver
.
prototype
.
acceptConnections
=
function
(
cmd
)
{
lazy
.
assert
.
boolean
(
cmd
.
parameters
.
value
)
;
this
.
_server
.
acceptConnections
=
cmd
.
parameters
.
value
;
}
;
GeckoDriver
.
prototype
.
quit
=
async
function
(
cmd
)
{
const
{
flags
=
[
]
safeMode
=
false
}
=
cmd
.
parameters
;
const
quits
=
[
"
eConsiderQuit
"
"
eAttemptQuit
"
"
eForceQuit
"
]
;
lazy
.
assert
.
array
(
flags
Expected
"
flags
"
to
be
an
array
)
;
lazy
.
assert
.
boolean
(
safeMode
Expected
"
safeMode
"
to
be
a
boolean
)
;
if
(
safeMode
&
&
!
flags
.
includes
(
"
eRestart
"
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
safeMode
"
only
works
with
restart
flag
)
;
}
if
(
flags
.
includes
(
"
eSilently
"
)
)
{
if
(
!
this
.
currentSession
.
capabilities
.
get
(
"
moz
:
windowless
"
)
)
{
throw
new
lazy
.
error
.
UnsupportedOperationError
(
Silent
restarts
only
allowed
with
"
moz
:
windowless
"
capability
set
)
;
}
if
(
!
flags
.
includes
(
"
eRestart
"
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
silently
"
only
works
with
restart
flag
)
;
}
}
let
quitSeen
;
let
mode
=
0
;
if
(
flags
.
length
)
{
for
(
let
k
of
flags
)
{
lazy
.
assert
.
in
(
k
Ci
.
nsIAppStartup
)
;
if
(
quits
.
includes
(
k
)
)
{
if
(
quitSeen
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
{
k
}
cannot
be
combined
with
{
quitSeen
}
)
;
}
quitSeen
=
k
;
}
mode
|
=
Ci
.
nsIAppStartup
[
k
]
;
}
}
if
(
!
quitSeen
)
{
mode
|
=
Ci
.
nsIAppStartup
.
eAttemptQuit
;
}
this
.
_server
.
acceptConnections
=
false
;
this
.
deleteSession
(
)
;
const
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
)
;
if
(
cancelQuit
.
data
)
{
mode
|
=
Ci
.
nsIAppStartup
.
eForceQuit
;
}
let
quitApplication
=
lazy
.
waitForObserverTopic
(
"
quit
-
application
"
)
;
if
(
safeMode
)
{
Services
.
startup
.
restartInSafeMode
(
mode
)
;
}
else
{
Services
.
startup
.
quit
(
mode
)
;
}
return
{
cause
:
(
await
quitApplication
)
.
data
forced
:
cancelQuit
.
data
}
;
}
;
GeckoDriver
.
prototype
.
installAddon
=
function
(
cmd
)
{
lazy
.
assert
.
desktop
(
)
;
let
path
=
cmd
.
parameters
.
path
;
let
temp
=
cmd
.
parameters
.
temporary
|
|
false
;
if
(
typeof
path
=
=
"
undefined
"
|
|
typeof
path
!
=
"
string
"
|
|
typeof
temp
!
=
"
boolean
"
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
)
;
}
return
lazy
.
Addon
.
install
(
path
temp
)
;
}
;
GeckoDriver
.
prototype
.
uninstallAddon
=
function
(
cmd
)
{
lazy
.
assert
.
desktop
(
)
;
let
id
=
cmd
.
parameters
.
id
;
if
(
typeof
id
=
=
"
undefined
"
|
|
typeof
id
!
=
"
string
"
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
)
;
}
return
lazy
.
Addon
.
uninstall
(
id
)
;
}
;
GeckoDriver
.
prototype
.
localizeEntity
=
function
(
cmd
)
{
let
{
urls
id
}
=
cmd
.
parameters
;
if
(
!
Array
.
isArray
(
urls
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
Value
of
urls
should
be
of
type
'
Array
'
"
)
;
}
if
(
typeof
id
!
=
"
string
"
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
Value
of
id
should
be
of
type
'
string
'
"
)
;
}
return
lazy
.
l10n
.
localizeEntity
(
urls
id
)
;
}
;
GeckoDriver
.
prototype
.
localizeProperty
=
function
(
cmd
)
{
let
{
urls
id
}
=
cmd
.
parameters
;
if
(
!
Array
.
isArray
(
urls
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
Value
of
urls
should
be
of
type
'
Array
'
"
)
;
}
if
(
typeof
id
!
=
"
string
"
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
Value
of
id
should
be
of
type
'
string
'
"
)
;
}
return
lazy
.
l10n
.
localizeProperty
(
urls
id
)
;
}
;
GeckoDriver
.
prototype
.
setupReftest
=
async
function
(
cmd
)
{
if
(
this
.
_reftest
)
{
throw
new
lazy
.
error
.
UnsupportedOperationError
(
"
Called
reftest
:
setup
with
a
reftest
session
already
active
"
)
;
}
let
{
urlCount
=
{
}
screenshot
=
"
unexpected
"
isPrint
=
false
}
=
cmd
.
parameters
;
if
(
!
[
"
always
"
"
fail
"
"
unexpected
"
]
.
includes
(
screenshot
)
)
{
throw
new
lazy
.
error
.
InvalidArgumentError
(
"
Value
of
screenshot
should
be
'
always
'
'
fail
'
or
'
unexpected
'
"
)
;
}
this
.
_reftest
=
new
lazy
.
reftest
.
Runner
(
this
)
;
this
.
_reftest
.
setup
(
urlCount
screenshot
isPrint
)
;
}
;
GeckoDriver
.
prototype
.
runReftest
=
async
function
(
cmd
)
{
let
{
test
references
expected
timeout
width
height
pageRanges
}
=
cmd
.
parameters
;
if
(
!
this
.
_reftest
)
{
throw
new
lazy
.
error
.
UnsupportedOperationError
(
"
Called
reftest
:
run
before
reftest
:
start
"
)
;
}
lazy
.
assert
.
string
(
test
)
;
lazy
.
assert
.
string
(
expected
)
;
lazy
.
assert
.
array
(
references
)
;
return
{
value
:
await
this
.
_reftest
.
run
(
test
references
expected
timeout
pageRanges
width
height
)
}
;
}
;
GeckoDriver
.
prototype
.
teardownReftest
=
function
(
)
{
if
(
!
this
.
_reftest
)
{
throw
new
lazy
.
error
.
UnsupportedOperationError
(
"
Called
reftest
:
teardown
before
reftest
:
start
"
)
;
}
this
.
_reftest
.
teardown
(
)
;
this
.
_reftest
=
null
;
}
;
GeckoDriver
.
prototype
.
print
=
async
function
(
cmd
)
{
lazy
.
assert
.
content
(
this
.
context
)
;
lazy
.
assert
.
open
(
this
.
getBrowsingContext
(
{
top
:
true
}
)
)
;
await
this
.
_handleUserPrompts
(
)
;
const
settings
=
lazy
.
print
.
addDefaultSettings
(
cmd
.
parameters
)
;
for
(
let
prop
of
[
"
top
"
"
bottom
"
"
left
"
"
right
"
]
)
{
lazy
.
assert
.
positiveNumber
(
settings
.
margin
[
prop
]
lazy
.
pprint
margin
.
{
prop
}
is
not
a
positive
number
)
;
}
for
(
let
prop
of
[
"
width
"
"
height
"
]
)
{
lazy
.
assert
.
positiveNumber
(
settings
.
page
[
prop
]
lazy
.
pprint
page
.
{
prop
}
is
not
a
positive
number
)
;
}
lazy
.
assert
.
positiveNumber
(
settings
.
scale
scale
{
settings
.
scale
}
is
not
a
positive
number
)
;
lazy
.
assert
.
that
(
s
=
>
s
>
=
lazy
.
print
.
minScaleValue
&
&
settings
.
scale
<
=
lazy
.
print
.
maxScaleValue
scale
{
settings
.
scale
}
is
outside
the
range
{
lazy
.
print
.
minScaleValue
}
-
{
lazy
.
print
.
maxScaleValue
}
)
(
settings
.
scale
)
;
lazy
.
assert
.
boolean
(
settings
.
shrinkToFit
)
;
lazy
.
assert
.
boolean
(
settings
.
landscape
)
;
lazy
.
assert
.
boolean
(
settings
.
printBackground
)
;
lazy
.
assert
.
array
(
settings
.
pageRanges
)
;
const
linkedBrowser
=
this
.
curBrowser
.
tab
.
linkedBrowser
;
const
filePath
=
await
lazy
.
print
.
printToFile
(
linkedBrowser
settings
)
;
let
bytes
;
try
{
bytes
=
await
IOUtils
.
read
(
filePath
)
;
}
finally
{
await
IOUtils
.
remove
(
filePath
)
;
}
const
chunks
=
[
]
;
const
argLengthLimit
=
262144
;
for
(
let
offset
=
0
;
offset
<
bytes
.
length
;
offset
+
=
argLengthLimit
)
{
const
chunkData
=
bytes
.
subarray
(
offset
offset
+
argLengthLimit
)
;
chunks
.
push
(
String
.
fromCharCode
.
apply
(
null
chunkData
)
)
;
}
return
{
value
:
btoa
(
chunks
.
join
(
"
"
)
)
}
;
}
;
GeckoDriver
.
prototype
.
setPermission
=
async
function
(
cmd
)
{
const
{
descriptor
state
oneRealm
=
false
}
=
cmd
.
parameters
;
lazy
.
assert
.
boolean
(
oneRealm
)
;
lazy
.
assert
.
that
(
state
=
>
[
"
granted
"
"
denied
"
"
prompt
"
]
.
includes
(
state
)
state
is
{
state
}
expected
"
granted
"
"
denied
"
or
"
prompt
"
)
(
state
)
;
lazy
.
permissions
.
set
(
descriptor
state
oneRealm
)
;
}
;
GeckoDriver
.
prototype
.
commands
=
{
"
Marionette
:
AcceptConnections
"
:
GeckoDriver
.
prototype
.
acceptConnections
"
Marionette
:
GetContext
"
:
GeckoDriver
.
prototype
.
getContext
"
Marionette
:
GetScreenOrientation
"
:
GeckoDriver
.
prototype
.
getScreenOrientation
"
Marionette
:
GetWindowType
"
:
GeckoDriver
.
prototype
.
getWindowType
"
Marionette
:
Quit
"
:
GeckoDriver
.
prototype
.
quit
"
Marionette
:
SetContext
"
:
GeckoDriver
.
prototype
.
setContext
"
Marionette
:
SetScreenOrientation
"
:
GeckoDriver
.
prototype
.
setScreenOrientation
"
Marionette
:
SingleTap
"
:
GeckoDriver
.
prototype
.
singleTap
"
Addon
:
Install
"
:
GeckoDriver
.
prototype
.
installAddon
"
Addon
:
Uninstall
"
:
GeckoDriver
.
prototype
.
uninstallAddon
"
L10n
:
LocalizeEntity
"
:
GeckoDriver
.
prototype
.
localizeEntity
"
L10n
:
LocalizeProperty
"
:
GeckoDriver
.
prototype
.
localizeProperty
"
reftest
:
setup
"
:
GeckoDriver
.
prototype
.
setupReftest
"
reftest
:
run
"
:
GeckoDriver
.
prototype
.
runReftest
"
reftest
:
teardown
"
:
GeckoDriver
.
prototype
.
teardownReftest
"
WebDriver
:
AcceptAlert
"
:
GeckoDriver
.
prototype
.
acceptDialog
"
WebDriver
:
AcceptDialog
"
:
GeckoDriver
.
prototype
.
acceptDialog
"
WebDriver
:
AddCookie
"
:
GeckoDriver
.
prototype
.
addCookie
"
WebDriver
:
Back
"
:
GeckoDriver
.
prototype
.
goBack
"
WebDriver
:
CloseChromeWindow
"
:
GeckoDriver
.
prototype
.
closeChromeWindow
"
WebDriver
:
CloseWindow
"
:
GeckoDriver
.
prototype
.
close
"
WebDriver
:
DeleteAllCookies
"
:
GeckoDriver
.
prototype
.
deleteAllCookies
"
WebDriver
:
DeleteCookie
"
:
GeckoDriver
.
prototype
.
deleteCookie
"
WebDriver
:
DeleteSession
"
:
GeckoDriver
.
prototype
.
deleteSession
"
WebDriver
:
DismissAlert
"
:
GeckoDriver
.
prototype
.
dismissDialog
"
WebDriver
:
ElementClear
"
:
GeckoDriver
.
prototype
.
clearElement
"
WebDriver
:
ElementClick
"
:
GeckoDriver
.
prototype
.
clickElement
"
WebDriver
:
ElementSendKeys
"
:
GeckoDriver
.
prototype
.
sendKeysToElement
"
WebDriver
:
ExecuteAsyncScript
"
:
GeckoDriver
.
prototype
.
executeAsyncScript
"
WebDriver
:
ExecuteScript
"
:
GeckoDriver
.
prototype
.
executeScript
"
WebDriver
:
FindElement
"
:
GeckoDriver
.
prototype
.
findElement
"
WebDriver
:
FindElements
"
:
GeckoDriver
.
prototype
.
findElements
"
WebDriver
:
Forward
"
:
GeckoDriver
.
prototype
.
goForward
"
WebDriver
:
FullscreenWindow
"
:
GeckoDriver
.
prototype
.
fullscreenWindow
"
WebDriver
:
GetActiveElement
"
:
GeckoDriver
.
prototype
.
getActiveElement
"
WebDriver
:
GetAlertText
"
:
GeckoDriver
.
prototype
.
getTextFromDialog
"
WebDriver
:
GetCapabilities
"
:
GeckoDriver
.
prototype
.
getSessionCapabilities
"
WebDriver
:
GetCookies
"
:
GeckoDriver
.
prototype
.
getCookies
"
WebDriver
:
GetCurrentURL
"
:
GeckoDriver
.
prototype
.
getCurrentUrl
"
WebDriver
:
GetElementAttribute
"
:
GeckoDriver
.
prototype
.
getElementAttribute
"
WebDriver
:
GetElementCSSValue
"
:
GeckoDriver
.
prototype
.
getElementValueOfCssProperty
"
WebDriver
:
GetElementProperty
"
:
GeckoDriver
.
prototype
.
getElementProperty
"
WebDriver
:
GetElementRect
"
:
GeckoDriver
.
prototype
.
getElementRect
"
WebDriver
:
GetElementTagName
"
:
GeckoDriver
.
prototype
.
getElementTagName
"
WebDriver
:
GetElementText
"
:
GeckoDriver
.
prototype
.
getElementText
"
WebDriver
:
GetPageSource
"
:
GeckoDriver
.
prototype
.
getPageSource
"
WebDriver
:
GetShadowRoot
"
:
GeckoDriver
.
prototype
.
getShadowRoot
"
WebDriver
:
GetTimeouts
"
:
GeckoDriver
.
prototype
.
getTimeouts
"
WebDriver
:
GetTitle
"
:
GeckoDriver
.
prototype
.
getTitle
"
WebDriver
:
GetWindowHandle
"
:
GeckoDriver
.
prototype
.
getWindowHandle
"
WebDriver
:
GetWindowHandles
"
:
GeckoDriver
.
prototype
.
getWindowHandles
"
WebDriver
:
GetWindowRect
"
:
GeckoDriver
.
prototype
.
getWindowRect
"
WebDriver
:
IsElementDisplayed
"
:
GeckoDriver
.
prototype
.
isElementDisplayed
"
WebDriver
:
IsElementEnabled
"
:
GeckoDriver
.
prototype
.
isElementEnabled
"
WebDriver
:
IsElementSelected
"
:
GeckoDriver
.
prototype
.
isElementSelected
"
WebDriver
:
MinimizeWindow
"
:
GeckoDriver
.
prototype
.
minimizeWindow
"
WebDriver
:
MaximizeWindow
"
:
GeckoDriver
.
prototype
.
maximizeWindow
"
WebDriver
:
Navigate
"
:
GeckoDriver
.
prototype
.
navigateTo
"
WebDriver
:
NewSession
"
:
GeckoDriver
.
prototype
.
newSession
"
WebDriver
:
NewWindow
"
:
GeckoDriver
.
prototype
.
newWindow
"
WebDriver
:
PerformActions
"
:
GeckoDriver
.
prototype
.
performActions
"
WebDriver
:
Print
"
:
GeckoDriver
.
prototype
.
print
"
WebDriver
:
Refresh
"
:
GeckoDriver
.
prototype
.
refresh
"
WebDriver
:
ReleaseActions
"
:
GeckoDriver
.
prototype
.
releaseActions
"
WebDriver
:
SendAlertText
"
:
GeckoDriver
.
prototype
.
sendKeysToDialog
"
WebDriver
:
SetPermission
"
:
GeckoDriver
.
prototype
.
setPermission
"
WebDriver
:
SetTimeouts
"
:
GeckoDriver
.
prototype
.
setTimeouts
"
WebDriver
:
SetWindowRect
"
:
GeckoDriver
.
prototype
.
setWindowRect
"
WebDriver
:
SwitchToFrame
"
:
GeckoDriver
.
prototype
.
switchToFrame
"
WebDriver
:
SwitchToParentFrame
"
:
GeckoDriver
.
prototype
.
switchToParentFrame
"
WebDriver
:
SwitchToWindow
"
:
GeckoDriver
.
prototype
.
switchToWindow
"
WebDriver
:
TakeScreenshot
"
:
GeckoDriver
.
prototype
.
takeScreenshot
}
;
async
function
exitFullscreen
(
win
)
{
let
cb
;
await
new
lazy
.
TimedPromise
(
resolve
=
>
{
cb
=
new
lazy
.
DebounceCallback
(
resolve
)
;
win
.
addEventListener
(
"
sizemodechange
"
cb
)
;
win
.
fullScreen
=
false
;
}
{
throws
:
null
timeout
:
TIMEOUT_NO_WINDOW_MANAGER
}
)
;
win
.
removeEventListener
(
"
sizemodechange
"
cb
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
async
function
restoreWindow
(
win
)
{
let
cb
;
if
(
lazy
.
WindowState
.
from
(
win
.
windowState
)
=
=
lazy
.
WindowState
.
Normal
)
{
return
;
}
await
new
lazy
.
TimedPromise
(
resolve
=
>
{
cb
=
new
lazy
.
DebounceCallback
(
resolve
)
;
win
.
addEventListener
(
"
sizemodechange
"
cb
)
;
win
.
restore
(
)
;
}
{
throws
:
null
timeout
:
TIMEOUT_NO_WINDOW_MANAGER
}
)
;
win
.
removeEventListener
(
"
sizemodechange
"
cb
)
;
await
new
lazy
.
IdlePromise
(
win
)
;
}
