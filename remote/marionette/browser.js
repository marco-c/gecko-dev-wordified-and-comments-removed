"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
browser
"
"
Context
"
"
WindowState
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppInfo
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
appinfo
.
js
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
EventPromise
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Sync
.
jsm
"
MessageManagerDestroyedPromise
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
sync
.
js
"
TabManager
:
"
chrome
:
/
/
remote
/
content
/
shared
/
TabManager
.
jsm
"
WebElementEventTarget
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
dom
.
js
"
windowManager
:
"
chrome
:
/
/
remote
/
content
/
shared
/
WindowManager
.
jsm
"
}
)
;
const
browser
=
{
}
;
class
Context
{
static
fromString
(
s
)
{
switch
(
s
)
{
case
"
chrome
"
:
return
Context
.
Chrome
;
case
"
content
"
:
return
Context
.
Content
;
default
:
throw
new
TypeError
(
Unknown
context
:
{
s
}
)
;
}
}
}
Context
.
Chrome
=
"
chrome
"
;
Context
.
Content
=
"
content
"
;
browser
.
Context
=
class
{
constructor
(
window
driver
)
{
this
.
window
=
window
;
this
.
driver
=
driver
;
this
.
tabBrowser
=
TabManager
.
getTabBrowser
(
this
.
window
)
;
this
.
newSession
=
true
;
this
.
tab
=
null
;
}
get
contentBrowser
(
)
{
if
(
this
.
tab
)
{
return
TabManager
.
getBrowserForTab
(
this
.
tab
)
;
}
else
if
(
this
.
tabBrowser
&
&
this
.
driver
.
isReftestBrowser
(
this
.
tabBrowser
)
)
{
return
this
.
tabBrowser
;
}
return
null
;
}
get
messageManager
(
)
{
if
(
this
.
contentBrowser
)
{
return
this
.
contentBrowser
.
messageManager
;
}
return
null
;
}
get
closed
(
)
{
return
this
.
contentBrowser
=
=
=
null
;
}
get
rect
(
)
{
return
{
x
:
this
.
window
.
screenX
y
:
this
.
window
.
screenY
width
:
this
.
window
.
outerWidth
height
:
this
.
window
.
outerHeight
}
;
}
getTabModal
(
)
{
let
br
=
this
.
contentBrowser
;
if
(
!
br
.
hasAttribute
(
"
tabmodalPromptShowing
"
)
)
{
return
null
;
}
let
modalElements
=
br
.
parentNode
.
getElementsByTagName
(
"
tabmodalprompt
"
)
;
return
br
.
tabModalPromptBox
.
getPrompt
(
modalElements
[
0
]
)
;
}
async
closeWindow
(
)
{
return
windowManager
.
closeWindow
(
this
.
window
)
;
}
async
focusWindow
(
)
{
return
windowManager
.
focusWindow
(
this
.
window
)
;
}
openBrowserWindow
(
focus
=
false
isPrivate
=
false
)
{
return
windowManager
.
openBrowserWindow
(
{
openerWindow
:
this
.
window
focus
isPrivate
}
)
;
}
closeTab
(
)
{
if
(
!
this
.
tabBrowser
|
|
!
this
.
tabBrowser
.
tabs
|
|
this
.
tabBrowser
.
tabs
.
length
=
=
=
1
|
|
!
this
.
tab
)
{
return
this
.
closeWindow
(
)
;
}
let
destroyed
=
new
MessageManagerDestroyedPromise
(
this
.
messageManager
)
;
let
tabClosed
;
switch
(
AppInfo
.
name
)
{
case
"
Firefox
"
:
tabClosed
=
new
EventPromise
(
this
.
tab
"
TabClose
"
)
;
this
.
tabBrowser
.
removeTab
(
this
.
tab
)
;
break
;
default
:
throw
new
error
.
UnsupportedOperationError
(
closeTab
(
)
not
supported
in
{
AppInfo
.
name
}
)
;
}
return
Promise
.
all
(
[
destroyed
tabClosed
]
)
;
}
async
openTab
(
focus
=
false
)
{
let
tab
=
null
;
switch
(
AppInfo
.
name
)
{
case
"
Firefox
"
:
const
opened
=
new
EventPromise
(
this
.
window
"
TabOpen
"
)
;
this
.
window
.
BrowserOpenTab
(
)
;
await
opened
;
tab
=
this
.
tabBrowser
.
selectedTab
;
if
(
!
focus
)
{
this
.
tabBrowser
.
selectedTab
=
this
.
tab
;
}
break
;
default
:
throw
new
error
.
UnsupportedOperationError
(
openTab
(
)
not
supported
in
{
AppInfo
.
name
}
)
;
}
return
tab
;
}
async
switchToTab
(
index
window
=
undefined
focus
=
true
)
{
if
(
window
)
{
this
.
window
=
window
;
this
.
tabBrowser
=
TabManager
.
getTabBrowser
(
this
.
window
)
;
}
if
(
!
this
.
tabBrowser
)
{
return
null
;
}
if
(
typeof
index
=
=
"
undefined
"
)
{
this
.
tab
=
this
.
tabBrowser
.
selectedTab
;
}
else
{
this
.
tab
=
this
.
tabBrowser
.
tabs
[
index
]
;
}
if
(
focus
)
{
await
TabManager
.
selectTab
(
this
.
tab
)
;
}
this
.
eventObserver
=
new
WebElementEventTarget
(
this
.
messageManager
)
;
return
this
.
tab
;
}
register
(
target
)
{
if
(
!
this
.
tabBrowser
)
{
return
;
}
if
(
!
this
.
tab
)
{
this
.
switchToTab
(
)
;
}
}
}
;
const
WindowState
=
{
Maximized
:
"
maximized
"
Minimized
:
"
minimized
"
Normal
:
"
normal
"
Fullscreen
:
"
fullscreen
"
from
(
windowState
)
{
switch
(
windowState
)
{
case
1
:
return
WindowState
.
Maximized
;
case
2
:
return
WindowState
.
Minimized
;
case
3
:
return
WindowState
.
Normal
;
case
4
:
return
WindowState
.
Fullscreen
;
default
:
throw
new
TypeError
(
Unknown
window
state
:
{
windowState
}
)
;
}
}
}
;
