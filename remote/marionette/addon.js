"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
Addon
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
error
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
Errors
.
jsm
"
}
)
;
const
ERRORS
=
{
[
-
1
]
:
"
ERROR_NETWORK_FAILURE
:
A
network
error
occured
.
"
[
-
2
]
:
"
ERROR_INCORECT_HASH
:
The
downloaded
file
did
not
match
the
expected
hash
.
"
[
-
3
]
:
"
ERROR_CORRUPT_FILE
:
The
file
appears
to
be
corrupt
.
"
[
-
4
]
:
"
ERROR_FILE_ACCESS
:
There
was
an
error
accessing
the
filesystem
.
"
[
-
5
]
:
"
ERROR_SIGNEDSTATE_REQUIRED
:
The
addon
must
be
signed
and
isn
'
t
.
"
}
;
async
function
installAddon
(
file
)
{
let
install
=
await
AddonManager
.
getInstallForFile
(
file
null
{
source
:
"
internal
"
}
)
;
if
(
install
.
error
)
{
throw
new
error
.
UnknownError
(
ERRORS
[
install
.
error
]
)
;
}
return
install
.
install
(
)
.
catch
(
err
=
>
{
throw
new
error
.
UnknownError
(
ERRORS
[
install
.
error
]
)
;
}
)
;
}
class
Addon
{
static
async
install
(
path
temporary
=
false
)
{
let
addon
;
let
file
;
try
{
file
=
new
FileUtils
.
File
(
path
)
;
}
catch
(
e
)
{
throw
new
error
.
UnknownError
(
Expected
absolute
path
:
{
e
}
e
)
;
}
if
(
!
file
.
exists
(
)
)
{
throw
new
error
.
UnknownError
(
No
such
file
or
directory
:
{
path
}
)
;
}
try
{
if
(
temporary
)
{
addon
=
await
AddonManager
.
installTemporaryAddon
(
file
)
;
}
else
{
addon
=
await
installAddon
(
file
)
;
}
}
catch
(
e
)
{
throw
new
error
.
UnknownError
(
Could
not
install
add
-
on
:
{
path
}
:
{
e
.
message
}
e
)
;
}
return
addon
.
id
;
}
static
async
uninstall
(
id
)
{
let
candidate
=
await
AddonManager
.
getAddonByID
(
id
)
;
if
(
candidate
=
=
=
null
)
{
throw
new
error
.
UnknownError
(
Addon
{
id
}
is
not
installed
)
;
}
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onOperationCancelled
:
addon
=
>
{
if
(
addon
.
id
=
=
=
candidate
.
id
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
throw
new
error
.
UnknownError
(
Uninstall
of
{
candidate
.
id
}
has
been
canceled
)
;
}
}
onUninstalled
:
addon
=
>
{
if
(
addon
.
id
=
=
=
candidate
.
id
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
)
;
}
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
candidate
.
uninstall
(
)
;
}
)
;
}
}
