(
"
use
strict
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
EventDispatcher
"
"
MarionetteEventsParent
"
"
registerEventsActor
"
"
unregisterEventsActor
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventEmitter
:
"
resource
:
/
/
gre
/
modules
/
EventEmitter
.
jsm
"
Log
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
log
.
js
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
get
(
)
)
;
const
EventDispatcher
=
{
init
(
)
{
EventEmitter
.
decorate
(
this
)
;
}
}
;
EventDispatcher
.
init
(
)
;
class
MarionetteEventsParent
extends
JSWindowActorParent
{
async
receiveMessage
(
msg
)
{
const
{
name
data
}
=
msg
;
let
rv
;
switch
(
name
)
{
case
"
MarionetteEventsChild
:
PageLoadEvent
"
:
EventDispatcher
.
emit
(
"
page
-
load
"
data
)
;
break
;
}
return
rv
;
}
}
function
registerEventsActor
(
)
{
try
{
ChromeUtils
.
registerWindowActor
(
"
MarionetteEvents
"
{
kind
:
"
JSWindowActor
"
parent
:
{
moduleURI
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsParent
.
jsm
"
}
child
:
{
moduleURI
:
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsChild
.
jsm
"
events
:
{
beforeunload
:
{
capture
:
true
}
DOMContentLoaded
:
{
mozSystemGroup
:
true
}
hashchange
:
{
mozSystemGroup
:
true
}
pagehide
:
{
mozSystemGroup
:
true
}
pageshow
:
{
mozSystemGroup
:
true
}
popstate
:
{
capture
:
true
mozSystemGroup
:
true
}
click
:
{
}
dblclick
:
{
}
unload
:
{
capture
:
true
createActor
:
false
}
}
}
allFrames
:
true
includeChrome
:
true
}
)
;
}
catch
(
e
)
{
if
(
e
.
name
=
=
=
"
NotSupportedError
"
)
{
logger
.
warn
(
MarionetteEvents
actor
is
already
registered
!
)
;
}
else
{
throw
e
;
}
}
}
function
unregisterEventsActor
(
)
{
ChromeUtils
.
unregisterWindowActor
(
"
MarionetteEvents
"
)
;
}
