"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
MarionetteReftestChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
Log
:
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
logger
"
(
)
=
>
lazy
.
Log
.
get
(
lazy
.
Log
.
TYPES
.
MARIONETTE
)
)
;
class
MarionetteReftestChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_loadedURLPromise
=
new
Promise
(
r
=
>
(
this
.
_resolveLoadedURLPromise
=
r
)
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
load
"
)
{
const
url
=
event
.
target
.
location
.
href
;
lazy
.
logger
.
debug
(
Handle
load
event
with
URL
{
url
}
)
;
this
.
_resolveLoadedURLPromise
(
url
)
;
}
}
actorCreated
(
)
{
lazy
.
logger
.
trace
(
[
{
this
.
browsingContext
.
id
}
]
Reftest
actor
created
+
for
window
id
{
this
.
manager
.
innerWindowId
}
)
;
}
async
receiveMessage
(
msg
)
{
const
{
name
data
}
=
msg
;
let
result
;
switch
(
name
)
{
case
"
MarionetteReftestParent
:
flushRendering
"
:
result
=
await
this
.
flushRendering
(
data
)
;
break
;
case
"
MarionetteReftestParent
:
reftestWait
"
:
result
=
await
this
.
reftestWait
(
data
)
;
break
;
}
return
result
;
}
async
reftestWait
(
options
=
{
}
)
{
const
{
url
useRemote
}
=
options
;
const
loadedURL
=
await
this
.
_loadedURLPromise
;
if
(
loadedURL
!
=
=
url
)
{
lazy
.
logger
.
debug
(
Window
URL
does
not
match
the
expected
URL
"
{
loadedURL
}
"
!
=
=
"
{
url
}
"
)
;
return
false
;
}
const
documentElement
=
this
.
document
.
documentElement
;
const
hasReftestWait
=
documentElement
.
classList
.
contains
(
"
reftest
-
wait
"
)
;
lazy
.
logger
.
debug
(
"
Waiting
for
event
loop
to
spin
"
)
;
await
new
Promise
(
resolve
=
>
this
.
document
.
defaultView
.
setTimeout
(
resolve
0
)
)
;
await
this
.
paintComplete
(
{
useRemote
ignoreThrottledAnimations
:
true
}
)
;
if
(
hasReftestWait
)
{
const
event
=
new
this
.
document
.
defaultView
.
Event
(
"
TestRendered
"
{
bubbles
:
true
}
)
;
documentElement
.
dispatchEvent
(
event
)
;
lazy
.
logger
.
info
(
"
Emitted
TestRendered
event
"
)
;
await
this
.
reftestWaitRemoved
(
)
;
await
this
.
paintComplete
(
{
useRemote
ignoreThrottledAnimations
:
false
}
)
;
}
if
(
this
.
document
.
defaultView
.
innerWidth
<
documentElement
.
scrollWidth
|
|
this
.
document
.
defaultView
.
innerHeight
<
documentElement
.
scrollHeight
)
{
lazy
.
logger
.
warn
(
{
url
}
overflows
viewport
(
width
:
{
documentElement
.
scrollWidth
}
height
:
{
documentElement
.
scrollHeight
}
)
)
;
}
return
true
;
}
paintComplete
(
{
useRemote
ignoreThrottledAnimations
}
)
{
lazy
.
logger
.
debug
(
"
Waiting
for
rendering
"
)
;
let
windowUtils
=
this
.
document
.
defaultView
.
windowUtils
;
return
new
Promise
(
resolve
=
>
{
let
maybeResolve
=
(
)
=
>
{
this
.
flushRendering
(
{
ignoreThrottledAnimations
}
)
;
if
(
useRemote
)
{
lazy
.
logger
.
debug
(
"
Force
update
of
layer
tree
"
)
;
windowUtils
.
updateLayerTree
(
)
;
}
if
(
windowUtils
.
isMozAfterPaintPending
)
{
lazy
.
logger
.
debug
(
"
isMozAfterPaintPending
:
true
"
)
;
this
.
document
.
defaultView
.
addEventListener
(
"
MozAfterPaint
"
maybeResolve
{
once
:
true
}
)
;
}
else
{
lazy
.
logger
.
debug
(
"
isMozAfterPaintPending
:
false
"
)
;
this
.
document
.
defaultView
.
requestAnimationFrame
(
(
)
=
>
{
this
.
document
.
defaultView
.
requestAnimationFrame
(
resolve
)
;
}
)
;
}
}
;
maybeResolve
(
)
;
}
)
;
}
reftestWaitRemoved
(
)
{
lazy
.
logger
.
debug
(
"
Waiting
for
reftest
-
wait
removal
"
)
;
return
new
Promise
(
resolve
=
>
{
const
documentElement
=
this
.
document
.
documentElement
;
let
observer
=
new
this
.
document
.
defaultView
.
MutationObserver
(
(
)
=
>
{
if
(
!
documentElement
.
classList
.
contains
(
"
reftest
-
wait
"
)
)
{
observer
.
disconnect
(
)
;
lazy
.
logger
.
debug
(
"
reftest
-
wait
removed
"
)
;
this
.
document
.
defaultView
.
setTimeout
(
resolve
0
)
;
}
}
)
;
if
(
documentElement
.
classList
.
contains
(
"
reftest
-
wait
"
)
)
{
observer
.
observe
(
documentElement
{
attributes
:
true
}
)
;
}
else
{
this
.
document
.
defaultView
.
setTimeout
(
resolve
0
)
;
}
}
)
;
}
flushRendering
(
options
=
{
}
)
{
let
{
ignoreThrottledAnimations
}
=
options
;
lazy
.
logger
.
debug
(
flushRendering
ignoreThrottledAnimations
:
{
ignoreThrottledAnimations
}
)
;
let
anyPendingPaintsGeneratedInDescendants
=
false
;
let
windowUtils
=
this
.
document
.
defaultView
.
windowUtils
;
function
flushWindow
(
win
)
{
let
utils
=
win
.
windowUtils
;
let
afterPaintWasPending
=
utils
.
isMozAfterPaintPending
;
let
root
=
win
.
document
.
documentElement
;
if
(
root
)
{
try
{
if
(
ignoreThrottledAnimations
)
{
utils
.
flushLayoutWithoutThrottledAnimations
(
)
;
}
else
{
root
.
getBoundingClientRect
(
)
;
}
}
catch
(
e
)
{
lazy
.
logger
.
error
(
"
flushWindow
failed
"
e
)
;
}
}
if
(
!
afterPaintWasPending
&
&
utils
.
isMozAfterPaintPending
)
{
anyPendingPaintsGeneratedInDescendants
=
true
;
}
for
(
let
i
=
0
;
i
<
win
.
frames
.
length
;
+
+
i
)
{
if
(
!
Cu
.
isRemoteProxy
(
win
.
frames
[
i
]
)
)
{
flushWindow
(
win
.
frames
[
i
]
)
;
}
}
}
flushWindow
(
this
.
document
.
defaultView
)
;
if
(
anyPendingPaintsGeneratedInDescendants
&
&
!
windowUtils
.
isMozAfterPaintPending
)
{
lazy
.
logger
.
error
(
"
Descendant
frame
generated
a
MozAfterPaint
event
"
+
"
but
the
root
document
doesn
'
t
have
one
!
"
)
;
}
}
}
