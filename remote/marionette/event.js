"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
event
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
keyData
:
"
chrome
:
/
/
remote
/
content
/
shared
/
webdriver
/
KeyData
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
this
.
event
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
dblclickTimer
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
}
)
;
const
_eventUtils
=
new
WeakMap
(
)
;
function
_getEventUtils
(
win
)
{
if
(
!
_eventUtils
.
has
(
win
)
)
{
const
eventUtilsObject
=
{
window
:
win
parent
:
win
_EU_Ci
:
Ci
_EU_Cc
:
Cc
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
remote
/
content
/
external
/
EventUtils
.
js
"
eventUtilsObject
)
;
_eventUtils
.
set
(
win
eventUtilsObject
)
;
}
return
_eventUtils
.
get
(
win
)
;
}
const
DBLCLICK_INTERVAL
=
640
;
event
.
MouseEvents
=
{
click
:
0
dblclick
:
1
mousedown
:
2
mouseup
:
3
mouseover
:
4
mouseout
:
5
}
;
event
.
Modifiers
=
{
shiftKey
:
0
ctrlKey
:
1
altKey
:
2
metaKey
:
3
}
;
event
.
MouseButton
=
{
isPrimary
(
button
)
{
return
button
=
=
=
0
;
}
isAuxiliary
(
button
)
{
return
button
=
=
=
1
;
}
isSecondary
(
button
)
{
return
button
=
=
=
2
;
}
}
;
event
.
DoubleClickTracker
=
{
firstClick
:
false
isClicked
(
)
{
return
event
.
DoubleClickTracker
.
firstClick
;
}
setClick
(
)
{
if
(
!
event
.
DoubleClickTracker
.
firstClick
)
{
event
.
DoubleClickTracker
.
firstClick
=
true
;
event
.
DoubleClickTracker
.
startTimer
(
)
;
}
}
resetClick
(
)
{
event
.
DoubleClickTracker
.
firstClick
=
false
;
event
.
DoubleClickTracker
.
cancelTimer
(
)
;
}
startTimer
(
)
{
dblclickTimer
.
initWithCallback
(
event
.
DoubleClickTracker
.
resetClick
DBLCLICK_INTERVAL
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
cancelTimer
(
)
{
dblclickTimer
.
cancel
(
)
;
}
}
;
event
.
getShiftedKey
=
function
(
rawKey
)
{
return
keyData
.
getShiftedKey
(
rawKey
)
;
}
;
event
.
getKeyData
=
function
(
rawKey
)
{
return
keyData
.
getData
(
rawKey
)
;
}
;
event
.
parseModifiers_
=
function
(
modifiers
win
)
{
return
_getEventUtils
(
win
)
.
_parseModifiers
(
modifiers
)
;
}
;
event
.
synthesizeMouseAtPoint
=
function
(
left
top
opts
win
)
{
return
_getEventUtils
(
win
)
.
synthesizeMouseAtPoint
(
left
top
opts
win
)
;
}
;
event
.
sendKeyDown
=
function
(
key
win
)
{
event
.
sendSingleKey
(
key
win
"
keydown
"
)
;
}
;
event
.
sendKeyUp
=
function
(
key
win
)
{
event
.
sendSingleKey
(
key
win
"
keyup
"
)
;
}
;
event
.
sendSingleKey
=
function
(
key
win
type
=
null
)
{
let
keyValue
=
key
.
key
;
if
(
!
key
.
printable
)
{
keyValue
=
KEY_
{
keyValue
}
;
}
const
event
=
{
code
:
key
.
code
location
:
key
.
location
altKey
:
key
.
altKey
?
?
false
shiftKey
:
key
.
shiftKey
?
?
false
ctrlKey
:
key
.
ctrlKey
?
?
false
metaKey
:
key
.
metaKey
?
?
false
repeat
:
key
.
repeat
?
?
false
}
;
if
(
type
)
{
event
.
type
=
type
;
}
_getEventUtils
(
win
)
.
synthesizeKey
(
keyValue
event
win
)
;
}
;
event
.
sendKeys
=
function
(
keyString
win
)
{
const
modifiers
=
{
}
;
for
(
let
modifier
in
event
.
Modifiers
)
{
modifiers
[
modifier
]
=
false
;
}
for
(
let
i
=
0
;
i
<
keyString
.
length
;
i
+
+
)
{
const
rawKey
=
keyString
.
charAt
(
i
)
;
const
key
=
{
.
.
.
keyData
.
getData
(
rawKey
)
.
.
.
modifiers
}
;
if
(
key
.
modifier
)
{
modifiers
[
key
.
modifier
]
=
true
;
}
event
.
sendSingleKey
(
key
win
)
;
}
}
;
event
.
sendEvent
=
function
(
eventType
el
modifiers
=
{
}
opts
=
{
}
)
{
opts
.
canBubble
=
opts
.
canBubble
|
|
true
;
let
doc
=
el
.
ownerDocument
|
|
el
.
document
;
let
ev
=
doc
.
createEvent
(
"
Event
"
)
;
ev
.
shiftKey
=
modifiers
.
shift
;
ev
.
metaKey
=
modifiers
.
meta
;
ev
.
altKey
=
modifiers
.
alt
;
ev
.
ctrlKey
=
modifiers
.
ctrl
;
ev
.
initEvent
(
eventType
opts
.
canBubble
true
)
;
el
.
dispatchEvent
(
ev
)
;
}
;
event
.
mouseover
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
mouseover
"
el
modifiers
opts
)
;
}
;
event
.
mousemove
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
mousemove
"
el
modifiers
opts
)
;
}
;
event
.
mousedown
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
mousedown
"
el
modifiers
opts
)
;
}
;
event
.
mouseup
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
mouseup
"
el
modifiers
opts
)
;
}
;
event
.
click
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
click
"
el
modifiers
opts
)
;
}
;
event
.
change
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
change
"
el
modifiers
opts
)
;
}
;
event
.
input
=
function
(
el
modifiers
=
{
}
opts
=
{
}
)
{
return
event
.
sendEvent
(
"
input
"
el
modifiers
opts
)
;
}
;
