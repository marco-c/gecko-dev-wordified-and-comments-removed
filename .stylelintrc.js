"
use
strict
"
;
const
fs
=
require
(
"
fs
"
)
;
const
path
=
require
(
"
path
"
)
;
function
readFile
(
path
)
{
return
fs
.
readFileSync
(
path
{
encoding
:
"
utf
-
8
"
}
)
.
split
(
"
\
n
"
)
.
filter
(
p
=
>
p
&
&
!
p
.
startsWith
(
"
#
"
)
)
;
}
const
ignoreFiles
=
[
.
.
.
readFile
(
path
.
join
(
__dirname
"
tools
"
"
rewriting
"
"
ThirdPartyPaths
.
txt
"
)
)
.
.
.
readFile
(
path
.
join
(
__dirname
"
tools
"
"
rewriting
"
"
Generated
.
txt
"
)
)
]
;
module
.
exports
=
{
extends
:
[
"
stylelint
-
config
-
recommended
"
]
ignoreFiles
rules
:
{
"
color
-
no
-
invalid
-
hex
"
:
null
"
font
-
family
-
no
-
missing
-
generic
-
family
-
keyword
"
:
[
true
{
ignoreFontFamilies
:
[
"
-
moz
-
button
"
"
-
moz
-
field
"
"
-
moz
-
fixed
"
"
-
moz
-
list
"
"
caption
"
]
}
]
"
function
-
no
-
unknown
"
:
[
true
{
ignoreFunctions
:
[
"
-
moz
-
image
-
rect
"
"
add
"
]
}
]
"
no
-
descending
-
specificity
"
:
null
"
no
-
duplicate
-
selectors
"
:
null
"
property
-
no
-
unknown
"
:
[
true
{
ignoreProperties
:
[
"
overflow
-
clip
-
box
"
]
}
]
"
selector
-
type
-
no
-
unknown
"
:
null
"
selector
-
pseudo
-
class
-
no
-
unknown
"
:
[
true
{
ignorePseudoClasses
:
[
"
popover
-
open
"
]
}
]
}
overrides
:
[
{
files
:
"
*
.
scss
"
customSyntax
:
"
postcss
-
scss
"
extends
:
"
stylelint
-
config
-
recommended
-
scss
"
}
{
files
:
"
browser
/
components
/
newtab
/
*
*
"
customSyntax
:
"
postcss
-
scss
"
defaultSeverity
:
"
warning
"
extends
:
"
stylelint
-
config
-
standard
-
scss
"
rules
:
{
"
at
-
rule
-
disallowed
-
list
"
:
[
[
"
debug
"
"
warn
"
"
error
"
]
{
message
:
"
Clean
up
%
s
directives
before
committing
"
}
]
"
at
-
rule
-
no
-
vendor
-
prefix
"
:
null
"
color
-
function
-
notation
"
:
null
"
color
-
hex
-
case
"
:
"
upper
"
"
comment
-
empty
-
line
-
before
"
:
[
"
always
"
{
except
:
[
"
first
-
nested
"
]
ignore
:
[
"
after
-
comment
"
"
stylelint
-
commands
"
]
}
]
"
custom
-
property
-
empty
-
line
-
before
"
:
null
"
custom
-
property
-
pattern
"
:
null
"
declaration
-
block
-
no
-
duplicate
-
properties
"
:
[
true
{
severity
:
"
error
"
}
]
"
declaration
-
block
-
no
-
redundant
-
longhand
-
properties
"
:
null
"
declaration
-
no
-
important
"
:
[
true
{
severity
:
"
error
"
}
]
"
function
-
url
-
no
-
scheme
-
relative
"
:
[
true
{
severity
:
"
error
"
}
]
indentation
:
2
"
keyframes
-
name
-
pattern
"
:
null
"
max
-
nesting
-
depth
"
:
[
8
{
ignore
:
[
"
blockless
-
at
-
rules
"
"
pseudo
-
classes
"
]
severity
:
"
error
"
}
]
"
media
-
feature
-
name
-
no
-
vendor
-
prefix
"
:
null
"
no
-
descending
-
specificity
"
:
null
"
no
-
eol
-
whitespace
"
:
true
"
no
-
missing
-
end
-
of
-
source
-
newline
"
:
true
"
number
-
leading
-
zero
"
:
"
always
"
"
number
-
no
-
trailing
-
zeros
"
:
true
"
property
-
disallowed
-
list
"
:
[
[
"
margin
-
left
"
"
margin
-
right
"
]
{
message
:
"
Use
margin
-
inline
instead
of
%
s
"
severity
:
"
error
"
}
]
"
property
-
no
-
unknown
"
:
[
true
{
severity
:
"
error
"
}
]
"
property
-
no
-
vendor
-
prefix
"
:
null
"
scss
/
dollar
-
variable
-
empty
-
line
-
before
"
:
null
"
scss
/
double
-
slash
-
comment
-
empty
-
line
-
before
"
:
[
"
always
"
{
except
:
[
"
first
-
nested
"
]
ignore
:
[
"
between
-
comments
"
"
stylelint
-
commands
"
"
inside
-
block
"
]
}
]
"
selector
-
class
-
pattern
"
:
null
"
selector
-
no
-
vendor
-
prefix
"
:
null
"
string
-
quotes
"
:
[
"
single
"
{
avoidEscape
:
true
severity
:
"
error
"
}
]
"
value
-
keyword
-
case
"
:
null
"
value
-
no
-
vendor
-
prefix
"
:
null
}
}
]
}
;
