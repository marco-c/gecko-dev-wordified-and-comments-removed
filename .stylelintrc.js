"
use
strict
"
;
const
fs
=
require
(
"
fs
"
)
;
const
path
=
require
(
"
path
"
)
;
const
rollouts
=
require
(
"
.
/
stylelint
-
rollouts
.
config
"
)
;
function
readFile
(
filePath
)
{
return
fs
.
readFileSync
(
filePath
{
encoding
:
"
utf
-
8
"
}
)
.
split
(
"
\
n
"
)
.
filter
(
p
=
>
p
&
&
!
p
.
startsWith
(
"
#
"
)
)
;
}
const
ignoreFiles
=
[
.
.
.
readFile
(
path
.
join
(
__dirname
"
tools
"
"
rewriting
"
"
ThirdPartyPaths
.
txt
"
)
)
.
.
.
readFile
(
path
.
join
(
__dirname
"
tools
"
"
rewriting
"
"
Generated
.
txt
"
)
)
]
;
module
.
exports
=
{
extends
:
[
"
stylelint
-
config
-
recommended
"
]
plugins
:
[
"
.
/
tools
/
lint
/
stylelint
/
stylelint
-
plugin
-
mozilla
/
index
.
mjs
"
"
stylistic
/
stylelint
-
plugin
"
]
ignoreFiles
rules
:
{
"
color
-
no
-
invalid
-
hex
"
:
null
"
font
-
family
-
no
-
missing
-
generic
-
family
-
keyword
"
:
[
true
{
ignoreFontFamilies
:
[
"
-
moz
-
button
"
"
-
moz
-
field
"
"
-
moz
-
fixed
"
"
-
moz
-
list
"
"
caption
"
]
}
]
"
function
-
no
-
unknown
"
:
[
true
{
ignoreFunctions
:
[
"
light
-
dark
"
"
add
"
"
-
moz
-
symbolic
-
icon
"
]
}
]
"
length
-
zero
-
no
-
unit
"
:
[
true
{
ignore
:
[
"
custom
-
properties
"
]
}
]
"
max
-
nesting
-
depth
"
:
[
3
{
ignore
:
[
"
blockless
-
at
-
rules
"
]
}
]
"
no
-
descending
-
specificity
"
:
null
"
no
-
duplicate
-
selectors
"
:
null
"
property
-
no
-
unknown
"
:
[
true
{
ignoreProperties
:
[
"
overflow
-
clip
-
box
"
"
overflow
-
clip
-
box
-
block
"
"
overflow
-
clip
-
box
-
inline
"
]
}
]
"
selector
-
type
-
no
-
unknown
"
:
null
"
selector
-
pseudo
-
class
-
no
-
unknown
"
:
[
true
{
ignorePseudoClasses
:
[
"
popover
-
open
"
]
}
]
"
selector
-
pseudo
-
element
-
no
-
unknown
"
:
[
true
{
ignorePseudoElements
:
[
"
slider
-
track
"
"
slider
-
fill
"
"
slider
-
thumb
"
]
}
]
"
stylelint
-
plugin
-
mozilla
/
no
-
base
-
design
-
tokens
"
:
true
"
stylelint
-
plugin
-
mozilla
/
use
-
border
-
radius
-
tokens
"
:
true
}
overrides
:
[
.
.
.
rollouts
{
files
:
"
*
.
scss
"
customSyntax
:
"
postcss
-
scss
"
extends
:
"
stylelint
-
config
-
recommended
-
scss
"
}
{
files
:
[
"
browser
/
components
/
aboutwelcome
/
*
*
"
"
browser
/
components
/
asrouter
/
*
*
"
"
browser
/
extensions
/
newtab
/
*
*
"
]
customSyntax
:
"
postcss
-
scss
"
extends
:
"
stylelint
-
config
-
standard
-
scss
"
rules
:
{
"
stylistic
/
color
-
hex
-
case
"
:
"
upper
"
"
stylistic
/
indentation
"
:
2
"
stylistic
/
no
-
eol
-
whitespace
"
:
true
"
stylistic
/
no
-
missing
-
end
-
of
-
source
-
newline
"
:
true
"
stylistic
/
number
-
leading
-
zero
"
:
"
always
"
"
stylistic
/
number
-
no
-
trailing
-
zeros
"
:
true
"
stylistic
/
string
-
quotes
"
:
[
"
single
"
{
avoidEscape
:
true
}
]
"
at
-
rule
-
disallowed
-
list
"
:
[
[
"
debug
"
"
warn
"
"
error
"
]
{
message
:
"
Clean
up
%
s
directives
before
committing
"
}
]
"
at
-
rule
-
no
-
vendor
-
prefix
"
:
null
"
color
-
function
-
notation
"
:
null
"
comment
-
empty
-
line
-
before
"
:
[
"
always
"
{
except
:
[
"
first
-
nested
"
]
ignore
:
[
"
after
-
comment
"
"
stylelint
-
commands
"
]
}
]
"
custom
-
property
-
empty
-
line
-
before
"
:
null
"
custom
-
property
-
pattern
"
:
null
"
declaration
-
block
-
no
-
duplicate
-
properties
"
:
true
"
declaration
-
block
-
no
-
redundant
-
longhand
-
properties
"
:
null
"
declaration
-
no
-
important
"
:
true
"
function
-
no
-
unknown
"
:
[
true
{
ignoreFunctions
:
[
"
div
"
]
}
]
"
function
-
url
-
no
-
scheme
-
relative
"
:
true
"
keyframes
-
name
-
pattern
"
:
null
"
media
-
feature
-
name
-
no
-
vendor
-
prefix
"
:
null
"
no
-
descending
-
specificity
"
:
null
"
property
-
disallowed
-
list
"
:
[
[
"
margin
-
left
"
"
margin
-
right
"
]
{
message
:
"
Use
margin
-
inline
instead
of
%
s
"
}
]
"
property
-
no
-
unknown
"
:
true
"
property
-
no
-
vendor
-
prefix
"
:
null
"
scss
/
dollar
-
variable
-
empty
-
line
-
before
"
:
null
"
scss
/
double
-
slash
-
comment
-
empty
-
line
-
before
"
:
[
"
always
"
{
except
:
[
"
first
-
nested
"
]
ignore
:
[
"
between
-
comments
"
"
stylelint
-
commands
"
"
inside
-
block
"
]
}
]
"
selector
-
class
-
pattern
"
:
null
"
selector
-
no
-
vendor
-
prefix
"
:
null
"
value
-
keyword
-
case
"
:
null
"
value
-
no
-
vendor
-
prefix
"
:
null
}
}
{
files
:
[
"
browser
/
extensions
/
newtab
/
*
*
"
]
rules
:
{
"
declaration
-
property
-
value
-
disallowed
-
list
"
:
[
{
"
font
-
size
"
:
[
"
/
^
[
0
-
9
.
]
+
(
px
|
em
|
rem
|
%
)
/
"
"
/
^
[
0
-
9
.
]
+
/
"
"
/
^
(
small
|
medium
|
large
|
x
-
large
|
xx
-
large
)
/
"
]
"
border
-
radius
"
:
[
"
/
^
[
0
-
9
.
]
+
(
px
|
em
|
rem
|
%
)
/
"
"
/
^
(
small
|
medium
|
large
|
x
-
large
|
xx
-
large
)
/
"
]
"
font
-
weight
"
:
[
"
/
^
(
?
!
var
\
\
(
|
inherit
|
initial
|
unset
|
revert
|
revert
-
layer
)
.
+
/
"
]
[
/
^
(
margin
|
padding
|
inset
|
gap
|
row
-
gap
|
column
-
gap
|
grid
-
row
-
gap
|
grid
-
column
-
gap
|
top
|
right
|
bottom
|
left
)
(
|
-
)
/
]
:
[
"
/
[
0
-
9
.
]
+
(
px
|
em
|
rem
)
|
\
\
/
"
]
}
{
message
:
"
Avoid
literal
values
.
Use
variables
(
e
.
g
.
var
(
-
-
font
-
size
-
small
)
)
or
inherit
/
unset
/
etc
.
"
}
]
}
}
{
files
:
[
"
browser
/
components
/
extensions
/
*
*
"
]
rules
:
{
"
stylelint
-
plugin
-
mozilla
/
use
-
border
-
radius
-
tokens
"
:
false
}
}
]
}
;
