#
ifndef
nsPrintSettingsService_h
#
define
nsPrintSettingsService_h
#
include
"
mozilla
/
embedding
/
PPrinting
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIPrintSettingsService
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsFont
.
h
"
class
nsPrintSettingsService
:
public
nsIPrintSettingsService
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPRINTSETTINGSSERVICE
nsPrintSettingsService
(
)
=
default
;
virtual
nsresult
Init
(
)
;
private
:
nsPrintSettingsService
(
const
nsPrintSettingsService
&
x
)
=
delete
;
nsPrintSettingsService
&
operator
=
(
const
nsPrintSettingsService
&
x
)
=
delete
;
protected
:
virtual
~
nsPrintSettingsService
(
)
=
default
;
void
ReadBitFieldPref
(
const
char
*
aPrefId
int32_t
anOption
)
;
void
WriteBitFieldPref
(
const
char
*
aPrefId
int32_t
anOption
)
;
void
ReadJustification
(
const
char
*
aPrefId
int16_t
&
aJust
int16_t
aInitValue
)
;
void
WriteJustification
(
const
char
*
aPrefId
int16_t
aJust
)
;
void
ReadInchesToTwipsPref
(
const
char
*
aPrefId
int32_t
&
aTwips
const
char
*
aMarginPref
)
;
void
WriteInchesFromTwipsPref
(
const
char
*
aPrefId
int32_t
aTwips
)
;
void
ReadInchesIntToTwipsPref
(
const
char
*
aPrefId
int32_t
&
aTwips
const
char
*
aMarginPref
)
;
void
WriteInchesIntFromTwipsPref
(
const
char
*
aPrefId
int32_t
aTwips
)
;
nsresult
ReadPrefDouble
(
const
char
*
aPrefId
double
&
aVal
)
;
nsresult
WritePrefDouble
(
const
char
*
aPrefId
double
aVal
)
;
virtual
nsresult
ReadPrefs
(
nsIPrintSettings
*
aPS
const
nsAString
&
aPrinterName
uint32_t
aFlags
)
;
virtual
nsresult
WritePrefs
(
nsIPrintSettings
*
aPS
const
nsAString
&
aPrinterName
uint32_t
aFlags
)
;
const
char
*
GetPrefName
(
const
char
*
aPrefName
const
nsAString
&
aPrinterName
)
;
virtual
nsresult
_CreatePrintSettings
(
nsIPrintSettings
*
*
_retval
)
;
nsCOMPtr
<
nsIPrintSettings
>
mGlobalPrintSettings
;
nsCString
mPrefName
;
}
;
#
endif
