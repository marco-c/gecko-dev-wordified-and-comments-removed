#
ifndef
mozilla_widget_PuppetWidget_h__
#
define
mozilla_widget_PuppetWidget_h__
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsBaseScreen
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIKeyEventInPluginCallback
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ContentCache
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TextEventDispatcherListener
.
h
"
#
include
"
mozilla
/
layers
/
MemoryPressureObserver
.
h
"
namespace
mozilla
{
namespace
dom
{
class
TabChild
;
}
namespace
widget
{
struct
AutoCacheNativeKeyCommands
;
class
PuppetWidget
:
public
nsBaseWidget
public
TextEventDispatcherListener
public
layers
:
:
MemoryPressureListener
{
typedef
mozilla
:
:
CSSRect
CSSRect
;
typedef
mozilla
:
:
dom
:
:
TabChild
TabChild
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
widget
:
:
TextEventDispatcher
TextEventDispatcher
;
typedef
mozilla
:
:
widget
:
:
TextEventDispatcherListener
TextEventDispatcherListener
;
typedef
nsBaseWidget
Base
;
static
const
size_t
kMaxDimension
;
public
:
explicit
PuppetWidget
(
TabChild
*
aTabChild
)
;
protected
:
virtual
~
PuppetWidget
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
using
nsBaseWidget
:
:
Create
;
virtual
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
override
;
void
InfallibleCreate
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
;
void
InitIMEState
(
)
;
virtual
already_AddRefed
<
nsIWidget
>
CreateChild
(
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
bool
aForceUseIWidgetParent
=
false
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
void
Show
(
bool
aState
)
override
;
virtual
bool
IsVisible
(
)
const
override
{
return
mVisible
;
}
virtual
void
ConstrainPosition
(
bool
int32_t
*
aX
int32_t
*
aY
)
override
{
*
aX
=
kMaxDimension
;
*
aY
=
kMaxDimension
;
}
virtual
void
Move
(
double
aX
double
aY
)
override
{
}
virtual
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
{
if
(
!
mBounds
.
IsEqualXY
(
aX
aY
)
)
{
NotifyWindowMoved
(
aX
aY
)
;
}
mBounds
.
MoveTo
(
aX
aY
)
;
return
Resize
(
aWidth
aHeight
aRepaint
)
;
}
virtual
void
Enable
(
bool
aState
)
override
{
mEnabled
=
aState
;
}
virtual
bool
IsEnabled
(
)
const
override
{
return
mEnabled
;
}
virtual
nsresult
SetFocus
(
bool
aRaise
=
false
)
override
;
virtual
nsresult
ConfigureChildren
(
const
nsTArray
<
Configuration
>
&
aConfigurations
)
override
;
virtual
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
virtual
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
#
if
defined
(
XP_WIN
)
void
SetNativeData
(
uint32_t
aDataType
uintptr_t
aVal
)
override
;
#
endif
virtual
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
{
return
NS_ERROR_UNEXPECTED
;
}
virtual
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
{
return
GetWindowPosition
(
)
+
GetChromeOffset
(
)
;
}
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
void
InitEvent
(
WidgetGUIEvent
&
aEvent
LayoutDeviceIntPoint
*
aPoint
=
nullptr
)
;
virtual
nsresult
DispatchEvent
(
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
nsEventStatus
DispatchInputEvent
(
WidgetInputEvent
*
aEvent
)
override
;
void
SetConfirmedTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
const
override
;
void
UpdateZoomConstraints
(
const
uint32_t
&
aPresShellId
const
FrameMetrics
:
:
ViewID
&
aViewId
const
mozilla
:
:
Maybe
<
ZoomConstraints
>
&
aConstraints
)
override
;
bool
AsyncPanZoomEnabled
(
)
const
override
;
virtual
void
GetEditCommands
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
friend
struct
AutoCacheNativeKeyCommands
;
virtual
nsTransparencyMode
GetTransparencyMode
(
)
override
{
return
eTransparencyTransparent
;
}
virtual
LayerManager
*
GetLayerManager
(
PLayerTransactionChild
*
aShadowManager
=
nullptr
LayersBackend
aBackendHint
=
mozilla
:
:
layers
:
:
LayersBackend
:
:
LAYERS_NONE
LayerManagerPersistence
aPersistence
=
LAYER_MANAGER_CURRENT
)
override
;
bool
CreateRemoteLayerManager
(
const
std
:
:
function
<
bool
(
LayerManager
*
)
>
&
aInitializeFunc
)
;
bool
HasLayerManager
(
)
{
return
!
!
mLayerManager
;
}
virtual
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
virtual
InputContext
GetInputContext
(
)
override
;
virtual
NativeIMEContext
GetNativeIMEContext
(
)
override
;
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
{
return
mNativeTextEventDispatcherListener
?
mNativeTextEventDispatcherListener
.
get
(
)
:
this
;
}
void
SetNativeTextEventDispatcherListener
(
TextEventDispatcherListener
*
aListener
)
{
mNativeTextEventDispatcherListener
=
aListener
;
}
virtual
void
SetCursor
(
nsCursor
aCursor
)
override
;
virtual
nsresult
SetCursor
(
imgIContainer
*
aCursor
uint32_t
aHotspotX
uint32_t
aHotspotY
)
override
;
virtual
void
ClearCachedCursor
(
)
override
;
virtual
float
GetDPI
(
)
override
;
virtual
double
GetDefaultScaleInternal
(
)
override
;
virtual
bool
NeedsPaint
(
)
override
;
void
PaintNowIfNeeded
(
)
;
virtual
TabChild
*
GetOwningTabChild
(
)
override
{
return
mTabChild
;
}
void
UpdateBackingScaleCache
(
float
aDpi
int32_t
aRounding
double
aScale
)
{
mDPI
=
aDpi
;
mRounding
=
aRounding
;
mDefaultScale
=
aScale
;
}
nsIntSize
GetScreenDimensions
(
)
;
LayoutDeviceIntPoint
GetChromeOffset
(
)
;
LayoutDeviceIntPoint
GetWindowPosition
(
)
;
virtual
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
virtual
MOZ_MUST_USE
nsresult
StartPluginIME
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aKeyboardEvent
int32_t
aPanelX
int32_t
aPanelY
nsString
&
aCommitted
)
override
;
virtual
void
SetPluginFocused
(
bool
&
aFocused
)
override
;
virtual
void
DefaultProcOfPluginEvent
(
const
mozilla
:
:
WidgetPluginEvent
&
aEvent
)
override
;
virtual
nsresult
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
uint32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeTouchTap
(
LayoutDeviceIntPoint
aPoint
bool
aLongTap
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
ClearNativeTouchSequence
(
nsIObserver
*
aObserver
)
override
;
virtual
uint32_t
GetMaxTouchPoints
(
)
const
override
;
virtual
void
StartAsyncScrollbarDrag
(
const
AsyncDragMetrics
&
aDragMetrics
)
override
;
virtual
void
SetCandidateWindowForPlugin
(
const
CandidateWindowPosition
&
aPosition
)
override
;
virtual
void
EnableIMEForPlugin
(
bool
aEnable
)
override
;
virtual
void
ZoomToRect
(
const
uint32_t
&
aPresShellId
const
FrameMetrics
:
:
ViewID
&
aViewId
const
CSSRect
&
aRect
const
uint32_t
&
aFlags
)
override
;
virtual
bool
HasPendingInputEvent
(
)
override
;
void
HandledWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
bool
aIsConsumed
)
;
virtual
nsresult
OnWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
nsIKeyEventInPluginCallback
*
aCallback
)
override
;
virtual
void
LookUpDictionary
(
const
nsAString
&
aText
const
nsTArray
<
mozilla
:
:
FontRange
>
&
aFontRangeArray
const
bool
aIsVertical
const
LayoutDeviceIntPoint
&
aPoint
)
override
;
nsresult
SetSystemFont
(
const
nsCString
&
aFontName
)
override
;
nsresult
GetSystemFont
(
nsCString
&
aFontName
)
override
;
nsresult
SetPrefersReducedMotionOverrideForTest
(
bool
aValue
)
override
;
nsresult
ResetPrefersReducedMotionOverrideForTest
(
)
override
;
using
nsBaseWidget
:
:
NotifyIME
;
NS_IMETHOD
NotifyIME
(
TextEventDispatcher
*
aTextEventDispatcher
const
IMENotification
&
aNotification
)
override
;
NS_IMETHOD_
(
IMENotificationRequests
)
GetIMENotificationRequests
(
)
override
;
NS_IMETHOD_
(
void
)
OnRemovedFrom
(
TextEventDispatcher
*
aTextEventDispatcher
)
override
;
NS_IMETHOD_
(
void
)
WillDispatchKeyboardEvent
(
TextEventDispatcher
*
aTextEventDispatcher
WidgetKeyboardEvent
&
aKeyboardEvent
uint32_t
aIndexOfKeypress
void
*
aData
)
override
;
virtual
void
OnMemoryPressure
(
layers
:
:
MemoryPressureReason
aWhy
)
override
;
private
:
nsresult
Paint
(
)
;
void
SetChild
(
PuppetWidget
*
aChild
)
;
nsresult
RequestIMEToCommitComposition
(
bool
aCancel
)
;
nsresult
NotifyIMEOfFocusChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfSelectionChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfCompositionUpdate
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfTextChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfMouseButtonEvent
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfPositionChange
(
const
IMENotification
&
aIMENotification
)
;
bool
CacheEditorRect
(
)
;
bool
CacheCompositionRects
(
uint32_t
&
aStartOffset
nsTArray
<
LayoutDeviceIntRect
>
&
aRectArray
uint32_t
&
aTargetCauseOffset
)
;
bool
GetCaretRect
(
LayoutDeviceIntRect
&
aCaretRect
uint32_t
aCaretOffset
)
;
uint32_t
GetCaretOffset
(
)
;
nsIWidgetListener
*
GetCurrentWidgetListener
(
)
;
bool
HaveValidInputContextCache
(
)
const
;
class
PaintTask
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
explicit
PaintTask
(
PuppetWidget
*
widget
)
:
Runnable
(
"
PuppetWidget
:
:
PaintTask
"
)
mWidget
(
widget
)
{
}
void
Revoke
(
)
{
mWidget
=
nullptr
;
}
private
:
PuppetWidget
*
mWidget
;
}
;
TabChild
*
mTabChild
;
RefPtr
<
PuppetWidget
>
mChild
;
LayoutDeviceIntRegion
mDirtyRegion
;
nsRevocableEventPtr
<
PaintTask
>
mPaintTask
;
RefPtr
<
layers
:
:
MemoryPressureObserver
>
mMemoryPressureObserver
;
RefPtr
<
DrawTarget
>
mDrawTarget
;
IMENotificationRequests
mIMENotificationRequestsOfParent
;
InputContext
mInputContext
;
NativeIMEContext
mNativeIMEContext
;
ContentCacheInChild
mContentCache
;
float
mDPI
;
int32_t
mRounding
;
double
mDefaultScale
;
nsCOMPtr
<
imgIContainer
>
mCustomCursor
;
uint32_t
mCursorHotspotX
mCursorHotspotY
;
nsCOMArray
<
nsIKeyEventInPluginCallback
>
mKeyEventInPluginCallbacks
;
RefPtr
<
TextEventDispatcherListener
>
mNativeTextEventDispatcherListener
;
protected
:
bool
mEnabled
;
bool
mVisible
;
private
:
bool
mNeedIMEStateInit
;
bool
mIgnoreCompositionEvents
;
}
;
class
PuppetScreen
:
public
nsBaseScreen
{
public
:
explicit
PuppetScreen
(
void
*
nativeScreen
)
;
~
PuppetScreen
(
)
;
NS_IMETHOD
GetRect
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetAvailRect
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetPixelDepth
(
int32_t
*
aPixelDepth
)
override
;
NS_IMETHOD
GetColorDepth
(
int32_t
*
aColorDepth
)
override
;
}
;
class
PuppetScreenManager
final
:
public
nsIScreenManager
{
~
PuppetScreenManager
(
)
;
public
:
PuppetScreenManager
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISCREENMANAGER
protected
:
nsCOMPtr
<
nsIScreen
>
mOneScreen
;
}
;
}
}
#
endif
