#
ifndef
mozilla_widget_PuppetWidget_h__
#
define
mozilla_widget_PuppetWidget_h__
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ContentCache
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TextEventDispatcherListener
.
h
"
#
include
"
mozilla
/
layers
/
MemoryPressureObserver
.
h
"
namespace
mozilla
{
enum
class
NativeKeyBindingsType
:
uint8_t
;
namespace
dom
{
class
BrowserChild
;
}
namespace
layers
{
class
WebRenderLayerManager
;
}
namespace
widget
{
struct
AutoCacheNativeKeyCommands
;
class
PuppetWidget
final
:
public
nsBaseWidget
public
TextEventDispatcherListener
public
layers
:
:
MemoryPressureListener
{
typedef
mozilla
:
:
CSSRect
CSSRect
;
typedef
mozilla
:
:
dom
:
:
BrowserChild
BrowserChild
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
layers
:
:
WebRenderLayerManager
WebRenderLayerManager
;
typedef
mozilla
:
:
widget
:
:
TextEventDispatcher
TextEventDispatcher
;
typedef
mozilla
:
:
widget
:
:
TextEventDispatcherListener
TextEventDispatcherListener
;
typedef
nsBaseWidget
Base
;
public
:
explicit
PuppetWidget
(
BrowserChild
*
aBrowserChild
)
;
protected
:
virtual
~
PuppetWidget
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
using
nsBaseWidget
:
:
Create
;
nsresult
Create
(
nsIWidget
*
aParent
const
LayoutDeviceIntRect
&
aRect
widget
:
:
InitData
*
aInitData
=
nullptr
)
override
;
void
InfallibleCreate
(
nsIWidget
*
aParent
const
LayoutDeviceIntRect
&
aRect
widget
:
:
InitData
*
aInitData
=
nullptr
)
;
void
InitIMEState
(
)
;
void
Destroy
(
)
override
;
void
Show
(
bool
aState
)
override
;
bool
IsVisible
(
)
const
override
{
return
mVisible
;
}
void
Move
(
double
aX
double
aY
)
override
{
}
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
{
if
(
!
mBounds
.
IsEqualXY
(
aX
aY
)
)
{
NotifyWindowMoved
(
aX
aY
)
;
}
mBounds
.
MoveTo
(
aX
aY
)
;
return
Resize
(
aWidth
aHeight
aRepaint
)
;
}
void
Enable
(
bool
aState
)
override
{
mEnabled
=
aState
;
}
bool
IsEnabled
(
)
const
override
{
return
mEnabled
;
}
nsSizeMode
SizeMode
(
)
override
{
return
mSizeMode
;
}
void
SetSizeMode
(
nsSizeMode
aMode
)
override
{
mSizeMode
=
aMode
;
}
void
SetFocus
(
Raise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
void
*
GetNativeData
(
uint32_t
aDataType
)
override
{
return
nullptr
;
}
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
{
return
NS_ERROR_UNEXPECTED
;
}
mozilla
:
:
LayoutDeviceToLayoutDeviceMatrix4x4
WidgetToTopLevelWidgetTransform
(
)
override
;
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
LayoutDeviceIntPoint
TopLevelWidgetToScreenOffset
(
)
override
{
return
GetWindowPosition
(
)
;
}
int32_t
RoundsWidgetCoordinatesTo
(
)
override
{
return
mRounding
;
}
void
InitEvent
(
WidgetGUIEvent
&
aEvent
LayoutDeviceIntPoint
*
aPoint
=
nullptr
)
;
nsresult
DispatchEvent
(
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
ContentAndAPZEventStatus
DispatchInputEvent
(
WidgetInputEvent
*
aEvent
)
override
;
void
SetConfirmedTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
const
override
;
void
UpdateZoomConstraints
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
mozilla
:
:
Maybe
<
ZoomConstraints
>
&
aConstraints
)
override
;
bool
AsyncPanZoomEnabled
(
)
const
override
;
MOZ_CAN_RUN_SCRIPT
bool
GetEditCommands
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
friend
struct
AutoCacheNativeKeyCommands
;
TransparencyMode
GetTransparencyMode
(
)
override
{
return
TransparencyMode
:
:
Transparent
;
}
WindowRenderer
*
GetWindowRenderer
(
)
override
;
bool
CreateRemoteLayerManager
(
const
std
:
:
function
<
bool
(
WebRenderLayerManager
*
)
>
&
aInitializeFunc
)
;
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
InputContext
GetInputContext
(
)
override
;
NativeIMEContext
GetNativeIMEContext
(
)
override
;
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
{
return
mNativeTextEventDispatcherListener
?
mNativeTextEventDispatcherListener
.
get
(
)
:
this
;
}
void
SetNativeTextEventDispatcherListener
(
TextEventDispatcherListener
*
aListener
)
{
mNativeTextEventDispatcherListener
=
aListener
;
}
void
SetCursor
(
const
Cursor
&
)
override
;
float
GetDPI
(
)
override
{
return
mDPI
;
}
double
GetDefaultScaleInternal
(
)
override
{
return
mDefaultScale
;
}
bool
NeedsPaint
(
)
override
;
void
PaintNowIfNeeded
(
)
;
BrowserChild
*
GetOwningBrowserChild
(
)
override
{
return
mBrowserChild
;
}
void
UpdateBackingScaleCache
(
float
aDpi
int32_t
aRounding
double
aScale
)
{
mDPI
=
aDpi
;
mRounding
=
aRounding
;
mDefaultScale
=
aScale
;
}
LayoutDeviceIntMargin
GetSafeAreaInsets
(
)
const
override
;
void
UpdateSafeAreaInsets
(
const
LayoutDeviceIntMargin
&
aSafeAreaInsets
)
;
LayoutDeviceIntPoint
GetChromeOffset
(
)
;
LayoutDeviceIntPoint
GetWindowPosition
(
)
;
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
nsresult
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
NativeMouseMessage
aNativeMessage
MouseButton
aButton
nsIWidget
:
:
Modifiers
aModifierFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchPadPinch
(
TouchpadGesturePhase
aEventPhase
float
aScale
LayoutDeviceIntPoint
aPoint
int32_t
aModifierFlags
)
override
;
nsresult
SynthesizeNativeTouchTap
(
LayoutDeviceIntPoint
aPoint
bool
aLongTap
nsIObserver
*
aObserver
)
override
;
nsresult
ClearNativeTouchSequence
(
nsIObserver
*
aObserver
)
override
;
uint32_t
GetMaxTouchPoints
(
)
const
override
;
nsresult
SynthesizeNativePenInput
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPressure
uint32_t
aRotation
int32_t
aTiltX
int32_t
aTiltY
int32_t
aButton
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchpadDoubleTap
(
LayoutDeviceIntPoint
aPoint
uint32_t
aModifierFlags
)
override
;
nsresult
SynthesizeNativeTouchpadPan
(
TouchpadGesturePhase
aEventPhase
LayoutDeviceIntPoint
aPoint
double
aDeltaX
double
aDeltaY
int32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
void
LockNativePointer
(
)
override
;
void
UnlockNativePointer
(
)
override
;
void
StartAsyncScrollbarDrag
(
const
AsyncDragMetrics
&
aDragMetrics
)
override
;
void
ZoomToRect
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
CSSRect
&
aRect
const
uint32_t
&
aFlags
)
override
;
bool
HasPendingInputEvent
(
)
override
;
void
LookUpDictionary
(
const
nsAString
&
aText
const
nsTArray
<
mozilla
:
:
FontRange
>
&
aFontRangeArray
const
bool
aIsVertical
const
LayoutDeviceIntPoint
&
aPoint
)
override
;
nsresult
SetSystemFont
(
const
nsCString
&
aFontName
)
override
;
nsresult
GetSystemFont
(
nsCString
&
aFontName
)
override
;
using
nsBaseWidget
:
:
NotifyIME
;
NS_IMETHOD
NotifyIME
(
TextEventDispatcher
*
aTextEventDispatcher
const
IMENotification
&
aNotification
)
override
;
NS_IMETHOD_
(
IMENotificationRequests
)
GetIMENotificationRequests
(
)
override
;
NS_IMETHOD_
(
void
)
OnRemovedFrom
(
TextEventDispatcher
*
aTextEventDispatcher
)
override
;
NS_IMETHOD_
(
void
)
WillDispatchKeyboardEvent
(
TextEventDispatcher
*
aTextEventDispatcher
WidgetKeyboardEvent
&
aKeyboardEvent
uint32_t
aIndexOfKeypress
void
*
aData
)
override
;
void
OnMemoryPressure
(
layers
:
:
MemoryPressureReason
aWhy
)
override
;
private
:
void
Paint
(
)
;
nsresult
RequestIMEToCommitComposition
(
bool
aCancel
)
;
nsresult
NotifyIMEOfFocusChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfSelectionChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfCompositionUpdate
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfTextChange
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfMouseButtonEvent
(
const
IMENotification
&
aIMENotification
)
;
nsresult
NotifyIMEOfPositionChange
(
const
IMENotification
&
aIMENotification
)
;
bool
CacheEditorRect
(
)
;
bool
CacheCompositionRects
(
uint32_t
&
aStartOffset
nsTArray
<
LayoutDeviceIntRect
>
&
aRectArray
uint32_t
&
aTargetCauseOffset
)
;
bool
GetCaretRect
(
LayoutDeviceIntRect
&
aCaretRect
uint32_t
aCaretOffset
)
;
uint32_t
GetCaretOffset
(
)
;
nsIWidgetListener
*
GetCurrentWidgetListener
(
)
;
bool
HaveValidInputContextCache
(
)
const
;
class
WidgetPaintTask
:
public
Runnable
{
public
:
NS_DECL_NSIRUNNABLE
explicit
WidgetPaintTask
(
PuppetWidget
*
widget
)
:
Runnable
(
"
PuppetWidget
:
:
WidgetPaintTask
"
)
mWidget
(
widget
)
{
}
void
Revoke
(
)
{
mWidget
=
nullptr
;
}
private
:
PuppetWidget
*
mWidget
;
}
;
nsRefreshDriver
*
GetTopLevelRefreshDriver
(
)
const
;
BrowserChild
*
mBrowserChild
;
nsRevocableEventPtr
<
WidgetPaintTask
>
mWidgetPaintTask
;
RefPtr
<
layers
:
:
MemoryPressureObserver
>
mMemoryPressureObserver
;
IMENotificationRequests
mIMENotificationRequestsOfParent
;
InputContext
mInputContext
;
NativeIMEContext
mNativeIMEContext
;
ContentCacheInChild
mContentCache
;
float
mDPI
=
GetFallbackDPI
(
)
;
int32_t
mRounding
=
1
;
double
mDefaultScale
=
GetFallbackDefaultScale
(
)
.
scale
;
LayoutDeviceIntMargin
mSafeAreaInsets
;
RefPtr
<
TextEventDispatcherListener
>
mNativeTextEventDispatcherListener
;
protected
:
bool
mEnabled
;
bool
mVisible
;
private
:
nsSizeMode
mSizeMode
;
bool
mNeedIMEStateInit
;
bool
mIgnoreCompositionEvents
;
}
;
}
}
#
endif
