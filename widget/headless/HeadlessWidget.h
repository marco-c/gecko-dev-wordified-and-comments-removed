#
ifndef
HEADLESSWIDGET_H
#
define
HEADLESSWIDGET_H
#
include
"
mozilla
/
widget
/
InProcessCompositorWidget
.
h
"
#
include
"
nsBaseWidget
.
h
"
namespace
mozilla
{
namespace
widget
{
class
HeadlessWidget
:
public
nsBaseWidget
{
public
:
HeadlessWidget
(
)
{
}
NS_DECL_ISUPPORTS_INHERITED
void
*
GetNativeData
(
uint32_t
aDataType
)
override
{
return
nullptr
;
}
virtual
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
override
;
using
nsBaseWidget
:
:
Create
;
virtual
already_AddRefed
<
nsIWidget
>
CreateChild
(
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
bool
aForceUseIWidgetParent
=
false
)
override
;
virtual
void
Show
(
bool
aState
)
override
;
virtual
bool
IsVisible
(
)
const
override
;
virtual
void
Move
(
double
aX
double
aY
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Headless
widgets
do
not
support
moving
.
"
)
;
}
virtual
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Enable
(
bool
aState
)
override
;
virtual
bool
IsEnabled
(
)
const
override
;
virtual
nsresult
SetFocus
(
bool
aRaise
)
override
{
return
NS_OK
;
}
virtual
nsresult
ConfigureChildren
(
const
nsTArray
<
Configuration
>
&
aConfigurations
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Headless
widgets
do
not
support
configuring
children
.
"
)
;
return
NS_ERROR_FAILURE
;
}
virtual
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
{
}
virtual
nsresult
SetTitle
(
const
nsAString
&
title
)
override
{
return
NS_OK
;
}
virtual
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
{
return
LayoutDeviceIntPoint
(
0
0
)
;
}
virtual
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Headless
widgets
do
not
support
input
context
.
"
)
;
}
virtual
InputContext
GetInputContext
(
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Headless
widgets
do
not
support
input
context
.
"
)
;
InputContext
context
;
return
context
;
}
virtual
LayerManager
*
GetLayerManager
(
PLayerTransactionChild
*
aShadowManager
=
nullptr
LayersBackend
aBackendHint
=
mozilla
:
:
layers
:
:
LayersBackend
:
:
LAYERS_NONE
LayerManagerPersistence
aPersistence
=
LAYER_MANAGER_CURRENT
)
override
;
virtual
nsresult
DispatchEvent
(
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
private
:
~
HeadlessWidget
(
)
{
}
bool
mEnabled
;
bool
mVisible
;
}
;
}
}
#
endif
