#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
HeadlessCompositorWidget
.
h
"
#
include
"
VsyncDispatcher
.
h
"
namespace
mozilla
{
namespace
widget
{
HeadlessCompositorWidget
:
:
HeadlessCompositorWidget
(
const
HeadlessCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
HeadlessWidget
*
aWindow
)
:
CompositorWidget
(
aOptions
)
mWidget
(
aWindow
)
mClientSize
(
LayoutDeviceIntSize
(
aInitData
.
InitialClientSize
(
)
)
"
HeadlessCompositorWidget
:
:
mClientSize
"
)
{
}
void
HeadlessCompositorWidget
:
:
ObserveVsync
(
VsyncObserver
*
aObserver
)
{
if
(
RefPtr
<
CompositorVsyncDispatcher
>
cvd
=
mWidget
-
>
GetCompositorVsyncDispatcher
(
)
)
{
cvd
-
>
SetCompositorVsyncObserver
(
aObserver
)
;
}
}
nsIWidget
*
HeadlessCompositorWidget
:
:
RealWidget
(
)
{
return
mWidget
;
}
void
HeadlessCompositorWidget
:
:
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
{
auto
size
=
mClientSize
.
Lock
(
)
;
*
size
=
aClientSize
;
}
LayoutDeviceIntSize
HeadlessCompositorWidget
:
:
GetClientSize
(
)
{
auto
size
=
mClientSize
.
Lock
(
)
;
return
*
size
;
}
uintptr_t
HeadlessCompositorWidget
:
:
GetWidgetKey
(
)
{
return
reinterpret_cast
<
uintptr_t
>
(
mWidget
)
;
}
}
}
