#
ifndef
mozilla_widget_HeadlessThemeGTK_h
#
define
mozilla_widget_HeadlessThemeGTK_h
#
include
"
nsITheme
.
h
"
#
include
"
nsNativeTheme
.
h
"
namespace
mozilla
{
namespace
widget
{
class
HeadlessThemeGTK
final
:
private
nsNativeTheme
public
nsITheme
{
public
:
NS_DECL_ISUPPORTS_INHERITED
HeadlessThemeGTK
(
)
=
default
;
NS_IMETHOD
DrawWidgetBackground
(
gfxContext
*
aContext
nsIFrame
*
aFrame
WidgetType
aWidgetType
const
nsRect
&
aRect
const
nsRect
&
aDirtyRect
)
override
;
MOZ_MUST_USE
LayoutDeviceIntMargin
GetWidgetBorder
(
nsDeviceContext
*
aContext
nsIFrame
*
aFrame
WidgetType
aWidgetType
)
override
;
bool
GetWidgetPadding
(
nsDeviceContext
*
aContext
nsIFrame
*
aFrame
WidgetType
aWidgetType
LayoutDeviceIntMargin
*
aResult
)
override
;
NS_IMETHOD
GetMinimumWidgetSize
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
WidgetType
aWidgetType
mozilla
:
:
LayoutDeviceIntSize
*
aResult
bool
*
aIsOverridable
)
override
;
NS_IMETHOD
WidgetStateChanged
(
nsIFrame
*
aFrame
WidgetType
aWidgetType
nsAtom
*
aAttribute
bool
*
aShouldRepaint
const
nsAttrValue
*
aOldValue
)
override
;
NS_IMETHOD
ThemeChanged
(
)
override
;
NS_IMETHOD_
(
bool
)
ThemeSupportsWidget
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
WidgetType
aWidgetType
)
override
;
NS_IMETHOD_
(
bool
)
WidgetIsContainer
(
WidgetType
aWidgetType
)
override
;
NS_IMETHOD_
(
bool
)
ThemeDrawsFocusForWidget
(
WidgetType
aWidgetType
)
override
;
virtual
bool
ThemeNeedsComboboxDropmarker
(
)
override
;
protected
:
virtual
~
HeadlessThemeGTK
(
)
{
}
}
;
}
}
#
endif
