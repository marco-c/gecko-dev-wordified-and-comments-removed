#
include
"
HeadlessLookAndFeel
.
h
"
using
mozilla
:
:
LookAndFeel
;
namespace
mozilla
{
namespace
widget
{
static
const
char16_t
UNICODE_BULLET
=
0x2022
;
HeadlessLookAndFeel
:
:
HeadlessLookAndFeel
(
)
{
}
HeadlessLookAndFeel
:
:
~
HeadlessLookAndFeel
(
)
{
}
nsresult
HeadlessLookAndFeel
:
:
NativeGetColor
(
ColorID
aID
nscolor
&
aColor
)
{
aColor
=
NS_RGB
(
0x00
0x00
0x00
)
;
return
NS_OK
;
}
nsresult
HeadlessLookAndFeel
:
:
GetIntImpl
(
IntID
aID
int32_t
&
aResult
)
{
nsresult
res
=
nsXPLookAndFeel
:
:
GetIntImpl
(
aID
aResult
)
;
if
(
NS_SUCCEEDED
(
res
)
)
{
return
res
;
}
aResult
=
0
;
return
NS_ERROR_FAILURE
;
}
nsresult
HeadlessLookAndFeel
:
:
GetFloatImpl
(
FloatID
aID
float
&
aResult
)
{
nsresult
res
=
NS_OK
;
res
=
nsXPLookAndFeel
:
:
GetFloatImpl
(
aID
aResult
)
;
if
(
NS_SUCCEEDED
(
res
)
)
{
return
res
;
}
aResult
=
-
1
.
0
;
return
NS_ERROR_FAILURE
;
}
bool
HeadlessLookAndFeel
:
:
GetFontImpl
(
FontID
aID
nsString
&
aFontName
gfxFontStyle
&
aFontStyle
float
aDevPixPerCSSPixel
)
{
return
true
;
}
char16_t
HeadlessLookAndFeel
:
:
GetPasswordCharacterImpl
(
)
{
return
UNICODE_BULLET
;
}
void
HeadlessLookAndFeel
:
:
RefreshImpl
(
)
{
nsXPLookAndFeel
:
:
RefreshImpl
(
)
;
}
bool
HeadlessLookAndFeel
:
:
GetEchoPasswordImpl
(
)
{
return
false
;
}
}
}
