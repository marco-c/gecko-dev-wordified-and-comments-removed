#
ifndef
nsPrinterBase_h__
#
define
nsPrinterBase_h__
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
nsIPrinter
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsPrintSettingsImpl
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
Result
.
h
"
namespace
mozilla
{
struct
PaperInfo
;
namespace
dom
{
class
Promise
;
}
}
class
nsPrinterBase
:
public
nsIPrinter
{
public
:
using
Promise
=
mozilla
:
:
dom
:
:
Promise
;
using
MarginDouble
=
mozilla
:
:
gfx
:
:
MarginDouble
;
using
PrintSettingsInitializer
=
mozilla
:
:
PrintSettingsInitializer
;
NS_IMETHOD
GetSupportsDuplex
(
JSContext
*
Promise
*
*
)
final
;
NS_IMETHOD
GetSupportsColor
(
JSContext
*
Promise
*
*
)
final
;
NS_IMETHOD
GetSupportsMonochrome
(
JSContext
*
Promise
*
*
)
final
;
NS_IMETHOD
GetSupportsCollation
(
JSContext
*
Promise
*
*
)
final
;
NS_IMETHOD
GetPrinterInfo
(
JSContext
*
Promise
*
*
)
final
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsPrinterBase
)
nsPrinterBase
(
)
=
delete
;
nsPrinterBase
(
const
nsPrinterBase
&
)
=
delete
;
nsPrinterBase
(
nsPrinterBase
&
&
)
=
delete
;
void
QueryMarginsForPaper
(
Promise
&
const
nsString
&
aPaperId
)
;
void
CachePrintSettingsInitializer
(
const
PrintSettingsInitializer
&
aInitializer
)
;
struct
PrinterInfo
{
nsTArray
<
mozilla
:
:
PaperInfo
>
mPaperList
;
PrintSettingsInitializer
mDefaultSettings
;
}
;
private
:
enum
class
AsyncAttribute
{
SupportsDuplex
=
0
SupportsColor
SupportsMonochrome
SupportsCollation
PrinterInfo
Last
}
;
template
<
typename
Result
typename
.
.
.
Args
>
using
BackgroundTask
=
Result
(
nsPrinterBase
:
:
*
)
(
Args
.
.
.
)
const
;
template
<
typename
T
typename
.
.
.
Args
>
nsresult
AsyncPromiseAttributeGetter
(
JSContext
*
Promise
*
*
AsyncAttribute
BackgroundTask
<
T
Args
.
.
.
>
Args
.
.
.
aArgs
)
;
protected
:
nsPrinterBase
(
const
mozilla
:
:
CommonPaperInfoArray
*
aPaperInfoArray
)
;
virtual
~
nsPrinterBase
(
)
;
virtual
PrintSettingsInitializer
DefaultSettings
(
)
const
=
0
;
virtual
bool
SupportsDuplex
(
)
const
=
0
;
virtual
bool
SupportsColor
(
)
const
=
0
;
virtual
bool
SupportsMonochrome
(
)
const
=
0
;
virtual
bool
SupportsCollation
(
)
const
=
0
;
virtual
nsTArray
<
mozilla
:
:
PaperInfo
>
PaperList
(
)
const
=
0
;
virtual
MarginDouble
GetMarginsForPaper
(
nsString
aPaperId
)
const
=
0
;
virtual
PrinterInfo
CreatePrinterInfo
(
)
const
;
const
mozilla
:
:
PaperInfo
*
FindCommonPaperSize
(
const
mozilla
:
:
gfx
:
:
SizeDouble
&
aSize
)
const
;
private
:
mozilla
:
:
EnumeratedArray
<
AsyncAttribute
AsyncAttribute
:
:
Last
RefPtr
<
Promise
>
>
mAsyncAttributePromises
;
const
RefPtr
<
const
mozilla
:
:
CommonPaperInfoArray
>
mCommonPaperInfo
;
}
;
#
endif
