#
ifndef
nsBaseWidget_h__
#
define
nsBaseWidget_h__
#
include
"
InputData
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WidgetUtils
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOptions
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
include
"
mozilla
/
widget
/
ThemeChangeKind
.
h
"
#
include
"
mozilla
/
widget
/
WindowOcclusionState
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIRollupListener
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIWidgetListener
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
<
algorithm
>
class
nsIContent
;
class
gfxContext
;
namespace
mozilla
{
class
CompositorVsyncDispatcher
;
class
LiveResizeListener
;
class
FallbackRenderer
;
class
SwipeTracker
;
struct
SwipeEventQueue
;
#
ifdef
ACCESSIBILITY
namespace
a11y
{
class
LocalAccessible
;
}
#
endif
namespace
gfx
{
class
DrawTarget
;
class
SourceSurface
;
}
namespace
layers
{
class
CompositorBridgeChild
;
class
CompositorBridgeParent
;
class
IAPZCTreeManager
;
class
GeckoContentController
;
class
APZEventState
;
struct
APZEventResult
;
class
CompositorSession
;
class
ImageContainer
;
class
WebRenderLayerManager
;
struct
ScrollableLayerGuid
;
class
RemoteCompositorSession
;
}
namespace
widget
{
class
CompositorWidgetDelegate
;
class
InProcessCompositorWidget
;
class
WidgetRenderingContext
;
}
class
CompositorVsyncDispatcher
;
}
namespace
base
{
class
Thread
;
}
#
define
TOUCH_INJECT_MAX_POINTS
256
class
nsBaseWidget
;
class
WidgetShutdownObserver
final
:
public
nsIObserver
{
~
WidgetShutdownObserver
(
)
;
public
:
explicit
WidgetShutdownObserver
(
nsBaseWidget
*
aWidget
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
void
Register
(
)
;
void
Unregister
(
)
;
nsBaseWidget
*
mWidget
;
bool
mRegistered
;
}
;
class
LocalesChangedObserver
final
:
public
nsIObserver
{
~
LocalesChangedObserver
(
)
;
public
:
explicit
LocalesChangedObserver
(
nsBaseWidget
*
aWidget
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
void
Register
(
)
;
void
Unregister
(
)
;
nsBaseWidget
*
mWidget
;
bool
mRegistered
;
}
;
class
nsBaseWidget
:
public
nsIWidget
public
nsSupportsWeakReference
{
template
<
class
EventType
class
InputType
>
friend
class
DispatchEventOnMainThread
;
friend
class
mozilla
:
:
widget
:
:
InProcessCompositorWidget
;
friend
class
mozilla
:
:
layers
:
:
RemoteCompositorSession
;
protected
:
typedef
base
:
:
Thread
Thread
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
typedef
mozilla
:
:
layers
:
:
BufferMode
BufferMode
;
typedef
mozilla
:
:
layers
:
:
CompositorBridgeChild
CompositorBridgeChild
;
typedef
mozilla
:
:
layers
:
:
CompositorBridgeParent
CompositorBridgeParent
;
typedef
mozilla
:
:
layers
:
:
IAPZCTreeManager
IAPZCTreeManager
;
typedef
mozilla
:
:
layers
:
:
GeckoContentController
GeckoContentController
;
typedef
mozilla
:
:
layers
:
:
ScrollableLayerGuid
ScrollableLayerGuid
;
typedef
mozilla
:
:
layers
:
:
APZEventState
APZEventState
;
typedef
mozilla
:
:
CSSIntRect
CSSIntRect
;
typedef
mozilla
:
:
CSSRect
CSSRect
;
typedef
mozilla
:
:
ScreenRotation
ScreenRotation
;
typedef
mozilla
:
:
widget
:
:
CompositorWidgetDelegate
CompositorWidgetDelegate
;
typedef
mozilla
:
:
layers
:
:
CompositorSession
CompositorSession
;
typedef
mozilla
:
:
layers
:
:
ImageContainer
ImageContainer
;
virtual
~
nsBaseWidget
(
)
;
public
:
nsBaseWidget
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
void
CaptureMouse
(
bool
aCapture
)
override
{
}
void
CaptureRollupEvents
(
nsIRollupListener
*
aListener
bool
aDoCapture
)
override
{
}
nsIWidgetListener
*
GetWidgetListener
(
)
const
override
;
void
SetWidgetListener
(
nsIWidgetListener
*
alistener
)
override
;
void
Destroy
(
)
override
;
void
SetParent
(
nsIWidget
*
aNewParent
)
override
{
}
;
nsIWidget
*
GetParent
(
)
override
;
nsIWidget
*
GetTopLevelWidget
(
)
override
;
nsIWidget
*
GetSheetWindowParent
(
void
)
override
;
float
GetDPI
(
)
override
;
void
AddChild
(
nsIWidget
*
aChild
)
override
;
void
RemoveChild
(
nsIWidget
*
aChild
)
override
;
void
SetZIndex
(
int32_t
aZIndex
)
override
;
void
PlaceBehind
(
nsTopLevelWidgetZPlacement
aPlacement
nsIWidget
*
aWidget
bool
aActivate
)
override
{
}
void
SetSizeMode
(
nsSizeMode
aMode
)
override
;
nsSizeMode
SizeMode
(
)
override
{
return
mSizeMode
;
}
void
GetWorkspaceID
(
nsAString
&
workspaceID
)
override
;
void
MoveToWorkspace
(
const
nsAString
&
workspaceID
)
override
;
bool
IsTiled
(
)
const
override
{
return
mIsTiled
;
}
bool
IsFullyOccluded
(
)
const
override
{
return
mIsFullyOccluded
;
}
void
SetCursor
(
const
Cursor
&
)
override
;
void
ClearCachedCursor
(
)
final
{
mCursor
=
{
}
;
mUpdateCursor
=
true
;
}
void
SetTransparencyMode
(
nsTransparencyMode
aMode
)
override
;
nsTransparencyMode
GetTransparencyMode
(
)
override
;
void
SetWindowShadowStyle
(
mozilla
:
:
StyleWindowShadow
aStyle
)
override
{
}
void
SetShowsToolbarButton
(
bool
aShow
)
override
{
}
void
SetSupportsNativeFullscreen
(
bool
aSupportsNativeFullscreen
)
override
{
}
void
SetWindowAnimationType
(
WindowAnimationType
aType
)
override
{
}
void
HideWindowChrome
(
bool
aShouldHide
)
override
{
}
bool
PrepareForFullscreenTransition
(
nsISupports
*
*
aData
)
override
{
return
false
;
}
void
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
override
;
void
CleanupFullscreenTransition
(
)
override
{
}
already_AddRefed
<
nsIScreen
>
GetWidgetScreen
(
)
override
;
nsresult
MakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aScreen
=
nullptr
)
override
;
void
InfallibleMakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aScreen
=
nullptr
)
;
WindowRenderer
*
GetWindowRenderer
(
)
override
;
virtual
void
NotifyCompositorSessionLost
(
mozilla
:
:
layers
:
:
CompositorSession
*
aSession
)
;
already_AddRefed
<
mozilla
:
:
CompositorVsyncDispatcher
>
GetCompositorVsyncDispatcher
(
)
;
virtual
void
CreateCompositorVsyncDispatcher
(
)
;
virtual
void
CreateCompositor
(
)
;
virtual
void
CreateCompositor
(
int
aWidth
int
aHeight
)
;
virtual
void
SetCompositorWidgetDelegate
(
CompositorWidgetDelegate
*
)
{
}
void
PrepareWindowEffects
(
)
override
{
}
void
UpdateThemeGeometries
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
override
{
}
void
SetModal
(
bool
aModal
)
override
{
}
uint32_t
GetMaxTouchPoints
(
)
const
override
;
void
SetWindowClass
(
const
nsAString
&
xulWinType
)
override
{
}
bool
BoundsUseDesktopPixels
(
)
const
{
return
mWindowType
<
=
eWindowType_popup
;
}
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
override
{
return
mozilla
:
:
DesktopToLayoutDeviceScale
(
1
.
0
)
;
}
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScaleByScreen
(
)
override
;
void
ConstrainPosition
(
bool
aAllowSlop
int32_t
*
aX
int32_t
*
aY
)
override
{
}
void
MoveClient
(
const
DesktopPoint
&
aOffset
)
override
;
void
ResizeClient
(
const
DesktopSize
&
aSize
bool
aRepaint
)
override
;
void
ResizeClient
(
const
DesktopRect
&
aRect
bool
aRepaint
)
override
;
LayoutDeviceIntRect
GetBounds
(
)
override
;
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
[
[
nodiscard
]
]
nsresult
GetRestoredBounds
(
LayoutDeviceIntRect
&
aRect
)
override
;
nsresult
SetNonClientMargins
(
LayoutDeviceIntMargin
&
aMargins
)
override
;
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
void
EnableDragDrop
(
bool
aEnable
)
override
{
}
;
nsresult
AsyncEnableDragDrop
(
bool
aEnable
)
override
;
[
[
nodiscard
]
]
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
{
return
NS_OK
;
}
bool
HasPendingInputEvent
(
)
override
;
void
SetIcon
(
const
nsAString
&
aIconSpec
)
override
{
}
void
SetDrawsInTitlebar
(
bool
aState
)
override
{
}
bool
ShowsResizeIndicator
(
LayoutDeviceIntRect
*
aResizerRect
)
override
;
void
FreeNativeData
(
void
*
data
uint32_t
aDataType
)
override
{
}
[
[
nodiscard
]
]
nsresult
BeginResizeDrag
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
int32_t
aHorizontal
int32_t
aVertical
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsresult
ActivateNativeMenuItemAt
(
const
nsAString
&
indexString
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsresult
ForceUpdateNativeMenuAt
(
const
nsAString
&
indexString
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsresult
NotifyIME
(
const
IMENotification
&
aIMENotification
)
final
;
[
[
nodiscard
]
]
nsresult
AttachNativeKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
bool
ComputeShouldAccelerate
(
)
;
virtual
bool
WidgetTypeSupportsAcceleration
(
)
{
return
true
;
}
[
[
nodiscard
]
]
nsresult
OnDefaultButtonLoaded
(
const
LayoutDeviceIntRect
&
aButtonRect
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
already_AddRefed
<
nsIWidget
>
CreateChild
(
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
bool
aForceUseIWidgetParent
=
false
)
override
;
void
AttachViewToTopLevel
(
bool
aUseAttachedEvents
)
override
;
nsIWidgetListener
*
GetAttachedWidgetListener
(
)
const
override
;
void
SetAttachedWidgetListener
(
nsIWidgetListener
*
aListener
)
override
;
nsIWidgetListener
*
GetPreviouslyAttachedWidgetListener
(
)
override
;
void
SetPreviouslyAttachedWidgetListener
(
nsIWidgetListener
*
)
override
;
NativeIMEContext
GetNativeIMEContext
(
)
override
;
TextEventDispatcher
*
GetTextEventDispatcher
(
)
final
;
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
;
void
ZoomToRect
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
CSSRect
&
aRect
const
uint32_t
&
aFlags
)
override
;
ContentAndAPZEventStatus
DispatchInputEvent
(
mozilla
:
:
WidgetInputEvent
*
aEvent
)
override
;
void
DispatchEventToAPZOnly
(
mozilla
:
:
WidgetInputEvent
*
aEvent
)
override
;
bool
DispatchWindowEvent
(
mozilla
:
:
WidgetGUIEvent
&
event
)
override
;
void
SetConfirmedTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
const
override
;
void
UpdateZoomConstraints
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
mozilla
:
:
Maybe
<
ZoomConstraints
>
&
aConstraints
)
override
;
bool
AsyncPanZoomEnabled
(
)
const
override
;
void
SwipeFinished
(
)
override
;
void
NotifyWindowDestroyed
(
)
;
void
NotifySizeMoveDone
(
)
;
void
NotifyWindowMoved
(
int32_t
aX
int32_t
aY
)
;
void
SetNativeData
(
uint32_t
aDataType
uintptr_t
aVal
)
override
{
}
void
NotifyThemeChanged
(
mozilla
:
:
widget
:
:
ThemeChangeKind
)
;
void
NotifyUIStateChanged
(
UIStateChangeType
aShowFocusRings
)
;
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
LocalAccessible
*
GetRootAccessible
(
)
;
#
endif
bool
IsSmallPopup
(
)
const
;
nsPopupLevel
PopupLevel
(
)
{
return
mPopupLevel
;
}
LayoutDeviceIntSize
ClientToWindowSize
(
const
LayoutDeviceIntSize
&
aClientSize
)
override
{
return
aClientSize
;
}
bool
IsPopupWithTitleBar
(
)
const
{
return
(
mWindowType
=
=
eWindowType_popup
&
&
mBorderStyle
!
=
eBorderStyle_default
&
&
mBorderStyle
&
eBorderStyle_title
)
;
}
void
ReparentNativeWidget
(
nsIWidget
*
aNewParent
)
override
{
}
const
SizeConstraints
GetSizeConstraints
(
)
override
;
void
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
override
;
void
StartAsyncScrollbarDrag
(
const
AsyncDragMetrics
&
aDragMetrics
)
override
;
bool
StartAsyncAutoscroll
(
const
ScreenPoint
&
aAnchorLocation
const
ScrollableLayerGuid
&
aGuid
)
override
;
void
StopAsyncAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
override
;
mozilla
:
:
layers
:
:
LayersId
GetRootLayerTreeId
(
)
override
;
class
AutoLayerManagerSetup
{
public
:
AutoLayerManagerSetup
(
nsBaseWidget
*
aWidget
gfxContext
*
aTarget
BufferMode
aDoubleBuffering
)
;
~
AutoLayerManagerSetup
(
)
;
private
:
nsBaseWidget
*
mWidget
;
mozilla
:
:
FallbackRenderer
*
mRenderer
=
nullptr
;
}
;
friend
class
AutoLayerManagerSetup
;
virtual
bool
ShouldUseOffMainThreadCompositing
(
)
;
static
nsIRollupListener
*
GetActiveRollupListener
(
)
;
void
Shutdown
(
)
;
void
QuitIME
(
)
;
void
NotifyLiveResizeStarted
(
)
;
void
NotifyLiveResizeStopped
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
RecvToolbarAnimatorMessageFromCompositor
(
int32_t
)
override
{
}
;
void
UpdateRootFrameMetrics
(
const
ScreenPoint
&
aScrollOffset
const
CSSToScreenScale
&
aZoom
)
override
{
}
;
void
RecvScreenPixels
(
mozilla
:
:
ipc
:
:
Shmem
&
&
aMem
const
ScreenIntSize
&
aSize
bool
aNeedsYFlip
)
override
{
}
;
#
endif
virtual
void
LocalesChanged
(
)
{
}
virtual
void
NotifyOcclusionState
(
mozilla
:
:
widget
:
:
OcclusionState
aState
)
{
}
protected
:
virtual
bool
PreRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
{
return
true
;
}
virtual
void
PostRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
{
}
virtual
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRoot
>
GetNativeLayerRoot
(
)
{
return
nullptr
;
}
virtual
already_AddRefed
<
DrawTarget
>
StartRemoteDrawing
(
)
;
virtual
already_AddRefed
<
DrawTarget
>
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
BufferMode
*
aBufferMode
)
{
return
StartRemoteDrawing
(
)
;
}
virtual
void
EndRemoteDrawing
(
)
{
}
virtual
void
EndRemoteDrawingInRegion
(
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
EndRemoteDrawing
(
)
;
}
virtual
void
CleanupRemoteDrawing
(
)
{
}
virtual
void
CleanupWindowEffects
(
)
{
}
virtual
bool
InitCompositor
(
mozilla
:
:
layers
:
:
Compositor
*
aCompositor
)
{
return
true
;
}
virtual
uint32_t
GetGLFrameBufferFormat
(
)
;
virtual
bool
CompositorInitiallyPaused
(
)
{
return
false
;
}
protected
:
void
ResolveIconName
(
const
nsAString
&
aIconName
const
nsAString
&
aIconSuffix
nsIFile
*
*
aResult
)
;
virtual
void
OnDestroy
(
)
;
void
BaseCreate
(
nsIWidget
*
aParent
nsWidgetInitData
*
aInitData
)
;
virtual
void
ConfigureAPZCTreeManager
(
)
;
virtual
void
ConfigureAPZControllerThread
(
)
;
virtual
already_AddRefed
<
GeckoContentController
>
CreateRootContentController
(
)
;
nsEventStatus
ProcessUntransformedAPZEvent
(
mozilla
:
:
WidgetInputEvent
*
aEvent
const
mozilla
:
:
layers
:
:
APZEventResult
&
aApzResult
)
;
nsresult
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
nsIObserver
*
aObserver
)
override
{
mozilla
:
:
widget
:
:
AutoObserverNotifier
notifier
(
aObserver
"
keyevent
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
NativeMouseMessage
aNativeMessage
mozilla
:
:
MouseButton
aButton
nsIWidget
:
:
Modifiers
aModifierFlags
nsIObserver
*
aObserver
)
override
{
mozilla
:
:
widget
:
:
AutoObserverNotifier
notifier
(
aObserver
"
mouseevent
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
{
mozilla
:
:
widget
:
:
AutoObserverNotifier
notifier
(
aObserver
"
mouseevent
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
{
mozilla
:
:
widget
:
:
AutoObserverNotifier
notifier
(
aObserver
"
mousescrollevent
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
{
mozilla
:
:
widget
:
:
AutoObserverNotifier
notifier
(
aObserver
"
touchpoint
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeTouchPadPinch
(
TouchpadGesturePhase
aEventPhase
float
aScale
LayoutDeviceIntPoint
aPoint
int32_t
aModifierFlags
)
override
{
MOZ_RELEASE_ASSERT
(
false
"
This
method
is
not
implemented
on
the
current
platform
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativePenInput
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPressure
uint32_t
aRotation
int32_t
aTiltX
int32_t
aTiltY
int32_t
aButton
nsIObserver
*
aObserver
)
override
{
MOZ_RELEASE_ASSERT
(
false
"
This
method
is
not
implemented
on
the
current
platform
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeTouchpadDoubleTap
(
LayoutDeviceIntPoint
aPoint
uint32_t
aModifierFlags
)
override
{
MOZ_RELEASE_ASSERT
(
false
"
This
method
is
not
implemented
on
the
current
platform
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
nsresult
SynthesizeNativeTouchpadPan
(
TouchpadGesturePhase
aEventPhase
LayoutDeviceIntPoint
aPoint
double
aDeltaX
double
aDeltaY
int32_t
aModifierFlags
)
override
{
MOZ_RELEASE_ASSERT
(
false
"
This
method
is
not
implemented
on
the
current
platform
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
void
*
GetPseudoIMEContext
(
)
;
protected
:
virtual
already_AddRefed
<
nsIWidget
>
AllocateChildPopupWidget
(
)
{
return
nsIWidget
:
:
CreateChildWindow
(
)
;
}
WindowRenderer
*
CreateFallbackRenderer
(
)
;
nsPopupType
PopupType
(
)
const
{
return
mPopupType
;
}
bool
HasRemoteContent
(
)
const
{
return
mHasRemoteContent
;
}
void
NotifyRollupGeometryChange
(
)
{
if
(
gRollupListener
)
{
gRollupListener
-
>
NotifyGeometryChange
(
)
;
}
}
void
ConstrainSize
(
int32_t
*
aWidth
int32_t
*
aHeight
)
override
{
SizeConstraints
c
=
GetSizeConstraints
(
)
;
*
aWidth
=
std
:
:
max
(
c
.
mMinSize
.
width
std
:
:
min
(
c
.
mMaxSize
.
width
*
aWidth
)
)
;
*
aHeight
=
std
:
:
max
(
c
.
mMinSize
.
height
std
:
:
min
(
c
.
mMaxSize
.
height
*
aHeight
)
)
;
}
CompositorBridgeChild
*
GetRemoteRenderer
(
)
override
;
void
ClearCachedWebrenderResources
(
)
override
;
virtual
void
WindowUsesOMTC
(
)
{
}
virtual
void
RegisterTouchWindow
(
)
{
}
mozilla
:
:
dom
:
:
Document
*
GetDocument
(
)
const
;
void
EnsureTextEventDispatcher
(
)
;
void
OnRenderingDeviceReset
(
)
;
bool
UseAPZ
(
)
;
bool
AllowWebRenderForThisWindow
(
)
;
mozilla
:
:
MultiTouchInput
UpdateSynthesizedTouchState
(
mozilla
:
:
MultiTouchInput
*
aState
uint32_t
aTime
mozilla
:
:
TimeStamp
aTimeStamp
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
)
;
void
DispatchTouchInput
(
mozilla
:
:
MultiTouchInput
&
aInput
uint16_t
aInputSource
=
mozilla
:
:
dom
:
:
MouseEvent_Binding
:
:
MOZ_SOURCE_TOUCH
)
;
void
DispatchPanGestureInput
(
mozilla
:
:
PanGestureInput
&
aInput
)
;
void
DispatchPinchGestureInput
(
mozilla
:
:
PinchGestureInput
&
aInput
)
;
static
bool
ConvertStatus
(
nsEventStatus
aStatus
)
{
return
aStatus
=
=
nsEventStatus_eConsumeNoDefault
;
}
protected
:
virtual
bool
UseExternalCompositingSurface
(
)
const
{
return
false
;
}
virtual
void
DestroyCompositor
(
)
;
void
DestroyLayerManager
(
)
;
void
ReleaseContentController
(
)
;
void
RevokeTransactionIdAllocator
(
)
;
void
FreeShutdownObserver
(
)
;
void
FreeLocalesChangedObserver
(
)
;
nsIWidgetListener
*
mWidgetListener
;
nsIWidgetListener
*
mAttachedWidgetListener
;
nsIWidgetListener
*
mPreviouslyAttachedWidgetListener
;
RefPtr
<
WindowRenderer
>
mWindowRenderer
;
RefPtr
<
CompositorSession
>
mCompositorSession
;
RefPtr
<
CompositorBridgeChild
>
mCompositorBridgeChild
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
Mutex
>
mCompositorVsyncDispatcherLock
;
RefPtr
<
mozilla
:
:
CompositorVsyncDispatcher
>
mCompositorVsyncDispatcher
;
RefPtr
<
IAPZCTreeManager
>
mAPZC
;
RefPtr
<
GeckoContentController
>
mRootContentController
;
RefPtr
<
APZEventState
>
mAPZEventState
;
RefPtr
<
WidgetShutdownObserver
>
mShutdownObserver
;
RefPtr
<
LocalesChangedObserver
>
mLocalesChangedObserver
;
RefPtr
<
TextEventDispatcher
>
mTextEventDispatcher
;
RefPtr
<
mozilla
:
:
SwipeTracker
>
mSwipeTracker
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
SwipeEventQueue
>
mSwipeEventQueue
;
Cursor
mCursor
;
nsBorderStyle
mBorderStyle
;
LayoutDeviceIntRect
mBounds
;
LayoutDeviceIntRect
*
mOriginalBounds
;
nsSizeMode
mSizeMode
;
bool
mIsTiled
;
nsPopupLevel
mPopupLevel
;
nsPopupType
mPopupType
;
SizeConstraints
mSizeConstraints
;
bool
mHasRemoteContent
;
bool
mFissionWindow
;
bool
mUpdateCursor
;
bool
mUseAttachedEvents
;
bool
mIMEHasFocus
;
bool
mIMEHasQuit
;
bool
mIsFullyOccluded
;
static
nsIRollupListener
*
gRollupListener
;
struct
InitialZoomConstraints
{
InitialZoomConstraints
(
const
uint32_t
&
aPresShellID
const
ScrollableLayerGuid
:
:
ViewID
&
aViewID
const
ZoomConstraints
&
aConstraints
)
:
mPresShellID
(
aPresShellID
)
mViewID
(
aViewID
)
mConstraints
(
aConstraints
)
{
}
uint32_t
mPresShellID
;
ScrollableLayerGuid
:
:
ViewID
mViewID
;
ZoomConstraints
mConstraints
;
}
;
mozilla
:
:
Maybe
<
InitialZoomConstraints
>
mInitialZoomConstraints
;
nsTArray
<
RefPtr
<
mozilla
:
:
LiveResizeListener
>
>
mLiveResizeListeners
;
#
ifdef
DEBUG
protected
:
static
nsAutoString
debug_GuiEventToString
(
mozilla
:
:
WidgetGUIEvent
*
aGuiEvent
)
;
static
void
debug_DumpInvalidate
(
FILE
*
aFileOut
nsIWidget
*
aWidget
const
LayoutDeviceIntRect
*
aRect
const
char
*
aWidgetName
int32_t
aWindowID
)
;
static
void
debug_DumpEvent
(
FILE
*
aFileOut
nsIWidget
*
aWidget
mozilla
:
:
WidgetGUIEvent
*
aGuiEvent
const
char
*
aWidgetName
int32_t
aWindowID
)
;
static
void
debug_DumpPaintEvent
(
FILE
*
aFileOut
nsIWidget
*
aWidget
const
nsIntRegion
&
aPaintEvent
const
char
*
aWidgetName
int32_t
aWindowID
)
;
static
bool
debug_GetCachedBoolPref
(
const
char
*
aPrefName
)
;
#
endif
private
:
already_AddRefed
<
mozilla
:
:
layers
:
:
WebRenderLayerManager
>
CreateCompositorSession
(
int
aWidth
int
aHeight
mozilla
:
:
layers
:
:
CompositorOptions
*
aOptionsOut
)
;
}
;
#
endif
