#
ifndef
mozilla_widget_CompositorWidget_h__
#
define
mozilla_widget_CompositorWidget_h__
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
class
nsIWidget
;
class
nsBaseWidget
;
namespace
mozilla
{
class
CompositorVsyncDispatcher
;
namespace
layers
{
class
Compositor
;
class
LayerManagerComposite
;
class
Compositor
;
class
Composer2D
;
}
namespace
gfx
{
class
DrawTarget
;
class
SourceSurface
;
}
namespace
widget
{
class
WinCompositorWidget
;
class
CompositorWidget
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
mozilla
:
:
widget
:
:
CompositorWidget
)
virtual
bool
PreRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
{
return
true
;
}
virtual
void
PostRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
{
}
virtual
void
DrawWindowUnderlay
(
layers
:
:
LayerManagerComposite
*
aManager
LayoutDeviceIntRect
aRect
)
{
}
virtual
void
DrawWindowOverlay
(
layers
:
:
LayerManagerComposite
*
aManager
LayoutDeviceIntRect
aRect
)
{
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
;
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
{
return
StartRemoteDrawing
(
)
;
}
virtual
void
EndRemoteDrawing
(
)
{
}
virtual
void
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
EndRemoteDrawing
(
)
;
}
virtual
void
CleanupWindowEffects
(
)
{
}
virtual
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
{
return
true
;
}
virtual
LayoutDeviceIntSize
GetClientSize
(
)
=
0
;
virtual
uint32_t
GetGLFrameBufferFormat
(
)
;
virtual
layers
:
:
Composer2D
*
GetComposer2D
(
)
{
return
nullptr
;
}
virtual
nsIWidget
*
RealWidget
(
)
=
0
;
virtual
void
CleanupRemoteDrawing
(
)
;
virtual
uintptr_t
GetWidgetKey
(
)
{
return
0
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
LayoutDeviceIntRect
&
aRect
const
LayoutDeviceIntRect
&
aClearRect
)
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
;
virtual
already_AddRefed
<
CompositorVsyncDispatcher
>
GetCompositorVsyncDispatcher
(
)
=
0
;
virtual
WinCompositorWidget
*
AsWindows
(
)
{
return
nullptr
;
}
protected
:
virtual
~
CompositorWidget
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
mLastBackBuffer
;
}
;
class
InProcessCompositorWidget
:
public
CompositorWidget
{
public
:
explicit
InProcessCompositorWidget
(
nsBaseWidget
*
aWidget
)
;
virtual
bool
PreRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
override
;
virtual
void
PostRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
override
;
virtual
void
DrawWindowUnderlay
(
layers
:
:
LayerManagerComposite
*
aManager
LayoutDeviceIntRect
aRect
)
override
;
virtual
void
DrawWindowOverlay
(
layers
:
:
LayerManagerComposite
*
aManager
LayoutDeviceIntRect
aRect
)
override
;
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
override
;
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
override
;
virtual
void
EndRemoteDrawing
(
)
override
;
virtual
void
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
LayoutDeviceIntRegion
&
aInvalidRegion
)
override
;
virtual
void
CleanupRemoteDrawing
(
)
override
;
virtual
void
CleanupWindowEffects
(
)
override
;
virtual
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
override
;
virtual
LayoutDeviceIntSize
GetClientSize
(
)
override
;
virtual
uint32_t
GetGLFrameBufferFormat
(
)
override
;
virtual
layers
:
:
Composer2D
*
GetComposer2D
(
)
override
;
virtual
already_AddRefed
<
CompositorVsyncDispatcher
>
GetCompositorVsyncDispatcher
(
)
override
;
virtual
uintptr_t
GetWidgetKey
(
)
override
;
nsIWidget
*
RealWidget
(
)
override
;
private
:
nsBaseWidget
*
mWidget
;
}
;
}
}
#
endif
