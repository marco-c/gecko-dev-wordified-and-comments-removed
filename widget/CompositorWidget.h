#
ifndef
mozilla_widget_CompositorWidget_h__
#
define
mozilla_widget_CompositorWidget_h__
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOptions
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
ifdef
MOZ_IS_GCC
#
include
"
mozilla
/
layers
/
NativeLayer
.
h
"
#
endif
class
nsIWidget
;
class
nsBaseWidget
;
namespace
mozilla
{
class
VsyncObserver
;
namespace
gl
{
class
GLContext
;
}
namespace
layers
{
class
Compositor
;
class
LayerManager
;
class
NativeLayerRoot
;
}
namespace
gfx
{
class
DrawTarget
;
class
SourceSurface
;
}
namespace
widget
{
class
WinCompositorWidget
;
class
GtkCompositorWidget
;
class
AndroidCompositorWidget
;
class
CompositorWidgetInitData
;
class
PlatformCompositorWidgetDelegate
;
class
HeadlessCompositorWidget
;
class
CompositorWidgetDelegate
{
public
:
virtual
PlatformCompositorWidgetDelegate
*
AsPlatformSpecificDelegate
(
)
{
return
nullptr
;
}
virtual
HeadlessCompositorWidget
*
AsHeadlessCompositorWidget
(
)
{
return
nullptr
;
}
}
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_X11
)
|
|
defined
(
MOZ_WIDGET_ANDROID
)
class
CompositorWidgetParent
;
class
CompositorWidgetChild
;
#
define
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
#
endif
class
WidgetRenderingContext
{
public
:
#
if
defined
(
XP_MACOSX
)
gl
:
:
GLContext
*
mGL
=
nullptr
;
#
endif
}
;
class
CompositorWidget
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
mozilla
:
:
widget
:
:
CompositorWidget
)
static
RefPtr
<
CompositorWidget
>
CreateLocal
(
const
CompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsIWidget
*
aWidget
)
;
virtual
bool
PreRender
(
WidgetRenderingContext
*
aContext
)
{
return
true
;
}
virtual
void
PostRender
(
WidgetRenderingContext
*
aContext
)
{
}
virtual
RefPtr
<
layers
:
:
NativeLayerRoot
>
GetNativeLayerRoot
(
)
{
return
nullptr
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
;
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
{
return
StartRemoteDrawing
(
)
;
}
virtual
void
EndRemoteDrawing
(
)
{
}
virtual
void
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
EndRemoteDrawing
(
)
;
}
virtual
bool
NeedsToDeferEndRemoteDrawing
(
)
{
return
false
;
}
virtual
LayoutDeviceIntRegion
GetTransparentRegion
(
)
;
virtual
void
CleanupWindowEffects
(
)
{
}
virtual
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
{
return
true
;
}
virtual
bool
OnResumeComposition
(
)
{
return
true
;
}
virtual
LayoutDeviceIntSize
GetClientSize
(
)
=
0
;
virtual
uint32_t
GetGLFrameBufferFormat
(
)
;
virtual
nsIWidget
*
RealWidget
(
)
=
0
;
virtual
void
CleanupRemoteDrawing
(
)
;
virtual
uintptr_t
GetWidgetKey
(
)
{
return
0
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
gfx
:
:
IntRect
&
aRect
bool
*
aOutIsCleared
)
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
;
virtual
void
ObserveVsync
(
VsyncObserver
*
aObserver
)
=
0
;
const
layers
:
:
CompositorOptions
&
GetCompositorOptions
(
)
{
return
mOptions
;
}
virtual
bool
IsHidden
(
)
const
{
return
false
;
}
virtual
RefPtr
<
VsyncObserver
>
GetVsyncObserver
(
)
const
;
virtual
WinCompositorWidget
*
AsWindows
(
)
{
return
nullptr
;
}
virtual
GtkCompositorWidget
*
AsGTK
(
)
{
return
nullptr
;
}
virtual
AndroidCompositorWidget
*
AsAndroid
(
)
{
return
nullptr
;
}
virtual
CompositorWidgetDelegate
*
AsDelegate
(
)
{
return
nullptr
;
}
protected
:
explicit
CompositorWidget
(
const
layers
:
:
CompositorOptions
&
aOptions
)
;
virtual
~
CompositorWidget
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
mLastBackBuffer
;
layers
:
:
CompositorOptions
mOptions
;
}
;
}
}
#
endif
