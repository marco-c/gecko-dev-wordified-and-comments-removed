#
ifndef
nsBaseDragService_h__
#
define
nsBaseDragService_h__
#
include
"
nsIDragService
.
h
"
#
include
"
nsIDragSession
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
#
include
"
mozilla
/
dom
/
RemoteDragStartData
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
Units
.
h
"
#
define
DRAG_TRANSLUCENCY
0
.
65
class
nsIContent
;
class
nsINode
;
class
nsPresContext
;
class
nsIImageLoadingContent
;
namespace
mozilla
{
namespace
gfx
{
class
SourceSurface
;
}
namespace
dom
{
class
DataTransfer
;
class
Selection
;
}
}
class
nsBaseDragService
:
public
nsIDragService
public
nsIDragSession
{
public
:
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
nsBaseDragService
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIDRAGSERVICE
NS_DECL_NSIDRAGSESSION
void
SetDragEndPoint
(
nsIntPoint
aEndDragPoint
)
{
mEndDragPoint
=
mozilla
:
:
LayoutDeviceIntPoint
:
:
FromUnknownPoint
(
aEndDragPoint
)
;
}
void
SetDragEndPoint
(
mozilla
:
:
LayoutDeviceIntPoint
aEndDragPoint
)
{
mEndDragPoint
=
aEndDragPoint
;
}
uint16_t
GetInputSource
(
)
{
return
mInputSource
;
}
int32_t
TakeChildProcessDragAction
(
)
;
protected
:
virtual
~
nsBaseDragService
(
)
;
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InvokeDragSessionImpl
(
nsIArray
*
aTransferableArray
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
uint32_t
aActionType
)
=
0
;
nsresult
DrawDrag
(
nsINode
*
aDOMNode
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
mozilla
:
:
CSSIntPoint
aScreenPosition
mozilla
:
:
LayoutDeviceIntRect
*
aScreenDragRect
RefPtr
<
SourceSurface
>
*
aSurface
nsPresContext
*
*
aPresContext
)
;
nsresult
DrawDragForImage
(
nsPresContext
*
aPresContext
nsIImageLoadingContent
*
aImageLoader
mozilla
:
:
dom
:
:
HTMLCanvasElement
*
aCanvas
mozilla
:
:
LayoutDeviceIntRect
*
aScreenDragRect
RefPtr
<
SourceSurface
>
*
aSurface
)
;
mozilla
:
:
LayoutDeviceIntPoint
ConvertToUnscaledDevPixels
(
nsPresContext
*
aPresContext
mozilla
:
:
CSSIntPoint
aScreenPosition
)
;
void
OpenDragPopup
(
)
;
void
DiscardInternalTransferData
(
)
;
bool
TakeDragEventDispatchedToChildProcess
(
)
{
bool
retval
=
mDragEventDispatchedToChildProcess
;
mDragEventDispatchedToChildProcess
=
false
;
return
retval
;
}
bool
mCanDrop
;
bool
mOnlyChromeDrop
;
bool
mDoingDrag
;
bool
mSessionIsSynthesizedForTests
;
bool
mIsDraggingTextInTextControl
;
bool
mEndingSession
;
bool
mHasImage
;
bool
mUserCancelled
;
bool
mDragEventDispatchedToChildProcess
;
uint32_t
mDragAction
;
uint32_t
mDragActionFromChildProcess
;
uint32_t
mEffectAllowedForTests
;
nsCOMPtr
<
nsINode
>
mSourceNode
;
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
nsCOMPtr
<
nsIContentSecurityPolicy
>
mCsp
;
RefPtr
<
mozilla
:
:
dom
:
:
Document
>
mSourceDocument
;
nsContentPolicyType
mContentPolicyType
;
RefPtr
<
mozilla
:
:
dom
:
:
DataTransfer
>
mDataTransfer
;
nsCOMPtr
<
nsINode
>
mImage
;
mozilla
:
:
CSSIntPoint
mImageOffset
;
RefPtr
<
mozilla
:
:
dom
:
:
Selection
>
mSelection
;
RefPtr
<
mozilla
:
:
dom
:
:
RemoteDragStartData
>
mDragStartData
;
nsCOMPtr
<
nsIContent
>
mDragPopup
;
mozilla
:
:
CSSIntPoint
mScreenPosition
;
mozilla
:
:
LayoutDeviceIntPoint
mEndDragPoint
;
uint32_t
mSuppressLevel
;
uint16_t
mInputSource
;
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
ContentParent
>
>
mChildProcesses
;
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
mRegion
;
}
;
#
endif
