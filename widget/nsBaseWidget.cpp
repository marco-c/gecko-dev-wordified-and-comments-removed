#
include
"
nsBaseWidget
.
h
"
#
include
<
utility
>
#
include
"
BasicLayers
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
GLConsts
.
h
"
#
include
"
InputData
.
h
"
#
include
"
LiveResizeListener
.
h
"
#
include
"
TouchEvents
.
h
"
#
include
"
WritingModes
.
h
"
#
include
"
X11UndefineNone
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GlobalKeyListener
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
StaticPrefs_apz
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StaticPrefs_layers
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
TextEventDispatcher
.
h
"
#
include
"
mozilla
/
TextEventDispatcherListener
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
mozilla
/
dom
/
BrowserParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
APZEventState
.
h
"
#
include
"
mozilla
/
layers
/
APZInputBridge
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
ChromeProcessController
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOptions
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeChild
.
h
"
#
include
"
mozilla
/
layers
/
InputAPZContext
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionChild
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
npapi
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsGfxCIID
.
h
"
#
include
"
nsIAppWindow
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIKeyEventInPluginCallback
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsIWidgetListener
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
prdtoa
.
h
"
#
include
"
prenv
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
nsAccessibilityService
.
h
"
#
endif
#
include
"
gfxConfig
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
layers
/
CompositorSession
.
h
"
#
include
"
VRManagerChild
.
h
"
#
include
"
gfxConfig
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsViewManager
.
h
"
#
ifdef
DEBUG
#
include
"
nsIObserver
.
h
"
static
void
debug_RegisterPrefCallbacks
(
)
;
#
endif
#
ifdef
NOISY_WIDGET_LEAKS
static
int32_t
gNumWidgets
;
#
endif
#
ifdef
XP_MACOSX
#
include
"
nsCocoaFeatures
.
h
"
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
static
nsRefPtrHashtable
<
nsVoidPtrHashKey
nsIWidget
>
*
sPluginWidgetList
;
#
endif
nsIRollupListener
*
nsBaseWidget
:
:
gRollupListener
=
nullptr
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
widget
;
using
namespace
mozilla
;
#
define
TOUCH_INJECT_PUMP_TIMER_MSEC
50
#
define
TOUCH_INJECT_LONG_TAP_DEFAULT_MSEC
1500
int32_t
nsIWidget
:
:
sPointerIdCounter
=
0
;
uint64_t
AutoObserverNotifier
:
:
sObserverId
=
0
;
nsDataHashtable
<
nsUint64HashKey
nsCOMPtr
<
nsIObserver
>
>
AutoObserverNotifier
:
:
sSavedObservers
;
const
uint32_t
kAsyncDragDropTimeout
=
1000
;
namespace
mozilla
:
:
widget
{
void
IMENotification
:
:
SelectionChangeDataBase
:
:
SetWritingMode
(
const
WritingMode
&
aWritingMode
)
{
mWritingMode
=
aWritingMode
.
mWritingMode
.
bits
;
}
WritingMode
IMENotification
:
:
SelectionChangeDataBase
:
:
GetWritingMode
(
)
const
{
return
WritingMode
(
mWritingMode
)
;
}
}
NS_IMPL_ISUPPORTS
(
nsBaseWidget
nsIWidget
nsISupportsWeakReference
)
nsBaseWidget
:
:
nsBaseWidget
(
)
:
mWidgetListener
(
nullptr
)
mAttachedWidgetListener
(
nullptr
)
mPreviouslyAttachedWidgetListener
(
nullptr
)
mLayerManager
(
nullptr
)
mCompositorVsyncDispatcher
(
nullptr
)
mCursor
(
eCursor_standard
)
mBorderStyle
(
eBorderStyle_none
)
mBounds
(
0
0
0
0
)
mOriginalBounds
(
nullptr
)
mClipRectCount
(
0
)
mSizeMode
(
nsSizeMode_Normal
)
mIsTiled
(
false
)
mPopupLevel
(
ePopupLevelTop
)
mPopupType
(
ePopupTypeAny
)
mHasRemoteContent
(
false
)
mFissionWindow
(
false
)
mUpdateCursor
(
true
)
mUseAttachedEvents
(
false
)
mIMEHasFocus
(
false
)
mIMEHasQuit
(
false
)
mIsFullyOccluded
(
false
)
{
#
ifdef
NOISY_WIDGET_LEAKS
gNumWidgets
+
+
;
printf
(
"
WIDGETS
+
=
%
d
\
n
"
gNumWidgets
)
;
#
endif
#
ifdef
DEBUG
debug_RegisterPrefCallbacks
(
)
;
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
!
sPluginWidgetList
)
{
sPluginWidgetList
=
new
nsRefPtrHashtable
<
nsVoidPtrHashKey
nsIWidget
>
(
)
;
}
#
endif
mShutdownObserver
=
new
WidgetShutdownObserver
(
this
)
;
}
NS_IMPL_ISUPPORTS
(
WidgetShutdownObserver
nsIObserver
)
WidgetShutdownObserver
:
:
WidgetShutdownObserver
(
nsBaseWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mRegistered
(
false
)
{
Register
(
)
;
}
WidgetShutdownObserver
:
:
~
WidgetShutdownObserver
(
)
{
}
NS_IMETHODIMP
WidgetShutdownObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
mWidget
)
{
return
NS_OK
;
}
if
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
RefPtr
<
nsBaseWidget
>
widget
(
mWidget
)
;
widget
-
>
Shutdown
(
)
;
}
else
if
(
!
strcmp
(
aTopic
"
quit
-
application
"
)
)
{
RefPtr
<
nsBaseWidget
>
widget
(
mWidget
)
;
widget
-
>
QuitIME
(
)
;
}
return
NS_OK
;
}
void
WidgetShutdownObserver
:
:
Register
(
)
{
if
(
!
mRegistered
)
{
mRegistered
=
true
;
nsContentUtils
:
:
RegisterShutdownObserver
(
this
)
;
#
ifndef
MOZ_WIDGET_ANDROID
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
AddObserver
(
this
"
quit
-
application
"
false
)
;
}
#
endif
}
}
void
WidgetShutdownObserver
:
:
Unregister
(
)
{
if
(
mRegistered
)
{
mWidget
=
nullptr
;
#
ifndef
MOZ_WIDGET_ANDROID
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
RemoveObserver
(
this
"
quit
-
application
"
)
;
}
#
endif
nsContentUtils
:
:
UnregisterShutdownObserver
(
this
)
;
mRegistered
=
false
;
}
}
void
nsBaseWidget
:
:
Shutdown
(
)
{
NotifyLiveResizeStopped
(
)
;
RevokeTransactionIdAllocator
(
)
;
DestroyCompositor
(
)
;
FreeShutdownObserver
(
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
sPluginWidgetList
)
{
delete
sPluginWidgetList
;
sPluginWidgetList
=
nullptr
;
}
#
endif
}
void
nsBaseWidget
:
:
QuitIME
(
)
{
IMEStateManager
:
:
WidgetOnQuit
(
this
)
;
this
-
>
mIMEHasQuit
=
true
;
}
void
nsBaseWidget
:
:
DestroyCompositor
(
)
{
if
(
mCompositorVsyncDispatcher
)
{
MOZ_ASSERT
(
mCompositorVsyncDispatcherLock
.
get
(
)
)
;
MutexAutoLock
lock
(
*
mCompositorVsyncDispatcherLock
.
get
(
)
)
;
mCompositorVsyncDispatcher
-
>
Shutdown
(
)
;
mCompositorVsyncDispatcher
=
nullptr
;
}
if
(
mCompositorSession
)
{
ReleaseContentController
(
)
;
mAPZC
=
nullptr
;
SetCompositorWidgetDelegate
(
nullptr
)
;
mCompositorBridgeChild
=
nullptr
;
RefPtr
<
CompositorSession
>
session
=
std
:
:
move
(
mCompositorSession
)
;
session
-
>
Shutdown
(
)
;
}
}
void
nsBaseWidget
:
:
RevokeTransactionIdAllocator
(
)
{
if
(
!
mLayerManager
)
{
return
;
}
mLayerManager
-
>
SetTransactionIdAllocator
(
nullptr
)
;
}
void
nsBaseWidget
:
:
ReleaseContentController
(
)
{
if
(
mRootContentController
)
{
mRootContentController
-
>
Destroy
(
)
;
mRootContentController
=
nullptr
;
}
}
void
nsBaseWidget
:
:
DestroyLayerManager
(
)
{
if
(
mLayerManager
)
{
mLayerManager
-
>
Destroy
(
)
;
mLayerManager
=
nullptr
;
}
DestroyCompositor
(
)
;
}
void
nsBaseWidget
:
:
OnRenderingDeviceReset
(
)
{
DestroyLayerManager
(
)
;
}
void
nsBaseWidget
:
:
FreeShutdownObserver
(
)
{
if
(
mShutdownObserver
)
{
mShutdownObserver
-
>
Unregister
(
)
;
}
mShutdownObserver
=
nullptr
;
}
nsBaseWidget
:
:
~
nsBaseWidget
(
)
{
IMEStateManager
:
:
WidgetDestroyed
(
this
)
;
if
(
mLayerManager
)
{
if
(
BasicLayerManager
*
mgr
=
mLayerManager
-
>
AsBasicLayerManager
(
)
)
{
mgr
-
>
ClearRetainerWidget
(
)
;
}
}
FreeShutdownObserver
(
)
;
RevokeTransactionIdAllocator
(
)
;
DestroyLayerManager
(
)
;
#
ifdef
NOISY_WIDGET_LEAKS
gNumWidgets
-
-
;
printf
(
"
WIDGETS
-
=
%
d
\
n
"
gNumWidgets
)
;
#
endif
delete
mOriginalBounds
;
}
void
nsBaseWidget
:
:
BaseCreate
(
nsIWidget
*
aParent
nsWidgetInitData
*
aInitData
)
{
if
(
nullptr
!
=
aInitData
)
{
mWindowType
=
aInitData
-
>
mWindowType
;
mBorderStyle
=
aInitData
-
>
mBorderStyle
;
mPopupLevel
=
aInitData
-
>
mPopupLevel
;
mPopupType
=
aInitData
-
>
mPopupHint
;
mHasRemoteContent
=
aInitData
-
>
mHasRemoteContent
;
mFissionWindow
=
aInitData
-
>
mFissionWindow
;
}
if
(
aParent
)
{
aParent
-
>
AddChild
(
this
)
;
}
}
nsIWidgetListener
*
nsBaseWidget
:
:
GetWidgetListener
(
)
{
return
mWidgetListener
;
}
void
nsBaseWidget
:
:
SetWidgetListener
(
nsIWidgetListener
*
aWidgetListener
)
{
mWidgetListener
=
aWidgetListener
;
}
already_AddRefed
<
nsIWidget
>
nsBaseWidget
:
:
CreateChild
(
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
bool
aForceUseIWidgetParent
)
{
nsIWidget
*
parent
=
this
;
nsNativeWidget
nativeParent
=
nullptr
;
if
(
!
aForceUseIWidgetParent
)
{
nativeParent
=
parent
?
parent
-
>
GetNativeData
(
NS_NATIVE_WIDGET
)
:
nullptr
;
parent
=
nativeParent
?
nullptr
:
parent
;
MOZ_ASSERT
(
!
parent
|
|
!
nativeParent
"
messed
up
logic
"
)
;
}
nsCOMPtr
<
nsIWidget
>
widget
;
if
(
aInitData
&
&
aInitData
-
>
mWindowType
=
=
eWindowType_popup
)
{
widget
=
AllocateChildPopupWidget
(
)
;
}
else
{
widget
=
nsIWidget
:
:
CreateChildWindow
(
)
;
}
if
(
widget
&
&
NS_SUCCEEDED
(
widget
-
>
Create
(
parent
nativeParent
aRect
aInitData
)
)
)
{
return
widget
.
forget
(
)
;
}
return
nullptr
;
}
void
nsBaseWidget
:
:
AttachViewToTopLevel
(
bool
aUseAttachedEvents
)
{
NS_ASSERTION
(
(
mWindowType
=
=
eWindowType_toplevel
|
|
mWindowType
=
=
eWindowType_dialog
|
|
mWindowType
=
=
eWindowType_invisible
|
|
mWindowType
=
=
eWindowType_child
)
"
Can
'
t
attach
to
window
of
that
type
"
)
;
mUseAttachedEvents
=
aUseAttachedEvents
;
}
nsIWidgetListener
*
nsBaseWidget
:
:
GetAttachedWidgetListener
(
)
{
return
mAttachedWidgetListener
;
}
nsIWidgetListener
*
nsBaseWidget
:
:
GetPreviouslyAttachedWidgetListener
(
)
{
return
mPreviouslyAttachedWidgetListener
;
}
void
nsBaseWidget
:
:
SetPreviouslyAttachedWidgetListener
(
nsIWidgetListener
*
aListener
)
{
mPreviouslyAttachedWidgetListener
=
aListener
;
}
void
nsBaseWidget
:
:
SetAttachedWidgetListener
(
nsIWidgetListener
*
aListener
)
{
mAttachedWidgetListener
=
aListener
;
}
void
nsBaseWidget
:
:
Destroy
(
)
{
nsCOMPtr
<
nsIWidget
>
kungFuDeathGrip
(
this
)
;
nsIWidget
*
parent
=
GetParent
(
)
;
if
(
parent
)
{
parent
-
>
RemoveChild
(
this
)
;
}
#
if
defined
(
XP_WIN
)
mScrollCaptureContainer
=
nullptr
;
#
endif
}
nsIWidget
*
nsBaseWidget
:
:
GetParent
(
void
)
{
return
nullptr
;
}
nsIWidget
*
nsBaseWidget
:
:
GetTopLevelWidget
(
)
{
nsIWidget
*
topLevelWidget
=
nullptr
*
widget
=
this
;
while
(
widget
)
{
topLevelWidget
=
widget
;
widget
=
widget
-
>
GetParent
(
)
;
}
return
topLevelWidget
;
}
nsIWidget
*
nsBaseWidget
:
:
GetSheetWindowParent
(
void
)
{
return
nullptr
;
}
float
nsBaseWidget
:
:
GetDPI
(
)
{
return
96
.
0f
;
}
CSSToLayoutDeviceScale
nsIWidget
:
:
GetDefaultScale
(
)
{
double
devPixelsPerCSSPixel
=
StaticPrefs
:
:
layout_css_devPixelsPerPx
(
)
;
if
(
devPixelsPerCSSPixel
<
=
0
.
0
)
{
devPixelsPerCSSPixel
=
GetDefaultScaleInternal
(
)
;
}
return
CSSToLayoutDeviceScale
(
devPixelsPerCSSPixel
)
;
}
void
nsBaseWidget
:
:
AddChild
(
nsIWidget
*
aChild
)
{
MOZ_ASSERT
(
!
aChild
-
>
GetNextSibling
(
)
&
&
!
aChild
-
>
GetPrevSibling
(
)
"
aChild
not
properly
removed
from
its
old
child
list
"
)
;
if
(
!
mFirstChild
)
{
mFirstChild
=
mLastChild
=
aChild
;
}
else
{
MOZ_ASSERT
(
mLastChild
)
;
MOZ_ASSERT
(
!
mLastChild
-
>
GetNextSibling
(
)
)
;
mLastChild
-
>
SetNextSibling
(
aChild
)
;
aChild
-
>
SetPrevSibling
(
mLastChild
)
;
mLastChild
=
aChild
;
}
}
void
nsBaseWidget
:
:
RemoveChild
(
nsIWidget
*
aChild
)
{
#
ifdef
DEBUG
#
ifdef
XP_MACOSX
nsIWidget
*
parent
=
aChild
-
>
GetParent
(
)
;
NS_ASSERTION
(
!
parent
|
|
parent
=
=
this
"
Not
one
of
our
kids
!
"
)
;
#
else
MOZ_RELEASE_ASSERT
(
aChild
-
>
GetParent
(
)
=
=
this
"
Not
one
of
our
kids
!
"
)
;
#
endif
#
endif
if
(
mLastChild
=
=
aChild
)
{
mLastChild
=
mLastChild
-
>
GetPrevSibling
(
)
;
}
if
(
mFirstChild
=
=
aChild
)
{
mFirstChild
=
mFirstChild
-
>
GetNextSibling
(
)
;
}
nsIWidget
*
prev
=
aChild
-
>
GetPrevSibling
(
)
;
nsIWidget
*
next
=
aChild
-
>
GetNextSibling
(
)
;
if
(
prev
)
{
prev
-
>
SetNextSibling
(
next
)
;
}
if
(
next
)
{
next
-
>
SetPrevSibling
(
prev
)
;
}
aChild
-
>
SetNextSibling
(
nullptr
)
;
aChild
-
>
SetPrevSibling
(
nullptr
)
;
}
void
nsBaseWidget
:
:
SetZIndex
(
int32_t
aZIndex
)
{
nsCOMPtr
<
nsIWidget
>
kungFuDeathGrip
(
this
)
;
mZIndex
=
aZIndex
;
auto
*
parent
=
static_cast
<
nsBaseWidget
*
>
(
GetParent
(
)
)
;
if
(
parent
)
{
parent
-
>
RemoveChild
(
this
)
;
nsIWidget
*
sib
=
parent
-
>
GetFirstChild
(
)
;
for
(
;
sib
;
sib
=
sib
-
>
GetNextSibling
(
)
)
{
int32_t
childZIndex
=
GetZIndex
(
)
;
if
(
aZIndex
<
childZIndex
)
{
nsIWidget
*
prev
=
sib
-
>
GetPrevSibling
(
)
;
mNextSibling
=
sib
;
mPrevSibling
=
prev
;
sib
-
>
SetPrevSibling
(
this
)
;
if
(
prev
)
{
prev
-
>
SetNextSibling
(
this
)
;
}
else
{
NS_ASSERTION
(
sib
=
=
parent
-
>
mFirstChild
"
Broken
child
list
"
)
;
parent
-
>
mFirstChild
=
this
;
}
PlaceBehind
(
eZPlacementBelow
sib
false
)
;
break
;
}
}
if
(
!
sib
)
{
parent
-
>
AddChild
(
this
)
;
}
}
}
void
nsBaseWidget
:
:
SetSizeMode
(
nsSizeMode
aMode
)
{
MOZ_ASSERT
(
aMode
=
=
nsSizeMode_Normal
|
|
aMode
=
=
nsSizeMode_Minimized
|
|
aMode
=
=
nsSizeMode_Maximized
|
|
aMode
=
=
nsSizeMode_Fullscreen
)
;
mSizeMode
=
aMode
;
}
void
nsBaseWidget
:
:
GetWorkspaceID
(
nsAString
&
workspaceID
)
{
workspaceID
.
Truncate
(
)
;
}
void
nsBaseWidget
:
:
MoveToWorkspace
(
const
nsAString
&
workspaceID
)
{
}
void
nsBaseWidget
:
:
SetCursor
(
nsCursor
aCursor
imgIContainer
*
uint32_t
uint32_t
)
{
mCursor
=
aCursor
;
}
void
nsBaseWidget
:
:
SetTransparencyMode
(
nsTransparencyMode
aMode
)
{
}
nsTransparencyMode
nsBaseWidget
:
:
GetTransparencyMode
(
)
{
return
eTransparencyOpaque
;
}
bool
nsBaseWidget
:
:
IsWindowClipRegionEqual
(
const
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
)
{
return
mClipRects
&
&
mClipRectCount
=
=
aRects
.
Length
(
)
&
&
memcmp
(
mClipRects
.
get
(
)
aRects
.
Elements
(
)
sizeof
(
LayoutDeviceIntRect
)
*
mClipRectCount
)
=
=
0
;
}
void
nsBaseWidget
:
:
StoreWindowClipRegion
(
const
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
)
{
mClipRectCount
=
aRects
.
Length
(
)
;
mClipRects
=
MakeUnique
<
LayoutDeviceIntRect
[
]
>
(
mClipRectCount
)
;
if
(
mClipRects
)
{
memcpy
(
mClipRects
.
get
(
)
aRects
.
Elements
(
)
sizeof
(
LayoutDeviceIntRect
)
*
mClipRectCount
)
;
}
}
void
nsBaseWidget
:
:
GetWindowClipRegion
(
nsTArray
<
LayoutDeviceIntRect
>
*
aRects
)
{
if
(
mClipRects
)
{
aRects
-
>
AppendElements
(
mClipRects
.
get
(
)
mClipRectCount
)
;
}
else
{
aRects
-
>
AppendElement
(
LayoutDeviceIntRect
(
0
0
mBounds
.
Width
(
)
mBounds
.
Height
(
)
)
)
;
}
}
const
LayoutDeviceIntRegion
nsBaseWidget
:
:
RegionFromArray
(
const
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
)
{
LayoutDeviceIntRegion
region
;
for
(
uint32_t
i
=
0
;
i
<
aRects
.
Length
(
)
;
+
+
i
)
{
region
.
Or
(
region
aRects
[
i
]
)
;
}
return
region
;
}
void
nsBaseWidget
:
:
ArrayFromRegion
(
const
LayoutDeviceIntRegion
&
aRegion
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
)
{
for
(
auto
iter
=
aRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
aRects
.
AppendElement
(
iter
.
Get
(
)
)
;
}
}
nsresult
nsBaseWidget
:
:
SetWindowClipRegion
(
const
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
bool
aIntersectWithExisting
)
{
if
(
!
aIntersectWithExisting
)
{
StoreWindowClipRegion
(
aRects
)
;
}
else
{
nsTArray
<
LayoutDeviceIntRect
>
currentRects
;
GetWindowClipRegion
(
&
currentRects
)
;
LayoutDeviceIntRegion
currentRegion
=
RegionFromArray
(
currentRects
)
;
LayoutDeviceIntRegion
newRegion
=
RegionFromArray
(
aRects
)
;
LayoutDeviceIntRegion
intersection
;
intersection
.
And
(
currentRegion
newRegion
)
;
nsTArray
<
LayoutDeviceIntRect
>
rects
;
ArrayFromRegion
(
intersection
rects
)
;
StoreWindowClipRegion
(
rects
)
;
}
return
NS_OK
;
}
void
nsBaseWidget
:
:
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Should
never
call
PerformFullscreenTransition
on
nsBaseWidget
"
)
;
}
void
nsBaseWidget
:
:
InfallibleMakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aScreen
)
{
HideWindowChrome
(
aFullScreen
)
;
if
(
aFullScreen
)
{
if
(
!
mOriginalBounds
)
{
mOriginalBounds
=
new
LayoutDeviceIntRect
(
)
;
}
*
mOriginalBounds
=
GetScreenBounds
(
)
;
nsCOMPtr
<
nsIScreen
>
screen
=
aScreen
;
if
(
!
screen
)
{
screen
=
GetWidgetScreen
(
)
;
}
if
(
screen
)
{
int32_t
left
top
width
height
;
if
(
NS_SUCCEEDED
(
screen
-
>
GetRectDisplayPix
(
&
left
&
top
&
width
&
height
)
)
)
{
Resize
(
left
top
width
height
true
)
;
}
}
}
else
if
(
mOriginalBounds
)
{
if
(
BoundsUseDesktopPixels
(
)
)
{
DesktopRect
deskRect
=
*
mOriginalBounds
/
GetDesktopToDeviceScale
(
)
;
Resize
(
deskRect
.
X
(
)
deskRect
.
Y
(
)
deskRect
.
Width
(
)
deskRect
.
Height
(
)
true
)
;
}
else
{
Resize
(
mOriginalBounds
-
>
X
(
)
mOriginalBounds
-
>
Y
(
)
mOriginalBounds
-
>
Width
(
)
mOriginalBounds
-
>
Height
(
)
true
)
;
}
}
}
nsresult
nsBaseWidget
:
:
MakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aScreen
)
{
InfallibleMakeFullScreen
(
aFullScreen
aScreen
)
;
return
NS_OK
;
}
nsBaseWidget
:
:
AutoLayerManagerSetup
:
:
AutoLayerManagerSetup
(
nsBaseWidget
*
aWidget
gfxContext
*
aTarget
BufferMode
aDoubleBuffering
ScreenRotation
aRotation
)
:
mWidget
(
aWidget
)
{
LayerManager
*
lm
=
mWidget
-
>
GetLayerManager
(
)
;
NS_ASSERTION
(
!
lm
|
|
lm
-
>
GetBackendType
(
)
=
=
LayersBackend
:
:
LAYERS_BASIC
"
AutoLayerManagerSetup
instantiated
for
non
-
basic
layer
backend
!
"
)
;
if
(
lm
)
{
mLayerManager
=
lm
-
>
AsBasicLayerManager
(
)
;
if
(
mLayerManager
)
{
mLayerManager
-
>
SetDefaultTarget
(
aTarget
)
;
mLayerManager
-
>
SetDefaultTargetConfiguration
(
aDoubleBuffering
aRotation
)
;
}
}
}
nsBaseWidget
:
:
AutoLayerManagerSetup
:
:
~
AutoLayerManagerSetup
(
)
{
if
(
mLayerManager
)
{
mLayerManager
-
>
SetDefaultTarget
(
nullptr
)
;
mLayerManager
-
>
SetDefaultTargetConfiguration
(
mozilla
:
:
layers
:
:
BufferMode
:
:
BUFFER_NONE
ROTATION_0
)
;
}
}
bool
nsBaseWidget
:
:
IsSmallPopup
(
)
const
{
return
mWindowType
=
=
eWindowType_popup
&
&
mPopupType
!
=
ePopupTypePanel
;
}
bool
nsBaseWidget
:
:
ComputeShouldAccelerate
(
)
{
if
(
gfx
:
:
gfxVars
:
:
UseWebRender
(
)
&
&
!
AllowWebRenderForThisWindow
(
)
)
{
return
false
;
}
return
gfx
:
:
gfxConfig
:
:
IsEnabled
(
gfx
:
:
Feature
:
:
HW_COMPOSITING
)
&
&
WidgetTypeSupportsAcceleration
(
)
;
}
bool
nsBaseWidget
:
:
UseAPZ
(
)
{
return
(
gfxPlatform
:
:
AsyncPanZoomEnabled
(
)
&
&
(
WindowType
(
)
=
=
eWindowType_toplevel
|
|
WindowType
(
)
=
=
eWindowType_child
|
|
(
WindowType
(
)
=
=
eWindowType_popup
&
&
HasRemoteContent
(
)
&
&
StaticPrefs
:
:
apz_popups_enabled
(
)
)
)
)
;
}
bool
nsBaseWidget
:
:
AllowWebRenderForThisWindow
(
)
{
return
WindowType
(
)
=
=
eWindowType_toplevel
|
|
WindowType
(
)
=
=
eWindowType_child
|
|
WindowType
(
)
=
=
eWindowType_dialog
|
|
(
WindowType
(
)
=
=
eWindowType_popup
&
&
HasRemoteContent
(
)
)
;
}
void
nsBaseWidget
:
:
CreateCompositor
(
)
{
LayoutDeviceIntRect
rect
=
GetBounds
(
)
;
CreateCompositor
(
rect
.
Width
(
)
rect
.
Height
(
)
)
;
}
already_AddRefed
<
GeckoContentController
>
nsBaseWidget
:
:
CreateRootContentController
(
)
{
RefPtr
<
GeckoContentController
>
controller
=
new
ChromeProcessController
(
this
mAPZEventState
mAPZC
)
;
return
controller
.
forget
(
)
;
}
void
nsBaseWidget
:
:
ConfigureAPZCTreeManager
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mAPZC
)
;
ConfigureAPZControllerThread
(
)
;
float
dpi
=
GetDPI
(
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
float
>
(
"
layers
:
:
IAPZCTreeManager
:
:
SetDPI
"
mAPZC
&
IAPZCTreeManager
:
:
SetDPI
dpi
)
)
;
if
(
StaticPrefs
:
:
apz_keyboard_enabled_AtStartup
(
)
)
{
KeyboardMap
map
=
RootWindowGlobalKeyListener
:
:
CollectKeyboardShortcuts
(
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
KeyboardMap
>
(
"
layers
:
:
IAPZCTreeManager
:
:
SetKeyboardMap
"
mAPZC
&
IAPZCTreeManager
:
:
SetKeyboardMap
map
)
)
;
}
RefPtr
<
IAPZCTreeManager
>
treeManager
=
mAPZC
;
ContentReceivedInputBlockCallback
callback
(
[
treeManager
]
(
uint64_t
aInputBlockId
bool
aPreventDefault
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
uint64_t
bool
>
(
"
layers
:
:
IAPZCTreeManager
:
:
ContentReceivedInputBlock
"
treeManager
&
IAPZCTreeManager
:
:
ContentReceivedInputBlock
aInputBlockId
aPreventDefault
)
)
;
}
)
;
mAPZEventState
=
new
APZEventState
(
this
std
:
:
move
(
callback
)
)
;
mSetAllowedTouchBehaviorCallback
=
[
treeManager
]
(
uint64_t
aInputBlockId
const
nsTArray
<
TouchBehaviorFlags
>
&
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
uint64_t
StoreCopyPassByLRef
<
nsTArray
<
TouchBehaviorFlags
>
>
>
(
"
layers
:
:
IAPZCTreeManager
:
:
SetAllowedTouchBehavior
"
treeManager
&
IAPZCTreeManager
:
:
SetAllowedTouchBehavior
aInputBlockId
aFlags
)
)
;
}
;
mRootContentController
=
CreateRootContentController
(
)
;
if
(
mRootContentController
)
{
mCompositorSession
-
>
SetContentController
(
mRootContentController
)
;
}
if
(
StaticPrefs
:
:
dom_w3c_touch_events_enabled
(
)
|
|
StaticPrefs
:
:
dom_w3c_pointer_events_enabled
(
)
)
{
RegisterTouchWindow
(
)
;
}
}
void
nsBaseWidget
:
:
ConfigureAPZControllerThread
(
)
{
APZThreadUtils
:
:
SetControllerThread
(
MessageLoop
:
:
current
(
)
)
;
}
void
nsBaseWidget
:
:
SetConfirmedTargetAPZC
(
uint64_t
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
const
{
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
uint64_t
StoreCopyPassByRRef
<
nsTArray
<
ScrollableLayerGuid
>
>
>
(
"
layers
:
:
IAPZCTreeManager
:
:
SetTargetAPZC
"
mAPZC
&
IAPZCTreeManager
:
:
SetTargetAPZC
aInputBlockId
aTargets
)
)
;
}
void
nsBaseWidget
:
:
UpdateZoomConstraints
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
Maybe
<
ZoomConstraints
>
&
aConstraints
)
{
if
(
!
mCompositorSession
|
|
!
mAPZC
)
{
if
(
mInitialZoomConstraints
)
{
MOZ_ASSERT
(
mInitialZoomConstraints
-
>
mPresShellID
=
=
aPresShellId
)
;
MOZ_ASSERT
(
mInitialZoomConstraints
-
>
mViewID
=
=
aViewId
)
;
if
(
!
aConstraints
)
{
mInitialZoomConstraints
.
reset
(
)
;
}
}
if
(
aConstraints
)
{
mInitialZoomConstraints
=
Some
(
InitialZoomConstraints
(
aPresShellId
aViewId
aConstraints
.
ref
(
)
)
)
;
}
return
;
}
LayersId
layersId
=
mCompositorSession
-
>
RootLayerTreeId
(
)
;
mAPZC
-
>
UpdateZoomConstraints
(
ScrollableLayerGuid
(
layersId
aPresShellId
aViewId
)
aConstraints
)
;
}
bool
nsBaseWidget
:
:
AsyncPanZoomEnabled
(
)
const
{
return
!
!
mAPZC
;
}
nsEventStatus
nsBaseWidget
:
:
ProcessUntransformedAPZEvent
(
WidgetInputEvent
*
aEvent
const
APZEventResult
&
aApzResult
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ScrollableLayerGuid
targetGuid
=
aApzResult
.
mTargetGuid
;
uint64_t
inputBlockId
=
aApzResult
.
mInputBlockId
;
InputAPZContext
context
(
aApzResult
.
mTargetGuid
inputBlockId
aApzResult
.
mStatus
)
;
if
(
aApzResult
.
mTargetGuid
.
mLayersId
=
=
mCompositorSession
-
>
RootLayerTreeId
(
)
)
{
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
*
aEvent
targetGuid
GetDefaultScale
(
)
)
;
}
nsEventStatus
status
;
UniquePtr
<
WidgetEvent
>
original
(
aEvent
-
>
Duplicate
(
)
)
;
DispatchEvent
(
aEvent
status
)
;
if
(
mAPZC
&
&
!
InputAPZContext
:
:
WasRoutedToChildProcess
(
)
&
&
inputBlockId
)
{
LayersId
rootLayersId
=
mCompositorSession
-
>
RootLayerTreeId
(
)
;
UniquePtr
<
DisplayportSetListener
>
postLayerization
;
if
(
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
)
{
if
(
touchEvent
-
>
mMessage
=
=
eTouchStart
)
{
if
(
StaticPrefs
:
:
layout_css_touch_action_enabled
(
)
)
{
APZCCallbackHelper
:
:
SendSetAllowedTouchBehaviorNotification
(
this
GetDocument
(
)
*
(
original
-
>
AsTouchEvent
(
)
)
inputBlockId
mSetAllowedTouchBehaviorCallback
)
;
}
postLayerization
=
APZCCallbackHelper
:
:
SendSetTargetAPZCNotification
(
this
GetDocument
(
)
*
(
original
-
>
AsTouchEvent
(
)
)
rootLayersId
inputBlockId
)
;
}
mAPZEventState
-
>
ProcessTouchEvent
(
*
touchEvent
targetGuid
inputBlockId
aApzResult
.
mStatus
status
)
;
}
else
if
(
WidgetWheelEvent
*
wheelEvent
=
aEvent
-
>
AsWheelEvent
(
)
)
{
MOZ_ASSERT
(
wheelEvent
-
>
mFlags
.
mHandledByAPZ
)
;
postLayerization
=
APZCCallbackHelper
:
:
SendSetTargetAPZCNotification
(
this
GetDocument
(
)
*
(
original
-
>
AsWheelEvent
(
)
)
rootLayersId
inputBlockId
)
;
if
(
wheelEvent
-
>
mCanTriggerSwipe
)
{
ReportSwipeStarted
(
inputBlockId
wheelEvent
-
>
TriggersSwipe
(
)
)
;
}
mAPZEventState
-
>
ProcessWheelEvent
(
*
wheelEvent
inputBlockId
)
;
}
else
if
(
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
)
{
MOZ_ASSERT
(
mouseEvent
-
>
mFlags
.
mHandledByAPZ
)
;
postLayerization
=
APZCCallbackHelper
:
:
SendSetTargetAPZCNotification
(
this
GetDocument
(
)
*
(
original
-
>
AsMouseEvent
(
)
)
rootLayersId
inputBlockId
)
;
mAPZEventState
-
>
ProcessMouseEvent
(
*
mouseEvent
inputBlockId
)
;
}
if
(
postLayerization
&
&
postLayerization
-
>
Register
(
)
)
{
Unused
<
<
postLayerization
.
release
(
)
;
}
}
return
status
;
}
class
DispatchWheelEventOnMainThread
:
public
Runnable
{
public
:
DispatchWheelEventOnMainThread
(
const
ScrollWheelInput
&
aWheelInput
nsBaseWidget
*
aWidget
const
APZEventResult
&
aAPZResult
)
:
mozilla
:
:
Runnable
(
"
DispatchWheelEventOnMainThread
"
)
mWheelInput
(
aWheelInput
)
mWidget
(
aWidget
)
mAPZResult
(
aAPZResult
)
{
}
NS_IMETHOD
Run
(
)
override
{
WidgetWheelEvent
wheelEvent
=
mWheelInput
.
ToWidgetWheelEvent
(
mWidget
)
;
mWidget
-
>
ProcessUntransformedAPZEvent
(
&
wheelEvent
mAPZResult
)
;
return
NS_OK
;
}
private
:
ScrollWheelInput
mWheelInput
;
nsBaseWidget
*
mWidget
;
APZEventResult
mAPZResult
;
}
;
class
DispatchWheelInputOnControllerThread
:
public
Runnable
{
public
:
DispatchWheelInputOnControllerThread
(
const
WidgetWheelEvent
&
aWheelEvent
IAPZCTreeManager
*
aAPZC
nsBaseWidget
*
aWidget
)
:
mozilla
:
:
Runnable
(
"
DispatchWheelInputOnControllerThread
"
)
mMainMessageLoop
(
MessageLoop
:
:
current
(
)
)
mWheelInput
(
aWheelEvent
)
mAPZC
(
aAPZC
)
mWidget
(
aWidget
)
{
}
NS_IMETHOD
Run
(
)
override
{
APZEventResult
result
=
mAPZC
-
>
InputBridge
(
)
-
>
ReceiveInputEvent
(
mWheelInput
)
;
if
(
result
.
mStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
NS_OK
;
}
RefPtr
<
Runnable
>
r
=
new
DispatchWheelEventOnMainThread
(
mWheelInput
mWidget
result
)
;
mMainMessageLoop
-
>
PostTask
(
r
.
forget
(
)
)
;
return
NS_OK
;
}
private
:
MessageLoop
*
mMainMessageLoop
;
ScrollWheelInput
mWheelInput
;
RefPtr
<
IAPZCTreeManager
>
mAPZC
;
nsBaseWidget
*
mWidget
;
}
;
void
nsBaseWidget
:
:
DispatchTouchInput
(
MultiTouchInput
&
aInput
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAPZC
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
APZEventResult
result
=
mAPZC
-
>
InputBridge
(
)
-
>
ReceiveInputEvent
(
aInput
)
;
if
(
result
.
mStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
;
}
WidgetTouchEvent
event
=
aInput
.
ToWidgetTouchEvent
(
this
)
;
ProcessUntransformedAPZEvent
(
&
event
result
)
;
}
else
{
WidgetTouchEvent
event
=
aInput
.
ToWidgetTouchEvent
(
this
)
;
nsEventStatus
status
;
DispatchEvent
(
&
event
status
)
;
}
}
void
nsBaseWidget
:
:
DispatchPanGestureInput
(
PanGestureInput
&
aInput
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAPZC
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
APZEventResult
result
=
mAPZC
-
>
InputBridge
(
)
-
>
ReceiveInputEvent
(
aInput
)
;
if
(
result
.
mStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
;
}
WidgetWheelEvent
event
=
aInput
.
ToWidgetWheelEvent
(
this
)
;
ProcessUntransformedAPZEvent
(
&
event
result
)
;
}
else
{
WidgetWheelEvent
event
=
aInput
.
ToWidgetWheelEvent
(
this
)
;
nsEventStatus
status
;
DispatchEvent
(
&
event
status
)
;
}
}
nsEventStatus
nsBaseWidget
:
:
DispatchInputEvent
(
WidgetInputEvent
*
aEvent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAPZC
)
{
if
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
{
APZEventResult
result
=
mAPZC
-
>
InputBridge
(
)
-
>
ReceiveInputEvent
(
*
aEvent
)
;
if
(
result
.
mStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
return
result
.
mStatus
;
}
return
ProcessUntransformedAPZEvent
(
aEvent
result
)
;
}
WidgetWheelEvent
*
wheelEvent
=
aEvent
-
>
AsWheelEvent
(
)
;
if
(
wheelEvent
)
{
RefPtr
<
Runnable
>
r
=
new
DispatchWheelInputOnControllerThread
(
*
wheelEvent
mAPZC
this
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
std
:
:
move
(
r
)
)
;
return
nsEventStatus_eConsumeDoDefault
;
}
MOZ_ASSERT
(
aEvent
-
>
AsKeyboardEvent
(
)
)
;
}
nsEventStatus
status
;
DispatchEvent
(
aEvent
status
)
;
return
status
;
}
void
nsBaseWidget
:
:
DispatchEventToAPZOnly
(
mozilla
:
:
WidgetInputEvent
*
aEvent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mAPZC
)
{
MOZ_ASSERT
(
APZThreadUtils
:
:
IsControllerThread
(
)
)
;
mAPZC
-
>
InputBridge
(
)
-
>
ReceiveInputEvent
(
*
aEvent
)
;
}
}
Document
*
nsBaseWidget
:
:
GetDocument
(
)
const
{
if
(
mWidgetListener
)
{
if
(
PresShell
*
presShell
=
mWidgetListener
-
>
GetPresShell
(
)
)
{
return
presShell
-
>
GetDocument
(
)
;
}
}
return
nullptr
;
}
void
nsBaseWidget
:
:
CreateCompositorVsyncDispatcher
(
)
{
if
(
XRE_IsParentProcess
(
)
)
{
if
(
!
mCompositorVsyncDispatcherLock
)
{
mCompositorVsyncDispatcherLock
=
MakeUnique
<
Mutex
>
(
"
mCompositorVsyncDispatcherLock
"
)
;
}
MutexAutoLock
lock
(
*
mCompositorVsyncDispatcherLock
.
get
(
)
)
;
if
(
!
mCompositorVsyncDispatcher
)
{
mCompositorVsyncDispatcher
=
new
CompositorVsyncDispatcher
(
)
;
}
}
}
already_AddRefed
<
CompositorVsyncDispatcher
>
nsBaseWidget
:
:
GetCompositorVsyncDispatcher
(
)
{
MOZ_ASSERT
(
mCompositorVsyncDispatcherLock
.
get
(
)
)
;
MutexAutoLock
lock
(
*
mCompositorVsyncDispatcherLock
.
get
(
)
)
;
RefPtr
<
CompositorVsyncDispatcher
>
dispatcher
=
mCompositorVsyncDispatcher
;
return
dispatcher
.
forget
(
)
;
}
already_AddRefed
<
LayerManager
>
nsBaseWidget
:
:
CreateCompositorSession
(
int
aWidth
int
aHeight
CompositorOptions
*
aOptionsOut
)
{
MOZ_ASSERT
(
aOptionsOut
)
;
do
{
CreateCompositorVsyncDispatcher
(
)
;
gfx
:
:
GPUProcessManager
*
gpu
=
gfx
:
:
GPUProcessManager
:
:
Get
(
)
;
gpu
-
>
EnsureGPUReady
(
)
;
bool
enableWR
=
gfx
:
:
gfxVars
:
:
UseWebRender
(
)
&
&
WidgetTypeSupportsAcceleration
(
)
&
&
AllowWebRenderForThisWindow
(
)
;
bool
enableAPZ
=
UseAPZ
(
)
;
CompositorOptions
options
(
enableAPZ
enableWR
)
;
bool
enableAL
=
gfx
:
:
gfxConfig
:
:
IsEnabled
(
gfx
:
:
Feature
:
:
ADVANCED_LAYERS
)
&
&
(
!
mFissionWindow
|
|
StaticPrefs
:
:
layers_advanced_fission_enabled
(
)
)
;
options
.
SetUseAdvancedLayers
(
enableAL
)
;
#
ifdef
MOZ_WIDGET_ANDROID
if
(
!
GetNativeData
(
NS_JAVA_SURFACE
)
)
{
options
.
SetInitiallyPaused
(
true
)
;
}
#
else
options
.
SetInitiallyPaused
(
CompositorInitiallyPaused
(
)
)
;
#
endif
RefPtr
<
LayerManager
>
lm
;
if
(
options
.
UseWebRender
(
)
)
{
lm
=
new
WebRenderLayerManager
(
this
)
;
}
else
{
lm
=
new
ClientLayerManager
(
this
)
;
}
bool
retry
=
false
;
mCompositorSession
=
gpu
-
>
CreateTopLevelCompositor
(
this
lm
GetDefaultScale
(
)
options
UseExternalCompositingSurface
(
)
gfx
:
:
IntSize
(
aWidth
aHeight
)
&
retry
)
;
if
(
lm
-
>
AsWebRenderLayerManager
(
)
&
&
mCompositorSession
)
{
TextureFactoryIdentifier
textureFactoryIdentifier
;
lm
-
>
AsWebRenderLayerManager
(
)
-
>
Initialize
(
mCompositorSession
-
>
GetCompositorBridgeChild
(
)
wr
:
:
AsPipelineId
(
mCompositorSession
-
>
RootLayerTreeId
(
)
)
&
textureFactoryIdentifier
)
;
if
(
textureFactoryIdentifier
.
mParentBackend
!
=
LayersBackend
:
:
LAYERS_WR
)
{
retry
=
true
;
DestroyCompositor
(
)
;
gfx
:
:
GPUProcessManager
:
:
Get
(
)
-
>
DisableWebRender
(
wr
:
:
WebRenderError
:
:
INITIALIZE
)
;
}
}
else
if
(
lm
-
>
AsClientLayerManager
(
)
&
&
mCompositorSession
)
{
bool
shouldAccelerate
=
ComputeShouldAccelerate
(
)
;
TextureFactoryIdentifier
textureFactoryIdentifier
;
lm
-
>
AsClientLayerManager
(
)
-
>
Initialize
(
mCompositorSession
-
>
GetCompositorBridgeChild
(
)
shouldAccelerate
&
textureFactoryIdentifier
)
;
if
(
textureFactoryIdentifier
.
mParentBackend
=
=
LayersBackend
:
:
LAYERS_NONE
)
{
DestroyCompositor
(
)
;
lm
=
nullptr
;
}
}
if
(
mCompositorSession
|
|
!
retry
)
{
*
aOptionsOut
=
options
;
return
lm
.
forget
(
)
;
}
}
while
(
true
)
;
}
void
nsBaseWidget
:
:
CreateCompositor
(
int
aWidth
int
aHeight
)
{
gfxPlatform
:
:
GetPlatform
(
)
;
MOZ_ASSERT
(
gfxPlatform
:
:
UsesOffMainThreadCompositing
(
)
"
This
function
assumes
OMTC
"
)
;
MOZ_ASSERT
(
!
mCompositorSession
&
&
!
mCompositorBridgeChild
"
Should
have
properly
cleaned
up
the
previous
PCompositor
pair
"
"
beforehand
"
)
;
if
(
mCompositorBridgeChild
)
{
mCompositorBridgeChild
-
>
Destroy
(
)
;
}
if
(
!
mShutdownObserver
)
{
return
;
}
CompositorOptions
options
;
RefPtr
<
LayerManager
>
lm
=
CreateCompositorSession
(
aWidth
aHeight
&
options
)
;
if
(
!
lm
)
{
return
;
}
MOZ_ASSERT
(
mCompositorSession
)
;
mCompositorBridgeChild
=
mCompositorSession
-
>
GetCompositorBridgeChild
(
)
;
SetCompositorWidgetDelegate
(
mCompositorSession
-
>
GetCompositorWidgetDelegate
(
)
)
;
if
(
options
.
UseAPZ
(
)
)
{
mAPZC
=
mCompositorSession
-
>
GetAPZCTreeManager
(
)
;
ConfigureAPZCTreeManager
(
)
;
}
else
{
mAPZC
=
nullptr
;
}
if
(
mInitialZoomConstraints
)
{
UpdateZoomConstraints
(
mInitialZoomConstraints
-
>
mPresShellID
mInitialZoomConstraints
-
>
mViewID
Some
(
mInitialZoomConstraints
-
>
mConstraints
)
)
;
mInitialZoomConstraints
.
reset
(
)
;
}
if
(
lm
-
>
AsWebRenderLayerManager
(
)
)
{
TextureFactoryIdentifier
textureFactoryIdentifier
=
lm
-
>
GetTextureFactoryIdentifier
(
)
;
MOZ_ASSERT
(
textureFactoryIdentifier
.
mParentBackend
=
=
LayersBackend
:
:
LAYERS_WR
)
;
ImageBridgeChild
:
:
IdentifyCompositorTextureHost
(
textureFactoryIdentifier
)
;
gfx
:
:
VRManagerChild
:
:
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
}
else
if
(
lm
-
>
AsClientLayerManager
(
)
)
{
TextureFactoryIdentifier
textureFactoryIdentifier
=
lm
-
>
GetTextureFactoryIdentifier
(
)
;
if
(
WidgetTypeSupportsAcceleration
(
)
)
{
ImageBridgeChild
:
:
IdentifyCompositorTextureHost
(
textureFactoryIdentifier
)
;
gfx
:
:
VRManagerChild
:
:
IdentifyTextureHost
(
textureFactoryIdentifier
)
;
}
}
WindowUsesOMTC
(
)
;
mLayerManager
=
std
:
:
move
(
lm
)
;
#
if
defined
(
XP_MACOSX
)
bool
getCompositorFromThisWindow
=
true
;
#
else
bool
getCompositorFromThisWindow
=
(
mWindowType
=
=
eWindowType_toplevel
)
;
#
endif
if
(
getCompositorFromThisWindow
)
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
NotifyCompositorCreated
(
mLayerManager
-
>
GetCompositorBackendType
(
)
)
;
}
}
void
nsBaseWidget
:
:
NotifyCompositorSessionLost
(
CompositorSession
*
aSession
)
{
MOZ_ASSERT
(
aSession
=
=
mCompositorSession
)
;
DestroyLayerManager
(
)
;
}
bool
nsBaseWidget
:
:
ShouldUseOffMainThreadCompositing
(
)
{
return
gfxPlatform
:
:
UsesOffMainThreadCompositing
(
)
;
}
LayerManager
*
nsBaseWidget
:
:
GetLayerManager
(
PLayerTransactionChild
*
aShadowManager
LayersBackend
aBackendHint
LayerManagerPersistence
aPersistence
)
{
if
(
!
mLayerManager
)
{
if
(
!
mShutdownObserver
)
{
return
nullptr
;
}
if
(
ShouldUseOffMainThreadCompositing
(
)
)
{
NS_ASSERTION
(
aShadowManager
=
=
nullptr
"
Async
Compositor
not
supported
with
e10s
"
)
;
CreateCompositor
(
)
;
}
if
(
!
mLayerManager
)
{
mLayerManager
=
CreateBasicLayerManager
(
)
;
}
}
return
mLayerManager
;
}
LayerManager
*
nsBaseWidget
:
:
CreateBasicLayerManager
(
)
{
return
new
BasicLayerManager
(
this
)
;
}
CompositorBridgeChild
*
nsBaseWidget
:
:
GetRemoteRenderer
(
)
{
return
mCompositorBridgeChild
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
nsBaseWidget
:
:
StartRemoteDrawing
(
)
{
return
nullptr
;
}
uint32_t
nsBaseWidget
:
:
GetGLFrameBufferFormat
(
)
{
return
LOCAL_GL_RGBA
;
}
void
nsBaseWidget
:
:
OnDestroy
(
)
{
if
(
mTextEventDispatcher
)
{
mTextEventDispatcher
-
>
OnDestroyWidget
(
)
;
}
ReleaseContentController
(
)
;
}
void
nsBaseWidget
:
:
MoveClient
(
const
DesktopPoint
&
aOffset
)
{
LayoutDeviceIntPoint
clientOffset
(
GetClientOffset
(
)
)
;
if
(
BoundsUseDesktopPixels
(
)
)
{
DesktopPoint
desktopOffset
=
clientOffset
/
GetDesktopToDeviceScale
(
)
;
Move
(
aOffset
.
x
-
desktopOffset
.
x
aOffset
.
y
-
desktopOffset
.
y
)
;
}
else
{
LayoutDevicePoint
layoutOffset
=
aOffset
*
GetDesktopToDeviceScale
(
)
;
Move
(
layoutOffset
.
x
-
clientOffset
.
x
layoutOffset
.
y
-
clientOffset
.
y
)
;
}
}
void
nsBaseWidget
:
:
ResizeClient
(
const
DesktopSize
&
aSize
bool
aRepaint
)
{
NS_ASSERTION
(
(
aSize
.
width
>
=
0
)
"
Negative
width
passed
to
ResizeClient
"
)
;
NS_ASSERTION
(
(
aSize
.
height
>
=
0
)
"
Negative
height
passed
to
ResizeClient
"
)
;
LayoutDeviceIntRect
bounds
=
GetBounds
(
)
;
LayoutDeviceIntRect
clientBounds
=
GetClientBounds
(
)
;
if
(
BoundsUseDesktopPixels
(
)
)
{
DesktopSize
desktopDelta
=
(
LayoutDeviceIntSize
(
bounds
.
Width
(
)
bounds
.
Height
(
)
)
-
clientBounds
.
Size
(
)
)
/
GetDesktopToDeviceScale
(
)
;
Resize
(
aSize
.
width
+
desktopDelta
.
width
aSize
.
height
+
desktopDelta
.
height
aRepaint
)
;
}
else
{
LayoutDeviceSize
layoutSize
=
aSize
*
GetDesktopToDeviceScale
(
)
;
Resize
(
bounds
.
Width
(
)
+
(
layoutSize
.
width
-
clientBounds
.
Width
(
)
)
bounds
.
Height
(
)
+
(
layoutSize
.
height
-
clientBounds
.
Height
(
)
)
aRepaint
)
;
}
}
void
nsBaseWidget
:
:
ResizeClient
(
const
DesktopRect
&
aRect
bool
aRepaint
)
{
NS_ASSERTION
(
(
aRect
.
Width
(
)
>
=
0
)
"
Negative
width
passed
to
ResizeClient
"
)
;
NS_ASSERTION
(
(
aRect
.
Height
(
)
>
=
0
)
"
Negative
height
passed
to
ResizeClient
"
)
;
LayoutDeviceIntRect
bounds
=
GetBounds
(
)
;
LayoutDeviceIntRect
clientBounds
=
GetClientBounds
(
)
;
LayoutDeviceIntPoint
clientOffset
=
GetClientOffset
(
)
;
DesktopToLayoutDeviceScale
scale
=
GetDesktopToDeviceScale
(
)
;
if
(
BoundsUseDesktopPixels
(
)
)
{
DesktopPoint
desktopOffset
=
clientOffset
/
scale
;
DesktopSize
desktopDelta
=
(
LayoutDeviceIntSize
(
bounds
.
Width
(
)
bounds
.
Height
(
)
)
-
clientBounds
.
Size
(
)
)
/
scale
;
Resize
(
aRect
.
X
(
)
-
desktopOffset
.
x
aRect
.
Y
(
)
-
desktopOffset
.
y
aRect
.
Width
(
)
+
desktopDelta
.
width
aRect
.
Height
(
)
+
desktopDelta
.
height
aRepaint
)
;
}
else
{
LayoutDeviceRect
layoutRect
=
aRect
*
scale
;
Resize
(
layoutRect
.
X
(
)
-
clientOffset
.
x
layoutRect
.
Y
(
)
-
clientOffset
.
y
layoutRect
.
Width
(
)
+
bounds
.
Width
(
)
-
clientBounds
.
Width
(
)
layoutRect
.
Height
(
)
+
bounds
.
Height
(
)
-
clientBounds
.
Height
(
)
aRepaint
)
;
}
}
LayoutDeviceIntRect
nsBaseWidget
:
:
GetClientBounds
(
)
{
return
GetBounds
(
)
;
}
LayoutDeviceIntRect
nsBaseWidget
:
:
GetBounds
(
)
{
return
mBounds
;
}
LayoutDeviceIntRect
nsBaseWidget
:
:
GetScreenBounds
(
)
{
return
GetBounds
(
)
;
}
nsresult
nsBaseWidget
:
:
GetRestoredBounds
(
LayoutDeviceIntRect
&
aRect
)
{
if
(
SizeMode
(
)
!
=
nsSizeMode_Normal
)
{
return
NS_ERROR_FAILURE
;
}
aRect
=
GetScreenBounds
(
)
;
return
NS_OK
;
}
LayoutDeviceIntPoint
nsBaseWidget
:
:
GetClientOffset
(
)
{
return
LayoutDeviceIntPoint
(
0
0
)
;
}
nsresult
nsBaseWidget
:
:
SetNonClientMargins
(
LayoutDeviceIntMargin
&
margins
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
uint32_t
nsBaseWidget
:
:
GetMaxTouchPoints
(
)
const
{
return
0
;
}
bool
nsBaseWidget
:
:
HasPendingInputEvent
(
)
{
return
false
;
}
bool
nsBaseWidget
:
:
ShowsResizeIndicator
(
LayoutDeviceIntRect
*
aResizerRect
)
{
return
false
;
}
static
bool
ResolveIconNameHelper
(
nsIFile
*
aFile
const
nsAString
&
aIconName
const
nsAString
&
aIconSuffix
)
{
aFile
-
>
Append
(
NS_LITERAL_STRING
(
"
icons
"
)
)
;
aFile
-
>
Append
(
NS_LITERAL_STRING
(
"
default
"
)
)
;
aFile
-
>
Append
(
aIconName
+
aIconSuffix
)
;
bool
readable
;
return
NS_SUCCEEDED
(
aFile
-
>
IsReadable
(
&
readable
)
)
&
&
readable
;
}
void
nsBaseWidget
:
:
ResolveIconName
(
const
nsAString
&
aIconName
const
nsAString
&
aIconSuffix
nsIFile
*
*
aResult
)
{
*
aResult
=
nullptr
;
nsCOMPtr
<
nsIProperties
>
dirSvc
=
do_GetService
(
NS_DIRECTORY_SERVICE_CONTRACTID
)
;
if
(
!
dirSvc
)
return
;
nsCOMPtr
<
nsISimpleEnumerator
>
dirs
;
dirSvc
-
>
Get
(
NS_APP_CHROME_DIR_LIST
NS_GET_IID
(
nsISimpleEnumerator
)
getter_AddRefs
(
dirs
)
)
;
if
(
dirs
)
{
bool
hasMore
;
while
(
NS_SUCCEEDED
(
dirs
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
nsCOMPtr
<
nsISupports
>
element
;
dirs
-
>
GetNext
(
getter_AddRefs
(
element
)
)
;
if
(
!
element
)
continue
;
nsCOMPtr
<
nsIFile
>
file
=
do_QueryInterface
(
element
)
;
if
(
!
file
)
continue
;
if
(
ResolveIconNameHelper
(
file
aIconName
aIconSuffix
)
)
{
NS_ADDREF
(
*
aResult
=
file
)
;
return
;
}
}
}
nsCOMPtr
<
nsIFile
>
file
;
dirSvc
-
>
Get
(
NS_APP_CHROME_DIR
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
file
)
)
;
if
(
file
&
&
ResolveIconNameHelper
(
file
aIconName
aIconSuffix
)
)
NS_ADDREF
(
*
aResult
=
file
)
;
}
void
nsBaseWidget
:
:
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
{
mSizeConstraints
=
aConstraints
;
if
(
mWindowType
=
=
eWindowType_popup
)
{
return
;
}
LayoutDeviceIntSize
curSize
=
mBounds
.
Size
(
)
;
LayoutDeviceIntSize
clampedSize
=
Max
(
aConstraints
.
mMinSize
Min
(
aConstraints
.
mMaxSize
curSize
)
)
;
if
(
clampedSize
!
=
curSize
)
{
gfx
:
:
Size
size
;
if
(
BoundsUseDesktopPixels
(
)
)
{
DesktopSize
desktopSize
=
clampedSize
/
GetDesktopToDeviceScale
(
)
;
size
=
desktopSize
.
ToUnknownSize
(
)
;
}
else
{
size
=
gfx
:
:
Size
(
clampedSize
.
ToUnknownSize
(
)
)
;
}
Resize
(
size
.
width
size
.
height
true
)
;
}
}
const
widget
:
:
SizeConstraints
nsBaseWidget
:
:
GetSizeConstraints
(
)
{
return
mSizeConstraints
;
}
nsIRollupListener
*
nsBaseWidget
:
:
GetActiveRollupListener
(
)
{
if
(
gRollupListener
)
return
gRollupListener
;
return
nsXULPopupManager
:
:
GetInstance
(
)
;
}
void
nsBaseWidget
:
:
NotifyWindowDestroyed
(
)
{
if
(
!
mWidgetListener
)
return
;
nsCOMPtr
<
nsIAppWindow
>
window
=
mWidgetListener
-
>
GetAppWindow
(
)
;
nsCOMPtr
<
nsIBaseWindow
>
appWindow
(
do_QueryInterface
(
window
)
)
;
if
(
appWindow
)
{
appWindow
-
>
Destroy
(
)
;
}
}
void
nsBaseWidget
:
:
NotifyWindowMoved
(
int32_t
aX
int32_t
aY
)
{
if
(
mWidgetListener
)
{
mWidgetListener
-
>
WindowMoved
(
this
aX
aY
)
;
}
if
(
mIMEHasFocus
&
&
IMENotificationRequestsRef
(
)
.
WantPositionChanged
(
)
)
{
NotifyIME
(
IMENotification
(
IMEMessage
:
:
NOTIFY_IME_OF_POSITION_CHANGE
)
)
;
}
}
void
nsBaseWidget
:
:
NotifySizeMoveDone
(
)
{
if
(
!
mWidgetListener
)
{
return
;
}
if
(
PresShell
*
presShell
=
mWidgetListener
-
>
GetPresShell
(
)
)
{
presShell
-
>
WindowSizeMoveDone
(
)
;
}
}
void
nsBaseWidget
:
:
NotifySysColorChanged
(
)
{
if
(
!
mWidgetListener
)
{
return
;
}
if
(
PresShell
*
presShell
=
mWidgetListener
-
>
GetPresShell
(
)
)
{
presShell
-
>
SysColorChanged
(
)
;
}
}
void
nsBaseWidget
:
:
NotifyThemeChanged
(
)
{
if
(
!
mWidgetListener
)
{
return
;
}
if
(
PresShell
*
presShell
=
mWidgetListener
-
>
GetPresShell
(
)
)
{
presShell
-
>
ThemeChanged
(
)
;
}
}
void
nsBaseWidget
:
:
NotifyUIStateChanged
(
UIStateChangeType
aShowFocusRings
)
{
if
(
Document
*
doc
=
GetDocument
(
)
)
{
if
(
nsPIDOMWindowOuter
*
win
=
doc
-
>
GetWindow
(
)
)
{
win
-
>
SetKeyboardIndicators
(
aShowFocusRings
)
;
}
}
}
nsresult
nsBaseWidget
:
:
NotifyIME
(
const
IMENotification
&
aIMENotification
)
{
if
(
mIMEHasQuit
)
{
return
NS_OK
;
}
switch
(
aIMENotification
.
mMessage
)
{
case
REQUEST_TO_COMMIT_COMPOSITION
:
case
REQUEST_TO_CANCEL_COMPOSITION
:
if
(
mTextEventDispatcher
&
&
mTextEventDispatcher
-
>
IsComposing
(
)
)
{
return
mTextEventDispatcher
-
>
NotifyIME
(
aIMENotification
)
;
}
return
NS_OK
;
default
:
{
if
(
aIMENotification
.
mMessage
=
=
NOTIFY_IME_OF_FOCUS
)
{
mIMEHasFocus
=
true
;
}
EnsureTextEventDispatcher
(
)
;
nsresult
rv
=
mTextEventDispatcher
-
>
NotifyIME
(
aIMENotification
)
;
if
(
aIMENotification
.
mMessage
=
=
NOTIFY_IME_OF_BLUR
)
{
mIMEHasFocus
=
false
;
}
return
rv
;
}
}
}
void
nsBaseWidget
:
:
EnsureTextEventDispatcher
(
)
{
if
(
mTextEventDispatcher
)
{
return
;
}
mTextEventDispatcher
=
new
TextEventDispatcher
(
this
)
;
}
nsIWidget
:
:
NativeIMEContext
nsBaseWidget
:
:
GetNativeIMEContext
(
)
{
if
(
mTextEventDispatcher
&
&
mTextEventDispatcher
-
>
GetPseudoIMEContext
(
)
)
{
NativeIMEContext
pseudoIMEContext
;
pseudoIMEContext
.
InitWithRawNativeIMEContext
(
mTextEventDispatcher
-
>
GetPseudoIMEContext
(
)
)
;
return
pseudoIMEContext
;
}
return
NativeIMEContext
(
this
)
;
}
nsIWidget
:
:
TextEventDispatcher
*
nsBaseWidget
:
:
GetTextEventDispatcher
(
)
{
EnsureTextEventDispatcher
(
)
;
return
mTextEventDispatcher
;
}
void
*
nsBaseWidget
:
:
GetPseudoIMEContext
(
)
{
TextEventDispatcher
*
dispatcher
=
GetTextEventDispatcher
(
)
;
if
(
!
dispatcher
)
{
return
nullptr
;
}
return
dispatcher
-
>
GetPseudoIMEContext
(
)
;
}
TextEventDispatcherListener
*
nsBaseWidget
:
:
GetNativeTextEventDispatcherListener
(
)
{
return
nullptr
;
}
void
nsBaseWidget
:
:
ZoomToRect
(
const
uint32_t
&
aPresShellId
const
ScrollableLayerGuid
:
:
ViewID
&
aViewId
const
CSSRect
&
aRect
const
uint32_t
&
aFlags
)
{
if
(
!
mCompositorSession
|
|
!
mAPZC
)
{
return
;
}
LayersId
layerId
=
mCompositorSession
-
>
RootLayerTreeId
(
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScrollableLayerGuid
CSSRect
uint32_t
>
(
"
layers
:
:
IAPZCTreeManager
:
:
ZoomToRect
"
mAPZC
&
IAPZCTreeManager
:
:
ZoomToRect
ScrollableLayerGuid
(
layerId
aPresShellId
aViewId
)
aRect
aFlags
)
)
;
}
#
ifdef
ACCESSIBILITY
a11y
:
:
Accessible
*
nsBaseWidget
:
:
GetRootAccessible
(
)
{
NS_ENSURE_TRUE
(
mWidgetListener
nullptr
)
;
PresShell
*
presShell
=
mWidgetListener
-
>
GetPresShell
(
)
;
NS_ENSURE_TRUE
(
presShell
nullptr
)
;
nsPresContext
*
presContext
=
presShell
-
>
GetPresContext
(
)
;
NS_ENSURE_TRUE
(
presContext
-
>
GetContainerWeak
(
)
nullptr
)
;
nsAccessibilityService
*
accService
=
GetOrCreateAccService
(
)
;
if
(
accService
)
{
return
accService
-
>
GetRootDocumentAccessible
(
presShell
nsContentUtils
:
:
IsSafeToRunScript
(
)
)
;
}
return
nullptr
;
}
#
endif
void
nsBaseWidget
:
:
StartAsyncScrollbarDrag
(
const
AsyncDragMetrics
&
aDragMetrics
)
{
if
(
!
AsyncPanZoomEnabled
(
)
)
{
return
;
}
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
mCompositorSession
)
;
LayersId
layersId
=
mCompositorSession
-
>
RootLayerTreeId
(
)
;
ScrollableLayerGuid
guid
(
layersId
aDragMetrics
.
mPresShellId
aDragMetrics
.
mViewId
)
;
APZThreadUtils
:
:
RunOnControllerThread
(
NewRunnableMethod
<
ScrollableLayerGuid
AsyncDragMetrics
>
(
"
layers
:
:
IAPZCTreeManager
:
:
StartScrollbarDrag
"
mAPZC
&
IAPZCTreeManager
:
:
StartScrollbarDrag
guid
aDragMetrics
)
)
;
}
bool
nsBaseWidget
:
:
StartAsyncAutoscroll
(
const
ScreenPoint
&
aAnchorLocation
const
ScrollableLayerGuid
&
aGuid
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
AsyncPanZoomEnabled
(
)
)
;
return
mAPZC
-
>
StartAutoscroll
(
aGuid
aAnchorLocation
)
;
}
void
nsBaseWidget
:
:
StopAsyncAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
&
&
AsyncPanZoomEnabled
(
)
)
;
mAPZC
-
>
StopAutoscroll
(
aGuid
)
;
}
already_AddRefed
<
nsIScreen
>
nsBaseWidget
:
:
GetWidgetScreen
(
)
{
nsCOMPtr
<
nsIScreenManager
>
screenManager
;
screenManager
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
)
;
if
(
!
screenManager
)
{
return
nullptr
;
}
LayoutDeviceIntRect
bounds
=
GetScreenBounds
(
)
;
DesktopIntRect
deskBounds
=
RoundedToInt
(
bounds
/
GetDesktopToDeviceScale
(
)
)
;
nsCOMPtr
<
nsIScreen
>
screen
;
screenManager
-
>
ScreenForRect
(
deskBounds
.
X
(
)
deskBounds
.
Y
(
)
deskBounds
.
Width
(
)
deskBounds
.
Height
(
)
getter_AddRefs
(
screen
)
)
;
return
screen
.
forget
(
)
;
}
mozilla
:
:
DesktopToLayoutDeviceScale
nsBaseWidget
:
:
GetDesktopToDeviceScaleByScreen
(
)
{
return
(
nsView
:
:
GetViewFor
(
this
)
-
>
GetViewManager
(
)
-
>
GetDeviceContext
(
)
)
-
>
GetDesktopToDeviceScale
(
)
;
}
nsresult
nsIWidget
:
:
SynthesizeNativeTouchTap
(
LayoutDeviceIntPoint
aPoint
bool
aLongTap
nsIObserver
*
aObserver
)
{
AutoObserverNotifier
notifier
(
aObserver
"
touchtap
"
)
;
if
(
sPointerIdCounter
>
TOUCH_INJECT_MAX_POINTS
)
{
sPointerIdCounter
=
0
;
}
int
pointerId
=
sPointerIdCounter
;
sPointerIdCounter
+
+
;
nsresult
rv
=
SynthesizeNativeTouchPoint
(
pointerId
TOUCH_CONTACT
aPoint
1
.
0
90
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
!
aLongTap
)
{
return
SynthesizeNativeTouchPoint
(
pointerId
TOUCH_REMOVE
aPoint
0
0
nullptr
)
;
}
int
elapse
=
Preferences
:
:
GetInt
(
"
ui
.
click_hold_context_menus
.
delay
"
TOUCH_INJECT_LONG_TAP_DEFAULT_MSEC
)
;
if
(
!
mLongTapTimer
)
{
mLongTapTimer
=
NS_NewTimer
(
)
;
if
(
!
mLongTapTimer
)
{
SynthesizeNativeTouchPoint
(
pointerId
TOUCH_CANCEL
aPoint
0
0
nullptr
)
;
return
NS_ERROR_UNEXPECTED
;
}
int
timeout
=
elapse
;
if
(
timeout
>
TOUCH_INJECT_PUMP_TIMER_MSEC
)
{
timeout
=
TOUCH_INJECT_PUMP_TIMER_MSEC
;
}
mLongTapTimer
-
>
InitWithNamedFuncCallback
(
OnLongTapTimerCallback
this
timeout
nsITimer
:
:
TYPE_REPEATING_SLACK
"
nsIWidget
:
:
SynthesizeNativeTouchTap
"
)
;
}
if
(
mLongTapTouchPoint
)
{
SynthesizeNativeTouchPoint
(
mLongTapTouchPoint
-
>
mPointerId
TOUCH_CANCEL
mLongTapTouchPoint
-
>
mPosition
0
0
nullptr
)
;
}
mLongTapTouchPoint
=
MakeUnique
<
LongTapInfo
>
(
pointerId
aPoint
TimeDuration
:
:
FromMilliseconds
(
elapse
)
aObserver
)
;
notifier
.
SkipNotification
(
)
;
return
NS_OK
;
}
void
nsIWidget
:
:
OnLongTapTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
auto
*
self
=
static_cast
<
nsIWidget
*
>
(
aClosure
)
;
if
(
(
self
-
>
mLongTapTouchPoint
-
>
mStamp
+
self
-
>
mLongTapTouchPoint
-
>
mDuration
)
>
TimeStamp
:
:
Now
(
)
)
{
#
ifdef
XP_WIN
self
-
>
SynthesizeNativeTouchPoint
(
self
-
>
mLongTapTouchPoint
-
>
mPointerId
TOUCH_CONTACT
self
-
>
mLongTapTouchPoint
-
>
mPosition
1
.
0
90
nullptr
)
;
#
endif
return
;
}
AutoObserverNotifier
notifier
(
self
-
>
mLongTapTouchPoint
-
>
mObserver
"
touchtap
"
)
;
self
-
>
mLongTapTimer
-
>
Cancel
(
)
;
self
-
>
mLongTapTimer
=
nullptr
;
self
-
>
SynthesizeNativeTouchPoint
(
self
-
>
mLongTapTouchPoint
-
>
mPointerId
TOUCH_REMOVE
self
-
>
mLongTapTouchPoint
-
>
mPosition
0
0
nullptr
)
;
self
-
>
mLongTapTouchPoint
=
nullptr
;
}
nsresult
nsIWidget
:
:
ClearNativeTouchSequence
(
nsIObserver
*
aObserver
)
{
AutoObserverNotifier
notifier
(
aObserver
"
cleartouch
"
)
;
if
(
!
mLongTapTimer
)
{
return
NS_OK
;
}
mLongTapTimer
-
>
Cancel
(
)
;
mLongTapTimer
=
nullptr
;
SynthesizeNativeTouchPoint
(
mLongTapTouchPoint
-
>
mPointerId
TOUCH_CANCEL
mLongTapTouchPoint
-
>
mPosition
0
0
nullptr
)
;
mLongTapTouchPoint
=
nullptr
;
return
NS_OK
;
}
MultiTouchInput
nsBaseWidget
:
:
UpdateSynthesizedTouchState
(
MultiTouchInput
*
aState
uint32_t
aTime
mozilla
:
:
TimeStamp
aTimeStamp
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
)
{
ScreenIntPoint
pointerScreenPoint
=
ViewAs
<
ScreenPixel
>
(
aPoint
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
MultiTouchInput
inputToDispatch
;
inputToDispatch
.
mInputType
=
MULTITOUCH_INPUT
;
inputToDispatch
.
mTime
=
aTime
;
inputToDispatch
.
mTimeStamp
=
aTimeStamp
;
int32_t
index
=
aState
-
>
IndexOfTouch
(
(
int32_t
)
aPointerId
)
;
if
(
aPointerState
=
=
TOUCH_CONTACT
)
{
if
(
index
>
=
0
)
{
SingleTouchData
&
point
=
aState
-
>
mTouches
[
index
]
;
point
.
mScreenPoint
=
pointerScreenPoint
;
point
.
mRotationAngle
=
(
float
)
aPointerOrientation
;
point
.
mForce
=
(
float
)
aPointerPressure
;
inputToDispatch
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_MOVE
;
}
else
{
aState
-
>
mTouches
.
AppendElement
(
SingleTouchData
(
(
int32_t
)
aPointerId
pointerScreenPoint
ScreenSize
(
0
0
)
(
float
)
aPointerOrientation
(
float
)
aPointerPressure
)
)
;
inputToDispatch
.
mType
=
MultiTouchInput
:
:
MULTITOUCH_START
;
}
inputToDispatch
.
mTouches
=
aState
-
>
mTouches
;
}
else
{
MOZ_ASSERT
(
aPointerState
=
=
TOUCH_REMOVE
|
|
aPointerState
=
=
TOUCH_CANCEL
)
;
if
(
index
>
=
0
)
{
aState
-
>
mTouches
.
RemoveElementAt
(
index
)
;
}
inputToDispatch
.
mType
=
(
aPointerState
=
=
TOUCH_REMOVE
?
MultiTouchInput
:
:
MULTITOUCH_END
:
MultiTouchInput
:
:
MULTITOUCH_CANCEL
)
;
inputToDispatch
.
mTouches
.
AppendElement
(
SingleTouchData
(
(
int32_t
)
aPointerId
pointerScreenPoint
ScreenSize
(
0
0
)
(
float
)
aPointerOrientation
(
float
)
aPointerPressure
)
)
;
}
return
inputToDispatch
;
}
void
nsBaseWidget
:
:
NotifyLiveResizeStarted
(
)
{
NotifyLiveResizeStopped
(
)
;
MOZ_ASSERT
(
mLiveResizeListeners
.
IsEmpty
(
)
)
;
if
(
!
mWidgetListener
)
{
return
;
}
nsCOMPtr
<
nsIAppWindow
>
appWindow
=
mWidgetListener
-
>
GetAppWindow
(
)
;
if
(
!
appWindow
)
{
return
;
}
mLiveResizeListeners
=
appWindow
-
>
GetLiveResizeListeners
(
)
;
for
(
uint32_t
i
=
0
;
i
<
mLiveResizeListeners
.
Length
(
)
;
i
+
+
)
{
mLiveResizeListeners
[
i
]
-
>
LiveResizeStarted
(
)
;
}
}
void
nsBaseWidget
:
:
NotifyLiveResizeStopped
(
)
{
if
(
!
mLiveResizeListeners
.
IsEmpty
(
)
)
{
for
(
uint32_t
i
=
0
;
i
<
mLiveResizeListeners
.
Length
(
)
;
i
+
+
)
{
mLiveResizeListeners
[
i
]
-
>
LiveResizeStopped
(
)
;
}
mLiveResizeListeners
.
Clear
(
)
;
}
}
void
nsBaseWidget
:
:
RegisterPluginWindowForRemoteUpdates
(
)
{
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
MOZ_WIDGET_GTK
)
MOZ_ASSERT_UNREACHABLE
(
"
nsBaseWidget
:
:
RegisterPluginWindowForRemoteUpdates
"
"
not
implemented
!
"
)
;
return
;
#
else
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
void
*
id
=
GetNativeData
(
NS_NATIVE_PLUGIN_ID
)
;
if
(
!
id
)
{
NS_WARNING
(
"
This
is
not
a
valid
native
widget
!
"
)
;
return
;
}
MOZ_ASSERT
(
sPluginWidgetList
)
;
sPluginWidgetList
-
>
Put
(
id
RefPtr
{
this
}
)
;
#
endif
}
void
nsBaseWidget
:
:
UnregisterPluginWindowForRemoteUpdates
(
)
{
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
MOZ_WIDGET_GTK
)
MOZ_ASSERT_UNREACHABLE
(
"
nsBaseWidget
:
:
UnregisterPluginWindowForRemoteUpdates
"
"
not
implemented
!
"
)
;
return
;
#
else
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
void
*
id
=
GetNativeData
(
NS_NATIVE_PLUGIN_ID
)
;
if
(
!
id
)
{
NS_WARNING
(
"
This
is
not
a
valid
native
widget
!
"
)
;
return
;
}
MOZ_ASSERT
(
sPluginWidgetList
)
;
sPluginWidgetList
-
>
Remove
(
id
)
;
#
endif
}
nsresult
nsBaseWidget
:
:
AsyncEnableDragDrop
(
bool
aEnable
)
{
RefPtr
<
nsBaseWidget
>
kungFuDeathGrip
=
this
;
return
NS_DispatchToCurrentThreadQueue
(
NS_NewRunnableFunction
(
"
AsyncEnableDragDropFn
"
[
this
aEnable
kungFuDeathGrip
]
(
)
{
EnableDragDrop
(
aEnable
)
;
}
)
kAsyncDragDropTimeout
EventQueuePriority
:
:
Idle
)
;
}
nsIWidget
*
nsIWidget
:
:
LookupRegisteredPluginWindow
(
uintptr_t
aWindowID
)
{
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
MOZ_WIDGET_GTK
)
MOZ_ASSERT_UNREACHABLE
(
"
nsBaseWidget
:
:
LookupRegisteredPluginWindow
"
"
not
implemented
!
"
)
;
return
nullptr
;
#
else
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sPluginWidgetList
)
;
return
sPluginWidgetList
-
>
GetWeak
(
(
void
*
)
aWindowID
)
;
#
endif
}
void
nsIWidget
:
:
UpdateRegisteredPluginWindowVisibility
(
uintptr_t
aOwnerWidget
nsTArray
<
uintptr_t
>
&
aPluginIds
)
{
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
MOZ_WIDGET_GTK
)
MOZ_ASSERT_UNREACHABLE
(
"
nsBaseWidget
:
:
UpdateRegisteredPluginWindowVisibility
"
"
not
implemented
!
"
)
;
return
;
#
else
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sPluginWidgetList
)
;
for
(
auto
iter
=
sPluginWidgetList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
void
*
windowId
=
iter
.
Key
(
)
;
nsIWidget
*
widget
=
iter
.
UserData
(
)
;
MOZ_ASSERT
(
windowId
)
;
MOZ_ASSERT
(
widget
)
;
if
(
!
widget
-
>
Destroyed
(
)
)
{
if
(
(
uintptr_t
)
widget
-
>
GetParent
(
)
=
=
aOwnerWidget
)
{
widget
-
>
Show
(
aPluginIds
.
Contains
(
(
uintptr_t
)
windowId
)
)
;
}
}
}
#
endif
}
#
if
defined
(
XP_WIN
)
void
nsIWidget
:
:
CaptureRegisteredPlugins
(
uintptr_t
aOwnerWidget
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
sPluginWidgetList
)
;
for
(
auto
iter
=
sPluginWidgetList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
DebugOnly
<
const
void
*
>
windowId
=
iter
.
Key
(
)
;
nsIWidget
*
widget
=
iter
.
UserData
(
)
;
MOZ_ASSERT
(
windowId
)
;
MOZ_ASSERT
(
widget
)
;
if
(
!
widget
-
>
Destroyed
(
)
&
&
widget
-
>
IsVisible
(
)
)
{
if
(
(
uintptr_t
)
widget
-
>
GetParent
(
)
=
=
aOwnerWidget
)
{
widget
-
>
UpdateScrollCapture
(
)
;
}
}
}
}
uint64_t
nsBaseWidget
:
:
CreateScrollCaptureContainer
(
)
{
mScrollCaptureContainer
=
LayerManager
:
:
CreateImageContainer
(
ImageContainer
:
:
ASYNCHRONOUS
)
;
if
(
!
mScrollCaptureContainer
)
{
NS_WARNING
(
"
Failed
to
create
ImageContainer
for
widget
image
capture
.
"
)
;
return
ImageContainer
:
:
sInvalidAsyncContainerId
;
}
return
mScrollCaptureContainer
-
>
GetAsyncContainerHandle
(
)
.
Value
(
)
;
}
void
nsBaseWidget
:
:
UpdateScrollCapture
(
)
{
if
(
!
mScrollCaptureContainer
|
|
mBounds
.
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
gfx
:
:
SourceSurface
>
snapshot
=
CreateScrollSnapshot
(
)
;
if
(
!
snapshot
)
{
return
;
}
ImageContainer
:
:
NonOwningImage
holder
(
new
SourceSurfaceImage
(
snapshot
)
)
;
AutoTArray
<
ImageContainer
:
:
NonOwningImage
1
>
imageList
;
imageList
.
AppendElement
(
holder
)
;
mScrollCaptureContainer
-
>
SetCurrentImages
(
imageList
)
;
}
void
nsBaseWidget
:
:
DefaultFillScrollCapture
(
DrawTarget
*
aSnapshotDrawTarget
)
{
gfx
:
:
IntSize
dtSize
=
aSnapshotDrawTarget
-
>
GetSize
(
)
;
aSnapshotDrawTarget
-
>
FillRect
(
gfx
:
:
Rect
(
0
0
dtSize
.
width
dtSize
.
height
)
gfx
:
:
ColorPattern
(
gfx
:
:
ToDeviceColor
(
kScrollCaptureFillColor
)
)
gfx
:
:
DrawOptions
(
1
.
f
gfx
:
:
CompositionOp
:
:
OP_SOURCE
)
)
;
aSnapshotDrawTarget
-
>
Flush
(
)
;
}
#
endif
const
IMENotificationRequests
&
nsIWidget
:
:
IMENotificationRequestsRef
(
)
{
TextEventDispatcher
*
dispatcher
=
GetTextEventDispatcher
(
)
;
return
dispatcher
-
>
IMENotificationRequestsRef
(
)
;
}
nsresult
nsIWidget
:
:
OnWindowedPluginKeyEvent
(
const
NativeEventData
&
aKeyEventData
nsIKeyEventInPluginCallback
*
aCallback
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
nsIWidget
:
:
PostHandleKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
*
aEvent
)
{
}
bool
nsIWidget
:
:
GetEditCommands
(
nsIWidget
:
:
NativeKeyBindingsType
aType
const
WidgetKeyboardEvent
&
aEvent
nsTArray
<
CommandInt
>
&
aCommands
)
{
MOZ_ASSERT
(
aEvent
.
IsTrusted
(
)
)
;
MOZ_ASSERT
(
aCommands
.
IsEmpty
(
)
)
;
return
true
;
}
already_AddRefed
<
nsIBidiKeyboard
>
nsIWidget
:
:
CreateBidiKeyboard
(
)
{
if
(
XRE_IsContentProcess
(
)
)
{
return
CreateBidiKeyboardContentProcess
(
)
;
}
return
CreateBidiKeyboardInner
(
)
;
}
#
ifdef
ANDROID
already_AddRefed
<
nsIBidiKeyboard
>
nsIWidget
:
:
CreateBidiKeyboardInner
(
)
{
return
nullptr
;
}
#
endif
namespace
mozilla
:
:
widget
{
const
char
*
ToChar
(
InputContext
:
:
Origin
aOrigin
)
{
switch
(
aOrigin
)
{
case
InputContext
:
:
ORIGIN_MAIN
:
return
"
ORIGIN_MAIN
"
;
case
InputContext
:
:
ORIGIN_CONTENT
:
return
"
ORIGIN_CONTENT
"
;
default
:
return
"
Unexpected
value
"
;
}
}
const
char
*
ToChar
(
IMEMessage
aIMEMessage
)
{
switch
(
aIMEMessage
)
{
case
NOTIFY_IME_OF_NOTHING
:
return
"
NOTIFY_IME_OF_NOTHING
"
;
case
NOTIFY_IME_OF_FOCUS
:
return
"
NOTIFY_IME_OF_FOCUS
"
;
case
NOTIFY_IME_OF_BLUR
:
return
"
NOTIFY_IME_OF_BLUR
"
;
case
NOTIFY_IME_OF_SELECTION_CHANGE
:
return
"
NOTIFY_IME_OF_SELECTION_CHANGE
"
;
case
NOTIFY_IME_OF_TEXT_CHANGE
:
return
"
NOTIFY_IME_OF_TEXT_CHANGE
"
;
case
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
:
return
"
NOTIFY_IME_OF_COMPOSITION_EVENT_HANDLED
"
;
case
NOTIFY_IME_OF_POSITION_CHANGE
:
return
"
NOTIFY_IME_OF_POSITION_CHANGE
"
;
case
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
:
return
"
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
"
;
case
REQUEST_TO_COMMIT_COMPOSITION
:
return
"
REQUEST_TO_COMMIT_COMPOSITION
"
;
case
REQUEST_TO_CANCEL_COMPOSITION
:
return
"
REQUEST_TO_CANCEL_COMPOSITION
"
;
default
:
return
"
Unexpected
value
"
;
}
}
void
NativeIMEContext
:
:
Init
(
nsIWidget
*
aWidget
)
{
if
(
!
aWidget
)
{
mRawNativeIMEContext
=
reinterpret_cast
<
uintptr_t
>
(
nullptr
)
;
mOriginProcessID
=
static_cast
<
uint64_t
>
(
-
1
)
;
return
;
}
if
(
!
XRE_IsContentProcess
(
)
)
{
mRawNativeIMEContext
=
reinterpret_cast
<
uintptr_t
>
(
aWidget
-
>
GetNativeData
(
NS_RAW_NATIVE_IME_CONTEXT
)
)
;
mOriginProcessID
=
0
;
return
;
}
*
this
=
aWidget
-
>
GetNativeIMEContext
(
)
;
}
void
NativeIMEContext
:
:
InitWithRawNativeIMEContext
(
void
*
aRawNativeIMEContext
)
{
if
(
NS_WARN_IF
(
!
aRawNativeIMEContext
)
)
{
mRawNativeIMEContext
=
reinterpret_cast
<
uintptr_t
>
(
nullptr
)
;
mOriginProcessID
=
static_cast
<
uint64_t
>
(
-
1
)
;
return
;
}
mRawNativeIMEContext
=
reinterpret_cast
<
uintptr_t
>
(
aRawNativeIMEContext
)
;
mOriginProcessID
=
XRE_IsContentProcess
(
)
?
ContentChild
:
:
GetSingleton
(
)
-
>
GetID
(
)
:
0
;
}
void
IMENotification
:
:
TextChangeDataBase
:
:
MergeWith
(
const
IMENotification
:
:
TextChangeDataBase
&
aOther
)
{
MOZ_ASSERT
(
aOther
.
IsValid
(
)
"
Merging
data
must
store
valid
data
"
)
;
MOZ_ASSERT
(
aOther
.
mStartOffset
<
=
aOther
.
mRemovedEndOffset
"
end
of
removed
text
must
be
same
or
larger
than
start
"
)
;
MOZ_ASSERT
(
aOther
.
mStartOffset
<
=
aOther
.
mAddedEndOffset
"
end
of
added
text
must
be
same
or
larger
than
start
"
)
;
if
(
!
IsValid
(
)
)
{
*
this
=
aOther
;
return
;
}
const
TextChangeDataBase
&
newData
=
aOther
;
const
TextChangeDataBase
oldData
=
*
this
;
mCausedOnlyByComposition
=
newData
.
mCausedOnlyByComposition
&
&
oldData
.
mCausedOnlyByComposition
;
mIncludingChangesWithoutComposition
=
newData
.
mIncludingChangesWithoutComposition
|
|
oldData
.
mIncludingChangesWithoutComposition
;
if
(
!
newData
.
mCausedOnlyByComposition
&
&
!
newData
.
mIncludingChangesDuringComposition
)
{
MOZ_ASSERT
(
newData
.
mIncludingChangesWithoutComposition
)
;
MOZ_ASSERT
(
mIncludingChangesWithoutComposition
)
;
mIncludingChangesDuringComposition
=
false
;
}
else
{
mIncludingChangesDuringComposition
=
newData
.
mIncludingChangesDuringComposition
|
|
oldData
.
mIncludingChangesDuringComposition
;
}
if
(
newData
.
mStartOffset
>
=
oldData
.
mAddedEndOffset
)
{
mStartOffset
=
oldData
.
mStartOffset
;
uint32_t
newRemovedEndOffsetInOldText
=
newData
.
mRemovedEndOffset
-
oldData
.
Difference
(
)
;
mRemovedEndOffset
=
std
:
:
max
(
newRemovedEndOffsetInOldText
oldData
.
mRemovedEndOffset
)
;
mAddedEndOffset
=
newData
.
mAddedEndOffset
;
return
;
}
if
(
newData
.
mStartOffset
>
=
oldData
.
mStartOffset
)
{
mStartOffset
=
oldData
.
mStartOffset
;
if
(
newData
.
mRemovedEndOffset
>
=
oldData
.
mAddedEndOffset
)
{
uint32_t
newRemovedEndOffsetInOldText
=
newData
.
mRemovedEndOffset
-
oldData
.
Difference
(
)
;
mRemovedEndOffset
=
std
:
:
max
(
newRemovedEndOffsetInOldText
oldData
.
mRemovedEndOffset
)
;
mAddedEndOffset
=
newData
.
mAddedEndOffset
;
return
;
}
mRemovedEndOffset
=
oldData
.
mRemovedEndOffset
;
uint32_t
oldAddedEndOffsetInNewText
=
oldData
.
mAddedEndOffset
+
newData
.
Difference
(
)
;
mAddedEndOffset
=
std
:
:
max
(
newData
.
mAddedEndOffset
oldAddedEndOffsetInNewText
)
;
return
;
}
if
(
newData
.
mRemovedEndOffset
>
=
oldData
.
mStartOffset
)
{
MOZ_ASSERT
(
newData
.
mStartOffset
<
oldData
.
mStartOffset
"
new
start
offset
should
be
less
than
old
one
here
"
)
;
mStartOffset
=
newData
.
mStartOffset
;
if
(
newData
.
mRemovedEndOffset
>
=
oldData
.
mAddedEndOffset
)
{
uint32_t
newRemovedEndOffsetInOldText
=
newData
.
mRemovedEndOffset
-
oldData
.
Difference
(
)
;
mRemovedEndOffset
=
std
:
:
max
(
newRemovedEndOffsetInOldText
oldData
.
mRemovedEndOffset
)
;
mAddedEndOffset
=
newData
.
mAddedEndOffset
;
return
;
}
mRemovedEndOffset
=
oldData
.
mRemovedEndOffset
;
uint32_t
oldAddedEndOffsetInNewText
=
oldData
.
mAddedEndOffset
+
newData
.
Difference
(
)
;
mAddedEndOffset
=
std
:
:
max
(
newData
.
mAddedEndOffset
oldAddedEndOffsetInNewText
)
;
return
;
}
MOZ_ASSERT
(
newData
.
mStartOffset
<
oldData
.
mStartOffset
"
new
start
offset
should
be
less
than
old
one
here
"
)
;
mStartOffset
=
newData
.
mStartOffset
;
MOZ_ASSERT
(
newData
.
mRemovedEndOffset
<
oldData
.
mRemovedEndOffset
"
new
removed
end
offset
should
be
less
than
old
one
here
"
)
;
mRemovedEndOffset
=
oldData
.
mRemovedEndOffset
;
uint32_t
oldAddedEndOffsetInNewText
=
oldData
.
mAddedEndOffset
+
newData
.
Difference
(
)
;
mAddedEndOffset
=
std
:
:
max
(
newData
.
mAddedEndOffset
oldAddedEndOffsetInNewText
)
;
}
#
ifdef
DEBUG
void
IMENotification
:
:
TextChangeDataBase
:
:
Test
(
)
{
static
bool
gTestTextChangeEvent
=
true
;
if
(
!
gTestTextChangeEvent
)
{
return
;
}
gTestTextChangeEvent
=
false
;
MergeWith
(
TextChangeData
(
10
10
20
false
false
)
)
;
MergeWith
(
TextChangeData
(
20
20
35
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
1
-
1
-
1
:
mStartOffset
should
be
the
first
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
10
"
Test
1
-
1
-
2
:
mRemovedEndOffset
should
be
the
first
end
of
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
35
"
Test
1
-
1
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
10
20
10
false
false
)
)
;
MergeWith
(
TextChangeData
(
10
30
10
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
1
-
2
-
1
:
mStartOffset
should
be
the
first
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
40
"
Test
1
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
with
already
removed
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
10
"
Test
1
-
2
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
10
20
10
false
false
)
)
;
MergeWith
(
TextChangeData
(
10
15
10
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
1
-
3
-
1
:
mStartOffset
should
be
the
first
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
25
"
Test
1
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
with
already
removed
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
10
"
Test
1
-
3
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
10
10
20
false
false
)
)
;
MergeWith
(
TextChangeData
(
55
55
60
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
1
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
45
"
Test
1
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
without
already
added
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
60
"
Test
1
-
4
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
10
20
10
false
false
)
)
;
MergeWith
(
TextChangeData
(
55
68
55
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
1
-
5
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
78
"
Test
1
-
5
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
with
already
removed
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
55
"
Test
1
-
5
-
3
:
mAddedEndOffset
should
be
the
largest
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
35
32
false
false
)
)
;
MergeWith
(
TextChangeData
(
32
32
40
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
30
"
Test
1
-
6
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
35
"
Test
1
-
6
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
40
"
Test
1
-
6
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
35
32
false
false
)
)
;
MergeWith
(
TextChangeData
(
32
32
33
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
30
"
Test
1
-
7
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
35
"
Test
1
-
7
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
33
"
Test
1
-
7
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
35
30
false
false
)
)
;
MergeWith
(
TextChangeData
(
32
34
48
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
30
"
Test
1
-
8
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
39
"
Test
1
-
8
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
"
"
removed
text
"
"
without
already
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
48
"
Test
1
-
8
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
35
30
false
false
)
)
;
MergeWith
(
TextChangeData
(
32
38
36
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
30
"
Test
1
-
9
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
43
"
Test
1
-
9
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
"
"
removed
text
"
"
without
already
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
36
"
Test
1
-
9
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
50
55
false
false
)
)
;
MergeWith
(
TextChangeData
(
53
60
54
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
50
"
Test
2
-
1
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
55
"
Test
2
-
1
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
54
"
Test
2
-
1
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
50
55
false
false
)
)
;
MergeWith
(
TextChangeData
(
54
62
68
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
50
"
Test
2
-
2
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
57
"
Test
2
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
68
"
Test
2
-
2
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
36
48
45
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
50
49
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
36
"
Test
2
-
3
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
53
"
Test
2
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
removed
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
49
"
Test
2
-
3
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
36
52
53
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
68
61
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
36
"
Test
2
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
67
"
Test
2
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
61
"
Test
2
-
4
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
10
10
20
false
false
)
)
;
MergeWith
(
TextChangeData
(
15
15
30
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
3
-
1
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
10
"
Test
3
-
1
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
"
"
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
35
"
Test
3
-
1
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
50
55
false
false
)
)
;
MergeWith
(
TextChangeData
(
52
53
56
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
50
"
Test
3
-
2
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
50
"
Test
3
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
"
"
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
58
"
Test
3
-
2
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
36
48
45
false
false
)
)
;
MergeWith
(
TextChangeData
(
37
38
50
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
36
"
Test
3
-
3
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
48
"
Test
3
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
"
"
removed
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
57
"
Test
3
-
3
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
32
48
53
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
50
52
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
32
"
Test
3
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
48
"
Test
3
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
55
"
Test
3
-
4
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
36
48
50
false
false
)
)
;
MergeWith
(
TextChangeData
(
37
49
47
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
36
"
Test
3
-
5
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
48
"
Test
3
-
5
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
48
"
Test
3
-
5
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
32
48
53
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
50
47
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
32
"
Test
3
-
6
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
48
"
Test
3
-
6
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
50
"
Test
3
-
6
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
50
55
false
false
)
)
;
MergeWith
(
TextChangeData
(
44
66
68
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
44
"
Test
4
-
1
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
61
"
Test
4
-
1
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
68
"
Test
4
-
1
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
62
50
false
false
)
)
;
MergeWith
(
TextChangeData
(
44
66
68
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
44
"
Test
4
-
2
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
78
"
Test
4
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
removed
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
68
"
Test
4
-
2
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
62
60
false
false
)
)
;
MergeWith
(
TextChangeData
(
49
128
130
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
49
"
Test
4
-
3
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
130
"
Test
4
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
without
already
removed
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
130
"
Test
4
-
3
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
61
73
false
false
)
)
;
MergeWith
(
TextChangeData
(
44
100
50
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
44
"
Test
4
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
88
"
Test
4
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
last
end
of
"
"
removed
text
"
"
with
already
added
text
length
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
50
"
Test
4
-
4
-
3
:
mAddedEndOffset
should
be
the
last
end
of
added
text
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
50
55
false
false
)
)
;
MergeWith
(
TextChangeData
(
48
52
49
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
48
"
Test
5
-
1
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
50
"
Test
5
-
1
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
52
"
Test
5
-
1
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
60
58
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
50
48
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
43
"
Test
5
-
2
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
60
"
Test
5
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
56
"
Test
5
-
2
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
60
68
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
55
53
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
43
"
Test
5
-
3
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
60
"
Test
5
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
66
"
Test
5
-
3
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
60
58
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
50
128
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
43
"
Test
5
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
60
"
Test
5
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
136
"
Test
5
-
4
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
60
68
false
false
)
)
;
MergeWith
(
TextChangeData
(
43
55
65
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
43
"
Test
5
-
5
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
60
"
Test
5
-
5
-
2
:
mRemovedEndOffset
should
be
the
the
first
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
78
"
Test
5
-
5
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
30
45
false
false
)
)
;
MergeWith
(
TextChangeData
(
10
10
20
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
6
-
1
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
30
"
Test
6
-
1
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
55
"
Test
6
-
1
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
added
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
30
35
30
false
false
)
)
;
MergeWith
(
TextChangeData
(
10
25
10
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
10
"
Test
6
-
2
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
35
"
Test
6
-
2
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
15
"
Test
6
-
2
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
text
with
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
65
70
false
false
)
)
;
MergeWith
(
TextChangeData
(
13
24
15
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
13
"
Test
6
-
3
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
65
"
Test
6
-
3
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
61
"
Test
6
-
3
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
MergeWith
(
TextChangeData
(
50
65
70
false
false
)
)
;
MergeWith
(
TextChangeData
(
13
24
36
false
false
)
)
;
MOZ_ASSERT
(
mStartOffset
=
=
13
"
Test
6
-
4
-
1
:
mStartOffset
should
be
the
smallest
offset
"
)
;
MOZ_ASSERT
(
mRemovedEndOffset
=
=
65
"
Test
6
-
4
-
2
:
mRemovedEndOffset
should
be
the
the
largest
end
of
removed
"
"
text
"
)
;
MOZ_ASSERT
(
mAddedEndOffset
=
=
82
"
Test
6
-
4
-
3
:
mAddedEndOffset
should
be
the
first
end
of
added
"
"
text
without
"
"
removed
text
length
by
the
new
change
"
)
;
Clear
(
)
;
}
#
endif
}
#
ifdef
DEBUG
nsAutoString
nsBaseWidget
:
:
debug_GuiEventToString
(
WidgetGUIEvent
*
aGuiEvent
)
{
NS_ASSERTION
(
nullptr
!
=
aGuiEvent
"
cmon
null
gui
event
.
"
)
;
nsAutoString
eventName
(
NS_LITERAL_STRING
(
"
UNKNOWN
"
)
)
;
#
define
_ASSIGN_eventName
(
_value
_name
)
\
case
_value
:
\
eventName
.
AssignLiteral
(
_name
)
;
\
break
switch
(
aGuiEvent
-
>
mMessage
)
{
_ASSIGN_eventName
(
eBlur
"
eBlur
"
)
;
_ASSIGN_eventName
(
eDrop
"
eDrop
"
)
;
_ASSIGN_eventName
(
eDragEnter
"
eDragEnter
"
)
;
_ASSIGN_eventName
(
eDragExit
"
eDragExit
"
)
;
_ASSIGN_eventName
(
eDragOver
"
eDragOver
"
)
;
_ASSIGN_eventName
(
eEditorInput
"
eEditorInput
"
)
;
_ASSIGN_eventName
(
eFocus
"
eFocus
"
)
;
_ASSIGN_eventName
(
eFocusIn
"
eFocusIn
"
)
;
_ASSIGN_eventName
(
eFocusOut
"
eFocusOut
"
)
;
_ASSIGN_eventName
(
eFormSelect
"
eFormSelect
"
)
;
_ASSIGN_eventName
(
eFormChange
"
eFormChange
"
)
;
_ASSIGN_eventName
(
eFormReset
"
eFormReset
"
)
;
_ASSIGN_eventName
(
eFormSubmit
"
eFormSubmit
"
)
;
_ASSIGN_eventName
(
eImageAbort
"
eImageAbort
"
)
;
_ASSIGN_eventName
(
eLoadError
"
eLoadError
"
)
;
_ASSIGN_eventName
(
eKeyDown
"
eKeyDown
"
)
;
_ASSIGN_eventName
(
eKeyPress
"
eKeyPress
"
)
;
_ASSIGN_eventName
(
eKeyUp
"
eKeyUp
"
)
;
_ASSIGN_eventName
(
eMouseEnterIntoWidget
"
eMouseEnterIntoWidget
"
)
;
_ASSIGN_eventName
(
eMouseExitFromWidget
"
eMouseExitFromWidget
"
)
;
_ASSIGN_eventName
(
eMouseDown
"
eMouseDown
"
)
;
_ASSIGN_eventName
(
eMouseUp
"
eMouseUp
"
)
;
_ASSIGN_eventName
(
eMouseClick
"
eMouseClick
"
)
;
_ASSIGN_eventName
(
eMouseAuxClick
"
eMouseAuxClick
"
)
;
_ASSIGN_eventName
(
eMouseDoubleClick
"
eMouseDoubleClick
"
)
;
_ASSIGN_eventName
(
eMouseMove
"
eMouseMove
"
)
;
_ASSIGN_eventName
(
eLoad
"
eLoad
"
)
;
_ASSIGN_eventName
(
ePopState
"
ePopState
"
)
;
_ASSIGN_eventName
(
eBeforeScriptExecute
"
eBeforeScriptExecute
"
)
;
_ASSIGN_eventName
(
eAfterScriptExecute
"
eAfterScriptExecute
"
)
;
_ASSIGN_eventName
(
eUnload
"
eUnload
"
)
;
_ASSIGN_eventName
(
eHashChange
"
eHashChange
"
)
;
_ASSIGN_eventName
(
eReadyStateChange
"
eReadyStateChange
"
)
;
_ASSIGN_eventName
(
eXULBroadcast
"
eXULBroadcast
"
)
;
_ASSIGN_eventName
(
eXULCommandUpdate
"
eXULCommandUpdate
"
)
;
#
undef
_ASSIGN_eventName
default
:
{
eventName
.
AssignLiteral
(
"
UNKNOWN
:
"
)
;
eventName
.
AppendInt
(
aGuiEvent
-
>
mMessage
)
;
}
break
;
}
return
nsAutoString
(
eventName
)
;
}
struct
PrefPair
{
const
char
*
name
;
bool
value
;
}
;
static
PrefPair
debug_PrefValues
[
]
=
{
{
"
nglayout
.
debug
.
crossing_event_dumping
"
false
}
{
"
nglayout
.
debug
.
event_dumping
"
false
}
{
"
nglayout
.
debug
.
invalidate_dumping
"
false
}
{
"
nglayout
.
debug
.
motion_event_dumping
"
false
}
{
"
nglayout
.
debug
.
paint_dumping
"
false
}
{
"
nglayout
.
debug
.
paint_flashing
"
false
}
{
"
nglayout
.
debug
.
paint_flashing_chrome
"
false
}
}
;
bool
nsBaseWidget
:
:
debug_GetCachedBoolPref
(
const
char
*
aPrefName
)
{
NS_ASSERTION
(
nullptr
!
=
aPrefName
"
cmon
pref
name
is
null
.
"
)
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
debug_PrefValues
)
;
i
+
+
)
{
if
(
strcmp
(
debug_PrefValues
[
i
]
.
name
aPrefName
)
=
=
0
)
{
return
debug_PrefValues
[
i
]
.
value
;
}
}
return
false
;
}
static
void
debug_SetCachedBoolPref
(
const
char
*
aPrefName
bool
aValue
)
{
NS_ASSERTION
(
nullptr
!
=
aPrefName
"
cmon
pref
name
is
null
.
"
)
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
debug_PrefValues
)
;
i
+
+
)
{
if
(
strcmp
(
debug_PrefValues
[
i
]
.
name
aPrefName
)
=
=
0
)
{
debug_PrefValues
[
i
]
.
value
=
aValue
;
return
;
}
}
NS_ASSERTION
(
false
"
cmon
this
code
is
not
reached
dude
.
"
)
;
}
class
Debug_PrefObserver
final
:
public
nsIObserver
{
~
Debug_PrefObserver
(
)
=
default
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
}
;
NS_IMPL_ISUPPORTS
(
Debug_PrefObserver
nsIObserver
)
NS_IMETHODIMP
Debug_PrefObserver
:
:
Observe
(
nsISupports
*
subject
const
char
*
topic
const
char16_t
*
data
)
{
NS_ConvertUTF16toUTF8
prefName
(
data
)
;
bool
value
=
Preferences
:
:
GetBool
(
prefName
.
get
(
)
false
)
;
debug_SetCachedBoolPref
(
prefName
.
get
(
)
value
)
;
return
NS_OK
;
}
void
debug_RegisterPrefCallbacks
(
)
{
static
bool
once
=
true
;
if
(
!
once
)
{
return
;
}
once
=
false
;
nsCOMPtr
<
nsIObserver
>
obs
(
new
Debug_PrefObserver
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
debug_PrefValues
)
;
i
+
+
)
{
debug_PrefValues
[
i
]
.
value
=
Preferences
:
:
GetBool
(
debug_PrefValues
[
i
]
.
name
false
)
;
if
(
obs
)
{
nsCString
name
;
name
.
AssignLiteral
(
debug_PrefValues
[
i
]
.
name
strlen
(
debug_PrefValues
[
i
]
.
name
)
)
;
Preferences
:
:
AddStrongObserver
(
obs
name
)
;
}
}
}
static
int32_t
_GetPrintCount
(
)
{
static
int32_t
sCount
=
0
;
return
+
+
sCount
;
}
bool
nsBaseWidget
:
:
debug_WantPaintFlashing
(
)
{
return
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
paint_flashing
"
)
;
}
void
nsBaseWidget
:
:
debug_DumpEvent
(
FILE
*
aFileOut
nsIWidget
*
aWidget
WidgetGUIEvent
*
aGuiEvent
const
char
*
aWidgetName
int32_t
aWindowID
)
{
if
(
aGuiEvent
-
>
mMessage
=
=
eMouseMove
)
{
if
(
!
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
motion_event_dumping
"
)
)
return
;
}
if
(
aGuiEvent
-
>
mMessage
=
=
eMouseEnterIntoWidget
|
|
aGuiEvent
-
>
mMessage
=
=
eMouseExitFromWidget
)
{
if
(
!
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
crossing_event_dumping
"
)
)
return
;
}
if
(
!
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
event_dumping
"
)
)
return
;
NS_LossyConvertUTF16toASCII
tempString
(
debug_GuiEventToString
(
aGuiEvent
)
.
get
(
)
)
;
fprintf
(
aFileOut
"
%
4d
%
-
26s
widget
=
%
-
8p
name
=
%
-
12s
id
=
0x
%
-
6x
refpt
=
%
d
%
d
\
n
"
_GetPrintCount
(
)
tempString
.
get
(
)
(
void
*
)
aWidget
aWidgetName
aWindowID
aGuiEvent
-
>
mRefPoint
.
x
aGuiEvent
-
>
mRefPoint
.
y
)
;
}
void
nsBaseWidget
:
:
debug_DumpPaintEvent
(
FILE
*
aFileOut
nsIWidget
*
aWidget
const
nsIntRegion
&
aRegion
const
char
*
aWidgetName
int32_t
aWindowID
)
{
NS_ASSERTION
(
nullptr
!
=
aFileOut
"
cmon
null
output
FILE
"
)
;
NS_ASSERTION
(
nullptr
!
=
aWidget
"
cmon
the
widget
is
null
"
)
;
if
(
!
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
paint_dumping
"
)
)
return
;
nsIntRect
rect
=
aRegion
.
GetBounds
(
)
;
fprintf
(
aFileOut
"
%
4d
PAINT
widget
=
%
p
name
=
%
-
12s
id
=
0x
%
-
6x
bounds
-
rect
=
%
3d
%
-
3d
"
"
%
3d
%
-
3d
"
_GetPrintCount
(
)
(
void
*
)
aWidget
aWidgetName
aWindowID
rect
.
X
(
)
rect
.
Y
(
)
rect
.
Width
(
)
rect
.
Height
(
)
)
;
fprintf
(
aFileOut
"
\
n
"
)
;
}
void
nsBaseWidget
:
:
debug_DumpInvalidate
(
FILE
*
aFileOut
nsIWidget
*
aWidget
const
LayoutDeviceIntRect
*
aRect
const
char
*
aWidgetName
int32_t
aWindowID
)
{
if
(
!
debug_GetCachedBoolPref
(
"
nglayout
.
debug
.
invalidate_dumping
"
)
)
return
;
NS_ASSERTION
(
nullptr
!
=
aFileOut
"
cmon
null
output
FILE
"
)
;
NS_ASSERTION
(
nullptr
!
=
aWidget
"
cmon
the
widget
is
null
"
)
;
fprintf
(
aFileOut
"
%
4d
Invalidate
widget
=
%
p
name
=
%
-
12s
id
=
0x
%
-
6x
"
_GetPrintCount
(
)
(
void
*
)
aWidget
aWidgetName
aWindowID
)
;
if
(
aRect
)
{
fprintf
(
aFileOut
"
rect
=
%
3d
%
-
3d
%
3d
%
-
3d
"
aRect
-
>
X
(
)
aRect
-
>
Y
(
)
aRect
-
>
Width
(
)
aRect
-
>
Height
(
)
)
;
}
else
{
fprintf
(
aFileOut
"
rect
=
%
-
15s
"
"
none
"
)
;
}
fprintf
(
aFileOut
"
\
n
"
)
;
}
#
endif
