#
ifndef
mozilla_TouchEvents_h__
#
define
mozilla_TouchEvents_h__
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
dom
/
Touch
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
WidgetGestureNotifyEvent
:
public
WidgetGUIEvent
{
public
:
virtual
WidgetGestureNotifyEvent
*
AsGestureNotifyEvent
(
)
override
{
return
this
;
}
WidgetGestureNotifyEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
aWidget
eGestureNotifyEventClass
)
mPanDirection
(
ePanNone
)
mDisplayPanFeedback
(
false
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eGestureNotifyEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetGestureNotifyEvent
*
result
=
new
WidgetGestureNotifyEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignGestureNotifyEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
typedef
int8_t
PanDirectionType
;
enum
PanDirection
:
PanDirectionType
{
ePanNone
ePanVertical
ePanHorizontal
ePanBoth
}
;
PanDirection
mPanDirection
;
bool
mDisplayPanFeedback
;
void
AssignGestureNotifyEventData
(
const
WidgetGestureNotifyEvent
&
aEvent
bool
aCopyTargets
)
{
AssignGUIEventData
(
aEvent
aCopyTargets
)
;
mPanDirection
=
aEvent
.
mPanDirection
;
mDisplayPanFeedback
=
aEvent
.
mDisplayPanFeedback
;
}
}
;
class
WidgetSimpleGestureEvent
:
public
WidgetMouseEventBase
{
public
:
virtual
WidgetSimpleGestureEvent
*
AsSimpleGestureEvent
(
)
override
{
return
this
;
}
WidgetSimpleGestureEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetMouseEventBase
(
aIsTrusted
aMessage
aWidget
eSimpleGestureEventClass
)
mAllowedDirections
(
0
)
mDirection
(
0
)
mClickCount
(
0
)
mDelta
(
0
.
0
)
{
}
WidgetSimpleGestureEvent
(
const
WidgetSimpleGestureEvent
&
aOther
)
:
WidgetMouseEventBase
(
aOther
.
IsTrusted
(
)
aOther
.
mMessage
aOther
.
mWidget
eSimpleGestureEventClass
)
mAllowedDirections
(
aOther
.
mAllowedDirections
)
mDirection
(
aOther
.
mDirection
)
mClickCount
(
0
)
mDelta
(
aOther
.
mDelta
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eSimpleGestureEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetSimpleGestureEvent
*
result
=
new
WidgetSimpleGestureEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignSimpleGestureEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
uint32_t
mAllowedDirections
;
uint32_t
mDirection
;
uint32_t
mClickCount
;
double
mDelta
;
void
AssignSimpleGestureEventData
(
const
WidgetSimpleGestureEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventBaseData
(
aEvent
aCopyTargets
)
;
mDirection
=
aEvent
.
mDirection
;
mDelta
=
aEvent
.
mDelta
;
mClickCount
=
aEvent
.
mClickCount
;
}
}
;
class
WidgetTouchEvent
:
public
WidgetInputEvent
{
public
:
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
Touch
>
>
TouchArray
;
typedef
AutoTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
Touch
>
10
>
AutoTouchArray
;
typedef
AutoTouchArray
:
:
base_type
TouchArrayBase
;
virtual
WidgetTouchEvent
*
AsTouchEvent
(
)
override
{
return
this
;
}
MOZ_COUNTED_DEFAULT_CTOR
(
WidgetTouchEvent
)
WidgetTouchEvent
(
const
WidgetTouchEvent
&
aOther
)
:
WidgetInputEvent
(
aOther
.
IsTrusted
(
)
aOther
.
mMessage
aOther
.
mWidget
eTouchEventClass
)
{
MOZ_COUNT_CTOR
(
WidgetTouchEvent
)
;
mModifiers
=
aOther
.
mModifiers
;
mTime
=
aOther
.
mTime
;
mTimeStamp
=
aOther
.
mTimeStamp
;
mTouches
.
AppendElements
(
aOther
.
mTouches
)
;
mFlags
.
mCancelable
=
mMessage
!
=
eTouchCancel
;
mFlags
.
mHandledByAPZ
=
aOther
.
mFlags
.
mHandledByAPZ
;
}
WidgetTouchEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetInputEvent
(
aIsTrusted
aMessage
aWidget
eTouchEventClass
)
{
MOZ_COUNT_CTOR
(
WidgetTouchEvent
)
;
mFlags
.
mCancelable
=
mMessage
!
=
eTouchCancel
;
}
MOZ_COUNTED_DTOR_OVERRIDE
(
WidgetTouchEvent
)
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eTouchEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetTouchEvent
*
result
=
new
WidgetTouchEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignTouchEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
TouchArray
mTouches
;
void
AssignTouchEventData
(
const
WidgetTouchEvent
&
aEvent
bool
aCopyTargets
)
{
AssignInputEventData
(
aEvent
aCopyTargets
)
;
MOZ_ASSERT
(
mTouches
.
IsEmpty
(
)
)
;
mTouches
.
AppendElements
(
aEvent
.
mTouches
)
;
}
}
;
}
#
endif
