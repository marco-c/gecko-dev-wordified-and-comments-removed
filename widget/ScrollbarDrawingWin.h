#
ifndef
mozilla_widget_ScrollbarDrawingWin_h
#
define
mozilla_widget_ScrollbarDrawingWin_h
#
include
"
nsITheme
.
h
"
#
include
"
nsNativeTheme
.
h
"
#
include
"
ScrollbarDrawing
.
h
"
namespace
mozilla
:
:
widget
{
class
ScrollbarDrawingWin
:
public
ScrollbarDrawing
{
public
:
ScrollbarDrawingWin
(
)
=
default
;
virtual
~
ScrollbarDrawingWin
(
)
=
default
;
LayoutDeviceIntSize
GetMinimumWidgetSize
(
nsPresContext
*
StyleAppearance
aAppearance
nsIFrame
*
aFrame
)
override
;
Maybe
<
nsITheme
:
:
Transparency
>
GetScrollbarPartTransparency
(
nsIFrame
*
aFrame
StyleAppearance
aAppearance
)
override
;
static
ComputedStyle
*
GetCustomScrollbarStyle
(
nsIFrame
*
aFrame
bool
*
aDarkScrollbar
=
nullptr
)
;
template
<
typename
PaintBackendData
>
bool
DoPaintScrollbarThumb
(
PaintBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
bool
PaintScrollbarThumb
(
DrawTarget
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
override
;
bool
PaintScrollbarThumb
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
override
;
void
RecomputeScrollbarParams
(
)
override
;
}
;
static
constexpr
uint32_t
kDefaultWinScrollbarSize
=
17
;
}
#
endif
