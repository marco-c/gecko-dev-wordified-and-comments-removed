#
ifndef
mozilla_ContentData_h
#
define
mozilla_ContentData_h
#
include
<
sstream
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Debug
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
mozilla
/
widget
/
IMEData
.
h
"
namespace
mozilla
{
class
ContentSelection
{
public
:
using
SelectionChangeDataBase
=
widget
:
:
IMENotification
:
:
SelectionChangeDataBase
;
ContentSelection
(
)
=
default
;
explicit
ContentSelection
(
const
SelectionChangeDataBase
&
aSelectionChangeData
)
:
mOffsetAndData
(
Some
(
aSelectionChangeData
.
ToUint32OffsetAndData
(
)
)
)
mWritingMode
(
aSelectionChangeData
.
GetWritingMode
(
)
)
{
}
explicit
ContentSelection
(
const
WidgetQueryContentEvent
&
aSelectedTextEvent
)
;
ContentSelection
(
uint32_t
aOffset
const
WritingMode
&
aWritingMode
)
:
mOffsetAndData
(
Some
(
OffsetAndData
<
uint32_t
>
(
aOffset
EmptyString
(
)
OffsetAndDataFor
:
:
SelectedString
)
)
)
mWritingMode
(
aWritingMode
)
{
}
const
OffsetAndData
<
uint32_t
>
&
OffsetAndDataRef
(
)
const
{
return
mOffsetAndData
.
ref
(
)
;
}
void
Collapse
(
uint32_t
aOffset
)
{
if
(
mOffsetAndData
.
isSome
(
)
)
{
mOffsetAndData
-
>
Collapse
(
aOffset
)
;
}
else
{
mOffsetAndData
.
emplace
(
aOffset
EmptyString
(
)
OffsetAndDataFor
:
:
SelectedString
)
;
}
}
void
Clear
(
)
{
mOffsetAndData
.
reset
(
)
;
mWritingMode
=
WritingMode
(
)
;
}
bool
HasRange
(
)
const
{
return
mOffsetAndData
.
isSome
(
)
;
}
const
WritingMode
&
WritingModeRef
(
)
const
{
return
mWritingMode
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
ContentSelection
&
aContentSelection
)
{
if
(
aContentSelection
.
HasRange
(
)
)
{
return
aStream
<
<
"
{
HasRange
(
)
=
false
}
"
;
}
aStream
<
<
"
{
mOffsetAndData
=
"
<
<
aContentSelection
.
mOffsetAndData
<
<
"
mWritingMode
=
"
<
<
aContentSelection
.
mWritingMode
<
<
"
}
"
;
return
aStream
;
}
private
:
Maybe
<
OffsetAndData
<
uint32_t
>
>
mOffsetAndData
;
WritingMode
mWritingMode
;
}
;
}
#
endif
