#
include
"
nsPrinterCUPS
.
h
"
#
include
"
mozilla
/
GkRustUtils
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsPrinterBase
.
h
"
#
include
"
nsPrintSettingsImpl
.
h
"
#
include
"
plstr
.
h
"
using
namespace
mozilla
;
static
constexpr
Array
<
const
char
*
const
1
>
requestedAttributes
{
"
cups
-
version
"
}
;
static
PaperInfo
MakePaperInfo
(
const
char
*
aName
const
cups_size_t
&
aMedia
)
{
const
double
kPointsPerHundredthMillimeter
=
72
.
0
/
2540
.
0
;
NS_ConvertUTF8toUTF16
paperId
(
aMedia
.
media
)
;
NS_ConvertUTF8toUTF16
paperName
(
aName
)
;
return
PaperInfo
(
paperId
paperName
{
aMedia
.
width
*
kPointsPerHundredthMillimeter
aMedia
.
length
*
kPointsPerHundredthMillimeter
}
Some
(
gfx
:
:
MarginDouble
{
aMedia
.
top
*
kPointsPerHundredthMillimeter
aMedia
.
right
*
kPointsPerHundredthMillimeter
aMedia
.
bottom
*
kPointsPerHundredthMillimeter
aMedia
.
left
*
kPointsPerHundredthMillimeter
}
)
)
;
}
static
void
FetchCUPSVersionForPrinter
(
const
nsCUPSShim
&
aShim
const
cups_dest_t
*
const
aDest
uint64_t
&
aOutMajor
uint64_t
&
aOutMinor
uint64_t
&
aOutPatch
)
{
const
char
*
const
uri
=
aShim
.
cupsGetOption
(
"
printer
-
uri
-
supported
"
aDest
-
>
num_options
aDest
-
>
options
)
;
if
(
!
uri
)
{
return
;
}
ipp_t
*
const
ippRequest
=
aShim
.
ippNewRequest
(
IPP_OP_GET_PRINTER_ATTRIBUTES
)
;
aShim
.
ippAddString
(
ippRequest
IPP_TAG_OPERATION
IPP_TAG_URI
"
printer
-
uri
"
nullptr
uri
)
;
aShim
.
ippAddStrings
(
ippRequest
IPP_TAG_OPERATION
IPP_TAG_KEYWORD
"
requested
-
attributes
"
requestedAttributes
.
Length
nullptr
&
(
requestedAttributes
[
0
]
)
)
;
if
(
ipp_t
*
const
ippResponse
=
aShim
.
cupsDoRequest
(
CUPS_HTTP_DEFAULT
ippRequest
"
/
"
)
)
{
ipp_attribute_t
*
const
versionAttrib
=
aShim
.
ippFindAttribute
(
ippResponse
"
cups
-
version
"
IPP_TAG_TEXT
)
;
if
(
versionAttrib
&
&
aShim
.
ippGetCount
(
versionAttrib
)
=
=
1
)
{
const
char
*
versionString
=
aShim
.
ippGetString
(
versionAttrib
0
nullptr
)
;
MOZ_ASSERT
(
versionString
)
;
GkRustUtils
:
:
ParseSemVer
(
nsDependentCSubstring
{
MakeStringSpan
(
versionString
)
}
aOutMajor
aOutMinor
aOutPatch
)
;
}
aShim
.
ippDelete
(
ippResponse
)
;
}
}
nsPrinterCUPS
:
:
~
nsPrinterCUPS
(
)
{
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
if
(
printerInfoLock
-
>
mPrinterInfo
)
{
mShim
.
cupsFreeDestInfo
(
printerInfoLock
-
>
mPrinterInfo
)
;
}
if
(
mPrinter
)
{
mShim
.
cupsFreeDests
(
1
mPrinter
)
;
mPrinter
=
nullptr
;
}
}
PrintSettingsInitializer
nsPrinterCUPS
:
:
DefaultSettings
(
)
const
{
nsString
printerName
;
GetPrinterName
(
printerName
)
;
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
EnsurePrinterInfo
(
*
printerInfoLock
)
;
cups_dinfo_t
*
const
printerInfo
=
printerInfoLock
-
>
mPrinterInfo
;
cups_size_t
media
;
bool
hasDefaultMedia
=
mShim
.
cupsGetDestMediaDefault
(
CUPS_HTTP_DEFAULT
mPrinter
printerInfo
CUPS_MEDIA_FLAGS_DEFAULT
&
media
)
;
if
(
!
hasDefaultMedia
)
{
Nothing
(
)
;
return
PrintSettingsInitializer
{
std
:
:
move
(
printerName
)
PaperInfo
(
)
SupportsColor
(
)
}
;
}
const
char
*
localizedName
=
nullptr
;
http_t
*
connection
=
mShim
.
cupsConnectDest
(
mPrinter
CUPS_DEST_FLAGS_NONE
5000
nullptr
nullptr
0
nullptr
nullptr
)
;
if
(
connection
)
{
localizedName
=
LocalizeMediaName
(
*
connection
media
)
;
mShim
.
httpClose
(
connection
)
;
}
return
PrintSettingsInitializer
{
std
:
:
move
(
printerName
)
MakePaperInfo
(
localizedName
media
)
SupportsColor
(
)
}
;
}
NS_IMETHODIMP
nsPrinterCUPS
:
:
GetName
(
nsAString
&
aName
)
{
GetPrinterName
(
aName
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterCUPS
:
:
GetSystemName
(
nsAString
&
aName
)
{
CopyUTF8toUTF16
(
MakeStringSpan
(
mPrinter
-
>
name
)
aName
)
;
return
NS_OK
;
}
void
nsPrinterCUPS
:
:
GetPrinterName
(
nsAString
&
aName
)
const
{
if
(
mDisplayName
.
IsEmpty
(
)
)
{
aName
.
Truncate
(
)
;
CopyUTF8toUTF16
(
MakeStringSpan
(
mPrinter
-
>
name
)
aName
)
;
}
else
{
aName
=
mDisplayName
;
}
}
const
char
*
nsPrinterCUPS
:
:
LocalizeMediaName
(
http_t
&
aConnection
cups_size_t
&
aMedia
)
const
{
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
EnsurePrinterInfo
(
*
printerInfoLock
)
;
cups_dinfo_t
*
const
printerInfo
=
printerInfoLock
-
>
mPrinterInfo
;
return
mShim
.
cupsLocalizeDestMedia
(
&
aConnection
mPrinter
printerInfo
CUPS_MEDIA_FLAGS_DEFAULT
&
aMedia
)
;
}
bool
nsPrinterCUPS
:
:
SupportsDuplex
(
)
const
{
return
Supports
(
CUPS_SIDES
CUPS_SIDES_TWO_SIDED_PORTRAIT
)
;
}
bool
nsPrinterCUPS
:
:
SupportsMonochrome
(
)
const
{
#
ifdef
XP_MACOSX
return
!
SupportsColor
(
)
;
#
else
return
true
;
#
endif
}
bool
nsPrinterCUPS
:
:
SupportsColor
(
)
const
{
if
(
!
IsCUPSVersionAtLeast
(
2
2
0
)
)
{
return
true
;
}
return
Supports
(
CUPS_PRINT_COLOR_MODE
CUPS_PRINT_COLOR_MODE_COLOR
)
|
|
Supports
(
CUPS_PRINT_COLOR_MODE
CUPS_PRINT_COLOR_MODE_AUTO
)
;
}
bool
nsPrinterCUPS
:
:
SupportsCollation
(
)
const
{
const
char
*
const
value
=
mShim
.
cupsGetOption
(
"
printer
-
type
"
mPrinter
-
>
num_options
mPrinter
-
>
options
)
;
if
(
!
value
)
{
return
false
;
}
const
int
type
=
atoi
(
value
)
;
return
type
&
CUPS_PRINTER_COLLATE
;
}
bool
nsPrinterCUPS
:
:
Supports
(
const
char
*
aOption
const
char
*
aValue
)
const
{
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
EnsurePrinterInfo
(
*
printerInfoLock
)
;
cups_dinfo_t
*
const
printerInfo
=
printerInfoLock
-
>
mPrinterInfo
;
return
mShim
.
cupsCheckDestSupported
(
CUPS_HTTP_DEFAULT
mPrinter
printerInfo
aOption
aValue
)
;
}
bool
nsPrinterCUPS
:
:
IsCUPSVersionAtLeast
(
uint64_t
aCUPSMajor
uint64_t
aCUPSMinor
uint64_t
aCUPSPatch
)
const
{
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
EnsurePrinterInfo
(
*
printerInfoLock
)
;
if
(
printerInfoLock
-
>
mCUPSMajor
>
aCUPSMajor
)
{
return
true
;
}
if
(
printerInfoLock
-
>
mCUPSMajor
<
aCUPSMajor
)
{
return
false
;
}
if
(
printerInfoLock
-
>
mCUPSMinor
>
aCUPSMinor
)
{
return
true
;
}
if
(
printerInfoLock
-
>
mCUPSMinor
<
aCUPSMinor
)
{
return
false
;
}
return
aCUPSPatch
<
=
printerInfoLock
-
>
mCUPSPatch
;
}
nsTArray
<
PaperInfo
>
nsPrinterCUPS
:
:
PaperList
(
)
const
{
auto
printerInfoLock
=
mPrinterInfoMutex
.
Lock
(
)
;
EnsurePrinterInfo
(
*
printerInfoLock
)
;
cups_dinfo_t
*
const
printerInfo
=
printerInfoLock
-
>
mPrinterInfo
;
if
(
!
printerInfo
)
{
return
{
}
;
}
const
int
paperCount
=
mShim
.
cupsGetDestMediaCount
(
CUPS_HTTP_DEFAULT
mPrinter
printerInfo
CUPS_MEDIA_FLAGS_DEFAULT
)
;
http_t
*
connection
=
mShim
.
cupsConnectDest
(
mPrinter
CUPS_DEST_FLAGS_NONE
5000
nullptr
nullptr
0
nullptr
nullptr
)
;
if
(
!
connection
)
{
return
{
}
;
}
nsTArray
<
PaperInfo
>
paperList
;
for
(
int
i
=
0
;
i
<
paperCount
;
+
+
i
)
{
cups_size_t
media
;
int
getInfoSucceded
=
mShim
.
cupsGetDestMediaByIndex
(
CUPS_HTTP_DEFAULT
mPrinter
printerInfo
i
CUPS_MEDIA_FLAGS_DEFAULT
&
media
)
;
if
(
!
getInfoSucceded
)
{
continue
;
}
paperList
.
AppendElement
(
MakePaperInfo
(
LocalizeMediaName
(
*
connection
media
)
media
)
)
;
}
mShim
.
httpClose
(
connection
)
;
return
paperList
;
}
void
nsPrinterCUPS
:
:
EnsurePrinterInfo
(
CUPSPrinterInfo
&
aInOutPrinterInfo
)
const
{
if
(
aInOutPrinterInfo
.
mWasInited
)
{
return
;
}
aInOutPrinterInfo
.
mWasInited
=
true
;
aInOutPrinterInfo
.
mPrinterInfo
=
mShim
.
cupsCopyDestInfo
(
CUPS_HTTP_DEFAULT
mPrinter
)
;
FetchCUPSVersionForPrinter
(
mShim
mPrinter
aInOutPrinterInfo
.
mCUPSMajor
aInOutPrinterInfo
.
mCUPSMinor
aInOutPrinterInfo
.
mCUPSPatch
)
;
}
