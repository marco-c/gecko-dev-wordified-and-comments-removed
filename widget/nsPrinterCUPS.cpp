#
include
"
nsPrinterCUPS
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsPrinterBase
.
h
"
using
namespace
mozilla
;
nsPrinterCUPS
:
:
nsPrinterCUPS
(
const
nsCUPSShim
&
aShim
cups_dest_t
*
aPrinter
)
:
mShim
(
aShim
)
{
MOZ_ASSERT
(
aPrinter
)
;
MOZ_ASSERT
(
mShim
.
IsInitialized
(
)
)
;
DebugOnly
<
const
int
>
numCopied
=
aShim
.
cupsCopyDest
(
aPrinter
0
&
mPrinter
)
;
MOZ_ASSERT
(
numCopied
=
=
1
)
;
mPrinterInfo
=
aShim
.
cupsCopyDestInfo
(
CUPS_HTTP_DEFAULT
mPrinter
)
;
}
nsPrinterCUPS
:
:
~
nsPrinterCUPS
(
)
{
if
(
mPrinterInfo
)
{
mShim
.
cupsFreeDestInfo
(
mPrinterInfo
)
;
mPrinterInfo
=
nullptr
;
}
if
(
mPrinter
)
{
mShim
.
cupsFreeDests
(
1
mPrinter
)
;
mPrinter
=
nullptr
;
}
}
already_AddRefed
<
nsPrinterCUPS
>
nsPrinterCUPS
:
:
Create
(
const
nsCUPSShim
&
aShim
cups_dest_t
*
aPrinter
)
{
return
do_AddRef
(
new
nsPrinterCUPS
(
aShim
aPrinter
)
)
;
}
NS_IMETHODIMP
nsPrinterCUPS
:
:
GetName
(
nsAString
&
aName
)
{
if
(
mDisplayName
.
IsEmpty
(
)
)
{
aName
=
NS_ConvertUTF8toUTF16
(
mPrinter
-
>
name
)
;
}
else
{
aName
=
mDisplayName
;
}
return
NS_OK
;
}
bool
nsPrinterCUPS
:
:
SupportsDuplex
(
)
const
{
return
Supports
(
CUPS_SIDES
CUPS_SIDES_TWO_SIDED_PORTRAIT
)
;
}
bool
nsPrinterCUPS
:
:
SupportsColor
(
)
const
{
return
false
;
}
bool
nsPrinterCUPS
:
:
Supports
(
const
char
*
option
const
char
*
value
)
const
{
MOZ_ASSERT
(
mPrinterInfo
)
;
return
mShim
.
cupsCheckDestSupported
(
CUPS_HTTP_DEFAULT
mPrinter
mPrinterInfo
option
value
)
;
}
nsTArray
<
PaperInfo
>
nsPrinterCUPS
:
:
PaperList
(
)
const
{
if
(
!
mPrinterInfo
)
{
return
{
}
;
}
const
int
paperCount
=
mShim
.
cupsGetDestMediaCount
(
CUPS_HTTP_DEFAULT
mPrinter
mPrinterInfo
CUPS_MEDIA_FLAGS_DEFAULT
)
;
http_t
*
connection
=
mShim
.
cupsConnectDest
(
mPrinter
CUPS_DEST_FLAGS_NONE
5000
nullptr
nullptr
0
nullptr
nullptr
)
;
if
(
!
connection
)
{
return
{
}
;
}
nsTArray
<
PaperInfo
>
paperList
;
for
(
int
i
=
0
;
i
<
paperCount
;
+
+
i
)
{
cups_size_t
info
;
int
getInfoSucceded
=
mShim
.
cupsGetDestMediaByIndex
(
CUPS_HTTP_DEFAULT
mPrinter
mPrinterInfo
i
CUPS_MEDIA_FLAGS_DEFAULT
&
info
)
;
if
(
!
getInfoSucceded
)
{
continue
;
}
const
char
*
localizedName
=
mShim
.
cupsLocalizeDestMedia
(
connection
mPrinter
mPrinterInfo
CUPS_MEDIA_FLAGS_DEFAULT
&
info
)
;
if
(
!
localizedName
)
{
continue
;
}
NS_ConvertUTF8toUTF16
name
(
localizedName
)
;
const
double
kPointsPerHundredthMillimeter
=
0
.
0283465
;
paperList
.
AppendElement
(
PaperInfo
{
std
:
:
move
(
name
)
{
info
.
width
*
kPointsPerHundredthMillimeter
info
.
length
*
kPointsPerHundredthMillimeter
}
Some
(
MarginDouble
{
info
.
top
*
kPointsPerHundredthMillimeter
info
.
right
*
kPointsPerHundredthMillimeter
info
.
bottom
*
kPointsPerHundredthMillimeter
info
.
left
*
kPointsPerHundredthMillimeter
}
)
}
)
;
}
mShim
.
httpClose
(
connection
)
;
return
paperList
;
}
