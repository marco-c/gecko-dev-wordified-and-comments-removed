#
include
<
limits
>
#
if
__GLIBCXX__
<
=
20070719
#
ifndef
__EXCEPTIONS
#
define
__EXCEPTIONS
#
endif
#
endif
#
include
"
gfxPlatform
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
imgLoader
.
h
"
#
include
"
imgRequestProxy
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsToolkit
.
h
"
#
include
"
IconLoaderHelperCocoa
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
gfx
:
:
SourceSurface
;
using
mozilla
:
:
widget
:
:
IconLoaderListenerCocoa
;
namespace
mozilla
:
:
widget
{
IconLoaderHelperCocoa
:
:
IconLoaderHelperCocoa
(
IconLoaderListenerCocoa
*
aListener
uint32_t
aIconHeight
uint32_t
aIconWidth
CGFloat
aScaleFactor
)
:
mLoadListener
(
aListener
)
mIconHeight
(
aIconHeight
)
mIconWidth
(
aIconWidth
)
mScaleFactor
(
aScaleFactor
)
{
mNativeIconImage
=
[
[
NSImage
alloc
]
initWithSize
:
NSMakeSize
(
mIconHeight
mIconWidth
)
]
;
MOZ_ASSERT
(
aListener
)
;
}
IconLoaderHelperCocoa
:
:
~
IconLoaderHelperCocoa
(
)
{
Destroy
(
)
;
}
nsresult
IconLoaderHelperCocoa
:
:
OnComplete
(
imgIContainer
*
aImage
const
nsIntRect
&
aRect
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
NS_ENSURE_ARG_POINTER
(
aImage
)
;
bool
isEntirelyBlack
=
false
;
NSImage
*
newImage
=
nil
;
nsresult
rv
;
if
(
mScaleFactor
!
=
0
.
0f
)
{
rv
=
nsCocoaUtils
:
:
CreateNSImageFromImageContainer
(
aImage
imgIContainer
:
:
FRAME_CURRENT
&
newImage
mScaleFactor
&
isEntirelyBlack
)
;
}
else
{
rv
=
nsCocoaUtils
:
:
CreateDualRepresentationNSImageFromImageContainer
(
aImage
imgIContainer
:
:
FRAME_CURRENT
&
newImage
&
isEntirelyBlack
)
;
}
if
(
NS_FAILED
(
rv
)
|
|
!
newImage
)
{
mNativeIconImage
=
nil
;
[
newImage
release
]
;
return
NS_ERROR_FAILURE
;
}
NSSize
requestedSize
=
NSMakeSize
(
mIconWidth
mIconHeight
)
;
int32_t
origWidth
=
0
origHeight
=
0
;
aImage
-
>
GetWidth
(
&
origWidth
)
;
aImage
-
>
GetHeight
(
&
origHeight
)
;
bool
createSubImage
=
!
(
aRect
.
x
=
=
0
&
&
aRect
.
y
=
=
0
&
&
aRect
.
width
=
=
origWidth
&
&
aRect
.
height
=
=
origHeight
)
;
if
(
createSubImage
)
{
NSImage
*
subImage
=
[
NSImage
imageWithSize
:
requestedSize
flipped
:
NO
drawingHandler
:
^
BOOL
(
NSRect
subImageRect
)
{
[
newImage
drawInRect
:
NSMakeRect
(
0
0
mIconWidth
mIconHeight
)
fromRect
:
NSMakeRect
(
aRect
.
x
aRect
.
y
aRect
.
width
aRect
.
height
)
operation
:
NSCompositeCopy
fraction
:
1
.
0f
]
;
return
YES
;
}
]
;
[
newImage
release
]
;
newImage
=
[
subImage
retain
]
;
subImage
=
nil
;
}
[
newImage
setTemplate
:
isEntirelyBlack
]
;
[
newImage
setSize
:
requestedSize
]
;
NSImage
*
placeholderImage
=
mNativeIconImage
;
mNativeIconImage
=
newImage
;
[
placeholderImage
release
]
;
placeholderImage
=
nil
;
mLoadListener
-
>
OnComplete
(
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
}
NSImage
*
IconLoaderHelperCocoa
:
:
GetNativeIconImage
(
)
{
return
mNativeIconImage
;
}
void
IconLoaderHelperCocoa
:
:
Destroy
(
)
{
if
(
mNativeIconImage
)
{
[
mNativeIconImage
release
]
;
mNativeIconImage
=
nil
;
}
}
}
