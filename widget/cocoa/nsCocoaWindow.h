#
ifndef
nsCocoaWindow_h_
#
define
nsCocoaWindow_h_
#
undef
DARWIN
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsTouchBar
.
h
"
#
include
<
dlfcn
.
h
>
#
include
<
queue
>
class
nsCocoaWindow
;
class
nsChildView
;
class
nsMenuBarX
;
class
ChildView
;
namespace
mozilla
{
enum
class
NativeKeyBindingsType
:
uint8_t
;
}
interface
BaseWindow
:
NSWindow
{
NSMutableDictionary
*
mState
;
BOOL
mDrawsIntoWindowFrame
;
BOOL
mDisabledNeedsDisplay
;
NSTrackingArea
*
mTrackingArea
;
NSView
*
mViewWithTrackingArea
;
NSRect
mDirtyRect
;
BOOL
mBeingShown
;
BOOL
mDrawTitle
;
BOOL
mIsAnimationSuppressed
;
nsTouchBar
*
mTouchBar
;
}
-
(
void
)
importState
:
(
NSDictionary
*
)
aState
;
-
(
NSMutableDictionary
*
)
exportState
;
-
(
void
)
setDrawsContentsIntoWindowFrame
:
(
BOOL
)
aState
;
-
(
BOOL
)
drawsContentsIntoWindowFrame
;
-
(
NSRect
)
childViewRectForFrameRect
:
(
NSRect
)
aFrameRect
;
-
(
NSRect
)
frameRectForChildViewRect
:
(
NSRect
)
aChildViewRect
;
-
(
void
)
mouseEntered
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
mouseExited
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
mouseMoved
:
(
NSEvent
*
)
aEvent
;
-
(
NSView
*
)
trackingAreaView
;
-
(
void
)
createTrackingArea
;
-
(
void
)
removeTrackingArea
;
-
(
void
)
setBeingShown
:
(
BOOL
)
aValue
;
-
(
BOOL
)
isBeingShown
;
-
(
BOOL
)
isVisibleOrBeingShown
;
-
(
void
)
setIsAnimationSuppressed
:
(
BOOL
)
aValue
;
-
(
BOOL
)
isAnimationSuppressed
;
-
(
NSArray
<
NSView
*
>
*
)
contentViewContents
;
-
(
ChildView
*
)
mainChildView
;
-
(
void
)
setWantsTitleDrawn
:
(
BOOL
)
aDrawTitle
;
-
(
BOOL
)
wantsTitleDrawn
;
-
(
void
)
disableSetNeedsDisplay
;
-
(
void
)
enableSetNeedsDisplay
;
-
(
NSRect
)
getAndResetNativeDirtyRect
;
-
(
void
)
setEffectViewWrapperForStyle
:
(
mozilla
:
:
WindowShadow
)
aStyle
;
property
(
nonatomic
)
mozilla
:
:
WindowShadow
shadowStyle
;
-
(
void
)
releaseJSObjects
;
end
interface
NSWindow
(
Undocumented
)
-
(
NSDictionary
*
)
shadowParameters
;
-
(
NSRect
)
contentRectForFrameRect
:
(
NSRect
)
windowFrame
styleMask
:
(
NSUInteger
)
windowStyle
;
-
(
NSRect
)
frameRectForContentRect
:
(
NSRect
)
windowContentRect
styleMask
:
(
NSUInteger
)
windowStyle
;
+
(
Class
)
frameViewClassForStyleMask
:
(
NSUInteger
)
styleMask
;
end
interface
PopupWindow
:
BaseWindow
{
private
BOOL
mIsContextMenu
;
}
-
(
id
)
initWithContentRect
:
(
NSRect
)
contentRect
styleMask
:
(
NSUInteger
)
styleMask
backing
:
(
NSBackingStoreType
)
bufferingType
defer
:
(
BOOL
)
deferCreation
;
-
(
BOOL
)
isContextMenu
;
-
(
void
)
setIsContextMenu
:
(
BOOL
)
flag
;
-
(
BOOL
)
canBecomeMainWindow
;
end
interface
BorderlessWindow
:
BaseWindow
{
}
-
(
BOOL
)
canBecomeKeyWindow
;
-
(
BOOL
)
canBecomeMainWindow
;
end
interface
WindowDelegate
:
NSObject
<
NSWindowDelegate
>
{
nsCocoaWindow
*
mGeckoWindow
;
bool
mToplevelActiveState
;
BOOL
mHasEverBeenZoomed
;
}
+
(
void
)
paintMenubarForWindow
:
(
NSWindow
*
)
aWindow
;
-
(
id
)
initWithGeckoWindow
:
(
nsCocoaWindow
*
)
geckoWind
;
-
(
void
)
windowDidResize
:
(
NSNotification
*
)
aNotification
;
-
(
nsCocoaWindow
*
)
geckoWidget
;
-
(
bool
)
toplevelActiveState
;
-
(
void
)
sendToplevelActivateEvents
;
-
(
void
)
sendToplevelDeactivateEvents
;
end
interface
FullscreenTitlebarTracker
:
NSTitlebarAccessoryViewController
-
(
FullscreenTitlebarTracker
*
)
init
;
end
interface
ToolbarWindow
:
BaseWindow
{
FullscreenTitlebarTracker
*
mFullscreenTitlebarTracker
;
CGFloat
mMenuBarHeight
;
NSRect
mWindowButtonsRect
;
}
-
(
void
)
setDrawsContentsIntoWindowFrame
:
(
BOOL
)
aState
;
-
(
void
)
placeWindowButtons
:
(
NSRect
)
aRect
;
-
(
NSRect
)
windowButtonsRect
;
-
(
void
)
windowMainStateChanged
;
end
class
nsCocoaWindow
final
:
public
nsBaseWidget
{
private
:
friend
class
nsChildView
;
typedef
nsBaseWidget
Inherited
;
public
:
nsCocoaWindow
(
)
;
[
[
nodiscard
]
]
nsresult
Create
(
nsIWidget
*
aParent
const
DesktopIntRect
&
aRect
InitData
*
=
nullptr
)
override
;
[
[
nodiscard
]
]
nsresult
Create
(
nsIWidget
*
aParent
const
LayoutDeviceIntRect
&
aRect
InitData
*
=
nullptr
)
override
;
void
Destroy
(
)
override
;
void
Show
(
bool
aState
)
override
;
bool
NeedsRecreateToReshow
(
)
override
;
void
Enable
(
bool
aState
)
override
;
bool
IsEnabled
(
)
const
override
;
void
SetModal
(
bool
aState
)
override
;
bool
IsRunningAppModal
(
)
override
;
bool
IsVisible
(
)
const
override
;
void
SetFocus
(
Raise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
LayoutDeviceIntMargin
ClientToWindowMargin
(
)
override
;
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
void
ConstrainPosition
(
DesktopIntPoint
&
)
override
;
void
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
override
;
void
Move
(
double
aX
double
aY
)
override
;
nsSizeMode
SizeMode
(
)
override
{
return
mSizeMode
;
}
void
SetSizeMode
(
nsSizeMode
aMode
)
override
;
void
GetWorkspaceID
(
nsAString
&
workspaceID
)
override
;
void
MoveToWorkspace
(
const
nsAString
&
workspaceID
)
override
;
void
SuppressAnimation
(
bool
aSuppress
)
override
;
void
HideWindowChrome
(
bool
aShouldHide
)
override
;
bool
PrepareForFullscreenTransition
(
nsISupports
*
*
aData
)
override
;
void
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
override
;
void
CleanupFullscreenTransition
(
)
override
;
nsresult
MakeFullScreen
(
bool
aFullScreen
)
final
;
nsresult
MakeFullScreenWithNativeTransition
(
bool
aFullScreen
)
final
;
NSAnimation
*
FullscreenTransitionAnimation
(
)
const
{
return
mFullscreenTransitionAnimation
;
}
void
ReleaseFullscreenTransitionAnimation
(
)
{
MOZ_ASSERT
(
mFullscreenTransitionAnimation
"
Should
only
be
called
when
there
is
animation
"
)
;
[
mFullscreenTransitionAnimation
release
]
;
mFullscreenTransitionAnimation
=
nil
;
}
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
NSRect
GetClientCocoaRect
(
)
;
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
void
ReportMoveEvent
(
)
;
void
ReportSizeEvent
(
)
;
void
SetCursor
(
const
Cursor
&
)
override
;
CGFloat
BackingScaleFactor
(
)
;
void
BackingScaleFactorChanged
(
)
;
double
GetDefaultScaleInternal
(
)
override
;
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
final
{
return
mozilla
:
:
DesktopToLayoutDeviceScale
(
BackingScaleFactor
(
)
)
;
}
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
;
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
WindowRenderer
*
GetWindowRenderer
(
)
override
;
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
void
CaptureRollupEvents
(
bool
aDoCapture
)
override
;
[
[
nodiscard
]
]
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
bool
HasPendingInputEvent
(
)
override
;
TransparencyMode
GetTransparencyMode
(
)
override
;
void
SetTransparencyMode
(
TransparencyMode
aMode
)
override
;
void
SetWindowShadowStyle
(
mozilla
:
:
WindowShadow
aStyle
)
override
;
void
SetWindowOpacity
(
float
aOpacity
)
override
;
void
SetWindowTransform
(
const
mozilla
:
:
gfx
:
:
Matrix
&
aTransform
)
override
;
void
SetInputRegion
(
const
InputRegion
&
)
override
;
void
SetColorScheme
(
const
mozilla
:
:
Maybe
<
mozilla
:
:
ColorScheme
>
&
)
override
;
void
SetShowsToolbarButton
(
bool
aShow
)
override
;
bool
GetSupportsNativeFullscreen
(
)
;
void
SetSupportsNativeFullscreen
(
bool
aShow
)
override
;
void
SetWindowAnimationType
(
WindowAnimationType
aType
)
override
;
void
SetDrawsTitle
(
bool
aDrawTitle
)
override
;
nsresult
SetNonClientMargins
(
const
LayoutDeviceIntMargin
&
)
override
;
void
SetDrawsInTitlebar
(
bool
aState
)
;
void
UpdateThemeGeometries
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
override
;
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
NativeMouseMessage
aNativeMessage
mozilla
:
:
MouseButton
aButton
nsIWidget
:
:
Modifiers
aModifierFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
void
LockAspectRatio
(
bool
aShouldLock
)
override
;
void
DispatchSizeModeEvent
(
)
;
void
DispatchOcclusionEvent
(
)
;
bool
DragEvent
(
unsigned
int
aMessage
mozilla
:
:
gfx
:
:
Point
aMouseGlobal
UInt16
aKeyModifiers
)
;
bool
HasModalDescendants
(
)
const
{
return
mNumModalDescendants
>
0
;
}
bool
IsModal
(
)
const
{
return
mModal
;
}
NSWindow
*
GetCocoaWindow
(
)
{
return
mWindow
;
}
void
SetMenuBar
(
RefPtr
<
nsMenuBarX
>
&
&
aMenuBar
)
;
nsMenuBarX
*
GetMenuBar
(
)
;
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
InputContext
GetInputContext
(
)
override
{
return
mInputContext
;
}
MOZ_CAN_RUN_SCRIPT
bool
GetEditCommands
(
mozilla
:
:
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
SetPopupWindowLevel
(
)
;
nsIWidget
*
GetParent
(
)
override
{
return
mParent
;
}
void
SetParent
(
nsIWidget
*
)
override
;
bool
InFullScreenMode
(
)
const
{
return
mInFullScreenMode
;
}
void
PauseOrResumeCompositor
(
bool
aPause
)
override
;
bool
AsyncPanZoomEnabled
(
)
const
override
;
bool
StartAsyncAutoscroll
(
const
ScreenPoint
&
aAnchorLocation
const
ScrollableLayerGuid
&
aGuid
)
override
;
void
StopAsyncAutoscroll
(
const
ScrollableLayerGuid
&
aGuid
)
override
;
void
CocoaWindowWillEnterFullscreen
(
bool
aFullscreen
)
;
void
CocoaWindowDidEnterFullscreen
(
bool
aFullscreen
)
;
void
CocoaWindowDidResize
(
)
;
void
CocoaSendToplevelActivateEvents
(
)
;
void
CocoaSendToplevelDeactivateEvents
(
)
;
enum
class
TransitionType
{
Windowed
Fullscreen
EmulatedFullscreen
Miniaturize
Deminiaturize
Zoom
}
;
void
FinishCurrentTransitionIfMatching
(
const
TransitionType
&
aTransition
)
;
bool
HandleUpdateFullscreenOnResize
(
)
;
protected
:
virtual
~
nsCocoaWindow
(
)
;
nsresult
CreateNativeWindow
(
const
NSRect
&
aRect
BorderStyle
aBorderStyle
bool
aRectIsFrameRect
bool
aIsPrivateBrowsing
)
;
nsresult
CreatePopupContentView
(
const
LayoutDeviceIntRect
&
aRect
InitData
*
)
;
void
DestroyNativeWindow
(
)
;
void
UpdateBounds
(
)
;
int32_t
GetWorkspaceID
(
)
;
void
DoResize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
bool
aConstrainToCurrentScreen
)
;
void
UpdateFullscreenState
(
bool
aFullScreen
bool
aNativeMode
)
;
nsresult
DoMakeFullScreen
(
bool
aFullScreen
bool
aUseSystemTransition
)
;
already_AddRefed
<
nsIWidget
>
AllocateChildPopupWidget
(
)
override
{
return
nsIWidget
:
:
CreateTopLevelWindow
(
)
;
}
nsCOMPtr
<
nsIWidget
>
mParent
;
BaseWindow
*
mWindow
;
WindowDelegate
*
mDelegate
;
RefPtr
<
nsMenuBarX
>
mMenuBar
;
nsChildView
*
mPopupContentView
;
NSAnimation
*
mFullscreenTransitionAnimation
;
mozilla
:
:
WindowShadow
mShadowStyle
;
CGFloat
mBackingScaleFactor
;
CGFloat
mAspectRatio
;
WindowAnimationType
mAnimationType
;
bool
mWindowMadeHere
;
nsSizeMode
mSizeMode
;
bool
mInFullScreenMode
;
bool
mInNativeFullScreenMode
;
mozilla
:
:
Maybe
<
TransitionType
>
mTransitionCurrent
;
std
:
:
queue
<
TransitionType
>
mTransitionsPending
;
RefPtr
<
mozilla
:
:
CancelableRunnable
>
mProcessTransitionsPending
;
bool
mIsTransitionCurrentAdded
=
false
;
mozilla
:
:
Maybe
<
TransitionType
>
mUpdateFullscreenOnResize
;
bool
IsInTransition
(
)
{
return
mTransitionCurrent
.
isSome
(
)
;
}
void
QueueTransition
(
const
TransitionType
&
aTransition
)
;
void
ProcessTransitions
(
)
;
void
CancelAllTransitions
(
)
;
bool
mInProcessTransitions
=
false
;
bool
mSuppressSizeModeEvents
=
false
;
int
mIgnoreOcclusionCount
;
bool
mHasStartedNativeFullscreen
;
bool
mModal
=
false
;
bool
mIsAnimationSuppressed
=
false
;
bool
mInReportMoveEvent
=
false
;
bool
mInResize
=
false
;
bool
mWindowTransformIsIdentity
=
true
;
bool
mAlwaysOnTop
=
false
;
bool
mAspectRatioLocked
=
false
;
bool
mIsAlert
=
false
;
bool
mWasShown
=
false
;
int32_t
mNumModalDescendants
=
0
;
InputContext
mInputContext
;
NSWindowAnimationBehavior
mWindowAnimationBehavior
;
private
:
static
nsCocoaWindow
*
sWindowInNativeTransition
;
bool
CanStartNativeTransition
(
)
;
void
EndOurNativeTransition
(
)
;
}
;
#
endif
