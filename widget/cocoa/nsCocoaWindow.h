#
ifndef
nsCocoaWindow_h_
#
define
nsCocoaWindow_h_
#
undef
DARWIN
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsPIWidgetCocoa
.
h
"
#
include
"
nsCocoaUtils
.
h
"
class
nsCocoaWindow
;
class
nsChildView
;
class
nsMenuBarX
;
class
ChildView
;
typedef
struct
_nsCocoaWindowList
{
_nsCocoaWindowList
(
)
:
prev
(
nullptr
)
window
(
nullptr
)
{
}
struct
_nsCocoaWindowList
*
prev
;
nsCocoaWindow
*
window
;
}
nsCocoaWindowList
;
interface
BaseWindow
:
NSWindow
{
NSMutableDictionary
*
mState
;
BOOL
mDrawsIntoWindowFrame
;
NSColor
*
mActiveTitlebarColor
;
NSColor
*
mInactiveTitlebarColor
;
BOOL
mScheduledShadowInvalidation
;
BOOL
mDisabledNeedsDisplay
;
float
mDPI
;
NSTrackingArea
*
mTrackingArea
;
NSRect
mDirtyRect
;
BOOL
mBeingShown
;
BOOL
mDrawTitle
;
BOOL
mBrightTitlebarForeground
;
BOOL
mUseMenuStyle
;
}
-
(
void
)
importState
:
(
NSDictionary
*
)
aState
;
-
(
NSMutableDictionary
*
)
exportState
;
-
(
void
)
setDrawsContentsIntoWindowFrame
:
(
BOOL
)
aState
;
-
(
BOOL
)
drawsContentsIntoWindowFrame
;
-
(
void
)
setTitlebarColor
:
(
NSColor
*
)
aColor
forActiveWindow
:
(
BOOL
)
aActive
;
-
(
NSColor
*
)
titlebarColorForActiveWindow
:
(
BOOL
)
aActive
;
-
(
void
)
deferredInvalidateShadow
;
-
(
void
)
invalidateShadow
;
-
(
float
)
getDPI
;
-
(
void
)
mouseEntered
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
mouseExited
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
mouseMoved
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
updateTrackingArea
;
-
(
NSView
*
)
trackingAreaView
;
-
(
void
)
setBeingShown
:
(
BOOL
)
aValue
;
-
(
BOOL
)
isBeingShown
;
-
(
BOOL
)
isVisibleOrBeingShown
;
-
(
ChildView
*
)
mainChildView
;
-
(
NSArray
*
)
titlebarControls
;
-
(
void
)
setWantsTitleDrawn
:
(
BOOL
)
aDrawTitle
;
-
(
BOOL
)
wantsTitleDrawn
;
-
(
void
)
setUseBrightTitlebarForeground
:
(
BOOL
)
aBrightForeground
;
-
(
BOOL
)
useBrightTitlebarForeground
;
-
(
void
)
disableSetNeedsDisplay
;
-
(
void
)
enableSetNeedsDisplay
;
-
(
NSRect
)
getAndResetNativeDirtyRect
;
-
(
void
)
setUseMenuStyle
:
(
BOOL
)
aValue
;
end
interface
NSWindow
(
Undocumented
)
-
(
void
)
_setWindowNumber
:
(
NSInteger
)
aNumber
;
-
(
void
)
setBottomCornerRounded
:
(
BOOL
)
rounded
;
-
(
BOOL
)
bottomCornerRounded
;
-
(
NSRect
)
contentRectForFrameRect
:
(
NSRect
)
windowFrame
styleMask
:
(
NSUInteger
)
windowStyle
;
-
(
NSRect
)
frameRectForContentRect
:
(
NSRect
)
windowContentRect
styleMask
:
(
NSUInteger
)
windowStyle
;
+
(
Class
)
frameViewClassForStyleMask
:
(
NSUInteger
)
styleMask
;
end
interface
PopupWindow
:
BaseWindow
{
private
BOOL
mIsContextMenu
;
}
-
(
id
)
initWithContentRect
:
(
NSRect
)
contentRect
styleMask
:
(
NSUInteger
)
styleMask
backing
:
(
NSBackingStoreType
)
bufferingType
defer
:
(
BOOL
)
deferCreation
;
-
(
BOOL
)
isContextMenu
;
-
(
void
)
setIsContextMenu
:
(
BOOL
)
flag
;
-
(
BOOL
)
canBecomeMainWindow
;
end
interface
BorderlessWindow
:
BaseWindow
{
}
-
(
BOOL
)
canBecomeKeyWindow
;
-
(
BOOL
)
canBecomeMainWindow
;
end
interface
WindowDelegate
:
NSObject
<
NSWindowDelegate
>
{
nsCocoaWindow
*
mGeckoWindow
;
bool
mToplevelActiveState
;
BOOL
mHasEverBeenZoomed
;
}
+
(
void
)
paintMenubarForWindow
:
(
NSWindow
*
)
aWindow
;
-
(
id
)
initWithGeckoWindow
:
(
nsCocoaWindow
*
)
geckoWind
;
-
(
void
)
windowDidResize
:
(
NSNotification
*
)
aNotification
;
-
(
nsCocoaWindow
*
)
geckoWidget
;
-
(
bool
)
toplevelActiveState
;
-
(
void
)
sendToplevelActivateEvents
;
-
(
void
)
sendToplevelDeactivateEvents
;
end
class
ToolbarWindow
;
interface
TitlebarAndBackgroundColor
:
NSColor
{
ToolbarWindow
*
mWindow
;
}
-
(
id
)
initWithWindow
:
(
ToolbarWindow
*
)
aWindow
;
end
interface
ToolbarWindow
:
BaseWindow
{
TitlebarAndBackgroundColor
*
mColor
;
CGFloat
mUnifiedToolbarHeight
;
NSColor
*
mBackgroundColor
;
NSView
*
mTitlebarView
;
NSRect
mWindowButtonsRect
;
NSRect
mFullScreenButtonRect
;
}
-
(
void
)
setTitlebarColor
:
(
NSColor
*
)
aColor
forActiveWindow
:
(
BOOL
)
aActive
;
-
(
void
)
setUnifiedToolbarHeight
:
(
CGFloat
)
aHeight
;
-
(
CGFloat
)
unifiedToolbarHeight
;
-
(
CGFloat
)
titlebarHeight
;
-
(
NSRect
)
titlebarRect
;
-
(
void
)
setTitlebarNeedsDisplayInRect
:
(
NSRect
)
aRect
sync
:
(
BOOL
)
aSync
;
-
(
void
)
setTitlebarNeedsDisplayInRect
:
(
NSRect
)
aRect
;
-
(
void
)
setDrawsContentsIntoWindowFrame
:
(
BOOL
)
aState
;
-
(
void
)
setSheetAttachmentPosition
:
(
CGFloat
)
aY
;
-
(
void
)
placeWindowButtons
:
(
NSRect
)
aRect
;
-
(
void
)
placeFullScreenButton
:
(
NSRect
)
aRect
;
-
(
NSPoint
)
windowButtonsPositionWithDefaultPosition
:
(
NSPoint
)
aDefaultPosition
;
-
(
NSPoint
)
fullScreenButtonPositionWithDefaultPosition
:
(
NSPoint
)
aDefaultPosition
;
-
(
void
)
setTemporaryBackgroundColor
;
-
(
void
)
restoreBackgroundColor
;
end
class
nsCocoaWindow
:
public
nsBaseWidget
public
nsPIWidgetCocoa
{
private
:
typedef
nsBaseWidget
Inherited
;
public
:
nsCocoaWindow
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSPIWIDGETCOCOA
virtual
MOZ_MUST_USE
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
DesktopIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
override
;
virtual
MOZ_MUST_USE
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
void
Show
(
bool
aState
)
override
;
virtual
nsIWidget
*
GetSheetWindowParent
(
void
)
override
;
virtual
void
Enable
(
bool
aState
)
override
;
virtual
bool
IsEnabled
(
)
const
override
;
virtual
void
SetModal
(
bool
aState
)
override
;
virtual
void
SetFakeModal
(
bool
aState
)
override
;
virtual
bool
IsRunningAppModal
(
)
override
;
virtual
bool
IsVisible
(
)
const
override
;
virtual
nsresult
SetFocus
(
bool
aState
=
false
)
override
;
virtual
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
virtual
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
virtual
LayoutDeviceIntSize
ClientToWindowSize
(
const
LayoutDeviceIntSize
&
aClientSize
)
override
;
virtual
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
virtual
void
ConstrainPosition
(
bool
aAllowSlop
int32_t
*
aX
int32_t
*
aY
)
override
;
virtual
void
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
override
;
virtual
void
Move
(
double
aX
double
aY
)
override
;
virtual
void
SetSizeMode
(
nsSizeMode
aMode
)
override
;
virtual
void
HideWindowChrome
(
bool
aShouldHide
)
override
;
void
EnteredFullScreen
(
bool
aFullScreen
bool
aNativeMode
=
true
)
;
virtual
bool
PrepareForFullscreenTransition
(
nsISupports
*
*
aData
)
override
;
virtual
void
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
override
;
virtual
nsresult
MakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aTargetScreen
=
nullptr
)
override
final
;
virtual
nsresult
MakeFullScreenWithNativeTransition
(
bool
aFullScreen
nsIScreen
*
aTargetScreen
=
nullptr
)
override
final
;
NSAnimation
*
FullscreenTransitionAnimation
(
)
const
{
return
mFullscreenTransitionAnimation
;
}
void
ReleaseFullscreenTransitionAnimation
(
)
{
MOZ_ASSERT
(
mFullscreenTransitionAnimation
"
Should
only
be
called
when
there
is
animation
"
)
;
[
mFullscreenTransitionAnimation
release
]
;
mFullscreenTransitionAnimation
=
nil
;
}
virtual
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
virtual
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
void
ReportMoveEvent
(
)
;
void
ReportSizeEvent
(
)
;
virtual
void
SetCursor
(
nsCursor
aCursor
)
override
;
virtual
nsresult
SetCursor
(
imgIContainer
*
aCursor
uint32_t
aHotspotX
uint32_t
aHotspotY
)
override
;
CGFloat
BackingScaleFactor
(
)
;
void
BackingScaleFactorChanged
(
)
;
virtual
double
GetDefaultScaleInternal
(
)
override
;
virtual
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
final
{
return
mozilla
:
:
DesktopToLayoutDeviceScale
(
BackingScaleFactor
(
)
)
;
}
virtual
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
;
virtual
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
virtual
nsresult
ConfigureChildren
(
const
nsTArray
<
Configuration
>
&
aConfigurations
)
override
;
virtual
LayerManager
*
GetLayerManager
(
PLayerTransactionChild
*
aShadowManager
=
nullptr
LayersBackend
aBackendHint
=
mozilla
:
:
layers
:
:
LayersBackend
:
:
LAYERS_NONE
LayerManagerPersistence
aPersistence
=
LAYER_MANAGER_CURRENT
)
override
;
virtual
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
virtual
void
CaptureRollupEvents
(
nsIRollupListener
*
aListener
bool
aDoCapture
)
override
;
virtual
MOZ_MUST_USE
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
virtual
bool
HasPendingInputEvent
(
)
override
;
virtual
nsTransparencyMode
GetTransparencyMode
(
)
override
;
virtual
void
SetTransparencyMode
(
nsTransparencyMode
aMode
)
override
;
virtual
void
SetWindowShadowStyle
(
int32_t
aStyle
)
override
;
virtual
void
SetWindowOpacity
(
float
aOpacity
)
override
;
virtual
void
SetWindowTransform
(
const
mozilla
:
:
gfx
:
:
Matrix
&
aTransform
)
override
;
virtual
void
SetShowsToolbarButton
(
bool
aShow
)
override
;
virtual
void
SetShowsFullScreenButton
(
bool
aShow
)
override
;
virtual
void
SetWindowAnimationType
(
WindowAnimationType
aType
)
override
;
virtual
void
SetDrawsTitle
(
bool
aDrawTitle
)
override
;
virtual
void
SetUseBrightTitlebarForeground
(
bool
aBrightForeground
)
override
;
virtual
nsresult
SetNonClientMargins
(
LayoutDeviceIntMargin
&
aMargins
)
override
;
virtual
void
SetWindowTitlebarColor
(
nscolor
aColor
bool
aActive
)
override
;
virtual
void
SetDrawsInTitlebar
(
bool
aState
)
override
;
virtual
void
UpdateThemeGeometries
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
override
;
virtual
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
uint32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
void
DispatchSizeModeEvent
(
)
;
virtual
bool
DragEvent
(
unsigned
int
aMessage
mozilla
:
:
gfx
:
:
Point
aMouseGlobal
UInt16
aKeyModifiers
)
;
bool
HasModalDescendents
(
)
{
return
mNumModalDescendents
>
0
;
}
NSWindow
*
GetCocoaWindow
(
)
{
return
mWindow
;
}
void
SetMenuBar
(
nsMenuBarX
*
aMenuBar
)
;
nsMenuBarX
*
GetMenuBar
(
)
;
virtual
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
virtual
InputContext
GetInputContext
(
)
override
{
return
mInputContext
;
}
virtual
void
GetEditCommands
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
SetPopupWindowLevel
(
)
;
bool
InFullScreenMode
(
)
const
{
return
mInFullScreenMode
;
}
protected
:
virtual
~
nsCocoaWindow
(
)
;
nsresult
CreateNativeWindow
(
const
NSRect
&
aRect
nsBorderStyle
aBorderStyle
bool
aRectIsFrameRect
)
;
nsresult
CreatePopupContentView
(
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
)
;
void
DestroyNativeWindow
(
)
;
void
AdjustWindowShadow
(
)
;
void
SetWindowBackgroundBlur
(
)
;
void
UpdateBounds
(
)
;
void
DoResize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
bool
aConstrainToCurrentScreen
)
;
inline
bool
ShouldToggleNativeFullscreen
(
bool
aFullScreen
bool
aUseSystemTransition
)
;
nsresult
DoMakeFullScreen
(
bool
aFullScreen
bool
aUseSystemTransition
)
;
virtual
already_AddRefed
<
nsIWidget
>
AllocateChildPopupWidget
(
)
override
{
static
NS_DEFINE_IID
(
kCPopUpCID
NS_POPUP_CID
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
do_CreateInstance
(
kCPopUpCID
)
;
return
widget
.
forget
(
)
;
}
nsIWidget
*
mParent
;
nsIWidget
*
mAncestorLink
;
BaseWindow
*
mWindow
;
WindowDelegate
*
mDelegate
;
RefPtr
<
nsMenuBarX
>
mMenuBar
;
NSWindow
*
mSheetWindowParent
;
nsChildView
*
mPopupContentView
;
NSAnimation
*
mFullscreenTransitionAnimation
;
int32_t
mShadowStyle
;
CGFloat
mBackingScaleFactor
;
WindowAnimationType
mAnimationType
;
bool
mWindowMadeHere
;
bool
mSheetNeedsShow
;
bool
mInFullScreenMode
;
bool
mInFullScreenTransition
;
bool
mModal
;
bool
mFakeModal
;
bool
mSupportsNativeFullScreen
;
bool
mInNativeFullScreenMode
;
bool
mIsAnimationSuppressed
;
bool
mInReportMoveEvent
;
bool
mInResize
;
bool
mWindowTransformIsIdentity
;
int32_t
mNumModalDescendents
;
InputContext
mInputContext
;
}
;
#
endif
