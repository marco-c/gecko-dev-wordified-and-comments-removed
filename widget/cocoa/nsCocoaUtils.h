#
ifndef
nsCocoaUtils_h_
#
define
nsCocoaUtils_h_
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
nsRect
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIWidget
.
h
"
interface
NSObject
(
BackingScaleFactorCategory
)
-
(
CGFloat
)
backingScaleFactor
;
end
class
nsIWidget
;
namespace
mozilla
{
class
TimeStamp
;
namespace
gfx
{
class
SourceSurface
;
}
namespace
dom
{
class
Promise
;
}
}
using
mozilla
:
:
StaticAutoPtr
;
using
mozilla
:
:
StaticMutex
;
class
nsAutoRetainCocoaObject
{
public
:
explicit
nsAutoRetainCocoaObject
(
id
anObject
)
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
mObject
=
[
anObject
retain
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
~
nsAutoRetainCocoaObject
(
)
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
mObject
release
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
private
:
id
mObject
;
}
;
class
nsAutoreleasePool
{
public
:
nsAutoreleasePool
(
)
{
mLocalPool
=
[
[
NSAutoreleasePool
alloc
]
init
]
;
}
~
nsAutoreleasePool
(
)
{
[
mLocalPool
release
]
;
}
private
:
NSAutoreleasePool
*
mLocalPool
;
}
;
interface
NSApplication
(
Undocumented
)
-
(
BOOL
)
_isRunningModal
;
-
(
BOOL
)
_isRunningAppModal
;
-
(
void
)
_modalSession
:
(
NSModalSession
)
aSession
sendEvent
:
(
NSEvent
*
)
theEvent
;
end
struct
KeyBindingsCommand
{
SEL
selector
;
id
data
;
}
;
interface
NativeKeyBindingsRecorder
:
NSResponder
{
private
nsTArray
<
KeyBindingsCommand
>
*
mCommands
;
}
-
(
void
)
startRecording
:
(
nsTArray
<
KeyBindingsCommand
>
&
)
aCommands
;
-
(
void
)
doCommandBySelector
:
(
SEL
)
aSelector
;
-
(
void
)
insertText
:
(
id
)
aString
;
end
#
if
!
defined
(
MAC_OS_X_VERSION_10_14
)
|
|
MAC_OS_X_VERSION_MAX_ALLOWED
<
MAC_OS_X_VERSION_10_14
typedef
NSString
*
AVMediaType
;
#
endif
class
nsCocoaUtils
{
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
typedef
mozilla
:
:
LayoutDeviceIntPoint
LayoutDeviceIntPoint
;
typedef
mozilla
:
:
LayoutDeviceIntRect
LayoutDeviceIntRect
;
typedef
mozilla
:
:
dom
:
:
Promise
Promise
;
typedef
StaticAutoPtr
<
nsTArray
<
RefPtr
<
Promise
>
>
>
PromiseArray
;
public
:
static
CGFloat
GetBackingScaleFactor
(
id
aObject
)
{
if
(
HiDPIEnabled
(
)
&
&
[
aObject
respondsToSelector
:
selector
(
backingScaleFactor
)
]
)
{
return
[
aObject
backingScaleFactor
]
;
}
return
1
.
0
;
}
static
int32_t
CocoaPointsToDevPixels
(
CGFloat
aPts
CGFloat
aBackingScale
)
{
return
NSToIntRound
(
aPts
*
aBackingScale
)
;
}
static
LayoutDeviceIntPoint
CocoaPointsToDevPixels
(
const
NSPoint
&
aPt
CGFloat
aBackingScale
)
{
return
LayoutDeviceIntPoint
(
NSToIntRound
(
aPt
.
x
*
aBackingScale
)
NSToIntRound
(
aPt
.
y
*
aBackingScale
)
)
;
}
static
LayoutDeviceIntPoint
CocoaPointsToDevPixelsRoundDown
(
const
NSPoint
&
aPt
CGFloat
aBackingScale
)
{
return
LayoutDeviceIntPoint
(
NSToIntFloor
(
aPt
.
x
*
aBackingScale
)
NSToIntFloor
(
aPt
.
y
*
aBackingScale
)
)
;
}
static
LayoutDeviceIntRect
CocoaPointsToDevPixels
(
const
NSRect
&
aRect
CGFloat
aBackingScale
)
{
return
LayoutDeviceIntRect
(
NSToIntRound
(
aRect
.
origin
.
x
*
aBackingScale
)
NSToIntRound
(
aRect
.
origin
.
y
*
aBackingScale
)
NSToIntRound
(
aRect
.
size
.
width
*
aBackingScale
)
NSToIntRound
(
aRect
.
size
.
height
*
aBackingScale
)
)
;
}
static
CGFloat
DevPixelsToCocoaPoints
(
int32_t
aPixels
CGFloat
aBackingScale
)
{
return
(
CGFloat
)
aPixels
/
aBackingScale
;
}
static
NSPoint
DevPixelsToCocoaPoints
(
const
mozilla
:
:
LayoutDeviceIntPoint
&
aPt
CGFloat
aBackingScale
)
{
return
NSMakePoint
(
(
CGFloat
)
aPt
.
x
/
aBackingScale
(
CGFloat
)
aPt
.
y
/
aBackingScale
)
;
}
static
NSPoint
ConvertPointFromScreen
(
NSWindow
*
aWindow
const
NSPoint
&
aPt
)
{
return
[
aWindow
convertRectFromScreen
:
NSMakeRect
(
aPt
.
x
aPt
.
y
0
0
)
]
.
origin
;
}
static
NSPoint
ConvertPointToScreen
(
NSWindow
*
aWindow
const
NSPoint
&
aPt
)
{
return
[
aWindow
convertRectToScreen
:
NSMakeRect
(
aPt
.
x
aPt
.
y
0
0
)
]
.
origin
;
}
static
NSRect
DevPixelsToCocoaPoints
(
const
LayoutDeviceIntRect
&
aRect
CGFloat
aBackingScale
)
{
return
NSMakeRect
(
(
CGFloat
)
aRect
.
X
(
)
/
aBackingScale
(
CGFloat
)
aRect
.
Y
(
)
/
aBackingScale
(
CGFloat
)
aRect
.
Width
(
)
/
aBackingScale
(
CGFloat
)
aRect
.
Height
(
)
/
aBackingScale
)
;
}
static
float
FlippedScreenY
(
float
y
)
;
static
NSRect
GeckoRectToCocoaRect
(
const
mozilla
:
:
DesktopIntRect
&
geckoRect
)
;
static
NSPoint
GeckoPointToCocoaPoint
(
const
mozilla
:
:
DesktopPoint
&
aPoint
)
;
static
NSRect
GeckoRectToCocoaRectDevPix
(
const
mozilla
:
:
LayoutDeviceIntRect
&
aGeckoRect
CGFloat
aBackingScale
)
;
static
mozilla
:
:
DesktopIntRect
CocoaRectToGeckoRect
(
const
NSRect
&
cocoaRect
)
;
static
mozilla
:
:
LayoutDeviceIntRect
CocoaRectToGeckoRectDevPix
(
const
NSRect
&
aCocoaRect
CGFloat
aBackingScale
)
;
static
NSPoint
ScreenLocationForEvent
(
NSEvent
*
anEvent
)
;
static
BOOL
IsEventOverWindow
(
NSEvent
*
anEvent
NSWindow
*
aWindow
)
;
static
NSPoint
EventLocationForWindow
(
NSEvent
*
anEvent
NSWindow
*
aWindow
)
;
static
BOOL
IsMomentumScrollEvent
(
NSEvent
*
aEvent
)
;
static
BOOL
EventHasPhaseInformation
(
NSEvent
*
aEvent
)
;
static
void
HideOSChromeOnScreen
(
bool
aShouldHide
)
;
static
nsIWidget
*
GetHiddenWindowWidget
(
)
;
static
void
PrepareForNativeAppModalDialog
(
)
;
static
void
CleanUpAfterNativeAppModalDialog
(
)
;
static
nsresult
CreateCGImageFromSurface
(
SourceSurface
*
aSurface
CGImageRef
*
aResult
bool
*
aIsEntirelyBlack
=
nullptr
)
;
static
nsresult
CreateNSImageFromCGImage
(
CGImageRef
aInputImage
NSImage
*
*
aResult
)
;
static
nsresult
CreateNSImageFromImageContainer
(
imgIContainer
*
aImage
uint32_t
aWhichFrame
const
nsPresContext
*
aPresContext
const
mozilla
:
:
ComputedStyle
*
aComputedStyle
NSImage
*
*
aResult
CGFloat
scaleFactor
bool
*
aIsEntirelyBlack
=
nullptr
)
;
static
nsresult
CreateDualRepresentationNSImageFromImageContainer
(
imgIContainer
*
aImage
uint32_t
aWhichFrame
const
nsPresContext
*
aPresContext
const
mozilla
:
:
ComputedStyle
*
aComputedStyle
NSImage
*
*
aResult
bool
*
aIsEntirelyBlack
=
nullptr
)
;
static
void
GetStringForNSString
(
const
NSString
*
aSrc
nsAString
&
aDist
)
;
static
NSString
*
ToNSString
(
const
nsAString
&
aString
)
;
static
NSURL
*
ToNSURL
(
const
nsAString
&
aURLString
)
;
static
NSString
*
ToNSString
(
const
nsACString
&
aCString
)
;
static
void
GeckoRectToNSRect
(
const
nsIntRect
&
aGeckoRect
NSRect
&
aOutCocoaRect
)
;
static
void
NSRectToGeckoRect
(
const
NSRect
&
aCocoaRect
nsIntRect
&
aOutGeckoRect
)
;
static
NSEvent
*
MakeNewCocoaEventWithType
(
NSEventType
aEventType
NSEvent
*
aEvent
)
;
static
NSEvent
*
MakeNewCococaEventFromWidgetEvent
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aKeyEvent
NSInteger
aWindowNumber
NSGraphicsContext
*
aContext
)
;
static
void
InitInputEvent
(
mozilla
:
:
WidgetInputEvent
&
aInputEvent
NSEvent
*
aNativeEvent
)
;
static
mozilla
:
:
Modifiers
ModifiersForEvent
(
NSEvent
*
aNativeEvent
)
;
static
UInt32
ConvertToCarbonModifier
(
NSUInteger
aCocoaModifier
)
;
static
bool
HiDPIEnabled
(
)
;
static
void
GetCommandsFromKeyEvent
(
NSEvent
*
aEvent
nsTArray
<
KeyBindingsCommand
>
&
aCommands
)
;
static
uint32_t
ConvertGeckoNameToMacCharCode
(
const
nsAString
&
aKeyCodeName
)
;
static
uint32_t
ConvertGeckoKeyCodeToMacCharCode
(
uint32_t
aKeyCode
)
;
static
NSEventModifierFlags
ConvertWidgetModifiersToMacModifierFlags
(
nsIWidget
:
:
Modifiers
aNativeModifiers
)
;
static
mozilla
:
:
MouseButton
ButtonForEvent
(
NSEvent
*
aEvent
)
;
static
NSMutableAttributedString
*
GetNSMutableAttributedString
(
const
nsAString
&
aText
const
nsTArray
<
mozilla
:
:
FontRange
>
&
aFontRanges
const
bool
aIsVertical
const
CGFloat
aBackingScaleFactor
)
;
static
mozilla
:
:
TimeStamp
GetEventTimeStamp
(
NSTimeInterval
aEventTime
)
;
static
bool
ShouldZoomOnTitlebarDoubleClick
(
)
;
static
bool
ShouldMinimizeOnTitlebarDoubleClick
(
)
;
static
nsresult
GetVideoCapturePermissionState
(
uint16_t
&
aPermissionState
)
;
static
nsresult
GetAudioCapturePermissionState
(
uint16_t
&
aPermissionState
)
;
static
nsresult
GetScreenCapturePermissionState
(
uint16_t
&
aPermissionState
)
;
static
nsresult
RequestVideoCapturePermission
(
RefPtr
<
Promise
>
&
aPromise
)
;
static
nsresult
RequestAudioCapturePermission
(
RefPtr
<
Promise
>
&
aPromise
)
;
static
nsresult
MaybeRequestScreenCapturePermission
(
)
;
static
void
InvalidateHiDPIState
(
)
;
private
:
static
void
(
^
AudioCompletionHandler
)
(
BOOL
)
;
static
void
(
^
VideoCompletionHandler
)
(
BOOL
)
;
static
void
ResolveAudioCapturePromises
(
bool
aGranted
)
;
static
void
ResolveVideoCapturePromises
(
bool
aGranted
)
;
static
nsresult
RequestCapturePermission
(
NSString
*
aType
RefPtr
<
Promise
>
&
aPromise
PromiseArray
&
aPromiseList
void
(
^
aHandler
)
(
BOOL
granted
)
)
;
static
void
ResolveMediaCapturePromises
(
bool
aGranted
PromiseArray
&
aPromiseList
)
;
static
PromiseArray
sVideoCapturePromises
;
static
PromiseArray
sAudioCapturePromises
;
static
StaticMutex
sMediaCaptureMutex
MOZ_UNANNOTATED
;
}
;
#
endif
