#
include
"
CocoaCompositorWidget
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
nsIWidget
.
h
"
namespace
mozilla
{
namespace
widget
{
CocoaCompositorWidget
:
:
CocoaCompositorWidget
(
const
layers
:
:
CompositorOptions
&
aOptions
)
:
CompositorWidget
(
aOptions
)
{
}
CocoaCompositorWidget
:
:
~
CocoaCompositorWidget
(
)
{
}
void
CocoaCompositorWidget
:
:
Init
(
CompositorWidgetInitData
&
&
aInitData
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
CocoaCompositorWidgetInitData
cocoaInitData
(
std
:
:
move
(
(
aInitData
)
.
get_CocoaCompositorWidgetInitData
(
)
)
)
;
mClientSize
=
cocoaInitData
.
clientSize
(
)
;
}
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRoot
>
CocoaCompositorWidget
:
:
GetNativeLayerRoot
(
)
{
if
(
!
mNativeLayerRoot
)
{
CreateNativeLayerRoot
(
)
;
MOZ_ASSERT
(
mNativeLayerRoot
)
;
}
return
mNativeLayerRoot
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
CocoaCompositorWidget
:
:
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
return
nullptr
;
}
void
CocoaCompositorWidget
:
:
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
}
LayoutDeviceIntSize
CocoaCompositorWidget
:
:
GetClientSize
(
)
{
return
mClientSize
;
}
void
CocoaCompositorWidget
:
:
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
{
mClientSize
=
LayoutDeviceIntSize
(
std
:
:
min
(
aClientSize
.
width
MOZ_WIDGET_MAX_SIZE
)
std
:
:
min
(
aClientSize
.
height
MOZ_WIDGET_MAX_SIZE
)
)
;
}
void
CocoaCompositorWidget
:
:
CreateNativeLayerRoot
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
}
}
}
