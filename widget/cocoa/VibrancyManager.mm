#
include
"
VibrancyManager
.
h
"
#
import
<
objc
/
message
.
h
>
#
include
"
nsChildView
.
h
"
#
include
"
SDKDeclarations
.
h
"
using
namespace
mozilla
;
interface
MOZVibrantView
:
NSVisualEffectView
{
VibrancyType
mType
;
}
-
(
instancetype
)
initWithFrame
:
(
NSRect
)
aRect
vibrancyType
:
(
VibrancyType
)
aVibrancyType
;
end
interface
MOZVibrantLeafView
:
MOZVibrantView
end
static
NSVisualEffectState
VisualEffectStateForVibrancyType
(
VibrancyType
aType
)
{
switch
(
aType
)
{
case
VibrancyType
:
:
TOOLTIP
:
case
VibrancyType
:
:
MENU
:
case
VibrancyType
:
:
HIGHLIGHTED_MENUITEM
:
return
NSVisualEffectStateActive
;
default
:
return
NSVisualEffectStateFollowsWindowActiveState
;
}
}
static
NSVisualEffectMaterial
VisualEffectMaterialForVibrancyType
(
VibrancyType
aType
BOOL
*
aOutIsEmphasized
)
{
switch
(
aType
)
{
case
VibrancyType
:
:
TOOLTIP
:
return
(
NSVisualEffectMaterial
)
NSVisualEffectMaterialToolTip
;
case
VibrancyType
:
:
MENU
:
return
NSVisualEffectMaterialMenu
;
case
VibrancyType
:
:
SOURCE_LIST
:
return
NSVisualEffectMaterialSidebar
;
case
VibrancyType
:
:
SOURCE_LIST_SELECTION
:
return
NSVisualEffectMaterialSelection
;
case
VibrancyType
:
:
HIGHLIGHTED_MENUITEM
:
case
VibrancyType
:
:
ACTIVE_SOURCE_LIST_SELECTION
:
*
aOutIsEmphasized
=
YES
;
return
NSVisualEffectMaterialSelection
;
}
}
implementation
MOZVibrantView
-
(
instancetype
)
initWithFrame
:
(
NSRect
)
aRect
vibrancyType
:
(
VibrancyType
)
aType
{
self
=
[
super
initWithFrame
:
aRect
]
;
mType
=
aType
;
self
.
appearance
=
nil
;
self
.
state
=
VisualEffectStateForVibrancyType
(
mType
)
;
BOOL
isEmphasized
=
NO
;
self
.
material
=
VisualEffectMaterialForVibrancyType
(
mType
&
isEmphasized
)
;
self
.
emphasized
=
isEmphasized
;
return
self
;
}
end
implementation
MOZVibrantLeafView
-
(
NSView
*
)
hitTest
:
(
NSPoint
)
aPoint
{
return
nil
;
}
-
(
BOOL
)
allowsVibrancy
{
return
NO
;
}
end
bool
VibrancyManager
:
:
UpdateVibrantRegion
(
VibrancyType
aType
const
LayoutDeviceIntRegion
&
aRegion
)
{
if
(
aRegion
.
IsEmpty
(
)
)
{
return
mVibrantRegions
.
Remove
(
uint32_t
(
aType
)
)
;
}
auto
&
vr
=
*
mVibrantRegions
.
GetOrInsertNew
(
uint32_t
(
aType
)
)
;
return
vr
.
UpdateRegion
(
aRegion
mCoordinateConverter
mContainerView
^
(
)
{
return
this
-
>
CreateEffectView
(
aType
)
;
}
)
;
}
LayoutDeviceIntRegion
VibrancyManager
:
:
GetUnionOfVibrantRegions
(
)
const
{
LayoutDeviceIntRegion
result
;
for
(
const
auto
&
region
:
mVibrantRegions
.
Values
(
)
)
{
result
.
OrWith
(
region
-
>
Region
(
)
)
;
}
return
result
;
}
NSView
*
VibrancyManager
:
:
CreateEffectView
(
VibrancyType
aType
BOOL
aIsContainer
)
{
return
aIsContainer
?
[
[
MOZVibrantView
alloc
]
initWithFrame
:
NSZeroRect
vibrancyType
:
aType
]
:
[
[
MOZVibrantLeafView
alloc
]
initWithFrame
:
NSZeroRect
vibrancyType
:
aType
]
;
}
