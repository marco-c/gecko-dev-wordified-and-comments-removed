#
ifndef
nsMenuItemX_h_
#
define
nsMenuItemX_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsMenuBaseX
.
h
"
#
include
"
nsMenuGroupOwnerX
.
h
"
#
include
"
nsChangeObserver
.
h
"
#
include
"
nsStringFwd
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
class
nsMenuItemIconX
;
class
nsMenuX
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
}
enum
{
knsMenuItemNoModifier
=
0
knsMenuItemShiftModifier
=
(
1
<
<
0
)
knsMenuItemAltModifier
=
(
1
<
<
1
)
knsMenuItemControlModifier
=
(
1
<
<
2
)
knsMenuItemCommandModifier
=
(
1
<
<
3
)
}
;
enum
EMenuItemType
{
eRegularMenuItemType
=
0
eCheckboxMenuItemType
eRadioMenuItemType
eSeparatorMenuItemType
}
;
class
nsMenuItemX
final
:
public
nsMenuObjectX
public
nsChangeObserver
{
public
:
nsMenuItemX
(
nsMenuX
*
aParent
const
nsString
&
aLabel
EMenuItemType
aItemType
nsMenuGroupOwnerX
*
aMenuGroupOwner
nsIContent
*
aNode
)
;
virtual
~
nsMenuItemX
(
)
;
NS_DECL_CHANGEOBSERVER
void
*
NativeData
(
)
override
{
return
(
void
*
)
mNativeMenuItem
;
}
nsMenuObjectTypeX
MenuObjectType
(
)
override
{
return
eMenuItemObjectType
;
}
nsresult
SetChecked
(
bool
aIsChecked
)
;
EMenuItemType
GetMenuItemType
(
)
;
void
DoCommand
(
)
;
nsresult
DispatchDOMEvent
(
const
nsString
&
eventName
bool
*
preventDefaultCalled
)
;
void
SetupIcon
(
)
;
protected
:
void
UncheckRadioSiblings
(
nsIContent
*
inCheckedElement
)
;
void
SetKeyEquiv
(
)
;
EMenuItemType
mType
;
NSMenuItem
*
mNativeMenuItem
=
nil
;
nsMenuX
*
mMenuParent
=
nullptr
;
nsMenuGroupOwnerX
*
mMenuGroupOwner
=
nullptr
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mCommandElement
;
mozilla
:
:
UniquePtr
<
nsMenuItemIconX
>
mIcon
;
bool
mIsChecked
=
false
;
}
;
#
endif
