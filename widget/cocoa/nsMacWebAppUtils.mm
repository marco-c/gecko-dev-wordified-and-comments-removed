#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
nsMacWebAppUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsObjCExceptions
.
h
"
NS_IMPL_ISUPPORTS
(
nsMacWebAppUtils
nsIMacWebAppUtils
)
NS_IMETHODIMP
nsMacWebAppUtils
:
:
PathForAppWithIdentifier
(
const
nsAString
&
bundleIdentifier
nsAString
&
outPath
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
outPath
.
Truncate
(
)
;
nsAutoreleasePool
localPool
;
NSString
*
temp
=
[
[
NSWorkspace
sharedWorkspace
]
absolutePathForAppBundleWithIdentifier
:
[
NSString
stringWithCharacters
:
reinterpret_cast
<
const
unichar
*
>
(
(
(
nsString
)
bundleIdentifier
)
.
get
(
)
)
length
:
(
(
nsString
)
bundleIdentifier
)
.
Length
(
)
]
]
;
if
(
temp
)
{
nsCocoaUtils
:
:
GetStringForNSString
(
temp
outPath
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsMacWebAppUtils
:
:
LaunchAppWithIdentifier
(
const
nsAString
&
bundleIdentifier
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
nsAutoreleasePool
localPool
;
BOOL
success
=
[
[
NSWorkspace
sharedWorkspace
]
launchAppWithBundleIdentifier
:
[
NSString
stringWithCharacters
:
reinterpret_cast
<
const
unichar
*
>
(
(
(
nsString
)
bundleIdentifier
)
.
get
(
)
)
length
:
(
(
nsString
)
bundleIdentifier
)
.
Length
(
)
]
options
:
(
NSWorkspaceLaunchOptions
)
0
additionalEventParamDescriptor
:
nil
launchIdentifier
:
NULL
]
;
return
success
?
NS_OK
:
NS_ERROR_FAILURE
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsMacWebAppUtils
:
:
TrashApp
(
const
nsAString
&
path
nsITrashAppCallback
*
aCallback
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
if
(
NS_WARN_IF
(
!
aCallback
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsCOMPtr
<
nsITrashAppCallback
>
callback
=
aCallback
;
NSString
*
tempString
=
[
NSString
stringWithCharacters
:
reinterpret_cast
<
const
unichar
*
>
(
(
(
nsString
)
path
)
.
get
(
)
)
length
:
path
.
Length
(
)
]
;
[
[
NSWorkspace
sharedWorkspace
]
recycleURLs
:
[
NSArray
arrayWithObject
:
[
NSURL
fileURLWithPath
:
tempString
]
]
completionHandler
:
^
(
NSDictionary
*
newURLs
NSError
*
error
)
{
nsresult
rv
=
(
error
=
=
nil
)
?
NS_OK
:
NS_ERROR_FAILURE
;
callback
-
>
TrashAppFinished
(
rv
)
;
}
]
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
