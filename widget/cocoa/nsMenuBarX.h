#
ifndef
nsMenuBarX_h_
#
define
nsMenuBarX_h_
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsMenuBaseX
.
h
"
#
include
"
nsMenuGroupOwnerX
.
h
"
#
include
"
nsChangeObserver
.
h
"
#
include
"
nsString
.
h
"
class
nsMenuBarX
;
class
nsMenuX
;
class
nsIWidget
;
class
nsIContent
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
Element
;
}
}
interface
ApplicationMenuDelegate
:
NSObject
<
NSMenuDelegate
>
{
nsMenuBarX
*
mApplicationMenu
;
}
-
(
id
)
initWithApplicationMenu
:
(
nsMenuBarX
*
)
aApplicationMenu
;
end
interface
GeckoNSMenu
:
NSMenu
{
}
-
(
BOOL
)
performSuperKeyEquivalent
:
(
NSEvent
*
)
aEvent
;
end
interface
NativeMenuItemTarget
:
NSObject
{
}
-
(
IBAction
)
menuItemHit
:
(
id
)
aSender
;
end
interface
GeckoServicesNSMenuItem
:
NSMenuItem
{
}
-
(
id
)
target
;
-
(
SEL
)
action
;
-
(
void
)
_doNothing
:
(
id
)
aSender
;
end
interface
GeckoServicesNSMenu
:
NSMenu
{
}
-
(
void
)
addItem
:
(
NSMenuItem
*
)
aNewItem
;
-
(
NSMenuItem
*
)
addItemWithTitle
:
(
NSString
*
)
aString
action
:
(
SEL
)
aSelector
keyEquivalent
:
(
NSString
*
)
aKeyEquiv
;
-
(
void
)
insertItem
:
(
NSMenuItem
*
)
aNewItem
atIndex
:
(
NSInteger
)
aIndex
;
-
(
NSMenuItem
*
)
insertItemWithTitle
:
(
NSString
*
)
aString
action
:
(
SEL
)
aSelector
keyEquivalent
:
(
NSString
*
)
aKeyEquiv
atIndex
:
(
NSInteger
)
aIndex
;
-
(
void
)
_overrideClassOfMenuItem
:
(
NSMenuItem
*
)
aMenuItem
;
end
class
nsMenuBarX
:
public
nsMenuGroupOwnerX
public
nsChangeObserver
{
public
:
nsMenuBarX
(
)
;
virtual
~
nsMenuBarX
(
)
;
static
NativeMenuItemTarget
*
sNativeEventTarget
;
static
nsMenuBarX
*
sLastGeckoMenuBarPainted
;
nsCOMPtr
<
nsIContent
>
mAboutItemContent
;
nsCOMPtr
<
nsIContent
>
mPrefItemContent
;
nsCOMPtr
<
nsIContent
>
mQuitItemContent
;
NS_DECL_CHANGEOBSERVER
void
*
NativeData
(
)
override
{
return
(
void
*
)
mNativeMenu
;
}
nsMenuObjectTypeX
MenuObjectType
(
)
override
{
return
eMenuBarObjectType
;
}
nsresult
Create
(
nsIWidget
*
aParent
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
void
SetParent
(
nsIWidget
*
aParent
)
;
uint32_t
GetMenuCount
(
)
;
bool
MenuContainsAppMenu
(
)
;
nsMenuX
*
GetMenuAt
(
uint32_t
aIndex
)
;
nsMenuX
*
GetXULHelpMenu
(
)
;
void
SetSystemHelpMenu
(
)
;
nsresult
Paint
(
)
;
void
ForceUpdateNativeMenuAt
(
const
nsAString
&
aIndexString
)
;
void
ForceNativeMenuReload
(
)
;
static
void
ResetNativeApplicationMenu
(
)
;
void
SetNeedsRebuild
(
)
;
void
ApplicationMenuOpened
(
)
;
bool
PerformKeyEquivalent
(
NSEvent
*
aEvent
)
;
protected
:
void
ConstructNativeMenus
(
)
;
void
ConstructFallbackNativeMenus
(
)
;
void
InsertMenuAtIndex
(
mozilla
:
:
UniquePtr
<
nsMenuX
>
&
&
aMenu
uint32_t
aIndex
)
;
void
RemoveMenuAtIndex
(
uint32_t
aIndex
)
;
void
HideItem
(
mozilla
:
:
dom
:
:
Document
*
aDocument
const
nsAString
&
aID
nsIContent
*
*
aOutHiddenNode
)
;
void
AquifyMenuBar
(
)
;
NSMenuItem
*
CreateNativeAppMenuItem
(
nsMenuX
*
aMenu
const
nsAString
&
aNodeID
SEL
aAction
int
aTag
NativeMenuItemTarget
*
aTarget
)
;
void
CreateApplicationMenu
(
nsMenuX
*
aMenu
)
;
nsTArray
<
mozilla
:
:
UniquePtr
<
nsMenuX
>
>
mMenuArray
;
nsIWidget
*
mParentWindow
;
GeckoNSMenu
*
mNativeMenu
;
bool
mNeedsRebuild
;
ApplicationMenuDelegate
*
mApplicationMenuDelegate
;
}
;
#
endif
