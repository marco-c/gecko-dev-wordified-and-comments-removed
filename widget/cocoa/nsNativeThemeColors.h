#
ifndef
nsNativeThemeColors_h_
#
define
nsNativeThemeColors_h_
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
nsCocoaFeatures
.
h
"
#
include
"
SDKDeclarations
.
h
"
#
include
"
mozilla
/
ColorScheme
.
h
"
enum
ColorName
{
toolbarTopBorderGrey
toolbarFillGrey
toolbarBottomBorderGrey
}
;
static
const
int
sLionThemeColors
[
]
[
2
]
=
{
{
0xD0
0xF0
}
{
0xB2
0xE1
}
{
0x59
0x87
}
}
;
static
const
int
sYosemiteThemeColors
[
]
[
2
]
=
{
{
0xBD
0xDF
}
{
0xD3
0xF6
}
{
0xB3
0xD1
}
}
;
inline
int
NativeGreyColorAsInt
(
ColorName
name
BOOL
isMain
)
{
return
sYosemiteThemeColors
[
name
]
[
isMain
?
0
:
1
]
;
}
inline
float
NativeGreyColorAsFloat
(
ColorName
name
BOOL
isMain
)
{
return
NativeGreyColorAsInt
(
name
isMain
)
/
255
.
0f
;
}
inline
void
DrawNativeGreyColorInRect
(
CGContextRef
context
ColorName
name
CGRect
rect
BOOL
isMain
)
{
float
grey
=
NativeGreyColorAsFloat
(
name
isMain
)
;
CGContextSetRGBFillColor
(
context
grey
grey
grey
1
.
0f
)
;
CGContextFillRect
(
context
rect
)
;
}
inline
NSColor
*
ControlAccentColor
(
)
{
if
(
available
(
macOS
10
.
14
*
)
)
{
return
[
NSColor
controlAccentColor
]
;
}
return
[
NSColor
currentControlTint
]
=
=
NSGraphiteControlTint
?
[
NSColor
colorWithSRGBRed
:
0
.
635
green
:
0
.
635
blue
:
0
.
655
alpha
:
1
.
0
]
:
[
NSColor
colorWithSRGBRed
:
0
.
247
green
:
0
.
584
blue
:
0
.
965
alpha
:
1
.
0
]
;
}
inline
NSAppearance
*
NSAppearanceForColorScheme
(
mozilla
:
:
ColorScheme
aScheme
)
{
if
(
available
(
macOS
10
.
14
*
)
)
{
NSAppearanceName
appearanceName
=
aScheme
=
=
mozilla
:
:
ColorScheme
:
:
Light
?
NSAppearanceNameAqua
:
NSAppearanceNameDarkAqua
;
return
[
NSAppearance
appearanceNamed
:
appearanceName
]
;
}
return
[
NSAppearance
appearanceNamed
:
NSAppearanceNameAqua
]
;
}
#
endif
