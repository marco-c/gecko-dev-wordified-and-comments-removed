#
include
"
HeadlessCompositorWidget
.
h
"
#
include
"
HeadlessWidget
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
InProcessCocoaCompositorWidget
.
h
"
#
include
"
nsCocoaWindow
.
h
"
namespace
mozilla
{
namespace
widget
{
RefPtr
<
CompositorWidget
>
CompositorWidget
:
:
CreateLocal
(
const
CompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aWidget
)
;
if
(
aInitData
.
type
(
)
=
=
CompositorWidgetInitData
:
:
THeadlessCompositorWidgetInitData
)
{
return
new
HeadlessCompositorWidget
(
aInitData
aOptions
static_cast
<
HeadlessWidget
*
>
(
aWidget
)
)
;
}
else
{
return
new
InProcessCocoaCompositorWidget
(
aInitData
.
get_CocoaCompositorWidgetInitData
(
)
aOptions
static_cast
<
nsCocoaWindow
*
>
(
aWidget
)
)
;
}
}
InProcessCocoaCompositorWidget
:
:
InProcessCocoaCompositorWidget
(
const
CocoaCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsCocoaWindow
*
aWindow
)
:
CocoaCompositorWidget
(
aOptions
)
mWindow
(
aWindow
)
{
mClientSize
=
aInitData
.
clientSize
(
)
;
}
void
InProcessCocoaCompositorWidget
:
:
ObserveVsync
(
VsyncObserver
*
aObserver
)
{
if
(
RefPtr
<
CompositorVsyncDispatcher
>
cvd
=
mWindow
-
>
GetCompositorVsyncDispatcher
(
)
)
{
cvd
-
>
SetCompositorVsyncObserver
(
aObserver
)
;
}
}
nsIWidget
*
InProcessCocoaCompositorWidget
:
:
RealWidget
(
)
{
return
mWindow
;
}
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRoot
>
InProcessCocoaCompositorWidget
:
:
GetNativeLayerRoot
(
)
{
return
mWindow
-
>
GetNativeLayerRoot
(
)
;
}
void
InProcessCocoaCompositorWidget
:
:
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
{
CocoaCompositorWidget
:
:
NotifyClientSizeChanged
(
aClientSize
)
;
}
}
}
