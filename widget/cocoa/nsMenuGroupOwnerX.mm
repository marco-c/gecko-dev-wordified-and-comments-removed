#
include
"
nsMenuGroupOwnerX
.
h
"
#
include
"
nsMenuBarX
.
h
"
#
include
"
nsMenuX
.
h
"
#
include
"
nsMenuItemX
.
h
"
#
include
"
nsMenuUtilsX
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsCocoaWindow
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsINode
.
h
"
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS
(
nsMenuGroupOwnerX
nsIObserver
nsIMutationObserver
)
nsMenuGroupOwnerX
:
:
nsMenuGroupOwnerX
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsMenuBarX
*
aMenuBarIfMenuBar
)
:
mContent
(
aElement
)
mMenuBar
(
aMenuBarIfMenuBar
)
{
mRepresentedObject
=
[
[
MOZMenuItemRepresentedObject
alloc
]
initWithMenuGroupOwner
:
this
]
;
}
nsMenuGroupOwnerX
:
:
~
nsMenuGroupOwnerX
(
)
{
MOZ_ASSERT
(
mContentToObserverTable
.
Count
(
)
=
=
0
"
have
outstanding
mutation
observers
!
\
n
"
)
;
[
mRepresentedObject
setMenuGroupOwner
:
nullptr
]
;
[
mRepresentedObject
release
]
;
}
void
nsMenuGroupOwnerX
:
:
InstallOrUninstallRootMutationObserver
(
)
{
if
(
!
mContent
)
{
return
;
}
bool
shouldObserveMutationsOnRoot
=
!
mContentToObserverTable
.
IsEmpty
(
)
;
if
(
!
mObservingMutationsOnRoot
&
&
shouldObserveMutationsOnRoot
)
{
mContent
-
>
AddMutationObserver
(
this
)
;
mObservingMutationsOnRoot
=
true
;
}
else
if
(
mObservingMutationsOnRoot
&
&
!
shouldObserveMutationsOnRoot
)
{
mContent
-
>
RemoveMutationObserver
(
this
)
;
mObservingMutationsOnRoot
=
false
;
}
}
void
nsMenuGroupOwnerX
:
:
CharacterDataWillChange
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
}
void
nsMenuGroupOwnerX
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
)
{
}
void
nsMenuGroupOwnerX
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
for
(
nsIContent
*
cur
=
aFirstNewContent
;
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
)
{
ContentInserted
(
cur
)
;
}
}
void
nsMenuGroupOwnerX
:
:
NodeWillBeDestroyed
(
nsINode
*
aNode
)
{
}
void
nsMenuGroupOwnerX
:
:
AttributeWillChange
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
}
void
nsMenuGroupOwnerX
:
:
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
nsCOMPtr
<
nsIMutationObserver
>
kungFuDeathGrip
(
this
)
;
nsChangeObserver
*
obs
=
LookupContentChangeObserver
(
aElement
)
;
if
(
obs
)
{
obs
-
>
ObserveAttributeChanged
(
aElement
-
>
OwnerDoc
(
)
aElement
aAttribute
)
;
}
}
void
nsMenuGroupOwnerX
:
:
ContentWillBeRemoved
(
nsIContent
*
aChild
const
BatchRemovalState
*
)
{
nsIContent
*
container
=
aChild
-
>
GetParent
(
)
;
if
(
!
container
)
{
return
;
}
nsCOMPtr
<
nsIMutationObserver
>
kungFuDeathGrip
(
this
)
;
nsChangeObserver
*
obs
=
LookupContentChangeObserver
(
container
)
;
if
(
obs
)
{
obs
-
>
ObserveContentRemoved
(
aChild
-
>
OwnerDoc
(
)
container
aChild
)
;
}
else
if
(
container
!
=
mContent
)
{
nsCOMPtr
<
nsIContent
>
parent
=
container
-
>
GetParent
(
)
;
if
(
parent
)
{
obs
=
LookupContentChangeObserver
(
parent
)
;
if
(
obs
)
{
obs
-
>
ObserveContentRemoved
(
aChild
-
>
OwnerDoc
(
)
container
aChild
)
;
}
}
}
}
void
nsMenuGroupOwnerX
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
nsIContent
*
container
=
aChild
-
>
GetParent
(
)
;
if
(
!
container
)
{
return
;
}
nsCOMPtr
<
nsIMutationObserver
>
kungFuDeathGrip
(
this
)
;
nsChangeObserver
*
obs
=
LookupContentChangeObserver
(
container
)
;
if
(
obs
)
{
obs
-
>
ObserveContentInserted
(
aChild
-
>
OwnerDoc
(
)
container
aChild
)
;
}
else
if
(
container
!
=
mContent
)
{
nsCOMPtr
<
nsIContent
>
parent
=
container
-
>
GetParent
(
)
;
if
(
parent
)
{
obs
=
LookupContentChangeObserver
(
parent
)
;
if
(
obs
)
{
obs
-
>
ObserveContentInserted
(
aChild
-
>
OwnerDoc
(
)
container
aChild
)
;
}
}
}
}
void
nsMenuGroupOwnerX
:
:
ParentChainChanged
(
nsIContent
*
aContent
)
{
}
void
nsMenuGroupOwnerX
:
:
ARIAAttributeDefaultWillChange
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttribute
int32_t
aModType
)
{
}
void
nsMenuGroupOwnerX
:
:
ARIAAttributeDefaultChanged
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttribute
int32_t
aModType
)
{
}
void
nsMenuGroupOwnerX
:
:
RegisterForContentChanges
(
nsIContent
*
aContent
nsChangeObserver
*
aMenuObject
)
{
if
(
mContentToObserverTable
.
Contains
(
aContent
)
)
{
return
;
}
mContentToObserverTable
.
InsertOrUpdate
(
aContent
aMenuObject
)
;
if
(
!
mContent
|
|
!
aContent
-
>
IsInclusiveDescendantOf
(
mContent
)
)
{
aContent
-
>
AddMutationObserver
(
this
)
;
}
InstallOrUninstallRootMutationObserver
(
)
;
}
void
nsMenuGroupOwnerX
:
:
UnregisterForContentChanges
(
nsIContent
*
aContent
)
{
if
(
!
mContentToObserverTable
.
Contains
(
aContent
)
)
{
return
;
}
mContentToObserverTable
.
Remove
(
aContent
)
;
if
(
!
mContent
|
|
!
aContent
-
>
IsInclusiveDescendantOf
(
mContent
)
)
{
aContent
-
>
RemoveMutationObserver
(
this
)
;
}
InstallOrUninstallRootMutationObserver
(
)
;
}
void
nsMenuGroupOwnerX
:
:
RegisterForLocaleChanges
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
AddObserver
(
this
"
intl
:
app
-
locales
-
changed
"
false
)
;
}
}
void
nsMenuGroupOwnerX
:
:
UnregisterForLocaleChanges
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
RemoveObserver
(
this
"
intl
:
app
-
locales
-
changed
"
)
;
}
}
NS_IMETHODIMP
nsMenuGroupOwnerX
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
mMenuBar
&
&
!
strcmp
(
aTopic
"
intl
:
app
-
locales
-
changed
"
)
)
{
mMenuBar
-
>
SetNeedsRebuild
(
)
;
}
return
NS_OK
;
}
nsChangeObserver
*
nsMenuGroupOwnerX
:
:
LookupContentChangeObserver
(
nsIContent
*
aContent
)
{
nsChangeObserver
*
result
;
if
(
mContentToObserverTable
.
Get
(
aContent
&
result
)
)
{
return
result
;
}
return
nullptr
;
}
uint32_t
nsMenuGroupOwnerX
:
:
RegisterForCommand
(
nsMenuItemX
*
aMenuItem
)
{
+
+
mCurrentCommandID
;
mCommandToMenuObjectTable
.
InsertOrUpdate
(
mCurrentCommandID
aMenuItem
)
;
return
mCurrentCommandID
;
}
void
nsMenuGroupOwnerX
:
:
UnregisterCommand
(
uint32_t
aCommandID
)
{
mCommandToMenuObjectTable
.
Remove
(
aCommandID
)
;
}
nsMenuItemX
*
nsMenuGroupOwnerX
:
:
GetMenuItemForCommandID
(
uint32_t
aCommandID
)
{
nsMenuItemX
*
result
;
if
(
mCommandToMenuObjectTable
.
Get
(
aCommandID
&
result
)
)
{
return
result
;
}
return
nullptr
;
}
implementation
MOZMenuItemRepresentedObject
{
nsMenuGroupOwnerX
*
mMenuGroupOwner
;
}
-
(
id
)
initWithMenuGroupOwner
:
(
nsMenuGroupOwnerX
*
)
aMenuGroupOwner
{
self
=
[
super
init
]
;
mMenuGroupOwner
=
aMenuGroupOwner
;
return
self
;
}
-
(
void
)
setMenuGroupOwner
:
(
nsMenuGroupOwnerX
*
)
aMenuGroupOwner
{
mMenuGroupOwner
=
aMenuGroupOwner
;
}
-
(
nsMenuGroupOwnerX
*
)
menuGroupOwner
{
return
mMenuGroupOwner
;
}
end
