#
include
"
nsPrintSettingsX
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
plbase64
.
h
"
#
include
"
plstr
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
using
namespace
mozilla
;
#
define
MAC_OS_X_PAGE_SETUP_PREFNAME
"
print
.
macosx
.
pagesetup
-
2
"
#
define
COCOA_PAPER_UNITS_PER_INCH
72
.
0
NS_IMPL_ISUPPORTS_INHERITED
(
nsPrintSettingsX
nsPrintSettings
nsPrintSettingsX
)
nsPrintSettingsX
:
:
nsPrintSettingsX
(
)
:
mAdjustedPaperWidth
{
0
.
0
}
mAdjustedPaperHeight
{
0
.
0
}
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
mPrintInfo
=
[
[
NSPrintInfo
sharedPrintInfo
]
copy
]
;
mWidthScale
=
COCOA_PAPER_UNITS_PER_INCH
;
mHeightScale
=
COCOA_PAPER_UNITS_PER_INCH
;
mSaveOnCancel
=
false
;
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
already_AddRefed
<
nsIPrintSettings
>
CreatePlatformPrintSettings
(
const
PrintSettingsInitializer
&
aSettings
)
{
RefPtr
<
nsPrintSettings
>
settings
=
new
nsPrintSettingsX
(
)
;
settings
-
>
InitWithInitializer
(
aSettings
)
;
settings
-
>
SetDefaultFileName
(
)
;
return
settings
.
forget
(
)
;
}
nsPrintSettingsX
:
:
~
nsPrintSettingsX
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
[
mPrintInfo
release
]
;
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
nsPrintSettingsX
&
nsPrintSettingsX
:
:
operator
=
(
const
nsPrintSettingsX
&
rhs
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
if
(
this
=
=
&
rhs
)
{
return
*
this
;
}
nsPrintSettings
:
:
operator
=
(
rhs
)
;
[
mPrintInfo
release
]
;
mPrintInfo
=
[
rhs
.
mPrintInfo
copy
]
;
mWidthScale
=
rhs
.
mWidthScale
;
mHeightScale
=
rhs
.
mHeightScale
;
mAdjustedPaperWidth
=
rhs
.
mAdjustedPaperWidth
;
mAdjustedPaperHeight
=
rhs
.
mAdjustedPaperHeight
;
return
*
this
;
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
*
this
)
;
}
nsresult
nsPrintSettingsX
:
:
Init
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
InitUnwriteableMargin
(
)
;
InitAdjustedPaperSize
(
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
InitUnwriteableMargin
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
PMPaper
paper
;
PMPaperMargins
paperMargin
;
PMPageFormat
pageFormat
=
GetPMPageFormat
(
)
;
:
:
PMGetPageFormatPaper
(
pageFormat
&
paper
)
;
:
:
PMPaperGetMargins
(
paper
&
paperMargin
)
;
mUnwriteableMargin
.
top
=
NS_POINTS_TO_INT_TWIPS
(
paperMargin
.
top
)
;
mUnwriteableMargin
.
left
=
NS_POINTS_TO_INT_TWIPS
(
paperMargin
.
left
)
;
mUnwriteableMargin
.
bottom
=
NS_POINTS_TO_INT_TWIPS
(
paperMargin
.
bottom
)
;
mUnwriteableMargin
.
right
=
NS_POINTS_TO_INT_TWIPS
(
paperMargin
.
right
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
InitAdjustedPaperSize
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
PMPageFormat
pageFormat
=
GetPMPageFormat
(
)
;
PMRect
paperRect
;
:
:
PMGetAdjustedPaperRect
(
pageFormat
&
paperRect
)
;
mAdjustedPaperWidth
=
paperRect
.
right
-
paperRect
.
left
;
mAdjustedPaperHeight
=
paperRect
.
bottom
-
paperRect
.
top
;
int32_t
orientation
;
GetOrientation
(
&
orientation
)
;
if
(
kLandscapeOrientation
=
=
orientation
)
{
std
:
:
swap
(
mAdjustedPaperWidth
mAdjustedPaperHeight
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
void
nsPrintSettingsX
:
:
SetCocoaPrintInfo
(
NSPrintInfo
*
aPrintInfo
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
if
(
mPrintInfo
!
=
aPrintInfo
)
{
[
mPrintInfo
release
]
;
mPrintInfo
=
[
aPrintInfo
retain
]
;
}
NSDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
NSString
*
printerName
=
[
dict
objectForKey
:
NSPrintPrinterName
]
;
if
(
printerName
)
{
nsAutoString
name
;
nsCocoaUtils
:
:
GetStringForNSString
(
printerName
name
)
;
nsPrintSettings
:
:
SetPrinterName
(
name
)
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
nsresult
nsPrintSettingsX
:
:
ReadPageFormatFromPrefs
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsAutoCString
encodedData
;
nsresult
rv
=
Preferences
:
:
GetCString
(
MAC_OS_X_PAGE_SETUP_PREFNAME
encodedData
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
char
*
decodedData
=
PL_Base64Decode
(
encodedData
.
get
(
)
encodedData
.
Length
(
)
nullptr
)
;
NSData
*
data
=
[
NSData
dataWithBytes
:
decodedData
length
:
strlen
(
decodedData
)
]
;
if
(
!
data
)
return
NS_ERROR_FAILURE
;
PMPageFormat
newPageFormat
;
OSStatus
status
=
:
:
PMPageFormatCreateWithDataRepresentation
(
(
CFDataRef
)
data
&
newPageFormat
)
;
if
(
status
=
=
noErr
)
{
SetPMPageFormat
(
newPageFormat
)
;
}
InitUnwriteableMargin
(
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsPrintSettingsX
:
:
WritePageFormatToPrefs
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
PMPageFormat
pageFormat
=
GetPMPageFormat
(
)
;
if
(
pageFormat
=
=
kPMNoPageFormat
)
return
NS_ERROR_NOT_INITIALIZED
;
NSData
*
data
=
nil
;
OSStatus
err
=
:
:
PMPageFormatCreateDataRepresentation
(
pageFormat
(
CFDataRef
*
)
&
data
kPMDataFormatXMLDefault
)
;
if
(
err
!
=
noErr
)
return
NS_ERROR_FAILURE
;
nsAutoCString
encodedData
;
encodedData
.
Adopt
(
PL_Base64Encode
(
(
char
*
)
[
data
bytes
]
[
data
length
]
nullptr
)
)
;
if
(
!
encodedData
.
get
(
)
)
return
NS_ERROR_OUT_OF_MEMORY
;
return
Preferences
:
:
SetCString
(
MAC_OS_X_PAGE_SETUP_PREFNAME
encodedData
)
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsPrintSettingsX
:
:
_Clone
(
nsIPrintSettings
*
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
auto
newSettings
=
MakeRefPtr
<
nsPrintSettingsX
>
(
)
;
*
newSettings
=
*
this
;
newSettings
.
forget
(
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
_Assign
(
nsIPrintSettings
*
aPS
)
{
nsPrintSettingsX
*
printSettingsX
=
static_cast
<
nsPrintSettingsX
*
>
(
aPS
)
;
if
(
!
printSettingsX
)
return
NS_ERROR_UNEXPECTED
;
*
this
=
*
printSettingsX
;
return
NS_OK
;
}
PMPrintSettings
nsPrintSettingsX
:
:
GetPMPrintSettings
(
)
{
return
static_cast
<
PMPrintSettings
>
(
[
mPrintInfo
PMPrintSettings
]
)
;
}
PMPrintSession
nsPrintSettingsX
:
:
GetPMPrintSession
(
)
{
return
static_cast
<
PMPrintSession
>
(
[
mPrintInfo
PMPrintSession
]
)
;
}
PMPageFormat
nsPrintSettingsX
:
:
GetPMPageFormat
(
)
{
return
static_cast
<
PMPageFormat
>
(
[
mPrintInfo
PMPageFormat
]
)
;
}
void
nsPrintSettingsX
:
:
SetPMPageFormat
(
PMPageFormat
aPageFormat
)
{
PMPageFormat
oldPageFormat
=
GetPMPageFormat
(
)
;
:
:
PMCopyPageFormat
(
aPageFormat
oldPageFormat
)
;
[
mPrintInfo
updateFromPMPageFormat
]
;
}
void
nsPrintSettingsX
:
:
SetInchesScale
(
float
aWidthScale
float
aHeightScale
)
{
if
(
aWidthScale
>
0
&
&
aHeightScale
>
0
)
{
mWidthScale
=
aWidthScale
;
mHeightScale
=
aHeightScale
;
}
}
void
nsPrintSettingsX
:
:
GetInchesScale
(
float
*
aWidthScale
float
*
aHeightScale
)
{
*
aWidthScale
=
mWidthScale
;
*
aHeightScale
=
mHeightScale
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetPaperWidth
(
double
aPaperWidth
)
{
mPaperWidth
=
aPaperWidth
;
mAdjustedPaperWidth
=
aPaperWidth
*
mWidthScale
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetPaperHeight
(
double
aPaperHeight
)
{
mPaperHeight
=
aPaperHeight
;
mAdjustedPaperHeight
=
aPaperHeight
*
mHeightScale
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetEffectivePageSize
(
double
*
aWidth
double
*
aHeight
)
{
if
(
kPaperSizeInches
=
=
GetCocoaUnit
(
mPaperSizeUnit
)
)
{
*
aWidth
=
NS_INCHES_TO_TWIPS
(
mAdjustedPaperWidth
/
mWidthScale
)
;
*
aHeight
=
NS_INCHES_TO_TWIPS
(
mAdjustedPaperHeight
/
mHeightScale
)
;
}
else
{
*
aWidth
=
NS_MILLIMETERS_TO_TWIPS
(
mAdjustedPaperWidth
/
mWidthScale
)
;
*
aHeight
=
NS_MILLIMETERS_TO_TWIPS
(
mAdjustedPaperHeight
/
mHeightScale
)
;
}
int32_t
orientation
;
GetOrientation
(
&
orientation
)
;
if
(
kLandscapeOrientation
=
=
orientation
)
{
std
:
:
swap
(
*
aWidth
*
aHeight
)
;
}
return
NS_OK
;
}
void
nsPrintSettingsX
:
:
GetFilePageSize
(
double
*
aWidth
double
*
aHeight
)
{
double
height
width
;
if
(
kPaperSizeInches
=
=
GetCocoaUnit
(
mPaperSizeUnit
)
)
{
width
=
NS_INCHES_TO_TWIPS
(
mAdjustedPaperWidth
/
mWidthScale
)
;
height
=
NS_INCHES_TO_TWIPS
(
mAdjustedPaperHeight
/
mHeightScale
)
;
}
else
{
width
=
NS_MILLIMETERS_TO_TWIPS
(
mAdjustedPaperWidth
/
mWidthScale
)
;
height
=
NS_MILLIMETERS_TO_TWIPS
(
mAdjustedPaperHeight
/
mHeightScale
)
;
}
width
/
=
TWIPS_PER_POINT_FLOAT
;
height
/
=
TWIPS_PER_POINT_FLOAT
;
*
aWidth
=
width
;
*
aHeight
=
height
;
}
void
nsPrintSettingsX
:
:
SetAdjustedPaperSize
(
double
aWidth
double
aHeight
)
{
mAdjustedPaperWidth
=
aWidth
;
mAdjustedPaperHeight
=
aHeight
;
}
void
nsPrintSettingsX
:
:
GetAdjustedPaperSize
(
double
*
aWidth
double
*
aHeight
)
{
*
aWidth
=
mAdjustedPaperWidth
;
*
aHeight
=
mAdjustedPaperHeight
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetPrintRange
(
int16_t
aPrintRange
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetPrintRange
(
aPrintRange
)
;
if
(
XRE_IsParentProcess
(
)
)
{
BOOL
allPages
=
aPrintRange
=
=
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
?
NO
:
YES
;
NSMutableDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
[
dict
setObject
:
[
NSNumber
numberWithBool
:
allPages
]
forKey
:
NSPrintAllPages
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetPrinterName
(
const
nsAString
&
aName
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetPrinterName
(
aName
)
;
if
(
XRE_IsParentProcess
(
)
)
{
NSString
*
name
=
nsCocoaUtils
:
:
ToNSString
(
aName
)
;
[
mPrintInfo
setPrinter
:
[
NSPrinter
printerWithName
:
name
]
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetStartPageRange
(
int32_t
*
aStartPageRange
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
MOZ_ASSERT
(
aStartPageRange
)
;
if
(
XRE_IsParentProcess
(
)
)
{
NSDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
*
aStartPageRange
=
[
[
dict
objectForKey
:
NSPrintFirstPage
]
intValue
]
;
}
else
{
nsPrintSettings
:
:
GetStartPageRange
(
aStartPageRange
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetStartPageRange
(
int32_t
aStartPageRange
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
NSMutableDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
aStartPageRange
]
forKey
:
NSPrintFirstPage
]
;
}
else
{
nsPrintSettings
:
:
SetStartPageRange
(
aStartPageRange
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetEndPageRange
(
int32_t
*
aEndPageRange
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
MOZ_ASSERT
(
aEndPageRange
)
;
if
(
XRE_IsParentProcess
(
)
)
{
NSDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
*
aEndPageRange
=
[
[
dict
objectForKey
:
NSPrintLastPage
]
intValue
]
;
}
else
{
nsPrintSettings
:
:
GetEndPageRange
(
aEndPageRange
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetEndPageRange
(
int32_t
aEndPageRange
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
NSMutableDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
aEndPageRange
]
forKey
:
NSPrintLastPage
]
;
}
else
{
nsPrintSettings
:
:
SetEndPageRange
(
aEndPageRange
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetScaling
(
double
aScaling
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
[
mPrintInfo
setScalingFactor
:
CGFloat
(
aScaling
)
]
;
}
else
{
nsPrintSettings
:
:
SetScaling
(
aScaling
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetScaling
(
double
*
aScaling
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
*
aScaling
=
round
(
double
(
[
mPrintInfo
scalingFactor
]
)
*
100
.
0
)
/
100
.
0
;
}
else
{
nsPrintSettings
:
:
GetScaling
(
aScaling
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetToFileName
(
const
nsAString
&
aToFileName
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsContentProcess
(
)
&
&
Preferences
:
:
GetBool
(
"
print
.
print_via_parent
"
)
)
{
return
nsPrintSettings
:
:
SetToFileName
(
aToFileName
)
;
}
if
(
!
aToFileName
.
IsEmpty
(
)
)
{
NSURL
*
jobSavingURL
=
[
NSURL
fileURLWithPath
:
nsCocoaUtils
:
:
ToNSString
(
aToFileName
)
]
;
if
(
jobSavingURL
)
{
NSMutableDictionary
*
printInfoDict
=
[
mPrintInfo
dictionary
]
;
[
printInfoDict
setObject
:
jobSavingURL
forKey
:
NSPrintJobSavingURL
]
;
}
mToFileName
=
aToFileName
;
}
else
{
mToFileName
.
Truncate
(
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
void
nsPrintSettingsX
:
:
SetDispositionSaveToFile
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
[
mPrintInfo
setJobDisposition
:
NSPrintSaveJob
]
;
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetOrientation
(
int32_t
*
aOrientation
)
{
if
(
XRE_IsParentProcess
(
)
)
{
if
(
[
mPrintInfo
orientation
]
=
=
NSPaperOrientationPortrait
)
{
*
aOrientation
=
nsIPrintSettings
:
:
kPortraitOrientation
;
}
else
{
*
aOrientation
=
nsIPrintSettings
:
:
kLandscapeOrientation
;
}
}
else
{
nsPrintSettings
:
:
GetOrientation
(
aOrientation
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetOrientation
(
int32_t
aOrientation
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
if
(
aOrientation
=
=
nsIPrintSettings
:
:
kPortraitOrientation
)
{
[
mPrintInfo
setOrientation
:
NSPaperOrientationPortrait
]
;
}
else
{
[
mPrintInfo
setOrientation
:
NSPaperOrientationLandscape
]
;
}
}
else
{
nsPrintSettings
:
:
SetOrientation
(
aOrientation
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetNumCopies
(
int32_t
*
aCopies
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
NSDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
*
aCopies
=
[
[
dict
objectForKey
:
NSPrintCopies
]
intValue
]
;
}
else
{
nsPrintSettings
:
:
GetNumCopies
(
aCopies
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetNumCopies
(
int32_t
aCopies
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
NSMutableDictionary
*
dict
=
[
mPrintInfo
dictionary
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
aCopies
]
forKey
:
NSPrintCopies
]
;
}
else
{
nsPrintSettings
:
:
SetNumCopies
(
aCopies
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
GetDuplex
(
int32_t
*
aDuplex
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
NSDictionary
*
settings
=
[
mPrintInfo
printSettings
]
;
NSNumber
*
value
=
[
settings
objectForKey
:
"
com_apple_print_PrintSettings_PMDuplexing
"
]
;
if
(
value
)
{
PMDuplexMode
duplexSetting
=
[
value
unsignedShortValue
]
;
switch
(
duplexSetting
)
{
case
kPMDuplexNone
:
*
aDuplex
=
kSimplex
;
break
;
case
kPMDuplexNoTumble
:
*
aDuplex
=
kDuplexHorizontal
;
break
;
case
kPMDuplexTumble
:
*
aDuplex
=
kDuplexVertical
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
duplex
value
"
)
;
return
NS_ERROR_FAILURE
;
}
}
else
{
*
aDuplex
=
kSimplex
;
}
}
else
{
nsPrintSettings
:
:
GetDuplex
(
aDuplex
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetDuplex
(
int32_t
aDuplex
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
XRE_IsParentProcess
(
)
)
{
PMDuplexMode
duplexSetting
;
switch
(
aDuplex
)
{
case
kSimplex
:
duplexSetting
=
kPMDuplexNone
;
break
;
case
kDuplexVertical
:
duplexSetting
=
kPMDuplexNoTumble
;
break
;
case
kDuplexHorizontal
:
duplexSetting
=
kPMDuplexTumble
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
duplex
value
"
)
;
return
NS_ERROR_FAILURE
;
}
NSMutableDictionary
*
settings
=
[
mPrintInfo
printSettings
]
;
[
settings
setObject
:
[
NSNumber
numberWithUnsignedShort
:
duplexSetting
]
forKey
:
"
com_apple_print_PrintSettings_PMDuplexing
"
]
;
}
else
{
nsPrintSettings
:
:
SetDuplex
(
aDuplex
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetUnwriteableMarginTop
(
double
aUnwriteableMarginTop
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetUnwriteableMarginTop
(
aUnwriteableMarginTop
)
;
if
(
XRE_IsParentProcess
(
)
)
{
[
mPrintInfo
setTopMargin
:
aUnwriteableMarginTop
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetUnwriteableMarginLeft
(
double
aUnwriteableMarginLeft
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetUnwriteableMarginLeft
(
aUnwriteableMarginLeft
)
;
if
(
XRE_IsParentProcess
(
)
)
{
[
mPrintInfo
setLeftMargin
:
aUnwriteableMarginLeft
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetUnwriteableMarginBottom
(
double
aUnwriteableMarginBottom
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetUnwriteableMarginBottom
(
aUnwriteableMarginBottom
)
;
if
(
XRE_IsParentProcess
(
)
)
{
[
mPrintInfo
setBottomMargin
:
aUnwriteableMarginBottom
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
SetUnwriteableMarginRight
(
double
aUnwriteableMarginRight
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsPrintSettings
:
:
SetUnwriteableMarginRight
(
aUnwriteableMarginRight
)
;
if
(
XRE_IsParentProcess
(
)
)
{
[
mPrintInfo
setRightMargin
:
aUnwriteableMarginRight
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
int
nsPrintSettingsX
:
:
GetCocoaUnit
(
int16_t
aGeckoUnit
)
{
if
(
aGeckoUnit
=
=
kPaperSizeMillimeters
)
return
kPaperSizeMillimeters
;
else
return
kPaperSizeInches
;
}
nsresult
nsPrintSettingsX
:
:
SetCocoaPaperSize
(
double
aWidth
double
aHeight
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
[
mPrintInfo
orientation
]
=
=
NSPaperOrientationPortrait
)
{
[
mPrintInfo
setPaperSize
:
NSMakeSize
(
aWidth
aHeight
)
]
;
}
else
{
[
mPrintInfo
setPaperSize
:
NSMakeSize
(
aHeight
aWidth
)
]
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
void
nsPrintSettingsX
:
:
SetPrinterNameFromPrintInfo
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
mPrintInfo
)
;
NSString
*
nsPrinterNameValue
=
[
[
mPrintInfo
printer
]
name
]
;
if
(
nsPrinterNameValue
)
{
nsAutoString
printerName
;
nsCocoaUtils
:
:
GetStringForNSString
(
nsPrinterNameValue
printerName
)
;
mPrinter
.
Assign
(
printerName
)
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
