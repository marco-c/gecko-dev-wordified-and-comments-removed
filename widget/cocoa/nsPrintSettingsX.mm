#
include
"
nsPrintSettingsX
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
plbase64
.
h
"
#
include
"
plstr
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
using
namespace
mozilla
;
#
define
MAC_OS_X_PAGE_SETUP_PREFNAME
"
print
.
macosx
.
pagesetup
-
2
"
NS_IMPL_ISUPPORTS_INHERITED
(
nsPrintSettingsX
nsPrintSettings
nsPrintSettingsX
)
nsPrintSettingsX
:
:
nsPrintSettingsX
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
mDestination
=
kPMDestinationInvalid
;
mSaveOnCancel
=
false
;
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
already_AddRefed
<
nsIPrintSettings
>
CreatePlatformPrintSettings
(
const
PrintSettingsInitializer
&
aSettings
)
{
RefPtr
<
nsPrintSettings
>
settings
=
new
nsPrintSettingsX
(
)
;
settings
-
>
InitWithInitializer
(
aSettings
)
;
settings
-
>
SetDefaultFileName
(
)
;
return
settings
.
forget
(
)
;
}
nsPrintSettingsX
&
nsPrintSettingsX
:
:
operator
=
(
const
nsPrintSettingsX
&
rhs
)
{
if
(
this
=
=
&
rhs
)
{
return
*
this
;
}
nsPrintSettings
:
:
operator
=
(
rhs
)
;
mDestination
=
rhs
.
mDestination
;
mDisposition
=
rhs
.
mDisposition
;
return
*
this
;
}
nsresult
nsPrintSettingsX
:
:
ReadPageFormatFromPrefs
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
nsAutoCString
encodedData
;
nsresult
rv
=
Preferences
:
:
GetCString
(
MAC_OS_X_PAGE_SETUP_PREFNAME
encodedData
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
char
*
decodedData
=
PL_Base64Decode
(
encodedData
.
get
(
)
encodedData
.
Length
(
)
nullptr
)
;
NSData
*
data
=
[
NSData
dataWithBytes
:
decodedData
length
:
strlen
(
decodedData
)
]
;
if
(
!
data
)
{
return
NS_ERROR_FAILURE
;
}
PMPageFormat
newPageFormat
;
OSStatus
status
=
:
:
PMPageFormatCreateWithDataRepresentation
(
(
CFDataRef
)
data
&
newPageFormat
)
;
if
(
status
=
=
noErr
)
{
SetPMPageFormat
(
newPageFormat
)
;
}
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsPrintSettingsX
:
:
WritePageFormatToPrefs
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
NSPrintInfo
*
printInfo
=
CreatePrintInfo
(
)
;
if
(
NS_WARN_IF
(
!
printInfo
)
)
{
return
NS_ERROR_FAILURE
;
}
[
printInfo
autorelease
]
;
PMPageFormat
pageFormat
=
static_cast
<
PMPageFormat
>
(
[
printInfo
PMPageFormat
]
)
;
NSData
*
data
=
nil
;
OSStatus
err
=
:
:
PMPageFormatCreateDataRepresentation
(
pageFormat
(
CFDataRef
*
)
&
data
kPMDataFormatXMLDefault
)
;
if
(
err
!
=
noErr
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
encodedData
;
encodedData
.
Adopt
(
PL_Base64Encode
(
(
char
*
)
[
data
bytes
]
[
data
length
]
nullptr
)
)
;
if
(
!
encodedData
.
get
(
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
Preferences
:
:
SetCString
(
MAC_OS_X_PAGE_SETUP_PREFNAME
encodedData
)
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsPrintSettingsX
:
:
_Clone
(
nsIPrintSettings
*
*
_retval
)
{
NS_ENSURE_ARG_POINTER
(
_retval
)
;
auto
newSettings
=
MakeRefPtr
<
nsPrintSettingsX
>
(
)
;
*
newSettings
=
*
this
;
newSettings
.
forget
(
_retval
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsX
:
:
_Assign
(
nsIPrintSettings
*
aPS
)
{
nsPrintSettingsX
*
printSettingsX
=
static_cast
<
nsPrintSettingsX
*
>
(
aPS
)
;
if
(
!
printSettingsX
)
{
return
NS_ERROR_UNEXPECTED
;
}
*
this
=
*
printSettingsX
;
return
NS_OK
;
}
void
nsPrintSettingsX
:
:
SetPMPageFormat
(
PMPageFormat
aPageFormat
)
{
NSPrintInfo
*
printInfo
=
CreatePrintInfo
(
)
;
if
(
NS_WARN_IF
(
!
printInfo
)
)
{
return
;
}
PMPageFormat
oldPageFormat
=
static_cast
<
PMPageFormat
>
(
[
printInfo
PMPageFormat
]
)
;
:
:
PMCopyPageFormat
(
aPageFormat
oldPageFormat
)
;
[
printInfo
updateFromPMPageFormat
]
;
SetPageFormatFromPrintInfo
(
printInfo
)
;
[
printInfo
release
]
;
}
NSPrintInfo
*
nsPrintSettingsX
:
:
CreatePrintInfo
(
bool
aWithScaling
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN
;
NSPrintInfo
*
printInfo
=
[
[
NSPrintInfo
sharedPrintInfo
]
copy
]
;
NSSize
paperSize
;
if
(
mOrientation
=
=
kPortraitOrientation
)
{
[
printInfo
setOrientation
:
NSPaperOrientationPortrait
]
;
paperSize
.
width
=
CocoaPointsFromPaperSize
(
mPaperWidth
)
;
paperSize
.
height
=
CocoaPointsFromPaperSize
(
mPaperHeight
)
;
[
printInfo
setPaperSize
:
paperSize
]
;
}
else
{
[
printInfo
setOrientation
:
NSPaperOrientationLandscape
]
;
paperSize
.
width
=
CocoaPointsFromPaperSize
(
mPaperHeight
)
;
paperSize
.
height
=
CocoaPointsFromPaperSize
(
mPaperWidth
)
;
[
printInfo
setPaperSize
:
paperSize
]
;
}
[
printInfo
setTopMargin
:
mUnwriteableMargin
.
top
]
;
[
printInfo
setRightMargin
:
mUnwriteableMargin
.
right
]
;
[
printInfo
setBottomMargin
:
mUnwriteableMargin
.
bottom
]
;
[
printInfo
setLeftMargin
:
mUnwriteableMargin
.
left
]
;
[
printInfo
setPrinter
:
[
NSPrinter
printerWithName
:
nsCocoaUtils
:
:
ToNSString
(
mPrinter
)
]
]
;
[
printInfo
setScalingFactor
:
CGFloat
(
aWithScaling
?
mScaling
:
1
.
0f
)
]
;
BOOL
allPages
=
mPrintRange
=
=
nsIPrintSettings
:
:
kRangeAllPages
?
YES
:
NO
;
NSMutableDictionary
*
dict
=
[
printInfo
dictionary
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
mNumCopies
]
forKey
:
NSPrintCopies
]
;
[
dict
setObject
:
[
NSNumber
numberWithBool
:
allPages
]
forKey
:
NSPrintAllPages
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
mStartPageNum
]
forKey
:
NSPrintFirstPage
]
;
[
dict
setObject
:
[
NSNumber
numberWithInt
:
mEndPageNum
]
forKey
:
NSPrintLastPage
]
;
NSURL
*
jobSavingURL
=
nullptr
;
if
(
!
mToFileName
.
IsEmpty
(
)
)
{
jobSavingURL
=
[
NSURL
fileURLWithPath
:
nsCocoaUtils
:
:
ToNSString
(
mToFileName
)
]
;
if
(
jobSavingURL
)
{
[
dict
setObject
:
jobSavingURL
forKey
:
NSPrintJobSavingURL
]
;
}
}
if
(
mDisposition
.
IsEmpty
(
)
)
{
if
(
mPrintToFile
)
{
[
printInfo
setJobDisposition
:
NSPrintSaveJob
]
;
}
else
{
[
printInfo
setJobDisposition
:
NSPrintSpoolJob
]
;
}
}
else
{
[
printInfo
setJobDisposition
:
nsCocoaUtils
:
:
ToNSString
(
mDisposition
)
]
;
}
PMDuplexMode
duplexSetting
;
switch
(
mDuplex
)
{
default
:
MOZ_FALLTHROUGH_ASSERT
(
"
Unknown
duplex
value
"
)
;
case
kSimplex
:
duplexSetting
=
kPMDuplexNone
;
break
;
case
kDuplexVertical
:
duplexSetting
=
kPMDuplexTumble
;
break
;
case
kDuplexHorizontal
:
duplexSetting
=
kPMDuplexNoTumble
;
break
;
}
NSMutableDictionary
*
printSettings
=
[
printInfo
printSettings
]
;
[
printSettings
setObject
:
[
NSNumber
numberWithUnsignedShort
:
duplexSetting
]
forKey
:
"
com_apple_print_PrintSettings_PMDuplexing
"
]
;
if
(
mDestination
!
=
kPMDestinationInvalid
)
{
[
printSettings
setObject
:
[
NSNumber
numberWithUnsignedShort
:
mDestination
]
forKey
:
"
com_apple_print_PrintSettings_PMDestinationType
"
]
;
if
(
jobSavingURL
)
{
[
printSettings
setObject
:
[
jobSavingURL
absoluteString
]
forKey
:
"
com_apple_print_PrintSettings_PMOutputFilename
"
]
;
}
}
return
printInfo
;
NS_OBJC_END_TRY_ABORT_BLOCK_RETURN
(
nullptr
)
;
}
void
nsPrintSettingsX
:
:
SetPageFormatFromPrintInfo
(
const
NSPrintInfo
*
aPrintInfo
)
{
NSSize
paperSize
=
[
aPrintInfo
paperSize
]
;
if
(
[
aPrintInfo
orientation
]
=
=
NSPaperOrientationPortrait
)
{
mOrientation
=
nsIPrintSettings
:
:
kPortraitOrientation
;
SetPaperWidth
(
PaperSizeFromCocoaPoints
(
paperSize
.
width
)
)
;
SetPaperHeight
(
PaperSizeFromCocoaPoints
(
paperSize
.
height
)
)
;
}
else
{
mOrientation
=
nsIPrintSettings
:
:
kLandscapeOrientation
;
SetPaperWidth
(
PaperSizeFromCocoaPoints
(
paperSize
.
height
)
)
;
SetPaperHeight
(
PaperSizeFromCocoaPoints
(
paperSize
.
width
)
)
;
}
mUnwriteableMargin
.
top
=
[
aPrintInfo
topMargin
]
;
mUnwriteableMargin
.
right
=
[
aPrintInfo
rightMargin
]
;
mUnwriteableMargin
.
bottom
=
[
aPrintInfo
bottomMargin
]
;
mUnwriteableMargin
.
left
=
[
aPrintInfo
leftMargin
]
;
SetIsInitializedFromPrinter
(
true
)
;
}
void
nsPrintSettingsX
:
:
SetFromPrintInfo
(
const
NSPrintInfo
*
aPrintInfo
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK
;
SetPageFormatFromPrintInfo
(
aPrintInfo
)
;
nsCocoaUtils
:
:
GetStringForNSString
(
[
[
aPrintInfo
printer
]
name
]
mPrinter
)
;
bool
isShrinkToFitChecked
;
GetShrinkToFit
(
&
isShrinkToFitChecked
)
;
if
(
!
isShrinkToFitChecked
)
{
mScaling
=
round
(
double
(
[
aPrintInfo
scalingFactor
]
)
*
100
.
0
)
/
100
.
0
;
}
mPrintToFile
=
[
aPrintInfo
jobDisposition
]
=
=
NSPrintSaveJob
;
NSDictionary
*
dict
=
[
aPrintInfo
dictionary
]
;
const
char
*
filePath
=
[
[
dict
objectForKey
:
NSPrintJobSavingURL
]
fileSystemRepresentation
]
;
if
(
filePath
&
&
*
filePath
)
{
CopyUTF8toUTF16
(
Span
(
filePath
strlen
(
filePath
)
)
mToFileName
)
;
}
nsCocoaUtils
:
:
GetStringForNSString
(
[
aPrintInfo
jobDisposition
]
mDisposition
)
;
mNumCopies
=
[
[
dict
objectForKey
:
NSPrintCopies
]
intValue
]
;
mPrintRange
=
[
[
dict
objectForKey
:
NSPrintAllPages
]
boolValue
]
?
nsIPrintSettings
:
:
kRangeAllPages
:
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
;
mStartPageNum
=
[
[
dict
objectForKey
:
NSPrintFirstPage
]
intValue
]
;
mEndPageNum
=
[
[
dict
objectForKey
:
NSPrintLastPage
]
intValue
]
;
NSDictionary
*
printSettings
=
[
aPrintInfo
printSettings
]
;
NSNumber
*
value
=
[
printSettings
objectForKey
:
"
com_apple_print_PrintSettings_PMDuplexing
"
]
;
if
(
value
)
{
PMDuplexMode
duplexSetting
=
[
value
unsignedShortValue
]
;
switch
(
duplexSetting
)
{
default
:
MOZ_FALLTHROUGH_ASSERT
(
"
Unknown
duplex
value
"
)
;
case
kPMDuplexNone
:
mDuplex
=
kSimplex
;
break
;
case
kPMDuplexNoTumble
:
mDuplex
=
kDuplexHorizontal
;
break
;
case
kPMDuplexTumble
:
mDuplex
=
kDuplexVertical
;
break
;
}
}
else
{
mDuplex
=
kSimplex
;
}
value
=
[
printSettings
objectForKey
:
"
com_apple_print_PrintSettings_PMDestinationType
"
]
;
if
(
value
)
{
mDestination
=
[
value
unsignedShortValue
]
;
}
NS_OBJC_END_TRY_ABORT_BLOCK
;
}
