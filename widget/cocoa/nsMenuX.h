#
ifndef
nsMenuX_h_
#
define
nsMenuX_h_
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsMenuParentX
.
h
"
#
include
"
nsMenuBarX
.
h
"
#
include
"
nsMenuGroupOwnerX
.
h
"
#
include
"
nsMenuItemIconX
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsChangeObserver
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
nsMenuX
;
class
nsMenuItemX
;
class
nsIWidget
;
interface
MenuDelegate
:
NSObject
<
NSMenuDelegate
>
{
nsMenuX
*
mGeckoMenu
;
}
-
(
id
)
initWithGeckoMenu
:
(
nsMenuX
*
)
geckoMenu
;
end
class
nsMenuX
final
:
public
nsMenuParentX
public
nsChangeObserver
public
nsMenuItemIconX
:
:
Listener
{
public
:
using
MenuChild
=
mozilla
:
:
Variant
<
RefPtr
<
nsMenuX
>
RefPtr
<
nsMenuItemX
>
>
;
nsMenuX
(
nsMenuParentX
*
aParent
nsMenuGroupOwnerX
*
aMenuGroupOwner
nsIContent
*
aContent
)
;
NS_INLINE_DECL_REFCOUNTING
(
nsMenuX
)
static
int32_t
sIndexingMenuLevel
;
NS_DECL_CHANGEOBSERVER
void
IconUpdated
(
)
override
;
void
DetachFromGroupOwnerRecursive
(
)
;
void
DetachFromParent
(
)
{
mParent
=
nullptr
;
}
mozilla
:
:
Maybe
<
MenuChild
>
GetItemAt
(
uint32_t
aPos
)
;
uint32_t
GetItemCount
(
)
;
mozilla
:
:
Maybe
<
MenuChild
>
GetVisibleItemAt
(
uint32_t
aPos
)
;
nsresult
GetVisibleItemCount
(
uint32_t
&
aCount
)
;
bool
OnOpen
(
)
;
nsEventStatus
MenuOpened
(
)
;
void
MenuClosed
(
)
;
void
MenuClosedAsync
(
)
;
bool
Close
(
)
;
void
SetRebuild
(
bool
aMenuEvent
)
;
void
SetupIcon
(
)
;
nsIContent
*
Content
(
)
{
return
mContent
;
}
NSMenuItem
*
NativeNSMenuItem
(
)
{
return
mNativeMenuItem
;
}
GeckoNSMenu
*
NativeNSMenu
(
)
{
return
mNativeMenu
;
}
void
SetIconListener
(
nsMenuItemIconX
:
:
Listener
*
aListener
)
{
mIconListener
=
aListener
;
}
void
ClearIconListener
(
)
{
mIconListener
=
nullptr
;
}
void
InsertChildNativeMenuItem
(
nsMenuX
*
aChild
)
override
;
void
RemoveChildNativeMenuItem
(
nsMenuX
*
aChild
)
override
;
void
Dump
(
uint32_t
aIndent
)
const
;
static
bool
IsXULHelpMenu
(
nsIContent
*
aMenuContent
)
;
class
Observer
{
public
:
virtual
void
OnMenuOpened
(
)
=
0
;
virtual
void
OnMenuClosed
(
)
=
0
;
}
;
void
SetObserver
(
Observer
*
aObserver
)
{
mObserver
=
aObserver
;
}
void
ClearObserver
(
)
{
mObserver
=
nullptr
;
}
protected
:
virtual
~
nsMenuX
(
)
;
void
RebuildMenu
(
)
;
nsresult
RemoveAll
(
)
;
nsresult
SetEnabled
(
bool
aIsEnabled
)
;
nsresult
GetEnabled
(
bool
*
aIsEnabled
)
;
already_AddRefed
<
nsIContent
>
GetMenuPopupContent
(
)
;
void
AddMenuItem
(
RefPtr
<
nsMenuItemX
>
&
&
aMenuItem
)
;
void
AddMenu
(
RefPtr
<
nsMenuX
>
&
&
aMenu
)
;
void
LoadMenuItem
(
nsIContent
*
aMenuItemContent
)
;
void
LoadSubMenu
(
nsIContent
*
aMenuContent
)
;
GeckoNSMenu
*
CreateMenuWithGeckoString
(
nsString
&
aMenuTitle
)
;
void
UnregisterCommands
(
)
;
NSInteger
CalculateNativeInsertionPoint
(
nsMenuX
*
aChild
)
;
void
FlushMenuClosedRunnable
(
)
;
nsCOMPtr
<
nsIContent
>
mContent
;
nsTArray
<
MenuChild
>
mMenuChildren
;
nsString
mLabel
;
uint32_t
mVisibleItemsCount
=
0
;
nsMenuParentX
*
mParent
=
nullptr
;
nsMenuGroupOwnerX
*
mMenuGroupOwner
=
nullptr
;
nsMenuItemIconX
:
:
Listener
*
mIconListener
=
nullptr
;
mozilla
:
:
UniquePtr
<
nsMenuItemIconX
>
mIcon
;
Observer
*
mObserver
=
nullptr
;
RefPtr
<
mozilla
:
:
CancelableRunnable
>
mPendingAsyncMenuCloseRunnable
;
GeckoNSMenu
*
mNativeMenu
=
nil
;
MenuDelegate
*
mMenuDelegate
=
nil
;
NSMenuItem
*
mNativeMenuItem
=
nil
;
bool
mIsEnabled
=
true
;
bool
mNeedsRebuild
=
true
;
bool
mIsOpen
=
false
;
bool
mIsOpenForGecko
=
false
;
bool
mVisible
=
true
;
bool
mDidFirePopupshowingAndIsApprovedToOpen
=
false
;
}
;
#
endif
