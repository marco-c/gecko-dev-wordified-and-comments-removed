#
ifndef
nsDragService_h_
#
define
nsDragService_h_
#
include
"
nsBaseDragService
.
h
"
#
include
"
nsChildView
.
h
"
#
include
<
Cocoa
/
Cocoa
.
h
>
class
nsDragSession
:
public
nsBaseDragSession
{
public
:
NS_IMETHOD
GetData
(
nsITransferable
*
aTransferable
uint32_t
aItemIndex
)
override
;
NS_IMETHOD
IsDataFlavorSupported
(
const
char
*
aDataFlavor
bool
*
_retval
)
override
;
NS_IMETHOD
GetNumDropItems
(
uint32_t
*
aNumItems
)
override
;
NS_IMETHOD
UpdateDragImage
(
nsINode
*
aImage
int32_t
aImageX
int32_t
aImageY
)
override
;
NS_IMETHOD
DragMoved
(
int32_t
aX
int32_t
aY
)
override
;
NSDraggingSession
*
GetNSDraggingSession
(
)
{
return
mNSDraggingSession
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
EndDragSessionImpl
(
bool
aDoneDrag
uint32_t
aKeyModifiers
)
override
;
protected
:
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InvokeDragSessionImpl
(
nsIWidget
*
aWidget
nsIArray
*
anArrayTransferables
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
uint32_t
aActionType
)
override
;
NSImage
*
ConstructDragImage
(
nsINode
*
aDOMNode
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
NSPoint
*
aImagePoint
)
;
NSImage
*
ConstructDragImage
(
nsINode
*
aDOMNode
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
mozilla
:
:
CSSIntPoint
aPoint
mozilla
:
:
LayoutDeviceIntRect
*
aDragRect
)
;
nsCOMPtr
<
nsIArray
>
mDataItems
;
ChildView
*
mNativeDragView
=
nil
;
NSDraggingSession
*
mNSDraggingSession
=
nil
;
NSEvent
*
mNativeDragEvent
=
nil
;
bool
mDragImageChanged
=
false
;
}
;
class
nsDragService
final
:
public
nsBaseDragService
{
public
:
already_AddRefed
<
nsIDragSession
>
CreateDragSession
(
)
override
;
}
;
#
endif
