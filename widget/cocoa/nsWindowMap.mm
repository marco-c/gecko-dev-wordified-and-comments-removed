#
include
"
nsWindowMap
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
nsChildView
.
h
"
#
include
"
nsCocoaWindow
.
h
"
interface
WindowDataMap
(
Private
)
-
(
NSString
*
)
keyForWindow
:
(
NSWindow
*
)
inWindow
;
end
interface
TopLevelWindowData
(
Private
)
-
(
void
)
windowResignedKey
:
(
NSNotification
*
)
inNotification
;
-
(
void
)
windowBecameKey
:
(
NSNotification
*
)
inNotification
;
-
(
void
)
windowWillClose
:
(
NSNotification
*
)
inNotification
;
end
#
pragma
mark
-
implementation
WindowDataMap
+
(
WindowDataMap
*
)
sharedWindowDataMap
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
static
WindowDataMap
*
sWindowMap
=
nil
;
if
(
!
sWindowMap
)
sWindowMap
=
[
[
WindowDataMap
alloc
]
init
]
;
return
sWindowMap
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
id
)
init
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
if
(
(
self
=
[
super
init
]
)
)
{
mWindowMap
=
[
[
NSMutableDictionary
alloc
]
initWithCapacity
:
10
]
;
}
return
self
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
void
)
dealloc
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
mWindowMap
release
]
;
[
super
dealloc
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
-
(
void
)
ensureDataForWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
if
(
!
inWindow
|
|
[
self
dataForWindow
:
inWindow
]
)
return
;
TopLevelWindowData
*
windowData
=
[
[
TopLevelWindowData
alloc
]
initWithWindow
:
inWindow
]
;
[
self
setData
:
windowData
forWindow
:
inWindow
]
;
[
windowData
release
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
-
(
id
)
dataForWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
return
[
mWindowMap
objectForKey
:
[
self
keyForWindow
:
inWindow
]
]
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
void
)
setData
:
(
id
)
inData
forWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
mWindowMap
setObject
:
inData
forKey
:
[
self
keyForWindow
:
inWindow
]
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
-
(
void
)
removeDataForWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
mWindowMap
removeObjectForKey
:
[
self
keyForWindow
:
inWindow
]
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
-
(
NSString
*
)
keyForWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
return
[
NSString
stringWithFormat
:
"
%
p
"
inWindow
]
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
end
implementation
TopLevelWindowData
-
(
id
)
initWithWindow
:
(
NSWindow
*
)
inWindow
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
if
(
(
self
=
[
super
init
]
)
)
{
[
NSNotificationCenter
.
defaultCenter
addObserver
:
self
selector
:
selector
(
windowBecameKey
:
)
name
:
NSWindowDidBecomeKeyNotification
object
:
inWindow
]
;
[
NSNotificationCenter
.
defaultCenter
addObserver
:
self
selector
:
selector
(
windowResignedKey
:
)
name
:
NSWindowDidResignKeyNotification
object
:
inWindow
]
;
[
NSNotificationCenter
.
defaultCenter
addObserver
:
self
selector
:
selector
(
windowBecameMain
:
)
name
:
NSWindowDidBecomeMainNotification
object
:
inWindow
]
;
[
NSNotificationCenter
.
defaultCenter
addObserver
:
self
selector
:
selector
(
windowResignedMain
:
)
name
:
NSWindowDidResignMainNotification
object
:
inWindow
]
;
[
NSNotificationCenter
.
defaultCenter
addObserver
:
self
selector
:
selector
(
windowWillClose
:
)
name
:
NSWindowWillCloseNotification
object
:
inWindow
]
;
}
return
self
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
nil
)
;
}
-
(
void
)
dealloc
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
NSNotificationCenter
.
defaultCenter
removeObserver
:
self
]
;
[
super
dealloc
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
+
(
void
)
activateInWindow
:
(
NSWindow
*
)
aWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
WindowDelegate
*
delegate
=
(
WindowDelegate
*
)
aWindow
.
delegate
;
if
(
!
delegate
|
|
!
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
)
return
;
if
(
[
delegate
toplevelActiveState
]
)
return
;
[
delegate
sendToplevelActivateEvents
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
+
(
void
)
deactivateInWindow
:
(
NSWindow
*
)
aWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
WindowDelegate
*
delegate
=
(
WindowDelegate
*
)
aWindow
.
delegate
;
if
(
!
delegate
|
|
!
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
)
return
;
if
(
!
[
delegate
toplevelActiveState
]
)
return
;
[
delegate
sendToplevelDeactivateEvents
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
+
(
void
)
activateInWindowViews
:
(
NSWindow
*
)
aWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
id
firstResponder
=
aWindow
.
firstResponder
;
if
(
[
firstResponder
isKindOfClass
:
[
ChildView
class
]
]
)
{
[
firstResponder
viewsWindowDidBecomeKey
]
;
}
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
+
(
void
)
deactivateInWindowViews
:
(
NSWindow
*
)
aWindow
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
id
firstResponder
=
aWindow
.
firstResponder
;
if
(
[
firstResponder
isKindOfClass
:
[
ChildView
class
]
]
)
{
[
firstResponder
viewsWindowDidResignKey
]
;
}
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
-
(
void
)
windowBecameKey
:
(
NSNotification
*
)
inNotification
{
NSWindow
*
window
=
inNotification
.
object
;
id
delegate
=
window
.
delegate
;
if
(
!
delegate
|
|
!
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
)
{
[
TopLevelWindowData
activateInWindowViews
:
window
]
;
}
else
if
(
window
.
isSheet
|
|
window
.
isMainWindow
)
{
[
TopLevelWindowData
activateInWindow
:
window
]
;
}
}
-
(
void
)
windowResignedKey
:
(
NSNotification
*
)
inNotification
{
NSWindow
*
window
=
inNotification
.
object
;
id
delegate
=
window
.
delegate
;
if
(
!
delegate
|
|
!
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
)
{
[
TopLevelWindowData
deactivateInWindowViews
:
window
]
;
}
else
if
(
window
.
isSheet
|
|
window
.
isMainWindow
)
{
[
TopLevelWindowData
deactivateInWindow
:
window
]
;
}
}
-
(
void
)
windowBecameMain
:
(
NSNotification
*
)
inNotification
{
NSWindow
*
window
=
inNotification
.
object
;
id
delegate
=
window
.
delegate
;
if
(
delegate
&
&
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
&
&
!
window
.
attachedSheet
&
&
window
.
isKeyWindow
)
{
[
TopLevelWindowData
activateInWindow
:
window
]
;
}
}
-
(
void
)
windowResignedMain
:
(
NSNotification
*
)
inNotification
{
NSWindow
*
window
=
inNotification
.
object
;
id
delegate
=
window
.
delegate
;
if
(
delegate
&
&
[
delegate
isKindOfClass
:
[
WindowDelegate
class
]
]
&
&
!
[
window
attachedSheet
]
&
&
!
[
NSApp
modalWindow
]
)
{
[
TopLevelWindowData
deactivateInWindow
:
window
]
;
}
}
-
(
void
)
windowWillClose
:
(
NSNotification
*
)
inNotification
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
[
[
self
retain
]
autorelease
]
;
[
[
WindowDataMap
sharedWindowDataMap
]
removeDataForWindow
:
[
inNotification
object
]
]
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
end
