#
include
"
nsPrintSettingsServiceX
.
h
"
#
include
"
mozilla
/
Debug
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsPrintSettingsX
.
h
"
#
include
"
nsCocoaUtils
.
h
"
using
namespace
mozilla
:
:
embedding
;
NS_IMETHODIMP
nsPrintSettingsServiceX
:
:
SerializeToPrintData
(
nsIPrintSettings
*
aSettings
PrintData
*
data
)
{
nsresult
rv
=
nsPrintSettingsService
:
:
SerializeToPrintData
(
aSettings
data
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
RefPtr
<
nsPrintSettingsX
>
settingsX
(
do_QueryObject
(
aSettings
)
)
;
if
(
NS_WARN_IF
(
!
settingsX
)
)
{
return
NS_ERROR_FAILURE
;
}
settingsX
-
>
GetDisposition
(
data
-
>
disposition
(
)
)
;
settingsX
-
>
GetDestination
(
&
data
-
>
destination
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsServiceX
:
:
DeserializeToPrintSettings
(
const
PrintData
&
data
nsIPrintSettings
*
settings
)
{
nsresult
rv
=
nsPrintSettingsService
:
:
DeserializeToPrintSettings
(
data
settings
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
RefPtr
<
nsPrintSettingsX
>
settingsX
(
do_QueryObject
(
settings
)
)
;
if
(
NS_WARN_IF
(
!
settingsX
)
)
{
return
NS_ERROR_FAILURE
;
}
settingsX
-
>
SetDisposition
(
data
.
disposition
(
)
)
;
settingsX
-
>
SetDestination
(
data
.
destination
(
)
)
;
return
NS_OK
;
}
nsresult
nsPrintSettingsServiceX
:
:
ReadPrefs
(
nsIPrintSettings
*
aPS
const
nsAString
&
aPrinterName
uint32_t
aFlags
)
{
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
nsPrintSettingsService
:
:
ReadPrefs
(
aPS
aPrinterName
aFlags
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsPrintSettingsService
:
:
ReadPrefs
(
)
failed
"
)
;
RefPtr
<
nsPrintSettingsX
>
printSettingsX
(
do_QueryObject
(
aPS
)
)
;
if
(
!
printSettingsX
)
{
return
NS_ERROR_NO_INTERFACE
;
}
mozilla
:
:
Unused
<
<
printSettingsX
-
>
ReadPageFormatFromPrefs
(
)
;
return
NS_OK
;
}
nsresult
nsPrintSettingsServiceX
:
:
_CreatePrintSettings
(
nsIPrintSettings
*
*
_retval
)
{
nsresult
rv
;
*
_retval
=
nullptr
;
nsPrintSettingsX
*
printSettings
=
new
nsPrintSettingsX
;
NS_ENSURE_TRUE
(
printSettings
NS_ERROR_OUT_OF_MEMORY
)
;
NS_ADDREF
(
*
_retval
=
printSettings
)
;
rv
=
printSettings
-
>
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_RELEASE
(
*
_retval
)
;
return
rv
;
}
auto
globalPrintSettings
=
nsIPrintSettings
:
:
kInitSaveShrinkToFit
|
nsIPrintSettings
:
:
kInitSaveHeaderLeft
|
nsIPrintSettings
:
:
kInitSaveHeaderCenter
|
nsIPrintSettings
:
:
kInitSaveHeaderRight
|
nsIPrintSettings
:
:
kInitSaveFooterLeft
|
nsIPrintSettings
:
:
kInitSaveFooterCenter
|
nsIPrintSettings
:
:
kInitSaveFooterRight
|
nsIPrintSettings
:
:
kInitSaveEdges
|
nsIPrintSettings
:
:
kInitSaveReversed
|
nsIPrintSettings
:
:
kInitSaveInColor
;
InitPrintSettingsFromPrefs
(
*
_retval
false
globalPrintSettings
)
;
return
rv
;
}
nsresult
nsPrintSettingsServiceX
:
:
WritePrefs
(
nsIPrintSettings
*
aPS
const
nsAString
&
aPrinterName
uint32_t
aFlags
)
{
nsresult
rv
;
rv
=
nsPrintSettingsService
:
:
WritePrefs
(
aPS
aPrinterName
aFlags
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsPrintSettingsService
:
:
WritePrefs
(
)
failed
"
)
;
RefPtr
<
nsPrintSettingsX
>
printSettingsX
(
do_QueryObject
(
aPS
)
)
;
if
(
!
printSettingsX
)
{
return
NS_ERROR_NO_INTERFACE
;
}
rv
=
printSettingsX
-
>
WritePageFormatToPrefs
(
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
nsPrintSettingsX
:
:
WritePageFormatToPrefs
(
)
failed
"
)
;
return
NS_OK
;
}
