#
include
<
Cocoa
/
Cocoa
.
h
>
#
include
"
CustomCocoaEvents
.
h
"
#
include
<
Foundation
/
NSAutoreleasePool
.
h
>
#
include
<
mozilla
/
CondVar
.
h
>
#
include
<
mozilla
/
Mutex
.
h
>
#
include
"
mozilla
/
WidgetTraceEvent
.
h
"
using
mozilla
:
:
CondVar
;
using
mozilla
:
:
Mutex
;
using
mozilla
:
:
MutexAutoLock
;
namespace
{
Mutex
*
sMutex
=
NULL
;
CondVar
*
sCondVar
=
NULL
;
bool
sTracerProcessed
=
false
;
}
namespace
mozilla
{
bool
InitWidgetTracing
(
)
{
sMutex
=
new
Mutex
(
"
Event
tracer
thread
mutex
"
)
;
sCondVar
=
new
CondVar
(
*
sMutex
"
Event
tracer
thread
condvar
"
)
;
return
sMutex
&
&
sCondVar
;
}
void
CleanUpWidgetTracing
(
)
{
delete
sMutex
;
delete
sCondVar
;
sMutex
=
NULL
;
sCondVar
=
NULL
;
}
void
SignalTracerThread
(
)
{
if
(
!
sMutex
|
|
!
sCondVar
)
return
;
MutexAutoLock
lock
(
*
sMutex
)
;
if
(
!
sTracerProcessed
)
{
sTracerProcessed
=
true
;
sCondVar
-
>
Notify
(
)
;
}
}
bool
FireAndWaitForTracerEvent
(
)
{
MOZ_ASSERT
(
sMutex
&
&
sCondVar
"
Tracing
not
initialized
!
"
)
;
NSAutoreleasePool
*
pool
=
[
[
NSAutoreleasePool
alloc
]
init
]
;
MutexAutoLock
lock
(
*
sMutex
)
;
if
(
sTracerProcessed
)
{
return
false
;
}
[
NSApp
postEvent
:
[
NSEvent
otherEventWithType
:
NSEventTypeApplicationDefined
location
:
NSMakePoint
(
0
0
)
modifierFlags
:
0
timestamp
:
0
windowNumber
:
0
context
:
NULL
subtype
:
kEventSubtypeTrace
data1
:
0
data2
:
0
]
atStart
:
NO
]
;
while
(
!
sTracerProcessed
)
sCondVar
-
>
Wait
(
)
;
sTracerProcessed
=
false
;
[
pool
release
]
;
return
true
;
}
}
