#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
AppearanceOverride
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
nsXULAppAPI
.
h
"
static
void
ToolbarThemePrefChanged
(
const
char
*
aPref
void
*
aUserInfo
)
;
interface
MOZGlobalAppearance
(
)
property
NSInteger
toolbarTheme
;
end
implementation
MOZGlobalAppearance
+
(
MOZGlobalAppearance
*
)
sharedInstance
{
static
MOZGlobalAppearance
*
sInstance
=
nil
;
if
(
!
sInstance
)
{
sInstance
=
[
[
MOZGlobalAppearance
alloc
]
init
]
;
if
(
XRE_IsParentProcess
(
)
)
{
mozilla
:
:
Preferences
:
:
RegisterCallbackAndCall
(
&
ToolbarThemePrefChanged
nsDependentCString
(
mozilla
:
:
StaticPrefs
:
:
GetPrefName_browser_theme_toolbar_theme
(
)
)
)
;
}
}
return
sInstance
;
}
+
(
NSSet
*
)
keyPathsForValuesAffectingAppearance
{
return
[
NSSet
setWithObjects
:
"
toolbarTheme
"
nil
]
;
}
-
(
NSAppearance
*
)
appearance
{
switch
(
self
.
toolbarTheme
)
{
case
0
:
return
[
NSAppearance
appearanceNamed
:
NSAppearanceNameDarkAqua
]
;
case
1
:
return
[
NSAppearance
appearanceNamed
:
NSAppearanceNameAqua
]
;
case
2
:
default
:
return
nil
;
}
}
-
(
void
)
setAppearance
:
(
NSAppearance
*
)
aAppearance
{
}
-
(
NSApplication
*
)
_app
{
return
NSApp
;
}
+
(
NSSet
*
)
keyPathsForValuesAffectingEffectiveAppearance
{
return
[
NSSet
setWithObjects
:
"
toolbarTheme
"
"
_app
.
effectiveAppearance
"
nil
]
;
}
-
(
NSAppearance
*
)
effectiveAppearance
{
switch
(
self
.
toolbarTheme
)
{
case
0
:
return
[
NSAppearance
appearanceNamed
:
NSAppearanceNameDarkAqua
]
;
case
1
:
return
[
NSAppearance
appearanceNamed
:
NSAppearanceNameAqua
]
;
case
2
:
default
:
return
NSApp
.
effectiveAppearance
;
}
}
end
static
void
ToolbarThemePrefChanged
(
const
char
*
aPref
void
*
aUserInfo
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZGlobalAppearance
.
sharedInstance
.
toolbarTheme
=
mozilla
:
:
StaticPrefs
:
:
browser_theme_toolbar_theme
(
)
;
}
