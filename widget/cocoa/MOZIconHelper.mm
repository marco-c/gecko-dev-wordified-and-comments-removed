#
include
"
MOZIconHelper
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
nsCocoaUtils
.
h
"
implementation
MOZIconHelper
+
(
NSImage
*
)
placeholderIconWithSize
:
(
NSSize
)
aSize
{
return
[
[
[
NSImage
alloc
]
initWithSize
:
aSize
]
autorelease
]
;
}
+
(
NSImage
*
)
iconImageFromImageContainer
:
(
imgIContainer
*
)
aImage
withSize
:
(
NSSize
)
aSize
presContext
:
(
const
nsPresContext
*
)
aPresContext
computedStyle
:
(
const
mozilla
:
:
ComputedStyle
*
)
aComputedStyle
scaleFactor
:
(
CGFloat
)
aScaleFactor
{
bool
isEntirelyBlack
=
false
;
NSImage
*
retainedImage
=
nil
;
nsresult
rv
;
if
(
aScaleFactor
!
=
0
.
0f
)
{
rv
=
nsCocoaUtils
:
:
CreateNSImageFromImageContainer
(
aImage
imgIContainer
:
:
FRAME_CURRENT
aPresContext
aComputedStyle
&
retainedImage
aScaleFactor
&
isEntirelyBlack
)
;
}
else
{
rv
=
nsCocoaUtils
:
:
CreateDualRepresentationNSImageFromImageContainer
(
aImage
imgIContainer
:
:
FRAME_CURRENT
aPresContext
aComputedStyle
&
retainedImage
&
isEntirelyBlack
)
;
}
NSImage
*
image
=
[
retainedImage
autorelease
]
;
if
(
NS_FAILED
(
rv
)
|
|
!
image
)
{
return
nil
;
}
int32_t
origWidth
=
0
origHeight
=
0
;
aImage
-
>
GetWidth
(
&
origWidth
)
;
aImage
-
>
GetHeight
(
&
origHeight
)
;
[
image
setTemplate
:
isEntirelyBlack
]
;
[
image
setSize
:
aSize
]
;
return
image
;
}
end
