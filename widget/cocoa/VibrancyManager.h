#
ifndef
VibrancyManager_h
#
define
VibrancyManager_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
ViewRegion
.
h
"
#
import
<
Foundation
/
NSGeometry
.
h
>
class
NSColor
;
class
NSView
;
class
nsChildView
;
namespace
mozilla
{
enum
class
VibrancyType
{
LIGHT
DARK
TOOLTIP
MENU
HIGHLIGHTED_MENUITEM
SHEET
SOURCE_LIST
SOURCE_LIST_SELECTION
ACTIVE_SOURCE_LIST_SELECTION
}
;
class
VibrancyManager
{
public
:
VibrancyManager
(
const
nsChildView
&
aCoordinateConverter
NSView
*
aContainerView
)
:
mCoordinateConverter
(
aCoordinateConverter
)
mContainerView
(
aContainerView
)
{
MOZ_ASSERT
(
SystemSupportsVibrancy
(
)
"
Don
'
t
instantiate
this
if
!
SystemSupportsVibrancy
(
)
"
)
;
}
void
UpdateVibrantRegion
(
VibrancyType
aType
const
LayoutDeviceIntRegion
&
aRegion
)
;
bool
HasVibrantRegions
(
)
{
return
!
mVibrantRegions
.
IsEmpty
(
)
;
}
void
ClearVibrantAreas
(
)
const
;
NSColor
*
VibrancyFillColorForType
(
VibrancyType
aType
)
;
NSColor
*
VibrancyFontSmoothingBackgroundColorForType
(
VibrancyType
aType
)
;
static
bool
SystemSupportsVibrancy
(
)
;
protected
:
void
ClearVibrantRegion
(
const
LayoutDeviceIntRegion
&
aVibrantRegion
)
const
;
NSView
*
CreateEffectView
(
VibrancyType
aType
)
;
const
nsChildView
&
mCoordinateConverter
;
NSView
*
mContainerView
;
nsClassHashtable
<
nsUint32HashKey
ViewRegion
>
mVibrantRegions
;
}
;
}
#
endif
