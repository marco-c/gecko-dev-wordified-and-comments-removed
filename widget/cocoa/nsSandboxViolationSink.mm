#
include
"
nsSandboxViolationSink
.
h
"
#
import
<
Foundation
/
NSObjCRuntime
.
h
>
#
include
<
unistd
.
h
>
#
include
<
time
.
h
>
#
include
<
asl
.
h
>
#
include
<
dispatch
/
dispatch
.
h
>
#
include
<
notify
.
h
>
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
int
nsSandboxViolationSink
:
:
mNotifyToken
=
0
;
uint64_t
nsSandboxViolationSink
:
:
mLastMsgReceived
=
0
;
void
nsSandboxViolationSink
:
:
Start
(
)
{
if
(
mNotifyToken
)
{
return
;
}
notify_register_dispatch
(
SANDBOX_VIOLATION_NOTIFICATION_NAME
&
mNotifyToken
dispatch_queue_create
(
SANDBOX_VIOLATION_QUEUE_NAME
DISPATCH_QUEUE_SERIAL
)
^
(
int
token
)
{
ViolationHandler
(
)
;
}
)
;
}
void
nsSandboxViolationSink
:
:
Stop
(
)
{
if
(
!
mNotifyToken
)
{
return
;
}
notify_cancel
(
mNotifyToken
)
;
mNotifyToken
=
0
;
}
void
nsSandboxViolationSink
:
:
ViolationHandler
(
)
{
aslmsg
query
=
asl_new
(
ASL_TYPE_QUERY
)
;
asl_set_query
(
query
ASL_KEY_FACILITY
"
com
.
apple
.
sandbox
"
ASL_QUERY_OP_EQUAL
)
;
char
query_time
[
30
]
=
{
0
}
;
SprintfLiteral
(
query_time
"
%
li
"
time
(
NULL
)
-
2
)
;
asl_set_query
(
query
ASL_KEY_TIME
query_time
ASL_QUERY_OP_NUMERIC
|
ASL_QUERY_OP_GREATER_EQUAL
)
;
if
(
mozilla
:
:
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
mac
.
track
.
violations
.
oursonly
"
true
)
)
{
char
query_pid
[
20
]
=
{
0
}
;
SprintfLiteral
(
query_pid
"
%
u
"
getpid
(
)
)
;
asl_set_query
(
query
ASL_KEY_REF_PID
query_pid
ASL_QUERY_OP_EQUAL
)
;
}
aslresponse
response
=
asl_search
(
nullptr
query
)
;
if
(
response
)
{
while
(
true
)
{
aslmsg
hit
=
nullptr
;
aslmsg
found
=
nullptr
;
const
char
*
id_str
;
while
(
(
hit
=
aslresponse_next
(
response
)
)
)
{
id_str
=
asl_get
(
hit
ASL_KEY_MSG_ID
)
;
uint64_t
id_val
=
atoll
(
id_str
)
;
if
(
id_val
<
=
mLastMsgReceived
)
{
continue
;
}
mLastMsgReceived
=
id_val
;
found
=
hit
;
break
;
}
if
(
!
found
)
{
break
;
}
const
char
*
pid_str
=
asl_get
(
found
ASL_KEY_REF_PID
)
;
const
char
*
message_str
=
asl_get
(
found
ASL_KEY_MSG
)
;
NSLog
(
"
nsSandboxViolationSink
:
:
ViolationHandler
(
)
:
id
%
s
pid
%
s
"
"
message
%
s
"
id_str
pid_str
message_str
)
;
}
aslresponse_free
(
response
)
;
}
}
