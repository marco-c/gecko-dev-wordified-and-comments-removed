#
define
MACOS_VERSION_MASK
0x00FFFFFF
#
define
MACOS_MAJOR_VERSION_MASK
0x00FFFFFF
#
define
MACOS_MINOR_VERSION_MASK
0x00FFFFFF
#
define
MACOS_BUGFIX_VERSION_MASK
0x00FFFFFF
#
define
MACOS_VERSION_10_0_HEX
0x000A0000
#
define
MACOS_VERSION_10_9_HEX
0x000A0900
#
define
MACOS_VERSION_10_10_HEX
0x000A0A00
#
define
MACOS_VERSION_10_11_HEX
0x000A0B00
#
define
MACOS_VERSION_10_12_HEX
0x000A0C00
#
define
MACOS_VERSION_10_13_HEX
0x000A0D00
#
define
MACOS_VERSION_10_14_HEX
0x000A0E00
#
define
MACOS_VERSION_10_15_HEX
0x000A0F00
#
define
MACOS_VERSION_10_16_HEX
0x000A1000
#
define
MACOS_VERSION_11_0_HEX
0x000B0000
#
define
MACOS_VERSION_12_0_HEX
0x000C0000
#
define
MACOS_VERSION_13_0_HEX
0x000D0000
#
define
MACOS_VERSION_14_0_HEX
0x000E0000
#
define
MACOS_VERSION_26_0_HEX
0x001A0000
#
include
"
nsCocoaFeatures
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
<
sys
/
sysctl
.
h
>
int32_t
nsCocoaFeatures
:
:
mOSVersion
=
0
;
inline
int32_t
AssembleVersion
(
int32_t
aMajor
int32_t
aMinor
int32_t
aBugFix
)
{
MOZ_ASSERT
(
aMajor
>
=
10
)
;
return
(
aMajor
<
<
16
)
+
(
aMinor
<
<
8
)
+
aBugFix
;
}
int32_t
nsCocoaFeatures
:
:
ExtractMajorVersion
(
int32_t
aVersion
)
{
MOZ_ASSERT
(
(
aVersion
&
MACOS_VERSION_MASK
)
=
=
aVersion
)
;
return
(
aVersion
&
0xFF0000
)
>
>
16
;
}
int32_t
nsCocoaFeatures
:
:
ExtractMinorVersion
(
int32_t
aVersion
)
{
MOZ_ASSERT
(
(
aVersion
&
MACOS_VERSION_MASK
)
=
=
aVersion
)
;
return
(
aVersion
&
0xFF00
)
>
>
8
;
}
int32_t
nsCocoaFeatures
:
:
ExtractBugFixVersion
(
int32_t
aVersion
)
{
MOZ_ASSERT
(
(
aVersion
&
MACOS_VERSION_MASK
)
=
=
aVersion
)
;
return
aVersion
&
0xFF
;
}
static
int
intAtStringIndex
(
NSArray
*
array
int
index
)
{
return
[
(
NSString
*
)
[
array
objectAtIndex
:
index
]
integerValue
]
;
}
void
nsCocoaFeatures
:
:
GetSystemVersion
(
int
&
major
int
&
minor
int
&
bugfix
)
{
major
=
minor
=
bugfix
=
0
;
NSString
*
versionString
=
[
[
NSDictionary
dictionaryWithContentsOfFile
:
"
/
System
/
Library
/
CoreServices
/
SystemVersion
.
plist
"
]
objectForKey
:
"
ProductVersion
"
]
;
if
(
!
versionString
)
{
NS_ERROR
(
"
Couldn
'
t
read
/
System
/
Library
/
CoreServices
/
SystemVersion
.
plist
"
"
to
determine
macOS
"
"
version
.
"
)
;
return
;
}
NSArray
*
versions
=
[
versionString
componentsSeparatedByString
:
"
.
"
]
;
NSUInteger
count
=
[
versions
count
]
;
if
(
count
>
0
)
{
major
=
intAtStringIndex
(
versions
0
)
;
if
(
count
>
1
)
{
minor
=
intAtStringIndex
(
versions
1
)
;
if
(
count
>
2
)
{
bugfix
=
intAtStringIndex
(
versions
2
)
;
}
}
}
}
int32_t
nsCocoaFeatures
:
:
GetVersion
(
int32_t
aMajor
int32_t
aMinor
int32_t
aBugFix
)
{
int32_t
macOSVersion
;
if
(
aMajor
<
10
)
{
aMajor
=
10
;
NS_ERROR
(
"
Couldn
'
t
determine
macOS
version
assuming
10
.
9
"
)
;
macOSVersion
=
MACOS_VERSION_10_9_HEX
;
}
else
if
(
aMajor
=
=
10
&
&
aMinor
<
9
)
{
aMinor
=
9
;
NS_ERROR
(
"
macOS
version
too
old
assuming
10
.
9
"
)
;
macOSVersion
=
MACOS_VERSION_10_9_HEX
;
}
else
{
MOZ_ASSERT
(
aMajor
>
=
10
)
;
MOZ_ASSERT
(
aMajor
<
256
)
;
MOZ_ASSERT
(
aMinor
>
=
0
)
;
MOZ_ASSERT
(
aMinor
<
256
)
;
MOZ_ASSERT
(
aBugFix
>
=
0
)
;
MOZ_ASSERT
(
aBugFix
<
256
)
;
macOSVersion
=
AssembleVersion
(
aMajor
aMinor
aBugFix
)
;
}
MOZ_ASSERT
(
aMajor
=
=
ExtractMajorVersion
(
macOSVersion
)
)
;
MOZ_ASSERT
(
aMinor
=
=
ExtractMinorVersion
(
macOSVersion
)
)
;
MOZ_ASSERT
(
aBugFix
=
=
ExtractBugFixVersion
(
macOSVersion
)
)
;
return
macOSVersion
;
}
void
nsCocoaFeatures
:
:
InitializeVersionNumbers
(
)
{
NS_OBJC_BEGIN_TRY_IGNORE_BLOCK
;
nsAutoreleasePool
localPool
;
int
major
minor
bugfix
;
GetSystemVersion
(
major
minor
bugfix
)
;
mOSVersion
=
GetVersion
(
major
minor
bugfix
)
;
NS_OBJC_END_TRY_IGNORE_BLOCK
;
}
int32_t
nsCocoaFeatures
:
:
macOSVersion
(
)
{
MOZ_ASSERT
(
(
mOSVersion
&
MACOS_VERSION_MASK
)
>
=
0
)
;
if
(
!
mOSVersion
)
{
mOSVersion
=
-
1
;
InitializeVersionNumbers
(
)
;
}
return
mOSVersion
;
}
int32_t
nsCocoaFeatures
:
:
macOSVersionMajor
(
)
{
return
ExtractMajorVersion
(
macOSVersion
(
)
)
;
}
int32_t
nsCocoaFeatures
:
:
macOSVersionMinor
(
)
{
return
ExtractMinorVersion
(
macOSVersion
(
)
)
;
}
int32_t
nsCocoaFeatures
:
:
macOSVersionBugFix
(
)
{
return
ExtractBugFixVersion
(
macOSVersion
(
)
)
;
}
bool
nsCocoaFeatures
:
:
OnBigSurOrLater
(
)
{
return
(
(
macOSVersion
(
)
>
=
MACOS_VERSION_10_16_HEX
)
|
|
(
macOSVersion
(
)
>
=
MACOS_VERSION_11_0_HEX
)
)
;
}
bool
nsCocoaFeatures
:
:
OnMontereyOrLater
(
)
{
return
(
macOSVersion
(
)
>
=
MACOS_VERSION_12_0_HEX
)
;
}
bool
nsCocoaFeatures
:
:
OnVenturaOrLater
(
)
{
return
(
macOSVersion
(
)
>
=
MACOS_VERSION_13_0_HEX
)
;
}
bool
nsCocoaFeatures
:
:
OnSonomaOrLater
(
)
{
return
(
macOSVersion
(
)
>
=
MACOS_VERSION_14_0_HEX
)
;
}
bool
nsCocoaFeatures
:
:
OnTahoeOrLater
(
)
{
return
(
macOSVersion
(
)
>
=
MACOS_VERSION_26_0_HEX
)
;
}
bool
nsCocoaFeatures
:
:
IsAtLeastVersion
(
int32_t
aMajor
int32_t
aMinor
int32_t
aBugFix
)
{
return
macOSVersion
(
)
>
=
GetVersion
(
aMajor
aMinor
aBugFix
)
;
}
bool
nsCocoaFeatures
:
:
ProcessIsRosettaTranslated
(
)
{
int
ret
=
0
;
size_t
size
=
sizeof
(
ret
)
;
if
(
sysctlbyname
(
"
sysctl
.
proc_translated
"
&
ret
&
size
NULL
0
)
=
=
-
1
)
{
if
(
errno
!
=
ENOENT
)
{
fprintf
(
stderr
"
Failed
to
check
for
translation
environment
\
n
"
)
;
}
return
false
;
}
return
(
ret
=
=
1
)
;
}
