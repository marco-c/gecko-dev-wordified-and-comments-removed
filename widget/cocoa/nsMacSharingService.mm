#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
nsMacSharingService
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Array
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
mozilla
/
MacStringHelpers
.
h
"
NS_IMPL_ISUPPORTS
(
nsMacSharingService
nsIMacSharingService
)
NSString
*
const
remindersServiceName
=
"
com
.
apple
.
reminders
.
RemindersShareExtension
"
;
NSString
*
const
extensionPrefPanePath
=
"
/
System
/
Library
/
PreferencePanes
/
Extensions
.
prefPane
"
;
const
UInt32
openSharingSubpaneDescriptorType
=
'
ptru
'
;
NSString
*
const
openSharingSubpaneActionKey
=
"
action
"
;
NSString
*
const
openSharingSubpaneActionValue
=
"
revealExtensionPoint
"
;
NSString
*
const
openSharingSubpaneProtocolKey
=
"
protocol
"
;
NSString
*
const
openSharingSubpaneProtocolValue
=
"
com
.
apple
.
share
-
services
"
;
interface
NSSharingService
(
ExposeName
)
-
(
id
)
name
;
end
static
bool
ShouldIgnoreProvider
(
NSString
*
aProviderName
)
{
return
[
aProviderName
isEqualToString
:
"
com
.
apple
.
share
.
System
.
add
-
to
-
safari
-
reading
-
list
"
]
|
|
[
aProviderName
isEqualToString
:
"
com
.
apple
.
share
.
Mail
.
compose
"
]
;
}
interface
SharingServiceDelegate
:
NSObject
<
NSSharingServiceDelegate
>
{
NSUserActivity
*
mShareActivity
;
}
-
(
void
)
cleanup
;
end
implementation
SharingServiceDelegate
-
(
id
)
initWithActivity
:
(
NSUserActivity
*
)
activity
{
self
=
[
super
init
]
;
mShareActivity
=
[
activity
retain
]
;
return
self
;
}
-
(
void
)
cleanup
{
[
mShareActivity
resignCurrent
]
;
[
mShareActivity
invalidate
]
;
[
mShareActivity
release
]
;
mShareActivity
=
nil
;
}
-
(
void
)
sharingService
:
(
NSSharingService
*
)
sharingService
didShareItems
:
(
NSArray
*
)
items
{
[
self
cleanup
]
;
}
-
(
void
)
sharingService
:
(
NSSharingService
*
)
service
didFailToShareItems
:
(
NSArray
*
)
items
error
:
(
NSError
*
)
error
{
[
self
cleanup
]
;
}
-
(
void
)
dealloc
{
[
mShareActivity
release
]
;
[
super
dealloc
]
;
}
end
static
NSString
*
NSImageToBase64
(
const
NSImage
*
aImage
)
{
CGImageRef
cgRef
=
[
aImage
CGImageForProposedRect
:
nil
context
:
nil
hints
:
nil
]
;
NSBitmapImageRep
*
bitmapRep
=
[
[
NSBitmapImageRep
alloc
]
initWithCGImage
:
cgRef
]
;
[
bitmapRep
setSize
:
[
aImage
size
]
]
;
NSData
*
imageData
=
[
bitmapRep
representationUsingType
:
NSPNGFileType
properties
:
{
}
]
;
NSString
*
base64Encoded
=
[
imageData
base64EncodedStringWithOptions
:
0
]
;
[
bitmapRep
release
]
;
return
[
NSString
stringWithFormat
:
"
data
:
image
/
png
;
base64
%
"
base64Encoded
]
;
}
static
void
SetStrAttribute
(
JSContext
*
aCx
JS
:
:
Rooted
<
JSObject
*
>
&
aObj
const
char
*
aKey
NSString
*
aVal
)
{
nsAutoString
strVal
;
mozilla
:
:
CopyCocoaStringToXPCOMString
(
aVal
strVal
)
;
JS
:
:
Rooted
<
JSString
*
>
title
(
aCx
JS_NewUCStringCopyZ
(
aCx
strVal
.
get
(
)
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
attVal
(
aCx
JS
:
:
StringValue
(
title
)
)
;
JS_SetProperty
(
aCx
aObj
aKey
attVal
)
;
}
nsresult
nsMacSharingService
:
:
GetSharingProviders
(
const
nsAString
&
aPageUrl
JSContext
*
aCx
JS
:
:
MutableHandleValue
aResult
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
NSURL
*
url
=
[
NSURL
URLWithString
:
nsCocoaUtils
:
:
ToNSString
(
aPageUrl
)
]
;
if
(
!
url
)
{
return
NS_ERROR_FAILURE
;
}
NSArray
*
sharingService
=
[
NSSharingService
sharingServicesForItems
:
[
url
]
]
;
int32_t
serviceCount
=
0
;
JS
:
:
Rooted
<
JSObject
*
>
array
(
aCx
JS
:
:
NewArrayObject
(
aCx
0
)
)
;
for
(
NSSharingService
*
currentService
in
sharingService
)
{
if
(
ShouldIgnoreProvider
(
[
currentService
name
]
)
)
{
continue
;
}
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
SetStrAttribute
(
aCx
obj
"
name
"
[
currentService
name
]
)
;
SetStrAttribute
(
aCx
obj
"
menuItemTitle
"
currentService
.
menuItemTitle
)
;
SetStrAttribute
(
aCx
obj
"
image
"
NSImageToBase64
(
currentService
.
image
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
element
(
aCx
JS
:
:
ObjectValue
(
*
obj
)
)
;
JS_SetElement
(
aCx
array
serviceCount
+
+
element
)
;
}
aResult
.
setObject
(
*
array
)
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsMacSharingService
:
:
OpenSharingPreferences
(
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
NSURL
*
prefPaneURL
=
[
NSURL
fileURLWithPath
:
extensionPrefPanePath
isDirectory
:
YES
]
;
NSDictionary
*
args
=
{
openSharingSubpaneActionKey
:
openSharingSubpaneActionValue
openSharingSubpaneProtocolKey
:
openSharingSubpaneProtocolValue
}
;
NSData
*
data
=
[
NSPropertyListSerialization
dataWithPropertyList
:
args
format
:
NSPropertyListXMLFormat_v1_0
options
:
0
error
:
nil
]
;
NSAppleEventDescriptor
*
descriptor
=
[
[
NSAppleEventDescriptor
alloc
]
initWithDescriptorType
:
openSharingSubpaneDescriptorType
data
:
data
]
;
[
[
NSWorkspace
sharedWorkspace
]
openURLs
:
[
prefPaneURL
]
withAppBundleIdentifier
:
nil
options
:
NSWorkspaceLaunchAsync
additionalEventParamDescriptor
:
descriptor
launchIdentifiers
:
NULL
]
;
[
descriptor
release
]
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsMacSharingService
:
:
ShareUrl
(
const
nsAString
&
aServiceName
const
nsAString
&
aPageUrl
const
nsAString
&
aPageTitle
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
NSString
*
serviceName
=
nsCocoaUtils
:
:
ToNSString
(
aServiceName
)
;
NSURL
*
pageUrl
=
[
NSURL
URLWithString
:
nsCocoaUtils
:
:
ToNSString
(
aPageUrl
)
]
;
NSString
*
pageTitle
=
nsCocoaUtils
:
:
ToNSString
(
aPageTitle
)
;
NSSharingService
*
service
=
[
NSSharingService
sharingServiceNamed
:
serviceName
]
;
if
(
[
[
service
name
]
isEqual
:
remindersServiceName
]
)
{
NSUserActivity
*
shareActivity
=
[
[
NSUserActivity
alloc
]
initWithActivityType
:
NSUserActivityTypeBrowsingWeb
]
;
if
(
[
pageUrl
.
scheme
hasPrefix
:
"
http
"
]
)
{
[
shareActivity
setWebpageURL
:
pageUrl
]
;
}
[
shareActivity
setTitle
:
pageTitle
]
;
[
shareActivity
becomeCurrent
]
;
SharingServiceDelegate
*
shareDelegate
=
[
[
SharingServiceDelegate
alloc
]
initWithActivity
:
shareActivity
]
;
[
shareActivity
release
]
;
[
service
setDelegate
:
shareDelegate
]
;
[
shareDelegate
release
]
;
}
NSArray
*
toShare
=
[
[
service
name
]
isEqual
:
NSSharingServiceNamePostOnTwitter
]
?
[
pageUrl
pageTitle
]
:
[
pageUrl
]
;
[
service
setSubject
:
pageTitle
]
;
[
service
performWithItems
:
toShare
]
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
