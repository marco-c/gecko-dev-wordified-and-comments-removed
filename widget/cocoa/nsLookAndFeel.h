#
ifndef
nsLookAndFeel_h_
#
define
nsLookAndFeel_h_
#
include
"
nsXPLookAndFeel
.
h
"
class
nsLookAndFeel
final
:
public
nsXPLookAndFeel
{
public
:
nsLookAndFeel
(
)
;
virtual
~
nsLookAndFeel
(
)
;
void
NativeInit
(
)
final
;
virtual
void
RefreshImpl
(
)
override
;
nsresult
NativeGetColor
(
ColorID
aID
nscolor
&
aResult
)
override
;
nsresult
NativeGetInt
(
IntID
aID
int32_t
&
aResult
)
override
;
nsresult
NativeGetFloat
(
FloatID
aID
float
&
aResult
)
override
;
bool
NativeGetFont
(
FontID
aID
nsString
&
aFontName
gfxFontStyle
&
aFontStyle
)
override
;
virtual
char16_t
GetPasswordCharacterImpl
(
)
override
{
return
0x2022
;
}
protected
:
static
bool
SystemWantsDarkTheme
(
)
;
static
nscolor
ProcessSelectionBackground
(
nscolor
aColor
)
;
private
:
nscolor
mColorTextSelectBackground
;
nscolor
mColorTextSelectBackgroundDisabled
;
nscolor
mColorHighlight
;
nscolor
mColorTextSelectForeground
;
nscolor
mColorAlternateSelectedControlText
;
nscolor
mColorControlText
;
nscolor
mColorText
;
nscolor
mColorWindowText
;
nscolor
mColorGrid
;
nscolor
mColorActiveBorder
;
nscolor
mColorGrayText
;
nscolor
mColorControlBackground
;
nscolor
mColorScrollbar
;
nscolor
mColorThreeDHighlight
;
nscolor
mColorDialog
;
nscolor
mColorDragTargetZone
;
nscolor
mColorChromeActive
;
nscolor
mColorChromeInactive
;
nscolor
mColorFocusRing
;
nscolor
mColorTextSelect
;
nscolor
mColorDisabledToolbarText
;
nscolor
mColorMenuSelect
;
nscolor
mColorCellHighlight
;
nscolor
mColorEvenTreeRow
;
nscolor
mColorOddTreeRow
;
nscolor
mColorMenuFontSmoothingBg
;
nscolor
mColorSourceListFontSmoothingBg
;
nscolor
mColorSourceListSelectionFontSmoothingBg
;
nscolor
mColorActiveSourceListSelectionFontSmoothingBg
;
bool
mInitialized
;
void
EnsureInit
(
)
;
}
;
#
endif
