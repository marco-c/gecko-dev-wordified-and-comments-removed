#
ifndef
nsChildView_h_
#
define
nsChildView_h_
#
include
"
mozView
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
include
"
mozAccessibleProtocol
.
h
"
#
endif
#
include
"
nsISupports
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
TextInputHandler
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
gfxQuartzSurface
.
h
"
#
include
"
GLContextTypes
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
gfx
/
MacIOSurface
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
ViewRegion
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
import
<
Carbon
/
Carbon
.
h
>
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
<
AppKit
/
NSOpenGL
.
h
>
class
nsChildView
;
class
nsCocoaWindow
;
namespace
{
class
GLPresenter
;
}
namespace
mozilla
{
class
InputData
;
class
PanGestureInput
;
class
SwipeTracker
;
struct
SwipeEventQueue
;
class
VibrancyManager
;
namespace
layers
{
class
GLManager
;
class
IAPZCTreeManager
;
class
NativeLayerRootCA
;
class
NativeLayerCA
;
}
namespace
widget
{
class
RectTextureImage
;
class
WidgetRenderingContext
;
}
}
class
PixelHostingView
;
interface
NSEvent
(
Undocumented
)
-
(
EventRef
)
_eventRef
;
property
(
readonly
)
NSInteger
stage
;
end
interface
NSView
(
Undocumented
)
-
(
void
)
_drawTitleBar
:
(
NSRect
)
aRect
;
-
(
NSRect
)
_dirtyRect
;
-
(
void
)
_tileTitlebarAndRedisplay
:
(
BOOL
)
redisplay
;
-
(
NSView
*
)
titlebarView
;
-
(
NSView
*
)
titlebarContainerView
;
-
(
BOOL
)
transparent
;
-
(
void
)
setTransparent
:
(
BOOL
)
transparent
;
-
(
void
)
viewDidChangeBackingProperties
;
end
interface
ChildView
:
NSView
<
#
ifdef
ACCESSIBILITY
mozAccessible
#
endif
mozView
NSTextInputClient
NSDraggingSource
NSDraggingDestination
NSPasteboardItemDataProvider
>
{
private
nsChildView
*
mGeckoChild
;
mozilla
:
:
widget
:
:
TextInputHandler
*
mTextInputHandler
;
NSEvent
*
mLastMouseDownEvent
;
NSEvent
*
mLastKeyDownEvent
;
BOOL
mBlockedLastMouseDown
;
NSEvent
*
mClickThroughMouseDownEvent
;
BOOL
mExpectingWheelStop
;
BOOL
mNeedsGLUpdate
;
nsIDragService
*
mDragService
;
NSOpenGLContext
*
mGLContext
;
enum
{
eGestureState_None
eGestureState_StartGesture
eGestureState_MagnifyGesture
eGestureState_RotateGesture
}
mGestureState
;
float
mCumulativeMagnification
;
float
mCumulativeRotation
;
#
ifdef
__LP64__
BOOL
*
mCancelSwipeAnimation
;
#
endif
BOOL
mUsingOMTCompositor
;
CGImageRef
mTopLeftCornerMask
;
NSView
*
mVibrancyViewsContainer
;
NSView
*
mNonDraggableViewsContainer
;
PixelHostingView
*
mPixelHostingView
;
NSInteger
mLastPressureStage
;
}
+
(
void
)
initialize
;
+
(
void
)
registerViewForDraggedTypes
:
(
NSView
*
)
aView
;
-
(
void
)
viewsWindowDidBecomeKey
;
-
(
void
)
viewsWindowDidResignKey
;
-
(
void
)
delayedTearDown
;
-
(
void
)
handleMouseMoved
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
sendMouseEnterOrExitEvent
:
(
NSEvent
*
)
aEvent
enter
:
(
BOOL
)
aEnter
exitFrom
:
(
mozilla
:
:
WidgetMouseEvent
:
:
ExitFrom
)
aExitFrom
;
-
(
void
)
updateGLContext
;
-
(
void
)
_surfaceNeedsUpdate
:
(
NSNotification
*
)
notification
;
-
(
bool
)
preRender
:
(
NSOpenGLContext
*
)
aGLContext
;
-
(
void
)
postRender
:
(
NSOpenGLContext
*
)
aGLContext
;
-
(
NSView
*
)
vibrancyViewsContainer
;
-
(
NSView
*
)
nonDraggableViewsContainer
;
-
(
NSView
*
)
pixelHostingView
;
-
(
BOOL
)
isCoveringTitlebar
;
-
(
void
)
viewWillStartLiveResize
;
-
(
void
)
viewDidEndLiveResize
;
-
(
NSColor
*
)
vibrancyFillColorForThemeGeometryType
:
(
nsITheme
:
:
ThemeGeometryType
)
aThemeGeometryType
;
-
(
void
)
swipeWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
beginGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
magnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
smartMagnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
rotateWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
endGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
scrollWheel
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
setUsingOMTCompositor
:
(
BOOL
)
aUseOMTC
;
-
(
NSEvent
*
)
lastKeyDownEvent
;
+
(
uint32_t
)
sUniqueKeyEventId
;
+
(
NSMutableDictionary
*
)
sNativeKeyEventsMap
;
end
class
ChildViewMouseTracker
{
public
:
static
void
MouseMoved
(
NSEvent
*
aEvent
)
;
static
void
MouseScrolled
(
NSEvent
*
aEvent
)
;
static
void
OnDestroyView
(
ChildView
*
aView
)
;
static
void
OnDestroyWindow
(
NSWindow
*
aWindow
)
;
static
BOOL
WindowAcceptsEvent
(
NSWindow
*
aWindow
NSEvent
*
aEvent
ChildView
*
aView
BOOL
isClickThrough
=
NO
)
;
static
void
MouseExitedWindow
(
NSEvent
*
aEvent
)
;
static
void
MouseEnteredWindow
(
NSEvent
*
aEvent
)
;
static
void
ReEvaluateMouseEnterState
(
NSEvent
*
aEvent
=
nil
ChildView
*
aOldView
=
nil
)
;
static
void
ResendLastMouseMoveEvent
(
)
;
static
ChildView
*
ViewForEvent
(
NSEvent
*
aEvent
)
;
static
ChildView
*
sLastMouseEventView
;
static
NSEvent
*
sLastMouseMoveEvent
;
static
NSWindow
*
sWindowUnderMouse
;
static
NSPoint
sLastScrollEventScreenLocation
;
}
;
class
nsChildView
final
:
public
nsBaseWidget
{
private
:
typedef
nsBaseWidget
Inherited
;
typedef
mozilla
:
:
layers
:
:
IAPZCTreeManager
IAPZCTreeManager
;
public
:
nsChildView
(
)
;
virtual
MOZ_MUST_USE
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
=
nullptr
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
void
Show
(
bool
aState
)
override
;
virtual
bool
IsVisible
(
)
const
override
;
virtual
void
SetParent
(
nsIWidget
*
aNewParent
)
override
;
virtual
nsIWidget
*
GetParent
(
void
)
override
;
virtual
float
GetDPI
(
)
override
;
virtual
void
Move
(
double
aX
double
aY
)
override
;
virtual
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Enable
(
bool
aState
)
override
;
virtual
bool
IsEnabled
(
)
const
override
;
virtual
void
SetFocus
(
Raise
)
override
;
virtual
LayoutDeviceIntRect
GetBounds
(
)
override
;
virtual
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
virtual
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
void
UpdateBoundsFromView
(
)
;
CGFloat
BackingScaleFactor
(
)
const
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
final
{
return
mozilla
:
:
DesktopToLayoutDeviceScale
(
BackingScaleFactor
(
)
)
;
}
void
BackingScaleFactorChanged
(
)
;
virtual
double
GetDefaultScaleInternal
(
)
override
;
virtual
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
virtual
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
virtual
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
virtual
nsresult
ConfigureChildren
(
const
nsTArray
<
Configuration
>
&
aConfigurations
)
override
;
virtual
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
virtual
bool
ShowsResizeIndicator
(
LayoutDeviceIntRect
*
aResizerRect
)
override
{
return
false
;
}
static
bool
ConvertStatus
(
nsEventStatus
aStatus
)
{
return
aStatus
=
=
nsEventStatus_eConsumeNoDefault
;
}
virtual
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
virtual
bool
WidgetTypeSupportsAcceleration
(
)
override
;
virtual
bool
ShouldUseOffMainThreadCompositing
(
)
override
;
virtual
void
SetCursor
(
nsCursor
aDefaultCursor
imgIContainer
*
aCursor
uint32_t
aHotspotX
uint32_t
aHotspotY
)
override
;
virtual
nsresult
SetTitle
(
const
nsAString
&
title
)
override
;
virtual
MOZ_MUST_USE
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
virtual
bool
HasPendingInputEvent
(
)
override
;
bool
SendEventToNativeMenuSystem
(
NSEvent
*
aEvent
)
;
virtual
void
PostHandleKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
*
aEvent
)
override
;
virtual
nsresult
ActivateNativeMenuItemAt
(
const
nsAString
&
indexString
)
override
;
virtual
nsresult
ForceUpdateNativeMenuAt
(
const
nsAString
&
indexString
)
override
;
virtual
MOZ_MUST_USE
nsresult
GetSelectionAsPlaintext
(
nsAString
&
aResult
)
override
;
virtual
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
virtual
InputContext
GetInputContext
(
)
override
;
virtual
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
;
virtual
MOZ_MUST_USE
nsresult
AttachNativeKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
override
;
virtual
void
GetEditCommands
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
GetEditCommandsRemapped
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
uint32_t
aGeckoKeyCode
uint32_t
aCocoaKeyCode
)
;
virtual
nsTransparencyMode
GetTransparencyMode
(
)
override
;
virtual
void
SetTransparencyMode
(
nsTransparencyMode
aMode
)
override
;
virtual
nsresult
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
uint32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
{
return
SynthesizeNativeMouseEvent
(
aPoint
NSMouseMoved
0
aObserver
)
;
}
virtual
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
virtual
bool
DispatchWindowEvent
(
mozilla
:
:
WidgetGUIEvent
&
event
)
;
void
WillPaintWindow
(
)
;
bool
PaintWindow
(
LayoutDeviceIntRegion
aRegion
)
;
bool
PaintWindowInDrawTarget
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDT
const
LayoutDeviceIntRegion
&
aRegion
const
mozilla
:
:
gfx
:
:
IntSize
&
aSurfaceSize
)
;
bool
PaintWindowInContext
(
CGContextRef
aContext
const
LayoutDeviceIntRegion
&
aRegion
mozilla
:
:
gfx
:
:
IntSize
aSurfaceSize
)
;
bool
PaintWindowInIOSurface
(
CFTypeRefPtr
<
IOSurfaceRef
>
aSurface
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
;
void
PaintWindowInContentLayer
(
)
;
void
HandleMainThreadCATransaction
(
)
;
#
ifdef
ACCESSIBILITY
already_AddRefed
<
mozilla
:
:
a11y
:
:
Accessible
>
GetDocumentAccessible
(
)
;
#
endif
virtual
void
CreateCompositor
(
)
override
;
virtual
void
PrepareWindowEffects
(
)
override
;
virtual
void
CleanupWindowEffects
(
)
override
;
virtual
void
AddWindowOverlayWebRenderCommands
(
mozilla
:
:
layers
:
:
WebRenderBridgeChild
*
aWrBridge
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResourceUpdates
)
override
;
virtual
bool
PreRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
override
;
bool
PreRenderImpl
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
;
virtual
void
PostRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
override
;
virtual
void
DoCompositorCleanup
(
)
override
;
virtual
void
DrawWindowOverlay
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aManager
LayoutDeviceIntRect
aRect
)
override
;
virtual
void
UpdateThemeGeometries
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
override
;
virtual
void
UpdateWindowDraggingRegion
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
LayoutDeviceIntRegion
GetNonDraggableRegion
(
)
{
return
mNonDraggableRegion
.
Region
(
)
;
}
virtual
void
ReportSwipeStarted
(
uint64_t
aInputBlockId
bool
aStartSwipe
)
override
;
virtual
void
LookUpDictionary
(
const
nsAString
&
aText
const
nsTArray
<
mozilla
:
:
FontRange
>
&
aFontRangeArray
const
bool
aIsVertical
const
LayoutDeviceIntPoint
&
aPoint
)
override
;
void
ResetParent
(
)
;
static
bool
DoHasPendingInputEvent
(
)
;
static
uint32_t
GetCurrentInputEventCount
(
)
;
static
void
UpdateCurrentInputEventCount
(
)
;
NSView
<
mozView
>
*
GetEditorView
(
)
;
nsCocoaWindow
*
GetXULWindowWidget
(
)
const
;
virtual
void
ReparentNativeWidget
(
nsIWidget
*
aNewParent
)
override
;
mozilla
:
:
widget
:
:
TextInputHandler
*
GetTextInputHandler
(
)
{
return
mTextInputHandler
;
}
NSColor
*
VibrancyFillColorForThemeGeometryType
(
nsITheme
:
:
ThemeGeometryType
aThemeGeometryType
)
;
NSColor
*
VibrancyFontSmoothingBackgroundColorForThemeGeometryType
(
nsITheme
:
:
ThemeGeometryType
aThemeGeometryType
)
;
int32_t
CocoaPointsToDevPixels
(
CGFloat
aPts
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aPts
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntPoint
CocoaPointsToDevPixels
(
const
NSPoint
&
aPt
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aPt
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntPoint
CocoaPointsToDevPixelsRoundDown
(
const
NSPoint
&
aPt
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixelsRoundDown
(
aPt
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntRect
CocoaPointsToDevPixels
(
const
NSRect
&
aRect
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aRect
BackingScaleFactor
(
)
)
;
}
CGFloat
DevPixelsToCocoaPoints
(
int32_t
aPixels
)
const
{
return
nsCocoaUtils
:
:
DevPixelsToCocoaPoints
(
aPixels
BackingScaleFactor
(
)
)
;
}
NSRect
DevPixelsToCocoaPoints
(
const
LayoutDeviceIntRect
&
aRect
)
const
{
return
nsCocoaUtils
:
:
DevPixelsToCocoaPoints
(
aRect
BackingScaleFactor
(
)
)
;
}
already_AddRefed
<
mozilla
:
:
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
LayoutDeviceIntRegion
&
aInvalidRegion
mozilla
:
:
layers
:
:
BufferMode
*
aBufferMode
)
override
;
void
EndRemoteDrawing
(
)
override
;
void
CleanupRemoteDrawing
(
)
override
;
bool
InitCompositor
(
mozilla
:
:
layers
:
:
Compositor
*
aCompositor
)
override
;
virtual
MOZ_MUST_USE
nsresult
StartPluginIME
(
const
mozilla
:
:
WidgetKeyboardEvent
&
aKeyboardEvent
int32_t
aPanelX
int32_t
aPanelY
nsString
&
aCommitted
)
override
;
virtual
void
SetPluginFocused
(
bool
&
aFocused
)
override
;
bool
IsPluginFocused
(
)
{
return
mPluginFocused
;
}
virtual
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
void
DispatchAPZWheelInputEvent
(
mozilla
:
:
InputData
&
aEvent
bool
aCanTriggerSwipe
)
;
nsEventStatus
DispatchAPZInputEvent
(
mozilla
:
:
InputData
&
aEvent
)
;
void
SwipeFinished
(
)
;
nsresult
SetPrefersReducedMotionOverrideForTest
(
bool
aValue
)
override
;
nsresult
ResetPrefersReducedMotionOverrideForTest
(
)
override
;
void
SuspendAsyncCATransactions
(
)
;
void
MaybeScheduleUnsuspendAsyncCATransactions
(
)
;
void
UnsuspendAsyncCATransactions
(
)
;
protected
:
virtual
~
nsChildView
(
)
;
void
ReportMoveEvent
(
)
;
void
ReportSizeEvent
(
)
;
void
TearDownView
(
)
;
virtual
already_AddRefed
<
nsIWidget
>
AllocateChildPopupWidget
(
)
override
{
return
nsIWidget
:
:
CreateTopLevelWindow
(
)
;
}
void
ConfigureAPZCTreeManager
(
)
override
;
void
ConfigureAPZControllerThread
(
)
override
;
void
DoRemoteComposition
(
const
LayoutDeviceIntRect
&
aRenderRect
)
;
void
DrawWindowOverlay
(
mozilla
:
:
layers
:
:
GLManager
*
aManager
LayoutDeviceIntRect
aRect
)
;
void
MaybeDrawRoundedCorners
(
mozilla
:
:
layers
:
:
GLManager
*
aManager
const
LayoutDeviceIntRect
&
aRect
)
;
void
MaybeDrawTitlebar
(
mozilla
:
:
layers
:
:
GLManager
*
aManager
)
;
void
UpdateTitlebarCGContext
(
)
;
LayoutDeviceIntRect
RectContainingTitlebarControls
(
)
;
void
UpdateVibrancy
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
;
mozilla
:
:
VibrancyManager
&
EnsureVibrancyManager
(
)
;
nsIWidget
*
GetWidgetForListenerEvents
(
)
;
struct
SwipeInfo
{
bool
wantsSwipe
;
uint32_t
allowedDirections
;
}
;
SwipeInfo
SendMayStartSwipe
(
const
mozilla
:
:
PanGestureInput
&
aSwipeStartEvent
)
;
void
TrackScrollEventAsSwipe
(
const
mozilla
:
:
PanGestureInput
&
aSwipeStartEvent
uint32_t
aAllowedDirections
)
;
protected
:
ChildView
*
mView
;
RefPtr
<
mozilla
:
:
widget
:
:
TextInputHandler
>
mTextInputHandler
;
InputContext
mInputContext
;
NSView
*
mParentView
;
nsIWidget
*
mParentWidget
;
#
ifdef
ACCESSIBILITY
nsWeakPtr
mAccessible
;
#
endif
mozilla
:
:
Mutex
mViewTearDownLock
;
mozilla
:
:
Mutex
mEffectsLock
;
bool
mHasRoundedBottomCorners
;
int
mDevPixelCornerRadius
;
bool
mIsCoveringTitlebar
;
bool
mIsFullscreen
;
bool
mIsOpaque
;
LayoutDeviceIntRect
mTitlebarRect
;
LayoutDeviceIntRegion
mUpdatedTitlebarRegion
;
CGContextRef
mTitlebarCGContext
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
widget
:
:
RectTextureImage
>
mCornerMaskImage
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
widget
:
:
RectTextureImage
>
mTitlebarImage
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
widget
:
:
RectTextureImage
>
mBasicCompositorImage
;
mozilla
:
:
Maybe
<
mozilla
:
:
wr
:
:
ImageKey
>
mTitlebarImageKey
;
mozilla
:
:
gfx
:
:
IntSize
mTitlebarImageSize
;
nsIntRegion
mDirtyTitlebarRegion
;
mozilla
:
:
ViewRegion
mNonDraggableRegion
;
mutable
CGFloat
mBackingScaleFactor
;
bool
mVisible
;
bool
mDrawing
;
bool
mIsDispatchPaint
;
bool
mPluginFocused
;
mozilla
:
:
UniquePtr
<
GLPresenter
>
mGLPresenter
;
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRootCA
>
mNativeLayerRoot
;
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerCA
>
mContentLayer
;
RefPtr
<
MacIOSurface
>
mBasicCompositorIOSurface
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
VibrancyManager
>
mVibrancyManager
;
RefPtr
<
mozilla
:
:
SwipeTracker
>
mSwipeTracker
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
SwipeEventQueue
>
mSwipeEventQueue
;
RefPtr
<
mozilla
:
:
gfx
:
:
DrawTarget
>
mBackingSurface
;
struct
WidgetCompositingState
{
bool
mAsyncCATransactionsSuspended
=
false
;
bool
mNativeLayerChangesPending
=
false
;
}
;
mozilla
:
:
DataMutex
<
WidgetCompositingState
>
mCompositingState
;
RefPtr
<
mozilla
:
:
CancelableRunnable
>
mUnsuspendAsyncCATransactionsRunnable
;
bool
mCurrentPanGestureBelongsToSwipe
;
static
uint32_t
sLastInputEventCount
;
void
ReleaseTitlebarCGContext
(
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
MultiTouchInput
>
mSynthesizedTouchInput
;
}
;
#
endif
