#
ifndef
nsChildView_h_
#
define
nsChildView_h_
#
include
"
mozView
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
#
include
"
mozAccessibleProtocol
.
h
"
#
endif
#
include
"
nsISupports
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
TextInputHandler
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
gfxQuartzSurface
.
h
"
#
include
"
GLContextTypes
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
ViewRegion
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
import
<
Carbon
/
Carbon
.
h
>
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
<
AppKit
/
NSOpenGL
.
h
>
class
nsChildView
;
class
nsCocoaWindow
;
namespace
{
class
GLPresenter
;
}
namespace
mozilla
{
enum
class
NativeKeyBindingsType
:
uint8_t
;
class
InputData
;
class
PanGestureInput
;
class
VibrancyManager
;
namespace
layers
{
class
GLManager
;
class
NativeLayerRootCA
;
class
NativeLayerCA
;
}
namespace
widget
{
class
WidgetRenderingContext
;
}
}
class
PixelHostingView
;
interface
NSEvent
(
Undocumented
)
-
(
EventRef
)
_eventRef
;
property
(
readonly
)
NSInteger
stage
;
end
interface
NSView
(
Undocumented
)
-
(
void
)
_tileTitlebarAndRedisplay
:
(
BOOL
)
redisplay
;
-
(
NSView
*
)
titlebarView
;
-
(
NSView
*
)
titlebarContainerView
;
-
(
BOOL
)
transparent
;
-
(
void
)
setTransparent
:
(
BOOL
)
transparent
;
-
(
void
)
viewDidChangeBackingProperties
;
end
interface
ChildView
:
NSView
<
#
ifdef
ACCESSIBILITY
mozAccessible
#
endif
mozView
NSTextInputClient
NSDraggingSource
NSDraggingDestination
NSPasteboardItemDataProvider
NSStandardKeyBindingResponding
>
{
private
nsCocoaWindow
*
mGeckoChild
;
mozilla
:
:
widget
:
:
TextInputHandler
*
mTextInputHandler
;
NSEvent
*
mLastMouseDownEvent
;
NSEvent
*
mLastKeyDownEvent
;
BOOL
mBlockedLastMouseDown
;
NSEvent
*
mClickThroughMouseDownEvent
;
BOOL
mExpectingWheelStop
;
BOOL
mIsUpdatingLayer
;
BOOL
mPerformedDrag
;
nsIDragService
*
mDragService
;
enum
{
eGestureState_None
eGestureState_StartGesture
eGestureState_MagnifyGesture
eGestureState_RotateGesture
}
mGestureState
;
float
mCumulativeRotation
;
#
ifdef
__LP64__
BOOL
*
mCancelSwipeAnimation
;
#
endif
BOOL
mUsingOMTCompositor
;
NSView
*
mVibrancyViewsContainer
;
NSView
*
mNonDraggableViewsContainer
;
PixelHostingView
*
mPixelHostingView
;
CALayer
*
mRootCALayer
;
NSInteger
mLastPressureStage
;
}
+
(
void
)
initialize
;
+
(
void
)
registerViewForDraggedTypes
:
(
NSView
*
)
aView
;
-
(
void
)
viewsWindowDidBecomeKey
;
-
(
void
)
viewsWindowDidResignKey
;
-
(
void
)
delayedTearDown
;
-
(
void
)
handleMouseMoved
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
sendMouseEnterOrExitEvent
:
(
NSEvent
*
)
aEvent
enter
:
(
BOOL
)
aEnter
exitFrom
:
(
mozilla
:
:
WidgetMouseEvent
:
:
ExitFrom
)
aExitFrom
;
-
(
void
)
ensureNextCompositeIsAtomicWithMainThreadPaint
;
-
(
NSView
*
)
vibrancyViewsContainer
;
-
(
NSView
*
)
nonDraggableViewsContainer
;
-
(
NSView
*
)
pixelHostingView
;
-
(
void
)
viewWillStartLiveResize
;
-
(
void
)
viewDidEndLiveResize
;
-
(
void
)
showContextMenuForSelection
:
(
id
)
sender
;
-
(
void
)
swipeWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
beginGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
magnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
smartMagnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
rotateWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
endGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
scrollWheel
:
(
NSEvent
*
)
anEvent
;
-
(
NSEvent
*
)
lastKeyDownEvent
;
+
(
uint32_t
)
sUniqueKeyEventId
;
+
(
NSMutableDictionary
*
)
sNativeKeyEventsMap
;
end
class
ChildViewMouseTracker
{
public
:
static
void
MouseMoved
(
NSEvent
*
aEvent
)
;
static
void
MouseScrolled
(
NSEvent
*
aEvent
)
;
static
void
OnDestroyView
(
ChildView
*
aView
)
;
static
void
OnDestroyWindow
(
NSWindow
*
aWindow
)
;
static
BOOL
WindowAcceptsEvent
(
NSWindow
*
aWindow
NSEvent
*
aEvent
ChildView
*
aView
BOOL
isClickThrough
=
NO
)
;
static
void
MouseExitedWindow
(
NSEvent
*
aEvent
)
;
static
void
MouseEnteredWindow
(
NSEvent
*
aEvent
)
;
static
void
NativeMenuOpened
(
)
;
static
void
NativeMenuClosed
(
)
;
static
void
ReEvaluateMouseEnterState
(
NSEvent
*
aEvent
=
nil
ChildView
*
aOldView
=
nil
)
;
static
void
ResendLastMouseMoveEvent
(
)
;
static
ChildView
*
ViewForEvent
(
NSEvent
*
aEvent
)
;
static
ChildView
*
sLastMouseEventView
;
static
NSEvent
*
sLastMouseMoveEvent
;
static
NSWindow
*
sWindowUnderMouse
;
static
NSPoint
sLastScrollEventScreenLocation
;
}
;
#
endif
