#
ifndef
nsChildView_h_
#
define
nsChildView_h_
#
include
"
mozView
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
#
include
"
mozAccessibleProtocol
.
h
"
#
endif
#
include
"
nsISupports
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
TextInputHandler
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
gfxQuartzSurface
.
h
"
#
include
"
GLContextTypes
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
ViewRegion
.
h
"
#
include
"
CFTypeRefPtr
.
h
"
#
import
<
Carbon
/
Carbon
.
h
>
#
import
<
Cocoa
/
Cocoa
.
h
>
#
import
<
AppKit
/
NSOpenGL
.
h
>
class
nsChildView
;
class
nsCocoaWindow
;
namespace
{
class
GLPresenter
;
}
namespace
mozilla
{
enum
class
NativeKeyBindingsType
:
uint8_t
;
class
InputData
;
class
PanGestureInput
;
class
VibrancyManager
;
namespace
layers
{
class
GLManager
;
class
IAPZCTreeManager
;
class
NativeLayerRootCA
;
class
NativeLayerCA
;
}
namespace
widget
{
class
WidgetRenderingContext
;
}
}
class
PixelHostingView
;
interface
NSEvent
(
Undocumented
)
-
(
EventRef
)
_eventRef
;
property
(
readonly
)
NSInteger
stage
;
end
interface
NSView
(
Undocumented
)
-
(
void
)
_tileTitlebarAndRedisplay
:
(
BOOL
)
redisplay
;
-
(
NSView
*
)
titlebarView
;
-
(
NSView
*
)
titlebarContainerView
;
-
(
BOOL
)
transparent
;
-
(
void
)
setTransparent
:
(
BOOL
)
transparent
;
-
(
void
)
viewDidChangeBackingProperties
;
end
interface
ChildView
:
NSView
<
#
ifdef
ACCESSIBILITY
mozAccessible
#
endif
mozView
NSTextInputClient
NSDraggingSource
NSDraggingDestination
NSPasteboardItemDataProvider
>
{
private
nsChildView
*
mGeckoChild
;
mozilla
:
:
widget
:
:
TextInputHandler
*
mTextInputHandler
;
NSEvent
*
mLastMouseDownEvent
;
NSEvent
*
mLastKeyDownEvent
;
BOOL
mBlockedLastMouseDown
;
NSEvent
*
mClickThroughMouseDownEvent
;
BOOL
mExpectingWheelStop
;
BOOL
mIsUpdatingLayer
;
BOOL
mPerformedDrag
;
nsIDragService
*
mDragService
;
enum
{
eGestureState_None
eGestureState_StartGesture
eGestureState_MagnifyGesture
eGestureState_RotateGesture
}
mGestureState
;
float
mCumulativeRotation
;
#
ifdef
__LP64__
BOOL
*
mCancelSwipeAnimation
;
#
endif
BOOL
mUsingOMTCompositor
;
NSView
*
mVibrancyViewsContainer
;
NSView
*
mNonDraggableViewsContainer
;
PixelHostingView
*
mPixelHostingView
;
CALayer
*
mRootCALayer
;
NSInteger
mLastPressureStage
;
}
+
(
void
)
initialize
;
+
(
void
)
registerViewForDraggedTypes
:
(
NSView
*
)
aView
;
-
(
void
)
viewsWindowDidBecomeKey
;
-
(
void
)
viewsWindowDidResignKey
;
-
(
void
)
delayedTearDown
;
-
(
void
)
handleMouseMoved
:
(
NSEvent
*
)
aEvent
;
-
(
void
)
sendMouseEnterOrExitEvent
:
(
NSEvent
*
)
aEvent
enter
:
(
BOOL
)
aEnter
exitFrom
:
(
mozilla
:
:
WidgetMouseEvent
:
:
ExitFrom
)
aExitFrom
;
-
(
void
)
ensureNextCompositeIsAtomicWithMainThreadPaint
;
-
(
NSView
*
)
vibrancyViewsContainer
;
-
(
NSView
*
)
nonDraggableViewsContainer
;
-
(
NSView
*
)
pixelHostingView
;
-
(
BOOL
)
isCoveringTitlebar
;
-
(
void
)
viewWillStartLiveResize
;
-
(
void
)
viewDidEndLiveResize
;
-
(
void
)
swipeWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
beginGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
magnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
smartMagnifyWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
rotateWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
endGestureWithEvent
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
scrollWheel
:
(
NSEvent
*
)
anEvent
;
-
(
void
)
setUsingOMTCompositor
:
(
BOOL
)
aUseOMTC
;
-
(
NSEvent
*
)
lastKeyDownEvent
;
+
(
uint32_t
)
sUniqueKeyEventId
;
+
(
NSMutableDictionary
*
)
sNativeKeyEventsMap
;
end
class
ChildViewMouseTracker
{
public
:
static
void
MouseMoved
(
NSEvent
*
aEvent
)
;
static
void
MouseScrolled
(
NSEvent
*
aEvent
)
;
static
void
OnDestroyView
(
ChildView
*
aView
)
;
static
void
OnDestroyWindow
(
NSWindow
*
aWindow
)
;
static
BOOL
WindowAcceptsEvent
(
NSWindow
*
aWindow
NSEvent
*
aEvent
ChildView
*
aView
BOOL
isClickThrough
=
NO
)
;
static
void
MouseExitedWindow
(
NSEvent
*
aEvent
)
;
static
void
MouseEnteredWindow
(
NSEvent
*
aEvent
)
;
static
void
NativeMenuOpened
(
)
;
static
void
NativeMenuClosed
(
)
;
static
void
ReEvaluateMouseEnterState
(
NSEvent
*
aEvent
=
nil
ChildView
*
aOldView
=
nil
)
;
static
void
ResendLastMouseMoveEvent
(
)
;
static
ChildView
*
ViewForEvent
(
NSEvent
*
aEvent
)
;
static
ChildView
*
sLastMouseEventView
;
static
NSEvent
*
sLastMouseMoveEvent
;
static
NSWindow
*
sWindowUnderMouse
;
static
NSPoint
sLastScrollEventScreenLocation
;
}
;
class
nsChildView
final
:
public
nsBaseWidget
{
private
:
typedef
nsBaseWidget
Inherited
;
typedef
mozilla
:
:
layers
:
:
IAPZCTreeManager
IAPZCTreeManager
;
public
:
nsChildView
(
)
;
[
[
nodiscard
]
]
nsresult
Create
(
nsIWidget
*
aParent
const
LayoutDeviceIntRect
&
aRect
InitData
*
=
nullptr
)
override
;
void
Destroy
(
)
override
;
void
Show
(
bool
aState
)
override
;
bool
IsVisible
(
)
const
override
;
void
SetParent
(
nsIWidget
*
aNewParent
)
override
;
nsIWidget
*
GetParent
(
)
override
;
float
GetDPI
(
)
override
;
void
Move
(
double
aX
double
aY
)
override
;
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
void
Enable
(
bool
aState
)
override
;
bool
IsEnabled
(
)
const
override
;
nsSizeMode
SizeMode
(
)
override
{
return
mSizeMode
;
}
void
SetSizeMode
(
nsSizeMode
aMode
)
override
{
mSizeMode
=
aMode
;
}
void
SetFocus
(
Raise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
LayoutDeviceIntRect
GetBounds
(
)
override
;
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
void
UpdateBoundsFromView
(
)
;
CGFloat
BackingScaleFactor
(
)
const
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
final
{
return
mozilla
:
:
DesktopToLayoutDeviceScale
(
BackingScaleFactor
(
)
)
;
}
void
BackingScaleFactorChanged
(
)
;
double
GetDefaultScaleInternal
(
)
override
;
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
void
EnsureContentLayerForMainThreadPainting
(
)
;
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
bool
ShowsResizeIndicator
(
LayoutDeviceIntRect
*
aResizerRect
)
override
{
return
false
;
}
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
bool
WidgetTypeSupportsAcceleration
(
)
override
;
bool
ShouldUseOffMainThreadCompositing
(
)
override
;
void
SetCursor
(
const
Cursor
&
)
override
;
nsresult
SetTitle
(
const
nsAString
&
title
)
override
;
[
[
nodiscard
]
]
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
bool
HasPendingInputEvent
(
)
override
;
bool
SendEventToNativeMenuSystem
(
NSEvent
*
aEvent
)
;
void
PostHandleKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
*
aEvent
)
override
;
nsresult
ActivateNativeMenuItemAt
(
const
nsAString
&
indexString
)
override
;
nsresult
ForceUpdateNativeMenuAt
(
const
nsAString
&
indexString
)
override
;
[
[
nodiscard
]
]
nsresult
GetSelectionAsPlaintext
(
nsAString
&
aResult
)
override
;
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
InputContext
GetInputContext
(
)
override
;
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
;
[
[
nodiscard
]
]
nsresult
AttachNativeKeyEvent
(
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
)
override
;
MOZ_CAN_RUN_SCRIPT
bool
GetEditCommands
(
mozilla
:
:
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
SuppressAnimation
(
bool
aSuppress
)
override
;
nsresult
SynthesizeNativeKeyEvent
(
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
NativeMouseMessage
aNativeMessage
mozilla
:
:
MouseButton
aButton
nsIWidget
:
:
Modifiers
aModifierFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
{
return
SynthesizeNativeMouseEvent
(
aPoint
NativeMouseMessage
:
:
Move
mozilla
:
:
MouseButton
:
:
eNotPressed
nsIWidget
:
:
Modifiers
:
:
NO_MODIFIERS
aObserver
)
;
}
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchpadDoubleTap
(
LayoutDeviceIntPoint
aPoint
uint32_t
aModifierFlags
)
override
;
void
WillPaintWindow
(
)
;
bool
PaintWindow
(
LayoutDeviceIntRegion
aRegion
)
;
bool
PaintWindowInDrawTarget
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDT
const
LayoutDeviceIntRegion
&
aRegion
const
mozilla
:
:
gfx
:
:
IntSize
&
aSurfaceSize
)
;
void
PaintWindowInContentLayer
(
)
;
void
HandleMainThreadCATransaction
(
)
;
#
ifdef
ACCESSIBILITY
already_AddRefed
<
mozilla
:
:
a11y
:
:
LocalAccessible
>
GetDocumentAccessible
(
)
;
#
endif
void
CreateCompositor
(
)
override
;
bool
WidgetPaintsBackground
(
)
override
{
return
true
;
}
bool
PreRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
override
;
void
PostRender
(
mozilla
:
:
widget
:
:
WidgetRenderingContext
*
aContext
)
override
;
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRoot
>
GetNativeLayerRoot
(
)
override
;
void
UpdateThemeGeometries
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
override
;
void
UpdateWindowDraggingRegion
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
LayoutDeviceIntRegion
GetNonDraggableRegion
(
)
{
return
mNonDraggableRegion
.
Region
(
)
;
}
void
LookUpDictionary
(
const
nsAString
&
aText
const
nsTArray
<
mozilla
:
:
FontRange
>
&
aFontRangeArray
const
bool
aIsVertical
const
LayoutDeviceIntPoint
&
aPoint
)
override
;
void
ResetParent
(
)
;
static
bool
DoHasPendingInputEvent
(
)
;
static
uint32_t
GetCurrentInputEventCount
(
)
;
static
void
UpdateCurrentInputEventCount
(
)
;
NSView
<
mozView
>
*
GetEditorView
(
)
;
nsCocoaWindow
*
GetAppWindowWidget
(
)
const
;
void
ReparentNativeWidget
(
nsIWidget
*
aNewParent
)
override
;
mozilla
:
:
widget
:
:
TextInputHandler
*
GetTextInputHandler
(
)
{
return
mTextInputHandler
;
}
int32_t
CocoaPointsToDevPixels
(
CGFloat
aPts
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aPts
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntPoint
CocoaPointsToDevPixels
(
const
NSPoint
&
aPt
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aPt
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntPoint
CocoaPointsToDevPixelsRoundDown
(
const
NSPoint
&
aPt
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixelsRoundDown
(
aPt
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntRect
CocoaPointsToDevPixels
(
const
NSRect
&
aRect
)
const
{
return
nsCocoaUtils
:
:
CocoaPointsToDevPixels
(
aRect
BackingScaleFactor
(
)
)
;
}
CGFloat
DevPixelsToCocoaPoints
(
int32_t
aPixels
)
const
{
return
nsCocoaUtils
:
:
DevPixelsToCocoaPoints
(
aPixels
BackingScaleFactor
(
)
)
;
}
NSRect
DevPixelsToCocoaPoints
(
const
LayoutDeviceIntRect
&
aRect
)
const
{
return
nsCocoaUtils
:
:
DevPixelsToCocoaPoints
(
aRect
BackingScaleFactor
(
)
)
;
}
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
void
DispatchAPZWheelInputEvent
(
mozilla
:
:
InputData
&
aEvent
)
;
nsEventStatus
DispatchAPZInputEvent
(
mozilla
:
:
InputData
&
aEvent
)
;
void
DispatchDoubleTapGesture
(
mozilla
:
:
TimeStamp
aEventTimeStamp
LayoutDeviceIntPoint
aScreenPosition
mozilla
:
:
Modifiers
aModifiers
)
;
void
SuspendAsyncCATransactions
(
)
;
void
MaybeScheduleUnsuspendAsyncCATransactions
(
)
;
void
UnsuspendAsyncCATransactions
(
)
;
void
UpdateFullscreen
(
bool
aFullscreen
)
;
#
ifdef
DEBUG
nsresult
SetHiDPIMode
(
bool
aHiDPI
)
override
;
nsresult
RestoreHiDPIMode
(
)
override
;
#
endif
protected
:
virtual
~
nsChildView
(
)
;
void
ReportMoveEvent
(
)
;
void
ReportSizeEvent
(
)
;
void
TearDownView
(
)
;
already_AddRefed
<
nsIWidget
>
AllocateChildPopupWidget
(
)
override
{
return
nsIWidget
:
:
CreateTopLevelWindow
(
)
;
}
void
ConfigureAPZCTreeManager
(
)
override
;
void
ConfigureAPZControllerThread
(
)
override
;
void
UpdateVibrancy
(
const
nsTArray
<
ThemeGeometry
>
&
aThemeGeometries
)
;
mozilla
:
:
VibrancyManager
&
EnsureVibrancyManager
(
)
;
nsIWidget
*
GetWidgetForListenerEvents
(
)
;
protected
:
ChildView
*
mView
;
RefPtr
<
mozilla
:
:
widget
:
:
TextInputHandler
>
mTextInputHandler
;
InputContext
mInputContext
;
NSView
*
mParentView
;
nsCOMPtr
<
nsIWidget
>
mParentWidget
;
#
ifdef
ACCESSIBILITY
nsWeakPtr
mAccessible
;
#
endif
mozilla
:
:
Mutex
mCompositingLock
MOZ_UNANNOTATED
;
mozilla
:
:
ViewRegion
mNonDraggableRegion
;
mutable
CGFloat
mBackingScaleFactor
;
bool
mVisible
;
nsSizeMode
mSizeMode
;
bool
mDrawing
;
bool
mIsDispatchPaint
;
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRootCA
>
mNativeLayerRoot
;
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerCA
>
mContentLayer
;
RefPtr
<
mozilla
:
:
layers
:
:
SurfacePoolHandle
>
mPoolHandle
;
LayoutDeviceIntRegion
mContentLayerInvalidRegion
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
VibrancyManager
>
mVibrancyManager
;
RefPtr
<
mozilla
:
:
CancelableRunnable
>
mUnsuspendAsyncCATransactionsRunnable
;
static
uint32_t
sLastInputEventCount
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
MultiTouchInput
>
mSynthesizedTouchInput
;
}
;
#
endif
