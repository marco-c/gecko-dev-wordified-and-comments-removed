#
include
<
limits
>
#
if
__GLIBCXX__
<
=
20070719
#
ifndef
__EXCEPTIONS
#
define
__EXCEPTIONS
#
endif
#
endif
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsCocoaUtils
.
h
"
#
include
"
nsComputedDOMStyle
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsMenuItemX
.
h
"
#
include
"
nsMenuItemIconX
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsObjCExceptions
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
widget
:
:
IconLoader
;
using
mozilla
:
:
widget
:
:
IconLoaderHelperCocoa
;
static
const
uint32_t
kIconSize
=
16
;
nsMenuItemIconX
:
:
nsMenuItemIconX
(
nsMenuObjectX
*
aMenuItem
nsIContent
*
aContent
NSMenuItem
*
aNativeMenuItem
)
:
mContent
(
aContent
)
mContentType
(
nsIContentPolicy
:
:
TYPE_INTERNAL_IMAGE
)
mMenuObject
(
aMenuItem
)
mSetIcon
(
false
)
mNativeMenuItem
(
aNativeMenuItem
)
{
MOZ_COUNT_CTOR
(
nsMenuItemIconX
)
;
}
nsMenuItemIconX
:
:
~
nsMenuItemIconX
(
)
{
Destroy
(
)
;
MOZ_COUNT_DTOR
(
nsMenuItemIconX
)
;
}
void
nsMenuItemIconX
:
:
Destroy
(
)
{
if
(
mIconLoader
)
{
mIconLoader
=
nullptr
;
}
if
(
mIconLoaderHelper
)
{
mIconLoaderHelper
=
nullptr
;
}
mMenuObject
=
nullptr
;
mNativeMenuItem
=
nil
;
}
nsresult
nsMenuItemIconX
:
:
SetupIcon
(
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
if
(
!
mNativeMenuItem
)
{
NS_ERROR
(
"
No
native
menu
item
"
)
;
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIURI
>
iconURI
;
nsresult
rv
=
GetIconURI
(
getter_AddRefs
(
iconURI
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
[
mNativeMenuItem
setImage
:
nil
]
;
return
NS_OK
;
}
if
(
!
mIconLoader
)
{
mIconLoaderHelper
=
new
IconLoaderHelperCocoa
(
this
kIconSize
kIconSize
)
;
mIconLoader
=
new
IconLoader
(
mIconLoaderHelper
mImageRegionRect
)
;
if
(
!
mIconLoader
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
if
(
!
mSetIcon
)
{
[
mNativeMenuItem
setImage
:
mIconLoaderHelper
-
>
GetNativeIconImage
(
)
]
;
}
rv
=
mIconLoader
-
>
LoadIcon
(
iconURI
mContent
)
;
if
(
NS_FAILED
(
rv
)
)
{
[
mNativeMenuItem
setImage
:
nil
]
;
}
mSetIcon
=
true
;
return
rv
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsresult
nsMenuItemIconX
:
:
GetIconURI
(
nsIURI
*
*
aIconURI
)
{
if
(
!
mMenuObject
)
{
return
NS_ERROR_FAILURE
;
}
if
(
mMenuObject
-
>
MenuObjectType
(
)
=
=
eMenuItemObjectType
)
{
nsMenuItemX
*
menuItem
=
static_cast
<
nsMenuItemX
*
>
(
mMenuObject
)
;
if
(
menuItem
-
>
GetMenuItemType
(
)
!
=
eRegularMenuItemType
)
{
return
NS_ERROR_FAILURE
;
}
}
if
(
!
mContent
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
imageURIString
;
bool
hasImageAttr
=
mContent
-
>
IsElement
(
)
&
&
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
image
imageURIString
)
;
nsresult
rv
;
RefPtr
<
ComputedStyle
>
sc
;
nsCOMPtr
<
nsIURI
>
iconURI
;
if
(
!
hasImageAttr
)
{
RefPtr
<
mozilla
:
:
dom
:
:
Document
>
document
=
mContent
-
>
GetComposedDoc
(
)
;
if
(
!
document
|
|
!
mContent
-
>
IsElement
(
)
)
{
return
NS_ERROR_FAILURE
;
}
sc
=
nsComputedDOMStyle
:
:
GetComputedStyle
(
mContent
-
>
AsElement
(
)
nullptr
)
;
if
(
!
sc
)
{
return
NS_ERROR_FAILURE
;
}
iconURI
=
sc
-
>
StyleList
(
)
-
>
GetListStyleImageURI
(
)
;
if
(
!
iconURI
)
{
return
NS_ERROR_FAILURE
;
}
}
else
{
uint64_t
dummy
=
0
;
nsCOMPtr
<
nsIPrincipal
>
triggeringPrincipal
=
mContent
-
>
NodePrincipal
(
)
;
nsContentUtils
:
:
GetContentPolicyTypeForUIImageLoading
(
mContent
getter_AddRefs
(
triggeringPrincipal
)
mContentType
&
dummy
)
;
rv
=
NS_NewURI
(
getter_AddRefs
(
iconURI
)
imageURIString
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
mImageRegionRect
.
SetEmpty
(
)
;
iconURI
.
forget
(
aIconURI
)
;
if
(
!
hasImageAttr
)
{
const
nsRect
r
=
sc
-
>
StyleList
(
)
-
>
GetImageRegion
(
)
;
if
(
r
.
X
(
)
<
0
|
|
r
.
Y
(
)
<
0
|
|
r
.
Width
(
)
<
0
|
|
r
.
Height
(
)
<
0
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
r
.
IsEmpty
(
)
)
{
mImageRegionRect
=
r
.
ToNearestPixels
(
mozilla
:
:
AppUnitsPerCSSPixel
(
)
)
;
}
}
return
NS_OK
;
}
nsresult
nsMenuItemIconX
:
:
OnComplete
(
)
{
if
(
!
mIconLoaderHelper
)
{
return
NS_ERROR_FAILURE
;
}
NSImage
*
image
=
mIconLoaderHelper
-
>
GetNativeIconImage
(
)
;
if
(
!
mNativeMenuItem
)
{
mIconLoaderHelper
-
>
Destroy
(
)
;
return
NS_ERROR_FAILURE
;
}
if
(
!
image
)
{
[
mNativeMenuItem
setImage
:
nil
]
;
return
NS_OK
;
}
[
mNativeMenuItem
setImage
:
image
]
;
if
(
mMenuObject
)
{
mMenuObject
-
>
IconUpdated
(
)
;
}
mIconLoaderHelper
-
>
Destroy
(
)
;
return
NS_OK
;
}
