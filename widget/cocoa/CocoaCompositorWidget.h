#
ifndef
mozilla_widget_CocoaCompositorWidget_h
#
define
mozilla_widget_CocoaCompositorWidget_h
#
include
"
CompositorWidget
.
h
"
namespace
mozilla
{
namespace
widget
{
class
PlatformCompositorWidgetDelegate
:
public
CompositorWidgetDelegate
{
public
:
virtual
void
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
=
0
;
PlatformCompositorWidgetDelegate
*
AsPlatformSpecificDelegate
(
)
override
{
return
this
;
}
}
;
class
CocoaCompositorWidgetInitData
;
class
CocoaCompositorWidget
:
public
CompositorWidget
{
public
:
CocoaCompositorWidget
(
const
layers
:
:
CompositorOptions
&
aOptions
)
;
~
CocoaCompositorWidget
(
)
;
virtual
void
Init
(
CompositorWidgetInitData
&
&
aInitData
)
;
RefPtr
<
layers
:
:
NativeLayerRoot
>
GetNativeLayerRoot
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
override
;
void
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
void
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
;
CocoaCompositorWidget
*
AsCocoa
(
)
override
{
return
this
;
}
protected
:
LayoutDeviceIntSize
mClientSize
;
private
:
void
CreateNativeLayerRoot
(
)
;
RefPtr
<
layers
:
:
NativeLayerRoot
>
mNativeLayerRoot
;
}
;
}
}
#
endif
