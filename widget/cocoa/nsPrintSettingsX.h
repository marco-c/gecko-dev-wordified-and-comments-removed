#
ifndef
nsPrintSettingsX_h_
#
define
nsPrintSettingsX_h_
#
include
"
nsPrintSettingsImpl
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
#
define
NS_PRINTSETTINGSX_IID
\
{
\
0x0DF2FDBD
0x906D
0x4726
{
\
0x9E
0x4D
0xCF
0xE0
0x87
0x8D
0x70
0x7C
\
}
\
}
class
nsPrintSettingsX
:
public
nsPrintSettings
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_PRINTSETTINGSX_IID
)
NS_DECL_ISUPPORTS_INHERITED
nsPrintSettingsX
(
)
;
explicit
nsPrintSettingsX
(
const
PrintSettingsInitializer
&
aSettings
)
;
nsresult
Init
(
)
{
return
NS_OK
;
}
nsresult
ReadPageFormatFromPrefs
(
)
;
nsresult
WritePageFormatToPrefs
(
)
;
void
SetDestination
(
uint16_t
aDestination
)
{
mDestination
=
aDestination
;
}
void
GetDestination
(
uint16_t
*
aDestination
)
{
*
aDestination
=
mDestination
;
}
void
SetDisposition
(
const
nsString
&
aDisposition
)
{
mDisposition
=
aDisposition
;
}
void
GetDisposition
(
nsString
&
aDisposition
)
{
aDisposition
=
mDisposition
;
}
NSPrintInfo
*
CreateOrCopyPrintInfo
(
bool
aWithScaling
=
false
)
;
void
SetFromPrintInfo
(
NSPrintInfo
*
aPrintInfo
bool
aAdoptPrintInfo
)
;
protected
:
virtual
~
nsPrintSettingsX
(
)
{
if
(
mSystemPrintInfo
)
{
[
mSystemPrintInfo
release
]
;
}
}
;
nsPrintSettingsX
&
operator
=
(
const
nsPrintSettingsX
&
rhs
)
;
nsresult
_Clone
(
nsIPrintSettings
*
*
_retval
)
override
;
nsresult
_Assign
(
nsIPrintSettings
*
aPS
)
override
;
void
SetPMPageFormat
(
PMPageFormat
aPageFormat
)
;
void
SetPageFormatFromPrintInfo
(
const
NSPrintInfo
*
aPrintInfo
)
;
int
GetCocoaUnit
(
int16_t
aGeckoUnit
)
;
double
PaperSizeFromCocoaPoints
(
double
aPointsValue
)
{
return
aPointsValue
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
1
.
0
/
72
.
0
:
25
.
4
/
72
.
0
)
;
}
double
CocoaPointsFromPaperSize
(
double
aSizeUnitValue
)
{
return
aSizeUnitValue
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
72
.
0
:
72
.
0
/
25
.
4
)
;
}
nsString
mDisposition
;
uint16_t
mDestination
;
NSPrintInfo
*
mSystemPrintInfo
=
nullptr
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsPrintSettingsX
NS_PRINTSETTINGSX_IID
)
#
endif
