#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsSystemStatusBarCocoa
.
h
"
#
include
"
nsStandaloneNativeMenu
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
mozilla
:
:
dom
:
:
Element
;
NS_IMPL_ISUPPORTS
(
nsSystemStatusBarCocoa
nsISystemStatusBar
)
NS_IMETHODIMP
nsSystemStatusBarCocoa
:
:
AddItem
(
Element
*
aElement
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
RefPtr
<
nsStandaloneNativeMenu
>
menu
=
new
nsStandaloneNativeMenu
(
)
;
nsresult
rv
=
menu
-
>
Init
(
aElement
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsISupports
>
keyPtr
=
aElement
;
mItems
.
Put
(
keyPtr
new
StatusItem
(
menu
)
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
NS_IMETHODIMP
nsSystemStatusBarCocoa
:
:
RemoveItem
(
Element
*
aElement
)
{
NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT
;
mItems
.
Remove
(
aElement
)
;
return
NS_OK
;
NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT
;
}
nsSystemStatusBarCocoa
:
:
StatusItem
:
:
StatusItem
(
nsStandaloneNativeMenu
*
aMenu
)
:
mMenu
(
aMenu
)
{
MOZ_COUNT_CTOR
(
nsSystemStatusBarCocoa
:
:
StatusItem
)
;
NSMenu
*
nativeMenu
=
nil
;
mMenu
-
>
GetNativeMenu
(
reinterpret_cast
<
void
*
*
>
(
&
nativeMenu
)
)
;
mStatusItem
=
[
[
[
NSStatusBar
systemStatusBar
]
statusItemWithLength
:
NSSquareStatusItemLength
]
retain
]
;
[
mStatusItem
setMenu
:
nativeMenu
]
;
[
mStatusItem
setHighlightMode
:
YES
]
;
mMenu
-
>
SetContainerStatusBarItem
(
mStatusItem
)
;
}
nsSystemStatusBarCocoa
:
:
StatusItem
:
:
~
StatusItem
(
)
{
mMenu
-
>
SetContainerStatusBarItem
(
nil
)
;
[
[
NSStatusBar
systemStatusBar
]
removeStatusItem
:
mStatusItem
]
;
[
mStatusItem
release
]
;
mStatusItem
=
nil
;
MOZ_COUNT_DTOR
(
nsSystemStatusBarCocoa
:
:
StatusItem
)
;
}
