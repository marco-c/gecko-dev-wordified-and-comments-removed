#
include
"
nsSound
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsObjCExceptions
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsString
.
h
"
#
import
<
Cocoa
/
Cocoa
.
h
>
NS_IMPL_ISUPPORTS
(
nsSound
nsISound
nsIStreamLoaderObserver
)
nsSound
:
:
nsSound
(
)
{
}
nsSound
:
:
~
nsSound
(
)
{
}
NS_IMETHODIMP
nsSound
:
:
Beep
(
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
NSBeep
(
)
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsSound
:
:
OnStreamComplete
(
nsIStreamLoader
*
aLoader
nsISupports
*
context
nsresult
aStatus
uint32_t
dataLen
const
uint8_t
*
data
)
{
NS_OBJC_BEGIN_TRY_BLOCK_RETURN
;
NSData
*
value
=
[
NSData
dataWithBytes
:
data
length
:
dataLen
]
;
NSSound
*
sound
=
[
[
NSSound
alloc
]
initWithData
:
value
]
;
[
sound
play
]
;
[
sound
autorelease
]
;
return
NS_OK
;
NS_OBJC_END_TRY_BLOCK_RETURN
(
NS_ERROR_FAILURE
)
;
}
NS_IMETHODIMP
nsSound
:
:
Play
(
nsIURL
*
aURL
)
{
nsCOMPtr
<
nsIURI
>
uri
(
aURL
)
;
nsCOMPtr
<
nsIStreamLoader
>
loader
;
return
NS_NewStreamLoader
(
getter_AddRefs
(
loader
)
uri
this
nsContentUtils
:
:
GetSystemPrincipal
(
)
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
nsIContentPolicy
:
:
TYPE_OTHER
)
;
}
NS_IMETHODIMP
nsSound
:
:
Init
(
)
{
return
NS_OK
;
}
NS_IMETHODIMP
nsSound
:
:
PlayEventSound
(
uint32_t
aEventId
)
{
return
NS_OK
;
}
