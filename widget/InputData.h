#
ifndef
InputData_h__
#
define
InputData_h__
#
include
"
nsDebug
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsPoint
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
WheelHandlingHelper
.
h
"
#
include
"
mozilla
/
gfx
/
MatrixFwd
.
h
"
#
include
"
mozilla
/
layers
/
APZUtils
.
h
"
#
include
"
mozilla
/
layers
/
KeyboardScrollAction
.
h
"
template
<
class
E
>
struct
already_AddRefed
;
class
nsIWidget
;
namespace
mozilla
{
namespace
layers
{
class
APZInputBridgeChild
;
class
PAPZInputBridgeParent
;
}
namespace
dom
{
class
Touch
;
}
MOZ_DEFINE_ENUM
(
InputType
(
MULTITOUCH_INPUT
MOUSE_INPUT
PANGESTURE_INPUT
PINCHGESTURE_INPUT
TAPGESTURE_INPUT
SCROLLWHEEL_INPUT
KEYBOARD_INPUT
)
)
;
class
MultiTouchInput
;
class
MouseInput
;
class
PanGestureInput
;
class
PinchGestureInput
;
class
TapGestureInput
;
class
ScrollWheelInput
;
class
KeyboardInput
;
#
define
INPUTDATA_AS_CHILD_TYPE
(
type
enumID
)
\
const
type
&
As
#
#
type
(
)
const
{
\
MOZ_ASSERT
(
mInputType
=
=
enumID
"
Invalid
cast
of
InputData
.
"
)
;
\
return
(
const
type
&
)
*
this
;
\
}
\
type
&
As
#
#
type
(
)
{
\
MOZ_ASSERT
(
mInputType
=
=
enumID
"
Invalid
cast
of
InputData
.
"
)
;
\
return
(
type
&
)
*
this
;
\
}
class
InputData
{
public
:
InputType
mInputType
;
uint32_t
mTime
;
TimeStamp
mTimeStamp
;
uint64_t
mFocusSequenceNumber
;
Modifiers
modifiers
;
INPUTDATA_AS_CHILD_TYPE
(
MultiTouchInput
MULTITOUCH_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
MouseInput
MOUSE_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
PanGestureInput
PANGESTURE_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
PinchGestureInput
PINCHGESTURE_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
TapGestureInput
TAPGESTURE_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
ScrollWheelInput
SCROLLWHEEL_INPUT
)
INPUTDATA_AS_CHILD_TYPE
(
KeyboardInput
KEYBOARD_INPUT
)
virtual
~
InputData
(
)
;
explicit
InputData
(
InputType
aInputType
)
;
protected
:
InputData
(
InputType
aInputType
uint32_t
aTime
TimeStamp
aTimeStamp
Modifiers
aModifiers
)
;
}
;
class
SingleTouchData
{
public
:
SingleTouchData
(
int32_t
aIdentifier
ScreenIntPoint
aScreenPoint
ScreenSize
aRadius
float
aRotationAngle
float
aForce
)
;
SingleTouchData
(
int32_t
aIdentifier
ParentLayerPoint
aLocalScreenPoint
ScreenSize
aRadius
float
aRotationAngle
float
aForce
)
;
SingleTouchData
(
)
;
already_AddRefed
<
dom
:
:
Touch
>
ToNewDOMTouch
(
)
const
;
int32_t
mIdentifier
;
ScreenIntPoint
mScreenPoint
;
ParentLayerPoint
mLocalScreenPoint
;
ScreenSize
mRadius
;
float
mRotationAngle
;
float
mForce
;
}
;
class
MultiTouchInput
:
public
InputData
{
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
MultiTouchType
(
MULTITOUCH_START
MULTITOUCH_MOVE
MULTITOUCH_END
MULTITOUCH_CANCEL
)
)
;
MultiTouchInput
(
MultiTouchType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
Modifiers
aModifiers
)
;
MultiTouchInput
(
)
;
MultiTouchInput
(
const
MultiTouchInput
&
aOther
)
;
explicit
MultiTouchInput
(
const
WidgetTouchEvent
&
aTouchEvent
)
;
explicit
MultiTouchInput
(
const
WidgetMouseEvent
&
aMouseEvent
)
;
void
Translate
(
const
ScreenPoint
&
aTranslation
)
;
WidgetTouchEvent
ToWidgetTouchEvent
(
nsIWidget
*
aWidget
)
const
;
WidgetMouseEvent
ToWidgetMouseEvent
(
nsIWidget
*
aWidget
)
const
;
int32_t
IndexOfTouch
(
int32_t
aTouchIdentifier
)
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
MultiTouchType
mType
;
nsTArray
<
SingleTouchData
>
mTouches
;
bool
mHandledByAPZ
;
}
;
class
MouseInput
:
public
InputData
{
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
MouseInput
(
)
;
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
MouseType
(
MOUSE_NONE
MOUSE_MOVE
MOUSE_DOWN
MOUSE_UP
MOUSE_DRAG_START
MOUSE_DRAG_END
MOUSE_WIDGET_ENTER
MOUSE_WIDGET_EXIT
MOUSE_HITTEST
)
)
;
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
ButtonType
(
LEFT_BUTTON
MIDDLE_BUTTON
RIGHT_BUTTON
NONE
)
)
;
MouseInput
(
MouseType
aType
ButtonType
aButtonType
uint16_t
aInputSource
int16_t
aButtons
const
ScreenPoint
&
aPoint
uint32_t
aTime
TimeStamp
aTimeStamp
Modifiers
aModifiers
)
;
explicit
MouseInput
(
const
WidgetMouseEventBase
&
aMouseEvent
)
;
bool
IsLeftButton
(
)
const
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
WidgetMouseEvent
ToWidgetMouseEvent
(
nsIWidget
*
aWidget
)
const
;
MouseType
mType
;
ButtonType
mButtonType
;
uint16_t
mInputSource
;
int16_t
mButtons
;
ScreenPoint
mOrigin
;
ParentLayerPoint
mLocalOrigin
;
bool
mHandledByAPZ
;
}
;
class
PanGestureInput
:
public
InputData
{
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
PanGestureInput
(
)
;
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
PanGestureType
(
PANGESTURE_MAYSTART
PANGESTURE_CANCELLED
PANGESTURE_START
PANGESTURE_PAN
PANGESTURE_END
PANGESTURE_MOMENTUMSTART
PANGESTURE_MOMENTUMPAN
PANGESTURE_MOMENTUMEND
)
)
;
PanGestureInput
(
PanGestureType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
const
ScreenPoint
&
aPanStartPoint
const
ScreenPoint
&
aPanDisplacement
Modifiers
aModifiers
)
;
bool
IsMomentum
(
)
const
;
WidgetWheelEvent
ToWidgetWheelEvent
(
nsIWidget
*
aWidget
)
const
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
ScreenPoint
UserMultipliedPanDisplacement
(
)
const
;
ParentLayerPoint
UserMultipliedLocalPanDisplacement
(
)
const
;
PanGestureType
mType
;
ScreenPoint
mPanStartPoint
;
ScreenPoint
mPanDisplacement
;
ParentLayerPoint
mLocalPanStartPoint
;
ParentLayerPoint
mLocalPanDisplacement
;
int32_t
mLineOrPageDeltaX
;
int32_t
mLineOrPageDeltaY
;
double
mUserDeltaMultiplierX
;
double
mUserDeltaMultiplierY
;
bool
mHandledByAPZ
;
bool
mFollowedByMomentum
;
bool
mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection
;
bool
mOverscrollBehaviorAllowsSwipe
;
}
;
class
PinchGestureInput
:
public
InputData
{
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
PinchGestureInput
(
)
;
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
PinchGestureType
(
PINCHGESTURE_START
PINCHGESTURE_SCALE
PINCHGESTURE_END
)
)
;
PinchGestureInput
(
PinchGestureType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
const
ScreenPoint
&
aFocusPoint
ParentLayerCoord
aCurrentSpan
ParentLayerCoord
aPreviousSpan
Modifiers
aModifiers
)
;
PinchGestureInput
(
PinchGestureType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
const
ParentLayerPoint
&
aLocalFocusPoint
ParentLayerCoord
aCurrentSpan
ParentLayerCoord
aPreviousSpan
Modifiers
aModifiers
)
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
PinchGestureType
mType
;
ScreenPoint
mFocusPoint
;
ParentLayerPoint
mLocalFocusPoint
;
ParentLayerCoord
mCurrentSpan
;
ParentLayerCoord
mPreviousSpan
;
template
<
typename
Units
=
ParentLayerPixel
>
static
gfx
:
:
PointTyped
<
Units
>
BothFingersLifted
(
)
{
return
gfx
:
:
PointTyped
<
Units
>
{
-
1
-
1
}
;
}
}
;
class
TapGestureInput
:
public
InputData
{
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
TapGestureInput
(
)
;
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
TapGestureType
(
TAPGESTURE_LONG
TAPGESTURE_LONG_UP
TAPGESTURE_UP
TAPGESTURE_CONFIRMED
TAPGESTURE_DOUBLE
TAPGESTURE_SECOND
TAPGESTURE_CANCEL
)
)
;
TapGestureInput
(
TapGestureType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
const
ScreenIntPoint
&
aPoint
Modifiers
aModifiers
)
;
TapGestureInput
(
TapGestureType
aType
uint32_t
aTime
TimeStamp
aTimeStamp
const
ParentLayerPoint
&
aLocalPoint
Modifiers
aModifiers
)
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
TapGestureType
mType
;
ScreenIntPoint
mPoint
;
ParentLayerPoint
mLocalPoint
;
}
;
class
ScrollWheelInput
:
public
InputData
{
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
typedef
mozilla
:
:
layers
:
:
APZWheelAction
APZWheelAction
;
ScrollWheelInput
(
)
;
public
:
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
ScrollDeltaType
(
SCROLLDELTA_LINE
SCROLLDELTA_PAGE
SCROLLDELTA_PIXEL
)
)
;
MOZ_DEFINE_ENUM_AT_CLASS_SCOPE
(
ScrollMode
(
SCROLLMODE_INSTANT
SCROLLMODE_SMOOTH
)
)
;
ScrollWheelInput
(
uint32_t
aTime
TimeStamp
aTimeStamp
Modifiers
aModifiers
ScrollMode
aScrollMode
ScrollDeltaType
aDeltaType
const
ScreenPoint
&
aOrigin
double
aDeltaX
double
aDeltaY
bool
aAllowToOverrideSystemScrollSpeed
WheelDeltaAdjustmentStrategy
aWheelDeltaAdjustmentStrategy
)
;
explicit
ScrollWheelInput
(
const
WidgetWheelEvent
&
aEvent
)
;
static
ScrollDeltaType
DeltaTypeForDeltaMode
(
uint32_t
aDeltaMode
)
;
static
uint32_t
DeltaModeForDeltaType
(
ScrollDeltaType
aDeltaType
)
;
static
nsIScrollableFrame
:
:
ScrollUnit
ScrollUnitForDeltaType
(
ScrollDeltaType
aDeltaType
)
;
WidgetWheelEvent
ToWidgetWheelEvent
(
nsIWidget
*
aWidget
)
const
;
bool
TransformToLocal
(
const
ScreenToParentLayerMatrix4x4
&
aTransform
)
;
bool
IsCustomizedByUserPrefs
(
)
const
;
bool
IsAutoDir
(
)
const
{
switch
(
mWheelDeltaAdjustmentStrategy
)
{
case
WheelDeltaAdjustmentStrategy
:
:
eAutoDir
:
case
WheelDeltaAdjustmentStrategy
:
:
eAutoDirWithRootHonour
:
return
true
;
default
:
break
;
}
return
false
;
}
bool
HonoursRoot
(
)
const
{
return
WheelDeltaAdjustmentStrategy
:
:
eAutoDirWithRootHonour
=
=
mWheelDeltaAdjustmentStrategy
;
}
ScrollDeltaType
mDeltaType
;
ScrollMode
mScrollMode
;
ScreenPoint
mOrigin
;
bool
mHandledByAPZ
;
double
mDeltaX
;
double
mDeltaY
;
ParentLayerPoint
mLocalOrigin
;
int32_t
mLineOrPageDeltaX
;
int32_t
mLineOrPageDeltaY
;
uint32_t
mScrollSeriesNumber
;
double
mUserDeltaMultiplierX
;
double
mUserDeltaMultiplierY
;
bool
mMayHaveMomentum
;
bool
mIsMomentum
;
bool
mAllowToOverrideSystemScrollSpeed
;
WheelDeltaAdjustmentStrategy
mWheelDeltaAdjustmentStrategy
;
APZWheelAction
mAPZAction
;
}
;
class
KeyboardInput
:
public
InputData
{
public
:
typedef
mozilla
:
:
layers
:
:
KeyboardScrollAction
KeyboardScrollAction
;
enum
KeyboardEventType
{
KEY_DOWN
KEY_PRESS
KEY_UP
KEY_OTHER
KEY_SENTINEL
}
;
explicit
KeyboardInput
(
const
WidgetKeyboardEvent
&
aEvent
)
;
KeyboardEventType
mType
;
uint32_t
mKeyCode
;
uint32_t
mCharCode
;
nsTArray
<
ShortcutKeyCandidate
>
mShortcutCandidates
;
bool
mHandledByAPZ
;
KeyboardScrollAction
mAction
;
protected
:
friend
mozilla
:
:
layers
:
:
APZInputBridgeChild
;
friend
mozilla
:
:
layers
:
:
PAPZInputBridgeParent
;
KeyboardInput
(
)
;
}
;
}
#
endif
