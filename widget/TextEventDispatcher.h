#
ifndef
mozilla_textcompositionsynthesizer_h_
#
define
mozilla_textcompositionsynthesizer_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TextEventDispatcherListener
.
h
"
#
include
"
mozilla
/
TextRange
.
h
"
#
include
"
mozilla
/
widget
/
IMEData
.
h
"
class
nsIWidget
;
namespace
mozilla
{
namespace
widget
{
class
PuppetWidget
;
class
TextEventDispatcher
final
{
~
TextEventDispatcher
(
)
{
}
NS_INLINE_DECL_REFCOUNTING
(
TextEventDispatcher
)
public
:
explicit
TextEventDispatcher
(
nsIWidget
*
aWidget
)
;
nsresult
BeginInputTransaction
(
TextEventDispatcherListener
*
aListener
)
;
nsresult
BeginTestInputTransaction
(
TextEventDispatcherListener
*
aListener
bool
aIsAPZAware
)
;
nsresult
BeginNativeInputTransaction
(
)
;
nsresult
BeginInputTransactionFor
(
const
WidgetGUIEvent
*
aEvent
PuppetWidget
*
aPuppetWidget
)
;
void
EndInputTransaction
(
TextEventDispatcherListener
*
aListener
)
;
void
OnDestroyWidget
(
)
;
nsIWidget
*
GetWidget
(
)
const
{
return
mWidget
;
}
const
IMENotificationRequests
&
IMENotificationRequestsRef
(
)
const
{
return
mIMENotificationRequests
;
}
void
OnWidgetChangeIMENotificationRequests
(
nsIWidget
*
aWidget
)
{
MOZ_ASSERT
(
aWidget
)
;
if
(
mWidget
=
=
aWidget
)
{
UpdateNotificationRequests
(
)
;
}
}
nsresult
GetState
(
)
const
;
bool
IsComposing
(
)
const
{
return
mIsComposing
;
}
bool
IsHandlingComposition
(
)
const
{
return
mIsHandlingComposition
;
}
bool
IsInNativeInputTransaction
(
)
const
{
return
mInputTransactionType
=
=
eNativeInputTransaction
;
}
bool
IsDispatchingEvent
(
)
const
{
return
mDispatchingEvent
>
0
;
}
void
*
GetPseudoIMEContext
(
)
const
{
if
(
mInputTransactionType
=
=
eNoInputTransaction
|
|
mInputTransactionType
=
=
eNativeInputTransaction
)
{
return
nullptr
;
}
return
const_cast
<
TextEventDispatcher
*
>
(
this
)
;
}
nsresult
StartComposition
(
nsEventStatus
&
aStatus
const
WidgetEventTime
*
aEventTime
=
nullptr
)
;
nsresult
CommitComposition
(
nsEventStatus
&
aStatus
const
nsAString
*
aCommitString
=
nullptr
const
WidgetEventTime
*
aEventTime
=
nullptr
)
;
nsresult
SetPendingCompositionString
(
const
nsAString
&
aString
)
{
return
mPendingComposition
.
SetString
(
aString
)
;
}
nsresult
AppendClauseToPendingComposition
(
uint32_t
aLength
TextRangeType
aTextRangeType
)
{
return
mPendingComposition
.
AppendClause
(
aLength
aTextRangeType
)
;
}
nsresult
SetCaretInPendingComposition
(
uint32_t
aOffset
uint32_t
aLength
)
{
return
mPendingComposition
.
SetCaret
(
aOffset
aLength
)
;
}
nsresult
SetPendingComposition
(
const
nsAString
&
aString
const
TextRangeArray
*
aRanges
)
{
return
mPendingComposition
.
Set
(
aString
aRanges
)
;
}
nsresult
FlushPendingComposition
(
nsEventStatus
&
aStatus
const
WidgetEventTime
*
aEventTime
=
nullptr
)
{
return
mPendingComposition
.
Flush
(
this
aStatus
aEventTime
)
;
}
void
ClearPendingComposition
(
)
{
mPendingComposition
.
Clear
(
)
;
}
const
TextRangeArray
*
GetPendingCompositionClauses
(
)
const
{
return
mPendingComposition
.
GetClauses
(
)
;
}
nsresult
NotifyIME
(
const
IMENotification
&
aIMENotification
)
;
bool
DispatchKeyboardEvent
(
EventMessage
aMessage
const
WidgetKeyboardEvent
&
aKeyboardEvent
nsEventStatus
&
aStatus
void
*
aData
=
nullptr
)
;
bool
MaybeDispatchKeypressEvents
(
const
WidgetKeyboardEvent
&
aKeyboardEvent
nsEventStatus
&
aStatus
void
*
aData
=
nullptr
bool
aNeedsCallback
=
false
)
;
private
:
nsIWidget
*
mWidget
;
nsWeakPtr
mListener
;
IMENotificationRequests
mIMENotificationRequests
;
class
PendingComposition
{
public
:
PendingComposition
(
)
;
nsresult
SetString
(
const
nsAString
&
aString
)
;
nsresult
AppendClause
(
uint32_t
aLength
TextRangeType
aTextRangeType
)
;
nsresult
SetCaret
(
uint32_t
aOffset
uint32_t
aLength
)
;
nsresult
Set
(
const
nsAString
&
aString
const
TextRangeArray
*
aRanges
)
;
nsresult
Flush
(
TextEventDispatcher
*
aDispatcher
nsEventStatus
&
aStatus
const
WidgetEventTime
*
aEventTime
)
;
const
TextRangeArray
*
GetClauses
(
)
const
{
return
mClauses
;
}
void
Clear
(
)
;
private
:
nsString
mString
;
RefPtr
<
TextRangeArray
>
mClauses
;
TextRange
mCaret
;
bool
mReplacedNativeLineBreakers
;
void
EnsureClauseArray
(
)
;
void
ReplaceNativeLineBreakers
(
)
;
static
void
AdjustRange
(
TextRange
&
aRange
const
nsAString
&
aNativeString
)
;
}
;
PendingComposition
mPendingComposition
;
uint16_t
mDispatchingEvent
;
enum
InputTransactionType
:
uint8_t
{
eNoInputTransaction
eNativeInputTransaction
eAsyncTestInputTransaction
eSameProcessSyncTestInputTransaction
eSameProcessSyncInputTransaction
}
;
InputTransactionType
mInputTransactionType
;
bool
IsForTests
(
)
const
{
return
mInputTransactionType
=
=
eAsyncTestInputTransaction
|
|
mInputTransactionType
=
=
eSameProcessSyncTestInputTransaction
;
}
bool
ShouldSendInputEventToAPZ
(
)
const
{
switch
(
mInputTransactionType
)
{
case
eNativeInputTransaction
:
case
eAsyncTestInputTransaction
:
return
true
;
case
eSameProcessSyncTestInputTransaction
:
case
eSameProcessSyncInputTransaction
:
return
false
;
case
eNoInputTransaction
:
NS_WARNING
(
"
Why
does
the
caller
need
to
dispatch
an
event
when
"
"
there
is
no
input
transaction
?
"
)
;
return
true
;
default
:
MOZ_CRASH
(
"
Define
the
behavior
of
new
InputTransactionType
"
)
;
}
}
bool
mIsComposing
;
bool
mIsHandlingComposition
;
bool
mHasFocus
;
static
bool
sDispatchKeyEventsDuringComposition
;
static
bool
sDispatchKeyPressEventsOnlySystemGroupInContent
;
nsresult
BeginInputTransactionInternal
(
TextEventDispatcherListener
*
aListener
InputTransactionType
aType
)
;
void
InitEvent
(
WidgetGUIEvent
&
aEvent
)
const
;
nsresult
DispatchEvent
(
nsIWidget
*
aWidget
WidgetGUIEvent
&
aEvent
nsEventStatus
&
aStatus
)
;
nsresult
DispatchInputEvent
(
nsIWidget
*
aWidget
WidgetInputEvent
&
aEvent
nsEventStatus
&
aStatus
)
;
nsresult
StartCompositionAutomaticallyIfNecessary
(
nsEventStatus
&
aStatus
const
WidgetEventTime
*
aEventTime
)
;
bool
DispatchKeyboardEventInternal
(
EventMessage
aMessage
const
WidgetKeyboardEvent
&
aKeyboardEvent
nsEventStatus
&
aStatus
void
*
aData
uint32_t
aIndexOfKeypress
=
0
bool
aNeedsCallback
=
false
)
;
void
ClearNotificationRequests
(
)
;
void
UpdateNotificationRequests
(
)
;
}
;
}
}
#
endif
