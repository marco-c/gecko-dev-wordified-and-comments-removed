#
ifndef
nsDragService_h__
#
define
nsDragService_h__
#
include
"
nsBaseDragService
.
h
"
#
include
"
AndroidGraphics
.
h
"
#
include
"
mozilla
/
java
/
GeckoDragAndDropNatives
.
h
"
class
nsITransferable
;
class
nsDragSession
:
public
nsBaseDragSession
{
public
:
NS_IMETHOD
GetData
(
nsITransferable
*
aTransferable
uint32_t
anItem
)
override
;
NS_IMETHOD
GetNumDropItems
(
uint32_t
*
aNumItems
)
override
;
NS_IMETHOD
IsDataFlavorSupported
(
const
char
*
aDataFlavor
bool
*
_retval
)
override
;
NS_IMETHOD
UpdateDragImage
(
nsINode
*
aImage
int32_t
aImageX
int32_t
aImageY
)
override
;
void
SetData
(
nsITransferable
*
aTransferable
)
;
void
SetDropData
(
mozilla
:
:
java
:
:
GeckoDragAndDrop
:
:
DropData
:
:
Param
aDropData
)
;
virtual
bool
MustUpdateDataTransfer
(
mozilla
:
:
EventMessage
aMessage
)
override
;
MOZ_CAN_RUN_SCRIPT
nsresult
EndDragSessionImpl
(
bool
aDoneDrag
uint32_t
aKeyModifiers
)
override
;
protected
:
virtual
~
nsDragSession
(
)
=
default
;
MOZ_CAN_RUN_SCRIPT
nsresult
InvokeDragSessionImpl
(
nsIWidget
*
aWidget
nsIArray
*
anArrayTransferables
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
uint32_t
aActionType
)
override
;
mozilla
:
:
java
:
:
sdk
:
:
Bitmap
:
:
LocalRef
CreateDragImage
(
nsINode
*
aNode
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
)
;
nsCOMPtr
<
nsITransferable
>
mTransferable
;
}
;
class
nsDragService
final
:
public
nsBaseDragService
{
public
:
static
already_AddRefed
<
nsDragService
>
GetInstance
(
)
;
protected
:
already_AddRefed
<
nsIDragSession
>
CreateDragSession
(
)
override
;
}
;
#
endif
