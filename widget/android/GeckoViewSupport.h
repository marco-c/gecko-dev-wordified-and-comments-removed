#
ifndef
mozilla_widget_GeckoViewSupport_h
#
define
mozilla_widget_GeckoViewSupport_h
#
include
"
mozilla
/
java
/
GeckoResultWrappers
.
h
"
#
include
"
mozilla
/
java
/
GeckoSessionNatives
.
h
"
#
include
"
mozilla
/
java
/
WebResponseWrappers
.
h
"
#
include
"
mozilla
/
dom
/
CanonicalBrowsingContext
.
h
"
#
include
"
mozilla
/
widget
/
WindowEvent
.
h
"
class
nsPIDOMWindowOuter
;
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
GeckoViewSupport
final
:
public
java
:
:
GeckoSession
:
:
Window
:
:
Natives
<
GeckoViewSupport
>
{
RefPtr
<
nsWindow
>
mWindow
;
java
:
:
GeckoSession
:
:
Window
:
:
WeakRef
mGeckoViewWindow
;
public
:
typedef
java
:
:
GeckoSession
:
:
Window
:
:
Natives
<
GeckoViewSupport
>
Base
;
template
<
typename
Functor
>
static
void
OnNativeCall
(
Functor
&
&
aCall
)
{
NS_DispatchToMainThread
(
new
WindowEvent
<
Functor
>
(
std
:
:
move
(
aCall
)
)
)
;
}
GeckoViewSupport
(
nsWindow
*
aWindow
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
aInstance
nsPIDOMWindowOuter
*
aDOMWindow
)
:
mWindow
(
aWindow
)
mGeckoViewWindow
(
aInstance
)
mDOMWindow
(
aDOMWindow
)
{
}
~
GeckoViewSupport
(
)
;
nsWindow
*
GetNsWindow
(
)
const
{
return
mWindow
;
}
using
Base
:
:
DisposeNative
;
private
:
nsCOMPtr
<
nsPIDOMWindowOuter
>
mDOMWindow
;
bool
mIsReady
{
false
}
;
RefPtr
<
dom
:
:
CanonicalBrowsingContext
>
GetContentCanonicalBrowsingContext
(
)
;
public
:
static
void
Open
(
const
jni
:
:
Class
:
:
LocalRef
&
aCls
java
:
:
GeckoSession
:
:
Window
:
:
Param
aWindow
jni
:
:
Object
:
:
Param
aQueue
jni
:
:
Object
:
:
Param
aCompositor
jni
:
:
Object
:
:
Param
aDispatcher
jni
:
:
Object
:
:
Param
aSessionAccessibility
jni
:
:
Object
:
:
Param
aInitData
jni
:
:
String
:
:
Param
aId
jni
:
:
String
:
:
Param
aChromeURI
bool
aPrivateMode
)
;
void
Close
(
)
;
void
Transfer
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aQueue
jni
:
:
Object
:
:
Param
aCompositor
jni
:
:
Object
:
:
Param
aDispatcher
jni
:
:
Object
:
:
Param
aSessionAccessibility
jni
:
:
Object
:
:
Param
aInitData
)
;
void
AttachEditable
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aEditableParent
)
;
void
AttachAccessibility
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aSessionAccessibility
)
;
void
OnReady
(
jni
:
:
Object
:
:
Param
aQueue
=
nullptr
)
;
auto
OnLoadRequest
(
mozilla
:
:
jni
:
:
String
:
:
Param
aUri
int32_t
aWindowType
int32_t
aFlags
mozilla
:
:
jni
:
:
String
:
:
Param
aTriggeringUri
bool
aHasUserGesture
bool
aIsTopLevel
)
const
-
>
java
:
:
GeckoResult
:
:
LocalRef
;
void
OnShowDynamicToolbar
(
)
const
;
void
OnUpdateSessionStore
(
mozilla
:
:
jni
:
:
Object
:
:
Param
aBundle
)
;
void
PassExternalResponse
(
java
:
:
WebResponse
:
:
Param
aResponse
)
;
void
AttachMediaSessionController
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aController
const
int64_t
aId
)
;
void
DetachMediaSessionController
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aController
)
;
void
OnWeakNonIntrusiveDetach
(
already_AddRefed
<
Runnable
>
aDisposer
)
{
RefPtr
<
Runnable
>
disposer
(
aDisposer
)
;
disposer
-
>
Run
(
)
;
}
MOZ_CAN_RUN_SCRIPT
void
PrintToPdf
(
const
java
:
:
GeckoSession
:
:
Window
:
:
LocalRef
&
inst
jni
:
:
Object
:
:
Param
aStream
)
;
}
;
}
}
#
endif
