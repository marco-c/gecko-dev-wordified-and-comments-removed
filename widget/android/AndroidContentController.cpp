#
include
"
AndroidContentController
.
h
"
#
include
"
AndroidBridge
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsWindow
.
h
"
using
mozilla
:
:
layers
:
:
IAPZCTreeManager
;
namespace
mozilla
{
namespace
widget
{
void
AndroidContentController
:
:
Destroy
(
)
{
mAndroidWindow
=
nullptr
;
ChromeProcessController
:
:
Destroy
(
)
;
}
void
AndroidContentController
:
:
NotifyDefaultPrevented
(
IAPZCTreeManager
*
aManager
uint64_t
aInputBlockId
bool
aDefaultPrevented
)
{
if
(
!
AndroidBridge
:
:
IsJavaUiThread
(
)
)
{
AndroidBridge
:
:
Bridge
(
)
-
>
PostTaskToUiThread
(
NewRunnableMethod
<
uint64_t
bool
>
(
aManager
&
IAPZCTreeManager
:
:
ContentReceivedInputBlock
aInputBlockId
aDefaultPrevented
)
0
)
;
return
;
}
aManager
-
>
ContentReceivedInputBlock
(
aInputBlockId
aDefaultPrevented
)
;
}
void
AndroidContentController
:
:
DispatchSingleTapToObservers
(
const
LayoutDevicePoint
&
aPoint
const
ScrollableLayerGuid
&
aGuid
)
const
{
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aGuid
.
mScrollId
)
;
nsIPresShell
*
shell
=
content
?
mozilla
:
:
layers
:
:
APZCCallbackHelper
:
:
GetRootContentDocumentPresShellForContent
(
content
)
:
nullptr
;
if
(
!
shell
|
|
!
shell
-
>
GetPresContext
(
)
)
{
return
;
}
CSSPoint
point
=
mozilla
:
:
layers
:
:
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
aPoint
/
shell
-
>
GetPresContext
(
)
-
>
CSSToDevPixelScale
(
)
aGuid
)
;
if
(
shell
-
>
ScaleToResolution
(
)
)
{
const
float
resolution
=
shell
-
>
GetResolution
(
)
;
point
.
x
/
=
resolution
;
point
.
y
/
=
resolution
;
}
CSSIntPoint
rounded
=
RoundedToInt
(
point
)
;
nsAppShell
:
:
PostEvent
(
[
rounded
]
{
nsCOMPtr
<
nsIObserverService
>
obsServ
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
obsServ
)
{
return
;
}
nsPrintfCString
data
(
"
{
\
"
x
\
"
:
%
d
\
"
y
\
"
:
%
d
}
"
rounded
.
x
rounded
.
y
)
;
obsServ
-
>
NotifyObservers
(
nullptr
"
Gesture
:
SingleTap
"
NS_ConvertASCIItoUTF16
(
data
)
.
get
(
)
)
;
}
)
;
}
void
AndroidContentController
:
:
HandleTap
(
TapType
aType
const
LayoutDevicePoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
uint64_t
aInputBlockId
)
{
if
(
NS_IsMainThread
(
)
&
&
aType
=
=
TapType
:
:
eSingleTap
)
{
DispatchSingleTapToObservers
(
aPoint
aGuid
)
;
}
ChromeProcessController
:
:
HandleTap
(
aType
aPoint
aModifiers
aGuid
aInputBlockId
)
;
}
void
AndroidContentController
:
:
PostDelayedTask
(
already_AddRefed
<
Runnable
>
aTask
int
aDelayMs
)
{
AndroidBridge
:
:
Bridge
(
)
-
>
PostTaskToUiThread
(
Move
(
aTask
)
aDelayMs
)
;
}
void
AndroidContentController
:
:
UpdateOverscrollVelocity
(
const
float
aX
const
float
aY
)
{
if
(
mAndroidWindow
)
{
mAndroidWindow
-
>
UpdateOverscrollVelocity
(
aX
aY
)
;
}
}
void
AndroidContentController
:
:
UpdateOverscrollOffset
(
const
float
aX
const
float
aY
)
{
if
(
mAndroidWindow
)
{
mAndroidWindow
-
>
UpdateOverscrollOffset
(
aX
aY
)
;
}
}
void
AndroidContentController
:
:
SetScrollingRootContent
(
const
bool
isRootContent
)
{
if
(
mAndroidWindow
)
{
mAndroidWindow
-
>
SetScrollingRootContent
(
isRootContent
)
;
}
}
void
AndroidContentController
:
:
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
)
{
ChromeProcessController
:
:
NotifyAPZStateChange
(
aGuid
aChange
aArg
)
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
aChange
=
=
layers
:
:
GeckoContentController
:
:
APZStateChange
:
:
eTransformEnd
)
{
observerService
-
>
NotifyObservers
(
nullptr
"
APZ
:
TransformEnd
"
nullptr
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
PanZoom
:
StateChange
"
u
"
NOTHING
"
)
;
}
else
if
(
aChange
=
=
layers
:
:
GeckoContentController
:
:
APZStateChange
:
:
eTransformBegin
)
{
observerService
-
>
NotifyObservers
(
nullptr
"
PanZoom
:
StateChange
"
u
"
PANNING
"
)
;
}
}
}
}
}
