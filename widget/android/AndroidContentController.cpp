#
include
"
AndroidContentController
.
h
"
#
include
"
AndroidBridge
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
IAPZCTreeManager
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsWindow
.
h
"
using
mozilla
:
:
layers
:
:
IAPZCTreeManager
;
namespace
mozilla
{
namespace
widget
{
void
AndroidContentController
:
:
Destroy
(
)
{
mAndroidWindow
=
nullptr
;
ChromeProcessController
:
:
Destroy
(
)
;
}
void
AndroidContentController
:
:
UpdateOverscrollVelocity
(
const
ScrollableLayerGuid
&
aGuid
const
float
aX
const
float
aY
const
bool
aIsRootContent
)
{
if
(
aIsRootContent
&
&
mAndroidWindow
)
{
mAndroidWindow
-
>
UpdateOverscrollVelocity
(
aX
aY
)
;
}
}
void
AndroidContentController
:
:
UpdateOverscrollOffset
(
const
ScrollableLayerGuid
&
aGuid
const
float
aX
const
float
aY
const
bool
aIsRootContent
)
{
if
(
aIsRootContent
&
&
mAndroidWindow
)
{
mAndroidWindow
-
>
UpdateOverscrollOffset
(
aX
aY
)
;
}
}
void
AndroidContentController
:
:
NotifyAPZStateChange
(
const
ScrollableLayerGuid
&
aGuid
APZStateChange
aChange
int
aArg
Maybe
<
uint64_t
>
aInputBlockId
)
{
ChromeProcessController
:
:
NotifyAPZStateChange
(
aGuid
aChange
aArg
aInputBlockId
)
;
if
(
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
aChange
=
=
layers
:
:
GeckoContentController
:
:
APZStateChange
:
:
eTransformEnd
)
{
observerService
-
>
NotifyObservers
(
nullptr
"
APZ
:
TransformEnd
"
nullptr
)
;
observerService
-
>
NotifyObservers
(
nullptr
"
PanZoom
:
StateChange
"
u
"
NOTHING
"
)
;
}
else
if
(
aChange
=
=
layers
:
:
GeckoContentController
:
:
APZStateChange
:
:
eTransformBegin
)
{
observerService
-
>
NotifyObservers
(
nullptr
"
PanZoom
:
StateChange
"
u
"
PANNING
"
)
;
}
}
}
}
}
