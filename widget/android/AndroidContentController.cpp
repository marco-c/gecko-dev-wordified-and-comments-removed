#
include
"
AndroidContentController
.
h
"
#
include
"
AndroidBridge
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
mozilla
/
layers
/
APZCCallbackHelper
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManager
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsWindow
.
h
"
using
mozilla
:
:
layers
:
:
APZCTreeManager
;
namespace
mozilla
{
namespace
widget
{
namespace
android
{
NativePanZoomController
:
:
GlobalRef
AndroidContentController
:
:
sNativePanZoomController
=
nullptr
;
NativePanZoomController
:
:
LocalRef
AndroidContentController
:
:
SetNativePanZoomController
(
NativePanZoomController
:
:
Param
obj
)
{
NativePanZoomController
:
:
LocalRef
old
=
sNativePanZoomController
;
sNativePanZoomController
=
obj
;
return
old
;
}
void
AndroidContentController
:
:
NotifyDefaultPrevented
(
uint64_t
aInputBlockId
bool
aDefaultPrevented
)
{
if
(
!
AndroidBridge
:
:
IsJavaUiThread
(
)
)
{
AndroidBridge
:
:
Bridge
(
)
-
>
PostTaskToUiThread
(
NewRunnableFunction
(
&
AndroidContentController
:
:
NotifyDefaultPrevented
aInputBlockId
aDefaultPrevented
)
0
)
;
return
;
}
MOZ_ASSERT
(
AndroidBridge
:
:
IsJavaUiThread
(
)
)
;
APZCTreeManager
*
controller
=
nsWindow
:
:
GetAPZCTreeManager
(
)
;
if
(
controller
)
{
controller
-
>
ContentReceivedInputBlock
(
aInputBlockId
aDefaultPrevented
)
;
}
}
void
AndroidContentController
:
:
HandleSingleTap
(
const
CSSPoint
&
aPoint
Modifiers
aModifiers
const
ScrollableLayerGuid
&
aGuid
)
{
if
(
NS_IsMainThread
(
)
)
{
CSSPoint
point
=
mozilla
:
:
layers
:
:
APZCCallbackHelper
:
:
ApplyCallbackTransform
(
aPoint
aGuid
)
;
nsIContent
*
content
=
nsLayoutUtils
:
:
FindContentFor
(
aGuid
.
mScrollId
)
;
nsIPresShell
*
shell
=
content
?
mozilla
:
:
layers
:
:
APZCCallbackHelper
:
:
GetRootContentDocumentPresShellForContent
(
content
)
:
nullptr
;
if
(
shell
&
&
shell
-
>
ScaleToResolution
(
)
)
{
const
float
resolution
=
shell
-
>
GetResolution
(
)
;
point
.
x
/
=
resolution
;
point
.
y
/
=
resolution
;
}
CSSIntPoint
rounded
=
RoundedToInt
(
point
)
;
nsCString
data
=
nsPrintfCString
(
"
{
\
"
x
\
"
:
%
d
\
"
y
\
"
:
%
d
}
"
rounded
.
x
rounded
.
y
)
;
nsAppShell
:
:
PostEvent
(
AndroidGeckoEvent
:
:
MakeBroadcastEvent
(
NS_LITERAL_CSTRING
(
"
Gesture
:
SingleTap
"
)
data
)
)
;
}
ChromeProcessController
:
:
HandleSingleTap
(
aPoint
aModifiers
aGuid
)
;
}
void
AndroidContentController
:
:
PostDelayedTask
(
Task
*
aTask
int
aDelayMs
)
{
AndroidBridge
:
:
Bridge
(
)
-
>
PostTaskToUiThread
(
aTask
aDelayMs
)
;
}
}
}
}
