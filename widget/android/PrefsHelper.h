#
ifndef
PrefsHelper_h
#
define
PrefsHelper_h
#
include
"
GeneratedJNINatives
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsAppShell
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
struct
PrefsHelper
:
widget
:
:
PrefsHelper
:
:
Natives
<
PrefsHelper
>
UsesGeckoThreadProxy
{
PrefsHelper
(
)
=
delete
;
static
void
GetPrefsById
(
const
jni
:
:
ClassObject
:
:
LocalRef
&
cls
int32_t
requestId
jni
:
:
ObjectArray
:
:
Param
prefNames
bool
observe
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
nsAppShell
:
:
gAppShell
)
;
nsTArray
<
jni
:
:
Object
:
:
LocalRef
>
namesRefArray
(
prefNames
.
GetElements
(
)
)
;
const
size_t
len
=
namesRefArray
.
Length
(
)
;
nsTArray
<
nsString
>
namesStrArray
;
nsTArray
<
const
char16_t
*
>
namesPtrArray
;
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
!
namesRefArray
[
i
]
)
{
namesPtrArray
.
AppendElement
(
nullptr
)
;
continue
;
}
namesPtrArray
.
AppendElement
(
namesStrArray
.
AppendElement
(
nsString
(
jni
:
:
String
:
:
LocalRef
(
mozilla
:
:
Move
(
namesRefArray
[
i
]
)
)
)
)
-
>
Data
(
)
)
;
}
nsIAndroidBrowserApp
*
browserApp
=
nullptr
;
nsAppShell
:
:
gAppShell
-
>
GetBrowserApp
(
&
browserApp
)
;
MOZ_ASSERT
(
browserApp
)
;
if
(
observe
)
{
browserApp
-
>
ObservePreferences
(
requestId
len
?
&
namesPtrArray
[
0
]
:
nullptr
len
)
;
}
else
{
browserApp
-
>
GetPreferences
(
requestId
len
?
&
namesPtrArray
[
0
]
:
nullptr
len
)
;
}
}
static
void
RemovePrefsObserver
(
int32_t
requestId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
nsAppShell
:
:
gAppShell
)
;
nsIAndroidBrowserApp
*
browserApp
=
nullptr
;
nsAppShell
:
:
gAppShell
-
>
GetBrowserApp
(
&
browserApp
)
;
MOZ_ASSERT
(
browserApp
)
;
browserApp
-
>
RemovePreferenceObservers
(
requestId
)
;
}
}
;
}
#
endif
