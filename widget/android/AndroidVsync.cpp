#
include
"
AndroidVsync
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
widget
{
StaticDataMutex
<
ThreadSafeWeakPtr
<
AndroidVsync
>
>
AndroidVsync
:
:
sInstance
(
"
AndroidVsync
:
:
sInstance
"
)
;
RefPtr
<
AndroidVsync
>
AndroidVsync
:
:
GetInstance
(
)
{
auto
weakInstance
=
sInstance
.
Lock
(
)
;
RefPtr
<
AndroidVsync
>
instance
(
*
weakInstance
)
;
if
(
!
instance
)
{
instance
=
new
AndroidVsync
(
)
;
*
weakInstance
=
instance
;
}
return
instance
;
}
class
AndroidVsyncSupport
final
:
public
java
:
:
AndroidVsync
:
:
Natives
<
AndroidVsyncSupport
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AndroidVsyncSupport
)
using
Base
=
java
:
:
AndroidVsync
:
:
Natives
<
AndroidVsyncSupport
>
;
using
Base
:
:
AttachNative
;
using
Base
:
:
DisposeNative
;
explicit
AndroidVsyncSupport
(
AndroidVsync
*
aAndroidVsync
)
:
mAndroidVsync
(
std
:
:
move
(
aAndroidVsync
)
"
AndroidVsyncSupport
:
:
mAndroidVsync
"
)
{
}
void
NotifyVsync
(
const
java
:
:
AndroidVsync
:
:
LocalRef
&
aInstance
int64_t
aFrameTimeNanos
)
{
auto
androidVsync
=
mAndroidVsync
.
Lock
(
)
;
if
(
*
androidVsync
)
{
(
*
androidVsync
)
-
>
NotifyVsync
(
aFrameTimeNanos
)
;
}
}
void
Unlink
(
)
{
auto
androidVsync
=
mAndroidVsync
.
Lock
(
)
;
*
androidVsync
=
nullptr
;
}
protected
:
~
AndroidVsyncSupport
(
)
=
default
;
DataMutex
<
AndroidVsync
*
>
mAndroidVsync
;
}
;
AndroidVsync
:
:
AndroidVsync
(
)
:
mImpl
(
"
AndroidVsync
.
mImpl
"
)
{
AndroidVsyncSupport
:
:
Init
(
)
;
auto
impl
=
mImpl
.
Lock
(
)
;
impl
-
>
mSupport
=
new
AndroidVsyncSupport
(
this
)
;
impl
-
>
mSupportJava
=
java
:
:
AndroidVsync
:
:
New
(
)
;
AndroidVsyncSupport
:
:
AttachNative
(
impl
-
>
mSupportJava
impl
-
>
mSupport
)
;
}
AndroidVsync
:
:
~
AndroidVsync
(
)
{
auto
impl
=
mImpl
.
Lock
(
)
;
impl
-
>
mInputObservers
.
Clear
(
)
;
impl
-
>
mRenderObservers
.
Clear
(
)
;
impl
-
>
UpdateObservingVsync
(
)
;
impl
-
>
mSupport
-
>
Unlink
(
)
;
}
void
AndroidVsync
:
:
RegisterObserver
(
Observer
*
aObserver
ObserverType
aType
)
{
auto
impl
=
mImpl
.
Lock
(
)
;
if
(
aType
=
=
AndroidVsync
:
:
INPUT
)
{
impl
-
>
mInputObservers
.
AppendElement
(
aObserver
)
;
}
else
{
impl
-
>
mRenderObservers
.
AppendElement
(
aObserver
)
;
}
impl
-
>
UpdateObservingVsync
(
)
;
}
void
AndroidVsync
:
:
UnregisterObserver
(
Observer
*
aObserver
ObserverType
aType
)
{
auto
impl
=
mImpl
.
Lock
(
)
;
if
(
aType
=
=
AndroidVsync
:
:
INPUT
)
{
impl
-
>
mInputObservers
.
RemoveElement
(
aObserver
)
;
}
else
{
impl
-
>
mRenderObservers
.
RemoveElement
(
aObserver
)
;
}
aObserver
-
>
Dispose
(
)
;
impl
-
>
UpdateObservingVsync
(
)
;
}
void
AndroidVsync
:
:
Impl
:
:
UpdateObservingVsync
(
)
{
bool
shouldObserve
=
!
mInputObservers
.
IsEmpty
(
)
|
|
!
mRenderObservers
.
IsEmpty
(
)
;
if
(
shouldObserve
!
=
mObservingVsync
)
{
mObservingVsync
=
mSupportJava
-
>
ObserveVsync
(
shouldObserve
)
;
}
}
void
AndroidVsync
:
:
NotifyVsync
(
int64_t
aFrameTimeNanos
)
{
TimeStamp
timeStamp
=
TimeStamp
:
:
FromSystemTime
(
aFrameTimeNanos
)
;
nsTArray
<
Observer
*
>
observers
;
{
auto
impl
=
mImpl
.
Lock
(
)
;
observers
.
AppendElements
(
impl
-
>
mInputObservers
)
;
observers
.
AppendElements
(
impl
-
>
mRenderObservers
)
;
}
for
(
Observer
*
observer
:
observers
)
{
observer
-
>
OnVsync
(
timeStamp
)
;
}
}
void
AndroidVsync
:
:
OnMaybeUpdateRefreshRate
(
)
{
nsTArray
<
Observer
*
>
observers
;
{
auto
impl
=
mImpl
.
Lock
(
)
;
observers
.
AppendElements
(
impl
-
>
mInputObservers
)
;
observers
.
AppendElements
(
impl
-
>
mRenderObservers
)
;
}
for
(
Observer
*
observer
:
observers
)
{
observer
-
>
OnMaybeUpdateRefreshRate
(
)
;
}
}
}
}
