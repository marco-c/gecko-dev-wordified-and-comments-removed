#
ifndef
GeckoProcessManager_h
#
define
GeckoProcessManager_h
#
include
"
GeneratedJNINatives
.
h
"
#
include
"
WidgetUtils
.
h
"
#
include
"
nsAppShell
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
ContentProcessManager
.
h
"
namespace
mozilla
{
class
GeckoProcessManager
final
:
public
java
:
:
GeckoProcessManager
:
:
Natives
<
GeckoProcessManager
>
{
GeckoProcessManager
(
)
=
delete
;
static
already_AddRefed
<
nsIWidget
>
GetWidget
(
int64_t
aContentId
int64_t
aTabId
)
{
using
namespace
dom
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
ContentProcessManager
*
const
cpm
=
ContentProcessManager
:
:
GetSingleton
(
)
;
NS_ENSURE_TRUE
(
cpm
nullptr
)
;
RefPtr
<
BrowserParent
>
tab
=
cpm
-
>
GetTopLevelBrowserParentByProcessAndTabId
(
ContentParentId
(
aContentId
)
TabId
(
aTabId
)
)
;
NS_ENSURE_TRUE
(
tab
nullptr
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWin
=
tab
-
>
GetParentWindowOuter
(
)
;
NS_ENSURE_TRUE
(
domWin
nullptr
)
;
return
widget
:
:
WidgetUtils
:
:
DOMWindowToWidget
(
domWin
)
;
}
public
:
static
void
GetEditableParent
(
jni
:
:
Object
:
:
Param
aEditableChild
int64_t
aContentId
int64_t
aTabId
)
{
nsCOMPtr
<
nsIWidget
>
widget
=
GetWidget
(
aContentId
aTabId
)
;
if
(
RefPtr
<
nsWindow
>
window
=
nsWindow
:
:
From
(
widget
)
)
{
java
:
:
GeckoProcessManager
:
:
SetEditableChildParent
(
aEditableChild
window
-
>
GetEditableParent
(
)
)
;
}
}
}
;
}
#
endif
