#
include
"
Natives
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
:
:
jni
{
namespace
details
{
template
<
typename
NativeImpl
>
class
NativeWeakPtrDetachRunnable
final
:
public
Runnable
{
public
:
NativeWeakPtrDetachRunnable
(
already_AddRefed
<
detail
:
:
NativeWeakPtrControlBlock
<
NativeImpl
>
>
aCtlBlock
const
Object
:
:
LocalRef
&
aOwner
typename
NativeWeakPtrControlBlockStorageTraits
<
NativeImpl
>
:
:
Type
aNativeImpl
)
:
Runnable
(
"
mozilla
:
:
jni
:
:
detail
:
:
NativeWeakPtrDetachRunnable
"
)
mCtlBlock
(
aCtlBlock
)
mOwner
(
aOwner
)
mNativeImpl
(
std
:
:
move
(
aNativeImpl
)
)
mHasRun
(
false
)
{
MOZ_RELEASE_ASSERT
(
!
!
mCtlBlock
)
;
MOZ_RELEASE_ASSERT
(
!
!
mNativeImpl
)
;
}
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
NativeWeakPtrDetachRunnable
Runnable
)
NS_IMETHOD
Run
(
)
override
{
mHasRun
=
true
;
if
(
!
NS_IsMainThread
(
)
)
{
NS_DispatchToMainThread
(
this
)
;
return
NS_OK
;
}
auto
owner
=
ToLocalRef
(
mOwner
)
;
auto
attachedNativeImpl
=
NativePtrTraits
<
NativeImpl
>
:
:
Get
(
owner
)
;
MOZ_RELEASE_ASSERT
(
!
!
attachedNativeImpl
)
;
if
(
attachedNativeImpl
-
>
IsSame
(
mCtlBlock
)
)
{
NativePtrTraits
<
NativeImpl
>
:
:
ClearFinish
(
owner
)
;
}
mNativeImpl
=
nullptr
;
mHolder
.
Resolve
(
true
__func__
)
;
return
NS_OK
;
}
RefPtr
<
DetachPromise
>
GetPromise
(
)
{
return
mHolder
.
Ensure
(
__func__
)
;
}
private
:
~
NativeWeakPtrDetachRunnable
(
)
{
MOZ_RELEASE_ASSERT
(
mHasRun
"
You
must
run
/
dispatch
this
runnable
!
"
)
;
}
private
:
RefPtr
<
detail
:
:
NativeWeakPtrControlBlock
<
NativeImpl
>
>
mCtlBlock
;
Object
:
:
GlobalRef
mOwner
;
MozPromiseHolder
<
DetachPromise
>
mHolder
;
typename
NativeWeakPtrControlBlockStorageTraits
<
NativeImpl
>
:
:
Type
mNativeImpl
;
bool
mHasRun
;
}
;
}
template
<
typename
NativeImpl
>
RefPtr
<
DetachPromise
>
NativeWeakPtr
<
NativeImpl
>
:
:
Detach
(
)
{
if
(
!
IsAttached
(
)
)
{
return
DetachPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
auto
native
=
mCtlBlock
-
>
Clear
(
)
;
if
(
!
native
)
{
return
DetachPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
Object
:
:
LocalRef
owner
(
mCtlBlock
-
>
GetJavaOwner
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
!
owner
)
;
NativeImpl
*
rawImpl
=
detail
:
:
NativeWeakPtrControlBlock
<
NativeImpl
>
:
:
StorageTraits
:
:
AsRaw
(
native
)
;
RefPtr
<
details
:
:
NativeWeakPtrDetachRunnable
<
NativeImpl
>
>
runnable
=
new
details
:
:
NativeWeakPtrDetachRunnable
<
NativeImpl
>
(
mCtlBlock
.
forget
(
)
owner
std
:
:
move
(
native
)
)
;
RefPtr
<
DetachPromise
>
promise
=
runnable
-
>
GetPromise
(
)
;
rawImpl
-
>
OnWeakNonIntrusiveDetach
(
runnable
.
forget
(
)
)
;
return
promise
;
}
}
