#
ifndef
mozilla_jni_TypeAdapter_h__
#
define
mozilla_jni_TypeAdapter_h__
#
include
<
jni
.
h
>
#
include
"
mozilla
/
jni
/
Refs
.
h
"
namespace
mozilla
{
namespace
jni
{
namespace
detail
{
template
<
typename
T
>
struct
TypeAdapter
;
#
define
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
NativeType
JNIType
JNIName
)
\
\
template
<
>
\
struct
TypeAdapter
<
NativeType
>
{
\
using
JNI
#
#
Type
=
JNIType
;
\
\
static
constexpr
auto
Call
=
&
JNIEnv
:
:
Call
#
#
JNIName
#
#
MethodA
;
\
static
constexpr
auto
StaticCall
=
&
JNIEnv
:
:
CallStatic
#
#
JNIName
#
#
MethodA
;
\
static
constexpr
auto
Get
=
&
JNIEnv
:
:
Get
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
StaticGet
=
&
JNIEnv
:
:
GetStatic
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
Set
=
&
JNIEnv
:
:
Set
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
StaticSet
=
&
JNIEnv
:
:
SetStatic
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
GetArray
=
&
JNIEnv
:
:
Get
#
#
JNIName
#
#
ArrayRegion
;
\
static
constexpr
auto
SetArray
=
&
JNIEnv
:
:
Set
#
#
JNIName
#
#
ArrayRegion
;
\
static
constexpr
auto
NewArray
=
&
JNIEnv
:
:
New
#
#
JNIName
#
#
Array
;
\
\
static
JNIType
FromNative
(
JNIEnv
*
NativeType
val
)
{
\
return
static_cast
<
JNIType
>
(
val
)
;
\
}
\
static
NativeType
ToNative
(
JNIEnv
*
JNIType
val
)
{
\
return
static_cast
<
NativeType
>
(
val
)
;
\
}
\
}
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
bool
jboolean
Boolean
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int8_t
jbyte
Byte
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
char16_t
jchar
Char
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int16_t
jshort
Short
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int32_t
jint
Int
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int64_t
jlong
Long
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
float
jfloat
Float
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
double
jdouble
Double
)
;
#
undef
DEFINE_PRIMITIVE_TYPE_ADAPTER
}
}
}
#
endif
