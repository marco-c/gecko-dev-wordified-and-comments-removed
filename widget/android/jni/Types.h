#
ifndef
mozilla_jni_Types_h__
#
define
mozilla_jni_Types_h__
#
include
<
jni
.
h
>
#
include
"
mozilla
/
jni
/
Refs
.
h
"
#
include
"
mozilla
/
jni
/
TypeAdapter
.
h
"
namespace
mozilla
{
namespace
jni
{
namespace
detail
{
template
<
class
Cls
>
struct
TypeAdapter
<
LocalRef
<
Cls
>
>
{
using
JNIType
=
typename
Cls
:
:
Ref
:
:
JNIType
;
static
constexpr
auto
Call
=
&
JNIEnv
:
:
CallObjectMethodA
;
static
constexpr
auto
StaticCall
=
&
JNIEnv
:
:
CallStaticObjectMethodA
;
static
constexpr
auto
Get
=
&
JNIEnv
:
:
GetObjectField
;
static
constexpr
auto
StaticGet
=
&
JNIEnv
:
:
GetStaticObjectField
;
static
LocalRef
<
Cls
>
ToNative
(
JNIEnv
*
env
jobject
instance
)
{
return
LocalRef
<
Cls
>
:
:
Adopt
(
env
JNIType
(
instance
)
)
;
}
static
JNIType
FromNative
(
JNIEnv
*
LocalRef
<
Cls
>
&
&
instance
)
{
return
instance
.
Forget
(
)
;
}
}
;
#
ifdef
__clang__
#
define
MOZ_JNICALL_ABI
JNICALL
#
else
#
define
MOZ_JNICALL_ABI
#
endif
class
CallArgs
{
static
const
jvalue
*
test
(
void
(
JNIEnv
:
:
*
)
(
jobject
jmethodID
const
jvalue
*
)
)
;
static
jvalue
*
test
(
void
(
JNIEnv
:
:
*
)
(
jobject
jmethodID
jvalue
*
)
)
;
public
:
using
JValueType
=
decltype
(
test
(
&
JNIEnv
:
:
CallVoidMethodA
)
)
;
}
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
Call
)
(
jobject
jmethodID
CallArgs
:
:
JValueType
)
MOZ_JNICALL_ABI
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
StaticCall
)
(
jclass
jmethodID
CallArgs
:
:
JValueType
)
MOZ_JNICALL_ABI
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
Get
)
(
jobject
jfieldID
)
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
StaticGet
)
(
jclass
jfieldID
)
;
template
<
class
Cls
typename
T
>
struct
TypeAdapter
<
Ref
<
Cls
T
>
>
{
using
JNIType
=
typename
Ref
<
Cls
T
>
:
:
JNIType
;
static
constexpr
auto
Set
=
&
JNIEnv
:
:
SetObjectField
;
static
constexpr
auto
StaticSet
=
&
JNIEnv
:
:
SetStaticObjectField
;
static
DependentRef
<
Cls
>
ToNative
(
JNIEnv
*
env
JNIType
instance
)
{
return
DependentRef
<
Cls
>
(
instance
)
;
}
static
JNIType
FromNative
(
JNIEnv
*
const
Ref
<
Cls
T
>
&
instance
)
{
return
instance
.
Get
(
)
;
}
}
;
template
<
class
Cls
typename
T
>
constexpr
void
(
JNIEnv
:
:
*
TypeAdapter
<
Ref
<
Cls
T
>
>
:
:
Set
)
(
jobject
jfieldID
jobject
)
;
template
<
class
Cls
typename
T
>
constexpr
void
(
JNIEnv
:
:
*
TypeAdapter
<
Ref
<
Cls
T
>
>
:
:
StaticSet
)
(
jclass
jfieldID
jobject
)
;
template
<
>
struct
TypeAdapter
<
StringParam
>
:
public
TypeAdapter
<
String
:
:
Ref
>
{
}
;
template
<
class
Cls
>
struct
TypeAdapter
<
const
Cls
&
>
:
public
TypeAdapter
<
Cls
>
{
}
;
}
using
namespace
detail
;
}
}
#
endif
