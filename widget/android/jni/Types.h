#
ifndef
mozilla_jni_Types_h__
#
define
mozilla_jni_Types_h__
#
include
<
android
/
ndk
-
version
.
h
>
#
include
<
jni
.
h
>
#
include
"
mozilla
/
jni
/
Refs
.
h
"
namespace
mozilla
{
namespace
jni
{
namespace
detail
{
template
<
typename
T
>
struct
TypeAdapter
;
template
<
class
Cls
>
struct
TypeAdapter
<
LocalRef
<
Cls
>
>
{
using
JNIType
=
typename
Cls
:
:
Ref
:
:
JNIType
;
static
constexpr
auto
Call
=
&
JNIEnv
:
:
CallObjectMethodA
;
static
constexpr
auto
StaticCall
=
&
JNIEnv
:
:
CallStaticObjectMethodA
;
static
constexpr
auto
Get
=
&
JNIEnv
:
:
GetObjectField
;
static
constexpr
auto
StaticGet
=
&
JNIEnv
:
:
GetStaticObjectField
;
static
LocalRef
<
Cls
>
ToNative
(
JNIEnv
*
env
jobject
instance
)
{
return
LocalRef
<
Cls
>
:
:
Adopt
(
env
JNIType
(
instance
)
)
;
}
static
JNIType
FromNative
(
JNIEnv
*
LocalRef
<
Cls
>
&
&
instance
)
{
return
instance
.
Forget
(
)
;
}
}
;
#
ifdef
__clang__
#
define
MOZ_JNICALL_ABI
JNICALL
#
else
#
define
MOZ_JNICALL_ABI
#
endif
#
if
__NDK_MAJOR__
>
=
18
#
define
JVALUE_PTR
const
jvalue
*
#
else
#
define
JVALUE_PTR
jvalue
*
#
endif
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
Call
)
(
jobject
jmethodID
JVALUE_PTR
)
MOZ_JNICALL_ABI
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
StaticCall
)
(
jclass
jmethodID
JVALUE_PTR
)
MOZ_JNICALL_ABI
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
Get
)
(
jobject
jfieldID
)
;
template
<
class
Cls
>
constexpr
jobject
(
JNIEnv
:
:
*
TypeAdapter
<
LocalRef
<
Cls
>
>
:
:
StaticGet
)
(
jclass
jfieldID
)
;
template
<
class
Cls
typename
T
>
struct
TypeAdapter
<
Ref
<
Cls
T
>
>
{
using
JNIType
=
typename
Ref
<
Cls
T
>
:
:
JNIType
;
static
constexpr
auto
Set
=
&
JNIEnv
:
:
SetObjectField
;
static
constexpr
auto
StaticSet
=
&
JNIEnv
:
:
SetStaticObjectField
;
static
DependentRef
<
Cls
>
ToNative
(
JNIEnv
*
env
JNIType
instance
)
{
return
DependentRef
<
Cls
>
(
instance
)
;
}
static
JNIType
FromNative
(
JNIEnv
*
const
Ref
<
Cls
T
>
&
instance
)
{
return
instance
.
Get
(
)
;
}
}
;
template
<
class
Cls
typename
T
>
constexpr
void
(
JNIEnv
:
:
*
TypeAdapter
<
Ref
<
Cls
T
>
>
:
:
Set
)
(
jobject
jfieldID
jobject
)
;
template
<
class
Cls
typename
T
>
constexpr
void
(
JNIEnv
:
:
*
TypeAdapter
<
Ref
<
Cls
T
>
>
:
:
StaticSet
)
(
jclass
jfieldID
jobject
)
;
template
<
>
struct
TypeAdapter
<
StringParam
>
:
public
TypeAdapter
<
String
:
:
Ref
>
{
}
;
template
<
class
Cls
>
struct
TypeAdapter
<
const
Cls
&
>
:
public
TypeAdapter
<
Cls
>
{
}
;
#
define
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
NativeType
JNIType
JNIName
)
\
\
template
<
>
struct
TypeAdapter
<
NativeType
>
{
\
using
JNI
#
#
Type
=
JNIType
;
\
\
static
constexpr
auto
Call
=
&
JNIEnv
:
:
Call
#
#
JNIName
#
#
MethodA
;
\
static
constexpr
auto
StaticCall
=
&
JNIEnv
:
:
CallStatic
#
#
JNIName
#
#
MethodA
;
\
static
constexpr
auto
Get
=
&
JNIEnv
:
:
Get
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
StaticGet
=
&
JNIEnv
:
:
GetStatic
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
Set
=
&
JNIEnv
:
:
Set
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
StaticSet
=
&
JNIEnv
:
:
SetStatic
#
#
JNIName
#
#
Field
;
\
static
constexpr
auto
GetArray
=
&
JNIEnv
:
:
Get
#
#
JNIName
#
#
ArrayRegion
;
\
static
constexpr
auto
SetArray
=
&
JNIEnv
:
:
Set
#
#
JNIName
#
#
ArrayRegion
;
\
static
constexpr
auto
NewArray
=
&
JNIEnv
:
:
New
#
#
JNIName
#
#
Array
;
\
\
static
JNIType
FromNative
(
JNIEnv
*
NativeType
val
)
{
\
return
static_cast
<
JNIType
>
(
val
)
;
\
}
\
static
NativeType
ToNative
(
JNIEnv
*
JNIType
val
)
{
\
return
static_cast
<
NativeType
>
(
val
)
;
\
}
\
}
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
bool
jboolean
Boolean
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int8_t
jbyte
Byte
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
char16_t
jchar
Char
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int16_t
jshort
Short
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int32_t
jint
Int
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
int64_t
jlong
Long
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
float
jfloat
Float
)
;
DEFINE_PRIMITIVE_TYPE_ADAPTER
(
double
jdouble
Double
)
;
#
undef
DEFINE_PRIMITIVE_TYPE_ADAPTER
}
using
namespace
detail
;
}
}
#
endif
