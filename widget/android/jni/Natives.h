#
ifndef
mozilla_jni_Natives_h__
#
define
mozilla_jni_Natives_h__
#
include
<
jni
.
h
>
#
include
"
mozilla
/
IndexSequence
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
mozilla
/
jni
/
Accessors
.
h
"
#
include
"
mozilla
/
jni
/
Refs
.
h
"
#
include
"
mozilla
/
jni
/
Types
.
h
"
#
include
"
mozilla
/
jni
/
Utils
.
h
"
namespace
mozilla
{
namespace
jni
{
namespace
{
uintptr_t
CheckNativeHandle
(
JNIEnv
*
env
uintptr_t
handle
)
{
if
(
!
handle
)
{
if
(
!
env
-
>
ExceptionCheck
(
)
)
{
ThrowException
(
env
"
java
/
lang
/
NullPointerException
"
"
Null
native
pointer
"
)
;
}
return
0
;
}
return
handle
;
}
template
<
class
Impl
bool
UseWeakPtr
=
mozilla
:
:
IsBaseOf
<
SupportsWeakPtr
<
Impl
>
Impl
>
:
:
value
>
struct
NativePtr
{
static
Impl
*
Get
(
JNIEnv
*
env
jobject
instance
)
{
return
reinterpret_cast
<
Impl
*
>
(
CheckNativeHandle
(
env
GetNativeHandle
(
env
instance
)
)
)
;
}
template
<
class
LocalRef
>
static
Impl
*
Get
(
const
LocalRef
&
instance
)
{
return
Get
(
instance
.
Env
(
)
instance
.
Get
(
)
)
;
}
template
<
class
LocalRef
>
static
void
Set
(
const
LocalRef
&
instance
UniquePtr
<
Impl
>
&
&
ptr
)
{
Clear
(
instance
)
;
SetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
reinterpret_cast
<
uintptr_t
>
(
ptr
.
release
(
)
)
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
}
template
<
class
LocalRef
>
static
void
Clear
(
const
LocalRef
&
instance
)
{
UniquePtr
<
Impl
>
ptr
(
reinterpret_cast
<
Impl
*
>
(
GetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
)
)
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
if
(
ptr
)
{
SetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
0
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
}
}
}
;
template
<
class
Impl
>
struct
NativePtr
<
Impl
true
>
{
static
Impl
*
Get
(
JNIEnv
*
env
jobject
instance
)
{
const
auto
ptr
=
reinterpret_cast
<
WeakPtr
<
Impl
>
*
>
(
CheckNativeHandle
(
env
GetNativeHandle
(
env
instance
)
)
)
;
if
(
!
ptr
)
{
return
nullptr
;
}
Impl
*
const
impl
=
*
ptr
;
if
(
!
impl
)
{
ThrowException
(
env
"
java
/
lang
/
NullPointerException
"
"
Native
object
already
released
"
)
;
}
return
impl
;
}
template
<
class
LocalRef
>
static
Impl
*
Get
(
const
LocalRef
&
instance
)
{
return
Get
(
instance
.
Env
(
)
instance
.
Get
(
)
)
;
}
template
<
class
LocalRef
>
static
void
Set
(
const
LocalRef
&
instance
Impl
*
ptr
)
{
Clear
(
instance
)
;
SetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
reinterpret_cast
<
uintptr_t
>
(
new
WeakPtr
<
Impl
>
(
ptr
)
)
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
}
template
<
class
LocalRef
>
static
void
Clear
(
const
LocalRef
&
instance
)
{
const
auto
ptr
=
reinterpret_cast
<
WeakPtr
<
Impl
>
*
>
(
GetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
)
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
if
(
ptr
)
{
SetNativeHandle
(
instance
.
Env
(
)
instance
.
Get
(
)
0
)
;
HandleUncaughtException
(
instance
.
Env
(
)
)
;
delete
ptr
;
}
}
}
;
}
struct
UsesNativeCallProxy
{
template
<
class
Functor
>
static
void
OnNativeCall
(
Functor
&
&
call
)
{
call
(
)
;
}
}
;
namespace
{
template
<
typename
T
>
struct
ProxyArg
{
static_assert
(
mozilla
:
:
IsPod
<
T
>
:
:
value
"
T
must
be
primitive
type
"
)
;
typedef
T
Type
;
typedef
typename
TypeAdapter
<
T
>
:
:
JNIType
JNIType
;
static
void
Clear
(
JNIEnv
*
env
Type
&
)
{
}
static
Type
From
(
JNIEnv
*
env
JNIType
val
)
{
return
TypeAdapter
<
T
>
:
:
ToNative
(
env
val
)
;
}
}
;
template
<
class
T
>
struct
ProxyArg
<
Ref
<
T
>
>
{
typedef
typename
T
:
:
GlobalRef
Type
;
typedef
typename
TypeAdapter
<
Ref
<
T
>
>
:
:
JNIType
JNIType
;
static
void
Clear
(
JNIEnv
*
env
Type
&
ref
)
{
ref
.
Clear
(
env
)
;
}
static
Type
From
(
JNIEnv
*
env
JNIType
val
)
{
return
Type
(
env
T
:
:
Ref
:
:
From
(
val
)
)
;
}
}
;
template
<
typename
T
>
struct
ProxyArg
<
const
T
&
>
:
ProxyArg
<
T
>
{
}
;
template
<
>
struct
ProxyArg
<
Param
<
String
>
>
:
ProxyArg
<
Ref
<
String
>
>
{
}
;
template
<
class
T
>
struct
ProxyArg
<
LocalRef
<
T
>
>
:
ProxyArg
<
Ref
<
T
>
>
{
}
;
template
<
class
Impl
class
Owner
bool
IsStatic
bool
HasThisArg
typename
.
.
.
Args
>
class
ProxyNativeCall
{
template
<
class
T
class
I
class
A
bool
S
bool
V
>
friend
class
NativeStubImpl
;
typedef
typename
mozilla
:
:
Conditional
<
IsStatic
ClassObject
Owner
>
:
:
Type
ThisArgClass
;
typedef
typename
mozilla
:
:
Conditional
<
IsStatic
jclass
jobject
>
:
:
Type
ThisArgJNIType
;
typedef
typename
mozilla
:
:
Conditional
<
IsStatic
typename
mozilla
:
:
Conditional
<
HasThisArg
void
(
*
)
(
const
ClassObject
:
:
LocalRef
&
Args
.
.
.
)
void
(
*
)
(
Args
.
.
.
)
>
:
:
Type
typename
mozilla
:
:
Conditional
<
HasThisArg
void
(
Impl
:
:
*
)
(
const
typename
Owner
:
:
LocalRef
&
Args
.
.
.
)
void
(
Impl
:
:
*
)
(
Args
.
.
.
)
>
:
:
Type
>
:
:
Type
NativeCallType
;
const
NativeCallType
mNativeCall
;
typename
ThisArgClass
:
:
GlobalRef
mThisArg
;
mozilla
:
:
Tuple
<
typename
ProxyArg
<
Args
>
:
:
Type
.
.
.
>
mArgs
;
ProxyNativeCall
(
NativeCallType
nativeCall
JNIEnv
*
env
ThisArgJNIType
thisArg
typename
ProxyArg
<
Args
>
:
:
JNIType
.
.
.
args
)
:
mNativeCall
(
nativeCall
)
mThisArg
(
env
ThisArgClass
:
:
Ref
:
:
From
(
thisArg
)
)
mArgs
(
ProxyArg
<
Args
>
:
:
From
(
env
args
)
.
.
.
)
{
}
template
<
bool
Static
bool
ThisArg
size_t
.
.
.
Indices
>
typename
mozilla
:
:
EnableIf
<
Static
&
&
ThisArg
void
>
:
:
Type
Call
(
const
ClassObject
:
:
LocalRef
&
cls
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
(
*
mNativeCall
)
(
cls
mozilla
:
:
Get
<
Indices
>
(
mArgs
)
.
.
.
)
;
}
template
<
bool
Static
bool
ThisArg
size_t
.
.
.
Indices
>
typename
mozilla
:
:
EnableIf
<
Static
&
&
!
ThisArg
void
>
:
:
Type
Call
(
const
ClassObject
:
:
LocalRef
&
cls
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
(
*
mNativeCall
)
(
mozilla
:
:
Get
<
Indices
>
(
mArgs
)
.
.
.
)
;
}
template
<
bool
Static
bool
ThisArg
size_t
.
.
.
Indices
>
typename
mozilla
:
:
EnableIf
<
!
Static
&
&
ThisArg
void
>
:
:
Type
Call
(
const
typename
Owner
:
:
LocalRef
&
inst
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
inst
)
;
HandleUncaughtException
(
inst
.
Env
(
)
)
;
(
impl
-
>
*
mNativeCall
)
(
inst
mozilla
:
:
Get
<
Indices
>
(
mArgs
)
.
.
.
)
;
}
template
<
bool
Static
bool
ThisArg
size_t
.
.
.
Indices
>
typename
mozilla
:
:
EnableIf
<
!
Static
&
&
!
ThisArg
void
>
:
:
Type
Call
(
const
typename
Owner
:
:
LocalRef
&
inst
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
inst
)
;
HandleUncaughtException
(
inst
.
Env
(
)
)
;
(
impl
-
>
*
mNativeCall
)
(
mozilla
:
:
Get
<
Indices
>
(
mArgs
)
.
.
.
)
;
}
template
<
size_t
.
.
.
Indices
>
void
Clear
(
JNIEnv
*
env
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
int
dummy
[
]
=
{
(
ProxyArg
<
Args
>
:
:
Clear
(
env
Get
<
Indices
>
(
mArgs
)
)
0
)
.
.
.
}
;
mozilla
:
:
Unused
<
<
dummy
;
}
public
:
static
const
bool
isStatic
=
IsStatic
;
ProxyNativeCall
(
ProxyNativeCall
&
&
)
=
default
;
ProxyNativeCall
(
const
ProxyNativeCall
&
)
=
default
;
typename
ThisArgClass
:
:
Param
GetThisArg
(
)
const
{
return
mThisArg
;
}
bool
IsTarget
(
NativeCallType
call
)
const
{
return
call
=
=
mNativeCall
;
}
template
<
typename
T
>
bool
IsTarget
(
T
&
&
)
const
{
return
false
;
}
void
operator
(
)
(
)
{
JNIEnv
*
const
env
=
GetEnvForThread
(
)
;
typename
ThisArgClass
:
:
LocalRef
thisArg
(
env
mThisArg
)
;
Call
<
IsStatic
HasThisArg
>
(
thisArg
typename
IndexSequenceFor
<
Args
.
.
.
>
:
:
Type
(
)
)
;
Clear
(
env
typename
IndexSequenceFor
<
Args
.
.
.
>
:
:
Type
(
)
)
;
}
}
;
template
<
class
Impl
class
O
bool
S
bool
V
typename
.
.
.
A
>
typename
mozilla
:
:
EnableIf
<
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
void
>
:
:
Type
Dispatch
(
ProxyNativeCall
<
Impl
O
S
V
A
.
.
.
>
&
&
call
)
{
Impl
:
:
OnNativeCall
(
mozilla
:
:
Move
(
call
)
)
;
}
template
<
typename
T
>
void
Dispatch
(
const
T
&
)
{
}
}
template
<
class
Cls
class
Impl
>
class
NativeImpl
;
namespace
detail
{
template
<
class
Traits
class
Impl
class
Args
bool
IsStatic
bool
IsVoid
>
class
NativeStubImpl
;
#
ifdef
__i386__
#
define
MOZ_JNICALL
JNICALL
__attribute__
(
(
force_align_arg_pointer
)
)
#
else
#
define
MOZ_JNICALL
JNICALL
#
endif
template
<
class
Traits
class
Impl
typename
.
.
.
Args
>
class
NativeStubImpl
<
Traits
Impl
jni
:
:
Args
<
Args
.
.
.
>
false
false
>
{
typedef
typename
Traits
:
:
Owner
Owner
;
typedef
typename
Traits
:
:
ReturnType
ReturnType
;
typedef
typename
TypeAdapter
<
ReturnType
>
:
:
JNIType
ReturnJNIType
;
public
:
template
<
ReturnType
(
Impl
:
:
*
Method
)
(
Args
.
.
.
)
>
static
MOZ_JNICALL
ReturnJNIType
Wrap
(
JNIEnv
*
env
jobject
instance
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
static_assert
(
!
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
"
Native
call
proxy
only
supports
void
return
type
"
)
;
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
env
instance
)
;
if
(
!
impl
)
{
return
ReturnJNIType
(
)
;
}
return
TypeAdapter
<
ReturnType
>
:
:
FromNative
(
env
(
impl
-
>
*
Method
)
(
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
)
;
}
template
<
ReturnType
(
Impl
:
:
*
Method
)
(
const
typename
Owner
:
:
LocalRef
&
Args
.
.
.
)
>
static
MOZ_JNICALL
ReturnJNIType
Wrap
(
JNIEnv
*
env
jobject
instance
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
static_assert
(
!
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
"
Native
call
proxy
only
supports
void
return
type
"
)
;
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
env
instance
)
;
if
(
!
impl
)
{
return
ReturnJNIType
(
)
;
}
auto
self
=
Owner
:
:
LocalRef
:
:
Adopt
(
env
instance
)
;
const
auto
res
=
TypeAdapter
<
ReturnType
>
:
:
FromNative
(
env
(
impl
-
>
*
Method
)
(
self
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
)
;
self
.
Forget
(
)
;
return
res
;
}
}
;
template
<
class
Traits
class
Impl
typename
.
.
.
Args
>
class
NativeStubImpl
<
Traits
Impl
jni
:
:
Args
<
Args
.
.
.
>
false
true
>
{
typedef
typename
Traits
:
:
Owner
Owner
;
public
:
template
<
void
(
Impl
:
:
*
Method
)
(
Args
.
.
.
)
>
static
MOZ_JNICALL
void
Wrap
(
JNIEnv
*
env
jobject
instance
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
if
(
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
)
{
Dispatch
(
ProxyNativeCall
<
Impl
Owner
false
false
Args
.
.
.
>
(
Method
env
instance
args
.
.
.
)
)
;
return
;
}
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
env
instance
)
;
if
(
!
impl
)
{
return
;
}
(
impl
-
>
*
Method
)
(
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
;
}
template
<
void
(
Impl
:
:
*
Method
)
(
const
typename
Owner
:
:
LocalRef
&
Args
.
.
.
)
>
static
MOZ_JNICALL
void
Wrap
(
JNIEnv
*
env
jobject
instance
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
if
(
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
)
{
Dispatch
(
ProxyNativeCall
<
Impl
Owner
false
true
Args
.
.
.
>
(
Method
env
instance
args
.
.
.
)
)
;
return
;
}
Impl
*
const
impl
=
NativePtr
<
Impl
>
:
:
Get
(
env
instance
)
;
if
(
!
impl
)
{
return
;
}
auto
self
=
Owner
:
:
LocalRef
:
:
Adopt
(
env
instance
)
;
(
impl
-
>
*
Method
)
(
self
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
;
self
.
Forget
(
)
;
}
template
<
void
(
*
DisposeNative
)
(
const
typename
Owner
:
:
LocalRef
&
)
>
static
MOZ_JNICALL
void
Wrap
(
JNIEnv
*
env
jobject
instance
)
{
if
(
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
)
{
auto
cls
=
ClassObject
:
:
LocalRef
:
:
Adopt
(
env
env
-
>
GetObjectClass
(
instance
)
)
;
Dispatch
(
ProxyNativeCall
<
Impl
Owner
true
false
const
typename
Owner
:
:
LocalRef
&
>
(
DisposeNative
env
cls
.
Get
(
)
instance
)
)
;
return
;
}
auto
self
=
Owner
:
:
LocalRef
:
:
Adopt
(
env
instance
)
;
(
Impl
:
:
DisposeNative
)
(
self
)
;
self
.
Forget
(
)
;
}
}
;
template
<
class
Traits
class
Impl
typename
.
.
.
Args
>
class
NativeStubImpl
<
Traits
Impl
jni
:
:
Args
<
Args
.
.
.
>
true
false
>
{
typedef
typename
Traits
:
:
ReturnType
ReturnType
;
typedef
typename
TypeAdapter
<
ReturnType
>
:
:
JNIType
ReturnJNIType
;
public
:
template
<
ReturnType
(
*
Method
)
(
Args
.
.
.
)
>
static
MOZ_JNICALL
ReturnJNIType
Wrap
(
JNIEnv
*
env
jclass
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
static_assert
(
!
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
"
Native
call
proxy
only
supports
void
return
type
"
)
;
return
TypeAdapter
<
ReturnType
>
:
:
FromNative
(
env
(
*
Method
)
(
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
)
;
}
template
<
ReturnType
(
*
Method
)
(
const
ClassObject
:
:
LocalRef
&
Args
.
.
.
)
>
static
MOZ_JNICALL
ReturnJNIType
Wrap
(
JNIEnv
*
env
jclass
cls
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
static_assert
(
!
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
"
Native
call
proxy
only
supports
void
return
type
"
)
;
auto
clazz
=
ClassObject
:
:
LocalRef
:
:
Adopt
(
env
cls
)
;
const
auto
res
=
TypeAdapter
<
ReturnType
>
:
:
FromNative
(
env
(
*
Method
)
(
clazz
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
)
;
clazz
.
Forget
(
)
;
return
res
;
}
}
;
template
<
class
Traits
class
Impl
typename
.
.
.
Args
>
class
NativeStubImpl
<
Traits
Impl
jni
:
:
Args
<
Args
.
.
.
>
true
true
>
{
typedef
typename
Traits
:
:
Owner
Owner
;
public
:
template
<
void
(
*
Method
)
(
Args
.
.
.
)
>
static
MOZ_JNICALL
void
Wrap
(
JNIEnv
*
env
jclass
cls
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
if
(
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
)
{
Dispatch
(
ProxyNativeCall
<
Impl
Owner
true
false
Args
.
.
.
>
(
Method
env
cls
args
.
.
.
)
)
;
return
;
}
(
*
Method
)
(
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
;
}
template
<
void
(
*
Method
)
(
const
ClassObject
:
:
LocalRef
&
Args
.
.
.
)
>
static
MOZ_JNICALL
void
Wrap
(
JNIEnv
*
env
jclass
cls
typename
TypeAdapter
<
Args
>
:
:
JNIType
.
.
.
args
)
{
if
(
mozilla
:
:
IsBaseOf
<
UsesNativeCallProxy
Impl
>
:
:
value
)
{
Dispatch
(
ProxyNativeCall
<
Impl
Owner
true
true
Args
.
.
.
>
(
Method
env
cls
args
.
.
.
)
)
;
return
;
}
auto
clazz
=
ClassObject
:
:
LocalRef
:
:
Adopt
(
env
cls
)
;
(
*
Method
)
(
clazz
TypeAdapter
<
Args
>
:
:
ToNative
(
env
args
)
.
.
.
)
;
clazz
.
Forget
(
)
;
}
}
;
}
template
<
class
Traits
class
Impl
>
struct
NativeStub
:
detail
:
:
NativeStubImpl
<
Traits
Impl
typename
Traits
:
:
Args
Traits
:
:
isStatic
mozilla
:
:
IsVoid
<
typename
Traits
:
:
ReturnType
>
:
:
value
>
{
}
;
template
<
class
Traits
typename
Ret
typename
.
.
.
Args
>
constexpr
JNINativeMethod
MakeNativeMethod
(
Ret
(
*
stub
)
(
JNIEnv
*
Args
.
.
.
)
)
{
return
{
Traits
:
:
name
Traits
:
:
signature
reinterpret_cast
<
void
*
>
(
stub
)
}
;
}
template
<
class
Cls
class
Impl
>
class
NativeImpl
{
typedef
typename
Cls
:
:
template
Natives
<
Impl
>
Natives
;
static
bool
sInited
;
public
:
static
void
Init
(
)
{
if
(
sInited
)
{
return
;
}
JNIEnv
*
const
env
=
GetEnvForThread
(
)
;
MOZ_ALWAYS_TRUE
(
!
env
-
>
RegisterNatives
(
Accessor
:
:
EnsureClassRef
<
Cls
>
(
env
)
Natives
:
:
methods
sizeof
(
Natives
:
:
methods
)
/
sizeof
(
Natives
:
:
methods
[
0
]
)
)
)
;
sInited
=
true
;
}
protected
:
static
void
AttachNative
(
const
typename
Cls
:
:
LocalRef
&
instance
SupportsWeakPtr
<
Impl
>
*
ptr
)
{
static_assert
(
mozilla
:
:
IsBaseOf
<
SupportsWeakPtr
<
Impl
>
Impl
>
:
:
value
"
Attach
with
UniquePtr
&
&
when
not
using
WeakPtr
"
)
;
return
NativePtr
<
Impl
>
:
:
Set
(
instance
static_cast
<
Impl
*
>
(
ptr
)
)
;
}
static
void
AttachNative
(
const
typename
Cls
:
:
LocalRef
&
instance
UniquePtr
<
Impl
>
&
&
ptr
)
{
static_assert
(
!
mozilla
:
:
IsBaseOf
<
SupportsWeakPtr
<
Impl
>
Impl
>
:
:
value
"
Attach
with
SupportsWeakPtr
*
when
using
WeakPtr
"
)
;
return
NativePtr
<
Impl
>
:
:
Set
(
instance
mozilla
:
:
Move
(
ptr
)
)
;
}
static
Impl
*
GetNative
(
const
typename
Cls
:
:
LocalRef
&
instance
)
{
return
NativePtr
<
Impl
>
:
:
Get
(
instance
)
;
}
static
void
DisposeNative
(
const
typename
Cls
:
:
LocalRef
&
instance
)
{
NativePtr
<
Impl
>
:
:
Clear
(
instance
)
;
}
NativeImpl
(
)
{
Init
(
)
;
}
}
;
template
<
class
C
class
I
>
bool
NativeImpl
<
C
I
>
:
:
sInited
;
}
}
#
endif
