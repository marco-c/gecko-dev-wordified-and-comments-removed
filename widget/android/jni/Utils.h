#
ifndef
mozilla_jni_Utils_h__
#
define
mozilla_jni_Utils_h__
#
include
<
jni
.
h
>
#
include
"
nsIRunnable
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
if
defined
(
DEBUG
)
|
|
!
defined
(
RELEASE_OR_BETA
)
#
define
MOZ_CHECK_JNI
#
endif
#
ifdef
MOZ_CHECK_JNI
#
include
<
pthread
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
APKOpen
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
endif
namespace
mozilla
{
namespace
jni
{
enum
class
ExceptionMode
{
ABORT
IGNORE
NSRESULT
}
;
enum
class
CallingThread
{
ANY
GECKO
UI
}
;
enum
class
DispatchTarget
{
CURRENT
PROXY
GECKO
GECKO_PRIORITY
}
;
extern
JNIEnv
*
sGeckoThreadEnv
;
inline
bool
IsAvailable
(
)
{
return
!
!
sGeckoThreadEnv
;
}
inline
JNIEnv
*
GetGeckoThreadEnv
(
)
{
#
ifdef
MOZ_CHECK_JNI
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
"
Must
be
on
Gecko
thread
"
)
;
MOZ_RELEASE_ASSERT
(
sGeckoThreadEnv
"
Must
have
a
JNIEnv
"
)
;
#
endif
return
sGeckoThreadEnv
;
}
void
SetGeckoThreadEnv
(
JNIEnv
*
aEnv
)
;
JNIEnv
*
GetEnvForThread
(
)
;
#
ifdef
MOZ_CHECK_JNI
#
define
MOZ_ASSERT_JNI_THREAD
(
thread
)
\
do
{
\
if
(
(
thread
)
=
=
mozilla
:
:
jni
:
:
CallingThread
:
:
GECKO
)
{
\
MOZ_RELEASE_ASSERT
(
:
:
NS_IsMainThread
(
)
)
;
\
}
else
if
(
(
thread
)
=
=
mozilla
:
:
jni
:
:
CallingThread
:
:
UI
)
{
\
const
bool
isOnUiThread
=
:
:
pthread_equal
(
:
:
pthread_self
(
)
\
:
:
getJavaUiThread
(
)
)
;
\
MOZ_RELEASE_ASSERT
(
isOnUiThread
)
;
\
}
\
}
while
(
0
)
#
else
#
define
MOZ_ASSERT_JNI_THREAD
(
thread
)
do
{
}
while
(
0
)
#
endif
bool
ThrowException
(
JNIEnv
*
aEnv
const
char
*
aClass
const
char
*
aMessage
)
;
inline
bool
ThrowException
(
JNIEnv
*
aEnv
const
char
*
aMessage
)
{
return
ThrowException
(
aEnv
"
java
/
lang
/
Exception
"
aMessage
)
;
}
inline
bool
ThrowException
(
const
char
*
aClass
const
char
*
aMessage
)
{
return
ThrowException
(
GetEnvForThread
(
)
aClass
aMessage
)
;
}
inline
bool
ThrowException
(
const
char
*
aMessage
)
{
return
ThrowException
(
GetEnvForThread
(
)
aMessage
)
;
}
bool
HandleUncaughtException
(
JNIEnv
*
aEnv
)
;
bool
ReportException
(
JNIEnv
*
aEnv
jthrowable
aExc
jstring
aStack
)
;
#
define
MOZ_CATCH_JNI_EXCEPTION
(
env
)
\
do
{
\
if
(
mozilla
:
:
jni
:
:
HandleUncaughtException
(
(
env
)
)
)
{
\
MOZ_CRASH
(
"
JNI
exception
"
)
;
\
}
\
}
while
(
0
)
uintptr_t
GetNativeHandle
(
JNIEnv
*
env
jobject
instance
)
;
void
SetNativeHandle
(
JNIEnv
*
env
jobject
instance
uintptr_t
handle
)
;
jclass
GetClassRef
(
JNIEnv
*
aEnv
const
char
*
aClassName
)
;
void
DispatchToGeckoPriorityQueue
(
already_AddRefed
<
nsIRunnable
>
aCall
)
;
bool
IsFennec
(
)
;
int
GetAPIVersion
(
)
;
}
}
#
endif
