#
ifndef
mozilla_widget_EventDispatcher_h
#
define
mozilla_widget_EventDispatcher_h
#
include
"
mozilla
/
java
/
EventDispatcherNatives
.
h
"
#
include
"
mozilla
/
widget
/
EventDispatcherBase
.
h
"
namespace
mozilla
:
:
widget
{
class
EventDispatcher
final
:
public
EventDispatcherBase
public
java
:
:
EventDispatcher
:
:
Natives
<
EventDispatcher
>
{
using
NativesBase
=
java
:
:
EventDispatcher
:
:
Natives
<
EventDispatcher
>
;
public
:
void
Attach
(
java
:
:
EventDispatcher
:
:
Param
aDispatcher
)
;
void
Detach
(
)
;
void
Activate
(
)
;
using
EventDispatcherBase
:
:
HasGeckoListener
;
bool
HasGeckoListener
(
jni
:
:
String
:
:
Param
aEvent
)
{
return
EventDispatcherBase
:
:
HasGeckoListener
(
aEvent
-
>
ToString
(
)
)
;
}
using
EventDispatcherBase
:
:
DispatchToGecko
;
void
DispatchToGecko
(
jni
:
:
String
:
:
Param
aEvent
jni
:
:
Object
:
:
Param
aData
jni
:
:
Object
:
:
Param
aCallback
)
;
bool
HasEmbedderListener
(
const
nsAString
&
aEvent
)
override
MOZ_REQUIRES
(
sMainThreadCapability
)
;
nsresult
DispatchToEmbedder
(
JSContext
*
aCx
const
nsAString
&
aEvent
JS
:
:
Handle
<
JS
:
:
Value
>
aData
nsIGeckoViewEventCallback
*
aCallback
)
override
MOZ_REQUIRES
(
sMainThreadCapability
)
;
static
nsresult
UnboxBundle
(
JSContext
*
aCx
jni
:
:
Object
:
:
Param
aData
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aOut
)
;
private
:
friend
class
java
:
:
EventDispatcher
:
:
Natives
<
EventDispatcher
>
;
virtual
~
EventDispatcher
(
)
=
default
;
void
Shutdown
(
)
{
mIsShutdown
=
true
;
}
;
java
:
:
EventDispatcher
:
:
LocalRef
GetDispatcher
(
)
MOZ_REQUIRES
(
sMainThreadCapability
)
{
return
mIsShutdown
?
nullptr
:
mDispatcher
;
}
std
:
:
atomic
<
bool
>
mIsShutdown
{
false
}
;
java
:
:
EventDispatcher
:
:
WeakRef
mDispatcher
MOZ_GUARDED_BY
(
sMainThreadCapability
)
;
}
;
}
#
endif
