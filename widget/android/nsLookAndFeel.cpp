#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsLookAndFeel
.
h
"
#
include
"
gfxFont
.
h
"
#
include
"
gfxFontConstants
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
ContentChild
;
bool
nsLookAndFeel
:
:
mInitializedSystemColors
=
false
;
AndroidSystemColors
nsLookAndFeel
:
:
mSystemColors
;
bool
nsLookAndFeel
:
:
mInitializedShowPassword
=
false
;
bool
nsLookAndFeel
:
:
mShowPassword
=
true
;
static
const
char16_t
UNICODE_BULLET
=
0x2022
;
nsLookAndFeel
:
:
nsLookAndFeel
(
)
:
nsXPLookAndFeel
(
)
{
}
nsLookAndFeel
:
:
~
nsLookAndFeel
(
)
{
}
#
define
BG_PRELIGHT_COLOR
NS_RGB
(
0xee
0xee
0xee
)
#
define
FG_PRELIGHT_COLOR
NS_RGB
(
0x77
0x77
0x77
)
#
define
BLACK_COLOR
NS_RGB
(
0x00
0x00
0x00
)
#
define
DARK_GRAY_COLOR
NS_RGB
(
0x40
0x40
0x40
)
#
define
GRAY_COLOR
NS_RGB
(
0x80
0x80
0x80
)
#
define
LIGHT_GRAY_COLOR
NS_RGB
(
0xa0
0xa0
0xa0
)
#
define
RED_COLOR
NS_RGB
(
0xff
0x00
0x00
)
nsresult
nsLookAndFeel
:
:
GetSystemColors
(
)
{
if
(
!
AndroidBridge
:
:
Bridge
(
)
)
return
NS_ERROR_FAILURE
;
AndroidBridge
:
:
Bridge
(
)
-
>
GetSystemColors
(
&
mSystemColors
)
;
return
NS_OK
;
}
void
nsLookAndFeel
:
:
NativeInit
(
)
{
EnsureInitSystemColors
(
)
;
EnsureInitShowPassword
(
)
;
}
void
nsLookAndFeel
:
:
RefreshImpl
(
)
{
nsXPLookAndFeel
:
:
RefreshImpl
(
)
;
mInitializedSystemColors
=
false
;
mInitializedShowPassword
=
false
;
}
nsresult
nsLookAndFeel
:
:
NativeGetColor
(
ColorID
aID
nscolor
&
aColor
)
{
nsresult
rv
=
NS_OK
;
EnsureInitSystemColors
(
)
;
if
(
!
mInitializedSystemColors
)
{
aColor
=
0
;
return
NS_ERROR_FAILURE
;
}
switch
(
aID
)
{
case
ColorID
:
:
WindowBackground
:
aColor
=
NS_RGB
(
0xFF
0xFF
0xFF
)
;
break
;
case
ColorID
:
:
WindowForeground
:
aColor
=
mSystemColors
.
textColorPrimary
;
break
;
case
ColorID
:
:
WidgetBackground
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
WidgetForeground
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
WidgetSelectBackground
:
aColor
=
mSystemColors
.
textColorHighlight
;
break
;
case
ColorID
:
:
WidgetSelectForeground
:
aColor
=
mSystemColors
.
textColorPrimaryInverse
;
break
;
case
ColorID
:
:
Widget3DHighlight
:
aColor
=
LIGHT_GRAY_COLOR
;
break
;
case
ColorID
:
:
Widget3DShadow
:
aColor
=
DARK_GRAY_COLOR
;
break
;
case
ColorID
:
:
TextBackground
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
TextForeground
:
aColor
=
mSystemColors
.
textColorPrimary
;
break
;
case
ColorID
:
:
TextSelectBackground
:
case
ColorID
:
:
IMESelectedRawTextBackground
:
case
ColorID
:
:
IMESelectedConvertedTextBackground
:
aColor
=
mSystemColors
.
textColorHighlight
;
break
;
case
ColorID
:
:
TextSelectForeground
:
case
ColorID
:
:
IMESelectedRawTextForeground
:
case
ColorID
:
:
IMESelectedConvertedTextForeground
:
aColor
=
mSystemColors
.
textColorPrimaryInverse
;
break
;
case
ColorID
:
:
IMERawInputBackground
:
case
ColorID
:
:
IMEConvertedTextBackground
:
aColor
=
NS_TRANSPARENT
;
break
;
case
ColorID
:
:
IMERawInputForeground
:
case
ColorID
:
:
IMEConvertedTextForeground
:
aColor
=
NS_SAME_AS_FOREGROUND_COLOR
;
break
;
case
ColorID
:
:
IMERawInputUnderline
:
case
ColorID
:
:
IMEConvertedTextUnderline
:
aColor
=
NS_SAME_AS_FOREGROUND_COLOR
;
break
;
case
ColorID
:
:
IMESelectedRawTextUnderline
:
case
ColorID
:
:
IMESelectedConvertedTextUnderline
:
aColor
=
NS_TRANSPARENT
;
break
;
case
ColorID
:
:
SpellCheckerUnderline
:
aColor
=
RED_COLOR
;
break
;
case
ColorID
:
:
Activeborder
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Activecaption
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Appworkspace
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Background
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Captiontext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
Graytext
:
aColor
=
mSystemColors
.
textColorTertiary
;
break
;
case
ColorID
:
:
Highlight
:
aColor
=
mSystemColors
.
textColorHighlight
;
break
;
case
ColorID
:
:
Highlighttext
:
aColor
=
mSystemColors
.
textColorPrimaryInverse
;
break
;
case
ColorID
:
:
Inactiveborder
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Inactivecaption
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Inactivecaptiontext
:
aColor
=
mSystemColors
.
textColorTertiary
;
break
;
case
ColorID
:
:
Infobackground
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Infotext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
Menu
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Menutext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
Scrollbar
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Threedface
:
case
ColorID
:
:
Buttonface
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Buttontext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
Buttonhighlight
:
case
ColorID
:
:
Threedhighlight
:
aColor
=
LIGHT_GRAY_COLOR
;
break
;
case
ColorID
:
:
Threedlightshadow
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Buttonshadow
:
case
ColorID
:
:
Threedshadow
:
aColor
=
GRAY_COLOR
;
break
;
case
ColorID
:
:
Threeddarkshadow
:
aColor
=
BLACK_COLOR
;
break
;
case
ColorID
:
:
Window
:
case
ColorID
:
:
Windowframe
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
Windowtext
:
aColor
=
mSystemColors
.
textColorPrimary
;
break
;
case
ColorID
:
:
MozEventreerow
:
case
ColorID
:
:
MozField
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
MozFieldtext
:
aColor
=
mSystemColors
.
textColorPrimary
;
break
;
case
ColorID
:
:
MozDialog
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
MozDialogtext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
MozDragtargetzone
:
aColor
=
mSystemColors
.
textColorHighlight
;
break
;
case
ColorID
:
:
MozButtondefault
:
aColor
=
BLACK_COLOR
;
break
;
case
ColorID
:
:
MozButtonhoverface
:
aColor
=
BG_PRELIGHT_COLOR
;
break
;
case
ColorID
:
:
MozButtonhovertext
:
aColor
=
FG_PRELIGHT_COLOR
;
break
;
case
ColorID
:
:
MozCellhighlight
:
case
ColorID
:
:
MozHtmlCellhighlight
:
aColor
=
mSystemColors
.
textColorHighlight
;
break
;
case
ColorID
:
:
MozCellhighlighttext
:
case
ColorID
:
:
MozHtmlCellhighlighttext
:
aColor
=
mSystemColors
.
textColorPrimaryInverse
;
break
;
case
ColorID
:
:
MozMenuhover
:
aColor
=
BG_PRELIGHT_COLOR
;
break
;
case
ColorID
:
:
MozMenuhovertext
:
aColor
=
FG_PRELIGHT_COLOR
;
break
;
case
ColorID
:
:
MozOddtreerow
:
aColor
=
NS_TRANSPARENT
;
break
;
case
ColorID
:
:
MozNativehyperlinktext
:
aColor
=
NS_SAME_AS_FOREGROUND_COLOR
;
break
;
case
ColorID
:
:
MozComboboxtext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
MozCombobox
:
aColor
=
mSystemColors
.
colorBackground
;
break
;
case
ColorID
:
:
MozMenubartext
:
aColor
=
mSystemColors
.
colorForeground
;
break
;
case
ColorID
:
:
MozMenubarhovertext
:
aColor
=
FG_PRELIGHT_COLOR
;
break
;
default
:
aColor
=
0
;
rv
=
NS_ERROR_FAILURE
;
break
;
}
return
rv
;
}
nsresult
nsLookAndFeel
:
:
GetIntImpl
(
IntID
aID
int32_t
&
aResult
)
{
nsresult
rv
=
nsXPLookAndFeel
:
:
GetIntImpl
(
aID
aResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
return
rv
;
rv
=
NS_OK
;
switch
(
aID
)
{
case
eIntID_CaretBlinkTime
:
aResult
=
500
;
break
;
case
eIntID_CaretWidth
:
aResult
=
1
;
break
;
case
eIntID_ShowCaretDuringSelection
:
aResult
=
0
;
break
;
case
eIntID_SelectTextfieldsOnKeyFocus
:
aResult
=
1
;
break
;
case
eIntID_SubmenuDelay
:
aResult
=
200
;
break
;
case
eIntID_TooltipDelay
:
aResult
=
500
;
break
;
case
eIntID_MenusCanOverlapOSBar
:
aResult
=
1
;
break
;
case
eIntID_ScrollArrowStyle
:
aResult
=
eScrollArrowStyle_Single
;
break
;
case
eIntID_ScrollSliderStyle
:
aResult
=
eScrollThumbStyle_Proportional
;
break
;
case
eIntID_TouchEnabled
:
aResult
=
1
;
break
;
case
eIntID_WindowsDefaultTheme
:
case
eIntID_WindowsThemeIdentifier
:
case
eIntID_OperatingSystemVersionIdentifier
:
aResult
=
0
;
rv
=
NS_ERROR_NOT_IMPLEMENTED
;
break
;
case
eIntID_SpellCheckerUnderlineStyle
:
aResult
=
NS_STYLE_TEXT_DECORATION_STYLE_WAVY
;
break
;
case
eIntID_ScrollbarButtonAutoRepeatBehavior
:
aResult
=
0
;
break
;
case
eIntID_ContextMenuOffsetVertical
:
case
eIntID_ContextMenuOffsetHorizontal
:
aResult
=
2
;
break
;
case
eIntID_PrefersReducedMotion
:
if
(
sIsInPrefersReducedMotionForTest
)
{
aResult
=
sPrefersReducedMotionForTest
?
1
:
0
;
break
;
}
aResult
=
java
:
:
GeckoSystemStateListener
:
:
PrefersReducedMotion
(
)
?
1
:
0
;
break
;
case
eIntID_PrimaryPointerCapabilities
:
aResult
=
java
:
:
GeckoAppShell
:
:
GetPrimaryPointerCapabilities
(
)
;
break
;
case
eIntID_AllPointerCapabilities
:
aResult
=
java
:
:
GeckoAppShell
:
:
GetAllPointerCapabilities
(
)
;
break
;
case
eIntID_SystemUsesDarkTheme
:
if
(
!
jni
:
:
IsAvailable
(
)
)
{
return
NS_ERROR_FAILURE
;
}
aResult
=
java
:
:
GeckoSystemStateListener
:
:
IsNightMode
(
)
?
1
:
0
;
break
;
default
:
aResult
=
0
;
rv
=
NS_ERROR_FAILURE
;
}
return
rv
;
}
nsresult
nsLookAndFeel
:
:
GetFloatImpl
(
FloatID
aID
float
&
aResult
)
{
nsresult
rv
=
nsXPLookAndFeel
:
:
GetFloatImpl
(
aID
aResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
return
rv
;
rv
=
NS_OK
;
switch
(
aID
)
{
case
eFloatID_IMEUnderlineRelativeSize
:
aResult
=
1
.
0f
;
break
;
case
eFloatID_SpellCheckerUnderlineRelativeSize
:
aResult
=
1
.
0f
;
break
;
default
:
aResult
=
-
1
.
0
;
rv
=
NS_ERROR_FAILURE
;
break
;
}
return
rv
;
}
bool
nsLookAndFeel
:
:
GetFontImpl
(
FontID
aID
nsString
&
aFontName
gfxFontStyle
&
aFontStyle
)
{
aFontName
.
AssignLiteral
(
"
\
"
Roboto
\
"
"
)
;
aFontStyle
.
style
=
FontSlantStyle
:
:
Normal
(
)
;
aFontStyle
.
weight
=
FontWeight
:
:
Normal
(
)
;
aFontStyle
.
stretch
=
FontStretch
:
:
Normal
(
)
;
aFontStyle
.
size
=
9
.
0
*
96
.
0f
/
72
.
0f
;
aFontStyle
.
systemFont
=
true
;
return
true
;
}
bool
nsLookAndFeel
:
:
GetEchoPasswordImpl
(
)
{
EnsureInitShowPassword
(
)
;
return
mShowPassword
;
}
uint32_t
nsLookAndFeel
:
:
GetPasswordMaskDelayImpl
(
)
{
return
1500
;
}
char16_t
nsLookAndFeel
:
:
GetPasswordCharacterImpl
(
)
{
return
UNICODE_BULLET
;
}
void
nsLookAndFeel
:
:
EnsureInitSystemColors
(
)
{
if
(
!
mInitializedSystemColors
)
{
if
(
XRE_IsParentProcess
(
)
)
{
nsresult
rv
=
GetSystemColors
(
)
;
mInitializedSystemColors
=
NS_SUCCEEDED
(
rv
)
;
}
}
}
void
nsLookAndFeel
:
:
EnsureInitShowPassword
(
)
{
if
(
!
mInitializedShowPassword
)
{
if
(
XRE_IsParentProcess
(
)
)
{
mShowPassword
=
jni
:
:
IsAvailable
(
)
&
&
java
:
:
GeckoAppShell
:
:
GetShowPasswordSetting
(
)
;
}
else
{
ContentChild
:
:
GetSingleton
(
)
-
>
SendGetShowPasswordSetting
(
&
mShowPassword
)
;
}
mInitializedShowPassword
=
true
;
}
}
nsTArray
<
LookAndFeelInt
>
nsLookAndFeel
:
:
GetIntCacheImpl
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
EnsureInitSystemColors
(
)
;
MOZ_ASSERT
(
mInitializedSystemColors
)
;
nsTArray
<
LookAndFeelInt
>
lookAndFeelCache
=
nsXPLookAndFeel
:
:
GetIntCacheImpl
(
)
;
lookAndFeelCache
.
SetCapacity
(
sizeof
(
AndroidSystemColors
)
/
sizeof
(
nscolor
)
)
;
LookAndFeelInt
laf
;
laf
.
id
=
int32_t
(
ColorID
:
:
WindowForeground
)
;
laf
.
colorValue
=
mSystemColors
.
textColorPrimary
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
WidgetBackground
)
;
laf
.
colorValue
=
mSystemColors
.
colorBackground
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
WidgetForeground
)
;
laf
.
colorValue
=
mSystemColors
.
colorForeground
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
WidgetSelectBackground
)
;
laf
.
colorValue
=
mSystemColors
.
textColorHighlight
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
WidgetSelectForeground
)
;
laf
.
colorValue
=
mSystemColors
.
textColorPrimaryInverse
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
Inactivecaptiontext
)
;
laf
.
colorValue
=
mSystemColors
.
textColorTertiary
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
laf
.
id
=
int32_t
(
ColorID
:
:
Windowtext
)
;
laf
.
colorValue
=
mSystemColors
.
textColorPrimary
;
lookAndFeelCache
.
AppendElement
(
laf
)
;
return
lookAndFeelCache
;
}
void
nsLookAndFeel
:
:
SetIntCacheImpl
(
const
nsTArray
<
LookAndFeelInt
>
&
aLookAndFeelCache
)
{
for
(
auto
entry
:
aLookAndFeelCache
)
{
switch
(
ColorID
(
entry
.
id
)
)
{
case
ColorID
:
:
WindowForeground
:
mSystemColors
.
textColorPrimary
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
WidgetBackground
:
mSystemColors
.
colorBackground
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
WidgetForeground
:
mSystemColors
.
colorForeground
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
WidgetSelectBackground
:
mSystemColors
.
textColorHighlight
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
WidgetSelectForeground
:
mSystemColors
.
textColorPrimaryInverse
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
Inactivecaptiontext
:
mSystemColors
.
textColorTertiary
=
entry
.
colorValue
;
break
;
case
ColorID
:
:
Windowtext
:
mSystemColors
.
textColorPrimary
=
entry
.
colorValue
;
break
;
default
:
MOZ_ASSERT
(
false
)
;
}
}
mInitializedSystemColors
=
true
;
}
