#
include
"
GeckoProcessManager
.
h
"
#
include
"
nsINetworkLinkService
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
Services
.
h
"
namespace
mozilla
{
void
GeckoProcessManager
:
:
Init
(
)
{
BaseNatives
:
:
Init
(
)
;
ConnectionManager
:
:
Init
(
)
;
}
NS_IMPL_ISUPPORTS
(
GeckoProcessManager
:
:
ConnectionManager
nsIObserver
)
NS_IMETHODIMP
GeckoProcessManager
:
:
ConnectionManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
java
:
:
GeckoProcessManager
:
:
ConnectionManager
:
:
LocalRef
connMgr
(
mJavaConnMgr
)
;
if
(
!
connMgr
)
{
return
NS_OK
;
}
if
(
!
strcmp
(
"
application
-
foreground
"
aTopic
)
)
{
connMgr
-
>
OnForeground
(
)
;
return
NS_OK
;
}
if
(
!
strcmp
(
"
application
-
background
"
aTopic
)
)
{
connMgr
-
>
OnBackground
(
)
;
return
NS_OK
;
}
if
(
!
strcmp
(
NS_NETWORK_LINK_TOPIC
aTopic
)
)
{
const
nsDependentString
state
(
aData
)
;
const
bool
isUp
=
!
state
.
EqualsLiteral
(
NS_NETWORK_LINK_DATA_DOWN
)
;
connMgr
-
>
OnNetworkStateChange
(
isUp
)
;
return
NS_OK
;
}
return
NS_OK
;
}
void
GeckoProcessManager
:
:
ConnectionManager
:
:
AttachTo
(
java
:
:
GeckoProcessManager
:
:
ConnectionManager
:
:
Param
aInstance
)
{
RefPtr
<
ConnectionManager
>
native
(
new
ConnectionManager
(
)
)
;
BaseNatives
:
:
AttachNative
(
aInstance
native
)
;
native
-
>
mJavaConnMgr
=
aInstance
;
nsCOMPtr
<
nsIObserverService
>
obsServ
(
services
:
:
GetObserverService
(
)
)
;
obsServ
-
>
AddObserver
(
native
"
application
-
background
"
false
)
;
obsServ
-
>
AddObserver
(
native
"
application
-
foreground
"
false
)
;
}
void
GeckoProcessManager
:
:
ConnectionManager
:
:
ObserveNetworkNotifications
(
)
{
nsCOMPtr
<
nsIObserverService
>
obsServ
(
services
:
:
GetObserverService
(
)
)
;
obsServ
-
>
AddObserver
(
this
NS_NETWORK_LINK_TOPIC
false
)
;
const
bool
isUp
=
java
:
:
GeckoAppShell
:
:
IsNetworkLinkUp
(
)
;
java
:
:
GeckoProcessManager
:
:
ConnectionManager
:
:
LocalRef
connMgr
(
mJavaConnMgr
)
;
if
(
!
connMgr
)
{
return
;
}
connMgr
-
>
OnNetworkStateChange
(
isUp
)
;
}
}
