#
ifndef
GeckoTelemetryDelegate_h__
#
define
GeckoTelemetryDelegate_h__
#
include
"
geckoview
/
streaming
/
GeckoViewStreamingTelemetry
.
h
"
#
include
<
jni
.
h
>
#
include
"
mozilla
/
java
/
RuntimeTelemetryNatives
.
h
"
#
include
"
mozilla
/
jni
/
Natives
.
h
"
namespace
mozilla
{
namespace
widget
{
class
GeckoTelemetryDelegate
final
:
public
GeckoViewStreamingTelemetry
:
:
StreamingTelemetryDelegate
public
mozilla
:
:
java
:
:
RuntimeTelemetry
:
:
Proxy
:
:
Natives
<
GeckoTelemetryDelegate
>
{
public
:
static
void
RegisterDelegateProxy
(
mozilla
:
:
java
:
:
RuntimeTelemetry
:
:
Proxy
:
:
Param
aProxy
)
{
MOZ_ASSERT
(
aProxy
)
;
GeckoViewStreamingTelemetry
:
:
RegisterDelegate
(
new
GeckoTelemetryDelegate
(
aProxy
)
)
;
}
explicit
GeckoTelemetryDelegate
(
mozilla
:
:
java
:
:
RuntimeTelemetry
:
:
Proxy
:
:
Param
aProxy
)
:
mProxy
(
aProxy
)
{
}
private
:
void
DispatchHistogram
(
bool
aIsCategorical
const
nsCString
&
aName
const
nsTArray
<
uint32_t
>
&
aSamples
)
{
if
(
!
mozilla
:
:
jni
:
:
IsAvailable
(
)
|
|
!
mProxy
|
|
aSamples
.
Length
(
)
<
1
)
{
return
;
}
nsTArray
<
int64_t
>
samples
(
aSamples
.
Length
(
)
)
;
for
(
size_t
i
=
0
l
=
aSamples
.
Length
(
)
;
i
<
l
;
+
+
i
)
{
samples
.
AppendElement
(
static_cast
<
int64_t
>
(
aSamples
[
i
]
)
)
;
}
mProxy
-
>
DispatchHistogram
(
aIsCategorical
aName
mozilla
:
:
jni
:
:
LongArray
:
:
New
(
samples
.
Elements
(
)
samples
.
Length
(
)
)
)
;
}
void
ReceiveHistogramSamples
(
const
nsCString
&
aName
const
nsTArray
<
uint32_t
>
&
aSamples
)
override
{
DispatchHistogram
(
false
aName
aSamples
)
;
}
void
ReceiveCategoricalHistogramSamples
(
const
nsCString
&
aName
const
nsTArray
<
uint32_t
>
&
aSamples
)
override
{
DispatchHistogram
(
true
aName
aSamples
)
;
}
void
ReceiveBoolScalarValue
(
const
nsCString
&
aName
bool
aValue
)
override
{
if
(
!
mozilla
:
:
jni
:
:
IsAvailable
(
)
|
|
!
mProxy
)
{
return
;
}
mProxy
-
>
DispatchBooleanScalar
(
aName
aValue
)
;
}
void
ReceiveStringScalarValue
(
const
nsCString
&
aName
const
nsCString
&
aValue
)
override
{
if
(
!
mozilla
:
:
jni
:
:
IsAvailable
(
)
|
|
!
mProxy
)
{
return
;
}
mProxy
-
>
DispatchStringScalar
(
aName
aValue
)
;
}
void
ReceiveUintScalarValue
(
const
nsCString
&
aName
uint32_t
aValue
)
override
{
if
(
!
mozilla
:
:
jni
:
:
IsAvailable
(
)
|
|
!
mProxy
)
{
return
;
}
mProxy
-
>
DispatchLongScalar
(
aName
static_cast
<
int64_t
>
(
aValue
)
)
;
}
mozilla
:
:
java
:
:
RuntimeTelemetry
:
:
Proxy
:
:
GlobalRef
mProxy
;
}
;
}
}
#
endif
