#
include
"
ANRReporter
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
<
unistd
.
h
>
namespace
mozilla
{
bool
ANRReporter
:
:
RequestNativeStack
(
bool
aUnwind
)
{
if
(
profiler_is_active
(
)
)
{
return
false
;
}
const
char
*
NATIVE_STACK_FEATURES
[
]
=
{
"
leaf
"
"
threads
"
"
privacy
"
}
;
const
char
*
NATIVE_STACK_UNWIND_FEATURES
[
]
=
{
"
leaf
"
"
threads
"
"
privacy
"
"
stackwalk
"
}
;
const
char
*
*
features
=
NATIVE_STACK_FEATURES
;
size_t
features_size
=
sizeof
(
NATIVE_STACK_FEATURES
)
;
if
(
aUnwind
)
{
features
=
NATIVE_STACK_UNWIND_FEATURES
;
features_size
=
sizeof
(
NATIVE_STACK_UNWIND_FEATURES
)
;
putenv
(
"
MOZ_PROFILER_NEW
=
1
"
)
;
}
const
char
*
NATIVE_STACK_THREADS
[
]
=
{
"
GeckoMain
"
"
Compositor
"
}
;
profiler_start
(
100
10000
features
features_size
/
sizeof
(
char
*
)
NATIVE_STACK_THREADS
sizeof
(
NATIVE_STACK_THREADS
)
/
sizeof
(
char
*
)
)
;
return
true
;
}
jni
:
:
String
:
:
LocalRef
ANRReporter
:
:
GetNativeStack
(
)
{
if
(
!
profiler_is_active
(
)
)
{
return
nullptr
;
}
const
PRIntervalTime
timeout
=
PR_SecondsToInterval
(
5
)
;
const
PRIntervalTime
startTime
=
PR_IntervalNow
(
)
;
typedef
mozilla
:
:
UniquePtr
<
char
[
]
>
ProfilePtr
;
ProfilePtr
profile
(
profiler_get_profile
(
)
)
;
while
(
profile
&
&
!
strstr
(
profile
.
get
(
)
"
\
"
samples
\
"
:
[
{
"
)
)
{
if
(
PR_IntervalNow
(
)
-
startTime
>
=
timeout
)
{
return
nullptr
;
}
usleep
(
100000ul
)
;
profile
=
ProfilePtr
(
profiler_get_profile
(
)
)
;
}
if
(
profile
)
{
return
jni
:
:
String
:
:
Param
(
profile
.
get
(
)
)
;
}
return
nullptr
;
}
void
ANRReporter
:
:
ReleaseNativeStack
(
)
{
if
(
!
profiler_is_active
(
)
)
{
return
;
}
mozilla_sampler_stop
(
)
;
}
}
