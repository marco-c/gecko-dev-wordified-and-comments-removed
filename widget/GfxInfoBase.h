#
ifndef
__mozilla_widget_GfxInfoBase_h__
#
define
__mozilla_widget_GfxInfoBase_h__
#
include
"
GfxDriverInfo
.
h
"
#
include
"
GfxInfoCollector
.
h
"
#
include
"
gfxFeature
.
h
"
#
include
"
gfxTelemetry
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
gfx
/
GraphicsMessages
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsIGfxInfoDebug
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
namespace
mozilla
{
namespace
widget
{
class
GfxInfoBase
:
public
nsIGfxInfo
public
nsIObserver
public
nsSupportsWeakReference
#
ifdef
DEBUG
public
nsIGfxInfoDebug
#
endif
{
public
:
GfxInfoBase
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_IMETHOD
GetFeatureStatus
(
int32_t
aFeature
nsACString
&
aFailureId
int32_t
*
_retval
)
override
;
NS_IMETHOD
GetFeatureSuggestedDriverVersion
(
int32_t
aFeature
nsAString
&
_retval
)
override
;
NS_IMETHOD
GetMonitors
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
_retval
)
override
;
NS_IMETHOD
GetFailures
(
nsTArray
<
int32_t
>
&
indices
nsTArray
<
nsCString
>
&
failures
)
override
;
NS_IMETHOD_
(
void
)
LogFailure
(
const
nsACString
&
failure
)
override
;
NS_IMETHOD
GetInfo
(
JSContext
*
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
override
;
NS_IMETHOD
GetFeatures
(
JSContext
*
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
override
;
NS_IMETHOD
GetFeatureLog
(
JSContext
*
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
override
;
NS_IMETHOD
GetActiveCrashGuards
(
JSContext
*
JS
:
:
MutableHandle
<
JS
:
:
Value
>
)
override
;
NS_IMETHOD
GetFontVisibilityDetermination
(
nsIGfxInfo
:
:
FontVisibilityDeviceDetermination
*
aFontVisibilityDetermination
)
override
;
NS_IMETHOD
GetFontVisibilityDeterminationStr
(
nsAString
&
aFontVisibilityDeterminationStr
)
override
;
NS_IMETHOD
GetContentBackend
(
nsAString
&
aContentBackend
)
override
;
NS_IMETHOD
GetAzureCanvasBackend
(
nsAString
&
aBackend
)
override
;
NS_IMETHOD
GetAzureContentBackend
(
nsAString
&
aBackend
)
override
;
NS_IMETHOD
GetUsingGPUProcess
(
bool
*
aOutValue
)
override
;
NS_IMETHOD
GetIsHeadless
(
bool
*
aIsHeadless
)
override
;
NS_IMETHOD
GetTargetFrameRate
(
uint32_t
*
aTargetFrameRate
)
override
;
NS_IMETHOD
GetCodecSupportInfo
(
nsACString
&
aCodecSupportInfo
)
override
;
nsTArray
<
mozilla
:
:
gfx
:
:
GfxInfoFeatureStatus
>
GetAllFeatures
(
)
;
virtual
nsresult
Init
(
)
;
NS_IMETHOD_
(
void
)
GetData
(
)
override
;
NS_IMETHOD_
(
int32_t
)
GetMaxRefreshRate
(
bool
*
aMixed
)
override
;
static
void
AddCollector
(
GfxInfoCollectorBase
*
collector
)
;
static
void
RemoveCollector
(
GfxInfoCollectorBase
*
collector
)
;
static
nsTArray
<
GfxDriverInfo
>
*
sDriverInfo
;
static
StaticAutoPtr
<
nsTArray
<
mozilla
:
:
gfx
:
:
GfxInfoFeatureStatus
>
>
sFeatureStatus
;
static
bool
sDriverInfoObserverInitialized
;
static
bool
sShutdownOccurred
;
virtual
nsString
Model
(
)
{
return
u
"
"
_ns
;
}
virtual
nsString
Hardware
(
)
{
return
u
"
"
_ns
;
}
virtual
nsString
Product
(
)
{
return
u
"
"
_ns
;
}
virtual
nsString
Manufacturer
(
)
{
return
u
"
"
_ns
;
}
virtual
uint32_t
OperatingSystemVersion
(
)
{
return
0
;
}
virtual
uint32_t
OperatingSystemBuild
(
)
{
return
0
;
}
static
const
nsCString
&
GetApplicationVersion
(
)
;
virtual
nsresult
FindMonitors
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
static
void
SetFeatureStatus
(
nsTArray
<
mozilla
:
:
gfx
:
:
GfxInfoFeatureStatus
>
&
&
aFS
)
;
static
bool
OnlyAllowFeatureOnKnownConfig
(
int32_t
aFeature
)
;
protected
:
virtual
~
GfxInfoBase
(
)
;
virtual
OperatingSystem
GetOperatingSystem
(
)
=
0
;
virtual
nsresult
GetFeatureStatusImpl
(
int32_t
aFeature
int32_t
*
aStatus
nsAString
&
aSuggestedDriverVersion
const
nsTArray
<
GfxDriverInfo
>
&
aDriverInfo
nsACString
&
aFailureId
OperatingSystem
*
aOS
=
nullptr
)
;
virtual
const
nsTArray
<
GfxDriverInfo
>
&
GetGfxDriverInfo
(
)
=
0
;
virtual
void
DescribeFeatures
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
virtual
bool
DoesWindowProtocolMatch
(
const
nsAString
&
aBlocklistWindowProtocol
const
nsAString
&
aWindowProtocol
)
;
bool
DoesVendorMatch
(
const
nsAString
&
aBlocklistVendor
const
nsAString
&
aAdapterVendor
)
;
virtual
bool
DoesDriverVendorMatch
(
const
nsAString
&
aBlocklistVendor
const
nsAString
&
aDriverVendor
)
;
bool
InitFeatureObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aContainer
const
char
*
aName
mozilla
:
:
gfx
:
:
FeatureState
&
aFeatureState
JS
:
:
MutableHandle
<
JSObject
*
>
aOutObj
)
;
NS_IMETHOD
ControlGPUProcessForXPCShell
(
bool
aEnable
bool
*
_retval
)
override
;
NS_IMETHOD
KillGPUProcessForTests
(
)
override
;
NS_IMETHOD
CrashGPUProcessForTests
(
)
override
;
int64_t
mScreenPixels
;
private
:
virtual
int32_t
FindBlocklistedDeviceInList
(
const
nsTArray
<
GfxDriverInfo
>
&
aDriverInfo
nsAString
&
aSuggestedVersion
int32_t
aFeature
nsACString
&
aFailureId
OperatingSystem
os
bool
aForAllowing
)
;
std
:
:
pair
<
nsIGfxInfo
:
:
FontVisibilityDeviceDetermination
nsString
>
GetFontVisibilityDeterminationPair
(
)
;
bool
IsFeatureAllowlisted
(
int32_t
aFeature
)
const
;
void
EvaluateDownloadedBlocklist
(
nsTArray
<
GfxDriverInfo
>
&
aDriverInfo
)
;
bool
BuildFeatureStateLog
(
JSContext
*
aCx
const
gfx
:
:
FeatureState
&
aFeature
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aOut
)
;
Mutex
mMutex
MOZ_UNANNOTATED
;
}
;
}
}
#
endif
