#
ifndef
mozilla_widget_ScrollbarDrawing_h
#
define
mozilla_widget_ScrollbarDrawing_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsITheme
.
h
"
#
include
"
ThemeColors
.
h
"
#
include
"
ThemeDrawing
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
:
:
widget
{
class
ScrollbarDrawing
{
protected
:
using
DPIRatio
=
mozilla
:
:
CSSToLayoutDeviceScale
;
using
EventStates
=
mozilla
:
:
EventStates
;
using
DrawTarget
=
mozilla
:
:
gfx
:
:
DrawTarget
;
using
sRGBColor
=
mozilla
:
:
gfx
:
:
sRGBColor
;
using
Colors
=
ThemeColors
;
using
ScrollbarSizes
=
nsITheme
:
:
ScrollbarSizes
;
using
Overlay
=
nsITheme
:
:
Overlay
;
using
WebRenderBackendData
=
mozilla
:
:
widget
:
:
WebRenderBackendData
;
public
:
ScrollbarDrawing
(
)
=
default
;
virtual
~
ScrollbarDrawing
(
)
=
default
;
struct
ScrollbarParams
{
bool
isOverlay
=
false
;
bool
isRolledOver
=
false
;
bool
isSmall
=
false
;
bool
isHorizontal
=
false
;
bool
isRtl
=
false
;
bool
isOnDarkBackground
=
false
;
bool
isCustom
=
false
;
nscolor
trackColor
=
NS_RGBA
(
0
0
0
0
)
;
nscolor
faceColor
=
NS_RGBA
(
0
0
0
0
)
;
}
;
static
DPIRatio
GetDPIRatioForScrollbarPart
(
nsPresContext
*
)
;
static
nsIFrame
*
GetParentScrollbarFrame
(
nsIFrame
*
aFrame
)
;
static
bool
IsParentScrollbarRolledOver
(
nsIFrame
*
aFrame
)
;
static
bool
IsParentScrollbarHoveredOrActive
(
nsIFrame
*
aFrame
)
;
static
bool
IsScrollbarWidthThin
(
const
ComputedStyle
&
aStyle
)
;
static
bool
IsScrollbarWidthThin
(
nsIFrame
*
aFrame
)
;
virtual
ScrollbarSizes
GetScrollbarSizes
(
nsPresContext
*
StyleScrollbarWidth
Overlay
)
;
ScrollbarSizes
GetScrollbarSizes
(
nsPresContext
*
nsIFrame
*
)
;
virtual
LayoutDeviceIntSize
GetMinimumWidgetSize
(
nsPresContext
*
StyleAppearance
aAppearance
nsIFrame
*
aFrame
)
=
0
;
virtual
Maybe
<
nsITheme
:
:
Transparency
>
GetScrollbarPartTransparency
(
nsIFrame
*
aFrame
StyleAppearance
aAppearance
)
{
return
Nothing
(
)
;
}
bool
IsScrollbarTrackOpaque
(
nsIFrame
*
)
;
virtual
sRGBColor
ComputeScrollbarTrackColor
(
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
)
;
virtual
sRGBColor
ComputeScrollbarThumbColor
(
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
)
;
static
ScrollbarParams
ComputeScrollbarParams
(
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
bool
aIsHorizontal
)
;
static
bool
ShouldUseDarkScrollbar
(
nsIFrame
*
const
ComputedStyle
&
)
;
nscolor
GetScrollbarButtonColor
(
nscolor
aTrackColor
EventStates
)
;
Maybe
<
nscolor
>
GetScrollbarArrowColor
(
nscolor
aButtonColor
)
;
virtual
std
:
:
pair
<
sRGBColor
sRGBColor
>
ComputeScrollbarButtonColors
(
nsIFrame
*
StyleAppearance
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
)
;
virtual
bool
PaintScrollbarButton
(
DrawTarget
&
StyleAppearance
const
LayoutDeviceRect
&
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollbarThumb
(
DrawTarget
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
=
0
;
virtual
bool
PaintScrollbarThumb
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
=
0
;
template
<
typename
PaintBackendData
>
bool
DoPaintDefaultScrollbar
(
PaintBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollbar
(
DrawTarget
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollbar
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollbarTrack
(
DrawTarget
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
{
return
true
;
}
virtual
bool
PaintScrollbarTrack
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
bool
aHorizontal
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
{
return
true
;
}
template
<
typename
PaintBackendData
>
bool
DoPaintDefaultScrollCorner
(
PaintBackendData
&
const
LayoutDeviceRect
&
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollCorner
(
DrawTarget
&
const
LayoutDeviceRect
&
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
bool
PaintScrollCorner
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
virtual
void
RecomputeScrollbarParams
(
)
=
0
;
virtual
bool
ShouldDrawScrollbarButtons
(
)
{
return
true
;
}
uint32_t
GetHorizontalScrollbarHeight
(
)
const
{
return
mHorizontalScrollbarHeight
;
}
uint32_t
GetVerticalScrollbarWidth
(
)
const
{
return
mVerticalScrollbarWidth
;
}
protected
:
uint32_t
mHorizontalScrollbarHeight
=
0
;
uint32_t
mVerticalScrollbarWidth
=
0
;
}
;
}
#
endif
