#
ifndef
SwipeTracker_h
#
define
SwipeTracker_h
#
include
"
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
AxisPhysicsMSDModel
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRefreshObservers
.
h
"
#
include
"
Units
.
h
"
class
nsIWidget
;
class
nsRefreshDriver
;
namespace
mozilla
{
class
PanGestureInput
;
class
SwipeTracker
final
:
public
nsARefreshObserver
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
SwipeTracker
override
)
SwipeTracker
(
nsIWidget
&
aWidget
const
PanGestureInput
&
aSwipeStartEvent
uint32_t
aAllowedDirections
uint32_t
aSwipeDirection
)
;
void
Destroy
(
)
;
nsEventStatus
ProcessEvent
(
const
PanGestureInput
&
aEvent
)
;
void
CancelSwipe
(
const
TimeStamp
&
aTimeStamp
)
;
static
WidgetSimpleGestureEvent
CreateSwipeGestureEvent
(
EventMessage
aMsg
nsIWidget
*
aWidget
const
LayoutDeviceIntPoint
&
aPosition
const
TimeStamp
&
aTimeStamp
)
;
void
WillRefresh
(
mozilla
:
:
TimeStamp
aTime
)
override
;
static
bool
CanTriggerSwipe
(
const
PanGestureInput
&
aPanInput
)
;
protected
:
~
SwipeTracker
(
)
;
bool
SwipingInAllowedDirection
(
)
const
{
return
mAllowedDirections
&
mSwipeDirection
;
}
double
SwipeSuccessTargetValue
(
)
const
;
double
ClampToAllowedRange
(
double
aGestureAmount
)
const
;
bool
ComputeSwipeSuccess
(
)
const
;
void
StartAnimating
(
double
aTargetValue
)
;
void
SwipeFinished
(
const
TimeStamp
&
aTimeStamp
)
;
void
UnregisterFromRefreshDriver
(
)
;
bool
SendSwipeEvent
(
EventMessage
aMsg
uint32_t
aDirection
double
aDelta
const
TimeStamp
&
aTimeStamp
)
;
nsIWidget
&
mWidget
;
RefPtr
<
nsRefreshDriver
>
mRefreshDriver
;
layers
:
:
AxisPhysicsMSDModel
mAxis
;
const
LayoutDeviceIntPoint
mEventPosition
;
TimeStamp
mLastEventTimeStamp
;
TimeStamp
mLastAnimationFrameTime
;
const
uint32_t
mAllowedDirections
;
const
uint32_t
mSwipeDirection
;
double
mGestureAmount
;
double
mCurrentVelocity
;
bool
mEventsAreControllingSwipe
;
bool
mEventsHaveStartedNewGesture
;
bool
mRegisteredWithRefreshDriver
;
}
;
struct
SwipeEventQueue
{
SwipeEventQueue
(
uint32_t
aAllowedDirections
uint64_t
aInputBlockId
)
:
allowedDirections
(
aAllowedDirections
)
inputBlockId
(
aInputBlockId
)
{
}
nsTArray
<
PanGestureInput
>
queuedEvents
;
uint32_t
allowedDirections
;
uint64_t
inputBlockId
;
}
;
}
#
endif
