#
include
"
ScrollbarDrawingAndroid
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsNativeTheme
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
LayoutDeviceIntSize
ScrollbarDrawingAndroid
:
:
GetMinimumWidgetSize
(
nsPresContext
*
aPresContext
StyleAppearance
aAppearance
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
nsNativeTheme
:
:
IsWidgetScrollbarPart
(
aAppearance
)
)
;
auto
size
=
GetScrollbarSize
(
aPresContext
StyleScrollbarWidth
:
:
Auto
Overlay
:
:
Yes
)
;
return
LayoutDeviceIntSize
{
size
size
}
;
}
template
<
typename
PaintBackendData
>
void
ScrollbarDrawingAndroid
:
:
DoPaintScrollbarThumb
(
PaintBackendData
&
aPaintData
const
LayoutDeviceRect
&
aRect
ScrollbarKind
aScrollbarKind
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
ElementState
&
aElementState
const
DocumentState
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
const
auto
color
=
ComputeScrollbarThumbColor
(
aFrame
aStyle
aElementState
aDocumentState
aColors
)
;
const
bool
horizontal
=
aScrollbarKind
=
=
ScrollbarKind
:
:
Horizontal
;
LayoutDeviceRect
thumbRect
(
aRect
)
;
if
(
horizontal
)
{
thumbRect
.
height
*
=
0
.
5f
;
thumbRect
.
y
+
=
thumbRect
.
height
*
0
.
5f
;
}
else
{
thumbRect
.
width
*
=
0
.
5f
;
thumbRect
.
x
+
=
thumbRect
.
width
*
0
.
5f
;
}
const
LayoutDeviceCoord
radius
=
(
horizontal
?
thumbRect
.
height
:
thumbRect
.
width
)
/
2
.
0f
;
ThemeDrawing
:
:
PaintRoundedRectWithRadius
(
aPaintData
thumbRect
color
sRGBColor
:
:
White
(
0
.
0f
)
0
.
0f
radius
/
aDpiRatio
aDpiRatio
)
;
}
bool
ScrollbarDrawingAndroid
:
:
PaintScrollbarThumb
(
DrawTarget
&
aDt
const
LayoutDeviceRect
&
aRect
ScrollbarKind
aScrollbarKind
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
ElementState
&
aElementState
const
DocumentState
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
DoPaintScrollbarThumb
(
aDt
aRect
aScrollbarKind
aFrame
aStyle
aElementState
aDocumentState
aColors
aDpiRatio
)
;
return
true
;
}
bool
ScrollbarDrawingAndroid
:
:
PaintScrollbarThumb
(
WebRenderBackendData
&
aWrData
const
LayoutDeviceRect
&
aRect
ScrollbarKind
aScrollbarKind
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
ElementState
&
aElementState
const
DocumentState
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
DoPaintScrollbarThumb
(
aWrData
aRect
aScrollbarKind
aFrame
aStyle
aElementState
aDocumentState
aColors
aDpiRatio
)
;
return
true
;
}
void
ScrollbarDrawingAndroid
:
:
RecomputeScrollbarParams
(
)
{
uint32_t
defaultSize
=
6
;
uint32_t
overrideSize
=
StaticPrefs
:
:
widget_non_native_theme_scrollbar_size_override
(
)
;
if
(
overrideSize
>
0
)
{
defaultSize
=
overrideSize
;
}
ConfigureScrollbarSize
(
defaultSize
)
;
ConfigureScrollbarSize
(
StyleScrollbarWidth
:
:
Thin
Overlay
:
:
Yes
defaultSize
)
;
ConfigureScrollbarSize
(
StyleScrollbarWidth
:
:
Thin
Overlay
:
:
No
defaultSize
)
;
}
