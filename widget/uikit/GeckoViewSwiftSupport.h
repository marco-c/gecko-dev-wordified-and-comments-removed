#
ifndef
GeckoView_GeckoViewSwiftSupport_h
#
define
GeckoView_GeckoViewSwiftSupport_h
#
ifdef
MOZILLA_CLIENT
#
include
<
mozilla
/
Types
.
h
>
#
else
#
define
MOZ_EXPORT
#
define
MOZ_BEGIN_EXTERN_C
#
define
MOZ_END_EXTERN_C
#
endif
#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
UIKit
/
UIKit
.
h
>
#
import
<
xpc
/
xpc
.
h
>
protocol
SwiftEventDispatcher
;
protocol
SwiftGeckoViewRuntime
<
NSObject
>
-
(
id
<
SwiftEventDispatcher
>
)
runtimeDispatcher
;
-
(
id
<
SwiftEventDispatcher
>
)
dispatcherByName
:
(
const
char
*
)
name
;
end
protocol
GeckoProcessExtension
<
NSObject
>
-
(
void
)
lockdownSandbox
:
(
NSString
*
)
revision
;
end
protocol
EventCallback
<
NSObject
>
-
(
void
)
sendSuccess
:
(
id
)
response
;
-
(
void
)
sendError
:
(
id
)
response
;
end
protocol
GeckoEventDispatcher
<
NSObject
>
-
(
void
)
dispatchToGecko
:
(
NSString
*
)
type
message
:
(
id
)
message
callback
:
(
id
<
EventCallback
>
)
callback
;
-
(
BOOL
)
hasListener
:
(
NSString
*
)
type
;
end
protocol
SwiftEventDispatcher
<
NSObject
>
-
(
void
)
attach
:
(
id
<
GeckoEventDispatcher
>
)
gecko
;
-
(
void
)
dispatchToSwift
:
(
NSString
*
)
type
message
:
(
id
)
message
callback
:
(
id
<
EventCallback
>
)
callback
;
-
(
BOOL
)
hasListener
:
(
NSString
*
)
type
;
end
protocol
GeckoViewWindow
<
NSObject
>
-
(
UIView
*
)
view
;
-
(
void
)
close
;
end
MOZ_BEGIN_EXTERN_C
MOZ_EXPORT
id
<
GeckoViewWindow
>
GeckoViewOpenWindow
(
NSString
*
aId
id
<
SwiftEventDispatcher
>
aDispatcher
NSDictionary
*
aInitData
bool
aPrivateMode
)
;
MOZ_END_EXTERN_C
#
endif
