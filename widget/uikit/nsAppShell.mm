#
import
<
UIKit
/
UIApplication
.
h
>
#
import
<
UIKit
/
UIScreen
.
h
>
#
import
<
UIKit
/
UIWindow
.
h
>
#
import
<
UIKit
/
UIViewController
.
h
>
#
include
"
nsAppShell
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIRollupListener
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsMemoryPressure
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
nsAppShell
*
nsAppShell
:
:
gAppShell
=
NULL
;
UIWindow
*
nsAppShell
:
:
gWindow
=
nil
;
NSMutableArray
*
nsAppShell
:
:
gTopLevelViews
=
[
[
NSMutableArray
alloc
]
init
]
;
#
define
ALOG
(
args
.
.
.
)
\
fprintf
(
stderr
args
)
;
\
fprintf
(
stderr
"
\
n
"
)
interface
ViewController
:
UIViewController
end
implementation
ViewController
-
(
void
)
loadView
{
ALOG
(
"
[
ViewController
loadView
]
"
)
;
CGRect
r
=
{
{
0
0
}
{
100
100
}
}
;
self
.
view
=
[
[
UIView
alloc
]
initWithFrame
:
r
]
;
[
self
.
view
setBackgroundColor
:
[
UIColor
lightGrayColor
]
]
;
for
(
UIView
*
v
in
nsAppShell
:
:
gTopLevelViews
)
{
ALOG
(
"
[
ViewController
.
view
addSubView
:
%
p
]
"
v
)
;
[
self
.
view
addSubview
:
v
]
;
}
[
nsAppShell
:
:
gTopLevelViews
release
]
;
nsAppShell
:
:
gTopLevelViews
=
nil
;
}
end
interface
AppShellDelegate
:
NSObject
<
UIApplicationDelegate
>
{
}
property
(
strong
nonatomic
)
UIWindow
*
window
;
end
implementation
AppShellDelegate
-
(
BOOL
)
application
:
(
UIApplication
*
)
application
didFinishLaunchingWithOptions
:
(
NSDictionary
*
)
launchOptions
{
ALOG
(
"
[
AppShellDelegate
application
:
didFinishLaunchingWithOptions
:
]
"
)
;
nsAppShell
:
:
gWindow
=
[
[
[
UIWindow
alloc
]
initWithFrame
:
[
[
UIScreen
mainScreen
]
applicationFrame
]
]
retain
]
;
self
.
window
=
nsAppShell
:
:
gWindow
;
self
.
window
.
rootViewController
=
[
[
ViewController
alloc
]
init
]
;
nsAppShell
:
:
gWindow
.
backgroundColor
=
[
UIColor
blueColor
]
;
[
nsAppShell
:
:
gWindow
makeKeyAndVisible
]
;
return
YES
;
}
-
(
void
)
applicationWillTerminate
:
(
UIApplication
*
)
application
{
ALOG
(
"
[
AppShellDelegate
applicationWillTerminate
:
]
"
)
;
nsAppShell
:
:
gAppShell
-
>
WillTerminate
(
)
;
}
-
(
void
)
applicationDidBecomeActive
:
(
UIApplication
*
)
application
{
ALOG
(
"
[
AppShellDelegate
applicationDidBecomeActive
:
]
"
)
;
}
-
(
void
)
applicationWillResignActive
:
(
UIApplication
*
)
application
{
ALOG
(
"
[
AppShellDelegate
applicationWillResignActive
:
]
"
)
;
}
-
(
void
)
applicationDidReceiveMemoryWarning
:
(
UIApplication
*
)
application
{
ALOG
(
"
[
AppShellDelegate
applicationDidReceiveMemoryWarning
:
]
"
)
;
NS_DispatchMemoryPressure
(
MemPressure_New
)
;
}
end
NS_IMETHODIMP
nsAppShell
:
:
ResumeNative
(
void
)
{
return
nsBaseAppShell
:
:
ResumeNative
(
)
;
}
nsAppShell
:
:
nsAppShell
(
)
:
mAutoreleasePool
(
NULL
)
mDelegate
(
NULL
)
mCFRunLoop
(
NULL
)
mCFRunLoopSource
(
NULL
)
mTerminated
(
false
)
mNotifiedWillTerminate
(
false
)
{
gAppShell
=
this
;
}
nsAppShell
:
:
~
nsAppShell
(
)
{
if
(
mAutoreleasePool
)
{
[
mAutoreleasePool
release
]
;
mAutoreleasePool
=
NULL
;
}
if
(
mCFRunLoop
)
{
if
(
mCFRunLoopSource
)
{
:
:
CFRunLoopRemoveSource
(
mCFRunLoop
mCFRunLoopSource
kCFRunLoopCommonModes
)
;
:
:
CFRelease
(
mCFRunLoopSource
)
;
}
:
:
CFRelease
(
mCFRunLoop
)
;
}
gAppShell
=
NULL
;
}
nsresult
nsAppShell
:
:
Init
(
)
{
mAutoreleasePool
=
[
[
NSAutoreleasePool
alloc
]
init
]
;
mCFRunLoop
=
[
[
NSRunLoop
currentRunLoop
]
getCFRunLoop
]
;
NS_ENSURE_STATE
(
mCFRunLoop
)
;
:
:
CFRetain
(
mCFRunLoop
)
;
CFRunLoopSourceContext
context
;
bzero
(
&
context
sizeof
(
context
)
)
;
context
.
info
=
this
;
context
.
perform
=
ProcessGeckoEvents
;
mCFRunLoopSource
=
:
:
CFRunLoopSourceCreate
(
kCFAllocatorDefault
0
&
context
)
;
NS_ENSURE_STATE
(
mCFRunLoopSource
)
;
:
:
CFRunLoopAddSource
(
mCFRunLoop
mCFRunLoopSource
kCFRunLoopCommonModes
)
;
return
nsBaseAppShell
:
:
Init
(
)
;
}
void
nsAppShell
:
:
ProcessGeckoEvents
(
void
*
aInfo
)
{
nsAppShell
*
self
=
static_cast
<
nsAppShell
*
>
(
aInfo
)
;
self
-
>
NativeEventCallback
(
)
;
self
-
>
Release
(
)
;
}
void
nsAppShell
:
:
WillTerminate
(
)
{
mNotifiedWillTerminate
=
true
;
if
(
mTerminated
)
return
;
mTerminated
=
true
;
NS_ProcessPendingEvents
(
NS_GetCurrentThread
(
)
)
;
nsBaseAppShell
:
:
Exit
(
)
;
}
void
nsAppShell
:
:
ScheduleNativeEventCallback
(
)
{
if
(
mTerminated
)
return
;
NS_ADDREF_THIS
(
)
;
:
:
CFRunLoopSourceSignal
(
mCFRunLoopSource
)
;
:
:
CFRunLoopWakeUp
(
mCFRunLoop
)
;
}
bool
nsAppShell
:
:
ProcessNextNativeEvent
(
bool
aMayWait
)
{
if
(
mTerminated
)
return
false
;
NSString
*
currentMode
=
nil
;
NSDate
*
waitUntil
=
nil
;
if
(
aMayWait
)
waitUntil
=
[
NSDate
distantFuture
]
;
NSRunLoop
*
currentRunLoop
=
[
NSRunLoop
currentRunLoop
]
;
BOOL
eventProcessed
=
NO
;
do
{
currentMode
=
[
currentRunLoop
currentMode
]
;
if
(
!
currentMode
)
currentMode
=
NSDefaultRunLoopMode
;
if
(
aMayWait
)
eventProcessed
=
[
currentRunLoop
runMode
:
currentMode
beforeDate
:
waitUntil
]
;
else
[
currentRunLoop
acceptInputForMode
:
currentMode
beforeDate
:
waitUntil
]
;
}
while
(
eventProcessed
&
&
aMayWait
)
;
return
false
;
}
NS_IMETHODIMP
nsAppShell
:
:
Run
(
void
)
{
ALOG
(
"
nsAppShell
:
:
Run
"
)
;
char
argv
[
1
]
[
4
]
=
{
"
app
"
}
;
UIApplicationMain
(
1
(
char
*
*
)
argv
nil
"
AppShellDelegate
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsAppShell
:
:
Exit
(
void
)
{
if
(
mTerminated
)
return
NS_OK
;
mTerminated
=
true
;
return
nsBaseAppShell
:
:
Exit
(
)
;
}
