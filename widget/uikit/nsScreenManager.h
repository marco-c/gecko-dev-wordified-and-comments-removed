#
ifndef
nsScreenManager_h_
#
define
nsScreenManager_h_
#
include
"
nsBaseScreen
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsRect
.
h
"
class
UIScreen
;
class
UIKitScreen
:
public
nsBaseScreen
{
public
:
explicit
UIKitScreen
(
UIScreen
*
screen
)
;
~
UIKitScreen
(
)
{
}
NS_IMETHOD
GetId
(
uint32_t
*
outId
)
override
{
*
outId
=
0
;
return
NS_OK
;
}
NS_IMETHOD
GetRect
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetAvailRect
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetRectDisplayPix
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetAvailRectDisplayPix
(
int32_t
*
aLeft
int32_t
*
aTop
int32_t
*
aWidth
int32_t
*
aHeight
)
override
;
NS_IMETHOD
GetPixelDepth
(
int32_t
*
aPixelDepth
)
override
;
NS_IMETHOD
GetColorDepth
(
int32_t
*
aColorDepth
)
override
;
NS_IMETHOD
GetContentsScaleFactor
(
double
*
aContentsScaleFactor
)
override
;
NS_IMETHOD
GetDefaultCSSScaleFactor
(
double
*
aScaleFactor
)
override
{
return
GetContentsScaleFactor
(
aScaleFactor
)
;
}
private
:
UIScreen
*
mScreen
;
}
;
class
UIKitScreenManager
:
public
nsIScreenManager
{
public
:
UIKitScreenManager
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISCREENMANAGER
static
LayoutDeviceIntRect
GetBounds
(
)
;
private
:
virtual
~
UIKitScreenManager
(
)
{
}
nsCOMPtr
<
nsIScreen
>
mScreen
;
}
;
#
endif
