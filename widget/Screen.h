#
ifndef
mozilla_widget_Screen_h
#
define
mozilla_widget_Screen_h
#
include
"
nsIScreen
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
HalScreenConfiguration
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ScreenDetails
;
}
namespace
widget
{
class
Screen
final
:
public
nsIScreen
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISCREEN
using
OrientationAngle
=
uint16_t
;
enum
class
IsPseudoDisplay
:
bool
{
No
Yes
}
;
Screen
(
LayoutDeviceIntRect
aRect
LayoutDeviceIntRect
aAvailRect
uint32_t
aPixelDepth
uint32_t
aColorDepth
uint32_t
aRefreshRate
DesktopToLayoutDeviceScale
aContentsScale
CSSToLayoutDeviceScale
aDefaultCssScale
float
aDpi
IsPseudoDisplay
hal
:
:
ScreenOrientation
=
hal
:
:
ScreenOrientation
:
:
None
OrientationAngle
=
0
)
;
explicit
Screen
(
const
dom
:
:
ScreenDetails
&
aScreenDetails
)
;
Screen
(
const
Screen
&
aOther
)
;
dom
:
:
ScreenDetails
ToScreenDetails
(
)
const
;
OrientationAngle
GetOrientationAngle
(
)
const
{
return
mOrientationAngle
;
}
hal
:
:
ScreenOrientation
GetOrientationType
(
)
const
{
return
mScreenOrientation
;
}
float
GetDPI
(
)
const
{
return
mDPI
;
}
const
LayoutDeviceIntRect
&
GetRect
(
)
const
{
return
mRect
;
}
const
LayoutDeviceIntRect
&
GetAvailRect
(
)
const
{
return
mAvailRect
;
}
const
DesktopToLayoutDeviceScale
&
GetContentsScaleFactor
(
)
const
{
return
mContentsScale
;
}
const
CSSToLayoutDeviceScale
&
GetDefaultCSSScaleFactor
(
)
const
{
return
mDefaultCssScale
;
}
private
:
virtual
~
Screen
(
)
=
default
;
const
LayoutDeviceIntRect
mRect
;
const
LayoutDeviceIntRect
mAvailRect
;
const
DesktopIntRect
mRectDisplayPix
;
const
DesktopIntRect
mAvailRectDisplayPix
;
const
uint32_t
mPixelDepth
;
const
uint32_t
mColorDepth
;
const
uint32_t
mRefreshRate
;
const
DesktopToLayoutDeviceScale
mContentsScale
;
const
CSSToLayoutDeviceScale
mDefaultCssScale
;
const
float
mDPI
;
const
hal
:
:
ScreenOrientation
mScreenOrientation
;
const
OrientationAngle
mOrientationAngle
;
const
bool
mIsPseudoDisplay
;
}
;
}
}
#
endif
