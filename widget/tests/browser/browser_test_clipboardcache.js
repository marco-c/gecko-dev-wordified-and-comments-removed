"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
var
Ipsum
=
"
0123456789
"
.
repeat
(
1234321
)
;
var
IpsumByteLength
=
Ipsum
.
length
*
2
;
var
SHORT_STRING_NO_CACHE
=
"
short
string
that
will
not
be
cached
to
the
disk
"
;
function
getClipboardCacheFDCount
(
)
{
let
dir
;
if
(
AppConstants
.
platform
=
=
=
"
win
"
)
{
let
{
FileUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
dir
=
FileUtils
.
getFile
(
"
TmpD
"
[
"
mozilla
-
temp
-
files
"
]
)
;
}
else
{
dir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dir
.
initWithPath
(
"
/
dev
/
fd
"
)
;
}
let
count
=
0
;
for
(
let
fdFile
of
dir
.
directoryEntries
)
{
let
fileSize
;
try
{
fileSize
=
fdFile
.
fileSize
;
}
catch
(
e
)
{
continue
;
}
if
(
fileSize
=
=
=
IpsumByteLength
)
{
+
+
count
;
}
}
return
count
;
}
async
function
testCopyPaste
(
isPrivate
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
isPrivate
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
)
;
let
browser
=
tab
.
linkedBrowser
;
await
ContentTask
.
spawn
(
browser
SHORT_STRING_NO_CACHE
async
shortStr
=
>
{
await
content
.
navigator
.
clipboard
.
writeText
(
shortStr
)
;
}
)
;
let
initialFdCount
=
getClipboardCacheFDCount
(
)
;
await
ContentTask
.
spawn
(
browser
Ipsum
async
largeString
=
>
{
await
content
.
navigator
.
clipboard
.
writeText
(
largeString
)
;
}
)
;
let
fdCountAfterCopy
=
getClipboardCacheFDCount
(
)
;
if
(
isPrivate
)
{
is
(
fdCountAfterCopy
initialFdCount
"
Private
write
"
)
;
}
else
{
is
(
fdCountAfterCopy
initialFdCount
+
1
"
Cached
write
"
)
;
}
let
readStr
=
await
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
let
{
document
}
=
content
;
document
.
body
.
contentEditable
=
true
;
document
.
body
.
focus
(
)
;
let
pastePromise
=
new
Promise
(
resolve
=
>
{
document
.
addEventListener
(
"
paste
"
e
=
>
{
resolve
(
e
.
clipboardData
.
getData
(
"
text
/
plain
"
)
)
;
}
{
once
:
true
}
)
;
}
)
;
document
.
execCommand
(
"
paste
"
)
;
return
pastePromise
;
}
)
;
ok
(
readStr
=
=
=
Ipsum
"
Read
what
we
pasted
"
)
;
if
(
isPrivate
)
{
is
(
getClipboardCacheFDCount
(
)
fdCountAfterCopy
"
Private
read
"
)
;
}
else
{
is
(
getClipboardCacheFDCount
(
)
fdCountAfterCopy
"
Read
not
cached
"
)
;
}
await
ContentTask
.
spawn
(
browser
SHORT_STRING_NO_CACHE
async
shortStr
=
>
{
await
content
.
navigator
.
clipboard
.
writeText
(
shortStr
)
;
}
)
;
is
(
getClipboardCacheFDCount
(
)
initialFdCount
"
Drop
clipboard
cache
if
any
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
add_task
(
async
function
test_private
(
)
{
await
testCopyPaste
(
true
)
;
}
)
;
add_task
(
async
function
test_non_private
(
)
{
await
testCopyPaste
(
false
)
;
}
)
;
