"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
function
waitForWhile
(
)
{
return
new
Promise
(
resolve
=
>
{
requestIdleCallback
(
resolve
{
timeout
:
300
}
)
;
}
)
;
}
const
NativePanHandlerForWindows
=
{
beginPhase
:
SpecialPowers
.
DOMWindowUtils
.
PHASE_BEGIN
updatePhase
:
SpecialPowers
.
DOMWindowUtils
.
PHASE_UPDATE
endPhase
:
SpecialPowers
.
DOMWindowUtils
.
PHASE_END
promiseNativePanEvent
:
promiseNativeTouchpadPan
deltaOnRTL
:
50
}
;
const
NativePanHandlerForMac
=
{
beginPhase
:
1
updatePhase
:
2
endPhase
:
4
promiseNativePanEvent
:
promiseNativePanGestureEventAndWaitForObserver
deltaOnRTL
:
-
50
}
;
function
getPanHandler
(
)
{
switch
(
getPlatform
(
)
)
{
case
"
windows
"
:
return
NativePanHandlerForWindows
;
case
"
mac
"
:
return
NativePanHandlerForMac
;
default
:
throw
new
Error
(
"
There
'
s
no
native
pan
handler
on
platform
"
+
getPlatform
(
)
)
;
}
}
const
NativePanHandler
=
getPanHandler
(
)
;
async
function
panRightToLeft
(
aElement
aX
aY
)
{
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
beginPhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
updatePhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
updatePhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
0
0
NativePanHandler
.
endPhase
)
;
}
async
function
panLeftToRight
(
aElement
aX
aY
)
{
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
-
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
beginPhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
-
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
updatePhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
-
NativePanHandler
.
deltaOnRTL
0
NativePanHandler
.
updatePhase
)
;
await
NativePanHandler
.
promiseNativePanEvent
(
aElement
aX
aY
0
0
NativePanHandler
.
endPhase
)
;
}
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
gesture
.
swipe
.
left
"
"
Browser
:
BackOrBackDuplicate
"
]
[
"
browser
.
gesture
.
swipe
.
eight
"
"
Browser
:
ForwardOrForwardDuplicate
"
]
[
"
widget
.
disable
-
swipe
-
tracker
"
false
]
[
"
widget
.
swipe
.
velocity
-
twitch
-
tolerance
"
0
.
0000001
]
[
"
widget
.
swipe
.
success
-
threshold
"
0
.
25
]
[
"
widget
.
swipe
.
success
-
velocity
-
contribution
"
0
.
5
]
]
}
)
;
const
firstPage
=
"
about
:
about
"
;
const
secondPage
=
"
about
:
mozilla
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
firstPage
true
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
secondPage
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
secondPage
)
;
ok
(
gBrowser
.
webNavigation
.
canGoBack
)
;
ok
(
!
gBrowser
.
webNavigation
.
canGoForward
)
;
let
wheelEventCount
=
0
;
tab
.
linkedBrowser
.
addEventListener
(
"
wheel
"
(
)
=
>
{
wheelEventCount
+
+
;
}
)
;
await
panRightToLeft
(
tab
.
linkedBrowser
100
100
)
;
is
(
wheelEventCount
3
"
Received
3
wheel
events
"
)
;
await
waitForWhile
(
)
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
secondPage
)
;
wheelEventCount
=
0
;
let
startLoadingPromise
=
BrowserTestUtils
.
browserStarted
(
tab
.
linkedBrowser
firstPage
)
;
let
stoppedLoadingPromise
=
BrowserTestUtils
.
browserStopped
(
tab
.
linkedBrowser
firstPage
)
;
await
panLeftToRight
(
tab
.
linkedBrowser
100
100
)
;
is
(
wheelEventCount
1
"
Received
a
wheel
event
"
)
;
await
Promise
.
all
(
[
startLoadingPromise
stoppedLoadingPromise
]
)
;
ok
(
gBrowser
.
webNavigation
.
canGoForward
)
;
wheelEventCount
=
0
;
startLoadingPromise
=
BrowserTestUtils
.
browserStarted
(
tab
.
linkedBrowser
secondPage
)
;
stoppedLoadingPromise
=
BrowserTestUtils
.
browserStopped
(
tab
.
linkedBrowser
secondPage
)
;
await
panRightToLeft
(
tab
.
linkedBrowser
100
100
)
;
is
(
wheelEventCount
1
"
Received
a
wheel
event
"
)
;
await
Promise
.
all
(
[
startLoadingPromise
stoppedLoadingPromise
]
)
;
ok
(
gBrowser
.
webNavigation
.
canGoBack
)
;
wheelEventCount
=
0
;
let
wheelEventListener
=
event
=
>
{
event
.
preventDefault
(
)
;
}
;
tab
.
linkedBrowser
.
addEventListener
(
"
wheel
"
wheelEventListener
)
;
await
panLeftToRight
(
tab
.
linkedBrowser
100
100
)
;
is
(
wheelEventCount
3
"
Received
all
wheel
events
"
)
;
await
waitForWhile
(
)
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
secondPage
)
;
wheelEventCount
=
0
;
tab
.
linkedBrowser
.
removeEventListener
(
"
wheel
"
wheelEventListener
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
widget
.
disable
-
swipe
-
tracker
"
true
]
]
}
)
;
await
panLeftToRight
(
tab
.
linkedBrowser
100
100
)
;
is
(
wheelEventCount
3
"
Received
all
wheel
events
"
)
;
await
waitForWhile
(
)
;
is
(
tab
.
linkedBrowser
.
currentURI
.
spec
secondPage
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
