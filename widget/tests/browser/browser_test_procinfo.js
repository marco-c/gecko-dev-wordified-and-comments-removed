"
use
strict
"
;
const
ROOT_URL
=
"
http
:
/
/
example
.
com
/
browser
/
widget
/
tests
/
browser
"
;
const
DUMMY_URL
=
ROOT_URL
+
"
/
dummy
.
html
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
MAC
=
AppConstants
.
platform
=
=
"
macosx
"
;
const
HAS_THREAD_NAMES
=
AppConstants
.
platform
!
=
"
win
"
|
|
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
10
)
;
const
isFissionEnabled
=
Services
.
prefs
.
getBoolPref
(
"
fission
.
autostart
"
)
;
const
SAMPLE_SIZE
=
10
;
add_task
(
async
function
test_proc_info
(
)
{
waitForExplicitFinish
(
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
DUMMY_URL
}
async
function
(
browser
)
{
let
cpuThreads
=
0
;
let
cpuUser
=
0
;
let
tabsAboutHome
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
+
+
i
)
{
tabsAboutHome
.
push
(
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
home
"
)
)
;
}
for
(
let
tab
of
tabsAboutHome
)
{
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
}
for
(
let
z
=
0
;
z
<
SAMPLE_SIZE
;
z
+
+
)
{
let
parentProc
=
await
ChromeUtils
.
requestProcInfo
(
)
;
cpuUser
+
=
parentProc
.
cpuUser
;
Assert
.
equal
(
parentProc
.
type
"
browser
"
"
Parent
proc
type
should
be
browser
"
)
;
for
(
var
x
=
0
;
x
<
parentProc
.
threads
.
length
;
x
+
+
)
{
cpuThreads
+
=
parentProc
.
threads
[
x
]
.
cpuUser
;
}
if
(
HAS_THREAD_NAMES
)
{
Assert
.
ok
(
parentProc
.
threads
.
some
(
thread
=
>
thread
.
name
)
"
At
least
one
of
the
threads
of
the
parent
process
is
named
"
)
;
}
Assert
.
ok
(
parentProc
.
residentUniqueSize
>
0
"
Resident
-
unique
-
size
was
set
"
)
;
Assert
.
ok
(
parentProc
.
residentUniqueSize
<
=
parentProc
.
residentSetSize
Resident
-
unique
-
size
should
be
bounded
by
resident
-
set
-
size
{
parentProc
.
residentUniqueSize
}
<
=
{
parentProc
.
residentSetSize
}
)
;
for
(
var
i
=
0
;
i
<
parentProc
.
children
.
length
;
i
+
+
)
{
let
childProc
=
parentProc
.
children
[
i
]
;
Assert
.
notEqual
(
childProc
.
type
"
browser
"
"
Child
proc
type
should
not
be
browser
"
)
;
if
(
childProc
.
type
.
startsWith
(
"
web
"
)
)
{
Assert
.
notEqual
(
childProc
.
childID
0
"
Child
proc
should
have
been
set
"
)
;
}
Assert
.
notEqual
(
childProc
.
type
"
unknown
"
"
Child
proc
type
should
be
known
"
)
;
if
(
childProc
.
type
=
=
"
webIsolated
"
)
{
Assert
.
notEqual
(
childProc
.
origin
|
|
"
"
"
"
"
Child
process
should
have
an
origin
"
)
;
}
for
(
var
y
=
0
;
y
<
childProc
.
threads
.
length
;
y
+
+
)
{
cpuThreads
+
=
childProc
.
threads
[
y
]
.
cpuUser
;
}
cpuUser
+
=
childProc
.
cpuUser
;
}
var
hasPrivilegedAbout
=
false
;
var
numberOfAboutTabs
=
0
;
for
(
i
=
0
;
i
<
parentProc
.
children
.
length
;
i
+
+
)
{
let
childProc
=
parentProc
.
children
[
i
]
;
if
(
childProc
.
type
!
=
"
privilegedabout
"
)
{
continue
;
}
hasPrivilegedAbout
=
true
;
Assert
.
ok
(
childProc
.
residentUniqueSize
>
0
"
Resident
-
unique
-
size
was
set
"
)
;
Assert
.
ok
(
childProc
.
residentUniqueSize
<
=
childProc
.
residentSetSize
Resident
-
unique
-
size
should
be
bounded
by
resident
-
set
-
size
{
childProc
.
residentUniqueSize
}
<
=
{
childProc
.
residentSetSize
}
)
;
for
(
var
win
of
childProc
.
windows
)
{
if
(
win
.
documentURI
.
spec
!
=
"
about
:
home
"
)
{
continue
;
}
numberOfAboutTabs
+
+
;
Assert
.
ok
(
win
.
outerWindowId
>
0
ContentParentID
should
be
>
0
{
win
.
outerWindowId
}
)
;
Assert
.
equal
(
win
.
documentTitle
"
New
Tab
"
)
;
}
Assert
.
ok
(
numberOfAboutTabs
>
=
tabsAboutHome
.
length
"
We
have
found
at
least
as
many
about
:
home
tabs
as
we
opened
"
)
;
break
;
}
Assert
.
ok
(
hasPrivilegedAbout
"
We
have
found
the
privileged
about
process
"
)
;
}
if
(
!
MAC
)
{
Assert
.
greater
(
cpuThreads
0
"
Got
some
cpu
time
in
the
threads
"
)
;
}
Assert
.
greater
(
cpuUser
0
"
Got
some
cpu
time
"
)
;
for
(
let
tab
of
tabsAboutHome
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
}
)
;
