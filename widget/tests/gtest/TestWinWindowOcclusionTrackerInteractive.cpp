#
include
"
gtest
/
gtest
.
h
"
#
include
"
MockWinWidget
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
widget
/
WinEventObserver
.
h
"
#
include
"
mozilla
/
widget
/
WinWindowOcclusionTracker
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Units
.
h
"
#
include
"
WinUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
#
define
PREF_DISPLAY_STATE
\
"
widget
.
windows
.
window_occlusion_tracking_display_state
.
enabled
"
#
define
PREF_SESSION_LOCK
\
"
widget
.
windows
.
window_occlusion_tracking_session_lock
.
enabled
"
class
WinWindowOcclusionTrackerInteractiveTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
SetUp
(
)
override
{
if
(
WinWindowOcclusionTracker
:
:
Get
(
)
)
{
WinWindowOcclusionTracker
:
:
ShutDown
(
)
;
}
EXPECT_EQ
(
nullptr
WinWindowOcclusionTracker
:
:
Get
(
)
)
;
WinWindowOcclusionTracker
:
:
Ensure
(
)
;
EXPECT_NE
(
nullptr
WinWindowOcclusionTracker
:
:
Get
(
)
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
EnsureDisplayStatusObserver
(
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
EnsureSessionChangeObserver
(
)
;
}
void
TearDown
(
)
override
{
WinWindowOcclusionTracker
:
:
ShutDown
(
)
;
EXPECT_EQ
(
nullptr
WinWindowOcclusionTracker
:
:
Get
(
)
)
;
}
void
SetNativeWindowBounds
(
HWND
aHWnd
const
LayoutDeviceIntRect
aBounds
)
{
RECT
wr
;
wr
.
left
=
aBounds
.
X
(
)
;
wr
.
top
=
aBounds
.
Y
(
)
;
wr
.
right
=
aBounds
.
XMost
(
)
;
wr
.
bottom
=
aBounds
.
YMost
(
)
;
:
:
AdjustWindowRectEx
(
&
wr
:
:
GetWindowLong
(
aHWnd
GWL_STYLE
)
FALSE
:
:
GetWindowLong
(
aHWnd
GWL_EXSTYLE
)
)
;
LayoutDeviceIntRect
windowBounds
(
wr
.
left
wr
.
top
wr
.
right
-
wr
.
left
wr
.
bottom
-
wr
.
top
)
;
if
(
aBounds
.
X
(
)
>
=
0
)
{
windowBounds
.
x
=
std
:
:
max
(
0
windowBounds
.
X
(
)
)
;
}
if
(
aBounds
.
Y
(
)
>
=
0
)
{
windowBounds
.
y
=
std
:
:
max
(
0
windowBounds
.
Y
(
)
)
;
}
:
:
SetWindowPos
(
aHWnd
HWND_TOP
windowBounds
.
X
(
)
windowBounds
.
Y
(
)
windowBounds
.
Width
(
)
windowBounds
.
Height
(
)
SWP_NOREPOSITION
)
;
EXPECT_TRUE
(
:
:
UpdateWindow
(
aHWnd
)
)
;
}
void
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
aBounds
)
{
mMockWinWidget
=
MockWinWidget
:
:
Create
(
WS_OVERLAPPEDWINDOW
|
WS_CLIPCHILDREN
0
aBounds
)
;
EXPECT_NE
(
nullptr
mMockWinWidget
.
get
(
)
)
;
HWND
hwnd
=
mMockWinWidget
-
>
GetWnd
(
)
;
SetNativeWindowBounds
(
hwnd
aBounds
)
;
HRGN
region
=
:
:
CreateRectRgn
(
0
0
0
0
)
;
EXPECT_NE
(
nullptr
region
)
;
if
(
:
:
GetWindowRgn
(
hwnd
region
)
=
=
COMPLEXREGION
)
{
RECT
boundingRect
;
EXPECT_TRUE
(
:
:
GetWindowRect
(
hwnd
&
boundingRect
)
)
;
HRGN
rectangularRegion
=
:
:
CreateRectRgnIndirect
(
&
boundingRect
)
;
EXPECT_NE
(
nullptr
rectangularRegion
)
;
:
:
SetWindowRgn
(
hwnd
rectangularRegion
TRUE
)
;
:
:
DeleteObject
(
rectangularRegion
)
;
}
:
:
DeleteObject
(
region
)
;
:
:
ShowWindow
(
hwnd
SW_SHOWNORMAL
)
;
EXPECT_TRUE
(
UpdateWindow
(
hwnd
)
)
;
}
RefPtr
<
MockWinWidget
>
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
aBounds
)
{
RefPtr
<
MockWinWidget
>
window
=
MockWinWidget
:
:
Create
(
WS_OVERLAPPEDWINDOW
|
WS_CLIPCHILDREN
0
aBounds
)
;
EXPECT_NE
(
nullptr
window
.
get
(
)
)
;
HWND
hwnd
=
window
-
>
GetWnd
(
)
;
:
:
ShowWindow
(
hwnd
SW_SHOWNORMAL
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
Enable
(
window
window
-
>
GetWnd
(
)
)
;
return
window
;
}
int
GetNumVisibleRootWindows
(
)
{
return
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
mNumVisibleRootWindows
;
}
void
OnDisplayStateChanged
(
bool
aDisplayOn
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
OnDisplayStateChanged
(
aDisplayOn
)
;
}
RefPtr
<
MockWinWidget
>
mMockWinWidget
;
}
;
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
SimpleOcclusion
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
PartialOcclusion
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
200
200
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
50
50
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
OffscreenOcclusion
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
int
screenLeft
=
:
:
GetSystemMetrics
(
SM_XVIRTUALSCREEN
)
;
:
:
SetWindowPos
(
window
-
>
GetWnd
(
)
HWND_TOP
screenLeft
-
50
0
100
100
SWP_NOZORDER
|
SWP_NOSIZE
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
screenLeft
0
50
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
SimpleVisible
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
200
0
100
100
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
SimpleHidden
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
200
0
100
100
)
)
;
:
:
CloseWindow
(
window
-
>
GetWnd
(
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
HIDDEN
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
OcclusionAfterVisibilityToggle
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
HIDDEN
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
OnWindowVisibilityChanged
(
window
false
)
;
:
:
CloseWindow
(
window
-
>
GetWnd
(
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
while
(
GetNumVisibleRootWindows
(
)
!
=
0
)
{
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
OnWindowVisibilityChanged
(
window
true
)
;
:
:
OpenIcon
(
window
-
>
GetWnd
(
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
LockScreenVisibleOcclusion
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
DWORD
currentSessionId
=
0
;
:
:
ProcessIdToSessionId
(
:
:
GetCurrentProcessId
(
)
&
currentSessionId
)
;
:
:
PostMessage
(
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
WM_WTSSESSION_CHANGE
WTS_SESSION_LOCK
currentSessionId
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
MSG
msg
;
bool
gotMessage
=
:
:
PeekMessageW
(
&
msg
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
0
0
PM_REMOVE
)
;
if
(
gotMessage
)
{
:
:
TranslateMessage
(
&
msg
)
;
:
:
DispatchMessageW
(
&
msg
)
;
}
NS_ProcessNextEvent
(
nullptr
false
)
;
PR_Sleep
(
PR_INTERVAL_NO_WAIT
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
LockScreenHiddenOcclusion
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
:
:
CloseWindow
(
window
-
>
GetWnd
(
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
HIDDEN
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
NotifyOcclusionState
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
HIDDEN
)
;
DWORD
currentSessionId
=
0
;
:
:
ProcessIdToSessionId
(
:
:
GetCurrentProcessId
(
)
&
currentSessionId
)
;
PostMessage
(
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
WM_WTSSESSION_CHANGE
WTS_SESSION_LOCK
currentSessionId
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
MSG
msg
;
bool
gotMessage
=
:
:
PeekMessageW
(
&
msg
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
0
0
PM_REMOVE
)
;
if
(
gotMessage
)
{
:
:
TranslateMessage
(
&
msg
)
;
:
:
DispatchMessageW
(
&
msg
)
;
}
NS_ProcessNextEvent
(
nullptr
false
)
;
PR_Sleep
(
PR_INTERVAL_NO_WAIT
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
LockScreenDifferentSession
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
200
200
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
NotifyOcclusionState
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
DWORD
currentSessionId
=
0
;
:
:
ProcessIdToSessionId
(
:
:
GetCurrentProcessId
(
)
&
currentSessionId
)
;
:
:
PostMessage
(
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
WM_WTSSESSION_CHANGE
WTS_SESSION_LOCK
currentSessionId
+
1
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
CreateNativeWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
50
50
)
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
MSG
msg
;
bool
gotMessage
=
:
:
PeekMessageW
(
&
msg
WinEventHub
:
:
Get
(
)
-
>
GetWnd
(
)
0
0
PM_REMOVE
)
;
if
(
gotMessage
)
{
:
:
TranslateMessage
(
&
msg
)
;
:
:
DispatchMessageW
(
&
msg
)
;
}
NS_ProcessNextEvent
(
nullptr
false
)
;
PR_Sleep
(
PR_INTERVAL_NO_WAIT
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerInteractiveTest
DisplayOnOffHandling
)
{
RefPtr
<
MockWinWidget
>
window
=
CreateTrackedWindowWithBounds
(
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
OCCLUDED
)
;
OnDisplayStateChanged
(
false
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
window
-
>
SetExpectation
(
widget
:
:
OcclusionState
:
:
VISIBLE
)
;
OnDisplayStateChanged
(
true
)
;
while
(
window
-
>
IsExpectingCall
(
)
)
{
WinWindowOcclusionTracker
:
:
Get
(
)
-
>
TriggerCalculation
(
)
;
NS_ProcessNextEvent
(
nullptr
true
)
;
}
EXPECT_FALSE
(
window
-
>
IsExpectingCall
(
)
)
;
}
