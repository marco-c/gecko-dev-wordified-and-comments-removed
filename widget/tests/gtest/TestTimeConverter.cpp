#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
SystemTimeConverter
.
h
"
using
mozilla
:
:
SystemTimeConverter
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
TimeStamp
;
namespace
{
template
<
typename
Time
>
class
MockCurrentTimeGetter
{
public
:
MockCurrentTimeGetter
(
)
:
mTime
(
0
)
{
}
explicit
MockCurrentTimeGetter
(
Time
aTime
)
:
mTime
(
aTime
)
{
}
Time
GetCurrentTime
(
)
const
{
return
mTime
;
}
void
GetTimeAsyncForPossibleBackwardsSkew
(
const
TimeStamp
&
aNow
)
{
}
private
:
Time
mTime
;
}
;
template
<
typename
Time
>
class
UnusedCurrentTimeGetter
{
public
:
Time
GetCurrentTime
(
)
const
{
EXPECT_TRUE
(
false
)
;
return
0
;
}
void
GetTimeAsyncForPossibleBackwardsSkew
(
const
TimeStamp
&
aNow
)
{
EXPECT_TRUE
(
false
)
;
}
}
;
class
MockTimeStamp
{
public
:
static
void
Init
(
)
{
sBaseline
=
TimeStamp
:
:
Now
(
)
;
sTimeStamp
=
sBaseline
;
}
static
void
Advance
(
double
ms
)
{
sTimeStamp
+
=
TimeDuration
:
:
FromMilliseconds
(
ms
)
;
}
static
TimeStamp
Baseline
(
)
{
return
sBaseline
;
}
static
TimeStamp
Now
(
)
{
return
sTimeStamp
;
}
private
:
static
TimeStamp
sTimeStamp
;
static
TimeStamp
sBaseline
;
}
;
TimeStamp
MockTimeStamp
:
:
sTimeStamp
;
TimeStamp
MockTimeStamp
:
:
sBaseline
;
using
GTestTime
=
uint32_t
;
using
TimeConverter
=
SystemTimeConverter
<
GTestTime
MockTimeStamp
>
;
}
#
define
EXPECT_TS
(
ts
ms
)
\
EXPECT_EQ
(
(
ts
)
-
MockTimeStamp
:
:
Baseline
(
)
TimeDuration
:
:
FromMilliseconds
(
ms
)
)
TEST
(
TimeConverter
SanityCheck
)
{
MockTimeStamp
:
:
Init
(
)
;
MockCurrentTimeGetter
timeGetter
(
10
)
;
UnusedCurrentTimeGetter
<
GTestTime
>
unused
;
TimeConverter
converter
;
TimeStamp
ts
=
converter
.
GetTimeStampFromSystemTime
(
10
timeGetter
)
;
EXPECT_TS
(
ts
0
)
;
MockTimeStamp
:
:
Advance
(
10
)
;
ts
=
converter
.
GetTimeStampFromSystemTime
(
10
unused
)
;
EXPECT_TS
(
ts
0
)
;
ts
=
converter
.
GetTimeStampFromSystemTime
(
30
unused
)
;
EXPECT_TS
(
ts
10
)
;
}
