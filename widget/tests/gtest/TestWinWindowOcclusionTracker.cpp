#
include
"
gtest
/
gtest
.
h
"
#
include
<
dwmapi
.
h
>
#
include
<
windows
.
h
>
#
include
"
MockWinWidget
.
h
"
#
include
"
mozilla
/
widget
/
WinWindowOcclusionTracker
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
class
WinWindowOcclusionTrackerTest
:
public
:
:
testing
:
:
Test
{
protected
:
HWND
CreateNativeWindow
(
DWORD
aStyle
DWORD
aExStyle
)
{
mMockWinWidget
=
MockWinWidget
:
:
Create
(
WS_OVERLAPPEDWINDOW
|
WS_CLIPCHILDREN
|
aStyle
aExStyle
LayoutDeviceIntRect
(
0
0
100
100
)
)
;
EXPECT_NE
(
nullptr
mMockWinWidget
.
get
(
)
)
;
HWND
hwnd
=
mMockWinWidget
-
>
GetWnd
(
)
;
HRGN
region
=
:
:
CreateRectRgn
(
0
0
0
0
)
;
EXPECT_NE
(
nullptr
region
)
;
if
(
:
:
GetWindowRgn
(
hwnd
region
)
=
=
COMPLEXREGION
)
{
RECT
boundingRect
;
EXPECT_TRUE
(
:
:
GetWindowRect
(
hwnd
&
boundingRect
)
)
;
HRGN
rectangularRegion
=
:
:
CreateRectRgnIndirect
(
&
boundingRect
)
;
EXPECT_NE
(
nullptr
rectangularRegion
)
;
:
:
SetWindowRgn
(
hwnd
rectangularRegion
TRUE
)
;
:
:
DeleteObject
(
rectangularRegion
)
;
}
:
:
DeleteObject
(
region
)
;
:
:
ShowWindow
(
hwnd
SW_SHOWNORMAL
)
;
EXPECT_TRUE
(
UpdateWindow
(
hwnd
)
)
;
return
hwnd
;
}
bool
CheckWindowVisibleAndFullyOpaque
(
HWND
aHWnd
LayoutDeviceIntRect
*
aWinRect
)
{
bool
ret
=
WinWindowOcclusionTracker
:
:
IsWindowVisibleAndFullyOpaque
(
aHWnd
aWinRect
)
;
if
(
!
ret
)
{
EXPECT_EQ
(
*
aWinRect
LayoutDeviceIntRect
(
0
0
0
0
)
)
;
}
return
ret
;
}
RefPtr
<
MockWinWidget
>
mMockWinWidget
;
}
;
TEST_F
(
WinWindowOcclusionTrackerTest
VisibleOpaqueWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
0
)
;
LayoutDeviceIntRect
returnedRect
;
EXPECT_TRUE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
returnedRect
)
)
;
RECT
winRect
;
ASSERT_TRUE
(
:
:
GetWindowRect
(
hwnd
&
winRect
)
)
;
EXPECT_EQ
(
returnedRect
LayoutDeviceIntRect
(
winRect
.
left
winRect
.
top
winRect
.
right
-
winRect
.
left
winRect
.
bottom
-
winRect
.
top
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
MinimizedWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
0
)
;
LayoutDeviceIntRect
winRect
;
:
:
ShowWindow
(
hwnd
SW_MINIMIZE
)
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
TransparentWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
WS_EX_TRANSPARENT
)
;
LayoutDeviceIntRect
winRect
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
ToolWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
WS_EX_TOOLWINDOW
)
;
LayoutDeviceIntRect
winRect
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
LayeredAlphaWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
WS_EX_LAYERED
)
;
LayoutDeviceIntRect
winRect
;
BYTE
alpha
=
1
;
DWORD
flags
=
LWA_ALPHA
;
COLORREF
colorRef
=
RGB
(
1
1
1
)
;
SetLayeredWindowAttributes
(
hwnd
colorRef
alpha
flags
)
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
UpdatedLayeredAlphaWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
WS_EX_LAYERED
)
;
LayoutDeviceIntRect
winRect
;
HDC
hdc
=
:
:
CreateCompatibleDC
(
nullptr
)
;
EXPECT_NE
(
nullptr
hdc
)
;
BLENDFUNCTION
blend
=
{
AC_SRC_OVER
0x00
0xFF
AC_SRC_ALPHA
}
;
:
:
UpdateLayeredWindow
(
hwnd
hdc
nullptr
nullptr
nullptr
nullptr
RGB
(
0xFF
0xFF
0xFF
)
&
blend
ULW_OPAQUE
)
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
:
:
DeleteDC
(
hdc
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
LayeredNonAlphaWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
WS_EX_LAYERED
)
;
LayoutDeviceIntRect
winRect
;
BYTE
alpha
=
1
;
DWORD
flags
=
0
;
COLORREF
colorRef
=
RGB
(
1
1
1
)
;
:
:
SetLayeredWindowAttributes
(
hwnd
colorRef
alpha
flags
)
;
EXPECT_TRUE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
ComplexRegionWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
0
0
)
;
LayoutDeviceIntRect
winRect
;
HRGN
region
=
CreateRoundRectRgn
(
1
1
100
100
5
5
)
;
EXPECT_NE
(
nullptr
region
)
;
:
:
SetWindowRgn
(
hwnd
region
TRUE
)
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
DeleteObject
(
region
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
PopupWindow
)
{
HWND
hwnd
=
CreateNativeWindow
(
WS_POPUP
0
)
;
LayoutDeviceIntRect
winRect
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
TEST_F
(
WinWindowOcclusionTrackerTest
CloakedWindow
)
{
if
(
!
IsWin8OrLater
(
)
)
{
return
;
}
HWND
hwnd
=
CreateNativeWindow
(
0
0
)
;
LayoutDeviceIntRect
winRect
;
BOOL
cloak
=
TRUE
;
:
:
DwmSetWindowAttribute
(
hwnd
DWMWA_CLOAK
&
cloak
sizeof
(
cloak
)
)
;
EXPECT_FALSE
(
CheckWindowVisibleAndFullyOpaque
(
hwnd
&
winRect
)
)
;
}
