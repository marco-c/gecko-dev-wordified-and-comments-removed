#
include
"
MockWinWidget
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
NS_IMPL_ISUPPORTS_INHERITED0
(
MockWinWidget
nsBaseWidget
)
RefPtr
<
MockWinWidget
>
MockWinWidget
:
:
Create
(
DWORD
aStyle
DWORD
aExStyle
const
LayoutDeviceIntRect
&
aRect
)
{
RefPtr
<
MockWinWidget
>
window
=
new
MockWinWidget
;
if
(
!
window
-
>
Initialize
(
aStyle
aExStyle
aRect
)
)
{
return
nullptr
;
}
return
window
;
}
MockWinWidget
:
:
MockWinWidget
(
)
{
}
MockWinWidget
:
:
~
MockWinWidget
(
)
{
if
(
mWnd
)
{
:
:
DestroyWindow
(
mWnd
)
;
mWnd
=
0
;
}
}
bool
MockWinWidget
:
:
Initialize
(
DWORD
aStyle
DWORD
aExStyle
const
LayoutDeviceIntRect
&
aRect
)
{
WNDCLASSW
wc
;
const
wchar_t
className
[
]
=
L
"
MozillaMockWinWidget
"
;
HMODULE
hSelf
=
:
:
GetModuleHandle
(
nullptr
)
;
if
(
!
GetClassInfoW
(
hSelf
className
&
wc
)
)
{
ZeroMemory
(
&
wc
sizeof
(
WNDCLASSW
)
)
;
wc
.
hInstance
=
hSelf
;
wc
.
lpfnWndProc
=
:
:
DefWindowProc
;
wc
.
lpszClassName
=
className
;
RegisterClassW
(
&
wc
)
;
}
mWnd
=
:
:
CreateWindowExW
(
aExStyle
className
className
aStyle
aRect
.
X
(
)
aRect
.
Y
(
)
aRect
.
Width
(
)
aRect
.
Height
(
)
nullptr
nullptr
hSelf
nullptr
)
;
if
(
!
mWnd
)
{
gfxCriticalNoteOnce
<
<
"
GetClientRect
failed
"
<
<
:
:
GetLastError
(
)
;
return
false
;
}
if
(
mWnd
&
&
(
aStyle
&
WS_CAPTION
)
)
{
:
:
SetWindowPos
(
mWnd
NULL
0
0
0
0
SWP_FRAMECHANGED
|
SWP_NOMOVE
|
SWP_NOSIZE
|
SWP_NOZORDER
|
SWP_NOACTIVATE
|
SWP_NOREDRAW
)
;
}
mBounds
=
aRect
;
return
true
;
}
void
MockWinWidget
:
:
NotifyOcclusionState
(
mozilla
:
:
widget
:
:
OcclusionState
aState
)
{
mCurrentState
=
aState
;
}
nsSizeMode
MockWinWidget
:
:
SizeMode
(
)
{
if
(
:
:
IsIconic
(
mWnd
)
)
{
return
nsSizeMode_Minimized
;
}
return
nsSizeMode_Normal
;
}
