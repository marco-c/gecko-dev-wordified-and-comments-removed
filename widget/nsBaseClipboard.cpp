#
include
"
nsBaseClipboard
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsIClipboardOwner
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsXPCOM
.
h
"
using
mozilla
:
:
LogLevel
;
nsBaseClipboard
:
:
nsBaseClipboard
(
)
:
mEmptyingForSetData
(
false
)
mIgnoreEmptyNotification
(
false
)
{
}
nsBaseClipboard
:
:
~
nsBaseClipboard
(
)
{
EmptyClipboard
(
kSelectionClipboard
)
;
EmptyClipboard
(
kGlobalClipboard
)
;
EmptyClipboard
(
kFindClipboard
)
;
}
NS_IMPL_ISUPPORTS
(
nsBaseClipboard
nsIClipboard
)
NS_IMETHODIMP
nsBaseClipboard
:
:
SetData
(
nsITransferable
*
aTransferable
nsIClipboardOwner
*
anOwner
int32_t
aWhichClipboard
)
{
NS_ASSERTION
(
aTransferable
"
clipboard
given
a
null
transferable
"
)
;
CLIPBOARD_LOG
(
"
%
s
"
__FUNCTION__
)
;
if
(
aTransferable
=
=
mTransferable
&
&
anOwner
=
=
mClipboardOwner
)
{
CLIPBOARD_LOG
(
"
%
s
:
skipping
update
.
"
__FUNCTION__
)
;
return
NS_OK
;
}
bool
selectClipPresent
;
SupportsSelectionClipboard
(
&
selectClipPresent
)
;
bool
findClipPresent
;
SupportsFindClipboard
(
&
findClipPresent
)
;
if
(
!
selectClipPresent
&
&
!
findClipPresent
&
&
aWhichClipboard
!
=
kGlobalClipboard
)
return
NS_ERROR_FAILURE
;
mEmptyingForSetData
=
true
;
if
(
NS_FAILED
(
EmptyClipboard
(
aWhichClipboard
)
)
)
{
CLIPBOARD_LOG
(
"
%
s
:
emptying
clipboard
failed
.
"
__FUNCTION__
)
;
}
mEmptyingForSetData
=
false
;
mClipboardOwner
=
anOwner
;
mTransferable
=
aTransferable
;
nsresult
rv
=
NS_ERROR_FAILURE
;
if
(
mTransferable
)
{
rv
=
SetNativeClipboardData
(
aWhichClipboard
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
CLIPBOARD_LOG
(
"
%
s
:
setting
native
clipboard
data
failed
.
"
__FUNCTION__
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsBaseClipboard
:
:
GetData
(
nsITransferable
*
aTransferable
int32_t
aWhichClipboard
)
{
NS_ASSERTION
(
aTransferable
"
clipboard
given
a
null
transferable
"
)
;
CLIPBOARD_LOG
(
"
%
s
"
__FUNCTION__
)
;
bool
selectClipPresent
;
SupportsSelectionClipboard
(
&
selectClipPresent
)
;
bool
findClipPresent
;
SupportsFindClipboard
(
&
findClipPresent
)
;
if
(
!
selectClipPresent
&
&
!
findClipPresent
&
&
aWhichClipboard
!
=
kGlobalClipboard
)
return
NS_ERROR_FAILURE
;
if
(
aTransferable
)
return
GetNativeClipboardData
(
aTransferable
aWhichClipboard
)
;
return
NS_ERROR_FAILURE
;
}
NS_IMETHODIMP
nsBaseClipboard
:
:
EmptyClipboard
(
int32_t
aWhichClipboard
)
{
CLIPBOARD_LOG
(
"
%
s
:
clipboard
=
%
i
"
__FUNCTION__
aWhichClipboard
)
;
bool
selectClipPresent
;
SupportsSelectionClipboard
(
&
selectClipPresent
)
;
bool
findClipPresent
;
SupportsFindClipboard
(
&
findClipPresent
)
;
if
(
!
selectClipPresent
&
&
!
findClipPresent
&
&
aWhichClipboard
!
=
kGlobalClipboard
)
return
NS_ERROR_FAILURE
;
if
(
mIgnoreEmptyNotification
)
return
NS_OK
;
if
(
mClipboardOwner
)
{
mClipboardOwner
-
>
LosingOwnership
(
mTransferable
)
;
mClipboardOwner
=
nullptr
;
}
mTransferable
=
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
nsBaseClipboard
:
:
HasDataMatchingFlavors
(
const
nsTArray
<
nsCString
>
&
aFlavorList
int32_t
aWhichClipboard
bool
*
outResult
)
{
*
outResult
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
nsBaseClipboard
:
:
SupportsSelectionClipboard
(
bool
*
_retval
)
{
*
_retval
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
nsBaseClipboard
:
:
SupportsFindClipboard
(
bool
*
_retval
)
{
*
_retval
=
false
;
return
NS_OK
;
}
