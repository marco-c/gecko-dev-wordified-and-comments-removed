#
ifndef
__nsXPLookAndFeel
#
define
__nsXPLookAndFeel
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
widget
/
LookAndFeelTypes
.
h
"
#
include
"
nsTArray
.
h
"
class
nsLookAndFeel
;
class
nsXPLookAndFeel
:
public
mozilla
:
:
LookAndFeel
{
public
:
using
FullLookAndFeel
=
mozilla
:
:
widget
:
:
FullLookAndFeel
;
using
LookAndFeelCache
=
mozilla
:
:
widget
:
:
LookAndFeelCache
;
using
LookAndFeelInt
=
mozilla
:
:
widget
:
:
LookAndFeelInt
;
using
LookAndFeelFont
=
mozilla
:
:
widget
:
:
LookAndFeelFont
;
using
LookAndFeelColor
=
mozilla
:
:
widget
:
:
LookAndFeelColor
;
using
LookAndFeelTheme
=
mozilla
:
:
widget
:
:
LookAndFeelTheme
;
virtual
~
nsXPLookAndFeel
(
)
;
static
nsXPLookAndFeel
*
GetInstance
(
)
;
static
void
Shutdown
(
)
;
void
Init
(
)
;
nsresult
GetColorValue
(
ColorID
aID
bool
aUseStandinsForNativeColors
nscolor
&
aResult
)
;
nsresult
GetIntValue
(
IntID
aID
int32_t
&
aResult
)
;
nsresult
GetFloatValue
(
FloatID
aID
float
&
aResult
)
;
bool
GetFontValue
(
FontID
aID
nsString
&
aName
gfxFontStyle
&
aStyle
)
;
virtual
nsresult
NativeGetInt
(
IntID
aID
int32_t
&
aResult
)
=
0
;
virtual
nsresult
NativeGetFloat
(
FloatID
aID
float
&
aResult
)
=
0
;
virtual
nsresult
NativeGetColor
(
ColorID
aID
nscolor
&
aResult
)
=
0
;
virtual
bool
NativeGetFont
(
FontID
aID
nsString
&
aName
gfxFontStyle
&
aStyle
)
=
0
;
virtual
void
RefreshImpl
(
)
;
virtual
char16_t
GetPasswordCharacterImpl
(
)
{
return
char16_t
(
'
*
'
)
;
}
virtual
bool
GetEchoPasswordImpl
(
)
{
return
false
;
}
virtual
uint32_t
GetPasswordMaskDelayImpl
(
)
{
return
600
;
}
static
bool
LookAndFeelFontToStyle
(
const
LookAndFeelFont
&
nsString
&
aName
gfxFontStyle
&
)
;
static
LookAndFeelFont
StyleToLookAndFeelFont
(
const
nsAString
&
aName
const
gfxFontStyle
&
)
;
virtual
LookAndFeelCache
GetCacheImpl
(
)
;
virtual
void
SetCacheImpl
(
const
LookAndFeelCache
&
aCache
)
{
}
virtual
void
SetDataImpl
(
FullLookAndFeel
&
&
aTables
)
{
}
virtual
void
NativeInit
(
)
=
0
;
virtual
void
WithThemeConfiguredForContent
(
const
std
:
:
function
<
void
(
const
LookAndFeelTheme
&
aTheme
)
>
&
aFn
)
{
aFn
(
LookAndFeelTheme
{
}
)
;
}
protected
:
nsXPLookAndFeel
(
)
=
default
;
static
nscolor
GetStandinForNativeColor
(
ColorID
)
;
void
RecordTelemetry
(
)
;
virtual
void
RecordLookAndFeelSpecificTelemetry
(
)
{
}
static
void
OnPrefChanged
(
const
char
*
aPref
void
*
aClosure
)
;
static
bool
sInitialized
;
static
nsXPLookAndFeel
*
sInstance
;
static
bool
sShutdown
;
}
;
#
endif
