#
ifndef
mozilla_PrintBackgroundTask_h_
#
define
mozilla_PrintBackgroundTask_h_
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
<
utility
>
#
include
<
tuple
>
namespace
mozilla
{
template
<
typename
T
typename
Result
>
void
ResolveOrReject
(
dom
:
:
Promise
&
aPromise
T
&
Result
&
aResult
)
{
aPromise
.
MaybeResolve
(
std
:
:
forward
<
Result
>
(
aResult
)
)
;
}
template
<
typename
T
typename
Result
typename
.
.
.
Args
>
using
PrintBackgroundTask
=
Result
(
T
:
:
*
)
(
Args
.
.
.
)
const
;
template
<
typename
T
typename
Result
typename
.
.
.
Args
>
void
SpawnPrintBackgroundTask
(
T
&
aReceiver
dom
:
:
Promise
&
aPromise
PrintBackgroundTask
<
T
Result
Args
.
.
.
>
aBackgroundTask
Args
.
.
.
aArgs
)
{
auto
promiseHolder
=
MakeRefPtr
<
nsMainThreadPtrHolder
<
dom
:
:
Promise
>
>
(
"
nsPrinterBase
:
:
SpawnBackgroundTaskPromise
"
&
aPromise
)
;
auto
holder
=
MakeRefPtr
<
nsMainThreadPtrHolder
<
T
>
>
(
"
nsPrinterBase
:
:
SpawnBackgroundTaskPrinter
"
&
aReceiver
false
)
;
NS_DispatchBackgroundTask
(
NS_NewRunnableFunction
(
"
SpawnPrintBackgroundTask
"
[
holder
=
std
:
:
move
(
holder
)
promiseHolder
=
std
:
:
move
(
promiseHolder
)
aBackgroundTask
aArgs
=
std
:
:
make_tuple
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
]
{
Result
result
=
std
:
:
apply
(
[
&
]
(
auto
&
&
.
.
.
args
)
{
return
(
holder
-
>
get
(
)
-
>
*
aBackgroundTask
)
(
args
.
.
.
)
;
}
std
:
:
move
(
aArgs
)
)
;
NS_DispatchToMainThread
(
NS_NewRunnableFunction
(
"
SpawnPrintBackgroundTaskResolution
"
[
holder
=
std
:
:
move
(
holder
)
promiseHolder
=
std
:
:
move
(
promiseHolder
)
result
=
std
:
:
move
(
result
)
]
{
ResolveOrReject
(
*
promiseHolder
-
>
get
(
)
*
holder
-
>
get
(
)
result
)
;
}
)
)
;
}
)
)
;
}
template
<
typename
T
typename
Result
typename
.
.
.
Args
>
nsresult
PrintBackgroundTaskPromise
(
T
&
aReceiver
JSContext
*
aCx
dom
:
:
Promise
*
*
aResultPromise
PrintBackgroundTask
<
T
Result
Args
.
.
.
>
aTask
Args
.
.
.
aArgs
)
{
ErrorResult
rv
;
RefPtr
<
dom
:
:
Promise
>
promise
=
dom
:
:
Promise
:
:
Create
(
xpc
:
:
CurrentNativeGlobal
(
aCx
)
rv
)
;
if
(
MOZ_UNLIKELY
(
rv
.
Failed
(
)
)
)
{
return
rv
.
StealNSResult
(
)
;
}
SpawnPrintBackgroundTask
(
aReceiver
*
promise
aTask
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
promise
.
forget
(
aResultPromise
)
;
return
NS_OK
;
}
template
<
typename
T
typename
Result
typename
.
.
.
Args
>
nsresult
AsyncPromiseAttributeGetter
(
T
&
aReceiver
RefPtr
<
dom
:
:
Promise
>
&
aPromiseSlot
JSContext
*
aCx
dom
:
:
Promise
*
*
aResultPromise
PrintBackgroundTask
<
T
Result
Args
.
.
.
>
aTask
Args
.
.
.
aArgs
)
{
if
(
RefPtr
<
dom
:
:
Promise
>
existing
=
aPromiseSlot
)
{
existing
.
forget
(
aResultPromise
)
;
return
NS_OK
;
}
nsresult
rv
=
PrintBackgroundTaskPromise
(
aReceiver
aCx
aResultPromise
aTask
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aPromiseSlot
=
*
aResultPromise
;
return
NS_OK
;
}
}
#
endif
