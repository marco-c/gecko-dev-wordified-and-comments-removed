#
ifndef
mozilla_widget_TouchResampler_h
#
define
mozilla_widget_TouchResampler_h
#
include
<
queue
>
#
include
<
unordered_map
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
InputData
.
h
"
namespace
mozilla
{
namespace
widget
{
class
TouchResampler
final
{
public
:
uint64_t
ProcessEvent
(
MultiTouchInput
&
&
aInput
)
;
void
NotifyFrame
(
const
TimeStamp
&
aTimeStamp
)
;
bool
InTouchingState
(
)
const
{
return
mCurrentTouches
.
HasTouch
(
)
;
}
struct
OutgoingEvent
{
MultiTouchInput
mEvent
;
Maybe
<
uint64_t
>
mEventId
;
}
;
std
:
:
queue
<
OutgoingEvent
>
ConsumeOutgoingEvents
(
)
{
return
std
:
:
move
(
mOutgoingEvents
)
;
}
private
:
void
EmitEvent
(
MultiTouchInput
&
&
aInput
uint64_t
aEventId
)
{
mLastEmittedEventTime
=
aInput
.
mTimeStamp
;
mOutgoingEvents
.
push
(
OutgoingEvent
{
std
:
:
move
(
aInput
)
Some
(
aEventId
)
}
)
;
}
void
EmitExtraEvent
(
MultiTouchInput
&
&
aInput
)
{
mLastEmittedEventTime
=
aInput
.
mTimeStamp
;
mOutgoingEvents
.
push
(
OutgoingEvent
{
std
:
:
move
(
aInput
)
Nothing
(
)
}
)
;
}
void
FlushDeferredTouchMoveEventsUnresampled
(
)
;
void
ReturnToNonResampledState
(
)
;
void
PrependLeftoverHistoricalData
(
MultiTouchInput
*
aInput
)
;
struct
DataPoint
{
TimeStamp
mTimeStamp
;
ScreenIntPoint
mPosition
;
}
;
struct
TouchInfo
{
void
Update
(
const
SingleTouchData
&
aTouch
const
TimeStamp
&
aEventTime
)
;
ScreenIntPoint
ResampleAtTime
(
const
ScreenIntPoint
&
aLastObservedPosition
const
TimeStamp
&
aTimeStamp
)
;
int32_t
mIdentifier
=
0
;
Maybe
<
DataPoint
>
mBaseDataPoint
;
Maybe
<
DataPoint
>
mLatestDataPoint
;
}
;
struct
CurrentTouches
{
void
UpdateFromEvent
(
const
MultiTouchInput
&
aInput
)
;
bool
HasTouch
(
)
const
{
return
!
mTouches
.
IsEmpty
(
)
;
}
TimeStamp
LatestDataPointTime
(
)
{
return
mLatestDataPointTime
;
}
ScreenIntPoint
ResampleTouchPositionAtTime
(
int32_t
aIdentifier
const
ScreenIntPoint
&
aLastObservedPosition
const
TimeStamp
&
aTimeStamp
)
;
void
ClearDataPoints
(
)
{
for
(
auto
&
touch
:
mTouches
)
{
touch
.
mBaseDataPoint
=
Nothing
(
)
;
touch
.
mLatestDataPoint
=
Nothing
(
)
;
}
}
private
:
nsTArray
<
TouchInfo
>
:
:
iterator
TouchByIdentifier
(
int32_t
aIdentifier
)
;
nsTArray
<
TouchInfo
>
mTouches
;
TimeStamp
mLatestDataPointTime
;
}
;
CurrentTouches
mCurrentTouches
;
std
:
:
queue
<
std
:
:
pair
<
MultiTouchInput
uint64_t
>
>
mDeferredTouchMoveEvents
;
std
:
:
unordered_map
<
int32_t
nsTArray
<
SingleTouchData
:
:
HistoricalTouchData
>
>
mRemainingTouchData
;
Maybe
<
MultiTouchInput
>
mOriginalOfResampledTouchMove
;
std
:
:
queue
<
OutgoingEvent
>
mOutgoingEvents
;
TimeStamp
mLastEmittedEventTime
;
uint64_t
mNextEventId
=
0
;
bool
mInResampledState
=
false
;
}
;
}
}
#
endif
