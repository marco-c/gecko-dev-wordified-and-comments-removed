using
mozilla
:
:
LookAndFeel
:
:
IntID
from
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
;
using
mozilla
:
:
LookAndFeel
:
:
ColorID
from
"
mozilla
/
widget
/
WidgetMessageUtils
.
h
"
;
using
nscolor
from
"
nsColor
.
h
"
;
namespace
mozilla
{
namespace
widget
{
struct
LookAndFeelInt
{
IntID
id
;
int32_t
value
;
}
;
comparable
struct
LookAndFeelFont
{
bool
haveFont
;
nsString
name
;
float
size
;
float
weight
;
bool
italic
;
}
;
struct
LookAndFeelColor
{
ColorID
id
;
nscolor
color
;
}
;
struct
LookAndFeelCache
{
LookAndFeelInt
[
]
mInts
;
LookAndFeelFont
[
]
mFonts
;
LookAndFeelColor
[
]
mColors
;
}
;
struct
LookAndFeelTables
{
int32_t
[
]
ints
;
float
[
]
floats
;
nscolor
[
]
colors
;
LookAndFeelFont
[
]
fonts
;
uint8_t
[
]
intMap
;
uint8_t
[
]
floatMap
;
uint8_t
[
]
colorMap
;
uint8_t
[
]
fontMap
;
uint16_t
passwordChar
;
bool
passwordEcho
;
}
;
struct
LookAndFeelTheme
{
#
ifdef
MOZ_WIDGET_GTK
nsCString
themeName
;
bool
preferDarkTheme
;
#
endif
}
;
struct
FullLookAndFeel
{
LookAndFeelTables
tables
;
#
ifdef
MOZ_WIDGET_GTK
LookAndFeelTheme
theme
;
#
endif
}
;
union
LookAndFeelData
{
LookAndFeelCache
;
FullLookAndFeel
;
}
;
}
}
