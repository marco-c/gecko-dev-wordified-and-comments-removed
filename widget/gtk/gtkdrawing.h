#
ifndef
_GTK_DRAWING_H_
#
define
_GTK_DRAWING_H_
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gtk
/
gtk
.
h
>
#
include
<
algorithm
>
#
include
"
mozilla
/
Span
.
h
"
typedef
struct
{
guint8
active
;
guint8
focused
;
guint8
selected
;
guint8
inHover
;
guint8
disabled
;
guint8
isDefault
;
guint8
canDefault
;
guint8
depressed
;
guint8
backdrop
;
gint32
curpos
;
gint32
maxpos
;
gint32
image_scale
;
}
GtkWidgetState
;
struct
MozGtkSize
{
gint
width
;
gint
height
;
MozGtkSize
&
operator
+
=
(
const
GtkBorder
&
aBorder
)
{
width
+
=
aBorder
.
left
+
aBorder
.
right
;
height
+
=
aBorder
.
top
+
aBorder
.
bottom
;
return
*
this
;
}
MozGtkSize
operator
+
(
const
GtkBorder
&
aBorder
)
const
{
MozGtkSize
result
=
*
this
;
return
result
+
=
aBorder
;
}
bool
operator
<
(
const
MozGtkSize
&
aOther
)
const
{
return
(
width
<
aOther
.
width
&
&
height
<
=
aOther
.
height
)
|
|
(
width
<
=
aOther
.
width
&
&
height
<
aOther
.
height
)
;
}
void
Include
(
MozGtkSize
aOther
)
{
width
=
std
:
:
max
(
width
aOther
.
width
)
;
height
=
std
:
:
max
(
height
aOther
.
height
)
;
}
void
Rotate
(
)
{
gint
tmp
=
width
;
width
=
height
;
height
=
tmp
;
}
}
;
struct
ToolbarButtonGTKMetrics
{
MozGtkSize
minSizeWithBorder
{
}
;
gint
iconXPosition
=
0
;
gint
iconYPosition
=
0
;
}
;
#
define
TOOLBAR_BUTTONS
3
struct
ToolbarGTKMetrics
{
bool
initialized
=
false
;
gint
inlineSpacing
=
0
;
ToolbarButtonGTKMetrics
button
[
TOOLBAR_BUTTONS
]
;
}
;
struct
CSDWindowDecorationSize
{
bool
initialized
;
GtkBorder
decorationSize
;
}
;
enum
GtkTabFlags
{
MOZ_GTK_TAB_MARGIN_MASK
=
0xFF
MOZ_GTK_TAB_FIRST
=
1
<
<
9
MOZ_GTK_TAB_SELECTED
=
1
<
<
10
}
;
#
define
MOZ_GTK_SUCCESS
0
#
define
MOZ_GTK_UNKNOWN_WIDGET
-
1
#
define
MOZ_GTK_UNSAFE_THEME
-
2
#
define
MOZ_GTK_WIDGET_CHECKED
1
#
define
MOZ_GTK_WIDGET_INCONSISTENT
(
1
<
<
1
)
enum
WidgetNodeType
:
int
{
MOZ_GTK_BUTTON
MOZ_GTK_SCROLLBAR_VERTICAL
MOZ_GTK_SCROLLBAR_CONTENTS_VERTICAL
MOZ_GTK_SCROLLBAR_TROUGH_VERTICAL
MOZ_GTK_SCROLLBAR_THUMB_VERTICAL
MOZ_GTK_EXPANDER
MOZ_GTK_TEXT_VIEW
MOZ_GTK_TEXT_VIEW_TEXT
MOZ_GTK_TEXT_VIEW_TEXT_SELECTION
MOZ_GTK_TOOLTIP
MOZ_GTK_TOOLTIP_BOX
MOZ_GTK_TOOLTIP_BOX_LABEL
MOZ_GTK_FRAME
MOZ_GTK_FRAME_BORDER
MOZ_GTK_RESIZER
MOZ_GTK_NOTEBOOK
MOZ_GTK_NOTEBOOK_HEADER
MOZ_GTK_TAB_TOP
MOZ_GTK_TAB_BOTTOM
MOZ_GTK_TABPANELS
MOZ_GTK_TREEVIEW
MOZ_GTK_TREEVIEW_VIEW
MOZ_GTK_TREE_HEADER_CELL
MOZ_GTK_MENUPOPUP
MOZ_GTK_MENUBAR
MOZ_GTK_TOOLBARBUTTON_ARROW
MOZ_GTK_MENUITEM
MOZ_GTK_MENUBARITEM
MOZ_GTK_SPLITTER_HORIZONTAL
MOZ_GTK_SPLITTER_VERTICAL
MOZ_GTK_SPLITTER_SEPARATOR_HORIZONTAL
MOZ_GTK_SPLITTER_SEPARATOR_VERTICAL
MOZ_GTK_WINDOW
MOZ_GTK_HEADERBAR_WINDOW
MOZ_GTK_HEADERBAR_WINDOW_MAXIMIZED
MOZ_GTK_HEADERBAR_FIXED
MOZ_GTK_HEADERBAR_FIXED_MAXIMIZED
MOZ_GTK_WINDOW_CONTAINER
MOZ_GTK_SCROLLED_WINDOW
MOZ_GTK_HEADER_BAR
MOZ_GTK_HEADER_BAR_MAXIMIZED
MOZ_GTK_HEADER_BAR_BUTTON_CLOSE
MOZ_GTK_HEADER_BAR_BUTTON_MINIMIZE
MOZ_GTK_HEADER_BAR_BUTTON_MAXIMIZE
MOZ_GTK_HEADER_BAR_BUTTON_MAXIMIZE_RESTORE
MOZ_GTK_WINDOW_DECORATION
MOZ_GTK_WINDOW_DECORATION_SOLID
MOZ_GTK_WIDGET_NODE_COUNT
}
;
struct
ButtonLayout
{
WidgetNodeType
mType
;
}
;
gint
moz_gtk_init
(
)
;
void
moz_gtk_refresh
(
)
;
gint
moz_gtk_shutdown
(
)
;
gint
moz_gtk_widget_paint
(
WidgetNodeType
widget
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
gint
flags
GtkTextDirection
direction
)
;
gint
moz_gtk_get_widget_border
(
WidgetNodeType
widget
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
GtkTextDirection
direction
)
;
gint
moz_gtk_get_tab_border
(
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
GtkTextDirection
direction
GtkTabFlags
flags
WidgetNodeType
widget
)
;
gint
moz_gtk_button_get_default_overflow
(
gint
*
border_top
gint
*
border_left
gint
*
border_bottom
gint
*
border_right
)
;
void
moz_gtk_get_scale_metrics
(
GtkOrientation
orient
gint
*
scale_width
gint
*
scale_height
)
;
gint
moz_gtk_get_scalethumb_metrics
(
GtkOrientation
orient
gint
*
thumb_length
gint
*
thumb_height
)
;
gint
moz_gtk_get_tab_scroll_arrow_size
(
gint
*
width
gint
*
height
)
;
void
moz_gtk_get_entry_min_height
(
gint
*
min_content_height
gint
*
border_padding_height
)
;
gint
moz_gtk_get_toolbar_separator_width
(
gint
*
size
)
;
gint
moz_gtk_splitter_get_metrics
(
gint
orientation
gint
*
size
)
;
gint
moz_gtk_get_tab_thickness
(
WidgetNodeType
aNodeType
)
;
const
ToolbarButtonGTKMetrics
*
GetToolbarButtonMetrics
(
WidgetNodeType
aAppearance
)
;
gint
moz_gtk_get_titlebar_button_spacing
(
)
;
size_t
GetGtkHeaderBarButtonLayout
(
mozilla
:
:
Span
<
ButtonLayout
>
bool
*
aReversedButtonsPlacement
)
;
#
endif
