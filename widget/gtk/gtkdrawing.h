#
ifndef
_GTK_DRAWING_H_
#
define
_GTK_DRAWING_H_
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gtk
/
gtk
.
h
>
#
include
<
algorithm
>
struct
MozGtkSize
{
gint
width
;
gint
height
;
MozGtkSize
&
operator
+
=
(
const
GtkBorder
&
aBorder
)
{
width
+
=
aBorder
.
left
+
aBorder
.
right
;
height
+
=
aBorder
.
top
+
aBorder
.
bottom
;
return
*
this
;
}
MozGtkSize
operator
+
(
const
GtkBorder
&
aBorder
)
const
{
MozGtkSize
result
=
*
this
;
return
result
+
=
aBorder
;
}
bool
operator
<
(
const
MozGtkSize
&
aOther
)
const
{
return
(
width
<
aOther
.
width
&
&
height
<
=
aOther
.
height
)
|
|
(
width
<
=
aOther
.
width
&
&
height
<
aOther
.
height
)
;
}
void
Include
(
MozGtkSize
aOther
)
{
width
=
std
:
:
max
(
width
aOther
.
width
)
;
height
=
std
:
:
max
(
height
aOther
.
height
)
;
}
void
Rotate
(
)
{
gint
tmp
=
width
;
width
=
height
;
height
=
tmp
;
}
}
;
#
define
MOZ_GTK_SUCCESS
0
#
define
MOZ_GTK_UNKNOWN_WIDGET
-
1
enum
WidgetNodeType
:
int
{
MOZ_GTK_BUTTON
MOZ_GTK_SCROLLBAR_VERTICAL
MOZ_GTK_SCROLLBAR_CONTENTS_VERTICAL
MOZ_GTK_SCROLLBAR_TROUGH_VERTICAL
MOZ_GTK_SCROLLBAR_THUMB_VERTICAL
MOZ_GTK_TEXT_VIEW
MOZ_GTK_TEXT_VIEW_TEXT
MOZ_GTK_TEXT_VIEW_TEXT_SELECTION
MOZ_GTK_TOOLTIP
MOZ_GTK_TOOLTIP_BOX
MOZ_GTK_TOOLTIP_BOX_LABEL
MOZ_GTK_FRAME
MOZ_GTK_FRAME_BORDER
MOZ_GTK_TREEVIEW
MOZ_GTK_TREE_HEADER_CELL
MOZ_GTK_MENUPOPUP
MOZ_GTK_MENUBAR
MOZ_GTK_MENUITEM
MOZ_GTK_MENUBARITEM
MOZ_GTK_WINDOW
MOZ_GTK_HEADERBAR_FIXED
MOZ_GTK_WINDOW_CONTAINER
MOZ_GTK_SCROLLED_WINDOW
MOZ_GTK_HEADER_BAR
MOZ_GTK_WINDOW_DECORATION
MOZ_GTK_WIDGET_NODE_COUNT
}
;
void
moz_gtk_init
(
)
;
void
moz_gtk_refresh
(
)
;
void
moz_gtk_shutdown
(
)
;
struct
GtkDrawingParams
{
WidgetNodeType
widget
;
GdkRectangle
rect
{
}
;
GtkStateFlags
state
=
GTK_STATE_FLAG_NORMAL
;
gint
image_scale
=
1
;
}
;
void
moz_gtk_widget_paint
(
cairo_t
*
cr
const
GtkDrawingParams
*
aParams
)
;
#
endif
