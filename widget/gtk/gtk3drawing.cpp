#
include
<
gtk
/
gtk
.
h
>
#
include
<
gdk
/
gdkprivate
.
h
>
#
include
<
string
.
h
>
#
include
"
gdk
/
gdk
.
h
"
#
include
"
gtkdrawing
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
WidgetStyleCache
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
WidgetUtilsGtk
.
h
"
#
include
<
math
.
h
>
#
include
<
dlfcn
.
h
>
#
if
0
static
void
style_path_print
(
GtkStyleContext
*
context
)
{
const
GtkWidgetPath
*
path
=
gtk_style_context_get_path
(
context
)
;
static
auto
sGtkWidgetPathToStringPtr
=
(
char
*
(
*
)
(
const
GtkWidgetPath
*
)
)
dlsym
(
RTLD_DEFAULT
"
gtk_widget_path_to_string
"
)
;
fprintf
(
stderr
"
Style
path
:
\
n
%
s
\
n
\
n
"
sGtkWidgetPathToStringPtr
(
path
)
)
;
}
#
endif
void
moz_gtk_init
(
)
{
moz_gtk_refresh
(
)
;
}
void
moz_gtk_refresh
(
)
{
ResetWidgetCache
(
)
;
}
static
void
moz_gtk_window_decoration_paint
(
cairo_t
*
cr
const
GtkDrawingParams
&
aParams
)
{
if
(
mozilla
:
:
widget
:
:
GdkIsWaylandDisplay
(
)
)
{
return
;
}
GtkStyleContext
*
decorationStyle
=
GetStyleContext
(
MOZ_GTK_WINDOW_DECORATION
aParams
.
image_scale
aParams
.
state
)
;
const
auto
&
rect
=
aParams
.
rect
;
gtk_render_background
(
decorationStyle
cr
rect
.
x
rect
.
y
rect
.
width
rect
.
height
)
;
gtk_render_frame
(
decorationStyle
cr
rect
.
x
rect
.
y
rect
.
width
rect
.
height
)
;
}
void
moz_gtk_widget_paint
(
cairo_t
*
cr
const
GtkDrawingParams
*
aParams
)
{
cairo_new_path
(
cr
)
;
switch
(
aParams
-
>
widget
)
{
case
MOZ_GTK_WINDOW_DECORATION
:
return
moz_gtk_window_decoration_paint
(
cr
*
aParams
)
;
default
:
g_warning
(
"
Unknown
widget
type
:
%
d
"
aParams
-
>
widget
)
;
return
;
}
}
void
moz_gtk_shutdown
(
)
{
ResetWidgetCache
(
)
;
}
