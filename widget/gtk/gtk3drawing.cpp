#
include
<
gtk
/
gtk
.
h
>
#
include
<
gdk
/
gdkprivate
.
h
>
#
include
<
string
.
h
>
#
include
"
gdk
/
gdk
.
h
"
#
include
"
gtkdrawing
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
WidgetStyleCache
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
WidgetUtilsGtk
.
h
"
#
include
<
math
.
h
>
#
include
<
dlfcn
.
h
>
static
gboolean
checkbox_check_state
;
static
gboolean
notebook_has_tab_gap
;
static
ToolbarGTKMetrics
sToolbarMetrics
;
using
mozilla
:
:
Span
;
#
define
ARROW_UP
0
#
define
ARROW_DOWN
G_PI
#
define
ARROW_RIGHT
G_PI_2
#
define
ARROW_LEFT
(
G_PI
+
G_PI_2
)
#
if
0
static
void
style_path_print
(
GtkStyleContext
*
context
)
{
const
GtkWidgetPath
*
path
=
gtk_style_context_get_path
(
context
)
;
static
auto
sGtkWidgetPathToStringPtr
=
(
char
*
(
*
)
(
const
GtkWidgetPath
*
)
)
dlsym
(
RTLD_DEFAULT
"
gtk_widget_path_to_string
"
)
;
fprintf
(
stderr
"
Style
path
:
\
n
%
s
\
n
\
n
"
sGtkWidgetPathToStringPtr
(
path
)
)
;
}
#
endif
static
gint
moz_gtk_get_tab_thickness
(
GtkStyleContext
*
style
)
;
static
void
moz_gtk_add_style_border
(
GtkStyleContext
*
style
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
)
{
GtkBorder
border
;
gtk_style_context_get_border
(
style
gtk_style_context_get_state
(
style
)
&
border
)
;
*
left
+
=
border
.
left
;
*
right
+
=
border
.
right
;
*
top
+
=
border
.
top
;
*
bottom
+
=
border
.
bottom
;
}
static
void
moz_gtk_add_style_padding
(
GtkStyleContext
*
style
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
)
{
GtkBorder
padding
;
gtk_style_context_get_padding
(
style
gtk_style_context_get_state
(
style
)
&
padding
)
;
*
left
+
=
padding
.
left
;
*
right
+
=
padding
.
right
;
*
top
+
=
padding
.
top
;
*
bottom
+
=
padding
.
bottom
;
}
static
GtkStateFlags
GetStateFlagsFromGtkWidgetState
(
GtkWidgetState
*
state
)
{
GtkStateFlags
stateFlags
=
GTK_STATE_FLAG_NORMAL
;
if
(
state
-
>
disabled
)
stateFlags
=
GTK_STATE_FLAG_INSENSITIVE
;
else
{
if
(
state
-
>
depressed
|
|
state
-
>
active
)
stateFlags
=
static_cast
<
GtkStateFlags
>
(
stateFlags
|
GTK_STATE_FLAG_ACTIVE
)
;
if
(
state
-
>
inHover
)
stateFlags
=
static_cast
<
GtkStateFlags
>
(
stateFlags
|
GTK_STATE_FLAG_PRELIGHT
)
;
if
(
state
-
>
focused
)
stateFlags
=
static_cast
<
GtkStateFlags
>
(
stateFlags
|
GTK_STATE_FLAG_FOCUSED
)
;
if
(
state
-
>
backdrop
)
stateFlags
=
static_cast
<
GtkStateFlags
>
(
stateFlags
|
GTK_STATE_FLAG_BACKDROP
)
;
}
return
stateFlags
;
}
static
GtkStateFlags
GetStateFlagsFromGtkTabFlags
(
GtkTabFlags
flags
)
{
return
(
(
flags
&
MOZ_GTK_TAB_SELECTED
)
=
=
0
)
?
GTK_STATE_FLAG_NORMAL
:
GTK_STATE_FLAG_ACTIVE
;
}
gint
moz_gtk_init
(
)
{
if
(
gtk_major_version
>
3
|
|
(
gtk_major_version
=
=
3
&
&
gtk_minor_version
>
=
14
)
)
checkbox_check_state
=
GTK_STATE_FLAG_CHECKED
;
else
checkbox_check_state
=
GTK_STATE_FLAG_ACTIVE
;
moz_gtk_refresh
(
)
;
return
MOZ_GTK_SUCCESS
;
}
void
moz_gtk_refresh
(
)
{
if
(
gtk_check_version
(
3
20
0
)
!
=
nullptr
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
MOZ_GTK_TAB_TOP
)
;
gtk_style_context_get_style
(
style
"
has
-
tab
-
gap
"
&
notebook_has_tab_gap
NULL
)
;
}
else
{
notebook_has_tab_gap
=
true
;
}
sToolbarMetrics
.
initialized
=
false
;
ResetWidgetCache
(
)
;
}
size_t
GetGtkHeaderBarButtonLayout
(
Span
<
ButtonLayout
>
aButtonLayout
bool
*
aReversedButtonsPlacement
)
{
gchar
*
decorationLayoutSetting
=
nullptr
;
GtkSettings
*
settings
=
gtk_settings_get_default
(
)
;
g_object_get
(
settings
"
gtk
-
decoration
-
layout
"
&
decorationLayoutSetting
nullptr
)
;
auto
free
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
g_free
(
decorationLayoutSetting
)
;
}
)
;
const
gchar
*
decorationLayout
=
"
menu
:
minimize
maximize
close
"
;
if
(
decorationLayoutSetting
)
{
decorationLayout
=
decorationLayoutSetting
;
}
if
(
aReversedButtonsPlacement
)
{
const
char
*
closeButton
=
strstr
(
decorationLayout
"
close
"
)
;
const
char
*
separator
=
strchr
(
decorationLayout
'
:
'
)
;
*
aReversedButtonsPlacement
=
closeButton
&
&
separator
&
&
closeButton
<
separator
;
}
if
(
aButtonLayout
.
IsEmpty
(
)
)
{
return
0
;
}
nsDependentCSubstring
layout
(
decorationLayout
strlen
(
decorationLayout
)
)
;
size_t
activeButtons
=
0
;
for
(
const
auto
&
part
:
layout
.
Split
(
'
:
'
)
)
{
for
(
const
auto
&
button
:
part
.
Split
(
'
'
)
)
{
if
(
button
.
EqualsLiteral
(
"
close
"
)
)
{
aButtonLayout
[
activeButtons
+
+
]
=
{
ButtonLayout
:
:
Type
:
:
Close
}
;
}
else
if
(
button
.
EqualsLiteral
(
"
minimize
"
)
)
{
aButtonLayout
[
activeButtons
+
+
]
=
{
ButtonLayout
:
:
Type
:
:
Minimize
}
;
}
else
if
(
button
.
EqualsLiteral
(
"
maximize
"
)
)
{
aButtonLayout
[
activeButtons
+
+
]
=
{
ButtonLayout
:
:
Type
:
:
Maximize
}
;
}
if
(
activeButtons
=
=
aButtonLayout
.
Length
(
)
)
{
return
activeButtons
;
}
}
}
return
activeButtons
;
}
static
void
EnsureToolbarMetrics
(
)
{
if
(
sToolbarMetrics
.
initialized
)
{
return
;
}
sToolbarMetrics
=
{
}
;
gint
spacing
=
6
;
g_object_get
(
GetWidget
(
MOZ_GTK_HEADER_BAR
)
"
spacing
"
&
spacing
nullptr
)
;
sToolbarMetrics
.
inlineSpacing
+
=
spacing
;
sToolbarMetrics
.
initialized
=
true
;
}
gint
moz_gtk_get_titlebar_button_spacing
(
)
{
EnsureToolbarMetrics
(
)
;
return
sToolbarMetrics
.
inlineSpacing
;
}
static
gint
moz_gtk_window_decoration_paint
(
cairo_t
*
cr
const
GdkRectangle
*
rect
GtkWidgetState
*
state
GtkTextDirection
direction
)
{
if
(
mozilla
:
:
widget
:
:
GdkIsWaylandDisplay
(
)
)
{
return
MOZ_GTK_SUCCESS
;
}
GtkStateFlags
state_flags
=
GetStateFlagsFromGtkWidgetState
(
state
)
;
GtkStyleContext
*
windowStyle
=
GetStyleContext
(
MOZ_GTK_HEADERBAR_WINDOW
state
-
>
image_scale
)
;
const
bool
solidDecorations
=
gtk_style_context_has_class
(
windowStyle
"
solid
-
csd
"
)
;
GtkStyleContext
*
decorationStyle
=
GetStyleContext
(
solidDecorations
?
MOZ_GTK_WINDOW_DECORATION_SOLID
:
MOZ_GTK_WINDOW_DECORATION
state
-
>
image_scale
GTK_TEXT_DIR_LTR
state_flags
)
;
gtk_render_background
(
decorationStyle
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
)
;
gtk_render_frame
(
decorationStyle
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
)
;
return
MOZ_GTK_SUCCESS
;
}
static
gint
moz_gtk_resizer_paint
(
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
GtkTextDirection
direction
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
MOZ_GTK_RESIZER
state
-
>
image_scale
GTK_TEXT_DIR_LTR
GetStateFlagsFromGtkWidgetState
(
state
)
)
;
cairo_save
(
cr
)
;
if
(
direction
=
=
GTK_TEXT_DIR_RTL
)
{
cairo_matrix_t
mat
;
cairo_matrix_init_translate
(
&
mat
2
*
rect
-
>
x
+
rect
-
>
width
0
)
;
cairo_matrix_scale
(
&
mat
-
1
1
)
;
cairo_transform
(
cr
&
mat
)
;
}
gtk_render_handle
(
style
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
)
;
cairo_restore
(
cr
)
;
return
MOZ_GTK_SUCCESS
;
}
static
gint
moz_gtk_frame_paint
(
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
GtkTextDirection
direction
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
MOZ_GTK_FRAME
state
-
>
image_scale
direction
)
;
gtk_render_frame
(
style
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
)
;
return
MOZ_GTK_SUCCESS
;
}
static
gint
moz_gtk_get_tab_thickness
(
GtkStyleContext
*
style
)
{
if
(
!
notebook_has_tab_gap
)
return
0
;
GtkBorder
border
;
gtk_style_context_get_border
(
style
gtk_style_context_get_state
(
style
)
&
border
)
;
if
(
border
.
top
<
2
)
return
2
;
return
border
.
top
;
}
gint
moz_gtk_get_tab_thickness
(
WidgetNodeType
aNodeType
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
aNodeType
)
;
int
thickness
=
moz_gtk_get_tab_thickness
(
style
)
;
return
thickness
;
}
static
gint
moz_gtk_tab_paint
(
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
GtkTabFlags
flags
GtkTextDirection
direction
WidgetNodeType
widget
)
{
GtkStyleContext
*
style
;
GdkRectangle
tabRect
;
GdkRectangle
focusRect
;
GdkRectangle
backRect
;
int
initial_gap
=
0
;
bool
isBottomTab
=
(
widget
=
=
MOZ_GTK_TAB_BOTTOM
)
;
style
=
GetStyleContext
(
widget
state
-
>
image_scale
direction
GetStateFlagsFromGtkTabFlags
(
flags
)
)
;
tabRect
=
*
rect
;
if
(
flags
&
MOZ_GTK_TAB_FIRST
)
{
gtk_style_context_get_style
(
style
"
initial
-
gap
"
&
initial_gap
NULL
)
;
tabRect
.
width
-
=
initial_gap
;
if
(
direction
!
=
GTK_TEXT_DIR_RTL
)
{
tabRect
.
x
+
=
initial_gap
;
}
}
focusRect
=
backRect
=
tabRect
;
if
(
notebook_has_tab_gap
)
{
if
(
(
flags
&
MOZ_GTK_TAB_SELECTED
)
=
=
0
)
{
gtk_render_extension
(
style
cr
tabRect
.
x
tabRect
.
y
tabRect
.
width
tabRect
.
height
isBottomTab
?
GTK_POS_TOP
:
GTK_POS_BOTTOM
)
;
}
else
{
gint
gap_loffset
gap_roffset
gap_voffset
gap_height
;
gap_height
=
moz_gtk_get_tab_thickness
(
style
)
;
gap_voffset
=
flags
&
MOZ_GTK_TAB_MARGIN_MASK
;
if
(
gap_voffset
>
gap_height
)
gap_voffset
=
gap_height
;
gap_loffset
=
gap_roffset
=
20
;
if
(
flags
&
MOZ_GTK_TAB_FIRST
)
{
if
(
direction
=
=
GTK_TEXT_DIR_RTL
)
gap_roffset
=
initial_gap
;
else
gap_loffset
=
initial_gap
;
}
GtkStyleContext
*
panelStyle
=
GetStyleContext
(
MOZ_GTK_TABPANELS
state
-
>
image_scale
direction
)
;
if
(
isBottomTab
)
{
focusRect
.
y
+
=
gap_voffset
;
focusRect
.
height
-
=
gap_voffset
;
gtk_render_extension
(
style
cr
tabRect
.
x
tabRect
.
y
+
gap_voffset
tabRect
.
width
tabRect
.
height
-
gap_voffset
GTK_POS_TOP
)
;
backRect
.
y
+
=
(
gap_voffset
-
gap_height
)
;
backRect
.
height
=
gap_height
;
gtk_render_background
(
panelStyle
cr
backRect
.
x
backRect
.
y
backRect
.
width
backRect
.
height
)
;
cairo_save
(
cr
)
;
cairo_rectangle
(
cr
backRect
.
x
backRect
.
y
backRect
.
width
backRect
.
height
)
;
cairo_clip
(
cr
)
;
gtk_render_frame_gap
(
panelStyle
cr
tabRect
.
x
-
gap_loffset
tabRect
.
y
+
gap_voffset
-
3
*
gap_height
tabRect
.
width
+
gap_loffset
+
gap_roffset
3
*
gap_height
GTK_POS_BOTTOM
gap_loffset
gap_loffset
+
tabRect
.
width
)
;
cairo_restore
(
cr
)
;
}
else
{
focusRect
.
height
-
=
gap_voffset
;
gtk_render_extension
(
style
cr
tabRect
.
x
tabRect
.
y
tabRect
.
width
tabRect
.
height
-
gap_voffset
GTK_POS_BOTTOM
)
;
backRect
.
y
+
=
(
tabRect
.
height
-
gap_voffset
)
;
backRect
.
height
=
gap_height
;
gtk_render_background
(
panelStyle
cr
backRect
.
x
backRect
.
y
backRect
.
width
backRect
.
height
)
;
cairo_save
(
cr
)
;
cairo_rectangle
(
cr
backRect
.
x
backRect
.
y
backRect
.
width
backRect
.
height
)
;
cairo_clip
(
cr
)
;
gtk_render_frame_gap
(
panelStyle
cr
tabRect
.
x
-
gap_loffset
tabRect
.
y
+
tabRect
.
height
-
gap_voffset
tabRect
.
width
+
gap_loffset
+
gap_roffset
3
*
gap_height
GTK_POS_TOP
gap_loffset
gap_loffset
+
tabRect
.
width
)
;
cairo_restore
(
cr
)
;
}
}
}
else
{
gtk_render_background
(
style
cr
tabRect
.
x
tabRect
.
y
tabRect
.
width
tabRect
.
height
)
;
gtk_render_frame
(
style
cr
tabRect
.
x
tabRect
.
y
tabRect
.
width
tabRect
.
height
)
;
}
if
(
state
-
>
focused
)
{
GtkBorder
padding
;
gtk_style_context_get_padding
(
style
GetStateFlagsFromGtkWidgetState
(
state
)
&
padding
)
;
focusRect
.
x
+
=
padding
.
left
;
focusRect
.
width
-
=
(
padding
.
left
+
padding
.
right
)
;
focusRect
.
y
+
=
padding
.
top
;
focusRect
.
height
-
=
(
padding
.
top
+
padding
.
bottom
)
;
gtk_render_focus
(
style
cr
focusRect
.
x
focusRect
.
y
focusRect
.
width
focusRect
.
height
)
;
}
return
MOZ_GTK_SUCCESS
;
}
static
gint
moz_gtk_tabpanels_paint
(
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
GtkTextDirection
direction
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
MOZ_GTK_TABPANELS
state
-
>
image_scale
direction
)
;
gtk_render_background
(
style
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
)
;
cairo_save
(
cr
)
;
cairo_rectangle
(
cr
rect
-
>
x
rect
-
>
y
rect
-
>
x
+
rect
-
>
width
/
2
rect
-
>
y
+
rect
-
>
height
)
;
cairo_clip
(
cr
)
;
gtk_render_frame_gap
(
style
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
GTK_POS_TOP
rect
-
>
width
-
1
rect
-
>
width
)
;
cairo_restore
(
cr
)
;
cairo_save
(
cr
)
;
cairo_rectangle
(
cr
rect
-
>
x
+
rect
-
>
width
/
2
rect
-
>
y
rect
-
>
x
+
rect
-
>
width
rect
-
>
y
+
rect
-
>
height
)
;
cairo_clip
(
cr
)
;
gtk_render_frame_gap
(
style
cr
rect
-
>
x
rect
-
>
y
rect
-
>
width
rect
-
>
height
GTK_POS_TOP
0
1
)
;
cairo_restore
(
cr
)
;
return
MOZ_GTK_SUCCESS
;
}
gint
moz_gtk_get_widget_border
(
WidgetNodeType
widget
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
GtkTextDirection
direction
)
{
GtkWidget
*
w
=
nullptr
;
*
left
=
*
top
=
*
right
=
*
bottom
=
0
;
switch
(
widget
)
{
case
MOZ_GTK_TABPANELS
:
w
=
GetWidget
(
MOZ_GTK_TABPANELS
)
;
break
;
case
MOZ_GTK_FRAME
:
w
=
GetWidget
(
MOZ_GTK_FRAME
)
;
break
;
case
MOZ_GTK_HEADER_BAR
:
case
MOZ_GTK_HEADER_BAR_MAXIMIZED
:
case
MOZ_GTK_WINDOW_DECORATION
:
case
MOZ_GTK_WINDOW_DECORATION_SOLID
:
case
MOZ_GTK_RESIZER
:
case
MOZ_GTK_TOOLBARBUTTON_ARROW
:
return
MOZ_GTK_SUCCESS
;
default
:
g_warning
(
"
Unsupported
widget
type
:
%
d
"
widget
)
;
return
MOZ_GTK_UNKNOWN_WIDGET
;
}
if
(
w
)
{
moz_gtk_add_style_border
(
gtk_widget_get_style_context
(
w
)
left
top
right
bottom
)
;
}
return
MOZ_GTK_SUCCESS
;
}
gint
moz_gtk_get_tab_border
(
gint
*
left
gint
*
top
gint
*
right
gint
*
bottom
GtkTextDirection
direction
GtkTabFlags
flags
WidgetNodeType
widget
)
{
GtkStyleContext
*
style
=
GetStyleContext
(
widget
1
direction
GetStateFlagsFromGtkTabFlags
(
flags
)
)
;
*
left
=
*
top
=
*
right
=
*
bottom
=
0
;
moz_gtk_add_style_padding
(
style
left
top
right
bottom
)
;
if
(
gtk_check_version
(
3
20
0
)
!
=
nullptr
)
{
int
tab_curvature
;
gtk_style_context_get_style
(
style
"
tab
-
curvature
"
&
tab_curvature
NULL
)
;
*
left
+
=
tab_curvature
;
*
right
+
=
tab_curvature
;
if
(
flags
&
MOZ_GTK_TAB_FIRST
)
{
int
initial_gap
=
0
;
gtk_style_context_get_style
(
style
"
initial
-
gap
"
&
initial_gap
NULL
)
;
if
(
direction
=
=
GTK_TEXT_DIR_RTL
)
*
right
+
=
initial_gap
;
else
*
left
+
=
initial_gap
;
}
}
else
{
GtkBorder
margin
;
gtk_style_context_get_margin
(
style
gtk_style_context_get_state
(
style
)
&
margin
)
;
*
left
+
=
margin
.
left
;
*
right
+
=
margin
.
right
;
if
(
flags
&
MOZ_GTK_TAB_FIRST
)
{
style
=
GetStyleContext
(
MOZ_GTK_NOTEBOOK_HEADER
direction
)
;
gtk_style_context_get_margin
(
style
gtk_style_context_get_state
(
style
)
&
margin
)
;
*
left
+
=
margin
.
left
;
*
right
+
=
margin
.
right
;
}
}
return
MOZ_GTK_SUCCESS
;
}
gint
moz_gtk_get_tab_scroll_arrow_size
(
gint
*
width
gint
*
height
)
{
gint
arrow_size
;
GtkStyleContext
*
style
=
GetStyleContext
(
MOZ_GTK_TABPANELS
)
;
gtk_style_context_get_style
(
style
"
scroll
-
arrow
-
hlength
"
&
arrow_size
NULL
)
;
*
height
=
*
width
=
arrow_size
;
return
MOZ_GTK_SUCCESS
;
}
gint
moz_gtk_widget_paint
(
WidgetNodeType
widget
cairo_t
*
cr
GdkRectangle
*
rect
GtkWidgetState
*
state
gint
flags
GtkTextDirection
direction
)
{
cairo_new_path
(
cr
)
;
switch
(
widget
)
{
case
MOZ_GTK_FRAME
:
return
moz_gtk_frame_paint
(
cr
rect
state
direction
)
;
case
MOZ_GTK_RESIZER
:
return
moz_gtk_resizer_paint
(
cr
rect
state
direction
)
;
case
MOZ_GTK_TAB_TOP
:
case
MOZ_GTK_TAB_BOTTOM
:
return
moz_gtk_tab_paint
(
cr
rect
state
(
GtkTabFlags
)
flags
direction
widget
)
;
case
MOZ_GTK_TABPANELS
:
return
moz_gtk_tabpanels_paint
(
cr
rect
state
direction
)
;
case
MOZ_GTK_WINDOW_DECORATION
:
return
moz_gtk_window_decoration_paint
(
cr
rect
state
direction
)
;
default
:
g_warning
(
"
Unknown
widget
type
:
%
d
"
widget
)
;
}
return
MOZ_GTK_UNKNOWN_WIDGET
;
}
gint
moz_gtk_shutdown
(
)
{
ResetWidgetCache
(
)
;
return
MOZ_GTK_SUCCESS
;
}
