#
ifndef
__nsClipboard_h_
#
define
__nsClipboard_h_
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIBinaryOutputStream
.
h
"
#
include
<
gtk
/
gtk
.
h
>
#
define
GTK_DEFAULT_MIME_TEXT
"
UTF8_STRING
"
class
nsRetrievalContext
{
public
:
virtual
guchar
*
WaitForClipboardContext
(
const
char
*
aMimeType
int32_t
aWhichClipboard
uint32_t
*
aContentLength
)
=
0
;
virtual
GdkAtom
*
GetTargets
(
int32_t
aWhichClipboard
int
*
aTargetNum
)
=
0
;
nsRetrievalContext
(
)
{
}
;
virtual
~
nsRetrievalContext
(
)
{
}
;
protected
:
static
const
int
kClipboardTimeout
;
}
;
class
nsClipboard
:
public
nsIClipboard
public
nsIObserver
{
public
:
nsClipboard
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSICLIPBOARD
nsresult
Init
(
void
)
;
void
SelectionGetEvent
(
GtkClipboard
*
aGtkClipboard
GtkSelectionData
*
aSelectionData
)
;
void
SelectionClearEvent
(
GtkClipboard
*
aGtkClipboard
)
;
private
:
virtual
~
nsClipboard
(
)
;
nsresult
Store
(
void
)
;
nsITransferable
*
GetTransferable
(
int32_t
aWhichClipboard
)
;
nsCOMPtr
<
nsIClipboardOwner
>
mSelectionOwner
;
nsCOMPtr
<
nsIClipboardOwner
>
mGlobalOwner
;
nsCOMPtr
<
nsITransferable
>
mSelectionTransferable
;
nsCOMPtr
<
nsITransferable
>
mGlobalTransferable
;
nsAutoPtr
<
nsRetrievalContext
>
mContext
;
}
;
GdkAtom
GetSelectionAtom
(
int32_t
aWhichClipboard
)
;
#
endif
