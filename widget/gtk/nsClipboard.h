#
ifndef
__nsClipboard_h_
#
define
__nsClipboard_h_
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
<
gtk
/
gtk
.
h
>
#
ifdef
MOZ_LOGGING
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
extern
mozilla
:
:
LazyLogModule
gClipboardLog
;
#
define
LOGCLIP
(
.
.
.
)
\
MOZ_LOG
(
gClipboardLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
else
#
define
LOGCLIP
(
.
.
.
)
#
endif
enum
ClipboardDataType
{
CLIPBOARD_DATA
CLIPBOARD_TEXT
CLIPBOARD_TARGETS
}
;
class
nsRetrievalContext
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
nsRetrievalContext
)
virtual
const
char
*
GetClipboardData
(
const
char
*
aMimeType
int32_t
aWhichClipboard
uint32_t
*
aContentLength
)
=
0
;
virtual
const
char
*
GetClipboardText
(
int32_t
aWhichClipboard
)
=
0
;
virtual
void
ReleaseClipboardData
(
const
char
*
aClipboardData
)
=
0
;
GdkAtom
*
GetTargets
(
int32_t
aWhichClipboard
int
*
aTargetNum
)
;
virtual
GdkAtom
*
GetTargetsImpl
(
int32_t
aWhichClipboard
int
*
aTargetNum
)
=
0
;
virtual
bool
HasSelectionSupport
(
void
)
=
0
;
void
ClipboardOwnerChanged
(
)
;
void
PrimaryOwnerChanged
(
)
;
GdkAtom
*
GetStoredTargets
(
int32_t
aWhichClipboard
int
*
aTargetNum
)
;
void
StoreTargets
(
int32_t
aWhichClipboard
GdkAtom
*
aTargets
int
aTargetNum
)
;
nsRetrievalContext
(
)
;
protected
:
virtual
~
nsRetrievalContext
(
)
;
private
:
GdkAtom
*
mTargets
=
nullptr
;
int
mTargetNum
=
0
;
GdkAtom
*
mTargetsPrimary
=
nullptr
;
int
mTargetPrimaryNum
=
0
;
}
;
class
nsClipboard
:
public
nsIClipboard
public
nsIObserver
{
public
:
nsClipboard
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSICLIPBOARD
nsresult
Init
(
void
)
;
void
SelectionGetEvent
(
GtkClipboard
*
aGtkClipboard
GtkSelectionData
*
aSelectionData
)
;
void
SelectionClearEvent
(
GtkClipboard
*
aGtkClipboard
)
;
private
:
virtual
~
nsClipboard
(
)
;
nsITransferable
*
GetTransferable
(
int32_t
aWhichClipboard
)
;
void
SetTransferableData
(
nsITransferable
*
aTransferable
nsCString
&
aFlavor
const
char
*
aClipboardData
uint32_t
aClipboardDataLength
)
;
void
ClearTransferable
(
int32_t
aWhichClipboard
)
;
bool
FilterImportedFlavors
(
int32_t
aWhichClipboard
nsTArray
<
nsCString
>
&
aFlavors
)
;
nsCOMPtr
<
nsIClipboardOwner
>
mSelectionOwner
;
nsCOMPtr
<
nsIClipboardOwner
>
mGlobalOwner
;
nsCOMPtr
<
nsITransferable
>
mSelectionTransferable
;
nsCOMPtr
<
nsITransferable
>
mGlobalTransferable
;
RefPtr
<
nsRetrievalContext
>
mContext
;
}
;
extern
const
int
kClipboardTimeout
;
extern
const
int
kClipboardFastIterationNum
;
GdkAtom
GetSelectionAtom
(
int32_t
aWhichClipboard
)
;
int
GetGeckoClipboardType
(
GtkClipboard
*
aGtkClipboard
)
;
#
endif
