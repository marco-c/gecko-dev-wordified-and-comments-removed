#
include
"
GtkCompositorWidget
.
h
"
#
include
"
gfxPlatformGtk
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
widget
/
InProcessCompositorWidget
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
nsWindow
.
h
"
namespace
mozilla
{
namespace
widget
{
GtkCompositorWidget
:
:
GtkCompositorWidget
(
const
GtkCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsWindow
*
aWindow
)
:
CompositorWidget
(
aOptions
)
mWidget
(
aWindow
)
{
if
(
aWindow
)
{
mXDisplay
=
aWindow
-
>
XDisplay
(
)
;
}
else
{
mXDisplay
=
XOpenDisplay
(
aInitData
.
XDisplayString
(
)
.
get
(
)
)
;
}
#
ifdef
MOZ_WAYLAND
if
(
!
mXDisplay
)
{
MOZ_RELEASE_ASSERT
(
aWindow
"
We
'
re
running
on
Wayland
and
but
without
valid
nsWindow
.
"
)
;
mProvider
.
Initialize
(
aWindow
)
;
}
else
#
endif
{
mXWindow
=
(
Window
)
aInitData
.
XWindow
(
)
;
XWindowAttributes
windowAttrs
;
XGetWindowAttributes
(
mXDisplay
mXWindow
&
windowAttrs
)
;
Visual
*
visual
=
windowAttrs
.
visual
;
int
depth
=
windowAttrs
.
depth
;
mProvider
.
Initialize
(
mXDisplay
mXWindow
visual
depth
)
;
}
mClientSize
=
aInitData
.
InitialClientSize
(
)
;
}
GtkCompositorWidget
:
:
~
GtkCompositorWidget
(
)
{
mProvider
.
CleanupResources
(
)
;
if
(
!
mWidget
&
&
mXDisplay
)
{
XCloseDisplay
(
mXDisplay
)
;
mXDisplay
=
nullptr
;
}
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
GtkCompositorWidget
:
:
StartRemoteDrawing
(
)
{
return
nullptr
;
}
void
GtkCompositorWidget
:
:
EndRemoteDrawing
(
)
{
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
GtkCompositorWidget
:
:
StartRemoteDrawingInRegion
(
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
{
return
mProvider
.
StartRemoteDrawingInRegion
(
aInvalidRegion
aBufferMode
)
;
}
void
GtkCompositorWidget
:
:
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
mProvider
.
EndRemoteDrawingInRegion
(
aDrawTarget
aInvalidRegion
)
;
}
nsIWidget
*
GtkCompositorWidget
:
:
RealWidget
(
)
{
return
mWidget
;
}
void
GtkCompositorWidget
:
:
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
{
mClientSize
=
aClientSize
;
}
LayoutDeviceIntSize
GtkCompositorWidget
:
:
GetClientSize
(
)
{
return
mClientSize
;
}
uintptr_t
GtkCompositorWidget
:
:
GetWidgetKey
(
)
{
return
reinterpret_cast
<
uintptr_t
>
(
mWidget
)
;
}
}
}
