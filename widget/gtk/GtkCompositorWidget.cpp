#
include
"
GtkCompositorWidget
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
widget
/
InProcessCompositorWidget
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
#
include
"
nsWindow
.
h
"
#
ifdef
MOZ_X11
#
include
"
mozilla
/
X11Util
.
h
"
#
endif
#
ifdef
MOZ_WAYLAND
#
include
"
mozilla
/
layers
/
NativeLayerWayland
.
h
"
#
endif
namespace
mozilla
{
namespace
widget
{
GtkCompositorWidget
:
:
GtkCompositorWidget
(
const
GtkCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsWindow
*
aWindow
)
:
CompositorWidget
(
aOptions
)
mWidget
(
aWindow
)
mClientSize
(
"
GtkCompositorWidget
:
:
mClientSize
"
)
{
#
if
defined
(
MOZ_WAYLAND
)
if
(
GdkIsWaylandDisplay
(
)
)
{
if
(
!
aWindow
)
{
NS_WARNING
(
"
GtkCompositorWidget
:
We
'
re
missing
nsWindow
!
"
)
;
}
mProvider
.
Initialize
(
aWindow
)
;
}
#
endif
#
if
defined
(
MOZ_X11
)
if
(
GdkIsX11Display
(
)
)
{
mXWindow
=
(
Window
)
aInitData
.
XWindow
(
)
;
XWindowAttributes
windowAttrs
;
if
(
!
XGetWindowAttributes
(
DefaultXDisplay
(
)
mXWindow
&
windowAttrs
)
)
{
NS_WARNING
(
"
GtkCompositorWidget
(
)
:
XGetWindowAttributes
(
)
failed
!
"
)
;
}
Visual
*
visual
=
windowAttrs
.
visual
;
int
depth
=
windowAttrs
.
depth
;
mProvider
.
Initialize
(
mXWindow
visual
depth
aInitData
.
Shaped
(
)
)
;
}
#
endif
auto
size
=
mClientSize
.
Lock
(
)
;
*
size
=
aInitData
.
InitialClientSize
(
)
;
}
GtkCompositorWidget
:
:
~
GtkCompositorWidget
(
)
{
mProvider
.
CleanupResources
(
)
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
GtkCompositorWidget
:
:
StartRemoteDrawing
(
)
{
return
nullptr
;
}
void
GtkCompositorWidget
:
:
EndRemoteDrawing
(
)
{
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
GtkCompositorWidget
:
:
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
{
return
mProvider
.
StartRemoteDrawingInRegion
(
aInvalidRegion
aBufferMode
)
;
}
void
GtkCompositorWidget
:
:
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
mProvider
.
EndRemoteDrawingInRegion
(
aDrawTarget
aInvalidRegion
)
;
}
nsIWidget
*
GtkCompositorWidget
:
:
RealWidget
(
)
{
return
mWidget
;
}
void
GtkCompositorWidget
:
:
NotifyClientSizeChanged
(
const
LayoutDeviceIntSize
&
aClientSize
)
{
auto
size
=
mClientSize
.
Lock
(
)
;
*
size
=
aClientSize
;
}
LayoutDeviceIntSize
GtkCompositorWidget
:
:
GetClientSize
(
)
{
auto
size
=
mClientSize
.
Lock
(
)
;
return
*
size
;
}
uintptr_t
GtkCompositorWidget
:
:
GetWidgetKey
(
)
{
return
reinterpret_cast
<
uintptr_t
>
(
mWidget
)
;
}
EGLNativeWindowType
GtkCompositorWidget
:
:
GetEGLNativeWindow
(
)
{
if
(
mWidget
)
{
return
(
EGLNativeWindowType
)
mWidget
-
>
GetNativeData
(
NS_NATIVE_EGL_WINDOW
)
;
}
#
if
defined
(
MOZ_X11
)
if
(
mXWindow
)
{
return
(
EGLNativeWindowType
)
mXWindow
;
}
#
endif
return
nullptr
;
}
#
if
defined
(
MOZ_WAYLAND
)
void
GtkCompositorWidget
:
:
SetEGLNativeWindowSize
(
const
LayoutDeviceIntSize
&
aEGLWindowSize
)
{
if
(
mWidget
)
{
mWidget
-
>
SetEGLNativeWindowSize
(
aEGLWindowSize
)
;
}
}
#
endif
LayoutDeviceIntRegion
GtkCompositorWidget
:
:
GetTransparentRegion
(
)
{
if
(
!
mWidget
|
|
mWidget
-
>
IsPopup
(
)
)
{
return
LayoutDeviceIntRect
(
LayoutDeviceIntPoint
(
0
0
)
GetClientSize
(
)
)
;
}
return
mWidget
-
>
GetTitlebarRect
(
)
;
}
#
ifdef
MOZ_WAYLAND
RefPtr
<
mozilla
:
:
layers
:
:
NativeLayerRoot
>
GtkCompositorWidget
:
:
GetNativeLayerRoot
(
)
{
if
(
gfx
:
:
gfxVars
:
:
UseWebRenderCompositor
(
)
)
{
if
(
!
mNativeLayerRoot
)
{
MOZ_ASSERT
(
mWidget
&
&
mWidget
-
>
GetMozContainer
(
)
)
;
mNativeLayerRoot
=
NativeLayerRootWayland
:
:
CreateForMozContainer
(
mWidget
-
>
GetMozContainer
(
)
)
;
}
return
mNativeLayerRoot
;
}
return
nullptr
;
}
#
endif
}
}
