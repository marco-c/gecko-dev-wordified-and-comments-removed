#
ifndef
__nsGdkKeyUtils_h__
#
define
__nsGdkKeyUtils_h__
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
gdk
/
gdk
.
h
>
#
ifdef
MOZ_X11
#
include
<
X11
/
XKBlib
.
h
>
#
endif
#
ifdef
MOZ_WAYLAND
#
include
<
gdk
/
gdkwayland
.
h
>
#
include
<
xkbcommon
/
xkbcommon
.
h
>
#
endif
#
include
"
X11UndefineNone
.
h
"
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
KeymapWrapper
{
public
:
static
uint32_t
ComputeDOMKeyCode
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
static
KeyNameIndex
ComputeDOMKeyNameIndex
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
static
CodeNameIndex
ComputeDOMCodeNameIndex
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
enum
MappedModifier
{
NOT_MODIFIER
=
0x0000
CAPS_LOCK
=
0x0001
NUM_LOCK
=
0x0002
SCROLL_LOCK
=
0x0004
SHIFT
=
0x0008
CTRL
=
0x0010
ALT
=
0x0020
META
=
0x0040
SUPER
=
0x0080
HYPER
=
0x0100
LEVEL3
=
0x0200
LEVEL5
=
0x0400
}
;
typedef
uint32_t
MappedModifiers
;
static
guint
GetCurrentModifierState
(
)
;
static
uint32_t
ComputeCurrentKeyModifiers
(
)
;
static
uint32_t
ComputeKeyModifiers
(
guint
aGdkModifierState
)
;
static
guint
ConvertWidgetModifierToGdkState
(
nsIWidget
:
:
Modifiers
aNativeModifiers
)
;
static
void
InitInputEvent
(
WidgetInputEvent
&
aInputEvent
guint
aGdkModifierState
)
;
static
void
InitKeyEvent
(
WidgetKeyboardEvent
&
aKeyEvent
GdkEventKey
*
aGdkKeyEvent
bool
aIsProcessedByIME
)
;
static
bool
DispatchKeyDownOrKeyUpEvent
(
nsWindow
*
aWindow
GdkEventKey
*
aGdkKeyEvent
bool
aIsProcessedByIME
bool
*
aIsCancelled
)
;
static
bool
DispatchKeyDownOrKeyUpEvent
(
nsWindow
*
aWindow
WidgetKeyboardEvent
&
aKeyboardEvent
bool
*
aIsCancelled
)
;
static
void
HandleKeyPressEvent
(
nsWindow
*
aWindow
GdkEventKey
*
aGdkKeyEvent
)
;
static
bool
HandleKeyReleaseEvent
(
nsWindow
*
aWindow
GdkEventKey
*
aGdkKeyEvent
)
;
static
void
WillDispatchKeyboardEvent
(
WidgetKeyboardEvent
&
aKeyEvent
GdkEventKey
*
aGdkKeyEvent
)
;
#
ifdef
MOZ_WAYLAND
static
void
SetModifierMasks
(
xkb_keymap
*
aKeymap
)
;
static
void
SetFocusIn
(
wl_surface
*
aFocusSurface
uint32_t
aFocusSerial
)
;
static
void
SetFocusOut
(
wl_surface
*
aFocusSurface
)
;
static
void
GetFocusInfo
(
wl_surface
*
*
aFocusSurface
uint32_t
*
aFocusSerial
)
;
static
void
SetSeat
(
wl_seat
*
aSeat
int
aId
)
;
static
void
ClearSeat
(
int
aId
)
;
static
wl_seat
*
GetSeat
(
)
;
static
void
SetKeyboard
(
wl_keyboard
*
aKeyboard
)
;
static
wl_keyboard
*
GetKeyboard
(
)
;
static
void
ClearKeyboard
(
)
;
static
void
EnsureInstance
(
)
;
#
endif
static
void
ResetKeyboard
(
)
;
static
void
Shutdown
(
)
;
private
:
static
KeymapWrapper
*
GetInstance
(
)
;
KeymapWrapper
(
)
;
~
KeymapWrapper
(
)
;
bool
mInitialized
;
void
Init
(
)
;
#
ifdef
MOZ_X11
void
InitXKBExtension
(
)
;
void
InitBySystemSettingsX11
(
)
;
#
endif
#
ifdef
MOZ_WAYLAND
void
InitBySystemSettingsWayland
(
)
;
#
endif
struct
ModifierKey
{
guint
mHardwareKeycode
;
guint
mMask
;
explicit
ModifierKey
(
guint
aHardwareKeycode
)
:
mHardwareKeycode
(
aHardwareKeycode
)
mMask
(
0
)
{
}
}
;
nsTArray
<
ModifierKey
>
mModifierKeys
;
ModifierKey
*
GetModifierKey
(
guint
aHardwareKeycode
)
;
enum
ModifierIndex
{
INDEX_NUM_LOCK
INDEX_SCROLL_LOCK
INDEX_ALT
INDEX_META
INDEX_SUPER
INDEX_HYPER
INDEX_LEVEL3
INDEX_LEVEL5
COUNT_OF_MODIFIER_INDEX
}
;
guint
mModifierMasks
[
COUNT_OF_MODIFIER_INDEX
]
;
guint
GetGdkModifierMask
(
MappedModifier
aModifier
)
const
;
static
MappedModifier
GetModifierForGDKKeyval
(
guint
aGdkKeyval
)
;
static
const
char
*
GetModifierName
(
MappedModifier
aModifier
)
;
static
bool
AreModifiersActive
(
MappedModifiers
aModifiers
guint
aGdkModifierState
)
;
GdkKeymap
*
mGdkKeymap
;
int
mXKBBaseEventCode
;
#
ifdef
MOZ_X11
XKeyboardState
mKeyboardState
;
#
endif
static
KeymapWrapper
*
sInstance
;
static
guint
sLastRepeatableHardwareKeyCode
;
#
ifdef
MOZ_X11
static
Time
sLastRepeatableKeyTime
;
#
endif
enum
RepeatState
{
NOT_PRESSED
FIRST_PRESS
REPEATING
}
;
static
RepeatState
sRepeatState
;
bool
IsAutoRepeatableKey
(
guint
aHardwareKeyCode
)
;
static
void
OnKeysChanged
(
GdkKeymap
*
aKeymap
KeymapWrapper
*
aKeymapWrapper
)
;
static
void
OnDirectionChanged
(
GdkKeymap
*
aGdkKeymap
KeymapWrapper
*
aKeymapWrapper
)
;
gulong
mOnKeysChangedSignalHandle
;
gulong
mOnDirectionChangedSignalHandle
;
static
uint32_t
GetCharCodeFor
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
uint32_t
GetCharCodeFor
(
const
GdkEventKey
*
aGdkKeyEvent
guint
aGdkModifierState
gint
aGroup
)
;
uint32_t
GetUnmodifiedCharCodeFor
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
gint
GetKeyLevel
(
GdkEventKey
*
aGdkKeyEvent
)
;
gint
GetFirstLatinGroup
(
)
;
bool
IsLatinGroup
(
guint8
aGroup
)
;
static
bool
IsBasicLatinLetterOrNumeral
(
uint32_t
aCharCode
)
;
static
bool
IsPrintableASCIICharacter
(
uint32_t
aCharCode
)
{
return
aCharCode
>
=
0x20
&
&
aCharCode
<
=
0x7E
;
}
static
guint
GetGDKKeyvalWithoutModifier
(
const
GdkEventKey
*
aGdkKeyEvent
)
;
static
uint32_t
GetDOMKeyCodeFromKeyPairs
(
guint
aGdkKeyval
)
;
#
ifdef
MOZ_X11
static
GdkFilterReturn
FilterEvents
(
GdkXEvent
*
aXEvent
GdkEvent
*
aGdkEvent
gpointer
aData
)
;
#
endif
static
bool
MaybeDispatchContextMenuEvent
(
nsWindow
*
aWindow
const
GdkEventKey
*
aEvent
)
;
void
WillDispatchKeyboardEventInternal
(
WidgetKeyboardEvent
&
aKeyEvent
GdkEventKey
*
aGdkKeyEvent
)
;
static
guint
GetModifierState
(
GdkEventKey
*
aGdkKeyEvent
KeymapWrapper
*
aWrapper
)
;
#
ifdef
MOZ_WAYLAND
void
SetModifierMask
(
xkb_keymap
*
aKeymap
ModifierIndex
aModifierIndex
const
char
*
aModifierName
)
;
#
endif
#
ifdef
MOZ_WAYLAND
static
wl_seat
*
sSeat
;
static
int
sSeatID
;
static
wl_keyboard
*
sKeyboard
;
wl_surface
*
mFocusSurface
=
nullptr
;
uint32_t
mFocusSerial
=
0
;
#
endif
}
;
}
}
#
endif
