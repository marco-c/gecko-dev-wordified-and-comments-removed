#
include
"
WindowSurfaceWayland
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Tools
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozcontainer
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
<
gdk
/
gdkwayland
.
h
>
#
include
<
sys
/
mman
.
h
>
#
include
<
assert
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
errno
.
h
>
namespace
mozilla
{
namespace
widget
{
static
nsCOMArray
<
nsWaylandDisplay
>
gWaylandDisplays
;
static
StaticMutex
gWaylandDisplaysMutex
;
static
nsWaylandDisplay
*
WaylandDisplayGet
(
wl_display
*
aDisplay
)
;
static
void
WaylandDisplayRelease
(
wl_display
*
aDisplay
)
;
static
void
WaylandDisplayLoop
(
wl_display
*
aDisplay
)
;
#
define
EVENT_LOOP_DELAY
(
1000
/
60
)
static
nsWaylandDisplay
*
WaylandDisplayGetLocked
(
wl_display
*
aDisplay
const
StaticMutexAutoLock
&
)
{
nsWaylandDisplay
*
waylandDisplay
=
nullptr
;
int
len
=
gWaylandDisplays
.
Count
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
gWaylandDisplays
[
i
]
-
>
Matches
(
aDisplay
)
)
{
waylandDisplay
=
gWaylandDisplays
[
i
]
;
break
;
}
}
if
(
!
waylandDisplay
)
{
waylandDisplay
=
new
nsWaylandDisplay
(
aDisplay
)
;
gWaylandDisplays
.
AppendObject
(
waylandDisplay
)
;
}
NS_ADDREF
(
waylandDisplay
)
;
return
waylandDisplay
;
}
static
nsWaylandDisplay
*
WaylandDisplayGet
(
wl_display
*
aDisplay
)
{
StaticMutexAutoLock
lock
(
gWaylandDisplaysMutex
)
;
return
WaylandDisplayGetLocked
(
aDisplay
lock
)
;
}
static
bool
WaylandDisplayReleaseLocked
(
wl_display
*
aDisplay
const
StaticMutexAutoLock
&
)
{
int
len
=
gWaylandDisplays
.
Count
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
gWaylandDisplays
[
i
]
-
>
Matches
(
aDisplay
)
)
{
int
rc
=
gWaylandDisplays
[
i
]
-
>
Release
(
)
;
if
(
rc
=
=
1
)
{
gWaylandDisplays
.
RemoveObjectAt
(
i
)
;
}
return
true
;
}
}
MOZ_ASSERT
(
false
"
Missing
nsWaylandDisplay
for
this
thread
!
"
)
;
return
false
;
}
static
void
WaylandDisplayRelease
(
wl_display
*
aDisplay
)
{
StaticMutexAutoLock
lock
(
gWaylandDisplaysMutex
)
;
WaylandDisplayReleaseLocked
(
aDisplay
lock
)
;
}
static
void
WaylandDisplayLoopLocked
(
wl_display
*
aDisplay
const
StaticMutexAutoLock
&
)
{
int
len
=
gWaylandDisplays
.
Count
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
gWaylandDisplays
[
i
]
-
>
Matches
(
aDisplay
)
)
{
if
(
gWaylandDisplays
[
i
]
-
>
DisplayLoop
(
)
)
{
MessageLoop
:
:
current
(
)
-
>
PostDelayedTask
(
NewRunnableFunction
(
&
WaylandDisplayLoop
aDisplay
)
EVENT_LOOP_DELAY
)
;
}
break
;
}
}
}
static
void
WaylandDisplayLoop
(
wl_display
*
aDisplay
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
StaticMutexAutoLock
lock
(
gWaylandDisplaysMutex
)
;
WaylandDisplayLoopLocked
(
aDisplay
lock
)
;
}
static
void
global_registry_handler
(
void
*
data
wl_registry
*
registry
uint32_t
id
const
char
*
interface
uint32_t
version
)
{
if
(
strcmp
(
interface
"
wl_shm
"
)
=
=
0
)
{
auto
interface
=
reinterpret_cast
<
nsWaylandDisplay
*
>
(
data
)
;
auto
shm
=
static_cast
<
wl_shm
*
>
(
wl_registry_bind
(
registry
id
&
wl_shm_interface
1
)
)
;
wl_proxy_set_queue
(
(
struct
wl_proxy
*
)
shm
interface
-
>
GetEventQueue
(
)
)
;
interface
-
>
SetShm
(
shm
)
;
}
}
static
void
global_registry_remover
(
void
*
data
wl_registry
*
registry
uint32_t
id
)
{
}
static
const
struct
wl_registry_listener
registry_listener
=
{
global_registry_handler
global_registry_remover
}
;
wl_shm
*
nsWaylandDisplay
:
:
GetShm
(
)
{
MOZ_ASSERT
(
mThreadId
=
=
PR_GetCurrentThread
(
)
)
;
if
(
!
mShm
)
{
wl_registry
*
registry
=
wl_display_get_registry
(
mDisplay
)
;
wl_registry_add_listener
(
registry
&
registry_listener
this
)
;
wl_proxy_set_queue
(
(
struct
wl_proxy
*
)
registry
mEventQueue
)
;
wl_display_roundtrip_queue
(
mDisplay
mEventQueue
)
;
MOZ_RELEASE_ASSERT
(
mShm
"
Wayland
registry
query
failed
!
"
)
;
}
return
(
mShm
)
;
}
bool
nsWaylandDisplay
:
:
DisplayLoop
(
)
{
wl_display_dispatch_queue_pending
(
mDisplay
mEventQueue
)
;
return
true
;
}
bool
nsWaylandDisplay
:
:
Matches
(
wl_display
*
aDisplay
)
{
return
mThreadId
=
=
PR_GetCurrentThread
(
)
&
&
aDisplay
=
=
mDisplay
;
}
NS_IMPL_ISUPPORTS
(
nsWaylandDisplay
nsISupports
)
;
nsWaylandDisplay
:
:
nsWaylandDisplay
(
wl_display
*
aDisplay
)
:
mThreadId
(
PR_GetCurrentThread
(
)
)
mDisplay
(
aDisplay
)
mDisplay
(
aDisplay
)
mFormat
(
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
mShm
(
nullptr
)
{
if
(
NS_IsMainThread
(
)
)
{
mEventQueue
=
nullptr
;
}
else
{
mEventQueue
=
wl_display_create_queue
(
mDisplay
)
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableFunction
(
&
WaylandDisplayLoop
mDisplay
)
)
;
}
}
nsWaylandDisplay
:
:
~
nsWaylandDisplay
(
)
{
MOZ_ASSERT
(
mThreadId
=
=
PR_GetCurrentThread
(
)
)
;
mDisplay
=
nullptr
;
if
(
mEventQueue
)
{
wl_event_queue_destroy
(
mEventQueue
)
;
mEventQueue
=
nullptr
;
}
}
}
}
