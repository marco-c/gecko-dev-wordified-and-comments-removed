#
ifndef
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_PROVIDER_H
#
define
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_PROVIDER_H
#
include
<
gdk
/
gdk
.
h
>
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
widget
/
WindowSurface
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
ifdef
MOZ_X11
#
include
<
X11
/
Xlib
.
h
>
#
include
"
X11UndefineNone
.
h
"
#
endif
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
GtkCompositorWidget
;
class
WindowSurfaceProvider
final
{
public
:
WindowSurfaceProvider
(
)
;
~
WindowSurfaceProvider
(
)
;
#
ifdef
MOZ_WAYLAND
bool
Initialize
(
RefPtr
<
nsWindow
>
aWidget
)
;
bool
Initialize
(
GtkCompositorWidget
*
aCompositorWidget
)
;
#
endif
#
ifdef
MOZ_X11
bool
Initialize
(
Window
aWindow
bool
aIsShaped
)
;
Window
GetXWindow
(
)
const
{
return
mXWindow
;
}
#
endif
void
CleanupResources
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
layers
:
:
BufferMode
*
aBufferMode
)
;
void
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
;
private
:
RefPtr
<
WindowSurface
>
CreateWindowSurface
(
)
;
void
CleanupWindowSurface
(
)
;
RefPtr
<
WindowSurface
>
mWindowSurface
;
mozilla
:
:
Mutex
mMutex
MOZ_UNANNOTATED
;
bool
mWindowSurfaceValid
;
#
ifdef
MOZ_WAYLAND
RefPtr
<
nsWindow
>
mWidget
;
GtkCompositorWidget
*
mCompositorWidget
=
nullptr
;
#
endif
#
ifdef
MOZ_X11
bool
mIsShaped
;
int
mXDepth
;
Atomic
<
Window
Relaxed
>
mXWindow
;
Visual
*
mXVisual
;
#
endif
}
;
}
}
#
endif
