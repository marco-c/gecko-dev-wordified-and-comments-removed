#
ifdef
MOZ_WAYLAND
#
include
"
WaylandVsyncSource
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
<
gdk
/
gdkwayland
.
h
>
namespace
mozilla
{
static
void
WaylandVsyncSourceCallbackHandler
(
void
*
data
struct
wl_callback
*
callback
uint32_t
time
)
{
WaylandVsyncSource
:
:
WaylandFrameCallbackContext
*
context
=
(
WaylandVsyncSource
:
:
WaylandFrameCallbackContext
*
)
data
;
wl_callback_destroy
(
callback
)
;
if
(
!
context
-
>
mEnabled
)
{
delete
context
;
return
;
}
context
-
>
mDisplay
-
>
FrameCallback
(
)
;
}
static
const
struct
wl_callback_listener
WaylandVsyncSourceCallbackListener
=
{
WaylandVsyncSourceCallbackHandler
}
;
WaylandVsyncSource
:
:
WaylandDisplay
:
:
WaylandDisplay
(
MozContainer
*
container
)
:
mThread
(
"
WaylandVsyncThread
"
)
mTask
(
nullptr
)
mCallbackContext
(
nullptr
)
mNotifyThreadMonitor
(
"
WaylandVsyncNotifyThreadMonitor
"
)
mEnabledLock
(
"
WaylandVsyncEnabledLock
"
)
mVsyncEnabled
(
false
)
mMonitorEnabled
(
false
)
mShutdown
(
false
)
mContainer
(
container
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mDisplay
=
widget
:
:
WaylandDisplayGet
(
)
-
>
GetDisplay
(
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
Loop
(
)
{
MonitorAutoLock
lock
(
mNotifyThreadMonitor
)
;
while
(
true
)
{
lock
.
Wait
(
)
;
if
(
mShutdown
)
{
return
;
}
NotifyVsync
(
TimeStamp
:
:
Now
(
)
)
;
}
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
ClearFrameCallback
(
)
{
if
(
mCallbackContext
)
{
mCallbackContext
-
>
mEnabled
=
false
;
mCallbackContext
=
nullptr
;
}
}
bool
WaylandVsyncSource
:
:
WaylandDisplay
:
:
Setup
(
)
{
MutexAutoLock
lock
(
mEnabledLock
)
;
MOZ_ASSERT
(
!
mTask
)
;
MOZ_ASSERT
(
!
mShutdown
)
;
if
(
!
mThread
.
Start
(
)
)
{
return
false
;
}
mTask
=
NewRunnableMethod
(
"
WaylandVsyncSource
:
:
WaylandDisplay
:
:
Loop
"
this
&
WaylandDisplay
:
:
Loop
)
;
RefPtr
<
Runnable
>
addrefedTask
=
mTask
;
mThread
.
message_loop
(
)
-
>
PostTask
(
addrefedTask
.
forget
(
)
)
;
return
true
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
EnableMonitor
(
)
{
MutexAutoLock
lock
(
mEnabledLock
)
;
if
(
mMonitorEnabled
)
{
return
;
}
mMonitorEnabled
=
true
;
if
(
mVsyncEnabled
&
&
(
!
mCallbackContext
|
|
!
mCallbackContext
-
>
mEnabled
)
)
{
SetupFrameCallback
(
)
;
}
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
DisableMonitor
(
)
{
MutexAutoLock
lock
(
mEnabledLock
)
;
if
(
!
mMonitorEnabled
)
{
return
;
}
mMonitorEnabled
=
false
;
ClearFrameCallback
(
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
Notify
(
)
{
MonitorAutoLock
lock
(
mNotifyThreadMonitor
)
;
mNotifyThreadMonitor
.
NotifyAll
(
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
SetupFrameCallback
(
)
{
struct
wl_surface
*
surface
=
moz_container_wayland_get_surface
(
mContainer
)
;
if
(
!
surface
)
{
ClearFrameCallback
(
)
;
return
;
}
if
(
mCallbackContext
=
=
nullptr
)
{
mCallbackContext
=
new
WaylandFrameCallbackContext
(
this
)
;
}
struct
wl_callback
*
callback
=
wl_surface_frame
(
surface
)
;
wl_callback_add_listener
(
callback
&
WaylandVsyncSourceCallbackListener
mCallbackContext
)
;
wl_surface_commit
(
surface
)
;
wl_display_flush
(
mDisplay
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
FrameCallback
(
)
{
{
MutexAutoLock
lock
(
mEnabledLock
)
;
if
(
!
mVsyncEnabled
|
|
!
mMonitorEnabled
)
{
return
;
}
SetupFrameCallback
(
)
;
}
Notify
(
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
EnableVsync
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MutexAutoLock
lock
(
mEnabledLock
)
;
if
(
mVsyncEnabled
)
{
return
;
}
mVsyncEnabled
=
true
;
if
(
!
mMonitorEnabled
|
|
(
mCallbackContext
&
&
mCallbackContext
-
>
mEnabled
)
)
{
return
;
}
SetupFrameCallback
(
)
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
DisableVsync
(
)
{
MutexAutoLock
lock
(
mEnabledLock
)
;
mVsyncEnabled
=
false
;
ClearFrameCallback
(
)
;
}
bool
WaylandVsyncSource
:
:
WaylandDisplay
:
:
IsVsyncEnabled
(
)
{
MutexAutoLock
lock
(
mEnabledLock
)
;
return
mVsyncEnabled
;
}
void
WaylandVsyncSource
:
:
WaylandDisplay
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
DisableVsync
(
)
;
{
MonitorAutoLock
lock
(
mNotifyThreadMonitor
)
;
mShutdown
=
true
;
mNotifyThreadMonitor
.
NotifyAll
(
)
;
}
mThread
.
Stop
(
)
;
}
}
#
endif
