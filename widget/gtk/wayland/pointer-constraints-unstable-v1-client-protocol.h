#
ifndef
POINTER_CONSTRAINTS_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
define
POINTER_CONSTRAINTS_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wayland
-
client
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
wl_pointer
;
struct
wl_region
;
struct
wl_surface
;
struct
zwp_confined_pointer_v1
;
struct
zwp_locked_pointer_v1
;
struct
zwp_pointer_constraints_v1
;
extern
const
struct
wl_interface
zwp_pointer_constraints_v1_interface
;
extern
const
struct
wl_interface
zwp_locked_pointer_v1_interface
;
extern
const
struct
wl_interface
zwp_confined_pointer_v1_interface
;
#
ifndef
ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM
#
define
ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM
enum
zwp_pointer_constraints_v1_error
{
ZWP_POINTER_CONSTRAINTS_V1_ERROR_ALREADY_CONSTRAINED
=
1
}
;
#
endif
#
ifndef
ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM
#
define
ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM
enum
zwp_pointer_constraints_v1_lifetime
{
ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT
=
1
ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT
=
2
}
;
#
endif
#
define
ZWP_POINTER_CONSTRAINTS_V1_DESTROY
0
#
define
ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER
1
#
define
ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER
2
#
define
ZWP_POINTER_CONSTRAINTS_V1_DESTROY_SINCE_VERSION
1
#
define
ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER_SINCE_VERSION
1
#
define
ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER_SINCE_VERSION
1
static
inline
void
zwp_pointer_constraints_v1_set_user_data
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
user_data
)
;
}
static
inline
void
*
zwp_pointer_constraints_v1_get_user_data
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
)
;
}
static
inline
uint32_t
zwp_pointer_constraints_v1_get_version
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
)
;
}
static
inline
void
zwp_pointer_constraints_v1_destroy
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
ZWP_POINTER_CONSTRAINTS_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
)
;
}
static
inline
struct
zwp_locked_pointer_v1
*
zwp_pointer_constraints_v1_lock_pointer
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
struct
wl_surface
*
surface
struct
wl_pointer
*
pointer
struct
wl_region
*
region
uint32_t
lifetime
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
ZWP_POINTER_CONSTRAINTS_V1_LOCK_POINTER
&
zwp_locked_pointer_v1_interface
NULL
surface
pointer
region
lifetime
)
;
return
(
struct
zwp_locked_pointer_v1
*
)
id
;
}
static
inline
struct
zwp_confined_pointer_v1
*
zwp_pointer_constraints_v1_confine_pointer
(
struct
zwp_pointer_constraints_v1
*
zwp_pointer_constraints_v1
struct
wl_surface
*
surface
struct
wl_pointer
*
pointer
struct
wl_region
*
region
uint32_t
lifetime
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
zwp_pointer_constraints_v1
ZWP_POINTER_CONSTRAINTS_V1_CONFINE_POINTER
&
zwp_confined_pointer_v1_interface
NULL
surface
pointer
region
lifetime
)
;
return
(
struct
zwp_confined_pointer_v1
*
)
id
;
}
struct
zwp_locked_pointer_v1_listener
{
void
(
*
locked
)
(
void
*
data
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
)
;
void
(
*
unlocked
)
(
void
*
data
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
)
;
}
;
static
inline
int
zwp_locked_pointer_v1_add_listener
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
const
struct
zwp_locked_pointer_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_LOCKED_POINTER_V1_DESTROY
0
#
define
ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT
1
#
define
ZWP_LOCKED_POINTER_V1_SET_REGION
2
#
define
ZWP_LOCKED_POINTER_V1_LOCKED_SINCE_VERSION
1
#
define
ZWP_LOCKED_POINTER_V1_UNLOCKED_SINCE_VERSION
1
#
define
ZWP_LOCKED_POINTER_V1_DESTROY_SINCE_VERSION
1
#
define
ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT_SINCE_VERSION
1
#
define
ZWP_LOCKED_POINTER_V1_SET_REGION_SINCE_VERSION
1
static
inline
void
zwp_locked_pointer_v1_set_user_data
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
user_data
)
;
}
static
inline
void
*
zwp_locked_pointer_v1_get_user_data
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
)
;
}
static
inline
uint32_t
zwp_locked_pointer_v1_get_version
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
)
;
}
static
inline
void
zwp_locked_pointer_v1_destroy
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
ZWP_LOCKED_POINTER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
)
;
}
static
inline
void
zwp_locked_pointer_v1_set_cursor_position_hint
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
wl_fixed_t
surface_x
wl_fixed_t
surface_y
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
ZWP_LOCKED_POINTER_V1_SET_CURSOR_POSITION_HINT
surface_x
surface_y
)
;
}
static
inline
void
zwp_locked_pointer_v1_set_region
(
struct
zwp_locked_pointer_v1
*
zwp_locked_pointer_v1
struct
wl_region
*
region
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_locked_pointer_v1
ZWP_LOCKED_POINTER_V1_SET_REGION
region
)
;
}
struct
zwp_confined_pointer_v1_listener
{
void
(
*
confined
)
(
void
*
data
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
)
;
void
(
*
unconfined
)
(
void
*
data
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
)
;
}
;
static
inline
int
zwp_confined_pointer_v1_add_listener
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
const
struct
zwp_confined_pointer_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_CONFINED_POINTER_V1_DESTROY
0
#
define
ZWP_CONFINED_POINTER_V1_SET_REGION
1
#
define
ZWP_CONFINED_POINTER_V1_CONFINED_SINCE_VERSION
1
#
define
ZWP_CONFINED_POINTER_V1_UNCONFINED_SINCE_VERSION
1
#
define
ZWP_CONFINED_POINTER_V1_DESTROY_SINCE_VERSION
1
#
define
ZWP_CONFINED_POINTER_V1_SET_REGION_SINCE_VERSION
1
static
inline
void
zwp_confined_pointer_v1_set_user_data
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
user_data
)
;
}
static
inline
void
*
zwp_confined_pointer_v1_get_user_data
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
)
;
}
static
inline
uint32_t
zwp_confined_pointer_v1_get_version
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
)
;
}
static
inline
void
zwp_confined_pointer_v1_destroy
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
ZWP_CONFINED_POINTER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
)
;
}
static
inline
void
zwp_confined_pointer_v1_set_region
(
struct
zwp_confined_pointer_v1
*
zwp_confined_pointer_v1
struct
wl_region
*
region
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_confined_pointer_v1
ZWP_CONFINED_POINTER_V1_SET_REGION
region
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
