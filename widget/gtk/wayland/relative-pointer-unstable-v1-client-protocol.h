#
ifndef
RELATIVE_POINTER_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
define
RELATIVE_POINTER_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wayland
-
client
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
wl_pointer
;
struct
zwp_relative_pointer_manager_v1
;
struct
zwp_relative_pointer_v1
;
extern
const
struct
wl_interface
zwp_relative_pointer_manager_v1_interface
;
extern
const
struct
wl_interface
zwp_relative_pointer_v1_interface
;
#
define
ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY
0
#
define
ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER
1
#
define
ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY_SINCE_VERSION
1
#
define
ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER_SINCE_VERSION
1
static
inline
void
zwp_relative_pointer_manager_v1_set_user_data
(
struct
zwp_relative_pointer_manager_v1
*
zwp_relative_pointer_manager_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
user_data
)
;
}
static
inline
void
*
zwp_relative_pointer_manager_v1_get_user_data
(
struct
zwp_relative_pointer_manager_v1
*
zwp_relative_pointer_manager_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
)
;
}
static
inline
uint32_t
zwp_relative_pointer_manager_v1_get_version
(
struct
zwp_relative_pointer_manager_v1
*
zwp_relative_pointer_manager_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
)
;
}
static
inline
void
zwp_relative_pointer_manager_v1_destroy
(
struct
zwp_relative_pointer_manager_v1
*
zwp_relative_pointer_manager_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
ZWP_RELATIVE_POINTER_MANAGER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
)
;
}
static
inline
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_manager_v1_get_relative_pointer
(
struct
zwp_relative_pointer_manager_v1
*
zwp_relative_pointer_manager_v1
struct
wl_pointer
*
pointer
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_manager_v1
ZWP_RELATIVE_POINTER_MANAGER_V1_GET_RELATIVE_POINTER
&
zwp_relative_pointer_v1_interface
NULL
pointer
)
;
return
(
struct
zwp_relative_pointer_v1
*
)
id
;
}
struct
zwp_relative_pointer_v1_listener
{
void
(
*
relative_motion
)
(
void
*
data
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
uint32_t
utime_hi
uint32_t
utime_lo
wl_fixed_t
dx
wl_fixed_t
dy
wl_fixed_t
dx_unaccel
wl_fixed_t
dy_unaccel
)
;
}
;
static
inline
int
zwp_relative_pointer_v1_add_listener
(
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
const
struct
zwp_relative_pointer_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_RELATIVE_POINTER_V1_DESTROY
0
#
define
ZWP_RELATIVE_POINTER_V1_RELATIVE_MOTION_SINCE_VERSION
1
#
define
ZWP_RELATIVE_POINTER_V1_DESTROY_SINCE_VERSION
1
static
inline
void
zwp_relative_pointer_v1_set_user_data
(
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
user_data
)
;
}
static
inline
void
*
zwp_relative_pointer_v1_get_user_data
(
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
)
;
}
static
inline
uint32_t
zwp_relative_pointer_v1_get_version
(
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
)
;
}
static
inline
void
zwp_relative_pointer_v1_destroy
(
struct
zwp_relative_pointer_v1
*
zwp_relative_pointer_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
ZWP_RELATIVE_POINTER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_relative_pointer_v1
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
