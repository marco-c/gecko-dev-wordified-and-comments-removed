#
ifndef
GTK_PRIMARY_SELECTION_CLIENT_PROTOCOL_H
#
define
GTK_PRIMARY_SELECTION_CLIENT_PROTOCOL_H
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wayland
-
client
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
gtk_primary_selection_device
;
struct
gtk_primary_selection_device_manager
;
struct
gtk_primary_selection_offer
;
struct
gtk_primary_selection_source
;
struct
wl_seat
;
extern
const
struct
wl_interface
gtk_primary_selection_device_manager_interface
;
extern
const
struct
wl_interface
gtk_primary_selection_device_interface
;
extern
const
struct
wl_interface
gtk_primary_selection_offer_interface
;
extern
const
struct
wl_interface
gtk_primary_selection_source_interface
;
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_CREATE_SOURCE
0
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_GET_DEVICE
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_DESTROY
2
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_CREATE_SOURCE_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_GET_DEVICE_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_DESTROY_SINCE_VERSION
1
static
inline
void
gtk_primary_selection_device_manager_set_user_data
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
user_data
)
;
}
static
inline
void
*
gtk_primary_selection_device_manager_get_user_data
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
)
;
}
static
inline
uint32_t
gtk_primary_selection_device_manager_get_version
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
)
;
}
static
inline
struct
gtk_primary_selection_source
*
gtk_primary_selection_device_manager_create_source
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_CREATE_SOURCE
&
gtk_primary_selection_source_interface
NULL
)
;
return
(
struct
gtk_primary_selection_source
*
)
id
;
}
static
inline
struct
gtk_primary_selection_device
*
gtk_primary_selection_device_manager_get_device
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
struct
wl_seat
*
seat
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_GET_DEVICE
&
gtk_primary_selection_device_interface
NULL
seat
)
;
return
(
struct
gtk_primary_selection_device
*
)
id
;
}
static
inline
void
gtk_primary_selection_device_manager_destroy
(
struct
gtk_primary_selection_device_manager
*
gtk_primary_selection_device_manager
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
GTK_PRIMARY_SELECTION_DEVICE_MANAGER_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device_manager
)
;
}
struct
gtk_primary_selection_device_listener
{
void
(
*
data_offer
)
(
void
*
data
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
struct
gtk_primary_selection_offer
*
offer
)
;
void
(
*
selection
)
(
void
*
data
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
struct
gtk_primary_selection_offer
*
id
)
;
}
;
static
inline
int
gtk_primary_selection_device_add_listener
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
const
struct
gtk_primary_selection_device_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
GTK_PRIMARY_SELECTION_DEVICE_SET_SELECTION
0
#
define
GTK_PRIMARY_SELECTION_DEVICE_DESTROY
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_DATA_OFFER_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_SELECTION_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_SET_SELECTION_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_DEVICE_DESTROY_SINCE_VERSION
1
static
inline
void
gtk_primary_selection_device_set_user_data
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
user_data
)
;
}
static
inline
void
*
gtk_primary_selection_device_get_user_data
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
)
;
}
static
inline
uint32_t
gtk_primary_selection_device_get_version
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
)
;
}
static
inline
void
gtk_primary_selection_device_set_selection
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
struct
gtk_primary_selection_source
*
source
uint32_t
serial
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
GTK_PRIMARY_SELECTION_DEVICE_SET_SELECTION
source
serial
)
;
}
static
inline
void
gtk_primary_selection_device_destroy
(
struct
gtk_primary_selection_device
*
gtk_primary_selection_device
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
GTK_PRIMARY_SELECTION_DEVICE_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
gtk_primary_selection_device
)
;
}
struct
gtk_primary_selection_offer_listener
{
void
(
*
offer
)
(
void
*
data
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
const
char
*
mime_type
)
;
}
;
static
inline
int
gtk_primary_selection_offer_add_listener
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
const
struct
gtk_primary_selection_offer_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
GTK_PRIMARY_SELECTION_OFFER_RECEIVE
0
#
define
GTK_PRIMARY_SELECTION_OFFER_DESTROY
1
#
define
GTK_PRIMARY_SELECTION_OFFER_OFFER_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_OFFER_RECEIVE_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_OFFER_DESTROY_SINCE_VERSION
1
static
inline
void
gtk_primary_selection_offer_set_user_data
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
user_data
)
;
}
static
inline
void
*
gtk_primary_selection_offer_get_user_data
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
)
;
}
static
inline
uint32_t
gtk_primary_selection_offer_get_version
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
)
;
}
static
inline
void
gtk_primary_selection_offer_receive
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
const
char
*
mime_type
int32_t
fd
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
GTK_PRIMARY_SELECTION_OFFER_RECEIVE
mime_type
fd
)
;
}
static
inline
void
gtk_primary_selection_offer_destroy
(
struct
gtk_primary_selection_offer
*
gtk_primary_selection_offer
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
GTK_PRIMARY_SELECTION_OFFER_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
gtk_primary_selection_offer
)
;
}
struct
gtk_primary_selection_source_listener
{
void
(
*
send
)
(
void
*
data
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
const
char
*
mime_type
int32_t
fd
)
;
void
(
*
cancelled
)
(
void
*
data
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
)
;
}
;
static
inline
int
gtk_primary_selection_source_add_listener
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
const
struct
gtk_primary_selection_source_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
GTK_PRIMARY_SELECTION_SOURCE_OFFER
0
#
define
GTK_PRIMARY_SELECTION_SOURCE_DESTROY
1
#
define
GTK_PRIMARY_SELECTION_SOURCE_SEND_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_SOURCE_CANCELLED_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_SOURCE_OFFER_SINCE_VERSION
1
#
define
GTK_PRIMARY_SELECTION_SOURCE_DESTROY_SINCE_VERSION
1
static
inline
void
gtk_primary_selection_source_set_user_data
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
user_data
)
;
}
static
inline
void
*
gtk_primary_selection_source_get_user_data
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
)
;
}
static
inline
uint32_t
gtk_primary_selection_source_get_version
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
)
;
}
static
inline
void
gtk_primary_selection_source_offer
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
const
char
*
mime_type
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
GTK_PRIMARY_SELECTION_SOURCE_OFFER
mime_type
)
;
}
static
inline
void
gtk_primary_selection_source_destroy
(
struct
gtk_primary_selection_source
*
gtk_primary_selection_source
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
GTK_PRIMARY_SELECTION_SOURCE_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
gtk_primary_selection_source
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
