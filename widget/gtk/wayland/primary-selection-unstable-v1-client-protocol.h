#
ifndef
WP_PRIMARY_SELECTION_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
define
WP_PRIMARY_SELECTION_UNSTABLE_V1_CLIENT_PROTOCOL_H
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wayland
-
client
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
wl_seat
;
struct
zwp_primary_selection_device_manager_v1
;
struct
zwp_primary_selection_device_v1
;
struct
zwp_primary_selection_offer_v1
;
struct
zwp_primary_selection_source_v1
;
extern
const
struct
wl_interface
zwp_primary_selection_device_manager_v1_interface
;
extern
const
struct
wl_interface
zwp_primary_selection_device_v1_interface
;
extern
const
struct
wl_interface
zwp_primary_selection_offer_v1_interface
;
extern
const
struct
wl_interface
zwp_primary_selection_source_v1_interface
;
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE
0
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY
2
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY_SINCE_VERSION
1
static
inline
void
zwp_primary_selection_device_manager_v1_set_user_data
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
user_data
)
;
}
static
inline
void
*
zwp_primary_selection_device_manager_v1_get_user_data
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
)
;
}
static
inline
uint32_t
zwp_primary_selection_device_manager_v1_get_version
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
)
;
}
static
inline
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_device_manager_v1_create_source
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_CREATE_SOURCE
&
zwp_primary_selection_source_v1_interface
NULL
)
;
return
(
struct
zwp_primary_selection_source_v1
*
)
id
;
}
static
inline
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_manager_v1_get_device
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
struct
wl_seat
*
seat
)
{
struct
wl_proxy
*
id
;
id
=
wl_proxy_marshal_constructor
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_GET_DEVICE
&
zwp_primary_selection_device_v1_interface
NULL
seat
)
;
return
(
struct
zwp_primary_selection_device_v1
*
)
id
;
}
static
inline
void
zwp_primary_selection_device_manager_v1_destroy
(
struct
zwp_primary_selection_device_manager_v1
*
zwp_primary_selection_device_manager_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
ZWP_PRIMARY_SELECTION_DEVICE_MANAGER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_manager_v1
)
;
}
struct
zwp_primary_selection_device_v1_listener
{
void
(
*
data_offer
)
(
void
*
data
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
struct
zwp_primary_selection_offer_v1
*
offer
)
;
void
(
*
selection
)
(
void
*
data
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
struct
zwp_primary_selection_offer_v1
*
id
)
;
}
;
static
inline
int
zwp_primary_selection_device_v1_add_listener
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
const
struct
zwp_primary_selection_device_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION
0
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_DATA_OFFER_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_SELECTION_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY_SINCE_VERSION
1
static
inline
void
zwp_primary_selection_device_v1_set_user_data
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
user_data
)
;
}
static
inline
void
*
zwp_primary_selection_device_v1_get_user_data
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
)
;
}
static
inline
uint32_t
zwp_primary_selection_device_v1_get_version
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
)
;
}
static
inline
void
zwp_primary_selection_device_v1_set_selection
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
struct
zwp_primary_selection_source_v1
*
source
uint32_t
serial
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
ZWP_PRIMARY_SELECTION_DEVICE_V1_SET_SELECTION
source
serial
)
;
}
static
inline
void
zwp_primary_selection_device_v1_destroy
(
struct
zwp_primary_selection_device_v1
*
zwp_primary_selection_device_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
ZWP_PRIMARY_SELECTION_DEVICE_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_primary_selection_device_v1
)
;
}
struct
zwp_primary_selection_offer_v1_listener
{
void
(
*
offer
)
(
void
*
data
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
const
char
*
mime_type
)
;
}
;
static
inline
int
zwp_primary_selection_offer_v1_add_listener
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
const
struct
zwp_primary_selection_offer_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE
0
#
define
ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY
1
#
define
ZWP_PRIMARY_SELECTION_OFFER_V1_OFFER_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY_SINCE_VERSION
1
static
inline
void
zwp_primary_selection_offer_v1_set_user_data
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
user_data
)
;
}
static
inline
void
*
zwp_primary_selection_offer_v1_get_user_data
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
)
;
}
static
inline
uint32_t
zwp_primary_selection_offer_v1_get_version
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
)
;
}
static
inline
void
zwp_primary_selection_offer_v1_receive
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
const
char
*
mime_type
int32_t
fd
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
ZWP_PRIMARY_SELECTION_OFFER_V1_RECEIVE
mime_type
fd
)
;
}
static
inline
void
zwp_primary_selection_offer_v1_destroy
(
struct
zwp_primary_selection_offer_v1
*
zwp_primary_selection_offer_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
ZWP_PRIMARY_SELECTION_OFFER_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_primary_selection_offer_v1
)
;
}
struct
zwp_primary_selection_source_v1_listener
{
void
(
*
send
)
(
void
*
data
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
const
char
*
mime_type
int32_t
fd
)
;
void
(
*
cancelled
)
(
void
*
data
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
)
;
}
;
static
inline
int
zwp_primary_selection_source_v1_add_listener
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
const
struct
zwp_primary_selection_source_v1_listener
*
listener
void
*
data
)
{
return
wl_proxy_add_listener
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
(
void
(
*
*
)
(
void
)
)
listener
data
)
;
}
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER
0
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY
1
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_SEND_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_CANCELLED_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER_SINCE_VERSION
1
#
define
ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY_SINCE_VERSION
1
static
inline
void
zwp_primary_selection_source_v1_set_user_data
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
void
*
user_data
)
{
wl_proxy_set_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
user_data
)
;
}
static
inline
void
*
zwp_primary_selection_source_v1_get_user_data
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
)
{
return
wl_proxy_get_user_data
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
)
;
}
static
inline
uint32_t
zwp_primary_selection_source_v1_get_version
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
)
{
return
wl_proxy_get_version
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
)
;
}
static
inline
void
zwp_primary_selection_source_v1_offer
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
const
char
*
mime_type
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
ZWP_PRIMARY_SELECTION_SOURCE_V1_OFFER
mime_type
)
;
}
static
inline
void
zwp_primary_selection_source_v1_destroy
(
struct
zwp_primary_selection_source_v1
*
zwp_primary_selection_source_v1
)
{
wl_proxy_marshal
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
ZWP_PRIMARY_SELECTION_SOURCE_V1_DESTROY
)
;
wl_proxy_destroy
(
(
struct
wl_proxy
*
)
zwp_primary_selection_source_v1
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
