#
ifndef
WIDGET_GTK_GFXINFO_UTILS_h__
#
define
WIDGET_GTK_GFXINFO_UTILS_h__
#
define
MOZ_UNUSED
(
expr
)
\
do
{
\
if
(
expr
)
{
\
(
void
)
0
;
\
}
\
}
while
(
0
)
#
define
LOG_PIPE
2
static
bool
enable_logging
=
false
;
static
void
log
(
const
char
*
format
.
.
.
)
{
if
(
!
enable_logging
)
{
return
;
}
va_list
args
;
va_start
(
args
format
)
;
vfprintf
(
stderr
format
args
)
;
va_end
(
args
)
;
}
static
int
output_pipe
=
1
;
static
void
close_logging
(
)
{
int
fd
=
open
(
"
/
dev
/
null
"
O_WRONLY
)
;
for
(
int
i
=
1
;
i
<
fd
;
i
+
+
)
{
if
(
output_pipe
!
=
i
)
{
dup2
(
fd
i
)
;
}
}
close
(
fd
)
;
}
template
<
typename
func_ptr_type
>
static
func_ptr_type
cast
(
void
*
ptr
)
{
return
reinterpret_cast
<
func_ptr_type
>
(
reinterpret_cast
<
size_t
>
(
ptr
)
)
;
}
#
define
BUFFER_SIZE_STEP
4000
static
char
*
test_buf
=
nullptr
;
static
int
test_bufsize
=
0
;
static
int
test_length
=
0
;
static
void
record_value
(
const
char
*
format
.
.
.
)
{
if
(
!
test_buf
|
|
test_length
+
BUFFER_SIZE_STEP
/
2
>
test_bufsize
)
{
test_bufsize
+
=
BUFFER_SIZE_STEP
;
test_buf
=
(
char
*
)
realloc
(
test_buf
test_bufsize
)
;
}
int
remaining
=
test_bufsize
-
test_length
;
va_list
args
;
va_start
(
args
format
)
;
int
max_added
=
vsnprintf
(
test_buf
+
test_length
remaining
format
args
)
;
va_end
(
args
)
;
if
(
max_added
>
=
remaining
)
{
test_length
+
=
remaining
;
}
else
{
test_length
+
=
max_added
;
}
}
[
[
maybe_unused
]
]
static
void
record_error
(
const
char
*
str
)
{
record_value
(
"
ERROR
\
n
%
s
\
n
"
str
)
;
}
[
[
maybe_unused
]
]
static
void
record_warning
(
const
char
*
str
)
{
record_value
(
"
WARNING
\
n
%
s
\
n
"
str
)
;
}
static
void
record_flush
(
)
{
if
(
!
test_buf
)
{
return
;
}
MOZ_UNUSED
(
write
(
output_pipe
test_buf
test_length
)
)
;
if
(
enable_logging
)
{
MOZ_UNUSED
(
write
(
LOG_PIPE
test_buf
test_length
)
)
;
}
free
(
test_buf
)
;
test_buf
=
nullptr
;
}
#
endif
