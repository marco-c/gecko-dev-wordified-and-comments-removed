#
include
"
WindowSurfaceWaylandMultiBuffer
.
h
"
#
include
<
errno
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
sys
/
mman
.
h
>
#
include
<
prenv
.
h
>
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
MozContainer
.
h
"
#
include
"
mozilla
/
gfx
/
DataSurfaceHelpers
.
h
"
#
include
"
mozilla
/
gfx
/
Tools
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
mozilla
/
WidgetUtils
.
h
"
#
undef
LOG
#
ifdef
MOZ_LOGGING
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
Units
.
h
"
extern
mozilla
:
:
LazyLogModule
gWidgetWaylandLog
;
#
define
LOGWAYLAND
(
.
.
.
)
\
MOZ_LOG
(
gWidgetWaylandLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
else
#
define
LOGWAYLAND
(
.
.
.
)
#
endif
namespace
mozilla
:
:
widget
{
using
gfx
:
:
DataSourceSurface
;
#
define
BACK_BUFFER_NUM
3
WindowSurfaceWaylandMB
:
:
WindowSurfaceWaylandMB
(
RefPtr
<
nsWindow
>
aWindow
)
:
mSurfaceLock
(
"
WindowSurfaceWayland
lock
"
)
mWindow
(
std
:
:
move
(
aWindow
)
)
mFrameInProcess
(
false
)
mCallbackRequested
(
false
)
{
}
already_AddRefed
<
DrawTarget
>
WindowSurfaceWaylandMB
:
:
Lock
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
MutexAutoLock
lock
(
mSurfaceLock
)
;
#
ifdef
MOZ_LOGGING
gfx
:
:
IntRect
lockRect
=
aInvalidRegion
.
GetBounds
(
)
.
ToUnknownRect
(
)
;
LOGWAYLAND
(
"
WindowSurfaceWaylandMB
:
:
Lock
[
%
p
]
[
%
d
%
d
]
-
>
[
%
d
x
%
d
]
rects
%
d
"
(
void
*
)
mWindow
.
get
(
)
lockRect
.
x
lockRect
.
y
lockRect
.
width
lockRect
.
height
aInvalidRegion
.
GetNumRects
(
)
)
;
#
endif
if
(
mWindow
-
>
WindowType
(
)
=
=
eWindowType_invisible
)
{
return
nullptr
;
}
mFrameInProcess
=
true
;
CollectPendingSurfaces
(
lock
)
;
LayoutDeviceIntSize
newMozContainerSize
=
mWindow
-
>
GetMozContainerSize
(
)
;
if
(
mMozContainerSize
!
=
newMozContainerSize
)
{
mMozContainerSize
=
newMozContainerSize
;
LOGWAYLAND
(
"
new
MozContainer
size
[
%
d
x
%
d
]
"
mMozContainerSize
.
width
mMozContainerSize
.
height
)
;
if
(
mInProgressBuffer
)
{
ReturnBufferToPool
(
lock
mInProgressBuffer
)
;
mInProgressBuffer
=
nullptr
;
}
if
(
mFrontBuffer
)
{
ReturnBufferToPool
(
lock
mFrontBuffer
)
;
mFrontBuffer
=
nullptr
;
}
mAvailableBuffers
.
Clear
(
)
;
}
if
(
!
mInProgressBuffer
)
{
if
(
mFrontBuffer
&
&
!
mFrontBuffer
-
>
IsAttached
(
)
)
{
mInProgressBuffer
=
mFrontBuffer
;
}
else
{
mInProgressBuffer
=
ObtainBufferFromPool
(
lock
mMozContainerSize
)
;
if
(
mFrontBuffer
)
{
HandlePartialUpdate
(
lock
aInvalidRegion
)
;
ReturnBufferToPool
(
lock
mFrontBuffer
)
;
}
}
mFrontBuffer
=
nullptr
;
mFrontBufferInvalidRegion
.
SetEmpty
(
)
;
}
RefPtr
<
DrawTarget
>
dt
=
mInProgressBuffer
-
>
Lock
(
)
;
return
dt
.
forget
(
)
;
}
void
WindowSurfaceWaylandMB
:
:
HandlePartialUpdate
(
const
MutexAutoLock
&
aProofOfLock
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
LayoutDeviceIntRegion
copyRegion
;
if
(
mInProgressBuffer
-
>
GetBufferAge
(
)
=
=
2
)
{
copyRegion
.
Sub
(
mFrontBufferInvalidRegion
aInvalidRegion
)
;
}
else
{
LayoutDeviceIntSize
frontBufferSize
=
mFrontBuffer
-
>
GetSize
(
)
;
copyRegion
=
LayoutDeviceIntRegion
(
LayoutDeviceIntRect
(
0
0
frontBufferSize
.
width
frontBufferSize
.
height
)
)
;
copyRegion
.
SubOut
(
aInvalidRegion
)
;
}
if
(
!
copyRegion
.
IsEmpty
(
)
)
{
RefPtr
<
DataSourceSurface
>
dataSourceSurface
=
mozilla
:
:
gfx
:
:
CreateDataSourceSurfaceFromData
(
mFrontBuffer
-
>
GetSize
(
)
.
ToUnknownSize
(
)
mFrontBuffer
-
>
GetSurfaceFormat
(
)
(
const
uint8_t
*
)
mFrontBuffer
-
>
GetShmPool
(
)
-
>
GetImageData
(
)
mFrontBuffer
-
>
GetSize
(
)
.
width
*
BytesPerPixel
(
mFrontBuffer
-
>
GetSurfaceFormat
(
)
)
)
;
RefPtr
<
DrawTarget
>
dt
=
mInProgressBuffer
-
>
Lock
(
)
;
for
(
auto
iter
=
copyRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
LayoutDeviceIntRect
r
=
iter
.
Get
(
)
;
dt
-
>
CopySurface
(
dataSourceSurface
r
.
ToUnknownRect
(
)
gfx
:
:
IntPoint
(
r
.
x
r
.
y
)
)
;
}
}
}
void
WindowSurfaceWaylandMB
:
:
Commit
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
MutexAutoLock
lock
(
mSurfaceLock
)
;
Commit
(
lock
aInvalidRegion
)
;
}
void
WindowSurfaceWaylandMB
:
:
Commit
(
const
MutexAutoLock
&
aProofOfLock
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
#
ifdef
MOZ_LOGGING
gfx
:
:
IntRect
invalidRect
=
aInvalidRegion
.
GetBounds
(
)
.
ToUnknownRect
(
)
;
LOGWAYLAND
(
"
WindowSurfaceWaylandMB
:
:
Commit
[
%
p
]
damage
rect
[
%
d
%
d
]
-
>
[
%
d
x
%
d
]
"
"
MozContainer
[
%
d
x
%
d
]
\
n
"
(
void
*
)
mWindow
.
get
(
)
invalidRect
.
x
invalidRect
.
y
invalidRect
.
width
invalidRect
.
height
mMozContainerSize
.
width
mMozContainerSize
.
height
)
;
#
endif
if
(
!
mInProgressBuffer
)
{
return
;
}
mFrameInProcess
=
false
;
MozContainer
*
container
=
mWindow
-
>
GetMozContainer
(
)
;
wl_surface
*
waylandSurface
=
moz_container_wayland_surface_lock
(
container
)
;
if
(
!
waylandSurface
)
{
LOGWAYLAND
(
"
WindowSurfaceWaylandMB
:
:
Commit
[
%
p
]
frame
queued
:
can
'
t
lock
"
"
wl_surface
\
n
"
(
void
*
)
mWindow
.
get
(
)
)
;
if
(
!
mCallbackRequested
)
{
RefPtr
<
WindowSurfaceWaylandMB
>
self
(
this
)
;
moz_container_wayland_add_initial_draw_callback
(
container
[
self
aInvalidRegion
]
(
)
-
>
void
{
MutexAutoLock
lock
(
self
-
>
mSurfaceLock
)
;
if
(
!
self
-
>
mFrameInProcess
)
{
self
-
>
Commit
(
lock
aInvalidRegion
)
;
}
self
-
>
mCallbackRequested
=
false
;
}
)
;
mCallbackRequested
=
true
;
}
return
;
}
if
(
moz_container_wayland_is_commiting_to_parent
(
container
)
)
{
wl_surface_damage
(
waylandSurface
0
0
INT32_MAX
INT32_MAX
)
;
}
else
{
for
(
auto
iter
=
aInvalidRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
LayoutDeviceIntRect
r
=
iter
.
Get
(
)
;
wl_surface_damage_buffer
(
waylandSurface
r
.
x
r
.
y
r
.
width
r
.
height
)
;
}
}
moz_container_wayland_set_scale_factor_locked
(
container
)
;
mInProgressBuffer
-
>
AttachAndCommit
(
waylandSurface
)
;
moz_container_wayland_surface_unlock
(
container
&
waylandSurface
)
;
mInProgressBuffer
-
>
ResetBufferAge
(
)
;
mFrontBuffer
=
mInProgressBuffer
;
mFrontBufferInvalidRegion
=
aInvalidRegion
;
mInProgressBuffer
=
nullptr
;
EnforcePoolSizeLimit
(
aProofOfLock
)
;
IncrementBufferAge
(
aProofOfLock
)
;
if
(
wl_display_flush
(
WaylandDisplayGet
(
)
-
>
GetDisplay
(
)
)
=
=
-
1
)
{
LOGWAYLAND
(
"
WindowSurfaceWaylandMB
:
:
Commit
[
%
p
]
flush
failed
\
n
"
(
void
*
)
mWindow
.
get
(
)
)
;
}
}
RefPtr
<
WaylandBufferSHM
>
WindowSurfaceWaylandMB
:
:
ObtainBufferFromPool
(
const
MutexAutoLock
&
aProofOfLock
const
LayoutDeviceIntSize
&
aSize
)
{
if
(
!
mAvailableBuffers
.
IsEmpty
(
)
)
{
RefPtr
<
WaylandBufferSHM
>
buffer
=
mAvailableBuffers
.
PopLastElement
(
)
;
mInUseBuffers
.
AppendElement
(
buffer
)
;
return
buffer
;
}
RefPtr
<
WaylandBufferSHM
>
buffer
=
WaylandBufferSHM
:
:
Create
(
aSize
)
;
mInUseBuffers
.
AppendElement
(
buffer
)
;
return
buffer
;
}
void
WindowSurfaceWaylandMB
:
:
ReturnBufferToPool
(
const
MutexAutoLock
&
aProofOfLock
const
RefPtr
<
WaylandBufferSHM
>
&
aBuffer
)
{
if
(
aBuffer
-
>
IsAttached
(
)
)
{
mPendingBuffers
.
AppendElement
(
aBuffer
)
;
}
else
if
(
aBuffer
-
>
IsMatchingSize
(
mMozContainerSize
)
)
{
mAvailableBuffers
.
AppendElement
(
aBuffer
)
;
}
mInUseBuffers
.
RemoveElement
(
aBuffer
)
;
}
void
WindowSurfaceWaylandMB
:
:
EnforcePoolSizeLimit
(
const
MutexAutoLock
&
aProofOfLock
)
{
while
(
mAvailableBuffers
.
Length
(
)
>
BACK_BUFFER_NUM
)
{
mAvailableBuffers
.
RemoveElementAt
(
0
)
;
}
NS_WARNING_ASSERTION
(
mPendingBuffers
.
Length
(
)
<
BACK_BUFFER_NUM
"
Are
we
leaking
pending
buffers
?
"
)
;
NS_WARNING_ASSERTION
(
mInUseBuffers
.
Length
(
)
<
BACK_BUFFER_NUM
"
Are
we
leaking
in
-
use
buffers
?
"
)
;
}
void
WindowSurfaceWaylandMB
:
:
CollectPendingSurfaces
(
const
MutexAutoLock
&
aProofOfLock
)
{
mPendingBuffers
.
RemoveElementsBy
(
[
&
]
(
auto
&
buffer
)
{
if
(
!
buffer
-
>
IsAttached
(
)
)
{
if
(
buffer
-
>
IsMatchingSize
(
mMozContainerSize
)
)
{
mAvailableBuffers
.
AppendElement
(
std
:
:
move
(
buffer
)
)
;
}
return
true
;
}
return
false
;
}
)
;
}
void
WindowSurfaceWaylandMB
:
:
IncrementBufferAge
(
const
MutexAutoLock
&
aProofOfLock
)
{
for
(
const
RefPtr
<
WaylandBufferSHM
>
&
buffer
:
mInUseBuffers
)
{
buffer
-
>
IncrementBufferAge
(
)
;
}
for
(
const
RefPtr
<
WaylandBufferSHM
>
&
buffer
:
mPendingBuffers
)
{
buffer
-
>
IncrementBufferAge
(
)
;
}
for
(
const
RefPtr
<
WaylandBufferSHM
>
&
buffer
:
mAvailableBuffers
)
{
buffer
-
>
IncrementBufferAge
(
)
;
}
}
}
