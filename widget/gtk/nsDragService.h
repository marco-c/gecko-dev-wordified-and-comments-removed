#
ifndef
nsDragService_h__
#
define
nsDragService_h__
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsBaseDragService
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
<
gtk
/
gtk
.
h
>
class
nsICookieJarSettings
;
class
nsWindow
;
#
ifdef
MOZ_WAYLAND
class
DataOffer
;
#
else
typedef
nsISupports
DataOffer
;
#
endif
namespace
mozilla
{
namespace
gfx
{
class
SourceSurface
;
}
}
class
nsDragService
final
:
public
nsBaseDragService
public
nsIObserver
{
public
:
nsDragService
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIOBSERVER
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InvokeDragSessionImpl
(
nsIArray
*
anArrayTransferables
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
uint32_t
aActionType
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
InvokeDragSession
(
nsINode
*
aDOMNode
nsIPrincipal
*
aPrincipal
nsIContentSecurityPolicy
*
aCsp
nsICookieJarSettings
*
aCookieJarSettings
nsIArray
*
anArrayTransferables
uint32_t
aActionType
nsContentPolicyType
aContentPolicyType
)
override
;
NS_IMETHOD
StartDragSession
(
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
EndDragSession
(
bool
aDoneDrag
uint32_t
aKeyModifiers
)
override
;
NS_IMETHOD
SetCanDrop
(
bool
aCanDrop
)
override
;
NS_IMETHOD
GetCanDrop
(
bool
*
aCanDrop
)
override
;
NS_IMETHOD
GetNumDropItems
(
uint32_t
*
aNumItems
)
override
;
NS_IMETHOD
GetData
(
nsITransferable
*
aTransferable
uint32_t
aItemIndex
)
override
;
NS_IMETHOD
IsDataFlavorSupported
(
const
char
*
aDataFlavor
bool
*
_retval
)
override
;
NS_IMETHOD
UpdateDragEffect
(
)
override
;
static
already_AddRefed
<
nsDragService
>
GetInstance
(
)
;
void
TargetDataReceived
(
GtkWidget
*
aWidget
GdkDragContext
*
aContext
gint
aX
gint
aY
GtkSelectionData
*
aSelection_data
guint
aInfo
guint32
aTime
)
;
gboolean
ScheduleMotionEvent
(
nsWindow
*
aWindow
GdkDragContext
*
aDragContext
RefPtr
<
DataOffer
>
aPendingWaylandDataOffer
mozilla
:
:
LayoutDeviceIntPoint
aWindowPoint
guint
aTime
)
;
void
ScheduleLeaveEvent
(
)
;
gboolean
ScheduleDropEvent
(
nsWindow
*
aWindow
GdkDragContext
*
aDragContext
RefPtr
<
DataOffer
>
aPendingWaylandDataOffer
mozilla
:
:
LayoutDeviceIntPoint
aWindowPoint
guint
aTime
)
;
nsWindow
*
GetMostRecentDestWindow
(
)
{
return
mScheduledTask
=
=
eDragTaskNone
?
mTargetWindow
:
mPendingWindow
;
}
void
SourceEndDragSession
(
GdkDragContext
*
aContext
gint
aResult
)
;
void
SourceDataGet
(
GtkWidget
*
widget
GdkDragContext
*
context
GtkSelectionData
*
selection_data
guint32
aTime
)
;
void
SourceBeginDrag
(
GdkDragContext
*
aContext
)
;
void
SetDragIcon
(
GdkDragContext
*
aContext
)
;
gboolean
IsDragActive
(
)
{
return
mScheduledTask
!
=
eDragTaskNone
;
}
protected
:
virtual
~
nsDragService
(
)
;
private
:
enum
DragTask
{
eDragTaskNone
eDragTaskMotion
eDragTaskLeave
eDragTaskDrop
eDragTaskSourceEnd
}
;
DragTask
mScheduledTask
;
guint
mTaskSource
;
bool
mScheduledTaskIsRunning
;
RefPtr
<
nsWindow
>
mPendingWindow
;
mozilla
:
:
LayoutDeviceIntPoint
mPendingWindowPoint
;
RefPtr
<
GdkDragContext
>
mPendingDragContext
;
nsTHashMap
<
nsCStringHashKey
nsTArray
<
uint8_t
>
>
mCachedData
;
#
ifdef
MOZ_WAYLAND
RefPtr
<
DataOffer
>
mPendingWaylandDataOffer
;
#
endif
guint
mPendingTime
;
RefPtr
<
nsWindow
>
mTargetWindow
;
mozilla
:
:
LayoutDeviceIntPoint
mTargetWindowPoint
;
RefPtr
<
GtkWidget
>
mTargetWidget
;
RefPtr
<
GdkDragContext
>
mTargetDragContext
;
#
ifdef
MOZ_WAYLAND
RefPtr
<
DataOffer
>
mTargetWaylandDataOffer
;
#
endif
RefPtr
<
GdkDragContext
>
mTargetDragContextForRemote
;
#
ifdef
MOZ_WAYLAND
RefPtr
<
DataOffer
>
mTargetWaylandDataOfferForRemote
;
#
endif
guint
mTargetTime
;
bool
mCanDrop
;
bool
mTargetDragDataReceived
;
void
*
mTargetDragData
;
uint32_t
mTargetDragDataLen
;
bool
IsTargetContextList
(
void
)
;
void
GetTargetDragData
(
GdkAtom
aFlavor
)
;
void
TargetResetData
(
void
)
;
GtkWidget
*
mHiddenWidget
;
nsCOMPtr
<
nsIArray
>
mSourceDataItems
;
GtkTargetList
*
GetSourceList
(
void
)
;
bool
SetAlphaPixmap
(
SourceSurface
*
aPixbuf
GdkDragContext
*
aContext
int32_t
aXOffset
int32_t
aYOffset
const
mozilla
:
:
LayoutDeviceIntRect
&
dragRect
)
;
gboolean
Schedule
(
DragTask
aTask
nsWindow
*
aWindow
GdkDragContext
*
aDragContext
RefPtr
<
DataOffer
>
aPendingWaylandDataOffer
mozilla
:
:
LayoutDeviceIntPoint
aWindowPoint
guint
aTime
)
;
MOZ_CAN_RUN_SCRIPT
static
gboolean
TaskDispatchCallback
(
gpointer
data
)
;
MOZ_CAN_RUN_SCRIPT
gboolean
RunScheduledTask
(
)
;
void
UpdateDragAction
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DispatchMotionEvents
(
)
;
void
ReplyToDragMotion
(
GdkDragContext
*
aDragContext
)
;
#
ifdef
MOZ_WAYLAND
void
ReplyToDragMotion
(
RefPtr
<
DataOffer
>
aDragContext
)
;
#
endif
#
ifdef
MOZ_LOGGING
const
char
*
GetDragServiceTaskName
(
nsDragService
:
:
DragTask
aTask
)
;
#
endif
gboolean
DispatchDropEvent
(
)
;
static
uint32_t
GetCurrentModifiers
(
)
;
}
;
#
endif
