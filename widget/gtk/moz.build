with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Widget
:
Gtk
"
)
with
Files
(
"
*
CompositorWidget
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Graphics
"
)
with
Files
(
"
*
WindowSurface
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Graphics
"
)
if
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
gtk
'
:
DIRS
+
=
[
'
mozgtk
'
]
if
CONFIG
[
'
MOZ_WAYLAND
'
]
:
DIRS
+
=
[
'
wayland
'
'
mozwayland
'
]
EXPORTS
+
=
[
'
MozContainer
.
h
'
'
nsGTKToolkit
.
h
'
'
nsIImageToPixbuf
.
h
'
]
EXPORTS
.
mozilla
+
=
[
'
WidgetUtilsGtk
.
h
'
]
UNIFIED_SOURCES
+
=
[
'
IMContextWrapper
.
cpp
'
'
MozContainer
.
cpp
'
'
MPRISServiceHandler
.
cpp
'
'
NativeKeyBindings
.
cpp
'
'
nsAppShell
.
cpp
'
'
nsBidiKeyboard
.
cpp
'
'
nsColorPicker
.
cpp
'
'
nsFilePicker
.
cpp
'
'
nsGtkKeyUtils
.
cpp
'
'
nsImageToPixbuf
.
cpp
'
'
nsLookAndFeel
.
cpp
'
'
nsNativeThemeGTK
.
cpp
'
'
nsSound
.
cpp
'
'
nsToolkit
.
cpp
'
'
nsWidgetFactory
.
cpp
'
'
ProcInfo
.
cpp
'
'
ScreenHelperGTK
.
cpp
'
'
TaskbarProgress
.
cpp
'
'
WakeLockListener
.
cpp
'
'
WidgetTraceEvent
.
cpp
'
'
WidgetUtilsGtk
.
cpp
'
]
SOURCES
+
=
[
'
MediaKeysEventSourceFactory
.
cpp
'
'
nsWindow
.
cpp
'
'
WaylandVsyncSource
.
cpp
'
]
if
CONFIG
[
'
MOZ_X11
'
]
:
UNIFIED_SOURCES
+
=
[
'
CompositorWidgetChild
.
cpp
'
'
CompositorWidgetParent
.
cpp
'
'
GtkCompositorWidget
.
cpp
'
'
InProcessGtkCompositorWidget
.
cpp
'
'
nsIdleServiceGTK
.
cpp
'
]
EXPORTS
.
mozilla
.
widget
+
=
[
'
CompositorWidgetChild
.
h
'
'
CompositorWidgetParent
.
h
'
'
GtkCompositorWidget
.
h
'
'
InProcessGtkCompositorWidget
.
h
'
]
if
CONFIG
[
'
NS_PRINTING
'
]
:
UNIFIED_SOURCES
+
=
[
'
nsDeviceContextSpecG
.
cpp
'
'
nsPrintDialogGTK
.
cpp
'
'
nsPrintSettingsGTK
.
cpp
'
'
nsPrintSettingsServiceGTK
.
cpp
'
'
nsPSPrinters
.
cpp
'
]
if
CONFIG
[
'
MOZ_X11
'
]
:
UNIFIED_SOURCES
+
=
[
'
nsClipboard
.
cpp
'
'
nsClipboardX11
.
cpp
'
'
nsDragService
.
cpp
'
'
WindowSurfaceProvider
.
cpp
'
'
WindowSurfaceX11
.
cpp
'
'
WindowSurfaceX11Image
.
cpp
'
'
WindowSurfaceXRender
.
cpp
'
]
EXPORTS
.
mozilla
.
widget
+
=
[
'
WindowSurfaceProvider
.
h
'
]
if
CONFIG
[
'
MOZ_WAYLAND
'
]
:
UNIFIED_SOURCES
+
=
[
'
DMABufLibWrapper
.
cpp
'
'
DMABufSurface
.
cpp
'
'
MozContainerWayland
.
cpp
'
'
nsClipboardWayland
.
cpp
'
'
nsWaylandDisplay
.
cpp
'
'
WindowSurfaceWayland
.
cpp
'
]
EXPORTS
.
mozilla
.
widget
+
=
[
'
DMABufLibWrapper
.
h
'
'
DMABufSurface
.
h
'
'
MozContainerWayland
.
h
'
'
nsWaylandDisplay
.
h
'
]
if
CONFIG
[
'
ACCESSIBILITY
'
]
:
UNIFIED_SOURCES
+
=
[
'
maiRedundantObjectFactory
.
c
'
]
UNIFIED_SOURCES
+
=
[
'
gtk3drawing
.
cpp
'
'
nsApplicationChooser
.
cpp
'
'
WidgetStyleCache
.
cpp
'
]
XPCOM_MANIFESTS
+
=
[
'
components
.
conf
'
]
include
(
'
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
'
)
FINAL_LIBRARY
=
'
xul
'
LOCAL_INCLUDES
+
=
[
'
/
layout
/
base
'
'
/
layout
/
generic
'
'
/
layout
/
xul
'
'
/
other
-
licenses
/
atk
-
1
.
0
'
'
/
widget
'
'
/
widget
/
headless
'
]
if
CONFIG
[
'
MOZ_X11
'
]
:
LOCAL_INCLUDES
+
=
[
'
/
widget
/
x11
'
]
DEFINES
[
'
CAIRO_GFX
'
]
=
True
DEFINES
[
'
MOZ_APP_NAME
'
]
=
'
"
%
s
"
'
%
CONFIG
[
'
MOZ_APP_NAME
'
]
if
not
(
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
gtk
'
and
CONFIG
[
'
MOZ_TREE_CAIRO
'
]
)
:
CXXFLAGS
+
=
CONFIG
[
'
MOZ_CAIRO_CFLAGS
'
]
CFLAGS
+
=
CONFIG
[
'
TK_CFLAGS
'
]
CXXFLAGS
+
=
CONFIG
[
'
TK_CFLAGS
'
]
if
CONFIG
[
'
MOZ_WAYLAND
'
]
:
CFLAGS
+
=
CONFIG
[
'
MOZ_WAYLAND_CFLAGS
'
]
CXXFLAGS
+
=
CONFIG
[
'
MOZ_WAYLAND_CFLAGS
'
]
if
CONFIG
[
'
MOZ_ENABLE_DBUS
'
]
:
CXXFLAGS
+
=
CONFIG
[
'
MOZ_DBUS_GLIB_CFLAGS
'
]
CXXFLAGS
+
=
[
'
-
Wno
-
error
=
shadow
'
]
