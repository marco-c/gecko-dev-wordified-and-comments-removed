#
include
"
WindowSurfaceProvider
.
h
"
#
include
"
gfxPlatformGtk
.
h
"
#
include
"
GtkCompositorWidget
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
WidgetUtilsGtk
.
h
"
#
ifdef
MOZ_WAYLAND
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
WindowSurfaceCairo
.
h
"
#
include
"
WindowSurfaceWaylandMultiBuffer
.
h
"
#
endif
#
ifdef
MOZ_X11
#
include
"
mozilla
/
X11Util
.
h
"
#
include
"
WindowSurfaceX11Image
.
h
"
#
include
"
WindowSurfaceX11SHM
.
h
"
#
endif
#
undef
LOG
#
ifdef
MOZ_LOGGING
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
extern
mozilla
:
:
LazyLogModule
gWidgetLog
;
#
define
LOG
(
args
)
MOZ_LOG
(
gWidgetLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
else
#
define
LOG
(
args
)
#
endif
namespace
mozilla
{
namespace
widget
{
using
namespace
mozilla
:
:
layers
;
WindowSurfaceProvider
:
:
WindowSurfaceProvider
(
)
:
mWindowSurface
(
nullptr
)
mMutex
(
"
WindowSurfaceProvider
"
)
mWindowSurfaceValid
(
false
)
#
ifdef
MOZ_X11
mXDepth
(
0
)
mXWindow
(
0
)
mXVisual
(
nullptr
)
#
endif
{
}
WindowSurfaceProvider
:
:
~
WindowSurfaceProvider
(
)
{
#
ifdef
MOZ_WAYLAND
MOZ_DIAGNOSTIC_ASSERT
(
!
mWidget
"
nsWindow
reference
is
still
live
we
'
re
leaking
it
!
"
)
;
#
endif
#
ifdef
MOZ_X11
MOZ_DIAGNOSTIC_ASSERT
(
!
mXWindow
"
mXWindow
should
be
released
on
quit
!
"
)
;
#
endif
}
#
ifdef
MOZ_WAYLAND
bool
WindowSurfaceProvider
:
:
Initialize
(
RefPtr
<
nsWindow
>
aWidget
)
{
mWindowSurfaceValid
=
false
;
mWidget
=
std
:
:
move
(
aWidget
)
;
return
true
;
}
bool
WindowSurfaceProvider
:
:
Initialize
(
GtkCompositorWidget
*
aCompositorWidget
)
{
mWindowSurfaceValid
=
false
;
mCompositorWidget
=
aCompositorWidget
;
mWidget
=
static_cast
<
nsWindow
*
>
(
aCompositorWidget
-
>
RealWidget
(
)
)
;
return
true
;
}
#
endif
#
ifdef
MOZ_X11
bool
WindowSurfaceProvider
:
:
Initialize
(
Window
aWindow
)
{
mWindowSurfaceValid
=
false
;
XWindowAttributes
windowAttrs
;
if
(
!
XGetWindowAttributes
(
DefaultXDisplay
(
)
aWindow
&
windowAttrs
)
)
{
NS_WARNING
(
"
GtkCompositorWidget
(
)
:
XGetWindowAttributes
(
)
failed
!
"
)
;
return
false
;
}
mXWindow
=
aWindow
;
mXVisual
=
windowAttrs
.
visual
;
mXDepth
=
windowAttrs
.
depth
;
return
true
;
}
#
endif
void
WindowSurfaceProvider
:
:
CleanupResources
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mWindowSurfaceValid
=
false
;
#
ifdef
MOZ_WAYLAND
mWidget
=
nullptr
;
#
endif
#
ifdef
MOZ_X11
mXWindow
=
0
;
mXVisual
=
0
;
mXDepth
=
0
;
#
endif
}
RefPtr
<
WindowSurface
>
WindowSurfaceProvider
:
:
CreateWindowSurface
(
)
{
#
ifdef
MOZ_WAYLAND
if
(
GdkIsWaylandDisplay
(
)
)
{
if
(
!
mWidget
)
{
return
nullptr
;
}
if
(
mWidget
-
>
IsDragPopup
(
)
)
{
return
MakeRefPtr
<
WindowSurfaceCairo
>
(
mWidget
)
;
}
return
MakeRefPtr
<
WindowSurfaceWaylandMB
>
(
mWidget
mCompositorWidget
)
;
}
#
endif
#
ifdef
MOZ_X11
if
(
GdkIsX11Display
(
)
)
{
if
(
!
mXWindow
)
{
return
nullptr
;
}
#
ifdef
MOZ_HAVE_SHMIMAGE
if
(
nsShmImage
:
:
UseShm
(
)
)
{
LOG
(
(
"
Drawing
to
Window
0x
%
lx
will
use
MIT
-
SHM
\
n
"
(
Window
)
mXWindow
)
)
;
return
MakeRefPtr
<
WindowSurfaceX11SHM
>
(
DefaultXDisplay
(
)
mXWindow
mXVisual
mXDepth
)
;
}
#
endif
LOG
(
(
"
Drawing
to
Window
0x
%
lx
will
use
XPutImage
\
n
"
(
Window
)
mXWindow
)
)
;
return
MakeRefPtr
<
WindowSurfaceX11Image
>
(
DefaultXDisplay
(
)
mXWindow
mXVisual
mXDepth
)
;
}
#
endif
MOZ_RELEASE_ASSERT
(
false
)
;
}
MOZ_PUSH_IGNORE_THREAD_SAFETY
already_AddRefed
<
gfx
:
:
DrawTarget
>
WindowSurfaceProvider
:
:
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
if
(
aInvalidRegion
.
IsEmpty
(
)
)
{
return
nullptr
;
}
mMutex
.
Lock
(
)
;
auto
unlockMutex
=
MakeScopeExit
(
[
&
]
{
mMutex
.
Unlock
(
)
;
}
)
;
if
(
!
mWindowSurfaceValid
)
{
mWindowSurface
=
nullptr
;
mWindowSurfaceValid
=
true
;
}
if
(
!
mWindowSurface
)
{
mWindowSurface
=
CreateWindowSurface
(
)
;
if
(
!
mWindowSurface
)
{
return
nullptr
;
}
}
RefPtr
<
gfx
:
:
DrawTarget
>
dt
=
mWindowSurface
-
>
Lock
(
aInvalidRegion
)
;
#
ifdef
MOZ_X11
if
(
!
dt
&
&
GdkIsX11Display
(
)
&
&
!
mWindowSurface
-
>
IsFallback
(
)
)
{
gfxWarningOnce
(
)
<
<
"
Failed
to
lock
WindowSurface
falling
back
to
XPutImage
backend
.
"
;
mWindowSurface
=
MakeRefPtr
<
WindowSurfaceX11Image
>
(
DefaultXDisplay
(
)
mXWindow
mXVisual
mXDepth
)
;
dt
=
mWindowSurface
-
>
Lock
(
aInvalidRegion
)
;
}
#
endif
if
(
dt
)
{
unlockMutex
.
release
(
)
;
}
return
dt
.
forget
(
)
;
}
void
WindowSurfaceProvider
:
:
EndRemoteDrawingInRegion
(
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
{
mMutex
.
AssertCurrentThreadOwns
(
)
;
auto
unlockMutex
=
MakeScopeExit
(
[
&
]
{
mMutex
.
Unlock
(
)
;
}
)
;
if
(
!
mWindowSurface
|
|
!
mWindowSurfaceValid
)
{
return
;
}
#
if
defined
(
MOZ_WAYLAND
)
if
(
GdkIsWaylandDisplay
(
)
)
{
if
(
!
mWidget
|
|
!
mWidget
-
>
IsMapped
(
)
)
{
return
;
}
}
#
endif
mWindowSurface
-
>
Commit
(
aInvalidRegion
)
;
}
MOZ_POP_THREAD_SAFETY
}
}
