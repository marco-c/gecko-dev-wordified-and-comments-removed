#
ifndef
nsNativeBasicThemeGTK_h
#
define
nsNativeBasicThemeGTK_h
#
include
"
nsNativeBasicTheme
.
h
"
class
nsNativeBasicThemeGTK
:
public
nsNativeBasicTheme
{
public
:
nsNativeBasicThemeGTK
(
)
=
default
;
NS_IMETHOD
GetMinimumWidgetSize
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
StyleAppearance
aAppearance
mozilla
:
:
LayoutDeviceIntSize
*
aResult
bool
*
aIsOverridable
)
override
;
nsITheme
:
:
Transparency
GetWidgetTransparency
(
nsIFrame
*
aFrame
StyleAppearance
aAppearance
)
override
;
void
PaintScrollbarThumb
(
DrawTarget
*
aDrawTarget
const
LayoutDeviceRect
&
aRect
bool
aHorizontal
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
DPIRatio
aDpiRatio
)
override
;
void
PaintScrollbar
(
DrawTarget
*
aDrawTarget
const
LayoutDeviceRect
&
aRect
bool
aHorizontal
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aDocumentState
DPIRatio
aDpiRatio
bool
aIsRoot
)
override
;
void
PaintScrollCorner
(
DrawTarget
*
aDrawTarget
const
LayoutDeviceRect
&
aRect
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aDocumentState
DPIRatio
aDpiRatio
bool
aIsRoot
)
override
;
bool
ThemeSupportsScrollbarButtons
(
)
override
{
return
false
;
}
ScrollbarSizes
GetScrollbarSizes
(
nsPresContext
*
StyleScrollbarWidth
Overlay
)
override
;
protected
:
virtual
~
nsNativeBasicThemeGTK
(
)
=
default
;
}
;
#
endif
