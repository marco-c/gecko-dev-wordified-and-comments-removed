#
include
"
nsDeviceContextSpecG
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTargetPDF
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTargetPS
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
plstr
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsPrinter
.
h
"
#
include
"
nsPSPrinters
.
h
"
#
include
"
nsPrintSettingsGTK
.
h
"
#
include
"
nsIFileStreams
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
<
unistd
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
"
nsIGIOService
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
gfx
:
:
IntSize
;
using
mozilla
:
:
gfx
:
:
PrintTarget
;
using
mozilla
:
:
gfx
:
:
PrintTargetPDF
;
using
mozilla
:
:
gfx
:
:
PrintTargetPS
;
static
LazyLogModule
sDeviceContextSpecGTKLog
(
"
DeviceContextSpecGTK
"
)
;
class
GlobalPrinters
{
public
:
static
GlobalPrinters
*
GetInstance
(
)
{
return
&
mGlobalPrinters
;
}
~
GlobalPrinters
(
)
{
FreeGlobalPrinters
(
)
;
}
void
FreeGlobalPrinters
(
)
;
nsresult
InitializeGlobalPrinters
(
)
;
bool
PrintersAreAllocated
(
)
{
return
mGlobalPrinterList
!
=
nullptr
;
}
uint32_t
GetNumPrinters
(
)
{
return
mGlobalPrinterList
?
mGlobalPrinterList
-
>
Length
(
)
:
0
;
}
nsString
*
GetStringAt
(
int32_t
aInx
)
{
return
&
mGlobalPrinterList
-
>
ElementAt
(
aInx
)
;
}
void
GetSystemDefaultPrinterName
(
nsAString
&
aName
)
;
protected
:
GlobalPrinters
(
)
=
default
;
static
GlobalPrinters
mGlobalPrinters
;
static
nsTArray
<
nsString
>
*
mGlobalPrinterList
;
}
;
GlobalPrinters
GlobalPrinters
:
:
mGlobalPrinters
;
nsTArray
<
nsString
>
*
GlobalPrinters
:
:
mGlobalPrinterList
=
nullptr
;
nsDeviceContextSpecGTK
:
:
nsDeviceContextSpecGTK
(
)
:
mGtkPrintSettings
(
nullptr
)
mGtkPageSetup
(
nullptr
)
{
}
nsDeviceContextSpecGTK
:
:
~
nsDeviceContextSpecGTK
(
)
{
if
(
mGtkPageSetup
)
{
g_object_unref
(
mGtkPageSetup
)
;
}
if
(
mGtkPrintSettings
)
{
g_object_unref
(
mGtkPrintSettings
)
;
}
}
NS_IMPL_ISUPPORTS
(
nsDeviceContextSpecGTK
nsIDeviceContextSpec
)
already_AddRefed
<
PrintTarget
>
nsDeviceContextSpecGTK
:
:
MakePrintTarget
(
)
{
double
width
height
;
mPrintSettings
-
>
GetEffectivePageSize
(
&
width
&
height
)
;
width
/
=
TWIPS_PER_POINT_FLOAT
;
height
/
=
TWIPS_PER_POINT_FLOAT
;
nsresult
rv
;
MOZ_ASSERT
(
!
mSpoolFile
)
;
gchar
*
buf
;
gint
fd
=
g_file_open_tmp
(
"
XXXXXX
.
tmp
"
&
buf
nullptr
)
;
if
(
-
1
=
=
fd
)
return
nullptr
;
close
(
fd
)
;
rv
=
NS_NewNativeLocalFile
(
nsDependentCString
(
buf
)
false
getter_AddRefs
(
mSpoolFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
unlink
(
buf
)
;
g_free
(
buf
)
;
return
nullptr
;
}
mSpoolName
=
buf
;
g_free
(
buf
)
;
mSpoolFile
-
>
SetPermissions
(
0600
)
;
nsCOMPtr
<
nsIFileOutputStream
>
stream
=
do_CreateInstance
(
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
)
;
rv
=
stream
-
>
Init
(
mSpoolFile
-
1
-
1
0
)
;
if
(
NS_FAILED
(
rv
)
)
return
nullptr
;
int16_t
format
;
mPrintSettings
-
>
GetOutputFormat
(
&
format
)
;
if
(
format
=
=
nsIPrintSettings
:
:
kOutputFormatNative
)
{
format
=
nsIPrintSettings
:
:
kOutputFormatPDF
;
}
IntSize
size
=
IntSize
:
:
Truncate
(
width
height
)
;
if
(
format
=
=
nsIPrintSettings
:
:
kOutputFormatPDF
)
{
return
PrintTargetPDF
:
:
CreateOrNull
(
stream
size
)
;
}
int32_t
orientation
;
mPrintSettings
-
>
GetOrientation
(
&
orientation
)
;
return
PrintTargetPS
:
:
CreateOrNull
(
stream
size
orientation
=
=
nsIPrintSettings
:
:
kPortraitOrientation
?
PrintTargetPS
:
:
PORTRAIT
:
PrintTargetPS
:
:
LANDSCAPE
)
;
}
NS_IMETHODIMP
nsDeviceContextSpecGTK
:
:
Init
(
nsIWidget
*
aWidget
nsIPrintSettings
*
aPS
bool
aIsPrintPreview
)
{
if
(
gtk_major_version
<
2
|
|
(
gtk_major_version
=
=
2
&
&
gtk_minor_version
<
10
)
)
return
NS_ERROR_NOT_AVAILABLE
;
mPrintSettings
=
do_QueryInterface
(
aPS
)
;
if
(
!
mPrintSettings
)
return
NS_ERROR_NO_INTERFACE
;
bool
toFile
;
aPS
-
>
GetPrintToFile
(
&
toFile
)
;
mToPrinter
=
!
toFile
&
&
!
aIsPrintPreview
;
mGtkPrintSettings
=
mPrintSettings
-
>
GetGtkPrintSettings
(
)
;
mGtkPageSetup
=
mPrintSettings
-
>
GetGtkPageSetup
(
)
;
GtkPaperSize
*
geckosHackishPaperSize
=
gtk_page_setup_get_paper_size
(
mGtkPageSetup
)
;
GtkPaperSize
*
standardGtkPaperSize
=
gtk_paper_size_new
(
gtk_paper_size_get_name
(
geckosHackishPaperSize
)
)
;
mGtkPageSetup
=
gtk_page_setup_copy
(
mGtkPageSetup
)
;
mGtkPrintSettings
=
gtk_print_settings_copy
(
mGtkPrintSettings
)
;
GtkPaperSize
*
properPaperSize
;
if
(
gtk_paper_size_is_equal
(
geckosHackishPaperSize
standardGtkPaperSize
)
)
{
properPaperSize
=
standardGtkPaperSize
;
}
else
{
properPaperSize
=
geckosHackishPaperSize
;
}
gtk_print_settings_set_paper_size
(
mGtkPrintSettings
properPaperSize
)
;
gtk_page_setup_set_paper_size_and_default_margins
(
mGtkPageSetup
properPaperSize
)
;
gtk_paper_size_free
(
standardGtkPaperSize
)
;
return
NS_OK
;
}
static
void
print_callback
(
GtkPrintJob
*
aJob
gpointer
aData
const
GError
*
aError
)
{
g_object_unref
(
aJob
)
;
(
(
nsIFile
*
)
aData
)
-
>
Remove
(
false
)
;
}
static
void
ns_release_macro
(
gpointer
aData
)
{
nsIFile
*
spoolFile
=
(
nsIFile
*
)
aData
;
NS_RELEASE
(
spoolFile
)
;
}
gboolean
nsDeviceContextSpecGTK
:
:
PrinterEnumerator
(
GtkPrinter
*
aPrinter
gpointer
aData
)
{
nsDeviceContextSpecGTK
*
spec
=
(
nsDeviceContextSpecGTK
*
)
aData
;
nsString
printerName
;
nsresult
rv
=
spec
-
>
mPrintSettings
-
>
GetPrinterName
(
printerName
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
printerName
.
IsVoid
(
)
)
{
NS_ConvertUTF16toUTF8
requestedName
(
printerName
)
;
const
char
*
currentName
=
gtk_printer_get_name
(
aPrinter
)
;
if
(
requestedName
.
Equals
(
currentName
)
)
{
spec
-
>
mPrintSettings
-
>
SetGtkPrinter
(
aPrinter
)
;
NS_DispatchToCurrentThread
(
NewRunnableMethod
(
"
nsDeviceContextSpecGTK
:
:
StartPrintJob
"
spec
&
nsDeviceContextSpecGTK
:
:
StartPrintJob
)
)
;
return
TRUE
;
}
}
return
FALSE
;
}
void
nsDeviceContextSpecGTK
:
:
StartPrintJob
(
)
{
GtkPrintJob
*
job
=
gtk_print_job_new
(
mTitle
.
get
(
)
mPrintSettings
-
>
GetGtkPrinter
(
)
mGtkPrintSettings
mGtkPageSetup
)
;
if
(
!
gtk_print_job_set_source_file
(
job
mSpoolName
.
get
(
)
nullptr
)
)
return
;
NS_ADDREF
(
mSpoolFile
.
get
(
)
)
;
gtk_print_job_send
(
job
print_callback
mSpoolFile
ns_release_macro
)
;
}
void
nsDeviceContextSpecGTK
:
:
EnumeratePrinters
(
)
{
gtk_enumerate_printers
(
&
nsDeviceContextSpecGTK
:
:
PrinterEnumerator
this
nullptr
TRUE
)
;
}
NS_IMETHODIMP
nsDeviceContextSpecGTK
:
:
BeginDocument
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
{
if
(
gtk_check_version
(
3
18
2
)
!
=
nullptr
)
{
PrintTarget
:
:
AdjustPrintJobNameForIPP
(
aTitle
mTitle
)
;
}
else
{
CopyUTF16toUTF8
(
aTitle
mTitle
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsDeviceContextSpecGTK
:
:
EndDocument
(
)
{
if
(
mToPrinter
)
{
GtkPrinter
*
printer
=
mPrintSettings
-
>
GetGtkPrinter
(
)
;
if
(
printer
)
{
StartPrintJob
(
)
;
}
else
{
NS_DispatchToCurrentThread
(
NewRunnableMethod
(
"
nsDeviceContextSpecGTK
:
:
EnumeratePrinters
"
this
&
nsDeviceContextSpecGTK
:
:
EnumeratePrinters
)
)
;
}
}
else
{
nsString
targetPath
;
nsCOMPtr
<
nsIFile
>
destFile
;
mPrintSettings
-
>
GetToFileName
(
targetPath
)
;
nsresult
rv
=
NS_NewLocalFile
(
targetPath
false
getter_AddRefs
(
destFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsAutoString
destLeafName
;
rv
=
destFile
-
>
GetLeafName
(
destLeafName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIFile
>
destDir
;
rv
=
destFile
-
>
GetParent
(
getter_AddRefs
(
destDir
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
mSpoolFile
-
>
MoveTo
(
destDir
destLeafName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mode_t
mask
=
umask
(
0
)
;
umask
(
mask
)
;
destFile
-
>
SetPermissions
(
0666
&
~
(
mask
)
)
;
nsCOMPtr
<
nsIGIOService
>
giovfs
=
do_GetService
(
NS_GIOSERVICE_CONTRACTID
)
;
bool
shouldUsePortal
;
if
(
giovfs
)
{
giovfs
-
>
ShouldUseFlatpakPortal
(
&
shouldUsePortal
)
;
if
(
shouldUsePortal
)
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
os
-
>
NotifyObservers
(
nullptr
"
print
-
to
-
file
-
finished
"
targetPath
.
get
(
)
)
;
}
}
}
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
nsPrinterListGTK
nsIPrinterList
)
NS_IMETHODIMP
nsPrinterListGTK
:
:
GetPrinters
(
nsTArray
<
RefPtr
<
nsIPrinter
>
>
&
aPrinters
)
{
nsresult
rv
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
InitializeGlobalPrinters
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
uint32_t
numPrinters
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetNumPrinters
(
)
;
for
(
uint32_t
i
=
0
;
i
<
numPrinters
;
+
+
i
)
{
nsString
*
name
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetStringAt
(
i
)
;
if
(
RefPtr
<
nsPrinter
>
printer
=
nsPrinter
:
:
Create
(
*
name
)
)
{
aPrinters
.
AppendElement
(
printer
)
;
}
}
GlobalPrinters
:
:
GetInstance
(
)
-
>
FreeGlobalPrinters
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterListGTK
:
:
GetSystemDefaultPrinterName
(
nsAString
&
aName
)
{
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetSystemDefaultPrinterName
(
aName
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterListGTK
:
:
InitPrintSettingsFromPrinter
(
const
nsAString
&
aPrinterName
nsIPrintSettings
*
aPrintSettings
)
{
NS_ENSURE_ARG_POINTER
(
aPrintSettings
)
;
nsAutoString
filename
;
nsresult
rv
=
aPrintSettings
-
>
GetToFileName
(
filename
)
;
if
(
NS_FAILED
(
rv
)
|
|
filename
.
IsEmpty
(
)
)
{
const
char
*
path
=
PR_GetEnv
(
"
PWD
"
)
;
if
(
!
path
)
{
path
=
PR_GetEnv
(
"
HOME
"
)
;
}
if
(
path
)
{
CopyUTF8toUTF16
(
MakeStringSpan
(
path
)
filename
)
;
filename
.
AppendLiteral
(
"
/
mozilla
.
pdf
"
)
;
}
else
{
filename
.
AssignLiteral
(
"
mozilla
.
pdf
"
)
;
}
aPrintSettings
-
>
SetToFileName
(
filename
)
;
}
aPrintSettings
-
>
SetIsInitializedFromPrinter
(
true
)
;
return
NS_OK
;
}
nsresult
GlobalPrinters
:
:
InitializeGlobalPrinters
(
)
{
if
(
PrintersAreAllocated
(
)
)
{
return
NS_OK
;
}
mGlobalPrinterList
=
new
nsTArray
<
nsString
>
(
)
;
nsPSPrinterList
psMgr
;
if
(
psMgr
.
Enabled
(
)
)
{
nsTArray
<
nsCString
>
printerList
;
psMgr
.
GetPrinterList
(
printerList
)
;
for
(
uint32_t
i
=
0
;
i
<
printerList
.
Length
(
)
;
i
+
+
)
{
mGlobalPrinterList
-
>
AppendElement
(
NS_ConvertUTF8toUTF16
(
printerList
[
i
]
)
)
;
}
}
if
(
!
mGlobalPrinterList
-
>
Length
(
)
)
{
FreeGlobalPrinters
(
)
;
return
NS_ERROR_GFX_PRINTER_NO_PRINTER_AVAILABLE
;
}
return
NS_OK
;
}
void
GlobalPrinters
:
:
FreeGlobalPrinters
(
)
{
if
(
mGlobalPrinterList
)
{
delete
mGlobalPrinterList
;
mGlobalPrinterList
=
nullptr
;
}
}
void
GlobalPrinters
:
:
GetSystemDefaultPrinterName
(
nsAString
&
aName
)
{
aName
.
Truncate
(
)
;
bool
allocate
=
!
GlobalPrinters
:
:
GetInstance
(
)
-
>
PrintersAreAllocated
(
)
;
if
(
allocate
)
{
nsresult
rv
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
InitializeGlobalPrinters
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
}
NS_ASSERTION
(
GlobalPrinters
:
:
GetInstance
(
)
-
>
PrintersAreAllocated
(
)
"
no
GlobalPrinters
"
)
;
if
(
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetNumPrinters
(
)
=
=
0
)
return
;
aName
=
*
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetStringAt
(
0
)
;
if
(
allocate
)
{
GlobalPrinters
:
:
GetInstance
(
)
-
>
FreeGlobalPrinters
(
)
;
}
}
