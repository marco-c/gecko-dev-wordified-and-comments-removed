#
ifndef
_WaylandVsyncSource_h_
#
define
_WaylandVsyncSource_h_
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerWayland
.
h
"
#
include
"
MozContainer
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
VsyncSource
.
h
"
namespace
mozilla
{
using
layers
:
:
NativeLayerRootWayland
;
class
WaylandVsyncSource
final
:
public
gfx
:
:
VsyncSource
{
public
:
explicit
WaylandVsyncSource
(
nsWindow
*
aWindow
)
;
virtual
~
WaylandVsyncSource
(
)
;
static
Maybe
<
TimeDuration
>
GetFastestVsyncRate
(
)
;
void
MaybeUpdateSource
(
MozContainer
*
aContainer
)
;
void
MaybeUpdateSource
(
const
RefPtr
<
NativeLayerRootWayland
>
&
aNativeLayerRoot
)
;
void
EnableMonitor
(
)
;
void
DisableMonitor
(
)
;
void
FrameCallback
(
wl_callback
*
aCallback
uint32_t
aTime
)
;
bool
IdleCallback
(
)
;
TimeDuration
GetVsyncRate
(
)
override
;
void
EnableVsync
(
)
override
;
void
DisableVsync
(
)
override
;
bool
IsVsyncEnabled
(
)
override
;
void
Shutdown
(
)
override
;
private
:
Maybe
<
TimeDuration
>
GetVsyncRateIfEnabled
(
)
;
void
Refresh
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
SetupFrameCallback
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
CalculateVsyncRate
(
const
MutexAutoLock
&
aProofOfLock
TimeStamp
aVsyncTimestamp
)
;
void
*
GetWindowForLogging
(
)
{
return
mWindow
;
}
;
Mutex
mMutex
;
bool
mIsShutdown
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
bool
mVsyncEnabled
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
bool
mMonitorEnabled
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
bool
mCallbackRequested
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
MozContainer
*
mContainer
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
RefPtr
<
NativeLayerRootWayland
>
mNativeLayerRoot
MOZ_GUARDED_BY
(
mMutex
)
;
TimeDuration
mVsyncRate
MOZ_GUARDED_BY
(
mMutex
)
;
TimeStamp
mLastVsyncTimeStamp
MOZ_GUARDED_BY
(
mMutex
)
;
wl_callback
*
mCallback
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
guint
mIdleTimerID
=
0
;
nsWindow
*
const
mWindow
;
const
guint
mIdleTimeout
;
}
;
}
#
endif
