#
ifndef
_WaylandVsyncSource_h_
#
define
_WaylandVsyncSource_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozcontainer
.
h
"
#
include
"
VsyncSource
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
namespace
mozilla
{
class
WaylandVsyncSource
final
:
public
gfx
:
:
VsyncSource
{
public
:
explicit
WaylandVsyncSource
(
MozContainer
*
container
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mGlobalDisplay
=
new
WaylandDisplay
(
container
)
;
}
virtual
~
WaylandVsyncSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
virtual
Display
&
GetGlobalDisplay
(
)
override
{
return
*
mGlobalDisplay
;
}
struct
WaylandFrameCallbackContext
;
class
WaylandDisplay
final
:
public
mozilla
:
:
gfx
:
:
VsyncSource
:
:
Display
{
public
:
explicit
WaylandDisplay
(
MozContainer
*
container
)
;
bool
Setup
(
)
;
void
EnableMonitor
(
)
;
void
DisableMonitor
(
)
;
void
FrameCallback
(
)
;
void
Notify
(
)
;
virtual
void
EnableVsync
(
)
override
;
virtual
void
DisableVsync
(
)
override
;
virtual
bool
IsVsyncEnabled
(
)
override
;
virtual
void
Shutdown
(
)
override
;
private
:
virtual
~
WaylandDisplay
(
)
=
default
;
void
Loop
(
)
;
void
SetupFrameCallback
(
)
;
void
ClearFrameCallback
(
)
;
base
:
:
Thread
mThread
;
RefPtr
<
Runnable
>
mTask
;
WaylandFrameCallbackContext
*
mCallbackContext
;
Monitor
mNotifyThreadMonitor
;
Mutex
mEnabledLock
;
bool
mVsyncEnabled
;
bool
mMonitorEnabled
;
bool
mShutdown
;
struct
wl_display
*
mDisplay
;
MozContainer
*
mContainer
;
}
;
struct
WaylandFrameCallbackContext
{
explicit
WaylandFrameCallbackContext
(
WaylandVsyncSource
:
:
WaylandDisplay
*
aDisplay
)
:
mEnabled
(
true
)
mDisplay
(
aDisplay
)
{
}
bool
mEnabled
;
WaylandVsyncSource
:
:
WaylandDisplay
*
mDisplay
;
}
;
private
:
RefPtr
<
WaylandDisplay
>
mGlobalDisplay
;
}
;
}
#
endif
