#
ifndef
_WaylandVsyncSource_h_
#
define
_WaylandVsyncSource_h_
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
layers
/
NativeLayerWayland
.
h
"
#
include
"
MozContainer
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
VsyncSource
.
h
"
namespace
mozilla
{
using
layers
:
:
NativeLayerRootWayland
;
class
WaylandVsyncSource
final
:
public
gfx
:
:
VsyncSource
{
public
:
WaylandVsyncSource
(
)
{
mGlobalDisplay
=
new
WaylandDisplay
(
)
;
}
virtual
~
WaylandVsyncSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
virtual
Display
&
GetGlobalDisplay
(
)
override
{
return
*
mGlobalDisplay
;
}
class
WaylandDisplay
final
:
public
mozilla
:
:
gfx
:
:
VsyncSource
:
:
Display
{
public
:
WaylandDisplay
(
)
;
void
MaybeUpdateSource
(
MozContainer
*
aContainer
)
;
void
MaybeUpdateSource
(
const
RefPtr
<
NativeLayerRootWayland
>
&
aNativeLayerRoot
)
;
void
EnableMonitor
(
)
;
void
DisableMonitor
(
)
;
void
FrameCallback
(
uint32_t
aTime
)
;
TimeDuration
GetVsyncRate
(
)
override
;
virtual
void
EnableVsync
(
)
override
;
virtual
void
DisableVsync
(
)
override
;
virtual
bool
IsVsyncEnabled
(
)
override
;
virtual
void
Shutdown
(
)
override
;
private
:
virtual
~
WaylandDisplay
(
)
=
default
;
void
Refresh
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
SetupFrameCallback
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
CalculateVsyncRate
(
const
MutexAutoLock
&
aProofOfLock
TimeStamp
aVsyncTimestamp
)
;
Mutex
mMutex
;
bool
mIsShutdown
;
bool
mVsyncEnabled
;
bool
mMonitorEnabled
;
bool
mCallbackRequested
;
MozContainer
*
mContainer
;
RefPtr
<
NativeLayerRootWayland
>
mNativeLayerRoot
;
TimeDuration
mVsyncRate
;
TimeStamp
mLastVsyncTimeStamp
;
}
;
private
:
RefPtr
<
WaylandDisplay
>
mGlobalDisplay
;
}
;
}
#
endif
