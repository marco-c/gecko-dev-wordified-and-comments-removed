#
ifndef
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_H
#
define
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_H
#
include
<
prthread
.
h
>
#
include
"
gfxImageSurface
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
WaylandBuffer
.
h
"
#
include
"
WindowSurface
.
h
"
#
define
BACK_BUFFER_NUM
3
namespace
mozilla
:
:
widget
{
class
WindowImageSurface
{
public
:
void
DrawToTarget
(
gfx
:
:
DrawTarget
*
aDest
LayoutDeviceIntRegion
&
aWaylandBufferDamage
)
;
WindowImageSurface
(
gfx
:
:
DataSourceSurface
*
aImageSurface
const
LayoutDeviceIntRegion
&
aUpdateRegion
)
;
bool
OverlapsSurface
(
class
WindowImageSurface
&
aBottomSurface
)
;
const
LayoutDeviceIntRegion
*
GetUpdateRegion
(
)
{
return
&
mUpdateRegion
;
}
;
private
:
RefPtr
<
gfx
:
:
DataSourceSurface
>
mImageSurface
;
const
LayoutDeviceIntRegion
mUpdateRegion
;
}
;
class
WindowSurfaceWayland
:
public
WindowSurface
{
public
:
explicit
WindowSurfaceWayland
(
RefPtr
<
nsWindow
>
aWindow
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
Lock
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
void
Commit
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
final
;
void
FlushPendingCommits
(
)
;
RefPtr
<
nsWaylandDisplay
>
GetWaylandDisplay
(
)
{
return
mWaylandDisplay
;
}
;
static
void
FrameCallbackHandler
(
void
*
aData
struct
wl_callback
*
aCallback
uint32_t
aTime
)
;
static
void
BufferReleaseCallbackHandler
(
void
*
aData
wl_buffer
*
aBuffer
)
;
private
:
~
WindowSurfaceWayland
(
)
;
WaylandBufferSHM
*
GetWaylandBuffer
(
)
;
WaylandBufferSHM
*
SetNewWaylandBuffer
(
)
;
WaylandBufferSHM
*
CreateWaylandBuffer
(
const
LayoutDeviceIntSize
&
aSize
)
;
WaylandBufferSHM
*
WaylandBufferFindAvailable
(
const
LayoutDeviceIntSize
&
aSize
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
LockWaylandBuffer
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
LockImageSurface
(
const
gfx
:
:
IntSize
&
aLockSize
)
;
void
CacheImageSurface
(
const
LayoutDeviceIntRegion
&
aRegion
)
;
bool
CommitImageCacheToWaylandBuffer
(
)
;
bool
DrawDelayedImageCommits
(
gfx
:
:
DrawTarget
*
aDrawTarget
LayoutDeviceIntRegion
&
aWaylandBufferDamage
)
;
bool
FlushPendingCommitsLocked
(
)
;
void
FrameCallbackHandler
(
)
;
void
BufferReleaseCallbackHandler
(
wl_buffer
*
aBuffer
)
;
RefPtr
<
nsWindow
>
mWindow
;
LayoutDeviceIntSize
mMozContainerSize
;
LayoutDeviceIntSize
mWLBufferSize
;
RefPtr
<
nsWaylandDisplay
>
mWaylandDisplay
;
RefPtr
<
WaylandBufferSHM
>
mWaylandBuffer
;
RefPtr
<
WaylandBufferSHM
>
mShmBackupBuffer
[
BACK_BUFFER_NUM
]
;
bool
mWaylandFullscreenDamage
;
LayoutDeviceIntRegion
mWaylandBufferDamage
;
wl_callback
*
mFrameCallback
;
int
mLastCommittedSurfaceID
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mImageSurface
;
AutoTArray
<
WindowImageSurface
30
>
mDelayedImageCommits
;
int64_t
mLastCommitTime
;
bool
mDrawToWaylandBufferDirectly
;
bool
mCanSwitchWaylandBuffer
;
bool
mWLBufferIsDirty
;
bool
mBufferCommitAllowed
;
bool
mBufferNeedsClear
;
typedef
enum
{
CACHE_NONE
=
0
CACHE_SMALL
=
1
CACHE_ALL
=
2
}
RenderingCacheMode
;
unsigned
int
mSmoothRendering
;
int
mSurfaceReadyTimerID
;
mozilla
:
:
Mutex
mSurfaceLock
;
}
;
}
#
endif
