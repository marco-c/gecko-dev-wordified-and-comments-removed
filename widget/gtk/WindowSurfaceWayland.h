#
ifndef
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_H
#
define
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_H
#
include
<
prthread
.
h
>
#
include
"
gfxImageSurface
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
WindowSurface
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
define
BACK_BUFFER_NUM
3
namespace
mozilla
{
namespace
widget
{
class
WindowSurfaceWayland
;
class
WaylandShmPool
{
public
:
bool
Create
(
RefPtr
<
nsWaylandDisplay
>
aWaylandDisplay
int
aSize
)
;
void
Release
(
)
;
wl_shm_pool
*
GetShmPool
(
)
{
return
mShmPool
;
}
;
void
*
GetImageData
(
)
{
return
mImageData
;
}
;
void
SetImageDataFromPool
(
class
WaylandShmPool
*
aSourcePool
int
aImageDataSize
)
;
WaylandShmPool
(
)
;
~
WaylandShmPool
(
)
;
private
:
wl_shm_pool
*
mShmPool
;
int
mShmPoolFd
;
int
mAllocatedSize
;
void
*
mImageData
;
}
;
class
WindowBackBuffer
{
public
:
explicit
WindowBackBuffer
(
WindowSurfaceWayland
*
aWindowSurfaceWayland
)
;
~
WindowBackBuffer
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
Lock
(
)
;
bool
IsLocked
(
)
{
return
mIsLocked
;
}
;
void
Unlock
(
)
{
mIsLocked
=
false
;
}
;
void
Attach
(
wl_surface
*
aSurface
)
;
void
Detach
(
wl_buffer
*
aBuffer
)
;
bool
IsAttached
(
)
{
return
mAttached
;
}
void
SetAttached
(
)
{
mAttached
=
true
;
}
;
void
Clear
(
)
;
bool
Create
(
int
aWidth
int
aHeight
)
;
bool
Resize
(
int
aWidth
int
aHeight
)
;
bool
SetImageDataFromBuffer
(
class
WindowBackBuffer
*
aSourceBuffer
)
;
int
GetWidth
(
)
{
return
mWidth
;
}
;
int
GetHeight
(
)
{
return
mHeight
;
}
;
wl_buffer
*
GetWlBuffer
(
)
{
return
mWLBuffer
;
}
;
bool
IsMatchingSize
(
int
aWidth
int
aHeight
)
{
return
aWidth
=
=
GetWidth
(
)
&
&
aHeight
=
=
GetHeight
(
)
;
}
bool
IsMatchingSize
(
class
WindowBackBuffer
*
aBuffer
)
{
return
aBuffer
-
>
IsMatchingSize
(
GetWidth
(
)
GetHeight
(
)
)
;
}
static
gfx
:
:
SurfaceFormat
GetSurfaceFormat
(
)
{
return
mFormat
;
}
RefPtr
<
nsWaylandDisplay
>
GetWaylandDisplay
(
)
;
private
:
void
ReleaseShmSurface
(
)
;
static
gfx
:
:
SurfaceFormat
mFormat
;
WindowSurfaceWayland
*
mWindowSurfaceWayland
;
WaylandShmPool
mShmPool
;
wl_buffer
*
mWLBuffer
;
int
mWidth
;
int
mHeight
;
bool
mAttached
;
bool
mIsLocked
;
}
;
class
WindowImageSurface
{
public
:
static
void
Draw
(
gfx
:
:
SourceSurface
*
aSurface
gfx
:
:
DrawTarget
*
aDest
const
LayoutDeviceIntRegion
&
aRegion
)
;
void
Draw
(
gfx
:
:
DrawTarget
*
aDest
LayoutDeviceIntRegion
&
aWaylandBufferDamage
)
;
WindowImageSurface
(
gfxImageSurface
*
aImageSurface
const
LayoutDeviceIntRegion
&
aUpdateRegion
)
;
bool
OverlapsSurface
(
class
WindowImageSurface
&
aBottomSurface
)
;
const
LayoutDeviceIntRegion
*
GetUpdateRegion
(
)
{
return
&
mUpdateRegion
;
}
;
private
:
RefPtr
<
gfx
:
:
SourceSurface
>
mSurface
;
RefPtr
<
gfxImageSurface
>
mImageSurface
;
const
LayoutDeviceIntRegion
mUpdateRegion
;
}
;
class
WindowSurfaceWayland
:
public
WindowSurface
{
public
:
explicit
WindowSurfaceWayland
(
nsWindow
*
aWindow
)
;
~
WindowSurfaceWayland
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
Lock
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
void
Commit
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
final
;
void
FrameCallbackHandler
(
)
;
void
FlushPendingCommits
(
)
;
RefPtr
<
nsWaylandDisplay
>
GetWaylandDisplay
(
)
{
return
mWaylandDisplay
;
}
;
typedef
enum
{
CACHE_ALL
=
0
CACHE_MISSING
=
1
CACHE_NONE
=
2
}
RenderingCacheMode
;
private
:
WindowBackBuffer
*
GetWaylandBufferWithSwitch
(
)
;
WindowBackBuffer
*
GetWaylandBufferRecent
(
)
;
WindowBackBuffer
*
SetNewWaylandBuffer
(
)
;
WindowBackBuffer
*
CreateWaylandBuffer
(
int
aWidth
int
aHeight
)
;
WindowBackBuffer
*
WaylandBufferFindAvailable
(
int
aWidth
int
aHeight
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
LockWaylandBuffer
(
)
;
void
UnlockWaylandBuffer
(
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
LockImageSurface
(
const
gfx
:
:
IntSize
&
aLockSize
)
;
void
CacheImageSurface
(
const
LayoutDeviceIntRegion
&
aRegion
)
;
bool
CommitImageCacheToWaylandBuffer
(
)
;
void
DrawDelayedImageCommits
(
gfx
:
:
DrawTarget
*
aDrawTarget
LayoutDeviceIntRegion
&
aWaylandBufferDamage
)
;
bool
FlushPendingCommitsLocked
(
)
;
nsWindow
*
mWindow
;
LayoutDeviceIntRect
mLockedScreenRect
;
LayoutDeviceIntRect
mWLBufferRect
;
RefPtr
<
nsWaylandDisplay
>
mWaylandDisplay
;
WindowBackBuffer
*
mWaylandBuffer
;
WindowBackBuffer
*
mShmBackupBuffer
[
BACK_BUFFER_NUM
]
;
bool
mWaylandFullscreenDamage
;
LayoutDeviceIntRegion
mWaylandBufferDamage
;
wl_callback
*
mFrameCallback
;
wl_surface
*
mLastCommittedSurface
;
RefPtr
<
gfxImageSurface
>
mImageSurface
;
AutoTArray
<
WindowImageSurface
30
>
mDelayedImageCommits
;
int64_t
mLastCommitTime
;
bool
mDrawToWaylandBufferDirectly
;
bool
mCanSwitchWaylandBuffer
;
bool
mBufferPendingCommit
;
bool
mBufferCommitAllowed
;
bool
mBufferNeedsClear
;
bool
mSmoothRendering
;
gint
mSurfaceReadyTimerID
;
mozilla
:
:
Mutex
mSurfaceLock
;
}
;
}
}
#
endif
