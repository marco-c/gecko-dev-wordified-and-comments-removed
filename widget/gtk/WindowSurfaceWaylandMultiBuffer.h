#
ifndef
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_MULTI_BUFFER_H
#
define
_MOZILLA_WIDGET_GTK_WINDOW_SURFACE_WAYLAND_MULTI_BUFFER_H
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
WaylandShmBuffer
.
h
"
#
include
"
WindowSurface
.
h
"
namespace
mozilla
:
:
widget
{
using
gfx
:
:
DrawTarget
;
class
WindowSurfaceWaylandMB
:
public
WindowSurface
{
public
:
explicit
WindowSurfaceWaylandMB
(
nsWindow
*
aWindow
)
;
~
WindowSurfaceWaylandMB
(
)
=
default
;
already_AddRefed
<
DrawTarget
>
Lock
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
void
Commit
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
final
;
RefPtr
<
nsWaylandDisplay
>
GetWaylandDisplay
(
)
{
return
mWaylandDisplay
;
}
;
static
void
BufferReleaseCallbackHandler
(
void
*
aData
wl_buffer
*
aBuffer
)
;
private
:
RefPtr
<
WaylandShmBuffer
>
GetWaylandBuffer
(
)
;
RefPtr
<
WaylandShmBuffer
>
ObtainBufferFromPool
(
const
LayoutDeviceIntSize
&
aSize
)
;
void
ReturnBufferToPool
(
const
RefPtr
<
WaylandShmBuffer
>
&
aBuffer
)
;
void
EnforcePoolSizeLimit
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
PrepareBufferForFrame
(
const
MutexAutoLock
&
aProofOfLock
)
;
void
HandlePartialUpdate
(
const
MutexAutoLock
&
aProofOfLock
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
;
void
IncrementBufferAge
(
)
;
void
BufferReleaseCallbackHandler
(
wl_buffer
*
aBuffer
)
;
mozilla
:
:
Mutex
mSurfaceLock
;
nsWindow
*
mWindow
;
RefPtr
<
nsWaylandDisplay
>
mWaylandDisplay
;
RefPtr
<
WaylandShmBuffer
>
mWaylandBuffer
;
LayoutDeviceIntSize
mMozContainerSize
;
RefPtr
<
WaylandShmBuffer
>
mPreviousWaylandBuffer
;
LayoutDeviceIntRegion
mPreviousInvalidRegion
;
nsTArray
<
RefPtr
<
WaylandShmBuffer
>
>
mInUseBuffers
;
nsTArray
<
RefPtr
<
WaylandShmBuffer
>
>
mAvailableBuffers
;
}
;
}
#
endif
