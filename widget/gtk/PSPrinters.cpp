#
include
"
nscore
.
h
"
#
include
"
PSPrinters
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
prlink
.
h
"
#
include
"
prenv
.
h
"
#
include
"
plstr
.
h
"
#
define
NS_POSTSCRIPT_DRIVER_NAME
"
PostScript
/
"
namespace
mozilla
{
bool
PSPrinters
:
:
Enabled
(
)
{
const
char
*
val
=
PR_GetEnv
(
"
MOZILLA_POSTSCRIPT_ENABLED
"
)
;
if
(
val
&
&
(
val
[
0
]
=
=
'
0
'
|
|
!
PL_strcasecmp
(
val
"
false
"
)
)
)
return
false
;
return
Preferences
:
:
GetBool
(
"
print
.
postscript
.
enabled
"
true
)
;
}
void
PSPrinters
:
:
GetPrinterList
(
nsTArray
<
nsCString
>
&
aList
)
{
aList
.
Clear
(
)
;
aList
.
AppendElement
(
nsLiteralCString
(
NS_POSTSCRIPT_DRIVER_NAME
"
default
"
)
)
;
nsAutoCString
list
(
PR_GetEnv
(
"
MOZILLA_POSTSCRIPT_PRINTER_LIST
"
)
)
;
if
(
list
.
IsEmpty
(
)
)
{
Preferences
:
:
GetCString
(
"
print
.
printer_list
"
list
)
;
}
if
(
!
list
.
IsEmpty
(
)
)
{
char
*
state
;
for
(
char
*
name
=
PL_strtok_r
(
list
.
BeginWriting
(
)
"
"
&
state
)
;
nullptr
!
=
name
;
name
=
PL_strtok_r
(
nullptr
"
"
&
state
)
)
{
if
(
0
!
=
strcmp
(
name
"
default
"
)
)
{
nsAutoCString
fullName
(
NS_POSTSCRIPT_DRIVER_NAME
)
;
fullName
.
Append
(
name
)
;
aList
.
AppendElement
(
fullName
)
;
}
}
}
}
bool
PSPrinters
:
:
IsPSPrinter
(
const
nsACString
&
aName
)
{
return
StringBeginsWith
(
aName
nsLiteralCString
(
NS_POSTSCRIPT_DRIVER_NAME
)
)
;
}
}
