#
ifndef
WidgetUtilsGtk_h__
#
define
WidgetUtilsGtk_h__
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
<
stdint
.
h
>
typedef
struct
_GdkDisplay
GdkDisplay
;
typedef
struct
_GdkDevice
GdkDevice
;
typedef
struct
_GError
GError
;
typedef
union
_GdkEvent
GdkEvent
;
class
nsWindow
;
namespace
mozilla
:
:
widget
{
class
WidgetUtilsGTK
{
public
:
static
int32_t
IsTouchDeviceSupportPresent
(
)
;
}
;
bool
IsMainWindowTransparent
(
)
;
bool
GdkIsWaylandDisplay
(
GdkDisplay
*
display
)
;
bool
GdkIsX11Display
(
GdkDisplay
*
display
)
;
bool
GdkIsWaylandDisplay
(
)
;
bool
GdkIsX11Display
(
)
;
bool
IsXWaylandProtocol
(
)
;
GdkDevice
*
GdkGetPointer
(
)
;
void
SetLastMousePressEvent
(
GdkEvent
*
)
;
GdkEvent
*
GetLastMousePressEvent
(
)
;
const
char
*
GetSnapInstanceName
(
)
;
bool
IsRunningUnderSnap
(
)
;
bool
IsRunningUnderFlatpak
(
)
;
bool
IsPackagedAppFileExists
(
)
;
inline
bool
IsRunningUnderFlatpakOrSnap
(
)
{
return
IsRunningUnderFlatpak
(
)
|
|
IsRunningUnderSnap
(
)
;
}
enum
class
PortalKind
{
FilePicker
MimeHandler
NativeMessaging
Settings
Location
OpenUri
}
;
bool
ShouldUsePortal
(
PortalKind
)
;
const
nsCString
&
GetDesktopEnvironmentIdentifier
(
)
;
bool
IsGnomeDesktopEnvironment
(
)
;
bool
IsKdeDesktopEnvironment
(
)
;
nsTArray
<
nsCString
>
ParseTextURIList
(
const
nsACString
&
data
)
;
using
FocusRequestPromise
=
MozPromise
<
nsCString
bool
false
>
;
RefPtr
<
FocusRequestPromise
>
RequestWaylandFocusPromise
(
)
;
bool
IsCancelledGError
(
GError
*
aGError
)
;
#
if
defined
(
MOZ_X11
)
nsCString
SynthesizeStartupToken
(
)
;
void
FindLatestUserTime
(
GdkDisplay
*
aDisplay
uintptr_t
aWindow
unsigned
long
*
aLatestTime
)
;
#
endif
}
#
endif
