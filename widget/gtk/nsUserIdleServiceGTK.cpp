#
include
<
gtk
/
gtk
.
h
>
#
include
"
nsUserIdleServiceGTK
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
prlink
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
WidgetUtilsGtk
.
h
"
using
mozilla
:
:
LogLevel
;
static
mozilla
:
:
LazyLogModule
sIdleLog
(
"
nsIUserIdleService
"
)
;
typedef
bool
(
*
_XScreenSaverQueryExtension_fn
)
(
Display
*
dpy
int
*
event_base
int
*
error_base
)
;
typedef
XScreenSaverInfo
*
(
*
_XScreenSaverAllocInfo_fn
)
(
void
)
;
typedef
void
(
*
_XScreenSaverQueryInfo_fn
)
(
Display
*
dpy
Drawable
drw
XScreenSaverInfo
*
info
)
;
static
bool
sInitialized
=
false
;
static
_XScreenSaverQueryExtension_fn
_XSSQueryExtension
=
nullptr
;
static
_XScreenSaverAllocInfo_fn
_XSSAllocInfo
=
nullptr
;
static
_XScreenSaverQueryInfo_fn
_XSSQueryInfo
=
nullptr
;
static
void
Initialize
(
)
{
if
(
!
mozilla
:
:
widget
:
:
GdkIsX11Display
(
)
)
{
return
;
}
PRLibrary
*
xsslib
=
PR_LoadLibrary
(
"
libXss
.
so
.
1
"
)
;
if
(
!
xsslib
)
{
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
Failed
to
find
libXss
.
so
!
\
n
"
)
)
;
return
;
}
_XSSQueryExtension
=
(
_XScreenSaverQueryExtension_fn
)
PR_FindFunctionSymbol
(
xsslib
"
XScreenSaverQueryExtension
"
)
;
_XSSAllocInfo
=
(
_XScreenSaverAllocInfo_fn
)
PR_FindFunctionSymbol
(
xsslib
"
XScreenSaverAllocInfo
"
)
;
_XSSQueryInfo
=
(
_XScreenSaverQueryInfo_fn
)
PR_FindFunctionSymbol
(
xsslib
"
XScreenSaverQueryInfo
"
)
;
if
(
!
_XSSQueryExtension
)
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
Failed
to
get
XSSQueryExtension
!
\
n
"
)
)
;
if
(
!
_XSSAllocInfo
)
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
Failed
to
get
XSSAllocInfo
!
\
n
"
)
)
;
if
(
!
_XSSQueryInfo
)
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
Failed
to
get
XSSQueryInfo
!
\
n
"
)
)
;
sInitialized
=
true
;
}
nsUserIdleServiceGTK
:
:
nsUserIdleServiceGTK
(
)
:
mXssInfo
(
nullptr
)
{
Initialize
(
)
;
}
nsUserIdleServiceGTK
:
:
~
nsUserIdleServiceGTK
(
)
{
if
(
mXssInfo
)
XFree
(
mXssInfo
)
;
#
if
0
if
(
xsslib
)
{
PR_UnloadLibrary
(
xsslib
)
;
xsslib
=
nullptr
;
}
#
endif
}
bool
nsUserIdleServiceGTK
:
:
PollIdleTime
(
uint32_t
*
aIdleTime
)
{
if
(
!
sInitialized
)
{
return
false
;
}
*
aIdleTime
=
0
;
Display
*
dplay
=
GDK_DISPLAY_XDISPLAY
(
gdk_display_get_default
(
)
)
;
if
(
!
dplay
)
{
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
No
display
found
!
\
n
"
)
)
;
return
false
;
}
if
(
!
_XSSQueryExtension
|
|
!
_XSSAllocInfo
|
|
!
_XSSQueryInfo
)
{
return
false
;
}
int
event_base
error_base
;
if
(
_XSSQueryExtension
(
dplay
&
event_base
&
error_base
)
)
{
if
(
!
mXssInfo
)
mXssInfo
=
_XSSAllocInfo
(
)
;
if
(
!
mXssInfo
)
return
false
;
_XSSQueryInfo
(
dplay
GDK_ROOT_WINDOW
(
)
mXssInfo
)
;
*
aIdleTime
=
mXssInfo
-
>
idle
;
return
true
;
}
MOZ_LOG
(
sIdleLog
LogLevel
:
:
Warning
(
"
XSSQueryExtension
returned
false
!
\
n
"
)
)
;
return
false
;
}
bool
nsUserIdleServiceGTK
:
:
UsePollMode
(
)
{
return
sInitialized
;
}
