#
ifndef
__MOZ_WAYLAND_SURFACE_H__
#
define
__MOZ_WAYLAND_SURFACE_H__
#
include
"
nsWaylandDisplay
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
WaylandSurfaceLock
.
h
"
#
include
"
mozilla
/
GRefPtr
.
h
"
struct
wl_surface
;
struct
wl_subsurface
;
struct
wl_egl_window
;
class
MessageLoop
;
namespace
mozilla
:
:
widget
{
class
WaylandBuffer
;
class
WaylandSurface
final
{
friend
WaylandSurfaceLock
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WaylandSurface
)
;
WaylandSurface
(
RefPtr
<
WaylandSurface
>
aParent
gfx
:
:
IntSize
aSize
)
;
#
ifdef
MOZ_LOGGING
nsAutoCString
GetDebugTag
(
)
const
;
void
*
GetLoggingWidget
(
)
const
{
return
mLoggingWidget
;
}
;
void
SetLoggingWidget
(
void
*
aWidget
)
{
mLoggingWidget
=
aWidget
;
}
#
endif
void
ReadyToDrawFrameCallbackHandler
(
struct
wl_callback
*
aCallback
)
;
void
AddOrFireReadyToDrawCallback
(
const
std
:
:
function
<
void
(
void
)
>
&
aDrawCB
)
;
void
ClearReadyToDrawCallbacks
(
)
;
void
FrameCallbackHandler
(
struct
wl_callback
*
aCallback
uint32_t
aTime
bool
aRoutedFromChildSurface
)
;
void
AddOneTimeFrameCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
wl_callback
*
uint32_t
)
>
&
aFrameCallbackHandler
)
;
void
AddPersistentFrameCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
wl_callback
*
uint32_t
)
>
&
aFrameCallbackHandler
bool
aEmulateFrameCallback
=
false
)
;
void
SetFrameCallbackState
(
bool
aEnabled
)
;
wl_egl_window
*
GetEGLWindow
(
nsIntSize
aUnscaledSize
)
;
bool
SetEGLWindowSize
(
nsIntSize
aScaledSize
)
;
bool
HasEGLWindow
(
)
const
{
return
!
!
mEGLWindow
;
}
bool
IsReadyToDraw
(
)
const
{
return
mIsReadyToDraw
;
}
bool
IsMapped
(
)
const
{
return
mIsMapped
;
}
bool
IsPendingGdkCleanup
(
)
const
{
return
mIsPendingGdkCleanup
;
}
bool
IsOpaqueSurfaceHandlerSet
(
)
const
{
return
mIsOpaqueSurfaceHandlerSet
;
}
bool
HasBufferAttached
(
)
const
{
return
mBufferAttached
;
}
bool
MapLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
wl_surface
*
aParentWLSurface
gfx
:
:
IntPoint
aSubsurfacePosition
)
;
bool
MapLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
WaylandSurfaceLock
*
aParentWaylandSurfaceLock
gfx
:
:
IntPoint
aSubsurfacePosition
)
;
void
UnmapLocked
(
WaylandSurfaceLock
&
aSurfaceLock
)
;
void
GdkCleanUpLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
SetUnmapCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
void
)
>
&
aUnmapCB
)
;
void
ClearUnmapCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
RunUnmapCallback
(
)
;
bool
CreateViewportLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
bool
aFollowsSizeChanges
)
;
void
AddReadyToDrawCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
void
)
>
&
aInitialDrawCB
)
;
bool
AttachLocked
(
WaylandSurfaceLock
&
aSurfaceLock
RefPtr
<
WaylandBuffer
>
aWaylandBuffer
)
;
void
RemoveAttachedBufferLocked
(
WaylandSurfaceLock
&
aProofOfLock
)
;
void
BufferFreeCallbackHandler
(
uintptr_t
aWlBufferID
bool
aWlBufferDelete
)
;
void
CommitLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
bool
aForceCommit
=
false
bool
aForceDisplayFlush
=
false
)
;
void
EnableDMABufFormatsLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
DMABufFormats
*
)
>
&
aFormatRefreshCB
)
;
void
DisableDMABufFormatsLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
PlaceAboveLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
WaylandSurfaceLock
&
aLowerSurfaceLock
)
;
void
MoveLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
gfx
:
:
IntPoint
aPosition
)
;
void
SetViewPortSourceRectLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
gfx
:
:
Rect
aRect
)
;
void
SetViewPortDestLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
gfx
:
:
IntSize
aDestSize
)
;
void
SetTransformFlippedLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
bool
aFlippedX
bool
aFlippedY
)
;
void
SetOpaqueRegion
(
const
gfx
:
:
IntRegion
&
aRegion
)
;
void
SetOpaqueRegionLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
gfx
:
:
IntRegion
&
aRegion
)
;
void
SetOpaqueLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
ClearOpaqueRegionLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
bool
DisableUserInputLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
InvalidateRegionLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
gfx
:
:
IntRegion
&
aInvalidRegion
)
;
void
InvalidateLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
bool
EnableFractionalScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
std
:
:
function
<
void
(
void
)
>
aFractionalScaleCallback
bool
aManageViewport
)
;
bool
EnableCeiledScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
bool
IsFractionalScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
const
{
return
mScaleType
=
=
ScaleType
:
:
Disabled
;
}
bool
IsCeiledScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
const
{
return
mScaleType
=
=
ScaleType
:
:
Ceiled
;
}
bool
IsScaleEnabledLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
const
{
return
mScaleType
!
=
ScaleType
:
:
Disabled
;
}
static
constexpr
const
double
sNoScale
=
-
1
;
double
GetScale
(
)
;
double
GetScaleSafe
(
)
;
void
SetCeiledScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
int
aScreenCeiledScale
)
;
static
void
FractionalScaleHandler
(
void
*
data
struct
wp_fractional_scale_v1
*
info
uint32_t
wire_scale
)
;
static
void
AfterPaintHandler
(
GdkFrameClock
*
aClock
void
*
aData
)
;
bool
AddOpaqueSurfaceHandlerLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
GdkWindow
*
aGdkWindow
bool
aRegisterCommitHandler
)
;
bool
RemoveOpaqueSurfaceHandlerLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
SetGdkCommitCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
const
std
:
:
function
<
void
(
void
)
>
&
aGdkCommitCB
)
;
void
ClearGdkCommitCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
RefPtr
<
DMABufFormats
>
GetDMABufFormats
(
)
const
{
return
mFormats
;
}
GdkWindow
*
GetGdkWindow
(
)
const
;
static
bool
IsOpaqueRegionEnabled
(
)
;
void
SetParentLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
RefPtr
<
WaylandSurface
>
aParent
)
;
bool
EnableColorManagementLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
static
void
ImageDescriptionFailed
(
void
*
aData
struct
wp_image_description_v1
*
aImageDescription
uint32_t
aCause
const
char
*
aMsg
)
;
static
void
ImageDescriptionReady
(
void
*
aData
struct
wp_image_description_v1
*
aImageDescription
uint32_t
aIdentity
)
;
private
:
~
WaylandSurface
(
)
;
bool
MapLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
wl_surface
*
aParentWLSurface
WaylandSurfaceLock
*
aParentWaylandSurfaceLock
gfx
:
:
IntPoint
aSubsurfacePosition
bool
aSubsurfaceDesync
bool
aUseReadyToDrawCallback
=
true
)
;
void
SetSizeLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
gfx
:
:
IntSize
aSizeScaled
gfx
:
:
IntSize
aUnscaledSize
)
;
wl_surface
*
Lock
(
WaylandSurfaceLock
*
aWaylandSurfaceLock
)
;
void
Unlock
(
struct
wl_surface
*
*
aSurface
WaylandSurfaceLock
*
aWaylandSurfaceLock
)
;
void
Commit
(
WaylandSurfaceLock
*
aProofOfLock
bool
aForceCommit
bool
aForceDisplayFlush
)
;
void
ReleaseAllWaylandBuffersLocked
(
WaylandSurfaceLock
&
aSurfaceLock
)
;
void
RequestFrameCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
ClearFrameCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
bool
HasEmulatedFrameCallbackLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
const
;
void
ClearReadyToDrawCallbacksLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
ClearScaleLocked
(
const
WaylandSurfaceLock
&
aProofOfLock
)
;
void
*
mLoggingWidget
=
nullptr
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mIsMapped
{
false
}
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mIsReadyToDraw
{
false
}
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mIsPendingGdkCleanup
{
false
}
;
std
:
:
function
<
void
(
void
)
>
mGdkCommitCallback
;
std
:
:
function
<
void
(
void
)
>
mUnmapCallback
;
gfx
:
:
IntSize
mSizeScaled
;
RefPtr
<
GdkWindow
>
mGdkWindow
;
wl_surface
*
mParentSurface
=
nullptr
;
RefPtr
<
WaylandSurface
>
mParent
;
wl_surface
*
mSurface
=
nullptr
;
bool
mSurfaceNeedsCommit
=
false
;
wl_subsurface
*
mSubsurface
=
nullptr
;
gfx
:
:
IntPoint
mSubsurfacePosition
{
-
1
-
1
}
;
AutoTArray
<
RefPtr
<
WaylandBuffer
>
3
>
mAttachedBuffers
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mBufferAttached
{
false
}
;
mozilla
:
:
Atomic
<
wl_egl_window
*
mozilla
:
:
Relaxed
>
mEGLWindow
{
nullptr
}
;
bool
mViewportFollowsSizeChanges
=
true
;
wp_viewport
*
mViewport
=
nullptr
;
gfx
:
:
Rect
mViewportSourceRect
{
-
1
-
1
-
1
-
1
}
;
gfx
:
:
IntSize
mViewportDestinationSize
{
-
1
-
1
}
;
bool
mBufferTransformFlippedX
=
false
;
bool
mBufferTransformFlippedY
=
false
;
wl_callback
*
mReadyToDrawFrameCallback
=
nullptr
;
std
:
:
vector
<
std
:
:
function
<
void
(
void
)
>
>
mReadyToDrawCallbacks
;
wl_callback
*
mFrameCallback
=
nullptr
;
struct
FrameCallback
{
std
:
:
function
<
void
(
wl_callback
*
uint32_t
)
>
mCb
;
bool
mEmulated
=
false
;
}
;
bool
mFrameCallbackEnabled
=
true
;
std
:
:
vector
<
FrameCallback
>
mPersistentFrameCallbackHandlers
;
std
:
:
vector
<
FrameCallback
>
mOneTimeFrameCallbackHandlers
;
mozilla
:
:
Mutex
mMutex
{
"
WaylandSurface
"
}
;
WaylandSurfaceLock
*
mSurfaceLock
=
nullptr
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mIsOpaqueSurfaceHandlerSet
{
false
}
;
gulong
mGdkAfterPaintId
=
0
;
static
bool
sIsOpaqueRegionEnabled
;
static
void
(
*
sGdkWaylandWindowAddCallbackSurface
)
(
GdkWindow
*
struct
wl_surface
*
)
;
static
void
(
*
sGdkWaylandWindowRemoveCallbackSurface
)
(
GdkWindow
*
struct
wl_surface
*
)
;
guint
mEmulatedFrameCallbackTimerID
=
0
;
constexpr
static
int
sEmulatedFrameCallbackTimeoutMs
=
(
int
)
(
1000
.
0
/
60
.
0
)
;
enum
class
ScaleType
{
Disabled
Ceiled
Fractional
}
;
ScaleType
mScaleType
=
ScaleType
:
:
Disabled
;
mozilla
:
:
Atomic
<
double
mozilla
:
:
Relaxed
>
mScreenScale
{
sNoScale
}
;
wp_fractional_scale_v1
*
mFractionalScaleListener
=
nullptr
;
std
:
:
function
<
void
(
void
)
>
mFractionalScaleCallback
=
[
]
(
)
{
}
;
bool
mUseDMABufFormats
=
false
;
std
:
:
function
<
void
(
DMABufFormats
*
)
>
mDMABufFormatRefreshCallback
;
RefPtr
<
DMABufFormats
>
mFormats
;
bool
mHDRSet
=
false
;
wp_color_management_surface_v1
*
mColorSurface
=
nullptr
;
wp_image_description_v1
*
mImageDescription
=
nullptr
;
}
;
}
#
endif
