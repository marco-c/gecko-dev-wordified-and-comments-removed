#
ifndef
nsUserIdleServiceGTK_h__
#
define
nsUserIdleServiceGTK_h__
#
include
"
nsUserIdleService
.
h
"
#
include
"
mozilla
/
AppShutdown
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
class
nsUserIdleServiceGTK
;
class
UserIdleServiceImpl
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
UserIdleServiceImpl
)
;
virtual
bool
PollIdleTime
(
uint32_t
*
aIdleTime
)
=
0
;
virtual
bool
ProbeImplementation
(
RefPtr
<
nsUserIdleServiceGTK
>
aUserIdleServiceGTK
)
=
0
;
protected
:
virtual
~
UserIdleServiceImpl
(
)
=
default
;
}
;
#
define
IDLE_SERVICE_MUTTER
0
#
define
IDLE_SERVICE_XSCREENSAVER
1
#
define
IDLE_SERVICE_NONE
2
class
nsUserIdleServiceGTK
:
public
nsUserIdleService
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
nsUserIdleServiceGTK
nsUserIdleService
)
virtual
bool
PollIdleTime
(
uint32_t
*
aIdleTime
)
override
;
static
already_AddRefed
<
nsUserIdleServiceGTK
>
GetInstance
(
)
{
RefPtr
<
nsUserIdleServiceGTK
>
idleService
=
nsUserIdleService
:
:
GetInstance
(
)
.
downcast
<
nsUserIdleServiceGTK
>
(
)
;
if
(
!
idleService
)
{
if
(
mozilla
:
:
AppShutdown
:
:
IsInOrBeyond
(
mozilla
:
:
ShutdownPhase
:
:
AppShutdownConfirmed
)
)
{
return
nullptr
;
}
idleService
=
new
nsUserIdleServiceGTK
(
)
;
idleService
-
>
ProbeService
(
)
;
}
return
idleService
.
forget
(
)
;
}
void
ProbeService
(
)
;
void
AcceptServiceCallback
(
)
;
void
RejectAndTryNextServiceCallback
(
)
;
protected
:
nsUserIdleServiceGTK
(
)
=
default
;
private
:
~
nsUserIdleServiceGTK
(
)
=
default
;
RefPtr
<
UserIdleServiceImpl
>
mIdleService
;
#
ifdef
MOZ_ENABLE_DBUS
int
mIdleServiceType
=
IDLE_SERVICE_MUTTER
;
#
else
int
mIdleServiceType
=
IDLE_SERVICE_XSCREENSAVER
;
#
endif
bool
mIdleServiceInitialized
=
false
;
}
;
#
endif
