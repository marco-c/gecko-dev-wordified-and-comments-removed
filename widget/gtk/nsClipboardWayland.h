#
ifndef
__nsClipboardWayland_h_
#
define
__nsClipboardWayland_h_
#
include
<
gtk
/
gtk
.
h
>
#
include
<
gdk
/
gdkwayland
.
h
>
#
include
<
nsTArray
.
h
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsClipboard
.
h
"
#
include
"
nsWaylandDisplay
.
h
"
struct
FastTrackClipboard
;
class
DataOffer
{
public
:
void
AddMIMEType
(
const
char
*
aMimeType
)
;
GdkAtom
*
GetTargets
(
int
*
aTargetNum
)
;
bool
HasTarget
(
const
char
*
aMimeType
)
;
char
*
GetData
(
wl_display
*
aDisplay
const
char
*
aMimeType
uint32_t
*
aContentLength
)
;
virtual
~
DataOffer
(
)
=
default
;
private
:
virtual
bool
RequestDataTransfer
(
const
char
*
aMimeType
int
fd
)
=
0
;
protected
:
nsTArray
<
GdkAtom
>
mTargetMIMETypes
;
}
;
class
WaylandDataOffer
:
public
DataOffer
{
public
:
explicit
WaylandDataOffer
(
wl_data_offer
*
aWaylandDataOffer
)
;
virtual
~
WaylandDataOffer
(
)
;
private
:
bool
RequestDataTransfer
(
const
char
*
aMimeType
int
fd
)
override
;
wl_data_offer
*
mWaylandDataOffer
;
}
;
class
PrimaryDataOffer
:
public
DataOffer
{
public
:
explicit
PrimaryDataOffer
(
gtk_primary_selection_offer
*
aPrimaryDataOffer
)
;
explicit
PrimaryDataOffer
(
zwp_primary_selection_offer_v1
*
aPrimaryDataOffer
)
;
void
SetAvailableDragActions
(
uint32_t
aWaylandActions
)
{
}
;
virtual
~
PrimaryDataOffer
(
)
;
private
:
bool
RequestDataTransfer
(
const
char
*
aMimeType
int
fd
)
override
;
gtk_primary_selection_offer
*
mPrimaryDataOfferGtk
;
zwp_primary_selection_offer_v1
*
mPrimaryDataOfferZwpV1
;
}
;
class
nsRetrievalContextWayland
:
public
nsRetrievalContext
{
public
:
nsRetrievalContextWayland
(
)
;
virtual
const
char
*
GetClipboardData
(
const
char
*
aMimeType
int32_t
aWhichClipboard
uint32_t
*
aContentLength
)
override
;
virtual
const
char
*
GetClipboardText
(
int32_t
aWhichClipboard
)
override
;
virtual
void
ReleaseClipboardData
(
const
char
*
aClipboardData
)
override
;
virtual
GdkAtom
*
GetTargets
(
int32_t
aWhichClipboard
int
*
aTargetNum
)
override
;
virtual
bool
HasSelectionSupport
(
void
)
override
;
void
RegisterNewDataOffer
(
wl_data_offer
*
aWaylandDataOffer
)
;
void
RegisterNewDataOffer
(
gtk_primary_selection_offer
*
aPrimaryDataOffer
)
;
void
RegisterNewDataOffer
(
zwp_primary_selection_offer_v1
*
aPrimaryDataOffer
)
;
void
SetClipboardDataOffer
(
wl_data_offer
*
aWaylandDataOffer
)
;
void
SetPrimaryDataOffer
(
gtk_primary_selection_offer
*
aPrimaryDataOffer
)
;
void
SetPrimaryDataOffer
(
zwp_primary_selection_offer_v1
*
aPrimaryDataOffer
)
;
void
TransferFastTrackClipboard
(
int
aClipboardRequestNumber
GtkSelectionData
*
aSelectionData
)
;
virtual
~
nsRetrievalContextWayland
(
)
override
;
private
:
bool
mInitialized
;
RefPtr
<
mozilla
:
:
widget
:
:
nsWaylandDisplay
>
mDisplay
;
GHashTable
*
mActiveOffers
;
mozilla
:
:
UniquePtr
<
DataOffer
>
mClipboardOffer
;
mozilla
:
:
UniquePtr
<
DataOffer
>
mPrimaryOffer
;
int
mClipboardRequestNumber
;
char
*
mClipboardData
;
uint32_t
mClipboardDataLength
;
#
define
TEXT_MIME_TYPES_NUM
3
static
const
char
*
sTextMimeTypes
[
TEXT_MIME_TYPES_NUM
]
;
}
;
#
endif
