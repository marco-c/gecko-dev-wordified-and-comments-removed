#
ifndef
__MOZ_WAYLAND_DISPLAY_H__
#
define
__MOZ_WAYLAND_DISPLAY_H__
#
include
"
mozilla
/
widget
/
mozwayland
.
h
"
#
include
"
mozilla
/
widget
/
gtk
-
primary
-
selection
-
client
-
protocol
.
h
"
#
include
"
mozilla
/
widget
/
idle
-
inhibit
-
unstable
-
v1
-
client
-
protocol
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
widget
/
gbm
.
h
"
#
include
"
mozilla
/
widget
/
linux
-
dmabuf
-
unstable
-
v1
-
client
-
protocol
.
h
"
namespace
mozilla
{
namespace
widget
{
struct
GbmFormat
{
bool
mIsSupported
;
bool
mHasAlpha
;
int
mFormat
;
uint64_t
*
mModifiers
;
int
mModifiersCount
;
}
;
class
nsWaylandDisplay
{
public
:
explicit
nsWaylandDisplay
(
wl_display
*
aDisplay
bool
aLighWrapper
=
false
)
;
virtual
~
nsWaylandDisplay
(
)
;
bool
DispatchEventQueue
(
)
;
void
SyncBegin
(
)
;
void
SyncEnd
(
)
;
void
WaitForSyncEnd
(
)
;
bool
Matches
(
wl_display
*
aDisplay
)
;
wl_display
*
GetDisplay
(
)
{
return
mDisplay
;
}
;
wl_event_queue
*
GetEventQueue
(
)
{
return
mEventQueue
;
}
;
wl_compositor
*
GetCompositor
(
void
)
{
return
mCompositor
;
}
;
wl_subcompositor
*
GetSubcompositor
(
void
)
{
return
mSubcompositor
;
}
;
wl_data_device_manager
*
GetDataDeviceManager
(
void
)
{
return
mDataDeviceManager
;
}
;
wl_seat
*
GetSeat
(
void
)
{
return
mSeat
;
}
;
wl_shm
*
GetShm
(
void
)
{
return
mShm
;
}
;
gtk_primary_selection_device_manager
*
GetPrimarySelectionDeviceManager
(
void
)
{
return
mPrimarySelectionDeviceManager
;
}
;
zwp_idle_inhibit_manager_v1
*
GetIdleInhibitManager
(
void
)
{
return
mIdleInhibitManager
;
}
void
SetShm
(
wl_shm
*
aShm
)
;
void
SetCompositor
(
wl_compositor
*
aCompositor
)
;
void
SetSubcompositor
(
wl_subcompositor
*
aSubcompositor
)
;
void
SetDataDeviceManager
(
wl_data_device_manager
*
aDataDeviceManager
)
;
void
SetSeat
(
wl_seat
*
aSeat
)
;
void
SetPrimarySelectionDeviceManager
(
gtk_primary_selection_device_manager
*
aPrimarySelectionDeviceManager
)
;
void
SetIdleInhibitManager
(
zwp_idle_inhibit_manager_v1
*
aIdleInhibitManager
)
;
MessageLoop
*
GetThreadLoop
(
)
{
return
mThreadLoop
;
}
void
ShutdownThreadLoop
(
)
;
void
SetDmabuf
(
zwp_linux_dmabuf_v1
*
aDmabuf
)
;
zwp_linux_dmabuf_v1
*
GetDmabuf
(
)
{
return
mDmabuf
;
}
;
bool
IsExplicitSyncEnabled
(
)
{
return
mExplicitSync
;
}
GbmFormat
*
GetGbmFormat
(
bool
aHasAlpha
)
;
GbmFormat
*
GetExactGbmFormat
(
int
aFormat
)
;
void
AddFormatModifier
(
bool
aHasAlpha
int
aFormat
uint32_t
mModifierHi
uint32_t
mModifierLo
)
;
private
:
MessageLoop
*
mThreadLoop
;
PRThread
*
mThreadId
;
wl_display
*
mDisplay
;
wl_event_queue
*
mEventQueue
;
wl_data_device_manager
*
mDataDeviceManager
;
wl_compositor
*
mCompositor
;
wl_subcompositor
*
mSubcompositor
;
wl_seat
*
mSeat
;
wl_shm
*
mShm
;
wl_callback
*
mSyncCallback
;
gtk_primary_selection_device_manager
*
mPrimarySelectionDeviceManager
;
zwp_idle_inhibit_manager_v1
*
mIdleInhibitManager
;
wl_registry
*
mRegistry
;
zwp_linux_dmabuf_v1
*
mDmabuf
;
GbmFormat
mXRGBFormat
;
GbmFormat
mARGBFormat
;
bool
mExplicitSync
;
}
;
void
WaylandDispatchDisplays
(
)
;
void
WaylandDisplayShutdown
(
)
;
nsWaylandDisplay
*
WaylandDisplayGet
(
GdkDisplay
*
aGdkDisplay
=
nullptr
)
;
wl_display
*
WaylandDisplayGetWLDisplay
(
GdkDisplay
*
aGdkDisplay
=
nullptr
)
;
}
}
#
endif
