#
ifndef
__MOZ_WAYLAND_REGISTRY_H__
#
define
__MOZ_WAYLAND_REGISTRY_H__
#
include
"
mozwayland
/
mozwayland
.
h
"
#
include
"
wayland
/
gtk
-
primary
-
selection
-
client
-
protocol
.
h
"
namespace
mozilla
{
namespace
widget
{
#
define
EVENT_LOOP_DELAY
(
1000
/
240
)
class
nsWaylandDisplay
{
public
:
explicit
nsWaylandDisplay
(
wl_display
*
aDisplay
)
;
virtual
~
nsWaylandDisplay
(
)
;
bool
DisplayLoop
(
)
;
bool
Matches
(
wl_display
*
aDisplay
)
;
wl_display
*
GetDisplay
(
)
{
return
mDisplay
;
}
;
wl_event_queue
*
GetEventQueue
(
)
{
return
mEventQueue
;
}
;
wl_subcompositor
*
GetSubcompositor
(
void
)
{
return
mSubcompositor
;
}
;
wl_data_device_manager
*
GetDataDeviceManager
(
void
)
{
return
mDataDeviceManager
;
}
;
wl_seat
*
GetSeat
(
void
)
{
return
mSeat
;
}
;
wl_shm
*
GetShm
(
void
)
{
return
mShm
;
}
;
gtk_primary_selection_device_manager
*
GetPrimarySelectionDeviceManager
(
void
)
{
return
mPrimarySelectionDeviceManager
;
}
;
void
SetShm
(
wl_shm
*
aShm
)
;
void
SetSubcompositor
(
wl_subcompositor
*
aSubcompositor
)
;
void
SetDataDeviceManager
(
wl_data_device_manager
*
aDataDeviceManager
)
;
void
SetSeat
(
wl_seat
*
aSeat
)
;
void
SetPrimarySelectionDeviceManager
(
gtk_primary_selection_device_manager
*
aPrimarySelectionDeviceManager
)
;
private
:
PRThread
*
mThreadId
;
wl_display
*
mDisplay
;
wl_event_queue
*
mEventQueue
;
wl_data_device_manager
*
mDataDeviceManager
;
wl_subcompositor
*
mSubcompositor
;
wl_seat
*
mSeat
;
wl_shm
*
mShm
;
gtk_primary_selection_device_manager
*
mPrimarySelectionDeviceManager
;
wl_registry
*
mRegistry
;
}
;
nsWaylandDisplay
*
WaylandDisplayGet
(
GdkDisplay
*
aGdkDisplay
=
nullptr
)
;
}
}
#
endif
