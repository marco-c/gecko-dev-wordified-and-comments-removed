#
ifndef
WIDGET_GTK_MPRIS_SERVICE_HANDLER_H_
#
define
WIDGET_GTK_MPRIS_SERVICE_HANDLER_H_
#
include
<
gio
/
gio
.
h
>
#
include
"
mozilla
/
dom
/
MediaControlKeysEvent
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsString
.
h
"
#
define
DBUS_MRPIS_SERVICE_NAME
"
org
.
mpris
.
MediaPlayer2
.
firefox
"
#
define
DBUS_MPRIS_OBJECT_PATH
"
/
org
/
mpris
/
MediaPlayer2
"
namespace
mozilla
{
namespace
widget
{
class
MPRISServiceHandler
final
:
public
dom
:
:
MediaControlKeysEventSource
{
NS_INLINE_DECL_REFCOUNTING
(
MPRISServiceHandler
override
)
public
:
MPRISServiceHandler
(
)
=
default
;
bool
Open
(
)
override
;
void
Close
(
)
override
;
bool
IsOpened
(
)
const
override
;
void
SetPlaybackState
(
dom
:
:
MediaSessionPlaybackState
aState
)
override
;
GVariant
*
GetPlaybackStatus
(
)
const
;
#
ifdef
MPRIS_FULLSCREEN
bool
GetFullscreen
(
)
;
void
SetFullscreen
(
bool
aFullscreen
)
;
bool
CanSetFullscreen
(
)
;
#
endif
bool
HasTrackList
(
)
;
const
char
*
Identity
(
)
const
;
#
ifdef
MPRIS_DESKTOP_ENTRY
const
char
*
DesktopEntry
(
)
;
#
endif
GVariant
*
SupportedUriSchemes
(
)
;
GVariant
*
SupportedMimeTypes
(
)
;
constexpr
bool
CanRaise
(
)
;
void
Raise
(
)
;
constexpr
bool
CanQuit
(
)
;
void
Quit
(
)
;
void
Next
(
)
;
void
Previous
(
)
;
void
Pause
(
)
;
void
PlayPause
(
)
;
void
Stop
(
)
;
void
Play
(
)
;
void
Seek
(
int64_t
aOffset
)
;
void
SetPosition
(
char
*
aTrackId
int64_t
aPosition
)
;
bool
OpenUri
(
char
*
aUri
)
;
#
ifdef
MPRIS_LOOP_STATUS
MPRISLoopStatus
GetLoopStatus
(
)
;
#
endif
double
GetRate
(
)
const
;
bool
SetRate
(
double
aRate
)
;
constexpr
double
GetMinimumRate
(
)
;
constexpr
double
GetMaximumRate
(
)
;
#
ifdef
MPRIS_SHUFFLE
bool
GetShuffle
(
)
const
;
void
SetShuffle
(
bool
aShuffle
)
;
#
endif
double
GetVolume
(
)
const
;
bool
SetVolume
(
double
aVolume
)
;
int64_t
GetPosition
(
)
const
;
bool
CanGoNext
(
)
const
;
bool
CanGoPrevious
(
)
const
;
bool
CanPlay
(
)
const
;
bool
CanPause
(
)
const
;
bool
CanSeek
(
)
const
;
bool
CanControl
(
)
const
;
void
SetMediaMetadata
(
const
dom
:
:
MediaMetadataBase
&
aMetadata
)
override
;
GVariant
*
GetMetadataAsGVariant
(
)
const
;
private
:
~
MPRISServiceHandler
(
)
;
guint
mOwnerId
=
0
;
guint
mRootRegistrationId
=
0
;
guint
mPlayerRegistrationId
=
0
;
GDBusNodeInfo
*
mIntrospectionData
=
nullptr
;
GDBusConnection
*
mConnection
=
nullptr
;
bool
mInitialized
=
false
;
nsAutoCString
mIdentity
;
Maybe
<
dom
:
:
MediaMetadataBase
>
mMetadata
;
void
InitIdentity
(
)
;
void
OnNameAcquired
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
void
OnNameLost
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
void
OnBusAcquired
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
static
void
OnNameAcquiredStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
static
void
OnNameLostStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
static
void
OnBusAcquiredStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
void
EmitEvent
(
dom
:
:
MediaControlKeysEvent
event
)
;
}
;
}
}
#
endif
