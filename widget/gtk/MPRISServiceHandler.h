#
ifndef
WIDGET_GTK_MPRIS_SERVICE_HANDLER_H_
#
define
WIDGET_GTK_MPRIS_SERVICE_HANDLER_H_
#
include
<
gio
/
gio
.
h
>
#
include
"
mozilla
/
dom
/
FetchImageHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaControlKeySource
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
nsString
.
h
"
#
define
DBUS_MRPIS_SERVICE_NAME
"
org
.
mpris
.
MediaPlayer2
.
firefox
"
#
define
DBUS_MPRIS_OBJECT_PATH
"
/
org
/
mpris
/
MediaPlayer2
"
#
define
DBUS_MPRIS_PLAYER_INTERFACE
"
org
.
mpris
.
MediaPlayer2
.
Player
"
#
define
DBUS_MPRIS_TRACK_PATH
"
/
org
/
mpris
/
MediaPlayer2
/
firefox
"
namespace
mozilla
{
namespace
widget
{
class
MPRISServiceHandler
final
:
public
dom
:
:
MediaControlKeySource
{
NS_INLINE_DECL_REFCOUNTING
(
MPRISServiceHandler
override
)
public
:
MPRISServiceHandler
(
)
:
mMimeType
(
IMAGE_PNG
)
{
}
;
bool
Open
(
)
override
;
void
Close
(
)
override
;
bool
IsOpened
(
)
const
override
;
void
SetPlaybackState
(
dom
:
:
MediaSessionPlaybackState
aState
)
override
;
GVariant
*
GetPlaybackStatus
(
)
const
;
bool
HasTrackList
(
)
;
const
char
*
Identity
(
)
const
;
GVariant
*
SupportedUriSchemes
(
)
;
GVariant
*
SupportedMimeTypes
(
)
;
constexpr
bool
CanRaise
(
)
;
void
Raise
(
)
;
constexpr
bool
CanQuit
(
)
;
void
Quit
(
)
;
void
Next
(
)
;
void
Previous
(
)
;
void
Pause
(
)
;
void
PlayPause
(
)
;
void
Stop
(
)
;
void
Play
(
)
;
void
Seek
(
int64_t
aOffset
)
;
void
SetPosition
(
char
*
aTrackId
int64_t
aPosition
)
;
bool
OpenUri
(
char
*
aUri
)
;
double
GetRate
(
)
const
;
bool
SetRate
(
double
aRate
)
;
constexpr
double
GetMinimumRate
(
)
;
constexpr
double
GetMaximumRate
(
)
;
double
GetVolume
(
)
const
;
bool
SetVolume
(
double
aVolume
)
;
int64_t
GetPosition
(
)
const
;
bool
CanGoNext
(
)
const
;
bool
CanGoPrevious
(
)
const
;
bool
CanPlay
(
)
const
;
bool
CanPause
(
)
const
;
bool
CanSeek
(
)
const
;
bool
CanControl
(
)
const
;
void
SetMediaMetadata
(
const
dom
:
:
MediaMetadataBase
&
aMetadata
)
override
;
GVariant
*
GetMetadataAsGVariant
(
)
const
;
void
SetSupportedMediaKeys
(
const
MediaKeysArray
&
aSupportedKeys
)
override
{
}
private
:
~
MPRISServiceHandler
(
)
;
guint
mOwnerId
=
0
;
guint
mRootRegistrationId
=
0
;
guint
mPlayerRegistrationId
=
0
;
GDBusNodeInfo
*
mIntrospectionData
=
nullptr
;
GDBusConnection
*
mConnection
=
nullptr
;
bool
mInitialized
=
false
;
nsAutoCString
mIdentity
;
nsCString
mMimeType
;
class
MPRISMetadata
:
public
dom
:
:
MediaMetadataBase
{
public
:
MPRISMetadata
(
)
=
default
;
~
MPRISMetadata
(
)
=
default
;
void
UpdateFromMetadataBase
(
const
dom
:
:
MediaMetadataBase
&
aMetadata
)
{
mTitle
=
aMetadata
.
mTitle
;
mArtist
=
aMetadata
.
mArtist
;
mAlbum
=
aMetadata
.
mAlbum
;
mArtwork
=
aMetadata
.
mArtwork
;
}
void
Clear
(
)
{
UpdateFromMetadataBase
(
MediaMetadataBase
:
:
EmptyData
(
)
)
;
mArtUrl
=
EmptyCString
(
)
;
}
nsCString
mArtUrl
;
}
;
MPRISMetadata
mMPRISMetadata
;
nsCOMPtr
<
nsIFile
>
mLocalImageFile
;
nsCOMPtr
<
nsIFile
>
mLocalImageFolder
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
FetchImageHelper
>
mImageFetcher
;
mozilla
:
:
MozPromiseRequestHolder
<
mozilla
:
:
dom
:
:
ImagePromise
>
mImageFetchRequest
;
nsString
mFetchingUrl
;
nsString
mCurrentImageUrl
;
size_t
mNextImageIndex
=
0
;
void
LoadImageAtIndex
(
const
size_t
aIndex
)
;
bool
SetImageToDisplay
(
const
char
*
aImageData
uint32_t
aDataSize
)
;
bool
RenewLocalImageFile
(
const
char
*
aImageData
uint32_t
aDataSize
)
;
bool
InitLocalImageFile
(
)
;
bool
InitLocalImageFolder
(
)
;
void
RemoveAllLocalImages
(
)
;
bool
LocalImageFolderExists
(
)
;
void
InitIdentity
(
)
;
void
OnNameAcquired
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
void
OnNameLost
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
void
OnBusAcquired
(
GDBusConnection
*
aConnection
const
gchar
*
aName
)
;
static
void
OnNameAcquiredStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
static
void
OnNameLostStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
static
void
OnBusAcquiredStatic
(
GDBusConnection
*
aConnection
const
gchar
*
aName
gpointer
aUserData
)
;
void
EmitEvent
(
dom
:
:
MediaControlKey
aKey
)
;
bool
EmitMetadataChanged
(
)
const
;
void
SetMediaMetadataInternal
(
const
dom
:
:
MediaMetadataBase
&
aMetadata
bool
aClearArtUrl
=
true
)
;
}
;
}
}
#
endif
