#
ifndef
__nsWindow_h__
#
define
__nsWindow_h__
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gtk
/
gtk
.
h
>
#
ifdef
MOZ_X11
#
include
<
gdk
/
gdkx
.
h
>
#
include
"
X11UndefineNone
.
h
"
#
endif
#
ifdef
MOZ_WAYLAND
#
include
<
gdk
/
gdkwayland
.
h
>
#
include
"
base
/
thread
.
h
"
#
include
"
WaylandVsyncSource
.
h
"
#
endif
#
include
"
MozContainer
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
CompositorWidget
.
h
"
#
include
"
mozilla
/
widget
/
WindowSurface
.
h
"
#
include
"
mozilla
/
widget
/
WindowSurfaceProvider
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
Accessible
.
h
"
#
endif
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
IMContextWrapper
.
h
"
#
undef
LOG
#
ifdef
MOZ_LOGGING
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
extern
mozilla
:
:
LazyLogModule
gWidgetLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetFocusLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetDragLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetDrawLog
;
#
define
LOG
(
args
)
MOZ_LOG
(
gWidgetLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
define
LOGFOCUS
(
args
)
\
MOZ_LOG
(
gWidgetFocusLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
define
LOGDRAG
(
args
)
MOZ_LOG
(
gWidgetDragLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
define
LOGDRAW
(
args
)
MOZ_LOG
(
gWidgetDrawLog
mozilla
:
:
LogLevel
:
:
Debug
args
)
#
else
#
define
LOG
(
args
)
#
define
LOGFOCUS
(
args
)
#
define
LOGDRAG
(
args
)
#
define
LOGDRAW
(
args
)
#
endif
#
ifdef
MOZ_WAYLAND
class
nsWaylandDragContext
;
gboolean
WindowDragMotionHandler
(
GtkWidget
*
aWidget
GdkDragContext
*
aDragContext
nsWaylandDragContext
*
aWaylandDragContext
gint
aX
gint
aY
guint
aTime
)
;
gboolean
WindowDragDropHandler
(
GtkWidget
*
aWidget
GdkDragContext
*
aDragContext
nsWaylandDragContext
*
aWaylandDragContext
gint
aX
gint
aY
guint
aTime
)
;
void
WindowDragLeaveHandler
(
GtkWidget
*
aWidget
)
;
#
endif
class
gfxPattern
;
class
nsIFrame
;
namespace
mozilla
{
class
TimeStamp
;
class
CurrentX11TimeGetter
;
}
class
nsWindow
final
:
public
nsBaseWidget
{
public
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
WidgetEventTime
WidgetEventTime
;
typedef
mozilla
:
:
WidgetKeyboardEvent
WidgetKeyboardEvent
;
typedef
mozilla
:
:
widget
:
:
PlatformCompositorWidgetDelegate
PlatformCompositorWidgetDelegate
;
nsWindow
(
)
;
static
void
ReleaseGlobals
(
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
nsWindow
nsBaseWidget
)
void
CommonCreate
(
nsIWidget
*
aParent
bool
aListenForResizes
)
;
virtual
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
virtual
void
OnDestroy
(
void
)
override
;
bool
AreBoundsSane
(
void
)
;
using
nsBaseWidget
:
:
Create
;
[
[
nodiscard
]
]
virtual
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
nsWidgetInitData
*
aInitData
)
override
;
virtual
void
Destroy
(
)
override
;
virtual
nsIWidget
*
GetParent
(
)
override
;
virtual
float
GetDPI
(
)
override
;
virtual
double
GetDefaultScaleInternal
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScaleByScreen
(
)
override
;
virtual
void
SetParent
(
nsIWidget
*
aNewParent
)
override
;
virtual
void
SetModal
(
bool
aModal
)
override
;
virtual
bool
IsVisible
(
)
const
override
;
virtual
void
ConstrainPosition
(
bool
aAllowSlop
int32_t
*
aX
int32_t
*
aY
)
override
;
virtual
void
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
override
;
virtual
void
LockAspectRatio
(
bool
aShouldLock
)
override
;
virtual
void
Move
(
double
aX
double
aY
)
override
;
virtual
void
Show
(
bool
aState
)
override
;
virtual
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
virtual
bool
IsEnabled
(
)
const
override
;
void
SetZIndex
(
int32_t
aZIndex
)
override
;
virtual
void
SetSizeMode
(
nsSizeMode
aMode
)
override
;
virtual
void
GetWorkspaceID
(
nsAString
&
workspaceID
)
override
;
virtual
void
MoveToWorkspace
(
const
nsAString
&
workspaceID
)
override
;
virtual
void
Enable
(
bool
aState
)
override
;
virtual
void
SetFocus
(
Raise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
virtual
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
virtual
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
virtual
LayoutDeviceIntSize
GetClientSize
(
)
override
;
virtual
LayoutDeviceIntPoint
GetClientOffset
(
)
override
;
virtual
void
SetCursor
(
nsCursor
aDefaultCursor
imgIContainer
*
aCursor
uint32_t
aHotspotX
uint32_t
aHotspotY
)
override
;
virtual
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
virtual
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
virtual
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
;
virtual
void
SetIcon
(
const
nsAString
&
aIconSpec
)
override
;
virtual
void
SetWindowClass
(
const
nsAString
&
xulWinType
)
override
;
virtual
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
virtual
void
CaptureMouse
(
bool
aCapture
)
override
;
virtual
void
CaptureRollupEvents
(
nsIRollupListener
*
aListener
bool
aDoCapture
)
override
;
[
[
nodiscard
]
]
virtual
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
virtual
nsresult
SetWindowClipRegion
(
const
nsTArray
<
LayoutDeviceIntRect
>
&
aRects
bool
aIntersectWithExisting
)
override
;
virtual
bool
HasPendingInputEvent
(
)
override
;
virtual
bool
PrepareForFullscreenTransition
(
nsISupports
*
*
aData
)
override
;
virtual
void
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
override
;
virtual
already_AddRefed
<
nsIScreen
>
GetWidgetScreen
(
)
override
;
virtual
nsresult
MakeFullScreen
(
bool
aFullScreen
nsIScreen
*
aTargetScreen
=
nullptr
)
override
;
virtual
void
HideWindowChrome
(
bool
aShouldHide
)
override
;
static
guint32
GetLastUserInputTime
(
)
;
gint
ConvertBorderStyles
(
nsBorderStyle
aStyle
)
;
GdkRectangle
DevicePixelsToGdkRectRoundOut
(
LayoutDeviceIntRect
aRect
)
;
mozilla
:
:
widget
:
:
IMContextWrapper
*
GetIMContext
(
)
const
{
return
mIMContext
;
}
bool
DispatchCommandEvent
(
nsAtom
*
aCommand
)
;
bool
DispatchContentCommandEvent
(
mozilla
:
:
EventMessage
aMsg
)
;
gboolean
OnExposeEvent
(
cairo_t
*
cr
)
;
gboolean
OnConfigureEvent
(
GtkWidget
*
aWidget
GdkEventConfigure
*
aEvent
)
;
void
OnContainerUnrealize
(
)
;
void
OnSizeAllocate
(
GtkAllocation
*
aAllocation
)
;
void
OnDeleteEvent
(
)
;
void
OnEnterNotifyEvent
(
GdkEventCrossing
*
aEvent
)
;
void
OnLeaveNotifyEvent
(
GdkEventCrossing
*
aEvent
)
;
void
OnMotionNotifyEvent
(
GdkEventMotion
*
aEvent
)
;
void
OnButtonPressEvent
(
GdkEventButton
*
aEvent
)
;
void
OnButtonReleaseEvent
(
GdkEventButton
*
aEvent
)
;
void
OnContainerFocusInEvent
(
GdkEventFocus
*
aEvent
)
;
void
OnContainerFocusOutEvent
(
GdkEventFocus
*
aEvent
)
;
gboolean
OnKeyPressEvent
(
GdkEventKey
*
aEvent
)
;
gboolean
OnKeyReleaseEvent
(
GdkEventKey
*
aEvent
)
;
void
OnScrollEvent
(
GdkEventScroll
*
aEvent
)
;
void
OnWindowStateEvent
(
GtkWidget
*
aWidget
GdkEventWindowState
*
aEvent
)
;
void
OnDragDataReceivedEvent
(
GtkWidget
*
aWidget
GdkDragContext
*
aDragContext
gint
aX
gint
aY
GtkSelectionData
*
aSelectionData
guint
aInfo
guint
aTime
gpointer
aData
)
;
gboolean
OnPropertyNotifyEvent
(
GtkWidget
*
aWidget
GdkEventProperty
*
aEvent
)
;
gboolean
OnTouchEvent
(
GdkEventTouch
*
aEvent
)
;
void
UpdateTopLevelOpaqueRegion
(
)
;
virtual
already_AddRefed
<
mozilla
:
:
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
LayoutDeviceIntRegion
&
aInvalidRegion
mozilla
:
:
layers
:
:
BufferMode
*
aBufferMode
)
override
;
virtual
void
EndRemoteDrawingInRegion
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
override
;
void
SetProgress
(
unsigned
long
progressPercent
)
;
#
ifdef
MOZ_WAYLAND
void
SetEGLNativeWindowSize
(
const
LayoutDeviceIntSize
&
aEGLWindowSize
)
;
static
nsWindow
*
GetFocusedWindow
(
)
;
#
endif
RefPtr
<
mozilla
:
:
gfx
:
:
VsyncSource
>
GetVsyncSource
(
)
override
;
private
:
void
UpdateAlpha
(
mozilla
:
:
gfx
:
:
SourceSurface
*
aSourceSurface
nsIntRect
aBoundsRect
)
;
void
NativeMove
(
)
;
void
NativeResize
(
)
;
void
NativeMoveResize
(
)
;
void
NativeShow
(
bool
aAction
)
;
void
SetHasMappedToplevel
(
bool
aState
)
;
LayoutDeviceIntSize
GetSafeWindowSize
(
LayoutDeviceIntSize
aSize
)
;
void
EnsureGrabs
(
void
)
;
void
GrabPointer
(
guint32
aTime
)
;
void
ReleaseGrabs
(
void
)
;
void
UpdateClientOffsetFromFrameExtents
(
)
;
void
UpdateClientOffsetFromCSDWindow
(
)
;
void
DispatchContextMenuEventFromMouseEvent
(
uint16_t
domButton
GdkEventButton
*
aEvent
)
;
#
ifdef
MOZ_WAYLAND
void
MaybeResumeCompositor
(
)
;
#
endif
void
WaylandStartVsync
(
)
;
void
WaylandStopVsync
(
)
;
public
:
void
ThemeChanged
(
void
)
;
void
OnDPIChanged
(
void
)
;
void
OnCheckResize
(
void
)
;
void
OnCompositedChanged
(
void
)
;
void
OnScaleChanged
(
GtkAllocation
*
aAllocation
)
;
void
DispatchResized
(
)
;
#
ifdef
MOZ_X11
Window
mOldFocusWindow
;
#
endif
static
guint32
sLastButtonPressTime
;
[
[
nodiscard
]
]
virtual
nsresult
BeginResizeDrag
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
int32_t
aHorizontal
int32_t
aVertical
)
override
;
MozContainer
*
GetMozContainer
(
)
{
return
mContainer
;
}
LayoutDeviceIntRect
GetMozContainerSize
(
)
;
GtkWidget
*
GetMozContainerWidget
(
)
;
GdkWindow
*
GetGdkWindow
(
)
{
return
mGdkWindow
;
}
GtkWidget
*
GetGtkWidget
(
)
{
return
mShell
;
}
nsIFrame
*
GetFrame
(
)
;
bool
IsDestroyed
(
)
{
return
mIsDestroyed
;
}
bool
IsWaylandPopup
(
)
;
bool
IsPIPWindow
(
)
{
return
mIsPIPWindow
;
}
;
void
DispatchDragEvent
(
mozilla
:
:
EventMessage
aMsg
const
LayoutDeviceIntPoint
&
aRefPoint
guint
aTime
)
;
static
void
UpdateDragStatus
(
GdkDragContext
*
aDragContext
nsIDragService
*
aDragService
)
;
WidgetEventTime
GetWidgetEventTime
(
guint32
aEventTime
)
;
mozilla
:
:
TimeStamp
GetEventTimeStamp
(
guint32
aEventTime
)
;
mozilla
:
:
CurrentX11TimeGetter
*
GetCurrentTimeGetter
(
)
;
virtual
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
virtual
InputContext
GetInputContext
(
)
override
;
virtual
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
;
void
GetEditCommandsRemapped
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
uint32_t
aGeckoKeyCode
uint32_t
aNativeKeyCode
)
;
virtual
bool
GetEditCommands
(
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
ResizeTransparencyBitmap
(
)
;
void
ApplyTransparencyBitmap
(
)
;
void
ClearTransparencyBitmap
(
)
;
virtual
void
SetTransparencyMode
(
nsTransparencyMode
aMode
)
override
;
virtual
nsTransparencyMode
GetTransparencyMode
(
)
override
;
virtual
void
SetWindowMouseTransparent
(
bool
aIsTransparent
)
override
;
virtual
nsresult
ConfigureChildren
(
const
nsTArray
<
Configuration
>
&
aConfigurations
)
override
;
nsresult
UpdateTranslucentWindowAlphaInternal
(
const
nsIntRect
&
aRect
uint8_t
*
aAlphas
int32_t
aStride
)
;
void
UpdateTitlebarTransparencyBitmap
(
)
;
virtual
void
ReparentNativeWidget
(
nsIWidget
*
aNewParent
)
override
;
virtual
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
uint32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
{
return
SynthesizeNativeMouseEvent
(
aPoint
GDK_MOTION_NOTIFY
0
aObserver
)
;
}
virtual
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
#
ifdef
MOZ_X11
Display
*
XDisplay
(
)
{
return
mXDisplay
;
}
#
endif
#
ifdef
MOZ_WAYLAND
wl_display
*
GetWaylandDisplay
(
)
;
bool
WaylandSurfaceNeedsClear
(
)
;
virtual
void
CreateCompositorVsyncDispatcher
(
)
override
;
#
endif
virtual
void
GetCompositorWidgetInitData
(
mozilla
:
:
widget
:
:
CompositorWidgetInitData
*
aInitData
)
override
;
virtual
nsresult
SetNonClientMargins
(
LayoutDeviceIntMargin
&
aMargins
)
override
;
void
SetDrawsInTitlebar
(
bool
aState
)
override
;
virtual
void
UpdateWindowDraggingRegion
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
gint
GdkScaleFactor
(
)
;
gint
DevicePixelsToGdkCoordRoundUp
(
int
pixels
)
;
gint
DevicePixelsToGdkCoordRoundDown
(
int
pixels
)
;
GdkPoint
DevicePixelsToGdkPointRoundDown
(
LayoutDeviceIntPoint
point
)
;
GdkRectangle
DevicePixelsToGdkSizeRoundUp
(
LayoutDeviceIntSize
pixelSize
)
;
int
GdkCoordToDevicePixels
(
gint
coord
)
;
LayoutDeviceIntPoint
GdkPointToDevicePixels
(
GdkPoint
point
)
;
LayoutDeviceIntPoint
GdkEventCoordsToDevicePixels
(
gdouble
x
gdouble
y
)
;
LayoutDeviceIntRect
GdkRectToDevicePixels
(
GdkRectangle
rect
)
;
virtual
bool
WidgetTypeSupportsAcceleration
(
)
override
;
nsresult
SetSystemFont
(
const
nsCString
&
aFontName
)
override
;
nsresult
GetSystemFont
(
nsCString
&
aFontName
)
override
;
typedef
enum
{
GTK_DECORATION_SYSTEM
GTK_DECORATION_CLIENT
GTK_DECORATION_NONE
}
GtkWindowDecoration
;
static
GtkWindowDecoration
GetToplevelWindowDecoration
(
)
;
static
GtkWindowDecoration
GetPopupWindowDecoration
(
)
;
static
bool
HideTitlebarByDefault
(
)
;
static
bool
GetTopLevelWindowActiveState
(
nsIFrame
*
aFrame
)
;
static
bool
TitlebarUseShapeMask
(
)
;
#
ifdef
MOZ_WAYLAND
virtual
nsresult
GetScreenRect
(
LayoutDeviceIntRect
*
aRect
)
override
;
virtual
nsRect
GetPreferredPopupRect
(
)
override
{
return
mPreferredPopupRect
;
}
;
virtual
void
FlushPreferredPopupRect
(
)
override
{
mPreferredPopupRect
=
nsRect
(
0
0
0
0
)
;
mPreferredPopupRectFlushed
=
true
;
}
;
#
endif
bool
IsRemoteContent
(
)
{
return
HasRemoteContent
(
)
;
}
static
void
HideWaylandOpenedPopups
(
)
;
void
NativeMoveResizeWaylandPopupCB
(
const
GdkRectangle
*
aFinalSize
bool
aFlippedX
bool
aFlippedY
)
;
static
bool
IsToplevelWindowTransparent
(
)
;
protected
:
virtual
~
nsWindow
(
)
;
void
DispatchActivateEvent
(
void
)
;
void
DispatchDeactivateEvent
(
void
)
;
void
MaybeDispatchResized
(
)
;
virtual
void
RegisterTouchWindow
(
)
override
;
virtual
bool
CompositorInitiallyPaused
(
)
override
{
#
ifdef
MOZ_WAYLAND
return
mCompositorInitiallyPaused
;
#
else
return
false
;
#
endif
}
nsCOMPtr
<
nsIWidget
>
mParent
;
bool
mIsTopLevel
;
bool
mIsDestroyed
;
bool
mListenForResizes
;
bool
mNeedsDispatchResized
;
bool
mIsShown
;
bool
mNeedsShow
;
bool
mEnabled
;
bool
mCreated
;
bool
mHandleTouchEvent
;
bool
mIsDragPopup
;
bool
mIsX11Display
;
#
ifdef
MOZ_WAYLAND
bool
mNeedsCompositorResume
;
bool
mCompositorInitiallyPaused
;
#
endif
bool
mWindowScaleFactorChanged
;
int
mWindowScaleFactor
;
bool
mCompositedScreen
;
private
:
void
DestroyChildWindows
(
)
;
GtkWidget
*
GetToplevelWidget
(
)
;
nsWindow
*
GetContainerWindow
(
)
;
void
SetUrgencyHint
(
GtkWidget
*
top_window
bool
state
)
;
void
SetDefaultIcon
(
void
)
;
void
SetWindowDecoration
(
nsBorderStyle
aStyle
)
;
void
InitButtonEvent
(
mozilla
:
:
WidgetMouseEvent
&
aEvent
GdkEventButton
*
aGdkEvent
)
;
bool
CheckForRollup
(
gdouble
aMouseX
gdouble
aMouseY
bool
aIsWheel
bool
aAlwaysRollup
)
;
void
CheckForRollupDuringGrab
(
)
{
CheckForRollup
(
0
0
false
true
)
;
}
bool
GetDragInfo
(
mozilla
:
:
WidgetMouseEvent
*
aMouseEvent
GdkWindow
*
*
aWindow
gint
*
aButton
gint
*
aRootX
gint
*
aRootY
)
;
void
ClearCachedResources
(
)
;
nsIWidgetListener
*
GetListener
(
)
;
nsWindow
*
GetTransientForWindowIfPopup
(
)
;
bool
IsHandlingTouchSequence
(
GdkEventSequence
*
aSequence
)
;
void
ResizeInt
(
int
aX
int
aY
int
aWidth
int
aHeight
bool
aMove
bool
aRepaint
)
;
void
NativeMoveResizeWaylandPopup
(
GdkPoint
*
aPosition
GdkRectangle
*
aSize
)
;
GtkTextDirection
GetTextDirection
(
)
;
void
AddCSDDecorationSize
(
int
*
aWidth
int
*
aHeight
)
;
#
ifdef
MOZ_X11
typedef
enum
{
GTK_WIDGET_COMPOSIDED_DEFAULT
=
0
GTK_WIDGET_COMPOSIDED_DISABLED
=
1
GTK_WIDGET_COMPOSIDED_ENABLED
=
2
}
WindowComposeRequest
;
void
SetCompositorHint
(
WindowComposeRequest
aState
)
;
#
endif
nsCString
mGtkWindowAppName
;
nsCString
mGtkWindowRoleName
;
void
RefreshWindowClass
(
)
;
GtkWidget
*
mShell
;
MozContainer
*
mContainer
;
GdkWindow
*
mGdkWindow
;
bool
mWindowShouldStartDragging
=
false
;
PlatformCompositorWidgetDelegate
*
mCompositorWidgetDelegate
;
uint32_t
mHasMappedToplevel
:
1
mRetryPointerGrab
:
1
;
nsSizeMode
mSizeState
;
float
mAspectRatio
;
float
mAspectRatioSaved
;
nsIntPoint
mClientOffset
;
guint32
mLastScrollEventTime
;
bool
mPanInProgress
=
false
;
nsRefPtrHashtable
<
nsPtrHashKey
<
GdkEventSequence
>
mozilla
:
:
dom
:
:
Touch
>
mTouches
;
#
ifdef
MOZ_X11
Display
*
mXDisplay
;
Window
mXWindow
;
Visual
*
mXVisual
;
int
mXDepth
;
mozilla
:
:
widget
:
:
WindowSurfaceProvider
mSurfaceProvider
;
bool
ConfigureX11GLVisual
(
bool
aUseAlpha
)
;
#
endif
#
ifdef
MOZ_WAYLAND
RefPtr
<
mozilla
:
:
gfx
:
:
VsyncSource
>
mWaylandVsyncSource
;
#
endif
unsigned
int
mPendingConfigures
;
GtkWindowDecoration
mGtkWindowDecoration
;
bool
mDrawToContainer
;
bool
mDrawInTitlebar
;
bool
mTitlebarBackdropState
;
LayoutDeviceIntRegion
mDraggableRegion
;
bool
mIsPIPWindow
;
bool
mAlwaysOnTop
;
#
ifdef
ACCESSIBILITY
RefPtr
<
mozilla
:
:
a11y
:
:
Accessible
>
mRootAccessible
;
void
CreateRootAccessible
(
)
;
void
DispatchEventToRootAccessible
(
uint32_t
aEventType
)
;
void
DispatchActivateEventAccessible
(
)
;
void
DispatchDeactivateEventAccessible
(
)
;
void
DispatchMaximizeEventAccessible
(
)
;
void
DispatchMinimizeEventAccessible
(
)
;
void
DispatchRestoreEventAccessible
(
)
;
#
endif
static
GdkCursor
*
gsGtkCursorCache
[
eCursorCount
]
;
bool
mIsTransparent
;
gchar
*
mTransparencyBitmap
;
int32_t
mTransparencyBitmapWidth
;
int32_t
mTransparencyBitmapHeight
;
bool
mTransparencyBitmapForTitlebar
;
bool
mHasAlphaVisual
;
void
InitDragEvent
(
mozilla
:
:
WidgetDragEvent
&
aEvent
)
;
float
mLastMotionPressure
;
nsSizeMode
mLastSizeMode
;
bool
mBoundsAreValid
;
static
bool
DragInProgress
(
void
)
;
void
DispatchMissedButtonReleases
(
GdkEventCrossing
*
aGdkEvent
)
;
virtual
LayerManager
*
GetLayerManager
(
PLayerTransactionChild
*
aShadowManager
=
nullptr
LayersBackend
aBackendHint
=
mozilla
:
:
layers
:
:
LayersBackend
:
:
LAYERS_NONE
LayerManagerPersistence
aPersistence
=
LAYER_MANAGER_CURRENT
)
override
;
void
SetCompositorWidgetDelegate
(
CompositorWidgetDelegate
*
delegate
)
override
;
void
CleanLayerManagerRecursive
(
)
;
virtual
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
void
UpdateMozWindowActive
(
)
;
void
ForceTitlebarRedraw
(
)
;
bool
DoDrawTilebarCorners
(
)
;
bool
IsChromeWindowTitlebar
(
)
;
void
SetPopupWindowDecoration
(
bool
aShowOnTaskbar
)
;
void
ApplySizeConstraints
(
void
)
;
bool
IsMainMenuWindow
(
)
;
GtkWidget
*
ConfigureWaylandPopupWindows
(
)
;
void
PauseRemoteRenderer
(
)
;
void
HideWaylandWindow
(
)
;
void
HideWaylandTooltips
(
)
;
void
HideWaylandPopupAndAllChildren
(
)
;
void
CleanupWaylandPopups
(
)
;
GtkWindow
*
GetCurrentTopmostWindow
(
)
;
GtkWindow
*
GetCurrentWindow
(
)
;
GtkWindow
*
GetTopmostWindow
(
)
;
bool
IsWidgetOverflowWindow
(
)
;
nsRect
mPreferredPopupRect
;
bool
mPreferredPopupRectFlushed
;
bool
mWaitingForMoveToRectCB
;
LayoutDeviceIntRect
mPendingSizeRect
;
RefPtr
<
mozilla
:
:
widget
:
:
IMContextWrapper
>
mIMContext
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
CurrentX11TimeGetter
>
mCurrentTimeGetter
;
static
bool
sTransparentMainWindow
;
}
;
#
endif
