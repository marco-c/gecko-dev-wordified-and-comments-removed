#
ifndef
__nsWindow_h__
#
define
__nsWindow_h__
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gtk
/
gtk
.
h
>
#
include
"
CompositorWidget
.
h
"
#
include
"
MozContainer
.
h
"
#
include
"
VsyncSource
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
widget
/
WindowSurface
.
h
"
#
include
"
mozilla
/
widget
/
WindowSurfaceProvider
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
IMContextWrapper
.
h
"
#
include
"
LookAndFeel
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
LocalAccessible
.
h
"
#
endif
#
ifdef
MOZ_X11
#
include
<
gdk
/
gdkx
.
h
>
#
include
"
X11UndefineNone
.
h
"
#
endif
#
ifdef
MOZ_WAYLAND
#
include
<
gdk
/
gdkwayland
.
h
>
#
include
"
base
/
thread
.
h
"
#
include
"
WaylandVsyncSource
.
h
"
#
include
"
nsClipboardWayland
.
h
"
#
endif
#
ifdef
MOZ_LOGGING
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
Units
.
h
"
extern
mozilla
:
:
LazyLogModule
gWidgetLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetDragLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetPopupLog
;
extern
mozilla
:
:
LazyLogModule
gWidgetVsync
;
#
define
LOG
(
str
.
.
.
)
\
MOZ_LOG
(
IsPopup
(
)
?
gWidgetPopupLog
:
gWidgetLog
\
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
%
s
:
"
str
GetDebugTag
(
)
.
get
(
)
#
#
__VA_ARGS__
)
)
#
define
LOGW
(
.
.
.
)
MOZ_LOG
(
gWidgetLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
LOGDRAG
(
.
.
.
)
\
MOZ_LOG
(
gWidgetDragLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
LOG_POPUP
(
.
.
.
)
\
MOZ_LOG
(
gWidgetPopupLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
LOG_VSYNC
(
.
.
.
)
\
MOZ_LOG
(
gWidgetVsync
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
LOG_ENABLED
(
)
\
(
MOZ_LOG_TEST
(
gWidgetPopupLog
mozilla
:
:
LogLevel
:
:
Debug
)
|
|
\
MOZ_LOG_TEST
(
gWidgetLog
mozilla
:
:
LogLevel
:
:
Debug
)
)
#
else
#
define
LOG
(
.
.
.
)
#
define
LOGW
(
.
.
.
)
#
define
LOGDRAG
(
.
.
.
)
#
define
LOG_POPUP
(
.
.
.
)
#
define
LOG_ENABLED
(
)
false
#
endif
#
if
defined
(
MOZ_WAYLAND
)
&
&
!
defined
(
MOZ_X11
)
typedef
uintptr_t
Window
;
#
endif
class
gfxPattern
;
class
nsIFrame
;
#
if
!
GTK_CHECK_VERSION
(
3
18
0
)
struct
_GdkEventTouchpadPinch
;
typedef
struct
_GdkEventTouchpadPinch
GdkEventTouchpadPinch
;
#
endif
#
if
!
GTK_CHECK_VERSION
(
3
22
0
)
typedef
enum
{
GDK_ANCHOR_FLIP_X
=
1
<
<
0
GDK_ANCHOR_FLIP_Y
=
1
<
<
1
GDK_ANCHOR_SLIDE_X
=
1
<
<
2
GDK_ANCHOR_SLIDE_Y
=
1
<
<
3
GDK_ANCHOR_RESIZE_X
=
1
<
<
4
GDK_ANCHOR_RESIZE_Y
=
1
<
<
5
GDK_ANCHOR_FLIP
=
GDK_ANCHOR_FLIP_X
|
GDK_ANCHOR_FLIP_Y
GDK_ANCHOR_SLIDE
=
GDK_ANCHOR_SLIDE_X
|
GDK_ANCHOR_SLIDE_Y
GDK_ANCHOR_RESIZE
=
GDK_ANCHOR_RESIZE_X
|
GDK_ANCHOR_RESIZE_Y
}
GdkAnchorHints
;
#
endif
namespace
mozilla
{
enum
class
NativeKeyBindingsType
:
uint8_t
;
class
TimeStamp
;
#
ifdef
MOZ_X11
class
CurrentX11TimeGetter
;
#
endif
namespace
widget
{
class
Screen
;
}
}
class
nsWindow
final
:
public
nsBaseWidget
{
public
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
WidgetEventTime
WidgetEventTime
;
typedef
mozilla
:
:
WidgetKeyboardEvent
WidgetKeyboardEvent
;
typedef
mozilla
:
:
widget
:
:
PlatformCompositorWidgetDelegate
PlatformCompositorWidgetDelegate
;
nsWindow
(
)
;
static
void
ReleaseGlobals
(
)
;
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
nsWindow
nsBaseWidget
)
nsresult
DispatchEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
&
aStatus
)
override
;
void
OnDestroy
(
)
override
;
bool
AreBoundsSane
(
void
)
;
using
nsBaseWidget
:
:
Create
;
[
[
nodiscard
]
]
nsresult
Create
(
nsIWidget
*
aParent
nsNativeWidget
aNativeParent
const
LayoutDeviceIntRect
&
aRect
InitData
*
aInitData
)
override
;
void
Destroy
(
)
override
;
nsIWidget
*
GetParent
(
)
override
;
float
GetDPI
(
)
override
;
double
GetDefaultScaleInternal
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
override
;
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScaleByScreen
(
)
override
;
void
SetParent
(
nsIWidget
*
aNewParent
)
override
;
void
SetModal
(
bool
aModal
)
override
;
bool
IsVisible
(
)
const
override
;
bool
IsMapped
(
)
const
override
;
void
ConstrainPosition
(
DesktopIntPoint
&
)
override
;
void
SetSizeConstraints
(
const
SizeConstraints
&
aConstraints
)
override
;
void
LockAspectRatio
(
bool
aShouldLock
)
override
;
void
Move
(
double
aX
double
aY
)
override
;
void
Show
(
bool
aState
)
override
;
void
Resize
(
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
void
Resize
(
double
aX
double
aY
double
aWidth
double
aHeight
bool
aRepaint
)
override
;
bool
IsEnabled
(
)
const
override
;
void
SetZIndex
(
int32_t
aZIndex
)
override
;
nsSizeMode
SizeMode
(
)
override
{
return
mSizeMode
;
}
void
SetSizeMode
(
nsSizeMode
aMode
)
override
;
void
GetWorkspaceID
(
nsAString
&
workspaceID
)
override
;
void
MoveToWorkspace
(
const
nsAString
&
workspaceID
)
override
;
void
Enable
(
bool
aState
)
override
;
void
SetFocus
(
Raise
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
override
;
LayoutDeviceIntRect
GetScreenBounds
(
)
override
;
LayoutDeviceIntRect
GetClientBounds
(
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
LayoutDeviceIntPoint
GetClientOffset
(
)
override
{
return
mClientOffset
;
}
LayoutDeviceIntPoint
GetScreenEdgeSlop
(
)
override
;
void
RecomputeClientOffset
(
bool
aNotify
)
;
void
SetCursor
(
const
Cursor
&
)
override
;
void
Invalidate
(
const
LayoutDeviceIntRect
&
aRect
)
override
;
void
*
GetNativeData
(
uint32_t
aDataType
)
override
;
nsresult
SetTitle
(
const
nsAString
&
aTitle
)
override
;
void
SetIcon
(
const
nsAString
&
aIconSpec
)
override
;
void
SetWindowClass
(
const
nsAString
&
xulWinType
const
nsAString
&
xulWinClass
const
nsAString
&
xulWinName
)
override
;
LayoutDeviceIntPoint
WidgetToScreenOffset
(
)
override
;
void
CaptureRollupEvents
(
bool
aDoCapture
)
override
;
[
[
nodiscard
]
]
nsresult
GetAttention
(
int32_t
aCycleCount
)
override
;
bool
HasPendingInputEvent
(
)
override
;
bool
PrepareForFullscreenTransition
(
nsISupports
*
*
aData
)
override
;
void
PerformFullscreenTransition
(
FullscreenTransitionStage
aStage
uint16_t
aDuration
nsISupports
*
aData
nsIRunnable
*
aCallback
)
override
;
already_AddRefed
<
Screen
>
GetWidgetScreen
(
)
override
;
nsresult
MakeFullScreen
(
bool
aFullScreen
)
override
;
void
HideWindowChrome
(
bool
aShouldHide
)
override
;
static
guint32
GetLastUserInputTime
(
)
;
gint
ConvertBorderStyles
(
BorderStyle
aStyle
)
;
mozilla
:
:
widget
:
:
IMContextWrapper
*
GetIMContext
(
)
const
{
return
mIMContext
;
}
bool
DispatchCommandEvent
(
nsAtom
*
aCommand
)
;
bool
DispatchContentCommandEvent
(
mozilla
:
:
EventMessage
aMsg
)
;
gboolean
OnExposeEvent
(
cairo_t
*
cr
)
;
gboolean
OnConfigureEvent
(
GtkWidget
*
aWidget
GdkEventConfigure
*
aEvent
)
;
void
OnMap
(
)
;
void
OnUnmap
(
)
;
void
OnSizeAllocate
(
GtkAllocation
*
aAllocation
)
;
void
OnDeleteEvent
(
)
;
void
OnEnterNotifyEvent
(
GdkEventCrossing
*
aEvent
)
;
void
OnLeaveNotifyEvent
(
GdkEventCrossing
*
aEvent
)
;
void
OnMotionNotifyEvent
(
GdkEventMotion
*
aEvent
)
;
void
OnButtonPressEvent
(
GdkEventButton
*
aEvent
)
;
void
OnButtonReleaseEvent
(
GdkEventButton
*
aEvent
)
;
void
OnContainerFocusInEvent
(
GdkEventFocus
*
aEvent
)
;
void
OnContainerFocusOutEvent
(
GdkEventFocus
*
aEvent
)
;
gboolean
OnKeyPressEvent
(
GdkEventKey
*
aEvent
)
;
gboolean
OnKeyReleaseEvent
(
GdkEventKey
*
aEvent
)
;
void
OnScrollEvent
(
GdkEventScroll
*
aEvent
)
;
void
OnVisibilityNotifyEvent
(
GdkVisibilityState
aState
)
;
void
OnWindowStateEvent
(
GtkWidget
*
aWidget
GdkEventWindowState
*
aEvent
)
;
void
OnDragDataReceivedEvent
(
GtkWidget
*
aWidget
GdkDragContext
*
aDragContext
gint
aX
gint
aY
GtkSelectionData
*
aSelectionData
guint
aInfo
guint
aTime
gpointer
aData
)
;
gboolean
OnPropertyNotifyEvent
(
GtkWidget
*
aWidget
GdkEventProperty
*
aEvent
)
;
gboolean
OnTouchEvent
(
GdkEventTouch
*
aEvent
)
;
gboolean
OnTouchpadPinchEvent
(
GdkEventTouchpadPinch
*
aEvent
)
;
gint
GetInputRegionMarginInGdkCoords
(
)
;
void
UpdateTopLevelOpaqueRegion
(
)
;
already_AddRefed
<
mozilla
:
:
gfx
:
:
DrawTarget
>
StartRemoteDrawingInRegion
(
const
LayoutDeviceIntRegion
&
aInvalidRegion
mozilla
:
:
layers
:
:
BufferMode
*
aBufferMode
)
override
;
void
EndRemoteDrawingInRegion
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDrawTarget
const
LayoutDeviceIntRegion
&
aInvalidRegion
)
override
;
void
SetProgress
(
unsigned
long
progressPercent
)
;
RefPtr
<
mozilla
:
:
VsyncDispatcher
>
GetVsyncDispatcher
(
)
override
;
bool
SynchronouslyRepaintOnResize
(
)
override
;
void
OnDPIChanged
(
)
;
void
OnCheckResize
(
)
;
void
OnCompositedChanged
(
)
;
void
OnScaleChanged
(
bool
aNotify
)
;
void
DispatchResized
(
)
;
static
guint32
sLastButtonPressTime
;
MozContainer
*
GetMozContainer
(
)
{
return
mContainer
;
}
GdkWindow
*
GetGdkWindow
(
)
const
{
return
mGdkWindow
;
}
;
GdkWindow
*
GetToplevelGdkWindow
(
)
const
;
GtkWidget
*
GetGtkWidget
(
)
const
{
return
mShell
;
}
nsIFrame
*
GetFrame
(
)
const
;
nsWindow
*
GetEffectiveParent
(
)
;
bool
IsDestroyed
(
)
const
{
return
mIsDestroyed
;
}
bool
IsPopup
(
)
const
;
bool
IsWaylandPopup
(
)
const
;
bool
IsDragPopup
(
)
{
return
mIsDragPopup
;
}
;
nsAutoCString
GetDebugTag
(
)
const
;
void
DispatchDragEvent
(
mozilla
:
:
EventMessage
aMsg
const
LayoutDeviceIntPoint
&
aRefPoint
guint
aTime
)
;
static
void
UpdateDragStatus
(
GdkDragContext
*
aDragContext
nsIDragService
*
aDragService
)
;
void
SetDragSource
(
GdkDragContext
*
aSourceDragContext
)
;
WidgetEventTime
GetWidgetEventTime
(
guint32
aEventTime
)
;
mozilla
:
:
TimeStamp
GetEventTimeStamp
(
guint32
aEventTime
)
;
#
ifdef
MOZ_X11
mozilla
:
:
CurrentX11TimeGetter
*
GetCurrentTimeGetter
(
)
;
#
endif
void
SetInputContext
(
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
override
;
InputContext
GetInputContext
(
)
override
;
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
override
;
MOZ_CAN_RUN_SCRIPT
bool
GetEditCommands
(
mozilla
:
:
NativeKeyBindingsType
aType
const
mozilla
:
:
WidgetKeyboardEvent
&
aEvent
nsTArray
<
mozilla
:
:
CommandInt
>
&
aCommands
)
override
;
void
ResizeTransparencyBitmap
(
)
;
void
ApplyTransparencyBitmap
(
)
;
void
ClearTransparencyBitmap
(
)
;
void
SetTransparencyMode
(
TransparencyMode
aMode
)
override
;
TransparencyMode
GetTransparencyMode
(
)
override
;
void
SetInputRegion
(
const
InputRegion
&
)
override
;
nsresult
UpdateTranslucentWindowAlphaInternal
(
const
nsIntRect
&
aRect
uint8_t
*
aAlphas
int32_t
aStride
)
;
void
ReparentNativeWidget
(
nsIWidget
*
aNewParent
)
override
;
void
UpdateTitlebarTransparencyBitmap
(
)
;
nsresult
SynthesizeNativeMouseEvent
(
LayoutDeviceIntPoint
aPoint
NativeMouseMessage
aNativeMessage
mozilla
:
:
MouseButton
aButton
nsIWidget
:
:
Modifiers
aModifierFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeMouseMove
(
LayoutDeviceIntPoint
aPoint
nsIObserver
*
aObserver
)
override
{
return
SynthesizeNativeMouseEvent
(
aPoint
NativeMouseMessage
:
:
Move
mozilla
:
:
MouseButton
:
:
eNotPressed
nsIWidget
:
:
Modifiers
:
:
NO_MODIFIERS
aObserver
)
;
}
nsresult
SynthesizeNativeMouseScrollEvent
(
LayoutDeviceIntPoint
aPoint
uint32_t
aNativeMessage
double
aDeltaX
double
aDeltaY
double
aDeltaZ
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
nsresult
SynthesizeNativeTouchPadPinch
(
TouchpadGesturePhase
aEventPhase
float
aScale
LayoutDeviceIntPoint
aPoint
int32_t
aModifierFlags
)
override
;
nsresult
SynthesizeNativeTouchpadPan
(
TouchpadGesturePhase
aEventPhase
LayoutDeviceIntPoint
aPoint
double
aDeltaX
double
aDeltaY
int32_t
aModifierFlags
nsIObserver
*
aObserver
)
override
;
void
GetCompositorWidgetInitData
(
mozilla
:
:
widget
:
:
CompositorWidgetInitData
*
aInitData
)
override
;
nsresult
SetNonClientMargins
(
const
LayoutDeviceIntMargin
&
)
override
;
void
SetDrawsInTitlebar
(
bool
aState
)
;
mozilla
:
:
LayoutDeviceIntCoord
GetTitlebarRadius
(
)
;
LayoutDeviceIntRect
GetTitlebarRect
(
)
;
void
UpdateWindowDraggingRegion
(
const
LayoutDeviceIntRegion
&
aRegion
)
override
;
gint
GdkCeiledScaleFactor
(
)
;
double
FractionalScaleFactor
(
)
;
gint
DevicePixelsToGdkCoordRoundUp
(
int
)
;
gint
DevicePixelsToGdkCoordRoundDown
(
int
)
;
GdkPoint
DevicePixelsToGdkPointRoundDown
(
const
LayoutDeviceIntPoint
&
)
;
GdkRectangle
DevicePixelsToGdkSizeRoundUp
(
const
LayoutDeviceIntSize
&
)
;
GdkRectangle
DevicePixelsToGdkRectRoundOut
(
const
LayoutDeviceIntRect
&
)
;
int
GdkCoordToDevicePixels
(
gint
)
;
LayoutDeviceIntPoint
GdkPointToDevicePixels
(
const
GdkPoint
&
)
;
LayoutDeviceIntPoint
GdkEventCoordsToDevicePixels
(
gdouble
aX
gdouble
aY
)
;
LayoutDeviceIntRect
GdkRectToDevicePixels
(
const
GdkRectangle
&
)
;
bool
WidgetTypeSupportsAcceleration
(
)
override
;
nsresult
SetSystemFont
(
const
nsCString
&
aFontName
)
override
;
nsresult
GetSystemFont
(
nsCString
&
aFontName
)
override
;
typedef
enum
{
GTK_DECORATION_SYSTEM
GTK_DECORATION_CLIENT
GTK_DECORATION_NONE
}
GtkWindowDecoration
;
static
GtkWindowDecoration
GetSystemGtkWindowDecoration
(
)
;
static
bool
GetTopLevelWindowActiveState
(
nsIFrame
*
aFrame
)
;
static
bool
TitlebarUseShapeMask
(
)
;
bool
IsRemoteContent
(
)
{
return
HasRemoteContent
(
)
;
}
void
NativeMoveResizeWaylandPopupCallback
(
const
GdkRectangle
*
aFinalSize
bool
aFlippedX
bool
aFlippedY
)
;
static
bool
IsToplevelWindowTransparent
(
)
;
static
nsWindow
*
GetFocusedWindow
(
)
;
#
ifdef
MOZ_WAYLAND
static
void
TransferFocusToWaylandWindow
(
nsWindow
*
aWindow
)
;
void
FocusWaylandWindow
(
const
char
*
aTokenID
)
;
bool
GetCSDDecorationOffset
(
int
*
aDx
int
*
aDy
)
;
bool
SetEGLNativeWindowSize
(
const
LayoutDeviceIntSize
&
aEGLWindowSize
)
;
void
WaylandDragWorkaround
(
GdkEventButton
*
aEvent
)
;
void
CreateCompositorVsyncDispatcher
(
)
override
;
LayoutDeviceIntPoint
GetNativePointerLockCenter
(
)
{
return
mNativePointerLockCenter
;
}
void
SetNativePointerLockCenter
(
const
LayoutDeviceIntPoint
&
aLockCenter
)
override
;
void
LockNativePointer
(
)
override
;
void
UnlockNativePointer
(
)
override
;
LayoutDeviceIntSize
GetMoveToRectPopupSize
(
)
const
override
{
return
mMoveToRectPopupSize
;
}
;
#
endif
typedef
enum
{
COMPOSITOR_ENABLED
COMPOSITOR_PAUSED_FLICKERING
}
WindowCompositorState
;
void
ResumeCompositorImpl
(
)
;
void
ResumeCompositorFlickering
(
)
;
void
ResumeCompositorFromCompositorThread
(
)
;
void
PauseCompositorFlickering
(
)
;
bool
IsWaitingForCompositorResume
(
)
;
void
ClearRenderingQueue
(
)
;
void
DisableRendering
(
)
;
bool
ApplyEnterLeaveMutterWorkaround
(
)
;
void
NotifyOcclusionState
(
mozilla
:
:
widget
:
:
OcclusionState
aState
)
override
;
static
nsWindow
*
GetWindow
(
GdkWindow
*
window
)
;
protected
:
virtual
~
nsWindow
(
)
;
void
DispatchActivateEvent
(
void
)
;
void
DispatchDeactivateEvent
(
void
)
;
void
MaybeDispatchResized
(
)
;
void
DispatchPanGesture
(
mozilla
:
:
PanGestureInput
&
aPanInput
)
;
void
RegisterTouchWindow
(
)
override
;
nsCOMPtr
<
nsIWidget
>
mParent
;
mozilla
:
:
Atomic
<
int
mozilla
:
:
Relaxed
>
mCeiledScaleFactor
{
1
}
;
double
mFractionalScaleFactor
=
0
.
0
;
void
UpdateAlpha
(
mozilla
:
:
gfx
:
:
SourceSurface
*
aSourceSurface
nsIntRect
aBoundsRect
)
;
void
NativeMoveResize
(
bool
aMoved
bool
aResized
)
;
void
NativeShow
(
bool
aAction
)
;
void
SetHasMappedToplevel
(
bool
aState
)
;
LayoutDeviceIntSize
GetSafeWindowSize
(
LayoutDeviceIntSize
aSize
)
;
void
DispatchContextMenuEventFromMouseEvent
(
uint16_t
domButton
GdkEventButton
*
aEvent
const
mozilla
:
:
LayoutDeviceIntPoint
&
aRefPoint
)
;
void
TryToShowNativeWindowMenu
(
GdkEventButton
*
aEvent
)
;
bool
DoTitlebarAction
(
mozilla
:
:
LookAndFeel
:
:
TitlebarEvent
aEvent
GdkEventButton
*
aButtonEvent
)
;
void
WaylandStartVsync
(
)
;
void
WaylandStopVsync
(
)
;
void
DestroyChildWindows
(
)
;
GtkWidget
*
GetToplevelWidget
(
)
const
;
nsWindow
*
GetContainerWindow
(
)
const
;
Window
GetX11Window
(
)
;
bool
GetShapedState
(
)
;
void
EnsureGdkWindow
(
)
;
void
SetUrgencyHint
(
GtkWidget
*
top_window
bool
state
)
;
void
SetDefaultIcon
(
void
)
;
void
SetWindowDecoration
(
BorderStyle
aStyle
)
;
void
InitButtonEvent
(
mozilla
:
:
WidgetMouseEvent
&
aEvent
GdkEventButton
*
aGdkEvent
const
mozilla
:
:
LayoutDeviceIntPoint
&
aRefPoint
)
;
bool
CheckForRollup
(
gdouble
aMouseX
gdouble
aMouseY
bool
aIsWheel
bool
aAlwaysRollup
)
;
void
RollupAllMenus
(
)
{
CheckForRollup
(
0
0
false
true
)
;
}
void
CheckForRollupDuringGrab
(
)
{
RollupAllMenus
(
)
;
}
bool
GetDragInfo
(
mozilla
:
:
WidgetMouseEvent
*
aMouseEvent
GdkWindow
*
*
aWindow
gint
*
aButton
gint
*
aRootX
gint
*
aRootY
)
;
nsIWidgetListener
*
GetListener
(
)
;
nsWindow
*
GetTransientForWindowIfPopup
(
)
;
bool
IsHandlingTouchSequence
(
GdkEventSequence
*
aSequence
)
;
void
ResizeInt
(
const
mozilla
:
:
Maybe
<
LayoutDeviceIntPoint
>
&
aMove
LayoutDeviceIntSize
aSize
)
;
void
NativeMoveResizeWaylandPopup
(
bool
aMove
bool
aResize
)
;
mozilla
:
:
Maybe
<
GdkWindowEdge
>
CheckResizerEdge
(
const
LayoutDeviceIntPoint
&
)
;
GtkTextDirection
GetTextDirection
(
)
;
bool
DrawsToCSDTitlebar
(
)
const
;
void
AddCSDDecorationSize
(
int
*
aWidth
int
*
aHeight
)
;
void
CreateAndPutGdkScrollEvent
(
mozilla
:
:
LayoutDeviceIntPoint
aPoint
double
aDeltaX
double
aDeltaY
)
;
nsCString
mGtkWindowAppClass
;
nsCString
mGtkWindowAppName
;
nsCString
mGtkWindowRoleName
;
void
RefreshWindowClass
(
)
;
GtkWidget
*
mShell
=
nullptr
;
MozContainer
*
mContainer
=
nullptr
;
GdkWindow
*
mGdkWindow
=
nullptr
;
PlatformCompositorWidgetDelegate
*
mCompositorWidgetDelegate
=
nullptr
;
mozilla
:
:
Atomic
<
WindowCompositorState
mozilla
:
:
Relaxed
>
mCompositorState
{
COMPOSITOR_ENABLED
}
;
guint
mCompositorPauseTimeoutID
=
0
;
nsSizeMode
mSizeMode
=
nsSizeMode_Normal
;
nsSizeMode
mLastSizeModeRequest
=
nsSizeMode_Normal
;
nsSizeMode
mLastSizeModeBeforeFullscreen
=
nsSizeMode_Normal
;
float
mAspectRatio
=
0
.
0f
;
float
mAspectRatioSaved
=
0
.
0f
;
mozilla
:
:
Maybe
<
GtkOrientation
>
mAspectResizer
;
LayoutDeviceIntPoint
mLastResizePoint
;
LayoutDeviceIntSize
mLastSizeRequest
;
LayoutDeviceIntPoint
mClientOffset
;
LayoutDeviceIntSize
mNeedsDispatchSize
=
LayoutDeviceIntSize
(
-
1
-
1
)
;
guint32
mLastScrollEventTime
=
GDK_CURRENT_TIME
;
mozilla
:
:
ScreenCoord
mLastPinchEventSpan
;
struct
TouchpadPinchGestureState
{
ScreenPoint
mBeginFocus
;
ScreenPoint
mCurrentFocus
;
}
;
ScreenPoint
mCurrentTouchpadFocus
;
TouchpadPinchGestureState
mCurrentSynthesizedTouchpadPinch
;
struct
TouchpadPanGestureState
{
mozilla
:
:
Maybe
<
TouchpadGesturePhase
>
mTouchpadGesturePhase
;
uint64_t
mSavedObserver
=
0
;
}
;
TouchpadPanGestureState
mCurrentSynthesizedTouchpadPan
;
nsRefPtrHashtable
<
nsPtrHashKey
<
GdkEventSequence
>
mozilla
:
:
dom
:
:
Touch
>
mTouches
;
unsigned
int
mPendingConfigures
=
0
;
GtkWindowDecoration
mGtkWindowDecoration
=
GTK_DECORATION_NONE
;
LayoutDeviceIntRegion
mDraggableRegion
;
static
GdkCursor
*
gsGtkCursorCache
[
eCursorCount
]
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
Relaxed
>
mDrawInTitlebar
{
false
}
;
mozilla
:
:
Mutex
mDestroyMutex
;
bool
mIsDestroyed
:
1
;
bool
mIsShown
:
1
;
bool
mNeedsShow
:
1
;
bool
mIsMapped
:
1
;
bool
mEnabled
:
1
;
bool
mCreated
:
1
;
bool
mHandleTouchEvent
:
1
;
bool
mIsDragPopup
:
1
;
bool
mCompositedScreen
:
1
;
bool
mIsAccelerated
:
1
;
bool
mWindowShouldStartDragging
:
1
;
bool
mHasMappedToplevel
:
1
;
bool
mRetryPointerGrab
:
1
;
bool
mPanInProgress
:
1
;
bool
mTitlebarBackdropState
:
1
;
bool
mIsChildWindow
:
1
;
bool
mAlwaysOnTop
:
1
;
bool
mNoAutoHide
:
1
;
bool
mIsTransparent
:
1
;
bool
mHasReceivedSizeAllocate
:
1
;
bool
mWidgetCursorLocked
:
1
;
bool
mUndecorated
:
1
;
bool
mPopupTrackInHierarchy
:
1
;
bool
mPopupTrackInHierarchyConfigured
:
1
;
bool
mHiddenPopupPositioned
:
1
;
bool
mTransparencyBitmapForTitlebar
:
1
;
bool
mHasAlphaVisual
:
1
;
bool
mPopupAnchored
:
1
;
bool
mPopupContextMenu
:
1
;
bool
mPopupMatchesLayout
:
1
;
bool
mPopupChanged
:
1
;
bool
mPopupTemporaryHidden
:
1
;
bool
mPopupClosed
:
1
;
bool
mPopupUseMoveToRect
:
1
;
bool
mWaitingForMoveToRectCallback
:
1
;
bool
mMovedAfterMoveToRect
:
1
;
bool
mResizedAfterMoveToRect
:
1
;
struct
WaylandPopupMoveToRectParams
{
LayoutDeviceIntRect
mAnchorRect
=
{
0
0
0
0
}
;
GdkGravity
mAnchorRectType
=
GDK_GRAVITY_NORTH_WEST
;
GdkGravity
mPopupAnchorType
=
GDK_GRAVITY_NORTH_WEST
;
GdkAnchorHints
mHints
=
GDK_ANCHOR_SLIDE
;
GdkPoint
mOffset
=
{
0
0
}
;
bool
mAnchorSet
=
false
;
}
;
WaylandPopupMoveToRectParams
mPopupMoveToRectParams
;
bool
mConfiguredClearColor
:
1
;
bool
mGotNonBlankPaint
:
1
;
bool
mNeedsToRetryCapturingMouse
:
1
;
gchar
*
mTransparencyBitmap
=
nullptr
;
int32_t
mTransparencyBitmapWidth
=
0
;
int32_t
mTransparencyBitmapHeight
=
0
;
void
InitDragEvent
(
mozilla
:
:
WidgetDragEvent
&
aEvent
)
;
float
mLastMotionPressure
=
0
.
0f
;
InputRegion
mInputRegion
;
static
bool
DragInProgress
(
void
)
;
void
DispatchMissedButtonReleases
(
GdkEventCrossing
*
aGdkEvent
)
;
void
ConfigureGdkWindow
(
)
;
void
ReleaseGdkWindow
(
)
;
void
ConfigureCompositor
(
)
;
bool
IsAlwaysUndecoratedWindow
(
)
const
;
WindowRenderer
*
GetWindowRenderer
(
)
override
;
void
DidGetNonBlankPaint
(
)
override
;
void
SetCompositorWidgetDelegate
(
CompositorWidgetDelegate
*
delegate
)
override
;
int32_t
RoundsWidgetCoordinatesTo
(
)
override
;
void
UpdateMozWindowActive
(
)
;
void
ForceTitlebarRedraw
(
)
;
bool
DoDrawTilebarCorners
(
)
;
bool
IsChromeWindowTitlebar
(
)
;
void
SetPopupWindowDecoration
(
bool
aShowOnTaskbar
)
;
void
ApplySizeConstraints
(
)
;
GdkPoint
WaylandGetParentPosition
(
)
;
bool
WaylandPopupConfigure
(
)
;
bool
WaylandPopupIsAnchored
(
)
;
bool
WaylandPopupIsMenu
(
)
;
bool
WaylandPopupIsContextMenu
(
)
;
bool
WaylandPopupIsPermanent
(
)
;
bool
WaylandPopupIsFirst
(
)
;
bool
IsWidgetOverflowWindow
(
)
;
void
RemovePopupFromHierarchyList
(
)
;
void
ShowWaylandPopupWindow
(
)
;
void
HideWaylandPopupWindow
(
bool
aTemporaryHidden
bool
aRemoveFromPopupList
)
;
void
ShowWaylandToplevelWindow
(
)
;
void
HideWaylandToplevelWindow
(
)
;
void
WaylandPopupHideTooltips
(
)
;
void
WaylandPopupCloseOrphanedPopups
(
)
;
void
AppendPopupToHierarchyList
(
nsWindow
*
aToplevelWindow
)
;
void
WaylandPopupHierarchyHideTemporary
(
)
;
void
WaylandPopupHierarchyShowTemporaryHidden
(
)
;
void
WaylandPopupHierarchyCalculatePositions
(
)
;
bool
IsInPopupHierarchy
(
)
;
void
AddWindowToPopupHierarchy
(
)
;
void
UpdateWaylandPopupHierarchy
(
)
;
void
WaylandPopupHierarchyHideByLayout
(
nsTArray
<
nsIWidget
*
>
*
aLayoutWidgetHierarchy
)
;
void
WaylandPopupHierarchyValidateByLayout
(
nsTArray
<
nsIWidget
*
>
*
aLayoutWidgetHierarchy
)
;
void
CloseAllPopupsBeforeRemotePopup
(
)
;
void
WaylandPopupHideClosedPopups
(
)
;
void
WaylandPopupPrepareForMove
(
)
;
void
WaylandPopupMoveImpl
(
)
;
void
WaylandPopupMovePlain
(
int
aX
int
aY
)
;
bool
WaylandPopupRemoveNegativePosition
(
int
*
aX
=
nullptr
int
*
aY
=
nullptr
)
;
bool
WaylandPopupCheckAndGetAnchor
(
GdkRectangle
*
aPopupAnchor
GdkPoint
*
aOffset
)
;
bool
WaylandPopupAnchorAdjustForParentPopup
(
GdkRectangle
*
aPopupAnchor
GdkPoint
*
aOffset
)
;
nsWindow
*
GetTopmostWindow
(
)
;
bool
IsPopupInLayoutPopupChain
(
nsTArray
<
nsIWidget
*
>
*
aLayoutWidgetHierarchy
bool
aMustMatchParent
)
;
void
WaylandPopupMarkAsClosed
(
)
;
void
WaylandPopupRemoveClosedPopups
(
)
;
void
WaylandPopupSetDirectPosition
(
)
;
bool
WaylandPopupFitsToplevelWindow
(
bool
aMove
)
;
const
WaylandPopupMoveToRectParams
WaylandPopupGetPositionFromLayout
(
)
;
void
WaylandPopupPropagateChangesToLayout
(
bool
aMove
bool
aResize
)
;
nsWindow
*
WaylandPopupFindLast
(
nsWindow
*
aPopup
)
;
GtkWindow
*
GetCurrentTopmostWindow
(
)
const
;
nsAutoCString
GetFrameTag
(
)
const
;
nsCString
GetPopupTypeName
(
)
;
bool
IsPopupDirectionRTL
(
)
;
#
ifdef
MOZ_LOGGING
void
LogPopupHierarchy
(
)
;
void
LogPopupAnchorHints
(
int
aHints
)
;
void
LogPopupGravity
(
GdkGravity
aGravity
)
;
#
endif
bool
IsTopLevelWindowType
(
)
const
{
return
mWindowType
=
=
WindowType
:
:
TopLevel
|
|
mWindowType
=
=
WindowType
:
:
Dialog
;
}
GdkPoint
mPopupPosition
{
}
;
GdkPoint
mRelativePopupPosition
{
}
;
RefPtr
<
nsWindow
>
mWaylandToplevel
;
RefPtr
<
nsWindow
>
mWaylandPopupNext
;
RefPtr
<
nsWindow
>
mWaylandPopupPrev
;
LayoutDeviceIntSize
mMoveToRectPopupSize
;
RefPtr
<
mozilla
:
:
widget
:
:
IMContextWrapper
>
mIMContext
;
#
ifdef
MOZ_X11
mozilla
:
:
UniquePtr
<
mozilla
:
:
CurrentX11TimeGetter
>
mCurrentTimeGetter
;
#
endif
static
GtkWindowDecoration
sGtkWindowDecoration
;
static
bool
sTransparentMainWindow
;
#
ifdef
ACCESSIBILITY
RefPtr
<
mozilla
:
:
a11y
:
:
LocalAccessible
>
mRootAccessible
;
void
CreateRootAccessible
(
)
;
void
DispatchEventToRootAccessible
(
uint32_t
aEventType
)
;
void
DispatchActivateEventAccessible
(
)
;
void
DispatchDeactivateEventAccessible
(
)
;
void
DispatchMaximizeEventAccessible
(
)
;
void
DispatchMinimizeEventAccessible
(
)
;
void
DispatchRestoreEventAccessible
(
)
;
#
endif
void
SetUserTimeAndStartupTokenForActivatedWindow
(
)
;
void
KioskLockOnMonitor
(
)
;
void
EmulateResizeDrag
(
GdkEventMotion
*
aEvent
)
;
#
ifdef
MOZ_X11
typedef
enum
{
GTK_WIDGET_COMPOSIDED_DEFAULT
=
0
GTK_WIDGET_COMPOSIDED_DISABLED
=
1
GTK_WIDGET_COMPOSIDED_ENABLED
=
2
}
WindowComposeRequest
;
void
SetCompositorHint
(
WindowComposeRequest
aState
)
;
bool
ConfigureX11GLVisual
(
)
;
#
endif
#
ifdef
MOZ_WAYLAND
RefPtr
<
mozilla
:
:
WaylandVsyncSource
>
mWaylandVsyncSource
;
RefPtr
<
mozilla
:
:
VsyncDispatcher
>
mWaylandVsyncDispatcher
;
LayoutDeviceIntPoint
mNativePointerLockCenter
;
zwp_locked_pointer_v1
*
mLockedPointer
=
nullptr
;
zwp_relative_pointer_v1
*
mRelativePointer
=
nullptr
;
#
endif
nsCString
mWindowActivationTokenFromEnv
;
mozilla
:
:
widget
:
:
WindowSurfaceProvider
mSurfaceProvider
;
GdkDragContext
*
mSourceDragContext
=
nullptr
;
#
if
MOZ_LOGGING
LayoutDeviceIntRect
mLastLoggedBoundSize
;
int
mLastLoggedScale
=
-
1
;
#
endif
mozilla
:
:
Maybe
<
int
>
mKioskMonitor
;
}
;
#
endif
