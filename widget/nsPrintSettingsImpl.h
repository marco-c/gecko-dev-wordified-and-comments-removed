#
ifndef
nsPrintSettingsImpl_h__
#
define
nsPrintSettingsImpl_h__
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
nsMargin
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsString
.
h
"
#
define
NUM_HEAD_FOOT
3
class
nsPrintSettings
;
namespace
mozilla
{
struct
PrintSettingsInitializer
{
nsString
mPrinter
;
PaperInfo
mPaperInfo
;
int16_t
mPaperSizeUnit
=
nsIPrintSettings
:
:
kPaperSizeInches
;
bool
mPrintInColor
=
true
;
int
mResolution
=
0
;
int
mSheetOrientation
=
nsIPrintSettings
:
:
kPortraitOrientation
;
int
mNumCopies
=
1
;
int
mDuplex
=
nsIPrintSettings
:
:
kDuplexNone
;
nsMainThreadPtrHandle
<
nsPrintSettings
>
mPrintSettings
;
#
ifdef
XP_WIN
CopyableTArray
<
uint8_t
>
mDevmodeWStorage
;
#
endif
}
;
}
class
nsPrintSettings
:
public
nsIPrintSettings
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPRINTSETTINGS
using
PrintSettingsInitializer
=
mozilla
:
:
PrintSettingsInitializer
;
nsPrintSettings
(
)
;
nsPrintSettings
(
const
nsPrintSettings
&
aPS
)
;
virtual
void
InitWithInitializer
(
const
PrintSettingsInitializer
&
aSettings
)
;
PrintSettingsInitializer
GetSettingsInitializer
(
)
final
;
nsPrintSettings
&
operator
=
(
const
nsPrintSettings
&
rhs
)
;
void
SetDefaultFileName
(
)
;
protected
:
virtual
~
nsPrintSettings
(
)
;
virtual
nsresult
_Clone
(
nsIPrintSettings
*
*
_retval
)
;
virtual
nsresult
_Assign
(
nsIPrintSettings
*
aPS
)
;
typedef
enum
{
eHeader
eFooter
}
nsHeaderFooterEnum
;
nsWeakPtr
mSession
;
nsIntMargin
mMargin
;
nsIntMargin
mEdge
;
nsIntMargin
mUnwriteableMargin
;
nsTArray
<
int32_t
>
mPageRanges
;
double
mScaling
;
bool
mPrintBGColors
;
bool
mPrintBGImages
;
bool
mIsCancelled
;
bool
mSaveOnCancel
;
bool
mPrintSilent
;
bool
mShrinkToFit
;
bool
mShowMarginGuides
;
bool
mHonorPageRuleMargins
;
bool
mIsPrintSelectionRBEnabled
;
bool
mPrintSelectionOnly
;
int32_t
mPrintPageDelay
;
nsString
mTitle
;
nsString
mURL
;
nsString
mHeaderStrs
[
NUM_HEAD_FOOT
]
;
nsString
mFooterStrs
[
NUM_HEAD_FOOT
]
;
nsString
mPaperId
;
double
mPaperWidth
;
double
mPaperHeight
;
int16_t
mPaperSizeUnit
;
bool
mPrintReversed
;
bool
mPrintInColor
;
int32_t
mOrientation
;
int32_t
mResolution
;
int32_t
mDuplex
;
int32_t
mNumCopies
;
int32_t
mNumPagesPerSheet
;
nsString
mPrinter
;
bool
mPrintToFile
;
nsString
mToFileName
;
int16_t
mOutputFormat
;
bool
mIsInitedFromPrinter
;
bool
mIsInitedFromPrefs
;
}
;
#
endif
