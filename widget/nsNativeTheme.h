#
ifndef
_NSNATIVETHEME_H_
#
define
_NSNATIVETHEME_H_
#
include
"
nsAlgorithm
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsMargin
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIContent
.
h
"
class
nsIFrame
;
class
nsPresContext
;
namespace
mozilla
{
class
ComputedStyle
;
enum
class
StyleAppearance
:
uint8_t
;
class
EventStates
;
}
class
nsNativeTheme
:
public
nsITimerCallback
public
nsINamed
{
protected
:
virtual
~
nsNativeTheme
(
)
=
default
;
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
nsNativeTheme
(
)
;
public
:
enum
ScrollbarButtonType
{
eScrollbarButton_UpTop
=
0
eScrollbarButton_Down
=
1
<
<
0
eScrollbarButton_Bottom
=
1
<
<
1
}
;
enum
TreeSortDirection
{
eTreeSortDirection_Descending
eTreeSortDirection_Natural
eTreeSortDirection_Ascending
}
;
static
mozilla
:
:
EventStates
GetContentState
(
nsIFrame
*
aFrame
mozilla
:
:
StyleAppearance
aAppearance
)
;
bool
IsWidgetStyled
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
mozilla
:
:
StyleAppearance
aAppearance
)
;
bool
IsDisabled
(
nsIFrame
*
aFrame
mozilla
:
:
EventStates
aEventStates
)
;
static
bool
IsFrameRTL
(
nsIFrame
*
aFrame
)
;
static
bool
IsHTMLContent
(
nsIFrame
*
aFrame
)
;
bool
IsDefaultButton
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
_default
)
;
}
bool
IsButtonTypeMenu
(
nsIFrame
*
aFrame
)
;
bool
IsChecked
(
nsIFrame
*
aFrame
)
{
return
GetCheckedOrSelected
(
aFrame
false
)
;
}
bool
IsSelected
(
nsIFrame
*
aFrame
)
{
return
GetCheckedOrSelected
(
aFrame
true
)
;
}
static
bool
IsFocused
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
focused
)
;
}
int32_t
GetScrollbarButtonType
(
nsIFrame
*
aFrame
)
;
bool
IsSelectedTab
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
visuallyselected
)
;
}
bool
IsNextToSelectedTab
(
nsIFrame
*
aFrame
int32_t
aOffset
)
;
bool
IsBeforeSelectedTab
(
nsIFrame
*
aFrame
)
{
return
IsNextToSelectedTab
(
aFrame
-
1
)
;
}
bool
IsAfterSelectedTab
(
nsIFrame
*
aFrame
)
{
return
IsNextToSelectedTab
(
aFrame
1
)
;
}
bool
IsLeftToSelectedTab
(
nsIFrame
*
aFrame
)
{
return
IsFrameRTL
(
aFrame
)
?
IsAfterSelectedTab
(
aFrame
)
:
IsBeforeSelectedTab
(
aFrame
)
;
}
bool
IsRightToSelectedTab
(
nsIFrame
*
aFrame
)
{
return
IsFrameRTL
(
aFrame
)
?
IsBeforeSelectedTab
(
aFrame
)
:
IsAfterSelectedTab
(
aFrame
)
;
}
bool
IsCheckedButton
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
checked
)
;
}
bool
IsSelectedButton
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
checked
)
|
|
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
selected
)
;
}
bool
IsOpenButton
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
open
)
;
}
bool
IsPressedButton
(
nsIFrame
*
aFrame
)
;
TreeSortDirection
GetTreeSortDirection
(
nsIFrame
*
aFrame
)
;
bool
IsLastTreeHeaderCell
(
nsIFrame
*
aFrame
)
;
bool
IsBottomTab
(
nsIFrame
*
aFrame
)
;
bool
IsFirstTab
(
nsIFrame
*
aFrame
)
;
bool
IsHorizontal
(
nsIFrame
*
aFrame
)
;
bool
IsIndeterminateProgress
(
nsIFrame
*
aFrame
mozilla
:
:
EventStates
aEventStates
)
;
bool
IsVerticalProgress
(
nsIFrame
*
aFrame
)
;
bool
IsVerticalMeter
(
nsIFrame
*
aFrame
)
;
bool
IsReadOnly
(
nsIFrame
*
aFrame
)
{
return
CheckBooleanAttr
(
aFrame
nsGkAtoms
:
:
readonly
)
;
}
bool
IsSubmenu
(
nsIFrame
*
aFrame
bool
*
aLeftOfParent
)
;
bool
IsRegularMenuItem
(
nsIFrame
*
aFrame
)
;
static
bool
CheckBooleanAttr
(
nsIFrame
*
aFrame
nsAtom
*
aAtom
)
;
static
int32_t
CheckIntAttr
(
nsIFrame
*
aFrame
nsAtom
*
aAtom
int32_t
defaultValue
)
;
static
double
GetProgressValue
(
nsIFrame
*
aFrame
)
;
static
double
GetProgressMaxValue
(
nsIFrame
*
aFrame
)
;
bool
GetCheckedOrSelected
(
nsIFrame
*
aFrame
bool
aCheckSelected
)
;
bool
GetIndeterminate
(
nsIFrame
*
aFrame
)
;
bool
QueueAnimatedContentForRefresh
(
nsIContent
*
aContent
uint32_t
aMinimumFrameRate
)
;
nsIFrame
*
GetAdjacentSiblingFrameWithSameAppearance
(
nsIFrame
*
aFrame
bool
aNextSibling
)
;
bool
IsRangeHorizontal
(
nsIFrame
*
aFrame
)
;
static
bool
IsDarkBackground
(
nsIFrame
*
aFrame
)
;
typedef
nscolor
(
*
AutoColorGetter
)
(
mozilla
:
:
ComputedStyle
*
)
;
static
bool
IsWidgetScrollbarPart
(
mozilla
:
:
StyleAppearance
aAppearance
)
;
private
:
uint32_t
mAnimatedContentTimeout
;
nsCOMPtr
<
nsITimer
>
mAnimatedContentTimer
;
AutoTArray
<
nsCOMPtr
<
nsIContent
>
20
>
mAnimatedContentList
;
}
;
#
endif
