#
ifndef
mozilla_widget_ScrollbarDrawingWin11_h
#
define
mozilla_widget_ScrollbarDrawingWin11_h
#
include
"
nsITheme
.
h
"
#
include
"
nsNativeTheme
.
h
"
#
include
"
ScrollbarDrawing
.
h
"
#
include
"
ScrollbarDrawingWin
.
h
"
namespace
mozilla
:
:
widget
{
class
ScrollbarDrawingWin11
final
:
public
ScrollbarDrawingWin
{
public
:
ScrollbarDrawingWin11
(
)
:
ScrollbarDrawingWin
(
Kind
:
:
Win11
)
{
}
virtual
~
ScrollbarDrawingWin11
(
)
=
default
;
ScrollbarSizes
GetScrollbarSizes
(
nsPresContext
*
StyleScrollbarWidth
Overlay
)
override
;
LayoutDeviceIntSize
GetMinimumWidgetSize
(
nsPresContext
*
StyleAppearance
aAppearance
nsIFrame
*
aFrame
)
override
;
sRGBColor
ComputeScrollbarTrackColor
(
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aDocumentState
const
Colors
&
)
override
;
sRGBColor
ComputeScrollbarThumbColor
(
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
)
override
;
std
:
:
pair
<
sRGBColor
sRGBColor
>
ComputeScrollbarButtonColors
(
nsIFrame
*
StyleAppearance
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
)
override
;
bool
PaintScrollbarButton
(
DrawTarget
&
StyleAppearance
const
LayoutDeviceRect
&
ScrollbarKind
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
override
;
template
<
typename
PaintBackendData
>
bool
DoPaintScrollbarThumb
(
PaintBackendData
&
const
LayoutDeviceRect
&
ScrollbarKind
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
;
bool
PaintScrollbarThumb
(
DrawTarget
&
const
LayoutDeviceRect
&
ScrollbarKind
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
override
;
bool
PaintScrollbarThumb
(
WebRenderBackendData
&
const
LayoutDeviceRect
&
ScrollbarKind
nsIFrame
*
const
ComputedStyle
&
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
const
DPIRatio
&
)
override
;
}
;
}
#
endif
