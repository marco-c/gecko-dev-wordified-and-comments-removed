#
ifndef
NATIVEWINDOW_FAKE_SURFACE_COMPOSER_H
#
define
NATIVEWINDOW_FAKE_SURFACE_COMPOSER_H
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
utils
/
Errors
.
h
>
#
include
<
utils
/
Looper
.
h
>
#
include
<
binder
/
BinderService
.
h
>
#
include
<
gui
/
IGraphicBufferProducer
.
h
>
#
include
<
gui
/
ISurfaceComposer
.
h
>
#
include
<
gui
/
ISurfaceComposerClient
.
h
>
#
include
<
hardware
/
hwcomposer
.
h
>
#
include
<
private
/
gui
/
LayerState
.
h
>
#
include
<
utils
/
KeyedVector
.
h
>
class
nsIWidget
;
namespace
android
{
class
GraphicProducerWrapper
;
class
IGraphicBufferAlloc
;
enum
{
eTransactionNeeded
=
0x01
eTraversalNeeded
=
0x02
eDisplayTransactionNeeded
=
0x04
eTransactionMask
=
0x07
}
;
class
FakeSurfaceComposer
:
public
BinderService
<
FakeSurfaceComposer
>
public
BnSurfaceComposer
{
public
:
static
char
const
*
getServiceName
(
)
{
return
"
FakeSurfaceComposer
"
;
}
static
void
instantiate
(
)
;
#
if
ANDROID_VERSION
>
=
19
virtual
void
destroyDisplay
(
const
sp
<
android
:
:
IBinder
>
&
display
)
;
#
endif
#
if
ANDROID_VERSION
>
=
21
virtual
status_t
captureScreen
(
const
sp
<
IBinder
>
&
display
const
sp
<
IGraphicBufferProducer
>
&
producer
Rect
sourceCrop
uint32_t
reqWidth
uint32_t
reqHeight
uint32_t
minLayerZ
uint32_t
maxLayerZ
bool
useIdentityTransform
Rotation
rotation
=
eRotateNone
)
;
#
elif
ANDROID_VERSION
>
=
19
virtual
status_t
captureScreen
(
const
sp
<
IBinder
>
&
display
const
sp
<
IGraphicBufferProducer
>
&
producer
uint32_t
reqWidth
uint32_t
reqHeight
uint32_t
minLayerZ
uint32_t
maxLayerZ
)
;
#
else
virtual
status_t
captureScreen
(
const
sp
<
IBinder
>
&
display
const
sp
<
IGraphicBufferProducer
>
&
producer
uint32_t
reqWidth
uint32_t
reqHeight
uint32_t
minLayerZ
uint32_t
maxLayerZ
bool
isCpuConsumer
)
;
#
endif
private
:
FakeSurfaceComposer
(
)
;
virtual
~
FakeSurfaceComposer
(
)
;
virtual
status_t
onTransact
(
uint32_t
code
const
Parcel
&
data
Parcel
*
reply
uint32_t
flags
)
;
virtual
sp
<
ISurfaceComposerClient
>
createConnection
(
)
;
virtual
sp
<
IGraphicBufferAlloc
>
createGraphicBufferAlloc
(
)
;
virtual
sp
<
IBinder
>
createDisplay
(
const
String8
&
displayName
bool
secure
)
;
virtual
sp
<
IBinder
>
getBuiltInDisplay
(
int32_t
id
)
;
virtual
void
setTransactionState
(
const
Vector
<
ComposerState
>
&
state
const
Vector
<
DisplayState
>
&
displays
uint32_t
flags
)
;
virtual
void
bootFinished
(
)
;
virtual
bool
authenticateSurfaceTexture
(
const
sp
<
IGraphicBufferProducer
>
&
bufferProducer
)
const
;
virtual
sp
<
IDisplayEventConnection
>
createDisplayEventConnection
(
)
;
#
if
ANDROID_VERSION
>
=
21
virtual
void
setPowerMode
(
const
sp
<
IBinder
>
&
display
int
mode
)
;
virtual
status_t
getDisplayConfigs
(
const
sp
<
IBinder
>
&
display
Vector
<
DisplayInfo
>
*
configs
)
;
virtual
status_t
getDisplayStats
(
const
sp
<
IBinder
>
&
display
DisplayStatInfo
*
stats
)
;
virtual
int
getActiveConfig
(
const
sp
<
IBinder
>
&
display
)
;
virtual
status_t
setActiveConfig
(
const
sp
<
IBinder
>
&
display
int
id
)
;
virtual
status_t
clearAnimationFrameStats
(
)
;
virtual
status_t
getAnimationFrameStats
(
FrameStats
*
outStats
)
const
;
#
elif
ANDROID_VERSION
>
=
17
virtual
void
blank
(
const
sp
<
IBinder
>
&
display
)
;
virtual
void
unblank
(
const
sp
<
IBinder
>
&
display
)
;
virtual
status_t
getDisplayInfo
(
const
sp
<
IBinder
>
&
display
DisplayInfo
*
info
)
;
#
endif
void
getPrimaryDisplayInfo
(
DisplayInfo
*
info
)
;
uint32_t
setDisplayStateLocked
(
const
DisplayState
&
s
)
;
void
captureScreenImp
(
const
sp
<
IGraphicBufferProducer
>
&
producer
uint32_t
reqWidth
uint32_t
reqHeight
const
sp
<
GraphicProducerWrapper
>
&
wrapper
)
;
sp
<
IBinder
>
mPrimaryDisplay
;
struct
DisplayDeviceState
{
enum
{
NO_LAYER_STACK
=
0xFFFFFFFF
}
;
DisplayDeviceState
(
)
:
type
(
-
1
)
displayId
(
-
1
)
width
(
0
)
height
(
0
)
{
}
DisplayDeviceState
(
int
type
)
:
type
(
type
)
displayId
(
-
1
)
layerStack
(
NO_LAYER_STACK
)
orientation
(
0
)
width
(
0
)
height
(
0
)
{
viewport
.
makeInvalid
(
)
;
frame
.
makeInvalid
(
)
;
}
bool
isValid
(
)
const
{
return
type
>
=
0
;
}
int
type
;
int
displayId
;
sp
<
IGraphicBufferProducer
>
surface
;
uint32_t
layerStack
;
Rect
viewport
;
Rect
frame
;
uint8_t
orientation
;
uint32_t
width
height
;
String8
displayName
;
bool
isSecure
;
}
;
mutable
Mutex
mStateLock
;
DefaultKeyedVector
<
wp
<
IBinder
>
DisplayDeviceState
>
mDisplays
;
friend
class
DestroyDisplayRunnable
;
}
;
}
;
#
endif
