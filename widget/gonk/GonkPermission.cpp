#
include
"
GonkPermission
.
h
"
#
include
<
binder
/
IPCThreadState
.
h
>
#
include
<
binder
/
ProcessState
.
h
>
#
include
<
binder
/
IServiceManager
.
h
>
#
include
<
binder
/
IPermissionController
.
h
>
#
ifndef
HAVE_ANDROID_OS
#
define
HAVE_ANDROID_OS
1
#
endif
#
include
<
private
/
android_filesystem_config
.
h
>
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
undef
LOG
#
include
<
android
/
log
.
h
>
#
undef
ALOGE
#
define
ALOGE
(
args
.
.
.
)
__android_log_print
(
ANDROID_LOG_ERROR
"
gonkperm
"
#
#
args
)
using
namespace
android
;
using
namespace
mozilla
;
bool
GonkPermissionService
:
:
checkPermission
(
const
String16
&
permission
int32_t
pid
int32_t
uid
)
{
if
(
0
=
=
uid
)
{
return
true
;
}
String8
perm8
(
permission
)
;
if
(
(
uid
=
=
AID_SYSTEM
|
|
uid
=
=
AID_RADIO
|
|
uid
=
=
AID_BLUETOOTH
)
&
&
perm8
=
=
"
android
.
permission
.
MODIFY_AUDIO_SETTINGS
"
)
{
return
true
;
}
if
(
uid
<
AID_APP
)
{
ALOGE
(
"
%
s
for
pid
=
%
d
uid
=
%
d
denied
:
not
an
app
"
String8
(
permission
)
.
string
(
)
pid
uid
)
;
return
false
;
}
if
(
perm8
!
=
"
android
.
permission
.
CAMERA
"
&
&
perm8
!
=
"
android
.
permission
.
RECORD_AUDIO
"
)
{
ALOGE
(
"
%
s
for
pid
=
%
d
uid
=
%
d
denied
:
unsupported
permission
"
String8
(
permission
)
.
string
(
)
pid
uid
)
;
return
false
;
}
PermissionGrant
permGrant
(
perm8
.
string
(
)
pid
)
;
if
(
nsTArray
<
PermissionGrant
>
:
:
NoIndex
!
=
mGrantArray
.
IndexOf
(
permGrant
)
)
{
mGrantArray
.
RemoveElement
(
permGrant
)
;
}
return
true
;
}
static
GonkPermissionService
*
gGonkPermissionService
=
NULL
;
void
GonkPermissionService
:
:
instantiate
(
)
{
defaultServiceManager
(
)
-
>
addService
(
String16
(
getServiceName
(
)
)
GetInstance
(
)
)
;
}
GonkPermissionService
*
GonkPermissionService
:
:
GetInstance
(
)
{
if
(
!
gGonkPermissionService
)
{
gGonkPermissionService
=
new
GonkPermissionService
(
)
;
}
return
gGonkPermissionService
;
}
void
GonkPermissionService
:
:
addGrantInfo
(
const
char
*
permission
int32_t
pid
)
{
mGrantArray
.
AppendElement
(
PermissionGrant
(
permission
pid
)
)
;
}
