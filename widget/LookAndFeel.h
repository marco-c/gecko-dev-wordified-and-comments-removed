#
ifndef
__LookAndFeel
#
define
__LookAndFeel
#
ifndef
MOZILLA_INTERNAL_API
#
error
"
This
header
is
only
usable
from
within
libxul
(
MOZILLA_INTERNAL_API
)
.
"
#
endif
#
include
"
nsDebug
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
widget
/
ThemeChangeKind
.
h
"
struct
gfxFontStyle
;
namespace
mozilla
{
namespace
widget
{
class
LookAndFeelCache
;
}
enum
class
StyleSystemColor
:
uint8_t
;
class
LookAndFeel
{
public
:
using
ColorID
=
StyleSystemColor
;
enum
class
IntID
{
CaretBlinkTime
CaretWidth
ShowCaretDuringSelection
SelectTextfieldsOnKeyFocus
SubmenuDelay
MenusCanOverlapOSBar
UseOverlayScrollbars
AllowOverlayScrollbarsOverlap
ShowHideScrollbars
SkipNavigatingDisabledMenuItem
DragThresholdX
DragThresholdY
UseAccessibilityTheme
ScrollArrowStyle
ScrollSliderStyle
ScrollButtonLeftMouseButtonAction
ScrollButtonMiddleMouseButtonAction
ScrollButtonRightMouseButtonAction
TreeOpenDelay
TreeCloseDelay
TreeLazyScrollDelay
TreeScrollDelay
TreeScrollLinesMax
TabFocusModel
ChosenMenuItemsShouldBlink
WindowsAccentColorInTitlebar
WindowsDefaultTheme
DWMCompositor
WindowsClassic
WindowsGlass
TouchEnabled
MacGraphiteTheme
MacBigSurTheme
AlertNotificationOrigin
ScrollToClick
IMERawInputUnderlineStyle
IMESelectedRawTextUnderlineStyle
IMEConvertedTextUnderlineStyle
IMESelectedConvertedTextUnderline
SpellCheckerUnderlineStyle
MenuBarDrag
WindowsThemeIdentifier
OperatingSystemVersionIdentifier
ScrollbarButtonAutoRepeatBehavior
TooltipDelay
SwipeAnimationEnabled
ScrollbarDisplayOnMouseMove
ScrollbarFadeBeginDelay
ScrollbarFadeDuration
ContextMenuOffsetVertical
ContextMenuOffsetHorizontal
GTKCSDAvailable
GTKCSDHideTitlebarByDefault
GTKCSDTransparentBackground
GTKCSDMinimizeButton
GTKCSDMaximizeButton
GTKCSDCloseButton
GTKCSDReversedPlacement
SystemUsesDarkTheme
PrefersReducedMotion
PrimaryPointerCapabilities
AllPointerCapabilities
GTKCSDCloseButtonPosition
GTKCSDMinimizeButtonPosition
GTKCSDMaximizeButtonPosition
End
}
;
enum
WindowsTheme
{
eWindowsTheme_Generic
=
0
eWindowsTheme_Classic
eWindowsTheme_Aero
eWindowsTheme_LunaBlue
eWindowsTheme_LunaOlive
eWindowsTheme_LunaSilver
eWindowsTheme_Royale
eWindowsTheme_Zune
eWindowsTheme_AeroLite
}
;
enum
class
OperatingSystemVersion
{
Windows7
=
2
Windows8
Windows10
Unknown
}
;
enum
{
eScrollArrow_None
=
0
eScrollArrow_StartBackward
=
0x1000
eScrollArrow_StartForward
=
0x0100
eScrollArrow_EndBackward
=
0x0010
eScrollArrow_EndForward
=
0x0001
}
;
enum
{
eScrollArrowStyle_Single
=
eScrollArrow_StartBackward
|
eScrollArrow_EndForward
eScrollArrowStyle_BothAtBottom
=
eScrollArrow_EndBackward
|
eScrollArrow_EndForward
eScrollArrowStyle_BothAtEachEnd
=
eScrollArrow_EndBackward
|
eScrollArrow_EndForward
|
eScrollArrow_StartBackward
|
eScrollArrow_StartForward
eScrollArrowStyle_BothAtTop
=
eScrollArrow_StartBackward
|
eScrollArrow_StartForward
}
;
enum
{
eScrollThumbStyle_Normal
eScrollThumbStyle_Proportional
}
;
enum
class
FloatID
{
IMEUnderlineRelativeSize
SpellCheckerUnderlineRelativeSize
CaretAspectRatio
}
;
enum
class
FontID
{
Caption
=
1
MINIMUM
=
Caption
Icon
Menu
MessageBox
SmallCaption
StatusBar
Window
Document
Workspace
Desktop
Info
Dialog
Button
PullDownMenu
List
Field
Tooltips
Widget
MAXIMUM
=
Widget
}
;
static
nsresult
GetColor
(
ColorID
aID
nscolor
*
aResult
)
;
static
nsresult
GetColor
(
ColorID
aID
bool
aUseStandinsForNativeColors
nscolor
*
aResult
)
;
static
nsresult
GetInt
(
IntID
aID
int32_t
*
aResult
)
;
static
nsresult
GetFloat
(
FloatID
aID
float
*
aResult
)
;
static
nscolor
GetColor
(
ColorID
aID
nscolor
aDefault
=
NS_RGB
(
0
0
0
)
)
{
nscolor
result
=
NS_RGB
(
0
0
0
)
;
if
(
NS_FAILED
(
GetColor
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
nscolor
GetColorUsingStandins
(
ColorID
aID
nscolor
aDefault
=
NS_RGB
(
0
0
0
)
)
{
nscolor
result
=
NS_RGB
(
0
0
0
)
;
if
(
NS_FAILED
(
GetColor
(
aID
true
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
int32_t
GetInt
(
IntID
aID
int32_t
aDefault
=
0
)
{
int32_t
result
;
if
(
NS_FAILED
(
GetInt
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
float
GetFloat
(
FloatID
aID
float
aDefault
=
0
.
0f
)
{
float
result
;
if
(
NS_FAILED
(
GetFloat
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
bool
GetFont
(
FontID
aID
nsString
&
aName
gfxFontStyle
&
aStyle
)
;
static
char16_t
GetPasswordCharacter
(
)
;
static
bool
GetEchoPassword
(
)
;
static
uint32_t
GetPasswordMaskDelay
(
)
;
static
void
Refresh
(
)
;
static
void
NativeInit
(
)
;
static
widget
:
:
LookAndFeelCache
GetCache
(
)
;
static
void
SetCache
(
const
widget
:
:
LookAndFeelCache
&
aCache
)
;
static
void
NotifyChangedAllWindows
(
widget
:
:
ThemeChangeKind
)
;
}
;
}
#
define
NS_DONT_CHANGE_COLOR
NS_RGB
(
0x01
0x01
0x01
)
#
define
NS_CHANGE_COLOR_IF_SAME_AS_BG
NS_RGB
(
0x02
0x02
0x02
)
#
define
NS_TRANSPARENT
NS_RGBA
(
0x01
0x00
0x00
0x00
)
#
define
NS_SAME_AS_FOREGROUND_COLOR
NS_RGBA
(
0x02
0x00
0x00
0x00
)
#
define
NS_40PERCENT_FOREGROUND_COLOR
NS_RGBA
(
0x03
0x00
0x00
0x00
)
#
define
NS_IS_SELECTION_SPECIAL_COLOR
(
c
)
\
(
(
c
)
=
=
NS_TRANSPARENT
|
|
(
c
)
=
=
NS_SAME_AS_FOREGROUND_COLOR
|
|
\
(
c
)
=
=
NS_40PERCENT_FOREGROUND_COLOR
)
#
define
NS_ALERT_HORIZONTAL
1
#
define
NS_ALERT_LEFT
2
#
define
NS_ALERT_TOP
4
#
endif
