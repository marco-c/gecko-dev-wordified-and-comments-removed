#
ifndef
__LookAndFeel
#
define
__LookAndFeel
#
ifndef
MOZILLA_INTERNAL_API
#
error
"
This
header
is
only
usable
from
within
libxul
(
MOZILLA_INTERNAL_API
)
.
"
#
endif
#
include
"
nsDebug
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsTArray
.
h
"
struct
gfxFontStyle
;
struct
LookAndFeelInt
{
int32_t
id
;
int32_t
value
;
}
;
namespace
mozilla
{
enum
class
StyleSystemColor
:
uint8_t
;
class
LookAndFeel
{
public
:
using
ColorID
=
StyleSystemColor
;
enum
IntID
{
eIntID_CaretBlinkTime
eIntID_CaretWidth
eIntID_ShowCaretDuringSelection
eIntID_SelectTextfieldsOnKeyFocus
eIntID_SubmenuDelay
eIntID_MenusCanOverlapOSBar
eIntID_UseOverlayScrollbars
eIntID_AllowOverlayScrollbarsOverlap
eIntID_ShowHideScrollbars
eIntID_SkipNavigatingDisabledMenuItem
eIntID_DragThresholdX
eIntID_DragThresholdY
eIntID_UseAccessibilityTheme
eIntID_ScrollArrowStyle
eIntID_ScrollSliderStyle
eIntID_ScrollButtonLeftMouseButtonAction
eIntID_ScrollButtonMiddleMouseButtonAction
eIntID_ScrollButtonRightMouseButtonAction
eIntID_TreeOpenDelay
eIntID_TreeCloseDelay
eIntID_TreeLazyScrollDelay
eIntID_TreeScrollDelay
eIntID_TreeScrollLinesMax
eIntID_TabFocusModel
eIntID_ChosenMenuItemsShouldBlink
eIntID_WindowsAccentColorInTitlebar
eIntID_WindowsDefaultTheme
eIntID_DWMCompositor
eIntID_WindowsClassic
eIntID_WindowsGlass
eIntID_TouchEnabled
eIntID_MacGraphiteTheme
eIntID_MacYosemiteTheme
eIntID_AlertNotificationOrigin
eIntID_ScrollToClick
eIntID_IMERawInputUnderlineStyle
eIntID_IMESelectedRawTextUnderlineStyle
eIntID_IMEConvertedTextUnderlineStyle
eIntID_IMESelectedConvertedTextUnderline
eIntID_SpellCheckerUnderlineStyle
eIntID_MenuBarDrag
eIntID_WindowsThemeIdentifier
eIntID_OperatingSystemVersionIdentifier
eIntID_ScrollbarButtonAutoRepeatBehavior
eIntID_TooltipDelay
eIntID_SwipeAnimationEnabled
eIntID_ScrollbarDisplayOnMouseMove
eIntID_ScrollbarFadeBeginDelay
eIntID_ScrollbarFadeDuration
eIntID_ContextMenuOffsetVertical
eIntID_ContextMenuOffsetHorizontal
eIntID_GTKCSDAvailable
eIntID_GTKCSDHideTitlebarByDefault
eIntID_GTKCSDTransparentBackground
eIntID_GTKCSDMinimizeButton
eIntID_GTKCSDMaximizeButton
eIntID_GTKCSDCloseButton
eIntID_GTKCSDReversedPlacement
eIntID_SystemUsesDarkTheme
eIntID_PrefersReducedMotion
eIntID_PrimaryPointerCapabilities
eIntID_AllPointerCapabilities
}
;
enum
WindowsTheme
{
eWindowsTheme_Generic
=
0
eWindowsTheme_Classic
eWindowsTheme_Aero
eWindowsTheme_LunaBlue
eWindowsTheme_LunaOlive
eWindowsTheme_LunaSilver
eWindowsTheme_Royale
eWindowsTheme_Zune
eWindowsTheme_AeroLite
}
;
enum
OperatingSystemVersion
{
eOperatingSystemVersion_Windows7
=
2
eOperatingSystemVersion_Windows8
eOperatingSystemVersion_Windows10
eOperatingSystemVersion_Unknown
}
;
enum
{
eScrollArrow_None
=
0
eScrollArrow_StartBackward
=
0x1000
eScrollArrow_StartForward
=
0x0100
eScrollArrow_EndBackward
=
0x0010
eScrollArrow_EndForward
=
0x0001
}
;
enum
{
eScrollArrowStyle_Single
=
eScrollArrow_StartBackward
|
eScrollArrow_EndForward
eScrollArrowStyle_BothAtBottom
=
eScrollArrow_EndBackward
|
eScrollArrow_EndForward
eScrollArrowStyle_BothAtEachEnd
=
eScrollArrow_EndBackward
|
eScrollArrow_EndForward
|
eScrollArrow_StartBackward
|
eScrollArrow_StartForward
eScrollArrowStyle_BothAtTop
=
eScrollArrow_StartBackward
|
eScrollArrow_StartForward
}
;
enum
{
eScrollThumbStyle_Normal
eScrollThumbStyle_Proportional
}
;
enum
FloatID
{
eFloatID_IMEUnderlineRelativeSize
eFloatID_SpellCheckerUnderlineRelativeSize
eFloatID_CaretAspectRatio
}
;
enum
FontID
{
eFont_Caption
=
1
FontID_MINIMUM
=
eFont_Caption
eFont_Icon
eFont_Menu
eFont_MessageBox
eFont_SmallCaption
eFont_StatusBar
eFont_Window
eFont_Document
eFont_Workspace
eFont_Desktop
eFont_Info
eFont_Dialog
eFont_Button
eFont_PullDownMenu
eFont_List
eFont_Field
eFont_Tooltips
eFont_Widget
FontID_MAXIMUM
=
eFont_Widget
}
;
static
nsresult
GetColor
(
ColorID
aID
nscolor
*
aResult
)
;
static
nsresult
GetColor
(
ColorID
aID
bool
aUseStandinsForNativeColors
nscolor
*
aResult
)
;
static
nsresult
GetInt
(
IntID
aID
int32_t
*
aResult
)
;
static
nsresult
GetFloat
(
FloatID
aID
float
*
aResult
)
;
static
nscolor
GetColor
(
ColorID
aID
nscolor
aDefault
=
NS_RGB
(
0
0
0
)
)
{
nscolor
result
=
NS_RGB
(
0
0
0
)
;
if
(
NS_FAILED
(
GetColor
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
nscolor
GetColorUsingStandins
(
ColorID
aID
nscolor
aDefault
=
NS_RGB
(
0
0
0
)
)
{
nscolor
result
=
NS_RGB
(
0
0
0
)
;
if
(
NS_FAILED
(
GetColor
(
aID
true
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
int32_t
GetInt
(
IntID
aID
int32_t
aDefault
=
0
)
{
int32_t
result
;
if
(
NS_FAILED
(
GetInt
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
float
GetFloat
(
FloatID
aID
float
aDefault
=
0
.
0f
)
{
float
result
;
if
(
NS_FAILED
(
GetFloat
(
aID
&
result
)
)
)
{
return
aDefault
;
}
return
result
;
}
static
bool
GetFont
(
FontID
aID
nsString
&
aName
gfxFontStyle
&
aStyle
)
;
static
char16_t
GetPasswordCharacter
(
)
;
static
bool
GetEchoPassword
(
)
;
static
uint32_t
GetPasswordMaskDelay
(
)
;
static
void
Refresh
(
)
;
static
void
NativeInit
(
)
;
static
nsTArray
<
LookAndFeelInt
>
GetIntCache
(
)
;
static
void
SetIntCache
(
const
nsTArray
<
LookAndFeelInt
>
&
aLookAndFeelIntCache
)
;
static
void
NotifyChangedAllWindows
(
)
;
}
;
}
#
define
NS_DONT_CHANGE_COLOR
NS_RGB
(
0x01
0x01
0x01
)
#
define
NS_CHANGE_COLOR_IF_SAME_AS_BG
NS_RGB
(
0x02
0x02
0x02
)
#
define
NS_TRANSPARENT
NS_RGBA
(
0x01
0x00
0x00
0x00
)
#
define
NS_SAME_AS_FOREGROUND_COLOR
NS_RGBA
(
0x02
0x00
0x00
0x00
)
#
define
NS_40PERCENT_FOREGROUND_COLOR
NS_RGBA
(
0x03
0x00
0x00
0x00
)
#
define
NS_IS_SELECTION_SPECIAL_COLOR
(
c
)
\
(
(
c
)
=
=
NS_TRANSPARENT
|
|
(
c
)
=
=
NS_SAME_AS_FOREGROUND_COLOR
|
|
\
(
c
)
=
=
NS_40PERCENT_FOREGROUND_COLOR
)
#
define
NS_ALERT_HORIZONTAL
1
#
define
NS_ALERT_LEFT
2
#
define
NS_ALERT_TOP
4
#
endif
