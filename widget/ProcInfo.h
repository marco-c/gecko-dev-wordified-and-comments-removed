#
ifndef
__mozilla_ProcInfo_h
#
define
__mozilla_ProcInfo_h
#
include
<
base
/
process
.
h
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
;
}
enum
class
ProcType
{
Web
WebIsolated
File
Extension
PrivilegedAbout
PrivilegedMozilla
WebLargeAllocation
WebCOOPCOEP
Browser
Plugin
IPDLUnitTest
GMPlugin
GPU
VR
RDD
Socket
RemoteSandboxBroker
#
ifdef
MOZ_ENABLE_FORKSERVER
ForkServer
#
endif
Preallocated
Unknown
Max
=
Unknown
}
;
struct
ThreadInfo
{
base
:
:
ProcessId
tid
=
0
;
nsString
name
;
uint64_t
cpuUser
=
0
;
uint64_t
cpuKernel
=
0
;
}
;
struct
ProcInfo
{
base
:
:
ProcessId
pid
=
0
;
dom
:
:
ContentParentId
childId
;
ProcType
type
;
nsCString
origin
;
nsString
filename
;
uint64_t
virtualMemorySize
=
0
;
int64_t
residentSetSize
=
0
;
uint64_t
cpuUser
=
0
;
uint64_t
cpuKernel
=
0
;
CopyableTArray
<
ThreadInfo
>
threads
;
}
;
typedef
MozPromise
<
mozilla
:
:
HashMap
<
base
:
:
ProcessId
ProcInfo
>
nsresult
true
>
ProcInfoPromise
;
struct
ProcInfoRequest
{
ProcInfoRequest
(
base
:
:
ProcessId
aPid
ProcType
aProcessType
const
nsACString
&
aOrigin
uint32_t
aChildId
=
0
#
ifdef
XP_MACOSX
mach_port_t
aChildTask
=
0
#
endif
)
:
pid
(
aPid
)
processType
(
aProcessType
)
origin
(
aOrigin
)
childId
(
aChildId
)
#
ifdef
XP_MACOSX
childTask
(
aChildTask
)
#
endif
{
}
const
base
:
:
ProcessId
pid
;
const
ProcType
processType
;
const
nsCString
origin
;
const
int32_t
childId
;
#
ifdef
XP_MACOSX
const
mach_port_t
childTask
;
#
endif
}
;
RefPtr
<
ProcInfoPromise
>
GetProcInfo
(
nsTArray
<
ProcInfoRequest
>
&
&
aRequests
)
;
template
<
typename
T
>
nsresult
CopySysProcInfoToDOM
(
const
ProcInfo
&
source
T
*
dest
)
{
dest
-
>
mPid
=
source
.
pid
;
dest
-
>
mFilename
.
Assign
(
source
.
filename
)
;
dest
-
>
mVirtualMemorySize
=
source
.
virtualMemorySize
;
dest
-
>
mResidentSetSize
=
source
.
residentSetSize
;
dest
-
>
mCpuUser
=
source
.
cpuUser
;
dest
-
>
mCpuKernel
=
source
.
cpuKernel
;
mozilla
:
:
dom
:
:
Sequence
<
mozilla
:
:
dom
:
:
ThreadInfoDictionary
>
threads
;
for
(
const
ThreadInfo
&
entry
:
source
.
threads
)
{
mozilla
:
:
dom
:
:
ThreadInfoDictionary
*
thread
=
threads
.
AppendElement
(
fallible
)
;
if
(
NS_WARN_IF
(
!
thread
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
thread
-
>
mCpuUser
=
entry
.
cpuUser
;
thread
-
>
mCpuKernel
=
entry
.
cpuKernel
;
thread
-
>
mTid
=
entry
.
tid
;
thread
-
>
mName
.
Assign
(
entry
.
name
)
;
}
dest
-
>
mThreads
=
std
:
:
move
(
threads
)
;
return
NS_OK
;
}
}
#
endif
