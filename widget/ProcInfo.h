#
ifndef
__mozilla_ProcInfo_h
#
define
__mozilla_ProcInfo_h
#
include
<
base
/
process
.
h
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
GeckoChildProcessHost
;
}
enum
class
ProcType
{
Web
WebIsolated
File
Extension
PrivilegedAbout
PrivilegedMozilla
WebLargeAllocation
WebCOOPCOEP
Browser
Plugin
IPDLUnitTest
GMPlugin
GPU
VR
RDD
Socket
RemoteSandboxBroker
#
ifdef
MOZ_ENABLE_FORKSERVER
ForkServer
#
endif
Preallocated
Unknown
Max
=
Unknown
}
;
struct
ThreadInfo
{
base
:
:
ProcessId
tid
=
0
;
nsString
name
;
uint64_t
cpuUser
=
0
;
uint64_t
cpuKernel
=
0
;
}
;
struct
ProcInfo
{
base
:
:
ProcessId
pid
=
0
;
dom
:
:
ContentParentId
childId
;
ProcType
type
;
nsString
origin
;
nsString
filename
;
uint64_t
virtualMemorySize
=
0
;
int64_t
residentSetSize
=
0
;
uint64_t
cpuUser
=
0
;
uint64_t
cpuKernel
=
0
;
CopyableTArray
<
ThreadInfo
>
threads
;
}
;
typedef
MozPromise
<
ProcInfo
nsresult
true
>
ProcInfoPromise
;
#
ifdef
XP_MACOSX
RefPtr
<
ProcInfoPromise
>
GetProcInfo
(
base
:
:
ProcessId
pid
int32_t
childId
const
ProcType
&
processType
const
nsAString
&
origin
mach_port_t
aChildTask
=
MACH_PORT_NULL
)
;
#
else
RefPtr
<
ProcInfoPromise
>
GetProcInfo
(
base
:
:
ProcessId
pid
int32_t
childId
const
ProcType
&
processType
const
nsAString
&
origin
)
;
#
endif
}
#
endif
