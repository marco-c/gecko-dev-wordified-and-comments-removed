#
ifndef
mozilla_BasicEvents_h__
#
define
mozilla_BasicEvents_h__
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsString
.
h
"
#
include
"
Units
.
h
"
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
;
}
namespace
mozilla
{
struct
BaseEventFlags
{
public
:
bool
mIsTrusted
:
1
;
bool
mInBubblingPhase
:
1
;
bool
mInCapturePhase
:
1
;
bool
mInSystemGroup
:
1
;
bool
mCancelable
:
1
;
bool
mBubbles
:
1
;
bool
mPropagationStopped
:
1
;
bool
mImmediatePropagationStopped
:
1
;
bool
mDefaultPrevented
:
1
;
bool
mDefaultPreventedByContent
:
1
;
bool
mDefaultPreventedByChrome
:
1
;
bool
mMultipleActionsPrevented
:
1
;
bool
mIsBeingDispatched
:
1
;
bool
mDispatchedAtLeastOnce
:
1
;
bool
mIsSynthesizedForTests
:
1
;
bool
mExceptionHasBeenRisen
:
1
;
bool
mRetargetToNonNativeAnonymous
:
1
;
bool
mNoCrossProcessBoundaryForwarding
:
1
;
bool
mNoContentDispatch
:
1
;
bool
mOnlyChromeDispatch
:
1
;
bool
mWantReplyFromContentProcess
:
1
;
bool
mHandledByAPZ
:
1
;
inline
bool
InTargetPhase
(
)
const
{
return
(
mInBubblingPhase
&
&
mInCapturePhase
)
;
}
inline
void
Clear
(
)
{
SetRawFlags
(
0
)
;
}
inline
void
Union
(
const
BaseEventFlags
&
aOther
)
{
RawFlags
rawFlags
=
GetRawFlags
(
)
|
aOther
.
GetRawFlags
(
)
;
SetRawFlags
(
rawFlags
)
;
}
private
:
typedef
uint32_t
RawFlags
;
inline
void
SetRawFlags
(
RawFlags
aRawFlags
)
{
static_assert
(
sizeof
(
BaseEventFlags
)
<
=
sizeof
(
RawFlags
)
"
mozilla
:
:
EventFlags
must
not
be
bigger
than
the
RawFlags
"
)
;
memcpy
(
this
&
aRawFlags
sizeof
(
BaseEventFlags
)
)
;
}
inline
RawFlags
GetRawFlags
(
)
const
{
RawFlags
result
=
0
;
memcpy
(
&
result
this
sizeof
(
BaseEventFlags
)
)
;
return
result
;
}
}
;
struct
EventFlags
:
public
BaseEventFlags
{
EventFlags
(
)
{
Clear
(
)
;
}
}
;
class
WidgetEvent
{
protected
:
WidgetEvent
(
bool
aIsTrusted
EventMessage
aMessage
EventClassID
aEventClassID
)
:
mClass
(
aEventClassID
)
mMessage
(
aMessage
)
refPoint
(
0
0
)
lastRefPoint
(
0
0
)
time
(
0
)
timeStamp
(
TimeStamp
:
:
Now
(
)
)
userType
(
nullptr
)
{
MOZ_COUNT_CTOR
(
WidgetEvent
)
;
mFlags
.
Clear
(
)
;
mFlags
.
mIsTrusted
=
aIsTrusted
;
mFlags
.
mCancelable
=
true
;
mFlags
.
mBubbles
=
true
;
}
WidgetEvent
(
)
{
MOZ_COUNT_CTOR
(
WidgetEvent
)
;
}
public
:
WidgetEvent
(
bool
aIsTrusted
EventMessage
aMessage
)
:
mClass
(
eBasicEventClass
)
mMessage
(
aMessage
)
refPoint
(
0
0
)
lastRefPoint
(
0
0
)
time
(
0
)
timeStamp
(
TimeStamp
:
:
Now
(
)
)
userType
(
nullptr
)
{
MOZ_COUNT_CTOR
(
WidgetEvent
)
;
mFlags
.
Clear
(
)
;
mFlags
.
mIsTrusted
=
aIsTrusted
;
mFlags
.
mCancelable
=
true
;
mFlags
.
mBubbles
=
true
;
}
virtual
~
WidgetEvent
(
)
{
MOZ_COUNT_DTOR
(
WidgetEvent
)
;
}
WidgetEvent
(
const
WidgetEvent
&
aOther
)
{
MOZ_COUNT_CTOR
(
WidgetEvent
)
;
*
this
=
aOther
;
}
virtual
WidgetEvent
*
Duplicate
(
)
const
{
MOZ_ASSERT
(
mClass
=
=
eBasicEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetEvent
*
result
=
new
WidgetEvent
(
false
mMessage
)
;
result
-
>
AssignEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
EventClassID
mClass
;
EventMessage
mMessage
;
LayoutDeviceIntPoint
refPoint
;
LayoutDeviceIntPoint
lastRefPoint
;
uint64_t
time
;
mozilla
:
:
TimeStamp
timeStamp
;
BaseEventFlags
mFlags
;
nsCOMPtr
<
nsIAtom
>
userType
;
nsString
typeString
;
nsCOMPtr
<
dom
:
:
EventTarget
>
target
;
nsCOMPtr
<
dom
:
:
EventTarget
>
currentTarget
;
nsCOMPtr
<
dom
:
:
EventTarget
>
originalTarget
;
void
AssignEventData
(
const
WidgetEvent
&
aEvent
bool
aCopyTargets
)
{
refPoint
=
aEvent
.
refPoint
;
time
=
aEvent
.
time
;
timeStamp
=
aEvent
.
timeStamp
;
userType
=
aEvent
.
userType
;
target
=
aCopyTargets
?
aEvent
.
target
:
nullptr
;
currentTarget
=
aCopyTargets
?
aEvent
.
currentTarget
:
nullptr
;
originalTarget
=
aCopyTargets
?
aEvent
.
originalTarget
:
nullptr
;
}
void
PreventDefault
(
)
{
mFlags
.
mDefaultPrevented
=
true
;
mFlags
.
mDefaultPreventedByChrome
=
true
;
}
#
define
NS_ROOT_EVENT_CLASS
(
aPrefix
aName
)
#
define
NS_EVENT_CLASS
(
aPrefix
aName
)
\
virtual
aPrefix
#
#
aName
*
As
#
#
aName
(
)
;
\
const
aPrefix
#
#
aName
*
As
#
#
aName
(
)
const
;
#
include
"
mozilla
/
EventClassList
.
h
"
#
undef
NS_EVENT_CLASS
#
undef
NS_ROOT_EVENT_CLASS
bool
IsQueryContentEvent
(
)
const
;
bool
IsSelectionEvent
(
)
const
;
bool
IsContentCommandEvent
(
)
const
;
bool
IsNativeEventDelivererForPlugin
(
)
const
;
bool
HasMouseEventMessage
(
)
const
;
bool
HasDragEventMessage
(
)
const
;
bool
HasKeyEventMessage
(
)
const
;
bool
HasIMEEventMessage
(
)
const
;
bool
HasPluginActivationEventMessage
(
)
const
;
bool
IsRetargetedNativeEventDelivererForPlugin
(
)
const
;
bool
IsNonRetargetedNativeEventDelivererForPlugin
(
)
const
;
bool
IsIMERelatedEvent
(
)
const
;
bool
IsUsingCoordinates
(
)
const
;
bool
IsTargetedAtFocusedWindow
(
)
const
;
bool
IsTargetedAtFocusedContent
(
)
const
;
bool
IsAllowedToDispatchDOMEvent
(
)
const
;
}
;
class
WidgetGUIEvent
:
public
WidgetEvent
{
protected
:
WidgetGUIEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
EventClassID
aEventClassID
)
:
WidgetEvent
(
aIsTrusted
aMessage
aEventClassID
)
widget
(
aWidget
)
{
}
WidgetGUIEvent
(
)
{
}
public
:
virtual
WidgetGUIEvent
*
AsGUIEvent
(
)
override
{
return
this
;
}
WidgetGUIEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetEvent
(
aIsTrusted
aMessage
eGUIEventClass
)
widget
(
aWidget
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eGUIEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetGUIEvent
*
result
=
new
WidgetGUIEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignGUIEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
nsCOMPtr
<
nsIWidget
>
widget
;
class
PluginEvent
final
{
nsTArray
<
uint8_t
>
mBuffer
;
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
WidgetGUIEvent
>
;
public
:
MOZ_EXPLICIT_CONVERSION
operator
bool
(
)
const
{
return
!
mBuffer
.
IsEmpty
(
)
;
}
template
<
typename
T
>
MOZ_EXPLICIT_CONVERSION
operator
const
T
*
(
)
const
{
return
mBuffer
.
IsEmpty
(
)
?
nullptr
:
reinterpret_cast
<
const
T
*
>
(
mBuffer
.
Elements
(
)
)
;
}
template
<
typename
T
>
void
Copy
(
const
T
&
other
)
{
static_assert
(
!
mozilla
:
:
IsPointer
<
T
>
:
:
value
"
Don
'
t
want
a
pointer
!
"
)
;
mBuffer
.
SetLength
(
sizeof
(
T
)
)
;
memcpy
(
mBuffer
.
Elements
(
)
&
other
mBuffer
.
Length
(
)
)
;
}
void
Clear
(
)
{
mBuffer
.
Clear
(
)
;
}
}
;
PluginEvent
mPluginEvent
;
void
AssignGUIEventData
(
const
WidgetGUIEvent
&
aEvent
bool
aCopyTargets
)
{
AssignEventData
(
aEvent
aCopyTargets
)
;
mPluginEvent
=
aEvent
.
mPluginEvent
;
}
}
;
enum
Modifier
{
MODIFIER_NONE
=
0x0000
MODIFIER_ALT
=
0x0001
MODIFIER_ALTGRAPH
=
0x0002
MODIFIER_CAPSLOCK
=
0x0004
MODIFIER_CONTROL
=
0x0008
MODIFIER_FN
=
0x0010
MODIFIER_FNLOCK
=
0x0020
MODIFIER_META
=
0x0040
MODIFIER_NUMLOCK
=
0x0080
MODIFIER_SCROLLLOCK
=
0x0100
MODIFIER_SHIFT
=
0x0200
MODIFIER_SYMBOL
=
0x0400
MODIFIER_SYMBOLLOCK
=
0x0800
MODIFIER_OS
=
0x1000
}
;
#
define
NS_DOM_KEYNAME_ALT
"
Alt
"
#
define
NS_DOM_KEYNAME_ALTGRAPH
"
AltGraph
"
#
define
NS_DOM_KEYNAME_CAPSLOCK
"
CapsLock
"
#
define
NS_DOM_KEYNAME_CONTROL
"
Control
"
#
define
NS_DOM_KEYNAME_FN
"
Fn
"
#
define
NS_DOM_KEYNAME_FNLOCK
"
FnLock
"
#
define
NS_DOM_KEYNAME_META
"
Meta
"
#
define
NS_DOM_KEYNAME_NUMLOCK
"
NumLock
"
#
define
NS_DOM_KEYNAME_SCROLLLOCK
"
ScrollLock
"
#
define
NS_DOM_KEYNAME_SHIFT
"
Shift
"
#
define
NS_DOM_KEYNAME_SYMBOL
"
Symbol
"
#
define
NS_DOM_KEYNAME_SYMBOLLOCK
"
SymbolLock
"
#
define
NS_DOM_KEYNAME_OS
"
OS
"
typedef
uint16_t
Modifiers
;
class
WidgetInputEvent
:
public
WidgetGUIEvent
{
protected
:
WidgetInputEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
EventClassID
aEventClassID
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
aWidget
aEventClassID
)
modifiers
(
0
)
{
}
WidgetInputEvent
(
)
{
}
public
:
virtual
WidgetInputEvent
*
AsInputEvent
(
)
override
{
return
this
;
}
WidgetInputEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
aWidget
eInputEventClass
)
modifiers
(
0
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eInputEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetInputEvent
*
result
=
new
WidgetInputEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignInputEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
static
Modifier
AccelModifier
(
)
;
static
Modifier
GetModifier
(
const
nsAString
&
aDOMKeyName
)
;
bool
IsAccel
(
)
const
{
return
(
(
modifiers
&
AccelModifier
(
)
)
!
=
0
)
;
}
bool
IsShift
(
)
const
{
return
(
(
modifiers
&
MODIFIER_SHIFT
)
!
=
0
)
;
}
bool
IsControl
(
)
const
{
return
(
(
modifiers
&
MODIFIER_CONTROL
)
!
=
0
)
;
}
bool
IsAlt
(
)
const
{
return
(
(
modifiers
&
MODIFIER_ALT
)
!
=
0
)
;
}
bool
IsMeta
(
)
const
{
return
(
(
modifiers
&
MODIFIER_META
)
!
=
0
)
;
}
bool
IsOS
(
)
const
{
return
(
(
modifiers
&
MODIFIER_OS
)
!
=
0
)
;
}
bool
IsAltGraph
(
)
const
{
return
(
(
modifiers
&
MODIFIER_ALTGRAPH
)
!
=
0
)
;
}
bool
IsCapsLocked
(
)
const
{
return
(
(
modifiers
&
MODIFIER_CAPSLOCK
)
!
=
0
)
;
}
bool
IsNumLocked
(
)
const
{
return
(
(
modifiers
&
MODIFIER_NUMLOCK
)
!
=
0
)
;
}
bool
IsScrollLocked
(
)
const
{
return
(
(
modifiers
&
MODIFIER_SCROLLLOCK
)
!
=
0
)
;
}
bool
IsFn
(
)
const
{
return
(
(
modifiers
&
MODIFIER_FN
)
!
=
0
)
;
}
bool
IsFnLocked
(
)
const
{
return
(
(
modifiers
&
MODIFIER_FNLOCK
)
!
=
0
)
;
}
bool
IsSymbol
(
)
const
{
return
(
(
modifiers
&
MODIFIER_SYMBOL
)
!
=
0
)
;
}
bool
IsSymbolLocked
(
)
const
{
return
(
(
modifiers
&
MODIFIER_SYMBOLLOCK
)
!
=
0
)
;
}
void
InitBasicModifiers
(
bool
aCtrlKey
bool
aAltKey
bool
aShiftKey
bool
aMetaKey
)
{
modifiers
=
0
;
if
(
aCtrlKey
)
{
modifiers
|
=
MODIFIER_CONTROL
;
}
if
(
aAltKey
)
{
modifiers
|
=
MODIFIER_ALT
;
}
if
(
aShiftKey
)
{
modifiers
|
=
MODIFIER_SHIFT
;
}
if
(
aMetaKey
)
{
modifiers
|
=
MODIFIER_META
;
}
}
Modifiers
modifiers
;
void
AssignInputEventData
(
const
WidgetInputEvent
&
aEvent
bool
aCopyTargets
)
{
AssignGUIEventData
(
aEvent
aCopyTargets
)
;
modifiers
=
aEvent
.
modifiers
;
}
}
;
class
InternalUIEvent
:
public
WidgetGUIEvent
{
protected
:
InternalUIEvent
(
)
:
detail
(
0
)
mCausedByUntrustedEvent
(
false
)
{
}
InternalUIEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
EventClassID
aEventClassID
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
aWidget
aEventClassID
)
detail
(
0
)
mCausedByUntrustedEvent
(
false
)
{
}
InternalUIEvent
(
bool
aIsTrusted
EventMessage
aMessage
EventClassID
aEventClassID
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
nullptr
aEventClassID
)
detail
(
0
)
mCausedByUntrustedEvent
(
false
)
{
}
public
:
virtual
InternalUIEvent
*
AsUIEvent
(
)
override
{
return
this
;
}
InternalUIEvent
(
bool
aIsTrusted
EventMessage
aMessage
const
WidgetEvent
*
aEventCausesThisEvent
)
:
WidgetGUIEvent
(
aIsTrusted
aMessage
nullptr
eUIEventClass
)
detail
(
0
)
mCausedByUntrustedEvent
(
aEventCausesThisEvent
&
&
!
aEventCausesThisEvent
-
>
mFlags
.
mIsTrusted
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eUIEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
InternalUIEvent
*
result
=
new
InternalUIEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignUIEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
int32_t
detail
;
bool
mCausedByUntrustedEvent
;
bool
IsTrustable
(
)
const
{
return
mFlags
.
mIsTrusted
&
&
!
mCausedByUntrustedEvent
;
}
void
AssignUIEventData
(
const
InternalUIEvent
&
aEvent
bool
aCopyTargets
)
{
AssignGUIEventData
(
aEvent
aCopyTargets
)
;
detail
=
aEvent
.
detail
;
mCausedByUntrustedEvent
=
aEvent
.
mCausedByUntrustedEvent
;
}
}
;
}
#
endif
