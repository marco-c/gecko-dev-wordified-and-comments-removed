#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
ipc
/
URIUtils
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsSoundProxy
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
nsSoundProxy
nsISound
)
NS_IMETHODIMP
nsSoundProxy
:
:
Play
(
nsIURL
*
aURL
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
)
;
nsCOMPtr
<
nsIURI
>
soundURI
(
aURL
)
;
bool
isChrome
=
false
;
if
(
!
soundURI
|
|
!
soundURI
-
>
SchemeIs
(
"
chrome
"
)
)
{
return
NS_ERROR_FAILURE
;
}
mozilla
:
:
ipc
:
:
URIParams
soundParams
;
mozilla
:
:
ipc
:
:
SerializeURI
(
soundURI
soundParams
)
;
ContentChild
:
:
GetSingleton
(
)
-
>
SendPlaySound
(
soundParams
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSoundProxy
:
:
Beep
(
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
)
;
ContentChild
:
:
GetSingleton
(
)
-
>
SendBeep
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsSoundProxy
:
:
Init
(
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
)
;
MOZ_DIAGNOSTIC_ASSERT
(
false
"
Only
called
by
XUL
in
the
parent
process
.
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsSoundProxy
:
:
PlayEventSound
(
uint32_t
aEventId
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Content
)
;
ContentChild
:
:
GetSingleton
(
)
-
>
SendPlayEventSound
(
aEventId
)
;
return
NS_OK
;
}
