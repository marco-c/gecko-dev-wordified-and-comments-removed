#
ifndef
mozilla_widget_IMEData_h_
#
define
mozilla_widget_IMEData_h_
#
include
"
nsPoint
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsStringGlue
.
h
"
namespace
mozilla
{
class
WritingMode
;
}
struct
nsIMEUpdatePreference
final
{
typedef
uint8_t
Notifications
;
enum
:
Notifications
{
NOTIFY_NOTHING
=
0
NOTIFY_SELECTION_CHANGE
=
1
<
<
0
NOTIFY_TEXT_CHANGE
=
1
<
<
1
NOTIFY_POSITION_CHANGE
=
1
<
<
2
NOTIFY_MOUSE_BUTTON_EVENT_ON_CHAR
=
1
<
<
3
NOTIFY_CHANGES_CAUSED_BY_COMPOSITION
=
1
<
<
6
NOTIFY_DURING_DEACTIVE
=
1
<
<
7
DEFAULT_CONDITIONS_OF_NOTIFYING_CHANGES
=
NOTIFY_CHANGES_CAUSED_BY_COMPOSITION
}
;
nsIMEUpdatePreference
(
)
:
mWantUpdates
(
DEFAULT_CONDITIONS_OF_NOTIFYING_CHANGES
)
{
}
explicit
nsIMEUpdatePreference
(
Notifications
aWantUpdates
)
:
mWantUpdates
(
aWantUpdates
|
DEFAULT_CONDITIONS_OF_NOTIFYING_CHANGES
)
{
}
void
DontNotifyChangesCausedByComposition
(
)
{
mWantUpdates
&
=
~
DEFAULT_CONDITIONS_OF_NOTIFYING_CHANGES
;
}
bool
WantSelectionChange
(
)
const
{
return
!
!
(
mWantUpdates
&
NOTIFY_SELECTION_CHANGE
)
;
}
bool
WantTextChange
(
)
const
{
return
!
!
(
mWantUpdates
&
NOTIFY_TEXT_CHANGE
)
;
}
bool
WantPositionChanged
(
)
const
{
return
!
!
(
mWantUpdates
&
NOTIFY_POSITION_CHANGE
)
;
}
bool
WantChanges
(
)
const
{
return
WantSelectionChange
(
)
|
|
WantTextChange
(
)
;
}
bool
WantMouseButtonEventOnChar
(
)
const
{
return
!
!
(
mWantUpdates
&
NOTIFY_MOUSE_BUTTON_EVENT_ON_CHAR
)
;
}
bool
WantChangesCausedByComposition
(
)
const
{
return
WantChanges
(
)
&
&
!
!
(
mWantUpdates
&
NOTIFY_CHANGES_CAUSED_BY_COMPOSITION
)
;
}
bool
WantDuringDeactive
(
)
const
{
return
!
!
(
mWantUpdates
&
NOTIFY_DURING_DEACTIVE
)
;
}
Notifications
mWantUpdates
;
}
;
namespace
mozilla
{
namespace
widget
{
struct
IMEState
final
{
enum
Enabled
{
DISABLED
ENABLED
PASSWORD
PLUGIN
}
;
Enabled
mEnabled
;
enum
Open
{
OPEN_STATE_NOT_SUPPORTED
DONT_CHANGE_OPEN_STATE
=
OPEN_STATE_NOT_SUPPORTED
OPEN
CLOSED
}
;
Open
mOpen
;
IMEState
(
)
:
mEnabled
(
ENABLED
)
mOpen
(
DONT_CHANGE_OPEN_STATE
)
{
}
explicit
IMEState
(
Enabled
aEnabled
Open
aOpen
=
DONT_CHANGE_OPEN_STATE
)
:
mEnabled
(
aEnabled
)
mOpen
(
aOpen
)
{
}
bool
IsEditable
(
)
const
{
return
mEnabled
=
=
ENABLED
|
|
mEnabled
=
=
PASSWORD
;
}
bool
MaybeEditable
(
)
const
{
return
IsEditable
(
)
|
|
mEnabled
=
=
PLUGIN
;
}
}
;
struct
InputContext
final
{
InputContext
(
)
:
mNativeIMEContext
(
nullptr
)
mOrigin
(
XRE_IsParentProcess
(
)
?
ORIGIN_MAIN
:
ORIGIN_CONTENT
)
mMayBeIMEUnaware
(
false
)
{
}
bool
IsPasswordEditor
(
)
const
{
return
mHTMLInputType
.
LowerCaseEqualsLiteral
(
"
password
"
)
;
}
IMEState
mIMEState
;
nsString
mHTMLInputType
;
nsString
mHTMLInputInputmode
;
nsString
mActionHint
;
void
*
mNativeIMEContext
;
enum
Origin
{
ORIGIN_MAIN
ORIGIN_CONTENT
}
;
Origin
mOrigin
;
bool
mMayBeIMEUnaware
;
bool
IsOriginMainProcess
(
)
const
{
return
mOrigin
=
=
ORIGIN_MAIN
;
}
bool
IsOriginContentProcess
(
)
const
{
return
mOrigin
=
=
ORIGIN_CONTENT
;
}
bool
IsOriginCurrentProcess
(
)
const
{
if
(
XRE_IsParentProcess
(
)
)
{
return
IsOriginMainProcess
(
)
;
}
return
IsOriginContentProcess
(
)
;
}
}
;
struct
InputContextAction
final
{
enum
Cause
{
CAUSE_UNKNOWN
CAUSE_UNKNOWN_CHROME
CAUSE_KEY
CAUSE_MOUSE
}
;
Cause
mCause
;
enum
FocusChange
{
FOCUS_NOT_CHANGED
GOT_FOCUS
LOST_FOCUS
MENU_GOT_PSEUDO_FOCUS
MENU_LOST_PSEUDO_FOCUS
}
;
FocusChange
mFocusChange
;
bool
ContentGotFocusByTrustedCause
(
)
const
{
return
(
mFocusChange
=
=
GOT_FOCUS
&
&
mCause
!
=
CAUSE_UNKNOWN
)
;
}
bool
UserMightRequestOpenVKB
(
)
const
{
return
(
mFocusChange
=
=
FOCUS_NOT_CHANGED
&
&
mCause
=
=
CAUSE_MOUSE
)
;
}
InputContextAction
(
)
:
mCause
(
CAUSE_UNKNOWN
)
mFocusChange
(
FOCUS_NOT_CHANGED
)
{
}
explicit
InputContextAction
(
Cause
aCause
FocusChange
aFocusChange
=
FOCUS_NOT_CHANGED
)
:
mCause
(
aCause
)
mFocusChange
(
aFocusChange
)
{
}
}
;
typedef
int8_t
IMEMessageType
;
enum
IMEMessage
:
IMEMessageType
{
NOTIFY_IME_OF_NOTHING
NOTIFY_IME_OF_FOCUS
NOTIFY_IME_OF_BLUR
NOTIFY_IME_OF_SELECTION_CHANGE
NOTIFY_IME_OF_TEXT_CHANGE
NOTIFY_IME_OF_COMPOSITION_UPDATE
NOTIFY_IME_OF_POSITION_CHANGE
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
REQUEST_TO_COMMIT_COMPOSITION
REQUEST_TO_CANCEL_COMPOSITION
}
;
struct
IMENotification
final
{
IMENotification
(
)
:
mMessage
(
NOTIFY_IME_OF_NOTHING
)
{
}
IMENotification
(
const
IMENotification
&
aOther
)
{
Assign
(
aOther
)
;
}
~
IMENotification
(
)
{
Clear
(
)
;
}
MOZ_IMPLICIT
IMENotification
(
IMEMessage
aMessage
)
:
mMessage
(
aMessage
)
{
switch
(
aMessage
)
{
case
NOTIFY_IME_OF_SELECTION_CHANGE
:
mSelectionChangeData
.
mString
=
new
nsString
(
)
;
mSelectionChangeData
.
Clear
(
)
;
break
;
case
NOTIFY_IME_OF_TEXT_CHANGE
:
mTextChangeData
.
Clear
(
)
;
break
;
case
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
:
mMouseButtonEventData
.
mEventMessage
=
0
;
mMouseButtonEventData
.
mOffset
=
UINT32_MAX
;
mMouseButtonEventData
.
mCursorPos
.
Set
(
nsIntPoint
(
0
0
)
)
;
mMouseButtonEventData
.
mCharRect
.
Set
(
nsIntRect
(
0
0
0
0
)
)
;
mMouseButtonEventData
.
mButton
=
-
1
;
mMouseButtonEventData
.
mButtons
=
0
;
mMouseButtonEventData
.
mModifiers
=
0
;
default
:
break
;
}
}
void
Assign
(
const
IMENotification
&
aOther
)
{
Clear
(
)
;
mMessage
=
aOther
.
mMessage
;
switch
(
mMessage
)
{
case
NOTIFY_IME_OF_SELECTION_CHANGE
:
mSelectionChangeData
=
aOther
.
mSelectionChangeData
;
mSelectionChangeData
.
mString
=
new
nsString
(
aOther
.
mSelectionChangeData
.
String
(
)
)
;
break
;
case
NOTIFY_IME_OF_TEXT_CHANGE
:
mTextChangeData
=
aOther
.
mTextChangeData
;
break
;
case
NOTIFY_IME_OF_MOUSE_BUTTON_EVENT
:
mMouseButtonEventData
=
aOther
.
mMouseButtonEventData
;
break
;
default
:
break
;
}
}
IMENotification
&
operator
=
(
const
IMENotification
&
aOther
)
{
Assign
(
aOther
)
;
return
*
this
;
}
void
Clear
(
)
{
if
(
mMessage
=
=
NOTIFY_IME_OF_SELECTION_CHANGE
)
{
MOZ_ASSERT
(
mSelectionChangeData
.
mString
)
;
delete
mSelectionChangeData
.
mString
;
mSelectionChangeData
.
mString
=
nullptr
;
}
mMessage
=
NOTIFY_IME_OF_NOTHING
;
}
bool
HasNotification
(
)
const
{
return
mMessage
!
=
NOTIFY_IME_OF_NOTHING
;
}
void
MergeWith
(
const
IMENotification
&
aNotification
)
{
switch
(
mMessage
)
{
case
NOTIFY_IME_OF_NOTHING
:
MOZ_ASSERT
(
aNotification
.
mMessage
!
=
NOTIFY_IME_OF_NOTHING
)
;
Assign
(
aNotification
)
;
break
;
case
NOTIFY_IME_OF_SELECTION_CHANGE
:
MOZ_ASSERT
(
aNotification
.
mMessage
=
=
NOTIFY_IME_OF_SELECTION_CHANGE
)
;
mSelectionChangeData
.
mOffset
=
aNotification
.
mSelectionChangeData
.
mOffset
;
*
mSelectionChangeData
.
mString
=
aNotification
.
mSelectionChangeData
.
String
(
)
;
mSelectionChangeData
.
mWritingMode
=
aNotification
.
mSelectionChangeData
.
mWritingMode
;
mSelectionChangeData
.
mReversed
=
aNotification
.
mSelectionChangeData
.
mReversed
;
if
(
!
mSelectionChangeData
.
mCausedByComposition
)
{
mSelectionChangeData
.
mCausedByComposition
=
aNotification
.
mSelectionChangeData
.
mCausedByComposition
;
}
else
{
mSelectionChangeData
.
mCausedByComposition
=
mSelectionChangeData
.
mCausedByComposition
&
&
aNotification
.
mSelectionChangeData
.
mCausedByComposition
;
}
if
(
!
mSelectionChangeData
.
mCausedBySelectionEvent
)
{
mSelectionChangeData
.
mCausedBySelectionEvent
=
aNotification
.
mSelectionChangeData
.
mCausedBySelectionEvent
;
}
else
{
mSelectionChangeData
.
mCausedBySelectionEvent
=
mSelectionChangeData
.
mCausedBySelectionEvent
&
&
aNotification
.
mSelectionChangeData
.
mCausedBySelectionEvent
;
}
break
;
case
NOTIFY_IME_OF_TEXT_CHANGE
:
MOZ_ASSERT
(
aNotification
.
mMessage
=
=
NOTIFY_IME_OF_TEXT_CHANGE
)
;
mTextChangeData
+
=
aNotification
.
mTextChangeData
;
break
;
case
NOTIFY_IME_OF_POSITION_CHANGE
:
case
NOTIFY_IME_OF_COMPOSITION_UPDATE
:
MOZ_ASSERT
(
aNotification
.
mMessage
=
=
mMessage
)
;
break
;
default
:
MOZ_CRASH
(
"
Merging
notification
isn
'
t
supported
"
)
;
break
;
}
}
IMEMessage
mMessage
;
struct
Point
{
int32_t
mX
;
int32_t
mY
;
void
Set
(
const
nsIntPoint
&
aPoint
)
{
mX
=
aPoint
.
x
;
mY
=
aPoint
.
y
;
}
nsIntPoint
AsIntPoint
(
)
const
{
return
nsIntPoint
(
mX
mY
)
;
}
}
;
struct
Rect
{
int32_t
mX
;
int32_t
mY
;
int32_t
mWidth
;
int32_t
mHeight
;
void
Set
(
const
nsIntRect
&
aRect
)
{
mX
=
aRect
.
x
;
mY
=
aRect
.
y
;
mWidth
=
aRect
.
width
;
mHeight
=
aRect
.
height
;
}
nsIntRect
AsIntRect
(
)
const
{
return
nsIntRect
(
mX
mY
mWidth
mHeight
)
;
}
}
;
struct
SelectionChangeData
{
uint32_t
mOffset
;
nsString
*
mString
;
uint8_t
mWritingMode
;
bool
mReversed
;
bool
mCausedByComposition
;
bool
mCausedBySelectionEvent
;
void
SetWritingMode
(
const
WritingMode
&
aWritingMode
)
;
WritingMode
GetWritingMode
(
)
const
;
uint32_t
StartOffset
(
)
const
{
return
mOffset
+
(
mReversed
?
Length
(
)
:
0
)
;
}
uint32_t
EndOffset
(
)
const
{
return
mOffset
+
(
mReversed
?
0
:
Length
(
)
)
;
}
const
nsString
&
String
(
)
const
{
return
*
mString
;
}
uint32_t
Length
(
)
const
{
return
mString
-
>
Length
(
)
;
}
bool
IsInInt32Range
(
)
const
{
return
mOffset
+
Length
(
)
<
=
INT32_MAX
;
}
void
Clear
(
)
{
mOffset
=
UINT32_MAX
;
mString
-
>
Truncate
(
)
;
mWritingMode
=
0
;
mReversed
=
false
;
mCausedByComposition
=
false
;
mCausedBySelectionEvent
=
false
;
}
bool
IsValid
(
)
const
{
return
mOffset
!
=
UINT32_MAX
;
}
}
;
struct
TextChangeDataBase
{
uint32_t
mStartOffset
;
uint32_t
mRemovedEndOffset
;
uint32_t
mAddedEndOffset
;
bool
mCausedByComposition
;
uint32_t
OldLength
(
)
const
{
MOZ_ASSERT
(
IsValid
(
)
)
;
return
mRemovedEndOffset
-
mStartOffset
;
}
uint32_t
NewLength
(
)
const
{
MOZ_ASSERT
(
IsValid
(
)
)
;
return
mAddedEndOffset
-
mStartOffset
;
}
int64_t
Difference
(
)
const
{
return
mAddedEndOffset
-
mRemovedEndOffset
;
}
bool
IsInInt32Range
(
)
const
{
MOZ_ASSERT
(
IsValid
(
)
)
;
return
mStartOffset
<
=
INT32_MAX
&
&
mRemovedEndOffset
<
=
INT32_MAX
&
&
mAddedEndOffset
<
=
INT32_MAX
;
}
bool
IsValid
(
)
const
{
return
!
(
mStartOffset
=
=
UINT32_MAX
&
&
!
mRemovedEndOffset
&
&
!
mAddedEndOffset
)
;
}
void
Clear
(
)
{
mStartOffset
=
UINT32_MAX
;
mRemovedEndOffset
=
mAddedEndOffset
=
0
;
}
void
MergeWith
(
const
TextChangeDataBase
&
aOther
)
;
TextChangeDataBase
&
operator
+
=
(
const
TextChangeDataBase
&
aOther
)
{
MergeWith
(
aOther
)
;
return
*
this
;
}
#
ifdef
DEBUG
void
Test
(
)
;
#
endif
}
;
struct
TextChangeData
:
public
TextChangeDataBase
{
TextChangeData
(
)
{
Clear
(
)
;
}
TextChangeData
(
uint32_t
aStartOffset
uint32_t
aRemovedEndOffset
uint32_t
aAddedEndOffset
bool
aCausedByComposition
)
{
MOZ_ASSERT
(
aRemovedEndOffset
>
=
aStartOffset
"
removed
end
offset
must
not
be
smaller
than
start
offset
"
)
;
MOZ_ASSERT
(
aAddedEndOffset
>
=
aStartOffset
"
added
end
offset
must
not
be
smaller
than
start
offset
"
)
;
mStartOffset
=
aStartOffset
;
mRemovedEndOffset
=
aRemovedEndOffset
;
mAddedEndOffset
=
aAddedEndOffset
;
mCausedByComposition
=
aCausedByComposition
;
}
}
;
struct
MouseButtonEventData
{
uint32_t
mEventMessage
;
uint32_t
mOffset
;
Point
mCursorPos
;
Rect
mCharRect
;
int16_t
mButton
;
int16_t
mButtons
;
Modifiers
mModifiers
;
}
;
union
{
SelectionChangeData
mSelectionChangeData
;
TextChangeDataBase
mTextChangeData
;
MouseButtonEventData
mMouseButtonEventData
;
}
;
bool
IsCausedByComposition
(
)
const
{
switch
(
mMessage
)
{
case
NOTIFY_IME_OF_SELECTION_CHANGE
:
return
mSelectionChangeData
.
mCausedByComposition
;
case
NOTIFY_IME_OF_TEXT_CHANGE
:
return
mTextChangeData
.
mCausedByComposition
;
default
:
return
false
;
}
}
}
;
}
}
#
endif
