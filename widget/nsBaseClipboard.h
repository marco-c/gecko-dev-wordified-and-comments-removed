#
ifndef
nsBaseClipboard_h__
#
define
nsBaseClipboard_h__
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsIClipboard
.
h
"
#
include
"
nsITransferable
.
h
"
#
include
"
nsCOMPtr
.
h
"
static
mozilla
:
:
LazyLogModule
sWidgetClipboardLog
(
"
WidgetClipboard
"
)
;
#
define
CLIPBOARD_LOG
(
.
.
.
)
\
MOZ_LOG
(
sWidgetClipboardLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
CLIPBOARD_LOG_ENABLED
(
)
\
MOZ_LOG_TEST
(
sWidgetClipboardLog
LogLevel
:
:
Debug
)
class
nsITransferable
;
class
nsIClipboardOwner
;
class
nsIWidget
;
class
ClipboardSetDataHelper
:
public
nsIClipboard
{
public
:
NS_DECL_ISUPPORTS
ClipboardSetDataHelper
(
)
=
default
;
NS_IMETHOD
SetData
(
nsITransferable
*
aTransferable
nsIClipboardOwner
*
aOwner
int32_t
aWhichClipboard
)
override
;
NS_IMETHOD
AsyncSetData
(
int32_t
aWhichClipboard
nsIAsyncSetClipboardDataCallback
*
aCallback
nsIAsyncSetClipboardData
*
*
_retval
)
override
final
;
protected
:
virtual
~
ClipboardSetDataHelper
(
)
;
NS_IMETHOD
SetNativeClipboardData
(
nsITransferable
*
aTransferable
nsIClipboardOwner
*
aOwner
int32_t
aWhichClipboard
)
=
0
;
class
AsyncSetClipboardData
final
:
public
nsIAsyncSetClipboardData
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIASYNCSETCLIPBOARDDATA
AsyncSetClipboardData
(
int32_t
aClipboardType
ClipboardSetDataHelper
*
aClipboard
nsIAsyncSetClipboardDataCallback
*
aCallback
)
;
private
:
virtual
~
AsyncSetClipboardData
(
)
=
default
;
bool
IsValid
(
)
const
{
MOZ_ASSERT_IF
(
!
mClipboard
!
mCallback
)
;
return
!
!
mClipboard
;
}
void
MaybeNotifyCallback
(
nsresult
aResult
)
;
int32_t
mClipboardType
;
ClipboardSetDataHelper
*
mClipboard
;
nsCOMPtr
<
nsIAsyncSetClipboardDataCallback
>
mCallback
;
}
;
private
:
void
RejectPendingAsyncSetDataRequestIfAny
(
int32_t
aClipboardType
)
;
RefPtr
<
AsyncSetClipboardData
>
mPendingWriteRequests
[
nsIClipboard
:
:
kClipboardTypeCount
]
;
}
;
class
nsBaseClipboard
:
public
ClipboardSetDataHelper
{
public
:
nsBaseClipboard
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHOD
SetData
(
nsITransferable
*
aTransferable
nsIClipboardOwner
*
anOwner
int32_t
aWhichClipboard
)
override
;
NS_IMETHOD
GetData
(
nsITransferable
*
aTransferable
int32_t
aWhichClipboard
)
override
;
NS_IMETHOD
EmptyClipboard
(
int32_t
aWhichClipboard
)
override
;
NS_IMETHOD
HasDataMatchingFlavors
(
const
nsTArray
<
nsCString
>
&
aFlavorList
int32_t
aWhichClipboard
bool
*
_retval
)
override
;
NS_IMETHOD
IsClipboardTypeSupported
(
int32_t
aWhichClipboard
bool
*
_retval
)
override
;
RefPtr
<
mozilla
:
:
GenericPromise
>
AsyncGetData
(
nsITransferable
*
aTransferable
int32_t
aWhichClipboard
)
override
;
RefPtr
<
DataFlavorsPromise
>
AsyncHasDataMatchingFlavors
(
const
nsTArray
<
nsCString
>
&
aFlavorList
int32_t
aWhichClipboard
)
override
;
protected
:
virtual
~
nsBaseClipboard
(
)
;
NS_IMETHOD
GetNativeClipboardData
(
nsITransferable
*
aTransferable
int32_t
aWhichClipboard
)
=
0
;
void
ClearClipboardCache
(
)
;
bool
mEmptyingForSetData
;
nsCOMPtr
<
nsIClipboardOwner
>
mClipboardOwner
;
nsCOMPtr
<
nsITransferable
>
mTransferable
;
private
:
bool
mIgnoreEmptyNotification
=
false
;
}
;
#
endif
