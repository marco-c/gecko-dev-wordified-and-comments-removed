#
include
"
CompositorWidget
.
h
"
#
include
"
GLConsts
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
VsyncDispatcher
.
h
"
namespace
mozilla
{
namespace
widget
{
CompositorWidget
:
:
CompositorWidget
(
const
layers
:
:
CompositorOptions
&
aOptions
)
:
mOptions
(
aOptions
)
{
}
CompositorWidget
:
:
~
CompositorWidget
(
)
=
default
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
CompositorWidget
:
:
StartRemoteDrawing
(
)
{
return
nullptr
;
}
void
CompositorWidget
:
:
CleanupRemoteDrawing
(
)
{
mLastBackBuffer
=
nullptr
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
CompositorWidget
:
:
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
gfx
:
:
IntRect
&
aRect
bool
*
aOutIsCleared
)
{
MOZ_ASSERT
(
aScreenTarget
)
;
gfx
:
:
SurfaceFormat
format
=
aScreenTarget
-
>
GetFormat
(
)
=
=
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
?
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
:
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
;
gfx
:
:
IntSize
size
=
aRect
.
Size
(
)
;
gfx
:
:
IntSize
clientSize
=
Max
(
size
GetClientSize
(
)
.
ToUnknownSize
(
)
)
;
*
aOutIsCleared
=
false
;
if
(
!
mLastBackBuffer
|
|
mLastBackBuffer
-
>
GetBackendType
(
)
!
=
aScreenTarget
-
>
GetBackendType
(
)
|
|
mLastBackBuffer
-
>
GetFormat
(
)
!
=
format
|
|
mLastBackBuffer
-
>
GetSize
(
)
!
=
clientSize
)
{
mLastBackBuffer
=
aScreenTarget
-
>
CreateSimilarDrawTarget
(
clientSize
format
)
;
*
aOutIsCleared
=
true
;
}
return
do_AddRef
(
mLastBackBuffer
)
;
}
already_AddRefed
<
gfx
:
:
SourceSurface
>
CompositorWidget
:
:
EndBackBufferDrawing
(
)
{
RefPtr
<
gfx
:
:
SourceSurface
>
surface
=
mLastBackBuffer
?
mLastBackBuffer
-
>
Snapshot
(
)
:
nullptr
;
return
surface
.
forget
(
)
;
}
uint32_t
CompositorWidget
:
:
GetGLFrameBufferFormat
(
)
{
return
LOCAL_GL_RGBA
;
}
RefPtr
<
VsyncObserver
>
CompositorWidget
:
:
GetVsyncObserver
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Must
be
implemented
by
derived
class
"
)
;
return
nullptr
;
}
LayoutDeviceIntRegion
CompositorWidget
:
:
GetTransparentRegion
(
)
{
if
(
RealWidget
(
)
-
>
GetTransparencyMode
(
)
!
=
eTransparencyOpaque
)
{
return
LayoutDeviceIntRect
(
LayoutDeviceIntPoint
(
0
0
)
GetClientSize
(
)
)
;
}
return
LayoutDeviceIntRegion
(
)
;
}
}
}
