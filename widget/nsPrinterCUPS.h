#
ifndef
nsPrinterCUPS_h___
#
define
nsPrinterCUPS_h___
#
include
"
nsPrinterBase
.
h
"
#
include
"
nsPrintSettingsImpl
.
h
"
#
include
"
nsCUPSShim
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
RecursiveMutex
.
h
"
class
nsPrinterCUPS
final
:
public
nsPrinterBase
{
public
:
NS_IMETHOD
GetName
(
nsAString
&
aName
)
override
;
NS_IMETHOD
GetSystemName
(
nsAString
&
aName
)
override
;
PrintSettingsInitializer
DefaultSettings
(
)
const
final
;
bool
SupportsDuplex
(
)
const
final
;
bool
SupportsColor
(
)
const
final
;
bool
SupportsMonochrome
(
)
const
final
;
bool
SupportsCollation
(
)
const
final
;
nsTArray
<
mozilla
:
:
PaperInfo
>
PaperList
(
)
const
final
;
MarginDouble
GetMarginsForPaper
(
nsString
aPaperId
)
const
final
{
MOZ_ASSERT_UNREACHABLE
(
"
The
CUPS
API
requires
us
to
always
get
the
margin
when
fetching
the
"
"
paper
list
so
there
should
be
no
need
to
query
it
separately
"
)
;
return
{
}
;
}
nsPrinterCUPS
(
)
=
delete
;
nsPrinterCUPS
(
const
nsCUPSShim
&
aShim
nsString
aDisplayName
cups_dest_t
*
aPrinter
)
:
mShim
(
aShim
)
mDisplayName
(
std
:
:
move
(
aDisplayName
)
)
mPrinter
(
aPrinter
)
mPrinterInfoMutex
(
"
nsPrinterCUPS
:
:
mPrinterInfoMutex
"
)
{
}
private
:
struct
CUPSPrinterInfo
{
cups_dinfo_t
*
mPrinterInfo
=
nullptr
;
uint64_t
mCUPSMajor
=
0
;
uint64_t
mCUPSMinor
=
0
;
uint64_t
mCUPSPatch
=
0
;
bool
mTriedInitWithDefault
=
false
;
bool
mTriedInitWithConnection
=
false
;
CUPSPrinterInfo
(
)
=
default
;
CUPSPrinterInfo
(
const
CUPSPrinterInfo
&
)
=
delete
;
CUPSPrinterInfo
(
CUPSPrinterInfo
&
&
)
=
delete
;
}
;
using
PrinterInfoMutex
=
mozilla
:
:
DataMutexBase
<
CUPSPrinterInfo
mozilla
:
:
RecursiveMutex
>
;
~
nsPrinterCUPS
(
)
;
const
char
*
LocalizeMediaName
(
http_t
&
aConnection
cups_size_t
&
aMedia
)
const
;
void
GetPrinterName
(
nsAString
&
aName
)
const
;
bool
Supports
(
const
char
*
aOption
const
char
*
aValue
)
const
;
bool
IsCUPSVersionAtLeast
(
uint64_t
aCUPSMajor
uint64_t
aCUPSMinor
uint64_t
aCUPSPatch
)
const
;
void
TryEnsurePrinterInfo
(
CUPSPrinterInfo
&
aInOutPrinterInfo
http_t
*
const
aConnection
=
CUPS_HTTP_DEFAULT
)
const
;
const
nsCUPSShim
&
mShim
;
nsString
mDisplayName
;
cups_dest_t
*
mPrinter
;
mutable
PrinterInfoMutex
mPrinterInfoMutex
;
}
;
#
endif
