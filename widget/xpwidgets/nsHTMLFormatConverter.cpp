#
include
"
nsHTMLFormatConverter
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsISupportsArray
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsITransferable
.
h
"
#
include
"
nsPrimitiveHelpers
.
h
"
#
include
"
nsIDocumentEncoder
.
h
"
#
include
"
nsContentUtils
.
h
"
nsHTMLFormatConverter
:
:
nsHTMLFormatConverter
(
)
{
}
nsHTMLFormatConverter
:
:
~
nsHTMLFormatConverter
(
)
{
}
NS_IMPL_ISUPPORTS1
(
nsHTMLFormatConverter
nsIFormatConverter
)
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
GetInputDataFlavors
(
nsISupportsArray
*
*
_retval
)
{
if
(
!
_retval
)
return
NS_ERROR_INVALID_ARG
;
nsresult
rv
=
NS_NewISupportsArray
(
_retval
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
rv
=
AddFlavorToList
(
*
_retval
kHTMLMime
)
;
return
rv
;
}
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
GetOutputDataFlavors
(
nsISupportsArray
*
*
_retval
)
{
if
(
!
_retval
)
return
NS_ERROR_INVALID_ARG
;
nsresult
rv
=
NS_NewISupportsArray
(
_retval
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
AddFlavorToList
(
*
_retval
kHTMLMime
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
#
if
NOT_NOW
rv
=
AddFlavorToList
(
*
_retval
kAOLMailMime
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
#
endif
rv
=
AddFlavorToList
(
*
_retval
kUnicodeMime
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
}
return
rv
;
}
nsresult
nsHTMLFormatConverter
:
:
AddFlavorToList
(
nsISupportsArray
*
inList
const
char
*
inFlavor
)
{
nsresult
rv
;
nsCOMPtr
<
nsISupportsCString
>
dataFlavor
=
do_CreateInstance
(
NS_SUPPORTS_CSTRING_CONTRACTID
&
rv
)
;
if
(
dataFlavor
)
{
dataFlavor
-
>
SetData
(
nsDependentCString
(
inFlavor
)
)
;
nsCOMPtr
<
nsISupports
>
genericFlavor
(
do_QueryInterface
(
dataFlavor
)
)
;
inList
-
>
AppendElement
(
genericFlavor
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
CanConvert
(
const
char
*
aFromDataFlavor
const
char
*
aToDataFlavor
bool
*
_retval
)
{
if
(
!
_retval
)
return
NS_ERROR_INVALID_ARG
;
*
_retval
=
false
;
if
(
!
nsCRT
:
:
strcmp
(
aFromDataFlavor
kHTMLMime
)
)
{
if
(
!
nsCRT
:
:
strcmp
(
aToDataFlavor
kHTMLMime
)
)
*
_retval
=
true
;
else
if
(
!
nsCRT
:
:
strcmp
(
aToDataFlavor
kUnicodeMime
)
)
*
_retval
=
true
;
#
if
NOT_NOW
else
if
(
toFlavor
.
Equals
(
kAOLMailMime
)
)
*
_retval
=
true
;
#
endif
}
return
NS_OK
;
}
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
Convert
(
const
char
*
aFromDataFlavor
nsISupports
*
aFromData
PRUint32
aDataLen
const
char
*
aToDataFlavor
nsISupports
*
*
aToData
PRUint32
*
aDataToLen
)
{
if
(
!
aToData
|
|
!
aDataToLen
)
return
NS_ERROR_INVALID_ARG
;
nsresult
rv
=
NS_OK
;
*
aToData
=
nullptr
;
*
aDataToLen
=
0
;
if
(
!
nsCRT
:
:
strcmp
(
aFromDataFlavor
kHTMLMime
)
)
{
nsCAutoString
toFlavor
(
aToDataFlavor
)
;
nsCOMPtr
<
nsISupportsString
>
dataWrapper0
(
do_QueryInterface
(
aFromData
)
)
;
if
(
!
dataWrapper0
)
{
return
NS_ERROR_INVALID_ARG
;
}
nsAutoString
dataStr
;
dataWrapper0
-
>
GetData
(
dataStr
)
;
if
(
toFlavor
.
Equals
(
kHTMLMime
)
|
|
toFlavor
.
Equals
(
kUnicodeMime
)
)
{
nsresult
res
;
if
(
toFlavor
.
Equals
(
kHTMLMime
)
)
{
PRInt32
dataLen
=
dataStr
.
Length
(
)
*
2
;
nsPrimitiveHelpers
:
:
CreatePrimitiveForData
(
toFlavor
.
get
(
)
(
void
*
)
dataStr
.
get
(
)
dataLen
aToData
)
;
if
(
*
aToData
)
*
aDataToLen
=
dataLen
;
}
else
{
nsAutoString
outStr
;
res
=
ConvertFromHTMLToUnicode
(
dataStr
outStr
)
;
if
(
NS_SUCCEEDED
(
res
)
)
{
PRInt32
dataLen
=
outStr
.
Length
(
)
*
2
;
nsPrimitiveHelpers
:
:
CreatePrimitiveForData
(
toFlavor
.
get
(
)
(
void
*
)
outStr
.
get
(
)
dataLen
aToData
)
;
if
(
*
aToData
)
*
aDataToLen
=
dataLen
;
}
}
}
else
if
(
toFlavor
.
Equals
(
kAOLMailMime
)
)
{
nsAutoString
outStr
;
if
(
NS_SUCCEEDED
(
ConvertFromHTMLToAOLMail
(
dataStr
outStr
)
)
)
{
PRInt32
dataLen
=
outStr
.
Length
(
)
*
2
;
nsPrimitiveHelpers
:
:
CreatePrimitiveForData
(
toFlavor
.
get
(
)
(
void
*
)
outStr
.
get
(
)
dataLen
aToData
)
;
if
(
*
aToData
)
*
aDataToLen
=
dataLen
;
}
}
else
{
rv
=
NS_ERROR_FAILURE
;
}
}
else
rv
=
NS_ERROR_FAILURE
;
return
rv
;
}
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
ConvertFromHTMLToUnicode
(
const
nsAutoString
&
aFromStr
nsAutoString
&
aToStr
)
{
return
nsContentUtils
:
:
ConvertToPlainText
(
aFromStr
aToStr
nsIDocumentEncoder
:
:
OutputSelectionOnly
|
nsIDocumentEncoder
:
:
OutputAbsoluteLinks
|
nsIDocumentEncoder
:
:
OutputNoScriptContent
|
nsIDocumentEncoder
:
:
OutputNoFramesContent
0
)
;
}
NS_IMETHODIMP
nsHTMLFormatConverter
:
:
ConvertFromHTMLToAOLMail
(
const
nsAutoString
&
aFromStr
nsAutoString
&
aToStr
)
{
aToStr
.
AssignLiteral
(
"
<
HTML
>
"
)
;
aToStr
.
Append
(
aFromStr
)
;
aToStr
.
AppendLiteral
(
"
<
/
HTML
>
"
)
;
return
NS_OK
;
}
