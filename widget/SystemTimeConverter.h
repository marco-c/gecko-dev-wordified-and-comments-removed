#
ifndef
SystemTimeConverter_h
#
define
SystemTimeConverter_h
#
include
<
limits
>
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
template
<
typename
Time
>
class
SystemTimeConverter
{
public
:
SystemTimeConverter
(
)
:
mReferenceTime
(
Time
(
0
)
)
mReferenceTimeStamp
(
)
kTimeRange
(
std
:
:
numeric_limits
<
Time
>
:
:
max
(
)
)
kTimeHalfRange
(
kTimeRange
/
2
)
{
}
template
<
typename
GetCurrentTimeFunc
>
mozilla
:
:
TimeStamp
GetTimeStampFromSystemTime
(
Time
aTime
GetCurrentTimeFunc
aGetCurrentTimeFunc
)
{
if
(
mReferenceTimeStamp
.
IsNull
(
)
)
{
UpdateReferenceTime
(
aTime
aGetCurrentTimeFunc
)
;
}
TimeStamp
roughlyNow
=
TimeStamp
:
:
NowLoRes
(
)
;
if
(
aTime
<
mReferenceTime
&
&
mReferenceTime
-
aTime
<
kTimeHalfRange
&
&
roughlyNow
-
mReferenceTimeStamp
<
TimeDuration
:
:
FromMilliseconds
(
kTimeHalfRange
)
)
{
UpdateReferenceTime
(
aTime
aGetCurrentTimeFunc
)
;
}
double
timeSinceReference
=
mReferenceTime
<
=
aTime
?
aTime
-
mReferenceTime
:
static_cast
<
double
>
(
kTimeRange
)
+
aTime
-
mReferenceTime
;
TimeStamp
timestamp
=
mReferenceTimeStamp
+
TimeDuration
:
:
FromMilliseconds
(
timeSinceReference
)
;
double
timesWrapped
=
(
roughlyNow
-
mReferenceTimeStamp
)
.
ToMilliseconds
(
)
/
kTimeRange
;
int32_t
cyclesToAdd
=
static_cast
<
int32_t
>
(
timesWrapped
)
;
double
intervalFraction
=
fmod
(
timesWrapped
1
.
0
)
;
if
(
intervalFraction
<
0
.
1
&
&
timeSinceReference
>
kTimeRange
*
0
.
9
)
{
cyclesToAdd
-
-
;
}
else
if
(
intervalFraction
>
0
.
9
&
&
timeSinceReference
<
kTimeRange
*
0
.
1
)
{
cyclesToAdd
+
+
;
}
if
(
cyclesToAdd
>
0
)
{
timestamp
+
=
TimeDuration
:
:
FromMilliseconds
(
kTimeRange
*
cyclesToAdd
)
;
}
return
timestamp
;
}
private
:
template
<
typename
GetCurrentTimeFunc
>
void
UpdateReferenceTime
(
Time
aTime
GetCurrentTimeFunc
aGetCurrentTimeFunc
)
{
mReferenceTime
=
aTime
;
Time
currentTime
=
aGetCurrentTimeFunc
(
)
;
TimeStamp
currentTimeStamp
=
TimeStamp
:
:
Now
(
)
;
double
timeSinceReference
=
aTime
<
=
currentTime
?
currentTime
-
aTime
:
static_cast
<
double
>
(
kTimeRange
)
+
currentTime
-
aTime
;
mReferenceTimeStamp
=
currentTimeStamp
-
TimeDuration
:
:
FromMilliseconds
(
timeSinceReference
)
;
}
Time
mReferenceTime
;
TimeStamp
mReferenceTimeStamp
;
const
Time
kTimeRange
;
const
Time
kTimeHalfRange
;
}
;
}
#
endif
