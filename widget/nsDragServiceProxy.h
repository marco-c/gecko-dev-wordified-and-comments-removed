#
ifndef
NSDRAGSERVICEPROXY_H
#
define
NSDRAGSERVICEPROXY_H
#
include
"
nsBaseDragService
.
h
"
class
nsDragSessionProxy
:
public
nsBaseDragSession
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
nsDragSessionProxy
nsBaseDragSession
)
MOZ_CAN_RUN_SCRIPT
virtual
nsresult
InvokeDragSession
(
nsIWidget
*
aWidget
nsINode
*
aDOMNode
nsIPrincipal
*
aPrincipal
nsIContentSecurityPolicy
*
aCsp
nsICookieJarSettings
*
aCookieJarSettings
nsIArray
*
aTransferableArray
uint32_t
aActionType
nsContentPolicyType
aContentPolicyType
)
override
;
nsresult
InvokeDragSessionImpl
(
nsIWidget
*
aWidget
nsIArray
*
anArrayTransferables
const
mozilla
:
:
Maybe
<
mozilla
:
:
CSSIntRegion
>
&
aRegion
uint32_t
aActionType
)
override
;
void
SetDragTarget
(
mozilla
:
:
dom
:
:
BrowserChild
*
aTarget
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
EndDragSessionImpl
(
bool
aDoneDrag
uint32_t
aKeyModifiers
)
override
;
private
:
~
nsDragSessionProxy
(
)
;
nsWeakPtr
mSourceBrowser
;
nsWeakPtr
mTargetBrowser
;
}
;
class
nsDragServiceProxy
:
public
nsBaseDragService
{
public
:
NS_INLINE_DECL_REFCOUNTING_INHERITED
(
nsDragServiceProxy
nsBaseDragService
)
already_AddRefed
<
nsIDragSession
>
CreateDragSession
(
)
override
;
nsIDragSession
*
StartDragSession
(
nsISupports
*
aWidgetProvider
)
override
;
NS_IMETHOD
GetCurrentSession
(
nsISupports
*
aWidgetProvider
nsIDragSession
*
*
aSession
)
override
;
private
:
virtual
~
nsDragServiceProxy
(
)
;
}
;
#
endif
