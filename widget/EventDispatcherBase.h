#
ifndef
mozilla_widget_EventDispatcherBase_h
#
define
mozilla_widget_EventDispatcherBase_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
EventTargetAndLockCapability
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIGeckoViewBridge
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTObserverArray
.
h
"
namespace
mozilla
:
:
widget
{
class
EventDispatcherBase
:
public
nsIGeckoViewEventDispatcher
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIGECKOVIEWEVENTDISPATCHER
EventDispatcherBase
(
)
=
default
;
bool
HasGeckoListener
(
const
nsAString
&
aEvent
)
MOZ_EXCLUDES
(
mLock
.
Lock
(
)
)
;
nsresult
DispatchToGecko
(
JSContext
*
aCx
const
nsAString
&
aEvent
JS
:
:
Handle
<
JS
:
:
Value
>
aData
nsIGeckoViewEventCallback
*
aCallback
)
MOZ_REQUIRES
(
sMainThreadCapability
)
;
virtual
bool
HasEmbedderListener
(
const
nsAString
&
aEvent
)
MOZ_REQUIRES
(
sMainThreadCapability
)
=
0
;
virtual
nsresult
DispatchToEmbedder
(
JSContext
*
aCx
const
nsAString
&
aEvent
JS
:
:
Handle
<
JS
:
:
Value
>
aData
nsIGeckoViewEventCallback
*
aCallback
)
MOZ_REQUIRES
(
sMainThreadCapability
)
=
0
;
template
<
class
T
>
nsresult
Dispatch
(
const
nsAString
&
aEvent
T
&
&
aData
nsIGeckoViewEventCallback
*
aCallback
=
nullptr
)
MOZ_REQUIRES
(
sMainThreadCapability
)
{
dom
:
:
AutoJSAPI
jsapi
;
NS_ENSURE_TRUE
(
jsapi
.
Init
(
xpc
:
:
PrivilegedJunkScope
(
)
)
NS_ERROR_FAILURE
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
data
(
jsapi
.
cx
(
)
)
;
if
(
!
dom
:
:
ToJSValue
(
jsapi
.
cx
(
)
std
:
:
forward
<
T
>
(
aData
)
&
data
)
)
{
return
NS_ERROR_FAILURE
;
}
return
DispatchInternal
(
jsapi
.
cx
(
)
aEvent
data
aCallback
)
;
}
protected
:
virtual
~
EventDispatcherBase
(
)
=
default
;
private
:
void
Destroy
(
)
;
using
ListenersList
=
nsAutoTObserverArray
<
nsCOMPtr
<
nsIGeckoViewEventListener
>
1
>
;
using
ListenersMap
=
nsClassHashtable
<
nsStringHashKey
ListenersList
>
;
using
IterateEventsCallback
=
void
(
EventDispatcherBase
:
:
*
)
(
const
nsAString
&
nsIGeckoViewEventListener
*
)
;
nsresult
IterateEvents
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aEvents
IterateEventsCallback
aCallback
nsIGeckoViewEventListener
*
aListener
)
MOZ_REQUIRES
(
sMainThreadCapability
)
;
void
RegisterEventLocked
(
const
nsAString
&
nsIGeckoViewEventListener
*
)
MOZ_REQUIRES
(
mLock
)
;
void
UnregisterEventLocked
(
const
nsAString
&
nsIGeckoViewEventListener
*
)
MOZ_REQUIRES
(
mLock
)
;
nsresult
DispatchInternal
(
JSContext
*
aCx
const
nsAString
&
aEvent
JS
:
:
Handle
<
JS
:
:
Value
>
aData
nsIGeckoViewEventCallback
*
aCallback
=
nullptr
)
MOZ_REQUIRES
(
sMainThreadCapability
)
;
nsresult
DispatchToGeckoInternal
(
ListenersList
*
list
const
nsAString
&
aEvent
JS
:
:
Handle
<
JS
:
:
Value
>
aData
nsIGeckoViewEventCallback
*
aCallback
)
MOZ_REQUIRES
(
sMainThreadCapability
)
;
MainThreadAndLockCapability
<
Mutex
>
mLock
{
"
mozilla
:
:
widget
:
:
EventDispatcherBase
"
}
;
ListenersMap
mListenersMap
MOZ_GUARDED_BY
(
mLock
)
;
}
;
}
#
endif
