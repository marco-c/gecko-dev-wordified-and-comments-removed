#
ifndef
nsPrinterListBase_h__
#
define
nsPrinterListBase_h__
#
include
"
nsIPrinterList
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsString
.
h
"
class
nsPrinterListBase
:
public
nsIPrinterList
{
public
:
using
Promise
=
mozilla
:
:
dom
:
:
Promise
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsPrinterListBase
)
NS_IMETHOD
GetSystemDefaultPrinterName
(
nsAString
&
aName
)
final
{
return
SystemDefaultPrinterName
(
aName
)
;
}
NS_IMETHOD
GetPrinters
(
JSContext
*
Promise
*
*
)
final
;
NS_IMETHOD
GetPrinterByName
(
const
nsAString
&
aPrinterName
JSContext
*
aCx
Promise
*
*
aResult
)
final
;
NS_IMETHOD
GetPrinterBySystemName
(
const
nsAString
&
aPrinterName
JSContext
*
aCx
Promise
*
*
aResult
)
final
;
NS_IMETHOD
GetNamedOrDefaultPrinter
(
const
nsAString
&
aPrinterName
JSContext
*
aCx
Promise
*
*
aResult
)
final
;
NS_IMETHOD
GetFallbackPaperList
(
JSContext
*
Promise
*
*
)
final
;
struct
PrinterInfo
{
nsString
mName
;
void
*
mCupsHandle
=
nullptr
;
}
;
virtual
nsTArray
<
PrinterInfo
>
Printers
(
)
const
=
0
;
virtual
RefPtr
<
nsIPrinter
>
CreatePrinter
(
PrinterInfo
)
const
=
0
;
mozilla
:
:
Maybe
<
PrinterInfo
>
NamedOrDefaultPrinter
(
nsString
aName
)
const
;
nsPrinterListBase
(
const
nsPrinterListBase
&
)
=
delete
;
nsPrinterListBase
(
nsPrinterListBase
&
&
)
=
delete
;
protected
:
nsPrinterListBase
(
)
;
virtual
~
nsPrinterListBase
(
)
;
virtual
mozilla
:
:
Maybe
<
PrinterInfo
>
PrinterByName
(
nsString
aName
)
const
=
0
;
virtual
mozilla
:
:
Maybe
<
PrinterInfo
>
PrinterBySystemName
(
nsString
aName
)
const
=
0
;
virtual
nsresult
SystemDefaultPrinterName
(
nsAString
&
)
const
=
0
;
nsTArray
<
RefPtr
<
nsPaper
>
>
FallbackPaperList
(
)
const
;
void
EnsureCommonPaperInfo
(
JSContext
*
aCx
)
;
RefPtr
<
Promise
>
mPrintersPromise
;
RefPtr
<
const
mozilla
:
:
CommonPaperInfoArray
>
mCommonPaperInfo
;
}
;
#
endif
