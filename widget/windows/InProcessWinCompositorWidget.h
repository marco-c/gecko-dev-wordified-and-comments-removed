#
ifndef
widget_windows_InProcessWinCompositorWidget_h
#
define
widget_windows_InProcessWinCompositorWidget_h
#
include
"
WinCompositorWidget
.
h
"
class
nsWindow
;
class
gfxASurface
;
namespace
mozilla
{
namespace
widget
{
class
InProcessWinCompositorWidget
final
:
public
WinCompositorWidget
public
PlatformCompositorWidgetDelegate
{
public
:
InProcessWinCompositorWidget
(
const
WinCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
nsWindow
*
aWindow
)
;
bool
PreRender
(
WidgetRenderingContext
*
)
override
;
void
PostRender
(
WidgetRenderingContext
*
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
override
;
void
EndRemoteDrawing
(
)
override
;
bool
NeedsToDeferEndRemoteDrawing
(
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
gfx
:
:
IntRect
&
aRect
bool
*
aOutIsCleared
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
override
;
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
override
;
CompositorWidgetDelegate
*
AsDelegate
(
)
override
{
return
this
;
}
bool
IsHidden
(
)
const
override
;
void
EnterPresentLock
(
)
override
;
void
LeavePresentLock
(
)
override
;
void
OnDestroyWindow
(
)
override
;
bool
OnWindowResize
(
const
LayoutDeviceIntSize
&
aSize
)
override
;
void
OnWindowModeChange
(
nsSizeMode
aSizeMode
)
override
;
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
override
;
void
ClearTransparentWindow
(
)
override
;
bool
RedrawTransparentWindow
(
)
;
RefPtr
<
gfxASurface
>
EnsureTransparentSurface
(
)
;
HDC
GetTransparentDC
(
)
const
{
return
mMemoryDC
;
}
mozilla
:
:
Mutex
&
GetTransparentSurfaceLock
(
)
{
return
mTransparentSurfaceLock
;
}
bool
HasGlass
(
)
const
override
;
void
ObserveVsync
(
VsyncObserver
*
aObserver
)
override
;
nsIWidget
*
RealWidget
(
)
override
;
void
UpdateCompositorWnd
(
const
HWND
aCompositorWnd
const
HWND
aParentWnd
)
override
{
}
void
SetRootLayerTreeID
(
const
layers
:
:
LayersId
&
aRootLayerTreeId
)
override
{
}
private
:
HDC
GetWindowSurface
(
)
;
void
FreeWindowSurface
(
HDC
dc
)
;
void
CreateTransparentSurface
(
const
gfx
:
:
IntSize
&
aSize
)
;
nsWindow
*
mWindow
;
HWND
mWnd
;
gfx
:
:
CriticalSection
mPresentLock
;
mozilla
:
:
Mutex
mTransparentSurfaceLock
;
mozilla
:
:
Atomic
<
nsTransparencyMode
MemoryOrdering
:
:
Relaxed
>
mTransparencyMode
;
RefPtr
<
gfxASurface
>
mTransparentSurface
;
HDC
mMemoryDC
;
HDC
mCompositeDC
;
uint8_t
*
mLockedBackBufferData
;
bool
mNotDeferEndRemoteDrawing
;
}
;
}
}
#
endif
