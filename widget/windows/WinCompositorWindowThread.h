#
ifndef
widget_windows_WinCompositorWindowThread_h
#
define
widget_windows_WinCompositorWindowThread_h
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
namespace
mozilla
{
namespace
layers
{
class
SynchronousTask
;
}
namespace
widget
{
class
WinCompositorWindowThread
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
WinCompositorWindowThread
)
public
:
static
WinCompositorWindowThread
*
Get
(
)
;
static
void
Start
(
)
;
static
void
ShutDown
(
)
;
static
MessageLoop
*
Loop
(
)
;
static
bool
IsInCompositorWindowThread
(
)
;
static
HWND
CreateCompositorWindow
(
HWND
aParentWnd
)
;
static
void
DestroyCompositorWindow
(
HWND
aWnd
)
;
private
:
explicit
WinCompositorWindowThread
(
base
:
:
Thread
*
aThread
)
;
~
WinCompositorWindowThread
(
)
;
void
ShutDownTask
(
layers
:
:
SynchronousTask
*
aTask
)
;
base
:
:
Thread
*
const
mThread
;
}
;
}
}
#
endif
