#
ifndef
widget_windows_WinCompositorWindowThread_h
#
define
widget_windows_WinCompositorWindowThread_h
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
message_loop
.
h
"
namespace
mozilla
{
namespace
layers
{
class
SynchronousTask
;
}
namespace
widget
{
struct
WinCompositorWnds
{
HWND
mCompositorWnd
;
HWND
mInitialParentWnd
;
WinCompositorWnds
(
HWND
aCompositorWnd
HWND
aInitialParentWnd
)
:
mCompositorWnd
(
aCompositorWnd
)
mInitialParentWnd
(
aInitialParentWnd
)
{
}
}
;
class
WinCompositorWindowThread
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_DELETE_ON_MAIN_THREAD
(
WinCompositorWindowThread
)
public
:
static
WinCompositorWindowThread
*
Get
(
)
;
static
void
Start
(
)
;
static
void
ShutDown
(
)
;
static
MessageLoop
*
Loop
(
)
;
static
bool
IsInCompositorWindowThread
(
)
;
static
WinCompositorWnds
CreateCompositorWindow
(
)
;
static
void
DestroyCompositorWindow
(
WinCompositorWnds
aWnds
)
;
private
:
explicit
WinCompositorWindowThread
(
base
:
:
Thread
*
aThread
)
;
~
WinCompositorWindowThread
(
)
;
void
ShutDownTask
(
layers
:
:
SynchronousTask
*
aTask
)
;
base
:
:
Thread
*
const
mThread
;
}
;
}
}
#
endif
