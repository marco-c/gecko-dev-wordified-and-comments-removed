#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTargetPDF
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTargetWindows
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsDeviceContextSpecWin
.
h
"
#
include
"
prmem
.
h
"
#
include
<
winspool
.
h
>
#
include
<
tchar
.
h
>
#
include
"
nsIWidget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIPrintSettingsWin
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsStringEnumerator
.
h
"
#
include
"
gfxWindowsSurface
.
h
"
#
include
"
nsIFileStreams
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIFilePicker
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
define
NS_ERROR_GFX_PRINTER_BUNDLE_URL
"
chrome
:
/
/
global
/
locale
/
printing
.
properties
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
PRLogModuleInfo
*
kWidgetPrintingLogMod
=
PR_NewLogModule
(
"
printing
-
widget
"
)
;
#
define
PR_PL
(
_p1
)
MOZ_LOG
(
kWidgetPrintingLogMod
mozilla
:
:
LogLevel
:
:
Debug
_p1
)
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
static
const
wchar_t
kDriverName
[
]
=
L
"
WINSPOOL
"
;
class
GlobalPrinters
{
public
:
static
GlobalPrinters
*
GetInstance
(
)
{
return
&
mGlobalPrinters
;
}
~
GlobalPrinters
(
)
{
FreeGlobalPrinters
(
)
;
}
void
FreeGlobalPrinters
(
)
;
bool
PrintersAreAllocated
(
)
{
return
mPrinters
!
=
nullptr
;
}
LPWSTR
GetItemFromList
(
int32_t
aInx
)
{
return
mPrinters
?
mPrinters
-
>
ElementAt
(
aInx
)
:
nullptr
;
}
nsresult
EnumeratePrinterList
(
)
;
void
GetDefaultPrinterName
(
nsString
&
aDefaultPrinterName
)
;
uint32_t
GetNumPrinters
(
)
{
return
mPrinters
?
mPrinters
-
>
Length
(
)
:
0
;
}
protected
:
GlobalPrinters
(
)
{
}
nsresult
EnumerateNativePrinters
(
)
;
void
ReallocatePrinters
(
)
;
static
GlobalPrinters
mGlobalPrinters
;
static
nsTArray
<
LPWSTR
>
*
mPrinters
;
}
;
GlobalPrinters
GlobalPrinters
:
:
mGlobalPrinters
;
nsTArray
<
LPWSTR
>
*
GlobalPrinters
:
:
mPrinters
=
nullptr
;
struct
AutoFreeGlobalPrinters
{
~
AutoFreeGlobalPrinters
(
)
{
GlobalPrinters
:
:
GetInstance
(
)
-
>
FreeGlobalPrinters
(
)
;
}
}
;
nsDeviceContextSpecWin
:
:
nsDeviceContextSpecWin
(
)
{
mDriverName
=
nullptr
;
mDeviceName
=
nullptr
;
mDevMode
=
nullptr
;
}
NS_IMPL_ISUPPORTS
(
nsDeviceContextSpecWin
nsIDeviceContextSpec
)
nsDeviceContextSpecWin
:
:
~
nsDeviceContextSpecWin
(
)
{
SetDeviceName
(
nullptr
)
;
SetDriverName
(
nullptr
)
;
SetDevMode
(
nullptr
)
;
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
(
do_QueryInterface
(
mPrintSettings
)
)
;
if
(
psWin
)
{
psWin
-
>
SetDeviceName
(
nullptr
)
;
psWin
-
>
SetDriverName
(
nullptr
)
;
psWin
-
>
SetDevMode
(
nullptr
)
;
}
GlobalPrinters
:
:
GetInstance
(
)
-
>
FreeGlobalPrinters
(
)
;
}
static
char16_t
*
GetDefaultPrinterNameFromGlobalPrinters
(
)
{
nsAutoString
printerName
;
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetDefaultPrinterName
(
printerName
)
;
return
ToNewUnicode
(
printerName
)
;
}
NS_IMETHODIMP
nsDeviceContextSpecWin
:
:
Init
(
nsIWidget
*
aWidget
nsIPrintSettings
*
aPrintSettings
bool
aIsPrintPreview
)
{
mPrintSettings
=
aPrintSettings
;
nsresult
rv
=
NS_ERROR_GFX_PRINTER_NO_PRINTER_AVAILABLE
;
if
(
aPrintSettings
)
{
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
(
do_QueryInterface
(
aPrintSettings
)
)
;
if
(
psWin
)
{
char16_t
*
deviceName
;
char16_t
*
driverName
;
psWin
-
>
GetDeviceName
(
&
deviceName
)
;
psWin
-
>
GetDriverName
(
&
driverName
)
;
LPDEVMODEW
devMode
;
psWin
-
>
GetDevMode
(
&
devMode
)
;
if
(
deviceName
&
&
driverName
&
&
devMode
)
{
if
(
devMode
-
>
dmFields
&
DM_SCALE
)
{
double
scale
=
double
(
devMode
-
>
dmScale
)
/
100
.
0f
;
if
(
scale
!
=
1
.
0
)
{
aPrintSettings
-
>
SetScaling
(
scale
)
;
devMode
-
>
dmScale
=
100
;
}
}
SetDeviceName
(
deviceName
)
;
SetDriverName
(
driverName
)
;
SetDevMode
(
devMode
)
;
free
(
deviceName
)
;
free
(
driverName
)
;
return
NS_OK
;
}
else
{
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
Init
-
deviceName
/
driverName
/
devMode
was
NULL
!
\
n
"
)
)
;
if
(
deviceName
)
free
(
deviceName
)
;
if
(
driverName
)
free
(
driverName
)
;
if
(
devMode
)
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
devMode
)
;
}
}
}
else
{
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
Init
-
aPrintSettingswas
NULL
!
\
n
"
)
)
;
}
char16_t
*
printerName
=
nullptr
;
if
(
mPrintSettings
)
{
mPrintSettings
-
>
GetPrinterName
(
&
printerName
)
;
mPrintSettings
-
>
GetOutputFormat
(
&
mOutputFormat
)
;
}
if
(
!
printerName
|
|
(
printerName
&
&
!
*
printerName
)
)
{
printerName
=
GetDefaultPrinterNameFromGlobalPrinters
(
)
;
}
NS_ASSERTION
(
printerName
"
We
have
to
have
a
printer
name
"
)
;
if
(
!
printerName
|
|
!
*
printerName
)
return
rv
;
return
GetDataFromPrinter
(
printerName
mPrintSettings
)
;
}
static
void
CleanAndCopyString
(
wchar_t
*
&
aStr
const
wchar_t
*
aNewStr
)
{
if
(
aStr
!
=
nullptr
)
{
if
(
aNewStr
!
=
nullptr
&
&
wcslen
(
aStr
)
>
wcslen
(
aNewStr
)
)
{
wcscpy
(
aStr
aNewStr
)
;
return
;
}
else
{
PR_Free
(
aStr
)
;
aStr
=
nullptr
;
}
}
if
(
nullptr
!
=
aNewStr
)
{
aStr
=
(
wchar_t
*
)
PR_Malloc
(
sizeof
(
wchar_t
)
*
(
wcslen
(
aNewStr
)
+
1
)
)
;
wcscpy
(
aStr
aNewStr
)
;
}
}
already_AddRefed
<
PrintTarget
>
nsDeviceContextSpecWin
:
:
MakePrintTarget
(
)
{
NS_ASSERTION
(
mDevMode
"
DevMode
can
'
t
be
NULL
here
"
)
;
if
(
mOutputFormat
=
=
nsIPrintSettings
:
:
kOutputFormatPDF
)
{
nsXPIDLString
filename
;
mPrintSettings
-
>
GetToFileName
(
getter_Copies
(
filename
)
)
;
double
width
height
;
mPrintSettings
-
>
GetEffectivePageSize
(
&
width
&
height
)
;
if
(
width
<
=
0
|
|
height
<
=
0
)
{
return
nullptr
;
}
width
/
=
TWIPS_PER_POINT_FLOAT
;
height
/
=
TWIPS_PER_POINT_FLOAT
;
nsCOMPtr
<
nsIFile
>
file
=
do_CreateInstance
(
"
mozilla
.
org
/
file
/
local
;
1
"
)
;
nsresult
rv
=
file
-
>
InitWithPath
(
filename
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIFileOutputStream
>
stream
=
do_CreateInstance
(
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
)
;
rv
=
stream
-
>
Init
(
file
-
1
-
1
0
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
PrintTargetPDF
:
:
CreateOrNull
(
stream
IntSize
(
width
height
)
)
;
}
if
(
mDevMode
)
{
NS_WARN_IF_FALSE
(
mDriverName
"
No
driver
!
"
)
;
HDC
dc
=
:
:
CreateDCW
(
mDriverName
mDeviceName
nullptr
mDevMode
)
;
if
(
!
dc
)
{
gfxCriticalError
(
gfxCriticalError
:
:
DefaultOptions
(
false
)
)
<
<
"
Failed
to
create
device
context
in
GetSurfaceForPrinter
"
;
return
nullptr
;
}
return
PrintTargetWindows
:
:
CreateOrNull
(
dc
)
;
}
return
nullptr
;
}
float
nsDeviceContextSpecWin
:
:
GetDPI
(
)
{
return
mOutputFormat
=
=
nsIPrintSettings
:
:
kOutputFormatPDF
?
72
.
0f
:
144
.
0f
;
}
float
nsDeviceContextSpecWin
:
:
GetPrintingScale
(
)
{
MOZ_ASSERT
(
mPrintSettings
)
;
if
(
mOutputFormat
=
=
nsIPrintSettings
:
:
kOutputFormatPDF
)
{
return
1
.
0f
;
}
int32_t
resolution
;
mPrintSettings
-
>
GetResolution
(
&
resolution
)
;
return
float
(
resolution
)
/
GetDPI
(
)
;
}
void
nsDeviceContextSpecWin
:
:
SetDeviceName
(
char16ptr_t
aDeviceName
)
{
CleanAndCopyString
(
mDeviceName
aDeviceName
)
;
}
void
nsDeviceContextSpecWin
:
:
SetDriverName
(
char16ptr_t
aDriverName
)
{
CleanAndCopyString
(
mDriverName
aDriverName
)
;
}
void
nsDeviceContextSpecWin
:
:
SetDevMode
(
LPDEVMODEW
aDevMode
)
{
if
(
mDevMode
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
}
mDevMode
=
aDevMode
;
}
void
nsDeviceContextSpecWin
:
:
GetDevMode
(
LPDEVMODEW
&
aDevMode
)
{
aDevMode
=
mDevMode
;
}
#
define
DISPLAY_LAST_ERROR
nsresult
nsDeviceContextSpecWin
:
:
GetDataFromPrinter
(
char16ptr_t
aName
nsIPrintSettings
*
aPS
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
if
(
!
GlobalPrinters
:
:
GetInstance
(
)
-
>
PrintersAreAllocated
(
)
)
{
rv
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
EnumeratePrinterList
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
GetDataFromPrinter
-
Couldn
'
t
enumerate
printers
!
\
n
"
)
)
;
DISPLAY_LAST_ERROR
}
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
HANDLE
hPrinter
=
nullptr
;
wchar_t
*
name
=
(
wchar_t
*
)
aName
;
BOOL
status
=
:
:
OpenPrinterW
(
name
&
hPrinter
nullptr
)
;
if
(
status
)
{
LPDEVMODEW
pDevMode
;
DWORD
dwNeeded
dwRet
;
dwNeeded
=
:
:
DocumentPropertiesW
(
nullptr
hPrinter
name
nullptr
nullptr
0
)
;
pDevMode
=
(
LPDEVMODEW
)
:
:
HeapAlloc
(
:
:
GetProcessHeap
(
)
HEAP_ZERO_MEMORY
dwNeeded
)
;
if
(
!
pDevMode
)
return
NS_ERROR_FAILURE
;
dwRet
=
DocumentPropertiesW
(
nullptr
hPrinter
name
pDevMode
nullptr
DM_OUT_BUFFER
)
;
if
(
dwRet
=
=
IDOK
&
&
aPS
)
{
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
=
do_QueryInterface
(
aPS
)
;
MOZ_ASSERT
(
psWin
)
;
psWin
-
>
CopyToNative
(
pDevMode
)
;
dwRet
=
:
:
DocumentPropertiesW
(
nullptr
hPrinter
name
pDevMode
pDevMode
DM_IN_BUFFER
|
DM_OUT_BUFFER
)
;
if
(
dwRet
=
=
IDOK
)
{
nsAutoHDC
printerDC
(
:
:
CreateICW
(
kDriverName
aName
nullptr
pDevMode
)
)
;
if
(
NS_WARN_IF
(
!
printerDC
)
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
pDevMode
)
;
:
:
ClosePrinter
(
hPrinter
)
;
return
NS_ERROR_FAILURE
;
}
psWin
-
>
CopyFromNative
(
printerDC
pDevMode
)
;
}
}
if
(
dwRet
!
=
IDOK
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
pDevMode
)
;
:
:
ClosePrinter
(
hPrinter
)
;
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
GetDataFromPrinter
-
DocumentProperties
call
failed
code
:
%
d
/
0x
%
x
\
n
"
dwRet
dwRet
)
)
;
DISPLAY_LAST_ERROR
return
NS_ERROR_FAILURE
;
}
SetDevMode
(
pDevMode
)
;
SetDeviceName
(
aName
)
;
SetDriverName
(
kDriverName
)
;
:
:
ClosePrinter
(
hPrinter
)
;
rv
=
NS_OK
;
}
else
{
rv
=
NS_ERROR_GFX_PRINTER_NAME_NOT_FOUND
;
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
GetDataFromPrinter
-
Couldn
'
t
open
printer
:
[
%
s
]
\
n
"
NS_ConvertUTF16toUTF8
(
aName
)
.
get
(
)
)
)
;
DISPLAY_LAST_ERROR
}
return
rv
;
}
nsPrinterEnumeratorWin
:
:
nsPrinterEnumeratorWin
(
)
{
}
nsPrinterEnumeratorWin
:
:
~
nsPrinterEnumeratorWin
(
)
{
}
NS_IMPL_ISUPPORTS
(
nsPrinterEnumeratorWin
nsIPrinterEnumerator
)
NS_IMETHODIMP
nsPrinterEnumeratorWin
:
:
GetDefaultPrinterName
(
char16_t
*
*
aDefaultPrinterName
)
{
NS_ENSURE_ARG_POINTER
(
aDefaultPrinterName
)
;
*
aDefaultPrinterName
=
GetDefaultPrinterNameFromGlobalPrinters
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterEnumeratorWin
:
:
InitPrintSettingsFromPrinter
(
const
char16_t
*
aPrinterName
nsIPrintSettings
*
aPrintSettings
)
{
NS_ENSURE_ARG_POINTER
(
aPrinterName
)
;
NS_ENSURE_ARG_POINTER
(
aPrintSettings
)
;
if
(
!
*
aPrinterName
)
{
return
NS_OK
;
}
RefPtr
<
nsDeviceContextSpecWin
>
devSpecWin
=
new
nsDeviceContextSpecWin
(
)
;
if
(
!
devSpecWin
)
return
NS_ERROR_OUT_OF_MEMORY
;
if
(
NS_FAILED
(
GlobalPrinters
:
:
GetInstance
(
)
-
>
EnumeratePrinterList
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
AutoFreeGlobalPrinters
autoFreeGlobalPrinters
;
bool
initializedFromPrefs
;
nsresult
rv
=
aPrintSettings
-
>
GetIsInitializedFromPrefs
(
&
initializedFromPrefs
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
initializedFromPrefs
)
{
return
devSpecWin
-
>
GetDataFromPrinter
(
aPrinterName
aPrintSettings
)
;
}
devSpecWin
-
>
GetDataFromPrinter
(
aPrinterName
)
;
LPDEVMODEW
devmode
;
devSpecWin
-
>
GetDevMode
(
devmode
)
;
if
(
NS_WARN_IF
(
!
devmode
)
)
{
return
NS_ERROR_FAILURE
;
}
aPrintSettings
-
>
SetPrinterName
(
aPrinterName
)
;
char16ptr_t
printerName
=
aPrinterName
;
HDC
dc
=
:
:
CreateICW
(
kDriverName
printerName
nullptr
devmode
)
;
if
(
NS_WARN_IF
(
!
dc
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
=
do_QueryInterface
(
aPrintSettings
)
;
MOZ_ASSERT
(
psWin
)
;
psWin
-
>
CopyFromNative
(
dc
devmode
)
;
:
:
DeleteDC
(
dc
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterEnumeratorWin
:
:
GetPrinterNameList
(
nsIStringEnumerator
*
*
aPrinterNameList
)
{
NS_ENSURE_ARG_POINTER
(
aPrinterNameList
)
;
*
aPrinterNameList
=
nullptr
;
nsresult
rv
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
EnumeratePrinterList
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
GetPrinterNameList
-
Couldn
'
t
enumerate
printers
!
\
n
"
)
)
;
return
rv
;
}
uint32_t
numPrinters
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetNumPrinters
(
)
;
nsTArray
<
nsString
>
*
printers
=
new
nsTArray
<
nsString
>
(
numPrinters
)
;
if
(
!
printers
)
return
NS_ERROR_OUT_OF_MEMORY
;
nsString
*
names
=
printers
-
>
AppendElements
(
numPrinters
)
;
for
(
uint32_t
printerInx
=
0
;
printerInx
<
numPrinters
;
+
+
printerInx
)
{
LPWSTR
name
=
GlobalPrinters
:
:
GetInstance
(
)
-
>
GetItemFromList
(
printerInx
)
;
names
[
printerInx
]
.
Assign
(
name
)
;
}
return
NS_NewAdoptingStringEnumerator
(
aPrinterNameList
printers
)
;
}
void
GlobalPrinters
:
:
ReallocatePrinters
(
)
{
if
(
PrintersAreAllocated
(
)
)
{
FreeGlobalPrinters
(
)
;
}
mPrinters
=
new
nsTArray
<
LPWSTR
>
(
)
;
NS_ASSERTION
(
mPrinters
"
Printers
Array
is
NULL
!
"
)
;
}
void
GlobalPrinters
:
:
FreeGlobalPrinters
(
)
{
if
(
mPrinters
!
=
nullptr
)
{
for
(
uint32_t
i
=
0
;
i
<
mPrinters
-
>
Length
(
)
;
i
+
+
)
{
free
(
mPrinters
-
>
ElementAt
(
i
)
)
;
}
delete
mPrinters
;
mPrinters
=
nullptr
;
}
}
nsresult
GlobalPrinters
:
:
EnumerateNativePrinters
(
)
{
nsresult
rv
=
NS_ERROR_GFX_PRINTER_NO_PRINTER_AVAILABLE
;
PR_PL
(
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
)
;
PR_PL
(
(
"
EnumerateNativePrinters
\
n
"
)
)
;
WCHAR
szDefaultPrinterName
[
1024
]
;
DWORD
status
=
GetProfileStringW
(
L
"
devices
"
0
L
"
"
szDefaultPrinterName
ArrayLength
(
szDefaultPrinterName
)
)
;
if
(
status
>
0
)
{
DWORD
count
=
0
;
LPWSTR
sPtr
=
szDefaultPrinterName
;
LPWSTR
ePtr
=
szDefaultPrinterName
+
status
;
LPWSTR
prvPtr
=
sPtr
;
while
(
sPtr
<
ePtr
)
{
if
(
*
sPtr
=
=
0
)
{
LPWSTR
name
=
wcsdup
(
prvPtr
)
;
mPrinters
-
>
AppendElement
(
name
)
;
PR_PL
(
(
"
Printer
Name
:
%
s
\
n
"
prvPtr
)
)
;
prvPtr
=
sPtr
+
1
;
count
+
+
;
}
sPtr
+
+
;
}
rv
=
NS_OK
;
}
PR_PL
(
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
)
;
return
rv
;
}
void
GlobalPrinters
:
:
GetDefaultPrinterName
(
nsString
&
aDefaultPrinterName
)
{
aDefaultPrinterName
.
Truncate
(
)
;
WCHAR
szDefaultPrinterName
[
1024
]
;
DWORD
status
=
GetProfileStringW
(
L
"
windows
"
L
"
device
"
0
szDefaultPrinterName
ArrayLength
(
szDefaultPrinterName
)
)
;
if
(
status
>
0
)
{
WCHAR
comma
=
'
'
;
LPWSTR
sPtr
=
szDefaultPrinterName
;
while
(
*
sPtr
!
=
comma
&
&
*
sPtr
!
=
0
)
sPtr
+
+
;
if
(
*
sPtr
=
=
comma
)
{
*
sPtr
=
0
;
}
aDefaultPrinterName
=
szDefaultPrinterName
;
}
else
{
aDefaultPrinterName
=
EmptyString
(
)
;
}
PR_PL
(
(
"
DEFAULT
PRINTER
[
%
s
]
\
n
"
aDefaultPrinterName
.
get
(
)
)
)
;
}
nsresult
GlobalPrinters
:
:
EnumeratePrinterList
(
)
{
ReallocatePrinters
(
)
;
nsresult
rv
=
EnumerateNativePrinters
(
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
nsAutoString
defPrinterName
;
GetDefaultPrinterName
(
defPrinterName
)
;
if
(
!
defPrinterName
.
IsEmpty
(
)
)
{
for
(
uint32_t
i
=
0
;
i
<
mPrinters
-
>
Length
(
)
;
i
+
+
)
{
LPWSTR
name
=
mPrinters
-
>
ElementAt
(
i
)
;
if
(
defPrinterName
.
Equals
(
name
)
)
{
if
(
i
>
0
)
{
LPWSTR
ptr
=
mPrinters
-
>
ElementAt
(
0
)
;
mPrinters
-
>
ElementAt
(
0
)
=
name
;
mPrinters
-
>
ElementAt
(
i
)
=
ptr
;
}
break
;
}
}
}
if
(
!
PrintersAreAllocated
(
)
)
{
PR_PL
(
(
"
*
*
*
*
*
nsDeviceContextSpecWin
:
:
EnumeratePrinterList
-
Printers
aren
t
allocated
\
n
"
)
)
;
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
