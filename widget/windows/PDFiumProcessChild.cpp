#
include
"
PDFiumProcessChild
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
endif
using
mozilla
:
:
ipc
:
:
IOThreadChild
;
namespace
mozilla
{
namespace
widget
{
PDFiumProcessChild
:
:
PDFiumProcessChild
(
ProcessId
aParentPid
)
:
ProcessChild
(
aParentPid
)
#
if
defined
(
MOZ_SANDBOX
)
mPDFium
(
nullptr
)
#
endif
{
}
PDFiumProcessChild
:
:
~
PDFiumProcessChild
(
)
{
#
if
defined
(
MOZ_SANDBOX
)
if
(
mPDFium
)
{
PR_UnloadLibrary
(
mPDFium
)
;
}
#
endif
}
bool
PDFiumProcessChild
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
BackgroundHangMonitor
:
:
Startup
(
)
;
#
if
defined
(
MOZ_SANDBOX
)
PRLibSpec
libSpec
;
libSpec
.
type
=
PR_LibSpec_PathnameU
;
libSpec
.
value
.
pathname_u
=
char16ptr_t
(
u
"
pdfium
.
dll
"
)
;
mPDFium
=
PR_LoadLibraryWithFlags
(
libSpec
0
)
;
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
endif
mPDFiumActor
.
Init
(
ParentPid
(
)
IOThreadChild
:
:
message_loop
(
)
IOThreadChild
:
:
channel
(
)
)
;
return
true
;
}
void
PDFiumProcessChild
:
:
CleanUp
(
)
{
BackgroundHangMonitor
:
:
Shutdown
(
)
;
}
}
}
