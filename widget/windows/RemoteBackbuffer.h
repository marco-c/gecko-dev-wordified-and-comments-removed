#
ifndef
widget_windows_RemoteBackbuffer_h
#
define
widget_windows_RemoteBackbuffer_h
#
include
<
thread
>
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
namespace
widget
{
namespace
remote_backbuffer
{
struct
IpcRect
;
struct
SharedData
;
struct
BorrowResponseData
;
struct
PresentRequestData
;
struct
PresentResponseData
;
class
SharedImage
;
class
PresentableSharedImage
;
class
Provider
{
public
:
Provider
(
)
;
~
Provider
(
)
;
bool
Initialize
(
HWND
aWindowHandle
DWORD
aTargetProcessId
nsTransparencyMode
aTransparencyMode
)
;
Maybe
<
RemoteBackbufferHandles
>
CreateRemoteHandles
(
)
;
void
UpdateTransparencyMode
(
nsTransparencyMode
aTransparencyMode
)
;
Provider
(
const
Provider
&
)
=
delete
;
Provider
(
Provider
&
&
)
=
delete
;
Provider
&
operator
=
(
const
Provider
&
)
=
delete
;
Provider
&
operator
=
(
Provider
&
&
)
=
delete
;
private
:
void
ThreadMain
(
)
;
void
HandleBorrowRequest
(
BorrowResponseData
*
aResponseData
bool
aAllowSameBuffer
)
;
void
HandlePresentRequest
(
const
PresentRequestData
&
aRequestData
PresentResponseData
*
aResponseData
)
;
HWND
mWindowHandle
;
DWORD
mTargetProcessId
;
HANDLE
mFileMapping
;
HANDLE
mRequestReadyEvent
;
HANDLE
mResponseReadyEvent
;
SharedData
*
mSharedDataPtr
;
bool
mStopServiceThread
;
std
:
:
thread
mServiceThread
;
std
:
:
unique_ptr
<
PresentableSharedImage
>
mBackbuffer
;
mozilla
:
:
Atomic
<
nsTransparencyMode
MemoryOrdering
:
:
Relaxed
>
mTransparencyMode
;
}
;
class
Client
{
public
:
Client
(
)
;
~
Client
(
)
;
bool
Initialize
(
const
RemoteBackbufferHandles
&
aRemoteHandles
)
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
)
;
bool
PresentDrawTarget
(
const
gfx
:
:
IntRect
&
aDirtyRect
)
;
Client
(
const
Client
&
)
=
delete
;
Client
(
Client
&
&
)
=
delete
;
Client
&
operator
=
(
const
Client
&
)
=
delete
;
Client
&
operator
=
(
Client
&
&
)
=
delete
;
private
:
HANDLE
mFileMapping
;
HANDLE
mRequestReadyEvent
;
HANDLE
mResponseReadyEvent
;
SharedData
*
mSharedDataPtr
;
std
:
:
unique_ptr
<
SharedImage
>
mBackbuffer
;
}
;
}
}
}
#
endif
