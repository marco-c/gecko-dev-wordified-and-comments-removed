#
ifndef
CHECKINVARIANTWRAPPER_H_
#
define
CHECKINVARIANTWRAPPER_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
utility
>
namespace
mozilla
{
template
<
typename
T
>
class
CheckInvariantWrapper
{
public
:
class
Wrapper
{
public
:
explicit
Wrapper
(
T
&
aObject
)
:
mObject
(
aObject
)
{
mObject
.
CheckInvariant
(
)
;
}
~
Wrapper
(
)
{
mObject
.
CheckInvariant
(
)
;
}
T
*
operator
-
>
(
)
{
return
&
mObject
;
}
private
:
T
&
mObject
;
}
;
class
ConstWrapper
{
public
:
explicit
ConstWrapper
(
const
T
&
aObject
)
:
mObject
(
aObject
)
{
mObject
.
CheckInvariant
(
)
;
}
~
ConstWrapper
(
)
{
mObject
.
CheckInvariant
(
)
;
}
const
T
*
operator
-
>
(
)
const
{
return
&
mObject
;
}
private
:
const
T
&
mObject
;
}
;
CheckInvariantWrapper
(
)
=
default
;
MOZ_IMPLICIT
CheckInvariantWrapper
(
T
aObject
)
:
mObject
(
std
:
:
move
(
aObject
)
)
{
}
template
<
typename
.
.
.
Args
>
explicit
CheckInvariantWrapper
(
std
:
:
in_place_t
Args
&
&
.
.
.
args
)
:
mObject
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
const
ConstWrapper
operator
-
>
(
)
const
{
return
ConstWrapper
(
mObject
)
;
}
Wrapper
operator
-
>
(
)
{
return
Wrapper
(
mObject
)
;
}
private
:
T
mObject
;
}
;
}
#
endif
