#
include
"
nsPrintDialogWin
.
h
"
#
include
"
nsArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIBrowserChild
.
h
"
#
include
"
nsIDialogParamBlock
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIEmbeddingSiteWindow
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsPrintDialogUtil
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsQueryObject
.
h
"
static
const
char
*
kPageSetupDialogURL
=
"
chrome
:
/
/
global
/
content
/
printPageSetup
.
xhtml
"
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
class
ParamBlock
{
public
:
ParamBlock
(
)
{
mBlock
=
0
;
}
~
ParamBlock
(
)
{
NS_IF_RELEASE
(
mBlock
)
;
}
nsresult
Init
(
)
{
return
CallCreateInstance
(
NS_DIALOGPARAMBLOCK_CONTRACTID
&
mBlock
)
;
}
nsIDialogParamBlock
*
operator
-
>
(
)
const
MOZ_NO_ADDREF_RELEASE_ON_RETURN
{
return
mBlock
;
}
operator
nsIDialogParamBlock
*
const
(
)
{
return
mBlock
;
}
private
:
nsIDialogParamBlock
*
mBlock
;
}
;
NS_IMPL_ISUPPORTS
(
nsPrintDialogServiceWin
nsIPrintDialogService
)
nsPrintDialogServiceWin
:
:
nsPrintDialogServiceWin
(
)
{
}
nsPrintDialogServiceWin
:
:
~
nsPrintDialogServiceWin
(
)
{
}
NS_IMETHODIMP
nsPrintDialogServiceWin
:
:
Init
(
)
{
nsresult
rv
;
mWatcher
=
do_GetService
(
NS_WINDOWWATCHER_CONTRACTID
&
rv
)
;
return
rv
;
}
NS_IMETHODIMP
nsPrintDialogServiceWin
:
:
Show
(
nsPIDOMWindowOuter
*
aParent
nsIPrintSettings
*
aSettings
)
{
NS_ENSURE_ARG
(
aParent
)
;
HWND
hWnd
=
GetHWNDForDOMWindow
(
aParent
)
;
NS_ASSERTION
(
hWnd
"
Couldn
'
t
get
native
window
for
PRint
Dialog
!
"
)
;
return
NativeShowPrintDialog
(
hWnd
aSettings
)
;
}
NS_IMETHODIMP
nsPrintDialogServiceWin
:
:
ShowPageSetup
(
nsPIDOMWindowOuter
*
aParent
nsIPrintSettings
*
aNSSettings
)
{
NS_ENSURE_ARG
(
aParent
)
;
NS_ENSURE_ARG
(
aNSSettings
)
;
ParamBlock
block
;
nsresult
rv
=
block
.
Init
(
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
block
-
>
SetInt
(
0
0
)
;
rv
=
DoDialog
(
aParent
block
aNSSettings
kPageSetupDialogURL
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
int32_t
status
;
block
-
>
GetInt
(
0
&
status
)
;
return
status
=
=
0
?
NS_ERROR_ABORT
:
NS_OK
;
}
return
rv
;
}
nsresult
nsPrintDialogServiceWin
:
:
DoDialog
(
mozIDOMWindowProxy
*
aParent
nsIDialogParamBlock
*
aParamBlock
nsIPrintSettings
*
aPS
const
char
*
aChromeURL
)
{
NS_ENSURE_ARG
(
aParamBlock
)
;
NS_ENSURE_ARG
(
aPS
)
;
NS_ENSURE_ARG
(
aChromeURL
)
;
if
(
!
mWatcher
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
mozIDOMWindowProxy
>
activeParent
;
if
(
!
aParent
)
{
mWatcher
-
>
GetActiveWindow
(
getter_AddRefs
(
activeParent
)
)
;
aParent
=
activeParent
;
}
nsCOMPtr
<
nsIMutableArray
>
array
=
nsArray
:
:
Create
(
)
;
nsCOMPtr
<
nsISupports
>
psSupports
(
do_QueryInterface
(
aPS
)
)
;
NS_ASSERTION
(
psSupports
"
PrintSettings
must
be
a
supports
"
)
;
array
-
>
AppendElement
(
psSupports
)
;
nsCOMPtr
<
nsISupports
>
blkSupps
(
do_QueryInterface
(
aParamBlock
)
)
;
NS_ASSERTION
(
blkSupps
"
IOBlk
must
be
a
supports
"
)
;
array
-
>
AppendElement
(
blkSupps
)
;
nsCOMPtr
<
mozIDOMWindowProxy
>
dialog
;
nsresult
rv
=
mWatcher
-
>
OpenWindow
(
aParent
aChromeURL
"
_blank
"
"
centerscreen
chrome
modal
titlebar
"
array
getter_AddRefs
(
dialog
)
)
;
return
rv
;
}
HWND
nsPrintDialogServiceWin
:
:
GetHWNDForDOMWindow
(
mozIDOMWindowProxy
*
aWindow
)
{
nsCOMPtr
<
nsIWebBrowserChrome
>
chrome
;
if
(
mWatcher
)
{
nsCOMPtr
<
mozIDOMWindowProxy
>
fosterParent
;
if
(
!
aWindow
)
{
mWatcher
-
>
GetActiveWindow
(
getter_AddRefs
(
fosterParent
)
)
;
aWindow
=
fosterParent
;
}
mWatcher
-
>
GetChromeForWindow
(
aWindow
getter_AddRefs
(
chrome
)
)
;
}
if
(
chrome
)
{
nsCOMPtr
<
nsIEmbeddingSiteWindow
>
site
(
do_QueryInterface
(
chrome
)
)
;
if
(
site
)
{
HWND
w
;
site
-
>
GetSiteWindow
(
reinterpret_cast
<
void
*
*
>
(
&
w
)
)
;
return
w
;
}
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
nsPIDOMWindowOuter
:
:
From
(
aWindow
)
;
nsCOMPtr
<
nsIWebBrowserChrome
>
webBrowserChrome
=
window
-
>
GetWebBrowserChrome
(
)
;
if
(
!
webBrowserChrome
)
return
nullptr
;
nsCOMPtr
<
nsIBaseWindow
>
baseWin
(
do_QueryInterface
(
webBrowserChrome
)
)
;
if
(
!
baseWin
)
return
nullptr
;
nsCOMPtr
<
nsIWidget
>
widget
;
baseWin
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
if
(
!
widget
)
return
nullptr
;
return
(
HWND
)
widget
-
>
GetNativeData
(
NS_NATIVE_TMP_WINDOW
)
;
}
