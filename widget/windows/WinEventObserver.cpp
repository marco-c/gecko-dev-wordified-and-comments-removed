#
include
<
windows
.
h
>
#
include
<
winternl
.
h
>
#
include
<
winuser
.
h
>
#
include
<
wtsapi32
.
h
>
#
include
<
dbt
.
h
>
#
include
"
WinEventObserver
.
h
"
#
include
"
InputDeviceUtils
.
h
"
#
include
"
ScreenHelperWin
.
h
"
#
include
"
WindowsUIUtils
.
h
"
#
include
"
WinWindowOcclusionTracker
.
h
"
#
include
"
gfxDWriteFonts
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
nsLookAndFeel
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsWindowDbg
.
h
"
#
include
"
nsdefs
.
h
"
#
include
"
nsXULAppAPI
.
h
"
extern
"
C
"
IMAGE_DOS_HEADER
__ImageBase
;
#
define
CURRENT_MODULE
(
)
reinterpret_cast
<
HMODULE
>
(
&
__ImageBase
)
const
wchar_t
kClassNameHidden2
[
]
=
L
"
MozillaHiddenWindowClass2
"
;
namespace
mozilla
:
:
widget
{
LazyLogModule
gWinEventWindowLog
(
"
WinEventWindow
"
)
;
#
define
OBS_LOG
(
.
.
.
)
\
MOZ_LOG
(
gWinEventWindowLog
:
:
mozilla
:
:
LogLevel
:
:
Info
(
__VA_ARGS__
)
)
namespace
{
namespace
evtwin_details
{
static
HWND
sHiddenWindow
=
nullptr
;
static
bool
sHiddenWindowShutdown
=
false
;
HDEVNOTIFY
sDeviceNotifyHandle
=
nullptr
;
}
}
void
WinEventWindow
:
:
Ensure
(
)
{
MOZ_RELEASE_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
using
namespace
evtwin_details
;
if
(
sHiddenWindow
)
return
;
if
(
sHiddenWindowShutdown
)
return
;
HMODULE
const
hSelf
=
CURRENT_MODULE
(
)
;
WNDCLASSW
const
wc
=
{
.
lpfnWndProc
=
WinEventWindow
:
:
WndProc
.
hInstance
=
hSelf
.
lpszClassName
=
kClassNameHidden2
}
;
ATOM
const
atom
=
:
:
RegisterClassW
(
&
wc
)
;
if
(
!
atom
)
{
auto
volatile
const
err
[
[
maybe_unused
]
]
=
:
:
GetLastError
(
)
;
MOZ_CRASH
(
"
could
not
register
broadcast
-
receiver
window
-
class
"
)
;
}
sHiddenWindow
=
:
:
CreateWindowW
(
(
LPCWSTR
)
(
uintptr_t
)
atom
L
"
WinEventWindow
"
0
0
0
0
0
nullptr
nullptr
hSelf
nullptr
)
;
if
(
!
sHiddenWindow
)
{
MOZ_CRASH
(
"
could
not
create
broadcast
-
receiver
window
"
)
;
}
sDeviceNotifyHandle
=
InputDeviceUtils
:
:
RegisterNotification
(
sHiddenWindow
)
;
mozilla
:
:
RunOnShutdown
(
[
]
(
)
{
InputDeviceUtils
:
:
UnregisterNotification
(
sDeviceNotifyHandle
)
;
sHiddenWindowShutdown
=
true
;
:
:
DestroyWindow
(
sHiddenWindow
)
;
sHiddenWindow
=
nullptr
;
}
)
;
}
;
HWND
WinEventWindow
:
:
GetHwndForTestingOnly
(
)
{
return
evtwin_details
:
:
sHiddenWindow
;
}
namespace
{
namespace
evtwin_details
{
static
void
NotifyThemeChanged
(
ThemeChangeKind
aKind
)
{
LookAndFeel
:
:
NotifyChangedAllWindows
(
aKind
)
;
}
static
void
OnSessionChange
(
WPARAM
wParam
LPARAM
lParam
)
{
if
(
wParam
=
=
WTS_SESSION_LOCK
|
|
wParam
=
=
WTS_SESSION_UNLOCK
)
{
DWORD
currentSessionId
;
BOOL
const
rv
=
:
:
ProcessIdToSessionId
(
:
:
GetCurrentProcessId
(
)
&
currentSessionId
)
;
if
(
!
rv
)
{
MOZ_ASSERT
(
false
"
:
:
ProcessIdToSessionId
(
)
failed
"
)
;
return
;
}
OBS_LOG
(
"
WinEventWindow
OnSessionChange
(
)
:
wParam
=
%
zu
lParam
=
%
"
PRIdLPTR
"
currentSessionId
=
%
lu
"
wParam
lParam
currentSessionId
)
;
if
(
currentSessionId
!
=
(
DWORD
)
lParam
)
{
return
;
}
if
(
auto
*
wwot
=
WinWindowOcclusionTracker
:
:
Get
(
)
)
{
wwot
-
>
OnSessionChange
(
wParam
)
;
}
}
}
static
void
OnPowerBroadcast
(
WPARAM
wParam
LPARAM
lParam
)
{
if
(
wParam
=
=
PBT_POWERSETTINGCHANGE
)
{
POWERBROADCAST_SETTING
*
setting
=
(
POWERBROADCAST_SETTING
*
)
lParam
;
MOZ_ASSERT
(
setting
)
;
if
(
:
:
IsEqualGUID
(
setting
-
>
PowerSetting
GUID_SESSION_DISPLAY_STATUS
)
&
&
setting
-
>
DataLength
=
=
sizeof
(
DWORD
)
)
{
MONITOR_DISPLAY_STATE
state
{
}
;
errno_t
const
err
=
:
:
memcpy_s
(
&
state
sizeof
(
state
)
setting
-
>
Data
setting
-
>
DataLength
)
;
if
(
err
)
{
MOZ_ASSERT
(
false
"
bad
data
in
POWERBROADCAST_SETTING
in
lParam
"
)
;
return
;
}
bool
const
displayOn
=
MONITOR_DISPLAY_STATE
:
:
PowerMonitorOff
!
=
state
;
OBS_LOG
(
"
WinEventWindow
OnPowerBroadcast
(
)
:
displayOn
=
%
d
"
int
(
displayOn
?
1
:
0
)
)
;
if
(
auto
*
wwot
=
WinWindowOcclusionTracker
:
:
Get
(
)
)
{
wwot
-
>
OnDisplayStateChanged
(
displayOn
)
;
}
}
}
}
static
void
OnSettingsChange
(
WPARAM
wParam
LPARAM
lParam
)
{
switch
(
wParam
)
{
case
SPI_SETCLIENTAREAANIMATION
:
case
SPI_SETKEYBOARDDELAY
:
case
SPI_SETMOUSEVANISH
:
case
MOZ_SPI_SETCURSORSIZE
:
NotifyThemeChanged
(
widget
:
:
ThemeChangeKind
:
:
MediaQueriesOnly
)
;
return
;
case
SPI_SETFONTSMOOTHING
:
case
SPI_SETFONTSMOOTHINGTYPE
:
gfxDWriteFont
:
:
UpdateSystemTextVars
(
)
;
return
;
case
SPI_SETWORKAREA
:
ScreenHelperWin
:
:
RefreshScreens
(
)
;
return
;
default
:
break
;
}
if
(
lParam
=
=
0
)
{
return
;
}
nsDependentString
lParamString
{
reinterpret_cast
<
const
wchar_t
*
>
(
lParam
)
}
;
if
(
lParamString
=
=
u
"
ImmersiveColorSet
"
_ns
)
{
NotifyThemeChanged
(
widget
:
:
ThemeChangeKind
:
:
Style
)
;
return
;
}
if
(
lParamString
=
=
u
"
UserInteractionMode
"
_ns
|
|
lParamString
=
=
u
"
ConvertibleSlateMode
"
_ns
|
|
lParamString
=
=
u
"
SystemDockMode
"
_ns
)
{
NotifyThemeChanged
(
widget
:
:
ThemeChangeKind
:
:
MediaQueriesOnly
)
;
WindowsUIUtils
:
:
UpdateInTabletMode
(
)
;
}
}
static
void
OnDeviceChange
(
WPARAM
wParam
LPARAM
lParam
)
{
if
(
wParam
=
=
DBT_DEVICEARRIVAL
|
|
wParam
=
=
DBT_DEVICEREMOVECOMPLETE
)
{
DEV_BROADCAST_HDR
*
hdr
=
reinterpret_cast
<
DEV_BROADCAST_HDR
*
>
(
lParam
)
;
if
(
hdr
-
>
dbch_devicetype
=
=
DBT_DEVTYP_DEVICEINTERFACE
)
{
NotifyThemeChanged
(
widget
:
:
ThemeChangeKind
:
:
MediaQueriesOnly
)
;
}
}
}
}
}
LRESULT
CALLBACK
WinEventWindow
:
:
WndProc
(
HWND
hwnd
UINT
msg
WPARAM
wParam
LPARAM
lParam
)
{
NativeEventLogger
eventLogger
(
"
WinEventWindow
"
hwnd
msg
wParam
lParam
)
;
switch
(
msg
)
{
case
WM_WINDOWPOSCHANGING
:
{
LPWINDOWPOS
info
=
(
LPWINDOWPOS
)
lParam
;
info
-
>
flags
&
=
~
SWP_SHOWWINDOW
;
}
break
;
case
WM_WTSSESSION_CHANGE
:
{
evtwin_details
:
:
OnSessionChange
(
wParam
lParam
)
;
}
break
;
case
WM_POWERBROADCAST
:
{
evtwin_details
:
:
OnPowerBroadcast
(
wParam
lParam
)
;
}
break
;
case
WM_FONTCHANGE
:
{
gfxPlatform
:
:
GetPlatform
(
)
-
>
UpdateFontList
(
)
;
}
break
;
case
WM_SETTINGCHANGE
:
{
evtwin_details
:
:
OnSettingsChange
(
wParam
lParam
)
;
}
break
;
case
WM_DEVICECHANGE
:
{
evtwin_details
:
:
OnDeviceChange
(
wParam
lParam
)
;
}
break
;
}
LRESULT
const
ret
=
:
:
DefWindowProcW
(
hwnd
msg
wParam
lParam
)
;
eventLogger
.
SetResult
(
ret
false
)
;
return
ret
;
}
#
undef
OBS_LOG
}
