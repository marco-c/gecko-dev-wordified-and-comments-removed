#
include
"
nsPrinterWin
.
h
"
#
include
<
algorithm
>
#
include
<
windows
.
h
>
#
include
<
winspool
.
h
>
#
include
"
mozilla
/
Array
.
h
"
#
include
"
nsPaper
.
h
"
#
include
"
nsPrintSettingsImpl
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
WinUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
widget
;
static
const
double
kTenthMMToPoint
=
72
.
0
/
254
.
0
;
nsPrinterWin
:
:
nsPrinterWin
(
const
nsAString
&
aName
)
:
mName
(
aName
)
{
}
already_AddRefed
<
nsPrinterWin
>
nsPrinterWin
:
:
Create
(
const
nsAString
&
aName
)
{
return
do_AddRef
(
new
nsPrinterWin
(
aName
)
)
;
}
template
<
typename
Callback
>
static
bool
WithDefaultDevMode
(
const
nsString
&
aName
nsTArray
<
uint8_t
>
&
aStorage
Callback
&
&
aCallback
)
{
nsHPRINTER
hPrinter
=
nullptr
;
BOOL
status
=
:
:
OpenPrinterW
(
aName
.
get
(
)
&
hPrinter
nullptr
)
;
MOZ_DIAGNOSTIC_ASSERT
(
status
"
OpenPrinterW
failed
"
)
;
if
(
!
status
)
{
return
false
;
}
nsAutoPrinter
autoPrinter
(
hPrinter
)
;
LONG
bytesNeeded
=
:
:
DocumentPropertiesW
(
nullptr
autoPrinter
.
get
(
)
aName
.
get
(
)
nullptr
nullptr
0
)
;
MOZ_DIAGNOSTIC_ASSERT
(
bytesNeeded
>
=
sizeof
(
DEVMODEW
)
"
DocumentPropertiesW
failed
to
get
valid
size
"
)
;
if
(
bytesNeeded
<
sizeof
(
DEVMODEW
)
)
{
return
false
;
}
aStorage
.
SetLength
(
bytesNeeded
*
2
)
;
auto
*
devmode
=
reinterpret_cast
<
DEVMODEW
*
>
(
aStorage
.
Elements
(
)
)
;
LONG
ret
=
:
:
DocumentPropertiesW
(
nullptr
autoPrinter
.
get
(
)
aName
.
get
(
)
devmode
nullptr
DM_OUT_BUFFER
)
;
MOZ_DIAGNOSTIC_ASSERT
(
ret
=
=
IDOK
"
DocumentPropertiesW
failed
"
)
;
if
(
ret
!
=
IDOK
)
{
return
false
;
}
return
aCallback
(
autoPrinter
.
get
(
)
devmode
)
;
}
PrintSettingsInitializer
nsPrinterWin
:
:
DefaultSettings
(
)
const
{
nsString
paperName
;
SizeDouble
paperSize
;
gfx
:
:
MarginDouble
margin
;
int
resolution
=
0
;
bool
color
=
false
;
nsTArray
<
uint8_t
>
devmodeWStorage
;
bool
success
=
WithDefaultDevMode
(
mName
devmodeWStorage
[
&
]
(
HANDLE
DEVMODEW
*
devmode
)
{
for
(
auto
paperInfo
:
PaperList
(
)
)
{
if
(
paperInfo
.
mPaperId
=
=
devmode
-
>
dmPaperSize
)
{
paperName
.
Assign
(
paperInfo
.
mName
)
;
paperSize
=
paperInfo
.
mSize
;
break
;
}
}
nsAutoHDC
printerDc
(
:
:
CreateICW
(
nullptr
mName
.
get
(
)
nullptr
devmode
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
printerDc
"
CreateICW
failed
"
)
;
if
(
!
printerDc
)
{
return
false
;
}
margin
=
WinUtils
:
:
GetUnwriteableMarginsForDeviceInInches
(
printerDc
)
;
margin
.
top
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
right
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
bottom
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
left
*
=
POINTS_PER_INCH_FLOAT
;
resolution
=
GetDeviceCaps
(
printerDc
LOGPIXELSY
)
;
color
=
(
devmode
-
>
dmFields
&
DM_COLOR
)
&
&
devmode
-
>
dmColor
=
=
DMCOLOR_COLOR
;
return
true
;
}
)
;
if
(
!
success
)
{
return
{
}
;
}
return
PrintSettingsInitializer
{
mName
PaperInfo
(
paperName
paperSize
Some
(
margin
)
)
color
resolution
std
:
:
move
(
devmodeWStorage
)
}
;
}
template
<
class
T
>
static
nsTArray
<
T
>
GetDeviceCapabilityArray
(
const
LPWSTR
aPrinterName
WORD
aCapabilityID
size_t
aCount
=
0
)
{
nsTArray
<
T
>
caps
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
caps
;
}
int
count
;
if
(
aCount
)
{
count
=
aCount
;
}
else
{
count
=
:
:
DeviceCapabilitiesW
(
aPrinterName
nullptr
aCapabilityID
nullptr
nullptr
)
;
if
(
count
<
=
0
)
{
return
caps
;
}
}
caps
.
SetLength
(
count
*
2
)
;
count
=
:
:
DeviceCapabilitiesW
(
aPrinterName
nullptr
aCapabilityID
reinterpret_cast
<
LPWSTR
>
(
caps
.
Elements
(
)
)
nullptr
)
;
if
(
count
<
=
0
)
{
caps
.
Clear
(
)
;
return
caps
;
}
caps
.
TruncateLength
(
count
)
;
return
caps
;
}
NS_IMETHODIMP
nsPrinterWin
:
:
GetName
(
nsAString
&
aName
)
{
aName
.
Assign
(
mName
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrinterWin
:
:
GetSystemName
(
nsAString
&
aName
)
{
aName
.
Assign
(
mName
)
;
return
NS_OK
;
}
bool
nsPrinterWin
:
:
SupportsDuplex
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_DUPLEX
nullptr
nullptr
)
=
=
1
;
}
bool
nsPrinterWin
:
:
SupportsColor
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_COLORDEVICE
nullptr
nullptr
)
=
=
1
;
}
bool
nsPrinterWin
:
:
SupportsMonochrome
(
)
const
{
if
(
!
SupportsColor
(
)
)
{
return
true
;
}
nsTArray
<
uint8_t
>
storage
;
return
WithDefaultDevMode
(
mName
storage
[
&
]
(
HANDLE
aPrinter
DEVMODEW
*
aDevMode
)
{
aDevMode
-
>
dmFields
|
=
DM_COLOR
;
aDevMode
-
>
dmColor
=
DMCOLOR_MONOCHROME
;
LONG
ret
=
:
:
DocumentPropertiesW
(
nullptr
aPrinter
mName
.
get
(
)
aDevMode
aDevMode
DM_IN_BUFFER
|
DM_OUT_BUFFER
)
;
if
(
ret
!
=
IDOK
)
{
return
false
;
}
return
!
(
aDevMode
-
>
dmFields
&
DM_COLOR
)
|
|
aDevMode
-
>
dmColor
=
=
DMCOLOR_MONOCHROME
;
}
)
;
}
bool
nsPrinterWin
:
:
SupportsCollation
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_COLLATE
nullptr
nullptr
)
=
=
1
;
}
nsTArray
<
mozilla
:
:
PaperInfo
>
nsPrinterWin
:
:
PaperList
(
)
const
{
auto
paperIds
=
GetDeviceCapabilityArray
<
WORD
>
(
mName
.
get
(
)
DC_PAPERS
)
;
auto
paperNames
=
GetDeviceCapabilityArray
<
Array
<
wchar_t
64
>
>
(
mName
.
get
(
)
DC_PAPERNAMES
paperIds
.
Length
(
)
)
;
auto
paperSizes
=
GetDeviceCapabilityArray
<
POINT
>
(
mName
.
get
(
)
DC_PAPERSIZE
paperIds
.
Length
(
)
)
;
if
(
!
paperNames
.
Length
(
)
|
|
paperNames
.
Length
(
)
!
=
paperIds
.
Length
(
)
|
|
paperNames
.
Length
(
)
!
=
paperSizes
.
Length
(
)
)
{
return
{
}
;
}
nsTArray
<
mozilla
:
:
PaperInfo
>
paperList
;
paperList
.
SetCapacity
(
paperNames
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
paperNames
.
Length
(
)
;
+
+
i
)
{
auto
firstNull
=
std
:
:
find
(
paperNames
[
i
]
.
cbegin
(
)
paperNames
[
i
]
.
cend
(
)
L
'
\
0
'
)
;
auto
nameLength
=
firstNull
-
paperNames
[
i
]
.
cbegin
(
)
;
double
width
=
paperSizes
[
i
]
.
x
*
kTenthMMToPoint
;
double
height
=
paperSizes
[
i
]
.
y
*
kTenthMMToPoint
;
if
(
!
nameLength
|
|
width
<
=
0
|
|
height
<
=
0
)
{
continue
;
}
nsDependentSubstring
name
(
paperNames
[
i
]
.
cbegin
(
)
nameLength
)
;
paperList
.
AppendElement
(
mozilla
:
:
PaperInfo
(
nsString
(
name
)
{
width
height
}
Nothing
(
)
paperIds
[
i
]
)
)
;
}
return
paperList
;
}
mozilla
:
:
gfx
:
:
MarginDouble
nsPrinterWin
:
:
GetMarginsForPaper
(
short
aPaperId
)
const
{
gfx
:
:
MarginDouble
margin
;
nsTArray
<
uint8_t
>
storage
;
bool
success
=
WithDefaultDevMode
(
mName
storage
[
&
]
(
HANDLE
DEVMODEW
*
devmode
)
{
devmode
-
>
dmFields
=
DM_PAPERSIZE
;
devmode
-
>
dmPaperSize
=
aPaperId
;
nsAutoHDC
printerDc
(
:
:
CreateICW
(
nullptr
mName
.
get
(
)
nullptr
devmode
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
printerDc
"
CreateICW
failed
"
)
;
if
(
!
printerDc
)
{
return
false
;
}
margin
=
WinUtils
:
:
GetUnwriteableMarginsForDeviceInInches
(
printerDc
)
;
margin
.
top
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
right
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
bottom
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
left
*
=
POINTS_PER_INCH_FLOAT
;
return
true
;
}
)
;
if
(
!
success
)
{
return
{
}
;
}
return
margin
;
}
