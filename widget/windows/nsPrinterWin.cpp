#
include
"
nsPrinterWin
.
h
"
#
include
<
algorithm
>
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Array
.
h
"
#
include
"
nsPaper
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
static
const
float
kTenthMMToPoint
=
(
POINTS_PER_INCH_FLOAT
/
MM_PER_INCH_FLOAT
)
/
10
;
nsPrinterWin
:
:
nsPrinterWin
(
const
nsAString
&
aName
)
:
mName
(
aName
)
{
}
already_AddRefed
<
nsPrinterWin
>
nsPrinterWin
:
:
Create
(
const
nsAString
&
aName
)
{
return
do_AddRef
(
new
nsPrinterWin
(
aName
)
)
;
}
template
<
class
T
>
static
nsTArray
<
T
>
GetDeviceCapabilityArray
(
const
LPWSTR
aPrinterName
WORD
aCapabilityID
)
{
nsTArray
<
T
>
caps
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
caps
;
}
int
count
=
:
:
DeviceCapabilitiesW
(
aPrinterName
nullptr
aCapabilityID
nullptr
nullptr
)
;
if
(
count
<
=
0
)
{
return
caps
;
}
caps
.
SetLength
(
count
)
;
count
=
:
:
DeviceCapabilitiesW
(
aPrinterName
nullptr
aCapabilityID
reinterpret_cast
<
LPWSTR
>
(
caps
.
Elements
(
)
)
nullptr
)
;
if
(
count
<
=
0
)
{
caps
.
Clear
(
)
;
return
caps
;
}
MOZ_DIAGNOSTIC_ASSERT
(
count
<
=
caps
.
Length
(
)
"
DeviceCapabilitiesW
returned
more
than
buffer
could
hold
.
"
)
;
caps
.
SetLength
(
count
)
;
return
caps
;
}
NS_IMETHODIMP
nsPrinterWin
:
:
GetName
(
nsAString
&
aName
)
{
aName
.
Assign
(
mName
)
;
return
NS_OK
;
}
bool
nsPrinterWin
:
:
SupportsDuplex
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_DUPLEX
nullptr
nullptr
)
=
=
1
;
}
bool
nsPrinterWin
:
:
SupportsColor
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_COLORDEVICE
nullptr
nullptr
)
=
=
1
;
}
bool
nsPrinterWin
:
:
SupportsCollation
(
)
const
{
return
:
:
DeviceCapabilitiesW
(
mName
.
get
(
)
nullptr
DC_COLLATE
nullptr
nullptr
)
=
=
1
;
}
nsTArray
<
mozilla
:
:
PaperInfo
>
nsPrinterWin
:
:
PaperList
(
)
const
{
auto
paperNames
=
GetDeviceCapabilityArray
<
Array
<
wchar_t
64
>
>
(
mName
.
get
(
)
DC_PAPERNAMES
)
;
auto
paperIds
=
GetDeviceCapabilityArray
<
WORD
>
(
mName
.
get
(
)
DC_PAPERS
)
;
auto
paperSizes
=
GetDeviceCapabilityArray
<
POINT
>
(
mName
.
get
(
)
DC_PAPERSIZE
)
;
if
(
!
paperNames
.
Length
(
)
|
|
paperNames
.
Length
(
)
!
=
paperIds
.
Length
(
)
|
|
paperNames
.
Length
(
)
!
=
paperSizes
.
Length
(
)
)
{
return
{
}
;
}
nsTArray
<
mozilla
:
:
PaperInfo
>
paperList
;
paperList
.
SetCapacity
(
paperNames
.
Length
(
)
)
;
for
(
size_t
i
=
0
;
i
<
paperNames
.
Length
(
)
;
+
+
i
)
{
auto
firstNull
=
std
:
:
find
(
paperNames
[
i
]
.
cbegin
(
)
paperNames
[
i
]
.
cend
(
)
L
'
\
0
'
)
;
auto
nameLength
=
firstNull
-
paperNames
[
i
]
.
cbegin
(
)
;
double
width
=
paperSizes
[
i
]
.
x
*
kTenthMMToPoint
;
double
height
=
paperSizes
[
i
]
.
y
*
kTenthMMToPoint
;
if
(
!
nameLength
|
|
width
<
=
0
|
|
height
<
=
0
)
{
continue
;
}
nsDependentSubstring
name
(
paperNames
[
i
]
.
cbegin
(
)
nameLength
)
;
paperList
.
AppendElement
(
mozilla
:
:
PaperInfo
{
nsString
(
name
)
{
width
height
}
Nothing
(
)
paperIds
[
i
]
}
)
;
}
return
paperList
;
}
mozilla
:
:
gfx
:
:
MarginDouble
nsPrinterWin
:
:
GetMarginsForPaper
(
uint64_t
aPaperId
)
const
{
static
const
wchar_t
kDriverName
[
]
=
L
"
WINSPOOL
"
;
DEVMODEW
devmode
=
{
}
;
devmode
.
dmSize
=
sizeof
(
DEVMODEW
)
;
devmode
.
dmFields
=
DM_PAPERSIZE
;
devmode
.
dmPaperSize
=
aPaperId
;
nsAutoHDC
printerDc
(
:
:
CreateICW
(
kDriverName
mName
.
get
(
)
nullptr
&
devmode
)
)
;
auto
margin
=
WinUtils
:
:
GetUnwriteableMarginsForDeviceInInches
(
printerDc
)
;
margin
.
top
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
right
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
bottom
*
=
POINTS_PER_INCH_FLOAT
;
margin
.
left
*
=
POINTS_PER_INCH_FLOAT
;
return
margin
;
}
