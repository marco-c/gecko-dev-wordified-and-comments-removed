#
ifndef
nsClipboard_h__
#
define
nsClipboard_h__
#
include
"
nsBaseClipboard
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIURI
.
h
"
#
include
<
ole2
.
h
>
#
include
<
windows
.
h
>
class
nsITransferable
;
class
nsIWidget
;
class
nsIFile
;
struct
IDataObject
;
class
nsClipboard
:
public
nsBaseClipboard
public
nsIObserver
{
virtual
~
nsClipboard
(
)
;
public
:
nsClipboard
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIOBSERVER
NS_IMETHOD
HasDataMatchingFlavors
(
const
nsTArray
<
nsCString
>
&
aFlavorList
int32_t
aWhichClipboard
bool
*
_retval
)
override
;
NS_IMETHOD
EmptyClipboard
(
int32_t
aWhichClipboard
)
override
;
enum
class
MightNeedToFlush
:
bool
{
No
Yes
}
;
static
nsresult
CreateNativeDataObject
(
nsITransferable
*
aTransferable
IDataObject
*
*
aDataObj
nsIURI
*
aUri
MightNeedToFlush
*
=
nullptr
)
;
static
nsresult
SetupNativeDataObject
(
nsITransferable
*
aTransferable
IDataObject
*
aDataObj
MightNeedToFlush
*
=
nullptr
)
;
static
nsresult
GetDataFromDataObject
(
IDataObject
*
aDataObject
UINT
anIndex
nsIWidget
*
aWindow
nsITransferable
*
aTransferable
)
;
static
nsresult
GetNativeDataOffClipboard
(
nsIWidget
*
aWindow
UINT
aIndex
UINT
aFormat
void
*
*
aData
uint32_t
*
aLen
)
;
static
nsresult
GetNativeDataOffClipboard
(
IDataObject
*
aDataObject
UINT
aIndex
UINT
aFormat
const
char
*
aMIMEImageFormat
void
*
*
aData
uint32_t
*
aLen
)
;
static
nsresult
GetGlobalData
(
HGLOBAL
aHGBL
void
*
*
aData
uint32_t
*
aLen
)
;
static
UINT
GetFormat
(
const
char
*
aMimeStr
bool
aMapHTMLMime
=
true
)
;
static
UINT
GetClipboardFileDescriptorFormatA
(
)
;
static
UINT
GetClipboardFileDescriptorFormatW
(
)
;
static
UINT
GetHtmlClipboardFormat
(
)
;
static
UINT
GetCustomClipboardFormat
(
)
;
protected
:
static
HRESULT
FillSTGMedium
(
IDataObject
*
aDataObject
UINT
aFormat
LPFORMATETC
pFE
LPSTGMEDIUM
pSTM
DWORD
aTymed
)
;
NS_IMETHOD
SetNativeClipboardData
(
int32_t
aWhichClipboard
)
override
;
NS_IMETHOD
GetNativeClipboardData
(
nsITransferable
*
aTransferable
int32_t
aWhichClipboard
)
override
;
static
bool
IsInternetShortcut
(
const
nsAString
&
inFileName
)
;
static
bool
FindURLFromLocalFile
(
IDataObject
*
inDataObject
UINT
inIndex
void
*
*
outData
uint32_t
*
outDataLen
)
;
static
bool
FindURLFromNativeURL
(
IDataObject
*
inDataObject
UINT
inIndex
void
*
*
outData
uint32_t
*
outDataLen
)
;
static
bool
FindUnicodeFromPlainText
(
IDataObject
*
inDataObject
UINT
inIndex
void
*
*
outData
uint32_t
*
outDataLen
)
;
static
bool
FindPlatformHTML
(
IDataObject
*
inDataObject
UINT
inIndex
void
*
*
outData
uint32_t
*
outStartOfData
uint32_t
*
outDataLen
)
;
static
void
ResolveShortcut
(
nsIFile
*
inFileName
nsACString
&
outURL
)
;
static
nsresult
GetTempFilePath
(
const
nsAString
&
aFileName
nsAString
&
aFilePath
)
;
static
nsresult
SaveIStorage
(
IDataObject
*
aDataObject
UINT
aIndex
const
nsAString
&
aFileName
)
;
static
nsresult
SaveIStream
(
IDataObject
*
aDataObject
UINT
aIndex
const
nsString
&
aFileName
)
;
nsIWidget
*
mWindow
;
}
;
#
define
SET_FORMATETC
(
fe
cf
td
asp
li
med
)
\
{
\
(
fe
)
.
cfFormat
=
cf
;
\
(
fe
)
.
ptd
=
td
;
\
(
fe
)
.
dwAspect
=
asp
;
\
(
fe
)
.
lindex
=
li
;
\
(
fe
)
.
tymed
=
med
;
\
}
#
endif
