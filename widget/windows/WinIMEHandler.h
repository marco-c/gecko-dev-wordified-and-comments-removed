#
ifndef
WinIMEHandler_h_
#
define
WinIMEHandler_h_
#
include
"
nscore
.
h
"
#
include
"
nsWindowBase
.
h
"
#
include
"
npapi
.
h
"
#
include
<
windows
.
h
>
#
include
<
inputscope
.
h
>
#
define
NS_WM_IMEFIRST
WM_IME_SETCONTEXT
#
define
NS_WM_IMELAST
WM_IME_KEYUP
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
struct
MSGResult
;
class
IMEHandler
final
{
private
:
static
void
Initialize
(
)
;
public
:
static
void
Terminate
(
)
;
static
void
*
GetNativeData
(
nsWindow
*
aWindow
uint32_t
aDataType
)
;
static
bool
ProcessRawKeyMessage
(
const
MSG
&
aMsg
)
;
static
bool
ProcessMessage
(
nsWindow
*
aWindow
UINT
aMessage
WPARAM
&
aWParam
LPARAM
&
aLParam
MSGResult
&
aResult
)
;
static
bool
IsA11yHandlingNativeCaret
(
)
;
static
bool
NeedsToCreateNativeCaret
(
)
{
return
sHasNativeCaretBeenRequested
&
&
!
IsA11yHandlingNativeCaret
(
)
;
}
static
bool
CreateNativeCaret
(
nsWindow
*
aWindow
const
LayoutDeviceIntRect
&
aCaretRect
)
;
static
void
MaybeDestroyNativeCaret
(
)
;
static
bool
HasNativeCaret
(
)
{
return
sNativeCaretIsCreated
;
}
static
bool
IsComposing
(
)
;
static
bool
IsComposingOn
(
nsWindow
*
aWindow
)
;
static
nsresult
NotifyIME
(
nsWindow
*
aWindow
const
IMENotification
&
aIMENotification
)
;
static
IMENotificationRequests
GetIMENotificationRequests
(
)
;
static
TextEventDispatcherListener
*
GetNativeTextEventDispatcherListener
(
)
;
static
bool
GetOpenState
(
nsWindow
*
aWindow
)
;
static
void
OnDestroyWindow
(
nsWindow
*
aWindow
)
;
static
void
SetInputContext
(
nsWindow
*
aWindow
InputContext
&
aInputContext
const
InputContextAction
&
aAction
)
;
static
void
AssociateIMEContext
(
nsWindowBase
*
aWindowBase
bool
aEnable
)
;
static
void
InitInputContext
(
nsWindow
*
aWindow
InputContext
&
aInputContext
)
;
static
void
OnKeyboardLayoutChanged
(
)
;
#
ifdef
DEBUG
static
bool
CurrentKeyboardLayoutHasIME
(
)
;
#
endif
static
void
AppendInputScopeFromInputmode
(
const
nsAString
&
aInputmode
nsTArray
<
InputScope
>
&
aScopes
)
;
static
void
AppendInputScopeFromType
(
const
nsAString
&
aInputType
nsTArray
<
InputScope
>
&
aScopes
)
;
private
:
static
nsWindow
*
sFocusedWindow
;
static
InputContextAction
:
:
Cause
sLastContextActionCause
;
static
bool
sMaybeEditable
;
static
bool
sForceDisableCurrentIMM_IME
;
static
bool
sNativeCaretIsCreated
;
static
bool
sHasNativeCaretBeenRequested
;
static
bool
MaybeCreateNativeCaret
(
nsWindow
*
aWindow
)
;
static
decltype
(
SetInputScopes
)
*
sSetInputScopes
;
static
void
SetInputScopeForIMM32
(
nsWindow
*
aWindow
const
nsAString
&
aHTMLInputType
const
nsAString
&
aHTMLInputInputmode
bool
aInPrivateBrowsing
)
;
static
bool
sIsInTSFMode
;
static
bool
sIsIMMEnabled
;
static
bool
sAssociateIMCOnlyWhenIMM_IMEActive
;
static
bool
IsTSFAvailable
(
)
{
return
sIsInTSFMode
;
}
static
bool
IsIMMActive
(
)
;
static
bool
IsOnScreenKeyboardSupported
(
)
;
static
void
MaybeShowOnScreenKeyboard
(
nsWindow
*
aWindow
const
InputContext
&
aInputContext
)
;
enum
class
Sync
{
Yes
No
}
;
static
void
MaybeDismissOnScreenKeyboard
(
nsWindow
*
aWindow
Sync
aSync
=
Sync
:
:
No
)
;
static
bool
WStringStartsWithCaseInsensitive
(
const
std
:
:
wstring
&
aHaystack
const
std
:
:
wstring
&
aNeedle
)
;
static
bool
NeedOnScreenKeyboard
(
)
;
static
bool
IsKeyboardPresentOnSlate
(
)
;
static
bool
IsInTabletMode
(
)
;
static
bool
AutoInvokeOnScreenKeyboardInDesktopMode
(
)
;
static
bool
NeedsToAssociateIMC
(
)
;
static
void
ShowOnScreenKeyboard
(
nsWindow
*
aWindow
)
;
static
void
DismissOnScreenKeyboard
(
nsWindow
*
aWindow
)
;
static
HWND
GetOnScreenKeyboardWindow
(
)
;
}
;
}
}
#
endif
