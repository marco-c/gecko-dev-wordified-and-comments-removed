#
ifndef
_NSDATAOBJ_H_
#
define
_NSDATAOBJ_H_
#
include
<
oleidl
.
h
>
#
include
<
shldisp
.
h
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsITimer
.
h
"
class
nsIThread
;
class
nsIPrincipal
;
class
CEnumFormatEtc
;
class
nsITransferable
;
class
nsDataObj
:
public
IDataObject
public
IDataObjectAsyncCapability
{
nsCOMPtr
<
nsIThread
>
mIOThread
;
public
:
explicit
nsDataObj
(
nsIURI
*
uri
=
nullptr
)
;
protected
:
virtual
~
nsDataObj
(
)
;
public
:
STDMETHODIMP_
(
ULONG
)
AddRef
(
)
override
;
STDMETHODIMP
QueryInterface
(
REFIID
void
*
*
)
override
;
STDMETHODIMP_
(
ULONG
)
Release
(
)
override
;
virtual
void
AddDataFlavor
(
const
char
*
aDataFlavor
LPFORMATETC
aFE
)
;
void
SetTransferable
(
nsITransferable
*
aTransferable
)
;
public
:
STDMETHODIMP
GetData
(
LPFORMATETC
pFE
LPSTGMEDIUM
pSTM
)
override
;
STDMETHODIMP
GetDataHere
(
LPFORMATETC
pFE
LPSTGMEDIUM
pSTM
)
override
;
STDMETHODIMP
QueryGetData
(
LPFORMATETC
pFE
)
override
;
STDMETHODIMP
GetCanonicalFormatEtc
(
LPFORMATETC
pFE
LPFORMATETC
pCanonFE
)
final
;
STDMETHODIMP
SetData
(
LPFORMATETC
pFE
LPSTGMEDIUM
pSTM
BOOL
release
)
override
;
STDMETHODIMP
EnumFormatEtc
(
DWORD
direction
LPENUMFORMATETC
*
ppEnum
)
final
;
STDMETHODIMP
DAdvise
(
LPFORMATETC
pFE
DWORD
flags
LPADVISESINK
pAdvise
DWORD
*
pConn
)
final
;
STDMETHODIMP
DUnadvise
(
DWORD
pConn
)
final
;
STDMETHODIMP
EnumDAdvise
(
LPENUMSTATDATA
*
ppEnum
)
final
;
STDMETHODIMP
EndOperation
(
HRESULT
hResult
IBindCtx
*
pbcReserved
DWORD
dwEffects
)
final
;
STDMETHODIMP
GetAsyncMode
(
BOOL
*
pfIsOpAsync
)
final
;
STDMETHODIMP
InOperation
(
BOOL
*
pfInAsyncOp
)
final
;
STDMETHODIMP
SetAsyncMode
(
BOOL
fDoOpAsync
)
final
;
STDMETHODIMP
StartOperation
(
IBindCtx
*
pbcReserved
)
final
;
private
:
HRESULT
GetDownloadDetails
(
nsIURI
*
*
aSourceURI
nsAString
&
aFilename
)
;
bool
IsFlavourPresent
(
const
char
*
inFlavour
)
;
protected
:
HRESULT
GetFile
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetText
(
const
nsACString
&
aDF
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
private
:
HRESULT
GetDib
(
const
nsACString
&
inFlavor
FORMATETC
&
STGMEDIUM
&
aSTG
)
;
HRESULT
DropImage
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
DropFile
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
DropTempFile
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetUniformResourceLocator
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
bool
aIsUnicode
)
;
HRESULT
ExtractUniformResourceLocatorA
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
ExtractUniformResourceLocatorW
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileDescriptor
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
bool
aIsUnicode
)
;
protected
:
HRESULT
GetFileContents
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
private
:
HRESULT
GetPreferredDropEffect
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileDescriptorInternetShortcutA
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileDescriptorInternetShortcutW
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileContentsInternetShortcut
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileDescriptor_IStreamA
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileDescriptor_IStreamW
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
HRESULT
GetFileContents_IStream
(
FORMATETC
&
aFE
STGMEDIUM
&
aSTG
)
;
nsresult
ExtractShortcutURL
(
nsString
&
outURL
)
;
nsresult
ExtractShortcutTitle
(
nsString
&
outTitle
)
;
nsresult
BuildPlatformHTML
(
const
char
*
inOurHTML
char
*
*
outPlatformHTML
)
;
nsCString
mSourceURL
;
protected
:
BOOL
FormatsMatch
(
const
FORMATETC
&
source
const
FORMATETC
&
target
)
const
;
ULONG
m_cRef
;
private
:
nsTArray
<
nsCString
>
mDataFlavors
;
nsITransferable
*
mTransferable
;
protected
:
CEnumFormatEtc
*
m_enumFE
;
private
:
nsCOMPtr
<
nsIFile
>
mCachedTempFile
;
BOOL
mIsAsyncMode
;
BOOL
mIsInOperation
;
class
CStream
final
:
public
IStream
public
nsIStreamListener
{
nsCOMPtr
<
nsIChannel
>
mChannel
;
FallibleTArray
<
uint8_t
>
mChannelData
;
bool
mChannelRead
;
nsresult
mChannelResult
;
uint32_t
mStreamRead
;
virtual
~
CStream
(
)
;
nsresult
WaitForCompletion
(
)
;
public
:
CStream
(
)
;
nsresult
Init
(
nsIURI
*
pSourceURI
uint32_t
aContentPolicyType
nsIPrincipal
*
aRequestingPrincipal
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
STDMETHOD
(
QueryInterface
)
(
REFIID
refiid
void
*
*
ppvResult
)
override
;
STDMETHODIMP
Clone
(
IStream
*
*
ppStream
)
final
;
STDMETHODIMP
Commit
(
DWORD
dwFrags
)
final
;
STDMETHODIMP
CopyTo
(
IStream
*
pDestStream
ULARGE_INTEGER
nBytesToCopy
ULARGE_INTEGER
*
nBytesRead
ULARGE_INTEGER
*
nBytesWritten
)
final
;
STDMETHODIMP
LockRegion
(
ULARGE_INTEGER
nStart
ULARGE_INTEGER
nBytes
DWORD
dwFlags
)
final
;
STDMETHODIMP
Read
(
void
*
pvBuffer
ULONG
nBytesToRead
ULONG
*
nBytesRead
)
final
;
STDMETHODIMP
Revert
(
void
)
final
;
STDMETHODIMP
Seek
(
LARGE_INTEGER
nMove
DWORD
dwOrigin
ULARGE_INTEGER
*
nNewPos
)
final
;
STDMETHODIMP
SetSize
(
ULARGE_INTEGER
nNewSize
)
final
;
STDMETHODIMP
Stat
(
STATSTG
*
statstg
DWORD
dwFlags
)
final
;
STDMETHODIMP
UnlockRegion
(
ULARGE_INTEGER
nStart
ULARGE_INTEGER
nBytes
DWORD
dwFlags
)
final
;
STDMETHODIMP
Write
(
const
void
*
pvBuffer
ULONG
nBytesToRead
ULONG
*
nBytesRead
)
final
;
}
;
HRESULT
CreateStream
(
IStream
*
*
outStream
)
;
private
:
typedef
struct
{
FORMATETC
fe
;
STGMEDIUM
stgm
;
}
DATAENTRY
*
LPDATAENTRY
;
nsTArray
<
LPDATAENTRY
>
mDataEntryList
;
nsCOMPtr
<
nsITimer
>
mTimer
;
bool
LookupArbitraryFormat
(
FORMATETC
*
aFormat
LPDATAENTRY
*
aDataEntry
BOOL
aAddorUpdate
)
;
bool
CopyMediumData
(
STGMEDIUM
*
aMediumDst
STGMEDIUM
*
aMediumSrc
LPFORMATETC
aFormat
BOOL
aSetData
)
;
}
;
#
endif
