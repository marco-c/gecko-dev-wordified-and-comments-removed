#
ifndef
nsWindowBase_h_
#
define
nsWindowBase_h_
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
<
windows
.
h
>
#
include
"
touchinjection_sdk80
.
h
"
class
nsWindowBase
:
public
nsBaseWidget
{
public
:
typedef
mozilla
:
:
WidgetEventTime
WidgetEventTime
;
explicit
nsWindowBase
(
nsBorderStyle
aBorderStyle
)
:
nsBaseWidget
(
aBorderStyle
)
{
}
HWND
GetWindowHandle
(
)
{
return
static_cast
<
HWND
>
(
GetNativeData
(
NS_NATIVE_WINDOW
)
)
;
}
virtual
nsWindowBase
*
GetParentWindowBase
(
bool
aIncludeOwner
)
=
0
;
virtual
bool
IsTopLevelWidget
(
)
=
0
;
virtual
void
InitEvent
(
mozilla
:
:
WidgetGUIEvent
&
aEvent
LayoutDeviceIntPoint
*
aPoint
=
nullptr
)
=
0
;
virtual
WidgetEventTime
CurrentMessageWidgetEventTime
(
)
const
=
0
;
virtual
bool
DispatchKeyboardEvent
(
mozilla
:
:
WidgetKeyboardEvent
*
aEvent
)
=
0
;
virtual
bool
DispatchWheelEvent
(
mozilla
:
:
WidgetWheelEvent
*
aEvent
)
=
0
;
virtual
bool
DispatchContentCommandEvent
(
mozilla
:
:
WidgetContentCommandEvent
*
aEvent
)
=
0
;
virtual
nsresult
SynthesizeNativeTouchPoint
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPointerPressure
uint32_t
aPointerOrientation
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
ClearNativeTouchSequence
(
nsIObserver
*
aObserver
)
override
;
virtual
nsresult
SynthesizeNativePenInput
(
uint32_t
aPointerId
TouchPointerState
aPointerState
LayoutDeviceIntPoint
aPoint
double
aPressure
uint32_t
aRotation
int32_t
aTiltX
int32_t
aTiltY
int32_t
aButton
nsIObserver
*
aObserver
)
override
;
virtual
bool
HandleAppCommandMsg
(
const
MSG
&
aAppCommandMsg
LRESULT
*
aRetValue
)
;
const
InputContext
&
InputContextRef
(
)
const
{
return
mInputContext
;
}
protected
:
virtual
int32_t
LogToPhys
(
double
aValue
)
=
0
;
void
ChangedDPI
(
)
;
static
bool
InitTouchInjection
(
)
;
bool
InjectTouchPoint
(
uint32_t
aId
LayoutDeviceIntPoint
&
aPoint
POINTER_FLAGS
aFlags
uint32_t
aPressure
=
1024
uint32_t
aOrientation
=
90
)
;
class
PointerInfo
{
public
:
enum
class
PointerType
:
uint8_t
{
TOUCH
PEN
}
;
PointerInfo
(
int32_t
aPointerId
LayoutDeviceIntPoint
&
aPoint
PointerType
aType
)
:
mPointerId
(
aPointerId
)
mPosition
(
aPoint
)
mType
(
aType
)
{
}
int32_t
mPointerId
;
LayoutDeviceIntPoint
mPosition
;
PointerType
mType
;
}
;
nsClassHashtable
<
nsUint32HashKey
PointerInfo
>
mActivePointers
;
static
bool
sTouchInjectInitialized
;
static
InjectTouchInputPtr
sInjectTouchFuncPtr
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
MultiTouchInput
>
mSynthesizedTouchInput
;
protected
:
InputContext
mInputContext
;
}
;
#
endif
