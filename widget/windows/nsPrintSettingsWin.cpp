#
include
"
nsPrintSettingsWin
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCRT
.
h
"
const
short
kPaperSizeUnits
[
]
=
{
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
}
;
NS_IMPL_ISUPPORTS_INHERITED
(
nsPrintSettingsWin
nsPrintSettings
nsIPrintSettingsWin
)
nsPrintSettingsWin
:
:
nsPrintSettingsWin
(
)
:
nsPrintSettings
(
)
mDeviceName
(
nullptr
)
mDriverName
(
nullptr
)
mDevMode
(
nullptr
)
{
}
nsPrintSettingsWin
:
:
nsPrintSettingsWin
(
const
nsPrintSettingsWin
&
aPS
)
:
mDevMode
(
nullptr
)
{
*
this
=
aPS
;
}
nsPrintSettingsWin
:
:
~
nsPrintSettingsWin
(
)
{
if
(
mDevMode
)
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDeviceName
(
const
nsAString
&
aDeviceName
)
{
mDeviceName
=
aDeviceName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDeviceName
(
nsAString
&
aDeviceName
)
{
aDeviceName
=
mDeviceName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDriverName
(
const
nsAString
&
aDriverName
)
{
mDriverName
=
aDriverName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDriverName
(
nsAString
&
aDriverName
)
{
aDriverName
=
mDriverName
;
return
NS_OK
;
}
void
nsPrintSettingsWin
:
:
CopyDevMode
(
DEVMODEW
*
aInDevMode
DEVMODEW
*
&
aOutDevMode
)
{
aOutDevMode
=
nullptr
;
size_t
size
=
aInDevMode
-
>
dmSize
+
aInDevMode
-
>
dmDriverExtra
;
aOutDevMode
=
(
LPDEVMODEW
)
:
:
HeapAlloc
(
:
:
GetProcessHeap
(
)
HEAP_ZERO_MEMORY
size
)
;
if
(
aOutDevMode
)
{
memcpy
(
aOutDevMode
aInDevMode
size
)
;
}
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDevMode
(
DEVMODEW
*
*
aDevMode
)
{
NS_ENSURE_ARG_POINTER
(
aDevMode
)
;
if
(
mDevMode
)
{
CopyDevMode
(
mDevMode
*
aDevMode
)
;
}
else
{
*
aDevMode
=
nullptr
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDevMode
(
DEVMODEW
*
aDevMode
)
{
if
(
mDevMode
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
mDevMode
=
nullptr
;
}
if
(
aDevMode
)
{
CopyDevMode
(
aDevMode
mDevMode
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetPrintableWidthInInches
(
double
*
aPrintableWidthInInches
)
{
MOZ_ASSERT
(
aPrintableWidthInInches
)
;
*
aPrintableWidthInInches
=
mPrintableWidthInInches
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetPrintableWidthInInches
(
double
aPrintableWidthInInches
)
{
mPrintableWidthInInches
=
aPrintableWidthInInches
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetPrintableHeightInInches
(
double
*
aPrintableHeightInInches
)
{
MOZ_ASSERT
(
aPrintableHeightInInches
)
;
*
aPrintableHeightInInches
=
mPrintableHeightInInches
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetPrintableHeightInInches
(
double
aPrintableHeightInInches
)
{
mPrintableHeightInInches
=
aPrintableHeightInInches
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetEffectivePageSize
(
double
*
aWidth
double
*
aHeight
)
{
if
(
mPrintableWidthInInches
=
=
0l
|
|
mPrintableHeightInInches
=
=
0l
)
{
return
nsPrintSettings
:
:
GetEffectivePageSize
(
aWidth
aHeight
)
;
}
if
(
mOrientation
=
=
kPortraitOrientation
)
{
*
aWidth
=
NS_INCHES_TO_TWIPS
(
mPrintableWidthInInches
)
;
*
aHeight
=
NS_INCHES_TO_TWIPS
(
mPrintableHeightInInches
)
;
}
else
{
*
aHeight
=
NS_INCHES_TO_TWIPS
(
mPrintableWidthInInches
)
;
*
aWidth
=
NS_INCHES_TO_TWIPS
(
mPrintableHeightInInches
)
;
}
return
NS_OK
;
}
void
nsPrintSettingsWin
:
:
InitUnwriteableMargin
(
HDC
aHdc
)
{
int32_t
pixelsPerInchY
=
GetDeviceCaps
(
aHdc
LOGPIXELSY
)
;
int32_t
pixelsPerInchX
=
GetDeviceCaps
(
aHdc
LOGPIXELSX
)
;
int32_t
marginLeft
=
GetDeviceCaps
(
aHdc
PHYSICALOFFSETX
)
;
int32_t
marginTop
=
GetDeviceCaps
(
aHdc
PHYSICALOFFSETY
)
;
double
marginLeftInch
=
double
(
marginLeft
)
/
pixelsPerInchX
;
double
marginTopInch
=
double
(
marginTop
)
/
pixelsPerInchY
;
int32_t
printableAreaWidth
=
GetDeviceCaps
(
aHdc
HORZRES
)
;
int32_t
printableAreaHeight
=
GetDeviceCaps
(
aHdc
VERTRES
)
;
double
printableAreaWidthInch
=
double
(
printableAreaWidth
)
/
pixelsPerInchX
;
double
printableAreaHeightInch
=
double
(
printableAreaHeight
)
/
pixelsPerInchY
;
int32_t
physicalWidth
=
GetDeviceCaps
(
aHdc
PHYSICALWIDTH
)
;
int32_t
physicalHeight
=
GetDeviceCaps
(
aHdc
PHYSICALHEIGHT
)
;
double
physicalWidthInch
=
double
(
physicalWidth
)
/
pixelsPerInchX
;
double
physicalHeightInch
=
double
(
physicalHeight
)
/
pixelsPerInchY
;
double
marginBottomInch
=
physicalHeightInch
-
printableAreaHeightInch
-
marginTopInch
;
double
marginRightInch
=
physicalWidthInch
-
printableAreaWidthInch
-
marginLeftInch
;
mUnwriteableMargin
.
SizeTo
(
NS_INCHES_TO_INT_TWIPS
(
marginTopInch
)
NS_INCHES_TO_INT_TWIPS
(
marginRightInch
)
NS_INCHES_TO_INT_TWIPS
(
marginBottomInch
)
NS_INCHES_TO_INT_TWIPS
(
marginLeftInch
)
)
;
}
void
nsPrintSettingsWin
:
:
CopyFromNative
(
HDC
aHdc
DEVMODEW
*
aDevMode
)
{
MOZ_ASSERT
(
aHdc
)
;
MOZ_ASSERT
(
aDevMode
)
;
mIsInitedFromPrinter
=
true
;
if
(
aDevMode
-
>
dmFields
&
DM_ORIENTATION
)
{
mOrientation
=
int32_t
(
aDevMode
-
>
dmOrientation
=
=
DMORIENT_PORTRAIT
?
kPortraitOrientation
:
kLandscapeOrientation
)
;
}
if
(
aDevMode
-
>
dmFields
&
DM_COPIES
)
{
mNumCopies
=
aDevMode
-
>
dmCopies
;
}
if
(
aDevMode
-
>
dmFields
&
DM_SCALE
)
{
double
scale
=
double
(
aDevMode
-
>
dmScale
)
/
100
.
0f
;
if
(
mScaling
=
=
1
.
0
|
|
scale
!
=
1
.
0
)
{
mScaling
=
scale
;
}
aDevMode
-
>
dmScale
=
100
;
}
if
(
aDevMode
-
>
dmFields
&
DM_PAPERSIZE
)
{
mPaperData
=
aDevMode
-
>
dmPaperSize
;
if
(
mPaperData
>
0
&
&
mPaperData
<
int32_t
(
mozilla
:
:
ArrayLength
(
kPaperSizeUnits
)
)
)
{
mPaperSizeUnit
=
kPaperSizeUnits
[
mPaperData
]
;
}
}
else
{
mPaperData
=
-
1
;
}
InitUnwriteableMargin
(
aHdc
)
;
double
sizeUnitToTenthsOfAmm
=
10L
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
MM_PER_INCH_FLOAT
:
1L
)
;
if
(
aDevMode
-
>
dmFields
&
DM_PAPERLENGTH
)
{
mPaperHeight
=
aDevMode
-
>
dmPaperLength
/
sizeUnitToTenthsOfAmm
;
}
else
{
mPaperHeight
=
-
1l
;
}
if
(
aDevMode
-
>
dmFields
&
DM_PAPERWIDTH
)
{
mPaperWidth
=
aDevMode
-
>
dmPaperWidth
/
sizeUnitToTenthsOfAmm
;
}
else
{
mPaperWidth
=
-
1l
;
}
int32_t
printableWidthInDots
=
GetDeviceCaps
(
aHdc
PHYSICALWIDTH
)
;
int32_t
printableHeightInDots
=
GetDeviceCaps
(
aHdc
PHYSICALHEIGHT
)
;
int32_t
heightDPI
=
GetDeviceCaps
(
aHdc
LOGPIXELSY
)
;
if
(
mOrientation
=
=
kPortraitOrientation
)
{
mPrintableWidthInInches
=
double
(
printableWidthInDots
)
/
heightDPI
;
mPrintableHeightInInches
=
double
(
printableHeightInDots
)
/
heightDPI
;
}
else
{
mPrintableHeightInInches
=
double
(
printableWidthInDots
)
/
heightDPI
;
mPrintableWidthInInches
=
double
(
printableHeightInDots
)
/
heightDPI
;
}
mResolution
=
heightDPI
;
}
void
nsPrintSettingsWin
:
:
CopyToNative
(
DEVMODEW
*
aDevMode
)
{
MOZ_ASSERT
(
aDevMode
)
;
if
(
mPaperData
>
=
0
)
{
aDevMode
-
>
dmPaperSize
=
mPaperData
;
aDevMode
-
>
dmFields
|
=
DM_PAPERSIZE
;
}
else
{
aDevMode
-
>
dmPaperSize
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERSIZE
;
}
double
sizeUnitToTenthsOfAmm
=
10L
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
MM_PER_INCH_FLOAT
:
1L
)
;
if
(
mPaperHeight
>
0
)
{
aDevMode
-
>
dmPaperLength
=
mPaperHeight
*
sizeUnitToTenthsOfAmm
;
aDevMode
-
>
dmFields
|
=
DM_PAPERLENGTH
;
}
else
{
aDevMode
-
>
dmPaperLength
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERLENGTH
;
}
if
(
mPaperWidth
>
0
)
{
aDevMode
-
>
dmPaperWidth
=
mPaperWidth
*
sizeUnitToTenthsOfAmm
;
aDevMode
-
>
dmFields
|
=
DM_PAPERWIDTH
;
}
else
{
aDevMode
-
>
dmPaperWidth
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERWIDTH
;
}
aDevMode
-
>
dmOrientation
=
mOrientation
=
=
kPortraitOrientation
?
DMORIENT_PORTRAIT
:
DMORIENT_LANDSCAPE
;
aDevMode
-
>
dmFields
|
=
DM_ORIENTATION
;
aDevMode
-
>
dmCopies
=
mNumCopies
;
aDevMode
-
>
dmFields
|
=
DM_COPIES
;
}
nsresult
nsPrintSettingsWin
:
:
_Clone
(
nsIPrintSettings
*
*
_retval
)
{
RefPtr
<
nsPrintSettingsWin
>
printSettings
=
new
nsPrintSettingsWin
(
*
this
)
;
printSettings
.
forget
(
_retval
)
;
return
NS_OK
;
}
nsPrintSettingsWin
&
nsPrintSettingsWin
:
:
operator
=
(
const
nsPrintSettingsWin
&
rhs
)
{
if
(
this
=
=
&
rhs
)
{
return
*
this
;
}
(
(
nsPrintSettings
&
)
*
this
)
=
rhs
;
if
(
mDevMode
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
}
mDeviceName
=
rhs
.
mDeviceName
;
mDriverName
=
rhs
.
mDriverName
;
if
(
rhs
.
mDevMode
)
{
CopyDevMode
(
rhs
.
mDevMode
mDevMode
)
;
}
else
{
mDevMode
=
nullptr
;
}
return
*
this
;
}
nsresult
nsPrintSettingsWin
:
:
_Assign
(
nsIPrintSettings
*
aPS
)
{
nsPrintSettingsWin
*
psWin
=
static_cast
<
nsPrintSettingsWin
*
>
(
aPS
)
;
*
this
=
*
psWin
;
return
NS_OK
;
}
#
ifdef
DEBUG_rodsX
#
include
"
nsIPrintSettingsService
.
h
"
#
include
"
nsIServiceManager
.
h
"
class
Tester
{
public
:
Tester
(
)
;
}
;
Tester
:
:
Tester
(
)
{
nsCOMPtr
<
nsIPrintSettings
>
ps
;
nsresult
rv
;
nsCOMPtr
<
nsIPrintSettingsService
>
printService
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
printService
-
>
CreatePrintSettings
(
getter_AddRefs
(
ps
)
)
;
}
if
(
ps
)
{
ps
-
>
SetPrintOptions
(
nsIPrintSettings
:
:
kPrintOddPages
true
)
;
ps
-
>
SetPrintOptions
(
nsIPrintSettings
:
:
kPrintEvenPages
false
)
;
ps
-
>
SetMarginTop
(
1
.
0
)
;
ps
-
>
SetMarginLeft
(
1
.
0
)
;
ps
-
>
SetMarginBottom
(
1
.
0
)
;
ps
-
>
SetMarginRight
(
1
.
0
)
;
ps
-
>
SetScaling
(
0
.
5
)
;
ps
-
>
SetPrintBGColors
(
true
)
;
ps
-
>
SetPrintBGImages
(
true
)
;
ps
-
>
SetPrintRange
(
15
)
;
ps
-
>
SetHeaderStrLeft
(
NS_ConvertUTF8toUTF16
(
"
Left
"
)
.
get
(
)
)
;
ps
-
>
SetHeaderStrCenter
(
NS_ConvertUTF8toUTF16
(
"
Center
"
)
.
get
(
)
)
;
ps
-
>
SetHeaderStrRight
(
NS_ConvertUTF8toUTF16
(
"
Right
"
)
.
get
(
)
)
;
ps
-
>
SetFooterStrLeft
(
NS_ConvertUTF8toUTF16
(
"
Left
"
)
.
get
(
)
)
;
ps
-
>
SetFooterStrCenter
(
NS_ConvertUTF8toUTF16
(
"
Center
"
)
.
get
(
)
)
;
ps
-
>
SetFooterStrRight
(
NS_ConvertUTF8toUTF16
(
"
Right
"
)
.
get
(
)
)
;
ps
-
>
SetPaperName
(
NS_ConvertUTF8toUTF16
(
"
Paper
Name
"
)
.
get
(
)
)
;
ps
-
>
SetPaperData
(
1
)
;
ps
-
>
SetPaperWidth
(
100
.
0
)
;
ps
-
>
SetPaperHeight
(
50
.
0
)
;
ps
-
>
SetPaperSizeUnit
(
nsIPrintSettings
:
:
kPaperSizeMillimeters
)
;
ps
-
>
SetPrintReversed
(
true
)
;
ps
-
>
SetPrintInColor
(
true
)
;
ps
-
>
SetOrientation
(
nsIPrintSettings
:
:
kLandscapeOrientation
)
;
ps
-
>
SetPrintCommand
(
NS_ConvertUTF8toUTF16
(
"
Command
"
)
.
get
(
)
)
;
ps
-
>
SetNumCopies
(
2
)
;
ps
-
>
SetPrinterName
(
NS_ConvertUTF8toUTF16
(
"
Printer
Name
"
)
.
get
(
)
)
;
ps
-
>
SetPrintToFile
(
true
)
;
ps
-
>
SetToFileName
(
NS_ConvertUTF8toUTF16
(
"
File
Name
"
)
.
get
(
)
)
;
ps
-
>
SetPrintPageDelay
(
1000
)
;
nsCOMPtr
<
nsIPrintSettings
>
ps2
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
printService
-
>
CreatePrintSettings
(
getter_AddRefs
(
ps2
)
)
;
}
ps2
-
>
Assign
(
ps
)
;
nsCOMPtr
<
nsIPrintSettings
>
psClone
;
ps2
-
>
Clone
(
getter_AddRefs
(
psClone
)
)
;
}
}
Tester
gTester
;
#
endif
