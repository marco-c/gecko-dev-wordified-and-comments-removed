#
include
"
nsPrintSettingsWin
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDeviceContextSpecWin
.
h
"
#
include
"
nsPrintSettingsImpl
.
h
"
#
include
"
WinUtils
.
h
"
using
namespace
mozilla
;
const
short
kPaperSizeUnits
[
]
=
{
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeInches
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
nsIPrintSettings
:
:
kPaperSizeMillimeters
}
;
NS_IMPL_ISUPPORTS_INHERITED
(
nsPrintSettingsWin
nsPrintSettings
nsIPrintSettingsWin
)
nsPrintSettingsWin
:
:
nsPrintSettingsWin
(
)
:
nsPrintSettings
(
)
mDeviceName
(
nullptr
)
mDriverName
(
nullptr
)
mDevMode
(
nullptr
)
{
}
nsPrintSettingsWin
:
:
nsPrintSettingsWin
(
const
nsPrintSettingsWin
&
aPS
)
:
mDevMode
(
nullptr
)
{
*
this
=
aPS
;
}
void
nsPrintSettingsWin
:
:
InitWithInitializer
(
const
PrintSettingsInitializer
&
aSettings
)
{
nsPrintSettings
:
:
InitWithInitializer
(
aSettings
)
;
if
(
aSettings
.
mDevmodeWStorage
.
Length
(
)
<
sizeof
(
DEVMODEW
)
)
{
return
;
}
SetDevMode
(
const_cast
<
DEVMODEW
*
>
(
reinterpret_cast
<
const
DEVMODEW
*
>
(
aSettings
.
mDevmodeWStorage
.
Elements
(
)
)
)
)
;
if
(
mDevMode
-
>
dmFields
&
DM_ORIENTATION
)
{
const
bool
areSheetsOfPaperPortraitMode
=
(
mDevMode
-
>
dmOrientation
=
=
DMORIENT_PORTRAIT
)
;
const
bool
arePagesPortraitMode
=
(
areSheetsOfPaperPortraitMode
!
=
HasOrthogonalSheetsAndPages
(
)
)
;
SetOrientation
(
arePagesPortraitMode
?
kPortraitOrientation
:
kLandscapeOrientation
)
;
}
if
(
mDevMode
-
>
dmFields
&
DM_COPIES
)
{
SetNumCopies
(
mDevMode
-
>
dmCopies
)
;
}
if
(
mDevMode
-
>
dmFields
&
DM_SCALE
)
{
double
scale
=
double
(
mDevMode
-
>
dmScale
)
/
100
.
0f
;
if
(
mScaling
=
=
1
.
0
|
|
scale
!
=
1
.
0
)
{
SetScaling
(
scale
)
;
}
mDevMode
-
>
dmScale
=
100
;
}
if
(
mDevMode
-
>
dmFields
&
DM_PAPERSIZE
)
{
nsString
paperIdString
;
paperIdString
.
AppendInt
(
mDevMode
-
>
dmPaperSize
)
;
SetPaperId
(
paperIdString
)
;
if
(
mDevMode
-
>
dmPaperSize
>
0
&
&
mDevMode
-
>
dmPaperSize
<
int32_t
(
ArrayLength
(
kPaperSizeUnits
)
)
)
{
SetPaperSizeUnit
(
kPaperSizeUnits
[
mDevMode
-
>
dmPaperSize
]
)
;
}
}
if
(
mDevMode
-
>
dmFields
&
DM_COLOR
)
{
SetPrintInColor
(
mDevMode
-
>
dmColor
=
=
DMCOLOR_COLOR
)
;
}
if
(
mDevMode
-
>
dmFields
&
DM_DUPLEX
)
{
switch
(
mDevMode
-
>
dmDuplex
)
{
default
:
MOZ_ASSERT_UNREACHABLE
(
"
bad
value
for
dmDuplex
field
"
)
;
[
[
fallthrough
]
]
;
case
DMDUP_SIMPLEX
:
SetDuplex
(
kDuplexNone
)
;
break
;
case
DMDUP_VERTICAL
:
SetDuplex
(
kDuplexFlipOnSideEdge
)
;
break
;
case
DMDUP_HORIZONTAL
:
SetDuplex
(
kDuplexFlipOnTopEdge
)
;
break
;
}
}
double
pointsToSizeUnit
=
mPaperSizeUnit
=
=
kPaperSizeInches
?
1
.
0
/
72
.
0
:
25
.
4
/
72
.
0
;
SetPaperWidth
(
aSettings
.
mPaperInfo
.
mSize
.
width
*
pointsToSizeUnit
)
;
SetPaperHeight
(
aSettings
.
mPaperInfo
.
mSize
.
height
*
pointsToSizeUnit
)
;
}
already_AddRefed
<
nsIPrintSettings
>
CreatePlatformPrintSettings
(
const
PrintSettingsInitializer
&
aSettings
)
{
auto
settings
=
MakeRefPtr
<
nsPrintSettingsWin
>
(
)
;
settings
-
>
InitWithInitializer
(
aSettings
)
;
return
settings
.
forget
(
)
;
}
nsPrintSettingsWin
:
:
~
nsPrintSettingsWin
(
)
{
if
(
mDevMode
)
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDeviceName
(
const
nsAString
&
aDeviceName
)
{
mDeviceName
=
aDeviceName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDeviceName
(
nsAString
&
aDeviceName
)
{
aDeviceName
=
mDeviceName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDriverName
(
const
nsAString
&
aDriverName
)
{
mDriverName
=
aDriverName
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDriverName
(
nsAString
&
aDriverName
)
{
aDriverName
=
mDriverName
;
return
NS_OK
;
}
void
nsPrintSettingsWin
:
:
CopyDevMode
(
DEVMODEW
*
aInDevMode
DEVMODEW
*
&
aOutDevMode
)
{
aOutDevMode
=
nullptr
;
size_t
size
=
aInDevMode
-
>
dmSize
+
aInDevMode
-
>
dmDriverExtra
;
aOutDevMode
=
(
LPDEVMODEW
)
:
:
HeapAlloc
(
:
:
GetProcessHeap
(
)
HEAP_ZERO_MEMORY
size
)
;
if
(
aOutDevMode
)
{
memcpy
(
aOutDevMode
aInDevMode
size
)
;
}
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
GetDevMode
(
DEVMODEW
*
*
aDevMode
)
{
NS_ENSURE_ARG_POINTER
(
aDevMode
)
;
if
(
mDevMode
)
{
CopyDevMode
(
mDevMode
*
aDevMode
)
;
}
else
{
*
aDevMode
=
nullptr
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsWin
:
:
SetDevMode
(
DEVMODEW
*
aDevMode
)
{
if
(
mDevMode
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
mDevMode
=
nullptr
;
}
if
(
aDevMode
)
{
CopyDevMode
(
aDevMode
mDevMode
)
;
}
return
NS_OK
;
}
void
nsPrintSettingsWin
:
:
InitUnwriteableMargin
(
HDC
aHdc
)
{
mozilla
:
:
gfx
:
:
MarginDouble
margin
=
mozilla
:
:
widget
:
:
WinUtils
:
:
GetUnwriteableMarginsForDeviceInInches
(
aHdc
)
;
mUnwriteableMargin
.
SizeTo
(
NS_INCHES_TO_INT_TWIPS
(
margin
.
top
)
NS_INCHES_TO_INT_TWIPS
(
margin
.
right
)
NS_INCHES_TO_INT_TWIPS
(
margin
.
bottom
)
NS_INCHES_TO_INT_TWIPS
(
margin
.
left
)
)
;
}
void
nsPrintSettingsWin
:
:
CopyFromNative
(
HDC
aHdc
DEVMODEW
*
aDevMode
)
{
MOZ_ASSERT
(
aHdc
)
;
MOZ_ASSERT
(
aDevMode
)
;
mIsInitedFromPrinter
=
true
;
if
(
aDevMode
-
>
dmFields
&
DM_ORIENTATION
)
{
const
bool
areSheetsOfPaperPortraitMode
=
(
aDevMode
-
>
dmOrientation
=
=
DMORIENT_PORTRAIT
)
;
const
bool
arePagesPortraitMode
=
(
areSheetsOfPaperPortraitMode
!
=
HasOrthogonalSheetsAndPages
(
)
)
;
mOrientation
=
int32_t
(
arePagesPortraitMode
?
kPortraitOrientation
:
kLandscapeOrientation
)
;
}
if
(
aDevMode
-
>
dmFields
&
DM_COPIES
)
{
mNumCopies
=
aDevMode
-
>
dmCopies
;
}
if
(
aDevMode
-
>
dmFields
&
DM_DUPLEX
)
{
switch
(
aDevMode
-
>
dmDuplex
)
{
default
:
MOZ_ASSERT_UNREACHABLE
(
"
bad
value
for
dmDuplex
field
"
)
;
[
[
fallthrough
]
]
;
case
DMDUP_SIMPLEX
:
mDuplex
=
kDuplexNone
;
break
;
case
DMDUP_VERTICAL
:
mDuplex
=
kDuplexFlipOnSideEdge
;
break
;
case
DMDUP_HORIZONTAL
:
mDuplex
=
kDuplexFlipOnTopEdge
;
break
;
}
}
if
(
aDevMode
-
>
dmFields
&
DM_SCALE
)
{
double
scale
=
double
(
aDevMode
-
>
dmScale
)
/
100
.
0f
;
if
(
mScaling
=
=
1
.
0
|
|
scale
!
=
1
.
0
)
{
mScaling
=
scale
;
}
aDevMode
-
>
dmScale
=
100
;
}
if
(
aDevMode
-
>
dmFields
&
DM_PAPERSIZE
)
{
mPaperId
.
Truncate
(
0
)
;
mPaperId
.
AppendInt
(
aDevMode
-
>
dmPaperSize
)
;
if
(
aDevMode
-
>
dmPaperSize
>
0
&
&
aDevMode
-
>
dmPaperSize
<
int32_t
(
ArrayLength
(
kPaperSizeUnits
)
)
)
{
mPaperSizeUnit
=
kPaperSizeUnits
[
aDevMode
-
>
dmPaperSize
]
;
}
}
if
(
aDevMode
-
>
dmFields
&
DM_COLOR
)
{
mPrintInColor
=
aDevMode
-
>
dmColor
=
=
DMCOLOR_COLOR
;
}
InitUnwriteableMargin
(
aHdc
)
;
int
pixelsPerInchY
=
:
:
GetDeviceCaps
(
aHdc
LOGPIXELSY
)
;
int
physicalHeight
=
:
:
GetDeviceCaps
(
aHdc
PHYSICALHEIGHT
)
;
double
physicalHeightInch
=
double
(
physicalHeight
)
/
pixelsPerInchY
;
int
pixelsPerInchX
=
:
:
GetDeviceCaps
(
aHdc
LOGPIXELSX
)
;
int
physicalWidth
=
:
:
GetDeviceCaps
(
aHdc
PHYSICALWIDTH
)
;
double
physicalWidthInch
=
double
(
physicalWidth
)
/
pixelsPerInchX
;
double
sizeUnitToTenthsOfAmm
=
10L
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
MM_PER_INCH_FLOAT
:
1L
)
;
if
(
aDevMode
-
>
dmFields
&
DM_PAPERLENGTH
)
{
mPaperHeight
=
aDevMode
-
>
dmPaperLength
/
sizeUnitToTenthsOfAmm
;
}
else
{
double
paperHeightInch
=
mOrientation
=
=
kPortraitOrientation
?
physicalHeightInch
:
physicalWidthInch
;
mPaperHeight
=
mPaperSizeUnit
=
=
kPaperSizeInches
?
paperHeightInch
:
paperHeightInch
*
MM_PER_INCH_FLOAT
;
}
if
(
aDevMode
-
>
dmFields
&
DM_PAPERWIDTH
)
{
mPaperWidth
=
aDevMode
-
>
dmPaperWidth
/
sizeUnitToTenthsOfAmm
;
}
else
{
double
paperWidthInch
=
mOrientation
=
=
kPortraitOrientation
?
physicalWidthInch
:
physicalHeightInch
;
mPaperWidth
=
mPaperSizeUnit
=
=
kPaperSizeInches
?
paperWidthInch
:
paperWidthInch
*
MM_PER_INCH_FLOAT
;
}
mResolution
=
pixelsPerInchY
;
}
void
nsPrintSettingsWin
:
:
CopyToNative
(
DEVMODEW
*
aDevMode
)
{
MOZ_ASSERT
(
aDevMode
)
;
if
(
!
mPaperId
.
IsEmpty
(
)
)
{
aDevMode
-
>
dmPaperSize
=
_wtoi
(
(
const
wchar_t
*
)
mPaperId
.
BeginReading
(
)
)
;
aDevMode
-
>
dmFields
|
=
DM_PAPERSIZE
;
}
else
{
aDevMode
-
>
dmPaperSize
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERSIZE
;
}
aDevMode
-
>
dmFields
|
=
DM_COLOR
;
aDevMode
-
>
dmColor
=
mPrintInColor
?
DMCOLOR_COLOR
:
DMCOLOR_MONOCHROME
;
double
sizeUnitToTenthsOfAmm
=
10L
*
(
mPaperSizeUnit
=
=
kPaperSizeInches
?
MM_PER_INCH_FLOAT
:
1L
)
;
if
(
mPaperHeight
>
0
)
{
aDevMode
-
>
dmPaperLength
=
mPaperHeight
*
sizeUnitToTenthsOfAmm
;
aDevMode
-
>
dmFields
|
=
DM_PAPERLENGTH
;
}
else
{
aDevMode
-
>
dmPaperLength
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERLENGTH
;
}
if
(
mPaperWidth
>
0
)
{
aDevMode
-
>
dmPaperWidth
=
mPaperWidth
*
sizeUnitToTenthsOfAmm
;
aDevMode
-
>
dmFields
|
=
DM_PAPERWIDTH
;
}
else
{
aDevMode
-
>
dmPaperWidth
=
0
;
aDevMode
-
>
dmFields
&
=
~
DM_PAPERWIDTH
;
}
aDevMode
-
>
dmOrientation
=
GetSheetOrientation
(
)
=
=
kPortraitOrientation
?
DMORIENT_PORTRAIT
:
DMORIENT_LANDSCAPE
;
aDevMode
-
>
dmFields
|
=
DM_ORIENTATION
;
aDevMode
-
>
dmCopies
=
mNumCopies
;
aDevMode
-
>
dmFields
|
=
DM_COPIES
;
switch
(
mDuplex
)
{
case
kDuplexNone
:
aDevMode
-
>
dmDuplex
=
DMDUP_SIMPLEX
;
aDevMode
-
>
dmFields
|
=
DM_DUPLEX
;
break
;
case
kDuplexFlipOnSideEdge
:
aDevMode
-
>
dmDuplex
=
DMDUP_VERTICAL
;
aDevMode
-
>
dmFields
|
=
DM_DUPLEX
;
break
;
case
kDuplexFlipOnTopEdge
:
aDevMode
-
>
dmDuplex
=
DMDUP_HORIZONTAL
;
aDevMode
-
>
dmFields
|
=
DM_DUPLEX
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
bad
value
for
duplex
option
"
)
;
break
;
}
}
nsresult
nsPrintSettingsWin
:
:
_Clone
(
nsIPrintSettings
*
*
_retval
)
{
RefPtr
<
nsPrintSettingsWin
>
printSettings
=
new
nsPrintSettingsWin
(
*
this
)
;
printSettings
.
forget
(
_retval
)
;
return
NS_OK
;
}
nsPrintSettingsWin
&
nsPrintSettingsWin
:
:
operator
=
(
const
nsPrintSettingsWin
&
rhs
)
{
if
(
this
=
=
&
rhs
)
{
return
*
this
;
}
(
(
nsPrintSettings
&
)
*
this
)
=
rhs
;
if
(
mDevMode
)
{
:
:
HeapFree
(
:
:
GetProcessHeap
(
)
0
mDevMode
)
;
}
mDeviceName
=
rhs
.
mDeviceName
;
mDriverName
=
rhs
.
mDriverName
;
if
(
rhs
.
mDevMode
)
{
CopyDevMode
(
rhs
.
mDevMode
mDevMode
)
;
}
else
{
mDevMode
=
nullptr
;
}
return
*
this
;
}
nsresult
nsPrintSettingsWin
:
:
_Assign
(
nsIPrintSettings
*
aPS
)
{
nsPrintSettingsWin
*
psWin
=
static_cast
<
nsPrintSettingsWin
*
>
(
aPS
)
;
*
this
=
*
psWin
;
return
NS_OK
;
}
