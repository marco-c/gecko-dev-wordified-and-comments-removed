#
ifndef
widget_windows_WinCompositorWidget_h
#
define
widget_windows_WinCompositorWidget_h
#
include
"
CompositorWidget
.
h
"
#
include
"
gfxASurface
.
h
"
#
include
"
mozilla
/
gfx
/
CriticalSection
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
widget
/
WinCompositorWindowThread
.
h
"
#
include
"
FxROutputHandler
.
h
"
#
include
"
nsIWidget
.
h
"
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
PlatformCompositorWidgetDelegate
:
public
CompositorWidgetDelegate
{
public
:
virtual
void
EnterPresentLock
(
)
=
0
;
virtual
void
LeavePresentLock
(
)
=
0
;
virtual
void
OnDestroyWindow
(
)
=
0
;
virtual
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
=
0
;
virtual
void
ClearTransparentWindow
(
)
=
0
;
virtual
HDC
GetTransparentDC
(
)
const
=
0
;
virtual
void
SetParentWnd
(
const
HWND
aParentWnd
)
{
}
virtual
void
UpdateCompositorWnd
(
const
HWND
aCompositorWnd
const
HWND
aParentWnd
)
{
}
PlatformCompositorWidgetDelegate
*
AsPlatformSpecificDelegate
(
)
override
{
return
this
;
}
}
;
class
WinCompositorWidgetInitData
;
class
WinCompositorWidget
:
public
CompositorWidget
public
PlatformCompositorWidgetDelegate
{
public
:
WinCompositorWidget
(
const
WinCompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
)
;
~
WinCompositorWidget
(
)
override
;
bool
PreRender
(
WidgetRenderingContext
*
)
override
;
void
PostRender
(
WidgetRenderingContext
*
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
override
;
void
EndRemoteDrawing
(
)
override
;
bool
NeedsToDeferEndRemoteDrawing
(
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
gfx
:
:
IntRect
&
aRect
bool
*
aOutIsCleared
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
override
;
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
override
;
uintptr_t
GetWidgetKey
(
)
override
;
WinCompositorWidget
*
AsWindows
(
)
override
{
return
this
;
}
CompositorWidgetDelegate
*
AsDelegate
(
)
override
{
return
this
;
}
bool
IsHidden
(
)
const
override
;
void
EnterPresentLock
(
)
override
;
void
LeavePresentLock
(
)
override
;
void
OnDestroyWindow
(
)
override
;
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
override
;
void
ClearTransparentWindow
(
)
override
;
bool
RedrawTransparentWindow
(
)
;
RefPtr
<
gfxASurface
>
EnsureTransparentSurface
(
)
;
HDC
GetTransparentDC
(
)
const
override
{
return
mMemoryDC
;
}
HWND
GetHwnd
(
)
const
{
return
mCompositorWnds
.
mCompositorWnd
?
mCompositorWnds
.
mCompositorWnd
:
mWnd
;
}
HWND
GetCompositorHwnd
(
)
const
{
return
mCompositorWnds
.
mCompositorWnd
;
}
void
EnsureCompositorWindow
(
)
;
void
DestroyCompositorWindow
(
)
;
void
UpdateCompositorWndSizeIfNecessary
(
)
;
mozilla
:
:
Mutex
&
GetTransparentSurfaceLock
(
)
{
return
mTransparentSurfaceLock
;
}
void
RequestFxrOutput
(
)
;
bool
HasFxrOutputHandler
(
)
const
{
return
mFxrHandler
!
=
nullptr
;
}
FxROutputHandler
*
GetFxrOutputHandler
(
)
const
{
return
mFxrHandler
.
get
(
)
;
}
protected
:
private
:
HDC
GetWindowSurface
(
)
;
void
FreeWindowSurface
(
HDC
dc
)
;
void
CreateTransparentSurface
(
const
gfx
:
:
IntSize
&
aSize
)
;
private
:
uintptr_t
mWidgetKey
;
HWND
mWnd
;
WinCompositorWnds
mCompositorWnds
;
LayoutDeviceIntSize
mLastCompositorWndSize
;
gfx
:
:
CriticalSection
mPresentLock
;
mozilla
:
:
Mutex
mTransparentSurfaceLock
;
nsTransparencyMode
mTransparencyMode
;
RefPtr
<
gfxASurface
>
mTransparentSurface
;
HDC
mMemoryDC
;
HDC
mCompositeDC
;
uint8_t
*
mLockedBackBufferData
;
bool
mNotDeferEndRemoteDrawing
;
UniquePtr
<
FxROutputHandler
>
mFxrHandler
;
}
;
}
}
#
endif
