#
ifndef
widget_windows_CompositorWidgetParent_h
#
define
widget_windows_CompositorWidgetParent_h
#
include
"
CompositorWidget
.
h
"
#
include
"
gfxASurface
.
h
"
#
include
"
mozilla
/
gfx
/
CriticalSection
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
nsIWidget
.
h
"
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
CompositorWidgetDelegate
{
public
:
virtual
void
EnterPresentLock
(
)
=
0
;
virtual
void
LeavePresentLock
(
)
=
0
;
virtual
void
OnDestroyWindow
(
)
=
0
;
virtual
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
=
0
;
virtual
void
ClearTransparentWindow
(
)
=
0
;
virtual
HDC
GetTransparentDC
(
)
const
=
0
;
}
;
class
WinCompositorWidget
:
public
CompositorWidget
public
CompositorWidgetDelegate
{
public
:
WinCompositorWidget
(
const
CompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
)
;
bool
PreRender
(
WidgetRenderingContext
*
)
override
;
void
PostRender
(
WidgetRenderingContext
*
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
override
;
void
EndRemoteDrawing
(
)
override
;
bool
NeedsToDeferEndRemoteDrawing
(
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
LayoutDeviceIntRect
&
aRect
const
LayoutDeviceIntRect
&
aClearRect
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
override
;
bool
InitCompositor
(
layers
:
:
Compositor
*
aCompositor
)
override
;
uintptr_t
GetWidgetKey
(
)
override
;
WinCompositorWidget
*
AsWindows
(
)
override
{
return
this
;
}
CompositorWidgetDelegate
*
AsDelegate
(
)
override
{
return
this
;
}
void
EnterPresentLock
(
)
override
;
void
LeavePresentLock
(
)
override
;
void
OnDestroyWindow
(
)
override
;
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
override
;
void
ClearTransparentWindow
(
)
override
;
bool
RedrawTransparentWindow
(
)
;
RefPtr
<
gfxASurface
>
EnsureTransparentSurface
(
)
;
HDC
GetTransparentDC
(
)
const
override
{
return
mMemoryDC
;
}
HWND
GetHwnd
(
)
const
{
return
mWnd
;
}
private
:
HDC
GetWindowSurface
(
)
;
void
FreeWindowSurface
(
HDC
dc
)
;
void
CreateTransparentSurface
(
const
gfx
:
:
IntSize
&
aSize
)
;
private
:
uintptr_t
mWidgetKey
;
HWND
mWnd
;
gfx
:
:
CriticalSection
mPresentLock
;
nsTransparencyMode
mTransparencyMode
;
RefPtr
<
gfxASurface
>
mTransparentSurface
;
HDC
mMemoryDC
;
HDC
mCompositeDC
;
uint8_t
*
mLockedBackBufferData
;
bool
mNotDeferEndRemoteDrawing
;
}
;
}
}
#
endif
