#
ifndef
WindowDbg_h__
#
define
WindowDbg_h__
#
include
"
nsWindowDefs
.
h
"
class
PrintEvent
final
{
public
:
PrintEvent
(
UINT
msg
WPARAM
wParam
LPARAM
lParam
LRESULT
retValue
)
;
void
SetResult
(
bool
result
)
{
mResult
=
mozilla
:
:
Some
(
result
)
;
}
~
PrintEvent
(
)
;
private
:
bool
PrintEventInternal
(
)
;
const
UINT
mMsg
;
const
WPARAM
mWParam
;
const
LPARAM
mLParam
;
const
LRESULT
mRetValue
;
mozilla
:
:
Maybe
<
long
>
mEventCounter
;
mozilla
:
:
Maybe
<
bool
>
mResult
;
bool
mShouldLogPostCall
;
}
;
namespace
mozilla
:
:
widget
{
nsAutoCString
DefaultParamInfoFn
(
uint64_t
wParam
uint64_t
lParam
bool
firstCall
)
;
struct
EnumValueAndName
{
uint64_t
mFlag
;
const
char
*
mName
;
}
;
bool
AppendFlagsInfo
(
nsAutoCString
&
str
uint64_t
flags
const
nsTArray
<
EnumValueAndName
>
&
flagsAndNames
const
char
*
name
)
;
}
#
if
defined
(
POPUP_ROLLUP_DEBUG_OUTPUT
)
typedef
struct
{
char
*
mStr
;
int
mId
;
}
MSGFEventMsgInfo
;
#
define
DISPLAY_NMM_PRT
(
_arg
)
\
MOZ_LOG
(
gWindowsLog
mozilla
:
:
LogLevel
:
:
Info
(
(
_arg
)
)
)
;
#
else
#
define
DISPLAY_NMM_PRT
(
_arg
)
#
endif
#
if
defined
(
DEBUG
)
void
DDError
(
const
char
*
msg
HRESULT
hr
)
;
#
endif
#
if
defined
(
DEBUG_VK
)
bool
is_vk_down
(
int
vk
)
;
#
define
IS_VK_DOWN
is_vk_down
#
else
#
define
IS_VK_DOWN
(
a
)
(
GetKeyState
(
a
)
<
0
)
#
endif
#
endif
