#
include
"
ToastNotification
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
ToastNotificationHandler
.
h
"
#
include
"
WinTaskbar
.
h
"
#
include
"
mozilla
/
Services
.
h
"
namespace
mozilla
{
namespace
widget
{
NS_IMPL_ISUPPORTS
(
ToastNotification
nsIAlertsService
nsIAlertsDoNotDisturb
nsIObserver
)
ToastNotification
:
:
ToastNotification
(
)
=
default
;
ToastNotification
:
:
~
ToastNotification
(
)
=
default
;
nsresult
ToastNotification
:
:
Init
(
)
{
if
(
!
IsWin8OrLater
(
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsAutoString
uid
;
if
(
NS_WARN_IF
(
!
WinTaskbar
:
:
GetAppUserModelID
(
uid
)
)
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsresult
rv
=
NS_NewNamedThread
(
"
ToastBgThread
"
getter_AddRefs
(
mBackgroundThread
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIObserverService
>
obsServ
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obsServ
)
{
obsServ
-
>
AddObserver
(
this
"
quit
-
application
"
true
)
;
}
return
NS_OK
;
}
nsresult
ToastNotification
:
:
BackgroundDispatch
(
nsIRunnable
*
runnable
)
{
return
mBackgroundThread
-
>
Dispatch
(
runnable
NS_DISPATCH_NORMAL
)
;
}
NS_IMETHODIMP
ToastNotification
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
for
(
auto
iter
=
mActiveHandlers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
ToastNotificationHandler
>
handler
=
iter
.
UserData
(
)
;
iter
.
Remove
(
)
;
handler
-
>
UnregisterHandler
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ToastNotification
:
:
ShowAlertNotification
(
const
nsAString
&
aImageUrl
const
nsAString
&
aAlertTitle
const
nsAString
&
aAlertText
bool
aAlertTextClickable
const
nsAString
&
aAlertCookie
nsIObserver
*
aAlertListener
const
nsAString
&
aAlertName
const
nsAString
&
aBidi
const
nsAString
&
aLang
const
nsAString
&
aData
nsIPrincipal
*
aPrincipal
bool
aInPrivateBrowsing
bool
aRequireInteraction
)
{
nsCOMPtr
<
nsIAlertNotification
>
alert
=
do_CreateInstance
(
ALERT_NOTIFICATION_CONTRACTID
)
;
if
(
NS_WARN_IF
(
!
alert
)
)
{
return
NS_ERROR_FAILURE
;
}
nsTArray
<
uint32_t
>
vibrate
;
nsresult
rv
=
alert
-
>
Init
(
aAlertName
aImageUrl
aAlertTitle
aAlertText
aAlertTextClickable
aAlertCookie
aBidi
aLang
aData
aPrincipal
aInPrivateBrowsing
aRequireInteraction
false
vibrate
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
ShowAlert
(
alert
aAlertListener
)
;
}
NS_IMETHODIMP
ToastNotification
:
:
ShowPersistentNotification
(
const
nsAString
&
aPersistentData
nsIAlertNotification
*
aAlert
nsIObserver
*
aAlertListener
)
{
return
ShowAlert
(
aAlert
aAlertListener
)
;
}
NS_IMETHODIMP
ToastNotification
:
:
ShowAlert
(
nsIAlertNotification
*
aAlert
nsIObserver
*
aAlertListener
)
{
NS_ENSURE_ARG
(
aAlert
)
;
nsAutoString
cookie
;
MOZ_TRY
(
aAlert
-
>
GetCookie
(
cookie
)
)
;
nsAutoString
name
;
MOZ_TRY
(
aAlert
-
>
GetName
(
name
)
)
;
nsAutoString
title
;
MOZ_TRY
(
aAlert
-
>
GetTitle
(
title
)
)
;
nsAutoString
text
;
MOZ_TRY
(
aAlert
-
>
GetText
(
text
)
)
;
bool
textClickable
;
MOZ_TRY
(
aAlert
-
>
GetTextClickable
(
&
textClickable
)
)
;
nsAutoString
hostPort
;
MOZ_TRY
(
aAlert
-
>
GetSource
(
hostPort
)
)
;
RefPtr
<
ToastNotificationHandler
>
oldHandler
=
mActiveHandlers
.
Get
(
name
)
;
RefPtr
<
ToastNotificationHandler
>
handler
=
new
ToastNotificationHandler
(
this
aAlertListener
name
cookie
title
text
hostPort
textClickable
)
;
mActiveHandlers
.
InsertOrUpdate
(
name
RefPtr
{
handler
}
)
;
nsresult
rv
=
handler
-
>
InitAlertAsync
(
aAlert
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
mActiveHandlers
.
Remove
(
name
)
;
handler
-
>
UnregisterHandler
(
)
;
return
rv
;
}
if
(
oldHandler
)
{
oldHandler
-
>
UnregisterHandler
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ToastNotification
:
:
CloseAlert
(
const
nsAString
&
aAlertName
)
{
RefPtr
<
ToastNotificationHandler
>
handler
;
if
(
NS_WARN_IF
(
!
mActiveHandlers
.
Get
(
aAlertName
getter_AddRefs
(
handler
)
)
)
)
{
return
NS_OK
;
}
mActiveHandlers
.
Remove
(
aAlertName
)
;
handler
-
>
UnregisterHandler
(
)
;
return
NS_OK
;
}
bool
ToastNotification
:
:
IsActiveHandler
(
const
nsAString
&
aAlertName
ToastNotificationHandler
*
aHandler
)
{
RefPtr
<
ToastNotificationHandler
>
handler
;
if
(
NS_WARN_IF
(
!
mActiveHandlers
.
Get
(
aAlertName
getter_AddRefs
(
handler
)
)
)
)
{
return
false
;
}
return
handler
=
=
aHandler
;
}
void
ToastNotification
:
:
RemoveHandler
(
const
nsAString
&
aAlertName
ToastNotificationHandler
*
aHandler
)
{
if
(
IsActiveHandler
(
aAlertName
aHandler
)
)
{
RefPtr
<
ToastNotificationHandler
>
kungFuDeathGrip
(
aHandler
)
;
mActiveHandlers
.
Remove
(
aAlertName
)
;
aHandler
-
>
UnregisterHandler
(
)
;
}
}
}
}
