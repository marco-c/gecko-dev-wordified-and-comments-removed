#
ifndef
widget_windows_WinEventObserver_h
#
define
widget_windows_WinEventObserver_h
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
namespace
widget
{
class
WinEventObserver
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WinEventObserver
)
public
:
virtual
void
OnWinEventProc
(
HWND
aHwnd
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
)
{
}
virtual
void
Destroy
(
)
;
protected
:
virtual
~
WinEventObserver
(
)
;
bool
mDestroyed
=
false
;
}
;
class
WinEventHub
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WinEventHub
)
public
:
static
void
Ensure
(
)
;
static
RefPtr
<
WinEventHub
>
Get
(
)
{
return
sInstance
;
}
void
AddObserver
(
WinEventObserver
*
aObserver
)
;
void
RemoveObserver
(
WinEventObserver
*
aObserver
)
;
HWND
GetWnd
(
)
{
return
mHWnd
;
}
private
:
WinEventHub
(
)
;
~
WinEventHub
(
)
;
static
LRESULT
CALLBACK
WinEventProc
(
HWND
aHwnd
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
)
;
bool
Initialize
(
)
;
void
ProcessWinEventProc
(
HWND
hwnd
UINT
msg
WPARAM
wParam
LPARAM
lParam
)
;
HWND
mHWnd
=
nullptr
;
nsTHashSet
<
nsRefPtrHashKey
<
WinEventObserver
>
>
mObservers
;
static
StaticRefPtr
<
WinEventHub
>
sInstance
;
}
;
class
DisplayStatusListener
{
public
:
virtual
void
OnDisplayStateChanged
(
bool
aDisplayOn
)
=
0
;
}
;
class
DisplayStatusObserver
final
:
public
WinEventObserver
{
public
:
static
already_AddRefed
<
DisplayStatusObserver
>
Create
(
DisplayStatusListener
*
aListener
)
;
private
:
explicit
DisplayStatusObserver
(
DisplayStatusListener
*
aListener
)
;
virtual
~
DisplayStatusObserver
(
)
;
void
OnWinEventProc
(
HWND
aHwnd
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
)
override
;
DisplayStatusListener
*
mListener
;
HPOWERNOTIFY
mDisplayStatusHandle
=
nullptr
;
}
;
class
SessionChangeListener
{
public
:
virtual
void
OnSessionChange
(
WPARAM
aStatusCode
Maybe
<
bool
>
aIsCurrentSession
)
=
0
;
}
;
class
SessionChangeObserver
:
public
WinEventObserver
{
public
:
static
already_AddRefed
<
SessionChangeObserver
>
Create
(
SessionChangeListener
*
aListener
)
;
private
:
explicit
SessionChangeObserver
(
SessionChangeListener
*
aListener
)
;
virtual
~
SessionChangeObserver
(
)
;
void
Initialize
(
)
;
void
OnWinEventProc
(
HWND
aHwnd
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
)
override
;
SessionChangeListener
*
mListener
;
}
;
}
}
#
endif
