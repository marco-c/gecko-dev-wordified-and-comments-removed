#
ifndef
widget_windows_filedialog_WinFileDialogParent_h__
#
define
widget_windows_filedialog_WinFileDialogParent_h__
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ProcInfo
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
SpinEventLoopUntil
.
h
"
#
include
"
mozilla
/
dom
/
ChromeUtilsBinding
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessParent
.
h
"
#
include
"
mozilla
/
widget
/
filedialog
/
PWinFileDialogParent
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
:
:
widget
:
:
filedialog
{
class
WinFileDialogParent
:
public
PWinFileDialogParent
{
public
:
using
UtilityActorName
=
:
:
mozilla
:
:
UtilityActorName
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WinFileDialogParent
override
)
;
public
:
WinFileDialogParent
(
)
;
nsresult
BindToUtilityProcess
(
mozilla
:
:
ipc
:
:
UtilityProcessParent
*
aUtilityParent
)
;
UtilityActorName
GetActorName
(
)
{
return
UtilityActorName
:
:
WindowsFileDialog
;
}
private
:
~
WinFileDialogParent
(
)
;
void
ProcessingError
(
Result
aCode
const
char
*
aReason
)
override
;
}
;
class
ProcessProxy
{
public
:
using
WFDP
=
WinFileDialogParent
;
explicit
ProcessProxy
(
RefPtr
<
WFDP
>
&
&
obj
)
;
~
ProcessProxy
(
)
=
default
;
explicit
operator
bool
(
)
const
{
return
data
-
>
ptr
&
&
data
-
>
ptr
-
>
CanSend
(
)
;
}
bool
operator
!
(
)
const
{
return
!
bool
(
*
this
)
;
}
WFDP
&
operator
*
(
)
const
{
return
*
data
-
>
ptr
;
}
WFDP
*
operator
-
>
(
)
const
{
return
data
-
>
ptr
;
}
WFDP
*
get
(
)
const
{
return
data
-
>
ptr
;
}
ProcessProxy
(
ProcessProxy
const
&
that
)
=
default
;
ProcessProxy
(
ProcessProxy
&
&
)
=
default
;
private
:
struct
Contents
{
NS_INLINE_DECL_REFCOUNTING
(
Contents
)
;
public
:
explicit
Contents
(
RefPtr
<
WFDP
>
&
&
obj
)
;
RefPtr
<
WFDP
>
const
ptr
;
private
:
~
Contents
(
)
;
void
StopProcess
(
)
;
}
;
RefPtr
<
Contents
>
data
;
}
;
}
#
endif
