#
ifndef
widget_windows_filedialog_WinFileDialogCommands_h__
#
define
widget_windows_filedialog_WinFileDialogCommands_h__
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ipc
/
MessageLink
.
h
"
#
include
"
mozilla
/
widget
/
filedialog
/
WinFileDialogCommandsDefn
.
h
"
struct
IFileDialog
;
struct
IFileOpenDialog
;
namespace
mozilla
:
:
widget
:
:
filedialog
{
extern
LazyLogModule
sLogFileDialog
;
enum
class
FileDialogType
:
uint8_t
{
Open
Save
}
;
mozilla
:
:
Result
<
RefPtr
<
IFileDialog
>
HRESULT
>
MakeFileDialog
(
FileDialogType
)
;
[
[
nodiscard
]
]
HRESULT
ApplyCommands
(
:
:
IFileDialog
*
nsTArray
<
Command
>
const
&
commands
)
;
mozilla
:
:
Result
<
Results
HRESULT
>
GetFileResults
(
:
:
IFileDialog
*
)
;
mozilla
:
:
Result
<
nsString
HRESULT
>
GetFolderResults
(
:
:
IFileDialog
*
)
;
namespace
detail
{
void
LogProcessingError
(
LogModule
*
aModule
ipc
:
:
IProtocol
*
aCaller
ipc
:
:
HasResultCodes
:
:
Result
aCode
const
char
*
aReason
)
;
}
template
<
typename
R
>
using
Promise
=
MozPromise
<
R
HRESULT
true
>
;
RefPtr
<
Promise
<
Maybe
<
Results
>
>
>
SpawnFilePicker
(
HWND
parent
FileDialogType
type
nsTArray
<
Command
>
commands
)
;
RefPtr
<
Promise
<
Maybe
<
nsString
>
>
>
SpawnFolderPicker
(
HWND
parent
nsTArray
<
Command
>
commands
)
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
>
:
public
ContiguousEnumSerializerInclusive
<
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
:
:
Open
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
:
:
Save
>
{
}
;
}
#
endif
