#
ifndef
widget_windows_filedialog_WinFileDialogCommands_h__
#
define
widget_windows_filedialog_WinFileDialogCommands_h__
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
ipc
/
MessageLink
.
h
"
#
include
"
mozilla
/
widget
/
filedialog
/
WinFileDialogCommandsDefn
.
h
"
struct
IFileDialog
;
struct
IFileOpenDialog
;
namespace
mozilla
:
:
widget
:
:
filedialog
{
namespace
detail
{
template
<
typename
T
typename
E
bool
B
>
struct
PromiseInfo
{
using
ResolveT
=
T
;
using
RejectT
=
E
;
constexpr
static
const
bool
IsExclusive
=
B
;
using
Promise
=
MozPromise
<
T
E
B
>
;
}
;
template
<
typename
P
>
auto
DestructurePromiseImpl
(
P
&
&
)
{
static_assert
(
false
"
expected
P
=
RefPtr
<
MozPromise
<
.
.
.
>
>
"
)
;
}
template
<
typename
T
typename
E
bool
B
>
auto
DestructurePromiseImpl
(
RefPtr
<
MozPromise
<
T
E
B
>
>
&
&
)
-
>
PromiseInfo
<
T
E
B
>
;
template
<
typename
P
>
using
DestructurePromise
=
std
:
:
decay_t
<
decltype
(
DestructurePromiseImpl
(
std
:
:
declval
<
P
>
(
)
)
)
>
;
template
<
typename
T
typename
E
>
struct
ResultInfo
{
using
OkT
=
T
;
using
ErrorT
=
E
;
}
;
template
<
typename
R
>
auto
DestructureResultImpl
(
R
&
&
)
{
static_assert
(
false
"
expected
R
=
mozilla
:
:
Result
<
.
.
.
>
"
)
;
}
template
<
typename
T
typename
E
>
auto
DestructureResultImpl
(
mozilla
:
:
Result
<
T
E
>
&
&
)
-
>
ResultInfo
<
T
E
>
;
template
<
typename
R
>
using
DestructureResult
=
std
:
:
decay_t
<
decltype
(
DestructureResultImpl
(
std
:
:
declval
<
R
>
(
)
)
)
>
;
#
define
MOZ_ASSERT_SAME_TYPE
(
T1
T2
.
.
.
)
\
static_assert
(
std
:
:
is_same_v
<
T1
T2
>
#
#
__VA_ARGS__
)
}
extern
LazyLogModule
sLogFileDialog
;
struct
Error
{
enum
Kind
{
LocalError
RemoteError
IPCError
}
;
class
Location
{
uint32_t
value
;
constexpr
explicit
Location
(
uint32_t
value
)
:
value
(
value
)
{
}
constexpr
static
std
:
:
string_view
const
VALID_STRINGS
[
]
=
{
"
ApplyCommands
"
"
CoCreateInstance
(
CLSID_ShellLibrary
)
"
"
GetFileResults
:
GetShellItemPath
(
1
)
"
"
GetFileResults
:
GetShellItemPath
(
2
)
"
"
GetShellItemPath
"
"
IFileDialog
:
:
GetFileTypeIndex
"
"
IFileDialog
:
:
GetOptions
"
"
IFileDialog
:
:
GetResult
"
"
IFileDialog
:
:
GetResult
:
item
"
"
IFileDialog
:
:
Show
"
"
IFileOpenDialog
:
:
GetResults
"
"
IFileOpenDialog
:
:
GetResults
:
items
"
"
IPC
"
"
IShellItemArray
:
:
GetCount
"
"
IShellItemArray
:
:
GetItemAt
"
"
MakeFileDialog
"
"
NS_NewNamedThread
"
"
Save
+
FOS_ALLOWMULTISELECT
"
"
ShowFilePicker
"
"
ShowFolderPicker
"
"
ShowRemote
:
UtilityProcessManager
:
:
GetSingleton
"
"
ShowRemote
:
invocation
of
CreateWinFileDialogActor
"
"
UtilityProcessManager
:
:
CreateWinFileDialogActor
"
"
internal
IPC
failure
?
"
}
;
constexpr
static
size_t
VALID_STRINGS_COUNT
=
std
:
:
extent_v
<
decltype
(
VALID_STRINGS
)
>
;
static_assert
(
[
]
(
)
{
for
(
size_t
i
=
0
;
i
+
1
<
VALID_STRINGS_COUNT
;
+
+
i
)
{
if
(
!
(
VALID_STRINGS
[
i
]
<
VALID_STRINGS
[
i
+
1
]
)
)
{
return
false
;
}
}
return
true
;
}
(
)
"
VALID_STRINGS
should
be
ASCIIbetically
sorted
"
)
;
public
:
constexpr
uint32_t
Serialize
(
)
const
{
return
value
;
}
constexpr
static
Location
Deserialize
(
uint32_t
val
)
{
return
Location
{
val
}
;
}
public
:
constexpr
static
Location
npos
(
)
{
return
Location
{
~
uint32_t
(
0
)
}
;
}
constexpr
bool
IsValid
(
)
const
{
return
value
<
VALID_STRINGS_COUNT
;
}
constexpr
std
:
:
string_view
ToString
(
)
const
{
return
value
<
VALID_STRINGS_COUNT
?
VALID_STRINGS
[
value
]
:
"
<
bad
filedialog
:
:
Error
:
:
Location
?
>
"
;
}
constexpr
static
Location
FromString
(
StaticString
str
)
{
std
:
:
string_view
val
(
str
.
get
(
)
)
;
for
(
uint32_t
i
=
0
;
i
<
VALID_STRINGS_COUNT
;
+
+
i
)
{
if
(
val
=
=
VALID_STRINGS
[
i
]
)
return
Location
{
i
}
;
}
return
npos
(
)
;
}
constexpr
char
const
*
c_str
(
)
const
{
return
ToString
(
)
.
data
(
)
;
}
}
;
Kind
kind
;
Location
where
;
uint32_t
why
;
static
const
char
*
KindName
(
Kind
)
;
}
;
#
define
MOZ_FD_ERROR
(
kind_
where_
why_
)
\
(
[
]
(
HRESULT
why_arg_
)
-
>
:
:
mozilla
:
:
widget
:
:
filedialog
:
:
Error
{
\
using
Error
=
:
:
mozilla
:
:
widget
:
:
filedialog
:
:
Error
;
\
constexpr
static
const
Error
:
:
Location
loc
=
\
Error
:
:
Location
:
:
FromString
(
where_
)
;
\
static_assert
(
\
loc
.
IsValid
(
)
\
"
filedialog
:
:
Error
:
location
not
found
in
Error
:
:
VALID_STRINGS
"
)
;
\
return
Error
{
\
.
kind
=
Error
:
:
kind_
.
where
=
loc
.
why
=
(
uint32_t
)
why_arg_
}
;
\
}
(
why_
)
)
#
define
MOZ_FD_LOCAL_ERROR
(
where_
why_
)
MOZ_FD_ERROR
(
LocalError
where_
why_
)
template
<
typename
R
>
using
Promise
=
MozPromise
<
R
Error
true
>
;
enum
class
FileDialogType
:
uint8_t
{
Open
Save
}
;
mozilla
:
:
Result
<
RefPtr
<
IFileDialog
>
Error
>
MakeFileDialog
(
FileDialogType
)
;
mozilla
:
:
Result
<
Ok
Error
>
ApplyCommands
(
:
:
IFileDialog
*
nsTArray
<
Command
>
const
&
commands
)
;
mozilla
:
:
Result
<
Results
Error
>
GetFileResults
(
:
:
IFileDialog
*
)
;
mozilla
:
:
Result
<
nsString
Error
>
GetFolderResults
(
:
:
IFileDialog
*
)
;
namespace
detail
{
void
LogProcessingError
(
LogModule
*
aModule
ipc
:
:
IProtocol
*
aCaller
ipc
:
:
HasResultCodes
:
:
Result
aCode
const
char
*
aReason
)
;
}
RefPtr
<
Promise
<
Maybe
<
Results
>
>
>
SpawnFilePicker
(
HWND
parent
FileDialogType
type
nsTArray
<
Command
>
commands
)
;
RefPtr
<
Promise
<
Maybe
<
nsString
>
>
>
SpawnFolderPicker
(
HWND
parent
nsTArray
<
Command
>
commands
)
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
>
:
public
ContiguousEnumSerializerInclusive
<
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
:
:
Open
mozilla
:
:
widget
:
:
filedialog
:
:
FileDialogType
:
:
Save
>
{
}
;
}
#
endif
