#
ifndef
TSFStaticSink_h
#
define
TSFStaticSink_h
#
include
<
msctf
.
h
>
#
include
<
windows
.
h
>
#
include
<
winuser
.
h
>
#
include
"
TSFTextInputProcessorList
.
h
"
#
include
"
WinUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
:
:
widget
{
class
TSFStaticSink
final
:
public
ITfInputProcessorProfileActivationSink
{
public
:
static
TSFStaticSink
*
GetInstance
(
)
;
static
void
Shutdown
(
)
{
if
(
sInstance
)
{
sInstance
-
>
Destroy
(
)
;
sInstance
=
nullptr
;
}
}
bool
Init
(
ITfThreadMgr
*
aThreadMgr
ITfInputProcessorProfiles
*
aInputProcessorProfiles
)
;
STDMETHODIMP
QueryInterface
(
REFIID
riid
void
*
*
ppv
)
{
*
ppv
=
nullptr
;
if
(
IID_IUnknown
=
=
riid
|
|
IID_ITfInputProcessorProfileActivationSink
=
=
riid
)
{
*
ppv
=
static_cast
<
ITfInputProcessorProfileActivationSink
*
>
(
this
)
;
}
if
(
*
ppv
)
{
AddRef
(
)
;
return
S_OK
;
}
return
E_NOINTERFACE
;
}
NS_INLINE_DECL_IUNKNOWN_REFCOUNTING
(
TSFStaticSink
)
[
[
nodiscard
]
]
const
nsString
&
GetActiveTIPKeyboardDescription
(
)
const
{
return
mActiveTIPKeyboardDescription
;
}
[
[
nodiscard
]
]
static
bool
IsIMM_IMEActive
(
)
{
if
(
!
sInstance
|
|
!
sInstance
-
>
EnsureInitActiveTIPKeyboard
(
)
)
{
return
IsIMM_IME
(
:
:
GetKeyboardLayout
(
0
)
)
;
}
return
sInstance
-
>
mIsIMM_IME
;
}
[
[
nodiscard
]
]
static
bool
IsIMM_IME
(
HKL
aHKL
)
{
return
(
:
:
ImmGetIMEFileNameW
(
aHKL
nullptr
0
)
>
0
)
;
}
[
[
nodiscard
]
]
static
bool
IsTraditionalChinese
(
)
{
EnsureInstance
(
)
;
return
sInstance
&
&
sInstance
-
>
IsTraditionalChineseInternal
(
)
;
}
[
[
nodiscard
]
]
static
bool
IsSimplifiedChinese
(
)
{
EnsureInstance
(
)
;
return
sInstance
&
&
sInstance
-
>
IsSimplifiedChineseInternal
(
)
;
}
[
[
nodiscard
]
]
static
bool
IsJapanese
(
)
{
EnsureInstance
(
)
;
return
sInstance
&
&
sInstance
-
>
IsJapaneseInternal
(
)
;
}
[
[
nodiscard
]
]
static
bool
IsKorean
(
)
{
EnsureInstance
(
)
;
return
sInstance
&
&
sInstance
-
>
IsKoreanInternal
(
)
;
}
[
[
nodiscard
]
]
static
TextInputProcessorID
ActiveTIP
(
)
{
EnsureInstance
(
)
;
if
(
!
sInstance
|
|
!
sInstance
-
>
EnsureInitActiveTIPKeyboard
(
)
)
{
return
TextInputProcessorID
:
:
Unknown
;
}
sInstance
-
>
ComputeActiveTextInputProcessor
(
)
;
if
(
NS_WARN_IF
(
sInstance
-
>
mActiveTIP
=
=
TextInputProcessorID
:
:
NotComputed
)
)
{
return
TextInputProcessorID
:
:
Unknown
;
}
return
sInstance
-
>
mActiveTIP
;
}
static
bool
GetActiveTIPNameForTelemetry
(
nsAString
&
aName
)
;
static
bool
IsMSChangJieOrMSQuickActive
(
)
;
static
bool
IsMSPinyinOrMSWubiActive
(
)
;
static
bool
IsMSJapaneseIMEActive
(
)
;
static
bool
IsGoogleJapaneseInputActive
(
)
;
static
bool
IsATOKActive
(
)
;
static
bool
IsATOKReferringNativeCaretActive
(
)
;
private
:
static
void
EnsureInstance
(
)
{
if
(
!
sInstance
)
{
RefPtr
<
TSFStaticSink
>
staticSink
=
GetInstance
(
)
;
Unused
<
<
staticSink
;
}
}
[
[
nodiscard
]
]
bool
IsTraditionalChineseInternal
(
)
const
{
return
mLangID
=
=
0x0404
;
}
[
[
nodiscard
]
]
bool
IsSimplifiedChineseInternal
(
)
const
{
return
mLangID
=
=
0x0804
;
}
[
[
nodiscard
]
]
bool
IsJapaneseInternal
(
)
const
{
return
mLangID
=
=
0x0411
;
}
[
[
nodiscard
]
]
bool
IsKoreanInternal
(
)
const
{
return
mLangID
=
=
0x0412
;
}
[
[
nodiscard
]
]
bool
IsATOKActiveInternal
(
)
;
void
ComputeActiveTextInputProcessor
(
)
;
[
[
nodiscard
]
]
TextInputProcessorID
ComputeActiveTIPAsJapanese
(
)
;
[
[
nodiscard
]
]
TextInputProcessorID
ComputeActiveTIPAsTraditionalChinese
(
)
;
[
[
nodiscard
]
]
TextInputProcessorID
ComputeActiveTIPAsSimplifiedChinese
(
)
;
[
[
nodiscard
]
]
TextInputProcessorID
ComputeActiveTIPAsKorean
(
)
;
public
:
STDMETHODIMP
OnActivated
(
DWORD
LANGID
REFCLSID
REFGUID
REFGUID
HKL
DWORD
)
;
private
:
TSFStaticSink
(
)
=
default
;
virtual
~
TSFStaticSink
(
)
=
default
;
bool
EnsureInitActiveTIPKeyboard
(
)
;
void
Destroy
(
)
;
void
GetTIPDescription
(
REFCLSID
aTextService
LANGID
aLangID
REFGUID
aProfile
nsAString
&
aDescription
)
;
[
[
nodiscard
]
]
bool
IsTIPCategoryKeyboard
(
REFCLSID
aTextService
LANGID
aLangID
REFGUID
aProfile
)
;
TextInputProcessorID
mActiveTIP
=
TextInputProcessorID
:
:
NotComputed
;
DWORD
mIPProfileCookie
=
TF_INVALID_COOKIE
;
LANGID
mLangID
=
0
;
bool
mIsIMM_IME
=
false
;
bool
mOnActivatedCalled
=
false
;
RefPtr
<
ITfThreadMgr
>
mThreadMgr
;
RefPtr
<
ITfInputProcessorProfiles
>
mInputProcessorProfiles
;
nsString
mActiveTIPKeyboardDescription
;
GUID
mActiveTIPGUID
=
GUID_NULL
;
CLSID
mActiveTIPCLSID
=
CLSID_NULL
;
static
StaticRefPtr
<
TSFStaticSink
>
sInstance
;
}
;
}
#
endif
