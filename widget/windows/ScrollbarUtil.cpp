#
include
"
ScrollbarUtil
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RelativeLuminanceUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsNativeTheme
.
h
"
#
include
"
nsNativeBasicTheme
.
h
"
using
mozilla
:
:
ComputedStyle
;
using
mozilla
:
:
EventStates
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
RelativeLuminanceUtils
;
using
mozilla
:
:
Some
;
using
mozilla
:
:
StyleAppearance
;
using
mozilla
:
:
StyleScrollbarWidth
;
namespace
StaticPrefs
=
mozilla
:
:
StaticPrefs
;
bool
ScrollbarUtil
:
:
IsScrollbarWidthThin
(
ComputedStyle
*
aStyle
)
{
auto
scrollbarWidth
=
aStyle
-
>
StyleUIReset
(
)
-
>
mScrollbarWidth
;
return
scrollbarWidth
=
=
StyleScrollbarWidth
:
:
Thin
;
}
bool
ScrollbarUtil
:
:
IsScrollbarWidthThin
(
nsIFrame
*
aFrame
)
{
ComputedStyle
*
style
=
nsLayoutUtils
:
:
StyleForScrollbar
(
aFrame
)
;
return
IsScrollbarWidthThin
(
style
)
;
}
ComputedStyle
*
ScrollbarUtil
:
:
GetCustomScrollbarStyle
(
nsIFrame
*
aFrame
bool
*
aDarkScrollbar
)
{
ComputedStyle
*
style
=
nsLayoutUtils
:
:
StyleForScrollbar
(
aFrame
)
;
if
(
style
-
>
StyleUI
(
)
-
>
HasCustomScrollbars
(
)
)
{
return
style
;
}
bool
useDarkScrollbar
=
!
StaticPrefs
:
:
widget_disable_dark_scrollbar
(
)
&
&
nsNativeTheme
:
:
IsDarkBackground
(
aFrame
)
;
if
(
useDarkScrollbar
|
|
IsScrollbarWidthThin
(
style
)
)
{
if
(
aDarkScrollbar
)
{
*
aDarkScrollbar
=
useDarkScrollbar
;
}
return
style
;
}
return
nullptr
;
}
nscolor
ScrollbarUtil
:
:
GetScrollbarTrackColor
(
nsIFrame
*
aFrame
)
{
bool
darkScrollbar
=
false
;
ComputedStyle
*
style
=
GetCustomScrollbarStyle
(
aFrame
&
darkScrollbar
)
;
if
(
style
)
{
const
nsStyleUI
*
ui
=
style
-
>
StyleUI
(
)
;
auto
*
customColors
=
ui
-
>
mScrollbarColor
.
IsAuto
(
)
?
nullptr
:
&
ui
-
>
mScrollbarColor
.
AsColors
(
)
;
if
(
customColors
)
{
return
customColors
-
>
track
.
CalcColor
(
*
style
)
;
}
}
return
darkScrollbar
?
NS_RGBA
(
20
20
25
77
)
:
NS_RGB
(
240
240
240
)
;
}
nscolor
ScrollbarUtil
:
:
GetScrollbarThumbColor
(
nsIFrame
*
aFrame
EventStates
aEventStates
)
{
bool
darkScrollbar
=
false
;
ComputedStyle
*
style
=
GetCustomScrollbarStyle
(
aFrame
&
darkScrollbar
)
;
nscolor
color
=
darkScrollbar
?
NS_RGBA
(
249
249
250
102
)
:
NS_RGB
(
205
205
205
)
;
if
(
style
)
{
const
nsStyleUI
*
ui
=
style
-
>
StyleUI
(
)
;
auto
*
customColors
=
ui
-
>
mScrollbarColor
.
IsAuto
(
)
?
nullptr
:
&
ui
-
>
mScrollbarColor
.
AsColors
(
)
;
if
(
customColors
)
{
color
=
customColors
-
>
thumb
.
CalcColor
(
*
style
)
;
}
}
return
nsNativeBasicTheme
:
:
AdjustUnthemedScrollbarThumbColor
(
color
aEventStates
)
;
}
Maybe
<
nsITheme
:
:
Transparency
>
ScrollbarUtil
:
:
GetScrollbarPartTransparency
(
nsIFrame
*
aFrame
StyleAppearance
aAppearance
)
{
if
(
nsNativeTheme
:
:
IsWidgetScrollbarPart
(
aAppearance
)
)
{
if
(
ComputedStyle
*
style
=
ScrollbarUtil
:
:
GetCustomScrollbarStyle
(
aFrame
)
)
{
auto
*
ui
=
style
-
>
StyleUI
(
)
;
if
(
ui
-
>
mScrollbarColor
.
IsAuto
(
)
|
|
ui
-
>
mScrollbarColor
.
AsColors
(
)
.
track
.
MaybeTransparent
(
)
)
{
return
Some
(
nsITheme
:
:
eTransparent
)
;
}
switch
(
aAppearance
)
{
case
StyleAppearance
:
:
ScrollbarthumbHorizontal
:
case
StyleAppearance
:
:
ScrollbarthumbVertical
:
case
StyleAppearance
:
:
ScrollbarbuttonUp
:
case
StyleAppearance
:
:
ScrollbarbuttonDown
:
case
StyleAppearance
:
:
ScrollbarbuttonLeft
:
case
StyleAppearance
:
:
ScrollbarbuttonRight
:
return
Some
(
nsITheme
:
:
eTransparent
)
;
default
:
break
;
}
}
}
switch
(
aAppearance
)
{
case
StyleAppearance
:
:
ScrollbarHorizontal
:
case
StyleAppearance
:
:
ScrollbarVertical
:
case
StyleAppearance
:
:
Scrollcorner
:
case
StyleAppearance
:
:
Statusbar
:
return
Some
(
nsITheme
:
:
eOpaque
)
;
default
:
break
;
}
return
Nothing
(
)
;
}
