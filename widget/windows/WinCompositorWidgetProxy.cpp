#
include
"
WinCompositorWidgetProxy
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
VsyncDispatcher
.
h
"
namespace
mozilla
{
namespace
widget
{
WinCompositorWidgetProxy
:
:
WinCompositorWidgetProxy
(
nsWindow
*
aWindow
)
:
mWindow
(
aWindow
)
mWnd
(
reinterpret_cast
<
HWND
>
(
aWindow
-
>
GetNativeData
(
NS_NATIVE_WINDOW
)
)
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
!
aWindow
-
>
Destroyed
(
)
)
;
MOZ_ASSERT
(
mWnd
&
&
:
:
IsWindow
(
mWnd
)
)
;
}
bool
WinCompositorWidgetProxy
:
:
PreRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
{
mPresentLock
.
Enter
(
)
;
return
true
;
}
void
WinCompositorWidgetProxy
:
:
PostRender
(
layers
:
:
LayerManagerComposite
*
aManager
)
{
mPresentLock
.
Leave
(
)
;
}
void
WinCompositorWidgetProxy
:
:
EndRemoteDrawing
(
)
{
mWindow
-
>
EndRemoteDrawing
(
)
;
}
nsIWidget
*
WinCompositorWidgetProxy
:
:
RealWidget
(
)
{
return
mWindow
;
}
LayoutDeviceIntSize
WinCompositorWidgetProxy
:
:
GetClientSize
(
)
{
RECT
r
;
if
(
!
:
:
GetClientRect
(
mWnd
&
r
)
)
{
return
LayoutDeviceIntSize
(
)
;
}
return
LayoutDeviceIntSize
(
r
.
right
-
r
.
left
r
.
bottom
-
r
.
top
)
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
WinCompositorWidgetProxy
:
:
StartRemoteDrawing
(
)
{
return
mWindow
-
>
StartRemoteDrawing
(
)
;
}
already_AddRefed
<
CompositorVsyncDispatcher
>
WinCompositorWidgetProxy
:
:
GetCompositorVsyncDispatcher
(
)
{
RefPtr
<
CompositorVsyncDispatcher
>
cvd
=
mWindow
-
>
GetCompositorVsyncDispatcher
(
)
;
return
cvd
.
forget
(
)
;
}
void
WinCompositorWidgetProxy
:
:
EnterPresentLock
(
)
{
mPresentLock
.
Enter
(
)
;
}
void
WinCompositorWidgetProxy
:
:
LeavePresentLock
(
)
{
mPresentLock
.
Leave
(
)
;
}
}
}
