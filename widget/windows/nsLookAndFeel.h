#
ifndef
__nsLookAndFeel
#
define
__nsLookAndFeel
#
include
"
nsXPLookAndFeel
.
h
"
#
include
"
gfxFont
.
h
"
#
include
"
mozilla
/
RangedArray
.
h
"
#
include
"
nsIWindowsRegKey
.
h
"
#
ifndef
SM_DIGITIZER
#
define
SM_DIGITIZER
94
#
define
TABLET_CONFIG_NONE
0x00000000
#
define
NID_INTEGRATED_TOUCH
0x00000001
#
define
NID_EXTERNAL_TOUCH
0x00000002
#
define
NID_INTEGRATED_PEN
0x00000004
#
define
NID_EXTERNAL_PEN
0x00000008
#
define
NID_MULTI_INPUT
0x00000040
#
define
NID_READY
0x00000080
#
endif
#
ifndef
SM_SYSTEMDOCKED
#
define
SM_CONVERTIBLESLATEMODE
0x00002003
#
define
SM_SYSTEMDOCKED
0x00002004
#
endif
class
nsLookAndFeel
:
public
nsXPLookAndFeel
{
static
OperatingSystemVersion
GetOperatingSystemVersion
(
)
;
public
:
nsLookAndFeel
(
)
;
virtual
~
nsLookAndFeel
(
)
;
nsresult
NativeGetColor
(
ColorID
aID
nscolor
&
aResult
)
override
;
nsresult
GetIntImpl
(
IntID
aID
int32_t
&
aResult
)
override
;
nsresult
GetFloatImpl
(
FloatID
aID
float
&
aResult
)
override
;
bool
GetFontImpl
(
FontID
aID
nsString
&
aFontName
gfxFontStyle
&
aFontStyle
float
aDevPixPerCSSPixel
)
override
;
void
RefreshImpl
(
)
override
;
char16_t
GetPasswordCharacterImpl
(
)
override
;
nsTArray
<
LookAndFeelInt
>
GetIntCacheImpl
(
)
override
;
void
SetIntCacheImpl
(
const
nsTArray
<
LookAndFeelInt
>
&
aLookAndFeelIntCache
)
override
;
private
:
nsresult
GetAccentColor
(
nscolor
&
aColor
)
;
int32_t
mUseAccessibilityTheme
;
int32_t
mUseDefaultTheme
;
int32_t
mNativeThemeId
;
struct
CachedSystemFont
{
CachedSystemFont
(
)
:
mCacheValid
(
false
)
{
}
bool
mCacheValid
;
bool
mHaveFont
;
nsString
mFontName
;
gfxFontStyle
mFontStyle
;
}
;
mozilla
:
:
RangedArray
<
CachedSystemFont
FontID_MINIMUM
FontID_MAXIMUM
+
1
-
FontID_MINIMUM
>
mSystemFontCache
;
nsCOMPtr
<
nsIWindowsRegKey
>
mDwmKey
;
}
;
#
endif
