#
ifndef
__nsLookAndFeel
#
define
__nsLookAndFeel
#
include
<
windows
.
h
>
#
include
"
nsXPLookAndFeel
.
h
"
#
include
"
gfxFont
.
h
"
#
ifndef
SM_DIGITIZER
#
define
SM_DIGITIZER
94
#
define
TABLET_CONFIG_NONE
0x00000000
#
define
NID_INTEGRATED_TOUCH
0x00000001
#
define
NID_EXTERNAL_TOUCH
0x00000002
#
define
NID_INTEGRATED_PEN
0x00000004
#
define
NID_EXTERNAL_PEN
0x00000008
#
define
NID_MULTI_INPUT
0x00000040
#
define
NID_READY
0x00000080
#
endif
#
ifndef
SM_SYSTEMDOCKED
#
define
SM_CONVERTIBLESLATEMODE
0x00002003
#
define
SM_SYSTEMDOCKED
0x00002004
#
endif
#
define
SYS_COLOR_MIN
0
#
define
SYS_COLOR_MAX
30
#
define
SYS_COLOR_COUNT
(
SYS_COLOR_MAX
-
SYS_COLOR_MIN
+
1
)
#
define
MOZ_SPI_CURSORSIZE
0x2028
#
define
MOZ_SPI_SETCURSORSIZE
0x2029
namespace
mozilla
:
:
widget
:
:
WinRegistry
{
class
KeyWatcher
;
}
class
nsLookAndFeel
final
:
public
nsXPLookAndFeel
{
public
:
nsLookAndFeel
(
)
;
virtual
~
nsLookAndFeel
(
)
;
void
NativeInit
(
)
final
;
void
RefreshImpl
(
)
override
;
nsresult
NativeGetInt
(
IntID
int32_t
&
aResult
)
override
;
nsresult
NativeGetFloat
(
FloatID
float
&
aResult
)
override
;
nsresult
NativeGetColor
(
ColorID
ColorScheme
nscolor
&
aResult
)
override
;
bool
NativeGetFont
(
FontID
aID
nsString
&
aFontName
gfxFontStyle
&
aFontStyle
)
override
;
char16_t
GetPasswordCharacterImpl
(
)
override
;
nsresult
GetKeyboardLayoutImpl
(
nsACString
&
aLayout
)
override
;
private
:
struct
TitlebarColors
{
mozilla
:
:
Maybe
<
nscolor
>
mAccent
;
mozilla
:
:
Maybe
<
nscolor
>
mAccentText
;
mozilla
:
:
Maybe
<
nscolor
>
mAccentInactive
;
mozilla
:
:
Maybe
<
nscolor
>
mAccentInactiveText
;
bool
mUseAccent
=
false
;
struct
Set
{
nscolor
mBg
=
0
;
nscolor
mFg
=
0
;
nscolor
mBorder
=
0
;
}
;
Set
mActiveLight
;
Set
mActiveDark
;
Set
mInactiveLight
;
Set
mInactiveDark
;
const
Set
&
Get
(
mozilla
:
:
ColorScheme
aScheme
bool
aActive
)
const
{
if
(
aScheme
=
=
mozilla
:
:
ColorScheme
:
:
Dark
)
{
return
aActive
?
mActiveDark
:
mInactiveDark
;
}
return
aActive
?
mActiveLight
:
mInactiveLight
;
}
}
;
TitlebarColors
ComputeTitlebarColors
(
)
;
nscolor
GetColorForSysColorIndex
(
int
index
)
;
LookAndFeelFont
GetLookAndFeelFontInternal
(
const
LOGFONTW
&
aLogFont
bool
aUseShellDlg
)
;
uint32_t
SystemColorFilter
(
)
;
LookAndFeelFont
GetLookAndFeelFont
(
LookAndFeel
:
:
FontID
anID
)
;
mozilla
:
:
Maybe
<
nscolor
>
mColorMenuHoverText
;
mozilla
:
:
Maybe
<
nscolor
>
mDarkHighlight
;
mozilla
:
:
Maybe
<
nscolor
>
mDarkHighlightText
;
TitlebarColors
mTitlebarColors
;
nscolor
mColorAccent
=
0
;
nscolor
mColorAccentText
=
0
;
nscolor
mSysColorTable
[
SYS_COLOR_COUNT
]
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
widget
:
:
WinRegistry
:
:
KeyWatcher
>
mColorFilterWatcher
;
uint32_t
mCurrentColorFilter
=
0
;
bool
mInitialized
=
false
;
void
EnsureInit
(
)
;
}
;
#
endif
