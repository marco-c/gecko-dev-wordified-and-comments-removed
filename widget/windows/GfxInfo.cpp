#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
<
windows
.
h
>
#
include
<
devguid
.
h
>
#
include
<
setupapi
.
h
>
#
include
<
winioctl
.
h
>
#
include
<
batclass
.
h
>
#
include
"
gfxConfig
.
h
"
#
include
"
gfxWindowsPlatform
.
h
"
#
include
"
GfxInfo
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
prenv
.
h
"
#
include
"
prprf
.
h
"
#
include
"
GfxDriverInfo
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
SSE
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
jsapi
.
h
"
#
include
<
intrin
.
h
>
#
define
NS_CRASHREPORTER_CONTRACTID
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
widget
;
#
ifdef
DEBUG
NS_IMPL_ISUPPORTS_INHERITED
(
GfxInfo
GfxInfoBase
nsIGfxInfoDebug
)
#
endif
GfxInfo
:
:
GfxInfo
(
)
:
mWindowsVersion
(
0
)
mWindowsBuildNumber
(
0
)
mActiveGPUIndex
(
0
)
mHasDualGPU
(
false
)
mHasBattery
(
false
)
{
}
nsresult
GfxInfo
:
:
GetD2DEnabled
(
bool
*
aEnabled
)
{
if
(
!
gfxPlatform
:
:
Initialized
(
)
)
{
*
aEnabled
=
false
;
return
NS_OK
;
}
*
aEnabled
=
gfx
:
:
gfxConfig
:
:
IsEnabled
(
gfx
:
:
Feature
:
:
DIRECT2D
)
;
return
NS_OK
;
}
nsresult
GfxInfo
:
:
GetDWriteEnabled
(
bool
*
aEnabled
)
{
*
aEnabled
=
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
DWriteEnabled
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDWriteVersion
(
nsAString
&
aDwriteVersion
)
{
gfxWindowsPlatform
:
:
GetDLLVersion
(
L
"
dwrite
.
dll
"
aDwriteVersion
)
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetHasBattery
(
bool
*
aHasBattery
)
{
*
aHasBattery
=
mHasBattery
;
return
NS_OK
;
}
int32_t
GfxInfo
:
:
GetMaxRefreshRate
(
bool
*
aMixed
)
{
int32_t
maxRefreshRate
=
-
1
;
if
(
aMixed
)
{
*
aMixed
=
false
;
}
for
(
auto
displayInfo
:
mDisplayInfo
)
{
int32_t
refreshRate
=
int32_t
(
displayInfo
.
mRefreshRate
)
;
if
(
aMixed
&
&
maxRefreshRate
>
0
&
&
maxRefreshRate
!
=
refreshRate
)
{
*
aMixed
=
true
;
}
maxRefreshRate
=
std
:
:
max
(
maxRefreshRate
refreshRate
)
;
}
return
maxRefreshRate
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetEmbeddedInFirefoxReality
(
bool
*
aEmbeddedInFirefoxReality
)
{
*
aEmbeddedInFirefoxReality
=
gfxVars
:
:
FxREmbedded
(
)
;
return
NS_OK
;
}
#
define
PIXEL_STRUCT_RGB
1
#
define
PIXEL_STRUCT_BGR
2
NS_IMETHODIMP
GfxInfo
:
:
GetCleartypeParameters
(
nsAString
&
aCleartypeParams
)
{
nsTArray
<
ClearTypeParameterInfo
>
clearTypeParams
;
gfxWindowsPlatform
:
:
GetPlatform
(
)
-
>
GetCleartypeParams
(
clearTypeParams
)
;
uint32_t
d
numDisplays
=
clearTypeParams
.
Length
(
)
;
bool
displayNames
=
(
numDisplays
>
1
)
;
bool
foundData
=
false
;
nsString
outStr
;
for
(
d
=
0
;
d
<
numDisplays
;
d
+
+
)
{
ClearTypeParameterInfo
&
params
=
clearTypeParams
[
d
]
;
if
(
displayNames
)
{
outStr
.
AppendPrintf
(
"
%
S
[
"
params
.
displayName
.
get
(
)
)
;
}
if
(
params
.
gamma
>
=
0
)
{
foundData
=
true
;
outStr
.
AppendPrintf
(
"
Gamma
:
%
.
4g
"
params
.
gamma
/
1000
.
0
)
;
}
if
(
params
.
pixelStructure
>
=
0
)
{
foundData
=
true
;
if
(
params
.
pixelStructure
=
=
PIXEL_STRUCT_RGB
|
|
params
.
pixelStructure
=
=
PIXEL_STRUCT_BGR
)
{
outStr
.
AppendPrintf
(
"
Pixel
Structure
:
%
S
"
(
params
.
pixelStructure
=
=
PIXEL_STRUCT_RGB
?
u
"
RGB
"
:
u
"
BGR
"
)
)
;
}
else
{
outStr
.
AppendPrintf
(
"
Pixel
Structure
:
%
d
"
params
.
pixelStructure
)
;
}
}
if
(
params
.
clearTypeLevel
>
=
0
)
{
foundData
=
true
;
outStr
.
AppendPrintf
(
"
ClearType
Level
:
%
d
"
params
.
clearTypeLevel
)
;
}
if
(
params
.
enhancedContrast
>
=
0
)
{
foundData
=
true
;
outStr
.
AppendPrintf
(
"
Enhanced
Contrast
:
%
d
"
params
.
enhancedContrast
)
;
}
if
(
displayNames
)
{
outStr
.
Append
(
u
"
]
"
)
;
}
}
if
(
foundData
)
{
aCleartypeParams
.
Assign
(
outStr
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetWindowProtocol
(
nsAString
&
aWindowProtocol
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDesktopEnvironment
(
nsAString
&
aDesktopEnvironment
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetTestType
(
nsAString
&
aTestType
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
static
nsresult
GetKeyValue
(
const
WCHAR
*
keyLocation
const
WCHAR
*
keyName
uint32_t
&
destValue
int
type
)
{
MOZ_ASSERT
(
type
=
=
REG_DWORD
|
|
type
=
=
REG_QWORD
)
;
HKEY
key
;
DWORD
dwcbData
;
DWORD
dValue
;
DWORD
resultType
;
LONG
result
;
nsresult
retval
=
NS_OK
;
result
=
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
keyLocation
0
KEY_QUERY_VALUE
&
key
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
return
NS_ERROR_FAILURE
;
}
switch
(
type
)
{
case
REG_DWORD
:
{
dwcbData
=
sizeof
(
dValue
)
;
result
=
RegQueryValueExW
(
key
keyName
nullptr
&
resultType
(
LPBYTE
)
&
dValue
&
dwcbData
)
;
if
(
result
=
=
ERROR_SUCCESS
&
&
resultType
=
=
REG_DWORD
)
{
destValue
=
(
uint32_t
)
(
dValue
/
1024
/
1024
)
;
}
else
{
retval
=
NS_ERROR_FAILURE
;
}
break
;
}
case
REG_QWORD
:
{
LONGLONG
qValue
;
dwcbData
=
sizeof
(
qValue
)
;
result
=
RegQueryValueExW
(
key
keyName
nullptr
&
resultType
(
LPBYTE
)
&
qValue
&
dwcbData
)
;
if
(
result
=
=
ERROR_SUCCESS
&
&
resultType
=
=
REG_QWORD
)
{
destValue
=
(
uint32_t
)
(
qValue
/
1024
/
1024
)
;
}
else
{
retval
=
NS_ERROR_FAILURE
;
}
break
;
}
}
RegCloseKey
(
key
)
;
return
retval
;
}
static
nsresult
GetKeyValue
(
const
WCHAR
*
keyLocation
const
WCHAR
*
keyName
nsAString
&
destString
int
type
)
{
MOZ_ASSERT
(
type
=
=
REG_MULTI_SZ
)
;
HKEY
key
;
DWORD
dwcbData
;
DWORD
resultType
;
LONG
result
;
nsresult
retval
=
NS_OK
;
result
=
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
keyLocation
0
KEY_QUERY_VALUE
&
key
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
return
NS_ERROR_FAILURE
;
}
WCHAR
wCharValue
[
1024
]
;
dwcbData
=
sizeof
(
wCharValue
)
;
result
=
RegQueryValueExW
(
key
keyName
nullptr
&
resultType
(
LPBYTE
)
wCharValue
&
dwcbData
)
;
if
(
result
=
=
ERROR_SUCCESS
&
&
resultType
=
=
REG_MULTI_SZ
)
{
bool
isValid
=
false
;
DWORD
strLen
=
dwcbData
/
sizeof
(
wCharValue
[
0
]
)
;
for
(
DWORD
i
=
0
;
i
<
strLen
;
i
+
+
)
{
if
(
wCharValue
[
i
]
=
=
'
\
0
'
)
{
if
(
i
<
strLen
-
1
&
&
wCharValue
[
i
+
1
]
=
=
'
\
0
'
)
{
isValid
=
true
;
break
;
}
else
{
wCharValue
[
i
]
=
'
'
;
}
}
}
wCharValue
[
strLen
-
1
]
=
'
\
0
'
;
if
(
isValid
)
destString
=
wCharValue
;
}
else
{
retval
=
NS_ERROR_FAILURE
;
}
RegCloseKey
(
key
)
;
return
retval
;
}
static
nsresult
GetKeyValues
(
const
WCHAR
*
keyLocation
const
WCHAR
*
keyName
nsTArray
<
nsString
>
&
destStrings
)
{
DWORD
size
;
LONG
rv
=
RegGetValueW
(
HKEY_LOCAL_MACHINE
keyLocation
keyName
RRF_RT_REG_MULTI_SZ
nullptr
nullptr
&
size
)
;
if
(
rv
!
=
ERROR_SUCCESS
)
{
return
NS_ERROR_FAILURE
;
}
WCHAR
*
wCharValue
=
new
WCHAR
[
size
/
sizeof
(
WCHAR
)
]
;
rv
=
RegGetValueW
(
HKEY_LOCAL_MACHINE
keyLocation
keyName
RRF_RT_REG_MULTI_SZ
nullptr
(
LPBYTE
)
wCharValue
&
size
)
;
if
(
rv
!
=
ERROR_SUCCESS
)
{
delete
[
]
wCharValue
;
return
NS_ERROR_FAILURE
;
}
DWORD
i
=
0
;
DWORD
strLen
=
size
/
sizeof
(
WCHAR
)
;
while
(
i
<
strLen
)
{
nsString
value
(
wCharValue
+
i
)
;
if
(
!
value
.
IsEmpty
(
)
)
{
destStrings
.
AppendElement
(
value
)
;
}
i
+
=
value
.
Length
(
)
+
1
;
}
delete
[
]
wCharValue
;
return
NS_OK
;
}
uint32_t
ParseIDFromDeviceID
(
const
nsAString
&
key
const
char
*
prefix
int
length
)
{
nsAutoString
id
(
key
)
;
ToUpperCase
(
id
)
;
int32_t
start
=
id
.
Find
(
prefix
)
;
if
(
start
!
=
-
1
)
{
id
.
Cut
(
0
start
+
strlen
(
prefix
)
)
;
id
.
Truncate
(
length
)
;
}
if
(
id
.
Equals
(
L
"
QCOM
"
nsCaseInsensitiveStringComparator
)
)
{
return
0x5143
;
}
nsresult
err
;
return
id
.
ToInteger
(
&
err
16
)
;
}
enum
{
kWindowsUnknown
=
0
kWindows7
=
0x60001
kWindows8
=
0x60002
kWindows8_1
=
0x60003
kWindows10
=
0xA0000
}
;
static
bool
HasBattery
(
)
{
class
MOZ_STACK_CLASS
HDevInfoHolder
final
{
public
:
explicit
HDevInfoHolder
(
HDEVINFO
aHandle
)
:
mHandle
(
aHandle
)
{
}
~
HDevInfoHolder
(
)
{
:
:
SetupDiDestroyDeviceInfoList
(
mHandle
)
;
}
private
:
HDEVINFO
mHandle
;
}
;
class
MOZ_STACK_CLASS
HandleHolder
final
{
public
:
explicit
HandleHolder
(
HANDLE
aHandle
)
:
mHandle
(
aHandle
)
{
}
~
HandleHolder
(
)
{
:
:
CloseHandle
(
mHandle
)
;
}
private
:
HANDLE
mHandle
;
}
;
HDEVINFO
hdev
=
:
:
SetupDiGetClassDevs
(
&
GUID_DEVCLASS_BATTERY
nullptr
nullptr
DIGCF_PRESENT
|
DIGCF_DEVICEINTERFACE
)
;
if
(
hdev
=
=
INVALID_HANDLE_VALUE
)
{
return
true
;
}
HDevInfoHolder
hdevHolder
(
hdev
)
;
DWORD
i
=
0
;
SP_DEVICE_INTERFACE_DATA
did
=
{
0
}
;
did
.
cbSize
=
sizeof
(
did
)
;
while
(
:
:
SetupDiEnumDeviceInterfaces
(
hdev
nullptr
&
GUID_DEVCLASS_BATTERY
i
&
did
)
)
{
DWORD
bufferSize
=
0
;
:
:
SetupDiGetDeviceInterfaceDetail
(
hdev
&
did
nullptr
0
&
bufferSize
nullptr
)
;
if
(
:
:
GetLastError
(
)
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
true
;
}
UniquePtr
<
uint8_t
[
]
>
buffer
(
new
(
std
:
:
nothrow
)
uint8_t
[
bufferSize
]
)
;
if
(
!
buffer
)
{
return
true
;
}
PSP_DEVICE_INTERFACE_DETAIL_DATA
pdidd
=
reinterpret_cast
<
PSP_DEVICE_INTERFACE_DETAIL_DATA
>
(
buffer
.
get
(
)
)
;
pdidd
-
>
cbSize
=
sizeof
(
*
pdidd
)
;
if
(
!
:
:
SetupDiGetDeviceInterfaceDetail
(
hdev
&
did
pdidd
bufferSize
&
bufferSize
nullptr
)
)
{
return
true
;
}
HANDLE
hbat
=
:
:
CreateFile
(
pdidd
-
>
DevicePath
GENERIC_READ
|
GENERIC_WRITE
FILE_SHARE_READ
|
FILE_SHARE_WRITE
nullptr
OPEN_EXISTING
FILE_ATTRIBUTE_NORMAL
nullptr
)
;
if
(
hbat
=
=
INVALID_HANDLE_VALUE
)
{
return
true
;
}
HandleHolder
hbatHolder
(
hbat
)
;
BATTERY_QUERY_INFORMATION
bqi
=
{
0
}
;
DWORD
dwWait
=
0
;
DWORD
dwOut
;
if
(
!
:
:
DeviceIoControl
(
hbat
IOCTL_BATTERY_QUERY_TAG
&
dwWait
sizeof
(
dwWait
)
&
bqi
.
BatteryTag
sizeof
(
bqi
.
BatteryTag
)
&
dwOut
nullptr
)
|
|
!
bqi
.
BatteryTag
)
{
return
true
;
}
BATTERY_INFORMATION
bi
=
{
0
}
;
bqi
.
InformationLevel
=
BatteryInformation
;
if
(
!
:
:
DeviceIoControl
(
hbat
IOCTL_BATTERY_QUERY_INFORMATION
&
bqi
sizeof
(
bqi
)
&
bi
sizeof
(
bi
)
&
dwOut
nullptr
)
)
{
return
true
;
}
if
(
(
bi
.
Capabilities
&
BATTERY_SYSTEM_BATTERY
)
&
&
!
(
bi
.
Capabilities
&
BATTERY_IS_SHORT_TERM
)
)
{
return
true
;
}
+
+
i
;
}
return
:
:
GetLastError
(
)
!
=
ERROR_NO_MORE_ITEMS
;
}
#
define
DEVICE_KEY_PREFIX
L
"
\
\
Registry
\
\
Machine
\
\
"
nsresult
GfxInfo
:
:
Init
(
)
{
nsresult
rv
=
GfxInfoBase
:
:
Init
(
)
;
mHasBattery
=
HasBattery
(
)
;
DISPLAY_DEVICEW
displayDevice
;
displayDevice
.
cb
=
sizeof
(
displayDevice
)
;
int
deviceIndex
=
0
;
const
char
*
spoofedWindowsVersion
=
PR_GetEnv
(
"
MOZ_GFX_SPOOF_WINDOWS_VERSION
"
)
;
if
(
spoofedWindowsVersion
)
{
PR_sscanf
(
spoofedWindowsVersion
"
%
x
%
u
"
&
mWindowsVersion
&
mWindowsBuildNumber
)
;
}
else
{
OSVERSIONINFO
vinfo
;
vinfo
.
dwOSVersionInfoSize
=
sizeof
(
vinfo
)
;
#
ifdef
_MSC_VER
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4996
)
#
endif
if
(
!
GetVersionEx
(
&
vinfo
)
)
{
#
ifdef
_MSC_VER
#
pragma
warning
(
pop
)
#
endif
mWindowsVersion
=
kWindowsUnknown
;
}
else
{
mWindowsVersion
=
int32_t
(
vinfo
.
dwMajorVersion
<
<
16
)
+
vinfo
.
dwMinorVersion
;
mWindowsBuildNumber
=
vinfo
.
dwBuildNumber
;
}
}
mDeviceKeyDebug
=
u
"
PrimarySearch
"
_ns
;
while
(
EnumDisplayDevicesW
(
nullptr
deviceIndex
&
displayDevice
0
)
)
{
if
(
displayDevice
.
StateFlags
&
DISPLAY_DEVICE_PRIMARY_DEVICE
)
{
mDeviceKeyDebug
=
u
"
NullSearch
"
_ns
;
break
;
}
deviceIndex
+
+
;
}
if
(
wcsnlen
(
displayDevice
.
DeviceKey
ArrayLength
(
displayDevice
.
DeviceKey
)
)
=
=
ArrayLength
(
displayDevice
.
DeviceKey
)
)
{
return
rv
;
}
mDeviceKeyDebug
=
displayDevice
.
DeviceKey
;
if
(
displayDevice
.
DeviceKey
[
0
]
!
=
'
\
0
'
)
{
if
(
_wcsnicmp
(
displayDevice
.
DeviceKey
DEVICE_KEY_PREFIX
ArrayLength
(
DEVICE_KEY_PREFIX
)
-
1
)
!
=
0
)
{
return
rv
;
}
mDeviceKey
[
0
]
=
displayDevice
.
DeviceKey
+
ArrayLength
(
DEVICE_KEY_PREFIX
)
-
1
;
}
else
{
mDeviceKey
[
0
]
.
Truncate
(
)
;
}
mDeviceID
[
0
]
=
displayDevice
.
DeviceID
;
mDeviceString
[
0
]
=
displayDevice
.
DeviceString
;
UINT
flags
=
DIGCF_PRESENT
|
DIGCF_PROFILE
|
DIGCF_ALLCLASSES
;
if
(
mWindowsVersion
>
=
kWindows8
&
&
mDeviceID
[
0
]
.
Length
(
)
=
=
0
&
&
mDeviceString
[
0
]
.
EqualsLiteral
(
"
RDPUDD
Chained
DD
"
)
)
{
WCHAR
sysdir
[
255
]
;
UINT
len
=
GetSystemDirectory
(
sysdir
sizeof
(
sysdir
)
)
;
if
(
len
<
sizeof
(
sysdir
)
)
{
nsString
rdpudd
(
sysdir
)
;
rdpudd
.
AppendLiteral
(
"
\
\
rdpudd
.
dll
"
)
;
gfxWindowsPlatform
:
:
GetDLLVersion
(
rdpudd
.
BeginReading
(
)
mDriverVersion
[
0
]
)
;
mDriverDate
[
0
]
.
AssignLiteral
(
"
01
-
01
-
1970
"
)
;
mDeviceID
[
0
]
.
AssignLiteral
(
"
PCI
\
\
VEN_1414
&
DEV_FEFE
&
SUBSYS_00000000
"
)
;
flags
|
=
DIGCF_DEVICEINTERFACE
;
}
}
HDEVINFO
devinfo
=
SetupDiGetClassDevsW
(
nullptr
mDeviceID
[
0
]
.
get
(
)
nullptr
flags
)
;
if
(
devinfo
!
=
INVALID_HANDLE_VALUE
)
{
HKEY
key
;
LONG
result
;
WCHAR
value
[
255
]
;
DWORD
dwcbData
;
SP_DEVINFO_DATA
devinfoData
;
DWORD
memberIndex
=
0
;
devinfoData
.
cbSize
=
sizeof
(
devinfoData
)
;
constexpr
auto
driverKeyPre
=
u
"
System
\
\
CurrentControlSet
\
\
Control
\
\
Class
\
\
"
_ns
;
while
(
SetupDiEnumDeviceInfo
(
devinfo
memberIndex
+
+
&
devinfoData
)
)
{
if
(
SetupDiGetDeviceRegistryPropertyW
(
devinfo
&
devinfoData
SPDRP_DRIVER
nullptr
(
PBYTE
)
value
sizeof
(
value
)
nullptr
)
)
{
nsAutoString
driverKey
(
driverKeyPre
)
;
driverKey
+
=
value
;
result
=
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
driverKey
.
get
(
)
0
KEY_QUERY_VALUE
&
key
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
DriverVersion
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
mDriverVersion
[
0
]
=
value
;
}
else
{
mDriverVersion
[
0
]
.
AssignLiteral
(
"
0
.
0
.
0
.
0
"
)
;
}
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
DriverDate
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
mDriverDate
[
0
]
=
value
;
}
else
{
mDriverDate
[
0
]
.
AssignLiteral
(
"
01
-
01
-
1970
"
)
;
}
RegCloseKey
(
key
)
;
break
;
}
}
}
SetupDiDestroyDeviceInfoList
(
devinfo
)
;
}
uint32_t
adapterVendorID
[
2
]
=
{
0
0
}
;
uint32_t
adapterDeviceID
[
2
]
=
{
0
0
}
;
uint32_t
adapterSubsysID
[
2
]
=
{
0
0
}
;
adapterVendorID
[
0
]
=
ParseIDFromDeviceID
(
mDeviceID
[
0
]
"
VEN_
"
4
)
;
adapterDeviceID
[
0
]
=
ParseIDFromDeviceID
(
mDeviceID
[
0
]
"
&
DEV_
"
4
)
;
adapterSubsysID
[
0
]
=
ParseIDFromDeviceID
(
mDeviceID
[
0
]
"
&
SUBSYS_
"
8
)
;
bool
foundValidDevice
=
(
adapterVendorID
[
0
]
!
=
0
|
|
adapterDeviceID
[
0
]
!
=
0
)
;
CLSID
GUID_DISPLAY_DEVICE_ARRIVAL
;
HRESULT
hresult
=
CLSIDFromString
(
L
"
{
1CA05180
-
A699
-
450A
-
9A0C
-
DE4FBE3DDD89
}
"
&
GUID_DISPLAY_DEVICE_ARRIVAL
)
;
if
(
hresult
=
=
NOERROR
)
{
devinfo
=
SetupDiGetClassDevsW
(
&
GUID_DISPLAY_DEVICE_ARRIVAL
nullptr
nullptr
DIGCF_PRESENT
|
DIGCF_INTERFACEDEVICE
)
;
if
(
devinfo
!
=
INVALID_HANDLE_VALUE
)
{
HKEY
key
;
LONG
result
;
WCHAR
value
[
255
]
;
DWORD
dwcbData
;
SP_DEVINFO_DATA
devinfoData
;
DWORD
memberIndex
=
0
;
devinfoData
.
cbSize
=
sizeof
(
devinfoData
)
;
nsAutoString
adapterDriver2
;
nsAutoString
deviceID2
;
nsAutoString
driverVersion2
;
nsAutoString
driverDate2
;
constexpr
auto
driverKeyPre
=
u
"
System
\
\
CurrentControlSet
\
\
Control
\
\
Class
\
\
"
_ns
;
while
(
SetupDiEnumDeviceInfo
(
devinfo
memberIndex
+
+
&
devinfoData
)
)
{
if
(
SetupDiGetDeviceRegistryPropertyW
(
devinfo
&
devinfoData
SPDRP_DRIVER
nullptr
(
PBYTE
)
value
sizeof
(
value
)
nullptr
)
)
{
nsAutoString
driverKey2
(
driverKeyPre
)
;
driverKey2
+
=
value
;
result
=
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
driverKey2
.
get
(
)
0
KEY_QUERY_VALUE
&
key
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
MatchingDeviceId
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
continue
;
}
deviceID2
=
value
;
adapterVendorID
[
1
]
=
ParseIDFromDeviceID
(
deviceID2
"
VEN_
"
4
)
;
adapterDeviceID
[
1
]
=
ParseIDFromDeviceID
(
deviceID2
"
&
DEV_
"
4
)
;
if
(
(
adapterVendorID
[
0
]
=
=
adapterVendorID
[
1
]
&
&
adapterDeviceID
[
0
]
=
=
adapterDeviceID
[
1
]
)
|
|
(
adapterVendorID
[
1
]
=
=
0
&
&
adapterDeviceID
[
1
]
=
=
0
)
)
{
RegCloseKey
(
key
)
;
continue
;
}
if
(
NS_FAILED
(
GetKeyValue
(
driverKey2
.
get
(
)
L
"
InstalledDisplayDrivers
"
adapterDriver2
REG_MULTI_SZ
)
)
)
{
RegCloseKey
(
key
)
;
continue
;
}
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
DriverVersion
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
RegCloseKey
(
key
)
;
continue
;
}
driverVersion2
=
value
;
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
DriverDate
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
RegCloseKey
(
key
)
;
continue
;
}
driverDate2
=
value
;
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
Device
Description
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
if
(
result
!
=
ERROR_SUCCESS
)
{
dwcbData
=
sizeof
(
value
)
;
result
=
RegQueryValueExW
(
key
L
"
DriverDesc
"
nullptr
nullptr
(
LPBYTE
)
value
&
dwcbData
)
;
}
RegCloseKey
(
key
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
if
(
!
foundValidDevice
)
{
foundValidDevice
=
true
;
adapterVendorID
[
0
]
=
adapterVendorID
[
1
]
;
adapterDeviceID
[
0
]
=
adapterDeviceID
[
1
]
;
mDeviceString
[
0
]
=
value
;
mDeviceID
[
0
]
=
deviceID2
;
mDeviceKey
[
0
]
=
driverKey2
;
mDriverVersion
[
0
]
=
driverVersion2
;
mDriverDate
[
0
]
=
driverDate2
;
adapterSubsysID
[
0
]
=
ParseIDFromDeviceID
(
mDeviceID
[
0
]
"
&
SUBSYS_
"
8
)
;
continue
;
}
mHasDualGPU
=
true
;
mDeviceString
[
1
]
=
value
;
mDeviceID
[
1
]
=
deviceID2
;
mDeviceKey
[
1
]
=
driverKey2
;
mDriverVersion
[
1
]
=
driverVersion2
;
mDriverDate
[
1
]
=
driverDate2
;
adapterSubsysID
[
1
]
=
ParseIDFromDeviceID
(
mDeviceID
[
1
]
"
&
SUBSYS_
"
8
)
;
mAdapterVendorID
[
1
]
.
AppendPrintf
(
"
0x
%
04x
"
adapterVendorID
[
1
]
)
;
mAdapterDeviceID
[
1
]
.
AppendPrintf
(
"
0x
%
04x
"
adapterDeviceID
[
1
]
)
;
mAdapterSubsysID
[
1
]
.
AppendPrintf
(
"
%
08x
"
adapterSubsysID
[
1
]
)
;
break
;
}
}
}
}
SetupDiDestroyDeviceInfoList
(
devinfo
)
;
}
}
mAdapterVendorID
[
0
]
.
AppendPrintf
(
"
0x
%
04x
"
adapterVendorID
[
0
]
)
;
mAdapterDeviceID
[
0
]
.
AppendPrintf
(
"
0x
%
04x
"
adapterDeviceID
[
0
]
)
;
mAdapterSubsysID
[
0
]
.
AppendPrintf
(
"
%
08x
"
adapterSubsysID
[
0
]
)
;
if
(
mHasDualGPU
)
{
nsModuleHandle
dxgiModule
(
LoadLibrarySystem32
(
L
"
dxgi
.
dll
"
)
)
;
decltype
(
CreateDXGIFactory
)
*
createDXGIFactory
=
(
decltype
(
CreateDXGIFactory
)
*
)
GetProcAddress
(
dxgiModule
"
CreateDXGIFactory
"
)
;
if
(
createDXGIFactory
)
{
RefPtr
<
IDXGIFactory
>
factory
=
nullptr
;
createDXGIFactory
(
__uuidof
(
IDXGIFactory
)
(
void
*
*
)
(
&
factory
)
)
;
if
(
factory
)
{
RefPtr
<
IDXGIAdapter
>
adapter
;
if
(
SUCCEEDED
(
factory
-
>
EnumAdapters
(
0
getter_AddRefs
(
adapter
)
)
)
)
{
DXGI_ADAPTER_DESC
desc
;
PodZero
(
&
desc
)
;
if
(
SUCCEEDED
(
adapter
-
>
GetDesc
(
&
desc
)
)
)
{
if
(
desc
.
VendorId
!
=
adapterVendorID
[
0
]
&
&
desc
.
DeviceId
!
=
adapterDeviceID
[
0
]
&
&
desc
.
VendorId
=
=
adapterVendorID
[
1
]
&
&
desc
.
DeviceId
=
=
adapterDeviceID
[
1
]
)
{
mActiveGPUIndex
=
1
;
}
}
}
}
}
}
mHasDriverVersionMismatch
=
false
;
if
(
mAdapterVendorID
[
mActiveGPUIndex
]
=
=
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
Intel
)
)
{
bool
is64bitApp
=
sizeof
(
void
*
)
=
=
8
;
nsAutoString
dllFileName
(
is64bitApp
?
u
"
igd10umd64
"
:
u
"
igd10umd32
"
)
;
nsAutoString
dllFileName2
(
is64bitApp
?
u
"
igd10iumd64
"
:
u
"
igd10iumd32
"
)
;
nsString
dllVersion
dllVersion2
;
uint64_t
dllNumericVersion
=
0
dllNumericVersion2
=
0
driverNumericVersion
=
0
knownSafeMismatchVersion
=
0
;
nsAutoString
eligibleDLLs
;
if
(
NS_SUCCEEDED
(
GetAdapterDriver
(
eligibleDLLs
)
)
)
{
if
(
FindInReadable
(
dllFileName
eligibleDLLs
)
)
{
dllFileName
+
=
u
"
.
dll
"
_ns
;
gfxWindowsPlatform
:
:
GetDLLVersion
(
dllFileName
.
get
(
)
dllVersion
)
;
ParseDriverVersion
(
dllVersion
&
dllNumericVersion
)
;
}
if
(
FindInReadable
(
dllFileName2
eligibleDLLs
)
)
{
dllFileName2
+
=
u
"
.
dll
"
_ns
;
gfxWindowsPlatform
:
:
GetDLLVersion
(
dllFileName2
.
get
(
)
dllVersion2
)
;
ParseDriverVersion
(
dllVersion2
&
dllNumericVersion2
)
;
}
}
if
(
dllNumericVersion
=
=
0
&
&
dllNumericVersion2
=
=
0
)
{
nsTArray
<
nsString
>
eligibleDLLpaths
;
const
WCHAR
*
keyLocation
=
mDeviceKey
[
mActiveGPUIndex
]
.
get
(
)
;
GetKeyValues
(
keyLocation
L
"
UserModeDriverName
"
eligibleDLLpaths
)
;
GetKeyValues
(
keyLocation
L
"
UserModeDriverNameWow
"
eligibleDLLpaths
)
;
size_t
length
=
eligibleDLLpaths
.
Length
(
)
;
for
(
size_t
i
=
0
;
i
<
length
&
&
dllNumericVersion
=
=
0
&
&
dllNumericVersion2
=
=
0
;
+
+
i
)
{
if
(
FindInReadable
(
dllFileName
eligibleDLLpaths
[
i
]
)
)
{
gfxWindowsPlatform
:
:
GetDLLVersion
(
eligibleDLLpaths
[
i
]
.
get
(
)
dllVersion
)
;
ParseDriverVersion
(
dllVersion
&
dllNumericVersion
)
;
}
else
if
(
FindInReadable
(
dllFileName2
eligibleDLLpaths
[
i
]
)
)
{
gfxWindowsPlatform
:
:
GetDLLVersion
(
eligibleDLLpaths
[
i
]
.
get
(
)
dllVersion2
)
;
ParseDriverVersion
(
dllVersion2
&
dllNumericVersion2
)
;
}
}
}
ParseDriverVersion
(
mDriverVersion
[
mActiveGPUIndex
]
&
driverNumericVersion
)
;
ParseDriverVersion
(
u
"
9
.
17
.
10
.
0
"
_ns
&
knownSafeMismatchVersion
)
;
if
(
(
dllNumericVersion
!
=
0
&
&
dllNumericVersion
!
=
driverNumericVersion
)
|
|
(
dllNumericVersion2
!
=
0
&
&
dllNumericVersion2
!
=
driverNumericVersion
)
)
{
if
(
driverNumericVersion
<
knownSafeMismatchVersion
|
|
std
:
:
max
(
dllNumericVersion
dllNumericVersion2
)
<
knownSafeMismatchVersion
)
{
mHasDriverVersionMismatch
=
true
;
gfxCriticalNoteOnce
<
<
"
Mismatched
driver
versions
between
the
registry
"
<
<
NS_ConvertUTF16toUTF8
(
mDriverVersion
[
mActiveGPUIndex
]
)
.
get
(
)
<
<
"
and
DLL
(
s
)
"
<
<
NS_ConvertUTF16toUTF8
(
dllVersion
)
.
get
(
)
<
<
"
"
<
<
NS_ConvertUTF16toUTF8
(
dllVersion2
)
.
get
(
)
<
<
"
reported
.
"
;
}
}
else
if
(
dllNumericVersion
=
=
0
&
&
dllNumericVersion2
=
=
0
)
{
gfxCriticalErrorOnce
(
)
<
<
"
Potential
driver
version
mismatch
ignored
due
to
missing
DLLs
"
<
<
NS_ConvertUTF16toUTF8
(
dllFileName
)
.
get
(
)
<
<
"
v
=
"
<
<
NS_ConvertUTF16toUTF8
(
dllVersion
)
.
get
(
)
<
<
"
and
"
<
<
NS_ConvertUTF16toUTF8
(
dllFileName2
)
.
get
(
)
<
<
"
v
=
"
<
<
NS_ConvertUTF16toUTF8
(
dllVersion2
)
.
get
(
)
;
}
}
for
(
int
deviceIndex
=
0
;
;
deviceIndex
+
+
)
{
DISPLAY_DEVICEA
device
;
device
.
cb
=
sizeof
(
device
)
;
if
(
!
:
:
EnumDisplayDevicesA
(
nullptr
deviceIndex
&
device
0
)
)
{
break
;
}
if
(
!
(
device
.
StateFlags
&
DISPLAY_DEVICE_ACTIVE
)
)
{
continue
;
}
DEVMODEA
mode
;
mode
.
dmSize
=
sizeof
(
mode
)
;
mode
.
dmDriverExtra
=
0
;
if
(
!
:
:
EnumDisplaySettingsA
(
device
.
DeviceName
ENUM_CURRENT_SETTINGS
&
mode
)
)
{
continue
;
}
DisplayInfo
displayInfo
;
displayInfo
.
mScreenWidth
=
mode
.
dmPelsWidth
;
displayInfo
.
mScreenHeight
=
mode
.
dmPelsHeight
;
displayInfo
.
mRefreshRate
=
mode
.
dmDisplayFrequency
;
displayInfo
.
mIsPseudoDisplay
=
!
!
(
device
.
StateFlags
&
DISPLAY_DEVICE_MIRRORING_DRIVER
)
;
mDisplayInfo
.
AppendElement
(
displayInfo
)
;
}
const
char
*
spoofedDriverVersionString
=
PR_GetEnv
(
"
MOZ_GFX_SPOOF_DRIVER_VERSION
"
)
;
if
(
spoofedDriverVersionString
)
{
mDriverVersion
[
mActiveGPUIndex
]
.
AssignASCII
(
spoofedDriverVersionString
)
;
}
const
char
*
spoofedVendor
=
PR_GetEnv
(
"
MOZ_GFX_SPOOF_VENDOR_ID
"
)
;
if
(
spoofedVendor
)
{
mAdapterVendorID
[
mActiveGPUIndex
]
.
AssignASCII
(
spoofedVendor
)
;
}
const
char
*
spoofedDevice
=
PR_GetEnv
(
"
MOZ_GFX_SPOOF_DEVICE_ID
"
)
;
if
(
spoofedDevice
)
{
mAdapterDeviceID
[
mActiveGPUIndex
]
.
AssignASCII
(
spoofedDevice
)
;
}
AddCrashReportAnnotations
(
)
;
return
rv
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDescription
(
nsAString
&
aAdapterDescription
)
{
aAdapterDescription
=
mDeviceString
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDescription2
(
nsAString
&
aAdapterDescription
)
{
aAdapterDescription
=
mDeviceString
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterRAM
(
uint32_t
*
aAdapterRAM
)
{
uint32_t
result
=
0
;
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
mActiveGPUIndex
]
.
get
(
)
L
"
HardwareInformation
.
qwMemorySize
"
result
REG_QWORD
)
)
|
|
result
=
=
0
)
{
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
mActiveGPUIndex
]
.
get
(
)
L
"
HardwareInformation
.
MemorySize
"
result
REG_DWORD
)
)
)
{
result
=
0
;
}
}
*
aAdapterRAM
=
result
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterRAM2
(
uint32_t
*
aAdapterRAM
)
{
uint32_t
result
=
0
;
if
(
mHasDualGPU
)
{
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
1
-
mActiveGPUIndex
]
.
get
(
)
L
"
HardwareInformation
.
qwMemorySize
"
result
REG_QWORD
)
)
|
|
result
=
=
0
)
{
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
1
-
mActiveGPUIndex
]
.
get
(
)
L
"
HardwareInformation
.
MemorySize
"
result
REG_DWORD
)
)
)
{
result
=
0
;
}
}
}
*
aAdapterRAM
=
result
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriver
(
nsAString
&
aAdapterDriver
)
{
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
mActiveGPUIndex
]
.
get
(
)
L
"
InstalledDisplayDrivers
"
aAdapterDriver
REG_MULTI_SZ
)
)
)
aAdapterDriver
=
L
"
Unknown
"
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriver2
(
nsAString
&
aAdapterDriver
)
{
if
(
!
mHasDualGPU
)
{
aAdapterDriver
.
Truncate
(
)
;
}
else
if
(
NS_FAILED
(
GetKeyValue
(
mDeviceKey
[
1
-
mActiveGPUIndex
]
.
get
(
)
L
"
InstalledDisplayDrivers
"
aAdapterDriver
REG_MULTI_SZ
)
)
)
{
aAdapterDriver
=
L
"
Unknown
"
;
}
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverVendor
(
nsAString
&
aAdapterDriverVendor
)
{
aAdapterDriverVendor
.
Truncate
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverVersion
(
nsAString
&
aAdapterDriverVersion
)
{
aAdapterDriverVersion
=
mDriverVersion
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverDate
(
nsAString
&
aAdapterDriverDate
)
{
aAdapterDriverDate
=
mDriverDate
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverVendor2
(
nsAString
&
aAdapterDriverVendor
)
{
aAdapterDriverVendor
.
Truncate
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverVersion2
(
nsAString
&
aAdapterDriverVersion
)
{
aAdapterDriverVersion
=
mDriverVersion
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDriverDate2
(
nsAString
&
aAdapterDriverDate
)
{
aAdapterDriverDate
=
mDriverDate
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterVendorID
(
nsAString
&
aAdapterVendorID
)
{
aAdapterVendorID
=
mAdapterVendorID
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterVendorID2
(
nsAString
&
aAdapterVendorID
)
{
aAdapterVendorID
=
mAdapterVendorID
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDeviceID
(
nsAString
&
aAdapterDeviceID
)
{
aAdapterDeviceID
=
mAdapterDeviceID
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterDeviceID2
(
nsAString
&
aAdapterDeviceID
)
{
aAdapterDeviceID
=
mAdapterDeviceID
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterSubsysID
(
nsAString
&
aAdapterSubsysID
)
{
aAdapterSubsysID
=
mAdapterSubsysID
[
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetAdapterSubsysID2
(
nsAString
&
aAdapterSubsysID
)
{
aAdapterSubsysID
=
mAdapterSubsysID
[
1
-
mActiveGPUIndex
]
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetIsGPU2Active
(
bool
*
aIsGPU2Active
)
{
*
aIsGPU2Active
=
false
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDisplayInfo
(
nsTArray
<
nsString
>
&
aDisplayInfo
)
{
for
(
auto
displayInfo
:
mDisplayInfo
)
{
nsString
value
;
value
.
AppendPrintf
(
"
%
dx
%
d
%
dHz
%
s
"
displayInfo
.
mScreenWidth
displayInfo
.
mScreenHeight
displayInfo
.
mRefreshRate
displayInfo
.
mIsPseudoDisplay
?
"
Pseudo
Display
"
:
"
"
)
;
aDisplayInfo
.
AppendElement
(
value
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDisplayWidth
(
nsTArray
<
uint32_t
>
&
aDisplayWidth
)
{
for
(
auto
displayInfo
:
mDisplayInfo
)
{
aDisplayWidth
.
AppendElement
(
(
uint32_t
)
displayInfo
.
mScreenWidth
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDisplayHeight
(
nsTArray
<
uint32_t
>
&
aDisplayHeight
)
{
for
(
auto
displayInfo
:
mDisplayInfo
)
{
aDisplayHeight
.
AppendElement
(
(
uint32_t
)
displayInfo
.
mScreenHeight
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
GetDrmRenderDevice
(
nsACString
&
aDrmRenderDevice
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
static
void
CheckForCiscoVPN
(
)
{
LONG
result
;
HKEY
key
;
result
=
RegOpenKeyExW
(
HKEY_LOCAL_MACHINE
L
"
Software
\
\
Cisco
Systems
\
\
VPN
Client
"
0
KEY_QUERY_VALUE
&
key
)
;
if
(
result
=
=
ERROR_SUCCESS
)
{
RegCloseKey
(
key
)
;
CrashReporter
:
:
AppendAppNotesToCrashReport
(
"
Cisco
VPN
\
n
"
_ns
)
;
}
}
void
GfxInfo
:
:
AddCrashReportAnnotations
(
)
{
CheckForCiscoVPN
(
)
;
if
(
mHasDriverVersionMismatch
)
{
CrashReporter
:
:
AppendAppNotesToCrashReport
(
"
DriverVersionMismatch
\
n
"
_ns
)
;
}
nsString
deviceID
vendorID
driverVersion
subsysID
;
nsCString
narrowDeviceID
narrowVendorID
narrowDriverVersion
narrowSubsysID
;
GetAdapterDeviceID
(
deviceID
)
;
CopyUTF16toUTF8
(
deviceID
narrowDeviceID
)
;
GetAdapterVendorID
(
vendorID
)
;
CopyUTF16toUTF8
(
vendorID
narrowVendorID
)
;
GetAdapterDriverVersion
(
driverVersion
)
;
CopyUTF16toUTF8
(
driverVersion
narrowDriverVersion
)
;
GetAdapterSubsysID
(
subsysID
)
;
CopyUTF16toUTF8
(
subsysID
narrowSubsysID
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
AdapterVendorID
narrowVendorID
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
AdapterDeviceID
narrowDeviceID
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
AdapterDriverVersion
narrowDriverVersion
)
;
CrashReporter
:
:
AnnotateCrashReport
(
CrashReporter
:
:
Annotation
:
:
AdapterSubsysID
narrowSubsysID
)
;
nsAutoCString
note
;
if
(
vendorID
=
=
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
All
)
)
{
LossyAppendUTF16toASCII
(
mDeviceID
[
mActiveGPUIndex
]
note
)
;
note
.
AppendLiteral
(
"
"
)
;
LossyAppendUTF16toASCII
(
mDeviceKeyDebug
note
)
;
}
note
.
AppendLiteral
(
"
\
n
"
)
;
if
(
mHasDualGPU
)
{
nsString
deviceID2
vendorID2
subsysID2
;
nsAutoString
adapterDriverVersionString2
;
nsCString
narrowDeviceID2
narrowVendorID2
narrowSubsysID2
;
if
(
mActiveGPUIndex
=
=
1
)
{
note
.
AppendLiteral
(
"
Has
dual
GPUs
.
GPU
-
#
2
:
"
)
;
}
else
{
note
.
AppendLiteral
(
"
Has
dual
GPUs
.
GPU
#
2
:
"
)
;
}
GetAdapterDeviceID2
(
deviceID2
)
;
CopyUTF16toUTF8
(
deviceID2
narrowDeviceID2
)
;
GetAdapterVendorID2
(
vendorID2
)
;
CopyUTF16toUTF8
(
vendorID2
narrowVendorID2
)
;
GetAdapterDriverVersion2
(
adapterDriverVersionString2
)
;
GetAdapterSubsysID
(
subsysID2
)
;
CopyUTF16toUTF8
(
subsysID2
narrowSubsysID2
)
;
note
.
AppendLiteral
(
"
AdapterVendorID2
:
"
)
;
note
.
Append
(
narrowVendorID2
)
;
note
.
AppendLiteral
(
"
AdapterDeviceID2
:
"
)
;
note
.
Append
(
narrowDeviceID2
)
;
note
.
AppendLiteral
(
"
AdapterSubsysID2
:
"
)
;
note
.
Append
(
narrowSubsysID2
)
;
note
.
AppendLiteral
(
"
AdapterDriverVersion2
:
"
)
;
note
.
Append
(
NS_LossyConvertUTF16toASCII
(
adapterDriverVersionString2
)
)
;
}
CrashReporter
:
:
AppendAppNotesToCrashReport
(
note
)
;
}
static
OperatingSystem
WindowsVersionToOperatingSystem
(
int32_t
aWindowsVersion
)
{
switch
(
aWindowsVersion
)
{
case
kWindows7
:
return
OperatingSystem
:
:
Windows7
;
case
kWindows8
:
return
OperatingSystem
:
:
Windows8
;
case
kWindows8_1
:
return
OperatingSystem
:
:
Windows8_1
;
case
kWindows10
:
return
OperatingSystem
:
:
Windows10
;
case
kWindowsUnknown
:
default
:
return
OperatingSystem
:
:
Unknown
;
}
}
static
bool
OnlyAllowFeatureOnWhitelistedVendor
(
int32_t
aFeature
)
{
switch
(
aFeature
)
{
case
nsIGfxInfo
:
:
FEATURE_GPU_PROCESS
:
case
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_ANGLE
:
case
nsIGfxInfo
:
:
FEATURE_WEBRENDER_SOFTWARE
:
return
false
;
default
:
return
true
;
}
}
#
if
defined
(
_M_X64
)
static
inline
bool
DetectBrokenAVX
(
)
{
int
regs
[
4
]
;
__cpuid
(
regs
0
)
;
if
(
regs
[
0
]
=
=
0
)
{
return
false
;
}
__cpuid
(
regs
1
)
;
const
unsigned
AVX
=
1u
<
<
28
;
const
unsigned
XSAVE
=
1u
<
<
26
;
if
(
(
regs
[
2
]
&
(
AVX
|
XSAVE
)
)
!
=
(
AVX
|
XSAVE
)
)
{
return
false
;
}
const
unsigned
OSXSAVE
=
1u
<
<
27
;
if
(
(
regs
[
2
]
&
OSXSAVE
)
!
=
OSXSAVE
)
{
return
true
;
}
const
unsigned
AVX_CTRL_BITS
=
(
1
<
<
1
)
|
(
1
<
<
2
)
;
return
(
xgetbv
(
0
)
&
AVX_CTRL_BITS
)
!
=
AVX_CTRL_BITS
;
}
#
endif
const
nsTArray
<
GfxDriverInfo
>
&
GfxInfo
:
:
GetGfxDriverInfo
(
)
{
if
(
!
sDriverInfo
-
>
Length
(
)
)
{
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
NvidiaAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN_OR_EQUAL
V
(
8
15
11
8745
)
"
FEATURE_FAILURE_NV_W7_15
"
"
nVidia
driver
>
187
.
45
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
NvidiaAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE_START
V
(
8
16
10
0000
)
V
(
8
16
11
8745
)
"
FEATURE_FAILURE_NV_W7_16
"
"
nVidia
driver
>
187
.
45
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
NvidiaAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE_START
V
(
8
17
10
0000
)
V
(
8
17
11
8745
)
"
FEATURE_FAILURE_NV_W7_17
"
"
nVidia
driver
>
187
.
45
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
V
(
8
56
1
15
)
"
FEATURE_FAILURE_AMD1
"
"
8
.
56
.
1
.
15
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
AtiAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
8
832
0
0
)
"
FEATURE_FAILURE_BUG_1099252
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
AtiAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
8
783
2
2000
)
"
FEATURE_FAILURE_BUG_1118695
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
AtiAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
22
19
162
4
)
"
FEATURE_FAILURE_BUG_1587155
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
15
200
0
0
)
V
(
15
200
1062
1004
)
"
FEATURE_FAILURE_BUG_1198815
"
"
15
.
200
.
0
.
0
-
15
.
200
.
1062
.
1004
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
15
200
0
0
)
V
(
15
301
2301
1002
)
"
FEATURE_FAILURE_BUG_1267970
"
"
15
.
200
.
0
.
0
-
15
.
301
.
2301
.
1002
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
16
100
0
0
)
V
(
16
300
2311
0
)
"
FEATURE_FAILURE_BUG_1267970
"
"
16
.
100
.
0
.
0
-
16
.
300
.
2311
.
0
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows8
DeviceFamily
:
:
AtiAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE_START
V
(
8
982
0
0
)
V
(
8
983
0
0
)
"
FEATURE_FAILURE_BUG_783517_AMD
"
"
!
=
8
.
982
.
*
.
*
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
RadeonCaicos
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
V
(
15
301
1901
0
)
"
FEATURE_FAILURE_BUG_1599981
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_OPENGL_LAYERS
nsIGfxInfo
:
:
FEATURE_DISCOURAGED
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_OGL_ATI_DIS
"
)
;
#
define
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
winVer
devFamily
driverVer
ruleId
)
\
APPEND_TO_DRIVER_BLOCKLIST2
(
winVer
devFamily
GfxDriverInfo
:
:
allFeatures
\
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
\
DRIVER_LESS_THAN
driverVer
ruleId
)
#
define
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
winVer
devFamily
driverVer
\
ruleId
)
\
APPEND_TO_DRIVER_BLOCKLIST2
(
winVer
devFamily
nsIGfxInfo
:
:
FEATURE_DIRECT2D
\
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
\
DRIVER_BUILD_ID_LESS_THAN
driverVer
ruleId
)
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA500
2026
"
FEATURE_FAILURE_594877_7
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA900
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_594877_8
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA950
1930
"
FEATURE_FAILURE_594877_9
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA3150
2117
"
FEATURE_FAILURE_594877_10
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMAX3000
1930
"
FEATURE_FAILURE_594877_11
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST_D2D
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
2202
"
FEATURE_FAILURE_594877_12
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelGMAX4500HD
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_1180379
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA500
V
(
5
0
0
2026
)
"
FEATURE_FAILURE_INTEL_16
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA900
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_INTEL_17
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA950
V
(
8
15
10
1930
)
"
FEATURE_FAILURE_INTEL_18
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMA3150
V
(
8
14
10
1972
)
"
FEATURE_FAILURE_INTEL_19
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMAX3000
V
(
7
15
10
1666
)
"
FEATURE_FAILURE_INTEL_20
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMAX4500HD
V
(
7
15
10
1666
)
"
FEATURE_FAILURE_INTEL_21
"
)
;
IMPLEMENT_INTEL_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
V
(
7
15
10
1666
)
"
FEATURE_FAILURE_INTEL_22
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMAX4500HD
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
8
15
10
1749
)
"
FEATURE_FAILURE_BUG_1074378_1
"
"
8
.
15
.
10
.
2342
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
8
15
10
1749
)
"
FEATURE_FAILURE_BUG_1074378_2
"
"
8
.
15
.
10
.
2342
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_OPENGL_LAYERS
nsIGfxInfo
:
:
FEATURE_DISCOURAGED
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_INTEL_OGL_DIS
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelSandyBridge
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BUILD_ID_LESS_THAN_OR_EQUAL
2321
"
FEATURE_FAILURE_BUG_1018278
"
"
X
.
X
.
X
.
2342
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelHaswell
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BUILD_ID_LESS_THAN_OR_EQUAL
4578
"
FEATURE_FAILURE_BUG_1432610
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelMobileHDGraphics
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN_OR_EQUAL
V
(
8
15
10
2302
)
"
FEATURE_FAILURE_BUG_806786
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows8
DeviceFamily
:
:
IntelMobileHDGraphics
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN_OR_EQUAL
V
(
8
15
10
2302
)
"
FEATURE_FAILURE_BUG_804144
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
8
15
10
2418
)
"
FEATURE_FAILURE_BUG_1433790
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
Bug1116812
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1116812
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
Bug1207665
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1207665_1
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
Bug1207665
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1207665_2
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
QualcommAll
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_QUALCOMM
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
QualcommAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN_OR_EQUAL
V
(
25
18
10440
0
)
"
FEATURE_FAILURE_BUG_1592826
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE_START
V
(
14
1
0
0
)
V
(
14
2
0
0
)
"
FEATURE_FAILURE_BUG_984488_1
"
"
ATI
Catalyst
14
.
6
+
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
NvidiaBlockD3D9Layers
nsIGfxInfo
:
:
FEATURE_DIRECT3D_9_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_612007
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
MicrosoftAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
V
(
6
2
0
0
)
"
<
6
.
2
.
0
.
0
"
"
FEATURE_FAILURE_REMOTE_FX
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
Nvidia310M
nsIGfxInfo
:
:
FEATURE_DIRECT2D
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1008759
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows10
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
15
200
1006
0
)
"
FEATURE_FAILURE_BUG_1139503
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
8
861
0
0
)
V
(
8
862
6
5000
)
"
FEATURE_FAILURE_BUG_1213107_1
"
"
Radeon
driver
>
8
.
862
.
6
.
5000
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_WEBGL_ANGLE
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
8
861
0
0
)
V
(
8
862
6
5000
)
"
FEATURE_FAILURE_BUG_1213107_2
"
"
Radeon
driver
>
8
.
862
.
6
.
5000
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
Bug1155608
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
V
(
8
15
10
2869
)
"
FEATURE_FAILURE_INTEL_W7_HW_DECODING
"
)
;
APPEND_TO_DRIVER_BLOCKLIST
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BUILD_ID_LESS_THAN_OR_EQUAL
2849
"
FEATURE_FAILURE_BUG_1203199_1
"
"
Intel
driver
>
X
.
X
.
X
.
2849
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
Nvidia8800GTS
nsIGfxInfo
:
:
FEATURE_HARDWARE_VIDEO_DECODING
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_EQUAL
V
(
9
18
13
4052
)
"
FEATURE_FAILURE_BUG_1203199_2
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE_GPU2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
Bug1137716
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
8
17
12
5730
)
V
(
8
17
12
6901
)
"
FEATURE_FAILURE_BUG_1137716
"
"
Nvidia
driver
>
8
.
17
.
12
.
6901
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelGMAX4500HD
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_ANGLE
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1153381
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
WindowsXP
DeviceFamily
:
:
IntelGMAX4500HD
nsIGfxInfo
:
:
FEATURE_WEBGL_ANGLE
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1336710
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
WindowsXP
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
nsIGfxInfo
:
:
FEATURE_WEBGL_ANGLE
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1336710
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelGMAX3000
nsIGfxInfo
:
:
FEATURE_DIRECT3D_9_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BUILD_ID_LESS_THAN_OR_EQUAL
1749
"
FEATURE_FAILURE_INTEL_W7_D3D9_LAYERS
"
)
;
#
if
defined
(
_M_X64
)
if
(
DetectBrokenAVX
(
)
)
{
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1403353
"
)
;
}
#
endif
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_WEBGL_OPENGL
nsIGfxInfo
:
:
FEATURE_DISCOURAGED
DRIVER_LESS_THAN
V
(
16
200
1010
1002
)
"
WEBGL_NATIVE_GL_OLD_AMD
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_WEBGL_OPENGL
nsIGfxInfo
:
:
FEATURE_DISCOURAGED
DRIVER_BUILD_ID_LESS_THAN
4331
"
WEBGL_NATIVE_GL_OLD_INTEL
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
NvidiaAll
nsIGfxInfo
:
:
FEATURE_WEBGL_OPENGL
nsIGfxInfo
:
:
FEATURE_DISCOURAGED
DRIVER_LESS_THAN
V
(
10
18
13
6200
)
"
WEBGL_NATIVE_GL_OLD_NVIDIA
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_DX_INTEROP2
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
DX_INTEROP2_AMD_CRASH
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
nsIGfxInfo
:
:
FEATURE_D3D11_KEYED_MUTEX
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_FAILURE_BUG_1359416
"
)
;
APPEND_TO_DRIVER_BLOCKLIST_RANGE
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
NvidiaAll
nsIGfxInfo
:
:
FEATURE_ADVANCED_LAYERS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BETWEEN_INCLUSIVE
V
(
23
21
13
8569
)
V
(
23
21
13
9135
)
"
FEATURE_FAILURE_BUG_1419264
"
"
Windows
10
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
Bug1447141
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_EQUAL
V
(
15
201
2201
0
)
"
FEATURE_FAILURE_BUG_1447141_1
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows7
DeviceFamily
:
:
Bug1447141
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_EQUAL
V
(
15
201
1701
0
)
"
FEATURE_FAILURE_BUG_1447141_1
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
NvidiaAll
GfxDriverInfo
:
:
allFeatures
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_EQUAL
V
(
24
21
13
9731
)
"
FEATURE_FAILURE_BUG_1457758
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelHDGraphicsToSandyBridge
nsIGfxInfo
:
:
FEATURE_DX_NV12
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_BUILD_ID_LESS_THAN_OR_EQUAL
4459
"
FEATURE_BLOCKED_DRIVER_VERSION
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
NvidiaAll
nsIGfxInfo
:
:
FEATURE_DX_P010
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_UNQUALIFIED_P010_NVIDIA
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
NvidiaBlockWebRender
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN
GfxDriverInfo
:
:
allDriverVersions
"
FEATURE_UNQUALIFIED_WEBRENDER_NVIDIA_BLOCKED
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_BLOCKED_DRIVER_VERSION
DRIVER_LESS_THAN_OR_EQUAL
V
(
8
56
1
16
)
"
CRASHY_DRIVERS_BUG_1678808
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2_EXT
(
OperatingSystem
:
:
Windows
ScreenSizeStatus
:
:
All
BatteryStatus
:
:
All
DesktopEnvironment
:
:
All
WindowProtocol
:
:
All
DriverVendor
:
:
All
DeviceFamily
:
:
AmdR600
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_ALLOW_ALWAYS
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_ROLLOUT_AMD_R600
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2_EXT
(
OperatingSystem
:
:
Windows
ScreenSizeStatus
:
:
All
BatteryStatus
:
:
All
DesktopEnvironment
:
:
All
WindowProtocol
:
:
All
DriverVendor
:
:
All
DeviceFamily
:
:
AtiRolloutWebRender
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_ALLOW_ALWAYS
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_ROLLOUT_DESKTOP_AMD
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2_EXT
(
OperatingSystem
:
:
Windows
ScreenSizeStatus
:
:
All
BatteryStatus
:
:
All
DesktopEnvironment
:
:
All
WindowProtocol
:
:
All
DriverVendor
:
:
All
DeviceFamily
:
:
NvidiaRolloutWebRender
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_ALLOW_ALWAYS
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_ROLLOUT_NV
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2_EXT
(
OperatingSystem
:
:
Windows
ScreenSizeStatus
:
:
All
BatteryStatus
:
:
All
DesktopEnvironment
:
:
All
WindowProtocol
:
:
All
DriverVendor
:
:
All
DeviceFamily
:
:
IntelRolloutWebRender
nsIGfxInfo
:
:
FEATURE_WEBRENDER
nsIGfxInfo
:
:
FEATURE_ALLOW_ALWAYS
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_ROLLOUT_INTEL
"
)
;
#
ifndef
EARLY_BETA_OR_EARLIER
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_WEBRENDER_COMPOSITOR
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_EQUAL
V
(
24
20
100
6293
)
"
FEATURE_FAILURE_BUG_1602511
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AtiAll
nsIGfxInfo
:
:
FEATURE_WEBRENDER_COMPOSITOR
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_LESS_THAN_OR_EQUAL
V
(
8
17
10
1129
)
"
FEATURE_FAILURE_CHROME_BUG_800950
"
)
;
#
endif
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
IntelAll
nsIGfxInfo
:
:
FEATURE_WEBRENDER_SCISSORED_CACHE_CLEARS
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_FAILURE_BUG_1603515
"
)
;
APPEND_TO_DRIVER_BLOCKLIST2
(
OperatingSystem
:
:
Windows
DeviceFamily
:
:
AmazonAll
nsIGfxInfo
:
:
FEATURE_WEBRENDER_SOFTWARE
nsIGfxInfo
:
:
FEATURE_BLOCKED_DEVICE
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_FAILURE_BUG_1678044
"
)
;
#
ifdef
NIGHTLY_BUILD
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
|
|
defined
(
__i386__
)
|
|
\
defined
(
__i386
)
|
|
defined
(
__amd64__
)
APPEND_TO_DRIVER_BLOCKLIST2_EXT
(
OperatingSystem
:
:
Windows
ScreenSizeStatus
:
:
SmallAndMedium
BatteryStatus
:
:
All
DesktopEnvironment
:
:
All
WindowProtocol
:
:
All
DriverVendor
:
:
All
DeviceFamily
:
:
All
nsIGfxInfo
:
:
FEATURE_WEBRENDER_SOFTWARE
nsIGfxInfo
:
:
FEATURE_ALLOW_ALWAYS
DRIVER_COMPARISON_IGNORED
V
(
0
0
0
0
)
"
FEATURE_ROLLOUT_NIGHTLY_SOFTWARE_WR_S_M_SCRN
"
)
;
#
endif
#
endif
}
return
*
sDriverInfo
;
}
nsresult
GfxInfo
:
:
GetFeatureStatusImpl
(
int32_t
aFeature
int32_t
*
aStatus
nsAString
&
aSuggestedDriverVersion
const
nsTArray
<
GfxDriverInfo
>
&
aDriverInfo
nsACString
&
aFailureId
OperatingSystem
*
aOS
)
{
NS_ENSURE_ARG_POINTER
(
aStatus
)
;
aSuggestedDriverVersion
.
SetIsVoid
(
true
)
;
OperatingSystem
os
=
WindowsVersionToOperatingSystem
(
mWindowsVersion
)
;
*
aStatus
=
nsIGfxInfo
:
:
FEATURE_STATUS_UNKNOWN
;
if
(
aOS
)
*
aOS
=
os
;
if
(
sShutdownOccurred
)
{
return
NS_OK
;
}
if
(
!
aDriverInfo
.
Length
(
)
)
{
nsAutoString
adapterVendorID
;
nsAutoString
adapterDeviceID
;
nsAutoString
adapterDriverVersionString
;
if
(
NS_FAILED
(
GetAdapterVendorID
(
adapterVendorID
)
)
|
|
NS_FAILED
(
GetAdapterDeviceID
(
adapterDeviceID
)
)
|
|
NS_FAILED
(
GetAdapterDriverVersion
(
adapterDriverVersionString
)
)
)
{
aFailureId
=
"
FEATURE_FAILURE_GET_ADAPTER
"
;
*
aStatus
=
FEATURE_BLOCKED_DEVICE
;
return
NS_OK
;
}
if
(
OnlyAllowFeatureOnWhitelistedVendor
(
aFeature
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
Intel
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
NVIDIA
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
ATI
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
Microsoft
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
Parallels
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
Qualcomm
)
nsCaseInsensitiveStringComparator
)
&
&
!
adapterVendorID
.
LowerCaseEqualsLiteral
(
"
0xabcd
"
)
&
&
!
adapterVendorID
.
LowerCaseEqualsLiteral
(
"
0xdcba
"
)
&
&
!
adapterVendorID
.
LowerCaseEqualsLiteral
(
"
0xabab
"
)
&
&
!
adapterVendorID
.
LowerCaseEqualsLiteral
(
"
0xdcdc
"
)
)
{
if
(
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
MicrosoftHyperV
)
nsCaseInsensitiveStringComparator
)
|
|
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
VMWare
)
nsCaseInsensitiveStringComparator
)
|
|
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
VirtualBox
)
nsCaseInsensitiveStringComparator
)
)
{
aFailureId
=
"
FEATURE_FAILURE_VM_VENDOR
"
;
}
else
if
(
adapterVendorID
.
Equals
(
GfxDriverInfo
:
:
GetDeviceVendor
(
DeviceVendor
:
:
MicrosoftBasic
)
nsCaseInsensitiveStringComparator
)
)
{
aFailureId
=
"
FEATURE_FAILURE_MICROSOFT_BASIC_VENDOR
"
;
}
else
if
(
adapterVendorID
.
IsEmpty
(
)
)
{
aFailureId
=
"
FEATURE_FAILURE_EMPTY_DEVICE_VENDOR
"
;
}
else
{
aFailureId
=
"
FEATURE_FAILURE_UNKNOWN_DEVICE_VENDOR
"
;
}
*
aStatus
=
FEATURE_BLOCKED_DEVICE
;
return
NS_OK
;
}
uint64_t
driverVersion
;
if
(
!
ParseDriverVersion
(
adapterDriverVersionString
&
driverVersion
)
)
{
aFailureId
=
"
FEATURE_FAILURE_PARSE_DRIVER
"
;
*
aStatus
=
FEATURE_BLOCKED_DRIVER_VERSION
;
return
NS_OK
;
}
if
(
mHasDriverVersionMismatch
)
{
*
aStatus
=
nsIGfxInfo
:
:
FEATURE_BLOCKED_MISMATCHED_VERSION
;
return
NS_OK
;
}
}
return
GfxInfoBase
:
:
GetFeatureStatusImpl
(
aFeature
aStatus
aSuggestedDriverVersion
aDriverInfo
aFailureId
&
os
)
;
}
nsresult
GfxInfo
:
:
FindMonitors
(
JSContext
*
aCx
JS
:
:
HandleObject
aOutArray
)
{
int
deviceCount
=
0
;
for
(
auto
displayInfo
:
mDisplayInfo
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
JS_NewPlainObject
(
aCx
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
screenWidth
(
aCx
JS
:
:
Int32Value
(
displayInfo
.
mScreenWidth
)
)
;
JS_SetProperty
(
aCx
obj
"
screenWidth
"
screenWidth
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
screenHeight
(
aCx
JS
:
:
Int32Value
(
displayInfo
.
mScreenHeight
)
)
;
JS_SetProperty
(
aCx
obj
"
screenHeight
"
screenHeight
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
refreshRate
(
aCx
JS
:
:
Int32Value
(
displayInfo
.
mRefreshRate
)
)
;
JS_SetProperty
(
aCx
obj
"
refreshRate
"
refreshRate
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
pseudoDisplay
(
aCx
JS
:
:
BooleanValue
(
displayInfo
.
mIsPseudoDisplay
)
)
;
JS_SetProperty
(
aCx
obj
"
pseudoDisplay
"
pseudoDisplay
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
element
(
aCx
JS
:
:
ObjectValue
(
*
obj
)
)
;
JS_SetElement
(
aCx
aOutArray
deviceCount
+
+
element
)
;
}
return
NS_OK
;
}
void
GfxInfo
:
:
DescribeFeatures
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
)
{
GfxInfoBase
:
:
DescribeFeatures
(
aCx
aObj
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
aCx
)
;
gfx
:
:
FeatureState
&
d3d11
=
gfxConfig
:
:
GetFeature
(
Feature
:
:
D3D11_COMPOSITING
)
;
if
(
!
InitFeatureObject
(
aCx
aObj
"
d3d11
"
d3d11
&
obj
)
)
{
return
;
}
if
(
d3d11
.
GetValue
(
)
=
=
gfx
:
:
FeatureStatus
:
:
Available
)
{
DeviceManagerDx
*
dm
=
DeviceManagerDx
:
:
Get
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
aCx
JS
:
:
Int32Value
(
dm
-
>
GetCompositorFeatureLevel
(
)
)
)
;
JS_SetProperty
(
aCx
obj
"
version
"
val
)
;
val
=
JS
:
:
BooleanValue
(
dm
-
>
IsWARP
(
)
)
;
JS_SetProperty
(
aCx
obj
"
warp
"
val
)
;
val
=
JS
:
:
BooleanValue
(
dm
-
>
TextureSharingWorks
(
)
)
;
JS_SetProperty
(
aCx
obj
"
textureSharing
"
val
)
;
bool
blocklisted
=
false
;
if
(
nsCOMPtr
<
nsIGfxInfo
>
gfxInfo
=
services
:
:
GetGfxInfo
(
)
)
{
int32_t
status
;
nsCString
discardFailureId
;
if
(
SUCCEEDED
(
gfxInfo
-
>
GetFeatureStatus
(
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
discardFailureId
&
status
)
)
)
{
blocklisted
=
(
status
!
=
nsIGfxInfo
:
:
FEATURE_STATUS_OK
)
;
}
}
val
=
JS
:
:
BooleanValue
(
blocklisted
)
;
JS_SetProperty
(
aCx
obj
"
blocklisted
"
val
)
;
}
gfx
:
:
FeatureState
&
d2d
=
gfxConfig
:
:
GetFeature
(
Feature
:
:
DIRECT2D
)
;
if
(
!
InitFeatureObject
(
aCx
aObj
"
d2d
"
d2d
&
obj
)
)
{
return
;
}
{
const
char
*
version
=
"
1
.
1
"
;
JS
:
:
Rooted
<
JSString
*
>
str
(
aCx
JS_NewStringCopyZ
(
aCx
version
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
aCx
JS
:
:
StringValue
(
str
)
)
;
JS_SetProperty
(
aCx
obj
"
version
"
val
)
;
}
}
#
ifdef
DEBUG
NS_IMETHODIMP
GfxInfo
:
:
SpoofVendorID
(
const
nsAString
&
aVendorID
)
{
mAdapterVendorID
[
mActiveGPUIndex
]
=
aVendorID
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
SpoofDeviceID
(
const
nsAString
&
aDeviceID
)
{
mAdapterDeviceID
[
mActiveGPUIndex
]
=
aDeviceID
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
SpoofDriverVersion
(
const
nsAString
&
aDriverVersion
)
{
mDriverVersion
[
mActiveGPUIndex
]
=
aDriverVersion
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
SpoofOSVersion
(
uint32_t
aVersion
)
{
mWindowsVersion
=
aVersion
;
return
NS_OK
;
}
NS_IMETHODIMP
GfxInfo
:
:
FireTestProcess
(
)
{
return
NS_OK
;
}
#
endif
