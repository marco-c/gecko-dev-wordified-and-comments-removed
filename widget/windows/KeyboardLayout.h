#
ifndef
KeyboardLayout_h__
#
define
KeyboardLayout_h__
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWindowBase
.
h
"
#
include
"
nsWindowDefs
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
TextEventDispatcher
.
h
"
#
include
"
mozilla
/
widget
/
WinMessages
.
h
"
#
include
"
mozilla
/
widget
/
WinModifierKeyState
.
h
"
#
include
<
windows
.
h
>
#
define
NS_NUM_OF_KEYS
70
#
define
VK_OEM_1
0xBA
/
/
'
;
:
'
for
US
#
define
VK_OEM_PLUS
0xBB
/
/
'
+
'
any
country
#
define
VK_OEM_COMMA
0xBC
#
define
VK_OEM_MINUS
0xBD
/
/
'
-
'
any
country
#
define
VK_OEM_PERIOD
0xBE
#
define
VK_OEM_2
0xBF
#
define
VK_OEM_3
0xC0
#
define
VK_ABNT_C1
0xC1
#
define
VK_ABNT_C2
0xC2
#
define
VK_OEM_4
0xDB
#
define
VK_OEM_5
0xDC
#
define
VK_OEM_6
0xDD
#
define
VK_OEM_7
0xDE
#
define
VK_OEM_8
0xDF
#
define
VK_OEM_102
0xE2
#
define
VK_OEM_CLEAR
0xFE
class
nsIIdleServiceInternal
;
namespace
mozilla
{
namespace
widget
{
static
const
uint32_t
sModifierKeyMap
[
]
[
3
]
=
{
{
nsIWidget
:
:
CAPS_LOCK
VK_CAPITAL
0
}
{
nsIWidget
:
:
NUM_LOCK
VK_NUMLOCK
0
}
{
nsIWidget
:
:
SHIFT_L
VK_SHIFT
VK_LSHIFT
}
{
nsIWidget
:
:
SHIFT_R
VK_SHIFT
VK_RSHIFT
}
{
nsIWidget
:
:
CTRL_L
VK_CONTROL
VK_LCONTROL
}
{
nsIWidget
:
:
CTRL_R
VK_CONTROL
VK_RCONTROL
}
{
nsIWidget
:
:
ALT_L
VK_MENU
VK_LMENU
}
{
nsIWidget
:
:
ALT_R
VK_MENU
VK_RMENU
}
}
;
class
KeyboardLayout
;
class
MOZ_STACK_CLASS
UniCharsAndModifiers
final
{
public
:
UniCharsAndModifiers
(
)
{
}
UniCharsAndModifiers
operator
+
(
const
UniCharsAndModifiers
&
aOther
)
const
;
UniCharsAndModifiers
&
operator
+
=
(
const
UniCharsAndModifiers
&
aOther
)
;
void
Append
(
char16_t
aUniChar
Modifiers
aModifiers
)
;
void
Clear
(
)
{
mChars
.
Truncate
(
)
;
mModifiers
.
Clear
(
)
;
}
bool
IsEmpty
(
)
const
{
MOZ_ASSERT
(
mChars
.
Length
(
)
=
=
mModifiers
.
Length
(
)
)
;
return
mChars
.
IsEmpty
(
)
;
}
char16_t
CharAt
(
size_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
<
Length
(
)
)
;
return
mChars
[
aIndex
]
;
}
Modifiers
ModifiersAt
(
size_t
aIndex
)
const
{
MOZ_ASSERT
(
aIndex
<
Length
(
)
)
;
return
mModifiers
[
aIndex
]
;
}
size_t
Length
(
)
const
{
MOZ_ASSERT
(
mChars
.
Length
(
)
=
=
mModifiers
.
Length
(
)
)
;
return
mChars
.
Length
(
)
;
}
void
FillModifiers
(
Modifiers
aModifiers
)
;
void
OverwriteModifiersIfBeginsWith
(
const
UniCharsAndModifiers
&
aOther
)
;
bool
UniCharsEqual
(
const
UniCharsAndModifiers
&
aOther
)
const
;
bool
UniCharsCaseInsensitiveEqual
(
const
UniCharsAndModifiers
&
aOther
)
const
;
bool
BeginsWith
(
const
UniCharsAndModifiers
&
aOther
)
const
;
const
nsString
&
ToString
(
)
const
{
return
mChars
;
}
private
:
nsAutoString
mChars
;
AutoTArray
<
Modifiers
5
>
mModifiers
;
}
;
struct
DeadKeyEntry
{
char16_t
BaseChar
;
char16_t
CompositeChar
;
}
;
class
DeadKeyTable
{
friend
class
KeyboardLayout
;
uint16_t
mEntries
;
DeadKeyEntry
mTable
[
1
]
;
void
Init
(
const
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aEntries
)
{
mEntries
=
aEntries
;
memcpy
(
mTable
aDeadKeyArray
aEntries
*
sizeof
(
DeadKeyEntry
)
)
;
}
static
uint32_t
SizeInBytes
(
uint32_t
aEntries
)
{
return
offsetof
(
DeadKeyTable
mTable
)
+
aEntries
*
sizeof
(
DeadKeyEntry
)
;
}
public
:
uint32_t
Entries
(
)
const
{
return
mEntries
;
}
bool
IsEqual
(
const
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aEntries
)
const
{
return
(
mEntries
=
=
aEntries
&
&
!
memcmp
(
mTable
aDeadKeyArray
aEntries
*
sizeof
(
DeadKeyEntry
)
)
)
;
}
char16_t
GetCompositeChar
(
char16_t
aBaseChar
)
const
;
}
;
class
VirtualKey
{
public
:
enum
ShiftStateFlag
{
STATE_SHIFT
=
0x01
STATE_CONTROL
=
0x02
STATE_ALT
=
0x04
STATE_CAPSLOCK
=
0x08
}
;
typedef
uint8_t
ShiftState
;
static
ShiftState
ModifiersToShiftState
(
Modifiers
aModifiers
)
;
static
ShiftState
ModifierKeyStateToShiftState
(
const
ModifierKeyState
&
aModKeyState
)
{
return
ModifiersToShiftState
(
aModKeyState
.
GetModifiers
(
)
)
;
}
static
Modifiers
ShiftStateToModifiers
(
ShiftState
aShiftState
)
;
private
:
union
KeyShiftState
{
struct
{
char16_t
Chars
[
4
]
;
}
Normal
;
struct
{
const
DeadKeyTable
*
Table
;
char16_t
DeadChar
;
}
DeadKey
;
}
;
KeyShiftState
mShiftStates
[
16
]
;
uint16_t
mIsDeadKey
;
void
SetDeadKey
(
ShiftState
aShiftState
bool
aIsDeadKey
)
{
if
(
aIsDeadKey
)
{
mIsDeadKey
|
=
1
<
<
aShiftState
;
}
else
{
mIsDeadKey
&
=
~
(
1
<
<
aShiftState
)
;
}
}
public
:
static
void
FillKbdState
(
PBYTE
aKbdState
const
ShiftState
aShiftState
)
;
bool
IsDeadKey
(
ShiftState
aShiftState
)
const
{
return
(
mIsDeadKey
&
(
1
<
<
aShiftState
)
)
!
=
0
;
}
void
AttachDeadKeyTable
(
ShiftState
aShiftState
const
DeadKeyTable
*
aDeadKeyTable
)
{
mShiftStates
[
aShiftState
]
.
DeadKey
.
Table
=
aDeadKeyTable
;
}
void
SetNormalChars
(
ShiftState
aShiftState
const
char16_t
*
aChars
uint32_t
aNumOfChars
)
;
void
SetDeadChar
(
ShiftState
aShiftState
char16_t
aDeadChar
)
;
const
DeadKeyTable
*
MatchingDeadKeyTable
(
const
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aEntries
)
const
;
inline
char16_t
GetCompositeChar
(
ShiftState
aShiftState
char16_t
aBaseChar
)
const
{
return
mShiftStates
[
aShiftState
]
.
DeadKey
.
Table
-
>
GetCompositeChar
(
aBaseChar
)
;
}
char16_t
GetCompositeChar
(
const
ModifierKeyState
&
aModKeyState
char16_t
aBaseChar
)
const
{
return
GetCompositeChar
(
ModifierKeyStateToShiftState
(
aModKeyState
)
aBaseChar
)
;
}
UniCharsAndModifiers
GetNativeUniChars
(
ShiftState
aShiftState
)
const
;
UniCharsAndModifiers
GetNativeUniChars
(
const
ModifierKeyState
&
aModKeyState
)
const
{
return
GetNativeUniChars
(
ModifierKeyStateToShiftState
(
aModKeyState
)
)
;
}
UniCharsAndModifiers
GetUniChars
(
ShiftState
aShiftState
)
const
;
UniCharsAndModifiers
GetUniChars
(
const
ModifierKeyState
&
aModKeyState
)
const
{
return
GetUniChars
(
ModifierKeyStateToShiftState
(
aModKeyState
)
)
;
}
}
;
class
MOZ_STACK_CLASS
NativeKey
final
{
friend
class
KeyboardLayout
;
public
:
struct
FakeCharMsg
{
UINT
mCharCode
;
UINT
mScanCode
;
bool
mIsSysKey
;
bool
mIsDeadKey
;
bool
mConsumed
;
FakeCharMsg
(
)
:
mCharCode
(
0
)
mScanCode
(
0
)
mIsSysKey
(
false
)
mIsDeadKey
(
false
)
mConsumed
(
false
)
{
}
MSG
GetCharMsg
(
HWND
aWnd
)
const
{
MSG
msg
;
msg
.
hwnd
=
aWnd
;
msg
.
message
=
mIsDeadKey
&
&
mIsSysKey
?
WM_SYSDEADCHAR
:
mIsDeadKey
?
WM_DEADCHAR
:
mIsSysKey
?
WM_SYSCHAR
:
WM_CHAR
;
msg
.
wParam
=
static_cast
<
WPARAM
>
(
mCharCode
)
;
msg
.
lParam
=
static_cast
<
LPARAM
>
(
mScanCode
<
<
16
)
;
msg
.
time
=
0
;
msg
.
pt
.
x
=
msg
.
pt
.
y
=
0
;
return
msg
;
}
}
;
NativeKey
(
nsWindowBase
*
aWidget
const
MSG
&
aMessage
const
ModifierKeyState
&
aModKeyState
HKL
aOverrideKeyboardLayout
=
0
nsTArray
<
FakeCharMsg
>
*
aFakeCharMsgs
=
nullptr
)
;
~
NativeKey
(
)
;
bool
HandleKeyDownMessage
(
bool
*
aEventDispatched
=
nullptr
)
const
;
bool
HandleCharMessage
(
bool
*
aEventDispatched
=
nullptr
)
const
;
bool
HandleKeyUpMessage
(
bool
*
aEventDispatched
=
nullptr
)
const
;
bool
HandleAppCommandMessage
(
)
const
;
void
WillDispatchKeyboardEvent
(
WidgetKeyboardEvent
&
aKeyboardEvent
uint32_t
aIndex
)
;
static
bool
IsControlChar
(
char16_t
aChar
)
;
private
:
NativeKey
*
mLastInstance
;
MSG
mRemovingMsg
;
MSG
mReceivedMsg
;
RefPtr
<
nsWindowBase
>
mWidget
;
RefPtr
<
TextEventDispatcher
>
mDispatcher
;
HKL
mKeyboardLayout
;
MSG
mMsg
;
AutoTArray
<
MSG
5
>
mFollowingCharMsgs
;
nsTArray
<
MSG
>
mRemovedOddCharMsgs
;
HWND
mFocusedWndBeforeDispatch
;
uint32_t
mDOMKeyCode
;
KeyNameIndex
mKeyNameIndex
;
CodeNameIndex
mCodeNameIndex
;
ModifierKeyState
mModKeyState
;
uint8_t
mVirtualKeyCode
;
uint8_t
mOriginalVirtualKeyCode
;
UniCharsAndModifiers
mCommittedCharsAndModifiers
;
UniCharsAndModifiers
mInputtingStringAndModifiers
;
UniCharsAndModifiers
mShiftedString
;
UniCharsAndModifiers
mUnshiftedString
;
uint32_t
mShiftedLatinChar
;
uint32_t
mUnshiftedLatinChar
;
WORD
mScanCode
;
bool
mIsExtended
;
bool
mIsRepeat
;
bool
mIsDeadKey
;
bool
mIsPrintableKey
;
bool
mIsSkippableInRemoteProcess
;
bool
mCharMessageHasGone
;
bool
mIsOverridingKeyboardLayout
;
bool
mCanIgnoreModifierStateAtKeyPress
;
nsTArray
<
FakeCharMsg
>
*
mFakeCharMsgs
;
static
uint8_t
sDispatchedKeyOfAppCommand
;
NativeKey
(
)
{
MOZ_CRASH
(
"
The
default
constructor
of
NativeKey
isn
'
t
available
"
)
;
}
void
InitWithAppCommand
(
)
;
void
InitWithKeyOrChar
(
)
;
void
InitIsSkippableForKeyOrChar
(
const
MSG
&
aLastKeyMSG
)
;
void
InitCommittedCharsAndModifiersWithFollowingCharMessages
(
const
ModifierKeyState
&
aModKeyState
)
;
UINT
GetScanCodeWithExtendedFlag
(
)
const
;
uint32_t
GetKeyLocation
(
)
const
;
void
RemoveFollowingOddCharMessages
(
)
;
bool
IsIMEDoingKakuteiUndo
(
)
const
;
bool
IsKeyDownMessage
(
)
const
{
return
(
mMsg
.
message
=
=
WM_KEYDOWN
|
|
mMsg
.
message
=
=
WM_SYSKEYDOWN
|
|
mMsg
.
message
=
=
MOZ_WM_KEYDOWN
)
;
}
bool
IsKeyUpMessage
(
)
const
{
return
(
mMsg
.
message
=
=
WM_KEYUP
|
|
mMsg
.
message
=
=
WM_SYSKEYUP
|
|
mMsg
.
message
=
=
MOZ_WM_KEYUP
)
;
}
bool
IsCharOrSysCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsCharOrSysCharMessage
(
aMSG
.
message
)
;
}
bool
IsCharOrSysCharMessage
(
UINT
aMessage
)
const
{
return
(
aMessage
=
=
WM_CHAR
|
|
aMessage
=
=
WM_SYSCHAR
)
;
}
bool
IsCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsCharMessage
(
aMSG
.
message
)
;
}
bool
IsCharMessage
(
UINT
aMessage
)
const
{
return
(
IsCharOrSysCharMessage
(
aMessage
)
|
|
IsDeadCharMessage
(
aMessage
)
)
;
}
bool
IsDeadCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsDeadCharMessage
(
aMSG
.
message
)
;
}
bool
IsDeadCharMessage
(
UINT
aMessage
)
const
{
return
(
aMessage
=
=
WM_DEADCHAR
|
|
aMessage
=
=
WM_SYSDEADCHAR
)
;
}
bool
IsSysCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsSysCharMessage
(
aMSG
.
message
)
;
}
bool
IsSysCharMessage
(
UINT
aMessage
)
const
{
return
(
aMessage
=
=
WM_SYSCHAR
|
|
aMessage
=
=
WM_SYSDEADCHAR
)
;
}
bool
MayBeSameCharMessage
(
const
MSG
&
aCharMsg1
const
MSG
&
aCharMsg2
)
const
;
bool
IsSamePhysicalKeyMessage
(
const
MSG
&
aKeyOrCharMsg1
const
MSG
&
aKeyOrCharMsg2
)
const
;
bool
IsFollowedByPrintableCharMessage
(
)
const
;
bool
IsFollowedByPrintableCharOrSysCharMessage
(
)
const
;
bool
IsFollowedByDeadCharMessage
(
)
const
;
bool
IsKeyMessageOnPlugin
(
)
const
{
return
(
mMsg
.
message
=
=
MOZ_WM_KEYDOWN
|
|
mMsg
.
message
=
=
MOZ_WM_KEYUP
)
;
}
bool
IsPrintableCharMessage
(
const
MSG
&
aMSG
)
const
{
return
aMSG
.
message
=
=
WM_CHAR
&
&
!
IsControlChar
(
static_cast
<
char16_t
>
(
aMSG
.
wParam
)
)
;
}
bool
IsEnterKeyPressCharMessage
(
const
MSG
&
aMSG
)
const
{
return
aMSG
.
message
=
=
WM_CHAR
&
&
aMSG
.
wParam
=
=
'
\
r
'
;
}
bool
IsPrintableCharOrSysCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsCharOrSysCharMessage
(
aMSG
)
&
&
!
IsControlChar
(
static_cast
<
char16_t
>
(
aMSG
.
wParam
)
)
;
}
bool
IsControlCharMessage
(
const
MSG
&
aMSG
)
const
{
return
IsCharMessage
(
aMSG
.
message
)
&
&
IsControlChar
(
static_cast
<
char16_t
>
(
aMSG
.
wParam
)
)
;
}
bool
IsReservedBySystem
(
)
const
;
bool
GetFollowingCharMessage
(
MSG
&
aCharMsg
)
;
uint8_t
ComputeVirtualKeyCodeFromScanCode
(
)
const
;
uint8_t
ComputeVirtualKeyCodeFromScanCodeEx
(
)
const
;
uint16_t
ComputeScanCodeExFromVirtualKeyCode
(
UINT
aVirtualKeyCode
)
const
;
char16_t
ComputeUnicharFromScanCode
(
)
const
;
nsEventStatus
InitKeyEvent
(
WidgetKeyboardEvent
&
aKeyEvent
const
ModifierKeyState
&
aModKeyState
const
MSG
*
aMsgSentToPlugin
=
nullptr
)
const
;
nsEventStatus
InitKeyEvent
(
WidgetKeyboardEvent
&
aKeyEvent
const
MSG
*
aMsgSentToPlugin
=
nullptr
)
const
;
void
MaybeInitPluginEventOfKeyEvent
(
WidgetKeyboardEvent
&
aKeyEvent
const
MSG
&
aMsgSentToPlugin
)
const
;
bool
DispatchCommandEvent
(
uint32_t
aEventCommand
)
const
;
bool
DispatchKeyPressEventsWithRetrievedCharMessages
(
)
const
;
bool
DispatchKeyPressEventsWithoutCharMessage
(
)
const
;
bool
MaybeDispatchPluginEventsForRemovedCharMessages
(
)
const
;
bool
NeedsToHandleWithoutFollowingCharMessages
(
)
const
;
void
ComputeInputtingStringWithKeyboardLayout
(
)
;
bool
IsFocusedWindowChanged
(
)
const
{
return
mFocusedWndBeforeDispatch
!
=
:
:
GetFocus
(
)
;
}
bool
HandleCharMessage
(
const
MSG
&
aCharMsg
bool
*
aEventDispatched
=
nullptr
)
const
;
static
NativeKey
*
sLatestInstance
;
static
const
MSG
sEmptyMSG
;
static
MSG
sLastKeyOrCharMSG
;
static
MSG
sLastKeyMSG
;
static
bool
IsEmptyMSG
(
const
MSG
&
aMSG
)
{
return
!
memcmp
(
&
aMSG
&
sEmptyMSG
sizeof
(
MSG
)
)
;
}
bool
IsAnotherInstanceRemovingCharMessage
(
)
const
{
return
mLastInstance
&
&
!
IsEmptyMSG
(
mLastInstance
-
>
mRemovingMsg
)
;
}
public
:
static
const
MSG
&
LastKeyOrCharMSG
(
)
{
return
sLastKeyOrCharMSG
;
}
}
;
class
KeyboardLayout
{
public
:
static
KeyboardLayout
*
GetInstance
(
)
;
static
void
Shutdown
(
)
;
static
HKL
GetActiveLayout
(
)
;
static
nsCString
GetActiveLayoutName
(
)
;
static
void
NotifyIdleServiceOfUserActivity
(
)
;
static
bool
IsPrintableCharKey
(
uint8_t
aVirtualKey
)
;
bool
IsDeadKey
(
uint8_t
aVirtualKey
const
ModifierKeyState
&
aModKeyState
)
const
;
bool
IsInDeadKeySequence
(
)
const
{
return
!
mActiveDeadKeys
.
IsEmpty
(
)
;
}
bool
IsSysKey
(
uint8_t
aVirtualKey
const
ModifierKeyState
&
aModKeyState
)
const
;
UniCharsAndModifiers
GetUniCharsAndModifiers
(
uint8_t
aVirtualKey
const
ModifierKeyState
&
aModKeyState
)
const
{
VirtualKey
:
:
ShiftState
shiftState
=
VirtualKey
:
:
ModifierKeyStateToShiftState
(
aModKeyState
)
;
return
GetUniCharsAndModifiers
(
aVirtualKey
shiftState
)
;
}
UniCharsAndModifiers
GetNativeUniCharsAndModifiers
(
uint8_t
aVirtualKey
const
ModifierKeyState
&
aModKeyState
)
const
;
void
OnLayoutChange
(
HKL
aKeyboardLayout
)
{
MOZ_ASSERT
(
!
mIsOverridden
)
;
LoadLayout
(
aKeyboardLayout
)
;
}
void
OverrideLayout
(
HKL
aLayout
)
{
mIsOverridden
=
true
;
LoadLayout
(
aLayout
)
;
}
void
RestoreLayout
(
)
{
mIsOverridden
=
false
;
mIsPendingToRestoreKeyboardLayout
=
true
;
}
uint32_t
ConvertNativeKeyCodeToDOMKeyCode
(
UINT
aNativeKeyCode
)
const
;
KeyNameIndex
ConvertNativeKeyCodeToKeyNameIndex
(
uint8_t
aVirtualKey
)
const
;
static
CodeNameIndex
ConvertScanCodeToCodeNameIndex
(
UINT
aScanCode
)
;
HKL
GetLayout
(
)
const
{
return
mIsPendingToRestoreKeyboardLayout
?
:
:
GetKeyboardLayout
(
0
)
:
mKeyboardLayout
;
}
WORD
ComputeScanCodeForVirtualKeyCode
(
uint8_t
aVirtualKeyCode
)
const
;
nsresult
SynthesizeNativeKeyEvent
(
nsWindowBase
*
aWidget
int32_t
aNativeKeyboardLayout
int32_t
aNativeKeyCode
uint32_t
aModifierFlags
const
nsAString
&
aCharacters
const
nsAString
&
aUnmodifiedCharacters
)
;
private
:
KeyboardLayout
(
)
;
~
KeyboardLayout
(
)
;
static
KeyboardLayout
*
sInstance
;
static
nsIIdleServiceInternal
*
sIdleService
;
struct
DeadKeyTableListEntry
{
DeadKeyTableListEntry
*
next
;
uint8_t
data
[
1
]
;
}
;
HKL
mKeyboardLayout
;
VirtualKey
mVirtualKeys
[
NS_NUM_OF_KEYS
]
;
DeadKeyTableListEntry
*
mDeadKeyTableListHead
;
nsTArray
<
uint8_t
>
mActiveDeadKeys
;
nsTArray
<
VirtualKey
:
:
ShiftState
>
mDeadKeyShiftStates
;
bool
mIsOverridden
;
bool
mIsPendingToRestoreKeyboardLayout
;
static
inline
int32_t
GetKeyIndex
(
uint8_t
aVirtualKey
)
;
static
int
CompareDeadKeyEntries
(
const
void
*
aArg1
const
void
*
aArg2
void
*
aData
)
;
static
bool
AddDeadKeyEntry
(
char16_t
aBaseChar
char16_t
aCompositeChar
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aEntries
)
;
bool
EnsureDeadKeyActive
(
bool
aIsActive
uint8_t
aDeadKey
const
PBYTE
aDeadKeyKbdState
)
;
uint32_t
GetDeadKeyCombinations
(
uint8_t
aDeadKey
const
PBYTE
aDeadKeyKbdState
uint16_t
aShiftStatesWithBaseChars
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aMaxEntries
)
;
void
ActivateDeadKeyState
(
const
NativeKey
&
aNativeKey
const
ModifierKeyState
&
aModKeyState
)
;
void
DeactivateDeadKeyState
(
)
;
const
DeadKeyTable
*
AddDeadKeyTable
(
const
DeadKeyEntry
*
aDeadKeyArray
uint32_t
aEntries
)
;
void
ReleaseDeadKeyTables
(
)
;
void
LoadLayout
(
HKL
aLayout
)
;
nsCString
GetLayoutName
(
HKL
aLayout
)
const
;
void
InitNativeKey
(
NativeKey
&
aNativeKey
const
ModifierKeyState
&
aModKeyState
)
;
bool
MaybeInitNativeKeyAsDeadKey
(
NativeKey
&
aNativeKey
const
ModifierKeyState
&
aModKeyState
)
;
bool
MaybeInitNativeKeyWithCompositeChar
(
NativeKey
&
aNativeKey
const
ModifierKeyState
&
aModKeyState
)
;
UniCharsAndModifiers
GetUniCharsAndModifiers
(
uint8_t
aVirtualKey
VirtualKey
:
:
ShiftState
aShiftState
)
const
;
UniCharsAndModifiers
GetDeadUniCharsAndModifiers
(
)
const
;
char16_t
GetCompositeChar
(
char16_t
aBaseChar
)
const
;
friend
class
NativeKey
;
}
;
class
RedirectedKeyDownMessageManager
{
public
:
class
MOZ_STACK_CLASS
AutoFlusher
final
{
public
:
AutoFlusher
(
nsWindowBase
*
aWidget
const
MSG
&
aMsg
)
:
mCancel
(
!
RedirectedKeyDownMessageManager
:
:
IsRedirectedMessage
(
aMsg
)
)
mWidget
(
aWidget
)
mMsg
(
aMsg
)
{
}
~
AutoFlusher
(
)
{
if
(
mCancel
)
{
return
;
}
if
(
!
mWidget
-
>
Destroyed
(
)
)
{
RedirectedKeyDownMessageManager
:
:
RemoveNextCharMessage
(
mMsg
.
hwnd
)
;
}
RedirectedKeyDownMessageManager
:
:
Forget
(
)
;
}
void
Cancel
(
)
{
mCancel
=
true
;
}
private
:
bool
mCancel
;
RefPtr
<
nsWindowBase
>
mWidget
;
const
MSG
&
mMsg
;
}
;
static
void
WillRedirect
(
const
MSG
&
aMsg
bool
aDefualtPrevented
)
{
sRedirectedKeyDownMsg
=
aMsg
;
sDefaultPreventedOfRedirectedMsg
=
aDefualtPrevented
;
}
static
void
Forget
(
)
{
sRedirectedKeyDownMsg
.
message
=
WM_NULL
;
}
static
void
PreventDefault
(
)
{
sDefaultPreventedOfRedirectedMsg
=
true
;
}
static
bool
DefaultPrevented
(
)
{
return
sDefaultPreventedOfRedirectedMsg
;
}
static
bool
IsRedirectedMessage
(
const
MSG
&
aMsg
)
;
static
void
RemoveNextCharMessage
(
HWND
aWnd
)
;
private
:
static
MSG
sRedirectedKeyDownMsg
;
static
bool
sDefaultPreventedOfRedirectedMsg
;
}
;
}
}
#
endif
