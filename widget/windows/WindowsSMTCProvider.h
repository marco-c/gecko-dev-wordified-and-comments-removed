#
ifndef
WIDGET_WINDOWS_WINDOWSSTMCPROVIDER_H_
#
define
WIDGET_WINDOWS_WINDOWSSTMCPROVIDER_H_
#
ifndef
__MINGW32__
#
include
<
functional
>
#
include
<
Windows
.
Media
.
h
>
#
include
<
wrl
.
h
>
#
include
"
mozilla
/
dom
/
FetchImageHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaController
.
h
"
#
include
"
mozilla
/
dom
/
MediaControlKeySource
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
using
ISMTC
=
ABI
:
:
Windows
:
:
Media
:
:
ISystemMediaTransportControls
;
using
SMTCProperty
=
ABI
:
:
Windows
:
:
Media
:
:
SystemMediaTransportControlsProperty
;
using
ISMTCDisplayUpdater
=
ABI
:
:
Windows
:
:
Media
:
:
ISystemMediaTransportControlsDisplayUpdater
;
using
ABI
:
:
Windows
:
:
Foundation
:
:
IAsyncOperation
;
using
ABI
:
:
Windows
:
:
Storage
:
:
Streams
:
:
IDataWriter
;
using
ABI
:
:
Windows
:
:
Storage
:
:
Streams
:
:
IRandomAccessStream
;
using
ABI
:
:
Windows
:
:
Storage
:
:
Streams
:
:
IRandomAccessStreamReference
;
using
Microsoft
:
:
WRL
:
:
ComPtr
;
struct
SMTCControlAttributes
{
bool
mEnabled
;
bool
mPlayPauseEnabled
;
bool
mNextEnabled
;
bool
mPreviousEnabled
;
static
constexpr
SMTCControlAttributes
EnableAll
(
)
{
return
{
true
true
true
true
}
;
}
static
constexpr
SMTCControlAttributes
DisableAll
(
)
{
return
{
false
false
false
false
}
;
}
}
;
class
WindowsSMTCProvider
final
:
public
mozilla
:
:
dom
:
:
MediaControlKeySource
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WindowsSMTCProvider
override
)
public
:
WindowsSMTCProvider
(
)
;
bool
IsOpened
(
)
const
override
;
bool
Open
(
)
override
;
void
Close
(
)
override
;
void
SetPlaybackState
(
mozilla
:
:
dom
:
:
MediaSessionPlaybackState
aState
)
override
;
void
SetMediaMetadata
(
const
mozilla
:
:
dom
:
:
MediaMetadataBase
&
aMetadata
)
override
;
void
SetSupportedMediaKeys
(
const
MediaKeysArray
&
aSupportedKeys
)
override
{
}
private
:
~
WindowsSMTCProvider
(
)
;
void
UnregisterEvents
(
)
;
bool
RegisterEvents
(
)
;
void
OnButtonPressed
(
mozilla
:
:
dom
:
:
MediaControlKey
aKey
)
;
bool
InitDisplayAndControls
(
)
;
bool
SetControlAttributes
(
SMTCControlAttributes
aAttributes
)
;
bool
SetMusicMetadata
(
const
wchar_t
*
aArtist
const
wchar_t
*
aTitle
const
wchar_t
*
aAlbumArtist
)
;
void
LoadThumbnail
(
const
nsTArray
<
mozilla
:
:
dom
:
:
MediaImage
>
&
aArtwork
)
;
void
LoadImageAtIndex
(
const
size_t
aIndex
)
;
void
LoadImage
(
const
char
*
aImageData
uint32_t
aDataSize
)
;
bool
SetThumbnail
(
const
nsAString
&
aUrl
)
;
void
ClearThumbnail
(
)
;
nsresult
UpdateThumbnailOnMainThread
(
const
nsAString
&
aUrl
)
;
void
CancelPendingStoreAsyncOperation
(
)
const
;
bool
mInitialized
=
false
;
ComPtr
<
ISMTC
>
mControls
;
ComPtr
<
ISMTCDisplayUpdater
>
mDisplay
;
ComPtr
<
IDataWriter
>
mImageDataWriter
;
ComPtr
<
IRandomAccessStream
>
mImageStream
;
ComPtr
<
IRandomAccessStreamReference
>
mImageStreamReference
;
ComPtr
<
IAsyncOperation
<
unsigned
int
>
>
mStoreAsyncOperation
;
nsString
mThumbnailUrl
;
nsString
mProcessingUrl
;
CopyableTArray
<
mozilla
:
:
dom
:
:
MediaImage
>
mArtwork
;
size_t
mNextImageIndex
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
FetchImageHelper
>
mImageFetcher
;
mozilla
:
:
MozPromiseRequestHolder
<
mozilla
:
:
dom
:
:
ImagePromise
>
mImageFetchRequest
;
HWND
mWindow
;
EventRegistrationToken
mButtonPressedToken
;
}
;
#
endif
#
endif
