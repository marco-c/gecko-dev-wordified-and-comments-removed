#
define
MOZ_USE_LAUNCHER_ERROR
#
define
UNICODE
#
include
"
mozilla
/
UrlmonHeaderOnlyUtils
.
h
"
#
include
"
TestUrisToValidate
.
h
"
#
include
<
urlmon
.
h
>
using
namespace
mozilla
;
static
LauncherResult
<
_bstr_t
>
ShellValidateUri
(
const
wchar_t
*
aUri
)
{
LauncherResult
<
UniqueAbsolutePidl
>
pidlResult
=
ShellParseDisplayName
(
aUri
)
;
if
(
pidlResult
.
isErr
(
)
)
{
return
pidlResult
.
propagateErr
(
)
;
}
UniqueAbsolutePidl
pidl
=
pidlResult
.
unwrap
(
)
;
PCUITEMID_CHILD
childId
=
nullptr
;
RefPtr
<
IShellFolder
>
parentFolder
;
HRESULT
hr
=
SHBindToParent
(
pidl
.
get
(
)
IID_IShellFolder
getter_AddRefs
(
parentFolder
)
&
childId
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
STRRET
strret
;
hr
=
parentFolder
-
>
GetDisplayNameOf
(
childId
SHGDN_FORPARSING
&
strret
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
_bstr_t
bstrUri
;
hr
=
StrRetToBSTR
(
&
strret
nullptr
bstrUri
.
GetAddress
(
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
return
bstrUri
;
}
static
LauncherResult
<
_bstr_t
>
GetFragment
(
const
wchar_t
*
aUri
)
{
constexpr
DWORD
flags
=
Uri_CREATE_NO_DECODE_EXTRA_INFO
|
Uri_CREATE_CANONICALIZE
|
Uri_CREATE_CRACK_UNKNOWN_SCHEMES
|
Uri_CREATE_PRE_PROCESS_HTML_URI
|
Uri_CREATE_IE_SETTINGS
;
RefPtr
<
IUri
>
uri
;
HRESULT
hr
=
CreateUri
(
aUri
flags
0
getter_AddRefs
(
uri
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
_bstr_t
bstrFragment
;
hr
=
uri
-
>
GetFragment
(
bstrFragment
.
GetAddress
(
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
return
bstrFragment
;
}
static
bool
RunSingleTest
(
const
wchar_t
*
aUri
)
{
LauncherResult
<
_bstr_t
>
uriOld
=
ShellValidateUri
(
aUri
)
uriNew
=
UrlmonValidateUri
(
aUri
)
;
if
(
uriOld
.
isErr
(
)
!
=
uriNew
.
isErr
(
)
)
{
printf
(
"
TEST
-
FAILED
|
UriValidation
|
Validation
result
mismatch
on
%
S
\
n
"
aUri
)
;
return
false
;
}
if
(
uriOld
.
isErr
(
)
)
{
if
(
uriOld
.
unwrapErr
(
)
.
mError
!
=
uriNew
.
unwrapErr
(
)
.
mError
)
{
printf
(
"
TEST
-
FAILED
|
UriValidation
|
Error
code
mismatch
on
%
S
\
n
"
aUri
)
;
return
false
;
}
return
true
;
}
LauncherResult
<
_bstr_t
>
bstrFragment
=
GetFragment
(
aUri
)
;
if
(
bstrFragment
.
isErr
(
)
)
{
printf
(
"
TEST
-
FAILED
|
UriValidation
|
Failed
to
get
a
fragment
from
%
S
\
n
"
aUri
)
;
return
false
;
}
_bstr_t
bstrUriOldCorrected
=
uriOld
.
unwrap
(
)
+
bstrFragment
.
unwrap
(
)
;
const
_bstr_t
&
bstrUriNew
=
uriNew
.
unwrap
(
)
;
if
(
bstrUriOldCorrected
!
=
bstrUriNew
)
{
printf
(
"
TEST
-
FAILED
|
UriValidation
|
%
S
%
S
%
S
\
n
"
aUri
static_cast
<
const
wchar_t
*
>
(
bstrUriOldCorrected
)
static_cast
<
const
wchar_t
*
>
(
bstrUriNew
)
)
;
return
false
;
}
return
true
;
}
int
wmain
(
int
argc
wchar_t
*
argv
[
]
)
{
HRESULT
hr
=
CoInitialize
(
nullptr
)
;
if
(
FAILED
(
hr
)
)
{
return
1
;
}
bool
isOk
=
true
;
if
(
argc
=
=
2
)
{
isOk
=
RunSingleTest
(
argv
[
1
]
)
;
}
else
{
for
(
const
wchar_t
*
&
testUri
:
kTestUris
)
{
if
(
!
RunSingleTest
(
testUri
)
)
{
isOk
=
false
;
}
}
}
CoUninitialize
(
)
;
return
isOk
?
0
:
1
;
}
