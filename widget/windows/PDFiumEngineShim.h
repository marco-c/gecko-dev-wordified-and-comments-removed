#
ifndef
PDFIUMENGINESHIM_H
#
define
PDFIUMENGINESHIM_H
#
include
"
prlink
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
{
namespace
widget
{
#
define
FPDF_ANNOT
0x01
#
define
FPDF_LCD_TEXT
0x02
#
define
FPDF_NO_NATIVETEXT
0x04
#
define
FPDF_GRAYSCALE
0x08
#
define
FPDF_DEBUG_INFO
0x80
#
define
FPDF_NO_CATCH
0x100
#
define
FPDF_RENDER_LIMITEDIMAGECACHE
0x200
#
define
FPDF_RENDER_FORCEHALFTONE
0x400
#
define
FPDF_PRINTING
0x800
#
define
FPDF_RENDER_NO_SMOOTHTEXT
0x1000
#
define
FPDF_RENDER_NO_SMOOTHIMAGE
0x2000
#
define
FPDF_RENDER_NO_SMOOTHPATH
0x4000
#
define
FPDF_REVERSE_BYTE_ORDER
0x10
typedef
void
*
FPDF_ACTION
;
typedef
void
*
FPDF_BITMAP
;
typedef
void
*
FPDF_BOOKMARK
;
typedef
void
*
FPDF_CLIPPATH
;
typedef
void
*
FPDF_DEST
;
typedef
void
*
FPDF_DOCSCHHANDLE
;
typedef
void
*
FPDF_DOCUMENT
;
typedef
void
*
FPDF_FONT
;
typedef
void
*
FPDF_HMODULE
;
typedef
void
*
FPDF_LINK
;
typedef
void
*
FPDF_MODULEMGR
;
typedef
void
*
FPDF_PAGE
;
typedef
void
*
FPDF_PAGELINK
;
typedef
void
*
FPDF_PAGEOBJECT
;
typedef
void
*
FPDF_PAGERANGE
;
typedef
void
*
FPDF_PATH
;
typedef
void
*
FPDF_RECORDER
;
typedef
void
*
FPDF_SCHHANDLE
;
typedef
void
*
FPDF_STRUCTELEMENT
;
typedef
void
*
FPDF_STRUCTTREE
;
typedef
void
*
FPDF_TEXTPAGE
;
typedef
int
FPDF_BOOL
;
typedef
int
FPDF_ERROR
;
typedef
unsigned
long
FPDF_DWORD
;
typedef
float
FS_FLOAT
;
typedef
const
char
*
FPDF_BYTESTRING
;
typedef
void
(
*
FPDF_InitLibrary_Pfn
)
(
)
;
typedef
void
(
*
FPDF_DestroyLibrary_Pfn
)
(
)
;
typedef
FPDF_DOCUMENT
(
*
FPDF_LoadMemDocument_Pfn
)
(
const
void
*
aDataBuf
int
aSize
FPDF_BYTESTRING
aPassword
)
;
typedef
void
(
*
FPDF_CloseDocument_Pfn
)
(
FPDF_DOCUMENT
aDocument
)
;
typedef
int
(
*
FPDF_GetPageCount_Pfn
)
(
FPDF_DOCUMENT
aDocument
)
;
typedef
int
(
*
FPDF_GetPageSizeByIndex_Pfn
)
(
FPDF_DOCUMENT
aDocument
int
aPageIndex
double
*
aWidth
double
*
aWeight
)
;
typedef
FPDF_PAGE
(
*
FPDF_LoadPage_Pfn
)
(
FPDF_DOCUMENT
aDocument
int
aPageIndex
)
;
typedef
void
(
*
FPDF_ClosePage_Pfn
)
(
FPDF_PAGE
aPage
)
;
typedef
void
(
*
FPDF_RenderPage_Pfn
)
(
HDC
aDC
FPDF_PAGE
aPage
int
aStartX
int
aStartY
int
aSizeX
int
aSizeY
int
aRotate
int
aFlags
)
;
typedef
void
(
*
FPDF_RenderPage_Close_Pfn
)
(
FPDF_PAGE
aPage
)
;
class
PDFiumEngineShim
{
public
:
explicit
PDFiumEngineShim
(
PRLibrary
*
aLibrary
)
;
~
PDFiumEngineShim
(
)
;
FPDF_DOCUMENT
LoadMemDocument
(
const
void
*
aDataBuf
int
aSize
FPDF_BYTESTRING
aPassword
)
;
void
CloseDocument
(
FPDF_DOCUMENT
aDocument
)
;
int
GetPageCount
(
FPDF_DOCUMENT
aDocument
)
;
int
GetPageSizeByIndex
(
FPDF_DOCUMENT
aDocument
int
aPageIndex
double
*
aWidth
double
*
aHeight
)
;
FPDF_PAGE
LoadPage
(
FPDF_DOCUMENT
aDocument
int
aPageIndex
)
;
void
ClosePage
(
FPDF_PAGE
aPage
)
;
void
RenderPage
(
HDC
aDC
FPDF_PAGE
aPage
int
aStartX
int
aStartY
int
aSizeX
int
aSizeY
int
aRotate
int
aFlags
)
;
void
RenderPage_Close
(
FPDF_PAGE
aPage
)
;
private
:
bool
InitSymbolsAndLibrary
(
)
;
void
InitLibrary
(
)
;
void
DestroyLibrary
(
)
;
PRLibrary
*
mPRLibrary
;
bool
mInitialized
;
FPDF_InitLibrary_Pfn
mFPDF_InitLibrary
;
FPDF_DestroyLibrary_Pfn
mFPDF_DestroyLibrary
;
FPDF_LoadMemDocument_Pfn
mFPDF_LoadMemDocument
;
FPDF_CloseDocument_Pfn
mFPDF_CloseDocument
;
FPDF_GetPageCount_Pfn
mFPDF_GetPageCount
;
FPDF_GetPageSizeByIndex_Pfn
mFPDF_GetPageSizeByIndex
;
FPDF_LoadPage_Pfn
mFPDF_LoadPage
;
FPDF_ClosePage_Pfn
mFPDF_ClosePage
;
FPDF_RenderPage_Pfn
mFPDF_RenderPage
;
FPDF_RenderPage_Close_Pfn
mFPDF_RenderPage_Close
;
}
;
}
}
#
endif
