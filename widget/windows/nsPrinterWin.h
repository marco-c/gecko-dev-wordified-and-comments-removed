#
ifndef
nsPrinterWin_h_
#
define
nsPrinterWin_h_
#
include
"
nsPrinterBase
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsPrinterWin
final
:
public
nsPrinterBase
{
public
:
NS_IMETHOD
GetName
(
nsAString
&
aName
)
override
;
NS_IMETHOD
GetSystemName
(
nsAString
&
aName
)
override
;
PrintSettingsInitializer
DefaultSettings
(
)
const
final
;
bool
SupportsDuplex
(
)
const
final
;
bool
SupportsColor
(
)
const
final
;
bool
SupportsMonochrome
(
)
const
final
;
bool
SupportsCollation
(
)
const
final
;
nsTArray
<
mozilla
:
:
PaperInfo
>
PaperList
(
)
const
final
;
MarginDouble
GetMarginsForPaper
(
nsString
aPaperId
)
const
final
;
nsPrinterWin
(
)
=
delete
;
static
already_AddRefed
<
nsPrinterWin
>
Create
(
const
mozilla
:
:
CommonPaperInfoArray
*
aPaperInfoArray
const
nsAString
&
aName
)
;
private
:
nsPrinterWin
(
const
mozilla
:
:
CommonPaperInfoArray
*
aPaperInfoArray
const
nsAString
&
aName
)
;
~
nsPrinterWin
(
)
=
default
;
nsTArray
<
uint8_t
>
CopyDefaultDevmodeW
(
)
const
;
const
nsString
mName
;
mutable
mozilla
:
:
DataMutex
<
nsTArray
<
uint8_t
>
>
mDefaultDevmodeWStorage
;
}
;
#
endif
