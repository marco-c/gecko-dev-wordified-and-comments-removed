#
ifndef
_widget_windows_WinCompositorWidget_h__
#
define
_widget_windows_WinCompositorWidget_h__
#
include
"
CompositorWidgetProxy
.
h
"
#
include
"
mozilla
/
gfx
/
CriticalSection
.
h
"
class
nsWindow
;
namespace
mozilla
{
namespace
widget
{
class
WinCompositorWidgetProxy
:
public
CompositorWidgetProxy
{
public
:
WinCompositorWidgetProxy
(
nsWindow
*
aWindow
)
;
bool
PreRender
(
layers
:
:
LayerManagerComposite
*
)
override
;
void
PostRender
(
layers
:
:
LayerManagerComposite
*
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
StartRemoteDrawing
(
)
override
;
void
EndRemoteDrawing
(
)
override
;
LayoutDeviceIntSize
GetClientSize
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetBackBufferDrawTarget
(
gfx
:
:
DrawTarget
*
aScreenTarget
const
LayoutDeviceIntRect
&
aRect
const
LayoutDeviceIntRect
&
aClearRect
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
EndBackBufferDrawing
(
)
override
;
already_AddRefed
<
CompositorVsyncDispatcher
>
GetCompositorVsyncDispatcher
(
)
override
;
uintptr_t
GetWidgetKey
(
)
override
;
nsIWidget
*
RealWidget
(
)
override
;
WinCompositorWidgetProxy
*
AsWindowsProxy
(
)
override
{
return
this
;
}
void
EnterPresentLock
(
)
;
void
LeavePresentLock
(
)
;
void
OnDestroyWindow
(
)
;
void
UpdateTransparency
(
nsTransparencyMode
aMode
)
;
void
ClearTransparentWindow
(
)
;
bool
RedrawTransparentWindow
(
)
;
void
ResizeTransparentWindow
(
int32_t
aNewWidth
int32_t
aNewHeight
)
;
RefPtr
<
gfxASurface
>
EnsureTransparentSurface
(
)
;
HDC
GetTransparentDC
(
)
const
{
return
mMemoryDC
;
}
HWND
GetHwnd
(
)
const
{
return
mWnd
;
}
private
:
HDC
GetWindowSurface
(
)
;
void
FreeWindowSurface
(
HDC
dc
)
;
void
CreateTransparentSurface
(
int32_t
aWidth
int32_t
aHeight
)
;
private
:
nsWindow
*
mWindow
;
uintptr_t
mWidgetKey
;
HWND
mWnd
;
gfx
:
:
CriticalSection
mPresentLock
;
nsTransparencyMode
mTransparencyMode
;
RefPtr
<
gfxASurface
>
mTransparentSurface
;
HDC
mMemoryDC
;
HDC
mCompositeDC
;
uint8_t
*
mLockedBackBufferData
;
}
;
}
}
#
endif
