#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
WinMouseScrollHandler
.
h
"
#
include
"
nsWindow
.
h
"
#
include
"
nsWindowDefs
.
h
"
#
include
"
KeyboardLayout
.
h
"
#
include
"
WinUtils
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIDOMWindowUtils
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
MiscEvents
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
WheelEventBinding
.
h
"
#
include
"
mozilla
/
StaticPrefs_mousewheel
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
mozilla
/
widget
/
WinRegistry
.
h
"
#
include
<
psapi
.
h
>
namespace
mozilla
{
namespace
widget
{
LazyLogModule
gMouseScrollLog
(
"
MouseScrollHandlerWidgets
"
)
;
static
const
char
*
GetBoolName
(
bool
aBool
)
{
return
aBool
?
"
TRUE
"
:
"
FALSE
"
;
}
MouseScrollHandler
*
MouseScrollHandler
:
:
sInstance
=
nullptr
;
bool
MouseScrollHandler
:
:
Device
:
:
sFakeScrollableWindowNeeded
=
false
;
bool
MouseScrollHandler
:
:
Device
:
:
SynTP
:
:
sInitialized
=
false
;
int32_t
MouseScrollHandler
:
:
Device
:
:
SynTP
:
:
sMajorVersion
=
0
;
int32_t
MouseScrollHandler
:
:
Device
:
:
SynTP
:
:
sMinorVersion
=
-
1
;
bool
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
sUseSwipeHack
=
false
;
bool
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
sUsePinchHack
=
false
;
DWORD
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
sZoomUntil
=
0
;
bool
MouseScrollHandler
:
:
Device
:
:
Apoint
:
:
sInitialized
=
false
;
int32_t
MouseScrollHandler
:
:
Device
:
:
Apoint
:
:
sMajorVersion
=
0
;
int32_t
MouseScrollHandler
:
:
Device
:
:
Apoint
:
:
sMinorVersion
=
-
1
;
bool
MouseScrollHandler
:
:
Device
:
:
SetPoint
:
:
sMightBeUsing
=
false
;
#
define
DEFAULT_TIMEOUT_DURATION
1500
class
MouseScrollHandler
:
:
SynthesizingEvent
{
public
:
SynthesizingEvent
(
)
:
mWnd
(
nullptr
)
mMessage
(
0
)
mWParam
(
0
)
mLParam
(
0
)
mStatus
(
NOT_SYNTHESIZING
)
{
}
~
SynthesizingEvent
(
)
{
}
static
SynthesizingEvent
*
GetActiveInstance
(
)
;
nsresult
Synthesize
(
const
POINTS
&
aCursorPoint
HWND
aWnd
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
const
BYTE
(
&
aKeyStates
)
[
256
]
)
;
void
NativeMessageReceived
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
;
void
NotifyNativeMessageHandlingFinished
(
)
;
void
NotifyInternalMessageHandlingFinished
(
)
;
const
POINTS
&
GetCursorPoint
(
)
const
{
return
mCursorPoint
;
}
private
:
POINTS
mCursorPoint
;
HWND
mWnd
;
UINT
mMessage
;
WPARAM
mWParam
;
LPARAM
mLParam
;
BYTE
mKeyState
[
256
]
;
BYTE
mOriginalKeyState
[
256
]
;
enum
Status
{
NOT_SYNTHESIZING
SENDING_MESSAGE
NATIVE_MESSAGE_RECEIVED
INTERNAL_MESSAGE_POSTED
}
;
Status
mStatus
;
const
char
*
GetStatusName
(
)
{
switch
(
mStatus
)
{
case
NOT_SYNTHESIZING
:
return
"
NOT_SYNTHESIZING
"
;
case
SENDING_MESSAGE
:
return
"
SENDING_MESSAGE
"
;
case
NATIVE_MESSAGE_RECEIVED
:
return
"
NATIVE_MESSAGE_RECEIVED
"
;
case
INTERNAL_MESSAGE_POSTED
:
return
"
INTERNAL_MESSAGE_POSTED
"
;
default
:
return
"
Unknown
"
;
}
}
void
Finish
(
)
;
}
;
auto
MouseScrollHandler
:
:
GetActiveSynthEvent
(
)
-
>
SynthesizingEvent
*
{
return
SynthesizingEvent
:
:
GetActiveInstance
(
)
;
}
POINTS
MouseScrollHandler
:
:
GetCurrentMessagePos
(
)
{
if
(
auto
*
synth
=
GetActiveSynthEvent
(
)
)
{
return
synth
-
>
GetCursorPoint
(
)
;
}
DWORD
pos
=
:
:
GetMessagePos
(
)
;
return
MAKEPOINTS
(
pos
)
;
}
#
define
GetMessagePos
(
)
void
MouseScrollHandler
:
:
Initialize
(
)
{
Device
:
:
Init
(
)
;
}
void
MouseScrollHandler
:
:
Shutdown
(
)
{
delete
sInstance
;
sInstance
=
nullptr
;
}
MouseScrollHandler
*
MouseScrollHandler
:
:
GetInstance
(
)
{
if
(
!
sInstance
)
{
sInstance
=
new
MouseScrollHandler
(
)
;
}
return
sInstance
;
}
MouseScrollHandler
:
:
MouseScrollHandler
(
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
Creating
an
instance
this
=
%
p
sInstance
=
%
p
"
this
sInstance
)
)
;
}
MouseScrollHandler
:
:
~
MouseScrollHandler
(
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
Destroying
an
instance
this
=
%
p
sInstance
=
%
p
"
this
sInstance
)
)
;
}
void
MouseScrollHandler
:
:
MaybeLogKeyState
(
)
{
if
(
!
MOZ_LOG_TEST
(
gMouseScrollLog
LogLevel
:
:
Debug
)
)
{
return
;
}
BYTE
keyboardState
[
256
]
;
if
(
:
:
GetKeyboardState
(
keyboardState
)
)
{
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
keyboardState
)
;
i
+
+
)
{
if
(
keyboardState
[
i
]
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Debug
(
"
Current
key
state
:
keyboardState
[
0x
%
02zX
]
=
0x
%
02X
(
%
s
)
"
i
keyboardState
[
i
]
(
(
keyboardState
[
i
]
&
0x81
)
=
=
0x81
)
?
"
Pressed
and
Toggled
"
:
(
keyboardState
[
i
]
&
0x80
)
?
"
Pressed
"
:
(
keyboardState
[
i
]
&
0x01
)
?
"
Toggled
"
:
"
Unknown
"
)
)
;
}
}
}
else
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Debug
(
"
MouseScroll
:
:
MaybeLogKeyState
(
)
:
Failed
to
print
current
keyboard
"
"
state
"
)
)
;
}
}
bool
MouseScrollHandler
:
:
NeedsMessage
(
UINT
aMsg
)
{
switch
(
aMsg
)
{
case
WM_SETTINGCHANGE
:
case
WM_MOUSEWHEEL
:
case
WM_MOUSEHWHEEL
:
case
WM_HSCROLL
:
case
WM_VSCROLL
:
case
MOZ_WM_MOUSEVWHEEL
:
case
MOZ_WM_MOUSEHWHEEL
:
case
MOZ_WM_HSCROLL
:
case
MOZ_WM_VSCROLL
:
case
WM_KEYDOWN
:
case
WM_KEYUP
:
return
true
;
}
return
false
;
}
bool
MouseScrollHandler
:
:
ProcessMessageDirectly
(
UINT
msg
WPARAM
wParam
LPARAM
lParam
MSGResult
&
aResult
)
{
static
bool
isRecursing
=
false
;
MOZ_ASSERT
(
!
isRecursing
"
recursive
event
handler
detected
"
)
;
if
(
isRecursing
)
{
return
false
;
}
AutoRestore
<
bool
>
_restore
{
isRecursing
}
;
isRecursing
=
true
;
using
HandlerT
=
bool
(
MouseScrollHandler
:
:
*
)
(
nsWindow
*
UINT
WPARAM
LPARAM
)
;
HandlerT
const
handler
=
[
&
]
(
)
-
>
HandlerT
{
switch
(
msg
)
{
case
WM_MOUSEWHEEL
:
case
WM_MOUSEHWHEEL
:
return
&
MouseScrollHandler
:
:
HandleMouseWheelMessage
;
case
WM_VSCROLL
:
case
WM_HSCROLL
:
if
(
lParam
|
|
mUserPrefs
.
IsScrollMessageHandledAsWheelMessage
(
)
)
{
return
&
MouseScrollHandler
:
:
HandleScrollMessageAsMouseWheelMessage
;
}
return
&
MouseScrollHandler
:
:
HandleScrollMessageAsItself
;
default
:
MOZ_ASSERT
(
false
"
wrong
message
type
in
ProcessMessageDirectly
"
)
;
return
nullptr
;
}
}
(
)
;
if
(
!
handler
)
{
return
false
;
}
nsWindow
*
const
destWindow
=
FindTargetWindow
(
msg
wParam
lParam
)
;
if
(
!
destWindow
)
{
aResult
.
mConsumed
=
false
;
return
true
;
}
aResult
.
mConsumed
=
(
GetInstance
(
)
-
>
*
handler
)
(
destWindow
msg
wParam
lParam
)
;
aResult
.
mResult
=
0
;
if
(
auto
*
synth
=
GetActiveSynthEvent
(
)
)
{
synth
-
>
NotifyInternalMessageHandlingFinished
(
)
;
}
return
true
;
}
bool
MouseScrollHandler
:
:
ProcessMessage
(
nsWindow
*
aWidget
UINT
msg
WPARAM
wParam
LPARAM
lParam
MSGResult
&
aResult
)
{
Device
:
:
Elantech
:
:
UpdateZoomUntil
(
)
;
switch
(
msg
)
{
case
WM_SETTINGCHANGE
:
if
(
!
sInstance
)
{
return
false
;
}
if
(
wParam
=
=
SPI_SETWHEELSCROLLLINES
|
|
wParam
=
=
SPI_SETWHEELSCROLLCHARS
)
{
sInstance
-
>
mSystemSettings
.
MarkDirty
(
)
;
}
return
false
;
case
WM_MOUSEWHEEL
:
case
WM_MOUSEHWHEEL
:
case
WM_HSCROLL
:
case
WM_VSCROLL
:
return
GetInstance
(
)
-
>
ProcessMessageDirectly
(
msg
wParam
lParam
aResult
)
;
case
MOZ_WM_MOUSEVWHEEL
:
case
MOZ_WM_MOUSEHWHEEL
:
GetInstance
(
)
-
>
HandleMouseWheelMessage
(
aWidget
msg
wParam
lParam
)
;
if
(
auto
*
synth
=
GetActiveSynthEvent
(
)
)
{
synth
-
>
NotifyInternalMessageHandlingFinished
(
)
;
}
aResult
.
mConsumed
=
true
;
return
true
;
case
MOZ_WM_HSCROLL
:
case
MOZ_WM_VSCROLL
:
GetInstance
(
)
-
>
HandleScrollMessageAsMouseWheelMessage
(
aWidget
msg
wParam
lParam
)
;
if
(
auto
*
synth
=
GetActiveSynthEvent
(
)
)
{
synth
-
>
NotifyInternalMessageHandlingFinished
(
)
;
}
aResult
.
mConsumed
=
true
;
return
true
;
case
WM_KEYDOWN
:
case
WM_KEYUP
:
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
ProcessMessage
(
)
:
aWidget
=
%
p
"
"
msg
=
%
s
(
0x
%
04X
)
wParam
=
0x
%
02zX
:
:
GetMessageTime
(
)
=
%
ld
"
aWidget
msg
=
=
WM_KEYDOWN
?
"
WM_KEYDOWN
"
:
msg
=
=
WM_KEYUP
?
"
WM_KEYUP
"
:
"
Unknown
"
msg
wParam
:
:
GetMessageTime
(
)
)
)
;
MaybeLogKeyState
(
)
;
if
(
Device
:
:
Elantech
:
:
HandleKeyMessage
(
aWidget
msg
wParam
lParam
)
)
{
aResult
.
mResult
=
0
;
aResult
.
mConsumed
=
true
;
return
true
;
}
return
false
;
default
:
return
false
;
}
}
nsresult
MouseScrollHandler
:
:
SynthesizeNativeMouseScrollEvent
(
nsWindow
*
aWidget
const
LayoutDeviceIntPoint
&
aPoint
uint32_t
aNativeMessage
int32_t
aDelta
uint32_t
aModifierFlags
uint32_t
aAdditionalFlags
)
{
bool
useFocusedWindow
=
!
(
aAdditionalFlags
&
nsIDOMWindowUtils
:
:
MOUSESCROLL_PREFER_WIDGET_AT_POINT
)
;
POINT
pt
;
pt
.
x
=
aPoint
.
x
;
pt
.
y
=
aPoint
.
y
;
HWND
target
=
useFocusedWindow
?
:
:
WindowFromPoint
(
pt
)
:
:
:
GetFocus
(
)
;
NS_ENSURE_TRUE
(
target
NS_ERROR_FAILURE
)
;
WPARAM
wParam
=
0
;
LPARAM
lParam
=
0
;
switch
(
aNativeMessage
)
{
case
WM_MOUSEWHEEL
:
case
WM_MOUSEHWHEEL
:
{
lParam
=
MAKELPARAM
(
pt
.
x
pt
.
y
)
;
WORD
mod
=
0
;
if
(
aModifierFlags
&
(
nsIWidget
:
:
CTRL_L
|
nsIWidget
:
:
CTRL_R
)
)
{
mod
|
=
MK_CONTROL
;
}
if
(
aModifierFlags
&
(
nsIWidget
:
:
SHIFT_L
|
nsIWidget
:
:
SHIFT_R
)
)
{
mod
|
=
MK_SHIFT
;
}
wParam
=
MAKEWPARAM
(
mod
aDelta
)
;
break
;
}
case
WM_VSCROLL
:
case
WM_HSCROLL
:
lParam
=
(
aAdditionalFlags
&
nsIDOMWindowUtils
:
:
MOUSESCROLL_WIN_SCROLL_LPARAM_NOT_NULL
)
?
reinterpret_cast
<
LPARAM
>
(
target
)
:
0
;
wParam
=
aDelta
;
break
;
default
:
return
NS_ERROR_INVALID_ARG
;
}
GetInstance
(
)
;
BYTE
kbdState
[
256
]
;
memset
(
kbdState
0
sizeof
(
kbdState
)
)
;
AutoTArray
<
KeyPair
10
>
keySequence
;
WinUtils
:
:
SetupKeyModifiersSequence
(
&
keySequence
aModifierFlags
aNativeMessage
)
;
for
(
uint32_t
i
=
0
;
i
<
keySequence
.
Length
(
)
;
+
+
i
)
{
uint8_t
key
=
keySequence
[
i
]
.
mGeneral
;
uint8_t
keySpecific
=
keySequence
[
i
]
.
mSpecific
;
kbdState
[
key
]
=
0x81
;
if
(
keySpecific
)
{
kbdState
[
keySpecific
]
=
0x81
;
}
}
if
(
!
sInstance
-
>
mSynthesizingEvent
)
{
sInstance
-
>
mSynthesizingEvent
=
MakeUnique
<
SynthesizingEvent
>
(
)
;
}
POINTS
pts
;
pts
.
x
=
static_cast
<
SHORT
>
(
pt
.
x
)
;
pts
.
y
=
static_cast
<
SHORT
>
(
pt
.
y
)
;
return
sInstance
-
>
mSynthesizingEvent
-
>
Synthesize
(
pts
target
aNativeMessage
wParam
lParam
kbdState
)
;
}
void
MouseScrollHandler
:
:
InitEvent
(
nsWindow
*
aWidget
WidgetGUIEvent
&
aEvent
LPARAM
*
aPoint
)
{
NS_ENSURE_TRUE_VOID
(
aWidget
)
;
POINTS
pointOnScreen
;
if
(
aPoint
!
=
nullptr
)
{
pointOnScreen
=
MAKEPOINTS
(
*
aPoint
)
;
}
else
{
pointOnScreen
=
GetCurrentMessagePos
(
)
;
}
POINT
pointOnWindow
;
POINTSTOPOINT
(
pointOnWindow
pointOnScreen
)
;
:
:
ScreenToClient
(
aWidget
-
>
GetWindowHandle
(
)
&
pointOnWindow
)
;
LayoutDeviceIntPoint
point
;
point
.
x
=
pointOnWindow
.
x
;
point
.
y
=
pointOnWindow
.
y
;
aWidget
-
>
InitEvent
(
aEvent
&
point
)
;
}
ModifierKeyState
MouseScrollHandler
:
:
GetModifierKeyState
(
UINT
aMessage
)
{
ModifierKeyState
result
;
if
(
(
aMessage
=
=
MOZ_WM_MOUSEVWHEEL
|
|
aMessage
=
=
WM_MOUSEWHEEL
)
&
&
!
result
.
IsControl
(
)
&
&
Device
:
:
Elantech
:
:
IsZooming
(
)
)
{
result
.
Unset
(
MODIFIER_ALTGRAPH
)
;
result
.
Set
(
MODIFIER_CONTROL
)
;
}
return
result
;
}
POINT
MouseScrollHandler
:
:
ComputeMessagePos
(
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
POINT
point
;
if
(
Device
:
:
SetPoint
:
:
IsGetMessagePosResponseValid
(
aMessage
aWParam
aLParam
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
ComputeMessagePos
:
Using
:
:
GetCursorPos
(
)
"
)
)
;
:
:
GetCursorPos
(
&
point
)
;
}
else
{
POINTS
pts
=
GetCurrentMessagePos
(
)
;
point
.
x
=
pts
.
x
;
point
.
y
=
pts
.
y
;
}
return
point
;
}
nsWindow
*
MouseScrollHandler
:
:
FindTargetWindow
(
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
POINT
point
=
ComputeMessagePos
(
aMessage
aWParam
aLParam
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
FindTargetWindow
:
"
"
aMessage
=
%
s
wParam
=
0x
%
08zX
lParam
=
0x
%
08
"
PRIXLPTR
"
point
:
{
x
=
%
ld
y
=
%
ld
}
"
aMessage
=
=
WM_MOUSEWHEEL
?
"
WM_MOUSEWHEEL
"
:
aMessage
=
=
WM_MOUSEHWHEEL
?
"
WM_MOUSEHWHEEL
"
:
aMessage
=
=
WM_VSCROLL
?
"
WM_VSCROLL
"
:
"
WM_HSCROLL
"
aWParam
aLParam
point
.
x
point
.
y
)
)
;
MaybeLogKeyState
(
)
;
HWND
underCursorWnd
=
:
:
WindowFromPoint
(
point
)
;
if
(
!
underCursorWnd
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
FindTargetWindow
:
"
"
No
window
was
found
under
the
cursor
"
)
)
;
return
nullptr
;
}
if
(
Device
:
:
Elantech
:
:
IsPinchHackNeeded
(
)
&
&
Device
:
:
Elantech
:
:
IsHelperWindow
(
underCursorWnd
)
)
{
underCursorWnd
=
WinUtils
:
:
FindOurWindowAtPoint
(
point
)
;
if
(
!
underCursorWnd
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
FindTargetWindow
:
"
"
Our
window
is
not
found
under
the
Elantech
helper
window
"
)
)
;
return
nullptr
;
}
}
if
(
!
WinUtils
:
:
IsOurProcessWindow
(
underCursorWnd
)
)
{
return
nullptr
;
}
if
(
nsWindow
*
destWindow
=
WinUtils
:
:
GetNSWindowPtr
(
underCursorWnd
)
)
{
return
destWindow
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
FindTargetWindow
:
"
"
Window
found
under
the
cursor
isn
'
t
an
nsWindow
.
.
.
"
)
)
;
HWND
wnd
=
:
:
GetParent
(
underCursorWnd
)
;
for
(
;
wnd
;
wnd
=
:
:
GetParent
(
wnd
)
)
{
if
(
nsWindow
*
destWindow
=
WinUtils
:
:
GetNSWindowPtr
(
wnd
)
)
{
return
destWindow
;
}
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
FindTargetWindow
:
"
"
.
.
.
and
doesn
'
t
have
any
nsWindow
ancestors
"
)
)
;
return
nullptr
;
}
bool
MouseScrollHandler
:
:
HandleScrollMessageAsItself
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleScrollMessageAsItself
:
aWidget
=
%
p
"
"
aMessage
=
%
s
wParam
=
0x
%
08zX
lParam
=
0x
%
08
"
PRIXLPTR
aWidget
aMessage
=
=
WM_VSCROLL
?
"
WM_VSCROLL
"
:
"
WM_HSCROLL
"
aWParam
aLParam
)
)
;
WidgetContentCommandEvent
commandEvent
(
true
eContentCommandScroll
aWidget
)
;
commandEvent
.
mScroll
.
mIsHorizontal
=
(
aMessage
=
=
WM_HSCROLL
)
;
switch
(
LOWORD
(
aWParam
)
)
{
case
SB_LINEUP
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Line
;
commandEvent
.
mScroll
.
mAmount
=
-
1
;
break
;
case
SB_LINEDOWN
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Line
;
commandEvent
.
mScroll
.
mAmount
=
1
;
break
;
case
SB_PAGEUP
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Page
;
commandEvent
.
mScroll
.
mAmount
=
-
1
;
break
;
case
SB_PAGEDOWN
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Page
;
commandEvent
.
mScroll
.
mAmount
=
1
;
break
;
case
SB_TOP
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Whole
;
commandEvent
.
mScroll
.
mAmount
=
-
1
;
break
;
case
SB_BOTTOM
:
commandEvent
.
mScroll
.
mUnit
=
WidgetContentCommandEvent
:
:
eCmdScrollUnit_Whole
;
commandEvent
.
mScroll
.
mAmount
=
1
;
break
;
default
:
return
false
;
}
aWidget
-
>
DispatchContentCommandEvent
(
&
commandEvent
)
;
return
true
;
}
bool
MouseScrollHandler
:
:
HandleMouseWheelMessage
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
const
char
*
const
msgName
[
[
maybe_unused
]
]
=
[
&
]
(
)
{
switch
(
aMessage
)
{
case
MOZ_WM_MOUSEVWHEEL
:
return
"
MOZ_WM_MOUSEVWHEEL
"
;
case
MOZ_WM_MOUSEHWHEEL
:
return
"
MOZ_WM_MOUSEHWHEEL
"
;
case
WM_MOUSEWHEEL
:
return
"
WM_MOUSEWHEEL
"
;
case
WM_MOUSEHWHEEL
:
return
"
WM_MOUSEHWHEEL
"
;
default
:
return
"
err
"
;
}
}
(
)
;
if
(
aMessage
=
=
WM_MOUSEWHEEL
)
{
aMessage
=
MOZ_WM_MOUSEVWHEEL
;
}
else
if
(
aMessage
=
=
WM_MOUSEHWHEEL
)
{
aMessage
=
MOZ_WM_MOUSEHWHEEL
;
}
MOZ_ASSERT
(
(
aMessage
=
=
MOZ_WM_MOUSEVWHEEL
|
|
aMessage
=
=
MOZ_WM_MOUSEHWHEEL
)
"
HandleMouseWheelMessage
must
be
called
with
"
"
MOZ_WM_MOUSEVWHEEL
or
MOZ_WM_MOUSEHWHEEL
"
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleMouseWheelMessage
:
aWidget
=
%
p
"
"
aMessage
=
%
s
aWParam
=
0x
%
08zX
aLParam
=
0x
%
08
"
PRIXLPTR
aWidget
msgName
aWParam
aLParam
)
)
;
mSystemSettings
.
TrustedScrollSettingsDriver
(
)
;
EventInfo
eventInfo
(
aWidget
WinUtils
:
:
GetNativeMessage
(
aMessage
)
aWParam
aLParam
)
;
if
(
!
eventInfo
.
CanDispatchWheelEvent
(
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleMouseWheelMessage
:
Cannot
dispatch
the
events
"
)
)
;
mLastEventInfo
.
ResetTransaction
(
)
;
return
false
;
}
if
(
!
mLastEventInfo
.
CanContinueTransaction
(
eventInfo
)
)
{
mLastEventInfo
.
ResetTransaction
(
)
;
}
mLastEventInfo
.
RecordEvent
(
eventInfo
)
;
ModifierKeyState
modKeyState
=
GetModifierKeyState
(
aMessage
)
;
WidgetWheelEvent
wheelEvent
(
true
eWheel
aWidget
)
;
if
(
mLastEventInfo
.
InitWheelEvent
(
aWidget
wheelEvent
modKeyState
aLParam
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleMouseWheelMessage
:
dispatching
"
"
eWheel
event
"
)
)
;
aWidget
-
>
DispatchWheelEvent
(
&
wheelEvent
)
;
if
(
aWidget
-
>
Destroyed
(
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleMouseWheelMessage
:
The
window
was
destroyed
"
"
by
eWheel
event
"
)
)
;
mLastEventInfo
.
ResetTransaction
(
)
;
}
return
true
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleMouseWheelMessage
:
eWheel
event
was
not
"
"
dispatched
"
)
)
;
return
false
;
}
bool
MouseScrollHandler
:
:
HandleScrollMessageAsMouseWheelMessage
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
const
char
*
const
msgName
[
[
maybe_unused
]
]
=
[
&
]
(
)
{
switch
(
aMessage
)
{
case
MOZ_WM_VSCROLL
:
return
"
MOZ_WM_VSCROLL
"
;
case
MOZ_WM_HSCROLL
:
return
"
MOZ_WM_HSCROLL
"
;
case
WM_VSCROLL
:
return
"
WM_VSCROLL
"
;
case
WM_HSCROLL
:
return
"
WM_HSCROLL
"
;
default
:
return
"
err
"
;
}
}
(
)
;
if
(
aMessage
=
=
WM_VSCROLL
)
{
aMessage
=
MOZ_WM_VSCROLL
;
}
else
if
(
aMessage
=
=
WM_HSCROLL
)
{
aMessage
=
MOZ_WM_HSCROLL
;
}
MOZ_ASSERT
(
(
aMessage
=
=
MOZ_WM_VSCROLL
|
|
aMessage
=
=
MOZ_WM_HSCROLL
)
"
HandleScrollMessageAsMouseWheelMessage
must
be
called
with
"
"
MOZ_WM_VSCROLL
or
MOZ_WM_HSCROLL
"
)
;
ModifierKeyState
modKeyState
=
GetModifierKeyState
(
aMessage
)
;
WidgetWheelEvent
wheelEvent
(
true
eWheel
aWidget
)
;
double
&
delta
=
(
aMessage
=
=
MOZ_WM_VSCROLL
)
?
wheelEvent
.
mDeltaY
:
wheelEvent
.
mDeltaX
;
int32_t
&
lineOrPageDelta
=
(
aMessage
=
=
MOZ_WM_VSCROLL
)
?
wheelEvent
.
mLineOrPageDeltaY
:
wheelEvent
.
mLineOrPageDeltaX
;
delta
=
1
.
0
;
lineOrPageDelta
=
1
;
switch
(
LOWORD
(
aWParam
)
)
{
case
SB_PAGEUP
:
delta
=
-
1
.
0
;
lineOrPageDelta
=
-
1
;
[
[
fallthrough
]
]
;
case
SB_PAGEDOWN
:
wheelEvent
.
mDeltaMode
=
dom
:
:
WheelEvent_Binding
:
:
DOM_DELTA_PAGE
;
break
;
case
SB_LINEUP
:
delta
=
-
1
.
0
;
lineOrPageDelta
=
-
1
;
[
[
fallthrough
]
]
;
case
SB_LINEDOWN
:
wheelEvent
.
mDeltaMode
=
dom
:
:
WheelEvent_Binding
:
:
DOM_DELTA_LINE
;
break
;
default
:
return
false
;
}
modKeyState
.
InitInputEvent
(
wheelEvent
)
;
InitEvent
(
aWidget
wheelEvent
nullptr
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
HandleScrollMessageAsMouseWheelMessage
:
aWidget
=
%
p
"
"
aMessage
=
%
s
aWParam
=
0x
%
08zX
aLParam
=
0x
%
08
"
PRIXLPTR
"
"
"
wheelEvent
{
mRefPoint
:
{
x
:
%
d
y
:
%
d
}
mDeltaX
:
%
f
mDeltaY
:
%
f
"
"
mLineOrPageDeltaX
:
%
d
mLineOrPageDeltaY
:
%
d
"
"
isShift
:
%
s
isControl
:
%
s
isAlt
:
%
s
isMeta
:
%
s
}
"
aWidget
msgName
aWParam
aLParam
wheelEvent
.
mRefPoint
.
x
.
value
wheelEvent
.
mRefPoint
.
y
.
value
wheelEvent
.
mDeltaX
wheelEvent
.
mDeltaY
wheelEvent
.
mLineOrPageDeltaX
wheelEvent
.
mLineOrPageDeltaY
GetBoolName
(
wheelEvent
.
IsShift
(
)
)
GetBoolName
(
wheelEvent
.
IsControl
(
)
)
GetBoolName
(
wheelEvent
.
IsAlt
(
)
)
GetBoolName
(
wheelEvent
.
IsMeta
(
)
)
)
)
;
aWidget
-
>
DispatchWheelEvent
(
&
wheelEvent
)
;
return
true
;
}
MouseScrollHandler
:
:
EventInfo
:
:
EventInfo
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
MOZ_ASSERT
(
aMessage
=
=
WM_MOUSEWHEEL
|
|
aMessage
=
=
WM_MOUSEHWHEEL
"
EventInfo
must
be
initialized
with
WM_MOUSEWHEEL
or
WM_MOUSEHWHEEL
"
)
;
MouseScrollHandler
:
:
GetInstance
(
)
-
>
mSystemSettings
.
Init
(
)
;
mIsVertical
=
(
aMessage
=
=
WM_MOUSEWHEEL
)
;
mIsPage
=
MouseScrollHandler
:
:
sInstance
-
>
mSystemSettings
.
IsPageScroll
(
mIsVertical
)
;
mDelta
=
(
short
)
HIWORD
(
aWParam
)
;
mWnd
=
aWidget
-
>
GetWindowHandle
(
)
;
mTimeStamp
=
TimeStamp
:
:
Now
(
)
;
}
bool
MouseScrollHandler
:
:
EventInfo
:
:
CanDispatchWheelEvent
(
)
const
{
if
(
!
GetScrollAmount
(
)
)
{
return
false
;
}
return
(
mDelta
!
=
0
)
;
}
int32_t
MouseScrollHandler
:
:
EventInfo
:
:
GetScrollAmount
(
)
const
{
if
(
mIsPage
)
{
return
1
;
}
return
MouseScrollHandler
:
:
sInstance
-
>
mSystemSettings
.
GetScrollAmount
(
mIsVertical
)
;
}
bool
MouseScrollHandler
:
:
LastEventInfo
:
:
CanContinueTransaction
(
const
EventInfo
&
aNewEvent
)
{
int32_t
timeout
=
MouseScrollHandler
:
:
sInstance
-
>
mUserPrefs
.
GetMouseScrollTransactionTimeout
(
)
;
return
!
mWnd
|
|
(
mWnd
=
=
aNewEvent
.
GetWindowHandle
(
)
&
&
IsPositive
(
)
=
=
aNewEvent
.
IsPositive
(
)
&
&
mIsVertical
=
=
aNewEvent
.
IsVertical
(
)
&
&
mIsPage
=
=
aNewEvent
.
IsPage
(
)
&
&
(
timeout
<
0
|
|
TimeStamp
:
:
Now
(
)
-
mTimeStamp
<
=
TimeDuration
:
:
FromMilliseconds
(
timeout
)
)
)
;
}
void
MouseScrollHandler
:
:
LastEventInfo
:
:
ResetTransaction
(
)
{
if
(
!
mWnd
)
{
return
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
LastEventInfo
:
:
ResetTransaction
(
)
"
)
)
;
mWnd
=
nullptr
;
mAccumulatedDelta
=
0
;
}
void
MouseScrollHandler
:
:
LastEventInfo
:
:
RecordEvent
(
const
EventInfo
&
aEvent
)
{
mWnd
=
aEvent
.
GetWindowHandle
(
)
;
mDelta
=
aEvent
.
GetNativeDelta
(
)
;
mIsVertical
=
aEvent
.
IsVertical
(
)
;
mIsPage
=
aEvent
.
IsPage
(
)
;
mTimeStamp
=
TimeStamp
:
:
Now
(
)
;
}
int32_t
MouseScrollHandler
:
:
LastEventInfo
:
:
RoundDelta
(
double
aDelta
)
{
return
(
aDelta
>
=
0
)
?
(
int32_t
)
floor
(
aDelta
)
:
(
int32_t
)
ceil
(
aDelta
)
;
}
bool
MouseScrollHandler
:
:
LastEventInfo
:
:
InitWheelEvent
(
nsWindow
*
aWidget
WidgetWheelEvent
&
aWheelEvent
const
ModifierKeyState
&
aModKeyState
LPARAM
aLParam
)
{
MOZ_ASSERT
(
aWheelEvent
.
mMessage
=
=
eWheel
)
;
if
(
StaticPrefs
:
:
mousewheel_ignore_cursor_position_in_lparam
(
)
)
{
InitEvent
(
aWidget
aWheelEvent
nullptr
)
;
}
else
{
InitEvent
(
aWidget
aWheelEvent
&
aLParam
)
;
}
aModKeyState
.
InitInputEvent
(
aWheelEvent
)
;
int32_t
orienter
=
mIsVertical
?
-
1
:
1
;
aWheelEvent
.
mDeltaMode
=
mIsPage
?
dom
:
:
WheelEvent_Binding
:
:
DOM_DELTA_PAGE
:
dom
:
:
WheelEvent_Binding
:
:
DOM_DELTA_LINE
;
double
ticks
=
double
(
mDelta
)
*
orienter
/
double
(
WHEEL_DELTA
)
;
if
(
mIsVertical
)
{
aWheelEvent
.
mWheelTicksY
=
ticks
;
}
else
{
aWheelEvent
.
mWheelTicksX
=
ticks
;
}
double
&
delta
=
mIsVertical
?
aWheelEvent
.
mDeltaY
:
aWheelEvent
.
mDeltaX
;
int32_t
&
lineOrPageDelta
=
mIsVertical
?
aWheelEvent
.
mLineOrPageDeltaY
:
aWheelEvent
.
mLineOrPageDeltaX
;
double
nativeDeltaPerUnit
=
mIsPage
?
double
(
WHEEL_DELTA
)
:
double
(
WHEEL_DELTA
)
/
GetScrollAmount
(
)
;
delta
=
double
(
mDelta
)
*
orienter
/
nativeDeltaPerUnit
;
mAccumulatedDelta
+
=
mDelta
;
lineOrPageDelta
=
mAccumulatedDelta
*
orienter
/
RoundDelta
(
nativeDeltaPerUnit
)
;
mAccumulatedDelta
-
=
lineOrPageDelta
*
orienter
*
RoundDelta
(
nativeDeltaPerUnit
)
;
if
(
aWheelEvent
.
mDeltaMode
!
=
dom
:
:
WheelEvent_Binding
:
:
DOM_DELTA_LINE
)
{
aWheelEvent
.
mAllowToOverrideSystemScrollSpeed
=
false
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
LastEventInfo
:
:
InitWheelEvent
:
aWidget
=
%
p
"
"
aWheelEvent
{
mRefPoint
:
{
x
:
%
d
y
:
%
d
}
mDeltaX
:
%
f
mDeltaY
:
%
f
"
"
mLineOrPageDeltaX
:
%
d
mLineOrPageDeltaY
:
%
d
"
"
isShift
:
%
s
isControl
:
%
s
isAlt
:
%
s
isMeta
:
%
s
"
"
mAllowToOverrideSystemScrollSpeed
:
%
s
}
"
"
mAccumulatedDelta
:
%
d
"
aWidget
aWheelEvent
.
mRefPoint
.
x
.
value
aWheelEvent
.
mRefPoint
.
y
.
value
aWheelEvent
.
mDeltaX
aWheelEvent
.
mDeltaY
aWheelEvent
.
mLineOrPageDeltaX
aWheelEvent
.
mLineOrPageDeltaY
GetBoolName
(
aWheelEvent
.
IsShift
(
)
)
GetBoolName
(
aWheelEvent
.
IsControl
(
)
)
GetBoolName
(
aWheelEvent
.
IsAlt
(
)
)
GetBoolName
(
aWheelEvent
.
IsMeta
(
)
)
GetBoolName
(
aWheelEvent
.
mAllowToOverrideSystemScrollSpeed
)
mAccumulatedDelta
)
)
;
return
(
delta
!
=
0
)
;
}
void
MouseScrollHandler
:
:
SystemSettings
:
:
Init
(
)
{
if
(
mInitialized
)
{
return
;
}
InitScrollLines
(
)
;
InitScrollChars
(
)
;
mInitialized
=
true
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
Init
(
)
:
initialized
"
"
mScrollLines
=
%
d
mScrollChars
=
%
d
"
mScrollLines
mScrollChars
)
)
;
}
bool
MouseScrollHandler
:
:
SystemSettings
:
:
InitScrollLines
(
)
{
int32_t
oldValue
=
mInitialized
?
mScrollLines
:
0
;
mIsReliableScrollLines
=
false
;
mScrollLines
=
MouseScrollHandler
:
:
sInstance
-
>
mUserPrefs
.
GetOverriddenVerticalScrollAmout
(
)
;
if
(
mScrollLines
>
=
0
)
{
mIsReliableScrollLines
=
true
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollLines
(
)
:
mScrollLines
is
"
"
overridden
by
the
pref
:
%
d
"
mScrollLines
)
)
;
}
else
if
(
!
:
:
SystemParametersInfo
(
SPI_GETWHEELSCROLLLINES
0
&
mScrollLines
0
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollLines
(
)
:
"
"
:
:
SystemParametersInfo
(
"
"
SPI_GETWHEELSCROLLLINES
)
failed
"
)
)
;
mScrollLines
=
DefaultScrollLines
(
)
;
}
if
(
mScrollLines
>
WHEEL_DELTA
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollLines
(
)
:
the
result
of
"
"
:
:
SystemParametersInfo
(
SPI_GETWHEELSCROLLLINES
)
is
too
large
:
%
d
"
mScrollLines
)
)
;
mScrollLines
=
WHEEL_PAGESCROLL
;
}
return
oldValue
!
=
mScrollLines
;
}
bool
MouseScrollHandler
:
:
SystemSettings
:
:
InitScrollChars
(
)
{
int32_t
oldValue
=
mInitialized
?
mScrollChars
:
0
;
mIsReliableScrollChars
=
false
;
mScrollChars
=
MouseScrollHandler
:
:
sInstance
-
>
mUserPrefs
.
GetOverriddenHorizontalScrollAmout
(
)
;
if
(
mScrollChars
>
=
0
)
{
mIsReliableScrollChars
=
true
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollChars
(
)
:
mScrollChars
is
"
"
overridden
by
the
pref
:
%
d
"
mScrollChars
)
)
;
}
else
if
(
!
:
:
SystemParametersInfo
(
SPI_GETWHEELSCROLLCHARS
0
&
mScrollChars
0
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollChars
(
)
:
"
"
:
:
SystemParametersInfo
(
"
"
SPI_GETWHEELSCROLLCHARS
)
failed
this
is
unexpected
on
Vista
or
"
"
later
"
)
)
;
mScrollChars
=
1
;
}
if
(
mScrollChars
>
WHEEL_DELTA
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
SystemSettings
:
:
InitScrollChars
(
)
:
the
result
of
"
"
:
:
SystemParametersInfo
(
SPI_GETWHEELSCROLLCHARS
)
is
too
large
:
%
d
"
mScrollChars
)
)
;
mScrollChars
=
WHEEL_PAGESCROLL
;
}
return
oldValue
!
=
mScrollChars
;
}
void
MouseScrollHandler
:
:
SystemSettings
:
:
MarkDirty
(
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SystemSettings
:
:
MarkDirty
(
)
:
"
"
Marking
SystemSettings
dirty
"
)
)
;
mInitialized
=
false
;
MOZ_ASSERT
(
sInstance
"
Must
not
be
called
at
initializing
MouseScrollHandler
"
)
;
MouseScrollHandler
:
:
sInstance
-
>
mLastEventInfo
.
ResetTransaction
(
)
;
}
void
MouseScrollHandler
:
:
SystemSettings
:
:
RefreshCache
(
)
{
bool
isChanged
=
InitScrollLines
(
)
;
isChanged
=
InitScrollChars
(
)
|
|
isChanged
;
if
(
!
isChanged
)
{
return
;
}
MOZ_ASSERT
(
sInstance
"
Must
not
be
called
at
initializing
MouseScrollHandler
"
)
;
MouseScrollHandler
:
:
sInstance
-
>
mLastEventInfo
.
ResetTransaction
(
)
;
}
void
MouseScrollHandler
:
:
SystemSettings
:
:
TrustedScrollSettingsDriver
(
)
{
if
(
!
mInitialized
)
{
return
;
}
if
(
mIsReliableScrollLines
&
&
mIsReliableScrollChars
)
{
return
;
}
MouseScrollHandler
:
:
UserPrefs
&
userPrefs
=
MouseScrollHandler
:
:
sInstance
-
>
mUserPrefs
;
if
(
!
userPrefs
.
IsSystemSettingCacheEnabled
(
)
)
{
RefreshCache
(
)
;
return
;
}
if
(
userPrefs
.
IsSystemSettingCacheForciblyEnabled
(
)
)
{
return
;
}
if
(
Device
:
:
SynTP
:
:
IsDriverInstalled
(
)
|
|
Device
:
:
Apoint
:
:
IsDriverInstalled
(
)
)
{
RefreshCache
(
)
;
return
;
}
}
MouseScrollHandler
:
:
UserPrefs
:
:
UserPrefs
(
)
:
mInitialized
(
false
)
{
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
RegisterPrefixCallback
(
OnChange
"
mousewheel
.
"
this
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
register
callback
for
mousewheel
.
"
)
;
}
MouseScrollHandler
:
:
UserPrefs
:
:
~
UserPrefs
(
)
{
DebugOnly
<
nsresult
>
rv
=
Preferences
:
:
UnregisterPrefixCallback
(
OnChange
"
mousewheel
.
"
this
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Failed
to
unregister
callback
for
mousewheel
.
"
)
;
}
void
MouseScrollHandler
:
:
UserPrefs
:
:
Init
(
)
{
if
(
mInitialized
)
{
return
;
}
mInitialized
=
true
;
mScrollMessageHandledAsWheelMessage
=
Preferences
:
:
GetBool
(
"
mousewheel
.
emulate_at_wm_scroll
"
false
)
;
mEnableSystemSettingCache
=
Preferences
:
:
GetBool
(
"
mousewheel
.
system_settings_cache
.
enabled
"
true
)
;
mForceEnableSystemSettingCache
=
Preferences
:
:
GetBool
(
"
mousewheel
.
system_settings_cache
.
force_enabled
"
false
)
;
mEmulateToMakeWindowUnderCursorForeground
=
Preferences
:
:
GetBool
(
"
mousewheel
.
debug
.
make_window_under_cursor_foreground
"
false
)
;
mOverriddenVerticalScrollAmount
=
Preferences
:
:
GetInt
(
"
mousewheel
.
windows
.
vertical_amount_override
"
-
1
)
;
mOverriddenHorizontalScrollAmount
=
Preferences
:
:
GetInt
(
"
mousewheel
.
windows
.
horizontal_amount_override
"
-
1
)
;
mMouseScrollTransactionTimeout
=
Preferences
:
:
GetInt
(
"
mousewheel
.
windows
.
transaction
.
timeout
"
DEFAULT_TIMEOUT_DURATION
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
UserPrefs
:
:
Init
(
)
:
initialized
"
"
mScrollMessageHandledAsWheelMessage
=
%
s
"
"
mEnableSystemSettingCache
=
%
s
"
"
mForceEnableSystemSettingCache
=
%
s
"
"
mEmulateToMakeWindowUnderCursorForeground
=
%
s
"
"
mOverriddenVerticalScrollAmount
=
%
d
"
"
mOverriddenHorizontalScrollAmount
=
%
d
"
"
mMouseScrollTransactionTimeout
=
%
d
"
GetBoolName
(
mScrollMessageHandledAsWheelMessage
)
GetBoolName
(
mEnableSystemSettingCache
)
GetBoolName
(
mForceEnableSystemSettingCache
)
GetBoolName
(
mEmulateToMakeWindowUnderCursorForeground
)
mOverriddenVerticalScrollAmount
mOverriddenHorizontalScrollAmount
mMouseScrollTransactionTimeout
)
)
;
}
void
MouseScrollHandler
:
:
UserPrefs
:
:
MarkDirty
(
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
UserPrefs
:
:
MarkDirty
(
)
:
Marking
UserPrefs
dirty
"
)
)
;
mInitialized
=
false
;
MouseScrollHandler
:
:
sInstance
-
>
mSystemSettings
.
MarkDirty
(
)
;
MOZ_ASSERT
(
sInstance
"
Must
not
be
called
at
initializing
MouseScrollHandler
"
)
;
MouseScrollHandler
:
:
sInstance
-
>
mLastEventInfo
.
ResetTransaction
(
)
;
}
bool
MouseScrollHandler
:
:
Device
:
:
GetWorkaroundPref
(
const
char
*
aPrefName
bool
aValueIfAutomatic
)
{
if
(
!
aPrefName
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
GetWorkaroundPref
(
)
:
Failed
aPrefName
is
"
"
NULL
"
)
)
;
return
aValueIfAutomatic
;
}
int32_t
lHackValue
=
0
;
if
(
NS_FAILED
(
Preferences
:
:
GetInt
(
aPrefName
&
lHackValue
)
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
GetWorkaroundPref
(
)
:
Preferences
:
:
GetInt
(
)
"
"
failed
"
"
aPrefName
=
\
"
%
s
\
"
aValueIfAutomatic
=
%
s
"
aPrefName
GetBoolName
(
aValueIfAutomatic
)
)
)
;
return
aValueIfAutomatic
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
GetWorkaroundPref
(
)
:
Succeeded
"
"
aPrefName
=
\
"
%
s
\
"
aValueIfAutomatic
=
%
s
lHackValue
=
%
d
"
aPrefName
GetBoolName
(
aValueIfAutomatic
)
lHackValue
)
)
;
switch
(
lHackValue
)
{
case
0
:
return
false
;
case
1
:
return
true
;
default
:
return
aValueIfAutomatic
;
}
}
void
MouseScrollHandler
:
:
Device
:
:
Init
(
)
{
SynTP
:
:
Init
(
)
;
Elantech
:
:
Init
(
)
;
Apoint
:
:
Init
(
)
;
sFakeScrollableWindowNeeded
=
GetWorkaroundPref
(
"
ui
.
trackpoint_hack
.
enabled
"
(
TrackPoint
:
:
IsDriverInstalled
(
)
|
|
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
)
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Init
(
)
:
sFakeScrollableWindowNeeded
=
%
s
"
GetBoolName
(
sFakeScrollableWindowNeeded
)
)
)
;
}
void
MouseScrollHandler
:
:
Device
:
:
SynTP
:
:
Init
(
)
{
if
(
sInitialized
)
{
return
;
}
sInitialized
=
true
;
sMajorVersion
=
0
;
sMinorVersion
=
-
1
;
wchar_t
buf
[
40
]
;
if
(
!
WinRegistry
:
:
GetString
(
HKEY_LOCAL_MACHINE
u
"
Software
\
\
Synaptics
\
\
SynTP
\
\
Install
"
_ns
u
"
DriverVersion
"
_ns
buf
WinRegistry
:
:
kLegacyWinUtilsStringFlags
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
SynTP
:
:
Init
(
)
:
"
"
SynTP
driver
is
not
found
"
)
)
;
return
;
}
sMajorVersion
=
wcstol
(
buf
nullptr
10
)
;
sMinorVersion
=
0
;
wchar_t
*
p
=
wcschr
(
buf
L
'
.
'
)
;
if
(
p
)
{
sMinorVersion
=
wcstol
(
p
+
1
nullptr
10
)
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
SynTP
:
:
Init
(
)
:
"
"
found
driver
version
=
%
d
.
%
d
"
sMajorVersion
sMinorVersion
)
)
;
}
void
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
Init
(
)
{
int32_t
version
=
GetDriverMajorVersion
(
)
;
bool
needsHack
=
Device
:
:
GetWorkaroundPref
(
"
ui
.
elantech_gesture_hacks
.
enabled
"
version
!
=
0
)
;
sUseSwipeHack
=
needsHack
&
&
version
<
=
7
;
sUsePinchHack
=
needsHack
&
&
version
<
=
8
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Elantech
:
:
Init
(
)
:
version
=
%
d
sUseSwipeHack
=
%
s
"
"
sUsePinchHack
=
%
s
"
version
GetBoolName
(
sUseSwipeHack
)
GetBoolName
(
sUsePinchHack
)
)
)
;
}
int32_t
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
GetDriverMajorVersion
(
)
{
wchar_t
buf
[
40
]
;
if
(
!
WinRegistry
:
:
GetString
(
HKEY_CURRENT_USER
u
"
Software
\
\
Elantech
\
\
MainOption
"
_ns
u
"
DriverVersion
"
_ns
buf
WinRegistry
:
:
kLegacyWinUtilsStringFlags
)
&
&
!
WinRegistry
:
:
GetString
(
HKEY_CURRENT_USER
u
"
Software
\
\
Elantech
"
_ns
u
"
DriverVersion
"
_ns
buf
WinRegistry
:
:
kLegacyWinUtilsStringFlags
)
)
{
return
0
;
}
for
(
wchar_t
*
p
=
buf
;
*
p
;
p
+
+
)
{
if
(
*
p
>
=
L
'
0
'
&
&
*
p
<
=
L
'
9
'
&
&
(
p
=
=
buf
|
|
*
(
p
-
1
)
=
=
L
'
'
)
)
{
return
wcstol
(
p
nullptr
10
)
;
}
}
return
0
;
}
bool
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
IsHelperWindow
(
HWND
aWnd
)
{
const
wchar_t
*
filenameSuffix
=
L
"
\
\
etdctrl
.
exe
"
;
const
int
filenameSuffixLength
=
12
;
DWORD
pid
;
:
:
GetWindowThreadProcessId
(
aWnd
&
pid
)
;
HANDLE
hProcess
=
:
:
OpenProcess
(
PROCESS_QUERY_INFORMATION
FALSE
pid
)
;
if
(
!
hProcess
)
{
return
false
;
}
bool
result
=
false
;
wchar_t
path
[
256
]
=
{
L
'
\
0
'
}
;
if
(
:
:
GetProcessImageFileNameW
(
hProcess
path
std
:
:
size
(
path
)
)
)
{
int
pathLength
=
lstrlenW
(
path
)
;
if
(
pathLength
>
=
filenameSuffixLength
)
{
if
(
lstrcmpiW
(
path
+
pathLength
-
filenameSuffixLength
filenameSuffix
)
=
=
0
)
{
result
=
true
;
}
}
}
:
:
CloseHandle
(
hProcess
)
;
return
result
;
}
bool
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
HandleKeyMessage
(
nsWindow
*
aWidget
UINT
aMsg
WPARAM
aWParam
LPARAM
aLParam
)
{
if
(
sUseSwipeHack
&
&
(
aWParam
=
=
VK_NEXT
|
|
aWParam
=
=
VK_PRIOR
)
&
&
WinUtils
:
:
GetScanCode
(
aLParam
)
=
=
0
&
&
(
IS_VK_DOWN
(
0xFF
)
|
|
IS_VK_DOWN
(
0xCC
)
)
)
{
if
(
aMsg
=
=
WM_KEYDOWN
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Elantech
:
:
HandleKeyMessage
(
)
:
Dispatching
"
"
%
s
command
event
"
aWParam
=
=
VK_NEXT
?
"
Forward
"
:
"
Back
"
)
)
;
WidgetCommandEvent
appCommandEvent
(
true
(
aWParam
=
=
VK_NEXT
)
?
nsGkAtoms
:
:
Forward
:
nsGkAtoms
:
:
Back
aWidget
)
;
InitEvent
(
aWidget
appCommandEvent
nullptr
)
;
aWidget
-
>
DispatchWindowEvent
(
appCommandEvent
)
;
}
else
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Elantech
:
:
HandleKeyMessage
(
)
:
Consumed
"
)
)
;
}
return
true
;
}
if
(
sUsePinchHack
&
&
aMsg
=
=
WM_KEYUP
&
&
aWParam
=
=
VK_CONTROL
&
&
:
:
GetMessageTime
(
)
=
=
10
)
{
sZoomUntil
=
:
:
GetTickCount
(
)
&
0x7FFFFFFF
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Elantech
:
:
HandleKeyMessage
(
)
:
sZoomUntil
=
%
lu
"
sZoomUntil
)
)
;
}
return
false
;
}
void
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
UpdateZoomUntil
(
)
{
if
(
!
sZoomUntil
)
{
return
;
}
LONG
msgTime
=
:
:
GetMessageTime
(
)
;
if
(
(
sZoomUntil
>
=
0x3fffffffu
&
&
DWORD
(
msgTime
)
<
0x40000000u
)
|
|
(
sZoomUntil
<
DWORD
(
msgTime
)
)
)
{
sZoomUntil
=
0
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Elantech
:
:
UpdateZoomUntil
(
)
:
"
"
sZoomUntil
was
reset
"
)
)
;
}
}
bool
MouseScrollHandler
:
:
Device
:
:
Elantech
:
:
IsZooming
(
)
{
return
(
sZoomUntil
&
&
static_cast
<
DWORD
>
(
:
:
GetMessageTime
(
)
)
<
sZoomUntil
)
;
}
void
MouseScrollHandler
:
:
Device
:
:
Apoint
:
:
Init
(
)
{
if
(
sInitialized
)
{
return
;
}
sInitialized
=
true
;
sMajorVersion
=
0
;
sMinorVersion
=
-
1
;
wchar_t
buf
[
40
]
;
if
(
!
WinRegistry
:
:
GetString
(
HKEY_LOCAL_MACHINE
u
"
Software
\
\
Alps
\
\
Apoint
"
_ns
u
"
ProductVer
"
_ns
buf
WinRegistry
:
:
kLegacyWinUtilsStringFlags
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Apoint
:
:
Init
(
)
:
"
"
Apoint
driver
is
not
found
"
)
)
;
return
;
}
sMajorVersion
=
wcstol
(
buf
nullptr
10
)
;
sMinorVersion
=
0
;
wchar_t
*
p
=
wcschr
(
buf
L
'
.
'
)
;
if
(
p
)
{
sMinorVersion
=
wcstol
(
p
+
1
nullptr
10
)
;
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
Apoint
:
:
Init
(
)
:
"
"
found
driver
version
=
%
d
.
%
d
"
sMajorVersion
sMinorVersion
)
)
;
}
bool
MouseScrollHandler
:
:
Device
:
:
TrackPoint
:
:
IsDriverInstalled
(
)
{
if
(
WinRegistry
:
:
HasKey
(
HKEY_CURRENT_USER
u
"
Software
\
\
Lenovo
\
\
TrackPoint
"
_ns
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
TrackPoint
:
:
IsDriverInstalled
(
)
:
"
"
Lenovo
'
s
TrackPoint
driver
is
found
"
)
)
;
return
true
;
}
if
(
WinRegistry
:
:
HasKey
(
HKEY_CURRENT_USER
u
"
Software
\
\
Alps
\
\
Apoint
\
\
TrackPoint
"
_ns
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
TrackPoint
:
:
IsDriverInstalled
(
)
:
"
"
Alps
'
s
TrackPoint
driver
is
found
"
)
)
;
return
true
;
}
return
false
;
}
bool
MouseScrollHandler
:
:
Device
:
:
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
{
if
(
WinRegistry
:
:
HasKey
(
HKEY_CURRENT_USER
u
"
Software
\
\
Lenovo
\
\
UltraNav
"
_ns
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
:
"
"
Lenovo
'
s
UltraNav
driver
is
found
"
)
)
;
return
true
;
}
bool
installed
=
false
;
if
(
WinRegistry
:
:
HasKey
(
HKEY_CURRENT_USER
u
"
Software
\
\
Synaptics
\
\
SynTPEnh
\
\
UltraNavUSB
"
_ns
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
:
"
"
Synaptics
'
s
UltraNav
(
USB
)
driver
is
found
"
)
)
;
installed
=
true
;
}
else
if
(
WinRegistry
:
:
HasKey
(
HKEY_CURRENT_USER
u
"
Software
\
\
Synaptics
\
\
SynTPEnh
\
\
UltraNavPS2
"
_ns
)
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
:
"
"
Synaptics
'
s
UltraNav
(
PS
/
2
)
driver
is
found
"
)
)
;
installed
=
true
;
}
if
(
!
installed
)
{
return
false
;
}
int32_t
majorVersion
=
Device
:
:
SynTP
:
:
GetDriverMajorVersion
(
)
;
if
(
!
majorVersion
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
UltraNav
:
:
IsObsoleteDriverInstalled
(
)
:
"
"
Failed
to
get
UltraNav
driver
version
"
)
)
;
return
false
;
}
int32_t
minorVersion
=
Device
:
:
SynTP
:
:
GetDriverMinorVersion
(
)
;
return
majorVersion
<
15
|
|
(
majorVersion
=
=
15
&
&
minorVersion
=
=
0
)
;
}
bool
MouseScrollHandler
:
:
Device
:
:
SetPoint
:
:
IsGetMessagePosResponseValid
(
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
if
(
aMessage
!
=
WM_MOUSEHWHEEL
)
{
return
false
;
}
POINTS
pts
=
MouseScrollHandler
:
:
GetCurrentMessagePos
(
)
;
LPARAM
messagePos
=
MAKELPARAM
(
pts
.
x
pts
.
y
)
;
if
(
!
sMightBeUsing
&
&
!
aLParam
&
&
aLParam
!
=
messagePos
&
&
:
:
InSendMessage
(
)
)
{
sMightBeUsing
=
true
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
SetPoint
:
:
IsGetMessagePosResponseValid
(
)
:
"
"
Might
using
SetPoint
"
)
)
;
}
else
if
(
sMightBeUsing
&
&
aLParam
!
=
0
&
&
:
:
InSendMessage
(
)
)
{
sMightBeUsing
=
false
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScroll
:
:
Device
:
:
SetPoint
:
:
IsGetMessagePosResponseValid
(
)
:
"
"
Might
stop
using
SetPoint
"
)
)
;
}
return
(
sMightBeUsing
&
&
!
aLParam
&
&
!
messagePos
)
;
}
MouseScrollHandler
:
:
SynthesizingEvent
*
MouseScrollHandler
:
:
SynthesizingEvent
:
:
GetActiveInstance
(
)
{
if
(
auto
*
outer
=
MouseScrollHandler
:
:
sInstance
)
{
if
(
auto
*
self
=
outer
-
>
mSynthesizingEvent
.
get
(
)
)
{
if
(
self
-
>
mStatus
!
=
NOT_SYNTHESIZING
)
{
return
self
;
}
}
}
return
nullptr
;
}
nsresult
MouseScrollHandler
:
:
SynthesizingEvent
:
:
Synthesize
(
const
POINTS
&
aCursorPoint
HWND
aWnd
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
const
BYTE
(
&
aKeyStates
)
[
256
]
)
{
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SynthesizingEvent
:
:
Synthesize
(
)
:
aCursorPoint
:
{
"
"
x
:
%
d
y
:
%
d
}
aWnd
=
0x
%
p
aMessage
=
0x
%
04X
aWParam
=
0x
%
08zX
"
"
aLParam
=
0x
%
08
"
PRIXLPTR
"
synthesizing
=
%
s
mStatus
=
%
s
"
aCursorPoint
.
x
aCursorPoint
.
y
aWnd
aMessage
aWParam
aLParam
GetBoolName
(
!
!
GetActiveInstance
(
)
)
GetStatusName
(
)
)
)
;
if
(
mStatus
!
=
NOT_SYNTHESIZING
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
:
:
GetKeyboardState
(
mOriginalKeyState
)
;
mCursorPoint
=
aCursorPoint
;
memcpy
(
mKeyState
aKeyStates
sizeof
(
mKeyState
)
)
;
:
:
SetKeyboardState
(
mKeyState
)
;
mStatus
=
SENDING_MESSAGE
;
:
:
SendMessage
(
aWnd
aMessage
aWParam
aLParam
)
;
return
NS_OK
;
}
void
MouseScrollHandler
:
:
SynthesizingEvent
:
:
NativeMessageReceived
(
nsWindow
*
aWidget
UINT
aMessage
WPARAM
aWParam
LPARAM
aLParam
)
{
if
(
mStatus
=
=
SENDING_MESSAGE
&
&
mMessage
=
=
aMessage
&
&
mWParam
=
=
aWParam
&
&
mLParam
=
=
aLParam
)
{
mStatus
=
NATIVE_MESSAGE_RECEIVED
;
if
(
aWidget
&
&
aWidget
-
>
GetWindowHandle
(
)
=
=
mWnd
)
{
return
;
}
}
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SynthesizingEvent
:
:
NativeMessageReceived
(
)
:
"
"
aWidget
=
%
p
aWidget
-
>
GetWindowHandle
(
)
=
0x
%
p
mWnd
=
0x
%
p
"
"
aMessage
=
0x
%
04X
aWParam
=
0x
%
08zX
aLParam
=
0x
%
08
"
PRIXLPTR
"
mStatus
=
%
s
"
aWidget
aWidget
?
aWidget
-
>
GetWindowHandle
(
)
:
nullptr
mWnd
aMessage
aWParam
aLParam
GetStatusName
(
)
)
)
;
Finish
(
)
;
}
void
MouseScrollHandler
:
:
SynthesizingEvent
:
:
NotifyNativeMessageHandlingFinished
(
)
{
MOZ_ASSERT
(
mStatus
!
=
NOT_SYNTHESIZING
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SynthesizingEvent
:
:
"
"
NotifyNativeMessageHandlingFinished
(
)
:
this
=
%
p
"
this
)
)
;
Finish
(
)
;
}
void
MouseScrollHandler
:
:
SynthesizingEvent
:
:
NotifyInternalMessageHandlingFinished
(
)
{
MOZ_ASSERT
(
mStatus
!
=
NOT_SYNTHESIZING
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SynthesizingEvent
:
:
"
"
NotifyInternalMessageHandlingFinished
(
)
"
)
)
;
Finish
(
)
;
}
void
MouseScrollHandler
:
:
SynthesizingEvent
:
:
Finish
(
)
{
MOZ_ASSERT
(
mStatus
!
=
NOT_SYNTHESIZING
)
;
MOZ_LOG
(
gMouseScrollLog
LogLevel
:
:
Info
(
"
MouseScrollHandler
:
:
SynthesizingEvent
:
:
Finish
(
)
"
)
)
;
:
:
SetKeyboardState
(
mOriginalKeyState
)
;
mStatus
=
NOT_SYNTHESIZING
;
}
}
}
#
undef
GetMessagePos
