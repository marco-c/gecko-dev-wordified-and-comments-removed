#
include
"
plstr
.
h
"
#
include
<
windows
.
h
>
#
include
<
tchar
.
h
>
#
include
<
unknwn
.
h
>
#
include
<
commdlg
.
h
>
#
include
"
mozilla
/
BackgroundHangMonitor
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIPrintSettingsWin
.
h
"
#
include
"
nsIPrinterList
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
prenv
.
h
"
#
include
<
windows
.
h
>
#
include
<
winspool
.
h
>
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
<
dlgs
.
h
>
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
WinUtils
.
h
"
static
HWND
gParentWnd
=
nullptr
;
static
nsReturnRef
<
nsHGLOBAL
>
CreateGlobalDevModeAndInit
(
const
nsString
&
aPrintName
nsIPrintSettings
*
aPS
)
{
nsHPRINTER
hPrinter
=
nullptr
;
LPWSTR
printName
=
const_cast
<
wchar_t
*
>
(
static_cast
<
const
wchar_t
*
>
(
aPrintName
.
get
(
)
)
)
;
BOOL
status
=
:
:
OpenPrinterW
(
printName
&
hPrinter
nullptr
)
;
if
(
!
status
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
nsAutoPrinter
autoPrinter
(
hPrinter
)
;
LONG
needed
=
:
:
DocumentPropertiesW
(
gParentWnd
hPrinter
printName
nullptr
nullptr
0
)
;
if
(
needed
<
0
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
needed
*
=
2
;
nsAutoDevMode
newDevMode
(
(
LPDEVMODEW
)
:
:
HeapAlloc
(
:
:
GetProcessHeap
(
)
HEAP_ZERO_MEMORY
needed
)
)
;
if
(
!
newDevMode
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
nsHGLOBAL
hDevMode
=
:
:
GlobalAlloc
(
GHND
needed
)
;
nsAutoGlobalMem
globalDevMode
(
hDevMode
)
;
if
(
!
hDevMode
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
LONG
ret
=
:
:
DocumentPropertiesW
(
gParentWnd
hPrinter
printName
newDevMode
nullptr
DM_OUT_BUFFER
)
;
if
(
ret
!
=
IDOK
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
LPDEVMODEW
devMode
=
(
DEVMODEW
*
)
:
:
GlobalLock
(
hDevMode
)
;
if
(
!
devMode
)
{
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
memcpy
(
devMode
newDevMode
.
get
(
)
needed
)
;
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
=
do_QueryInterface
(
aPS
)
;
MOZ_ASSERT
(
psWin
)
;
psWin
-
>
CopyToNative
(
devMode
)
;
ret
=
:
:
DocumentPropertiesW
(
gParentWnd
hPrinter
printName
devMode
devMode
DM_IN_BUFFER
|
DM_OUT_BUFFER
)
;
if
(
ret
!
=
IDOK
)
{
:
:
GlobalUnlock
(
hDevMode
)
;
return
nsReturnRef
<
nsHGLOBAL
>
(
)
;
}
:
:
GlobalUnlock
(
hDevMode
)
;
return
globalDevMode
.
out
(
)
;
}
static
void
GetDefaultPrinterNameFromGlobalPrinters
(
nsAString
&
aPrinterName
)
{
aPrinterName
.
Truncate
(
)
;
nsCOMPtr
<
nsIPrinterList
>
printerList
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
printerlist
;
1
"
)
;
if
(
printerList
)
{
printerList
-
>
GetSystemDefaultPrinterName
(
aPrinterName
)
;
}
}
static
nsresult
ShowNativePrintDialog
(
HWND
aHWnd
nsIPrintSettings
*
aPrintSettings
)
{
NS_ENSURE_ARG_POINTER
(
aPrintSettings
)
;
nsString
printerName
;
aPrintSettings
-
>
GetPrinterName
(
printerName
)
;
if
(
printerName
.
IsEmpty
(
)
)
{
GetDefaultPrinterNameFromGlobalPrinters
(
printerName
)
;
}
else
{
HANDLE
hPrinter
=
nullptr
;
if
(
!
:
:
OpenPrinterW
(
const_cast
<
wchar_t
*
>
(
static_cast
<
const
wchar_t
*
>
(
printerName
.
get
(
)
)
)
&
hPrinter
nullptr
)
)
{
GetDefaultPrinterNameFromGlobalPrinters
(
printerName
)
;
}
else
{
:
:
ClosePrinter
(
hPrinter
)
;
}
}
uint32_t
len
=
printerName
.
Length
(
)
;
nsHGLOBAL
hDevNames
=
:
:
GlobalAlloc
(
GHND
sizeof
(
wchar_t
)
*
(
len
+
1
)
+
sizeof
(
DEVNAMES
)
)
;
nsAutoGlobalMem
autoDevNames
(
hDevNames
)
;
if
(
!
hDevNames
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
DEVNAMES
*
pDevNames
=
(
DEVNAMES
*
)
:
:
GlobalLock
(
hDevNames
)
;
if
(
!
pDevNames
)
{
return
NS_ERROR_FAILURE
;
}
pDevNames
-
>
wDriverOffset
=
sizeof
(
DEVNAMES
)
/
sizeof
(
wchar_t
)
;
pDevNames
-
>
wDeviceOffset
=
sizeof
(
DEVNAMES
)
/
sizeof
(
wchar_t
)
;
pDevNames
-
>
wOutputOffset
=
sizeof
(
DEVNAMES
)
/
sizeof
(
wchar_t
)
+
len
;
pDevNames
-
>
wDefault
=
0
;
memcpy
(
pDevNames
+
1
printerName
.
get
(
)
(
len
+
1
)
*
sizeof
(
wchar_t
)
)
;
:
:
GlobalUnlock
(
hDevNames
)
;
nsAutoGlobalMem
autoDevMode
(
CreateGlobalDevModeAndInit
(
printerName
aPrintSettings
)
)
;
PRINTDLGW
prntdlg
;
memset
(
&
prntdlg
0
sizeof
(
PRINTDLGW
)
)
;
prntdlg
.
lStructSize
=
sizeof
(
prntdlg
)
;
prntdlg
.
hwndOwner
=
aHWnd
;
prntdlg
.
hDevMode
=
autoDevMode
.
get
(
)
;
prntdlg
.
hDevNames
=
hDevNames
;
prntdlg
.
hDC
=
nullptr
;
prntdlg
.
Flags
=
PD_ALLPAGES
|
PD_RETURNIC
|
PD_USEDEVMODECOPIESANDCOLLATE
|
PD_COLLATE
;
if
(
!
aPrintSettings
-
>
GetIsPrintSelectionRBEnabled
(
)
)
{
prntdlg
.
Flags
|
=
PD_NOSELECTION
;
}
int16_t
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
aPrintSettings
-
>
GetPrintRange
(
&
printRangeType
)
;
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
)
{
prntdlg
.
Flags
|
=
PD_PAGENUMS
;
}
int32_t
pg
=
1
;
aPrintSettings
-
>
GetStartPageRange
(
&
pg
)
;
prntdlg
.
nFromPage
=
pg
;
aPrintSettings
-
>
GetEndPageRange
(
&
pg
)
;
prntdlg
.
nToPage
=
pg
;
prntdlg
.
nMinPage
=
1
;
prntdlg
.
nMaxPage
=
0xFFFF
;
prntdlg
.
nCopies
=
1
;
prntdlg
.
lpfnSetupHook
=
nullptr
;
prntdlg
.
lpSetupTemplateName
=
nullptr
;
prntdlg
.
hPrintTemplate
=
nullptr
;
prntdlg
.
hSetupTemplate
=
nullptr
;
prntdlg
.
hInstance
=
nullptr
;
prntdlg
.
lpPrintTemplateName
=
nullptr
;
prntdlg
.
lCustData
=
0
;
prntdlg
.
lpfnPrintHook
=
nullptr
;
BOOL
result
;
{
mozilla
:
:
widget
:
:
WinUtils
:
:
AutoSystemDpiAware
dpiAwareness
;
mozilla
:
:
BackgroundHangMonitor
(
)
.
NotifyWait
(
)
;
result
=
:
:
PrintDlgW
(
&
prntdlg
)
;
}
if
(
TRUE
=
=
result
)
{
NS_ENSURE_TRUE
(
aPrintSettings
&
&
prntdlg
.
hDevMode
NS_ERROR_FAILURE
)
;
if
(
prntdlg
.
hDevNames
=
=
nullptr
)
{
return
NS_ERROR_FAILURE
;
}
DEVNAMES
*
devnames
=
(
DEVNAMES
*
)
:
:
GlobalLock
(
prntdlg
.
hDevNames
)
;
if
(
devnames
=
=
nullptr
)
{
return
NS_ERROR_FAILURE
;
}
char16_t
*
device
=
&
(
(
(
char16_t
*
)
devnames
)
[
devnames
-
>
wDeviceOffset
]
)
;
char16_t
*
driver
=
&
(
(
(
char16_t
*
)
devnames
)
[
devnames
-
>
wDriverOffset
]
)
;
if
(
prntdlg
.
Flags
&
PD_PRINTTOFILE
)
{
char16ptr_t
fileName
=
&
(
(
(
wchar_t
*
)
devnames
)
[
devnames
-
>
wOutputOffset
]
)
;
NS_ASSERTION
(
wcscmp
(
fileName
L
"
FILE
:
"
)
=
=
0
"
FileName
must
be
FILE
:
"
)
;
aPrintSettings
-
>
SetToFileName
(
nsDependentString
(
fileName
)
)
;
aPrintSettings
-
>
SetPrintToFile
(
true
)
;
}
else
{
aPrintSettings
-
>
SetPrintToFile
(
false
)
;
aPrintSettings
-
>
SetToFileName
(
u
"
"
_ns
)
;
}
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
(
do_QueryInterface
(
aPrintSettings
)
)
;
if
(
!
psWin
)
{
return
NS_ERROR_FAILURE
;
}
psWin
-
>
SetDeviceName
(
nsDependentString
(
device
)
)
;
psWin
-
>
SetDriverName
(
nsDependentString
(
driver
)
)
;
aPrintSettings
-
>
SetPrinterName
(
nsDependentString
(
device
)
)
;
aPrintSettings
-
>
SetPrintSelectionOnly
(
prntdlg
.
Flags
&
PD_SELECTION
)
;
if
(
prntdlg
.
Flags
&
PD_PAGENUMS
)
{
aPrintSettings
-
>
SetPrintRange
(
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
)
;
aPrintSettings
-
>
SetStartPageRange
(
prntdlg
.
nFromPage
)
;
aPrintSettings
-
>
SetEndPageRange
(
prntdlg
.
nToPage
)
;
}
else
{
aPrintSettings
-
>
SetPrintRange
(
nsIPrintSettings
:
:
kRangeAllPages
)
;
}
:
:
GlobalUnlock
(
prntdlg
.
hDevNames
)
;
LPDEVMODEW
devMode
=
(
LPDEVMODEW
)
:
:
GlobalLock
(
prntdlg
.
hDevMode
)
;
if
(
!
devMode
|
|
!
prntdlg
.
hDC
)
{
return
NS_ERROR_FAILURE
;
}
psWin
-
>
SetDevMode
(
devMode
)
;
psWin
-
>
CopyFromNative
(
prntdlg
.
hDC
devMode
)
;
:
:
GlobalUnlock
(
prntdlg
.
hDevMode
)
;
:
:
DeleteDC
(
prntdlg
.
hDC
)
;
}
else
{
:
:
SetFocus
(
aHWnd
)
;
aPrintSettings
-
>
SetIsCancelled
(
true
)
;
return
NS_ERROR_ABORT
;
}
return
NS_OK
;
}
nsresult
NativeShowPrintDialog
(
HWND
aHWnd
nsIPrintSettings
*
aPrintSettings
)
{
nsresult
rv
=
ShowNativePrintDialog
(
aHWnd
aPrintSettings
)
;
if
(
aHWnd
)
{
:
:
DestroyWindow
(
aHWnd
)
;
}
return
rv
;
}
