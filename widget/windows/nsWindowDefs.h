#
ifndef
WindowDefs_h__
#
define
WindowDefs_h__
#
include
"
mozilla
/
widget
/
WinMessages
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
nsdefs
.
h
"
#
include
"
resource
.
h
"
#
define
kWindowPositionSlop
20
#
define
MOZ_SYSCONTEXT_X_POS
20
#
define
MOZ_SYSCONTEXT_Y_POS
20
#
define
MAX_RECTS_IN_REGION
100
#
define
TABLET_INK_SIGNATURE
0xFFFFFF00
#
define
TABLET_INK_CHECK
0xFF515700
#
define
TABLET_INK_TOUCH
0x00000080
#
define
TABLET_INK_ID_MASK
0x0000007F
#
define
MOUSE_INPUT_SOURCE
(
)
WinUtils
:
:
GetMouseInputSource
(
)
#
define
MOUSE_POINTERID
(
)
WinUtils
:
:
GetMousePointerID
(
)
typedef
enum
{
TRI_UNKNOWN
=
-
1
TRI_FALSE
=
0
TRI_TRUE
=
1
}
TriStateBool
;
const
uint32_t
kMaxClassNameLength
=
40
;
const
wchar_t
kClassNameHidden
[
]
=
L
"
MozillaHiddenWindowClass
"
;
const
wchar_t
kClassNameGeneral
[
]
=
L
"
MozillaWindowClass
"
;
const
wchar_t
kClassNameDialog
[
]
=
L
"
MozillaDialogClass
"
;
const
wchar_t
kClassNameDropShadow
[
]
=
L
"
MozillaDropShadowWindowClass
"
;
const
wchar_t
kClassNameTemp
[
]
=
L
"
MozillaTempWindowClass
"
;
const
wchar_t
kClassNameTransition
[
]
=
L
"
MozillaTransitionWindowClass
"
;
struct
KeyPair
{
uint8_t
mGeneral
;
uint8_t
mSpecific
;
uint16_t
mScanCode
;
KeyPair
(
uint32_t
aGeneral
uint32_t
aSpecific
)
:
mGeneral
(
aGeneral
&
0xFF
)
mSpecific
(
aSpecific
&
0xFF
)
mScanCode
(
(
aGeneral
&
0xFFFF0000
)
>
>
16
)
{
}
}
;
#
if
(
WINVER
<
0x0600
)
struct
TITLEBARINFOEX
{
DWORD
cbSize
;
RECT
rcTitleBar
;
DWORD
rgstate
[
CCHILDREN_TITLEBAR
+
1
]
;
RECT
rgrect
[
CCHILDREN_TITLEBAR
+
1
]
;
}
;
#
endif
namespace
mozilla
{
namespace
widget
{
struct
MSGResult
{
LRESULT
&
mResult
;
bool
mConsumed
;
explicit
MSGResult
(
LRESULT
*
aResult
=
nullptr
)
:
mResult
(
aResult
?
*
aResult
:
mDefaultResult
)
mConsumed
(
false
)
{
}
private
:
LRESULT
mDefaultResult
;
}
;
}
}
#
define
NSRGB_2_COLOREF
(
color
)
\
RGB
(
NS_GET_R
(
color
)
NS_GET_G
(
color
)
NS_GET_B
(
color
)
)
#
define
COLOREF_2_NSRGB
(
color
)
\
NS_RGB
(
GetRValue
(
color
)
GetGValue
(
color
)
GetBValue
(
color
)
)
#
define
VERIFY_WINDOW_STYLE
(
s
)
\
NS_ASSERTION
(
(
(
s
)
&
(
WS_CHILD
|
WS_POPUP
)
)
!
=
(
WS_CHILD
|
WS_POPUP
)
\
"
WS_POPUP
and
WS_CHILD
are
mutually
exclusive
"
)
#
endif
