#
ifndef
nsAppShell_h__
#
define
nsAppShell_h__
#
include
"
nsBaseAppShell
.
h
"
#
include
<
windows
.
h
>
#
include
<
vector
>
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
define
NATIVE_EVENT_STARVATION_LIMIT
1
class
nsAppShell
:
public
nsBaseAppShell
{
public
:
nsAppShell
(
)
:
mEventWnd
(
nullptr
)
mNativeCallbackPending
(
false
)
mLastNativeEventScheduledMutex
(
"
nsAppShell
:
:
mLastNativeEventScheduledMutex
"
)
{
}
typedef
mozilla
:
:
TimeStamp
TimeStamp
;
typedef
mozilla
:
:
Mutex
Mutex
;
nsresult
Init
(
)
;
void
DoProcessMoreGeckoEvents
(
)
;
static
UINT
GetTaskbarButtonCreatedMessage
(
)
;
NS_IMETHOD
AfterProcessNextEvent
(
nsIThreadInternal
*
thread
bool
eventWasProcessed
)
final
;
protected
:
NS_IMETHOD
Run
(
)
override
;
NS_IMETHOD
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
override
;
virtual
void
ScheduleNativeEventCallback
(
)
;
virtual
bool
ProcessNextNativeEvent
(
bool
mayWait
)
;
virtual
~
nsAppShell
(
)
;
static
LRESULT
CALLBACK
EventWindowProc
(
HWND
UINT
WPARAM
LPARAM
)
;
protected
:
HWND
mEventWnd
;
bool
mNativeCallbackPending
;
Mutex
mLastNativeEventScheduledMutex
MOZ_UNANNOTATED
;
TimeStamp
mLastNativeEventScheduled
;
std
:
:
vector
<
MSG
>
mMsgsToRepost
;
private
:
wchar_t
mTimezoneName
[
128
]
;
}
;
#
endif
