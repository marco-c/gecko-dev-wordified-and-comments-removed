#
include
"
ScreenHelperWin
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
WinUtils
.
h
"
static
mozilla
:
:
LazyLogModule
sScreenLog
(
"
WidgetScreen
"
)
;
namespace
mozilla
{
namespace
widget
{
BOOL
CALLBACK
CollectMonitors
(
HMONITOR
aMon
HDC
LPRECT
LPARAM
ioParam
)
{
auto
screens
=
reinterpret_cast
<
nsTArray
<
RefPtr
<
Screen
>
>
*
>
(
ioParam
)
;
BOOL
success
=
FALSE
;
MONITORINFOEX
info
;
info
.
cbSize
=
sizeof
(
MONITORINFOEX
)
;
success
=
:
:
GetMonitorInfoW
(
aMon
&
info
)
;
if
(
!
success
)
{
MOZ_LOG
(
sScreenLog
LogLevel
:
:
Error
(
"
GetMonitorInfoW
failed
"
)
)
;
return
TRUE
;
}
double
scale
=
WinUtils
:
:
LogToPhysFactor
(
aMon
)
;
DesktopToLayoutDeviceScale
contentsScaleFactor
;
if
(
WinUtils
:
:
IsPerMonitorDPIAware
(
)
)
{
contentsScaleFactor
.
scale
=
1
.
0
;
}
else
{
contentsScaleFactor
.
scale
=
scale
;
}
CSSToLayoutDeviceScale
defaultCssScaleFactor
(
scale
)
;
LayoutDeviceIntRect
rect
(
info
.
rcMonitor
.
left
info
.
rcMonitor
.
top
info
.
rcMonitor
.
right
-
info
.
rcMonitor
.
left
info
.
rcMonitor
.
bottom
-
info
.
rcMonitor
.
top
)
;
LayoutDeviceIntRect
availRect
(
info
.
rcWork
.
left
info
.
rcWork
.
top
info
.
rcWork
.
right
-
info
.
rcWork
.
left
info
.
rcWork
.
bottom
-
info
.
rcWork
.
top
)
;
HDC
hDC
=
CreateDC
(
nullptr
info
.
szDevice
nullptr
nullptr
)
;
if
(
!
hDC
)
{
MOZ_LOG
(
sScreenLog
LogLevel
:
:
Error
(
"
CollectMonitors
CreateDC
failed
"
)
)
;
return
TRUE
;
}
uint32_t
pixelDepth
=
:
:
GetDeviceCaps
(
hDC
BITSPIXEL
)
;
DeleteDC
(
hDC
)
;
if
(
pixelDepth
=
=
32
)
{
pixelDepth
=
24
;
}
float
dpi
=
WinUtils
:
:
MonitorDPI
(
aMon
)
;
hal
:
:
ScreenOrientation
orientation
;
uint16_t
angle
;
WinUtils
:
:
GetDisplayOrientation
(
info
.
szDevice
orientation
angle
)
;
MOZ_LOG
(
sScreenLog
LogLevel
:
:
Debug
(
"
New
screen
[
%
s
(
%
s
)
%
d
%
f
%
f
%
f
%
d
%
d
]
"
ToString
(
rect
)
.
c_str
(
)
ToString
(
availRect
)
.
c_str
(
)
pixelDepth
contentsScaleFactor
.
scale
defaultCssScaleFactor
.
scale
dpi
orientation
angle
)
)
;
auto
screen
=
new
Screen
(
rect
availRect
pixelDepth
pixelDepth
contentsScaleFactor
defaultCssScaleFactor
dpi
orientation
angle
)
;
if
(
info
.
dwFlags
&
MONITORINFOF_PRIMARY
)
{
screens
-
>
InsertElementAt
(
0
std
:
:
move
(
screen
)
)
;
}
else
{
screens
-
>
AppendElement
(
std
:
:
move
(
screen
)
)
;
}
return
TRUE
;
}
void
ScreenHelperWin
:
:
RefreshScreens
(
)
{
MOZ_LOG
(
sScreenLog
LogLevel
:
:
Debug
(
"
Refreshing
screens
"
)
)
;
AutoTArray
<
RefPtr
<
Screen
>
4
>
screens
;
BOOL
result
=
:
:
EnumDisplayMonitors
(
nullptr
nullptr
(
MONITORENUMPROC
)
CollectMonitors
(
LPARAM
)
&
screens
)
;
if
(
!
result
)
{
NS_WARNING
(
"
Unable
to
EnumDisplayMonitors
"
)
;
}
ScreenManager
:
:
Refresh
(
std
:
:
move
(
screens
)
)
;
}
}
}
