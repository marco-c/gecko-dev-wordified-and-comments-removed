#
include
"
CompositorWidgetChild
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidgetVsyncObserver
.
h
"
#
include
"
nsBaseWidget
.
h
"
#
include
"
VsyncDispatcher
.
h
"
namespace
mozilla
{
namespace
widget
{
CompositorWidgetChild
:
:
CompositorWidgetChild
(
RefPtr
<
CompositorVsyncDispatcher
>
aVsyncDispatcher
RefPtr
<
CompositorWidgetVsyncObserver
>
aVsyncObserver
)
:
mVsyncDispatcher
(
aVsyncDispatcher
)
mVsyncObserver
(
aVsyncObserver
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
}
CompositorWidgetChild
:
:
~
CompositorWidgetChild
(
)
{
}
void
CompositorWidgetChild
:
:
EnterPresentLock
(
)
{
Unused
<
<
SendEnterPresentLock
(
)
;
}
void
CompositorWidgetChild
:
:
LeavePresentLock
(
)
{
Unused
<
<
SendLeavePresentLock
(
)
;
}
void
CompositorWidgetChild
:
:
OnDestroyWindow
(
)
{
}
void
CompositorWidgetChild
:
:
UpdateTransparency
(
nsTransparencyMode
aMode
)
{
Unused
<
<
SendUpdateTransparency
(
static_cast
<
int32_t
>
(
aMode
)
)
;
}
void
CompositorWidgetChild
:
:
ClearTransparentWindow
(
)
{
Unused
<
<
SendClearTransparentWindow
(
)
;
}
void
CompositorWidgetChild
:
:
ResizeTransparentWindow
(
const
gfx
:
:
IntSize
&
aSize
)
{
Unused
<
<
SendResizeTransparentWindow
(
aSize
)
;
}
HDC
CompositorWidgetChild
:
:
GetTransparentDC
(
)
const
{
return
nullptr
;
}
bool
CompositorWidgetChild
:
:
RecvObserveVsync
(
)
{
mVsyncDispatcher
-
>
SetCompositorVsyncObserver
(
mVsyncObserver
)
;
return
true
;
}
bool
CompositorWidgetChild
:
:
RecvUnobserveVsync
(
)
{
mVsyncDispatcher
-
>
SetCompositorVsyncObserver
(
nullptr
)
;
return
true
;
}
}
}
