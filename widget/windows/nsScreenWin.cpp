#
include
"
nsScreenWin
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
WinUtils
.
h
"
using
namespace
mozilla
;
static
uint32_t
sScreenId
;
nsScreenWin
:
:
nsScreenWin
(
HMONITOR
inScreen
)
:
mScreen
(
inScreen
)
mId
(
+
+
sScreenId
)
{
#
ifdef
DEBUG
HDC
hDCScreen
=
:
:
GetDC
(
nullptr
)
;
NS_ASSERTION
(
hDCScreen
"
GetDC
Failure
"
)
;
NS_ASSERTION
(
:
:
GetDeviceCaps
(
hDCScreen
TECHNOLOGY
)
=
=
DT_RASDISPLAY
"
Not
a
display
screen
"
)
;
:
:
ReleaseDC
(
nullptr
hDCScreen
)
;
#
endif
}
nsScreenWin
:
:
~
nsScreenWin
(
)
{
}
NS_IMETHODIMP
nsScreenWin
:
:
GetId
(
uint32_t
*
outId
)
{
*
outId
=
mId
;
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetRect
(
int32_t
*
outLeft
int32_t
*
outTop
int32_t
*
outWidth
int32_t
*
outHeight
)
{
BOOL
success
=
FALSE
;
if
(
mScreen
)
{
MONITORINFO
info
;
info
.
cbSize
=
sizeof
(
MONITORINFO
)
;
success
=
:
:
GetMonitorInfoW
(
mScreen
&
info
)
;
if
(
success
)
{
*
outLeft
=
info
.
rcMonitor
.
left
;
*
outTop
=
info
.
rcMonitor
.
top
;
*
outWidth
=
info
.
rcMonitor
.
right
-
info
.
rcMonitor
.
left
;
*
outHeight
=
info
.
rcMonitor
.
bottom
-
info
.
rcMonitor
.
top
;
}
}
if
(
!
success
)
{
HDC
hDCScreen
=
:
:
GetDC
(
nullptr
)
;
NS_ASSERTION
(
hDCScreen
"
GetDC
Failure
"
)
;
*
outTop
=
*
outLeft
=
0
;
*
outWidth
=
:
:
GetDeviceCaps
(
hDCScreen
HORZRES
)
;
*
outHeight
=
:
:
GetDeviceCaps
(
hDCScreen
VERTRES
)
;
:
:
ReleaseDC
(
nullptr
hDCScreen
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetAvailRect
(
int32_t
*
outLeft
int32_t
*
outTop
int32_t
*
outWidth
int32_t
*
outHeight
)
{
BOOL
success
=
FALSE
;
if
(
mScreen
)
{
MONITORINFO
info
;
info
.
cbSize
=
sizeof
(
MONITORINFO
)
;
success
=
:
:
GetMonitorInfoW
(
mScreen
&
info
)
;
if
(
success
)
{
*
outLeft
=
info
.
rcWork
.
left
;
*
outTop
=
info
.
rcWork
.
top
;
*
outWidth
=
info
.
rcWork
.
right
-
info
.
rcWork
.
left
;
*
outHeight
=
info
.
rcWork
.
bottom
-
info
.
rcWork
.
top
;
}
}
if
(
!
success
)
{
RECT
workArea
;
:
:
SystemParametersInfo
(
SPI_GETWORKAREA
0
&
workArea
0
)
;
*
outLeft
=
workArea
.
left
;
*
outTop
=
workArea
.
top
;
*
outWidth
=
workArea
.
right
-
workArea
.
left
;
*
outHeight
=
workArea
.
bottom
-
workArea
.
top
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetRectDisplayPix
(
int32_t
*
outLeft
int32_t
*
outTop
int32_t
*
outWidth
int32_t
*
outHeight
)
{
if
(
widget
:
:
WinUtils
:
:
IsPerMonitorDPIAware
(
)
)
{
return
GetRect
(
outLeft
outTop
outWidth
outHeight
)
;
}
int32_t
left
top
width
height
;
nsresult
rv
=
GetRect
(
&
left
&
top
&
width
&
height
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
double
scaleFactor
=
1
.
0
/
widget
:
:
WinUtils
:
:
LogToPhysFactor
(
mScreen
)
;
*
outLeft
=
NSToIntRound
(
left
*
scaleFactor
)
;
*
outTop
=
NSToIntRound
(
top
*
scaleFactor
)
;
*
outWidth
=
NSToIntRound
(
width
*
scaleFactor
)
;
*
outHeight
=
NSToIntRound
(
height
*
scaleFactor
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetAvailRectDisplayPix
(
int32_t
*
outLeft
int32_t
*
outTop
int32_t
*
outWidth
int32_t
*
outHeight
)
{
if
(
widget
:
:
WinUtils
:
:
IsPerMonitorDPIAware
(
)
)
{
return
GetAvailRect
(
outLeft
outTop
outWidth
outHeight
)
;
}
int32_t
left
top
width
height
;
nsresult
rv
=
GetAvailRect
(
&
left
&
top
&
width
&
height
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
double
scaleFactor
=
1
.
0
/
widget
:
:
WinUtils
:
:
LogToPhysFactor
(
mScreen
)
;
*
outLeft
=
NSToIntRound
(
left
*
scaleFactor
)
;
*
outTop
=
NSToIntRound
(
top
*
scaleFactor
)
;
*
outWidth
=
NSToIntRound
(
width
*
scaleFactor
)
;
*
outHeight
=
NSToIntRound
(
height
*
scaleFactor
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetPixelDepth
(
int32_t
*
aPixelDepth
)
{
HDC
hDCScreen
=
:
:
GetDC
(
nullptr
)
;
NS_ASSERTION
(
hDCScreen
"
GetDC
Failure
"
)
;
int32_t
depth
=
:
:
GetDeviceCaps
(
hDCScreen
BITSPIXEL
)
;
if
(
depth
=
=
32
)
{
depth
=
24
;
}
*
aPixelDepth
=
depth
;
:
:
ReleaseDC
(
nullptr
hDCScreen
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetColorDepth
(
int32_t
*
aColorDepth
)
{
return
GetPixelDepth
(
aColorDepth
)
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetContentsScaleFactor
(
double
*
aContentsScaleFactor
)
{
if
(
widget
:
:
WinUtils
:
:
IsPerMonitorDPIAware
(
)
)
{
*
aContentsScaleFactor
=
1
.
0
;
}
else
{
*
aContentsScaleFactor
=
widget
:
:
WinUtils
:
:
LogToPhysFactor
(
mScreen
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsScreenWin
:
:
GetDefaultCSSScaleFactor
(
double
*
aScaleFactor
)
{
double
scale
=
nsIWidget
:
:
DefaultScaleOverride
(
)
;
if
(
scale
>
0
.
0
)
{
*
aScaleFactor
=
scale
;
}
else
{
*
aScaleFactor
=
widget
:
:
WinUtils
:
:
LogToPhysFactor
(
mScreen
)
;
}
return
NS_OK
;
}
