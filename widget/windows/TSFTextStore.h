#
ifndef
TSFTextStore_h_
#
define
TSFTextStore_h_
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsWindowBase
.
h
"
#
include
"
WinUtils
.
h
"
#
include
"
WritingModes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
TextEventDispatcher
.
h
"
#
include
"
mozilla
/
TextRange
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
mozilla
/
widget
/
IMEData
.
h
"
#
include
<
msctf
.
h
>
#
include
<
textstor
.
h
>
#
ifdef
INPUTSCOPE_INIT_GUID
#
include
<
initguid
.
h
>
#
endif
#
ifdef
TEXTATTRS_INIT_GUID
#
include
<
tsattrs
.
h
>
#
endif
#
include
<
inputscope
.
h
>
#
define
IS_SEARCH
static_cast
<
InputScope
>
(
50
)
struct
ITfThreadMgr
;
struct
ITfDocumentMgr
;
struct
ITfDisplayAttributeMgr
;
struct
ITfCategoryMgr
;
class
nsWindow
;
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
TS_SELECTIONSTYLE
&
aSelectionStyle
)
{
const
char
*
ase
=
"
Unknown
"
;
switch
(
aSelectionStyle
.
ase
)
{
case
TS_AE_START
:
ase
=
"
TS_AE_START
"
;
break
;
case
TS_AE_END
:
ase
=
"
TS_AE_END
"
;
break
;
case
TS_AE_NONE
:
ase
=
"
TS_AE_NONE
"
;
break
;
}
aStream
<
<
"
{
ase
=
"
<
<
ase
<
<
"
fInterimChar
=
"
<
<
(
aSelectionStyle
.
fInterimChar
?
"
TRUE
"
:
"
FALSE
"
)
<
<
"
}
"
;
return
aStream
;
}
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
TS_SELECTION_ACP
&
aACP
)
{
aStream
<
<
"
{
acpStart
=
"
<
<
aACP
.
acpStart
<
<
"
acpEnd
=
"
<
<
aACP
.
acpEnd
<
<
"
style
=
"
<
<
mozilla
:
:
ToString
(
aACP
.
style
)
.
c_str
(
)
<
<
"
}
"
;
return
aStream
;
}
namespace
mozilla
{
namespace
widget
{
class
TSFStaticSink
;
struct
MSGResult
;
class
TSFTextStore
final
:
public
ITextStoreACP
public
ITfContextOwnerCompositionSink
public
ITfMouseTrackerACP
{
friend
class
TSFStaticSink
;
private
:
typedef
IMENotification
:
:
SelectionChangeDataBase
SelectionChangeDataBase
;
typedef
IMENotification
:
:
SelectionChangeData
SelectionChangeData
;
typedef
IMENotification
:
:
TextChangeDataBase
TextChangeDataBase
;
typedef
IMENotification
:
:
TextChangeData
TextChangeData
;
public
:
STDMETHODIMP
QueryInterface
(
REFIID
void
*
*
)
;
NS_INLINE_DECL_IUNKNOWN_REFCOUNTING
(
TSFTextStore
)
public
:
STDMETHODIMP
AdviseSink
(
REFIID
IUnknown
*
DWORD
)
;
STDMETHODIMP
UnadviseSink
(
IUnknown
*
)
;
STDMETHODIMP
RequestLock
(
DWORD
HRESULT
*
)
;
STDMETHODIMP
GetStatus
(
TS_STATUS
*
)
;
STDMETHODIMP
QueryInsert
(
LONG
LONG
ULONG
LONG
*
LONG
*
)
;
STDMETHODIMP
GetSelection
(
ULONG
ULONG
TS_SELECTION_ACP
*
ULONG
*
)
;
STDMETHODIMP
SetSelection
(
ULONG
const
TS_SELECTION_ACP
*
)
;
STDMETHODIMP
GetText
(
LONG
LONG
WCHAR
*
ULONG
ULONG
*
TS_RUNINFO
*
ULONG
ULONG
*
LONG
*
)
;
STDMETHODIMP
SetText
(
DWORD
LONG
LONG
const
WCHAR
*
ULONG
TS_TEXTCHANGE
*
)
;
STDMETHODIMP
GetFormattedText
(
LONG
LONG
IDataObject
*
*
)
;
STDMETHODIMP
GetEmbedded
(
LONG
REFGUID
REFIID
IUnknown
*
*
)
;
STDMETHODIMP
QueryInsertEmbedded
(
const
GUID
*
const
FORMATETC
*
BOOL
*
)
;
STDMETHODIMP
InsertEmbedded
(
DWORD
LONG
LONG
IDataObject
*
TS_TEXTCHANGE
*
)
;
STDMETHODIMP
RequestSupportedAttrs
(
DWORD
ULONG
const
TS_ATTRID
*
)
;
STDMETHODIMP
RequestAttrsAtPosition
(
LONG
ULONG
const
TS_ATTRID
*
DWORD
)
;
STDMETHODIMP
RequestAttrsTransitioningAtPosition
(
LONG
ULONG
const
TS_ATTRID
*
DWORD
)
;
STDMETHODIMP
FindNextAttrTransition
(
LONG
LONG
ULONG
const
TS_ATTRID
*
DWORD
LONG
*
BOOL
*
LONG
*
)
;
STDMETHODIMP
RetrieveRequestedAttrs
(
ULONG
TS_ATTRVAL
*
ULONG
*
)
;
STDMETHODIMP
GetEndACP
(
LONG
*
)
;
STDMETHODIMP
GetActiveView
(
TsViewCookie
*
)
;
STDMETHODIMP
GetACPFromPoint
(
TsViewCookie
const
POINT
*
DWORD
LONG
*
)
;
STDMETHODIMP
GetTextExt
(
TsViewCookie
LONG
LONG
RECT
*
BOOL
*
)
;
STDMETHODIMP
GetScreenExt
(
TsViewCookie
RECT
*
)
;
STDMETHODIMP
GetWnd
(
TsViewCookie
HWND
*
)
;
STDMETHODIMP
InsertTextAtSelection
(
DWORD
const
WCHAR
*
ULONG
LONG
*
LONG
*
TS_TEXTCHANGE
*
)
;
STDMETHODIMP
InsertEmbeddedAtSelection
(
DWORD
IDataObject
*
LONG
*
LONG
*
TS_TEXTCHANGE
*
)
;
public
:
STDMETHODIMP
OnStartComposition
(
ITfCompositionView
*
BOOL
*
)
;
STDMETHODIMP
OnUpdateComposition
(
ITfCompositionView
*
ITfRange
*
)
;
STDMETHODIMP
OnEndComposition
(
ITfCompositionView
*
)
;
public
:
STDMETHODIMP
AdviseMouseSink
(
ITfRangeACP
*
ITfMouseSink
*
DWORD
*
)
;
STDMETHODIMP
UnadviseMouseSink
(
DWORD
)
;
public
:
static
void
Initialize
(
void
)
;
static
void
Terminate
(
void
)
;
static
bool
ProcessRawKeyMessage
(
const
MSG
&
aMsg
)
;
static
void
ProcessMessage
(
nsWindowBase
*
aWindow
UINT
aMessage
WPARAM
&
aWParam
LPARAM
&
aLParam
MSGResult
&
aResult
)
;
static
void
SetIMEOpenState
(
bool
)
;
static
bool
GetIMEOpenState
(
void
)
;
static
void
CommitComposition
(
bool
aDiscard
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
textStore
-
>
CommitCompositionInternal
(
aDiscard
)
;
}
static
void
SetInputContext
(
nsWindowBase
*
aWidget
const
InputContext
&
aContext
const
InputContextAction
&
aAction
)
;
static
nsresult
OnFocusChange
(
bool
aGotFocus
nsWindowBase
*
aFocusedWidget
const
InputContext
&
aContext
)
;
static
nsresult
OnTextChange
(
const
IMENotification
&
aIMENotification
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
NS_OK
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
return
textStore
-
>
OnTextChangeInternal
(
aIMENotification
)
;
}
static
nsresult
OnSelectionChange
(
const
IMENotification
&
aIMENotification
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
NS_OK
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
return
textStore
-
>
OnSelectionChangeInternal
(
aIMENotification
)
;
}
static
nsresult
OnLayoutChange
(
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
NS_OK
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
return
textStore
-
>
OnLayoutChangeInternal
(
)
;
}
static
nsresult
OnUpdateComposition
(
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
NS_OK
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
return
textStore
-
>
OnUpdateCompositionInternal
(
)
;
}
static
nsresult
OnMouseButtonEvent
(
const
IMENotification
&
aIMENotification
)
{
NS_ASSERTION
(
IsInTSFMode
(
)
"
Not
in
TSF
mode
shouldn
'
t
be
called
"
)
;
if
(
!
sEnabledTextStore
)
{
return
NS_OK
;
}
RefPtr
<
TSFTextStore
>
textStore
(
sEnabledTextStore
)
;
return
textStore
-
>
OnMouseButtonEventInternal
(
aIMENotification
)
;
}
static
IMENotificationRequests
GetIMENotificationRequests
(
)
;
static
void
*
GetNativeData
(
uint32_t
aDataType
)
{
switch
(
aDataType
)
{
case
NS_NATIVE_TSF_THREAD_MGR
:
Initialize
(
)
;
return
static_cast
<
void
*
>
(
&
sThreadMgr
)
;
case
NS_NATIVE_TSF_CATEGORY_MGR
:
return
static_cast
<
void
*
>
(
&
sCategoryMgr
)
;
case
NS_NATIVE_TSF_DISPLAY_ATTR_MGR
:
return
static_cast
<
void
*
>
(
&
sDisplayAttrMgr
)
;
default
:
return
nullptr
;
}
}
static
void
*
GetThreadManager
(
)
{
return
static_cast
<
void
*
>
(
sThreadMgr
)
;
}
static
bool
ThinksHavingFocus
(
)
{
return
(
sEnabledTextStore
&
&
sEnabledTextStore
-
>
mContext
)
;
}
static
bool
IsInTSFMode
(
)
{
return
sThreadMgr
!
=
nullptr
;
}
static
bool
IsComposing
(
)
{
return
(
sEnabledTextStore
&
&
sEnabledTextStore
-
>
mComposition
.
isSome
(
)
)
;
}
static
bool
IsComposingOn
(
nsWindowBase
*
aWidget
)
{
return
(
IsComposing
(
)
&
&
sEnabledTextStore
-
>
mWidget
=
=
aWidget
)
;
}
static
nsWindowBase
*
GetEnabledWindowBase
(
)
{
return
sEnabledTextStore
?
sEnabledTextStore
-
>
mWidget
.
get
(
)
:
nullptr
;
}
static
bool
IsIMM_IMEActive
(
)
;
static
bool
IsMSJapaneseIMEActive
(
)
;
static
bool
IsGoogleJapaneseInputActive
(
)
;
static
bool
IsATOKActive
(
)
;
static
bool
ShouldSetInputScopeOfURLBarToDefault
(
)
;
static
bool
DoNotReturnErrorFromGetSelection
(
)
;
#
ifdef
DEBUG
static
bool
CurrentKeyboardLayoutHasIME
(
)
;
#
endif
protected
:
TSFTextStore
(
)
;
~
TSFTextStore
(
)
;
static
bool
CreateAndSetFocus
(
nsWindowBase
*
aFocusedWidget
const
InputContext
&
aContext
)
;
static
void
EnsureToDestroyAndReleaseEnabledTextStoreIf
(
RefPtr
<
TSFTextStore
>
&
aTextStore
)
;
static
void
MarkContextAsKeyboardDisabled
(
ITfContext
*
aContext
)
;
static
void
MarkContextAsEmpty
(
ITfContext
*
aContext
)
;
bool
Init
(
nsWindowBase
*
aWidget
const
InputContext
&
aContext
)
;
void
Destroy
(
)
;
void
ReleaseTSFObjects
(
)
;
bool
IsReadLock
(
DWORD
aLock
)
const
{
return
(
TS_LF_READ
=
=
(
aLock
&
TS_LF_READ
)
)
;
}
bool
IsReadWriteLock
(
DWORD
aLock
)
const
{
return
(
TS_LF_READWRITE
=
=
(
aLock
&
TS_LF_READWRITE
)
)
;
}
bool
IsReadLocked
(
)
const
{
return
IsReadLock
(
mLock
)
;
}
bool
IsReadWriteLocked
(
)
const
{
return
IsReadWriteLock
(
mLock
)
;
}
void
DidLockGranted
(
)
;
bool
GetScreenExtInternal
(
RECT
&
aScreenExt
)
;
HRESULT
SetSelectionInternal
(
const
TS_SELECTION_ACP
*
bool
aDispatchCompositionChangeEvent
=
false
)
;
bool
InsertTextAtSelectionInternal
(
const
nsAString
&
aInsertStr
TS_TEXTCHANGE
*
aTextChange
)
;
void
CommitCompositionInternal
(
bool
)
;
HRESULT
GetDisplayAttribute
(
ITfProperty
*
aProperty
ITfRange
*
aRange
TF_DISPLAYATTRIBUTE
*
aResult
)
;
HRESULT
RestartCompositionIfNecessary
(
ITfRange
*
pRangeNew
=
nullptr
)
;
class
Composition
;
HRESULT
RestartComposition
(
Composition
&
aCurrentComposition
ITfCompositionView
*
aCompositionView
ITfRange
*
aNewRange
)
;
HRESULT
RecordCompositionStartAction
(
ITfCompositionView
*
aCompositionView
ITfRange
*
aRange
bool
aPreserveSelection
)
;
HRESULT
RecordCompositionStartAction
(
ITfCompositionView
*
aCompositionView
LONG
aStart
LONG
aLength
bool
aPreserveSelection
)
;
HRESULT
RecordCompositionUpdateAction
(
)
;
HRESULT
RecordCompositionEndAction
(
)
;
void
DispatchEvent
(
WidgetGUIEvent
&
aEvent
)
;
void
OnLayoutInformationAvaliable
(
)
;
void
FlushPendingActions
(
)
;
void
MaybeFlushPendingNotifications
(
)
;
nsresult
OnTextChangeInternal
(
const
IMENotification
&
aIMENotification
)
;
nsresult
OnSelectionChangeInternal
(
const
IMENotification
&
aIMENotification
)
;
nsresult
OnMouseButtonEventInternal
(
const
IMENotification
&
aIMENotification
)
;
nsresult
OnLayoutChangeInternal
(
)
;
nsresult
OnUpdateCompositionInternal
(
)
;
SelectionChangeData
mPendingSelectionChangeData
;
TextChangeData
mPendingTextChangeData
;
void
NotifyTSFOfTextChange
(
)
;
void
NotifyTSFOfSelectionChange
(
)
;
bool
NotifyTSFOfLayoutChange
(
)
;
void
NotifyTSFOfLayoutChangeAgain
(
)
;
HRESULT
HandleRequestAttrs
(
DWORD
aFlags
ULONG
aFilterCount
const
TS_ATTRID
*
aFilterAttrs
)
;
void
SetInputScope
(
const
nsString
&
aHTMLInputType
const
nsString
&
aHTMLInputInputmode
bool
aInPrivateBrowsing
)
;
void
CreateNativeCaret
(
)
;
void
MaybeDestroyNativeCaret
(
)
;
bool
MaybeHackNoErrorLayoutBugs
(
LONG
&
aACPStart
LONG
&
aACPEnd
)
;
RefPtr
<
nsWindowBase
>
mWidget
;
RefPtr
<
TextEventDispatcher
>
mDispatcher
;
RefPtr
<
ITfDocumentMgr
>
mDocumentMgr
;
DWORD
mEditCookie
;
RefPtr
<
ITfContext
>
mContext
;
RefPtr
<
ITextStoreACPSink
>
mSink
;
DWORD
mSinkMask
;
DWORD
mLock
;
DWORD
mLockQueued
;
uint32_t
mHandlingKeyMessage
;
void
OnStartToHandleKeyMessage
(
)
{
if
(
!
mDestroyed
&
&
sHandlingKeyMsg
&
&
!
sIsKeyboardEventDispatched
)
{
MaybeDispatchKeyboardEventAsProcessedByIME
(
)
;
}
+
+
mHandlingKeyMessage
;
}
void
OnEndHandlingKeyMessage
(
bool
aIsProcessedByTSF
)
{
if
(
!
mDestroyed
&
&
sHandlingKeyMsg
&
&
aIsProcessedByTSF
&
&
!
sIsKeyboardEventDispatched
)
{
MaybeDispatchKeyboardEventAsProcessedByIME
(
)
;
}
MOZ_ASSERT
(
mHandlingKeyMessage
)
;
if
(
-
-
mHandlingKeyMessage
)
{
return
;
}
if
(
mDestroyed
)
{
ReleaseTSFObjects
(
)
;
}
}
void
MaybeDispatchKeyboardEventAsProcessedByIME
(
)
;
void
DispatchKeyboardEventAsProcessedByIME
(
const
MSG
&
aMsg
)
;
class
Composition
final
:
public
OffsetAndData
<
LONG
>
{
public
:
explicit
Composition
(
ITfCompositionView
*
aCompositionView
LONG
aCompositionStartOffset
const
nsAString
&
aCompositionString
)
:
OffsetAndData
<
LONG
>
(
aCompositionStartOffset
aCompositionString
)
mView
(
aCompositionView
)
{
}
ITfCompositionView
*
GetView
(
)
const
{
return
mView
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
Composition
&
aComposition
)
{
aStream
<
<
"
{
mView
=
0x
"
<
<
aComposition
.
mView
.
get
(
)
<
<
"
OffsetAndData
<
LONG
>
=
"
<
<
static_cast
<
const
OffsetAndData
<
LONG
>
&
>
(
aComposition
)
<
<
"
}
"
;
return
aStream
;
}
private
:
RefPtr
<
ITfCompositionView
>
const
mView
;
}
;
Maybe
<
Composition
>
mComposition
;
bool
IsHandlingCompositionInParent
(
)
const
{
return
mDispatcher
&
&
mDispatcher
-
>
IsComposing
(
)
;
}
bool
IsHandlingCompositionInContent
(
)
const
{
return
mDispatcher
&
&
mDispatcher
-
>
IsHandlingComposition
(
)
;
}
class
Selection
{
public
:
const
TS_SELECTION_ACP
&
ACPRef
(
)
const
{
return
mACP
;
}
explicit
Selection
(
const
TS_SELECTION_ACP
&
aSelection
)
{
SetSelection
(
aSelection
)
;
}
explicit
Selection
(
uint32_t
aOffsetToCollapse
)
{
Collapse
(
aOffsetToCollapse
)
;
}
explicit
Selection
(
uint32_t
aStart
uint32_t
aLength
bool
aReversed
const
WritingMode
&
aWritingMode
)
{
SetSelection
(
aStart
aLength
aReversed
aWritingMode
)
;
}
void
SetSelection
(
const
TS_SELECTION_ACP
&
aSelection
)
{
mACP
=
aSelection
;
if
(
mACP
.
style
.
ase
!
=
TS_AE_START
)
{
mACP
.
style
.
ase
=
TS_AE_END
;
}
mACP
.
style
.
fInterimChar
=
FALSE
;
}
bool
SetSelection
(
uint32_t
aStart
uint32_t
aLength
bool
aReversed
const
WritingMode
&
aWritingMode
)
{
bool
changed
=
mACP
.
acpStart
!
=
static_cast
<
LONG
>
(
aStart
)
|
|
mACP
.
acpEnd
!
=
static_cast
<
LONG
>
(
aStart
+
aLength
)
;
mACP
.
acpStart
=
static_cast
<
LONG
>
(
aStart
)
;
mACP
.
acpEnd
=
static_cast
<
LONG
>
(
aStart
+
aLength
)
;
mACP
.
style
.
ase
=
aReversed
?
TS_AE_START
:
TS_AE_END
;
mACP
.
style
.
fInterimChar
=
FALSE
;
mWritingMode
=
aWritingMode
;
return
changed
;
}
bool
Collapsed
(
)
const
{
return
mACP
.
acpStart
=
=
mACP
.
acpEnd
;
}
void
Collapse
(
uint32_t
aOffset
)
{
mACP
.
acpStart
=
mACP
.
acpEnd
=
static_cast
<
LONG
>
(
aOffset
)
;
mACP
.
style
.
ase
=
TS_AE_END
;
mACP
.
style
.
fInterimChar
=
FALSE
;
}
LONG
MinOffset
(
)
const
{
LONG
min
=
std
:
:
min
(
mACP
.
acpStart
mACP
.
acpEnd
)
;
MOZ_ASSERT
(
min
>
=
0
)
;
return
min
;
}
LONG
MaxOffset
(
)
const
{
LONG
max
=
std
:
:
max
(
mACP
.
acpStart
mACP
.
acpEnd
)
;
MOZ_ASSERT
(
max
>
=
0
)
;
return
max
;
}
LONG
StartOffset
(
)
const
{
MOZ_ASSERT
(
mACP
.
acpStart
>
=
0
)
;
return
mACP
.
acpStart
;
}
LONG
EndOffset
(
)
const
{
MOZ_ASSERT
(
mACP
.
acpEnd
>
=
0
)
;
return
mACP
.
acpEnd
;
}
LONG
Length
(
)
const
{
MOZ_ASSERT
(
mACP
.
acpEnd
>
=
mACP
.
acpStart
)
;
return
std
:
:
abs
(
mACP
.
acpEnd
-
mACP
.
acpStart
)
;
}
bool
IsReversed
(
)
const
{
return
mACP
.
style
.
ase
=
=
TS_AE_START
;
}
TsActiveSelEnd
ActiveSelEnd
(
)
const
{
return
mACP
.
style
.
ase
;
}
bool
IsInterimChar
(
)
const
{
return
mACP
.
style
.
fInterimChar
!
=
FALSE
;
}
WritingMode
GetWritingMode
(
)
const
{
return
mWritingMode
;
}
bool
EqualsExceptDirection
(
const
TS_SELECTION_ACP
&
aACP
)
const
{
if
(
mACP
.
style
.
ase
=
=
aACP
.
style
.
ase
)
{
return
mACP
.
acpStart
=
=
aACP
.
acpStart
&
&
mACP
.
acpEnd
=
=
aACP
.
acpEnd
;
}
return
mACP
.
acpStart
=
=
aACP
.
acpEnd
&
&
mACP
.
acpEnd
=
=
aACP
.
acpStart
;
}
bool
EqualsExceptDirection
(
const
SelectionChangeDataBase
&
aChangedSelection
)
const
{
MOZ_ASSERT
(
aChangedSelection
.
IsValid
(
)
)
;
return
aChangedSelection
.
Length
(
)
=
=
static_cast
<
uint32_t
>
(
Length
(
)
)
&
&
aChangedSelection
.
mOffset
=
=
static_cast
<
uint32_t
>
(
StartOffset
(
)
)
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
Selection
&
aSelection
)
{
aStream
<
<
"
{
mACP
=
"
<
<
ToString
(
aSelection
.
mACP
)
.
c_str
(
)
<
<
"
mWritingMode
=
"
<
<
ToString
(
aSelection
.
mWritingMode
)
.
c_str
(
)
<
<
"
Collapsed
(
)
=
"
<
<
(
aSelection
.
Collapsed
(
)
?
"
true
"
:
"
false
"
)
<
<
"
Length
=
"
<
<
aSelection
.
Length
(
)
<
<
"
}
"
;
return
aStream
;
}
private
:
TS_SELECTION_ACP
mACP
;
WritingMode
mWritingMode
;
}
;
Maybe
<
Selection
>
mSelectionForTSF
;
Maybe
<
Selection
>
&
SelectionForTSF
(
)
;
struct
PendingAction
final
{
enum
class
Type
:
uint8_t
{
eCompositionStart
eCompositionUpdate
eCompositionEnd
eSetSelection
eKeyboardEvent
}
;
Type
mType
;
LONG
mSelectionStart
;
LONG
mSelectionLength
;
nsString
mData
;
RefPtr
<
TextRangeArray
>
mRanges
;
MSG
mKeyMsg
;
bool
mSelectionReversed
;
bool
mIncomplete
;
bool
mAdjustSelection
;
}
;
nsTArray
<
PendingAction
>
mPendingActions
;
PendingAction
*
LastOrNewPendingCompositionUpdate
(
)
{
if
(
!
mPendingActions
.
IsEmpty
(
)
)
{
PendingAction
&
lastAction
=
mPendingActions
.
LastElement
(
)
;
if
(
lastAction
.
mType
=
=
PendingAction
:
:
Type
:
:
eCompositionUpdate
)
{
return
&
lastAction
;
}
}
PendingAction
*
newAction
=
mPendingActions
.
AppendElement
(
)
;
newAction
-
>
mType
=
PendingAction
:
:
Type
:
:
eCompositionUpdate
;
newAction
-
>
mRanges
=
new
TextRangeArray
(
)
;
newAction
-
>
mIncomplete
=
true
;
return
newAction
;
}
bool
IsLastPendingActionCompositionEndAt
(
LONG
aStart
LONG
aLength
)
const
{
if
(
mPendingActions
.
IsEmpty
(
)
)
{
return
false
;
}
const
PendingAction
&
pendingLastAction
=
mPendingActions
.
LastElement
(
)
;
return
pendingLastAction
.
mType
=
=
PendingAction
:
:
Type
:
:
eCompositionEnd
&
&
pendingLastAction
.
mSelectionStart
=
=
aStart
&
&
pendingLastAction
.
mData
.
Length
(
)
=
=
static_cast
<
ULONG
>
(
aLength
)
;
}
bool
IsPendingCompositionUpdateIncomplete
(
)
const
{
if
(
mPendingActions
.
IsEmpty
(
)
)
{
return
false
;
}
const
PendingAction
&
lastAction
=
mPendingActions
.
LastElement
(
)
;
return
lastAction
.
mType
=
=
PendingAction
:
:
Type
:
:
eCompositionUpdate
&
&
lastAction
.
mIncomplete
;
}
void
CompleteLastActionIfStillIncomplete
(
)
{
if
(
!
IsPendingCompositionUpdateIncomplete
(
)
)
{
return
;
}
RecordCompositionUpdateAction
(
)
;
}
void
RemoveLastCompositionUpdateActions
(
)
{
while
(
!
mPendingActions
.
IsEmpty
(
)
)
{
const
PendingAction
&
lastAction
=
mPendingActions
.
LastElement
(
)
;
if
(
lastAction
.
mType
!
=
PendingAction
:
:
Type
:
:
eCompositionUpdate
)
{
break
;
}
mPendingActions
.
RemoveLastElement
(
)
;
}
}
class
MOZ_STACK_CLASS
AutoPendingActionAndContentFlusher
final
{
public
:
explicit
AutoPendingActionAndContentFlusher
(
TSFTextStore
*
aTextStore
)
:
mTextStore
(
aTextStore
)
{
MOZ_ASSERT
(
!
mTextStore
-
>
mIsRecordingActionsWithoutLock
)
;
if
(
!
mTextStore
-
>
IsReadWriteLocked
(
)
)
{
mTextStore
-
>
mIsRecordingActionsWithoutLock
=
true
;
}
}
~
AutoPendingActionAndContentFlusher
(
)
{
if
(
!
mTextStore
-
>
mIsRecordingActionsWithoutLock
)
{
return
;
}
mTextStore
-
>
FlushPendingActions
(
)
;
mTextStore
-
>
mIsRecordingActionsWithoutLock
=
false
;
}
private
:
AutoPendingActionAndContentFlusher
(
)
{
}
RefPtr
<
TSFTextStore
>
mTextStore
;
}
;
class
Content
final
{
public
:
Content
(
TSFTextStore
&
aTSFTextStore
const
nsAString
&
aText
)
:
mText
(
aText
)
mLastComposition
(
aTSFTextStore
.
mComposition
)
mComposition
(
aTSFTextStore
.
mComposition
)
mSelection
(
aTSFTextStore
.
mSelectionForTSF
)
{
}
void
OnLayoutChanged
(
)
{
mMinModifiedOffset
.
reset
(
)
;
}
void
OnCompositionEventsHandled
(
)
{
mLastComposition
=
mComposition
;
}
const
nsDependentSubstring
GetSelectedText
(
)
const
;
const
nsDependentSubstring
GetSubstring
(
uint32_t
aStart
uint32_t
aLength
)
const
;
void
ReplaceSelectedTextWith
(
const
nsAString
&
aString
)
;
void
ReplaceTextWith
(
LONG
aStart
LONG
aLength
const
nsAString
&
aString
)
;
void
StartComposition
(
ITfCompositionView
*
aCompositionView
const
PendingAction
&
aCompStart
bool
aPreserveSelection
)
;
void
RestoreCommittedComposition
(
ITfCompositionView
*
aCompositionView
const
PendingAction
&
aCanceledCompositionEnd
)
;
void
EndComposition
(
const
PendingAction
&
aCompEnd
)
;
const
nsString
&
TextRef
(
)
const
{
return
mText
;
}
const
Maybe
<
OffsetAndData
<
LONG
>
>
&
LastComposition
(
)
const
{
return
mLastComposition
;
}
const
Maybe
<
uint32_t
>
&
MinModifiedOffset
(
)
const
{
return
mMinModifiedOffset
;
}
const
Maybe
<
StartAndEndOffsets
<
LONG
>
>
&
LatestCompositionRange
(
)
const
{
return
mLatestCompositionRange
;
}
bool
IsLayoutChangedAt
(
uint32_t
aOffset
)
const
{
return
IsLayoutChanged
(
)
&
&
(
mMinModifiedOffset
.
value
(
)
<
=
aOffset
)
;
}
bool
IsLayoutChanged
(
)
const
{
return
mMinModifiedOffset
.
isSome
(
)
;
}
bool
HasOrHadComposition
(
)
const
{
return
mLatestCompositionRange
.
isSome
(
)
;
}
Maybe
<
TSFTextStore
:
:
Composition
>
&
Composition
(
)
{
return
mComposition
;
}
Maybe
<
TSFTextStore
:
:
Selection
>
&
Selection
(
)
{
return
mSelection
;
}
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aStream
const
Content
&
aContent
)
{
aStream
<
<
"
{
mText
=
"
<
<
PrintStringDetail
(
aContent
.
mText
PrintStringDetail
:
:
kMaxLengthForEditor
)
.
get
(
)
<
<
"
mLastComposition
=
"
<
<
aContent
.
mLastComposition
<
<
"
mLatestCompositionRange
=
"
<
<
aContent
.
mLatestCompositionRange
<
<
"
mMinModifiedOffset
=
"
<
<
aContent
.
mMinModifiedOffset
<
<
"
}
"
;
return
aStream
;
}
private
:
nsString
mText
;
Maybe
<
OffsetAndData
<
LONG
>
>
mLastComposition
;
Maybe
<
TSFTextStore
:
:
Composition
>
&
mComposition
;
Maybe
<
TSFTextStore
:
:
Selection
>
&
mSelection
;
Maybe
<
StartAndEndOffsets
<
LONG
>
>
mLatestCompositionRange
;
Maybe
<
uint32_t
>
mMinModifiedOffset
;
}
;
Maybe
<
Content
>
mContentForTSF
;
Maybe
<
Content
>
&
ContentForTSF
(
)
;
bool
CanAccessActualContentDirectly
(
)
const
;
bool
GetCurrentText
(
nsAString
&
aTextContent
)
;
class
MouseTracker
final
{
public
:
static
const
DWORD
kInvalidCookie
=
static_cast
<
DWORD
>
(
-
1
)
;
MouseTracker
(
)
;
HRESULT
Init
(
TSFTextStore
*
aTextStore
)
;
HRESULT
AdviseSink
(
TSFTextStore
*
aTextStore
ITfRangeACP
*
aTextRange
ITfMouseSink
*
aMouseSink
)
;
void
UnadviseSink
(
)
;
bool
IsUsing
(
)
const
{
return
mSink
!
=
nullptr
;
}
DWORD
Cookie
(
)
const
{
return
mCookie
;
}
bool
OnMouseButtonEvent
(
ULONG
aEdge
ULONG
aQuadrant
DWORD
aButtonStatus
)
;
const
Maybe
<
StartAndEndOffsets
<
LONG
>
>
Range
(
)
const
{
return
mRange
;
}
private
:
RefPtr
<
ITfMouseSink
>
mSink
;
Maybe
<
StartAndEndOffsets
<
LONG
>
>
mRange
;
DWORD
mCookie
;
}
;
nsTArray
<
MouseTracker
>
mMouseTrackers
;
nsTArray
<
InputScope
>
mInputScopes
;
enum
{
eNotSupported
=
-
1
eInputScope
=
0
eTextVerticalWriting
eTextOrientation
NUM_OF_SUPPORTED_ATTRS
}
;
bool
mRequestedAttrs
[
NUM_OF_SUPPORTED_ATTRS
]
;
int32_t
GetRequestedAttrIndex
(
const
TS_ATTRID
&
aAttrID
)
;
TS_ATTRID
GetAttrID
(
int32_t
aIndex
)
;
bool
mRequestedAttrValues
;
bool
mIsRecordingActionsWithoutLock
;
bool
mHasReturnedNoLayoutError
;
bool
mWaitingQueryLayout
;
bool
mPendingDestroy
;
bool
mDeferClearingContentForTSF
;
bool
mDeferNotifyingTSF
;
bool
mDeferCommittingComposition
;
bool
mDeferCancellingComposition
;
bool
mDestroyed
;
bool
mBeingDestroyed
;
static
StaticRefPtr
<
ITfThreadMgr
>
sThreadMgr
;
static
already_AddRefed
<
ITfThreadMgr
>
GetThreadMgr
(
)
;
static
StaticRefPtr
<
ITfMessagePump
>
sMessagePump
;
public
:
static
already_AddRefed
<
ITfMessagePump
>
GetMessagePump
(
)
;
private
:
static
StaticRefPtr
<
ITfKeystrokeMgr
>
sKeystrokeMgr
;
static
StaticRefPtr
<
ITfDisplayAttributeMgr
>
sDisplayAttrMgr
;
static
already_AddRefed
<
ITfDisplayAttributeMgr
>
GetDisplayAttributeMgr
(
)
;
static
StaticRefPtr
<
ITfCategoryMgr
>
sCategoryMgr
;
static
already_AddRefed
<
ITfCategoryMgr
>
GetCategoryMgr
(
)
;
static
StaticRefPtr
<
ITfCompartment
>
sCompartmentForOpenClose
;
static
already_AddRefed
<
ITfCompartment
>
GetCompartmentForOpenClose
(
)
;
static
StaticRefPtr
<
TSFTextStore
>
sEnabledTextStore
;
static
StaticRefPtr
<
ITfDocumentMgr
>
sDisabledDocumentMgr
;
static
StaticRefPtr
<
ITfContext
>
sDisabledContext
;
static
StaticRefPtr
<
ITfInputProcessorProfiles
>
sInputProcessorProfiles
;
static
already_AddRefed
<
ITfInputProcessorProfiles
>
GetInputProcessorProfiles
(
)
;
static
const
MSG
*
sHandlingKeyMsg
;
static
DWORD
sClientId
;
static
bool
sIsKeyboardEventDispatched
;
}
;
}
}
#
endif
