#
include
"
OSKTabTipManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
WinUtils
.
h
"
#
include
<
shellapi
.
h
>
#
include
<
shlobj
.
h
>
#
include
<
windows
.
h
>
namespace
mozilla
{
namespace
widget
{
static
HWND
GetOnScreenKeyboardWindow
(
)
{
const
wchar_t
kOSKClassName
[
]
=
L
"
IPTip_Main_Window
"
;
HWND
osk
=
:
:
FindWindowW
(
kOSKClassName
nullptr
)
;
if
(
:
:
IsWindow
(
osk
)
&
&
:
:
IsWindowEnabled
(
osk
)
&
&
:
:
IsWindowVisible
(
osk
)
)
{
return
osk
;
}
return
nullptr
;
}
void
OSKTabTipManager
:
:
ShowOnScreenKeyboard
(
)
{
const
char
*
kOskPathPrefName
=
"
ui
.
osk
.
on_screen_keyboard_path
"
;
if
(
GetOnScreenKeyboardWindow
(
)
)
{
return
;
}
nsAutoString
cachedPath
;
nsresult
result
=
Preferences
:
:
GetString
(
kOskPathPrefName
cachedPath
)
;
if
(
NS_FAILED
(
result
)
|
|
cachedPath
.
IsEmpty
(
)
)
{
wchar_t
path
[
MAX_PATH
]
;
const
wchar_t
kRegKeyName
[
]
=
L
"
Software
\
\
Classes
\
\
CLSID
\
\
"
L
"
{
054AAE20
-
4BEA
-
4347
-
8A35
-
64A533254A9D
}
\
\
LocalServer32
"
;
if
(
!
WinUtils
:
:
GetRegistryKey
(
HKEY_LOCAL_MACHINE
kRegKeyName
nullptr
path
sizeof
path
)
)
{
return
;
}
std
:
:
wstring
wstrpath
(
path
)
;
size_t
commonProgramFilesOffset
=
wstrpath
.
find
(
L
"
%
CommonProgramFiles
%
"
)
;
if
(
commonProgramFilesOffset
!
=
std
:
:
wstring
:
:
npos
)
{
std
:
:
wstring
commonProgramFilesPath
;
std
:
:
vector
<
wchar_t
>
commonProgramFilesPathW6432
;
DWORD
bufferSize
=
:
:
GetEnvironmentVariableW
(
L
"
CommonProgramW6432
"
nullptr
0
)
;
if
(
bufferSize
)
{
commonProgramFilesPathW6432
.
resize
(
bufferSize
)
;
:
:
GetEnvironmentVariableW
(
L
"
CommonProgramW6432
"
commonProgramFilesPathW6432
.
data
(
)
bufferSize
)
;
commonProgramFilesPath
=
std
:
:
wstring
(
commonProgramFilesPathW6432
.
data
(
)
)
;
}
else
{
PWSTR
path
=
nullptr
;
HRESULT
hres
=
SHGetKnownFolderPath
(
FOLDERID_ProgramFilesCommon
0
nullptr
&
path
)
;
if
(
FAILED
(
hres
)
|
|
!
path
)
{
return
;
}
commonProgramFilesPath
=
static_cast
<
const
wchar_t
*
>
(
nsDependentString
(
path
)
.
get
(
)
)
;
:
:
CoTaskMemFree
(
path
)
;
}
wstrpath
.
replace
(
commonProgramFilesOffset
wcslen
(
L
"
%
CommonProgramFiles
%
"
)
commonProgramFilesPath
)
;
}
cachedPath
.
Assign
(
wstrpath
.
data
(
)
)
;
Preferences
:
:
SetString
(
kOskPathPrefName
cachedPath
)
;
}
const
char16_t
*
cachedPathPtr
;
cachedPath
.
GetData
(
&
cachedPathPtr
)
;
ShellExecuteW
(
nullptr
L
"
"
char16ptr_t
(
cachedPathPtr
)
nullptr
nullptr
SW_SHOW
)
;
}
void
OSKTabTipManager
:
:
DismissOnScreenKeyboard
(
)
{
HWND
osk
=
GetOnScreenKeyboardWindow
(
)
;
if
(
osk
)
{
:
:
PostMessage
(
osk
WM_SYSCOMMAND
SC_CLOSE
0
)
;
}
}
}
}
