#
include
"
nsPrintSettingsServiceWin
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPrintSettingsWin
.
h
"
#
include
"
nsPrintDialogUtil
.
h
"
#
include
"
nsGfxCIID
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
chrome
/
common
/
ipc_channel
.
h
"
#
include
"
mozilla
/
embedding
/
PPrintingTypes
.
h
"
using
namespace
mozilla
:
:
embedding
;
NS_IMETHODIMP
nsPrintSettingsServiceWin
:
:
SerializeToPrintData
(
nsIPrintSettings
*
aSettings
PrintData
*
data
)
{
nsresult
rv
=
nsPrintSettingsService
:
:
SerializeToPrintData
(
aSettings
data
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
=
do_QueryInterface
(
aSettings
)
;
if
(
!
psWin
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
deviceName
;
nsAutoString
driverName
;
psWin
-
>
GetDeviceName
(
deviceName
)
;
psWin
-
>
GetDriverName
(
driverName
)
;
data
-
>
deviceName
(
)
.
Assign
(
deviceName
)
;
data
-
>
driverName
(
)
.
Assign
(
driverName
)
;
if
(
XRE_IsParentProcess
(
)
)
{
LPDEVMODEW
devModeRaw
;
psWin
-
>
GetDevMode
(
&
devModeRaw
)
;
if
(
devModeRaw
)
{
nsAutoDevMode
devMode
(
devModeRaw
)
;
devModeRaw
=
nullptr
;
size_t
devModeTotalSize
=
devMode
-
>
dmSize
+
devMode
-
>
dmDriverExtra
;
size_t
msgTotalSize
=
sizeof
(
PrintData
)
+
devModeTotalSize
;
if
(
msgTotalSize
>
IPC
:
:
Channel
:
:
kMaximumMessageSize
/
2
)
{
return
NS_ERROR_FAILURE
;
}
const
char
*
devModeData
=
reinterpret_cast
<
const
char
*
>
(
devMode
.
get
(
)
)
;
nsTArray
<
uint8_t
>
arrayBuf
;
arrayBuf
.
AppendElements
(
devModeData
devModeTotalSize
)
;
data
-
>
devModeData
(
)
=
std
:
:
move
(
arrayBuf
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintSettingsServiceWin
:
:
DeserializeToPrintSettings
(
const
PrintData
&
data
nsIPrintSettings
*
settings
)
{
nsresult
rv
=
nsPrintSettingsService
:
:
DeserializeToPrintSettings
(
data
settings
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIPrintSettingsWin
>
psWin
=
do_QueryInterface
(
settings
)
;
if
(
!
settings
)
{
return
NS_ERROR_FAILURE
;
}
if
(
XRE_IsContentProcess
(
)
)
{
psWin
-
>
SetDeviceName
(
data
.
deviceName
(
)
)
;
psWin
-
>
SetDriverName
(
data
.
driverName
(
)
)
;
if
(
data
.
devModeData
(
)
.
IsEmpty
(
)
)
{
psWin
-
>
SetDevMode
(
nullptr
)
;
}
else
{
auto
devModeDataLength
=
data
.
devModeData
(
)
.
Length
(
)
;
if
(
devModeDataLength
<
sizeof
(
DEVMODEW
)
)
{
NS_WARNING
(
"
DEVMODE
data
is
too
short
.
"
)
;
return
NS_ERROR_FAILURE
;
}
DEVMODEW
*
devMode
=
reinterpret_cast
<
DEVMODEW
*
>
(
const_cast
<
uint8_t
*
>
(
data
.
devModeData
(
)
.
Elements
(
)
)
)
;
if
(
(
devMode
-
>
dmSize
+
devMode
-
>
dmDriverExtra
)
!
=
devModeDataLength
)
{
NS_WARNING
(
"
DEVMODE
length
is
incorrect
.
"
)
;
return
NS_ERROR_FAILURE
;
}
psWin
-
>
SetDevMode
(
devMode
)
;
}
}
return
NS_OK
;
}
nsresult
nsPrintSettingsServiceWin
:
:
_CreatePrintSettings
(
nsIPrintSettings
*
*
_retval
)
{
*
_retval
=
nullptr
;
nsPrintSettingsWin
*
printSettings
=
new
nsPrintSettingsWin
(
)
;
NS_ENSURE_TRUE
(
printSettings
NS_ERROR_OUT_OF_MEMORY
)
;
NS_ADDREF
(
*
_retval
=
printSettings
)
;
return
NS_OK
;
}
