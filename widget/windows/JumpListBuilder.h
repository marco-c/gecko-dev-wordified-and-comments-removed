#
ifndef
__JumpListBuilder_h__
#
define
__JumpListBuilder_h__
#
include
"
nsIJumpListBuilder
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
mozilla
/
LazyIdleThread
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
WindowsJumpListShortcutDescription
;
}
namespace
widget
{
class
JumpListBackend
{
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
bool
IsAvailable
(
)
=
0
;
virtual
HRESULT
SetAppID
(
LPCWSTR
pszAppID
)
=
0
;
virtual
HRESULT
BeginList
(
UINT
*
pcMinSlots
REFIID
riid
void
*
*
ppv
)
=
0
;
virtual
HRESULT
AddUserTasks
(
IObjectArray
*
poa
)
=
0
;
virtual
HRESULT
AppendCategory
(
LPCWSTR
pszCategory
IObjectArray
*
poa
)
=
0
;
virtual
HRESULT
CommitList
(
)
=
0
;
virtual
HRESULT
AbortList
(
)
=
0
;
virtual
HRESULT
DeleteList
(
LPCWSTR
pszAppID
)
=
0
;
virtual
HRESULT
AppendKnownCategory
(
KNOWNDESTCATEGORY
category
)
=
0
;
protected
:
virtual
~
JumpListBackend
(
)
{
}
}
;
class
JumpListBuilder
:
public
nsIJumpListBuilder
public
nsIObserver
{
virtual
~
JumpListBuilder
(
)
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIJUMPLISTBUILDER
NS_DECL_NSIOBSERVER
explicit
JumpListBuilder
(
const
nsAString
&
aAppUserModelId
RefPtr
<
JumpListBackend
>
aTestingBackend
=
nullptr
)
;
private
:
void
DoSetupBackend
(
)
;
void
DoSetupTestingBackend
(
RefPtr
<
JumpListBackend
>
aTestingBackend
)
;
void
DoShutdownBackend
(
)
;
void
DoSetAppIDIfAvailable
(
nsString
aAppUserModelID
)
;
void
DoIsAvailable
(
const
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
&
aPromiseHolder
)
;
void
DoCheckForRemovals
(
const
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
&
aPromiseHolder
)
;
void
DoPopulateJumpList
(
const
nsTArray
<
dom
:
:
WindowsJumpListShortcutDescription
>
&
&
aTaskDescriptions
const
nsAString
&
aCustomTitle
const
nsTArray
<
dom
:
:
WindowsJumpListShortcutDescription
>
&
&
aCustomDescriptions
const
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
&
aPromiseHolder
)
;
void
DoClearJumpList
(
const
nsMainThreadPtrHandle
<
dom
:
:
Promise
>
&
aPromiseHolder
)
;
void
RemoveIconCacheAndGetJumplistShortcutURIs
(
IObjectArray
*
aObjArray
nsTArray
<
nsString
>
&
aURISpecs
)
;
void
DeleteIconFromDisk
(
const
nsAString
&
aPath
)
;
nsresult
GetShellLinkFromDescription
(
const
dom
:
:
WindowsJumpListShortcutDescription
&
aDesc
RefPtr
<
IShellLinkW
>
&
aShellLink
)
;
nsString
mAppUserModelId
;
RefPtr
<
JumpListBackend
>
mJumpListBackend
;
RefPtr
<
LazyIdleThread
>
mIOThread
;
}
;
}
}
#
endif
