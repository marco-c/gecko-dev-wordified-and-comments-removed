#
ifndef
mozilla_ShellHeaderOnlyUtils_h
#
define
mozilla_ShellHeaderOnlyUtils_h
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
<
objbase
.
h
>
#
include
<
exdisp
.
h
>
#
include
<
shldisp
.
h
>
#
include
<
shlobj
.
h
>
#
include
<
shlwapi
.
h
>
#
include
<
shobjidl
.
h
>
#
include
<
shtypes
.
h
>
#
include
<
shellapi
.
h
>
#
include
<
comdef
.
h
>
#
include
<
comutil
.
h
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
inline
LauncherVoidResult
ShellExecuteByExplorer
(
const
_bstr_t
&
aPath
const
_variant_t
&
aArgs
const
_variant_t
&
aVerb
const
_variant_t
&
aWorkingDir
const
_variant_t
&
aShowCmd
)
{
RefPtr
<
IShellWindows
>
shellWindows
;
HRESULT
hr
=
:
:
CoCreateInstance
(
CLSID_ShellWindows
nullptr
CLSCTX_INPROC_SERVER
|
CLSCTX_LOCAL_SERVER
IID_IShellWindows
getter_AddRefs
(
shellWindows
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
_variant_t
loc
(
int
(
CSIDL_DESKTOP
)
)
;
_variant_t
empty
;
long
hwnd
;
RefPtr
<
IDispatch
>
dispDesktop
;
hr
=
shellWindows
-
>
FindWindowSW
(
&
loc
&
empty
SWC_DESKTOP
&
hwnd
SWFO_NEEDDISPATCH
getter_AddRefs
(
dispDesktop
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
if
(
hr
=
=
S_FALSE
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_NOT_FOUND
)
;
}
RefPtr
<
IServiceProvider
>
servProv
;
hr
=
dispDesktop
-
>
QueryInterface
(
IID_IServiceProvider
getter_AddRefs
(
servProv
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IShellBrowser
>
browser
;
hr
=
servProv
-
>
QueryService
(
SID_STopLevelBrowser
IID_IShellBrowser
getter_AddRefs
(
browser
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IShellView
>
activeShellView
;
hr
=
browser
-
>
QueryActiveShellView
(
getter_AddRefs
(
activeShellView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IDispatch
>
dispView
;
hr
=
activeShellView
-
>
GetItemObject
(
SVGIO_BACKGROUND
IID_IDispatch
getter_AddRefs
(
dispView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IShellFolderViewDual
>
folderView
;
hr
=
dispView
-
>
QueryInterface
(
IID_IShellFolderViewDual
getter_AddRefs
(
folderView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IDispatch
>
dispShell
;
hr
=
folderView
-
>
get_Application
(
getter_AddRefs
(
dispShell
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
RefPtr
<
IShellDispatch2
>
shellDisp
;
hr
=
dispShell
-
>
QueryInterface
(
IID_IShellDispatch2
getter_AddRefs
(
shellDisp
)
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
hr
=
:
:
CoAllowSetForegroundWindow
(
shellDisp
nullptr
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
|
|
hr
=
=
E_ACCESSDENIED
)
;
#
if
defined
(
ShellExecute
)
#
define
MOZ_REDEFINE_SHELLEXECUTE
#
undef
ShellExecute
#
endif
hr
=
shellDisp
-
>
ShellExecute
(
aPath
aArgs
aVerb
aWorkingDir
aShowCmd
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
#
if
defined
(
MOZ_REDEFINE_SHELLEXECUTE
)
#
if
defined
(
UNICODE
)
#
define
ShellExecute
ShellExecuteW
#
else
#
define
ShellExecute
ShellExecuteA
#
endif
#
undef
MOZ_REDEFINE_SHELLEXECUTE
#
endif
return
Ok
(
)
;
}
using
UniqueAbsolutePidl
=
UniquePtr
<
RemovePointer
<
PIDLIST_ABSOLUTE
>
:
:
Type
CoTaskMemFreeDeleter
>
;
inline
LauncherResult
<
UniqueAbsolutePidl
>
ShellParseDisplayName
(
const
wchar_t
*
aPath
)
{
PIDLIST_ABSOLUTE
rawAbsPidl
=
nullptr
;
SFGAOF
sfgao
;
HRESULT
hr
=
:
:
SHParseDisplayName
(
aPath
nullptr
&
rawAbsPidl
0
&
sfgao
)
;
if
(
FAILED
(
hr
)
)
{
return
LAUNCHER_ERROR_FROM_HRESULT
(
hr
)
;
}
return
UniqueAbsolutePidl
(
rawAbsPidl
)
;
}
}
#
endif
