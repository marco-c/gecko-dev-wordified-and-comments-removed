#
include
"
CompositorWidgetParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
widget
/
PlatformWidgetTypes
.
h
"
namespace
mozilla
{
namespace
widget
{
CompositorWidgetParent
:
:
CompositorWidgetParent
(
const
CompositorWidgetInitData
&
aInitData
const
layers
:
:
CompositorOptions
&
aOptions
)
:
WinCompositorWidget
(
aInitData
.
get_WinCompositorWidgetInitData
(
)
aOptions
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
;
}
CompositorWidgetParent
:
:
~
CompositorWidgetParent
(
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorWidgetParent
:
:
RecvEnterPresentLock
(
)
{
EnterPresentLock
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorWidgetParent
:
:
RecvLeavePresentLock
(
)
{
LeavePresentLock
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorWidgetParent
:
:
RecvUpdateTransparency
(
const
nsTransparencyMode
&
aMode
)
{
UpdateTransparency
(
aMode
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorWidgetParent
:
:
RecvClearTransparentWindow
(
)
{
ClearTransparentWindow
(
)
;
return
IPC_OK
(
)
;
}
nsIWidget
*
CompositorWidgetParent
:
:
RealWidget
(
)
{
return
nullptr
;
}
void
CompositorWidgetParent
:
:
ObserveVsync
(
VsyncObserver
*
aObserver
)
{
if
(
aObserver
)
{
Unused
<
<
SendObserveVsync
(
)
;
}
else
{
Unused
<
<
SendUnobserveVsync
(
)
;
}
mVsyncObserver
=
aObserver
;
}
RefPtr
<
VsyncObserver
>
CompositorWidgetParent
:
:
GetVsyncObserver
(
)
const
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
;
return
mVsyncObserver
;
}
void
CompositorWidgetParent
:
:
UpdateCompositorWnd
(
const
HWND
aCompositorWnd
const
HWND
aParentWnd
)
{
MOZ_ASSERT
(
layers
:
:
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MOZ_ASSERT
(
mRootLayerTreeID
.
isSome
(
)
)
;
RefPtr
<
CompositorWidgetParent
>
self
=
this
;
SendUpdateCompositorWnd
(
reinterpret_cast
<
WindowsHandle
>
(
aCompositorWnd
)
reinterpret_cast
<
WindowsHandle
>
(
aParentWnd
)
)
-
>
Then
(
layers
:
:
CompositorThreadHolder
:
:
Loop
(
)
-
>
SerialEventTarget
(
)
__func__
[
self
]
(
const
bool
&
aSuccess
)
{
if
(
aSuccess
&
&
self
-
>
mRootLayerTreeID
.
isSome
(
)
)
{
self
-
>
mSetParentCompleted
=
true
;
layers
:
:
CompositorBridgeParent
:
:
ScheduleForcedComposition
(
self
-
>
mRootLayerTreeID
.
ref
(
)
)
;
}
}
[
self
]
(
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
&
)
{
}
)
;
}
void
CompositorWidgetParent
:
:
SetRootLayerTreeID
(
const
layers
:
:
LayersId
&
aRootLayerTreeId
)
{
mRootLayerTreeID
=
Some
(
aRootLayerTreeId
)
;
}
void
CompositorWidgetParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
}
}
