#
ifndef
mozilla_EventForwards_h__
#
define
mozilla_EventForwards_h__
#
include
<
stdint
.
h
>
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
enum
nsEventStatus
{
nsEventStatus_eIgnore
nsEventStatus_eConsumeNoDefault
nsEventStatus_eConsumeDoDefault
nsEventStatus_eSentinel
}
;
namespace
mozilla
{
enum
class
CanBubble
{
eYes
eNo
}
;
enum
class
Cancelable
{
eYes
eNo
}
;
enum
class
ChromeOnlyDispatch
{
eYes
eNo
}
;
enum
class
Trusted
{
eYes
eNo
}
;
enum
class
Composed
{
eYes
eNo
eDefault
}
;
typedef
uint16_t
EventMessageType
;
enum
EventMessage
:
EventMessageType
{
#
define
NS_EVENT_MESSAGE
(
aMessage
)
aMessage
#
define
NS_EVENT_MESSAGE_FIRST_LAST
(
aMessage
aFirst
aLast
)
\
aMessage
#
#
First
=
aFirst
aMessage
#
#
Last
=
aLast
#
include
"
mozilla
/
EventMessageList
.
h
"
#
undef
NS_EVENT_MESSAGE
#
undef
NS_EVENT_MESSAGE_FIRST_LAST
eEventMessage_MaxValue
}
;
const
char
*
ToChar
(
EventMessage
aEventMessage
)
;
typedef
uint8_t
EventClassIDType
;
enum
EventClassID
:
EventClassIDType
{
#
define
NS_ROOT_EVENT_CLASS
(
aPrefix
aName
)
eBasic
#
#
aName
#
#
Class
#
define
NS_EVENT_CLASS
(
aPrefix
aName
)
e
#
#
aName
#
#
Class
#
include
"
mozilla
/
EventClassList
.
h
"
#
undef
NS_EVENT_CLASS
#
undef
NS_ROOT_EVENT_CLASS
}
;
const
char
*
ToChar
(
EventClassID
aEventClassID
)
;
typedef
uint16_t
Modifiers
;
#
define
NS_DEFINE_KEYNAME
(
aCPPName
aDOMKeyName
)
KEY_NAME_INDEX_
#
#
aCPPName
typedef
uint16_t
KeyNameIndexType
;
enum
KeyNameIndex
:
KeyNameIndexType
{
#
include
"
mozilla
/
KeyNameList
.
h
"
KEY_NAME_INDEX_USE_STRING
}
;
#
undef
NS_DEFINE_KEYNAME
const
nsCString
ToString
(
KeyNameIndex
aKeyNameIndex
)
;
#
define
NS_DEFINE_PHYSICAL_KEY_CODE_NAME
(
aCPPName
aDOMCodeName
)
\
CODE_NAME_INDEX_
#
#
aCPPName
typedef
uint8_t
CodeNameIndexType
;
enum
CodeNameIndex
:
CodeNameIndexType
{
#
include
"
mozilla
/
PhysicalKeyCodeNameList
.
h
"
CODE_NAME_INDEX_USE_STRING
}
;
#
undef
NS_DEFINE_PHYSICAL_KEY_CODE_NAME
const
nsCString
ToString
(
CodeNameIndex
aCodeNameIndex
)
;
#
define
NS_DEFINE_INPUTTYPE
(
aCPPName
aDOMName
)
e
#
#
aCPPName
typedef
uint8_t
EditorInputTypeType
;
enum
class
EditorInputType
:
EditorInputTypeType
{
#
include
"
mozilla
/
InputTypeList
.
h
"
eUnknown
}
;
#
undef
NS_DEFINE_INPUTTYPE
inline
bool
ExposesClipboardDataOrDataTransfer
(
EditorInputType
aInputType
)
{
switch
(
aInputType
)
{
case
EditorInputType
:
:
eInsertFromPaste
:
case
EditorInputType
:
:
eInsertFromPasteAsQuotation
:
return
true
;
default
:
return
false
;
}
}
inline
bool
IsDataAvailableOnTextEditor
(
EditorInputType
aInputType
)
{
switch
(
aInputType
)
{
case
EditorInputType
:
:
eInsertText
:
case
EditorInputType
:
:
eInsertCompositionText
:
case
EditorInputType
:
:
eInsertFromComposition
:
case
EditorInputType
:
:
eInsertFromPaste
:
case
EditorInputType
:
:
eInsertFromPasteAsQuotation
:
case
EditorInputType
:
:
eInsertTranspose
:
case
EditorInputType
:
:
eInsertFromDrop
:
case
EditorInputType
:
:
eInsertReplacementText
:
case
EditorInputType
:
:
eInsertFromYank
:
case
EditorInputType
:
:
eFormatSetBlockTextDirection
:
case
EditorInputType
:
:
eFormatSetInlineTextDirection
:
return
true
;
default
:
return
false
;
}
}
inline
bool
IsDataAvailableOnHTMLEditor
(
EditorInputType
aInputType
)
{
switch
(
aInputType
)
{
case
EditorInputType
:
:
eInsertText
:
case
EditorInputType
:
:
eInsertCompositionText
:
case
EditorInputType
:
:
eInsertFromComposition
:
case
EditorInputType
:
:
eFormatSetBlockTextDirection
:
case
EditorInputType
:
:
eFormatSetInlineTextDirection
:
case
EditorInputType
:
:
eInsertLink
:
case
EditorInputType
:
:
eFormatBackColor
:
case
EditorInputType
:
:
eFormatFontColor
:
case
EditorInputType
:
:
eFormatFontName
:
return
true
;
default
:
return
false
;
}
}
inline
bool
IsDataTransferAvailableOnHTMLEditor
(
EditorInputType
aInputType
)
{
switch
(
aInputType
)
{
case
EditorInputType
:
:
eInsertFromPaste
:
case
EditorInputType
:
:
eInsertFromPasteAsQuotation
:
case
EditorInputType
:
:
eInsertFromDrop
:
case
EditorInputType
:
:
eInsertTranspose
:
case
EditorInputType
:
:
eInsertReplacementText
:
case
EditorInputType
:
:
eInsertFromYank
:
return
true
;
default
:
return
false
;
}
}
#
define
NS_DEFINE_COMMAND
(
aName
aCommandStr
)
aName
#
define
NS_DEFINE_COMMAND_WITH_PARAM
(
aName
aCommandStr
aParam
)
aName
#
define
NS_DEFINE_COMMAND_NO_EXEC_COMMAND
(
aName
)
aName
typedef
int8_t
CommandInt
;
enum
class
Command
:
CommandInt
{
DoNothing
#
include
"
mozilla
/
CommandList
.
h
"
}
;
#
undef
NS_DEFINE_COMMAND
#
undef
NS_DEFINE_COMMAND_WITH_PARAM
#
undef
NS_DEFINE_COMMAND_NO_EXEC_COMMAND
const
char
*
ToChar
(
Command
aCommand
)
;
Command
GetInternalCommand
(
const
char
*
aCommandName
)
;
Command
GetInternalCommand
(
const
char
*
aCommandName
const
nsAString
&
aValue
)
;
}
namespace
mozilla
{
#
define
NS_EVENT_CLASS
(
aPrefix
aName
)
class
aPrefix
#
#
aName
;
#
define
NS_ROOT_EVENT_CLASS
(
aPrefix
aName
)
NS_EVENT_CLASS
(
aPrefix
aName
)
#
include
"
mozilla
/
EventClassList
.
h
"
#
undef
NS_EVENT_CLASS
#
undef
NS_ROOT_EVENT_CLASS
struct
BaseEventFlags
;
struct
EventFlags
;
class
WidgetEventTime
;
class
NativeEventData
;
enum
class
AccessKeyType
;
struct
AlternativeCharCode
;
struct
ShortcutKeyCandidate
;
typedef
nsTArray
<
ShortcutKeyCandidate
>
ShortcutKeyCandidateArray
;
typedef
AutoTArray
<
ShortcutKeyCandidate
10
>
AutoShortcutKeyCandidateArray
;
typedef
uint8_t
RawTextRangeType
;
enum
class
TextRangeType
:
RawTextRangeType
;
struct
TextRangeStyle
;
struct
TextRange
;
class
EditCommands
;
class
TextRangeArray
;
struct
FontRange
;
enum
MouseButton
{
eNotPressed
=
-
1
eLeft
=
0
eMiddle
=
1
eRight
=
2
}
;
enum
MouseButtonsFlag
{
eNoButtons
=
0x00
eLeftFlag
=
0x01
eRightFlag
=
0x02
eMiddleFlag
=
0x04
e4thFlag
=
0x08
e5thFlag
=
0x10
}
;
}
#
endif
