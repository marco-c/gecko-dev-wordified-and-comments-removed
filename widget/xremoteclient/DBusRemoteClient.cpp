#
include
"
DBusRemoteClient
.
h
"
#
include
"
RemoteUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Base64
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
<
dlfcn
.
h
>
using
mozilla
:
:
LogLevel
;
static
mozilla
:
:
LazyLogModule
sRemoteLm
(
"
DBusRemoteClient
"
)
;
DBusRemoteClient
:
:
DBusRemoteClient
(
)
{
mConnection
=
nullptr
;
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DBusRemoteClient
:
:
DBusRemoteClient
"
)
)
;
}
DBusRemoteClient
:
:
~
DBusRemoteClient
(
)
{
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DBusRemoteClient
:
:
~
DBusRemoteClient
"
)
)
;
Shutdown
(
)
;
}
nsresult
DBusRemoteClient
:
:
Init
(
)
{
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DBusRemoteClient
:
:
Init
"
)
)
;
if
(
mConnection
)
return
NS_OK
;
mConnection
=
already_AddRefed
<
DBusConnection
>
(
dbus_bus_get
(
DBUS_BUS_SESSION
nullptr
)
)
;
if
(
!
mConnection
)
return
NS_ERROR_FAILURE
;
dbus_connection_set_exit_on_disconnect
(
mConnection
false
)
;
dbus_connection_setup_with_g_main
(
mConnection
nullptr
)
;
return
NS_OK
;
}
void
DBusRemoteClient
:
:
Shutdown
(
void
)
{
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DBusRemoteClient
:
:
Shutdown
"
)
)
;
mConnection
=
nullptr
;
}
nsresult
DBusRemoteClient
:
:
SendCommandLine
(
const
char
*
aProgram
const
char
*
aUsername
const
char
*
aProfile
int32_t
argc
char
*
*
argv
const
char
*
aDesktopStartupID
char
*
*
aResponse
bool
*
aWindowFound
)
{
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DBusRemoteClient
:
:
SendCommandLine
"
)
)
;
int
commandLineLength
;
char
*
commandLine
=
ConstructCommandLine
(
argc
argv
aDesktopStartupID
&
commandLineLength
)
;
if
(
!
commandLine
)
return
NS_ERROR_FAILURE
;
nsresult
rv
=
DoSendDBusCommandLine
(
aProgram
aProfile
commandLine
commandLineLength
)
;
free
(
commandLine
)
;
*
aWindowFound
=
NS_SUCCEEDED
(
rv
)
;
MOZ_LOG
(
sRemoteLm
LogLevel
:
:
Debug
(
"
DoSendDBusCommandLine
returning
0x
%
"
PRIx32
"
\
n
"
static_cast
<
uint32_t
>
(
rv
)
)
)
;
return
rv
;
}
bool
DBusRemoteClient
:
:
GetRemoteDestinationName
(
const
char
*
aProgram
const
char
*
aProfile
nsCString
&
aDestinationName
)
{
if
(
!
aProfile
|
|
aProfile
[
0
]
=
=
'
\
0
'
)
{
RefPtr
<
DBusMessage
>
msg
=
already_AddRefed
<
DBusMessage
>
(
dbus_message_new_method_call
(
"
org
.
freedesktop
.
DBus
"
"
/
org
/
freedesktop
/
DBus
"
"
org
.
freedesktop
.
DBus
"
"
ListNames
"
)
)
;
if
(
!
msg
)
{
return
false
;
}
RefPtr
<
DBusMessage
>
reply
=
already_AddRefed
<
DBusMessage
>
(
dbus_connection_send_with_reply_and_block
(
mConnection
msg
-
1
nullptr
)
)
;
if
(
!
reply
)
{
return
false
;
}
char
*
*
interfaces
;
dbus_int32_t
interfaceNums
;
if
(
!
dbus_message_get_args
(
reply
nullptr
DBUS_TYPE_ARRAY
DBUS_TYPE_STRING
&
interfaces
&
interfaceNums
DBUS_TYPE_INVALID
)
)
{
return
false
;
}
nsAutoCString
destinationTemplate
;
destinationTemplate
=
nsPrintfCString
(
"
org
.
mozilla
.
%
s
"
aProgram
)
;
aDestinationName
.
SetLength
(
0
)
;
for
(
int
i
=
0
;
i
<
interfaceNums
;
i
+
+
)
{
if
(
strstr
(
interfaces
[
i
]
destinationTemplate
.
get
(
)
)
)
{
aDestinationName
=
interfaces
[
i
]
;
break
;
}
}
dbus_free_string_array
(
interfaces
)
;
return
(
!
aDestinationName
.
IsEmpty
(
)
)
;
}
else
{
nsAutoCString
profileName
;
nsresult
rv
=
mozilla
:
:
Base64Encode
(
nsAutoCString
(
aProfile
)
profileName
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
profileName
.
ReplaceChar
(
"
+
/
=
"
'
_
'
)
;
aDestinationName
=
nsPrintfCString
(
"
org
.
mozilla
.
%
s
.
%
s
"
aProgram
profileName
.
get
(
)
)
;
if
(
aDestinationName
.
Length
(
)
>
DBUS_MAXIMUM_NAME_LENGTH
)
aDestinationName
.
Truncate
(
DBUS_MAXIMUM_NAME_LENGTH
)
;
static
auto
sDBusValidateBusName
=
(
bool
(
*
)
(
const
char
*
DBusError
*
)
)
dlsym
(
RTLD_DEFAULT
"
dbus_validate_bus_name
"
)
;
if
(
!
sDBusValidateBusName
)
{
return
false
;
}
if
(
!
sDBusValidateBusName
(
aDestinationName
.
get
(
)
nullptr
)
)
{
aDestinationName
=
nsPrintfCString
(
"
org
.
mozilla
.
%
s
.
%
s
"
aProgram
"
default
"
)
;
if
(
!
sDBusValidateBusName
(
aDestinationName
.
get
(
)
nullptr
)
)
{
return
false
;
}
}
return
true
;
}
}
nsresult
DBusRemoteClient
:
:
DoSendDBusCommandLine
(
const
char
*
aProgram
const
char
*
aProfile
const
char
*
aBuffer
int
aLength
)
{
nsAutoCString
destinationName
;
if
(
!
GetRemoteDestinationName
(
aProgram
aProfile
destinationName
)
)
return
NS_ERROR_FAILURE
;
nsAutoCString
pathName
;
pathName
=
nsPrintfCString
(
"
/
org
/
mozilla
/
%
s
/
Remote
"
aProgram
)
;
nsAutoCString
remoteInterfaceName
;
remoteInterfaceName
=
nsPrintfCString
(
"
org
.
mozilla
.
%
s
"
aProgram
)
;
RefPtr
<
DBusMessage
>
msg
=
already_AddRefed
<
DBusMessage
>
(
dbus_message_new_method_call
(
destinationName
.
get
(
)
pathName
.
get
(
)
remoteInterfaceName
.
get
(
)
"
OpenURL
"
)
)
;
if
(
!
msg
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
dbus_message_append_args
(
msg
DBUS_TYPE_ARRAY
DBUS_TYPE_BYTE
&
aBuffer
aLength
DBUS_TYPE_INVALID
)
)
{
return
NS_ERROR_FAILURE
;
}
DBusError
err
;
dbus_error_init
(
&
err
)
;
RefPtr
<
DBusMessage
>
reply
=
already_AddRefed
<
DBusMessage
>
(
dbus_connection_send_with_reply_and_block
(
mConnection
msg
-
1
&
err
)
)
;
if
(
dbus_error_is_set
(
&
err
)
)
{
dbus_error_free
(
&
err
)
;
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
