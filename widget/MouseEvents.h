#
ifndef
mozilla_MouseEvents_h__
#
define
mozilla_MouseEvents_h__
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
dom
/
DataTransfer
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIDOMMouseEvent
.
h
"
#
include
"
nsIDOMWheelEvent
.
h
"
enum
nsDragDropEventStatus
{
nsDragDropEventStatus_eDragEntered
nsDragDropEventStatus_eDragExited
nsDragDropEventStatus_eDrop
}
;
namespace
mozilla
{
namespace
dom
{
class
PBrowserParent
;
class
PBrowserChild
;
}
class
WidgetPointerHelper
{
public
:
uint32_t
pointerId
;
uint32_t
tiltX
;
uint32_t
tiltY
;
bool
convertToPointer
;
bool
retargetedByPointerCapture
;
WidgetPointerHelper
(
)
:
pointerId
(
0
)
tiltX
(
0
)
tiltY
(
0
)
convertToPointer
(
true
)
retargetedByPointerCapture
(
false
)
{
}
WidgetPointerHelper
(
uint32_t
aPointerId
uint32_t
aTiltX
uint32_t
aTiltY
)
:
pointerId
(
aPointerId
)
tiltX
(
aTiltX
)
tiltY
(
aTiltY
)
convertToPointer
(
true
)
retargetedByPointerCapture
(
false
)
{
}
void
AssignPointerHelperData
(
const
WidgetPointerHelper
&
aEvent
)
{
pointerId
=
aEvent
.
pointerId
;
tiltX
=
aEvent
.
tiltX
;
tiltY
=
aEvent
.
tiltY
;
convertToPointer
=
aEvent
.
convertToPointer
;
retargetedByPointerCapture
=
aEvent
.
retargetedByPointerCapture
;
}
}
;
class
WidgetMouseEventBase
:
public
WidgetInputEvent
{
private
:
friend
class
dom
:
:
PBrowserParent
;
friend
class
dom
:
:
PBrowserChild
;
protected
:
WidgetMouseEventBase
(
)
:
button
(
0
)
buttons
(
0
)
pressure
(
0
)
hitCluster
(
false
)
inputSource
(
nsIDOMMouseEvent
:
:
MOZ_SOURCE_MOUSE
)
{
}
WidgetMouseEventBase
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
EventClassID
aEventClassID
)
:
WidgetInputEvent
(
aIsTrusted
aMessage
aWidget
aEventClassID
)
button
(
0
)
buttons
(
0
)
pressure
(
0
)
hitCluster
(
false
)
inputSource
(
nsIDOMMouseEvent
:
:
MOZ_SOURCE_MOUSE
)
{
}
public
:
virtual
WidgetMouseEventBase
*
AsMouseEventBase
(
)
override
{
return
this
;
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_CRASH
(
"
WidgetMouseEventBase
must
not
be
most
-
subclass
"
)
;
}
nsCOMPtr
<
nsISupports
>
relatedTarget
;
enum
buttonType
{
eLeftButton
=
0
eMiddleButton
=
1
eRightButton
=
2
}
;
int16_t
button
;
enum
buttonsFlag
{
eNoButtonFlag
=
0x00
eLeftButtonFlag
=
0x01
eRightButtonFlag
=
0x02
eMiddleButtonFlag
=
0x04
e4thButtonFlag
=
0x08
e5thButtonFlag
=
0x10
}
;
int16_t
buttons
;
float
pressure
;
bool
hitCluster
;
uint16_t
inputSource
;
nsString
region
;
bool
IsLeftButtonPressed
(
)
const
{
return
!
!
(
buttons
&
eLeftButtonFlag
)
;
}
bool
IsRightButtonPressed
(
)
const
{
return
!
!
(
buttons
&
eRightButtonFlag
)
;
}
bool
IsMiddleButtonPressed
(
)
const
{
return
!
!
(
buttons
&
eMiddleButtonFlag
)
;
}
bool
Is4thButtonPressed
(
)
const
{
return
!
!
(
buttons
&
e4thButtonFlag
)
;
}
bool
Is5thButtonPressed
(
)
const
{
return
!
!
(
buttons
&
e5thButtonFlag
)
;
}
void
AssignMouseEventBaseData
(
const
WidgetMouseEventBase
&
aEvent
bool
aCopyTargets
)
{
AssignInputEventData
(
aEvent
aCopyTargets
)
;
relatedTarget
=
aCopyTargets
?
aEvent
.
relatedTarget
:
nullptr
;
button
=
aEvent
.
button
;
buttons
=
aEvent
.
buttons
;
pressure
=
aEvent
.
pressure
;
hitCluster
=
aEvent
.
hitCluster
;
inputSource
=
aEvent
.
inputSource
;
}
bool
IsLeftClickEvent
(
)
const
{
return
mMessage
=
=
eMouseClick
&
&
button
=
=
eLeftButton
;
}
}
;
class
WidgetMouseEvent
:
public
WidgetMouseEventBase
public
WidgetPointerHelper
{
private
:
friend
class
dom
:
:
PBrowserParent
;
friend
class
dom
:
:
PBrowserChild
;
public
:
typedef
bool
ReasonType
;
enum
Reason
:
ReasonType
{
eReal
eSynthesized
}
;
typedef
bool
ContextMenuTriggerType
;
enum
ContextMenuTrigger
:
ContextMenuTriggerType
{
eNormal
eContextMenuKey
}
;
typedef
bool
ExitFromType
;
enum
ExitFrom
:
ExitFromType
{
eChild
eTopLevel
}
;
protected
:
WidgetMouseEvent
(
)
:
mReason
(
eReal
)
mContextMenuTrigger
(
eNormal
)
mExitFrom
(
eChild
)
mIgnoreRootScrollFrame
(
false
)
mClickCount
(
0
)
{
}
WidgetMouseEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
EventClassID
aEventClassID
Reason
aReason
)
:
WidgetMouseEventBase
(
aIsTrusted
aMessage
aWidget
aEventClassID
)
mReason
(
aReason
)
mContextMenuTrigger
(
eNormal
)
mExitFrom
(
eChild
)
mIgnoreRootScrollFrame
(
false
)
mClickCount
(
0
)
{
}
public
:
virtual
WidgetMouseEvent
*
AsMouseEvent
(
)
override
{
return
this
;
}
WidgetMouseEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
Reason
aReason
ContextMenuTrigger
aContextMenuTrigger
=
eNormal
)
:
WidgetMouseEventBase
(
aIsTrusted
aMessage
aWidget
eMouseEventClass
)
mReason
(
aReason
)
mContextMenuTrigger
(
aContextMenuTrigger
)
mExitFrom
(
eChild
)
mIgnoreRootScrollFrame
(
false
)
mClickCount
(
0
)
{
if
(
aMessage
=
=
eContextMenu
)
{
button
=
(
mContextMenuTrigger
=
=
eNormal
)
?
eRightButton
:
eLeftButton
;
}
}
#
ifdef
DEBUG
virtual
~
WidgetMouseEvent
(
)
{
NS_WARNING_ASSERTION
(
mMessage
!
=
eContextMenu
|
|
button
=
=
(
(
mContextMenuTrigger
=
=
eNormal
)
?
eRightButton
:
eLeftButton
)
"
Wrong
button
set
to
eContextMenu
event
?
"
)
;
}
#
endif
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eMouseEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetMouseEvent
*
result
=
new
WidgetMouseEvent
(
false
mMessage
nullptr
mReason
mContextMenuTrigger
)
;
result
-
>
AssignMouseEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
Reason
mReason
;
ContextMenuTrigger
mContextMenuTrigger
;
ExitFrom
mExitFrom
;
bool
mIgnoreRootScrollFrame
;
uint32_t
mClickCount
;
void
AssignMouseEventData
(
const
WidgetMouseEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventBaseData
(
aEvent
aCopyTargets
)
;
AssignPointerHelperData
(
aEvent
)
;
mIgnoreRootScrollFrame
=
aEvent
.
mIgnoreRootScrollFrame
;
mClickCount
=
aEvent
.
mClickCount
;
}
bool
IsContextMenuKeyEvent
(
)
const
{
return
mMessage
=
=
eContextMenu
&
&
mContextMenuTrigger
=
=
eContextMenuKey
;
}
bool
IsReal
(
)
const
{
return
mReason
=
=
eReal
;
}
}
;
class
WidgetDragEvent
:
public
WidgetMouseEvent
{
private
:
friend
class
mozilla
:
:
dom
:
:
PBrowserParent
;
friend
class
mozilla
:
:
dom
:
:
PBrowserChild
;
protected
:
WidgetDragEvent
(
)
:
mUserCancelled
(
false
)
mDefaultPreventedOnContent
(
false
)
{
}
public
:
virtual
WidgetDragEvent
*
AsDragEvent
(
)
override
{
return
this
;
}
WidgetDragEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetMouseEvent
(
aIsTrusted
aMessage
aWidget
eDragEventClass
eReal
)
mUserCancelled
(
false
)
mDefaultPreventedOnContent
(
false
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eDragEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetDragEvent
*
result
=
new
WidgetDragEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignDragEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
nsCOMPtr
<
dom
:
:
DataTransfer
>
mDataTransfer
;
bool
mUserCancelled
;
bool
mDefaultPreventedOnContent
;
void
AssignDragEventData
(
const
WidgetDragEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventData
(
aEvent
aCopyTargets
)
;
mDataTransfer
=
aEvent
.
mDataTransfer
;
mUserCancelled
=
false
;
mDefaultPreventedOnContent
=
aEvent
.
mDefaultPreventedOnContent
;
}
}
;
class
WidgetMouseScrollEvent
:
public
WidgetMouseEventBase
{
private
:
WidgetMouseScrollEvent
(
)
:
mDelta
(
0
)
mIsHorizontal
(
false
)
{
}
public
:
virtual
WidgetMouseScrollEvent
*
AsMouseScrollEvent
(
)
override
{
return
this
;
}
WidgetMouseScrollEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetMouseEventBase
(
aIsTrusted
aMessage
aWidget
eMouseScrollEventClass
)
mDelta
(
0
)
mIsHorizontal
(
false
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eMouseScrollEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetMouseScrollEvent
*
result
=
new
WidgetMouseScrollEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignMouseScrollEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
int32_t
mDelta
;
bool
mIsHorizontal
;
void
AssignMouseScrollEventData
(
const
WidgetMouseScrollEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventBaseData
(
aEvent
aCopyTargets
)
;
mDelta
=
aEvent
.
mDelta
;
mIsHorizontal
=
aEvent
.
mIsHorizontal
;
}
}
;
class
WidgetWheelEvent
:
public
WidgetMouseEventBase
{
private
:
friend
class
mozilla
:
:
dom
:
:
PBrowserParent
;
friend
class
mozilla
:
:
dom
:
:
PBrowserChild
;
WidgetWheelEvent
(
)
:
mDeltaX
(
0
.
0
)
mDeltaY
(
0
.
0
)
mDeltaZ
(
0
.
0
)
mOverflowDeltaX
(
0
.
0
)
mOverflowDeltaY
(
0
.
0
)
mDeltaMode
(
nsIDOMWheelEvent
:
:
DOM_DELTA_PIXEL
)
mLineOrPageDeltaX
(
0
)
mLineOrPageDeltaY
(
0
)
mScrollType
(
SCROLL_DEFAULT
)
mCustomizedByUserPrefs
(
false
)
mIsMomentum
(
false
)
mIsNoLineOrPageDelta
(
false
)
mViewPortIsOverscrolled
(
false
)
mCanTriggerSwipe
(
false
)
mAllowToOverrideSystemScrollSpeed
(
false
)
{
}
public
:
virtual
WidgetWheelEvent
*
AsWheelEvent
(
)
override
{
return
this
;
}
WidgetWheelEvent
(
bool
aIsTrusted
EventMessage
aMessage
nsIWidget
*
aWidget
)
:
WidgetMouseEventBase
(
aIsTrusted
aMessage
aWidget
eWheelEventClass
)
mDeltaX
(
0
.
0
)
mDeltaY
(
0
.
0
)
mDeltaZ
(
0
.
0
)
mOverflowDeltaX
(
0
.
0
)
mOverflowDeltaY
(
0
.
0
)
mDeltaMode
(
nsIDOMWheelEvent
:
:
DOM_DELTA_PIXEL
)
mLineOrPageDeltaX
(
0
)
mLineOrPageDeltaY
(
0
)
mScrollType
(
SCROLL_DEFAULT
)
mCustomizedByUserPrefs
(
false
)
mMayHaveMomentum
(
false
)
mIsMomentum
(
false
)
mIsNoLineOrPageDelta
(
false
)
mViewPortIsOverscrolled
(
false
)
mCanTriggerSwipe
(
false
)
mAllowToOverrideSystemScrollSpeed
(
true
)
{
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
eWheelEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetWheelEvent
*
result
=
new
WidgetWheelEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignWheelEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
bool
TriggersSwipe
(
)
const
{
return
mCanTriggerSwipe
&
&
mViewPortIsOverscrolled
&
&
this
-
>
mOverflowDeltaX
!
=
0
.
0
;
}
double
mDeltaX
;
double
mDeltaY
;
double
mDeltaZ
;
double
mOverflowDeltaX
;
double
mOverflowDeltaY
;
uint32_t
mDeltaMode
;
int32_t
mLineOrPageDeltaX
;
int32_t
mLineOrPageDeltaY
;
int32_t
GetPreferredIntDelta
(
)
{
if
(
!
mLineOrPageDeltaX
&
&
!
mLineOrPageDeltaY
)
{
return
0
;
}
if
(
mLineOrPageDeltaY
&
&
!
mLineOrPageDeltaX
)
{
return
mLineOrPageDeltaY
;
}
if
(
mLineOrPageDeltaX
&
&
!
mLineOrPageDeltaY
)
{
return
mLineOrPageDeltaX
;
}
if
(
(
mLineOrPageDeltaX
<
0
&
&
mLineOrPageDeltaY
>
0
)
|
|
(
mLineOrPageDeltaX
>
0
&
&
mLineOrPageDeltaY
<
0
)
)
{
return
0
;
}
return
(
Abs
(
mLineOrPageDeltaX
)
>
Abs
(
mLineOrPageDeltaY
)
)
?
mLineOrPageDeltaX
:
mLineOrPageDeltaY
;
}
enum
ScrollType
:
uint8_t
{
SCROLL_DEFAULT
SCROLL_SYNCHRONOUSLY
SCROLL_ASYNCHRONOUSELY
SCROLL_SMOOTHLY
}
;
ScrollType
mScrollType
;
bool
mCustomizedByUserPrefs
;
bool
mMayHaveMomentum
;
bool
mIsMomentum
;
bool
mIsNoLineOrPageDelta
;
bool
mViewPortIsOverscrolled
;
bool
mCanTriggerSwipe
;
bool
mAllowToOverrideSystemScrollSpeed
;
void
AssignWheelEventData
(
const
WidgetWheelEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventBaseData
(
aEvent
aCopyTargets
)
;
mDeltaX
=
aEvent
.
mDeltaX
;
mDeltaY
=
aEvent
.
mDeltaY
;
mDeltaZ
=
aEvent
.
mDeltaZ
;
mDeltaMode
=
aEvent
.
mDeltaMode
;
mCustomizedByUserPrefs
=
aEvent
.
mCustomizedByUserPrefs
;
mMayHaveMomentum
=
aEvent
.
mMayHaveMomentum
;
mIsMomentum
=
aEvent
.
mIsMomentum
;
mIsNoLineOrPageDelta
=
aEvent
.
mIsNoLineOrPageDelta
;
mLineOrPageDeltaX
=
aEvent
.
mLineOrPageDeltaX
;
mLineOrPageDeltaY
=
aEvent
.
mLineOrPageDeltaY
;
mScrollType
=
aEvent
.
mScrollType
;
mOverflowDeltaX
=
aEvent
.
mOverflowDeltaX
;
mOverflowDeltaY
=
aEvent
.
mOverflowDeltaY
;
mViewPortIsOverscrolled
=
aEvent
.
mViewPortIsOverscrolled
;
mCanTriggerSwipe
=
aEvent
.
mCanTriggerSwipe
;
mAllowToOverrideSystemScrollSpeed
=
aEvent
.
mAllowToOverrideSystemScrollSpeed
;
}
double
OverriddenDeltaX
(
)
const
;
double
OverriddenDeltaY
(
)
const
;
static
double
ComputeOverriddenDelta
(
double
aDelta
bool
aIsForVertical
)
;
private
:
static
bool
sInitialized
;
static
bool
sIsSystemScrollSpeedOverrideEnabled
;
static
int32_t
sOverrideFactorX
;
static
int32_t
sOverrideFactorY
;
static
void
Initialize
(
)
;
}
;
class
WidgetPointerEvent
:
public
WidgetMouseEvent
{
friend
class
mozilla
:
:
dom
:
:
PBrowserParent
;
friend
class
mozilla
:
:
dom
:
:
PBrowserChild
;
WidgetPointerEvent
(
)
:
mWidth
(
1
)
mHeight
(
1
)
mIsPrimary
(
true
)
{
}
public
:
virtual
WidgetPointerEvent
*
AsPointerEvent
(
)
override
{
return
this
;
}
WidgetPointerEvent
(
bool
aIsTrusted
EventMessage
aMsg
nsIWidget
*
w
)
:
WidgetMouseEvent
(
aIsTrusted
aMsg
w
ePointerEventClass
eReal
)
mWidth
(
1
)
mHeight
(
1
)
mIsPrimary
(
true
)
{
}
explicit
WidgetPointerEvent
(
const
WidgetMouseEvent
&
aEvent
)
:
WidgetMouseEvent
(
aEvent
)
mWidth
(
1
)
mHeight
(
1
)
mIsPrimary
(
true
)
{
mClass
=
ePointerEventClass
;
}
virtual
WidgetEvent
*
Duplicate
(
)
const
override
{
MOZ_ASSERT
(
mClass
=
=
ePointerEventClass
"
Duplicate
(
)
must
be
overridden
by
sub
class
"
)
;
WidgetPointerEvent
*
result
=
new
WidgetPointerEvent
(
false
mMessage
nullptr
)
;
result
-
>
AssignPointerEventData
(
*
this
true
)
;
result
-
>
mFlags
=
mFlags
;
return
result
;
}
uint32_t
mWidth
;
uint32_t
mHeight
;
bool
mIsPrimary
;
void
AssignPointerEventData
(
const
WidgetPointerEvent
&
aEvent
bool
aCopyTargets
)
{
AssignMouseEventData
(
aEvent
aCopyTargets
)
;
mWidth
=
aEvent
.
mWidth
;
mHeight
=
aEvent
.
mHeight
;
mIsPrimary
=
aEvent
.
mIsPrimary
;
}
}
;
}
#
endif
