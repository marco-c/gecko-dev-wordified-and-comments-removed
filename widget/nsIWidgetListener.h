#
ifndef
nsIWidgetListener_h__
#
define
nsIWidgetListener_h__
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRegionFwd
.
h
"
#
include
"
Units
.
h
"
class
nsView
;
class
nsIWidget
;
class
nsIXULWindow
;
namespace
mozilla
{
class
PresShell
;
}
enum
nsSizeMode
{
nsSizeMode_Normal
=
0
nsSizeMode_Minimized
nsSizeMode_Maximized
nsSizeMode_Fullscreen
nsSizeMode_Invalid
}
;
enum
nsWindowZ
{
nsWindowZTop
=
0
nsWindowZBottom
nsWindowZRelative
}
;
class
nsIWidgetListener
{
public
:
virtual
nsIXULWindow
*
GetXULWindow
(
)
;
virtual
nsView
*
GetView
(
)
;
virtual
mozilla
:
:
PresShell
*
GetPresShell
(
)
;
virtual
bool
WindowMoved
(
nsIWidget
*
aWidget
int32_t
aX
int32_t
aY
)
;
virtual
bool
WindowResized
(
nsIWidget
*
aWidget
int32_t
aWidth
int32_t
aHeight
)
;
virtual
void
SizeModeChanged
(
nsSizeMode
aSizeMode
)
;
virtual
void
UIResolutionChanged
(
)
;
virtual
bool
ZLevelChanged
(
bool
aImmediate
nsWindowZ
*
aPlacement
nsIWidget
*
aRequestBelow
nsIWidget
*
*
aActualBelow
)
;
virtual
void
FullscreenWillChange
(
bool
aInFullscreen
)
;
virtual
void
FullscreenChanged
(
bool
aInFullscreen
)
;
virtual
void
OcclusionStateChanged
(
bool
aIsFullyOccluded
)
;
virtual
void
WindowActivated
(
)
;
virtual
void
WindowDeactivated
(
)
;
virtual
void
OSToolbarButtonPressed
(
)
;
virtual
bool
RequestWindowClose
(
nsIWidget
*
aWidget
)
;
virtual
void
WillPaintWindow
(
nsIWidget
*
aWidget
)
;
virtual
bool
PaintWindow
(
nsIWidget
*
aWidget
mozilla
:
:
LayoutDeviceIntRegion
aRegion
)
;
virtual
void
DidPaintWindow
(
)
;
virtual
void
DidCompositeWindow
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
const
mozilla
:
:
TimeStamp
&
aCompositeStart
const
mozilla
:
:
TimeStamp
&
aCompositeEnd
)
;
virtual
void
RequestRepaint
(
)
;
virtual
bool
ShouldNotBeVisible
(
)
;
virtual
nsEventStatus
HandleEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
bool
aUseAttachedEvents
)
;
}
;
#
endif
