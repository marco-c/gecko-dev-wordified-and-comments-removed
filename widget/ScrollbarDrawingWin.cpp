#
include
"
ScrollbarDrawingWin
.
h
"
#
include
"
mozilla
/
gfx
/
Helpers
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsNativeBasicTheme
.
h
"
#
include
"
nsNativeTheme
.
h
"
using
mozilla
:
:
ComputedStyle
;
using
mozilla
:
:
EventStates
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Some
;
using
mozilla
:
:
StyleAppearance
;
using
mozilla
:
:
StyleScrollbarWidth
;
LayoutDeviceIntSize
ScrollbarDrawingWin
:
:
GetMinimumWidgetSize
(
nsPresContext
*
aPresContext
StyleAppearance
aAppearance
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
nsNativeTheme
:
:
IsWidgetScrollbarPart
(
aAppearance
)
)
;
switch
(
aAppearance
)
{
case
StyleAppearance
:
:
ScrollbarbuttonUp
:
case
StyleAppearance
:
:
ScrollbarbuttonDown
:
case
StyleAppearance
:
:
ScrollbarbuttonLeft
:
case
StyleAppearance
:
:
ScrollbarbuttonRight
:
if
(
IsScrollbarWidthThin
(
aFrame
)
)
{
return
LayoutDeviceIntSize
{
}
;
}
[
[
fallthrough
]
]
;
case
StyleAppearance
:
:
ScrollbarthumbVertical
:
case
StyleAppearance
:
:
ScrollbarthumbHorizontal
:
{
auto
*
style
=
nsLayoutUtils
:
:
StyleForScrollbar
(
aFrame
)
;
auto
width
=
style
-
>
StyleUIReset
(
)
-
>
mScrollbarWidth
;
auto
sizes
=
GetScrollbarSizes
(
aPresContext
width
Overlay
:
:
No
)
;
const
bool
isHorizontal
=
aAppearance
=
=
StyleAppearance
:
:
ScrollbarthumbHorizontal
|
|
aAppearance
=
=
StyleAppearance
:
:
ScrollbarbuttonLeft
|
|
aAppearance
=
=
StyleAppearance
:
:
ScrollbarbuttonRight
;
const
auto
size
=
isHorizontal
?
sizes
.
mHorizontal
:
sizes
.
mVertical
;
return
LayoutDeviceIntSize
{
size
size
}
;
}
default
:
return
LayoutDeviceIntSize
{
}
;
}
}
Maybe
<
nsITheme
:
:
Transparency
>
ScrollbarDrawingWin
:
:
GetScrollbarPartTransparency
(
nsIFrame
*
aFrame
StyleAppearance
aAppearance
)
{
if
(
nsNativeTheme
:
:
IsWidgetScrollbarPart
(
aAppearance
)
)
{
if
(
ComputedStyle
*
style
=
GetCustomScrollbarStyle
(
aFrame
)
)
{
auto
*
ui
=
style
-
>
StyleUI
(
)
;
if
(
ui
-
>
mScrollbarColor
.
IsAuto
(
)
|
|
ui
-
>
mScrollbarColor
.
AsColors
(
)
.
track
.
MaybeTransparent
(
)
)
{
return
Some
(
nsITheme
:
:
eTransparent
)
;
}
switch
(
aAppearance
)
{
case
StyleAppearance
:
:
ScrollbarthumbHorizontal
:
case
StyleAppearance
:
:
ScrollbarthumbVertical
:
case
StyleAppearance
:
:
ScrollbarbuttonUp
:
case
StyleAppearance
:
:
ScrollbarbuttonDown
:
case
StyleAppearance
:
:
ScrollbarbuttonLeft
:
case
StyleAppearance
:
:
ScrollbarbuttonRight
:
return
Some
(
nsITheme
:
:
eTransparent
)
;
default
:
break
;
}
}
}
switch
(
aAppearance
)
{
case
StyleAppearance
:
:
ScrollbarHorizontal
:
case
StyleAppearance
:
:
ScrollbarVertical
:
case
StyleAppearance
:
:
Scrollcorner
:
case
StyleAppearance
:
:
Statusbar
:
return
Some
(
nsITheme
:
:
eOpaque
)
;
default
:
break
;
}
return
Nothing
(
)
;
}
ComputedStyle
*
ScrollbarDrawingWin
:
:
GetCustomScrollbarStyle
(
nsIFrame
*
aFrame
bool
*
aDarkScrollbar
)
{
ComputedStyle
*
style
=
nsLayoutUtils
:
:
StyleForScrollbar
(
aFrame
)
;
if
(
style
-
>
StyleUI
(
)
-
>
HasCustomScrollbars
(
)
)
{
return
style
;
}
bool
useDarkScrollbar
=
!
StaticPrefs
:
:
widget_disable_dark_scrollbar
(
)
&
&
nsNativeTheme
:
:
IsDarkBackground
(
aFrame
)
;
if
(
useDarkScrollbar
|
|
IsScrollbarWidthThin
(
*
style
)
)
{
if
(
aDarkScrollbar
)
{
*
aDarkScrollbar
=
useDarkScrollbar
;
}
return
style
;
}
return
nullptr
;
}
template
<
typename
PaintBackendData
>
bool
ScrollbarDrawingWin
:
:
DoPaintScrollbarThumb
(
PaintBackendData
&
aPaintData
const
LayoutDeviceRect
&
aRect
bool
aHorizontal
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
sRGBColor
thumbColor
=
ComputeScrollbarThumbColor
(
aFrame
aStyle
aElementState
aDocumentState
aColors
)
;
ThemeDrawing
:
:
FillRect
(
aPaintData
aRect
thumbColor
)
;
return
true
;
}
bool
ScrollbarDrawingWin
:
:
PaintScrollbarThumb
(
DrawTarget
&
aDrawTarget
const
LayoutDeviceRect
&
aRect
bool
aHorizontal
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
return
DoPaintScrollbarThumb
(
aDrawTarget
aRect
aHorizontal
aFrame
aStyle
aElementState
aDocumentState
aColors
aDpiRatio
)
;
}
bool
ScrollbarDrawingWin
:
:
PaintScrollbarThumb
(
WebRenderBackendData
&
aWrData
const
LayoutDeviceRect
&
aRect
bool
aHorizontal
nsIFrame
*
aFrame
const
ComputedStyle
&
aStyle
const
EventStates
&
aElementState
const
EventStates
&
aDocumentState
const
Colors
&
aColors
const
DPIRatio
&
aDpiRatio
)
{
return
DoPaintScrollbarThumb
(
aWrData
aRect
aHorizontal
aFrame
aStyle
aElementState
aDocumentState
aColors
aDpiRatio
)
;
}
