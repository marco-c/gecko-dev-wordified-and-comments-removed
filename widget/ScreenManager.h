#
ifndef
mozilla_widget_ScreenManager_h
#
define
mozilla_widget_ScreenManager_h
#
include
"
nsIScreenManager
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
widget
/
Screen
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
class
ScreenDetails
;
}
}
namespace
mozilla
:
:
widget
{
class
ScreenManager
final
:
public
nsIScreenManager
{
public
:
class
Helper
{
public
:
virtual
~
Helper
(
)
=
default
;
}
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSISCREENMANAGER
static
ScreenManager
&
GetSingleton
(
)
;
static
already_AddRefed
<
ScreenManager
>
GetAddRefedSingleton
(
)
;
void
SetHelper
(
UniquePtr
<
Helper
>
aHelper
)
;
static
void
Refresh
(
nsTArray
<
RefPtr
<
Screen
>
>
&
&
aScreens
)
;
void
Refresh
(
nsTArray
<
mozilla
:
:
dom
:
:
ScreenDetails
>
&
&
aScreens
)
;
void
CopyScreensToRemote
(
mozilla
:
:
dom
:
:
ContentParent
*
aContentParent
)
;
already_AddRefed
<
Screen
>
GetPrimaryScreen
(
)
;
already_AddRefed
<
Screen
>
ScreenForRect
(
const
DesktopIntRect
&
aRect
)
;
const
nsTArray
<
RefPtr
<
Screen
>
>
&
CurrentScreenList
(
)
const
{
return
mScreenList
;
}
private
:
ScreenManager
(
)
;
virtual
~
ScreenManager
(
)
;
void
RefreshInternal
(
nsTArray
<
RefPtr
<
Screen
>
>
&
&
aScreens
)
;
template
<
class
Range
>
void
CopyScreensToRemoteRange
(
Range
aRemoteRange
)
;
void
CopyScreensToAllRemotesIfIsParent
(
)
;
AutoTArray
<
RefPtr
<
Screen
>
4
>
mScreenList
;
UniquePtr
<
Helper
>
mHelper
;
}
;
}
#
endif
