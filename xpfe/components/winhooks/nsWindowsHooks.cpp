#
ifndef
MAX_BUF
#
define
MAX_BUF
4096
#
endif
#
include
"
nsIDOMWindowInternal
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIPromptService
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsIAllocator
.
h
"
#
include
"
nsXPIDLString
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsWindowsHooks
.
h
"
#
include
<
windows
.
h
>
#
include
<
shlobj
.
h
>
#
include
<
shlguid
.
h
>
#
include
"
nsIDocument
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsIImageLoadingContent
.
h
"
#
include
"
imgIRequest
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
gfxIImageFrame
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
ifndef
MOZ_XUL_APP
#
include
"
nsICmdLineService
.
h
"
#
endif
#
include
"
nsXPFEComponentsCID
.
h
"
#
include
"
nsEmbedCID
.
h
"
#
define
RUNKEY
"
Software
\
\
Microsoft
\
\
Windows
\
\
CurrentVersion
\
\
Run
"
static
nsWindowsHooks
*
gWindowsHooks
=
nsnull
;
NS_IMPL_ISUPPORTS1
(
nsWindowsHooksSettings
nsIWindowsHooksSettings
)
nsWindowsHooksSettings
:
:
nsWindowsHooksSettings
(
)
{
}
nsWindowsHooksSettings
:
:
~
nsWindowsHooksSettings
(
)
{
}
NS_IMETHODIMP
nsWindowsHooksSettings
:
:
Get
(
PRBool
*
result
PRBool
nsWindowsHooksSettings
:
:
*
member
)
{
NS_ENSURE_ARG
(
result
)
;
NS_ENSURE_ARG
(
member
)
;
*
result
=
this
-
>
*
member
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWindowsHooksSettings
:
:
Set
(
PRBool
value
PRBool
nsWindowsHooksSettings
:
:
*
member
)
{
NS_ENSURE_ARG
(
member
)
;
this
-
>
*
member
=
value
;
return
NS_OK
;
}
#
define
DEFINE_GETTER_AND_SETTER
(
attr
member
)
\
NS_IMETHODIMP
\
nsWindowsHooksSettings
:
:
Get
#
#
attr
(
PRBool
*
result
)
{
\
return
this
-
>
Get
(
result
&
nsWindowsHooksSettings
:
:
member
)
;
\
}
\
NS_IMETHODIMP
\
nsWindowsHooksSettings
:
:
Set
#
#
attr
(
PRBool
value
)
{
\
return
this
-
>
Set
(
value
&
nsWindowsHooksSettings
:
:
member
)
;
\
}
DEFINE_GETTER_AND_SETTER
(
IsHandlingHTML
mHandleHTML
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingJPEG
mHandleJPEG
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingGIF
mHandleGIF
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingPNG
mHandlePNG
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingXBM
mHandleXBM
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingBMP
mHandleBMP
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingICO
mHandleICO
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingXML
mHandleXML
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingXHTML
mHandleXHTML
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingXUL
mHandleXUL
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingHTTP
mHandleHTTP
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingHTTPS
mHandleHTTPS
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingFTP
mHandleFTP
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingCHROME
mHandleCHROME
)
DEFINE_GETTER_AND_SETTER
(
IsHandlingGOPHER
mHandleGOPHER
)
DEFINE_GETTER_AND_SETTER
(
ShowDialog
mShowDialog
)
DEFINE_GETTER_AND_SETTER
(
HaveBeenSet
mHaveBeenSet
)
NS_IMPL_ISUPPORTS1
(
nsWindowsHooks
nsIWindowsHooks
)
static
const
char
*
jpgExts
[
]
=
{
"
.
jpg
"
"
.
jpe
"
"
.
jpeg
"
"
.
jfif
"
"
.
pjpeg
"
"
.
pjp
"
0
}
;
static
const
char
*
gifExts
[
]
=
{
"
.
gif
"
0
}
;
static
const
char
*
pngExts
[
]
=
{
"
.
png
"
0
}
;
static
const
char
*
xbmExts
[
]
=
{
"
.
xbm
"
0
}
;
static
const
char
*
bmpExts
[
]
=
{
"
.
bmp
"
"
.
rle
"
"
.
dib
"
0
}
;
static
const
char
*
icoExts
[
]
=
{
"
.
ico
"
0
}
;
static
const
char
*
xmlExts
[
]
=
{
"
.
xml
"
0
}
;
static
const
char
*
xhtmExts
[
]
=
{
"
.
xht
"
"
.
xhtml
"
0
}
;
static
const
char
*
xulExts
[
]
=
{
"
.
xul
"
0
}
;
static
const
char
*
htmExts
[
]
=
{
"
.
htm
"
"
.
html
"
"
.
shtml
"
0
}
;
nsWindowsHooks
:
:
nsWindowsHooks
(
)
:
http
(
"
http
"
)
https
(
"
https
"
)
ftp
(
"
ftp
"
)
chrome
(
"
chrome
"
)
gopher
(
"
gopher
"
)
jpg
(
jpgExts
"
MozillaJPEG
"
"
JPEG
Image
"
"
jpegfile
"
"
jpeg
-
file
.
ico
"
)
gif
(
gifExts
"
MozillaGIF
"
"
GIF
Image
"
"
giffile
"
"
gif
-
file
.
ico
"
)
png
(
pngExts
"
MozillaPNG
"
"
PNG
Image
"
"
pngfile
"
"
image
-
file
.
ico
"
)
xbm
(
xbmExts
"
MozillaXBM
"
"
XBM
Image
"
"
xbmfile
"
"
image
-
file
.
ico
"
)
bmp
(
bmpExts
"
MozillaBMP
"
"
BMP
Image
"
"
"
"
image
-
file
.
ico
"
)
ico
(
icoExts
"
MozillaICO
"
"
Icon
"
"
icofile
"
"
%
1
"
)
xml
(
xmlExts
"
MozillaXML
"
"
XML
Document
"
"
xmlfile
"
"
xml
-
file
.
ico
"
)
xhtml
(
xhtmExts
"
MozillaXHTML
"
"
XHTML
Document
"
"
"
"
misc
-
file
.
ico
"
)
xul
(
xulExts
"
MozillaXUL
"
"
Mozilla
XUL
Document
"
"
"
"
xul
-
file
.
ico
"
)
mozillaMarkup
(
htmExts
"
MozillaHTML
"
"
HTML
Document
"
"
htmlfile
"
"
html
-
file
.
ico
"
)
{
gWindowsHooks
=
this
;
}
nsWindowsHooks
:
:
~
nsWindowsHooks
(
)
{
gWindowsHooks
=
nsnull
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
GetSettings
(
nsWindowsHooksSettings
*
*
result
)
{
nsresult
rv
=
NS_OK
;
NS_ENSURE_ARG
(
result
)
;
nsWindowsHooksSettings
*
prefs
=
*
result
=
new
nsWindowsHooksSettings
;
NS_ENSURE_TRUE
(
prefs
NS_ERROR_OUT_OF_MEMORY
)
;
NS_ADDREF
(
prefs
)
;
prefs
-
>
mHandleHTTP
=
BoolRegistryEntry
(
"
isHandlingHTTP
"
)
;
prefs
-
>
mHandleHTTPS
=
BoolRegistryEntry
(
"
isHandlingHTTPS
"
)
;
prefs
-
>
mHandleFTP
=
BoolRegistryEntry
(
"
isHandlingFTP
"
)
;
prefs
-
>
mHandleCHROME
=
BoolRegistryEntry
(
"
isHandlingCHROME
"
)
;
prefs
-
>
mHandleGOPHER
=
BoolRegistryEntry
(
"
isHandlingGOPHER
"
)
;
prefs
-
>
mHandleHTML
=
BoolRegistryEntry
(
"
isHandlingHTML
"
)
;
prefs
-
>
mHandleJPEG
=
BoolRegistryEntry
(
"
isHandlingJPEG
"
)
;
prefs
-
>
mHandleGIF
=
BoolRegistryEntry
(
"
isHandlingGIF
"
)
;
prefs
-
>
mHandlePNG
=
BoolRegistryEntry
(
"
isHandlingPNG
"
)
;
prefs
-
>
mHandleXBM
=
BoolRegistryEntry
(
"
isHandlingXBM
"
)
;
prefs
-
>
mHandleBMP
=
BoolRegistryEntry
(
"
isHandlingBMP
"
)
;
prefs
-
>
mHandleICO
=
BoolRegistryEntry
(
"
isHandlingICO
"
)
;
prefs
-
>
mHandleXML
=
BoolRegistryEntry
(
"
isHandlingXML
"
)
;
prefs
-
>
mHandleXHTML
=
BoolRegistryEntry
(
"
isHandlingXHTML
"
)
;
prefs
-
>
mHandleXUL
=
BoolRegistryEntry
(
"
isHandlingXUL
"
)
;
prefs
-
>
mShowDialog
=
BoolRegistryEntry
(
"
showDialog
"
)
;
prefs
-
>
mHaveBeenSet
=
BoolRegistryEntry
(
"
haveBeenSet
"
)
;
#
ifdef
DEBUG_law
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
GetPreferences
failed
"
)
;
#
endif
return
rv
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
GetSettings
(
nsIWindowsHooksSettings
*
*
_retval
)
{
nsWindowsHooksSettings
*
prefs
;
nsresult
rv
=
this
-
>
GetSettings
(
&
prefs
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
prefs
-
>
QueryInterface
(
NS_GET_IID
(
nsIWindowsHooksSettings
)
(
void
*
*
)
_retval
)
;
NS_RELEASE
(
prefs
)
;
}
return
rv
;
}
static
PRBool
misMatch
(
const
PRBool
&
flag
const
ProtocolRegistryEntry
&
entry
)
{
PRBool
result
=
PR_FALSE
;
if
(
flag
)
{
if
(
entry
.
currentSetting
(
)
!
=
entry
.
setting
)
{
result
=
PR_TRUE
;
}
}
return
result
;
}
static
PRBool
isAccessRestricted
(
)
{
char
subKey
[
]
=
"
Software
\
\
Mozilla
-
Test
Key
"
;
PRBool
result
=
PR_FALSE
;
DWORD
dwDisp
=
0
;
HKEY
key
;
DWORD
rc
=
:
:
RegCreateKeyEx
(
HKEY_LOCAL_MACHINE
subKey
0
NULL
REG_OPTION_NON_VOLATILE
KEY_WRITE
NULL
&
key
&
dwDisp
)
;
if
(
rc
=
=
ERROR_SUCCESS
)
{
:
:
RegCloseKey
(
key
)
;
switch
(
dwDisp
)
{
case
REG_CREATED_NEW_KEY
:
:
:
RegDeleteKey
(
HKEY_LOCAL_MACHINE
subKey
)
;
break
;
case
REG_OPENED_EXISTING_KEY
:
break
;
}
}
else
{
result
=
PR_TRUE
;
}
return
result
;
}
NS_IMETHODIMP
nsWindowsHooksSettings
:
:
GetRegistryMatches
(
PRBool
*
_retval
)
{
NS_ENSURE_ARG
(
_retval
)
;
*
_retval
=
PR_TRUE
;
if
(
misMatch
(
mHandleHTTP
gWindowsHooks
-
>
http
)
|
|
misMatch
(
mHandleHTTPS
gWindowsHooks
-
>
https
)
|
|
misMatch
(
mHandleFTP
gWindowsHooks
-
>
ftp
)
|
|
misMatch
(
mHandleCHROME
gWindowsHooks
-
>
chrome
)
|
|
misMatch
(
mHandleGOPHER
gWindowsHooks
-
>
gopher
)
|
|
misMatch
(
mHandleHTML
gWindowsHooks
-
>
mozillaMarkup
)
|
|
misMatch
(
mHandleJPEG
gWindowsHooks
-
>
jpg
)
|
|
misMatch
(
mHandleGIF
gWindowsHooks
-
>
gif
)
|
|
misMatch
(
mHandlePNG
gWindowsHooks
-
>
png
)
|
|
misMatch
(
mHandleXBM
gWindowsHooks
-
>
xbm
)
|
|
misMatch
(
mHandleBMP
gWindowsHooks
-
>
bmp
)
|
|
misMatch
(
mHandleICO
gWindowsHooks
-
>
ico
)
|
|
misMatch
(
mHandleXML
gWindowsHooks
-
>
xml
)
|
|
misMatch
(
mHandleXHTML
gWindowsHooks
-
>
xhtml
)
|
|
misMatch
(
mHandleXUL
gWindowsHooks
-
>
xul
)
)
{
*
_retval
=
PR_FALSE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
CheckSettings
(
nsIDOMWindowInternal
*
aParent
PRBool
*
_retval
)
{
nsresult
rv
=
NS_OK
;
*
_retval
=
PR_FALSE
;
static
PRBool
alreadyChecked
=
PR_FALSE
;
if
(
alreadyChecked
)
{
return
NS_OK
;
}
else
{
alreadyChecked
=
PR_TRUE
;
if
(
isAccessRestricted
(
)
)
{
return
NS_OK
;
}
}
nsWindowsHooksSettings
*
settings
;
rv
=
this
-
>
GetSettings
(
&
settings
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
settings
)
{
if
(
!
settings
-
>
mHaveBeenSet
)
{
settings
-
>
mHandleHTTP
=
PR_TRUE
;
settings
-
>
mHandleHTTPS
=
PR_TRUE
;
settings
-
>
mHandleFTP
=
PR_TRUE
;
settings
-
>
mHandleCHROME
=
PR_TRUE
;
settings
-
>
mHandleGOPHER
=
PR_TRUE
;
settings
-
>
mHandleHTML
=
PR_TRUE
;
settings
-
>
mHandleJPEG
=
PR_FALSE
;
settings
-
>
mHandleGIF
=
PR_FALSE
;
settings
-
>
mHandlePNG
=
PR_FALSE
;
settings
-
>
mHandleXBM
=
PR_FALSE
;
settings
-
>
mHandleBMP
=
PR_FALSE
;
settings
-
>
mHandleICO
=
PR_FALSE
;
settings
-
>
mHandleXML
=
PR_TRUE
;
settings
-
>
mHandleXHTML
=
PR_TRUE
;
settings
-
>
mHandleXUL
=
PR_TRUE
;
settings
-
>
mShowDialog
=
PR_TRUE
;
}
PRBool
installing
=
PR_FALSE
;
#
ifndef
MOZ_XUL_APP
if
(
!
settings
-
>
mShowDialog
)
{
nsCOMPtr
<
nsICmdLineService
>
cmdLineArgs
(
do_GetService
(
NS_COMMANDLINESERVICE_CONTRACTID
&
rv
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
cmdLineArgs
)
{
nsXPIDLCString
installer
;
rv
=
cmdLineArgs
-
>
GetCmdLineValue
(
"
-
installer
"
getter_Copies
(
installer
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
installer
)
{
installing
=
PR_TRUE
;
}
}
}
#
endif
if
(
settings
-
>
mShowDialog
|
|
installing
)
{
PRBool
matches
=
PR_TRUE
;
settings
-
>
GetRegistryMatches
(
&
matches
)
;
if
(
!
matches
)
{
nsCOMPtr
<
nsIPromptService
>
promptService
(
do_GetService
(
NS_PROMPTSERVICE_CONTRACTID
)
)
;
nsCOMPtr
<
nsIStringBundleService
>
bundleService
(
do_GetService
(
NS_STRINGBUNDLE_CONTRACTID
&
rv
)
)
;
if
(
promptService
&
&
bundleService
)
{
nsCOMPtr
<
nsIStringBundle
>
bundle
;
nsCOMPtr
<
nsIStringBundle
>
brandBundle
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
global
-
platform
/
locale
/
nsWindowsHooks
.
properties
"
getter_AddRefs
(
bundle
)
)
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
getter_AddRefs
(
brandBundle
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
bundle
&
&
brandBundle
)
{
nsXPIDLString
text
label
shortName
;
if
(
NS_SUCCEEDED
(
(
rv
=
brandBundle
-
>
GetStringFromName
(
NS_LITERAL_STRING
(
"
brandShortName
"
)
.
get
(
)
getter_Copies
(
shortName
)
)
)
)
)
{
const
PRUnichar
*
formatStrings
[
]
=
{
shortName
.
get
(
)
}
;
if
(
NS_SUCCEEDED
(
(
rv
=
bundle
-
>
FormatStringFromName
(
NS_LITERAL_STRING
(
"
promptText
"
)
.
get
(
)
formatStrings
1
getter_Copies
(
text
)
)
)
)
&
&
NS_SUCCEEDED
(
(
rv
=
bundle
-
>
GetStringFromName
(
NS_LITERAL_STRING
(
"
checkBoxLabel
"
)
.
get
(
)
getter_Copies
(
label
)
)
)
)
)
{
PRBool
showDialog
=
settings
-
>
mShowDialog
;
PRInt32
dlgResult
=
-
1
;
const
PRUnichar
*
labelArg
=
0
;
if
(
settings
-
>
mHaveBeenSet
)
{
labelArg
=
label
;
}
rv
=
promptService
-
>
ConfirmEx
(
aParent
shortName
text
(
nsIPromptService
:
:
BUTTON_TITLE_YES
*
nsIPromptService
:
:
BUTTON_POS_0
)
+
(
nsIPromptService
:
:
BUTTON_TITLE_CANCEL
*
nsIPromptService
:
:
BUTTON_POS_1
)
+
(
nsIPromptService
:
:
BUTTON_TITLE_NO
*
nsIPromptService
:
:
BUTTON_POS_2
)
nsnull
nsnull
nsnull
labelArg
&
showDialog
&
dlgResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
*
_retval
=
PR_TRUE
;
switch
(
dlgResult
)
{
case
0
:
settings
-
>
mShowDialog
=
showDialog
;
rv
=
SetSettings
(
settings
)
;
#
ifdef
DEBUG_law
printf
(
"
Yes
SetSettings
returned
0x
%
08X
\
n
"
(
int
)
rv
)
;
#
endif
break
;
case
2
:
BoolRegistryEntry
(
"
haveBeenSet
"
)
.
set
(
)
;
if
(
showDialog
)
{
BoolRegistryEntry
(
"
showDialog
"
)
.
set
(
)
;
}
else
{
BoolRegistryEntry
(
"
showDialog
"
)
.
reset
(
)
;
}
#
ifdef
DEBUG_law
printf
(
"
No
haveBeenSet
=
1
and
showDialog
=
%
d
\
n
"
(
int
)
showDialog
)
;
#
endif
break
;
default
:
#
ifdef
DEBUG_law
printf
(
"
Cancel
\
n
"
)
;
#
endif
break
;
}
}
}
}
}
}
}
#
ifdef
DEBUG_law
else
{
printf
(
"
Registry
and
prefs
match
\
n
"
)
;
}
#
endif
}
#
ifdef
DEBUG_law
else
{
printf
(
"
showDialog
is
false
and
not
installing
\
n
"
)
;
}
#
endif
settings
-
>
Release
(
)
;
}
return
rv
;
}
nsresult
putPRBoolIntoRegistry
(
const
char
*
valueName
nsIWindowsHooksSettings
*
prefs
nsWindowsHooksSettings
:
:
getter
memFun
)
{
PRBool
boolValue
;
(
void
)
(
prefs
-
>
*
memFun
)
(
&
boolValue
)
;
DWORD
dwordValue
=
boolValue
;
BoolRegistryEntry
pref
(
valueName
)
;
nsresult
rv
=
boolValue
?
pref
.
set
(
)
:
pref
.
reset
(
)
;
return
rv
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
SetSettings
(
nsIWindowsHooksSettings
*
prefs
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
putPRBoolIntoRegistry
(
"
isHandlingHTTP
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingHTTP
)
;
putPRBoolIntoRegistry
(
"
isHandlingHTTPS
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingHTTPS
)
;
putPRBoolIntoRegistry
(
"
isHandlingFTP
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingFTP
)
;
putPRBoolIntoRegistry
(
"
isHandlingCHROME
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingCHROME
)
;
putPRBoolIntoRegistry
(
"
isHandlingGOPHER
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingGOPHER
)
;
putPRBoolIntoRegistry
(
"
isHandlingHTML
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingHTML
)
;
putPRBoolIntoRegistry
(
"
isHandlingJPEG
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingJPEG
)
;
putPRBoolIntoRegistry
(
"
isHandlingGIF
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingGIF
)
;
putPRBoolIntoRegistry
(
"
isHandlingPNG
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingPNG
)
;
putPRBoolIntoRegistry
(
"
isHandlingXBM
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingXBM
)
;
putPRBoolIntoRegistry
(
"
isHandlingBMP
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingBMP
)
;
putPRBoolIntoRegistry
(
"
isHandlingICO
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingICO
)
;
putPRBoolIntoRegistry
(
"
isHandlingXML
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingXML
)
;
putPRBoolIntoRegistry
(
"
isHandlingXHTML
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingXHTML
)
;
putPRBoolIntoRegistry
(
"
isHandlingXUL
"
prefs
&
nsIWindowsHooksSettings
:
:
GetIsHandlingXUL
)
;
putPRBoolIntoRegistry
(
"
showDialog
"
prefs
&
nsIWindowsHooksSettings
:
:
GetShowDialog
)
;
BoolRegistryEntry
(
"
haveBeenSet
"
)
.
set
(
)
;
rv
=
SetRegistry
(
)
;
return
rv
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
SetRegistry
(
)
{
nsresult
rv
=
NS_OK
;
nsWindowsHooksSettings
*
prefs
;
rv
=
this
-
>
GetSettings
(
&
prefs
)
;
NS_ENSURE_TRUE
(
NS_SUCCEEDED
(
rv
)
rv
)
;
if
(
prefs
-
>
mHandleHTML
)
{
(
void
)
mozillaMarkup
.
set
(
)
;
}
else
{
(
void
)
mozillaMarkup
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleJPEG
)
{
(
void
)
jpg
.
set
(
)
;
}
else
{
(
void
)
jpg
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleGIF
)
{
(
void
)
gif
.
set
(
)
;
}
else
{
(
void
)
gif
.
reset
(
)
;
}
if
(
prefs
-
>
mHandlePNG
)
{
(
void
)
png
.
set
(
)
;
}
else
{
(
void
)
png
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleXBM
)
{
(
void
)
xbm
.
set
(
)
;
}
else
{
(
void
)
xbm
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleBMP
)
{
(
void
)
bmp
.
set
(
)
;
}
else
{
(
void
)
bmp
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleICO
)
{
(
void
)
ico
.
set
(
)
;
}
else
{
(
void
)
ico
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleXML
)
{
(
void
)
xml
.
set
(
)
;
}
else
{
(
void
)
xml
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleXHTML
)
{
(
void
)
xhtml
.
set
(
)
;
}
else
{
(
void
)
xhtml
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleXUL
)
{
(
void
)
xul
.
set
(
)
;
}
else
{
(
void
)
xul
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleHTTP
)
{
(
void
)
http
.
set
(
)
;
}
else
{
(
void
)
http
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleHTTPS
)
{
(
void
)
https
.
set
(
)
;
}
else
{
(
void
)
https
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleFTP
)
{
(
void
)
ftp
.
set
(
)
;
}
else
{
(
void
)
ftp
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleCHROME
)
{
(
void
)
chrome
.
set
(
)
;
}
else
{
(
void
)
chrome
.
reset
(
)
;
}
if
(
prefs
-
>
mHandleGOPHER
)
{
(
void
)
gopher
.
set
(
)
;
}
else
{
(
void
)
gopher
.
reset
(
)
;
}
SHChangeNotify
(
SHCNE_ASSOCCHANGED
SHCNF_IDLIST
NULL
NULL
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
IsOptionEnabled
(
const
char
*
option
PRBool
*
_retval
)
{
NS_ASSERTION
(
option
"
nsWindowsHooks
:
:
IsOptionEnabled
requires
something
like
\
"
-
turbo
\
"
"
)
;
*
_retval
=
PR_FALSE
;
RegistryEntry
startup
(
HKEY_CURRENT_USER
RUNKEY
NS_QUICKLAUNCH_RUN_KEY
NULL
)
;
nsCString
cargs
=
startup
.
currentSetting
(
)
;
if
(
cargs
.
Find
(
option
PR_TRUE
)
!
=
kNotFound
)
*
_retval
=
PR_TRUE
;
return
NS_OK
;
}
void
grabArgs
(
char
*
optionline
char
*
*
args
)
{
nsCRT
:
:
strtok
(
optionline
"
\
"
"
&
optionline
)
;
if
(
optionline
!
=
NULL
)
*
args
=
nsCRT
:
:
strtok
(
optionline
"
\
"
"
&
optionline
)
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
StartupAddOption
(
const
char
*
option
)
{
NS_ASSERTION
(
option
"
nsWindowsHooks
:
:
StartupAddOption
requires
something
like
\
"
-
turbo
\
"
"
)
;
PRBool
retval
;
IsOptionEnabled
(
option
&
retval
)
;
if
(
retval
)
return
NS_OK
;
RegistryEntry
startup
(
HKEY_CURRENT_USER
RUNKEY
NS_QUICKLAUNCH_RUN_KEY
NULL
)
;
nsCString
cargs
=
startup
.
currentSetting
(
)
;
nsCAutoString
newsetting
;
newsetting
.
Assign
(
'
\
"
'
)
;
newsetting
.
Append
(
thisApplication
(
)
)
;
newsetting
.
Append
(
'
\
"
'
)
;
if
(
!
cargs
.
IsEmpty
(
)
)
{
char
*
args
;
grabArgs
(
cargs
.
BeginWriting
(
)
&
args
)
;
if
(
args
!
=
NULL
)
newsetting
.
Append
(
args
)
;
else
{
IsOptionEnabled
(
"
-
turbo
"
&
retval
)
;
if
(
retval
)
newsetting
.
Append
(
"
-
turbo
"
)
;
}
}
newsetting
.
Append
(
'
'
)
;
newsetting
.
Append
(
option
)
;
startup
.
setting
=
newsetting
;
startup
.
set
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
StartupRemoveOption
(
const
char
*
option
)
{
NS_ASSERTION
(
option
"
nsWindowsHooks
:
:
StartupRemoveOption
requires
something
like
\
"
-
turbo
\
"
"
)
;
PRBool
startupFound
;
IsOptionEnabled
(
option
&
startupFound
)
;
if
(
!
startupFound
)
return
NS_OK
;
RegistryEntry
startup
(
HKEY_CURRENT_USER
RUNKEY
NS_QUICKLAUNCH_RUN_KEY
NULL
)
;
nsCString
cargs
=
startup
.
currentSetting
(
)
;
char
*
args
;
grabArgs
(
cargs
.
BeginWriting
(
)
&
args
)
;
nsCAutoString
launchcommand
;
if
(
args
)
{
launchcommand
.
Assign
(
args
)
;
PRInt32
optionlocation
=
launchcommand
.
Find
(
option
PR_TRUE
)
;
if
(
optionlocation
!
=
kNotFound
)
launchcommand
.
Cut
(
optionlocation
-
1
strlen
(
option
)
+
1
)
;
}
if
(
launchcommand
.
IsEmpty
(
)
)
{
startup
.
set
(
)
;
}
else
{
nsCAutoString
ufileName
;
ufileName
.
Assign
(
'
\
"
'
)
;
ufileName
.
Append
(
thisApplication
(
)
)
;
ufileName
.
Append
(
'
\
"
'
)
;
ufileName
.
Append
(
launchcommand
)
;
startup
.
setting
=
ufileName
;
startup
.
set
(
)
;
}
return
NS_OK
;
}
nsresult
WriteBitmap
(
nsIFile
*
aFile
gfxIImageFrame
*
aImage
)
{
PRInt32
width
height
;
aImage
-
>
GetWidth
(
&
width
)
;
aImage
-
>
GetHeight
(
&
height
)
;
PRUint8
*
bits
;
PRUint32
length
;
aImage
-
>
LockImageData
(
)
;
aImage
-
>
GetImageData
(
&
bits
&
length
)
;
if
(
!
bits
)
{
aImage
-
>
UnlockImageData
(
)
;
return
NS_ERROR_FAILURE
;
}
PRUint32
bpr
;
aImage
-
>
GetImageBytesPerRow
(
&
bpr
)
;
PRInt32
bitCount
=
bpr
/
width
;
BITMAPINFOHEADER
bmi
;
bmi
.
biSize
=
sizeof
(
BITMAPINFOHEADER
)
;
bmi
.
biWidth
=
width
;
bmi
.
biHeight
=
height
;
bmi
.
biPlanes
=
1
;
bmi
.
biBitCount
=
(
WORD
)
bitCount
*
8
;
bmi
.
biCompression
=
BI_RGB
;
bmi
.
biSizeImage
=
length
;
bmi
.
biXPelsPerMeter
=
0
;
bmi
.
biYPelsPerMeter
=
0
;
bmi
.
biClrUsed
=
0
;
bmi
.
biClrImportant
=
0
;
BITMAPFILEHEADER
bf
;
bf
.
bfType
=
0x4D42
;
bf
.
bfReserved1
=
0
;
bf
.
bfReserved2
=
0
;
bf
.
bfOffBits
=
sizeof
(
BITMAPFILEHEADER
)
+
sizeof
(
BITMAPINFOHEADER
)
;
bf
.
bfSize
=
bf
.
bfOffBits
+
bmi
.
biSizeImage
;
nsresult
rv
;
nsCOMPtr
<
nsIOutputStream
>
stream
;
rv
=
NS_NewLocalFileOutputStream
(
getter_AddRefs
(
stream
)
aFile
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
NS_ERROR_FAILURE
;
if
(
stream
)
{
PRUint32
written
;
stream
-
>
Write
(
(
const
char
*
)
&
bf
sizeof
(
BITMAPFILEHEADER
)
&
written
)
;
if
(
written
=
=
sizeof
(
BITMAPFILEHEADER
)
)
{
stream
-
>
Write
(
(
const
char
*
)
&
bmi
sizeof
(
BITMAPINFOHEADER
)
&
written
)
;
if
(
written
=
=
sizeof
(
BITMAPINFOHEADER
)
)
{
#
ifndef
MOZ_CAIRO_GFX
stream
-
>
Write
(
(
const
char
*
)
bits
length
&
written
)
;
if
(
written
=
=
length
)
rv
=
NS_OK
;
#
else
PRUint32
i
=
length
;
rv
=
NS_OK
;
do
{
i
-
=
bpr
;
stream
-
>
Write
(
(
(
const
char
*
)
bits
)
+
i
bpr
&
written
)
;
if
(
written
!
=
bpr
)
{
rv
=
NS_ERROR_FAILURE
;
break
;
}
}
while
(
i
!
=
0
)
;
#
endif
}
}
stream
-
>
Close
(
)
;
}
aImage
-
>
UnlockImageData
(
)
;
return
rv
;
}
NS_IMETHODIMP
nsWindowsHooks
:
:
SetImageAsWallpaper
(
nsIDOMElement
*
aElement
PRBool
aUseBackground
)
{
nsresult
rv
;
nsCOMPtr
<
gfxIImageFrame
>
gfxFrame
;
if
(
aUseBackground
)
{
}
else
{
nsCOMPtr
<
nsIImageLoadingContent
>
imageContent
=
do_QueryInterface
(
aElement
&
rv
)
;
if
(
!
imageContent
)
return
rv
;
nsCOMPtr
<
imgIRequest
>
request
;
rv
=
imageContent
-
>
GetRequest
(
nsIImageLoadingContent
:
:
CURRENT_REQUEST
getter_AddRefs
(
request
)
)
;
if
(
!
request
)
return
rv
;
nsCOMPtr
<
imgIContainer
>
container
;
rv
=
request
-
>
GetImage
(
getter_AddRefs
(
container
)
)
;
if
(
!
container
)
return
NS_ERROR_FAILURE
;
container
-
>
GetCurrentFrame
(
getter_AddRefs
(
gfxFrame
)
)
;
}
if
(
!
gfxFrame
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIFile
>
file
;
rv
=
NS_GetSpecialDirectory
(
NS_APP_APPLICATION_REGISTRY_DIR
getter_AddRefs
(
file
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsXPIDLString
brandName
fileLeafName
;
nsCOMPtr
<
nsIStringBundleService
>
bundleService
=
do_GetService
(
NS_STRINGBUNDLE_CONTRACTID
&
rv
)
;
NS_ENSURE_TRUE
(
bundleService
rv
)
;
nsCOMPtr
<
nsIStringBundle
>
bundle
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
getter_AddRefs
(
bundle
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
bundle
-
>
GetStringFromName
(
NS_LITERAL_STRING
(
"
brandShortName
"
)
.
get
(
)
getter_Copies
(
brandName
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
bundleService
-
>
CreateBundle
(
"
chrome
:
/
/
global
-
platform
/
locale
/
nsWindowsHooks
.
properties
"
getter_AddRefs
(
bundle
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
const
PRUnichar
*
stringArray
[
]
=
{
brandName
.
get
(
)
}
;
rv
=
bundle
-
>
FormatStringFromName
(
NS_LITERAL_STRING
(
"
wallpaperFile
"
)
.
get
(
)
stringArray
NS_ARRAY_LENGTH
(
stringArray
)
getter_Copies
(
fileLeafName
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
fileLeafName
.
AppendLiteral
(
"
.
bmp
"
)
;
rv
=
file
-
>
Append
(
fileLeafName
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
WriteBitmap
(
file
gfxFrame
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCAutoString
nativePath
;
rv
=
file
-
>
GetNativePath
(
nativePath
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
:
:
SystemParametersInfo
(
SPI_SETDESKWALLPAPER
0
(
PVOID
)
nativePath
.
get
(
)
SPIF_UPDATEINIFILE
|
SPIF_SENDWININICHANGE
)
;
return
rv
;
}
