#
include
"
nsISupports
.
idl
"
#
include
"
nsISimpleEnumerator
.
idl
"
%
{
C
+
+
#
define
NS_WINDOWMEDIATOR_CID
\
{
0x79a2b7cc
0xf05b
0x4605
\
{
0xbf
0xa0
0xfa
0xc5
0x4f
0x27
0xee
0xc8
}
}
#
define
NS_WINDOWMEDIATOR_CONTRACTID
\
"
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
"
enum
class
WindowMediatorFilter
:
uint8_t
{
None
=
0
SkipPrivateBrowsing
=
1
<
<
0
SkipClosed
=
1
<
<
1
SkipNonPrivateBrowsing
=
1
<
<
2
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
WindowMediatorFilter
)
%
}
interface
mozIDOMWindow
;
interface
mozIDOMWindowProxy
;
interface
nsIAppWindow
;
interface
nsIWidget
;
interface
nsIWindowMediatorListener
;
[
scriptable
uuid
(
df0da056
-
357d
-
427f
-
bafd
-
e6cbf19c9381
)
]
interface
nsIWindowMediator
:
nsISupports
{
nsISimpleEnumerator
getEnumerator
(
in
wstring
aWindowType
)
;
nsISimpleEnumerator
getAppWindowEnumerator
(
in
wstring
aWindowType
)
;
nsISimpleEnumerator
getZOrderAppWindowEnumerator
(
in
wstring
aWindowType
in
boolean
aFrontToBack
)
;
mozIDOMWindowProxy
getMostRecentWindow
(
in
wstring
aWindowType
)
;
mozIDOMWindowProxy
getMostRecentBrowserWindow
(
)
;
mozIDOMWindowProxy
getMostRecentNonPBWindow
(
in
wstring
aWindowType
)
;
mozIDOMWindowProxy
getMostRecentWindowBy
(
in
wstring
aWindowType
in
uint8_t
aFilter
)
;
mozIDOMWindowProxy
getOuterWindowWithId
(
in
unsigned
long
long
aOuterWindowID
)
;
mozIDOMWindow
getCurrentInnerWindowWithId
(
in
unsigned
long
long
aInnerWindowID
)
;
[
noscript
]
void
registerWindow
(
in
nsIAppWindow
aWindow
)
;
[
noscript
]
void
unregisterWindow
(
in
nsIAppWindow
aWindow
)
;
[
noscript
]
void
updateWindowTimeStamp
(
in
nsIAppWindow
aWindow
)
;
void
addListener
(
in
nsIWindowMediatorListener
aListener
)
;
void
removeListener
(
in
nsIWindowMediatorListener
aListener
)
;
}
;
