#
include
"
nsWebShellWindow
.
h
"
#
include
"
nsLayoutCID
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsIWeakReference
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIIOService
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsEscape
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsWidgetInitData
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsIWidgetListener
.
h
"
#
include
"
nsINodeList
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIWebProgress
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIDocumentLoaderFactory
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsIScreen
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
LoadURIOptionsBinding
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
gfxPlatform
.
h
"
#
ifdef
XP_MACOSX
#
include
"
nsINativeMenuService
.
h
"
#
define
USE_NATIVE_MENUS
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
#
define
SIZE_PERSISTENCE_TIMEOUT
500
/
/
msec
nsWebShellWindow
:
:
nsWebShellWindow
(
uint32_t
aChromeFlags
)
:
nsXULWindow
(
aChromeFlags
)
mSPTimerLock
(
"
nsWebShellWindow
.
mSPTimerLock
"
)
mWidgetListenerDelegate
(
this
)
{
}
nsWebShellWindow
:
:
~
nsWebShellWindow
(
)
{
MutexAutoLock
lock
(
mSPTimerLock
)
;
if
(
mSPTimer
)
mSPTimer
-
>
Cancel
(
)
;
}
NS_IMPL_ADDREF_INHERITED
(
nsWebShellWindow
nsXULWindow
)
NS_IMPL_RELEASE_INHERITED
(
nsWebShellWindow
nsXULWindow
)
NS_INTERFACE_MAP_BEGIN
(
nsWebShellWindow
)
NS_INTERFACE_MAP_ENTRY
(
nsIWebProgressListener
)
NS_INTERFACE_MAP_END_INHERITING
(
nsXULWindow
)
nsresult
nsWebShellWindow
:
:
Initialize
(
nsIXULWindow
*
aParent
nsIXULWindow
*
aOpener
nsIURI
*
aUrl
int32_t
aInitialWidth
int32_t
aInitialHeight
bool
aIsHiddenWindow
nsITabParent
*
aOpeningTab
mozIDOMWindowProxy
*
aOpenerWindow
nsWidgetInitData
&
widgetInitData
)
{
nsresult
rv
;
nsCOMPtr
<
nsIWidget
>
parentWidget
;
mIsHiddenWindow
=
aIsHiddenWindow
;
int32_t
initialX
=
0
initialY
=
0
;
nsCOMPtr
<
nsIBaseWindow
>
base
(
do_QueryInterface
(
aOpener
)
)
;
if
(
base
)
{
int32_t
x
y
width
height
;
rv
=
base
-
>
GetPositionAndSize
(
&
x
&
y
&
width
&
height
)
;
if
(
NS_FAILED
(
rv
)
)
{
mOpenerScreenRect
.
SetEmpty
(
)
;
}
else
{
double
scale
;
if
(
NS_SUCCEEDED
(
base
-
>
GetUnscaledDevicePixelsPerCSSPixel
(
&
scale
)
)
)
{
mOpenerScreenRect
.
SetRect
(
NSToIntRound
(
x
/
scale
)
NSToIntRound
(
y
/
scale
)
NSToIntRound
(
width
/
scale
)
NSToIntRound
(
height
/
scale
)
)
;
}
else
{
mOpenerScreenRect
.
SetRect
(
x
y
width
height
)
;
}
initialX
=
mOpenerScreenRect
.
X
(
)
;
initialY
=
mOpenerScreenRect
.
Y
(
)
;
ConstrainToOpenerScreen
(
&
initialX
&
initialY
)
;
}
}
DesktopIntRect
deskRect
(
initialX
initialY
aInitialWidth
aInitialHeight
)
;
if
(
gfxPlatform
:
:
IsHeadless
(
)
)
{
mWindow
=
nsIWidget
:
:
CreateHeadlessWidget
(
)
;
}
else
{
mWindow
=
nsIWidget
:
:
CreateTopLevelWindow
(
)
;
}
if
(
!
mWindow
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIBaseWindow
>
parentAsWin
(
do_QueryInterface
(
aParent
)
)
;
if
(
parentAsWin
)
{
parentAsWin
-
>
GetMainWidget
(
getter_AddRefs
(
parentWidget
)
)
;
mParentWindow
=
do_GetWeakReference
(
aParent
)
;
}
mWindow
-
>
SetWidgetListener
(
&
mWidgetListenerDelegate
)
;
rv
=
mWindow
-
>
Create
(
(
nsIWidget
*
)
parentWidget
nullptr
deskRect
&
widgetInitData
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
LayoutDeviceIntRect
r
=
mWindow
-
>
GetClientBounds
(
)
;
mWindow
-
>
SetBackgroundColor
(
NS_RGB
(
255
255
255
)
)
;
RefPtr
<
BrowsingContext
>
openerContext
=
aOpenerWindow
?
nsPIDOMWindowOuter
:
:
From
(
aOpenerWindow
)
-
>
GetBrowsingContext
(
)
:
nullptr
;
RefPtr
<
BrowsingContext
>
browsingContext
=
BrowsingContext
:
:
Create
(
nullptr
openerContext
EmptyString
(
)
BrowsingContext
:
:
Type
:
:
Chrome
)
;
mDocShell
=
nsDocShell
:
:
Create
(
browsingContext
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_FAILURE
)
;
mDocShell
-
>
SetOpener
(
aOpeningTab
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
docShellAsItem
(
mDocShell
)
;
NS_ENSURE_TRUE
(
docShellAsItem
NS_ERROR_FAILURE
)
;
NS_ENSURE_SUCCESS
(
EnsureChromeTreeOwner
(
)
NS_ERROR_FAILURE
)
;
docShellAsItem
-
>
SetTreeOwner
(
mChromeTreeOwner
)
;
r
.
MoveTo
(
0
0
)
;
nsCOMPtr
<
nsIBaseWindow
>
docShellAsWin
(
do_QueryInterface
(
mDocShell
)
)
;
NS_ENSURE_SUCCESS
(
docShellAsWin
-
>
InitWindow
(
nullptr
mWindow
r
.
X
(
)
r
.
Y
(
)
r
.
Width
(
)
r
.
Height
(
)
)
NS_ERROR_FAILURE
)
;
NS_ENSURE_SUCCESS
(
docShellAsWin
-
>
Create
(
)
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIWebProgress
>
webProgress
(
do_GetInterface
(
mDocShell
&
rv
)
)
;
if
(
webProgress
)
{
webProgress
-
>
AddProgressListener
(
this
nsIWebProgress
:
:
NOTIFY_STATE_NETWORK
)
;
}
if
(
aOpenerWindow
)
{
nsPIDOMWindowOuter
*
window
=
mDocShell
-
>
GetWindow
(
)
;
MOZ_ASSERT
(
window
)
;
window
-
>
SetOpenerWindow
(
nsPIDOMWindowOuter
:
:
From
(
aOpenerWindow
)
true
)
;
}
if
(
nsContentUtils
:
:
IsInitialized
(
)
)
{
MOZ_ASSERT
(
mDocShell
-
>
ItemType
(
)
=
=
nsIDocShellTreeItem
:
:
typeChrome
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
nsContentUtils
:
:
SubjectPrincipalOrSystemIfNativeCaller
(
)
;
if
(
nsContentUtils
:
:
IsExpandedPrincipal
(
principal
)
)
{
principal
=
nullptr
;
}
rv
=
mDocShell
-
>
CreateAboutBlankContentViewer
(
principal
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Document
>
doc
=
mDocShell
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE
(
!
!
doc
NS_ERROR_FAILURE
)
;
doc
-
>
SetIsInitialDocument
(
true
)
;
}
if
(
nullptr
!
=
aUrl
)
{
nsCString
tmpStr
;
rv
=
aUrl
-
>
GetSpec
(
tmpStr
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
NS_ConvertUTF8toUTF16
urlString
(
tmpStr
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
mDocShell
)
)
;
NS_ENSURE_TRUE
(
webNav
NS_ERROR_FAILURE
)
;
LoadURIOptions
loadURIOptions
;
loadURIOptions
.
mTriggeringPrincipal
=
nsContentUtils
:
:
GetSystemPrincipal
(
)
;
rv
=
webNav
-
>
LoadURI
(
urlString
loadURIOptions
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
rv
;
}
nsIPresShell
*
nsWebShellWindow
:
:
GetPresShell
(
)
{
if
(
!
mDocShell
)
return
nullptr
;
return
mDocShell
-
>
GetPresShell
(
)
;
}
bool
nsWebShellWindow
:
:
WindowMoved
(
nsIWidget
*
aWidget
int32_t
x
int32_t
y
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
pm
-
>
AdjustPopupsOnWindowChange
(
window
)
;
}
if
(
mDocShell
&
&
mDocShell
-
>
GetWindow
(
)
)
{
nsCOMPtr
<
EventTarget
>
eventTarget
=
mDocShell
-
>
GetWindow
(
)
-
>
GetTopWindowRoot
(
)
;
nsContentUtils
:
:
DispatchChromeEvent
(
mDocShell
-
>
GetDocument
(
)
eventTarget
NS_LITERAL_STRING
(
"
MozUpdateWindowPos
"
)
CanBubble
:
:
eNo
Cancelable
:
:
eNo
nullptr
)
;
}
SetPersistenceTimer
(
PAD_POSITION
)
;
return
false
;
}
bool
nsWebShellWindow
:
:
WindowResized
(
nsIWidget
*
aWidget
int32_t
aWidth
int32_t
aHeight
)
{
nsCOMPtr
<
nsIBaseWindow
>
shellAsWin
(
do_QueryInterface
(
mDocShell
)
)
;
if
(
shellAsWin
)
{
shellAsWin
-
>
SetPositionAndSize
(
0
0
aWidth
aHeight
0
)
;
}
if
(
!
IsLocked
(
)
)
SetPersistenceTimer
(
PAD_POSITION
|
PAD_SIZE
|
PAD_MISC
)
;
return
true
;
}
bool
nsWebShellWindow
:
:
RequestWindowClose
(
nsIWidget
*
aWidget
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
this
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
(
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
)
;
nsCOMPtr
<
EventTarget
>
eventTarget
=
do_QueryInterface
(
window
)
;
RefPtr
<
PresShell
>
presShell
=
mDocShell
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
mozilla
:
:
DebugOnly
<
bool
>
dying
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
mDocShell
-
>
IsBeingDestroyed
(
&
dying
)
)
&
&
dying
"
No
presShell
but
window
is
not
being
destroyed
"
)
;
}
else
if
(
eventTarget
)
{
RefPtr
<
nsPresContext
>
presContext
=
presShell
-
>
GetPresContext
(
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetMouseEvent
event
(
true
eClose
nullptr
WidgetMouseEvent
:
:
eReal
)
;
if
(
NS_SUCCEEDED
(
EventDispatcher
:
:
Dispatch
(
eventTarget
presContext
&
event
nullptr
&
status
)
)
&
&
status
=
=
nsEventStatus_eConsumeNoDefault
)
return
false
;
}
Destroy
(
)
;
return
false
;
}
void
nsWebShellWindow
:
:
SizeModeChanged
(
nsSizeMode
sizeMode
)
{
if
(
sizeMode
=
=
nsSizeMode_Maximized
|
|
sizeMode
=
=
nsSizeMode_Fullscreen
)
{
uint32_t
zLevel
;
GetZLevel
(
&
zLevel
)
;
if
(
zLevel
>
nsIXULWindow
:
:
normalZ
)
SetZLevel
(
nsIXULWindow
:
:
normalZ
)
;
}
mWindow
-
>
SetSizeMode
(
sizeMode
)
;
SetPersistenceTimer
(
PAD_MISC
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
if
(
ourWindow
)
{
if
(
sizeMode
=
=
nsSizeMode_Fullscreen
)
{
ourWindow
-
>
SetFullScreen
(
true
)
;
}
else
if
(
sizeMode
!
=
nsSizeMode_Minimized
)
{
if
(
ourWindow
-
>
GetFullScreen
(
)
)
{
ourWindow
-
>
SetFullscreenInternal
(
FullscreenReason
:
:
ForForceExitFullscreen
false
)
;
ourWindow
-
>
SetFullScreen
(
false
)
;
}
}
ourWindow
-
>
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
sizemodechange
"
)
)
;
}
nsIPresShell
*
presShell
;
if
(
(
presShell
=
GetPresShell
(
)
)
)
{
presShell
-
>
GetPresContext
(
)
-
>
SizeModeChanged
(
sizeMode
)
;
}
}
void
nsWebShellWindow
:
:
UIResolutionChanged
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
if
(
ourWindow
)
{
ourWindow
-
>
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
resolutionchange
"
)
)
;
}
}
void
nsWebShellWindow
:
:
FullscreenWillChange
(
bool
aInFullscreen
)
{
if
(
mDocShell
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
mDocShell
-
>
GetWindow
(
)
)
{
ourWindow
-
>
FullscreenWillChange
(
aInFullscreen
)
;
}
}
}
void
nsWebShellWindow
:
:
FullscreenChanged
(
bool
aInFullscreen
)
{
if
(
mDocShell
)
{
if
(
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
mDocShell
-
>
GetWindow
(
)
)
{
ourWindow
-
>
FinishFullscreenChange
(
aInFullscreen
)
;
}
}
}
void
nsWebShellWindow
:
:
OcclusionStateChanged
(
bool
aIsFullyOccluded
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
ourWindow
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
if
(
ourWindow
)
{
ourWindow
-
>
DispatchCustomEvent
(
NS_LITERAL_STRING
(
"
occlusionstatechange
"
)
)
;
}
}
void
nsWebShellWindow
:
:
OSToolbarButtonPressed
(
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
this
)
;
uint32_t
chromeMask
=
(
nsIWebBrowserChrome
:
:
CHROME_TOOLBAR
|
nsIWebBrowserChrome
:
:
CHROME_LOCATIONBAR
|
nsIWebBrowserChrome
:
:
CHROME_PERSONAL_TOOLBAR
)
;
nsCOMPtr
<
nsIWebBrowserChrome
>
wbc
(
do_GetInterface
(
xulWindow
)
)
;
if
(
!
wbc
)
return
;
uint32_t
chromeFlags
newChromeFlags
=
0
;
wbc
-
>
GetChromeFlags
(
&
chromeFlags
)
;
newChromeFlags
=
chromeFlags
&
chromeMask
;
if
(
!
newChromeFlags
)
chromeFlags
|
=
chromeMask
;
else
chromeFlags
&
=
(
~
newChromeFlags
)
;
wbc
-
>
SetChromeFlags
(
chromeFlags
)
;
}
bool
nsWebShellWindow
:
:
ZLevelChanged
(
bool
aImmediate
nsWindowZ
*
aPlacement
nsIWidget
*
aRequestBelow
nsIWidget
*
*
aActualBelow
)
{
if
(
aActualBelow
)
*
aActualBelow
=
nullptr
;
return
ConstrainToZLevel
(
aImmediate
aPlacement
aRequestBelow
aActualBelow
)
;
}
void
nsWebShellWindow
:
:
WindowActivated
(
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
this
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
window
)
fm
-
>
WindowRaised
(
window
)
;
if
(
mChromeLoaded
)
{
PersistentAttributesDirty
(
PAD_POSITION
|
PAD_SIZE
|
PAD_MISC
)
;
SavePersistentAttributes
(
)
;
}
}
void
nsWebShellWindow
:
:
WindowDeactivated
(
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
this
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
mDocShell
?
mDocShell
-
>
GetWindow
(
)
:
nullptr
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
window
&
&
!
fm
-
>
IsTestMode
(
)
)
fm
-
>
WindowLowered
(
window
)
;
}
#
ifdef
USE_NATIVE_MENUS
static
void
LoadNativeMenus
(
Document
*
aDoc
nsIWidget
*
aParentWindow
)
{
if
(
gfxPlatform
:
:
IsHeadless
(
)
)
{
return
;
}
nsCOMPtr
<
nsINativeMenuService
>
nms
=
do_GetService
(
"
mozilla
.
org
/
widget
/
nativemenuservice
;
1
"
)
;
if
(
!
nms
)
{
return
;
}
nsCOMPtr
<
nsINodeList
>
menubarElements
=
aDoc
-
>
GetElementsByTagNameNS
(
NS_LITERAL_STRING
(
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
)
NS_LITERAL_STRING
(
"
menubar
"
)
)
;
nsCOMPtr
<
nsINode
>
menubarNode
;
if
(
menubarElements
)
{
menubarNode
=
menubarElements
-
>
Item
(
0
)
;
}
if
(
menubarNode
)
{
nsCOMPtr
<
Element
>
menubarContent
(
do_QueryInterface
(
menubarNode
)
)
;
nms
-
>
CreateNativeMenuBar
(
aParentWindow
menubarContent
)
;
}
else
{
nms
-
>
CreateNativeMenuBar
(
aParentWindow
nullptr
)
;
}
}
#
endif
namespace
mozilla
{
class
WebShellWindowTimerCallback
final
:
public
nsITimerCallback
public
nsINamed
{
public
:
explicit
WebShellWindowTimerCallback
(
nsWebShellWindow
*
aWindow
)
:
mWindow
(
aWindow
)
{
}
NS_DECL_THREADSAFE_ISUPPORTS
NS_IMETHOD
Notify
(
nsITimer
*
aTimer
)
override
{
mWindow
-
>
FirePersistenceTimer
(
)
;
return
NS_OK
;
}
NS_IMETHOD
GetName
(
nsACString
&
aName
)
override
{
aName
.
AssignLiteral
(
"
WebShellWindowTimerCallback
"
)
;
return
NS_OK
;
}
private
:
~
WebShellWindowTimerCallback
(
)
{
}
RefPtr
<
nsWebShellWindow
>
mWindow
;
}
;
NS_IMPL_ISUPPORTS
(
WebShellWindowTimerCallback
nsITimerCallback
nsINamed
)
}
void
nsWebShellWindow
:
:
SetPersistenceTimer
(
uint32_t
aDirtyFlags
)
{
MutexAutoLock
lock
(
mSPTimerLock
)
;
if
(
!
mSPTimer
)
{
mSPTimer
=
NS_NewTimer
(
)
;
if
(
!
mSPTimer
)
{
NS_WARNING
(
"
Couldn
'
t
create
mozilla
.
org
/
timer
;
1
instance
?
"
)
;
return
;
}
}
RefPtr
<
WebShellWindowTimerCallback
>
callback
=
new
WebShellWindowTimerCallback
(
this
)
;
mSPTimer
-
>
InitWithCallback
(
callback
SIZE_PERSISTENCE_TIMEOUT
nsITimer
:
:
TYPE_ONE_SHOT
)
;
PersistentAttributesDirty
(
aDirtyFlags
)
;
}
void
nsWebShellWindow
:
:
FirePersistenceTimer
(
)
{
MutexAutoLock
lock
(
mSPTimerLock
)
;
SavePersistentAttributes
(
)
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnProgressChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnStateChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
nsresult
aStatus
)
{
if
(
!
(
aStateFlags
&
nsIWebProgressListener
:
:
STATE_STOP
)
|
|
!
(
aStateFlags
&
nsIWebProgressListener
:
:
STATE_IS_NETWORK
)
)
{
return
NS_OK
;
}
if
(
mChromeLoaded
)
return
NS_OK
;
nsCOMPtr
<
mozIDOMWindowProxy
>
eventWin
;
aProgress
-
>
GetDOMWindow
(
getter_AddRefs
(
eventWin
)
)
;
auto
*
eventPWin
=
nsPIDOMWindowOuter
:
:
From
(
eventWin
)
;
if
(
eventPWin
)
{
nsPIDOMWindowOuter
*
rootPWin
=
eventPWin
-
>
GetPrivateRoot
(
)
;
if
(
eventPWin
!
=
rootPWin
)
return
NS_OK
;
}
mChromeLoaded
=
true
;
mLockedUntilChromeLoad
=
false
;
#
ifdef
USE_NATIVE_MENUS
nsCOMPtr
<
nsIContentViewer
>
cv
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
cv
)
)
;
if
(
cv
)
{
RefPtr
<
Document
>
menubarDoc
=
cv
-
>
GetDocument
(
)
;
if
(
menubarDoc
)
LoadNativeMenus
(
menubarDoc
mWindow
)
;
}
#
endif
OnChromeLoaded
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnLocationChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
nsIURI
*
aURI
uint32_t
aFlags
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnStatusChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aMessage
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnSecurityChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aState
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsWebShellWindow
:
:
OnContentBlockingEvent
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aEvent
)
{
MOZ_ASSERT_UNREACHABLE
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
bool
nsWebShellWindow
:
:
ExecuteCloseHandler
(
)
{
nsCOMPtr
<
nsIXULWindow
>
kungFuDeathGrip
(
this
)
;
nsCOMPtr
<
EventTarget
>
eventTarget
;
if
(
mDocShell
)
{
eventTarget
=
do_QueryInterface
(
mDocShell
-
>
GetWindow
(
)
)
;
}
if
(
eventTarget
)
{
nsCOMPtr
<
nsIContentViewer
>
contentViewer
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
contentViewer
)
)
;
if
(
contentViewer
)
{
RefPtr
<
nsPresContext
>
presContext
=
contentViewer
-
>
GetPresContext
(
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
WidgetMouseEvent
event
(
true
eClose
nullptr
WidgetMouseEvent
:
:
eReal
)
;
nsresult
rv
=
EventDispatcher
:
:
Dispatch
(
eventTarget
presContext
&
event
nullptr
&
status
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
status
=
=
nsEventStatus_eConsumeNoDefault
)
return
true
;
}
}
return
false
;
}
void
nsWebShellWindow
:
:
ConstrainToOpenerScreen
(
int32_t
*
aX
int32_t
*
aY
)
{
if
(
mOpenerScreenRect
.
IsEmpty
(
)
)
{
*
aX
=
*
aY
=
0
;
return
;
}
int32_t
left
top
width
height
;
nsCOMPtr
<
nsIScreenManager
>
screenmgr
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
)
;
if
(
screenmgr
)
{
nsCOMPtr
<
nsIScreen
>
screen
;
screenmgr
-
>
ScreenForRect
(
mOpenerScreenRect
.
X
(
)
mOpenerScreenRect
.
Y
(
)
mOpenerScreenRect
.
Width
(
)
mOpenerScreenRect
.
Height
(
)
getter_AddRefs
(
screen
)
)
;
if
(
screen
)
{
screen
-
>
GetAvailRectDisplayPix
(
&
left
&
top
&
width
&
height
)
;
if
(
*
aX
<
left
|
|
*
aX
>
left
+
width
)
{
*
aX
=
left
;
}
if
(
*
aY
<
top
|
|
*
aY
>
top
+
height
)
{
*
aY
=
top
;
}
}
}
}
NS_IMETHODIMP
nsWebShellWindow
:
:
Destroy
(
)
{
nsresult
rv
;
nsCOMPtr
<
nsIWebProgress
>
webProgress
(
do_GetInterface
(
mDocShell
&
rv
)
)
;
if
(
webProgress
)
{
webProgress
-
>
RemoveProgressListener
(
this
)
;
}
nsCOMPtr
<
nsIXULWindow
>
kungFuDeathGrip
(
this
)
;
{
MutexAutoLock
lock
(
mSPTimerLock
)
;
if
(
mSPTimer
)
{
mSPTimer
-
>
Cancel
(
)
;
SavePersistentAttributes
(
)
;
mSPTimer
=
nullptr
;
}
}
return
nsXULWindow
:
:
Destroy
(
)
;
}
nsIXULWindow
*
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
GetXULWindow
(
)
{
return
mWebShellWindow
-
>
GetXULWindow
(
)
;
}
nsIPresShell
*
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
GetPresShell
(
)
{
return
mWebShellWindow
-
>
GetPresShell
(
)
;
}
bool
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
WindowMoved
(
nsIWidget
*
aWidget
int32_t
aX
int32_t
aY
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
return
holder
-
>
WindowMoved
(
aWidget
aX
aY
)
;
}
bool
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
WindowResized
(
nsIWidget
*
aWidget
int32_t
aWidth
int32_t
aHeight
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
return
holder
-
>
WindowResized
(
aWidget
aWidth
aHeight
)
;
}
bool
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
RequestWindowClose
(
nsIWidget
*
aWidget
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
return
holder
-
>
RequestWindowClose
(
aWidget
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
SizeModeChanged
(
nsSizeMode
aSizeMode
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
SizeModeChanged
(
aSizeMode
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
UIResolutionChanged
(
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
UIResolutionChanged
(
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
FullscreenWillChange
(
bool
aInFullscreen
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
FullscreenWillChange
(
aInFullscreen
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
FullscreenChanged
(
bool
aInFullscreen
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
FullscreenChanged
(
aInFullscreen
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
OcclusionStateChanged
(
bool
aIsFullyOccluded
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
OcclusionStateChanged
(
aIsFullyOccluded
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
OSToolbarButtonPressed
(
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
OSToolbarButtonPressed
(
)
;
}
bool
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
ZLevelChanged
(
bool
aImmediate
nsWindowZ
*
aPlacement
nsIWidget
*
aRequestBelow
nsIWidget
*
*
aActualBelow
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
return
holder
-
>
ZLevelChanged
(
aImmediate
aPlacement
aRequestBelow
aActualBelow
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
WindowActivated
(
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
WindowActivated
(
)
;
}
void
nsWebShellWindow
:
:
WidgetListenerDelegate
:
:
WindowDeactivated
(
)
{
RefPtr
<
nsWebShellWindow
>
holder
=
mWebShellWindow
;
holder
-
>
WindowDeactivated
(
)
;
}
