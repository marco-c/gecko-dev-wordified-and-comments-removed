#
include
"
nsAppShellWindowEnumerator
.
h
"
#
include
"
nsIDocumentViewer
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIAppWindow
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsWindowMediator
.
h
"
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
dom
:
:
Element
;
static
void
GetAttribute
(
nsIAppWindow
*
inWindow
const
nsAString
&
inAttribute
nsAString
&
outValue
)
;
static
void
GetWindowType
(
nsIAppWindow
*
inWindow
nsString
&
outType
)
;
static
Element
*
GetElementFromDocShell
(
nsIDocShell
*
aShell
)
{
nsCOMPtr
<
nsIDocumentViewer
>
viewer
;
aShell
-
>
GetDocViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
viewer
)
{
RefPtr
<
Document
>
doc
=
viewer
-
>
GetDocument
(
)
;
if
(
doc
)
{
return
doc
-
>
GetDocumentElement
(
)
;
}
}
return
nullptr
;
}
void
GetAttribute
(
nsIAppWindow
*
inWindow
const
nsAString
&
inAttribute
nsAString
&
outValue
)
{
nsCOMPtr
<
nsIDocShell
>
shell
;
if
(
inWindow
&
&
NS_SUCCEEDED
(
inWindow
-
>
GetDocShell
(
getter_AddRefs
(
shell
)
)
)
)
{
RefPtr
<
Element
>
webshellElement
=
GetElementFromDocShell
(
shell
)
;
if
(
webshellElement
)
{
webshellElement
-
>
GetAttribute
(
inAttribute
outValue
)
;
}
}
}
void
GetWindowType
(
nsIAppWindow
*
aWindow
nsString
&
outType
)
{
GetAttribute
(
aWindow
u
"
windowtype
"
_ns
outType
)
;
}
nsWindowInfo
:
:
nsWindowInfo
(
nsIAppWindow
*
inWindow
int32_t
inTimeStamp
)
:
mWindow
(
inWindow
)
mTimeStamp
(
inTimeStamp
)
{
ReferenceSelf
(
true
true
)
;
}
nsWindowInfo
:
:
~
nsWindowInfo
(
)
=
default
;
bool
nsWindowInfo
:
:
TypeEquals
(
const
nsAString
&
aType
)
{
nsAutoString
rtnString
;
GetWindowType
(
mWindow
rtnString
)
;
return
rtnString
=
=
aType
;
}
void
nsWindowInfo
:
:
InsertAfter
(
nsWindowInfo
*
inOlder
nsWindowInfo
*
inHigher
)
{
if
(
inOlder
)
{
mOlder
=
inOlder
;
mYounger
=
inOlder
-
>
mYounger
;
mOlder
-
>
mYounger
=
this
;
if
(
mOlder
-
>
mOlder
=
=
mOlder
)
mOlder
-
>
mOlder
=
this
;
mYounger
-
>
mOlder
=
this
;
if
(
mYounger
-
>
mYounger
=
=
mYounger
)
mYounger
-
>
mYounger
=
this
;
}
if
(
inHigher
)
{
mHigher
=
inHigher
;
mLower
=
inHigher
-
>
mLower
;
mHigher
-
>
mLower
=
this
;
if
(
mHigher
-
>
mHigher
=
=
mHigher
)
mHigher
-
>
mHigher
=
this
;
mLower
-
>
mHigher
=
this
;
if
(
mLower
-
>
mLower
=
=
mLower
)
mLower
-
>
mLower
=
this
;
}
}
void
nsWindowInfo
:
:
Unlink
(
bool
inAge
bool
inZ
)
{
if
(
inAge
)
{
mOlder
-
>
mYounger
=
mYounger
;
mYounger
-
>
mOlder
=
mOlder
;
}
if
(
inZ
)
{
mLower
-
>
mHigher
=
mHigher
;
mHigher
-
>
mLower
=
mLower
;
}
ReferenceSelf
(
inAge
inZ
)
;
}
void
nsWindowInfo
:
:
ReferenceSelf
(
bool
inAge
bool
inZ
)
{
if
(
inAge
)
{
mYounger
=
this
;
mOlder
=
this
;
}
if
(
inZ
)
{
mLower
=
this
;
mHigher
=
this
;
}
}
nsAppShellWindowEnumerator
:
:
nsAppShellWindowEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
mWindowMediator
(
&
aMediator
)
mType
(
aTypeString
)
mCurrentPosition
(
nullptr
)
{
mWindowMediator
-
>
AddEnumerator
(
this
)
;
NS_ADDREF
(
mWindowMediator
)
;
}
nsAppShellWindowEnumerator
:
:
~
nsAppShellWindowEnumerator
(
)
{
mWindowMediator
-
>
RemoveEnumerator
(
this
)
;
NS_RELEASE
(
mWindowMediator
)
;
}
void
nsAppShellWindowEnumerator
:
:
AdjustInitialPosition
(
)
{
if
(
!
mType
.
IsEmpty
(
)
&
&
mCurrentPosition
&
&
!
mCurrentPosition
-
>
TypeEquals
(
mType
)
)
mCurrentPosition
=
FindNext
(
)
;
}
NS_IMETHODIMP
nsAppShellWindowEnumerator
:
:
HasMoreElements
(
bool
*
retval
)
{
if
(
!
retval
)
return
NS_ERROR_INVALID_ARG
;
*
retval
=
mCurrentPosition
?
true
:
false
;
return
NS_OK
;
}
void
nsAppShellWindowEnumerator
:
:
WindowRemoved
(
nsWindowInfo
*
inInfo
)
{
if
(
mCurrentPosition
=
=
inInfo
)
mCurrentPosition
=
FindNext
(
)
;
}
nsASDOMWindowEnumerator
:
:
nsASDOMWindowEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsAppShellWindowEnumerator
(
aTypeString
aMediator
)
{
}
nsASDOMWindowEnumerator
:
:
~
nsASDOMWindowEnumerator
(
)
{
}
NS_IMETHODIMP
nsASDOMWindowEnumerator
:
:
GetNext
(
nsISupports
*
*
retval
)
{
if
(
!
retval
)
return
NS_ERROR_INVALID_ARG
;
*
retval
=
nullptr
;
while
(
mCurrentPosition
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWindow
;
nsWindowMediator
:
:
GetDOMWindow
(
mCurrentPosition
-
>
mWindow
domWindow
)
;
mCurrentPosition
=
FindNext
(
)
;
if
(
domWindow
)
return
CallQueryInterface
(
domWindow
retval
)
;
}
return
NS_ERROR_FAILURE
;
}
nsASAppWindowEnumerator
:
:
nsASAppWindowEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsAppShellWindowEnumerator
(
aTypeString
aMediator
)
{
}
nsASAppWindowEnumerator
:
:
~
nsASAppWindowEnumerator
(
)
{
}
NS_IMETHODIMP
nsASAppWindowEnumerator
:
:
GetNext
(
nsISupports
*
*
retval
)
{
if
(
!
retval
)
return
NS_ERROR_INVALID_ARG
;
*
retval
=
nullptr
;
if
(
mCurrentPosition
)
{
CallQueryInterface
(
mCurrentPosition
-
>
mWindow
retval
)
;
mCurrentPosition
=
FindNext
(
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
nsASDOMWindowEarlyToLateEnumerator
:
:
nsASDOMWindowEarlyToLateEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsASDOMWindowEnumerator
(
aTypeString
aMediator
)
{
mCurrentPosition
=
aMediator
.
mOldestWindow
;
AdjustInitialPosition
(
)
;
}
nsASDOMWindowEarlyToLateEnumerator
:
:
~
nsASDOMWindowEarlyToLateEnumerator
(
)
{
}
nsWindowInfo
*
nsASDOMWindowEarlyToLateEnumerator
:
:
FindNext
(
)
{
nsWindowInfo
*
info
*
listEnd
;
bool
allWindows
=
mType
.
IsEmpty
(
)
;
if
(
!
mCurrentPosition
)
return
nullptr
;
info
=
mCurrentPosition
-
>
mYounger
;
listEnd
=
mWindowMediator
-
>
mOldestWindow
;
while
(
info
!
=
listEnd
)
{
if
(
allWindows
|
|
info
-
>
TypeEquals
(
mType
)
)
return
info
;
info
=
info
-
>
mYounger
;
}
return
nullptr
;
}
nsASAppWindowEarlyToLateEnumerator
:
:
nsASAppWindowEarlyToLateEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsASAppWindowEnumerator
(
aTypeString
aMediator
)
{
mCurrentPosition
=
aMediator
.
mOldestWindow
;
AdjustInitialPosition
(
)
;
}
nsASAppWindowEarlyToLateEnumerator
:
:
~
nsASAppWindowEarlyToLateEnumerator
(
)
{
}
nsWindowInfo
*
nsASAppWindowEarlyToLateEnumerator
:
:
FindNext
(
)
{
nsWindowInfo
*
info
*
listEnd
;
bool
allWindows
=
mType
.
IsEmpty
(
)
;
if
(
!
mCurrentPosition
)
return
nullptr
;
info
=
mCurrentPosition
-
>
mYounger
;
listEnd
=
mWindowMediator
-
>
mOldestWindow
;
while
(
info
!
=
listEnd
)
{
if
(
allWindows
|
|
info
-
>
TypeEquals
(
mType
)
)
return
info
;
info
=
info
-
>
mYounger
;
}
return
nullptr
;
}
nsASAppWindowFrontToBackEnumerator
:
:
nsASAppWindowFrontToBackEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsASAppWindowEnumerator
(
aTypeString
aMediator
)
{
mCurrentPosition
=
aMediator
.
mTopmostWindow
;
AdjustInitialPosition
(
)
;
}
nsASAppWindowFrontToBackEnumerator
:
:
~
nsASAppWindowFrontToBackEnumerator
(
)
{
}
nsWindowInfo
*
nsASAppWindowFrontToBackEnumerator
:
:
FindNext
(
)
{
nsWindowInfo
*
info
*
listEnd
;
bool
allWindows
=
mType
.
IsEmpty
(
)
;
if
(
!
mCurrentPosition
)
return
nullptr
;
info
=
mCurrentPosition
-
>
mLower
;
listEnd
=
mWindowMediator
-
>
mTopmostWindow
;
while
(
info
!
=
listEnd
)
{
if
(
allWindows
|
|
info
-
>
TypeEquals
(
mType
)
)
return
info
;
info
=
info
-
>
mLower
;
}
return
nullptr
;
}
nsASAppWindowBackToFrontEnumerator
:
:
nsASAppWindowBackToFrontEnumerator
(
const
char16_t
*
aTypeString
nsWindowMediator
&
aMediator
)
:
nsASAppWindowEnumerator
(
aTypeString
aMediator
)
{
mCurrentPosition
=
aMediator
.
mTopmostWindow
?
aMediator
.
mTopmostWindow
-
>
mHigher
:
nullptr
;
AdjustInitialPosition
(
)
;
}
nsASAppWindowBackToFrontEnumerator
:
:
~
nsASAppWindowBackToFrontEnumerator
(
)
{
}
nsWindowInfo
*
nsASAppWindowBackToFrontEnumerator
:
:
FindNext
(
)
{
nsWindowInfo
*
info
*
listEnd
;
bool
allWindows
=
mType
.
IsEmpty
(
)
;
if
(
!
mCurrentPosition
)
return
nullptr
;
info
=
mCurrentPosition
-
>
mHigher
;
listEnd
=
mWindowMediator
-
>
mTopmostWindow
;
if
(
listEnd
)
listEnd
=
listEnd
-
>
mHigher
;
while
(
info
!
=
listEnd
)
{
if
(
allWindows
|
|
info
-
>
TypeEquals
(
mType
)
)
return
info
;
info
=
info
-
>
mHigher
;
}
return
nullptr
;
}
