#
include
"
nsISupports
.
idl
"
interface
nsIAppWindow
;
interface
nsIWindowlessBrowser
;
interface
nsIURI
;
interface
mozIDOMWindowProxy
;
interface
nsIAppShell
;
interface
nsIRemoteTab
;
[
ptr
]
native
JSContext
(
JSContext
)
;
%
{
C
+
+
#
include
"
js
/
TypeDecls
.
h
"
%
}
[
scriptable
uuid
(
19266025
-
354c
-
4bb9
-
986b
-
3483b2b1cdef
)
]
interface
nsIAppShellService
:
nsISupports
{
const
long
SIZE_TO_CONTENT
=
-
1
;
nsIAppWindow
createTopLevelWindow
(
in
nsIAppWindow
aParent
in
nsIURI
aUrl
in
uint32_t
aChromeMask
in
long
aInitialWidth
in
long
aInitialHeight
)
;
nsIWindowlessBrowser
createWindowlessBrowser
(
[
optional
]
in
boolean
aIsChrome
[
optional
]
in
uint32_t
aChromeMask
)
;
[
noscript
]
void
createHiddenWindow
(
)
;
void
destroyHiddenWindow
(
)
;
[
noscript
]
void
setScreenId
(
in
uint32_t
aScreenId
)
;
readonly
attribute
nsIAppWindow
hiddenWindow
;
readonly
attribute
mozIDOMWindowProxy
hiddenDOMWindow
;
readonly
attribute
boolean
applicationProvidedHiddenWindow
;
void
registerTopLevelWindow
(
in
nsIAppWindow
aWindow
)
;
void
unregisterTopLevelWindow
(
in
nsIAppWindow
aWindow
)
;
readonly
attribute
boolean
hasHiddenWindow
;
}
;
