#
include
<
MacWindows
.
h
>
#
include
"
nsCommandLineServiceMac
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIBrowserDOMWindow
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIDOMChromeWindow
.
h
"
#
include
"
nsIDOMWindowInternal
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIDOMNode
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIWebNavigation
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsIWindowMediator
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIXULWindow
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsWindowUtils
.
h
"
#
include
"
nsMacUtils
.
h
"
#
include
"
nsXPIDLString
.
h
"
#
include
"
nsIXULWindow
.
h
"
#
include
"
nsWindowUtils
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsAEUtils
.
h
"
using
namespace
nsWindowUtils
;
static
void
GetXULWindowFromWindowPtr
(
WindowPtr
inWindowPtr
nsIXULWindow
*
*
outXULWindow
)
{
*
outXULWindow
=
NULL
;
if
(
!
inWindowPtr
)
ThrowOSErr
(
paramErr
)
;
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
)
;
ThrowErrIfNil
(
windowMediator
paramErr
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
if
(
NS_FAILED
(
windowMediator
-
>
GetXULWindowEnumerator
(
nsnull
getter_AddRefs
(
windowEnumerator
)
)
)
)
ThrowOSErr
(
paramErr
)
;
while
(
true
)
{
PRBool
more
=
false
;
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
if
(
!
more
)
break
;
nsCOMPtr
<
nsISupports
>
nextWindow
=
nsnull
;
windowEnumerator
-
>
GetNext
(
getter_AddRefs
(
nextWindow
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
NULL
=
=
baseWindow
)
continue
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsnull
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
if
(
NULL
=
=
widget
)
continue
;
WindowRef
windowRef
=
(
WindowRef
)
widget
-
>
GetNativeData
(
NS_NATIVE_DISPLAY
)
;
if
(
(
WindowPtr
)
windowRef
=
=
inWindowPtr
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
!
xulWindow
)
break
;
NS_ADDREF
(
*
outXULWindow
=
xulWindow
)
;
return
;
}
}
ThrowOSErr
(
paramErr
)
;
}
static
void
GetXULWindowTypeString
(
nsIXULWindow
*
inXULWindow
nsString
&
outWindowType
)
{
outWindowType
.
Truncate
(
)
;
if
(
inXULWindow
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
contentShell
;
inXULWindow
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
contentShell
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
contentShell
)
)
;
ThrowErrIfNil
(
webNav
paramErr
)
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
;
webNav
-
>
GetDocument
(
getter_AddRefs
(
domDoc
)
)
;
if
(
domDoc
)
{
nsCOMPtr
<
nsIDOMElement
>
element
;
domDoc
-
>
GetDocumentElement
(
getter_AddRefs
(
element
)
)
;
if
(
element
)
element
-
>
GetAttribute
(
NS_LITERAL_STRING
(
"
windowtype
"
)
outWindowType
)
;
}
}
}
static
TWindowKind
WindowKindFromTypeString
(
const
nsString
&
inWindowType
)
{
if
(
inWindowType
.
IsEmpty
(
)
)
return
kAnyWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
navigator
:
browser
"
)
)
return
kBrowserWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
mail
:
3pane
"
)
)
return
kMailWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
msgcompose
"
)
)
return
kMailComposeWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
mail
:
addressbook
"
)
)
return
kAddressBookWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
composer
:
html
"
)
)
return
kComposerWindowKind
;
if
(
inWindowType
.
EqualsLiteral
(
"
composer
:
text
"
)
)
return
kComposerWindowKind
;
return
kOtherWindowKind
;
}
static
TWindowKind
GetXULWindowKind
(
nsIXULWindow
*
inXULWindow
)
{
nsAutoString
windowType
;
GetXULWindowTypeString
(
inXULWindow
windowType
)
;
return
WindowKindFromTypeString
(
windowType
)
;
}
long
nsWindowUtils
:
:
CountWindowsOfKind
(
TWindowKind
windowKind
)
{
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
)
;
ThrowErrIfNil
(
windowMediator
paramErr
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
if
(
NS_FAILED
(
windowMediator
-
>
GetXULWindowEnumerator
(
nsnull
getter_AddRefs
(
windowEnumerator
)
)
)
)
ThrowOSErr
(
paramErr
)
;
long
windowCount
=
0L
;
PRBool
more
;
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
while
(
more
)
{
nsCOMPtr
<
nsISupports
>
nextWindow
=
nsnull
;
windowEnumerator
-
>
GetNext
(
getter_AddRefs
(
nextWindow
)
)
;
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
!
xulWindow
)
break
;
if
(
kAnyWindowKind
=
=
windowKind
)
+
+
windowCount
;
else
{
TWindowKind
thisWindowKind
=
GetXULWindowKind
(
xulWindow
)
;
if
(
thisWindowKind
=
=
windowKind
)
+
+
windowCount
;
}
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
}
return
windowCount
;
}
WindowPtr
nsWindowUtils
:
:
GetNamedOrFrontmostWindow
(
TWindowKind
windowKind
const
char
*
windowName
)
{
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
)
;
ThrowErrIfNil
(
windowMediator
paramErr
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
if
(
NS_FAILED
(
windowMediator
-
>
GetXULWindowEnumerator
(
nsnull
getter_AddRefs
(
windowEnumerator
)
)
)
)
ThrowOSErr
(
paramErr
)
;
WindowPtr
windowPtr
=
NULL
;
PRBool
more
;
nsCString
windowNameString
(
windowName
)
;
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
while
(
more
)
{
nsCOMPtr
<
nsISupports
>
nextWindow
=
nsnull
;
windowEnumerator
-
>
GetNext
(
getter_AddRefs
(
nextWindow
)
)
;
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
!
xulWindow
)
break
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
xulWindow
)
)
;
ThrowErrIfNil
(
baseWindow
paramErr
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsnull
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
ThrowErrIfNil
(
widget
paramErr
)
;
WindowRef
windowRef
=
(
WindowRef
)
widget
-
>
GetNativeData
(
NS_NATIVE_DISPLAY
)
;
TWindowKind
thisWindowKind
=
GetXULWindowKind
(
xulWindow
)
;
if
(
kAnyWindowKind
=
=
windowKind
|
|
(
thisWindowKind
=
=
windowKind
)
)
{
if
(
NULL
=
=
windowName
)
{
PRInt32
zIndex
;
widget
-
>
GetZIndex
(
&
zIndex
)
;
if
(
0L
=
=
zIndex
)
{
windowPtr
=
(
WindowPtr
)
windowRef
;
break
;
}
}
else
{
Str255
pascalTitle
;
GetWTitle
(
windowRef
pascalTitle
)
;
if
(
windowNameString
.
Compare
(
(
const
char
*
)
&
pascalTitle
[
1
]
PR_FALSE
pascalTitle
[
0
]
)
=
=
0
)
{
windowPtr
=
(
WindowPtr
)
windowRef
;
break
;
}
}
}
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
}
return
windowPtr
;
}
WindowPtr
nsWindowUtils
:
:
GetIndexedWindowOfKind
(
TWindowKind
windowKind
TAEListIndex
index
)
{
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
)
;
ThrowErrIfNil
(
windowMediator
paramErr
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
if
(
NS_FAILED
(
windowMediator
-
>
GetZOrderXULWindowEnumerator
(
nsnull
PR_TRUE
getter_AddRefs
(
windowEnumerator
)
)
)
)
ThrowOSErr
(
paramErr
)
;
WindowPtr
windowPtr
=
NULL
;
PRBool
more
;
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
while
(
more
)
{
nsCOMPtr
<
nsISupports
>
nextWindow
=
nsnull
;
windowEnumerator
-
>
GetNext
(
getter_AddRefs
(
nextWindow
)
)
;
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
!
xulWindow
)
break
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
xulWindow
)
)
;
ThrowErrIfNil
(
baseWindow
paramErr
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsnull
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
ThrowErrIfNil
(
widget
paramErr
)
;
WindowRef
windowRef
=
(
WindowRef
)
widget
-
>
GetNativeData
(
NS_NATIVE_DISPLAY
)
;
TWindowKind
thisWindowKind
=
GetXULWindowKind
(
xulWindow
)
;
if
(
kAnyWindowKind
=
=
windowKind
|
|
(
thisWindowKind
=
=
windowKind
)
)
{
if
(
0L
=
=
-
-
index
)
{
windowPtr
=
(
WindowPtr
)
windowRef
;
break
;
}
}
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
}
return
windowPtr
;
}
TAEListIndex
nsWindowUtils
:
:
GetWindowIndex
(
TWindowKind
windowKind
WindowPtr
theWindow
)
{
nsCOMPtr
<
nsIWindowMediator
>
windowMediator
(
do_GetService
(
NS_WINDOWMEDIATOR_CONTRACTID
)
)
;
ThrowErrIfNil
(
windowMediator
paramErr
)
;
nsCOMPtr
<
nsISimpleEnumerator
>
windowEnumerator
;
if
(
NS_FAILED
(
windowMediator
-
>
GetZOrderXULWindowEnumerator
(
nsnull
PR_TRUE
getter_AddRefs
(
windowEnumerator
)
)
)
)
ThrowOSErr
(
paramErr
)
;
TAEListIndex
index
=
0L
;
PRBool
more
;
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
while
(
more
)
{
nsCOMPtr
<
nsISupports
>
nextWindow
=
nsnull
;
windowEnumerator
-
>
GetNext
(
getter_AddRefs
(
nextWindow
)
)
;
nsCOMPtr
<
nsIXULWindow
>
xulWindow
(
do_QueryInterface
(
nextWindow
)
)
;
if
(
!
xulWindow
)
break
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
xulWindow
)
)
;
ThrowErrIfNil
(
baseWindow
paramErr
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
nsnull
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
widget
)
)
;
ThrowErrIfNil
(
widget
paramErr
)
;
WindowRef
windowRef
=
(
WindowRef
)
widget
-
>
GetNativeData
(
NS_NATIVE_DISPLAY
)
;
TWindowKind
thisWindowKind
=
GetXULWindowKind
(
xulWindow
)
;
if
(
kAnyWindowKind
=
=
windowKind
|
|
(
thisWindowKind
=
=
windowKind
)
)
{
+
+
index
;
if
(
(
WindowPtr
)
windowRef
=
=
theWindow
)
return
index
;
}
windowEnumerator
-
>
HasMoreElements
(
&
more
)
;
}
return
0L
;
}
void
nsWindowUtils
:
:
GetCleanedWindowName
(
WindowPtr
wind
char
*
outName
long
maxLen
)
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
;
GetXULWindowFromWindowPtr
(
wind
getter_AddRefs
(
xulWindow
)
)
;
ThrowErrIfNil
(
xulWindow
paramErr
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
contentShell
;
xulWindow
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
contentShell
)
)
;
ThrowErrIfNil
(
contentShell
paramErr
)
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
treeOwner
;
contentShell
-
>
GetTreeOwner
(
getter_AddRefs
(
treeOwner
)
)
;
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
(
do_QueryInterface
(
treeOwner
)
)
;
ThrowErrIfNil
(
baseWindow
paramErr
)
;
nsXPIDLString
title
;
baseWindow
-
>
GetTitle
(
getter_Copies
(
title
)
)
;
ThrowErrIfNil
(
title
paramErr
)
;
const
char
*
cTitle
=
NS_ConvertUTF16toUTF8
(
title
)
.
get
(
)
;
strncpy
(
outName
cTitle
maxLen
)
;
outName
[
maxLen
-
1
]
=
'
\
0
'
;
}
void
nsWindowUtils
:
:
GetWindowUrlString
(
WindowPtr
wind
char
*
*
outUrlStringPtr
)
{
*
outUrlStringPtr
=
NULL
;
nsCOMPtr
<
nsIXULWindow
>
xulWindow
;
GetXULWindowFromWindowPtr
(
wind
getter_AddRefs
(
xulWindow
)
)
;
ThrowErrIfNil
(
xulWindow
paramErr
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
contentShell
;
xulWindow
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
contentShell
)
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
contentShell
)
)
;
ThrowErrIfNil
(
webNav
paramErr
)
;
nsCOMPtr
<
nsIURI
>
sourceURL
;
webNav
-
>
GetCurrentURI
(
getter_AddRefs
(
sourceURL
)
)
;
ThrowErrIfNil
(
sourceURL
paramErr
)
;
nsCAutoString
spec
;
sourceURL
-
>
GetSpec
(
spec
)
;
*
outUrlStringPtr
=
ToNewCString
(
spec
)
;
}
inline
void
GetWindowPortRect
(
WindowPtr
wind
Rect
*
outRect
)
{
#
if
OPAQUE_TOOLBOX_STRUCTS
:
:
GetPortBounds
(
GetWindowPort
(
wind
)
outRect
)
;
#
else
*
outRect
=
wind
-
>
portRect
;
#
endif
}
static
void
LocalToGlobalRect
(
Rect
*
r
)
{
LocalToGlobal
(
(
Point
*
)
&
r
-
>
top
)
;
LocalToGlobal
(
(
Point
*
)
&
r
-
>
bottom
)
;
}
void
nsWindowUtils
:
:
GetWindowGlobalBounds
(
WindowPtr
wind
Rect
*
outBounds
)
{
GrafPtr
curPort
;
GetWindowPortRect
(
wind
outBounds
)
;
GetPort
(
&
curPort
)
;
SetPortWindowPort
(
wind
)
;
LocalToGlobalRect
(
outBounds
)
;
SetPort
(
curPort
)
;
}
void
nsWindowUtils
:
:
LoadURLInWindow
(
WindowPtr
wind
const
char
*
urlString
)
{
OSErr
err
=
noErr
;
if
(
!
wind
)
{
nsMacCommandLine
&
cmdLine
=
nsMacCommandLine
:
:
GetMacCommandLine
(
)
;
err
=
cmdLine
.
DispatchURLToNewBrowser
(
urlString
)
;
ThrowIfOSErr
(
err
)
;
}
else
{
nsCOMPtr
<
nsIXULWindow
>
xulWindow
;
GetXULWindowFromWindowPtr
(
wind
getter_AddRefs
(
xulWindow
)
)
;
ThrowErrIfNil
(
xulWindow
paramErr
)
;
LoadURLInXULWindow
(
xulWindow
urlString
)
;
}
}
void
nsWindowUtils
:
:
LoadURLInXULWindow
(
nsIXULWindow
*
inWindow
const
char
*
urlString
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
;
nsCOMPtr
<
nsIDocShellTreeItem
>
docItem
;
nsCOMPtr
<
nsIBrowserDOMWindow
>
bwin
;
inWindow
-
>
GetDocShell
(
getter_AddRefs
(
docShell
)
)
;
docItem
=
do_QueryInterface
(
docShell
)
;
if
(
docItem
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
rootItem
;
docItem
-
>
GetRootTreeItem
(
getter_AddRefs
(
rootItem
)
)
;
nsCOMPtr
<
nsIDOMWindow
>
rootWin
(
do_GetInterface
(
rootItem
)
)
;
nsCOMPtr
<
nsIDOMChromeWindow
>
chromeWin
(
do_QueryInterface
(
rootWin
)
)
;
if
(
chromeWin
)
chromeWin
-
>
GetBrowserDOMWindow
(
getter_AddRefs
(
bwin
)
)
;
}
if
(
bwin
)
{
nsCOMPtr
<
nsIURI
>
uri
;
nsDependentCString
urlStr
(
urlString
)
;
NS_NewURI
(
getter_AddRefs
(
uri
)
urlStr
0
0
)
;
if
(
uri
)
{
nsCOMPtr
<
nsIDOMWindow
>
newBrowserWindow
;
bwin
-
>
OpenURI
(
uri
0
nsIBrowserDOMWindow
:
:
OPEN_DEFAULTWINDOW
nsIBrowserDOMWindow
:
:
OPEN_EXTERNAL
getter_AddRefs
(
newBrowserWindow
)
)
;
if
(
newBrowserWindow
)
return
;
}
}
inWindow
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
docItem
)
)
;
ThrowErrIfNil
(
docItem
paramErr
)
;
nsCOMPtr
<
nsIWebNavigation
>
webNav
(
do_QueryInterface
(
docItem
)
)
;
ThrowErrIfNil
(
webNav
paramErr
)
;
nsAutoString
urlWString
;
urlWString
.
AssignWithConversion
(
urlString
)
;
webNav
-
>
LoadURI
(
urlWString
.
get
(
)
nsIWebNavigation
:
:
LOAD_FLAGS_NONE
nsnull
nsnull
nsnull
)
;
}
#
pragma
mark
-
Boolean
nsWindowUtils
:
:
WindowIsResizeable
(
WindowPtr
wind
)
{
OSStatus
status
;
UInt32
features
;
status
=
GetWindowFeatures
(
wind
&
features
)
;
return
(
(
status
=
=
noErr
)
&
&
(
(
features
&
kWindowCanGrow
)
!
=
0
)
)
;
}
Boolean
nsWindowUtils
:
:
WindowIsZoomable
(
WindowPtr
wind
)
{
OSStatus
status
;
UInt32
features
;
status
=
GetWindowFeatures
(
wind
&
features
)
;
return
(
(
status
=
=
noErr
)
&
&
(
(
features
&
kWindowCanZoom
)
!
=
0
)
)
;
}
Boolean
nsWindowUtils
:
:
WindowIsZoomed
(
WindowPtr
wind
)
{
Rect
r
userRect
;
GetWindowUserState
(
wind
&
userRect
)
;
GetWindowPortRect
(
wind
&
r
)
;
OffsetRect
(
&
userRect
-
userRect
.
left
-
userRect
.
top
)
;
return
EqualRect
(
&
userRect
&
r
)
;
}
Boolean
nsWindowUtils
:
:
WindowHasTitleBar
(
WindowPtr
wind
)
{
OSStatus
status
;
UInt32
features
;
status
=
GetWindowFeatures
(
wind
&
features
)
;
return
(
(
status
=
=
noErr
)
&
&
(
(
features
&
kWindowHasTitleBar
)
!
=
0
)
)
;
}
Boolean
nsWindowUtils
:
:
WindowIsCloseable
(
WindowPtr
wind
)
{
if
(
(
long
)
GetWindowAttributes
!
=
kUnresolvedCFragSymbolAddress
)
{
OSStatus
status
;
UInt32
attributes
;
status
=
GetWindowAttributes
(
wind
&
attributes
)
;
return
(
(
status
=
=
noErr
)
&
&
(
(
attributes
&
kWindowCloseBoxAttribute
)
!
=
0
)
)
;
}
return
true
;
}
Boolean
nsWindowUtils
:
:
WindowIsModal
(
WindowPtr
wind
)
{
OSStatus
status
;
UInt32
features
;
status
=
GetWindowFeatures
(
wind
&
features
)
;
return
(
(
status
=
=
noErr
)
&
&
(
(
features
&
kWindowIsModal
)
!
=
0
)
)
;
}
Boolean
nsWindowUtils
:
:
WindowIsFloating
(
WindowPtr
wind
)
{
WindowClass
windClass
;
if
(
GetWindowClass
(
wind
&
windClass
)
=
=
noErr
)
{
return
(
windClass
=
=
kFloatingWindowClass
)
;
}
return
false
;
}
Boolean
nsWindowUtils
:
:
WindowIsModified
(
WindowPtr
wind
)
{
return
false
;
}
