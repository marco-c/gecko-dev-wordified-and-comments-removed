#
ifndef
js_StableStringChars_h
#
define
js_StableStringChars_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Vector
.
h
"
class
JSLinearString
;
namespace
JS
{
class
MOZ_STACK_CLASS
JS_PUBLIC_API
AutoStableStringChars
final
{
static
const
size_t
InlineCapacity
=
24
;
Rooted
<
JSString
*
>
s_
;
union
MOZ_INIT_OUTSIDE_CTOR
{
const
char16_t
*
twoByteChars_
;
const
Latin1Char
*
latin1Chars_
;
}
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
length_
;
mozilla
:
:
Maybe
<
js
:
:
Vector
<
uint8_t
InlineCapacity
>
>
ownChars_
;
enum
State
{
Uninitialized
Latin1
TwoByte
}
;
State
state_
;
void
holdStableChars
(
JSLinearString
*
s
)
;
public
:
explicit
AutoStableStringChars
(
JSContext
*
cx
)
:
s_
(
cx
)
state_
(
Uninitialized
)
{
}
[
[
nodiscard
]
]
bool
init
(
JSContext
*
cx
JSString
*
s
)
;
[
[
nodiscard
]
]
bool
initTwoByte
(
JSContext
*
cx
JSString
*
s
)
;
bool
isLatin1
(
)
const
{
return
state_
=
=
Latin1
;
}
bool
isTwoByte
(
)
const
{
return
state_
=
=
TwoByte
;
}
const
Latin1Char
*
latin1Chars
(
)
const
{
MOZ_ASSERT
(
state_
=
=
Latin1
)
;
return
latin1Chars_
;
}
const
char16_t
*
twoByteChars
(
)
const
{
MOZ_ASSERT
(
state_
=
=
TwoByte
)
;
return
twoByteChars_
;
}
mozilla
:
:
Range
<
const
Latin1Char
>
latin1Range
(
)
const
{
MOZ_ASSERT
(
state_
=
=
Latin1
)
;
return
mozilla
:
:
Range
<
const
Latin1Char
>
(
latin1Chars_
length
(
)
)
;
}
mozilla
:
:
Range
<
const
char16_t
>
twoByteRange
(
)
const
{
MOZ_ASSERT
(
state_
=
=
TwoByte
)
;
return
mozilla
:
:
Range
<
const
char16_t
>
(
twoByteChars_
length
(
)
)
;
}
bool
maybeGiveOwnershipToCaller
(
)
{
MOZ_ASSERT
(
state_
!
=
Uninitialized
)
;
if
(
!
ownChars_
.
isSome
(
)
|
|
!
ownChars_
-
>
extractRawBuffer
(
)
)
{
return
false
;
}
state_
=
Uninitialized
;
ownChars_
.
reset
(
)
;
return
true
;
}
size_t
length
(
)
const
{
MOZ_ASSERT
(
state_
!
=
Uninitialized
)
;
return
length_
;
}
private
:
AutoStableStringChars
(
const
AutoStableStringChars
&
other
)
=
delete
;
void
operator
=
(
const
AutoStableStringChars
&
other
)
=
delete
;
template
<
typename
T
>
T
*
allocOwnChars
(
JSContext
*
cx
size_t
count
)
;
bool
copyLatin1Chars
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
linearString
)
;
bool
copyTwoByteChars
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
linearString
)
;
bool
copyAndInflateLatin1Chars
(
JSContext
*
Handle
<
JSLinearString
*
>
linearString
)
;
}
;
}
#
endif
