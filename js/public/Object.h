#
ifndef
js_public_Object_h
#
define
js_public_Object_h
#
include
"
js
/
shadow
/
Object
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Realm
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
Compartment
;
extern
JS_PUBLIC_API
bool
GetBuiltinClass
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
js
:
:
ESClass
*
cls
)
;
inline
const
JSClass
*
GetClass
(
const
JSObject
*
obj
)
{
return
reinterpret_cast
<
const
shadow
:
:
Object
*
>
(
obj
)
-
>
shape
-
>
base
-
>
clasp
;
}
static
MOZ_ALWAYS_INLINE
Compartment
*
GetCompartment
(
JSObject
*
obj
)
{
Realm
*
realm
=
reinterpret_cast
<
shadow
:
:
Object
*
>
(
obj
)
-
>
shape
-
>
base
-
>
realm
;
return
GetCompartmentForRealm
(
realm
)
;
}
inline
void
*
GetPrivate
(
JSObject
*
obj
)
{
MOZ_ASSERT
(
GetClass
(
obj
)
-
>
flags
&
JSCLASS_HAS_PRIVATE
)
;
const
auto
*
nobj
=
reinterpret_cast
<
const
shadow
:
:
Object
*
>
(
obj
)
;
return
nobj
-
>
fixedSlots
(
)
[
nobj
-
>
numFixedSlots
(
)
]
.
toPrivate
(
)
;
}
extern
JS_PUBLIC_API
void
SetPrivate
(
JSObject
*
obj
void
*
data
)
;
inline
const
Value
&
GetReservedSlot
(
JSObject
*
obj
size_t
slot
)
{
MOZ_ASSERT
(
slot
<
JSCLASS_RESERVED_SLOTS
(
GetClass
(
obj
)
)
)
;
return
reinterpret_cast
<
const
shadow
:
:
Object
*
>
(
obj
)
-
>
slotRef
(
slot
)
;
}
namespace
detail
{
extern
JS_PUBLIC_API
void
SetReservedSlotWithBarrier
(
JSObject
*
obj
size_t
slot
const
Value
&
value
)
;
}
inline
void
SetReservedSlot
(
JSObject
*
obj
size_t
slot
const
Value
&
value
)
{
MOZ_ASSERT
(
slot
<
JSCLASS_RESERVED_SLOTS
(
GetClass
(
obj
)
)
)
;
auto
*
sobj
=
reinterpret_cast
<
shadow
:
:
Object
*
>
(
obj
)
;
if
(
sobj
-
>
slotRef
(
slot
)
.
isGCThing
(
)
|
|
value
.
isGCThing
(
)
)
{
detail
:
:
SetReservedSlotWithBarrier
(
obj
slot
value
)
;
}
else
{
sobj
-
>
slotRef
(
slot
)
=
value
;
}
}
template
<
typename
T
>
inline
T
*
GetMaybePtrFromReservedSlot
(
JSObject
*
obj
size_t
slot
)
{
Value
v
=
GetReservedSlot
(
obj
slot
)
;
return
v
.
isUndefined
(
)
?
nullptr
:
static_cast
<
T
*
>
(
v
.
toPrivate
(
)
)
;
}
template
<
typename
T
>
inline
T
*
GetObjectISupports
(
JSObject
*
obj
)
{
MOZ_ASSERT
(
GetClass
(
obj
)
-
>
slot0IsISupports
(
)
)
;
return
GetMaybePtrFromReservedSlot
<
T
>
(
obj
0
)
;
}
inline
void
SetObjectISupports
(
JSObject
*
obj
void
*
nsISupportsValue
)
{
MOZ_ASSERT
(
GetClass
(
obj
)
-
>
slot0IsISupports
(
)
)
;
SetReservedSlot
(
obj
0
PrivateValue
(
nsISupportsValue
)
)
;
}
}
#
endif
