#
ifndef
js_JSON_h
#
define
js_JSON_h
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
using
JSONWriteCallback
=
bool
(
*
)
(
const
char16_t
*
buf
uint32_t
len
void
*
data
)
;
extern
JS_PUBLIC_API
bool
JS_Stringify
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
value
JS
:
:
Handle
<
JSObject
*
>
replacer
JS
:
:
Handle
<
JS
:
:
Value
>
space
JSONWriteCallback
callback
void
*
data
)
;
namespace
JS
{
extern
JS_PUBLIC_API
bool
ToJSONMaybeSafely
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
input
JSONWriteCallback
callback
void
*
data
)
;
extern
JS_PUBLIC_API
bool
ToJSON
(
JSContext
*
cx
Handle
<
Value
>
value
Handle
<
JSObject
*
>
replacer
Handle
<
Value
>
space
JSONWriteCallback
callback
void
*
data
)
;
}
extern
JS_PUBLIC_API
bool
JS_ParseJSON
(
JSContext
*
cx
const
char16_t
*
chars
uint32_t
len
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
extern
JS_PUBLIC_API
bool
JS_ParseJSON
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
extern
JS_PUBLIC_API
bool
JS_ParseJSON
(
JSContext
*
cx
const
JS
:
:
Latin1Char
*
chars
uint32_t
len
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
extern
JS_PUBLIC_API
bool
JS_ParseJSONWithReviver
(
JSContext
*
cx
const
char16_t
*
chars
uint32_t
len
JS
:
:
Handle
<
JS
:
:
Value
>
reviver
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
extern
JS_PUBLIC_API
bool
JS_ParseJSONWithReviver
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
JS
:
:
Handle
<
JS
:
:
Value
>
reviver
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
#
endif
