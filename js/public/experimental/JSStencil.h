#
ifndef
js_experimental_JSStencil_h
#
define
js_experimental_JSStencil_h
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
OffThreadScriptCompilation
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Transcoding
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
struct
ParseTask
;
namespace
frontend
{
struct
CompilationStencil
;
struct
CompilationGCOutput
;
}
}
namespace
JS
{
class
OffThreadToken
;
using
Stencil
=
js
:
:
frontend
:
:
CompilationStencil
;
struct
InstantiationStorage
{
private
:
js
:
:
frontend
:
:
CompilationGCOutput
*
gcOutput_
=
nullptr
;
friend
JS_PUBLIC_API
JSScript
*
InstantiateGlobalStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
InstantiationStorage
*
storage
)
;
friend
JS_PUBLIC_API
JSObject
*
InstantiateModuleStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
InstantiationStorage
*
storage
)
;
friend
struct
js
:
:
ParseTask
;
public
:
InstantiationStorage
(
)
=
default
;
InstantiationStorage
(
InstantiationStorage
&
&
other
)
:
gcOutput_
(
other
.
gcOutput_
)
{
other
.
gcOutput_
=
nullptr
;
}
~
InstantiationStorage
(
)
;
private
:
InstantiationStorage
(
const
InstantiationStorage
&
other
)
=
delete
;
void
operator
=
(
const
InstantiationStorage
&
aOther
)
=
delete
;
public
:
bool
isValid
(
)
const
{
return
!
!
gcOutput_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
JS_PUBLIC_API
void
StencilAddRef
(
Stencil
*
stencil
)
;
JS_PUBLIC_API
void
StencilRelease
(
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
CompileGlobalScriptToStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
CompileGlobalScriptToStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
CompileModuleScriptToStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
CompileModuleScriptToStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
FinishOffThreadStencil
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
)
;
extern
JS_PUBLIC_API
JSScript
*
InstantiateGlobalStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
JSScript
*
InstantiateGlobalStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
InstantiationStorage
*
storage
)
;
extern
JS_PUBLIC_API
bool
StencilIsBorrowed
(
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
bool
StencilCanLazilyParse
(
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
JSObject
*
InstantiateModuleStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
JSObject
*
InstantiateModuleStencil
(
JSContext
*
cx
const
InstantiateOptions
&
options
Stencil
*
stencil
InstantiationStorage
*
storage
)
;
extern
JS_PUBLIC_API
TranscodeResult
EncodeStencil
(
JSContext
*
cx
Stencil
*
stencil
TranscodeBuffer
&
buffer
)
;
extern
JS_PUBLIC_API
TranscodeResult
DecodeStencil
(
JSContext
*
cx
const
DecodeOptions
&
options
const
TranscodeRange
&
range
Stencil
*
*
stencilOut
)
;
extern
JS_PUBLIC_API
size_t
SizeOfStencil
(
Stencil
*
stencil
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
extern
JS_PUBLIC_API
OffThreadToken
*
CompileToStencilOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
OffThreadToken
*
CompileToStencilOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
FinishCompileToStencilOffThread
(
JSContext
*
cx
OffThreadToken
*
token
InstantiationStorage
*
storage
=
nullptr
)
;
extern
JS_PUBLIC_API
OffThreadToken
*
DecodeMultiOffThreadStencils
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
mozilla
:
:
Vector
<
TranscodeSource
>
&
sources
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
bool
FinishMultiOffThreadStencilDecoder
(
JSContext
*
cx
OffThreadToken
*
token
mozilla
:
:
Vector
<
RefPtr
<
Stencil
>
>
*
stencils
)
;
}
namespace
mozilla
{
template
<
>
struct
RefPtrTraits
<
JS
:
:
Stencil
>
{
static
void
AddRef
(
JS
:
:
Stencil
*
stencil
)
{
JS
:
:
StencilAddRef
(
stencil
)
;
}
static
void
Release
(
JS
:
:
Stencil
*
stencil
)
{
JS
:
:
StencilRelease
(
stencil
)
;
}
}
;
}
#
endif
