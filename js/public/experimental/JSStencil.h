#
ifndef
js_experimental_JSStencil_h
#
define
js_experimental_JSStencil_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Transcoding
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
:
:
frontend
{
struct
CompilationStencil
;
}
;
namespace
JS
{
using
Stencil
=
js
:
:
frontend
:
:
CompilationStencil
;
JS_PUBLIC_API
void
StencilAddRef
(
Stencil
*
stencil
)
;
JS_PUBLIC_API
void
StencilRelease
(
Stencil
*
stencil
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
Stencil
>
CompileGlobalScriptToStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
JSScript
*
InstantiateGlobalStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
RefPtr
<
Stencil
>
stencil
)
;
extern
JS_PUBLIC_API
TranscodeResult
EncodeStencil
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
RefPtr
<
Stencil
>
stencil
TranscodeBuffer
&
buffer
)
;
extern
JS_PUBLIC_API
TranscodeResult
DecodeStencil
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
TranscodeRange
&
range
RefPtr
<
Stencil
>
&
stencilOut
)
;
}
namespace
mozilla
{
template
<
>
struct
RefPtrTraits
<
JS
:
:
Stencil
>
{
static
void
AddRef
(
JS
:
:
Stencil
*
stencil
)
{
JS
:
:
StencilAddRef
(
stencil
)
;
}
static
void
Release
(
JS
:
:
Stencil
*
stencil
)
{
JS
:
:
StencilRelease
(
stencil
)
;
}
}
;
}
#
endif
