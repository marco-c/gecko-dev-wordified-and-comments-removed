#
ifndef
js_experimental_TypedData_h
#
define
js_experimental_TypedData_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Object
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
ScalarType
.
h
"
struct
JSClass
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
AutoRequireNoGC
;
}
extern
JS_FRIEND_API
JSObject
*
JS_NewInt8Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8ClampedArray
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt16Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint16Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt32Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint32Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat32Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat64Array
(
JSContext
*
cx
size_t
nelements
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt8ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8ClampedArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt16ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint16ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt32ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint32ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat32ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat64ArrayFromArray
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt8ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint8ClampedArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt16ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint16ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewInt32ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewUint32ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewBigInt64ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewBigUint64ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat32ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
JSObject
*
JS_NewFloat64ArrayWithBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
extern
JS_FRIEND_API
bool
JS_IsTypedArrayObject
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsArrayBufferViewObject
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsInt8Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsUint8Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsUint8ClampedArray
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsInt16Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsUint16Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsInt32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsUint32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsFloat32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_IsFloat64Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
bool
JS_GetTypedArraySharedness
(
JSObject
*
obj
)
;
namespace
js
{
extern
JS_FRIEND_API
JSObject
*
UnwrapInt8Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapUint8Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapUint8ClampedArray
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapInt16Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapUint16Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapInt32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapUint32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapBigInt64Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapBigUint64Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapFloat32Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapFloat64Array
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapArrayBufferView
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
JSObject
*
UnwrapReadableStream
(
JSObject
*
obj
)
;
namespace
detail
{
extern
JS_FRIEND_DATA
const
JSClass
*
const
Int8ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Uint8ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Uint8ClampedArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Int16ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Uint16ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Int32ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Uint32ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
BigInt64ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
BigUint64ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Float32ArrayClassPtr
;
extern
JS_FRIEND_DATA
const
JSClass
*
const
Float64ArrayClassPtr
;
const
size_t
TypedArrayLengthSlot
=
1
;
}
#
define
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Type
type
)
\
inline
void
Get
#
#
Type
#
#
ArrayLengthAndData
(
\
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
type
*
*
data
)
{
\
MOZ_ASSERT
(
JS
:
:
GetClass
(
obj
)
=
=
detail
:
:
Type
#
#
ArrayClassPtr
)
;
\
const
JS
:
:
Value
&
lenSlot
=
\
JS
:
:
GetReservedSlot
(
obj
detail
:
:
TypedArrayLengthSlot
)
;
\
*
length
=
size_t
(
lenSlot
.
toPrivate
(
)
)
;
\
*
isSharedMemory
=
JS_GetTypedArraySharedness
(
obj
)
;
\
*
data
=
static_cast
<
type
*
>
(
JS
:
:
GetPrivate
(
obj
)
)
;
\
}
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Int8
int8_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Uint8
uint8_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Uint8Clamped
uint8_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Int16
int16_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Uint16
uint16_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Int32
int32_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Uint32
uint32_t
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Float32
float
)
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
Float64
double
)
#
undef
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
extern
JS_FRIEND_API
void
GetArrayBufferViewLengthAndData
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
}
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsInt8Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
int8_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsUint8Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsUint8ClampedArray
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsInt16Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
int16_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsUint16Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
uint16_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsInt32Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
int32_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsUint32Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
uint32_t
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsFloat32Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
float
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsFloat64Array
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
double
*
*
data
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetObjectAsArrayBufferView
(
JSObject
*
obj
uint32_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_FRIEND_API
js
:
:
Scalar
:
:
Type
JS_GetArrayBufferViewType
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
uint32_t
JS_GetTypedArrayLength
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
uint32_t
JS_GetTypedArrayByteOffset
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
uint32_t
JS_GetTypedArrayByteLength
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
uint32_t
JS_GetArrayBufferViewByteLength
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
uint32_t
JS_GetArrayBufferViewByteOffset
(
JSObject
*
obj
)
;
extern
JS_FRIEND_API
int8_t
*
JS_GetInt8ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
uint8_t
*
JS_GetUint8ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
uint8_t
*
JS_GetUint8ClampedArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
int16_t
*
JS_GetInt16ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
uint16_t
*
JS_GetUint16ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
int32_t
*
JS_GetInt32ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
uint32_t
*
JS_GetUint32ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
float
*
JS_GetFloat32ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
double
*
JS_GetFloat64ArrayData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
void
*
JS_GetArrayBufferViewData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_FRIEND_API
uint8_t
*
JS_GetArrayBufferViewFixedData
(
JSObject
*
obj
uint8_t
*
buffer
size_t
bufSize
)
;
extern
JS_FRIEND_API
size_t
JS_MaxMovableTypedArraySize
(
)
;
extern
JS_FRIEND_API
JSObject
*
JS_GetArrayBufferViewBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
bool
*
isSharedMemory
)
;
JS_FRIEND_API
JSObject
*
JS_NewDataView
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
buffer
size_t
byteOffset
size_t
byteLength
)
;
namespace
JS
{
JS_FRIEND_API
bool
IsLargeArrayBufferView
(
JSObject
*
obj
)
;
}
#
endif
