#
ifndef
js_experimental_TypedData_h
#
define
js_experimental_TypedData_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Object
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
ScalarType
.
h
"
struct
JSClass
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
AutoRequireNoGC
;
}
#
define
JS_FOR_EACH_TYPED_ARRAY
(
MACRO
)
\
MACRO
(
int8_t
int8_t
Int8
)
\
MACRO
(
uint8_t
uint8_t
Uint8
)
\
MACRO
(
int16_t
int16_t
Int16
)
\
MACRO
(
uint16_t
uint16_t
Uint16
)
\
MACRO
(
int32_t
int32_t
Int32
)
\
MACRO
(
uint32_t
uint32_t
Uint32
)
\
MACRO
(
float
float
Float32
)
\
MACRO
(
double
double
Float64
)
\
MACRO
(
uint8_t
js
:
:
uint8_clamped
Uint8Clamped
)
\
MACRO
(
int64_t
int64_t
BigInt64
)
\
MACRO
(
uint64_t
uint64_t
BigUint64
)
#
define
DECLARE_TYPED_ARRAY_CREATION_API
(
ExternalType
NativeType
Name
)
\
extern
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
Array
(
JSContext
*
cx
\
size_t
nelements
)
;
\
extern
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
ArrayFromArray
(
\
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
array
)
;
\
extern
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
ArrayWithBuffer
(
\
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
arrayBuffer
size_t
byteOffset
\
int64_t
length
)
;
JS_FOR_EACH_TYPED_ARRAY
(
DECLARE_TYPED_ARRAY_CREATION_API
)
#
undef
DECLARE_TYPED_ARRAY_CREATION_API
extern
JS_PUBLIC_API
bool
JS_IsTypedArrayObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsArrayBufferViewObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsInt8Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsUint8Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsUint8ClampedArray
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsInt16Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsUint16Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsInt32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsUint32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsFloat32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_IsFloat64Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
JS_GetTypedArraySharedness
(
JSObject
*
obj
)
;
namespace
js
{
extern
JS_PUBLIC_API
JSObject
*
UnwrapInt8Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapUint8Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapUint8ClampedArray
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapInt16Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapUint16Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapInt32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapUint32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapBigInt64Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapBigUint64Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapFloat32Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapFloat64Array
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapArrayBufferView
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapReadableStream
(
JSObject
*
obj
)
;
namespace
detail
{
constexpr
size_t
TypedArrayLengthSlot
=
1
;
constexpr
size_t
TypedArrayDataSlot
=
3
;
}
extern
JS_PUBLIC_API
void
GetArrayBufferViewLengthAndData
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
}
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsInt8Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
int8_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsUint8Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsUint8ClampedArray
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsInt16Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
int16_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsUint16Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint16_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsInt32Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
int32_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsUint32Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint32_t
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsFloat32Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
float
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsFloat64Array
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
double
*
*
data
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetObjectAsArrayBufferView
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_PUBLIC_API
js
:
:
Scalar
:
:
Type
JS_GetArrayBufferViewType
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
size_t
JS_GetTypedArrayLength
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
size_t
JS_GetTypedArrayByteOffset
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
size_t
JS_GetTypedArrayByteLength
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
size_t
JS_GetArrayBufferViewByteLength
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
size_t
JS_GetArrayBufferViewByteOffset
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
void
*
JS_GetArrayBufferViewData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
;
extern
JS_PUBLIC_API
uint8_t
*
JS_GetArrayBufferViewFixedData
(
JSObject
*
obj
uint8_t
*
buffer
size_t
bufSize
)
;
extern
JS_PUBLIC_API
size_t
JS_MaxMovableTypedArraySize
(
)
;
extern
JS_PUBLIC_API
JSObject
*
JS_GetArrayBufferViewBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
bool
*
isSharedMemory
)
;
JS_PUBLIC_API
JSObject
*
JS_NewDataView
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
buffer
size_t
byteOffset
size_t
byteLength
)
;
namespace
JS
{
JS_PUBLIC_API
bool
IsLargeArrayBufferView
(
JSObject
*
obj
)
;
namespace
detail
{
template
<
js
:
:
Scalar
:
:
Type
ArrayType
>
struct
ExternalTypeOf
{
}
;
#
define
DEFINE_ELEMENT_TYPES
(
ExternalT
NativeT
Name
)
\
template
<
>
\
struct
ExternalTypeOf
<
js
:
:
Scalar
:
:
Name
>
{
\
using
Type
=
ExternalT
;
\
}
;
JS_FOR_EACH_TYPED_ARRAY
(
DEFINE_ELEMENT_TYPES
)
#
undef
DEFINE_ELEMENT_TYPES
template
<
js
:
:
Scalar
:
:
Type
ArrayType
>
using
ExternalTypeOf_t
=
typename
ExternalTypeOf
<
ArrayType
>
:
:
Type
;
}
class
JS_PUBLIC_API
ArrayBufferOrView
{
protected
:
Heap
<
JSObject
*
>
obj
;
explicit
ArrayBufferOrView
(
JSObject
*
unwrapped
)
:
obj
(
unwrapped
)
{
}
public
:
explicit
operator
bool
(
)
const
{
return
!
!
obj
;
}
void
trace
(
JSTracer
*
trc
)
{
TraceEdge
(
trc
&
obj
"
ArrayBufferOrView
object
"
)
;
}
void
reset
(
)
{
obj
=
nullptr
;
}
bool
isDetached
(
)
const
;
JSObject
*
asObject
(
)
const
{
return
obj
;
}
}
;
class
JS_PUBLIC_API
ArrayBufferView
:
public
ArrayBufferOrView
{
protected
:
explicit
ArrayBufferView
(
JSObject
*
unwrapped
)
:
ArrayBufferOrView
(
unwrapped
)
{
}
bool
isDetached
(
)
const
;
}
;
class
JS_PUBLIC_API
TypedArray_base
:
public
ArrayBufferView
{
protected
:
explicit
TypedArray_base
(
JSObject
*
unwrapped
)
:
ArrayBufferView
(
unwrapped
)
{
}
static
const
JSClass
*
const
classes
;
public
:
static
TypedArray_base
fromObject
(
JSObject
*
unwrapped
)
;
}
;
template
<
js
:
:
Scalar
:
:
Type
TypedArrayElementType
>
class
JS_PUBLIC_API
TypedArray
:
public
TypedArray_base
{
protected
:
explicit
TypedArray
(
JSObject
*
obj
)
:
TypedArray_base
(
obj
)
{
}
public
:
using
DataType
=
detail
:
:
ExternalTypeOf_t
<
TypedArrayElementType
>
;
static
constexpr
js
:
:
Scalar
:
:
Type
Scalar
=
TypedArrayElementType
;
static
const
JSClass
*
clasp
(
)
{
return
&
TypedArray_base
:
:
classes
[
static_cast
<
int
>
(
TypedArrayElementType
)
]
;
}
static
TypedArray
create
(
JSContext
*
cx
size_t
nelements
)
;
static
TypedArray
fromArray
(
JSContext
*
cx
HandleObject
other
)
;
static
TypedArray
fromBuffer
(
JSContext
*
cx
HandleObject
arrayBuffer
size_t
byteOffset
int64_t
length
)
;
static
TypedArray
fromObject
(
JSObject
*
unwrapped
)
{
if
(
unwrapped
&
&
GetClass
(
unwrapped
)
=
=
clasp
(
)
)
{
return
TypedArray
(
unwrapped
)
;
}
return
TypedArray
(
nullptr
)
;
}
DataType
*
getLengthAndData
(
size_t
*
length
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
nogc
)
;
DataType
*
getData
(
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
nogc
)
{
size_t
length
;
return
getLengthAndData
(
&
length
isSharedMemory
nogc
)
;
}
}
;
}
#
define
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
(
ExternalType
NativeType
Name
)
\
extern
JS_PUBLIC_API
ExternalType
*
JS_Get
#
#
Name
#
#
ArrayData
(
\
JSObject
*
maybeWrapped
bool
*
isSharedMemory
\
const
JS
:
:
AutoRequireNoGC
&
)
;
\
\
namespace
js
{
\
inline
void
Get
#
#
Name
#
#
ArrayLengthAndData
(
JSObject
*
unwrapped
\
size_t
*
length
\
bool
*
isSharedMemory
\
ExternalType
*
*
data
)
{
\
MOZ_ASSERT
(
JS
:
:
GetClass
(
unwrapped
)
=
=
\
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
:
:
clasp
(
)
)
;
\
const
JS
:
:
Value
&
lenSlot
=
\
JS
:
:
GetReservedSlot
(
unwrapped
detail
:
:
TypedArrayLengthSlot
)
;
\
*
length
=
size_t
(
lenSlot
.
toPrivate
(
)
)
;
\
*
isSharedMemory
=
JS_GetTypedArraySharedness
(
unwrapped
)
;
\
*
data
=
JS
:
:
GetMaybePtrFromReservedSlot
<
ExternalType
>
(
\
unwrapped
detail
:
:
TypedArrayDataSlot
)
;
\
}
\
}
/
*
namespace
js
*
/
JS_FOR_EACH_TYPED_ARRAY
(
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
)
#
undef
JS_DEFINE_DATA_AND_LENGTH_ACCESSOR
namespace
JS
{
#
define
IMPL_TYPED_ARRAY_CLASS
(
ExternalType
NativeType
Name
)
\
template
<
>
\
inline
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
\
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
:
:
create
(
JSContext
*
cx
size_t
nelements
)
{
\
return
fromObject
(
JS_New
#
#
Name
#
#
Array
(
cx
nelements
)
)
;
\
}
;
\
\
template
<
>
\
inline
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
\
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
:
:
fromArray
(
JSContext
*
cx
\
HandleObject
other
)
{
\
return
fromObject
(
JS_New
#
#
Name
#
#
ArrayFromArray
(
cx
other
)
)
;
\
}
;
\
\
template
<
>
\
inline
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
\
JS
:
:
TypedArray
<
js
:
:
Scalar
:
:
Name
>
:
:
fromBuffer
(
\
JSContext
*
cx
HandleObject
arrayBuffer
size_t
byteOffset
\
int64_t
length
)
{
\
return
fromObject
(
\
JS_New
#
#
Name
#
#
ArrayWithBuffer
(
cx
arrayBuffer
byteOffset
length
)
)
;
\
}
;
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_CLASS
)
#
undef
IMPL_TYPED_ARRAY_CLASS
}
#
endif
