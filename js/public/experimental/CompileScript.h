#
ifndef
js_experimental_CompileScript_h
#
define
js_experimental_CompileScript_h
#
include
"
jspubtd
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
namespace
js
{
class
FrontendContext
;
namespace
frontend
{
struct
CompilationInput
;
}
}
namespace
JS
{
using
FrontendContext
=
js
:
:
FrontendContext
;
JS_PUBLIC_API
JS
:
:
FrontendContext
*
NewFrontendContext
(
)
;
JS_PUBLIC_API
void
DestroyFrontendContext
(
JS
:
:
FrontendContext
*
fc
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
JS
:
:
Stencil
>
CompileGlobalScriptToStencil
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
NativeStackLimit
stackLimit
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
js
:
:
UniquePtr
<
js
:
:
frontend
:
:
CompilationInput
>
&
stencilInput
)
;
extern
JS_PUBLIC_API
already_AddRefed
<
JS
:
:
Stencil
>
CompileGlobalScriptToStencil
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
NativeStackLimit
stackLimit
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
js
:
:
UniquePtr
<
js
:
:
frontend
:
:
CompilationInput
>
&
stencilInput
)
;
extern
JS_PUBLIC_API
bool
PrepareForInstantiate
(
JS
:
:
FrontendContext
*
fc
js
:
:
frontend
:
:
CompilationInput
&
input
JS
:
:
Stencil
&
stencil
JS
:
:
InstantiationStorage
&
storage
)
;
}
#
endif
