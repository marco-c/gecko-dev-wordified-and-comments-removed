#
ifndef
_js_experimental_LoggingInterface_h_
#
define
_js_experimental_LoggingInterface_h_
#
include
"
mozilla
/
LoggingCore
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
GCAPI
.
h
"
struct
JSContext
;
namespace
JS
{
using
OpaqueLogger
=
void
*
;
struct
LoggingInterface
{
OpaqueLogger
(
*
getLoggerByName
)
(
const
char
*
loggerName
)
=
nullptr
;
void
(
*
logPrintVA
)
(
const
OpaqueLogger
aModule
mozilla
:
:
LogLevel
aLevel
const
char
*
aFmt
va_list
ap
)
MOZ_FORMAT_PRINTF
(
3
0
)
=
nullptr
;
mozilla
:
:
AtomicLogLevel
&
(
*
getLevelRef
)
(
OpaqueLogger
)
=
nullptr
;
void
logPrint
(
const
OpaqueLogger
aModule
mozilla
:
:
LogLevel
aLevel
const
char
*
aFmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
4
5
)
{
JS
:
:
AutoSuppressGCAnalysis
suppress
;
va_list
ap
;
va_start
(
ap
aFmt
)
;
this
-
>
logPrintVA
(
aModule
aLevel
aFmt
ap
)
;
va_end
(
ap
)
;
}
bool
isComplete
(
)
const
{
return
getLoggerByName
&
&
logPrintVA
&
&
getLevelRef
;
}
}
;
extern
JS_PUBLIC_API
bool
SetLoggingInterface
(
LoggingInterface
&
iface
)
;
}
#
endif
