#
ifndef
js_experimental_CTypes_h
#
define
js_experimental_CTypes_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
#
ifdef
JS_HAS_CTYPES
extern
JS_PUBLIC_API
bool
InitCTypesClass
(
JSContext
*
cx
Handle
<
JSObject
*
>
global
)
;
#
endif
enum
class
CTypesActivityType
{
BeginCall
EndCall
BeginCallback
EndCallback
}
;
using
CTypesActivityCallback
=
void
(
*
)
(
JSContext
*
CTypesActivityType
)
;
extern
JS_FRIEND_API
void
SetCTypesActivityCallback
(
JSContext
*
cx
CTypesActivityCallback
cb
)
;
class
MOZ_RAII
JS_FRIEND_API
AutoCTypesActivityCallback
{
private
:
JSContext
*
cx
;
CTypesActivityCallback
callback
;
CTypesActivityType
endType
;
public
:
AutoCTypesActivityCallback
(
JSContext
*
cx
CTypesActivityType
beginType
CTypesActivityType
endType
)
;
~
AutoCTypesActivityCallback
(
)
{
DoEndCallback
(
)
;
}
void
DoEndCallback
(
)
{
if
(
callback
)
{
callback
(
cx
endType
)
;
callback
=
nullptr
;
}
}
}
;
#
ifdef
JS_HAS_CTYPES
using
CTypesUnicodeToNativeFun
=
char
*
(
*
)
(
JSContext
*
const
char16_t
*
size_t
)
;
struct
CTypesCallbacks
{
CTypesUnicodeToNativeFun
unicodeToNative
;
}
;
extern
JS_PUBLIC_API
void
SetCTypesCallbacks
(
JSObject
*
ctypesObj
const
CTypesCallbacks
*
callbacks
)
;
#
endif
}
#
endif
