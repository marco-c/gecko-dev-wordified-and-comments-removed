#
ifndef
js_shadow_Shape_h
#
define
js_shadow_Shape_h
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Id
.
h
"
struct
JSClass
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
namespace
shadow
{
struct
BaseShape
{
const
JSClass
*
clasp
;
JS
:
:
Realm
*
realm
;
}
;
class
Shape
{
public
:
shadow
:
:
BaseShape
*
base
;
uint32_t
immutableFlags
;
enum
class
Kind
:
uint8_t
{
Shared
=
1
Dictionary
=
3
Proxy
=
0
WasmGC
=
2
}
;
static
constexpr
uint32_t
KIND_SHIFT
=
4
;
static
constexpr
uint32_t
KIND_MASK
=
0b11
;
static
constexpr
uint32_t
FIXED_SLOTS_SHIFT
=
6
;
static
constexpr
uint32_t
FIXED_SLOTS_MASK
=
0x1f
<
<
FIXED_SLOTS_SHIFT
;
bool
isProxy
(
)
const
{
return
Kind
(
(
immutableFlags
>
>
KIND_SHIFT
)
&
KIND_MASK
)
=
=
Kind
:
:
Proxy
;
}
}
;
}
}
#
endif
