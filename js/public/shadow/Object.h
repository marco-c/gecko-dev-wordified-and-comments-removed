#
ifndef
js_shadow_Object_h
#
define
js_shadow_Object_h
#
include
<
stddef
.
h
>
#
include
"
js
/
shadow
/
Shape
.
h
"
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
Value
;
namespace
shadow
{
struct
ObjectGroup
;
struct
Object
{
shadow
:
:
ObjectGroup
*
group
;
shadow
:
:
Shape
*
shape
;
Value
*
slots
;
void
*
_1
;
static
constexpr
size_t
MAX_FIXED_SLOTS
=
16
;
size_t
numFixedSlots
(
)
const
{
return
(
shape
-
>
immutableFlags
&
shadow
:
:
Shape
:
:
FIXED_SLOTS_MASK
)
>
>
shadow
:
:
Shape
:
:
FIXED_SLOTS_SHIFT
;
}
Value
*
fixedSlots
(
)
const
{
auto
address
=
reinterpret_cast
<
uintptr_t
>
(
this
)
;
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
address
+
sizeof
(
shadow
:
:
Object
)
)
;
}
Value
&
slotRef
(
size_t
slot
)
const
{
size_t
nfixed
=
numFixedSlots
(
)
;
if
(
slot
<
nfixed
)
{
return
fixedSlots
(
)
[
slot
]
;
}
return
slots
[
slot
-
nfixed
]
;
}
}
;
}
}
#
endif
