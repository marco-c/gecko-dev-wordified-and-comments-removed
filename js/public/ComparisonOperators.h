#
ifndef
js_ComparisonOperators_h
#
define
js_ComparisonOperators_h
#
include
<
type_traits
>
namespace
JS
{
namespace
detail
{
template
<
typename
T
>
struct
DefineComparisonOps
:
std
:
:
false_type
{
}
;
template
<
typename
W
typename
OW
>
inline
bool
WrapperEqualsWrapper
(
const
W
&
wrapper
const
OW
&
other
)
{
return
JS
:
:
detail
:
:
DefineComparisonOps
<
W
>
:
:
get
(
wrapper
)
=
=
JS
:
:
detail
:
:
DefineComparisonOps
<
OW
>
:
:
get
(
other
)
;
}
template
<
typename
W
>
inline
bool
WrapperEqualsUnwrapped
(
const
W
&
wrapper
const
typename
W
:
:
ElementType
&
value
)
{
return
JS
:
:
detail
:
:
DefineComparisonOps
<
W
>
:
:
get
(
wrapper
)
=
=
value
;
}
template
<
typename
W
>
inline
bool
WrapperEqualsPointer
(
const
W
&
wrapper
const
typename
std
:
:
remove_pointer_t
<
typename
W
:
:
ElementType
>
*
ptr
)
{
return
JS
:
:
detail
:
:
DefineComparisonOps
<
W
>
:
:
get
(
wrapper
)
=
=
ptr
;
}
namespace
wrapper_comparison
{
template
<
typename
W
typename
OW
>
inline
typename
std
:
:
enable_if_t
<
JS
:
:
detail
:
:
DefineComparisonOps
<
W
>
:
:
value
&
&
JS
:
:
detail
:
:
DefineComparisonOps
<
OW
>
:
:
value
bool
>
operator
=
=
(
const
W
&
wrapper
const
OW
&
other
)
{
return
JS
:
:
detail
:
:
WrapperEqualsWrapper
(
wrapper
other
)
;
}
template
<
typename
W
typename
OW
>
inline
typename
std
:
:
enable_if_t
<
JS
:
:
detail
:
:
DefineComparisonOps
<
W
>
:
:
value
&
&
JS
:
:
detail
:
:
DefineComparisonOps
<
OW
>
:
:
value
bool
>
operator
!
=
(
const
W
&
wrapper
const
OW
&
other
)
{
return
!
JS
:
:
detail
:
:
WrapperEqualsWrapper
(
wrapper
other
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
bool
>
operator
=
=
(
const
W
&
wrapper
const
typename
W
:
:
ElementType
&
value
)
{
return
WrapperEqualsUnwrapped
(
wrapper
value
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
bool
>
operator
!
=
(
const
W
&
wrapper
const
typename
W
:
:
ElementType
&
value
)
{
return
!
WrapperEqualsUnwrapped
(
wrapper
value
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
bool
>
operator
=
=
(
const
typename
W
:
:
ElementType
&
value
const
W
&
wrapper
)
{
return
WrapperEqualsUnwrapped
(
wrapper
value
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
bool
>
operator
!
=
(
const
typename
W
:
:
ElementType
&
value
const
W
&
wrapper
)
{
return
!
WrapperEqualsUnwrapped
(
wrapper
value
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
&
&
std
:
:
is_pointer_v
<
typename
W
:
:
ElementType
>
bool
>
operator
=
=
(
const
W
&
wrapper
const
typename
std
:
:
remove_pointer_t
<
typename
W
:
:
ElementType
>
*
ptr
)
{
return
WrapperEqualsPointer
(
wrapper
ptr
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
&
&
std
:
:
is_pointer_v
<
typename
W
:
:
ElementType
>
bool
>
operator
!
=
(
const
W
&
wrapper
const
typename
std
:
:
remove_pointer_t
<
typename
W
:
:
ElementType
>
*
ptr
)
{
return
!
WrapperEqualsPointer
(
wrapper
ptr
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
&
&
std
:
:
is_pointer_v
<
typename
W
:
:
ElementType
>
bool
>
operator
=
=
(
const
typename
std
:
:
remove_pointer_t
<
typename
W
:
:
ElementType
>
*
ptr
const
W
&
wrapper
)
{
return
WrapperEqualsPointer
(
wrapper
ptr
)
;
}
template
<
typename
W
>
inline
typename
std
:
:
enable_if_t
<
DefineComparisonOps
<
W
>
:
:
value
&
&
std
:
:
is_pointer_v
<
typename
W
:
:
ElementType
>
bool
>
operator
!
=
(
const
typename
std
:
:
remove_pointer_t
<
typename
W
:
:
ElementType
>
*
ptr
const
W
&
wrapper
)
{
return
!
WrapperEqualsPointer
(
wrapper
ptr
)
;
}
}
}
}
namespace
JS
{
using
JS
:
:
detail
:
:
wrapper_comparison
:
:
operator
=
=
;
using
JS
:
:
detail
:
:
wrapper_comparison
:
:
operator
!
=
;
}
namespace
js
{
using
JS
:
:
detail
:
:
wrapper_comparison
:
:
operator
=
=
;
using
JS
:
:
detail
:
:
wrapper_comparison
:
:
operator
!
=
;
}
#
endif
