#
ifndef
js_OffThreadScriptCompilation_h
#
define
js_OffThreadScriptCompilation_h
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSScript
;
namespace
JS
{
class
OffThreadToken
;
using
OffThreadCompileCallback
=
void
(
*
)
(
OffThreadToken
*
token
void
*
callbackData
)
;
extern
JS_PUBLIC_API
bool
CanCompileOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
size_t
length
)
;
extern
JS_PUBLIC_API
bool
CanDecodeOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
size_t
length
)
;
extern
JS_PUBLIC_API
OffThreadToken
*
DecodeOffThreadScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
mozilla
:
:
Vector
<
uint8_t
>
&
buffer
size_t
cursor
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
OffThreadToken
*
DecodeOffThreadScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
mozilla
:
:
Range
<
uint8_t
>
&
range
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
JSScript
*
FinishOffThreadScriptDecoder
(
JSContext
*
cx
OffThreadToken
*
token
)
;
extern
JS_PUBLIC_API
void
CancelOffThreadScriptDecoder
(
JSContext
*
cx
OffThreadToken
*
token
)
;
extern
JS_PUBLIC_API
void
CancelMultiOffThreadScriptsDecoder
(
JSContext
*
cx
OffThreadToken
*
token
)
;
}
#
endif
