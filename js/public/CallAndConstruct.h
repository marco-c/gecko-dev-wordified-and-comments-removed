#
ifndef
js_CallAndConstruct_h
#
define
js_CallAndConstruct_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
js
/
ValueArray
.
h
"
struct
JSContext
;
class
JSObject
;
class
JSFunction
;
namespace
JS
{
extern
JS_PUBLIC_API
bool
IsCallable
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
IsConstructor
(
JSObject
*
obj
)
;
}
extern
JS_PUBLIC_API
bool
JS_CallFunctionValue
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JS
:
:
Value
>
fval
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
extern
JS_PUBLIC_API
bool
JS_CallFunction
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JSFunction
*
>
fun
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
extern
JS_PUBLIC_API
bool
JS_CallFunctionName
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
name
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
namespace
JS
{
static
inline
bool
Call
(
JSContext
*
cx
Handle
<
JSObject
*
>
thisObj
Handle
<
JSFunction
*
>
fun
const
HandleValueArray
&
args
MutableHandle
<
Value
>
rval
)
{
return
!
!
JS_CallFunction
(
cx
thisObj
fun
args
rval
)
;
}
static
inline
bool
Call
(
JSContext
*
cx
Handle
<
JSObject
*
>
thisObj
Handle
<
Value
>
fun
const
HandleValueArray
&
args
MutableHandle
<
Value
>
rval
)
{
return
!
!
JS_CallFunctionValue
(
cx
thisObj
fun
args
rval
)
;
}
static
inline
bool
Call
(
JSContext
*
cx
Handle
<
JSObject
*
>
thisObj
const
char
*
name
const
HandleValueArray
&
args
MutableHandle
<
Value
>
rval
)
{
return
!
!
JS_CallFunctionName
(
cx
thisObj
name
args
rval
)
;
}
extern
JS_PUBLIC_API
bool
Call
(
JSContext
*
cx
Handle
<
Value
>
thisv
Handle
<
Value
>
fun
const
HandleValueArray
&
args
MutableHandle
<
Value
>
rval
)
;
static
inline
bool
Call
(
JSContext
*
cx
Handle
<
Value
>
thisv
Handle
<
JSObject
*
>
funObj
const
HandleValueArray
&
args
MutableHandle
<
Value
>
rval
)
{
MOZ_ASSERT
(
funObj
)
;
Rooted
<
Value
>
fun
(
cx
ObjectValue
(
*
funObj
)
)
;
return
Call
(
cx
thisv
fun
args
rval
)
;
}
extern
JS_PUBLIC_API
bool
Construct
(
JSContext
*
cx
Handle
<
Value
>
fun
Handle
<
JSObject
*
>
newTarget
const
HandleValueArray
&
args
MutableHandle
<
JSObject
*
>
objp
)
;
extern
JS_PUBLIC_API
bool
Construct
(
JSContext
*
cx
Handle
<
Value
>
fun
const
HandleValueArray
&
args
MutableHandle
<
JSObject
*
>
objp
)
;
}
#
endif
