#
ifndef
js_AutoByteString_h
#
define
js_AutoByteString_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
string
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
MemoryFunctions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
extern
JS_PUBLIC_API
(
char
*
)
JS_EncodeString
(
JSContext
*
cx
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
char
*
)
JS_EncodeStringToUTF8
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
)
;
class
MOZ_RAII
JSAutoByteString
final
{
private
:
char
*
mBytes
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
private
:
JSAutoByteString
(
const
JSAutoByteString
&
another
)
=
delete
;
void
operator
=
(
const
JSAutoByteString
&
another
)
=
delete
;
public
:
JSAutoByteString
(
JSContext
*
cx
JSString
*
str
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mBytes
(
JS_EncodeString
(
cx
str
)
)
{
MOZ_ASSERT
(
cx
)
;
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
explicit
JSAutoByteString
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
:
mBytes
(
nullptr
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
JSAutoByteString
(
)
{
JS_free
(
nullptr
mBytes
)
;
}
void
initBytes
(
JS
:
:
UniqueChars
&
&
bytes
)
{
MOZ_ASSERT
(
!
mBytes
)
;
mBytes
=
bytes
.
release
(
)
;
}
char
*
encodeLatin1
(
JSContext
*
cx
JSString
*
str
)
{
MOZ_ASSERT
(
!
mBytes
)
;
MOZ_ASSERT
(
cx
)
;
mBytes
=
JS_EncodeString
(
cx
str
)
;
return
mBytes
;
}
char
*
encodeUtf8
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
)
{
MOZ_ASSERT
(
!
mBytes
)
;
MOZ_ASSERT
(
cx
)
;
mBytes
=
JS_EncodeStringToUTF8
(
cx
str
)
;
return
mBytes
;
}
void
clear
(
)
{
js_free
(
mBytes
)
;
mBytes
=
nullptr
;
}
char
*
ptr
(
)
const
{
return
mBytes
;
}
bool
operator
!
(
)
const
{
return
!
mBytes
;
}
size_t
length
(
)
const
{
if
(
!
mBytes
)
return
0
;
return
strlen
(
mBytes
)
;
}
}
;
#
endif
