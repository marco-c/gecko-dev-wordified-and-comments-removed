#
ifndef
js_UniquePtr_h
#
define
js_UniquePtr_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
js
{
template
<
typename
T
typename
D
=
JS
:
:
DeletePolicy
<
T
>
>
using
UniquePtr
=
mozilla
:
:
UniquePtr
<
T
D
>
;
namespace
detail
{
template
<
typename
T
>
struct
UniqueSelector
{
typedef
UniquePtr
<
T
>
SingleObject
;
}
;
template
<
typename
T
>
struct
UniqueSelector
<
T
[
]
>
{
typedef
UniquePtr
<
T
[
]
>
UnknownBound
;
}
;
template
<
typename
T
decltype
(
sizeof
(
int
)
)
N
>
struct
UniqueSelector
<
T
[
N
]
>
{
typedef
UniquePtr
<
T
[
N
]
>
KnownBound
;
}
;
}
template
<
typename
T
typename
.
.
.
Args
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
SingleObject
MakeUnique
(
Args
&
&
.
.
.
aArgs
)
{
return
UniquePtr
<
T
>
(
js_new
<
T
>
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
)
;
}
template
<
typename
T
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
UnknownBound
MakeUnique
(
decltype
(
sizeof
(
int
)
)
aN
)
=
delete
;
template
<
typename
T
typename
.
.
.
Args
>
typename
detail
:
:
UniqueSelector
<
T
>
:
:
KnownBound
MakeUnique
(
Args
&
&
.
.
.
aArgs
)
=
delete
;
}
#
endif
