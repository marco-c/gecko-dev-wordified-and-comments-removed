#
ifndef
js_Zone_h
#
define
js_Zone_h
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
using
JSDestroyZoneCallback
=
void
(
*
)
(
JS
:
:
GCContext
*
JS
:
:
Zone
*
)
;
using
JSDestroyCompartmentCallback
=
void
(
*
)
(
JS
:
:
GCContext
*
JS
:
:
Compartment
*
)
;
using
JSSizeOfIncludingThisCompartmentCallback
=
size_t
(
*
)
(
mozilla
:
:
MallocSizeOf
JS
:
:
Compartment
*
)
;
extern
JS_PUBLIC_API
void
JS_SetDestroyZoneCallback
(
JSContext
*
cx
JSDestroyZoneCallback
callback
)
;
extern
JS_PUBLIC_API
void
JS_SetDestroyCompartmentCallback
(
JSContext
*
cx
JSDestroyCompartmentCallback
callback
)
;
extern
JS_PUBLIC_API
void
JS_SetSizeOfIncludingThisCompartmentCallback
(
JSContext
*
cx
JSSizeOfIncludingThisCompartmentCallback
callback
)
;
extern
JS_PUBLIC_API
void
JS_SetCompartmentPrivate
(
JS
:
:
Compartment
*
compartment
void
*
data
)
;
extern
JS_PUBLIC_API
void
*
JS_GetCompartmentPrivate
(
JS
:
:
Compartment
*
compartment
)
;
extern
JS_PUBLIC_API
void
JS_SetZoneUserData
(
JS
:
:
Zone
*
zone
void
*
data
)
;
extern
JS_PUBLIC_API
void
*
JS_GetZoneUserData
(
JS
:
:
Zone
*
zone
)
;
extern
JS_PUBLIC_API
bool
JS_RefreshCrossCompartmentWrappers
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
void
JS_MarkCrossZoneId
(
JSContext
*
cx
jsid
id
)
;
extern
JS_PUBLIC_API
void
JS_MarkCrossZoneIdValue
(
JSContext
*
cx
const
JS
:
:
Value
&
value
)
;
#
endif
