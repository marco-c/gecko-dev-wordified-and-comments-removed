#
ifndef
js_RegExpFlags_h
#
define
js_RegExpFlags_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
namespace
JS
{
class
RegExpFlag
{
public
:
static
constexpr
uint8_t
Global
=
0b00
'
0010
;
static
constexpr
uint8_t
IgnoreCase
=
0b00
'
0001
;
static
constexpr
uint8_t
Multiline
=
0b00
'
0100
;
static
constexpr
uint8_t
DotAll
=
0b10
'
0000
;
static
constexpr
uint8_t
Unicode
=
0b01
'
0000
;
static
constexpr
uint8_t
Sticky
=
0b00
'
1000
;
static
constexpr
uint8_t
NoFlags
=
0b00
'
0000
;
static
constexpr
uint8_t
AllFlags
=
0b11
'
1111
;
}
;
class
RegExpFlags
{
public
:
using
Flag
=
uint8_t
;
private
:
Flag
flags_
;
public
:
RegExpFlags
(
)
=
default
;
MOZ_IMPLICIT
RegExpFlags
(
Flag
flags
)
:
flags_
(
flags
)
{
MOZ_ASSERT
(
(
flags
&
RegExpFlag
:
:
AllFlags
)
=
=
flags
"
flags
must
not
contain
unrecognized
flags
"
)
;
}
RegExpFlags
(
const
RegExpFlags
&
)
=
default
;
bool
operator
=
=
(
const
RegExpFlags
&
other
)
const
{
return
flags_
=
=
other
.
flags_
;
}
bool
operator
!
=
(
const
RegExpFlags
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
RegExpFlags
&
operator
&
=
(
const
RegExpFlags
&
rhs
)
{
flags_
&
=
rhs
.
flags_
;
return
*
this
;
}
RegExpFlags
&
operator
|
=
(
const
RegExpFlags
&
rhs
)
{
flags_
|
=
rhs
.
flags_
;
return
*
this
;
}
RegExpFlags
operator
&
(
Flag
flag
)
const
{
return
RegExpFlags
(
flags_
&
flag
)
;
}
RegExpFlags
operator
|
(
Flag
flag
)
const
{
return
RegExpFlags
(
flags_
|
flag
)
;
}
RegExpFlags
operator
^
(
Flag
flag
)
const
{
return
RegExpFlags
(
flags_
^
flag
)
;
}
RegExpFlags
operator
~
(
)
const
{
return
RegExpFlags
(
~
flags_
&
RegExpFlag
:
:
AllFlags
)
;
}
bool
global
(
)
const
{
return
flags_
&
RegExpFlag
:
:
Global
;
}
bool
ignoreCase
(
)
const
{
return
flags_
&
RegExpFlag
:
:
IgnoreCase
;
}
bool
multiline
(
)
const
{
return
flags_
&
RegExpFlag
:
:
Multiline
;
}
bool
dotAll
(
)
const
{
return
flags_
&
RegExpFlag
:
:
DotAll
;
}
bool
unicode
(
)
const
{
return
flags_
&
RegExpFlag
:
:
Unicode
;
}
bool
sticky
(
)
const
{
return
flags_
&
RegExpFlag
:
:
Sticky
;
}
explicit
operator
bool
(
)
const
{
return
flags_
!
=
0
;
}
Flag
value
(
)
const
{
return
flags_
;
}
}
;
inline
RegExpFlags
&
operator
&
=
(
RegExpFlags
&
flags
RegExpFlags
:
:
Flag
flag
)
{
flags
=
flags
&
flag
;
return
flags
;
}
inline
RegExpFlags
&
operator
|
=
(
RegExpFlags
&
flags
RegExpFlags
:
:
Flag
flag
)
{
flags
=
flags
|
flag
;
return
flags
;
}
inline
RegExpFlags
&
operator
^
=
(
RegExpFlags
&
flags
RegExpFlags
:
:
Flag
flag
)
{
flags
=
flags
^
flag
;
return
flags
;
}
inline
RegExpFlags
operator
&
(
const
RegExpFlags
&
lhs
const
RegExpFlags
&
rhs
)
{
RegExpFlags
result
=
lhs
;
result
&
=
rhs
;
return
lhs
;
}
inline
RegExpFlags
operator
|
(
const
RegExpFlags
&
lhs
const
RegExpFlags
&
rhs
)
{
RegExpFlags
result
=
lhs
;
result
|
=
rhs
;
return
result
;
}
}
#
endif
