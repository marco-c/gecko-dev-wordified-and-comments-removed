#
ifndef
js_friend_MicroTask_h
#
define
js_friend_MicroTask_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
ValueArray
.
h
"
namespace
JS
{
using
MicroTask
=
JS
:
:
Value
;
JS_PUBLIC_API
bool
IsJSMicroTask
(
Handle
<
JS
:
:
Value
>
hv
)
;
JS_PUBLIC_API
bool
RunJSMicroTask
(
JSContext
*
cx
Handle
<
MicroTask
>
entry
)
;
JS_PUBLIC_API
bool
EnqueueMicroTask
(
JSContext
*
cx
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
bool
EnqueueDebugMicroTask
(
JSContext
*
cx
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
bool
PrependMicroTask
(
JSContext
*
cx
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
MicroTask
DequeueNextMicroTask
(
JSContext
*
cx
)
;
JS_PUBLIC_API
MicroTask
DequeueNextDebuggerMicroTask
(
JSContext
*
cx
)
;
JS_PUBLIC_API
MicroTask
DequeueNextRegularMicroTask
(
JSContext
*
cx
)
;
JS_PUBLIC_API
bool
HasAnyMicroTasks
(
JSContext
*
cx
)
;
JS_PUBLIC_API
bool
HasDebuggerMicroTasks
(
JSContext
*
cx
)
;
JS_PUBLIC_API
bool
HasRegularMicroTasks
(
JSContext
*
cx
)
;
JS_PUBLIC_API
size_t
GetRegularMicroTaskCount
(
JSContext
*
cx
)
;
JS_PUBLIC_API
JSObject
*
GetExecutionGlobalFromJSMicroTask
(
const
MicroTask
&
entry
)
;
class
SavedMicroTaskQueue
{
public
:
SavedMicroTaskQueue
(
)
=
default
;
virtual
~
SavedMicroTaskQueue
(
)
=
default
;
SavedMicroTaskQueue
(
const
SavedMicroTaskQueue
&
)
=
delete
;
SavedMicroTaskQueue
&
operator
=
(
const
SavedMicroTaskQueue
&
)
=
delete
;
}
;
JS_PUBLIC_API
js
:
:
UniquePtr
<
SavedMicroTaskQueue
>
SaveMicroTaskQueue
(
JSContext
*
cx
)
;
JS_PUBLIC_API
void
RestoreMicroTaskQueue
(
JSContext
*
cx
js
:
:
UniquePtr
<
SavedMicroTaskQueue
>
savedQueue
)
;
JS_PUBLIC_API
JSObject
*
MaybeGetHostDefinedDataFromJSMicroTask
(
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
JSObject
*
MaybeGetAllocationSiteFromJSMicroTask
(
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
JSObject
*
MaybeGetHostDefinedGlobalFromJSMicroTask
(
const
MicroTask
&
entry
)
;
JS_PUBLIC_API
JSObject
*
MaybeGetPromiseFromJSMicroTask
(
const
MicroTask
&
entry
)
;
}
#
endif
