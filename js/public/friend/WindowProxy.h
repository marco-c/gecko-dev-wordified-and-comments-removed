#
ifndef
js_friend_WindowProxy_h
#
define
js_friend_WindowProxy_h
#
include
"
jstypes
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Object
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
js
{
extern
JS_PUBLIC_API
void
SetWindowProxyClass
(
JSContext
*
cx
const
JSClass
*
clasp
)
;
extern
JS_PUBLIC_API
void
SetWindowProxy
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
global
JS
:
:
Handle
<
JSObject
*
>
windowProxy
)
;
namespace
detail
{
extern
JS_PUBLIC_API
bool
IsWindowSlow
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
ToWindowProxyIfWindowSlow
(
JSObject
*
obj
)
;
}
inline
bool
IsWindow
(
JSObject
*
obj
)
{
if
(
JS
:
:
GetClass
(
obj
)
-
>
flags
&
JSCLASS_IS_GLOBAL
)
{
return
detail
:
:
IsWindowSlow
(
obj
)
;
}
return
false
;
}
extern
JS_PUBLIC_API
bool
IsWindowProxy
(
JSObject
*
obj
)
;
MOZ_ALWAYS_INLINE
JSObject
*
ToWindowProxyIfWindow
(
JSObject
*
obj
)
{
if
(
JS
:
:
GetClass
(
obj
)
-
>
flags
&
JSCLASS_IS_GLOBAL
)
{
return
detail
:
:
ToWindowProxyIfWindowSlow
(
obj
)
;
}
return
obj
;
}
extern
JS_PUBLIC_API
JSObject
*
ToWindowIfWindowProxy
(
JSObject
*
obj
)
;
}
#
endif
