#
ifndef
js_ArrayBuffer_h
#
define
js_ArrayBuffer_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
AutoRequireNoGC
;
extern
JS_PUBLIC_API
JSObject
*
NewArrayBuffer
(
JSContext
*
cx
size_t
nbytes
)
;
extern
JS_PUBLIC_API
JSObject
*
NewArrayBufferWithContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
JSObject
*
CopyArrayBuffer
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
maybeArrayBuffer
)
;
using
BufferContentsFreeFunc
=
void
(
*
)
(
void
*
contents
void
*
userData
)
;
extern
JS_PUBLIC_API
JSObject
*
NewExternalArrayBuffer
(
JSContext
*
cx
size_t
nbytes
void
*
contents
BufferContentsFreeFunc
freeFunc
void
*
freeUserData
=
nullptr
)
;
extern
JS_PUBLIC_API
JSObject
*
NewArrayBufferWithUserOwnedContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
JSObject
*
NewMappedArrayBufferWithContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
void
*
CreateMappedArrayBufferContents
(
int
fd
size_t
offset
size_t
length
)
;
extern
JS_PUBLIC_API
void
ReleaseMappedArrayBufferContents
(
void
*
contents
size_t
length
)
;
extern
JS_PUBLIC_API
bool
IsArrayBufferObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
IsDetachedArrayBufferObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
IsMappedArrayBufferObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
ArrayBufferHasData
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
UnwrapArrayBuffer
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
JSObject
*
GetObjectAsArrayBuffer
(
JSObject
*
obj
size_t
*
length
uint8_t
*
*
data
)
;
extern
JS_PUBLIC_API
size_t
GetArrayBufferByteLength
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
void
GetArrayBufferLengthAndData
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
;
extern
JS_PUBLIC_API
uint8_t
*
GetArrayBufferData
(
JSObject
*
obj
bool
*
isSharedMemory
const
AutoRequireNoGC
&
)
;
extern
JS_PUBLIC_API
bool
DetachArrayBuffer
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
bool
HasDefinedArrayBufferDetachKey
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
*
isDefined
)
;
extern
JS_PUBLIC_API
void
*
StealArrayBufferContents
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
)
;
[
[
nodiscard
]
]
extern
JS_PUBLIC_API
bool
ArrayBufferCopyData
(
JSContext
*
cx
Handle
<
JSObject
*
>
toBlock
size_t
toIndex
Handle
<
JSObject
*
>
fromBlock
size_t
fromIndex
size_t
count
)
;
extern
JS_PUBLIC_API
JSObject
*
ArrayBufferClone
(
JSContext
*
cx
Handle
<
JSObject
*
>
srcBuffer
size_t
srcByteOffset
size_t
srcLength
)
;
}
#
endif
