#
ifndef
js_Realm_h
#
define
js_Realm_h
#
include
"
jspubtd
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
gc
{
JS_PUBLIC_API
(
void
)
TraceRealm
(
JSTracer
*
trc
JS
:
:
Realm
*
realm
const
char
*
name
)
;
JS_PUBLIC_API
(
bool
)
RealmNeedsSweep
(
JS
:
:
Realm
*
realm
)
;
}
}
namespace
JS
{
template
<
>
struct
GCPolicy
<
Realm
*
>
{
static
Realm
*
initial
(
)
{
return
nullptr
;
}
static
void
trace
(
JSTracer
*
trc
Realm
*
*
vp
const
char
*
name
)
{
if
(
*
vp
)
:
:
js
:
:
gc
:
:
TraceRealm
(
trc
*
vp
name
)
;
}
static
bool
needsSweep
(
Realm
*
*
vp
)
{
return
*
vp
&
&
:
:
js
:
:
gc
:
:
RealmNeedsSweep
(
*
vp
)
;
}
}
;
extern
JS_PUBLIC_API
(
Realm
*
)
GetCurrentRealmOrNull
(
JSContext
*
cx
)
;
inline
JSCompartment
*
GetCompartmentForRealm
(
Realm
*
realm
)
{
return
reinterpret_cast
<
JSCompartment
*
>
(
realm
)
;
}
inline
Realm
*
GetRealmForCompartment
(
JSCompartment
*
compartment
)
{
return
reinterpret_cast
<
Realm
*
>
(
compartment
)
;
}
extern
JS_PUBLIC_API
(
Realm
*
)
GetObjectRealmOrNull
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
void
*
)
GetRealmPrivate
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
(
void
)
SetRealmPrivate
(
Realm
*
realm
void
*
data
)
;
typedef
void
(
*
DestroyRealmCallback
)
(
JSFreeOp
*
fop
Realm
*
realm
)
;
extern
JS_PUBLIC_API
(
void
)
SetDestroyRealmCallback
(
JSContext
*
cx
DestroyRealmCallback
callback
)
;
typedef
void
(
*
RealmNameCallback
)
(
JSContext
*
cx
Handle
<
Realm
*
>
realm
char
*
buf
size_t
bufsize
)
;
extern
JS_PUBLIC_API
(
void
)
SetRealmNameCallback
(
JSContext
*
cx
RealmNameCallback
callback
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmGlobalOrNull
(
Handle
<
Realm
*
>
realm
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmObjectPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmFunctionPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmArrayPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmErrorPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRealmIteratorPrototype
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
void
)
SetVersionForCurrentRealm
(
JSContext
*
cx
JSVersion
version
)
;
}
#
endif
