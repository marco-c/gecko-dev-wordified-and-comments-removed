#
ifndef
js_Realm_h
#
define
js_Realm_h
#
include
"
js
/
shadow
/
Realm
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
gc
{
JS_PUBLIC_API
void
TraceRealm
(
JSTracer
*
trc
JS
:
:
Realm
*
realm
const
char
*
name
)
;
JS_PUBLIC_API
bool
RealmNeedsSweep
(
JS
:
:
Realm
*
realm
)
;
}
}
namespace
JS
{
class
JS_PUBLIC_API
AutoRequireNoGC
;
template
<
>
struct
GCPolicy
<
Realm
*
>
:
public
NonGCPointerPolicy
<
Realm
*
>
{
static
void
trace
(
JSTracer
*
trc
Realm
*
*
vp
const
char
*
name
)
{
if
(
*
vp
)
{
:
:
js
:
:
gc
:
:
TraceRealm
(
trc
*
vp
name
)
;
}
}
static
bool
needsSweep
(
Realm
*
*
vp
)
{
return
*
vp
&
&
:
:
js
:
:
gc
:
:
RealmNeedsSweep
(
*
vp
)
;
}
}
;
extern
JS_PUBLIC_API
Realm
*
GetCurrentRealmOrNull
(
JSContext
*
cx
)
;
inline
JS
:
:
Compartment
*
GetCompartmentForRealm
(
Realm
*
realm
)
{
return
shadow
:
:
Realm
:
:
get
(
realm
)
-
>
compartment
(
)
;
}
extern
JS_PUBLIC_API
Realm
*
GetObjectRealmOrNull
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
void
*
GetRealmPrivate
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
void
SetRealmPrivate
(
Realm
*
realm
void
*
data
)
;
typedef
void
(
*
DestroyRealmCallback
)
(
JSFreeOp
*
fop
Realm
*
realm
)
;
extern
JS_PUBLIC_API
void
SetDestroyRealmCallback
(
JSContext
*
cx
DestroyRealmCallback
callback
)
;
using
RealmNameCallback
=
void
(
*
)
(
JSContext
*
cx
Realm
*
realm
char
*
buf
size_t
bufsize
const
JS
:
:
AutoRequireNoGC
&
nogc
)
;
extern
JS_PUBLIC_API
void
SetRealmNameCallback
(
JSContext
*
cx
RealmNameCallback
callback
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmGlobalOrNull
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
bool
InitRealmStandardClasses
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmObjectPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmFunctionPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmArrayPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmErrorPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmIteratorPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRealmWeakMapKey
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
Realm
*
GetFunctionRealm
(
JSContext
*
cx
HandleObject
objArg
)
;
}
#
endif
