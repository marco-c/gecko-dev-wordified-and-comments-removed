#
ifndef
js_Printer_h
#
define
js_Printer_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
<
stdarg
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
util
/
Text
.
h
"
namespace
js
{
class
LifoAlloc
;
class
JS_PUBLIC_API
GenericPrinter
{
protected
:
bool
hadOOM_
;
constexpr
GenericPrinter
(
)
:
hadOOM_
(
false
)
{
}
public
:
virtual
void
put
(
const
char
*
s
size_t
len
)
=
0
;
inline
void
put
(
const
char
*
s
)
{
put
(
s
strlen
(
s
)
)
;
}
virtual
void
put
(
mozilla
:
:
Span
<
const
JS
:
:
Latin1Char
>
str
)
;
virtual
void
put
(
mozilla
:
:
Span
<
const
char16_t
>
str
)
;
virtual
inline
void
putChar
(
const
char
c
)
{
put
(
&
c
1
)
;
}
virtual
inline
void
putChar
(
const
JS
:
:
Latin1Char
c
)
{
putChar
(
char
(
c
)
)
;
}
virtual
inline
void
putChar
(
const
char16_t
c
)
{
MOZ_CRASH
(
"
Use
an
EscapePrinter
to
handle
all
characters
"
)
;
}
virtual
void
putAsciiPrintable
(
mozilla
:
:
Span
<
const
JS
:
:
Latin1Char
>
str
)
;
virtual
void
putAsciiPrintable
(
mozilla
:
:
Span
<
const
char16_t
>
str
)
;
inline
void
putAsciiPrintable
(
const
char
c
)
{
MOZ_ASSERT
(
IsAsciiPrintable
(
c
)
)
;
putChar
(
c
)
;
}
inline
void
putAsciiPrintable
(
const
char16_t
c
)
{
MOZ_ASSERT
(
IsAsciiPrintable
(
c
)
)
;
putChar
(
char
(
c
)
)
;
}
virtual
void
putString
(
JSContext
*
cx
JSString
*
str
)
;
void
printf
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
void
vprintf
(
const
char
*
fmt
va_list
ap
)
MOZ_FORMAT_PRINTF
(
2
0
)
;
virtual
bool
canPutFromIndex
(
)
const
{
return
false
;
}
virtual
void
putFromIndex
(
size_t
index
size_t
length
)
{
MOZ_CRASH
(
"
Calls
to
putFromIndex
should
be
guarded
by
canPutFromIndex
.
"
)
;
}
virtual
size_t
index
(
)
const
{
return
0
;
}
virtual
void
flush
(
)
{
}
virtual
void
reportOutOfMemory
(
)
;
virtual
bool
hadOutOfMemory
(
)
const
{
return
hadOOM_
;
}
}
;
class
JS_PUBLIC_API
Sprinter
final
:
public
GenericPrinter
{
public
:
struct
InvariantChecker
{
const
Sprinter
*
parent
;
explicit
InvariantChecker
(
const
Sprinter
*
p
)
:
parent
(
p
)
{
parent
-
>
checkInvariants
(
)
;
}
~
InvariantChecker
(
)
{
parent
-
>
checkInvariants
(
)
;
}
}
;
JSContext
*
maybeCx
;
private
:
static
const
size_t
DefaultSize
;
#
ifdef
DEBUG
bool
initialized
;
#
endif
bool
shouldReportOOM
;
char
*
base
;
size_t
size
;
ptrdiff_t
offset
;
[
[
nodiscard
]
]
bool
realloc_
(
size_t
newSize
)
;
public
:
explicit
Sprinter
(
JSContext
*
maybeCx
=
nullptr
bool
shouldReportOOM
=
true
)
;
~
Sprinter
(
)
;
[
[
nodiscard
]
]
bool
init
(
)
;
void
checkInvariants
(
)
const
;
JS
:
:
UniqueChars
release
(
)
;
JSString
*
releaseJS
(
JSContext
*
cx
)
;
char
*
reserve
(
size_t
len
)
;
virtual
void
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
virtual
bool
canPutFromIndex
(
)
const
override
{
return
true
;
}
virtual
void
putFromIndex
(
size_t
index
size_t
length
)
override
{
MOZ_ASSERT
(
index
<
=
this
-
>
index
(
)
)
;
MOZ_ASSERT
(
index
+
length
<
=
this
-
>
index
(
)
)
;
put
(
base
+
index
length
)
;
}
virtual
size_t
index
(
)
const
override
{
return
length
(
)
;
}
virtual
void
putString
(
JSContext
*
cx
JSString
*
str
)
override
;
size_t
length
(
)
const
;
void
forwardOutOfMemory
(
)
;
}
;
class
JS_PUBLIC_API
Fprinter
final
:
public
GenericPrinter
{
private
:
FILE
*
file_
;
bool
init_
;
public
:
explicit
Fprinter
(
FILE
*
fp
)
;
constexpr
Fprinter
(
)
:
file_
(
nullptr
)
init_
(
false
)
{
}
#
ifdef
DEBUG
~
Fprinter
(
)
;
#
endif
[
[
nodiscard
]
]
bool
init
(
const
char
*
path
)
;
void
init
(
FILE
*
fp
)
;
bool
isInitialized
(
)
const
{
return
file_
!
=
nullptr
;
}
void
flush
(
)
override
;
void
finish
(
)
;
virtual
void
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
}
;
class
JS_PUBLIC_API
LSprinter
final
:
public
GenericPrinter
{
private
:
struct
Chunk
{
Chunk
*
next
;
size_t
length
;
char
*
chars
(
)
{
return
reinterpret_cast
<
char
*
>
(
this
+
1
)
;
}
char
*
end
(
)
{
return
chars
(
)
+
length
;
}
}
;
private
:
LifoAlloc
*
alloc_
;
Chunk
*
head_
;
Chunk
*
tail_
;
size_t
unused_
;
public
:
explicit
LSprinter
(
LifoAlloc
*
lifoAlloc
)
;
~
LSprinter
(
)
;
void
exportInto
(
GenericPrinter
&
out
)
const
;
void
clear
(
)
;
virtual
void
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
}
;
template
<
typename
Delegate
typename
Escape
>
class
JS_PUBLIC_API
EscapePrinter
final
:
public
GenericPrinter
{
size_t
lengthOfSafeChars
(
const
char
*
s
size_t
len
)
{
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
!
esc
.
isSafeChar
(
s
[
i
]
)
)
{
return
i
;
}
}
return
len
;
}
private
:
Delegate
&
out
;
Escape
&
esc
;
public
:
EscapePrinter
(
Delegate
&
out
Escape
&
esc
)
:
out
(
out
)
esc
(
esc
)
{
}
~
EscapePrinter
(
)
{
}
using
GenericPrinter
:
:
put
;
void
put
(
const
char
*
s
size_t
len
)
override
{
const
char
*
b
=
s
;
while
(
len
)
{
size_t
index
=
lengthOfSafeChars
(
b
len
)
;
if
(
index
)
{
out
.
put
(
b
index
)
;
len
-
=
index
;
b
+
=
index
;
}
if
(
len
)
{
esc
.
convertInto
(
out
char16_t
(
*
b
)
)
;
len
-
=
1
;
b
+
=
1
;
}
}
}
inline
void
putChar
(
const
char
c
)
override
{
if
(
esc
.
isSafeChar
(
char16_t
(
c
)
)
)
{
out
.
putChar
(
char
(
c
)
)
;
return
;
}
esc
.
convertInto
(
out
char16_t
(
c
)
)
;
}
inline
void
putChar
(
const
JS
:
:
Latin1Char
c
)
override
{
if
(
esc
.
isSafeChar
(
char16_t
(
c
)
)
)
{
out
.
putChar
(
char
(
c
)
)
;
return
;
}
esc
.
convertInto
(
out
char16_t
(
c
)
)
;
}
inline
void
putChar
(
const
char16_t
c
)
override
{
if
(
esc
.
isSafeChar
(
c
)
)
{
out
.
putChar
(
char
(
c
)
)
;
return
;
}
esc
.
convertInto
(
out
c
)
;
}
bool
canPutFromIndex
(
)
const
override
{
return
out
.
canPutFromIndex
(
)
;
}
void
putFromIndex
(
size_t
index
size_t
length
)
final
{
out
.
putFromIndex
(
index
length
)
;
}
size_t
index
(
)
const
final
{
return
out
.
index
(
)
;
}
void
flush
(
)
final
{
out
.
flush
(
)
;
}
void
reportOutOfMemory
(
)
final
{
out
.
reportOutOfMemory
(
)
;
}
bool
hadOutOfMemory
(
)
const
final
{
return
out
.
hadOutOfMemory
(
)
;
}
}
;
class
JS_PUBLIC_API
JSONEscape
{
public
:
bool
isSafeChar
(
char16_t
c
)
;
void
convertInto
(
GenericPrinter
&
out
char16_t
c
)
;
}
;
class
JS_PUBLIC_API
StringEscape
{
private
:
const
char
quote
=
'
\
0
'
;
public
:
explicit
StringEscape
(
const
char
quote
=
'
\
0
'
)
:
quote
(
quote
)
{
}
bool
isSafeChar
(
char16_t
c
)
;
void
convertInto
(
GenericPrinter
&
out
char16_t
c
)
;
}
;
extern
const
char
js_EscapeMap
[
]
;
extern
JS_PUBLIC_API
JS
:
:
UniqueChars
QuoteString
(
JSContext
*
cx
JSString
*
str
char
quote
=
'
\
0
'
)
;
extern
JS_PUBLIC_API
bool
QuoteString
(
Sprinter
*
sp
JSString
*
str
char
quote
=
'
\
0
'
)
;
extern
JS_PUBLIC_API
bool
JSONQuoteString
(
Sprinter
*
sp
JSString
*
str
)
;
enum
class
QuoteTarget
{
String
JSON
}
;
template
<
QuoteTarget
target
typename
CharT
>
bool
JS_PUBLIC_API
QuoteString
(
Sprinter
*
sp
const
mozilla
:
:
Range
<
const
CharT
>
chars
char
quote
=
'
\
0
'
)
;
}
#
endif
