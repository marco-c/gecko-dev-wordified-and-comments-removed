#
ifndef
js_SourceText_h
#
define
js_SourceText_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
JS
{
namespace
detail
{
MOZ_COLD
extern
JS_PUBLIC_API
(
void
)
ReportSourceTooLong
(
JSContext
*
cx
)
;
}
enum
class
SourceOwnership
{
Borrowed
TakeOwnership
}
;
template
<
typename
Unit
>
class
SourceText
final
{
private
:
static_assert
(
std
:
:
is_same
<
Unit
mozilla
:
:
Utf8Unit
>
:
:
value
|
|
std
:
:
is_same
<
Unit
char16_t
>
:
:
value
"
Unit
must
be
either
char16_t
or
Utf8Unit
for
"
"
SourceText
<
Unit
>
"
)
;
const
Unit
*
units_
=
nullptr
;
uint32_t
length_
=
0
;
bool
ownsUnits_
=
false
;
public
:
using
CharT
=
typename
std
:
:
conditional
<
std
:
:
is_same
<
Unit
char16_t
>
:
:
value
char16_t
char
>
:
:
type
;
public
:
SourceText
(
)
=
default
;
SourceText
(
SourceText
&
&
other
)
:
units_
(
other
.
units_
)
length_
(
other
.
length_
)
ownsUnits_
(
other
.
ownsUnits_
)
{
other
.
units_
=
nullptr
;
other
.
length_
=
0
;
other
.
ownsUnits_
=
false
;
}
~
SourceText
(
)
{
if
(
ownsUnits_
)
{
js_free
(
const_cast
<
Unit
*
>
(
units_
)
)
;
}
}
MOZ_IS_CLASS_INIT
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
const
Unit
*
units
size_t
unitsLength
SourceOwnership
ownership
)
{
MOZ_ASSERT_IF
(
units
=
=
nullptr
unitsLength
=
=
0
)
;
static
const
CharT
emptyString
[
]
=
{
'
\
0
'
}
;
if
(
units
)
{
units_
=
units
;
length_
=
static_cast
<
uint32_t
>
(
unitsLength
)
;
ownsUnits_
=
ownership
=
=
SourceOwnership
:
:
TakeOwnership
;
}
else
{
units_
=
reinterpret_cast
<
const
Unit
*
>
(
emptyString
)
;
length_
=
0
;
ownsUnits_
=
false
;
}
if
(
MOZ_UNLIKELY
(
unitsLength
>
UINT32_MAX
)
)
{
detail
:
:
ReportSourceTooLong
(
cx
)
;
return
false
;
}
return
true
;
}
template
<
typename
Char
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_same
<
Char
CharT
>
:
:
value
&
&
!
std
:
:
is_same
<
Char
Unit
>
:
:
value
>
:
:
type
>
MOZ_IS_CLASS_INIT
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
const
Char
*
chars
size_t
charsLength
SourceOwnership
ownership
)
{
return
init
(
cx
reinterpret_cast
<
const
Unit
*
>
(
chars
)
charsLength
ownership
)
;
}
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
js
:
:
UniquePtr
<
CharT
[
]
JS
:
:
FreePolicy
>
data
size_t
dataLength
)
{
return
init
(
cx
data
.
release
(
)
dataLength
SourceOwnership
:
:
TakeOwnership
)
;
}
const
Unit
*
units
(
)
const
{
return
units_
;
}
const
CharT
*
get
(
)
const
{
return
reinterpret_cast
<
const
CharT
*
>
(
units_
)
;
}
bool
ownsUnits
(
)
const
{
return
ownsUnits_
;
}
uint32_t
length
(
)
const
{
return
length_
;
}
Unit
*
takeUnits
(
)
{
MOZ_ASSERT
(
ownsUnits_
)
;
ownsUnits_
=
false
;
return
const_cast
<
Unit
*
>
(
units_
)
;
}
CharT
*
takeChars
(
)
{
return
reinterpret_cast
<
CharT
*
>
(
takeUnits
(
)
)
;
}
private
:
SourceText
(
const
SourceText
&
)
=
delete
;
void
operator
=
(
const
SourceText
&
)
=
delete
;
}
;
}
#
endif
