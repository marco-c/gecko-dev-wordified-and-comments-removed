#
ifndef
js_RealmOptions_h
#
define
js_RealmOptions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
Class
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
Compartment
;
class
JS_PUBLIC_API
Realm
;
class
JS_PUBLIC_API
Zone
;
}
namespace
JS
{
enum
class
CompartmentSpecifier
{
NewCompartmentInSystemZone
NewCompartmentInExistingZone
NewCompartmentAndZone
ExistingCompartment
}
;
class
JS_PUBLIC_API
RealmCreationOptions
{
public
:
RealmCreationOptions
(
)
:
comp_
(
nullptr
)
{
}
JSTraceOp
getTrace
(
)
const
{
return
traceGlobal_
;
}
RealmCreationOptions
&
setTrace
(
JSTraceOp
op
)
{
traceGlobal_
=
op
;
return
*
this
;
}
Zone
*
zone
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
NewCompartmentInExistingZone
)
;
return
zone_
;
}
Compartment
*
compartment
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
ExistingCompartment
)
;
return
comp_
;
}
CompartmentSpecifier
compartmentSpecifier
(
)
const
{
return
compSpec_
;
}
RealmCreationOptions
&
setNewCompartmentInSystemZone
(
)
;
RealmCreationOptions
&
setNewCompartmentInExistingZone
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setNewCompartmentAndZone
(
)
;
RealmCreationOptions
&
setExistingCompartment
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setExistingCompartment
(
Compartment
*
compartment
)
;
bool
invisibleToDebugger
(
)
const
{
return
invisibleToDebugger_
;
}
RealmCreationOptions
&
setInvisibleToDebugger
(
bool
flag
)
{
invisibleToDebugger_
=
flag
;
return
*
this
;
}
bool
mergeable
(
)
const
{
return
mergeable_
;
}
RealmCreationOptions
&
setMergeable
(
bool
flag
)
{
mergeable_
=
flag
;
return
*
this
;
}
bool
preserveJitCode
(
)
const
{
return
preserveJitCode_
;
}
RealmCreationOptions
&
setPreserveJitCode
(
bool
flag
)
{
preserveJitCode_
=
flag
;
return
*
this
;
}
bool
cloneSingletons
(
)
const
{
return
cloneSingletons_
;
}
RealmCreationOptions
&
setCloneSingletons
(
bool
flag
)
{
cloneSingletons_
=
flag
;
return
*
this
;
}
bool
getSharedMemoryAndAtomicsEnabled
(
)
const
;
RealmCreationOptions
&
setSharedMemoryAndAtomicsEnabled
(
bool
flag
)
;
bool
getCoopAndCoepEnabled
(
)
const
;
RealmCreationOptions
&
setCoopAndCoepEnabled
(
bool
flag
)
;
bool
getStreamsEnabled
(
)
const
{
return
streams_
;
}
RealmCreationOptions
&
setStreamsEnabled
(
bool
flag
)
{
streams_
=
flag
;
return
*
this
;
}
bool
getReadableByteStreamsEnabled
(
)
const
{
return
readableByteStreams_
;
}
RealmCreationOptions
&
setReadableByteStreamsEnabled
(
bool
flag
)
{
readableByteStreams_
=
flag
;
return
*
this
;
}
bool
getBYOBStreamReadersEnabled
(
)
const
{
return
byobStreamReaders_
;
}
RealmCreationOptions
&
setBYOBStreamReadersEnabled
(
bool
enabled
)
{
byobStreamReaders_
=
enabled
;
return
*
this
;
}
bool
getWritableStreamsEnabled
(
)
const
{
return
writableStreams_
;
}
RealmCreationOptions
&
setWritableStreamsEnabled
(
bool
enabled
)
{
writableStreams_
=
enabled
;
return
*
this
;
}
bool
getReadableStreamPipeToEnabled
(
)
const
{
return
readableStreamPipeTo_
;
}
RealmCreationOptions
&
setReadableStreamPipeToEnabled
(
bool
enabled
)
{
readableStreamPipeTo_
=
enabled
;
return
*
this
;
}
bool
getWeakRefsEnabled
(
)
const
{
return
weakRefs_
;
}
RealmCreationOptions
&
setWeakRefsEnabled
(
bool
flag
)
{
weakRefs_
=
flag
;
return
*
this
;
}
bool
getToSourceEnabled
(
)
const
{
return
toSource_
;
}
RealmCreationOptions
&
setToSourceEnabled
(
bool
flag
)
{
toSource_
=
flag
;
return
*
this
;
}
bool
getPropertyErrorMessageFixEnabled
(
)
const
{
return
propertyErrorMessageFix_
;
}
RealmCreationOptions
&
setPropertyErrorMessageFixEnabled
(
bool
flag
)
{
propertyErrorMessageFix_
=
flag
;
return
*
this
;
}
bool
secureContext
(
)
const
{
return
secureContext_
;
}
RealmCreationOptions
&
setSecureContext
(
bool
flag
)
{
secureContext_
=
flag
;
return
*
this
;
}
uint64_t
profilerRealmID
(
)
const
{
return
profilerRealmID_
;
}
RealmCreationOptions
&
setProfilerRealmID
(
uint64_t
id
)
{
profilerRealmID_
=
id
;
return
*
this
;
}
private
:
JSTraceOp
traceGlobal_
=
nullptr
;
CompartmentSpecifier
compSpec_
=
CompartmentSpecifier
:
:
NewCompartmentAndZone
;
union
{
Compartment
*
comp_
;
Zone
*
zone_
;
}
;
uint64_t
profilerRealmID_
=
0
;
bool
invisibleToDebugger_
=
false
;
bool
mergeable_
=
false
;
bool
preserveJitCode_
=
false
;
bool
cloneSingletons_
=
false
;
bool
sharedMemoryAndAtomics_
=
false
;
bool
coopAndCoep_
=
false
;
bool
streams_
=
false
;
bool
readableByteStreams_
=
false
;
bool
byobStreamReaders_
=
false
;
bool
writableStreams_
=
false
;
bool
readableStreamPipeTo_
=
false
;
bool
weakRefs_
=
false
;
bool
toSource_
=
false
;
bool
propertyErrorMessageFix_
=
false
;
bool
secureContext_
=
false
;
}
;
class
JS_PUBLIC_API
RealmBehaviors
{
public
:
RealmBehaviors
(
)
=
default
;
bool
discardSource
(
)
const
{
return
discardSource_
;
}
RealmBehaviors
&
setDiscardSource
(
bool
flag
)
{
discardSource_
=
flag
;
return
*
this
;
}
bool
disableLazyParsing
(
)
const
{
return
disableLazyParsing_
;
}
RealmBehaviors
&
setDisableLazyParsing
(
bool
flag
)
{
disableLazyParsing_
=
flag
;
return
*
this
;
}
bool
clampAndJitterTime
(
)
const
{
return
clampAndJitterTime_
;
}
RealmBehaviors
&
setClampAndJitterTime
(
bool
flag
)
{
clampAndJitterTime_
=
flag
;
return
*
this
;
}
class
Override
{
public
:
Override
(
)
:
mode_
(
Default
)
{
}
bool
get
(
bool
defaultValue
)
const
{
if
(
mode_
=
=
Default
)
{
return
defaultValue
;
}
return
mode_
=
=
ForceTrue
;
}
void
set
(
bool
overrideValue
)
{
mode_
=
overrideValue
?
ForceTrue
:
ForceFalse
;
}
void
reset
(
)
{
mode_
=
Default
;
}
private
:
enum
Mode
{
Default
ForceTrue
ForceFalse
}
;
Mode
mode_
;
}
;
bool
getSingletonsAsTemplates
(
)
const
{
return
singletonsAsTemplates_
;
}
RealmBehaviors
&
setSingletonsAsValues
(
)
{
singletonsAsTemplates_
=
false
;
return
*
this
;
}
bool
isNonLive
(
)
const
{
return
isNonLive_
;
}
RealmBehaviors
&
setNonLive
(
)
{
isNonLive_
=
true
;
return
*
this
;
}
private
:
bool
discardSource_
=
false
;
bool
disableLazyParsing_
=
false
;
bool
clampAndJitterTime_
=
true
;
bool
singletonsAsTemplates_
=
true
;
bool
isNonLive_
=
false
;
}
;
class
JS_PUBLIC_API
RealmOptions
{
public
:
explicit
RealmOptions
(
)
:
creationOptions_
(
)
behaviors_
(
)
{
}
RealmOptions
(
const
RealmCreationOptions
&
realmCreation
const
RealmBehaviors
&
realmBehaviors
)
:
creationOptions_
(
realmCreation
)
behaviors_
(
realmBehaviors
)
{
}
RealmCreationOptions
&
creationOptions
(
)
{
return
creationOptions_
;
}
const
RealmCreationOptions
&
creationOptions
(
)
const
{
return
creationOptions_
;
}
RealmBehaviors
&
behaviors
(
)
{
return
behaviors_
;
}
const
RealmBehaviors
&
behaviors
(
)
const
{
return
behaviors_
;
}
private
:
RealmCreationOptions
creationOptions_
;
RealmBehaviors
behaviors_
;
}
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
RealmBehaviors
&
RealmBehaviorsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
RealmBehaviors
&
RealmBehaviorsRef
(
JSContext
*
cx
)
;
}
#
endif
