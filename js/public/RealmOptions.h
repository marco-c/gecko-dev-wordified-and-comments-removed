#
ifndef
js_RealmOptions_h
#
define
js_RealmOptions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RefCounted
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
Compartment
;
class
JS_PUBLIC_API
Realm
;
class
JS_PUBLIC_API
Zone
;
}
namespace
JS
{
enum
class
CompartmentSpecifier
{
NewCompartmentInSystemZone
NewCompartmentInExistingZone
NewCompartmentAndZone
ExistingCompartment
}
;
enum
class
WeakRefSpecifier
{
Disabled
EnabledWithCleanupSome
EnabledWithoutCleanupSome
}
;
struct
LocaleString
:
js
:
:
RefCounted
<
LocaleString
>
{
const
char
*
chars_
;
explicit
LocaleString
(
const
char
*
chars
)
:
chars_
(
chars
)
{
}
auto
chars
(
)
const
{
return
chars_
;
}
}
;
class
JS_PUBLIC_API
RealmCreationOptions
{
public
:
RealmCreationOptions
(
)
:
comp_
(
nullptr
)
{
}
JSTraceOp
getTrace
(
)
const
{
return
traceGlobal_
;
}
RealmCreationOptions
&
setTrace
(
JSTraceOp
op
)
{
traceGlobal_
=
op
;
return
*
this
;
}
Zone
*
zone
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
NewCompartmentInExistingZone
)
;
return
zone_
;
}
Compartment
*
compartment
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
ExistingCompartment
)
;
return
comp_
;
}
CompartmentSpecifier
compartmentSpecifier
(
)
const
{
return
compSpec_
;
}
RealmCreationOptions
&
setNewCompartmentInSystemZone
(
)
;
RealmCreationOptions
&
setNewCompartmentInExistingZone
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setNewCompartmentAndZone
(
)
;
RealmCreationOptions
&
setExistingCompartment
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setExistingCompartment
(
Compartment
*
compartment
)
;
bool
invisibleToDebugger
(
)
const
{
return
invisibleToDebugger_
;
}
RealmCreationOptions
&
setInvisibleToDebugger
(
bool
flag
)
{
invisibleToDebugger_
=
flag
;
return
*
this
;
}
bool
preserveJitCode
(
)
const
{
return
preserveJitCode_
;
}
RealmCreationOptions
&
setPreserveJitCode
(
bool
flag
)
{
preserveJitCode_
=
flag
;
return
*
this
;
}
bool
getSharedMemoryAndAtomicsEnabled
(
)
const
;
RealmCreationOptions
&
setSharedMemoryAndAtomicsEnabled
(
bool
flag
)
;
bool
defineSharedArrayBufferConstructor
(
)
const
{
return
defineSharedArrayBufferConstructor_
;
}
RealmCreationOptions
&
setDefineSharedArrayBufferConstructor
(
bool
flag
)
{
defineSharedArrayBufferConstructor_
=
flag
;
return
*
this
;
}
bool
getCoopAndCoepEnabled
(
)
const
;
RealmCreationOptions
&
setCoopAndCoepEnabled
(
bool
flag
)
;
WeakRefSpecifier
getWeakRefsEnabled
(
)
const
{
return
weakRefs_
;
}
RealmCreationOptions
&
setWeakRefsEnabled
(
WeakRefSpecifier
spec
)
{
weakRefs_
=
spec
;
return
*
this
;
}
bool
getToSourceEnabled
(
)
const
{
return
toSource_
;
}
RealmCreationOptions
&
setToSourceEnabled
(
bool
flag
)
{
toSource_
=
flag
;
return
*
this
;
}
bool
getPropertyErrorMessageFixEnabled
(
)
const
{
return
propertyErrorMessageFix_
;
}
RealmCreationOptions
&
setPropertyErrorMessageFixEnabled
(
bool
flag
)
{
propertyErrorMessageFix_
=
flag
;
return
*
this
;
}
bool
getIteratorHelpersEnabled
(
)
const
{
return
iteratorHelpers_
;
}
RealmCreationOptions
&
setIteratorHelpersEnabled
(
bool
flag
)
{
iteratorHelpers_
=
flag
;
return
*
this
;
}
bool
getShadowRealmsEnabled
(
)
const
{
return
shadowRealms_
;
}
RealmCreationOptions
&
setShadowRealmsEnabled
(
bool
flag
)
{
shadowRealms_
=
flag
;
return
*
this
;
}
bool
getWellFormedUnicodeStringsEnabled
(
)
const
{
return
wellFormedUnicodeStrings_
;
}
RealmCreationOptions
&
setWellFormedUnicodeStringsEnabled
(
bool
flag
)
{
wellFormedUnicodeStrings_
=
flag
;
return
*
this
;
}
bool
getArrayGroupingEnabled
(
)
const
{
return
arrayGrouping_
;
}
RealmCreationOptions
&
setArrayGroupingEnabled
(
bool
flag
)
{
arrayGrouping_
=
flag
;
return
*
this
;
}
bool
getArrayBufferTransferEnabled
(
)
const
{
return
arrayBufferTransfer_
;
}
RealmCreationOptions
&
setArrayBufferTransferEnabled
(
bool
flag
)
{
arrayBufferTransfer_
=
flag
;
return
*
this
;
}
#
ifdef
NIGHTLY_BUILD
bool
getNewSetMethodsEnabled
(
)
const
{
return
newSetMethods_
;
}
RealmCreationOptions
&
setNewSetMethodsEnabled
(
bool
flag
)
{
newSetMethods_
=
flag
;
return
*
this
;
}
bool
getSymbolsAsWeakMapKeysEnabled
(
)
const
{
return
symbolsAsWeakMapKeys_
;
}
RealmCreationOptions
&
setSymbolsAsWeakMapKeysEnabled
(
bool
flag
)
{
symbolsAsWeakMapKeys_
=
flag
;
return
*
this
;
}
bool
getArrayBufferResizableEnabled
(
)
const
{
return
arrayBufferResizable_
;
}
RealmCreationOptions
&
setArrayBufferResizableEnabled
(
bool
flag
)
{
arrayBufferResizable_
=
flag
;
return
*
this
;
}
bool
getSharedArrayBufferGrowableEnabled
(
)
const
{
return
sharedArrayBufferGrowable_
;
}
RealmCreationOptions
&
setSharedArrayBufferGrowableEnabled
(
bool
flag
)
{
sharedArrayBufferGrowable_
=
flag
;
return
*
this
;
}
#
endif
#
ifdef
ENABLE_JSON_PARSE_WITH_SOURCE
bool
getJSONParseWithSource
(
)
const
{
return
jsonParseWithSource
;
}
RealmCreationOptions
&
setJSONParseWithSource
(
bool
flag
)
{
jsonParseWithSource
=
flag
;
return
*
this
;
}
#
endif
bool
secureContext
(
)
const
{
return
secureContext_
;
}
RealmCreationOptions
&
setSecureContext
(
bool
flag
)
{
secureContext_
=
flag
;
return
*
this
;
}
bool
freezeBuiltins
(
)
const
{
return
freezeBuiltins_
;
}
RealmCreationOptions
&
setFreezeBuiltins
(
bool
flag
)
{
freezeBuiltins_
=
flag
;
return
*
this
;
}
bool
forceUTC
(
)
const
{
return
forceUTC_
;
}
RealmCreationOptions
&
setForceUTC
(
bool
flag
)
{
forceUTC_
=
flag
;
return
*
this
;
}
RefPtr
<
LocaleString
>
locale
(
)
const
{
return
locale_
;
}
RealmCreationOptions
&
setLocaleCopyZ
(
const
char
*
locale
)
;
bool
alwaysUseFdlibm
(
)
const
{
return
alwaysUseFdlibm_
;
}
RealmCreationOptions
&
setAlwaysUseFdlibm
(
bool
flag
)
{
alwaysUseFdlibm_
=
flag
;
return
*
this
;
}
uint64_t
profilerRealmID
(
)
const
{
return
profilerRealmID_
;
}
RealmCreationOptions
&
setProfilerRealmID
(
uint64_t
id
)
{
profilerRealmID_
=
id
;
return
*
this
;
}
private
:
JSTraceOp
traceGlobal_
=
nullptr
;
CompartmentSpecifier
compSpec_
=
CompartmentSpecifier
:
:
NewCompartmentAndZone
;
union
{
Compartment
*
comp_
;
Zone
*
zone_
;
}
;
uint64_t
profilerRealmID_
=
0
;
RefPtr
<
LocaleString
>
locale_
;
WeakRefSpecifier
weakRefs_
=
WeakRefSpecifier
:
:
Disabled
;
bool
invisibleToDebugger_
=
false
;
bool
preserveJitCode_
=
false
;
bool
sharedMemoryAndAtomics_
=
false
;
bool
defineSharedArrayBufferConstructor_
=
true
;
bool
coopAndCoep_
=
false
;
bool
toSource_
=
false
;
bool
propertyErrorMessageFix_
=
false
;
bool
iteratorHelpers_
=
false
;
bool
shadowRealms_
=
false
;
bool
wellFormedUnicodeStrings_
=
true
;
bool
arrayGrouping_
=
true
;
#
ifdef
NIGHTLY_BUILD
bool
newSetMethods_
=
false
;
bool
symbolsAsWeakMapKeys_
=
false
;
bool
arrayBufferResizable_
=
false
;
bool
sharedArrayBufferGrowable_
=
false
;
#
endif
bool
arrayBufferTransfer_
=
false
;
#
ifdef
ENABLE_JSON_PARSE_WITH_SOURCE
bool
jsonParseWithSource
=
false
;
#
endif
bool
secureContext_
=
false
;
bool
freezeBuiltins_
=
false
;
bool
forceUTC_
=
false
;
bool
alwaysUseFdlibm_
=
false
;
}
;
struct
RTPCallerTypeToken
{
uint8_t
value
;
}
;
class
JS_PUBLIC_API
RealmBehaviors
{
public
:
RealmBehaviors
(
)
=
default
;
mozilla
:
:
Maybe
<
RTPCallerTypeToken
>
reduceTimerPrecisionCallerType
(
)
const
{
return
rtpCallerType
;
}
RealmBehaviors
&
setReduceTimerPrecisionCallerType
(
RTPCallerTypeToken
type
)
{
rtpCallerType
=
mozilla
:
:
Some
(
type
)
;
return
*
this
;
}
bool
discardSource
(
)
const
{
return
discardSource_
;
}
RealmBehaviors
&
setDiscardSource
(
bool
flag
)
{
discardSource_
=
flag
;
return
*
this
;
}
bool
clampAndJitterTime
(
)
const
{
return
clampAndJitterTime_
;
}
RealmBehaviors
&
setClampAndJitterTime
(
bool
flag
)
{
clampAndJitterTime_
=
flag
;
return
*
this
;
}
bool
isNonLive
(
)
const
{
return
isNonLive_
;
}
RealmBehaviors
&
setNonLive
(
)
{
isNonLive_
=
true
;
return
*
this
;
}
private
:
mozilla
:
:
Maybe
<
RTPCallerTypeToken
>
rtpCallerType
;
bool
discardSource_
=
false
;
bool
clampAndJitterTime_
=
true
;
bool
isNonLive_
=
false
;
}
;
class
JS_PUBLIC_API
RealmOptions
{
public
:
explicit
RealmOptions
(
)
:
creationOptions_
(
)
behaviors_
(
)
{
}
RealmOptions
(
const
RealmCreationOptions
&
realmCreation
const
RealmBehaviors
&
realmBehaviors
)
:
creationOptions_
(
realmCreation
)
behaviors_
(
realmBehaviors
)
{
}
RealmCreationOptions
&
creationOptions
(
)
{
return
creationOptions_
;
}
const
RealmCreationOptions
&
creationOptions
(
)
const
{
return
creationOptions_
;
}
RealmBehaviors
&
behaviors
(
)
{
return
behaviors_
;
}
const
RealmBehaviors
&
behaviors
(
)
const
{
return
behaviors_
;
}
private
:
RealmCreationOptions
creationOptions_
;
RealmBehaviors
behaviors_
;
}
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
const
RealmBehaviors
&
RealmBehaviorsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
const
RealmBehaviors
&
RealmBehaviorsRef
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
void
SetRealmNonLive
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
void
SetRealmReduceTimerPrecisionCallerType
(
Realm
*
realm
RTPCallerTypeToken
type
)
;
}
#
endif
