#
ifndef
js_RealmOptions_h
#
define
js_RealmOptions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
Class
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
JS_PUBLIC_API
Compartment
;
class
JS_PUBLIC_API
Realm
;
class
JS_PUBLIC_API
Zone
;
}
namespace
JS
{
enum
class
CompartmentSpecifier
{
NewCompartmentInSystemZone
NewCompartmentInExistingZone
NewCompartmentAndZone
ExistingCompartment
}
;
enum
class
WeakRefSpecifier
{
Disabled
EnabledWithCleanupSome
EnabledWithoutCleanupSome
}
;
class
JS_PUBLIC_API
RealmCreationOptions
{
public
:
RealmCreationOptions
(
)
:
comp_
(
nullptr
)
{
}
JSTraceOp
getTrace
(
)
const
{
return
traceGlobal_
;
}
RealmCreationOptions
&
setTrace
(
JSTraceOp
op
)
{
traceGlobal_
=
op
;
return
*
this
;
}
Zone
*
zone
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
NewCompartmentInExistingZone
)
;
return
zone_
;
}
Compartment
*
compartment
(
)
const
{
MOZ_ASSERT
(
compSpec_
=
=
CompartmentSpecifier
:
:
ExistingCompartment
)
;
return
comp_
;
}
CompartmentSpecifier
compartmentSpecifier
(
)
const
{
return
compSpec_
;
}
RealmCreationOptions
&
setNewCompartmentInSystemZone
(
)
;
RealmCreationOptions
&
setNewCompartmentInExistingZone
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setNewCompartmentAndZone
(
)
;
RealmCreationOptions
&
setExistingCompartment
(
JSObject
*
obj
)
;
RealmCreationOptions
&
setExistingCompartment
(
Compartment
*
compartment
)
;
bool
invisibleToDebugger
(
)
const
{
return
invisibleToDebugger_
;
}
RealmCreationOptions
&
setInvisibleToDebugger
(
bool
flag
)
{
invisibleToDebugger_
=
flag
;
return
*
this
;
}
bool
preserveJitCode
(
)
const
{
return
preserveJitCode_
;
}
RealmCreationOptions
&
setPreserveJitCode
(
bool
flag
)
{
preserveJitCode_
=
flag
;
return
*
this
;
}
bool
getSharedMemoryAndAtomicsEnabled
(
)
const
;
RealmCreationOptions
&
setSharedMemoryAndAtomicsEnabled
(
bool
flag
)
;
bool
defineSharedArrayBufferConstructor
(
)
const
{
return
defineSharedArrayBufferConstructor_
;
}
RealmCreationOptions
&
setDefineSharedArrayBufferConstructor
(
bool
flag
)
{
defineSharedArrayBufferConstructor_
=
flag
;
return
*
this
;
}
bool
getCoopAndCoepEnabled
(
)
const
;
RealmCreationOptions
&
setCoopAndCoepEnabled
(
bool
flag
)
;
WeakRefSpecifier
getWeakRefsEnabled
(
)
const
{
return
weakRefs_
;
}
RealmCreationOptions
&
setWeakRefsEnabled
(
WeakRefSpecifier
spec
)
{
weakRefs_
=
spec
;
return
*
this
;
}
bool
getToSourceEnabled
(
)
const
{
return
toSource_
;
}
RealmCreationOptions
&
setToSourceEnabled
(
bool
flag
)
{
toSource_
=
flag
;
return
*
this
;
}
bool
getPropertyErrorMessageFixEnabled
(
)
const
{
return
propertyErrorMessageFix_
;
}
RealmCreationOptions
&
setPropertyErrorMessageFixEnabled
(
bool
flag
)
{
propertyErrorMessageFix_
=
flag
;
return
*
this
;
}
bool
getIteratorHelpersEnabled
(
)
const
{
return
iteratorHelpers_
;
}
RealmCreationOptions
&
setIteratorHelpersEnabled
(
bool
flag
)
{
iteratorHelpers_
=
flag
;
return
*
this
;
}
bool
getShadowRealmsEnabled
(
)
const
{
return
shadowRealms_
;
}
RealmCreationOptions
&
setShadowRealmsEnabled
(
bool
flag
)
{
shadowRealms_
=
flag
;
return
*
this
;
}
#
ifdef
NIGHTLY_BUILD
bool
getArrayGroupingEnabled
(
)
const
{
return
arrayGrouping_
;
}
RealmCreationOptions
&
setArrayGroupingEnabled
(
bool
flag
)
{
arrayGrouping_
=
flag
;
return
*
this
;
}
bool
getWellFormedUnicodeStringsEnabled
(
)
const
{
return
wellFormedUnicodeStrings_
;
}
RealmCreationOptions
&
setWellFormedUnicodeStringsEnabled
(
bool
flag
)
{
wellFormedUnicodeStrings_
=
flag
;
return
*
this
;
}
#
endif
bool
getArrayFromAsyncEnabled
(
)
const
{
return
arrayFromAsync_
;
}
RealmCreationOptions
&
setArrayFromAsyncEnabled
(
bool
flag
)
{
arrayFromAsync_
=
flag
;
return
*
this
;
}
bool
getChangeArrayByCopyEnabled
(
)
const
{
return
changeArrayByCopy_
;
}
RealmCreationOptions
&
setChangeArrayByCopyEnabled
(
bool
flag
)
{
changeArrayByCopy_
=
flag
;
return
*
this
;
}
#
ifdef
ENABLE_NEW_SET_METHODS
bool
getNewSetMethodsEnabled
(
)
const
{
return
newSetMethods_
;
}
RealmCreationOptions
&
setNewSetMethodsEnabled
(
bool
flag
)
{
newSetMethods_
=
flag
;
return
*
this
;
}
#
endif
bool
secureContext
(
)
const
{
return
secureContext_
;
}
RealmCreationOptions
&
setSecureContext
(
bool
flag
)
{
secureContext_
=
flag
;
return
*
this
;
}
bool
freezeBuiltins
(
)
const
{
return
freezeBuiltins_
;
}
RealmCreationOptions
&
setFreezeBuiltins
(
bool
flag
)
{
freezeBuiltins_
=
flag
;
return
*
this
;
}
uint64_t
profilerRealmID
(
)
const
{
return
profilerRealmID_
;
}
RealmCreationOptions
&
setProfilerRealmID
(
uint64_t
id
)
{
profilerRealmID_
=
id
;
return
*
this
;
}
private
:
JSTraceOp
traceGlobal_
=
nullptr
;
CompartmentSpecifier
compSpec_
=
CompartmentSpecifier
:
:
NewCompartmentAndZone
;
union
{
Compartment
*
comp_
;
Zone
*
zone_
;
}
;
uint64_t
profilerRealmID_
=
0
;
WeakRefSpecifier
weakRefs_
=
WeakRefSpecifier
:
:
Disabled
;
bool
invisibleToDebugger_
=
false
;
bool
preserveJitCode_
=
false
;
bool
sharedMemoryAndAtomics_
=
false
;
bool
defineSharedArrayBufferConstructor_
=
true
;
bool
coopAndCoep_
=
false
;
bool
toSource_
=
false
;
bool
propertyErrorMessageFix_
=
false
;
bool
iteratorHelpers_
=
false
;
bool
shadowRealms_
=
false
;
#
ifdef
NIGHTLY_BUILD
bool
arrayGrouping_
=
false
;
bool
wellFormedUnicodeStrings_
=
false
;
#
endif
bool
arrayFromAsync_
=
false
;
bool
changeArrayByCopy_
=
false
;
#
ifdef
ENABLE_NEW_SET_METHODS
bool
newSetMethods_
=
false
;
#
endif
bool
secureContext_
=
false
;
bool
freezeBuiltins_
=
false
;
}
;
class
JS_PUBLIC_API
RealmBehaviors
{
public
:
RealmBehaviors
(
)
=
default
;
bool
discardSource
(
)
const
{
return
discardSource_
;
}
RealmBehaviors
&
setDiscardSource
(
bool
flag
)
{
discardSource_
=
flag
;
return
*
this
;
}
bool
clampAndJitterTime
(
)
const
{
return
clampAndJitterTime_
;
}
RealmBehaviors
&
setClampAndJitterTime
(
bool
flag
)
{
clampAndJitterTime_
=
flag
;
return
*
this
;
}
bool
shouldResistFingerprinting
(
)
const
{
return
shouldResistFingerprinting_
;
}
RealmBehaviors
&
setShouldResistFingerprinting
(
bool
flag
)
{
shouldResistFingerprinting_
=
flag
;
return
*
this
;
}
class
Override
{
public
:
Override
(
)
:
mode_
(
Default
)
{
}
bool
get
(
bool
defaultValue
)
const
{
if
(
mode_
=
=
Default
)
{
return
defaultValue
;
}
return
mode_
=
=
ForceTrue
;
}
void
set
(
bool
overrideValue
)
{
mode_
=
overrideValue
?
ForceTrue
:
ForceFalse
;
}
void
reset
(
)
{
mode_
=
Default
;
}
private
:
enum
Mode
{
Default
ForceTrue
ForceFalse
}
;
Mode
mode_
;
}
;
bool
isNonLive
(
)
const
{
return
isNonLive_
;
}
RealmBehaviors
&
setNonLive
(
)
{
isNonLive_
=
true
;
return
*
this
;
}
private
:
bool
discardSource_
=
false
;
bool
clampAndJitterTime_
=
true
;
bool
shouldResistFingerprinting_
=
false
;
bool
isNonLive_
=
false
;
}
;
class
JS_PUBLIC_API
RealmOptions
{
public
:
explicit
RealmOptions
(
)
:
creationOptions_
(
)
behaviors_
(
)
{
}
RealmOptions
(
const
RealmCreationOptions
&
realmCreation
const
RealmBehaviors
&
realmBehaviors
)
:
creationOptions_
(
realmCreation
)
behaviors_
(
realmBehaviors
)
{
}
RealmCreationOptions
&
creationOptions
(
)
{
return
creationOptions_
;
}
const
RealmCreationOptions
&
creationOptions
(
)
const
{
return
creationOptions_
;
}
RealmBehaviors
&
behaviors
(
)
{
return
behaviors_
;
}
const
RealmBehaviors
&
behaviors
(
)
const
{
return
behaviors_
;
}
private
:
RealmCreationOptions
creationOptions_
;
RealmBehaviors
behaviors_
;
}
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
const
RealmCreationOptions
&
RealmCreationOptionsRef
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
const
RealmBehaviors
&
RealmBehaviorsRef
(
Realm
*
realm
)
;
extern
JS_PUBLIC_API
const
RealmBehaviors
&
RealmBehaviorsRef
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
void
SetRealmNonLive
(
Realm
*
realm
)
;
}
#
endif
