#
ifndef
js_Modules_h
#
define
js_Modules_h
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
ColumnNumber
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
js
/
Vector
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
struct
JS_PUBLIC_API
JSRuntime
;
class
JS_PUBLIC_API
JSString
;
namespace
JS
{
template
<
typename
UnitT
>
class
SourceText
;
}
namespace
mozilla
{
union
Utf8Unit
;
}
namespace
JS
{
enum
class
ModuleType
:
uint32_t
{
Unknown
=
0
JavaScript
JSON
Limit
=
JSON
}
;
using
ModuleLoadHook
=
bool
(
*
)
(
JSContext
*
cx
Handle
<
JSObject
*
>
referrer
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
Value
>
statePrivate
Handle
<
JSObject
*
>
promise
)
;
extern
JS_PUBLIC_API
ModuleLoadHook
GetModuleLoadHook
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
void
SetModuleLoadHook
(
JSRuntime
*
rt
ModuleLoadHook
func
)
;
using
LoadModuleResolvedCallback
=
std
:
:
function
<
bool
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
hostDefined
)
>
;
using
LoadModuleRejectedCallback
=
std
:
:
function
<
bool
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
hostDefined
Handle
<
JS
:
:
Value
>
error
)
>
;
using
ModuleMetadataHook
=
bool
(
*
)
(
JSContext
*
cx
Handle
<
Value
>
privateValue
Handle
<
JSObject
*
>
metaObject
)
;
extern
JS_PUBLIC_API
ModuleMetadataHook
GetModuleMetadataHook
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
void
SetModuleMetadataHook
(
JSRuntime
*
rt
ModuleMetadataHook
func
)
;
extern
JS_PUBLIC_API
bool
FinishDynamicModuleImport
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
JSObject
*
>
promise
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileJsonModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileJsonModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
void
SetModulePrivate
(
JSObject
*
module
const
Value
&
value
)
;
extern
JS_PUBLIC_API
void
ClearModulePrivate
(
JSObject
*
module
)
;
extern
JS_PUBLIC_API
Value
GetModulePrivate
(
JSObject
*
module
)
;
extern
JS_PUBLIC_API
bool
IsCyclicModule
(
JSObject
*
module
)
;
extern
JS_PUBLIC_API
bool
ModuleLink
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
bool
ModuleEvaluate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
MutableHandleValue
rval
)
;
enum
ModuleErrorBehaviour
{
ReportModuleErrorsAsync
ThrowModuleErrorsSync
}
;
extern
JS_PUBLIC_API
bool
ThrowOnModuleEvaluationFailure
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
ModuleErrorBehaviour
errorBehaviour
=
ReportModuleErrorsAsync
)
;
extern
JS_PUBLIC_API
uint32_t
GetRequestedModulesCount
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
JSString
*
GetRequestedModuleSpecifier
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
uint32_t
index
)
;
extern
JS_PUBLIC_API
void
GetRequestedModuleSourcePos
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
uint32_t
index
uint32_t
*
lineNumber
JS
:
:
ColumnNumberOneOrigin
*
columnNumber
)
;
extern
JS_PUBLIC_API
ModuleType
GetRequestedModuleType
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
uint32_t
index
)
;
extern
JS_PUBLIC_API
JSScript
*
GetModuleScript
(
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
JSObject
*
CreateModuleRequest
(
JSContext
*
cx
Handle
<
JSString
*
>
specifierArg
ModuleType
moduleType
)
;
extern
JS_PUBLIC_API
JSString
*
GetModuleRequestSpecifier
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRequestArg
)
;
extern
JS_PUBLIC_API
ModuleType
GetModuleRequestType
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRequestArg
)
;
extern
JS_PUBLIC_API
JSObject
*
GetModuleObject
(
Handle
<
JSScript
*
>
moduleScript
)
;
extern
JS_PUBLIC_API
JSObject
*
GetModuleNamespace
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
JSObject
*
GetModuleForNamespace
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleNamespace
)
;
extern
JS_PUBLIC_API
JSObject
*
GetModuleEnvironment
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleObj
)
;
extern
JS_PUBLIC_API
void
ClearModuleEnvironment
(
JSObject
*
moduleObj
)
;
extern
JS_PUBLIC_API
bool
ModuleIsLinked
(
JSObject
*
moduleObj
)
;
}
#
endif
