#
ifndef
js_Modules_h
#
define
js_Modules_h
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
struct
JS_PUBLIC_API
JSRuntime
;
class
JS_PUBLIC_API
JSString
;
namespace
JS
{
template
<
typename
UnitT
>
class
SourceText
;
}
namespace
mozilla
{
union
Utf8Unit
;
}
namespace
JS
{
using
ModuleResolveHook
=
JSObject
*
(
*
)
(
JSContext
*
Handle
<
Value
>
Handle
<
JSObject
*
>
)
;
extern
JS_PUBLIC_API
ModuleResolveHook
GetModuleResolveHook
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
void
SetModuleResolveHook
(
JSRuntime
*
rt
ModuleResolveHook
func
)
;
using
ModuleMetadataHook
=
bool
(
*
)
(
JSContext
*
Handle
<
Value
>
Handle
<
JSObject
*
>
)
;
extern
JS_PUBLIC_API
ModuleMetadataHook
GetModuleMetadataHook
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
void
SetModuleMetadataHook
(
JSRuntime
*
rt
ModuleMetadataHook
func
)
;
using
ModuleDynamicImportHook
=
bool
(
*
)
(
JSContext
*
cx
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
JSObject
*
>
promise
)
;
extern
JS_PUBLIC_API
ModuleDynamicImportHook
GetModuleDynamicImportHook
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
void
SetModuleDynamicImportHook
(
JSRuntime
*
rt
ModuleDynamicImportHook
func
)
;
enum
class
DynamicImportStatus
{
Failed
=
0
Ok
}
;
extern
JS_PUBLIC_API
bool
FinishDynamicModuleImport
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
JSObject
*
>
promise
)
;
extern
JS_PUBLIC_API
bool
FinishDynamicModuleImport_NoTLA
(
JSContext
*
cx
DynamicImportStatus
status
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
JSObject
*
>
promise
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
JSObject
*
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
extern
JS_PUBLIC_API
void
SetModulePrivate
(
JSObject
*
module
const
Value
&
value
)
;
extern
JS_PUBLIC_API
Value
GetModulePrivate
(
JSObject
*
module
)
;
extern
JS_PUBLIC_API
bool
ModuleInstantiate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
bool
ModuleEvaluate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
bool
ThrowOnModuleEvaluationFailure
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
)
;
extern
JS_PUBLIC_API
JSObject
*
GetRequestedModules
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
JSString
*
GetRequestedModuleSpecifier
(
JSContext
*
cx
Handle
<
Value
>
requestedModuleObject
)
;
extern
JS_PUBLIC_API
void
GetRequestedModuleSourcePos
(
JSContext
*
cx
Handle
<
Value
>
requestedModuleObject
uint32_t
*
lineNumber
uint32_t
*
columnNumber
)
;
extern
JS_PUBLIC_API
JSScript
*
GetModuleScript
(
Handle
<
JSObject
*
>
moduleRecord
)
;
extern
JS_PUBLIC_API
JSObject
*
CreateModuleRequest
(
JSContext
*
cx
Handle
<
JSString
*
>
specifierArg
)
;
extern
JS_PUBLIC_API
JSString
*
GetModuleRequestSpecifier
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRequestArg
)
;
}
#
endif
