#
ifndef
js_ValueArray_h
#
define
js_ValueArray_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
js
{
JS_PUBLIC_API
void
TraceValueArray
(
JSTracer
*
trc
size_t
length
JS
:
:
Value
*
elements
)
;
}
namespace
JS
{
template
<
size_t
N
>
struct
ValueArray
{
Value
elements
[
N
]
;
void
trace
(
JSTracer
*
trc
)
{
js
:
:
TraceValueArray
(
trc
N
elements
)
;
}
}
;
template
<
size_t
N
>
using
AutoValueArray
=
Rooted
<
ValueArray
<
N
>
>
;
class
HandleValueArray
{
const
size_t
length_
;
const
Value
*
const
elements_
;
HandleValueArray
(
size_t
len
const
Value
*
elements
)
:
length_
(
len
)
elements_
(
elements
)
{
}
public
:
explicit
HandleValueArray
(
Handle
<
Value
>
value
)
:
length_
(
1
)
elements_
(
value
.
address
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
RootedVector
<
Value
>
&
values
)
:
length_
(
values
.
length
(
)
)
elements_
(
values
.
begin
(
)
)
{
}
template
<
size_t
N
>
MOZ_IMPLICIT
HandleValueArray
(
const
AutoValueArray
<
N
>
&
values
)
:
length_
(
N
)
elements_
(
values
.
begin
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
JS
:
:
CallArgs
&
args
)
:
length_
(
args
.
length
(
)
)
elements_
(
args
.
array
(
)
)
{
}
static
HandleValueArray
fromMarkedLocation
(
size_t
len
const
Value
*
elements
)
{
return
HandleValueArray
(
len
elements
)
;
}
static
HandleValueArray
subarray
(
const
HandleValueArray
&
values
size_t
startIndex
size_t
len
)
{
MOZ_ASSERT
(
startIndex
+
len
<
=
values
.
length
(
)
)
;
return
HandleValueArray
(
len
values
.
begin
(
)
+
startIndex
)
;
}
static
HandleValueArray
empty
(
)
{
return
HandleValueArray
(
0
nullptr
)
;
}
size_t
length
(
)
const
{
return
length_
;
}
const
Value
*
begin
(
)
const
{
return
elements_
;
}
Handle
<
Value
>
operator
[
]
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
length_
)
;
return
Handle
<
Value
>
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
}
;
}
namespace
js
{
template
<
size_t
N
typename
Container
>
class
WrappedPtrOperations
<
JS
:
:
ValueArray
<
N
>
Container
>
{
const
JS
:
:
ValueArray
<
N
>
&
array
(
)
const
{
return
static_cast
<
const
Container
*
>
(
this
)
-
>
get
(
)
;
}
public
:
size_t
length
(
)
const
{
return
N
;
}
const
JS
:
:
Value
*
begin
(
)
const
{
return
array
(
)
.
elements
;
}
JS
:
:
HandleValue
operator
[
]
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
N
)
;
return
JS
:
:
HandleValue
:
:
fromMarkedLocation
(
&
array
(
)
.
elements
[
i
]
)
;
}
}
;
template
<
size_t
N
typename
Container
>
class
MutableWrappedPtrOperations
<
JS
:
:
ValueArray
<
N
>
Container
>
:
public
WrappedPtrOperations
<
JS
:
:
ValueArray
<
N
>
Container
>
{
using
Base
=
WrappedPtrOperations
<
JS
:
:
ValueArray
<
N
>
Container
>
;
JS
:
:
ValueArray
<
N
>
&
array
(
)
{
return
static_cast
<
Container
*
>
(
this
)
-
>
get
(
)
;
}
public
:
using
Base
:
:
begin
;
JS
:
:
Value
*
begin
(
)
{
return
array
(
)
.
elements
;
}
using
Base
:
:
operator
[
]
;
JS
:
:
MutableHandleValue
operator
[
]
(
size_t
i
)
{
MOZ_ASSERT
(
i
<
N
)
;
return
JS
:
:
MutableHandleValue
:
:
fromMarkedLocation
(
&
array
(
)
.
elements
[
i
]
)
;
}
}
;
}
#
endif
