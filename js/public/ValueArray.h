#
ifndef
js_ValueArray_h
#
define
js_ValueArray_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
JS
{
template
<
size_t
N
>
class
MOZ_RAII
AutoValueArray
:
public
AutoGCRooter
{
const
size_t
length_
;
Value
elements_
[
N
]
;
public
:
explicit
AutoValueArray
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
AutoGCRooter
:
:
Kind
:
:
ValueArray
)
length_
(
N
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
unsigned
length
(
)
const
{
return
length_
;
}
const
Value
*
begin
(
)
const
{
return
elements_
;
}
Value
*
begin
(
)
{
return
elements_
;
}
Handle
<
Value
>
operator
[
]
(
unsigned
i
)
const
{
MOZ_ASSERT
(
i
<
N
)
;
return
Handle
<
Value
>
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
MutableHandle
<
Value
>
operator
[
]
(
unsigned
i
)
{
MOZ_ASSERT
(
i
<
N
)
;
return
MutableHandleValue
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
HandleValueArray
{
const
size_t
length_
;
const
Value
*
const
elements_
;
HandleValueArray
(
size_t
len
const
Value
*
elements
)
:
length_
(
len
)
elements_
(
elements
)
{
}
public
:
explicit
HandleValueArray
(
Handle
<
Value
>
value
)
:
length_
(
1
)
elements_
(
value
.
address
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
RootedVector
<
Value
>
&
values
)
:
length_
(
values
.
length
(
)
)
elements_
(
values
.
begin
(
)
)
{
}
template
<
size_t
N
>
MOZ_IMPLICIT
HandleValueArray
(
const
AutoValueArray
<
N
>
&
values
)
:
length_
(
N
)
elements_
(
values
.
begin
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
JS
:
:
CallArgs
&
args
)
:
length_
(
args
.
length
(
)
)
elements_
(
args
.
array
(
)
)
{
}
static
HandleValueArray
fromMarkedLocation
(
size_t
len
const
Value
*
elements
)
{
return
HandleValueArray
(
len
elements
)
;
}
static
HandleValueArray
subarray
(
const
HandleValueArray
&
values
size_t
startIndex
size_t
len
)
{
MOZ_ASSERT
(
startIndex
+
len
<
=
values
.
length
(
)
)
;
return
HandleValueArray
(
len
values
.
begin
(
)
+
startIndex
)
;
}
static
HandleValueArray
empty
(
)
{
return
HandleValueArray
(
0
nullptr
)
;
}
size_t
length
(
)
const
{
return
length_
;
}
const
Value
*
begin
(
)
const
{
return
elements_
;
}
Handle
<
Value
>
operator
[
]
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
length_
)
;
return
Handle
<
Value
>
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
}
;
}
#
endif
