#
ifndef
js_CompilationAndEvaluation_h
#
define
js_CompilationAndEvaluation_h
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JSContext
;
class
JSFunction
;
class
JSObject
;
class
JSScript
;
namespace
JS
{
template
<
typename
T
>
class
AutoVector
;
template
<
typename
UnitT
>
class
SourceText
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_Utf8BufferIsCompilableUnit
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
utf8
size_t
length
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
Handle
<
JSScript
*
>
script
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
Handle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
AutoVector
<
JSObject
*
>
&
envChain
JS
:
:
Handle
<
JSScript
*
>
script
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
AutoVector
<
JSObject
*
>
&
envChain
JS
:
:
Handle
<
JSScript
*
>
script
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
CloneAndExecuteScript
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
CloneAndExecuteScript
(
JSContext
*
cx
AutoVector
<
JSObject
*
>
&
envChain
Handle
<
JSScript
*
>
script
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
AutoVector
<
JSObject
*
>
&
envChain
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
EvaluateUtf8
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
EvaluateLatin1
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
EvaluateUtf8Path
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
filename
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileUtf8
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileUtf8DontInflate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileLatin1
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileUtf8File
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
FILE
*
file
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileUtf8FileDontInflate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
FILE
*
file
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileUtf8Path
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
filename
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileLatin1ForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
MutableHandle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileFunction
(
JSContext
*
cx
AutoVector
<
JSObject
*
>
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char
*
name
unsigned
nargs
const
char
*
const
*
argnames
SourceText
<
char16_t
>
&
srcBuf
MutableHandle
<
JSFunction
*
>
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileFunctionUtf8
(
JSContext
*
cx
AutoVector
<
JSObject
*
>
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char
*
name
unsigned
nargs
const
char
*
const
*
argnames
const
char
*
utf8
size_t
length
MutableHandle
<
JSFunction
*
>
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
InitScriptSourceElement
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
Handle
<
JSObject
*
>
element
Handle
<
JSString
*
>
elementAttrName
=
nullptr
)
;
extern
JS_PUBLIC_API
(
void
)
ExposeScriptToDebugger
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
)
;
}
#
endif
