#
ifndef
js_ScalarType_h
#
define
js_ScalarType_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
namespace
js
{
namespace
Scalar
{
enum
Type
{
Int8
=
0
Uint8
Int16
Uint16
Int32
Uint32
Float32
Float64
Uint8Clamped
BigInt64
BigUint64
MaxTypedArrayViewType
Int64
Simd128
}
;
static
inline
size_t
byteSize
(
Type
atype
)
{
switch
(
atype
)
{
case
Int8
:
case
Uint8
:
case
Uint8Clamped
:
return
1
;
case
Int16
:
case
Uint16
:
return
2
;
case
Int32
:
case
Uint32
:
case
Float32
:
return
4
;
case
Int64
:
case
Float64
:
case
BigInt64
:
case
BigUint64
:
return
8
;
case
Simd128
:
return
16
;
case
MaxTypedArrayViewType
:
break
;
}
MOZ_CRASH
(
"
invalid
scalar
type
"
)
;
}
static
inline
bool
isSignedIntType
(
Type
atype
)
{
switch
(
atype
)
{
case
Int8
:
case
Int16
:
case
Int32
:
case
Int64
:
case
BigInt64
:
return
true
;
case
Uint8
:
case
Uint8Clamped
:
case
Uint16
:
case
Uint32
:
case
Float32
:
case
Float64
:
case
BigUint64
:
case
Simd128
:
return
false
;
case
MaxTypedArrayViewType
:
break
;
}
MOZ_CRASH
(
"
invalid
scalar
type
"
)
;
}
static
inline
bool
isBigIntType
(
Type
atype
)
{
switch
(
atype
)
{
case
BigInt64
:
case
BigUint64
:
return
true
;
case
Int8
:
case
Int16
:
case
Int32
:
case
Int64
:
case
Uint8
:
case
Uint8Clamped
:
case
Uint16
:
case
Uint32
:
case
Float32
:
case
Float64
:
case
Simd128
:
return
false
;
case
MaxTypedArrayViewType
:
break
;
}
MOZ_CRASH
(
"
invalid
scalar
type
"
)
;
}
}
}
#
endif
