#
ifndef
js_TracingAPI_h
#
define
js_TracingAPI_h
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
TraceKind
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
JS
{
class
JS_PUBLIC_API
CallbackTracer
;
template
<
typename
T
>
class
Heap
;
template
<
typename
T
>
class
TenuredHeap
;
JS_FRIEND_API
const
char
*
GCTraceKindToAscii
(
JS
:
:
TraceKind
kind
)
;
JS_FRIEND_API
size_t
GCTraceKindSize
(
JS
:
:
TraceKind
kind
)
;
}
enum
WeakMapTraceKind
{
DoNotTraceWeakMaps
ExpandWeakMaps
TraceWeakMapValues
TraceWeakMapKeysValues
}
;
class
JS_PUBLIC_API
JSTracer
{
public
:
JSRuntime
*
runtime
(
)
const
{
return
runtime_
;
}
WeakMapTraceKind
weakMapAction
(
)
const
{
return
weakMapAction_
;
}
enum
class
TracerKindTag
{
Marking
WeakMarking
Tenuring
Callback
}
;
bool
isMarkingTracer
(
)
const
{
return
tag_
=
=
TracerKindTag
:
:
Marking
|
|
tag_
=
=
TracerKindTag
:
:
WeakMarking
;
}
bool
isWeakMarkingTracer
(
)
const
{
return
tag_
=
=
TracerKindTag
:
:
WeakMarking
;
}
bool
isTenuringTracer
(
)
const
{
return
tag_
=
=
TracerKindTag
:
:
Tenuring
;
}
bool
isCallbackTracer
(
)
const
{
return
tag_
=
=
TracerKindTag
:
:
Callback
;
}
inline
JS
:
:
CallbackTracer
*
asCallbackTracer
(
)
;
bool
traceWeakEdges
(
)
const
{
return
traceWeakEdges_
;
}
bool
canSkipJsids
(
)
const
{
return
canSkipJsids_
;
}
#
ifdef
DEBUG
bool
checkEdges
(
)
{
return
checkEdges_
;
}
#
endif
uint32_t
gcNumberForMarking
(
)
const
;
protected
:
JSTracer
(
JSRuntime
*
rt
TracerKindTag
tag
WeakMapTraceKind
weakTraceKind
=
TraceWeakMapValues
)
:
runtime_
(
rt
)
weakMapAction_
(
weakTraceKind
)
#
ifdef
DEBUG
checkEdges_
(
true
)
#
endif
tag_
(
tag
)
traceWeakEdges_
(
true
)
canSkipJsids_
(
false
)
{
}
#
ifdef
DEBUG
void
setCheckEdges
(
bool
check
)
{
checkEdges_
=
check
;
}
#
endif
private
:
JSRuntime
*
runtime_
;
WeakMapTraceKind
weakMapAction_
;
#
ifdef
DEBUG
bool
checkEdges_
;
#
endif
protected
:
TracerKindTag
tag_
;
bool
traceWeakEdges_
;
bool
canSkipJsids_
;
}
;
namespace
JS
{
class
AutoTracingName
;
class
AutoTracingIndex
;
class
AutoTracingCallback
;
class
JS_PUBLIC_API
CallbackTracer
:
public
JSTracer
{
public
:
CallbackTracer
(
JSRuntime
*
rt
WeakMapTraceKind
weakTraceKind
=
TraceWeakMapValues
)
:
JSTracer
(
rt
JSTracer
:
:
TracerKindTag
:
:
Callback
weakTraceKind
)
contextName_
(
nullptr
)
contextIndex_
(
InvalidIndex
)
contextFunctor_
(
nullptr
)
{
}
CallbackTracer
(
JSContext
*
cx
WeakMapTraceKind
weakTraceKind
=
TraceWeakMapValues
)
;
virtual
bool
onObjectEdge
(
JSObject
*
*
objp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
objp
)
)
;
}
virtual
bool
onStringEdge
(
JSString
*
*
strp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
strp
)
)
;
}
virtual
bool
onSymbolEdge
(
JS
:
:
Symbol
*
*
symp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
symp
)
)
;
}
virtual
bool
onBigIntEdge
(
JS
:
:
BigInt
*
*
bip
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
bip
)
)
;
}
virtual
bool
onScriptEdge
(
JSScript
*
*
scriptp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
scriptp
)
)
;
}
virtual
bool
onShapeEdge
(
js
:
:
Shape
*
*
shapep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
shapep
JS
:
:
TraceKind
:
:
Shape
)
)
;
}
virtual
bool
onObjectGroupEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
groupp
JS
:
:
TraceKind
:
:
ObjectGroup
)
)
;
}
virtual
bool
onBaseShapeEdge
(
js
:
:
BaseShape
*
*
basep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
basep
JS
:
:
TraceKind
:
:
BaseShape
)
)
;
}
virtual
bool
onJitCodeEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
codep
JS
:
:
TraceKind
:
:
JitCode
)
)
;
}
virtual
bool
onLazyScriptEdge
(
js
:
:
LazyScript
*
*
lazyp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
lazyp
JS
:
:
TraceKind
:
:
LazyScript
)
)
;
}
virtual
bool
onScopeEdge
(
js
:
:
Scope
*
*
scopep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
scopep
JS
:
:
TraceKind
:
:
Scope
)
)
;
}
virtual
bool
onRegExpSharedEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
sharedp
JS
:
:
TraceKind
:
:
RegExpShared
)
)
;
}
virtual
bool
onChild
(
const
JS
:
:
GCCellPtr
&
thing
)
=
0
;
const
char
*
contextName
(
)
const
{
MOZ_ASSERT
(
contextName_
)
;
return
contextName_
;
}
const
static
size_t
InvalidIndex
=
size_t
(
-
1
)
;
size_t
contextIndex
(
)
const
{
return
contextIndex_
;
}
void
getTracingEdgeName
(
char
*
buffer
size_t
bufferSize
)
;
class
ContextFunctor
{
public
:
virtual
void
operator
(
)
(
CallbackTracer
*
trc
char
*
buf
size_t
bufsize
)
=
0
;
}
;
#
ifdef
DEBUG
enum
class
TracerKind
{
Unspecified
Moving
GrayBuffering
VerifyTraceProtoAndIface
ClearEdges
UnmarkGray
Sweeping
}
;
virtual
TracerKind
getTracerKind
(
)
const
{
return
TracerKind
:
:
Unspecified
;
}
#
endif
bool
dispatchToOnEdge
(
JSObject
*
*
objp
)
{
return
onObjectEdge
(
objp
)
;
}
bool
dispatchToOnEdge
(
JSString
*
*
strp
)
{
return
onStringEdge
(
strp
)
;
}
bool
dispatchToOnEdge
(
JS
:
:
Symbol
*
*
symp
)
{
return
onSymbolEdge
(
symp
)
;
}
bool
dispatchToOnEdge
(
JS
:
:
BigInt
*
*
bip
)
{
return
onBigIntEdge
(
bip
)
;
}
bool
dispatchToOnEdge
(
JSScript
*
*
scriptp
)
{
return
onScriptEdge
(
scriptp
)
;
}
bool
dispatchToOnEdge
(
js
:
:
Shape
*
*
shapep
)
{
return
onShapeEdge
(
shapep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
{
return
onObjectGroupEdge
(
groupp
)
;
}
bool
dispatchToOnEdge
(
js
:
:
BaseShape
*
*
basep
)
{
return
onBaseShapeEdge
(
basep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
{
return
onJitCodeEdge
(
codep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
LazyScript
*
*
lazyp
)
{
return
onLazyScriptEdge
(
lazyp
)
;
}
bool
dispatchToOnEdge
(
js
:
:
Scope
*
*
scopep
)
{
return
onScopeEdge
(
scopep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
{
return
onRegExpSharedEdge
(
sharedp
)
;
}
protected
:
void
setTraceWeakEdges
(
bool
value
)
{
traceWeakEdges_
=
value
;
}
void
setCanSkipJsids
(
bool
value
)
{
canSkipJsids_
=
value
;
}
private
:
friend
class
AutoTracingName
;
const
char
*
contextName_
;
friend
class
AutoTracingIndex
;
size_t
contextIndex_
;
friend
class
AutoTracingDetails
;
ContextFunctor
*
contextFunctor_
;
}
;
class
MOZ_RAII
AutoTracingName
{
CallbackTracer
*
trc_
;
const
char
*
prior_
;
public
:
AutoTracingName
(
CallbackTracer
*
trc
const
char
*
name
)
:
trc_
(
trc
)
prior_
(
trc
-
>
contextName_
)
{
MOZ_ASSERT
(
name
)
;
trc
-
>
contextName_
=
name
;
}
~
AutoTracingName
(
)
{
MOZ_ASSERT
(
trc_
-
>
contextName_
)
;
trc_
-
>
contextName_
=
prior_
;
}
}
;
class
MOZ_RAII
AutoTracingIndex
{
CallbackTracer
*
trc_
;
public
:
explicit
AutoTracingIndex
(
JSTracer
*
trc
size_t
initial
=
0
)
:
trc_
(
nullptr
)
{
if
(
trc
-
>
isCallbackTracer
(
)
)
{
trc_
=
trc
-
>
asCallbackTracer
(
)
;
MOZ_ASSERT
(
trc_
-
>
contextIndex_
=
=
CallbackTracer
:
:
InvalidIndex
)
;
trc_
-
>
contextIndex_
=
initial
;
}
}
~
AutoTracingIndex
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextIndex_
!
=
CallbackTracer
:
:
InvalidIndex
)
;
trc_
-
>
contextIndex_
=
CallbackTracer
:
:
InvalidIndex
;
}
}
void
operator
+
+
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextIndex_
!
=
CallbackTracer
:
:
InvalidIndex
)
;
+
+
trc_
-
>
contextIndex_
;
}
}
}
;
class
MOZ_RAII
AutoTracingDetails
{
CallbackTracer
*
trc_
;
public
:
AutoTracingDetails
(
JSTracer
*
trc
CallbackTracer
:
:
ContextFunctor
&
func
)
:
trc_
(
nullptr
)
{
if
(
trc
-
>
isCallbackTracer
(
)
)
{
trc_
=
trc
-
>
asCallbackTracer
(
)
;
MOZ_ASSERT
(
trc_
-
>
contextFunctor_
=
=
nullptr
)
;
trc_
-
>
contextFunctor_
=
&
func
;
}
}
~
AutoTracingDetails
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextFunctor_
)
;
trc_
-
>
contextFunctor_
=
nullptr
;
}
}
}
;
}
JS
:
:
CallbackTracer
*
JSTracer
:
:
asCallbackTracer
(
)
{
MOZ_ASSERT
(
isCallbackTracer
(
)
)
;
return
static_cast
<
JS
:
:
CallbackTracer
*
>
(
this
)
;
}
namespace
js
{
namespace
gc
{
template
<
typename
T
>
JS_PUBLIC_API
void
TraceExternalEdge
(
JSTracer
*
trc
T
*
thingp
const
char
*
name
)
;
}
}
namespace
JS
{
template
<
typename
T
>
inline
void
TraceEdge
(
JSTracer
*
trc
JS
:
:
Heap
<
T
>
*
thingp
const
char
*
name
)
{
MOZ_ASSERT
(
thingp
)
;
if
(
*
thingp
)
{
js
:
:
gc
:
:
TraceExternalEdge
(
trc
thingp
-
>
unsafeGet
(
)
name
)
;
}
}
template
<
typename
T
>
inline
void
TraceEdge
(
JSTracer
*
trc
JS
:
:
TenuredHeap
<
T
>
*
thingp
const
char
*
name
)
{
MOZ_ASSERT
(
thingp
)
;
if
(
T
ptr
=
thingp
-
>
unbarrieredGetPtr
(
)
)
{
js
:
:
gc
:
:
TraceExternalEdge
(
trc
&
ptr
name
)
;
thingp
-
>
setPtr
(
ptr
)
;
}
}
template
<
typename
T
>
extern
JS_PUBLIC_API
void
UnsafeTraceRoot
(
JSTracer
*
trc
T
*
edgep
const
char
*
name
)
;
extern
JS_PUBLIC_API
void
TraceChildren
(
JSTracer
*
trc
GCCellPtr
thing
)
;
using
ZoneSet
=
js
:
:
HashSet
<
Zone
*
js
:
:
DefaultHasher
<
Zone
*
>
js
:
:
SystemAllocPolicy
>
;
using
CompartmentSet
=
js
:
:
HashSet
<
JS
:
:
Compartment
*
js
:
:
DefaultHasher
<
JS
:
:
Compartment
*
>
js
:
:
SystemAllocPolicy
>
;
extern
JS_PUBLIC_API
void
TraceIncomingCCWs
(
JSTracer
*
trc
const
JS
:
:
CompartmentSet
&
compartments
)
;
}
extern
JS_PUBLIC_API
void
JS_GetTraceThingInfo
(
char
*
buf
size_t
bufsize
JSTracer
*
trc
void
*
thing
JS
:
:
TraceKind
kind
bool
includeDetails
)
;
namespace
js
{
template
<
typename
T
>
extern
JS_PUBLIC_API
void
UnsafeTraceManuallyBarrieredEdge
(
JSTracer
*
trc
T
*
edgep
const
char
*
name
)
;
namespace
gc
{
template
<
typename
T
>
extern
JS_PUBLIC_API
bool
EdgeNeedsSweep
(
JS
:
:
Heap
<
T
>
*
edgep
)
;
template
<
typename
T
>
bool
IsAboutToBeFinalizedUnbarriered
(
T
*
thingp
)
;
}
#
ifdef
DEBUG
extern
JS_FRIEND_API
bool
RuntimeIsBeingDestroyed
(
)
;
#
endif
}
#
endif
