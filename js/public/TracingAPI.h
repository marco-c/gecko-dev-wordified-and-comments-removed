#
ifndef
js_TracingAPI_h
#
define
js_TracingAPI_h
#
include
"
js
/
GCTypeMacros
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
TraceKind
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
JS
{
class
JS_PUBLIC_API
CallbackTracer
;
template
<
typename
T
>
class
Heap
;
template
<
typename
T
>
class
TenuredHeap
;
JS_FRIEND_API
const
char
*
GCTraceKindToAscii
(
JS
:
:
TraceKind
kind
)
;
JS_FRIEND_API
size_t
GCTraceKindSize
(
JS
:
:
TraceKind
kind
)
;
enum
class
TracerKind
{
Marking
Tenuring
Generic
Moving
GrayBuffering
ClearEdges
Sweeping
Callback
UnmarkGray
VerifyTraceProtoAndIface
}
;
enum
class
WeakMapTraceAction
{
Skip
Expand
TraceValues
TraceKeysAndValues
}
;
}
namespace
js
{
class
GenericTracer
;
}
class
JS_PUBLIC_API
JSTracer
{
public
:
JSRuntime
*
runtime
(
)
const
{
return
runtime_
;
}
JS
:
:
TracerKind
kind
(
)
const
{
return
kind_
;
}
bool
isMarkingTracer
(
)
const
{
return
kind_
=
=
JS
:
:
TracerKind
:
:
Marking
;
}
bool
isTenuringTracer
(
)
const
{
return
kind_
=
=
JS
:
:
TracerKind
:
:
Tenuring
;
}
bool
isGenericTracer
(
)
const
{
return
kind_
>
=
JS
:
:
TracerKind
:
:
Generic
;
}
bool
isCallbackTracer
(
)
const
{
return
kind_
>
=
JS
:
:
TracerKind
:
:
Callback
;
}
JS
:
:
WeakMapTraceAction
weakMapAction
(
)
const
{
return
weakMapAction_
;
}
inline
js
:
:
GenericTracer
*
asGenericTracer
(
)
;
inline
JS
:
:
CallbackTracer
*
asCallbackTracer
(
)
;
bool
traceWeakEdges
(
)
const
{
return
traceWeakEdges_
;
}
bool
canSkipJsids
(
)
const
{
return
canSkipJsids_
;
}
#
ifdef
DEBUG
bool
checkEdges
(
)
{
return
checkEdges_
;
}
#
endif
uint32_t
gcNumberForMarking
(
)
const
;
protected
:
JSTracer
(
JSRuntime
*
rt
JS
:
:
TracerKind
kind
JS
:
:
WeakMapTraceAction
weakMapAction
=
JS
:
:
WeakMapTraceAction
:
:
TraceValues
)
:
runtime_
(
rt
)
kind_
(
kind
)
weakMapAction_
(
weakMapAction
)
traceWeakEdges_
(
true
)
#
ifdef
DEBUG
checkEdges_
(
true
)
#
endif
canSkipJsids_
(
false
)
{
}
void
setTraceWeakEdges
(
bool
value
)
{
traceWeakEdges_
=
value
;
}
#
ifdef
DEBUG
void
setCheckEdges
(
bool
check
)
{
checkEdges_
=
check
;
}
#
endif
private
:
JSRuntime
*
const
runtime_
;
const
JS
:
:
TracerKind
kind_
;
const
JS
:
:
WeakMapTraceAction
weakMapAction_
;
bool
traceWeakEdges_
;
#
ifdef
DEBUG
bool
checkEdges_
;
#
endif
protected
:
bool
canSkipJsids_
;
}
;
namespace
js
{
class
AutoTracingName
;
class
AutoTracingIndex
;
class
AutoTracingCallback
;
class
GenericTracer
:
public
JSTracer
{
public
:
GenericTracer
(
JSRuntime
*
rt
JS
:
:
TracerKind
kind
=
JS
:
:
TracerKind
:
:
Generic
JS
:
:
WeakMapTraceAction
weakMapAction
=
JS
:
:
WeakMapTraceAction
:
:
TraceValues
)
:
JSTracer
(
rt
kind
weakMapAction
)
{
MOZ_ASSERT
(
isGenericTracer
(
)
)
;
}
virtual
bool
onObjectEdge
(
JSObject
*
*
objp
)
=
0
;
virtual
bool
onStringEdge
(
JSString
*
*
strp
)
=
0
;
virtual
bool
onSymbolEdge
(
JS
:
:
Symbol
*
*
symp
)
=
0
;
virtual
bool
onBigIntEdge
(
JS
:
:
BigInt
*
*
bip
)
=
0
;
virtual
bool
onScriptEdge
(
js
:
:
BaseScript
*
*
scriptp
)
=
0
;
virtual
bool
onShapeEdge
(
js
:
:
Shape
*
*
shapep
)
=
0
;
virtual
bool
onRegExpSharedEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
=
0
;
virtual
bool
onObjectGroupEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
=
0
;
virtual
bool
onBaseShapeEdge
(
js
:
:
BaseShape
*
*
basep
)
=
0
;
virtual
bool
onJitCodeEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
=
0
;
virtual
bool
onScopeEdge
(
js
:
:
Scope
*
*
scopep
)
=
0
;
bool
dispatchToOnEdge
(
JSObject
*
*
objp
)
{
return
onObjectEdge
(
objp
)
;
}
bool
dispatchToOnEdge
(
JSString
*
*
strp
)
{
return
onStringEdge
(
strp
)
;
}
bool
dispatchToOnEdge
(
JS
:
:
Symbol
*
*
symp
)
{
return
onSymbolEdge
(
symp
)
;
}
bool
dispatchToOnEdge
(
JS
:
:
BigInt
*
*
bip
)
{
return
onBigIntEdge
(
bip
)
;
}
bool
dispatchToOnEdge
(
js
:
:
BaseScript
*
*
scriptp
)
{
return
onScriptEdge
(
scriptp
)
;
}
bool
dispatchToOnEdge
(
js
:
:
Shape
*
*
shapep
)
{
return
onShapeEdge
(
shapep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
{
return
onObjectGroupEdge
(
groupp
)
;
}
bool
dispatchToOnEdge
(
js
:
:
BaseShape
*
*
basep
)
{
return
onBaseShapeEdge
(
basep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
{
return
onJitCodeEdge
(
codep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
Scope
*
*
scopep
)
{
return
onScopeEdge
(
scopep
)
;
}
bool
dispatchToOnEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
{
return
onRegExpSharedEdge
(
sharedp
)
;
}
}
;
}
namespace
JS
{
class
AutoTracingName
;
class
AutoTracingIndex
;
class
AutoTracingCallback
;
class
JS_PUBLIC_API
CallbackTracer
:
public
js
:
:
GenericTracer
{
public
:
CallbackTracer
(
JSRuntime
*
rt
JS
:
:
TracerKind
kind
=
JS
:
:
TracerKind
:
:
Callback
WeakMapTraceAction
weakMapAction
=
WeakMapTraceAction
:
:
TraceValues
)
:
GenericTracer
(
rt
kind
weakMapAction
)
contextName_
(
nullptr
)
contextIndex_
(
InvalidIndex
)
contextFunctor_
(
nullptr
)
{
MOZ_ASSERT
(
isCallbackTracer
(
)
)
;
}
CallbackTracer
(
JSContext
*
cx
JS
:
:
TracerKind
kind
=
JS
:
:
TracerKind
:
:
Callback
WeakMapTraceAction
weakMapAction
=
WeakMapTraceAction
:
:
TraceValues
)
;
virtual
bool
onChild
(
const
JS
:
:
GCCellPtr
&
thing
)
=
0
;
const
char
*
contextName
(
)
const
{
MOZ_ASSERT
(
contextName_
)
;
return
contextName_
;
}
const
static
size_t
InvalidIndex
=
size_t
(
-
1
)
;
size_t
contextIndex
(
)
const
{
return
contextIndex_
;
}
void
getTracingEdgeName
(
char
*
buffer
size_t
bufferSize
)
;
class
ContextFunctor
{
public
:
virtual
void
operator
(
)
(
CallbackTracer
*
trc
char
*
buf
size_t
bufsize
)
=
0
;
}
;
protected
:
void
setCanSkipJsids
(
bool
value
)
{
canSkipJsids_
=
value
;
}
private
:
virtual
bool
onObjectEdge
(
JSObject
*
*
objp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
objp
)
)
;
}
virtual
bool
onStringEdge
(
JSString
*
*
strp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
strp
)
)
;
}
virtual
bool
onSymbolEdge
(
JS
:
:
Symbol
*
*
symp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
symp
)
)
;
}
virtual
bool
onBigIntEdge
(
JS
:
:
BigInt
*
*
bip
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
bip
)
)
;
}
virtual
bool
onScriptEdge
(
js
:
:
BaseScript
*
*
scriptp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
scriptp
)
)
;
}
virtual
bool
onShapeEdge
(
js
:
:
Shape
*
*
shapep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
shapep
JS
:
:
TraceKind
:
:
Shape
)
)
;
}
virtual
bool
onObjectGroupEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
groupp
JS
:
:
TraceKind
:
:
ObjectGroup
)
)
;
}
virtual
bool
onBaseShapeEdge
(
js
:
:
BaseShape
*
*
basep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
basep
JS
:
:
TraceKind
:
:
BaseShape
)
)
;
}
virtual
bool
onJitCodeEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
codep
JS
:
:
TraceKind
:
:
JitCode
)
)
;
}
virtual
bool
onScopeEdge
(
js
:
:
Scope
*
*
scopep
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
scopep
JS
:
:
TraceKind
:
:
Scope
)
)
;
}
virtual
bool
onRegExpSharedEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
{
return
onChild
(
JS
:
:
GCCellPtr
(
*
sharedp
JS
:
:
TraceKind
:
:
RegExpShared
)
)
;
}
friend
class
AutoTracingName
;
const
char
*
contextName_
;
friend
class
AutoTracingIndex
;
size_t
contextIndex_
;
friend
class
AutoTracingDetails
;
ContextFunctor
*
contextFunctor_
;
}
;
class
MOZ_RAII
AutoTracingName
{
CallbackTracer
*
trc_
;
const
char
*
prior_
;
public
:
AutoTracingName
(
JSTracer
*
trc
const
char
*
name
)
:
trc_
(
nullptr
)
{
MOZ_ASSERT
(
name
)
;
if
(
trc
-
>
isCallbackTracer
(
)
)
{
trc_
=
trc
-
>
asCallbackTracer
(
)
;
prior_
=
trc_
-
>
contextName_
;
trc_
-
>
contextName_
=
name
;
}
}
~
AutoTracingName
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextName_
)
;
trc_
-
>
contextName_
=
prior_
;
}
}
}
;
class
MOZ_RAII
AutoTracingIndex
{
CallbackTracer
*
trc_
;
public
:
explicit
AutoTracingIndex
(
JSTracer
*
trc
size_t
initial
=
0
)
:
trc_
(
nullptr
)
{
if
(
trc
-
>
isCallbackTracer
(
)
)
{
trc_
=
trc
-
>
asCallbackTracer
(
)
;
MOZ_ASSERT
(
trc_
-
>
contextIndex_
=
=
CallbackTracer
:
:
InvalidIndex
)
;
trc_
-
>
contextIndex_
=
initial
;
}
}
~
AutoTracingIndex
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextIndex_
!
=
CallbackTracer
:
:
InvalidIndex
)
;
trc_
-
>
contextIndex_
=
CallbackTracer
:
:
InvalidIndex
;
}
}
void
operator
+
+
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextIndex_
!
=
CallbackTracer
:
:
InvalidIndex
)
;
+
+
trc_
-
>
contextIndex_
;
}
}
}
;
class
MOZ_RAII
AutoTracingDetails
{
CallbackTracer
*
trc_
;
public
:
AutoTracingDetails
(
JSTracer
*
trc
CallbackTracer
:
:
ContextFunctor
&
func
)
:
trc_
(
nullptr
)
{
if
(
trc
-
>
isCallbackTracer
(
)
)
{
trc_
=
trc
-
>
asCallbackTracer
(
)
;
MOZ_ASSERT
(
trc_
-
>
contextFunctor_
=
=
nullptr
)
;
trc_
-
>
contextFunctor_
=
&
func
;
}
}
~
AutoTracingDetails
(
)
{
if
(
trc_
)
{
MOZ_ASSERT
(
trc_
-
>
contextFunctor_
)
;
trc_
-
>
contextFunctor_
=
nullptr
;
}
}
}
;
}
js
:
:
GenericTracer
*
JSTracer
:
:
asGenericTracer
(
)
{
MOZ_ASSERT
(
isGenericTracer
(
)
)
;
return
static_cast
<
js
:
:
GenericTracer
*
>
(
this
)
;
}
JS
:
:
CallbackTracer
*
JSTracer
:
:
asCallbackTracer
(
)
{
MOZ_ASSERT
(
isCallbackTracer
(
)
)
;
return
static_cast
<
JS
:
:
CallbackTracer
*
>
(
this
)
;
}
namespace
js
{
class
AbstractGeneratorObject
;
class
SavedFrame
;
namespace
gc
{
#
define
JS_DECLARE_TRACE_EXTERNAL_EDGE
(
type
)
\
extern
JS_PUBLIC_API
void
TraceExternalEdge
(
JSTracer
*
trc
type
*
thingp
\
const
char
*
name
)
;
JS_FOR_EACH_PUBLIC_GC_POINTER_TYPE
(
JS_DECLARE_TRACE_EXTERNAL_EDGE
)
JS_FOR_EACH_PUBLIC_TAGGED_GC_POINTER_TYPE
(
JS_DECLARE_TRACE_EXTERNAL_EDGE
)
#
undef
JS_DECLARE_TRACE_EXTERNAL_EDGE
}
}
namespace
JS
{
template
<
typename
T
>
inline
void
TraceEdge
(
JSTracer
*
trc
JS
:
:
Heap
<
T
>
*
thingp
const
char
*
name
)
{
MOZ_ASSERT
(
thingp
)
;
if
(
*
thingp
)
{
js
:
:
gc
:
:
TraceExternalEdge
(
trc
thingp
-
>
unsafeGet
(
)
name
)
;
}
}
template
<
typename
T
>
inline
void
TraceEdge
(
JSTracer
*
trc
JS
:
:
TenuredHeap
<
T
>
*
thingp
const
char
*
name
)
{
MOZ_ASSERT
(
thingp
)
;
if
(
T
ptr
=
thingp
-
>
unbarrieredGetPtr
(
)
)
{
js
:
:
gc
:
:
TraceExternalEdge
(
trc
&
ptr
name
)
;
thingp
-
>
setPtr
(
ptr
)
;
}
}
#
define
JS_DECLARE_UNSAFE_TRACE_ROOT
(
type
)
\
extern
JS_PUBLIC_API
void
UnsafeTraceRoot
(
JSTracer
*
trc
type
*
edgep
\
const
char
*
name
)
;
JS_FOR_EACH_PUBLIC_GC_POINTER_TYPE
(
JS_DECLARE_UNSAFE_TRACE_ROOT
)
JS_FOR_EACH_PUBLIC_TAGGED_GC_POINTER_TYPE
(
JS_DECLARE_UNSAFE_TRACE_ROOT
)
JS_DECLARE_UNSAFE_TRACE_ROOT
(
js
:
:
AbstractGeneratorObject
*
)
JS_DECLARE_UNSAFE_TRACE_ROOT
(
js
:
:
SavedFrame
*
)
#
undef
JS_DECLARE_UNSAFE_TRACE_ROOT
extern
JS_PUBLIC_API
void
TraceChildren
(
JSTracer
*
trc
GCCellPtr
thing
)
;
}
extern
JS_PUBLIC_API
void
JS_GetTraceThingInfo
(
char
*
buf
size_t
bufsize
JSTracer
*
trc
void
*
thing
JS
:
:
TraceKind
kind
bool
includeDetails
)
;
namespace
js
{
inline
bool
IsTracerKind
(
JSTracer
*
trc
JS
:
:
TracerKind
kind
)
{
return
trc
-
>
kind
(
)
=
=
kind
;
}
extern
JS_PUBLIC_API
void
UnsafeTraceManuallyBarrieredEdge
(
JSTracer
*
trc
JSObject
*
*
edgep
const
char
*
name
)
;
template
<
typename
T
>
inline
bool
TraceManuallyBarrieredWeakEdge
(
JSTracer
*
trc
T
*
thingp
const
char
*
name
)
;
template
<
typename
T
>
class
BarrieredBase
;
template
<
typename
T
>
inline
bool
TraceWeakEdge
(
JSTracer
*
trc
BarrieredBase
<
T
>
*
thingp
const
char
*
name
)
;
namespace
gc
{
template
<
typename
T
>
extern
JS_PUBLIC_API
bool
EdgeNeedsSweep
(
JS
:
:
Heap
<
T
>
*
edgep
)
;
template
<
typename
T
>
bool
IsAboutToBeFinalizedUnbarriered
(
T
*
thingp
)
;
}
#
ifdef
DEBUG
extern
JS_FRIEND_API
bool
RuntimeIsBeingDestroyed
(
)
;
#
endif
}
#
endif
