#
ifndef
js_Array_h
#
define
js_Array_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
HandleValueArray
;
extern
JS_PUBLIC_API
JSObject
*
NewArrayObject
(
JSContext
*
cx
const
HandleValueArray
&
contents
)
;
extern
JS_PUBLIC_API
JSObject
*
NewArrayObject
(
JSContext
*
cx
size_t
length
)
;
extern
JS_PUBLIC_API
bool
IsArrayObject
(
JSContext
*
cx
Handle
<
Value
>
value
bool
*
isArray
)
;
extern
JS_PUBLIC_API
bool
IsArrayObject
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
*
isArray
)
;
extern
JS_PUBLIC_API
bool
GetArrayLength
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
uint32_t
*
lengthp
)
;
extern
JS_PUBLIC_API
bool
SetArrayLength
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
uint32_t
length
)
;
enum
class
IsArrayAnswer
{
Array
NotArray
RevokedProxy
}
;
extern
JS_PUBLIC_API
bool
IsArray
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
*
isArray
)
;
extern
JS_PUBLIC_API
bool
IsArray
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
IsArrayAnswer
*
answer
)
;
}
#
endif
