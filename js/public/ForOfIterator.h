#
ifndef
js_ForOfIterator_h
#
define
js_ForOfIterator_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
JS
{
class
MOZ_STACK_CLASS
JS_PUBLIC_API
ForOfIterator
{
protected
:
JSContext
*
cx_
;
Rooted
<
JSObject
*
>
iterator
;
Rooted
<
Value
>
nextMethod
;
static
constexpr
uint32_t
NOT_ARRAY
=
UINT32_MAX
;
uint32_t
index
=
NOT_ARRAY
;
ForOfIterator
(
const
ForOfIterator
&
)
=
delete
;
ForOfIterator
&
operator
=
(
const
ForOfIterator
&
)
=
delete
;
public
:
explicit
ForOfIterator
(
JSContext
*
cx
)
:
cx_
(
cx
)
iterator
(
cx
)
nextMethod
(
cx
)
{
}
enum
NonIterableBehavior
{
ThrowOnNonIterable
AllowNonIterable
}
;
MOZ_MUST_USE
bool
init
(
Handle
<
Value
>
iterable
NonIterableBehavior
nonIterableBehavior
=
ThrowOnNonIterable
)
;
MOZ_MUST_USE
bool
next
(
MutableHandle
<
Value
>
val
bool
*
done
)
;
void
closeThrow
(
)
;
bool
valueIsIterable
(
)
const
{
return
iterator
;
}
private
:
inline
bool
nextFromOptimizedArray
(
MutableHandle
<
Value
>
val
bool
*
done
)
;
}
;
}
#
endif
