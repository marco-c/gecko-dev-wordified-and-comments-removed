#
ifndef
js_MemoryFunctions_h
#
define
js_MemoryFunctions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
struct
JSContext
;
struct
JSRuntime
;
struct
JSFreeOp
{
protected
:
JSRuntime
*
runtime_
;
explicit
JSFreeOp
(
JSRuntime
*
rt
)
:
runtime_
(
rt
)
{
}
public
:
JSRuntime
*
runtime
(
)
const
{
MOZ_ASSERT
(
runtime_
)
;
return
runtime_
;
}
}
;
extern
JS_PUBLIC_API
void
*
JS_malloc
(
JSContext
*
cx
size_t
nbytes
)
;
extern
JS_PUBLIC_API
void
*
JS_realloc
(
JSContext
*
cx
void
*
p
size_t
oldBytes
size_t
newBytes
)
;
extern
JS_PUBLIC_API
void
JS_free
(
JSContext
*
cx
void
*
p
)
;
extern
JS_PUBLIC_API
void
*
JS_string_malloc
(
JSContext
*
cx
size_t
nbytes
)
;
extern
JS_PUBLIC_API
void
*
JS_string_realloc
(
JSContext
*
cx
void
*
p
size_t
oldBytes
size_t
newBytes
)
;
extern
JS_PUBLIC_API
void
JS_string_free
(
JSContext
*
cx
void
*
p
)
;
extern
JS_PUBLIC_API
void
JS_freeop
(
JSFreeOp
*
fop
void
*
p
)
;
namespace
JS
{
#
define
JS_FOR_EACH_PUBLIC_MEMORY_USE
(
_
)
\
_
(
XPCWrappedNative
)
\
_
(
DOMBinding
)
enum
class
MemoryUse
:
uint8_t
{
#
define
DEFINE_MEMORY_USE
(
Name
)
Name
JS_FOR_EACH_PUBLIC_MEMORY_USE
(
DEFINE_MEMORY_USE
)
#
undef
DEFINE_MEMORY_USE
}
;
extern
JS_PUBLIC_API
void
AddAssociatedMemory
(
JSObject
*
obj
size_t
nbytes
MemoryUse
use
)
;
extern
JS_PUBLIC_API
void
RemoveAssociatedMemory
(
JSObject
*
obj
size_t
nbytes
MemoryUse
use
)
;
}
#
endif
