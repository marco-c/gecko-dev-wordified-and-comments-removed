#
ifndef
js_RegExp_h
#
define
js_RegExp_h
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JSContext
;
class
JSString
;
namespace
JS
{
struct
RegExpFlags
{
public
:
static
constexpr
unsigned
IgnoreCase
=
0b0
'
0001
;
static
constexpr
unsigned
Global
=
0b0
'
0010
;
static
constexpr
unsigned
Multiline
=
0b0
'
0100
;
static
constexpr
unsigned
Sticky
=
0b0
'
1000
;
static
constexpr
unsigned
Unicode
=
0b1
'
0000
;
}
;
extern
JS_PUBLIC_API
JSObject
*
NewRegExpObject
(
JSContext
*
cx
const
char
*
bytes
size_t
length
unsigned
flags
)
;
extern
JS_PUBLIC_API
JSObject
*
NewUCRegExpObject
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
unsigned
flags
)
;
extern
JS_PUBLIC_API
bool
SetRegExpInput
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
Handle
<
JSString
*
>
input
)
;
extern
JS_PUBLIC_API
bool
ClearRegExpStatics
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
bool
ExecuteRegExp
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
Handle
<
JSObject
*
>
reobj
char16_t
*
chars
size_t
length
size_t
*
indexp
bool
test
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
bool
ExecuteRegExpNoStatics
(
JSContext
*
cx
Handle
<
JSObject
*
>
reobj
char16_t
*
chars
size_t
length
size_t
*
indexp
bool
test
MutableHandle
<
Value
>
rval
)
;
extern
JS_PUBLIC_API
bool
ObjectIsRegExp
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
*
isRegExp
)
;
extern
JS_PUBLIC_API
unsigned
GetRegExpFlags
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
JSString
*
GetRegExpSource
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
)
;
}
#
endif
