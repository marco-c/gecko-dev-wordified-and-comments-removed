#
ifndef
js_ProfilingStack_h
#
define
js_ProfilingStack_h
#
include
<
algorithm
>
#
include
<
stdint
.
h
>
#
include
"
jsbytecode
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
struct
JSRuntime
;
class
JSTracer
;
class
PseudoStack
;
namespace
js
{
class
ProfileEntry
{
const
char
*
volatile
label_
;
const
char
*
volatile
dynamicString_
;
void
*
volatile
spOrScript
;
int32_t
volatile
lineOrPcOffset
;
uint32_t
volatile
flags_
;
static
int32_t
pcToOffset
(
JSScript
*
aScript
jsbytecode
*
aPc
)
;
public
:
enum
Flags
:
uint32_t
{
IS_CPP_ENTRY
=
1
<
<
0
BEGIN_PSEUDO_JS
=
1
<
<
1
OSR
=
1
<
<
2
ALL
=
IS_CPP_ENTRY
|
BEGIN_PSEUDO_JS
|
OSR
CATEGORY_MASK
=
~
ALL
}
;
enum
class
Category
:
uint32_t
{
OTHER
=
0x10
CSS
=
0x20
JS
=
0x40
GC
=
0x80
CC
=
0x100
NETWORK
=
0x200
GRAPHICS
=
0x400
STORAGE
=
0x800
EVENTS
=
0x1000
FIRST
=
OTHER
LAST
=
EVENTS
}
;
static_assert
(
(
static_cast
<
int
>
(
Category
:
:
FIRST
)
&
Flags
:
:
ALL
)
=
=
0
"
The
category
bitflags
should
not
intersect
with
the
other
flags
!
"
)
;
bool
isCpp
(
)
const
volatile
{
return
hasFlag
(
IS_CPP_ENTRY
)
;
}
bool
isJs
(
)
const
volatile
{
return
!
isCpp
(
)
;
}
void
setLabel
(
const
char
*
aLabel
)
volatile
{
label_
=
aLabel
;
}
const
char
*
label
(
)
const
volatile
{
return
label_
;
}
const
char
*
dynamicString
(
)
const
volatile
{
return
dynamicString_
;
}
void
initCppFrame
(
const
char
*
aLabel
const
char
*
aDynamicString
void
*
sp
uint32_t
aLine
js
:
:
ProfileEntry
:
:
Flags
aFlags
js
:
:
ProfileEntry
:
:
Category
aCategory
)
volatile
{
label_
=
aLabel
;
dynamicString_
=
aDynamicString
;
spOrScript
=
sp
;
lineOrPcOffset
=
static_cast
<
int32_t
>
(
aLine
)
;
flags_
=
aFlags
|
js
:
:
ProfileEntry
:
:
IS_CPP_ENTRY
|
uint32_t
(
aCategory
)
;
}
void
initJsFrame
(
const
char
*
aLabel
const
char
*
aDynamicString
JSScript
*
aScript
jsbytecode
*
aPc
)
volatile
{
label_
=
aLabel
;
dynamicString_
=
aDynamicString
;
spOrScript
=
aScript
;
lineOrPcOffset
=
pcToOffset
(
aScript
aPc
)
;
flags_
=
uint32_t
(
js
:
:
ProfileEntry
:
:
Category
:
:
JS
)
;
}
void
setFlag
(
uint32_t
flag
)
volatile
{
MOZ_ASSERT
(
flag
!
=
IS_CPP_ENTRY
)
;
flags_
|
=
flag
;
}
void
unsetFlag
(
uint32_t
flag
)
volatile
{
MOZ_ASSERT
(
flag
!
=
IS_CPP_ENTRY
)
;
flags_
&
=
~
flag
;
}
bool
hasFlag
(
uint32_t
flag
)
const
volatile
{
return
bool
(
flags_
&
flag
)
;
}
uint32_t
flags
(
)
const
volatile
{
return
flags_
;
}
uint32_t
category
(
)
const
volatile
{
return
flags_
&
CATEGORY_MASK
;
}
void
setCategory
(
Category
c
)
volatile
{
MOZ_ASSERT
(
c
>
=
Category
:
:
FIRST
)
;
MOZ_ASSERT
(
c
<
=
Category
:
:
LAST
)
;
flags_
&
=
~
CATEGORY_MASK
;
setFlag
(
uint32_t
(
c
)
)
;
}
void
setOSR
(
)
volatile
{
MOZ_ASSERT
(
isJs
(
)
)
;
setFlag
(
OSR
)
;
}
void
unsetOSR
(
)
volatile
{
MOZ_ASSERT
(
isJs
(
)
)
;
unsetFlag
(
OSR
)
;
}
bool
isOSR
(
)
const
volatile
{
return
hasFlag
(
OSR
)
;
}
void
*
stackAddress
(
)
const
volatile
{
MOZ_ASSERT
(
!
isJs
(
)
)
;
return
spOrScript
;
}
JS_PUBLIC_API
(
JSScript
*
)
script
(
)
const
volatile
;
uint32_t
line
(
)
const
volatile
{
MOZ_ASSERT
(
!
isJs
(
)
)
;
return
static_cast
<
uint32_t
>
(
lineOrPcOffset
)
;
}
JSScript
*
rawScript
(
)
const
volatile
{
MOZ_ASSERT
(
isJs
(
)
)
;
return
(
JSScript
*
)
spOrScript
;
}
JS_FRIEND_API
(
jsbytecode
*
)
pc
(
)
const
volatile
;
JS_FRIEND_API
(
void
)
setPC
(
jsbytecode
*
pc
)
volatile
;
void
trace
(
JSTracer
*
trc
)
volatile
;
static
const
int32_t
NullPCOffset
=
-
1
;
static
size_t
offsetOfLabel
(
)
{
return
offsetof
(
ProfileEntry
label_
)
;
}
static
size_t
offsetOfSpOrScript
(
)
{
return
offsetof
(
ProfileEntry
spOrScript
)
;
}
static
size_t
offsetOfLineOrPcOffset
(
)
{
return
offsetof
(
ProfileEntry
lineOrPcOffset
)
;
}
static
size_t
offsetOfFlags
(
)
{
return
offsetof
(
ProfileEntry
flags_
)
;
}
}
;
JS_FRIEND_API
(
void
)
SetContextProfilingStack
(
JSContext
*
cx
PseudoStack
*
pseudoStack
)
;
JS_FRIEND_API
(
void
)
EnableContextProfilingStack
(
JSContext
*
cx
bool
enabled
)
;
JS_FRIEND_API
(
void
)
RegisterContextProfilingEventMarker
(
JSContext
*
cx
void
(
*
fn
)
(
const
char
*
)
)
;
}
class
PseudoStack
{
public
:
PseudoStack
(
)
:
stackPointer
(
0
)
{
}
~
PseudoStack
(
)
{
MOZ_RELEASE_ASSERT
(
stackPointer
=
=
0
)
;
}
void
pushCppFrame
(
const
char
*
label
const
char
*
dynamicString
void
*
sp
uint32_t
line
js
:
:
ProfileEntry
:
:
Category
category
js
:
:
ProfileEntry
:
:
Flags
flags
=
js
:
:
ProfileEntry
:
:
Flags
(
0
)
)
{
if
(
stackPointer
<
MaxEntries
)
{
entries
[
stackPointer
]
.
initCppFrame
(
label
dynamicString
sp
line
flags
category
)
;
}
stackPointer
+
+
;
}
void
pushJsFrame
(
const
char
*
label
const
char
*
dynamicString
JSScript
*
script
jsbytecode
*
pc
)
{
if
(
stackPointer
<
MaxEntries
)
{
entries
[
stackPointer
]
.
initJsFrame
(
label
dynamicString
script
pc
)
;
}
stackPointer
+
+
;
}
void
pop
(
)
{
MOZ_ASSERT
(
stackPointer
>
0
)
;
stackPointer
-
-
;
}
uint32_t
stackSize
(
)
const
{
return
std
:
:
min
(
uint32_t
(
stackPointer
)
uint32_t
(
MaxEntries
)
)
;
}
private
:
PseudoStack
(
const
PseudoStack
&
)
=
delete
;
void
operator
=
(
const
PseudoStack
&
)
=
delete
;
public
:
static
const
uint32_t
MaxEntries
=
1024
;
js
:
:
ProfileEntry
volatile
entries
[
MaxEntries
]
;
mozilla
:
:
Atomic
<
uint32_t
>
stackPointer
;
}
;
#
endif
