#
ifndef
js_Initialization_h
#
define
js_Initialization_h
#
include
"
jstypes
.
h
"
namespace
JS
{
namespace
detail
{
enum
class
InitState
{
Uninitialized
=
0
Initializing
Running
ShutDown
}
;
extern
JS_PUBLIC_DATA
(
InitState
)
libraryInitState
;
extern
JS_PUBLIC_API
(
const
char
*
)
InitWithFailureDiagnostic
(
bool
isDebugBuild
)
;
}
}
typedef
void
*
(
*
JS_ICUAllocFn
)
(
const
void
*
size_t
size
)
;
typedef
void
*
(
*
JS_ICUReallocFn
)
(
const
void
*
void
*
p
size_t
size
)
;
typedef
void
(
*
JS_ICUFreeFn
)
(
const
void
*
void
*
p
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetICUMemoryFunctions
(
JS_ICUAllocFn
allocFn
JS_ICUReallocFn
reallocFn
JS_ICUFreeFn
freeFn
)
;
#
ifdef
ENABLE_BIGINT
namespace
JS
{
using
GMPAllocFn
=
void
*
(
*
)
(
size_t
allocSize
)
;
using
GMPReallocFn
=
void
*
(
*
)
(
void
*
p
size_t
oldSize
size_t
newSize
)
;
using
GMPFreeFn
=
void
(
*
)
(
void
*
p
size_t
size
)
;
extern
JS_PUBLIC_API
(
void
)
SetGMPMemoryFunctions
(
GMPAllocFn
allocFn
GMPReallocFn
reallocFn
GMPFreeFn
freeFn
)
;
}
;
#
endif
inline
bool
JS_Init
(
void
)
{
#
ifdef
DEBUG
return
!
JS
:
:
detail
:
:
InitWithFailureDiagnostic
(
true
)
;
#
else
return
!
JS
:
:
detail
:
:
InitWithFailureDiagnostic
(
false
)
;
#
endif
}
inline
const
char
*
JS_InitWithFailureDiagnostic
(
void
)
{
#
ifdef
DEBUG
return
JS
:
:
detail
:
:
InitWithFailureDiagnostic
(
true
)
;
#
else
return
JS
:
:
detail
:
:
InitWithFailureDiagnostic
(
false
)
;
#
endif
}
inline
bool
JS_IsInitialized
(
void
)
{
return
JS
:
:
detail
:
:
libraryInitState
>
=
JS
:
:
detail
:
:
InitState
:
:
Running
;
}
extern
JS_PUBLIC_API
(
void
)
JS_ShutDown
(
void
)
;
#
endif
