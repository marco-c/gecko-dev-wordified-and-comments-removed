#
ifndef
js_Stream_h
#
define
js_Stream_h
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
JS
{
typedef
void
(
*
RequestReadableStreamDataCallback
)
(
JSContext
*
cx
HandleObject
stream
void
*
underlyingSource
uint8_t
flags
size_t
desiredSize
)
;
typedef
void
(
*
WriteIntoReadRequestBufferCallback
)
(
JSContext
*
cx
HandleObject
stream
void
*
underlyingSource
uint8_t
flags
void
*
buffer
size_t
length
size_t
*
bytesWritten
)
;
typedef
Value
(
*
CancelReadableStreamCallback
)
(
JSContext
*
cx
HandleObject
stream
void
*
underlyingSource
uint8_t
flags
HandleValue
reason
)
;
typedef
void
(
*
ReadableStreamClosedCallback
)
(
JSContext
*
cx
HandleObject
stream
void
*
underlyingSource
uint8_t
flags
)
;
typedef
void
(
*
ReadableStreamErroredCallback
)
(
JSContext
*
cx
HandleObject
stream
void
*
underlyingSource
uint8_t
flags
HandleValue
reason
)
;
typedef
void
(
*
ReadableStreamFinalizeCallback
)
(
void
*
underlyingSource
uint8_t
flags
)
;
extern
JS_PUBLIC_API
void
SetReadableStreamCallbacks
(
JSContext
*
cx
RequestReadableStreamDataCallback
dataRequestCallback
WriteIntoReadRequestBufferCallback
writeIntoReadRequestCallback
CancelReadableStreamCallback
cancelCallback
ReadableStreamClosedCallback
closedCallback
ReadableStreamErroredCallback
erroredCallback
ReadableStreamFinalizeCallback
finalizeCallback
)
;
extern
JS_PUBLIC_API
bool
HasReadableStreamCallbacks
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSObject
*
NewReadableDefaultStreamObject
(
JSContext
*
cx
HandleObject
underlyingSource
=
nullptr
HandleFunction
size
=
nullptr
double
highWaterMark
=
1
HandleObject
proto
=
nullptr
)
;
extern
JS_PUBLIC_API
JSObject
*
NewReadableExternalSourceStreamObject
(
JSContext
*
cx
void
*
underlyingSource
uint8_t
flags
=
0
HandleObject
proto
=
nullptr
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamGetEmbeddingFlags
(
JSContext
*
cx
HandleObject
stream
uint8_t
*
flags
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamGetExternalUnderlyingSource
(
JSContext
*
cx
HandleObject
stream
void
*
*
source
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamReleaseExternalUnderlyingSource
(
JSContext
*
cx
HandleObject
stream
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamUpdateDataAvailableFromSource
(
JSContext
*
cx
HandleObject
stream
uint32_t
availableData
)
;
extern
JS_PUBLIC_API
bool
IsReadableStream
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
IsReadableStreamReader
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
bool
IsReadableStreamDefaultReader
(
JSObject
*
obj
)
;
enum
class
ReadableStreamMode
{
Default
Byte
ExternalSource
}
;
extern
JS_PUBLIC_API
bool
ReadableStreamGetMode
(
JSContext
*
cx
HandleObject
stream
ReadableStreamMode
*
mode
)
;
enum
class
ReadableStreamReaderMode
{
Default
}
;
extern
JS_PUBLIC_API
bool
ReadableStreamIsReadable
(
JSContext
*
cx
HandleObject
stream
bool
*
result
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamIsLocked
(
JSContext
*
cx
HandleObject
stream
bool
*
result
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamIsDisturbed
(
JSContext
*
cx
HandleObject
stream
bool
*
result
)
;
extern
JS_PUBLIC_API
JSObject
*
ReadableStreamCancel
(
JSContext
*
cx
HandleObject
stream
HandleValue
reason
)
;
extern
JS_PUBLIC_API
JSObject
*
ReadableStreamGetReader
(
JSContext
*
cx
HandleObject
stream
ReadableStreamReaderMode
mode
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamTee
(
JSContext
*
cx
HandleObject
stream
MutableHandleObject
branch1Stream
MutableHandleObject
branch2Stream
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamGetDesiredSize
(
JSContext
*
cx
JSObject
*
stream
bool
*
hasValue
double
*
value
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamClose
(
JSContext
*
cx
HandleObject
stream
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamReaderIsClosed
(
JSContext
*
cx
HandleObject
reader
bool
*
result
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamEnqueue
(
JSContext
*
cx
HandleObject
stream
HandleValue
chunk
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamError
(
JSContext
*
cx
HandleObject
stream
HandleValue
error
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamReaderCancel
(
JSContext
*
cx
HandleObject
reader
HandleValue
reason
)
;
extern
JS_PUBLIC_API
bool
ReadableStreamReaderReleaseLock
(
JSContext
*
cx
HandleObject
reader
)
;
extern
JS_PUBLIC_API
JSObject
*
ReadableStreamDefaultReaderRead
(
JSContext
*
cx
HandleObject
reader
)
;
}
#
endif
