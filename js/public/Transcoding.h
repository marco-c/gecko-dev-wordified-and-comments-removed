#
ifndef
js_Transcoding_h
#
define
js_Transcoding_h
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
RootingAPI
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSFunction
;
class
JS_PUBLIC_API
JSObject
;
class
JS_PUBLIC_API
JSScript
;
namespace
JS
{
using
TranscodeBuffer
=
mozilla
:
:
Vector
<
uint8_t
>
;
using
TranscodeRange
=
mozilla
:
:
Range
<
uint8_t
>
;
struct
TranscodeSource
final
{
TranscodeSource
(
const
TranscodeRange
&
range_
const
char
*
file
uint32_t
line
)
:
range
(
range_
)
filename
(
file
)
lineno
(
line
)
{
}
const
TranscodeRange
range
;
const
char
*
filename
;
const
uint32_t
lineno
;
}
;
using
TranscodeSources
=
mozilla
:
:
Vector
<
TranscodeSource
>
;
enum
TranscodeResult
:
uint8_t
{
TranscodeResult_Ok
=
0
TranscodeResult_Failure
=
0x10
TranscodeResult_Failure_BadBuildId
=
TranscodeResult_Failure
|
0x1
TranscodeResult_Failure_RunOnceNotSupported
=
TranscodeResult_Failure
|
0x2
TranscodeResult_Failure_AsmJSNotSupported
=
TranscodeResult_Failure
|
0x3
TranscodeResult_Failure_BadDecode
=
TranscodeResult_Failure
|
0x4
TranscodeResult_Failure_WrongCompileOption
=
TranscodeResult_Failure
|
0x5
TranscodeResult_Failure_NotInterpretedFun
=
TranscodeResult_Failure
|
0x6
TranscodeResult_Throw
=
0x20
}
;
extern
JS_PUBLIC_API
TranscodeResult
EncodeScript
(
JSContext
*
cx
TranscodeBuffer
&
buffer
Handle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
TranscodeResult
EncodeInterpretedFunction
(
JSContext
*
cx
TranscodeBuffer
&
buffer
Handle
<
JSObject
*
>
funobj
)
;
extern
JS_PUBLIC_API
TranscodeResult
DecodeScript
(
JSContext
*
cx
TranscodeBuffer
&
buffer
MutableHandle
<
JSScript
*
>
scriptp
size_t
cursorIndex
=
0
)
;
extern
JS_PUBLIC_API
TranscodeResult
DecodeScript
(
JSContext
*
cx
const
TranscodeRange
&
range
MutableHandle
<
JSScript
*
>
scriptp
)
;
extern
JS_PUBLIC_API
TranscodeResult
DecodeInterpretedFunction
(
JSContext
*
cx
TranscodeBuffer
&
buffer
MutableHandle
<
JSFunction
*
>
funp
size_t
cursorIndex
=
0
)
;
extern
JS_PUBLIC_API
bool
StartIncrementalEncoding
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
bool
FinishIncrementalEncoding
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
TranscodeBuffer
&
buffer
)
;
}
#
endif
