#
ifndef
js_CompileOptions_h
#
define
js_CompileOptions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
JS
{
enum
class
AsmJSOption
:
uint8_t
{
Enabled
DisabledByAsmJSPref
DisabledByLinker
DisabledByNoWasmCompiler
DisabledByDebugger
}
;
#
define
FOREACH_DELAZIFICATION_STRATEGY
(
_
)
\
_
(
OnDemandOnly
)
\
\
/
*
\
*
Compare
the
stencil
produced
by
concurrent
depth
first
delazification
and
\
*
on
-
demand
delazification
.
Any
differences
would
crash
SpiderMonkey
with
\
*
an
assertion
.
\
*
/
\
_
(
CheckConcurrentWithOnDemand
)
\
\
/
*
\
*
Delazifiy
functions
in
a
depth
first
traversal
of
the
functions
.
\
*
/
\
_
(
ConcurrentDepthFirst
)
\
\
/
*
\
*
Delazifiy
functions
strating
with
the
largest
function
first
.
\
*
/
\
_
(
ConcurrentLargeFirst
)
\
\
/
*
\
*
Parse
everything
eagerly
from
the
first
parse
.
\
*
\
*
NOTE
:
Either
the
Realm
configuration
or
specialized
VM
operating
modes
\
*
may
disallow
syntax
-
parse
altogether
.
These
conditions
are
checked
in
the
\
*
CompileOptions
constructor
.
\
*
/
\
_
(
ParseEverythingEagerly
)
enum
class
DelazificationOption
:
uint8_t
{
#
define
_ENUM_ENTRY
(
Name
)
Name
FOREACH_DELAZIFICATION_STRATEGY
(
_ENUM_ENTRY
)
#
undef
_ENUM_ENTRY
}
;
class
JS_PUBLIC_API
InstantiateOptions
;
class
JS_PUBLIC_API
DecodeOptions
;
class
JS_PUBLIC_API
TransitiveCompileOptions
{
friend
class
JS_PUBLIC_API
DecodeOptions
;
protected
:
const
char
*
filename_
=
nullptr
;
const
char
*
introducerFilename_
=
nullptr
;
const
char16_t
*
sourceMapURL_
=
nullptr
;
bool
mutedErrors_
=
false
;
bool
forceStrictMode_
=
false
;
bool
sourcePragmas_
=
true
;
bool
skipFilenameValidation_
=
false
;
bool
hideScriptFromDebugger_
=
false
;
bool
deferDebugMetadata_
=
false
;
DelazificationOption
eagerDelazificationStrategy_
=
DelazificationOption
:
:
OnDemandOnly
;
friend
class
JS_PUBLIC_API
InstantiateOptions
;
public
:
bool
selfHostingMode
=
false
;
AsmJSOption
asmJSOption
=
AsmJSOption
:
:
DisabledByAsmJSPref
;
bool
throwOnAsmJSValidationFailureOption
=
false
;
bool
forceAsync
=
false
;
bool
discardSource
=
false
;
bool
sourceIsLazy
=
false
;
bool
allowHTMLComments
=
true
;
bool
nonSyntacticScope
=
false
;
bool
topLevelAwait
=
true
;
bool
importAssertions
=
false
;
bool
borrowBuffer
=
false
;
bool
usePinnedBytecode
=
false
;
bool
allocateInstantiationStorage
=
false
;
bool
deoptimizeModuleGlobalVars
=
false
;
const
char
*
introductionType
=
nullptr
;
unsigned
introductionLineno
=
0
;
uint32_t
introductionOffset
=
0
;
bool
hasIntroductionInfo
=
false
;
protected
:
TransitiveCompileOptions
(
)
=
default
;
void
copyPODTransitiveOptions
(
const
TransitiveCompileOptions
&
rhs
)
;
bool
isEagerDelazificationEqualTo
(
DelazificationOption
val
)
const
{
return
eagerDelazificationStrategy
(
)
=
=
val
;
}
template
<
DelazificationOption
.
.
.
Values
>
bool
eagerDelazificationIsOneOf
(
)
const
{
return
(
isEagerDelazificationEqualTo
(
Values
)
|
|
.
.
.
)
;
}
public
:
bool
mutedErrors
(
)
const
{
return
mutedErrors_
;
}
bool
forceFullParse
(
)
const
{
return
eagerDelazificationIsOneOf
<
DelazificationOption
:
:
ParseEverythingEagerly
>
(
)
;
}
bool
forceStrictMode
(
)
const
{
return
forceStrictMode_
;
}
bool
consumeDelazificationCache
(
)
const
{
return
eagerDelazificationIsOneOf
<
DelazificationOption
:
:
ConcurrentDepthFirst
DelazificationOption
:
:
ConcurrentLargeFirst
>
(
)
;
}
bool
populateDelazificationCache
(
)
const
{
return
eagerDelazificationIsOneOf
<
DelazificationOption
:
:
CheckConcurrentWithOnDemand
DelazificationOption
:
:
ConcurrentDepthFirst
DelazificationOption
:
:
ConcurrentLargeFirst
>
(
)
;
}
bool
waitForDelazificationCache
(
)
const
{
return
eagerDelazificationIsOneOf
<
DelazificationOption
:
:
CheckConcurrentWithOnDemand
>
(
)
;
}
bool
checkDelazificationCache
(
)
const
{
return
eagerDelazificationIsOneOf
<
DelazificationOption
:
:
CheckConcurrentWithOnDemand
>
(
)
;
}
DelazificationOption
eagerDelazificationStrategy
(
)
const
{
return
eagerDelazificationStrategy_
;
}
bool
sourcePragmas
(
)
const
{
return
sourcePragmas_
;
}
const
char
*
filename
(
)
const
{
return
filename_
;
}
const
char
*
introducerFilename
(
)
const
{
return
introducerFilename_
;
}
const
char16_t
*
sourceMapURL
(
)
const
{
return
sourceMapURL_
;
}
TransitiveCompileOptions
(
const
TransitiveCompileOptions
&
)
=
delete
;
TransitiveCompileOptions
&
operator
=
(
const
TransitiveCompileOptions
&
)
=
delete
;
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_JITSPEW
)
template
<
typename
Printer
>
void
dumpWith
(
Printer
&
print
)
const
{
#
define
PrintFields_
(
Name
)
print
(
#
Name
Name
)
PrintFields_
(
filename_
)
;
PrintFields_
(
introducerFilename_
)
;
PrintFields_
(
sourceMapURL_
)
;
PrintFields_
(
mutedErrors_
)
;
PrintFields_
(
forceStrictMode_
)
;
PrintFields_
(
sourcePragmas_
)
;
PrintFields_
(
skipFilenameValidation_
)
;
PrintFields_
(
hideScriptFromDebugger_
)
;
PrintFields_
(
deferDebugMetadata_
)
;
PrintFields_
(
eagerDelazificationStrategy_
)
;
PrintFields_
(
selfHostingMode
)
;
PrintFields_
(
asmJSOption
)
;
PrintFields_
(
throwOnAsmJSValidationFailureOption
)
;
PrintFields_
(
forceAsync
)
;
PrintFields_
(
discardSource
)
;
PrintFields_
(
sourceIsLazy
)
;
PrintFields_
(
allowHTMLComments
)
;
PrintFields_
(
nonSyntacticScope
)
;
PrintFields_
(
topLevelAwait
)
;
PrintFields_
(
importAssertions
)
;
PrintFields_
(
borrowBuffer
)
;
PrintFields_
(
usePinnedBytecode
)
;
PrintFields_
(
allocateInstantiationStorage
)
;
PrintFields_
(
deoptimizeModuleGlobalVars
)
;
PrintFields_
(
introductionType
)
;
PrintFields_
(
introductionLineno
)
;
PrintFields_
(
introductionOffset
)
;
PrintFields_
(
hasIntroductionInfo
)
;
#
undef
PrintFields_
}
#
endif
}
;
class
JS_PUBLIC_API
ReadOnlyCompileOptions
:
public
TransitiveCompileOptions
{
public
:
unsigned
lineno
=
1
;
unsigned
column
=
0
;
unsigned
scriptSourceOffset
=
0
;
bool
isRunOnce
=
false
;
bool
noScriptRval
=
false
;
protected
:
ReadOnlyCompileOptions
(
)
=
default
;
void
copyPODNonTransitiveOptions
(
const
ReadOnlyCompileOptions
&
rhs
)
;
ReadOnlyCompileOptions
(
const
ReadOnlyCompileOptions
&
)
=
delete
;
ReadOnlyCompileOptions
&
operator
=
(
const
ReadOnlyCompileOptions
&
)
=
delete
;
public
:
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_JITSPEW
)
template
<
typename
Printer
>
void
dumpWith
(
Printer
&
print
)
const
{
this
-
>
TransitiveCompileOptions
:
:
dumpWith
(
print
)
;
#
define
PrintFields_
(
Name
)
print
(
#
Name
Name
)
PrintFields_
(
lineno
)
;
PrintFields_
(
column
)
;
PrintFields_
(
scriptSourceOffset
)
;
PrintFields_
(
isRunOnce
)
;
PrintFields_
(
noScriptRval
)
;
#
undef
PrintFields_
}
#
endif
}
;
class
JS_PUBLIC_API
OwningCompileOptions
final
:
public
ReadOnlyCompileOptions
{
public
:
explicit
OwningCompileOptions
(
JSContext
*
cx
)
;
~
OwningCompileOptions
(
)
;
bool
copy
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
rhs
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
OwningCompileOptions
&
setIsRunOnce
(
bool
once
)
{
isRunOnce
=
once
;
return
*
this
;
}
OwningCompileOptions
&
setForceStrictMode
(
)
{
forceStrictMode_
=
true
;
return
*
this
;
}
OwningCompileOptions
&
setModule
(
)
{
setForceStrictMode
(
)
;
setIsRunOnce
(
true
)
;
allowHTMLComments
=
false
;
return
*
this
;
}
private
:
void
release
(
)
;
OwningCompileOptions
(
const
OwningCompileOptions
&
)
=
delete
;
OwningCompileOptions
&
operator
=
(
const
OwningCompileOptions
&
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
JS_PUBLIC_API
CompileOptions
final
:
public
ReadOnlyCompileOptions
{
public
:
explicit
CompileOptions
(
JSContext
*
cx
)
;
CompileOptions
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
rhs
)
:
ReadOnlyCompileOptions
(
)
{
copyPODNonTransitiveOptions
(
rhs
)
;
copyPODTransitiveOptions
(
rhs
)
;
filename_
=
rhs
.
filename
(
)
;
introducerFilename_
=
rhs
.
introducerFilename
(
)
;
sourceMapURL_
=
rhs
.
sourceMapURL
(
)
;
}
CompileOptions
&
setFile
(
const
char
*
f
)
{
filename_
=
f
;
return
*
this
;
}
CompileOptions
&
setLine
(
unsigned
l
)
{
lineno
=
l
;
return
*
this
;
}
CompileOptions
&
setFileAndLine
(
const
char
*
f
unsigned
l
)
{
filename_
=
f
;
lineno
=
l
;
return
*
this
;
}
CompileOptions
&
setSourceMapURL
(
const
char16_t
*
s
)
{
sourceMapURL_
=
s
;
return
*
this
;
}
CompileOptions
&
setMutedErrors
(
bool
mute
)
{
mutedErrors_
=
mute
;
return
*
this
;
}
CompileOptions
&
setColumn
(
unsigned
c
)
{
column
=
c
;
return
*
this
;
}
CompileOptions
&
setScriptSourceOffset
(
unsigned
o
)
{
scriptSourceOffset
=
o
;
return
*
this
;
}
CompileOptions
&
setIsRunOnce
(
bool
once
)
{
isRunOnce
=
once
;
return
*
this
;
}
CompileOptions
&
setNoScriptRval
(
bool
nsr
)
{
noScriptRval
=
nsr
;
return
*
this
;
}
CompileOptions
&
setSkipFilenameValidation
(
bool
b
)
{
skipFilenameValidation_
=
b
;
return
*
this
;
}
CompileOptions
&
setSelfHostingMode
(
bool
shm
)
{
selfHostingMode
=
shm
;
return
*
this
;
}
CompileOptions
&
setSourceIsLazy
(
bool
l
)
{
sourceIsLazy
=
l
;
return
*
this
;
}
CompileOptions
&
setNonSyntacticScope
(
bool
n
)
{
nonSyntacticScope
=
n
;
return
*
this
;
}
CompileOptions
&
setIntroductionType
(
const
char
*
t
)
{
introductionType
=
t
;
return
*
this
;
}
CompileOptions
&
setDeferDebugMetadata
(
bool
v
=
true
)
{
deferDebugMetadata_
=
v
;
return
*
this
;
}
CompileOptions
&
setHideScriptFromDebugger
(
bool
v
=
true
)
{
hideScriptFromDebugger_
=
v
;
return
*
this
;
}
CompileOptions
&
setIntroductionInfo
(
const
char
*
introducerFn
const
char
*
intro
unsigned
line
uint32_t
offset
)
{
introducerFilename_
=
introducerFn
;
introductionType
=
intro
;
introductionLineno
=
line
;
introductionOffset
=
offset
;
hasIntroductionInfo
=
true
;
return
*
this
;
}
CompileOptions
&
setIntroductionInfoToCaller
(
JSContext
*
cx
const
char
*
introductionType
JS
:
:
MutableHandle
<
JSScript
*
>
introductionScript
)
;
CompileOptions
&
setDiscardSource
(
)
{
discardSource
=
true
;
return
*
this
;
}
CompileOptions
&
setForceFullParse
(
)
{
eagerDelazificationStrategy_
=
DelazificationOption
:
:
ParseEverythingEagerly
;
return
*
this
;
}
CompileOptions
&
setEagerDelazificationStrategy
(
DelazificationOption
strategy
)
{
MOZ_RELEASE_ASSERT
(
eagerDelazificationStrategy_
!
=
DelazificationOption
:
:
ParseEverythingEagerly
|
|
strategy
=
=
DelazificationOption
:
:
ParseEverythingEagerly
)
;
eagerDelazificationStrategy_
=
strategy
;
return
*
this
;
}
CompileOptions
&
setForceStrictMode
(
)
{
forceStrictMode_
=
true
;
return
*
this
;
}
CompileOptions
&
setModule
(
)
{
setForceStrictMode
(
)
;
setIsRunOnce
(
true
)
;
allowHTMLComments
=
false
;
return
*
this
;
}
CompileOptions
(
const
CompileOptions
&
rhs
)
=
delete
;
CompileOptions
&
operator
=
(
const
CompileOptions
&
rhs
)
=
delete
;
}
;
class
JS_PUBLIC_API
InstantiateOptions
{
public
:
bool
skipFilenameValidation
=
false
;
bool
hideScriptFromDebugger
=
false
;
bool
deferDebugMetadata
=
false
;
InstantiateOptions
(
)
=
default
;
explicit
InstantiateOptions
(
const
ReadOnlyCompileOptions
&
options
)
:
skipFilenameValidation
(
options
.
skipFilenameValidation_
)
hideScriptFromDebugger
(
options
.
hideScriptFromDebugger_
)
deferDebugMetadata
(
options
.
deferDebugMetadata_
)
{
}
void
copyTo
(
CompileOptions
&
options
)
const
{
options
.
skipFilenameValidation_
=
skipFilenameValidation
;
options
.
hideScriptFromDebugger_
=
hideScriptFromDebugger
;
options
.
deferDebugMetadata_
=
deferDebugMetadata
;
}
bool
hideFromNewScriptInitial
(
)
const
{
return
deferDebugMetadata
|
|
hideScriptFromDebugger
;
}
#
ifdef
DEBUG
void
assertDefault
(
)
const
{
MOZ_ASSERT
(
skipFilenameValidation
=
=
false
)
;
MOZ_ASSERT
(
hideScriptFromDebugger
=
=
false
)
;
MOZ_ASSERT
(
deferDebugMetadata
=
=
false
)
;
}
#
endif
}
;
class
JS_PUBLIC_API
DecodeOptions
{
public
:
bool
borrowBuffer
=
false
;
bool
usePinnedBytecode
=
false
;
bool
allocateInstantiationStorage
=
false
;
bool
forceAsync
=
false
;
const
char
*
introducerFilename
=
nullptr
;
const
char
*
introductionType
=
nullptr
;
unsigned
introductionLineno
=
0
;
uint32_t
introductionOffset
=
0
;
DecodeOptions
(
)
=
default
;
explicit
DecodeOptions
(
const
ReadOnlyCompileOptions
&
options
)
:
borrowBuffer
(
options
.
borrowBuffer
)
usePinnedBytecode
(
options
.
usePinnedBytecode
)
allocateInstantiationStorage
(
options
.
allocateInstantiationStorage
)
forceAsync
(
options
.
forceAsync
)
introducerFilename
(
options
.
introducerFilename
(
)
)
introductionType
(
options
.
introductionType
)
introductionLineno
(
options
.
introductionLineno
)
introductionOffset
(
options
.
introductionOffset
)
{
}
void
copyTo
(
CompileOptions
&
options
)
const
{
options
.
borrowBuffer
=
borrowBuffer
;
options
.
usePinnedBytecode
=
usePinnedBytecode
;
options
.
allocateInstantiationStorage
=
allocateInstantiationStorage
;
options
.
forceAsync
=
forceAsync
;
options
.
introducerFilename_
=
introducerFilename
;
options
.
introductionType
=
introductionType
;
options
.
introductionLineno
=
introductionLineno
;
options
.
introductionOffset
=
introductionOffset
;
}
}
;
}
#
endif
