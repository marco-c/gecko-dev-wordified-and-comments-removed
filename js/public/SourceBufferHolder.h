#
ifndef
js_SourceBufferHolder_h
#
define
js_SourceBufferHolder_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
"
js
/
Utility
.
h
"
namespace
JS
{
class
SourceBufferHolder
final
{
private
:
const
char16_t
*
data_
;
size_t
length_
;
bool
ownsChars_
;
private
:
void
fixEmptyBuffer
(
)
{
static
const
char16_t
NullChar_
=
0
;
if
(
!
data_
)
{
data_
=
&
NullChar_
;
length_
=
0
;
ownsChars_
=
false
;
}
}
public
:
enum
Ownership
{
NoOwnership
GiveOwnership
}
;
SourceBufferHolder
(
const
char16_t
*
data
size_t
dataLength
Ownership
ownership
)
:
data_
(
data
)
length_
(
dataLength
)
ownsChars_
(
ownership
=
=
GiveOwnership
)
{
fixEmptyBuffer
(
)
;
}
SourceBufferHolder
(
UniqueTwoByteChars
&
&
data
size_t
dataLength
)
:
data_
(
data
.
release
(
)
)
length_
(
dataLength
)
ownsChars_
(
true
)
{
fixEmptyBuffer
(
)
;
}
SourceBufferHolder
(
SourceBufferHolder
&
&
other
)
:
data_
(
other
.
data_
)
length_
(
other
.
length_
)
ownsChars_
(
other
.
ownsChars_
)
{
other
.
data_
=
nullptr
;
other
.
length_
=
0
;
other
.
ownsChars_
=
false
;
}
~
SourceBufferHolder
(
)
{
if
(
ownsChars_
)
{
js_free
(
const_cast
<
char16_t
*
>
(
data_
)
)
;
}
}
const
char16_t
*
get
(
)
const
{
return
data_
;
}
size_t
length
(
)
const
{
return
length_
;
}
bool
ownsChars
(
)
const
{
return
ownsChars_
;
}
char16_t
*
take
(
)
{
MOZ_ASSERT
(
ownsChars_
)
;
ownsChars_
=
false
;
return
const_cast
<
char16_t
*
>
(
data_
)
;
}
private
:
SourceBufferHolder
(
SourceBufferHolder
&
)
=
delete
;
SourceBufferHolder
&
operator
=
(
SourceBufferHolder
&
)
=
delete
;
}
;
}
#
endif
