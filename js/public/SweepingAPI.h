#
ifndef
js_SweepingAPI_h
#
define
js_SweepingAPI_h
#
include
"
js
/
HeapAPI
.
h
"
namespace
JS
{
namespace
detail
{
class
WeakCacheBase
;
}
namespace
shadow
{
JS_PUBLIC_API
(
void
)
RegisterWeakCache
(
JS
:
:
Zone
*
zone
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
JS_PUBLIC_API
(
void
)
RegisterWeakCache
(
JSRuntime
*
rt
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
}
namespace
detail
{
class
WeakCacheBase
:
public
mozilla
:
:
LinkedListElement
<
WeakCacheBase
>
{
WeakCacheBase
(
)
=
delete
;
WeakCacheBase
(
const
WeakCacheBase
&
)
=
delete
;
public
:
WeakCacheBase
(
Zone
*
zone
)
{
shadow
:
:
RegisterWeakCache
(
zone
this
)
;
}
WeakCacheBase
(
JSRuntime
*
rt
)
{
shadow
:
:
RegisterWeakCache
(
rt
this
)
;
}
WeakCacheBase
(
WeakCacheBase
&
&
other
)
=
default
;
virtual
~
WeakCacheBase
(
)
{
}
virtual
void
sweep
(
)
=
0
;
}
;
}
template
<
typename
T
>
class
WeakCache
:
protected
detail
:
:
WeakCacheBase
public
js
:
:
MutableWrappedPtrOperations
<
T
WeakCache
<
T
>
>
{
T
cache
;
public
:
using
Type
=
T
;
template
<
typename
.
.
.
Args
>
WeakCache
(
Zone
*
zone
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
zone
)
cache
(
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
.
.
.
Args
>
WeakCache
(
JSRuntime
*
rt
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
rt
)
cache
(
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
{
}
const
T
&
get
(
)
const
{
return
cache
;
}
T
&
get
(
)
{
return
cache
;
}
void
sweep
(
)
override
{
GCPolicy
<
T
>
:
:
sweep
(
&
cache
)
;
}
}
;
}
#
endif
