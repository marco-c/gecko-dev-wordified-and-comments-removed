#
ifndef
js_SweepingAPI_h
#
define
js_SweepingAPI_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
GCAnnotations
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
namespace
js
{
namespace
gc
{
JS_PUBLIC_API
void
LockStoreBuffer
(
JSRuntime
*
runtime
)
;
JS_PUBLIC_API
void
UnlockStoreBuffer
(
JSRuntime
*
runtim
)
;
class
AutoLockStoreBuffer
{
JSRuntime
*
runtime
;
public
:
explicit
AutoLockStoreBuffer
(
JSRuntime
*
runtime
)
:
runtime
(
runtime
)
{
LockStoreBuffer
(
runtime
)
;
}
~
AutoLockStoreBuffer
(
)
{
UnlockStoreBuffer
(
runtime
)
;
}
}
;
}
}
namespace
JS
{
namespace
detail
{
class
WeakCacheBase
;
}
namespace
shadow
{
JS_PUBLIC_API
void
RegisterWeakCache
(
JS
:
:
Zone
*
zone
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
JS_PUBLIC_API
void
RegisterWeakCache
(
JSRuntime
*
rt
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
}
namespace
detail
{
class
WeakCacheBase
:
public
mozilla
:
:
LinkedListElement
<
WeakCacheBase
>
{
WeakCacheBase
(
)
=
delete
;
explicit
WeakCacheBase
(
const
WeakCacheBase
&
)
=
delete
;
public
:
enum
NeedsLock
:
bool
{
LockStoreBuffer
=
true
DontLockStoreBuffer
=
false
}
;
explicit
WeakCacheBase
(
JS
:
:
Zone
*
zone
)
{
shadow
:
:
RegisterWeakCache
(
zone
this
)
;
}
explicit
WeakCacheBase
(
JSRuntime
*
rt
)
{
shadow
:
:
RegisterWeakCache
(
rt
this
)
;
}
WeakCacheBase
(
WeakCacheBase
&
&
other
)
=
default
;
virtual
~
WeakCacheBase
(
)
=
default
;
virtual
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needLock
)
=
0
;
virtual
bool
empty
(
)
=
0
;
virtual
bool
setIncrementalBarrierTracer
(
JSTracer
*
trc
)
{
return
false
;
}
virtual
bool
needsIncrementalBarrier
(
)
const
{
return
false
;
}
}
;
}
template
<
typename
T
>
class
WeakCache
:
protected
detail
:
:
WeakCacheBase
public
js
:
:
MutableWrappedPtrOperations
<
T
WeakCache
<
T
>
>
{
T
cache
;
public
:
using
Type
=
T
;
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
Zone
*
zone
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
zone
)
cache
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
JSRuntime
*
rt
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
rt
)
cache
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
const
T
&
get
(
)
const
{
return
cache
;
}
T
&
get
(
)
{
return
cache
;
}
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needsLock
)
override
{
mozilla
:
:
Maybe
<
js
:
:
gc
:
:
AutoLockStoreBuffer
>
lock
;
if
(
needsLock
)
{
lock
.
emplace
(
trc
-
>
runtime
(
)
)
;
}
GCPolicy
<
T
>
:
:
traceWeak
(
trc
&
cache
)
;
return
0
;
}
bool
empty
(
)
override
{
return
cache
.
empty
(
)
;
}
}
JS_HAZ_NON_GC_POINTER
;
}
#
endif
