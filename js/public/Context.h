#
ifndef
js_Context_h
#
define
js_Context_h
#
include
"
jspubtd
.
h
"
extern
JS_PUBLIC_API
JSContext
*
JS_NewContext
(
uint32_t
maxbytes
JSRuntime
*
parentRuntime
=
nullptr
)
;
extern
JS_PUBLIC_API
void
JS_DestroyContext
(
JSContext
*
cx
)
;
JS_PUBLIC_API
void
*
JS_GetContextPrivate
(
JSContext
*
cx
)
;
JS_PUBLIC_API
void
JS_SetContextPrivate
(
JSContext
*
cx
void
*
data
)
;
extern
JS_PUBLIC_API
JSRuntime
*
JS_GetParentRuntime
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
JSRuntime
*
JS_GetRuntime
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
void
JS_SetFutexCanWait
(
JSContext
*
cx
)
;
namespace
js
{
void
AssertHeapIsIdle
(
)
;
}
namespace
JS
{
JS_PUBLIC_API
bool
InitSelfHostedCode
(
JSContext
*
cx
)
;
JS_PUBLIC_API
void
AssertObjectBelongsToCurrentThread
(
JSObject
*
obj
)
;
using
FilenameValidationCallback
=
bool
(
*
)
(
const
char
*
filename
bool
isSystemRealm
)
;
JS_PUBLIC_API
void
SetFilenameValidationCallback
(
FilenameValidationCallback
cb
)
;
}
#
endif
