#
ifndef
js_LocaleSensitive_h
#
define
js_LocaleSensitive_h
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Utility
.
h
"
struct
JSContext
;
struct
JSRuntime
;
class
JSString
;
namespace
JS
{
union
Value
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_SetDefaultLocale
(
JSRuntime
*
rt
const
char
*
locale
)
;
extern
JS_PUBLIC_API
(
JS
:
:
UniqueChars
)
JS_GetDefaultLocale
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ResetDefaultLocale
(
JSRuntime
*
rt
)
;
using
JSLocaleToUpperCase
=
bool
(
*
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
src
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
using
JSLocaleToLowerCase
=
bool
(
*
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
src
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
using
JSLocaleCompare
=
bool
(
*
)
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
src1
JS
:
:
Handle
<
JSString
*
>
src2
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
using
JSLocaleToUnicode
=
bool
(
*
)
(
JSContext
*
cx
const
char
*
src
JS
:
:
MutableHandle
<
JS
:
:
Value
>
rval
)
;
struct
JSLocaleCallbacks
{
JSLocaleToUpperCase
localeToUpperCase
;
JSLocaleToLowerCase
localeToLowerCase
;
JSLocaleCompare
localeCompare
;
JSLocaleToUnicode
localeToUnicode
;
}
;
extern
JS_PUBLIC_API
(
void
)
JS_SetLocaleCallbacks
(
JSRuntime
*
rt
const
JSLocaleCallbacks
*
callbacks
)
;
extern
JS_PUBLIC_API
(
const
JSLocaleCallbacks
*
)
JS_GetLocaleCallbacks
(
JSRuntime
*
rt
)
;
#
endif
