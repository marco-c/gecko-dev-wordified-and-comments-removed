#
ifndef
js_Date_h
#
define
js_Date_h
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
JS
{
extern
JS_PUBLIC_API
void
ResetTimeZone
(
)
;
class
ClippedTime
;
inline
ClippedTime
TimeClip
(
double
time
)
;
class
ClippedTime
{
double
t
=
mozilla
:
:
UnspecifiedNaN
<
double
>
(
)
;
explicit
ClippedTime
(
double
time
)
:
t
(
time
)
{
}
friend
ClippedTime
TimeClip
(
double
time
)
;
public
:
ClippedTime
(
)
=
default
;
static
ClippedTime
invalid
(
)
{
return
ClippedTime
(
)
;
}
double
toDouble
(
)
const
{
return
t
;
}
bool
isValid
(
)
const
{
return
!
std
:
:
isnan
(
t
)
;
}
}
;
inline
ClippedTime
TimeClip
(
double
time
)
{
const
double
MaxTimeMagnitude
=
8
.
64e15
;
if
(
!
std
:
:
isfinite
(
time
)
|
|
mozilla
:
:
Abs
(
time
)
>
MaxTimeMagnitude
)
{
return
ClippedTime
(
mozilla
:
:
UnspecifiedNaN
<
double
>
(
)
)
;
}
return
ClippedTime
(
ToInteger
(
time
)
)
;
}
inline
Value
TimeValue
(
ClippedTime
time
)
{
return
CanonicalizedDoubleValue
(
time
.
toDouble
(
)
)
;
}
extern
JS_PUBLIC_API
JSObject
*
NewDateObject
(
JSContext
*
cx
ClippedTime
time
)
;
extern
JS_PUBLIC_API
JSObject
*
NewDateObject
(
JSContext
*
cx
int
year
int
mon
int
mday
int
hour
int
min
int
sec
)
;
extern
JS_PUBLIC_API
bool
ObjectIsDate
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
*
isDate
)
;
JS_PUBLIC_API
double
MakeDate
(
double
year
unsigned
month
unsigned
day
)
;
JS_PUBLIC_API
double
MakeDate
(
double
year
unsigned
month
unsigned
day
double
time
)
;
JS_PUBLIC_API
double
YearFromTime
(
double
time
)
;
JS_PUBLIC_API
double
MonthFromTime
(
double
time
)
;
JS_PUBLIC_API
double
DayFromTime
(
double
time
)
;
JS_PUBLIC_API
double
DayFromYear
(
double
year
)
;
JS_PUBLIC_API
double
DayWithinYear
(
double
time
double
year
)
;
using
ReduceMicrosecondTimePrecisionCallback
=
double
(
*
)
(
double
bool
JSContext
*
)
;
JS_PUBLIC_API
void
SetReduceMicrosecondTimePrecisionCallback
(
ReduceMicrosecondTimePrecisionCallback
callback
)
;
JS_PUBLIC_API
void
SetTimeResolutionUsec
(
uint32_t
resolution
bool
jitter
)
;
}
#
endif
