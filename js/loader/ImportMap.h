#
ifndef
js_loader_ImportMap_h
#
define
js_loader_ImportMap_h
#
include
<
functional
>
#
include
<
map
>
#
include
"
js
/
SourceText
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
struct
JSContext
;
class
nsIScriptElement
;
class
nsIURI
;
namespace
JS
:
:
loader
{
class
LoadedScript
;
class
ScriptLoaderInterface
;
class
ScriptLoadRequest
;
class
ReportWarningHelper
{
public
:
ReportWarningHelper
(
ScriptLoaderInterface
*
aLoader
ScriptLoadRequest
*
aRequest
)
:
mLoader
(
aLoader
)
mRequest
(
aRequest
)
{
}
void
Report
(
const
char
*
aMessageName
const
nsTArray
<
nsString
>
&
aParams
=
nsTArray
<
nsString
>
(
)
)
const
;
private
:
RefPtr
<
ScriptLoaderInterface
>
mLoader
;
ScriptLoadRequest
*
mRequest
;
}
;
using
SpecifierMap
=
std
:
:
map
<
nsString
nsCOMPtr
<
nsIURI
>
std
:
:
greater
<
nsString
>
>
;
using
ScopeMap
=
std
:
:
map
<
nsCString
mozilla
:
:
UniquePtr
<
SpecifierMap
>
std
:
:
greater
<
nsCString
>
>
;
class
ImportMap
{
public
:
ImportMap
(
mozilla
:
:
UniquePtr
<
SpecifierMap
>
aImports
mozilla
:
:
UniquePtr
<
ScopeMap
>
aScopes
)
:
mImports
(
std
:
:
move
(
aImports
)
)
mScopes
(
std
:
:
move
(
aScopes
)
)
{
}
static
mozilla
:
:
UniquePtr
<
ImportMap
>
ParseString
(
JSContext
*
aCx
JS
:
:
SourceText
<
char16_t
>
&
aInput
nsIURI
*
aBaseURL
const
ReportWarningHelper
&
aWarning
)
;
static
mozilla
:
:
LazyLogModule
gImportMapLog
;
private
:
mozilla
:
:
UniquePtr
<
SpecifierMap
>
mImports
;
mozilla
:
:
UniquePtr
<
ScopeMap
>
mScopes
;
}
;
}
#
endif
