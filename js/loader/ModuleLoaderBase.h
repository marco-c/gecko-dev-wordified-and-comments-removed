#
ifndef
js_loader_ModuleLoaderBase_h
#
define
js_loader_ModuleLoaderBase_h
#
include
"
LoadedScript
.
h
"
#
include
"
ScriptLoadRequest
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
JSExecutionContext
.
h
"
#
include
"
mozilla
/
MaybeOneOf
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
ModuleMapKey
.
h
"
class
nsIURI
;
namespace
mozilla
{
class
LazyLogModule
;
union
Utf8Unit
;
}
namespace
JS
{
class
CompileOptions
;
template
<
typename
UnitT
>
class
SourceText
;
namespace
loader
{
class
ModuleLoaderBase
;
class
ModuleLoadRequest
;
class
ModuleScript
;
class
ScriptLoaderInterface
:
public
nsISupports
{
public
:
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
using
ScriptKind
=
JS
:
:
loader
:
:
ScriptKind
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ScriptLoadRequestList
=
JS
:
:
loader
:
:
ScriptLoadRequestList
;
using
ModuleLoadRequest
=
JS
:
:
loader
:
:
ModuleLoadRequest
;
virtual
nsIURI
*
GetBaseURI
(
)
const
=
0
;
virtual
already_AddRefed
<
nsIGlobalObject
>
GetGlobalForRequest
(
ScriptLoadRequest
*
aRequest
)
=
0
;
virtual
void
ReportErrorToConsole
(
ScriptLoadRequest
*
aRequest
nsresult
aResult
)
const
=
0
;
virtual
nsresult
FillCompileOptionsForRequest
(
JSContext
*
cx
ScriptLoadRequest
*
aRequest
JS
:
:
Handle
<
JSObject
*
>
aScopeChain
JS
:
:
CompileOptions
*
aOptions
JS
:
:
MutableHandle
<
JSScript
*
>
aIntroductionScript
)
=
0
;
virtual
void
MaybePrepareModuleForBytecodeEncodingBeforeExecute
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
)
=
0
;
virtual
nsresult
MaybePrepareModuleForBytecodeEncodingAfterExecute
(
ModuleLoadRequest
*
aRequest
nsresult
aRv
)
=
0
;
virtual
void
MaybeTriggerBytecodeEncoding
(
)
=
0
;
}
;
class
ModuleLoaderBase
:
public
nsISupports
{
private
:
using
GenericNonExclusivePromise
=
mozilla
:
:
GenericNonExclusivePromise
;
using
GenericPromise
=
mozilla
:
:
GenericPromise
;
nsRefPtrHashtable
<
ModuleMapKey
GenericNonExclusivePromise
:
:
Private
>
mFetchingModules
;
nsRefPtrHashtable
<
ModuleMapKey
ModuleScript
>
mFetchedModules
;
protected
:
virtual
~
ModuleLoaderBase
(
)
;
RefPtr
<
ScriptLoaderInterface
>
mLoader
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ModuleLoaderBase
)
explicit
ModuleLoaderBase
(
ScriptLoaderInterface
*
aLoader
)
;
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ModuleLoadRequest
=
JS
:
:
loader
:
:
ModuleLoadRequest
;
ScriptLoadRequestList
mDynamicImportRequests
;
using
MaybeSourceText
=
mozilla
:
:
MaybeOneOf
<
JS
:
:
SourceText
<
char16_t
>
JS
:
:
SourceText
<
Utf8Unit
>
>
;
virtual
void
EnsureModuleHooksInitialized
(
)
{
MOZ_ASSERT
(
false
"
You
must
override
EnsureModuleHooksInitialized
"
)
;
}
virtual
nsresult
StartModuleLoad
(
ScriptLoadRequest
*
aRequest
)
=
0
;
virtual
nsresult
RestartModuleLoad
(
ScriptLoadRequest
*
aRequest
)
=
0
;
virtual
void
ProcessLoadedModuleTree
(
ModuleLoadRequest
*
aRequest
)
=
0
;
virtual
nsresult
CompileOrFinishModuleScript
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
=
0
;
virtual
already_AddRefed
<
ModuleLoadRequest
>
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
=
0
;
nsresult
EvaluateModule
(
ScriptLoadRequest
*
aRequest
)
;
nsresult
EvaluateModule
(
nsIGlobalObject
*
aGlobalObject
ScriptLoadRequest
*
aRequest
)
;
void
SetModuleFetchStarted
(
ModuleLoadRequest
*
aRequest
)
;
void
SetModuleFetchFinishedAndResumeWaitingRequests
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
bool
ModuleMapContainsURL
(
nsIURI
*
aURL
nsIGlobalObject
*
aGlobal
)
const
;
bool
IsModuleFetching
(
nsIURI
*
aURL
nsIGlobalObject
*
aGlobal
)
const
;
RefPtr
<
GenericNonExclusivePromise
>
WaitForModuleFetch
(
nsIURI
*
aURL
nsIGlobalObject
*
aGlobal
)
;
ModuleScript
*
GetFetchedModule
(
nsIURI
*
aURL
nsIGlobalObject
*
aGlobal
)
const
;
JS
:
:
Value
FindFirstParseError
(
ModuleLoadRequest
*
aRequest
)
;
bool
InstantiateModuleTree
(
ModuleLoadRequest
*
aRequest
)
;
static
nsresult
InitDebuggerDataForModuleTree
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
)
;
static
nsresult
ResolveRequestedModules
(
ModuleLoadRequest
*
aRequest
nsCOMArray
<
nsIURI
>
*
aUrlsOut
)
;
static
nsresult
HandleResolveFailure
(
JSContext
*
aCx
LoadedScript
*
aScript
const
nsAString
&
aSpecifier
uint32_t
aLineNumber
uint32_t
aColumnNumber
JS
:
:
MutableHandle
<
JS
:
:
Value
>
errorOut
)
;
static
already_AddRefed
<
nsIURI
>
ResolveModuleSpecifier
(
ScriptLoaderInterface
*
loader
LoadedScript
*
aScript
const
nsAString
&
aSpecifier
)
;
void
StartFetchingModuleDependencies
(
ModuleLoadRequest
*
aRequest
)
;
RefPtr
<
GenericPromise
>
StartFetchingModuleAndDependencies
(
ModuleLoadRequest
*
aParent
nsIURI
*
aURI
)
;
void
StartDynamicImport
(
ModuleLoadRequest
*
aRequest
)
;
static
void
FinishDynamicImportAndReject
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
static
void
FinishDynamicImport
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
nsresult
aResult
JS
:
:
Handle
<
JSObject
*
>
aEvaluationPromise
)
;
nsresult
CreateModuleScript
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
ProcessFetchedModuleSource
(
ModuleLoadRequest
*
aRequest
)
;
void
ProcessDynamicImport
(
ModuleLoadRequest
*
aRequest
)
;
void
CancelAndClearDynamicImports
(
)
;
public
:
static
mozilla
:
:
LazyLogModule
gCspPRLog
;
static
mozilla
:
:
LazyLogModule
gModuleLoaderBaseLog
;
}
;
}
}
#
endif
