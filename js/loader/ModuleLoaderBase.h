#
ifndef
js_loader_ModuleLoaderBase_h
#
define
js_loader_ModuleLoaderBase_h
#
include
"
LoadedScript
.
h
"
#
include
"
ScriptLoadRequest
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Modules
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
dom
/
JSExecutionContext
.
h
"
#
include
"
mozilla
/
MaybeOneOf
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
nsIURI
;
namespace
mozilla
{
class
LazyLogModule
;
union
Utf8Unit
;
}
namespace
JS
{
class
CompileOptions
;
template
<
typename
UnitT
>
class
SourceText
;
namespace
loader
{
class
ModuleLoaderBase
;
class
ModuleLoadRequest
;
class
ModuleScript
;
class
ScriptLoaderInterface
:
public
nsISupports
{
public
:
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
using
ScriptKind
=
JS
:
:
loader
:
:
ScriptKind
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ScriptLoadRequestList
=
JS
:
:
loader
:
:
ScriptLoadRequestList
;
using
ModuleLoadRequest
=
JS
:
:
loader
:
:
ModuleLoadRequest
;
virtual
nsIURI
*
GetBaseURI
(
)
const
=
0
;
virtual
void
ReportErrorToConsole
(
ScriptLoadRequest
*
aRequest
nsresult
aResult
)
const
=
0
;
virtual
nsresult
FillCompileOptionsForRequest
(
JSContext
*
cx
ScriptLoadRequest
*
aRequest
JS
:
:
CompileOptions
*
aOptions
JS
:
:
MutableHandle
<
JSScript
*
>
aIntroductionScript
)
=
0
;
virtual
void
MaybePrepareModuleForBytecodeEncodingBeforeExecute
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
)
=
0
;
virtual
nsresult
MaybePrepareModuleForBytecodeEncodingAfterExecute
(
ModuleLoadRequest
*
aRequest
nsresult
aRv
)
=
0
;
virtual
void
MaybeTriggerBytecodeEncoding
(
)
=
0
;
}
;
class
ModuleLoaderBase
:
public
nsISupports
{
private
:
using
GenericNonExclusivePromise
=
mozilla
:
:
GenericNonExclusivePromise
;
using
GenericPromise
=
mozilla
:
:
GenericPromise
;
nsRefPtrHashtable
<
nsURIHashKey
GenericNonExclusivePromise
:
:
Private
>
mFetchingModules
;
nsRefPtrHashtable
<
nsURIHashKey
ModuleScript
>
mFetchedModules
;
ScriptLoadRequestList
mDynamicImportRequests
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobalObject
;
protected
:
RefPtr
<
ScriptLoaderInterface
>
mLoader
;
virtual
~
ModuleLoaderBase
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
ModuleLoaderBase
)
explicit
ModuleLoaderBase
(
ScriptLoaderInterface
*
aLoader
nsIGlobalObject
*
aGlobalObject
)
;
using
LoadedScript
=
JS
:
:
loader
:
:
LoadedScript
;
using
ScriptFetchOptions
=
JS
:
:
loader
:
:
ScriptFetchOptions
;
using
ScriptLoadRequest
=
JS
:
:
loader
:
:
ScriptLoadRequest
;
using
ModuleLoadRequest
=
JS
:
:
loader
:
:
ModuleLoadRequest
;
using
MaybeSourceText
=
mozilla
:
:
MaybeOneOf
<
JS
:
:
SourceText
<
char16_t
>
JS
:
:
SourceText
<
Utf8Unit
>
>
;
private
:
virtual
already_AddRefed
<
ModuleLoadRequest
>
CreateStaticImport
(
nsIURI
*
aURI
ModuleLoadRequest
*
aParent
)
=
0
;
virtual
already_AddRefed
<
ModuleLoadRequest
>
CreateDynamicImport
(
JSContext
*
aCx
nsIURI
*
aURI
LoadedScript
*
aMaybeActiveScript
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
=
0
;
virtual
bool
CanStartLoad
(
ModuleLoadRequest
*
aRequest
nsresult
*
aRvOut
)
=
0
;
virtual
nsresult
StartFetch
(
ModuleLoadRequest
*
aRequest
)
=
0
;
virtual
nsresult
CompileOrFinishModuleScript
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
=
0
;
virtual
void
OnModuleLoadComplete
(
ModuleLoadRequest
*
aRequest
)
=
0
;
public
:
ScriptLoaderInterface
*
GetScriptLoaderInterface
(
)
const
{
return
mLoader
;
}
nsIGlobalObject
*
GetGlobalObject
(
)
const
{
return
mGlobalObject
;
}
bool
HasPendingDynamicImports
(
)
const
;
void
CancelDynamicImport
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
#
ifdef
DEBUG
bool
HasDynamicImport
(
const
ModuleLoadRequest
*
aRequest
)
const
;
#
endif
nsresult
StartModuleLoad
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
RestartModuleLoad
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
OnFetchComplete
(
ModuleLoadRequest
*
aRequest
nsresult
aRv
)
;
bool
InstantiateModuleTree
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
EvaluateModule
(
ModuleLoadRequest
*
aRequest
)
;
void
StartDynamicImport
(
ModuleLoadRequest
*
aRequest
)
;
void
ProcessDynamicImport
(
ModuleLoadRequest
*
aRequest
)
;
void
CancelAndClearDynamicImports
(
)
;
private
:
friend
class
JS
:
:
loader
:
:
ModuleLoadRequest
;
static
ModuleLoaderBase
*
GetCurrentModuleLoader
(
JSContext
*
aCx
)
;
static
LoadedScript
*
GetLoadedScriptOrNull
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
)
;
static
void
EnsureModuleHooksInitialized
(
)
;
static
void
DynamicImportPrefChangedCallback
(
const
char
*
aPrefName
void
*
aClosure
)
;
static
JSObject
*
HostResolveImportedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSObject
*
>
aModuleRequest
)
;
static
bool
HostPopulateImportMeta
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSObject
*
>
aMetaObject
)
;
static
bool
HostImportModuleDynamically
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aReferencingPrivate
JS
:
:
Handle
<
JSObject
*
>
aModuleRequest
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
;
static
bool
HostGetSupportedImportAssertions
(
JSContext
*
aCx
JS
:
:
ImportAssertionVector
&
aValues
)
;
already_AddRefed
<
nsIURI
>
ResolveModuleSpecifier
(
LoadedScript
*
aScript
const
nsAString
&
aSpecifier
)
;
static
nsresult
HandleResolveFailure
(
JSContext
*
aCx
LoadedScript
*
aScript
const
nsAString
&
aSpecifier
uint32_t
aLineNumber
uint32_t
aColumnNumber
JS
:
:
MutableHandle
<
JS
:
:
Value
>
errorOut
)
;
enum
class
RestartRequest
{
No
Yes
}
;
nsresult
StartOrRestartModuleLoad
(
ModuleLoadRequest
*
aRequest
RestartRequest
aRestart
)
;
bool
ModuleMapContainsURL
(
nsIURI
*
aURL
)
const
;
bool
IsModuleFetching
(
nsIURI
*
aURL
)
const
;
RefPtr
<
GenericNonExclusivePromise
>
WaitForModuleFetch
(
nsIURI
*
aURL
)
;
void
SetModuleFetchStarted
(
ModuleLoadRequest
*
aRequest
)
;
ModuleScript
*
GetFetchedModule
(
nsIURI
*
aURL
)
const
;
JS
:
:
Value
FindFirstParseError
(
ModuleLoadRequest
*
aRequest
)
;
static
nsresult
InitDebuggerDataForModuleTree
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
)
;
static
nsresult
ResolveRequestedModules
(
ModuleLoadRequest
*
aRequest
nsCOMArray
<
nsIURI
>
*
aUrlsOut
)
;
void
SetModuleFetchFinishedAndResumeWaitingRequests
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
void
StartFetchingModuleDependencies
(
ModuleLoadRequest
*
aRequest
)
;
RefPtr
<
GenericPromise
>
StartFetchingModuleAndDependencies
(
ModuleLoadRequest
*
aParent
nsIURI
*
aURI
)
;
static
void
FinishDynamicImportAndReject
(
ModuleLoadRequest
*
aRequest
nsresult
aResult
)
;
static
void
FinishDynamicImport
(
JSContext
*
aCx
ModuleLoadRequest
*
aRequest
nsresult
aResult
JS
:
:
Handle
<
JSObject
*
>
aEvaluationPromise
)
;
void
RemoveDynamicImport
(
ModuleLoadRequest
*
aRequest
)
;
nsresult
CreateModuleScript
(
ModuleLoadRequest
*
aRequest
)
;
public
:
static
mozilla
:
:
LazyLogModule
gCspPRLog
;
static
mozilla
:
:
LazyLogModule
gModuleLoaderBaseLog
;
}
;
}
}
#
endif
