#
include
"
ModuleLoadRequest
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
dom
/
ScriptLoadContext
.
h
"
#
include
"
LoadedScript
.
h
"
#
include
"
LoadContextBase
.
h
"
#
include
"
ModuleLoaderBase
.
h
"
namespace
JS
:
:
loader
{
#
undef
LOG
#
define
LOG
(
args
)
\
MOZ_LOG
(
ModuleLoaderBase
:
:
gModuleLoaderBaseLog
mozilla
:
:
LogLevel
:
:
Debug
\
args
)
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ModuleLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mLoader
mRootModule
mModuleScript
)
tmp
-
>
ClearImport
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mLoader
mRootModule
mModuleScript
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
ModuleLoadRequest
ScriptLoadRequest
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mReferrerScript
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mModuleRequestObj
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mPayload
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
ModuleLoadRequest
:
:
ModuleLoadRequest
(
nsIURI
*
aURI
ModuleType
aModuleType
mozilla
:
:
dom
:
:
ReferrerPolicy
aReferrerPolicy
ScriptFetchOptions
*
aFetchOptions
const
mozilla
:
:
dom
:
:
SRIMetadata
&
aIntegrity
nsIURI
*
aReferrer
LoadContextBase
*
aContext
Kind
aKind
ModuleLoaderBase
*
aLoader
ModuleLoadRequest
*
aRootModule
)
:
ScriptLoadRequest
(
ScriptKind
:
:
eModule
aURI
aReferrerPolicy
aFetchOptions
aIntegrity
aReferrer
aContext
)
mKind
(
aKind
)
mModuleType
(
aModuleType
)
mLoader
(
aLoader
)
mRootModule
(
aRootModule
)
{
MOZ_ASSERT
(
mLoader
)
;
}
nsIGlobalObject
*
ModuleLoadRequest
:
:
GetGlobalObject
(
)
{
return
mLoader
-
>
GetGlobalObject
(
)
;
}
bool
ModuleLoadRequest
:
:
IsErrored
(
)
const
{
return
!
mModuleScript
|
|
mModuleScript
-
>
HasParseError
(
)
;
}
void
ModuleLoadRequest
:
:
Cancel
(
)
{
if
(
IsCanceled
(
)
)
{
return
;
}
if
(
IsFinished
(
)
)
{
return
;
}
ScriptLoadRequest
:
:
Cancel
(
)
;
mModuleScript
=
nullptr
;
mReferrerScript
=
nullptr
;
mModuleRequestObj
=
nullptr
;
}
void
ModuleLoadRequest
:
:
SetReady
(
)
{
MOZ_ASSERT
(
!
IsFinished
(
)
)
;
ScriptLoadRequest
:
:
SetReady
(
)
;
}
void
ModuleLoadRequest
:
:
ModuleLoaded
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
loaded
"
this
)
)
;
if
(
IsCanceled
(
)
)
{
return
;
}
MOZ_ASSERT
(
IsFetching
(
)
|
|
IsPendingFetchingError
(
)
)
;
mModuleScript
=
mLoader
-
>
GetFetchedModule
(
ModuleMapKey
(
mURI
mModuleType
)
)
;
}
void
ModuleLoadRequest
:
:
LoadFailed
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
load
failed
"
this
)
)
;
if
(
IsCanceled
(
)
)
{
return
;
}
MOZ_ASSERT
(
IsFetching
(
)
|
|
IsPendingFetchingError
(
)
)
;
MOZ_ASSERT
(
!
mModuleScript
)
;
Cancel
(
)
;
LoadFinished
(
)
;
}
void
ModuleLoadRequest
:
:
ModuleErrored
(
)
{
LOG
(
(
"
ScriptLoadRequest
(
%
p
)
:
Module
errored
"
this
)
)
;
if
(
IsCanceled
(
)
)
{
return
;
}
MOZ_ASSERT
(
!
IsFinished
(
)
)
;
mozilla
:
:
DebugOnly
<
bool
>
hasRethrow
=
mModuleScript
&
&
mModuleScript
-
>
HasErrorToRethrow
(
)
;
MOZ_ASSERT
(
IsErrored
(
)
|
|
hasRethrow
)
;
if
(
IsFinished
(
)
)
{
return
;
}
SetReady
(
)
;
LoadFinished
(
)
;
}
void
ModuleLoadRequest
:
:
LoadFinished
(
)
{
RefPtr
<
ModuleLoadRequest
>
request
(
this
)
;
if
(
IsDynamicImport
(
)
)
{
mLoader
-
>
RemoveDynamicImport
(
request
)
;
}
mLoader
-
>
OnModuleLoadComplete
(
request
)
;
}
void
ModuleLoadRequest
:
:
SetImport
(
Handle
<
JSScript
*
>
aReferrerScript
Handle
<
JSObject
*
>
aModuleRequestObj
Handle
<
Value
>
aPayload
)
{
MOZ_ASSERT
(
mPayload
.
isUndefined
(
)
)
;
mReferrerScript
=
aReferrerScript
;
mModuleRequestObj
=
aModuleRequestObj
;
mPayload
=
aPayload
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
void
ModuleLoadRequest
:
:
ClearImport
(
)
{
mReferrerScript
=
nullptr
;
mModuleRequestObj
=
nullptr
;
mPayload
=
UndefinedValue
(
)
;
}
}
