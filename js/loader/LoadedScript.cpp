#
include
"
LoadedScript
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
Modules
.
h
"
namespace
JS
:
:
loader
{
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
LoadedScript
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_CLASS
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mFetchOptions
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mBaseURL
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mFetchOptions
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
LoadedScript
)
LoadedScript
:
:
LoadedScript
(
ScriptKind
aKind
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
)
:
mKind
(
aKind
)
mFetchOptions
(
aFetchOptions
)
mBaseURL
(
aBaseURL
)
{
MOZ_ASSERT
(
mFetchOptions
)
;
MOZ_ASSERT
(
mBaseURL
)
;
}
LoadedScript
:
:
~
LoadedScript
(
)
{
mozilla
:
:
DropJSObjects
(
this
)
;
}
void
LoadedScript
:
:
AssociateWithScript
(
JSScript
*
aScript
)
{
MOZ_ASSERT
(
JS
:
:
GetScriptPrivate
(
aScript
)
.
isUndefined
(
)
)
;
JS
:
:
SetScriptPrivate
(
aScript
JS
:
:
PrivateValue
(
this
)
)
;
}
inline
void
CheckModuleScriptPrivate
(
LoadedScript
*
script
const
JS
:
:
Value
&
aPrivate
)
{
#
ifdef
DEBUG
if
(
script
-
>
IsModuleScript
(
)
)
{
JSObject
*
module
=
script
-
>
AsModuleScript
(
)
-
>
mModuleRecord
.
unbarrieredGet
(
)
;
MOZ_ASSERT_IF
(
module
JS
:
:
GetModulePrivate
(
module
)
=
=
aPrivate
)
;
}
#
endif
}
void
HostAddRefTopLevelScript
(
const
JS
:
:
Value
&
aPrivate
)
{
auto
script
=
static_cast
<
LoadedScript
*
>
(
aPrivate
.
toPrivate
(
)
)
;
CheckModuleScriptPrivate
(
script
aPrivate
)
;
script
-
>
AddRef
(
)
;
}
void
HostReleaseTopLevelScript
(
const
JS
:
:
Value
&
aPrivate
)
{
auto
script
=
static_cast
<
LoadedScript
*
>
(
aPrivate
.
toPrivate
(
)
)
;
CheckModuleScriptPrivate
(
script
aPrivate
)
;
script
-
>
Release
(
)
;
}
EventScript
:
:
EventScript
(
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
)
:
LoadedScript
(
ScriptKind
:
:
eEvent
aFetchOptions
aBaseURL
)
{
}
ClassicScript
:
:
ClassicScript
(
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
)
:
LoadedScript
(
ScriptKind
:
:
eClassic
aFetchOptions
aBaseURL
)
{
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
ModuleScript
)
NS_INTERFACE_MAP_END_INHERITING
(
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
ModuleScript
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
ModuleScript
LoadedScript
)
tmp
-
>
UnlinkModuleRecord
(
)
;
tmp
-
>
mParseError
.
setUndefined
(
)
;
tmp
-
>
mErrorToRethrow
.
setUndefined
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
ModuleScript
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
ModuleScript
LoadedScript
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mModuleRecord
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mParseError
)
NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK
(
mErrorToRethrow
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_ADDREF_INHERITED
(
ModuleScript
LoadedScript
)
NS_IMPL_RELEASE_INHERITED
(
ModuleScript
LoadedScript
)
ModuleScript
:
:
ModuleScript
(
ScriptFetchOptions
*
aFetchOptions
nsIURI
*
aBaseURL
)
:
LoadedScript
(
ScriptKind
:
:
eModule
aFetchOptions
aBaseURL
)
mDebuggerDataInitialized
(
false
)
{
MOZ_ASSERT
(
!
ModuleRecord
(
)
)
;
MOZ_ASSERT
(
!
HasParseError
(
)
)
;
MOZ_ASSERT
(
!
HasErrorToRethrow
(
)
)
;
}
void
ModuleScript
:
:
Shutdown
(
)
{
if
(
mModuleRecord
)
{
JS
:
:
ClearModuleEnvironment
(
mModuleRecord
)
;
}
UnlinkModuleRecord
(
)
;
}
void
ModuleScript
:
:
UnlinkModuleRecord
(
)
{
if
(
mModuleRecord
)
{
JSObject
*
module
=
mModuleRecord
.
unbarrieredGet
(
)
;
MOZ_ASSERT
(
JS
:
:
GetModulePrivate
(
module
)
.
toPrivate
(
)
=
=
this
)
;
JS
:
:
ClearModulePrivate
(
module
)
;
mModuleRecord
=
nullptr
;
}
}
ModuleScript
:
:
~
ModuleScript
(
)
{
UnlinkModuleRecord
(
)
;
}
void
ModuleScript
:
:
SetModuleRecord
(
JS
:
:
Handle
<
JSObject
*
>
aModuleRecord
)
{
MOZ_ASSERT
(
!
mModuleRecord
)
;
MOZ_ASSERT_IF
(
IsModuleScript
(
)
!
AsModuleScript
(
)
-
>
HasParseError
(
)
)
;
MOZ_ASSERT_IF
(
IsModuleScript
(
)
!
AsModuleScript
(
)
-
>
HasErrorToRethrow
(
)
)
;
mModuleRecord
=
aModuleRecord
;
MOZ_ASSERT
(
JS
:
:
GetModulePrivate
(
mModuleRecord
)
.
isUndefined
(
)
)
;
JS
:
:
SetModulePrivate
(
mModuleRecord
JS
:
:
PrivateValue
(
this
)
)
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
void
ModuleScript
:
:
SetParseError
(
const
JS
:
:
Value
&
aError
)
{
MOZ_ASSERT
(
!
aError
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
HasParseError
(
)
)
;
MOZ_ASSERT
(
!
HasErrorToRethrow
(
)
)
;
UnlinkModuleRecord
(
)
;
mParseError
=
aError
;
mozilla
:
:
HoldJSObjects
(
this
)
;
}
void
ModuleScript
:
:
SetErrorToRethrow
(
const
JS
:
:
Value
&
aError
)
{
MOZ_ASSERT
(
!
aError
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
ModuleRecord
(
)
|
|
HasParseError
(
)
)
;
mErrorToRethrow
=
aError
;
}
void
ModuleScript
:
:
SetDebuggerDataInitialized
(
)
{
MOZ_ASSERT
(
ModuleRecord
(
)
)
;
MOZ_ASSERT
(
!
mDebuggerDataInitialized
)
;
mDebuggerDataInitialized
=
true
;
}
}
