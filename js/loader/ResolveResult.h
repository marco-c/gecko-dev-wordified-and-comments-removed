#
ifndef
js_loader_ResolveResult_h
#
define
js_loader_ResolveResult_h
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
nsIURI
.
h
"
namespace
JS
:
:
loader
{
enum
class
ResolveError
:
uint8_t
{
Failure
FailureMayBeBare
BlockedByNullEntry
BlockedByAfterPrefix
BlockedByBacktrackingPrefix
InvalidBareSpecifier
Length
}
;
struct
ResolveErrorInfo
{
static
const
char
*
GetString
(
ResolveError
aError
)
{
switch
(
aError
)
{
case
ResolveError
:
:
Failure
:
return
"
ModuleResolveFailureNoWarn
"
;
case
ResolveError
:
:
FailureMayBeBare
:
return
"
ModuleResolveFailureWarnRelative
"
;
case
ResolveError
:
:
BlockedByNullEntry
:
return
"
ImportMapResolutionBlockedByNullEntry
"
;
case
ResolveError
:
:
BlockedByAfterPrefix
:
return
"
ImportMapResolutionBlockedByAfterPrefix
"
;
case
ResolveError
:
:
BlockedByBacktrackingPrefix
:
return
"
ImportMapResolutionBlockedByBacktrackingPrefix
"
;
case
ResolveError
:
:
InvalidBareSpecifier
:
return
"
ImportMapResolveInvalidBareSpecifierWarnRelative
"
;
default
:
MOZ_CRASH
(
"
Unexpected
ResolveError
value
"
)
;
}
}
}
;
using
ResolveResult
=
mozilla
:
:
Result
<
mozilla
:
:
NotNull
<
nsCOMPtr
<
nsIURI
>
>
ResolveError
>
;
}
#
endif
