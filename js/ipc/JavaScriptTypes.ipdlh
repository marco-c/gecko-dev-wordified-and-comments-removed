include
DOMTypes
;
using
struct
mozilla
:
:
void_t
from
"
ipc
/
IPCMessageUtils
.
h
"
;
namespace
mozilla
{
namespace
jsipc
{
struct
JSIID
{
uint32_t
m0
;
uint16_t
m1
;
uint16_t
m2
;
uint8_t
m3_0
;
uint8_t
m3_1
;
uint8_t
m3_2
;
uint8_t
m3_3
;
uint8_t
m3_4
;
uint8_t
m3_5
;
uint8_t
m3_6
;
uint8_t
m3_7
;
}
;
struct
LocalObject
{
uint64_t
serializedId
;
}
;
struct
RemoteObject
{
uint64_t
serializedId
;
bool
isCallable
;
bool
isConstructor
;
bool
isDOMObject
;
}
;
union
ObjectVariant
{
LocalObject
;
RemoteObject
;
}
;
struct
WellKnownSymbol
{
uint32_t
which
;
}
;
struct
RegisteredSymbol
{
nsString
key
;
}
;
union
SymbolVariant
{
WellKnownSymbol
;
RegisteredSymbol
;
}
;
struct
UndefinedVariant
{
}
;
struct
NullVariant
{
}
;
union
ObjectOrNullVariant
{
ObjectVariant
;
NullVariant
;
}
;
union
JSVariant
{
UndefinedVariant
;
NullVariant
;
ObjectVariant
;
SymbolVariant
;
nsString
;
double
;
bool
;
JSIID
;
}
;
union
JSIDVariant
{
SymbolVariant
;
nsString
;
int32_t
;
}
;
struct
ReturnSuccess
{
}
;
struct
ReturnDeadCPOW
{
}
;
struct
ReturnException
{
JSVariant
exn
;
}
;
struct
ReturnObjectOpResult
{
uint32_t
code
;
}
;
union
ReturnStatus
{
ReturnSuccess
;
ReturnDeadCPOW
;
ReturnException
;
ReturnObjectOpResult
;
}
;
union
JSParam
{
void_t
;
JSVariant
;
}
;
union
GetterSetter
{
uint64_t
;
ObjectVariant
;
}
;
struct
PPropertyDescriptor
{
ObjectOrNullVariant
obj
;
uint32_t
attrs
;
JSVariant
value
;
GetterSetter
getter
;
GetterSetter
setter
;
}
;
struct
CpowEntry
{
nsString
name
;
JSVariant
value
;
}
;
}
}
