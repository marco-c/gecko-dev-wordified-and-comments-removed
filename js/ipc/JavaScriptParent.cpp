#
include
"
JavaScriptParent
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsAutoPtr
.
h
"
using
namespace
js
;
using
namespace
JS
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
jsipc
;
using
namespace
mozilla
:
:
dom
;
static
void
TraceParent
(
JSTracer
*
trc
void
*
data
)
{
static_cast
<
JavaScriptParent
*
>
(
data
)
-
>
trace
(
trc
)
;
}
JavaScriptParent
:
:
JavaScriptParent
(
)
:
savedNextCPOWNumber_
(
1
)
{
JS_AddExtraGCRootsTracer
(
danger
:
:
GetJSContext
(
)
TraceParent
this
)
;
}
JavaScriptParent
:
:
~
JavaScriptParent
(
)
{
JS_RemoveExtraGCRootsTracer
(
danger
:
:
GetJSContext
(
)
TraceParent
this
)
;
}
static
bool
ForbidUnsafeBrowserCPOWs
(
)
{
return
StaticPrefs
:
:
dom_ipc_cpows_forbid_unsafe_from_browser
(
)
;
}
bool
JavaScriptParent
:
:
allowMessage
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
)
;
if
(
!
xpc
:
:
IsInAutomation
(
)
)
{
JS_ReportErrorASCII
(
cx
"
CPOW
usage
forbidden
"
)
;
return
false
;
}
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
bool
isSafe
=
channel
-
>
IsInTransaction
(
)
;
if
(
isSafe
)
{
return
true
;
}
nsIGlobalObject
*
global
=
dom
:
:
GetIncumbentGlobal
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
jsGlobal
(
cx
global
?
global
-
>
GetGlobalJSObject
(
)
:
nullptr
)
;
if
(
jsGlobal
)
{
JSAutoRealm
ar
(
cx
jsGlobal
)
;
if
(
!
xpc
:
:
CompartmentPrivate
:
:
Get
(
jsGlobal
)
-
>
allowCPOWs
&
&
ForbidUnsafeBrowserCPOWs
(
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
BROWSER_SHIM_USAGE_BLOCKED
1
)
;
JS_ReportErrorASCII
(
cx
"
unsafe
CPOW
usage
forbidden
"
)
;
return
false
;
}
}
static
bool
disableUnsafeCPOWWarnings
=
PR_GetEnv
(
"
DISABLE_UNSAFE_CPOW_WARNINGS
"
)
;
if
(
!
disableUnsafeCPOWWarnings
)
{
nsCOMPtr
<
nsIConsoleService
>
console
(
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
)
;
if
(
console
)
{
nsAutoString
filename
;
uint32_t
lineno
=
0
column
=
0
;
nsJSUtils
:
:
GetCallingLocation
(
cx
filename
&
lineno
&
column
)
;
nsCOMPtr
<
nsIScriptError
>
error
(
do_CreateInstance
(
NS_SCRIPTERROR_CONTRACTID
)
)
;
error
-
>
Init
(
NS_LITERAL_STRING
(
"
unsafe
/
forbidden
CPOW
usage
"
)
filename
EmptyString
(
)
lineno
column
nsIScriptError
:
:
warningFlag
"
chrome
javascript
"
false
true
)
;
console
-
>
LogMessage
(
error
)
;
}
else
{
NS_WARNING
(
"
Unsafe
synchronous
IPC
message
"
)
;
}
}
return
true
;
}
void
JavaScriptParent
:
:
trace
(
JSTracer
*
trc
)
{
objects_
.
trace
(
trc
)
;
unwaivedObjectIds_
.
trace
(
trc
)
;
waivedObjectIds_
.
trace
(
trc
)
;
}
JSObject
*
JavaScriptParent
:
:
scopeForTargetObjects
(
)
{
return
xpc
:
:
UnprivilegedJunkScope
(
)
;
}
void
JavaScriptParent
:
:
afterProcessTask
(
)
{
if
(
savedNextCPOWNumber_
=
=
nextCPOWNumber_
)
{
return
;
}
savedNextCPOWNumber_
=
nextCPOWNumber_
;
MOZ_ASSERT
(
nextCPOWNumber_
>
0
)
;
if
(
active
(
)
)
{
Unused
<
<
SendDropTemporaryStrongReferences
(
nextCPOWNumber_
-
1
)
;
}
}
PJavaScriptParent
*
mozilla
:
:
jsipc
:
:
NewJavaScriptParent
(
)
{
return
new
JavaScriptParent
(
)
;
}
void
mozilla
:
:
jsipc
:
:
ReleaseJavaScriptParent
(
PJavaScriptParent
*
parent
)
{
static_cast
<
JavaScriptParent
*
>
(
parent
)
-
>
decref
(
)
;
}
void
mozilla
:
:
jsipc
:
:
AfterProcessTask
(
)
{
for
(
auto
*
cp
:
ContentParent
:
:
AllProcesses
(
ContentParent
:
:
eLive
)
)
{
if
(
PJavaScriptParent
*
p
=
LoneManagedOrNullAsserts
(
cp
-
>
ManagedPJavaScriptParent
(
)
)
)
{
static_cast
<
JavaScriptParent
*
>
(
p
)
-
>
afterProcessTask
(
)
;
}
}
}
