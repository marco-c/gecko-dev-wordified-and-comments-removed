#
ifndef
jscompartment_h
#
define
jscompartment_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
mozilla
/
XorShift128PlusRNG
.
h
"
#
include
"
asmjs
/
WasmCompartment
.
h
"
#
include
"
builtin
/
RegExp
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
NurseryAwareHashMap
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
PIC
.
h
"
#
include
"
vm
/
SavedStacks
.
h
"
#
include
"
vm
/
Time
.
h
"
namespace
js
{
namespace
jit
{
class
JitCompartment
;
}
namespace
gc
{
template
<
typename
Node
typename
Derived
>
class
ComponentFinder
;
}
class
LexicalEnvironmentObject
;
class
ScriptSourceObject
;
struct
NativeIterator
;
class
DtoaCache
{
double
d
;
int
base
;
JSFlatString
*
s
;
public
:
DtoaCache
(
)
:
s
(
nullptr
)
{
}
void
purge
(
)
{
s
=
nullptr
;
}
JSFlatString
*
lookup
(
int
base
double
d
)
{
return
this
-
>
s
&
&
base
=
=
this
-
>
base
&
&
d
=
=
this
-
>
d
?
this
-
>
s
:
nullptr
;
}
void
cache
(
int
base
double
d
JSFlatString
*
s
)
{
this
-
>
base
=
base
;
this
-
>
d
=
d
;
this
-
>
s
=
s
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkCacheAfterMovingGC
(
)
{
MOZ_ASSERT
(
!
s
|
|
!
IsForwarded
(
s
)
)
;
}
#
endif
}
;
class
CrossCompartmentKey
{
public
:
enum
DebuggerObjectKind
:
uint8_t
{
DebuggerSource
DebuggerEnvironment
DebuggerObject
DebuggerWasmScript
DebuggerWasmSource
}
;
using
DebuggerAndObject
=
mozilla
:
:
Tuple
<
NativeObject
*
JSObject
*
DebuggerObjectKind
>
;
using
DebuggerAndScript
=
mozilla
:
:
Tuple
<
NativeObject
*
JSScript
*
>
;
using
WrappedType
=
mozilla
:
:
Variant
<
JSObject
*
JSString
*
DebuggerAndScript
DebuggerAndObject
>
;
explicit
CrossCompartmentKey
(
JSObject
*
obj
)
:
wrapped
(
obj
)
{
MOZ_RELEASE_ASSERT
(
obj
)
;
}
explicit
CrossCompartmentKey
(
JSString
*
str
)
:
wrapped
(
str
)
{
MOZ_RELEASE_ASSERT
(
str
)
;
}
explicit
CrossCompartmentKey
(
const
JS
:
:
Value
&
v
)
:
wrapped
(
v
.
isString
(
)
?
WrappedType
(
v
.
toString
(
)
)
:
WrappedType
(
&
v
.
toObject
(
)
)
)
{
}
explicit
CrossCompartmentKey
(
NativeObject
*
debugger
JSObject
*
obj
DebuggerObjectKind
kind
)
:
wrapped
(
DebuggerAndObject
(
debugger
obj
kind
)
)
{
MOZ_RELEASE_ASSERT
(
debugger
)
;
MOZ_RELEASE_ASSERT
(
obj
)
;
}
explicit
CrossCompartmentKey
(
NativeObject
*
debugger
JSScript
*
script
)
:
wrapped
(
DebuggerAndScript
(
debugger
script
)
)
{
MOZ_RELEASE_ASSERT
(
debugger
)
;
MOZ_RELEASE_ASSERT
(
script
)
;
}
bool
operator
=
=
(
const
CrossCompartmentKey
&
other
)
const
{
return
wrapped
=
=
other
.
wrapped
;
}
bool
operator
!
=
(
const
CrossCompartmentKey
&
other
)
const
{
return
wrapped
!
=
other
.
wrapped
;
}
template
<
typename
T
>
bool
is
(
)
const
{
return
wrapped
.
is
<
T
>
(
)
;
}
template
<
typename
T
>
const
T
&
as
(
)
const
{
return
wrapped
.
as
<
T
>
(
)
;
}
template
<
typename
F
>
auto
applyToWrapped
(
F
f
)
-
>
decltype
(
f
(
static_cast
<
JSObject
*
*
>
(
nullptr
)
)
)
{
using
ReturnType
=
decltype
(
f
(
static_cast
<
JSObject
*
*
>
(
nullptr
)
)
)
;
struct
WrappedMatcher
{
F
f_
;
explicit
WrappedMatcher
(
F
f
)
:
f_
(
f
)
{
}
ReturnType
match
(
JSObject
*
&
obj
)
{
return
f_
(
&
obj
)
;
}
ReturnType
match
(
JSString
*
&
str
)
{
return
f_
(
&
str
)
;
}
ReturnType
match
(
DebuggerAndScript
&
tpl
)
{
return
f_
(
&
mozilla
:
:
Get
<
1
>
(
tpl
)
)
;
}
ReturnType
match
(
DebuggerAndObject
&
tpl
)
{
return
f_
(
&
mozilla
:
:
Get
<
1
>
(
tpl
)
)
;
}
}
matcher
(
f
)
;
return
wrapped
.
match
(
matcher
)
;
}
template
<
typename
F
>
auto
applyToDebugger
(
F
f
)
-
>
decltype
(
f
(
static_cast
<
NativeObject
*
*
>
(
nullptr
)
)
)
{
using
ReturnType
=
decltype
(
f
(
static_cast
<
NativeObject
*
*
>
(
nullptr
)
)
)
;
struct
DebuggerMatcher
{
F
f_
;
explicit
DebuggerMatcher
(
F
f
)
:
f_
(
f
)
{
}
ReturnType
match
(
JSObject
*
&
obj
)
{
return
ReturnType
(
)
;
}
ReturnType
match
(
JSString
*
&
str
)
{
return
ReturnType
(
)
;
}
ReturnType
match
(
DebuggerAndScript
&
tpl
)
{
return
f_
(
&
mozilla
:
:
Get
<
0
>
(
tpl
)
)
;
}
ReturnType
match
(
DebuggerAndObject
&
tpl
)
{
return
f_
(
&
mozilla
:
:
Get
<
0
>
(
tpl
)
)
;
}
}
matcher
(
f
)
;
return
wrapped
.
match
(
matcher
)
;
}
JSCompartment
*
compartment
(
)
{
struct
GetCompartmentFunctor
{
JSCompartment
*
operator
(
)
(
JSObject
*
*
tp
)
const
{
return
(
*
tp
)
-
>
compartment
(
)
;
}
JSCompartment
*
operator
(
)
(
JSScript
*
*
tp
)
const
{
return
(
*
tp
)
-
>
compartment
(
)
;
}
JSCompartment
*
operator
(
)
(
JSString
*
*
tp
)
const
{
MOZ_CRASH
(
"
invalid
ccw
key
"
)
;
return
nullptr
;
}
}
;
return
applyToWrapped
(
GetCompartmentFunctor
(
)
)
;
}
struct
Hasher
:
public
DefaultHasher
<
CrossCompartmentKey
>
{
struct
HashFunctor
{
HashNumber
match
(
JSObject
*
obj
)
{
return
DefaultHasher
<
JSObject
*
>
:
:
hash
(
obj
)
;
}
HashNumber
match
(
JSString
*
str
)
{
return
DefaultHasher
<
JSString
*
>
:
:
hash
(
str
)
;
}
HashNumber
match
(
const
DebuggerAndScript
&
tpl
)
{
return
DefaultHasher
<
NativeObject
*
>
:
:
hash
(
mozilla
:
:
Get
<
0
>
(
tpl
)
)
^
DefaultHasher
<
JSScript
*
>
:
:
hash
(
mozilla
:
:
Get
<
1
>
(
tpl
)
)
;
}
HashNumber
match
(
const
DebuggerAndObject
&
tpl
)
{
return
DefaultHasher
<
NativeObject
*
>
:
:
hash
(
mozilla
:
:
Get
<
0
>
(
tpl
)
)
^
DefaultHasher
<
JSObject
*
>
:
:
hash
(
mozilla
:
:
Get
<
1
>
(
tpl
)
)
^
(
mozilla
:
:
Get
<
2
>
(
tpl
)
<
<
5
)
;
}
}
;
static
HashNumber
hash
(
const
CrossCompartmentKey
&
key
)
{
return
key
.
wrapped
.
match
(
HashFunctor
(
)
)
;
}
static
bool
match
(
const
CrossCompartmentKey
&
l
const
CrossCompartmentKey
&
k
)
{
return
l
.
wrapped
=
=
k
.
wrapped
;
}
}
;
bool
isTenured
(
)
const
{
struct
IsTenuredFunctor
{
using
ReturnType
=
bool
;
ReturnType
operator
(
)
(
JSObject
*
*
tp
)
{
return
!
IsInsideNursery
(
*
tp
)
;
}
ReturnType
operator
(
)
(
JSScript
*
*
tp
)
{
return
true
;
}
ReturnType
operator
(
)
(
JSString
*
*
tp
)
{
return
true
;
}
}
;
return
const_cast
<
CrossCompartmentKey
*
>
(
this
)
-
>
applyToWrapped
(
IsTenuredFunctor
(
)
)
;
}
void
trace
(
JSTracer
*
trc
)
;
bool
needsSweep
(
)
;
private
:
CrossCompartmentKey
(
)
=
delete
;
WrappedType
wrapped
;
}
;
using
WrapperMap
=
NurseryAwareHashMap
<
CrossCompartmentKey
JS
:
:
Value
CrossCompartmentKey
:
:
Hasher
SystemAllocPolicy
>
;
struct
ImmediateMetadata
{
}
;
struct
DelayMetadata
{
}
;
using
PendingMetadata
=
JSObject
*
;
using
NewObjectMetadataState
=
mozilla
:
:
Variant
<
ImmediateMetadata
DelayMetadata
PendingMetadata
>
;
class
MOZ_RAII
AutoSetNewObjectMetadata
:
private
JS
:
:
CustomAutoRooter
{
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
;
JSContext
*
cx_
;
NewObjectMetadataState
prevState_
;
AutoSetNewObjectMetadata
(
const
AutoSetNewObjectMetadata
&
aOther
)
=
delete
;
void
operator
=
(
const
AutoSetNewObjectMetadata
&
aOther
)
=
delete
;
protected
:
virtual
void
trace
(
JSTracer
*
trc
)
override
{
if
(
prevState_
.
is
<
PendingMetadata
>
(
)
)
{
TraceRoot
(
trc
&
prevState_
.
as
<
PendingMetadata
>
(
)
"
Object
pending
metadata
"
)
;
}
}
public
:
explicit
AutoSetNewObjectMetadata
(
ExclusiveContext
*
ecx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
AutoSetNewObjectMetadata
(
)
;
}
;
}
namespace
js
{
class
DebugEnvironments
;
class
ObjectWeakMap
;
class
WatchpointMap
;
class
WeakMapBase
;
}
struct
JSCompartment
{
const
JS
:
:
CompartmentCreationOptions
creationOptions_
;
JS
:
:
CompartmentBehaviors
behaviors_
;
private
:
JS
:
:
Zone
*
zone_
;
JSRuntime
*
runtime_
;
public
:
inline
JSPrincipals
*
principals
(
)
{
return
principals_
;
}
inline
void
setPrincipals
(
JSPrincipals
*
principals
)
{
if
(
principals_
=
=
principals
)
return
;
performanceMonitoring
.
unlink
(
)
;
principals_
=
principals
;
}
inline
bool
isSystem
(
)
const
{
return
isSystem_
;
}
inline
void
setIsSystem
(
bool
isSystem
)
{
if
(
isSystem_
=
=
isSystem
)
return
;
performanceMonitoring
.
unlink
(
)
;
isSystem_
=
isSystem
;
}
inline
bool
isProbablySystemOrAddonCode
(
)
const
{
if
(
creationOptions_
.
addonIdOrNull
(
)
)
return
true
;
return
isSystem_
;
}
private
:
JSPrincipals
*
principals_
;
bool
isSystem_
;
public
:
bool
isSelfHosting
;
bool
marked
;
bool
warnedAboutExprClosure
;
bool
warnedAboutForEach
;
#
ifdef
DEBUG
bool
firedOnNewGlobalObject
;
#
endif
void
mark
(
)
{
marked
=
true
;
}
private
:
friend
struct
JSRuntime
;
friend
struct
JSContext
;
friend
class
js
:
:
ExclusiveContext
;
js
:
:
ReadBarrieredGlobalObject
global_
;
unsigned
enterCompartmentDepth
;
int64_t
startInterval
;
public
:
js
:
:
PerformanceGroupHolder
performanceMonitoring
;
void
enter
(
)
{
enterCompartmentDepth
+
+
;
}
void
leave
(
)
{
enterCompartmentDepth
-
-
;
}
bool
hasBeenEntered
(
)
{
return
!
!
enterCompartmentDepth
;
}
JS
:
:
Zone
*
zone
(
)
{
return
zone_
;
}
const
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
const
JS
:
:
CompartmentCreationOptions
&
creationOptions
(
)
const
{
return
creationOptions_
;
}
JS
:
:
CompartmentBehaviors
&
behaviors
(
)
{
return
behaviors_
;
}
const
JS
:
:
CompartmentBehaviors
&
behaviors
(
)
const
{
return
behaviors_
;
}
JSRuntime
*
runtimeFromMainThread
(
)
const
{
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
return
runtime_
;
}
JSRuntime
*
runtimeFromAnyThread
(
)
const
{
return
runtime_
;
}
JSContext
*
contextFromMainThread
(
)
const
{
return
runtime_
-
>
contextFromMainThread
(
)
;
}
inline
js
:
:
GlobalObject
*
maybeGlobal
(
)
const
;
inline
js
:
:
GlobalObject
*
unsafeUnbarrieredMaybeGlobal
(
)
const
;
inline
void
initGlobal
(
js
:
:
GlobalObject
&
global
)
;
public
:
void
*
data
;
private
:
const
js
:
:
AllocationMetadataBuilder
*
allocationMetadataBuilder
;
js
:
:
SavedStacks
savedStacks_
;
js
:
:
WrapperMap
crossCompartmentWrappers
;
using
CCKeyVector
=
mozilla
:
:
Vector
<
js
:
:
CrossCompartmentKey
0
js
:
:
SystemAllocPolicy
>
;
CCKeyVector
nurseryCCKeys
;
JS
:
:
GCHashSet
<
JSAtom
*
js
:
:
DefaultHasher
<
JSAtom
*
>
js
:
:
SystemAllocPolicy
>
varNames_
;
public
:
int64_t
lastAnimationTime
;
js
:
:
RegExpCompartment
regExps
;
uint32_t
globalWriteBarriered
;
int32_t
detachedTypedObjects
;
private
:
friend
class
js
:
:
AutoSetNewObjectMetadata
;
js
:
:
NewObjectMetadataState
objectMetadataState
;
public
:
void
chooseAllocationSamplingProbability
(
)
{
savedStacks_
.
chooseSamplingProbability
(
this
)
;
}
bool
hasObjectPendingMetadata
(
)
const
{
return
objectMetadataState
.
is
<
js
:
:
PendingMetadata
>
(
)
;
}
void
setObjectPendingMetadata
(
JSContext
*
cx
JSObject
*
obj
)
{
MOZ_ASSERT
(
objectMetadataState
.
is
<
js
:
:
DelayMetadata
>
(
)
)
;
objectMetadataState
=
js
:
:
NewObjectMetadataState
(
js
:
:
PendingMetadata
(
obj
)
)
;
}
void
setObjectPendingMetadata
(
js
:
:
ExclusiveContext
*
ecx
JSObject
*
obj
)
{
if
(
JSContext
*
cx
=
ecx
-
>
maybeJSContext
(
)
)
setObjectPendingMetadata
(
cx
obj
)
;
}
public
:
void
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
tiAllocationSiteTables
size_t
*
tiArrayTypeTables
size_t
*
tiObjectTypeTables
size_t
*
compartmentObject
size_t
*
compartmentTables
size_t
*
innerViews
size_t
*
lazyArrayBuffers
size_t
*
objectMetadataTables
size_t
*
crossCompartmentWrappers
size_t
*
regexpCompartment
size_t
*
savedStacksSet
size_t
*
varNamesSet
size_t
*
nonSyntacticLexicalScopes
size_t
*
jitCompartment
size_t
*
privateData
)
;
js
:
:
ObjectGroupCompartment
objectGroups
;
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkWrapperMapAfterMovingGC
(
)
;
void
checkScriptMapsAfterMovingGC
(
)
;
#
endif
js
:
:
ReadBarrieredScriptSourceObject
selfHostingScriptSource
;
js
:
:
ObjectWeakMap
*
objectMetadataTable
;
JS
:
:
WeakCache
<
js
:
:
InnerViewTable
>
innerViews
;
js
:
:
ObjectWeakMap
*
lazyArrayBuffers
;
mozilla
:
:
LinkedList
<
js
:
:
UnboxedLayout
>
unboxedLayouts
;
js
:
:
wasm
:
:
Compartment
wasm
;
private
:
js
:
:
ObjectWeakMap
*
nonSyntacticLexicalEnvironments_
;
public
:
unsigned
gcIndex
;
JSObject
*
gcIncomingGrayPointers
;
private
:
enum
{
IsDebuggee
=
1
<
<
0
DebuggerObservesAllExecution
=
1
<
<
1
DebuggerObservesAsmJS
=
1
<
<
2
DebuggerObservesCoverage
=
1
<
<
3
DebuggerNeedsDelazification
=
1
<
<
4
}
;
unsigned
debugModeBits
;
friend
class
AutoRestoreCompartmentDebugMode
;
static
const
unsigned
DebuggerObservesMask
=
IsDebuggee
|
DebuggerObservesAllExecution
|
DebuggerObservesCoverage
|
DebuggerObservesAsmJS
;
void
updateDebuggerObservesFlag
(
unsigned
flag
)
;
bool
getNonWrapperObjectForCurrentCompartment
(
JSContext
*
cx
js
:
:
MutableHandleObject
obj
)
;
bool
getOrCreateWrapper
(
JSContext
*
cx
js
:
:
HandleObject
existing
js
:
:
MutableHandleObject
obj
)
;
public
:
JSCompartment
(
JS
:
:
Zone
*
zone
const
JS
:
:
CompartmentOptions
&
options
)
;
~
JSCompartment
(
)
;
MOZ_MUST_USE
bool
init
(
JSContext
*
maybecx
)
;
MOZ_MUST_USE
inline
bool
wrap
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
;
MOZ_MUST_USE
bool
wrap
(
JSContext
*
cx
js
:
:
MutableHandleString
strp
)
;
MOZ_MUST_USE
bool
wrap
(
JSContext
*
cx
JS
:
:
MutableHandleObject
obj
)
;
MOZ_MUST_USE
bool
wrap
(
JSContext
*
cx
JS
:
:
MutableHandle
<
js
:
:
PropertyDescriptor
>
desc
)
;
MOZ_MUST_USE
bool
wrap
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
GCVector
<
JS
:
:
Value
>
>
vec
)
;
MOZ_MUST_USE
bool
rewrap
(
JSContext
*
cx
JS
:
:
MutableHandleObject
obj
JS
:
:
HandleObject
existing
)
;
MOZ_MUST_USE
bool
putWrapper
(
JSContext
*
cx
const
js
:
:
CrossCompartmentKey
&
wrapped
const
js
:
:
Value
&
wrapper
)
;
js
:
:
WrapperMap
:
:
Ptr
lookupWrapper
(
const
js
:
:
Value
&
wrapped
)
const
{
return
crossCompartmentWrappers
.
lookup
(
js
:
:
CrossCompartmentKey
(
wrapped
)
)
;
}
void
removeWrapper
(
js
:
:
WrapperMap
:
:
Ptr
p
)
{
crossCompartmentWrappers
.
remove
(
p
)
;
}
struct
WrapperEnum
:
public
js
:
:
WrapperMap
:
:
Enum
{
explicit
WrapperEnum
(
JSCompartment
*
c
)
:
js
:
:
WrapperMap
:
:
Enum
(
c
-
>
crossCompartmentWrappers
)
{
}
}
;
js
:
:
LexicalEnvironmentObject
*
getOrCreateNonSyntacticLexicalEnvironment
(
JSContext
*
cx
js
:
:
HandleObject
enclosing
)
;
js
:
:
LexicalEnvironmentObject
*
getNonSyntacticLexicalEnvironment
(
JSObject
*
enclosing
)
const
;
void
trace
(
JSTracer
*
trc
)
;
void
traceRoots
(
JSTracer
*
trc
js
:
:
gc
:
:
GCRuntime
:
:
TraceOrMarkRuntime
traceOrMark
)
;
void
finishRoots
(
)
;
void
traceOutgoingCrossCompartmentWrappers
(
JSTracer
*
trc
)
;
static
void
traceIncomingCrossCompartmentEdgesForZoneGC
(
JSTracer
*
trc
)
;
bool
preserveJitCode
(
)
{
return
creationOptions_
.
preserveJitCode
(
)
;
}
void
sweepAfterMinorGC
(
JSTracer
*
trc
)
;
void
sweepCrossCompartmentWrappers
(
)
;
void
sweepSavedStacks
(
)
;
void
sweepGlobalObject
(
js
:
:
FreeOp
*
fop
)
;
void
sweepSelfHostingScriptSource
(
)
;
void
sweepJitCompartment
(
js
:
:
FreeOp
*
fop
)
;
void
sweepRegExps
(
)
;
void
sweepDebugEnvironments
(
)
;
void
sweepNativeIterators
(
)
;
void
sweepTemplateObjects
(
)
;
void
purge
(
)
;
void
clearTables
(
)
;
static
void
fixupCrossCompartmentWrappersAfterMovingGC
(
JSTracer
*
trc
)
;
void
fixupAfterMovingGC
(
)
;
void
fixupGlobal
(
)
;
void
fixupScriptMapsAfterMovingGC
(
)
;
bool
hasAllocationMetadataBuilder
(
)
const
{
return
allocationMetadataBuilder
;
}
const
js
:
:
AllocationMetadataBuilder
*
getAllocationMetadataBuilder
(
)
const
{
return
allocationMetadataBuilder
;
}
void
setAllocationMetadataBuilder
(
const
js
:
:
AllocationMetadataBuilder
*
builder
)
;
void
forgetAllocationMetadataBuilder
(
)
{
allocationMetadataBuilder
=
nullptr
;
}
void
setNewObjectMetadata
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
void
clearObjectMetadata
(
)
;
const
void
*
addressOfMetadataBuilder
(
)
const
{
return
&
allocationMetadataBuilder
;
}
js
:
:
SavedStacks
&
savedStacks
(
)
{
return
savedStacks_
;
}
MOZ_MUST_USE
bool
addToVarNames
(
JSContext
*
cx
JS
:
:
Handle
<
JSAtom
*
>
name
)
;
void
removeFromVarNames
(
JS
:
:
Handle
<
JSAtom
*
>
name
)
{
varNames_
.
remove
(
name
)
;
}
bool
isInVarNames
(
JS
:
:
Handle
<
JSAtom
*
>
name
)
{
return
varNames_
.
has
(
name
)
;
}
void
findOutgoingEdges
(
js
:
:
gc
:
:
ZoneComponentFinder
&
finder
)
;
js
:
:
DtoaCache
dtoaCache
;
mozilla
:
:
Maybe
<
mozilla
:
:
non_crypto
:
:
XorShift128PlusRNG
>
randomNumberGenerator
;
void
ensureRandomNumberGenerator
(
)
;
static
size_t
offsetOfRegExps
(
)
{
return
offsetof
(
JSCompartment
regExps
)
;
}
private
:
JSCompartment
*
thisForCtor
(
)
{
return
this
;
}
public
:
bool
isDebuggee
(
)
const
{
return
!
!
(
debugModeBits
&
IsDebuggee
)
;
}
void
setIsDebuggee
(
)
{
debugModeBits
|
=
IsDebuggee
;
}
void
unsetIsDebuggee
(
)
;
bool
debuggerObservesAllExecution
(
)
const
{
static
const
unsigned
Mask
=
IsDebuggee
|
DebuggerObservesAllExecution
;
return
(
debugModeBits
&
Mask
)
=
=
Mask
;
}
void
updateDebuggerObservesAllExecution
(
)
{
updateDebuggerObservesFlag
(
DebuggerObservesAllExecution
)
;
}
bool
debuggerObservesAsmJS
(
)
const
{
static
const
unsigned
Mask
=
IsDebuggee
|
DebuggerObservesAsmJS
;
return
(
debugModeBits
&
Mask
)
=
=
Mask
;
}
void
updateDebuggerObservesAsmJS
(
)
{
updateDebuggerObservesFlag
(
DebuggerObservesAsmJS
)
;
}
bool
debuggerObservesCoverage
(
)
const
{
static
const
unsigned
Mask
=
DebuggerObservesCoverage
;
return
(
debugModeBits
&
Mask
)
=
=
Mask
;
}
void
updateDebuggerObservesCoverage
(
)
;
bool
collectCoverage
(
)
const
;
bool
collectCoverageForDebug
(
)
const
;
bool
collectCoverageForPGO
(
)
const
;
void
clearScriptCounts
(
)
;
bool
needsDelazificationForDebugger
(
)
const
{
return
debugModeBits
&
DebuggerNeedsDelazification
;
}
void
scheduleDelazificationForDebugger
(
)
{
debugModeBits
|
=
DebuggerNeedsDelazification
;
}
bool
ensureDelazifyScriptsForDebugger
(
JSContext
*
cx
)
;
void
clearBreakpointsIn
(
js
:
:
FreeOp
*
fop
js
:
:
Debugger
*
dbg
JS
:
:
HandleObject
handler
)
;
private
:
void
sweepBreakpoints
(
js
:
:
FreeOp
*
fop
)
;
public
:
js
:
:
WatchpointMap
*
watchpointMap
;
js
:
:
ScriptCountsMap
*
scriptCountsMap
;
js
:
:
DebugScriptMap
*
debugScriptMap
;
js
:
:
DebugEnvironments
*
debugEnvs
;
js
:
:
NativeIterator
*
enumerators
;
js
:
:
PropertyIteratorObject
*
lastCachedNativeIterator
;
private
:
JS
:
:
CompartmentStats
*
compartmentStats_
;
public
:
JS
:
:
CompartmentStats
&
compartmentStats
(
)
{
MOZ_RELEASE_ASSERT
(
compartmentStats_
)
;
return
*
compartmentStats_
;
}
void
nullCompartmentStats
(
)
{
MOZ_ASSERT
(
compartmentStats_
)
;
compartmentStats_
=
nullptr
;
}
void
setCompartmentStats
(
JS
:
:
CompartmentStats
*
newStats
)
{
MOZ_ASSERT
(
!
compartmentStats_
&
&
newStats
)
;
compartmentStats_
=
newStats
;
}
bool
scheduledForDestruction
;
bool
maybeAlive
;
private
:
js
:
:
jit
:
:
JitCompartment
*
jitCompartment_
;
js
:
:
ReadBarriered
<
js
:
:
ArgumentsObject
*
>
mappedArgumentsTemplate_
;
js
:
:
ReadBarriered
<
js
:
:
ArgumentsObject
*
>
unmappedArgumentsTemplate_
;
public
:
bool
ensureJitCompartmentExists
(
JSContext
*
cx
)
;
js
:
:
jit
:
:
JitCompartment
*
jitCompartment
(
)
{
return
jitCompartment_
;
}
enum
DeprecatedLanguageExtension
{
DeprecatedForEach
=
0
DeprecatedLegacyGenerator
=
2
DeprecatedExpressionClosure
=
3
DeprecatedBlockScopeFunRedecl
=
10
DeprecatedLanguageExtensionCount
}
;
js
:
:
ArgumentsObject
*
getOrCreateArgumentsTemplateObject
(
JSContext
*
cx
bool
mapped
)
;
js
:
:
ArgumentsObject
*
maybeArgumentsTemplateObject
(
bool
mapped
)
const
;
private
:
bool
sawDeprecatedLanguageExtension
[
DeprecatedLanguageExtensionCount
]
;
void
reportTelemetry
(
)
;
public
:
void
addTelemetry
(
const
char
*
filename
DeprecatedLanguageExtension
e
)
;
public
:
js
:
:
coverage
:
:
LCovCompartment
lcovOutput
;
}
;
inline
bool
JSRuntime
:
:
isAtomsZone
(
const
JS
:
:
Zone
*
zone
)
const
{
return
zone
=
=
atomsCompartment_
-
>
zone
(
)
;
}
namespace
js
{
template
<
typename
T
>
inline
void
SetMaybeAliveFlag
(
T
*
thing
)
{
}
template
<
>
inline
void
SetMaybeAliveFlag
(
JSObject
*
thing
)
{
thing
-
>
compartment
(
)
-
>
maybeAlive
=
true
;
}
template
<
>
inline
void
SetMaybeAliveFlag
(
JSScript
*
thing
)
{
thing
-
>
compartment
(
)
-
>
maybeAlive
=
true
;
}
inline
js
:
:
Handle
<
js
:
:
GlobalObject
*
>
ExclusiveContext
:
:
global
(
)
const
{
MOZ_ASSERT
(
compartment_
"
Caller
needs
to
enter
a
compartment
first
"
)
;
return
Handle
<
GlobalObject
*
>
:
:
fromMarkedLocation
(
compartment_
-
>
global_
.
unsafeGet
(
)
)
;
}
class
MOZ_RAII
AssertCompartmentUnchanged
{
public
:
explicit
AssertCompartmentUnchanged
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
cx
(
cx
)
oldCompartment
(
cx
-
>
compartment
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
AssertCompartmentUnchanged
(
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
oldCompartment
)
;
}
protected
:
JSContext
*
const
cx
;
JSCompartment
*
const
oldCompartment
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
AutoCompartment
{
ExclusiveContext
*
const
cx_
;
JSCompartment
*
const
origin_
;
const
js
:
:
AutoLockForExclusiveAccess
*
maybeLock_
;
public
:
inline
AutoCompartment
(
ExclusiveContext
*
cx
JSObject
*
target
js
:
:
AutoLockForExclusiveAccess
*
maybeLock
=
nullptr
)
;
inline
AutoCompartment
(
ExclusiveContext
*
cx
JSCompartment
*
target
js
:
:
AutoLockForExclusiveAccess
*
maybeLock
=
nullptr
)
;
inline
~
AutoCompartment
(
)
;
ExclusiveContext
*
context
(
)
const
{
return
cx_
;
}
JSCompartment
*
origin
(
)
const
{
return
origin_
;
}
private
:
AutoCompartment
(
const
AutoCompartment
&
)
=
delete
;
AutoCompartment
&
operator
=
(
const
AutoCompartment
&
)
=
delete
;
}
;
class
ErrorCopier
{
mozilla
:
:
Maybe
<
AutoCompartment
>
&
ac
;
public
:
explicit
ErrorCopier
(
mozilla
:
:
Maybe
<
AutoCompartment
>
&
ac
)
:
ac
(
ac
)
{
}
~
ErrorCopier
(
)
;
}
;
struct
WrapperValue
{
explicit
WrapperValue
(
const
WrapperMap
:
:
Ptr
&
ptr
)
:
value
(
*
ptr
-
>
value
(
)
.
unsafeGet
(
)
)
{
}
explicit
WrapperValue
(
const
WrapperMap
:
:
Enum
&
e
)
:
value
(
*
e
.
front
(
)
.
value
(
)
.
unsafeGet
(
)
)
{
}
Value
&
get
(
)
{
return
value
;
}
Value
get
(
)
const
{
return
value
;
}
operator
const
Value
&
(
)
const
{
return
value
;
}
JSObject
&
toObject
(
)
const
{
return
value
.
toObject
(
)
;
}
private
:
Value
value
;
}
;
class
MOZ_RAII
AutoWrapperVector
:
public
JS
:
:
AutoVectorRooterBase
<
WrapperValue
>
{
public
:
explicit
AutoWrapperVector
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoVectorRooterBase
<
WrapperValue
>
(
cx
WRAPVECTOR
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoWrapperRooter
:
private
JS
:
:
AutoGCRooter
{
public
:
AutoWrapperRooter
(
JSContext
*
cx
WrapperValue
v
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
JS
:
:
AutoGCRooter
(
cx
WRAPPER
)
value
(
v
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
operator
JSObject
*
(
)
const
{
return
value
.
get
(
)
.
toObjectOrNull
(
)
;
}
friend
void
JS
:
:
AutoGCRooter
:
:
trace
(
JSTracer
*
trc
)
;
private
:
WrapperValue
value
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoSuppressAllocationMetadataBuilder
{
JS
:
:
Zone
*
zone
;
bool
saved
;
public
:
explicit
AutoSuppressAllocationMetadataBuilder
(
ExclusiveContext
*
cx
)
:
AutoSuppressAllocationMetadataBuilder
(
cx
-
>
compartment
(
)
-
>
zone
(
)
)
{
}
explicit
AutoSuppressAllocationMetadataBuilder
(
JS
:
:
Zone
*
zone
)
:
zone
(
zone
)
saved
(
zone
-
>
suppressAllocationMetadataBuilder
)
{
zone
-
>
suppressAllocationMetadataBuilder
=
true
;
}
~
AutoSuppressAllocationMetadataBuilder
(
)
{
zone
-
>
suppressAllocationMetadataBuilder
=
saved
;
}
}
;
}
namespace
JS
{
template
<
>
struct
GCPolicy
<
js
:
:
CrossCompartmentKey
>
:
public
StructGCPolicy
<
js
:
:
CrossCompartmentKey
>
{
static
bool
isTenured
(
const
js
:
:
CrossCompartmentKey
&
key
)
{
return
key
.
isTenured
(
)
;
}
}
;
}
#
endif
