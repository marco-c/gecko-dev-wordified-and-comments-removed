#
ifndef
V8_REGEXP_REGEXP_INTERPRETER_H_
#
define
V8_REGEXP_REGEXP_INTERPRETER_H_
#
include
"
irregexp
/
regexp
.
h
"
namespace
v8
{
namespace
internal
{
class
V8_EXPORT_PRIVATE
IrregexpInterpreter
:
public
AllStatic
{
public
:
enum
Result
{
FAILURE
=
RegExp
:
:
kInternalRegExpFailure
SUCCESS
=
RegExp
:
:
kInternalRegExpSuccess
EXCEPTION
=
RegExp
:
:
kInternalRegExpException
RETRY
=
RegExp
:
:
kInternalRegExpRetry
}
;
static
Result
MatchForCallFromRuntime
(
Isolate
*
isolate
Handle
<
JSRegExp
>
regexp
Handle
<
String
>
subject_string
int
*
output_registers
int
output_register_count
int
start_position
)
;
static
Result
MatchForCallFromJs
(
Address
subject
int32_t
start_position
Address
input_start
Address
input_end
int
*
output_registers
int32_t
output_register_count
Address
backtrack_stack
RegExp
:
:
CallOrigin
call_origin
Isolate
*
isolate
Address
regexp
)
;
static
Result
MatchInternal
(
Isolate
*
isolate
ByteArray
code_array
String
subject_string
int
*
output_registers
int
output_register_count
int
total_register_count
int
start_position
RegExp
:
:
CallOrigin
call_origin
uint32_t
backtrack_limit
)
;
private
:
static
Result
Match
(
Isolate
*
isolate
JSRegExp
regexp
String
subject_string
int
*
output_registers
int
output_register_count
int
start_position
RegExp
:
:
CallOrigin
call_origin
)
;
}
;
}
}
#
endif
