#
ifndef
regexp_RegExpAPI_h
#
define
regexp_RegExpAPI_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
irregexp
/
RegExpTypes
.
h
"
#
include
"
vm
/
RegExpShared
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSTracer
;
namespace
JS
{
class
RegExpFlags
;
}
namespace
v8
:
:
internal
{
class
RegExpStack
;
}
namespace
js
{
class
VectorMatchPairs
;
namespace
frontend
{
class
TokenStreamAnyChars
;
}
namespace
irregexp
{
Isolate
*
CreateIsolate
(
JSContext
*
cx
)
;
void
TraceIsolate
(
JSTracer
*
trc
Isolate
*
isolate
)
;
void
DestroyIsolate
(
Isolate
*
isolate
)
;
size_t
IsolateSizeOfIncludingThis
(
Isolate
*
isolate
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
bool
CheckPatternSyntax
(
JSContext
*
cx
frontend
:
:
TokenStreamAnyChars
&
ts
const
mozilla
:
:
Range
<
const
char16_t
>
chars
JS
:
:
RegExpFlags
flags
mozilla
:
:
Maybe
<
uint32_t
>
line
=
mozilla
:
:
Nothing
(
)
mozilla
:
:
Maybe
<
uint32_t
>
column
=
mozilla
:
:
Nothing
(
)
)
;
bool
CheckPatternSyntax
(
JSContext
*
cx
frontend
:
:
TokenStreamAnyChars
&
ts
Handle
<
JSAtom
*
>
pattern
JS
:
:
RegExpFlags
flags
)
;
bool
CompilePattern
(
JSContext
*
cx
MutableHandleRegExpShared
re
Handle
<
JSLinearString
*
>
input
RegExpShared
:
:
CodeKind
codeKind
)
;
RegExpRunStatus
Execute
(
JSContext
*
cx
MutableHandleRegExpShared
re
Handle
<
JSLinearString
*
>
input
size_t
start
VectorMatchPairs
*
matches
)
;
RegExpRunStatus
ExecuteForFuzzing
(
JSContext
*
cx
Handle
<
JSAtom
*
>
pattern
Handle
<
JSLinearString
*
>
input
JS
:
:
RegExpFlags
flags
size_t
startIndex
VectorMatchPairs
*
matches
RegExpShared
:
:
CodeKind
codeKind
)
;
bool
GrowBacktrackStack
(
v8
:
:
internal
:
:
RegExpStack
*
regexp_stack
)
;
uint32_t
CaseInsensitiveCompareNonUnicode
(
const
char16_t
*
substring1
const
char16_t
*
substring2
size_t
byteLength
)
;
uint32_t
CaseInsensitiveCompareUnicode
(
const
char16_t
*
substring1
const
char16_t
*
substring2
size_t
byteLength
)
;
bool
IsCharacterInRangeArray
(
uint32_t
c
ByteArrayData
*
ranges
)
;
#
ifdef
DEBUG
bool
IsolateShouldSimulateInterrupt
(
Isolate
*
isolate
)
;
void
IsolateSetShouldSimulateInterrupt
(
Isolate
*
isolate
)
;
void
IsolateClearShouldSimulateInterrupt
(
Isolate
*
isolate
)
;
#
endif
}
}
#
endif
