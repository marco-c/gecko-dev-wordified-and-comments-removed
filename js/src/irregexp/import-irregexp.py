import
os
import
re
import
subprocess
import
sys
from
pathlib
import
Path
def
get_hash
(
path
)
:
    
cwd
=
os
.
getcwd
(
)
    
os
.
chdir
(
path
)
    
command
=
[
"
git
"
"
rev
-
parse
"
"
HEAD
"
]
    
result
=
subprocess
.
check_output
(
command
encoding
=
"
utf
-
8
"
)
    
os
.
chdir
(
cwd
)
    
return
result
.
rstrip
(
)
def
copy_and_update_includes
(
src_path
dst_path
)
:
    
need_shim
=
[
        
"
property
-
sequences
.
h
"
        
"
regexp
-
ast
.
h
"
        
"
regexp
-
bytecode
-
peephole
.
h
"
        
"
regexp
-
bytecodes
.
h
"
        
"
regexp
-
dotprinter
.
h
"
        
"
regexp
-
error
.
h
"
        
"
regexp
.
h
"
        
"
regexp
-
macro
-
assembler
.
h
"
        
"
regexp
-
parser
.
h
"
        
"
regexp
-
stack
.
h
"
        
"
special
-
case
.
h
"
    
]
    
src
=
open
(
str
(
src_path
)
"
r
"
)
    
dst
=
open
(
str
(
dst_path
)
"
w
"
)
    
regexp_include
=
re
.
compile
(
'
#
include
"
src
/
regexp
(
?
!
/
regexp
-
flags
.
h
)
'
)
    
regexp_include_new
=
'
#
include
"
irregexp
/
imported
'
    
other_include
=
re
.
compile
(
'
#
include
"
src
/
'
)
    
need_to_add_shim
=
src_path
.
name
in
need_shim
    
adding_shim_now
=
False
    
for
line
in
src
:
        
if
adding_shim_now
:
            
if
line
=
=
"
\
n
"
:
                
dst
.
write
(
'
#
include
"
irregexp
/
RegExpShim
.
h
"
\
n
'
)
                
need_to_add_shim
=
False
                
adding_shim_now
=
False
        
if
regexp_include
.
search
(
line
)
:
            
dst
.
write
(
re
.
sub
(
regexp_include
regexp_include_new
line
)
)
        
elif
other_include
.
search
(
line
)
:
            
if
need_to_add_shim
:
                
adding_shim_now
=
True
        
else
:
            
dst
.
write
(
line
)
def
import_from
(
srcdir
dstdir
)
:
    
excluded
=
[
        
"
DIR_METADATA
"
        
"
OWNERS
"
        
"
regexp
.
cc
"
        
"
regexp
-
flags
.
h
"
        
"
regexp
-
utils
.
cc
"
        
"
regexp
-
utils
.
h
"
        
"
regexp
-
macro
-
assembler
-
arch
.
h
"
    
]
    
for
file
in
srcdir
.
iterdir
(
)
:
        
if
file
.
is_dir
(
)
:
            
continue
        
if
str
(
file
.
name
)
in
excluded
:
            
continue
        
copy_and_update_includes
(
file
dstdir
/
"
imported
"
/
file
.
name
)
    
hash
=
get_hash
(
srcdir
)
    
version_file
=
open
(
str
(
dstdir
/
"
IRREGEXP_VERSION
"
)
"
w
"
)
    
version_file
.
write
(
"
Imported
using
import
-
irregexp
.
py
from
:
\
n
"
)
    
version_file
.
write
(
"
https
:
/
/
github
.
com
/
v8
/
v8
/
tree
/
%
s
/
src
/
regexp
\
n
"
%
hash
)
if
__name__
=
=
"
__main__
"
:
    
import
argparse
    
import
tempfile
    
current_path
=
Path
(
os
.
getcwd
(
)
)
    
expected_path
=
"
js
/
src
/
irregexp
"
    
if
not
current_path
.
match
(
expected_path
)
:
        
raise
RuntimeError
(
"
%
s
must
be
run
from
%
s
"
%
(
sys
.
argv
[
0
]
expected_path
)
)
    
parser
=
argparse
.
ArgumentParser
(
description
=
"
Import
irregexp
from
v8
"
)
    
parser
.
add_argument
(
"
-
p
"
"
-
-
path
"
help
=
"
path
to
v8
/
src
/
regexp
"
)
    
args
=
parser
.
parse_args
(
)
    
if
args
.
path
:
        
src_path
=
Path
(
args
.
path
)
        
if
not
(
src_path
/
"
regexp
.
h
"
)
.
exists
(
)
:
            
print
(
"
Usage
:
\
n
import
-
irregexp
.
py
-
-
path
<
path
/
to
/
v8
/
src
/
regexp
>
"
)
            
sys
.
exit
(
1
)
        
import_from
(
src_path
current_path
)
        
sys
.
exit
(
0
)
    
with
tempfile
.
TemporaryDirectory
(
)
as
tempdir
:
        
v8_git
=
"
https
:
/
/
github
.
com
/
v8
/
v8
.
git
"
        
clone
=
"
git
clone
-
-
depth
1
%
s
%
s
"
%
(
v8_git
tempdir
)
        
os
.
system
(
clone
)
        
src_path
=
Path
(
tempdir
)
/
"
src
/
regexp
"
        
import_from
(
src_path
current_path
)
