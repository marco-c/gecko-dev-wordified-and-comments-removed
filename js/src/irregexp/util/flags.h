#
ifndef
V8_UTIL_FLAGS_H_
#
define
V8_UTIL_FLAGS_H_
namespace
v8
{
namespace
base
{
template
<
typename
T
typename
S
=
int
>
class
Flags
final
{
public
:
using
flag_type
=
T
;
using
mask_type
=
S
;
constexpr
Flags
(
)
:
mask_
(
0
)
{
}
constexpr
Flags
(
flag_type
flag
)
:
mask_
(
static_cast
<
S
>
(
flag
)
)
{
}
constexpr
explicit
Flags
(
mask_type
mask
)
:
mask_
(
static_cast
<
S
>
(
mask
)
)
{
}
constexpr
bool
operator
=
=
(
flag_type
flag
)
const
{
return
mask_
=
=
static_cast
<
S
>
(
flag
)
;
}
constexpr
bool
operator
!
=
(
flag_type
flag
)
const
{
return
mask_
!
=
static_cast
<
S
>
(
flag
)
;
}
Flags
&
operator
&
=
(
const
Flags
&
flags
)
{
mask_
&
=
flags
.
mask_
;
return
*
this
;
}
Flags
&
operator
|
=
(
const
Flags
&
flags
)
{
mask_
|
=
flags
.
mask_
;
return
*
this
;
}
Flags
&
operator
^
=
(
const
Flags
&
flags
)
{
mask_
^
=
flags
.
mask_
;
return
*
this
;
}
constexpr
Flags
operator
&
(
const
Flags
&
flags
)
const
{
return
Flags
(
mask_
&
flags
.
mask_
)
;
}
constexpr
Flags
operator
|
(
const
Flags
&
flags
)
const
{
return
Flags
(
mask_
|
flags
.
mask_
)
;
}
constexpr
Flags
operator
^
(
const
Flags
&
flags
)
const
{
return
Flags
(
mask_
^
flags
.
mask_
)
;
}
Flags
&
operator
&
=
(
flag_type
flag
)
{
return
operator
&
=
(
Flags
(
flag
)
)
;
}
Flags
&
operator
|
=
(
flag_type
flag
)
{
return
operator
|
=
(
Flags
(
flag
)
)
;
}
Flags
&
operator
^
=
(
flag_type
flag
)
{
return
operator
^
=
(
Flags
(
flag
)
)
;
}
constexpr
Flags
operator
&
(
flag_type
flag
)
const
{
return
operator
&
(
Flags
(
flag
)
)
;
}
constexpr
Flags
operator
|
(
flag_type
flag
)
const
{
return
operator
|
(
Flags
(
flag
)
)
;
}
constexpr
Flags
operator
^
(
flag_type
flag
)
const
{
return
operator
^
(
Flags
(
flag
)
)
;
}
constexpr
Flags
operator
~
(
)
const
{
return
Flags
(
~
mask_
)
;
}
constexpr
operator
mask_type
(
)
const
{
return
mask_
;
}
constexpr
bool
operator
!
(
)
const
{
return
!
mask_
;
}
Flags
without
(
flag_type
flag
)
{
return
*
this
&
(
~
Flags
(
flag
)
)
;
}
friend
size_t
hash_value
(
const
Flags
&
flags
)
{
return
flags
.
mask_
;
}
private
:
mask_type
mask_
;
}
;
}
}
#
endif
