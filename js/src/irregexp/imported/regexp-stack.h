#
ifndef
V8_REGEXP_REGEXP_STACK_H_
#
define
V8_REGEXP_REGEXP_STACK_H_
#
include
"
irregexp
/
RegExpShim
.
h
"
namespace
v8
{
namespace
internal
{
class
RegExpStack
;
class
RegExpStackScope
{
public
:
explicit
RegExpStackScope
(
Isolate
*
isolate
)
;
~
RegExpStackScope
(
)
;
RegExpStack
*
stack
(
)
const
{
return
regexp_stack_
;
}
private
:
RegExpStack
*
regexp_stack_
;
DISALLOW_COPY_AND_ASSIGN
(
RegExpStackScope
)
;
}
;
class
RegExpStack
{
public
:
RegExpStack
(
)
;
~
RegExpStack
(
)
;
static
constexpr
int
kStackLimitSlack
=
32
;
Address
stack_base
(
)
{
DCHECK_NE
(
0
thread_local_
.
memory_size_
)
;
DCHECK_EQ
(
thread_local_
.
memory_top_
thread_local_
.
memory_
+
thread_local_
.
memory_size_
)
;
return
reinterpret_cast
<
Address
>
(
thread_local_
.
memory_top_
)
;
}
size_t
stack_capacity
(
)
{
return
thread_local_
.
memory_size_
;
}
Address
*
limit_address_address
(
)
{
return
&
(
thread_local_
.
limit_
)
;
}
Address
EnsureCapacity
(
size_t
size
)
;
static
constexpr
int
ArchiveSpacePerThread
(
)
{
return
static_cast
<
int
>
(
sizeof
(
ThreadLocal
)
)
;
}
char
*
ArchiveStack
(
char
*
to
)
;
char
*
RestoreStack
(
char
*
from
)
;
void
FreeThreadResources
(
)
{
thread_local_
.
ResetToStaticStack
(
this
)
;
}
static
constexpr
size_t
kMaximumStackSize
=
64
*
MB
;
private
:
static
const
Address
kMemoryTop
=
static_cast
<
Address
>
(
static_cast
<
uintptr_t
>
(
-
1
)
)
;
static
constexpr
size_t
kMinimumDynamicStackSize
=
1
*
KB
;
static
constexpr
size_t
kStaticStackSize
=
2
*
kStackLimitSlack
*
kSystemPointerSize
;
byte
static_stack_
[
kStaticStackSize
]
=
{
0
}
;
STATIC_ASSERT
(
kStaticStackSize
<
=
kMaximumStackSize
)
;
struct
ThreadLocal
{
explicit
ThreadLocal
(
RegExpStack
*
regexp_stack
)
{
ResetToStaticStack
(
regexp_stack
)
;
}
byte
*
memory_
=
nullptr
;
byte
*
memory_top_
=
nullptr
;
size_t
memory_size_
=
0
;
Address
limit_
=
kNullAddress
;
bool
owns_memory_
=
false
;
void
ResetToStaticStack
(
RegExpStack
*
regexp_stack
)
;
void
FreeAndInvalidate
(
)
;
}
;
Address
memory_top_address_address
(
)
{
return
reinterpret_cast
<
Address
>
(
&
thread_local_
.
memory_top_
)
;
}
void
Reset
(
)
;
ThreadLocal
thread_local_
;
Isolate
*
isolate_
;
friend
class
ExternalReference
;
friend
class
Isolate
;
friend
class
RegExpStackScope
;
DISALLOW_COPY_AND_ASSIGN
(
RegExpStack
)
;
}
;
}
}
#
endif
