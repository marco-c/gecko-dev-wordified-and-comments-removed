#
include
<
inttypes
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
zydis
/
ZydisAPI
.
h
"
void
zydisDisassemble
(
const
uint8_t
*
code
size_t
codeLen
void
(
*
println
)
(
const
char
*
)
)
{
ZydisDecoder
decoder
;
ZydisDecoderInit
(
&
decoder
ZYDIS_MACHINE_MODE_LONG_64
ZYDIS_ADDRESS_WIDTH_64
)
;
ZydisFormatter
formatter
;
ZydisFormatterInit
(
&
formatter
ZYDIS_FORMATTER_STYLE_ATT
)
;
ZydisFormatterSetProperty
(
&
formatter
ZYDIS_FORMATTER_PROP_FORCE_SIZE
ZYAN_TRUE
)
;
ZyanU64
runtime_address
=
0
;
ZyanUSize
offset
=
0
;
const
ZyanUSize
length
=
(
ZyanUSize
)
codeLen
;
ZydisDecodedInstruction
instruction
;
char
buffer
[
1024
]
;
while
(
ZYAN_SUCCESS
(
ZydisDecoderDecodeBuffer
(
&
decoder
code
+
offset
length
-
offset
&
instruction
)
)
)
{
#
define
LIMIT
48
#
define
LIMSTR
"
48
"
sprintf
(
buffer
"
%
08
"
PRIX64
"
"
runtime_address
)
;
for
(
size_t
i
=
0
;
i
<
instruction
.
length
;
i
+
+
)
{
sprintf
(
buffer
+
strlen
(
buffer
)
"
%
s
%
02x
"
i
=
=
0
?
"
"
:
"
"
*
(
code
+
offset
+
i
)
)
;
}
sprintf
(
buffer
+
strlen
(
buffer
)
"
"
)
;
if
(
strlen
(
buffer
)
<
LIMIT
)
{
char
*
cur_end
=
buffer
+
strlen
(
buffer
)
;
size_t
spaces
=
LIMIT
-
strlen
(
buffer
)
;
memset
(
cur_end
'
'
spaces
)
;
cur_end
[
spaces
]
=
'
\
0
'
;
}
if
(
strlen
(
buffer
)
>
LIMIT
)
{
println
(
buffer
)
;
sprintf
(
buffer
"
%
-
"
LIMSTR
"
s
"
"
"
)
;
}
size_t
used
=
strlen
(
buffer
)
;
ZydisFormatterFormatInstruction
(
&
formatter
&
instruction
buffer
+
used
sizeof
(
buffer
)
-
used
runtime_address
)
;
println
(
buffer
)
;
offset
+
=
instruction
.
length
;
runtime_address
+
=
instruction
.
length
;
#
undef
LIMIT
#
undef
LIMSTR
}
}
