#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
<
algorithm
>
using
namespace
js
;
ProfilingStack
:
:
~
ProfilingStack
(
)
{
MOZ_RELEASE_ASSERT
(
stackPointer
=
=
0
)
;
delete
[
]
frames
;
}
bool
ProfilingStack
:
:
ensureCapacitySlow
(
)
{
MOZ_ASSERT
(
stackPointer
>
=
capacity
)
;
const
uint32_t
kInitialCapacity
=
128
;
uint32_t
sp
=
stackPointer
;
auto
newCapacity
=
std
:
:
max
(
sp
+
1
capacity
?
capacity
*
2
:
kInitialCapacity
)
;
auto
*
newFrames
=
new
(
mozilla
:
:
fallible
)
js
:
:
ProfilingStackFrame
[
newCapacity
]
;
if
(
MOZ_UNLIKELY
(
!
newFrames
)
)
{
return
false
;
}
for
(
auto
i
:
mozilla
:
:
IntegerRange
(
capacity
)
)
{
newFrames
[
i
]
=
frames
[
i
]
;
}
js
:
:
ProfilingStackFrame
*
oldFrames
=
frames
;
frames
=
newFrames
;
capacity
=
newCapacity
;
delete
[
]
oldFrames
;
return
true
;
}
