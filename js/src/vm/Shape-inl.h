#
ifndef
vm_Shape_inl_h
#
define
vm_Shape_inl_h
#
include
"
vm
/
Shape
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
jsobj
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
jsatominlines
.
h
"
#
include
"
jscntxtinlines
.
h
"
namespace
js
{
inline
AutoKeepShapeTables
:
:
AutoKeepShapeTables
(
JSContext
*
cx
)
:
cx_
(
cx
)
prev_
(
cx
-
>
zone
(
)
-
>
keepShapeTables
(
)
)
{
cx
-
>
zone
(
)
-
>
setKeepShapeTables
(
true
)
;
}
inline
AutoKeepShapeTables
:
:
~
AutoKeepShapeTables
(
)
{
cx_
-
>
zone
(
)
-
>
setKeepShapeTables
(
prev_
)
;
}
inline
StackBaseShape
:
:
StackBaseShape
(
JSContext
*
cx
const
Class
*
clasp
uint32_t
objectFlags
)
:
flags
(
objectFlags
)
clasp
(
clasp
)
{
}
inline
Shape
*
Shape
:
:
search
(
JSContext
*
cx
jsid
id
)
{
return
search
(
cx
this
id
)
;
}
MOZ_ALWAYS_INLINE
bool
Shape
:
:
maybeCreateTableForLookup
(
JSContext
*
cx
)
{
if
(
hasTable
(
)
)
return
true
;
if
(
!
inDictionary
(
)
&
&
numLinearSearches
(
)
<
LINEAR_SEARCHES_MAX
)
{
incrementNumLinearSearches
(
)
;
return
true
;
}
if
(
!
isBigEnoughForAShapeTable
(
)
)
return
true
;
return
Shape
:
:
hashify
(
cx
this
)
;
}
template
<
MaybeAdding
Adding
>
inline
bool
Shape
:
:
search
(
JSContext
*
cx
Shape
*
start
jsid
id
const
AutoKeepShapeTables
&
keep
Shape
*
*
pshape
ShapeTable
:
:
Entry
*
*
pentry
)
{
if
(
start
-
>
inDictionary
(
)
)
{
ShapeTable
*
table
=
start
-
>
ensureTableForDictionary
(
cx
keep
)
;
if
(
!
table
)
return
false
;
*
pentry
=
&
table
-
>
search
<
Adding
>
(
id
keep
)
;
*
pshape
=
(
*
pentry
)
-
>
shape
(
)
;
return
true
;
}
*
pentry
=
nullptr
;
*
pshape
=
Shape
:
:
search
<
Adding
>
(
cx
start
id
)
;
return
true
;
}
template
<
MaybeAdding
Adding
>
inline
Shape
*
Shape
:
:
search
(
JSContext
*
cx
Shape
*
start
jsid
id
)
{
if
(
start
-
>
maybeCreateTableForLookup
(
cx
)
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
if
(
ShapeTable
*
table
=
start
-
>
maybeTable
(
nogc
)
)
{
ShapeTable
:
:
Entry
&
entry
=
table
-
>
search
<
Adding
>
(
id
nogc
)
;
return
entry
.
shape
(
)
;
}
}
else
{
cx
-
>
recoverFromOutOfMemory
(
)
;
}
return
start
-
>
searchLinear
(
id
)
;
}
inline
Shape
*
Shape
:
:
new_
(
JSContext
*
cx
Handle
<
StackShape
>
other
uint32_t
nfixed
)
{
Shape
*
shape
=
other
.
isAccessorShape
(
)
?
js
:
:
Allocate
<
AccessorShape
>
(
cx
)
:
js
:
:
Allocate
<
Shape
>
(
cx
)
;
if
(
!
shape
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
if
(
other
.
isAccessorShape
(
)
)
new
(
shape
)
AccessorShape
(
other
nfixed
)
;
else
new
(
shape
)
Shape
(
other
nfixed
)
;
return
shape
;
}
inline
void
Shape
:
:
updateBaseShapeAfterMovingGC
(
)
{
BaseShape
*
base
=
base_
;
if
(
IsForwarded
(
base
)
)
base_
.
unsafeSet
(
Forwarded
(
base
)
)
;
}
template
<
class
ObjectSubclass
>
inline
bool
EmptyShape
:
:
ensureInitialCustomShape
(
JSContext
*
cx
Handle
<
ObjectSubclass
*
>
obj
)
{
static_assert
(
mozilla
:
:
IsBaseOf
<
JSObject
ObjectSubclass
>
:
:
value
"
ObjectSubclass
must
be
a
subclass
of
JSObject
"
)
;
if
(
!
obj
-
>
empty
(
)
)
return
true
;
RootedShape
shape
(
cx
ObjectSubclass
:
:
assignInitialShape
(
cx
obj
)
)
;
if
(
!
shape
)
return
false
;
MOZ_ASSERT
(
!
obj
-
>
empty
(
)
)
;
if
(
obj
-
>
isDelegate
(
)
)
return
true
;
RootedObject
proto
(
cx
obj
-
>
staticPrototype
(
)
)
;
EmptyShape
:
:
insertInitialShape
(
cx
shape
proto
)
;
return
true
;
}
inline
AutoRooterGetterSetter
:
:
Inner
:
:
Inner
(
JSContext
*
cx
uint8_t
attrs
GetterOp
*
pgetter_
SetterOp
*
psetter_
)
:
CustomAutoRooter
(
cx
)
attrs
(
attrs
)
pgetter
(
pgetter_
)
psetter
(
psetter_
)
{
}
inline
AutoRooterGetterSetter
:
:
AutoRooterGetterSetter
(
JSContext
*
cx
uint8_t
attrs
GetterOp
*
pgetter
SetterOp
*
psetter
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
{
if
(
attrs
&
(
JSPROP_GETTER
|
JSPROP_SETTER
)
)
inner
.
emplace
(
cx
attrs
pgetter
psetter
)
;
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
inline
AutoRooterGetterSetter
:
:
AutoRooterGetterSetter
(
JSContext
*
cx
uint8_t
attrs
JSNative
*
pgetter
JSNative
*
psetter
MOZ_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL
)
{
if
(
attrs
&
(
JSPROP_GETTER
|
JSPROP_SETTER
)
)
{
inner
.
emplace
(
cx
attrs
reinterpret_cast
<
GetterOp
*
>
(
pgetter
)
reinterpret_cast
<
SetterOp
*
>
(
psetter
)
)
;
}
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
static
inline
uint8_t
GetPropertyAttributes
(
JSObject
*
obj
PropertyResult
prop
)
{
MOZ_ASSERT
(
obj
-
>
isNative
(
)
)
;
if
(
prop
.
isDenseOrTypedArrayElement
(
)
)
{
if
(
obj
-
>
is
<
TypedArrayObject
>
(
)
)
return
JSPROP_ENUMERATE
|
JSPROP_PERMANENT
;
return
obj
-
>
as
<
NativeObject
>
(
)
.
getElementsHeader
(
)
-
>
elementAttributes
(
)
;
}
return
prop
.
shape
(
)
-
>
attributes
(
)
;
}
}
#
endif
