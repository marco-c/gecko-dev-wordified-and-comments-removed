#
ifndef
_js_vm_Logging_h_
#
define
_js_vm_Logging_h_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
js
/
experimental
/
LoggingInterface
.
h
"
struct
JSContext
;
namespace
js
{
class
LogModule
{
public
:
explicit
constexpr
LogModule
(
const
char
*
name
)
:
name
(
name
)
{
MOZ_ASSERT
(
name
)
;
}
inline
bool
shouldLog
(
mozilla
:
:
LogLevel
level
)
const
{
if
(
!
isSetup
(
)
)
{
return
false
;
}
return
*
levelPtr
>
=
level
;
}
[
[
nodiscard
]
]
static
bool
initializeAll
(
const
JS
:
:
LoggingInterface
iface
)
;
public
:
mutable
JS
:
:
LoggingInterface
interface
{
}
;
mutable
JS
:
:
OpaqueLogger
logger
{
}
;
const
char
*
name
{
}
;
private
:
inline
bool
isSetup
(
)
const
{
return
interface
.
isComplete
(
)
&
&
logger
;
}
bool
initialize
(
const
JS
:
:
LoggingInterface
iface
)
const
{
interface
=
iface
;
MOZ_ASSERT
(
iface
.
isComplete
(
)
)
;
logger
=
iface
.
getLoggerByName
(
name
)
;
if
(
!
logger
)
{
return
false
;
}
levelPtr
=
&
iface
.
getLevelRef
(
logger
)
;
return
true
;
}
mutable
mozilla
:
:
AtomicLogLevel
*
levelPtr
{
}
;
}
;
#
define
FOR_EACH_JS_LOG_MODULE
(
_
)
\
_
(
baselineCompileHandler
)
\
JITSPEW_CHANNEL_LIST
(
_
)
#
define
DECLARE_MODULE
(
X
)
inline
constexpr
LogModule
X
#
#
Module
(
#
X
)
;
FOR_EACH_JS_LOG_MODULE
(
DECLARE_MODULE
)
;
#
undef
DECLARE_MODULE
#
ifdef
JS_JITSPEW
#
define
JS_LOG
(
name
log_level
.
.
.
)
\
do
{
\
if
(
name
#
#
Module
.
shouldLog
(
log_level
)
)
{
\
name
#
#
Module
.
interface
.
logPrint
(
name
#
#
Module
.
logger
log_level
\
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
;
#
else
#
define
JS_LOG
(
module
log_level
.
.
.
)
#
endif
}
#
endif
