#
include
"
vm
/
AsyncIteration
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
Promise
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
GeneratorObject
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
List
-
inl
.
h
"
using
namespace
js
;
[
[
nodiscard
]
]
bool
js
:
:
AsyncGeneratorAwaitedFulfilled
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
)
{
return
AsyncGeneratorResume
(
cx
asyncGenObj
CompletionKind
:
:
Normal
value
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
AsyncGeneratorAwaitedRejected
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
reason
)
{
return
AsyncGeneratorResume
(
cx
asyncGenObj
CompletionKind
:
:
Throw
reason
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
AsyncGeneratorYieldReturnAwaitedFulfilled
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
)
{
return
AsyncGeneratorResume
(
cx
asyncGenObj
CompletionKind
:
:
Return
value
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
AsyncGeneratorYieldReturnAwaitedRejected
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
reason
)
{
return
AsyncGeneratorResume
(
cx
asyncGenObj
CompletionKind
:
:
Throw
reason
)
;
}
const
JSClass
AsyncFromSyncIteratorObject
:
:
class_
=
{
"
AsyncFromSyncIteratorObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
AsyncFromSyncIteratorObject
:
:
Slots
)
}
;
JSObject
*
js
:
:
CreateAsyncFromSyncIterator
(
JSContext
*
cx
HandleObject
iter
HandleValue
nextMethod
)
{
return
AsyncFromSyncIteratorObject
:
:
create
(
cx
iter
nextMethod
)
;
}
JSObject
*
AsyncFromSyncIteratorObject
:
:
create
(
JSContext
*
cx
HandleObject
iter
HandleValue
nextMethod
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateAsyncFromSyncIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
AsyncFromSyncIteratorObject
*
asyncIter
=
NewObjectWithGivenProto
<
AsyncFromSyncIteratorObject
>
(
cx
proto
)
;
if
(
!
asyncIter
)
{
return
nullptr
;
}
asyncIter
-
>
init
(
iter
nextMethod
)
;
return
asyncIter
;
}
static
bool
AsyncFromSyncIteratorNext
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncFromSyncIteratorMethod
(
cx
args
CompletionKind
:
:
Normal
)
;
}
static
bool
AsyncFromSyncIteratorReturn
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncFromSyncIteratorMethod
(
cx
args
CompletionKind
:
:
Return
)
;
}
static
bool
AsyncFromSyncIteratorThrow
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncFromSyncIteratorMethod
(
cx
args
CompletionKind
:
:
Throw
)
;
}
bool
js
:
:
AsyncGeneratorNext
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncGeneratorEnqueue
(
cx
args
.
thisv
(
)
CompletionKind
:
:
Normal
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
bool
js
:
:
AsyncGeneratorReturn
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncGeneratorEnqueue
(
cx
args
.
thisv
(
)
CompletionKind
:
:
Return
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
bool
js
:
:
AsyncGeneratorThrow
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
AsyncGeneratorEnqueue
(
cx
args
.
thisv
(
)
CompletionKind
:
:
Throw
args
.
get
(
0
)
args
.
rval
(
)
)
;
}
const
JSClass
AsyncGeneratorObject
:
:
class_
=
{
"
AsyncGenerator
"
JSCLASS_HAS_RESERVED_SLOTS
(
AsyncGeneratorObject
:
:
Slots
)
&
classOps_
}
;
const
JSClassOps
AsyncGeneratorObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
CallTraceMethod
<
AbstractGeneratorObject
>
}
;
static
AsyncGeneratorObject
*
OrdinaryCreateFromConstructorAsynGen
(
JSContext
*
cx
HandleFunction
fun
)
{
RootedValue
protoVal
(
cx
)
;
if
(
!
GetProperty
(
cx
fun
fun
cx
-
>
names
(
)
.
prototype
&
protoVal
)
)
{
return
nullptr
;
}
RootedObject
proto
(
cx
protoVal
.
isObject
(
)
?
&
protoVal
.
toObject
(
)
:
nullptr
)
;
if
(
!
proto
)
{
proto
=
GlobalObject
:
:
getOrCreateAsyncGeneratorPrototype
(
cx
cx
-
>
global
(
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
}
return
NewObjectWithGivenProto
<
AsyncGeneratorObject
>
(
cx
proto
)
;
}
AsyncGeneratorObject
*
AsyncGeneratorObject
:
:
create
(
JSContext
*
cx
HandleFunction
asyncGen
)
{
MOZ_ASSERT
(
asyncGen
-
>
isAsync
(
)
&
&
asyncGen
-
>
isGenerator
(
)
)
;
AsyncGeneratorObject
*
asyncGenObj
=
OrdinaryCreateFromConstructorAsynGen
(
cx
asyncGen
)
;
if
(
!
asyncGenObj
)
{
return
nullptr
;
}
asyncGenObj
-
>
setSuspendedStart
(
)
;
asyncGenObj
-
>
clearSingleQueueRequest
(
)
;
asyncGenObj
-
>
clearCachedRequest
(
)
;
return
asyncGenObj
;
}
AsyncGeneratorRequest
*
AsyncGeneratorObject
:
:
createRequest
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
CompletionKind
completionKind
HandleValue
completionValue
Handle
<
PromiseObject
*
>
promise
)
{
if
(
!
asyncGenObj
-
>
hasCachedRequest
(
)
)
{
return
AsyncGeneratorRequest
:
:
create
(
cx
completionKind
completionValue
promise
)
;
}
AsyncGeneratorRequest
*
request
=
asyncGenObj
-
>
takeCachedRequest
(
)
;
request
-
>
init
(
completionKind
completionValue
promise
)
;
return
request
;
}
[
[
nodiscard
]
]
bool
AsyncGeneratorObject
:
:
enqueueRequest
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
Handle
<
AsyncGeneratorRequest
*
>
request
)
{
if
(
asyncGenObj
-
>
isSingleQueue
(
)
)
{
if
(
asyncGenObj
-
>
isSingleQueueEmpty
(
)
)
{
asyncGenObj
-
>
setSingleQueueRequest
(
request
)
;
return
true
;
}
Rooted
<
ListObject
*
>
queue
(
cx
ListObject
:
:
create
(
cx
)
)
;
if
(
!
queue
)
{
return
false
;
}
RootedValue
requestVal
(
cx
ObjectValue
(
*
asyncGenObj
-
>
singleQueueRequest
(
)
)
)
;
if
(
!
queue
-
>
append
(
cx
requestVal
)
)
{
return
false
;
}
requestVal
=
ObjectValue
(
*
request
)
;
if
(
!
queue
-
>
append
(
cx
requestVal
)
)
{
return
false
;
}
asyncGenObj
-
>
setQueue
(
queue
)
;
return
true
;
}
Rooted
<
ListObject
*
>
queue
(
cx
asyncGenObj
-
>
queue
(
)
)
;
RootedValue
requestVal
(
cx
ObjectValue
(
*
request
)
)
;
return
queue
-
>
append
(
cx
requestVal
)
;
}
AsyncGeneratorRequest
*
AsyncGeneratorObject
:
:
dequeueRequest
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
)
{
if
(
asyncGenObj
-
>
isSingleQueue
(
)
)
{
AsyncGeneratorRequest
*
request
=
asyncGenObj
-
>
singleQueueRequest
(
)
;
asyncGenObj
-
>
clearSingleQueueRequest
(
)
;
return
request
;
}
Rooted
<
ListObject
*
>
queue
(
cx
asyncGenObj
-
>
queue
(
)
)
;
return
&
queue
-
>
popFirstAs
<
AsyncGeneratorRequest
>
(
cx
)
;
}
AsyncGeneratorRequest
*
AsyncGeneratorObject
:
:
peekRequest
(
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
)
{
if
(
asyncGenObj
-
>
isSingleQueue
(
)
)
{
return
asyncGenObj
-
>
singleQueueRequest
(
)
;
}
return
&
asyncGenObj
-
>
queue
(
)
-
>
getAs
<
AsyncGeneratorRequest
>
(
0
)
;
}
const
JSClass
AsyncGeneratorRequest
:
:
class_
=
{
"
AsyncGeneratorRequest
"
JSCLASS_HAS_RESERVED_SLOTS
(
AsyncGeneratorRequest
:
:
Slots
)
}
;
AsyncGeneratorRequest
*
AsyncGeneratorRequest
:
:
create
(
JSContext
*
cx
CompletionKind
completionKind
HandleValue
completionValue
Handle
<
PromiseObject
*
>
promise
)
{
AsyncGeneratorRequest
*
request
=
NewObjectWithGivenProto
<
AsyncGeneratorRequest
>
(
cx
nullptr
)
;
if
(
!
request
)
{
return
nullptr
;
}
request
-
>
init
(
completionKind
completionValue
promise
)
;
return
request
;
}
static
MOZ_MUST_USE
bool
AsyncGeneratorReturned
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
)
{
asyncGenObj
-
>
setCompleted
(
)
;
return
AsyncGeneratorResolve
(
cx
asyncGenObj
value
true
)
;
}
static
MOZ_MUST_USE
bool
AsyncGeneratorThrown
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
)
{
asyncGenObj
-
>
setCompleted
(
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
)
{
return
false
;
}
RootedValue
value
(
cx
)
;
if
(
!
GetAndClearException
(
cx
&
value
)
)
{
return
false
;
}
return
AsyncGeneratorReject
(
cx
asyncGenObj
value
)
;
}
static
MOZ_MUST_USE
bool
AsyncGeneratorYield
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
)
{
asyncGenObj
-
>
setSuspendedYield
(
)
;
return
AsyncGeneratorResolve
(
cx
asyncGenObj
value
false
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
AsyncGeneratorResume
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
CompletionKind
completionKind
HandleValue
argument
)
{
MOZ_ASSERT
(
!
asyncGenObj
-
>
isClosed
(
)
"
closed
generator
when
resuming
async
generator
"
)
;
MOZ_ASSERT
(
asyncGenObj
-
>
isSuspended
(
)
"
non
-
suspended
generator
when
resuming
async
generator
"
)
;
MOZ_ASSERT
(
asyncGenObj
-
>
isExecuting
(
)
"
async
generator
not
set
into
'
executing
'
state
"
)
;
HandlePropertyName
funName
=
completionKind
=
=
CompletionKind
:
:
Normal
?
cx
-
>
names
(
)
.
AsyncGeneratorNext
:
completionKind
=
=
CompletionKind
:
:
Throw
?
cx
-
>
names
(
)
.
AsyncGeneratorThrow
:
cx
-
>
names
(
)
.
AsyncGeneratorReturn
;
FixedInvokeArgs
<
1
>
args
(
cx
)
;
args
[
0
]
.
set
(
argument
)
;
RootedValue
thisOrRval
(
cx
ObjectValue
(
*
asyncGenObj
)
)
;
if
(
!
CallSelfHostedFunction
(
cx
funName
thisOrRval
args
&
thisOrRval
)
)
{
if
(
!
asyncGenObj
-
>
isClosed
(
)
)
{
asyncGenObj
-
>
setClosed
(
)
;
}
return
AsyncGeneratorThrown
(
cx
asyncGenObj
)
;
}
if
(
asyncGenObj
-
>
isAfterAwait
(
)
)
{
return
AsyncGeneratorAwait
(
cx
asyncGenObj
thisOrRval
)
;
}
if
(
asyncGenObj
-
>
isAfterYield
(
)
)
{
return
AsyncGeneratorYield
(
cx
asyncGenObj
thisOrRval
)
;
}
return
AsyncGeneratorReturned
(
cx
asyncGenObj
thisOrRval
)
;
}
static
const
JSFunctionSpec
async_iterator_proto_methods
[
]
=
{
JS_SELF_HOSTED_SYM_FN
(
asyncIterator
"
AsyncIteratorIdentity
"
0
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
async_iterator_proto_methods_with_helpers
[
]
=
{
JS_SELF_HOSTED_FN
(
"
map
"
"
AsyncIteratorMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
filter
"
"
AsyncIteratorFilter
"
1
0
)
JS_SELF_HOSTED_FN
(
"
take
"
"
AsyncIteratorTake
"
1
0
)
JS_SELF_HOSTED_FN
(
"
drop
"
"
AsyncIteratorDrop
"
1
0
)
JS_SELF_HOSTED_FN
(
"
asIndexedPairs
"
"
AsyncIteratorAsIndexedPairs
"
0
0
)
JS_SELF_HOSTED_FN
(
"
flatMap
"
"
AsyncIteratorFlatMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reduce
"
"
AsyncIteratorReduce
"
1
0
)
JS_SELF_HOSTED_FN
(
"
toArray
"
"
AsyncIteratorToArray
"
0
0
)
JS_SELF_HOSTED_FN
(
"
forEach
"
"
AsyncIteratorForEach
"
1
0
)
JS_SELF_HOSTED_FN
(
"
some
"
"
AsyncIteratorSome
"
1
0
)
JS_SELF_HOSTED_FN
(
"
every
"
"
AsyncIteratorEvery
"
1
0
)
JS_SELF_HOSTED_FN
(
"
find
"
"
AsyncIteratorFind
"
1
0
)
JS_SELF_HOSTED_SYM_FN
(
asyncIterator
"
AsyncIteratorIdentity
"
0
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
async_from_sync_iter_methods
[
]
=
{
JS_FN
(
"
next
"
AsyncFromSyncIteratorNext
1
0
)
JS_FN
(
"
throw
"
AsyncFromSyncIteratorThrow
1
0
)
JS_FN
(
"
return
"
AsyncFromSyncIteratorReturn
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
async_generator_methods
[
]
=
{
JS_FN
(
"
next
"
js
:
:
AsyncGeneratorNext
1
0
)
JS_FN
(
"
throw
"
js
:
:
AsyncGeneratorThrow
1
0
)
JS_FN
(
"
return
"
js
:
:
AsyncGeneratorReturn
1
0
)
JS_FS_END
}
;
bool
GlobalObject
:
:
initAsyncIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
getReservedSlot
(
ASYNC_ITERATOR_PROTO
)
.
isObject
(
)
)
{
return
true
;
}
RootedObject
asyncIterProto
(
cx
GlobalObject
:
:
createBlankPrototype
<
PlainObject
>
(
cx
global
)
)
;
if
(
!
asyncIterProto
)
{
return
false
;
}
if
(
!
DefinePropertiesAndFunctions
(
cx
asyncIterProto
nullptr
async_iterator_proto_methods
)
)
{
return
false
;
}
global
-
>
setReservedSlot
(
ASYNC_ITERATOR_PROTO
ObjectValue
(
*
asyncIterProto
)
)
;
return
true
;
}
bool
GlobalObject
:
:
initAsyncFromSyncIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
getReservedSlot
(
ASYNC_FROM_SYNC_ITERATOR_PROTO
)
.
isObject
(
)
)
{
return
true
;
}
RootedObject
asyncIterProto
(
cx
GlobalObject
:
:
getOrCreateAsyncIteratorPrototype
(
cx
global
)
)
;
if
(
!
asyncIterProto
)
{
return
false
;
}
RootedObject
asyncFromSyncIterProto
(
cx
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
&
PlainObject
:
:
class_
asyncIterProto
)
)
;
if
(
!
asyncFromSyncIterProto
)
{
return
false
;
}
if
(
!
DefinePropertiesAndFunctions
(
cx
asyncFromSyncIterProto
nullptr
async_from_sync_iter_methods
)
|
|
!
DefineToStringTag
(
cx
asyncFromSyncIterProto
cx
-
>
names
(
)
.
AsyncFromSyncIterator
)
)
{
return
false
;
}
global
-
>
setReservedSlot
(
ASYNC_FROM_SYNC_ITERATOR_PROTO
ObjectValue
(
*
asyncFromSyncIterProto
)
)
;
return
true
;
}
static
JSObject
*
CreateAsyncGeneratorFunction
(
JSContext
*
cx
JSProtoKey
key
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateFunctionConstructor
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
HandlePropertyName
name
=
cx
-
>
names
(
)
.
AsyncGeneratorFunction
;
return
NewFunctionWithProto
(
cx
AsyncGeneratorConstructor
1
FunctionFlags
:
:
NATIVE_CTOR
nullptr
name
proto
gc
:
:
AllocKind
:
:
FUNCTION
TenuredObject
)
;
}
static
JSObject
*
CreateAsyncGeneratorFunctionPrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
return
NewTenuredObjectWithFunctionPrototype
(
cx
cx
-
>
global
(
)
)
;
}
static
bool
AsyncGeneratorFunctionClassFinish
(
JSContext
*
cx
HandleObject
asyncGenFunction
HandleObject
asyncGenerator
)
{
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
MOZ_ASSERT
(
StringEqualsAscii
(
JSID_TO_LINEAR_STRING
(
asyncGenerator
-
>
as
<
NativeObject
>
(
)
.
lastProperty
(
)
-
>
propid
(
)
)
"
constructor
"
)
)
;
MOZ_ASSERT
(
!
asyncGenerator
-
>
as
<
NativeObject
>
(
)
.
inDictionaryMode
(
)
)
;
RootedValue
asyncGenFunctionVal
(
cx
ObjectValue
(
*
asyncGenFunction
)
)
;
if
(
!
DefineDataProperty
(
cx
asyncGenerator
cx
-
>
names
(
)
.
constructor
asyncGenFunctionVal
JSPROP_READONLY
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
asyncGenerator
-
>
as
<
NativeObject
>
(
)
.
inDictionaryMode
(
)
)
;
RootedObject
asyncIterProto
(
cx
GlobalObject
:
:
getOrCreateAsyncIteratorPrototype
(
cx
global
)
)
;
if
(
!
asyncIterProto
)
{
return
false
;
}
RootedObject
asyncGenProto
(
cx
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
&
PlainObject
:
:
class_
asyncIterProto
)
)
;
if
(
!
asyncGenProto
)
{
return
false
;
}
if
(
!
DefinePropertiesAndFunctions
(
cx
asyncGenProto
nullptr
async_generator_methods
)
|
|
!
DefineToStringTag
(
cx
asyncGenProto
cx
-
>
names
(
)
.
AsyncGenerator
)
)
{
return
false
;
}
if
(
!
LinkConstructorAndPrototype
(
cx
asyncGenerator
asyncGenProto
JSPROP_READONLY
JSPROP_READONLY
)
|
|
!
DefineToStringTag
(
cx
asyncGenerator
cx
-
>
names
(
)
.
AsyncGeneratorFunction
)
)
{
return
false
;
}
global
-
>
setAsyncGeneratorPrototype
(
asyncGenProto
)
;
return
true
;
}
static
const
ClassSpec
AsyncGeneratorFunctionClassSpec
=
{
CreateAsyncGeneratorFunction
CreateAsyncGeneratorFunctionPrototype
nullptr
nullptr
nullptr
nullptr
AsyncGeneratorFunctionClassFinish
ClassSpec
:
:
DontDefineConstructor
}
;
const
JSClass
js
:
:
AsyncGeneratorFunctionClass
=
{
"
AsyncGeneratorFunction
"
0
JS_NULL_CLASS_OPS
&
AsyncGeneratorFunctionClassSpec
}
;
static
bool
AsyncIteratorConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
js_AsyncIterator_str
)
)
{
return
false
;
}
if
(
args
.
callee
(
)
=
=
args
.
newTarget
(
)
.
toObject
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BOGUS_CONSTRUCTOR
js_AsyncIterator_str
)
;
return
false
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_AsyncIterator
&
proto
)
)
{
return
false
;
}
JSObject
*
obj
=
NewObjectWithClassProto
<
AsyncIteratorObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
const
ClassSpec
AsyncIteratorObjectClassSpec
=
{
GenericCreateConstructor
<
AsyncIteratorConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
AsyncIteratorObject
>
nullptr
nullptr
async_iterator_proto_methods_with_helpers
nullptr
nullptr
}
;
const
JSClass
AsyncIteratorObject
:
:
class_
=
{
js_AsyncIterator_str
JSCLASS_HAS_CACHED_PROTO
(
JSProto_AsyncIterator
)
JS_NULL_CLASS_OPS
&
AsyncIteratorObjectClassSpec
}
;
const
JSClass
AsyncIteratorObject
:
:
protoClass_
=
{
"
AsyncIterator
.
prototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_AsyncIterator
)
JS_NULL_CLASS_OPS
&
AsyncIteratorObjectClassSpec
}
;
static
const
JSFunctionSpec
async_iterator_helper_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
AsyncIteratorHelperNext
"
1
0
)
JS_SELF_HOSTED_FN
(
"
return
"
"
AsyncIteratorHelperReturn
"
1
0
)
JS_SELF_HOSTED_FN
(
"
throw
"
"
AsyncIteratorHelperThrow
"
1
0
)
JS_FS_END
}
;
static
const
JSClass
AsyncIteratorHelperPrototypeClass
=
{
"
Async
Iterator
Helper
"
0
}
;
const
JSClass
AsyncIteratorHelperObject
:
:
class_
=
{
"
Async
Iterator
Helper
"
JSCLASS_HAS_RESERVED_SLOTS
(
AsyncIteratorHelperObject
:
:
SlotCount
)
}
;
NativeObject
*
GlobalObject
:
:
getOrCreateAsyncIteratorHelperPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateObject
(
cx
global
ASYNC_ITERATOR_HELPER_PROTO
initAsyncIteratorHelperProto
)
)
;
}
bool
GlobalObject
:
:
initAsyncIteratorHelperProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
getReservedSlot
(
ASYNC_ITERATOR_HELPER_PROTO
)
.
isObject
(
)
)
{
return
true
;
}
RootedObject
asyncIterProto
(
cx
GlobalObject
:
:
getOrCreateAsyncIteratorPrototype
(
cx
global
)
)
;
if
(
!
asyncIterProto
)
{
return
false
;
}
RootedObject
asyncIteratorHelperProto
(
cx
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
&
AsyncIteratorHelperPrototypeClass
asyncIterProto
)
)
;
if
(
!
asyncIteratorHelperProto
)
{
return
false
;
}
if
(
!
DefinePropertiesAndFunctions
(
cx
asyncIteratorHelperProto
nullptr
async_iterator_helper_methods
)
)
{
return
false
;
}
global
-
>
setReservedSlot
(
ASYNC_ITERATOR_HELPER_PROTO
ObjectValue
(
*
asyncIteratorHelperProto
)
)
;
return
true
;
}
AsyncIteratorHelperObject
*
js
:
:
NewAsyncIteratorHelper
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateAsyncIteratorHelperPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
AsyncIteratorHelperObject
>
(
cx
proto
)
;
}
