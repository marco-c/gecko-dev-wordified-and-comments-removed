#
include
"
vm
/
InvalidatingFuse
.
h
"
#
include
"
gc
/
PublicIterators
.
h
"
#
include
"
jit
/
Invalidation
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
gc
/
StableCellHasher
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
js
:
:
DependentScriptSet
:
:
DependentScriptSet
(
JSContext
*
cx
InvalidatingFuse
*
fuse
)
:
associatedFuse
(
fuse
)
weakScripts
(
cx
-
>
runtime
(
)
)
{
}
bool
js
:
:
InvalidatingRuntimeFuse
:
:
addFuseDependency
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
)
{
auto
*
zone
=
script
-
>
zone
(
)
;
DependentScriptSet
*
dss
=
zone
-
>
fuseDependencies
.
getOrCreateDependentScriptSet
(
cx
this
)
;
if
(
!
dss
)
{
return
false
;
}
return
dss
-
>
addScriptForFuse
(
this
script
)
;
}
void
js
:
:
InvalidatingRuntimeFuse
:
:
popFuse
(
JSContext
*
cx
)
{
GuardFuse
:
:
popFuse
(
cx
)
;
for
(
AllZonesIter
z
(
cx
-
>
runtime
(
)
)
;
!
z
.
done
(
)
;
z
.
next
(
)
)
{
for
(
auto
&
fd
:
z
.
get
(
)
-
>
fuseDependencies
)
{
fd
.
invalidateForFuse
(
cx
this
)
;
}
}
}
void
js
:
:
DependentScriptSet
:
:
invalidateForFuse
(
JSContext
*
cx
InvalidatingFuse
*
fuse
)
{
if
(
associatedFuse
!
=
fuse
)
{
return
;
}
jit
:
:
InvalidateAndClearScriptSet
(
cx
weakScripts
"
fuse
"
)
;
}
void
js
:
:
jit
:
:
InvalidateAndClearScriptSet
(
JSContext
*
cx
WeakScriptCache
&
scripts
const
char
*
reason
)
{
for
(
auto
r
=
scripts
.
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
JSScript
*
script
=
r
.
front
(
)
.
get
(
)
;
if
(
script
-
>
hasIonScript
(
)
)
{
JitSpew
(
jit
:
:
JitSpew_IonInvalidate
"
Invalidating
ion
script
%
p
for
%
s
"
script
-
>
ionScript
(
)
reason
)
;
js
:
:
jit
:
:
Invalidate
(
cx
script
)
;
}
}
scripts
.
clear
(
)
;
}
bool
js
:
:
DependentScriptSet
:
:
addScriptForFuse
(
InvalidatingFuse
*
fuse
Handle
<
JSScript
*
>
script
)
{
MOZ_ASSERT
(
fuse
=
=
associatedFuse
)
;
return
jit
:
:
AddScriptToSet
(
weakScripts
script
)
;
}
js
:
:
DependentScriptSet
*
js
:
:
DependentScriptGroup
:
:
getOrCreateDependentScriptSet
(
JSContext
*
cx
js
:
:
InvalidatingFuse
*
fuse
)
{
for
(
auto
&
dss
:
dependencies
)
{
if
(
dss
.
associatedFuse
=
=
fuse
)
{
return
&
dss
;
}
}
if
(
!
dependencies
.
emplaceBack
(
cx
fuse
)
)
{
return
nullptr
;
}
auto
&
dss
=
dependencies
.
back
(
)
;
MOZ_ASSERT
(
dss
.
associatedFuse
=
=
fuse
)
;
return
&
dss
;
}
bool
js
:
:
jit
:
:
AddScriptToSet
(
WeakScriptCache
&
scripts
Handle
<
JSScript
*
>
script
)
{
js
:
:
jit
:
:
WeakScriptSet
:
:
AddPtr
p
=
scripts
.
lookupForAdd
(
script
)
;
if
(
!
p
)
{
if
(
!
scripts
.
add
(
p
script
)
)
{
return
false
;
}
}
return
true
;
}
