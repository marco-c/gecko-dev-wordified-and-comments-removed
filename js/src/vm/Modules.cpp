#
include
"
vm
/
Modules
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
ds
/
Sort
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
frontend
/
FrontendContext
.
h
"
#
include
"
js
/
Context
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
JSAtomUtils
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
List
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
JSAtomUtils
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
Utf8Unit
;
JS_PUBLIC_API
void
JS
:
:
SetSupportedImportAssertions
(
JSRuntime
*
rt
const
ImportAssertionVector
&
assertions
)
{
AssertHeapIsIdle
(
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
rt
)
)
;
MOZ_ASSERT
(
rt
-
>
supportedImportAssertions
.
ref
(
)
.
empty
(
)
)
;
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
rt
-
>
supportedImportAssertions
.
ref
(
)
.
appendAll
(
assertions
)
)
{
oomUnsafe
.
crash
(
"
SetSupportedImportAssertions
"
)
;
}
}
JS_PUBLIC_API
JS
:
:
ModuleResolveHook
JS
:
:
GetModuleResolveHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleResolveHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleResolveHook
(
JSRuntime
*
rt
ModuleResolveHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleResolveHook
=
func
;
}
JS_PUBLIC_API
JS
:
:
ModuleMetadataHook
JS
:
:
GetModuleMetadataHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleMetadataHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleMetadataHook
(
JSRuntime
*
rt
ModuleMetadataHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleMetadataHook
=
func
;
}
JS_PUBLIC_API
JS
:
:
ModuleDynamicImportHook
JS
:
:
GetModuleDynamicImportHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleDynamicImportHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleDynamicImportHook
(
JSRuntime
*
rt
ModuleDynamicImportHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleDynamicImportHook
=
func
;
}
JS_PUBLIC_API
bool
JS
:
:
FinishDynamicModuleImport
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
Handle
<
Value
>
referencingPrivate
Handle
<
JSObject
*
>
moduleRequest
Handle
<
JSObject
*
>
promise
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
referencingPrivate
promise
)
;
return
js
:
:
FinishDynamicModuleImport
(
cx
evaluationPromise
referencingPrivate
moduleRequest
promise
)
;
}
template
<
typename
Unit
>
static
JSObject
*
CompileModuleHelper
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Unit
>
&
srcBuf
)
{
MOZ_ASSERT
(
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
JS
:
:
Rooted
<
JSObject
*
>
mod
(
cx
)
;
{
AutoReportFrontendContext
fc
(
cx
)
;
mod
=
frontend
:
:
CompileModule
(
cx
&
fc
options
srcBuf
)
;
}
return
mod
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CompileModuleHelper
(
cx
options
srcBuf
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
return
CompileModuleHelper
(
cx
options
srcBuf
)
;
}
JS_PUBLIC_API
void
JS
:
:
SetModulePrivate
(
JSObject
*
module
const
Value
&
value
)
{
JSRuntime
*
rt
=
module
-
>
zone
(
)
-
>
runtimeFromMainThread
(
)
;
module
-
>
as
<
ModuleObject
>
(
)
.
scriptSourceObject
(
)
-
>
setPrivate
(
rt
value
)
;
}
JS_PUBLIC_API
void
JS
:
:
ClearModulePrivate
(
JSObject
*
module
)
{
JSRuntime
*
rt
=
module
-
>
zone
(
)
-
>
runtimeFromMainThread
(
)
;
module
-
>
as
<
ModuleObject
>
(
)
.
scriptSourceObject
(
)
-
>
clearPrivate
(
rt
)
;
}
JS_PUBLIC_API
JS
:
:
Value
JS
:
:
GetModulePrivate
(
JSObject
*
module
)
{
return
module
-
>
as
<
ModuleObject
>
(
)
.
scriptSourceObject
(
)
-
>
getPrivate
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ModuleLink
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
releaseCheck
(
moduleArg
)
;
return
js
:
:
ModuleLink
(
cx
moduleArg
.
as
<
ModuleObject
>
(
)
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ModuleEvaluate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
MutableHandle
<
JS
:
:
Value
>
rval
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
releaseCheck
(
moduleRecord
)
;
return
js
:
:
ModuleEvaluate
(
cx
moduleRecord
.
as
<
ModuleObject
>
(
)
rval
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ThrowOnModuleEvaluationFailure
(
JSContext
*
cx
Handle
<
JSObject
*
>
evaluationPromise
ModuleErrorBehaviour
errorBehaviour
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
releaseCheck
(
evaluationPromise
)
;
return
OnModuleEvaluationFailure
(
cx
evaluationPromise
errorBehaviour
)
;
}
JS_PUBLIC_API
uint32_t
JS
:
:
GetRequestedModulesCount
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleRecord
)
;
return
moduleRecord
-
>
as
<
ModuleObject
>
(
)
.
requestedModules
(
)
.
Length
(
)
;
}
JS_PUBLIC_API
JSString
*
JS
:
:
GetRequestedModuleSpecifier
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
uint32_t
index
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleRecord
)
;
auto
&
module
=
moduleRecord
-
>
as
<
ModuleObject
>
(
)
;
return
module
.
requestedModules
(
)
[
index
]
.
moduleRequest
(
)
-
>
specifier
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
GetRequestedModuleSourcePos
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRecord
uint32_t
index
uint32_t
*
lineNumber
uint32_t
*
columnNumber
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleRecord
)
;
MOZ_ASSERT
(
lineNumber
)
;
MOZ_ASSERT
(
columnNumber
)
;
auto
&
module
=
moduleRecord
-
>
as
<
ModuleObject
>
(
)
;
*
lineNumber
=
module
.
requestedModules
(
)
[
index
]
.
lineNumber
(
)
;
*
columnNumber
=
module
.
requestedModules
(
)
[
index
]
.
columnNumber
(
)
;
}
JS_PUBLIC_API
JSScript
*
JS
:
:
GetModuleScript
(
JS
:
:
HandleObject
moduleRecord
)
{
AssertHeapIsIdle
(
)
;
return
moduleRecord
-
>
as
<
ModuleObject
>
(
)
.
script
(
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetModuleObject
(
HandleScript
moduleScript
)
{
AssertHeapIsIdle
(
)
;
MOZ_ASSERT
(
moduleScript
-
>
isModule
(
)
)
;
return
moduleScript
-
>
module
(
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetModuleNamespace
(
JSContext
*
cx
HandleObject
moduleRecord
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleRecord
)
;
MOZ_ASSERT
(
moduleRecord
-
>
is
<
ModuleObject
>
(
)
)
;
return
GetOrCreateModuleNamespace
(
cx
moduleRecord
.
as
<
ModuleObject
>
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetModuleForNamespace
(
JSContext
*
cx
HandleObject
moduleNamespace
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleNamespace
)
;
MOZ_ASSERT
(
moduleNamespace
-
>
is
<
ModuleNamespaceObject
>
(
)
)
;
return
&
moduleNamespace
-
>
as
<
ModuleNamespaceObject
>
(
)
.
module
(
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetModuleEnvironment
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleObj
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleObj
)
;
MOZ_ASSERT
(
moduleObj
-
>
is
<
ModuleObject
>
(
)
)
;
return
moduleObj
-
>
as
<
ModuleObject
>
(
)
.
environment
(
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
CreateModuleRequest
(
JSContext
*
cx
Handle
<
JSString
*
>
specifierArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
JSAtom
*
>
specifierAtom
(
cx
AtomizeString
(
cx
specifierArg
)
)
;
if
(
!
specifierAtom
)
{
return
nullptr
;
}
return
ModuleRequestObject
:
:
create
(
cx
specifierAtom
nullptr
)
;
}
JS_PUBLIC_API
JSString
*
JS
:
:
GetModuleRequestSpecifier
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleRequestArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleRequestArg
)
;
return
moduleRequestArg
-
>
as
<
ModuleRequestObject
>
(
)
.
specifier
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
ClearModuleEnvironment
(
JSObject
*
moduleObj
)
{
MOZ_ASSERT
(
moduleObj
)
;
AssertHeapIsIdle
(
)
;
js
:
:
ModuleEnvironmentObject
*
env
=
moduleObj
-
>
as
<
js
:
:
ModuleObject
>
(
)
.
environment
(
)
;
if
(
!
env
)
{
return
;
}
const
JSClass
*
clasp
=
env
-
>
getClass
(
)
;
uint32_t
numReserved
=
JSCLASS_RESERVED_SLOTS
(
clasp
)
;
uint32_t
numSlots
=
env
-
>
slotSpan
(
)
;
for
(
uint32_t
i
=
numReserved
;
i
<
numSlots
;
i
+
+
)
{
env
-
>
setSlot
(
i
UndefinedValue
(
)
)
;
}
}
JS_PUBLIC_API
void
JS
:
:
AssertModuleUnlinked
(
JSObject
*
moduleObj
)
{
MOZ_ASSERT
(
moduleObj
)
;
AssertHeapIsIdle
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
moduleObj
-
>
as
<
ModuleObject
>
(
)
.
status
(
)
=
=
ModuleStatus
:
:
Unlinked
)
;
}
class
ResolveSetEntry
{
ModuleObject
*
module_
;
JSAtom
*
exportName_
;
public
:
ResolveSetEntry
(
ModuleObject
*
module
JSAtom
*
exportName
)
:
module_
(
module
)
exportName_
(
exportName
)
{
}
ModuleObject
*
module
(
)
const
{
return
module_
;
}
JSAtom
*
exportName
(
)
const
{
return
exportName_
;
}
void
trace
(
JSTracer
*
trc
)
{
TraceRoot
(
trc
&
module_
"
ResolveSetEntry
:
:
module_
"
)
;
TraceRoot
(
trc
&
exportName_
"
ResolveSetEntry
:
:
exportName_
"
)
;
}
}
;
using
ResolveSet
=
GCVector
<
ResolveSetEntry
0
SystemAllocPolicy
>
;
using
ModuleSet
=
GCHashSet
<
ModuleObject
*
DefaultHasher
<
ModuleObject
*
>
SystemAllocPolicy
>
;
static
ModuleObject
*
HostResolveImportedModule
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
ModuleRequestObject
*
>
moduleRequest
ModuleStatus
expectedMinimumStatus
)
;
static
bool
ModuleResolveExport
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
exportName
MutableHandle
<
ResolveSet
>
resolveSet
MutableHandle
<
Value
>
result
)
;
static
ModuleNamespaceObject
*
ModuleNamespaceCreate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
UniquePtr
<
ExportNameVector
>
>
exports
)
;
static
bool
InnerModuleLinking
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
stack
size_t
index
size_t
*
indexOut
)
;
static
bool
InnerModuleEvaluation
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
stack
size_t
index
size_t
*
indexOut
)
;
static
bool
ExecuteAsyncModule
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
static
bool
GatherAvailableModuleAncestors
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
execList
)
;
static
const
char
*
ModuleStatusName
(
ModuleStatus
status
)
{
switch
(
status
)
{
case
ModuleStatus
:
:
Unlinked
:
return
"
Unlinked
"
;
case
ModuleStatus
:
:
Linking
:
return
"
Linking
"
;
case
ModuleStatus
:
:
Linked
:
return
"
Linked
"
;
case
ModuleStatus
:
:
Evaluating
:
return
"
Evaluating
"
;
case
ModuleStatus
:
:
EvaluatingAsync
:
return
"
EvaluatingAsync
"
;
case
ModuleStatus
:
:
Evaluated
:
return
"
Evaluated
"
;
default
:
MOZ_CRASH
(
"
Unexpected
ModuleStatus
"
)
;
}
}
static
bool
ContainsElement
(
Handle
<
ExportNameVector
>
list
JSAtom
*
atom
)
{
for
(
JSAtom
*
a
:
list
)
{
if
(
a
=
=
atom
)
{
return
true
;
}
}
return
false
;
}
static
bool
ContainsElement
(
Handle
<
ModuleVector
>
stack
ModuleObject
*
module
)
{
for
(
ModuleObject
*
m
:
stack
)
{
if
(
m
=
=
module
)
{
return
true
;
}
}
return
false
;
}
#
ifdef
DEBUG
static
size_t
CountElements
(
Handle
<
ModuleVector
>
stack
ModuleObject
*
module
)
{
size_t
count
=
0
;
for
(
ModuleObject
*
m
:
stack
)
{
if
(
m
=
=
module
)
{
count
+
+
;
}
}
return
count
;
}
#
endif
static
bool
ModuleGetExportedNames
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleSet
>
exportStarSet
MutableHandle
<
ExportNameVector
>
exportedNames
)
{
MOZ_ASSERT
(
exportedNames
.
empty
(
)
)
;
if
(
exportStarSet
.
has
(
module
)
)
{
return
true
;
}
if
(
!
exportStarSet
.
put
(
module
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
const
ExportEntry
&
e
:
module
-
>
localExportEntries
(
)
)
{
if
(
!
exportedNames
.
append
(
e
.
exportName
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
for
(
const
ExportEntry
&
e
:
module
-
>
indirectExportEntries
(
)
)
{
if
(
!
exportedNames
.
append
(
e
.
exportName
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
Rooted
<
ModuleRequestObject
*
>
moduleRequest
(
cx
)
;
Rooted
<
ModuleObject
*
>
requestedModule
(
cx
)
;
Rooted
<
JSAtom
*
>
name
(
cx
)
;
for
(
const
ExportEntry
&
e
:
module
-
>
starExportEntries
(
)
)
{
moduleRequest
=
e
.
moduleRequest
(
)
;
requestedModule
=
HostResolveImportedModule
(
cx
module
moduleRequest
ModuleStatus
:
:
Unlinked
)
;
if
(
!
requestedModule
)
{
return
false
;
}
Rooted
<
ExportNameVector
>
starNames
(
cx
)
;
if
(
!
ModuleGetExportedNames
(
cx
requestedModule
exportStarSet
&
starNames
)
)
{
return
false
;
}
for
(
JSAtom
*
name
:
starNames
)
{
if
(
name
!
=
cx
-
>
names
(
)
.
default_
)
{
if
(
!
ContainsElement
(
exportedNames
name
)
)
{
if
(
!
exportedNames
.
append
(
name
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
}
}
}
return
true
;
}
static
void
ThrowUnexpectedModuleStatus
(
JSContext
*
cx
ModuleStatus
status
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_MODULE_STATUS
ModuleStatusName
(
status
)
)
;
}
static
ModuleObject
*
HostResolveImportedModule
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
ModuleRequestObject
*
>
moduleRequest
ModuleStatus
expectedMinimumStatus
)
{
MOZ_ASSERT
(
module
)
;
MOZ_ASSERT
(
moduleRequest
)
;
Rooted
<
Value
>
referencingPrivate
(
cx
JS
:
:
GetModulePrivate
(
module
)
)
;
Rooted
<
ModuleObject
*
>
requestedModule
(
cx
)
;
requestedModule
=
CallModuleResolveHook
(
cx
referencingPrivate
moduleRequest
)
;
if
(
!
requestedModule
)
{
return
nullptr
;
}
if
(
requestedModule
-
>
status
(
)
<
expectedMinimumStatus
)
{
ThrowUnexpectedModuleStatus
(
cx
requestedModule
-
>
status
(
)
)
;
return
nullptr
;
}
return
requestedModule
;
}
bool
js
:
:
ModuleResolveExport
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
exportName
MutableHandle
<
Value
>
result
)
{
Rooted
<
ResolveSet
>
resolveSet
(
cx
)
;
return
:
:
ModuleResolveExport
(
cx
module
exportName
&
resolveSet
result
)
;
}
static
bool
CreateResolvedBindingObject
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
bindingName
MutableHandle
<
Value
>
result
)
{
Rooted
<
ResolvedBindingObject
*
>
obj
(
cx
ResolvedBindingObject
:
:
create
(
cx
module
bindingName
)
)
;
if
(
!
obj
)
{
return
false
;
}
result
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
ModuleResolveExport
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
exportName
MutableHandle
<
ResolveSet
>
resolveSet
MutableHandle
<
Value
>
result
)
{
for
(
const
auto
&
entry
:
resolveSet
)
{
if
(
entry
.
module
(
)
=
=
module
&
&
entry
.
exportName
(
)
=
=
exportName
)
{
result
.
setNull
(
)
;
return
true
;
}
}
if
(
!
resolveSet
.
emplaceBack
(
module
exportName
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
const
ExportEntry
&
e
:
module
-
>
localExportEntries
(
)
)
{
if
(
exportName
=
=
e
.
exportName
(
)
)
{
Rooted
<
JSAtom
*
>
localName
(
cx
e
.
localName
(
)
)
;
return
CreateResolvedBindingObject
(
cx
module
localName
result
)
;
}
}
Rooted
<
ModuleRequestObject
*
>
moduleRequest
(
cx
)
;
Rooted
<
ModuleObject
*
>
importedModule
(
cx
)
;
Rooted
<
JSAtom
*
>
name
(
cx
)
;
for
(
const
ExportEntry
&
e
:
module
-
>
indirectExportEntries
(
)
)
{
if
(
exportName
=
=
e
.
exportName
(
)
)
{
moduleRequest
=
e
.
moduleRequest
(
)
;
importedModule
=
HostResolveImportedModule
(
cx
module
moduleRequest
ModuleStatus
:
:
Unlinked
)
;
if
(
!
importedModule
)
{
return
false
;
}
if
(
!
e
.
importName
(
)
)
{
name
=
cx
-
>
names
(
)
.
star_namespace_star_
;
return
CreateResolvedBindingObject
(
cx
importedModule
name
result
)
;
}
else
{
name
=
e
.
importName
(
)
;
return
ModuleResolveExport
(
cx
importedModule
name
resolveSet
result
)
;
}
}
}
if
(
exportName
=
=
cx
-
>
names
(
)
.
default_
)
{
result
.
setNull
(
)
;
return
true
;
}
Rooted
<
ResolvedBindingObject
*
>
starResolution
(
cx
)
;
Rooted
<
Value
>
resolution
(
cx
)
;
Rooted
<
ResolvedBindingObject
*
>
binding
(
cx
)
;
for
(
const
ExportEntry
&
e
:
module
-
>
starExportEntries
(
)
)
{
moduleRequest
=
e
.
moduleRequest
(
)
;
importedModule
=
HostResolveImportedModule
(
cx
module
moduleRequest
ModuleStatus
:
:
Unlinked
)
;
if
(
!
importedModule
)
{
return
false
;
}
if
(
!
ModuleResolveExport
(
cx
importedModule
exportName
resolveSet
&
resolution
)
)
{
return
false
;
}
if
(
resolution
=
=
StringValue
(
cx
-
>
names
(
)
.
ambiguous
)
)
{
result
.
set
(
resolution
)
;
return
true
;
}
if
(
!
resolution
.
isNull
(
)
)
{
binding
=
&
resolution
.
toObject
(
)
.
as
<
ResolvedBindingObject
>
(
)
;
if
(
!
starResolution
)
{
starResolution
=
binding
;
}
else
{
if
(
binding
-
>
module
(
)
!
=
starResolution
-
>
module
(
)
|
|
binding
-
>
bindingName
(
)
!
=
starResolution
-
>
bindingName
(
)
)
{
result
.
set
(
StringValue
(
cx
-
>
names
(
)
.
ambiguous
)
)
;
return
true
;
}
}
}
}
result
.
setObjectOrNull
(
starResolution
)
;
return
true
;
}
ModuleNamespaceObject
*
js
:
:
GetOrCreateModuleNamespace
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
MOZ_ASSERT
(
module
-
>
status
(
)
!
=
ModuleStatus
:
:
Unlinked
)
;
Rooted
<
ModuleNamespaceObject
*
>
ns
(
cx
module
-
>
namespace_
(
)
)
;
if
(
!
ns
)
{
Rooted
<
ModuleSet
>
exportStarSet
(
cx
)
;
Rooted
<
ExportNameVector
>
exportedNames
(
cx
)
;
if
(
!
ModuleGetExportedNames
(
cx
module
&
exportStarSet
&
exportedNames
)
)
{
return
nullptr
;
}
Rooted
<
UniquePtr
<
ExportNameVector
>
>
unambiguousNames
(
cx
cx
-
>
make_unique
<
ExportNameVector
>
(
)
)
;
if
(
!
unambiguousNames
)
{
return
nullptr
;
}
Rooted
<
JSAtom
*
>
name
(
cx
)
;
Rooted
<
Value
>
resolution
(
cx
)
;
for
(
JSAtom
*
atom
:
exportedNames
)
{
name
=
atom
;
if
(
!
ModuleResolveExport
(
cx
module
name
&
resolution
)
)
{
return
nullptr
;
}
if
(
resolution
.
isObject
(
)
&
&
!
unambiguousNames
-
>
append
(
name
)
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
}
ns
=
ModuleNamespaceCreate
(
cx
module
&
unambiguousNames
)
;
}
return
ns
;
}
static
bool
IsResolvedBinding
(
JSContext
*
cx
Handle
<
Value
>
resolution
)
{
MOZ_ASSERT
(
resolution
.
isObjectOrNull
(
)
|
|
resolution
.
toString
(
)
=
=
cx
-
>
names
(
)
.
ambiguous
)
;
return
resolution
.
isObject
(
)
;
}
static
void
InitNamespaceBinding
(
JSContext
*
cx
Handle
<
ModuleEnvironmentObject
*
>
env
Handle
<
JSAtom
*
>
name
Handle
<
ModuleNamespaceObject
*
>
ns
)
{
RootedId
id
(
cx
AtomToId
(
name
)
)
;
mozilla
:
:
Maybe
<
PropertyInfo
>
prop
=
env
-
>
lookup
(
cx
id
)
;
MOZ_ASSERT
(
prop
.
isSome
(
)
)
;
env
-
>
setSlot
(
prop
-
>
slot
(
)
ObjectValue
(
*
ns
)
)
;
}
struct
AtomComparator
{
bool
operator
(
)
(
JSAtom
*
a
JSAtom
*
b
bool
*
lessOrEqualp
)
{
int32_t
result
=
CompareStrings
(
a
b
)
;
*
lessOrEqualp
=
(
result
<
=
0
)
;
return
true
;
}
}
;
static
ModuleNamespaceObject
*
ModuleNamespaceCreate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
UniquePtr
<
ExportNameVector
>
>
exports
)
{
MOZ_ASSERT
(
!
module
-
>
namespace_
(
)
)
;
ExportNameVector
scratch
;
if
(
!
scratch
.
resize
(
exports
-
>
length
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
MOZ_ALWAYS_TRUE
(
MergeSort
(
exports
-
>
begin
(
)
exports
-
>
length
(
)
scratch
.
begin
(
)
AtomComparator
(
)
)
)
;
Rooted
<
ModuleNamespaceObject
*
>
ns
(
cx
ModuleObject
:
:
createNamespace
(
cx
module
exports
)
)
;
if
(
!
ns
)
{
return
nullptr
;
}
Rooted
<
JSAtom
*
>
name
(
cx
)
;
Rooted
<
Value
>
resolution
(
cx
)
;
Rooted
<
ResolvedBindingObject
*
>
binding
(
cx
)
;
Rooted
<
ModuleObject
*
>
importedModule
(
cx
)
;
Rooted
<
ModuleNamespaceObject
*
>
importedNamespace
(
cx
)
;
Rooted
<
JSAtom
*
>
bindingName
(
cx
)
;
for
(
JSAtom
*
atom
:
ns
-
>
exports
(
)
)
{
name
=
atom
;
if
(
!
ModuleResolveExport
(
cx
module
name
&
resolution
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
IsResolvedBinding
(
cx
resolution
)
)
;
binding
=
&
resolution
.
toObject
(
)
.
as
<
ResolvedBindingObject
>
(
)
;
importedModule
=
binding
-
>
module
(
)
;
bindingName
=
binding
-
>
bindingName
(
)
;
if
(
bindingName
=
=
cx
-
>
names
(
)
.
star_namespace_star_
)
{
importedNamespace
=
GetOrCreateModuleNamespace
(
cx
importedModule
)
;
if
(
!
importedNamespace
)
{
return
nullptr
;
}
Rooted
<
ModuleEnvironmentObject
*
>
env
(
cx
&
importedModule
-
>
initialEnvironment
(
)
)
;
InitNamespaceBinding
(
cx
env
bindingName
importedNamespace
)
;
}
if
(
!
ns
-
>
addBinding
(
cx
name
importedModule
bindingName
)
)
{
return
nullptr
;
}
}
return
ns
;
}
static
void
ThrowResolutionError
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
Value
>
resolution
bool
isDirectImport
Handle
<
JSAtom
*
>
name
uint32_t
line
uint32_t
column
)
{
MOZ_ASSERT
(
line
!
=
0
)
;
bool
isAmbiguous
=
resolution
=
=
StringValue
(
cx
-
>
names
(
)
.
ambiguous
)
;
static
constexpr
unsigned
ErrorNumbers
[
2
]
[
2
]
=
{
{
JSMSG_AMBIGUOUS_IMPORT
JSMSG_MISSING_IMPORT
}
{
JSMSG_AMBIGUOUS_INDIRECT_EXPORT
JSMSG_MISSING_INDIRECT_EXPORT
}
}
;
unsigned
errorNumber
=
ErrorNumbers
[
isDirectImport
]
[
isAmbiguous
]
;
const
JSErrorFormatString
*
errorString
=
GetErrorMessage
(
nullptr
errorNumber
)
;
MOZ_ASSERT
(
errorString
)
;
MOZ_ASSERT
(
errorString
-
>
argCount
=
=
0
)
;
Rooted
<
JSString
*
>
message
(
cx
JS_NewStringCopyZ
(
cx
errorString
-
>
format
)
)
;
if
(
!
message
)
{
return
;
}
Rooted
<
JSString
*
>
separator
(
cx
JS_NewStringCopyZ
(
cx
"
:
"
)
)
;
if
(
!
separator
)
{
return
;
}
message
=
ConcatStrings
<
CanGC
>
(
cx
message
separator
)
;
if
(
!
message
)
{
return
;
}
message
=
ConcatStrings
<
CanGC
>
(
cx
message
name
)
;
if
(
!
message
)
{
return
;
}
RootedString
filename
(
cx
)
;
if
(
const
char
*
chars
=
module
-
>
script
(
)
-
>
filename
(
)
)
{
filename
=
JS_NewStringCopyUTF8Z
(
cx
JS
:
:
ConstUTF8CharsZ
(
chars
strlen
(
chars
)
)
)
;
}
else
{
filename
=
cx
-
>
names
(
)
.
empty_
;
}
if
(
!
filename
)
{
return
;
}
RootedValue
error
(
cx
)
;
if
(
!
JS
:
:
CreateError
(
cx
JSEXN_SYNTAXERR
nullptr
filename
line
JSErrorBase
:
:
fromZeroOriginToOneOrigin
(
column
)
nullptr
message
JS
:
:
NothingHandleValue
&
error
)
)
{
return
;
}
cx
-
>
setPendingException
(
error
nullptr
)
;
}
bool
js
:
:
ModuleInitializeEnvironment
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
)
;
Rooted
<
JSAtom
*
>
exportName
(
cx
)
;
Rooted
<
Value
>
resolution
(
cx
)
;
for
(
const
ExportEntry
&
e
:
module
-
>
indirectExportEntries
(
)
)
{
exportName
=
e
.
exportName
(
)
;
if
(
!
ModuleResolveExport
(
cx
module
exportName
&
resolution
)
)
{
return
false
;
}
if
(
!
IsResolvedBinding
(
cx
resolution
)
)
{
ThrowResolutionError
(
cx
module
resolution
false
exportName
e
.
lineNumber
(
)
e
.
columnNumber
(
)
)
;
return
false
;
}
}
Rooted
<
ModuleEnvironmentObject
*
>
env
(
cx
&
module
-
>
initialEnvironment
(
)
)
;
Rooted
<
ModuleRequestObject
*
>
moduleRequest
(
cx
)
;
Rooted
<
ModuleObject
*
>
importedModule
(
cx
)
;
Rooted
<
JSAtom
*
>
importName
(
cx
)
;
Rooted
<
JSAtom
*
>
localName
(
cx
)
;
Rooted
<
ModuleObject
*
>
sourceModule
(
cx
)
;
Rooted
<
JSAtom
*
>
bindingName
(
cx
)
;
for
(
const
ImportEntry
&
in
:
module
-
>
importEntries
(
)
)
{
moduleRequest
=
in
.
moduleRequest
(
)
;
importedModule
=
HostResolveImportedModule
(
cx
module
moduleRequest
ModuleStatus
:
:
Linking
)
;
if
(
!
importedModule
)
{
return
false
;
}
localName
=
in
.
localName
(
)
;
importName
=
in
.
importName
(
)
;
if
(
!
importName
)
{
Rooted
<
ModuleNamespaceObject
*
>
ns
(
cx
GetOrCreateModuleNamespace
(
cx
importedModule
)
)
;
if
(
!
ns
)
{
return
false
;
}
InitNamespaceBinding
(
cx
env
localName
ns
)
;
}
else
{
if
(
!
ModuleResolveExport
(
cx
importedModule
importName
&
resolution
)
)
{
return
false
;
}
if
(
!
IsResolvedBinding
(
cx
resolution
)
)
{
ThrowResolutionError
(
cx
module
resolution
true
importName
in
.
lineNumber
(
)
in
.
columnNumber
(
)
)
;
return
false
;
}
auto
*
binding
=
&
resolution
.
toObject
(
)
.
as
<
ResolvedBindingObject
>
(
)
;
sourceModule
=
binding
-
>
module
(
)
;
bindingName
=
binding
-
>
bindingName
(
)
;
if
(
bindingName
=
=
cx
-
>
names
(
)
.
star_namespace_star_
)
{
Rooted
<
ModuleNamespaceObject
*
>
ns
(
cx
GetOrCreateModuleNamespace
(
cx
sourceModule
)
)
;
if
(
!
ns
)
{
return
false
;
}
Rooted
<
ModuleEnvironmentObject
*
>
sourceEnv
(
cx
&
sourceModule
-
>
initialEnvironment
(
)
)
;
InitNamespaceBinding
(
cx
sourceEnv
bindingName
ns
)
;
if
(
!
env
-
>
createImportBinding
(
cx
localName
sourceModule
bindingName
)
)
{
return
false
;
}
}
else
{
if
(
!
env
-
>
createImportBinding
(
cx
localName
sourceModule
bindingName
)
)
{
return
false
;
}
}
}
}
return
ModuleObject
:
:
instantiateFunctionDeclarations
(
cx
module
)
;
}
bool
js
:
:
ModuleLink
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
ModuleStatus
status
=
module
-
>
status
(
)
;
if
(
status
=
=
ModuleStatus
:
:
Linking
|
|
status
=
=
ModuleStatus
:
:
Evaluating
)
{
ThrowUnexpectedModuleStatus
(
cx
status
)
;
return
false
;
}
Rooted
<
ModuleVector
>
stack
(
cx
)
;
size_t
ignored
;
bool
ok
=
InnerModuleLinking
(
cx
module
&
stack
0
&
ignored
)
;
if
(
!
ok
)
{
for
(
ModuleObject
*
m
:
stack
)
{
MOZ_ASSERT
(
m
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
)
;
m
-
>
setStatus
(
ModuleStatus
:
:
Unlinked
)
;
m
-
>
clearDfsIndexes
(
)
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Unlinked
)
;
return
false
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Linked
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
MOZ_ASSERT
(
stack
.
empty
(
)
)
;
return
true
;
}
static
bool
InnerModuleLinking
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
stack
size_t
index
size_t
*
indexOut
)
{
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Linked
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
*
indexOut
=
index
;
return
true
;
}
if
(
module
-
>
status
(
)
!
=
ModuleStatus
:
:
Unlinked
)
{
ThrowUnexpectedModuleStatus
(
cx
module
-
>
status
(
)
)
;
return
false
;
}
if
(
!
stack
.
append
(
module
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
module
-
>
setStatus
(
ModuleStatus
:
:
Linking
)
;
module
-
>
setDfsIndex
(
index
)
;
module
-
>
setDfsAncestorIndex
(
index
)
;
index
+
+
;
Rooted
<
ModuleRequestObject
*
>
moduleRequest
(
cx
)
;
Rooted
<
ModuleObject
*
>
requiredModule
(
cx
)
;
for
(
const
RequestedModule
&
request
:
module
-
>
requestedModules
(
)
)
{
moduleRequest
=
request
.
moduleRequest
(
)
;
requiredModule
=
HostResolveImportedModule
(
cx
module
moduleRequest
ModuleStatus
:
:
Unlinked
)
;
if
(
!
requiredModule
)
{
return
false
;
}
if
(
!
InnerModuleLinking
(
cx
requiredModule
stack
index
&
index
)
)
{
return
false
;
}
MOZ_ASSERT
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Linked
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
MOZ_ASSERT
(
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
)
=
=
ContainsElement
(
stack
requiredModule
)
)
;
if
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Linking
)
{
module
-
>
setDfsAncestorIndex
(
std
:
:
min
(
module
-
>
dfsAncestorIndex
(
)
requiredModule
-
>
dfsAncestorIndex
(
)
)
)
;
}
}
if
(
!
ModuleInitializeEnvironment
(
cx
module
)
)
{
return
false
;
}
MOZ_ASSERT
(
CountElements
(
stack
module
)
=
=
1
)
;
MOZ_ASSERT
(
module
-
>
dfsAncestorIndex
(
)
<
=
module
-
>
dfsIndex
(
)
)
;
if
(
module
-
>
dfsAncestorIndex
(
)
=
=
module
-
>
dfsIndex
(
)
)
{
bool
done
=
false
;
while
(
!
done
)
{
requiredModule
=
stack
.
popCopy
(
)
;
requiredModule
-
>
setStatus
(
ModuleStatus
:
:
Linked
)
;
done
=
requiredModule
=
=
module
;
}
}
*
indexOut
=
index
;
return
true
;
}
bool
js
:
:
ModuleEvaluate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
moduleArg
MutableHandle
<
Value
>
result
)
{
Rooted
<
ModuleObject
*
>
module
(
cx
moduleArg
)
;
ModuleStatus
status
=
module
-
>
status
(
)
;
if
(
status
!
=
ModuleStatus
:
:
Linked
&
&
status
!
=
ModuleStatus
:
:
EvaluatingAsync
&
&
status
!
=
ModuleStatus
:
:
Evaluated
)
{
ThrowUnexpectedModuleStatus
(
cx
status
)
;
return
false
;
}
if
(
module
-
>
hadEvaluationError
(
)
)
{
Rooted
<
PromiseObject
*
>
capability
(
cx
)
;
if
(
!
module
-
>
hasTopLevelCapability
(
)
)
{
capability
=
ModuleObject
:
:
createTopLevelCapability
(
cx
module
)
;
if
(
!
capability
)
{
return
false
;
}
Rooted
<
Value
>
error
(
cx
module
-
>
evaluationError
(
)
)
;
if
(
!
ModuleObject
:
:
topLevelCapabilityReject
(
cx
module
error
)
)
{
return
false
;
}
}
capability
=
module
-
>
topLevelCapability
(
)
;
MOZ_ASSERT
(
JS
:
:
GetPromiseState
(
capability
)
=
=
JS
:
:
PromiseState
:
:
Rejected
)
;
MOZ_ASSERT
(
JS
:
:
GetPromiseResult
(
capability
)
=
=
module
-
>
evaluationError
(
)
)
;
result
.
set
(
ObjectValue
(
*
capability
)
)
;
return
true
;
}
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
module
=
module
-
>
getCycleRoot
(
)
;
}
if
(
module
-
>
hasTopLevelCapability
(
)
)
{
result
.
set
(
ObjectValue
(
*
module
-
>
topLevelCapability
(
)
)
)
;
return
true
;
}
Rooted
<
ModuleVector
>
stack
(
cx
)
;
Rooted
<
PromiseObject
*
>
capability
(
cx
ModuleObject
:
:
createTopLevelCapability
(
cx
module
)
)
;
if
(
!
capability
)
{
return
false
;
}
size_t
ignored
;
bool
ok
=
InnerModuleEvaluation
(
cx
module
&
stack
0
&
ignored
)
;
if
(
!
ok
)
{
Rooted
<
Value
>
error
(
cx
)
;
if
(
cx
-
>
isExceptionPending
(
)
)
{
std
:
:
ignore
=
cx
-
>
getPendingException
(
&
error
)
;
cx
-
>
clearPendingException
(
)
;
}
for
(
ModuleObject
*
m
:
stack
)
{
MOZ_ASSERT
(
m
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
)
;
m
-
>
setEvaluationError
(
error
)
;
}
if
(
stack
.
empty
(
)
&
&
!
module
-
>
hadEvaluationError
(
)
)
{
module
-
>
setEvaluationError
(
error
)
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
MOZ_ASSERT
(
module
-
>
evaluationError
(
)
=
=
error
)
;
if
(
!
ModuleObject
:
:
topLevelCapabilityReject
(
cx
module
error
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
MOZ_ASSERT
(
!
module
-
>
hadEvaluationError
(
)
)
;
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
if
(
!
ModuleObject
:
:
topLevelCapabilityResolve
(
cx
module
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
stack
.
empty
(
)
)
;
}
result
.
set
(
ObjectValue
(
*
capability
)
)
;
return
true
;
}
static
bool
InnerModuleEvaluation
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
stack
size_t
index
size_t
*
indexOut
)
{
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
if
(
!
module
-
>
hadEvaluationError
(
)
)
{
*
indexOut
=
index
;
return
true
;
}
Rooted
<
Value
>
error
(
cx
module
-
>
evaluationError
(
)
)
;
cx
-
>
setPendingException
(
error
ShouldCaptureStack
:
:
Maybe
)
;
return
false
;
}
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
)
{
*
indexOut
=
index
;
return
true
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Linked
)
;
if
(
!
stack
.
append
(
module
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
module
-
>
setStatus
(
ModuleStatus
:
:
Evaluating
)
;
module
-
>
setDfsIndex
(
index
)
;
module
-
>
setDfsAncestorIndex
(
index
)
;
module
-
>
setPendingAsyncDependencies
(
0
)
;
index
+
+
;
Rooted
<
ModuleRequestObject
*
>
required
(
cx
)
;
Rooted
<
ModuleObject
*
>
requiredModule
(
cx
)
;
for
(
const
RequestedModule
&
request
:
module
-
>
requestedModules
(
)
)
{
required
=
request
.
moduleRequest
(
)
;
requiredModule
=
HostResolveImportedModule
(
cx
module
required
ModuleStatus
:
:
Linked
)
;
if
(
!
requiredModule
)
{
return
false
;
}
if
(
!
InnerModuleEvaluation
(
cx
requiredModule
stack
index
&
index
)
)
{
return
false
;
}
MOZ_ASSERT
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
MOZ_ASSERT
(
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
)
=
=
ContainsElement
(
stack
requiredModule
)
)
;
if
(
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
)
{
module
-
>
setDfsAncestorIndex
(
std
:
:
min
(
module
-
>
dfsAncestorIndex
(
)
requiredModule
-
>
dfsAncestorIndex
(
)
)
)
;
}
else
{
requiredModule
=
requiredModule
-
>
getCycleRoot
(
)
;
MOZ_ASSERT
(
requiredModule
-
>
status
(
)
>
=
ModuleStatus
:
:
EvaluatingAsync
|
|
requiredModule
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
if
(
requiredModule
-
>
hadEvaluationError
(
)
)
{
Rooted
<
Value
>
error
(
cx
requiredModule
-
>
evaluationError
(
)
)
;
cx
-
>
setPendingException
(
error
ShouldCaptureStack
:
:
Maybe
)
;
return
false
;
}
}
if
(
requiredModule
-
>
isAsyncEvaluating
(
)
&
&
requiredModule
-
>
status
(
)
!
=
ModuleStatus
:
:
Evaluated
)
{
if
(
!
ModuleObject
:
:
appendAsyncParentModule
(
cx
requiredModule
module
)
)
{
return
false
;
}
module
-
>
setPendingAsyncDependencies
(
module
-
>
pendingAsyncDependencies
(
)
+
1
)
;
}
}
if
(
module
-
>
pendingAsyncDependencies
(
)
>
0
|
|
module
-
>
hasTopLevelAwait
(
)
)
{
MOZ_ASSERT
(
!
module
-
>
isAsyncEvaluating
(
)
)
;
module
-
>
setAsyncEvaluating
(
)
;
if
(
module
-
>
pendingAsyncDependencies
(
)
=
=
0
)
{
if
(
!
ExecuteAsyncModule
(
cx
module
)
)
{
return
false
;
}
}
}
else
{
if
(
!
ModuleObject
:
:
execute
(
cx
module
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
CountElements
(
stack
module
)
=
=
1
)
;
MOZ_ASSERT
(
module
-
>
dfsAncestorIndex
(
)
<
=
module
-
>
dfsIndex
(
)
)
;
if
(
module
-
>
dfsAncestorIndex
(
)
=
=
module
-
>
dfsIndex
(
)
)
{
bool
done
=
false
;
while
(
!
done
)
{
requiredModule
=
stack
.
popCopy
(
)
;
if
(
!
requiredModule
-
>
isAsyncEvaluating
(
)
)
{
requiredModule
-
>
setStatus
(
ModuleStatus
:
:
Evaluated
)
;
}
else
{
requiredModule
-
>
setStatus
(
ModuleStatus
:
:
EvaluatingAsync
)
;
}
done
=
requiredModule
=
=
module
;
requiredModule
-
>
setCycleRoot
(
module
)
;
}
}
*
indexOut
=
index
;
return
true
;
}
static
bool
ExecuteAsyncModule
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluating
|
|
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
)
;
MOZ_ASSERT
(
module
-
>
hasTopLevelAwait
(
)
)
;
return
ModuleObject
:
:
execute
(
cx
module
)
;
}
static
bool
GatherAvailableModuleAncestors
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
ModuleVector
>
execList
)
{
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
)
;
Rooted
<
ListObject
*
>
asyncParentModules
(
cx
module
-
>
asyncParentModules
(
)
)
;
Rooted
<
ModuleObject
*
>
m
(
cx
)
;
for
(
uint32_t
i
=
0
;
i
!
=
asyncParentModules
-
>
length
(
)
;
i
+
+
)
{
m
=
&
asyncParentModules
-
>
getDenseElement
(
i
)
.
toObject
(
)
.
as
<
ModuleObject
>
(
)
;
if
(
!
m
-
>
hadEvaluationError
(
)
&
&
!
m
-
>
getCycleRoot
(
)
-
>
hadEvaluationError
(
)
&
&
!
ContainsElement
(
execList
m
)
)
{
MOZ_ASSERT
(
m
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
)
;
MOZ_ASSERT
(
!
m
-
>
hadEvaluationError
(
)
)
;
MOZ_ASSERT
(
m
-
>
isAsyncEvaluating
(
)
)
;
MOZ_ASSERT
(
m
-
>
pendingAsyncDependencies
(
)
>
0
)
;
m
-
>
setPendingAsyncDependencies
(
m
-
>
pendingAsyncDependencies
(
)
-
1
)
;
if
(
m
-
>
pendingAsyncDependencies
(
)
=
=
0
)
{
if
(
!
execList
.
append
(
m
)
)
{
return
false
;
}
if
(
!
m
-
>
hasTopLevelAwait
(
)
&
&
!
GatherAvailableModuleAncestors
(
cx
m
execList
)
)
{
return
false
;
}
}
}
}
return
true
;
}
struct
EvalOrderComparator
{
bool
operator
(
)
(
ModuleObject
*
a
ModuleObject
*
b
bool
*
lessOrEqualp
)
{
int32_t
result
=
int32_t
(
a
-
>
getAsyncEvaluatingPostOrder
(
)
)
-
int32_t
(
b
-
>
getAsyncEvaluatingPostOrder
(
)
)
;
*
lessOrEqualp
=
(
result
<
=
0
)
;
return
true
;
}
}
;
static
void
RejectExecutionWithPendingException
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
RootedValue
exception
(
cx
)
;
if
(
cx
-
>
isExceptionPending
(
)
)
{
std
:
:
ignore
=
cx
-
>
getPendingException
(
&
exception
)
;
}
cx
-
>
clearPendingException
(
)
;
AsyncModuleExecutionRejected
(
cx
module
exception
)
;
}
void
js
:
:
AsyncModuleExecutionFulfilled
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
{
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
MOZ_ASSERT
(
module
-
>
hadEvaluationError
(
)
)
;
return
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
)
;
MOZ_ASSERT
(
module
-
>
isAsyncEvaluating
(
)
)
;
MOZ_ASSERT
(
!
module
-
>
hadEvaluationError
(
)
)
;
Rooted
<
ModuleVector
>
execList
(
cx
)
;
if
(
!
GatherAvailableModuleAncestors
(
cx
module
&
execList
)
)
{
RejectExecutionWithPendingException
(
cx
module
)
;
return
;
}
Rooted
<
ModuleVector
>
scratch
(
cx
)
;
if
(
!
scratch
.
resize
(
execList
.
length
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
RejectExecutionWithPendingException
(
cx
module
)
;
return
;
}
MOZ_ALWAYS_TRUE
(
MergeSort
(
execList
.
begin
(
)
execList
.
length
(
)
scratch
.
begin
(
)
EvalOrderComparator
(
)
)
)
;
#
ifdef
DEBUG
for
(
ModuleObject
*
m
:
execList
)
{
MOZ_ASSERT
(
m
-
>
isAsyncEvaluating
(
)
)
;
MOZ_ASSERT
(
m
-
>
pendingAsyncDependencies
(
)
=
=
0
)
;
MOZ_ASSERT
(
!
m
-
>
hadEvaluationError
(
)
)
;
}
#
endif
ModuleObject
:
:
onTopLevelEvaluationFinished
(
module
)
;
module
-
>
setStatus
(
ModuleStatus
:
:
Evaluated
)
;
module
-
>
clearAsyncEvaluatingPostOrder
(
)
;
if
(
module
-
>
hasTopLevelCapability
(
)
)
{
MOZ_ASSERT
(
module
-
>
getCycleRoot
(
)
=
=
module
)
;
if
(
!
ModuleObject
:
:
topLevelCapabilityResolve
(
cx
module
)
)
{
cx
-
>
clearPendingException
(
)
;
}
}
Rooted
<
ModuleObject
*
>
m
(
cx
)
;
for
(
ModuleObject
*
obj
:
execList
)
{
m
=
obj
;
if
(
m
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
MOZ_ASSERT
(
m
-
>
hadEvaluationError
(
)
)
;
}
else
if
(
m
-
>
hasTopLevelAwait
(
)
)
{
MOZ_ALWAYS_TRUE
(
ExecuteAsyncModule
(
cx
m
)
)
;
}
else
{
bool
ok
=
ModuleObject
:
:
execute
(
cx
m
)
;
if
(
!
ok
)
{
RejectExecutionWithPendingException
(
cx
m
)
;
}
else
{
m
-
>
setStatus
(
ModuleStatus
:
:
Evaluated
)
;
m
-
>
clearAsyncEvaluatingPostOrder
(
)
;
if
(
m
-
>
hasTopLevelCapability
(
)
)
{
MOZ_ASSERT
(
m
-
>
getCycleRoot
(
)
=
=
m
)
;
if
(
!
ModuleObject
:
:
topLevelCapabilityResolve
(
cx
m
)
)
{
cx
-
>
clearPendingException
(
)
;
}
}
}
}
}
}
void
js
:
:
AsyncModuleExecutionRejected
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
HandleValue
error
)
{
if
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
{
MOZ_ASSERT
(
module
-
>
hadEvaluationError
(
)
)
;
return
;
}
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
EvaluatingAsync
)
;
MOZ_ASSERT
(
module
-
>
isAsyncEvaluating
(
)
)
;
MOZ_ASSERT
(
!
module
-
>
hadEvaluationError
(
)
)
;
ModuleObject
:
:
onTopLevelEvaluationFinished
(
module
)
;
module
-
>
setEvaluationError
(
error
)
;
MOZ_ASSERT
(
module
-
>
status
(
)
=
=
ModuleStatus
:
:
Evaluated
)
;
module
-
>
clearAsyncEvaluatingPostOrder
(
)
;
Rooted
<
ListObject
*
>
parents
(
cx
module
-
>
asyncParentModules
(
)
)
;
Rooted
<
ModuleObject
*
>
parent
(
cx
)
;
for
(
uint32_t
i
=
0
;
i
<
parents
-
>
length
(
)
;
i
+
+
)
{
parent
=
&
parents
-
>
get
(
i
)
.
toObject
(
)
.
as
<
ModuleObject
>
(
)
;
AsyncModuleExecutionRejected
(
cx
parent
error
)
;
}
if
(
module
-
>
hasTopLevelCapability
(
)
)
{
MOZ_ASSERT
(
module
-
>
getCycleRoot
(
)
=
=
module
)
;
if
(
!
ModuleObject
:
:
topLevelCapabilityReject
(
cx
module
error
)
)
{
cx
-
>
clearPendingException
(
)
;
}
}
}
