#
include
"
js
/
Modules
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
js
:
:
AssertHeapIsIdle
;
using
js
:
:
ModuleObject
;
using
js
:
:
RequestedModuleObject
;
JS_PUBLIC_API
JS
:
:
ModuleResolveHook
JS
:
:
GetModuleResolveHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleResolveHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleResolveHook
(
JSRuntime
*
rt
ModuleResolveHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleResolveHook
=
func
;
}
JS_PUBLIC_API
JS
:
:
ModuleMetadataHook
JS
:
:
GetModuleMetadataHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleMetadataHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleMetadataHook
(
JSRuntime
*
rt
ModuleMetadataHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleMetadataHook
=
func
;
}
JS_PUBLIC_API
JS
:
:
ModuleDynamicImportHook
JS
:
:
GetModuleDynamicImportHook
(
JSRuntime
*
rt
)
{
AssertHeapIsIdle
(
)
;
return
rt
-
>
moduleDynamicImportHook
;
}
JS_PUBLIC_API
void
JS
:
:
SetModuleDynamicImportHook
(
JSRuntime
*
rt
ModuleDynamicImportHook
func
)
{
AssertHeapIsIdle
(
)
;
rt
-
>
moduleDynamicImportHook
=
func
;
}
JS_PUBLIC_API
bool
JS
:
:
FinishDynamicModuleImport
(
JSContext
*
cx
Handle
<
Value
>
referencingPrivate
Handle
<
JSString
*
>
specifier
Handle
<
JSObject
*
>
promise
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
referencingPrivate
promise
)
;
return
js
:
:
FinishDynamicModuleImport
(
cx
referencingPrivate
specifier
promise
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
{
MOZ_ASSERT
(
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
return
js
:
:
frontend
:
:
CompileModule
(
cx
options
srcBuf
)
;
}
JS_PUBLIC_API
void
JS
:
:
SetModulePrivate
(
JSObject
*
module
const
Value
&
value
)
{
JSRuntime
*
rt
=
module
-
>
zone
(
)
-
>
runtimeFromMainThread
(
)
;
module
-
>
as
<
ModuleObject
>
(
)
.
scriptSourceObject
(
)
-
>
setPrivate
(
rt
value
)
;
}
JS_PUBLIC_API
JS
:
:
Value
JS
:
:
GetModulePrivate
(
JSObject
*
module
)
{
return
module
-
>
as
<
ModuleObject
>
(
)
.
scriptSourceObject
(
)
-
>
canonicalPrivate
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ModuleInstantiate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
releaseCheck
(
moduleArg
)
;
return
ModuleObject
:
:
Instantiate
(
cx
moduleArg
.
as
<
ModuleObject
>
(
)
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ModuleEvaluate
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
releaseCheck
(
moduleArg
)
;
return
ModuleObject
:
:
Evaluate
(
cx
moduleArg
.
as
<
ModuleObject
>
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRequestedModules
(
JSContext
*
cx
Handle
<
JSObject
*
>
moduleArg
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
moduleArg
)
;
return
&
moduleArg
-
>
as
<
ModuleObject
>
(
)
.
requestedModules
(
)
;
}
JS_PUBLIC_API
JSString
*
JS
:
:
GetRequestedModuleSpecifier
(
JSContext
*
cx
Handle
<
Value
>
value
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
value
)
;
JSObject
*
obj
=
&
value
.
toObject
(
)
;
return
obj
-
>
as
<
RequestedModuleObject
>
(
)
.
moduleSpecifier
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
GetRequestedModuleSourcePos
(
JSContext
*
cx
JS
:
:
HandleValue
value
uint32_t
*
lineNumber
uint32_t
*
columnNumber
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
value
)
;
MOZ_ASSERT
(
lineNumber
)
;
MOZ_ASSERT
(
columnNumber
)
;
auto
&
requested
=
value
.
toObject
(
)
.
as
<
RequestedModuleObject
>
(
)
;
*
lineNumber
=
requested
.
lineNumber
(
)
;
*
columnNumber
=
requested
.
columnNumber
(
)
;
}
JS_PUBLIC_API
JSScript
*
JS
:
:
GetModuleScript
(
JS
:
:
HandleObject
moduleRecord
)
{
AssertHeapIsIdle
(
)
;
return
moduleRecord
-
>
as
<
ModuleObject
>
(
)
.
script
(
)
;
}
