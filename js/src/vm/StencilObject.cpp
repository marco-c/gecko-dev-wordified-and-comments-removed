#
include
"
vm
/
StencilObject
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
const
JSClassOps
StencilObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
StencilObject
:
:
finalize
nullptr
nullptr
nullptr
}
;
const
JSClass
StencilObject
:
:
class_
=
{
"
StencilObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
StencilObject
:
:
ReservedSlots
)
|
JSCLASS_BACKGROUND_FINALIZE
&
StencilObject
:
:
classOps_
}
;
bool
StencilObject
:
:
hasStencil
(
)
const
{
return
!
getReservedSlot
(
StencilSlot
)
.
isUndefined
(
)
;
}
JS
:
:
Stencil
*
StencilObject
:
:
stencil
(
)
const
{
void
*
ptr
=
getReservedSlot
(
StencilSlot
)
.
toPrivate
(
)
;
MOZ_ASSERT
(
ptr
)
;
return
static_cast
<
JS
:
:
Stencil
*
>
(
ptr
)
;
}
StencilObject
*
StencilObject
:
:
create
(
JSContext
*
cx
RefPtr
<
JS
:
:
Stencil
>
stencil
)
{
auto
*
obj
=
NewBuiltinClassInstance
<
StencilObject
>
(
cx
)
;
if
(
!
obj
)
{
return
nullptr
;
}
obj
-
>
setReservedSlot
(
StencilSlot
PrivateValue
(
stencil
.
forget
(
)
.
take
(
)
)
)
;
return
obj
;
}
void
StencilObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
if
(
obj
-
>
as
<
StencilObject
>
(
)
.
hasStencil
(
)
)
{
JS
:
:
StencilRelease
(
obj
-
>
as
<
StencilObject
>
(
)
.
stencil
(
)
)
;
}
}
const
JSClassOps
StencilXDRBufferObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
StencilXDRBufferObject
:
:
finalize
nullptr
nullptr
nullptr
}
;
const
JSClass
StencilXDRBufferObject
:
:
class_
=
{
"
StencilXDRBufferObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
StencilXDRBufferObject
:
:
ReservedSlots
)
|
JSCLASS_BACKGROUND_FINALIZE
&
StencilXDRBufferObject
:
:
classOps_
}
;
bool
StencilXDRBufferObject
:
:
hasBuffer
(
)
const
{
return
!
getReservedSlot
(
BufferSlot
)
.
isUndefined
(
)
;
}
const
uint8_t
*
StencilXDRBufferObject
:
:
buffer
(
)
const
{
void
*
ptr
=
getReservedSlot
(
BufferSlot
)
.
toPrivate
(
)
;
MOZ_ASSERT
(
ptr
)
;
return
static_cast
<
const
uint8_t
*
>
(
ptr
)
;
}
uint8_t
*
StencilXDRBufferObject
:
:
writableBuffer
(
)
{
void
*
ptr
=
getReservedSlot
(
BufferSlot
)
.
toPrivate
(
)
;
MOZ_ASSERT
(
ptr
)
;
return
static_cast
<
uint8_t
*
>
(
ptr
)
;
}
size_t
StencilXDRBufferObject
:
:
bufferLength
(
)
const
{
return
getReservedSlot
(
LengthSlot
)
.
toInt32
(
)
;
}
StencilXDRBufferObject
*
StencilXDRBufferObject
:
:
create
(
JSContext
*
cx
uint8_t
*
buffer
size_t
length
)
{
if
(
length
>
=
INT32_MAX
)
{
JS_ReportErrorASCII
(
cx
"
XDR
buffer
is
too
long
"
)
;
return
nullptr
;
}
auto
*
obj
=
NewBuiltinClassInstance
<
StencilXDRBufferObject
>
(
cx
)
;
if
(
!
obj
)
{
return
nullptr
;
}
auto
ownedBuffer
=
cx
-
>
make_pod_array
<
uint8_t
>
(
length
)
;
if
(
!
ownedBuffer
)
{
return
nullptr
;
}
mozilla
:
:
PodCopy
(
ownedBuffer
.
get
(
)
buffer
length
)
;
obj
-
>
setReservedSlot
(
BufferSlot
PrivateValue
(
ownedBuffer
.
release
(
)
)
)
;
obj
-
>
setReservedSlot
(
LengthSlot
Int32Value
(
length
)
)
;
return
obj
;
}
void
StencilXDRBufferObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
if
(
obj
-
>
as
<
StencilXDRBufferObject
>
(
)
.
hasBuffer
(
)
)
{
js_free
(
obj
-
>
as
<
StencilXDRBufferObject
>
(
)
.
writableBuffer
(
)
)
;
}
}
