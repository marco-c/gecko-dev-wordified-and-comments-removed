#
include
"
vm
/
StencilObject
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSObject
.
h
"
using
namespace
js
;
const
JSClassOps
StencilObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
StencilObject
:
:
finalize
nullptr
nullptr
nullptr
nullptr
}
;
const
JSClass
StencilObject
:
:
class_
=
{
"
StencilObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
StencilObject
:
:
ReservedSlots
)
|
JSCLASS_BACKGROUND_FINALIZE
&
StencilObject
:
:
classOps_
}
;
bool
StencilObject
:
:
hasStencil
(
)
const
{
return
!
getSlot
(
StencilSlot
)
.
isUndefined
(
)
;
}
JS
:
:
Stencil
*
StencilObject
:
:
stencil
(
)
const
{
void
*
ptr
=
getSlot
(
StencilSlot
)
.
toPrivate
(
)
;
MOZ_ASSERT
(
ptr
)
;
return
static_cast
<
JS
:
:
Stencil
*
>
(
ptr
)
;
}
StencilObject
*
StencilObject
:
:
create
(
JSContext
*
cx
RefPtr
<
JS
:
:
Stencil
>
stencil
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
JS_NewObject
(
cx
&
class_
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
obj
-
>
as
<
StencilObject
>
(
)
.
setReservedSlot
(
StencilSlot
PrivateValue
(
stencil
.
forget
(
)
.
take
(
)
)
)
;
return
&
obj
-
>
as
<
StencilObject
>
(
)
;
}
void
StencilObject
:
:
finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
if
(
obj
-
>
as
<
StencilObject
>
(
)
.
hasStencil
(
)
)
{
JS
:
:
StencilRelease
(
obj
-
>
as
<
StencilObject
>
(
)
.
stencil
(
)
)
;
}
}
