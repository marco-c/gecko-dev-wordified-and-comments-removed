#
include
"
vm
/
ToSource
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
Object
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
js
/
Symbol
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
ErrorObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
Printer
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
SymbolType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
IsNegativeZero
;
static
JSString
*
StringToSource
(
JSContext
*
cx
JSString
*
str
)
{
UniqueChars
chars
=
QuoteString
(
cx
str
'
"
'
)
;
if
(
!
chars
)
{
return
nullptr
;
}
return
NewStringCopyZ
<
CanGC
>
(
cx
chars
.
get
(
)
)
;
}
static
JSString
*
SymbolToSource
(
JSContext
*
cx
Symbol
*
symbol
)
{
RootedString
desc
(
cx
symbol
-
>
description
(
)
)
;
SymbolCode
code
=
symbol
-
>
code
(
)
;
if
(
code
!
=
SymbolCode
:
:
InSymbolRegistry
&
&
code
!
=
SymbolCode
:
:
UniqueSymbol
)
{
MOZ_ASSERT
(
uint32_t
(
code
)
<
JS
:
:
WellKnownSymbolLimit
)
;
return
desc
;
}
JSStringBuilder
buf
(
cx
)
;
if
(
code
=
=
SymbolCode
:
:
InSymbolRegistry
?
!
buf
.
append
(
"
Symbol
.
for
(
"
)
:
!
buf
.
append
(
"
Symbol
(
"
)
)
{
return
nullptr
;
}
if
(
desc
)
{
UniqueChars
quoted
=
QuoteString
(
cx
desc
'
"
'
)
;
if
(
!
quoted
|
|
!
buf
.
append
(
quoted
.
get
(
)
strlen
(
quoted
.
get
(
)
)
)
)
{
return
nullptr
;
}
}
if
(
!
buf
.
append
(
'
)
'
)
)
{
return
nullptr
;
}
return
buf
.
finishString
(
)
;
}
JSString
*
js
:
:
ValueToSource
(
JSContext
*
cx
HandleValue
v
)
{
if
(
!
CheckRecursionLimit
(
cx
)
)
{
return
nullptr
;
}
cx
-
>
check
(
v
)
;
if
(
v
.
isUndefined
(
)
)
{
return
cx
-
>
names
(
)
.
void0
;
}
if
(
v
.
isString
(
)
)
{
return
StringToSource
(
cx
v
.
toString
(
)
)
;
}
if
(
v
.
isSymbol
(
)
)
{
return
SymbolToSource
(
cx
v
.
toSymbol
(
)
)
;
}
if
(
v
.
isPrimitive
(
)
)
{
if
(
v
.
isDouble
(
)
&
&
IsNegativeZero
(
v
.
toDouble
(
)
)
)
{
static
const
Latin1Char
negativeZero
[
]
=
{
'
-
'
'
0
'
}
;
return
NewStringCopyN
<
CanGC
>
(
cx
negativeZero
mozilla
:
:
ArrayLength
(
negativeZero
)
)
;
}
return
ToString
<
CanGC
>
(
cx
v
)
;
}
RootedValue
fval
(
cx
)
;
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
if
(
!
GetProperty
(
cx
obj
obj
cx
-
>
names
(
)
.
toSource
&
fval
)
)
{
return
nullptr
;
}
if
(
IsCallable
(
fval
)
)
{
RootedValue
v
(
cx
)
;
if
(
!
js
:
:
Call
(
cx
fval
obj
&
v
)
)
{
return
nullptr
;
}
return
ToString
<
CanGC
>
(
cx
v
)
;
}
if
(
obj
-
>
is
<
JSFunction
>
(
)
)
{
RootedFunction
fun
(
cx
&
obj
-
>
as
<
JSFunction
>
(
)
)
;
return
FunctionToString
(
cx
fun
true
)
;
}
if
(
obj
-
>
is
<
ArrayObject
>
(
)
)
{
return
ArrayToSource
(
cx
obj
)
;
}
if
(
obj
-
>
is
<
ErrorObject
>
(
)
)
{
return
ErrorToSource
(
cx
obj
)
;
}
return
ObjectToSource
(
cx
obj
)
;
}
