#
include
"
vm
/
OffThreadPromiseRuntimeState
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
utility
>
#
include
"
jspubtd
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
JS
:
:
Handle
;
using
js
:
:
OffThreadPromiseRuntimeState
;
using
js
:
:
OffThreadPromiseTask
;
OffThreadPromiseTask
:
:
OffThreadPromiseTask
(
JSContext
*
cx
JS
:
:
Handle
<
PromiseObject
*
>
promise
)
:
runtime_
(
cx
-
>
runtime
(
)
)
promise_
(
cx
promise
)
registered_
(
false
)
{
MOZ_ASSERT
(
runtime_
=
=
promise_
-
>
zone
(
)
-
>
runtimeFromMainThread
(
)
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
MOZ_ASSERT
(
cx
-
>
runtime
(
)
-
>
offThreadPromiseState
.
ref
(
)
.
initialized
(
)
)
;
}
OffThreadPromiseTask
:
:
~
OffThreadPromiseTask
(
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
OffThreadPromiseRuntimeState
&
state
=
runtime_
-
>
offThreadPromiseState
.
ref
(
)
;
MOZ_ASSERT
(
state
.
initialized
(
)
)
;
if
(
registered_
)
{
unregister
(
state
)
;
}
}
bool
OffThreadPromiseTask
:
:
init
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
runtime
(
)
=
=
runtime_
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
OffThreadPromiseRuntimeState
&
state
=
runtime_
-
>
offThreadPromiseState
.
ref
(
)
;
MOZ_ASSERT
(
state
.
initialized
(
)
)
;
AutoLockHelperThreadState
lock
;
if
(
!
state
.
live
(
)
.
putNew
(
this
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
registered_
=
true
;
return
true
;
}
void
OffThreadPromiseTask
:
:
unregister
(
OffThreadPromiseRuntimeState
&
state
)
{
MOZ_ASSERT
(
registered_
)
;
AutoLockHelperThreadState
lock
;
state
.
live
(
)
.
remove
(
this
)
;
registered_
=
false
;
}
void
OffThreadPromiseTask
:
:
run
(
JSContext
*
cx
MaybeShuttingDown
maybeShuttingDown
)
{
MOZ_ASSERT
(
cx
-
>
runtime
(
)
=
=
runtime_
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
MOZ_ASSERT
(
registered_
)
;
OffThreadPromiseRuntimeState
&
state
=
runtime_
-
>
offThreadPromiseState
.
ref
(
)
;
MOZ_ASSERT
(
state
.
initialized
(
)
)
;
unregister
(
state
)
;
if
(
maybeShuttingDown
=
=
JS
:
:
Dispatchable
:
:
NotShuttingDown
)
{
AutoRealm
ar
(
cx
promise_
)
;
if
(
!
resolve
(
cx
promise_
)
)
{
cx
-
>
clearPendingException
(
)
;
}
}
js_delete
(
this
)
;
}
void
OffThreadPromiseTask
:
:
dispatchResolveAndDestroy
(
)
{
AutoLockHelperThreadState
lock
;
dispatchResolveAndDestroy
(
lock
)
;
}
void
OffThreadPromiseTask
:
:
dispatchResolveAndDestroy
(
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
registered_
)
;
OffThreadPromiseRuntimeState
&
state
=
runtime_
-
>
offThreadPromiseState
.
ref
(
)
;
MOZ_ASSERT
(
state
.
initialized
(
)
)
;
MOZ_ASSERT
(
state
.
live
(
)
.
has
(
this
)
)
;
if
(
state
.
dispatchToEventLoopCallback_
(
state
.
dispatchToEventLoopClosure_
this
)
)
{
return
;
}
state
.
numCanceled_
+
+
;
if
(
state
.
numCanceled_
=
=
state
.
live
(
)
.
count
(
)
)
{
state
.
allCanceled
(
)
.
notify_one
(
)
;
}
}
OffThreadPromiseRuntimeState
:
:
OffThreadPromiseRuntimeState
(
)
:
dispatchToEventLoopCallback_
(
nullptr
)
dispatchToEventLoopClosure_
(
nullptr
)
numCanceled_
(
0
)
internalDispatchQueueClosed_
(
false
)
{
}
OffThreadPromiseRuntimeState
:
:
~
OffThreadPromiseRuntimeState
(
)
{
MOZ_ASSERT
(
live_
.
refNoCheck
(
)
.
empty
(
)
)
;
MOZ_ASSERT
(
numCanceled_
=
=
0
)
;
MOZ_ASSERT
(
internalDispatchQueue_
.
refNoCheck
(
)
.
empty
(
)
)
;
MOZ_ASSERT
(
!
initialized
(
)
)
;
}
void
OffThreadPromiseRuntimeState
:
:
init
(
JS
:
:
DispatchToEventLoopCallback
callback
void
*
closure
)
{
MOZ_ASSERT
(
!
initialized
(
)
)
;
dispatchToEventLoopCallback_
=
callback
;
dispatchToEventLoopClosure_
=
closure
;
MOZ_ASSERT
(
initialized
(
)
)
;
}
bool
OffThreadPromiseRuntimeState
:
:
internalDispatchToEventLoop
(
void
*
closure
JS
:
:
Dispatchable
*
d
)
{
OffThreadPromiseRuntimeState
&
state
=
*
reinterpret_cast
<
OffThreadPromiseRuntimeState
*
>
(
closure
)
;
MOZ_ASSERT
(
state
.
usingInternalDispatchQueue
(
)
)
;
gHelperThreadLock
.
assertOwnedByCurrentThread
(
)
;
if
(
state
.
internalDispatchQueueClosed_
)
{
return
false
;
}
AutoEnterOOMUnsafeRegion
noOOM
;
if
(
!
state
.
internalDispatchQueue
(
)
.
pushBack
(
d
)
)
{
noOOM
.
crash
(
"
internalDispatchToEventLoop
"
)
;
}
state
.
internalDispatchQueueAppended
(
)
.
notify_one
(
)
;
return
true
;
}
bool
OffThreadPromiseRuntimeState
:
:
usingInternalDispatchQueue
(
)
const
{
return
dispatchToEventLoopCallback_
=
=
internalDispatchToEventLoop
;
}
void
OffThreadPromiseRuntimeState
:
:
initInternalDispatchQueue
(
)
{
init
(
internalDispatchToEventLoop
this
)
;
MOZ_ASSERT
(
usingInternalDispatchQueue
(
)
)
;
}
bool
OffThreadPromiseRuntimeState
:
:
initialized
(
)
const
{
return
!
!
dispatchToEventLoopCallback_
;
}
void
OffThreadPromiseRuntimeState
:
:
internalDrain
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
usingInternalDispatchQueue
(
)
)
;
for
(
;
;
)
{
JS
:
:
Dispatchable
*
d
;
{
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
!
internalDispatchQueueClosed_
)
;
MOZ_ASSERT_IF
(
!
internalDispatchQueue
(
)
.
empty
(
)
!
live
(
)
.
empty
(
)
)
;
if
(
live
(
)
.
empty
(
)
)
{
return
;
}
while
(
internalDispatchQueue
(
)
.
empty
(
)
)
{
internalDispatchQueueAppended
(
)
.
wait
(
lock
)
;
}
d
=
internalDispatchQueue
(
)
.
popCopyFront
(
)
;
}
d
-
>
run
(
cx
JS
:
:
Dispatchable
:
:
NotShuttingDown
)
;
}
}
bool
OffThreadPromiseRuntimeState
:
:
internalHasPending
(
)
{
MOZ_ASSERT
(
usingInternalDispatchQueue
(
)
)
;
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
!
internalDispatchQueueClosed_
)
;
MOZ_ASSERT_IF
(
!
internalDispatchQueue
(
)
.
empty
(
)
!
live
(
)
.
empty
(
)
)
;
return
!
live
(
)
.
empty
(
)
;
}
void
OffThreadPromiseRuntimeState
:
:
shutdown
(
JSContext
*
cx
)
{
if
(
!
initialized
(
)
)
{
return
;
}
AutoLockHelperThreadState
lock
;
if
(
usingInternalDispatchQueue
(
)
)
{
DispatchableFifo
dispatchQueue
;
{
std
:
:
swap
(
dispatchQueue
internalDispatchQueue
(
)
)
;
MOZ_ASSERT
(
internalDispatchQueue
(
)
.
empty
(
)
)
;
internalDispatchQueueClosed_
=
true
;
}
AutoUnlockHelperThreadState
unlock
(
lock
)
;
for
(
JS
:
:
Dispatchable
*
d
:
dispatchQueue
)
{
d
-
>
run
(
cx
JS
:
:
Dispatchable
:
:
ShuttingDown
)
;
}
}
while
(
live
(
)
.
count
(
)
!
=
numCanceled_
)
{
MOZ_ASSERT
(
numCanceled_
<
live
(
)
.
count
(
)
)
;
allCanceled
(
)
.
wait
(
lock
)
;
}
for
(
OffThreadPromiseTaskSet
:
:
Range
r
=
live
(
)
.
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
OffThreadPromiseTask
*
task
=
r
.
front
(
)
;
MOZ_ASSERT
(
task
-
>
registered_
)
;
task
-
>
registered_
=
false
;
js_delete
(
task
)
;
}
live
(
)
.
clear
(
)
;
numCanceled_
=
0
;
dispatchToEventLoopCallback_
=
nullptr
;
MOZ_ASSERT
(
!
initialized
(
)
)
;
}
