#
ifndef
vm_PropertyKey_h
#
define
vm_PropertyKey_h
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
SymbolType
.
h
"
namespace
js
{
static
MOZ_ALWAYS_INLINE
HashNumber
HashPropertyKey
(
PropertyKey
key
)
{
if
(
MOZ_LIKELY
(
key
.
isAtom
(
)
)
)
{
return
key
.
toAtom
(
)
-
>
hash
(
)
;
}
if
(
key
.
isSymbol
(
)
)
{
return
key
.
toSymbol
(
)
-
>
hash
(
)
;
}
return
mozilla
:
:
HashGeneric
(
key
.
asRawBits
(
)
)
;
}
static
MOZ_ALWAYS_INLINE
HashNumber
HashAtomOrSymbolPropertyKey
(
PropertyKey
key
)
{
if
(
MOZ_LIKELY
(
key
.
isAtom
(
)
)
)
{
return
key
.
toAtom
(
)
-
>
hash
(
)
;
}
return
key
.
toSymbol
(
)
-
>
hash
(
)
;
}
}
namespace
mozilla
{
template
<
>
struct
DefaultHasher
<
JS
:
:
PropertyKey
>
{
using
Lookup
=
JS
:
:
PropertyKey
;
static
HashNumber
hash
(
JS
:
:
PropertyKey
key
)
{
return
js
:
:
HashPropertyKey
(
key
)
;
}
static
bool
match
(
JS
:
:
PropertyKey
key1
JS
:
:
PropertyKey
key2
)
{
return
key1
=
=
key2
;
}
}
;
}
#
endif
