#
ifndef
vm_Modules_h
#
define
vm_Modules_h
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
struct
JSContext
;
namespace
js
{
using
ModuleVector
=
GCVector
<
ModuleObject
*
0
SystemAllocPolicy
>
;
bool
ModuleResolveExport
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
exportName
MutableHandle
<
Value
>
result
)
;
ModuleNamespaceObject
*
GetOrCreateModuleNamespace
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleInitializeEnvironment
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleLink
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleEvaluate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
Value
>
result
)
;
bool
SyntheticModuleEvaluate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
Value
>
result
)
;
void
AsyncModuleExecutionFulfilled
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
void
AsyncModuleExecutionRejected
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
HandleValue
error
)
;
}
#
endif
