#
ifndef
vm_Modules_h
#
define
vm_Modules_h
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
struct
JSContext
;
namespace
js
{
using
ModuleVector
=
GCVector
<
ModuleObject
*
0
SystemAllocPolicy
>
;
struct
ModuleErrorInfo
{
ModuleErrorInfo
(
uint32_t
lineNumber_
JS
:
:
ColumnNumberOneOrigin
columnNumber_
)
:
lineNumber
(
lineNumber_
)
columnNumber
(
columnNumber_
)
{
}
void
setImportedModule
(
JSContext
*
cx
ModuleObject
*
importedModule
)
;
void
setCircularImport
(
JSContext
*
cx
ModuleObject
*
importedModule
)
;
void
setForAmbiguousImport
(
JSContext
*
cx
ModuleObject
*
importedModule
ModuleObject
*
module1
ModuleObject
*
module2
)
;
uint32_t
lineNumber
;
JS
:
:
ColumnNumberOneOrigin
columnNumber
;
const
char
*
imported
;
const
char
*
entry1
;
const
char
*
entry2
;
bool
isCircular
=
false
;
}
;
bool
ModuleResolveExport
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
Handle
<
JSAtom
*
>
exportName
MutableHandle
<
Value
>
result
ModuleErrorInfo
*
errorInfoOut
)
;
ModuleNamespaceObject
*
GetOrCreateModuleNamespace
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleInitializeEnvironment
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleLink
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
bool
ModuleEvaluate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
Value
>
result
)
;
bool
SyntheticModuleEvaluate
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
MutableHandle
<
Value
>
result
)
;
void
AsyncModuleExecutionFulfilled
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
)
;
void
AsyncModuleExecutionRejected
(
JSContext
*
cx
Handle
<
ModuleObject
*
>
module
HandleValue
error
)
;
}
#
endif
