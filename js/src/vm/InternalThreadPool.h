#
ifndef
vm_InternalThreadPool_h
#
define
vm_InternalThreadPool_h
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
static
const
uint32_t
kDefaultHelperStackSize
=
2048
*
1024
-
2
*
4096
;
static
const
uint32_t
kDefaultHelperStackQuota
=
1800
*
1024
;
#
if
defined
(
MOZ_TSAN
)
static
const
uint32_t
HELPER_STACK_SIZE
=
2
*
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
2
*
kDefaultHelperStackQuota
;
#
else
static
const
uint32_t
HELPER_STACK_SIZE
=
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
kDefaultHelperStackQuota
;
#
endif
namespace
js
{
class
AutoLockHelperThreadState
;
class
HelperThread
;
using
HelperThreadVector
=
Vector
<
UniquePtr
<
HelperThread
>
0
SystemAllocPolicy
>
;
class
InternalThreadPool
{
public
:
static
bool
Initialize
(
size_t
threadCount
AutoLockHelperThreadState
&
lock
)
;
static
void
ShutDown
(
AutoLockHelperThreadState
&
lock
)
;
static
bool
IsInitialized
(
)
{
return
Instance
;
}
static
InternalThreadPool
&
Get
(
)
;
bool
ensureThreadCount
(
size_t
threadCount
AutoLockHelperThreadState
&
lock
)
;
size_t
threadCount
(
const
AutoLockHelperThreadState
&
lock
)
;
void
dispatchTask
(
const
AutoLockHelperThreadState
&
lock
)
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
const
AutoLockHelperThreadState
&
lock
)
const
;
private
:
void
shutDown
(
AutoLockHelperThreadState
&
lock
)
;
HelperThreadVector
&
threads
(
const
AutoLockHelperThreadState
&
lock
)
;
const
HelperThreadVector
&
threads
(
const
AutoLockHelperThreadState
&
lock
)
const
;
void
notifyOne
(
const
AutoLockHelperThreadState
&
lock
)
;
void
notifyAll
(
const
AutoLockHelperThreadState
&
lock
)
;
void
wait
(
AutoLockHelperThreadState
&
lock
)
;
friend
class
HelperThread
;
static
InternalThreadPool
*
Instance
;
HelperThreadLockData
<
HelperThreadVector
>
threads_
;
js
:
:
ConditionVariable
wakeup
;
HelperThreadLockData
<
bool
>
terminating
;
}
;
}
#
endif
