#
ifndef
vm_SelfHosting_h_
#
define
vm_SelfHosting_h_
#
include
"
NamespaceImports
.
h
"
#
include
"
vm
/
Stack
.
h
"
namespace
js
{
ScriptSourceObject
*
SelfHostingScriptSourceObject
(
JSContext
*
cx
)
;
bool
IsSelfHostedFunctionWithName
(
JSFunction
*
fun
JSAtom
*
name
)
;
PropertyName
*
GetClonedSelfHostedFunctionName
(
const
JSFunction
*
fun
)
;
void
SetClonedSelfHostedFunctionName
(
JSFunction
*
fun
PropertyName
*
name
)
;
constexpr
char
ExtendedUnclonedSelfHostedFunctionNamePrefix
=
'
'
;
bool
IsExtendedUnclonedSelfHostedFunctionName
(
JSAtom
*
name
)
;
void
SetUnclonedSelfHostedCanonicalName
(
JSFunction
*
fun
JSAtom
*
name
)
;
bool
IsCallSelfHostedNonGenericMethod
(
NativeImpl
impl
)
;
bool
ReportIncompatibleSelfHostedMethod
(
JSContext
*
cx
const
CallArgs
&
args
)
;
void
FillSelfHostingCompileOptions
(
JS
:
:
CompileOptions
&
options
)
;
const
JSFunctionSpec
*
FindIntrinsicSpec
(
PropertyName
*
name
)
;
#
ifdef
DEBUG
bool
CallSelfHostedFunction
(
JSContext
*
cx
char
const
*
name
HandleValue
thisv
const
AnyInvokeArgs
&
args
MutableHandleValue
rval
)
;
#
endif
bool
CallSelfHostedFunction
(
JSContext
*
cx
HandlePropertyName
name
HandleValue
thisv
const
AnyInvokeArgs
&
args
MutableHandleValue
rval
)
;
bool
intrinsic_NewArrayIterator
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
bool
intrinsic_NewStringIterator
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
bool
intrinsic_NewRegExpStringIterator
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
#
ifdef
ENABLE_RECORD_TUPLE
bool
IsTupleUnchecked
(
JSContext
*
cx
const
CallArgs
&
args
)
;
bool
intrinsic_IsTuple
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
#
endif
}
#
endif
