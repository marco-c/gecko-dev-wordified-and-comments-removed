#
ifndef
vm_Monitor_h
#
define
vm_Monitor_h
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
Mutex
.
h
"
namespace
js
{
class
Monitor
{
protected
:
friend
class
AutoLockMonitor
;
friend
class
AutoUnlockMonitor
;
Mutex
lock_
MOZ_UNANNOTATED
;
ConditionVariable
condVar_
;
public
:
explicit
Monitor
(
const
MutexId
&
id
)
:
lock_
(
id
)
{
}
}
;
class
AutoLockMonitor
:
public
LockGuard
<
Mutex
>
{
private
:
using
Base
=
LockGuard
<
Mutex
>
;
Monitor
&
monitor
;
public
:
explicit
AutoLockMonitor
(
Monitor
&
monitor
)
:
Base
(
monitor
.
lock_
)
monitor
(
monitor
)
{
}
bool
isFor
(
Monitor
&
other
)
const
{
return
&
monitor
.
lock_
=
=
&
other
.
lock_
;
}
void
wait
(
ConditionVariable
&
condVar
)
{
condVar
.
wait
(
*
this
)
;
}
void
wait
(
)
{
wait
(
monitor
.
condVar_
)
;
}
void
notify
(
ConditionVariable
&
condVar
)
{
condVar
.
notify_one
(
)
;
}
void
notify
(
)
{
notify
(
monitor
.
condVar_
)
;
}
void
notifyAll
(
ConditionVariable
&
condVar
)
{
condVar
.
notify_all
(
)
;
}
void
notifyAll
(
)
{
notifyAll
(
monitor
.
condVar_
)
;
}
}
;
class
AutoUnlockMonitor
{
private
:
Monitor
&
monitor
;
public
:
explicit
AutoUnlockMonitor
(
Monitor
&
monitor
)
:
monitor
(
monitor
)
{
monitor
.
lock_
.
unlock
(
)
;
}
~
AutoUnlockMonitor
(
)
{
monitor
.
lock_
.
lock
(
)
;
}
bool
isFor
(
Monitor
&
other
)
const
{
return
&
monitor
.
lock_
=
=
&
other
.
lock_
;
}
}
;
}
#
endif
