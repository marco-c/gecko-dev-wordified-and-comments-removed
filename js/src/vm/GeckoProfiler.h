#
ifndef
vm_GeckoProfiler_h
#
define
vm_GeckoProfiler_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jspubtd
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
ProfilingCategory
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
namespace
js
{
class
BaseScript
;
class
GeckoProfilerThread
;
using
ProfileStringMap
=
HashMap
<
BaseScript
*
JS
:
:
UniqueChars
DefaultHasher
<
BaseScript
*
>
SystemAllocPolicy
>
;
class
GeckoProfilerRuntime
{
JSRuntime
*
rt
;
MainThreadData
<
ProfileStringMap
>
strings_
;
bool
slowAssertions
;
uint32_t
enabled_
;
void
(
*
eventMarker_
)
(
const
char
*
const
char
*
)
;
public
:
explicit
GeckoProfilerRuntime
(
JSRuntime
*
rt
)
;
bool
enabled
(
)
{
return
enabled_
;
}
void
enable
(
bool
enabled
)
;
void
enableSlowAssertions
(
bool
enabled
)
{
slowAssertions
=
enabled
;
}
bool
slowAssertionsEnabled
(
)
{
return
slowAssertions
;
}
void
setEventMarker
(
void
(
*
fn
)
(
const
char
*
const
char
*
)
)
;
static
JS
:
:
UniqueChars
allocProfileString
(
JSContext
*
cx
BaseScript
*
script
)
;
const
char
*
profileString
(
JSContext
*
cx
BaseScript
*
script
)
;
void
onScriptFinalized
(
BaseScript
*
script
)
;
void
markEvent
(
const
char
*
event
const
char
*
details
)
;
ProfileStringMap
&
strings
(
)
{
return
strings_
.
ref
(
)
;
}
size_t
stringsCount
(
)
;
void
stringsReset
(
)
;
uint32_t
*
addressOfEnabled
(
)
{
return
&
enabled_
;
}
void
fixupStringsMapAfterMovingGC
(
)
;
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkStringsMapAfterMovingGC
(
)
;
#
endif
}
;
inline
size_t
GeckoProfilerRuntime
:
:
stringsCount
(
)
{
return
strings
(
)
.
count
(
)
;
}
inline
void
GeckoProfilerRuntime
:
:
stringsReset
(
)
{
strings
(
)
.
clear
(
)
;
}
class
MOZ_RAII
GeckoProfilerEntryMarker
{
public
:
explicit
MOZ_ALWAYS_INLINE
GeckoProfilerEntryMarker
(
JSContext
*
cx
JSScript
*
script
)
;
MOZ_ALWAYS_INLINE
~
GeckoProfilerEntryMarker
(
)
;
private
:
GeckoProfilerThread
*
profiler_
;
#
ifdef
DEBUG
uint32_t
spBefore_
;
#
endif
}
;
class
MOZ_RAII
AutoGeckoProfilerEntry
{
public
:
explicit
MOZ_ALWAYS_INLINE
AutoGeckoProfilerEntry
(
JSContext
*
cx
const
char
*
label
const
char
*
dynamicString
JS
:
:
ProfilingCategoryPair
categoryPair
=
JS
:
:
ProfilingCategoryPair
:
:
JS
uint32_t
flags
=
0
)
;
explicit
MOZ_ALWAYS_INLINE
AutoGeckoProfilerEntry
(
JSContext
*
cx
const
char
*
label
JS
:
:
ProfilingCategoryPair
categoryPair
=
JS
:
:
ProfilingCategoryPair
:
:
JS
uint32_t
flags
=
0
)
;
MOZ_ALWAYS_INLINE
~
AutoGeckoProfilerEntry
(
)
;
private
:
ProfilingStack
*
profilingStack_
;
#
ifdef
DEBUG
GeckoProfilerThread
*
profiler_
;
uint32_t
spBefore_
;
#
endif
}
;
class
MOZ_RAII
GeckoProfilerBaselineOSRMarker
{
public
:
explicit
GeckoProfilerBaselineOSRMarker
(
JSContext
*
cx
bool
hasProfilerFrame
)
;
~
GeckoProfilerBaselineOSRMarker
(
)
;
private
:
GeckoProfilerThread
*
profiler
;
mozilla
:
:
DebugOnly
<
uint32_t
>
spBefore_
;
}
;
}
#
endif
