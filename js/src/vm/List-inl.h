#
ifndef
vm_List_inl_h
#
define
vm_List_inl_h
#
include
"
vm
/
List
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
#
include
"
vm
/
TypeInference
-
inl
.
h
"
inline
js
:
:
ListObject
*
js
:
:
ListObject
:
:
create
(
JSContext
*
cx
)
{
return
NewObjectWithGivenProto
<
ListObject
>
(
cx
nullptr
)
;
}
inline
bool
js
:
:
ListObject
:
:
append
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
value
)
{
uint32_t
len
=
length
(
)
;
if
(
!
ensureElements
(
cx
len
+
1
)
)
{
return
false
;
}
ensureDenseInitializedLength
(
cx
len
1
)
;
setDenseElement
(
len
value
)
;
return
true
;
}
inline
bool
js
:
:
ListObject
:
:
appendValueAndSize
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
value
double
size
)
{
uint32_t
len
=
length
(
)
;
if
(
!
ensureElements
(
cx
len
+
2
)
)
{
return
false
;
}
ensureDenseInitializedLength
(
cx
len
2
)
;
setDenseElement
(
len
value
)
;
setDenseElement
(
len
+
1
JS
:
:
DoubleValue
(
size
)
)
;
return
true
;
}
inline
JS
:
:
Value
js
:
:
ListObject
:
:
popFirst
(
JSContext
*
cx
)
{
uint32_t
len
=
length
(
)
;
MOZ_ASSERT
(
len
>
0
)
;
JS
:
:
Value
entry
=
get
(
0
)
;
if
(
!
tryShiftDenseElements
(
1
)
)
{
moveDenseElements
(
0
1
len
-
1
)
;
setDenseInitializedLength
(
len
-
1
)
;
shrinkElements
(
cx
len
-
1
)
;
}
MOZ_ASSERT
(
length
(
)
=
=
len
-
1
)
;
return
entry
;
}
inline
void
js
:
:
ListObject
:
:
popFirstPair
(
JSContext
*
cx
)
{
uint32_t
len
=
length
(
)
;
MOZ_ASSERT
(
len
>
0
)
;
MOZ_ASSERT
(
(
len
%
2
)
=
=
0
)
;
if
(
!
tryShiftDenseElements
(
2
)
)
{
moveDenseElements
(
0
2
len
-
2
)
;
setDenseInitializedLength
(
len
-
2
)
;
shrinkElements
(
cx
len
-
2
)
;
}
MOZ_ASSERT
(
length
(
)
=
=
len
-
2
)
;
}
template
<
class
T
>
inline
T
&
js
:
:
ListObject
:
:
popFirstAs
(
JSContext
*
cx
)
{
return
popFirst
(
cx
)
.
toObject
(
)
.
as
<
T
>
(
)
;
}
namespace
js
{
inline
MOZ_MUST_USE
bool
StoreNewListInFixedSlot
(
JSContext
*
cx
JS
:
:
Handle
<
NativeObject
*
>
obj
uint32_t
slot
)
{
AutoRealm
ar
(
cx
obj
)
;
ListObject
*
list
=
ListObject
:
:
create
(
cx
)
;
if
(
!
list
)
{
return
false
;
}
obj
-
>
setFixedSlot
(
slot
JS
:
:
ObjectValue
(
*
list
)
)
;
return
true
;
}
inline
MOZ_MUST_USE
bool
AppendToListInFixedSlot
(
JSContext
*
cx
JS
:
:
Handle
<
NativeObject
*
>
obj
uint32_t
slot
JS
:
:
Handle
<
JSObject
*
>
toAppend
)
{
JS
:
:
Rooted
<
ListObject
*
>
list
(
cx
&
obj
-
>
getFixedSlot
(
slot
)
.
toObject
(
)
.
as
<
ListObject
>
(
)
)
;
AutoRealm
ar
(
cx
list
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
cx
JS
:
:
ObjectValue
(
*
toAppend
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
val
)
)
{
return
false
;
}
return
list
-
>
append
(
cx
val
)
;
}
}
#
endif
