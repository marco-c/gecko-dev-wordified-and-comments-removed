#
ifndef
vm_ModuleBuilder_h
#
define
vm_ModuleBuilder_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
EitherParser
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
AtomsTable
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSAtom
;
namespace
js
{
namespace
frontend
{
class
BinaryNode
;
class
ListNode
;
class
ParseNode
;
}
class
MOZ_STACK_CLASS
ModuleBuilder
{
explicit
ModuleBuilder
(
JSContext
*
cx
const
frontend
:
:
EitherParser
&
eitherParser
)
;
public
:
template
<
class
Parser
>
explicit
ModuleBuilder
(
JSContext
*
cx
Parser
*
parser
)
:
ModuleBuilder
(
cx
frontend
:
:
EitherParser
(
parser
)
)
{
}
bool
processImport
(
frontend
:
:
BinaryNode
*
importNode
)
;
bool
processExport
(
frontend
:
:
ParseNode
*
exportNode
)
;
bool
processExportFrom
(
frontend
:
:
BinaryNode
*
exportNode
)
;
bool
hasExportedName
(
JSAtom
*
name
)
const
;
bool
buildTables
(
frontend
:
:
StencilModuleMetadata
&
metadata
)
;
private
:
using
RequestedModuleVector
=
JS
:
:
GCVector
<
frontend
:
:
StencilModuleEntry
>
;
using
AtomSet
=
JS
:
:
GCHashSet
<
JSAtom
*
>
;
using
ExportEntryVector
=
GCVector
<
frontend
:
:
StencilModuleEntry
>
;
using
ImportEntryMap
=
JS
:
:
GCHashMap
<
JSAtom
*
frontend
:
:
StencilModuleEntry
>
;
using
RootedExportEntryVector
=
JS
:
:
Rooted
<
ExportEntryVector
>
;
using
RootedRequestedModuleVector
=
JS
:
:
Rooted
<
RequestedModuleVector
>
;
using
RootedAtomSet
=
JS
:
:
Rooted
<
AtomSet
>
;
using
RootedImportEntryMap
=
JS
:
:
Rooted
<
ImportEntryMap
>
;
JSContext
*
cx_
;
frontend
:
:
EitherParser
eitherParser_
;
RootedAtomSet
requestedModuleSpecifiers_
;
RootedRequestedModuleVector
requestedModules_
;
RootedImportEntryMap
importEntries_
;
RootedExportEntryVector
exportEntries_
;
RootedAtomSet
exportNames_
;
frontend
:
:
StencilModuleEntry
*
importEntryFor
(
JSAtom
*
localName
)
const
;
bool
processExportBinding
(
frontend
:
:
ParseNode
*
pn
)
;
bool
processExportArrayBinding
(
frontend
:
:
ListNode
*
array
)
;
bool
processExportObjectBinding
(
frontend
:
:
ListNode
*
obj
)
;
bool
appendExportEntry
(
JS
:
:
Handle
<
JSAtom
*
>
exportName
JS
:
:
Handle
<
JSAtom
*
>
localName
frontend
:
:
ParseNode
*
node
=
nullptr
)
;
bool
appendExportFromEntry
(
JS
:
:
Handle
<
JSAtom
*
>
exportName
JS
:
:
Handle
<
JSAtom
*
>
moduleRequest
JS
:
:
Handle
<
JSAtom
*
>
importName
frontend
:
:
ParseNode
*
node
)
;
bool
maybeAppendRequestedModule
(
JS
:
:
Handle
<
JSAtom
*
>
specifier
frontend
:
:
ParseNode
*
node
)
;
}
;
template
<
typename
T
>
ArrayObject
*
CreateArray
(
JSContext
*
cx
const
JS
:
:
Rooted
<
JS
:
:
GCVector
<
T
>
>
&
vector
)
;
}
#
endif
