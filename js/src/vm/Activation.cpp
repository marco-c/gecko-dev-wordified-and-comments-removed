#
include
"
vm
/
Activation
-
inl
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
debugger
/
DebugAPI
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Stack
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
using
namespace
js
;
using
JS
:
:
ObjectOrNullValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
UndefinedValue
;
using
JS
:
:
Value
;
Value
ActivationEntryMonitor
:
:
asyncStack
(
JSContext
*
cx
)
{
Rooted
<
Value
>
stack
(
cx
ObjectOrNullValue
(
cx
-
>
asyncStackForNewActivations
(
)
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
stack
)
)
{
cx
-
>
clearPendingException
(
)
;
return
UndefinedValue
(
)
;
}
return
stack
;
}
void
ActivationEntryMonitor
:
:
init
(
JSContext
*
cx
InterpreterFrame
*
entryFrame
)
{
gc
:
:
AutoSuppressGC
suppressGC
(
cx
)
;
Rooted
<
Value
>
stack
(
cx
asyncStack
(
cx
)
)
;
const
char
*
asyncCause
=
cx
-
>
asyncCauseForNewActivations
;
if
(
entryFrame
-
>
isFunctionFrame
(
)
)
{
entryMonitor_
-
>
Entry
(
cx
&
entryFrame
-
>
callee
(
)
stack
asyncCause
)
;
}
else
{
entryMonitor_
-
>
Entry
(
cx
entryFrame
-
>
script
(
)
stack
asyncCause
)
;
}
}
void
ActivationEntryMonitor
:
:
init
(
JSContext
*
cx
jit
:
:
CalleeToken
entryToken
)
{
gc
:
:
AutoSuppressGC
suppressGC
(
cx
)
;
RootedValue
stack
(
cx
asyncStack
(
cx
)
)
;
const
char
*
asyncCause
=
cx
-
>
asyncCauseForNewActivations
;
if
(
jit
:
:
CalleeTokenIsFunction
(
entryToken
)
)
{
entryMonitor_
-
>
Entry
(
cx_
jit
:
:
CalleeTokenToFunction
(
entryToken
)
stack
asyncCause
)
;
}
else
{
entryMonitor_
-
>
Entry
(
cx_
jit
:
:
CalleeTokenToScript
(
entryToken
)
stack
asyncCause
)
;
}
}
void
Activation
:
:
registerProfiling
(
)
{
MOZ_ASSERT
(
isProfiling
(
)
)
;
cx_
-
>
profilingActivation_
=
this
;
}
void
Activation
:
:
unregisterProfiling
(
)
{
MOZ_ASSERT
(
isProfiling
(
)
)
;
MOZ_ASSERT
(
cx_
-
>
profilingActivation_
=
=
this
)
;
cx_
-
>
profilingActivation_
=
prevProfiling_
;
}
ActivationIterator
:
:
ActivationIterator
(
JSContext
*
cx
)
:
activation_
(
cx
-
>
activation_
)
{
MOZ_ASSERT
(
cx
=
=
TlsContext
.
get
(
)
)
;
}
ActivationIterator
&
ActivationIterator
:
:
operator
+
+
(
)
{
MOZ_ASSERT
(
activation_
)
;
activation_
=
activation_
-
>
prev
(
)
;
return
*
this
;
}
