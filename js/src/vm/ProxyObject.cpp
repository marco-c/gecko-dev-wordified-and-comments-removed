#
include
"
vm
/
ProxyObject
.
h
"
#
include
"
jscompartment
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
jsobjinlines
.
h
"
using
namespace
js
;
ProxyObject
*
ProxyObject
:
:
New
(
JSContext
*
cx
const
BaseProxyHandler
*
handler
HandleValue
priv
TaggedProto
proto_
const
ProxyOptions
&
options
)
{
Rooted
<
TaggedProto
>
proto
(
cx
proto_
)
;
const
Class
*
clasp
=
options
.
clasp
(
)
;
MOZ_ASSERT
(
isValidProxyClass
(
clasp
)
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
MOZ_ASSERT_IF
(
proto
.
isObject
(
)
cx
-
>
compartment
(
)
=
=
proto
.
toObject
(
)
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
clasp
-
>
hasFinalize
(
)
)
;
if
(
proto
.
isObject
(
)
&
&
!
options
.
singleton
(
)
&
&
!
clasp
-
>
isDOMClass
(
)
)
{
RootedObject
protoObj
(
cx
proto
.
toObject
(
)
)
;
if
(
!
JSObject
:
:
setNewGroupUnknown
(
cx
clasp
protoObj
)
)
return
nullptr
;
}
NewObjectKind
newKind
=
NurseryAllocatedProxy
;
if
(
options
.
singleton
(
)
)
{
MOZ_ASSERT
(
priv
.
isNull
(
)
|
|
(
priv
.
isGCThing
(
)
&
&
priv
.
toGCThing
(
)
-
>
isTenured
(
)
)
)
;
newKind
=
SingletonObject
;
}
else
if
(
(
priv
.
isGCThing
(
)
&
&
priv
.
toGCThing
(
)
-
>
isTenured
(
)
)
|
|
!
handler
-
>
canNurseryAllocate
(
)
|
|
!
handler
-
>
finalizeInBackground
(
priv
)
)
{
newKind
=
TenuredObject
;
}
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
clasp
)
;
if
(
handler
-
>
finalizeInBackground
(
priv
)
)
allocKind
=
GetBackgroundAllocKind
(
allocKind
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
RootedObject
obj
(
cx
NewObjectWithGivenTaggedProto
(
cx
clasp
proto
allocKind
newKind
)
)
;
if
(
!
obj
)
return
nullptr
;
Rooted
<
ProxyObject
*
>
proxy
(
cx
&
obj
-
>
as
<
ProxyObject
>
(
)
)
;
new
(
proxy
-
>
data
.
values
)
detail
:
:
ProxyValueArray
;
proxy
-
>
data
.
handler
=
handler
;
proxy
-
>
setCrossCompartmentPrivate
(
priv
)
;
if
(
newKind
!
=
SingletonObject
&
&
!
clasp
-
>
isDOMClass
(
)
)
MarkObjectGroupUnknownProperties
(
cx
proxy
-
>
group
(
)
)
;
return
proxy
;
}
gc
:
:
AllocKind
ProxyObject
:
:
allocKindForTenure
(
)
const
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
group
(
)
-
>
clasp
(
)
)
;
if
(
data
.
handler
-
>
finalizeInBackground
(
const_cast
<
ProxyObject
*
>
(
this
)
-
>
private_
(
)
)
)
allocKind
=
GetBackgroundAllocKind
(
allocKind
)
;
return
allocKind
;
}
size_t
ProxyObject
:
:
objectMovedDuringMinorGC
(
TenuringTracer
*
trc
JSObject
*
dst
JSObject
*
src
)
{
ProxyObject
&
psrc
=
src
-
>
as
<
ProxyObject
>
(
)
;
ProxyObject
&
pdst
=
dst
-
>
as
<
ProxyObject
>
(
)
;
if
(
trc
-
>
runtime
(
)
-
>
gc
.
nursery
.
isInside
(
psrc
.
data
.
values
)
)
pdst
.
data
.
values
=
js_new
<
detail
:
:
ProxyValueArray
>
(
*
psrc
.
data
.
values
)
;
else
trc
-
>
runtime
(
)
-
>
gc
.
nursery
.
removeMallocedBuffer
(
psrc
.
data
.
values
)
;
return
sizeof
(
detail
:
:
ProxyValueArray
)
;
}
void
ProxyObject
:
:
setCrossCompartmentPrivate
(
const
Value
&
priv
)
{
*
slotOfPrivate
(
)
=
priv
;
}
void
ProxyObject
:
:
setSameCompartmentPrivate
(
const
Value
&
priv
)
{
MOZ_ASSERT
(
IsObjectValueInCompartment
(
priv
compartment
(
)
)
)
;
*
slotOfPrivate
(
)
=
priv
;
}
void
ProxyObject
:
:
nuke
(
)
{
setSameCompartmentPrivate
(
NullValue
(
)
)
;
setHandler
(
&
DeadObjectProxy
:
:
singleton
)
;
}
JS_FRIEND_API
(
void
)
js
:
:
SetValueInProxy
(
Value
*
slot
const
Value
&
value
)
{
*
reinterpret_cast
<
GCPtrValue
*
>
(
slot
)
=
value
;
}
