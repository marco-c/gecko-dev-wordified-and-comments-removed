#
include
"
vm
/
ProxyObject
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
GCTrace
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
TypeInference
-
inl
.
h
"
using
namespace
js
;
static
gc
:
:
AllocKind
GetProxyGCObjectKind
(
const
JSClass
*
clasp
const
BaseProxyHandler
*
handler
const
Value
&
priv
)
{
MOZ_ASSERT
(
clasp
-
>
isProxy
(
)
)
;
uint32_t
nreserved
=
JSCLASS_RESERVED_SLOTS
(
clasp
)
;
MOZ_ASSERT
(
nreserved
>
0
)
;
MOZ_ASSERT
(
js
:
:
detail
:
:
ProxyValueArray
:
:
sizeOf
(
nreserved
)
%
sizeof
(
Value
)
=
=
0
"
ProxyValueArray
must
be
a
multiple
of
Value
"
)
;
uint32_t
nslots
=
js
:
:
detail
:
:
ProxyValueArray
:
:
sizeOf
(
nreserved
)
/
sizeof
(
Value
)
;
MOZ_ASSERT
(
nslots
<
=
NativeObject
:
:
MAX_FIXED_SLOTS
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectKind
(
nslots
)
;
if
(
handler
-
>
finalizeInBackground
(
priv
)
)
{
kind
=
ForegroundToBackgroundAllocKind
(
kind
)
;
}
return
kind
;
}
void
ProxyObject
:
:
init
(
const
BaseProxyHandler
*
handler
HandleValue
priv
JSContext
*
cx
)
{
setInlineValueArray
(
)
;
detail
:
:
ProxyValueArray
*
values
=
detail
:
:
GetProxyDataLayout
(
this
)
-
>
values
(
)
;
values
-
>
init
(
numReservedSlots
(
)
)
;
data
.
handler
=
handler
;
if
(
IsCrossCompartmentWrapper
(
this
)
)
{
MOZ_ASSERT
(
cx
-
>
global
(
)
=
=
&
cx
-
>
compartment
(
)
-
>
globalForNewCCW
(
)
)
;
setCrossCompartmentPrivate
(
priv
)
;
}
else
{
setSameCompartmentPrivate
(
priv
)
;
}
}
ProxyObject
*
ProxyObject
:
:
New
(
JSContext
*
cx
const
BaseProxyHandler
*
handler
HandleValue
priv
TaggedProto
proto_
const
JSClass
*
clasp
)
{
Rooted
<
TaggedProto
>
proto
(
cx
proto_
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
isValidProxyClass
(
clasp
)
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
MOZ_ASSERT_IF
(
proto
.
isObject
(
)
cx
-
>
compartment
(
)
=
=
proto
.
toObject
(
)
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
clasp
-
>
hasFinalize
(
)
)
;
if
(
priv
.
isGCThing
(
)
)
{
JS
:
:
AssertCellIsNotGray
(
priv
.
toGCThing
(
)
)
;
}
#
endif
if
(
proto
.
isObject
(
)
&
&
!
clasp
-
>
isDOMClass
(
)
)
{
ObjectGroupRealm
&
realm
=
ObjectGroupRealm
:
:
getForNewObject
(
cx
)
;
RootedObject
protoObj
(
cx
proto
.
toObject
(
)
)
;
if
(
!
JSObject
:
:
setNewGroupUnknown
(
cx
realm
clasp
protoObj
)
)
{
return
nullptr
;
}
}
NewObjectKind
newKind
=
NurseryAllocatedProxy
;
if
(
(
priv
.
isGCThing
(
)
&
&
priv
.
toGCThing
(
)
-
>
isTenured
(
)
)
|
|
!
handler
-
>
canNurseryAllocate
(
)
)
{
newKind
=
TenuredObject
;
}
gc
:
:
AllocKind
allocKind
=
GetProxyGCObjectKind
(
clasp
handler
priv
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
ProxyObject
*
proxy
;
JS_TRY_VAR_OR_RETURN_NULL
(
cx
proxy
create
(
cx
clasp
proto
allocKind
newKind
)
)
;
proxy
-
>
init
(
handler
priv
cx
)
;
if
(
!
clasp
-
>
isDOMClass
(
)
)
{
MarkObjectGroupUnknownProperties
(
cx
proxy
-
>
group
(
)
)
;
}
return
proxy
;
}
ProxyObject
*
ProxyObject
:
:
NewSingleton
(
JSContext
*
cx
const
BaseProxyHandler
*
handler
HandleValue
priv
TaggedProto
proto_
const
JSClass
*
clasp
)
{
Rooted
<
TaggedProto
>
proto
(
cx
proto_
)
;
MOZ_ASSERT
(
clasp
-
>
isProxy
(
)
)
;
MOZ_ASSERT
(
isValidProxyClass
(
clasp
)
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
MOZ_ASSERT_IF
(
proto
.
isObject
(
)
cx
-
>
compartment
(
)
=
=
proto
.
toObject
(
)
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
clasp
-
>
hasFinalize
(
)
)
;
#
ifdef
DEBUG
if
(
priv
.
isGCThing
(
)
)
{
JS
:
:
AssertCellIsNotGray
(
priv
.
toGCThing
(
)
)
;
}
#
endif
gc
:
:
AllocKind
allocKind
=
GetProxyGCObjectKind
(
clasp
handler
priv
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
Rooted
<
ProxyObject
*
>
proxy
(
cx
)
;
{
Realm
*
realm
=
cx
-
>
realm
(
)
;
RootedObjectGroup
group
(
cx
ObjectGroup
:
:
lazySingletonGroup
(
cx
ObjectGroupRealm
:
:
getForNewObject
(
cx
)
realm
clasp
proto
)
)
;
if
(
!
group
)
{
return
nullptr
;
}
MOZ_ASSERT
(
group
-
>
realm
(
)
=
=
realm
)
;
MOZ_ASSERT
(
group
-
>
singleton
(
)
)
;
MOZ_ASSERT
(
!
IsAboutToBeFinalizedUnbarriered
(
group
.
address
(
)
)
)
;
RootedShape
shape
(
cx
EmptyShape
:
:
getInitialShape
(
cx
clasp
proto
0
)
)
;
if
(
!
shape
)
{
return
nullptr
;
}
MOZ_ASSERT
(
shape
-
>
zone
(
)
=
=
cx
-
>
zone
(
)
)
;
MOZ_ASSERT
(
!
IsAboutToBeFinalizedUnbarriered
(
shape
.
address
(
)
)
)
;
gc
:
:
InitialHeap
heap
=
gc
:
:
TenuredHeap
;
debugCheckNewObject
(
group
shape
allocKind
heap
)
;
JSObject
*
obj
=
AllocateObject
(
cx
allocKind
0
heap
clasp
)
;
if
(
!
obj
)
{
return
nullptr
;
}
proxy
=
static_cast
<
ProxyObject
*
>
(
obj
)
;
proxy
-
>
initGroup
(
group
)
;
proxy
-
>
initShape
(
shape
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
realm
-
>
setObjectPendingMetadata
(
cx
proxy
)
;
js
:
:
gc
:
:
gcTracer
.
traceCreateObject
(
proxy
)
;
}
proxy
-
>
init
(
handler
priv
cx
)
;
MOZ_ASSERT
(
proxy
-
>
isSingleton
(
)
)
;
return
proxy
;
}
gc
:
:
AllocKind
ProxyObject
:
:
allocKindForTenure
(
)
const
{
MOZ_ASSERT
(
usingInlineValueArray
(
)
)
;
Value
priv
=
private_
(
)
;
return
GetProxyGCObjectKind
(
getClass
(
)
data
.
handler
priv
)
;
}
void
ProxyObject
:
:
setCrossCompartmentPrivate
(
const
Value
&
priv
)
{
setPrivate
(
priv
)
;
}
void
ProxyObject
:
:
setSameCompartmentPrivate
(
const
Value
&
priv
)
{
MOZ_ASSERT
(
IsObjectValueInCompartment
(
priv
compartment
(
)
)
)
;
setPrivate
(
priv
)
;
}
inline
void
ProxyObject
:
:
setPrivate
(
const
Value
&
priv
)
{
MOZ_ASSERT_IF
(
IsMarkedBlack
(
this
)
&
&
priv
.
isGCThing
(
)
!
JS
:
:
GCThingIsMarkedGray
(
JS
:
:
GCCellPtr
(
priv
)
)
)
;
*
slotOfPrivate
(
)
=
priv
;
}
void
ProxyObject
:
:
nuke
(
)
{
setSameCompartmentPrivate
(
DeadProxyTargetValue
(
this
)
)
;
setHandler
(
&
DeadObjectProxy
:
:
singleton
)
;
}
JS
:
:
Result
<
ProxyObject
*
JS
:
:
OOM
&
>
ProxyObject
:
:
create
(
JSContext
*
cx
const
JSClass
*
clasp
Handle
<
TaggedProto
>
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
)
{
MOZ_ASSERT
(
clasp
-
>
isProxy
(
)
)
;
Realm
*
realm
=
cx
-
>
realm
(
)
;
RootedObjectGroup
group
(
cx
)
;
RootedShape
shape
(
cx
)
;
if
(
!
realm
-
>
newProxyCache
.
lookup
(
clasp
proto
group
.
address
(
)
shape
.
address
(
)
)
)
{
group
=
ObjectGroup
:
:
defaultNewGroup
(
cx
clasp
proto
nullptr
)
;
if
(
!
group
)
{
return
cx
-
>
alreadyReportedOOM
(
)
;
}
shape
=
EmptyShape
:
:
getInitialShape
(
cx
clasp
proto
0
)
;
if
(
!
shape
)
{
return
cx
-
>
alreadyReportedOOM
(
)
;
}
realm
-
>
newProxyCache
.
add
(
group
shape
)
;
}
MOZ_ASSERT
(
group
-
>
realm
(
)
=
=
realm
)
;
MOZ_ASSERT
(
shape
-
>
zone
(
)
=
=
cx
-
>
zone
(
)
)
;
MOZ_ASSERT
(
!
IsAboutToBeFinalizedUnbarriered
(
group
.
address
(
)
)
)
;
MOZ_ASSERT
(
!
IsAboutToBeFinalizedUnbarriered
(
shape
.
address
(
)
)
)
;
gc
:
:
InitialHeap
heap
=
GetInitialHeap
(
newKind
group
)
;
debugCheckNewObject
(
group
shape
allocKind
heap
)
;
JSObject
*
obj
=
js
:
:
AllocateObject
(
cx
allocKind
0
heap
clasp
)
;
if
(
!
obj
)
{
return
cx
-
>
alreadyReportedOOM
(
)
;
}
ProxyObject
*
pobj
=
static_cast
<
ProxyObject
*
>
(
obj
)
;
pobj
-
>
initGroup
(
group
)
;
pobj
-
>
initShape
(
shape
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
cx
-
>
realm
(
)
-
>
setObjectPendingMetadata
(
cx
pobj
)
;
js
:
:
gc
:
:
gcTracer
.
traceCreateObject
(
pobj
)
;
return
pobj
;
}
JS_FRIEND_API
void
js
:
:
detail
:
:
SetValueInProxy
(
Value
*
slot
const
Value
&
value
)
{
*
reinterpret_cast
<
GCPtrValue
*
>
(
slot
)
=
value
;
}
