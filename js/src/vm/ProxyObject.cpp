#
include
"
vm
/
ProxyObject
.
h
"
#
include
"
gc
/
GCProbes
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
static
gc
:
:
AllocKind
GetProxyGCObjectKind
(
const
JSClass
*
clasp
const
BaseProxyHandler
*
handler
const
Value
&
priv
bool
withInlineValues
)
{
MOZ_ASSERT
(
clasp
-
>
isProxyObject
(
)
)
;
uint32_t
nreserved
=
JSCLASS_RESERVED_SLOTS
(
clasp
)
;
MOZ_ASSERT
(
nreserved
>
0
)
;
uint32_t
nslots
=
0
;
if
(
withInlineValues
)
{
nslots
=
detail
:
:
ProxyValueArray
:
:
allocCount
(
nreserved
)
;
}
MOZ_ASSERT
(
nslots
<
=
NativeObject
:
:
MAX_FIXED_SLOTS
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectKind
(
nslots
)
;
if
(
handler
-
>
finalizeInBackground
(
priv
)
)
{
kind
=
ForegroundToBackgroundAllocKind
(
kind
)
;
}
return
kind
;
}
void
ProxyObject
:
:
init
(
const
BaseProxyHandler
*
handler
HandleValue
priv
JSContext
*
cx
)
{
setInlineValueArray
(
)
;
detail
:
:
ProxyValueArray
*
values
=
detail
:
:
GetProxyDataLayout
(
this
)
-
>
values
(
)
;
values
-
>
init
(
numReservedSlots
(
)
)
;
data
.
handler
=
handler
;
if
(
IsCrossCompartmentWrapper
(
this
)
)
{
MOZ_ASSERT
(
cx
-
>
global
(
)
=
=
&
cx
-
>
compartment
(
)
-
>
globalForNewCCW
(
)
)
;
setCrossCompartmentPrivate
(
priv
)
;
}
else
{
setSameCompartmentPrivate
(
priv
)
;
}
setExpando
(
nullptr
)
;
}
ProxyObject
*
ProxyObject
:
:
New
(
JSContext
*
cx
const
BaseProxyHandler
*
handler
HandleValue
priv
TaggedProto
proto_
const
JSClass
*
clasp
)
{
Rooted
<
TaggedProto
>
proto
(
cx
proto_
)
;
MOZ_ASSERT
(
!
clasp
-
>
isNativeObject
(
)
)
;
MOZ_ASSERT
(
clasp
-
>
isProxyObject
(
)
)
;
MOZ_ASSERT
(
isValidProxyClass
(
clasp
)
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
MOZ_ASSERT_IF
(
proto
.
isObject
(
)
cx
-
>
compartment
(
)
=
=
proto
.
toObject
(
)
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
clasp
-
>
hasFinalize
(
)
)
;
#
ifdef
DEBUG
if
(
priv
.
isGCThing
(
)
)
{
JS
:
:
AssertCellIsNotGray
(
priv
.
toGCThing
(
)
)
;
}
#
endif
gc
:
:
AllocKind
allocKind
=
GetProxyGCObjectKind
(
clasp
handler
priv
true
)
;
Realm
*
realm
=
cx
-
>
realm
(
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
Rooted
<
Shape
*
>
shape
(
cx
)
;
if
(
!
realm
-
>
newProxyCache
.
lookup
(
clasp
proto
shape
.
address
(
)
)
)
{
shape
=
ProxyShape
:
:
getShape
(
cx
clasp
realm
proto
ObjectFlags
(
)
)
;
if
(
!
shape
)
{
return
nullptr
;
}
realm
-
>
newProxyCache
.
add
(
shape
)
;
}
MOZ_ASSERT
(
shape
-
>
realm
(
)
=
=
realm
)
;
MOZ_ASSERT
(
!
IsAboutToBeFinalizedUnbarriered
(
shape
.
get
(
)
)
)
;
gc
:
:
Heap
heap
;
if
(
(
priv
.
isGCThing
(
)
&
&
priv
.
toGCThing
(
)
-
>
isTenured
(
)
)
|
|
!
handler
-
>
canNurseryAllocate
(
)
)
{
heap
=
gc
:
:
Heap
:
:
Tenured
;
}
else
{
heap
=
gc
:
:
Heap
:
:
Default
;
}
debugCheckNewObject
(
shape
allocKind
heap
)
;
ProxyObject
*
proxy
=
cx
-
>
newCell
<
ProxyObject
>
(
allocKind
heap
clasp
)
;
if
(
!
proxy
)
{
return
nullptr
;
}
proxy
-
>
initShape
(
shape
)
;
MOZ_ASSERT
(
clasp
-
>
shouldDelayMetadataBuilder
(
)
)
;
realm
-
>
setObjectPendingMetadata
(
proxy
)
;
gc
:
:
gcprobes
:
:
CreateObject
(
proxy
)
;
proxy
-
>
init
(
handler
priv
cx
)
;
return
proxy
;
}
gc
:
:
AllocKind
ProxyObject
:
:
allocKindForTenure
(
)
const
{
Value
priv
=
private_
(
)
;
return
GetProxyGCObjectKind
(
getClass
(
)
data
.
handler
priv
usingInlineValueArray
(
)
)
;
}
void
ProxyObject
:
:
setCrossCompartmentPrivate
(
const
Value
&
priv
)
{
setPrivate
(
priv
)
;
}
void
ProxyObject
:
:
setSameCompartmentPrivate
(
const
Value
&
priv
)
{
MOZ_ASSERT
(
IsObjectValueInCompartment
(
priv
compartment
(
)
)
)
;
setPrivate
(
priv
)
;
}
inline
void
ProxyObject
:
:
setPrivate
(
const
Value
&
priv
)
{
#
ifdef
DEBUG
JS
:
:
AssertValueIsNotGray
(
priv
)
;
#
endif
*
slotOfPrivate
(
)
=
priv
;
}
void
ProxyObject
:
:
setExpando
(
JSObject
*
expando
)
{
MOZ_ASSERT_IF
(
expando
expando
-
>
compartment
(
)
=
=
compartment
(
)
)
;
MOZ_ASSERT_IF
(
!
zone
(
)
-
>
isGCPreparing
(
)
&
&
isMarkedBlack
(
)
&
&
expando
!
JS
:
:
GCThingIsMarkedGray
(
JS
:
:
GCCellPtr
(
expando
)
)
)
;
*
slotOfExpando
(
)
=
ObjectOrNullValue
(
expando
)
;
}
void
ProxyObject
:
:
nuke
(
)
{
JSObject
*
delegate
=
UncheckedUnwrapWithoutExpose
(
this
)
;
if
(
delegate
!
=
this
)
{
delegate
-
>
zone
(
)
-
>
beforeClearDelegate
(
this
delegate
)
;
}
setSameCompartmentPrivate
(
DeadProxyTargetValue
(
this
)
)
;
setExpando
(
nullptr
)
;
setHandler
(
&
DeadObjectProxy
:
:
singleton
)
;
}
JS_PUBLIC_API
void
js
:
:
detail
:
:
SetValueInProxy
(
Value
*
slot
const
Value
&
value
)
{
*
reinterpret_cast
<
GCPtr
<
Value
>
*
>
(
slot
)
=
value
;
}
