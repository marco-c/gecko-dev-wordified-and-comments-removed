#
ifndef
vm_SPSProfiler_h
#
define
vm_SPSProfiler_h
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jsscript
.
h
"
#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
threading
/
ExclusiveData
.
h
"
#
include
"
threading
/
Mutex
.
h
"
namespace
js
{
using
ProfileStringMap
=
HashMap
<
JSScript
*
UniqueChars
DefaultHasher
<
JSScript
*
>
SystemAllocPolicy
>
;
class
AutoSPSEntry
;
class
SPSEntryMarker
;
class
SPSBaselineOSRMarker
;
class
SPSProfiler
{
friend
class
AutoSPSEntry
;
friend
class
SPSEntryMarker
;
friend
class
SPSBaselineOSRMarker
;
JSRuntime
*
rt
;
ExclusiveData
<
ProfileStringMap
>
strings
;
ProfileEntry
*
stack_
;
uint32_t
*
size_
;
uint32_t
max_
;
bool
slowAssertions
;
uint32_t
enabled_
;
void
(
*
eventMarker_
)
(
const
char
*
)
;
UniqueChars
allocProfileString
(
JSScript
*
script
JSFunction
*
function
)
;
void
push
(
const
char
*
string
void
*
sp
JSScript
*
script
jsbytecode
*
pc
bool
copy
ProfileEntry
:
:
Category
category
=
ProfileEntry
:
:
Category
:
:
JS
)
;
void
pop
(
)
;
public
:
explicit
SPSProfiler
(
JSRuntime
*
rt
)
;
bool
init
(
)
;
uint32_t
*
*
addressOfSizePointer
(
)
{
return
&
size_
;
}
uint32_t
*
addressOfMaxSize
(
)
{
return
&
max_
;
}
ProfileEntry
*
*
addressOfStack
(
)
{
return
&
stack_
;
}
uint32_t
*
sizePointer
(
)
{
return
size_
;
}
uint32_t
maxSize
(
)
{
return
max_
;
}
uint32_t
size
(
)
{
MOZ_ASSERT
(
installed
(
)
)
;
return
*
size_
;
}
ProfileEntry
*
stack
(
)
{
return
stack_
;
}
bool
enabled
(
)
{
MOZ_ASSERT_IF
(
enabled_
installed
(
)
)
;
return
enabled_
;
}
bool
installed
(
)
{
return
stack_
!
=
nullptr
&
&
size_
!
=
nullptr
;
}
void
enable
(
bool
enabled
)
;
void
enableSlowAssertions
(
bool
enabled
)
{
slowAssertions
=
enabled
;
}
bool
slowAssertionsEnabled
(
)
{
return
slowAssertions
;
}
bool
enter
(
JSContext
*
cx
JSScript
*
script
JSFunction
*
maybeFun
)
;
void
exit
(
JSScript
*
script
JSFunction
*
maybeFun
)
;
void
updatePC
(
JSScript
*
script
jsbytecode
*
pc
)
{
if
(
enabled
(
)
&
&
*
size_
-
1
<
max_
)
{
MOZ_ASSERT
(
*
size_
>
0
)
;
MOZ_ASSERT
(
stack_
[
*
size_
-
1
]
.
rawScript
(
)
=
=
script
)
;
stack_
[
*
size_
-
1
]
.
setPC
(
pc
)
;
}
}
void
beginPseudoJS
(
const
char
*
string
void
*
sp
)
;
void
endPseudoJS
(
)
{
pop
(
)
;
}
jsbytecode
*
ipToPC
(
JSScript
*
script
size_t
ip
)
{
return
nullptr
;
}
void
setProfilingStack
(
ProfileEntry
*
stack
uint32_t
*
size
uint32_t
max
)
;
void
setEventMarker
(
void
(
*
fn
)
(
const
char
*
)
)
;
const
char
*
profileString
(
JSScript
*
script
JSFunction
*
maybeFun
)
;
void
onScriptFinalized
(
JSScript
*
script
)
;
void
markEvent
(
const
char
*
event
)
;
size_t
stringsCount
(
)
;
void
stringsReset
(
)
;
uint32_t
*
addressOfEnabled
(
)
{
return
&
enabled_
;
}
void
trace
(
JSTracer
*
trc
)
;
void
fixupStringsMapAfterMovingGC
(
)
;
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkStringsMapAfterMovingGC
(
)
;
#
endif
}
;
class
MOZ_RAII
AutoSuppressProfilerSampling
{
public
:
explicit
AutoSuppressProfilerSampling
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
explicit
AutoSuppressProfilerSampling
(
JSRuntime
*
rt
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
AutoSuppressProfilerSampling
(
)
;
private
:
JSRuntime
*
rt_
;
bool
previouslyEnabled_
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
inline
size_t
SPSProfiler
:
:
stringsCount
(
)
{
return
strings
.
lock
(
)
-
>
count
(
)
;
}
inline
void
SPSProfiler
:
:
stringsReset
(
)
{
strings
.
lock
(
)
-
>
clear
(
)
;
}
class
MOZ_RAII
SPSEntryMarker
{
public
:
explicit
SPSEntryMarker
(
JSRuntime
*
rt
JSScript
*
script
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
SPSEntryMarker
(
)
;
private
:
SPSProfiler
*
profiler
;
mozilla
:
:
DebugOnly
<
uint32_t
>
size_before
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_NONHEAP_CLASS
AutoSPSEntry
{
public
:
explicit
AutoSPSEntry
(
JSRuntime
*
rt
const
char
*
label
ProfileEntry
:
:
Category
category
=
ProfileEntry
:
:
Category
:
:
JS
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
AutoSPSEntry
(
)
;
private
:
SPSProfiler
*
profiler_
;
mozilla
:
:
DebugOnly
<
uint32_t
>
sizeBefore_
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
SPSBaselineOSRMarker
{
public
:
explicit
SPSBaselineOSRMarker
(
JSRuntime
*
rt
bool
hasSPSFrame
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
SPSBaselineOSRMarker
(
)
;
private
:
SPSProfiler
*
profiler
;
mozilla
:
:
DebugOnly
<
uint32_t
>
size_before
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
template
<
class
Assembler
class
Register
>
class
SPSInstrumentation
{
SPSProfiler
*
profiler_
;
public
:
explicit
SPSInstrumentation
(
SPSProfiler
*
profiler
)
:
profiler_
(
profiler
)
{
}
bool
enabled
(
)
{
return
profiler_
&
&
profiler_
-
>
enabled
(
)
;
}
SPSProfiler
*
profiler
(
)
{
MOZ_ASSERT
(
enabled
(
)
)
;
return
profiler_
;
}
void
disable
(
)
{
profiler_
=
nullptr
;
}
}
;
void
*
GetTopProfilingJitFrame
(
uint8_t
*
exitFramePtr
)
;
}
#
endif
