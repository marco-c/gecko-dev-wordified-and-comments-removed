#
ifndef
vm_SavedStacks_h
#
define
vm_SavedStacks_h
#
include
"
jscntxt
.
h
"
#
include
"
jsmath
.
h
"
#
include
"
jswrapper
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
vm
/
SavedFrame
.
h
"
#
include
"
vm
/
Stack
.
h
"
namespace
js
{
class
SavedStacks
{
friend
JSObject
*
SavedStacksMetadataCallback
(
JSContext
*
cx
JSObject
*
target
)
;
friend
bool
JS
:
:
ubi
:
:
ConstructSavedFrameStackSlow
(
JSContext
*
cx
JS
:
:
ubi
:
:
StackFrame
&
ubiFrame
MutableHandleObject
outSavedFrameStack
)
;
public
:
SavedStacks
(
)
:
frames
(
)
allocationSamplingProbability
(
1
.
0
)
allocationSkipCount
(
0
)
rngState
(
0
)
creatingSavedFrame
(
false
)
{
}
bool
init
(
)
;
bool
initialized
(
)
const
{
return
frames
.
initialized
(
)
;
}
bool
saveCurrentStack
(
JSContext
*
cx
MutableHandleSavedFrame
frame
unsigned
maxFrameCount
=
0
)
;
void
sweep
(
JSRuntime
*
rt
)
;
void
trace
(
JSTracer
*
trc
)
;
uint32_t
count
(
)
;
void
clear
(
)
;
void
setRNGState
(
uint64_t
state
)
{
rngState
=
state
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
private
:
SavedFrame
:
:
Set
frames
;
double
allocationSamplingProbability
;
uint32_t
allocationSkipCount
;
uint64_t
rngState
;
bool
creatingSavedFrame
;
struct
MOZ_RAII
AutoReentrancyGuard
{
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
;
SavedStacks
&
stacks
;
explicit
AutoReentrancyGuard
(
SavedStacks
&
stacks
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
stacks
(
stacks
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
stacks
.
creatingSavedFrame
=
true
;
}
~
AutoReentrancyGuard
(
)
{
stacks
.
creatingSavedFrame
=
false
;
}
}
;
bool
insertFrames
(
JSContext
*
cx
FrameIter
&
iter
MutableHandleSavedFrame
frame
unsigned
maxFrameCount
=
0
)
;
bool
adoptAsyncStack
(
JSContext
*
cx
HandleSavedFrame
asyncStack
HandleString
asyncCause
MutableHandleSavedFrame
adoptedStack
unsigned
maxFrameCount
)
;
SavedFrame
*
getOrCreateSavedFrame
(
JSContext
*
cx
SavedFrame
:
:
HandleLookup
lookup
)
;
SavedFrame
*
createFrameFromLookup
(
JSContext
*
cx
SavedFrame
:
:
HandleLookup
lookup
)
;
void
chooseSamplingProbability
(
JSContext
*
cx
)
;
struct
PCKey
{
PCKey
(
JSScript
*
script
jsbytecode
*
pc
)
:
script
(
script
)
pc
(
pc
)
{
}
PreBarrieredScript
script
;
jsbytecode
*
pc
;
}
;
struct
LocationValue
{
LocationValue
(
)
:
source
(
nullptr
)
line
(
0
)
column
(
0
)
{
}
LocationValue
(
JSAtom
*
source
size_t
line
uint32_t
column
)
:
source
(
source
)
line
(
line
)
column
(
column
)
{
}
void
trace
(
JSTracer
*
trc
)
{
if
(
source
)
TraceEdge
(
trc
&
source
"
SavedStacks
:
:
LocationValue
:
:
source
"
)
;
}
PreBarrieredAtom
source
;
size_t
line
;
uint32_t
column
;
}
;
class
MOZ_STACK_CLASS
AutoLocationValueRooter
:
public
JS
:
:
CustomAutoRooter
{
public
:
explicit
AutoLocationValueRooter
(
JSContext
*
cx
)
:
JS
:
:
CustomAutoRooter
(
cx
)
value
(
)
{
}
inline
LocationValue
*
operator
-
>
(
)
{
return
&
value
;
}
void
set
(
LocationValue
&
loc
)
{
value
=
loc
;
}
LocationValue
&
get
(
)
{
return
value
;
}
private
:
virtual
void
trace
(
JSTracer
*
trc
)
{
value
.
trace
(
trc
)
;
}
SavedStacks
:
:
LocationValue
value
;
}
;
class
MOZ_STACK_CLASS
MutableHandleLocationValue
{
public
:
inline
MOZ_IMPLICIT
MutableHandleLocationValue
(
AutoLocationValueRooter
*
location
)
:
location
(
location
)
{
}
inline
LocationValue
*
operator
-
>
(
)
{
return
&
location
-
>
get
(
)
;
}
void
set
(
LocationValue
&
loc
)
{
location
-
>
set
(
loc
)
;
}
private
:
AutoLocationValueRooter
*
location
;
}
;
struct
PCLocationHasher
:
public
DefaultHasher
<
PCKey
>
{
typedef
PointerHasher
<
JSScript
*
3
>
ScriptPtrHasher
;
typedef
PointerHasher
<
jsbytecode
*
3
>
BytecodePtrHasher
;
static
HashNumber
hash
(
const
PCKey
&
key
)
{
return
mozilla
:
:
AddToHash
(
ScriptPtrHasher
:
:
hash
(
key
.
script
)
BytecodePtrHasher
:
:
hash
(
key
.
pc
)
)
;
}
static
bool
match
(
const
PCKey
&
l
const
PCKey
&
k
)
{
return
l
.
script
=
=
k
.
script
&
&
l
.
pc
=
=
k
.
pc
;
}
}
;
typedef
HashMap
<
PCKey
LocationValue
PCLocationHasher
SystemAllocPolicy
>
PCLocationMap
;
PCLocationMap
pcLocationMap
;
void
sweepPCLocationMap
(
)
;
bool
getLocation
(
JSContext
*
cx
const
FrameIter
&
iter
MutableHandleLocationValue
locationp
)
;
}
;
JSObject
*
SavedStacksMetadataCallback
(
JSContext
*
cx
JSObject
*
target
)
;
}
#
endif
