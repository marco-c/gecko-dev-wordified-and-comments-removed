#
ifndef
vm_PortableBaselineInterpret_h
#
define
vm_PortableBaselineInterpret_h
#
include
"
jspubtd
.
h
"
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
JitContext
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
JitScript
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
Stack
.
h
"
namespace
js
{
namespace
pbl
{
bool
PortableBaselineTrampoline
(
JSContext
*
cx
size_t
argc
Value
*
argv
size_t
numActuals
size_t
numFormals
jit
:
:
CalleeToken
calleeToken
JSObject
*
envChain
Value
*
result
)
;
jit
:
:
MethodStatus
CanEnterPortableBaselineInterpreter
(
JSContext
*
cx
RunState
&
state
)
;
bool
PortablebaselineInterpreterStackCheck
(
JSContext
*
cx
RunState
&
state
size_t
numActualArgs
)
;
struct
State
;
struct
Stack
;
struct
StackVal
;
struct
StackValNative
;
struct
ICRegs
;
class
VMFrameManager
;
enum
class
PBIResult
{
Ok
Error
Unwind
UnwindError
UnwindRet
}
;
PBIResult
PortableBaselineInterpret
(
JSContext
*
cx_
State
&
state
Stack
&
stack
StackVal
*
sp
JSObject
*
envChain
Value
*
ret
)
;
uint8_t
*
GetPortableFallbackStub
(
jit
:
:
BaselineICFallbackKind
kind
)
;
uint8_t
*
GetICInterpreter
(
)
;
}
}
#
endif
