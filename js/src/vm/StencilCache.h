#
ifndef
vm_StencilCache_h
#
define
vm_StencilCache_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
threading
/
ExclusiveData
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
vm
/
SharedStencil
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
{
class
ScriptSource
;
namespace
frontend
{
struct
CompilationStencil
;
struct
ExtensibleCompilationStencil
;
}
struct
SourceCachePolicy
{
using
Lookup
=
const
ScriptSource
*
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
return
mozilla
:
:
HashGeneric
(
l
)
;
}
static
bool
match
(
const
Lookup
&
entry
const
Lookup
&
l
)
{
return
entry
=
=
l
;
}
}
;
struct
StencilContext
{
RefPtr
<
ScriptSource
>
source
;
SourceExtent
:
:
FunctionKey
funKey
;
StencilContext
(
RefPtr
<
ScriptSource
>
&
source
SourceExtent
extent
)
:
source
(
source
)
funKey
(
extent
.
toFunctionKey
(
)
)
{
}
}
;
struct
StencilCachePolicy
{
using
Lookup
=
StencilContext
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
const
ScriptSource
*
raw
=
l
.
source
;
return
mozilla
:
:
HashGeneric
(
raw
l
.
funKey
)
;
}
static
bool
match
(
const
Lookup
&
entry
const
Lookup
&
l
)
{
return
entry
.
source
=
=
l
.
source
&
&
entry
.
funKey
=
=
l
.
funKey
;
}
}
;
class
StencilCache
{
using
SourceSet
=
js
:
:
HashSet
<
RefPtr
<
ScriptSource
>
SourceCachePolicy
SystemAllocPolicy
>
;
using
StencilMap
=
js
:
:
HashMap
<
StencilContext
RefPtr
<
frontend
:
:
CompilationStencil
>
StencilCachePolicy
SystemAllocPolicy
>
;
struct
CacheData
{
SourceSet
watched
;
StencilMap
functions
;
}
;
ExclusiveData
<
CacheData
>
cache
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
ReleaseAcquire
>
enabled
;
public
:
StencilCache
(
)
;
using
AccessKey
=
ExclusiveData
<
CacheData
>
:
:
NullableGuard
;
AccessKey
isSourceCached
(
ScriptSource
*
src
)
;
[
[
nodiscard
]
]
bool
startCaching
(
RefPtr
<
ScriptSource
>
&
&
src
)
;
frontend
:
:
CompilationStencil
*
lookup
(
AccessKey
&
guard
const
StencilContext
&
key
)
;
[
[
nodiscard
]
]
bool
putNew
(
AccessKey
&
guard
const
StencilContext
&
key
frontend
:
:
CompilationStencil
*
value
)
;
void
clearAndDisable
(
)
;
}
;
}
#
endif
