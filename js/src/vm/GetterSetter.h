#
ifndef
vm_GetterSetter_h
#
define
vm_GetterSetter_h
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Cell
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
UbiNode
.
h
"
namespace
js
{
class
GetterSetter
:
public
gc
:
:
TenuredCellWithGCPointer
<
JSObject
>
{
friend
class
gc
:
:
CellAllocator
;
public
:
JSObject
*
getter
(
)
const
{
return
headerPtr
(
)
;
}
GCPtr
<
JSObject
*
>
setter_
;
#
ifndef
JS_64BIT
uint64_t
padding_
=
0
;
#
endif
private
:
GetterSetter
(
HandleObject
getter
HandleObject
setter
)
;
public
:
static
GetterSetter
*
create
(
JSContext
*
cx
HandleObject
getter
HandleObject
setter
)
;
JSObject
*
setter
(
)
const
{
return
setter_
;
}
static
const
JS
:
:
TraceKind
TraceKind
=
JS
:
:
TraceKind
:
:
GetterSetter
;
void
traceChildren
(
JSTracer
*
trc
)
;
void
finalize
(
JS
:
:
GCContext
*
gcx
)
{
}
}
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
GetterSetter
>
:
TracerConcrete
<
js
:
:
GetterSetter
>
{
protected
:
explicit
Concrete
(
js
:
:
GetterSetter
*
ptr
)
:
TracerConcrete
<
js
:
:
GetterSetter
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
GetterSetter
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
