#
include
"
vm
/
PlainObject
-
inl
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectGroup
.
h
"
#
include
"
vm
/
TaggedProto
.
h
"
#
include
"
vm
/
TypeInference
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
TypeInference
-
inl
.
h
"
using
JS
:
:
Handle
;
using
JS
:
:
Rooted
;
using
js
:
:
AutoSweepObjectGroup
;
using
js
:
:
CopyInitializerObject
;
using
js
:
:
GenericObject
;
using
js
:
:
GuessObjectGCKind
;
using
js
:
:
NewObjectGCKind
;
using
js
:
:
NewObjectKind
;
using
js
:
:
NewObjectWithGroup
;
using
js
:
:
NewSingletonObjectWithGivenTaggedProtoAndKind
;
using
js
:
:
ObjectGroup
;
using
js
:
:
PlainObject
;
using
js
:
:
SingletonObject
;
using
js
:
:
TaggedProto
;
using
js
:
:
TenuredObject
;
static
PlainObject
*
CreateThisForFunctionWithGroup
(
JSContext
*
cx
Handle
<
ObjectGroup
*
>
group
NewObjectKind
newKind
)
{
js
:
:
gc
:
:
AllocKind
allocKind
=
NewObjectGCKind
(
&
PlainObject
:
:
class_
)
;
if
(
newKind
=
=
SingletonObject
)
{
Rooted
<
TaggedProto
>
protoRoot
(
cx
group
-
>
proto
(
)
)
;
return
NewSingletonObjectWithGivenTaggedProtoAndKind
<
PlainObject
>
(
cx
protoRoot
allocKind
)
;
}
return
NewObjectWithGroup
<
PlainObject
>
(
cx
group
allocKind
newKind
)
;
}
PlainObject
*
js
:
:
CreateThisForFunctionWithProto
(
JSContext
*
cx
Handle
<
JSFunction
*
>
callee
Handle
<
JSObject
*
>
newTarget
Handle
<
JSObject
*
>
proto
NewObjectKind
newKind
)
{
MOZ_ASSERT
(
!
callee
-
>
constructorNeedsUninitializedThis
(
)
)
;
Rooted
<
PlainObject
*
>
res
(
cx
)
;
mozilla
:
:
Maybe
<
AutoRealm
>
ar
;
if
(
cx
-
>
realm
(
)
!
=
callee
-
>
realm
(
)
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
callee
-
>
compartment
(
)
)
;
ar
.
emplace
(
cx
callee
)
;
}
if
(
proto
)
{
Rooted
<
ObjectGroup
*
>
group
(
cx
ObjectGroup
:
:
defaultNewGroup
(
cx
&
PlainObject
:
:
class_
TaggedProto
(
proto
)
newTarget
)
)
;
if
(
!
group
)
{
return
nullptr
;
}
res
=
CreateThisForFunctionWithGroup
(
cx
group
newKind
)
;
}
else
{
res
=
NewBuiltinClassInstanceWithKind
<
PlainObject
>
(
cx
newKind
)
;
}
MOZ_ASSERT_IF
(
res
res
-
>
nonCCWRealm
(
)
=
=
callee
-
>
realm
(
)
)
;
return
res
;
}
PlainObject
*
js
:
:
CreateThisForFunction
(
JSContext
*
cx
Handle
<
JSFunction
*
>
callee
Handle
<
JSObject
*
>
newTarget
NewObjectKind
newKind
)
{
MOZ_ASSERT
(
!
callee
-
>
constructorNeedsUninitializedThis
(
)
)
;
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromConstructor
(
cx
newTarget
JSProto_Object
&
proto
)
)
{
return
nullptr
;
}
PlainObject
*
obj
=
CreateThisForFunctionWithProto
(
cx
callee
newTarget
proto
newKind
)
;
if
(
obj
&
&
newKind
=
=
SingletonObject
)
{
Rooted
<
PlainObject
*
>
nobj
(
cx
obj
)
;
NativeObject
:
:
clear
(
cx
nobj
)
;
return
nobj
;
}
return
obj
;
}
