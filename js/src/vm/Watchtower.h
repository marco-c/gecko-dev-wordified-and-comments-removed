#
ifndef
vm_Watchtower_h
#
define
vm_Watchtower_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
Watchtower
{
static
bool
watchPropertyAddSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
;
static
bool
watchPropertyRemoveSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
;
static
bool
watchPropertyChangeSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
PropertyFlags
flags
)
;
static
bool
watchFreezeOrSealSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
;
static
bool
watchProtoChangeSlow
(
JSContext
*
cx
HandleObject
obj
)
;
static
void
watchObjectSwapSlow
(
JSContext
*
cx
HandleObject
a
HandleObject
b
)
;
public
:
static
bool
watchesPropertyAdd
(
NativeObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
IsUsedAsPrototype
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
static
bool
watchesPropertyRemove
(
NativeObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
IsUsedAsPrototype
ObjectFlag
:
:
GenerationCountedGlobal
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
static
bool
watchesPropertyChange
(
NativeObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
IsUsedAsPrototype
ObjectFlag
:
:
GenerationCountedGlobal
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
static
bool
watchesFreezeOrSeal
(
NativeObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
static
bool
watchesProtoChange
(
JSObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
IsUsedAsPrototype
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
static
bool
watchesObjectSwap
(
JSObject
*
a
JSObject
*
b
)
{
auto
watches
=
[
]
(
JSObject
*
obj
)
{
return
obj
-
>
hasAnyFlag
(
{
ObjectFlag
:
:
IsUsedAsPrototype
ObjectFlag
:
:
UseWatchtowerTestingLog
}
)
;
}
;
return
watches
(
a
)
|
|
watches
(
b
)
;
}
static
bool
watchPropertyAdd
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
if
(
MOZ_LIKELY
(
!
watchesPropertyAdd
(
obj
)
)
)
{
return
true
;
}
return
watchPropertyAddSlow
(
cx
obj
id
)
;
}
static
bool
watchPropertyRemove
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
if
(
MOZ_LIKELY
(
!
watchesPropertyRemove
(
obj
)
)
)
{
return
true
;
}
return
watchPropertyRemoveSlow
(
cx
obj
id
)
;
}
static
bool
watchPropertyChange
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
PropertyFlags
flags
)
{
if
(
MOZ_LIKELY
(
!
watchesPropertyChange
(
obj
)
)
)
{
return
true
;
}
return
watchPropertyChangeSlow
(
cx
obj
id
flags
)
;
}
static
bool
watchFreezeOrSeal
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
{
if
(
MOZ_LIKELY
(
!
watchesFreezeOrSeal
(
obj
)
)
)
{
return
true
;
}
return
watchFreezeOrSealSlow
(
cx
obj
)
;
}
static
bool
watchProtoChange
(
JSContext
*
cx
HandleObject
obj
)
{
if
(
MOZ_LIKELY
(
!
watchesProtoChange
(
obj
)
)
)
{
return
true
;
}
return
watchProtoChangeSlow
(
cx
obj
)
;
}
static
void
watchObjectSwap
(
JSContext
*
cx
HandleObject
a
HandleObject
b
)
{
if
(
MOZ_LIKELY
(
!
watchesObjectSwap
(
a
b
)
)
)
{
return
;
}
watchObjectSwapSlow
(
cx
a
b
)
;
}
}
;
}
#
endif
