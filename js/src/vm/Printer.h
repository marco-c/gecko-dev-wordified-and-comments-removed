#
ifndef
vm_Printer_h
#
define
vm_Printer_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdarg
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
class
JSString
;
struct
JSContext
;
namespace
js
{
class
LifoAlloc
;
class
GenericPrinter
{
protected
:
bool
hadOOM_
;
GenericPrinter
(
)
;
public
:
virtual
bool
put
(
const
char
*
s
size_t
len
)
=
0
;
inline
bool
put
(
const
char
*
s
)
{
return
put
(
s
strlen
(
s
)
)
;
}
virtual
bool
printf
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
virtual
bool
vprintf
(
const
char
*
fmt
va_list
ap
)
;
virtual
void
reportOutOfMemory
(
)
;
virtual
bool
hadOutOfMemory
(
)
const
;
}
;
class
Sprinter
final
:
public
GenericPrinter
{
public
:
struct
InvariantChecker
{
const
Sprinter
*
parent
;
explicit
InvariantChecker
(
const
Sprinter
*
p
)
:
parent
(
p
)
{
parent
-
>
checkInvariants
(
)
;
}
~
InvariantChecker
(
)
{
parent
-
>
checkInvariants
(
)
;
}
}
;
JSContext
*
context
;
private
:
static
const
size_t
DefaultSize
;
#
ifdef
DEBUG
bool
initialized
;
#
endif
bool
shouldReportOOM
;
char
*
base
;
size_t
size
;
ptrdiff_t
offset
;
MOZ_MUST_USE
bool
realloc_
(
size_t
newSize
)
;
public
:
explicit
Sprinter
(
JSContext
*
cx
bool
shouldReportOOM
=
true
)
;
~
Sprinter
(
)
;
MOZ_MUST_USE
bool
init
(
)
;
void
checkInvariants
(
)
const
;
const
char
*
string
(
)
const
;
const
char
*
stringEnd
(
)
const
;
char
*
stringAt
(
ptrdiff_t
off
)
const
;
char
&
operator
[
]
(
size_t
off
)
;
char
*
reserve
(
size_t
len
)
;
virtual
bool
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
MOZ_MUST_USE
bool
jsprintf
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
virtual
bool
vprintf
(
const
char
*
fmt
va_list
ap
)
override
;
bool
putString
(
JSString
*
str
)
;
ptrdiff_t
getOffset
(
)
const
;
virtual
void
reportOutOfMemory
(
)
override
;
}
;
class
Fprinter
final
:
public
GenericPrinter
{
private
:
FILE
*
file_
;
bool
init_
;
public
:
explicit
Fprinter
(
FILE
*
fp
)
;
Fprinter
(
)
;
~
Fprinter
(
)
;
MOZ_MUST_USE
bool
init
(
const
char
*
path
)
;
void
init
(
FILE
*
fp
)
;
bool
isInitialized
(
)
const
{
return
file_
!
=
nullptr
;
}
void
flush
(
)
;
void
finish
(
)
;
virtual
bool
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
virtual
bool
printf
(
const
char
*
fmt
.
.
.
)
override
MOZ_FORMAT_PRINTF
(
2
3
)
;
virtual
bool
vprintf
(
const
char
*
fmt
va_list
ap
)
override
;
}
;
class
LSprinter
final
:
public
GenericPrinter
{
private
:
struct
Chunk
{
Chunk
*
next
;
size_t
length
;
char
*
chars
(
)
{
return
reinterpret_cast
<
char
*
>
(
this
+
1
)
;
}
char
*
end
(
)
{
return
chars
(
)
+
length
;
}
}
;
private
:
LifoAlloc
*
alloc_
;
Chunk
*
head_
;
Chunk
*
tail_
;
size_t
unused_
;
public
:
explicit
LSprinter
(
LifoAlloc
*
lifoAlloc
)
;
~
LSprinter
(
)
;
void
exportInto
(
GenericPrinter
&
out
)
const
;
void
clear
(
)
;
virtual
bool
put
(
const
char
*
s
size_t
len
)
override
;
using
GenericPrinter
:
:
put
;
virtual
bool
printf
(
const
char
*
fmt
.
.
.
)
override
MOZ_FORMAT_PRINTF
(
2
3
)
;
virtual
bool
vprintf
(
const
char
*
fmt
va_list
ap
)
override
;
virtual
void
reportOutOfMemory
(
)
override
;
virtual
bool
hadOutOfMemory
(
)
const
override
;
}
;
extern
const
char
js_EscapeMap
[
]
;
extern
JSString
*
QuoteString
(
JSContext
*
cx
JSString
*
str
char16_t
quote
)
;
extern
char
*
QuoteString
(
Sprinter
*
sp
JSString
*
str
char16_t
quote
)
;
}
#
endif
