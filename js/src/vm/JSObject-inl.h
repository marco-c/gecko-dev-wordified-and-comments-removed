#
ifndef
vm_JSObject_inl_h
#
define
vm_JSObject_inl_h
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
Probes
.
h
"
#
include
"
gc
/
FreeOp
-
inl
.
h
"
#
include
"
gc
/
Marking
-
inl
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
namespace
js
{
static
inline
gc
:
:
AllocKind
NewObjectGCKind
(
const
JSClass
*
clasp
)
{
if
(
clasp
=
=
&
ArrayObject
:
:
class_
)
{
return
gc
:
:
AllocKind
:
:
OBJECT8
;
}
if
(
clasp
=
=
&
JSFunction
:
:
class_
)
{
return
gc
:
:
AllocKind
:
:
OBJECT2
;
}
return
gc
:
:
AllocKind
:
:
OBJECT4
;
}
}
MOZ_ALWAYS_INLINE
uint32_t
js
:
:
NativeObject
:
:
numDynamicSlots
(
)
const
{
uint32_t
slots
=
hasDynamicSlots
(
)
?
getSlotsHeader
(
)
-
>
capacity
(
)
:
0
;
MOZ_ASSERT
(
slots
=
=
calculateDynamicSlots
(
)
)
;
return
slots
;
}
MOZ_ALWAYS_INLINE
uint32_t
js
:
:
NativeObject
:
:
calculateDynamicSlots
(
)
const
{
return
calculateDynamicSlots
(
numFixedSlots
(
)
slotSpan
(
)
getClass
(
)
)
;
}
MOZ_ALWAYS_INLINE
uint32_t
js
:
:
NativeObject
:
:
calculateDynamicSlots
(
uint32_t
nfixed
uint32_t
span
const
JSClass
*
clasp
)
{
if
(
span
<
=
nfixed
)
{
return
0
;
}
uint32_t
ndynamic
=
span
-
nfixed
;
if
(
clasp
!
=
&
ArrayObject
:
:
class_
&
&
ndynamic
<
=
SLOT_CAPACITY_MIN
)
{
return
SLOT_CAPACITY_MIN
;
}
uint32_t
count
=
mozilla
:
:
RoundUpPow2
(
ndynamic
+
ObjectSlots
:
:
VALUES_PER_HEADER
)
;
uint32_t
slots
=
count
-
ObjectSlots
:
:
VALUES_PER_HEADER
;
MOZ_ASSERT
(
slots
>
=
ndynamic
)
;
return
slots
;
}
MOZ_ALWAYS_INLINE
uint32_t
js
:
:
NativeObject
:
:
calculateDynamicSlots
(
Shape
*
shape
)
{
return
calculateDynamicSlots
(
shape
-
>
numFixedSlots
(
)
shape
-
>
slotSpan
(
)
shape
-
>
getObjectClass
(
)
)
;
}
inline
void
JSObject
:
:
finalize
(
JSFreeOp
*
fop
)
{
js
:
:
probes
:
:
FinalizeObject
(
this
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
isTenured
(
)
)
;
if
(
!
IsBackgroundFinalized
(
asTenured
(
)
.
getAllocKind
(
)
)
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
zone
(
)
)
)
;
}
#
endif
const
JSClass
*
clasp
=
getClass
(
)
;
js
:
:
NativeObject
*
nobj
=
nullptr
;
if
(
clasp
-
>
isNative
(
)
)
{
nobj
=
&
as
<
js
:
:
NativeObject
>
(
)
;
}
if
(
clasp
-
>
hasFinalize
(
)
)
{
clasp
-
>
doFinalize
(
fop
this
)
;
}
if
(
!
nobj
)
{
return
;
}
if
(
nobj
-
>
hasDynamicSlots
(
)
)
{
js
:
:
ObjectSlots
*
slotsHeader
=
nobj
-
>
getSlotsHeader
(
)
;
size_t
size
=
js
:
:
ObjectSlots
:
:
allocSize
(
slotsHeader
-
>
capacity
(
)
)
;
fop
-
>
free_
(
this
slotsHeader
size
js
:
:
MemoryUse
:
:
ObjectSlots
)
;
}
if
(
nobj
-
>
hasDynamicElements
(
)
)
{
js
:
:
ObjectElements
*
elements
=
nobj
-
>
getElementsHeader
(
)
;
size_t
size
=
elements
-
>
numAllocatedElements
(
)
*
sizeof
(
js
:
:
HeapSlot
)
;
if
(
elements
-
>
isCopyOnWrite
(
)
)
{
if
(
elements
-
>
ownerObject
(
)
=
=
this
)
{
MOZ_ASSERT
(
elements
-
>
numShiftedElements
(
)
=
=
0
)
;
fop
-
>
freeLater
(
this
elements
size
js
:
:
MemoryUse
:
:
ObjectElements
)
;
}
}
else
{
fop
-
>
free_
(
this
nobj
-
>
getUnshiftedElementsHeader
(
)
size
js
:
:
MemoryUse
:
:
ObjectElements
)
;
}
}
}
MOZ_ALWAYS_INLINE
void
js
:
:
NativeObject
:
:
sweepDictionaryListPointer
(
)
{
MOZ_ASSERT
(
inDictionaryMode
(
)
)
;
if
(
shape
(
)
-
>
dictNext
=
=
DictionaryShapeLink
(
this
)
)
{
shape
(
)
-
>
dictNext
.
setNone
(
)
;
}
}
MOZ_ALWAYS_INLINE
void
js
:
:
NativeObject
:
:
updateDictionaryListPointerAfterMinorGC
(
NativeObject
*
old
)
{
MOZ_ASSERT
(
this
=
=
Forwarded
(
old
)
)
;
if
(
shape
(
)
-
>
dictNext
=
=
DictionaryShapeLink
(
old
)
)
{
shape
(
)
-
>
dictNext
=
DictionaryShapeLink
(
this
)
;
}
}
inline
js
:
:
ObjectGroup
*
JSObject
:
:
getGroup
(
JSContext
*
cx
js
:
:
HandleObject
obj
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
obj
-
>
compartment
(
)
)
;
if
(
obj
-
>
hasLazyGroup
(
)
)
{
if
(
cx
-
>
compartment
(
)
!
=
obj
-
>
compartment
(
)
)
{
MOZ_CRASH
(
)
;
}
return
makeLazyGroup
(
cx
obj
)
;
}
return
obj
-
>
groupRaw
(
)
;
}
inline
void
JSObject
:
:
setGroup
(
js
:
:
ObjectGroup
*
group
)
{
MOZ_RELEASE_ASSERT
(
group
)
;
MOZ_ASSERT
(
!
isSingleton
(
)
)
;
MOZ_ASSERT
(
maybeCCWRealm
(
)
=
=
group
-
>
realm
(
)
)
;
setGroupRaw
(
group
)
;
}
inline
bool
JSObject
:
:
isQualifiedVarObj
(
)
const
{
if
(
is
<
js
:
:
DebugEnvironmentProxy
>
(
)
)
{
return
as
<
js
:
:
DebugEnvironmentProxy
>
(
)
.
environment
(
)
.
isQualifiedVarObj
(
)
;
}
bool
rv
=
hasAllFlags
(
js
:
:
BaseShape
:
:
QUALIFIED_VAROBJ
)
;
MOZ_ASSERT_IF
(
rv
is
<
js
:
:
GlobalObject
>
(
)
|
|
is
<
js
:
:
CallObject
>
(
)
|
|
is
<
js
:
:
VarEnvironmentObject
>
(
)
|
|
is
<
js
:
:
ModuleEnvironmentObject
>
(
)
|
|
is
<
js
:
:
NonSyntacticVariablesObject
>
(
)
|
|
(
is
<
js
:
:
WithEnvironmentObject
>
(
)
&
&
!
as
<
js
:
:
WithEnvironmentObject
>
(
)
.
isSyntactic
(
)
)
)
;
return
rv
;
}
inline
bool
JSObject
:
:
isUnqualifiedVarObj
(
)
const
{
if
(
is
<
js
:
:
DebugEnvironmentProxy
>
(
)
)
{
return
as
<
js
:
:
DebugEnvironmentProxy
>
(
)
.
environment
(
)
.
isUnqualifiedVarObj
(
)
;
}
return
is
<
js
:
:
GlobalObject
>
(
)
|
|
is
<
js
:
:
NonSyntacticVariablesObject
>
(
)
;
}
namespace
js
{
inline
bool
ClassCanHaveFixedData
(
const
JSClass
*
clasp
)
{
return
!
clasp
-
>
isNative
(
)
|
|
clasp
=
=
&
js
:
:
ArrayBufferObject
:
:
class_
|
|
js
:
:
IsTypedArrayClass
(
clasp
)
;
}
template
<
typename
T
>
static
MOZ_ALWAYS_INLINE
MOZ_MUST_USE
T
*
SetNewObjectMetadata
(
JSContext
*
cx
T
*
obj
)
{
MOZ_ASSERT
(
!
cx
-
>
realm
(
)
-
>
hasObjectPendingMetadata
(
)
)
;
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
MOZ_UNLIKELY
(
cx
-
>
realm
(
)
-
>
hasAllocationMetadataBuilder
(
)
)
&
&
!
cx
-
>
zone
(
)
-
>
suppressAllocationMetadataBuilder
)
{
AutoSuppressAllocationMetadataBuilder
suppressMetadata
(
cx
)
;
Rooted
<
T
*
>
rooted
(
cx
obj
)
;
cx
-
>
realm
(
)
-
>
setNewObjectMetadata
(
cx
rooted
)
;
return
rooted
;
}
}
return
obj
;
}
}
inline
js
:
:
GlobalObject
&
JSObject
:
:
nonCCWGlobal
(
)
const
{
return
*
nonCCWRealm
(
)
-
>
unsafeUnbarrieredMaybeGlobal
(
)
;
}
inline
bool
JSObject
:
:
hasAllFlags
(
js
:
:
BaseShape
:
:
Flag
flags
)
const
{
MOZ_ASSERT
(
flags
)
;
return
shape
(
)
-
>
hasAllObjectFlags
(
flags
)
;
}
inline
bool
JSObject
:
:
nonProxyIsExtensible
(
)
const
{
MOZ_ASSERT
(
!
uninlinedIsProxy
(
)
)
;
return
!
hasAllFlags
(
js
:
:
BaseShape
:
:
NOT_EXTENSIBLE
)
;
}
inline
bool
JSObject
:
:
isBoundFunction
(
)
const
{
return
is
<
JSFunction
>
(
)
&
&
as
<
JSFunction
>
(
)
.
isBoundFunction
(
)
;
}
inline
bool
JSObject
:
:
isDelegate
(
)
const
{
return
hasAllFlags
(
js
:
:
BaseShape
:
:
DELEGATE
)
;
}
inline
bool
JSObject
:
:
hasUncacheableProto
(
)
const
{
return
hasAllFlags
(
js
:
:
BaseShape
:
:
UNCACHEABLE_PROTO
)
;
}
MOZ_ALWAYS_INLINE
bool
JSObject
:
:
maybeHasInterestingSymbolProperty
(
)
const
{
if
(
isNative
(
)
)
{
return
as
<
js
:
:
NativeObject
>
(
)
.
hasInterestingSymbol
(
)
;
}
return
true
;
}
inline
bool
JSObject
:
:
staticPrototypeIsImmutable
(
)
const
{
MOZ_ASSERT
(
hasStaticPrototype
(
)
)
;
return
hasAllFlags
(
js
:
:
BaseShape
:
:
IMMUTABLE_PROTOTYPE
)
;
}
inline
bool
JSObject
:
:
isIteratedSingleton
(
)
const
{
return
hasAllFlags
(
js
:
:
BaseShape
:
:
ITERATED_SINGLETON
)
;
}
inline
bool
JSObject
:
:
isNewGroupUnknown
(
)
const
{
return
hasAllFlags
(
js
:
:
BaseShape
:
:
NEW_GROUP_UNKNOWN
)
;
}
namespace
js
{
static
MOZ_ALWAYS_INLINE
bool
IsFunctionObject
(
const
js
:
:
Value
&
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
JSFunction
>
(
)
;
}
static
MOZ_ALWAYS_INLINE
bool
IsFunctionObject
(
const
js
:
:
Value
&
v
JSFunction
*
*
fun
)
{
if
(
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
JSFunction
>
(
)
)
{
*
fun
=
&
v
.
toObject
(
)
.
as
<
JSFunction
>
(
)
;
return
true
;
}
return
false
;
}
static
MOZ_ALWAYS_INLINE
bool
IsNativeFunction
(
const
js
:
:
Value
&
v
)
{
JSFunction
*
fun
;
return
IsFunctionObject
(
v
&
fun
)
&
&
fun
-
>
isNative
(
)
;
}
static
MOZ_ALWAYS_INLINE
bool
IsNativeFunction
(
const
js
:
:
Value
&
v
JSFunction
*
*
fun
)
{
return
IsFunctionObject
(
v
fun
)
&
&
(
*
fun
)
-
>
isNative
(
)
;
}
static
MOZ_ALWAYS_INLINE
bool
IsNativeFunction
(
const
js
:
:
Value
&
v
JSNative
native
)
{
JSFunction
*
fun
;
return
IsFunctionObject
(
v
&
fun
)
&
&
fun
-
>
maybeNative
(
)
=
=
native
;
}
static
MOZ_ALWAYS_INLINE
bool
IsNativeFunction
(
const
JSObject
*
obj
JSNative
native
)
{
return
obj
-
>
is
<
JSFunction
>
(
)
&
&
obj
-
>
as
<
JSFunction
>
(
)
.
maybeNative
(
)
=
=
native
;
}
static
MOZ_ALWAYS_INLINE
bool
HasNativeMethodPure
(
JSObject
*
obj
PropertyName
*
name
JSNative
native
JSContext
*
cx
)
{
Value
v
;
if
(
!
GetPropertyPure
(
cx
obj
NameToId
(
name
)
&
v
)
)
{
return
false
;
}
return
IsNativeFunction
(
v
native
)
;
}
static
MOZ_ALWAYS_INLINE
bool
HasNoToPrimitiveMethodPure
(
JSObject
*
obj
JSContext
*
cx
)
{
Symbol
*
toPrimitive
=
cx
-
>
wellKnownSymbols
(
)
.
toPrimitive
;
JSObject
*
holder
;
if
(
!
MaybeHasInterestingSymbolProperty
(
cx
obj
toPrimitive
&
holder
)
)
{
#
ifdef
DEBUG
JSObject
*
pobj
;
PropertyResult
prop
;
MOZ_ASSERT
(
LookupPropertyPure
(
cx
obj
SYMBOL_TO_JSID
(
toPrimitive
)
&
pobj
&
prop
)
)
;
MOZ_ASSERT
(
!
prop
)
;
#
endif
return
true
;
}
JSObject
*
pobj
;
PropertyResult
prop
;
if
(
!
LookupPropertyPure
(
cx
holder
SYMBOL_TO_JSID
(
toPrimitive
)
&
pobj
&
prop
)
)
{
return
false
;
}
return
!
prop
;
}
extern
bool
ToPropertyKeySlow
(
JSContext
*
cx
HandleValue
argument
MutableHandleId
result
)
;
MOZ_ALWAYS_INLINE
bool
ToPropertyKey
(
JSContext
*
cx
HandleValue
argument
MutableHandleId
result
)
{
if
(
MOZ_LIKELY
(
argument
.
isPrimitive
(
)
)
)
{
return
PrimitiveValueToId
<
CanGC
>
(
cx
argument
result
)
;
}
return
ToPropertyKeySlow
(
cx
argument
result
)
;
}
inline
bool
IsInternalFunctionObject
(
JSObject
&
funobj
)
{
JSFunction
&
fun
=
funobj
.
as
<
JSFunction
>
(
)
;
return
fun
.
isInterpreted
(
)
&
&
!
fun
.
environment
(
)
;
}
inline
gc
:
:
InitialHeap
GetInitialHeap
(
NewObjectKind
newKind
const
JSClass
*
clasp
)
{
if
(
newKind
!
=
GenericObject
)
{
return
gc
:
:
TenuredHeap
;
}
if
(
clasp
-
>
hasFinalize
(
)
&
&
!
CanNurseryAllocateFinalizedClass
(
clasp
)
)
{
return
gc
:
:
TenuredHeap
;
}
return
gc
:
:
DefaultHeap
;
}
inline
gc
:
:
InitialHeap
GetInitialHeap
(
NewObjectKind
newKind
ObjectGroup
*
group
)
{
AutoSweepObjectGroup
sweep
(
group
)
;
if
(
group
-
>
shouldPreTenure
(
sweep
)
)
{
return
gc
:
:
TenuredHeap
;
}
return
GetInitialHeap
(
newKind
group
-
>
clasp
(
)
)
;
}
JSObject
*
NewObjectWithGivenTaggedProto
(
JSContext
*
cx
const
JSClass
*
clasp
Handle
<
TaggedProto
>
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
uint32_t
initialShapeFlags
=
0
)
;
template
<
NewObjectKind
NewKind
>
inline
JSObject
*
NewObjectWithGivenTaggedProto
(
JSContext
*
cx
const
JSClass
*
clasp
Handle
<
TaggedProto
>
proto
)
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
clasp
)
;
return
NewObjectWithGivenTaggedProto
(
cx
clasp
proto
allocKind
NewKind
0
)
;
}
namespace
detail
{
template
<
typename
T
NewObjectKind
NewKind
>
inline
T
*
NewObjectWithGivenTaggedProtoForKind
(
JSContext
*
cx
Handle
<
TaggedProto
>
proto
)
{
JSObject
*
obj
=
NewObjectWithGivenTaggedProto
<
NewKind
>
(
cx
&
T
:
:
class_
proto
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
}
template
<
typename
T
>
inline
T
*
NewObjectWithGivenTaggedProto
(
JSContext
*
cx
Handle
<
TaggedProto
>
proto
)
{
return
detail
:
:
NewObjectWithGivenTaggedProtoForKind
<
T
GenericObject
>
(
cx
proto
)
;
}
template
<
typename
T
>
inline
T
*
NewSingletonObjectWithGivenTaggedProtoAndKind
(
JSContext
*
cx
Handle
<
TaggedProto
>
proto
gc
:
:
AllocKind
allocKind
)
{
JSObject
*
obj
=
NewObjectWithGivenTaggedProto
(
cx
&
T
:
:
class_
proto
allocKind
SingletonObject
0
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
inline
JSObject
*
NewObjectWithGivenProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
{
return
NewObjectWithGivenTaggedProto
(
cx
clasp
AsTaggedProto
(
proto
)
allocKind
newKind
)
;
}
inline
JSObject
*
NewObjectWithGivenProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
{
return
NewObjectWithGivenTaggedProto
<
GenericObject
>
(
cx
clasp
AsTaggedProto
(
proto
)
)
;
}
inline
JSObject
*
NewTenuredObjectWithGivenProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
{
return
NewObjectWithGivenTaggedProto
<
TenuredObject
>
(
cx
clasp
AsTaggedProto
(
proto
)
)
;
}
inline
JSObject
*
NewSingletonObjectWithGivenProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
{
return
NewObjectWithGivenTaggedProto
<
SingletonObject
>
(
cx
clasp
AsTaggedProto
(
proto
)
)
;
}
template
<
typename
T
>
inline
T
*
NewObjectWithGivenProto
(
JSContext
*
cx
HandleObject
proto
)
{
return
detail
:
:
NewObjectWithGivenTaggedProtoForKind
<
T
GenericObject
>
(
cx
AsTaggedProto
(
proto
)
)
;
}
template
<
typename
T
>
inline
T
*
NewSingletonObjectWithGivenProto
(
JSContext
*
cx
HandleObject
proto
)
{
return
detail
:
:
NewObjectWithGivenTaggedProtoForKind
<
T
SingletonObject
>
(
cx
AsTaggedProto
(
proto
)
)
;
}
template
<
typename
T
>
inline
T
*
NewTenuredObjectWithGivenProto
(
JSContext
*
cx
HandleObject
proto
)
{
return
detail
:
:
NewObjectWithGivenTaggedProtoForKind
<
T
TenuredObject
>
(
cx
AsTaggedProto
(
proto
)
)
;
}
template
<
typename
T
>
inline
T
*
NewObjectWithGivenProtoAndKinds
(
JSContext
*
cx
HandleObject
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
)
{
JSObject
*
obj
=
NewObjectWithGivenTaggedProto
(
cx
&
T
:
:
class_
AsTaggedProto
(
proto
)
allocKind
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
JSObject
*
NewObjectWithClassProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
;
inline
JSObject
*
NewObjectWithClassProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
NewObjectKind
newKind
=
GenericObject
)
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
clasp
)
;
return
NewObjectWithClassProto
(
cx
clasp
proto
allocKind
newKind
)
;
}
template
<
class
T
>
inline
T
*
NewObjectWithClassProto
(
JSContext
*
cx
HandleObject
proto
)
{
JSObject
*
obj
=
NewObjectWithClassProto
(
cx
&
T
:
:
class_
proto
GenericObject
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
class
T
>
inline
T
*
NewObjectWithClassProtoAndKind
(
JSContext
*
cx
HandleObject
proto
NewObjectKind
newKind
)
{
JSObject
*
obj
=
NewObjectWithClassProto
(
cx
&
T
:
:
class_
proto
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
class
T
>
inline
T
*
NewObjectWithClassProto
(
JSContext
*
cx
HandleObject
proto
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
{
JSObject
*
obj
=
NewObjectWithClassProto
(
cx
&
T
:
:
class_
proto
allocKind
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
inline
JSObject
*
NewBuiltinClassInstance
(
JSContext
*
cx
const
JSClass
*
clasp
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
{
return
NewObjectWithClassProto
(
cx
clasp
nullptr
allocKind
newKind
)
;
}
inline
JSObject
*
NewBuiltinClassInstance
(
JSContext
*
cx
const
JSClass
*
clasp
NewObjectKind
newKind
=
GenericObject
)
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
clasp
)
;
return
NewBuiltinClassInstance
(
cx
clasp
allocKind
newKind
)
;
}
template
<
typename
T
>
inline
T
*
NewBuiltinClassInstance
(
JSContext
*
cx
)
{
JSObject
*
obj
=
NewBuiltinClassInstance
(
cx
&
T
:
:
class_
GenericObject
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
typename
T
>
inline
T
*
NewTenuredBuiltinClassInstance
(
JSContext
*
cx
)
{
JSObject
*
obj
=
NewBuiltinClassInstance
(
cx
&
T
:
:
class_
TenuredObject
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
typename
T
>
inline
T
*
NewBuiltinClassInstanceWithKind
(
JSContext
*
cx
NewObjectKind
newKind
)
{
JSObject
*
obj
=
NewBuiltinClassInstance
(
cx
&
T
:
:
class_
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
typename
T
>
inline
T
*
NewBuiltinClassInstance
(
JSContext
*
cx
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
{
JSObject
*
obj
=
NewBuiltinClassInstance
(
cx
&
T
:
:
class_
allocKind
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
bool
NewObjectScriptedCall
(
JSContext
*
cx
MutableHandleObject
obj
)
;
JSObject
*
NewObjectWithGroupCommon
(
JSContext
*
cx
HandleObjectGroup
group
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
)
;
template
<
typename
T
>
inline
T
*
NewObjectWithGroup
(
JSContext
*
cx
HandleObjectGroup
group
gc
:
:
AllocKind
allocKind
NewObjectKind
newKind
=
GenericObject
)
{
JSObject
*
obj
=
NewObjectWithGroupCommon
(
cx
group
allocKind
newKind
)
;
return
obj
?
&
obj
-
>
as
<
T
>
(
)
:
nullptr
;
}
template
<
typename
T
>
inline
T
*
NewObjectWithGroup
(
JSContext
*
cx
HandleObjectGroup
group
NewObjectKind
newKind
=
GenericObject
)
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
group
-
>
clasp
(
)
)
;
return
NewObjectWithGroup
<
T
>
(
cx
group
allocKind
newKind
)
;
}
static
inline
gc
:
:
AllocKind
GuessObjectGCKind
(
size_t
numElements
)
{
if
(
numElements
)
{
return
gc
:
:
GetGCObjectKind
(
numElements
)
;
}
return
gc
:
:
AllocKind
:
:
OBJECT4
;
}
static
inline
gc
:
:
AllocKind
GuessArrayGCKind
(
size_t
numElements
)
{
if
(
numElements
)
{
return
gc
:
:
GetGCArrayKind
(
numElements
)
;
}
return
gc
:
:
AllocKind
:
:
OBJECT8
;
}
inline
bool
GetClassOfValue
(
JSContext
*
cx
HandleValue
v
ESClass
*
cls
)
{
if
(
!
v
.
isObject
(
)
)
{
*
cls
=
ESClass
:
:
Other
;
return
true
;
}
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
return
GetBuiltinClass
(
cx
obj
cls
)
;
}
extern
NativeObject
*
InitClass
(
JSContext
*
cx
HandleObject
obj
HandleObject
parent_proto
const
JSClass
*
clasp
JSNative
constructor
unsigned
nargs
const
JSPropertySpec
*
ps
const
JSFunctionSpec
*
fs
const
JSPropertySpec
*
static_ps
const
JSFunctionSpec
*
static_fs
NativeObject
*
*
ctorp
=
nullptr
)
;
MOZ_ALWAYS_INLINE
const
char
*
GetObjectClassName
(
JSContext
*
cx
HandleObject
obj
)
{
if
(
obj
-
>
is
<
ProxyObject
>
(
)
)
{
return
Proxy
:
:
className
(
cx
obj
)
;
}
return
obj
-
>
getClass
(
)
-
>
name
;
}
inline
bool
IsCallable
(
const
Value
&
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
isCallable
(
)
;
}
inline
bool
IsConstructor
(
const
Value
&
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
isConstructor
(
)
;
}
static
inline
bool
MaybePreserveDOMWrapper
(
JSContext
*
cx
HandleObject
obj
)
{
if
(
!
obj
-
>
getClass
(
)
-
>
isDOMClass
(
)
)
{
return
true
;
}
MOZ_ASSERT
(
cx
-
>
runtime
(
)
-
>
preserveWrapperCallback
)
;
return
cx
-
>
runtime
(
)
-
>
preserveWrapperCallback
(
cx
obj
)
;
}
}
MOZ_ALWAYS_INLINE
bool
JSObject
:
:
isCallable
(
)
const
{
if
(
is
<
JSFunction
>
(
)
)
{
return
true
;
}
if
(
is
<
js
:
:
ProxyObject
>
(
)
)
{
const
js
:
:
ProxyObject
&
p
=
as
<
js
:
:
ProxyObject
>
(
)
;
return
p
.
handler
(
)
-
>
isCallable
(
const_cast
<
JSObject
*
>
(
this
)
)
;
}
return
callHook
(
)
!
=
nullptr
;
}
MOZ_ALWAYS_INLINE
bool
JSObject
:
:
isConstructor
(
)
const
{
if
(
is
<
JSFunction
>
(
)
)
{
const
JSFunction
&
fun
=
as
<
JSFunction
>
(
)
;
return
fun
.
isConstructor
(
)
;
}
if
(
is
<
js
:
:
ProxyObject
>
(
)
)
{
const
js
:
:
ProxyObject
&
p
=
as
<
js
:
:
ProxyObject
>
(
)
;
return
p
.
handler
(
)
-
>
isConstructor
(
const_cast
<
JSObject
*
>
(
this
)
)
;
}
return
constructHook
(
)
!
=
nullptr
;
}
MOZ_ALWAYS_INLINE
JSNative
JSObject
:
:
callHook
(
)
const
{
return
getClass
(
)
-
>
getCall
(
)
;
}
MOZ_ALWAYS_INLINE
JSNative
JSObject
:
:
constructHook
(
)
const
{
return
getClass
(
)
-
>
getConstruct
(
)
;
}
#
endif
