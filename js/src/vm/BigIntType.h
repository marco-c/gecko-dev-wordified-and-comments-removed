#
ifndef
vm_BigIntType_h
#
define
vm_BigIntType_h
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
RangedPtr
.
h
"
#
include
<
gmp
.
h
>
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
gc
/
Heap
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
StringType
.
h
"
namespace
js
{
template
<
typename
CharT
>
static
bool
StringToBigIntImpl
(
const
mozilla
:
:
Range
<
const
CharT
>
&
chars
uint8_t
radix
Handle
<
JS
:
:
BigInt
*
>
res
)
;
}
namespace
JS
{
class
BigInt
final
:
public
js
:
:
gc
:
:
TenuredCell
{
template
<
typename
CharT
>
friend
bool
js
:
:
StringToBigIntImpl
(
const
mozilla
:
:
Range
<
const
CharT
>
&
chars
uint8_t
radix
Handle
<
BigInt
*
>
res
)
;
private
:
union
{
mpz_t
num_
;
uint8_t
unused_
[
js
:
:
gc
:
:
MinCellSize
]
;
}
;
public
:
static
BigInt
*
create
(
JSContext
*
cx
)
;
static
BigInt
*
createFromDouble
(
JSContext
*
cx
double
d
)
;
static
BigInt
*
createFromBoolean
(
JSContext
*
cx
bool
b
)
;
static
BigInt
*
createFromBytes
(
JSContext
*
cx
int
sign
void
*
bytes
size_t
nbytes
)
;
static
const
JS
:
:
TraceKind
TraceKind
=
JS
:
:
TraceKind
:
:
BigInt
;
void
traceChildren
(
JSTracer
*
trc
)
;
void
finalize
(
js
:
:
FreeOp
*
fop
)
;
js
:
:
HashNumber
hash
(
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
bool
toBoolean
(
)
;
int8_t
sign
(
)
;
static
void
init
(
)
;
static
BigInt
*
copy
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
)
;
static
BigInt
*
add
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
sub
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
mul
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
div
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
mod
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
pow
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
Handle
<
BigInt
*
>
y
)
;
static
BigInt
*
neg
(
JSContext
*
cx
Handle
<
BigInt
*
>
x
)
;
static
bool
add
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
sub
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
mul
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
div
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
mod
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
pow
(
JSContext
*
cx
Handle
<
Value
>
lhs
Handle
<
Value
>
rhs
MutableHandle
<
Value
>
res
)
;
static
bool
neg
(
JSContext
*
cx
Handle
<
Value
>
operand
MutableHandle
<
Value
>
res
)
;
static
double
numberValue
(
BigInt
*
x
)
;
static
JSLinearString
*
toString
(
JSContext
*
cx
BigInt
*
x
uint8_t
radix
)
;
static
size_t
byteLength
(
BigInt
*
x
)
;
static
void
writeBytes
(
BigInt
*
x
mozilla
:
:
RangedPtr
<
uint8_t
>
buffer
)
;
}
;
static_assert
(
sizeof
(
BigInt
)
>
=
js
:
:
gc
:
:
MinCellSize
"
sizeof
(
BigInt
)
must
be
greater
than
the
minimum
allocation
size
"
)
;
}
namespace
js
{
extern
JSAtom
*
BigIntToAtom
(
JSContext
*
cx
JS
:
:
BigInt
*
bi
)
;
extern
JS
:
:
BigInt
*
NumberToBigInt
(
JSContext
*
cx
double
d
)
;
extern
JS
:
:
BigInt
*
StringToBigInt
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
uint8_t
radix
)
;
extern
JS
:
:
BigInt
*
ToBigInt
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v
)
;
}
#
endif
