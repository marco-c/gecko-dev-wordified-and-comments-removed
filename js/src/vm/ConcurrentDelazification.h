#
ifndef
vm_ConcurrentDelazification_h
#
define
vm_ConcurrentDelazification_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stddef
.
h
>
#
include
<
utility
>
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
frontend
/
ScriptIndex
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Vector
.
h
"
namespace
js
{
class
FrontendContext
;
struct
DelazifyStrategy
{
using
ScriptStencilRef
=
frontend
:
:
ScriptStencilRef
;
using
ScriptIndex
=
frontend
:
:
ScriptIndex
;
using
InitialStencilAndDelazifications
=
frontend
:
:
InitialStencilAndDelazifications
;
virtual
~
DelazifyStrategy
(
)
=
default
;
virtual
bool
done
(
)
const
=
0
;
virtual
ScriptStencilRef
next
(
)
=
0
;
virtual
void
clear
(
)
=
0
;
[
[
nodiscard
]
]
virtual
bool
insert
(
ScriptStencilRef
&
ref
)
=
0
;
[
[
nodiscard
]
]
bool
add
(
FrontendContext
*
fc
ScriptStencilRef
&
ref
)
;
}
;
struct
DepthFirstDelazification
final
:
public
DelazifyStrategy
{
Vector
<
frontend
:
:
ScriptStencilRef
0
SystemAllocPolicy
>
stack
;
bool
done
(
)
const
override
{
return
stack
.
empty
(
)
;
}
ScriptStencilRef
next
(
)
override
{
return
stack
.
popCopy
(
)
;
}
void
clear
(
)
override
{
return
stack
.
clear
(
)
;
}
bool
insert
(
frontend
:
:
ScriptStencilRef
&
ref
)
override
{
return
stack
.
append
(
ref
)
;
}
}
;
struct
LargeFirstDelazification
final
:
public
DelazifyStrategy
{
using
SourceSize
=
uint32_t
;
Vector
<
std
:
:
pair
<
SourceSize
ScriptStencilRef
>
0
SystemAllocPolicy
>
heap
;
bool
done
(
)
const
override
{
return
heap
.
empty
(
)
;
}
ScriptStencilRef
next
(
)
override
;
void
clear
(
)
override
{
return
heap
.
clear
(
)
;
}
bool
insert
(
frontend
:
:
ScriptStencilRef
&
)
override
;
}
;
class
DelazificationContext
{
const
JS
:
:
PrefableCompileOptions
initialPrefableOptions_
;
using
Stencils
=
frontend
:
:
InitialStencilAndDelazifications
;
UniquePtr
<
DelazifyStrategy
>
strategy_
;
RefPtr
<
Stencils
>
stencils_
;
mozilla
:
:
Maybe
<
Stencils
:
:
RelativeIndexesGuard
>
indexesGuard_
;
FrontendContext
fc_
;
size_t
stackQuota_
;
bool
isInterrupted_
=
false
;
public
:
explicit
DelazificationContext
(
const
JS
:
:
PrefableCompileOptions
&
initialPrefableOptions
size_t
stackQuota
)
:
initialPrefableOptions_
(
initialPrefableOptions
)
stackQuota_
(
stackQuota
)
{
}
bool
init
(
const
JS
:
:
ReadOnlyCompileOptions
&
options
Stencils
*
stencils
)
;
bool
delazify
(
)
;
bool
isInterrupted
(
)
const
{
return
isInterrupted_
;
}
void
interrupt
(
)
{
isInterrupted_
=
true
;
}
bool
done
(
)
const
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
}
#
endif
