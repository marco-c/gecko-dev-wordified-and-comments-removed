#
ifndef
vm_BindingKind_h
#
define
vm_BindingKind_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
<
stdint
.
h
>
#
include
"
vm
/
BytecodeUtil
.
h
"
namespace
js
{
enum
class
BindingKind
:
uint8_t
{
Import
FormalParameter
Var
Let
Const
NamedLambdaCallee
Synthetic
}
;
static
inline
bool
BindingKindIsLexical
(
BindingKind
kind
)
{
return
kind
=
=
BindingKind
:
:
Let
|
|
kind
=
=
BindingKind
:
:
Const
;
}
class
BindingLocation
{
public
:
enum
class
Kind
{
Global
Argument
Frame
Environment
Import
NamedLambdaCallee
}
;
private
:
Kind
kind_
;
uint32_t
slot_
;
BindingLocation
(
Kind
kind
uint32_t
slot
)
:
kind_
(
kind
)
slot_
(
slot
)
{
}
public
:
static
BindingLocation
Global
(
)
{
return
BindingLocation
(
Kind
:
:
Global
UINT32_MAX
)
;
}
static
BindingLocation
Argument
(
uint16_t
slot
)
{
return
BindingLocation
(
Kind
:
:
Argument
slot
)
;
}
static
BindingLocation
Frame
(
uint32_t
slot
)
{
MOZ_ASSERT
(
slot
<
LOCALNO_LIMIT
)
;
return
BindingLocation
(
Kind
:
:
Frame
slot
)
;
}
static
BindingLocation
Environment
(
uint32_t
slot
)
{
MOZ_ASSERT
(
slot
<
ENVCOORD_SLOT_LIMIT
)
;
return
BindingLocation
(
Kind
:
:
Environment
slot
)
;
}
static
BindingLocation
Import
(
)
{
return
BindingLocation
(
Kind
:
:
Import
UINT32_MAX
)
;
}
static
BindingLocation
NamedLambdaCallee
(
)
{
return
BindingLocation
(
Kind
:
:
NamedLambdaCallee
UINT32_MAX
)
;
}
bool
operator
=
=
(
const
BindingLocation
&
other
)
const
{
return
kind_
=
=
other
.
kind_
&
&
slot_
=
=
other
.
slot_
;
}
bool
operator
!
=
(
const
BindingLocation
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
uint32_t
slot
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
Frame
|
|
kind_
=
=
Kind
:
:
Environment
)
;
return
slot_
;
}
uint16_t
argumentSlot
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
Argument
)
;
return
mozilla
:
:
AssertedCast
<
uint16_t
>
(
slot_
)
;
}
}
;
}
#
endif
