#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stddef
.
h
>
#
include
<
string
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Context
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
JSAtom
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
JS_PUBLIC_API
bool
JS_GetOwnPropertyDescriptorById
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
obj
id
)
;
return
GetOwnPropertyDescriptor
(
cx
obj
id
desc
)
;
}
JS_PUBLIC_API
bool
JS_GetOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
name
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
)
{
JSAtom
*
atom
=
Atomize
(
cx
name
strlen
(
name
)
)
;
if
(
!
atom
)
{
return
false
;
}
JS
:
:
Rooted
<
jsid
>
id
(
cx
AtomToId
(
atom
)
)
;
return
JS_GetOwnPropertyDescriptorById
(
cx
obj
id
desc
)
;
}
JS_PUBLIC_API
bool
JS_GetOwnUCPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
)
{
JSAtom
*
atom
=
AtomizeChars
(
cx
name
namelen
)
;
if
(
!
atom
)
{
return
false
;
}
JS
:
:
Rooted
<
jsid
>
id
(
cx
AtomToId
(
atom
)
)
;
return
JS_GetOwnPropertyDescriptorById
(
cx
obj
id
desc
)
;
}
JS_PUBLIC_API
bool
JS_GetPropertyDescriptorById
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
{
cx
-
>
check
(
obj
id
)
;
return
GetPropertyDescriptor
(
cx
obj
id
desc
holder
)
;
}
JS_PUBLIC_API
bool
JS_GetPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
name
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
{
JSAtom
*
atom
=
Atomize
(
cx
name
strlen
(
name
)
)
;
if
(
!
atom
)
{
return
false
;
}
JS
:
:
Rooted
<
jsid
>
id
(
cx
AtomToId
(
atom
)
)
;
return
JS_GetPropertyDescriptorById
(
cx
obj
id
desc
holder
)
;
}
JS_PUBLIC_API
bool
JS_GetUCPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
MutableHandle
<
mozilla
:
:
Maybe
<
JS
:
:
PropertyDescriptor
>
>
desc
JS
:
:
MutableHandle
<
JSObject
*
>
holder
)
{
JSAtom
*
atom
=
AtomizeChars
(
cx
name
namelen
)
;
if
(
!
atom
)
{
return
false
;
}
JS
:
:
Rooted
<
jsid
>
id
(
cx
AtomToId
(
atom
)
)
;
return
JS_GetPropertyDescriptorById
(
cx
obj
id
desc
holder
)
;
}
