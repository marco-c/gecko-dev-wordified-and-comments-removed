#
include
"
vm
/
RegExpStatics
.
h
"
#
include
"
gc
/
GCContext
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
UniquePtr
<
RegExpStatics
>
RegExpStatics
:
:
create
(
JSContext
*
cx
)
{
return
cx
-
>
make_unique
<
RegExpStatics
>
(
)
;
}
bool
RegExpStatics
:
:
executeLazy
(
JSContext
*
cx
)
{
if
(
!
pendingLazyEvaluation
)
{
return
true
;
}
MOZ_ASSERT
(
lazySource
)
;
MOZ_ASSERT
(
matchesInput
)
;
MOZ_ASSERT
(
lazyIndex
!
=
size_t
(
-
1
)
)
;
Rooted
<
JSAtom
*
>
source
(
cx
lazySource
)
;
RootedRegExpShared
shared
(
cx
cx
-
>
zone
(
)
-
>
regExps
(
)
.
get
(
cx
source
lazyFlags
)
)
;
if
(
!
shared
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
input
(
cx
matchesInput
)
;
RegExpRunStatus
status
=
RegExpShared
:
:
execute
(
cx
&
shared
input
lazyIndex
&
this
-
>
matches
)
;
if
(
status
=
=
RegExpRunStatus_Error
)
{
return
false
;
}
MOZ_ASSERT
(
status
=
=
RegExpRunStatus_Success
)
;
pendingLazyEvaluation
=
false
;
lazySource
=
nullptr
;
lazyIndex
=
size_t
(
-
1
)
;
return
true
;
}
