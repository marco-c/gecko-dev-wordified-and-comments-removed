#
include
"
vm
/
RegExpStatics
.
h
"
#
include
"
gc
/
FreeOp
.
h
"
#
include
"
vm
/
RegExpStaticsObject
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
static
void
resc_finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
MOZ_ASSERT
(
fop
-
>
onMainThread
(
)
)
;
RegExpStatics
*
res
=
obj
-
>
as
<
RegExpStaticsObject
>
(
)
.
regExpStatics
(
)
;
fop
-
>
delete_
(
obj
res
MemoryUse
:
:
RegExpStatics
)
;
}
static
void
resc_trace
(
JSTracer
*
trc
JSObject
*
obj
)
{
if
(
RegExpStatics
*
data
=
obj
-
>
as
<
RegExpStaticsObject
>
(
)
.
regExpStatics
(
)
)
{
data
-
>
trace
(
trc
)
;
}
}
static
const
JSClassOps
RegExpStaticsObjectClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
resc_finalize
nullptr
nullptr
nullptr
resc_trace
}
;
const
JSClass
RegExpStaticsObject
:
:
class_
=
{
"
RegExpStatics
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
|
JSCLASS_FOREGROUND_FINALIZE
&
RegExpStaticsObjectClassOps
}
;
RegExpStaticsObject
*
RegExpStatics
:
:
create
(
JSContext
*
cx
)
{
RegExpStaticsObject
*
obj
=
NewObjectWithGivenProto
<
RegExpStaticsObject
>
(
cx
nullptr
)
;
if
(
!
obj
)
{
return
nullptr
;
}
RegExpStatics
*
res
=
cx
-
>
new_
<
RegExpStatics
>
(
)
;
if
(
!
res
)
{
return
nullptr
;
}
InitReservedSlot
(
obj
RegExpStaticsObject
:
:
StaticsSlot
res
MemoryUse
:
:
RegExpStatics
)
;
return
obj
;
}
bool
RegExpStatics
:
:
executeLazy
(
JSContext
*
cx
)
{
if
(
!
pendingLazyEvaluation
)
{
return
true
;
}
MOZ_ASSERT
(
lazySource
)
;
MOZ_ASSERT
(
matchesInput
)
;
MOZ_ASSERT
(
lazyIndex
!
=
size_t
(
-
1
)
)
;
RootedAtom
source
(
cx
lazySource
)
;
RootedRegExpShared
shared
(
cx
cx
-
>
zone
(
)
-
>
regExps
(
)
.
get
(
cx
source
lazyFlags
)
)
;
if
(
!
shared
)
{
return
false
;
}
RootedLinearString
input
(
cx
matchesInput
)
;
RegExpRunStatus
status
=
RegExpShared
:
:
execute
(
cx
&
shared
input
lazyIndex
&
this
-
>
matches
)
;
if
(
status
=
=
RegExpRunStatus_Error
)
{
return
false
;
}
MOZ_ASSERT
(
status
=
=
RegExpRunStatus_Success
)
;
pendingLazyEvaluation
=
false
;
lazySource
=
nullptr
;
lazyIndex
=
size_t
(
-
1
)
;
return
true
;
}
