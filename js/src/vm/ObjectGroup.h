#
ifndef
vm_ObjectGroup_h
#
define
vm_ObjectGroup_h
#
include
"
js
/
shadow
/
ObjectGroup
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCProbes
.
h
"
#
include
"
js
/
CharacterEncoding
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
TaggedProto
.
h
"
#
include
"
vm
/
TypeSet
.
h
"
namespace
js
{
class
TypeDescr
;
class
AutoClearTypeInferenceStateOnOOM
;
class
AutoSweepObjectGroup
;
class
ObjectGroupRealm
;
class
PlainObject
;
namespace
gc
{
void
MergeRealms
(
JS
:
:
Realm
*
source
JS
:
:
Realm
*
target
)
;
}
enum
NewObjectKind
{
GenericObject
SingletonObject
TenuredObject
}
;
class
ObjectGroup
:
public
gc
:
:
TenuredCellWithNonGCPointer
<
const
JSClass
>
{
public
:
const
JSClass
*
clasp
(
)
const
{
return
headerPtr
(
)
;
}
private
:
GCPtr
<
TaggedProto
>
proto_
;
JS
:
:
Realm
*
realm_
;
ObjectGroupFlags
flags_
;
void
*
addendum_
=
nullptr
;
private
:
static
inline
uint32_t
offsetOfClasp
(
)
{
return
offsetOfHeaderPtr
(
)
;
}
static
inline
uint32_t
offsetOfProto
(
)
{
return
offsetof
(
ObjectGroup
proto_
)
;
}
static
inline
uint32_t
offsetOfRealm
(
)
{
return
offsetof
(
ObjectGroup
realm_
)
;
}
static
inline
uint32_t
offsetOfFlags
(
)
{
return
offsetof
(
ObjectGroup
flags_
)
;
}
static
inline
uint32_t
offsetOfAddendum
(
)
{
return
offsetof
(
ObjectGroup
addendum_
)
;
}
friend
class
gc
:
:
GCRuntime
;
friend
class
js
:
:
jit
:
:
MacroAssembler
;
public
:
bool
hasDynamicPrototype
(
)
const
{
return
proto_
.
isDynamic
(
)
;
}
const
GCPtr
<
TaggedProto
>
&
proto
(
)
const
{
return
proto_
;
}
GCPtr
<
TaggedProto
>
&
proto
(
)
{
return
proto_
;
}
void
setProto
(
TaggedProto
proto
)
;
void
setProtoUnchecked
(
TaggedProto
proto
)
;
bool
hasUncacheableProto
(
)
const
{
MOZ_ASSERT
(
!
hasDynamicPrototype
(
)
)
;
return
singleton
(
)
;
}
bool
singleton
(
)
const
{
return
flagsDontCheckGeneration
(
)
&
OBJECT_FLAG_SINGLETON
;
}
bool
lazy
(
)
const
{
bool
res
=
flagsDontCheckGeneration
(
)
&
OBJECT_FLAG_LAZY_SINGLETON
;
MOZ_ASSERT_IF
(
res
singleton
(
)
)
;
return
res
;
}
JS
:
:
Compartment
*
compartment
(
)
const
{
return
JS
:
:
GetCompartmentForRealm
(
realm_
)
;
}
JS
:
:
Compartment
*
maybeCompartment
(
)
const
{
return
compartment
(
)
;
}
JS
:
:
Realm
*
realm
(
)
const
{
return
realm_
;
}
public
:
enum
AddendumKind
{
Addendum_None
Addendum_TypeDescr
}
;
private
:
void
setAddendum
(
AddendumKind
kind
void
*
addendum
bool
isSweeping
=
false
)
;
AddendumKind
addendumKind
(
)
const
{
return
(
AddendumKind
)
(
(
flags_
&
OBJECT_FLAG_ADDENDUM_MASK
)
>
>
OBJECT_FLAG_ADDENDUM_SHIFT
)
;
}
ObjectGroupFlags
flagsDontCheckGeneration
(
)
const
{
return
flags_
;
}
public
:
TypeDescr
*
maybeTypeDescr
(
)
{
if
(
addendumKind
(
)
=
=
Addendum_TypeDescr
)
{
return
&
typeDescr
(
)
;
}
return
nullptr
;
}
TypeDescr
&
typeDescr
(
)
{
MOZ_ASSERT
(
addendumKind
(
)
=
=
Addendum_TypeDescr
)
;
return
*
reinterpret_cast
<
TypeDescr
*
>
(
addendum_
)
;
}
void
setTypeDescr
(
TypeDescr
*
descr
)
{
setAddendum
(
Addendum_TypeDescr
descr
)
;
}
public
:
inline
ObjectGroup
(
const
JSClass
*
clasp
TaggedProto
proto
JS
:
:
Realm
*
realm
ObjectGroupFlags
initialFlags
)
;
void
print
(
const
AutoSweepObjectGroup
&
sweep
)
;
void
traceChildren
(
JSTracer
*
trc
)
;
inline
bool
needsSweep
(
)
;
void
sweep
(
const
AutoSweepObjectGroup
&
sweep
)
;
private
:
uint32_t
generation
(
)
{
return
(
flags_
&
OBJECT_FLAG_GENERATION_MASK
)
>
>
OBJECT_FLAG_GENERATION_SHIFT
;
}
public
:
void
setGeneration
(
uint32_t
generation
)
{
MOZ_ASSERT
(
generation
<
=
(
OBJECT_FLAG_GENERATION_MASK
>
>
OBJECT_FLAG_GENERATION_SHIFT
)
)
;
flags_
&
=
~
OBJECT_FLAG_GENERATION_MASK
;
flags_
|
=
generation
<
<
OBJECT_FLAG_GENERATION_SHIFT
;
}
void
finalize
(
JSFreeOp
*
fop
)
{
}
static
const
JS
:
:
TraceKind
TraceKind
=
JS
:
:
TraceKind
:
:
ObjectGroup
;
public
:
const
ObjectGroupFlags
*
addressOfFlags
(
)
const
{
return
&
flags_
;
}
static
void
staticAsserts
(
)
{
static_assert
(
offsetof
(
ObjectGroup
proto_
)
=
=
offsetof
(
JS
:
:
shadow
:
:
ObjectGroup
proto
)
)
;
}
static
bool
useSingletonForClone
(
JSFunction
*
fun
)
;
public
:
static
ObjectGroup
*
defaultNewGroup
(
JSContext
*
cx
const
JSClass
*
clasp
TaggedProto
proto
JSObject
*
associated
=
nullptr
)
;
static
ObjectGroup
*
lazySingletonGroup
(
JSContext
*
cx
ObjectGroupRealm
&
realm
JS
:
:
Realm
*
objectRealm
const
JSClass
*
clasp
TaggedProto
proto
)
;
static
inline
ObjectGroup
*
lazySingletonGroup
(
JSContext
*
cx
ObjectGroup
*
oldGroup
const
JSClass
*
clasp
TaggedProto
proto
)
;
static
void
setDefaultNewGroupUnknown
(
JSContext
*
cx
ObjectGroupRealm
&
realm
const
JSClass
*
clasp
JS
:
:
HandleObject
obj
)
;
enum
class
NewArrayKind
{
Normal
CopyOnWrite
UnknownIndex
}
;
static
ArrayObject
*
newArrayObject
(
JSContext
*
cx
const
Value
*
vp
size_t
length
NewObjectKind
newKind
NewArrayKind
arrayKind
=
NewArrayKind
:
:
Normal
)
;
static
JSObject
*
newPlainObject
(
JSContext
*
cx
IdValuePair
*
properties
size_t
nproperties
NewObjectKind
newKind
)
;
static
ObjectGroup
*
allocationSiteGroup
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
JSProtoKey
key
HandleObject
proto
=
nullptr
)
;
static
ObjectGroup
*
callingAllocationSiteGroup
(
JSContext
*
cx
JSProtoKey
key
HandleObject
proto
=
nullptr
)
;
static
ArrayObject
*
getOrFixupCopyOnWriteObject
(
JSContext
*
cx
HandleScript
script
jsbytecode
*
pc
)
;
static
ArrayObject
*
getCopyOnWriteObject
(
JSScript
*
script
jsbytecode
*
pc
)
;
private
:
static
ObjectGroup
*
defaultNewGroup
(
JSContext
*
cx
JSProtoKey
key
)
;
}
;
class
ObjectGroupRealm
{
private
:
class
NewTable
;
private
:
NewTable
*
defaultNewTable
=
nullptr
;
NewTable
*
lazyTable
=
nullptr
;
class
DefaultNewGroupCache
{
ObjectGroup
*
group_
;
JSObject
*
associated_
;
public
:
DefaultNewGroupCache
(
)
:
associated_
(
nullptr
)
{
purge
(
)
;
}
void
purge
(
)
{
group_
=
nullptr
;
}
void
put
(
ObjectGroup
*
group
JSObject
*
associated
)
{
group_
=
group
;
associated_
=
associated
;
}
MOZ_ALWAYS_INLINE
ObjectGroup
*
lookup
(
const
JSClass
*
clasp
TaggedProto
proto
JSObject
*
associated
)
;
}
defaultNewGroupCache
=
{
}
;
WeakHeapPtrObjectGroup
stringSplitStringGroup
=
{
}
;
private
:
friend
class
ObjectGroup
;
public
:
struct
NewEntry
;
ObjectGroupRealm
(
)
=
default
;
~
ObjectGroupRealm
(
)
;
ObjectGroupRealm
(
ObjectGroupRealm
&
)
=
delete
;
void
operator
=
(
ObjectGroupRealm
&
)
=
delete
;
static
ObjectGroupRealm
&
get
(
const
ObjectGroup
*
group
)
;
static
ObjectGroupRealm
&
getForNewObject
(
JSContext
*
cx
)
;
void
removeDefaultNewGroup
(
const
JSClass
*
clasp
TaggedProto
proto
JSObject
*
associated
)
;
void
replaceDefaultNewGroup
(
const
JSClass
*
clasp
TaggedProto
proto
JSObject
*
associated
ObjectGroup
*
group
)
;
static
ObjectGroup
*
makeGroup
(
JSContext
*
cx
JS
:
:
Realm
*
realm
const
JSClass
*
clasp
Handle
<
TaggedProto
>
proto
ObjectGroupFlags
initialFlags
=
0
)
;
static
ObjectGroup
*
getStringSplitStringGroup
(
JSContext
*
cx
)
;
void
addSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
allocationSiteTables
size_t
*
arrayGroupTables
size_t
*
plainObjectGroupTables
size_t
*
realmTables
)
;
void
clearTables
(
)
;
void
traceWeak
(
JSTracer
*
trc
)
;
void
purge
(
)
{
defaultNewGroupCache
.
purge
(
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkTablesAfterMovingGC
(
)
{
checkNewTableAfterMovingGC
(
defaultNewTable
)
;
checkNewTableAfterMovingGC
(
lazyTable
)
;
}
#
endif
void
fixupTablesAfterMovingGC
(
)
{
fixupNewTableAfterMovingGC
(
defaultNewTable
)
;
fixupNewTableAfterMovingGC
(
lazyTable
)
;
}
private
:
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkNewTableAfterMovingGC
(
NewTable
*
table
)
;
#
endif
void
fixupNewTableAfterMovingGC
(
NewTable
*
table
)
;
}
;
PlainObject
*
NewPlainObjectWithProperties
(
JSContext
*
cx
IdValuePair
*
properties
size_t
nproperties
NewObjectKind
newKind
)
;
}
#
endif
