#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
algorithm
>
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
ParserAtom
.
h
"
#
include
"
jit
/
IonCompileTask
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
js
/
ContextOptions
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
#
include
"
js
/
OffThreadScriptCompilation
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
CpuCount
.
h
"
#
include
"
util
/
NativeStack
.
h
"
#
include
"
vm
/
ErrorReporting
.
h
"
#
include
"
vm
/
HelperThreadState
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
vm
/
SharedImmutableStringsCache
.
h
"
#
include
"
vm
/
Time
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
vm
/
Xdr
.
h
"
#
include
"
wasm
/
WasmGenerator
.
h
"
#
include
"
debugger
/
DebugAPI
-
inl
.
h
"
#
include
"
gc
/
ArenaList
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
TimeStamp
;
using
mozilla
:
:
Unused
;
using
mozilla
:
:
Utf8Unit
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
ReadOnlyCompileOptions
;
namespace
js
{
Mutex
gHelperThreadLock
(
mutexid
:
:
GlobalHelperThreadState
)
;
GlobalHelperThreadState
*
gHelperThreadState
=
nullptr
;
}
#
define
PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
PROFILER_RAII_EXPAND
(
id
line
)
PROFILER_RAII_PASTE
(
id
line
)
#
define
PROFILER_RAII
PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
AUTO_PROFILER_LABEL
(
label
categoryPair
)
\
HelperThread
:
:
AutoProfilerLabel
PROFILER_RAII
(
\
this
label
JS
:
:
ProfilingCategoryPair
:
:
categoryPair
)
bool
js
:
:
CreateHelperThreadsState
(
)
{
MOZ_ASSERT
(
!
gHelperThreadState
)
;
UniquePtr
<
GlobalHelperThreadState
>
helperThreadState
=
MakeUnique
<
GlobalHelperThreadState
>
(
)
;
if
(
!
helperThreadState
)
{
return
false
;
}
gHelperThreadState
=
helperThreadState
.
release
(
)
;
if
(
!
gHelperThreadState
-
>
ensureContextList
(
gHelperThreadState
-
>
threadCount
)
)
{
js_delete
(
gHelperThreadState
)
;
gHelperThreadState
=
nullptr
;
return
false
;
}
return
true
;
}
void
js
:
:
DestroyHelperThreadsState
(
)
{
if
(
!
gHelperThreadState
)
{
return
;
}
gHelperThreadState
-
>
finish
(
)
;
js_delete
(
gHelperThreadState
)
;
gHelperThreadState
=
nullptr
;
}
bool
js
:
:
EnsureHelperThreadsInitialized
(
)
{
MOZ_ASSERT
(
gHelperThreadState
)
;
return
gHelperThreadState
-
>
ensureInitialized
(
)
;
}
static
size_t
ClampDefaultCPUCount
(
size_t
cpuCount
)
{
return
std
:
:
min
<
size_t
>
(
cpuCount
8
)
;
}
static
size_t
ThreadCountForCPUCount
(
size_t
cpuCount
)
{
return
std
:
:
max
<
size_t
>
(
cpuCount
2
)
;
}
bool
js
:
:
SetFakeCPUCount
(
size_t
count
)
{
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
;
HelperThreadState
(
)
.
cpuCount
=
count
;
HelperThreadState
(
)
.
threadCount
=
ThreadCountForCPUCount
(
count
)
;
return
true
;
}
void
JS
:
:
SetProfilingThreadCallbacks
(
JS
:
:
RegisterThreadCallback
registerThread
JS
:
:
UnregisterThreadCallback
unregisterThread
)
{
HelperThreadState
(
)
.
registerThread
=
registerThread
;
HelperThreadState
(
)
.
unregisterThread
=
unregisterThread
;
}
bool
js
:
:
StartOffThreadWasmCompile
(
wasm
:
:
CompileTask
*
task
wasm
:
:
CompileMode
mode
)
{
return
HelperThreadState
(
)
.
submitTask
(
task
mode
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
wasm
:
:
CompileTask
*
task
wasm
:
:
CompileMode
mode
)
{
AutoLockHelperThreadState
lock
;
if
(
!
wasmWorklist
(
lock
mode
)
.
pushBack
(
task
)
)
{
return
false
;
}
dispatch
(
lock
)
;
return
true
;
}
size_t
js
:
:
RemovePendingWasmCompileTasks
(
const
wasm
:
:
CompileTaskState
&
taskState
wasm
:
:
CompileMode
mode
const
AutoLockHelperThreadState
&
lock
)
{
wasm
:
:
CompileTaskPtrFifo
&
worklist
=
HelperThreadState
(
)
.
wasmWorklist
(
lock
mode
)
;
return
worklist
.
eraseIf
(
[
&
taskState
]
(
wasm
:
:
CompileTask
*
task
)
{
return
&
task
-
>
state
=
=
&
taskState
;
}
)
;
}
void
js
:
:
StartOffThreadWasmTier2Generator
(
wasm
:
:
UniqueTier2GeneratorTask
task
)
{
Unused
<
<
HelperThreadState
(
)
.
submitTask
(
std
:
:
move
(
task
)
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
wasm
:
:
UniqueTier2GeneratorTask
task
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
AutoLockHelperThreadState
lock
;
if
(
!
wasmTier2GeneratorWorklist
(
lock
)
.
append
(
task
.
get
(
)
)
)
{
return
false
;
}
Unused
<
<
task
.
release
(
)
;
dispatch
(
lock
)
;
return
true
;
}
static
void
CancelOffThreadWasmTier2GeneratorLocked
(
AutoLockHelperThreadState
&
lock
)
{
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
{
wasm
:
:
Tier2GeneratorTaskPtrVector
&
worklist
=
HelperThreadState
(
)
.
wasmTier2GeneratorWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
wasm
:
:
Tier2GeneratorTask
*
task
=
worklist
[
i
]
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
js_delete
(
task
)
;
}
}
static_assert
(
GlobalHelperThreadState
:
:
MaxTier2GeneratorTasks
=
=
1
"
code
must
be
generalized
"
)
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
wasm
:
:
Tier2GeneratorTask
>
(
)
)
{
helper
-
>
as
<
wasm
:
:
Tier2GeneratorTask
>
(
)
-
>
cancel
(
)
;
uint32_t
oldFinishedCount
=
HelperThreadState
(
)
.
wasmTier2GeneratorsFinished
(
lock
)
;
while
(
HelperThreadState
(
)
.
wasmTier2GeneratorsFinished
(
lock
)
=
=
oldFinishedCount
)
{
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
break
;
}
}
}
void
js
:
:
CancelOffThreadWasmTier2Generator
(
)
{
AutoLockHelperThreadState
lock
;
CancelOffThreadWasmTier2GeneratorLocked
(
lock
)
;
}
bool
js
:
:
StartOffThreadIonCompile
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
return
HelperThreadState
(
)
.
submitTask
(
task
lock
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
if
(
!
ionWorklist
(
locked
)
.
append
(
task
)
)
{
return
false
;
}
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadOnly
(
)
;
dispatch
(
locked
)
;
return
true
;
}
bool
js
:
:
StartOffThreadIonFree
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
js
:
:
UniquePtr
<
jit
:
:
IonFreeTask
>
freeTask
=
js
:
:
MakeUnique
<
jit
:
:
IonFreeTask
>
(
task
)
;
if
(
!
freeTask
)
{
return
false
;
}
return
HelperThreadState
(
)
.
submitTask
(
std
:
:
move
(
freeTask
)
lock
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
UniquePtr
<
jit
:
:
IonFreeTask
>
task
const
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
if
(
!
ionFreeList
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
dispatch
(
locked
)
;
return
true
;
}
void
js
:
:
FinishOffThreadIonCompile
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
.
append
(
task
)
)
{
oomUnsafe
.
crash
(
"
FinishOffThreadIonCompile
"
)
;
}
task
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
-
>
jitRuntime
(
)
-
>
numFinishedOffThreadTasksRef
(
lock
)
+
+
;
}
static
JSRuntime
*
GetSelectorRuntime
(
const
CompilationSelector
&
selector
)
{
struct
Matcher
{
JSRuntime
*
operator
(
)
(
JSScript
*
script
)
{
return
script
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
operator
(
)
(
Realm
*
realm
)
{
return
realm
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
operator
(
)
(
Zone
*
zone
)
{
return
zone
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
;
}
JSRuntime
*
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
JitDataStructuresExist
(
const
CompilationSelector
&
selector
)
{
struct
Matcher
{
bool
operator
(
)
(
JSScript
*
script
)
{
return
!
!
script
-
>
realm
(
)
-
>
jitRealm
(
)
;
}
bool
operator
(
)
(
Realm
*
realm
)
{
return
!
!
realm
-
>
jitRealm
(
)
;
}
bool
operator
(
)
(
Zone
*
zone
)
{
return
!
!
zone
-
>
jitZone
(
)
;
}
bool
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
-
>
hasJitRuntime
(
)
;
}
bool
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
-
>
hasJitRuntime
(
)
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
IonCompileTaskMatches
(
const
CompilationSelector
&
selector
jit
:
:
IonCompileTask
*
task
)
{
struct
TaskMatches
{
jit
:
:
IonCompileTask
*
task_
;
bool
operator
(
)
(
JSScript
*
script
)
{
return
script
=
=
task_
-
>
script
(
)
;
}
bool
operator
(
)
(
Realm
*
realm
)
{
return
realm
=
=
task_
-
>
script
(
)
-
>
realm
(
)
;
}
bool
operator
(
)
(
Zone
*
zone
)
{
return
zone
=
=
task_
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
;
}
bool
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
=
=
task_
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
;
}
bool
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
=
=
task_
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
&
&
zbs
.
state
=
=
task_
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
-
>
gcState
(
)
;
}
}
;
return
selector
.
match
(
TaskMatches
{
task
}
)
;
}
static
void
CancelOffThreadIonCompileLocked
(
const
CompilationSelector
&
selector
AutoLockHelperThreadState
&
lock
)
{
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
worklist
[
i
]
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
worklist
[
i
]
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadWrite
(
)
;
FinishOffThreadIonCompile
(
task
lock
)
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
}
}
bool
cancelled
;
do
{
cancelled
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
)
{
continue
;
}
jit
:
:
IonCompileTask
*
ionCompileTask
=
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
;
if
(
IonCompileTaskMatches
(
selector
ionCompileTask
)
)
{
ionCompileTask
-
>
mirGen
(
)
.
cancel
(
)
;
cancelled
=
true
;
}
}
if
(
cancelled
)
{
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
}
while
(
cancelled
)
;
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
finished
[
i
]
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
JSRuntime
*
rt
=
task
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
;
rt
-
>
jitRuntime
(
)
-
>
numFinishedOffThreadTasksRef
(
lock
)
-
-
;
jit
:
:
FinishOffThreadTask
(
rt
task
lock
)
;
HelperThreadState
(
)
.
remove
(
finished
&
i
)
;
}
}
JSRuntime
*
runtime
=
GetSelectorRuntime
(
selector
)
;
jit
:
:
IonCompileTask
*
task
=
runtime
-
>
jitRuntime
(
)
-
>
ionLazyLinkList
(
runtime
)
.
getFirst
(
)
;
while
(
task
)
{
jit
:
:
IonCompileTask
*
next
=
task
-
>
getNext
(
)
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
jit
:
:
FinishOffThreadTask
(
runtime
task
lock
)
;
}
task
=
next
;
}
}
void
js
:
:
CancelOffThreadIonCompile
(
const
CompilationSelector
&
selector
)
{
if
(
!
JitDataStructuresExist
(
selector
)
)
{
return
;
}
AutoLockHelperThreadState
lock
;
CancelOffThreadIonCompileLocked
(
selector
lock
)
;
}
#
ifdef
DEBUG
bool
js
:
:
HasOffThreadIonCompile
(
Realm
*
realm
)
{
AutoLockHelperThreadState
lock
;
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
false
;
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
worklist
[
i
]
;
if
(
task
-
>
script
(
)
-
>
realm
(
)
=
=
realm
)
{
return
true
;
}
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
&
&
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
-
>
script
(
)
-
>
realm
(
)
=
=
realm
)
{
return
true
;
}
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
finished
[
i
]
;
if
(
task
-
>
script
(
)
-
>
realm
(
)
=
=
realm
)
{
return
true
;
}
}
JSRuntime
*
rt
=
realm
-
>
runtimeFromMainThread
(
)
;
jit
:
:
IonCompileTask
*
task
=
rt
-
>
jitRuntime
(
)
-
>
ionLazyLinkList
(
rt
)
.
getFirst
(
)
;
while
(
task
)
{
if
(
task
-
>
script
(
)
-
>
realm
(
)
=
=
realm
)
{
return
true
;
}
task
=
task
-
>
getNext
(
)
;
}
return
false
;
}
#
endif
struct
MOZ_RAII
AutoSetContextParse
{
explicit
AutoSetContextParse
(
ParseTask
*
task
)
{
TlsContext
.
get
(
)
-
>
setParseTask
(
task
)
;
}
~
AutoSetContextParse
(
)
{
TlsContext
.
get
(
)
-
>
setParseTask
(
nullptr
)
;
}
}
;
static
const
uint32_t
kDefaultHelperStackSize
=
2048
*
1024
-
2
*
4096
;
static
const
uint32_t
kDefaultHelperStackQuota
=
1800
*
1024
;
#
if
defined
(
MOZ_TSAN
)
static
const
uint32_t
HELPER_STACK_SIZE
=
2
*
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
2
*
kDefaultHelperStackQuota
;
#
else
static
const
uint32_t
HELPER_STACK_SIZE
=
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
kDefaultHelperStackQuota
;
#
endif
AutoSetHelperThreadContext
:
:
AutoSetHelperThreadContext
(
AutoLockHelperThreadState
&
lock
)
:
lock
(
lock
)
{
cx
=
HelperThreadState
(
)
.
getFirstUnusedContext
(
lock
)
;
MOZ_ASSERT
(
cx
)
;
cx
-
>
setHelperThread
(
lock
)
;
cx
-
>
nativeStackBase
=
GetNativeStackBase
(
)
;
JS_SetNativeStackQuota
(
cx
HELPER_STACK_QUOTA
)
;
}
AutoSetHelperThreadContext
:
:
~
AutoSetHelperThreadContext
(
)
{
cx
-
>
tempLifoAlloc
(
)
.
releaseAll
(
)
;
if
(
cx
-
>
shouldFreeUnusedMemory
(
)
)
{
cx
-
>
tempLifoAlloc
(
)
.
freeAll
(
)
;
cx
-
>
setFreeUnusedMemory
(
false
)
;
}
cx
-
>
clearHelperThread
(
lock
)
;
cx
=
nullptr
;
}
static
const
JSClass
parseTaskGlobalClass
=
{
"
internal
-
parse
-
task
-
global
"
JSCLASS_GLOBAL_FLAGS
&
JS
:
:
DefaultGlobalClassOps
}
;
ParseTask
:
:
ParseTask
(
ParseTaskKind
kind
JSContext
*
cx
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
kind
(
kind
)
options
(
cx
)
parseGlobal
(
nullptr
)
callback
(
callback
)
callbackData
(
callbackData
)
overRecursed
(
false
)
outOfMemory
(
false
)
{
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
MOZ_ALWAYS_TRUE
(
scripts
.
reserve
(
scripts
.
capacity
(
)
)
)
;
MOZ_ALWAYS_TRUE
(
sourceObjects
.
reserve
(
sourceObjects
.
capacity
(
)
)
)
;
}
bool
ParseTask
:
:
init
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JSObject
*
global
)
{
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
if
(
!
this
-
>
options
.
copy
(
cx
options
)
)
{
return
false
;
}
runtime
=
cx
-
>
runtime
(
)
;
parseGlobal
=
global
;
return
true
;
}
void
ParseTask
:
:
activate
(
JSRuntime
*
rt
)
{
rt
-
>
addParseTaskRef
(
)
;
if
(
parseGlobal
)
{
rt
-
>
setUsedByHelperThread
(
parseGlobal
-
>
zone
(
)
)
;
}
}
ParseTask
:
:
~
ParseTask
(
)
=
default
;
void
ParseTask
:
:
trace
(
JSTracer
*
trc
)
{
if
(
runtime
!
=
trc
-
>
runtime
(
)
)
{
return
;
}
if
(
parseGlobal
)
{
Zone
*
zone
=
MaybeForwarded
(
parseGlobal
)
-
>
zoneFromAnyThread
(
)
;
if
(
zone
-
>
usedByHelperThread
(
)
)
{
MOZ_ASSERT
(
!
zone
-
>
isCollecting
(
)
)
;
return
;
}
}
TraceNullableRoot
(
trc
&
parseGlobal
"
ParseTask
:
:
parseGlobal
"
)
;
scripts
.
trace
(
trc
)
;
sourceObjects
.
trace
(
trc
)
;
if
(
compilationInfo_
)
{
compilationInfo_
-
>
trace
(
trc
)
;
}
if
(
compilationInfos_
)
{
compilationInfos_
-
>
trace
(
trc
)
;
}
gcOutput_
.
trace
(
trc
)
;
}
size_t
ParseTask
:
:
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
options
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
errors
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
ParseTask
:
:
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
{
#
ifdef
DEBUG
if
(
parseGlobal
)
{
runtime
-
>
incOffThreadParsesRunning
(
)
;
}
#
endif
runTask
(
locked
)
;
callback
(
this
callbackData
)
;
HelperThreadState
(
)
.
parseFinishedList
(
locked
)
.
insertBack
(
this
)
;
#
ifdef
DEBUG
if
(
parseGlobal
)
{
runtime
-
>
decOffThreadParsesRunning
(
)
;
}
#
endif
}
void
ParseTask
:
:
runTask
(
AutoLockHelperThreadState
&
lock
)
{
AutoSetHelperThreadContext
usesContext
(
lock
)
;
AutoUnlockHelperThreadState
unlock
(
lock
)
;
JSContext
*
cx
=
TlsContext
.
get
(
)
;
AutoSetContextRuntime
ascr
(
runtime
)
;
AutoSetContextParse
parsetask
(
this
)
;
gc
:
:
AutoSuppressNurseryCellAlloc
noNurseryAlloc
(
cx
)
;
Zone
*
zone
=
nullptr
;
if
(
parseGlobal
)
{
zone
=
parseGlobal
-
>
zoneFromAnyThread
(
)
;
zone
-
>
setHelperThreadOwnerContext
(
cx
)
;
}
auto
resetOwnerContext
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
if
(
zone
)
{
zone
-
>
setHelperThreadOwnerContext
(
nullptr
)
;
}
}
)
;
Maybe
<
AutoRealm
>
ar
;
if
(
parseGlobal
)
{
ar
.
emplace
(
cx
parseGlobal
)
;
}
parse
(
cx
)
;
MOZ_ASSERT
(
cx
-
>
tempLifoAlloc
(
)
.
isEmpty
(
)
)
;
cx
-
>
tempLifoAlloc
(
)
.
freeAll
(
)
;
cx
-
>
frontendCollectionPool
(
)
.
purge
(
)
;
cx
-
>
atomsZoneFreeLists
(
)
.
clear
(
)
;
}
template
<
typename
Unit
>
struct
ScriptParseTask
:
public
ParseTask
{
JS
:
:
SourceText
<
Unit
>
data
;
ScriptParseTask
(
JSContext
*
cx
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
;
void
parse
(
JSContext
*
cx
)
override
;
}
;
template
<
typename
Unit
>
ScriptParseTask
<
Unit
>
:
:
ScriptParseTask
(
JSContext
*
cx
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
Script
cx
callback
callbackData
)
data
(
std
:
:
move
(
srcBuf
)
)
{
}
template
<
typename
Unit
>
void
ScriptParseTask
<
Unit
>
:
:
parse
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
isHelperThreadContext
(
)
)
;
ScopeKind
scopeKind
=
options
.
nonSyntacticScope
?
ScopeKind
:
:
NonSyntactic
:
ScopeKind
:
:
Global
;
compilationInfo_
=
frontend
:
:
CompileGlobalScriptToStencil
(
cx
options
data
scopeKind
)
;
if
(
compilationInfo_
)
{
if
(
!
frontend
:
:
PrepareForInstantiate
(
cx
*
compilationInfo_
gcOutput_
)
)
{
compilationInfo_
=
nullptr
;
}
}
if
(
options
.
useOffThreadParseGlobal
)
{
Unused
<
<
instantiateStencils
(
cx
)
;
}
}
bool
ParseTask
:
:
instantiateStencils
(
JSContext
*
cx
)
{
if
(
!
compilationInfo_
&
&
!
compilationInfos_
)
{
return
false
;
}
bool
result
;
if
(
compilationInfo_
)
{
result
=
frontend
:
:
InstantiateStencils
(
cx
*
compilationInfo_
gcOutput_
)
;
}
else
{
result
=
frontend
:
:
InstantiateStencils
(
cx
*
compilationInfos_
gcOutput_
)
;
}
if
(
gcOutput_
.
sourceObject
)
{
sourceObjects
.
infallibleAppend
(
gcOutput_
.
sourceObject
)
;
}
if
(
result
)
{
MOZ_ASSERT
(
gcOutput_
.
script
)
;
MOZ_ASSERT_IF
(
gcOutput_
.
module
gcOutput_
.
module
-
>
script
(
)
=
=
gcOutput_
.
script
)
;
scripts
.
infallibleAppend
(
gcOutput_
.
script
)
;
}
return
result
;
}
template
<
typename
Unit
>
struct
ModuleParseTask
:
public
ParseTask
{
JS
:
:
SourceText
<
Unit
>
data
;
ModuleParseTask
(
JSContext
*
cx
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
;
void
parse
(
JSContext
*
cx
)
override
;
}
;
template
<
typename
Unit
>
ModuleParseTask
<
Unit
>
:
:
ModuleParseTask
(
JSContext
*
cx
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
Module
cx
callback
callbackData
)
data
(
std
:
:
move
(
srcBuf
)
)
{
}
template
<
typename
Unit
>
void
ModuleParseTask
<
Unit
>
:
:
parse
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
isHelperThreadContext
(
)
)
;
options
.
setModule
(
)
;
compilationInfo_
=
frontend
:
:
ParseModuleToStencil
(
cx
options
data
)
;
if
(
compilationInfo_
)
{
if
(
!
frontend
:
:
PrepareForInstantiate
(
cx
*
compilationInfo_
gcOutput_
)
)
{
compilationInfo_
=
nullptr
;
}
}
if
(
options
.
useOffThreadParseGlobal
)
{
Unused
<
<
instantiateStencils
(
cx
)
;
}
}
ScriptDecodeTask
:
:
ScriptDecodeTask
(
JSContext
*
cx
const
JS
:
:
TranscodeRange
&
range
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
ScriptDecode
cx
callback
callbackData
)
range
(
range
)
{
}
void
ScriptDecodeTask
:
:
parse
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
isHelperThreadContext
(
)
)
;
RootedScript
resultScript
(
cx
)
;
Rooted
<
ScriptSourceObject
*
>
sourceObject
(
cx
)
;
if
(
options
.
useStencilXDR
)
{
Rooted
<
UniquePtr
<
frontend
:
:
CompilationInfoVector
>
>
compilationInfos
(
cx
js_new
<
frontend
:
:
CompilationInfoVector
>
(
cx
options
)
)
;
if
(
!
compilationInfos
)
{
ReportOutOfMemory
(
cx
)
;
return
;
}
XDRStencilDecoder
decoder
(
cx
&
compilationInfos
.
get
(
)
-
>
initial
.
input
.
options
range
)
;
if
(
!
compilationInfos
.
get
(
)
-
>
initial
.
input
.
initForGlobal
(
cx
)
)
{
return
;
}
XDRResult
res
=
decoder
.
codeStencils
(
*
compilationInfos
)
;
if
(
!
res
.
isOk
(
)
)
{
return
;
}
compilationInfos_
=
std
:
:
move
(
compilationInfos
.
get
(
)
)
;
if
(
compilationInfos_
)
{
if
(
!
frontend
:
:
PrepareForInstantiate
(
cx
*
compilationInfos_
gcOutput_
)
)
{
compilationInfos_
=
nullptr
;
}
}
if
(
options
.
useOffThreadParseGlobal
)
{
Unused
<
<
instantiateStencils
(
cx
)
;
}
return
;
}
Rooted
<
UniquePtr
<
XDROffThreadDecoder
>
>
decoder
(
cx
js
:
:
MakeUnique
<
XDROffThreadDecoder
>
(
cx
&
options
XDROffThreadDecoder
:
:
Type
:
:
Single
&
sourceObject
.
get
(
)
range
)
)
;
if
(
!
decoder
)
{
ReportOutOfMemory
(
cx
)
;
return
;
}
mozilla
:
:
DebugOnly
<
XDRResult
>
res
=
decoder
-
>
codeScript
(
&
resultScript
)
;
MOZ_ASSERT
(
bool
(
resultScript
)
=
=
static_cast
<
const
XDRResult
&
>
(
res
)
.
isOk
(
)
)
;
if
(
sourceObject
)
{
sourceObjects
.
infallibleAppend
(
sourceObject
)
;
}
if
(
resultScript
)
{
scripts
.
infallibleAppend
(
resultScript
)
;
}
}
MultiScriptsDecodeTask
:
:
MultiScriptsDecodeTask
(
JSContext
*
cx
JS
:
:
TranscodeSources
&
sources
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
MultiScriptsDecode
cx
callback
callbackData
)
sources
(
&
sources
)
{
}
void
MultiScriptsDecodeTask
:
:
parse
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
isHelperThreadContext
(
)
)
;
if
(
!
scripts
.
reserve
(
sources
-
>
length
(
)
)
|
|
!
sourceObjects
.
reserve
(
sources
-
>
length
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
;
}
for
(
auto
&
source
:
*
sources
)
{
CompileOptions
opts
(
cx
options
)
;
opts
.
setFileAndLine
(
source
.
filename
source
.
lineno
)
;
RootedScript
resultScript
(
cx
)
;
Rooted
<
ScriptSourceObject
*
>
sourceObject
(
cx
)
;
Rooted
<
UniquePtr
<
XDROffThreadDecoder
>
>
decoder
(
cx
js
:
:
MakeUnique
<
XDROffThreadDecoder
>
(
cx
&
opts
XDROffThreadDecoder
:
:
Type
:
:
Multi
&
sourceObject
.
get
(
)
source
.
range
)
)
;
if
(
!
decoder
)
{
ReportOutOfMemory
(
cx
)
;
return
;
}
mozilla
:
:
DebugOnly
<
XDRResult
>
res
=
decoder
-
>
codeScript
(
&
resultScript
)
;
MOZ_ASSERT
(
bool
(
resultScript
)
=
=
static_cast
<
const
XDRResult
&
>
(
res
)
.
isOk
(
)
)
;
if
(
sourceObject
)
{
sourceObjects
.
infallibleAppend
(
sourceObject
)
;
}
if
(
resultScript
)
{
scripts
.
infallibleAppend
(
resultScript
)
;
}
else
{
break
;
}
}
}
static
void
WaitForOffThreadParses
(
JSRuntime
*
rt
AutoLockHelperThreadState
&
lock
)
{
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
while
(
true
)
{
bool
pending
=
false
;
GlobalHelperThreadState
:
:
ParseTaskVector
&
worklist
=
HelperThreadState
(
)
.
parseWorklist
(
lock
)
;
for
(
const
auto
&
task
:
worklist
)
{
if
(
task
-
>
runtimeMatches
(
rt
)
)
{
pending
=
true
;
}
}
if
(
!
pending
)
{
bool
inProgress
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
ParseTask
>
(
)
)
{
continue
;
}
if
(
helper
-
>
as
<
ParseTask
>
(
)
-
>
runtimeMatches
(
rt
)
)
{
inProgress
=
true
;
}
}
if
(
!
inProgress
)
{
break
;
}
}
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
}
void
js
:
:
WaitForOffThreadParses
(
JSRuntime
*
rt
)
{
AutoLockHelperThreadState
lock
;
WaitForOffThreadParses
(
rt
lock
)
;
}
void
js
:
:
CancelOffThreadParses
(
JSRuntime
*
rt
)
{
AutoLockHelperThreadState
lock
;
#
ifdef
DEBUG
for
(
const
auto
&
task
:
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
)
{
MOZ_ASSERT
(
!
task
-
>
runtimeMatches
(
rt
)
)
;
}
#
endif
WaitForOffThreadParses
(
rt
lock
)
;
auto
&
finished
=
HelperThreadState
(
)
.
parseFinishedList
(
lock
)
;
while
(
true
)
{
bool
found
=
false
;
ParseTask
*
next
;
ParseTask
*
task
=
finished
.
getFirst
(
)
;
while
(
task
)
{
next
=
task
-
>
getNext
(
)
;
if
(
task
-
>
runtimeMatches
(
rt
)
)
{
found
=
true
;
task
-
>
remove
(
)
;
HelperThreadState
(
)
.
destroyParseTask
(
rt
task
)
;
}
task
=
next
;
}
if
(
!
found
)
{
break
;
}
}
#
ifdef
DEBUG
for
(
const
auto
&
task
:
HelperThreadState
(
)
.
parseWorklist
(
lock
)
)
{
MOZ_ASSERT
(
!
task
-
>
runtimeMatches
(
rt
)
)
;
}
#
endif
}
bool
js
:
:
OffThreadParsingMustWaitForGC
(
JSRuntime
*
rt
)
{
return
rt
-
>
activeGCInAtomsZone
(
)
;
}
static
bool
EnsureConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
)
{
if
(
!
GlobalObject
:
:
ensureConstructor
(
cx
global
key
)
)
{
return
false
;
}
MOZ_ASSERT
(
global
-
>
getPrototype
(
key
)
.
toObject
(
)
.
isDelegate
(
)
"
standard
class
prototype
wasn
'
t
a
delegate
from
birth
"
)
;
return
true
;
}
static
bool
EnsureParserCreatedClasses
(
JSContext
*
cx
ParseTaskKind
kind
)
{
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
if
(
!
EnsureConstructor
(
cx
global
JSProto_Function
)
)
{
return
false
;
}
if
(
!
EnsureConstructor
(
cx
global
JSProto_Array
)
)
{
return
false
;
}
if
(
!
EnsureConstructor
(
cx
global
JSProto_RegExp
)
)
{
return
false
;
}
if
(
!
EnsureConstructor
(
cx
global
JSProto_GeneratorFunction
)
)
{
return
false
;
}
if
(
!
EnsureConstructor
(
cx
global
JSProto_AsyncFunction
)
)
{
return
false
;
}
if
(
!
EnsureConstructor
(
cx
global
JSProto_AsyncGeneratorFunction
)
)
{
return
false
;
}
if
(
kind
=
=
ParseTaskKind
:
:
Module
&
&
!
GlobalObject
:
:
ensureModulePrototypesCreated
(
cx
global
)
)
{
return
false
;
}
return
true
;
}
class
MOZ_RAII
AutoSetCreatedForHelperThread
{
Zone
*
zone
;
public
:
explicit
AutoSetCreatedForHelperThread
(
JSObject
*
global
)
:
zone
(
global
?
global
-
>
zone
(
)
:
nullptr
)
{
if
(
zone
)
{
zone
-
>
setCreatedForHelperThread
(
)
;
}
}
void
forget
(
)
{
zone
=
nullptr
;
}
~
AutoSetCreatedForHelperThread
(
)
{
if
(
zone
)
{
zone
-
>
clearUsedByHelperThread
(
)
;
}
}
}
;
static
JSObject
*
CreateGlobalForOffThreadParse
(
JSContext
*
cx
const
gc
:
:
AutoSuppressGC
&
nogc
)
{
JS
:
:
Realm
*
currentRealm
=
cx
-
>
realm
(
)
;
JS
:
:
RealmOptions
realmOptions
(
currentRealm
-
>
creationOptions
(
)
currentRealm
-
>
behaviors
(
)
)
;
auto
&
creationOptions
=
realmOptions
.
creationOptions
(
)
;
creationOptions
.
setInvisibleToDebugger
(
true
)
.
setMergeable
(
true
)
.
setNewCompartmentAndZone
(
)
;
creationOptions
.
setTrace
(
nullptr
)
;
return
JS_NewGlobalObject
(
cx
&
parseTaskGlobalClass
currentRealm
-
>
principals
(
)
JS
:
:
DontFireOnNewGlobalHook
realmOptions
)
;
}
static
bool
QueueOffThreadParseTask
(
JSContext
*
cx
UniquePtr
<
ParseTask
>
task
)
{
AutoLockHelperThreadState
lock
;
bool
mustWait
=
task
-
>
options
.
useOffThreadParseGlobal
&
&
OffThreadParsingMustWaitForGC
(
cx
-
>
runtime
(
)
)
;
bool
result
;
if
(
mustWait
)
{
result
=
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
.
append
(
std
:
:
move
(
task
)
)
;
}
else
{
result
=
HelperThreadState
(
)
.
submitTask
(
cx
-
>
runtime
(
)
std
:
:
move
(
task
)
lock
)
;
}
if
(
!
result
)
{
ReportOutOfMemory
(
cx
)
;
}
return
result
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
JSRuntime
*
rt
UniquePtr
<
ParseTask
>
task
const
AutoLockHelperThreadState
&
locked
)
{
if
(
!
parseWorklist
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
parseWorklist
(
locked
)
.
back
(
)
-
>
activate
(
rt
)
;
dispatch
(
locked
)
;
return
true
;
}
static
bool
StartOffThreadParseTask
(
JSContext
*
cx
UniquePtr
<
ParseTask
>
task
const
ReadOnlyCompileOptions
&
options
)
{
gc
:
:
AutoSuppressGC
nogc
(
cx
)
;
gc
:
:
AutoSuppressNurseryCellAlloc
noNurseryAlloc
(
cx
)
;
AutoSuppressAllocationMetadataBuilder
suppressMetadata
(
cx
)
;
JSObject
*
global
=
nullptr
;
if
(
options
.
useOffThreadParseGlobal
)
{
global
=
CreateGlobalForOffThreadParse
(
cx
nogc
)
;
if
(
!
global
)
{
return
false
;
}
}
AutoSetCreatedForHelperThread
createdForHelper
(
global
)
;
if
(
!
task
-
>
init
(
cx
options
global
)
)
{
return
false
;
}
if
(
!
QueueOffThreadParseTask
(
cx
std
:
:
move
(
task
)
)
)
{
return
false
;
}
createdForHelper
.
forget
(
)
;
return
true
;
}
template
<
typename
Unit
>
static
bool
StartOffThreadParseScriptInternal
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
auto
task
=
cx
-
>
make_unique
<
ScriptParseTask
<
Unit
>
>
(
cx
srcBuf
callback
callbackData
)
;
if
(
tokenOut
)
{
*
tokenOut
=
static_cast
<
JS
:
:
OffThreadToken
*
>
(
task
.
get
(
)
)
;
}
if
(
!
task
)
{
return
false
;
}
return
StartOffThreadParseTask
(
cx
std
:
:
move
(
task
)
options
)
;
}
bool
js
:
:
StartOffThreadParseScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
return
StartOffThreadParseScriptInternal
(
cx
options
srcBuf
callback
callbackData
tokenOut
)
;
}
bool
js
:
:
StartOffThreadParseScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
return
StartOffThreadParseScriptInternal
(
cx
options
srcBuf
callback
callbackData
tokenOut
)
;
}
template
<
typename
Unit
>
static
bool
StartOffThreadParseModuleInternal
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
auto
task
=
cx
-
>
make_unique
<
ModuleParseTask
<
Unit
>
>
(
cx
srcBuf
callback
callbackData
)
;
if
(
tokenOut
)
{
*
tokenOut
=
static_cast
<
JS
:
:
OffThreadToken
*
>
(
task
.
get
(
)
)
;
}
if
(
!
task
)
{
return
false
;
}
return
StartOffThreadParseTask
(
cx
std
:
:
move
(
task
)
options
)
;
}
bool
js
:
:
StartOffThreadParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
return
StartOffThreadParseModuleInternal
(
cx
options
srcBuf
callback
callbackData
tokenOut
)
;
}
bool
js
:
:
StartOffThreadParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
return
StartOffThreadParseModuleInternal
(
cx
options
srcBuf
callback
callbackData
tokenOut
)
;
}
bool
js
:
:
StartOffThreadDecodeScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
JS
:
:
TranscodeRange
&
range
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
JS
:
:
OffThreadToken
*
*
tokenOut
)
{
auto
task
=
cx
-
>
make_unique
<
ScriptDecodeTask
>
(
cx
range
callback
callbackData
)
;
if
(
tokenOut
)
{
*
tokenOut
=
static_cast
<
JS
:
:
OffThreadToken
*
>
(
task
.
get
(
)
)
;
}
if
(
!
task
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
options
.
useStencilXDR
|
|
options
.
useOffThreadParseGlobal
)
;
return
StartOffThreadParseTask
(
cx
std
:
:
move
(
task
)
options
)
;
}
bool
js
:
:
StartOffThreadDecodeMultiScripts
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
TranscodeSources
&
sources
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
{
auto
task
=
cx
-
>
make_unique
<
MultiScriptsDecodeTask
>
(
cx
sources
callback
callbackData
)
;
if
(
!
task
)
{
return
false
;
}
CompileOptions
optionsCopy
(
cx
options
)
;
optionsCopy
.
useStencilXDR
=
false
;
optionsCopy
.
useOffThreadParseGlobal
=
true
;
return
StartOffThreadParseTask
(
cx
std
:
:
move
(
task
)
optionsCopy
)
;
}
void
js
:
:
EnqueuePendingParseTasksAfterGC
(
JSRuntime
*
rt
)
{
MOZ_ASSERT
(
!
OffThreadParsingMustWaitForGC
(
rt
)
)
;
AutoLockHelperThreadState
lock
;
GlobalHelperThreadState
:
:
ParseTaskVector
&
waiting
=
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
waiting
.
length
(
)
;
i
+
+
)
{
if
(
!
waiting
[
i
]
-
>
runtimeMatches
(
rt
)
)
{
continue
;
}
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
submitTask
(
rt
std
:
:
move
(
waiting
[
i
]
)
lock
)
)
{
oomUnsafe
.
crash
(
"
EnqueuePendingParseTasksAfterGC
"
)
;
}
}
HelperThreadState
(
)
.
remove
(
waiting
&
i
)
;
}
}
#
ifdef
DEBUG
bool
js
:
:
CurrentThreadIsParseThread
(
)
{
JSContext
*
cx
=
TlsContext
.
get
(
)
;
return
cx
-
>
isHelperThreadContext
(
)
&
&
cx
-
>
parseTask
(
)
;
}
#
endif
bool
GlobalHelperThreadState
:
:
ensureInitialized
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
MOZ_ASSERT
(
this
=
=
&
HelperThreadState
(
)
)
;
return
ensureThreadCount
(
threadCount
)
;
}
bool
GlobalHelperThreadState
:
:
ensureThreadCount
(
size_t
count
)
{
if
(
!
ensureContextList
(
count
)
)
{
return
false
;
}
AutoLockHelperThreadState
lock
;
if
(
threads
(
lock
)
.
length
(
)
>
=
count
)
{
return
true
;
}
if
(
!
threads
(
lock
)
.
reserve
(
count
)
)
{
return
false
;
}
if
(
!
helperTasks_
.
reserve
(
count
)
)
{
return
false
;
}
for
(
size_t
&
i
:
runningTaskCount
)
{
i
=
0
;
}
auto
updateThreadCount
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
threadCount
=
threads
(
lock
)
.
length
(
)
;
}
)
;
while
(
threads
(
lock
)
.
length
(
)
<
count
)
{
auto
thread
=
js
:
:
MakeUnique
<
HelperThread
>
(
)
;
if
(
!
thread
|
|
!
thread
-
>
init
(
)
)
{
return
false
;
}
threads
(
lock
)
.
infallibleEmplaceBack
(
std
:
:
move
(
thread
)
)
;
}
return
true
;
}
GlobalHelperThreadState
:
:
GlobalHelperThreadState
(
)
:
cpuCount
(
0
)
threadCount
(
0
)
totalCountRunningTasks
(
0
)
registerThread
(
nullptr
)
unregisterThread
(
nullptr
)
wasmTier2GeneratorsFinished_
(
0
)
{
cpuCount
=
ClampDefaultCPUCount
(
GetCPUCount
(
)
)
;
threadCount
=
ThreadCountForCPUCount
(
cpuCount
)
;
gcParallelThreadCount
=
threadCount
;
MOZ_ASSERT
(
cpuCount
>
0
"
GetCPUCount
(
)
seems
broken
"
)
;
}
void
GlobalHelperThreadState
:
:
finish
(
)
{
finishThreads
(
)
;
AutoLockHelperThreadState
lock
;
auto
&
freeList
=
ionFreeList
(
lock
)
;
while
(
!
freeList
.
empty
(
)
)
{
UniquePtr
<
jit
:
:
IonFreeTask
>
task
=
std
:
:
move
(
freeList
.
back
(
)
)
;
freeList
.
popBack
(
)
;
jit
:
:
FreeIonCompileTask
(
task
-
>
compileTask
(
)
)
;
}
destroyHelperContexts
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
finishThreads
(
)
{
HelperThreadVector
oldThreads
;
{
AutoLockHelperThreadState
lock
;
if
(
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
waitForAllThreadsLocked
(
lock
)
;
for
(
auto
&
thread
:
threads
(
lock
)
)
{
thread
-
>
setTerminate
(
lock
)
;
}
notifyAll
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
std
:
:
swap
(
threads_
oldThreads
)
;
}
for
(
auto
&
thread
:
oldThreads
)
{
thread
-
>
join
(
)
;
}
}
bool
GlobalHelperThreadState
:
:
ensureContextList
(
size_t
count
)
{
AutoLockHelperThreadState
lock
;
if
(
helperContexts_
.
length
(
)
>
=
count
)
{
return
true
;
}
while
(
helperContexts_
.
length
(
)
<
count
)
{
auto
cx
=
js
:
:
MakeUnique
<
JSContext
>
(
nullptr
JS
:
:
ContextOptions
(
)
)
;
if
(
!
cx
|
|
!
cx
-
>
init
(
ContextKind
:
:
HelperThread
)
|
|
!
helperContexts_
.
append
(
cx
.
release
(
)
)
)
{
return
false
;
}
}
return
true
;
}
JSContext
*
GlobalHelperThreadState
:
:
getFirstUnusedContext
(
AutoLockHelperThreadState
&
locked
)
{
for
(
auto
&
cx
:
helperContexts_
)
{
if
(
cx
-
>
contextAvailable
(
locked
)
)
{
return
cx
;
}
}
MOZ_CRASH
(
"
Expected
available
JSContext
"
)
;
}
void
GlobalHelperThreadState
:
:
destroyHelperContexts
(
AutoLockHelperThreadState
&
lock
)
{
while
(
helperContexts_
.
length
(
)
>
0
)
{
js_delete
(
helperContexts_
.
popCopy
(
)
)
;
}
}
#
ifdef
DEBUG
bool
GlobalHelperThreadState
:
:
isLockedByCurrentThread
(
)
const
{
return
gHelperThreadLock
.
ownedByCurrentThread
(
)
;
}
#
endif
void
GlobalHelperThreadState
:
:
dispatch
(
const
AutoLockHelperThreadState
&
locked
)
{
notifyOne
(
PRODUCER
locked
)
;
}
void
GlobalHelperThreadState
:
:
wait
(
AutoLockHelperThreadState
&
locked
CondVar
which
TimeDuration
timeout
)
{
whichWakeup
(
which
)
.
wait_for
(
locked
timeout
)
;
}
void
GlobalHelperThreadState
:
:
notifyAll
(
CondVar
which
const
AutoLockHelperThreadState
&
)
{
whichWakeup
(
which
)
.
notify_all
(
)
;
}
void
GlobalHelperThreadState
:
:
notifyOne
(
CondVar
which
const
AutoLockHelperThreadState
&
)
{
whichWakeup
(
which
)
.
notify_one
(
)
;
}
bool
GlobalHelperThreadState
:
:
hasActiveThreads
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
helperTasks
(
lock
)
.
empty
(
)
;
}
void
js
:
:
WaitForAllHelperThreads
(
)
{
HelperThreadState
(
)
.
waitForAllThreads
(
)
;
}
void
js
:
:
WaitForAllHelperThreads
(
AutoLockHelperThreadState
&
lock
)
{
HelperThreadState
(
)
.
waitForAllThreadsLocked
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
waitForAllThreads
(
)
{
AutoLockHelperThreadState
lock
;
waitForAllThreadsLocked
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
waitForAllThreadsLocked
(
AutoLockHelperThreadState
&
lock
)
{
CancelOffThreadWasmTier2GeneratorLocked
(
lock
)
;
while
(
hasActiveThreads
(
lock
)
)
{
wait
(
lock
CONSUMER
)
;
}
}
bool
GlobalHelperThreadState
:
:
checkTaskThreadLimit
(
ThreadType
threadType
size_t
maxThreads
bool
isMaster
const
AutoLockHelperThreadState
&
lock
)
const
{
MOZ_ASSERT
(
maxThreads
>
0
)
;
if
(
!
isMaster
&
&
maxThreads
>
=
threadCount
)
{
return
true
;
}
size_t
count
=
runningTaskCount
[
threadType
]
;
if
(
count
>
=
maxThreads
)
{
return
false
;
}
MOZ_ASSERT
(
threadCount
>
=
totalCountRunningTasks
)
;
size_t
idle
=
threadCount
-
totalCountRunningTasks
;
if
(
idle
=
=
0
)
{
return
false
;
}
if
(
isMaster
&
&
idle
=
=
1
)
{
return
false
;
}
return
true
;
}
void
GlobalHelperThreadState
:
:
triggerFreeUnusedMemory
(
)
{
if
(
!
CanUseExtraThreads
(
)
)
{
return
;
}
AutoLockHelperThreadState
lock
;
for
(
auto
&
context
:
helperContexts_
)
{
if
(
context
-
>
shouldFreeUnusedMemory
(
)
&
&
context
-
>
contextAvailable
(
lock
)
)
{
context
-
>
tempLifoAllocNoCheck
(
)
.
freeAll
(
)
;
context
-
>
setFreeUnusedMemory
(
false
)
;
}
else
{
context
-
>
setFreeUnusedMemory
(
true
)
;
}
}
}
static
inline
bool
IsHelperThreadSimulatingOOM
(
js
:
:
ThreadType
threadType
)
{
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_OOM_BREAKPOINT
)
return
js
:
:
oom
:
:
simulator
.
targetThread
(
)
=
=
threadType
;
#
else
return
false
;
#
endif
}
void
GlobalHelperThreadState
:
:
addSizeOfIncludingThis
(
JS
:
:
GlobalStats
*
stats
AutoLockHelperThreadState
&
lock
)
const
{
MOZ_ASSERT
(
isLockedByCurrentThread
(
)
)
;
mozilla
:
:
MallocSizeOf
mallocSizeOf
=
stats
-
>
mallocSizeOf_
;
JS
:
:
HelperThreadStats
&
htStats
=
stats
-
>
helperThread
;
htStats
.
stateData
+
=
mallocSizeOf
(
this
)
;
htStats
.
stateData
+
=
threads
(
lock
)
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
htStats
.
stateData
+
=
ionWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
ionFinishedList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
ionFreeList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmWorklist_tier1_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmWorklist_tier2_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmTier2GeneratorWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
promiseHelperTasks_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
parseWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
parseFinishedList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
parseWaitingOnGC_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionPendingList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionFinishedList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
gcParallelWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
helperContexts_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
helperTasks_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
const
auto
&
task
:
parseWorklist_
)
{
htStats
.
parseTask
+
=
task
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
parseFinishedList_
)
{
htStats
.
parseTask
+
=
task
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
for
(
const
auto
&
task
:
parseWaitingOnGC_
)
{
htStats
.
parseTask
+
=
task
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
ionWorklist_
)
{
htStats
.
ionCompileTask
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
ionFinishedList_
)
{
htStats
.
ionCompileTask
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
const
auto
&
task
:
ionFreeList_
)
{
htStats
.
ionCompileTask
+
=
task
-
>
compileTask
(
)
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
wasmWorklist_tier1_
)
{
htStats
.
wasmCompile
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
wasmWorklist_tier2_
)
{
htStats
.
wasmCompile
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
{
AutoNoteSingleThreadedRegion
anstr
;
for
(
auto
*
cx
:
helperContexts_
)
{
htStats
.
contexts
+
=
cx
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
}
MOZ_ASSERT
(
htStats
.
idleThreadCount
=
=
0
)
;
MOZ_ASSERT
(
threadCount
>
=
totalCountRunningTasks
)
;
htStats
.
activeThreadCount
=
totalCountRunningTasks
;
htStats
.
idleThreadCount
=
threadCount
-
totalCountRunningTasks
;
}
size_t
GlobalHelperThreadState
:
:
maxIonCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_ION
)
)
{
return
1
;
}
return
threadCount
;
}
size_t
GlobalHelperThreadState
:
:
maxWasmCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_WASM
)
)
{
return
1
;
}
return
cpuCount
;
}
size_t
GlobalHelperThreadState
:
:
maxWasmTier2GeneratorThreads
(
)
const
{
return
MaxTier2GeneratorTasks
;
}
size_t
GlobalHelperThreadState
:
:
maxPromiseHelperThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_WASM
)
)
{
return
1
;
}
return
cpuCount
;
}
size_t
GlobalHelperThreadState
:
:
maxParseThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_PARSE
)
)
{
return
1
;
}
return
cpuCount
;
}
size_t
GlobalHelperThreadState
:
:
maxCompressionThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_COMPRESS
)
)
{
return
1
;
}
return
1
;
}
size_t
GlobalHelperThreadState
:
:
maxGCParallelThreads
(
const
AutoLockHelperThreadState
&
lock
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_GCPARALLEL
)
)
{
return
1
;
}
return
gcParallelThreadCount
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier1CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
maybeGetWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier1
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier2CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
maybeGetWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier2
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmCompile
(
const
AutoLockHelperThreadState
&
lock
wasm
:
:
CompileMode
mode
)
{
if
(
wasmWorklist
(
lock
mode
)
.
empty
(
)
)
{
return
nullptr
;
}
MOZ_RELEASE_ASSERT
(
cpuCount
>
1
)
;
bool
tier2oversubscribed
=
wasmTier2GeneratorWorklist
(
lock
)
.
length
(
)
>
20
;
size_t
physCoresAvailable
=
size_t
(
ceil
(
cpuCount
/
3
.
0
)
)
;
size_t
threads
;
if
(
mode
=
=
wasm
:
:
CompileMode
:
:
Tier2
)
{
if
(
tier2oversubscribed
)
{
threads
=
maxWasmCompilationThreads
(
)
;
}
else
{
threads
=
physCoresAvailable
;
}
}
else
{
if
(
tier2oversubscribed
)
{
threads
=
0
;
}
else
{
threads
=
maxWasmCompilationThreads
(
)
;
}
}
if
(
!
threads
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_WASM
threads
lock
)
)
{
return
nullptr
;
}
return
wasmWorklist
(
lock
mode
)
.
popCopyFront
(
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier2GeneratorTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
wasmTier2GeneratorWorklist
(
lock
)
.
empty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_WASM_TIER2
maxWasmTier2GeneratorThreads
(
)
true
lock
)
)
{
return
nullptr
;
}
return
wasmTier2GeneratorWorklist
(
lock
)
.
popCopy
(
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetPromiseHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
promiseHelperTasks
(
lock
)
.
empty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_PROMISE_TASK
maxPromiseHelperThreads
(
)
true
lock
)
)
{
return
nullptr
;
}
return
promiseHelperTasks
(
lock
)
.
popCopy
(
)
;
}
static
bool
IonCompileTaskHasHigherPriority
(
jit
:
:
IonCompileTask
*
first
jit
:
:
IonCompileTask
*
second
)
{
jit
:
:
OptimizationLevel
firstLevel
=
first
-
>
mirGen
(
)
.
optimizationInfo
(
)
.
level
(
)
;
jit
:
:
OptimizationLevel
secondLevel
=
second
-
>
mirGen
(
)
.
optimizationInfo
(
)
.
level
(
)
;
if
(
firstLevel
!
=
secondLevel
)
{
return
firstLevel
<
secondLevel
;
}
if
(
first
-
>
scriptHasIonScript
(
)
!
=
second
-
>
scriptHasIonScript
(
)
)
{
return
!
first
-
>
scriptHasIonScript
(
)
;
}
jit
:
:
JitScript
*
firstJitScript
=
first
-
>
script
(
)
-
>
jitScript
(
)
;
jit
:
:
JitScript
*
secondJitScript
=
second
-
>
script
(
)
-
>
jitScript
(
)
;
return
firstJitScript
-
>
warmUpCount
(
)
/
first
-
>
script
(
)
-
>
length
(
)
>
secondJitScript
-
>
warmUpCount
(
)
/
second
-
>
script
(
)
-
>
length
(
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
ionWorklist
(
lock
)
.
empty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_ION
maxIonCompilationThreads
(
)
lock
)
)
{
return
nullptr
;
}
return
highestPriorityPendingIonCompile
(
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetIonFreeTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
ionFreeList
(
lock
)
.
empty
(
)
)
{
return
nullptr
;
}
UniquePtr
<
jit
:
:
IonFreeTask
>
task
=
std
:
:
move
(
ionFreeList
(
lock
)
.
back
(
)
)
;
ionFreeList
(
lock
)
.
popBack
(
)
;
return
task
.
release
(
)
;
}
jit
:
:
IonCompileTask
*
GlobalHelperThreadState
:
:
highestPriorityPendingIonCompile
(
const
AutoLockHelperThreadState
&
lock
)
{
auto
&
worklist
=
ionWorklist
(
lock
)
;
MOZ_ASSERT
(
!
worklist
.
empty
(
)
)
;
size_t
index
=
0
;
for
(
size_t
i
=
1
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
if
(
IonCompileTaskHasHigherPriority
(
worklist
[
i
]
worklist
[
index
]
)
)
{
index
=
i
;
}
}
jit
:
:
IonCompileTask
*
task
=
worklist
[
index
]
;
worklist
.
erase
(
&
worklist
[
index
]
)
;
return
task
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetParseTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
parseWorklist
(
lock
)
.
empty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_PARSE
maxParseThreads
(
)
true
lock
)
)
{
return
nullptr
;
}
auto
&
worklist
=
parseWorklist
(
lock
)
;
UniquePtr
<
ParseTask
>
task
=
std
:
:
move
(
worklist
.
back
(
)
)
;
worklist
.
popBack
(
)
;
return
task
.
release
(
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
compressionWorklist
(
lock
)
.
empty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_COMPRESS
maxCompressionThreads
(
)
lock
)
)
{
return
nullptr
;
}
auto
&
worklist
=
compressionWorklist
(
lock
)
;
UniquePtr
<
SourceCompressionTask
>
task
=
std
:
:
move
(
worklist
.
back
(
)
)
;
worklist
.
popBack
(
)
;
return
task
.
release
(
)
;
}
void
GlobalHelperThreadState
:
:
startHandlingCompressionTasks
(
ScheduleCompressionTask
schedule
JSRuntime
*
maybeRuntime
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
(
schedule
=
=
ScheduleCompressionTask
:
:
GC
)
=
=
(
maybeRuntime
!
=
nullptr
)
)
;
auto
&
pending
=
compressionPendingList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
pending
.
length
(
)
;
i
+
+
)
{
UniquePtr
<
SourceCompressionTask
>
&
task
=
pending
[
i
]
;
if
(
schedule
=
=
ScheduleCompressionTask
:
:
API
|
|
(
task
-
>
runtimeMatches
(
maybeRuntime
)
&
&
task
-
>
shouldStart
(
)
)
)
{
Unused
<
<
submitTask
(
std
:
:
move
(
task
)
lock
)
;
remove
(
pending
&
i
)
;
}
}
}
bool
GlobalHelperThreadState
:
:
submitTask
(
UniquePtr
<
SourceCompressionTask
>
task
const
AutoLockHelperThreadState
&
locked
)
{
if
(
!
compressionWorklist
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
dispatch
(
locked
)
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
GCParallelTask
*
task
const
AutoLockHelperThreadState
&
locked
)
{
gcParallelWorklist
(
locked
)
.
insertBack
(
task
)
;
dispatch
(
locked
)
;
return
true
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
gcParallelWorklist
(
lock
)
.
isEmpty
(
)
|
|
!
checkTaskThreadLimit
(
THREAD_TYPE_GCPARALLEL
maxGCParallelThreads
(
lock
)
lock
)
)
{
return
nullptr
;
}
return
gcParallelWorklist
(
lock
)
.
popFirst
(
)
;
}
static
void
LeaveParseTaskZone
(
JSRuntime
*
rt
ParseTask
*
task
)
{
if
(
task
-
>
parseGlobal
)
{
rt
-
>
clearUsedByHelperThread
(
task
-
>
parseGlobal
-
>
zoneFromAnyThread
(
)
)
;
}
rt
-
>
decParseTaskRef
(
)
;
}
ParseTask
*
GlobalHelperThreadState
:
:
removeFinishedParseTask
(
JSContext
*
cx
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
)
{
auto
task
=
static_cast
<
ParseTask
*
>
(
token
)
;
MOZ_RELEASE_ASSERT
(
task
-
>
runtime
=
=
cx
-
>
runtime
(
)
)
;
MOZ_RELEASE_ASSERT
(
task
-
>
kind
=
=
kind
)
;
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
parseFinishedList
(
lock
)
.
contains
(
task
)
)
;
task
-
>
remove
(
)
;
return
task
;
}
UniquePtr
<
ParseTask
>
GlobalHelperThreadState
:
:
finishParseTaskCommon
(
JSContext
*
cx
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
)
{
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
MOZ_ASSERT
(
cx
-
>
realm
(
)
)
;
Rooted
<
UniquePtr
<
ParseTask
>
>
parseTask
(
cx
removeFinishedParseTask
(
cx
kind
token
)
)
;
if
(
parseTask
-
>
options
.
useOffThreadParseGlobal
)
{
if
(
!
EnsureParserCreatedClasses
(
cx
kind
)
)
{
LeaveParseTaskZone
(
cx
-
>
runtime
(
)
parseTask
.
get
(
)
.
get
(
)
)
;
return
nullptr
;
}
mergeParseTaskRealm
(
cx
parseTask
.
get
(
)
.
get
(
)
cx
-
>
realm
(
)
)
;
for
(
auto
&
script
:
parseTask
-
>
scripts
)
{
cx
-
>
releaseCheck
(
script
)
;
}
if
(
kind
=
=
ParseTaskKind
:
:
Module
)
{
if
(
parseTask
-
>
scripts
.
length
(
)
>
0
)
{
MOZ_ASSERT
(
parseTask
-
>
scripts
[
0
]
-
>
isModule
(
)
)
;
parseTask
-
>
scripts
[
0
]
-
>
module
(
)
-
>
fixEnvironmentsAfterRealmMerge
(
)
;
}
}
for
(
auto
&
sourceObject
:
parseTask
-
>
sourceObjects
)
{
RootedScriptSourceObject
sso
(
cx
sourceObject
)
;
if
(
!
ScriptSourceObject
:
:
initFromOptions
(
cx
sso
parseTask
-
>
options
)
)
{
return
nullptr
;
}
if
(
!
sso
-
>
source
(
)
-
>
tryCompressOffThread
(
cx
)
)
{
return
nullptr
;
}
}
}
else
{
MOZ_ASSERT
(
parseTask
-
>
scripts
.
length
(
)
=
=
0
)
;
MOZ_ASSERT
(
parseTask
-
>
sourceObjects
.
length
(
)
=
=
0
)
;
}
if
(
parseTask
-
>
outOfMemory
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
for
(
size_t
i
=
0
;
i
<
parseTask
-
>
errors
.
length
(
)
;
i
+
+
)
{
parseTask
-
>
errors
[
i
]
-
>
throwError
(
cx
)
;
}
if
(
parseTask
-
>
overRecursed
)
{
ReportOverRecursed
(
cx
)
;
}
if
(
cx
-
>
isExceptionPending
(
)
)
{
return
nullptr
;
}
if
(
parseTask
-
>
options
.
useOffThreadParseGlobal
)
{
if
(
coverage
:
:
IsLCovEnabled
(
)
)
{
if
(
!
generateLCovSources
(
cx
parseTask
.
get
(
)
.
get
(
)
)
)
{
return
nullptr
;
}
}
}
return
std
:
:
move
(
parseTask
.
get
(
)
)
;
}
bool
GlobalHelperThreadState
:
:
generateLCovSources
(
JSContext
*
cx
ParseTask
*
parseTask
)
{
Rooted
<
GCVector
<
JSScript
*
>
>
workList
(
cx
GCVector
<
JSScript
*
>
(
cx
)
)
;
if
(
!
workList
.
appendAll
(
parseTask
-
>
scripts
)
)
{
return
false
;
}
RootedScript
elem
(
cx
)
;
while
(
!
workList
.
empty
(
)
)
{
elem
=
workList
.
popCopy
(
)
;
if
(
!
coverage
:
:
InitScriptCoverage
(
cx
elem
)
)
{
return
false
;
}
for
(
JS
:
:
GCCellPtr
gcThing
:
elem
-
>
gcthings
(
)
)
{
if
(
!
gcThing
.
is
<
JSObject
>
(
)
)
{
continue
;
}
JSObject
*
obj
=
&
gcThing
.
as
<
JSObject
>
(
)
;
if
(
!
obj
-
>
is
<
JSFunction
>
(
)
)
{
continue
;
}
JSFunction
*
fun
=
&
obj
-
>
as
<
JSFunction
>
(
)
;
if
(
!
fun
-
>
isInterpreted
(
)
)
{
continue
;
}
MOZ_ASSERT
(
fun
-
>
hasBytecode
(
)
"
No
lazy
scripts
exist
when
collecting
coverage
"
)
;
if
(
!
workList
.
append
(
fun
-
>
nonLazyScript
(
)
)
)
{
return
false
;
}
}
}
return
true
;
}
JSScript
*
GlobalHelperThreadState
:
:
finishSingleParseTask
(
JSContext
*
cx
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
StartEncoding
startEncoding
)
{
Rooted
<
UniquePtr
<
ParseTask
>
>
parseTask
(
cx
finishParseTaskCommon
(
cx
kind
token
)
)
;
if
(
!
parseTask
)
{
return
nullptr
;
}
JS
:
:
RootedScript
script
(
cx
)
;
if
(
parseTask
-
>
options
.
useOffThreadParseGlobal
)
{
if
(
parseTask
-
>
scripts
.
length
(
)
>
0
)
{
script
=
parseTask
-
>
scripts
[
0
]
;
}
if
(
!
script
)
{
MOZ_ASSERT
(
false
"
Expected
script
"
)
;
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
if
(
kind
=
=
ParseTaskKind
:
:
Module
)
{
MOZ_ASSERT
(
script
-
>
isModule
(
)
)
;
RootedModuleObject
module
(
cx
script
-
>
module
(
)
)
;
if
(
!
ModuleObject
:
:
Freeze
(
cx
module
)
)
{
return
nullptr
;
}
}
if
(
!
parseTask
-
>
options
.
hideScriptFromDebugger
)
{
DebugAPI
:
:
onNewScript
(
cx
script
)
;
}
}
else
{
MOZ_ASSERT
(
parseTask
-
>
compilationInfo_
.
get
(
)
|
|
parseTask
-
>
compilationInfos_
.
get
(
)
)
;
if
(
!
parseTask
-
>
instantiateStencils
(
cx
)
)
{
return
nullptr
;
}
MOZ_RELEASE_ASSERT
(
parseTask
-
>
scripts
.
length
(
)
=
=
1
)
;
script
=
parseTask
-
>
scripts
[
0
]
;
}
if
(
startEncoding
=
=
StartEncoding
:
:
Yes
)
{
if
(
parseTask
-
>
options
.
useStencilXDR
)
{
UniquePtr
<
XDRIncrementalEncoderBase
>
xdrEncoder
;
if
(
parseTask
-
>
compilationInfo_
.
get
(
)
)
{
auto
compilationInfo
=
parseTask
-
>
compilationInfo_
.
get
(
)
;
if
(
!
compilationInfo
-
>
input
.
source
(
)
-
>
xdrEncodeInitialStencil
(
cx
*
compilationInfo
xdrEncoder
)
)
{
return
nullptr
;
}
}
else
{
auto
compilationInfos
=
parseTask
-
>
compilationInfos_
.
get
(
)
;
if
(
!
compilationInfos
-
>
initial
.
input
.
source
(
)
-
>
xdrEncodeStencils
(
cx
*
compilationInfos
xdrEncoder
)
)
{
return
nullptr
;
}
}
script
-
>
scriptSource
(
)
-
>
setIncrementalEncoder
(
xdrEncoder
.
release
(
)
)
;
}
else
{
if
(
!
script
-
>
scriptSource
(
)
-
>
xdrEncodeTopLevel
(
cx
script
)
)
{
return
nullptr
;
}
}
}
return
script
;
}
bool
GlobalHelperThreadState
:
:
finishMultiParseTask
(
JSContext
*
cx
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
MutableHandle
<
ScriptVector
>
scripts
)
{
Rooted
<
UniquePtr
<
ParseTask
>
>
parseTask
(
cx
finishParseTaskCommon
(
cx
kind
token
)
)
;
if
(
!
parseTask
)
{
return
false
;
}
MOZ_ASSERT
(
parseTask
-
>
kind
=
=
ParseTaskKind
:
:
MultiScriptsDecode
)
;
auto
task
=
static_cast
<
MultiScriptsDecodeTask
*
>
(
parseTask
.
get
(
)
.
get
(
)
)
;
size_t
expectedLength
=
task
-
>
sources
-
>
length
(
)
;
if
(
!
scripts
.
reserve
(
parseTask
-
>
scripts
.
length
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
auto
&
script
:
parseTask
-
>
scripts
)
{
scripts
.
infallibleAppend
(
script
)
;
}
if
(
scripts
.
length
(
)
!
=
expectedLength
)
{
MOZ_ASSERT
(
false
"
Expected
more
scripts
"
)
;
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
parseTask
-
>
options
.
hideScriptFromDebugger
)
{
JS
:
:
RootedScript
rooted
(
cx
)
;
for
(
auto
&
script
:
scripts
)
{
MOZ_ASSERT
(
script
-
>
isGlobalCode
(
)
)
;
rooted
=
script
;
DebugAPI
:
:
onNewScript
(
cx
rooted
)
;
}
}
return
true
;
}
JSScript
*
GlobalHelperThreadState
:
:
finishScriptParseTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
StartEncoding
startEncoding
)
{
JSScript
*
script
=
finishSingleParseTask
(
cx
ParseTaskKind
:
:
Script
token
startEncoding
)
;
MOZ_ASSERT_IF
(
script
script
-
>
isGlobalCode
(
)
)
;
return
script
;
}
JSScript
*
GlobalHelperThreadState
:
:
finishScriptDecodeTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
)
{
JSScript
*
script
=
finishSingleParseTask
(
cx
ParseTaskKind
:
:
ScriptDecode
token
)
;
MOZ_ASSERT_IF
(
script
script
-
>
isGlobalCode
(
)
)
;
return
script
;
}
bool
GlobalHelperThreadState
:
:
finishMultiScriptsDecodeTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
MutableHandle
<
ScriptVector
>
scripts
)
{
return
finishMultiParseTask
(
cx
ParseTaskKind
:
:
MultiScriptsDecode
token
scripts
)
;
}
JSObject
*
GlobalHelperThreadState
:
:
finishModuleParseTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
)
{
JSScript
*
script
=
finishSingleParseTask
(
cx
ParseTaskKind
:
:
Module
token
)
;
if
(
!
script
)
{
return
nullptr
;
}
return
script
-
>
module
(
)
;
}
void
GlobalHelperThreadState
:
:
cancelParseTask
(
JSRuntime
*
rt
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
)
{
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
token
)
;
ParseTask
*
task
=
static_cast
<
ParseTask
*
>
(
token
)
;
GlobalHelperThreadState
:
:
ParseTaskVector
&
waitingOnGC
=
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
waitingOnGC
.
length
(
)
;
i
+
+
)
{
if
(
task
=
=
waitingOnGC
[
i
]
)
{
MOZ_ASSERT
(
task
-
>
kind
=
=
kind
)
;
MOZ_ASSERT
(
task
-
>
runtimeMatches
(
rt
)
)
;
task
-
>
parseGlobal
-
>
zoneFromAnyThread
(
)
-
>
clearUsedByHelperThread
(
)
;
HelperThreadState
(
)
.
remove
(
waitingOnGC
&
i
)
;
return
;
}
}
GlobalHelperThreadState
:
:
ParseTaskVector
&
worklist
=
HelperThreadState
(
)
.
parseWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
if
(
task
=
=
worklist
[
i
]
)
{
MOZ_ASSERT
(
task
-
>
kind
=
=
kind
)
;
MOZ_ASSERT
(
task
-
>
runtimeMatches
(
rt
)
)
;
LeaveParseTaskZone
(
rt
task
)
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
return
;
}
}
while
(
true
)
{
bool
foundTask
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
ParseTask
>
(
)
&
&
helper
-
>
as
<
ParseTask
>
(
)
=
=
task
)
{
MOZ_ASSERT
(
helper
-
>
as
<
ParseTask
>
(
)
-
>
kind
=
=
kind
)
;
MOZ_ASSERT
(
helper
-
>
as
<
ParseTask
>
(
)
-
>
runtimeMatches
(
rt
)
)
;
foundTask
=
true
;
break
;
}
}
if
(
!
foundTask
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
auto
&
finished
=
HelperThreadState
(
)
.
parseFinishedList
(
lock
)
;
for
(
auto
*
t
:
finished
)
{
if
(
task
=
=
t
)
{
MOZ_ASSERT
(
task
-
>
kind
=
=
kind
)
;
MOZ_ASSERT
(
task
-
>
runtimeMatches
(
rt
)
)
;
task
-
>
remove
(
)
;
HelperThreadState
(
)
.
destroyParseTask
(
rt
task
)
;
return
;
}
}
}
void
GlobalHelperThreadState
:
:
destroyParseTask
(
JSRuntime
*
rt
ParseTask
*
parseTask
)
{
MOZ_ASSERT
(
!
parseTask
-
>
isInList
(
)
)
;
LeaveParseTaskZone
(
rt
parseTask
)
;
js_delete
(
parseTask
)
;
}
void
GlobalHelperThreadState
:
:
mergeParseTaskRealm
(
JSContext
*
cx
ParseTask
*
parseTask
Realm
*
dest
)
{
MOZ_ASSERT
(
parseTask
-
>
parseGlobal
)
;
JS
:
:
AutoAssertNoGC
nogc
(
cx
)
;
LeaveParseTaskZone
(
cx
-
>
runtime
(
)
parseTask
)
;
gc
:
:
MergeRealms
(
parseTask
-
>
parseGlobal
-
>
as
<
GlobalObject
>
(
)
.
realm
(
)
dest
)
;
}
HelperThread
:
:
HelperThread
(
)
:
thread
(
Thread
:
:
Options
(
)
.
setStackSize
(
HELPER_STACK_SIZE
)
)
{
}
bool
HelperThread
:
:
init
(
)
{
return
thread
.
init
(
HelperThread
:
:
ThreadMain
this
)
;
}
void
HelperThread
:
:
setTerminate
(
const
AutoLockHelperThreadState
&
lock
)
{
terminate
=
true
;
}
void
HelperThread
:
:
join
(
)
{
thread
.
join
(
)
;
}
void
HelperThread
:
:
ensureRegisteredWithProfiler
(
)
{
if
(
profilingStack
)
{
return
;
}
JS
:
:
RegisterThreadCallback
callback
=
HelperThreadState
(
)
.
registerThread
;
if
(
callback
)
{
profilingStack
=
callback
(
"
JS
Helper
"
reinterpret_cast
<
void
*
>
(
GetNativeStackBase
(
)
)
)
;
}
}
void
HelperThread
:
:
unregisterWithProfilerIfNeeded
(
)
{
if
(
!
profilingStack
)
{
return
;
}
JS
:
:
UnregisterThreadCallback
callback
=
HelperThreadState
(
)
.
unregisterThread
;
if
(
callback
)
{
callback
(
)
;
profilingStack
=
nullptr
;
}
}
void
HelperThread
:
:
ThreadMain
(
void
*
arg
)
{
ThisThread
:
:
SetName
(
"
JS
Helper
"
)
;
auto
helper
=
static_cast
<
HelperThread
*
>
(
arg
)
;
helper
-
>
ensureRegisteredWithProfiler
(
)
;
helper
-
>
threadLoop
(
)
;
helper
-
>
unregisterWithProfilerIfNeeded
(
)
;
}
bool
JSContext
:
:
addPendingCompileError
(
js
:
:
CompileError
*
*
error
)
{
auto
errorPtr
=
make_unique
<
js
:
:
CompileError
>
(
)
;
if
(
!
errorPtr
)
{
return
false
;
}
if
(
!
parseTask_
-
>
errors
.
append
(
std
:
:
move
(
errorPtr
)
)
)
{
ReportOutOfMemory
(
this
)
;
return
false
;
}
*
error
=
parseTask_
-
>
errors
.
back
(
)
.
get
(
)
;
return
true
;
}
bool
JSContext
:
:
isCompileErrorPending
(
)
const
{
return
parseTask_
-
>
errors
.
length
(
)
>
0
;
}
void
JSContext
:
:
addPendingOverRecursed
(
)
{
if
(
parseTask_
)
{
parseTask_
-
>
overRecursed
=
true
;
}
}
void
JSContext
:
:
addPendingOutOfMemory
(
)
{
if
(
parseTask_
)
{
parseTask_
-
>
outOfMemory
=
true
;
}
}
bool
js
:
:
EnqueueOffThreadCompression
(
JSContext
*
cx
UniquePtr
<
SourceCompressionTask
>
task
)
{
AutoLockHelperThreadState
lock
;
auto
&
pending
=
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
;
if
(
!
pending
.
append
(
std
:
:
move
(
task
)
)
)
{
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
ReportOutOfMemory
(
cx
)
;
}
return
false
;
}
return
true
;
}
void
js
:
:
StartHandlingCompressionsOnGC
(
JSRuntime
*
runtime
)
{
AutoLockHelperThreadState
lock
;
HelperThreadState
(
)
.
startHandlingCompressionTasks
(
GlobalHelperThreadState
:
:
ScheduleCompressionTask
:
:
GC
runtime
lock
)
;
}
template
<
typename
T
>
static
void
ClearCompressionTaskList
(
T
&
list
JSRuntime
*
runtime
)
{
for
(
size_t
i
=
0
;
i
<
list
.
length
(
)
;
i
+
+
)
{
if
(
list
[
i
]
-
>
runtimeMatches
(
runtime
)
)
{
HelperThreadState
(
)
.
remove
(
list
&
i
)
;
}
}
}
void
js
:
:
CancelOffThreadCompressions
(
JSRuntime
*
runtime
)
{
AutoLockHelperThreadState
lock
;
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
runtime
)
;
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionWorklist
(
lock
)
runtime
)
;
while
(
true
)
{
bool
inProgress
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
SourceCompressionTask
>
(
)
)
{
continue
;
}
if
(
helper
-
>
as
<
SourceCompressionTask
>
(
)
-
>
runtimeMatches
(
runtime
)
)
{
inProgress
=
true
;
}
}
if
(
!
inProgress
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionFinishedList
(
lock
)
runtime
)
;
}
void
js
:
:
AttachFinishedCompressions
(
JSRuntime
*
runtime
AutoLockHelperThreadState
&
lock
)
{
auto
&
finished
=
HelperThreadState
(
)
.
compressionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
if
(
finished
[
i
]
-
>
runtimeMatches
(
runtime
)
)
{
UniquePtr
<
SourceCompressionTask
>
compressionTask
(
std
:
:
move
(
finished
[
i
]
)
)
;
HelperThreadState
(
)
.
remove
(
finished
&
i
)
;
compressionTask
-
>
complete
(
)
;
}
}
}
void
js
:
:
SweepPendingCompressions
(
AutoLockHelperThreadState
&
lock
)
{
auto
&
pending
=
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
pending
.
length
(
)
;
i
+
+
)
{
if
(
pending
[
i
]
-
>
shouldCancel
(
)
)
{
HelperThreadState
(
)
.
remove
(
pending
&
i
)
;
}
}
}
void
js
:
:
RunPendingSourceCompressions
(
JSRuntime
*
runtime
)
{
AutoLockHelperThreadState
lock
;
if
(
HelperThreadState
(
)
.
threads
(
lock
)
.
empty
(
)
)
{
return
;
}
HelperThreadState
(
)
.
startHandlingCompressionTasks
(
GlobalHelperThreadState
:
:
ScheduleCompressionTask
:
:
API
nullptr
lock
)
;
while
(
!
HelperThreadState
(
)
.
compressionWorklist
(
lock
)
.
empty
(
)
)
{
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
HelperThreadState
(
)
.
waitForAllThreadsLocked
(
lock
)
;
AttachFinishedCompressions
(
runtime
lock
)
;
}
void
PromiseHelperTask
:
:
executeAndResolveAndDestroy
(
JSContext
*
cx
)
{
execute
(
)
;
run
(
cx
JS
:
:
Dispatchable
:
:
NotShuttingDown
)
;
}
void
PromiseHelperTask
:
:
runHelperThreadTask
(
AutoLockHelperThreadState
&
lock
)
{
{
AutoUnlockHelperThreadState
unlock
(
lock
)
;
execute
(
)
;
}
dispatchResolveAndDestroy
(
lock
)
;
}
bool
js
:
:
StartOffThreadPromiseHelperTask
(
JSContext
*
cx
UniquePtr
<
PromiseHelperTask
>
task
)
{
if
(
!
CanUseExtraThreads
(
)
)
{
task
.
release
(
)
-
>
executeAndResolveAndDestroy
(
cx
)
;
return
true
;
}
if
(
!
HelperThreadState
(
)
.
submitTask
(
task
.
get
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
Unused
<
<
task
.
release
(
)
;
return
true
;
}
bool
js
:
:
StartOffThreadPromiseHelperTask
(
PromiseHelperTask
*
task
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
return
HelperThreadState
(
)
.
submitTask
(
task
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
PromiseHelperTask
*
task
)
{
AutoLockHelperThreadState
lock
;
if
(
!
promiseHelperTasks
(
lock
)
.
append
(
task
)
)
{
return
false
;
}
dispatch
(
lock
)
;
return
true
;
}
void
GlobalHelperThreadState
:
:
trace
(
JSTracer
*
trc
)
{
AutoLockHelperThreadState
lock
;
#
ifdef
DEBUG
GCMarker
*
marker
=
nullptr
;
if
(
trc
-
>
isMarkingTracer
(
)
)
{
marker
=
GCMarker
:
:
fromTracer
(
trc
)
;
marker
-
>
setCheckAtomMarking
(
false
)
;
}
auto
reenableAtomMarkingCheck
=
mozilla
:
:
MakeScopeExit
(
[
marker
]
{
if
(
marker
)
{
marker
-
>
setCheckAtomMarking
(
true
)
;
}
}
)
;
#
endif
for
(
auto
task
:
ionWorklist
(
lock
)
)
{
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadWrite
(
)
;
task
-
>
trace
(
trc
)
;
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadOnly
(
)
;
}
for
(
auto
task
:
ionFinishedList
(
lock
)
)
{
task
-
>
trace
(
trc
)
;
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
)
{
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
-
>
trace
(
trc
)
;
}
}
JSRuntime
*
rt
=
trc
-
>
runtime
(
)
;
if
(
auto
*
jitRuntime
=
rt
-
>
jitRuntime
(
)
)
{
jit
:
:
IonCompileTask
*
task
=
jitRuntime
-
>
ionLazyLinkList
(
rt
)
.
getFirst
(
)
;
while
(
task
)
{
task
-
>
trace
(
trc
)
;
task
=
task
-
>
getNext
(
)
;
}
}
for
(
auto
&
parseTask
:
parseWorklist_
)
{
parseTask
-
>
trace
(
trc
)
;
}
for
(
auto
parseTask
:
parseFinishedList_
)
{
parseTask
-
>
trace
(
trc
)
;
}
for
(
auto
&
parseTask
:
parseWaitingOnGC_
)
{
parseTask
-
>
trace
(
trc
)
;
}
}
const
HelperThread
:
:
Selector
HelperThread
:
:
selectors
[
]
=
{
&
GlobalHelperThreadState
:
:
maybeGetGCParallelTask
&
GlobalHelperThreadState
:
:
maybeGetIonCompileTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier1CompileTask
&
GlobalHelperThreadState
:
:
maybeGetPromiseHelperTask
&
GlobalHelperThreadState
:
:
maybeGetParseTask
&
GlobalHelperThreadState
:
:
maybeGetCompressionTask
&
GlobalHelperThreadState
:
:
maybeGetIonFreeTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier2CompileTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier2GeneratorTask
}
;
HelperThread
:
:
AutoProfilerLabel
:
:
AutoProfilerLabel
(
HelperThread
*
helperThread
const
char
*
label
JS
:
:
ProfilingCategoryPair
categoryPair
)
:
profilingStack
(
helperThread
-
>
profilingStack
)
{
if
(
profilingStack
)
{
profilingStack
-
>
pushLabelFrame
(
label
nullptr
this
categoryPair
)
;
}
}
HelperThread
:
:
AutoProfilerLabel
:
:
~
AutoProfilerLabel
(
)
{
if
(
profilingStack
)
{
profilingStack
-
>
pop
(
)
;
}
}
void
HelperThread
:
:
threadLoop
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
AutoLockHelperThreadState
lock
;
while
(
!
terminate
)
{
HelperThreadTask
*
task
=
findHighestPriorityTask
(
lock
)
;
if
(
!
task
)
{
AUTO_PROFILER_LABEL
(
"
HelperThread
:
:
threadLoop
:
:
wait
"
IDLE
)
;
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
PRODUCER
)
;
continue
;
}
HelperThreadState
(
)
.
runTaskLocked
(
task
lock
)
;
}
}
HelperThreadTask
*
HelperThread
:
:
findHighestPriorityTask
(
const
AutoLockHelperThreadState
&
locked
)
{
for
(
const
auto
&
selector
:
selectors
)
{
if
(
auto
*
task
=
(
HelperThreadState
(
)
.
*
(
selector
)
)
(
locked
)
)
{
return
task
;
}
}
return
nullptr
;
}
void
GlobalHelperThreadState
:
:
runTaskLocked
(
HelperThreadTask
*
task
AutoLockHelperThreadState
&
locked
)
{
JS
:
:
AutoSuppressGCAnalysis
nogc
;
HelperThreadState
(
)
.
helperTasks
(
locked
)
.
infallibleEmplaceBack
(
task
)
;
ThreadType
threadType
=
task
-
>
threadType
(
)
;
js
:
:
oom
:
:
SetThreadType
(
threadType
)
;
runningTaskCount
[
threadType
]
+
+
;
totalCountRunningTasks
+
+
;
task
-
>
runHelperThreadTask
(
locked
)
;
HelperThreadState
(
)
.
helperTasks
(
locked
)
.
eraseIfEqual
(
task
)
;
totalCountRunningTasks
-
-
;
runningTaskCount
[
threadType
]
-
-
;
js
:
:
oom
:
:
SetThreadType
(
js
:
:
THREAD_TYPE_NONE
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
