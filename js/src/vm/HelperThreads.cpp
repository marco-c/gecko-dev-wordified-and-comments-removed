#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
mozilla
/
ReverseIterator
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
algorithm
>
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
jit
/
Ion
.
h
"
#
include
"
jit
/
IonCompileTask
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
JitScript
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
experimental
/
CompileScript
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
#
include
"
js
/
HelperThreadAPI
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
CpuCount
.
h
"
#
include
"
vm
/
ErrorReporting
.
h
"
#
include
"
vm
/
HelperThreadState
.
h
"
#
include
"
vm
/
InternalThreadPool
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
wasm
/
WasmGenerator
.
h
"
using
namespace
js
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
TimeStamp
;
using
mozilla
:
:
Utf8Unit
;
using
JS
:
:
DispatchReason
;
namespace
js
{
Mutex
gHelperThreadLock
(
mutexid
:
:
GlobalHelperThreadState
)
;
GlobalHelperThreadState
*
gHelperThreadState
=
nullptr
;
}
bool
js
:
:
CreateHelperThreadsState
(
)
{
MOZ_ASSERT
(
!
gHelperThreadState
)
;
gHelperThreadState
=
js_new
<
GlobalHelperThreadState
>
(
)
;
return
gHelperThreadState
;
}
void
js
:
:
DestroyHelperThreadsState
(
)
{
AutoLockHelperThreadState
lock
;
if
(
!
gHelperThreadState
)
{
return
;
}
gHelperThreadState
-
>
finish
(
lock
)
;
js_delete
(
gHelperThreadState
)
;
gHelperThreadState
=
nullptr
;
}
bool
js
:
:
EnsureHelperThreadsInitialized
(
)
{
MOZ_ASSERT
(
gHelperThreadState
)
;
return
gHelperThreadState
-
>
ensureInitialized
(
)
;
}
static
size_t
ClampDefaultCPUCount
(
size_t
cpuCount
)
{
return
std
:
:
min
<
size_t
>
(
cpuCount
8
)
;
}
static
size_t
ThreadCountForCPUCount
(
size_t
cpuCount
)
{
return
std
:
:
max
<
size_t
>
(
cpuCount
2
)
;
}
bool
js
:
:
SetFakeCPUCount
(
size_t
count
)
{
HelperThreadState
(
)
.
setCpuCount
(
count
)
;
return
true
;
}
void
GlobalHelperThreadState
:
:
setCpuCount
(
size_t
count
)
{
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
!
isInitialized
(
lock
)
)
;
MOZ_ASSERT
(
!
dispatchTaskCallback
)
;
cpuCount
=
count
;
threadCount
=
ThreadCountForCPUCount
(
count
)
;
}
size_t
js
:
:
GetHelperThreadCount
(
)
{
return
HelperThreadState
(
)
.
threadCount
;
}
size_t
js
:
:
GetHelperThreadCPUCount
(
)
{
return
HelperThreadState
(
)
.
cpuCount
;
}
size_t
js
:
:
GetMaxWasmCompilationThreads
(
)
{
return
HelperThreadState
(
)
.
maxWasmCompilationThreads
(
)
;
}
void
JS
:
:
SetProfilingThreadCallbacks
(
JS
:
:
RegisterThreadCallback
registerThread
JS
:
:
UnregisterThreadCallback
unregisterThread
)
{
HelperThreadState
(
)
.
registerThread
=
registerThread
;
HelperThreadState
(
)
.
unregisterThread
=
unregisterThread
;
}
JS_PUBLIC_API
MOZ_NEVER_INLINE
void
JS
:
:
SetHelperThreadTaskCallback
(
HelperThreadTaskCallback
callback
size_t
threadCount
size_t
stackSize
)
{
AutoLockHelperThreadState
lock
;
HelperThreadState
(
)
.
setDispatchTaskCallback
(
callback
threadCount
stackSize
lock
)
;
}
void
GlobalHelperThreadState
:
:
setDispatchTaskCallback
(
JS
:
:
HelperThreadTaskCallback
callback
size_t
threadCount
size_t
stackSize
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
!
isInitialized
(
lock
)
)
;
MOZ_ASSERT
(
!
dispatchTaskCallback
)
;
MOZ_ASSERT
(
threadCount
!
=
0
)
;
MOZ_ASSERT
(
stackSize
>
=
16
*
1024
)
;
dispatchTaskCallback
=
callback
;
this
-
>
threadCount
=
threadCount
;
this
-
>
stackQuota
=
JS
:
:
ThreadStackQuotaForSize
(
stackSize
)
;
}
bool
js
:
:
StartOffThreadWasmCompile
(
wasm
:
:
CompileTask
*
task
wasm
:
:
CompileMode
mode
)
{
return
HelperThreadState
(
)
.
submitTask
(
task
mode
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
wasm
:
:
CompileTask
*
task
wasm
:
:
CompileMode
mode
)
{
AutoLockHelperThreadState
lock
;
if
(
!
wasmWorklist
(
lock
mode
)
.
pushBack
(
task
)
)
{
return
false
;
}
dispatch
(
DispatchReason
:
:
NewTask
lock
)
;
return
true
;
}
size_t
js
:
:
RemovePendingWasmCompileTasks
(
const
wasm
:
:
CompileTaskState
&
taskState
wasm
:
:
CompileMode
mode
const
AutoLockHelperThreadState
&
lock
)
{
wasm
:
:
CompileTaskPtrFifo
&
worklist
=
HelperThreadState
(
)
.
wasmWorklist
(
lock
mode
)
;
return
worklist
.
eraseIf
(
[
&
taskState
]
(
wasm
:
:
CompileTask
*
task
)
{
return
&
task
-
>
state
=
=
&
taskState
;
}
)
;
}
void
js
:
:
StartOffThreadWasmTier2Generator
(
wasm
:
:
UniqueTier2GeneratorTask
task
)
{
(
void
)
HelperThreadState
(
)
.
submitTask
(
std
:
:
move
(
task
)
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
wasm
:
:
UniqueTier2GeneratorTask
task
)
{
AutoLockHelperThreadState
lock
;
MOZ_ASSERT
(
isInitialized
(
lock
)
)
;
if
(
!
wasmTier2GeneratorWorklist
(
lock
)
.
append
(
task
.
get
(
)
)
)
{
return
false
;
}
(
void
)
task
.
release
(
)
;
dispatch
(
DispatchReason
:
:
NewTask
lock
)
;
return
true
;
}
static
void
CancelOffThreadWasmTier2GeneratorLocked
(
AutoLockHelperThreadState
&
lock
)
{
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
;
}
{
wasm
:
:
Tier2GeneratorTaskPtrVector
&
worklist
=
HelperThreadState
(
)
.
wasmTier2GeneratorWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
wasm
:
:
Tier2GeneratorTask
*
task
=
worklist
[
i
]
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
js_delete
(
task
)
;
}
}
static_assert
(
GlobalHelperThreadState
:
:
MaxTier2GeneratorTasks
=
=
1
"
code
must
be
generalized
"
)
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
wasm
:
:
Tier2GeneratorTask
>
(
)
)
{
helper
-
>
as
<
wasm
:
:
Tier2GeneratorTask
>
(
)
-
>
cancel
(
)
;
uint32_t
oldFinishedCount
=
HelperThreadState
(
)
.
wasmTier2GeneratorsFinished
(
lock
)
;
while
(
HelperThreadState
(
)
.
wasmTier2GeneratorsFinished
(
lock
)
=
=
oldFinishedCount
)
{
HelperThreadState
(
)
.
wait
(
lock
)
;
}
break
;
}
}
}
void
js
:
:
CancelOffThreadWasmTier2Generator
(
)
{
AutoLockHelperThreadState
lock
;
CancelOffThreadWasmTier2GeneratorLocked
(
lock
)
;
}
bool
js
:
:
StartOffThreadIonCompile
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
return
HelperThreadState
(
)
.
submitTask
(
task
lock
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
isInitialized
(
locked
)
)
;
if
(
!
ionWorklist
(
locked
)
.
append
(
task
)
)
{
return
false
;
}
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadOnly
(
)
;
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
return
true
;
}
bool
js
:
:
AutoStartIonFreeTask
:
:
addIonCompileToFreeTaskBatch
(
jit
:
:
IonCompileTask
*
task
)
{
return
jitRuntime_
-
>
addIonCompileToFreeTaskBatch
(
task
)
;
}
js
:
:
AutoStartIonFreeTask
:
:
~
AutoStartIonFreeTask
(
)
{
jitRuntime_
-
>
maybeStartIonFreeTask
(
force_
)
;
}
void
jit
:
:
JitRuntime
:
:
maybeStartIonFreeTask
(
bool
force
)
{
IonFreeCompileTasks
&
tasks
=
ionFreeTaskBatch_
.
ref
(
)
;
if
(
tasks
.
empty
(
)
)
{
return
;
}
if
(
!
force
)
{
constexpr
size_t
MinBatchSize
=
8
;
static_assert
(
IonFreeCompileTasks
:
:
InlineLength
>
=
MinBatchSize
"
Minimum
batch
size
shouldn
'
t
require
malloc
"
)
;
if
(
tasks
.
length
(
)
<
MinBatchSize
)
{
return
;
}
}
auto
freeTask
=
js
:
:
MakeUnique
<
jit
:
:
IonFreeTask
>
(
std
:
:
move
(
tasks
)
)
;
if
(
!
freeTask
)
{
MOZ_ASSERT
(
!
tasks
.
empty
(
)
"
shouldn
'
t
have
moved
tasks
on
OOM
"
)
;
jit
:
:
FreeIonCompileTasks
(
tasks
)
;
tasks
.
clearAndFree
(
)
;
return
;
}
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
submitTask
(
std
:
:
move
(
freeTask
)
lock
)
)
{
jit
:
:
FreeIonCompileTasks
(
freeTask
-
>
compileTasks
(
)
)
;
}
tasks
.
clearAndFree
(
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
UniquePtr
<
jit
:
:
IonFreeTask
>
&
&
task
const
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
isInitialized
(
locked
)
)
;
if
(
!
ionFreeList
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
return
true
;
}
void
js
:
:
FinishOffThreadIonCompile
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
.
append
(
task
)
)
{
oomUnsafe
.
crash
(
"
FinishOffThreadIonCompile
"
)
;
}
task
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
-
>
jitRuntime
(
)
-
>
numFinishedOffThreadTasksRef
(
lock
)
+
+
;
}
static
JSRuntime
*
GetSelectorRuntime
(
const
CompilationSelector
&
selector
)
{
struct
Matcher
{
JSRuntime
*
operator
(
)
(
JSScript
*
script
)
{
return
script
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
operator
(
)
(
Zone
*
zone
)
{
return
zone
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
;
}
JSRuntime
*
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
JitDataStructuresExist
(
const
CompilationSelector
&
selector
)
{
struct
Matcher
{
bool
operator
(
)
(
JSScript
*
script
)
{
return
!
!
script
-
>
zone
(
)
-
>
jitZone
(
)
;
}
bool
operator
(
)
(
Zone
*
zone
)
{
return
!
!
zone
-
>
jitZone
(
)
;
}
bool
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
-
>
hasJitRuntime
(
)
;
}
bool
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
-
>
hasJitRuntime
(
)
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
IonCompileTaskMatches
(
const
CompilationSelector
&
selector
jit
:
:
IonCompileTask
*
task
)
{
struct
TaskMatches
{
jit
:
:
IonCompileTask
*
task_
;
bool
operator
(
)
(
JSScript
*
script
)
{
return
script
=
=
task_
-
>
script
(
)
;
}
bool
operator
(
)
(
Zone
*
zone
)
{
return
zone
=
=
task_
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
;
}
bool
operator
(
)
(
JSRuntime
*
runtime
)
{
return
runtime
=
=
task_
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
;
}
bool
operator
(
)
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
=
=
task_
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
&
&
zbs
.
state
=
=
task_
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
-
>
gcState
(
)
;
}
}
;
return
selector
.
match
(
TaskMatches
{
task
}
)
;
}
static
bool
ShouldForceIonFreeTask
(
const
CompilationSelector
&
selector
)
{
struct
Matcher
{
bool
operator
(
)
(
JSScript
*
script
)
{
return
false
;
}
bool
operator
(
)
(
Zone
*
zone
)
{
return
true
;
}
bool
operator
(
)
(
ZonesInState
zbs
)
{
return
true
;
}
bool
operator
(
)
(
JSRuntime
*
runtime
)
{
return
true
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
void
js
:
:
CancelOffThreadIonCompile
(
const
CompilationSelector
&
selector
)
{
if
(
!
JitDataStructuresExist
(
selector
)
)
{
return
;
}
if
(
jit
:
:
IsPortableBaselineInterpreterEnabled
(
)
)
{
return
;
}
jit
:
:
JitRuntime
*
jitRuntime
=
GetSelectorRuntime
(
selector
)
-
>
jitRuntime
(
)
;
MOZ_ASSERT
(
jitRuntime
)
;
AutoStartIonFreeTask
freeTask
(
jitRuntime
ShouldForceIonFreeTask
(
selector
)
)
;
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
;
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
worklist
[
i
]
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
worklist
[
i
]
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadWrite
(
)
;
FinishOffThreadIonCompile
(
task
lock
)
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
}
}
bool
cancelled
;
do
{
cancelled
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
)
{
continue
;
}
jit
:
:
IonCompileTask
*
ionCompileTask
=
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
;
if
(
IonCompileTaskMatches
(
selector
ionCompileTask
)
)
{
ionCompileTask
-
>
mirGen
(
)
.
cancel
(
)
;
cancelled
=
true
;
}
}
if
(
cancelled
)
{
HelperThreadState
(
)
.
wait
(
lock
)
;
}
}
while
(
cancelled
)
;
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
finished
[
i
]
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
JSRuntime
*
rt
=
task
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
;
rt
-
>
jitRuntime
(
)
-
>
numFinishedOffThreadTasksRef
(
lock
)
-
-
;
jit
:
:
FinishOffThreadTask
(
rt
freeTask
task
)
;
HelperThreadState
(
)
.
remove
(
finished
&
i
)
;
}
}
}
JSRuntime
*
runtime
=
GetSelectorRuntime
(
selector
)
;
jit
:
:
IonCompileTask
*
task
=
runtime
-
>
jitRuntime
(
)
-
>
ionLazyLinkList
(
runtime
)
.
getFirst
(
)
;
while
(
task
)
{
jit
:
:
IonCompileTask
*
next
=
task
-
>
getNext
(
)
;
if
(
IonCompileTaskMatches
(
selector
task
)
)
{
jit
:
:
FinishOffThreadTask
(
runtime
freeTask
task
)
;
}
task
=
next
;
}
}
#
ifdef
DEBUG
bool
js
:
:
HasOffThreadIonCompile
(
Zone
*
zone
)
{
if
(
jit
:
:
IsPortableBaselineInterpreterEnabled
(
)
)
{
return
false
;
}
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
false
;
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
worklist
[
i
]
;
if
(
task
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
=
=
zone
)
{
return
true
;
}
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
)
{
continue
;
}
JSScript
*
script
=
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
-
>
script
(
)
;
if
(
script
-
>
zoneFromAnyThread
(
)
=
=
zone
)
{
return
true
;
}
}
GlobalHelperThreadState
:
:
IonCompileTaskVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonCompileTask
*
task
=
finished
[
i
]
;
if
(
task
-
>
script
(
)
-
>
zoneFromAnyThread
(
)
=
=
zone
)
{
return
true
;
}
}
JSRuntime
*
rt
=
zone
-
>
runtimeFromMainThread
(
)
;
if
(
rt
-
>
hasJitRuntime
(
)
)
{
jit
:
:
IonCompileTask
*
task
=
rt
-
>
jitRuntime
(
)
-
>
ionLazyLinkList
(
rt
)
.
getFirst
(
)
;
while
(
task
)
{
if
(
task
-
>
script
(
)
-
>
zone
(
)
=
=
zone
)
{
return
true
;
}
task
=
task
-
>
getNext
(
)
;
}
}
return
false
;
}
#
endif
void
js
:
:
StartOffThreadDelazification
(
JSContext
*
maybeCx
const
JS
:
:
ReadOnlyCompileOptions
&
options
const
frontend
:
:
CompilationStencil
&
stencil
)
{
auto
strategy
=
options
.
eagerDelazificationStrategy
(
)
;
if
(
strategy
=
=
JS
:
:
DelazificationOption
:
:
OnDemandOnly
|
|
strategy
=
=
JS
:
:
DelazificationOption
:
:
ParseEverythingEagerly
)
{
return
;
}
if
(
maybeCx
&
&
maybeCx
-
>
realm
(
)
-
>
collectCoverageForDebug
(
)
)
{
return
;
}
if
(
!
CanUseExtraThreads
(
)
)
{
return
;
}
JSRuntime
*
maybeRuntime
=
maybeCx
?
maybeCx
-
>
runtime
(
)
:
nullptr
;
UniquePtr
<
DelazifyTask
>
task
;
task
=
DelazifyTask
:
:
Create
(
maybeRuntime
options
stencil
)
;
if
(
!
task
)
{
return
;
}
if
(
!
task
-
>
done
(
)
)
{
AutoLockHelperThreadState
lock
;
HelperThreadState
(
)
.
submitTask
(
task
.
release
(
)
lock
)
;
}
}
UniquePtr
<
DelazifyTask
>
DelazifyTask
:
:
Create
(
JSRuntime
*
maybeRuntime
const
JS
:
:
ReadOnlyCompileOptions
&
options
const
frontend
:
:
CompilationStencil
&
stencil
)
{
UniquePtr
<
DelazifyTask
>
task
;
task
.
reset
(
js_new
<
DelazifyTask
>
(
maybeRuntime
options
.
prefableOptions
(
)
)
)
;
if
(
!
task
)
{
return
nullptr
;
}
if
(
!
task
-
>
init
(
options
stencil
)
)
{
return
nullptr
;
}
return
task
;
}
DelazifyTask
:
:
DelazifyTask
(
JSRuntime
*
maybeRuntime
const
JS
:
:
PrefableCompileOptions
&
initialPrefableOptions
)
:
maybeRuntime
(
maybeRuntime
)
delazificationCx
(
initialPrefableOptions
HelperThreadState
(
)
.
stackQuota
)
{
}
DelazifyTask
:
:
~
DelazifyTask
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
isInList
(
)
)
;
}
bool
DelazifyTask
:
:
init
(
const
JS
:
:
ReadOnlyCompileOptions
&
options
const
frontend
:
:
CompilationStencil
&
stencil
)
{
return
delazificationCx
.
init
(
options
stencil
)
;
}
size_t
DelazifyTask
:
:
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
delazificationCx
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
DelazifyTask
:
:
runHelperThreadTask
(
AutoLockHelperThreadState
&
lock
)
{
{
AutoUnlockHelperThreadState
unlock
(
lock
)
;
(
void
)
runTask
(
)
;
}
if
(
!
delazificationCx
.
done
(
)
)
{
HelperThreadState
(
)
.
submitTask
(
this
lock
)
;
}
else
{
UniquePtr
<
FreeDelazifyTask
>
freeTask
(
js_new
<
FreeDelazifyTask
>
(
this
)
)
;
if
(
freeTask
)
{
HelperThreadState
(
)
.
submitTask
(
std
:
:
move
(
freeTask
)
lock
)
;
}
}
}
bool
DelazifyTask
:
:
runTask
(
)
{
return
delazificationCx
.
delazify
(
)
;
}
bool
DelazifyTask
:
:
done
(
)
const
{
return
delazificationCx
.
done
(
)
;
}
void
FreeDelazifyTask
:
:
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
{
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
js_delete
(
task
)
;
task
=
nullptr
;
}
js_delete
(
this
)
;
}
static
void
CancelPendingDelazifyTask
(
JSRuntime
*
rt
AutoLockHelperThreadState
&
lock
)
{
auto
&
delazifyList
=
HelperThreadState
(
)
.
delazifyWorklist
(
lock
)
;
auto
end
=
delazifyList
.
end
(
)
;
for
(
auto
iter
=
delazifyList
.
begin
(
)
;
iter
!
=
end
;
)
{
DelazifyTask
*
task
=
*
iter
;
+
+
iter
;
if
(
task
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
{
task
-
>
removeFrom
(
delazifyList
)
;
js_delete
(
task
)
;
}
}
}
static
void
WaitUntilCancelledDelazifyTasks
(
JSRuntime
*
rt
AutoLockHelperThreadState
&
lock
)
{
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
;
}
while
(
true
)
{
CancelPendingDelazifyTask
(
rt
lock
)
;
bool
inProgress
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
DelazifyTask
>
(
)
&
&
helper
-
>
as
<
DelazifyTask
>
(
)
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
{
inProgress
=
true
;
break
;
}
}
if
(
!
inProgress
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
)
;
}
#
ifdef
DEBUG
for
(
DelazifyTask
*
task
:
HelperThreadState
(
)
.
delazifyWorklist
(
lock
)
)
{
MOZ_ASSERT
(
!
task
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
;
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
MOZ_ASSERT_IF
(
helper
-
>
is
<
DelazifyTask
>
(
)
!
helper
-
>
as
<
DelazifyTask
>
(
)
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
;
}
#
endif
}
static
void
WaitUntilEmptyFreeDelazifyTaskVector
(
AutoLockHelperThreadState
&
lock
)
{
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
;
}
while
(
true
)
{
bool
inProgress
=
false
;
auto
&
freeList
=
HelperThreadState
(
)
.
freeDelazifyTaskVector
(
lock
)
;
if
(
!
freeList
.
empty
(
)
)
{
inProgress
=
true
;
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
FreeDelazifyTask
>
(
)
)
{
inProgress
=
true
;
break
;
}
}
if
(
!
inProgress
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
)
;
}
}
void
js
:
:
CancelOffThreadDelazify
(
JSRuntime
*
runtime
)
{
AutoLockHelperThreadState
lock
;
WaitUntilCancelledDelazifyTasks
(
runtime
lock
)
;
WaitUntilEmptyFreeDelazifyTaskVector
(
lock
)
;
}
static
bool
HasAnyDelazifyTask
(
JSRuntime
*
rt
AutoLockHelperThreadState
&
lock
)
{
auto
&
delazifyList
=
HelperThreadState
(
)
.
delazifyWorklist
(
lock
)
;
for
(
auto
task
:
delazifyList
)
{
if
(
task
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
{
return
true
;
}
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
DelazifyTask
>
(
)
&
&
helper
-
>
as
<
DelazifyTask
>
(
)
-
>
runtimeMatchesOrNoRuntime
(
rt
)
)
{
return
true
;
}
}
return
false
;
}
void
js
:
:
WaitForAllDelazifyTasks
(
JSRuntime
*
rt
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
isInitialized
(
lock
)
)
{
return
;
}
while
(
true
)
{
if
(
!
HasAnyDelazifyTask
(
rt
lock
)
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
)
;
}
}
void
GlobalHelperThreadState
:
:
submitTask
(
DelazifyTask
*
task
const
AutoLockHelperThreadState
&
locked
)
{
delazifyWorklist
(
locked
)
.
insertBack
(
task
)
;
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
UniquePtr
<
FreeDelazifyTask
>
task
const
AutoLockHelperThreadState
&
locked
)
{
if
(
!
freeDelazifyTaskVector
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
ensureInitialized
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
MOZ_ASSERT
(
this
=
=
&
HelperThreadState
(
)
)
;
AutoLockHelperThreadState
lock
;
if
(
isInitialized
(
lock
)
)
{
return
true
;
}
for
(
size_t
&
i
:
runningTaskCount
)
{
i
=
0
;
}
useInternalThreadPool_
=
!
dispatchTaskCallback
;
if
(
useInternalThreadPool
(
lock
)
)
{
if
(
!
InternalThreadPool
:
:
Initialize
(
threadCount
lock
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
dispatchTaskCallback
)
;
if
(
!
ensureThreadCount
(
threadCount
lock
)
)
{
finishThreads
(
lock
)
;
return
false
;
}
MOZ_ASSERT
(
threadCount
!
=
0
)
;
isInitialized_
=
true
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
ensureThreadCount
(
size_t
count
AutoLockHelperThreadState
&
lock
)
{
if
(
!
helperTasks_
.
reserve
(
count
)
)
{
return
false
;
}
if
(
useInternalThreadPool
(
lock
)
)
{
InternalThreadPool
&
pool
=
InternalThreadPool
:
:
Get
(
)
;
if
(
pool
.
threadCount
(
lock
)
<
count
)
{
if
(
!
pool
.
ensureThreadCount
(
count
lock
)
)
{
return
false
;
}
threadCount
=
pool
.
threadCount
(
lock
)
;
}
}
return
true
;
}
GlobalHelperThreadState
:
:
GlobalHelperThreadState
(
)
:
cpuCount
(
0
)
threadCount
(
0
)
totalCountRunningTasks
(
0
)
registerThread
(
nullptr
)
unregisterThread
(
nullptr
)
wasmTier2GeneratorsFinished_
(
0
)
{
MOZ_ASSERT
(
!
gHelperThreadState
)
;
cpuCount
=
ClampDefaultCPUCount
(
GetCPUCount
(
)
)
;
threadCount
=
ThreadCountForCPUCount
(
cpuCount
)
;
MOZ_ASSERT
(
cpuCount
>
0
"
GetCPUCount
(
)
seems
broken
"
)
;
}
void
GlobalHelperThreadState
:
:
finish
(
AutoLockHelperThreadState
&
lock
)
{
if
(
!
isInitialized
(
lock
)
)
{
return
;
}
finishThreads
(
lock
)
;
auto
&
freeList
=
ionFreeList
(
lock
)
;
while
(
!
freeList
.
empty
(
)
)
{
UniquePtr
<
jit
:
:
IonFreeTask
>
task
=
std
:
:
move
(
freeList
.
back
(
)
)
;
freeList
.
popBack
(
)
;
jit
:
:
FreeIonCompileTasks
(
task
-
>
compileTasks
(
)
)
;
}
}
void
GlobalHelperThreadState
:
:
finishThreads
(
AutoLockHelperThreadState
&
lock
)
{
waitForAllTasksLocked
(
lock
)
;
terminating_
=
true
;
if
(
InternalThreadPool
:
:
IsInitialized
(
)
)
{
InternalThreadPool
:
:
ShutDown
(
lock
)
;
}
}
#
ifdef
DEBUG
void
GlobalHelperThreadState
:
:
assertIsLockedByCurrentThread
(
)
const
{
gHelperThreadLock
.
assertOwnedByCurrentThread
(
)
;
}
#
endif
void
GlobalHelperThreadState
:
:
dispatch
(
DispatchReason
reason
const
AutoLockHelperThreadState
&
locked
)
{
if
(
canStartTasks
(
locked
)
&
&
tasksPending_
<
threadCount
)
{
tasksPending_
+
+
;
JS
:
:
AutoSuppressGCAnalysis
nogc
;
dispatchTaskCallback
(
reason
)
;
}
}
void
GlobalHelperThreadState
:
:
wait
(
AutoLockHelperThreadState
&
locked
TimeDuration
timeout
)
{
consumerWakeup
.
wait_for
(
locked
timeout
)
;
}
void
GlobalHelperThreadState
:
:
notifyAll
(
const
AutoLockHelperThreadState
&
)
{
consumerWakeup
.
notify_all
(
)
;
}
void
GlobalHelperThreadState
:
:
notifyOne
(
const
AutoLockHelperThreadState
&
)
{
consumerWakeup
.
notify_one
(
)
;
}
bool
GlobalHelperThreadState
:
:
hasActiveThreads
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
helperTasks
(
lock
)
.
empty
(
)
;
}
void
js
:
:
WaitForAllHelperThreads
(
)
{
HelperThreadState
(
)
.
waitForAllTasks
(
)
;
}
void
js
:
:
WaitForAllHelperThreads
(
AutoLockHelperThreadState
&
lock
)
{
HelperThreadState
(
)
.
waitForAllTasksLocked
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
waitForAllTasks
(
)
{
AutoLockHelperThreadState
lock
;
waitForAllTasksLocked
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
waitForAllTasksLocked
(
AutoLockHelperThreadState
&
lock
)
{
CancelOffThreadWasmTier2GeneratorLocked
(
lock
)
;
while
(
canStartTasks
(
lock
)
|
|
tasksPending_
|
|
hasActiveThreads
(
lock
)
)
{
wait
(
lock
)
;
}
MOZ_ASSERT
(
gcParallelWorklist
(
)
.
isEmpty
(
lock
)
)
;
MOZ_ASSERT
(
ionWorklist
(
lock
)
.
empty
(
)
)
;
MOZ_ASSERT
(
wasmWorklist
(
lock
wasm
:
:
CompileMode
:
:
Tier1
)
.
empty
(
)
)
;
MOZ_ASSERT
(
promiseHelperTasks
(
lock
)
.
empty
(
)
)
;
MOZ_ASSERT
(
compressionWorklist
(
lock
)
.
empty
(
)
)
;
MOZ_ASSERT
(
ionFreeList
(
lock
)
.
empty
(
)
)
;
MOZ_ASSERT
(
wasmWorklist
(
lock
wasm
:
:
CompileMode
:
:
Tier2
)
.
empty
(
)
)
;
MOZ_ASSERT
(
wasmTier2GeneratorWorklist
(
lock
)
.
empty
(
)
)
;
MOZ_ASSERT
(
!
tasksPending_
)
;
MOZ_ASSERT
(
!
hasActiveThreads
(
lock
)
)
;
}
bool
GlobalHelperThreadState
:
:
checkTaskThreadLimit
(
ThreadType
threadType
size_t
maxThreads
bool
isMaster
const
AutoLockHelperThreadState
&
lock
)
const
{
MOZ_ASSERT
(
maxThreads
>
0
)
;
if
(
!
isMaster
&
&
maxThreads
>
=
threadCount
)
{
return
true
;
}
size_t
count
=
runningTaskCount
[
threadType
]
;
if
(
count
>
=
maxThreads
)
{
return
false
;
}
MOZ_ASSERT
(
threadCount
>
=
totalCountRunningTasks
)
;
size_t
idle
=
threadCount
-
totalCountRunningTasks
;
if
(
idle
=
=
0
)
{
return
false
;
}
if
(
isMaster
&
&
idle
=
=
1
)
{
return
false
;
}
return
true
;
}
static
inline
bool
IsHelperThreadSimulatingOOM
(
js
:
:
ThreadType
threadType
)
{
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_OOM_BREAKPOINT
)
return
js
:
:
oom
:
:
simulator
.
targetThread
(
)
=
=
threadType
;
#
else
return
false
;
#
endif
}
void
GlobalHelperThreadState
:
:
addSizeOfIncludingThis
(
JS
:
:
GlobalStats
*
stats
const
AutoLockHelperThreadState
&
lock
)
const
{
#
ifdef
DEBUG
assertIsLockedByCurrentThread
(
)
;
#
endif
mozilla
:
:
MallocSizeOf
mallocSizeOf
=
stats
-
>
mallocSizeOf_
;
JS
:
:
HelperThreadStats
&
htStats
=
stats
-
>
helperThread
;
htStats
.
stateData
+
=
mallocSizeOf
(
this
)
;
if
(
InternalThreadPool
:
:
IsInitialized
(
)
)
{
htStats
.
stateData
+
=
InternalThreadPool
:
:
Get
(
)
.
sizeOfIncludingThis
(
mallocSizeOf
lock
)
;
}
htStats
.
stateData
+
=
ionWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
ionFinishedList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
ionFreeList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmWorklist_tier1_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmWorklist_tier2_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
wasmTier2GeneratorWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
promiseHelperTasks_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionPendingList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
compressionFinishedList_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
gcParallelWorklist_
.
sizeOfExcludingThis
(
mallocSizeOf
lock
)
+
helperTasks_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
auto
task
:
ionWorklist_
)
{
htStats
.
ionCompileTask
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
ionFinishedList_
)
{
htStats
.
ionCompileTask
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
const
auto
&
task
:
ionFreeList_
)
{
for
(
auto
*
compileTask
:
task
-
>
compileTasks
(
)
)
{
htStats
.
ionCompileTask
+
=
compileTask
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
}
for
(
auto
task
:
wasmWorklist_tier1_
)
{
htStats
.
wasmCompile
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
for
(
auto
task
:
wasmWorklist_tier2_
)
{
htStats
.
wasmCompile
+
=
task
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
MOZ_ASSERT
(
htStats
.
idleThreadCount
=
=
0
)
;
MOZ_ASSERT
(
threadCount
>
=
totalCountRunningTasks
)
;
htStats
.
activeThreadCount
=
totalCountRunningTasks
;
htStats
.
idleThreadCount
=
threadCount
-
totalCountRunningTasks
;
}
size_t
GlobalHelperThreadState
:
:
maxIonCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_ION
)
)
{
return
1
;
}
return
threadCount
;
}
size_t
GlobalHelperThreadState
:
:
maxIonFreeThreads
(
)
const
{
return
1
;
}
size_t
GlobalHelperThreadState
:
:
maxWasmCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_WASM_COMPILE_TIER1
)
|
|
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_WASM_COMPILE_TIER2
)
)
{
return
1
;
}
return
std
:
:
min
(
cpuCount
threadCount
)
;
}
size_t
GlobalHelperThreadState
:
:
maxWasmTier2GeneratorThreads
(
)
const
{
return
MaxTier2GeneratorTasks
;
}
size_t
GlobalHelperThreadState
:
:
maxPromiseHelperThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_PROMISE_TASK
)
)
{
return
1
;
}
return
std
:
:
min
(
cpuCount
threadCount
)
;
}
size_t
GlobalHelperThreadState
:
:
maxDelazifyThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_DELAZIFY
)
)
{
return
1
;
}
return
std
:
:
min
(
cpuCount
threadCount
)
;
}
size_t
GlobalHelperThreadState
:
:
maxCompressionThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_COMPRESS
)
)
{
return
1
;
}
return
1
;
}
size_t
GlobalHelperThreadState
:
:
maxGCParallelThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
THREAD_TYPE_GCPARALLEL
)
)
{
return
1
;
}
return
threadCount
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier1CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
maybeGetWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier1
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier2CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
maybeGetWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier2
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmCompile
(
const
AutoLockHelperThreadState
&
lock
wasm
:
:
CompileMode
mode
)
{
if
(
!
canStartWasmCompile
(
lock
mode
)
)
{
return
nullptr
;
}
return
wasmWorklist
(
lock
mode
)
.
popCopyFront
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartWasmTier1CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
canStartWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier1
)
;
}
bool
GlobalHelperThreadState
:
:
canStartWasmTier2CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
canStartWasmCompile
(
lock
wasm
:
:
CompileMode
:
:
Tier2
)
;
}
bool
GlobalHelperThreadState
:
:
canStartWasmCompile
(
const
AutoLockHelperThreadState
&
lock
wasm
:
:
CompileMode
mode
)
{
if
(
wasmWorklist
(
lock
mode
)
.
empty
(
)
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
cpuCount
>
1
)
;
bool
tier2oversubscribed
=
wasmTier2GeneratorWorklist
(
lock
)
.
length
(
)
>
20
;
size_t
physCoresAvailable
=
size_t
(
ceil
(
cpuCount
/
3
.
0
)
)
;
size_t
threads
;
ThreadType
threadType
;
if
(
mode
=
=
wasm
:
:
CompileMode
:
:
Tier2
)
{
if
(
tier2oversubscribed
)
{
threads
=
maxWasmCompilationThreads
(
)
;
}
else
{
threads
=
physCoresAvailable
;
}
threadType
=
THREAD_TYPE_WASM_COMPILE_TIER2
;
}
else
{
if
(
tier2oversubscribed
)
{
threads
=
0
;
}
else
{
threads
=
maxWasmCompilationThreads
(
)
;
}
threadType
=
THREAD_TYPE_WASM_COMPILE_TIER1
;
}
return
threads
!
=
0
&
&
checkTaskThreadLimit
(
threadType
threads
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetWasmTier2GeneratorTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartWasmTier2GeneratorTask
(
lock
)
)
{
return
nullptr
;
}
return
wasmTier2GeneratorWorklist
(
lock
)
.
popCopy
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartWasmTier2GeneratorTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
wasmTier2GeneratorWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_WASM_GENERATOR_TIER2
maxWasmTier2GeneratorThreads
(
)
true
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetPromiseHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartPromiseHelperTask
(
lock
)
)
{
return
nullptr
;
}
return
promiseHelperTasks
(
lock
)
.
popCopy
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartPromiseHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
promiseHelperTasks
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_PROMISE_TASK
maxPromiseHelperThreads
(
)
true
lock
)
;
}
static
bool
IonCompileTaskHasHigherPriority
(
jit
:
:
IonCompileTask
*
first
jit
:
:
IonCompileTask
*
second
)
{
jit
:
:
JitScript
*
firstJitScript
=
first
-
>
script
(
)
-
>
jitScript
(
)
;
jit
:
:
JitScript
*
secondJitScript
=
second
-
>
script
(
)
-
>
jitScript
(
)
;
return
firstJitScript
-
>
warmUpCount
(
)
/
first
-
>
script
(
)
-
>
length
(
)
>
secondJitScript
-
>
warmUpCount
(
)
/
second
-
>
script
(
)
-
>
length
(
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartIonCompileTask
(
lock
)
)
{
return
nullptr
;
}
return
highestPriorityPendingIonCompile
(
lock
true
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetLowPrioIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartIonCompileTask
(
lock
)
)
{
return
nullptr
;
}
return
highestPriorityPendingIonCompile
(
lock
false
)
;
}
bool
GlobalHelperThreadState
:
:
canStartIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
ionWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_ION
maxIonCompilationThreads
(
)
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetIonFreeTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartIonFreeTask
(
lock
)
)
{
return
nullptr
;
}
UniquePtr
<
jit
:
:
IonFreeTask
>
task
=
std
:
:
move
(
ionFreeList
(
lock
)
.
back
(
)
)
;
ionFreeList
(
lock
)
.
popBack
(
)
;
return
task
.
release
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartIonFreeTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
ionFreeList
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_ION_FREE
maxIonFreeThreads
(
)
lock
)
;
}
jit
:
:
IonCompileTask
*
GlobalHelperThreadState
:
:
highestPriorityPendingIonCompile
(
const
AutoLockHelperThreadState
&
lock
bool
checkExecutionStatus
)
{
auto
&
worklist
=
ionWorklist
(
lock
)
;
MOZ_ASSERT
(
!
worklist
.
empty
(
)
)
;
size_t
index
=
worklist
.
length
(
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
if
(
checkExecutionStatus
&
&
!
worklist
[
i
]
-
>
isMainThreadRunningJS
(
)
)
{
continue
;
}
if
(
i
<
index
|
|
IonCompileTaskHasHigherPriority
(
worklist
[
i
]
worklist
[
index
]
)
)
{
index
=
i
;
}
}
if
(
index
=
=
worklist
.
length
(
)
)
{
return
nullptr
;
}
jit
:
:
IonCompileTask
*
task
=
worklist
[
index
]
;
worklist
.
erase
(
&
worklist
[
index
]
)
;
return
task
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetFreeDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
{
auto
&
freeList
=
freeDelazifyTaskVector
(
lock
)
;
if
(
!
freeList
.
empty
(
)
)
{
UniquePtr
<
FreeDelazifyTask
>
task
=
std
:
:
move
(
freeList
.
back
(
)
)
;
freeList
.
popBack
(
)
;
return
task
.
release
(
)
;
}
return
nullptr
;
}
bool
GlobalHelperThreadState
:
:
canStartFreeDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
freeDelazifyTaskVector
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_DELAZIFY_FREE
maxDelazifyThreads
(
)
true
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
{
auto
&
worklist
=
delazifyWorklist
(
lock
)
;
if
(
worklist
.
isEmpty
(
)
)
{
return
nullptr
;
}
return
worklist
.
popFirst
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
delazifyWorklist
(
lock
)
.
isEmpty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_DELAZIFY
maxDelazifyThreads
(
)
true
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartCompressionTask
(
lock
)
)
{
return
nullptr
;
}
auto
&
worklist
=
compressionWorklist
(
lock
)
;
UniquePtr
<
SourceCompressionTask
>
task
=
std
:
:
move
(
worklist
.
back
(
)
)
;
worklist
.
popBack
(
)
;
return
task
.
release
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
compressionWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_COMPRESS
maxCompressionThreads
(
)
lock
)
;
}
void
GlobalHelperThreadState
:
:
startHandlingCompressionTasks
(
ScheduleCompressionTask
schedule
JSRuntime
*
maybeRuntime
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
(
schedule
=
=
ScheduleCompressionTask
:
:
GC
)
=
=
(
maybeRuntime
!
=
nullptr
)
)
;
auto
&
pending
=
compressionPendingList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
pending
.
length
(
)
;
i
+
+
)
{
UniquePtr
<
SourceCompressionTask
>
&
task
=
pending
[
i
]
;
if
(
schedule
=
=
ScheduleCompressionTask
:
:
API
|
|
(
task
-
>
runtimeMatches
(
maybeRuntime
)
&
&
task
-
>
shouldStart
(
)
)
)
{
(
void
)
submitTask
(
std
:
:
move
(
task
)
lock
)
;
remove
(
pending
&
i
)
;
}
}
}
bool
GlobalHelperThreadState
:
:
submitTask
(
UniquePtr
<
SourceCompressionTask
>
task
const
AutoLockHelperThreadState
&
locked
)
{
if
(
!
compressionWorklist
(
locked
)
.
append
(
std
:
:
move
(
task
)
)
)
{
return
false
;
}
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
GCParallelTask
*
task
const
AutoLockHelperThreadState
&
locked
)
{
gcParallelWorklist
(
)
.
insertBack
(
task
locked
)
;
dispatch
(
DispatchReason
:
:
NewTask
locked
)
;
return
true
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
maybeGetGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartGCParallelTask
(
lock
)
)
{
return
nullptr
;
}
return
gcParallelWorklist
(
)
.
popFirst
(
lock
)
;
}
bool
GlobalHelperThreadState
:
:
canStartGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
gcParallelWorklist
(
)
.
isEmpty
(
lock
)
&
&
checkTaskThreadLimit
(
THREAD_TYPE_GCPARALLEL
maxGCParallelThreads
(
)
lock
)
;
}
bool
js
:
:
EnqueueOffThreadCompression
(
JSContext
*
cx
UniquePtr
<
SourceCompressionTask
>
task
)
{
AutoLockHelperThreadState
lock
;
auto
&
pending
=
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
;
if
(
!
pending
.
append
(
std
:
:
move
(
task
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
void
js
:
:
StartHandlingCompressionsOnGC
(
JSRuntime
*
runtime
)
{
AutoLockHelperThreadState
lock
;
HelperThreadState
(
)
.
startHandlingCompressionTasks
(
GlobalHelperThreadState
:
:
ScheduleCompressionTask
:
:
GC
runtime
lock
)
;
}
template
<
typename
T
>
static
void
ClearCompressionTaskList
(
T
&
list
JSRuntime
*
runtime
)
{
for
(
size_t
i
=
0
;
i
<
list
.
length
(
)
;
i
+
+
)
{
if
(
list
[
i
]
-
>
runtimeMatches
(
runtime
)
)
{
HelperThreadState
(
)
.
remove
(
list
&
i
)
;
}
}
}
void
js
:
:
CancelOffThreadCompressions
(
JSRuntime
*
runtime
)
{
if
(
!
CanUseExtraThreads
(
)
)
{
return
;
}
AutoLockHelperThreadState
lock
;
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
runtime
)
;
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionWorklist
(
lock
)
runtime
)
;
while
(
true
)
{
bool
inProgress
=
false
;
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
!
helper
-
>
is
<
SourceCompressionTask
>
(
)
)
{
continue
;
}
if
(
helper
-
>
as
<
SourceCompressionTask
>
(
)
-
>
runtimeMatches
(
runtime
)
)
{
inProgress
=
true
;
}
}
if
(
!
inProgress
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
)
;
}
ClearCompressionTaskList
(
HelperThreadState
(
)
.
compressionFinishedList
(
lock
)
runtime
)
;
}
void
js
:
:
AttachFinishedCompressions
(
JSRuntime
*
runtime
AutoLockHelperThreadState
&
lock
)
{
auto
&
finished
=
HelperThreadState
(
)
.
compressionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
if
(
finished
[
i
]
-
>
runtimeMatches
(
runtime
)
)
{
UniquePtr
<
SourceCompressionTask
>
compressionTask
(
std
:
:
move
(
finished
[
i
]
)
)
;
HelperThreadState
(
)
.
remove
(
finished
&
i
)
;
compressionTask
-
>
complete
(
)
;
}
}
}
void
js
:
:
SweepPendingCompressions
(
AutoLockHelperThreadState
&
lock
)
{
auto
&
pending
=
HelperThreadState
(
)
.
compressionPendingList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
pending
.
length
(
)
;
i
+
+
)
{
if
(
pending
[
i
]
-
>
shouldCancel
(
)
)
{
HelperThreadState
(
)
.
remove
(
pending
&
i
)
;
}
}
}
void
js
:
:
RunPendingSourceCompressions
(
JSRuntime
*
runtime
)
{
if
(
!
CanUseExtraThreads
(
)
)
{
return
;
}
AutoLockHelperThreadState
lock
;
HelperThreadState
(
)
.
startHandlingCompressionTasks
(
GlobalHelperThreadState
:
:
ScheduleCompressionTask
:
:
API
nullptr
lock
)
;
while
(
!
HelperThreadState
(
)
.
compressionWorklist
(
lock
)
.
empty
(
)
)
{
HelperThreadState
(
)
.
wait
(
lock
)
;
}
HelperThreadState
(
)
.
waitForAllTasksLocked
(
lock
)
;
AttachFinishedCompressions
(
runtime
lock
)
;
}
void
PromiseHelperTask
:
:
executeAndResolveAndDestroy
(
JSContext
*
cx
)
{
execute
(
)
;
run
(
cx
JS
:
:
Dispatchable
:
:
NotShuttingDown
)
;
}
void
PromiseHelperTask
:
:
runHelperThreadTask
(
AutoLockHelperThreadState
&
lock
)
{
{
AutoUnlockHelperThreadState
unlock
(
lock
)
;
execute
(
)
;
}
dispatchResolveAndDestroy
(
lock
)
;
}
bool
js
:
:
StartOffThreadPromiseHelperTask
(
JSContext
*
cx
UniquePtr
<
PromiseHelperTask
>
task
)
{
if
(
!
CanUseExtraThreads
(
)
)
{
task
.
release
(
)
-
>
executeAndResolveAndDestroy
(
cx
)
;
return
true
;
}
if
(
!
HelperThreadState
(
)
.
submitTask
(
task
.
get
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
(
void
)
task
.
release
(
)
;
return
true
;
}
bool
js
:
:
StartOffThreadPromiseHelperTask
(
PromiseHelperTask
*
task
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
return
HelperThreadState
(
)
.
submitTask
(
task
)
;
}
bool
GlobalHelperThreadState
:
:
submitTask
(
PromiseHelperTask
*
task
)
{
AutoLockHelperThreadState
lock
;
if
(
!
promiseHelperTasks
(
lock
)
.
append
(
task
)
)
{
return
false
;
}
dispatch
(
DispatchReason
:
:
NewTask
lock
)
;
return
true
;
}
void
GlobalHelperThreadState
:
:
trace
(
JSTracer
*
trc
)
{
{
AutoLockHelperThreadState
lock
;
#
ifdef
DEBUG
GCMarker
*
marker
=
nullptr
;
if
(
trc
-
>
isMarkingTracer
(
)
)
{
marker
=
GCMarker
:
:
fromTracer
(
trc
)
;
marker
-
>
setCheckAtomMarking
(
false
)
;
}
auto
reenableAtomMarkingCheck
=
mozilla
:
:
MakeScopeExit
(
[
marker
]
{
if
(
marker
)
{
marker
-
>
setCheckAtomMarking
(
true
)
;
}
}
)
;
#
endif
for
(
auto
task
:
ionWorklist
(
lock
)
)
{
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadWrite
(
)
;
task
-
>
trace
(
trc
)
;
task
-
>
alloc
(
)
.
lifoAlloc
(
)
-
>
setReadOnly
(
)
;
}
for
(
auto
task
:
ionFinishedList
(
lock
)
)
{
task
-
>
trace
(
trc
)
;
}
for
(
auto
*
helper
:
HelperThreadState
(
)
.
helperTasks
(
lock
)
)
{
if
(
helper
-
>
is
<
jit
:
:
IonCompileTask
>
(
)
)
{
helper
-
>
as
<
jit
:
:
IonCompileTask
>
(
)
-
>
trace
(
trc
)
;
}
}
}
JSRuntime
*
rt
=
trc
-
>
runtime
(
)
;
if
(
auto
*
jitRuntime
=
rt
-
>
jitRuntime
(
)
)
{
jit
:
:
IonCompileTask
*
task
=
jitRuntime
-
>
ionLazyLinkList
(
rt
)
.
getFirst
(
)
;
while
(
task
)
{
task
-
>
trace
(
trc
)
;
task
=
task
-
>
getNext
(
)
;
}
}
}
const
GlobalHelperThreadState
:
:
Selector
GlobalHelperThreadState
:
:
selectors
[
]
=
{
&
GlobalHelperThreadState
:
:
maybeGetGCParallelTask
&
GlobalHelperThreadState
:
:
maybeGetIonCompileTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier1CompileTask
&
GlobalHelperThreadState
:
:
maybeGetPromiseHelperTask
&
GlobalHelperThreadState
:
:
maybeGetFreeDelazifyTask
&
GlobalHelperThreadState
:
:
maybeGetDelazifyTask
&
GlobalHelperThreadState
:
:
maybeGetCompressionTask
&
GlobalHelperThreadState
:
:
maybeGetLowPrioIonCompileTask
&
GlobalHelperThreadState
:
:
maybeGetIonFreeTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier2CompileTask
&
GlobalHelperThreadState
:
:
maybeGetWasmTier2GeneratorTask
}
;
bool
GlobalHelperThreadState
:
:
canStartTasks
(
const
AutoLockHelperThreadState
&
lock
)
{
return
canStartGCParallelTask
(
lock
)
|
|
canStartIonCompileTask
(
lock
)
|
|
canStartWasmTier1CompileTask
(
lock
)
|
|
canStartPromiseHelperTask
(
lock
)
|
|
canStartFreeDelazifyTask
(
lock
)
|
|
canStartDelazifyTask
(
lock
)
|
|
canStartCompressionTask
(
lock
)
|
|
canStartIonFreeTask
(
lock
)
|
|
canStartWasmTier2CompileTask
(
lock
)
|
|
canStartWasmTier2GeneratorTask
(
lock
)
;
}
void
JS
:
:
RunHelperThreadTask
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
AutoLockHelperThreadState
lock
;
if
(
!
gHelperThreadState
|
|
HelperThreadState
(
)
.
isTerminating
(
lock
)
)
{
return
;
}
HelperThreadState
(
)
.
runOneTask
(
lock
)
;
}
void
GlobalHelperThreadState
:
:
runOneTask
(
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
tasksPending_
>
0
)
;
tasksPending_
-
-
;
HelperThreadTask
*
task
=
findHighestPriorityTask
(
lock
)
;
if
(
task
)
{
runTaskLocked
(
task
lock
)
;
dispatch
(
DispatchReason
:
:
FinishedTask
lock
)
;
}
notifyAll
(
lock
)
;
}
HelperThreadTask
*
GlobalHelperThreadState
:
:
findHighestPriorityTask
(
const
AutoLockHelperThreadState
&
locked
)
{
for
(
const
auto
&
selector
:
selectors
)
{
if
(
auto
*
task
=
(
this
-
>
*
(
selector
)
)
(
locked
)
)
{
return
task
;
}
}
return
nullptr
;
}
void
GlobalHelperThreadState
:
:
runTaskLocked
(
HelperThreadTask
*
task
AutoLockHelperThreadState
&
locked
)
{
JS
:
:
AutoSuppressGCAnalysis
nogc
;
HelperThreadState
(
)
.
helperTasks
(
locked
)
.
infallibleEmplaceBack
(
task
)
;
ThreadType
threadType
=
task
-
>
threadType
(
)
;
js
:
:
oom
:
:
SetThreadType
(
threadType
)
;
runningTaskCount
[
threadType
]
+
+
;
totalCountRunningTasks
+
+
;
task
-
>
runHelperThreadTask
(
locked
)
;
HelperThreadState
(
)
.
helperTasks
(
locked
)
.
eraseIfEqual
(
task
)
;
totalCountRunningTasks
-
-
;
runningTaskCount
[
threadType
]
-
-
;
js
:
:
oom
:
:
SetThreadType
(
js
:
:
THREAD_TYPE_NONE
)
;
}
