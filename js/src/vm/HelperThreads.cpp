#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
jsnativestack
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
asmjs
/
WasmIonCompile
.
h
"
#
include
"
builtin
/
Promise
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
gc
/
GCInternals
.
h
"
#
include
"
jit
/
IonBuilder
.
h
"
#
include
"
vm
/
Debugger
.
h
"
#
include
"
vm
/
SharedImmutableStringsCache
.
h
"
#
include
"
vm
/
Time
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
jscntxtinlines
.
h
"
#
include
"
jscompartmentinlines
.
h
"
#
include
"
jsobjinlines
.
h
"
#
include
"
jsscriptinlines
.
h
"
using
namespace
js
;
using
mozilla
:
:
ArrayLength
;
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
Unused
;
using
mozilla
:
:
TimeDuration
;
namespace
js
{
GlobalHelperThreadState
*
gHelperThreadState
=
nullptr
;
}
bool
js
:
:
CreateHelperThreadsState
(
)
{
MOZ_ASSERT
(
!
gHelperThreadState
)
;
gHelperThreadState
=
js_new
<
GlobalHelperThreadState
>
(
)
;
return
gHelperThreadState
!
=
nullptr
;
}
void
js
:
:
DestroyHelperThreadsState
(
)
{
MOZ_ASSERT
(
gHelperThreadState
)
;
gHelperThreadState
-
>
finish
(
)
;
js_delete
(
gHelperThreadState
)
;
gHelperThreadState
=
nullptr
;
}
bool
js
:
:
EnsureHelperThreadsInitialized
(
)
{
MOZ_ASSERT
(
gHelperThreadState
)
;
return
gHelperThreadState
-
>
ensureInitialized
(
)
;
}
static
size_t
ThreadCountForCPUCount
(
size_t
cpuCount
)
{
static
const
uint32_t
EXCESS_THREADS
=
4
;
return
cpuCount
+
EXCESS_THREADS
;
}
void
js
:
:
SetFakeCPUCount
(
size_t
count
)
{
MOZ_ASSERT
(
!
HelperThreadState
(
)
.
threads
)
;
HelperThreadState
(
)
.
cpuCount
=
count
;
HelperThreadState
(
)
.
threadCount
=
ThreadCountForCPUCount
(
count
)
;
}
bool
js
:
:
StartOffThreadWasmCompile
(
wasm
:
:
IonCompileTask
*
task
)
{
AutoLockHelperThreadState
lock
;
if
(
HelperThreadState
(
)
.
wasmFailed
(
lock
)
)
return
false
;
if
(
!
HelperThreadState
(
)
.
wasmWorklist
(
lock
)
.
append
(
task
)
)
return
false
;
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
return
true
;
}
bool
js
:
:
StartOffThreadIonCompile
(
JSContext
*
cx
jit
:
:
IonBuilder
*
builder
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
ionWorklist
(
lock
)
.
append
(
builder
)
)
return
false
;
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
return
true
;
}
static
void
FinishOffThreadIonCompile
(
jit
:
:
IonBuilder
*
builder
const
AutoLockHelperThreadState
&
lock
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
.
append
(
builder
)
)
oomUnsafe
.
crash
(
"
FinishOffThreadIonCompile
"
)
;
}
static
JSRuntime
*
GetSelectorRuntime
(
CompilationSelector
selector
)
{
struct
Matcher
{
JSRuntime
*
match
(
JSScript
*
script
)
{
return
script
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
match
(
JSCompartment
*
comp
)
{
return
comp
-
>
runtimeFromMainThread
(
)
;
}
JSRuntime
*
match
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
;
}
JSRuntime
*
match
(
JSRuntime
*
runtime
)
{
return
runtime
;
}
JSRuntime
*
match
(
AllCompilations
all
)
{
return
nullptr
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
JitDataStructuresExist
(
CompilationSelector
selector
)
{
struct
Matcher
{
bool
match
(
JSScript
*
script
)
{
return
!
!
script
-
>
compartment
(
)
-
>
jitCompartment
(
)
;
}
bool
match
(
JSCompartment
*
comp
)
{
return
!
!
comp
-
>
jitCompartment
(
)
;
}
bool
match
(
ZonesInState
zbs
)
{
return
!
!
zbs
.
runtime
-
>
jitRuntime
(
)
;
}
bool
match
(
JSRuntime
*
runtime
)
{
return
!
!
runtime
-
>
jitRuntime
(
)
;
}
bool
match
(
AllCompilations
all
)
{
return
true
;
}
}
;
return
selector
.
match
(
Matcher
(
)
)
;
}
static
bool
CompiledScriptMatches
(
CompilationSelector
selector
JSScript
*
target
)
{
struct
ScriptMatches
{
JSScript
*
target_
;
bool
match
(
JSScript
*
script
)
{
return
script
=
=
target_
;
}
bool
match
(
JSCompartment
*
comp
)
{
return
comp
=
=
target_
-
>
compartment
(
)
;
}
bool
match
(
JSRuntime
*
runtime
)
{
return
runtime
=
=
target_
-
>
runtimeFromAnyThread
(
)
;
}
bool
match
(
AllCompilations
all
)
{
return
true
;
}
bool
match
(
ZonesInState
zbs
)
{
return
zbs
.
runtime
=
=
target_
-
>
runtimeFromAnyThread
(
)
&
&
zbs
.
state
=
=
target_
-
>
zoneFromAnyThread
(
)
-
>
gcState
(
)
;
}
}
;
return
selector
.
match
(
ScriptMatches
{
target
}
)
;
}
void
js
:
:
CancelOffThreadIonCompile
(
CompilationSelector
selector
bool
discardLazyLinkList
)
{
if
(
!
JitDataStructuresExist
(
selector
)
)
return
;
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
threads
)
return
;
GlobalHelperThreadState
:
:
IonBuilderVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonBuilder
*
builder
=
worklist
[
i
]
;
if
(
CompiledScriptMatches
(
selector
builder
-
>
script
(
)
)
)
{
FinishOffThreadIonCompile
(
builder
lock
)
;
HelperThreadState
(
)
.
remove
(
worklist
&
i
)
;
}
}
bool
cancelled
;
do
{
cancelled
=
false
;
bool
unpaused
=
false
;
for
(
auto
&
helper
:
*
HelperThreadState
(
)
.
threads
)
{
if
(
helper
.
ionBuilder
(
)
&
&
CompiledScriptMatches
(
selector
helper
.
ionBuilder
(
)
-
>
script
(
)
)
)
{
helper
.
ionBuilder
(
)
-
>
cancel
(
)
;
if
(
helper
.
pause
)
{
helper
.
pause
=
false
;
unpaused
=
true
;
}
cancelled
=
true
;
}
}
if
(
unpaused
)
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
PAUSE
lock
)
;
if
(
cancelled
)
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
while
(
cancelled
)
;
GlobalHelperThreadState
:
:
IonBuilderVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonBuilder
*
builder
=
finished
[
i
]
;
if
(
CompiledScriptMatches
(
selector
builder
-
>
script
(
)
)
)
{
jit
:
:
FinishOffThreadBuilder
(
nullptr
builder
lock
)
;
HelperThreadState
(
)
.
remove
(
finished
&
i
)
;
}
}
if
(
discardLazyLinkList
)
{
MOZ_ASSERT
(
!
selector
.
is
<
AllCompilations
>
(
)
)
;
JSRuntime
*
runtime
=
GetSelectorRuntime
(
selector
)
;
jit
:
:
IonBuilder
*
builder
=
runtime
-
>
ionLazyLinkList
(
)
.
getFirst
(
)
;
while
(
builder
)
{
jit
:
:
IonBuilder
*
next
=
builder
-
>
getNext
(
)
;
if
(
CompiledScriptMatches
(
selector
builder
-
>
script
(
)
)
)
jit
:
:
FinishOffThreadBuilder
(
runtime
builder
lock
)
;
builder
=
next
;
}
}
}
#
ifdef
DEBUG
bool
js
:
:
HasOffThreadIonCompile
(
JSCompartment
*
comp
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
threads
)
return
false
;
GlobalHelperThreadState
:
:
IonBuilderVector
&
worklist
=
HelperThreadState
(
)
.
ionWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonBuilder
*
builder
=
worklist
[
i
]
;
if
(
builder
-
>
script
(
)
-
>
compartment
(
)
=
=
comp
)
return
true
;
}
for
(
auto
&
helper
:
*
HelperThreadState
(
)
.
threads
)
{
if
(
helper
.
ionBuilder
(
)
&
&
helper
.
ionBuilder
(
)
-
>
script
(
)
-
>
compartment
(
)
=
=
comp
)
return
true
;
}
GlobalHelperThreadState
:
:
IonBuilderVector
&
finished
=
HelperThreadState
(
)
.
ionFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
jit
:
:
IonBuilder
*
builder
=
finished
[
i
]
;
if
(
builder
-
>
script
(
)
-
>
compartment
(
)
=
=
comp
)
return
true
;
}
jit
:
:
IonBuilder
*
builder
=
comp
-
>
runtimeFromMainThread
(
)
-
>
ionLazyLinkList
(
)
.
getFirst
(
)
;
while
(
builder
)
{
if
(
builder
-
>
script
(
)
-
>
compartment
(
)
=
=
comp
)
return
true
;
builder
=
builder
-
>
getNext
(
)
;
}
return
false
;
}
#
endif
static
const
JSClassOps
parseTaskGlobalClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
JS_GlobalObjectTraceHook
}
;
static
const
JSClass
parseTaskGlobalClass
=
{
"
internal
-
parse
-
task
-
global
"
JSCLASS_GLOBAL_FLAGS
&
parseTaskGlobalClassOps
}
;
ParseTask
:
:
ParseTask
(
ParseTaskKind
kind
ExclusiveContext
*
cx
JSObject
*
exclusiveContextGlobal
JSContext
*
initCx
const
char16_t
*
chars
size_t
length
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
kind
(
kind
)
cx
(
cx
)
options
(
initCx
)
chars
(
chars
)
length
(
length
)
alloc
(
JSRuntime
:
:
TEMP_LIFO_ALLOC_PRIMARY_CHUNK_SIZE
)
exclusiveContextGlobal
(
exclusiveContextGlobal
)
callback
(
callback
)
callbackData
(
callbackData
)
script
(
nullptr
)
sourceObject
(
nullptr
)
errors
(
cx
)
overRecursed
(
false
)
outOfMemory
(
false
)
{
}
bool
ParseTask
:
:
init
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
)
{
if
(
!
this
-
>
options
.
copy
(
cx
options
)
)
return
false
;
return
true
;
}
void
ParseTask
:
:
activate
(
JSRuntime
*
rt
)
{
rt
-
>
setUsedByExclusiveThread
(
exclusiveContextGlobal
-
>
zone
(
)
)
;
cx
-
>
enterCompartment
(
exclusiveContextGlobal
-
>
compartment
(
)
)
;
}
bool
ParseTask
:
:
finish
(
JSContext
*
cx
)
{
if
(
sourceObject
)
{
RootedScriptSource
sso
(
cx
sourceObject
)
;
if
(
!
ScriptSourceObject
:
:
initFromOptions
(
cx
sso
options
)
)
return
false
;
}
return
true
;
}
ParseTask
:
:
~
ParseTask
(
)
{
js_delete
(
cx
)
;
for
(
size_t
i
=
0
;
i
<
errors
.
length
(
)
;
i
+
+
)
js_delete
(
errors
[
i
]
)
;
}
void
ParseTask
:
:
trace
(
JSTracer
*
trc
)
{
if
(
!
cx
-
>
runtimeMatches
(
trc
-
>
runtime
(
)
)
)
return
;
TraceManuallyBarrieredEdge
(
trc
&
exclusiveContextGlobal
"
ParseTask
:
:
exclusiveContextGlobal
"
)
;
if
(
script
)
TraceManuallyBarrieredEdge
(
trc
&
script
"
ParseTask
:
:
script
"
)
;
if
(
sourceObject
)
TraceManuallyBarrieredEdge
(
trc
&
sourceObject
"
ParseTask
:
:
sourceObject
"
)
;
}
ScriptParseTask
:
:
ScriptParseTask
(
ExclusiveContext
*
cx
JSObject
*
exclusiveContextGlobal
JSContext
*
initCx
const
char16_t
*
chars
size_t
length
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
Script
cx
exclusiveContextGlobal
initCx
chars
length
callback
callbackData
)
{
}
void
ScriptParseTask
:
:
parse
(
)
{
SourceBufferHolder
srcBuf
(
chars
length
SourceBufferHolder
:
:
NoOwnership
)
;
script
=
frontend
:
:
CompileGlobalScript
(
cx
alloc
ScopeKind
:
:
Global
options
srcBuf
nullptr
&
sourceObject
)
;
}
ModuleParseTask
:
:
ModuleParseTask
(
ExclusiveContext
*
cx
JSObject
*
exclusiveContextGlobal
JSContext
*
initCx
const
char16_t
*
chars
size_t
length
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
:
ParseTask
(
ParseTaskKind
:
:
Module
cx
exclusiveContextGlobal
initCx
chars
length
callback
callbackData
)
{
}
void
ModuleParseTask
:
:
parse
(
)
{
SourceBufferHolder
srcBuf
(
chars
length
SourceBufferHolder
:
:
NoOwnership
)
;
ModuleObject
*
module
=
frontend
:
:
CompileModule
(
cx
options
srcBuf
alloc
&
sourceObject
)
;
if
(
module
)
script
=
module
-
>
script
(
)
;
}
void
js
:
:
CancelOffThreadParses
(
JSRuntime
*
rt
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
threads
)
return
;
#
ifdef
DEBUG
GlobalHelperThreadState
:
:
ParseTaskVector
&
waitingOnGC
=
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
waitingOnGC
.
length
(
)
;
i
+
+
)
MOZ_ASSERT
(
!
waitingOnGC
[
i
]
-
>
runtimeMatches
(
rt
)
)
;
#
endif
while
(
true
)
{
bool
pending
=
false
;
GlobalHelperThreadState
:
:
ParseTaskVector
&
worklist
=
HelperThreadState
(
)
.
parseWorklist
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
ParseTask
*
task
=
worklist
[
i
]
;
if
(
task
-
>
runtimeMatches
(
rt
)
)
pending
=
true
;
}
if
(
!
pending
)
{
bool
inProgress
=
false
;
for
(
auto
&
thread
:
*
HelperThreadState
(
)
.
threads
)
{
ParseTask
*
task
=
thread
.
parseTask
(
)
;
if
(
task
&
&
task
-
>
runtimeMatches
(
rt
)
)
inProgress
=
true
;
}
if
(
!
inProgress
)
break
;
}
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
GlobalHelperThreadState
:
:
ParseTaskVector
&
finished
=
HelperThreadState
(
)
.
parseFinishedList
(
lock
)
;
while
(
true
)
{
bool
found
=
false
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
ParseTask
*
task
=
finished
[
i
]
;
if
(
task
-
>
runtimeMatches
(
rt
)
)
{
found
=
true
;
AutoUnlockHelperThreadState
unlock
(
lock
)
;
HelperThreadState
(
)
.
cancelParseTask
(
rt
-
>
contextFromMainThread
(
)
task
-
>
kind
task
)
;
}
}
if
(
!
found
)
break
;
}
}
bool
js
:
:
OffThreadParsingMustWaitForGC
(
JSRuntime
*
rt
)
{
return
rt
-
>
activeGCInAtomsZone
(
)
;
}
static
bool
EnsureConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
)
{
if
(
!
GlobalObject
:
:
ensureConstructor
(
cx
global
key
)
)
return
false
;
MOZ_ASSERT
(
global
-
>
getPrototype
(
key
)
.
toObject
(
)
.
isDelegate
(
)
"
standard
class
prototype
wasn
'
t
a
delegate
from
birth
"
)
;
return
true
;
}
static
bool
EnsureParserCreatedClasses
(
JSContext
*
cx
ParseTaskKind
kind
)
{
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
if
(
!
EnsureConstructor
(
cx
global
JSProto_Function
)
)
return
false
;
if
(
!
EnsureConstructor
(
cx
global
JSProto_Array
)
)
return
false
;
if
(
!
EnsureConstructor
(
cx
global
JSProto_RegExp
)
)
return
false
;
if
(
!
EnsureConstructor
(
cx
global
JSProto_Iterator
)
)
return
false
;
if
(
!
GlobalObject
:
:
initStarGenerators
(
cx
global
)
)
return
false
;
if
(
kind
=
=
ParseTaskKind
:
:
Module
&
&
!
GlobalObject
:
:
ensureModulePrototypesCreated
(
cx
global
)
)
return
false
;
return
true
;
}
static
JSObject
*
CreateGlobalForOffThreadParse
(
JSContext
*
cx
ParseTaskKind
kind
const
gc
:
:
AutoSuppressGC
&
nogc
)
{
JSCompartment
*
currentCompartment
=
cx
-
>
compartment
(
)
;
JS
:
:
CompartmentOptions
compartmentOptions
(
currentCompartment
-
>
creationOptions
(
)
currentCompartment
-
>
behaviors
(
)
)
;
auto
&
creationOptions
=
compartmentOptions
.
creationOptions
(
)
;
creationOptions
.
setInvisibleToDebugger
(
true
)
.
setMergeable
(
true
)
.
setZone
(
JS
:
:
FreshZone
)
;
creationOptions
.
setTrace
(
nullptr
)
;
JSObject
*
global
=
JS_NewGlobalObject
(
cx
&
parseTaskGlobalClass
nullptr
JS
:
:
FireOnNewGlobalHook
compartmentOptions
)
;
if
(
!
global
)
return
nullptr
;
JS_SetCompartmentPrincipals
(
global
-
>
compartment
(
)
currentCompartment
-
>
principals
(
)
)
;
if
(
!
EnsureParserCreatedClasses
(
cx
kind
)
)
return
nullptr
;
{
AutoCompartment
ac
(
cx
global
)
;
if
(
!
EnsureParserCreatedClasses
(
cx
kind
)
)
return
nullptr
;
}
return
global
;
}
static
bool
QueueOffThreadParseTask
(
JSContext
*
cx
ParseTask
*
task
)
{
if
(
OffThreadParsingMustWaitForGC
(
cx
-
>
runtime
(
)
)
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
.
append
(
task
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
else
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
parseWorklist
(
lock
)
.
append
(
task
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
task
-
>
activate
(
cx
-
>
runtime
(
)
)
;
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
}
return
true
;
}
bool
js
:
:
StartOffThreadParseScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
{
gc
:
:
AutoSuppressGC
nogc
(
cx
)
;
gc
:
:
AutoAssertNoNurseryAlloc
noNurseryAlloc
(
cx
-
>
runtime
(
)
)
;
AutoSuppressAllocationMetadataBuilder
suppressMetadata
(
cx
)
;
JSObject
*
global
=
CreateGlobalForOffThreadParse
(
cx
ParseTaskKind
:
:
Script
nogc
)
;
if
(
!
global
)
return
false
;
ScopedJSDeletePtr
<
ExclusiveContext
>
helpercx
(
cx
-
>
new_
<
ExclusiveContext
>
(
cx
-
>
runtime
(
)
(
PerThreadData
*
)
nullptr
ExclusiveContext
:
:
Context_Exclusive
cx
-
>
options
(
)
)
)
;
if
(
!
helpercx
)
return
false
;
ScopedJSDeletePtr
<
ParseTask
>
task
(
cx
-
>
new_
<
ScriptParseTask
>
(
helpercx
.
get
(
)
global
cx
chars
length
callback
callbackData
)
)
;
if
(
!
task
)
return
false
;
helpercx
.
forget
(
)
;
if
(
!
task
-
>
init
(
cx
options
)
|
|
!
QueueOffThreadParseTask
(
cx
task
)
)
return
false
;
task
.
forget
(
)
;
return
true
;
}
bool
js
:
:
StartOffThreadParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
{
gc
:
:
AutoSuppressGC
nogc
(
cx
)
;
gc
:
:
AutoAssertNoNurseryAlloc
noNurseryAlloc
(
cx
-
>
runtime
(
)
)
;
AutoSuppressAllocationMetadataBuilder
suppressMetadata
(
cx
)
;
JSObject
*
global
=
CreateGlobalForOffThreadParse
(
cx
ParseTaskKind
:
:
Module
nogc
)
;
if
(
!
global
)
return
false
;
ScopedJSDeletePtr
<
ExclusiveContext
>
helpercx
(
cx
-
>
new_
<
ExclusiveContext
>
(
cx
-
>
runtime
(
)
(
PerThreadData
*
)
nullptr
ExclusiveContext
:
:
Context_Exclusive
cx
-
>
options
(
)
)
)
;
if
(
!
helpercx
)
return
false
;
ScopedJSDeletePtr
<
ParseTask
>
task
(
cx
-
>
new_
<
ModuleParseTask
>
(
helpercx
.
get
(
)
global
cx
chars
length
callback
callbackData
)
)
;
if
(
!
task
)
return
false
;
helpercx
.
forget
(
)
;
if
(
!
task
-
>
init
(
cx
options
)
|
|
!
QueueOffThreadParseTask
(
cx
task
)
)
return
false
;
task
.
forget
(
)
;
return
true
;
}
void
js
:
:
EnqueuePendingParseTasksAfterGC
(
JSRuntime
*
rt
)
{
MOZ_ASSERT
(
!
OffThreadParsingMustWaitForGC
(
rt
)
)
;
GlobalHelperThreadState
:
:
ParseTaskVector
newTasks
;
{
AutoLockHelperThreadState
lock
;
GlobalHelperThreadState
:
:
ParseTaskVector
&
waiting
=
HelperThreadState
(
)
.
parseWaitingOnGC
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
waiting
.
length
(
)
;
i
+
+
)
{
ParseTask
*
task
=
waiting
[
i
]
;
if
(
task
-
>
runtimeMatches
(
rt
)
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
newTasks
.
append
(
task
)
)
oomUnsafe
.
crash
(
"
EnqueuePendingParseTasksAfterGC
"
)
;
HelperThreadState
(
)
.
remove
(
waiting
&
i
)
;
}
}
}
if
(
newTasks
.
empty
(
)
)
return
;
for
(
size_t
i
=
0
;
i
<
newTasks
.
length
(
)
;
i
+
+
)
newTasks
[
i
]
-
>
activate
(
rt
)
;
AutoLockHelperThreadState
lock
;
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
parseWorklist
(
lock
)
.
appendAll
(
newTasks
)
)
oomUnsafe
.
crash
(
"
EnqueuePendingParseTasksAfterGC
"
)
;
}
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
}
static
const
uint32_t
kDefaultHelperStackSize
=
2048
*
1024
;
static
const
uint32_t
kDefaultHelperStackQuota
=
1800
*
1024
;
#
if
defined
(
MOZ_TSAN
)
static
const
uint32_t
HELPER_STACK_SIZE
=
2
*
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
2
*
kDefaultHelperStackQuota
;
#
else
static
const
uint32_t
HELPER_STACK_SIZE
=
kDefaultHelperStackSize
;
static
const
uint32_t
HELPER_STACK_QUOTA
=
kDefaultHelperStackQuota
;
#
endif
bool
GlobalHelperThreadState
:
:
ensureInitialized
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
MOZ_ASSERT
(
this
=
=
&
HelperThreadState
(
)
)
;
AutoLockHelperThreadState
lock
;
if
(
threads
)
return
true
;
threads
=
js
:
:
UniquePtr
<
HelperThreadVector
>
(
js_new
<
HelperThreadVector
>
(
)
)
;
if
(
!
threads
|
|
!
threads
-
>
initCapacity
(
threadCount
)
)
return
false
;
for
(
size_t
i
=
0
;
i
<
threadCount
;
i
+
+
)
{
threads
-
>
infallibleEmplaceBack
(
)
;
HelperThread
&
helper
=
(
*
threads
)
[
i
]
;
helper
.
threadData
.
emplace
(
static_cast
<
JSRuntime
*
>
(
nullptr
)
)
;
if
(
!
helper
.
threadData
-
>
init
(
)
)
goto
error
;
helper
.
thread
=
mozilla
:
:
Some
(
Thread
(
Thread
:
:
Options
(
)
.
setStackSize
(
HELPER_STACK_SIZE
)
)
)
;
if
(
!
helper
.
thread
-
>
init
(
HelperThread
:
:
ThreadMain
&
helper
)
)
goto
error
;
continue
;
error
:
threads
-
>
popBack
(
)
;
finishThreads
(
)
;
return
false
;
}
return
true
;
}
GlobalHelperThreadState
:
:
GlobalHelperThreadState
(
)
:
cpuCount
(
0
)
threadCount
(
0
)
threads
(
nullptr
)
wasmCompilationInProgress
(
false
)
numWasmFailedJobs
(
0
)
{
cpuCount
=
GetCPUCount
(
)
;
threadCount
=
ThreadCountForCPUCount
(
cpuCount
)
;
MOZ_ASSERT
(
cpuCount
>
0
"
GetCPUCount
(
)
seems
broken
"
)
;
}
void
GlobalHelperThreadState
:
:
finish
(
)
{
finishThreads
(
)
;
}
void
GlobalHelperThreadState
:
:
finishThreads
(
)
{
if
(
!
threads
)
return
;
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
for
(
auto
&
thread
:
*
threads
)
thread
.
destroy
(
)
;
threads
.
reset
(
nullptr
)
;
}
void
GlobalHelperThreadState
:
:
lock
(
)
{
helperLock
.
lock
(
)
;
}
void
GlobalHelperThreadState
:
:
unlock
(
)
{
helperLock
.
unlock
(
)
;
}
void
GlobalHelperThreadState
:
:
wait
(
AutoLockHelperThreadState
&
locked
CondVar
which
TimeDuration
timeout
)
{
whichWakeup
(
which
)
.
wait_for
(
locked
timeout
)
;
}
void
GlobalHelperThreadState
:
:
notifyAll
(
CondVar
which
const
AutoLockHelperThreadState
&
)
{
whichWakeup
(
which
)
.
notify_all
(
)
;
}
void
GlobalHelperThreadState
:
:
notifyOne
(
CondVar
which
const
AutoLockHelperThreadState
&
)
{
whichWakeup
(
which
)
.
notify_one
(
)
;
}
bool
GlobalHelperThreadState
:
:
hasActiveThreads
(
const
AutoLockHelperThreadState
&
)
{
if
(
!
threads
)
return
false
;
for
(
auto
&
thread
:
*
threads
)
{
if
(
!
thread
.
idle
(
)
)
return
true
;
}
return
false
;
}
void
GlobalHelperThreadState
:
:
waitForAllThreads
(
)
{
CancelOffThreadIonCompile
(
)
;
AutoLockHelperThreadState
lock
;
while
(
hasActiveThreads
(
lock
)
)
wait
(
lock
CONSUMER
)
;
}
template
<
typename
T
>
bool
GlobalHelperThreadState
:
:
checkTaskThreadLimit
(
size_t
maxThreads
)
const
{
if
(
maxThreads
>
=
threadCount
)
return
true
;
size_t
count
=
0
;
for
(
auto
&
thread
:
*
threads
)
{
if
(
thread
.
currentTask
.
isSome
(
)
&
&
thread
.
currentTask
-
>
is
<
T
>
(
)
)
count
+
+
;
if
(
count
>
=
maxThreads
)
return
false
;
}
return
true
;
}
static
inline
bool
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
ThreadType
threadType
)
{
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_OOM_BREAKPOINT
)
return
js
:
:
oom
:
:
targetThread
=
=
threadType
;
#
else
return
false
;
#
endif
}
size_t
GlobalHelperThreadState
:
:
maxIonCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_ION
)
)
return
1
;
return
threadCount
;
}
size_t
GlobalHelperThreadState
:
:
maxUnpausedIonCompilationThreads
(
)
const
{
return
1
;
}
size_t
GlobalHelperThreadState
:
:
maxWasmCompilationThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_ASMJS
)
)
return
1
;
if
(
cpuCount
<
2
)
return
2
;
return
cpuCount
;
}
size_t
GlobalHelperThreadState
:
:
maxParseThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_PARSE
)
)
return
1
;
return
1
;
}
size_t
GlobalHelperThreadState
:
:
maxCompressionThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_COMPRESS
)
)
return
1
;
return
threadCount
;
}
size_t
GlobalHelperThreadState
:
:
maxGCHelperThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_GCHELPER
)
)
return
1
;
return
threadCount
;
}
size_t
GlobalHelperThreadState
:
:
maxGCParallelThreads
(
)
const
{
if
(
IsHelperThreadSimulatingOOM
(
js
:
:
oom
:
:
THREAD_TYPE_GCPARALLEL
)
)
return
1
;
return
threadCount
;
}
bool
GlobalHelperThreadState
:
:
canStartWasmCompile
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
wasmWorklist
(
lock
)
.
empty
(
)
|
|
numWasmFailedJobs
)
return
false
;
if
(
!
checkTaskThreadLimit
<
wasm
:
:
IonCompileTask
*
>
(
maxWasmCompilationThreads
(
)
)
)
return
false
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
canStartPromiseTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
promiseTasks
(
lock
)
.
empty
(
)
;
}
static
bool
IonBuilderHasHigherPriority
(
jit
:
:
IonBuilder
*
first
jit
:
:
IonBuilder
*
second
)
{
if
(
first
-
>
optimizationInfo
(
)
.
level
(
)
!
=
second
-
>
optimizationInfo
(
)
.
level
(
)
)
return
first
-
>
optimizationInfo
(
)
.
level
(
)
<
second
-
>
optimizationInfo
(
)
.
level
(
)
;
if
(
first
-
>
scriptHasIonScript
(
)
!
=
second
-
>
scriptHasIonScript
(
)
)
return
!
first
-
>
scriptHasIonScript
(
)
;
return
first
-
>
script
(
)
-
>
getWarmUpCount
(
)
/
first
-
>
script
(
)
-
>
length
(
)
>
second
-
>
script
(
)
-
>
getWarmUpCount
(
)
/
second
-
>
script
(
)
-
>
length
(
)
;
}
bool
GlobalHelperThreadState
:
:
canStartIonCompile
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
ionWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
<
jit
:
:
IonBuilder
*
>
(
maxIonCompilationThreads
(
)
)
;
}
jit
:
:
IonBuilder
*
GlobalHelperThreadState
:
:
highestPriorityPendingIonCompile
(
const
AutoLockHelperThreadState
&
lock
bool
remove
)
{
auto
&
worklist
=
ionWorklist
(
lock
)
;
if
(
worklist
.
empty
(
)
)
{
MOZ_ASSERT
(
!
remove
)
;
return
nullptr
;
}
size_t
index
=
0
;
for
(
size_t
i
=
1
;
i
<
worklist
.
length
(
)
;
i
+
+
)
{
if
(
IonBuilderHasHigherPriority
(
worklist
[
i
]
worklist
[
index
]
)
)
index
=
i
;
}
jit
:
:
IonBuilder
*
builder
=
worklist
[
index
]
;
if
(
remove
)
worklist
.
erase
(
&
worklist
[
index
]
)
;
return
builder
;
}
HelperThread
*
GlobalHelperThreadState
:
:
lowestPriorityUnpausedIonCompileAtThreshold
(
const
AutoLockHelperThreadState
&
lock
)
{
size_t
numBuilderThreads
=
0
;
HelperThread
*
thread
=
nullptr
;
for
(
auto
&
thisThread
:
*
threads
)
{
if
(
thisThread
.
ionBuilder
(
)
&
&
!
thisThread
.
pause
)
{
numBuilderThreads
+
+
;
if
(
!
thread
|
|
IonBuilderHasHigherPriority
(
thread
-
>
ionBuilder
(
)
thisThread
.
ionBuilder
(
)
)
)
{
thread
=
&
thisThread
;
}
}
}
if
(
numBuilderThreads
<
maxUnpausedIonCompilationThreads
(
)
)
return
nullptr
;
return
thread
;
}
HelperThread
*
GlobalHelperThreadState
:
:
highestPriorityPausedIonCompile
(
const
AutoLockHelperThreadState
&
lock
)
{
HelperThread
*
thread
=
nullptr
;
for
(
auto
&
thisThread
:
*
threads
)
{
if
(
thisThread
.
pause
)
{
MOZ_ASSERT
(
thisThread
.
ionBuilder
(
)
)
;
if
(
!
thread
|
|
IonBuilderHasHigherPriority
(
thisThread
.
ionBuilder
(
)
thread
-
>
ionBuilder
(
)
)
)
{
thread
=
&
thisThread
;
}
}
}
return
thread
;
}
bool
GlobalHelperThreadState
:
:
pendingIonCompileHasSufficientPriority
(
const
AutoLockHelperThreadState
&
lock
)
{
if
(
!
canStartIonCompile
(
lock
)
)
return
false
;
HelperThread
*
lowestPriorityThread
=
lowestPriorityUnpausedIonCompileAtThreshold
(
lock
)
;
if
(
!
lowestPriorityThread
)
return
true
;
if
(
IonBuilderHasHigherPriority
(
highestPriorityPendingIonCompile
(
lock
)
lowestPriorityThread
-
>
ionBuilder
(
)
)
)
return
true
;
return
false
;
}
bool
GlobalHelperThreadState
:
:
canStartParseTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
parseWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
<
ParseTask
*
>
(
maxParseThreads
(
)
)
;
}
bool
GlobalHelperThreadState
:
:
canStartCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
compressionWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
<
SourceCompressionTask
*
>
(
maxCompressionThreads
(
)
)
;
}
bool
GlobalHelperThreadState
:
:
canStartGCHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
gcHelperWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
<
GCHelperState
*
>
(
maxGCHelperThreads
(
)
)
;
}
bool
GlobalHelperThreadState
:
:
canStartGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
{
return
!
gcParallelWorklist
(
lock
)
.
empty
(
)
&
&
checkTaskThreadLimit
<
GCParallelTask
*
>
(
maxGCParallelThreads
(
)
)
;
}
js
:
:
GCParallelTask
:
:
~
GCParallelTask
(
)
{
#
ifdef
DEBUG
AutoLockHelperThreadState
helperLock
;
MOZ_ASSERT
(
state
=
=
NotStarted
)
;
#
endif
}
bool
js
:
:
GCParallelTask
:
:
startWithLockHeld
(
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
state
=
=
NotStarted
)
;
if
(
!
HelperThreadState
(
)
.
threads
)
return
false
;
if
(
!
HelperThreadState
(
)
.
gcParallelWorklist
(
lock
)
.
append
(
this
)
)
return
false
;
state
=
Dispatched
;
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
return
true
;
}
bool
js
:
:
GCParallelTask
:
:
start
(
)
{
AutoLockHelperThreadState
helperLock
;
return
startWithLockHeld
(
helperLock
)
;
}
void
js
:
:
GCParallelTask
:
:
joinWithLockHeld
(
AutoLockHelperThreadState
&
locked
)
{
if
(
state
=
=
NotStarted
)
return
;
while
(
state
!
=
Finished
)
HelperThreadState
(
)
.
wait
(
locked
GlobalHelperThreadState
:
:
CONSUMER
)
;
state
=
NotStarted
;
cancel_
=
false
;
}
void
js
:
:
GCParallelTask
:
:
join
(
)
{
AutoLockHelperThreadState
helperLock
;
joinWithLockHeld
(
helperLock
)
;
}
void
js
:
:
GCParallelTask
:
:
runFromMainThread
(
JSRuntime
*
rt
)
{
MOZ_ASSERT
(
state
=
=
NotStarted
)
;
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessRuntime
(
rt
)
)
;
uint64_t
timeStart
=
PRMJ_Now
(
)
;
run
(
)
;
duration_
=
PRMJ_Now
(
)
-
timeStart
;
}
void
js
:
:
GCParallelTask
:
:
runFromHelperThread
(
AutoLockHelperThreadState
&
locked
)
{
{
AutoUnlockHelperThreadState
parallelSection
(
locked
)
;
uint64_t
timeStart
=
PRMJ_Now
(
)
;
run
(
)
;
duration_
=
PRMJ_Now
(
)
-
timeStart
;
}
state
=
Finished
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
bool
js
:
:
GCParallelTask
:
:
isRunningWithLockHeld
(
const
AutoLockHelperThreadState
&
locked
)
const
{
return
state
=
=
Dispatched
;
}
bool
js
:
:
GCParallelTask
:
:
isRunning
(
)
const
{
AutoLockHelperThreadState
helperLock
;
return
isRunningWithLockHeld
(
helperLock
)
;
}
void
HelperThread
:
:
handleGCParallelWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartGCParallelTask
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
TraceLoggerThread
*
logger
=
TraceLoggerForCurrentThread
(
)
;
AutoTraceLog
logCompile
(
logger
TraceLogger_GC
)
;
currentTask
.
emplace
(
HelperThreadState
(
)
.
gcParallelWorklist
(
locked
)
.
popCopy
(
)
)
;
gcParallelTask
(
)
-
>
runFromHelperThread
(
locked
)
;
currentTask
.
reset
(
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
static
void
LeaveParseTaskZone
(
JSRuntime
*
rt
ParseTask
*
task
)
{
task
-
>
cx
-
>
leaveCompartment
(
task
-
>
cx
-
>
compartment
(
)
)
;
rt
-
>
clearUsedByExclusiveThread
(
task
-
>
cx
-
>
zone
(
)
)
;
}
ParseTask
*
GlobalHelperThreadState
:
:
removeFinishedParseTask
(
ParseTaskKind
kind
void
*
token
)
{
AutoLockHelperThreadState
lock
;
ParseTaskVector
&
finished
=
parseFinishedList
(
lock
)
;
for
(
size_t
i
=
0
;
i
<
finished
.
length
(
)
;
i
+
+
)
{
if
(
finished
[
i
]
=
=
token
)
{
ParseTask
*
parseTask
=
finished
[
i
]
;
remove
(
finished
&
i
)
;
MOZ_ASSERT
(
parseTask
)
;
MOZ_ASSERT
(
parseTask
-
>
kind
=
=
kind
)
;
return
parseTask
;
}
}
MOZ_CRASH
(
"
Invalid
ParseTask
token
"
)
;
}
JSScript
*
GlobalHelperThreadState
:
:
finishParseTask
(
JSContext
*
cx
ParseTaskKind
kind
void
*
token
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
)
;
ScopedJSDeletePtr
<
ParseTask
>
parseTask
(
removeFinishedParseTask
(
kind
token
)
)
;
Rooted
<
GlobalObject
*
>
global
(
cx
&
cx
-
>
global
(
)
-
>
as
<
GlobalObject
>
(
)
)
;
if
(
!
EnsureParserCreatedClasses
(
cx
kind
)
)
{
LeaveParseTaskZone
(
cx
parseTask
)
;
return
nullptr
;
}
mergeParseTaskCompartment
(
cx
parseTask
global
cx
-
>
compartment
(
)
)
;
if
(
!
parseTask
-
>
finish
(
cx
)
)
return
nullptr
;
RootedScript
script
(
cx
parseTask
-
>
script
)
;
releaseAssertSameCompartment
(
cx
script
)
;
if
(
parseTask
-
>
outOfMemory
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
for
(
size_t
i
=
0
;
i
<
parseTask
-
>
errors
.
length
(
)
;
i
+
+
)
parseTask
-
>
errors
[
i
]
-
>
throwError
(
cx
)
;
if
(
parseTask
-
>
overRecursed
)
ReportOverRecursed
(
cx
)
;
if
(
cx
-
>
isExceptionPending
(
)
)
return
nullptr
;
if
(
!
script
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
Debugger
:
:
onNewScript
(
cx
script
)
;
return
script
;
}
JSScript
*
GlobalHelperThreadState
:
:
finishScriptParseTask
(
JSContext
*
cx
void
*
token
)
{
JSScript
*
script
=
finishParseTask
(
cx
ParseTaskKind
:
:
Script
token
)
;
MOZ_ASSERT_IF
(
script
script
-
>
isGlobalCode
(
)
)
;
return
script
;
}
JSObject
*
GlobalHelperThreadState
:
:
finishModuleParseTask
(
JSContext
*
cx
void
*
token
)
{
JSScript
*
script
=
finishParseTask
(
cx
ParseTaskKind
:
:
Module
token
)
;
if
(
!
script
)
return
nullptr
;
MOZ_ASSERT
(
script
-
>
module
(
)
)
;
RootedModuleObject
module
(
cx
script
-
>
module
(
)
)
;
module
-
>
fixEnvironmentsAfterCompartmentMerge
(
cx
)
;
if
(
!
ModuleObject
:
:
Freeze
(
cx
module
)
)
return
nullptr
;
return
module
;
}
void
GlobalHelperThreadState
:
:
cancelParseTask
(
JSContext
*
cx
ParseTaskKind
kind
void
*
token
)
{
ScopedJSDeletePtr
<
ParseTask
>
parseTask
(
removeFinishedParseTask
(
kind
token
)
)
;
LeaveParseTaskZone
(
cx
parseTask
)
;
}
JSObject
*
GlobalObject
:
:
getStarGeneratorFunctionPrototype
(
)
{
const
Value
&
v
=
getReservedSlot
(
STAR_GENERATOR_FUNCTION_PROTO
)
;
return
v
.
isObject
(
)
?
&
v
.
toObject
(
)
:
nullptr
;
}
void
GlobalHelperThreadState
:
:
mergeParseTaskCompartment
(
JSContext
*
cx
ParseTask
*
parseTask
Handle
<
GlobalObject
*
>
global
JSCompartment
*
dest
)
{
gc
:
:
FinishGC
(
cx
)
;
JS
:
:
AutoAssertNoAlloc
noAlloc
(
cx
)
;
LeaveParseTaskZone
(
cx
parseTask
)
;
{
GlobalObject
*
parseGlobal
=
&
parseTask
-
>
exclusiveContextGlobal
-
>
as
<
GlobalObject
>
(
)
;
JSObject
*
parseTaskStarGenFunctionProto
=
parseGlobal
-
>
getStarGeneratorFunctionPrototype
(
)
;
JSObject
*
moduleProto
=
parseGlobal
-
>
maybeGetModulePrototype
(
)
;
JSObject
*
importEntryProto
=
parseGlobal
-
>
maybeGetImportEntryPrototype
(
)
;
JSObject
*
exportEntryProto
=
parseGlobal
-
>
maybeGetExportEntryPrototype
(
)
;
for
(
auto
group
=
parseTask
-
>
cx
-
>
zone
(
)
-
>
cellIter
<
ObjectGroup
>
(
)
;
!
group
.
done
(
)
;
group
.
next
(
)
)
{
TaggedProto
proto
(
group
-
>
proto
(
)
)
;
if
(
!
proto
.
isObject
(
)
)
continue
;
JSObject
*
protoObj
=
proto
.
toObject
(
)
;
JSObject
*
newProto
;
JSProtoKey
key
=
JS
:
:
IdentifyStandardPrototype
(
protoObj
)
;
if
(
key
!
=
JSProto_Null
)
{
MOZ_ASSERT
(
key
=
=
JSProto_Object
|
|
key
=
=
JSProto_Array
|
|
key
=
=
JSProto_Function
|
|
key
=
=
JSProto_RegExp
|
|
key
=
=
JSProto_Iterator
)
;
newProto
=
GetBuiltinPrototypePure
(
global
key
)
;
}
else
if
(
protoObj
=
=
parseTaskStarGenFunctionProto
)
{
newProto
=
global
-
>
getStarGeneratorFunctionPrototype
(
)
;
}
else
if
(
protoObj
=
=
moduleProto
)
{
newProto
=
global
-
>
getModulePrototype
(
)
;
}
else
if
(
protoObj
=
=
importEntryProto
)
{
newProto
=
global
-
>
getImportEntryPrototype
(
)
;
}
else
if
(
protoObj
=
=
exportEntryProto
)
{
newProto
=
global
-
>
getExportEntryPrototype
(
)
;
}
else
{
continue
;
}
group
-
>
setProtoUnchecked
(
TaggedProto
(
newProto
)
)
;
}
}
gc
:
:
MergeCompartments
(
parseTask
-
>
cx
-
>
compartment
(
)
dest
)
;
}
void
HelperThread
:
:
destroy
(
)
{
if
(
thread
.
isSome
(
)
)
{
{
AutoLockHelperThreadState
lock
;
terminate
=
true
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
}
thread
-
>
join
(
)
;
thread
.
reset
(
)
;
}
threadData
.
reset
(
)
;
}
void
HelperThread
:
:
ThreadMain
(
void
*
arg
)
{
ThisThread
:
:
SetName
(
"
JS
Helper
"
)
;
FIX_FPU
(
)
;
static_cast
<
HelperThread
*
>
(
arg
)
-
>
threadLoop
(
)
;
}
void
HelperThread
:
:
handleWasmWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartWasmCompile
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
currentTask
.
emplace
(
HelperThreadState
(
)
.
wasmWorklist
(
locked
)
.
popCopy
(
)
)
;
bool
success
=
false
;
wasm
:
:
IonCompileTask
*
task
=
wasmTask
(
)
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
success
=
wasm
:
:
CompileFunction
(
task
)
;
}
if
(
success
)
success
=
HelperThreadState
(
)
.
wasmFinishedList
(
locked
)
.
append
(
task
)
;
if
(
!
success
)
HelperThreadState
(
)
.
noteWasmFailure
(
locked
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
currentTask
.
reset
(
)
;
}
void
HelperThread
:
:
handlePromiseTaskWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartPromiseTask
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
PromiseTask
*
task
=
HelperThreadState
(
)
.
promiseTasks
(
locked
)
.
popCopy
(
)
;
currentTask
.
emplace
(
task
)
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
task
-
>
execute
(
)
;
if
(
!
task
-
>
runtime
(
)
-
>
finishAsyncTaskCallback
(
task
)
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
task
-
>
runtime
(
)
-
>
promiseTasksToDestroy
.
lock
(
)
-
>
append
(
task
)
)
oomUnsafe
.
crash
(
"
handlePromiseTaskWorkload
"
)
;
}
}
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
currentTask
.
reset
(
)
;
}
void
HelperThread
:
:
handleIonWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartIonCompile
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
jit
:
:
IonBuilder
*
builder
=
HelperThreadState
(
)
.
highestPriorityPendingIonCompile
(
locked
true
)
;
HelperThread
*
other
=
HelperThreadState
(
)
.
lowestPriorityUnpausedIonCompileAtThreshold
(
locked
)
;
if
(
other
)
{
MOZ_ASSERT
(
other
-
>
ionBuilder
(
)
&
&
!
other
-
>
pause
)
;
other
-
>
pause
=
true
;
}
currentTask
.
emplace
(
builder
)
;
builder
-
>
setPauseFlag
(
&
pause
)
;
JSRuntime
*
rt
=
builder
-
>
script
(
)
-
>
compartment
(
)
-
>
runtimeFromAnyThread
(
)
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
TraceLoggerThread
*
logger
=
TraceLoggerForCurrentThread
(
)
;
TraceLoggerEvent
event
(
logger
TraceLogger_AnnotateScripts
builder
-
>
script
(
)
)
;
AutoTraceLog
logScript
(
logger
event
)
;
AutoTraceLog
logCompile
(
logger
TraceLogger_IonCompilation
)
;
PerThreadData
:
:
AutoEnterRuntime
enter
(
threadData
.
ptr
(
)
builder
-
>
script
(
)
-
>
runtimeFromAnyThread
(
)
)
;
jit
:
:
JitContext
jctx
(
jit
:
:
CompileRuntime
:
:
get
(
rt
)
jit
:
:
CompileCompartment
:
:
get
(
builder
-
>
script
(
)
-
>
compartment
(
)
)
&
builder
-
>
alloc
(
)
)
;
builder
-
>
setBackgroundCodegen
(
jit
:
:
CompileBackEnd
(
builder
)
)
;
}
FinishOffThreadIonCompile
(
builder
locked
)
;
currentTask
.
reset
(
)
;
pause
=
false
;
rt
-
>
requestInterrupt
(
JSRuntime
:
:
RequestInterruptCanWait
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
if
(
HelperThread
*
other
=
HelperThreadState
(
)
.
highestPriorityPausedIonCompile
(
locked
)
)
{
MOZ_ASSERT
(
other
-
>
ionBuilder
(
)
&
&
other
-
>
pause
)
;
jit
:
:
IonBuilder
*
builder
=
HelperThreadState
(
)
.
highestPriorityPendingIonCompile
(
locked
)
;
if
(
!
builder
|
|
IonBuilderHasHigherPriority
(
other
-
>
ionBuilder
(
)
builder
)
)
{
other
-
>
pause
=
false
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
PAUSE
locked
)
;
}
}
}
static
HelperThread
*
CurrentHelperThread
(
)
{
auto
threadId
=
ThisThread
:
:
GetId
(
)
;
HelperThread
*
thread
=
nullptr
;
for
(
auto
&
thisThread
:
*
HelperThreadState
(
)
.
threads
)
{
if
(
thisThread
.
thread
.
isSome
(
)
&
&
threadId
=
=
thisThread
.
thread
-
>
get_id
(
)
)
{
thread
=
&
thisThread
;
break
;
}
}
MOZ_ASSERT
(
thread
)
;
return
thread
;
}
void
js
:
:
PauseCurrentHelperThread
(
)
{
TraceLoggerThread
*
logger
=
TraceLoggerForCurrentThread
(
)
;
AutoTraceLog
logPaused
(
logger
TraceLogger_IonCompilationPaused
)
;
HelperThread
*
thread
=
CurrentHelperThread
(
)
;
AutoLockHelperThreadState
lock
;
while
(
thread
-
>
pause
)
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
PAUSE
)
;
}
void
ExclusiveContext
:
:
setHelperThread
(
HelperThread
*
thread
)
{
helperThread_
=
thread
;
perThreadData
=
thread
-
>
threadData
.
ptr
(
)
;
}
bool
ExclusiveContext
:
:
addPendingCompileError
(
frontend
:
:
CompileError
*
*
error
)
{
UniquePtr
<
frontend
:
:
CompileError
>
errorPtr
(
new_
<
frontend
:
:
CompileError
>
(
)
)
;
if
(
!
errorPtr
)
return
false
;
if
(
!
helperThread
(
)
-
>
parseTask
(
)
-
>
errors
.
append
(
errorPtr
.
get
(
)
)
)
return
false
;
*
error
=
errorPtr
.
release
(
)
;
return
true
;
}
void
ExclusiveContext
:
:
addPendingOverRecursed
(
)
{
if
(
helperThread
(
)
-
>
parseTask
(
)
)
helperThread
(
)
-
>
parseTask
(
)
-
>
overRecursed
=
true
;
}
void
ExclusiveContext
:
:
addPendingOutOfMemory
(
)
{
if
(
helperThread
(
)
-
>
parseTask
(
)
)
helperThread
(
)
-
>
parseTask
(
)
-
>
outOfMemory
=
true
;
}
void
HelperThread
:
:
handleParseWorkload
(
AutoLockHelperThreadState
&
locked
uintptr_t
stackLimit
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartParseTask
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
currentTask
.
emplace
(
HelperThreadState
(
)
.
parseWorklist
(
locked
)
.
popCopy
(
)
)
;
ParseTask
*
task
=
parseTask
(
)
;
task
-
>
cx
-
>
setHelperThread
(
this
)
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
task
-
>
cx
-
>
nativeStackLimit
)
;
i
+
+
)
task
-
>
cx
-
>
nativeStackLimit
[
i
]
=
stackLimit
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
PerThreadData
:
:
AutoEnterRuntime
enter
(
threadData
.
ptr
(
)
task
-
>
exclusiveContextGlobal
-
>
runtimeFromAnyThread
(
)
)
;
task
-
>
parse
(
)
;
}
task
-
>
callback
(
task
task
-
>
callbackData
)
;
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
HelperThreadState
(
)
.
parseFinishedList
(
locked
)
.
append
(
task
)
)
oomUnsafe
.
crash
(
"
handleParseWorkload
"
)
;
}
currentTask
.
reset
(
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
void
HelperThread
:
:
handleCompressionWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartCompressionTask
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
currentTask
.
emplace
(
HelperThreadState
(
)
.
compressionWorklist
(
locked
)
.
popCopy
(
)
)
;
SourceCompressionTask
*
task
=
compressionTask
(
)
;
task
-
>
helperThread
=
this
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
TraceLoggerThread
*
logger
=
TraceLoggerForCurrentThread
(
)
;
AutoTraceLog
logCompile
(
logger
TraceLogger_CompressSource
)
;
task
-
>
result
=
task
-
>
work
(
)
;
}
task
-
>
helperThread
=
nullptr
;
currentTask
.
reset
(
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
bool
js
:
:
StartOffThreadCompression
(
ExclusiveContext
*
cx
SourceCompressionTask
*
task
)
{
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
compressionWorklist
(
lock
)
.
append
(
task
)
)
{
if
(
JSContext
*
maybecx
=
cx
-
>
maybeJSContext
(
)
)
ReportOutOfMemory
(
maybecx
)
;
return
false
;
}
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
return
true
;
}
bool
js
:
:
StartPromiseTask
(
JSContext
*
cx
UniquePtr
<
PromiseTask
>
task
)
{
if
(
!
cx
-
>
startAsyncTaskCallback
(
cx
task
.
get
(
)
)
)
{
MOZ_ASSERT
(
!
cx
-
>
isExceptionPending
(
)
)
;
return
true
;
}
AutoLockHelperThreadState
lock
;
if
(
!
HelperThreadState
(
)
.
promiseTasks
(
lock
)
.
append
(
task
.
get
(
)
)
)
{
Unused
<
<
cx
-
>
finishAsyncTaskCallback
(
task
.
get
(
)
)
;
ReportOutOfMemory
(
cx
)
;
return
false
;
}
Unused
<
<
task
.
release
(
)
;
HelperThreadState
(
)
.
notifyOne
(
GlobalHelperThreadState
:
:
PRODUCER
lock
)
;
return
true
;
}
bool
GlobalHelperThreadState
:
:
compressionInProgress
(
SourceCompressionTask
*
task
const
AutoLockHelperThreadState
&
lock
)
{
for
(
size_t
i
=
0
;
i
<
compressionWorklist
(
lock
)
.
length
(
)
;
i
+
+
)
{
if
(
compressionWorklist
(
lock
)
[
i
]
=
=
task
)
return
true
;
}
for
(
auto
&
thread
:
*
threads
)
{
if
(
thread
.
compressionTask
(
)
=
=
task
)
return
true
;
}
return
false
;
}
bool
SourceCompressionTask
:
:
complete
(
)
{
if
(
!
active
(
)
)
return
true
;
{
AutoLockHelperThreadState
lock
;
while
(
HelperThreadState
(
)
.
compressionInProgress
(
this
lock
)
)
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
CONSUMER
)
;
}
if
(
result
=
=
Success
)
{
MOZ_ASSERT
(
resultString
)
;
ss
-
>
setCompressedSource
(
mozilla
:
:
Move
(
*
resultString
)
ss
-
>
length
(
)
)
;
}
else
{
if
(
result
=
=
OOM
)
ReportOutOfMemory
(
cx
)
;
}
ss
=
nullptr
;
MOZ_ASSERT
(
!
active
(
)
)
;
return
result
!
=
OOM
;
}
SourceCompressionTask
*
GlobalHelperThreadState
:
:
compressionTaskForSource
(
ScriptSource
*
ss
const
AutoLockHelperThreadState
&
lock
)
{
for
(
size_t
i
=
0
;
i
<
compressionWorklist
(
lock
)
.
length
(
)
;
i
+
+
)
{
SourceCompressionTask
*
task
=
compressionWorklist
(
lock
)
[
i
]
;
if
(
task
-
>
source
(
)
=
=
ss
)
return
task
;
}
for
(
auto
&
thread
:
*
threads
)
{
SourceCompressionTask
*
task
=
thread
.
compressionTask
(
)
;
if
(
task
&
&
task
-
>
source
(
)
=
=
ss
)
return
task
;
}
return
nullptr
;
}
void
GlobalHelperThreadState
:
:
trace
(
JSTracer
*
trc
)
{
AutoLockHelperThreadState
lock
;
for
(
auto
builder
:
ionWorklist
(
lock
)
)
builder
-
>
trace
(
trc
)
;
for
(
auto
builder
:
ionFinishedList
(
lock
)
)
builder
-
>
trace
(
trc
)
;
if
(
HelperThreadState
(
)
.
threads
)
{
for
(
auto
&
helper
:
*
HelperThreadState
(
)
.
threads
)
{
if
(
auto
builder
=
helper
.
ionBuilder
(
)
)
builder
-
>
trace
(
trc
)
;
}
}
jit
:
:
IonBuilder
*
builder
=
trc
-
>
runtime
(
)
-
>
ionLazyLinkList
(
)
.
getFirst
(
)
;
while
(
builder
)
{
builder
-
>
trace
(
trc
)
;
builder
=
builder
-
>
getNext
(
)
;
}
for
(
auto
parseTask
:
parseWorklist_
)
parseTask
-
>
trace
(
trc
)
;
for
(
auto
parseTask
:
parseFinishedList_
)
parseTask
-
>
trace
(
trc
)
;
for
(
auto
parseTask
:
parseWaitingOnGC_
)
parseTask
-
>
trace
(
trc
)
;
}
void
HelperThread
:
:
handleGCHelperWorkload
(
AutoLockHelperThreadState
&
locked
)
{
MOZ_ASSERT
(
HelperThreadState
(
)
.
canStartGCHelperTask
(
locked
)
)
;
MOZ_ASSERT
(
idle
(
)
)
;
currentTask
.
emplace
(
HelperThreadState
(
)
.
gcHelperWorklist
(
locked
)
.
popCopy
(
)
)
;
GCHelperState
*
task
=
gcHelperTask
(
)
;
{
AutoUnlockHelperThreadState
unlock
(
locked
)
;
task
-
>
work
(
)
;
}
currentTask
.
reset
(
)
;
HelperThreadState
(
)
.
notifyAll
(
GlobalHelperThreadState
:
:
CONSUMER
locked
)
;
}
void
HelperThread
:
:
threadLoop
(
)
{
MOZ_ASSERT
(
CanUseExtraThreads
(
)
)
;
JS
:
:
AutoSuppressGCAnalysis
nogc
;
AutoLockHelperThreadState
lock
;
js
:
:
TlsPerThreadData
.
set
(
threadData
.
ptr
(
)
)
;
uintptr_t
stackLimit
=
GetNativeStackBase
(
)
;
#
if
JS_STACK_GROWTH_DIRECTION
>
0
stackLimit
+
=
HELPER_STACK_QUOTA
;
#
else
stackLimit
-
=
HELPER_STACK_QUOTA
;
#
endif
while
(
true
)
{
MOZ_ASSERT
(
idle
(
)
)
;
bool
ionCompile
=
false
;
while
(
true
)
{
if
(
terminate
)
return
;
if
(
(
ionCompile
=
HelperThreadState
(
)
.
pendingIonCompileHasSufficientPriority
(
lock
)
)
|
|
HelperThreadState
(
)
.
canStartWasmCompile
(
lock
)
|
|
HelperThreadState
(
)
.
canStartPromiseTask
(
lock
)
|
|
HelperThreadState
(
)
.
canStartParseTask
(
lock
)
|
|
HelperThreadState
(
)
.
canStartCompressionTask
(
lock
)
|
|
HelperThreadState
(
)
.
canStartGCHelperTask
(
lock
)
|
|
HelperThreadState
(
)
.
canStartGCParallelTask
(
lock
)
)
{
break
;
}
HelperThreadState
(
)
.
wait
(
lock
GlobalHelperThreadState
:
:
PRODUCER
)
;
}
if
(
ionCompile
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_ION
)
;
handleIonWorkload
(
lock
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartWasmCompile
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_ASMJS
)
;
handleWasmWorkload
(
lock
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartPromiseTask
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_PROMISE_TASK
)
;
handlePromiseTaskWorkload
(
lock
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartParseTask
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_PARSE
)
;
handleParseWorkload
(
lock
stackLimit
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartCompressionTask
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_COMPRESS
)
;
handleCompressionWorkload
(
lock
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartGCHelperTask
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_GCHELPER
)
;
handleGCHelperWorkload
(
lock
)
;
}
else
if
(
HelperThreadState
(
)
.
canStartGCParallelTask
(
lock
)
)
{
js
:
:
oom
:
:
SetThreadType
(
js
:
:
oom
:
:
THREAD_TYPE_GCPARALLEL
)
;
handleGCParallelWorkload
(
lock
)
;
}
else
{
MOZ_CRASH
(
"
No
task
to
perform
"
)
;
}
}
}
