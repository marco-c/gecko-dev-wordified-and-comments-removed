#
ifndef
vm_ReceiverGuard_h
#
define
vm_ReceiverGuard_h
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
class
HeapReceiverGuard
;
class
ReceiverGuard
{
public
:
ObjectGroup
*
group
;
Shape
*
shape
;
ReceiverGuard
(
)
:
group
(
nullptr
)
shape
(
nullptr
)
{
}
inline
MOZ_IMPLICIT
ReceiverGuard
(
const
HeapReceiverGuard
&
guard
)
;
explicit
MOZ_ALWAYS_INLINE
ReceiverGuard
(
JSObject
*
obj
)
;
MOZ_ALWAYS_INLINE
ReceiverGuard
(
ObjectGroup
*
group
Shape
*
shape
)
;
bool
operator
=
=
(
const
ReceiverGuard
&
other
)
const
{
return
group
=
=
other
.
group
&
&
shape
=
=
other
.
shape
;
}
bool
operator
!
=
(
const
ReceiverGuard
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
uintptr_t
hash
(
)
const
{
return
(
uintptr_t
(
group
)
>
>
3
)
^
(
uintptr_t
(
shape
)
>
>
3
)
;
}
}
;
class
HeapReceiverGuard
{
friend
class
ReceiverGuard
;
GCPtrObjectGroup
group_
;
GCPtrShape
shape_
;
public
:
explicit
HeapReceiverGuard
(
const
ReceiverGuard
&
guard
)
:
group_
(
guard
.
group
)
shape_
(
guard
.
shape
)
{
}
void
trace
(
JSTracer
*
trc
)
;
}
;
inline
ReceiverGuard
:
:
ReceiverGuard
(
const
HeapReceiverGuard
&
guard
)
:
group
(
guard
.
group_
)
shape
(
guard
.
shape_
)
{
}
}
#
endif
