#
include
"
vm
/
ErrorContext
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
#
include
"
util
/
DifferentialTesting
.
h
"
#
include
"
vm
/
JSContext
.
h
"
using
namespace
js
;
void
FrontendAllocator
:
:
reportAllocationOverflow
(
)
{
context_
-
>
onAllocationOverflow
(
)
;
}
void
*
FrontendAllocator
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
return
context_
-
>
onOutOfMemory
(
allocFunc
arena
nbytes
reallocPtr
)
;
}
bool
FrontendContext
:
:
hadErrors
(
)
const
{
if
(
maybeCx_
)
{
if
(
maybeCx_
-
>
isExceptionPending
(
)
)
{
return
true
;
}
}
return
errors_
.
hadErrors
(
)
;
}
void
*
FrontendContext
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
addPendingOutOfMemory
(
)
;
return
nullptr
;
}
void
FrontendContext
:
:
onAllocationOverflow
(
)
{
errors_
.
allocationOverflow
=
true
;
}
void
FrontendContext
:
:
onOutOfMemory
(
)
{
addPendingOutOfMemory
(
)
;
}
void
FrontendContext
:
:
onOverRecursed
(
)
{
errors_
.
overRecursed
=
true
;
}
void
FrontendContext
:
:
recoverFromOutOfMemory
(
)
{
if
(
maybeCx_
)
{
maybeCx_
-
>
recoverFromOutOfMemory
(
)
;
}
errors_
.
outOfMemory
=
false
;
}
const
JSErrorFormatString
*
FrontendContext
:
:
gcSafeCallback
(
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
)
{
if
(
maybeCx_
)
{
gc
:
:
AutoSuppressGC
suppressGC
(
maybeCx_
)
;
return
callback
(
userRef
errorNumber
)
;
}
return
callback
(
userRef
errorNumber
)
;
}
void
FrontendContext
:
:
reportError
(
CompileError
&
&
err
)
{
if
(
errors_
.
error
)
{
errors_
.
error
.
reset
(
)
;
}
errors_
.
error
.
emplace
(
std
:
:
move
(
err
)
)
;
}
bool
FrontendContext
:
:
reportWarning
(
CompileError
&
&
err
)
{
if
(
!
errors_
.
warnings
.
append
(
std
:
:
move
(
err
)
)
)
{
ReportOutOfMemory
(
)
;
return
false
;
}
return
true
;
}
void
FrontendContext
:
:
ReportOutOfMemory
(
)
{
if
(
SupportDifferentialTesting
(
)
)
{
fprintf
(
stderr
"
ReportOutOfMemory
called
\
n
"
)
;
}
addPendingOutOfMemory
(
)
;
}
void
FrontendContext
:
:
addPendingOutOfMemory
(
)
{
errors_
.
outOfMemory
=
true
;
}
void
FrontendContext
:
:
setCurrentJSContext
(
JSContext
*
cx
)
{
maybeCx_
=
cx
;
}
void
FrontendContext
:
:
convertToRuntimeError
(
JSContext
*
cx
Warning
warning
)
{
if
(
hadOutOfMemory
(
)
)
{
js
:
:
ReportOutOfMemory
(
cx
)
;
return
;
}
if
(
maybeError
(
)
)
{
maybeError
(
)
-
>
throwError
(
cx
)
;
}
if
(
warning
=
=
Warning
:
:
Report
)
{
for
(
CompileError
&
error
:
warnings
(
)
)
{
error
.
throwError
(
cx
)
;
}
}
if
(
hadOverRecursed
(
)
)
{
js
:
:
ReportOverRecursed
(
cx
)
;
}
if
(
hadAllocationOverflow
(
)
)
{
js
:
:
ReportAllocationOverflow
(
cx
)
;
}
}
void
FrontendContext
:
:
linkWithJSContext
(
JSContext
*
cx
)
{
if
(
cx
)
{
cx
-
>
setFrontendErrors
(
&
errors_
)
;
}
}
#
ifdef
__wasi__
void
FrontendContext
:
:
incWasiRecursionDepth
(
)
{
if
(
maybeCx_
)
{
IncWasiRecursionDepth
(
maybeCx_
)
;
}
}
void
FrontendContext
:
:
decWasiRecursionDepth
(
)
{
if
(
maybeCx_
)
{
DecWasiRecursionDepth
(
maybeCx_
)
;
}
}
bool
FrontendContext
:
:
checkWasiRecursionLimit
(
)
{
if
(
maybeCx_
)
{
return
CheckWasiRecursionLimit
(
maybeCx_
)
;
}
return
true
;
}
JS_PUBLIC_API
void
js
:
:
IncWasiRecursionDepth
(
FrontendContext
*
fc
)
{
fc
-
>
incWasiRecursionDepth
(
)
;
}
JS_PUBLIC_API
void
js
:
:
DecWasiRecursionDepth
(
FrontendContext
*
fc
)
{
fc
-
>
decWasiRecursionDepth
(
)
;
}
JS_PUBLIC_API
bool
js
:
:
CheckWasiRecursionLimit
(
FrontendContext
*
fc
)
{
return
fc
-
>
checkWasiRecursionLimit
(
)
;
}
#
endif
