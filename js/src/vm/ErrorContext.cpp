#
include
"
vm
/
ErrorContext
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
void
ErrorAllocator
:
:
reportAllocationOverflow
(
)
{
context_
-
>
reportAllocationOverflow
(
)
;
}
void
*
ErrorAllocator
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
return
context_
-
>
onOutOfMemory
(
allocFunc
arena
nbytes
reallocPtr
)
;
}
GeneralErrorContext
:
:
GeneralErrorContext
(
JSContext
*
cx
)
:
cx_
(
cx
)
{
}
bool
GeneralErrorContext
:
:
addPendingError
(
CompileError
*
*
error
)
{
return
true
;
}
void
*
GeneralErrorContext
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
return
cx_
-
>
onOutOfMemory
(
allocFunc
arena
nbytes
reallocPtr
)
;
}
void
GeneralErrorContext
:
:
reportAllocationOverflow
(
)
{
return
cx_
-
>
reportAllocationOverflow
(
)
;
}
const
JSErrorFormatString
*
GeneralErrorContext
:
:
gcSafeCallback
(
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
)
{
gc
:
:
AutoSuppressGC
suppressGC
(
cx_
)
;
return
callback
(
userRef
errorNumber
)
;
}
void
GeneralErrorContext
:
:
reportError
(
CompileError
*
err
)
{
if
(
MOZ_UNLIKELY
(
!
cx_
-
>
runtime
(
)
-
>
hasInitializedSelfHosting
(
)
)
)
{
selfHosting_ErrorReporter
(
err
)
;
return
;
}
err
-
>
throwError
(
cx_
)
;
}
void
GeneralErrorContext
:
:
reportWarning
(
CompileError
*
err
)
{
if
(
!
cx_
-
>
isHelperThreadContext
(
)
)
{
err
-
>
throwError
(
cx_
)
;
}
}
bool
GeneralErrorContext
:
:
hadOutOfMemory
(
)
const
{
return
cx_
-
>
offThreadFrontendErrors
(
)
-
>
outOfMemory
;
}
bool
GeneralErrorContext
:
:
hadOverRecursed
(
)
const
{
return
cx_
-
>
offThreadFrontendErrors
(
)
-
>
overRecursed
;
}
const
Vector
<
UniquePtr
<
CompileError
>
0
SystemAllocPolicy
>
&
GeneralErrorContext
:
:
errors
(
)
const
{
return
cx_
-
>
offThreadFrontendErrors
(
)
-
>
errors
;
}
bool
OffThreadErrorContext
:
:
addPendingError
(
CompileError
*
*
error
)
{
auto
errorPtr
=
getAllocator
(
)
-
>
make_unique
<
CompileError
>
(
)
;
if
(
!
errorPtr
)
{
return
false
;
}
if
(
!
errors_
.
errors
.
append
(
std
:
:
move
(
errorPtr
)
)
)
{
ReportOutOfMemory
(
)
;
return
false
;
}
*
error
=
errors_
.
errors
.
back
(
)
.
get
(
)
;
return
true
;
}
void
*
OffThreadErrorContext
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
addPendingOutOfMemory
(
)
;
return
nullptr
;
}
void
OffThreadErrorContext
:
:
reportAllocationOverflow
(
)
{
}
const
JSErrorFormatString
*
OffThreadErrorContext
:
:
gcSafeCallback
(
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
)
{
return
callback
(
userRef
errorNumber
)
;
}
void
OffThreadErrorContext
:
:
reportError
(
CompileError
*
err
)
{
}
void
OffThreadErrorContext
:
:
reportWarning
(
CompileError
*
err
)
{
}
void
OffThreadErrorContext
:
:
ReportOutOfMemory
(
)
{
if
(
SupportDifferentialTesting
(
)
)
{
fprintf
(
stderr
"
ReportOutOfMemory
called
\
n
"
)
;
}
return
addPendingOutOfMemory
(
)
;
}
void
OffThreadErrorContext
:
:
addPendingOutOfMemory
(
)
{
errors_
.
outOfMemory
=
true
;
}
void
OffThreadErrorContext
:
:
linkWithJSContext
(
JSContext
*
cx
)
{
if
(
cx
)
{
cx
-
>
setOffThreadFrontendErrors
(
&
errors_
)
;
}
}
