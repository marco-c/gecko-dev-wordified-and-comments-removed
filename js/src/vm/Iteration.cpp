#
include
"
vm
/
Iteration
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
<
algorithm
>
#
include
<
new
>
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
ds
/
Sort
.
h
"
#
include
"
gc
/
FreeOp
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
util
/
DifferentialTesting
.
h
"
#
include
"
util
/
Poison
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
PlainObject
-
inl
.
h
"
#
include
"
vm
/
ReceiverGuard
-
inl
.
h
"
#
include
"
vm
/
Stack
-
inl
.
h
"
#
include
"
vm
/
StringType
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
ArrayEqual
;
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
PodCopy
;
using
RootedPropertyIteratorObject
=
Rooted
<
PropertyIteratorObject
*
>
;
static
const
gc
:
:
AllocKind
ITERATOR_FINALIZE_KIND
=
gc
:
:
AllocKind
:
:
OBJECT2_BACKGROUND
;
void
NativeIterator
:
:
trace
(
JSTracer
*
trc
)
{
TraceNullableEdge
(
trc
&
objectBeingIterated_
"
objectBeingIterated_
"
)
;
TraceNullableEdge
(
trc
&
iterObj_
"
iterObj
"
)
;
std
:
:
for_each
(
guardsBegin
(
)
guardsEnd
(
)
[
trc
]
(
HeapReceiverGuard
&
guard
)
{
guard
.
trace
(
trc
)
;
}
)
;
GCPtrLinearString
*
begin
=
MOZ_LIKELY
(
isInitialized
(
)
)
?
propertiesBegin
(
)
:
propertyCursor_
;
std
:
:
for_each
(
begin
propertiesEnd
(
)
[
trc
]
(
GCPtrLinearString
&
prop
)
{
TraceEdge
(
trc
&
prop
"
prop
"
)
;
}
)
;
}
using
IdSet
=
GCHashSet
<
jsid
DefaultHasher
<
jsid
>
>
;
template
<
bool
CheckForDuplicates
>
static
inline
bool
Enumerate
(
JSContext
*
cx
HandleObject
pobj
jsid
id
bool
enumerable
unsigned
flags
MutableHandle
<
IdSet
>
visited
MutableHandleIdVector
props
)
{
if
(
CheckForDuplicates
)
{
IdSet
:
:
AddPtr
p
=
visited
.
lookupForAdd
(
id
)
;
if
(
MOZ_UNLIKELY
(
!
!
p
)
)
{
return
true
;
}
if
(
pobj
-
>
is
<
ProxyObject
>
(
)
|
|
pobj
-
>
staticPrototype
(
)
|
|
pobj
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
{
if
(
!
visited
.
add
(
p
id
)
)
{
return
false
;
}
}
}
if
(
!
enumerable
&
&
!
(
flags
&
JSITER_HIDDEN
)
)
{
return
true
;
}
if
(
JSID_IS_SYMBOL
(
id
)
)
{
if
(
!
(
flags
&
JSITER_SYMBOLS
)
)
{
return
true
;
}
if
(
!
(
flags
&
JSITER_PRIVATE
)
&
&
id
.
isPrivateName
(
)
)
{
return
true
;
}
}
else
{
if
(
(
flags
&
JSITER_SYMBOLSONLY
)
)
{
return
true
;
}
}
return
props
.
append
(
id
)
;
}
static
bool
EnumerateExtraProperties
(
JSContext
*
cx
HandleObject
obj
unsigned
flags
MutableHandle
<
IdSet
>
visited
MutableHandleIdVector
props
)
{
MOZ_ASSERT
(
obj
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
;
RootedIdVector
properties
(
cx
)
;
bool
enumerableOnly
=
!
(
flags
&
JSITER_HIDDEN
)
;
if
(
!
obj
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
(
cx
obj
&
properties
enumerableOnly
)
)
{
return
false
;
}
RootedId
id
(
cx
)
;
for
(
size_t
n
=
0
;
n
<
properties
.
length
(
)
;
n
+
+
)
{
id
=
properties
[
n
]
;
bool
enumerable
=
true
;
if
(
!
Enumerate
<
true
>
(
cx
obj
id
enumerable
flags
visited
props
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
SortComparatorIntegerIds
(
jsid
a
jsid
b
bool
*
lessOrEqualp
)
{
uint32_t
indexA
indexB
;
MOZ_ALWAYS_TRUE
(
IdIsIndex
(
a
&
indexA
)
)
;
MOZ_ALWAYS_TRUE
(
IdIsIndex
(
b
&
indexB
)
)
;
*
lessOrEqualp
=
(
indexA
<
=
indexB
)
;
return
true
;
}
template
<
bool
CheckForDuplicates
>
static
bool
EnumerateNativeProperties
(
JSContext
*
cx
HandleNativeObject
pobj
unsigned
flags
MutableHandle
<
IdSet
>
visited
MutableHandleIdVector
props
)
{
bool
enumerateSymbols
;
if
(
flags
&
JSITER_SYMBOLSONLY
)
{
enumerateSymbols
=
true
;
}
else
{
size_t
firstElemIndex
=
props
.
length
(
)
;
size_t
initlen
=
pobj
-
>
getDenseInitializedLength
(
)
;
const
Value
*
vp
=
pobj
-
>
getDenseElements
(
)
;
bool
hasHoles
=
false
;
for
(
size_t
i
=
0
;
i
<
initlen
;
+
+
i
+
+
vp
)
{
if
(
vp
-
>
isMagic
(
JS_ELEMENTS_HOLE
)
)
{
hasHoles
=
true
;
}
else
{
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
INT_TO_JSID
(
i
)
true
flags
visited
props
)
)
{
return
false
;
}
}
}
if
(
pobj
-
>
is
<
TypedArrayObject
>
(
)
)
{
size_t
len
=
pobj
-
>
as
<
TypedArrayObject
>
(
)
.
length
(
)
.
get
(
)
;
static_assert
(
JSID_INT_MAX
=
=
INT32_MAX
)
;
if
(
len
>
INT32_MAX
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
INT_TO_JSID
(
i
)
true
flags
visited
props
)
)
{
return
false
;
}
}
}
bool
isIndexed
=
pobj
-
>
isIndexed
(
)
;
if
(
isIndexed
)
{
if
(
!
hasHoles
)
{
firstElemIndex
=
props
.
length
(
)
;
}
for
(
Shape
:
:
Range
<
NoGC
>
r
(
pobj
-
>
lastProperty
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Shape
&
shape
=
r
.
front
(
)
;
jsid
id
=
shape
.
propid
(
)
;
uint32_t
dummy
;
if
(
IdIsIndex
(
id
&
dummy
)
)
{
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
id
shape
.
enumerable
(
)
flags
visited
props
)
)
{
return
false
;
}
}
}
MOZ_ASSERT
(
firstElemIndex
<
=
props
.
length
(
)
)
;
jsid
*
ids
=
props
.
begin
(
)
+
firstElemIndex
;
size_t
n
=
props
.
length
(
)
-
firstElemIndex
;
RootedIdVector
tmp
(
cx
)
;
if
(
!
tmp
.
resize
(
n
)
)
{
return
false
;
}
PodCopy
(
tmp
.
begin
(
)
ids
n
)
;
if
(
!
MergeSort
(
ids
n
tmp
.
begin
(
)
SortComparatorIntegerIds
)
)
{
return
false
;
}
}
size_t
initialLength
=
props
.
length
(
)
;
bool
symbolsFound
=
false
;
Shape
:
:
Range
<
NoGC
>
r
(
pobj
-
>
lastProperty
(
)
)
;
for
(
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Shape
&
shape
=
r
.
front
(
)
;
jsid
id
=
shape
.
propid
(
)
;
if
(
JSID_IS_SYMBOL
(
id
)
)
{
symbolsFound
=
true
;
continue
;
}
uint32_t
dummy
;
if
(
isIndexed
&
&
IdIsIndex
(
id
&
dummy
)
)
{
continue
;
}
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
id
shape
.
enumerable
(
)
flags
visited
props
)
)
{
return
false
;
}
}
std
:
:
reverse
(
props
.
begin
(
)
+
initialLength
props
.
end
(
)
)
;
enumerateSymbols
=
symbolsFound
&
&
(
flags
&
JSITER_SYMBOLS
)
;
}
if
(
enumerateSymbols
)
{
size_t
initialLength
=
props
.
length
(
)
;
for
(
Shape
:
:
Range
<
NoGC
>
r
(
pobj
-
>
lastProperty
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Shape
&
shape
=
r
.
front
(
)
;
jsid
id
=
shape
.
propid
(
)
;
if
(
JSID_IS_SYMBOL
(
id
)
)
{
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
id
shape
.
enumerable
(
)
flags
visited
props
)
)
{
return
false
;
}
}
}
std
:
:
reverse
(
props
.
begin
(
)
+
initialLength
props
.
end
(
)
)
;
}
return
true
;
}
static
bool
EnumerateNativeProperties
(
JSContext
*
cx
HandleNativeObject
pobj
unsigned
flags
MutableHandle
<
IdSet
>
visited
MutableHandleIdVector
props
bool
checkForDuplicates
)
{
if
(
checkForDuplicates
)
{
return
EnumerateNativeProperties
<
true
>
(
cx
pobj
flags
visited
props
)
;
}
return
EnumerateNativeProperties
<
false
>
(
cx
pobj
flags
visited
props
)
;
}
template
<
bool
CheckForDuplicates
>
static
bool
EnumerateProxyProperties
(
JSContext
*
cx
HandleObject
pobj
unsigned
flags
MutableHandle
<
IdSet
>
visited
MutableHandleIdVector
props
)
{
MOZ_ASSERT
(
pobj
-
>
is
<
ProxyObject
>
(
)
)
;
RootedIdVector
proxyProps
(
cx
)
;
if
(
flags
&
JSITER_HIDDEN
|
|
flags
&
JSITER_SYMBOLS
)
{
if
(
!
Proxy
:
:
ownPropertyKeys
(
cx
pobj
&
proxyProps
)
)
{
return
false
;
}
Rooted
<
PropertyDescriptor
>
desc
(
cx
)
;
for
(
size_t
n
=
0
len
=
proxyProps
.
length
(
)
;
n
<
len
;
n
+
+
)
{
bool
enumerable
=
false
;
if
(
!
(
flags
&
JSITER_HIDDEN
)
)
{
if
(
!
Proxy
:
:
getOwnPropertyDescriptor
(
cx
pobj
proxyProps
[
n
]
&
desc
)
)
{
return
false
;
}
enumerable
=
desc
.
enumerable
(
)
;
}
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
proxyProps
[
n
]
enumerable
flags
visited
props
)
)
{
return
false
;
}
}
return
true
;
}
if
(
!
Proxy
:
:
getOwnEnumerablePropertyKeys
(
cx
pobj
&
proxyProps
)
)
{
return
false
;
}
for
(
size_t
n
=
0
len
=
proxyProps
.
length
(
)
;
n
<
len
;
n
+
+
)
{
if
(
!
Enumerate
<
CheckForDuplicates
>
(
cx
pobj
proxyProps
[
n
]
true
flags
visited
props
)
)
{
return
false
;
}
}
return
true
;
}
#
ifdef
DEBUG
struct
SortComparatorIds
{
JSContext
*
const
cx
;
explicit
SortComparatorIds
(
JSContext
*
cx
)
:
cx
(
cx
)
{
}
bool
operator
(
)
(
jsid
aArg
jsid
bArg
bool
*
lessOrEqualp
)
{
RootedId
a
(
cx
aArg
)
;
RootedId
b
(
cx
bArg
)
;
if
(
a
=
=
b
)
{
*
lessOrEqualp
=
true
;
return
true
;
}
size_t
ta
=
JSID_BITS
(
a
.
get
(
)
)
&
JSID_TYPE_MASK
;
size_t
tb
=
JSID_BITS
(
b
.
get
(
)
)
&
JSID_TYPE_MASK
;
if
(
ta
!
=
tb
)
{
*
lessOrEqualp
=
(
ta
<
=
tb
)
;
return
true
;
}
if
(
JSID_IS_INT
(
a
)
)
{
*
lessOrEqualp
=
(
JSID_TO_INT
(
a
)
<
=
JSID_TO_INT
(
b
)
)
;
return
true
;
}
RootedString
astr
(
cx
)
bstr
(
cx
)
;
if
(
JSID_IS_SYMBOL
(
a
)
)
{
MOZ_ASSERT
(
JSID_IS_SYMBOL
(
b
)
)
;
JS
:
:
SymbolCode
ca
=
JSID_TO_SYMBOL
(
a
)
-
>
code
(
)
;
JS
:
:
SymbolCode
cb
=
JSID_TO_SYMBOL
(
b
)
-
>
code
(
)
;
if
(
ca
!
=
cb
)
{
*
lessOrEqualp
=
uint32_t
(
ca
)
<
=
uint32_t
(
cb
)
;
return
true
;
}
MOZ_ASSERT
(
ca
=
=
JS
:
:
SymbolCode
:
:
InSymbolRegistry
|
|
ca
=
=
JS
:
:
SymbolCode
:
:
UniqueSymbol
)
;
astr
=
JSID_TO_SYMBOL
(
a
)
-
>
description
(
)
;
bstr
=
JSID_TO_SYMBOL
(
b
)
-
>
description
(
)
;
if
(
!
astr
|
|
!
bstr
)
{
*
lessOrEqualp
=
!
astr
;
return
true
;
}
}
else
{
astr
=
IdToString
(
cx
a
)
;
if
(
!
astr
)
{
return
false
;
}
bstr
=
IdToString
(
cx
b
)
;
if
(
!
bstr
)
{
return
false
;
}
}
int32_t
result
;
if
(
!
CompareStrings
(
cx
astr
bstr
&
result
)
)
{
return
false
;
}
*
lessOrEqualp
=
(
result
<
=
0
)
;
return
true
;
}
}
;
#
endif
static
bool
Snapshot
(
JSContext
*
cx
HandleObject
pobj_
unsigned
flags
MutableHandleIdVector
props
)
{
Rooted
<
IdSet
>
visited
(
cx
IdSet
(
cx
)
)
;
RootedObject
pobj
(
cx
pobj_
)
;
bool
checkForDuplicates
=
!
(
flags
&
JSITER_OWNONLY
)
;
do
{
if
(
pobj
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
{
if
(
!
EnumerateExtraProperties
(
cx
pobj
flags
&
visited
props
)
)
{
return
false
;
}
if
(
pobj
-
>
isNative
(
)
)
{
if
(
!
EnumerateNativeProperties
(
cx
pobj
.
as
<
NativeObject
>
(
)
flags
&
visited
props
true
)
)
{
return
false
;
}
}
}
else
if
(
pobj
-
>
isNative
(
)
)
{
if
(
JSEnumerateOp
enumerate
=
pobj
-
>
getClass
(
)
-
>
getEnumerate
(
)
)
{
if
(
!
enumerate
(
cx
pobj
.
as
<
NativeObject
>
(
)
)
)
{
return
false
;
}
}
if
(
!
EnumerateNativeProperties
(
cx
pobj
.
as
<
NativeObject
>
(
)
flags
&
visited
props
checkForDuplicates
)
)
{
return
false
;
}
}
else
if
(
pobj
-
>
is
<
ProxyObject
>
(
)
)
{
if
(
checkForDuplicates
)
{
if
(
!
EnumerateProxyProperties
<
true
>
(
cx
pobj
flags
&
visited
props
)
)
{
return
false
;
}
}
else
{
if
(
!
EnumerateProxyProperties
<
false
>
(
cx
pobj
flags
&
visited
props
)
)
{
return
false
;
}
}
}
else
{
MOZ_CRASH
(
"
non
-
native
objects
must
have
an
enumerate
op
"
)
;
}
if
(
flags
&
JSITER_OWNONLY
)
{
break
;
}
if
(
!
GetPrototype
(
cx
pobj
&
pobj
)
)
{
return
false
;
}
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
}
while
(
pobj
!
=
nullptr
)
;
#
ifdef
DEBUG
if
(
js
:
:
SupportDifferentialTesting
(
)
)
{
jsid
*
ids
=
props
.
begin
(
)
;
size_t
n
=
props
.
length
(
)
;
RootedIdVector
tmp
(
cx
)
;
if
(
!
tmp
.
resize
(
n
)
)
{
return
false
;
}
PodCopy
(
tmp
.
begin
(
)
ids
n
)
;
if
(
!
MergeSort
(
ids
n
tmp
.
begin
(
)
SortComparatorIds
(
cx
)
)
)
{
return
false
;
}
}
#
endif
return
true
;
}
JS_FRIEND_API
bool
js
:
:
GetPropertyKeys
(
JSContext
*
cx
HandleObject
obj
unsigned
flags
MutableHandleIdVector
props
)
{
return
Snapshot
(
cx
obj
flags
&
(
JSITER_OWNONLY
|
JSITER_HIDDEN
|
JSITER_SYMBOLS
|
JSITER_SYMBOLSONLY
|
JSITER_PRIVATE
)
props
)
;
}
static
inline
void
RegisterEnumerator
(
ObjectRealm
&
realm
NativeIterator
*
ni
)
{
ni
-
>
link
(
realm
.
enumerators
)
;
MOZ_ASSERT
(
!
ni
-
>
isActive
(
)
)
;
ni
-
>
markActive
(
)
;
}
static
PropertyIteratorObject
*
NewPropertyIteratorObject
(
JSContext
*
cx
)
{
RootedObjectGroup
group
(
cx
ObjectGroup
:
:
defaultNewGroup
(
cx
&
PropertyIteratorObject
:
:
class_
TaggedProto
(
nullptr
)
)
)
;
if
(
!
group
)
{
return
nullptr
;
}
const
JSClass
*
clasp
=
&
PropertyIteratorObject
:
:
class_
;
RootedShape
shape
(
cx
EmptyShape
:
:
getInitialShape
(
cx
clasp
TaggedProto
(
nullptr
)
ITERATOR_FINALIZE_KIND
)
)
;
if
(
!
shape
)
{
return
nullptr
;
}
JSObject
*
obj
;
JS_TRY_VAR_OR_RETURN_NULL
(
cx
obj
NativeObject
:
:
create
(
cx
ITERATOR_FINALIZE_KIND
GetInitialHeap
(
GenericObject
group
)
shape
group
)
)
;
PropertyIteratorObject
*
res
=
&
obj
-
>
as
<
PropertyIteratorObject
>
(
)
;
MOZ_ASSERT
(
!
js
:
:
gc
:
:
IsInsideNursery
(
res
)
)
;
MOZ_ASSERT
(
res
-
>
numFixedSlots
(
)
=
=
PropertyIteratorObject
:
:
NUM_FIXED_SLOTS
)
;
return
res
;
}
static
inline
size_t
ExtraStringCount
(
size_t
propertyCount
size_t
guardCount
)
{
static_assert
(
sizeof
(
ReceiverGuard
)
=
=
2
*
sizeof
(
GCPtrLinearString
)
"
NativeIterators
are
allocated
in
space
for
1
)
themselves
"
"
2
)
the
properties
a
NativeIterator
iterates
(
as
"
"
GCPtrLinearStrings
)
and
3
)
|
numGuards
|
HeapReceiverGuard
"
"
objects
;
the
additional
-
length
calculation
below
assumes
"
"
this
size
-
relationship
when
determining
the
extra
space
to
"
"
allocate
"
)
;
return
propertyCount
+
guardCount
*
2
;
}
static
inline
size_t
AllocationSize
(
size_t
propertyCount
size_t
guardCount
)
{
return
sizeof
(
NativeIterator
)
+
(
ExtraStringCount
(
propertyCount
guardCount
)
*
sizeof
(
GCPtrLinearString
)
)
;
}
static
PropertyIteratorObject
*
CreatePropertyIterator
(
JSContext
*
cx
Handle
<
JSObject
*
>
objBeingIterated
HandleIdVector
props
uint32_t
numGuards
uint32_t
guardKey
)
{
if
(
props
.
length
(
)
>
NativeIterator
:
:
PropCountLimit
)
{
ReportAllocationOverflow
(
cx
)
;
return
nullptr
;
}
Rooted
<
PropertyIteratorObject
*
>
propIter
(
cx
NewPropertyIteratorObject
(
cx
)
)
;
if
(
!
propIter
)
{
return
nullptr
;
}
void
*
mem
=
cx
-
>
pod_malloc_with_extra
<
NativeIterator
GCPtrLinearString
>
(
ExtraStringCount
(
props
.
length
(
)
numGuards
)
)
;
if
(
!
mem
)
{
return
nullptr
;
}
bool
hadError
=
false
;
NativeIterator
*
ni
=
new
(
mem
)
NativeIterator
(
cx
propIter
objBeingIterated
props
numGuards
guardKey
&
hadError
)
;
if
(
hadError
)
{
return
nullptr
;
}
ObjectRealm
&
realm
=
objBeingIterated
?
ObjectRealm
:
:
get
(
objBeingIterated
)
:
ObjectRealm
:
:
get
(
propIter
)
;
RegisterEnumerator
(
realm
ni
)
;
return
propIter
;
}
NativeIterator
:
:
NativeIterator
(
)
{
AlwaysPoison
(
static_cast
<
void
*
>
(
this
)
JS_NEW_NATIVE_ITERATOR_PATTERN
sizeof
(
*
this
)
MemCheckKind
:
:
MakeUndefined
)
;
prev_
=
next_
=
this
;
}
NativeIterator
*
NativeIterator
:
:
allocateSentinel
(
JSContext
*
cx
)
{
NativeIterator
*
ni
=
js_new
<
NativeIterator
>
(
)
;
if
(
!
ni
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
return
ni
;
}
NativeIterator
:
:
NativeIterator
(
JSContext
*
cx
Handle
<
PropertyIteratorObject
*
>
propIter
Handle
<
JSObject
*
>
objBeingIterated
HandleIdVector
props
uint32_t
numGuards
uint32_t
guardKey
bool
*
hadError
)
:
objectBeingIterated_
(
objBeingIterated
)
iterObj_
(
propIter
)
guardsEnd_
(
guardsBegin
(
)
)
propertyCursor_
(
reinterpret_cast
<
GCPtrLinearString
*
>
(
guardsBegin
(
)
+
numGuards
)
)
propertiesEnd_
(
propertyCursor_
)
guardKey_
(
guardKey
)
flagsAndCount_
(
initialFlagsAndCount
(
props
.
length
(
)
)
)
{
MOZ_ASSERT
(
!
*
hadError
)
;
propIter
-
>
setNativeIterator
(
this
)
;
size_t
nbytes
=
AllocationSize
(
props
.
length
(
)
numGuards
)
;
AddCellMemory
(
propIter
nbytes
MemoryUse
:
:
NativeIterator
)
;
if
(
numGuards
>
0
)
{
JSObject
*
pobj
=
objBeingIterated
;
#
ifdef
DEBUG
uint32_t
i
=
0
;
#
endif
uint32_t
key
=
0
;
do
{
ReceiverGuard
guard
(
pobj
)
;
new
(
guardsEnd_
)
HeapReceiverGuard
(
guard
)
;
guardsEnd_
+
+
;
#
ifdef
DEBUG
i
+
+
;
#
endif
key
=
mozilla
:
:
AddToHash
(
key
guard
.
hash
(
)
)
;
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
while
(
pobj
)
;
guardKey_
=
key
;
MOZ_ASSERT
(
i
=
=
numGuards
)
;
}
MOZ_ASSERT
(
static_cast
<
void
*
>
(
guardsEnd_
)
=
=
propertyCursor_
)
;
for
(
size_t
i
=
0
len
=
props
.
length
(
)
;
i
<
len
;
i
+
+
)
{
JSLinearString
*
str
=
IdToString
(
cx
props
[
i
]
)
;
if
(
!
str
)
{
*
hadError
=
true
;
return
;
}
new
(
propertiesEnd_
)
GCPtrLinearString
(
str
)
;
propertiesEnd_
+
+
;
}
markInitialized
(
)
;
MOZ_ASSERT
(
!
*
hadError
)
;
}
inline
size_t
NativeIterator
:
:
allocationSize
(
)
const
{
size_t
numGuards
=
guardsEnd
(
)
-
guardsBegin
(
)
;
return
AllocationSize
(
initialPropertyCount
(
)
numGuards
)
;
}
bool
IteratorHashPolicy
:
:
match
(
PropertyIteratorObject
*
obj
const
Lookup
&
lookup
)
{
NativeIterator
*
ni
=
obj
-
>
getNativeIterator
(
)
;
if
(
ni
-
>
guardKey
(
)
!
=
lookup
.
key
|
|
ni
-
>
guardCount
(
)
!
=
lookup
.
numGuards
)
{
return
false
;
}
return
ArrayEqual
(
reinterpret_cast
<
ReceiverGuard
*
>
(
ni
-
>
guardsBegin
(
)
)
lookup
.
guards
ni
-
>
guardCount
(
)
)
;
}
static
inline
bool
CanCompareIterableObjectToCache
(
JSObject
*
obj
)
{
if
(
obj
-
>
isNative
(
)
)
{
return
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
=
=
0
;
}
return
false
;
}
using
ReceiverGuardVector
=
Vector
<
ReceiverGuard
8
>
;
static
MOZ_ALWAYS_INLINE
PropertyIteratorObject
*
LookupInIteratorCache
(
JSContext
*
cx
JSObject
*
obj
uint32_t
*
numGuards
)
{
MOZ_ASSERT
(
*
numGuards
=
=
0
)
;
ReceiverGuardVector
guards
(
cx
)
;
uint32_t
key
=
0
;
JSObject
*
pobj
=
obj
;
do
{
if
(
!
CanCompareIterableObjectToCache
(
pobj
)
)
{
return
nullptr
;
}
ReceiverGuard
guard
(
pobj
)
;
key
=
mozilla
:
:
AddToHash
(
key
guard
.
hash
(
)
)
;
if
(
MOZ_UNLIKELY
(
!
guards
.
append
(
guard
)
)
)
{
cx
-
>
recoverFromOutOfMemory
(
)
;
return
nullptr
;
}
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
while
(
pobj
)
;
MOZ_ASSERT
(
!
guards
.
empty
(
)
)
;
*
numGuards
=
guards
.
length
(
)
;
IteratorHashPolicy
:
:
Lookup
lookup
(
guards
.
begin
(
)
guards
.
length
(
)
key
)
;
auto
p
=
ObjectRealm
:
:
get
(
obj
)
.
iteratorCache
.
lookup
(
lookup
)
;
if
(
!
p
)
{
return
nullptr
;
}
PropertyIteratorObject
*
iterobj
=
*
p
;
MOZ_ASSERT
(
iterobj
-
>
compartment
(
)
=
=
cx
-
>
compartment
(
)
)
;
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
if
(
!
ni
-
>
isReusable
(
)
)
{
return
nullptr
;
}
return
iterobj
;
}
static
bool
CanStoreInIteratorCache
(
JSObject
*
obj
)
{
do
{
MOZ_ASSERT
(
obj
-
>
isNative
(
)
)
;
MOZ_ASSERT
(
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
=
=
0
)
;
const
JSClass
*
clasp
=
obj
-
>
getClass
(
)
;
if
(
MOZ_UNLIKELY
(
IsTypedArrayClass
(
clasp
)
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
clasp
-
>
getNewEnumerate
(
)
|
|
clasp
-
>
getEnumerate
(
)
)
)
{
return
false
;
}
obj
=
obj
-
>
staticPrototype
(
)
;
}
while
(
obj
)
;
return
true
;
}
[
[
nodiscard
]
]
static
bool
StoreInIteratorCache
(
JSContext
*
cx
JSObject
*
obj
PropertyIteratorObject
*
iterobj
)
{
MOZ_ASSERT
(
CanStoreInIteratorCache
(
obj
)
)
;
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
MOZ_ASSERT
(
ni
-
>
guardCount
(
)
>
0
)
;
IteratorHashPolicy
:
:
Lookup
lookup
(
reinterpret_cast
<
ReceiverGuard
*
>
(
ni
-
>
guardsBegin
(
)
)
ni
-
>
guardCount
(
)
ni
-
>
guardKey
(
)
)
;
ObjectRealm
:
:
IteratorCache
&
cache
=
ObjectRealm
:
:
get
(
obj
)
.
iteratorCache
;
bool
ok
;
auto
p
=
cache
.
lookupForAdd
(
lookup
)
;
if
(
MOZ_LIKELY
(
!
p
)
)
{
ok
=
cache
.
add
(
p
iterobj
)
;
}
else
{
cache
.
remove
(
p
)
;
ok
=
cache
.
relookupOrAdd
(
p
lookup
iterobj
)
;
}
if
(
!
ok
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
EnumerateProperties
(
JSContext
*
cx
HandleObject
obj
MutableHandleIdVector
props
)
{
MOZ_ASSERT
(
props
.
empty
(
)
)
;
if
(
MOZ_UNLIKELY
(
obj
-
>
is
<
ProxyObject
>
(
)
)
)
{
return
Proxy
:
:
enumerate
(
cx
obj
props
)
;
}
return
Snapshot
(
cx
obj
0
props
)
;
}
#
ifdef
DEBUG
static
bool
PrototypeMayHaveIndexedProperties
(
NativeObject
*
nobj
)
{
JSObject
*
proto
=
nobj
-
>
staticPrototype
(
)
;
if
(
!
proto
)
{
return
false
;
}
if
(
proto
-
>
is
<
NativeObject
>
(
)
&
&
proto
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
>
0
)
{
return
true
;
}
return
ObjectMayHaveExtraIndexedProperties
(
proto
)
;
}
#
endif
static
JSObject
*
GetIterator
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
!
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
;
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
obj
-
>
compartment
(
)
"
We
may
end
up
allocating
shapes
in
the
wrong
zone
!
"
)
;
uint32_t
numGuards
=
0
;
if
(
PropertyIteratorObject
*
iterobj
=
LookupInIteratorCache
(
cx
obj
&
numGuards
)
)
{
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
ni
-
>
changeObjectBeingIterated
(
*
obj
)
;
RegisterEnumerator
(
ObjectRealm
:
:
get
(
obj
)
ni
)
;
return
iterobj
;
}
if
(
numGuards
>
0
&
&
!
CanStoreInIteratorCache
(
obj
)
)
{
numGuards
=
0
;
}
RootedIdVector
keys
(
cx
)
;
if
(
!
EnumerateProperties
(
cx
obj
&
keys
)
)
{
return
nullptr
;
}
if
(
obj
-
>
is
<
NativeObject
>
(
)
&
&
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
>
0
)
{
obj
-
>
as
<
NativeObject
>
(
)
.
markDenseElementsMaybeInIteration
(
)
;
}
PropertyIteratorObject
*
iterobj
=
CreatePropertyIterator
(
cx
obj
keys
numGuards
0
)
;
if
(
!
iterobj
)
{
return
nullptr
;
}
cx
-
>
check
(
iterobj
)
;
#
ifdef
DEBUG
if
(
obj
-
>
is
<
NativeObject
>
(
)
)
{
if
(
PrototypeMayHaveIndexedProperties
(
&
obj
-
>
as
<
NativeObject
>
(
)
)
)
{
iterobj
-
>
getNativeIterator
(
)
-
>
setMaybeHasIndexedPropertiesFromProto
(
)
;
}
}
#
endif
if
(
numGuards
>
0
)
{
if
(
!
StoreInIteratorCache
(
cx
obj
iterobj
)
)
{
return
nullptr
;
}
}
return
iterobj
;
}
PropertyIteratorObject
*
js
:
:
LookupInIteratorCache
(
JSContext
*
cx
HandleObject
obj
)
{
uint32_t
numGuards
=
0
;
return
LookupInIteratorCache
(
cx
obj
&
numGuards
)
;
}
PlainObject
*
js
:
:
CreateIterResultObject
(
JSContext
*
cx
HandleValue
value
bool
done
)
{
Rooted
<
PlainObject
*
>
templateObject
(
cx
cx
-
>
realm
(
)
-
>
getOrCreateIterResultTemplateObject
(
cx
)
)
;
if
(
!
templateObject
)
{
return
nullptr
;
}
PlainObject
*
resultObj
;
JS_TRY_VAR_OR_RETURN_NULL
(
cx
resultObj
PlainObject
:
:
createWithTemplate
(
cx
templateObject
)
)
;
resultObj
-
>
setSlot
(
Realm
:
:
IterResultObjectValueSlot
value
)
;
resultObj
-
>
setSlot
(
Realm
:
:
IterResultObjectDoneSlot
done
?
TrueHandleValue
:
FalseHandleValue
)
;
return
resultObj
;
}
PlainObject
*
Realm
:
:
getOrCreateIterResultTemplateObject
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
realm
(
)
=
=
this
)
;
if
(
iterResultTemplate_
)
{
return
iterResultTemplate_
;
}
PlainObject
*
templateObj
=
createIterResultTemplateObject
(
cx
WithObjectPrototype
:
:
Yes
)
;
iterResultTemplate_
.
set
(
templateObj
)
;
return
iterResultTemplate_
;
}
PlainObject
*
Realm
:
:
getOrCreateIterResultWithoutPrototypeTemplateObject
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
cx
-
>
realm
(
)
=
=
this
)
;
if
(
iterResultWithoutPrototypeTemplate_
)
{
return
iterResultWithoutPrototypeTemplate_
;
}
PlainObject
*
templateObj
=
createIterResultTemplateObject
(
cx
WithObjectPrototype
:
:
No
)
;
iterResultWithoutPrototypeTemplate_
.
set
(
templateObj
)
;
return
iterResultWithoutPrototypeTemplate_
;
}
PlainObject
*
Realm
:
:
createIterResultTemplateObject
(
JSContext
*
cx
WithObjectPrototype
withProto
)
{
Rooted
<
PlainObject
*
>
templateObject
(
cx
withProto
=
=
WithObjectPrototype
:
:
Yes
?
NewTenuredBuiltinClassInstance
<
PlainObject
>
(
cx
)
:
NewObjectWithGivenProto
<
PlainObject
>
(
cx
nullptr
)
)
;
if
(
!
templateObject
)
{
return
nullptr
;
}
if
(
!
NativeDefineDataProperty
(
cx
templateObject
cx
-
>
names
(
)
.
value
UndefinedHandleValue
JSPROP_ENUMERATE
)
)
{
return
nullptr
;
}
if
(
!
NativeDefineDataProperty
(
cx
templateObject
cx
-
>
names
(
)
.
done
TrueHandleValue
JSPROP_ENUMERATE
)
)
{
return
nullptr
;
}
DebugOnly
<
Shape
*
>
shape
=
templateObject
-
>
lastProperty
(
)
;
MOZ_ASSERT
(
shape
-
>
previous
(
)
-
>
slot
(
)
=
=
Realm
:
:
IterResultObjectValueSlot
&
&
shape
-
>
previous
(
)
-
>
propidRef
(
)
=
=
NameToId
(
cx
-
>
names
(
)
.
value
)
)
;
MOZ_ASSERT
(
shape
-
>
slot
(
)
=
=
Realm
:
:
IterResultObjectDoneSlot
&
&
shape
-
>
propidRef
(
)
=
=
NameToId
(
cx
-
>
names
(
)
.
done
)
)
;
return
templateObject
;
}
size_t
PropertyIteratorObject
:
:
sizeOfMisc
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
getPrivate
(
)
)
;
}
void
PropertyIteratorObject
:
:
trace
(
JSTracer
*
trc
JSObject
*
obj
)
{
if
(
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
)
{
ni
-
>
trace
(
trc
)
;
}
}
void
PropertyIteratorObject
:
:
finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
if
(
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
)
{
fop
-
>
free_
(
obj
ni
ni
-
>
allocationSize
(
)
MemoryUse
:
:
NativeIterator
)
;
}
}
const
JSClassOps
PropertyIteratorObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
finalize
nullptr
nullptr
nullptr
trace
}
;
const
JSClass
PropertyIteratorObject
:
:
class_
=
{
"
Iterator
"
JSCLASS_HAS_PRIVATE
|
JSCLASS_BACKGROUND_FINALIZE
&
PropertyIteratorObject
:
:
classOps_
}
;
static
const
JSClass
ArrayIteratorPrototypeClass
=
{
"
Array
Iterator
"
0
}
;
enum
{
ArrayIteratorSlotIteratedObject
ArrayIteratorSlotNextIndex
ArrayIteratorSlotItemKind
ArrayIteratorSlotCount
}
;
const
JSClass
ArrayIteratorObject
:
:
class_
=
{
"
Array
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
ArrayIteratorSlotCount
)
}
;
ArrayIteratorObject
*
js
:
:
NewArrayIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
ArrayIteratorObject
>
(
cx
proto
)
;
}
ArrayIteratorObject
*
js
:
:
NewArrayIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
ArrayIteratorObject
>
(
cx
proto
)
;
}
static
const
JSFunctionSpec
array_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
ArrayIteratorNext
"
0
0
)
JS_FS_END
}
;
static
const
JSClass
StringIteratorPrototypeClass
=
{
"
String
Iterator
"
0
}
;
enum
{
StringIteratorSlotIteratedObject
StringIteratorSlotNextIndex
StringIteratorSlotCount
}
;
const
JSClass
StringIteratorObject
:
:
class_
=
{
"
String
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
StringIteratorSlotCount
)
}
;
static
const
JSFunctionSpec
string_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
StringIteratorNext
"
0
0
)
JS_FS_END
}
;
StringIteratorObject
*
js
:
:
NewStringIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
StringIteratorObject
>
(
cx
proto
)
;
}
StringIteratorObject
*
js
:
:
NewStringIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
StringIteratorObject
>
(
cx
proto
)
;
}
static
const
JSClass
RegExpStringIteratorPrototypeClass
=
{
"
RegExp
String
Iterator
"
0
}
;
enum
{
RegExpStringIteratorSlotRegExp
RegExpStringIteratorSlotString
RegExpStringIteratorSlotSource
RegExpStringIteratorSlotFlags
RegExpStringIteratorSlotLastIndex
RegExpStringIteratorSlotCount
}
;
static_assert
(
RegExpStringIteratorSlotRegExp
=
=
REGEXP_STRING_ITERATOR_REGEXP_SLOT
"
RegExpStringIteratorSlotRegExp
must
match
self
-
hosting
define
"
"
for
regexp
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotString
=
=
REGEXP_STRING_ITERATOR_STRING_SLOT
"
RegExpStringIteratorSlotString
must
match
self
-
hosting
define
"
"
for
string
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotSource
=
=
REGEXP_STRING_ITERATOR_SOURCE_SLOT
"
RegExpStringIteratorSlotString
must
match
self
-
hosting
define
"
"
for
source
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotFlags
=
=
REGEXP_STRING_ITERATOR_FLAGS_SLOT
"
RegExpStringIteratorSlotFlags
must
match
self
-
hosting
define
"
"
for
flags
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotLastIndex
=
=
REGEXP_STRING_ITERATOR_LASTINDEX_SLOT
"
RegExpStringIteratorSlotLastIndex
must
match
self
-
hosting
"
"
define
for
lastIndex
slot
.
"
)
;
const
JSClass
RegExpStringIteratorObject
:
:
class_
=
{
"
RegExp
String
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
RegExpStringIteratorSlotCount
)
}
;
static
const
JSFunctionSpec
regexp_string_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
RegExpStringIteratorNext
"
0
0
)
JS_FS_END
}
;
RegExpStringIteratorObject
*
js
:
:
NewRegExpStringIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
RegExpStringIteratorObject
>
(
cx
proto
)
;
}
RegExpStringIteratorObject
*
js
:
:
NewRegExpStringIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
RegExpStringIteratorObject
>
(
cx
proto
)
;
}
JSObject
*
js
:
:
ValueToIterator
(
JSContext
*
cx
HandleValue
vp
)
{
RootedObject
obj
(
cx
)
;
if
(
vp
.
isObject
(
)
)
{
obj
=
&
vp
.
toObject
(
)
;
}
else
if
(
vp
.
isNullOrUndefined
(
)
)
{
RootedIdVector
props
(
cx
)
;
return
CreatePropertyIterator
(
cx
nullptr
props
0
0
)
;
}
else
{
obj
=
ToObject
(
cx
vp
)
;
if
(
!
obj
)
{
return
nullptr
;
}
}
return
GetIterator
(
cx
obj
)
;
}
void
js
:
:
CloseIterator
(
JSObject
*
obj
)
{
if
(
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
{
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
;
ni
-
>
unlink
(
)
;
MOZ_ASSERT
(
ni
-
>
isActive
(
)
)
;
ni
-
>
markInactive
(
)
;
ni
-
>
resetPropertyCursorForReuse
(
)
;
}
}
bool
js
:
:
IteratorCloseForException
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
cx
-
>
isExceptionPending
(
)
)
;
bool
isClosingGenerator
=
cx
-
>
isClosingGenerator
(
)
;
JS
:
:
AutoSaveExceptionState
savedExc
(
cx
)
;
RootedValue
returnMethod
(
cx
)
;
if
(
!
GetProperty
(
cx
obj
obj
cx
-
>
names
(
)
.
return_
&
returnMethod
)
)
{
return
false
;
}
if
(
returnMethod
.
isNullOrUndefined
(
)
)
{
return
true
;
}
if
(
!
IsCallable
(
returnMethod
)
)
{
return
ReportIsNotFunction
(
cx
returnMethod
)
;
}
RootedValue
rval
(
cx
)
;
bool
ok
=
Call
(
cx
returnMethod
obj
&
rval
)
;
if
(
isClosingGenerator
)
{
if
(
!
ok
)
{
return
false
;
}
if
(
!
rval
.
isObject
(
)
)
{
return
ThrowCheckIsObject
(
cx
CheckIsObjectKind
:
:
IteratorReturn
)
;
}
}
else
{
savedExc
.
restore
(
)
;
}
return
true
;
}
void
js
:
:
UnwindIteratorForUncatchableException
(
JSObject
*
obj
)
{
if
(
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
{
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
;
ni
-
>
unlink
(
)
;
}
}
static
bool
SuppressDeletedProperty
(
JSContext
*
cx
NativeIterator
*
ni
HandleObject
obj
Handle
<
JSLinearString
*
>
str
)
{
if
(
ni
-
>
objectBeingIterated
(
)
!
=
obj
)
{
return
true
;
}
if
(
ni
-
>
previousPropertyWas
(
str
)
)
{
return
true
;
}
while
(
true
)
{
bool
restart
=
false
;
GCPtrLinearString
*
const
cursor
=
ni
-
>
nextProperty
(
)
;
GCPtrLinearString
*
const
end
=
ni
-
>
propertiesEnd
(
)
;
for
(
GCPtrLinearString
*
idp
=
cursor
;
idp
<
end
;
+
+
idp
)
{
if
(
(
*
idp
)
-
>
isAtom
(
)
&
&
str
-
>
isAtom
(
)
)
{
if
(
*
idp
!
=
str
)
{
continue
;
}
}
else
{
if
(
!
EqualStrings
(
*
idp
str
)
)
{
continue
;
}
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototype
(
cx
obj
&
proto
)
)
{
return
false
;
}
if
(
proto
)
{
RootedId
id
(
cx
)
;
RootedValue
idv
(
cx
StringValue
(
*
idp
)
)
;
if
(
!
PrimitiveValueToId
<
CanGC
>
(
cx
idv
&
id
)
)
{
return
false
;
}
Rooted
<
PropertyDescriptor
>
desc
(
cx
)
;
if
(
!
GetPropertyDescriptor
(
cx
proto
id
&
desc
)
)
{
return
false
;
}
if
(
desc
.
object
(
)
&
&
desc
.
enumerable
(
)
)
{
continue
;
}
}
if
(
end
!
=
ni
-
>
propertiesEnd
(
)
|
|
cursor
!
=
ni
-
>
nextProperty
(
)
)
{
restart
=
true
;
break
;
}
if
(
idp
=
=
cursor
)
{
ni
-
>
incCursor
(
)
;
}
else
{
for
(
GCPtrLinearString
*
p
=
idp
;
p
+
1
!
=
end
;
p
+
+
)
{
*
p
=
*
(
p
+
1
)
;
}
ni
-
>
trimLastProperty
(
)
;
}
ni
-
>
markHasUnvisitedPropertyDeletion
(
)
;
return
true
;
}
if
(
!
restart
)
{
return
true
;
}
}
}
static
bool
SuppressDeletedPropertyHelper
(
JSContext
*
cx
HandleObject
obj
Handle
<
JSLinearString
*
>
str
)
{
NativeIterator
*
enumeratorList
=
ObjectRealm
:
:
get
(
obj
)
.
enumerators
;
NativeIterator
*
ni
=
enumeratorList
-
>
next
(
)
;
while
(
ni
!
=
enumeratorList
)
{
if
(
!
SuppressDeletedProperty
(
cx
ni
obj
str
)
)
{
return
false
;
}
ni
=
ni
-
>
next
(
)
;
}
return
true
;
}
bool
js
:
:
SuppressDeletedProperty
(
JSContext
*
cx
HandleObject
obj
jsid
id
)
{
if
(
MOZ_LIKELY
(
!
ObjectRealm
:
:
get
(
obj
)
.
objectMaybeInIteration
(
obj
)
)
)
{
return
true
;
}
if
(
JSID_IS_SYMBOL
(
id
)
)
{
return
true
;
}
Rooted
<
JSLinearString
*
>
str
(
cx
IdToString
(
cx
id
)
)
;
if
(
!
str
)
{
return
false
;
}
return
SuppressDeletedPropertyHelper
(
cx
obj
str
)
;
}
bool
js
:
:
SuppressDeletedElement
(
JSContext
*
cx
HandleObject
obj
uint32_t
index
)
{
if
(
MOZ_LIKELY
(
!
ObjectRealm
:
:
get
(
obj
)
.
objectMaybeInIteration
(
obj
)
)
)
{
return
true
;
}
RootedId
id
(
cx
)
;
if
(
!
IndexToId
(
cx
index
&
id
)
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
str
(
cx
IdToString
(
cx
id
)
)
;
if
(
!
str
)
{
return
false
;
}
return
SuppressDeletedPropertyHelper
(
cx
obj
str
)
;
}
#
ifdef
DEBUG
void
js
:
:
AssertDenseElementsNotIterated
(
NativeObject
*
obj
)
{
static
constexpr
uint32_t
MaxPropsToCheck
=
10
;
uint32_t
propsChecked
=
0
;
NativeIterator
*
enumeratorList
=
ObjectRealm
:
:
get
(
obj
)
.
enumerators
;
NativeIterator
*
ni
=
enumeratorList
-
>
next
(
)
;
while
(
ni
!
=
enumeratorList
)
{
if
(
ni
-
>
objectBeingIterated
(
)
=
=
obj
&
&
!
ni
-
>
maybeHasIndexedPropertiesFromProto
(
)
)
{
for
(
GCPtrLinearString
*
idp
=
ni
-
>
nextProperty
(
)
;
idp
<
ni
-
>
propertiesEnd
(
)
;
+
+
idp
)
{
uint32_t
index
;
if
(
idp
-
>
get
(
)
-
>
isIndex
(
&
index
)
)
{
MOZ_ASSERT
(
!
obj
-
>
containsDenseElement
(
index
)
)
;
}
if
(
+
+
propsChecked
>
MaxPropsToCheck
)
{
return
;
}
}
}
ni
=
ni
-
>
next
(
)
;
}
}
#
endif
static
const
JSFunctionSpec
iterator_methods
[
]
=
{
JS_SELF_HOSTED_SYM_FN
(
iterator
"
IteratorIdentity
"
0
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
iterator_static_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
from
"
"
IteratorFrom
"
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
iterator_methods_with_helpers
[
]
=
{
JS_SELF_HOSTED_FN
(
"
map
"
"
IteratorMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
filter
"
"
IteratorFilter
"
1
0
)
JS_SELF_HOSTED_FN
(
"
take
"
"
IteratorTake
"
1
0
)
JS_SELF_HOSTED_FN
(
"
drop
"
"
IteratorDrop
"
1
0
)
JS_SELF_HOSTED_FN
(
"
asIndexedPairs
"
"
IteratorAsIndexedPairs
"
0
0
)
JS_SELF_HOSTED_FN
(
"
flatMap
"
"
IteratorFlatMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reduce
"
"
IteratorReduce
"
1
0
)
JS_SELF_HOSTED_FN
(
"
toArray
"
"
IteratorToArray
"
0
0
)
JS_SELF_HOSTED_FN
(
"
forEach
"
"
IteratorForEach
"
1
0
)
JS_SELF_HOSTED_FN
(
"
some
"
"
IteratorSome
"
1
0
)
JS_SELF_HOSTED_FN
(
"
every
"
"
IteratorEvery
"
1
0
)
JS_SELF_HOSTED_FN
(
"
find
"
"
IteratorFind
"
1
0
)
JS_SELF_HOSTED_SYM_FN
(
iterator
"
IteratorIdentity
"
0
0
)
JS_FS_END
}
;
bool
GlobalObject
:
:
initIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
getReservedSlot
(
ITERATOR_PROTO
)
.
isObject
(
)
)
{
return
true
;
}
RootedObject
proto
(
cx
GlobalObject
:
:
createBlankPrototype
<
PlainObject
>
(
cx
global
)
)
;
if
(
!
proto
)
{
return
false
;
}
global
-
>
setReservedSlot
(
ITERATOR_PROTO
ObjectValue
(
*
proto
)
)
;
if
(
!
DefinePropertiesAndFunctions
(
cx
proto
nullptr
iterator_methods
)
)
{
return
false
;
}
return
true
;
}
template
<
unsigned
Slot
const
JSClass
*
ProtoClass
const
JSFunctionSpec
*
Methods
>
bool
GlobalObject
:
:
initObjectIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandleAtom
tag
)
{
if
(
global
-
>
getReservedSlot
(
Slot
)
.
isObject
(
)
)
{
return
true
;
}
RootedObject
iteratorProto
(
cx
GlobalObject
:
:
getOrCreateIteratorPrototype
(
cx
global
)
)
;
if
(
!
iteratorProto
)
{
return
false
;
}
RootedObject
proto
(
cx
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
ProtoClass
iteratorProto
)
)
;
if
(
!
proto
|
|
!
DefinePropertiesAndFunctions
(
cx
proto
nullptr
Methods
)
|
|
(
tag
&
&
!
DefineToStringTag
(
cx
proto
tag
)
)
)
{
return
false
;
}
global
-
>
setReservedSlot
(
Slot
ObjectValue
(
*
proto
)
)
;
return
true
;
}
NativeObject
*
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateObject
(
cx
global
ARRAY_ITERATOR_PROTO
cx
-
>
names
(
)
.
ArrayIterator
.
toHandle
(
)
initObjectIteratorProto
<
ARRAY_ITERATOR_PROTO
&
ArrayIteratorPrototypeClass
array_iterator_methods
>
)
)
;
}
JSObject
*
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateObject
(
cx
global
STRING_ITERATOR_PROTO
cx
-
>
names
(
)
.
StringIterator
.
toHandle
(
)
initObjectIteratorProto
<
STRING_ITERATOR_PROTO
&
StringIteratorPrototypeClass
string_iterator_methods
>
)
;
}
JSObject
*
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateObject
(
cx
global
REGEXP_STRING_ITERATOR_PROTO
cx
-
>
names
(
)
.
RegExpStringIterator
.
toHandle
(
)
initObjectIteratorProto
<
REGEXP_STRING_ITERATOR_PROTO
&
RegExpStringIteratorPrototypeClass
regexp_string_iterator_methods
>
)
;
}
static
bool
IteratorConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
js_Iterator_str
)
)
{
return
false
;
}
if
(
args
.
callee
(
)
=
=
args
.
newTarget
(
)
.
toObject
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BOGUS_CONSTRUCTOR
js_Iterator_str
)
;
return
false
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Iterator
&
proto
)
)
{
return
false
;
}
JSObject
*
obj
=
NewObjectWithClassProto
<
IteratorObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
const
ClassSpec
IteratorObjectClassSpec
=
{
GenericCreateConstructor
<
IteratorConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
IteratorObject
>
iterator_static_methods
nullptr
iterator_methods_with_helpers
nullptr
nullptr
}
;
const
JSClass
IteratorObject
:
:
class_
=
{
js_Iterator_str
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Iterator
)
JS_NULL_CLASS_OPS
&
IteratorObjectClassSpec
}
;
const
JSClass
IteratorObject
:
:
protoClass_
=
{
"
Iterator
.
prototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Iterator
)
JS_NULL_CLASS_OPS
&
IteratorObjectClassSpec
}
;
static
const
JSFunctionSpec
wrap_for_valid_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
WrapForValidIteratorNext
"
1
0
)
JS_SELF_HOSTED_FN
(
"
return
"
"
WrapForValidIteratorReturn
"
1
0
)
JS_SELF_HOSTED_FN
(
"
throw
"
"
WrapForValidIteratorThrow
"
1
0
)
JS_FS_END
}
;
static
const
JSClass
WrapForValidIteratorPrototypeClass
=
{
"
Wrap
For
Valid
Iterator
"
0
}
;
const
JSClass
WrapForValidIteratorObject
:
:
class_
=
{
"
Wrap
For
Valid
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
WrapForValidIteratorObject
:
:
SlotCount
)
}
;
NativeObject
*
GlobalObject
:
:
getOrCreateWrapForValidIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateObject
(
cx
global
WRAP_FOR_VALID_ITERATOR_PROTO
HandleAtom
(
nullptr
)
initObjectIteratorProto
<
WRAP_FOR_VALID_ITERATOR_PROTO
&
WrapForValidIteratorPrototypeClass
wrap_for_valid_iterator_methods
>
)
)
;
}
WrapForValidIteratorObject
*
js
:
:
NewWrapForValidIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateWrapForValidIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
WrapForValidIteratorObject
>
(
cx
proto
)
;
}
static
const
JSFunctionSpec
iterator_helper_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
IteratorHelperNext
"
1
0
)
JS_SELF_HOSTED_FN
(
"
return
"
"
IteratorHelperReturn
"
1
0
)
JS_SELF_HOSTED_FN
(
"
throw
"
"
IteratorHelperThrow
"
1
0
)
JS_FS_END
}
;
static
const
JSClass
IteratorHelperPrototypeClass
=
{
"
Iterator
Helper
"
0
}
;
const
JSClass
IteratorHelperObject
:
:
class_
=
{
"
Iterator
Helper
"
JSCLASS_HAS_RESERVED_SLOTS
(
IteratorHelperObject
:
:
SlotCount
)
}
;
NativeObject
*
GlobalObject
:
:
getOrCreateIteratorHelperPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateObject
(
cx
global
ITERATOR_HELPER_PROTO
HandleAtom
(
nullptr
)
initObjectIteratorProto
<
ITERATOR_HELPER_PROTO
&
IteratorHelperPrototypeClass
iterator_helper_methods
>
)
)
;
}
IteratorHelperObject
*
js
:
:
NewIteratorHelper
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateIteratorHelperPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
IteratorHelperObject
>
(
cx
proto
)
;
}
