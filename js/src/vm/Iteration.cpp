#
include
"
vm
/
Iteration
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
algorithm
>
#
include
<
new
>
#
include
"
jsapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
ds
/
Sort
.
h
"
#
include
"
gc
/
GCContext
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
util
/
DifferentialTesting
.
h
"
#
include
"
util
/
Poison
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
vm
/
WellKnownAtom
.
h
"
#
ifdef
ENABLE_RECORD_TUPLE
#
include
"
builtin
/
RecordObject
.
h
"
#
include
"
builtin
/
TupleObject
.
h
"
#
endif
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
PlainObject
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
ArrayEqual
;
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
PodCopy
;
using
RootedPropertyIteratorObject
=
Rooted
<
PropertyIteratorObject
*
>
;
static
const
gc
:
:
AllocKind
ITERATOR_FINALIZE_KIND
=
gc
:
:
AllocKind
:
:
OBJECT2_BACKGROUND
;
void
NativeIterator
:
:
trace
(
JSTracer
*
trc
)
{
TraceNullableEdge
(
trc
&
objectBeingIterated_
"
objectBeingIterated_
"
)
;
TraceNullableEdge
(
trc
&
iterObj_
"
iterObj
"
)
;
std
:
:
for_each
(
shapesBegin
(
)
shapesEnd
(
)
[
trc
]
(
GCPtr
<
Shape
*
>
&
shape
)
{
TraceEdge
(
trc
&
shape
"
iterator_shape
"
)
;
}
)
;
GCPtr
<
JSLinearString
*
>
*
begin
=
MOZ_LIKELY
(
isInitialized
(
)
)
?
propertiesBegin
(
)
:
propertyCursor_
;
std
:
:
for_each
(
begin
propertiesEnd
(
)
[
trc
]
(
GCPtr
<
JSLinearString
*
>
&
prop
)
{
TraceEdge
(
trc
&
prop
"
prop
"
)
;
}
)
;
}
using
PropertyKeySet
=
GCHashSet
<
PropertyKey
DefaultHasher
<
PropertyKey
>
>
;
class
PropertyEnumerator
{
RootedObject
obj_
;
MutableHandleIdVector
props_
;
PropertyIndexVector
*
indices_
;
uint32_t
flags_
;
Rooted
<
PropertyKeySet
>
visited_
;
bool
enumeratingProtoChain_
=
false
;
enum
class
IndicesState
{
Valid
Allocating
Unsupported
}
;
IndicesState
indicesState_
;
public
:
PropertyEnumerator
(
JSContext
*
cx
JSObject
*
obj
uint32_t
flags
MutableHandleIdVector
props
PropertyIndexVector
*
indices
=
nullptr
)
:
obj_
(
cx
obj
)
props_
(
props
)
indices_
(
indices
)
flags_
(
flags
)
visited_
(
cx
PropertyKeySet
(
cx
)
)
indicesState_
(
indices
?
IndicesState
:
:
Allocating
:
IndicesState
:
:
Valid
)
{
}
bool
snapshot
(
JSContext
*
cx
)
;
void
markIndicesUnsupported
(
)
{
indicesState_
=
IndicesState
:
:
Unsupported
;
}
bool
supportsIndices
(
)
const
{
return
indicesState_
!
=
IndicesState
:
:
Unsupported
;
}
bool
allocatingIndices
(
)
const
{
return
indicesState_
=
=
IndicesState
:
:
Allocating
;
}
private
:
template
<
bool
CheckForDuplicates
>
bool
enumerate
(
JSContext
*
cx
jsid
id
bool
enumerable
PropertyIndex
index
=
PropertyIndex
:
:
Invalid
(
)
)
;
bool
enumerateExtraProperties
(
JSContext
*
cx
)
;
template
<
bool
CheckForDuplicates
>
bool
enumerateNativeProperties
(
JSContext
*
cx
)
;
bool
enumerateNativeProperties
(
JSContext
*
cx
bool
checkForDuplicates
)
{
if
(
checkForDuplicates
)
{
return
enumerateNativeProperties
<
true
>
(
cx
)
;
}
return
enumerateNativeProperties
<
false
>
(
cx
)
;
}
template
<
bool
CheckForDuplicates
>
bool
enumerateProxyProperties
(
JSContext
*
cx
)
;
void
reversePropsAndIndicesAfter
(
size_t
initialLength
)
{
MOZ_ASSERT
(
props_
.
begin
(
)
+
initialLength
<
=
props_
.
end
(
)
)
;
MOZ_ASSERT_IF
(
allocatingIndices
(
)
props_
.
length
(
)
=
=
indices_
-
>
length
(
)
)
;
std
:
:
reverse
(
props_
.
begin
(
)
+
initialLength
props_
.
end
(
)
)
;
if
(
allocatingIndices
(
)
)
{
std
:
:
reverse
(
indices_
-
>
begin
(
)
+
initialLength
indices_
-
>
end
(
)
)
;
}
}
}
;
template
<
bool
CheckForDuplicates
>
bool
PropertyEnumerator
:
:
enumerate
(
JSContext
*
cx
jsid
id
bool
enumerable
PropertyIndex
index
)
{
if
(
CheckForDuplicates
)
{
PropertyKeySet
:
:
AddPtr
p
=
visited_
.
lookupForAdd
(
id
)
;
if
(
MOZ_UNLIKELY
(
!
!
p
)
)
{
return
true
;
}
if
(
obj_
-
>
is
<
ProxyObject
>
(
)
|
|
obj_
-
>
staticPrototype
(
)
|
|
obj_
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
{
if
(
!
visited_
.
add
(
p
id
)
)
{
return
false
;
}
}
}
if
(
!
enumerable
&
&
!
(
flags_
&
JSITER_HIDDEN
)
)
{
return
true
;
}
if
(
id
.
isSymbol
(
)
)
{
if
(
!
(
flags_
&
JSITER_SYMBOLS
)
)
{
return
true
;
}
if
(
!
(
flags_
&
JSITER_PRIVATE
)
&
&
id
.
isPrivateName
(
)
)
{
return
true
;
}
}
else
{
if
(
(
flags_
&
JSITER_SYMBOLSONLY
)
)
{
return
true
;
}
}
MOZ_ASSERT_IF
(
allocatingIndices
(
)
indices_
-
>
length
(
)
=
=
props_
.
length
(
)
)
;
if
(
!
props_
.
append
(
id
)
)
{
return
false
;
}
if
(
!
supportsIndices
(
)
)
{
return
true
;
}
if
(
index
.
kind
(
)
=
=
PropertyIndex
:
:
Kind
:
:
Invalid
|
|
enumeratingProtoChain_
)
{
markIndicesUnsupported
(
)
;
return
true
;
}
if
(
allocatingIndices
(
)
&
&
!
indices_
-
>
append
(
index
)
)
{
return
false
;
}
return
true
;
}
bool
PropertyEnumerator
:
:
enumerateExtraProperties
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
obj_
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
;
RootedIdVector
properties
(
cx
)
;
bool
enumerableOnly
=
!
(
flags_
&
JSITER_HIDDEN
)
;
if
(
!
obj_
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
(
cx
obj_
&
properties
enumerableOnly
)
)
{
return
false
;
}
RootedId
id
(
cx
)
;
for
(
size_t
n
=
0
;
n
<
properties
.
length
(
)
;
n
+
+
)
{
id
=
properties
[
n
]
;
bool
enumerable
=
true
;
if
(
!
enumerate
<
true
>
(
cx
id
enumerable
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
SortComparatorIntegerIds
(
jsid
a
jsid
b
bool
*
lessOrEqualp
)
{
uint32_t
indexA
indexB
;
MOZ_ALWAYS_TRUE
(
IdIsIndex
(
a
&
indexA
)
)
;
MOZ_ALWAYS_TRUE
(
IdIsIndex
(
b
&
indexB
)
)
;
*
lessOrEqualp
=
(
indexA
<
=
indexB
)
;
return
true
;
}
template
<
bool
CheckForDuplicates
>
bool
PropertyEnumerator
:
:
enumerateNativeProperties
(
JSContext
*
cx
)
{
Handle
<
NativeObject
*
>
pobj
=
obj_
.
as
<
NativeObject
>
(
)
;
const
bool
iterShapeProperties
=
CheckForDuplicates
|
|
(
flags_
&
JSITER_HIDDEN
)
|
|
pobj
-
>
hasEnumerableProperty
(
)
;
bool
enumerateSymbols
;
if
(
flags_
&
JSITER_SYMBOLSONLY
)
{
if
(
!
iterShapeProperties
)
{
return
true
;
}
enumerateSymbols
=
true
;
}
else
{
size_t
firstElemIndex
=
props_
.
length
(
)
;
size_t
initlen
=
pobj
-
>
getDenseInitializedLength
(
)
;
const
Value
*
elements
=
pobj
-
>
getDenseElements
(
)
;
bool
hasHoles
=
false
;
for
(
uint32_t
i
=
0
;
i
<
initlen
;
+
+
i
)
{
if
(
elements
[
i
]
.
isMagic
(
JS_ELEMENTS_HOLE
)
)
{
hasHoles
=
true
;
}
else
{
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
PropertyKey
:
:
Int
(
i
)
true
PropertyIndex
:
:
ForElement
(
i
)
)
)
{
return
false
;
}
}
}
if
(
pobj
-
>
is
<
TypedArrayObject
>
(
)
)
{
size_t
len
=
pobj
-
>
as
<
TypedArrayObject
>
(
)
.
length
(
)
;
static_assert
(
PropertyKey
:
:
IntMax
=
=
INT32_MAX
)
;
if
(
len
>
INT32_MAX
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
PropertyKey
:
:
Int
(
i
)
true
)
)
{
return
false
;
}
}
}
#
ifdef
ENABLE_RECORD_TUPLE
else
{
Rooted
<
RecordType
*
>
rec
(
cx
)
;
if
(
RecordObject
:
:
maybeUnbox
(
pobj
&
rec
)
)
{
Rooted
<
ArrayObject
*
>
keys
(
cx
rec
-
>
keys
(
)
)
;
for
(
size_t
i
=
0
;
i
<
keys
-
>
length
(
)
;
i
+
+
)
{
JSAtom
*
key
=
&
keys
-
>
getDenseElement
(
i
)
.
toString
(
)
-
>
asAtom
(
)
;
PropertyKey
id
=
AtomToId
(
key
)
;
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
id
true
)
)
{
return
false
;
}
}
return
true
;
}
else
{
mozilla
:
:
Maybe
<
TupleType
&
>
tup
=
TupleObject
:
:
maybeUnbox
(
pobj
)
;
if
(
tup
)
{
uint32_t
len
=
tup
-
>
length
(
)
;
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
MOZ_ASSERT
(
PropertyKey
:
:
fitsInInt
(
i
)
)
;
PropertyKey
id
=
PropertyKey
:
:
Int
(
i
)
;
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
id
true
)
)
{
return
false
;
}
}
return
true
;
}
}
}
#
endif
if
(
!
iterShapeProperties
)
{
return
true
;
}
bool
isIndexed
=
pobj
-
>
isIndexed
(
)
;
if
(
isIndexed
)
{
if
(
!
hasHoles
)
{
firstElemIndex
=
props_
.
length
(
)
;
}
for
(
ShapePropertyIter
<
NoGC
>
iter
(
pobj
-
>
shape
(
)
)
;
!
iter
.
done
(
)
;
iter
+
+
)
{
jsid
id
=
iter
-
>
key
(
)
;
uint32_t
dummy
;
if
(
IdIsIndex
(
id
&
dummy
)
)
{
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
id
iter
-
>
enumerable
(
)
)
)
{
return
false
;
}
}
}
MOZ_ASSERT
(
firstElemIndex
<
=
props_
.
length
(
)
)
;
jsid
*
ids
=
props_
.
begin
(
)
+
firstElemIndex
;
size_t
n
=
props_
.
length
(
)
-
firstElemIndex
;
RootedIdVector
tmp
(
cx
)
;
if
(
!
tmp
.
resize
(
n
)
)
{
return
false
;
}
PodCopy
(
tmp
.
begin
(
)
ids
n
)
;
if
(
!
MergeSort
(
ids
n
tmp
.
begin
(
)
SortComparatorIntegerIds
)
)
{
return
false
;
}
}
size_t
initialLength
=
props_
.
length
(
)
;
bool
symbolsFound
=
false
;
for
(
ShapePropertyIter
<
NoGC
>
iter
(
pobj
-
>
shape
(
)
)
;
!
iter
.
done
(
)
;
iter
+
+
)
{
jsid
id
=
iter
-
>
key
(
)
;
if
(
id
.
isSymbol
(
)
)
{
symbolsFound
=
true
;
continue
;
}
uint32_t
dummy
;
if
(
isIndexed
&
&
IdIsIndex
(
id
&
dummy
)
)
{
continue
;
}
PropertyIndex
index
=
iter
-
>
isDataProperty
(
)
?
PropertyIndex
:
:
ForSlot
(
pobj
iter
-
>
slot
(
)
)
:
PropertyIndex
:
:
Invalid
(
)
;
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
id
iter
-
>
enumerable
(
)
index
)
)
{
return
false
;
}
}
reversePropsAndIndicesAfter
(
initialLength
)
;
enumerateSymbols
=
symbolsFound
&
&
(
flags_
&
JSITER_SYMBOLS
)
;
}
if
(
enumerateSymbols
)
{
MOZ_ASSERT
(
iterShapeProperties
)
;
MOZ_ASSERT
(
!
allocatingIndices
(
)
)
;
size_t
initialLength
=
props_
.
length
(
)
;
for
(
ShapePropertyIter
<
NoGC
>
iter
(
pobj
-
>
shape
(
)
)
;
!
iter
.
done
(
)
;
iter
+
+
)
{
jsid
id
=
iter
-
>
key
(
)
;
if
(
id
.
isSymbol
(
)
)
{
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
id
iter
-
>
enumerable
(
)
)
)
{
return
false
;
}
}
}
reversePropsAndIndicesAfter
(
initialLength
)
;
}
return
true
;
}
template
<
bool
CheckForDuplicates
>
bool
PropertyEnumerator
:
:
enumerateProxyProperties
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
obj_
-
>
is
<
ProxyObject
>
(
)
)
;
RootedIdVector
proxyProps
(
cx
)
;
if
(
flags_
&
JSITER_HIDDEN
|
|
flags_
&
JSITER_SYMBOLS
)
{
if
(
!
Proxy
:
:
ownPropertyKeys
(
cx
obj_
&
proxyProps
)
)
{
return
false
;
}
Rooted
<
mozilla
:
:
Maybe
<
PropertyDescriptor
>
>
desc
(
cx
)
;
for
(
size_t
n
=
0
len
=
proxyProps
.
length
(
)
;
n
<
len
;
n
+
+
)
{
bool
enumerable
=
false
;
if
(
!
(
flags_
&
JSITER_HIDDEN
)
)
{
if
(
!
Proxy
:
:
getOwnPropertyDescriptor
(
cx
obj_
proxyProps
[
n
]
&
desc
)
)
{
return
false
;
}
enumerable
=
desc
.
isSome
(
)
&
&
desc
-
>
enumerable
(
)
;
}
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
proxyProps
[
n
]
enumerable
)
)
{
return
false
;
}
}
return
true
;
}
if
(
!
Proxy
:
:
getOwnEnumerablePropertyKeys
(
cx
obj_
&
proxyProps
)
)
{
return
false
;
}
for
(
size_t
n
=
0
len
=
proxyProps
.
length
(
)
;
n
<
len
;
n
+
+
)
{
if
(
!
enumerate
<
CheckForDuplicates
>
(
cx
proxyProps
[
n
]
true
)
)
{
return
false
;
}
}
return
true
;
}
#
ifdef
DEBUG
struct
SortComparatorIds
{
JSContext
*
const
cx
;
explicit
SortComparatorIds
(
JSContext
*
cx
)
:
cx
(
cx
)
{
}
bool
operator
(
)
(
jsid
aArg
jsid
bArg
bool
*
lessOrEqualp
)
{
RootedId
a
(
cx
aArg
)
;
RootedId
b
(
cx
bArg
)
;
if
(
a
=
=
b
)
{
*
lessOrEqualp
=
true
;
return
true
;
}
enum
class
KeyType
{
Void
Int
String
Symbol
}
;
auto
keyType
=
[
]
(
PropertyKey
key
)
{
if
(
key
.
isString
(
)
)
{
return
KeyType
:
:
String
;
}
if
(
key
.
isInt
(
)
)
{
return
KeyType
:
:
Int
;
}
if
(
key
.
isSymbol
(
)
)
{
return
KeyType
:
:
Symbol
;
}
MOZ_ASSERT
(
key
.
isVoid
(
)
)
;
return
KeyType
:
:
Void
;
}
;
if
(
keyType
(
a
)
!
=
keyType
(
b
)
)
{
*
lessOrEqualp
=
(
keyType
(
a
)
<
=
keyType
(
b
)
)
;
return
true
;
}
if
(
a
.
isInt
(
)
)
{
*
lessOrEqualp
=
(
a
.
toInt
(
)
<
=
b
.
toInt
(
)
)
;
return
true
;
}
RootedString
astr
(
cx
)
bstr
(
cx
)
;
if
(
a
.
isSymbol
(
)
)
{
MOZ_ASSERT
(
b
.
isSymbol
(
)
)
;
JS
:
:
SymbolCode
ca
=
a
.
toSymbol
(
)
-
>
code
(
)
;
JS
:
:
SymbolCode
cb
=
b
.
toSymbol
(
)
-
>
code
(
)
;
if
(
ca
!
=
cb
)
{
*
lessOrEqualp
=
uint32_t
(
ca
)
<
=
uint32_t
(
cb
)
;
return
true
;
}
MOZ_ASSERT
(
ca
=
=
JS
:
:
SymbolCode
:
:
PrivateNameSymbol
|
|
ca
=
=
JS
:
:
SymbolCode
:
:
InSymbolRegistry
|
|
ca
=
=
JS
:
:
SymbolCode
:
:
UniqueSymbol
)
;
astr
=
a
.
toSymbol
(
)
-
>
description
(
)
;
bstr
=
b
.
toSymbol
(
)
-
>
description
(
)
;
if
(
!
astr
|
|
!
bstr
)
{
*
lessOrEqualp
=
!
astr
;
return
true
;
}
}
else
{
astr
=
IdToString
(
cx
a
)
;
if
(
!
astr
)
{
return
false
;
}
bstr
=
IdToString
(
cx
b
)
;
if
(
!
bstr
)
{
return
false
;
}
}
int32_t
result
;
if
(
!
CompareStrings
(
cx
astr
bstr
&
result
)
)
{
return
false
;
}
*
lessOrEqualp
=
(
result
<
=
0
)
;
return
true
;
}
}
;
#
endif
static
void
AssertNoEnumerableProperties
(
NativeObject
*
obj
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
obj
-
>
hasEnumerableProperty
(
)
)
;
static
constexpr
size_t
MaxPropsToCheck
=
5
;
size_t
count
=
0
;
for
(
ShapePropertyIter
<
NoGC
>
iter
(
obj
-
>
shape
(
)
)
;
!
iter
.
done
(
)
;
iter
+
+
)
{
MOZ_ASSERT
(
!
iter
-
>
enumerable
(
)
)
;
if
(
+
+
count
>
MaxPropsToCheck
)
{
break
;
}
}
#
endif
}
static
bool
ClassCanHaveExtraEnumeratedProperties
(
const
JSClass
*
clasp
)
{
return
IsTypedArrayClass
(
clasp
)
|
|
clasp
-
>
getNewEnumerate
(
)
|
|
clasp
-
>
getEnumerate
(
)
;
}
static
bool
ProtoMayHaveEnumerableProperties
(
JSObject
*
obj
)
{
if
(
!
obj
-
>
is
<
NativeObject
>
(
)
)
{
return
true
;
}
JSObject
*
proto
=
obj
-
>
as
<
NativeObject
>
(
)
.
staticPrototype
(
)
;
while
(
proto
)
{
if
(
!
proto
-
>
is
<
NativeObject
>
(
)
)
{
return
true
;
}
NativeObject
*
nproto
=
&
proto
-
>
as
<
NativeObject
>
(
)
;
if
(
nproto
-
>
hasEnumerableProperty
(
)
|
|
nproto
-
>
getDenseInitializedLength
(
)
>
0
|
|
ClassCanHaveExtraEnumeratedProperties
(
nproto
-
>
getClass
(
)
)
)
{
return
true
;
}
AssertNoEnumerableProperties
(
nproto
)
;
proto
=
nproto
-
>
staticPrototype
(
)
;
}
return
false
;
}
bool
PropertyEnumerator
:
:
snapshot
(
JSContext
*
cx
)
{
if
(
!
(
flags_
&
JSITER_HIDDEN
)
&
&
!
(
flags_
&
JSITER_OWNONLY
)
&
&
!
ProtoMayHaveEnumerableProperties
(
obj_
)
)
{
flags_
|
=
JSITER_OWNONLY
;
}
bool
checkForDuplicates
=
!
(
flags_
&
JSITER_OWNONLY
)
;
do
{
if
(
obj_
-
>
getClass
(
)
-
>
getNewEnumerate
(
)
)
{
markIndicesUnsupported
(
)
;
if
(
!
enumerateExtraProperties
(
cx
)
)
{
return
false
;
}
if
(
obj_
-
>
is
<
NativeObject
>
(
)
)
{
if
(
!
enumerateNativeProperties
(
cx
true
)
)
{
return
false
;
}
}
}
else
if
(
obj_
-
>
is
<
NativeObject
>
(
)
)
{
if
(
JSEnumerateOp
enumerateOp
=
obj_
-
>
getClass
(
)
-
>
getEnumerate
(
)
)
{
markIndicesUnsupported
(
)
;
if
(
!
enumerateOp
(
cx
obj_
.
as
<
NativeObject
>
(
)
)
)
{
return
false
;
}
}
if
(
!
enumerateNativeProperties
(
cx
checkForDuplicates
)
)
{
return
false
;
}
}
else
if
(
obj_
-
>
is
<
ProxyObject
>
(
)
)
{
markIndicesUnsupported
(
)
;
if
(
checkForDuplicates
)
{
if
(
!
enumerateProxyProperties
<
true
>
(
cx
)
)
{
return
false
;
}
}
else
{
if
(
!
enumerateProxyProperties
<
false
>
(
cx
)
)
{
return
false
;
}
}
}
else
{
MOZ_CRASH
(
"
non
-
native
objects
must
have
an
enumerate
op
"
)
;
}
if
(
flags_
&
JSITER_OWNONLY
)
{
break
;
}
if
(
!
GetPrototype
(
cx
obj_
&
obj_
)
)
{
return
false
;
}
enumeratingProtoChain_
=
true
;
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
}
while
(
obj_
!
=
nullptr
)
;
#
ifdef
DEBUG
if
(
js
:
:
SupportDifferentialTesting
(
)
&
&
!
supportsIndices
(
)
)
{
jsid
*
ids
=
props_
.
begin
(
)
;
size_t
n
=
props_
.
length
(
)
;
RootedIdVector
tmp
(
cx
)
;
if
(
!
tmp
.
resize
(
n
)
)
{
return
false
;
}
PodCopy
(
tmp
.
begin
(
)
ids
n
)
;
if
(
!
MergeSort
(
ids
n
tmp
.
begin
(
)
SortComparatorIds
(
cx
)
)
)
{
return
false
;
}
}
#
endif
return
true
;
}
JS_PUBLIC_API
bool
js
:
:
GetPropertyKeys
(
JSContext
*
cx
HandleObject
obj
unsigned
flags
MutableHandleIdVector
props
)
{
uint32_t
validFlags
=
flags
&
(
JSITER_OWNONLY
|
JSITER_HIDDEN
|
JSITER_SYMBOLS
|
JSITER_SYMBOLSONLY
|
JSITER_PRIVATE
)
;
PropertyEnumerator
enumerator
(
cx
obj
validFlags
props
)
;
return
enumerator
.
snapshot
(
cx
)
;
}
static
inline
void
RegisterEnumerator
(
JSContext
*
cx
NativeIterator
*
ni
)
{
MOZ_ASSERT
(
ni
-
>
objectBeingIterated
(
)
)
;
ni
-
>
link
(
cx
-
>
compartment
(
)
-
>
enumeratorsAddr
(
)
)
;
MOZ_ASSERT
(
!
ni
-
>
isActive
(
)
)
;
ni
-
>
markActive
(
)
;
}
static
PropertyIteratorObject
*
NewPropertyIteratorObject
(
JSContext
*
cx
)
{
const
JSClass
*
clasp
=
&
PropertyIteratorObject
:
:
class_
;
Rooted
<
SharedShape
*
>
shape
(
cx
SharedShape
:
:
getInitialShape
(
cx
clasp
cx
-
>
realm
(
)
TaggedProto
(
nullptr
)
ITERATOR_FINALIZE_KIND
)
)
;
if
(
!
shape
)
{
return
nullptr
;
}
JSObject
*
obj
=
NativeObject
:
:
create
(
cx
ITERATOR_FINALIZE_KIND
GetInitialHeap
(
GenericObject
clasp
)
shape
)
;
if
(
!
obj
)
{
return
nullptr
;
}
PropertyIteratorObject
*
res
=
&
obj
-
>
as
<
PropertyIteratorObject
>
(
)
;
MOZ_ASSERT
(
!
js
:
:
gc
:
:
IsInsideNursery
(
res
)
)
;
return
res
;
}
static
inline
size_t
NumTrailingBytes
(
size_t
propertyCount
size_t
shapeCount
bool
hasIndices
)
{
static_assert
(
alignof
(
GCPtr
<
JSLinearString
*
>
)
<
=
alignof
(
NativeIterator
)
)
;
static_assert
(
alignof
(
GCPtr
<
Shape
*
>
)
<
=
alignof
(
GCPtr
<
JSLinearString
*
>
)
)
;
static_assert
(
alignof
(
PropertyIndex
)
<
=
alignof
(
GCPtr
<
Shape
*
>
)
)
;
size_t
result
=
propertyCount
*
sizeof
(
GCPtr
<
JSLinearString
*
>
)
+
shapeCount
*
sizeof
(
GCPtr
<
Shape
*
>
)
;
if
(
hasIndices
)
{
result
+
=
propertyCount
*
sizeof
(
PropertyIndex
)
;
}
return
result
;
}
static
inline
size_t
AllocationSize
(
size_t
propertyCount
size_t
shapeCount
bool
hasIndices
)
{
return
sizeof
(
NativeIterator
)
+
NumTrailingBytes
(
propertyCount
shapeCount
hasIndices
)
;
}
static
PropertyIteratorObject
*
CreatePropertyIterator
(
JSContext
*
cx
Handle
<
JSObject
*
>
objBeingIterated
HandleIdVector
props
bool
supportsIndices
PropertyIndexVector
*
indices
uint32_t
cacheableProtoChainLength
)
{
MOZ_ASSERT_IF
(
indices
supportsIndices
)
;
if
(
props
.
length
(
)
>
NativeIterator
:
:
PropCountLimit
)
{
ReportAllocationOverflow
(
cx
)
;
return
nullptr
;
}
bool
hasIndices
=
!
!
indices
;
uint32_t
numShapes
=
cacheableProtoChainLength
;
if
(
numShapes
=
=
0
&
&
hasIndices
)
{
numShapes
=
1
;
}
Rooted
<
PropertyIteratorObject
*
>
propIter
(
cx
NewPropertyIteratorObject
(
cx
)
)
;
if
(
!
propIter
)
{
return
nullptr
;
}
void
*
mem
=
cx
-
>
pod_malloc_with_extra
<
NativeIterator
uint8_t
>
(
NumTrailingBytes
(
props
.
length
(
)
numShapes
hasIndices
)
)
;
if
(
!
mem
)
{
return
nullptr
;
}
bool
hadError
=
false
;
new
(
mem
)
NativeIterator
(
cx
propIter
objBeingIterated
props
supportsIndices
indices
numShapes
&
hadError
)
;
if
(
hadError
)
{
return
nullptr
;
}
return
propIter
;
}
static
HashNumber
HashIteratorShape
(
Shape
*
shape
)
{
return
DefaultHasher
<
Shape
*
>
:
:
hash
(
shape
)
;
}
NativeIterator
:
:
NativeIterator
(
JSContext
*
cx
Handle
<
PropertyIteratorObject
*
>
propIter
Handle
<
JSObject
*
>
objBeingIterated
HandleIdVector
props
bool
supportsIndices
PropertyIndexVector
*
indices
uint32_t
numShapes
bool
*
hadError
)
:
objectBeingIterated_
(
objBeingIterated
)
iterObj_
(
propIter
)
shapesEnd_
(
shapesBegin
(
)
)
propertyCursor_
(
reinterpret_cast
<
GCPtr
<
JSLinearString
*
>
*
>
(
shapesBegin
(
)
+
numShapes
)
)
propertiesEnd_
(
propertyCursor_
)
shapesHash_
(
0
)
flagsAndCount_
(
initialFlagsAndCount
(
props
.
length
(
)
)
)
{
MOZ_ASSERT_IF
(
numShapes
>
0
objBeingIterated
&
&
objBeingIterated
-
>
is
<
NativeObject
>
(
)
)
;
MOZ_ASSERT
(
!
*
hadError
)
;
bool
hasActualIndices
=
!
!
indices
;
MOZ_ASSERT_IF
(
hasActualIndices
indices
-
>
length
(
)
=
=
props
.
length
(
)
)
;
propIter
-
>
initNativeIterator
(
this
)
;
size_t
nbytes
=
AllocationSize
(
props
.
length
(
)
numShapes
hasActualIndices
)
;
AddCellMemory
(
propIter
nbytes
MemoryUse
:
:
NativeIterator
)
;
if
(
supportsIndices
)
{
if
(
hasActualIndices
)
{
setIndicesState
(
NativeIteratorIndices
:
:
Disabled
)
;
}
else
{
setIndicesState
(
NativeIteratorIndices
:
:
AvailableOnRequest
)
;
}
}
if
(
numShapes
>
0
)
{
JSObject
*
pobj
=
objBeingIterated
;
HashNumber
shapesHash
=
0
;
for
(
uint32_t
i
=
0
;
i
<
numShapes
;
i
+
+
)
{
MOZ_ASSERT
(
pobj
-
>
is
<
NativeObject
>
(
)
)
;
Shape
*
shape
=
pobj
-
>
shape
(
)
;
new
(
shapesEnd_
)
GCPtr
<
Shape
*
>
(
shape
)
;
shapesEnd_
+
+
;
shapesHash
=
mozilla
:
:
AddToHash
(
shapesHash
HashIteratorShape
(
shape
)
)
;
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
shapesHash_
=
shapesHash
;
MOZ_ASSERT_IF
(
numShapes
>
1
pobj
=
=
nullptr
)
;
}
MOZ_ASSERT
(
static_cast
<
void
*
>
(
shapesEnd_
)
=
=
propertyCursor_
)
;
size_t
numProps
=
props
.
length
(
)
;
for
(
size_t
i
=
0
;
i
<
numProps
;
i
+
+
)
{
JSLinearString
*
str
=
IdToString
(
cx
props
[
i
]
)
;
if
(
!
str
)
{
*
hadError
=
true
;
return
;
}
new
(
propertiesEnd_
)
GCPtr
<
JSLinearString
*
>
(
str
)
;
propertiesEnd_
+
+
;
}
if
(
hasActualIndices
)
{
PropertyIndex
*
cursor
=
indicesBegin
(
)
;
for
(
size_t
i
=
0
;
i
<
numProps
;
i
+
+
)
{
*
cursor
+
+
=
(
*
indices
)
[
i
]
;
}
MOZ_ASSERT
(
uintptr_t
(
cursor
)
=
=
uintptr_t
(
this
)
+
nbytes
)
;
setIndicesState
(
NativeIteratorIndices
:
:
Valid
)
;
}
markInitialized
(
)
;
MOZ_ASSERT
(
!
*
hadError
)
;
}
inline
size_t
NativeIterator
:
:
allocationSize
(
)
const
{
size_t
numShapes
=
shapesEnd
(
)
-
shapesBegin
(
)
;
return
AllocationSize
(
initialPropertyCount
(
)
numShapes
indicesAllocated
(
)
)
;
}
bool
IteratorHashPolicy
:
:
match
(
PropertyIteratorObject
*
obj
const
Lookup
&
lookup
)
{
NativeIterator
*
ni
=
obj
-
>
getNativeIterator
(
)
;
if
(
ni
-
>
shapesHash
(
)
!
=
lookup
.
shapesHash
|
|
ni
-
>
shapeCount
(
)
!
=
lookup
.
numShapes
)
{
return
false
;
}
return
ArrayEqual
(
reinterpret_cast
<
Shape
*
*
>
(
ni
-
>
shapesBegin
(
)
)
lookup
.
shapes
ni
-
>
shapeCount
(
)
)
;
}
static
inline
bool
CanCompareIterableObjectToCache
(
JSObject
*
obj
)
{
if
(
obj
-
>
is
<
NativeObject
>
(
)
)
{
return
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
=
=
0
;
}
return
false
;
}
static
bool
CanStoreInIteratorCache
(
JSObject
*
obj
)
{
do
{
MOZ_ASSERT
(
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
=
=
0
)
;
if
(
MOZ_UNLIKELY
(
ClassCanHaveExtraEnumeratedProperties
(
obj
-
>
getClass
(
)
)
)
)
{
return
false
;
}
obj
=
obj
-
>
staticPrototype
(
)
;
}
while
(
obj
)
;
return
true
;
}
static
MOZ_ALWAYS_INLINE
PropertyIteratorObject
*
LookupInShapeIteratorCache
(
JSContext
*
cx
JSObject
*
obj
uint32_t
*
cacheableProtoChainLength
)
{
if
(
!
obj
-
>
shape
(
)
-
>
cache
(
)
.
isIterator
(
)
|
|
!
CanCompareIterableObjectToCache
(
obj
)
)
{
return
nullptr
;
}
PropertyIteratorObject
*
iterobj
=
obj
-
>
shape
(
)
-
>
cache
(
)
.
toIterator
(
)
;
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
MOZ_ASSERT
(
*
ni
-
>
shapesBegin
(
)
=
=
obj
-
>
shape
(
)
)
;
if
(
!
ni
-
>
isReusable
(
)
)
{
return
nullptr
;
}
JSObject
*
pobj
=
obj
;
for
(
GCPtr
<
Shape
*
>
*
s
=
ni
-
>
shapesBegin
(
)
+
1
;
s
!
=
ni
-
>
shapesEnd
(
)
;
s
+
+
)
{
Shape
*
shape
=
*
s
;
pobj
=
pobj
-
>
staticPrototype
(
)
;
if
(
pobj
-
>
shape
(
)
!
=
shape
)
{
return
nullptr
;
}
if
(
!
CanCompareIterableObjectToCache
(
pobj
)
)
{
return
nullptr
;
}
}
MOZ_ASSERT
(
CanStoreInIteratorCache
(
obj
)
)
;
*
cacheableProtoChainLength
=
ni
-
>
shapeCount
(
)
;
return
iterobj
;
}
static
MOZ_ALWAYS_INLINE
PropertyIteratorObject
*
LookupInIteratorCache
(
JSContext
*
cx
JSObject
*
obj
uint32_t
*
cacheableProtoChainLength
)
{
MOZ_ASSERT
(
*
cacheableProtoChainLength
=
=
0
)
;
if
(
PropertyIteratorObject
*
shapeCached
=
LookupInShapeIteratorCache
(
cx
obj
cacheableProtoChainLength
)
)
{
return
shapeCached
;
}
Vector
<
Shape
*
8
>
shapes
(
cx
)
;
HashNumber
shapesHash
=
0
;
JSObject
*
pobj
=
obj
;
do
{
if
(
!
CanCompareIterableObjectToCache
(
pobj
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
pobj
-
>
is
<
NativeObject
>
(
)
)
;
Shape
*
shape
=
pobj
-
>
shape
(
)
;
shapesHash
=
mozilla
:
:
AddToHash
(
shapesHash
HashIteratorShape
(
shape
)
)
;
if
(
MOZ_UNLIKELY
(
!
shapes
.
append
(
shape
)
)
)
{
cx
-
>
recoverFromOutOfMemory
(
)
;
return
nullptr
;
}
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
while
(
pobj
)
;
MOZ_ASSERT
(
!
shapes
.
empty
(
)
)
;
*
cacheableProtoChainLength
=
shapes
.
length
(
)
;
IteratorHashPolicy
:
:
Lookup
lookup
(
shapes
.
begin
(
)
shapes
.
length
(
)
shapesHash
)
;
auto
p
=
ObjectRealm
:
:
get
(
obj
)
.
iteratorCache
.
lookup
(
lookup
)
;
if
(
!
p
)
{
return
nullptr
;
}
PropertyIteratorObject
*
iterobj
=
*
p
;
MOZ_ASSERT
(
iterobj
-
>
compartment
(
)
=
=
cx
-
>
compartment
(
)
)
;
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
if
(
!
ni
-
>
isReusable
(
)
)
{
return
nullptr
;
}
return
iterobj
;
}
[
[
nodiscard
]
]
static
bool
StoreInIteratorCache
(
JSContext
*
cx
JSObject
*
obj
PropertyIteratorObject
*
iterobj
)
{
MOZ_ASSERT
(
CanStoreInIteratorCache
(
obj
)
)
;
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
MOZ_ASSERT
(
ni
-
>
shapeCount
(
)
>
0
)
;
obj
-
>
shape
(
)
-
>
maybeCacheIterator
(
cx
iterobj
)
;
IteratorHashPolicy
:
:
Lookup
lookup
(
reinterpret_cast
<
Shape
*
*
>
(
ni
-
>
shapesBegin
(
)
)
ni
-
>
shapeCount
(
)
ni
-
>
shapesHash
(
)
)
;
ObjectRealm
:
:
IteratorCache
&
cache
=
ObjectRealm
:
:
get
(
obj
)
.
iteratorCache
;
bool
ok
;
auto
p
=
cache
.
lookupForAdd
(
lookup
)
;
if
(
MOZ_LIKELY
(
!
p
)
)
{
ok
=
cache
.
add
(
p
iterobj
)
;
}
else
{
cache
.
remove
(
p
)
;
ok
=
cache
.
relookupOrAdd
(
p
lookup
iterobj
)
;
}
if
(
!
ok
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
EnumerateProperties
(
JSContext
*
cx
HandleObject
obj
MutableHandleIdVector
props
)
{
MOZ_ASSERT
(
props
.
empty
(
)
)
;
if
(
MOZ_UNLIKELY
(
obj
-
>
is
<
ProxyObject
>
(
)
)
)
{
return
Proxy
:
:
enumerate
(
cx
obj
props
)
;
}
uint32_t
flags
=
0
;
PropertyEnumerator
enumerator
(
cx
obj
flags
props
)
;
return
enumerator
.
snapshot
(
cx
)
;
}
#
ifdef
DEBUG
static
bool
IndicesAreValid
(
NativeObject
*
obj
NativeIterator
*
ni
)
{
MOZ_ASSERT
(
ni
-
>
hasValidIndices
(
)
)
;
size_t
numDenseElements
=
obj
-
>
getDenseInitializedLength
(
)
;
size_t
numFixedSlots
=
obj
-
>
numFixedSlots
(
)
;
const
Value
*
elements
=
obj
-
>
getDenseElements
(
)
;
GCPtr
<
JSLinearString
*
>
*
keys
=
ni
-
>
propertiesBegin
(
)
;
PropertyIndex
*
indices
=
ni
-
>
indicesBegin
(
)
;
for
(
uint32_t
i
=
0
;
i
<
ni
-
>
numKeys
(
)
;
i
+
+
)
{
PropertyIndex
index
=
indices
[
i
]
;
switch
(
index
.
kind
(
)
)
{
case
PropertyIndex
:
:
Kind
:
:
Element
:
if
(
index
.
index
(
)
>
=
numDenseElements
|
|
elements
[
index
.
index
(
)
]
.
isMagic
(
JS_ELEMENTS_HOLE
)
)
{
return
false
;
}
break
;
case
PropertyIndex
:
:
Kind
:
:
FixedSlot
:
{
Maybe
<
PropertyInfo
>
prop
=
obj
-
>
lookupPure
(
AtomToId
(
&
keys
[
i
]
-
>
asAtom
(
)
)
)
;
if
(
!
prop
.
isSome
(
)
|
|
!
prop
-
>
hasSlot
(
)
|
|
!
prop
-
>
enumerable
(
)
|
|
!
prop
-
>
isDataProperty
(
)
|
|
prop
-
>
slot
(
)
!
=
index
.
index
(
)
)
{
return
false
;
}
break
;
}
case
PropertyIndex
:
:
Kind
:
:
DynamicSlot
:
{
Maybe
<
PropertyInfo
>
prop
=
obj
-
>
lookupPure
(
AtomToId
(
&
keys
[
i
]
-
>
asAtom
(
)
)
)
;
if
(
!
prop
.
isSome
(
)
|
|
!
prop
-
>
hasSlot
(
)
|
|
!
prop
-
>
enumerable
(
)
|
|
!
prop
-
>
isDataProperty
(
)
|
|
prop
-
>
slot
(
)
-
numFixedSlots
!
=
index
.
index
(
)
)
{
return
false
;
}
break
;
}
case
PropertyIndex
:
:
Kind
:
:
Invalid
:
return
false
;
}
}
return
true
;
}
#
endif
template
<
bool
WantIndices
>
static
PropertyIteratorObject
*
GetIteratorImpl
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
!
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
;
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
obj
-
>
compartment
(
)
"
We
may
end
up
allocating
shapes
in
the
wrong
zone
!
"
)
;
uint32_t
cacheableProtoChainLength
=
0
;
if
(
PropertyIteratorObject
*
iterobj
=
LookupInIteratorCache
(
cx
obj
&
cacheableProtoChainLength
)
)
{
NativeIterator
*
ni
=
iterobj
-
>
getNativeIterator
(
)
;
bool
recreateWithIndices
=
WantIndices
&
&
ni
-
>
indicesAvailableOnRequest
(
)
;
if
(
!
recreateWithIndices
)
{
MOZ_ASSERT_IF
(
WantIndices
&
&
ni
-
>
hasValidIndices
(
)
IndicesAreValid
(
&
obj
-
>
as
<
NativeObject
>
(
)
ni
)
)
;
ni
-
>
initObjectBeingIterated
(
*
obj
)
;
RegisterEnumerator
(
cx
ni
)
;
return
iterobj
;
}
}
if
(
cacheableProtoChainLength
>
0
&
&
!
CanStoreInIteratorCache
(
obj
)
)
{
cacheableProtoChainLength
=
0
;
}
RootedIdVector
keys
(
cx
)
;
PropertyIndexVector
indices
(
cx
)
;
bool
supportsIndices
=
false
;
if
(
MOZ_UNLIKELY
(
obj
-
>
is
<
ProxyObject
>
(
)
)
)
{
if
(
!
Proxy
:
:
enumerate
(
cx
obj
&
keys
)
)
{
return
nullptr
;
}
}
else
{
uint32_t
flags
=
0
;
PropertyEnumerator
enumerator
(
cx
obj
flags
&
keys
&
indices
)
;
if
(
!
enumerator
.
snapshot
(
cx
)
)
{
return
nullptr
;
}
supportsIndices
=
enumerator
.
supportsIndices
(
)
;
MOZ_ASSERT_IF
(
WantIndices
&
&
supportsIndices
keys
.
length
(
)
=
=
indices
.
length
(
)
)
;
}
if
(
obj
-
>
is
<
NativeObject
>
(
)
&
&
obj
-
>
as
<
NativeObject
>
(
)
.
getDenseInitializedLength
(
)
>
0
)
{
obj
-
>
as
<
NativeObject
>
(
)
.
markDenseElementsMaybeInIteration
(
)
;
}
PropertyIndexVector
*
indicesPtr
=
WantIndices
&
&
supportsIndices
?
&
indices
:
nullptr
;
PropertyIteratorObject
*
iterobj
=
CreatePropertyIterator
(
cx
obj
keys
supportsIndices
indicesPtr
cacheableProtoChainLength
)
;
if
(
!
iterobj
)
{
return
nullptr
;
}
RegisterEnumerator
(
cx
iterobj
-
>
getNativeIterator
(
)
)
;
cx
-
>
check
(
iterobj
)
;
MOZ_ASSERT_IF
(
WantIndices
&
&
supportsIndices
IndicesAreValid
(
&
obj
-
>
as
<
NativeObject
>
(
)
iterobj
-
>
getNativeIterator
(
)
)
)
;
#
ifdef
DEBUG
if
(
obj
-
>
is
<
NativeObject
>
(
)
)
{
if
(
PrototypeMayHaveIndexedProperties
(
&
obj
-
>
as
<
NativeObject
>
(
)
)
)
{
iterobj
-
>
getNativeIterator
(
)
-
>
setMaybeHasIndexedPropertiesFromProto
(
)
;
}
}
#
endif
if
(
cacheableProtoChainLength
>
0
)
{
if
(
!
StoreInIteratorCache
(
cx
obj
iterobj
)
)
{
return
nullptr
;
}
}
return
iterobj
;
}
PropertyIteratorObject
*
js
:
:
GetIterator
(
JSContext
*
cx
HandleObject
obj
)
{
return
GetIteratorImpl
<
false
>
(
cx
obj
)
;
}
PropertyIteratorObject
*
js
:
:
GetIteratorWithIndices
(
JSContext
*
cx
HandleObject
obj
)
{
return
GetIteratorImpl
<
true
>
(
cx
obj
)
;
}
PropertyIteratorObject
*
js
:
:
LookupInIteratorCache
(
JSContext
*
cx
HandleObject
obj
)
{
uint32_t
dummy
=
0
;
return
LookupInIteratorCache
(
cx
obj
&
dummy
)
;
}
PropertyIteratorObject
*
js
:
:
LookupInShapeIteratorCache
(
JSContext
*
cx
HandleObject
obj
)
{
uint32_t
dummy
=
0
;
return
LookupInShapeIteratorCache
(
cx
obj
&
dummy
)
;
}
PlainObject
*
js
:
:
CreateIterResultObject
(
JSContext
*
cx
HandleValue
value
bool
done
)
{
Rooted
<
PlainObject
*
>
templateObject
(
cx
GlobalObject
:
:
getOrCreateIterResultTemplateObject
(
cx
)
)
;
if
(
!
templateObject
)
{
return
nullptr
;
}
PlainObject
*
resultObj
=
PlainObject
:
:
createWithTemplate
(
cx
templateObject
)
;
if
(
!
resultObj
)
{
return
nullptr
;
}
resultObj
-
>
setSlot
(
GlobalObject
:
:
IterResultObjectValueSlot
value
)
;
resultObj
-
>
setSlot
(
GlobalObject
:
:
IterResultObjectDoneSlot
done
?
TrueHandleValue
:
FalseHandleValue
)
;
return
resultObj
;
}
PlainObject
*
GlobalObject
:
:
getOrCreateIterResultTemplateObject
(
JSContext
*
cx
)
{
HeapPtr
<
PlainObject
*
>
&
obj
=
cx
-
>
global
(
)
-
>
data
(
)
.
iterResultTemplate
;
if
(
obj
)
{
return
obj
;
}
PlainObject
*
templateObj
=
createIterResultTemplateObject
(
cx
WithObjectPrototype
:
:
Yes
)
;
obj
.
init
(
templateObj
)
;
return
obj
;
}
PlainObject
*
GlobalObject
:
:
getOrCreateIterResultWithoutPrototypeTemplateObject
(
JSContext
*
cx
)
{
HeapPtr
<
PlainObject
*
>
&
obj
=
cx
-
>
global
(
)
-
>
data
(
)
.
iterResultWithoutPrototypeTemplate
;
if
(
obj
)
{
return
obj
;
}
PlainObject
*
templateObj
=
createIterResultTemplateObject
(
cx
WithObjectPrototype
:
:
No
)
;
obj
.
init
(
templateObj
)
;
return
obj
;
}
PlainObject
*
GlobalObject
:
:
createIterResultTemplateObject
(
JSContext
*
cx
WithObjectPrototype
withProto
)
{
Rooted
<
PlainObject
*
>
templateObject
(
cx
withProto
=
=
WithObjectPrototype
:
:
Yes
?
NewPlainObject
(
cx
TenuredObject
)
:
NewPlainObjectWithProto
(
cx
nullptr
)
)
;
if
(
!
templateObject
)
{
return
nullptr
;
}
if
(
!
NativeDefineDataProperty
(
cx
templateObject
cx
-
>
names
(
)
.
value
UndefinedHandleValue
JSPROP_ENUMERATE
)
)
{
return
nullptr
;
}
if
(
!
NativeDefineDataProperty
(
cx
templateObject
cx
-
>
names
(
)
.
done
TrueHandleValue
JSPROP_ENUMERATE
)
)
{
return
nullptr
;
}
#
ifdef
DEBUG
ShapePropertyIter
<
NoGC
>
iter
(
templateObject
-
>
shape
(
)
)
;
MOZ_ASSERT
(
iter
-
>
slot
(
)
=
=
GlobalObject
:
:
IterResultObjectDoneSlot
&
&
iter
-
>
key
(
)
=
=
NameToId
(
cx
-
>
names
(
)
.
done
)
)
;
iter
+
+
;
MOZ_ASSERT
(
iter
-
>
slot
(
)
=
=
GlobalObject
:
:
IterResultObjectValueSlot
&
&
iter
-
>
key
(
)
=
=
NameToId
(
cx
-
>
names
(
)
.
value
)
)
;
#
endif
return
templateObject
;
}
size_t
PropertyIteratorObject
:
:
sizeOfMisc
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
getNativeIterator
(
)
)
;
}
void
PropertyIteratorObject
:
:
trace
(
JSTracer
*
trc
JSObject
*
obj
)
{
if
(
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
)
{
ni
-
>
trace
(
trc
)
;
}
}
void
PropertyIteratorObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
if
(
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
)
{
gcx
-
>
free_
(
obj
ni
ni
-
>
allocationSize
(
)
MemoryUse
:
:
NativeIterator
)
;
}
}
const
JSClassOps
PropertyIteratorObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
finalize
nullptr
nullptr
trace
}
;
const
JSClass
PropertyIteratorObject
:
:
class_
=
{
"
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
|
JSCLASS_BACKGROUND_FINALIZE
&
PropertyIteratorObject
:
:
classOps_
}
;
static
const
JSClass
ArrayIteratorPrototypeClass
=
{
"
Array
Iterator
"
0
}
;
enum
{
ArrayIteratorSlotIteratedObject
ArrayIteratorSlotNextIndex
ArrayIteratorSlotItemKind
ArrayIteratorSlotCount
}
;
const
JSClass
ArrayIteratorObject
:
:
class_
=
{
"
Array
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
ArrayIteratorSlotCount
)
}
;
ArrayIteratorObject
*
js
:
:
NewArrayIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
ArrayIteratorObject
>
(
cx
proto
)
;
}
ArrayIteratorObject
*
js
:
:
NewArrayIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
ArrayIteratorObject
>
(
cx
proto
)
;
}
static
const
JSFunctionSpec
array_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
ArrayIteratorNext
"
0
0
)
JS_FS_END
}
;
static
const
JSClass
StringIteratorPrototypeClass
=
{
"
String
Iterator
"
0
}
;
enum
{
StringIteratorSlotIteratedObject
StringIteratorSlotNextIndex
StringIteratorSlotCount
}
;
const
JSClass
StringIteratorObject
:
:
class_
=
{
"
String
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
StringIteratorSlotCount
)
}
;
static
const
JSFunctionSpec
string_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
StringIteratorNext
"
0
0
)
JS_FS_END
}
;
StringIteratorObject
*
js
:
:
NewStringIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
StringIteratorObject
>
(
cx
proto
)
;
}
StringIteratorObject
*
js
:
:
NewStringIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
StringIteratorObject
>
(
cx
proto
)
;
}
static
const
JSClass
RegExpStringIteratorPrototypeClass
=
{
"
RegExp
String
Iterator
"
0
}
;
enum
{
RegExpStringIteratorSlotRegExp
RegExpStringIteratorSlotString
RegExpStringIteratorSlotSource
RegExpStringIteratorSlotFlags
RegExpStringIteratorSlotLastIndex
RegExpStringIteratorSlotCount
}
;
static_assert
(
RegExpStringIteratorSlotRegExp
=
=
REGEXP_STRING_ITERATOR_REGEXP_SLOT
"
RegExpStringIteratorSlotRegExp
must
match
self
-
hosting
define
"
"
for
regexp
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotString
=
=
REGEXP_STRING_ITERATOR_STRING_SLOT
"
RegExpStringIteratorSlotString
must
match
self
-
hosting
define
"
"
for
string
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotSource
=
=
REGEXP_STRING_ITERATOR_SOURCE_SLOT
"
RegExpStringIteratorSlotString
must
match
self
-
hosting
define
"
"
for
source
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotFlags
=
=
REGEXP_STRING_ITERATOR_FLAGS_SLOT
"
RegExpStringIteratorSlotFlags
must
match
self
-
hosting
define
"
"
for
flags
slot
.
"
)
;
static_assert
(
RegExpStringIteratorSlotLastIndex
=
=
REGEXP_STRING_ITERATOR_LASTINDEX_SLOT
"
RegExpStringIteratorSlotLastIndex
must
match
self
-
hosting
"
"
define
for
lastIndex
slot
.
"
)
;
const
JSClass
RegExpStringIteratorObject
:
:
class_
=
{
"
RegExp
String
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
RegExpStringIteratorSlotCount
)
}
;
static
const
JSFunctionSpec
regexp_string_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
RegExpStringIteratorNext
"
0
0
)
JS_FS_END
}
;
RegExpStringIteratorObject
*
js
:
:
NewRegExpStringIteratorTemplate
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTenuredObjectWithGivenProto
<
RegExpStringIteratorObject
>
(
cx
proto
)
;
}
RegExpStringIteratorObject
*
js
:
:
NewRegExpStringIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
RegExpStringIteratorObject
>
(
cx
proto
)
;
}
PropertyIteratorObject
*
GlobalObject
:
:
getOrCreateEmptyIterator
(
JSContext
*
cx
)
{
if
(
!
cx
-
>
global
(
)
-
>
data
(
)
.
emptyIterator
)
{
RootedIdVector
props
(
cx
)
;
PropertyIteratorObject
*
iter
=
CreatePropertyIterator
(
cx
nullptr
props
false
nullptr
0
)
;
if
(
!
iter
)
{
return
nullptr
;
}
iter
-
>
getNativeIterator
(
)
-
>
markEmptyIteratorSingleton
(
)
;
cx
-
>
global
(
)
-
>
data
(
)
.
emptyIterator
.
init
(
iter
)
;
}
return
cx
-
>
global
(
)
-
>
data
(
)
.
emptyIterator
;
}
PropertyIteratorObject
*
js
:
:
ValueToIterator
(
JSContext
*
cx
HandleValue
vp
)
{
RootedObject
obj
(
cx
)
;
if
(
vp
.
isObject
(
)
)
{
obj
=
&
vp
.
toObject
(
)
;
}
else
if
(
vp
.
isNullOrUndefined
(
)
)
{
return
GlobalObject
:
:
getOrCreateEmptyIterator
(
cx
)
;
}
else
{
obj
=
ToObject
(
cx
vp
)
;
if
(
!
obj
)
{
return
nullptr
;
}
}
return
GetIterator
(
cx
obj
)
;
}
void
js
:
:
CloseIterator
(
JSObject
*
obj
)
{
if
(
!
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
{
return
;
}
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
;
if
(
ni
-
>
isEmptyIteratorSingleton
(
)
)
{
return
;
}
ni
-
>
unlink
(
)
;
MOZ_ASSERT
(
ni
-
>
isActive
(
)
)
;
ni
-
>
markInactive
(
)
;
ni
-
>
clearObjectBeingIterated
(
)
;
ni
-
>
resetPropertyCursorForReuse
(
)
;
}
bool
js
:
:
IteratorCloseForException
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
cx
-
>
isExceptionPending
(
)
)
;
bool
isClosingGenerator
=
cx
-
>
isClosingGenerator
(
)
;
JS
:
:
AutoSaveExceptionState
savedExc
(
cx
)
;
RootedValue
returnMethod
(
cx
)
;
if
(
!
GetProperty
(
cx
obj
obj
cx
-
>
names
(
)
.
return_
&
returnMethod
)
)
{
return
false
;
}
if
(
returnMethod
.
isNullOrUndefined
(
)
)
{
return
true
;
}
if
(
!
IsCallable
(
returnMethod
)
)
{
return
ReportIsNotFunction
(
cx
returnMethod
)
;
}
RootedValue
rval
(
cx
)
;
bool
ok
=
Call
(
cx
returnMethod
obj
&
rval
)
;
if
(
isClosingGenerator
)
{
if
(
!
ok
)
{
return
false
;
}
if
(
!
rval
.
isObject
(
)
)
{
return
ThrowCheckIsObject
(
cx
CheckIsObjectKind
:
:
IteratorReturn
)
;
}
}
else
{
savedExc
.
restore
(
)
;
}
return
true
;
}
void
js
:
:
UnwindIteratorForUncatchableException
(
JSObject
*
obj
)
{
if
(
obj
-
>
is
<
PropertyIteratorObject
>
(
)
)
{
NativeIterator
*
ni
=
obj
-
>
as
<
PropertyIteratorObject
>
(
)
.
getNativeIterator
(
)
;
if
(
ni
-
>
isEmptyIteratorSingleton
(
)
)
{
return
;
}
ni
-
>
unlink
(
)
;
}
}
static
bool
SuppressDeletedProperty
(
JSContext
*
cx
NativeIterator
*
ni
HandleObject
obj
Handle
<
JSLinearString
*
>
str
)
{
if
(
ni
-
>
objectBeingIterated
(
)
!
=
obj
)
{
return
true
;
}
ni
-
>
disableIndices
(
)
;
if
(
ni
-
>
previousPropertyWas
(
str
)
)
{
return
true
;
}
while
(
true
)
{
bool
restart
=
false
;
GCPtr
<
JSLinearString
*
>
*
const
cursor
=
ni
-
>
nextProperty
(
)
;
GCPtr
<
JSLinearString
*
>
*
const
end
=
ni
-
>
propertiesEnd
(
)
;
for
(
GCPtr
<
JSLinearString
*
>
*
idp
=
cursor
;
idp
<
end
;
+
+
idp
)
{
if
(
(
*
idp
)
-
>
isAtom
(
)
&
&
str
-
>
isAtom
(
)
)
{
if
(
*
idp
!
=
str
)
{
continue
;
}
}
else
{
if
(
!
EqualStrings
(
*
idp
str
)
)
{
continue
;
}
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototype
(
cx
obj
&
proto
)
)
{
return
false
;
}
if
(
proto
)
{
RootedId
id
(
cx
)
;
RootedValue
idv
(
cx
StringValue
(
*
idp
)
)
;
if
(
!
PrimitiveValueToId
<
CanGC
>
(
cx
idv
&
id
)
)
{
return
false
;
}
Rooted
<
mozilla
:
:
Maybe
<
PropertyDescriptor
>
>
desc
(
cx
)
;
RootedObject
holder
(
cx
)
;
if
(
!
GetPropertyDescriptor
(
cx
proto
id
&
desc
&
holder
)
)
{
return
false
;
}
if
(
desc
.
isSome
(
)
&
&
desc
-
>
enumerable
(
)
)
{
continue
;
}
}
if
(
end
!
=
ni
-
>
propertiesEnd
(
)
|
|
cursor
!
=
ni
-
>
nextProperty
(
)
)
{
restart
=
true
;
break
;
}
if
(
idp
=
=
cursor
)
{
ni
-
>
incCursor
(
)
;
}
else
{
for
(
GCPtr
<
JSLinearString
*
>
*
p
=
idp
;
p
+
1
!
=
end
;
p
+
+
)
{
*
p
=
*
(
p
+
1
)
;
}
ni
-
>
trimLastProperty
(
)
;
}
ni
-
>
markHasUnvisitedPropertyDeletion
(
)
;
return
true
;
}
if
(
!
restart
)
{
return
true
;
}
}
}
static
bool
SuppressDeletedPropertyHelper
(
JSContext
*
cx
HandleObject
obj
Handle
<
JSLinearString
*
>
str
)
{
NativeIteratorListIter
iter
(
obj
-
>
compartment
(
)
-
>
enumeratorsAddr
(
)
)
;
while
(
!
iter
.
done
(
)
)
{
NativeIterator
*
ni
=
iter
.
next
(
)
;
if
(
!
SuppressDeletedProperty
(
cx
ni
obj
str
)
)
{
return
false
;
}
}
return
true
;
}
bool
js
:
:
SuppressDeletedProperty
(
JSContext
*
cx
HandleObject
obj
jsid
id
)
{
if
(
MOZ_LIKELY
(
!
obj
-
>
compartment
(
)
-
>
objectMaybeInIteration
(
obj
)
)
)
{
return
true
;
}
if
(
id
.
isSymbol
(
)
)
{
return
true
;
}
Rooted
<
JSLinearString
*
>
str
(
cx
IdToString
(
cx
id
)
)
;
if
(
!
str
)
{
return
false
;
}
return
SuppressDeletedPropertyHelper
(
cx
obj
str
)
;
}
bool
js
:
:
SuppressDeletedElement
(
JSContext
*
cx
HandleObject
obj
uint32_t
index
)
{
if
(
MOZ_LIKELY
(
!
obj
-
>
compartment
(
)
-
>
objectMaybeInIteration
(
obj
)
)
)
{
return
true
;
}
RootedId
id
(
cx
)
;
if
(
!
IndexToId
(
cx
index
&
id
)
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
str
(
cx
IdToString
(
cx
id
)
)
;
if
(
!
str
)
{
return
false
;
}
return
SuppressDeletedPropertyHelper
(
cx
obj
str
)
;
}
#
ifdef
DEBUG
void
js
:
:
AssertDenseElementsNotIterated
(
NativeObject
*
obj
)
{
static
constexpr
uint32_t
MaxPropsToCheck
=
10
;
uint32_t
propsChecked
=
0
;
NativeIteratorListIter
iter
(
obj
-
>
compartment
(
)
-
>
enumeratorsAddr
(
)
)
;
while
(
!
iter
.
done
(
)
)
{
NativeIterator
*
ni
=
iter
.
next
(
)
;
if
(
ni
-
>
objectBeingIterated
(
)
=
=
obj
&
&
!
ni
-
>
maybeHasIndexedPropertiesFromProto
(
)
)
{
for
(
GCPtr
<
JSLinearString
*
>
*
idp
=
ni
-
>
nextProperty
(
)
;
idp
<
ni
-
>
propertiesEnd
(
)
;
+
+
idp
)
{
uint32_t
index
;
if
(
idp
-
>
get
(
)
-
>
isIndex
(
&
index
)
)
{
MOZ_ASSERT
(
!
obj
-
>
containsDenseElement
(
index
)
)
;
}
if
(
+
+
propsChecked
>
MaxPropsToCheck
)
{
return
;
}
}
}
}
}
#
endif
static
const
JSFunctionSpec
iterator_methods
[
]
=
{
JS_SELF_HOSTED_SYM_FN
(
iterator
"
IteratorIdentity
"
0
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
iterator_static_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
from
"
"
IteratorFrom
"
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
iterator_methods_with_helpers
[
]
=
{
JS_SELF_HOSTED_FN
(
"
map
"
"
IteratorMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
filter
"
"
IteratorFilter
"
1
0
)
JS_SELF_HOSTED_FN
(
"
take
"
"
IteratorTake
"
1
0
)
JS_SELF_HOSTED_FN
(
"
drop
"
"
IteratorDrop
"
1
0
)
JS_SELF_HOSTED_FN
(
"
asIndexedPairs
"
"
IteratorAsIndexedPairs
"
0
0
)
JS_SELF_HOSTED_FN
(
"
flatMap
"
"
IteratorFlatMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reduce
"
"
IteratorReduce
"
1
0
)
JS_SELF_HOSTED_FN
(
"
toArray
"
"
IteratorToArray
"
0
0
)
JS_SELF_HOSTED_FN
(
"
forEach
"
"
IteratorForEach
"
1
0
)
JS_SELF_HOSTED_FN
(
"
some
"
"
IteratorSome
"
1
0
)
JS_SELF_HOSTED_FN
(
"
every
"
"
IteratorEvery
"
1
0
)
JS_SELF_HOSTED_FN
(
"
find
"
"
IteratorFind
"
1
0
)
JS_SELF_HOSTED_SYM_FN
(
iterator
"
IteratorIdentity
"
0
0
)
JS_FS_END
}
;
bool
GlobalObject
:
:
initIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
hasBuiltinProto
(
ProtoKind
:
:
IteratorProto
)
)
{
return
true
;
}
RootedObject
proto
(
cx
GlobalObject
:
:
createBlankPrototype
<
PlainObject
>
(
cx
global
)
)
;
if
(
!
proto
)
{
return
false
;
}
global
-
>
initBuiltinProto
(
ProtoKind
:
:
IteratorProto
proto
)
;
if
(
!
DefinePropertiesAndFunctions
(
cx
proto
nullptr
iterator_methods
)
)
{
return
false
;
}
return
true
;
}
template
<
GlobalObject
:
:
ProtoKind
Kind
const
JSClass
*
ProtoClass
const
JSFunctionSpec
*
Methods
>
bool
GlobalObject
:
:
initObjectIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
Handle
<
JSAtom
*
>
tag
)
{
if
(
global
-
>
hasBuiltinProto
(
Kind
)
)
{
return
true
;
}
RootedObject
iteratorProto
(
cx
GlobalObject
:
:
getOrCreateIteratorPrototype
(
cx
global
)
)
;
if
(
!
iteratorProto
)
{
return
false
;
}
RootedObject
proto
(
cx
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
ProtoClass
iteratorProto
)
)
;
if
(
!
proto
|
|
!
DefinePropertiesAndFunctions
(
cx
proto
nullptr
Methods
)
|
|
(
tag
&
&
!
DefineToStringTag
(
cx
proto
tag
)
)
)
{
return
false
;
}
global
-
>
initBuiltinProto
(
Kind
proto
)
;
return
true
;
}
NativeObject
*
GlobalObject
:
:
getOrCreateArrayIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
ArrayIteratorProto
cx
-
>
names
(
)
.
ArrayIterator
.
toHandle
(
)
initObjectIteratorProto
<
ProtoKind
:
:
ArrayIteratorProto
&
ArrayIteratorPrototypeClass
array_iterator_methods
>
)
)
;
}
JSObject
*
GlobalObject
:
:
getOrCreateStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
StringIteratorProto
cx
-
>
names
(
)
.
StringIterator
.
toHandle
(
)
initObjectIteratorProto
<
ProtoKind
:
:
StringIteratorProto
&
StringIteratorPrototypeClass
string_iterator_methods
>
)
;
}
JSObject
*
GlobalObject
:
:
getOrCreateRegExpStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
RegExpStringIteratorProto
cx
-
>
names
(
)
.
RegExpStringIterator
.
toHandle
(
)
initObjectIteratorProto
<
ProtoKind
:
:
RegExpStringIteratorProto
&
RegExpStringIteratorPrototypeClass
regexp_string_iterator_methods
>
)
;
}
static
bool
IteratorConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
js_Iterator_str
)
)
{
return
false
;
}
if
(
args
.
callee
(
)
=
=
args
.
newTarget
(
)
.
toObject
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BOGUS_CONSTRUCTOR
js_Iterator_str
)
;
return
false
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Iterator
&
proto
)
)
{
return
false
;
}
JSObject
*
obj
=
NewObjectWithClassProto
<
IteratorObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
const
ClassSpec
IteratorObjectClassSpec
=
{
GenericCreateConstructor
<
IteratorConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
IteratorObject
>
iterator_static_methods
nullptr
iterator_methods_with_helpers
nullptr
nullptr
}
;
const
JSClass
IteratorObject
:
:
class_
=
{
js_Iterator_str
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Iterator
)
JS_NULL_CLASS_OPS
&
IteratorObjectClassSpec
}
;
const
JSClass
IteratorObject
:
:
protoClass_
=
{
"
Iterator
.
prototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Iterator
)
JS_NULL_CLASS_OPS
&
IteratorObjectClassSpec
}
;
static
const
JSFunctionSpec
wrap_for_valid_iterator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
WrapForValidIteratorNext
"
1
0
)
JS_SELF_HOSTED_FN
(
"
return
"
"
WrapForValidIteratorReturn
"
1
0
)
JS_SELF_HOSTED_FN
(
"
throw
"
"
WrapForValidIteratorThrow
"
1
0
)
JS_FS_END
}
;
static
const
JSClass
WrapForValidIteratorPrototypeClass
=
{
"
Wrap
For
Valid
Iterator
"
0
}
;
const
JSClass
WrapForValidIteratorObject
:
:
class_
=
{
"
Wrap
For
Valid
Iterator
"
JSCLASS_HAS_RESERVED_SLOTS
(
WrapForValidIteratorObject
:
:
SlotCount
)
}
;
NativeObject
*
GlobalObject
:
:
getOrCreateWrapForValidIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
WrapForValidIteratorProto
Handle
<
JSAtom
*
>
(
nullptr
)
initObjectIteratorProto
<
ProtoKind
:
:
WrapForValidIteratorProto
&
WrapForValidIteratorPrototypeClass
wrap_for_valid_iterator_methods
>
)
)
;
}
WrapForValidIteratorObject
*
js
:
:
NewWrapForValidIterator
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateWrapForValidIteratorPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
WrapForValidIteratorObject
>
(
cx
proto
)
;
}
static
const
JSFunctionSpec
iterator_helper_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
next
"
"
IteratorHelperNext
"
1
0
)
JS_SELF_HOSTED_FN
(
"
return
"
"
IteratorHelperReturn
"
1
0
)
JS_SELF_HOSTED_FN
(
"
throw
"
"
IteratorHelperThrow
"
1
0
)
JS_FS_END
}
;
static
const
JSClass
IteratorHelperPrototypeClass
=
{
"
Iterator
Helper
"
0
}
;
const
JSClass
IteratorHelperObject
:
:
class_
=
{
"
Iterator
Helper
"
JSCLASS_HAS_RESERVED_SLOTS
(
IteratorHelperObject
:
:
SlotCount
)
}
;
NativeObject
*
GlobalObject
:
:
getOrCreateIteratorHelperPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
MaybeNativeObject
(
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
IteratorHelperProto
Handle
<
JSAtom
*
>
(
nullptr
)
initObjectIteratorProto
<
ProtoKind
:
:
IteratorHelperProto
&
IteratorHelperPrototypeClass
iterator_helper_methods
>
)
)
;
}
IteratorHelperObject
*
js
:
:
NewIteratorHelper
(
JSContext
*
cx
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateIteratorHelperPrototype
(
cx
cx
-
>
global
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewObjectWithGivenProto
<
IteratorHelperObject
>
(
cx
proto
)
;
}
bool
js
:
:
IterableToArray
(
JSContext
*
cx
HandleValue
iterable
MutableHandle
<
ArrayObject
*
>
array
)
{
JS
:
:
ForOfIterator
iterator
(
cx
)
;
if
(
!
iterator
.
init
(
iterable
JS
:
:
ForOfIterator
:
:
ThrowOnNonIterable
)
)
{
return
false
;
}
array
.
set
(
NewDenseEmptyArray
(
cx
)
)
;
if
(
!
array
)
{
return
false
;
}
RootedValue
nextValue
(
cx
)
;
while
(
true
)
{
bool
done
;
if
(
!
iterator
.
next
(
&
nextValue
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
!
NewbornArrayPush
(
cx
array
nextValue
)
)
{
return
false
;
}
}
return
true
;
}
