#
ifndef
vm_BytecodeIterator_h
#
define
vm_BytecodeIterator_h
#
include
"
vm
/
BytecodeLocation
.
h
"
namespace
js
{
class
BytecodeIterator
{
BytecodeLocation
current_
;
public
:
inline
explicit
BytecodeIterator
(
const
JSScript
*
script
)
;
explicit
BytecodeIterator
(
BytecodeLocation
loc
)
:
current_
(
loc
)
{
}
BytecodeIterator
&
operator
=
(
const
BytecodeIterator
&
)
=
default
;
bool
operator
=
=
(
const
BytecodeIterator
&
other
)
const
{
return
other
.
current_
=
=
current_
;
}
bool
operator
!
=
(
const
BytecodeIterator
&
other
)
const
{
return
!
(
other
.
current_
=
=
current_
)
;
}
const
BytecodeLocation
&
operator
*
(
)
const
{
return
current_
;
}
const
BytecodeLocation
*
operator
-
>
(
)
const
{
return
&
current_
;
}
BytecodeIterator
&
operator
+
+
(
)
{
current_
=
current_
.
next
(
)
;
return
*
this
;
}
BytecodeIterator
operator
+
+
(
int
)
{
BytecodeIterator
previous
(
*
this
)
;
current_
=
current_
.
next
(
)
;
return
previous
;
}
}
;
class
AllBytecodesIterable
{
const
JSScript
*
script_
;
public
:
explicit
AllBytecodesIterable
(
const
JSScript
*
script
)
:
script_
(
script
)
{
}
BytecodeIterator
begin
(
)
;
BytecodeIterator
end
(
)
;
}
;
class
BytecodeLocationRange
{
BytecodeLocation
beginLoc_
;
BytecodeLocation
endLoc_
;
public
:
explicit
BytecodeLocationRange
(
BytecodeLocation
beginLoc
BytecodeLocation
endLoc
)
:
beginLoc_
(
beginLoc
)
endLoc_
(
endLoc
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
beginLoc
.
hasSameScript
(
endLoc
)
)
;
#
endif
}
BytecodeIterator
begin
(
)
;
BytecodeIterator
end
(
)
;
}
;
}
#
endif
