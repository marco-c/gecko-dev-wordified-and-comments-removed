#
ifndef
vm_PromiseLookup_h
#
define
vm_PromiseLookup_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
CallArgs
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JSFunction
;
namespace
js
{
class
NativeObject
;
class
PromiseObject
;
class
Shape
;
class
MOZ_NON_TEMPORARY_CLASS
PromiseLookup
final
{
MOZ_INIT_OUTSIDE_CTOR
Shape
*
promiseConstructorShape_
;
#
ifdef
DEBUG
MOZ_INIT_OUTSIDE_CTOR
Shape
*
promiseSpeciesShape_
;
#
endif
MOZ_INIT_OUTSIDE_CTOR
Shape
*
promiseProtoShape_
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
promiseResolveSlot_
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
promiseProtoConstructorSlot_
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
promiseProtoThenSlot_
;
enum
class
State
:
uint8_t
{
Uninitialized
Initialized
Disabled
}
;
State
state_
=
State
:
:
Uninitialized
;
void
initialize
(
JSContext
*
cx
)
;
void
reset
(
)
;
bool
isPromiseStateStillSane
(
JSContext
*
cx
)
;
enum
class
Reinitialize
:
bool
{
Allowed
Disallowed
}
;
bool
ensureInitialized
(
JSContext
*
cx
Reinitialize
reinitialize
)
;
bool
hasDefaultProtoAndNoShadowedProperties
(
JSContext
*
cx
PromiseObject
*
promise
)
;
bool
isDefaultInstance
(
JSContext
*
cx
PromiseObject
*
promise
Reinitialize
reinitialize
)
;
static
JSFunction
*
getPromiseConstructor
(
JSContext
*
cx
)
;
static
NativeObject
*
getPromisePrototype
(
JSContext
*
cx
)
;
static
bool
isDataPropertyNative
(
JSContext
*
cx
NativeObject
*
obj
uint32_t
slot
JSNative
native
)
;
static
bool
isAccessorPropertyNative
(
JSContext
*
cx
Shape
*
shape
JSNative
native
)
;
public
:
PromiseLookup
(
)
{
reset
(
)
;
}
bool
isDefaultPromiseState
(
JSContext
*
cx
)
;
bool
isDefaultInstance
(
JSContext
*
cx
PromiseObject
*
promise
)
{
return
isDefaultInstance
(
cx
promise
Reinitialize
:
:
Allowed
)
;
}
bool
isDefaultInstanceWhenPromiseStateIsSane
(
JSContext
*
cx
PromiseObject
*
promise
)
{
return
isDefaultInstance
(
cx
promise
Reinitialize
:
:
Disallowed
)
;
}
void
purge
(
)
{
if
(
state_
=
=
State
:
:
Initialized
)
{
reset
(
)
;
}
}
}
;
}
#
endif
