#
ifndef
vm_HelperThreadState_h
#
define
vm_HelperThreadState_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
ds
/
Fifo
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
HelperThreadAPI
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
vm
/
ErrorContext
.
h
"
#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
vm
/
HelperThreadTask
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
OffThreadPromiseRuntimeState
.
h
"
namespace
js
{
struct
ParseTask
;
struct
DelazifyTask
;
struct
FreeDelazifyTask
;
struct
PromiseHelperTask
;
class
PromiseObject
;
namespace
jit
{
class
IonCompileTask
;
class
IonFreeTask
;
}
enum
class
ParseTaskKind
{
ScriptStencil
ModuleStencil
StencilDecode
MultiStencilsDecode
}
;
namespace
wasm
{
struct
CompileTask
;
typedef
Fifo
<
CompileTask
*
0
SystemAllocPolicy
>
CompileTaskPtrFifo
;
struct
Tier2GeneratorTask
:
public
HelperThreadTask
{
virtual
~
Tier2GeneratorTask
(
)
=
default
;
virtual
void
cancel
(
)
=
0
;
}
;
using
UniqueTier2GeneratorTask
=
UniquePtr
<
Tier2GeneratorTask
>
;
typedef
Vector
<
Tier2GeneratorTask
*
0
SystemAllocPolicy
>
Tier2GeneratorTaskPtrVector
;
}
class
GlobalHelperThreadState
{
friend
class
AutoLockHelperThreadState
;
friend
class
AutoUnlockHelperThreadState
;
public
:
static
const
size_t
MaxTier2GeneratorTasks
=
1
;
size_t
cpuCount
;
size_t
threadCount
;
size_t
stackQuota
;
bool
terminating_
=
false
;
typedef
Vector
<
jit
:
:
IonCompileTask
*
0
SystemAllocPolicy
>
IonCompileTaskVector
;
using
IonFreeTaskVector
=
Vector
<
js
:
:
UniquePtr
<
jit
:
:
IonFreeTask
>
0
SystemAllocPolicy
>
;
typedef
Vector
<
UniquePtr
<
ParseTask
>
0
SystemAllocPolicy
>
ParseTaskVector
;
using
ParseTaskList
=
mozilla
:
:
LinkedList
<
ParseTask
>
;
using
DelazifyTaskList
=
mozilla
:
:
LinkedList
<
DelazifyTask
>
;
using
FreeDelazifyTaskVector
=
Vector
<
js
:
:
UniquePtr
<
FreeDelazifyTask
>
1
SystemAllocPolicy
>
;
typedef
Vector
<
UniquePtr
<
SourceCompressionTask
>
0
SystemAllocPolicy
>
SourceCompressionTaskVector
;
typedef
Vector
<
PromiseHelperTask
*
0
SystemAllocPolicy
>
PromiseHelperTaskVector
;
typedef
Vector
<
JSContext
*
0
SystemAllocPolicy
>
ContextVector
;
mozilla
:
:
EnumeratedArray
<
ThreadType
ThreadType
:
:
THREAD_TYPE_MAX
size_t
>
runningTaskCount
;
size_t
totalCountRunningTasks
;
WriteOnceData
<
JS
:
:
RegisterThreadCallback
>
registerThread
;
WriteOnceData
<
JS
:
:
UnregisterThreadCallback
>
unregisterThread
;
private
:
IonCompileTaskVector
ionWorklist_
ionFinishedList_
;
IonFreeTaskVector
ionFreeList_
;
wasm
:
:
CompileTaskPtrFifo
wasmWorklist_tier1_
;
wasm
:
:
CompileTaskPtrFifo
wasmWorklist_tier2_
;
wasm
:
:
Tier2GeneratorTaskPtrVector
wasmTier2GeneratorWorklist_
;
uint32_t
wasmTier2GeneratorsFinished_
;
PromiseHelperTaskVector
promiseHelperTasks_
;
ParseTaskVector
parseWorklist_
;
ParseTaskList
parseFinishedList_
;
DelazifyTaskList
delazifyWorklist_
;
FreeDelazifyTaskVector
freeDelazifyTaskVector_
;
SourceCompressionTaskVector
compressionPendingList_
;
SourceCompressionTaskVector
compressionWorklist_
;
SourceCompressionTaskVector
compressionFinishedList_
;
GCParallelTaskList
gcParallelWorklist_
;
size_t
gcParallelThreadCount
;
ContextVector
helperContexts_
;
using
HelperThreadTaskVector
=
Vector
<
HelperThreadTask
*
0
SystemAllocPolicy
>
;
HelperThreadTaskVector
helperTasks_
;
JS
:
:
HelperThreadTaskCallback
dispatchTaskCallback
=
nullptr
;
size_t
tasksPending_
=
0
;
bool
isInitialized_
=
false
;
bool
useInternalThreadPool_
=
true
;
ParseTask
*
removeFinishedParseTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
)
;
public
:
void
addSizeOfIncludingThis
(
JS
:
:
GlobalStats
*
stats
const
AutoLockHelperThreadState
&
lock
)
const
;
size_t
maxIonCompilationThreads
(
)
const
;
size_t
maxWasmCompilationThreads
(
)
const
;
size_t
maxWasmTier2GeneratorThreads
(
)
const
;
size_t
maxPromiseHelperThreads
(
)
const
;
size_t
maxParseThreads
(
)
const
;
size_t
maxCompressionThreads
(
)
const
;
size_t
maxGCParallelThreads
(
const
AutoLockHelperThreadState
&
lock
)
const
;
GlobalHelperThreadState
(
)
;
bool
isInitialized
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
isInitialized_
;
}
[
[
nodiscard
]
]
bool
ensureInitialized
(
)
;
[
[
nodiscard
]
]
bool
ensureThreadCount
(
size_t
count
AutoLockHelperThreadState
&
lock
)
;
void
finish
(
AutoLockHelperThreadState
&
lock
)
;
void
finishThreads
(
AutoLockHelperThreadState
&
lock
)
;
void
setCpuCount
(
size_t
count
)
;
void
setDispatchTaskCallback
(
JS
:
:
HelperThreadTaskCallback
callback
size_t
threadCount
size_t
stackSize
const
AutoLockHelperThreadState
&
lock
)
;
JSContext
*
getFirstUnusedContext
(
AutoLockHelperThreadState
&
locked
)
;
void
destroyHelperContexts
(
AutoLockHelperThreadState
&
lock
)
;
#
ifdef
DEBUG
void
assertIsLockedByCurrentThread
(
)
const
;
#
endif
void
wait
(
AutoLockHelperThreadState
&
locked
mozilla
:
:
TimeDuration
timeout
=
mozilla
:
:
TimeDuration
:
:
Forever
(
)
)
;
void
notifyAll
(
const
AutoLockHelperThreadState
&
)
;
bool
useInternalThreadPool
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
useInternalThreadPool_
;
}
bool
isTerminating
(
const
AutoLockHelperThreadState
&
locked
)
const
{
return
terminating_
;
}
private
:
void
notifyOne
(
const
AutoLockHelperThreadState
&
)
;
public
:
template
<
typename
T
>
void
remove
(
T
&
vector
size_t
*
index
)
{
if
(
*
index
!
=
vector
.
length
(
)
-
1
)
{
vector
[
*
index
]
=
std
:
:
move
(
vector
.
back
(
)
)
;
}
(
*
index
)
-
-
;
vector
.
popBack
(
)
;
}
IonCompileTaskVector
&
ionWorklist
(
const
AutoLockHelperThreadState
&
)
{
return
ionWorklist_
;
}
IonCompileTaskVector
&
ionFinishedList
(
const
AutoLockHelperThreadState
&
)
{
return
ionFinishedList_
;
}
IonFreeTaskVector
&
ionFreeList
(
const
AutoLockHelperThreadState
&
)
{
return
ionFreeList_
;
}
wasm
:
:
CompileTaskPtrFifo
&
wasmWorklist
(
const
AutoLockHelperThreadState
&
wasm
:
:
CompileMode
m
)
{
switch
(
m
)
{
case
wasm
:
:
CompileMode
:
:
Once
:
case
wasm
:
:
CompileMode
:
:
Tier1
:
return
wasmWorklist_tier1_
;
case
wasm
:
:
CompileMode
:
:
Tier2
:
return
wasmWorklist_tier2_
;
default
:
MOZ_CRASH
(
)
;
}
}
wasm
:
:
Tier2GeneratorTaskPtrVector
&
wasmTier2GeneratorWorklist
(
const
AutoLockHelperThreadState
&
)
{
return
wasmTier2GeneratorWorklist_
;
}
void
incWasmTier2GeneratorsFinished
(
const
AutoLockHelperThreadState
&
)
{
wasmTier2GeneratorsFinished_
+
+
;
}
uint32_t
wasmTier2GeneratorsFinished
(
const
AutoLockHelperThreadState
&
)
const
{
return
wasmTier2GeneratorsFinished_
;
}
PromiseHelperTaskVector
&
promiseHelperTasks
(
const
AutoLockHelperThreadState
&
)
{
return
promiseHelperTasks_
;
}
ParseTaskVector
&
parseWorklist
(
const
AutoLockHelperThreadState
&
)
{
return
parseWorklist_
;
}
ParseTaskList
&
parseFinishedList
(
const
AutoLockHelperThreadState
&
)
{
return
parseFinishedList_
;
}
DelazifyTaskList
&
delazifyWorklist
(
const
AutoLockHelperThreadState
&
)
{
return
delazifyWorklist_
;
}
FreeDelazifyTaskVector
&
freeDelazifyTaskVector
(
const
AutoLockHelperThreadState
&
)
{
return
freeDelazifyTaskVector_
;
}
SourceCompressionTaskVector
&
compressionPendingList
(
const
AutoLockHelperThreadState
&
)
{
return
compressionPendingList_
;
}
SourceCompressionTaskVector
&
compressionWorklist
(
const
AutoLockHelperThreadState
&
)
{
return
compressionWorklist_
;
}
SourceCompressionTaskVector
&
compressionFinishedList
(
const
AutoLockHelperThreadState
&
)
{
return
compressionFinishedList_
;
}
GCParallelTaskList
&
gcParallelWorklist
(
)
{
return
gcParallelWorklist_
;
}
void
setGCParallelThreadCount
(
size_t
count
const
AutoLockHelperThreadState
&
)
{
MOZ_ASSERT
(
count
>
=
1
)
;
MOZ_ASSERT
(
count
<
=
threadCount
)
;
gcParallelThreadCount
=
count
;
}
HelperThreadTaskVector
&
helperTasks
(
const
AutoLockHelperThreadState
&
)
{
return
helperTasks_
;
}
bool
canStartWasmCompile
(
const
AutoLockHelperThreadState
&
lock
wasm
:
:
CompileMode
mode
)
;
bool
canStartWasmTier1CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartWasmTier2CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartWasmTier2GeneratorTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartPromiseHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartIonFreeTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartParseTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartFreeDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
;
bool
canStartGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetWasmCompile
(
const
AutoLockHelperThreadState
&
lock
wasm
:
:
CompileMode
mode
)
;
HelperThreadTask
*
maybeGetWasmTier1CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetWasmTier2CompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetWasmTier2GeneratorTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetPromiseHelperTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetLowPrioIonCompileTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetIonFreeTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetParseTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetFreeDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetDelazifyTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetCompressionTask
(
const
AutoLockHelperThreadState
&
lock
)
;
HelperThreadTask
*
maybeGetGCParallelTask
(
const
AutoLockHelperThreadState
&
lock
)
;
enum
class
ScheduleCompressionTask
{
GC
API
}
;
void
startHandlingCompressionTasks
(
ScheduleCompressionTask
schedule
JSRuntime
*
maybeRuntime
const
AutoLockHelperThreadState
&
lock
)
;
jit
:
:
IonCompileTask
*
highestPriorityPendingIonCompile
(
const
AutoLockHelperThreadState
&
lock
bool
checkExecutionStatus
)
;
private
:
UniquePtr
<
ParseTask
>
finishParseTaskCommon
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
)
;
bool
finishMultiParseTask
(
JSContext
*
cx
ParseTaskKind
kind
JS
:
:
OffThreadToken
*
token
mozilla
:
:
Vector
<
RefPtr
<
JS
:
:
Stencil
>
>
*
stencils
)
;
public
:
void
cancelParseTask
(
JSRuntime
*
rt
JS
:
:
OffThreadToken
*
token
)
;
void
destroyParseTask
(
JSRuntime
*
rt
ParseTask
*
parseTask
)
;
void
trace
(
JSTracer
*
trc
)
;
already_AddRefed
<
frontend
:
:
CompilationStencil
>
finishStencilTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
JS
:
:
InstantiationStorage
*
storage
)
;
bool
finishMultiStencilsDecodeTask
(
JSContext
*
cx
JS
:
:
OffThreadToken
*
token
mozilla
:
:
Vector
<
RefPtr
<
JS
:
:
Stencil
>
>
*
stencils
)
;
bool
hasActiveThreads
(
const
AutoLockHelperThreadState
&
)
;
bool
canStartTasks
(
const
AutoLockHelperThreadState
&
locked
)
;
void
waitForAllTasks
(
)
;
void
waitForAllTasksLocked
(
AutoLockHelperThreadState
&
)
;
bool
checkTaskThreadLimit
(
ThreadType
threadType
size_t
maxThreads
bool
isMaster
const
AutoLockHelperThreadState
&
lock
)
const
;
bool
checkTaskThreadLimit
(
ThreadType
threadType
size_t
maxThreads
const
AutoLockHelperThreadState
&
lock
)
const
{
return
checkTaskThreadLimit
(
threadType
maxThreads
false
lock
)
;
}
void
triggerFreeUnusedMemory
(
)
;
private
:
js
:
:
ConditionVariable
consumerWakeup
;
void
dispatch
(
JS
:
:
DispatchReason
reason
const
AutoLockHelperThreadState
&
locked
)
;
void
runTask
(
HelperThreadTask
*
task
AutoLockHelperThreadState
&
lock
)
;
public
:
bool
submitTask
(
wasm
:
:
UniqueTier2GeneratorTask
task
)
;
bool
submitTask
(
wasm
:
:
CompileTask
*
task
wasm
:
:
CompileMode
mode
)
;
bool
submitTask
(
UniquePtr
<
jit
:
:
IonFreeTask
>
task
const
AutoLockHelperThreadState
&
lock
)
;
bool
submitTask
(
jit
:
:
IonCompileTask
*
task
const
AutoLockHelperThreadState
&
locked
)
;
bool
submitTask
(
UniquePtr
<
SourceCompressionTask
>
task
const
AutoLockHelperThreadState
&
locked
)
;
bool
submitTask
(
JSRuntime
*
rt
UniquePtr
<
ParseTask
>
task
const
AutoLockHelperThreadState
&
locked
)
;
void
submitTask
(
DelazifyTask
*
task
const
AutoLockHelperThreadState
&
locked
)
;
bool
submitTask
(
UniquePtr
<
FreeDelazifyTask
>
task
const
AutoLockHelperThreadState
&
locked
)
;
bool
submitTask
(
PromiseHelperTask
*
task
)
;
bool
submitTask
(
GCParallelTask
*
task
const
AutoLockHelperThreadState
&
locked
)
;
void
runOneTask
(
AutoLockHelperThreadState
&
lock
)
;
void
runTaskLocked
(
HelperThreadTask
*
task
AutoLockHelperThreadState
&
lock
)
;
using
Selector
=
HelperThreadTask
*
(
GlobalHelperThreadState
:
:
*
)
(
const
AutoLockHelperThreadState
&
)
;
static
const
Selector
selectors
[
]
;
HelperThreadTask
*
findHighestPriorityTask
(
const
AutoLockHelperThreadState
&
locked
)
;
}
;
static
inline
bool
IsHelperThreadStateInitialized
(
)
{
extern
GlobalHelperThreadState
*
gHelperThreadState
;
return
gHelperThreadState
;
}
static
inline
GlobalHelperThreadState
&
HelperThreadState
(
)
{
extern
GlobalHelperThreadState
*
gHelperThreadState
;
MOZ_ASSERT
(
gHelperThreadState
)
;
return
*
gHelperThreadState
;
}
class
MOZ_RAII
AutoSetHelperThreadContext
{
JSContext
*
cx
;
AutoLockHelperThreadState
&
lock
;
public
:
AutoSetHelperThreadContext
(
const
JS
:
:
ContextOptions
&
options
AutoLockHelperThreadState
&
lock
)
;
~
AutoSetHelperThreadContext
(
)
;
}
;
struct
MOZ_RAII
AutoSetContextRuntime
{
explicit
AutoSetContextRuntime
(
JSRuntime
*
rt
)
{
TlsContext
.
get
(
)
-
>
setRuntime
(
rt
)
;
}
~
AutoSetContextRuntime
(
)
{
TlsContext
.
get
(
)
-
>
setRuntime
(
nullptr
)
;
}
}
;
struct
ParseTask
:
public
mozilla
:
:
LinkedListElement
<
ParseTask
>
public
JS
:
:
OffThreadToken
public
HelperThreadTask
{
JS
:
:
NativeStackLimit
stackLimit
;
ParseTaskKind
kind
;
JS
:
:
OwningCompileOptions
options
;
const
JS
:
:
ContextOptions
contextOptions
;
JSRuntime
*
runtime
=
nullptr
;
JS
:
:
OffThreadCompileCallback
callback
;
void
*
callbackData
;
mozilla
:
:
Vector
<
RefPtr
<
JS
:
:
Stencil
>
>
stencils
;
UniquePtr
<
frontend
:
:
CompilationInput
>
stencilInput_
;
RefPtr
<
frontend
:
:
CompilationStencil
>
stencil_
;
UniquePtr
<
frontend
:
:
CompilationGCOutput
>
gcOutput_
;
OffThreadErrorContext
ec_
;
ParseTask
(
ParseTaskKind
kind
JSContext
*
cx
JS
:
:
OffThreadCompileCallback
callback
void
*
callbackData
)
;
virtual
~
ParseTask
(
)
;
bool
init
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
;
void
moveGCOutputInto
(
JS
:
:
InstantiationStorage
&
storage
)
;
void
activate
(
JSRuntime
*
rt
)
;
void
deactivate
(
JSRuntime
*
rt
)
;
virtual
void
parse
(
JSContext
*
cx
ErrorContext
*
ec
)
=
0
;
bool
runtimeMatches
(
JSRuntime
*
rt
)
{
return
runtime
=
=
rt
;
}
void
trace
(
JSTracer
*
trc
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
+
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
void
runTask
(
AutoLockHelperThreadState
&
lock
)
;
void
scheduleDelazifyTask
(
AutoLockHelperThreadState
&
lock
)
;
ThreadType
threadType
(
)
override
{
return
ThreadType
:
:
THREAD_TYPE_PARSE
;
}
}
;
struct
DelazifyStrategy
{
using
ScriptIndex
=
frontend
:
:
ScriptIndex
;
virtual
~
DelazifyStrategy
(
)
=
default
;
virtual
bool
done
(
)
const
=
0
;
virtual
ScriptIndex
next
(
)
=
0
;
virtual
void
clear
(
)
=
0
;
[
[
nodiscard
]
]
virtual
bool
insert
(
ScriptIndex
index
frontend
:
:
ScriptStencilRef
&
ref
)
=
0
;
[
[
nodiscard
]
]
bool
add
(
ErrorContext
*
ec
const
frontend
:
:
CompilationStencil
&
stencil
ScriptIndex
index
)
;
}
;
struct
DepthFirstDelazification
final
:
public
DelazifyStrategy
{
Vector
<
ScriptIndex
0
SystemAllocPolicy
>
stack
;
bool
done
(
)
const
override
{
return
stack
.
empty
(
)
;
}
ScriptIndex
next
(
)
override
{
return
stack
.
popCopy
(
)
;
}
void
clear
(
)
override
{
return
stack
.
clear
(
)
;
}
bool
insert
(
ScriptIndex
index
frontend
:
:
ScriptStencilRef
&
)
override
{
return
stack
.
append
(
index
)
;
}
}
;
struct
LargeFirstDelazification
final
:
public
DelazifyStrategy
{
using
SourceSize
=
uint32_t
;
Vector
<
std
:
:
pair
<
SourceSize
ScriptIndex
>
0
SystemAllocPolicy
>
heap
;
bool
done
(
)
const
override
{
return
heap
.
empty
(
)
;
}
ScriptIndex
next
(
)
override
;
void
clear
(
)
override
{
return
heap
.
clear
(
)
;
}
bool
insert
(
ScriptIndex
frontend
:
:
ScriptStencilRef
&
)
override
;
}
;
struct
DelazifyTask
:
public
mozilla
:
:
LinkedListElement
<
DelazifyTask
>
public
HelperThreadTask
{
JS
:
:
NativeStackLimit
stackLimit
;
JSRuntime
*
runtime
=
nullptr
;
const
JS
:
:
ContextOptions
contextOptions
;
UniquePtr
<
DelazifyStrategy
>
strategy
;
frontend
:
:
CompilationStencilMerger
merger
;
OffThreadErrorContext
ec_
;
static
UniquePtr
<
DelazifyTask
>
Create
(
JSContext
*
cx
JSRuntime
*
runtime
const
JS
:
:
ContextOptions
&
contextOptions
const
JS
:
:
ReadOnlyCompileOptions
&
options
const
frontend
:
:
CompilationStencil
&
stencil
)
;
DelazifyTask
(
JSRuntime
*
runtime
const
JS
:
:
ContextOptions
&
options
)
;
~
DelazifyTask
(
)
;
[
[
nodiscard
]
]
bool
init
(
const
JS
:
:
ReadOnlyCompileOptions
&
options
UniquePtr
<
frontend
:
:
ExtensibleCompilationStencil
>
&
&
initial
)
;
bool
isInterrupted
(
)
{
return
false
;
}
bool
runtimeMatches
(
JSRuntime
*
rt
)
{
return
runtime
=
=
rt
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
+
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
[
[
nodiscard
]
]
bool
runTask
(
JSContext
*
cx
)
;
ThreadType
threadType
(
)
override
{
return
ThreadType
:
:
THREAD_TYPE_DELAZIFY
;
}
}
;
struct
FreeDelazifyTask
:
public
HelperThreadTask
{
DelazifyTask
*
task
;
explicit
FreeDelazifyTask
(
DelazifyTask
*
t
)
:
task
(
t
)
{
}
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
ThreadType
threadType
(
)
override
{
return
ThreadType
:
:
THREAD_TYPE_DELAZIFY_FREE
;
}
}
;
class
SourceCompressionTask
:
public
HelperThreadTask
{
friend
class
HelperThread
;
friend
class
ScriptSource
;
JSRuntime
*
runtime_
;
uint64_t
majorGCNumber_
;
RefPtr
<
ScriptSource
>
source_
;
SharedImmutableString
resultString_
;
public
:
SourceCompressionTask
(
JSRuntime
*
rt
ScriptSource
*
source
)
:
runtime_
(
rt
)
majorGCNumber_
(
rt
-
>
gc
.
majorGCCount
(
)
)
source_
(
source
)
{
source
-
>
noteSourceCompressionTask
(
)
;
}
virtual
~
SourceCompressionTask
(
)
=
default
;
bool
runtimeMatches
(
JSRuntime
*
runtime
)
const
{
return
runtime
=
=
runtime_
;
}
bool
shouldStart
(
)
const
{
return
runtime_
-
>
gc
.
majorGCCount
(
)
>
majorGCNumber_
+
1
;
}
bool
shouldCancel
(
)
const
{
return
source_
-
>
refs
=
=
1
;
}
void
runTask
(
)
;
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
void
complete
(
)
;
ThreadType
threadType
(
)
override
{
return
ThreadType
:
:
THREAD_TYPE_COMPRESS
;
}
private
:
struct
PerformTaskWork
;
friend
struct
PerformTaskWork
;
template
<
typename
CharT
>
void
workEncodingSpecific
(
)
;
}
;
struct
PromiseHelperTask
:
OffThreadPromiseTask
public
HelperThreadTask
{
PromiseHelperTask
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
:
OffThreadPromiseTask
(
cx
promise
)
{
}
virtual
void
execute
(
)
=
0
;
void
executeAndResolveAndDestroy
(
JSContext
*
cx
)
;
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
ThreadType
threadType
(
)
override
{
return
THREAD_TYPE_PROMISE_TASK
;
}
}
;
}
#
endif
