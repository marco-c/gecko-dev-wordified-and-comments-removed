#
include
"
vm
/
Watchtower
.
h
"
#
include
"
js
/
CallAndConstruct
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
#
include
"
vm
/
Shape
-
inl
.
h
"
using
namespace
js
;
static
bool
AddToWatchtowerLog
(
JSContext
*
cx
const
char
*
kind
HandleObject
obj
HandleValue
extra
)
{
MOZ_ASSERT
(
obj
-
>
useWatchtowerTestingLog
(
)
)
;
RootedString
kindString
(
cx
NewStringCopyZ
<
CanGC
>
(
cx
kind
)
)
;
if
(
!
kindString
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
logObj
(
cx
NewPlainObjectWithProto
(
cx
nullptr
)
)
;
if
(
!
logObj
)
{
return
false
;
}
if
(
!
JS_DefineProperty
(
cx
logObj
"
kind
"
kindString
JSPROP_ENUMERATE
)
)
{
return
false
;
}
if
(
!
JS_DefineProperty
(
cx
logObj
"
object
"
obj
JSPROP_ENUMERATE
)
)
{
return
false
;
}
if
(
!
JS_DefineProperty
(
cx
logObj
"
extra
"
extra
JSPROP_ENUMERATE
)
)
{
return
false
;
}
if
(
!
cx
-
>
runtime
(
)
-
>
watchtowerTestingLog
-
>
append
(
logObj
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
static
bool
ReshapeForShadowedProp
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
if
(
id
.
isInt
(
)
)
{
return
true
;
}
RootedObject
proto
(
cx
obj
-
>
staticPrototype
(
)
)
;
while
(
proto
)
{
if
(
!
proto
-
>
is
<
NativeObject
>
(
)
)
{
break
;
}
if
(
proto
-
>
as
<
NativeObject
>
(
)
.
contains
(
cx
id
)
)
{
return
JSObject
:
:
setInvalidatedTeleporting
(
cx
proto
)
;
}
proto
=
proto
-
>
staticPrototype
(
)
;
}
return
true
;
}
static
void
InvalidateMegamorphicCache
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
cx
-
>
caches
(
)
.
megamorphicCache
.
bumpGeneration
(
)
;
cx
-
>
caches
(
)
.
megamorphicSetPropCache
-
>
bumpGeneration
(
)
;
}
bool
Watchtower
:
:
watchPropertyAddSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyAdd
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
)
{
if
(
!
ReshapeForShadowedProp
(
cx
obj
id
)
)
{
return
false
;
}
if
(
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
AddToWatchtowerLog
(
cx
"
add
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
ReshapeForProtoMutation
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
RootedObject
pobj
(
cx
obj
)
;
while
(
pobj
&
&
pobj
-
>
is
<
NativeObject
>
(
)
)
{
if
(
!
pobj
-
>
hasInvalidatedTeleporting
(
)
)
{
if
(
!
JSObject
:
:
setInvalidatedTeleporting
(
cx
pobj
)
)
{
return
false
;
}
}
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
return
true
;
}
static
bool
WatchProtoChangeImpl
(
JSContext
*
cx
HandleObject
obj
)
{
if
(
!
obj
-
>
isUsedAsPrototype
(
)
)
{
return
true
;
}
if
(
!
ReshapeForProtoMutation
(
cx
obj
)
)
{
return
false
;
}
if
(
obj
-
>
is
<
NativeObject
>
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
.
as
<
NativeObject
>
(
)
)
;
}
return
true
;
}
bool
Watchtower
:
:
watchProtoChangeSlow
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
watchesProtoChange
(
obj
)
)
;
if
(
!
WatchProtoChangeImpl
(
cx
obj
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
if
(
!
AddToWatchtowerLog
(
cx
"
proto
-
change
"
obj
JS
:
:
UndefinedHandleValue
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchPropertyRemoveSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyRemove
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
&
&
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
if
(
obj
-
>
isGenerationCountedGlobal
(
)
)
{
obj
-
>
as
<
GlobalObject
>
(
)
.
bumpGenerationCount
(
)
;
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
AddToWatchtowerLog
(
cx
"
remove
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchPropertyChangeSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
PropertyFlags
flags
)
{
MOZ_ASSERT
(
watchesPropertyChange
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
&
&
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
if
(
obj
-
>
isGenerationCountedGlobal
(
)
)
{
uint32_t
propIndex
;
Rooted
<
PropMap
*
>
map
(
cx
obj
-
>
shape
(
)
-
>
lookup
(
cx
id
&
propIndex
)
)
;
MOZ_ASSERT
(
map
)
;
PropertyInfo
prop
=
map
-
>
getPropertyInfo
(
propIndex
)
;
bool
wasAccessor
=
prop
.
isAccessorProperty
(
)
;
bool
isAccessor
=
flags
.
isAccessorProperty
(
)
;
if
(
wasAccessor
!
=
isAccessor
)
{
obj
-
>
as
<
GlobalObject
>
(
)
.
bumpGenerationCount
(
)
;
}
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
AddToWatchtowerLog
(
cx
"
change
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
template
<
AllowGC
allowGC
>
bool
Watchtower
:
:
watchPropertyModificationSlow
(
JSContext
*
cx
typename
MaybeRooted
<
NativeObject
*
allowGC
>
:
:
HandleType
obj
typename
MaybeRooted
<
PropertyKey
allowGC
>
:
:
HandleType
id
)
{
MOZ_ASSERT
(
watchesPropertyModification
(
obj
)
)
;
if
constexpr
(
allowGC
=
=
AllowGC
:
:
CanGC
)
{
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
AddToWatchtowerLog
(
cx
"
modify
-
prop
"
obj
val
)
)
{
return
false
;
}
}
}
return
true
;
}
template
bool
Watchtower
:
:
watchPropertyModificationSlow
<
AllowGC
:
:
CanGC
>
(
JSContext
*
cx
typename
MaybeRooted
<
NativeObject
*
AllowGC
:
:
CanGC
>
:
:
HandleType
obj
typename
MaybeRooted
<
PropertyKey
AllowGC
:
:
CanGC
>
:
:
HandleType
id
)
;
template
bool
Watchtower
:
:
watchPropertyModificationSlow
<
AllowGC
:
:
NoGC
>
(
JSContext
*
cx
typename
MaybeRooted
<
NativeObject
*
AllowGC
:
:
NoGC
>
:
:
HandleType
obj
typename
MaybeRooted
<
PropertyKey
AllowGC
:
:
NoGC
>
:
:
HandleType
id
)
;
bool
Watchtower
:
:
watchFreezeOrSealSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
{
MOZ_ASSERT
(
watchesFreezeOrSeal
(
obj
)
)
;
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingLog
(
)
)
)
{
if
(
!
AddToWatchtowerLog
(
cx
"
freeze
-
or
-
seal
"
obj
JS
:
:
UndefinedHandleValue
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchObjectSwapSlow
(
JSContext
*
cx
HandleObject
a
HandleObject
b
)
{
MOZ_ASSERT
(
watchesObjectSwap
(
a
b
)
)
;
if
(
!
WatchProtoChangeImpl
(
cx
a
)
)
{
return
false
;
}
if
(
!
WatchProtoChangeImpl
(
cx
b
)
)
{
return
false
;
}
return
true
;
}
