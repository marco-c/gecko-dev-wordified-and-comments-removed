#
include
"
vm
/
Watchtower
.
h
"
#
include
"
js
/
CallAndConstruct
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
static
bool
InvokeWatchtowerCallback
(
JSContext
*
cx
const
char
*
kind
HandleObject
obj
HandleValue
extra
)
{
if
(
!
cx
-
>
watchtowerTestingCallbackRef
(
)
)
{
return
true
;
}
RootedString
kindString
(
cx
NewStringCopyZ
<
CanGC
>
(
cx
kind
)
)
;
if
(
!
kindString
)
{
return
false
;
}
constexpr
size_t
NumArgs
=
3
;
JS
:
:
RootedValueArray
<
NumArgs
>
argv
(
cx
)
;
argv
[
0
]
.
setString
(
kindString
)
;
argv
[
1
]
.
setObject
(
*
obj
)
;
argv
[
2
]
.
set
(
extra
)
;
RootedValue
funVal
(
cx
ObjectValue
(
*
cx
-
>
watchtowerTestingCallbackRef
(
)
)
)
;
AutoRealm
ar
(
cx
&
funVal
.
toObject
(
)
)
;
for
(
size_t
i
=
0
;
i
<
NumArgs
;
i
+
+
)
{
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
argv
[
i
]
)
)
{
return
false
;
}
}
RootedValue
rval
(
cx
)
;
return
JS_CallFunctionValue
(
cx
nullptr
funVal
HandleValueArray
(
argv
)
&
rval
)
;
}
static
bool
ReshapeForShadowedProp
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
if
(
id
.
isInt
(
)
)
{
return
true
;
}
RootedObject
proto
(
cx
obj
-
>
staticPrototype
(
)
)
;
while
(
proto
)
{
if
(
!
proto
-
>
is
<
NativeObject
>
(
)
)
{
break
;
}
if
(
proto
-
>
as
<
NativeObject
>
(
)
.
contains
(
cx
id
)
)
{
return
JSObject
:
:
setInvalidatedTeleporting
(
cx
proto
)
;
}
proto
=
proto
-
>
staticPrototype
(
)
;
}
return
true
;
}
static
void
InvalidateMegamorphicCache
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
cx
-
>
caches
(
)
.
megamorphicCache
.
bumpGeneration
(
)
;
}
bool
Watchtower
:
:
watchPropertyAddSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyAdd
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
)
{
if
(
!
ReshapeForShadowedProp
(
cx
obj
id
)
)
{
return
false
;
}
if
(
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingCallback
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
InvokeWatchtowerCallback
(
cx
"
add
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
ReshapeForProtoMutation
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
RootedObject
pobj
(
cx
obj
)
;
while
(
pobj
&
&
pobj
-
>
is
<
NativeObject
>
(
)
)
{
if
(
!
pobj
-
>
hasInvalidatedTeleporting
(
)
)
{
if
(
!
JSObject
:
:
setInvalidatedTeleporting
(
cx
pobj
)
)
{
return
false
;
}
}
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
return
true
;
}
bool
Watchtower
:
:
watchProtoChangeSlow
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
watchesProtoChange
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
)
{
if
(
!
ReshapeForProtoMutation
(
cx
obj
)
)
{
return
false
;
}
if
(
obj
-
>
is
<
NativeObject
>
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
.
as
<
NativeObject
>
(
)
)
;
}
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingCallback
(
)
)
)
{
if
(
!
InvokeWatchtowerCallback
(
cx
"
proto
-
change
"
obj
JS
:
:
UndefinedHandleValue
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchPropertyRemoveSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyRemove
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
&
&
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingCallback
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
InvokeWatchtowerCallback
(
cx
"
remove
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchPropertyChangeSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyChange
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
&
&
!
id
.
isInt
(
)
)
{
InvalidateMegamorphicCache
(
cx
obj
)
;
}
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingCallback
(
)
)
)
{
RootedValue
val
(
cx
IdToValue
(
id
)
)
;
if
(
!
InvokeWatchtowerCallback
(
cx
"
change
-
prop
"
obj
val
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchFreezeOrSealSlow
(
JSContext
*
cx
Handle
<
NativeObject
*
>
obj
)
{
MOZ_ASSERT
(
watchesFreezeOrSeal
(
obj
)
)
;
if
(
MOZ_UNLIKELY
(
obj
-
>
useWatchtowerTestingCallback
(
)
)
)
{
if
(
!
InvokeWatchtowerCallback
(
cx
"
freeze
-
or
-
seal
"
obj
JS
:
:
UndefinedHandleValue
)
)
{
return
false
;
}
}
return
true
;
}
bool
Watchtower
:
:
watchObjectSwapSlow
(
JSContext
*
cx
HandleObject
a
HandleObject
b
)
{
MOZ_ASSERT
(
watchesObjectSwap
(
a
b
)
)
;
if
(
a
-
>
isUsedAsPrototype
(
)
&
&
a
-
>
is
<
NativeObject
>
(
)
)
{
InvalidateMegamorphicCache
(
cx
a
.
as
<
NativeObject
>
(
)
)
;
}
if
(
b
-
>
isUsedAsPrototype
(
)
&
&
b
-
>
is
<
NativeObject
>
(
)
)
{
InvalidateMegamorphicCache
(
cx
b
.
as
<
NativeObject
>
(
)
)
;
}
if
(
MOZ_UNLIKELY
(
a
-
>
useWatchtowerTestingCallback
(
)
|
|
b
-
>
useWatchtowerTestingCallback
(
)
)
)
{
RootedValue
extra
(
cx
ObjectValue
(
*
b
)
)
;
if
(
!
InvokeWatchtowerCallback
(
cx
"
object
-
swap
"
a
extra
)
)
{
if
(
cx
-
>
isThrowingOutOfMemory
(
)
)
{
return
false
;
}
cx
-
>
clearPendingException
(
)
;
}
}
return
true
;
}
