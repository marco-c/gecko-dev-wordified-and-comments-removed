#
include
"
vm
/
Watchtower
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
static
bool
ReshapeForShadowedProp
(
JSContext
*
cx
HandleNativeObject
obj
HandleId
id
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
if
(
JSID_IS_INT
(
id
)
)
{
return
true
;
}
RootedObject
proto
(
cx
obj
-
>
staticPrototype
(
)
)
;
while
(
proto
)
{
if
(
!
proto
-
>
is
<
NativeObject
>
(
)
)
{
break
;
}
if
(
proto
-
>
as
<
NativeObject
>
(
)
.
contains
(
cx
id
)
)
{
return
JSObject
:
:
setInvalidatedTeleporting
(
cx
proto
)
;
}
proto
=
proto
-
>
staticPrototype
(
)
;
}
return
true
;
}
bool
Watchtower
:
:
watchPropertyAddSlow
(
JSContext
*
cx
HandleNativeObject
obj
HandleId
id
)
{
MOZ_ASSERT
(
watchesPropertyAdd
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
)
{
if
(
!
ReshapeForShadowedProp
(
cx
obj
id
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
ReshapeForProtoMutation
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
obj
-
>
isUsedAsPrototype
(
)
)
;
RootedObject
pobj
(
cx
obj
)
;
while
(
pobj
&
&
pobj
-
>
is
<
NativeObject
>
(
)
)
{
if
(
!
pobj
-
>
hasInvalidatedTeleporting
(
)
)
{
if
(
!
JSObject
:
:
setInvalidatedTeleporting
(
cx
pobj
)
)
{
return
false
;
}
}
pobj
=
pobj
-
>
staticPrototype
(
)
;
}
return
true
;
}
bool
Watchtower
:
:
watchProtoChangeSlow
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
watchesProtoChange
(
obj
)
)
;
if
(
obj
-
>
isUsedAsPrototype
(
)
)
{
if
(
!
ReshapeForProtoMutation
(
cx
obj
)
)
{
return
false
;
}
}
return
true
;
}
