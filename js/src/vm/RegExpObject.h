#
ifndef
vm_RegExpObject_h
#
define
vm_RegExpObject_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
proxy
/
Proxy
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
struct
MatchPair
;
class
MatchPairs
;
class
RegExpShared
;
class
RegExpStatics
;
using
RootedRegExpShared
=
JS
:
:
Rooted
<
RegExpShared
*
>
;
using
HandleRegExpShared
=
JS
:
:
Handle
<
RegExpShared
*
>
;
using
MutableHandleRegExpShared
=
JS
:
:
MutableHandle
<
RegExpShared
*
>
;
namespace
frontend
{
class
TokenStream
;
}
enum
RegExpFlag
:
uint8_t
{
IgnoreCaseFlag
=
0x01
GlobalFlag
=
0x02
MultilineFlag
=
0x04
StickyFlag
=
0x08
UnicodeFlag
=
0x10
NoFlags
=
0x00
AllFlags
=
0x1f
}
;
static_assert
(
IgnoreCaseFlag
=
=
REGEXP_IGNORECASE_FLAG
&
&
GlobalFlag
=
=
REGEXP_GLOBAL_FLAG
&
&
MultilineFlag
=
=
REGEXP_MULTILINE_FLAG
&
&
StickyFlag
=
=
REGEXP_STICKY_FLAG
&
&
UnicodeFlag
=
=
REGEXP_UNICODE_FLAG
"
Flag
values
should
be
in
sync
with
self
-
hosted
JS
"
)
;
enum
RegExpRunStatus
{
RegExpRunStatus_Error
RegExpRunStatus_Success
RegExpRunStatus_Success_NotFound
}
;
extern
RegExpObject
*
RegExpAlloc
(
JSContext
*
cx
HandleObject
proto
=
nullptr
)
;
extern
JSObject
*
CloneRegExpObject
(
JSContext
*
cx
JSObject
*
regexp
)
;
class
RegExpShared
:
public
gc
:
:
TenuredCell
{
public
:
enum
CompilationMode
{
Normal
MatchOnly
}
;
enum
ForceByteCodeEnum
{
DontForceByteCode
ForceByteCode
}
;
private
:
friend
class
RegExpCompartment
;
friend
class
RegExpStatics
;
typedef
frontend
:
:
TokenStream
TokenStream
;
struct
RegExpCompilation
{
ReadBarriered
<
jit
:
:
JitCode
*
>
jitCode
;
uint8_t
*
byteCode
;
RegExpCompilation
(
)
:
byteCode
(
nullptr
)
{
}
~
RegExpCompilation
(
)
{
js_free
(
byteCode
)
;
}
bool
compiled
(
ForceByteCodeEnum
force
=
DontForceByteCode
)
const
{
return
byteCode
|
|
(
force
=
=
DontForceByteCode
&
&
jitCode
)
;
}
}
;
HeapPtr
<
JSAtom
*
>
source
;
RegExpFlag
flags
;
bool
canStringMatch
;
size_t
parenCount
;
RegExpCompilation
compilationArray
[
4
]
;
static
int
CompilationIndex
(
CompilationMode
mode
bool
latin1
)
{
switch
(
mode
)
{
case
Normal
:
return
latin1
?
0
:
1
;
case
MatchOnly
:
return
latin1
?
2
:
3
;
}
MOZ_CRASH
(
)
;
}
using
JitCodeTables
=
Vector
<
uint8_t
*
0
SystemAllocPolicy
>
;
JitCodeTables
tables
;
RegExpShared
(
JSAtom
*
source
RegExpFlag
flags
)
;
static
bool
compile
(
JSContext
*
cx
MutableHandleRegExpShared
res
HandleLinearString
input
CompilationMode
mode
ForceByteCodeEnum
force
)
;
static
bool
compile
(
JSContext
*
cx
MutableHandleRegExpShared
res
HandleAtom
pattern
HandleLinearString
input
CompilationMode
mode
ForceByteCodeEnum
force
)
;
static
bool
compileIfNecessary
(
JSContext
*
cx
MutableHandleRegExpShared
res
HandleLinearString
input
CompilationMode
mode
ForceByteCodeEnum
force
)
;
const
RegExpCompilation
&
compilation
(
CompilationMode
mode
bool
latin1
)
const
{
return
compilationArray
[
CompilationIndex
(
mode
latin1
)
]
;
}
RegExpCompilation
&
compilation
(
CompilationMode
mode
bool
latin1
)
{
return
compilationArray
[
CompilationIndex
(
mode
latin1
)
]
;
}
public
:
~
RegExpShared
(
)
=
delete
;
static
RegExpRunStatus
execute
(
JSContext
*
cx
MutableHandleRegExpShared
res
HandleLinearString
input
size_t
searchIndex
MatchPairs
*
matches
size_t
*
endIndex
)
;
bool
addTable
(
uint8_t
*
table
)
{
return
tables
.
append
(
table
)
;
}
size_t
getParenCount
(
)
const
{
MOZ_ASSERT
(
isCompiled
(
)
)
;
return
parenCount
;
}
size_t
pairCount
(
)
const
{
return
getParenCount
(
)
+
1
;
}
JSAtom
*
getSource
(
)
const
{
return
source
;
}
RegExpFlag
getFlags
(
)
const
{
return
flags
;
}
bool
ignoreCase
(
)
const
{
return
flags
&
IgnoreCaseFlag
;
}
bool
global
(
)
const
{
return
flags
&
GlobalFlag
;
}
bool
multiline
(
)
const
{
return
flags
&
MultilineFlag
;
}
bool
sticky
(
)
const
{
return
flags
&
StickyFlag
;
}
bool
unicode
(
)
const
{
return
flags
&
UnicodeFlag
;
}
bool
isCompiled
(
CompilationMode
mode
bool
latin1
ForceByteCodeEnum
force
=
DontForceByteCode
)
const
{
return
compilation
(
mode
latin1
)
.
compiled
(
force
)
;
}
bool
isCompiled
(
)
const
{
return
isCompiled
(
Normal
true
)
|
|
isCompiled
(
Normal
false
)
|
|
isCompiled
(
MatchOnly
true
)
|
|
isCompiled
(
MatchOnly
false
)
;
}
void
traceChildren
(
JSTracer
*
trc
)
;
void
discardJitCode
(
)
;
void
finalize
(
FreeOp
*
fop
)
;
static
size_t
offsetOfSource
(
)
{
return
offsetof
(
RegExpShared
source
)
;
}
static
size_t
offsetOfFlags
(
)
{
return
offsetof
(
RegExpShared
flags
)
;
}
static
size_t
offsetOfParenCount
(
)
{
return
offsetof
(
RegExpShared
parenCount
)
;
}
static
size_t
offsetOfLatin1JitCode
(
CompilationMode
mode
)
{
return
offsetof
(
RegExpShared
compilationArray
)
+
(
CompilationIndex
(
mode
true
)
*
sizeof
(
RegExpCompilation
)
)
+
offsetof
(
RegExpCompilation
jitCode
)
;
}
static
size_t
offsetOfTwoByteJitCode
(
CompilationMode
mode
)
{
return
offsetof
(
RegExpShared
compilationArray
)
+
(
CompilationIndex
(
mode
false
)
*
sizeof
(
RegExpCompilation
)
)
+
offsetof
(
RegExpCompilation
jitCode
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
#
ifdef
DEBUG
static
bool
dumpBytecode
(
JSContext
*
cx
MutableHandleRegExpShared
res
bool
match_only
HandleLinearString
input
)
;
#
endif
}
;
class
RegExpCompartment
{
struct
Key
{
JSAtom
*
atom
;
uint16_t
flag
;
Key
(
)
{
}
Key
(
JSAtom
*
atom
RegExpFlag
flag
)
:
atom
(
atom
)
flag
(
flag
)
{
}
MOZ_IMPLICIT
Key
(
const
ReadBarriered
<
RegExpShared
*
>
&
shared
)
:
atom
(
shared
.
unbarrieredGet
(
)
-
>
getSource
(
)
)
flag
(
shared
.
unbarrieredGet
(
)
-
>
getFlags
(
)
)
{
}
typedef
Key
Lookup
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
return
DefaultHasher
<
JSAtom
*
>
:
:
hash
(
l
.
atom
)
^
(
l
.
flag
<
<
1
)
;
}
static
bool
match
(
Key
l
Key
r
)
{
return
l
.
atom
=
=
r
.
atom
&
&
l
.
flag
=
=
r
.
flag
;
}
}
;
using
Set
=
GCHashSet
<
ReadBarriered
<
RegExpShared
*
>
Key
RuntimeAllocPolicy
>
;
JS
:
:
WeakCache
<
Set
>
set_
;
ReadBarriered
<
ArrayObject
*
>
matchResultTemplateObject_
;
ReadBarriered
<
Shape
*
>
optimizableRegExpPrototypeShape_
;
ReadBarriered
<
Shape
*
>
optimizableRegExpInstanceShape_
;
ArrayObject
*
createMatchResultTemplateObject
(
JSContext
*
cx
)
;
public
:
explicit
RegExpCompartment
(
Zone
*
zone
)
;
~
RegExpCompartment
(
)
;
bool
init
(
JSContext
*
cx
)
;
void
sweep
(
JSRuntime
*
rt
)
;
bool
empty
(
)
{
return
set_
.
empty
(
)
;
}
bool
get
(
JSContext
*
cx
HandleAtom
source
RegExpFlag
flags
MutableHandleRegExpShared
shared
)
;
bool
get
(
JSContext
*
cx
HandleAtom
source
JSString
*
maybeOpt
MutableHandleRegExpShared
shared
)
;
ArrayObject
*
getOrCreateMatchResultTemplateObject
(
JSContext
*
cx
)
{
if
(
matchResultTemplateObject_
)
return
matchResultTemplateObject_
;
return
createMatchResultTemplateObject
(
cx
)
;
}
Shape
*
getOptimizableRegExpPrototypeShape
(
)
{
return
optimizableRegExpPrototypeShape_
;
}
void
setOptimizableRegExpPrototypeShape
(
Shape
*
shape
)
{
optimizableRegExpPrototypeShape_
=
shape
;
}
Shape
*
getOptimizableRegExpInstanceShape
(
)
{
return
optimizableRegExpInstanceShape_
;
}
void
setOptimizableRegExpInstanceShape
(
Shape
*
shape
)
{
optimizableRegExpInstanceShape_
=
shape
;
}
static
size_t
offsetOfOptimizableRegExpPrototypeShape
(
)
{
return
offsetof
(
RegExpCompartment
optimizableRegExpPrototypeShape_
)
;
}
static
size_t
offsetOfOptimizableRegExpInstanceShape
(
)
{
return
offsetof
(
RegExpCompartment
optimizableRegExpInstanceShape_
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
}
;
class
RegExpObject
:
public
NativeObject
{
static
const
unsigned
LAST_INDEX_SLOT
=
0
;
static
const
unsigned
SOURCE_SLOT
=
1
;
static
const
unsigned
FLAGS_SLOT
=
2
;
static_assert
(
RegExpObject
:
:
FLAGS_SLOT
=
=
REGEXP_FLAGS_SLOT
"
FLAGS_SLOT
values
should
be
in
sync
with
self
-
hosted
JS
"
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
3
;
static
const
unsigned
PRIVATE_SLOT
=
3
;
static
const
Class
class_
;
static
const
Class
protoClass_
;
static
const
size_t
MaxPairCount
=
14
;
static
RegExpObject
*
create
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
RegExpFlag
flags
frontend
:
:
TokenStream
*
ts
LifoAlloc
&
alloc
)
;
static
RegExpObject
*
create
(
JSContext
*
cx
HandleAtom
atom
RegExpFlag
flags
frontend
:
:
TokenStream
*
ts
LifoAlloc
&
alloc
)
;
static
Shape
*
assignInitialShape
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
obj
)
;
static
unsigned
lastIndexSlot
(
)
{
return
LAST_INDEX_SLOT
;
}
static
bool
isInitialShape
(
RegExpObject
*
rx
)
{
Shape
*
shape
=
rx
-
>
lastProperty
(
)
;
if
(
!
shape
-
>
hasSlot
(
)
)
return
false
;
if
(
shape
-
>
maybeSlot
(
)
!
=
LAST_INDEX_SLOT
)
return
false
;
return
true
;
}
const
Value
&
getLastIndex
(
)
const
{
return
getSlot
(
LAST_INDEX_SLOT
)
;
}
void
setLastIndex
(
double
d
)
{
setSlot
(
LAST_INDEX_SLOT
NumberValue
(
d
)
)
;
}
void
zeroLastIndex
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
lookupPure
(
cx
-
>
names
(
)
.
lastIndex
)
-
>
writable
(
)
"
can
'
t
infallibly
zero
a
non
-
writable
lastIndex
on
a
"
"
RegExp
that
'
s
been
exposed
to
script
"
)
;
setSlot
(
LAST_INDEX_SLOT
Int32Value
(
0
)
)
;
}
JSFlatString
*
toString
(
JSContext
*
cx
)
const
;
JSAtom
*
getSource
(
)
const
{
return
&
getSlot
(
SOURCE_SLOT
)
.
toString
(
)
-
>
asAtom
(
)
;
}
void
setSource
(
JSAtom
*
source
)
{
setSlot
(
SOURCE_SLOT
StringValue
(
source
)
)
;
}
static
unsigned
flagsSlot
(
)
{
return
FLAGS_SLOT
;
}
RegExpFlag
getFlags
(
)
const
{
return
RegExpFlag
(
getFixedSlot
(
FLAGS_SLOT
)
.
toInt32
(
)
)
;
}
void
setFlags
(
RegExpFlag
flags
)
{
setSlot
(
FLAGS_SLOT
Int32Value
(
flags
)
)
;
}
bool
ignoreCase
(
)
const
{
return
getFlags
(
)
&
IgnoreCaseFlag
;
}
bool
global
(
)
const
{
return
getFlags
(
)
&
GlobalFlag
;
}
bool
multiline
(
)
const
{
return
getFlags
(
)
&
MultilineFlag
;
}
bool
sticky
(
)
const
{
return
getFlags
(
)
&
StickyFlag
;
}
bool
unicode
(
)
const
{
return
getFlags
(
)
&
UnicodeFlag
;
}
static
bool
isOriginalFlagGetter
(
JSNative
native
RegExpFlag
*
mask
)
;
static
MOZ_MUST_USE
bool
getShared
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
MutableHandleRegExpShared
shared
)
;
bool
hasShared
(
)
{
return
!
!
sharedRef
(
)
;
}
void
setShared
(
RegExpShared
&
shared
)
{
MOZ_ASSERT
(
!
hasShared
(
)
)
;
sharedRef
(
)
=
&
shared
;
}
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
void
trace
(
JSTracer
*
trc
)
;
void
initIgnoringLastIndex
(
HandleAtom
source
RegExpFlag
flags
)
;
void
initAndZeroLastIndex
(
HandleAtom
source
RegExpFlag
flags
JSContext
*
cx
)
;
#
ifdef
DEBUG
static
MOZ_MUST_USE
bool
dumpBytecode
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
bool
match_only
HandleLinearString
input
)
;
#
endif
private
:
static
MOZ_MUST_USE
bool
createShared
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
MutableHandleRegExpShared
shared
)
;
ReadBarriered
<
RegExpShared
*
>
&
sharedRef
(
)
{
auto
&
ref
=
NativeObject
:
:
privateRef
(
PRIVATE_SLOT
)
;
return
reinterpret_cast
<
ReadBarriered
<
RegExpShared
*
>
&
>
(
ref
)
;
}
void
setPrivate
(
void
*
priv
)
=
delete
;
}
;
bool
ParseRegExpFlags
(
JSContext
*
cx
JSString
*
flagStr
RegExpFlag
*
flagsOut
)
;
inline
bool
RegExpToShared
(
JSContext
*
cx
HandleObject
obj
MutableHandleRegExpShared
shared
)
{
if
(
obj
-
>
is
<
RegExpObject
>
(
)
)
return
RegExpObject
:
:
getShared
(
cx
obj
.
as
<
RegExpObject
>
(
)
shared
)
;
return
Proxy
:
:
regexp_toShared
(
cx
obj
shared
)
;
}
template
<
XDRMode
mode
>
bool
XDRScriptRegExpObject
(
XDRState
<
mode
>
*
xdr
MutableHandle
<
RegExpObject
*
>
objp
)
;
extern
JSObject
*
CloneScriptRegExpObject
(
JSContext
*
cx
RegExpObject
&
re
)
;
extern
JSAtom
*
EscapeRegExpPattern
(
JSContext
*
cx
HandleAtom
src
)
;
template
<
typename
CharT
>
extern
bool
HasRegExpMetaChars
(
const
CharT
*
chars
size_t
length
)
;
extern
bool
StringHasRegExpMetaChars
(
JSLinearString
*
str
)
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
RegExpShared
>
:
TracerConcrete
<
js
:
:
RegExpShared
>
{
protected
:
explicit
Concrete
(
js
:
:
RegExpShared
*
ptr
)
:
TracerConcrete
<
js
:
:
RegExpShared
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
RegExpShared
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
CoarseType
coarseType
(
)
const
final
{
return
CoarseType
:
:
Other
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
