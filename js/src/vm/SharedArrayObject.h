#
ifndef
vm_SharedArrayObject_h
#
define
vm_SharedArrayObject_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsobj
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
vm
/
ArrayBufferObject
.
h
"
typedef
struct
JSProperty
JSProperty
;
namespace
js
{
class
FutexWaiter
;
class
SharedArrayRawBuffer
{
private
:
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
ReleaseAcquire
>
refcount
;
uint32_t
length
;
FutexWaiter
*
waiters_
;
protected
:
SharedArrayRawBuffer
(
uint8_t
*
buffer
uint32_t
length
)
:
refcount
(
1
)
length
(
length
)
waiters_
(
nullptr
)
{
MOZ_ASSERT
(
buffer
=
=
dataPointerShared
(
)
)
;
}
public
:
static
SharedArrayRawBuffer
*
New
(
JSContext
*
cx
uint32_t
length
)
;
FutexWaiter
*
waiters
(
)
const
{
return
waiters_
;
}
void
setWaiters
(
FutexWaiter
*
waiters
)
{
waiters_
=
waiters
;
}
SharedMem
<
uint8_t
*
>
dataPointerShared
(
)
const
{
uint8_t
*
ptr
=
reinterpret_cast
<
uint8_t
*
>
(
const_cast
<
SharedArrayRawBuffer
*
>
(
this
)
)
;
return
SharedMem
<
uint8_t
*
>
:
:
shared
(
ptr
+
sizeof
(
SharedArrayRawBuffer
)
)
;
}
uint32_t
byteLength
(
)
const
{
return
length
;
}
void
addReference
(
)
;
void
dropReference
(
)
;
}
;
class
SharedArrayBufferObject
:
public
ArrayBufferObjectMaybeShared
{
static
bool
byteLengthGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
public
:
static
const
uint8_t
RAWBUF_SLOT
=
0
;
static
const
uint8_t
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
const
Class
protoClass
;
static
const
JSFunctionSpec
jsfuncs
[
]
;
static
const
JSFunctionSpec
jsstaticfuncs
[
]
;
static
bool
byteLengthGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
fun_isView
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
class_constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
SharedArrayBufferObject
*
New
(
JSContext
*
cx
uint32_t
length
)
;
static
SharedArrayBufferObject
*
New
(
JSContext
*
cx
SharedArrayRawBuffer
*
buffer
)
;
static
void
Finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
addSizeOfExcludingThis
(
JSObject
*
obj
mozilla
:
:
MallocSizeOf
mallocSizeOf
JS
:
:
ClassInfo
*
info
)
;
SharedArrayRawBuffer
*
rawBufferObject
(
)
const
;
uintptr_t
globalID
(
)
const
{
return
dataPointerShared
(
)
.
asValue
(
)
;
}
uint32_t
byteLength
(
)
const
{
return
rawBufferObject
(
)
-
>
byteLength
(
)
;
}
SharedMem
<
uint8_t
*
>
dataPointerShared
(
)
const
{
return
rawBufferObject
(
)
-
>
dataPointerShared
(
)
;
}
private
:
void
acceptRawBuffer
(
SharedArrayRawBuffer
*
buffer
)
;
void
dropRawBuffer
(
)
;
}
;
bool
IsSharedArrayBuffer
(
HandleValue
v
)
;
bool
IsSharedArrayBuffer
(
HandleObject
o
)
;
SharedArrayBufferObject
&
AsSharedArrayBuffer
(
HandleObject
o
)
;
}
#
endif
