#
ifndef
vm_DateTime_h
#
define
vm_DateTime_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
threading
/
ExclusiveData
.
h
"
namespace
js
{
const
double
HoursPerDay
=
24
;
const
double
MinutesPerHour
=
60
;
const
double
SecondsPerMinute
=
60
;
const
double
msPerSecond
=
1000
;
const
double
msPerMinute
=
msPerSecond
*
SecondsPerMinute
;
const
double
msPerHour
=
msPerMinute
*
MinutesPerHour
;
const
double
msPerDay
=
msPerHour
*
HoursPerDay
;
const
unsigned
SecondsPerHour
=
60
*
60
;
const
unsigned
SecondsPerDay
=
SecondsPerHour
*
24
;
const
double
StartOfTime
=
-
8
.
64e15
;
const
double
EndOfTime
=
8
.
64e15
;
extern
bool
InitDateTimeState
(
)
;
extern
void
FinishDateTimeState
(
)
;
enum
class
ResetTimeZoneMode
:
bool
{
DontResetIfOffsetUnchanged
ResetEvenIfOffsetUnchaged
}
;
extern
void
ResetTimeZoneInternal
(
ResetTimeZoneMode
mode
)
;
class
DateTimeInfo
{
static
ExclusiveData
<
DateTimeInfo
>
*
instance
;
friend
class
ExclusiveData
<
DateTimeInfo
>
;
friend
bool
InitDateTimeState
(
)
;
friend
void
FinishDateTimeState
(
)
;
DateTimeInfo
(
)
;
public
:
static
int64_t
getDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
{
auto
guard
=
instance
-
>
lock
(
)
;
return
guard
-
>
internalGetDSTOffsetMilliseconds
(
utcMilliseconds
)
;
}
static
double
localTZA
(
)
{
auto
guard
=
instance
-
>
lock
(
)
;
return
guard
-
>
localTZA_
;
}
private
:
friend
void
js
:
:
ResetTimeZoneInternal
(
ResetTimeZoneMode
)
;
static
void
updateTimeZoneAdjustment
(
ResetTimeZoneMode
mode
)
{
auto
guard
=
instance
-
>
lock
(
)
;
guard
-
>
internalUpdateTimeZoneAdjustment
(
mode
)
;
}
double
localTZA_
;
int64_t
computeDSTOffsetMilliseconds
(
int64_t
utcSeconds
)
;
int64_t
offsetMilliseconds
;
int64_t
rangeStartSeconds
rangeEndSeconds
;
int64_t
oldOffsetMilliseconds
;
int64_t
oldRangeStartSeconds
oldRangeEndSeconds
;
int32_t
utcToLocalStandardOffsetSeconds
;
static
const
int64_t
MaxUnixTimeT
=
2145859200
;
static
const
int64_t
RangeExpansionAmount
=
30
*
SecondsPerDay
;
int64_t
internalGetDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
;
void
internalUpdateTimeZoneAdjustment
(
ResetTimeZoneMode
mode
)
;
void
sanityCheck
(
)
;
}
;
enum
class
IcuTimeZoneStatus
{
Valid
NeedsUpdate
}
;
extern
ExclusiveData
<
IcuTimeZoneStatus
>
*
IcuTimeZoneState
;
extern
void
ResyncICUDefaultTimeZone
(
)
;
}
#
endif
