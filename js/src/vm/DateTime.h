#
ifndef
vm_DateTime_h
#
define
vm_DateTime_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ExclusiveData
.
h
"
#
if
JS_HAS_INTL_API
#
include
"
mozilla
/
intl
/
ICU4CGlue
.
h
"
#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
endif
namespace
JS
{
class
Realm
;
}
namespace
js
{
constexpr
int32_t
HoursPerDay
=
24
;
constexpr
int32_t
MinutesPerHour
=
60
;
constexpr
int32_t
SecondsPerMinute
=
60
;
constexpr
int32_t
msPerSecond
=
1000
;
constexpr
int32_t
msPerMinute
=
msPerSecond
*
SecondsPerMinute
;
constexpr
int32_t
msPerHour
=
msPerMinute
*
MinutesPerHour
;
constexpr
int32_t
msPerDay
=
msPerHour
*
HoursPerDay
;
constexpr
int32_t
SecondsPerHour
=
60
*
60
;
constexpr
int32_t
SecondsPerDay
=
SecondsPerHour
*
24
;
constexpr
double
StartOfTime
=
-
8
.
64e15
;
constexpr
double
EndOfTime
=
8
.
64e15
;
extern
bool
InitDateTimeState
(
)
;
extern
void
FinishDateTimeState
(
)
;
enum
class
ResetTimeZoneMode
:
bool
{
DontResetIfOffsetUnchanged
ResetEvenIfOffsetUnchanged
}
;
extern
void
ResetTimeZoneInternal
(
ResetTimeZoneMode
mode
)
;
using
TimeZoneDisplayNameVector
=
Vector
<
char16_t
100
SystemAllocPolicy
>
;
class
DateTimeInfo
{
public
:
enum
class
ForceUTC
{
No
Yes
}
;
private
:
static
ExclusiveData
<
DateTimeInfo
>
*
instance
;
static
ExclusiveData
<
DateTimeInfo
>
*
instanceUTC
;
static
constexpr
int32_t
InvalidOffset
=
INT32_MIN
;
static
inline
mozilla
:
:
Atomic
<
int32_t
mozilla
:
:
Relaxed
>
utcToLocalOffsetSeconds
{
InvalidOffset
}
;
friend
class
ExclusiveData
<
DateTimeInfo
>
;
friend
bool
InitDateTimeState
(
)
;
friend
void
FinishDateTimeState
(
)
;
explicit
DateTimeInfo
(
bool
forceUTC
)
;
~
DateTimeInfo
(
)
;
static
auto
acquireLockWithValidTimeZone
(
ForceUTC
forceUTC
)
{
auto
guard
=
forceUTC
=
=
ForceUTC
:
:
Yes
?
instanceUTC
-
>
lock
(
)
:
instance
-
>
lock
(
)
;
if
(
guard
-
>
timeZoneStatus_
!
=
TimeZoneStatus
:
:
Valid
)
{
guard
-
>
updateTimeZone
(
)
;
}
return
guard
;
}
public
:
static
ForceUTC
forceUTC
(
JS
:
:
Realm
*
realm
)
;
static
int32_t
getDSTOffsetMilliseconds
(
ForceUTC
forceUTC
int64_t
utcMilliseconds
)
{
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
return
guard
-
>
internalGetDSTOffsetMilliseconds
(
utcMilliseconds
)
;
}
static
int32_t
utcToLocalStandardOffsetSeconds
(
ForceUTC
forceUTC
)
{
if
(
forceUTC
=
=
ForceUTC
:
:
Yes
)
{
return
0
;
}
int32_t
offset
=
utcToLocalOffsetSeconds
;
if
(
offset
!
=
InvalidOffset
)
{
return
offset
;
}
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
offset
=
guard
-
>
utcToLocalStandardOffsetSeconds_
;
utcToLocalOffsetSeconds
=
offset
;
return
offset
;
}
enum
class
TimeZoneOffset
{
UTC
Local
}
;
#
if
JS_HAS_INTL_API
static
int32_t
getOffsetMilliseconds
(
ForceUTC
forceUTC
int64_t
milliseconds
TimeZoneOffset
offset
)
{
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
return
guard
-
>
internalGetOffsetMilliseconds
(
milliseconds
offset
)
;
}
static
bool
timeZoneDisplayName
(
ForceUTC
forceUTC
TimeZoneDisplayNameVector
&
result
int64_t
utcMilliseconds
const
char
*
locale
)
{
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
return
guard
-
>
internalTimeZoneDisplayName
(
result
utcMilliseconds
locale
)
;
}
template
<
typename
B
>
static
mozilla
:
:
intl
:
:
ICUResult
timeZoneId
(
ForceUTC
forceUTC
B
&
buffer
)
{
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
return
guard
-
>
timeZone
(
)
-
>
GetId
(
buffer
)
;
}
static
mozilla
:
:
Result
<
int32_t
mozilla
:
:
intl
:
:
ICUError
>
getRawOffsetMs
(
ForceUTC
forceUTC
)
{
auto
guard
=
acquireLockWithValidTimeZone
(
forceUTC
)
;
return
guard
-
>
timeZone
(
)
-
>
GetRawOffsetMs
(
)
;
}
#
else
static
int32_t
localTZA
(
ForceUTC
forceUTC
)
{
return
utcToLocalStandardOffsetSeconds
(
forceUTC
)
*
msPerSecond
;
}
#
endif
static
const
void
*
addressOfUTCToLocalOffsetSeconds
(
)
{
static_assert
(
sizeof
(
decltype
(
utcToLocalOffsetSeconds
)
)
=
=
sizeof
(
int32_t
)
)
;
return
&
DateTimeInfo
:
:
utcToLocalOffsetSeconds
;
}
private
:
friend
void
js
:
:
ResetTimeZoneInternal
(
ResetTimeZoneMode
)
;
static
void
resetTimeZone
(
ResetTimeZoneMode
mode
)
{
{
auto
guard
=
instance
-
>
lock
(
)
;
guard
-
>
internalResetTimeZone
(
mode
)
;
utcToLocalOffsetSeconds
=
InvalidOffset
;
}
{
auto
guard
=
instanceUTC
-
>
lock
(
)
;
guard
-
>
internalResetTimeZone
(
mode
)
;
}
}
struct
RangeCache
{
int64_t
startSeconds
endSeconds
;
int64_t
oldStartSeconds
oldEndSeconds
;
int32_t
offsetMilliseconds
;
int32_t
oldOffsetMilliseconds
;
void
reset
(
)
;
void
sanityCheck
(
)
;
}
;
bool
forceUTC_
;
enum
class
TimeZoneStatus
:
uint8_t
{
Valid
NeedsUpdate
UpdateIfChanged
}
;
TimeZoneStatus
timeZoneStatus_
;
int32_t
utcToLocalStandardOffsetSeconds_
;
RangeCache
dstRange_
;
#
if
JS_HAS_INTL_API
static
constexpr
int64_t
MinTimeT
=
static_cast
<
int64_t
>
(
StartOfTime
/
msPerSecond
)
;
static
constexpr
int64_t
MaxTimeT
=
static_cast
<
int64_t
>
(
EndOfTime
/
msPerSecond
)
;
RangeCache
utcRange_
;
RangeCache
localRange_
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
intl
:
:
TimeZone
>
timeZone_
;
JS
:
:
UniqueChars
locale_
;
JS
:
:
UniqueTwoByteChars
standardName_
;
JS
:
:
UniqueTwoByteChars
daylightSavingsName_
;
#
else
static
constexpr
int64_t
MinTimeT
=
0
;
static
constexpr
int64_t
MaxTimeT
=
2145830400
;
#
endif
static
constexpr
int64_t
RangeExpansionAmount
=
30
*
SecondsPerDay
;
void
internalResetTimeZone
(
ResetTimeZoneMode
mode
)
;
void
updateTimeZone
(
)
;
void
internalResyncICUDefaultTimeZone
(
)
;
int64_t
toClampedSeconds
(
int64_t
milliseconds
)
;
using
ComputeFn
=
int32_t
(
DateTimeInfo
:
:
*
)
(
int64_t
)
;
int32_t
getOrComputeValue
(
RangeCache
&
range
int64_t
seconds
ComputeFn
compute
)
;
int32_t
computeDSTOffsetMilliseconds
(
int64_t
utcSeconds
)
;
int32_t
internalGetDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
;
#
if
JS_HAS_INTL_API
int32_t
computeUTCOffsetMilliseconds
(
int64_t
localSeconds
)
;
int32_t
computeLocalOffsetMilliseconds
(
int64_t
utcSeconds
)
;
int32_t
internalGetOffsetMilliseconds
(
int64_t
milliseconds
TimeZoneOffset
offset
)
;
bool
internalTimeZoneDisplayName
(
TimeZoneDisplayNameVector
&
result
int64_t
utcMilliseconds
const
char
*
locale
)
;
mozilla
:
:
intl
:
:
TimeZone
*
timeZone
(
)
;
#
endif
}
;
}
#
endif
