#
ifndef
vm_DateTime_h
#
define
vm_DateTime_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
Initialization
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
js
{
const
double
HoursPerDay
=
24
;
const
double
MinutesPerHour
=
60
;
const
double
SecondsPerMinute
=
60
;
const
double
msPerSecond
=
1000
;
const
double
msPerMinute
=
msPerSecond
*
SecondsPerMinute
;
const
double
msPerHour
=
msPerMinute
*
MinutesPerHour
;
const
double
msPerDay
=
msPerHour
*
HoursPerDay
;
const
unsigned
SecondsPerHour
=
60
*
60
;
const
unsigned
SecondsPerDay
=
SecondsPerHour
*
24
;
const
double
StartOfTime
=
-
8
.
64e15
;
const
double
EndOfTime
=
8
.
64e15
;
class
DateTimeInfo
{
static
DateTimeInfo
instance
;
class
MOZ_RAII
AcquireLock
{
static
mozilla
:
:
Atomic
<
bool
mozilla
:
:
ReleaseAcquire
>
spinLock
;
public
:
AcquireLock
(
)
{
while
(
!
spinLock
.
compareExchange
(
false
true
)
)
continue
;
}
~
AcquireLock
(
)
{
MOZ_ASSERT
(
spinLock
"
spinlock
should
have
been
acquired
"
)
;
spinLock
=
false
;
}
}
;
friend
bool
:
:
JS_Init
(
)
;
static
void
init
(
)
;
public
:
static
int64_t
getDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
{
AcquireLock
lock
;
return
DateTimeInfo
:
:
instance
.
internalGetDSTOffsetMilliseconds
(
utcMilliseconds
)
;
}
static
double
localTZA
(
)
{
AcquireLock
lock
;
return
DateTimeInfo
:
:
instance
.
localTZA_
;
}
private
:
friend
void
JS
:
:
ResetTimeZone
(
)
;
static
void
updateTimeZoneAdjustment
(
)
{
AcquireLock
lock
;
DateTimeInfo
:
:
instance
.
internalUpdateTimeZoneAdjustment
(
)
;
}
double
localTZA_
;
int64_t
computeDSTOffsetMilliseconds
(
int64_t
utcSeconds
)
;
int64_t
offsetMilliseconds
;
int64_t
rangeStartSeconds
rangeEndSeconds
;
int64_t
oldOffsetMilliseconds
;
int64_t
oldRangeStartSeconds
oldRangeEndSeconds
;
int32_t
utcToLocalStandardOffsetSeconds
;
static
const
int64_t
MaxUnixTimeT
=
2145859200
;
static
const
int64_t
RangeExpansionAmount
=
30
*
SecondsPerDay
;
int64_t
internalGetDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
;
void
internalUpdateTimeZoneAdjustment
(
)
;
void
sanityCheck
(
)
;
}
;
enum
class
IcuTimeZoneStatus
:
uint32_t
{
Valid
=
0
NeedsUpdate
Updating
}
;
extern
mozilla
:
:
Atomic
<
IcuTimeZoneStatus
mozilla
:
:
ReleaseAcquire
>
DefaultTimeZoneStatus
;
}
#
endif
