#
ifndef
vm_DateTime_h
#
define
vm_DateTime_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
threading
/
ExclusiveData
.
h
"
namespace
js
{
constexpr
double
HoursPerDay
=
24
;
constexpr
double
MinutesPerHour
=
60
;
constexpr
double
SecondsPerMinute
=
60
;
constexpr
double
msPerSecond
=
1000
;
constexpr
double
msPerMinute
=
msPerSecond
*
SecondsPerMinute
;
constexpr
double
msPerHour
=
msPerMinute
*
MinutesPerHour
;
constexpr
double
msPerDay
=
msPerHour
*
HoursPerDay
;
constexpr
unsigned
SecondsPerHour
=
60
*
60
;
constexpr
unsigned
SecondsPerDay
=
SecondsPerHour
*
24
;
constexpr
double
StartOfTime
=
-
8
.
64e15
;
constexpr
double
EndOfTime
=
8
.
64e15
;
extern
bool
InitDateTimeState
(
)
;
extern
void
FinishDateTimeState
(
)
;
enum
class
ResetTimeZoneMode
:
bool
{
DontResetIfOffsetUnchanged
ResetEvenIfOffsetUnchaged
}
;
extern
void
ResetTimeZoneInternal
(
ResetTimeZoneMode
mode
)
;
class
DateTimeInfo
{
static
ExclusiveData
<
DateTimeInfo
>
*
instance
;
friend
class
ExclusiveData
<
DateTimeInfo
>
;
friend
bool
InitDateTimeState
(
)
;
friend
void
FinishDateTimeState
(
)
;
DateTimeInfo
(
)
;
public
:
static
int32_t
getDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
{
auto
guard
=
instance
-
>
lock
(
)
;
return
guard
-
>
internalGetDSTOffsetMilliseconds
(
utcMilliseconds
)
;
}
static
int32_t
localTZA
(
)
{
auto
guard
=
instance
-
>
lock
(
)
;
return
guard
-
>
localTZA_
;
}
private
:
friend
void
js
:
:
ResetTimeZoneInternal
(
ResetTimeZoneMode
)
;
static
bool
updateTimeZoneAdjustment
(
ResetTimeZoneMode
mode
)
{
auto
guard
=
instance
-
>
lock
(
)
;
return
guard
-
>
internalUpdateTimeZoneAdjustment
(
mode
)
;
}
struct
RangeCache
{
int64_t
startSeconds
endSeconds
;
int64_t
oldStartSeconds
oldEndSeconds
;
int32_t
offsetMilliseconds
;
int32_t
oldOffsetMilliseconds
;
void
reset
(
)
;
void
sanityCheck
(
)
;
}
;
int32_t
localTZA_
;
int32_t
utcToLocalStandardOffsetSeconds_
;
RangeCache
dstRange_
;
static
const
int64_t
MinTimeT
=
0
;
static
const
int64_t
MaxTimeT
=
2145830400
;
static
const
int64_t
RangeExpansionAmount
=
30
*
SecondsPerDay
;
bool
internalUpdateTimeZoneAdjustment
(
ResetTimeZoneMode
mode
)
;
int64_t
toClampedSeconds
(
int64_t
milliseconds
)
;
using
ComputeFn
=
int32_t
(
DateTimeInfo
:
:
*
)
(
int64_t
)
;
int32_t
getOrComputeValue
(
RangeCache
&
range
int64_t
seconds
ComputeFn
compute
)
;
int32_t
computeDSTOffsetMilliseconds
(
int64_t
utcSeconds
)
;
int32_t
internalGetDSTOffsetMilliseconds
(
int64_t
utcMilliseconds
)
;
}
;
enum
class
IcuTimeZoneStatus
{
Valid
NeedsUpdate
}
;
extern
ExclusiveData
<
IcuTimeZoneStatus
>
*
IcuTimeZoneState
;
extern
void
ResyncICUDefaultTimeZone
(
)
;
}
#
endif
