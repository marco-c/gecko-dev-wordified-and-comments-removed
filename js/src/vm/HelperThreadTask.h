#
ifndef
vm_HelperThreadTask_h
#
define
vm_HelperThreadTask_h
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
js
{
class
AutoLockHelperThreadState
;
struct
DelazifyTask
;
struct
FreeDelazifyTask
;
class
SourceCompressionTask
;
namespace
jit
{
class
IonCompileTask
;
class
IonFreeTask
;
}
namespace
wasm
{
struct
Tier2GeneratorTask
;
}
template
<
typename
T
>
struct
MapTypeToThreadType
{
}
;
template
<
>
struct
MapTypeToThreadType
<
jit
:
:
IonCompileTask
>
{
static
const
ThreadType
threadType
=
THREAD_TYPE_ION
;
}
;
template
<
>
struct
MapTypeToThreadType
<
wasm
:
:
Tier2GeneratorTask
>
{
static
const
ThreadType
threadType
=
THREAD_TYPE_WASM_GENERATOR_TIER2
;
}
;
template
<
>
struct
MapTypeToThreadType
<
DelazifyTask
>
{
static
const
ThreadType
threadType
=
THREAD_TYPE_DELAZIFY
;
}
;
template
<
>
struct
MapTypeToThreadType
<
FreeDelazifyTask
>
{
static
const
ThreadType
threadType
=
THREAD_TYPE_DELAZIFY_FREE
;
}
;
template
<
>
struct
MapTypeToThreadType
<
SourceCompressionTask
>
{
static
const
ThreadType
threadType
=
THREAD_TYPE_COMPRESS
;
}
;
struct
HelperThreadTask
{
virtual
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
=
0
;
virtual
ThreadType
threadType
(
)
=
0
;
virtual
~
HelperThreadTask
(
)
=
default
;
template
<
typename
T
>
bool
is
(
)
{
return
MapTypeToThreadType
<
T
>
:
:
threadType
=
=
threadType
(
)
;
}
template
<
typename
T
>
T
*
as
(
)
{
MOZ_ASSERT
(
this
-
>
is
<
T
>
(
)
)
;
return
static_cast
<
T
*
>
(
this
)
;
}
}
;
}
#
endif
