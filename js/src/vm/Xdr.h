#
ifndef
vm_Xdr_h
#
define
vm_Xdr_h
#
include
"
mozilla
/
EndianUtils
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
namespace
js
{
class
LifoAlloc
;
class
XDRBufferBase
{
public
:
explicit
XDRBufferBase
(
JSContext
*
cx
size_t
cursor
=
0
)
:
context_
(
cx
)
cursor_
(
cursor
)
#
ifdef
DEBUG
aligned_
(
false
)
#
endif
{
}
JSContext
*
cx
(
)
const
{
return
context_
;
}
size_t
cursor
(
)
const
{
return
cursor_
;
}
#
ifdef
DEBUG
void
setAligned
(
bool
aligned
)
{
aligned_
=
aligned
;
}
bool
isAligned
(
)
const
{
return
aligned_
;
}
#
else
void
setAligned
(
bool
)
const
{
}
bool
isAligned
(
)
const
{
return
true
;
}
#
endif
protected
:
JSContext
*
const
context_
;
size_t
cursor_
;
#
ifdef
DEBUG
bool
aligned_
;
#
endif
}
;
template
<
XDRMode
mode
>
class
XDRBuffer
;
template
<
>
class
XDRBuffer
<
XDR_ENCODE
>
:
public
XDRBufferBase
{
public
:
XDRBuffer
(
JSContext
*
cx
JS
:
:
TranscodeBuffer
&
buffer
size_t
cursor
=
0
)
:
XDRBufferBase
(
cx
cursor
)
buffer_
(
buffer
)
{
}
uint8_t
*
write
(
size_t
n
)
{
MOZ_ASSERT
(
n
!
=
0
)
;
setAligned
(
false
)
;
if
(
!
buffer_
.
growByUninitialized
(
n
)
)
{
ReportOutOfMemory
(
cx
(
)
)
;
return
nullptr
;
}
uint8_t
*
ptr
=
&
buffer_
[
cursor_
]
;
cursor_
+
=
n
;
return
ptr
;
}
const
uint8_t
*
read
(
size_t
n
)
{
MOZ_CRASH
(
"
Should
never
read
in
encode
mode
"
)
;
return
nullptr
;
}
uintptr_t
uptr
(
)
const
{
return
reinterpret_cast
<
uintptr_t
>
(
buffer_
.
begin
(
)
+
cursor_
)
;
}
private
:
JS
:
:
TranscodeBuffer
&
buffer_
;
}
;
template
<
>
class
XDRBuffer
<
XDR_DECODE
>
:
public
XDRBufferBase
{
public
:
XDRBuffer
(
JSContext
*
cx
const
JS
:
:
TranscodeRange
&
range
)
:
XDRBufferBase
(
cx
)
buffer_
(
range
)
{
}
XDRBuffer
(
JSContext
*
cx
JS
:
:
TranscodeBuffer
&
buffer
size_t
cursor
=
0
)
:
XDRBufferBase
(
cx
cursor
)
buffer_
(
buffer
.
begin
(
)
buffer
.
length
(
)
)
{
}
const
uint8_t
*
read
(
size_t
n
)
{
MOZ_ASSERT
(
cursor_
<
buffer_
.
length
(
)
)
;
setAligned
(
false
)
;
uint8_t
*
ptr
=
&
buffer_
[
cursor_
]
;
cursor_
+
=
n
;
if
(
cursor_
>
buffer_
.
length
(
)
)
return
nullptr
;
return
ptr
;
}
uint8_t
*
write
(
size_t
n
)
{
MOZ_CRASH
(
"
Should
never
write
in
decode
mode
"
)
;
return
nullptr
;
}
uintptr_t
uptr
(
)
const
{
return
reinterpret_cast
<
uintptr_t
>
(
buffer_
.
begin
(
)
.
get
(
)
+
cursor_
)
;
}
private
:
const
JS
:
:
TranscodeRange
buffer_
;
}
;
class
XDRCoderBase
;
class
XDRIncrementalEncoder
;
using
XDRAlignment
=
char16_t
;
static
const
uint8_t
AlignPadding
[
sizeof
(
XDRAlignment
)
]
=
{
0
0
}
;
class
MOZ_RAII
AutoXDRTree
{
public
:
using
Key
=
uint64_t
;
AutoXDRTree
(
XDRCoderBase
*
xdr
Key
key
)
;
~
AutoXDRTree
(
)
;
static
constexpr
Key
noKey
=
0
;
static
constexpr
Key
noSubTree
=
Key
(
1
)
<
<
32
;
static
constexpr
Key
topLevel
=
Key
(
2
)
<
<
32
;
private
:
friend
class
XDRIncrementalEncoder
;
Key
key_
;
AutoXDRTree
*
parent_
;
XDRCoderBase
*
xdr_
;
}
;
class
XDRCoderBase
{
protected
:
XDRCoderBase
(
)
{
}
public
:
virtual
AutoXDRTree
:
:
Key
getTopLevelTreeKey
(
)
const
{
return
AutoXDRTree
:
:
noKey
;
}
virtual
AutoXDRTree
:
:
Key
getTreeKey
(
JSFunction
*
fun
)
const
{
return
AutoXDRTree
:
:
noKey
;
}
virtual
void
createOrReplaceSubTree
(
AutoXDRTree
*
child
)
{
}
;
virtual
void
endSubTree
(
)
{
}
;
virtual
bool
isAligned
(
size_t
n
)
=
0
;
}
;
template
<
XDRMode
mode
>
class
XDRState
:
public
XDRCoderBase
{
protected
:
XDRBuffer
<
mode
>
buf
;
private
:
JS
:
:
TranscodeResult
resultCode_
;
public
:
XDRState
(
JSContext
*
cx
JS
:
:
TranscodeBuffer
&
buffer
size_t
cursor
=
0
)
:
buf
(
cx
buffer
cursor
)
resultCode_
(
JS
:
:
TranscodeResult_Ok
)
{
}
template
<
typename
RangeType
>
XDRState
(
JSContext
*
cx
const
RangeType
&
range
)
:
buf
(
cx
range
)
resultCode_
(
JS
:
:
TranscodeResult_Ok
)
{
}
virtual
~
XDRState
(
)
{
}
;
JSContext
*
cx
(
)
const
{
return
buf
.
cx
(
)
;
}
virtual
LifoAlloc
&
lifoAlloc
(
)
const
;
virtual
bool
hasOptions
(
)
const
{
return
false
;
}
virtual
const
ReadOnlyCompileOptions
&
options
(
)
{
MOZ_CRASH
(
"
does
not
have
options
"
)
;
}
virtual
bool
hasScriptSourceObjectOut
(
)
const
{
return
false
;
}
virtual
ScriptSourceObject
*
*
scriptSourceObjectOut
(
)
{
MOZ_CRASH
(
"
does
not
have
scriptSourceObjectOut
.
"
)
;
}
void
postProcessContextErrors
(
JSContext
*
cx
)
;
JS
:
:
TranscodeResult
resultCode
(
)
const
{
return
resultCode_
;
}
bool
fail
(
JS
:
:
TranscodeResult
code
)
{
MOZ_ASSERT
(
resultCode_
=
=
JS
:
:
TranscodeResult_Ok
)
;
resultCode_
=
code
;
return
false
;
}
bool
peekData
(
const
uint8_t
*
*
pptr
size_t
length
)
{
const
uint8_t
*
ptr
=
buf
.
read
(
length
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
pptr
=
ptr
;
return
true
;
}
bool
isAligned
(
size_t
n
)
override
{
MOZ_ASSERT
(
mozilla
:
:
IsPowerOfTwo
(
n
)
)
;
if
(
resultCode
(
)
!
=
JS
:
:
TranscodeResult_Ok
)
return
true
;
size_t
mask
=
n
-
1
;
size_t
offset
=
buf
.
uptr
(
)
&
mask
;
return
offset
=
=
0
&
&
buf
.
isAligned
(
)
;
}
bool
codeAlign
(
size_t
n
)
{
MOZ_ASSERT
(
mozilla
:
:
IsPowerOfTwo
(
n
)
)
;
size_t
mask
=
n
-
1
;
MOZ_ASSERT_IF
(
mode
=
=
XDR_ENCODE
(
buf
.
uptr
(
)
&
mask
)
=
=
(
buf
.
cursor
(
)
&
mask
)
)
;
size_t
offset
=
buf
.
uptr
(
)
&
mask
;
if
(
offset
)
{
size_t
padding
=
n
-
offset
;
MOZ_ASSERT
(
padding
<
sizeof
(
AlignPadding
)
)
;
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
padding
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
memcpy
(
ptr
AlignPadding
padding
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
padding
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
if
(
memcmp
(
ptr
AlignPadding
padding
)
!
=
0
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
}
}
buf
.
setAligned
(
true
)
;
MOZ_ASSERT
(
isAligned
(
n
)
)
;
return
true
;
}
bool
codeUint8
(
uint8_t
*
n
)
{
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
*
ptr
=
*
n
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
n
=
*
ptr
;
}
return
true
;
}
bool
codeUint16
(
uint16_t
*
n
)
{
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
mozilla
:
:
LittleEndian
:
:
writeUint16
(
ptr
*
n
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
n
=
mozilla
:
:
LittleEndian
:
:
readUint16
(
ptr
)
;
}
return
true
;
}
bool
codeUint32
(
uint32_t
*
n
)
{
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
mozilla
:
:
LittleEndian
:
:
writeUint32
(
ptr
*
n
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
n
=
mozilla
:
:
LittleEndian
:
:
readUint32
(
ptr
)
;
}
return
true
;
}
bool
codeUint64
(
uint64_t
*
n
)
{
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
mozilla
:
:
LittleEndian
:
:
writeUint64
(
ptr
*
n
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
sizeof
(
*
n
)
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
n
=
mozilla
:
:
LittleEndian
:
:
readUint64
(
ptr
)
;
}
return
true
;
}
template
<
typename
T
>
bool
codeEnum32
(
T
*
val
typename
mozilla
:
:
EnableIf
<
mozilla
:
:
IsEnum
<
T
>
:
:
value
T
>
:
:
Type
*
=
NULL
)
{
const
uint32_t
MAGIC
=
0x21AB218C
;
uint32_t
tmp
;
if
(
mode
=
=
XDR_ENCODE
)
tmp
=
uint32_t
(
*
val
)
^
MAGIC
;
if
(
!
codeUint32
(
&
tmp
)
)
return
false
;
if
(
mode
=
=
XDR_DECODE
)
*
val
=
T
(
tmp
^
MAGIC
)
;
return
true
;
}
bool
codeDouble
(
double
*
dp
)
{
union
DoublePun
{
double
d
;
uint64_t
u
;
}
pun
;
if
(
mode
=
=
XDR_ENCODE
)
pun
.
d
=
*
dp
;
if
(
!
codeUint64
(
&
pun
.
u
)
)
return
false
;
if
(
mode
=
=
XDR_DECODE
)
*
dp
=
pun
.
d
;
return
true
;
}
bool
codeMarker
(
uint32_t
magic
)
{
uint32_t
actual
=
magic
;
if
(
!
codeUint32
(
&
actual
)
)
return
false
;
if
(
actual
!
=
magic
)
{
MOZ_ASSERT
(
false
"
Bad
XDR
marker
"
)
;
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
}
return
true
;
}
bool
codeBytes
(
void
*
bytes
size_t
len
)
{
if
(
len
=
=
0
)
return
true
;
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
len
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
memcpy
(
ptr
bytes
len
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
len
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
memcpy
(
bytes
ptr
len
)
;
}
return
true
;
}
bool
codeCString
(
const
char
*
*
sp
)
{
uint64_t
len64
;
if
(
mode
=
=
XDR_ENCODE
)
len64
=
(
uint64_t
)
(
strlen
(
*
sp
)
+
1
)
;
if
(
!
codeUint64
(
&
len64
)
)
return
false
;
size_t
len
=
(
size_t
)
len64
;
if
(
mode
=
=
XDR_ENCODE
)
{
uint8_t
*
ptr
=
buf
.
write
(
len
)
;
if
(
!
ptr
)
return
fail
(
JS
:
:
TranscodeResult_Throw
)
;
memcpy
(
ptr
*
sp
len
)
;
}
else
{
const
uint8_t
*
ptr
=
buf
.
read
(
len
)
;
if
(
!
ptr
|
|
ptr
[
len
]
!
=
'
\
0
'
)
return
fail
(
JS
:
:
TranscodeResult_Failure_BadDecode
)
;
*
sp
=
reinterpret_cast
<
const
char
*
>
(
ptr
)
;
}
return
true
;
}
bool
codeChars
(
const
JS
:
:
Latin1Char
*
chars
size_t
nchars
)
;
bool
codeChars
(
char16_t
*
chars
size_t
nchars
)
;
bool
codeFunction
(
JS
:
:
MutableHandleFunction
objp
HandleScriptSource
sourceObject
=
nullptr
)
;
bool
codeScript
(
MutableHandleScript
scriptp
)
;
bool
codeConstValue
(
MutableHandleValue
vp
)
;
}
;
using
XDREncoder
=
XDRState
<
XDR_ENCODE
>
;
using
XDRDecoder
=
XDRState
<
XDR_DECODE
>
;
class
XDROffThreadDecoder
:
public
XDRDecoder
{
const
ReadOnlyCompileOptions
*
options_
;
ScriptSourceObject
*
*
sourceObjectOut_
;
LifoAlloc
&
alloc_
;
public
:
XDROffThreadDecoder
(
JSContext
*
cx
LifoAlloc
&
alloc
const
ReadOnlyCompileOptions
*
options
ScriptSourceObject
*
*
sourceObjectOut
const
JS
:
:
TranscodeRange
&
range
)
:
XDRDecoder
(
cx
range
)
options_
(
options
)
sourceObjectOut_
(
sourceObjectOut
)
alloc_
(
alloc
)
{
MOZ_ASSERT
(
options
)
;
MOZ_ASSERT
(
sourceObjectOut
)
;
MOZ_ASSERT
(
*
sourceObjectOut
=
=
nullptr
)
;
}
LifoAlloc
&
lifoAlloc
(
)
const
override
{
return
alloc_
;
}
bool
hasOptions
(
)
const
override
{
return
true
;
}
const
ReadOnlyCompileOptions
&
options
(
)
override
{
return
*
options_
;
}
bool
hasScriptSourceObjectOut
(
)
const
override
{
return
true
;
}
ScriptSourceObject
*
*
scriptSourceObjectOut
(
)
override
{
return
sourceObjectOut_
;
}
}
;
class
XDRIncrementalEncoder
:
public
XDREncoder
{
struct
Slice
{
size_t
sliceBegin
;
size_t
sliceLength
;
AutoXDRTree
:
:
Key
child
;
}
;
using
SlicesNode
=
Vector
<
Slice
1
SystemAllocPolicy
>
;
using
SlicesTree
=
HashMap
<
AutoXDRTree
:
:
Key
SlicesNode
DefaultHasher
<
AutoXDRTree
:
:
Key
>
SystemAllocPolicy
>
;
AutoXDRTree
*
scope_
;
SlicesNode
*
node_
;
SlicesTree
tree_
;
JS
:
:
TranscodeBuffer
slices_
;
bool
oom_
;
public
:
explicit
XDRIncrementalEncoder
(
JSContext
*
cx
)
:
XDREncoder
(
cx
slices_
0
)
scope_
(
nullptr
)
node_
(
nullptr
)
oom_
(
false
)
{
}
virtual
~
XDRIncrementalEncoder
(
)
{
}
AutoXDRTree
:
:
Key
getTopLevelTreeKey
(
)
const
override
;
AutoXDRTree
:
:
Key
getTreeKey
(
JSFunction
*
fun
)
const
override
;
MOZ_MUST_USE
bool
init
(
)
;
void
createOrReplaceSubTree
(
AutoXDRTree
*
child
)
override
;
void
endSubTree
(
)
override
;
MOZ_MUST_USE
bool
linearize
(
JS
:
:
TranscodeBuffer
&
buffer
)
;
}
;
}
#
endif
