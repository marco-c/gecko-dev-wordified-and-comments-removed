#
include
"
vm
/
StencilCache
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
js
:
:
StencilCache
:
:
StencilCache
(
)
:
cache
(
js
:
:
mutexid
:
:
StencilCache
)
enabled
(
false
)
{
}
js
:
:
StencilCache
:
:
AccessKey
js
:
:
StencilCache
:
:
isSourceCached
(
ScriptSource
*
src
)
{
if
(
!
enabled
)
{
return
cache
.
noAccess
(
)
;
}
AccessKey
lock
(
cache
.
lock
(
)
)
;
if
(
!
enabled
)
{
return
cache
.
noAccess
(
)
;
}
if
(
!
lock
-
>
watched
.
has
(
src
)
)
{
return
cache
.
noAccess
(
)
;
}
return
lock
;
}
bool
js
:
:
StencilCache
:
:
startCaching
(
RefPtr
<
ScriptSource
>
&
&
src
)
{
auto
guard
=
cache
.
lock
(
)
;
if
(
!
guard
-
>
watched
.
putNew
(
std
:
:
move
(
src
)
)
)
{
return
false
;
}
enabled
=
true
;
return
true
;
}
js
:
:
frontend
:
:
CompilationStencil
*
js
:
:
StencilCache
:
:
lookup
(
AccessKey
&
guard
const
StencilContext
&
key
)
{
auto
ptr
=
guard
-
>
functions
.
lookup
(
key
)
;
if
(
!
ptr
)
{
return
nullptr
;
}
return
ptr
-
>
value
(
)
.
get
(
)
;
}
bool
js
:
:
StencilCache
:
:
putNew
(
AccessKey
&
guard
const
StencilContext
&
key
js
:
:
frontend
:
:
CompilationStencil
*
value
)
{
return
guard
-
>
functions
.
putNew
(
key
value
)
;
}
void
js
:
:
StencilCache
:
:
clearAndDisable
(
)
{
auto
guard
=
cache
.
lock
(
)
;
guard
-
>
functions
.
clearAndCompact
(
)
;
guard
-
>
watched
.
clearAndCompact
(
)
;
enabled
=
false
;
}
