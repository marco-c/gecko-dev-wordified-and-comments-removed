#
ifndef
vm_InvalidatingFuse_h
#
define
vm_InvalidatingFuse_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
InvalidationScriptSet
.
h
"
#
include
"
js
/
SweepingAPI
.
h
"
#
include
"
vm
/
GuardFuse
.
h
"
class
JSScript
;
namespace
js
{
class
InvalidatingFuse
:
public
GuardFuse
{
public
:
virtual
bool
addFuseDependency
(
JSContext
*
cx
const
jit
:
:
IonScriptKey
&
ionScript
)
=
0
;
}
;
class
InvalidatingRuntimeFuse
:
public
InvalidatingFuse
{
public
:
virtual
bool
addFuseDependency
(
JSContext
*
cx
const
jit
:
:
IonScriptKey
&
ionScript
)
override
;
virtual
void
popFuse
(
JSContext
*
cx
)
override
;
}
;
class
DependentScriptSet
{
public
:
DependentScriptSet
(
JSContext
*
cx
InvalidatingFuse
*
fuse
)
;
InvalidatingFuse
*
associatedFuse
;
bool
addScriptForFuse
(
InvalidatingFuse
*
fuse
const
jit
:
:
IonScriptKey
&
ionScript
)
;
void
invalidateForFuse
(
JSContext
*
cx
InvalidatingFuse
*
fuse
)
;
void
removeScript
(
JSScript
*
script
)
{
jit
:
:
RemoveFromScriptSet
(
weakScripts
script
)
;
}
private
:
js
:
:
jit
:
:
WeakScriptCache
weakScripts
;
}
;
class
DependentScriptGroup
{
Vector
<
DependentScriptSet
1
SystemAllocPolicy
>
dependencies
;
public
:
DependentScriptSet
*
getOrCreateDependentScriptSet
(
JSContext
*
cx
InvalidatingFuse
*
fuse
)
;
DependentScriptSet
*
begin
(
)
{
return
dependencies
.
begin
(
)
;
}
DependentScriptSet
*
end
(
)
{
return
dependencies
.
end
(
)
;
}
void
removeScript
(
JSScript
*
script
)
{
for
(
auto
&
set
:
dependencies
)
{
set
.
removeScript
(
script
)
;
}
}
}
;
}
#
endif
