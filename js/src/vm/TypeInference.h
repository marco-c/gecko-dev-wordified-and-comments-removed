#
ifndef
vm_TypeInference_h
#
define
vm_TypeInference_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
UbiNode
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
util
/
DiagnosticAssertions
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
TypeSet
.
h
"
namespace
js
{
class
TypeZone
;
class
PlainObject
;
namespace
jit
{
class
IonScript
;
class
JitScript
;
class
TempAllocator
;
}
class
AutoClearTypeInferenceStateOnOOM
{
Zone
*
zone
;
AutoClearTypeInferenceStateOnOOM
(
const
AutoClearTypeInferenceStateOnOOM
&
)
=
delete
;
void
operator
=
(
const
AutoClearTypeInferenceStateOnOOM
&
)
=
delete
;
public
:
explicit
AutoClearTypeInferenceStateOnOOM
(
Zone
*
zone
)
;
~
AutoClearTypeInferenceStateOnOOM
(
)
;
}
;
class
MOZ_RAII
AutoSweepBase
{
JS
:
:
AutoCheckCannotGC
nogc
;
}
;
class
MOZ_RAII
AutoSweepObjectGroup
:
public
AutoSweepBase
{
#
ifdef
DEBUG
ObjectGroup
*
group_
;
#
endif
public
:
inline
explicit
AutoSweepObjectGroup
(
ObjectGroup
*
group
)
;
#
ifdef
DEBUG
inline
~
AutoSweepObjectGroup
(
)
;
ObjectGroup
*
group
(
)
const
{
return
group_
;
}
#
endif
}
;
class
MOZ_RAII
AutoSweepJitScript
:
public
AutoSweepBase
{
#
ifdef
DEBUG
Zone
*
zone_
;
jit
:
:
JitScript
*
jitScript_
;
#
endif
public
:
inline
explicit
AutoSweepJitScript
(
BaseScript
*
script
)
;
#
ifdef
DEBUG
inline
~
AutoSweepJitScript
(
)
;
jit
:
:
JitScript
*
jitScript
(
)
const
{
return
jitScript_
;
}
Zone
*
zone
(
)
const
{
return
zone_
;
}
#
endif
}
;
inline
bool
isInlinableCall
(
jsbytecode
*
pc
)
;
bool
ClassCanHaveExtraProperties
(
const
JSClass
*
clasp
)
;
class
RecompileInfo
{
JSScript
*
script_
;
IonCompilationId
id_
;
public
:
RecompileInfo
(
JSScript
*
script
IonCompilationId
id
)
:
script_
(
script
)
id_
(
id
)
{
}
JSScript
*
script
(
)
const
{
return
script_
;
}
inline
jit
:
:
IonScript
*
maybeIonScriptToInvalidate
(
const
TypeZone
&
zone
)
const
;
inline
bool
shouldSweep
(
const
TypeZone
&
zone
)
;
bool
operator
=
=
(
const
RecompileInfo
&
other
)
const
{
return
script_
=
=
other
.
script_
&
&
id_
=
=
other
.
id_
;
}
}
;
typedef
Vector
<
RecompileInfo
1
SystemAllocPolicy
>
RecompileInfoVector
;
struct
AutoEnterAnalysis
;
class
TypeZone
{
JS
:
:
Zone
*
const
zone_
;
static
const
size_t
TYPE_LIFO_ALLOC_PRIMARY_CHUNK_SIZE
=
8
*
1024
;
ZoneData
<
LifoAlloc
>
typeLifoAlloc_
;
ZoneData
<
mozilla
:
:
Maybe
<
IonCompilationId
>
>
currentCompilationId_
;
TypeZone
(
const
TypeZone
&
)
=
delete
;
void
operator
=
(
const
TypeZone
&
)
=
delete
;
public
:
ZoneOrGCTaskOrIonCompileData
<
uint32_t
>
generation
;
ZoneData
<
LifoAlloc
>
sweepTypeLifoAlloc
;
ZoneData
<
bool
>
sweepingTypes
;
ZoneData
<
bool
>
oomSweepingTypes
;
ZoneData
<
bool
>
keepJitScripts
;
ZoneData
<
AutoEnterAnalysis
*
>
activeAnalysis
;
explicit
TypeZone
(
JS
:
:
Zone
*
zone
)
;
~
TypeZone
(
)
;
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
LifoAlloc
&
typeLifoAlloc
(
)
{
#
ifdef
JS_CRASH_DIAGNOSTICS
MOZ_RELEASE_ASSERT
(
CurrentThreadCanAccessZone
(
zone_
)
)
;
#
endif
return
typeLifoAlloc_
.
ref
(
)
;
}
void
beginSweep
(
)
;
void
endSweep
(
JSRuntime
*
rt
)
;
void
addPendingRecompile
(
JSContext
*
cx
const
RecompileInfo
&
info
)
;
void
addPendingRecompile
(
JSContext
*
cx
JSScript
*
script
)
;
void
processPendingRecompiles
(
JSFreeOp
*
fop
RecompileInfoVector
&
recompiles
)
;
bool
isSweepingTypes
(
)
const
{
return
sweepingTypes
;
}
void
setSweepingTypes
(
bool
sweeping
)
{
MOZ_RELEASE_ASSERT
(
sweepingTypes
!
=
sweeping
)
;
MOZ_ASSERT_IF
(
sweeping
!
oomSweepingTypes
)
;
sweepingTypes
=
sweeping
;
oomSweepingTypes
=
false
;
}
void
setOOMSweepingTypes
(
)
{
MOZ_ASSERT
(
sweepingTypes
)
;
oomSweepingTypes
=
true
;
}
bool
hadOOMSweepingTypes
(
)
{
MOZ_ASSERT
(
sweepingTypes
)
;
return
oomSweepingTypes
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
currentCompilationId
(
)
const
{
return
currentCompilationId_
.
ref
(
)
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
&
currentCompilationIdRef
(
)
{
return
currentCompilationId_
.
ref
(
)
;
}
}
;
enum
TypeSpewChannel
{
ISpewOps
ISpewResult
SPEW_COUNT
}
;
#
ifdef
DEBUG
bool
InferSpewActive
(
TypeSpewChannel
channel
)
;
const
char
*
InferSpewColorReset
(
)
;
#
define
InferSpew
(
channel
.
.
.
)
\
if
(
InferSpewActive
(
channel
)
)
{
\
InferSpewImpl
(
__VA_ARGS__
)
;
\
}
else
{
\
}
void
InferSpewImpl
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
1
2
)
;
#
else
inline
const
char
*
InferSpewColorReset
(
)
{
return
nullptr
;
}
#
define
InferSpew
(
channel
.
.
.
)
\
do
{
\
}
while
(
0
)
#
endif
void
PrintTypes
(
JSContext
*
cx
JS
:
:
Compartment
*
comp
bool
force
)
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
ObjectGroup
>
:
TracerConcrete
<
js
:
:
ObjectGroup
>
{
protected
:
explicit
Concrete
(
js
:
:
ObjectGroup
*
ptr
)
:
TracerConcrete
<
js
:
:
ObjectGroup
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
ObjectGroup
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
