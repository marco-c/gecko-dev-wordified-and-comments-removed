#
ifndef
vm_TypeInference_h
#
define
vm_TypeInference_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
UbiNode
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
TypeSet
.
h
"
namespace
js
{
class
TypeConstraint
;
class
JitScript
;
class
TypeZone
;
class
CompilerConstraintList
;
class
HeapTypeSetKey
;
namespace
jit
{
class
ICScript
;
struct
IonScript
;
class
TempAllocator
;
}
class
AutoClearTypeInferenceStateOnOOM
{
Zone
*
zone
;
AutoClearTypeInferenceStateOnOOM
(
const
AutoClearTypeInferenceStateOnOOM
&
)
=
delete
;
void
operator
=
(
const
AutoClearTypeInferenceStateOnOOM
&
)
=
delete
;
public
:
explicit
AutoClearTypeInferenceStateOnOOM
(
Zone
*
zone
)
;
~
AutoClearTypeInferenceStateOnOOM
(
)
;
}
;
class
MOZ_RAII
AutoSweepBase
{
JS
:
:
AutoCheckCannotGC
nogc
;
}
;
class
MOZ_RAII
AutoSweepObjectGroup
:
public
AutoSweepBase
{
#
ifdef
DEBUG
ObjectGroup
*
group_
;
#
endif
public
:
inline
explicit
AutoSweepObjectGroup
(
ObjectGroup
*
group
)
;
#
ifdef
DEBUG
inline
~
AutoSweepObjectGroup
(
)
;
ObjectGroup
*
group
(
)
const
{
return
group_
;
}
#
endif
}
;
class
MOZ_RAII
AutoSweepJitScript
:
public
AutoSweepBase
{
#
ifdef
DEBUG
Zone
*
zone_
;
JitScript
*
jitScript_
;
#
endif
public
:
inline
explicit
AutoSweepJitScript
(
JSScript
*
script
)
;
#
ifdef
DEBUG
inline
~
AutoSweepJitScript
(
)
;
JitScript
*
jitScript
(
)
const
{
return
jitScript_
;
}
Zone
*
zone
(
)
const
{
return
zone_
;
}
#
endif
}
;
CompilerConstraintList
*
NewCompilerConstraintList
(
jit
:
:
TempAllocator
&
alloc
)
;
bool
AddClearDefiniteGetterSetterForPrototypeChain
(
JSContext
*
cx
ObjectGroup
*
group
HandleId
id
)
;
bool
AddClearDefiniteFunctionUsesInScript
(
JSContext
*
cx
ObjectGroup
*
group
JSScript
*
script
JSScript
*
calleeScript
)
;
class
PreliminaryObjectArray
{
public
:
static
const
uint32_t
COUNT
=
20
;
private
:
JSObject
*
objects
[
COUNT
]
=
{
}
;
public
:
PreliminaryObjectArray
(
)
=
default
;
void
registerNewObject
(
PlainObject
*
res
)
;
void
unregisterObject
(
PlainObject
*
obj
)
;
JSObject
*
get
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
COUNT
)
;
return
objects
[
i
]
;
}
bool
full
(
)
const
;
bool
empty
(
)
const
;
void
sweep
(
)
;
}
;
class
PreliminaryObjectArrayWithTemplate
:
public
PreliminaryObjectArray
{
HeapPtr
<
Shape
*
>
shape_
;
public
:
explicit
PreliminaryObjectArrayWithTemplate
(
Shape
*
shape
)
:
shape_
(
shape
)
{
}
void
clear
(
)
{
shape_
.
init
(
nullptr
)
;
}
Shape
*
shape
(
)
{
return
shape_
;
}
void
maybeAnalyze
(
JSContext
*
cx
ObjectGroup
*
group
bool
force
=
false
)
;
void
trace
(
JSTracer
*
trc
)
;
static
void
writeBarrierPre
(
PreliminaryObjectArrayWithTemplate
*
preliminaryObjects
)
;
}
;
class
TypeNewScriptInitializer
{
public
:
enum
Kind
{
SETPROP
SETPROP_FRAME
DONE
}
kind
;
uint32_t
offset
;
TypeNewScriptInitializer
(
Kind
kind
uint32_t
offset
)
:
kind
(
kind
)
offset
(
offset
)
{
}
}
;
inline
bool
isInlinableCall
(
jsbytecode
*
pc
)
;
bool
ClassCanHaveExtraProperties
(
const
Class
*
clasp
)
;
class
RecompileInfo
{
JSScript
*
script_
;
IonCompilationId
id_
;
public
:
RecompileInfo
(
JSScript
*
script
IonCompilationId
id
)
:
script_
(
script
)
id_
(
id
)
{
}
JSScript
*
script
(
)
const
{
return
script_
;
}
inline
jit
:
:
IonScript
*
maybeIonScriptToInvalidate
(
const
TypeZone
&
zone
)
const
;
inline
bool
shouldSweep
(
const
TypeZone
&
zone
)
;
bool
operator
=
=
(
const
RecompileInfo
&
other
)
const
{
return
script_
=
=
other
.
script_
&
&
id_
=
=
other
.
id_
;
}
}
;
typedef
Vector
<
RecompileInfo
1
SystemAllocPolicy
>
RecompileInfoVector
;
class
JitScript
{
friend
class
:
:
JSScript
;
RecompileInfoVector
inlinedCompilations_
;
using
ICScriptPtr
=
js
:
:
UniquePtr
<
js
:
:
jit
:
:
ICScript
>
;
ICScriptPtr
icScript_
;
uint32_t
numTypeSets_
;
uint32_t
bytecodeTypeMapHint_
=
0
;
struct
Flags
{
bool
active
:
1
;
bool
typesGeneration
:
1
;
bool
hasFreezeConstraints
:
1
;
}
;
Flags
flags_
=
{
}
;
StackTypeSet
typeArray_
[
1
]
;
StackTypeSet
*
typeArrayDontCheckGeneration
(
)
{
static_assert
(
sizeof
(
JitScript
)
=
=
sizeof
(
typeArray_
)
+
offsetof
(
JitScript
typeArray_
)
"
typeArray_
must
be
the
last
member
of
JitScript
"
)
;
return
const_cast
<
StackTypeSet
*
>
(
typeArray_
)
;
}
uint32_t
typesGeneration
(
)
const
{
return
uint32_t
(
flags_
.
typesGeneration
)
;
}
void
setTypesGeneration
(
uint32_t
generation
)
{
MOZ_ASSERT
(
generation
<
=
1
)
;
flags_
.
typesGeneration
=
generation
;
}
public
:
JitScript
(
JSScript
*
script
ICScriptPtr
&
&
icScript
uint32_t
numTypeSets
)
;
bool
hasFreezeConstraints
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
const
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
return
flags_
.
hasFreezeConstraints
;
}
void
setHasFreezeConstraints
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
flags_
.
hasFreezeConstraints
=
true
;
}
inline
bool
typesNeedsSweep
(
Zone
*
zone
)
const
;
void
sweepTypes
(
const
js
:
:
AutoSweepJitScript
&
sweep
Zone
*
zone
)
;
RecompileInfoVector
&
inlinedCompilations
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
return
inlinedCompilations_
;
}
MOZ_MUST_USE
bool
addInlinedCompilation
(
const
js
:
:
AutoSweepJitScript
&
sweep
RecompileInfo
info
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
if
(
!
inlinedCompilations_
.
empty
(
)
&
&
inlinedCompilations_
.
back
(
)
=
=
info
)
{
return
true
;
}
return
inlinedCompilations_
.
append
(
info
)
;
}
uint32_t
numTypeSets
(
)
const
{
return
numTypeSets_
;
}
uint32_t
*
bytecodeTypeMapHint
(
)
{
return
&
bytecodeTypeMapHint_
;
}
bool
active
(
)
const
{
return
flags_
.
active
;
}
void
setActive
(
)
{
flags_
.
active
=
true
;
}
void
resetActive
(
)
{
flags_
.
active
=
false
;
}
jit
:
:
ICScript
*
icScript
(
)
const
{
MOZ_ASSERT
(
icScript_
)
;
return
icScript_
.
get
(
)
;
}
StackTypeSet
*
typeArray
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
return
typeArrayDontCheckGeneration
(
)
;
}
uint32_t
*
bytecodeTypeMap
(
)
{
MOZ_ASSERT
(
numTypeSets_
>
0
)
;
return
reinterpret_cast
<
uint32_t
*
>
(
typeArray_
+
numTypeSets_
)
;
}
inline
StackTypeSet
*
thisTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
)
;
inline
StackTypeSet
*
argTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
unsigned
i
)
;
inline
StackTypeSet
*
bytecodeTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
jsbytecode
*
pc
)
;
template
<
typename
TYPESET
>
static
inline
TYPESET
*
BytecodeTypes
(
JSScript
*
script
jsbytecode
*
pc
uint32_t
*
bytecodeMap
uint32_t
*
hint
TYPESET
*
typeArray
)
;
static
void
MonitorBytecodeType
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
const
js
:
:
Value
&
val
)
;
static
void
MonitorBytecodeType
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
TypeSet
:
:
Type
type
)
;
static
inline
void
MonitorBytecodeType
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
StackTypeSet
*
types
const
js
:
:
Value
&
val
)
;
private
:
static
void
MonitorBytecodeTypeSlow
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
StackTypeSet
*
types
TypeSet
:
:
Type
type
)
;
public
:
static
inline
void
MonitorAssign
(
JSContext
*
cx
HandleObject
obj
jsid
id
)
;
static
inline
void
MonitorThisType
(
JSContext
*
cx
JSScript
*
script
TypeSet
:
:
Type
type
)
;
static
inline
void
MonitorThisType
(
JSContext
*
cx
JSScript
*
script
const
js
:
:
Value
&
value
)
;
static
inline
void
MonitorArgType
(
JSContext
*
cx
JSScript
*
script
unsigned
arg
TypeSet
:
:
Type
type
)
;
static
inline
void
MonitorArgType
(
JSContext
*
cx
JSScript
*
script
unsigned
arg
const
js
:
:
Value
&
value
)
;
static
bool
FreezeTypeSets
(
CompilerConstraintList
*
constraints
JSScript
*
script
TemporaryTypeSet
*
*
pThisTypes
TemporaryTypeSet
*
*
pArgTypes
TemporaryTypeSet
*
*
pBytecodeTypes
)
;
void
destroy
(
Zone
*
zone
)
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
;
}
static
constexpr
size_t
offsetOfICScript
(
)
{
static_assert
(
sizeof
(
icScript_
)
=
=
sizeof
(
uintptr_t
)
"
JIT
code
assumes
icScript_
is
pointer
-
sized
"
)
;
return
offsetof
(
JitScript
icScript_
)
;
}
#
ifdef
DEBUG
void
printTypes
(
JSContext
*
cx
HandleScript
script
)
;
#
endif
}
;
class
MOZ_RAII
AutoKeepJitScripts
{
TypeZone
&
zone_
;
bool
prev_
;
AutoKeepJitScripts
(
const
AutoKeepJitScripts
&
)
=
delete
;
void
operator
=
(
const
AutoKeepJitScripts
&
)
=
delete
;
public
:
explicit
inline
AutoKeepJitScripts
(
JSContext
*
cx
)
;
inline
~
AutoKeepJitScripts
(
)
;
}
;
class
RecompileInfo
;
bool
FinishCompilation
(
JSContext
*
cx
HandleScript
script
CompilerConstraintList
*
constraints
IonCompilationId
compilationId
bool
*
isValidOut
)
;
void
FinishDefinitePropertiesAnalysis
(
JSContext
*
cx
CompilerConstraintList
*
constraints
)
;
struct
AutoEnterAnalysis
;
class
TypeZone
{
JS
:
:
Zone
*
const
zone_
;
static
const
size_t
TYPE_LIFO_ALLOC_PRIMARY_CHUNK_SIZE
=
8
*
1024
;
ZoneData
<
LifoAlloc
>
typeLifoAlloc_
;
ZoneData
<
mozilla
:
:
Maybe
<
IonCompilationId
>
>
currentCompilationId_
;
TypeZone
(
const
TypeZone
&
)
=
delete
;
void
operator
=
(
const
TypeZone
&
)
=
delete
;
public
:
ZoneOrGCTaskOrIonCompileData
<
uint32_t
>
generation
;
ZoneData
<
LifoAlloc
>
sweepTypeLifoAlloc
;
ZoneData
<
bool
>
sweepingTypes
;
ZoneData
<
bool
>
oomSweepingTypes
;
ZoneData
<
bool
>
keepJitScripts
;
ZoneData
<
AutoEnterAnalysis
*
>
activeAnalysis
;
explicit
TypeZone
(
JS
:
:
Zone
*
zone
)
;
~
TypeZone
(
)
;
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
LifoAlloc
&
typeLifoAlloc
(
)
{
#
ifdef
JS_CRASH_DIAGNOSTICS
MOZ_RELEASE_ASSERT
(
CurrentThreadCanAccessZone
(
zone_
)
)
;
#
endif
return
typeLifoAlloc_
.
ref
(
)
;
}
void
beginSweep
(
)
;
void
endSweep
(
JSRuntime
*
rt
)
;
void
clearAllNewScriptsOnOOM
(
)
;
void
addPendingRecompile
(
JSContext
*
cx
const
RecompileInfo
&
info
)
;
void
addPendingRecompile
(
JSContext
*
cx
JSScript
*
script
)
;
void
processPendingRecompiles
(
FreeOp
*
fop
RecompileInfoVector
&
recompiles
)
;
bool
isSweepingTypes
(
)
const
{
return
sweepingTypes
;
}
void
setSweepingTypes
(
bool
sweeping
)
{
MOZ_RELEASE_ASSERT
(
sweepingTypes
!
=
sweeping
)
;
MOZ_ASSERT_IF
(
sweeping
!
oomSweepingTypes
)
;
sweepingTypes
=
sweeping
;
oomSweepingTypes
=
false
;
}
void
setOOMSweepingTypes
(
)
{
MOZ_ASSERT
(
sweepingTypes
)
;
oomSweepingTypes
=
true
;
}
bool
hadOOMSweepingTypes
(
)
{
MOZ_ASSERT
(
sweepingTypes
)
;
return
oomSweepingTypes
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
currentCompilationId
(
)
const
{
return
currentCompilationId_
.
ref
(
)
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
&
currentCompilationIdRef
(
)
{
return
currentCompilationId_
.
ref
(
)
;
}
}
;
enum
TypeSpewChannel
{
ISpewOps
ISpewResult
SPEW_COUNT
}
;
#
ifdef
DEBUG
bool
InferSpewActive
(
TypeSpewChannel
channel
)
;
const
char
*
InferSpewColorReset
(
)
;
const
char
*
InferSpewColor
(
TypeConstraint
*
constraint
)
;
const
char
*
InferSpewColor
(
TypeSet
*
types
)
;
#
define
InferSpew
(
channel
.
.
.
)
\
if
(
InferSpewActive
(
channel
)
)
{
\
InferSpewImpl
(
__VA_ARGS__
)
;
\
}
else
{
\
}
void
InferSpewImpl
(
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
1
2
)
;
bool
ObjectGroupHasProperty
(
JSContext
*
cx
ObjectGroup
*
group
jsid
id
const
Value
&
value
)
;
#
else
inline
const
char
*
InferSpewColorReset
(
)
{
return
nullptr
;
}
inline
const
char
*
InferSpewColor
(
TypeConstraint
*
constraint
)
{
return
nullptr
;
}
inline
const
char
*
InferSpewColor
(
TypeSet
*
types
)
{
return
nullptr
;
}
#
define
InferSpew
(
channel
.
.
.
)
\
do
{
\
}
while
(
0
)
#
endif
void
PrintTypes
(
JSContext
*
cx
JS
:
:
Compartment
*
comp
bool
force
)
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
ObjectGroup
>
:
TracerConcrete
<
js
:
:
ObjectGroup
>
{
protected
:
explicit
Concrete
(
js
:
:
ObjectGroup
*
ptr
)
:
TracerConcrete
<
js
:
:
ObjectGroup
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
ObjectGroup
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
