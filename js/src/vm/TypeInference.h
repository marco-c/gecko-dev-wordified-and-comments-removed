#
ifndef
vm_TypeInference_h
#
define
vm_TypeInference_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
UbiNode
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
util
/
DiagnosticAssertions
.
h
"
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
class
TypeZone
;
class
PlainObject
;
namespace
jit
{
class
IonScript
;
class
JitScript
;
class
TempAllocator
;
}
inline
bool
isInlinableCall
(
jsbytecode
*
pc
)
;
bool
ClassCanHaveExtraProperties
(
const
JSClass
*
clasp
)
;
struct
AutoEnterAnalysis
;
class
TypeZone
{
JS
:
:
Zone
*
const
zone_
;
ZoneData
<
mozilla
:
:
Maybe
<
IonCompilationId
>
>
currentCompilationId_
;
TypeZone
(
const
TypeZone
&
)
=
delete
;
void
operator
=
(
const
TypeZone
&
)
=
delete
;
public
:
ZoneData
<
bool
>
keepJitScripts
;
ZoneData
<
AutoEnterAnalysis
*
>
activeAnalysis
;
explicit
TypeZone
(
JS
:
:
Zone
*
zone
)
;
~
TypeZone
(
)
;
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
currentCompilationId
(
)
const
{
return
currentCompilationId_
.
ref
(
)
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
&
currentCompilationIdRef
(
)
{
return
currentCompilationId_
.
ref
(
)
;
}
}
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
ObjectGroup
>
:
TracerConcrete
<
js
:
:
ObjectGroup
>
{
protected
:
explicit
Concrete
(
js
:
:
ObjectGroup
*
ptr
)
:
TracerConcrete
<
js
:
:
ObjectGroup
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
ObjectGroup
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
