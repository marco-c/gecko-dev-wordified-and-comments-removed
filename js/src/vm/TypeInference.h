#
ifndef
vm_TypeInference_h
#
define
vm_TypeInference_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
js
/
UbiNode
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
util
/
DiagnosticAssertions
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
TypeSet
.
h
"
namespace
js
{
class
TypeZone
;
class
PlainObject
;
namespace
jit
{
class
IonScript
;
class
JitScript
;
class
TempAllocator
;
}
class
MOZ_RAII
AutoSweepBase
{
JS
:
:
AutoCheckCannotGC
nogc
;
}
;
class
MOZ_RAII
AutoSweepJitScript
:
public
AutoSweepBase
{
#
ifdef
DEBUG
Zone
*
zone_
;
jit
:
:
JitScript
*
jitScript_
;
#
endif
public
:
inline
explicit
AutoSweepJitScript
(
BaseScript
*
script
)
;
#
ifdef
DEBUG
inline
~
AutoSweepJitScript
(
)
;
jit
:
:
JitScript
*
jitScript
(
)
const
{
return
jitScript_
;
}
Zone
*
zone
(
)
const
{
return
zone_
;
}
#
endif
}
;
inline
bool
isInlinableCall
(
jsbytecode
*
pc
)
;
bool
ClassCanHaveExtraProperties
(
const
JSClass
*
clasp
)
;
struct
AutoEnterAnalysis
;
class
TypeZone
{
JS
:
:
Zone
*
const
zone_
;
static
const
size_t
TYPE_LIFO_ALLOC_PRIMARY_CHUNK_SIZE
=
8
*
1024
;
ZoneData
<
LifoAlloc
>
typeLifoAlloc_
;
ZoneData
<
mozilla
:
:
Maybe
<
IonCompilationId
>
>
currentCompilationId_
;
TypeZone
(
const
TypeZone
&
)
=
delete
;
void
operator
=
(
const
TypeZone
&
)
=
delete
;
public
:
ZoneOrGCTaskOrIonCompileData
<
uint32_t
>
generation
;
ZoneData
<
LifoAlloc
>
sweepTypeLifoAlloc
;
ZoneData
<
bool
>
sweepingTypes
;
ZoneData
<
bool
>
keepJitScripts
;
ZoneData
<
AutoEnterAnalysis
*
>
activeAnalysis
;
explicit
TypeZone
(
JS
:
:
Zone
*
zone
)
;
~
TypeZone
(
)
;
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
LifoAlloc
&
typeLifoAlloc
(
)
{
#
ifdef
JS_CRASH_DIAGNOSTICS
MOZ_RELEASE_ASSERT
(
CurrentThreadCanAccessZone
(
zone_
)
)
;
#
endif
return
typeLifoAlloc_
.
ref
(
)
;
}
void
beginSweep
(
)
;
void
endSweep
(
JSRuntime
*
rt
)
;
bool
isSweepingTypes
(
)
const
{
return
sweepingTypes
;
}
void
setSweepingTypes
(
bool
sweeping
)
{
MOZ_RELEASE_ASSERT
(
sweepingTypes
!
=
sweeping
)
;
sweepingTypes
=
sweeping
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
currentCompilationId
(
)
const
{
return
currentCompilationId_
.
ref
(
)
;
}
mozilla
:
:
Maybe
<
IonCompilationId
>
&
currentCompilationIdRef
(
)
{
return
currentCompilationId_
.
ref
(
)
;
}
}
;
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
ObjectGroup
>
:
TracerConcrete
<
js
:
:
ObjectGroup
>
{
protected
:
explicit
Concrete
(
js
:
:
ObjectGroup
*
ptr
)
:
TracerConcrete
<
js
:
:
ObjectGroup
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
ObjectGroup
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
;
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
}
#
endif
