#
ifndef
vm_PlainObject_inl_h
#
define
vm_PlainObject_inl_h
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
ObjectGroup
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
inline
JS
:
:
Result
<
js
:
:
PlainObject
*
JS
:
:
OOM
&
>
js
:
:
PlainObject
:
:
createWithTemplate
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
templateObject
)
{
JS
:
:
Rooted
<
ObjectGroup
*
>
group
(
cx
templateObject
-
>
group
(
)
)
;
MOZ_ASSERT
(
group
-
>
clasp
(
)
=
=
&
PlainObject
:
:
class_
)
;
gc
:
:
InitialHeap
heap
=
GetInitialHeap
(
GenericObject
group
)
;
JS
:
:
Rooted
<
Shape
*
>
shape
(
cx
templateObject
-
>
lastProperty
(
)
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectKind
(
shape
-
>
numFixedSlots
(
)
)
;
MOZ_ASSERT
(
gc
:
:
CanChangeToBackgroundAllocKind
(
kind
shape
-
>
getObjectClass
(
)
)
)
;
kind
=
gc
:
:
ForegroundToBackgroundAllocKind
(
kind
)
;
return
NativeObject
:
:
create
(
cx
kind
heap
shape
group
)
.
map
(
[
]
(
NativeObject
*
obj
)
{
return
&
obj
-
>
as
<
PlainObject
>
(
)
;
}
)
;
}
inline
js
:
:
gc
:
:
AllocKind
js
:
:
PlainObject
:
:
allocKindForTenure
(
)
const
{
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectFixedSlotsKind
(
numFixedSlots
(
)
)
;
MOZ_ASSERT
(
!
gc
:
:
IsBackgroundFinalized
(
kind
)
)
;
MOZ_ASSERT
(
gc
:
:
CanChangeToBackgroundAllocKind
(
kind
getClass
(
)
)
)
;
return
gc
:
:
ForegroundToBackgroundAllocKind
(
kind
)
;
}
namespace
js
{
static
inline
PlainObject
*
CopyInitializerObject
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
baseobj
NewObjectKind
newKind
=
GenericObject
)
{
MOZ_ASSERT
(
!
baseobj
-
>
inDictionaryMode
(
)
)
;
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectFixedSlotsKind
(
baseobj
-
>
numFixedSlots
(
)
)
;
allocKind
=
gc
:
:
ForegroundToBackgroundAllocKind
(
allocKind
)
;
MOZ_ASSERT_IF
(
baseobj
-
>
isTenured
(
)
allocKind
=
=
baseobj
-
>
asTenured
(
)
.
getAllocKind
(
)
)
;
JS
:
:
Rooted
<
PlainObject
*
>
obj
(
cx
NewBuiltinClassInstance
<
PlainObject
>
(
cx
allocKind
newKind
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
if
(
!
obj
-
>
setLastProperty
(
cx
baseobj
-
>
lastProperty
(
)
)
)
{
return
nullptr
;
}
return
obj
;
}
}
#
endif
