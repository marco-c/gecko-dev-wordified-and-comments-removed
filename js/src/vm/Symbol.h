#
ifndef
vm_Symbol_h
#
define
vm_Symbol_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdio
.
h
>
#
include
"
jsalloc
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
vm
/
String
.
h
"
namespace
js
{
class
AutoLockForExclusiveAccess
;
}
namespace
JS
{
class
Symbol
:
public
js
:
:
gc
:
:
TenuredCell
{
private
:
SymbolCode
code_
;
js
:
:
HashNumber
hash_
;
JSAtom
*
description_
;
size_t
unused_
;
Symbol
(
SymbolCode
code
js
:
:
HashNumber
hash
JSAtom
*
desc
)
:
code_
(
code
)
hash_
(
hash
)
description_
(
desc
)
{
(
void
)
unused_
;
}
Symbol
(
const
Symbol
&
)
=
delete
;
void
operator
=
(
const
Symbol
&
)
=
delete
;
static
Symbol
*
newInternal
(
js
:
:
ExclusiveContext
*
cx
SymbolCode
code
js
:
:
HashNumber
hash
JSAtom
*
description
js
:
:
AutoLockForExclusiveAccess
&
lock
)
;
public
:
static
Symbol
*
new_
(
js
:
:
ExclusiveContext
*
cx
SymbolCode
code
JSString
*
description
)
;
static
Symbol
*
for_
(
js
:
:
ExclusiveContext
*
cx
js
:
:
HandleString
description
)
;
JSAtom
*
description
(
)
const
{
return
description_
;
}
SymbolCode
code
(
)
const
{
return
code_
;
}
js
:
:
HashNumber
hash
(
)
const
{
return
hash_
;
}
bool
isWellKnownSymbol
(
)
const
{
return
uint32_t
(
code_
)
<
WellKnownSymbolLimit
;
}
static
const
JS
:
:
TraceKind
TraceKind
=
JS
:
:
TraceKind
:
:
Symbol
;
inline
void
traceChildren
(
JSTracer
*
trc
)
{
if
(
description_
)
js
:
:
TraceManuallyBarrieredEdge
(
trc
&
description_
"
description
"
)
;
}
inline
void
finalize
(
js
:
:
FreeOp
*
)
{
}
static
MOZ_ALWAYS_INLINE
void
writeBarrierPre
(
Symbol
*
thing
)
{
if
(
thing
&
&
!
thing
-
>
isWellKnownSymbol
(
)
)
thing
-
>
asTenured
(
)
.
writeBarrierPre
(
thing
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
;
}
#
ifdef
DEBUG
void
dump
(
FILE
*
fp
=
stderr
)
;
#
endif
}
;
}
namespace
js
{
struct
HashSymbolsByDescription
{
typedef
JS
:
:
Symbol
*
Key
;
typedef
JSAtom
*
Lookup
;
static
HashNumber
hash
(
Lookup
l
)
{
return
HashNumber
(
l
-
>
hash
(
)
)
;
}
static
bool
match
(
Key
sym
Lookup
l
)
{
return
sym
-
>
description
(
)
=
=
l
;
}
}
;
class
SymbolRegistry
:
public
GCHashSet
<
ReadBarrieredSymbol
HashSymbolsByDescription
SystemAllocPolicy
>
{
public
:
SymbolRegistry
(
)
{
}
}
;
}
namespace
js
{
bool
SymbolDescriptiveString
(
JSContext
*
cx
JS
:
:
Symbol
*
sym
JS
:
:
MutableHandleValue
result
)
;
bool
IsSymbolOrSymbolWrapper
(
const
JS
:
:
Value
&
v
)
;
JS
:
:
Symbol
*
ToSymbolPrimitive
(
const
JS
:
:
Value
&
v
)
;
}
#
endif
