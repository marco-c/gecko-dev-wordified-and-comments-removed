#
ifndef
vm_Compartment_inl_h
#
define
vm_Compartment_inl_h
#
include
"
vm
/
Compartment
.
h
"
#
include
<
type_traits
>
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
vm
/
Iteration
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
inline
js
:
:
StringWrapperMap
:
:
Ptr
JS
:
:
Compartment
:
:
lookupWrapper
(
JSString
*
str
)
const
{
return
zone
(
)
-
>
crossZoneStringWrappers
(
)
.
lookup
(
str
)
;
}
inline
bool
JS
:
:
Compartment
:
:
wrap
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
!
vp
.
isGCThing
(
)
)
{
return
true
;
}
if
(
vp
.
isSymbol
(
)
)
{
cx
-
>
markAtomValue
(
vp
)
;
return
true
;
}
if
(
vp
.
isString
(
)
)
{
JS
:
:
RootedString
str
(
cx
vp
.
toString
(
)
)
;
if
(
!
wrap
(
cx
&
str
)
)
{
return
false
;
}
vp
.
setString
(
str
)
;
return
true
;
}
if
(
vp
.
isBigInt
(
)
)
{
JS
:
:
RootedBigInt
bi
(
cx
vp
.
toBigInt
(
)
)
;
if
(
!
wrap
(
cx
&
bi
)
)
{
return
false
;
}
vp
.
setBigInt
(
bi
)
;
return
true
;
}
MOZ_ASSERT
(
vp
.
isObject
(
)
)
;
#
ifdef
DEBUG
JS
:
:
AssertValueIsNotGray
(
vp
)
;
JS
:
:
RootedObject
cacheResult
(
cx
)
;
#
endif
if
(
js
:
:
ObjectWrapperMap
:
:
Ptr
p
=
lookupWrapper
(
&
vp
.
toObject
(
)
)
)
{
#
ifdef
DEBUG
cacheResult
=
p
-
>
value
(
)
.
get
(
)
;
#
else
vp
.
setObject
(
*
p
-
>
value
(
)
.
get
(
)
)
;
return
true
;
#
endif
}
JS
:
:
RootedObject
obj
(
cx
&
vp
.
toObject
(
)
)
;
if
(
!
wrap
(
cx
&
obj
)
)
{
return
false
;
}
vp
.
setObject
(
*
obj
)
;
MOZ_ASSERT_IF
(
cacheResult
obj
=
=
cacheResult
)
;
return
true
;
}
inline
bool
JS
:
:
Compartment
:
:
wrap
(
JSContext
*
cx
MutableHandle
<
mozilla
:
:
Maybe
<
Value
>
>
vp
)
{
if
(
vp
.
get
(
)
.
isNothing
(
)
)
{
return
true
;
}
return
wrap
(
cx
MutableHandle
<
Value
>
:
:
fromMarkedLocation
(
vp
.
get
(
)
.
ptr
(
)
)
)
;
}
namespace
js
{
namespace
detail
{
template
<
class
T
>
const
char
*
ClassName
(
)
{
return
T
:
:
class_
.
name
;
}
template
<
class
T
class
ErrorCallback
>
MOZ_MUST_USE
T
*
UnwrapAndTypeCheckValueSlowPath
(
JSContext
*
cx
HandleValue
value
ErrorCallback
throwTypeError
)
{
JSObject
*
obj
=
nullptr
;
if
(
value
.
isObject
(
)
)
{
obj
=
&
value
.
toObject
(
)
;
if
(
IsWrapper
(
obj
)
)
{
obj
=
CheckedUnwrapStatic
(
obj
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
}
}
if
(
!
obj
|
|
!
obj
-
>
is
<
T
>
(
)
)
{
throwTypeError
(
)
;
return
nullptr
;
}
return
&
obj
-
>
as
<
T
>
(
)
;
}
}
template
<
class
T
class
ErrorCallback
>
inline
MOZ_MUST_USE
T
*
UnwrapAndTypeCheckValue
(
JSContext
*
cx
HandleValue
value
ErrorCallback
throwTypeError
)
{
static_assert
(
!
std
:
:
is_convertible_v
<
T
*
Wrapper
*
>
"
T
can
'
t
be
a
Wrapper
type
;
this
function
discards
wrappers
"
)
;
cx
-
>
check
(
value
)
;
if
(
value
.
isObject
(
)
&
&
value
.
toObject
(
)
.
is
<
T
>
(
)
)
{
return
&
value
.
toObject
(
)
.
as
<
T
>
(
)
;
}
return
detail
:
:
UnwrapAndTypeCheckValueSlowPath
<
T
>
(
cx
value
throwTypeError
)
;
}
template
<
class
T
>
inline
MOZ_MUST_USE
T
*
UnwrapAndTypeCheckThis
(
JSContext
*
cx
CallArgs
&
args
const
char
*
methodName
)
{
HandleValue
thisv
=
args
.
thisv
(
)
;
return
UnwrapAndTypeCheckValue
<
T
>
(
cx
thisv
[
cx
methodName
thisv
]
{
JS_ReportErrorNumberLatin1
(
cx
GetErrorMessage
nullptr
JSMSG_INCOMPATIBLE_PROTO
detail
:
:
ClassName
<
T
>
(
)
methodName
InformalValueTypeName
(
thisv
)
)
;
}
)
;
}
template
<
class
T
>
inline
MOZ_MUST_USE
T
*
UnwrapAndTypeCheckArgument
(
JSContext
*
cx
CallArgs
&
args
const
char
*
methodName
int
argIndex
)
{
HandleValue
val
=
args
.
get
(
argIndex
)
;
return
UnwrapAndTypeCheckValue
<
T
>
(
cx
val
[
cx
val
methodName
argIndex
]
{
ToCStringBuf
cbuf
;
if
(
char
*
numStr
=
NumberToCString
(
cx
&
cbuf
argIndex
+
1
10
)
)
{
JS_ReportErrorNumberLatin1
(
cx
GetErrorMessage
nullptr
JSMSG_WRONG_TYPE_ARG
numStr
methodName
detail
:
:
ClassName
<
T
>
(
)
InformalValueTypeName
(
val
)
)
;
}
else
{
ReportOutOfMemory
(
cx
)
;
}
}
)
;
}
template
<
class
T
>
MOZ_MUST_USE
T
*
UnwrapAndDowncastObject
(
JSContext
*
cx
JSObject
*
obj
)
{
static_assert
(
!
std
:
:
is_convertible_v
<
T
*
Wrapper
*
>
"
T
can
'
t
be
a
Wrapper
type
;
this
function
discards
wrappers
"
)
;
if
(
IsProxy
(
obj
)
)
{
if
(
JS_IsDeadWrapper
(
obj
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DEAD_OBJECT
)
;
return
nullptr
;
}
obj
=
obj
-
>
maybeUnwrapAs
<
T
>
(
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
}
return
&
obj
-
>
as
<
T
>
(
)
;
}
template
<
class
T
>
inline
MOZ_MUST_USE
T
*
UnwrapAndDowncastValue
(
JSContext
*
cx
const
Value
&
value
)
{
return
UnwrapAndDowncastObject
<
T
>
(
cx
&
value
.
toObject
(
)
)
;
}
template
<
class
T
>
inline
MOZ_MUST_USE
T
*
UnwrapInternalSlot
(
JSContext
*
cx
Handle
<
NativeObject
*
>
unwrappedObj
uint32_t
slot
)
{
static_assert
(
!
std
:
:
is_convertible_v
<
T
*
Wrapper
*
>
"
T
can
'
t
be
a
Wrapper
type
;
this
function
discards
wrappers
"
)
;
return
UnwrapAndDowncastValue
<
T
>
(
cx
unwrappedObj
-
>
getFixedSlot
(
slot
)
)
;
}
template
<
class
T
>
MOZ_MUST_USE
T
*
UnwrapCalleeSlot
(
JSContext
*
cx
CallArgs
&
args
size_t
extendedSlot
)
{
JSFunction
&
func
=
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
;
return
UnwrapAndDowncastValue
<
T
>
(
cx
func
.
getExtendedSlot
(
extendedSlot
)
)
;
}
}
#
endif
