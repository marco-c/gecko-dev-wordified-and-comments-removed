#
ifndef
vm_Compartment_inl_h
#
define
vm_Compartment_inl_h
#
include
"
vm
/
Compartment
.
h
"
#
include
<
type_traits
>
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
vm
/
Iteration
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
inline
bool
JS
:
:
Compartment
:
:
wrap
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
!
vp
.
isGCThing
(
)
)
{
return
true
;
}
if
(
vp
.
isSymbol
(
)
)
{
cx
-
>
markAtomValue
(
vp
)
;
return
true
;
}
if
(
vp
.
isString
(
)
)
{
JS
:
:
RootedString
str
(
cx
vp
.
toString
(
)
)
;
if
(
!
wrap
(
cx
&
str
)
)
{
return
false
;
}
vp
.
setString
(
str
)
;
return
true
;
}
#
ifdef
ENABLE_BIGINT
if
(
vp
.
isBigInt
(
)
)
{
JS
:
:
RootedBigInt
bi
(
cx
vp
.
toBigInt
(
)
)
;
if
(
!
wrap
(
cx
&
bi
)
)
{
return
false
;
}
vp
.
setBigInt
(
bi
)
;
return
true
;
}
#
endif
MOZ_ASSERT
(
vp
.
isObject
(
)
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
JS
:
:
ValueIsNotGray
(
vp
)
)
;
JS
:
:
RootedObject
cacheResult
(
cx
)
;
#
endif
JS
:
:
RootedValue
v
(
cx
vp
)
;
if
(
js
:
:
WrapperMap
:
:
Ptr
p
=
crossCompartmentWrappers
.
lookup
(
js
:
:
CrossCompartmentKey
(
v
)
)
)
{
#
ifdef
DEBUG
cacheResult
=
&
p
-
>
value
(
)
.
get
(
)
.
toObject
(
)
;
#
else
vp
.
set
(
p
-
>
value
(
)
.
get
(
)
)
;
return
true
;
#
endif
}
JS
:
:
RootedObject
obj
(
cx
&
vp
.
toObject
(
)
)
;
if
(
!
wrap
(
cx
&
obj
)
)
{
return
false
;
}
vp
.
setObject
(
*
obj
)
;
MOZ_ASSERT_IF
(
cacheResult
obj
=
=
cacheResult
)
;
return
true
;
}
namespace
js
{
namespace
detail
{
template
<
class
T
>
bool
UnwrapThisSlowPath
(
JSContext
*
cx
HandleValue
val
const
char
*
className
const
char
*
methodName
MutableHandle
<
T
*
>
unwrappedResult
)
{
if
(
!
val
.
isObject
(
)
)
{
JS_ReportErrorNumberLatin1
(
cx
GetErrorMessage
nullptr
JSMSG_INCOMPATIBLE_PROTO
className
methodName
InformalValueTypeName
(
val
)
)
;
return
false
;
}
JSObject
*
obj
=
&
val
.
toObject
(
)
;
if
(
IsWrapper
(
obj
)
)
{
obj
=
CheckedUnwrap
(
obj
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
false
;
}
}
if
(
!
obj
-
>
is
<
T
>
(
)
)
{
JS_ReportErrorNumberLatin1
(
cx
GetErrorMessage
nullptr
JSMSG_INCOMPATIBLE_PROTO
className
methodName
InformalValueTypeName
(
val
)
)
;
return
false
;
}
unwrappedResult
.
set
(
&
obj
-
>
as
<
T
>
(
)
)
;
return
true
;
}
}
template
<
class
T
>
inline
bool
UnwrapThisForNonGenericMethod
(
JSContext
*
cx
HandleValue
val
const
char
*
className
const
char
*
methodName
MutableHandle
<
T
*
>
unwrappedResult
)
{
static_assert
(
!
std
:
:
is_convertible
<
T
*
Wrapper
*
>
:
:
value
"
T
can
'
t
be
a
Wrapper
type
;
this
function
discards
wrappers
"
)
;
cx
-
>
check
(
val
)
;
if
(
val
.
isObject
(
)
&
&
val
.
toObject
(
)
.
is
<
T
>
(
)
)
{
unwrappedResult
.
set
(
&
val
.
toObject
(
)
.
as
<
T
>
(
)
)
;
return
true
;
}
return
detail
:
:
UnwrapThisSlowPath
(
cx
val
className
methodName
unwrappedResult
)
;
}
template
<
class
T
>
inline
bool
UnwrapThisForNonGenericMethod
(
JSContext
*
cx
HandleValue
val
const
char
*
className
const
char
*
methodName
Rooted
<
T
*
>
*
out
)
{
return
UnwrapThisForNonGenericMethod
(
cx
val
className
methodName
MutableHandle
<
T
*
>
(
out
)
)
;
}
}
#
endif
