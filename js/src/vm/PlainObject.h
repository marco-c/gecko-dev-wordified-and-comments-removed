#
ifndef
vm_PlainObject_h
#
define
vm_PlainObject_h
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Result
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSFunction
;
class
JS_PUBLIC_API
JSObject
;
namespace
js
{
struct
IdValuePair
;
class
PlainObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
private
:
#
ifdef
DEBUG
void
assertHasNoNonWritableOrAccessorPropExclProto
(
)
const
;
#
endif
static
inline
JS
:
:
Result
<
PlainObject
*
JS
:
:
OOM
>
createWithShape
(
JSContext
*
cx
JS
:
:
Handle
<
Shape
*
>
shape
)
;
public
:
static
inline
JS
:
:
Result
<
PlainObject
*
JS
:
:
OOM
>
createWithTemplate
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
templateObject
)
;
static
JS
:
:
Result
<
PlainObject
*
JS
:
:
OOM
>
createWithTemplateFromDifferentRealm
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
templateObject
)
;
inline
gc
:
:
AllocKind
allocKindForTenure
(
)
const
;
bool
hasNonWritableOrAccessorPropExclProto
(
)
const
{
if
(
hasFlag
(
ObjectFlag
:
:
HasNonWritableOrAccessorPropExclProto
)
)
{
return
true
;
}
#
ifdef
DEBUG
assertHasNoNonWritableOrAccessorPropExclProto
(
)
;
#
endif
return
false
;
}
}
;
extern
bool
CopyDataPropertiesNative
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
target
JS
:
:
Handle
<
NativeObject
*
>
from
JS
:
:
Handle
<
PlainObject
*
>
excludedItems
bool
*
optimized
)
;
extern
PlainObject
*
CreateThisForFunction
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
callee
JS
:
:
Handle
<
JSObject
*
>
newTarget
NewObjectKind
newKind
)
;
extern
PlainObject
*
NewPlainObjectWithProperties
(
JSContext
*
cx
IdValuePair
*
properties
size_t
nproperties
NewObjectKind
newKind
)
;
}
#
endif
