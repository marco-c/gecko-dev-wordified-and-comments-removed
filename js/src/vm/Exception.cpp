#
include
"
js
/
Exception
.
h
"
#
include
"
js
/
Context
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
SavedFrame
.
h
"
using
namespace
js
;
bool
JS
:
:
StealPendingExceptionStack
(
JSContext
*
cx
JS
:
:
ExceptionStack
*
exceptionStack
)
{
if
(
!
GetPendingExceptionStack
(
cx
exceptionStack
)
)
{
return
false
;
}
cx
-
>
clearPendingException
(
)
;
return
true
;
}
bool
JS
:
:
GetPendingExceptionStack
(
JSContext
*
cx
JS
:
:
ExceptionStack
*
exceptionStack
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
MOZ_ASSERT
(
exceptionStack
)
;
MOZ_ASSERT
(
cx
-
>
isExceptionPending
(
)
)
;
RootedValue
exception
(
cx
)
;
if
(
!
cx
-
>
getPendingException
(
&
exception
)
)
{
return
false
;
}
RootedObject
stack
(
cx
cx
-
>
getPendingExceptionStack
(
)
)
;
exceptionStack
-
>
init
(
exception
stack
)
;
return
true
;
}
void
JS
:
:
SetPendingExceptionStack
(
JSContext
*
cx
const
JS
:
:
ExceptionStack
&
exceptionStack
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
SavedFrame
*
>
nstack
(
cx
)
;
if
(
exceptionStack
.
stack
(
)
)
{
nstack
=
&
UncheckedUnwrap
(
exceptionStack
.
stack
(
)
)
-
>
as
<
SavedFrame
>
(
)
;
}
cx
-
>
setPendingException
(
exceptionStack
.
exception
(
)
nstack
)
;
}
