#
ifndef
vm_JSONParser_h
#
define
vm_JSONParser_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
StringType
.
h
"
namespace
js
{
enum
class
JSONToken
{
String
Number
True
False
Null
ArrayOpen
ArrayClose
ObjectOpen
ObjectClose
Colon
Comma
OOM
Error
}
;
enum
class
JSONStringType
{
PropertyName
LiteralValue
}
;
template
<
typename
CharT
typename
ParserT
typename
StringBuilderT
>
class
MOZ_STACK_CLASS
JSONTokenizer
{
public
:
using
CharPtr
=
mozilla
:
:
RangedPtr
<
const
CharT
>
;
protected
:
CharPtr
current
;
const
CharPtr
begin
end
;
ParserT
*
parser
=
nullptr
;
public
:
JSONTokenizer
(
CharPtr
current
const
CharPtr
begin
const
CharPtr
end
ParserT
*
parser
)
:
current
(
current
)
begin
(
begin
)
end
(
end
)
parser
(
parser
)
{
MOZ_ASSERT
(
current
<
=
end
)
;
MOZ_ASSERT
(
parser
)
;
}
explicit
JSONTokenizer
(
mozilla
:
:
Range
<
const
CharT
>
data
ParserT
*
parser
)
:
JSONTokenizer
(
data
.
begin
(
)
data
.
begin
(
)
data
.
end
(
)
parser
)
{
}
JSONTokenizer
(
JSONTokenizer
<
CharT
ParserT
StringBuilderT
>
&
&
other
)
noexcept
:
JSONTokenizer
(
other
.
current
other
.
begin
other
.
end
other
.
parser
)
{
}
JSONTokenizer
(
const
JSONTokenizer
<
CharT
ParserT
StringBuilderT
>
&
other
)
=
delete
;
void
operator
=
(
const
JSONTokenizer
<
CharT
ParserT
StringBuilderT
>
&
other
)
=
delete
;
void
fixupParser
(
ParserT
*
newParser
)
{
parser
=
newParser
;
}
void
getTextPosition
(
uint32_t
*
column
uint32_t
*
line
)
;
bool
consumeTrailingWhitespaces
(
)
;
JSONToken
advance
(
)
;
JSONToken
advancePropertyName
(
)
;
JSONToken
advancePropertyColon
(
)
;
JSONToken
advanceAfterProperty
(
)
;
JSONToken
advanceAfterObjectOpen
(
)
;
JSONToken
advanceAfterArrayElement
(
)
;
void
unget
(
)
{
-
-
current
;
}
#
ifdef
DEBUG
bool
finished
(
)
{
return
end
=
=
current
;
}
#
endif
JSONToken
token
(
JSONToken
t
)
{
MOZ_ASSERT
(
t
!
=
JSONToken
:
:
String
)
;
MOZ_ASSERT
(
t
!
=
JSONToken
:
:
Number
)
;
return
t
;
}
template
<
JSONStringType
ST
>
JSONToken
stringToken
(
const
CharPtr
start
size_t
length
)
;
template
<
JSONStringType
ST
>
JSONToken
stringToken
(
StringBuilderT
&
builder
)
;
JSONToken
numberToken
(
double
d
)
;
template
<
JSONStringType
ST
>
JSONToken
readString
(
)
;
JSONToken
readNumber
(
)
;
void
error
(
const
char
*
msg
)
;
}
;
enum
class
JSONParserState
{
FinishArrayElement
FinishObjectMember
JSONValue
}
;
class
MOZ_STACK_CLASS
JSONFullParseHandlerAnyChar
{
public
:
enum
class
ParseType
{
JSONParse
AttemptForEval
}
;
public
:
JSContext
*
cx
;
Value
v
;
protected
:
const
ParseType
parseType
;
public
:
typedef
GCVector
<
Value
20
>
ElementVector
;
typedef
GCVector
<
IdValuePair
10
>
PropertyVector
;
struct
StackEntry
{
ElementVector
&
elements
(
)
{
MOZ_ASSERT
(
state
=
=
JSONParserState
:
:
FinishArrayElement
)
;
return
*
static_cast
<
ElementVector
*
>
(
vector
)
;
}
PropertyVector
&
properties
(
)
{
MOZ_ASSERT
(
state
=
=
JSONParserState
:
:
FinishObjectMember
)
;
return
*
static_cast
<
PropertyVector
*
>
(
vector
)
;
}
explicit
StackEntry
(
ElementVector
*
elements
)
:
state
(
JSONParserState
:
:
FinishArrayElement
)
vector
(
elements
)
{
}
explicit
StackEntry
(
PropertyVector
*
properties
)
:
state
(
JSONParserState
:
:
FinishObjectMember
)
vector
(
properties
)
{
}
JSONParserState
state
;
private
:
void
*
vector
;
}
;
private
:
Vector
<
ElementVector
*
5
>
freeElements
;
Vector
<
PropertyVector
*
5
>
freeProperties
;
public
:
JSONFullParseHandlerAnyChar
(
JSContext
*
cx
ParseType
parseType
)
:
cx
(
cx
)
parseType
(
parseType
)
freeElements
(
cx
)
freeProperties
(
cx
)
{
}
~
JSONFullParseHandlerAnyChar
(
)
;
JSONFullParseHandlerAnyChar
(
JSONFullParseHandlerAnyChar
&
&
other
)
noexcept
:
cx
(
other
.
cx
)
v
(
other
.
v
)
parseType
(
other
.
parseType
)
freeElements
(
std
:
:
move
(
other
.
freeElements
)
)
freeProperties
(
std
:
:
move
(
other
.
freeProperties
)
)
{
}
JSONFullParseHandlerAnyChar
(
const
JSONFullParseHandlerAnyChar
&
other
)
=
delete
;
void
operator
=
(
const
JSONFullParseHandlerAnyChar
&
other
)
=
delete
;
Value
numberValue
(
)
const
{
MOZ_ASSERT
(
v
.
isNumber
(
)
)
;
return
v
;
}
inline
void
setNumberValue
(
double
d
)
;
Value
stringValue
(
)
const
{
MOZ_ASSERT
(
v
.
isString
(
)
)
;
return
v
;
}
JSAtom
*
atomValue
(
)
const
{
Value
strval
=
stringValue
(
)
;
return
&
strval
.
toString
(
)
-
>
asAtom
(
)
;
}
inline
Value
booleanValue
(
bool
value
)
{
return
JS
:
:
BooleanValue
(
value
)
;
}
inline
Value
nullValue
(
)
{
return
JS
:
:
NullValue
(
)
;
}
inline
bool
objectOpen
(
Vector
<
StackEntry
10
>
&
stack
PropertyVector
*
*
properties
)
;
inline
bool
objectPropertyName
(
Vector
<
StackEntry
10
>
&
stack
bool
*
isProtoInEval
)
;
inline
void
finishObjectMember
(
Vector
<
StackEntry
10
>
&
stack
JS
:
:
Handle
<
JS
:
:
Value
>
value
PropertyVector
*
*
properties
)
;
inline
bool
finishObject
(
Vector
<
StackEntry
10
>
&
stack
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
PropertyVector
&
properties
)
;
inline
bool
arrayOpen
(
Vector
<
StackEntry
10
>
&
stack
ElementVector
*
*
elements
)
;
inline
bool
arrayElement
(
Vector
<
StackEntry
10
>
&
stack
JS
:
:
Handle
<
JS
:
:
Value
>
value
ElementVector
*
*
elements
)
;
inline
bool
finishArray
(
Vector
<
StackEntry
10
>
&
stack
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
ElementVector
&
elements
)
;
inline
bool
errorReturn
(
)
const
{
return
parseType
=
=
ParseType
:
:
AttemptForEval
;
}
inline
bool
ignoreError
(
)
const
{
return
parseType
=
=
ParseType
:
:
AttemptForEval
;
}
inline
void
freeStackEntry
(
StackEntry
&
entry
)
;
void
trace
(
JSTracer
*
trc
)
;
}
;
template
<
typename
CharT
>
class
MOZ_STACK_CLASS
JSONFullParseHandler
:
public
JSONFullParseHandlerAnyChar
{
using
Base
=
JSONFullParseHandlerAnyChar
;
using
CharPtr
=
mozilla
:
:
RangedPtr
<
const
CharT
>
;
public
:
class
StringBuilder
{
public
:
JSStringBuilder
buffer
;
explicit
StringBuilder
(
JSContext
*
cx
)
:
buffer
(
cx
)
{
}
bool
append
(
char16_t
c
)
;
bool
append
(
const
CharT
*
begin
const
CharT
*
end
)
;
}
;
JSONFullParseHandler
(
JSContext
*
cx
ParseType
parseType
)
:
Base
(
cx
parseType
)
{
}
JSONFullParseHandler
(
JSONFullParseHandler
&
&
other
)
noexcept
:
Base
(
std
:
:
move
(
other
)
)
{
}
JSONFullParseHandler
(
const
JSONFullParseHandler
&
other
)
=
delete
;
void
operator
=
(
const
JSONFullParseHandler
&
other
)
=
delete
;
template
<
JSONStringType
ST
>
inline
bool
setStringValue
(
CharPtr
start
size_t
length
)
;
template
<
JSONStringType
ST
>
inline
bool
setStringValue
(
StringBuilder
&
builder
)
;
void
reportError
(
const
char
*
msg
const
char
*
lineString
const
char
*
columnString
)
;
}
;
template
<
typename
CharT
>
class
MOZ_STACK_CLASS
JSONParser
{
using
Handler
=
JSONFullParseHandler
<
CharT
>
;
public
:
using
StringBuilder
=
typename
Handler
:
:
StringBuilder
;
private
:
using
Tokenizer
=
JSONTokenizer
<
CharT
JSONParser
<
CharT
>
StringBuilder
>
;
public
:
Handler
handler
;
Tokenizer
tokenizer
;
Vector
<
typename
Handler
:
:
StackEntry
10
>
stack
;
public
:
using
ParseType
=
JSONFullParseHandlerAnyChar
:
:
ParseType
;
JSONParser
(
JSContext
*
cx
mozilla
:
:
Range
<
const
CharT
>
data
ParseType
parseType
)
:
handler
(
cx
parseType
)
tokenizer
(
data
this
)
stack
(
cx
)
{
}
JSONParser
(
JSONParser
&
&
other
)
:
handler
(
std
:
:
move
(
other
.
handler
)
)
tokenizer
(
std
:
:
move
(
other
.
tokenizer
)
)
stack
(
std
:
:
move
(
other
.
stack
)
)
{
tokenizer
.
fixupParser
(
this
)
;
}
~
JSONParser
(
)
;
bool
parse
(
MutableHandleValue
vp
)
;
void
trace
(
JSTracer
*
trc
)
;
void
outOfMemory
(
)
;
void
error
(
const
char
*
msg
)
;
private
:
JSONParser
(
const
JSONParser
&
other
)
=
delete
;
void
operator
=
(
const
JSONParser
&
other
)
=
delete
;
}
;
template
<
typename
CharT
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
JSONParser
<
CharT
>
Wrapper
>
:
public
WrappedPtrOperations
<
JSONParser
<
CharT
>
Wrapper
>
{
public
:
bool
parse
(
MutableHandleValue
vp
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
.
parse
(
vp
)
;
}
}
;
}
#
endif
