#
include
"
js
/
Warnings
.
h
"
#
include
"
vm
/
Warnings
.
h
"
#
include
<
stdarg
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
vm
/
JSContext
.
h
"
using
js
:
:
ArgumentsAreASCII
;
using
js
:
:
ArgumentsAreLatin1
;
using
js
:
:
ArgumentsAreUTF8
;
using
js
:
:
AssertHeapIsIdle
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
ReportErrorVA
;
JS_PUBLIC_API
bool
JS
:
:
WarnASCII
(
JSContext
*
cx
const
char
*
format
.
.
.
)
{
va_list
ap
;
bool
ok
;
AssertHeapIsIdle
(
)
;
va_start
(
ap
format
)
;
ok
=
ReportErrorVA
(
cx
JSREPORT_WARNING
format
ArgumentsAreASCII
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
JS_PUBLIC_API
bool
JS
:
:
WarnLatin1
(
JSContext
*
cx
const
char
*
format
.
.
.
)
{
va_list
ap
;
bool
ok
;
AssertHeapIsIdle
(
)
;
va_start
(
ap
format
)
;
ok
=
ReportErrorVA
(
cx
JSREPORT_WARNING
format
ArgumentsAreLatin1
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
JS_PUBLIC_API
bool
JS
:
:
WarnUTF8
(
JSContext
*
cx
const
char
*
format
.
.
.
)
{
va_list
ap
;
bool
ok
;
AssertHeapIsIdle
(
)
;
va_start
(
ap
format
)
;
ok
=
ReportErrorVA
(
cx
JSREPORT_WARNING
format
ArgumentsAreUTF8
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
JS_PUBLIC_API
JS
:
:
WarningReporter
JS
:
:
GetWarningReporter
(
JSContext
*
cx
)
{
return
cx
-
>
runtime
(
)
-
>
warningReporter
;
}
JS_PUBLIC_API
JS
:
:
WarningReporter
JS
:
:
SetWarningReporter
(
JSContext
*
cx
WarningReporter
reporter
)
{
WarningReporter
older
=
cx
-
>
runtime
(
)
-
>
warningReporter
;
cx
-
>
runtime
(
)
-
>
warningReporter
=
reporter
;
return
older
;
}
bool
js
:
:
WarnNumberASCII
(
JSContext
*
cx
const
unsigned
errorNumber
.
.
.
)
{
va_list
ap
;
va_start
(
ap
errorNumber
)
;
bool
ok
=
ReportErrorNumberVA
(
cx
JSREPORT_WARNING
GetErrorMessage
nullptr
errorNumber
ArgumentsAreASCII
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
bool
js
:
:
WarnNumberLatin1
(
JSContext
*
cx
const
unsigned
errorNumber
.
.
.
)
{
va_list
ap
;
va_start
(
ap
errorNumber
)
;
bool
ok
=
ReportErrorNumberVA
(
cx
JSREPORT_WARNING
GetErrorMessage
nullptr
errorNumber
ArgumentsAreLatin1
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
bool
js
:
:
WarnNumberUTF8
(
JSContext
*
cx
const
unsigned
errorNumber
.
.
.
)
{
va_list
ap
;
va_start
(
ap
errorNumber
)
;
bool
ok
=
ReportErrorNumberVA
(
cx
JSREPORT_WARNING
GetErrorMessage
nullptr
errorNumber
ArgumentsAreUTF8
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
bool
js
:
:
WarnNumberUC
(
JSContext
*
cx
const
unsigned
errorNumber
.
.
.
)
{
va_list
ap
;
va_start
(
ap
errorNumber
)
;
bool
ok
=
ReportErrorNumberVA
(
cx
JSREPORT_WARNING
GetErrorMessage
nullptr
errorNumber
ArgumentsAreUnicode
ap
)
;
va_end
(
ap
)
;
return
ok
;
}
