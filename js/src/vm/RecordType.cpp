#
include
"
vm
/
RecordType
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
static
bool
RecordConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
const
JSClass
RecordType
:
:
class_
=
{
"
record
"
0
JS_NULL_CLASS_OPS
&
RecordType
:
:
classSpec_
}
;
const
ClassSpec
RecordType
:
:
classSpec_
=
{
GenericCreateConstructor
<
RecordConstructor
1
gc
:
:
AllocKind
:
:
FUNCTION
>
nullptr
nullptr
nullptr
nullptr
nullptr
}
;
RecordType
*
RecordType
:
:
create
(
JSContext
*
cx
)
{
Rooted
<
TaggedProto
>
proto
(
cx
TaggedProto
(
nullptr
)
)
;
return
NewObjectWithGivenTaggedProto
<
RecordType
>
(
cx
proto
)
;
}
bool
RecordType
:
:
sameValueZero
(
JSContext
*
cx
RecordType
*
lhs
RecordType
*
rhs
bool
*
equal
)
{
MOZ_CRASH
(
"
Unsupported
"
)
;
return
false
;
}
bool
RecordType
:
:
sameValue
(
JSContext
*
cx
RecordType
*
lhs
RecordType
*
rhs
bool
*
equal
)
{
MOZ_CRASH
(
"
Unsupported
"
)
;
return
false
;
}
static
bool
RecordConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
args
.
isConstructing
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_CONSTRUCTOR
"
Record
"
)
;
return
false
;
}
if
(
args
.
length
(
)
>
0
)
{
MOZ_CRASH
(
"
Only
empty
records
are
supoprted
.
"
)
;
return
false
;
}
RecordType
*
rec
=
RecordType
:
:
create
(
cx
)
;
if
(
!
rec
)
{
return
false
;
}
args
.
rval
(
)
.
setExtendedPrimitive
(
*
rec
)
;
return
true
;
}
