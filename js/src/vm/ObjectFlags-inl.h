#
ifndef
vm_ObjectFlags_inl_h
#
define
vm_ObjectFlags_inl_h
#
include
"
vm
/
ObjectFlags
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
PropertyInfo
.
h
"
#
include
"
vm
/
PropertyKey
.
h
"
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
MOZ_ALWAYS_INLINE
ObjectFlags
GetObjectFlagsForNewProperty
(
const
JSClass
*
clasp
ObjectFlags
flags
jsid
id
PropertyFlags
propFlags
JSContext
*
cx
)
{
uint32_t
index
;
if
(
IdIsIndex
(
id
&
index
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
Indexed
)
;
}
else
if
(
JSID_IS_SYMBOL
(
id
)
&
&
JSID_TO_SYMBOL
(
id
)
-
>
isInterestingSymbol
(
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
HasInterestingSymbol
)
;
}
if
(
(
!
propFlags
.
isDataProperty
(
)
|
|
!
propFlags
.
writable
(
)
)
&
&
clasp
=
=
&
PlainObject
:
:
class_
&
&
!
id
.
isAtom
(
cx
-
>
names
(
)
.
proto
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
HasNonWritableOrAccessorPropExclProto
)
;
}
return
flags
;
}
MOZ_ALWAYS_INLINE
ObjectFlags
GetObjectFlagsForNewProperty
(
Shape
*
last
jsid
id
PropertyFlags
propFlags
JSContext
*
cx
)
{
ObjectFlags
flags
=
last
-
>
objectFlags
(
)
;
const
JSClass
*
clasp
=
last
-
>
getObjectClass
(
)
;
return
GetObjectFlagsForNewProperty
(
clasp
flags
id
propFlags
cx
)
;
}
}
#
endif
