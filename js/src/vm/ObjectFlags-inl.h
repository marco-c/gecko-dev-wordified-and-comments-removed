#
ifndef
vm_ObjectFlags_inl_h
#
define
vm_ObjectFlags_inl_h
#
include
"
vm
/
ObjectFlags
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
PropertyInfo
.
h
"
namespace
js
{
MOZ_ALWAYS_INLINE
ObjectFlags
GetObjectFlagsForNewProperty
(
const
JSClass
*
clasp
ObjectFlags
flags
jsid
id
PropertyFlags
propFlags
JSContext
*
cx
)
{
uint32_t
index
;
if
(
IdIsIndex
(
id
&
index
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
Indexed
)
;
}
else
if
(
id
.
isSymbol
(
)
&
&
id
.
toSymbol
(
)
-
>
isInterestingSymbol
(
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
HasInterestingSymbol
)
;
}
if
(
(
!
propFlags
.
isDataProperty
(
)
|
|
!
propFlags
.
writable
(
)
)
&
&
clasp
=
=
&
PlainObject
:
:
class_
&
&
!
id
.
isAtom
(
cx
-
>
names
(
)
.
proto
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
HasNonWritableOrAccessorPropExclProto
)
;
}
if
(
!
propFlags
.
configurable
(
)
)
{
MOZ_ASSERT
(
clasp
-
>
isNativeObject
(
)
)
;
if
(
propFlags
.
isDataProperty
(
)
&
&
!
propFlags
.
writable
(
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
NeedsProxyGetSetResultValidation
)
;
}
else
if
(
propFlags
.
hasGetter
(
)
!
=
propFlags
.
hasSetter
(
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
NeedsProxyGetSetResultValidation
)
;
}
}
if
(
propFlags
.
enumerable
(
)
)
{
flags
.
setFlag
(
ObjectFlag
:
:
HasEnumerable
)
;
}
return
flags
;
}
inline
ObjectFlags
CopyPropMapObjectFlags
(
ObjectFlags
dest
ObjectFlags
source
)
{
if
(
source
.
hasFlag
(
ObjectFlag
:
:
Indexed
)
)
{
dest
.
setFlag
(
ObjectFlag
:
:
Indexed
)
;
}
if
(
source
.
hasFlag
(
ObjectFlag
:
:
HasInterestingSymbol
)
)
{
dest
.
setFlag
(
ObjectFlag
:
:
HasInterestingSymbol
)
;
}
if
(
source
.
hasFlag
(
ObjectFlag
:
:
HasNonWritableOrAccessorPropExclProto
)
)
{
dest
.
setFlag
(
ObjectFlag
:
:
HasNonWritableOrAccessorPropExclProto
)
;
}
return
dest
;
}
}
#
endif
