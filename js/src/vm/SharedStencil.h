#
ifndef
vm_SharedStencil_h
#
define
vm_SharedStencil_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
namespace
js
{
class
BaseScript
;
template
<
typename
EnumType
>
class
ScriptFlagBase
{
friend
class
js
:
:
BaseScript
;
protected
:
uint32_t
flags_
=
0
;
public
:
MOZ_MUST_USE
bool
hasFlag
(
EnumType
flag
)
const
{
return
flags_
&
static_cast
<
uint32_t
>
(
flag
)
;
}
void
setFlag
(
EnumType
flag
)
{
flags_
|
=
static_cast
<
uint32_t
>
(
flag
)
;
}
void
clearFlag
(
EnumType
flag
)
{
flags_
&
=
~
static_cast
<
uint32_t
>
(
flag
)
;
}
void
setFlag
(
EnumType
flag
bool
b
)
{
if
(
b
)
{
setFlag
(
flag
)
;
}
else
{
clearFlag
(
flag
)
;
}
}
operator
uint32_t
(
)
const
{
return
flags_
;
}
}
;
enum
class
ImmutableScriptFlagsEnum
:
uint32_t
{
NoScriptRval
=
1
<
<
0
SelfHosted
=
1
<
<
1
TreatAsRunOnce
=
1
<
<
2
ForceStrict
=
1
<
<
3
Strict
=
1
<
<
4
HasNonSyntacticScope
=
1
<
<
5
BindingsAccessedDynamically
=
1
<
<
6
FunHasExtensibleScope
=
1
<
<
7
HasCallSiteObj
=
1
<
<
8
HasModuleGoal
=
1
<
<
9
FunctionHasThisBinding
=
1
<
<
10
FunctionHasExtraBodyVarScope
=
1
<
<
11
HasMappedArgsObj
=
1
<
<
12
HasInnerFunctions
=
1
<
<
13
NeedsHomeObject
=
1
<
<
14
IsDerivedClassConstructor
=
1
<
<
15
IsLikelyConstructorWrapper
=
1
<
<
16
IsGenerator
=
1
<
<
17
IsAsync
=
1
<
<
18
HasRest
=
1
<
<
19
ArgumentsHasVarBinding
=
1
<
<
20
IsForEval
=
1
<
<
21
IsModule
=
1
<
<
22
NeedsFunctionEnvironmentObjects
=
1
<
<
23
ShouldDeclareArguments
=
1
<
<
24
IsFunction
=
1
<
<
25
HasDirectEval
=
1
<
<
26
}
;
class
ImmutableScriptFlags
:
public
ScriptFlagBase
<
ImmutableScriptFlagsEnum
>
{
public
:
ImmutableScriptFlags
(
)
=
default
;
void
static_asserts
(
)
{
static_assert
(
sizeof
(
ImmutableScriptFlags
)
=
=
sizeof
(
flags_
)
"
No
extra
members
allowed
"
)
;
static_assert
(
offsetof
(
ImmutableScriptFlags
flags_
)
=
=
0
"
Required
for
JIT
flag
access
"
)
;
}
void
operator
=
(
uint32_t
flag
)
{
flags_
=
flag
;
}
static
ImmutableScriptFlags
fromCompileOptions
(
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
{
ImmutableScriptFlags
isf
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
NoScriptRval
options
.
noScriptRval
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
SelfHosted
options
.
selfHostingMode
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
TreatAsRunOnce
options
.
isRunOnce
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
ForceStrict
options
.
forceStrictMode
(
)
)
;
return
isf
;
}
;
static
ImmutableScriptFlags
fromCompileOptions
(
const
JS
:
:
TransitiveCompileOptions
&
options
)
{
ImmutableScriptFlags
isf
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
NoScriptRval
false
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
SelfHosted
options
.
selfHostingMode
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
TreatAsRunOnce
false
)
;
isf
.
setFlag
(
ImmutableScriptFlagsEnum
:
:
ForceStrict
options
.
forceStrictMode
(
)
)
;
return
isf
;
}
;
}
;
enum
class
MutableScriptFlagsEnum
:
uint32_t
{
WarmupResets_MASK
=
0xFF
HasRunOnce
=
1
<
<
9
HasBeenCloned
=
1
<
<
10
HasScriptCounts
=
1
<
<
12
HasDebugScript
=
1
<
<
13
AllowRelazify
=
1
<
<
14
FailedBoundsCheck
=
1
<
<
15
FailedShapeGuard
=
1
<
<
16
HadFrequentBailouts
=
1
<
<
17
HadOverflowBailout
=
1
<
<
18
BaselineDisabled
=
1
<
<
19
IonDisabled
=
1
<
<
20
Uninlineable
=
1
<
<
21
InvalidatedIdempotentCache
=
1
<
<
22
FailedLexicalCheck
=
1
<
<
23
NeedsArgsAnalysis
=
1
<
<
24
NeedsArgsObj
=
1
<
<
25
HideScriptFromDebugger
=
1
<
<
26
SpewEnabled
=
1
<
<
27
IsLazyScript
=
1
<
<
28
}
;
class
MutableScriptFlags
:
public
ScriptFlagBase
<
MutableScriptFlagsEnum
>
{
public
:
MutableScriptFlags
(
)
=
default
;
void
static_asserts
(
)
{
static_assert
(
sizeof
(
MutableScriptFlags
)
=
=
sizeof
(
flags_
)
"
No
extra
members
allowed
"
)
;
static_assert
(
offsetof
(
MutableScriptFlags
flags_
)
=
=
0
"
Required
for
JIT
flag
access
"
)
;
}
MutableScriptFlags
&
operator
&
=
(
const
uint32_t
rhs
)
{
flags_
&
=
rhs
;
return
*
this
;
}
MutableScriptFlags
&
operator
|
=
(
const
uint32_t
rhs
)
{
flags_
|
=
rhs
;
return
*
this
;
}
}
;
}
#
endif
