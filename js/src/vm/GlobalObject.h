#
ifndef
vm_GlobalObject_h
#
define
vm_GlobalObject_h
#
include
"
js
/
GlobalObject
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
"
jsexn
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
ScalarType
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
StringType
.
h
"
struct
JSFunctionSpec
;
class
JSJitInfo
;
struct
JSPrincipals
;
struct
JSPropertySpec
;
namespace
JS
{
class
JS_PUBLIC_API
RealmOptions
;
}
;
namespace
js
{
class
ArgumentsObject
;
class
GlobalScope
;
class
GlobalLexicalEnvironmentObject
;
class
PlainObject
;
class
PropertyIteratorObject
;
class
RegExpStatics
;
namespace
gc
{
class
FinalizationRegistryGlobalData
;
}
enum
class
PlainObjectSlotsKind
{
Slots0
Slots2
Slots4
Slots8
Slots12
Slots16
Limit
}
;
static
PlainObjectSlotsKind
PlainObjectSlotsKindFromAllocKind
(
gc
:
:
AllocKind
kind
)
{
switch
(
kind
)
{
case
gc
:
:
AllocKind
:
:
OBJECT0
:
return
PlainObjectSlotsKind
:
:
Slots0
;
case
gc
:
:
AllocKind
:
:
OBJECT2
:
return
PlainObjectSlotsKind
:
:
Slots2
;
case
gc
:
:
AllocKind
:
:
OBJECT4
:
return
PlainObjectSlotsKind
:
:
Slots4
;
case
gc
:
:
AllocKind
:
:
OBJECT8
:
return
PlainObjectSlotsKind
:
:
Slots8
;
case
gc
:
:
AllocKind
:
:
OBJECT12
:
return
PlainObjectSlotsKind
:
:
Slots12
;
case
gc
:
:
AllocKind
:
:
OBJECT16
:
return
PlainObjectSlotsKind
:
:
Slots16
;
default
:
break
;
}
MOZ_CRASH
(
"
Invalid
kind
"
)
;
}
class
GlobalObjectData
{
friend
class
js
:
:
GlobalObject
;
GlobalObjectData
(
const
GlobalObjectData
&
)
=
delete
;
void
operator
=
(
const
GlobalObjectData
&
)
=
delete
;
public
:
explicit
GlobalObjectData
(
Zone
*
zone
)
;
using
VarNamesSet
=
GCHashSet
<
HeapPtr
<
JSAtom
*
>
DefaultHasher
<
JSAtom
*
>
CellAllocPolicy
>
;
VarNamesSet
varNames
;
struct
ConstructorWithProto
{
HeapPtr
<
JSObject
*
>
constructor
;
HeapPtr
<
JSObject
*
>
prototype
;
}
;
using
CtorArray
=
mozilla
:
:
EnumeratedArray
<
JSProtoKey
JSProto_LIMIT
ConstructorWithProto
>
;
CtorArray
builtinConstructors
;
enum
class
ProtoKind
{
IteratorProto
ArrayIteratorProto
StringIteratorProto
RegExpStringIteratorProto
GeneratorObjectProto
AsyncIteratorProto
AsyncFromSyncIteratorProto
AsyncGeneratorProto
MapIteratorProto
SetIteratorProto
WrapForValidIteratorProto
IteratorHelperProto
AsyncIteratorHelperProto
ModuleProto
ImportEntryProto
ExportEntryProto
RequestedModuleProto
ModuleRequestProto
Limit
}
;
using
ProtoArray
=
mozilla
:
:
EnumeratedArray
<
ProtoKind
ProtoKind
:
:
Limit
HeapPtr
<
JSObject
*
>
>
;
ProtoArray
builtinProtos
;
HeapPtr
<
GlobalScope
*
>
emptyGlobalScope
;
HeapPtr
<
GlobalLexicalEnvironmentObject
*
>
lexicalEnvironment
;
HeapPtr
<
JSObject
*
>
windowProxy
;
HeapPtr
<
NativeObject
*
>
intrinsicsHolder
;
HeapPtr
<
NativeObject
*
>
computedIntrinsicsHolder
;
HeapPtr
<
NativeObject
*
>
forOfPICChain
;
HeapPtr
<
ArrayObject
*
>
sourceURLsHolder
;
HeapPtr
<
PlainObject
*
>
realmKeyObject
;
HeapPtr
<
JSFunction
*
>
throwTypeError
;
HeapPtr
<
JSFunction
*
>
eval
;
HeapPtr
<
PropertyIteratorObject
*
>
emptyIterator
;
HeapPtr
<
Shape
*
>
arrayShapeWithDefaultProto
;
using
PlainObjectShapeArray
=
mozilla
:
:
EnumeratedArray
<
PlainObjectSlotsKind
PlainObjectSlotsKind
:
:
Limit
HeapPtr
<
Shape
*
>
>
;
PlainObjectShapeArray
plainObjectShapesWithDefaultProto
;
HeapPtr
<
Shape
*
>
functionShapeWithDefaultProto
;
HeapPtr
<
Shape
*
>
extendedFunctionShapeWithDefaultProto
;
UniquePtr
<
RegExpStatics
>
regExpStatics
;
HeapPtr
<
ArgumentsObject
*
>
mappedArgumentsTemplate
;
HeapPtr
<
ArgumentsObject
*
>
unmappedArgumentsTemplate
;
HeapPtr
<
PlainObject
*
>
iterResultTemplate
;
HeapPtr
<
PlainObject
*
>
iterResultWithoutPrototypeTemplate
;
HeapPtr
<
ScriptSourceObject
*
>
selfHostingScriptSource
;
UniquePtr
<
gc
:
:
FinalizationRegistryGlobalData
>
finalizationRegistryData
;
bool
globalThisResolved
=
false
;
void
trace
(
JSTracer
*
trc
GlobalObject
*
global
)
;
void
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
JS
:
:
ClassInfo
*
info
)
const
;
static
constexpr
size_t
offsetOfLexicalEnvironment
(
)
{
static_assert
(
sizeof
(
lexicalEnvironment
)
=
=
sizeof
(
uintptr_t
)
"
JIT
code
assumes
field
is
pointer
-
sized
"
)
;
return
offsetof
(
GlobalObjectData
lexicalEnvironment
)
;
}
}
;
class
GlobalObject
:
public
NativeObject
{
enum
:
unsigned
{
GLOBAL_DATA_SLOT
=
JSCLASS_GLOBAL_APPLICATION_SLOTS
RESERVED_SLOTS
}
;
static_assert
(
JSCLASS_GLOBAL_SLOT_COUNT
=
=
RESERVED_SLOTS
"
global
object
slot
counts
are
inconsistent
"
)
;
static_assert
(
GLOBAL_DATA_SLOT
<
MAX_FIXED_SLOTS
"
GlobalObjectData
should
be
stored
in
a
fixed
slot
for
"
"
performance
reasons
"
)
;
using
ProtoKind
=
GlobalObjectData
:
:
ProtoKind
;
GlobalObjectData
*
maybeData
(
)
{
Value
v
=
getReservedSlot
(
GLOBAL_DATA_SLOT
)
;
return
static_cast
<
GlobalObjectData
*
>
(
v
.
toPrivate
(
)
)
;
}
const
GlobalObjectData
*
maybeData
(
)
const
{
Value
v
=
getReservedSlot
(
GLOBAL_DATA_SLOT
)
;
return
static_cast
<
const
GlobalObjectData
*
>
(
v
.
toPrivate
(
)
)
;
}
GlobalObjectData
&
data
(
)
{
return
*
maybeData
(
)
;
}
const
GlobalObjectData
&
data
(
)
const
{
return
*
maybeData
(
)
;
}
void
initBuiltinProto
(
ProtoKind
kind
JSObject
*
proto
)
{
MOZ_ASSERT
(
proto
)
;
data
(
)
.
builtinProtos
[
kind
]
.
init
(
proto
)
;
}
bool
hasBuiltinProto
(
ProtoKind
kind
)
const
{
return
bool
(
data
(
)
.
builtinProtos
[
kind
]
)
;
}
JSObject
*
maybeBuiltinProto
(
ProtoKind
kind
)
const
{
return
data
(
)
.
builtinProtos
[
kind
]
;
}
JSObject
&
getBuiltinProto
(
ProtoKind
kind
)
const
{
MOZ_ASSERT
(
hasBuiltinProto
(
kind
)
)
;
return
*
data
(
)
.
builtinProtos
[
kind
]
;
}
public
:
GlobalLexicalEnvironmentObject
&
lexicalEnvironment
(
)
{
return
*
data
(
)
.
lexicalEnvironment
;
}
GlobalScope
&
emptyGlobalScope
(
)
const
;
void
traceData
(
JSTracer
*
trc
GlobalObject
*
global
)
{
data
(
)
.
trace
(
trc
global
)
;
}
void
releaseData
(
JS
:
:
GCContext
*
gcx
)
;
void
addSizeOfData
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
JS
:
:
ClassInfo
*
info
)
const
{
if
(
maybeData
(
)
)
{
data
(
)
.
addSizeOfIncludingThis
(
mallocSizeOf
info
)
;
}
}
void
setOriginalEval
(
JSFunction
*
evalFun
)
{
MOZ_ASSERT
(
!
data
(
)
.
eval
)
;
data
(
)
.
eval
.
init
(
evalFun
)
;
}
bool
hasConstructor
(
JSProtoKey
key
)
const
{
return
bool
(
data
(
)
.
builtinConstructors
[
key
]
.
constructor
)
;
}
JSObject
&
getConstructor
(
JSProtoKey
key
)
const
{
MOZ_ASSERT
(
hasConstructor
(
key
)
)
;
return
*
maybeGetConstructor
(
key
)
;
}
static
bool
skipDeselectedConstructor
(
JSContext
*
cx
JSProtoKey
key
)
;
private
:
enum
class
IfClassIsDisabled
{
DoNothing
Throw
}
;
static
bool
resolveConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
IfClassIsDisabled
mode
)
;
public
:
static
bool
ensureConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
)
{
if
(
global
-
>
isStandardClassResolved
(
key
)
)
{
return
true
;
}
return
resolveConstructor
(
cx
global
key
IfClassIsDisabled
:
:
Throw
)
;
}
static
JSObject
*
getOrCreateConstructor
(
JSContext
*
cx
JSProtoKey
key
)
{
MOZ_ASSERT
(
key
!
=
JSProto_Null
)
;
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
if
(
!
GlobalObject
:
:
ensureConstructor
(
cx
global
key
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
key
)
;
}
static
JSObject
*
getOrCreatePrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
MOZ_ASSERT
(
key
!
=
JSProto_Null
)
;
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
if
(
!
GlobalObject
:
:
ensureConstructor
(
cx
global
key
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
key
)
;
}
JSObject
*
maybeGetConstructor
(
JSProtoKey
protoKey
)
const
{
MOZ_ASSERT
(
JSProto_Null
<
protoKey
)
;
MOZ_ASSERT
(
protoKey
<
JSProto_LIMIT
)
;
return
data
(
)
.
builtinConstructors
[
protoKey
]
.
constructor
;
}
JSObject
*
maybeGetPrototype
(
JSProtoKey
protoKey
)
const
{
MOZ_ASSERT
(
JSProto_Null
<
protoKey
)
;
MOZ_ASSERT
(
protoKey
<
JSProto_LIMIT
)
;
return
data
(
)
.
builtinConstructors
[
protoKey
]
.
prototype
;
}
static
bool
maybeResolveGlobalThis
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
bool
*
resolved
)
;
void
setConstructor
(
JSProtoKey
key
JSObject
*
obj
)
{
MOZ_ASSERT
(
obj
)
;
data
(
)
.
builtinConstructors
[
key
]
.
constructor
=
obj
;
}
bool
hasPrototype
(
JSProtoKey
key
)
const
{
return
bool
(
data
(
)
.
builtinConstructors
[
key
]
.
prototype
)
;
}
JSObject
&
getPrototype
(
JSProtoKey
key
)
const
{
MOZ_ASSERT
(
hasPrototype
(
key
)
)
;
return
*
maybeGetPrototype
(
key
)
;
}
void
setPrototype
(
JSProtoKey
key
JSObject
*
obj
)
{
MOZ_ASSERT
(
obj
)
;
data
(
)
.
builtinConstructors
[
key
]
.
prototype
=
obj
;
}
bool
isStandardClassResolved
(
JSProtoKey
key
)
const
{
return
hasConstructor
(
key
)
;
}
private
:
bool
classIsInitialized
(
JSProtoKey
key
)
const
{
bool
inited
=
hasConstructor
(
key
)
;
MOZ_ASSERT
(
inited
=
=
hasPrototype
(
key
)
)
;
return
inited
;
}
bool
functionObjectClassesInitialized
(
)
const
{
bool
inited
=
classIsInitialized
(
JSProto_Function
)
;
MOZ_ASSERT
(
inited
=
=
classIsInitialized
(
JSProto_Object
)
)
;
return
inited
;
}
static
GlobalObject
*
create
(
.
.
.
)
=
delete
;
friend
struct
:
:
JSRuntime
;
static
GlobalObject
*
createInternal
(
JSContext
*
cx
const
JSClass
*
clasp
)
;
public
:
static
GlobalObject
*
new_
(
JSContext
*
cx
const
JSClass
*
clasp
JSPrincipals
*
principals
JS
:
:
OnNewGlobalHookOption
hookOption
const
JS
:
:
RealmOptions
&
options
)
;
static
JSFunction
*
createConstructor
(
JSContext
*
cx
JSNative
ctor
JSAtom
*
name
unsigned
length
gc
:
:
AllocKind
kind
=
gc
:
:
AllocKind
:
:
FUNCTION
const
JSJitInfo
*
jitInfo
=
nullptr
)
;
static
NativeObject
*
createBlankPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
const
JSClass
*
clasp
)
;
static
NativeObject
*
createBlankPrototypeInheriting
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
;
template
<
typename
T
>
static
T
*
createBlankPrototypeInheriting
(
JSContext
*
cx
HandleObject
proto
)
{
NativeObject
*
res
=
createBlankPrototypeInheriting
(
cx
&
T
:
:
class_
proto
)
;
return
res
?
&
res
-
>
template
as
<
T
>
(
)
:
nullptr
;
}
template
<
typename
T
>
static
T
*
createBlankPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
NativeObject
*
res
=
createBlankPrototype
(
cx
global
&
T
:
:
class_
)
;
return
res
?
&
res
-
>
template
as
<
T
>
(
)
:
nullptr
;
}
static
JSObject
*
getOrCreateObjectPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
global
-
>
functionObjectClassesInitialized
(
)
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Object
)
)
{
return
nullptr
;
}
}
return
&
global
-
>
getPrototype
(
JSProto_Object
)
;
}
static
JSObject
*
getOrCreateFunctionConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
global
-
>
functionObjectClassesInitialized
(
)
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Object
)
)
{
return
nullptr
;
}
}
return
&
global
-
>
getConstructor
(
JSProto_Function
)
;
}
static
JSObject
*
getOrCreateFunctionPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
global
-
>
functionObjectClassesInitialized
(
)
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Object
)
)
{
return
nullptr
;
}
}
return
&
global
-
>
getPrototype
(
JSProto_Function
)
;
}
static
NativeObject
*
getOrCreateArrayPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Array
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Array
)
.
as
<
NativeObject
>
(
)
;
}
NativeObject
*
maybeGetArrayPrototype
(
)
{
if
(
classIsInitialized
(
JSProto_Array
)
)
{
return
&
getPrototype
(
JSProto_Array
)
.
as
<
NativeObject
>
(
)
;
}
return
nullptr
;
}
static
JSObject
*
getOrCreateBooleanPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Boolean
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Boolean
)
;
}
static
JSObject
*
getOrCreateNumberPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Number
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Number
)
;
}
static
JSObject
*
getOrCreateStringPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_String
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_String
)
;
}
static
JSObject
*
getOrCreateSymbolPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Symbol
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Symbol
)
;
}
static
JSObject
*
getOrCreateBigIntPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_BigInt
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_BigInt
)
;
}
#
ifdef
ENABLE_RECORD_TUPLE
static
JSObject
*
getOrCreateRecordPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Record
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Record
)
;
}
static
JSObject
*
getOrCreateTuplePrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Tuple
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Tuple
)
;
}
#
endif
static
JSObject
*
getOrCreatePromisePrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Promise
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Promise
)
;
}
static
JSObject
*
getOrCreateRegExpPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_RegExp
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_RegExp
)
;
}
JSObject
*
maybeGetRegExpPrototype
(
)
{
if
(
classIsInitialized
(
JSProto_RegExp
)
)
{
return
&
getPrototype
(
JSProto_RegExp
)
;
}
return
nullptr
;
}
static
JSObject
*
getOrCreateSavedFramePrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_SavedFrame
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_SavedFrame
)
;
}
static
JSObject
*
getOrCreateArrayBufferConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_ArrayBuffer
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_ArrayBuffer
)
;
}
static
JSObject
*
getOrCreateArrayBufferPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_ArrayBuffer
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_ArrayBuffer
)
;
}
static
JSObject
*
getOrCreateSharedArrayBufferPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_SharedArrayBuffer
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_SharedArrayBuffer
)
;
}
static
JSObject
*
getOrCreateCustomErrorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSExnType
exnType
)
{
JSProtoKey
key
=
GetExceptionProtoKey
(
exnType
)
;
if
(
!
ensureConstructor
(
cx
global
key
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
key
)
;
}
static
JSFunction
*
getOrCreateErrorConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Error
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_Error
)
.
as
<
JSFunction
>
(
)
;
}
static
JSObject
*
getOrCreateErrorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateCustomErrorPrototype
(
cx
global
JSEXN_ERR
)
;
}
static
NativeObject
*
getOrCreateSetPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Set
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_Set
)
.
as
<
NativeObject
>
(
)
;
}
static
NativeObject
*
getOrCreateWeakSetPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_WeakSet
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_WeakSet
)
.
as
<
NativeObject
>
(
)
;
}
static
bool
ensureModulePrototypesCreated
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
JSObject
*
getOrCreateModulePrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
ModuleProto
initModuleProto
)
;
}
static
JSObject
*
getOrCreateImportEntryPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
ImportEntryProto
initImportEntryProto
)
;
}
static
JSObject
*
getOrCreateExportEntryPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
ExportEntryProto
initExportEntryProto
)
;
}
static
JSObject
*
getOrCreateRequestedModulePrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
RequestedModuleProto
initRequestedModuleProto
)
;
}
static
JSObject
*
getOrCreateModuleRequestPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
ModuleRequestProto
initModuleRequestProto
)
;
}
static
JSFunction
*
getOrCreateTypedArrayConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_TypedArray
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_TypedArray
)
.
as
<
JSFunction
>
(
)
;
}
static
JSObject
*
getOrCreateTypedArrayPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_TypedArray
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_TypedArray
)
;
}
private
:
using
ObjectInitOp
=
bool
(
*
)
(
JSContext
*
Handle
<
GlobalObject
*
>
)
;
using
ObjectInitWithTagOp
=
bool
(
*
)
(
JSContext
*
Handle
<
GlobalObject
*
>
HandleAtom
)
;
static
JSObject
*
getOrCreateBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
ObjectInitOp
init
)
{
if
(
JSObject
*
proto
=
global
-
>
maybeBuiltinProto
(
kind
)
)
{
return
proto
;
}
return
createBuiltinProto
(
cx
global
kind
init
)
;
}
static
JSObject
*
getOrCreateBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
HandleAtom
tag
ObjectInitWithTagOp
init
)
{
if
(
JSObject
*
proto
=
global
-
>
maybeBuiltinProto
(
kind
)
)
{
return
proto
;
}
return
createBuiltinProto
(
cx
global
kind
tag
init
)
;
}
static
JSObject
*
createBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
ObjectInitOp
init
)
;
static
JSObject
*
createBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
HandleAtom
tag
ObjectInitWithTagOp
init
)
;
static
JSObject
*
createIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
public
:
static
JSObject
*
getOrCreateIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
JSObject
*
proto
=
global
-
>
maybeBuiltinProto
(
ProtoKind
:
:
IteratorProto
)
)
{
return
proto
;
}
return
createIteratorPrototype
(
cx
global
)
;
}
static
NativeObject
*
getOrCreateArrayIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
NativeObject
*
maybeGetArrayIteratorPrototype
(
)
{
if
(
JSObject
*
obj
=
maybeBuiltinProto
(
ProtoKind
:
:
ArrayIteratorProto
)
)
{
return
&
obj
-
>
as
<
NativeObject
>
(
)
;
}
return
nullptr
;
}
static
JSObject
*
getOrCreateStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
JSObject
*
getOrCreateRegExpStringIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
void
setGeneratorObjectPrototype
(
JSObject
*
obj
)
{
initBuiltinProto
(
ProtoKind
:
:
GeneratorObjectProto
obj
)
;
}
static
JSObject
*
getOrCreateGeneratorObjectPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_GeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getBuiltinProto
(
ProtoKind
:
:
GeneratorObjectProto
)
;
}
static
JSObject
*
getOrCreateGeneratorFunctionPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_GeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_GeneratorFunction
)
;
}
static
JSObject
*
getOrCreateGeneratorFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_GeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_GeneratorFunction
)
;
}
static
JSObject
*
getOrCreateAsyncFunctionPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_AsyncFunction
)
;
}
static
JSObject
*
getOrCreateAsyncFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_AsyncFunction
)
;
}
static
JSObject
*
createAsyncIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
JSObject
*
getOrCreateAsyncIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
JSObject
*
proto
=
global
-
>
maybeBuiltinProto
(
ProtoKind
:
:
AsyncIteratorProto
)
)
{
return
proto
;
}
return
createAsyncIteratorPrototype
(
cx
global
)
;
}
static
JSObject
*
getOrCreateAsyncFromSyncIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
AsyncFromSyncIteratorProto
initAsyncFromSyncIteratorProto
)
;
}
static
JSObject
*
getOrCreateAsyncGenerator
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncGeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_AsyncGeneratorFunction
)
;
}
static
JSObject
*
getOrCreateAsyncGeneratorFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncGeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_AsyncGeneratorFunction
)
;
}
void
setAsyncGeneratorPrototype
(
JSObject
*
obj
)
{
initBuiltinProto
(
ProtoKind
:
:
AsyncGeneratorProto
obj
)
;
}
static
JSObject
*
getOrCreateAsyncGeneratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncGeneratorFunction
)
)
{
return
nullptr
;
}
return
&
global
-
>
getBuiltinProto
(
ProtoKind
:
:
AsyncGeneratorProto
)
;
}
static
JSObject
*
getOrCreateMapIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
MapIteratorProto
initMapIteratorProto
)
;
}
static
JSObject
*
getOrCreateSetIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
SetIteratorProto
initSetIteratorProto
)
;
}
static
JSObject
*
getOrCreateDataViewPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_DataView
)
)
{
return
nullptr
;
}
return
&
global
-
>
getPrototype
(
JSProto_DataView
)
;
}
static
JSObject
*
getOrCreatePromiseConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
ensureConstructor
(
cx
global
JSProto_Promise
)
)
{
return
nullptr
;
}
return
&
global
-
>
getConstructor
(
JSProto_Promise
)
;
}
static
NativeObject
*
getOrCreateWrapForValidIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
NativeObject
*
getOrCreateIteratorHelperPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
NativeObject
*
getOrCreateAsyncIteratorHelperPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initAsyncIteratorHelperProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
NativeObject
&
getIntrinsicsHolder
(
)
const
{
MOZ_ASSERT
(
data
(
)
.
intrinsicsHolder
)
;
return
*
data
(
)
.
intrinsicsHolder
;
}
static
bool
createIntrinsicsHolder
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
NativeObject
*
getComputedIntrinsicsHolder
(
)
{
return
data
(
)
.
computedIntrinsicsHolder
;
}
void
setComputedIntrinsicsHolder
(
NativeObject
*
holder
)
{
data
(
)
.
computedIntrinsicsHolder
=
holder
;
}
bool
maybeGetIntrinsicValue
(
PropertyName
*
name
Value
*
vp
JSContext
*
cx
)
{
NativeObject
&
holder
=
getIntrinsicsHolder
(
)
;
if
(
mozilla
:
:
Maybe
<
PropertyInfo
>
prop
=
holder
.
lookup
(
cx
name
)
)
{
*
vp
=
holder
.
getSlot
(
prop
-
>
slot
(
)
)
;
return
true
;
}
return
false
;
}
static
bool
getIntrinsicValue
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
MutableHandleValue
value
)
{
if
(
global
-
>
maybeGetIntrinsicValue
(
name
value
.
address
(
)
cx
)
)
{
return
true
;
}
return
getIntrinsicValueSlow
(
cx
global
name
value
)
;
}
static
bool
getIntrinsicValueSlow
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
MutableHandleValue
value
)
;
static
bool
addIntrinsicValue
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
HandleValue
value
)
;
static
inline
bool
setIntrinsicValue
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
HandleValue
value
)
;
static
bool
getSelfHostedFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
selfHostedName
HandleAtom
name
unsigned
nargs
MutableHandleValue
funVal
)
;
static
RegExpStatics
*
getRegExpStatics
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
JSObject
*
getOrCreateThrowTypeError
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
getOrCreateEval
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
MutableHandleObject
eval
)
;
bool
valueIsEval
(
const
Value
&
val
)
;
void
removeFromVarNames
(
JSAtom
*
name
)
{
data
(
)
.
varNames
.
remove
(
name
)
;
}
bool
isInVarNames
(
JSAtom
*
name
)
{
return
data
(
)
.
varNames
.
has
(
name
)
;
}
[
[
nodiscard
]
]
bool
addToVarNames
(
JSContext
*
cx
JS
:
:
Handle
<
JSAtom
*
>
name
)
;
static
ArgumentsObject
*
getOrCreateArgumentsTemplateObject
(
JSContext
*
cx
bool
mapped
)
;
ArgumentsObject
*
maybeArgumentsTemplateObject
(
bool
mapped
)
const
;
static
const
size_t
IterResultObjectValueSlot
=
0
;
static
const
size_t
IterResultObjectDoneSlot
=
1
;
static
js
:
:
PlainObject
*
getOrCreateIterResultTemplateObject
(
JSContext
*
cx
)
;
static
js
:
:
PlainObject
*
getOrCreateIterResultWithoutPrototypeTemplateObject
(
JSContext
*
cx
)
;
private
:
enum
class
WithObjectPrototype
{
No
Yes
}
;
static
js
:
:
PlainObject
*
createIterResultTemplateObject
(
JSContext
*
cx
WithObjectPrototype
withProto
)
;
public
:
static
ScriptSourceObject
*
getOrCreateSelfHostingScriptSourceObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
template
<
ProtoKind
Kind
const
JSClass
*
ProtoClass
const
JSFunctionSpec
*
Methods
>
static
bool
initObjectIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandleAtom
tag
)
;
static
bool
initAsyncIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initAsyncFromSyncIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initMapIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initSetIteratorProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initModuleProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initImportEntryProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initExportEntryProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initRequestedModuleProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initModuleRequestProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
initStandardClasses
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
Realm
:
:
DebuggerVector
&
getDebuggers
(
)
const
{
return
realm
(
)
-
>
getDebuggers
(
)
;
}
inline
NativeObject
*
getForOfPICObject
(
)
{
return
data
(
)
.
forOfPICChain
;
}
static
NativeObject
*
getOrCreateForOfPICObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
JSObject
*
maybeWindowProxy
(
)
const
{
return
data
(
)
.
windowProxy
;
}
void
setWindowProxy
(
JSObject
*
windowProxy
)
{
data
(
)
.
windowProxy
=
windowProxy
;
}
ArrayObject
*
getSourceURLsHolder
(
)
const
{
return
data
(
)
.
sourceURLsHolder
;
}
void
setSourceURLsHolder
(
ArrayObject
*
holder
)
{
data
(
)
.
sourceURLsHolder
=
holder
;
}
void
clearSourceURLSHolder
(
)
{
data
(
)
.
sourceURLsHolder
.
unbarrieredSet
(
nullptr
)
;
}
Shape
*
maybeArrayShapeWithDefaultProto
(
)
const
{
return
data
(
)
.
arrayShapeWithDefaultProto
;
}
static
Shape
*
getArrayShapeWithDefaultProto
(
JSContext
*
cx
)
{
if
(
Shape
*
shape
=
cx
-
>
global
(
)
-
>
data
(
)
.
arrayShapeWithDefaultProto
;
MOZ_LIKELY
(
shape
)
)
{
return
shape
;
}
return
createArrayShapeWithDefaultProto
(
cx
)
;
}
static
Shape
*
createArrayShapeWithDefaultProto
(
JSContext
*
cx
)
;
static
Shape
*
getPlainObjectShapeWithDefaultProto
(
JSContext
*
cx
gc
:
:
AllocKind
kind
)
{
PlainObjectSlotsKind
slotsKind
=
PlainObjectSlotsKindFromAllocKind
(
kind
)
;
Shape
*
shape
=
cx
-
>
global
(
)
-
>
data
(
)
.
plainObjectShapesWithDefaultProto
[
slotsKind
]
;
if
(
MOZ_LIKELY
(
shape
)
)
{
return
shape
;
}
return
createPlainObjectShapeWithDefaultProto
(
cx
kind
)
;
}
static
Shape
*
createPlainObjectShapeWithDefaultProto
(
JSContext
*
cx
gc
:
:
AllocKind
kind
)
;
static
Shape
*
getFunctionShapeWithDefaultProto
(
JSContext
*
cx
bool
extended
)
{
GlobalObjectData
&
data
=
cx
-
>
global
(
)
-
>
data
(
)
;
Shape
*
shape
=
extended
?
data
.
extendedFunctionShapeWithDefaultProto
:
data
.
functionShapeWithDefaultProto
;
if
(
MOZ_LIKELY
(
shape
)
)
{
return
shape
;
}
return
createFunctionShapeWithDefaultProto
(
cx
extended
)
;
}
static
Shape
*
createFunctionShapeWithDefaultProto
(
JSContext
*
cx
bool
extended
)
;
PropertyIteratorObject
*
maybeEmptyIterator
(
)
const
{
return
data
(
)
.
emptyIterator
;
}
static
PropertyIteratorObject
*
getOrCreateEmptyIterator
(
JSContext
*
cx
)
;
static
JSObject
*
getOrCreateRealmKeyObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
gc
:
:
FinalizationRegistryGlobalData
*
getOrCreateFinalizationRegistryData
(
)
;
gc
:
:
FinalizationRegistryGlobalData
*
maybeFinalizationRegistryData
(
)
const
{
return
data
(
)
.
finalizationRegistryData
.
get
(
)
;
}
static
size_t
offsetOfGlobalDataSlot
(
)
{
return
getFixedSlotOffset
(
GLOBAL_DATA_SLOT
)
;
}
}
;
extern
bool
LinkConstructorAndPrototype
(
JSContext
*
cx
JSObject
*
ctor
JSObject
*
proto
unsigned
prototypeAttrs
=
JSPROP_PERMANENT
|
JSPROP_READONLY
unsigned
constructorAttrs
=
0
)
;
extern
bool
DefinePropertiesAndFunctions
(
JSContext
*
cx
HandleObject
obj
const
JSPropertySpec
*
ps
const
JSFunctionSpec
*
fs
)
;
extern
bool
DefineToStringTag
(
JSContext
*
cx
HandleObject
obj
JSAtom
*
tag
)
;
template
<
JSNative
ctor
unsigned
length
gc
:
:
AllocKind
kind
const
JSJitInfo
*
jitInfo
=
nullptr
>
JSObject
*
GenericCreateConstructor
(
JSContext
*
cx
JSProtoKey
key
)
{
PropertyName
*
name
=
(
&
cx
-
>
names
(
)
.
Null
)
[
key
]
;
return
GlobalObject
:
:
createConstructor
(
cx
ctor
name
length
kind
jitInfo
)
;
}
template
<
typename
T
>
JSObject
*
GenericCreatePrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
static_assert
(
!
std
:
:
is_same_v
<
T
PlainObject
>
"
creating
Object
.
prototype
is
very
special
and
isn
'
t
handled
here
"
)
;
MOZ_ASSERT
(
&
T
:
:
class_
=
=
ProtoKeyToClass
(
key
)
"
type
mismatch
-
-
probably
too
much
copy
/
paste
in
your
ClassSpec
"
)
;
MOZ_ASSERT
(
InheritanceProtoKeyForStandardClass
(
key
)
=
=
JSProto_Object
"
subclasses
(
of
anything
but
Object
)
can
'
t
use
GenericCreatePrototype
"
)
;
return
GlobalObject
:
:
createBlankPrototype
(
cx
cx
-
>
global
(
)
&
T
:
:
protoClass_
)
;
}
inline
JSProtoKey
StandardProtoKeyOrNull
(
const
JSObject
*
obj
)
{
return
JSCLASS_CACHED_PROTO_KEY
(
obj
-
>
getClass
(
)
)
;
}
JSObject
*
NewTenuredObjectWithFunctionPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
GlobalObject
>
(
)
const
{
return
!
!
(
getClass
(
)
-
>
flags
&
JSCLASS_IS_GLOBAL
)
;
}
#
endif
