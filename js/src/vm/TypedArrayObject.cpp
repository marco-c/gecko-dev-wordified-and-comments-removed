#
include
"
vm
/
TypedArrayObject
-
inl
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
IntegerTypeTraits
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
<
algorithm
>
#
include
<
iterator
>
#
include
<
limits
>
#
include
<
numeric
>
#
include
<
string
.
h
>
#
include
<
string_view
>
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
__wasi__
)
#
include
<
sys
/
mman
.
h
>
#
endif
#
include
<
type_traits
>
#
include
"
jsnum
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
DataViewObject
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
MaybeRooted
.
h
"
#
include
"
jit
/
InlinableNatives
.
h
"
#
include
"
jit
/
TrampolineNatives
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
ScalarType
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
util
/
DifferentialTesting
.
h
"
#
include
"
util
/
StringBuilder
.
h
"
#
include
"
util
/
Text
.
h
"
#
include
"
util
/
WindowsWrapper
.
h
"
#
include
"
vm
/
ArrayBufferObject
.
h
"
#
include
"
vm
/
Float16
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PIC
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
#
include
"
vm
/
SharedMem
.
h
"
#
include
"
vm
/
Uint8Clamped
.
h
"
#
include
"
vm
/
WrapperObject
.
h
"
#
include
"
builtin
/
Sorting
-
inl
.
h
"
#
include
"
gc
/
Nursery
-
inl
.
h
"
#
include
"
vm
/
ArrayBufferObject
-
inl
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
GeckoProfiler
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
using
mozilla
:
:
IsAsciiDigit
;
bool
TypedArrayObject
:
:
convertValue
(
JSContext
*
cx
HandleValue
v
MutableHandleValue
result
)
const
{
switch
(
type
(
)
)
{
case
Scalar
:
:
BigInt64
:
case
Scalar
:
:
BigUint64
:
{
BigInt
*
bi
=
ToBigInt
(
cx
v
)
;
if
(
!
bi
)
{
return
false
;
}
result
.
setBigInt
(
bi
)
;
return
true
;
}
case
Scalar
:
:
Int8
:
case
Scalar
:
:
Uint8
:
case
Scalar
:
:
Int16
:
case
Scalar
:
:
Uint16
:
case
Scalar
:
:
Int32
:
case
Scalar
:
:
Uint32
:
case
Scalar
:
:
Float16
:
case
Scalar
:
:
Float32
:
case
Scalar
:
:
Float64
:
case
Scalar
:
:
Uint8Clamped
:
{
double
num
;
if
(
!
ToNumber
(
cx
v
&
num
)
)
{
return
false
;
}
result
.
setNumber
(
num
)
;
return
true
;
}
case
Scalar
:
:
MaxTypedArrayViewType
:
case
Scalar
:
:
Int64
:
case
Scalar
:
:
Simd128
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
scalar
type
"
)
;
return
false
;
}
static
bool
IsTypedArrayObject
(
HandleValue
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
TypedArrayObject
>
(
)
;
}
static
bool
IsUint8ArrayObject
(
HandleValue
v
)
{
return
IsTypedArrayObject
(
v
)
&
&
v
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
.
type
(
)
=
=
Scalar
:
:
Uint8
;
}
bool
TypedArrayObject
:
:
ensureHasBuffer
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
typedArray
)
{
if
(
typedArray
-
>
hasBuffer
(
)
)
{
return
true
;
}
MOZ_ASSERT
(
typedArray
-
>
is
<
FixedLengthTypedArrayObject
>
(
)
"
Resizable
TypedArrays
always
use
an
ArrayBuffer
"
)
;
Rooted
<
FixedLengthTypedArrayObject
*
>
tarray
(
cx
&
typedArray
-
>
as
<
FixedLengthTypedArrayObject
>
(
)
)
;
size_t
byteLength
=
tarray
-
>
byteLength
(
)
;
AutoRealm
ar
(
cx
tarray
)
;
Rooted
<
ArrayBufferObject
*
>
buffer
(
cx
ArrayBufferObject
:
:
createZeroed
(
cx
tarray
-
>
byteLength
(
)
)
)
;
if
(
!
buffer
)
{
return
false
;
}
buffer
-
>
pinLength
(
tarray
-
>
isLengthPinned
(
)
)
;
MOZ_ALWAYS_TRUE
(
buffer
-
>
addView
(
cx
tarray
)
)
;
memcpy
(
buffer
-
>
dataPointer
(
)
tarray
-
>
dataPointerUnshared
(
)
byteLength
)
;
size_t
nbytes
=
RoundUp
(
byteLength
sizeof
(
Value
)
)
;
Nursery
&
nursery
=
cx
-
>
nursery
(
)
;
if
(
tarray
-
>
isTenured
(
)
&
&
!
tarray
-
>
hasInlineElements
(
)
&
&
!
nursery
.
isInside
(
tarray
-
>
elements
(
)
)
)
{
js_free
(
tarray
-
>
elements
(
)
)
;
RemoveCellMemory
(
tarray
nbytes
MemoryUse
:
:
TypedArrayElements
)
;
}
tarray
-
>
setFixedSlot
(
TypedArrayObject
:
:
DATA_SLOT
PrivateValue
(
buffer
-
>
dataPointer
(
)
)
)
;
tarray
-
>
setFixedSlot
(
TypedArrayObject
:
:
BUFFER_SLOT
ObjectValue
(
*
buffer
)
)
;
return
true
;
}
#
ifdef
DEBUG
void
FixedLengthTypedArrayObject
:
:
assertZeroLengthArrayData
(
)
const
{
if
(
length
(
)
=
=
0
&
&
!
hasBuffer
(
)
)
{
uint8_t
*
end
=
fixedData
(
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
;
MOZ_ASSERT
(
end
[
0
]
=
=
ZeroLengthArrayData
)
;
}
}
#
endif
void
FixedLengthTypedArrayObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
MOZ_ASSERT
(
!
IsInsideNursery
(
obj
)
)
;
auto
*
curObj
=
&
obj
-
>
as
<
FixedLengthTypedArrayObject
>
(
)
;
if
(
!
curObj
-
>
elementsRaw
(
)
)
{
return
;
}
curObj
-
>
assertZeroLengthArrayData
(
)
;
if
(
curObj
-
>
hasBuffer
(
)
)
{
return
;
}
if
(
!
curObj
-
>
hasInlineElements
(
)
)
{
size_t
nbytes
=
RoundUp
(
curObj
-
>
byteLength
(
)
sizeof
(
Value
)
)
;
gcx
-
>
free_
(
obj
curObj
-
>
elements
(
)
nbytes
MemoryUse
:
:
TypedArrayElements
)
;
}
}
size_t
FixedLengthTypedArrayObject
:
:
objectMoved
(
JSObject
*
obj
JSObject
*
old
)
{
auto
*
newObj
=
&
obj
-
>
as
<
FixedLengthTypedArrayObject
>
(
)
;
const
auto
*
oldObj
=
&
old
-
>
as
<
FixedLengthTypedArrayObject
>
(
)
;
MOZ_ASSERT
(
newObj
-
>
elementsRaw
(
)
=
=
oldObj
-
>
elementsRaw
(
)
)
;
if
(
oldObj
-
>
hasBuffer
(
)
)
{
return
0
;
}
if
(
!
IsInsideNursery
(
old
)
)
{
if
(
oldObj
-
>
hasInlineElements
(
)
)
{
newObj
-
>
setInlineElements
(
)
;
}
return
0
;
}
void
*
buf
=
oldObj
-
>
elements
(
)
;
if
(
!
buf
)
{
return
0
;
}
Nursery
&
nursery
=
obj
-
>
runtimeFromMainThread
(
)
-
>
gc
.
nursery
(
)
;
size_t
nbytes
=
oldObj
-
>
byteLength
(
)
;
bool
canUseDirectForward
=
nbytes
>
=
sizeof
(
uintptr_t
)
;
constexpr
size_t
headerSize
=
dataOffset
(
)
+
sizeof
(
HeapSlot
)
;
gc
:
:
AllocKind
allocKind
=
oldObj
-
>
allocKindForTenure
(
)
;
MOZ_ASSERT_IF
(
obj
-
>
isTenured
(
)
obj
-
>
asTenured
(
)
.
getAllocKind
(
)
=
=
allocKind
)
;
MOZ_ASSERT_IF
(
nbytes
=
=
0
headerSize
+
sizeof
(
uint8_t
)
<
=
GetGCKindBytes
(
allocKind
)
)
;
if
(
nursery
.
isInside
(
buf
)
&
&
headerSize
+
nbytes
<
=
GetGCKindBytes
(
allocKind
)
)
{
MOZ_ASSERT
(
oldObj
-
>
hasInlineElements
(
)
)
;
#
ifdef
DEBUG
if
(
nbytes
=
=
0
)
{
uint8_t
*
output
=
newObj
-
>
fixedData
(
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
;
output
[
0
]
=
ZeroLengthArrayData
;
}
#
endif
newObj
-
>
setInlineElements
(
)
;
mozilla
:
:
PodCopy
(
newObj
-
>
elements
(
)
oldObj
-
>
elements
(
)
nbytes
)
;
nursery
.
setForwardingPointerWhileTenuring
(
oldObj
-
>
elements
(
)
newObj
-
>
elements
(
)
canUseDirectForward
)
;
return
0
;
}
nbytes
=
RoundUp
(
nbytes
sizeof
(
Value
)
)
;
Nursery
:
:
WasBufferMoved
result
=
nursery
.
maybeMoveBufferOnPromotion
(
&
buf
newObj
nbytes
MemoryUse
:
:
TypedArrayElements
ArrayBufferContentsArena
)
;
if
(
result
=
=
Nursery
:
:
BufferMoved
)
{
newObj
-
>
setReservedSlot
(
DATA_SLOT
PrivateValue
(
buf
)
)
;
nursery
.
setForwardingPointerWhileTenuring
(
oldObj
-
>
elements
(
)
newObj
-
>
elements
(
)
canUseDirectForward
)
;
return
nbytes
;
}
return
0
;
}
bool
FixedLengthTypedArrayObject
:
:
hasInlineElements
(
)
const
{
return
elements
(
)
=
=
this
-
>
fixedData
(
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
&
&
byteLength
(
)
<
=
FixedLengthTypedArrayObject
:
:
INLINE_BUFFER_LIMIT
;
}
void
FixedLengthTypedArrayObject
:
:
setInlineElements
(
)
{
char
*
dataSlot
=
reinterpret_cast
<
char
*
>
(
this
)
+
dataOffset
(
)
;
*
reinterpret_cast
<
void
*
*
>
(
dataSlot
)
=
this
-
>
fixedData
(
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
;
}
uint32_t
js
:
:
ClampDoubleToUint8
(
const
double
x
)
{
if
(
!
(
x
>
0
)
)
{
return
0
;
}
if
(
x
>
=
255
)
{
return
255
;
}
uint8_t
y
=
uint8_t
(
x
)
;
double
r
=
x
-
double
(
y
)
;
if
(
r
=
=
0
.
5
)
{
return
y
+
(
y
&
1
)
;
}
return
y
+
(
r
>
0
.
5
)
;
}
static
void
ReportOutOfBounds
(
JSContext
*
cx
TypedArrayObject
*
typedArray
)
{
if
(
typedArray
-
>
hasDetachedBuffer
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_DETACHED
)
;
}
else
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_RESIZED_BOUNDS
)
;
}
}
namespace
{
template
<
class
TypedArrayType
>
static
TypedArrayType
*
NewTypedArrayObject
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
gc
:
:
AllocKind
allocKind
gc
:
:
Heap
heap
)
{
MOZ_ASSERT
(
proto
)
;
MOZ_ASSERT
(
CanChangeToBackgroundAllocKind
(
allocKind
clasp
)
)
;
allocKind
=
ForegroundToBackgroundAllocKind
(
allocKind
)
;
static_assert
(
std
:
:
is_same_v
<
TypedArrayType
FixedLengthTypedArrayObject
>
|
|
std
:
:
is_same_v
<
TypedArrayType
ResizableTypedArrayObject
>
)
;
MOZ_ASSERT
(
ClassCanHaveFixedData
(
clasp
)
)
;
constexpr
size_t
nfixed
=
TypedArrayType
:
:
RESERVED_SLOTS
;
static_assert
(
nfixed
<
=
NativeObject
:
:
MAX_FIXED_SLOTS
)
;
static_assert
(
!
std
:
:
is_same_v
<
TypedArrayType
FixedLengthTypedArrayObject
>
|
|
nfixed
=
=
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
;
Rooted
<
SharedShape
*
>
shape
(
cx
SharedShape
:
:
getInitialShape
(
cx
clasp
cx
-
>
realm
(
)
AsTaggedProto
(
proto
)
nfixed
ObjectFlags
(
)
)
)
;
if
(
!
shape
)
{
return
nullptr
;
}
return
NativeObject
:
:
create
<
TypedArrayType
>
(
cx
allocKind
heap
shape
)
;
}
template
<
typename
NativeType
>
class
FixedLengthTypedArrayObjectTemplate
;
template
<
typename
NativeType
>
class
ResizableTypedArrayObjectTemplate
;
template
<
typename
NativeType
>
class
TypedArrayObjectTemplate
{
friend
class
js
:
:
TypedArrayObject
;
using
FixedLengthTypedArray
=
FixedLengthTypedArrayObjectTemplate
<
NativeType
>
;
using
ResizableTypedArray
=
ResizableTypedArrayObjectTemplate
<
NativeType
>
;
using
AutoLength
=
ArrayBufferViewObject
:
:
AutoLength
;
static
constexpr
auto
ByteLengthLimit
=
TypedArrayObject
:
:
ByteLengthLimit
;
static
constexpr
auto
INLINE_BUFFER_LIMIT
=
FixedLengthTypedArrayObject
:
:
INLINE_BUFFER_LIMIT
;
public
:
static
constexpr
Scalar
:
:
Type
ArrayTypeID
(
)
{
return
TypeIDOfType
<
NativeType
>
:
:
id
;
}
static
constexpr
JSProtoKey
protoKey
(
)
{
return
TypeIDOfType
<
NativeType
>
:
:
protoKey
;
}
static
constexpr
size_t
BYTES_PER_ELEMENT
=
sizeof
(
NativeType
)
;
static
JSObject
*
createPrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
RootedObject
typedArrayProto
(
cx
GlobalObject
:
:
getOrCreateTypedArrayPrototype
(
cx
global
)
)
;
if
(
!
typedArrayProto
)
{
return
nullptr
;
}
const
JSClass
*
clasp
=
TypedArrayObject
:
:
protoClassForType
(
ArrayTypeID
(
)
)
;
return
GlobalObject
:
:
createBlankPrototypeInheriting
(
cx
clasp
typedArrayProto
)
;
}
static
JSObject
*
createConstructor
(
JSContext
*
cx
JSProtoKey
key
)
{
Handle
<
GlobalObject
*
>
global
=
cx
-
>
global
(
)
;
RootedFunction
ctorProto
(
cx
GlobalObject
:
:
getOrCreateTypedArrayConstructor
(
cx
global
)
)
;
if
(
!
ctorProto
)
{
return
nullptr
;
}
JSFunction
*
fun
=
NewFunctionWithProto
(
cx
class_constructor
3
FunctionFlags
:
:
NATIVE_CTOR
nullptr
ClassName
(
key
cx
)
ctorProto
gc
:
:
AllocKind
:
:
FUNCTION
TenuredObject
)
;
if
(
fun
)
{
fun
-
>
setJitInfo
(
&
jit
:
:
JitInfo_TypedArrayConstructor
)
;
}
return
fun
;
}
static
bool
convertValue
(
JSContext
*
cx
HandleValue
v
NativeType
*
result
)
;
static
TypedArrayObject
*
makeTypedArrayWithTemplate
(
JSContext
*
cx
TypedArrayObject
*
templateObj
HandleObject
array
)
{
MOZ_ASSERT
(
!
IsWrapper
(
array
)
)
;
MOZ_ASSERT
(
!
array
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
;
return
fromArray
(
cx
array
)
;
}
static
TypedArrayObject
*
makeTypedArrayWithTemplate
(
JSContext
*
cx
TypedArrayObject
*
templateObj
HandleObject
arrayBuffer
HandleValue
byteOffsetValue
HandleValue
lengthValue
)
{
MOZ_ASSERT
(
!
IsWrapper
(
arrayBuffer
)
)
;
MOZ_ASSERT
(
arrayBuffer
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
;
uint64_t
byteOffset
length
;
if
(
!
byteOffsetAndLength
(
cx
byteOffsetValue
lengthValue
&
byteOffset
&
length
)
)
{
return
nullptr
;
}
return
fromBufferSameCompartment
(
cx
arrayBuffer
.
as
<
ArrayBufferObjectMaybeShared
>
(
)
byteOffset
length
nullptr
)
;
}
static
bool
class_constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
AutoJSConstructorProfilerEntry
pseudoFrame
(
cx
"
[
TypedArray
]
"
)
;
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
typed
array
"
)
)
{
return
false
;
}
JSObject
*
obj
=
create
(
cx
args
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
private
:
static
JSObject
*
create
(
JSContext
*
cx
const
CallArgs
&
args
)
{
MOZ_ASSERT
(
args
.
isConstructing
(
)
)
;
if
(
args
.
length
(
)
=
=
0
|
|
!
args
[
0
]
.
isObject
(
)
)
{
uint64_t
len
;
if
(
!
ToIndex
(
cx
args
.
get
(
0
)
JSMSG_BAD_ARRAY_LENGTH
&
len
)
)
{
return
nullptr
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
protoKey
(
)
&
proto
)
)
{
return
nullptr
;
}
return
fromLength
(
cx
len
proto
)
;
}
RootedObject
dataObj
(
cx
&
args
[
0
]
.
toObject
(
)
)
;
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
protoKey
(
)
&
proto
)
)
{
return
nullptr
;
}
if
(
!
UncheckedUnwrap
(
dataObj
)
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
return
fromArray
(
cx
dataObj
proto
)
;
}
uint64_t
byteOffset
length
;
if
(
!
byteOffsetAndLength
(
cx
args
.
get
(
1
)
args
.
get
(
2
)
&
byteOffset
&
length
)
)
{
return
nullptr
;
}
if
(
dataObj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
auto
buffer
=
dataObj
.
as
<
ArrayBufferObjectMaybeShared
>
(
)
;
return
fromBufferSameCompartment
(
cx
buffer
byteOffset
length
proto
)
;
}
return
fromBufferWrapped
(
cx
dataObj
byteOffset
length
proto
)
;
}
static
bool
byteOffsetAndLength
(
JSContext
*
cx
HandleValue
byteOffsetValue
HandleValue
lengthValue
uint64_t
*
byteOffset
uint64_t
*
length
)
{
*
byteOffset
=
0
;
if
(
!
byteOffsetValue
.
isUndefined
(
)
)
{
if
(
!
ToIndex
(
cx
byteOffsetValue
byteOffset
)
)
{
return
false
;
}
if
(
*
byteOffset
%
BYTES_PER_ELEMENT
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CONSTRUCT_OFFSET_BOUNDS
Scalar
:
:
name
(
ArrayTypeID
(
)
)
Scalar
:
:
byteSizeString
(
ArrayTypeID
(
)
)
)
;
return
false
;
}
}
*
length
=
UINT64_MAX
;
if
(
!
lengthValue
.
isUndefined
(
)
)
{
if
(
!
ToIndex
(
cx
lengthValue
length
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
computeAndCheckLength
(
JSContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
bufferMaybeUnwrapped
uint64_t
byteOffset
uint64_t
lengthIndex
size_t
*
length
AutoLength
*
autoLength
)
{
MOZ_ASSERT
(
byteOffset
%
BYTES_PER_ELEMENT
=
=
0
)
;
MOZ_ASSERT
(
byteOffset
<
uint64_t
(
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
)
;
MOZ_ASSERT_IF
(
lengthIndex
!
=
UINT64_MAX
lengthIndex
<
uint64_t
(
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
)
;
if
(
bufferMaybeUnwrapped
-
>
isDetached
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_DETACHED
)
;
return
false
;
}
size_t
bufferByteLength
=
bufferMaybeUnwrapped
-
>
byteLength
(
)
;
MOZ_ASSERT
(
bufferByteLength
<
=
ByteLengthLimit
)
;
size_t
len
;
if
(
lengthIndex
=
=
UINT64_MAX
)
{
if
(
byteOffset
>
bufferByteLength
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CONSTRUCT_OFFSET_LENGTH_BOUNDS
Scalar
:
:
name
(
ArrayTypeID
(
)
)
)
;
return
false
;
}
if
(
bufferMaybeUnwrapped
-
>
isResizable
(
)
)
{
*
length
=
0
;
*
autoLength
=
AutoLength
:
:
Yes
;
return
true
;
}
if
(
bufferByteLength
%
BYTES_PER_ELEMENT
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CONSTRUCT_OFFSET_MISALIGNED
Scalar
:
:
name
(
ArrayTypeID
(
)
)
Scalar
:
:
byteSizeString
(
ArrayTypeID
(
)
)
)
;
return
false
;
}
size_t
newByteLength
=
bufferByteLength
-
size_t
(
byteOffset
)
;
len
=
newByteLength
/
BYTES_PER_ELEMENT
;
}
else
{
uint64_t
newByteLength
=
lengthIndex
*
BYTES_PER_ELEMENT
;
if
(
byteOffset
+
newByteLength
>
bufferByteLength
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CONSTRUCT_ARRAY_LENGTH_BOUNDS
Scalar
:
:
name
(
ArrayTypeID
(
)
)
)
;
return
false
;
}
len
=
size_t
(
lengthIndex
)
;
}
MOZ_ASSERT
(
len
<
=
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
;
*
length
=
len
;
*
autoLength
=
AutoLength
:
:
No
;
return
true
;
}
static
TypedArrayObject
*
fromBufferSameCompartment
(
JSContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
buffer
uint64_t
byteOffset
uint64_t
lengthIndex
HandleObject
proto
)
{
size_t
length
=
0
;
auto
autoLength
=
AutoLength
:
:
No
;
if
(
!
computeAndCheckLength
(
cx
buffer
byteOffset
lengthIndex
&
length
&
autoLength
)
)
{
return
nullptr
;
}
if
(
!
buffer
-
>
isResizable
(
)
)
{
return
FixedLengthTypedArray
:
:
makeInstance
(
cx
buffer
byteOffset
length
proto
)
;
}
return
ResizableTypedArray
:
:
makeInstance
(
cx
buffer
byteOffset
length
autoLength
proto
)
;
}
static
JSObject
*
fromBufferWrapped
(
JSContext
*
cx
HandleObject
bufobj
uint64_t
byteOffset
uint64_t
lengthIndex
HandleObject
proto
)
{
JSObject
*
unwrapped
=
CheckedUnwrapStatic
(
bufobj
)
;
if
(
!
unwrapped
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
if
(
!
unwrapped
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_ARGS
)
;
return
nullptr
;
}
Rooted
<
ArrayBufferObjectMaybeShared
*
>
unwrappedBuffer
(
cx
)
;
unwrappedBuffer
=
&
unwrapped
-
>
as
<
ArrayBufferObjectMaybeShared
>
(
)
;
size_t
length
=
0
;
auto
autoLength
=
AutoLength
:
:
No
;
if
(
!
computeAndCheckLength
(
cx
unwrappedBuffer
byteOffset
lengthIndex
&
length
&
autoLength
)
)
{
return
nullptr
;
}
RootedObject
protoRoot
(
cx
proto
)
;
if
(
!
protoRoot
)
{
protoRoot
=
GlobalObject
:
:
getOrCreatePrototype
(
cx
protoKey
(
)
)
;
if
(
!
protoRoot
)
{
return
nullptr
;
}
}
RootedObject
typedArray
(
cx
)
;
{
JSAutoRealm
ar
(
cx
unwrappedBuffer
)
;
RootedObject
wrappedProto
(
cx
protoRoot
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedProto
)
)
{
return
nullptr
;
}
if
(
!
unwrappedBuffer
-
>
isResizable
(
)
)
{
typedArray
=
FixedLengthTypedArray
:
:
makeInstance
(
cx
unwrappedBuffer
byteOffset
length
wrappedProto
)
;
}
else
{
typedArray
=
ResizableTypedArray
:
:
makeInstance
(
cx
unwrappedBuffer
byteOffset
length
autoLength
wrappedProto
)
;
}
if
(
!
typedArray
)
{
return
nullptr
;
}
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
typedArray
)
)
{
return
nullptr
;
}
return
typedArray
;
}
public
:
static
JSObject
*
fromBuffer
(
JSContext
*
cx
HandleObject
bufobj
size_t
byteOffset
int64_t
lengthInt
)
{
if
(
byteOffset
%
BYTES_PER_ELEMENT
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CONSTRUCT_OFFSET_BOUNDS
Scalar
:
:
name
(
ArrayTypeID
(
)
)
Scalar
:
:
byteSizeString
(
ArrayTypeID
(
)
)
)
;
return
nullptr
;
}
uint64_t
lengthIndex
=
lengthInt
>
=
0
?
uint64_t
(
lengthInt
)
:
UINT64_MAX
;
if
(
bufobj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
auto
buffer
=
bufobj
.
as
<
ArrayBufferObjectMaybeShared
>
(
)
;
return
fromBufferSameCompartment
(
cx
buffer
byteOffset
lengthIndex
nullptr
)
;
}
return
fromBufferWrapped
(
cx
bufobj
byteOffset
lengthIndex
nullptr
)
;
}
static
bool
maybeCreateArrayBuffer
(
JSContext
*
cx
uint64_t
count
MutableHandle
<
ArrayBufferObject
*
>
buffer
)
{
if
(
count
>
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_ARRAY_LENGTH
)
;
return
false
;
}
size_t
byteLength
=
count
*
BYTES_PER_ELEMENT
;
MOZ_ASSERT
(
byteLength
<
=
ByteLengthLimit
)
;
static_assert
(
INLINE_BUFFER_LIMIT
%
BYTES_PER_ELEMENT
=
=
0
"
ArrayBuffer
inline
storage
shouldn
'
t
waste
any
space
"
)
;
if
(
byteLength
<
=
INLINE_BUFFER_LIMIT
)
{
return
true
;
}
ArrayBufferObject
*
buf
=
ArrayBufferObject
:
:
createZeroed
(
cx
byteLength
)
;
if
(
!
buf
)
{
return
false
;
}
buffer
.
set
(
buf
)
;
return
true
;
}
static
TypedArrayObject
*
fromLength
(
JSContext
*
cx
uint64_t
nelements
HandleObject
proto
=
nullptr
gc
:
:
Heap
heap
=
gc
:
:
Heap
:
:
Default
)
{
Rooted
<
ArrayBufferObject
*
>
buffer
(
cx
)
;
if
(
!
maybeCreateArrayBuffer
(
cx
nelements
&
buffer
)
)
{
return
nullptr
;
}
return
FixedLengthTypedArray
:
:
makeInstance
(
cx
buffer
0
nelements
proto
heap
)
;
}
static
TypedArrayObject
*
fromArray
(
JSContext
*
cx
HandleObject
other
HandleObject
proto
=
nullptr
)
;
static
TypedArrayObject
*
fromTypedArray
(
JSContext
*
cx
HandleObject
other
bool
isWrapped
HandleObject
proto
)
;
static
TypedArrayObject
*
fromObject
(
JSContext
*
cx
HandleObject
other
HandleObject
proto
)
;
static
const
NativeType
getIndex
(
TypedArrayObject
*
tarray
size_t
index
)
{
MOZ_ASSERT
(
index
<
tarray
-
>
length
(
)
.
valueOr
(
0
)
)
;
return
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
tarray
-
>
dataPointerEither
(
)
.
cast
<
NativeType
*
>
(
)
+
index
)
;
}
static
void
setIndex
(
TypedArrayObject
&
tarray
size_t
index
NativeType
val
)
{
MOZ_ASSERT
(
index
<
tarray
.
length
(
)
.
valueOr
(
0
)
)
;
jit
:
:
AtomicOperations
:
:
storeSafeWhenRacy
(
tarray
.
dataPointerEither
(
)
.
cast
<
NativeType
*
>
(
)
+
index
val
)
;
}
static
bool
getElement
(
JSContext
*
cx
TypedArrayObject
*
tarray
size_t
index
MutableHandleValue
val
)
;
static
bool
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
;
static
bool
setElement
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
obj
uint64_t
index
HandleValue
v
ObjectOpResult
&
result
)
;
}
;
template
<
typename
NativeType
>
class
FixedLengthTypedArrayObjectTemplate
:
public
FixedLengthTypedArrayObject
public
TypedArrayObjectTemplate
<
NativeType
>
{
friend
class
js
:
:
TypedArrayObject
;
using
TypedArrayTemplate
=
TypedArrayObjectTemplate
<
NativeType
>
;
public
:
using
TypedArrayTemplate
:
:
ArrayTypeID
;
using
TypedArrayTemplate
:
:
BYTES_PER_ELEMENT
;
using
TypedArrayTemplate
:
:
protoKey
;
static
inline
const
JSClass
*
instanceClass
(
)
{
static_assert
(
ArrayTypeID
(
)
<
std
:
:
size
(
TypedArrayObject
:
:
fixedLengthClasses
)
)
;
return
&
TypedArrayObject
:
:
fixedLengthClasses
[
ArrayTypeID
(
)
]
;
}
static
FixedLengthTypedArrayObject
*
newBuiltinClassInstance
(
JSContext
*
cx
gc
:
:
AllocKind
allocKind
gc
:
:
Heap
heap
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreatePrototype
(
cx
protoKey
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTypedArrayObject
<
FixedLengthTypedArrayObject
>
(
cx
instanceClass
(
)
proto
allocKind
heap
)
;
}
static
FixedLengthTypedArrayObject
*
makeProtoInstance
(
JSContext
*
cx
HandleObject
proto
gc
:
:
AllocKind
allocKind
)
{
MOZ_ASSERT
(
proto
)
;
return
NewTypedArrayObject
<
FixedLengthTypedArrayObject
>
(
cx
instanceClass
(
)
proto
allocKind
gc
:
:
Heap
:
:
Default
)
;
}
static
FixedLengthTypedArrayObject
*
makeInstance
(
JSContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
buffer
size_t
byteOffset
size_t
len
HandleObject
proto
gc
:
:
Heap
heap
=
gc
:
:
Heap
:
:
Default
)
{
MOZ_ASSERT
(
len
<
=
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
;
gc
:
:
AllocKind
allocKind
=
buffer
?
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
:
AllocKindForLazyBuffer
(
len
*
BYTES_PER_ELEMENT
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
FixedLengthTypedArrayObject
*
obj
;
if
(
proto
)
{
obj
=
makeProtoInstance
(
cx
proto
allocKind
)
;
}
else
{
obj
=
newBuiltinClassInstance
(
cx
allocKind
heap
)
;
}
if
(
!
obj
|
|
!
obj
-
>
init
(
cx
buffer
byteOffset
len
BYTES_PER_ELEMENT
)
)
{
return
nullptr
;
}
return
obj
;
}
static
FixedLengthTypedArrayObject
*
makeTemplateObject
(
JSContext
*
cx
int32_t
len
)
{
MOZ_ASSERT
(
len
>
=
0
)
;
size_t
nbytes
;
MOZ_ALWAYS_TRUE
(
CalculateAllocSize
<
NativeType
>
(
len
&
nbytes
)
)
;
bool
fitsInline
=
nbytes
<
=
INLINE_BUFFER_LIMIT
;
gc
:
:
AllocKind
allocKind
=
!
fitsInline
?
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
:
AllocKindForLazyBuffer
(
nbytes
)
;
MOZ_ASSERT
(
allocKind
>
=
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
auto
*
tarray
=
newBuiltinClassInstance
(
cx
allocKind
gc
:
:
Heap
:
:
Tenured
)
;
if
(
!
tarray
)
{
return
nullptr
;
}
initTypedArraySlots
(
tarray
len
)
;
MOZ_ASSERT
(
tarray
-
>
getReservedSlot
(
DATA_SLOT
)
.
isUndefined
(
)
)
;
return
tarray
;
}
static
void
initTypedArraySlots
(
FixedLengthTypedArrayObject
*
tarray
int32_t
len
)
{
MOZ_ASSERT
(
len
>
=
0
)
;
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
BUFFER_SLOT
JS
:
:
FalseValue
(
)
)
;
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
LENGTH_SLOT
PrivateValue
(
len
)
)
;
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
BYTEOFFSET_SLOT
PrivateValue
(
size_t
(
0
)
)
)
;
#
ifdef
DEBUG
if
(
len
=
=
0
)
{
uint8_t
*
output
=
tarray
-
>
fixedData
(
FixedLengthTypedArrayObject
:
:
FIXED_DATA_START
)
;
output
[
0
]
=
TypedArrayObject
:
:
ZeroLengthArrayData
;
}
#
endif
}
static
void
initTypedArrayData
(
FixedLengthTypedArrayObject
*
tarray
void
*
buf
size_t
nbytes
gc
:
:
AllocKind
allocKind
)
{
if
(
buf
)
{
InitReservedSlot
(
tarray
TypedArrayObject
:
:
DATA_SLOT
buf
nbytes
MemoryUse
:
:
TypedArrayElements
)
;
}
else
{
#
ifdef
DEBUG
constexpr
size_t
dataOffset
=
ArrayBufferViewObject
:
:
dataOffset
(
)
;
constexpr
size_t
offset
=
dataOffset
+
sizeof
(
HeapSlot
)
;
MOZ_ASSERT
(
offset
+
nbytes
<
=
GetGCKindBytes
(
allocKind
)
)
;
#
endif
void
*
data
=
tarray
-
>
fixedData
(
FIXED_DATA_START
)
;
tarray
-
>
initReservedSlot
(
DATA_SLOT
PrivateValue
(
data
)
)
;
memset
(
data
0
nbytes
)
;
}
}
static
FixedLengthTypedArrayObject
*
makeTypedArrayWithTemplate
(
JSContext
*
cx
TypedArrayObject
*
templateObj
int32_t
len
)
{
if
(
len
<
0
|
|
size_t
(
len
)
>
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_ARRAY_LENGTH
)
;
return
nullptr
;
}
size_t
nbytes
=
size_t
(
len
)
*
BYTES_PER_ELEMENT
;
MOZ_ASSERT
(
nbytes
<
=
ByteLengthLimit
)
;
bool
fitsInline
=
nbytes
<
=
INLINE_BUFFER_LIMIT
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
gc
:
:
AllocKind
allocKind
=
!
fitsInline
?
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
:
AllocKindForLazyBuffer
(
nbytes
)
;
MOZ_ASSERT
(
templateObj
-
>
getClass
(
)
=
=
instanceClass
(
)
)
;
RootedObject
proto
(
cx
templateObj
-
>
staticPrototype
(
)
)
;
auto
*
obj
=
makeProtoInstance
(
cx
proto
allocKind
)
;
if
(
!
obj
)
{
return
nullptr
;
}
initTypedArraySlots
(
obj
len
)
;
void
*
buf
=
nullptr
;
if
(
!
fitsInline
)
{
MOZ_ASSERT
(
len
>
0
)
;
nbytes
=
RoundUp
(
nbytes
sizeof
(
Value
)
)
;
buf
=
cx
-
>
nursery
(
)
.
allocateZeroedBuffer
(
obj
nbytes
js
:
:
ArrayBufferContentsArena
)
;
if
(
!
buf
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
}
initTypedArrayData
(
obj
buf
nbytes
allocKind
)
;
return
obj
;
}
}
;
template
<
typename
NativeType
>
class
ResizableTypedArrayObjectTemplate
:
public
ResizableTypedArrayObject
public
TypedArrayObjectTemplate
<
NativeType
>
{
friend
class
js
:
:
TypedArrayObject
;
using
TypedArrayTemplate
=
TypedArrayObjectTemplate
<
NativeType
>
;
public
:
using
TypedArrayTemplate
:
:
ArrayTypeID
;
using
TypedArrayTemplate
:
:
BYTES_PER_ELEMENT
;
using
TypedArrayTemplate
:
:
protoKey
;
static
inline
const
JSClass
*
instanceClass
(
)
{
static_assert
(
ArrayTypeID
(
)
<
std
:
:
size
(
TypedArrayObject
:
:
resizableClasses
)
)
;
return
&
TypedArrayObject
:
:
resizableClasses
[
ArrayTypeID
(
)
]
;
}
static
ResizableTypedArrayObject
*
newBuiltinClassInstance
(
JSContext
*
cx
gc
:
:
AllocKind
allocKind
gc
:
:
Heap
heap
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreatePrototype
(
cx
protoKey
(
)
)
)
;
if
(
!
proto
)
{
return
nullptr
;
}
return
NewTypedArrayObject
<
ResizableTypedArrayObject
>
(
cx
instanceClass
(
)
proto
allocKind
heap
)
;
}
static
ResizableTypedArrayObject
*
makeProtoInstance
(
JSContext
*
cx
HandleObject
proto
gc
:
:
AllocKind
allocKind
)
{
MOZ_ASSERT
(
proto
)
;
return
NewTypedArrayObject
<
ResizableTypedArrayObject
>
(
cx
instanceClass
(
)
proto
allocKind
gc
:
:
Heap
:
:
Default
)
;
}
static
ResizableTypedArrayObject
*
makeInstance
(
JSContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
buffer
size_t
byteOffset
size_t
len
AutoLength
autoLength
HandleObject
proto
)
{
MOZ_ASSERT
(
buffer
)
;
MOZ_ASSERT
(
buffer
-
>
isResizable
(
)
)
;
MOZ_ASSERT
(
!
buffer
-
>
isDetached
(
)
)
;
MOZ_ASSERT
(
autoLength
=
=
AutoLength
:
:
No
|
|
len
=
=
0
"
length
is
zero
for
'
auto
'
length
views
"
)
;
MOZ_ASSERT
(
len
<
=
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
;
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
ResizableTypedArrayObject
*
obj
;
if
(
proto
)
{
obj
=
makeProtoInstance
(
cx
proto
allocKind
)
;
}
else
{
obj
=
newBuiltinClassInstance
(
cx
allocKind
gc
:
:
Heap
:
:
Default
)
;
}
if
(
!
obj
|
|
!
obj
-
>
initResizable
(
cx
buffer
byteOffset
len
BYTES_PER_ELEMENT
autoLength
)
)
{
return
nullptr
;
}
return
obj
;
}
static
ResizableTypedArrayObject
*
makeTemplateObject
(
JSContext
*
cx
)
{
gc
:
:
AllocKind
allocKind
=
gc
:
:
GetGCObjectKind
(
instanceClass
(
)
)
;
AutoSetNewObjectMetadata
metadata
(
cx
)
;
auto
*
tarray
=
newBuiltinClassInstance
(
cx
allocKind
gc
:
:
Heap
:
:
Tenured
)
;
if
(
!
tarray
)
{
return
nullptr
;
}
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
BUFFER_SLOT
JS
:
:
FalseValue
(
)
)
;
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
LENGTH_SLOT
PrivateValue
(
size_t
(
0
)
)
)
;
tarray
-
>
initFixedSlot
(
TypedArrayObject
:
:
BYTEOFFSET_SLOT
PrivateValue
(
size_t
(
0
)
)
)
;
tarray
-
>
initFixedSlot
(
AUTO_LENGTH_SLOT
BooleanValue
(
false
)
)
;
tarray
-
>
initFixedSlot
(
ResizableTypedArrayObject
:
:
INITIAL_LENGTH_SLOT
PrivateValue
(
size_t
(
0
)
)
)
;
tarray
-
>
initFixedSlot
(
ResizableTypedArrayObject
:
:
INITIAL_BYTE_OFFSET_SLOT
PrivateValue
(
size_t
(
0
)
)
)
;
MOZ_ASSERT
(
tarray
-
>
getReservedSlot
(
DATA_SLOT
)
.
isUndefined
(
)
)
;
return
tarray
;
}
}
;
template
<
typename
NativeType
>
bool
TypedArrayObjectTemplate
<
NativeType
>
:
:
convertValue
(
JSContext
*
cx
HandleValue
v
NativeType
*
result
)
{
double
d
;
if
(
!
ToNumber
(
cx
v
&
d
)
)
{
return
false
;
}
if
(
js
:
:
SupportDifferentialTesting
(
)
)
{
d
=
JS
:
:
CanonicalizeNaN
(
d
)
;
}
*
result
=
ConvertNumber
<
NativeType
>
(
d
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
int64_t
>
:
:
convertValue
(
JSContext
*
cx
HandleValue
v
int64_t
*
result
)
{
JS_TRY_VAR_OR_RETURN_FALSE
(
cx
*
result
ToBigInt64
(
cx
v
)
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
uint64_t
>
:
:
convertValue
(
JSContext
*
cx
HandleValue
v
uint64_t
*
result
)
{
JS_TRY_VAR_OR_RETURN_FALSE
(
cx
*
result
ToBigUint64
(
cx
v
)
)
;
return
true
;
}
template
<
typename
NativeType
>
bool
TypedArrayObjectTemplate
<
NativeType
>
:
:
setElement
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
obj
uint64_t
index
HandleValue
v
ObjectOpResult
&
result
)
{
NativeType
nativeValue
;
if
(
!
convertValue
(
cx
v
&
nativeValue
)
)
{
return
false
;
}
if
(
index
<
obj
-
>
length
(
)
.
valueOr
(
0
)
)
{
MOZ_ASSERT
(
!
obj
-
>
hasDetachedBuffer
(
)
"
detaching
an
array
buffer
sets
the
length
to
zero
"
)
;
TypedArrayObjectTemplate
<
NativeType
>
:
:
setIndex
(
*
obj
index
nativeValue
)
;
}
return
result
.
succeed
(
)
;
}
}
TypedArrayObject
*
js
:
:
NewTypedArrayWithTemplateAndLength
(
JSContext
*
cx
HandleObject
templateObj
int32_t
len
)
{
MOZ_ASSERT
(
templateObj
-
>
is
<
TypedArrayObject
>
(
)
)
;
TypedArrayObject
*
tobj
=
&
templateObj
-
>
as
<
TypedArrayObject
>
(
)
;
switch
(
tobj
-
>
type
(
)
)
{
#
define
CREATE_TYPED_ARRAY
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
FixedLengthTypedArrayObjectTemplate
<
T
>
:
:
makeTypedArrayWithTemplate
(
\
cx
tobj
len
)
;
JS_FOR_EACH_TYPED_ARRAY
(
CREATE_TYPED_ARRAY
)
#
undef
CREATE_TYPED_ARRAY
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
}
TypedArrayObject
*
js
:
:
NewTypedArrayWithTemplateAndArray
(
JSContext
*
cx
HandleObject
templateObj
HandleObject
array
)
{
MOZ_ASSERT
(
templateObj
-
>
is
<
TypedArrayObject
>
(
)
)
;
TypedArrayObject
*
tobj
=
&
templateObj
-
>
as
<
TypedArrayObject
>
(
)
;
switch
(
tobj
-
>
type
(
)
)
{
#
define
CREATE_TYPED_ARRAY
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
TypedArrayObjectTemplate
<
T
>
:
:
makeTypedArrayWithTemplate
(
cx
tobj
\
array
)
;
JS_FOR_EACH_TYPED_ARRAY
(
CREATE_TYPED_ARRAY
)
#
undef
CREATE_TYPED_ARRAY
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
}
TypedArrayObject
*
js
:
:
NewTypedArrayWithTemplateAndBuffer
(
JSContext
*
cx
HandleObject
templateObj
HandleObject
arrayBuffer
HandleValue
byteOffset
HandleValue
length
)
{
MOZ_ASSERT
(
templateObj
-
>
is
<
TypedArrayObject
>
(
)
)
;
TypedArrayObject
*
tobj
=
&
templateObj
-
>
as
<
TypedArrayObject
>
(
)
;
switch
(
tobj
-
>
type
(
)
)
{
#
define
CREATE_TYPED_ARRAY
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
TypedArrayObjectTemplate
<
T
>
:
:
makeTypedArrayWithTemplate
(
\
cx
tobj
arrayBuffer
byteOffset
length
)
;
JS_FOR_EACH_TYPED_ARRAY
(
CREATE_TYPED_ARRAY
)
#
undef
CREATE_TYPED_ARRAY
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
}
TypedArrayObject
*
js
:
:
NewUint8ArrayWithLength
(
JSContext
*
cx
int32_t
len
gc
:
:
Heap
heap
)
{
return
TypedArrayObjectTemplate
<
uint8_t
>
:
:
fromLength
(
cx
len
nullptr
heap
)
;
}
template
<
typename
T
>
TypedArrayObject
*
TypedArrayObjectTemplate
<
T
>
:
:
fromArray
(
JSContext
*
cx
HandleObject
other
HandleObject
proto
)
{
if
(
other
-
>
is
<
TypedArrayObject
>
(
)
)
{
return
fromTypedArray
(
cx
other
false
proto
)
;
}
if
(
other
-
>
is
<
WrapperObject
>
(
)
&
&
UncheckedUnwrap
(
other
)
-
>
is
<
TypedArrayObject
>
(
)
)
{
return
fromTypedArray
(
cx
other
true
proto
)
;
}
return
fromObject
(
cx
other
proto
)
;
}
template
<
typename
T
>
TypedArrayObject
*
TypedArrayObjectTemplate
<
T
>
:
:
fromTypedArray
(
JSContext
*
cx
HandleObject
other
bool
isWrapped
HandleObject
proto
)
{
MOZ_ASSERT_IF
(
!
isWrapped
other
-
>
is
<
TypedArrayObject
>
(
)
)
;
MOZ_ASSERT_IF
(
isWrapped
other
-
>
is
<
WrapperObject
>
(
)
&
&
UncheckedUnwrap
(
other
)
-
>
is
<
TypedArrayObject
>
(
)
)
;
Rooted
<
TypedArrayObject
*
>
srcArray
(
cx
)
;
if
(
!
isWrapped
)
{
srcArray
=
&
other
-
>
as
<
TypedArrayObject
>
(
)
;
}
else
{
srcArray
=
other
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
if
(
!
srcArray
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
}
auto
srcLength
=
srcArray
-
>
length
(
)
;
if
(
!
srcLength
)
{
ReportOutOfBounds
(
cx
srcArray
)
;
return
nullptr
;
}
size_t
elementLength
=
*
srcLength
;
Rooted
<
ArrayBufferObject
*
>
buffer
(
cx
)
;
if
(
!
maybeCreateArrayBuffer
(
cx
elementLength
&
buffer
)
)
{
return
nullptr
;
}
if
(
Scalar
:
:
isBigIntType
(
ArrayTypeID
(
)
)
!
=
Scalar
:
:
isBigIntType
(
srcArray
-
>
type
(
)
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_NOT_COMPATIBLE
srcArray
-
>
getClass
(
)
-
>
name
TypedArrayObject
:
:
fixedLengthClasses
[
ArrayTypeID
(
)
]
.
name
)
;
return
nullptr
;
}
Rooted
<
TypedArrayObject
*
>
obj
(
cx
FixedLengthTypedArray
:
:
makeInstance
(
cx
buffer
0
elementLength
proto
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
MOZ_RELEASE_ASSERT
(
!
srcArray
-
>
hasDetachedBuffer
(
)
)
;
MOZ_ASSERT
(
!
obj
-
>
isSharedMemory
(
)
)
;
if
(
srcArray
-
>
isSharedMemory
(
)
)
{
if
(
!
ElementSpecific
<
T
SharedOps
>
:
:
setFromTypedArray
(
obj
elementLength
srcArray
elementLength
0
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
setFromTypedArray
can
only
fail
for
overlapping
buffers
"
)
;
return
nullptr
;
}
}
else
{
if
(
!
ElementSpecific
<
T
UnsharedOps
>
:
:
setFromTypedArray
(
obj
elementLength
srcArray
elementLength
0
)
)
{
MOZ_ASSERT_UNREACHABLE
(
"
setFromTypedArray
can
only
fail
for
overlapping
buffers
"
)
;
return
nullptr
;
}
}
return
obj
;
}
static
MOZ_ALWAYS_INLINE
bool
IsOptimizableInit
(
JSContext
*
cx
HandleObject
iterable
bool
*
optimized
)
{
MOZ_ASSERT
(
!
*
optimized
)
;
if
(
!
IsPackedArray
(
iterable
)
)
{
return
true
;
}
ForOfPIC
:
:
Chain
*
stubChain
=
ForOfPIC
:
:
getOrCreate
(
cx
)
;
if
(
!
stubChain
)
{
return
false
;
}
return
stubChain
-
>
tryOptimizeArray
(
cx
iterable
.
as
<
ArrayObject
>
(
)
optimized
)
;
}
template
<
typename
T
>
TypedArrayObject
*
TypedArrayObjectTemplate
<
T
>
:
:
fromObject
(
JSContext
*
cx
HandleObject
other
HandleObject
proto
)
{
bool
optimized
=
false
;
if
(
!
IsOptimizableInit
(
cx
other
&
optimized
)
)
{
return
nullptr
;
}
if
(
optimized
)
{
Handle
<
ArrayObject
*
>
array
=
other
.
as
<
ArrayObject
>
(
)
;
size_t
len
=
array
-
>
getDenseInitializedLength
(
)
;
Rooted
<
ArrayBufferObject
*
>
buffer
(
cx
)
;
if
(
!
maybeCreateArrayBuffer
(
cx
len
&
buffer
)
)
{
return
nullptr
;
}
Rooted
<
FixedLengthTypedArrayObject
*
>
obj
(
cx
FixedLengthTypedArray
:
:
makeInstance
(
cx
buffer
0
len
proto
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
obj
-
>
isSharedMemory
(
)
)
;
if
(
!
ElementSpecific
<
T
UnsharedOps
>
:
:
initFromIterablePackedArray
(
cx
obj
array
)
)
{
return
nullptr
;
}
return
obj
;
}
RootedValue
callee
(
cx
)
;
RootedId
iteratorId
(
cx
PropertyKey
:
:
Symbol
(
cx
-
>
wellKnownSymbols
(
)
.
iterator
)
)
;
if
(
!
GetProperty
(
cx
other
other
iteratorId
&
callee
)
)
{
return
nullptr
;
}
RootedObject
arrayLike
(
cx
)
;
if
(
!
callee
.
isNullOrUndefined
(
)
)
{
if
(
!
callee
.
isObject
(
)
|
|
!
callee
.
toObject
(
)
.
isCallable
(
)
)
{
RootedValue
otherVal
(
cx
ObjectValue
(
*
other
)
)
;
UniqueChars
bytes
=
DecompileValueGenerator
(
cx
JSDVG_SEARCH_STACK
otherVal
nullptr
)
;
if
(
!
bytes
)
{
return
nullptr
;
}
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_ITERABLE
bytes
.
get
(
)
)
;
return
nullptr
;
}
FixedInvokeArgs
<
2
>
args2
(
cx
)
;
args2
[
0
]
.
setObject
(
*
other
)
;
args2
[
1
]
.
set
(
callee
)
;
RootedValue
rval
(
cx
)
;
if
(
!
CallSelfHostedFunction
(
cx
cx
-
>
names
(
)
.
IterableToList
UndefinedHandleValue
args2
&
rval
)
)
{
return
nullptr
;
}
arrayLike
=
&
rval
.
toObject
(
)
;
}
else
{
arrayLike
=
other
;
}
uint64_t
len
;
if
(
!
GetLengthProperty
(
cx
arrayLike
&
len
)
)
{
return
nullptr
;
}
Rooted
<
ArrayBufferObject
*
>
buffer
(
cx
)
;
if
(
!
maybeCreateArrayBuffer
(
cx
len
&
buffer
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
len
<
=
ByteLengthLimit
/
BYTES_PER_ELEMENT
)
;
Rooted
<
TypedArrayObject
*
>
obj
(
cx
FixedLengthTypedArray
:
:
makeInstance
(
cx
buffer
0
len
proto
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
obj
-
>
isSharedMemory
(
)
)
;
if
(
!
ElementSpecific
<
T
UnsharedOps
>
:
:
setFromNonTypedArray
(
cx
obj
arrayLike
len
)
)
{
return
nullptr
;
}
return
obj
;
}
static
bool
TypedArrayConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_CALL_OR_CONSTRUCT
args
.
isConstructing
(
)
?
"
construct
"
:
"
call
"
)
;
return
false
;
}
template
<
typename
T
>
static
bool
GetTemplateObjectForNative
(
JSContext
*
cx
const
JS
:
:
HandleValueArray
args
MutableHandleObject
res
)
{
if
(
args
.
length
(
)
=
=
0
)
{
return
true
;
}
HandleValue
arg
=
args
[
0
]
;
if
(
arg
.
isInt32
(
)
)
{
uint32_t
len
=
0
;
if
(
arg
.
toInt32
(
)
>
=
0
)
{
len
=
arg
.
toInt32
(
)
;
}
size_t
nbytes
;
if
(
!
js
:
:
CalculateAllocSize
<
T
>
(
len
&
nbytes
)
|
|
nbytes
>
TypedArrayObject
:
:
ByteLengthLimit
)
{
return
true
;
}
res
.
set
(
FixedLengthTypedArrayObjectTemplate
<
T
>
:
:
makeTemplateObject
(
cx
len
)
)
;
return
!
!
res
;
}
if
(
!
arg
.
isObject
(
)
)
{
return
true
;
}
auto
*
obj
=
&
arg
.
toObject
(
)
;
if
(
IsWrapper
(
obj
)
)
{
return
true
;
}
uint32_t
len
=
0
;
if
(
!
obj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
|
|
!
obj
-
>
as
<
ArrayBufferObjectMaybeShared
>
(
)
.
isResizable
(
)
)
{
res
.
set
(
FixedLengthTypedArrayObjectTemplate
<
T
>
:
:
makeTemplateObject
(
cx
len
)
)
;
}
else
{
res
.
set
(
ResizableTypedArrayObjectTemplate
<
T
>
:
:
makeTemplateObject
(
cx
)
)
;
}
return
!
!
res
;
}
bool
TypedArrayObject
:
:
GetTemplateObjectForNative
(
JSContext
*
cx
Native
native
const
JS
:
:
HandleValueArray
args
MutableHandleObject
res
)
{
MOZ_ASSERT
(
!
res
)
;
#
define
CHECK_TYPED_ARRAY_CONSTRUCTOR
(
_
T
N
)
\
if
(
native
=
=
&
TypedArrayObjectTemplate
<
T
>
:
:
class_constructor
)
{
\
return
:
:
GetTemplateObjectForNative
<
T
>
(
cx
args
res
)
;
\
}
JS_FOR_EACH_TYPED_ARRAY
(
CHECK_TYPED_ARRAY_CONSTRUCTOR
)
#
undef
CHECK_TYPED_ARRAY_CONSTRUCTOR
return
true
;
}
static
bool
LengthGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
tarr
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
tarr
-
>
length
(
)
.
valueOr
(
0
)
)
;
return
true
;
}
static
bool
TypedArray_lengthGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
LengthGetterImpl
>
(
cx
args
)
;
}
static
bool
ByteOffsetGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
tarr
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
tarr
-
>
byteOffset
(
)
.
valueOr
(
0
)
)
;
return
true
;
}
static
bool
TypedArray_byteOffsetGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
ByteOffsetGetterImpl
>
(
cx
args
)
;
}
static
bool
ByteLengthGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
tarr
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
tarr
-
>
byteLength
(
)
.
valueOr
(
0
)
)
;
return
true
;
}
static
bool
TypedArray_byteLengthGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
ByteLengthGetterImpl
>
(
cx
args
)
;
}
static
bool
BufferGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
MOZ_ASSERT
(
IsTypedArrayObject
(
args
.
thisv
(
)
)
)
;
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
if
(
!
TypedArrayObject
:
:
ensureHasBuffer
(
cx
tarray
)
)
{
return
false
;
}
args
.
rval
(
)
.
set
(
tarray
-
>
bufferValue
(
)
)
;
return
true
;
}
static
bool
TypedArray_bufferGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
BufferGetterImpl
>
(
cx
args
)
;
}
static
bool
TypedArray_toStringTagGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
thisv
(
)
.
isObject
(
)
)
{
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
JSObject
*
obj
=
CheckedUnwrapStatic
(
&
args
.
thisv
(
)
.
toObject
(
)
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
false
;
}
if
(
!
obj
-
>
is
<
TypedArrayObject
>
(
)
)
{
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
JSProtoKey
protoKey
=
StandardProtoKeyOrNull
(
obj
)
;
MOZ_ASSERT
(
protoKey
)
;
args
.
rval
(
)
.
setString
(
ClassName
(
protoKey
cx
)
)
;
return
true
;
}
const
JSPropertySpec
TypedArrayObject
:
:
protoAccessors
[
]
=
{
JS_PSG
(
"
length
"
TypedArray_lengthGetter
0
)
JS_PSG
(
"
buffer
"
TypedArray_bufferGetter
0
)
JS_PSG
(
"
byteLength
"
TypedArray_byteLengthGetter
0
)
JS_PSG
(
"
byteOffset
"
TypedArray_byteOffsetGetter
0
)
JS_SYM_GET
(
toStringTag
TypedArray_toStringTagGetter
0
)
JS_PS_END
}
;
template
<
typename
T
>
static
inline
bool
SetFromTypedArray
(
Handle
<
TypedArrayObject
*
>
target
size_t
targetLength
Handle
<
TypedArrayObject
*
>
source
size_t
sourceLength
size_t
offset
)
{
if
(
target
-
>
isSharedMemory
(
)
|
|
source
-
>
isSharedMemory
(
)
)
{
return
ElementSpecific
<
T
SharedOps
>
:
:
setFromTypedArray
(
target
targetLength
source
sourceLength
offset
)
;
}
return
ElementSpecific
<
T
UnsharedOps
>
:
:
setFromTypedArray
(
target
targetLength
source
sourceLength
offset
)
;
}
template
<
typename
T
>
static
inline
bool
SetFromNonTypedArray
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
target
HandleObject
source
size_t
len
size_t
offset
)
{
MOZ_ASSERT
(
!
source
-
>
is
<
TypedArrayObject
>
(
)
"
use
SetFromTypedArray
"
)
;
if
(
target
-
>
isSharedMemory
(
)
)
{
return
ElementSpecific
<
T
SharedOps
>
:
:
setFromNonTypedArray
(
cx
target
source
len
offset
)
;
}
return
ElementSpecific
<
T
UnsharedOps
>
:
:
setFromNonTypedArray
(
cx
target
source
len
offset
)
;
}
static
bool
SetTypedArrayFromTypedArray
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
target
double
targetOffset
size_t
targetLength
Handle
<
TypedArrayObject
*
>
source
)
{
MOZ_ASSERT
(
targetOffset
>
=
0
)
;
MOZ_ASSERT
(
!
target
-
>
hasDetachedBuffer
(
)
)
;
auto
sourceLength
=
source
-
>
length
(
)
;
if
(
!
sourceLength
)
{
ReportOutOfBounds
(
cx
source
)
;
return
false
;
}
if
(
targetOffset
>
targetLength
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_INDEX
)
;
return
false
;
}
size_t
offset
=
size_t
(
targetOffset
)
;
if
(
*
sourceLength
>
targetLength
-
offset
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SOURCE_ARRAY_TOO_LONG
)
;
return
false
;
}
if
(
Scalar
:
:
isBigIntType
(
target
-
>
type
(
)
)
!
=
Scalar
:
:
isBigIntType
(
source
-
>
type
(
)
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_NOT_COMPATIBLE
source
-
>
getClass
(
)
-
>
name
target
-
>
getClass
(
)
-
>
name
)
;
return
false
;
}
switch
(
target
-
>
type
(
)
)
{
#
define
SET_FROM_TYPED_ARRAY
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
if
(
!
SetFromTypedArray
<
T
>
(
target
targetLength
source
*
sourceLength
\
offset
)
)
{
\
ReportOutOfMemory
(
cx
)
;
\
return
false
;
\
}
\
break
;
JS_FOR_EACH_TYPED_ARRAY
(
SET_FROM_TYPED_ARRAY
)
#
undef
SET_FROM_TYPED_ARRAY
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
return
true
;
}
static
bool
SetTypedArrayFromArrayLike
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
target
double
targetOffset
size_t
targetLength
HandleObject
src
)
{
MOZ_ASSERT
(
targetOffset
>
=
0
)
;
MOZ_ASSERT
(
target
-
>
length
(
)
.
isSome
(
)
)
;
uint64_t
srcLength
;
if
(
!
GetLengthProperty
(
cx
src
&
srcLength
)
)
{
return
false
;
}
if
(
targetOffset
>
targetLength
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_INDEX
)
;
return
false
;
}
size_t
offset
=
size_t
(
targetOffset
)
;
if
(
srcLength
>
targetLength
-
offset
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SOURCE_ARRAY_TOO_LONG
)
;
return
false
;
}
MOZ_ASSERT
(
srcLength
<
=
targetLength
)
;
if
(
srcLength
>
0
)
{
switch
(
target
-
>
type
(
)
)
{
#
define
SET_FROM_NON_TYPED_ARRAY
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
if
(
!
SetFromNonTypedArray
<
T
>
(
cx
target
src
srcLength
offset
)
)
\
return
false
;
\
break
;
JS_FOR_EACH_TYPED_ARRAY
(
SET_FROM_NON_TYPED_ARRAY
)
#
undef
SET_FROM_NON_TYPED_ARRAY
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
}
return
true
;
}
bool
TypedArrayObject
:
:
set_impl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
MOZ_ASSERT
(
IsTypedArrayObject
(
args
.
thisv
(
)
)
)
;
Rooted
<
TypedArrayObject
*
>
target
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
double
targetOffset
=
0
;
if
(
args
.
length
(
)
>
1
)
{
if
(
!
ToInteger
(
cx
args
[
1
]
&
targetOffset
)
)
{
return
false
;
}
if
(
targetOffset
<
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_INDEX
)
;
return
false
;
}
}
auto
targetLength
=
target
-
>
length
(
)
;
if
(
!
targetLength
)
{
ReportOutOfBounds
(
cx
target
)
;
return
false
;
}
RootedObject
src
(
cx
ToObject
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
src
)
{
return
false
;
}
Rooted
<
TypedArrayObject
*
>
srcTypedArray
(
cx
)
;
{
JSObject
*
obj
=
CheckedUnwrapStatic
(
src
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
false
;
}
if
(
obj
-
>
is
<
TypedArrayObject
>
(
)
)
{
srcTypedArray
=
&
obj
-
>
as
<
TypedArrayObject
>
(
)
;
}
}
if
(
srcTypedArray
)
{
if
(
!
SetTypedArrayFromTypedArray
(
cx
target
targetOffset
*
targetLength
srcTypedArray
)
)
{
return
false
;
}
}
else
{
if
(
!
SetTypedArrayFromArrayLike
(
cx
target
targetOffset
*
targetLength
src
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
bool
TypedArrayObject
:
:
set
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
TypedArrayObject
:
:
set_impl
>
(
cx
args
)
;
}
bool
TypedArrayObject
:
:
copyWithin_impl
(
JSContext
*
cx
const
CallArgs
&
args
)
{
MOZ_ASSERT
(
IsTypedArrayObject
(
args
.
thisv
(
)
)
)
;
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
auto
arrayLength
=
tarray
-
>
length
(
)
;
if
(
!
arrayLength
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
size_t
len
=
*
arrayLength
;
double
relativeTarget
;
if
(
!
ToInteger
(
cx
args
.
get
(
0
)
&
relativeTarget
)
)
{
return
false
;
}
uint64_t
to
;
if
(
relativeTarget
<
0
)
{
to
=
std
:
:
max
(
len
+
relativeTarget
0
.
0
)
;
}
else
{
to
=
std
:
:
min
(
relativeTarget
double
(
len
)
)
;
}
double
relativeStart
;
if
(
!
ToInteger
(
cx
args
.
get
(
1
)
&
relativeStart
)
)
{
return
false
;
}
uint64_t
from
;
if
(
relativeStart
<
0
)
{
from
=
std
:
:
max
(
len
+
relativeStart
0
.
0
)
;
}
else
{
from
=
std
:
:
min
(
relativeStart
double
(
len
)
)
;
}
double
relativeEnd
;
if
(
!
args
.
hasDefined
(
2
)
)
{
relativeEnd
=
len
;
}
else
{
if
(
!
ToInteger
(
cx
args
[
2
]
&
relativeEnd
)
)
{
return
false
;
}
}
uint64_t
final_
;
if
(
relativeEnd
<
0
)
{
final_
=
std
:
:
max
(
len
+
relativeEnd
0
.
0
)
;
}
else
{
final_
=
std
:
:
min
(
relativeEnd
double
(
len
)
)
;
}
MOZ_ASSERT
(
to
<
=
len
)
;
uint64_t
count
;
if
(
from
<
=
final_
)
{
count
=
std
:
:
min
(
final_
-
from
len
-
to
)
;
}
else
{
count
=
0
;
}
if
(
count
=
=
0
)
{
args
.
rval
(
)
.
setObject
(
*
tarray
)
;
return
true
;
}
arrayLength
=
tarray
-
>
length
(
)
;
if
(
!
arrayLength
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
if
(
*
arrayLength
<
len
)
{
MOZ_ASSERT
(
to
+
count
<
=
len
)
;
MOZ_ASSERT
(
from
+
count
<
=
len
)
;
len
=
*
arrayLength
;
if
(
to
>
=
len
|
|
from
>
=
len
)
{
args
.
rval
(
)
.
setObject
(
*
tarray
)
;
return
true
;
}
count
=
std
:
:
min
(
count
std
:
:
min
(
len
-
to
len
-
from
)
)
;
MOZ_ASSERT
(
count
>
0
)
;
}
const
size_t
ElementShift
=
TypedArrayShift
(
tarray
-
>
type
(
)
)
;
MOZ_ASSERT
(
(
SIZE_MAX
>
>
ElementShift
)
>
to
)
;
size_t
byteDest
=
to
<
<
ElementShift
;
MOZ_ASSERT
(
(
SIZE_MAX
>
>
ElementShift
)
>
from
)
;
size_t
byteSrc
=
from
<
<
ElementShift
;
MOZ_ASSERT
(
(
SIZE_MAX
>
>
ElementShift
)
>
=
count
)
;
size_t
byteSize
=
count
<
<
ElementShift
;
#
ifdef
DEBUG
{
size_t
viewByteLength
=
len
<
<
ElementShift
;
MOZ_ASSERT
(
byteSize
<
=
viewByteLength
)
;
MOZ_ASSERT
(
byteDest
<
viewByteLength
)
;
MOZ_ASSERT
(
byteSrc
<
viewByteLength
)
;
MOZ_ASSERT
(
byteDest
<
=
viewByteLength
-
byteSize
)
;
MOZ_ASSERT
(
byteSrc
<
=
viewByteLength
-
byteSize
)
;
}
#
endif
SharedMem
<
uint8_t
*
>
data
=
tarray
-
>
dataPointerEither
(
)
.
cast
<
uint8_t
*
>
(
)
;
if
(
tarray
-
>
isSharedMemory
(
)
)
{
jit
:
:
AtomicOperations
:
:
memmoveSafeWhenRacy
(
data
+
byteDest
data
+
byteSrc
byteSize
)
;
}
else
{
memmove
(
data
.
unwrapUnshared
(
)
+
byteDest
data
.
unwrapUnshared
(
)
+
byteSrc
byteSize
)
;
}
args
.
rval
(
)
.
setObject
(
*
tarray
)
;
return
true
;
}
bool
TypedArrayObject
:
:
copyWithin
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
AutoJSMethodProfilerEntry
pseudoFrame
(
cx
"
[
TypedArray
]
.
prototype
"
"
copyWithin
"
)
;
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTypedArrayObject
TypedArrayObject
:
:
copyWithin_impl
>
(
cx
args
)
;
}
using
ByteVector
=
js
:
:
Vector
<
uint8_t
FixedLengthTypedArrayObject
:
:
INLINE_BUFFER_LIMIT
>
;
class
ByteSink
final
{
ByteVector
&
bytes_
;
public
:
explicit
ByteSink
(
ByteVector
&
bytes
)
:
bytes_
(
bytes
)
{
MOZ_ASSERT
(
bytes
.
empty
(
)
)
;
}
constexpr
bool
canAppend
(
size_t
n
=
1
)
const
{
return
true
;
}
template
<
typename
.
.
.
Args
>
bool
append
(
Args
.
.
.
args
)
{
if
(
!
bytes_
.
reserve
(
bytes_
.
length
(
)
+
sizeof
.
.
.
(
args
)
)
)
{
return
false
;
}
(
bytes_
.
infallibleAppend
(
args
)
.
.
.
)
;
return
true
;
}
}
;
class
TypedArraySink
final
{
Handle
<
TypedArrayObject
*
>
typedArray_
;
size_t
maxLength_
;
size_t
index_
=
0
;
public
:
TypedArraySink
(
Handle
<
TypedArrayObject
*
>
typedArray
size_t
maxLength
)
:
typedArray_
(
typedArray
)
maxLength_
(
maxLength
)
{
MOZ_ASSERT
(
typedArray
-
>
type
(
)
=
=
Scalar
:
:
Uint8
)
;
MOZ_ASSERT
(
!
typedArray
-
>
hasDetachedBuffer
(
)
)
;
MOZ_ASSERT
(
typedArray
-
>
length
(
)
.
valueOr
(
0
)
>
=
maxLength
)
;
}
size_t
written
(
)
const
{
return
index_
;
}
bool
canAppend
(
size_t
n
=
1
)
const
{
return
maxLength_
-
index_
>
=
n
;
}
template
<
typename
.
.
.
Args
>
bool
append
(
Args
.
.
.
args
)
{
MOZ_ASSERT
(
canAppend
(
sizeof
.
.
.
(
args
)
)
)
;
(
TypedArrayObjectTemplate
<
uint8_t
>
:
:
setIndex
(
*
typedArray_
index_
+
+
args
)
.
.
.
)
;
return
true
;
}
}
;
static
UniqueChars
QuoteString
(
JSContext
*
cx
char16_t
ch
)
{
Sprinter
sprinter
(
cx
)
;
if
(
!
sprinter
.
init
(
)
)
{
return
nullptr
;
}
StringEscape
esc
{
}
;
js
:
:
EscapePrinter
ep
(
sprinter
esc
)
;
ep
.
putChar
(
ch
)
;
return
sprinter
.
release
(
)
;
}
template
<
class
Sink
>
static
bool
FromHex
(
JSContext
*
cx
Handle
<
JSString
*
>
string
Sink
&
sink
size_t
*
readLength
)
{
size_t
length
=
string
-
>
length
(
)
;
if
(
length
%
2
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_HEX_STRING_LENGTH
)
;
return
false
;
}
JSLinearString
*
linear
=
string
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
size_t
index
=
0
;
while
(
index
<
length
&
&
sink
.
canAppend
(
)
)
{
char16_t
c0
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
char16_t
c1
=
linear
-
>
latin1OrTwoByteChar
(
index
+
1
)
;
if
(
MOZ_UNLIKELY
(
!
mozilla
:
:
IsAsciiHexDigit
(
c0
)
|
|
!
mozilla
:
:
IsAsciiHexDigit
(
c1
)
)
)
{
char16_t
ch
=
!
mozilla
:
:
IsAsciiHexDigit
(
c0
)
?
c0
:
c1
;
if
(
auto
str
=
QuoteString
(
cx
ch
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_HEX_DIGIT
str
.
get
(
)
)
;
}
return
false
;
}
index
+
=
2
;
uint8_t
byte
=
(
mozilla
:
:
AsciiAlphanumericToNumber
(
c0
)
<
<
4
)
+
mozilla
:
:
AsciiAlphanumericToNumber
(
c1
)
;
if
(
!
sink
.
append
(
byte
)
)
{
return
false
;
}
}
*
readLength
=
index
;
return
true
;
}
namespace
Base64
{
static
constexpr
uint8_t
InvalidChar
=
UINT8_MAX
;
static
constexpr
auto
DecodeTable
(
const
char
(
&
alphabet
)
[
65
]
)
{
std
:
:
array
<
uint8_t
128
>
result
=
{
}
;
for
(
auto
&
e
:
result
)
{
e
=
InvalidChar
;
}
for
(
uint8_t
i
=
0
;
i
<
64
;
+
+
i
)
{
result
[
alphabet
[
i
]
]
=
i
;
}
return
result
;
}
}
namespace
Base64
:
:
Encode
{
static
constexpr
const
char
Base64
[
]
=
"
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
+
/
"
;
static_assert
(
std
:
:
char_traits
<
char
>
:
:
length
(
Base64
)
=
=
64
)
;
static
constexpr
const
char
Base64Url
[
]
=
"
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
-
_
"
;
static_assert
(
std
:
:
char_traits
<
char
>
:
:
length
(
Base64Url
)
=
=
64
)
;
}
namespace
Base64
:
:
Decode
{
static
constexpr
auto
Base64
=
DecodeTable
(
Base64
:
:
Encode
:
:
Base64
)
;
static_assert
(
Base64
.
size
(
)
=
=
128
"
128
elements
to
allow
access
through
ASCII
characters
"
)
;
static
constexpr
auto
Base64Url
=
DecodeTable
(
Base64
:
:
Encode
:
:
Base64Url
)
;
static_assert
(
Base64Url
.
size
(
)
=
=
128
"
128
elements
to
allow
access
through
ASCII
characters
"
)
;
}
enum
class
Alphabet
{
Base64
Base64Url
}
;
enum
class
LastChunkHandling
{
Loose
Strict
StopBeforePartial
}
;
template
<
class
Sink
>
static
bool
FromBase64
(
JSContext
*
cx
Handle
<
JSString
*
>
string
Alphabet
alphabet
LastChunkHandling
lastChunkHandling
Sink
&
sink
size_t
*
readLength
)
{
if
(
!
sink
.
canAppend
(
)
)
{
*
readLength
=
0
;
return
true
;
}
JSLinearString
*
linear
=
string
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
auto
decodeChunk
=
[
&
]
(
uint32_t
chunk
)
{
MOZ_ASSERT
(
chunk
<
=
0xffffff
)
;
return
sink
.
append
(
chunk
>
>
16
chunk
>
>
8
chunk
)
;
}
;
auto
decodeChunk3
=
[
&
]
(
uint32_t
chunk
bool
throwOnExtraBits
)
{
MOZ_ASSERT
(
chunk
<
=
0x3ffff
)
;
if
(
throwOnExtraBits
&
&
(
chunk
&
0x3
)
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_EXTRA_BASE64_BITS
)
;
return
false
;
}
return
sink
.
append
(
chunk
>
>
10
chunk
>
>
2
)
;
}
;
auto
decodeChunk2
=
[
&
]
(
uint32_t
chunk
bool
throwOnExtraBits
)
{
MOZ_ASSERT
(
chunk
<
=
0xfff
)
;
if
(
throwOnExtraBits
&
&
(
chunk
&
0xf
)
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_EXTRA_BASE64_BITS
)
;
return
false
;
}
return
sink
.
append
(
chunk
>
>
4
)
;
}
;
auto
decodePartialChunk
=
[
&
]
(
uint32_t
chunk
uint32_t
chunkLength
bool
throwOnExtraBits
=
false
)
{
MOZ_ASSERT
(
chunkLength
=
=
2
|
|
chunkLength
=
=
3
)
;
return
chunkLength
=
=
2
?
decodeChunk2
(
chunk
throwOnExtraBits
)
:
decodeChunk3
(
chunk
throwOnExtraBits
)
;
}
;
size_t
read
=
0
;
uint32_t
chunk
=
0
;
size_t
chunkLength
=
0
;
size_t
index
=
0
;
size_t
length
=
linear
-
>
length
(
)
;
const
auto
&
decode
=
alphabet
=
=
Alphabet
:
:
Base64
?
Base64
:
:
Decode
:
:
Base64
:
Base64
:
:
Decode
:
:
Base64Url
;
for
(
;
index
<
length
;
index
+
+
)
{
char16_t
ch
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
if
(
mozilla
:
:
IsAsciiWhitespace
(
ch
)
)
{
continue
;
}
if
(
ch
=
=
'
=
'
)
{
break
;
}
uint8_t
value
=
Base64
:
:
InvalidChar
;
if
(
mozilla
:
:
IsAscii
(
ch
)
)
{
value
=
decode
[
ch
]
;
}
if
(
MOZ_UNLIKELY
(
value
=
=
Base64
:
:
InvalidChar
)
)
{
if
(
auto
str
=
QuoteString
(
cx
ch
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_BASE64_CHAR
str
.
get
(
)
)
;
}
return
false
;
}
if
(
chunkLength
>
1
&
&
!
sink
.
canAppend
(
chunkLength
)
)
{
*
readLength
=
read
;
return
true
;
}
chunk
=
(
chunk
<
<
6
)
|
value
;
chunkLength
+
=
1
;
if
(
chunkLength
=
=
4
)
{
if
(
!
decodeChunk
(
chunk
)
)
{
return
false
;
}
chunk
=
0
;
chunkLength
=
0
;
read
=
index
+
1
;
if
(
!
sink
.
canAppend
(
)
)
{
*
readLength
=
read
;
return
true
;
}
}
}
if
(
index
=
=
length
)
{
if
(
chunkLength
>
0
)
{
if
(
lastChunkHandling
=
=
LastChunkHandling
:
:
StopBeforePartial
)
{
*
readLength
=
read
;
return
true
;
}
if
(
lastChunkHandling
=
=
LastChunkHandling
:
:
Loose
)
{
if
(
chunkLength
=
=
1
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_INCOMPLETE_CHUNK
)
;
return
false
;
}
MOZ_ASSERT
(
chunkLength
=
=
2
|
|
chunkLength
=
=
3
)
;
if
(
!
decodePartialChunk
(
chunk
chunkLength
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
lastChunkHandling
=
=
LastChunkHandling
:
:
Strict
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_INCOMPLETE_CHUNK
)
;
return
false
;
}
}
*
readLength
=
length
;
return
true
;
}
MOZ_ASSERT
(
index
<
length
)
;
MOZ_ASSERT
(
linear
-
>
latin1OrTwoByteChar
(
index
)
=
=
'
=
'
)
;
if
(
chunkLength
<
2
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_INCOMPLETE_CHUNK
)
;
return
false
;
}
MOZ_ASSERT
(
chunkLength
=
=
2
|
|
chunkLength
=
=
3
)
;
while
(
+
+
index
<
length
)
{
char16_t
ch
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
if
(
!
mozilla
:
:
IsAsciiWhitespace
(
ch
)
)
{
break
;
}
}
if
(
chunkLength
=
=
2
)
{
if
(
index
=
=
length
)
{
if
(
lastChunkHandling
=
=
LastChunkHandling
:
:
StopBeforePartial
)
{
*
readLength
=
read
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_MISSING_BASE64_PADDING
)
;
return
false
;
}
char16_t
ch
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
if
(
ch
=
=
'
=
'
)
{
while
(
+
+
index
<
length
)
{
char16_t
ch
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
if
(
!
mozilla
:
:
IsAsciiWhitespace
(
ch
)
)
{
break
;
}
}
}
}
if
(
index
<
length
)
{
char16_t
ch
=
linear
-
>
latin1OrTwoByteChar
(
index
)
;
if
(
auto
str
=
QuoteString
(
cx
ch
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_BASE64_AFTER_PADDING
str
.
get
(
)
)
;
}
return
false
;
}
bool
throwOnExtraBits
=
lastChunkHandling
=
=
LastChunkHandling
:
:
Strict
;
if
(
!
decodePartialChunk
(
chunk
chunkLength
throwOnExtraBits
)
)
{
return
false
;
}
*
readLength
=
length
;
return
true
;
}
static
bool
GetAlphabetOption
(
JSContext
*
cx
Handle
<
JSObject
*
>
options
Alphabet
*
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
alphabet
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
*
result
=
Alphabet
:
:
Base64
;
return
true
;
}
if
(
!
value
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
value
nullptr
"
not
a
string
"
)
;
}
auto
*
linear
=
value
.
toString
(
)
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
if
(
StringEqualsAscii
(
linear
"
base64
"
)
)
{
*
result
=
Alphabet
:
:
Base64
;
return
true
;
}
if
(
StringEqualsAscii
(
linear
"
base64url
"
)
)
{
*
result
=
Alphabet
:
:
Base64Url
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_BASE64_ALPHABET
)
;
return
false
;
}
static
bool
GetLastChunkHandlingOption
(
JSContext
*
cx
Handle
<
JSObject
*
>
options
LastChunkHandling
*
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
lastChunkHandling
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
*
result
=
LastChunkHandling
:
:
Loose
;
return
true
;
}
if
(
!
value
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
value
nullptr
"
not
a
string
"
)
;
}
auto
*
linear
=
value
.
toString
(
)
-
>
ensureLinear
(
cx
)
;
if
(
!
linear
)
{
return
false
;
}
if
(
StringEqualsAscii
(
linear
"
loose
"
)
)
{
*
result
=
LastChunkHandling
:
:
Loose
;
return
true
;
}
if
(
StringEqualsAscii
(
linear
"
strict
"
)
)
{
*
result
=
LastChunkHandling
:
:
Strict
;
return
true
;
}
if
(
StringEqualsAscii
(
linear
"
stop
-
before
-
partial
"
)
)
{
*
result
=
LastChunkHandling
:
:
StopBeforePartial
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TYPED_ARRAY_BAD_BASE64_LAST_CHUNK_HANDLING
)
;
return
false
;
}
enum
class
OmitPadding
:
bool
{
No
Yes
}
;
static
bool
GetOmitPaddingOption
(
JSContext
*
cx
Handle
<
JSObject
*
>
options
OmitPadding
*
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
omitPadding
&
value
)
)
{
return
false
;
}
*
result
=
static_cast
<
OmitPadding
>
(
JS
:
:
ToBoolean
(
value
)
)
;
return
true
;
}
static
bool
uint8array_fromBase64
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
get
(
0
)
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_SEARCH_STACK
args
.
get
(
0
)
nullptr
"
not
a
string
"
)
;
}
Rooted
<
JSString
*
>
string
(
cx
args
[
0
]
.
toString
(
)
)
;
auto
alphabet
=
Alphabet
:
:
Base64
;
auto
lastChunkHandling
=
LastChunkHandling
:
:
Loose
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
fromBase64
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetAlphabetOption
(
cx
options
&
alphabet
)
)
{
return
false
;
}
if
(
!
GetLastChunkHandlingOption
(
cx
options
&
lastChunkHandling
)
)
{
return
false
;
}
}
ByteVector
bytes
(
cx
)
;
ByteSink
sink
{
bytes
}
;
size_t
unusedReadLength
;
if
(
!
FromBase64
(
cx
string
alphabet
lastChunkHandling
sink
&
unusedReadLength
)
)
{
return
false
;
}
size_t
resultLength
=
bytes
.
length
(
)
;
auto
*
tarray
=
TypedArrayObjectTemplate
<
uint8_t
>
:
:
fromLength
(
cx
resultLength
)
;
if
(
!
tarray
)
{
return
false
;
}
auto
target
=
SharedMem
<
uint8_t
*
>
:
:
unshared
(
tarray
-
>
dataPointerUnshared
(
)
)
;
auto
source
=
SharedMem
<
uint8_t
*
>
:
:
unshared
(
bytes
.
begin
(
)
)
;
UnsharedOps
:
:
podCopy
(
target
source
resultLength
)
;
args
.
rval
(
)
.
setObject
(
*
tarray
)
;
return
true
;
}
static
bool
uint8array_fromHex
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
get
(
0
)
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_SEARCH_STACK
args
.
get
(
0
)
nullptr
"
not
a
string
"
)
;
}
Rooted
<
JSString
*
>
string
(
cx
args
[
0
]
.
toString
(
)
)
;
ByteVector
bytes
(
cx
)
;
ByteSink
sink
{
bytes
}
;
size_t
unusedReadLength
;
if
(
!
FromHex
(
cx
string
sink
&
unusedReadLength
)
)
{
return
false
;
}
size_t
resultLength
=
bytes
.
length
(
)
;
auto
*
tarray
=
TypedArrayObjectTemplate
<
uint8_t
>
:
:
fromLength
(
cx
resultLength
)
;
if
(
!
tarray
)
{
return
false
;
}
auto
target
=
SharedMem
<
uint8_t
*
>
:
:
unshared
(
tarray
-
>
dataPointerUnshared
(
)
)
;
auto
source
=
SharedMem
<
uint8_t
*
>
:
:
unshared
(
bytes
.
begin
(
)
)
;
UnsharedOps
:
:
podCopy
(
target
source
resultLength
)
;
args
.
rval
(
)
.
setObject
(
*
tarray
)
;
return
true
;
}
static
bool
uint8array_setFromBase64
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
if
(
!
args
.
get
(
0
)
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_SEARCH_STACK
args
.
get
(
0
)
nullptr
"
not
a
string
"
)
;
}
Rooted
<
JSString
*
>
string
(
cx
args
[
0
]
.
toString
(
)
)
;
auto
alphabet
=
Alphabet
:
:
Base64
;
auto
lastChunkHandling
=
LastChunkHandling
:
:
Loose
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
setFromBase64
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetAlphabetOption
(
cx
options
&
alphabet
)
)
{
return
false
;
}
if
(
!
GetLastChunkHandlingOption
(
cx
options
&
lastChunkHandling
)
)
{
return
false
;
}
}
auto
length
=
tarray
-
>
length
(
)
;
if
(
!
length
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
ByteVector
bytes
(
cx
)
;
TypedArraySink
sink
{
tarray
*
length
}
;
size_t
readLength
;
if
(
!
FromBase64
(
cx
string
alphabet
lastChunkHandling
sink
&
readLength
)
)
{
return
false
;
}
size_t
written
=
sink
.
written
(
)
;
Rooted
<
PlainObject
*
>
result
(
cx
NewPlainObject
(
cx
)
)
;
if
(
!
result
)
{
return
false
;
}
Rooted
<
Value
>
readValue
(
cx
NumberValue
(
readLength
)
)
;
if
(
!
DefineDataProperty
(
cx
result
cx
-
>
names
(
)
.
read
readValue
)
)
{
return
false
;
}
Rooted
<
Value
>
writtenValue
(
cx
NumberValue
(
written
)
)
;
if
(
!
DefineDataProperty
(
cx
result
cx
-
>
names
(
)
.
written
writtenValue
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
uint8array_setFromBase64
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsUint8ArrayObject
uint8array_setFromBase64
>
(
cx
args
)
;
}
static
bool
uint8array_setFromHex
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
if
(
!
args
.
get
(
0
)
.
isString
(
)
)
{
return
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_SEARCH_STACK
args
.
get
(
0
)
nullptr
"
not
a
string
"
)
;
}
Rooted
<
JSString
*
>
string
(
cx
args
[
0
]
.
toString
(
)
)
;
auto
length
=
tarray
-
>
length
(
)
;
if
(
!
length
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
TypedArraySink
sink
{
tarray
*
length
}
;
size_t
readLength
;
if
(
!
FromHex
(
cx
string
sink
&
readLength
)
)
{
return
false
;
}
size_t
written
=
sink
.
written
(
)
;
Rooted
<
PlainObject
*
>
result
(
cx
NewPlainObject
(
cx
)
)
;
if
(
!
result
)
{
return
false
;
}
Rooted
<
Value
>
readValue
(
cx
NumberValue
(
readLength
)
)
;
if
(
!
DefineDataProperty
(
cx
result
cx
-
>
names
(
)
.
read
readValue
)
)
{
return
false
;
}
Rooted
<
Value
>
writtenValue
(
cx
NumberValue
(
written
)
)
;
if
(
!
DefineDataProperty
(
cx
result
cx
-
>
names
(
)
.
written
writtenValue
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
uint8array_setFromHex
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsUint8ArrayObject
uint8array_setFromHex
>
(
cx
args
)
;
}
static
bool
uint8array_toBase64
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
auto
alphabet
=
Alphabet
:
:
Base64
;
auto
omitPadding
=
OmitPadding
:
:
No
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toBase64
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetAlphabetOption
(
cx
options
&
alphabet
)
)
{
return
false
;
}
if
(
!
GetOmitPaddingOption
(
cx
options
&
omitPadding
)
)
{
return
false
;
}
}
auto
length
=
tarray
-
>
length
(
)
;
if
(
!
length
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
auto
outLength
=
mozilla
:
:
CheckedInt
<
size_t
>
{
*
length
}
;
outLength
+
=
2
;
outLength
/
=
3
;
if
(
omitPadding
=
=
OmitPadding
:
:
No
)
{
outLength
*
=
4
;
}
else
{
outLength
+
=
*
length
;
}
if
(
!
outLength
.
isValid
(
)
|
|
outLength
.
value
(
)
>
JSString
:
:
MAX_LENGTH
)
{
ReportAllocationOverflow
(
cx
)
;
return
false
;
}
JSStringBuilder
sb
(
cx
)
;
if
(
!
sb
.
reserve
(
outLength
.
value
(
)
)
)
{
return
false
;
}
const
auto
&
base64Chars
=
alphabet
=
=
Alphabet
:
:
Base64
?
Base64
:
:
Encode
:
:
Base64
:
Base64
:
:
Encode
:
:
Base64Url
;
auto
encode
=
[
&
base64Chars
]
(
uint32_t
value
)
{
return
base64Chars
[
value
&
0x3f
]
;
}
;
auto
data
=
tarray
-
>
dataPointerEither
(
)
.
cast
<
uint8_t
*
>
(
)
;
auto
toRead
=
*
length
;
for
(
;
toRead
>
=
3
;
toRead
-
=
3
)
{
auto
byte0
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
byte1
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
byte2
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
u24
=
(
uint32_t
(
byte0
)
<
<
16
)
|
(
uint32_t
(
byte1
)
<
<
8
)
|
byte2
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
18
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
12
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
6
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
0
)
)
;
}
if
(
toRead
=
=
2
)
{
auto
byte0
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
byte1
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
u24
=
(
uint32_t
(
byte0
)
<
<
16
)
|
(
uint32_t
(
byte1
)
<
<
8
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
18
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
12
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
6
)
)
;
if
(
omitPadding
=
=
OmitPadding
:
:
No
)
{
sb
.
infallibleAppend
(
'
=
'
)
;
}
}
else
if
(
toRead
=
=
1
)
{
auto
byte0
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
+
)
;
auto
u24
=
uint32_t
(
byte0
)
<
<
16
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
18
)
)
;
sb
.
infallibleAppend
(
encode
(
u24
>
>
12
)
)
;
if
(
omitPadding
=
=
OmitPadding
:
:
No
)
{
sb
.
infallibleAppend
(
'
=
'
)
;
sb
.
infallibleAppend
(
'
=
'
)
;
}
}
else
{
MOZ_ASSERT
(
toRead
=
=
0
)
;
}
MOZ_ASSERT
(
sb
.
length
(
)
=
=
outLength
.
value
(
)
"
all
characters
were
written
"
)
;
auto
*
str
=
sb
.
finishString
(
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
uint8array_toBase64
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsUint8ArrayObject
uint8array_toBase64
>
(
cx
args
)
;
}
static
bool
uint8array_toHex
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TypedArrayObject
*
>
tarray
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TypedArrayObject
>
(
)
)
;
auto
length
=
tarray
-
>
length
(
)
;
if
(
!
length
)
{
ReportOutOfBounds
(
cx
tarray
)
;
return
false
;
}
static_assert
(
TypedArrayObject
:
:
ByteLengthLimit
<
=
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
/
2
)
;
MOZ_ASSERT
(
*
length
<
=
TypedArrayObject
:
:
ByteLengthLimit
)
;
size_t
outLength
=
*
length
*
2
;
if
(
outLength
>
JSString
:
:
MAX_LENGTH
)
{
ReportAllocationOverflow
(
cx
)
;
return
false
;
}
JSStringBuilder
sb
(
cx
)
;
if
(
!
sb
.
reserve
(
outLength
)
)
{
return
false
;
}
static
constexpr
char
HexDigits
[
]
=
"
0123456789abcdef
"
;
static_assert
(
std
:
:
char_traits
<
char
>
:
:
length
(
HexDigits
)
=
=
16
)
;
auto
data
=
tarray
-
>
dataPointerEither
(
)
.
cast
<
uint8_t
*
>
(
)
;
for
(
size_t
index
=
0
;
index
<
*
length
;
index
+
+
)
{
auto
byte
=
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
data
+
index
)
;
sb
.
infallibleAppend
(
HexDigits
[
byte
>
>
4
]
)
;
sb
.
infallibleAppend
(
HexDigits
[
byte
&
0xf
]
)
;
}
MOZ_ASSERT
(
sb
.
length
(
)
=
=
outLength
"
all
characters
were
written
"
)
;
auto
*
str
=
sb
.
finishString
(
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
uint8array_toHex
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsUint8ArrayObject
uint8array_toHex
>
(
cx
args
)
;
}
const
JSFunctionSpec
TypedArrayObject
:
:
protoFunctions
[
]
=
{
JS_SELF_HOSTED_FN
(
"
subarray
"
"
TypedArraySubarray
"
2
0
)
JS_FN
(
"
set
"
TypedArrayObject
:
:
set
1
0
)
JS_FN
(
"
copyWithin
"
TypedArrayObject
:
:
copyWithin
2
0
)
JS_SELF_HOSTED_FN
(
"
every
"
"
TypedArrayEvery
"
1
0
)
JS_SELF_HOSTED_FN
(
"
fill
"
"
TypedArrayFill
"
3
0
)
JS_SELF_HOSTED_FN
(
"
filter
"
"
TypedArrayFilter
"
1
0
)
JS_SELF_HOSTED_FN
(
"
find
"
"
TypedArrayFind
"
1
0
)
JS_SELF_HOSTED_FN
(
"
findIndex
"
"
TypedArrayFindIndex
"
1
0
)
JS_SELF_HOSTED_FN
(
"
findLast
"
"
TypedArrayFindLast
"
1
0
)
JS_SELF_HOSTED_FN
(
"
findLastIndex
"
"
TypedArrayFindLastIndex
"
1
0
)
JS_SELF_HOSTED_FN
(
"
forEach
"
"
TypedArrayForEach
"
1
0
)
JS_SELF_HOSTED_FN
(
"
indexOf
"
"
TypedArrayIndexOf
"
2
0
)
JS_SELF_HOSTED_FN
(
"
join
"
"
TypedArrayJoin
"
1
0
)
JS_SELF_HOSTED_FN
(
"
lastIndexOf
"
"
TypedArrayLastIndexOf
"
1
0
)
JS_SELF_HOSTED_FN
(
"
map
"
"
TypedArrayMap
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reduce
"
"
TypedArrayReduce
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reduceRight
"
"
TypedArrayReduceRight
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reverse
"
"
TypedArrayReverse
"
0
0
)
JS_SELF_HOSTED_FN
(
"
slice
"
"
TypedArraySlice
"
2
0
)
JS_SELF_HOSTED_FN
(
"
some
"
"
TypedArraySome
"
1
0
)
JS_TRAMPOLINE_FN
(
"
sort
"
TypedArrayObject
:
:
sort
1
0
TypedArraySort
)
JS_SELF_HOSTED_FN
(
"
entries
"
"
TypedArrayEntries
"
0
0
)
JS_SELF_HOSTED_FN
(
"
keys
"
"
TypedArrayKeys
"
0
0
)
JS_SELF_HOSTED_FN
(
"
values
"
"
TypedArrayValues
"
0
0
)
JS_SELF_HOSTED_SYM_FN
(
iterator
"
TypedArrayValues
"
0
0
)
JS_SELF_HOSTED_FN
(
"
includes
"
"
TypedArrayIncludes
"
2
0
)
JS_SELF_HOSTED_FN
(
"
toString
"
"
ArrayToString
"
0
0
)
JS_SELF_HOSTED_FN
(
"
toLocaleString
"
"
TypedArrayToLocaleString
"
2
0
)
JS_SELF_HOSTED_FN
(
"
at
"
"
TypedArrayAt
"
1
0
)
JS_SELF_HOSTED_FN
(
"
toReversed
"
"
TypedArrayToReversed
"
0
0
)
JS_SELF_HOSTED_FN
(
"
toSorted
"
"
TypedArrayToSorted
"
1
0
)
JS_SELF_HOSTED_FN
(
"
with
"
"
TypedArrayWith
"
2
0
)
JS_FS_END
}
;
const
JSFunctionSpec
TypedArrayObject
:
:
staticFunctions
[
]
=
{
JS_SELF_HOSTED_FN
(
"
from
"
"
TypedArrayStaticFrom
"
3
0
)
JS_SELF_HOSTED_FN
(
"
of
"
"
TypedArrayStaticOf
"
0
0
)
JS_FS_END
}
;
const
JSPropertySpec
TypedArrayObject
:
:
staticProperties
[
]
=
{
JS_SELF_HOSTED_SYM_GET
(
species
"
TypedArraySpecies
"
0
)
JS_PS_END
}
;
static
JSObject
*
CreateSharedTypedArrayPrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
return
GlobalObject
:
:
createBlankPrototype
(
cx
cx
-
>
global
(
)
&
TypedArrayObject
:
:
sharedTypedArrayPrototypeClass
)
;
}
static
const
ClassSpec
TypedArrayObjectSharedTypedArrayPrototypeClassSpec
=
{
GenericCreateConstructor
<
TypedArrayConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
CreateSharedTypedArrayPrototype
TypedArrayObject
:
:
staticFunctions
TypedArrayObject
:
:
staticProperties
TypedArrayObject
:
:
protoFunctions
TypedArrayObject
:
:
protoAccessors
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
const
JSClass
TypedArrayObject
:
:
sharedTypedArrayPrototypeClass
=
{
"
TypedArrayPrototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_TypedArray
)
JS_NULL_CLASS_OPS
&
TypedArrayObjectSharedTypedArrayPrototypeClassSpec
}
;
namespace
{
template
<
typename
NativeType
>
bool
TypedArrayObjectTemplate
<
NativeType
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
static_assert
(
sizeof
(
NativeType
)
<
4
"
this
method
must
only
handle
NativeType
values
that
are
"
"
always
exact
int32_t
values
"
)
;
*
vp
=
Int32Value
(
getIndex
(
tarray
index
)
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
int32_t
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
*
vp
=
Int32Value
(
getIndex
(
tarray
index
)
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
uint32_t
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
uint32_t
val
=
getIndex
(
tarray
index
)
;
*
vp
=
NumberValue
(
val
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
float16
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
float16
f16
=
getIndex
(
tarray
index
)
;
*
vp
=
JS
:
:
CanonicalizedDoubleValue
(
static_cast
<
double
>
(
f16
)
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
float
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
float
val
=
getIndex
(
tarray
index
)
;
double
dval
=
val
;
*
vp
=
JS
:
:
CanonicalizedDoubleValue
(
dval
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
double
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
double
val
=
getIndex
(
tarray
index
)
;
*
vp
=
JS
:
:
CanonicalizedDoubleValue
(
val
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
int64_t
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
return
false
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
uint64_t
>
:
:
getElementPure
(
TypedArrayObject
*
tarray
size_t
index
Value
*
vp
)
{
return
false
;
}
}
namespace
{
template
<
typename
NativeType
>
bool
TypedArrayObjectTemplate
<
NativeType
>
:
:
getElement
(
JSContext
*
cx
TypedArrayObject
*
tarray
size_t
index
MutableHandleValue
val
)
{
MOZ_ALWAYS_TRUE
(
getElementPure
(
tarray
index
val
.
address
(
)
)
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
int64_t
>
:
:
getElement
(
JSContext
*
cx
TypedArrayObject
*
tarray
size_t
index
MutableHandleValue
val
)
{
int64_t
n
=
getIndex
(
tarray
index
)
;
BigInt
*
res
=
BigInt
:
:
createFromInt64
(
cx
n
)
;
if
(
!
res
)
{
return
false
;
}
val
.
setBigInt
(
res
)
;
return
true
;
}
template
<
>
bool
TypedArrayObjectTemplate
<
uint64_t
>
:
:
getElement
(
JSContext
*
cx
TypedArrayObject
*
tarray
size_t
index
MutableHandleValue
val
)
{
uint64_t
n
=
getIndex
(
tarray
index
)
;
BigInt
*
res
=
BigInt
:
:
createFromUint64
(
cx
n
)
;
if
(
!
res
)
{
return
false
;
}
val
.
setBigInt
(
res
)
;
return
true
;
}
}
namespace
js
{
template
<
>
bool
TypedArrayObject
:
:
getElement
<
CanGC
>
(
JSContext
*
cx
size_t
index
MutableHandleValue
val
)
{
switch
(
type
(
)
)
{
#
define
GET_ELEMENT
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
TypedArrayObjectTemplate
<
T
>
:
:
getElement
(
cx
this
index
val
)
;
JS_FOR_EACH_TYPED_ARRAY
(
GET_ELEMENT
)
#
undef
GET_ELEMENT
case
Scalar
:
:
MaxTypedArrayViewType
:
case
Scalar
:
:
Int64
:
case
Scalar
:
:
Simd128
:
break
;
}
MOZ_CRASH
(
"
Unknown
TypedArray
type
"
)
;
}
template
<
>
bool
TypedArrayObject
:
:
getElement
<
NoGC
>
(
JSContext
*
cx
size_t
index
typename
MaybeRooted
<
Value
NoGC
>
:
:
MutableHandleType
vp
)
{
return
getElementPure
(
index
vp
.
address
(
)
)
;
}
}
bool
TypedArrayObject
:
:
getElementPure
(
size_t
index
Value
*
vp
)
{
switch
(
type
(
)
)
{
#
define
GET_ELEMENT_PURE
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
TypedArrayObjectTemplate
<
T
>
:
:
getElementPure
(
this
index
vp
)
;
JS_FOR_EACH_TYPED_ARRAY
(
GET_ELEMENT_PURE
)
#
undef
GET_ELEMENT
case
Scalar
:
:
MaxTypedArrayViewType
:
case
Scalar
:
:
Int64
:
case
Scalar
:
:
Simd128
:
break
;
}
MOZ_CRASH
(
"
Unknown
TypedArray
type
"
)
;
}
bool
TypedArrayObject
:
:
getElements
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
tarray
size_t
length
Value
*
vp
)
{
MOZ_ASSERT
(
length
<
=
tarray
-
>
length
(
)
.
valueOr
(
0
)
)
;
MOZ_ASSERT_IF
(
length
>
0
!
tarray
-
>
hasDetachedBuffer
(
)
)
;
switch
(
tarray
-
>
type
(
)
)
{
#
define
GET_ELEMENTS
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
+
+
vp
)
{
\
if
(
!
TypedArrayObjectTemplate
<
T
>
:
:
getElement
(
\
cx
tarray
i
MutableHandleValue
:
:
fromMarkedLocation
(
vp
)
)
)
{
\
return
false
;
\
}
\
}
\
return
true
;
JS_FOR_EACH_TYPED_ARRAY
(
GET_ELEMENTS
)
#
undef
GET_ELEMENTS
case
Scalar
:
:
MaxTypedArrayViewType
:
case
Scalar
:
:
Int64
:
case
Scalar
:
:
Simd128
:
break
;
}
MOZ_CRASH
(
"
Unknown
TypedArray
type
"
)
;
}
static
const
JSClassOps
TypedArrayClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
FixedLengthTypedArrayObject
:
:
finalize
nullptr
nullptr
ArrayBufferViewObject
:
:
trace
}
;
static
const
JSClassOps
ResizableTypedArrayClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
ArrayBufferViewObject
:
:
trace
}
;
static
const
ClassExtension
TypedArrayClassExtension
=
{
FixedLengthTypedArrayObject
:
:
objectMoved
}
;
static
const
JSPropertySpec
static_prototype_properties
[
Scalar
:
:
MaxTypedArrayViewType
]
[
2
]
=
{
#
define
IMPL_TYPED_ARRAY_PROPERTIES
(
ExternalType
NativeType
Name
)
\
{
\
JS_INT32_PS
(
"
BYTES_PER_ELEMENT
"
\
TypedArrayObjectTemplate
<
NativeType
>
:
:
BYTES_PER_ELEMENT
\
JSPROP_READONLY
|
JSPROP_PERMANENT
)
\
JS_PS_END
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_PROPERTIES
)
#
undef
IMPL_TYPED_ARRAY_PROPERTIES
}
;
static
const
JSFunctionSpec
uint8array_static_methods
[
]
=
{
JS_FN
(
"
fromBase64
"
uint8array_fromBase64
1
0
)
JS_FN
(
"
fromHex
"
uint8array_fromHex
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
uint8array_methods
[
]
=
{
JS_FN
(
"
setFromBase64
"
uint8array_setFromBase64
1
0
)
JS_FN
(
"
setFromHex
"
uint8array_setFromHex
1
0
)
JS_FN
(
"
toBase64
"
uint8array_toBase64
0
0
)
JS_FN
(
"
toHex
"
uint8array_toHex
0
0
)
JS_FS_END
}
;
static
constexpr
const
JSFunctionSpec
*
TypedArrayStaticMethods
(
Scalar
:
:
Type
type
)
{
if
(
type
=
=
Scalar
:
:
Uint8
)
{
return
uint8array_static_methods
;
}
return
nullptr
;
}
static
constexpr
const
JSFunctionSpec
*
TypedArrayMethods
(
Scalar
:
:
Type
type
)
{
if
(
type
=
=
Scalar
:
:
Uint8
)
{
return
uint8array_methods
;
}
return
nullptr
;
}
static
const
ClassSpec
TypedArrayObjectClassSpecs
[
Scalar
:
:
MaxTypedArrayViewType
]
=
{
#
define
IMPL_TYPED_ARRAY_CLASS_SPEC
(
ExternalType
NativeType
Name
)
\
{
\
TypedArrayObjectTemplate
<
NativeType
>
:
:
createConstructor
\
TypedArrayObjectTemplate
<
NativeType
>
:
:
createPrototype
\
TypedArrayStaticMethods
(
Scalar
:
:
Type
:
:
Name
)
\
static_prototype_properties
[
Scalar
:
:
Type
:
:
Name
]
\
TypedArrayMethods
(
Scalar
:
:
Type
:
:
Name
)
\
static_prototype_properties
[
Scalar
:
:
Type
:
:
Name
]
\
nullptr
\
JSProto_TypedArray
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_CLASS_SPEC
)
#
undef
IMPL_TYPED_ARRAY_CLASS_SPEC
}
;
const
JSClass
TypedArrayObject
:
:
anyClasses
[
2
]
[
Scalar
:
:
MaxTypedArrayViewType
]
=
{
{
#
define
IMPL_TYPED_ARRAY_CLASS
(
ExternalType
NativeType
Name
)
\
{
\
#
Name
"
Array
"
\
JSCLASS_HAS_RESERVED_SLOTS
(
TypedArrayObject
:
:
RESERVED_SLOTS
)
|
\
JSCLASS_HAS_CACHED_PROTO
(
JSProto_
#
#
Name
#
#
Array
)
|
\
JSCLASS_DELAY_METADATA_BUILDER
|
JSCLASS_SKIP_NURSERY_FINALIZE
|
\
JSCLASS_BACKGROUND_FINALIZE
\
&
TypedArrayClassOps
\
&
TypedArrayObjectClassSpecs
[
Scalar
:
:
Type
:
:
Name
]
\
&
TypedArrayClassExtension
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_CLASS
)
#
undef
IMPL_TYPED_ARRAY_CLASS
}
{
#
define
IMPL_TYPED_ARRAY_CLASS
(
ExternalType
NativeType
Name
)
\
{
\
#
Name
"
Array
"
\
JSCLASS_HAS_RESERVED_SLOTS
(
ResizableTypedArrayObject
:
:
RESERVED_SLOTS
)
|
\
JSCLASS_HAS_CACHED_PROTO
(
JSProto_
#
#
Name
#
#
Array
)
|
\
JSCLASS_DELAY_METADATA_BUILDER
\
&
ResizableTypedArrayClassOps
\
&
TypedArrayObjectClassSpecs
[
Scalar
:
:
Type
:
:
Name
]
\
JS_NULL_CLASS_EXT
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_CLASS
)
#
undef
IMPL_TYPED_ARRAY_CLASS
}
}
;
const
JSClass
TypedArrayObject
:
:
protoClasses
[
Scalar
:
:
MaxTypedArrayViewType
]
=
{
#
define
IMPL_TYPED_ARRAY_PROTO_CLASS
(
ExternalType
NativeType
Name
)
\
{
\
#
Name
"
Array
.
prototype
"
\
JSCLASS_HAS_CACHED_PROTO
(
JSProto_
#
#
Name
#
#
Array
)
\
JS_NULL_CLASS_OPS
\
&
TypedArrayObjectClassSpecs
[
Scalar
:
:
Type
:
:
Name
]
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_PROTO_CLASS
)
#
undef
IMPL_TYPED_ARRAY_PROTO_CLASS
}
;
bool
TypedArrayObject
:
:
isOriginalLengthGetter
(
Native
native
)
{
return
native
=
=
TypedArray_lengthGetter
;
}
bool
TypedArrayObject
:
:
isOriginalByteOffsetGetter
(
Native
native
)
{
return
native
=
=
TypedArray_byteOffsetGetter
;
}
bool
TypedArrayObject
:
:
isOriginalByteLengthGetter
(
Native
native
)
{
return
native
=
=
TypedArray_byteLengthGetter
;
}
bool
js
:
:
IsTypedArrayConstructor
(
const
JSObject
*
obj
)
{
#
define
CHECK_TYPED_ARRAY_CONSTRUCTOR
(
_
T
N
)
\
if
(
IsNativeFunction
(
obj
TypedArrayObjectTemplate
<
T
>
:
:
class_constructor
)
)
{
\
return
true
;
\
}
JS_FOR_EACH_TYPED_ARRAY
(
CHECK_TYPED_ARRAY_CONSTRUCTOR
)
#
undef
CHECK_TYPED_ARRAY_CONSTRUCTOR
return
false
;
}
bool
js
:
:
IsTypedArrayConstructor
(
HandleValue
v
Scalar
:
:
Type
type
)
{
return
IsNativeFunction
(
v
TypedArrayConstructorNative
(
type
)
)
;
}
JSNative
js
:
:
TypedArrayConstructorNative
(
Scalar
:
:
Type
type
)
{
#
define
TYPED_ARRAY_CONSTRUCTOR_NATIVE
(
_
T
N
)
\
if
(
type
=
=
Scalar
:
:
N
)
{
\
return
TypedArrayObjectTemplate
<
T
>
:
:
class_constructor
;
\
}
JS_FOR_EACH_TYPED_ARRAY
(
TYPED_ARRAY_CONSTRUCTOR_NATIVE
)
#
undef
TYPED_ARRAY_CONSTRUCTOR_NATIVE
MOZ_CRASH
(
"
unexpected
typed
array
type
"
)
;
}
bool
js
:
:
IsBufferSource
(
JSObject
*
object
SharedMem
<
uint8_t
*
>
*
dataPointer
size_t
*
byteLength
)
{
if
(
object
-
>
is
<
TypedArrayObject
>
(
)
)
{
TypedArrayObject
&
view
=
object
-
>
as
<
TypedArrayObject
>
(
)
;
*
dataPointer
=
view
.
dataPointerEither
(
)
.
cast
<
uint8_t
*
>
(
)
;
*
byteLength
=
view
.
byteLength
(
)
.
valueOr
(
0
)
;
return
true
;
}
if
(
object
-
>
is
<
DataViewObject
>
(
)
)
{
DataViewObject
&
view
=
object
-
>
as
<
DataViewObject
>
(
)
;
*
dataPointer
=
view
.
dataPointerEither
(
)
.
cast
<
uint8_t
*
>
(
)
;
*
byteLength
=
view
.
byteLength
(
)
.
valueOr
(
0
)
;
return
true
;
}
if
(
object
-
>
is
<
ArrayBufferObject
>
(
)
)
{
ArrayBufferObject
&
buffer
=
object
-
>
as
<
ArrayBufferObject
>
(
)
;
*
dataPointer
=
buffer
.
dataPointerShared
(
)
;
*
byteLength
=
buffer
.
byteLength
(
)
;
return
true
;
}
if
(
object
-
>
is
<
SharedArrayBufferObject
>
(
)
)
{
SharedArrayBufferObject
&
buffer
=
object
-
>
as
<
SharedArrayBufferObject
>
(
)
;
*
dataPointer
=
buffer
.
dataPointerShared
(
)
;
*
byteLength
=
buffer
.
byteLength
(
)
;
return
true
;
}
return
false
;
}
template
<
typename
CharT
>
static
inline
bool
StringIsInfinity
(
mozilla
:
:
Range
<
const
CharT
>
s
)
{
static
constexpr
std
:
:
string_view
Infinity
=
"
Infinity
"
;
return
s
.
length
(
)
=
=
Infinity
.
length
(
)
&
&
EqualChars
(
s
.
begin
(
)
.
get
(
)
Infinity
.
data
(
)
Infinity
.
length
(
)
)
;
}
template
<
typename
CharT
>
static
inline
bool
StringIsNaN
(
mozilla
:
:
Range
<
const
CharT
>
s
)
{
static
constexpr
std
:
:
string_view
NaN
=
"
NaN
"
;
return
s
.
length
(
)
=
=
NaN
.
length
(
)
&
&
EqualChars
(
s
.
begin
(
)
.
get
(
)
NaN
.
data
(
)
NaN
.
length
(
)
)
;
}
template
<
typename
CharT
>
static
mozilla
:
:
Maybe
<
uint64_t
>
StringToTypedArrayIndexSlow
(
mozilla
:
:
Range
<
const
CharT
>
s
)
{
const
mozilla
:
:
RangedPtr
<
const
CharT
>
start
=
s
.
begin
(
)
;
const
mozilla
:
:
RangedPtr
<
const
CharT
>
end
=
s
.
end
(
)
;
const
CharT
*
actualEnd
;
double
result
=
js_strtod
(
start
.
get
(
)
end
.
get
(
)
&
actualEnd
)
;
if
(
actualEnd
!
=
end
.
get
(
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
ToCStringBuf
cbuf
;
size_t
cstrlen
;
const
char
*
cstr
=
js
:
:
NumberToCString
(
&
cbuf
result
&
cstrlen
)
;
MOZ_ASSERT
(
cstr
)
;
if
(
s
.
length
(
)
!
=
cstrlen
|
|
!
EqualChars
(
start
.
get
(
)
cstr
cstrlen
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
if
(
result
<
0
|
|
!
IsInteger
(
result
)
)
{
return
mozilla
:
:
Some
(
UINT64_MAX
)
;
}
if
(
result
>
=
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
{
return
mozilla
:
:
Some
(
UINT64_MAX
)
;
}
return
mozilla
:
:
Some
(
result
)
;
}
template
<
typename
CharT
>
mozilla
:
:
Maybe
<
uint64_t
>
js
:
:
StringToTypedArrayIndex
(
mozilla
:
:
Range
<
const
CharT
>
s
)
{
mozilla
:
:
RangedPtr
<
const
CharT
>
cp
=
s
.
begin
(
)
;
const
mozilla
:
:
RangedPtr
<
const
CharT
>
end
=
s
.
end
(
)
;
MOZ_ASSERT
(
cp
<
end
"
caller
must
check
for
empty
strings
"
)
;
bool
negative
=
false
;
if
(
*
cp
=
=
'
-
'
)
{
negative
=
true
;
if
(
+
+
cp
=
=
end
)
{
return
mozilla
:
:
Nothing
(
)
;
}
}
if
(
!
IsAsciiDigit
(
*
cp
)
)
{
if
(
(
!
negative
&
&
StringIsNaN
<
CharT
>
(
{
cp
end
}
)
)
|
|
StringIsInfinity
<
CharT
>
(
{
cp
end
}
)
)
{
return
mozilla
:
:
Some
(
UINT64_MAX
)
;
}
return
mozilla
:
:
Nothing
(
)
;
}
uint32_t
digit
=
AsciiDigitToNumber
(
*
cp
+
+
)
;
if
(
digit
=
=
0
&
&
cp
!
=
end
)
{
if
(
*
cp
=
=
'
.
'
)
{
return
StringToTypedArrayIndexSlow
(
s
)
;
}
return
mozilla
:
:
Nothing
(
)
;
}
uint64_t
index
=
digit
;
for
(
;
cp
<
end
;
cp
+
+
)
{
if
(
!
IsAsciiDigit
(
*
cp
)
)
{
if
(
*
cp
=
=
'
.
'
|
|
*
cp
=
=
'
e
'
)
{
return
StringToTypedArrayIndexSlow
(
s
)
;
}
return
mozilla
:
:
Nothing
(
)
;
}
digit
=
AsciiDigitToNumber
(
*
cp
)
;
static_assert
(
uint64_t
(
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
<
(
UINT64_MAX
-
10
)
/
10
"
2
^
53
is
way
below
UINT64_MAX
so
|
10
*
index
+
digit
|
can
'
t
overflow
"
)
;
index
=
10
*
index
+
digit
;
if
(
index
>
=
uint64_t
(
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
)
{
return
StringToTypedArrayIndexSlow
(
s
)
;
}
}
if
(
negative
)
{
return
mozilla
:
:
Some
(
UINT64_MAX
)
;
}
return
mozilla
:
:
Some
(
index
)
;
}
template
mozilla
:
:
Maybe
<
uint64_t
>
js
:
:
StringToTypedArrayIndex
(
mozilla
:
:
Range
<
const
char16_t
>
s
)
;
template
mozilla
:
:
Maybe
<
uint64_t
>
js
:
:
StringToTypedArrayIndex
(
mozilla
:
:
Range
<
const
Latin1Char
>
s
)
;
bool
js
:
:
SetTypedArrayElement
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
obj
uint64_t
index
HandleValue
v
ObjectOpResult
&
result
)
{
switch
(
obj
-
>
type
(
)
)
{
#
define
SET_TYPED_ARRAY_ELEMENT
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
return
TypedArrayObjectTemplate
<
T
>
:
:
setElement
(
cx
obj
index
v
result
)
;
JS_FOR_EACH_TYPED_ARRAY
(
SET_TYPED_ARRAY_ELEMENT
)
#
undef
SET_TYPED_ARRAY_ELEMENT
case
Scalar
:
:
MaxTypedArrayViewType
:
case
Scalar
:
:
Int64
:
case
Scalar
:
:
Simd128
:
break
;
}
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
bool
js
:
:
DefineTypedArrayElement
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
obj
uint64_t
index
Handle
<
PropertyDescriptor
>
desc
ObjectOpResult
&
result
)
{
if
(
index
>
=
obj
-
>
length
(
)
.
valueOr
(
0
)
)
{
if
(
obj
-
>
hasDetachedBuffer
(
)
)
{
return
result
.
fail
(
JSMSG_TYPED_ARRAY_DETACHED
)
;
}
return
result
.
fail
(
JSMSG_DEFINE_BAD_INDEX
)
;
}
if
(
desc
.
hasConfigurable
(
)
&
&
!
desc
.
configurable
(
)
)
{
return
result
.
fail
(
JSMSG_CANT_REDEFINE_PROP
)
;
}
if
(
desc
.
hasEnumerable
(
)
&
&
!
desc
.
enumerable
(
)
)
{
return
result
.
fail
(
JSMSG_CANT_REDEFINE_PROP
)
;
}
if
(
desc
.
isAccessorDescriptor
(
)
)
{
return
result
.
fail
(
JSMSG_CANT_REDEFINE_PROP
)
;
}
if
(
desc
.
hasWritable
(
)
&
&
!
desc
.
writable
(
)
)
{
return
result
.
fail
(
JSMSG_CANT_REDEFINE_PROP
)
;
}
if
(
desc
.
hasValue
(
)
)
{
return
SetTypedArrayElement
(
cx
obj
index
desc
.
value
(
)
result
)
;
}
return
result
.
succeed
(
)
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
numeric_limits
<
T
>
:
:
is_integer
&
&
!
std
:
:
numeric_limits
<
T
>
:
:
is_signed
U
>
UnsignedSortValue
(
U
val
)
{
return
val
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
numeric_limits
<
T
>
:
:
is_integer
&
&
std
:
:
numeric_limits
<
T
>
:
:
is_signed
U
>
UnsignedSortValue
(
U
val
)
{
return
val
^
static_cast
<
U
>
(
std
:
:
numeric_limits
<
T
>
:
:
min
(
)
)
;
}
template
<
typename
T
typename
UnsignedT
>
static
constexpr
typename
std
:
:
enable_if_t
<
!
std
:
:
numeric_limits
<
T
>
:
:
is_integer
UnsignedT
>
UnsignedSortValue
(
UnsignedT
val
)
{
using
FloatingPoint
=
mozilla
:
:
FloatingPoint
<
T
>
;
static_assert
(
std
:
:
is_same_v
<
typename
FloatingPoint
:
:
Bits
UnsignedT
>
"
FloatingPoint
:
:
Bits
matches
the
unsigned
int
representation
"
)
;
constexpr
UnsignedT
NegativeInfinity
=
mozilla
:
:
InfinityBits
<
T
1
>
:
:
value
;
if
(
val
>
NegativeInfinity
)
{
return
val
;
}
if
(
val
&
FloatingPoint
:
:
kSignBit
)
{
return
~
val
;
}
return
val
^
FloatingPoint
:
:
kSignBit
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
numeric_limits
<
T
>
:
:
is_integer
U
>
ToCountingSortKey
(
U
val
)
{
return
UnsignedSortValue
<
T
U
>
(
val
)
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
numeric_limits
<
T
>
:
:
is_integer
U
>
FromCountingSortKey
(
U
val
)
{
return
ToCountingSortKey
<
T
U
>
(
val
)
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
T
js
:
:
float16
>
U
>
ToCountingSortKey
(
U
val
)
{
using
FloatingPoint
=
mozilla
:
:
FloatingPoint
<
T
>
;
static_assert
(
std
:
:
is_same_v
<
typename
FloatingPoint
:
:
Bits
U
>
"
FloatingPoint
:
:
Bits
matches
the
unsigned
int
representation
"
)
;
constexpr
U
PositiveInfinity
=
mozilla
:
:
InfinityBits
<
T
0
>
:
:
value
;
constexpr
U
NegativeInfinity
=
mozilla
:
:
InfinityBits
<
T
1
>
:
:
value
;
if
(
val
>
NegativeInfinity
)
{
return
val
;
}
if
(
val
&
FloatingPoint
:
:
kSignBit
)
{
return
NegativeInfinity
-
val
;
}
return
val
+
(
PositiveInfinity
+
1
)
;
}
template
<
typename
T
typename
U
>
static
constexpr
typename
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
T
js
:
:
float16
>
U
>
FromCountingSortKey
(
U
val
)
{
using
FloatingPoint
=
mozilla
:
:
FloatingPoint
<
T
>
;
static_assert
(
std
:
:
is_same_v
<
typename
FloatingPoint
:
:
Bits
U
>
"
FloatingPoint
:
:
Bits
matches
the
unsigned
int
representation
"
)
;
constexpr
U
PositiveInfinity
=
mozilla
:
:
InfinityBits
<
T
0
>
:
:
value
;
constexpr
U
NegativeInfinity
=
mozilla
:
:
InfinityBits
<
T
1
>
:
:
value
;
if
(
val
>
NegativeInfinity
)
{
return
val
;
}
if
(
val
>
PositiveInfinity
)
{
return
val
-
(
PositiveInfinity
+
1
)
;
}
return
NegativeInfinity
-
val
;
}
template
<
typename
T
>
static
typename
std
:
:
enable_if_t
<
std
:
:
numeric_limits
<
T
>
:
:
is_integer
>
TypedArrayStdSort
(
SharedMem
<
void
*
>
data
size_t
length
)
{
T
*
unwrapped
=
data
.
cast
<
T
*
>
(
)
.
unwrapUnshared
(
)
;
std
:
:
sort
(
unwrapped
unwrapped
+
length
)
;
}
template
<
typename
T
>
static
typename
std
:
:
enable_if_t
<
!
std
:
:
numeric_limits
<
T
>
:
:
is_integer
>
TypedArrayStdSort
(
SharedMem
<
void
*
>
data
size_t
length
)
{
using
UnsignedT
=
typename
mozilla
:
:
UnsignedStdintTypeForSize
<
sizeof
(
T
)
>
:
:
Type
;
UnsignedT
*
unwrapped
=
data
.
cast
<
UnsignedT
*
>
(
)
.
unwrapUnshared
(
)
;
std
:
:
sort
(
unwrapped
unwrapped
+
length
[
]
(
UnsignedT
x
UnsignedT
y
)
{
constexpr
auto
SortValue
=
UnsignedSortValue
<
T
UnsignedT
>
;
return
SortValue
(
x
)
<
SortValue
(
y
)
;
}
)
;
}
template
<
typename
T
typename
Ops
>
static
typename
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
Ops
UnsharedOps
>
bool
>
TypedArrayStdSort
(
JSContext
*
cx
TypedArrayObject
*
typedArray
size_t
length
)
{
TypedArrayStdSort
<
T
>
(
typedArray
-
>
dataPointerEither
(
)
length
)
;
return
true
;
}
template
<
typename
T
typename
Ops
>
static
typename
std
:
:
enable_if_t
<
std
:
:
is_same_v
<
Ops
SharedOps
>
bool
>
TypedArrayStdSort
(
JSContext
*
cx
TypedArrayObject
*
typedArray
size_t
length
)
{
auto
ptr
=
cx
-
>
make_pod_array
<
T
>
(
length
)
;
if
(
!
ptr
)
{
return
false
;
}
SharedMem
<
T
*
>
unshared
=
SharedMem
<
T
*
>
:
:
unshared
(
ptr
.
get
(
)
)
;
SharedMem
<
T
*
>
data
=
typedArray
-
>
dataPointerShared
(
)
.
cast
<
T
*
>
(
)
;
Ops
:
:
podCopy
(
unshared
data
length
)
;
TypedArrayStdSort
<
T
>
(
unshared
.
template
cast
<
void
*
>
(
)
length
)
;
Ops
:
:
podCopy
(
data
unshared
length
)
;
return
true
;
}
template
<
typename
T
typename
Ops
>
static
bool
TypedArrayCountingSort
(
JSContext
*
cx
TypedArrayObject
*
typedArray
size_t
length
)
{
if
(
length
<
=
64
)
{
return
TypedArrayStdSort
<
T
Ops
>
(
cx
typedArray
length
)
;
}
using
UnsignedT
=
typename
mozilla
:
:
UnsignedStdintTypeForSize
<
sizeof
(
T
)
>
:
:
Type
;
constexpr
size_t
InlineStorage
=
sizeof
(
T
)
=
=
1
?
256
:
0
;
Vector
<
size_t
InlineStorage
>
buffer
(
cx
)
;
if
(
!
buffer
.
resize
(
size_t
(
std
:
:
numeric_limits
<
UnsignedT
>
:
:
max
(
)
)
+
1
)
)
{
return
false
;
}
SharedMem
<
UnsignedT
*
>
data
=
typedArray
-
>
dataPointerEither
(
)
.
cast
<
UnsignedT
*
>
(
)
;
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
UnsignedT
val
=
ToCountingSortKey
<
T
UnsignedT
>
(
Ops
:
:
load
(
data
+
i
)
)
;
buffer
[
val
]
+
+
;
}
UnsignedT
val
=
UnsignedT
(
-
1
)
;
for
(
size_t
i
=
0
;
i
<
length
;
)
{
size_t
j
;
do
{
j
=
buffer
[
+
+
val
]
;
}
while
(
j
=
=
0
)
;
MOZ_ASSERT
(
j
<
=
length
-
i
)
;
for
(
;
j
>
0
;
j
-
-
)
{
Ops
:
:
store
(
data
+
i
+
+
FromCountingSortKey
<
T
UnsignedT
>
(
val
)
)
;
}
}
return
true
;
}
template
<
typename
T
typename
U
typename
Ops
>
static
void
SortByColumn
(
SharedMem
<
U
*
>
data
size_t
length
SharedMem
<
U
*
>
aux
uint8_t
col
)
{
static_assert
(
std
:
:
is_unsigned_v
<
U
>
"
SortByColumn
sorts
on
unsigned
values
"
)
;
static_assert
(
std
:
:
is_same_v
<
Ops
UnsharedOps
>
"
SortByColumn
only
works
on
unshared
data
"
)
;
constexpr
size_t
R
=
256
;
size_t
counts
[
R
+
1
]
=
{
}
;
const
auto
ByteAtCol
=
[
col
]
(
U
x
)
{
U
y
=
UnsignedSortValue
<
T
U
>
(
x
)
;
return
static_cast
<
uint8_t
>
(
y
>
>
(
col
*
8
)
)
;
}
;
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
U
val
=
Ops
:
:
load
(
data
+
i
)
;
uint8_t
b
=
ByteAtCol
(
val
)
;
counts
[
b
+
1
]
+
+
;
}
std
:
:
partial_sum
(
std
:
:
begin
(
counts
)
std
:
:
end
(
counts
)
std
:
:
begin
(
counts
)
)
;
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
U
val
=
Ops
:
:
load
(
data
+
i
)
;
uint8_t
b
=
ByteAtCol
(
val
)
;
size_t
j
=
counts
[
b
]
+
+
;
MOZ_ASSERT
(
j
<
length
"
index
is
in
bounds
when
|
data
|
can
'
t
be
modified
concurrently
"
)
;
UnsharedOps
:
:
store
(
aux
+
j
val
)
;
}
Ops
:
:
podCopy
(
data
aux
length
)
;
}
template
<
typename
T
typename
Ops
>
static
bool
TypedArrayRadixSort
(
JSContext
*
cx
TypedArrayObject
*
typedArray
size_t
length
)
{
constexpr
size_t
StdSortMinCutoff
=
sizeof
(
T
)
=
=
2
?
64
:
256
;
constexpr
size_t
StdSortMaxCutoff
=
(
64
*
1024
*
1024
)
/
sizeof
(
T
)
;
if
constexpr
(
sizeof
(
T
)
=
=
2
)
{
constexpr
size_t
CountingSortMaxCutoff
=
65536
*
(
sizeof
(
size_t
)
/
sizeof
(
T
)
)
-
2048
;
static_assert
(
CountingSortMaxCutoff
<
StdSortMaxCutoff
)
;
if
(
length
>
=
CountingSortMaxCutoff
)
{
return
TypedArrayCountingSort
<
T
Ops
>
(
cx
typedArray
length
)
;
}
}
if
(
length
<
=
StdSortMinCutoff
|
|
length
>
=
StdSortMaxCutoff
)
{
return
TypedArrayStdSort
<
T
Ops
>
(
cx
typedArray
length
)
;
}
using
UnsignedT
=
typename
mozilla
:
:
UnsignedStdintTypeForSize
<
sizeof
(
T
)
>
:
:
Type
;
auto
ptr
=
cx
-
>
make_zeroed_pod_array
<
UnsignedT
>
(
length
)
;
if
(
!
ptr
)
{
return
false
;
}
SharedMem
<
UnsignedT
*
>
aux
=
SharedMem
<
UnsignedT
*
>
:
:
unshared
(
ptr
.
get
(
)
)
;
SharedMem
<
UnsignedT
*
>
data
=
typedArray
-
>
dataPointerEither
(
)
.
cast
<
UnsignedT
*
>
(
)
;
SharedMem
<
UnsignedT
*
>
unshared
;
SharedMem
<
UnsignedT
*
>
shared
;
UniquePtr
<
UnsignedT
[
]
JS
:
:
FreePolicy
>
ptrUnshared
;
if
constexpr
(
std
:
:
is_same_v
<
Ops
SharedOps
>
)
{
ptrUnshared
=
cx
-
>
make_pod_array
<
UnsignedT
>
(
length
)
;
if
(
!
ptrUnshared
)
{
return
false
;
}
unshared
=
SharedMem
<
UnsignedT
*
>
:
:
unshared
(
ptrUnshared
.
get
(
)
)
;
shared
=
data
;
Ops
:
:
podCopy
(
unshared
shared
length
)
;
data
=
unshared
;
}
for
(
uint8_t
col
=
0
;
col
<
sizeof
(
UnsignedT
)
;
col
+
+
)
{
SortByColumn
<
T
UnsignedT
UnsharedOps
>
(
data
length
aux
col
)
;
}
if
constexpr
(
std
:
:
is_same_v
<
Ops
SharedOps
>
)
{
Ops
:
:
podCopy
(
shared
unshared
length
)
;
}
return
true
;
}
using
TypedArraySortFn
=
bool
(
*
)
(
JSContext
*
TypedArrayObject
*
size_t
length
)
;
template
<
typename
T
typename
Ops
>
static
constexpr
typename
std
:
:
enable_if_t
<
sizeof
(
T
)
=
=
1
TypedArraySortFn
>
TypedArraySort
(
)
{
return
TypedArrayCountingSort
<
T
Ops
>
;
}
template
<
typename
T
typename
Ops
>
static
constexpr
typename
std
:
:
enable_if_t
<
sizeof
(
T
)
=
=
2
|
|
sizeof
(
T
)
=
=
4
TypedArraySortFn
>
TypedArraySort
(
)
{
return
TypedArrayRadixSort
<
T
Ops
>
;
}
template
<
typename
T
typename
Ops
>
static
constexpr
typename
std
:
:
enable_if_t
<
sizeof
(
T
)
=
=
8
TypedArraySortFn
>
TypedArraySort
(
)
{
return
TypedArrayStdSort
<
T
Ops
>
;
}
static
bool
TypedArraySortWithoutComparator
(
JSContext
*
cx
TypedArrayObject
*
typedArray
size_t
len
)
{
bool
isShared
=
typedArray
-
>
isSharedMemory
(
)
;
switch
(
typedArray
-
>
type
(
)
)
{
#
define
SORT
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
if
(
isShared
)
{
\
if
(
!
TypedArraySort
<
T
SharedOps
>
(
)
(
cx
typedArray
len
)
)
{
\
return
false
;
\
}
\
}
else
{
\
if
(
!
TypedArraySort
<
T
UnsharedOps
>
(
)
(
cx
typedArray
len
)
)
{
\
return
false
;
\
}
\
}
\
break
;
JS_FOR_EACH_TYPED_ARRAY
(
SORT
)
#
undef
SORT
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
return
true
;
}
static
MOZ_ALWAYS_INLINE
bool
TypedArraySortPrologue
(
JSContext
*
cx
Handle
<
Value
>
thisv
Handle
<
Value
>
comparefn
ArraySortData
*
d
bool
*
done
)
{
if
(
MOZ_UNLIKELY
(
!
comparefn
.
isUndefined
(
)
&
&
!
IsCallable
(
comparefn
)
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BAD_TYPEDARRAY_SORT_ARG
)
;
return
false
;
}
Rooted
<
TypedArrayObject
*
>
tarrayUnwrapped
(
cx
UnwrapAndTypeCheckValue
<
TypedArrayObject
>
(
cx
thisv
[
cx
&
thisv
]
(
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_INCOMPATIBLE_METHOD
"
sort
"
"
method
"
InformalValueTypeName
(
thisv
)
)
;
}
)
)
;
if
(
!
tarrayUnwrapped
)
{
return
false
;
}
auto
arrayLength
=
tarrayUnwrapped
-
>
length
(
)
;
if
(
!
arrayLength
)
{
ReportOutOfBounds
(
cx
tarrayUnwrapped
)
;
return
false
;
}
size_t
len
=
*
arrayLength
;
if
(
len
<
=
1
)
{
d
-
>
setReturnValue
(
&
thisv
.
toObject
(
)
)
;
*
done
=
true
;
return
true
;
}
if
(
comparefn
.
isUndefined
(
)
)
{
if
(
!
TypedArraySortWithoutComparator
(
cx
tarrayUnwrapped
len
)
)
{
return
false
;
}
d
-
>
setReturnValue
(
&
thisv
.
toObject
(
)
)
;
*
done
=
true
;
return
true
;
}
if
(
MOZ_UNLIKELY
(
len
>
UINT32_MAX
/
2
)
)
{
ReportAllocationOverflow
(
cx
)
;
return
false
;
}
bool
needsScratchSpace
=
len
>
ArraySortData
:
:
InsertionSortMaxLength
;
Rooted
<
ArraySortData
:
:
ValueVector
>
vec
(
cx
)
;
if
(
MOZ_UNLIKELY
(
!
vec
.
resize
(
needsScratchSpace
?
(
2
*
len
)
:
len
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
TypedArrayObject
:
:
getElements
(
cx
tarrayUnwrapped
len
vec
.
begin
(
)
)
)
{
return
false
;
}
d
-
>
init
(
&
thisv
.
toObject
(
)
&
comparefn
.
toObject
(
)
std
:
:
move
(
vec
.
get
(
)
)
len
len
)
;
MOZ_ASSERT
(
!
*
done
)
;
return
true
;
}
template
<
typename
T
typename
Ops
>
static
void
StoreSortedElements
(
TypedArrayObject
*
tarray
Value
*
elements
size_t
len
)
{
SharedMem
<
T
*
>
data
=
tarray
-
>
dataPointerEither
(
)
.
cast
<
T
*
>
(
)
;
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
T
val
;
if
constexpr
(
!
std
:
:
numeric_limits
<
T
>
:
:
is_integer
)
{
val
=
elements
[
i
]
.
toDouble
(
)
;
}
else
if
constexpr
(
std
:
:
is_same_v
<
T
int64_t
>
)
{
val
=
BigInt
:
:
toInt64
(
elements
[
i
]
.
toBigInt
(
)
)
;
}
else
if
constexpr
(
std
:
:
is_same_v
<
T
uint64_t
>
)
{
val
=
BigInt
:
:
toUint64
(
elements
[
i
]
.
toBigInt
(
)
)
;
}
else
if
constexpr
(
std
:
:
is_same_v
<
T
uint32_t
>
)
{
val
=
uint32_t
(
elements
[
i
]
.
toNumber
(
)
)
;
}
else
{
val
=
elements
[
i
]
.
toInt32
(
)
;
}
Ops
:
:
store
(
data
+
i
val
)
;
}
}
ArraySortResult
ArraySortData
:
:
sortTypedArrayWithComparator
(
ArraySortData
*
d
)
{
ArraySortResult
result
=
sortWithComparatorShared
<
ArraySortKind
:
:
TypedArray
>
(
d
)
;
if
(
result
!
=
ArraySortResult
:
:
Done
)
{
return
result
;
}
JSContext
*
cx
=
d
-
>
cx
(
)
;
Rooted
<
TypedArrayObject
*
>
tarrayUnwrapped
(
cx
UnwrapAndDowncastObject
<
TypedArrayObject
>
(
cx
d
-
>
obj_
)
)
;
if
(
MOZ_UNLIKELY
(
!
tarrayUnwrapped
)
)
{
return
ArraySortResult
:
:
Failure
;
}
auto
length
=
tarrayUnwrapped
-
>
length
(
)
;
if
(
MOZ_LIKELY
(
length
)
)
{
size_t
len
=
std
:
:
min
<
size_t
>
(
*
length
d
-
>
denseLen
)
;
Value
*
elements
=
d
-
>
list
;
bool
isShared
=
tarrayUnwrapped
-
>
isSharedMemory
(
)
;
switch
(
tarrayUnwrapped
-
>
type
(
)
)
{
#
define
SORT
(
_
T
N
)
\
case
Scalar
:
:
N
:
\
if
(
isShared
)
{
\
StoreSortedElements
<
T
SharedOps
>
(
tarrayUnwrapped
elements
len
)
;
\
}
else
{
\
StoreSortedElements
<
T
UnsharedOps
>
(
tarrayUnwrapped
elements
len
)
;
\
}
\
break
;
JS_FOR_EACH_TYPED_ARRAY
(
SORT
)
#
undef
SORT
default
:
MOZ_CRASH
(
"
Unsupported
TypedArray
type
"
)
;
}
}
d
-
>
freeMallocData
(
)
;
d
-
>
setReturnValue
(
d
-
>
obj_
)
;
return
ArraySortResult
:
:
Done
;
}
bool
TypedArrayObject
:
:
sort
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
AutoJSMethodProfilerEntry
pseudoFrame
(
cx
"
[
TypedArray
]
.
prototype
"
"
sort
"
)
;
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
args
.
hasDefined
(
0
)
&
&
jit
:
:
IsBaselineInterpreterEnabled
(
)
)
{
return
CallTrampolineNativeJitCode
(
cx
jit
:
:
TrampolineNative
:
:
TypedArraySort
args
)
;
}
Rooted
<
ArraySortData
>
data
(
cx
cx
)
;
auto
freeData
=
mozilla
:
:
MakeScopeExit
(
[
&
]
(
)
{
data
.
get
(
)
.
freeMallocData
(
)
;
}
)
;
bool
done
=
false
;
if
(
!
TypedArraySortPrologue
(
cx
args
.
thisv
(
)
args
.
get
(
0
)
data
.
address
(
)
&
done
)
)
{
return
false
;
}
if
(
done
)
{
args
.
rval
(
)
.
set
(
data
.
get
(
)
.
returnValue
(
)
)
;
return
true
;
}
FixedInvokeArgs
<
2
>
callArgs
(
cx
)
;
Rooted
<
Value
>
rval
(
cx
)
;
while
(
true
)
{
ArraySortResult
res
=
ArraySortData
:
:
sortTypedArrayWithComparator
(
data
.
address
(
)
)
;
switch
(
res
)
{
case
ArraySortResult
:
:
Failure
:
return
false
;
case
ArraySortResult
:
:
Done
:
freeData
.
release
(
)
;
args
.
rval
(
)
.
set
(
data
.
get
(
)
.
returnValue
(
)
)
;
return
true
;
case
ArraySortResult
:
:
CallJS
:
case
ArraySortResult
:
:
CallJSSameRealmNoRectifier
:
MOZ_ASSERT
(
data
.
get
(
)
.
comparatorThisValue
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
&
args
[
0
]
.
toObject
(
)
=
=
data
.
get
(
)
.
comparator
(
)
)
;
callArgs
[
0
]
.
set
(
data
.
get
(
)
.
comparatorArg
(
0
)
)
;
callArgs
[
1
]
.
set
(
data
.
get
(
)
.
comparatorArg
(
1
)
)
;
if
(
!
js
:
:
Call
(
cx
args
[
0
]
UndefinedHandleValue
callArgs
&
rval
)
)
{
return
false
;
}
data
.
get
(
)
.
setComparatorReturnValue
(
rval
)
;
break
;
}
}
}
ArraySortResult
js
:
:
TypedArraySortFromJit
(
JSContext
*
cx
jit
:
:
TrampolineNativeFrameLayout
*
frame
)
{
AutoJSMethodProfilerEntry
pseudoFrame
(
cx
"
[
TypedArray
]
.
prototype
"
"
sort
"
)
;
void
*
dataUninit
=
frame
-
>
getFrameData
<
ArraySortData
>
(
)
;
auto
*
data
=
new
(
dataUninit
)
ArraySortData
(
cx
)
;
Rooted
<
Value
>
thisv
(
cx
frame
-
>
thisv
(
)
)
;
Rooted
<
Value
>
comparefn
(
cx
)
;
if
(
frame
-
>
numActualArgs
(
)
>
0
)
{
comparefn
=
frame
-
>
actualArgs
(
)
[
0
]
;
}
bool
done
=
false
;
if
(
!
TypedArraySortPrologue
(
cx
thisv
comparefn
data
&
done
)
)
{
return
ArraySortResult
:
:
Failure
;
}
if
(
done
)
{
data
-
>
freeMallocData
(
)
;
return
ArraySortResult
:
:
Done
;
}
return
ArraySortData
:
:
sortTypedArrayWithComparator
(
data
)
;
}
#
define
IMPL_TYPED_ARRAY_JSAPI_CONSTRUCTORS
(
ExternalType
NativeType
Name
)
\
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
Array
(
JSContext
*
cx
\
size_t
nelements
)
{
\
return
TypedArrayObjectTemplate
<
NativeType
>
:
:
fromLength
(
cx
nelements
)
;
\
}
\
\
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
ArrayFromArray
(
JSContext
*
cx
\
HandleObject
other
)
{
\
return
TypedArrayObjectTemplate
<
NativeType
>
:
:
fromArray
(
cx
other
)
;
\
}
\
\
JS_PUBLIC_API
JSObject
*
JS_New
#
#
Name
#
#
ArrayWithBuffer
(
\
JSContext
*
cx
HandleObject
arrayBuffer
size_t
byteOffset
\
int64_t
length
)
{
\
return
TypedArrayObjectTemplate
<
NativeType
>
:
:
fromBuffer
(
\
cx
arrayBuffer
byteOffset
length
)
;
\
}
\
\
JS_PUBLIC_API
JSObject
*
js
:
:
Unwrap
#
#
Name
#
#
Array
(
JSObject
*
obj
)
{
\
obj
=
obj
-
>
maybeUnwrapIf
<
TypedArrayObject
>
(
)
;
\
if
(
!
obj
)
{
\
return
nullptr
;
\
}
\
const
JSClass
*
clasp
=
obj
-
>
getClass
(
)
;
\
if
(
clasp
!
=
FixedLengthTypedArrayObjectTemplate
<
\
NativeType
>
:
:
instanceClass
(
)
&
&
\
clasp
!
=
\
ResizableTypedArrayObjectTemplate
<
NativeType
>
:
:
instanceClass
(
)
)
{
\
return
nullptr
;
\
}
\
return
obj
;
\
}
\
\
JS_PUBLIC_API
ExternalType
*
JS_Get
#
#
Name
#
#
ArrayLengthAndData
(
\
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
\
const
JS
:
:
AutoRequireNoGC
&
nogc
)
{
\
TypedArrayObject
*
tarr
=
obj
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
\
if
(
!
tarr
)
{
\
return
nullptr
;
\
}
\
mozilla
:
:
Span
<
ExternalType
>
span
=
\
JS
:
:
TypedArray
<
JS
:
:
Scalar
:
:
Name
>
:
:
fromObject
(
tarr
)
.
getData
(
\
isSharedMemory
nogc
)
;
\
*
length
=
span
.
Length
(
)
;
\
return
span
.
data
(
)
;
\
}
\
\
JS_PUBLIC_API
ExternalType
*
JS_Get
#
#
Name
#
#
ArrayData
(
\
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
nogc
)
{
\
size_t
length
;
\
return
JS_Get
#
#
Name
#
#
ArrayLengthAndData
(
obj
&
length
isSharedMemory
\
nogc
)
;
\
}
\
JS_PUBLIC_API
JSObject
*
JS_GetObjectAs
#
#
Name
#
#
Array
(
\
JSObject
*
obj
size_t
*
length
bool
*
isShared
ExternalType
*
*
data
)
{
\
obj
=
js
:
:
Unwrap
#
#
Name
#
#
Array
(
obj
)
;
\
if
(
!
obj
)
{
\
return
nullptr
;
\
}
\
TypedArrayObject
*
tarr
=
&
obj
-
>
as
<
TypedArrayObject
>
(
)
;
\
*
length
=
tarr
-
>
length
(
)
.
valueOr
(
0
)
;
\
*
isShared
=
tarr
-
>
isSharedMemory
(
)
;
\
*
data
=
static_cast
<
ExternalType
*
>
(
tarr
-
>
dataPointerEither
(
)
.
unwrap
(
\
/
*
safe
-
caller
sees
isShared
flag
*
/
)
)
;
\
return
obj
;
\
}
JS_FOR_EACH_TYPED_ARRAY
(
IMPL_TYPED_ARRAY_JSAPI_CONSTRUCTORS
)
#
undef
IMPL_TYPED_ARRAY_JSAPI_CONSTRUCTORS
JS_PUBLIC_API
bool
JS_IsTypedArrayObject
(
JSObject
*
obj
)
{
return
obj
-
>
canUnwrapAs
<
TypedArrayObject
>
(
)
;
}
JS_PUBLIC_API
size_t
JS_GetTypedArrayLength
(
JSObject
*
obj
)
{
TypedArrayObject
*
tarr
=
obj
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
if
(
!
tarr
)
{
return
0
;
}
return
tarr
-
>
length
(
)
.
valueOr
(
0
)
;
}
JS_PUBLIC_API
size_t
JS_GetTypedArrayByteOffset
(
JSObject
*
obj
)
{
TypedArrayObject
*
tarr
=
obj
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
if
(
!
tarr
)
{
return
0
;
}
return
tarr
-
>
byteOffset
(
)
.
valueOr
(
0
)
;
}
JS_PUBLIC_API
size_t
JS_GetTypedArrayByteLength
(
JSObject
*
obj
)
{
TypedArrayObject
*
tarr
=
obj
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
if
(
!
tarr
)
{
return
0
;
}
return
tarr
-
>
byteLength
(
)
.
valueOr
(
0
)
;
}
JS_PUBLIC_API
bool
JS_GetTypedArraySharedness
(
JSObject
*
obj
)
{
TypedArrayObject
*
tarr
=
obj
-
>
maybeUnwrapAs
<
TypedArrayObject
>
(
)
;
if
(
!
tarr
)
{
return
false
;
}
return
tarr
-
>
isSharedMemory
(
)
;
}
JS_PUBLIC_API
JS
:
:
Scalar
:
:
Type
JS_GetArrayBufferViewType
(
JSObject
*
obj
)
{
ArrayBufferViewObject
*
view
=
obj
-
>
maybeUnwrapAs
<
ArrayBufferViewObject
>
(
)
;
if
(
!
view
)
{
return
Scalar
:
:
MaxTypedArrayViewType
;
}
if
(
view
-
>
is
<
TypedArrayObject
>
(
)
)
{
return
view
-
>
as
<
TypedArrayObject
>
(
)
.
type
(
)
;
}
if
(
view
-
>
is
<
DataViewObject
>
(
)
)
{
return
Scalar
:
:
MaxTypedArrayViewType
;
}
MOZ_CRASH
(
"
invalid
ArrayBufferView
type
"
)
;
}
JS_PUBLIC_API
size_t
JS_MaxMovableTypedArraySize
(
)
{
return
FixedLengthTypedArrayObject
:
:
INLINE_BUFFER_LIMIT
;
}
namespace
JS
{
const
JSClass
*
const
TypedArray_base
:
:
fixedLengthClasses
=
TypedArrayObject
:
:
fixedLengthClasses
;
const
JSClass
*
const
TypedArray_base
:
:
resizableClasses
=
TypedArrayObject
:
:
resizableClasses
;
#
define
INSTANTIATE
(
ExternalType
NativeType
Name
)
\
template
class
TypedArray
<
JS
:
:
Scalar
:
:
Name
>
;
JS_FOR_EACH_TYPED_ARRAY
(
INSTANTIATE
)
#
undef
INSTANTIATE
JS
:
:
ArrayBufferOrView
JS
:
:
ArrayBufferOrView
:
:
unwrap
(
JSObject
*
maybeWrapped
)
{
if
(
!
maybeWrapped
)
{
return
JS
:
:
ArrayBufferOrView
(
nullptr
)
;
}
auto
*
ab
=
maybeWrapped
-
>
maybeUnwrapIf
<
ArrayBufferObjectMaybeShared
>
(
)
;
if
(
ab
)
{
return
ArrayBufferOrView
:
:
fromObject
(
ab
)
;
}
return
ArrayBufferView
:
:
unwrap
(
maybeWrapped
)
;
}
bool
JS
:
:
ArrayBufferOrView
:
:
isDetached
(
)
const
{
MOZ_ASSERT
(
obj
)
;
if
(
obj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
return
obj
-
>
as
<
ArrayBufferObjectMaybeShared
>
(
)
.
isDetached
(
)
;
}
else
{
return
obj
-
>
as
<
ArrayBufferViewObject
>
(
)
.
hasDetachedBuffer
(
)
;
}
}
bool
JS
:
:
ArrayBufferOrView
:
:
isResizable
(
)
const
{
MOZ_ASSERT
(
obj
)
;
if
(
obj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
{
return
obj
-
>
as
<
ArrayBufferObjectMaybeShared
>
(
)
.
isResizable
(
)
;
}
else
{
return
obj
-
>
as
<
ArrayBufferViewObject
>
(
)
.
hasResizableBuffer
(
)
;
}
}
JS
:
:
TypedArray_base
JS
:
:
TypedArray_base
:
:
fromObject
(
JSObject
*
unwrapped
)
{
if
(
unwrapped
&
&
unwrapped
-
>
is
<
TypedArrayObject
>
(
)
)
{
return
TypedArray_base
(
unwrapped
)
;
}
return
TypedArray_base
(
nullptr
)
;
}
template
<
JS
:
:
Scalar
:
:
Type
EType
>
typename
mozilla
:
:
Span
<
typename
TypedArray
<
EType
>
:
:
DataType
>
TypedArray
<
EType
>
:
:
getData
(
bool
*
isSharedMemory
const
AutoRequireNoGC
&
)
{
using
ExternalType
=
TypedArray
<
EType
>
:
:
DataType
;
if
(
!
obj
)
{
return
nullptr
;
}
TypedArrayObject
*
tarr
=
&
obj
-
>
as
<
TypedArrayObject
>
(
)
;
MOZ_ASSERT
(
tarr
)
;
*
isSharedMemory
=
tarr
-
>
isSharedMemory
(
)
;
return
{
static_cast
<
ExternalType
*
>
(
tarr
-
>
dataPointerEither
(
)
.
unwrap
(
)
)
tarr
-
>
length
(
)
.
valueOr
(
0
)
}
;
}
;
#
define
INSTANTIATE_GET_DATA
(
a
b
Name
)
\
template
mozilla
:
:
Span
<
typename
TypedArray
<
JS
:
:
Scalar
:
:
Name
>
:
:
DataType
>
\
TypedArray
<
JS
:
:
Scalar
:
:
Name
>
:
:
getData
(
bool
*
isSharedMemory
\
const
AutoRequireNoGC
&
)
;
JS_FOR_EACH_TYPED_ARRAY
(
INSTANTIATE_GET_DATA
)
#
undef
INSTANTIATE_GET_DATA
}
