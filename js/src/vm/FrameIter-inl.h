#
ifndef
vm_FrameIter_inl_h
#
define
vm_FrameIter_inl_h
#
include
"
vm
/
FrameIter
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jit
/
JSJitFrameIter
.
h
"
#
include
"
vm
/
Stack
-
inl
.
h
"
namespace
js
{
template
<
class
Op
>
inline
void
FrameIter
:
:
unaliasedForEachActual
(
JSContext
*
cx
Op
op
)
{
switch
(
data_
.
state_
)
{
case
DONE
:
break
;
case
INTERP
:
interpFrame
(
)
-
>
unaliasedForEachActual
(
op
)
;
return
;
case
JIT
:
MOZ_ASSERT
(
isJSJit
(
)
)
;
if
(
jsJitFrame
(
)
.
isIonJS
(
)
)
{
jit
:
:
MaybeReadFallback
recover
(
cx
activation
(
)
-
>
asJit
(
)
&
jsJitFrame
(
)
)
;
ionInlineFrames_
.
unaliasedForEachActual
(
cx
op
jit
:
:
ReadFrame_Actuals
recover
)
;
}
else
if
(
jsJitFrame
(
)
.
isBailoutJS
(
)
)
{
jit
:
:
MaybeReadFallback
fallback
;
ionInlineFrames_
.
unaliasedForEachActual
(
cx
op
jit
:
:
ReadFrame_Actuals
fallback
)
;
}
else
{
MOZ_ASSERT
(
jsJitFrame
(
)
.
isBaselineJS
(
)
)
;
jsJitFrame
(
)
.
unaliasedForEachActual
(
op
jit
:
:
ReadFrame_Actuals
)
;
}
return
;
}
MOZ_CRASH
(
"
Unexpected
state
"
)
;
}
}
#
endif
