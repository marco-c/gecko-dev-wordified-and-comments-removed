#
ifndef
vm_ErrorReporting_h
#
define
vm_ErrorReporting_h
#
include
<
stdarg
.
h
>
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
js
{
class
FrontendContext
;
using
JSAllocator
=
JSContext
;
struct
ErrorMetadata
{
const
char
*
filename
;
uint32_t
lineNumber
;
uint32_t
columnNumber
;
JS
:
:
UniqueTwoByteChars
lineOfContext
;
static
constexpr
size_t
lineOfContextRadius
=
60
;
size_t
lineLength
;
size_t
tokenOffset
;
bool
isMuted
;
}
;
class
CompileError
:
public
JSErrorReport
{
public
:
void
throwError
(
JSContext
*
cx
)
;
}
;
class
MOZ_STACK_CLASS
ReportExceptionClosure
final
:
public
ScriptEnvironmentPreparer
:
:
Closure
{
JS
:
:
HandleValue
exn_
;
public
:
explicit
ReportExceptionClosure
(
JS
:
:
HandleValue
exn
)
:
exn_
(
exn
)
{
}
bool
operator
(
)
(
JSContext
*
cx
)
override
;
}
;
extern
void
CallWarningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
;
extern
void
ReportCompileErrorLatin1
(
FrontendContext
*
ec
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
extern
void
ReportCompileErrorUTF8
(
FrontendContext
*
ec
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
[
[
nodiscard
]
]
extern
bool
ReportCompileWarning
(
FrontendContext
*
ec
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
class
GlobalObject
;
extern
void
ReportErrorToGlobal
(
JSContext
*
cx
JS
:
:
Handle
<
js
:
:
GlobalObject
*
>
global
JS
:
:
HandleValue
error
)
;
enum
class
IsWarning
{
No
Yes
}
;
extern
bool
ReportErrorVA
(
JSContext
*
cx
IsWarning
isWarning
const
char
*
format
ErrorArgumentsType
argumentsType
va_list
ap
)
MOZ_FORMAT_PRINTF
(
3
0
)
;
extern
bool
ReportErrorNumberVA
(
JSContext
*
cx
IsWarning
isWarning
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
ErrorArgumentsType
argumentsType
va_list
ap
)
;
extern
bool
ReportErrorNumberUCArray
(
JSContext
*
cx
IsWarning
isWarning
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
const
char16_t
*
*
args
)
;
extern
bool
ReportErrorNumberUTF8Array
(
JSContext
*
cx
IsWarning
isWarning
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
const
char
*
*
args
)
;
extern
bool
ExpandErrorArgumentsVA
(
FrontendContext
*
ec
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
const
char16_t
*
*
messageArgs
ErrorArgumentsType
argumentsType
JSErrorReport
*
reportp
va_list
ap
)
;
extern
bool
ExpandErrorArgumentsVA
(
FrontendContext
*
ec
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
const
char
*
*
messageArgs
ErrorArgumentsType
argumentsType
JSErrorReport
*
reportp
va_list
ap
)
;
extern
bool
ExpandErrorArgumentsVA
(
FrontendContext
*
ec
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
ErrorArgumentsType
argumentsType
JSErrorReport
*
reportp
va_list
ap
)
;
extern
bool
ExpandErrorArgumentsVA
(
FrontendContext
*
ec
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
const
char16_t
*
*
messageArgs
ErrorArgumentsType
argumentsType
JSErrorNotes
:
:
Note
*
notep
va_list
ap
)
;
extern
void
MaybePrintAndClearPendingException
(
JSContext
*
cx
)
;
}
#
endif
