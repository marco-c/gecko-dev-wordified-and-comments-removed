#
ifndef
vm_ErrorReporting_h
#
define
vm_ErrorReporting_h
#
include
<
stdarg
.
h
>
#
include
<
utility
>
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
js
{
struct
ErrorMetadata
{
const
char
*
filename
;
uint32_t
lineNumber
;
uint32_t
columnNumber
;
JS
:
:
UniqueTwoByteChars
lineOfContext
;
static
constexpr
size_t
lineOfContextRadius
=
60
;
size_t
lineLength
;
size_t
tokenOffset
;
bool
isMuted
;
}
;
class
CompileError
:
public
JSErrorReport
{
public
:
void
throwError
(
JSContext
*
cx
)
;
}
;
class
MOZ_STACK_CLASS
ReportExceptionClosure
final
:
public
ScriptEnvironmentPreparer
:
:
Closure
{
JS
:
:
HandleValue
exn_
;
public
:
explicit
ReportExceptionClosure
(
JS
:
:
HandleValue
exn
)
:
exn_
(
exn
)
{
}
bool
operator
(
)
(
JSContext
*
cx
)
override
;
}
;
extern
void
CallWarningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
;
extern
void
ReportCompileErrorLatin1
(
JSContext
*
cx
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
extern
void
ReportCompileErrorUTF8
(
JSContext
*
cx
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
extern
MOZ_MUST_USE
bool
ReportCompileWarning
(
JSContext
*
cx
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
va_list
*
args
)
;
class
GlobalObject
;
extern
void
ReportErrorToGlobal
(
JSContext
*
cx
JS
:
:
Handle
<
js
:
:
GlobalObject
*
>
global
JS
:
:
HandleValue
error
)
;
}
#
endif
