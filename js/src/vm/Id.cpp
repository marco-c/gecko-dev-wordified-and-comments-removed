#
include
"
js
/
Id
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
SymbolType
.
h
"
#
include
"
vm
/
JSAtom
-
inl
.
h
"
static
const
jsid
voidIdValue
=
JSID_VOID
;
static
const
jsid
emptyIdValue
=
JSID_EMPTY
;
const
JS
:
:
HandleId
JSID_VOIDHANDLE
=
JS
:
:
HandleId
:
:
fromMarkedLocation
(
&
voidIdValue
)
;
const
JS
:
:
HandleId
JSID_EMPTYHANDLE
=
JS
:
:
HandleId
:
:
fromMarkedLocation
(
&
emptyIdValue
)
;
bool
JS
:
:
PropertyKey
:
:
isWellKnownSymbol
(
JS
:
:
SymbolCode
code
)
const
{
MOZ_ASSERT
(
uint32_t
(
code
)
<
WellKnownSymbolLimit
)
;
if
(
!
isSymbol
(
)
)
{
return
false
;
}
return
toSymbol
(
)
-
>
code
(
)
=
=
code
;
}
JS
:
:
PropertyKey
JS
:
:
PropertyKey
:
:
fromPinnedString
(
JSString
*
str
)
{
MOZ_ASSERT
(
str
-
>
asAtom
(
)
.
isPinned
(
)
)
;
return
js
:
:
AtomToId
(
&
str
-
>
asAtom
(
)
)
;
}
