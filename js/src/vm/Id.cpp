#
include
"
js
/
Id
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
SymbolType
.
h
"
#
include
"
vm
/
JSAtom
-
inl
.
h
"
using
namespace
js
;
static
const
JS
:
:
PropertyKey
voidKeyValue
=
JS
:
:
PropertyKey
:
:
Void
(
)
;
const
JS
:
:
HandleId
JS
:
:
VoidHandlePropertyKey
=
JS
:
:
HandleId
:
:
fromMarkedLocation
(
&
voidKeyValue
)
;
bool
JS
:
:
PropertyKey
:
:
isPrivateName
(
)
const
{
return
isSymbol
(
)
&
&
toSymbol
(
)
-
>
isPrivateName
(
)
;
}
bool
JS
:
:
PropertyKey
:
:
isWellKnownSymbol
(
JS
:
:
SymbolCode
code
)
const
{
MOZ_ASSERT
(
uint32_t
(
code
)
<
WellKnownSymbolLimit
)
;
if
(
!
isSymbol
(
)
)
{
return
false
;
}
return
toSymbol
(
)
-
>
code
(
)
=
=
code
;
}
JS
:
:
PropertyKey
JS
:
:
PropertyKey
:
:
fromPinnedString
(
JSString
*
str
)
{
MOZ_ASSERT
(
AtomIsPinned
(
TlsContext
.
get
(
)
&
str
-
>
asAtom
(
)
)
)
;
return
js
:
:
AtomToId
(
&
str
-
>
asAtom
(
)
)
;
}
bool
JS
:
:
PropertyKey
:
:
isNonIntAtom
(
JSAtom
*
atom
)
{
uint32_t
index
;
if
(
!
atom
-
>
isIndex
(
&
index
)
)
{
return
true
;
}
static_assert
(
PropertyKey
:
:
IntMin
=
=
0
)
;
return
index
>
PropertyKey
:
:
IntMax
;
}
bool
JS
:
:
PropertyKey
:
:
isNonIntAtom
(
JSString
*
str
)
{
return
JS
:
:
PropertyKey
:
:
isNonIntAtom
(
&
str
-
>
asAtom
(
)
)
;
}
