#
ifndef
vm_Caches_h
#
define
vm_Caches_h
#
include
"
mozilla
/
Array
.
h
"
#
include
"
frontend
/
ScopeBindingCache
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
StencilCache
.
h
"
namespace
js
{
class
SrcNote
;
struct
GSNCache
{
typedef
HashMap
<
jsbytecode
*
const
SrcNote
*
PointerHasher
<
jsbytecode
*
>
SystemAllocPolicy
>
Map
;
jsbytecode
*
code
;
Map
map
;
GSNCache
(
)
:
code
(
nullptr
)
{
}
void
purge
(
)
;
}
;
struct
EvalCacheEntry
{
JSLinearString
*
str
;
JSScript
*
script
;
JSScript
*
callerScript
;
jsbytecode
*
pc
;
bool
traceWeak
(
JSTracer
*
trc
)
{
MOZ_ASSERT
(
trc
-
>
kind
(
)
=
=
JS
:
:
TracerKind
:
:
MinorSweeping
)
;
return
TraceManuallyBarrieredWeakEdge
(
trc
&
str
"
EvalCacheEntry
:
:
str
"
)
;
}
}
;
struct
EvalCacheLookup
{
explicit
EvalCacheLookup
(
JSContext
*
cx
)
:
str
(
cx
)
callerScript
(
cx
)
{
}
Rooted
<
JSLinearString
*
>
str
;
RootedScript
callerScript
;
MOZ_INIT_OUTSIDE_CTOR
jsbytecode
*
pc
;
}
;
struct
EvalCacheHashPolicy
{
using
Lookup
=
EvalCacheLookup
;
static
HashNumber
hash
(
const
Lookup
&
l
)
;
static
bool
match
(
const
EvalCacheEntry
&
entry
const
EvalCacheLookup
&
l
)
;
}
;
using
EvalCache
=
GCHashSet
<
EvalCacheEntry
EvalCacheHashPolicy
SystemAllocPolicy
>
;
class
MegamorphicCache
{
public
:
static
constexpr
size_t
NumEntries
=
1024
;
static
constexpr
uint8_t
ShapeHashShift1
=
3
;
static
constexpr
uint8_t
ShapeHashShift2
=
ShapeHashShift1
+
10
;
class
Entry
{
Shape
*
shape_
=
nullptr
;
PropertyKey
key_
;
uint16_t
generation_
=
0
;
static
constexpr
size_t
MaxSlotNumber
=
UINT16_MAX
;
uint16_t
slot_
=
0
;
uint8_t
numHops_
=
0
;
friend
class
MegamorphicCache
;
public
:
static
constexpr
uint8_t
MaxHopsForDataProperty
=
UINT8_MAX
-
2
;
static
constexpr
uint8_t
NumHopsForMissingProperty
=
UINT8_MAX
-
1
;
static
constexpr
uint8_t
NumHopsForMissingOwnProperty
=
UINT8_MAX
;
void
init
(
Shape
*
shape
PropertyKey
key
uint16_t
generation
uint8_t
numHops
uint16_t
slot
)
{
shape_
=
shape
;
key_
=
key
;
generation_
=
generation
;
slot_
=
slot
;
numHops_
=
numHops
;
MOZ_ASSERT
(
slot_
=
=
slot
"
slot
must
fit
in
slot_
"
)
;
MOZ_ASSERT
(
numHops_
=
=
numHops
"
numHops
must
fit
in
numHops_
"
)
;
}
bool
isMissingProperty
(
)
const
{
return
numHops_
=
=
NumHopsForMissingProperty
;
}
bool
isMissingOwnProperty
(
)
const
{
return
numHops_
=
=
NumHopsForMissingOwnProperty
;
}
bool
isDataProperty
(
)
const
{
return
numHops_
<
=
MaxHopsForDataProperty
;
}
uint16_t
numHops
(
)
const
{
MOZ_ASSERT
(
isDataProperty
(
)
)
;
return
numHops_
;
}
uint16_t
slot
(
)
const
{
MOZ_ASSERT
(
isDataProperty
(
)
)
;
return
slot_
;
}
static
constexpr
size_t
offsetOfShape
(
)
{
return
offsetof
(
Entry
shape_
)
;
}
static
constexpr
size_t
offsetOfKey
(
)
{
return
offsetof
(
Entry
key_
)
;
}
static
constexpr
size_t
offsetOfGeneration
(
)
{
return
offsetof
(
Entry
generation_
)
;
}
static
constexpr
size_t
offsetOfSlot
(
)
{
return
offsetof
(
Entry
slot_
)
;
}
static
constexpr
size_t
offsetOfNumHops
(
)
{
return
offsetof
(
Entry
numHops_
)
;
}
}
;
private
:
mozilla
:
:
Array
<
Entry
NumEntries
>
entries_
;
uint16_t
generation_
=
0
;
Entry
&
getEntry
(
Shape
*
shape
PropertyKey
key
)
{
static_assert
(
mozilla
:
:
IsPowerOfTwo
(
NumEntries
)
"
NumEntries
must
be
a
power
-
of
-
two
for
fast
modulo
"
)
;
uintptr_t
hash
=
uintptr_t
(
shape
)
>
>
ShapeHashShift1
;
hash
^
=
uintptr_t
(
shape
)
>
>
ShapeHashShift2
;
hash
+
=
HashAtomOrSymbolPropertyKey
(
key
)
;
return
entries_
[
hash
%
NumEntries
]
;
}
public
:
void
bumpGeneration
(
)
{
generation_
+
+
;
if
(
generation_
=
=
0
)
{
for
(
size_t
i
=
0
;
i
<
NumEntries
;
i
+
+
)
{
entries_
[
i
]
.
shape_
=
nullptr
;
}
}
}
bool
lookup
(
Shape
*
shape
PropertyKey
key
Entry
*
*
entryp
)
{
Entry
&
entry
=
getEntry
(
shape
key
)
;
*
entryp
=
&
entry
;
return
(
entry
.
shape_
=
=
shape
&
&
entry
.
key_
=
=
key
&
&
entry
.
generation_
=
=
generation_
)
;
}
void
initEntryForMissingProperty
(
Entry
*
entry
Shape
*
shape
PropertyKey
key
)
{
entry
-
>
init
(
shape
key
generation_
Entry
:
:
NumHopsForMissingProperty
0
)
;
}
void
initEntryForMissingOwnProperty
(
Entry
*
entry
Shape
*
shape
PropertyKey
key
)
{
entry
-
>
init
(
shape
key
generation_
Entry
:
:
NumHopsForMissingOwnProperty
0
)
;
}
void
initEntryForDataProperty
(
Entry
*
entry
Shape
*
shape
PropertyKey
key
size_t
numHops
uint32_t
slot
)
{
if
(
slot
>
Entry
:
:
MaxSlotNumber
|
|
numHops
>
Entry
:
:
MaxHopsForDataProperty
)
{
return
;
}
entry
-
>
init
(
shape
key
generation_
numHops
slot
)
;
}
static
constexpr
size_t
offsetOfEntries
(
)
{
return
offsetof
(
MegamorphicCache
entries_
)
;
}
static
constexpr
size_t
offsetOfGeneration
(
)
{
return
offsetof
(
MegamorphicCache
generation_
)
;
}
}
;
class
StringToAtomCache
{
using
Map
=
HashMap
<
JSLinearString
*
JSAtom
*
PointerHasher
<
JSLinearString
*
>
SystemAllocPolicy
>
;
Map
map_
;
struct
LastEntry
{
JSLinearString
*
string
=
nullptr
;
JSAtom
*
atom
=
nullptr
;
}
;
static
constexpr
size_t
NumLastEntries
=
2
;
mozilla
:
:
Array
<
LastEntry
NumLastEntries
>
lastLookups_
;
public
:
static
constexpr
size_t
MinStringLength
=
30
;
JSAtom
*
lookupInMap
(
JSLinearString
*
s
)
const
{
MOZ_ASSERT
(
s
-
>
inStringToAtomCache
(
)
)
;
MOZ_ASSERT
(
s
-
>
length
(
)
>
=
MinStringLength
)
;
auto
p
=
map_
.
lookup
(
s
)
;
JSAtom
*
atom
=
p
?
p
-
>
value
(
)
:
nullptr
;
MOZ_ASSERT_IF
(
atom
EqualStrings
(
s
atom
)
)
;
return
atom
;
}
MOZ_ALWAYS_INLINE
JSAtom
*
lookup
(
JSLinearString
*
s
)
const
{
MOZ_ASSERT
(
!
s
-
>
isAtom
(
)
)
;
for
(
const
LastEntry
&
entry
:
lastLookups_
)
{
if
(
entry
.
string
=
=
s
)
{
MOZ_ASSERT
(
EqualStrings
(
s
entry
.
atom
)
)
;
return
entry
.
atom
;
}
}
if
(
!
s
-
>
inStringToAtomCache
(
)
)
{
MOZ_ASSERT
(
!
map_
.
lookup
(
s
)
)
;
return
nullptr
;
}
return
lookupInMap
(
s
)
;
}
void
maybePut
(
JSLinearString
*
s
JSAtom
*
atom
)
{
MOZ_ASSERT
(
!
s
-
>
isAtom
(
)
)
;
for
(
size_t
i
=
NumLastEntries
-
1
;
i
>
0
;
i
-
-
)
{
lastLookups_
[
i
]
=
lastLookups_
[
i
-
1
]
;
}
lastLookups_
[
0
]
.
string
=
s
;
lastLookups_
[
0
]
.
atom
=
atom
;
if
(
s
-
>
length
(
)
<
MinStringLength
)
{
return
;
}
if
(
!
map_
.
putNew
(
s
atom
)
)
{
return
;
}
s
-
>
setInStringToAtomCache
(
)
;
}
void
purge
(
)
{
map_
.
clearAndCompact
(
)
;
for
(
LastEntry
&
entry
:
lastLookups_
)
{
entry
.
string
=
nullptr
;
entry
.
atom
=
nullptr
;
}
}
}
;
class
RuntimeCaches
{
public
:
MegamorphicCache
megamorphicCache
;
GSNCache
gsnCache
;
UncompressedSourceCache
uncompressedSourceCache
;
EvalCache
evalCache
;
StringToAtomCache
stringToAtomCache
;
frontend
:
:
RuntimeScopeBindingCache
scopeCache
;
StencilCache
delazificationCache
;
void
sweepAfterMinorGC
(
JSTracer
*
trc
)
{
evalCache
.
traceWeak
(
trc
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkEvalCacheAfterMinorGC
(
)
;
#
endif
void
purgeForCompaction
(
)
{
evalCache
.
clear
(
)
;
stringToAtomCache
.
purge
(
)
;
megamorphicCache
.
bumpGeneration
(
)
;
scopeCache
.
purge
(
)
;
}
void
purgeStencils
(
)
{
delazificationCache
.
clearAndDisable
(
)
;
}
void
purge
(
)
{
purgeForCompaction
(
)
;
gsnCache
.
purge
(
)
;
uncompressedSourceCache
.
purge
(
)
;
purgeStencils
(
)
;
}
}
;
}
#
endif
