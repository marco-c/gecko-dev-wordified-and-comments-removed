#
include
"
vm
/
TaggedProto
.
h
"
#
include
"
jsfun
.
h
"
#
include
"
jsobj
.
h
"
#
include
"
gc
/
Barrier
.
h
"
namespace
js
{
void
InternalGCMethods
<
TaggedProto
>
:
:
preBarrier
(
TaggedProto
&
proto
)
{
InternalGCMethods
<
JSObject
*
>
:
:
preBarrier
(
proto
.
toObjectOrNull
(
)
)
;
}
void
InternalGCMethods
<
TaggedProto
>
:
:
postBarrier
(
TaggedProto
*
vp
TaggedProto
prev
TaggedProto
next
)
{
JSObject
*
prevObj
=
prev
.
isObject
(
)
?
prev
.
toObject
(
)
:
nullptr
;
JSObject
*
nextObj
=
next
.
isObject
(
)
?
next
.
toObject
(
)
:
nullptr
;
InternalGCMethods
<
JSObject
*
>
:
:
postBarrier
(
reinterpret_cast
<
JSObject
*
*
>
(
vp
)
prevObj
nextObj
)
;
}
}
HashNumber
js
:
:
TaggedProto
:
:
hashCode
(
)
const
{
if
(
isLazy
(
)
)
return
HashNumber
(
1
)
;
JSObject
*
obj
=
toObjectOrNull
(
)
;
if
(
!
obj
)
return
HashNumber
(
0
)
;
return
obj
-
>
zone
(
)
-
>
getHashCodeInfallible
(
obj
)
;
}
uint64_t
js
:
:
TaggedProto
:
:
uniqueId
(
)
const
{
if
(
isLazy
(
)
)
return
uint64_t
(
1
)
;
JSObject
*
obj
=
toObjectOrNull
(
)
;
if
(
!
obj
)
return
uint64_t
(
0
)
;
return
obj
-
>
zone
(
)
-
>
getUniqueIdInfallible
(
obj
)
;
}
