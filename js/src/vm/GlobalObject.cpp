#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsdate
.
h
"
#
include
"
jsexn
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
AtomicsObject
.
h
"
#
include
"
builtin
/
BigInt
.
h
"
#
include
"
builtin
/
DataViewObject
.
h
"
#
include
"
builtin
/
Eval
.
h
"
#
ifdef
JS_HAS_INTL_API
#
include
"
builtin
/
intl
/
Collator
.
h
"
#
include
"
builtin
/
intl
/
DateTimeFormat
.
h
"
#
include
"
builtin
/
intl
/
DisplayNames
.
h
"
#
include
"
builtin
/
intl
/
ListFormat
.
h
"
#
include
"
builtin
/
intl
/
Locale
.
h
"
#
include
"
builtin
/
intl
/
NumberFormat
.
h
"
#
include
"
builtin
/
intl
/
PluralRules
.
h
"
#
include
"
builtin
/
intl
/
RelativeTimeFormat
.
h
"
#
endif
#
include
"
builtin
/
FinalizationRegistryObject
.
h
"
#
include
"
builtin
/
MapObject
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
builtin
/
Object
.
h
"
#
include
"
builtin
/
RegExp
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
builtin
/
Stream
.
h
"
#
include
"
builtin
/
streams
/
QueueingStrategies
.
h
"
#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamController
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamReader
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultController
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
.
h
"
#
include
"
builtin
/
Symbol
.
h
"
#
include
"
builtin
/
WeakMapObject
.
h
"
#
include
"
builtin
/
WeakRefObject
.
h
"
#
include
"
builtin
/
WeakSetObject
.
h
"
#
include
"
debugger
/
DebugAPI
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
gc
/
FreeOp
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
friend
/
WindowProxy
.
h
"
#
include
"
js
/
OffThreadScriptCompilation
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
js
/
ProtoKey
.
h
"
#
include
"
vm
/
AsyncFunction
.
h
"
#
include
"
vm
/
AsyncIteration
.
h
"
#
include
"
vm
/
BooleanObject
.
h
"
#
include
"
vm
/
DateObject
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
ErrorObject
.
h
"
#
include
"
vm
/
GeneratorObject
.
h
"
#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
NumberObject
.
h
"
#
include
"
vm
/
PIC
.
h
"
#
include
"
vm
/
RegExpStatics
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
#
include
"
vm
/
StringObject
.
h
"
#
include
"
wasm
/
WasmJS
.
h
"
#
include
"
gc
/
FreeOp
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
namespace
js
;
namespace
js
{
extern
const
JSClass
IntlClass
;
extern
const
JSClass
JSONClass
;
extern
const
JSClass
MathClass
;
extern
const
JSClass
ReflectClass
;
}
static
const
JSClass
*
const
protoTable
[
JSProto_LIMIT
]
=
{
#
define
INIT_FUNC
(
name
clasp
)
clasp
#
define
INIT_FUNC_DUMMY
(
name
clasp
)
nullptr
JS_FOR_PROTOTYPES
(
INIT_FUNC
INIT_FUNC_DUMMY
)
#
undef
INIT_FUNC_DUMMY
#
undef
INIT_FUNC
}
;
JS_PUBLIC_API
const
JSClass
*
js
:
:
ProtoKeyToClass
(
JSProtoKey
key
)
{
MOZ_ASSERT
(
key
<
JSProto_LIMIT
)
;
return
protoTable
[
key
]
;
}
bool
GlobalObject
:
:
skipDeselectedConstructor
(
JSContext
*
cx
JSProtoKey
key
)
{
switch
(
key
)
{
case
JSProto_Null
:
case
JSProto_Object
:
case
JSProto_Function
:
case
JSProto_Array
:
case
JSProto_Boolean
:
case
JSProto_JSON
:
case
JSProto_Date
:
case
JSProto_Math
:
case
JSProto_Number
:
case
JSProto_String
:
case
JSProto_RegExp
:
case
JSProto_Error
:
case
JSProto_InternalError
:
case
JSProto_AggregateError
:
case
JSProto_EvalError
:
case
JSProto_RangeError
:
case
JSProto_ReferenceError
:
case
JSProto_SyntaxError
:
case
JSProto_TypeError
:
case
JSProto_URIError
:
case
JSProto_DebuggeeWouldRun
:
case
JSProto_CompileError
:
case
JSProto_LinkError
:
case
JSProto_RuntimeError
:
case
JSProto_ArrayBuffer
:
case
JSProto_Int8Array
:
case
JSProto_Uint8Array
:
case
JSProto_Int16Array
:
case
JSProto_Uint16Array
:
case
JSProto_Int32Array
:
case
JSProto_Uint32Array
:
case
JSProto_Float32Array
:
case
JSProto_Float64Array
:
case
JSProto_Uint8ClampedArray
:
case
JSProto_BigInt64Array
:
case
JSProto_BigUint64Array
:
case
JSProto_BigInt
:
case
JSProto_Proxy
:
case
JSProto_WeakMap
:
case
JSProto_Map
:
case
JSProto_Set
:
case
JSProto_DataView
:
case
JSProto_Symbol
:
case
JSProto_Reflect
:
case
JSProto_WeakSet
:
case
JSProto_TypedArray
:
case
JSProto_SavedFrame
:
case
JSProto_Promise
:
case
JSProto_AsyncFunction
:
case
JSProto_GeneratorFunction
:
case
JSProto_AsyncGeneratorFunction
:
return
false
;
case
JSProto_WebAssembly
:
return
!
wasm
:
:
HasSupport
(
cx
)
;
case
JSProto_WasmModule
:
case
JSProto_WasmInstance
:
case
JSProto_WasmMemory
:
case
JSProto_WasmTable
:
case
JSProto_WasmGlobal
:
case
JSProto_WasmTag
:
case
JSProto_WasmException
:
return
false
;
#
ifdef
JS_HAS_INTL_API
case
JSProto_Intl
:
case
JSProto_Collator
:
case
JSProto_DateTimeFormat
:
case
JSProto_DisplayNames
:
case
JSProto_Locale
:
case
JSProto_ListFormat
:
case
JSProto_NumberFormat
:
case
JSProto_PluralRules
:
case
JSProto_RelativeTimeFormat
:
return
false
;
#
endif
case
JSProto_ReadableStream
:
case
JSProto_ReadableStreamDefaultReader
:
case
JSProto_ReadableStreamDefaultController
:
case
JSProto_ReadableByteStreamController
:
case
JSProto_ByteLengthQueuingStrategy
:
case
JSProto_CountQueuingStrategy
:
return
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getStreamsEnabled
(
)
;
case
JSProto_WritableStream
:
case
JSProto_WritableStreamDefaultController
:
case
JSProto_WritableStreamDefaultWriter
:
{
const
auto
&
realmOptions
=
cx
-
>
realm
(
)
-
>
creationOptions
(
)
;
return
!
realmOptions
.
getStreamsEnabled
(
)
|
|
!
realmOptions
.
getWritableStreamsEnabled
(
)
;
}
case
JSProto_Atomics
:
case
JSProto_SharedArrayBuffer
:
return
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getSharedMemoryAndAtomicsEnabled
(
)
;
case
JSProto_WeakRef
:
case
JSProto_FinalizationRegistry
:
return
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getWeakRefsEnabled
(
)
=
=
JS
:
:
WeakRefSpecifier
:
:
Disabled
;
case
JSProto_Iterator
:
case
JSProto_AsyncIterator
:
return
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getIteratorHelpersEnabled
(
)
;
default
:
MOZ_CRASH
(
"
unexpected
JSProtoKey
"
)
;
}
}
bool
GlobalObject
:
:
resolveConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
IfClassIsDisabled
mode
)
{
MOZ_ASSERT
(
key
!
=
JSProto_Null
)
;
MOZ_ASSERT
(
!
global
-
>
isStandardClassResolved
(
key
)
)
;
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
global
-
>
compartment
(
)
)
;
AutoRealm
ar
(
cx
global
)
;
if
(
global
-
>
zone
(
)
-
>
createdForHelperThread
(
)
)
{
return
resolveOffThreadConstructor
(
cx
global
key
)
;
}
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
AutoSuppressAllocationMetadataBuilder
suppressMetadata
(
cx
)
;
AutoSuppressDebuggeeNoExecuteChecks
suppressNX
(
cx
)
;
const
JSClass
*
clasp
=
ProtoKeyToClass
(
key
)
;
if
(
!
clasp
|
|
skipDeselectedConstructor
(
cx
key
)
)
{
if
(
mode
=
=
IfClassIsDisabled
:
:
Throw
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CONSTRUCTOR_DISABLED
clasp
?
clasp
-
>
name
:
"
constructor
"
)
;
return
false
;
}
return
true
;
}
if
(
!
clasp
-
>
specDefined
(
)
)
{
return
true
;
}
bool
isObjectOrFunction
=
key
=
=
JSProto_Function
|
|
key
=
=
JSProto_Object
;
if
(
key
=
=
JSProto_Function
&
&
!
global
-
>
hasPrototype
(
JSProto_Object
)
)
{
return
resolveConstructor
(
cx
global
JSProto_Object
IfClassIsDisabled
:
:
DoNothing
)
;
}
if
(
key
=
=
JSProto_GeneratorFunction
&
&
!
global
-
>
hasBuiltinProto
(
ProtoKind
:
:
IteratorProto
)
)
{
if
(
!
getOrCreateIteratorPrototype
(
cx
global
)
)
{
return
false
;
}
if
(
global
-
>
isStandardClassResolved
(
key
)
)
{
return
true
;
}
}
RootedObject
proto
(
cx
)
;
if
(
ClassObjectCreationOp
createPrototype
=
clasp
-
>
specCreatePrototypeHook
(
)
)
{
proto
=
createPrototype
(
cx
key
)
;
if
(
!
proto
)
{
return
false
;
}
if
(
isObjectOrFunction
)
{
MOZ_ASSERT
(
!
global
-
>
isStandardClassResolved
(
key
)
)
;
global
-
>
setPrototype
(
key
proto
)
;
}
}
RootedObject
ctor
(
cx
clasp
-
>
specCreateConstructorHook
(
)
(
cx
key
)
)
;
if
(
!
ctor
)
{
return
false
;
}
RootedId
id
(
cx
NameToId
(
ClassName
(
key
cx
)
)
)
;
if
(
isObjectOrFunction
)
{
if
(
clasp
-
>
specShouldDefineConstructor
(
)
)
{
RootedValue
ctorValue
(
cx
ObjectValue
(
*
ctor
)
)
;
if
(
!
DefineDataProperty
(
cx
global
id
ctorValue
JSPROP_RESOLVING
)
)
{
return
false
;
}
}
global
-
>
setConstructor
(
key
ctor
)
;
}
if
(
const
JSFunctionSpec
*
funs
=
clasp
-
>
specPrototypeFunctions
(
)
)
{
if
(
!
JS_DefineFunctions
(
cx
proto
funs
)
)
{
return
false
;
}
}
if
(
const
JSPropertySpec
*
props
=
clasp
-
>
specPrototypeProperties
(
)
)
{
if
(
!
JS_DefineProperties
(
cx
proto
props
)
)
{
return
false
;
}
}
if
(
const
JSFunctionSpec
*
funs
=
clasp
-
>
specConstructorFunctions
(
)
)
{
if
(
!
JS_DefineFunctions
(
cx
ctor
funs
)
)
{
return
false
;
}
}
if
(
const
JSPropertySpec
*
props
=
clasp
-
>
specConstructorProperties
(
)
)
{
if
(
!
JS_DefineProperties
(
cx
ctor
props
)
)
{
return
false
;
}
}
if
(
proto
&
&
!
LinkConstructorAndPrototype
(
cx
ctor
proto
)
)
{
return
false
;
}
if
(
FinishClassInitOp
finishInit
=
clasp
-
>
specFinishInitHook
(
)
)
{
if
(
!
finishInit
(
cx
ctor
proto
)
)
{
return
false
;
}
}
if
(
!
isObjectOrFunction
)
{
if
(
clasp
-
>
specShouldDefineConstructor
(
)
)
{
bool
shouldReallyDefine
=
true
;
if
(
key
=
=
JSProto_SharedArrayBuffer
)
{
const
JS
:
:
RealmCreationOptions
&
options
=
global
-
>
realm
(
)
-
>
creationOptions
(
)
;
MOZ_ASSERT
(
options
.
getSharedMemoryAndAtomicsEnabled
(
)
"
shouldn
'
t
be
defining
SharedArrayBuffer
if
shared
memory
"
"
is
disabled
"
)
;
shouldReallyDefine
=
options
.
defineSharedArrayBufferConstructor
(
)
;
}
if
(
shouldReallyDefine
)
{
RootedValue
ctorValue
(
cx
ObjectValue
(
*
ctor
)
)
;
if
(
!
DefineDataProperty
(
cx
global
id
ctorValue
JSPROP_RESOLVING
)
)
{
return
false
;
}
}
}
global
-
>
setConstructor
(
key
ctor
)
;
if
(
proto
)
{
global
-
>
setPrototype
(
key
proto
)
;
}
}
return
true
;
}
bool
GlobalObject
:
:
maybeResolveGlobalThis
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
bool
*
resolved
)
{
if
(
!
global
-
>
data
(
)
.
globalThisResolved
)
{
RootedValue
v
(
cx
ObjectValue
(
*
ToWindowProxyIfWindow
(
global
)
)
)
;
if
(
!
DefineDataProperty
(
cx
global
cx
-
>
names
(
)
.
globalThis
v
JSPROP_RESOLVING
)
)
{
return
false
;
}
*
resolved
=
true
;
global
-
>
data
(
)
.
globalThisResolved
=
true
;
}
return
true
;
}
JSObject
*
GlobalObject
:
:
createBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
ObjectInitOp
init
)
{
if
(
global
-
>
zone
(
)
-
>
createdForHelperThread
(
)
)
{
return
createOffThreadBuiltinProto
(
cx
global
kind
)
;
}
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
if
(
!
init
(
cx
global
)
)
{
return
nullptr
;
}
return
&
global
-
>
getBuiltinProto
(
kind
)
;
}
JSObject
*
GlobalObject
:
:
createBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
HandleAtom
tag
ObjectInitWithTagOp
init
)
{
if
(
global
-
>
zone
(
)
-
>
createdForHelperThread
(
)
)
{
return
createOffThreadBuiltinProto
(
cx
global
kind
)
;
}
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
if
(
!
init
(
cx
global
tag
)
)
{
return
nullptr
;
}
return
&
global
-
>
getBuiltinProto
(
kind
)
;
}
const
JSClass
GlobalObject
:
:
OffThreadPlaceholderObject
:
:
class_
=
{
"
off
-
thread
-
prototype
-
placeholder
"
JSCLASS_HAS_RESERVED_SLOTS
(
1
)
}
;
GlobalObject
:
:
OffThreadPlaceholderObject
*
GlobalObject
:
:
OffThreadPlaceholderObject
:
:
New
(
JSContext
*
cx
JSProtoKey
key
)
{
Rooted
<
OffThreadPlaceholderObject
*
>
placeholder
(
cx
)
;
placeholder
=
NewObjectWithGivenProto
<
OffThreadPlaceholderObject
>
(
cx
nullptr
)
;
if
(
!
placeholder
)
{
return
nullptr
;
}
placeholder
-
>
setReservedSlot
(
ProtoKeyOrProtoKindSlot
Int32Value
(
key
)
)
;
return
placeholder
;
}
GlobalObject
:
:
OffThreadPlaceholderObject
*
GlobalObject
:
:
OffThreadPlaceholderObject
:
:
New
(
JSContext
*
cx
ProtoKind
kind
)
{
Rooted
<
OffThreadPlaceholderObject
*
>
placeholder
(
cx
)
;
placeholder
=
NewObjectWithGivenProto
<
OffThreadPlaceholderObject
>
(
cx
nullptr
)
;
if
(
!
placeholder
)
{
return
nullptr
;
}
placeholder
-
>
setReservedSlot
(
ProtoKeyOrProtoKindSlot
Int32Value
(
-
int32_t
(
kind
)
)
)
;
return
placeholder
;
}
inline
int32_t
GlobalObject
:
:
OffThreadPlaceholderObject
:
:
getProtoKeyOrProtoKind
(
)
const
{
return
getReservedSlot
(
ProtoKeyOrProtoKindSlot
)
.
toInt32
(
)
;
}
bool
GlobalObject
:
:
resolveOffThreadConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
)
{
MOZ_ASSERT
(
global
-
>
zone
(
)
-
>
createdForHelperThread
(
)
)
;
MOZ_ASSERT
(
key
=
=
JSProto_Object
|
|
key
=
=
JSProto_Function
|
|
key
=
=
JSProto_Array
|
|
key
=
=
JSProto_RegExp
|
|
key
=
=
JSProto_AsyncFunction
|
|
key
=
=
JSProto_GeneratorFunction
|
|
key
=
=
JSProto_AsyncGeneratorFunction
)
;
Rooted
<
OffThreadPlaceholderObject
*
>
placeholder
(
cx
)
;
placeholder
=
OffThreadPlaceholderObject
:
:
New
(
cx
key
)
;
if
(
!
placeholder
)
{
return
false
;
}
if
(
key
=
=
JSProto_Object
&
&
!
JSObject
:
:
setFlag
(
cx
placeholder
ObjectFlag
:
:
ImmutablePrototype
)
)
{
return
false
;
}
global
-
>
setPrototype
(
key
placeholder
)
;
global
-
>
setConstructor
(
key
placeholder
)
;
return
true
;
}
JSObject
*
GlobalObject
:
:
createOffThreadBuiltinProto
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
ProtoKind
kind
)
{
MOZ_ASSERT
(
global
-
>
zone
(
)
-
>
createdForHelperThread
(
)
)
;
MOZ_ASSERT
(
kind
=
=
ProtoKind
:
:
ModuleProto
|
|
kind
=
=
ProtoKind
:
:
ImportEntryProto
|
|
kind
=
=
ProtoKind
:
:
ExportEntryProto
|
|
kind
=
=
ProtoKind
:
:
RequestedModuleProto
)
;
auto
placeholder
=
OffThreadPlaceholderObject
:
:
New
(
cx
kind
)
;
if
(
!
placeholder
)
{
return
nullptr
;
}
global
-
>
initBuiltinProto
(
kind
placeholder
)
;
return
placeholder
;
}
JSObject
*
GlobalObject
:
:
getPrototypeForOffThreadPlaceholder
(
JSObject
*
obj
)
{
auto
placeholder
=
&
obj
-
>
as
<
OffThreadPlaceholderObject
>
(
)
;
int32_t
value
=
placeholder
-
>
getProtoKeyOrProtoKind
(
)
;
if
(
value
>
=
0
)
{
MOZ_ASSERT
(
value
<
int32_t
(
JSProto_LIMIT
)
)
;
return
&
getPrototype
(
JSProtoKey
(
value
)
)
;
}
MOZ_ASSERT
(
-
value
<
int32_t
(
ProtoKind
:
:
Limit
)
)
;
return
&
getBuiltinProto
(
ProtoKind
(
-
value
)
)
;
}
bool
GlobalObject
:
:
initBuiltinConstructor
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
JSProtoKey
key
HandleObject
ctor
HandleObject
proto
)
{
MOZ_ASSERT
(
!
global
-
>
empty
(
)
)
;
MOZ_ASSERT
(
key
!
=
JSProto_Null
)
;
MOZ_ASSERT
(
ctor
)
;
MOZ_ASSERT
(
proto
)
;
RootedId
id
(
cx
NameToId
(
ClassName
(
key
cx
)
)
)
;
MOZ_ASSERT
(
!
global
-
>
lookup
(
cx
id
)
)
;
RootedValue
ctorValue
(
cx
ObjectValue
(
*
ctor
)
)
;
if
(
!
DefineDataProperty
(
cx
global
id
ctorValue
JSPROP_RESOLVING
)
)
{
return
false
;
}
global
-
>
setConstructor
(
key
ctor
)
;
global
-
>
setPrototype
(
key
proto
)
;
return
true
;
}
static
bool
ThrowTypeError
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
ThrowTypeErrorBehavior
(
cx
)
;
return
false
;
}
JSObject
*
GlobalObject
:
:
getOrCreateThrowTypeError
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
JSFunction
*
fun
=
global
-
>
data
(
)
.
throwTypeError
)
{
return
fun
;
}
RootedFunction
throwTypeError
(
cx
NewNativeFunction
(
cx
ThrowTypeError
0
nullptr
)
)
;
if
(
!
throwTypeError
|
|
!
PreventExtensions
(
cx
throwTypeError
)
)
{
return
nullptr
;
}
Rooted
<
PropertyDescriptor
>
nonConfigurableDesc
(
cx
PropertyDescriptor
:
:
Empty
(
)
)
;
nonConfigurableDesc
.
setConfigurable
(
false
)
;
RootedId
lengthId
(
cx
NameToId
(
cx
-
>
names
(
)
.
length
)
)
;
ObjectOpResult
lengthResult
;
if
(
!
NativeDefineProperty
(
cx
throwTypeError
lengthId
nonConfigurableDesc
lengthResult
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
lengthResult
)
;
RootedId
nameId
(
cx
NameToId
(
cx
-
>
names
(
)
.
name
)
)
;
ObjectOpResult
nameResult
;
if
(
!
NativeDefineProperty
(
cx
throwTypeError
nameId
nonConfigurableDesc
nameResult
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
nameResult
)
;
global
-
>
data
(
)
.
throwTypeError
.
init
(
throwTypeError
)
;
return
throwTypeError
;
}
GlobalObject
*
GlobalObject
:
:
createInternal
(
JSContext
*
cx
const
JSClass
*
clasp
)
{
MOZ_ASSERT
(
clasp
-
>
flags
&
JSCLASS_IS_GLOBAL
)
;
MOZ_ASSERT
(
clasp
-
>
isTrace
(
JS_GlobalObjectTraceHook
)
)
;
JSObject
*
obj
=
NewTenuredObjectWithGivenProto
(
cx
clasp
nullptr
)
;
if
(
!
obj
)
{
return
nullptr
;
}
Rooted
<
GlobalObject
*
>
global
(
cx
&
obj
-
>
as
<
GlobalObject
>
(
)
)
;
MOZ_ASSERT
(
global
-
>
isUnqualifiedVarObj
(
)
)
;
{
auto
data
=
cx
-
>
make_unique
<
GlobalObjectData
>
(
cx
-
>
zone
(
)
)
;
if
(
!
data
)
{
return
nullptr
;
}
cx
-
>
realm
(
)
-
>
initGlobal
(
*
global
)
;
InitReservedSlot
(
global
GLOBAL_DATA_SLOT
data
.
release
(
)
MemoryUse
:
:
GlobalObjectData
)
;
}
Rooted
<
GlobalLexicalEnvironmentObject
*
>
lexical
(
cx
GlobalLexicalEnvironmentObject
:
:
create
(
cx
global
)
)
;
if
(
!
lexical
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
lexicalEnvironment
.
init
(
lexical
)
;
Rooted
<
GlobalScope
*
>
emptyGlobalScope
(
cx
GlobalScope
:
:
createEmpty
(
cx
ScopeKind
:
:
Global
)
)
;
if
(
!
emptyGlobalScope
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
emptyGlobalScope
.
init
(
emptyGlobalScope
)
;
if
(
!
JSObject
:
:
setQualifiedVarObj
(
cx
global
)
)
{
return
nullptr
;
}
return
global
;
}
GlobalObject
*
GlobalObject
:
:
new_
(
JSContext
*
cx
const
JSClass
*
clasp
JSPrincipals
*
principals
JS
:
:
OnNewGlobalHookOption
hookOption
const
JS
:
:
RealmOptions
&
options
)
{
MOZ_ASSERT
(
!
cx
-
>
isExceptionPending
(
)
)
;
MOZ_ASSERT_IF
(
cx
-
>
zone
(
)
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
Rooted
<
GlobalObject
*
>
existingGlobal
(
cx
)
;
const
JS
:
:
RealmCreationOptions
&
creationOptions
=
options
.
creationOptions
(
)
;
if
(
creationOptions
.
compartmentSpecifier
(
)
=
=
JS
:
:
CompartmentSpecifier
:
:
ExistingCompartment
)
{
Compartment
*
comp
=
creationOptions
.
compartment
(
)
;
existingGlobal
=
&
comp
-
>
firstGlobal
(
)
;
}
Realm
*
realm
=
NewRealm
(
cx
principals
options
)
;
if
(
!
realm
)
{
return
nullptr
;
}
Rooted
<
GlobalObject
*
>
global
(
cx
)
;
{
AutoRealmUnchecked
ar
(
cx
realm
)
;
global
=
GlobalObject
:
:
createInternal
(
cx
clasp
)
;
if
(
!
global
)
{
return
nullptr
;
}
if
(
hookOption
=
=
JS
:
:
FireOnNewGlobalHook
)
{
JS_FireOnNewGlobalObject
(
cx
global
)
;
}
}
return
global
;
}
GlobalScope
&
GlobalObject
:
:
emptyGlobalScope
(
)
const
{
return
*
data
(
)
.
emptyGlobalScope
;
}
bool
GlobalObject
:
:
getOrCreateEval
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
MutableHandleObject
eval
)
{
if
(
!
getOrCreateObjectPrototype
(
cx
global
)
)
{
return
false
;
}
eval
.
set
(
global
-
>
data
(
)
.
eval
)
;
MOZ_ASSERT
(
eval
)
;
return
true
;
}
bool
GlobalObject
:
:
valueIsEval
(
const
Value
&
val
)
{
return
val
.
isObject
(
)
&
&
data
(
)
.
eval
=
=
&
val
.
toObject
(
)
;
}
bool
GlobalObject
:
:
initStandardClasses
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
DefineDataProperty
(
cx
global
cx
-
>
names
(
)
.
undefined
UndefinedHandleValue
JSPROP_PERMANENT
|
JSPROP_READONLY
|
JSPROP_RESOLVING
)
)
{
return
false
;
}
bool
resolved
;
if
(
!
GlobalObject
:
:
maybeResolveGlobalThis
(
cx
global
&
resolved
)
)
{
return
false
;
}
for
(
size_t
k
=
0
;
k
<
JSProto_LIMIT
;
+
+
k
)
{
JSProtoKey
key
=
static_cast
<
JSProtoKey
>
(
k
)
;
if
(
key
!
=
JSProto_Null
&
&
!
global
-
>
isStandardClassResolved
(
key
)
)
{
if
(
!
resolveConstructor
(
cx
global
static_cast
<
JSProtoKey
>
(
k
)
IfClassIsDisabled
:
:
DoNothing
)
)
{
return
false
;
}
}
}
return
true
;
}
bool
GlobalObject
:
:
isRuntimeCodeGenEnabled
(
JSContext
*
cx
HandleString
code
Handle
<
GlobalObject
*
>
global
)
{
JSCSPEvalChecker
allows
=
cx
-
>
runtime
(
)
-
>
securityCallbacks
-
>
contentSecurityPolicyAllows
;
if
(
allows
)
{
return
allows
(
cx
code
)
;
}
return
true
;
}
JSFunction
*
GlobalObject
:
:
createConstructor
(
JSContext
*
cx
Native
ctor
JSAtom
*
nameArg
unsigned
length
gc
:
:
AllocKind
kind
const
JSJitInfo
*
jitInfo
)
{
RootedAtom
name
(
cx
nameArg
)
;
JSFunction
*
fun
=
NewNativeConstructor
(
cx
ctor
length
name
kind
)
;
if
(
!
fun
)
{
return
nullptr
;
}
if
(
jitInfo
)
{
fun
-
>
setJitInfo
(
jitInfo
)
;
}
return
fun
;
}
static
NativeObject
*
CreateBlankProto
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
{
MOZ_ASSERT
(
!
clasp
-
>
isJSFunction
(
)
)
;
RootedObject
blankProto
(
cx
NewTenuredObjectWithGivenProto
(
cx
clasp
proto
)
)
;
if
(
!
blankProto
)
{
return
nullptr
;
}
return
&
blankProto
-
>
as
<
NativeObject
>
(
)
;
}
NativeObject
*
GlobalObject
:
:
createBlankPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
const
JSClass
*
clasp
)
{
RootedObject
objectProto
(
cx
getOrCreateObjectPrototype
(
cx
global
)
)
;
if
(
!
objectProto
)
{
return
nullptr
;
}
return
CreateBlankProto
(
cx
clasp
objectProto
)
;
}
NativeObject
*
GlobalObject
:
:
createBlankPrototypeInheriting
(
JSContext
*
cx
const
JSClass
*
clasp
HandleObject
proto
)
{
return
CreateBlankProto
(
cx
clasp
proto
)
;
}
bool
js
:
:
LinkConstructorAndPrototype
(
JSContext
*
cx
JSObject
*
ctor_
JSObject
*
proto_
unsigned
prototypeAttrs
unsigned
constructorAttrs
)
{
RootedObject
ctor
(
cx
ctor_
)
proto
(
cx
proto_
)
;
RootedValue
protoVal
(
cx
ObjectValue
(
*
proto
)
)
;
RootedValue
ctorVal
(
cx
ObjectValue
(
*
ctor
)
)
;
return
DefineDataProperty
(
cx
ctor
cx
-
>
names
(
)
.
prototype
protoVal
prototypeAttrs
)
&
&
DefineDataProperty
(
cx
proto
cx
-
>
names
(
)
.
constructor
ctorVal
constructorAttrs
)
;
}
bool
js
:
:
DefinePropertiesAndFunctions
(
JSContext
*
cx
HandleObject
obj
const
JSPropertySpec
*
ps
const
JSFunctionSpec
*
fs
)
{
if
(
ps
&
&
!
JS_DefineProperties
(
cx
obj
ps
)
)
{
return
false
;
}
if
(
fs
&
&
!
JS_DefineFunctions
(
cx
obj
fs
)
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
DefineToStringTag
(
JSContext
*
cx
HandleObject
obj
JSAtom
*
tag
)
{
RootedId
toStringTagId
(
cx
SYMBOL_TO_JSID
(
cx
-
>
wellKnownSymbols
(
)
.
toStringTag
)
)
;
RootedValue
tagString
(
cx
StringValue
(
tag
)
)
;
return
DefineDataProperty
(
cx
obj
toStringTagId
tagString
JSPROP_READONLY
)
;
}
NativeObject
*
GlobalObject
:
:
getOrCreateForOfPICObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
cx
-
>
check
(
global
)
;
NativeObject
*
forOfPIC
=
global
-
>
getForOfPICObject
(
)
;
if
(
forOfPIC
)
{
return
forOfPIC
;
}
forOfPIC
=
ForOfPIC
:
:
createForOfPICObject
(
cx
global
)
;
if
(
!
forOfPIC
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
forOfPICChain
.
init
(
forOfPIC
)
;
return
forOfPIC
;
}
JSObject
*
GlobalObject
:
:
getOrCreateRealmKeyObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
cx
-
>
check
(
global
)
;
if
(
PlainObject
*
key
=
global
-
>
data
(
)
.
realmKeyObject
)
{
return
key
;
}
PlainObject
*
key
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
key
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
realmKeyObject
.
init
(
key
)
;
return
key
;
}
RegExpStatics
*
GlobalObject
:
:
getRegExpStatics
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
MOZ_ASSERT
(
cx
)
;
if
(
!
global
-
>
data
(
)
.
regExpStatics
)
{
auto
statics
=
RegExpStatics
:
:
create
(
cx
)
;
if
(
!
statics
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
regExpStatics
=
std
:
:
move
(
statics
)
;
}
return
global
-
>
data
(
)
.
regExpStatics
.
get
(
)
;
}
bool
GlobalObject
:
:
addToVarNames
(
JSContext
*
cx
JS
:
:
Handle
<
JSAtom
*
>
name
)
{
MOZ_ASSERT
(
name
)
;
if
(
!
data
(
)
.
varNames
.
put
(
name
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
NativeObject
*
GlobalObject
:
:
getIntrinsicsHolder
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
NativeObject
*
holder
=
global
-
>
data
(
)
.
intrinsicsHolder
)
{
return
holder
;
}
Rooted
<
NativeObject
*
>
intrinsicsHolder
(
cx
NewTenuredObjectWithGivenProto
<
PlainObject
>
(
cx
nullptr
)
)
;
if
(
!
intrinsicsHolder
)
{
return
nullptr
;
}
if
(
!
DefineDataProperty
(
cx
intrinsicsHolder
cx
-
>
names
(
)
.
undefined
UndefinedHandleValue
JSPROP_PERMANENT
|
JSPROP_READONLY
)
)
{
return
nullptr
;
}
global
-
>
data
(
)
.
intrinsicsHolder
.
init
(
intrinsicsHolder
)
;
return
intrinsicsHolder
;
}
bool
GlobalObject
:
:
getSelfHostedFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
selfHostedName
HandleAtom
name
unsigned
nargs
MutableHandleValue
funVal
)
{
bool
exists
=
false
;
if
(
!
GlobalObject
:
:
maybeGetIntrinsicValue
(
cx
global
selfHostedName
funVal
&
exists
)
)
{
return
false
;
}
if
(
exists
)
{
RootedFunction
fun
(
cx
&
funVal
.
toObject
(
)
.
as
<
JSFunction
>
(
)
)
;
if
(
fun
-
>
explicitName
(
)
=
=
name
)
{
return
true
;
}
if
(
fun
-
>
explicitName
(
)
=
=
selfHostedName
)
{
fun
-
>
initAtom
(
name
)
;
return
true
;
}
cx
-
>
runtime
(
)
-
>
assertSelfHostedFunctionHasCanonicalName
(
selfHostedName
)
;
return
true
;
}
JSRuntime
*
runtime
=
cx
-
>
runtime
(
)
;
frontend
:
:
ScriptIndex
index
=
runtime
-
>
getSelfHostedScriptIndexRange
(
selfHostedName
)
-
>
start
;
JSFunction
*
fun
=
runtime
-
>
selfHostStencil
(
)
.
instantiateSelfHostedLazyFunction
(
cx
runtime
-
>
selfHostStencilInput
(
)
.
atomCache
index
name
)
;
if
(
!
fun
)
{
return
false
;
}
MOZ_ASSERT
(
fun
-
>
nargs
(
)
=
=
nargs
)
;
funVal
.
setObject
(
*
fun
)
;
return
GlobalObject
:
:
addIntrinsicValue
(
cx
global
selfHostedName
funVal
)
;
}
bool
GlobalObject
:
:
getIntrinsicValueSlow
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
MutableHandleValue
value
)
{
if
(
const
JSFunctionSpec
*
spec
=
js
:
:
FindIntrinsicSpec
(
name
)
)
{
RootedNativeObject
holder
(
cx
GlobalObject
:
:
getIntrinsicsHolder
(
cx
global
)
)
;
if
(
!
holder
)
{
return
false
;
}
RootedId
id
(
cx
NameToId
(
name
)
)
;
RootedFunction
fun
(
cx
JS
:
:
NewFunctionFromSpec
(
cx
spec
id
)
)
;
if
(
!
fun
)
{
return
false
;
}
fun
-
>
setIsIntrinsic
(
)
;
value
.
setObject
(
*
fun
)
;
return
GlobalObject
:
:
addIntrinsicValue
(
cx
global
name
value
)
;
}
if
(
!
cx
-
>
runtime
(
)
-
>
getSelfHostedValue
(
cx
name
value
)
)
{
return
false
;
}
bool
exists
=
false
;
if
(
!
GlobalObject
:
:
maybeGetIntrinsicValue
(
cx
global
name
value
&
exists
)
)
{
return
false
;
}
if
(
exists
)
{
return
true
;
}
return
GlobalObject
:
:
addIntrinsicValue
(
cx
global
name
value
)
;
}
bool
GlobalObject
:
:
addIntrinsicValue
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandlePropertyName
name
HandleValue
value
)
{
RootedNativeObject
holder
(
cx
GlobalObject
:
:
getIntrinsicsHolder
(
cx
global
)
)
;
if
(
!
holder
)
{
return
false
;
}
RootedId
id
(
cx
NameToId
(
name
)
)
;
MOZ_ASSERT
(
!
holder
-
>
containsPure
(
id
)
)
;
constexpr
PropertyFlags
propFlags
=
{
PropertyFlag
:
:
Configurable
PropertyFlag
:
:
Writable
}
;
uint32_t
slot
;
if
(
!
NativeObject
:
:
addProperty
(
cx
holder
id
propFlags
&
slot
)
)
{
return
false
;
}
holder
-
>
initSlot
(
slot
value
)
;
return
true
;
}
bool
GlobalObject
:
:
ensureModulePrototypesCreated
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
bool
setUsedAsPrototype
)
{
MOZ_ASSERT_IF
(
!
UseOffThreadParseGlobal
(
)
!
setUsedAsPrototype
)
;
auto
maybeSetUsedAsPrototype
=
[
cx
setUsedAsPrototype
]
(
HandleObject
proto
)
{
if
(
!
setUsedAsPrototype
)
{
return
true
;
}
return
JSObject
:
:
setIsUsedAsPrototype
(
cx
proto
)
;
}
;
RootedObject
proto
(
cx
)
;
proto
=
getOrCreateModulePrototype
(
cx
global
)
;
if
(
!
proto
|
|
!
maybeSetUsedAsPrototype
(
proto
)
)
{
return
false
;
}
proto
=
getOrCreateImportEntryPrototype
(
cx
global
)
;
if
(
!
proto
|
|
!
maybeSetUsedAsPrototype
(
proto
)
)
{
return
false
;
}
proto
=
getOrCreateExportEntryPrototype
(
cx
global
)
;
if
(
!
proto
|
|
!
maybeSetUsedAsPrototype
(
proto
)
)
{
return
false
;
}
proto
=
getOrCreateRequestedModulePrototype
(
cx
global
)
;
if
(
!
proto
|
|
!
maybeSetUsedAsPrototype
(
proto
)
)
{
return
false
;
}
return
true
;
}
JSObject
*
GlobalObject
:
:
createIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getIteratorHelpersEnabled
(
)
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
IteratorProto
initIteratorProto
)
;
}
if
(
!
ensureConstructor
(
cx
global
JSProto_Iterator
)
)
{
return
nullptr
;
}
JSObject
*
proto
=
&
global
-
>
getPrototype
(
JSProto_Iterator
)
;
global
-
>
initBuiltinProto
(
ProtoKind
:
:
IteratorProto
proto
)
;
return
proto
;
}
JSObject
*
GlobalObject
:
:
createAsyncIteratorPrototype
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getIteratorHelpersEnabled
(
)
)
{
return
getOrCreateBuiltinProto
(
cx
global
ProtoKind
:
:
AsyncIteratorProto
initAsyncIteratorProto
)
;
}
if
(
!
ensureConstructor
(
cx
global
JSProto_AsyncIterator
)
)
{
return
nullptr
;
}
JSObject
*
proto
=
&
global
-
>
getPrototype
(
JSProto_AsyncIterator
)
;
global
-
>
initBuiltinProto
(
ProtoKind
:
:
AsyncIteratorProto
proto
)
;
return
proto
;
}
void
GlobalObject
:
:
releaseData
(
JSFreeOp
*
fop
)
{
GlobalObjectData
*
data
=
maybeData
(
)
;
setReservedSlot
(
GLOBAL_DATA_SLOT
PrivateValue
(
nullptr
)
)
;
fop
-
>
delete_
(
this
data
MemoryUse
:
:
GlobalObjectData
)
;
}
GlobalObjectData
:
:
GlobalObjectData
(
Zone
*
zone
)
:
varNames
(
zone
)
{
}
void
GlobalObjectData
:
:
trace
(
JSTracer
*
trc
)
{
if
(
!
JS
:
:
RuntimeHeapIsMinorCollecting
(
)
)
{
varNames
.
trace
(
trc
)
;
}
for
(
auto
&
ctorWithProto
:
builtinConstructors
)
{
TraceNullableEdge
(
trc
&
ctorWithProto
.
constructor
"
global
-
builtin
-
ctor
"
)
;
TraceNullableEdge
(
trc
&
ctorWithProto
.
prototype
"
global
-
builtin
-
ctor
-
proto
"
)
;
}
for
(
auto
&
proto
:
builtinProtos
)
{
TraceNullableEdge
(
trc
&
proto
"
global
-
builtin
-
proto
"
)
;
}
TraceNullableEdge
(
trc
&
emptyGlobalScope
"
global
-
empty
-
scope
"
)
;
TraceNullableEdge
(
trc
&
lexicalEnvironment
"
global
-
lexical
-
env
"
)
;
TraceNullableEdge
(
trc
&
windowProxy
"
global
-
window
-
proxy
"
)
;
TraceNullableEdge
(
trc
&
intrinsicsHolder
"
global
-
intrinsics
-
holder
"
)
;
TraceNullableEdge
(
trc
&
forOfPICChain
"
global
-
for
-
of
-
pic
"
)
;
TraceNullableEdge
(
trc
&
sourceURLsHolder
"
global
-
source
-
urls
"
)
;
TraceNullableEdge
(
trc
&
realmKeyObject
"
global
-
realm
-
key
"
)
;
TraceNullableEdge
(
trc
&
throwTypeError
"
global
-
throw
-
type
-
error
"
)
;
TraceNullableEdge
(
trc
&
eval
"
global
-
eval
"
)
;
TraceNullableEdge
(
trc
&
arrayShapeWithDefaultProto
"
global
-
array
-
shape
"
)
;
if
(
regExpStatics
)
{
regExpStatics
-
>
trace
(
trc
)
;
}
}
void
GlobalObjectData
:
:
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
JS
:
:
ClassInfo
*
info
)
const
{
info
-
>
objectsMallocHeapGlobalData
+
=
mallocSizeOf
(
this
)
;
if
(
regExpStatics
)
{
info
-
>
objectsMallocHeapGlobalData
+
=
regExpStatics
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
info
-
>
objectsMallocHeapGlobalVarNamesSet
+
=
varNames
.
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
