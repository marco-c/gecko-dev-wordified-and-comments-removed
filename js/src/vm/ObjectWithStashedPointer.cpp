#
include
"
js
/
ObjectWithStashedPointer
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
vm
/
JSContext
.
h
"
namespace
JS
:
:
detail
{
static
const
size_t
DATA_SLOT
=
0
;
static
const
size_t
FREE_FUNC_SLOT
=
1
;
static
void
ObjectWithUntypedStashedPointerFinalize
(
JS
:
:
GCContext
*
JSObject
*
obj
)
{
AutoAssertNoGC
nogc
;
void
*
freeFunc
=
GetMaybePtrFromReservedSlot
<
void
>
(
obj
FREE_FUNC_SLOT
)
;
void
*
data
=
GetMaybePtrFromReservedSlot
<
void
>
(
obj
DATA_SLOT
)
;
reinterpret_cast
<
UntypedFreeFunction
>
(
freeFunc
)
(
data
)
;
}
static
const
JSClassOps
classOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
ObjectWithUntypedStashedPointerFinalize
nullptr
nullptr
nullptr
}
;
static
const
JSClass
DataOnlyClass
=
{
"
Object
"
JSCLASS_HAS_RESERVED_SLOTS
(
1
)
}
;
static
const
JSClass
FreeFuncClass
=
{
"
Object
"
JSCLASS_HAS_RESERVED_SLOTS
(
2
)
|
JSCLASS_FOREGROUND_FINALIZE
&
classOps
}
;
JSObject
*
NewObjectWithUntypedStashedPointer
(
JSContext
*
cx
void
*
ptr
UntypedFreeFunction
freeFunc
)
{
if
(
!
freeFunc
)
{
JSObject
*
retval
=
JS_NewObject
(
cx
&
DataOnlyClass
)
;
if
(
!
retval
)
{
return
nullptr
;
}
JS
:
:
SetReservedSlot
(
retval
DATA_SLOT
JS
:
:
PrivateValue
(
ptr
)
)
;
return
retval
;
}
JSObject
*
retval
=
JS_NewObject
(
cx
&
FreeFuncClass
)
;
if
(
!
retval
)
{
return
nullptr
;
}
JS
:
:
SetReservedSlot
(
retval
DATA_SLOT
JS
:
:
PrivateValue
(
ptr
)
)
;
JS
:
:
SetReservedSlot
(
retval
FREE_FUNC_SLOT
JS
:
:
PrivateValue
(
reinterpret_cast
<
void
*
>
(
freeFunc
)
)
)
;
return
retval
;
}
void
*
ObjectGetUntypedStashedPointer
(
JSContext
*
cx
JSObject
*
obj
)
{
MOZ_ASSERT
(
obj
-
>
getClass
(
)
=
=
&
FreeFuncClass
|
|
obj
-
>
getClass
(
)
=
=
&
DataOnlyClass
"
wrong
type
of
object
"
)
;
return
JS
:
:
GetMaybePtrFromReservedSlot
<
void
>
(
obj
DATA_SLOT
)
;
}
}
