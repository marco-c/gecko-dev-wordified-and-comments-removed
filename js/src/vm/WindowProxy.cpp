#
include
"
js
/
friend
/
WindowProxy
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
JS
:
:
Handle
;
void
js
:
:
SetWindowProxyClass
(
JSContext
*
cx
const
JSClass
*
clasp
)
{
MOZ_ASSERT
(
!
cx
-
>
runtime
(
)
-
>
maybeWindowProxyClass
(
)
)
;
cx
-
>
runtime
(
)
-
>
setWindowProxyClass
(
clasp
)
;
}
void
js
:
:
SetWindowProxy
(
JSContext
*
cx
Handle
<
JSObject
*
>
global
Handle
<
JSObject
*
>
windowProxy
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
global
windowProxy
)
;
MOZ_ASSERT
(
IsWindowProxy
(
windowProxy
)
)
;
GlobalObject
&
globalObj
=
global
-
>
as
<
GlobalObject
>
(
)
;
globalObj
.
setWindowProxy
(
windowProxy
)
;
globalObj
.
lexicalEnvironment
(
)
.
setWindowProxyThisObject
(
windowProxy
)
;
}
JSObject
*
js
:
:
ToWindowIfWindowProxy
(
JSObject
*
obj
)
{
if
(
IsWindowProxy
(
obj
)
)
{
return
&
obj
-
>
nonCCWGlobal
(
)
;
}
return
obj
;
}
JSObject
*
js
:
:
detail
:
:
ToWindowProxyIfWindowSlow
(
JSObject
*
obj
)
{
if
(
JSObject
*
windowProxy
=
obj
-
>
as
<
GlobalObject
>
(
)
.
maybeWindowProxy
(
)
)
{
return
windowProxy
;
}
return
obj
;
}
bool
js
:
:
IsWindowProxy
(
JSObject
*
obj
)
{
return
obj
-
>
getClass
(
)
=
=
obj
-
>
runtimeFromAnyThread
(
)
-
>
maybeWindowProxyClass
(
)
;
}
bool
js
:
:
detail
:
:
IsWindowSlow
(
JSObject
*
obj
)
{
return
obj
-
>
as
<
GlobalObject
>
(
)
.
maybeWindowProxy
(
)
;
}
