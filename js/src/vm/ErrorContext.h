#
ifndef
vm_ErrorContext_h
#
define
vm_ErrorContext_h
#
include
"
vm
/
ErrorReporting
.
h
"
namespace
js
{
struct
OffThreadFrontendErrors
{
OffThreadFrontendErrors
(
)
:
overRecursed
(
false
)
outOfMemory
(
false
)
{
}
Vector
<
UniquePtr
<
CompileError
>
0
SystemAllocPolicy
>
errors
;
bool
overRecursed
;
bool
outOfMemory
;
}
;
class
ErrorContext
{
public
:
virtual
~
ErrorContext
(
)
=
default
;
virtual
bool
addPendingError
(
js
:
:
CompileError
*
*
error
)
=
0
;
virtual
void
reportError
(
js
:
:
CompileError
*
err
)
=
0
;
virtual
void
reportWarning
(
js
:
:
CompileError
*
err
)
=
0
;
virtual
bool
hadOutOfMemory
(
)
const
=
0
;
virtual
bool
hadOverRecursed
(
)
const
=
0
;
virtual
const
Vector
<
UniquePtr
<
CompileError
>
0
SystemAllocPolicy
>
&
errors
(
)
const
=
0
;
}
;
class
GeneralErrorContext
:
public
ErrorContext
{
private
:
JSContext
*
cx_
;
public
:
explicit
GeneralErrorContext
(
JSContext
*
cx
)
;
bool
addPendingError
(
js
:
:
CompileError
*
*
error
)
override
;
virtual
void
reportError
(
js
:
:
CompileError
*
err
)
override
;
virtual
void
reportWarning
(
js
:
:
CompileError
*
err
)
override
;
virtual
bool
hadOutOfMemory
(
)
const
override
;
virtual
bool
hadOverRecursed
(
)
const
override
;
virtual
const
Vector
<
UniquePtr
<
CompileError
>
0
SystemAllocPolicy
>
&
errors
(
)
const
override
;
}
;
class
OffThreadErrorContext
:
public
ErrorContext
{
private
:
JSAllocator
*
alloc_
;
js
:
:
OffThreadFrontendErrors
errors_
;
public
:
OffThreadErrorContext
(
)
:
alloc_
(
nullptr
)
{
}
bool
addPendingError
(
js
:
:
CompileError
*
*
error
)
override
;
virtual
void
reportError
(
js
:
:
CompileError
*
err
)
override
;
virtual
void
reportWarning
(
js
:
:
CompileError
*
err
)
override
;
void
ReportOutOfMemory
(
)
;
void
addPendingOutOfMemory
(
)
;
void
setAllocator
(
JSAllocator
*
alloc
)
;
bool
hadOutOfMemory
(
)
const
override
{
return
errors_
.
outOfMemory
;
}
bool
hadOverRecursed
(
)
const
override
{
return
errors_
.
overRecursed
;
}
const
Vector
<
UniquePtr
<
CompileError
>
0
SystemAllocPolicy
>
&
errors
(
)
const
override
{
return
errors_
.
errors
;
}
}
;
}
#
endif
