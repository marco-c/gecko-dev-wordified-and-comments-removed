#
ifndef
vm_BoundFunctionObject_h
#
define
vm_BoundFunctionObject_h
#
include
"
jstypes
.
h
"
#
include
"
gc
/
Policy
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
JSObject
.
h
"
namespace
js
{
class
BoundFunctionObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
size_t
IsConstructorFlag
=
0b1
;
static
constexpr
size_t
NumBoundArgsShift
=
1
;
static
constexpr
size_t
MaxInlineBoundArgs
=
3
;
private
:
enum
{
TargetSlot
FlagsSlot
BoundThisSlot
BoundArg0Slot
BoundArg1Slot
BoundArg2Slot
LengthSlot
NameSlot
SlotCount
}
;
static
constexpr
gc
:
:
AllocKind
allocKind
=
gc
:
:
AllocKind
:
:
OBJECT8_BACKGROUND
;
void
initFlags
(
size_t
numBoundArgs
bool
isConstructor
)
{
int32_t
val
=
(
numBoundArgs
<
<
NumBoundArgsShift
)
|
isConstructor
;
initReservedSlot
(
FlagsSlot
Int32Value
(
val
)
)
;
}
public
:
size_t
numBoundArgs
(
)
const
{
int32_t
v
=
getReservedSlot
(
FlagsSlot
)
.
toInt32
(
)
;
MOZ_ASSERT
(
v
>
=
0
)
;
return
v
>
>
NumBoundArgsShift
;
}
bool
isConstructor
(
)
const
{
int32_t
v
=
getReservedSlot
(
FlagsSlot
)
.
toInt32
(
)
;
return
v
&
IsConstructorFlag
;
}
Value
getTargetVal
(
)
const
{
return
getReservedSlot
(
TargetSlot
)
;
}
JSObject
*
getTarget
(
)
const
{
return
&
getTargetVal
(
)
.
toObject
(
)
;
}
Value
getBoundThis
(
)
const
{
return
getReservedSlot
(
BoundThisSlot
)
;
}
Value
getInlineBoundArg
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
numBoundArgs
(
)
)
;
MOZ_ASSERT
(
numBoundArgs
(
)
<
=
MaxInlineBoundArgs
)
;
return
getReservedSlot
(
BoundArg0Slot
+
i
)
;
}
ArrayObject
*
getBoundArgsArray
(
)
const
{
MOZ_ASSERT
(
numBoundArgs
(
)
>
MaxInlineBoundArgs
)
;
return
&
getReservedSlot
(
BoundArg0Slot
)
.
toObject
(
)
.
as
<
ArrayObject
>
(
)
;
}
Value
getBoundArg
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
numBoundArgs
(
)
)
;
if
(
numBoundArgs
(
)
<
=
MaxInlineBoundArgs
)
{
return
getInlineBoundArg
(
i
)
;
}
return
getBoundArgsArray
(
)
-
>
getDenseElement
(
i
)
;
}
void
initLength
(
double
len
)
{
MOZ_ASSERT
(
getReservedSlot
(
LengthSlot
)
.
isUndefined
(
)
)
;
initReservedSlot
(
LengthSlot
NumberValue
(
len
)
)
;
}
void
initName
(
JSAtom
*
name
)
{
MOZ_ASSERT
(
getReservedSlot
(
NameSlot
)
.
isUndefined
(
)
)
;
initReservedSlot
(
NameSlot
StringValue
(
name
)
)
;
}
Value
getLengthForInitialShape
(
)
const
{
return
getReservedSlot
(
LengthSlot
)
;
}
Value
getNameForInitialShape
(
)
const
{
return
getReservedSlot
(
NameSlot
)
;
}
static
bool
call
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
construct
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
JSString
*
funToString
(
JSContext
*
cx
Handle
<
JSObject
*
>
obj
bool
isToSource
)
;
static
bool
functionBind
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
SharedShape
*
assignInitialShape
(
JSContext
*
cx
Handle
<
BoundFunctionObject
*
>
obj
)
;
static
BoundFunctionObject
*
functionBindImpl
(
JSContext
*
cx
Handle
<
JSObject
*
>
target
Value
*
args
uint32_t
argc
Handle
<
BoundFunctionObject
*
>
maybeBound
)
;
static
BoundFunctionObject
*
createWithTemplate
(
JSContext
*
cx
Handle
<
BoundFunctionObject
*
>
templateObj
)
;
static
BoundFunctionObject
*
functionBindSpecializedBaseline
(
JSContext
*
cx
Handle
<
JSObject
*
>
target
Value
*
args
uint32_t
argc
Handle
<
BoundFunctionObject
*
>
templateObj
)
;
static
BoundFunctionObject
*
createTemplateObject
(
JSContext
*
cx
)
;
bool
initTemplateSlotsForSpecializedBind
(
JSContext
*
cx
uint32_t
numBoundArgs
bool
targetIsConstructor
uint32_t
targetLength
JSAtom
*
targetName
)
;
static
constexpr
size_t
offsetOfTargetSlot
(
)
{
return
getFixedSlotOffset
(
TargetSlot
)
;
}
static
constexpr
size_t
offsetOfFlagsSlot
(
)
{
return
getFixedSlotOffset
(
FlagsSlot
)
;
}
static
constexpr
size_t
offsetOfBoundThisSlot
(
)
{
return
getFixedSlotOffset
(
BoundThisSlot
)
;
}
static
constexpr
size_t
offsetOfFirstInlineBoundArg
(
)
{
return
getFixedSlotOffset
(
BoundArg0Slot
)
;
}
static
constexpr
size_t
offsetOfLengthSlot
(
)
{
return
getFixedSlotOffset
(
LengthSlot
)
;
}
static
constexpr
size_t
offsetOfNameSlot
(
)
{
return
getFixedSlotOffset
(
NameSlot
)
;
}
static
constexpr
size_t
targetSlot
(
)
{
return
TargetSlot
;
}
static
constexpr
size_t
boundThisSlot
(
)
{
return
BoundThisSlot
;
}
static
constexpr
size_t
firstInlineBoundArgSlot
(
)
{
return
BoundArg0Slot
;
}
}
;
}
;
#
endif
