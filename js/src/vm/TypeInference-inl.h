#
ifndef
vm_TypeInference_inl_h
#
define
vm_TypeInference_inl_h
#
include
"
vm
/
TypeInference
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
utility
>
#
include
"
builtin
/
Symbol
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
jit
/
BaselineJIT
.
h
"
#
include
"
jit
/
IonScript
.
h
"
#
include
"
jit
/
JitScript
.
h
"
#
include
"
jit
/
JitZone
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
util
/
DiagnosticAssertions
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BooleanObject
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
NumberObject
.
h
"
#
include
"
vm
/
ObjectGroup
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
SharedArrayObject
.
h
"
#
include
"
vm
/
StringObject
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
jit
/
JitScript
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
ObjectGroup
-
inl
.
h
"
namespace
js
{
class
MOZ_RAII
AutoSuppressAllocationMetadataBuilder
{
JS
:
:
Zone
*
zone
;
bool
saved
;
public
:
explicit
AutoSuppressAllocationMetadataBuilder
(
JSContext
*
cx
)
:
AutoSuppressAllocationMetadataBuilder
(
cx
-
>
realm
(
)
-
>
zone
(
)
)
{
}
explicit
AutoSuppressAllocationMetadataBuilder
(
JS
:
:
Zone
*
zone
)
:
zone
(
zone
)
saved
(
zone
-
>
suppressAllocationMetadataBuilder
)
{
zone
-
>
suppressAllocationMetadataBuilder
=
true
;
}
~
AutoSuppressAllocationMetadataBuilder
(
)
{
zone
-
>
suppressAllocationMetadataBuilder
=
saved
;
}
}
;
struct
MOZ_RAII
AutoEnterAnalysis
{
gc
:
:
AutoSuppressGC
suppressGC
;
js
:
:
AutoSuppressAllocationMetadataBuilder
suppressMetadata
;
JSFreeOp
*
freeOp
;
Zone
*
zone
;
explicit
AutoEnterAnalysis
(
JSContext
*
cx
)
:
suppressGC
(
cx
)
suppressMetadata
(
cx
)
{
init
(
cx
-
>
defaultFreeOp
(
)
cx
-
>
zone
(
)
)
;
}
AutoEnterAnalysis
(
JSFreeOp
*
fop
Zone
*
zone
)
:
suppressGC
(
TlsContext
.
get
(
)
)
suppressMetadata
(
zone
)
{
init
(
fop
zone
)
;
}
~
AutoEnterAnalysis
(
)
{
if
(
this
!
=
zone
-
>
types
.
activeAnalysis
)
{
return
;
}
zone
-
>
types
.
activeAnalysis
=
nullptr
;
}
private
:
void
init
(
JSFreeOp
*
fop
Zone
*
zone
)
{
#
ifdef
JS_CRASH_DIAGNOSTICS
MOZ_RELEASE_ASSERT
(
CurrentThreadCanAccessZone
(
zone
)
)
;
#
endif
this
-
>
freeOp
=
fop
;
this
-
>
zone
=
zone
;
if
(
!
zone
-
>
types
.
activeAnalysis
)
{
zone
-
>
types
.
activeAnalysis
=
this
;
}
}
}
;
}
#
endif
