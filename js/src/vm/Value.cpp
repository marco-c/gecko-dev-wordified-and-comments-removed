#
include
"
js
/
Value
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
inttypes
.
h
>
static
const
JS
:
:
Value
JSVAL_NULL
=
JS
:
:
Value
:
:
fromTagAndPayload
(
JSVAL_TAG_NULL
0
)
;
static
const
JS
:
:
Value
JSVAL_FALSE
=
JS
:
:
Value
:
:
fromTagAndPayload
(
JSVAL_TAG_BOOLEAN
false
)
;
static
const
JS
:
:
Value
JSVAL_TRUE
=
JS
:
:
Value
:
:
fromTagAndPayload
(
JSVAL_TAG_BOOLEAN
true
)
;
static
const
JS
:
:
Value
JSVAL_VOID
=
JS
:
:
Value
:
:
fromTagAndPayload
(
JSVAL_TAG_UNDEFINED
0
)
;
static
const
mozilla
:
:
Maybe
<
JS
:
:
Value
>
JSVAL_NOTHING
;
namespace
JS
{
const
HandleValue
NullHandleValue
=
HandleValue
:
:
fromMarkedLocation
(
&
JSVAL_NULL
)
;
const
HandleValue
UndefinedHandleValue
=
HandleValue
:
:
fromMarkedLocation
(
&
JSVAL_VOID
)
;
const
HandleValue
TrueHandleValue
=
HandleValue
:
:
fromMarkedLocation
(
&
JSVAL_TRUE
)
;
const
HandleValue
FalseHandleValue
=
HandleValue
:
:
fromMarkedLocation
(
&
JSVAL_FALSE
)
;
const
Handle
<
mozilla
:
:
Maybe
<
Value
>
>
NothingHandleValue
=
Handle
<
mozilla
:
:
Maybe
<
Value
>
>
:
:
fromMarkedLocation
(
&
JSVAL_NOTHING
)
;
}
void
js
:
:
ReportBadValueTypeAndCrash
(
const
JS
:
:
Value
&
value
)
{
MOZ_CRASH_UNSAFE_PRINTF
(
"
JS
:
:
Value
has
illegal
type
:
0x
%
"
PRIx64
value
.
asRawBits
(
)
)
;
}
