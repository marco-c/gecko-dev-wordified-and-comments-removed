#
include
"
vm
/
AsyncFunction
.
h
"
#
include
"
jscompartment
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
using
namespace
js
;
using
namespace
js
:
:
gc
;
bool
GlobalObject
:
:
initAsyncFunction
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
{
if
(
global
-
>
getReservedSlot
(
ASYNC_FUNCTION_PROTO
)
.
isObject
(
)
)
return
true
;
RootedObject
asyncFunctionProto
(
cx
NewSingletonObjectWithFunctionPrototype
(
cx
global
)
)
;
if
(
!
asyncFunctionProto
)
return
false
;
if
(
!
DefineToStringTag
(
cx
asyncFunctionProto
cx
-
>
names
(
)
.
AsyncFunction
)
)
return
false
;
RootedValue
function
(
cx
global
-
>
getConstructor
(
JSProto_Function
)
)
;
if
(
!
function
.
toObjectOrNull
(
)
)
return
false
;
RootedObject
proto
(
cx
&
function
.
toObject
(
)
)
;
RootedAtom
name
(
cx
cx
-
>
names
(
)
.
AsyncFunction
)
;
RootedObject
asyncFunction
(
cx
NewFunctionWithProto
(
cx
AsyncFunctionConstructor
1
JSFunction
:
:
NATIVE_CTOR
nullptr
name
proto
)
)
;
if
(
!
asyncFunction
)
return
false
;
if
(
!
LinkConstructorAndPrototype
(
cx
asyncFunction
asyncFunctionProto
)
)
return
false
;
global
-
>
setReservedSlot
(
ASYNC_FUNCTION
ObjectValue
(
*
asyncFunction
)
)
;
global
-
>
setReservedSlot
(
ASYNC_FUNCTION_PROTO
ObjectValue
(
*
asyncFunctionProto
)
)
;
return
true
;
}
JSFunction
*
js
:
:
GetWrappedAsyncFunction
(
JSFunction
*
unwrapped
)
{
MOZ_ASSERT
(
unwrapped
-
>
isAsync
(
)
)
;
return
&
unwrapped
-
>
getExtendedSlot
(
ASYNC_WRAPPED_SLOT
)
.
toObject
(
)
.
as
<
JSFunction
>
(
)
;
}
JSFunction
*
js
:
:
GetUnwrappedAsyncFunction
(
JSFunction
*
wrapper
)
{
JSFunction
*
unwrapped
=
&
wrapper
-
>
getExtendedSlot
(
ASYNC_UNWRAPPED_SLOT
)
.
toObject
(
)
.
as
<
JSFunction
>
(
)
;
MOZ_ASSERT
(
unwrapped
-
>
isAsync
(
)
)
;
return
unwrapped
;
}
bool
js
:
:
IsWrappedAsyncFunction
(
JSContext
*
cx
JSFunction
*
wrapper
)
{
return
IsSelfHostedFunctionWithName
(
wrapper
cx
-
>
names
(
)
.
AsyncWrapped
)
;
}
bool
js
:
:
CreateAsyncFunction
(
JSContext
*
cx
HandleFunction
wrapper
HandleFunction
unwrapped
MutableHandleFunction
result
)
{
RootedObject
proto
(
cx
GlobalObject
:
:
getOrCreateAsyncFunctionPrototype
(
cx
cx
-
>
global
(
)
)
)
;
RootedObject
scope
(
cx
wrapper
-
>
environment
(
)
)
;
RootedAtom
atom
(
cx
unwrapped
-
>
name
(
)
)
;
RootedFunction
wrapped
(
cx
NewFunctionWithProto
(
cx
nullptr
0
JSFunction
:
:
INTERPRETED_LAMBDA
scope
atom
proto
AllocKind
:
:
FUNCTION_EXTENDED
TenuredObject
)
)
;
if
(
!
wrapped
)
return
false
;
wrapped
-
>
initScript
(
wrapper
-
>
nonLazyScript
(
)
)
;
unwrapped
-
>
setExtendedSlot
(
ASYNC_WRAPPED_SLOT
ObjectValue
(
*
wrapped
)
)
;
wrapped
-
>
setExtendedSlot
(
ASYNC_UNWRAPPED_SLOT
ObjectValue
(
*
unwrapped
)
)
;
wrapped
-
>
setIsSelfHostedBuiltin
(
)
;
wrapped
-
>
setExtendedSlot
(
LAZY_FUNCTION_NAME_SLOT
StringValue
(
cx
-
>
names
(
)
.
AsyncWrapped
)
)
;
uint16_t
length
;
if
(
!
unwrapped
-
>
getLength
(
cx
&
length
)
)
return
false
;
RootedValue
lengthValue
(
cx
NumberValue
(
length
)
)
;
if
(
!
DefineProperty
(
cx
wrapped
cx
-
>
names
(
)
.
length
lengthValue
nullptr
nullptr
JSPROP_READONLY
)
)
{
return
false
;
}
result
.
set
(
wrapped
)
;
return
true
;
}
