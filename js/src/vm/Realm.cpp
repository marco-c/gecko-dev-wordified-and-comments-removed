#
include
"
js
/
shadow
/
Realm
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
WrappedFunctionObject
.
h
"
#
include
"
debugger
/
DebugAPI
.
h
"
#
include
"
debugger
/
Debugger
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
jit
/
JitRealm
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
js
/
CallAndConstruct
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVariant
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
Iteration
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
gc
/
Marking
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
Realm
:
:
DebuggerVectorEntry
:
:
DebuggerVectorEntry
(
js
:
:
Debugger
*
dbg_
JSObject
*
link
)
:
dbg
(
dbg_
)
debuggerLink
(
link
)
{
}
ObjectRealm
:
:
ObjectRealm
(
JS
:
:
Zone
*
zone
)
:
innerViews
(
zone
zone
)
iteratorCache
(
zone
)
{
}
ObjectRealm
:
:
~
ObjectRealm
(
)
{
MOZ_ASSERT
(
enumerators
=
=
iteratorSentinel_
.
get
(
)
)
;
}
Realm
:
:
Realm
(
Compartment
*
comp
const
JS
:
:
RealmOptions
&
options
)
:
JS
:
:
shadow
:
:
Realm
(
comp
)
zone_
(
comp
-
>
zone
(
)
)
runtime_
(
comp
-
>
runtimeFromMainThread
(
)
)
creationOptions_
(
options
.
creationOptions
(
)
)
behaviors_
(
options
.
behaviors
(
)
)
objects_
(
zone_
)
randomKeyGenerator_
(
runtime_
-
>
forkRandomKeyGenerator
(
)
)
debuggers_
(
zone_
)
allocatedDuringIncrementalGC_
(
zone_
-
>
isGCMarkingOrSweeping
(
)
|
|
zone_
-
>
isGCFinished
(
)
)
wasm
(
runtime_
)
{
runtime_
-
>
numRealms
+
+
;
}
Realm
:
:
~
Realm
(
)
{
MOZ_ASSERT
(
!
hasBeenEnteredIgnoringJit
(
)
)
;
MOZ_ASSERT
(
!
isDebuggee
(
)
)
;
if
(
lcovRealm_
)
{
runtime_
-
>
lcovOutput
(
)
.
writeLCovResult
(
*
lcovRealm_
)
;
}
MOZ_ASSERT
(
runtime_
-
>
numRealms
>
0
)
;
runtime_
-
>
numRealms
-
-
;
}
bool
ObjectRealm
:
:
init
(
JSContext
*
cx
)
{
NativeIteratorSentinel
sentinel
(
NativeIterator
:
:
allocateSentinel
(
cx
)
)
;
if
(
!
sentinel
)
{
return
false
;
}
iteratorSentinel_
=
std
:
:
move
(
sentinel
)
;
enumerators
=
iteratorSentinel_
.
get
(
)
;
return
true
;
}
bool
Realm
:
:
init
(
JSContext
*
cx
JSPrincipals
*
principals
)
{
js
:
:
ResetTimeZoneInternal
(
ResetTimeZoneMode
:
:
DontResetIfOffsetUnchanged
)
;
if
(
!
objects_
.
init
(
cx
)
)
{
return
false
;
}
if
(
principals
)
{
isSystem_
=
(
principals
=
=
cx
-
>
runtime
(
)
-
>
trustedPrincipals
(
)
)
;
JS_HoldPrincipals
(
principals
)
;
principals_
=
principals
;
}
return
true
;
}
bool
JSRuntime
:
:
createJitRuntime
(
JSContext
*
cx
)
{
using
namespace
js
:
:
jit
;
MOZ_ASSERT
(
!
jitRuntime_
)
;
if
(
!
CanLikelyAllocateMoreExecutableMemory
(
)
)
{
if
(
OnLargeAllocationFailure
)
{
OnLargeAllocationFailure
(
)
;
}
}
jit
:
:
JitRuntime
*
jrt
=
cx
-
>
new_
<
jit
:
:
JitRuntime
>
(
)
;
if
(
!
jrt
)
{
return
false
;
}
jitRuntime_
=
jrt
;
if
(
!
jitRuntime_
-
>
initialize
(
cx
)
)
{
js_delete
(
jitRuntime_
.
ref
(
)
)
;
jitRuntime_
=
nullptr
;
return
false
;
}
return
true
;
}
bool
Realm
:
:
ensureJitRealmExists
(
JSContext
*
cx
)
{
using
namespace
js
:
:
jit
;
if
(
jitRealm_
)
{
return
true
;
}
if
(
!
zone
(
)
-
>
getJitZone
(
cx
)
)
{
return
false
;
}
UniquePtr
<
JitRealm
>
jitRealm
=
cx
-
>
make_unique
<
JitRealm
>
(
)
;
if
(
!
jitRealm
)
{
return
false
;
}
jitRealm
-
>
initialize
(
zone
(
)
-
>
allocNurseryStrings
)
;
jitRealm_
=
std
:
:
move
(
jitRealm
)
;
return
true
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
js
:
:
DtoaCache
:
:
checkCacheAfterMovingGC
(
)
{
MOZ_ASSERT
(
!
s
|
|
!
IsForwarded
(
s
)
)
;
}
#
endif
NonSyntacticLexicalEnvironmentObject
*
ObjectRealm
:
:
getOrCreateNonSyntacticLexicalEnvironment
(
JSContext
*
cx
HandleObject
enclosing
HandleObject
key
HandleObject
thisv
)
{
MOZ_ASSERT
(
&
ObjectRealm
:
:
get
(
enclosing
)
=
=
this
)
;
if
(
!
nonSyntacticLexicalEnvironments_
)
{
auto
map
=
cx
-
>
make_unique
<
ObjectWeakMap
>
(
cx
)
;
if
(
!
map
)
{
return
nullptr
;
}
nonSyntacticLexicalEnvironments_
=
std
:
:
move
(
map
)
;
}
RootedObject
lexicalEnv
(
cx
nonSyntacticLexicalEnvironments_
-
>
lookup
(
key
)
)
;
if
(
!
lexicalEnv
)
{
MOZ_ASSERT
(
key
-
>
is
<
NonSyntacticVariablesObject
>
(
)
|
|
!
key
-
>
is
<
EnvironmentObject
>
(
)
)
;
lexicalEnv
=
NonSyntacticLexicalEnvironmentObject
:
:
create
(
cx
enclosing
thisv
)
;
if
(
!
lexicalEnv
)
{
return
nullptr
;
}
if
(
!
nonSyntacticLexicalEnvironments_
-
>
add
(
cx
key
lexicalEnv
)
)
{
return
nullptr
;
}
}
return
&
lexicalEnv
-
>
as
<
NonSyntacticLexicalEnvironmentObject
>
(
)
;
}
NonSyntacticLexicalEnvironmentObject
*
ObjectRealm
:
:
getOrCreateNonSyntacticLexicalEnvironment
(
JSContext
*
cx
HandleObject
enclosing
)
{
RootedObject
key
(
cx
enclosing
)
;
if
(
enclosing
-
>
is
<
WithEnvironmentObject
>
(
)
)
{
MOZ_ASSERT
(
!
enclosing
-
>
as
<
WithEnvironmentObject
>
(
)
.
isSyntactic
(
)
)
;
key
=
&
enclosing
-
>
as
<
WithEnvironmentObject
>
(
)
.
object
(
)
;
}
return
getOrCreateNonSyntacticLexicalEnvironment
(
cx
enclosing
key
key
)
;
}
NonSyntacticLexicalEnvironmentObject
*
ObjectRealm
:
:
getNonSyntacticLexicalEnvironment
(
JSObject
*
key
)
const
{
MOZ_ASSERT
(
&
ObjectRealm
:
:
get
(
key
)
=
=
this
)
;
if
(
!
nonSyntacticLexicalEnvironments_
)
{
return
nullptr
;
}
if
(
key
-
>
is
<
WithEnvironmentObject
>
(
)
)
{
MOZ_ASSERT
(
!
key
-
>
as
<
WithEnvironmentObject
>
(
)
.
isSyntactic
(
)
)
;
key
=
&
key
-
>
as
<
WithEnvironmentObject
>
(
)
.
object
(
)
;
}
JSObject
*
lexicalEnv
=
nonSyntacticLexicalEnvironments_
-
>
lookup
(
key
)
;
if
(
!
lexicalEnv
)
{
return
nullptr
;
}
return
&
lexicalEnv
-
>
as
<
NonSyntacticLexicalEnvironmentObject
>
(
)
;
}
void
Realm
:
:
traceGlobalData
(
JSTracer
*
trc
)
{
savedStacks_
.
trace
(
trc
)
;
DebugAPI
:
:
traceFromRealm
(
trc
this
)
;
}
void
ObjectRealm
:
:
trace
(
JSTracer
*
trc
)
{
if
(
objectMetadataTable
)
{
objectMetadataTable
-
>
trace
(
trc
)
;
}
if
(
nonSyntacticLexicalEnvironments_
)
{
nonSyntacticLexicalEnvironments_
-
>
trace
(
trc
)
;
}
}
void
Realm
:
:
traceRoots
(
JSTracer
*
trc
js
:
:
gc
:
:
GCRuntime
:
:
TraceOrMarkRuntime
traceOrMark
)
{
if
(
objectMetadataState_
.
is
<
PendingMetadata
>
(
)
)
{
GCPolicy
<
NewObjectMetadataState
>
:
:
trace
(
trc
&
objectMetadataState_
"
on
-
stack
object
pending
metadata
"
)
;
}
if
(
!
JS
:
:
RuntimeHeapIsMinorCollecting
(
)
)
{
if
(
shouldTraceGlobal
(
)
&
&
global_
)
{
TraceRoot
(
trc
global_
.
unbarrieredAddress
(
)
"
on
-
stack
realm
global
"
)
;
}
}
if
(
traceOrMark
=
=
js
:
:
gc
:
:
GCRuntime
:
:
MarkRuntime
&
&
!
zone
(
)
-
>
isCollectingFromAnyThread
(
)
)
{
return
;
}
if
(
debugEnvs_
)
{
debugEnvs_
-
>
trace
(
trc
)
;
}
objects_
.
trace
(
trc
)
;
}
void
ObjectRealm
:
:
finishRoots
(
)
{
if
(
objectMetadataTable
)
{
objectMetadataTable
-
>
clear
(
)
;
}
if
(
nonSyntacticLexicalEnvironments_
)
{
nonSyntacticLexicalEnvironments_
-
>
clear
(
)
;
}
}
void
Realm
:
:
finishRoots
(
)
{
if
(
debugEnvs_
)
{
debugEnvs_
-
>
finish
(
)
;
}
objects_
.
finishRoots
(
)
;
}
void
ObjectRealm
:
:
sweepAfterMinorGC
(
JSTracer
*
trc
)
{
InnerViewTable
&
table
=
innerViews
.
get
(
)
;
if
(
table
.
needsSweepAfterMinorGC
(
)
)
{
table
.
sweepAfterMinorGC
(
trc
)
;
}
}
void
Realm
:
:
sweepAfterMinorGC
(
JSTracer
*
trc
)
{
globalWriteBarriered
=
0
;
dtoaCache
.
purge
(
)
;
objects_
.
sweepAfterMinorGC
(
trc
)
;
}
void
Realm
:
:
traceWeakSavedStacks
(
JSTracer
*
trc
)
{
savedStacks_
.
traceWeak
(
trc
)
;
}
void
Realm
:
:
traceWeakGlobalEdge
(
JSTracer
*
trc
)
{
auto
result
=
TraceWeakEdge
(
trc
&
global_
"
Realm
:
:
global_
"
)
;
if
(
result
.
isDead
(
)
)
{
result
.
initialTarget
(
)
-
>
releaseData
(
runtime_
-
>
gcContext
(
)
)
;
}
}
void
Realm
:
:
traceWeakEdgesInJitRealm
(
JSTracer
*
trc
)
{
if
(
jitRealm_
)
{
jitRealm_
-
>
traceWeak
(
trc
this
)
;
}
}
void
Realm
:
:
traceWeakRegExps
(
JSTracer
*
trc
)
{
regExps
.
traceWeak
(
trc
)
;
}
void
Realm
:
:
traceWeakDebugEnvironmentEdges
(
JSTracer
*
trc
)
{
if
(
debugEnvs_
)
{
debugEnvs_
-
>
traceWeak
(
trc
)
;
}
}
void
ObjectRealm
:
:
traceWeakNativeIterators
(
JSTracer
*
trc
)
{
NativeIterator
*
ni
=
enumerators
-
>
next
(
)
;
while
(
ni
!
=
enumerators
)
{
JSObject
*
iterObj
=
ni
-
>
iterObj
(
)
;
NativeIterator
*
next
=
ni
-
>
next
(
)
;
if
(
!
TraceManuallyBarrieredWeakEdge
(
trc
&
iterObj
"
ObjectRealm
:
:
enumerators
"
)
)
{
ni
-
>
unlink
(
)
;
}
MOZ_ASSERT
(
&
ObjectRealm
:
:
get
(
ni
-
>
objectBeingIterated
(
)
)
=
=
this
)
;
ni
=
next
;
}
}
void
Realm
:
:
traceWeakObjectRealm
(
JSTracer
*
trc
)
{
objects_
.
traceWeakNativeIterators
(
trc
)
;
}
void
Realm
:
:
fixupAfterMovingGC
(
JSTracer
*
trc
)
{
purge
(
)
;
traceWeakGlobalEdge
(
trc
)
;
}
void
Realm
:
:
purge
(
)
{
dtoaCache
.
purge
(
)
;
newProxyCache
.
purge
(
)
;
newPlainObjectWithPropsCache
.
purge
(
)
;
objects_
.
iteratorCache
.
clearAndCompact
(
)
;
arraySpeciesLookup
.
purge
(
)
;
promiseLookup
.
purge
(
)
;
}
bool
Realm
:
:
isRecordingAllocations
(
)
{
return
!
!
allocationMetadataBuilder_
;
}
void
Realm
:
:
setAllocationMetadataBuilder
(
const
js
:
:
AllocationMetadataBuilder
*
builder
)
{
ReleaseAllJITCode
(
runtime_
-
>
gcContext
(
)
)
;
allocationMetadataBuilder_
=
builder
;
}
void
Realm
:
:
forgetAllocationMetadataBuilder
(
)
{
CancelOffThreadIonCompile
(
this
)
;
allocationMetadataBuilder_
=
nullptr
;
}
void
Realm
:
:
setNewObjectMetadata
(
JSContext
*
cx
HandleObject
obj
)
{
MOZ_ASSERT
(
obj
-
>
maybeCCWRealm
(
)
=
=
this
)
;
cx
-
>
check
(
compartment
(
)
obj
)
;
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
JSObject
*
metadata
=
allocationMetadataBuilder_
-
>
build
(
cx
obj
oomUnsafe
)
)
{
MOZ_ASSERT
(
metadata
-
>
maybeCCWRealm
(
)
=
=
obj
-
>
maybeCCWRealm
(
)
)
;
cx
-
>
check
(
metadata
)
;
if
(
!
objects_
.
objectMetadataTable
)
{
auto
table
=
cx
-
>
make_unique
<
ObjectWeakMap
>
(
cx
)
;
if
(
!
table
)
{
oomUnsafe
.
crash
(
"
setNewObjectMetadata
"
)
;
}
objects_
.
objectMetadataTable
=
std
:
:
move
(
table
)
;
}
if
(
!
objects_
.
objectMetadataTable
-
>
add
(
cx
obj
metadata
)
)
{
oomUnsafe
.
crash
(
"
setNewObjectMetadata
"
)
;
}
}
}
void
Realm
:
:
updateDebuggerObservesFlag
(
unsigned
flag
)
{
MOZ_ASSERT
(
isDebuggee
(
)
)
;
MOZ_ASSERT
(
flag
=
=
DebuggerObservesAllExecution
|
|
flag
=
=
DebuggerObservesCoverage
|
|
flag
=
=
DebuggerObservesAsmJS
|
|
flag
=
=
DebuggerObservesWasm
)
;
GlobalObject
*
global
=
zone
(
)
-
>
runtimeFromMainThread
(
)
-
>
gc
.
isForegroundSweeping
(
)
?
unsafeUnbarrieredMaybeGlobal
(
)
:
maybeGlobal
(
)
;
bool
observes
=
false
;
if
(
flag
=
=
DebuggerObservesAllExecution
)
{
observes
=
DebugAPI
:
:
debuggerObservesAllExecution
(
global
)
;
}
else
if
(
flag
=
=
DebuggerObservesCoverage
)
{
observes
=
DebugAPI
:
:
debuggerObservesCoverage
(
global
)
;
}
else
if
(
flag
=
=
DebuggerObservesAsmJS
)
{
observes
=
DebugAPI
:
:
debuggerObservesAsmJS
(
global
)
;
}
else
if
(
flag
=
=
DebuggerObservesWasm
)
{
observes
=
DebugAPI
:
:
debuggerObservesWasm
(
global
)
;
}
if
(
observes
)
{
debugModeBits_
|
=
flag
;
}
else
{
debugModeBits_
&
=
~
flag
;
}
}
void
Realm
:
:
setIsDebuggee
(
)
{
if
(
!
isDebuggee
(
)
)
{
debugModeBits_
|
=
IsDebuggee
;
runtimeFromMainThread
(
)
-
>
incrementNumDebuggeeRealms
(
)
;
}
}
void
Realm
:
:
unsetIsDebuggee
(
)
{
if
(
isDebuggee
(
)
)
{
if
(
debuggerObservesCoverage
(
)
)
{
runtime_
-
>
decrementNumDebuggeeRealmsObservingCoverage
(
)
;
}
debugModeBits_
=
0
;
DebugEnvironments
:
:
onRealmUnsetIsDebuggee
(
this
)
;
runtimeFromMainThread
(
)
-
>
decrementNumDebuggeeRealms
(
)
;
}
}
void
Realm
:
:
updateDebuggerObservesCoverage
(
)
{
bool
previousState
=
debuggerObservesCoverage
(
)
;
updateDebuggerObservesFlag
(
DebuggerObservesCoverage
)
;
if
(
previousState
=
=
debuggerObservesCoverage
(
)
)
{
return
;
}
if
(
debuggerObservesCoverage
(
)
)
{
JSContext
*
cx
=
TlsContext
.
get
(
)
;
for
(
ActivationIterator
iter
(
cx
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
if
(
iter
-
>
isInterpreter
(
)
)
{
iter
-
>
asInterpreter
(
)
-
>
enableInterruptsUnconditionally
(
)
;
}
}
runtime_
-
>
incrementNumDebuggeeRealmsObservingCoverage
(
)
;
return
;
}
runtime_
-
>
decrementNumDebuggeeRealmsObservingCoverage
(
)
;
if
(
collectCoverageForDebug
(
)
)
{
return
;
}
clearScriptCounts
(
)
;
clearScriptLCov
(
)
;
}
coverage
:
:
LCovRealm
*
Realm
:
:
lcovRealm
(
)
{
if
(
!
lcovRealm_
)
{
lcovRealm_
=
js
:
:
MakeUnique
<
coverage
:
:
LCovRealm
>
(
this
)
;
}
return
lcovRealm_
.
get
(
)
;
}
bool
Realm
:
:
collectCoverageForDebug
(
)
const
{
return
debuggerObservesCoverage
(
)
|
|
coverage
:
:
IsLCovEnabled
(
)
;
}
void
Realm
:
:
clearScriptCounts
(
)
{
zone
(
)
-
>
clearScriptCounts
(
this
)
;
}
void
Realm
:
:
clearScriptLCov
(
)
{
zone
(
)
-
>
clearScriptLCov
(
this
)
;
}
void
ObjectRealm
:
:
addSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
innerViewsArg
size_t
*
objectMetadataTablesArg
size_t
*
nonSyntacticLexicalEnvironmentsArg
)
{
*
innerViewsArg
+
=
innerViews
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
if
(
objectMetadataTable
)
{
*
objectMetadataTablesArg
+
=
objectMetadataTable
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
if
(
auto
&
map
=
nonSyntacticLexicalEnvironments_
)
{
*
nonSyntacticLexicalEnvironmentsArg
+
=
map
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
}
void
Realm
:
:
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
realmObject
size_t
*
realmTables
size_t
*
innerViewsArg
size_t
*
objectMetadataTablesArg
size_t
*
savedStacksSet
size_t
*
nonSyntacticLexicalEnvironmentsArg
size_t
*
jitRealm
)
{
*
realmObject
+
=
mallocSizeOf
(
this
)
;
wasm
.
addSizeOfExcludingThis
(
mallocSizeOf
realmTables
)
;
objects_
.
addSizeOfExcludingThis
(
mallocSizeOf
innerViewsArg
objectMetadataTablesArg
nonSyntacticLexicalEnvironmentsArg
)
;
*
savedStacksSet
+
=
savedStacks_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
if
(
jitRealm_
)
{
*
jitRealm
+
=
jitRealm_
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
}
bool
Realm
:
:
shouldCaptureStackForThrow
(
)
{
if
(
isDebuggee
(
)
)
{
return
true
;
}
if
(
principals
(
)
&
&
principals
(
)
=
=
runtimeFromMainThread
(
)
-
>
trustedPrincipals
(
)
)
{
return
true
;
}
static
constexpr
uint16_t
MaxStacksCapturedForThrow
=
50
;
if
(
numStacksCapturedForThrow_
>
MaxStacksCapturedForThrow
)
{
return
false
;
}
numStacksCapturedForThrow_
+
+
;
return
true
;
}
mozilla
:
:
HashCodeScrambler
Realm
:
:
randomHashCodeScrambler
(
)
{
return
mozilla
:
:
HashCodeScrambler
(
randomKeyGenerator_
.
next
(
)
randomKeyGenerator_
.
next
(
)
)
;
}
AutoSetNewObjectMetadata
:
:
AutoSetNewObjectMetadata
(
JSContext
*
cx
)
:
cx_
(
cx
)
prevState_
(
cx
cx
-
>
realm
(
)
-
>
objectMetadataState_
)
{
MOZ_ASSERT
(
cx_
-
>
isMainThreadContext
(
)
)
;
cx_
-
>
realm
(
)
-
>
objectMetadataState_
=
NewObjectMetadataState
(
DelayMetadata
(
)
)
;
}
AutoSetNewObjectMetadata
:
:
~
AutoSetNewObjectMetadata
(
)
{
if
(
!
cx_
-
>
isExceptionPending
(
)
&
&
cx_
-
>
realm
(
)
-
>
hasObjectPendingMetadata
(
)
)
{
gc
:
:
AutoSuppressGC
autoSuppressGC
(
cx_
)
;
JSObject
*
obj
=
cx_
-
>
realm
(
)
-
>
objectMetadataState_
.
as
<
PendingMetadata
>
(
)
;
cx_
-
>
realm
(
)
-
>
objectMetadataState_
=
prevState_
;
obj
=
SetNewObjectMetadata
(
cx_
obj
)
;
}
else
{
cx_
-
>
realm
(
)
-
>
objectMetadataState_
=
prevState_
;
}
}
JS_PUBLIC_API
void
gc
:
:
TraceRealm
(
JSTracer
*
trc
JS
:
:
Realm
*
realm
const
char
*
name
)
{
realm
-
>
traceGlobalData
(
trc
)
;
}
JS_PUBLIC_API
JS
:
:
Realm
*
JS
:
:
GetCurrentRealmOrNull
(
JSContext
*
cx
)
{
return
cx
-
>
realm
(
)
;
}
JS_PUBLIC_API
JS
:
:
Realm
*
JS
:
:
GetObjectRealmOrNull
(
JSObject
*
obj
)
{
return
IsCrossCompartmentWrapper
(
obj
)
?
nullptr
:
obj
-
>
nonCCWRealm
(
)
;
}
JS_PUBLIC_API
void
*
JS
:
:
GetRealmPrivate
(
JS
:
:
Realm
*
realm
)
{
return
realm
-
>
realmPrivate
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
SetRealmPrivate
(
JS
:
:
Realm
*
realm
void
*
data
)
{
realm
-
>
setRealmPrivate
(
data
)
;
}
JS_PUBLIC_API
void
JS
:
:
SetDestroyRealmCallback
(
JSContext
*
cx
JS
:
:
DestroyRealmCallback
callback
)
{
cx
-
>
runtime
(
)
-
>
destroyRealmCallback
=
callback
;
}
JS_PUBLIC_API
void
JS
:
:
SetRealmNameCallback
(
JSContext
*
cx
JS
:
:
RealmNameCallback
callback
)
{
cx
-
>
runtime
(
)
-
>
realmNameCallback
=
callback
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmGlobalOrNull
(
JS
:
:
Realm
*
realm
)
{
return
realm
-
>
maybeGlobal
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
InitRealmStandardClasses
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
initStandardClasses
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
bool
JS
:
:
MaybeFreezeCtorAndPrototype
(
JSContext
*
cx
HandleObject
ctor
HandleObject
maybeProto
)
{
if
(
MOZ_LIKELY
(
!
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
freezeBuiltins
(
)
)
)
{
return
true
;
}
if
(
!
SetIntegrityLevel
(
cx
ctor
IntegrityLevel
:
:
Frozen
)
)
{
return
false
;
}
if
(
maybeProto
)
{
if
(
!
SetIntegrityLevel
(
cx
maybeProto
IntegrityLevel
:
:
Sealed
)
)
{
return
false
;
}
}
return
true
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmObjectPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateObjectPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JS
:
:
Handle
<
JSObject
*
>
JS
:
:
GetRealmObjectPrototypeHandle
(
JSContext
*
cx
)
{
return
GlobalObject
:
:
getOrCreateObjectPrototypeHandle
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmFunctionPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateFunctionPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmArrayPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateArrayPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmErrorPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateCustomErrorPrototype
(
cx
cx
-
>
global
(
)
JSEXN_ERR
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmIteratorPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateIteratorPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmAsyncIteratorPrototype
(
JSContext
*
cx
)
{
CHECK_THREAD
(
cx
)
;
return
GlobalObject
:
:
getOrCreateAsyncIteratorPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
GetRealmKeyObject
(
JSContext
*
cx
)
{
return
GlobalObject
:
:
getOrCreateRealmKeyObject
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
Realm
*
JS
:
:
GetFunctionRealm
(
JSContext
*
cx
HandleObject
objArg
)
{
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
objArg
)
;
RootedObject
obj
(
cx
objArg
)
;
while
(
true
)
{
obj
=
CheckedUnwrapStatic
(
obj
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
MOZ_ASSERT
(
IsCallable
(
obj
)
)
;
if
(
obj
-
>
is
<
JSFunction
>
(
)
)
{
JSFunction
*
fun
=
&
obj
-
>
as
<
JSFunction
>
(
)
;
if
(
!
fun
-
>
isBoundFunction
(
)
)
{
return
fun
-
>
realm
(
)
;
}
obj
=
fun
-
>
getBoundFunctionTarget
(
)
;
continue
;
}
if
(
obj
-
>
is
<
WrappedFunctionObject
>
(
)
)
{
return
obj
-
>
nonCCWRealm
(
)
;
}
if
(
IsScriptedProxy
(
obj
)
)
{
JSObject
*
proxyTarget
=
GetProxyTargetObject
(
obj
)
;
if
(
!
proxyTarget
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_PROXY_REVOKED
)
;
return
nullptr
;
}
obj
=
proxyTarget
;
continue
;
}
return
cx
-
>
realm
(
)
;
}
}
