#
include
"
js
/
Realm
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSCompartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSCompartment
-
inl
.
h
"
using
namespace
js
;
JS_PUBLIC_API
(
void
)
gc
:
:
TraceRealm
(
JSTracer
*
trc
JS
:
:
Realm
*
realm
const
char
*
name
)
{
realm
-
>
traceGlobal
(
trc
)
;
}
JS_PUBLIC_API
(
bool
)
gc
:
:
RealmNeedsSweep
(
JS
:
:
Realm
*
realm
)
{
return
realm
-
>
globalIsAboutToBeFinalized
(
)
;
}
JS_PUBLIC_API
(
JS
:
:
Realm
*
)
JS
:
:
GetCurrentRealmOrNull
(
JSContext
*
cx
)
{
return
cx
-
>
realm
(
)
;
}
JS_PUBLIC_API
(
JS
:
:
Realm
*
)
JS
:
:
GetObjectRealmOrNull
(
JSObject
*
obj
)
{
return
IsCrossCompartmentWrapper
(
obj
)
?
nullptr
:
obj
-
>
realm
(
)
;
}
JS_PUBLIC_API
(
void
*
)
JS
:
:
GetRealmPrivate
(
JS
:
:
Realm
*
realm
)
{
return
GetCompartmentForRealm
(
realm
)
-
>
realmData
;
}
JS_PUBLIC_API
(
void
)
JS
:
:
SetRealmPrivate
(
JS
:
:
Realm
*
realm
void
*
data
)
{
GetCompartmentForRealm
(
realm
)
-
>
realmData
=
data
;
}
JS_PUBLIC_API
(
void
)
JS
:
:
SetDestroyRealmCallback
(
JSContext
*
cx
JS
:
:
DestroyRealmCallback
callback
)
{
cx
-
>
runtime
(
)
-
>
destroyRealmCallback
=
callback
;
}
JS_PUBLIC_API
(
void
)
JS
:
:
SetRealmNameCallback
(
JSContext
*
cx
JS
:
:
RealmNameCallback
callback
)
{
cx
-
>
runtime
(
)
-
>
realmNameCallback
=
callback
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmGlobalOrNull
(
Handle
<
JS
:
:
Realm
*
>
realm
)
{
return
realm
-
>
maybeGlobal
(
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmObjectPrototype
(
JSContext
*
cx
)
{
CHECK_REQUEST
(
cx
)
;
return
GlobalObject
:
:
getOrCreateObjectPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmFunctionPrototype
(
JSContext
*
cx
)
{
CHECK_REQUEST
(
cx
)
;
return
GlobalObject
:
:
getOrCreateFunctionPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmArrayPrototype
(
JSContext
*
cx
)
{
CHECK_REQUEST
(
cx
)
;
return
GlobalObject
:
:
getOrCreateArrayPrototype
(
cx
cx
-
>
global
(
)
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmErrorPrototype
(
JSContext
*
cx
)
{
CHECK_REQUEST
(
cx
)
;
return
GlobalObject
:
:
getOrCreateCustomErrorPrototype
(
cx
cx
-
>
global
(
)
JSEXN_ERR
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
GetRealmIteratorPrototype
(
JSContext
*
cx
)
{
CHECK_REQUEST
(
cx
)
;
return
GlobalObject
:
:
getOrCreateIteratorPrototype
(
cx
cx
-
>
global
(
)
)
;
}
