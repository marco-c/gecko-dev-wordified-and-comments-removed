#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
ArrayBufferMaybeShared
.
h
"
#
include
"
vm
/
ArrayBufferObject
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
SharedArrayObject
.
h
"
#
include
"
vm
/
SharedMem
.
h
"
using
namespace
js
;
JS_PUBLIC_API
bool
JS
:
:
IsArrayBufferObjectMaybeShared
(
JSObject
*
obj
)
{
return
obj
-
>
canUnwrapAs
<
ArrayBufferObjectMaybeShared
>
(
)
;
}
JS_PUBLIC_API
JSObject
*
JS
:
:
UnwrapArrayBufferMaybeShared
(
JSObject
*
obj
)
{
return
obj
-
>
maybeUnwrapIf
<
ArrayBufferObjectMaybeShared
>
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
GetArrayBufferMaybeSharedLengthAndData
(
JSObject
*
obj
size_t
*
length
bool
*
isSharedMemory
uint8_t
*
*
data
)
{
MOZ_ASSERT
(
obj
-
>
is
<
ArrayBufferObjectMaybeShared
>
(
)
)
;
if
(
obj
-
>
is
<
SharedArrayBufferObject
>
(
)
)
{
auto
*
buffer
=
&
obj
-
>
as
<
SharedArrayBufferObject
>
(
)
;
*
length
=
buffer
-
>
byteLength
(
)
;
*
data
=
buffer
-
>
dataPointerShared
(
)
.
unwrap
(
)
;
*
isSharedMemory
=
true
;
}
else
{
auto
*
buffer
=
&
obj
-
>
as
<
ArrayBufferObject
>
(
)
;
*
length
=
buffer
-
>
byteLength
(
)
;
*
data
=
buffer
-
>
dataPointer
(
)
;
*
isSharedMemory
=
false
;
}
}
JS_PUBLIC_API
uint8_t
*
JS
:
:
GetArrayBufferMaybeSharedData
(
JSObject
*
obj
bool
*
isSharedMemory
const
JS
:
:
AutoRequireNoGC
&
)
{
MOZ_ASSERT
(
obj
-
>
maybeUnwrapIf
<
ArrayBufferObjectMaybeShared
>
(
)
)
;
if
(
ArrayBufferObject
*
aobj
=
obj
-
>
maybeUnwrapIf
<
ArrayBufferObject
>
(
)
)
{
*
isSharedMemory
=
false
;
return
aobj
-
>
dataPointer
(
)
;
}
else
if
(
SharedArrayBufferObject
*
saobj
=
obj
-
>
maybeUnwrapIf
<
SharedArrayBufferObject
>
(
)
)
{
*
isSharedMemory
=
true
;
return
saobj
-
>
dataPointerShared
(
)
.
unwrap
(
)
;
}
return
nullptr
;
}
JS_PUBLIC_API
bool
JS
:
:
IsLargeArrayBufferMaybeShared
(
JSObject
*
obj
)
{
#
ifdef
JS_64BIT
obj
=
UnwrapArrayBufferMaybeShared
(
obj
)
;
MOZ_ASSERT
(
obj
)
;
size_t
len
=
obj
-
>
is
<
ArrayBufferObject
>
(
)
?
obj
-
>
as
<
ArrayBufferObject
>
(
)
.
byteLength
(
)
:
obj
-
>
as
<
SharedArrayBufferObject
>
(
)
.
byteLength
(
)
;
return
len
>
ArrayBufferObject
:
:
MaxByteLengthForSmallBuffer
;
#
else
MOZ_ASSERT
(
ArrayBufferObject
:
:
maxBufferByteLength
(
)
=
=
ArrayBufferObject
:
:
MaxByteLengthForSmallBuffer
)
;
return
false
;
#
endif
}
