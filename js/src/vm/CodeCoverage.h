#
ifndef
vm_CodeCoverage_h
#
define
vm_CodeCoverage_h
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
vm
/
Printer
.
h
"
struct
JSCompartment
;
class
JSScript
;
class
JSObject
;
namespace
js
{
class
ScriptSourceObject
;
namespace
coverage
{
class
LCovCompartment
;
class
LCovSource
{
public
:
explicit
LCovSource
(
LifoAlloc
*
alloc
JSObject
*
sso
)
;
bool
match
(
JSObject
*
sso
)
{
return
sso
=
=
source_
;
}
bool
writeTopLevelScript
(
JSScript
*
script
)
;
void
exportInto
(
GenericPrinter
&
out
)
const
;
bool
writeSourceFilename
(
ScriptSourceObject
*
sso
)
;
private
:
bool
writeScriptName
(
LSprinter
&
out
JSScript
*
script
)
;
bool
writeScript
(
JSScript
*
script
)
;
private
:
JSObject
*
source_
;
LSprinter
outSF_
;
LSprinter
outFN_
;
LSprinter
outFNDA_
;
size_t
numFunctionsFound_
;
size_t
numFunctionsHit_
;
LSprinter
outBRDA_
;
size_t
numBranchesFound_
;
size_t
numBranchesHit_
;
LSprinter
outDA_
;
size_t
numLinesInstrumented_
;
size_t
numLinesHit_
;
bool
hasFilename_
:
1
;
bool
hasScripts_
:
1
;
}
;
class
LCovCompartment
{
public
:
LCovCompartment
(
)
;
void
collectCodeCoverageInfo
(
JSCompartment
*
comp
JSObject
*
sso
JSScript
*
topLevel
)
;
void
collectSourceFile
(
JSCompartment
*
comp
ScriptSourceObject
*
sso
)
;
void
exportInto
(
GenericPrinter
&
out
)
const
;
private
:
bool
writeCompartmentName
(
JSCompartment
*
comp
)
;
LCovSource
*
lookupOrAdd
(
JSCompartment
*
comp
JSObject
*
sso
)
;
private
:
typedef
Vector
<
LCovSource
16
LifoAllocPolicy
<
Fallible
>
>
LCovSourceVector
;
LifoAlloc
alloc_
;
LSprinter
outTN_
;
LCovSourceVector
*
sources_
;
}
;
class
LCovRuntime
{
public
:
LCovRuntime
(
)
;
~
LCovRuntime
(
)
;
void
init
(
)
;
bool
isEnabled
(
)
const
{
return
out_
.
isInitialized
(
)
;
}
void
writeLCovResult
(
LCovCompartment
&
comp
)
;
private
:
void
maybeReopenAfterFork
(
)
;
private
:
Fprinter
out_
;
size_t
pid_
;
}
;
}
}
#
endif
