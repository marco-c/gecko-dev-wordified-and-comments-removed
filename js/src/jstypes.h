#
ifndef
jstypes_h
#
define
jstypes_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
js
-
config
.
h
"
#
if
defined
(
STATIC_JS_API
)
#
define
JS_PUBLIC_API
(
t
)
t
#
define
JS_PUBLIC_DATA
(
t
)
t
#
define
JS_FRIEND_API
(
t
)
t
#
define
JS_FRIEND_DATA
(
t
)
t
#
elif
defined
(
EXPORT_JS_API
)
|
|
defined
(
STATIC_EXPORTABLE_JS_API
)
#
define
JS_PUBLIC_API
(
t
)
MOZ_EXPORT
t
#
define
JS_PUBLIC_DATA
(
t
)
MOZ_EXPORT
t
#
define
JS_FRIEND_API
(
t
)
MOZ_EXPORT
t
#
define
JS_FRIEND_DATA
(
t
)
MOZ_EXPORT
t
#
else
#
define
JS_PUBLIC_API
(
t
)
MOZ_IMPORT_API
t
#
define
JS_PUBLIC_DATA
(
t
)
MOZ_IMPORT_DATA
t
#
define
JS_FRIEND_API
(
t
)
MOZ_IMPORT_API
t
#
define
JS_FRIEND_DATA
(
t
)
MOZ_IMPORT_DATA
t
#
endif
#
if
defined
(
_MSC_VER
)
&
&
defined
(
_M_IX86
)
#
define
JS_FASTCALL
__fastcall
#
elif
defined
(
__GNUC__
)
&
&
defined
(
__i386__
)
#
define
JS_FASTCALL
__attribute__
(
(
fastcall
)
)
#
else
#
define
JS_FASTCALL
#
define
JS_NO_FASTCALL
#
endif
#
if
MOZ_IS_GCC
#
if
MOZ_GCC_VERSION_AT_MOST
(
8
0
0
)
#
define
JS_BROKEN_GCC_ATTRIBUTE_WARNING
#
endif
#
endif
#
define
JS_BEGIN_MACRO
do
{
#
if
defined
(
_MSC_VER
)
#
define
JS_END_MACRO
\
}
__pragma
(
warning
(
push
)
)
__pragma
(
warning
(
disable
:
4127
)
)
\
while
(
0
)
__pragma
(
warning
(
pop
)
)
#
else
#
define
JS_END_MACRO
}
while
(
0
)
#
endif
#
define
JS_BIT
(
n
)
(
(
uint32_t
)
1
<
<
(
n
)
)
#
define
JS_BITMASK
(
n
)
(
JS_BIT
(
n
)
-
1
)
#
define
JS_HOWMANY
(
x
y
)
(
(
(
x
)
+
(
y
)
-
1
)
/
(
y
)
)
#
define
JS_ROUNDUP
(
x
y
)
(
JS_HOWMANY
(
x
y
)
*
(
y
)
)
#
if
defined
(
JS_64BIT
)
#
define
JS_BITS_PER_WORD
64
#
else
#
define
JS_BITS_PER_WORD
32
#
endif
#
define
JS_FUNC_TO_DATA_PTR
(
type
fun
)
(
mozilla
:
:
BitwiseCast
<
type
>
(
fun
)
)
#
define
JS_DATA_TO_FUNC_PTR
(
type
ptr
)
(
mozilla
:
:
BitwiseCast
<
type
>
(
ptr
)
)
#
endif
