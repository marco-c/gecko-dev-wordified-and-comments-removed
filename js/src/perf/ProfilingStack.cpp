#
include
"
js
/
ProfilingStack
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
<
algorithm
>
using
namespace
js
;
PseudoStack
:
:
~
PseudoStack
(
)
{
MOZ_RELEASE_ASSERT
(
stackPointer
=
=
0
)
;
delete
[
]
entries
;
}
bool
PseudoStack
:
:
ensureCapacitySlow
(
)
{
MOZ_ASSERT
(
stackPointer
>
=
entryCapacity
)
;
const
uint32_t
kInitialCapacity
=
128
;
uint32_t
sp
=
stackPointer
;
auto
newCapacity
=
std
:
:
max
(
sp
+
1
entryCapacity
?
entryCapacity
*
2
:
kInitialCapacity
)
;
auto
*
newEntries
=
new
(
mozilla
:
:
fallible
)
js
:
:
ProfileEntry
[
newCapacity
]
;
if
(
MOZ_UNLIKELY
(
!
newEntries
)
)
return
false
;
for
(
auto
i
:
mozilla
:
:
IntegerRange
(
entryCapacity
)
)
newEntries
[
i
]
=
entries
[
i
]
;
js
:
:
ProfileEntry
*
oldEntries
=
entries
;
entries
=
newEntries
;
entryCapacity
=
newCapacity
;
delete
[
]
oldEntries
;
return
true
;
}
