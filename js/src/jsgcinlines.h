#
ifndef
jsgcinlines_h
#
define
jsgcinlines_h
#
include
"
jsgc
.
h
"
#
include
"
gc
/
GCTrace
.
h
"
#
include
"
gc
/
Zone
.
h
"
namespace
js
{
namespace
gc
{
static
inline
AllocKind
GetGCObjectKind
(
const
Class
*
clasp
)
{
if
(
clasp
=
=
FunctionClassPtr
)
return
AllocKind
:
:
FUNCTION
;
uint32_t
nslots
=
JSCLASS_RESERVED_SLOTS
(
clasp
)
;
if
(
clasp
-
>
flags
&
JSCLASS_HAS_PRIVATE
)
nslots
+
+
;
return
GetGCObjectKind
(
nslots
)
;
}
inline
void
GCRuntime
:
:
poke
(
)
{
poked
=
true
;
#
ifdef
JS_GC_ZEAL
if
(
hasZealMode
(
ZealMode
:
:
Poke
)
)
nextScheduled
=
1
;
#
endif
}
class
ArenaIter
{
ArenaHeader
*
aheader
;
ArenaHeader
*
unsweptHeader
;
ArenaHeader
*
sweptHeader
;
public
:
ArenaIter
(
)
{
aheader
=
nullptr
;
unsweptHeader
=
nullptr
;
sweptHeader
=
nullptr
;
}
ArenaIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
init
(
zone
kind
)
;
}
void
init
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
aheader
=
zone
-
>
arenas
.
getFirstArena
(
kind
)
;
unsweptHeader
=
zone
-
>
arenas
.
getFirstArenaToSweep
(
kind
)
;
sweptHeader
=
zone
-
>
arenas
.
getFirstSweptArena
(
kind
)
;
if
(
!
unsweptHeader
)
{
unsweptHeader
=
sweptHeader
;
sweptHeader
=
nullptr
;
}
if
(
!
aheader
)
{
aheader
=
unsweptHeader
;
unsweptHeader
=
sweptHeader
;
sweptHeader
=
nullptr
;
}
}
bool
done
(
)
const
{
return
!
aheader
;
}
ArenaHeader
*
get
(
)
const
{
return
aheader
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
aheader
=
aheader
-
>
next
;
if
(
!
aheader
)
{
aheader
=
unsweptHeader
;
unsweptHeader
=
sweptHeader
;
sweptHeader
=
nullptr
;
}
}
}
;
class
ArenaCellIterImpl
{
size_t
firstThingOffset
;
size_t
thingSize
;
#
ifdef
DEBUG
bool
isInited
;
#
endif
ArenaHeader
*
arenaAddr
;
FreeSpan
span
;
uint_fast16_t
thing
;
void
moveForwardIfFree
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
thing
)
;
if
(
thing
=
=
span
.
first
)
{
thing
=
span
.
last
+
thingSize
;
span
=
*
span
.
nextSpan
(
arenaAddr
)
;
}
}
public
:
ArenaCellIterImpl
(
)
:
firstThingOffset
(
0
)
thingSize
(
0
)
#
ifdef
DEBUG
isInited
(
false
)
#
endif
arenaAddr
(
nullptr
)
thing
(
0
)
{
}
void
init
(
ArenaHeader
*
aheader
)
{
AllocKind
kind
=
aheader
-
>
getAllocKind
(
)
;
#
ifdef
DEBUG
isInited
=
true
;
#
endif
firstThingOffset
=
Arena
:
:
firstThingOffset
(
kind
)
;
thingSize
=
Arena
:
:
thingSize
(
kind
)
;
reset
(
aheader
)
;
}
void
reset
(
ArenaHeader
*
aheader
)
{
MOZ_ASSERT
(
isInited
)
;
arenaAddr
=
aheader
;
span
=
*
aheader
-
>
getFirstFreeSpan
(
)
;
thing
=
firstThingOffset
;
moveForwardIfFree
(
)
;
}
bool
done
(
)
const
{
MOZ_ASSERT
(
thing
<
=
ArenaSize
)
;
return
thing
=
=
ArenaSize
;
}
TenuredCell
*
getCell
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
reinterpret_cast
<
TenuredCell
*
>
(
uintptr_t
(
arenaAddr
)
+
thing
)
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
static_cast
<
T
*
>
(
getCell
(
)
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
thing
+
=
thingSize
;
if
(
thing
<
ArenaSize
)
moveForwardIfFree
(
)
;
}
}
;
template
<
>
JSObject
*
ArenaCellIterImpl
:
:
get
<
JSObject
>
(
)
const
;
class
ArenaCellIterUnderGC
:
public
ArenaCellIterImpl
{
public
:
explicit
ArenaCellIterUnderGC
(
ArenaHeader
*
aheader
)
{
MOZ_ASSERT
(
aheader
-
>
zone
-
>
runtimeFromAnyThread
(
)
-
>
isHeapBusy
(
)
)
;
init
(
aheader
)
;
}
}
;
class
ArenaCellIterUnderFinalize
:
public
ArenaCellIterImpl
{
public
:
explicit
ArenaCellIterUnderFinalize
(
ArenaHeader
*
aheader
)
{
init
(
aheader
)
;
}
}
;
class
ZoneCellIterImpl
{
ArenaIter
arenaIter
;
ArenaCellIterImpl
cellIter
;
protected
:
ZoneCellIterImpl
(
)
{
}
void
init
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
arenaIter
.
init
(
zone
kind
)
;
if
(
!
arenaIter
.
done
(
)
)
cellIter
.
init
(
arenaIter
.
get
(
)
)
;
}
public
:
bool
done
(
)
const
{
return
arenaIter
.
done
(
)
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
cellIter
.
get
<
T
>
(
)
;
}
Cell
*
getCell
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
cellIter
.
getCell
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
cellIter
.
next
(
)
;
if
(
cellIter
.
done
(
)
)
{
MOZ_ASSERT
(
!
arenaIter
.
done
(
)
)
;
arenaIter
.
next
(
)
;
if
(
!
arenaIter
.
done
(
)
)
cellIter
.
reset
(
arenaIter
.
get
(
)
)
;
}
}
}
;
class
ZoneCellIterUnderGC
:
public
ZoneCellIterImpl
{
public
:
ZoneCellIterUnderGC
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
MOZ_ASSERT
(
zone
-
>
runtimeFromAnyThread
(
)
-
>
gc
.
nursery
.
isEmpty
(
)
)
;
MOZ_ASSERT
(
zone
-
>
runtimeFromAnyThread
(
)
-
>
isHeapBusy
(
)
)
;
init
(
zone
kind
)
;
}
}
;
class
ZoneCellIter
:
public
ZoneCellIterImpl
{
JS
:
:
AutoAssertNoAlloc
noAlloc
;
public
:
ZoneCellIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
JSRuntime
*
rt
=
zone
-
>
runtimeFromMainThread
(
)
;
if
(
IsBackgroundFinalized
(
kind
)
&
&
zone
-
>
arenas
.
needBackgroundFinalizeWait
(
kind
)
)
{
rt
-
>
gc
.
waitBackgroundSweepEnd
(
)
;
}
rt
-
>
gc
.
evictNursery
(
)
;
noAlloc
.
disallowAlloc
(
rt
)
;
init
(
zone
kind
)
;
}
}
;
class
GCZonesIter
{
private
:
ZonesIter
zone
;
public
:
explicit
GCZonesIter
(
JSRuntime
*
rt
ZoneSelector
selector
=
WithAtoms
)
:
zone
(
rt
selector
)
{
if
(
!
zone
-
>
isCollecting
(
)
)
next
(
)
;
}
bool
done
(
)
const
{
return
zone
.
done
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
do
{
zone
.
next
(
)
;
}
while
(
!
zone
.
done
(
)
&
&
!
zone
-
>
isCollectingFromAnyThread
(
)
)
;
}
JS
:
:
Zone
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
zone
;
}
operator
JS
:
:
Zone
*
(
)
const
{
return
get
(
)
;
}
JS
:
:
Zone
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
typedef
CompartmentsIterT
<
GCZonesIter
>
GCCompartmentsIter
;
class
GCZoneGroupIter
{
private
:
JS
:
:
Zone
*
current
;
public
:
explicit
GCZoneGroupIter
(
JSRuntime
*
rt
)
{
MOZ_ASSERT
(
rt
-
>
isHeapBusy
(
)
)
;
current
=
rt
-
>
gc
.
getCurrentZoneGroup
(
)
;
}
bool
done
(
)
const
{
return
!
current
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
current
=
current
-
>
nextNodeInGroup
(
)
;
}
JS
:
:
Zone
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
current
;
}
operator
JS
:
:
Zone
*
(
)
const
{
return
get
(
)
;
}
JS
:
:
Zone
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
typedef
CompartmentsIterT
<
GCZoneGroupIter
>
GCCompartmentGroupIter
;
}
}
#
endif
