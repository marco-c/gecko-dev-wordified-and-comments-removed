#
ifndef
jsgcinlines_h
#
define
jsgcinlines_h
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
GCTrace
.
h
"
#
include
"
gc
/
RelocationOverlay
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
gc
/
ArenaList
-
inl
.
h
"
namespace
js
{
namespace
gc
{
class
AutoAssertEmptyNursery
;
class
ArenaIter
{
Arena
*
arena
;
Arena
*
unsweptArena
;
Arena
*
sweptArena
;
mozilla
:
:
DebugOnly
<
bool
>
initialized
;
public
:
ArenaIter
(
)
:
arena
(
nullptr
)
unsweptArena
(
nullptr
)
sweptArena
(
nullptr
)
initialized
(
false
)
{
}
ArenaIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
:
initialized
(
false
)
{
init
(
zone
kind
)
;
}
void
init
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
MOZ_ASSERT
(
!
initialized
)
;
MOZ_ASSERT
(
zone
)
;
initialized
=
true
;
arena
=
zone
-
>
arenas
.
getFirstArena
(
kind
)
;
unsweptArena
=
zone
-
>
arenas
.
getFirstArenaToSweep
(
kind
)
;
sweptArena
=
zone
-
>
arenas
.
getFirstSweptArena
(
kind
)
;
if
(
!
unsweptArena
)
{
unsweptArena
=
sweptArena
;
sweptArena
=
nullptr
;
}
if
(
!
arena
)
{
arena
=
unsweptArena
;
unsweptArena
=
sweptArena
;
sweptArena
=
nullptr
;
}
}
bool
done
(
)
const
{
MOZ_ASSERT
(
initialized
)
;
return
!
arena
;
}
Arena
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
arena
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
arena
=
arena
-
>
next
;
if
(
!
arena
)
{
arena
=
unsweptArena
;
unsweptArena
=
sweptArena
;
sweptArena
=
nullptr
;
}
}
}
;
enum
CellIterNeedsBarrier
:
uint8_t
{
CellIterDoesntNeedBarrier
=
0
CellIterMayNeedBarrier
=
1
}
;
class
ArenaCellIterImpl
{
size_t
firstThingOffset
;
size_t
thingSize
;
Arena
*
arenaAddr
;
FreeSpan
span
;
uint_fast16_t
thing
;
JS
:
:
TraceKind
traceKind
;
bool
needsBarrier
;
mozilla
:
:
DebugOnly
<
bool
>
initialized
;
void
moveForwardIfFree
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
thing
)
;
if
(
thing
=
=
span
.
first
)
{
thing
=
span
.
last
+
thingSize
;
span
=
*
span
.
nextSpan
(
arenaAddr
)
;
}
}
public
:
ArenaCellIterImpl
(
)
:
firstThingOffset
(
0
)
thingSize
(
0
)
arenaAddr
(
nullptr
)
thing
(
0
)
traceKind
(
JS
:
:
TraceKind
:
:
Null
)
needsBarrier
(
false
)
initialized
(
false
)
{
}
explicit
ArenaCellIterImpl
(
Arena
*
arena
CellIterNeedsBarrier
mayNeedBarrier
)
:
initialized
(
false
)
{
init
(
arena
mayNeedBarrier
)
;
}
void
init
(
Arena
*
arena
CellIterNeedsBarrier
mayNeedBarrier
)
{
MOZ_ASSERT
(
!
initialized
)
;
MOZ_ASSERT
(
arena
)
;
initialized
=
true
;
AllocKind
kind
=
arena
-
>
getAllocKind
(
)
;
firstThingOffset
=
Arena
:
:
firstThingOffset
(
kind
)
;
thingSize
=
Arena
:
:
thingSize
(
kind
)
;
traceKind
=
MapAllocToTraceKind
(
kind
)
;
needsBarrier
=
mayNeedBarrier
&
&
!
JS
:
:
CurrentThreadIsHeapCollecting
(
)
;
reset
(
arena
)
;
}
void
reset
(
Arena
*
arena
)
{
MOZ_ASSERT
(
initialized
)
;
MOZ_ASSERT
(
arena
)
;
arenaAddr
=
arena
;
span
=
*
arena
-
>
getFirstFreeSpan
(
)
;
thing
=
firstThingOffset
;
moveForwardIfFree
(
)
;
}
bool
done
(
)
const
{
MOZ_ASSERT
(
initialized
)
;
MOZ_ASSERT
(
thing
<
=
ArenaSize
)
;
return
thing
=
=
ArenaSize
;
}
TenuredCell
*
getCell
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
TenuredCell
*
cell
=
reinterpret_cast
<
TenuredCell
*
>
(
uintptr_t
(
arenaAddr
)
+
thing
)
;
if
(
needsBarrier
)
ExposeGCThingToActiveJS
(
JS
:
:
GCCellPtr
(
cell
traceKind
)
)
;
return
cell
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
JS
:
:
MapTypeToTraceKind
<
T
>
:
:
kind
=
=
traceKind
)
;
return
static_cast
<
T
*
>
(
getCell
(
)
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
thing
+
=
thingSize
;
if
(
thing
<
ArenaSize
)
moveForwardIfFree
(
)
;
}
}
;
template
<
>
JSObject
*
ArenaCellIterImpl
:
:
get
<
JSObject
>
(
)
const
;
class
ArenaCellIter
:
public
ArenaCellIterImpl
{
public
:
explicit
ArenaCellIter
(
Arena
*
arena
)
:
ArenaCellIterImpl
(
arena
CellIterMayNeedBarrier
)
{
MOZ_ASSERT
(
JS
:
:
CurrentThreadIsHeapTracing
(
)
)
;
}
}
;
template
<
typename
T
>
class
ZoneCellIter
;
template
<
>
class
ZoneCellIter
<
TenuredCell
>
{
ArenaIter
arenaIter
;
ArenaCellIterImpl
cellIter
;
mozilla
:
:
Maybe
<
JS
:
:
AutoAssertNoGC
>
nogc
;
protected
:
ZoneCellIter
(
)
{
}
void
init
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
MOZ_ASSERT_IF
(
IsNurseryAllocable
(
kind
)
zone
-
>
isAtomsZone
(
)
|
|
zone
-
>
group
(
)
-
>
nursery
(
)
.
isEmpty
(
)
)
;
initForTenuredIteration
(
zone
kind
)
;
}
void
initForTenuredIteration
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
JSRuntime
*
rt
=
zone
-
>
runtimeFromAnyThread
(
)
;
if
(
!
JS
:
:
CurrentThreadIsHeapBusy
(
)
)
{
nogc
.
emplace
(
)
;
}
if
(
IsBackgroundFinalized
(
kind
)
&
&
zone
-
>
arenas
.
needBackgroundFinalizeWait
(
kind
)
)
rt
-
>
gc
.
waitBackgroundSweepEnd
(
)
;
arenaIter
.
init
(
zone
kind
)
;
if
(
!
arenaIter
.
done
(
)
)
cellIter
.
init
(
arenaIter
.
get
(
)
CellIterMayNeedBarrier
)
;
}
public
:
ZoneCellIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
{
if
(
IsNurseryAllocable
(
kind
)
)
zone
-
>
runtimeFromActiveCooperatingThread
(
)
-
>
gc
.
evictNursery
(
)
;
init
(
zone
kind
)
;
}
ZoneCellIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
const
js
:
:
gc
:
:
AutoAssertEmptyNursery
&
)
{
init
(
zone
kind
)
;
}
bool
done
(
)
const
{
return
arenaIter
.
done
(
)
;
}
template
<
typename
T
>
T
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
cellIter
.
get
<
T
>
(
)
;
}
TenuredCell
*
getCell
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
cellIter
.
getCell
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
cellIter
.
next
(
)
;
if
(
cellIter
.
done
(
)
)
{
MOZ_ASSERT
(
!
arenaIter
.
done
(
)
)
;
arenaIter
.
next
(
)
;
if
(
!
arenaIter
.
done
(
)
)
cellIter
.
reset
(
arenaIter
.
get
(
)
)
;
}
}
}
;
template
<
typename
GCType
>
class
ZoneCellIter
:
public
ZoneCellIter
<
TenuredCell
>
{
public
:
explicit
ZoneCellIter
(
JS
:
:
Zone
*
zone
)
:
ZoneCellIter
<
TenuredCell
>
(
)
{
init
(
zone
MapTypeToFinalizeKind
<
GCType
>
:
:
kind
)
;
}
ZoneCellIter
(
JS
:
:
Zone
*
zone
const
js
:
:
gc
:
:
AutoAssertEmptyNursery
&
)
:
ZoneCellIter
(
zone
)
{
}
ZoneCellIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
:
ZoneCellIter
<
TenuredCell
>
(
zone
kind
)
{
}
ZoneCellIter
(
JS
:
:
Zone
*
zone
AllocKind
kind
const
js
:
:
gc
:
:
AutoAssertEmptyNursery
&
empty
)
:
ZoneCellIter
<
TenuredCell
>
(
zone
kind
empty
)
{
}
GCType
*
get
(
)
const
{
return
ZoneCellIter
<
TenuredCell
>
:
:
get
<
GCType
>
(
)
;
}
operator
GCType
*
(
)
const
{
return
get
(
)
;
}
GCType
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
inline
void
RelocationOverlay
:
:
forwardTo
(
Cell
*
cell
)
{
MOZ_ASSERT
(
!
isForwarded
(
)
)
;
static_assert
(
offsetof
(
RelocationOverlay
magic_
)
=
=
offsetof
(
JSObject
group_
)
&
&
offsetof
(
RelocationOverlay
magic_
)
=
=
offsetof
(
js
:
:
Shape
base_
)
&
&
offsetof
(
RelocationOverlay
magic_
)
=
=
offsetof
(
JSString
d
.
u1
.
flags
)
"
RelocationOverlay
:
:
magic_
is
in
the
wrong
location
"
)
;
magic_
=
Relocated
;
newLocation_
=
cell
;
}
}
}
#
endif
