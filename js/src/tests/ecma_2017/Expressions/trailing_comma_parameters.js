function
functionExpression
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
function
f
(
{
argList
}
)
{
var
fun
=
f
;
return
{
returnExpr
}
;
}
)
(
{
parameters
}
)
)
;
}
function
generatorExpression
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
function
*
f
(
{
argList
}
)
{
var
fun
=
f
;
return
{
returnExpr
}
;
}
)
(
{
parameters
}
)
.
next
(
)
.
value
)
;
}
function
objectMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
{
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
)
;
}
function
objectGeneratorMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
{
*
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
.
next
(
)
.
value
)
;
}
function
classMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
new
class
{
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
)
;
}
function
classStaticMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
class
{
static
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
)
;
}
function
classGeneratorMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
new
class
{
*
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
.
next
(
)
.
value
)
;
}
function
classStaticGeneratorMethod
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
(
class
{
static
*
m
(
{
argList
}
)
{
var
fun
=
this
.
m
;
return
{
returnExpr
}
;
}
}
)
.
m
(
{
parameters
}
)
.
next
(
)
.
value
)
;
}
function
classConstructorMethod
(
argList
parameters
=
"
"
returnExpr
=
"
null
"
)
{
return
eval
(
new
(
class
{
constructor
(
{
argList
}
)
{
var
fun
=
this
.
constructor
;
return
{
value
:
{
returnExpr
}
}
;
}
}
)
(
{
parameters
}
)
.
value
)
;
}
const
tests
=
[
functionExpression
generatorExpression
objectMethod
objectGeneratorMethod
classMethod
classStaticMethod
classGeneratorMethod
classStaticGeneratorMethod
classConstructorMethod
]
;
for
(
let
test
of
tests
)
{
assertEq
(
test
(
"
a
"
"
10
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
a
b
"
"
10
20
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
a
=
30
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
a
=
30
b
=
40
"
"
"
"
a
+
b
"
)
70
)
;
assertEq
(
test
(
"
[
a
]
"
"
[
10
]
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
[
a
]
[
b
]
"
"
[
10
]
[
20
]
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
[
a
]
=
[
30
]
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
[
a
]
=
[
30
]
[
b
]
=
[
40
]
"
"
"
"
a
+
b
"
)
70
)
;
assertEq
(
test
(
"
{
a
}
"
"
{
a
:
10
}
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
{
a
}
{
b
}
"
"
{
a
:
10
}
{
b
:
20
}
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
{
a
}
=
{
a
:
30
}
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
{
a
}
=
{
a
:
30
}
{
b
}
=
{
b
:
40
}
"
"
"
"
a
+
b
"
)
70
)
;
}
for
(
let
test
of
tests
)
{
assertEq
(
test
(
"
a
"
"
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
a
b
"
"
"
"
fun
.
length
"
)
2
)
;
assertEq
(
test
(
"
[
a
]
"
"
[
]
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
[
a
]
[
b
]
"
"
[
]
[
]
"
"
fun
.
length
"
)
2
)
;
assertEq
(
test
(
"
{
a
}
"
"
{
}
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
{
a
}
{
b
}
"
"
{
}
{
}
"
"
fun
.
length
"
)
2
)
;
}
for
(
let
test
of
tests
)
{
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
b
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
b
"
)
SyntaxError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
