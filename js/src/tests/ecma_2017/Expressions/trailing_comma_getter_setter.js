function
objectGetter
(
argList
)
{
return
eval
(
(
{
get
m
(
{
argList
}
)
{
}
}
)
)
;
}
function
objectSetter
(
argList
)
{
return
eval
(
(
{
set
m
(
{
argList
}
)
{
}
}
)
)
;
}
function
classGetter
(
argList
)
{
return
eval
(
(
class
{
get
m
(
{
argList
}
)
{
}
}
)
)
;
}
function
classStaticGetter
(
argList
)
{
return
eval
(
(
class
{
static
get
m
(
{
argList
}
)
{
}
}
)
)
;
}
function
classSetter
(
argList
)
{
return
eval
(
(
class
{
set
m
(
{
argList
}
)
{
}
}
)
)
;
}
function
classStaticSetter
(
argList
)
{
return
eval
(
(
class
{
static
set
m
(
{
argList
}
)
{
}
}
)
)
;
}
const
tests
=
[
objectGetter
objectSetter
classGetter
classStaticGetter
classSetter
classStaticSetter
]
;
for
(
let
test
of
tests
)
{
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
[
]
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
{
}
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
=
0
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
[
]
=
[
]
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
{
}
=
{
}
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
b
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
b
"
)
SyntaxError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
