function
testLenientAndStrict
(
code
lenient_pred
strict_pred
)
{
return
(
strict_pred
(
"
'
use
strict
'
;
"
+
code
)
&
&
lenient_pred
(
code
)
)
;
}
function
completesNormally
(
code
)
{
try
{
eval
(
code
)
;
return
true
;
}
catch
(
exception
)
{
return
false
;
}
}
function
parsesSuccessfully
(
code
)
{
try
{
Function
(
code
)
;
return
true
;
}
catch
(
exception
)
{
return
false
;
}
}
;
function
parseRaisesException
(
exception
)
{
return
function
(
code
)
{
try
{
Function
(
code
)
;
return
false
;
}
catch
(
actual
)
{
return
exception
.
prototype
.
isPrototypeOf
(
actual
)
;
}
}
;
}
;
