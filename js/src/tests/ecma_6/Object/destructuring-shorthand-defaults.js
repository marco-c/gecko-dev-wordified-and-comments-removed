const
SYNTAX_ERROR_STMTS
=
[
"
(
{
x
=
{
}
=
{
}
}
)
"
"
(
{
y
=
{
x
=
{
}
=
{
}
=
{
}
=
{
}
=
{
}
=
{
}
=
{
}
=
{
}
}
=
{
}
}
)
"
"
(
{
a
=
1
b
=
2
c
=
3
x
=
(
{
}
=
{
}
)
}
)
"
"
(
{
x
=
1
y
=
{
z
=
{
1
}
}
}
)
"
"
(
{
x
=
1
}
=
{
y
=
1
}
)
;
"
"
(
{
x
:
y
=
{
z
=
1
}
}
=
{
}
)
"
"
(
{
x
=
1
}
)
"
"
(
{
z
=
1
}
=
{
}
{
w
=
2
}
{
e
=
3
}
)
=
>
{
}
;
"
"
(
{
z
=
{
x
=
1
}
}
)
=
>
{
}
;
"
"
(
{
x
=
(
{
y
=
1
}
)
=
>
y
}
)
"
"
(
(
{
x
=
1
}
)
)
=
>
x
"
"
let
o
=
{
x
=
1
}
;
"
"
var
j
=
{
x
=
1
}
;
"
"
var
j
=
{
x
=
{
y
=
1
}
}
=
{
}
;
"
"
const
z
=
{
x
=
1
}
;
"
"
const
z
=
{
x
=
{
y
=
1
}
}
=
{
}
;
"
"
const
{
x
=
1
}
;
"
"
const
{
x
=
{
y
=
33
}
}
=
{
}
;
"
"
var
{
x
=
1
}
;
"
"
let
{
x
=
1
}
;
"
"
let
x
y
{
z
=
1
}
=
{
}
{
w
=
2
}
{
e
=
3
}
;
"
"
[
{
x
=
1
y
=
(
{
z
=
2
}
=
{
}
)
}
]
;
"
"
try
{
throw
'
a
'
;
}
catch
(
{
x
=
{
y
=
1
}
}
)
{
}
"
"
if
(
{
k
:
1
x
=
{
y
=
2
}
=
{
}
}
)
{
}
"
"
if
(
false
)
{
}
else
if
(
true
)
{
(
{
x
=
1
}
)
}
"
"
switch
(
'
c
'
)
{
case
'
c
'
:
(
{
x
=
1
}
)
;
}
"
"
for
(
{
x
=
1
}
;
1
;
)
{
1
}
"
"
for
(
{
x
=
{
y
=
2
}
}
;
1
;
)
{
1
}
"
"
for
(
var
x
=
0
;
x
<
2
;
x
+
+
)
{
(
{
x
=
1
y
=
2
}
)
}
"
"
for
(
let
x
=
1
;
{
x
=
1
}
;
)
{
}
"
"
for
(
let
x
=
1
;
{
x
=
{
y
=
2
}
}
;
)
{
}
"
"
for
(
let
x
=
1
;
1
;
{
x
=
1
}
)
{
}
"
"
for
(
let
x
=
1
;
1
;
{
x
=
{
y
=
2
}
}
)
{
}
"
"
while
(
{
x
=
1
}
)
{
1
}
;
"
"
while
(
{
x
=
{
y
=
2
}
}
=
{
}
)
{
1
}
;
"
"
with
(
{
x
=
1
}
)
{
}
;
"
"
with
(
{
x
=
{
y
=
3
}
=
{
}
}
)
{
}
;
"
"
with
(
Math
)
{
(
{
x
=
1
}
)
}
;
"
]
for
(
var
stmt
of
SYNTAX_ERROR_STMTS
)
{
assertThrowsInstanceOf
(
(
)
=
>
{
eval
(
stmt
)
;
}
SyntaxError
)
;
}
const
REFERENCE_ERROR_STMTS
=
[
"
(
{
x
}
+
=
{
}
)
;
"
"
(
{
x
=
1
}
)
=
{
x
:
2
}
;
"
]
for
(
var
stmt
of
REFERENCE_ERROR_STMTS
)
{
assertThrowsInstanceOf
(
(
)
=
>
{
eval
(
stmt
)
;
}
ReferenceError
)
;
}
assertEq
(
(
(
{
a
=
0
}
)
=
>
a
)
(
{
}
)
0
)
;
assertEq
(
(
(
{
a
=
0
}
=
{
}
)
=
>
a
)
(
{
}
)
0
)
;
assertEq
(
(
(
{
a
=
0
}
=
{
}
)
=
>
a
)
(
{
a
:
1
}
)
1
)
;
{
let
x
y
;
(
{
x
=
1
}
=
{
}
)
;
assertEq
(
x
1
)
;
(
{
x
=
1
}
=
{
x
:
4
}
)
;
assertEq
(
x
4
)
;
(
{
x
=
1
y
=
2
}
=
{
}
)
assertEq
(
x
1
)
;
assertEq
(
y
2
)
;
}
{
let
{
x
=
{
i
=
1
j
=
2
}
=
{
}
}
=
{
}
;
assertDeepEq
(
x
(
{
}
)
)
;
assertEq
(
i
1
)
;
assertEq
(
j
2
)
;
}
if
(
typeof
reportCompare
=
=
"
function
"
)
reportCompare
(
true
true
)
;
