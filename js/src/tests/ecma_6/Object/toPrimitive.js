var
expectedThis
expectedHint
;
var
obj
=
{
[
Symbol
.
toPrimitive
]
(
hint
.
.
.
rest
)
{
assertEq
(
this
expectedThis
)
;
assertEq
(
hint
expectedHint
)
;
assertEq
(
rest
.
length
0
)
;
return
2015
;
}
}
;
expectedThis
=
obj
;
expectedHint
=
"
string
"
;
assertEq
(
String
(
obj
)
"
2015
"
)
;
expectedHint
=
"
number
"
;
assertEq
(
Number
(
obj
)
2015
)
;
var
proxy
=
new
Proxy
(
obj
{
}
)
;
expectedThis
=
proxy
;
expectedHint
=
"
default
"
;
assertEq
(
"
ES
"
+
proxy
"
ES2015
"
)
;
proxy
=
new
Proxy
(
Object
.
create
(
proxy
)
{
}
)
;
expectedThis
=
proxy
;
expectedHint
=
"
default
"
;
assertEq
(
"
ES
"
+
(
proxy
+
1
)
"
ES2016
"
)
;
var
ok
=
true
;
for
(
var
constructor
of
[
Boolean
Number
String
Symbol
]
)
{
constructor
.
prototype
[
Symbol
.
toPrimitive
]
=
function
(
)
{
ok
=
false
;
throw
"
FAIL
"
;
}
;
}
assertEq
(
Number
(
true
)
1
)
;
assertEq
(
Number
(
77
.
7
)
77
.
7
)
;
assertEq
(
Number
(
"
123
"
)
123
)
;
assertThrowsInstanceOf
(
(
)
=
>
Number
(
Symbol
.
iterator
)
TypeError
)
;
assertEq
(
String
(
true
)
"
true
"
)
;
assertEq
(
String
(
77
.
7
)
"
77
.
7
"
)
;
assertEq
(
String
(
"
123
"
)
"
123
"
)
;
assertEq
(
String
(
Symbol
.
iterator
)
"
Symbol
(
Symbol
.
iterator
)
"
)
;
assertEq
(
ok
true
)
;
delete
Symbol
.
prototype
[
Symbol
.
toPrimitive
]
;
var
sym
=
Symbol
(
"
ok
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
sym
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
Number
(
sym
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
"
+
sym
TypeError
)
;
obj
=
Object
(
sym
)
;
assertEq
(
String
(
obj
)
"
Symbol
(
ok
)
"
)
;
assertEq
(
{
obj
}
"
Symbol
(
ok
)
"
)
;
delete
Symbol
.
prototype
.
valueOf
;
delete
Object
.
prototype
.
valueOf
;
assertEq
(
Number
(
obj
)
NaN
)
;
Symbol
.
prototype
.
toString
=
function
(
)
{
return
"
2060
"
;
}
;
assertEq
(
Number
(
obj
)
2060
)
;
var
d
=
new
Date
;
assertEq
(
0
+
d
0
+
d
.
toString
(
)
)
;
delete
Date
.
prototype
[
Symbol
.
toPrimitive
]
;
assertEq
(
0
+
d
0
+
d
.
valueOf
(
)
)
;
var
log
=
[
]
;
function
doGet
(
target
propertyName
receiver
)
{
log
.
push
(
propertyName
)
;
}
var
handler
=
new
Proxy
(
{
}
{
get
(
target
trapName
receiver
)
{
if
(
trapName
!
=
=
"
get
"
)
throw
FAIL
:
system
tried
to
access
handler
method
:
{
uneval
(
trapName
)
}
;
return
doGet
;
}
}
)
;
proxy
=
new
Proxy
(
Object
.
create
(
null
)
handler
)
;
assertThrowsInstanceOf
(
(
)
=
>
proxy
=
=
0
TypeError
)
;
assertDeepEq
(
log
[
Symbol
.
toPrimitive
"
valueOf
"
"
toString
"
]
)
;
reportCompare
(
0
0
)
;
