{
let
\
u
{
61
}
=
123
;
assertEq
(
a
123
)
;
let
\
u
{
6A
}
=
123
;
assertEq
(
j
123
)
;
let
a
\
u
{
62
}
=
456
;
assertEq
(
ab
456
)
;
let
\
u
{
63
}
\
u
{
6b
}
=
789
;
assertEq
(
ck
789
)
;
}
const
leadingZeros
=
[
0
1
2
3
4
100
]
.
map
(
c
=
>
"
0
"
.
repeat
(
c
)
)
;
const
idStart
=
[
0x0041
0x006A
0x00C9
0x00FF
0x01C5
0x0294
0x037A
0x16EE
0xFF70
]
;
const
idStartSupplemental
=
[
0x10140
0x10300
0x10400
0x10430
0x16B40
]
;
const
otherIdStart
=
[
0x1885
0x1886
0x2118
0x212E
0x309B
0x309C
]
;
const
idContinue
=
[
0x0030
0x0300
0x0660
0x0903
0xFF10
0xFF3F
]
;
const
idContinueSupplemental
=
[
0x101FD
0x104A0
0x11000
]
;
const
otherIdContinue
=
[
0x00B7
0x0387
0x1369
0x136A
0x136B
0x136C
0x136D
0x136E
0x136F
0x1370
0x1371
0x19DA
]
;
for
(
let
ident
of
[
.
.
.
idStart
.
.
.
otherIdStart
]
)
{
for
(
let
count
of
leadingZeros
)
{
let
zeros
=
"
0
"
.
repeat
(
count
)
;
eval
(
let
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
=
123
;
assertEq
(
{
String
.
fromCodePoint
(
ident
)
}
123
)
;
)
;
}
}
for
(
let
ident
of
[
.
.
.
idStartSupplemental
]
)
{
for
(
let
zeros
of
leadingZeros
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
)
SyntaxError
)
;
}
}
for
(
let
ident
of
[
.
.
.
idContinue
.
.
.
idContinueSupplemental
.
.
.
otherIdContinue
]
)
{
for
(
let
zeros
of
leadingZeros
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
)
SyntaxError
)
;
}
}
for
(
let
ident
of
[
.
.
.
idStart
.
.
.
otherIdStart
.
.
.
idContinue
.
.
.
otherIdContinue
]
)
{
for
(
let
zeros
of
leadingZeros
)
{
eval
(
let
A
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
=
123
;
assertEq
(
{
String
.
fromCodePoint
(
0x41
ident
)
}
123
)
;
)
;
}
}
for
(
let
ident
of
[
.
.
.
idStartSupplemental
.
.
.
idContinueSupplemental
]
)
{
for
(
let
zeros
of
leadingZeros
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
)
SyntaxError
)
;
}
}
const
notIdentifiers
=
[
0x0000
0x000A
0x005E
0x00B1
0xFF61
0x10061
0x10100
0x100061
]
;
for
(
let
ident
of
notIdentifiers
)
{
for
(
let
zeros
of
leadingZeros
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
\
\
u
{
{
zeros
}
{
ident
.
toString
(
16
)
}
}
)
SyntaxError
)
;
}
}
const
incompleteEscapes
=
[
"
\
\
u
{
"
"
\
\
u
{
6
"
"
\
\
u
{
61
"
"
\
\
u
{
061
"
"
\
\
u
{
0061
"
"
\
\
u
{
00061
"
"
\
\
u
{
000061
"
"
\
\
u
{
0000061
"
"
\
\
u
}
"
]
;
for
(
let
invalid
of
incompleteEscapes
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
invalid
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
invalid
+
"
\
n
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
invalid
+
"
"
)
SyntaxError
)
;
}
const
invalidEscapes
=
[
"
"
"
\
0
"
"
G
"
"
Z
"
"
\
uFFFF
"
"
\
uDBFF
\
uDFFF
"
"
61
"
"
61
"
"
\
n61
"
"
61
\
n
"
"
110000
"
"
110001
"
"
fffffe
"
"
ffffff
"
"
10ffff0
"
"
10ffffabcdef
"
]
;
for
(
let
invalid
of
invalidEscapes
)
{
for
(
let
zeros
of
leadingZeros
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
\
\
u
{
{
zeros
}
{
invalid
}
}
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
var
\
\
u
{
{
zeros
}
{
invalid
}
}
)
SyntaxError
)
;
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
ok
"
)
;
