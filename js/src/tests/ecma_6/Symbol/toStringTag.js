function
testToString
(
)
{
var
tests
=
[
[
undefined
"
[
object
Undefined
]
"
]
[
null
"
[
object
Null
]
"
]
[
[
]
"
[
object
Array
]
"
]
[
new
String
(
"
abc
"
)
"
[
object
String
]
"
]
[
(
function
(
)
{
return
arguments
;
}
)
(
)
"
[
object
Arguments
]
"
]
[
(
function
(
)
{
"
use
strict
"
;
return
arguments
;
}
)
(
)
"
[
object
Arguments
]
"
]
[
function
(
)
{
}
"
[
object
Function
]
"
]
[
new
Error
(
"
abc
"
)
"
[
object
Error
]
"
]
[
true
"
[
object
Boolean
]
"
]
[
5
"
[
object
Number
]
"
]
[
new
Date
(
)
"
[
object
Date
]
"
]
[
/
regexp
/
"
[
object
RegExp
]
"
]
[
{
[
Symbol
.
toStringTag
]
:
"
abc
"
}
"
[
object
abc
]
"
]
[
Object
.
create
(
JSON
)
"
[
object
JSON
]
"
]
[
Object
.
create
(
new
Number
)
"
[
object
Object
]
"
]
[
Object
.
create
(
new
Number
{
[
Symbol
.
toStringTag
]
:
{
value
:
"
abc
"
}
}
)
"
[
object
abc
]
"
]
[
(
function
(
)
{
var
x
=
new
Number
(
)
;
x
[
Symbol
.
toStringTag
]
=
"
abc
"
;
return
x
;
}
)
(
)
"
[
object
abc
]
"
]
[
[
]
"
[
object
Array
]
"
]
]
;
for
(
let
[
value
expected
]
of
tests
)
{
let
result
=
Object
.
prototype
.
toString
.
call
(
value
)
;
assertEq
(
result
expected
)
;
}
}
testToString
(
)
;
function
testProxy
(
)
{
var
count
=
0
;
var
metaHandler
=
new
Proxy
(
{
}
{
get
(
target
property
receiver
)
{
assertEq
(
property
"
get
"
)
;
return
function
(
target
property
receiver
)
{
assertEq
(
property
Symbol
.
toStringTag
)
;
count
+
+
;
return
undefined
;
}
}
}
)
;
assertEq
(
Object
.
prototype
.
toString
.
call
(
new
Proxy
(
{
}
metaHandler
)
)
"
[
object
Object
]
"
)
assertEq
(
Object
.
prototype
.
toString
.
call
(
new
Proxy
(
new
Date
metaHandler
)
)
"
[
object
Object
]
"
)
assertEq
(
Object
.
prototype
.
toString
.
call
(
new
Proxy
(
[
]
metaHandler
)
)
"
[
object
Array
]
"
)
assertEq
(
Object
.
prototype
.
toString
.
call
(
new
Proxy
(
function
(
)
{
}
metaHandler
)
)
"
[
object
Function
]
"
)
var
{
proxy
revoke
}
=
Proxy
.
revocable
(
{
}
metaHandler
)
;
revoke
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
Object
.
prototype
.
toString
.
call
(
proxy
)
TypeError
)
;
assertEq
(
count
4
)
;
}
testProxy
(
)
;
function
testDefault
(
object
expected
)
{
let
desc
=
Object
.
getOwnPropertyDescriptor
(
object
Symbol
.
toStringTag
)
;
assertEq
(
desc
.
value
expected
)
;
assertEq
(
desc
.
writable
false
)
;
assertEq
(
desc
.
enumerable
false
)
;
assertEq
(
desc
.
configurable
true
)
;
}
testDefault
(
Symbol
.
prototype
"
Symbol
"
)
;
testDefault
(
Math
"
Math
"
)
;
testDefault
(
"
"
[
Symbol
.
iterator
]
(
)
.
__proto__
"
String
Iterator
"
)
testDefault
(
[
]
[
Symbol
.
iterator
]
(
)
.
__proto__
"
Array
Iterator
"
)
function
testTypedArray
(
)
{
let
ta
=
(
new
Uint8Array
(
0
)
)
.
__proto__
.
__proto__
;
let
desc
=
Object
.
getOwnPropertyDescriptor
(
ta
Symbol
.
toStringTag
)
;
assertEq
(
desc
.
enumerable
false
)
;
assertEq
(
desc
.
configurable
true
)
;
assertEq
(
desc
.
set
undefined
)
;
let
get
=
desc
.
get
;
assertEq
(
get
.
name
"
get
[
Symbol
.
toStringTag
]
"
)
;
assertEq
(
get
.
call
(
3
.
14
)
undefined
)
;
assertEq
(
get
.
call
(
{
}
)
undefined
)
;
assertEq
(
get
.
call
(
ta
)
undefined
)
;
let
types
=
[
Int8Array
Uint8Array
Int16Array
Uint16Array
Int32Array
Uint32Array
Float32Array
Float64Array
]
;
for
(
let
type
of
types
)
{
let
array
=
new
type
(
0
)
;
assertEq
(
get
.
call
(
array
)
type
.
name
)
;
assertEq
(
Object
.
prototype
.
toString
.
call
(
array
)
[
object
{
type
.
name
}
]
)
;
}
}
testTypedArray
(
)
;
testDefault
(
Map
.
prototype
"
Map
"
)
;
testDefault
(
new
Map
(
)
[
Symbol
.
iterator
]
(
)
.
__proto__
"
Map
Iterator
"
)
testDefault
(
Set
.
prototype
"
Set
"
)
;
testDefault
(
new
Set
(
)
[
Symbol
.
iterator
]
(
)
.
__proto__
"
Set
Iterator
"
)
testDefault
(
WeakMap
.
prototype
"
WeakMap
"
)
;
testDefault
(
WeakSet
.
prototype
"
WeakSet
"
)
;
testDefault
(
ArrayBuffer
.
prototype
"
ArrayBuffer
"
)
;
testDefault
(
DataView
.
prototype
"
DataView
"
)
;
testDefault
(
JSON
"
JSON
"
)
;
testDefault
(
function
*
(
)
{
}
.
constructor
.
prototype
"
GeneratorFunction
"
)
;
testDefault
(
function
*
(
)
{
}
(
)
.
__proto__
.
__proto__
"
Generator
"
)
;
testDefault
(
Promise
.
prototype
"
Promise
"
)
;
reportCompare
(
true
true
)
;
