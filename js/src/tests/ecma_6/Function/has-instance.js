let
passed
=
false
;
let
obj
=
{
foo
:
true
}
;
let
C
=
function
(
)
{
}
;
Object
.
defineProperty
(
C
Symbol
.
hasInstance
{
value
:
function
(
inst
)
{
passed
=
inst
.
foo
;
return
false
;
}
}
)
;
assertEq
(
obj
instanceof
C
false
)
;
assertEq
(
passed
true
)
;
{
let
obj
=
{
[
Symbol
.
hasInstance
]
(
v
)
{
return
true
;
}
}
;
let
whatevs
=
{
}
;
assertEq
(
whatevs
instanceof
obj
true
)
;
}
{
function
zzzz
(
)
{
}
;
let
xxxx
=
new
zzzz
(
)
;
assertEq
(
xxxx
instanceof
zzzz
true
)
;
assertEq
(
zzzz
[
Symbol
.
hasInstance
]
(
xxxx
)
true
)
;
}
const
nonCallables
=
[
1
undefined
null
"
nope
"
]
for
(
let
nonCallable
of
nonCallables
)
{
assertEq
(
nonCallable
instanceof
Function
false
)
;
assertEq
(
nonCallable
instanceof
Object
false
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
{
function
foo
(
)
{
}
;
let
obj
=
{
}
;
foo
instanceof
obj
;
}
TypeError
)
;
let
o
=
{
[
Symbol
.
hasInstance
]
(
v
)
{
return
true
;
}
}
assertEq
(
1
instanceof
o
true
)
;
for
(
let
nonCallable
of
nonCallables
)
{
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
nonCallable
Object
)
false
)
;
}
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Function
(
)
=
>
1
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Function
Object
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Function
null
)
false
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Function
Array
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Object
Array
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
Array
Function
)
false
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
(
{
}
)
Function
)
false
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
)
false
)
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
(
{
}
)
)
false
)
let
bindme
=
{
x
:
function
(
)
{
}
}
;
let
instance
=
new
bindme
.
x
(
)
;
let
xOuter
=
bindme
.
x
;
let
bound
=
xOuter
.
bind
(
bindme
)
;
let
doubleBound
=
bound
.
bind
(
bindme
)
;
let
tripleBound
=
bound
.
bind
(
doubleBound
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
bound
instance
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
doubleBound
instance
)
true
)
;
assertEq
(
Function
.
prototype
[
Symbol
.
hasInstance
]
.
call
(
tripleBound
instance
)
true
)
;
let
desc
=
Object
.
getOwnPropertyDescriptor
(
Function
.
prototype
Symbol
.
hasInstance
)
assertEq
(
desc
.
configurable
false
)
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
