let
foo
=
(
)
=
>
1
;
let
bar
=
foo
;
assertEq
(
foo
.
name
"
foo
"
)
;
assertEq
(
bar
.
name
"
foo
"
)
;
let
gen
=
function
*
(
)
{
}
;
assertEq
(
gen
.
name
"
gen
"
)
;
let
abc
=
(
(
(
(
function
(
)
{
}
)
)
)
)
;
assertEq
(
abc
.
name
"
abc
"
)
;
let
a
b
c
;
a
=
b
=
c
=
function
(
)
{
}
;
assertEq
(
a
.
name
"
c
"
)
;
assertEq
(
b
.
name
"
c
"
)
;
assertEq
(
c
.
name
"
c
"
)
;
let
q
=
(
0
function
(
)
{
}
)
;
assertEq
(
q
.
name
"
"
)
;
let
yabba
dabba
;
[
yabba
dabba
]
=
[
(
)
=
>
1
function
(
)
{
}
]
;
assertEq
(
yabba
.
name
"
"
)
;
assertEq
(
dabba
.
name
"
"
)
;
let
obj
=
{
wubba
:
function
(
)
{
}
1
:
(
)
=
>
"
lubba
"
dubdub
:
function
*
(
)
{
}
noOverride
:
function
named
(
)
{
}
obj2
:
{
obj3
:
{
funky
:
(
)
=
>
1
}
}
"
1
+
2
"
:
(
)
=
>
1
'
"
\
\
\
n
\
t
\
v
\
r
\
b
\
f
\
0
'
:
(
)
=
>
1
"
\
u9999
"
:
(
)
=
>
1
"
\
u9999
"
:
(
)
=
>
1
"
\
u
{
999
}
"
:
(
)
=
>
1
"
\
u
{
999
}
"
:
(
)
=
>
1
"
\
x111234
"
:
(
)
=
>
1
inner
:
{
'
[
"
\
\
bob2
-
6
"
]
'
:
(
)
=
>
1
}
"
99
[
]
"
:
{
"
20
-
16
"
:
{
rrr
:
(
)
=
>
1
}
}
"
'
"
:
(
)
=
>
1
}
assertEq
(
obj
.
wubba
.
name
"
wubba
"
)
;
assertEq
(
obj
[
1
]
.
name
"
1
"
)
;
assertEq
(
obj
.
dubdub
.
name
"
dubdub
"
)
;
assertEq
(
obj
.
noOverride
.
name
"
named
"
)
;
assertEq
(
obj
.
obj2
.
obj3
.
funky
.
name
"
funky
"
)
;
assertEq
(
obj
[
"
1
+
2
"
]
.
name
"
1
+
2
"
)
;
assertEq
(
obj
[
'
"
\
\
\
n
\
t
\
v
\
r
\
b
\
f
\
0
'
]
.
name
"
\
"
\
\
\
n
\
t
\
v
\
r
\
b
\
f
\
0
"
)
;
assertEq
(
obj
[
"
\
u9999
"
]
.
name
"
\
u9999
"
)
;
assertEq
(
obj
[
"
\
u9999
"
]
.
name
"
\
u9999
"
)
;
assertEq
(
obj
[
"
\
u
{
999
}
"
]
.
name
"
\
u
{
999
}
"
)
;
assertEq
(
obj
[
"
\
u
{
999
}
"
]
.
name
"
\
u
{
999
}
"
)
;
assertEq
(
obj
[
"
\
x111234
"
]
.
name
"
\
x111234
"
)
;
assertEq
(
obj
.
inner
[
'
[
"
\
\
bob2
-
6
"
]
'
]
.
name
'
[
"
\
\
bob2
-
6
"
]
'
)
;
assertEq
(
obj
[
"
99
[
]
"
]
[
"
20
-
16
"
]
.
rrr
.
name
"
rrr
"
)
;
assertEq
(
obj
[
"
'
"
]
.
name
"
'
"
)
;
assertEq
(
(
{
a
:
(
)
=
>
1
}
)
.
a
.
name
"
a
"
)
;
assertEq
(
(
{
"
[
abba
]
"
:
{
3
:
(
)
=
>
1
}
}
)
[
"
[
abba
]
"
]
[
3
]
.
name
"
3
"
)
;
assertEq
(
(
{
"
[
abba
]
"
:
(
)
=
>
1
}
)
[
"
[
abba
]
"
]
.
name
"
[
abba
]
"
)
;
let
zip
=
obj
.
wubba
;
assertEq
(
zip
.
name
"
wubba
"
)
;
let
idaho
=
{
0
:
(
)
=
>
1
}
;
let
planetz
=
{
}
;
planetz
[
idaho
[
0
]
]
=
(
)
=
>
1
;
assertEq
(
planetz
[
idaho
[
0
]
]
.
name
"
"
)
;
let
moya
=
{
}
;
moya
[
planetz
[
idaho
[
0
]
]
]
=
(
)
=
>
1
;
assertEq
(
moya
[
planetz
[
idaho
[
0
]
]
]
.
name
"
"
)
;
function
bound
(
)
{
}
;
assertEq
(
bound
.
name
"
bound
"
)
;
assertEq
(
bound
.
bind
(
Object
)
.
name
"
bound
bound
"
)
;
assertEq
(
(
function
(
)
{
}
)
.
bind
(
function
(
)
{
}
)
.
name
"
bound
"
)
;
reportCompare
(
0
0
'
ok
'
)
;
