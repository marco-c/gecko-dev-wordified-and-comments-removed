const
container
=
{
async
asyncMethod
(
)
{
}
*
genMethod
(
)
{
}
method
(
)
{
}
}
;
[
async
function
(
)
{
}
function
*
(
)
{
}
(
)
=
>
{
}
async
(
)
=
>
{
}
container
.
asyncMethod
container
.
genMethod
container
.
method
]
.
forEach
(
f
=
>
{
checkArgumentsAccess
(
f
)
;
checkCallerAccess
(
f
)
;
}
)
;
function
checkArgumentsAccess
(
f
)
{
assertThrowsInstanceOf
(
(
)
=
>
f
.
arguments
TypeError
Expected
'
arguments
'
property
access
to
throw
on
{
f
}
)
;
}
function
checkCallerAccess
(
f
)
{
assertThrowsInstanceOf
(
(
)
=
>
f
.
caller
TypeError
Expected
'
caller
'
property
access
to
throw
on
{
f
}
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
print
(
"
Tests
complete
"
)
;
