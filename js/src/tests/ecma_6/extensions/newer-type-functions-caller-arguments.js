const
container
=
{
async
asyncMethod
(
)
{
}
*
genMethod
(
)
{
}
method
(
)
{
}
get
getterMethod
(
)
{
}
set
setterMethod
(
x
)
{
}
}
;
function
*
genDecl
(
)
{
}
async
function
asyncDecl
(
)
{
}
class
classDecl
{
}
class
extClassDecl
extends
Object
{
}
class
classDeclExplicitCtor
{
constructor
(
)
{
}
}
class
extClassDeclExplicitCtor
extends
Object
{
constructor
(
)
{
}
}
const
functions
=
[
genDecl
asyncDecl
classDecl
extClassDecl
classDeclExplicitCtor
extClassDeclExplicitCtor
async
function
(
)
{
}
function
*
(
)
{
}
(
)
=
>
{
}
async
(
)
=
>
{
}
class
{
}
class
extends
Object
{
}
class
{
constructor
(
)
{
}
}
class
extends
Object
{
constructor
(
)
{
}
}
container
.
asyncMethod
container
.
genMethod
container
.
method
Object
.
getOwnPropertyDescriptor
(
container
"
getterMethod
"
)
.
get
Object
.
getOwnPropertyDescriptor
(
container
"
setterMethod
"
)
.
set
function
(
)
{
}
.
bind
(
)
Function
Function
.
prototype
.
bind
]
;
const
supportsAsyncGenerator
=
(
function
(
)
{
try
{
eval
(
"
async
function
*
f
(
)
{
}
"
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
)
;
if
(
supportsAsyncGenerator
)
{
eval
(
async
function
*
asyncGenDecl
(
)
{
}
functions
.
push
(
asyncGenDecl
)
;
functions
.
push
(
async
function
*
(
)
{
}
)
;
functions
.
push
(
{
async
*
asyncGenerator
(
)
{
}
}
.
asyncGenerator
)
;
)
;
}
functions
.
forEach
(
f
=
>
{
checkArgumentsAccess
(
f
)
;
checkCallerAccess
(
f
)
;
}
)
;
function
checkArgumentsAccess
(
f
)
{
assertThrowsInstanceOf
(
(
)
=
>
f
.
arguments
TypeError
Expected
'
arguments
'
property
access
to
throw
on
{
f
}
)
;
}
function
checkCallerAccess
(
f
)
{
assertThrowsInstanceOf
(
(
)
=
>
f
.
caller
TypeError
Expected
'
caller
'
property
access
to
throw
on
{
f
}
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
