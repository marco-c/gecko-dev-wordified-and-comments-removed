var
returnCalled
=
0
;
function
*
wrapNoThrow
(
)
{
let
iter
=
{
[
Symbol
.
iterator
]
(
)
{
return
this
;
}
next
(
)
{
return
{
value
:
10
done
:
false
}
;
}
return
(
)
{
returnCalled
+
+
;
return
{
}
;
}
}
;
for
(
const
i
of
iter
)
{
yield
i
;
}
}
for
(
const
i
of
wrapNoThrow
(
)
)
{
break
;
}
assertEq
(
returnCalled
1
)
;
function
*
wrapThrow
(
)
{
let
iter
=
{
[
Symbol
.
iterator
]
(
)
{
return
this
;
}
next
(
)
{
return
{
value
:
10
done
:
false
}
;
}
return
(
)
{
throw
42
;
}
}
;
for
(
const
i
of
iter
)
{
yield
i
;
}
}
assertThrowsValue
(
(
)
=
>
{
for
(
const
i
of
wrapThrow
(
)
)
{
break
;
}
}
42
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
