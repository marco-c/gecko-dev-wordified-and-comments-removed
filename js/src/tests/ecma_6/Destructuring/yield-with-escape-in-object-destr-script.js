var
message
=
"
Congratulations
you
'
ve
fixed
escape
sequences
in
yield
!
Please
enable
the
commented
out
tests
in
this
file
.
"
;
try
{
eval
(
String
.
raw
var
yi
\
u0065ld
;
)
;
}
catch
(
e
)
{
message
=
"
"
;
}
if
(
message
)
throw
message
;
var
{
yi
\
u0065ld
}
=
{
yield
:
"
yield
-
with
-
shorthand
"
}
;
assertEq
(
yield
"
yield
-
with
-
shorthand
"
)
;
var
{
yi
\
u0065ld
=
0
}
=
{
yield
:
"
yield
-
with
-
coverinitname
"
}
;
assertEq
(
yield
"
yield
-
with
-
coverinitname
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
var
{
a
:
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
var
{
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
var
{
yi
\
u0065ld
=
0
}
=
{
}
;
)
SyntaxError
)
;
{
}
{
let
{
yi
\
u0065ld
}
=
{
yield
:
"
yield
-
with
-
shorthand
"
}
;
assertEq
(
yield
"
yield
-
with
-
shorthand
"
)
;
}
{
let
{
yi
\
u0065ld
=
0
}
=
{
yield
:
"
yield
-
with
-
coverinitname
"
}
;
assertEq
(
yield
"
yield
-
with
-
coverinitname
"
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
let
{
a
:
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
let
{
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
let
{
yi
\
u0065ld
=
0
}
=
{
}
;
)
SyntaxError
)
;
{
}
{
const
{
yi
\
u0065ld
}
=
{
yield
:
"
yield
-
with
-
shorthand
"
}
;
assertEq
(
yield
"
yield
-
with
-
shorthand
"
)
;
}
{
const
{
yi
\
u0065ld
=
0
}
=
{
yield
:
"
yield
-
with
-
coverinitname
"
}
;
assertEq
(
yield
"
yield
-
with
-
coverinitname
"
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
const
{
a
:
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
const
{
yi
\
u0065ld
}
=
{
}
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
const
{
yi
\
u0065ld
=
0
}
=
{
}
;
)
SyntaxError
)
;
(
{
yi
\
u0065ld
}
=
{
yield
:
"
yield
-
with
-
shorthand
"
}
)
;
assertEq
(
yield
"
yield
-
with
-
shorthand
"
)
;
(
{
yi
\
u0065ld
=
0
}
=
{
yield
:
"
yield
-
with
-
coverinitname
"
}
)
;
assertEq
(
yield
"
yield
-
with
-
coverinitname
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
(
{
a
:
yi
\
u0065ld
}
=
{
}
)
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
(
{
yi
\
u0065ld
}
=
{
}
)
;
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
String
.
raw
"
use
strict
"
;
(
{
yi
\
u0065ld
=
0
}
=
{
}
)
;
)
SyntaxError
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
ok
"
)
;
