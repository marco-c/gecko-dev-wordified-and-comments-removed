if
(
typeof
Intl
!
=
=
"
object
"
)
{
const
localeSep
=
[
]
.
toLocaleString
(
)
;
const
originalNumberToLocaleString
=
Number
.
prototype
.
toLocaleString
;
for
(
let
constructor
of
anyTypedArrayConstructors
)
{
Number
.
prototype
.
toLocaleString
=
function
(
)
{
assertEq
(
arguments
.
length
0
)
;
return
"
pass
"
;
}
;
assertEq
(
new
constructor
(
1
)
.
toLocaleString
(
)
"
pass
"
)
;
assertEq
(
new
constructor
(
2
)
.
toLocaleString
(
)
"
pass
"
+
localeSep
+
"
pass
"
)
;
}
Number
.
prototype
.
toLocaleString
=
originalNumberToLocaleString
;
for
(
let
constructor
of
anyTypedArrayConstructors
)
{
Number
.
prototype
.
toLocaleString
=
function
(
)
{
assertEq
(
arguments
.
length
0
)
;
return
"
pass
"
;
}
;
let
locales
=
{
}
;
let
options
=
{
}
;
assertEq
(
new
constructor
(
1
)
.
toLocaleString
(
locales
options
)
"
pass
"
)
;
assertEq
(
new
constructor
(
2
)
.
toLocaleString
(
locales
options
)
"
pass
"
+
localeSep
+
"
pass
"
)
;
}
Number
.
prototype
.
toLocaleString
=
originalNumberToLocaleString
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
