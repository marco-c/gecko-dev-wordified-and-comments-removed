const
thisGlobal
=
this
;
const
otherGlobal
=
newGlobal
(
)
;
const
ta_i32
=
otherGlobal
.
eval
(
"
new
Int32Array
(
0
)
"
)
;
function
assertBufferPrototypeFrom
(
newTypedArray
prototype
)
{
var
typedArrayName
=
newTypedArray
.
constructor
.
name
;
assertEq
(
Object
.
getPrototypeOf
(
newTypedArray
)
thisGlobal
[
typedArrayName
]
.
prototype
)
;
assertEq
(
Object
.
getPrototypeOf
(
newTypedArray
.
buffer
)
prototype
)
;
}
const
EMPTY
=
{
}
;
const
testCases
=
[
{
constructor
:
EMPTY
prototype
:
otherGlobal
.
ArrayBuffer
.
prototype
}
{
constructor
:
undefined
prototype
:
ArrayBuffer
.
prototype
}
{
constructor
:
{
[
Symbol
.
species
]
:
undefined
}
prototype
:
ArrayBuffer
.
prototype
}
{
constructor
:
{
[
Symbol
.
species
]
:
null
}
prototype
:
ArrayBuffer
.
prototype
}
]
;
for
(
let
{
constructor
prototype
}
of
testCases
)
{
if
(
constructor
!
=
=
EMPTY
)
{
ta_i32
.
buffer
.
constructor
=
constructor
;
}
assertBufferPrototypeFrom
(
new
Int32Array
(
ta_i32
)
prototype
)
;
assertBufferPrototypeFrom
(
new
Int16Array
(
ta_i32
)
prototype
)
;
}
const
errorTestCases
=
[
{
constructor
:
null
}
{
constructor
:
123
}
{
constructor
:
{
[
Symbol
.
species
]
:
123
}
}
{
constructor
:
{
[
Symbol
.
species
]
:
[
]
}
}
{
constructor
:
{
[
Symbol
.
species
]
:
(
)
=
>
{
}
}
}
]
;
for
(
let
{
constructor
}
of
errorTestCases
)
{
ta_i32
.
buffer
.
constructor
=
constructor
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
ta_i32
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
ta_i32
)
TypeError
)
;
}
if
(
this
.
SharedArrayBuffer
)
{
const
ta_i32_shared
=
otherGlobal
.
eval
(
"
new
Int32Array
(
new
SharedArrayBuffer
(
0
)
)
"
)
;
Object
.
defineProperty
(
ta_i32_shared
.
buffer
"
constructor
"
{
get
(
)
{
throw
new
Error
(
"
constructor
property
accessed
"
)
;
}
}
)
;
assertBufferPrototypeFrom
(
new
Int32Array
(
ta_i32_shared
)
ArrayBuffer
.
prototype
)
;
assertBufferPrototypeFrom
(
new
Int16Array
(
ta_i32_shared
)
ArrayBuffer
.
prototype
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
