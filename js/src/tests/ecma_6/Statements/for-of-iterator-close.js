function
test
(
)
{
var
returnCalled
=
0
;
var
returnCalledExpected
=
0
;
var
iterable
=
{
}
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
ret
:
function
(
)
{
returnCalled
+
+
;
return
{
}
;
}
}
)
;
for
(
var
x
of
iterable
)
break
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
assertThrowsValue
(
function
(
)
{
for
(
var
x
of
iterable
)
throw
"
in
body
"
;
}
"
in
body
"
)
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
function
throwlhs
(
)
{
throw
"
in
lhs
"
;
}
assertThrowsValue
(
function
(
)
{
for
(
(
throwlhs
(
)
)
of
iterable
)
continue
;
}
"
in
lhs
"
)
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
ret
:
function
(
)
{
returnCalled
+
+
;
throw
"
in
iter
.
return
"
;
}
}
)
;
assertThrowsValue
(
function
(
)
{
for
(
var
x
of
iterable
)
break
;
}
"
in
iter
.
return
"
)
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
next
:
function
(
)
{
throw
"
in
next
"
;
}
}
)
;
assertThrowsValue
(
function
(
)
{
for
(
var
x
of
iterable
)
break
;
}
"
in
next
"
)
;
assertEq
(
returnCalled
returnCalledExpected
)
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
ret
:
function
(
)
{
returnCalled
+
+
;
return
42
;
}
}
)
;
assertThrowsInstanceOf
(
function
(
)
{
for
(
var
x
of
iterable
)
break
;
}
TypeError
)
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
var
i
=
0
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
next
:
function
(
)
{
return
{
done
:
i
+
+
>
5
}
;
}
ret
:
function
(
)
{
returnCalled
+
+
;
return
{
}
;
}
}
)
;
for
(
var
x
of
iterable
)
continue
;
assertEq
(
returnCalled
returnCalledExpected
)
;
i
=
0
;
L
:
do
{
for
(
var
x
of
iterable
)
continue
L
;
}
while
(
false
)
;
assertEq
(
returnCalled
+
+
returnCalledExpected
)
;
}
test
(
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
