function
base
(
)
{
this
.
prop
=
42
;
}
class
testInitialize
extends
base
{
constructor
(
)
{
try
{
this
;
throw
new
Error
(
)
;
}
catch
(
e
if
e
instanceof
ReferenceError
)
{
}
super
(
)
;
assertEq
(
this
.
prop
42
)
;
}
}
assertEq
(
new
testInitialize
(
)
.
prop
42
)
;
class
willThrow
extends
base
{
constructor
(
)
{
super
(
)
;
super
(
)
;
}
}
assertThrowsInstanceOf
(
(
)
=
>
new
willThrow
(
)
ReferenceError
)
;
class
willStillThrow
extends
base
{
constructor
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
super
(
)
;
}
}
}
assertThrowsInstanceOf
(
(
)
=
>
new
willStillThrow
(
)
ReferenceError
)
;
class
canCatchThrow
extends
base
{
constructor
(
)
{
super
(
)
;
try
{
super
(
)
;
}
catch
(
e
)
{
}
}
}
assertEq
(
new
canCatchThrow
(
)
.
prop
42
)
;
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
"
OK
"
)
;
