assertEq
(
x
{
a
=
>
{
}
}
z
"
x
a
=
>
{
}
z
"
)
;
for
(
;
a
=
>
{
}
;
)
break
;
for
(
;
;
a
=
>
{
}
)
break
;
switch
(
1
)
{
case
a
=
>
{
}
:
break
;
}
try
{
eval
(
try
{
}
catch
(
x
if
a
=
>
{
}
)
{
}
)
;
}
catch
(
e
)
{
assertEq
(
e
instanceof
SyntaxError
true
"
should
only
have
thrown
SyntaxError
instead
got
"
+
e
)
;
}
assertEq
(
0
[
a
=
>
{
}
]
undefined
)
;
class
Y
{
}
;
class
X
extends
Y
{
constructor
(
)
{
super
[
a
=
>
{
}
]
(
)
;
}
}
;
if
(
a
=
>
{
}
)
assertEq
(
true
true
)
;
else
assertEq
(
true
false
)
;
switch
(
a
=
>
{
}
)
{
}
with
(
a
=
>
{
}
)
;
assertEq
(
typeof
(
a
=
>
{
}
)
"
function
"
)
;
for
(
var
x
in
y
=
>
{
}
)
continue
;
var
z
=
{
x
:
0
?
1
:
async
a
=
>
{
}
}
;
assertEq
(
typeof
z
.
x
"
function
"
)
;
var
q
=
0
?
1
:
async
(
)
=
>
{
}
;
assertEq
(
typeof
q
"
function
"
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
