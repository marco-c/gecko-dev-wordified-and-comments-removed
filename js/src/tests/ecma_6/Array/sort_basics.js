const
SEED
=
(
Math
.
random
(
)
*
10
)
+
1
;
function
genRandomArray
(
size
seed
)
{
return
Array
.
from
(
XorShiftGenerator
(
seed
size
)
)
;
}
function
SortTest
(
size
seed
)
{
let
arrOne
=
genRandomArray
(
size
seed
)
;
let
arrTwo
=
Array
.
from
(
arrOne
)
;
let
arrThree
=
Array
.
from
(
arrOne
)
;
let
typedArrays
=
[
new
Uint8Array
(
arrOne
)
new
Int32Array
(
arrOne
)
new
Float32Array
(
arrOne
)
]
;
let
sorted
=
Array
.
from
(
(
Int32Array
.
from
(
arrOne
)
)
.
sort
(
)
)
;
assertDeepEq
(
sorted
arrTwo
.
sort
(
(
x
y
)
=
>
(
x
-
y
)
)
The
array
is
not
properly
sorted
!
seed
:
{
SEED
}
)
;
assertDeepEq
(
sorted
arrThree
.
sort
(
(
x
y
)
=
>
(
1
*
x
-
1
*
y
)
)
The
array
is
not
properly
sorted
!
seed
:
{
SEED
}
)
;
for
(
typedArr
of
typedArrays
)
{
let
sortedTypedArray
=
Array
.
prototype
.
sort
.
call
(
typedArr
(
x
y
)
=
>
(
1
*
x
-
1
*
y
)
)
assertDeepEq
(
sorted
Array
.
from
(
sortedTypedArray
)
The
array
is
not
properly
sorted
!
seed
:
{
SEED
}
)
;
}
}
SortTest
(
2048
SEED
)
;
SortTest
(
16
SEED
)
;
SortTest
(
0
SEED
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
