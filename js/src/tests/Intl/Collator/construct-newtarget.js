class
MyCollator
extends
Intl
.
Collator
{
}
var
obj
=
new
MyCollator
(
)
;
assertEq
(
obj
instanceof
MyCollator
true
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
MyCollator
.
prototype
)
;
obj
=
Reflect
.
construct
(
MyCollator
[
]
)
;
assertEq
(
obj
instanceof
MyCollator
true
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
MyCollator
.
prototype
)
;
obj
=
Reflect
.
construct
(
MyCollator
[
]
MyCollator
)
;
assertEq
(
obj
instanceof
MyCollator
true
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
MyCollator
.
prototype
)
;
obj
=
Reflect
.
construct
(
MyCollator
[
]
Intl
.
Collator
)
;
assertEq
(
obj
instanceof
MyCollator
false
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Intl
.
Collator
.
prototype
)
;
obj
=
Reflect
.
construct
(
MyCollator
[
]
Array
)
;
assertEq
(
obj
instanceof
MyCollator
false
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
false
)
;
assertEq
(
obj
instanceof
Array
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Array
.
prototype
)
;
obj
=
Reflect
.
construct
(
Intl
.
Collator
[
]
Array
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
false
)
;
assertEq
(
obj
instanceof
Array
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Array
.
prototype
)
;
function
NewTargetNullPrototype
(
)
{
}
NewTargetNullPrototype
.
prototype
=
null
;
obj
=
Reflect
.
construct
(
Intl
.
Collator
[
]
NewTargetNullPrototype
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Intl
.
Collator
.
prototype
)
;
obj
=
Reflect
.
construct
(
MyCollator
[
]
NewTargetNullPrototype
)
;
assertEq
(
obj
instanceof
MyCollator
false
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Intl
.
Collator
.
prototype
)
;
var
trapLog
=
[
]
getLog
=
[
]
;
var
ProxiedConstructor
=
new
Proxy
(
Intl
.
Collator
new
Proxy
(
{
get
(
target
propertyKey
receiver
)
{
getLog
.
push
(
propertyKey
)
;
return
Reflect
.
get
(
target
propertyKey
receiver
)
;
}
}
{
get
(
target
propertyKey
receiver
)
{
trapLog
.
push
(
propertyKey
)
;
return
Reflect
.
get
(
target
propertyKey
receiver
)
;
}
}
)
)
;
obj
=
Reflect
.
construct
(
Intl
.
Collator
[
]
ProxiedConstructor
)
;
assertEqArray
(
trapLog
[
"
get
"
]
)
;
assertEqArray
(
getLog
[
"
prototype
"
]
)
;
assertEq
(
obj
instanceof
Intl
.
Collator
true
)
;
assertEq
(
Object
.
getPrototypeOf
(
obj
)
Intl
.
Collator
.
prototype
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
