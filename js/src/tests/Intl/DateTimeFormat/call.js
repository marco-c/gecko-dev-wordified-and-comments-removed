function
IsConstructor
(
o
)
{
try
{
new
(
new
Proxy
(
o
{
construct
:
(
)
=
>
(
{
}
)
}
)
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
function
IsObject
(
o
)
{
return
Object
(
o
)
=
=
=
o
;
}
function
thisValues
(
)
{
const
intlConstructors
=
Object
.
getOwnPropertyNames
(
Intl
)
.
map
(
name
=
>
Intl
[
name
]
)
.
filter
(
IsConstructor
)
;
return
[
.
.
.
[
undefined
null
true
"
abc
"
Symbol
(
)
123
]
.
.
.
[
{
}
[
]
/
(
?
:
)
/
function
(
)
{
}
new
Proxy
(
{
}
{
}
)
]
.
.
.
[
]
.
concat
(
.
.
.
intlConstructors
.
map
(
ctor
=
>
[
new
ctor
(
)
new
class
extends
ctor
{
}
Object
.
create
(
ctor
.
prototype
)
Object
.
setPrototypeOf
(
new
ctor
(
)
Object
.
prototype
)
]
)
)
]
;
}
const
intlFallbackSymbol
=
Object
.
getOwnPropertySymbols
(
Intl
.
DateTimeFormat
.
call
(
Object
.
create
(
Intl
.
DateTimeFormat
.
prototype
)
)
)
[
0
]
;
for
(
let
thisValue
of
thisValues
(
)
)
{
let
obj
=
Intl
.
DateTimeFormat
.
call
(
thisValue
)
;
if
(
!
Intl
.
DateTimeFormat
.
prototype
.
isPrototypeOf
(
thisValue
)
)
{
assertEq
(
Object
.
is
(
obj
thisValue
)
false
)
;
assertEq
(
obj
instanceof
Intl
.
DateTimeFormat
true
)
;
if
(
IsObject
(
thisValue
)
)
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
]
)
;
}
else
{
assertEq
(
Object
.
is
(
obj
thisValue
)
true
)
;
assertEq
(
obj
instanceof
Intl
.
DateTimeFormat
true
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
intlFallbackSymbol
]
)
;
}
}
for
(
let
thisValue
of
thisValues
(
)
)
{
let
hasInstanceCalled
=
false
;
Object
.
defineProperty
(
Intl
.
DateTimeFormat
Symbol
.
hasInstance
{
value
(
)
{
assertEq
(
hasInstanceCalled
false
)
;
hasInstanceCalled
=
true
;
return
true
;
}
configurable
:
true
}
)
;
if
(
!
IsObject
(
thisValue
)
)
{
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
DateTimeFormat
.
call
(
thisValue
)
TypeError
)
;
delete
Intl
.
DateTimeFormat
[
Symbol
.
hasInstance
]
;
}
else
{
let
obj
=
Intl
.
DateTimeFormat
.
call
(
thisValue
)
;
delete
Intl
.
DateTimeFormat
[
Symbol
.
hasInstance
]
;
assertEq
(
Object
.
is
(
obj
thisValue
)
true
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
intlFallbackSymbol
]
)
;
}
assertEq
(
hasInstanceCalled
true
)
;
}
for
(
let
thisValue
of
thisValues
(
)
)
{
let
hasInstanceCalled
=
false
;
Object
.
defineProperty
(
Intl
.
DateTimeFormat
Symbol
.
hasInstance
{
value
(
)
{
assertEq
(
hasInstanceCalled
false
)
;
hasInstanceCalled
=
true
;
return
false
;
}
configurable
:
true
}
)
;
let
obj
=
Intl
.
DateTimeFormat
.
call
(
thisValue
)
;
delete
Intl
.
DateTimeFormat
[
Symbol
.
hasInstance
]
;
assertEq
(
Object
.
is
(
obj
thisValue
)
false
)
;
assertEq
(
obj
instanceof
Intl
.
DateTimeFormat
true
)
;
if
(
IsObject
(
thisValue
)
)
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
]
)
;
assertEq
(
hasInstanceCalled
true
)
;
}
{
let
thisValue
=
Object
.
create
(
Intl
.
DateTimeFormat
.
prototype
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
]
)
;
assertEq
(
Intl
.
DateTimeFormat
.
call
(
thisValue
)
thisValue
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
intlFallbackSymbol
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
DateTimeFormat
.
call
(
thisValue
)
TypeError
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
intlFallbackSymbol
]
)
;
}
{
let
thisValue
=
Object
.
create
(
Intl
.
DateTimeFormat
.
prototype
)
;
Object
.
preventExtensions
(
thisValue
)
;
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
DateTimeFormat
.
call
(
thisValue
)
TypeError
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
]
)
;
}
{
let
thisValue
=
Object
.
create
(
Intl
.
DateTimeFormat
.
prototype
)
;
Intl
.
DateTimeFormat
.
call
(
thisValue
)
;
let
desc
=
Object
.
getOwnPropertyDescriptor
(
thisValue
intlFallbackSymbol
)
;
assertEq
(
desc
!
=
=
undefined
true
)
;
assertEq
(
desc
.
writable
false
)
;
assertEq
(
desc
.
enumerable
false
)
;
assertEq
(
desc
.
configurable
false
)
;
assertEq
(
desc
.
value
instanceof
Intl
.
DateTimeFormat
true
)
;
}
{
let
thisValue
=
{
}
;
let
options
=
{
get
hour12
(
)
{
Object
.
setPrototypeOf
(
thisValue
Intl
.
DateTimeFormat
.
prototype
)
;
return
false
;
}
}
;
let
obj
=
Intl
.
DateTimeFormat
.
call
(
thisValue
undefined
options
)
;
assertEq
(
Object
.
is
(
obj
thisValue
)
true
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
intlFallbackSymbol
]
)
;
}
{
let
thisValue
=
Object
.
create
(
Intl
.
DateTimeFormat
.
prototype
)
;
let
options
=
{
get
hour12
(
)
{
Object
.
setPrototypeOf
(
thisValue
Object
.
prototype
)
;
return
false
;
}
}
;
let
obj
=
Intl
.
DateTimeFormat
.
call
(
thisValue
undefined
options
)
;
assertEq
(
Object
.
is
(
obj
thisValue
)
false
)
;
assertEqArray
(
Object
.
getOwnPropertySymbols
(
thisValue
)
[
]
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
