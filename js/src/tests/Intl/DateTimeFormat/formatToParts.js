function
deepEqual
(
a
b
)
{
if
(
typeof
a
!
=
=
typeof
b
)
return
false
;
if
(
a
=
=
=
null
)
return
b
=
=
=
null
;
if
(
typeof
a
=
=
=
'
object
'
)
{
var
props
=
{
}
;
for
(
var
prop
in
a
)
{
if
(
!
deepEqual
(
a
[
prop
]
b
[
prop
]
)
)
return
false
;
props
[
prop
]
=
true
;
}
for
(
var
prop
in
b
)
if
(
!
props
[
prop
]
)
return
false
;
return
a
.
length
=
=
=
b
.
length
;
}
return
Object
.
is
(
a
b
)
;
}
function
composeDate
(
parts
)
{
return
parts
.
map
(
(
{
value
}
)
=
>
value
)
.
reduce
(
(
string
part
)
=
>
string
+
part
)
;
}
var
format
;
var
date
=
Date
.
UTC
(
2012
11
17
3
0
42
)
;
var
DateTimeFormat
=
newGlobal
(
{
experimentalDateTimeFormatFormatToPartsEnabled
:
true
}
)
.
Intl
.
DateTimeFormat
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
month
'
value
:
'
12
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
day
'
value
:
'
17
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
year
'
value
:
'
2012
'
}
]
)
true
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
year
:
'
numeric
'
month
:
'
numeric
'
day
:
'
numeric
'
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
month
'
value
:
'
12
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
day
'
value
:
'
17
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
year
'
value
:
'
2012
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
hour
:
'
numeric
'
minute
:
'
numeric
'
second
:
'
numeric
'
hour12
:
false
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
hour
'
value
:
'
03
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
minute
'
value
:
'
00
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
second
'
value
:
'
42
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
hour
:
'
numeric
'
minute
:
'
numeric
'
second
:
'
numeric
'
hour12
:
true
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
hour
'
value
:
'
3
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
minute
'
value
:
'
00
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
second
'
value
:
'
42
'
}
{
type
:
'
literal
'
value
:
'
'
}
{
type
:
'
dayPeriod
'
value
:
'
AM
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
month
:
"
narrow
"
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
month
'
value
:
'
D
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
weekday
:
"
narrow
"
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
weekday
'
value
:
'
M
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
year
:
"
numeric
"
era
:
"
short
"
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
year
'
value
:
'
2012
'
}
{
type
:
'
literal
'
value
:
'
'
}
{
type
:
'
era
'
value
:
'
AD
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
format
=
new
DateTimeFormat
(
"
en
-
us
"
{
weekday
:
'
long
'
year
:
'
numeric
'
month
:
'
numeric
'
day
:
'
numeric
'
hour
:
'
numeric
'
minute
:
'
numeric
'
second
:
'
numeric
'
hour12
:
true
timeZone
:
"
UTC
"
}
)
;
assertEq
(
deepEqual
(
format
.
formatToParts
(
date
)
[
{
type
:
'
weekday
'
value
:
'
Monday
'
}
{
type
:
'
literal
'
value
:
'
'
}
{
type
:
'
month
'
value
:
'
12
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
day
'
value
:
'
17
'
}
{
type
:
'
literal
'
value
:
'
/
'
}
{
type
:
'
year
'
value
:
'
2012
'
}
{
type
:
'
literal
'
value
:
'
'
}
{
type
:
'
hour
'
value
:
'
3
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
minute
'
value
:
'
00
'
}
{
type
:
'
literal
'
value
:
'
:
'
}
{
type
:
'
second
'
value
:
'
42
'
}
{
type
:
'
literal
'
value
:
'
'
}
{
type
:
'
dayPeriod
'
value
:
'
AM
'
}
]
)
true
)
;
assertEq
(
composeDate
(
format
.
formatToParts
(
date
)
)
format
.
format
(
date
)
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
'
ok
'
)
;
