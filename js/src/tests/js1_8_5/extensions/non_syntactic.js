var
someVar
=
1
;
assertEq
(
someVar
1
)
;
assertEq
(
this
.
someVar
1
)
;
evaluate
(
"
assertEq
(
someVar
1
)
;
"
)
;
evaluate
(
"
assertEq
(
this
.
someVar
1
)
;
"
)
;
var
someObject
=
{
someOtherField
:
2
}
;
var
evalOpt
=
{
envChainObject
:
someObject
}
;
evaluate
(
"
assertEq
(
someVar
1
)
;
"
evalOpt
)
;
evaluate
(
"
assertEq
(
this
.
someVar
undefined
)
;
"
evalOpt
)
;
someObject
=
{
someVar
:
2
}
;
evalOpt
=
{
envChainObject
:
someObject
}
;
var
alsoSomeObject
=
someObject
;
evaluate
(
"
assertEq
(
someVar
2
)
;
"
evalOpt
)
;
evaluate
(
"
assertEq
(
this
.
someVar
2
)
;
"
evalOpt
)
;
evaluate
(
"
assertEq
(
this
alsoSomeObject
)
;
"
evalOpt
)
;
evaluate
(
"
(
function
(
)
{
assertEq
(
someVar
2
)
;
}
)
(
)
"
evalOpt
)
;
evaluate
(
"
(
function
(
)
{
assertEq
(
this
!
=
=
alsoSomeObject
true
)
;
}
)
(
)
"
evalOpt
)
;
evaluate
(
"
(
function
(
)
{
assertEq
(
this
.
someVar
1
)
;
}
)
(
)
"
evalOpt
)
;
var
globalEvalOpt
=
{
envChainObject
:
this
}
;
try
{
evaluate
(
"
assertEq
(
someVar
1
)
;
"
globalEvalOpt
)
;
throw
new
Error
(
"
Globals
aren
'
t
allowed
as
a
envChainObject
argument
to
evaluate
"
)
;
}
catch
(
e
)
{
}
reportCompare
(
true
true
)
;
