"
use
strict
"
;
function
assertThrowsTypeErrorIncludes
(
f
propStr
details
)
{
var
fullmsg
;
try
{
f
(
)
;
}
catch
(
exc
)
{
if
(
!
(
exc
instanceof
TypeError
)
)
fullmsg
=
"
Assertion
failed
:
expected
TypeError
got
"
+
exc
;
else
if
(
!
exc
.
message
.
includes
(
propStr
)
)
fullmsg
=
Assertion
failed
:
expected
TypeError
message
'
{
exc
.
message
}
'
to
include
'
{
propStr
}
'
;
else
if
(
details
&
&
!
exc
.
message
.
includes
(
details
)
)
fullmsg
=
Assertion
failed
:
expected
TypeError
message
'
{
exc
.
message
}
'
to
include
'
{
details
}
'
;
else
return
;
}
if
(
fullmsg
=
=
=
undefined
)
{
fullmsg
=
"
Assertion
failed
:
expected
TypeError
no
exception
thrown
"
;
}
throw
new
Error
(
fullmsg
)
;
}
const
STR
=
"
one
"
STR_NAME
=
"
one
"
;
const
SYM
=
Symbol
(
"
two
"
)
SYM_NAME
=
'
Symbol
(
"
two
"
)
'
;
function
errorHasPropertyTests
(
test
)
{
assertThrowsTypeErrorIncludes
(
(
)
=
>
test
(
STR
)
STR_NAME
)
;
assertThrowsTypeErrorIncludes
(
(
)
=
>
test
(
SYM
)
SYM_NAME
)
;
}
function
errorHasPropertyTestsWithDetails
(
test
)
{
let
[
throwable
details
]
=
test
(
STR
)
;
assertThrowsTypeErrorIncludes
(
throwable
STR_NAME
details
)
;
[
throwable
details
]
=
test
(
SYM
)
;
assertThrowsTypeErrorIncludes
(
throwable
SYM_NAME
details
)
;
}
function
testGetOwnPropertyDescriptor_OBJORUNDEF
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
(
)
=
>
2
}
;
const
t
=
{
}
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
function
testGetOwnPropertyDescriptor_NC_AS_NE
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
(
)
=
>
undefined
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
function
testGetOwnPropertyDescriptor_E_AS_NE
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
(
)
=
>
undefined
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
Reflect
.
preventExtensions
(
t
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
function
testGetOwnPropertyDescriptor_NE_AS_NC
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
function
testGetOwnPropertyDescriptor_C_AS_NC
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
function
testGetOwnPropertyDescriptor_INVALID_NOT_EXTENSIBLE
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
preventExtensions
(
t
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
an
extensible
object
as
non
-
extensible
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_C_AS_NC
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
an
existing
non
-
configurable
property
as
configurable
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_ENUM_DIFFERENT_CURRENT
(
cEnumerable
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
!
cEnumerable
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
cEnumerable
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
a
different
'
enumerable
'
from
target
when
target
is
not
configurable
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_CURRENT_NC_DIFF_TYPE
(
cAccessor
propName
)
{
const
accDesc
=
{
get
:
(
)
=
>
1
enumerable
:
true
configurable
:
false
}
;
const
dataDesc
=
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
const
h
=
{
getOwnPropertyDescriptor
:
(
)
=
>
{
return
(
cAccessor
?
dataDesc
:
accDesc
)
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
cAccessor
?
accDesc
:
dataDesc
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
a
different
descriptor
type
when
target
is
not
configurable
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_NW_AS_W
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
2
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
a
non
-
configurable
non
-
writable
property
as
writable
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_DIFFERENT_VALUE
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
value
:
1
writable
:
false
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
2
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
must
report
the
same
value
for
the
non
-
writable
non
-
configurable
property
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_SETTERS_DIFFERENT
(
propName
)
{
const
g
=
(
)
=
>
1
;
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
get
:
g
set
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
get
:
g
set
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
different
setters
for
a
currently
non
-
configurable
property
"
]
;
}
function
testGetOwnPropertyDescriptor_INVALID_GETTERS_DIFFERENT
(
propName
)
{
const
h
=
{
getOwnPropertyDescriptor
:
function
(
)
{
return
{
get
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
;
}
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
get
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
getOwnPropertyDescriptor
(
p
propName
)
;
}
"
proxy
can
'
t
report
different
getters
for
a
currently
non
-
configurable
property
"
]
;
}
function
testDefineProperty_CANT_DEFINE_NEW
(
propName
)
{
const
h
=
{
defineProperty
:
(
)
=
>
true
}
;
const
t
=
{
}
;
Reflect
.
preventExtensions
(
t
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
defineProperty
(
p
propName
{
}
)
;
}
function
testDefineProperty_NE_AS_NC
(
propName
)
{
const
h
=
{
defineProperty
:
(
)
=
>
true
}
;
const
t
=
{
}
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
defineProperty
(
p
propName
{
value
:
1
enumerable
:
true
writable
:
true
configurable
:
false
}
)
;
}
function
testDefineProperty_INVALID_NC_AS_C
(
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
report
an
existing
non
-
configurable
property
as
configurable
"
]
;
}
function
testDefineProperty_INVALID_ENUM_DIFFERENT_CURRENT
(
cEnumerable
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
value
:
1
writable
:
true
enumerable
:
!
cEnumerable
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
cEnumerable
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
report
a
different
'
enumerable
'
from
target
when
target
is
not
configurable
"
]
;
}
function
testDefineProperty_INVALID_CURRENT_NC_DIFF_TYPE
(
cAccessor
propName
)
{
const
accDesc
=
{
get
:
(
)
=
>
1
enumerable
:
true
configurable
:
false
}
;
const
dataDesc
=
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
const
h
=
{
defineProperty
:
(
)
=
>
true
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
cAccessor
?
accDesc
:
dataDesc
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
cAccessor
?
dataDesc
:
accDesc
)
;
}
"
proxy
can
'
t
report
a
different
descriptor
type
when
target
is
not
configurable
"
]
;
}
function
testDefineProperty_INVALID_NW_AS_W
(
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
2
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
report
a
non
-
configurable
non
-
writable
property
as
writable
"
]
;
}
function
testDefineProperty_INVALID_DIFFERENT_VALUE
(
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
value
:
1
writable
:
false
enumerable
:
true
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
2
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
must
report
the
same
value
for
the
non
-
writable
non
-
configurable
property
"
]
;
}
function
testDefineProperty_INVALID_SETTERS_DIFFERENT
(
propName
)
{
const
g
=
(
)
=
>
1
;
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
get
:
g
set
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
get
:
g
set
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
report
different
setters
for
a
currently
non
-
configurable
property
"
]
;
}
function
testDefineProperty_INVALID_GETTERS_DIFFERENT
(
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
get
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
get
:
(
)
=
>
2
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
report
different
getters
for
a
currently
non
-
configurable
property
"
]
;
}
function
testDefineProperty_INVALID_C_AS_NC
(
propName
)
{
const
h
=
{
defineProperty
:
function
(
)
{
return
true
;
}
}
;
const
newDesc
=
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
return
[
(
)
=
>
{
Reflect
.
defineProperty
(
p
propName
newDesc
)
;
}
"
proxy
can
'
t
define
an
existing
configurable
property
as
non
-
configurable
"
]
;
}
function
testOwnKeys_CANT_SKIP_NC
(
propName
)
{
const
h
=
{
ownKeys
:
(
)
=
>
[
]
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
ownKeys
(
p
)
;
}
function
testOwnKeys_E_AS_NE
(
propName
)
{
const
h
=
{
ownKeys
:
(
)
=
>
[
]
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
configurable
:
true
value
:
1
writable
:
true
enumerable
:
true
}
)
;
Reflect
.
preventExtensions
(
t
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
ownKeys
(
p
)
;
}
function
testHas_NC_AS_NE
(
propName
)
{
const
h
=
{
has
:
(
)
=
>
undefined
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
has
(
p
propName
)
;
}
function
testHas_E_AS_NE
(
propName
)
{
const
h
=
{
has
:
(
)
=
>
undefined
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
Reflect
.
preventExtensions
(
t
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
has
(
p
propName
)
;
}
function
testGet_SAME_VALUE
(
propName
)
{
const
h
=
{
get
:
(
)
=
>
2
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
get
(
p
propName
)
;
}
function
testGet_MUST_REPORT_UNDEFINED
(
propName
)
{
const
h
=
{
get
:
(
)
=
>
2
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
set
:
(
)
=
>
{
}
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
get
(
p
propName
)
;
}
function
testSet_CANT_SET_NW_NC
(
propName
)
{
const
h
=
{
set
:
(
)
=
>
true
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
value
:
1
writable
:
false
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
set
(
p
propName
3
)
;
}
function
testSet_WO_SETTER
(
propName
)
{
const
h
=
{
set
:
(
)
=
>
true
}
;
const
t
=
{
}
;
Reflect
.
defineProperty
(
t
propName
{
get
:
(
)
=
>
{
}
enumerable
:
true
configurable
:
false
}
)
;
const
p
=
new
Proxy
(
t
h
)
;
Reflect
.
set
(
p
propName
1
)
;
}
[
testGetOwnPropertyDescriptor_OBJORUNDEF
testGetOwnPropertyDescriptor_NC_AS_NE
testGetOwnPropertyDescriptor_E_AS_NE
testGetOwnPropertyDescriptor_NE_AS_NC
testGetOwnPropertyDescriptor_C_AS_NC
testDefineProperty_CANT_DEFINE_NEW
testDefineProperty_NE_AS_NC
testOwnKeys_CANT_SKIP_NC
testOwnKeys_E_AS_NE
testHas_NC_AS_NE
testHas_E_AS_NE
testGet_SAME_VALUE
testGet_MUST_REPORT_UNDEFINED
testSet_CANT_SET_NW_NC
testSet_WO_SETTER
]
.
forEach
(
errorHasPropertyTests
)
;
[
testGetOwnPropertyDescriptor_INVALID_NOT_EXTENSIBLE
testGetOwnPropertyDescriptor_INVALID_C_AS_NC
testGetOwnPropertyDescriptor_INVALID_ENUM_DIFFERENT_CURRENT
.
bind
(
null
true
)
testGetOwnPropertyDescriptor_INVALID_ENUM_DIFFERENT_CURRENT
.
bind
(
null
false
)
testGetOwnPropertyDescriptor_INVALID_CURRENT_NC_DIFF_TYPE
.
bind
(
null
true
)
testGetOwnPropertyDescriptor_INVALID_CURRENT_NC_DIFF_TYPE
.
bind
(
null
false
)
testGetOwnPropertyDescriptor_INVALID_NW_AS_W
testGetOwnPropertyDescriptor_INVALID_DIFFERENT_VALUE
testGetOwnPropertyDescriptor_INVALID_SETTERS_DIFFERENT
testGetOwnPropertyDescriptor_INVALID_GETTERS_DIFFERENT
testDefineProperty_INVALID_NC_AS_C
testDefineProperty_INVALID_ENUM_DIFFERENT_CURRENT
.
bind
(
null
true
)
testDefineProperty_INVALID_ENUM_DIFFERENT_CURRENT
.
bind
(
null
false
)
testDefineProperty_INVALID_CURRENT_NC_DIFF_TYPE
.
bind
(
null
true
)
testDefineProperty_INVALID_CURRENT_NC_DIFF_TYPE
.
bind
(
null
false
)
testDefineProperty_INVALID_NW_AS_W
testDefineProperty_INVALID_DIFFERENT_VALUE
testDefineProperty_INVALID_SETTERS_DIFFERENT
testDefineProperty_INVALID_GETTERS_DIFFERENT
testDefineProperty_INVALID_C_AS_NC
]
.
forEach
(
errorHasPropertyTestsWithDetails
)
;
reportCompare
(
0
0
'
ok
'
)
;
