if
(
!
(
"
self
"
in
this
)
)
{
this
.
self
=
this
;
}
if
(
!
(
"
setTimeout
"
in
this
)
)
{
let
timeouts
=
[
]
;
let
now
=
0
;
let
next_id
=
1
;
function
enqueue
(
id
t
cb
)
{
if
(
typeof
cb
!
=
=
'
function
'
)
{
let
code
=
"
"
+
cb
;
cb
=
(
)
=
>
eval
(
code
)
;
}
t
+
=
now
;
timeouts
.
push
(
{
id
t
cb
}
)
;
timeouts
.
sort
(
(
a
b
)
=
>
a
.
t
-
b
.
t
)
;
if
(
timeouts
.
length
=
=
=
1
)
{
scheduleWork
(
)
;
}
}
function
scheduleWork
(
)
{
let
delay
=
10
;
function
handleTimeouts
(
)
{
if
(
-
-
delay
>
0
)
{
Promise
.
resolve
(
)
.
then
(
handleTimeouts
)
;
return
;
}
if
(
timeouts
.
length
>
0
)
{
let
{
t
cb
}
=
timeouts
.
shift
(
)
;
if
(
now
<
t
)
{
now
=
t
;
}
if
(
timeouts
.
length
>
0
)
{
scheduleWork
(
)
;
}
cb
(
)
;
}
}
Promise
.
resolve
(
)
.
then
(
handleTimeouts
)
;
}
this
.
setTimeout
=
function
(
cb
t
.
.
.
args
)
{
let
id
=
next_id
+
+
;
enqueue
(
id
t
(
)
=
>
cb
(
.
.
.
args
)
)
;
return
id
;
}
;
this
.
clearTimeout
=
function
(
id
)
{
timeouts
=
timeouts
.
filter
(
obj
=
>
obj
.
id
!
=
=
id
)
;
}
;
this
.
setInterval
=
function
(
cb
t
.
.
.
args
)
{
let
id
=
next_id
+
+
;
let
func
=
(
)
=
>
{
enqueue
(
id
t
func
)
;
cb
(
.
.
.
args
)
;
}
;
enqueue
(
id
t
func
)
;
return
id
;
}
;
this
.
clearInterval
=
this
.
clearTimeout
;
}
if
(
"
ignoreUnhandledRejections
"
in
this
)
{
ignoreUnhandledRejections
(
)
;
}
