const
locales
=
[
"
en
"
"
de
"
"
fr
"
"
es
"
"
ar
"
"
th
"
"
zh
"
"
ja
"
]
;
const
timeZone
=
"
UTC
"
;
let
date
=
new
Date
(
0
)
;
let
instant
=
date
.
toTemporalInstant
(
)
;
let
zonedDateTime
=
instant
.
toZonedDateTimeISO
(
timeZone
)
;
let
plainDateTime
=
zonedDateTime
.
toPlainDateTime
(
)
;
let
plainDate
=
zonedDateTime
.
toPlainDate
(
)
;
let
plainTime
=
zonedDateTime
.
toPlainTime
(
)
;
for
(
let
locale
of
locales
)
{
for
(
let
calendar
of
Intl
.
supportedValuesOf
(
"
calendar
"
)
)
{
let
calendarDate
=
plainDate
.
withCalendar
(
calendar
)
;
let
calendarYearMonth
=
calendarDate
.
toPlainYearMonth
(
)
;
let
calendarMonthDay
=
calendarDate
.
toPlainMonthDay
(
)
;
assertEq
(
instant
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
)
;
assertEq
(
zonedDateTime
.
toLocaleString
(
locale
{
calendar
}
)
date
.
toLocaleString
(
locale
{
timeZone
calendar
timeZoneName
:
"
short
"
}
)
)
;
assertEq
(
plainDateTime
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
)
;
assertEq
(
plainDate
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleDateString
(
locale
{
timeZone
calendar
}
)
)
;
assertEq
(
plainTime
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleTimeString
(
locale
{
timeZone
calendar
}
)
)
;
assertEq
(
calendarYearMonth
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleDateString
(
locale
{
timeZone
calendar
year
:
"
numeric
"
month
:
"
numeric
"
}
)
)
;
if
(
calendar
!
=
=
"
islamic
-
umalqura
"
)
{
assertEq
(
calendarMonthDay
.
toLocaleString
(
locale
{
timeZone
calendar
}
)
date
.
toLocaleDateString
(
locale
{
timeZone
calendar
month
:
"
numeric
"
day
:
"
numeric
"
}
)
)
;
}
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
