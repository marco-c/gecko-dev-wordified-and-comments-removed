let
method
=
Tuple
.
prototype
.
map
;
let
f
=
(
x
i
tup
)
=
>
x
+
1
;
assertEq
(
method
.
call
(
#
[
1
2
3
4
5
6
]
f
)
#
[
2
3
4
5
6
7
]
)
;
assertEq
(
method
.
call
(
Object
(
#
[
1
2
3
4
5
6
]
)
f
)
#
[
2
3
4
5
6
7
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
"
monkeys
"
f
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
let
tup
=
#
[
1
2
3
]
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
map
(
)
TypeError
"
missing
function
argument
to
Tuple
.
prototype
.
map
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
map
(
undefined
)
TypeError
"
missing
function
argument
to
Tuple
.
prototype
.
map
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
map
(
"
monkeys
"
)
TypeError
"
bad
function
argument
to
Tuple
.
prototype
.
map
"
)
;
var
f2
=
x
=
>
x
*
x
;
assertEq
(
tup
.
map
(
f2
)
#
[
1
4
9
]
)
;
f2
=
(
x
i
)
=
>
x
+
i
;
assertEq
(
tup
.
map
(
f2
)
#
[
1
3
5
]
)
;
var
f3
=
(
a
b
c
d
e
)
=
>
e
=
=
=
undefined
;
assertEq
(
tup
.
map
(
f3
)
#
[
true
true
true
]
)
;
var
f4
=
(
x
i
tup
)
=
>
(
tup
.
indexOf
(
x
+
1
)
*
i
*
x
)
;
assertEq
(
tup
.
map
(
f4
)
#
[
0
4
-
6
]
)
;
f1
=
function
(
x
i
tup
)
{
return
(
this
.
elements
.
indexOf
(
x
)
*
x
)
;
}
;
assertEq
(
#
[
1
2
3
4
5
]
.
map
(
f1
{
elements
:
[
2
4
]
}
)
#
[
-
1
0
-
3
4
-
5
]
)
;
Object
.
defineProperty
(
Tuple
.
prototype
"
length
"
{
get
(
)
{
return
0
}
}
)
assertEq
(
tup
.
map
(
f
)
#
[
2
3
4
]
)
;
assertEq
(
#
[
]
.
map
(
f
)
#
[
]
)
;
assertEq
(
#
[
1
]
.
map
(
f
)
#
[
2
]
)
;
assertEq
(
#
[
1
2
]
.
map
(
f
)
#
[
2
3
]
)
;
var
badFun
=
x
=
>
new
Object
(
x
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
map
(
badFun
)
TypeError
"
Tuples
cannot
contain
Objects
"
)
;
reportCompare
(
0
0
)
;
