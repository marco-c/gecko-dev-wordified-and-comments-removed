let
method
=
Tuple
.
prototype
.
flat
;
assertEq
(
method
.
call
(
#
[
1
#
[
2
]
3
]
)
#
[
1
2
3
]
)
;
assertEq
(
method
.
call
(
Object
(
#
[
1
#
[
2
]
3
]
)
)
#
[
1
2
3
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
"
monkeys
"
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
null
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
let
tup
=
#
[
1
2
#
[
3
#
[
4
5
]
6
]
#
[
5
6
]
7
]
;
let
tup2
=
#
[
1
2
#
[
3
#
[
4
#
[
"
a
"
"
b
"
]
5
]
6
]
#
[
5
#
[
6
#
[
7
8
#
[
9
10
]
]
]
]
7
]
;
assertEq
(
tup
.
flat
(
"
monkeys
"
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
{
}
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
+
0
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
-
0
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
'
2
'
)
tup
.
flat
(
2
)
)
;
assertEq
(
tup
.
flat
(
true
)
tup
.
flat
(
1
)
)
;
assertEq
(
tup
.
flat
(
false
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
null
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
NaN
)
tup
.
flat
(
0
)
)
;
assertEq
(
tup
.
flat
(
[
1
2
3
]
)
tup
.
flat
(
0
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
flat
(
Symbol
(
"
x
"
)
)
TypeError
"
can
'
t
convert
symbol
to
number
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
flat
(
Object
.
create
(
null
)
)
TypeError
"
can
'
t
convert
Object
to
number
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
flat
(
#
[
1
]
)
TypeError
"
can
'
t
convert
Tuple
to
number
"
)
;
assertEq
(
tup
.
flat
(
undefined
)
tup
.
flat
(
1
)
)
;
assertEq
(
tup
.
flat
(
)
tup
.
flat
(
1
)
)
;
assertEq
(
#
[
]
.
flat
(
)
#
[
]
)
;
assertEq
(
#
[
1
]
.
flat
(
)
#
[
1
]
)
;
assertEq
(
#
[
#
[
1
2
]
#
[
3
4
]
]
.
flat
(
)
#
[
1
2
3
4
]
)
;
assertEq
(
tup
.
flat
(
0
)
tup
)
;
assertEq
(
tup
.
flat
(
1
)
#
[
1
2
3
#
[
4
5
]
6
5
6
7
]
)
;
assertEq
(
tup
.
flat
(
2
)
#
[
1
2
3
4
5
6
5
6
7
]
)
;
assertEq
(
tup
.
flat
(
3
)
tup
.
flat
(
2
)
)
;
assertEq
(
tup2
.
flat
(
0
)
tup2
)
;
assertEq
(
tup2
.
flat
(
1
)
#
[
1
2
3
#
[
4
#
[
"
a
"
"
b
"
]
5
]
6
5
#
[
6
#
[
7
8
#
[
9
10
]
]
]
7
]
)
;
assertEq
(
tup2
.
flat
(
2
)
#
[
1
2
3
4
#
[
"
a
"
"
b
"
]
5
6
5
6
#
[
7
8
#
[
9
10
]
]
7
]
)
;
assertEq
(
tup2
.
flat
(
3
)
#
[
1
2
3
4
"
a
"
"
b
"
5
6
5
6
7
8
#
[
9
10
]
7
]
)
;
assertEq
(
tup2
.
flat
(
4
)
#
[
1
2
3
4
"
a
"
"
b
"
5
6
5
6
7
8
9
10
7
]
)
;
assertEq
(
tup2
.
flat
(
Infinity
)
tup2
.
flat
(
4
)
)
;
assertEq
(
tup2
.
flat
(
-
Infinity
)
tup2
.
flat
(
0
)
)
;
reportCompare
(
0
0
)
;
