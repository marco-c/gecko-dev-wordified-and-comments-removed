let
method
=
Tuple
.
prototype
.
with
;
assertEq
(
method
.
call
(
#
[
1
2
3
]
1
"
monkeys
"
)
#
[
1
"
monkeys
"
3
]
)
;
assertEq
(
method
.
call
(
Object
(
#
[
1
2
3
]
)
1
"
monkeys
"
)
#
[
1
"
monkeys
"
3
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
"
monkeys
"
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
true
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
false
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
var
t
=
#
[
1
]
;
t
.
constructor
=
null
;
var
result
=
t
.
with
(
0
0
)
;
assertEq
(
result
#
[
0
]
)
;
assertEq
(
Object
.
getPrototypeOf
(
result
)
Tuple
.
prototype
)
;
Object
.
defineProperty
(
Tuple
.
prototype
"
length
"
{
get
(
)
{
return
0
}
}
)
assertEq
(
#
[
1
2
3
4
5
]
.
with
(
1
5
)
#
[
1
5
3
4
5
]
)
;
var
tup
=
#
[
1
2
3
]
;
var
len
=
3
;
assertEq
(
tup
.
with
(
"
monkeys
"
2
)
tup
.
with
(
0
2
)
)
;
assertEq
(
tup
.
with
(
undefined
2
)
tup
.
with
(
0
2
)
)
;
assertEq
(
tup
.
with
(
undefined
)
tup
.
with
(
0
undefined
)
)
;
assertEq
(
tup
.
with
(
)
tup
.
with
(
0
undefined
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
-
5
"
monkeys
"
)
RangeError
"
index
out
of
range
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
Number
.
MAX_SAFE_INTEGER
"
monkeys
"
)
RangeError
"
index
out
of
range
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
len
+
5
"
monkeys
"
)
RangeError
"
index
out
of
range
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
1
[
]
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
0
new
Object
(
)
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
with
(
2
{
'
a
'
:
'
b
'
}
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertEq
(
tup
.
with
(
0
"
monkeys
"
)
#
[
"
monkeys
"
2
3
]
)
;
assertEq
(
tup
.
with
(
1
#
[
'
a
'
'
b
'
'
c
'
]
)
#
[
1
#
[
'
a
'
'
b
'
'
c
'
]
3
]
)
;
assertEq
(
tup
.
with
(
2
42
)
#
[
1
2
42
]
)
;
reportCompare
(
0
0
)
;
