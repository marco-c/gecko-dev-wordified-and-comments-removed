let
method
=
Tuple
.
prototype
.
concat
;
assertEq
(
method
.
call
(
#
[
1
2
3
4
5
6
]
#
[
1
]
#
[
2
3
]
)
#
[
1
2
3
4
5
6
1
2
3
]
)
;
assertEq
(
method
.
call
(
Object
(
#
[
1
2
3
4
5
6
]
)
#
[
1
]
#
[
2
3
]
)
method
.
call
(
#
[
1
2
3
4
5
6
]
#
[
1
]
#
[
2
3
]
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
"
monkeys
"
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
let
tup
=
#
[
1
2
3
]
;
assertEq
(
tup
.
concat
(
)
tup
)
;
assertEq
(
tup
.
concat
(
#
[
]
)
tup
)
;
assertEq
(
tup
.
concat
(
[
]
)
tup
)
;
assertEq
(
tup
.
concat
(
#
[
]
#
[
]
#
[
]
)
tup
)
;
assertEq
(
tup
.
concat
(
tup
)
#
[
1
2
3
1
2
3
]
)
;
assertEq
(
tup
.
concat
(
[
1
2
3
]
)
#
[
1
2
3
1
2
3
]
)
;
assertEq
(
tup
.
concat
(
tup
"
monkeys
"
)
#
[
1
2
3
1
2
3
"
monkeys
"
]
)
;
assertEq
(
tup
.
concat
(
[
1
2
3
]
"
monkeys
"
)
#
[
1
2
3
1
2
3
"
monkeys
"
]
)
;
assertEq
(
tup
.
concat
(
"
monkeys
"
tup
)
#
[
1
2
3
"
monkeys
"
1
2
3
]
)
;
assertEq
(
tup
.
concat
(
"
monkeys
"
[
1
2
3
]
)
#
[
1
2
3
"
monkeys
"
1
2
3
]
)
;
var
spreadableLengthOutOfRange
=
{
}
;
spreadableLengthOutOfRange
.
length
=
Number
.
MAX_SAFE_INTEGER
;
spreadableLengthOutOfRange
[
Symbol
.
isConcatSpreadable
]
=
true
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
concat
(
spreadableLengthOutOfRange
)
TypeError
'
Too
long
array
'
)
;
assertEq
(
tup
.
concat
(
[
42
17
5
12
]
)
#
[
1
2
3
42
17
5
12
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
concat
(
[
1
new
Object
(
)
2
]
)
TypeError
'
#
[
1
2
3
]
.
concat
(
[
1
new
Object
(
)
2
]
)
throws
a
TypeError
exception
'
)
;
assertEq
(
tup
.
concat
(
"
monkeys
"
)
#
[
1
2
3
"
monkeys
"
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
concat
(
new
Object
(
)
)
TypeError
'
#
[
1
2
3
]
.
concat
(
new
Object
(
)
)
throws
a
TypeError
exception
'
)
;
reportCompare
(
0
0
)
;
