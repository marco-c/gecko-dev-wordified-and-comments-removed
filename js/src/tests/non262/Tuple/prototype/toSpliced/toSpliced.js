let
method
=
Tuple
.
prototype
.
toSpliced
;
assertEq
(
method
.
call
(
#
[
1
2
3
4
5
6
]
2
3
)
#
[
1
2
6
]
)
;
assertEq
(
method
.
call
(
Object
(
#
[
1
2
3
4
5
6
]
)
2
3
)
#
[
1
2
6
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
"
monkeys
"
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
true
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
method
.
call
(
false
)
TypeError
"
value
of
TupleObject
must
be
a
Tuple
"
)
;
var
t
=
#
[
]
;
t
.
constructor
=
null
;
var
result
=
t
.
toSpliced
(
0
0
)
;
assertEq
(
result
#
[
]
)
;
assertEq
(
Object
.
getPrototypeOf
(
result
)
Tuple
.
prototype
)
;
Object
.
defineProperty
(
Tuple
.
prototype
"
length
"
{
get
(
)
{
return
0
}
}
)
assertEq
(
#
[
1
2
3
4
5
]
.
toSpliced
(
1
2
)
#
[
1
4
5
]
)
;
var
tup
=
#
[
1
2
3
]
;
var
len
=
3
;
assertEq
(
tup
.
toSpliced
(
"
monkeys
"
2
)
tup
.
toSpliced
(
0
2
)
)
;
assertEq
(
tup
.
toSpliced
(
undefined
2
)
tup
.
toSpliced
(
0
2
)
)
;
assertEq
(
tup
.
toSpliced
(
undefined
)
tup
.
toSpliced
(
0
len
)
)
;
assertEq
(
tup
.
toSpliced
(
)
tup
.
slice
(
0
)
)
;
var
relativeStart
=
-
1
;
var
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
tup
.
toSpliced
(
len
+
relativeStart
1
)
)
;
assertEq
(
result
#
[
1
2
]
)
;
relativeStart
=
-
4
;
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
tup
.
toSpliced
(
0
1
)
)
;
assertEq
(
result
#
[
2
3
]
)
;
relativeStart
=
-
3
;
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
tup
.
toSpliced
(
0
1
)
)
;
relativeStart
=
0
;
result
=
tup
.
toSpliced
(
relativeStart
2
)
;
assertEq
(
result
#
[
3
]
)
;
relativeStart
=
2
;
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
#
[
1
2
]
)
;
relativeStart
=
5
;
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
tup
.
toSpliced
(
len
1
)
)
;
assertEq
(
result
tup
)
;
relativeStart
=
len
;
result
=
tup
.
toSpliced
(
relativeStart
1
)
;
assertEq
(
result
tup
)
;
result
=
tup
.
toSpliced
(
)
;
assertEq
(
result
tup
.
toSpliced
(
0
0
)
)
;
assertEq
(
result
tup
)
;
result
=
tup
.
toSpliced
(
1
)
;
assertEq
(
result
tup
.
toSpliced
(
1
len
-
1
)
)
;
assertEq
(
result
#
[
1
]
)
;
assertEq
(
tup
.
toSpliced
(
1
"
monkeys
"
)
tup
.
toSpliced
(
1
0
)
)
;
assertEq
(
tup
.
toSpliced
(
1
undefined
)
tup
.
toSpliced
(
1
0
)
)
;
assertEq
(
tup
.
toSpliced
(
1
true
)
tup
.
toSpliced
(
1
1
)
)
;
result
=
tup
.
toSpliced
(
1
-
1
)
;
assertEq
(
result
tup
.
toSpliced
(
1
0
)
)
;
assertEq
(
result
tup
)
;
result
=
tup
.
toSpliced
(
3
-
1
)
;
assertEq
(
result
tup
.
toSpliced
(
3
0
)
)
;
assertEq
(
result
tup
)
;
assertEq
(
tup
.
toSpliced
(
1
0
)
tup
)
;
var
tup2
=
#
[
1
2
3
4
5
]
;
var
tup2_len
=
5
;
result
=
tup2
.
toSpliced
(
1
3
)
;
assertEq
(
result
#
[
1
5
]
)
;
var
actualStart
=
3
;
result
=
tup2
.
toSpliced
(
actualStart
4
)
;
assertEq
(
result
tup2
.
toSpliced
(
actualStart
tup2_len
-
actualStart
)
)
;
assertEq
(
result
#
[
1
2
3
]
)
;
assertEq
(
tup2
.
toSpliced
(
1
"
bunnies
"
"
monkeys
"
)
tup2
.
toSpliced
(
1
0
"
monkeys
"
)
)
;
assertEq
(
tup2
.
toSpliced
(
1
-
1
"
monkeys
"
)
tup2
.
toSpliced
(
1
0
"
monkeys
"
)
)
;
assertEq
(
tup2
.
toSpliced
(
tup2_len
-
1
"
monkeys
"
)
tup2
.
toSpliced
(
tup2_len
0
"
monkeys
"
)
)
;
assertEq
(
tup2
.
toSpliced
(
2
0
"
monkeys
"
)
#
[
1
2
"
monkeys
"
3
4
5
]
)
;
/
/
(
e
)
assertEq
(
tup2
.
toSpliced
(
1
3
"
monkeys
"
)
#
[
1
"
monkeys
"
5
]
)
;
/
/
(
f
)
assertEq
(
tup2
.
toSpliced
(
3
4
"
monkeys
"
)
#
[
1
2
3
"
monkeys
"
]
)
;
/
/
(
g
)
assertEq
(
tup2
.
toSpliced
(
1
"
monkeys
"
42
17
)
tup2
.
toSpliced
(
1
0
42
17
)
)
;
assertEq
(
tup2
.
toSpliced
(
1
-
1
42
17
)
tup2
.
toSpliced
(
1
0
42
17
)
)
;
assertEq
(
tup2
.
toSpliced
(
tup2_len
-
1
42
17
)
tup2
.
toSpliced
(
tup2_len
0
42
17
)
)
;
assertEq
(
tup2
.
toSpliced
(
2
0
42
17
)
#
[
1
2
42
17
3
4
5
]
)
;
/
/
(
e
)
assertEq
(
tup2
.
toSpliced
(
1
3
42
17
)
#
[
1
42
17
5
]
)
;
/
/
(
f
)
assertEq
(
tup2
.
toSpliced
(
3
4
42
17
)
#
[
1
2
3
42
17
]
)
;
/
/
(
g
)
var
tup
=
#
[
1
2
3
4
5
6
]
;
var
len
=
6
;
var
actualStart
;
var
actualDeleteCount
;
actualStart
=
0
;
actualDeleteCount
=
len
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
]
)
;
actualStart
=
0
;
actualDeleteCount
=
len
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
"
monkeys
"
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
a
"
"
b
"
"
c
"
"
d
"
)
#
[
"
a
"
"
b
"
"
c
"
"
d
"
]
)
;
actualDeleteCount
=
3
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
4
5
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
"
monkeys
"
4
5
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
42
43
44
45
)
#
[
42
43
44
45
4
5
6
]
)
;
actualStart
=
1
;
actualDeleteCount
=
len
-
1
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
1
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
1
"
monkeys
"
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
0
.
0
0
.
1
0
.
2
0
.
3
)
#
[
1
0
.
0
0
.
1
0
.
2
0
.
3
]
)
;
actualDeleteCount
=
1
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
1
3
4
5
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
1
"
monkeys
"
3
4
5
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
8
9
10
11
)
#
[
1
8
9
10
11
3
4
5
6
]
)
;
actualStart
=
4
;
actualDeleteCount
=
len
-
4
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
1
2
3
4
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
1
2
3
4
"
monkeys
"
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
0
-
1
-
2
-
3
)
#
[
1
2
3
4
0
-
1
-
2
-
3
]
)
;
actualDeleteCount
=
1
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
)
#
[
1
2
3
4
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
monkeys
"
)
#
[
1
2
3
4
"
monkeys
"
6
]
)
;
assertEq
(
tup
.
toSpliced
(
actualStart
actualDeleteCount
"
p
"
"
q
"
"
r
"
"
s
"
)
#
[
1
2
3
4
"
p
"
"
q
"
"
r
"
"
s
"
6
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
toSpliced
(
actualStart
actualDeleteCount
[
]
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
toSpliced
(
actualStart
actualDeleteCount
[
]
2
3
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
toSpliced
(
actualStart
actualDeleteCount
2
new
Object
(
)
3
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
tup
.
toSpliced
(
actualStart
actualDeleteCount
2
3
{
"
a
"
:
"
b
"
}
)
TypeError
"
Tuple
can
'
t
contain
Object
"
)
;
reportCompare
(
0
0
)
;
