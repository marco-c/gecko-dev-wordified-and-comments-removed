var
a
=
5
;
var
b
=
10
;
var
arr
=
[
1
2
3
4
5
]
;
var
badArr
=
[
1
new
Object
(
)
3
]
;
var
t
=
#
[
a
<
b
?
"
x
"
:
"
y
"
]
;
assertEq
(
t
#
[
"
x
"
]
)
;
t
=
#
[
0
in
arr
42
in
arr
1
in
arr
100
in
arr
]
;
assertEq
(
t
#
[
true
false
true
false
]
)
;
t
=
#
[
a
=
1
b
=
b
*
3
]
;
assertEq
(
t
#
[
1
30
]
)
;
assertEq
(
a
1
)
;
assertEq
(
b
30
)
;
let
bBefore
=
b
;
let
tBefore
=
t
;
function
f
(
)
{
throw
new
RangeError
(
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
a
=
2
f
(
)
b
=
3
]
RangeError
"
t
=
#
[
a
=
2
f
(
)
b
=
3
]
throws
"
)
;
assertEq
(
a
2
)
;
assertEq
(
b
bBefore
)
;
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
unbound
]
ReferenceError
"
t
=
#
[
unbound
]
throws
"
)
;
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
new
Object
(
)
]
TypeError
"
Object
in
Tuple
"
)
;
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
{
}
]
TypeError
"
Object
in
Tuple
"
)
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
new
String
(
"
s
"
)
]
TypeError
"
Object
in
Tuple
"
)
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
[
1
2
3
]
]
TypeError
"
Object
in
Tuple
"
)
assertEq
(
t
tBefore
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
function
(
x
)
{
return
x
;
}
]
TypeError
"
Object
in
Tuple
"
)
assertEq
(
t
tBefore
)
;
assertEq
(
#
[
.
.
.
arr
]
#
[
1
2
3
4
5
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
#
[
.
.
.
badArr
]
TypeError
"
Object
in
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
1
a
=
5
b
=
new
Object
(
)
5
]
TypeError
"
Object
in
Tuple
"
)
;
assertEq
(
t
tBefore
)
;
assertEq
(
#
[
"
a
"
"
b
"
.
.
.
arr
"
c
"
]
#
[
"
a
"
"
b
"
1
2
3
4
5
"
c
"
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
"
a
"
"
b
"
.
.
.
badArr
"
c
"
]
TypeError
"
Object
in
Tuple
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
.
.
.
unbound
]
ReferenceError
"
t
=
#
[
.
.
.
unbound
throws
]
"
)
;
assertEq
(
t
tBefore
)
;
var
notIterable
=
Symbol
(
'
c
'
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
=
#
[
.
.
.
notIterable
]
TypeError
"
t
=
#
[
.
.
.
notIterable
]
is
type
error
"
)
;
reportCompare
(
0
0
)
;
