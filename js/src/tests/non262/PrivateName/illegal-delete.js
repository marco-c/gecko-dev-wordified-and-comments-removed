class
A
{
#
x
=
{
a
:
1
}
;
b
=
null
;
es
(
s
)
{
eval
(
s
)
;
}
}
var
a
=
new
A
;
a
.
b
=
new
A
;
assertThrowsInstanceOf
(
(
)
=
>
a
.
es
(
'
delete
this
.
#
x
'
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
a
.
es
(
'
delete
(
this
.
#
x
)
'
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
a
.
es
(
'
delete
this
?
.
#
x
'
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
a
.
es
(
'
delete
this
?
.
b
.
#
x
'
)
SyntaxError
)
;
a
.
es
(
'
delete
(
0
this
.
#
x
.
a
)
'
)
a
.
es
(
'
delete
this
?
.
b
.
#
x
.
a
'
)
function
eval_and_report
(
str
)
{
var
classTest
=
class
B
{
#
x
=
{
a
:
1
}
;
b
=
null
;
test
(
)
{
{
str
}
;
}
}
var
b
=
new
B
;
b
.
b
=
new
B
;
b
.
test
(
)
;
;
var
str
=
function
f
(
run
)
{
if
(
run
)
{
{
classTest
}
}
}
f
(
run
)
;
var
throws
=
[
]
;
var
g
=
newGlobal
(
)
;
g
.
run
=
false
;
try
{
evaluate
(
classTest
{
global
:
g
}
)
;
}
catch
(
e
)
{
throws
.
push
(
e
)
;
}
try
{
evaluate
(
str
{
global
:
g
}
)
;
}
catch
(
e
)
{
throws
.
push
(
e
)
;
}
return
throws
;
}
function
assertSyntaxError
(
str
)
{
var
exceptions
=
eval_and_report
(
str
)
;
assertEq
(
exceptions
.
length
2
)
;
for
(
var
e
of
exceptions
)
{
assertEq
(
/
SyntaxError
/
.
test
(
e
.
name
)
true
)
;
}
}
function
assertNoSyntaxError
(
str
)
{
var
exceptions
=
eval_and_report
(
str
)
;
assertEq
(
exceptions
.
length
0
)
;
}
assertSyntaxError
(
'
delete
this
.
#
x
'
)
;
assertSyntaxError
(
'
delete
(
this
.
#
x
)
'
)
;
assertSyntaxError
(
'
delete
this
?
.
#
x
'
)
;
assertSyntaxError
(
'
delete
this
?
.
b
.
#
x
'
)
;
assertNoSyntaxError
(
'
delete
(
0
this
.
#
x
.
a
)
'
)
assertNoSyntaxError
(
'
delete
this
?
.
b
.
#
x
.
a
'
)
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
)
;
