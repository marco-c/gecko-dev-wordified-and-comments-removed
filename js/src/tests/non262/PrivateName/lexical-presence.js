class
A
{
#
x
;
}
;
function
assertThrowsSyntaxError
(
str
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
str
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
(
1
eval
)
(
str
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
Function
(
str
)
SyntaxError
)
;
}
assertThrowsSyntaxError
(
class
B
{
g
(
)
{
return
this
.
#
x
;
}
}
;
)
;
assertThrowsSyntaxError
(
with
(
new
class
A
{
#
x
;
}
)
{
class
B
{
#
y
;
constructor
(
)
{
return
this
.
#
x
;
}
}
}
)
;
with
(
new
class
{
#
x
=
12
;
}
)
{
assertEq
(
'
#
x
'
in
this
false
)
;
}
function
assertNonExisting
(
fetchCode
)
{
source
=
var
X
=
class
{
b
(
)
{
{
fetchCode
}
}
}
var
a
=
new
X
;
a
.
b
(
)
assertThrowsInstanceOf
(
(
)
=
>
eval
(
source
)
SyntaxError
)
;
}
assertNonExisting
(
return
eval
(
"
this
.
#
x
"
)
"
)
;
assertNonExisting
(
return
(
1
eval
)
(
"
this
.
#
x
"
)
)
;
assertNonExisting
(
var
f
=
Function
(
"
this
.
#
x
"
)
;
return
f
(
)
;
)
;
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
)
;
