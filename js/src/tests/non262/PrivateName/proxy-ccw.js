class
Base
{
constructor
(
o
)
{
return
o
;
}
}
class
A
extends
Base
{
x1
=
12
;
#
x
=
10
;
static
gx
(
o
)
{
return
o
.
#
x
;
}
static
sx
(
o
x
)
{
o
.
#
x
=
x
;
}
static
hasx
(
o
)
{
try
{
o
.
#
x
;
return
true
;
}
catch
{
return
false
;
}
}
}
var
g
=
newGlobal
(
{
newCompartment
:
true
}
)
;
g
.
A
=
A
;
var
cross_compartment_target
=
g
.
eval
(
'
this
.
x
=
{
}
;
this
.
x
'
)
;
new
A
(
cross_compartment_target
)
;
assertEq
(
A
.
hasx
(
cross_compartment_target
)
true
)
;
assertEq
(
A
.
gx
(
cross_compartment_target
)
10
)
;
var
o
=
{
test
:
12
}
;
A
.
sx
(
cross_compartment_target
o
)
;
assertEq
(
A
.
gx
(
cross_compartment_target
)
o
)
;
assertEq
(
g
.
eval
(
'
this
.
A
.
gx
(
this
.
x
)
'
)
o
)
;
var
y
=
g
.
eval
(
'
this
.
y
=
{
test
:
13
}
;
this
.
A
.
sx
(
this
.
x
this
.
y
)
;
this
.
y
'
)
;
assertEq
(
g
.
eval
(
'
this
.
A
.
gx
(
this
.
x
)
'
)
y
)
;
assertEq
(
A
.
gx
(
cross_compartment_target
)
y
)
;
if
(
typeof
nukeCCW
=
=
=
'
function
'
)
{
nukeCCW
(
cross_compartment_target
)
;
var
threw
=
true
;
try
{
A
.
gx
(
cross_compartment_target
)
;
threw
=
false
;
}
catch
(
e
)
{
}
assertEq
(
threw
true
)
;
}
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
)
;
