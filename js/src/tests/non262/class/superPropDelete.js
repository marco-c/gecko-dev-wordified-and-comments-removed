class
base
{
constructor
(
)
{
}
}
class
derived
extends
base
{
constructor
(
)
{
super
(
)
;
}
testDeleteProp
(
)
{
delete
super
.
prop
;
}
testDeleteElem
(
)
{
let
sideEffect
=
0
;
assertThrowsInstanceOf
(
(
)
=
>
delete
super
[
sideEffect
=
1
]
ReferenceError
)
;
assertEq
(
sideEffect
1
)
;
}
testDeleteElemPropValFirst
(
)
{
delete
super
[
Object
.
setPrototypeOf
(
derived
.
prototype
null
)
]
;
}
}
var
d
=
new
derived
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
d
.
testDeleteProp
(
)
ReferenceError
)
;
d
.
testDeleteElem
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
d
.
testDeleteElemPropValFirst
(
)
TypeError
)
;
var
thing1
=
{
go
(
)
{
delete
super
.
toString
;
}
}
;
let
saved
=
Object
.
prototype
.
toString
;
assertThrowsInstanceOf
(
(
)
=
>
thing1
.
go
(
)
ReferenceError
)
;
assertEq
(
Object
.
prototype
.
toString
saved
)
;
var
thing2
=
{
go
(
)
{
delete
super
.
prop
;
}
}
;
Object
.
setPrototypeOf
(
thing2
new
Proxy
(
{
}
{
deleteProperty
(
x
)
{
throw
"
FAIL
"
;
}
}
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
thing2
.
go
(
)
ReferenceError
)
;
class
derivedTestDeleteProp
extends
base
{
constructor
(
)
{
Object
.
setPrototypeOf
(
derivedTestDeleteProp
.
prototype
null
)
;
assertThrowsInstanceOf
(
(
)
=
>
delete
super
.
prop
ReferenceError
)
;
super
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
delete
super
.
prop
ReferenceError
)
;
return
{
}
;
}
}
new
derivedTestDeleteProp
(
)
;
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
"
OK
"
)
;
