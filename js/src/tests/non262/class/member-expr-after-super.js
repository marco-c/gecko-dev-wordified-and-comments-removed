class
Base
{
get
test
(
)
{
return
"
ok
"
;
}
}
class
SuperThenProperty
extends
Base
{
constructor
(
)
{
var
result
=
super
(
)
.
test
;
return
{
result
}
;
}
}
assertEq
(
new
SuperThenProperty
(
)
.
result
"
ok
"
)
;
class
SuperThenMember
extends
Base
{
constructor
(
)
{
var
result
=
super
(
)
[
"
tes
"
+
String
.
fromCodePoint
(
"
t
"
.
codePointAt
(
0
)
)
]
;
return
{
result
}
;
}
}
assertEq
(
new
SuperThenMember
(
)
.
result
"
ok
"
)
;
class
SuperThenCall
extends
Function
{
constructor
(
)
{
var
result
=
super
(
"
o
k
"
"
return
o
+
k
;
"
)
(
"
o
"
"
k
"
)
;
return
{
result
}
;
}
}
assertEq
(
new
SuperThenCall
(
)
.
result
"
ok
"
)
;
class
SuperThenTemplateCall
extends
Function
{
constructor
(
)
{
var
result
=
super
(
"
cooked
"
"
return
cooked
[
0
]
[
0
]
+
cooked
.
raw
[
0
]
[
1
]
;
"
)
ok
;
return
{
result
}
;
}
}
assertEq
(
new
SuperThenTemplateCall
(
)
.
result
"
ok
"
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
