class
a
{
constructor
(
)
{
}
}
let
b
=
class
{
constructor
(
)
{
}
}
;
for
(
let
test
of
[
a
b
]
)
{
var
protoDesc
=
Object
.
getOwnPropertyDescriptor
(
test
"
prototype
"
)
;
assertEq
(
protoDesc
.
writable
false
)
;
assertEq
(
protoDesc
.
configurable
false
)
;
assertEq
(
protoDesc
.
enumerable
false
)
;
var
prototype
=
protoDesc
.
value
;
assertEq
(
typeof
prototype
"
object
"
)
;
assertEq
(
Object
.
getPrototypeOf
(
prototype
)
Object
.
prototype
)
;
assertEq
(
Object
.
isExtensible
(
prototype
)
true
)
;
var
desiredPrototype
=
{
}
;
Object
.
defineProperty
(
desiredPrototype
"
constructor
"
{
writable
:
true
configurable
:
true
enumerable
:
false
value
:
test
}
)
;
assertDeepEq
(
prototype
desiredPrototype
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
eval
(
class
a
{
constructor
(
)
{
}
;
static
[
"
prototype
"
]
(
)
{
}
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
class
a
{
constructor
(
)
{
}
;
static
get
[
"
prototype
"
]
(
)
{
}
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
class
a
{
constructor
(
)
{
}
;
static
set
[
"
prototype
"
]
(
x
)
{
}
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
(
class
a
{
constructor
(
)
{
}
;
static
[
"
prototype
"
]
(
)
{
}
}
)
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
(
class
a
{
constructor
(
)
{
}
;
static
get
[
"
prototype
"
]
(
)
{
}
}
)
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
(
class
a
{
constructor
(
)
{
}
;
static
set
[
"
prototype
"
]
(
x
)
{
}
}
)
)
TypeError
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
OK
"
)
;
