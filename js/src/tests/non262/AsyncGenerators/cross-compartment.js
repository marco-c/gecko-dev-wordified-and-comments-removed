var
g
=
newGlobal
(
)
;
g
.
mainGlobal
=
this
;
if
(
typeof
isSameCompartment
!
=
=
"
function
"
)
{
var
isSameCompartment
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
isSameCompartment
;
}
var
next
=
async
function
*
(
)
{
}
.
prototype
.
next
;
var
f
=
g
.
eval
(
(
async
function
*
(
)
{
var
x
=
yield
{
message
:
"
yield
"
}
;
/
/
Input
completion
values
are
correctly
wrapped
into
|
f
|
'
s
compartment
.
assertEq
(
isSameCompartment
(
x
mainGlobal
)
true
)
;
assertEq
(
x
.
message
"
continue
"
)
;
return
{
message
:
"
return
"
}
;
}
)
)
;
var
it
=
f
(
)
;
assertEq
(
isSameCompartment
(
it
f
)
true
)
;
var
p1
=
next
.
call
(
it
{
message
:
"
initial
yield
"
}
)
;
assertEq
(
isSameCompartment
(
p1
f
)
true
)
;
assertEq
(
p1
instanceof
Promise
|
|
p1
instanceof
g
.
Promise
true
)
;
p1
.
then
(
v
=
>
{
assertEq
(
isSameCompartment
(
v
f
)
true
)
;
assertEq
(
v
.
done
false
)
;
assertEq
(
isSameCompartment
(
v
.
value
f
)
true
)
;
assertEq
(
v
.
value
.
message
"
yield
"
)
;
}
)
;
var
p2
=
next
.
call
(
it
{
message
:
"
continue
"
}
)
;
assertEq
(
isSameCompartment
(
p2
f
)
true
)
;
assertEq
(
p2
instanceof
Promise
|
|
p2
instanceof
g
.
Promise
true
)
;
p2
.
then
(
v
=
>
{
assertEq
(
isSameCompartment
(
v
f
)
true
)
;
assertEq
(
v
.
done
true
)
;
assertEq
(
isSameCompartment
(
v
.
value
f
)
true
)
;
assertEq
(
v
.
value
.
message
"
return
"
)
;
}
)
;
var
p3
=
next
.
call
(
it
{
message
:
"
already
finished
"
}
)
;
assertEq
(
isSameCompartment
(
p3
f
)
true
)
;
assertEq
(
p3
instanceof
Promise
|
|
p3
instanceof
g
.
Promise
true
)
;
p3
.
then
(
v
=
>
{
assertEq
(
isSameCompartment
(
v
f
)
true
)
;
assertEq
(
v
.
done
true
)
;
assertEq
(
v
.
value
undefined
)
;
}
)
;
var
p4
=
next
.
call
(
{
}
{
message
:
"
bad
|
this
|
argument
"
}
)
;
assertEq
(
isSameCompartment
(
p4
next
)
true
)
;
assertEq
(
p4
instanceof
Promise
true
)
;
p4
.
then
(
(
)
=
>
{
throw
new
Error
(
"
expected
a
TypeError
"
)
;
}
e
=
>
{
assertEq
(
e
instanceof
TypeError
true
)
;
}
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
