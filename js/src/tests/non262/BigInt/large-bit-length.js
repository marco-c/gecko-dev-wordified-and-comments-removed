function
test
(
thunk
result
)
{
let
val
err
;
try
{
val
=
thunk
(
)
;
}
catch
(
e
)
{
err
=
e
;
}
if
(
err
)
{
assertEq
(
err
instanceof
RangeError
true
)
;
}
else
{
assertEq
(
val
result
)
;
}
}
const
UINT32_MAX
=
2
*
*
32
-
1
;
for
(
let
bits
of
[
UINT32_MAX
-
1
UINT32_MAX
UINT32_MAX
+
1
Number
.
MAX_SAFE_INTEGER
]
)
{
test
(
(
)
=
>
BigInt
.
asIntN
(
bits
1n
)
1n
)
;
test
(
(
)
=
>
BigInt
.
asIntN
(
bits
0n
)
0n
)
;
test
(
(
)
=
>
BigInt
.
asIntN
(
bits
-
1n
)
-
1n
)
;
test
(
(
)
=
>
BigInt
.
asUintN
(
bits
1n
)
1n
)
;
test
(
(
)
=
>
BigInt
.
asUintN
(
bits
0n
)
0n
)
;
}
reportCompare
(
true
true
)
;
