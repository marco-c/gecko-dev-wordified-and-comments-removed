class
TestIterator
extends
Iterator
{
next
(
)
{
return
{
done
:
false
value
:
0
}
;
}
closed
=
false
;
return
(
)
{
this
.
closed
=
true
;
return
{
done
:
true
}
;
}
}
class
TestError
extends
Error
{
}
class
InnerIterator
extends
Iterator
{
next
(
)
{
throw
new
TestError
(
)
;
}
}
const
iter
=
new
TestIterator
(
)
;
const
mapped
=
iter
.
flatMap
(
x
=
>
new
InnerIterator
(
)
)
;
assertEq
(
iter
.
closed
false
)
;
assertThrowsInstanceOf
(
(
)
=
>
mapped
.
next
(
)
TestError
)
;
assertEq
(
iter
.
closed
true
)
;
if
(
typeof
reportCompare
=
=
'
function
'
)
reportCompare
(
0
0
)
;
