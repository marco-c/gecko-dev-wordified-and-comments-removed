for
(
var
flag
of
[
"
"
"
y
"
]
)
{
var
regExp
=
new
RegExp
(
"
a
"
flag
)
;
regExp
.
lastIndex
=
{
valueOf
(
)
{
regExp
.
compile
(
"
b
"
)
;
return
0
;
}
}
;
var
result
=
regExp
[
Symbol
.
replace
]
(
"
b
"
"
pass
"
)
;
assertEq
(
result
"
pass
"
)
;
}
var
regExp
=
new
RegExp
(
"
a
"
"
"
)
;
regExp
.
lastIndex
=
{
valueOf
(
)
{
regExp
.
compile
(
"
a
"
"
g
"
)
;
return
0
;
}
}
;
regExp
[
Symbol
.
replace
]
(
"
a
"
"
"
)
;
assertEq
(
regExp
.
lastIndex
1
)
;
var
regExp
=
new
RegExp
(
"
a
"
"
y
"
)
;
regExp
.
lastIndex
=
{
valueOf
(
)
{
regExp
.
compile
(
"
a
"
"
"
)
;
regExp
.
lastIndex
=
9000
;
return
0
;
}
}
;
regExp
[
Symbol
.
replace
]
(
"
a
"
"
"
)
;
assertEq
(
regExp
.
lastIndex
9000
)
;
var
regExp
=
new
RegExp
(
"
a
"
"
y
"
)
;
regExp
.
lastIndex
=
{
valueOf
(
)
{
regExp
.
compile
(
"
b
"
"
"
)
;
regExp
.
lastIndex
=
9001
;
return
0
;
}
}
;
regExp
[
Symbol
.
replace
]
(
"
a
"
"
"
)
;
assertEq
(
regExp
.
lastIndex
9001
)
;
var
regExp
=
new
RegExp
(
"
a
"
"
y
"
)
;
regExp
.
lastIndex
=
{
valueOf
(
)
{
regExp
.
compile
(
"
b
"
"
"
)
;
regExp
.
lastIndex
=
9002
;
return
10000
;
}
}
;
regExp
[
Symbol
.
replace
]
(
"
a
"
"
"
)
;
assertEq
(
regExp
.
lastIndex
9002
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
