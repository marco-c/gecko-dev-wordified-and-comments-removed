var
g1
=
newGlobal
(
)
;
var
g1Fun
=
g1
.
eval
(
"
function
Fun
(
)
{
}
;
Fun
"
)
;
var
bound1
=
Function
.
prototype
.
bind
.
call
(
g1Fun
)
;
assertEq
(
Object
.
getPrototypeOf
(
new
bound1
(
)
)
g1
.
Fun
.
prototype
)
;
var
proxy1
=
new
Proxy
(
g1Fun
{
get
:
function
(
)
{
}
}
)
;
assertEq
(
Object
.
getPrototypeOf
(
new
proxy1
(
)
)
g1
.
Object
.
prototype
)
;
var
proxy2
=
new
Proxy
(
bound1
{
get
:
function
(
)
{
}
}
)
;
assertEq
(
Object
.
getPrototypeOf
(
new
proxy2
(
)
)
g1
.
Object
.
prototype
)
;
var
r1
=
Proxy
.
revocable
(
g1Fun
{
get
:
function
(
t
name
)
{
assertEq
(
name
"
prototype
"
)
;
r1
.
revoke
(
)
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
r1
.
proxy
(
)
g1
.
TypeError
)
;
var
bound2
=
Function
.
prototype
.
bind
.
call
(
proxy2
)
;
assertEq
(
Object
.
getPrototypeOf
(
new
bound2
(
)
)
g1
.
Object
.
prototype
)
;
var
r2
=
Proxy
.
revocable
(
g1Fun
{
get
:
function
(
t
name
)
{
assertEq
(
name
"
prototype
"
)
;
r2
.
revoke
(
)
;
}
}
)
;
var
g2
=
newGlobal
(
)
;
var
proxy3
=
new
g2
.
Proxy
(
r2
.
proxy
{
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
proxy3
(
)
g1
.
TypeError
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
