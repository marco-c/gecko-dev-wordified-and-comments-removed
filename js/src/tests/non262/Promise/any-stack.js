function
toMessage
(
stack
)
{
return
[
stack
:
{
stack
.
replace
(
/
\
n
/
g
"
\
\
n
"
)
}
]
;
}
{
let
p
=
Promise
.
any
(
[
]
)
;
p
.
then
(
v
=
>
{
reportCompare
(
0
1
"
expected
error
"
)
;
}
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
var
{
stack
}
=
e
;
assertEq
(
/
^
.
+
any
-
stack
.
js
:
12
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
}
)
;
}
function
testNoJobQueue
(
)
{
let
p
=
Promise
.
any
(
[
]
)
;
p
.
then
(
v
=
>
{
reportCompare
(
0
1
"
expected
error
"
)
;
}
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
var
{
stack
}
=
e
;
assertEq
(
/
^
testNoJobQueue
.
+
any
-
stack
.
js
:
26
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
}
)
;
}
testNoJobQueue
(
)
;
{
let
rejected
=
Promise
.
reject
(
0
)
;
let
p
=
Promise
.
any
(
[
rejected
]
)
;
p
.
then
(
v
=
>
{
reportCompare
(
0
1
"
expected
error
"
)
;
}
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
var
{
stack
}
=
e
;
assertEq
(
/
^
Promise
.
any
\
*
.
+
any
-
stack
.
js
:
42
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
}
)
;
}
function
testFromJobQueue
(
)
{
let
rejected
=
Promise
.
reject
(
0
)
;
let
p
=
Promise
.
any
(
[
rejected
]
)
;
p
.
then
(
v
=
>
{
reportCompare
(
0
1
"
expected
error
"
)
;
}
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
var
{
stack
}
=
e
;
assertEq
(
/
^
Promise
.
any
\
*
testFromJobQueue
.
+
any
-
stack
.
js
:
57
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
}
)
;
}
testFromJobQueue
(
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
