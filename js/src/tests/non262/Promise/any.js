function
expectedError
(
)
{
reportCompare
(
true
false
"
expected
error
"
)
;
}
Promise
.
any
(
[
]
)
.
then
(
expectedError
e
=
>
{
assertEq
(
e
instanceof
AggregateError
true
)
;
assertEq
(
e
.
errors
.
length
0
)
;
}
)
;
Promise
.
any
(
[
Promise
.
resolve
(
0
)
]
)
.
then
(
v
=
>
{
assertEq
(
v
0
)
;
}
)
;
Promise
.
any
(
[
Promise
.
reject
(
1
)
]
)
.
then
(
expectedError
e
=
>
{
assertEq
(
e
instanceof
AggregateError
true
)
;
assertEq
(
e
.
errors
.
length
1
)
;
assertEq
(
e
.
errors
[
0
]
1
)
;
}
)
;
Promise
.
any
(
[
Promise
.
resolve
(
1
)
Promise
.
resolve
(
2
)
]
)
.
then
(
v
=
>
{
assertEq
(
v
1
)
;
}
)
;
Promise
.
any
(
[
Promise
.
resolve
(
3
)
Promise
.
reject
(
4
)
]
)
.
then
(
v
=
>
{
assertEq
(
v
3
)
;
}
)
;
Promise
.
any
(
[
Promise
.
reject
(
5
)
Promise
.
resolve
(
6
)
]
)
.
then
(
v
=
>
{
assertEq
(
v
6
)
;
}
)
;
Promise
.
any
(
[
Promise
.
reject
(
7
)
Promise
.
reject
(
8
)
]
)
.
then
(
expectedError
e
=
>
{
assertEq
(
e
instanceof
AggregateError
true
)
;
assertEq
(
e
.
errors
.
length
2
)
;
assertEq
(
e
.
errors
[
0
]
7
)
;
assertEq
(
e
.
errors
[
1
]
8
)
;
}
)
;
let
g
=
newGlobal
(
)
;
if
(
typeof
isSameCompartment
!
=
=
"
function
"
)
{
var
isSameCompartment
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
isSameCompartment
;
}
Promise
.
any
.
call
(
g
.
Promise
[
]
)
.
then
(
expectedError
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
assertEq
(
isSameCompartment
(
e
g
)
true
)
;
assertEq
(
isSameCompartment
(
e
.
errors
g
)
true
)
;
assertEq
(
e
.
errors
.
length
0
)
;
}
)
;
Promise
.
any
.
call
(
g
.
Promise
[
Promise
.
reject
(
"
err
"
)
]
)
.
then
(
expectedError
e
=
>
{
assertEq
(
e
.
name
"
AggregateError
"
)
;
assertEq
(
isSameCompartment
(
e
g
)
true
)
;
assertEq
(
isSameCompartment
(
e
.
errors
g
)
true
)
;
assertEq
(
e
.
errors
.
length
1
)
;
assertEq
(
e
.
errors
[
0
]
"
err
"
)
;
}
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
