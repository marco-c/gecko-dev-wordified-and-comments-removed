function
f
(
)
{
}
var
fn
=
f
;
for
(
var
i
=
0
;
i
<
100000
;
+
+
i
)
{
fn
=
fn
.
bind
(
)
;
Object
.
defineProperty
(
fn
Symbol
.
hasInstance
{
value
:
undefined
writable
:
true
enumerable
:
true
writable
:
true
}
)
;
Object
.
defineProperty
(
fn
"
name
"
{
value
:
"
"
writable
:
true
enumerable
:
true
writable
:
true
}
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
(
{
}
)
instanceof
fn
Error
"
detect
runaway
recursion
delegating
instanceof
to
bound
function
target
"
)
;
