if
(
typeof
fdlibm
=
=
=
"
undefined
"
)
{
var
fdlibm
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
fdlibm
;
}
if
(
typeof
getBuildConfiguration
=
=
=
"
undefined
"
)
{
var
getBuildConfiguration
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
getBuildConfiguration
;
}
const
f64
=
new
Float64Array
(
1
)
;
const
ui64
=
new
BigUint64Array
(
f64
.
buffer
)
;
function
toBits
(
n
)
{
f64
[
0
]
=
n
;
return
ui64
[
0
]
;
}
function
errorInULP
(
actual
expected
)
{
if
(
Object
.
is
(
actual
expected
)
)
{
return
0
;
}
let
x
=
toBits
(
actual
)
;
let
y
=
toBits
(
expected
)
;
return
x
<
=
y
?
Number
(
y
-
x
)
:
Number
(
x
-
y
)
;
}
const
testCases
=
[
[
0
.
99998738156596089776684266325901262462139129638671875
38583256
]
[
-
0
.
99843469603485224261874009243911132216453552246093750
326215
]
[
0
.
00003722856305626354357250426541092735988058848306537
-
33
]
[
-
0
.
99996909838479330900895547529216855764389038085937500
17078527
]
[
0
.
99992690642006631929206150743993930518627166748046875
-
6725291
]
[
-
0
.
99879181217764612110698863034485839307308197021484375
485128
]
[
-
1
.
00560838484317760510577954846667125821113586425781250
92252
]
[
0
.
99999532655875444930870798998512327671051025390625000
93511912
]
[
-
0
.
99989751779212987514711130643263459205627441406250000
-
2864087
]
[
-
239
.
35307289280868303649185691028833389282226562500000000
-
90
]
[
0
.
96128212369452570307259975379565730690956115722656250
-
9670
]
[
0
.
99996078564218904283222855156054720282554626464843750
10583765
]
[
-
953
.
14032530394126752071315422654151916503906250000000000
22
]
[
0
.
99857985216514444370972114484175108373165130615234375
335918
]
[
-
1
.
20521595553711002857255607523256912827491760253906250
-
2760
]
[
-
1
.
19074911947068473594413262617308646440505981445312500
3884
]
[
-
0
.
99999908129426284819629699995857663452625274658203125
-
172780371
]
[
-
0
.
00000000000000000000000000007930552628950037082519209
8
]
[
-
0
.
99998583604065760521706351937609724700450897216796875
-
5861784
]
[
0
.
99989915564587761309667257592082023620605468750000000
5468367
]
[
0
.
99977805581863743444870351595454849302768707275390625
-
130493
]
[
29
.
19821057723854806909002945758402347564697265625000000
-
20
]
[
0
.
99985373283040668290766461723251268267631530761718750
2345687
]
[
-
0
.
88383265987178571965188211834174580872058868408203125
-
841
]
[
0
.
99999589815682188298495702838408760726451873779296875
72449292
]
[
345736476
.
13618659973144531250000000000000000000000000000000000
-
16
]
[
-
0
.
99999307321818442506611290809814818203449249267578125
-
55045397
]
[
1419676
.
56599932140670716762542724609375000000000000000000000
25
]
[
0
.
95797249286536323431562323094112798571586608886718750
-
11483
]
[
0
.
99998135132609855535434917328529991209506988525390625
5682278
]
[
-
1
.
02020595459010832151136582979233935475349426269531250
-
1668
]
[
0
.
97281701550260646360612781791132874786853790283203125
13717
]
[
-
0
.
88724290003841266294415390802896581590175628662109375
-
3437
]
[
-
0
.
99998630320599690701754980182158760726451873779296875
-
11251995
]
[
-
0
.
99995743703658013235013868325040675699710845947265625
13995099
]
[
0
.
99991090354494038816568490801728330552577972412109375
7116340
]
[
0
.
00000022955540324908999561342678487341206761129797087
27
]
[
-
1
.
00000041289256280663266807096078991889953613281250000
-
365287834
]
[
-
1
.
38949508997780957209045027411775663495063781738281250
1996
]
[
0
.
99999867528282249118376512342365458607673645019531250
164253172
]
[
1
.
00356688770562074708436739456374198198318481445312500
-
141698
]
[
368710687472107
.
18750000000000000000000000000000000000000000000000000
-
20
]
[
0
.
99246668780181890312519499275367707014083862304687500
-
44617
]
[
1
.
13820783188362395499382273555966094136238098144531250
1411
]
[
-
0
.
99671841783028414241130121808964759111404418945312500
97041
]
[
-
0
.
57021831816264889614132016504299826920032501220703125
-
802
]
[
-
0
.
97423450510790443601649712945800274610519409179687500
23570
]
[
-
0
.
98067196425761504752216524138930253684520721435546875
-
19882
]
[
0
.
99683039770073134100414335989626124501228332519531250
-
29823
]
[
0
.
99882797644578258378089685720624402165412902832031250
-
540990
]
]
;
testCases
.
push
(
[
7
.
86990183266223297664510027971118688583374023437500000
54
]
[
-
1
.
00000018751738117828153917798772454261779785156250000
25
]
[
1
.
19908234423429393977755808009533211588859558105468750
58
]
[
1
.
00000649317438283780745678086532279849052429199218750
42
]
[
863370098
.
16819441318511962890625000000000000000000000000000000
27
]
[
-
1
.
00011928123711690830077714053913950920104980468750000
57
]
[
-
1
.
14006037237328494704513559554470703005790710449218750
30
]
[
-
447
.
11057737163486081044538877904415130615234375000000000
8
]
[
-
1
.
03656507831253685836259137431625276803970336914062500
20
]
[
-
1
.
00000465330344945336094042431795969605445861816406250
41
]
[
-
1
.
00002726631492944164847358479164540767669677734375000
14
]
[
2512068
.
57641875604167580604553222656250000000000000000000000
26
]
[
3309586784
.
85019683837890625000000000000000000000000000000000000
30
]
[
1
.
40742719307547781149025922786677256226539611816406250
19
]
[
1
.
00035740860596344958821646287105977535247802734375000
36
]
)
;
testCases
.
push
(
[
13
.
00000000000000000000000000000000000000000000000000000
31
]
[
13
.
00000000000000000000000000000000000000000000000000000
41
]
[
13
.
00000000000000000000000000000000000000000000000000000
51
]
[
13
.
00000000000000000000000000000000000000000000000000000
58
]
[
13
.
00000000000000000000000000000000000000000000000000000
63
]
[
11
.
00000000000000000000000000000000000000000000000000000
63
]
[
13
.
00000000000000000000000000000000000000000000000000000
47
]
[
13
.
00000000000000000000000000000000000000000000000000000
41
]
[
13
.
00000000000000000000000000000000000000000000000000000
63
]
[
13
.
00000000000000000000000000000000000000000000000000000
31
]
[
13
.
00000000000000000000000000000000000000000000000000000
49
]
[
13
.
00000000000000000000000000000000000000000000000000000
58
]
[
13
.
00000000000000000000000000000000000000000000000000000
31
]
[
11
.
00000000000000000000000000000000000000000000000000000
63
]
[
13
.
00000000000000000000000000000000000000000000000000000
31
]
)
;
testCases
.
push
(
[
14
.
00000000000000000000000000000000000000000000000000000
-
57
]
[
11
.
00000000000000000000000000000000000000000000000000000
-
53
]
[
7
.
00000000000000000000000000000000000000000000000000000
-
57
]
[
15
.
00000000000000000000000000000000000000000000000000000
-
50
]
[
14
.
00000000000000000000000000000000000000000000000000000
-
57
]
[
13
.
00000000000000000000000000000000000000000000000000000
-
33
]
[
19
.
00000000000000000000000000000000000000000000000000000
-
53
]
[
15
.
00000000000000000000000000000000000000000000000000000
-
50
]
[
14
.
00000000000000000000000000000000000000000000000000000
-
57
]
[
13
.
00000000000000000000000000000000000000000000000000000
-
63
]
[
11
.
00000000000000000000000000000000000000000000000000000
-
53
]
[
15
.
00000000000000000000000000000000000000000000000000000
-
50
]
[
13
.
00000000000000000000000000000000000000000000000000000
-
53
]
[
19
.
00000000000000000000000000000000000000000000000000000
-
53
]
[
13
.
00000000000000000000000000000000000000000000000000000
-
33
]
)
;
const
maxError
=
getBuildConfiguration
(
)
.
windows
?
3
:
1
;
for
(
let
[
x
y
]
of
testCases
)
{
let
actual
=
Math
.
pow
(
x
y
)
;
let
expected
=
fdlibm
.
pow
(
x
y
)
;
let
error
=
errorInULP
(
actual
expected
)
;
assertEq
(
error
<
=
maxError
true
{
x
}
*
*
{
y
}
:
{
actual
}
(
{
toBits
(
actual
)
.
toString
(
16
)
}
)
!
=
{
expected
}
(
{
toBits
(
expected
)
.
toString
(
16
)
}
)
)
;
}
const
testCases4
=
[
[
-
0
.
00000000000000000000000000000749666789562697097993956
4
]
[
0
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
0
.
00000000000000000000000000023705601542216470968966009
4
]
[
0
.
00000000000000000000000000000000000000000000000000441
4
]
[
0
.
00000000000000537255761599995092558925668894011631095
4
]
[
0
.
01225688384384779339164595057809492573142051696777344
4
]
[
-
0
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
0
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
120834175976112453093144522854609799898808186321228136949237230085114691584
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
6676
.
83140968165753292851150035858154296875000000000000000
4
]
[
-
0
.
00000000000000000000000000000000000000000000039753861
4
]
[
129749516186492032220917661696
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
1888635225450734959219733085647207705818299180319259746124169216
.
00000000000000000000000000000000000000000000000000000
4
]
[
7934926680560039158281691725824
.
00000000000000000000000000000000000000000000000000000
4
]
[
-
0
.
00000000000000579868166379701264244398310517312073637
4
]
[
4
.
73347349464893341064453125000000000000000000000000000
4
]
[
-
12
.
35635152040049433708190917968750000000000000000000000
4
]
[
-
1
.
50385549572482823954544528533006086945533752441406250
4
]
[
-
8
.
93048901623114943504333496093750000000000000000000000
4
]
[
19
.
02711385915608843788504600524902343750000000000000000
4
]
[
17
.
83878016096969076897948980331420898437500000000000000
4
]
[
12
.
90541613101959228515625000000000000000000000000000000
4
]
[
-
18
.
34655402903445065021514892578125000000000000000000000
4
]
[
-
13
.
28634420270100235939025878906250000000000000000000000
4
]
[
18
.
52965961024165153503417968750000000000000000000000000
4
]
[
13
.
32226210648514097556471824645996093750000000000000000
4
]
[
1
.
09174693829848346027233674249146133661270141601562500
4
]
[
9
.
35059530444141273619607090950012207031250000000000000
4
]
[
17
.
59552449546754360198974609375000000000000000000000000
4
]
[
17
.
94561576098203659057617187500000000000000000000000000
4
]
]
;
for
(
let
[
x
y
]
of
testCases4
)
{
let
actual
=
Math
.
pow
(
x
y
)
;
let
expected
=
fdlibm
.
pow
(
x
y
)
;
let
error
=
errorInULP
(
actual
expected
)
;
assertEq
(
error
<
=
2
true
{
x
}
*
*
{
y
}
:
{
actual
}
(
{
toBits
(
actual
)
.
toString
(
16
)
}
)
!
=
{
expected
}
(
{
toBits
(
expected
)
.
toString
(
16
)
}
)
)
;
}
for
(
let
[
x
y
]
of
testCases4
)
{
let
actual
=
Math
.
pow
(
x
4
)
;
let
expected
=
fdlibm
.
pow
(
x
y
)
;
let
error
=
errorInULP
(
actual
expected
)
;
assertEq
(
error
<
=
2
true
{
x
}
*
*
{
y
}
:
{
actual
}
(
{
toBits
(
actual
)
.
toString
(
16
)
}
)
!
=
{
expected
}
(
{
toBits
(
expected
)
.
toString
(
16
)
}
)
)
;
}
const
testCases3
=
[
[
196194373276
.
42089843750000000000000000000000000000000000000000000
3
]
[
17260025115986696435331651385474892363490876322742272
.
00000000000000000000000000000000000000000000000000000
3
]
[
-
0
.
00000000000000000000000000000000000000000000000000000
3
]
[
2359506498398344427475761591701240715936602989985583832867274752
.
00000000000000000000000000000000000000000000000000000
3
]
[
22724457948673043906745552566513068013978508710758109286797554897659283949989408425377792
.
00000000000000000000000000000000000000000000000000000
3
]
[
-
1024872849611580448634200763411882795753013248
.
00000000000000000000000000000000000000000000000000000
3
]
[
-
918435268181356203923125447950336
.
00000000000000000000000000000000000000000000000000000
3
]
[
558545783776545344834655968246618719333738303286453207040
.
00000000000000000000000000000000000000000000000000000
3
]
[
0
.
00000000000000000000000000000000000000000000000000000
3
]
[
-
0
.
00000000000261062225071774409619236799548496917242058
3
]
[
0
.
00000000000000000000000000000000000000000000012475377
3
]
[
-
0
.
00000000000000000000000000000000000000000000000000000
3
]
[
0
.
00000000000000000000000000000000000000000000000000000
3
]
[
0
.
00000000000000000000000007454937961610833261396029146
3
]
[
0
.
00000000000000000000000000000000000003326770580987513
3
]
[
-
11
.
40858423709869384765625000000000000000000000000000000
3
]
[
11
.
42477834224700927734375000000000000000000000000000000
3
]
[
-
11
.
46123231985238533070514677092432975769042968750000000
3
]
[
-
11
.
40183842182159423828125000000000000000000000000000000
3
]
[
2
.
87109172078278795936512324260547757148742675781250000
3
]
[
-
0
.
72109144181013107299804687500000000000000000000000000
3
]
[
5
.
70116788148880004882812500000000000000000000000000000
3
]
[
-
11
.
32285048566092200417187996208667755126953125000000000
3
]
[
1
.
41961999237537384033203125000000000000000000000000000
3
]
[
-
11
.
52091628707762538397219032049179077148437500000000000
3
]
[
-
5
.
73415940999984741210937500000000000000000000000000000
3
]
[
1
.
41478560105390638312883311300538480281829833984375000
3
]
[
-
2
.
88328036665916442871093750000000000000000000000000000
3
]
[
1
.
42408178602072932328326260176254436373710632324218750
3
]
[
11
.
48128501093015074729919433593750000000000000000000000
3
]
]
;
for
(
let
[
x
y
]
of
testCases3
)
{
let
actual
=
Math
.
pow
(
x
y
)
;
let
expected
=
fdlibm
.
pow
(
x
y
)
;
let
error
=
errorInULP
(
actual
expected
)
;
assertEq
(
error
<
=
2
true
{
x
}
*
*
{
y
}
:
{
actual
}
(
{
toBits
(
actual
)
.
toString
(
16
)
}
)
!
=
{
expected
}
(
{
toBits
(
expected
)
.
toString
(
16
)
}
)
)
;
}
for
(
let
[
x
y
]
of
testCases3
)
{
let
actual
=
Math
.
pow
(
x
3
)
;
let
expected
=
fdlibm
.
pow
(
x
y
)
;
let
error
=
errorInULP
(
actual
expected
)
;
assertEq
(
error
<
=
2
true
{
x
}
*
*
{
y
}
:
{
actual
}
(
{
toBits
(
actual
)
.
toString
(
16
)
}
)
!
=
{
expected
}
(
{
toBits
(
expected
)
.
toString
(
16
)
}
)
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
