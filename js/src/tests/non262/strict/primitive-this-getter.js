let
primitives
=
[
10
false
"
test
"
Symbol
(
)
]
let
getter
=
"
getter
"
;
let
getter2
=
"
getter2
"
;
let
key
=
"
key
"
;
for
(
let
value
of
primitives
)
{
let
prototype
=
Object
.
getPrototypeOf
(
value
)
;
Object
.
defineProperty
(
prototype
"
getter
"
{
get
:
function
(
)
{
"
use
strict
"
;
assertEq
(
this
value
)
;
return
"
getter
"
;
}
}
)
assertEq
(
value
.
getter
"
getter
"
)
;
assertEq
(
value
[
getter
]
"
getter
"
)
;
let
proxy
=
new
Proxy
(
{
}
{
get
(
target
property
receiver
)
{
assertEq
(
property
"
key
"
)
;
assertEq
(
receiver
value
)
;
return
"
get
"
;
}
}
)
;
Object
.
setPrototypeOf
(
prototype
proxy
)
;
assertEq
(
value
.
key
"
get
"
)
;
assertEq
(
value
[
key
]
"
get
"
)
;
assertEq
(
value
.
getter
"
getter
"
)
;
assertEq
(
value
[
getter
]
"
getter
"
)
;
proxy
=
new
Proxy
(
{
get
getter2
(
)
{
"
use
strict
"
;
assertEq
(
this
value
)
;
return
"
getter2
"
;
}
}
{
}
)
;
Object
.
setPrototypeOf
(
prototype
proxy
)
;
assertEq
(
value
.
getter2
"
getter2
"
)
;
assertEq
(
value
[
getter2
]
"
getter2
"
)
;
assertEq
(
value
.
getter
"
getter
"
)
;
assertEq
(
value
[
getter
]
"
getter
"
)
;
}
reportCompare
(
true
true
)
;
