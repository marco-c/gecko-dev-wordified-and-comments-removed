const
TAConstructors
=
[
Int8Array
Uint8Array
Int16Array
Uint16Array
Int32Array
Uint32Array
Uint8ClampedArray
Float32Array
Float64Array
BigInt64Array
BigUint64Array
]
;
const
sizes
=
[
4
8
64
128
1024
]
;
function
ToNumeric
(
TA
)
{
if
(
TA
=
=
=
BigInt64Array
|
|
TA
=
=
=
BigUint64Array
)
{
return
BigInt
;
}
return
Number
;
}
function
ascending
(
a
b
)
{
return
a
<
b
?
-
1
:
a
>
b
?
1
:
0
;
}
function
descending
(
a
b
)
{
return
-
ascending
(
a
b
)
;
}
for
(
let
TA
of
TAConstructors
)
{
let
toNumeric
=
ToNumeric
(
TA
)
;
for
(
let
size
of
sizes
)
{
let
sorted
=
new
TA
(
size
)
;
for
(
let
i
=
0
;
i
<
size
;
+
+
i
)
{
sorted
[
i
]
=
toNumeric
(
i
+
1
)
;
}
sorted
.
sort
(
)
;
let
ta
=
new
TA
(
sorted
)
;
ta
.
sort
(
descending
)
;
let
called
=
false
;
ta
.
sort
(
function
(
a
b
)
{
if
(
!
called
)
{
called
=
true
;
ta
.
fill
(
toNumeric
(
0
)
)
;
}
return
ascending
(
a
b
)
;
}
)
;
assertEq
(
called
true
)
;
for
(
let
i
=
0
;
i
<
size
;
+
+
i
)
{
assertEq
(
ta
[
i
]
sorted
[
i
]
{
TA
.
name
}
at
index
{
i
}
for
size
{
size
}
)
;
}
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
