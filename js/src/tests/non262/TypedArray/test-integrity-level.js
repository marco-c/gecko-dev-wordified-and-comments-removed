const
EMPTY
=
0
;
const
INLINE_STORAGE
=
10
;
const
NON_INLINE_STORAGE
=
1024
;
{
let
ta
=
new
Int32Array
(
EMPTY
)
;
Object
.
seal
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
Int32Array
(
length
)
;
Object
.
seal
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
false
)
;
}
{
let
ta
=
new
Int32Array
(
EMPTY
)
;
Object
.
freeze
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
Int32Array
(
length
)
;
assertThrowsInstanceOf
(
(
)
=
>
Object
.
freeze
(
ta
)
TypeError
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
false
)
;
}
{
let
ta
=
new
Int32Array
(
EMPTY
)
;
Object
.
preventExtensions
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
Int32Array
(
length
)
;
Object
.
preventExtensions
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
false
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
