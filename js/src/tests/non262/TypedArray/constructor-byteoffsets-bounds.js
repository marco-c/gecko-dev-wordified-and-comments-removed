const
ab
=
new
ArrayBuffer
(
0
)
;
for
(
let
TA
of
typedArrayConstructors
)
{
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
31
-
TA
.
BYTES_PER_ELEMENT
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
31
-
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
31
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
31
+
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
31
+
TA
.
BYTES_PER_ELEMENT
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
32
-
TA
.
BYTES_PER_ELEMENT
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
32
-
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
32
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
32
+
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
2
*
*
32
+
TA
.
BYTES_PER_ELEMENT
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
31
-
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
31
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
31
+
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
32
-
1
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
32
)
RangeError
)
;
assertThrows
(
(
)
=
>
new
TA
(
ab
0
2
*
*
32
+
1
)
RangeError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
