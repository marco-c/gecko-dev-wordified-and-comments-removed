const
EMPTY
=
0
;
const
INLINE_STORAGE
=
10
;
const
NON_INLINE_STORAGE
=
1024
;
class
DetachedInt32Array
extends
Int32Array
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
detachArrayBuffer
(
this
.
buffer
)
;
}
}
function
throwsTypeError
(
fn
)
{
try
{
fn
(
)
;
}
catch
(
e
)
{
assertEq
(
e
instanceof
TypeError
true
)
;
return
true
;
}
return
false
;
}
const
ACCESS_ON_DETACHED_ARRAY_BUFFER_THROWS
=
(
(
)
=
>
{
let
ta
=
new
DetachedInt32Array
(
10
)
;
let
throws
=
throwsTypeError
(
(
)
=
>
ta
[
0
]
)
;
assertEq
(
throwsTypeError
(
(
)
=
>
Object
.
getOwnPropertyDescriptor
(
ta
0
)
)
throws
)
;
return
throws
;
}
)
(
)
;
function
maybeThrowOnDetached
(
fn
returnValue
)
{
if
(
ACCESS_ON_DETACHED_ARRAY_BUFFER_THROWS
)
{
assertThrowsInstanceOf
(
fn
TypeError
)
;
return
returnValue
;
}
return
fn
(
)
;
}
{
let
ta
=
new
DetachedInt32Array
(
EMPTY
)
;
Object
.
seal
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
DetachedInt32Array
(
length
)
;
Object
.
seal
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isSealed
(
ta
)
true
)
true
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isFrozen
(
ta
)
true
)
true
)
;
}
{
let
ta
=
new
DetachedInt32Array
(
EMPTY
)
;
Object
.
freeze
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
DetachedInt32Array
(
length
)
;
maybeThrowOnDetached
(
(
)
=
>
Object
.
freeze
(
ta
)
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isSealed
(
ta
)
true
)
true
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isFrozen
(
ta
)
true
)
true
)
;
}
{
let
ta
=
new
DetachedInt32Array
(
EMPTY
)
;
Object
.
preventExtensions
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
Object
.
isSealed
(
ta
)
true
)
;
assertEq
(
Object
.
isFrozen
(
ta
)
true
)
;
}
for
(
let
length
of
[
INLINE_STORAGE
NON_INLINE_STORAGE
]
)
{
let
ta
=
new
DetachedInt32Array
(
length
)
;
Object
.
preventExtensions
(
ta
)
;
assertEq
(
Object
.
isExtensible
(
ta
)
false
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isSealed
(
ta
)
true
)
true
)
;
assertEq
(
maybeThrowOnDetached
(
(
)
=
>
Object
.
isFrozen
(
ta
)
true
)
true
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
