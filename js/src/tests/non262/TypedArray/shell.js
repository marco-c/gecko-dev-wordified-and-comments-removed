(
function
(
global
)
{
"
use
strict
"
;
const
{
Float16Array
Float32Array
Float64Array
Object
Reflect
SharedArrayBuffer
WeakMap
assertEq
}
=
global
;
const
{
apply
:
Reflect_apply
construct
:
Reflect_construct
}
=
Reflect
;
const
{
get
:
WeakMap_prototype_get
has
:
WeakMap_prototype_has
}
=
WeakMap
.
prototype
;
const
sharedConstructors
=
new
WeakMap
(
)
;
function
sharedConstructor
(
baseConstructor
)
{
class
SharedTypedArray
extends
Object
.
getPrototypeOf
(
baseConstructor
)
{
constructor
(
.
.
.
args
)
{
var
array
=
Reflect_construct
(
baseConstructor
args
)
;
var
{
buffer
byteOffset
length
}
=
array
;
var
sharedBuffer
=
new
SharedArrayBuffer
(
buffer
.
byteLength
)
;
var
sharedArray
=
Reflect_construct
(
baseConstructor
[
sharedBuffer
byteOffset
length
]
new
.
target
)
;
for
(
var
i
=
0
;
i
<
length
;
i
+
+
)
sharedArray
[
i
]
=
array
[
i
]
;
assertEq
(
sharedArray
.
buffer
sharedBuffer
)
;
return
sharedArray
;
}
}
Object
.
defineProperty
(
SharedTypedArray
"
BYTES_PER_ELEMENT
"
{
__proto__
:
null
value
:
baseConstructor
.
BYTES_PER_ELEMENT
}
)
;
Object
.
defineProperty
(
SharedTypedArray
.
prototype
"
BYTES_PER_ELEMENT
"
{
__proto__
:
null
value
:
baseConstructor
.
BYTES_PER_ELEMENT
}
)
;
Object
.
defineProperty
(
SharedTypedArray
"
name
"
{
__proto__
:
null
value
:
baseConstructor
.
name
}
)
;
sharedConstructors
.
set
(
SharedTypedArray
baseConstructor
)
;
return
SharedTypedArray
;
}
const
typedArrayConstructors
=
Object
.
freeze
(
[
Int8Array
Uint8Array
Uint8ClampedArray
Int16Array
Uint16Array
Int32Array
Uint32Array
Float32Array
Float64Array
]
.
concat
(
Float16Array
?
?
[
]
)
)
;
const
sharedTypedArrayConstructors
=
Object
.
freeze
(
typeof
SharedArrayBuffer
=
=
=
"
function
"
?
typedArrayConstructors
.
map
(
sharedConstructor
)
:
[
]
)
;
const
anyTypedArrayConstructors
=
Object
.
freeze
(
[
.
.
.
typedArrayConstructors
.
.
.
sharedTypedArrayConstructors
]
)
;
function
isSharedConstructor
(
constructor
)
{
return
Reflect_apply
(
WeakMap_prototype_has
sharedConstructors
[
constructor
]
)
;
}
function
isFloatConstructor
(
constructor
)
{
if
(
isSharedConstructor
(
constructor
)
)
constructor
=
Reflect_apply
(
WeakMap_prototype_get
sharedConstructors
[
constructor
]
)
;
return
constructor
=
=
Float32Array
|
|
constructor
=
=
Float64Array
|
|
(
Float16Array
&
&
constructor
=
=
Float16Array
)
;
}
function
isUnsignedConstructor
(
constructor
)
{
if
(
isSharedConstructor
(
constructor
)
)
constructor
=
Reflect_apply
(
WeakMap_prototype_get
sharedConstructors
[
constructor
]
)
;
return
constructor
=
=
Uint8Array
|
|
constructor
=
=
Uint8ClampedArray
|
|
constructor
=
=
Uint16Array
|
|
constructor
=
=
Uint32Array
;
}
global
.
typedArrayConstructors
=
typedArrayConstructors
;
global
.
sharedTypedArrayConstructors
=
sharedTypedArrayConstructors
;
global
.
anyTypedArrayConstructors
=
anyTypedArrayConstructors
;
global
.
isSharedConstructor
=
isSharedConstructor
;
global
.
isFloatConstructor
=
isFloatConstructor
;
global
.
isUnsignedConstructor
=
isUnsignedConstructor
;
}
)
(
this
)
;
