function
IsIntlService
(
c
)
{
return
typeof
c
=
=
=
"
function
"
&
&
c
.
hasOwnProperty
(
"
prototype
"
)
&
&
c
.
prototype
.
hasOwnProperty
(
"
resolvedOptions
"
)
;
}
const
IntlServices
=
Object
.
getOwnPropertyNames
(
Intl
)
.
map
(
name
=
>
Intl
[
name
]
)
.
filter
(
IsIntlService
)
;
const
unicodeExtensions
=
[
"
ca
-
gregory
"
"
fw
-
mon
"
"
hc
-
h23
"
"
co
-
phonebk
"
"
ka
-
noignore
"
"
kb
-
false
"
"
kc
-
false
"
"
kf
-
false
"
"
kh
-
false
"
"
kk
-
false
"
"
kn
-
false
"
"
kr
-
space
"
"
ks
-
level1
"
"
kv
-
space
"
"
cf
-
standard
"
"
cu
-
eur
"
"
ms
-
metric
"
"
nu
-
latn
"
"
lb
-
strict
"
"
lw
-
normal
"
"
ss
-
none
"
"
tz
-
atvie
"
"
em
-
default
"
"
rg
-
atzzzz
"
"
sd
-
atat1
"
"
va
-
posix
"
]
;
function
reverse
(
a
b
)
{
if
(
a
<
b
)
{
return
1
;
}
if
(
a
>
b
)
{
return
-
1
;
}
return
0
;
}
function
findUnicodeExtensionKeys
(
locale
)
{
var
extension
=
locale
.
match
(
/
.
*
-
u
-
(
.
*
)
/
)
;
if
(
extension
=
=
=
null
)
{
return
[
]
;
}
return
extension
[
1
]
.
replace
(
/
-
\
w
{
3
}
/
g
"
"
)
.
split
(
"
-
"
)
;
}
for
(
let
IntlService
of
IntlServices
)
{
let
ext
=
unicodeExtensions
.
slice
(
0
)
;
let
locale
keys
;
locale
=
new
IntlService
(
de
-
u
-
{
ext
.
join
(
"
-
"
)
}
)
.
resolvedOptions
(
)
.
locale
;
keys
=
findUnicodeExtensionKeys
(
locale
)
;
assertEqArray
(
keys
keys
.
slice
(
0
)
.
sort
(
)
)
;
locale
=
new
IntlService
(
de
-
u
-
{
ext
.
sort
(
)
.
join
(
"
-
"
)
}
)
.
resolvedOptions
(
)
.
locale
;
keys
=
findUnicodeExtensionKeys
(
locale
)
;
assertEqArray
(
keys
keys
.
slice
(
0
)
.
sort
(
)
)
;
locale
=
new
IntlService
(
de
-
u
-
{
ext
.
sort
(
reverse
)
.
join
(
"
-
"
)
}
)
.
resolvedOptions
(
)
.
locale
;
keys
=
findUnicodeExtensionKeys
(
locale
)
;
assertEqArray
(
keys
keys
.
slice
(
0
)
.
sort
(
)
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
