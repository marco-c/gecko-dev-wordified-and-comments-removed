function
assertProperty
(
object
name
desc
)
{
assertEq
(
desc
=
=
=
undefined
|
|
(
typeof
desc
=
=
=
"
object
"
&
&
desc
!
=
=
null
)
true
"
desc
is
a
property
descriptor
"
)
;
var
actual
=
Object
.
getOwnPropertyDescriptor
(
object
name
)
;
if
(
desc
=
=
=
undefined
)
{
assertEq
(
actual
desc
property
{
String
(
name
)
}
is
absent
)
;
return
;
}
assertEq
(
actual
!
=
=
undefined
true
property
{
String
(
name
)
}
is
present
)
;
var
fields
=
[
"
value
"
"
writable
"
"
enumerable
"
"
configurable
"
"
get
"
"
set
"
]
;
for
(
var
field
of
fields
)
{
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
desc
field
)
)
{
assertEq
(
actual
[
field
]
desc
[
field
]
unexpected
value
for
{
field
}
)
;
}
}
}
function
assertBuiltinFunction
(
fn
length
name
)
{
assertProperty
(
fn
"
length
"
{
value
:
length
writable
:
false
enumerable
:
false
configurable
:
true
}
)
;
}
function
assertBuiltinMethod
(
object
propName
length
name
)
{
var
desc
=
Object
.
getOwnPropertyDescriptor
(
object
propName
)
;
assertProperty
(
object
propName
{
value
:
desc
.
value
writable
:
true
enumerable
:
false
configurable
:
true
}
)
;
assertBuiltinFunction
(
desc
.
value
length
name
)
;
}
function
assertBuiltinGetter
(
object
propName
length
name
)
{
var
desc
=
Object
.
getOwnPropertyDescriptor
(
object
propName
)
;
assertBuiltinFunction
(
desc
.
get
length
name
)
;
}
assertBuiltinFunction
(
Intl
.
Locale
1
"
Locale
"
)
;
assertProperty
(
Intl
.
Locale
"
prototype
"
{
value
:
Intl
.
Locale
.
prototype
writable
:
false
enumerable
:
false
configurable
:
false
}
)
;
assertProperty
(
Intl
.
Locale
.
prototype
"
constructor
"
{
value
:
Intl
.
Locale
writable
:
true
enumerable
:
false
configurable
:
true
}
)
;
assertProperty
(
Intl
.
Locale
.
prototype
Symbol
.
toStringTag
{
value
:
"
Intl
.
Locale
"
writable
:
false
enumerable
:
false
configurable
:
true
}
)
;
assertBuiltinMethod
(
Intl
.
Locale
.
prototype
"
toString
"
0
"
toString
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
baseName
"
0
"
get
baseName
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
calendar
"
0
"
get
calendar
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
collation
"
0
"
get
collation
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
hourCycle
"
0
"
get
hourCycle
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
caseFirst
"
0
"
get
caseFirst
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
numeric
"
0
"
get
numeric
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
numberingSystem
"
0
"
get
numberingSystem
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
language
"
0
"
get
language
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
script
"
0
"
get
script
"
)
;
assertBuiltinGetter
(
Intl
.
Locale
.
prototype
"
region
"
0
"
get
region
"
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
