const
tests
=
{
"
en
"
:
{
long
:
[
"
Monday
"
"
Tuesday
"
"
Wednesday
"
"
Thursday
"
"
Friday
"
"
Saturday
"
"
Sunday
"
]
short
:
[
"
Mo
"
"
Tu
"
"
We
"
"
Th
"
"
Fr
"
"
Sa
"
"
Su
"
]
narrow
:
[
"
M
"
"
T
"
"
W
"
"
T
"
"
F
"
"
S
"
"
S
"
]
}
"
de
"
:
{
long
:
[
"
Montag
"
"
Dienstag
"
"
Mittwoch
"
"
Donnerstag
"
"
Freitag
"
"
Samstag
"
"
Sonntag
"
]
short
:
[
"
Mo
.
"
"
Di
.
"
"
Mi
.
"
"
Do
.
"
"
Fr
.
"
"
Sa
.
"
"
So
.
"
]
narrow
:
[
"
M
"
"
D
"
"
M
"
"
D
"
"
F
"
"
S
"
"
S
"
]
}
"
fr
"
:
{
long
:
[
"
lundi
"
"
mardi
"
"
mercredi
"
"
jeudi
"
"
vendredi
"
"
samedi
"
"
dimanche
"
]
short
:
[
"
lu
"
"
ma
"
"
me
"
"
je
"
"
ve
"
"
sa
"
"
di
"
]
narrow
:
[
"
L
"
"
M
"
"
M
"
"
J
"
"
V
"
"
S
"
"
D
"
]
}
"
zh
"
:
{
long
:
[
"
"
"
"
"
"
"
"
"
"
"
"
"
"
]
short
:
[
"
"
"
"
"
"
"
"
"
"
"
"
"
"
]
narrow
:
[
"
"
"
"
"
"
"
"
"
"
"
"
"
"
]
}
}
;
for
(
let
[
locale
localeTests
]
of
Object
.
entries
(
tests
)
)
{
let
defaultCalendar
=
new
Intl
.
DateTimeFormat
(
locale
)
.
resolvedOptions
(
)
.
calendar
;
for
(
let
[
style
styleTests
]
of
Object
.
entries
(
localeTests
)
)
{
let
dn
=
new
Intl
.
DisplayNames
(
locale
{
type
:
"
weekday
"
style
}
)
;
let
resolved
=
dn
.
resolvedOptions
(
)
;
assertEq
(
resolved
.
locale
locale
)
;
assertEq
(
resolved
.
calendar
defaultCalendar
)
;
assertEq
(
resolved
.
style
style
)
;
assertEq
(
resolved
.
type
"
weekday
"
)
;
assertEq
(
resolved
.
fallback
"
code
"
)
;
for
(
let
i
=
0
;
i
<
7
;
i
+
+
)
{
assertEq
(
dn
.
of
(
i
+
1
)
styleTests
[
i
]
)
;
assertEq
(
dn
.
of
(
String
(
i
+
1
)
)
styleTests
[
i
]
)
;
assertEq
(
dn
.
of
(
Object
(
i
+
1
)
)
styleTests
[
i
]
)
;
}
}
}
{
let
dn
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
weekday
"
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
null
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
Symbol
(
)
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
1
.
5
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
-
Infinity
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
Infinity
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
NaN
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
-
1
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
0
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
8
)
RangeError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
