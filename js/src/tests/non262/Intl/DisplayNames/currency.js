const
tests
=
{
"
en
"
:
{
long
:
{
"
USD
"
:
"
US
Dollar
"
"
EUR
"
:
"
Euro
"
"
FRF
"
:
"
French
Franc
"
"
CNY
"
:
"
Chinese
Yuan
"
"
XAU
"
:
"
Gold
"
}
short
:
{
"
USD
"
:
"
"
"
EUR
"
:
"
"
"
FRF
"
:
"
FRF
"
"
CNY
"
:
"
CN
"
"
XAU
"
:
"
XAU
"
}
narrow
:
{
"
USD
"
:
"
USD
"
"
EUR
"
:
"
EUR
"
"
CNY
"
:
"
CNY
"
}
}
"
de
"
:
{
long
:
{
"
USD
"
:
"
US
-
Dollar
"
"
EUR
"
:
"
Euro
"
"
FRF
"
:
"
Franz
sischer
Franc
"
"
CNY
"
:
"
Renminbi
Yuan
"
"
XAU
"
:
"
Unze
Gold
"
}
short
:
{
"
USD
"
:
"
"
"
EUR
"
:
"
"
"
FRF
"
:
"
FRF
"
"
CNY
"
:
"
CN
"
"
XAU
"
:
"
XAU
"
}
narrow
:
{
"
CNY
"
:
"
"
}
}
"
fr
"
:
{
long
:
{
"
USD
"
:
"
dollar
des
tats
-
Unis
"
"
EUR
"
:
"
euro
"
"
FRF
"
:
"
franc
fran
ais
"
"
CNY
"
:
"
yuan
renminbi
chinois
"
"
XAU
"
:
"
or
"
}
short
:
{
"
USD
"
:
"
US
"
"
EUR
"
:
"
"
"
FRF
"
:
"
F
"
"
CNY
"
:
"
CNY
"
"
XAU
"
:
"
XAU
"
}
narrow
:
{
"
USD
"
:
"
"
"
CNY
"
:
"
"
}
}
"
zh
"
:
{
long
:
{
"
USD
"
:
"
"
"
EUR
"
:
"
"
"
FRF
"
:
"
"
"
CNY
"
:
"
"
"
XAU
"
:
"
"
}
short
:
{
"
USD
"
:
"
US
"
"
EUR
"
:
"
"
"
FRF
"
:
"
FRF
"
"
CNY
"
:
"
"
"
XAU
"
:
"
XAU
"
}
narrow
:
{
"
USD
"
:
"
"
}
}
}
;
for
(
let
[
locale
localeTests
]
of
Object
.
entries
(
tests
)
)
{
let
defaultCalendar
=
new
Intl
.
DateTimeFormat
(
locale
)
.
resolvedOptions
(
)
.
calendar
;
for
(
let
[
style
styleTests
]
of
Object
.
entries
(
localeTests
)
)
{
let
dn
=
new
Intl
.
DisplayNames
(
locale
{
type
:
"
currency
"
style
}
)
;
let
resolved
=
dn
.
resolvedOptions
(
)
;
assertEq
(
resolved
.
locale
locale
)
;
assertEq
(
resolved
.
calendar
defaultCalendar
)
;
assertEq
(
resolved
.
style
style
)
;
assertEq
(
resolved
.
type
"
currency
"
)
;
assertEq
(
resolved
.
fallback
"
code
"
)
;
let
inheritedTests
=
{
.
.
.
localeTests
.
long
.
.
.
localeTests
.
short
.
.
.
localeTests
.
narrow
}
;
for
(
let
[
currency
expected
]
of
Object
.
entries
(
{
.
.
.
inheritedTests
.
.
.
styleTests
}
)
)
{
assertEq
(
dn
.
of
(
currency
)
expected
)
;
assertEq
(
dn
.
of
(
Object
(
currency
)
)
expected
)
;
}
}
}
{
let
dn
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
currency
"
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
null
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
Symbol
(
)
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
0
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
"
us
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
"
euro
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
dn
.
of
(
"
uro
"
)
RangeError
)
;
}
{
let
dn1
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
currency
"
}
)
;
let
dn2
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
currency
"
fallback
:
"
code
"
}
)
;
let
dn3
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
currency
"
fallback
:
"
none
"
}
)
;
assertEq
(
dn1
.
resolvedOptions
(
)
.
fallback
"
code
"
)
;
assertEq
(
dn2
.
resolvedOptions
(
)
.
fallback
"
code
"
)
;
assertEq
(
dn3
.
resolvedOptions
(
)
.
fallback
"
none
"
)
;
assertEq
(
dn1
.
of
(
"
AAA
"
)
"
AAA
"
)
;
assertEq
(
dn2
.
of
(
"
AAA
"
)
"
AAA
"
)
;
assertEq
(
dn3
.
of
(
"
AAA
"
)
undefined
)
;
assertEq
(
dn1
.
of
(
"
aaa
"
)
"
AAA
"
)
;
assertEq
(
dn2
.
of
(
"
aaa
"
)
"
AAA
"
)
;
assertEq
(
dn3
.
of
(
"
aaa
"
)
undefined
)
;
}
{
let
dn
=
new
Intl
.
DisplayNames
(
"
en
"
{
type
:
"
currency
"
fallback
:
"
none
"
}
)
;
assertEq
(
dn
.
of
(
"
USD
"
)
"
US
Dollar
"
)
;
assertEq
(
dn
.
of
(
"
usd
"
)
"
US
Dollar
"
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
