const
strings
=
{
"
"
:
[
]
"
\
r
\
n
"
:
[
"
\
r
\
n
"
]
"
First
paragraph
.
\
nSecond
paragraph
.
"
:
[
"
First
paragraph
.
\
n
"
"
Second
paragraph
.
"
]
"
First
paragraph
.
\
rSecond
paragraph
.
"
:
[
"
First
paragraph
.
\
r
"
"
Second
paragraph
.
"
]
"
First
paragraph
.
\
r
\
nSecond
paragraph
.
"
:
[
"
First
paragraph
.
\
r
\
n
"
"
Second
paragraph
.
"
]
"
First
paragraph
.
\
x85Second
paragraph
.
"
:
[
"
First
paragraph
.
\
x85
"
"
Second
paragraph
.
"
]
"
\
xADWo
\
xADrd
\
xAD
.
\
xAD
"
:
[
"
\
xADWo
\
xADrd
\
xAD
.
\
xAD
"
]
"
Word
.
\
n
\
xAD
"
:
[
"
Word
.
\
n
"
"
\
xAD
"
]
"
Word
.
\
r
\
xAD
\
n
"
:
[
"
Word
.
\
r
"
"
\
xAD
\
n
"
]
"
.
2
"
:
[
"
.
2
"
]
"
1
.
2
"
:
[
"
1
.
2
"
]
"
!
2
"
:
[
"
!
"
"
2
"
]
"
1
!
2
"
:
[
"
1
!
"
"
2
"
]
"
A
.
B
"
:
[
"
A
.
B
"
]
"
a
.
B
"
:
[
"
a
.
B
"
]
"
A
.
B
"
:
[
"
A
.
"
"
B
"
]
"
a
.
B
"
:
[
"
a
.
"
"
B
"
]
"
#
.
a
"
:
[
"
#
.
a
"
]
"
#
.
a
"
:
[
"
#
.
a
"
]
"
#
.
#
a
"
:
[
"
#
.
#
a
"
]
"
#
.
1
a
"
:
[
"
#
.
1
a
"
]
"
#
.
a
"
:
[
"
#
.
a
"
]
"
#
.
Aa
"
:
[
"
#
.
"
"
Aa
"
]
"
Word
.
.
"
:
[
"
Word
.
.
"
]
"
Word
.
"
:
[
"
Word
.
"
]
"
Word
.
'
\
t
"
:
[
"
Word
.
'
\
t
"
]
"
Word
.
'
'
"
:
[
"
Word
.
'
'
"
]
"
Word
.
'
\
t
"
:
[
"
Word
.
'
\
t
"
]
"
Word
.
'
\
t
\
n
"
:
[
"
Word
.
'
\
t
\
n
"
]
}
;
function
assertSegments
(
string
sentences
)
{
let
seg
=
segmenter
.
segment
(
string
)
;
let
segments
=
[
.
.
.
seg
]
;
assertEqArray
(
segments
.
map
(
(
{
segment
}
)
=
>
segment
)
sentences
)
;
for
(
let
expected
of
segments
)
{
let
{
segment
index
}
=
expected
;
for
(
let
i
=
index
;
i
<
index
+
segment
.
length
;
+
+
i
)
{
let
actual
=
seg
.
containing
(
i
)
;
assertDeepEq
(
actual
expected
)
;
}
}
}
let
segmenter
=
new
Intl
.
Segmenter
(
"
en
"
{
granularity
:
"
sentence
"
}
)
;
for
(
let
[
string
words
]
of
Object
.
entries
(
strings
)
)
{
assertSegments
(
string
words
)
;
}
{
let
string
=
"
A
sentence
;
semicolon
separated
.
"
;
let
english
=
new
Intl
.
Segmenter
(
"
en
"
{
granularity
:
"
sentence
"
}
)
;
let
greek
=
new
Intl
.
Segmenter
(
"
el
"
{
granularity
:
"
sentence
"
}
)
;
assertEq
(
[
.
.
.
english
.
segment
(
string
)
]
.
length
1
)
;
assertEq
(
[
.
.
.
greek
.
segment
(
string
)
]
.
length
2
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
