for
(
let
locale
of
[
"
tr
"
"
TR
"
"
tr
-
TR
"
"
tr
-
u
-
co
-
search
"
"
tr
-
x
-
turkish
"
]
)
{
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
locale
)
"
i
"
)
;
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
[
locale
]
)
"
i
"
)
;
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
[
locale
"
und
"
]
)
"
i
"
)
;
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
[
"
und
"
locale
]
)
"
\
u0069
\
u0307
"
)
;
}
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
"
trl
"
)
"
\
u0069
\
u0307
"
)
;
assertEq
(
"
\
u0130
"
.
toLocaleLowerCase
(
[
"
trl
"
]
)
"
\
u0069
\
u0307
"
)
;
for
(
let
locale
of
[
"
no_locale
"
"
tr
-
invalid_ext
"
[
"
no_locale
"
]
[
"
en
"
"
no_locale
"
]
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
"
"
.
toLocaleLowerCase
(
locale
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
x
"
.
toLocaleLowerCase
(
locale
)
RangeError
)
;
}
assertEq
(
"
A
"
.
toLocaleLowerCase
(
)
"
a
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
undefined
)
"
a
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
[
]
)
"
a
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
{
}
)
"
a
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
{
length
:
0
}
)
"
a
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
{
length
:
-
1
}
)
"
a
"
)
;
for
(
let
locale
of
[
null
0
Math
.
PI
NaN
Infinity
true
false
Symbol
(
)
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
"
"
.
toLocaleLowerCase
(
[
locale
]
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
A
"
.
toLocaleLowerCase
(
[
locale
]
)
TypeError
)
;
}
for
(
let
locale
of
[
null
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
"
"
.
toLocaleLowerCase
(
[
locale
]
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
A
"
.
toLocaleLowerCase
(
[
locale
]
)
TypeError
)
;
}
for
(
let
locale
of
[
0
Math
.
PI
NaN
Infinity
true
false
Symbol
(
)
]
)
{
assertEq
(
"
"
.
toLocaleLowerCase
(
locale
)
"
"
)
;
assertEq
(
"
A
"
.
toLocaleLowerCase
(
locale
)
"
a
"
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
ok
"
)
;
