function
IsIntlService
(
c
)
{
return
typeof
c
=
=
=
"
function
"
&
&
c
.
hasOwnProperty
(
"
prototype
"
)
&
&
c
.
prototype
.
hasOwnProperty
(
"
resolvedOptions
"
)
;
}
function
thisValues
(
)
{
const
intlConstructors
=
Object
.
getOwnPropertyNames
(
Intl
)
.
map
(
name
=
>
Intl
[
name
]
)
.
filter
(
IsIntlService
)
;
return
[
.
.
.
[
undefined
null
true
"
abc
"
Symbol
(
)
123
]
.
.
.
[
{
}
[
]
/
(
?
:
)
/
function
(
)
{
}
new
Proxy
(
{
}
{
}
)
]
.
.
.
[
]
.
concat
(
.
.
.
intlConstructors
.
map
(
ctor
=
>
{
let
args
=
[
]
;
if
(
ctor
=
=
=
Intl
.
DisplayNames
)
{
args
=
[
undefined
{
type
:
"
language
"
}
]
;
}
return
[
new
ctor
(
.
.
.
args
)
new
class
extends
ctor
{
}
(
.
.
.
args
)
Object
.
create
(
ctor
.
prototype
)
Object
.
setPrototypeOf
(
new
ctor
(
.
.
.
args
)
Object
.
prototype
)
]
;
}
)
)
]
;
}
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
PluralRules
(
)
TypeError
)
;
for
(
let
thisValue
of
thisValues
(
)
)
{
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
PluralRules
.
call
(
thisValue
)
TypeError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
