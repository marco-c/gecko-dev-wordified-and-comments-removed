const
hourCycleToH12Map
=
{
"
h11
"
:
true
"
h12
"
:
true
"
h23
"
:
false
"
h24
"
:
false
}
;
for
(
const
key
of
Object
.
keys
(
hourCycleToH12Map
)
)
{
const
langTag
=
"
en
-
US
"
;
const
loc
=
{
langTag
}
-
u
-
hc
-
{
key
}
;
const
dtf
=
new
Intl
.
DateTimeFormat
(
loc
{
hour
:
"
numeric
"
}
)
;
const
dtf2
=
new
Intl
.
DateTimeFormat
(
langTag
{
hour
:
"
numeric
"
hourCycle
:
key
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
dtf2
.
resolvedOptions
(
)
.
hourCycle
)
;
}
for
(
const
key
of
Object
.
keys
(
hourCycleToH12Map
)
)
{
const
dtf
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hour
:
"
numeric
"
hourCycle
:
key
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hour12
hourCycleToH12Map
[
key
]
)
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
hourCycleToH12Map
)
)
{
const
dtf
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hour
:
"
numeric
"
hour12
:
value
}
)
;
assertEq
(
hourCycleToH12Map
[
dtf
.
resolvedOptions
(
)
.
hourCycle
]
value
)
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
hourCycleToH12Map
)
)
{
const
dtf
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hour
:
"
numeric
"
hourCycle
:
key
hour12
:
!
value
}
)
;
assertEq
(
hourCycleToH12Map
[
dtf
.
resolvedOptions
(
)
.
hourCycle
]
!
value
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hour12
!
value
)
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
hourCycleToH12Map
)
)
{
const
langTag
=
"
en
-
US
"
;
const
loc
=
{
langTag
}
-
u
-
hc
-
{
key
}
;
const
dtf
=
new
Intl
.
DateTimeFormat
(
loc
{
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hour12
value
)
;
}
const
expectedValuesENUS
=
{
h11
:
"
0
\
u202FAM
"
h12
:
"
12
\
u202FAM
"
h23
:
"
00
"
h24
:
"
24
"
}
;
const
exampleDate
=
new
Date
(
2017
10
-
1
10
0
)
;
for
(
const
[
key
val
]
of
Object
.
entries
(
expectedValuesENUS
)
)
{
assertEq
(
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hour
:
"
numeric
"
hourCycle
:
key
}
)
.
format
(
exampleDate
)
val
)
;
}
const
invalidHourCycleValues
=
[
"
h28
"
"
f28
"
]
;
for
(
const
key
of
invalidHourCycleValues
)
{
const
langTag
=
"
en
-
US
"
;
const
loc
=
{
langTag
}
-
u
-
hc
-
{
key
}
;
const
dtf
=
new
Intl
.
DateTimeFormat
(
loc
{
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hour12
true
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
"
h12
"
)
;
}
{
const
options
=
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hourCycle
:
"
h11
"
}
)
.
resolvedOptions
(
)
;
assertEq
(
"
hourCycle
"
in
options
false
)
;
assertEq
(
"
hour12
"
in
options
false
)
;
}
{
let
dtf
=
Intl
.
DateTimeFormat
(
"
en
-
US
-
u
-
hc
-
h23
"
{
hourCycle
:
"
h24
"
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
"
h24
"
)
;
}
{
let
dtf
=
Intl
.
DateTimeFormat
(
"
en
-
US
-
u
-
hc
-
h23
"
{
hour12
:
true
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
"
h12
"
)
;
}
{
let
dtf
=
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
hourCycle
:
"
h12
"
hour12
:
false
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
"
h23
"
)
;
}
{
let
dtf
=
Intl
.
DateTimeFormat
(
"
en
-
u
-
hc
-
h11
"
{
hour
:
"
numeric
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
locale
"
en
-
u
-
hc
-
h11
"
)
;
}
{
let
dtf
=
Intl
.
DateTimeFormat
(
"
en
-
u
-
hc
-
h11
"
{
hour
:
"
numeric
"
hourCycle
:
"
h24
"
}
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
locale
"
en
"
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
hourCycle
"
h24
"
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
ok
"
)
;
