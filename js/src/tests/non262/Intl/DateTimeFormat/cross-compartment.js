var
otherGlobal
=
newGlobal
(
)
;
var
dateTimeFormat
=
new
Intl
.
DateTimeFormat
(
)
;
var
ccwDateTimeFormat
=
new
otherGlobal
.
Intl
.
DateTimeFormat
(
)
;
var
Intl_DateTimeFormat_format_get
=
Object
.
getOwnPropertyDescriptor
(
Intl
.
DateTimeFormat
.
prototype
"
format
"
)
.
get
;
assertEq
(
Intl_DateTimeFormat_format_get
.
call
(
ccwDateTimeFormat
)
(
0
)
Intl_DateTimeFormat_format_get
.
call
(
dateTimeFormat
)
(
0
)
)
;
var
Intl_DateTimeFormat_formatToParts
=
Intl
.
DateTimeFormat
.
prototype
.
formatToParts
;
assertEq
(
deepEqual
(
Intl_DateTimeFormat_formatToParts
.
call
(
ccwDateTimeFormat
0
)
Intl_DateTimeFormat_formatToParts
.
call
(
dateTimeFormat
0
)
)
true
)
;
var
Intl_DateTimeFormat_resolvedOptions
=
Intl
.
DateTimeFormat
.
prototype
.
resolvedOptions
;
assertEq
(
deepEqual
(
Intl_DateTimeFormat_resolvedOptions
.
call
(
ccwDateTimeFormat
)
Intl_DateTimeFormat_resolvedOptions
.
call
(
dateTimeFormat
)
)
true
)
;
function
fallbackSymbol
(
global
)
{
var
DTF
=
global
.
Intl
.
DateTimeFormat
;
return
Object
.
getOwnPropertySymbols
(
DTF
.
call
(
Object
.
create
(
DTF
.
prototype
)
)
)
[
0
]
;
}
const
intlFallbackSymbol
=
fallbackSymbol
(
this
)
;
const
otherIntlFallbackSymbol
=
fallbackSymbol
(
otherGlobal
)
;
assertEq
(
intlFallbackSymbol
=
=
=
otherIntlFallbackSymbol
false
)
;
var
objWithFallbackCCWDateTimeFormat
=
{
__proto__
:
Intl
.
DateTimeFormat
.
prototype
[
intlFallbackSymbol
]
:
ccwDateTimeFormat
}
;
assertEq
(
Intl_DateTimeFormat_format_get
.
call
(
objWithFallbackCCWDateTimeFormat
)
(
0
)
Intl_DateTimeFormat_format_get
.
call
(
dateTimeFormat
)
(
0
)
)
;
assertEq
(
deepEqual
(
Intl_DateTimeFormat_resolvedOptions
.
call
(
objWithFallbackCCWDateTimeFormat
)
Intl_DateTimeFormat_resolvedOptions
.
call
(
dateTimeFormat
)
)
true
)
;
var
ccwDateTimeFormatWithPoisonedFallback
=
new
otherGlobal
.
Intl
.
DateTimeFormat
(
)
;
Object
.
setPrototypeOf
(
ccwDateTimeFormatWithPoisonedFallback
Intl
.
DateTimeFormat
.
prototype
)
;
Object
.
defineProperty
(
ccwDateTimeFormatWithPoisonedFallback
intlFallbackSymbol
{
get
(
)
{
throw
new
Error
(
)
;
}
}
)
;
Object
.
defineProperty
(
ccwDateTimeFormatWithPoisonedFallback
otherIntlFallbackSymbol
{
get
(
)
{
throw
new
Error
(
)
;
}
}
)
;
assertEq
(
Intl_DateTimeFormat_format_get
.
call
(
ccwDateTimeFormatWithPoisonedFallback
)
(
0
)
Intl_DateTimeFormat_format_get
.
call
(
dateTimeFormat
)
(
0
)
)
;
assertEq
(
deepEqual
(
Intl_DateTimeFormat_resolvedOptions
.
call
(
ccwDateTimeFormatWithPoisonedFallback
)
Intl_DateTimeFormat_resolvedOptions
.
call
(
dateTimeFormat
)
)
true
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
