var
log
;
var
proxy
=
new
Proxy
(
{
year
:
"
numeric
"
hour
:
"
numeric
"
}
new
Proxy
(
{
get
(
t
pk
r
)
{
log
.
push
(
pk
)
;
return
Reflect
.
get
(
t
pk
r
)
;
}
}
{
get
(
t
pk
r
)
{
assertEq
(
pk
"
get
"
)
;
return
Reflect
.
get
(
t
pk
r
)
;
}
}
)
)
;
var
constructorAccesses
=
[
"
weekday
"
"
year
"
"
month
"
"
day
"
"
hour
"
"
minute
"
"
second
"
"
localeMatcher
"
"
hour12
"
"
hourCycle
"
"
timeZone
"
"
weekday
"
"
era
"
"
year
"
"
month
"
"
day
"
"
hour
"
"
minute
"
"
second
"
"
timeZoneName
"
"
formatMatcher
"
]
;
log
=
[
]
;
new
Intl
.
DateTimeFormat
(
undefined
proxy
)
;
assertEqArray
(
log
constructorAccesses
)
;
log
=
[
]
;
new
Date
(
)
.
toLocaleString
(
undefined
proxy
)
;
assertEqArray
(
log
[
"
weekday
"
"
year
"
"
month
"
"
day
"
"
hour
"
"
minute
"
"
second
"
.
.
.
constructorAccesses
]
)
;
log
=
[
]
;
new
Date
(
)
.
toLocaleDateString
(
undefined
proxy
)
;
assertEqArray
(
log
[
"
weekday
"
"
year
"
"
month
"
"
day
"
.
.
.
constructorAccesses
]
)
;
log
=
[
]
;
new
Date
(
)
.
toLocaleTimeString
(
undefined
proxy
)
;
assertEqArray
(
log
[
"
hour
"
"
minute
"
"
second
"
.
.
.
constructorAccesses
]
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
