const
defaultLocale
=
"
en
"
;
const
defaultNumberingSystem
=
new
Intl
.
DateTimeFormat
(
defaultLocale
)
.
resolvedOptions
(
)
.
numberingSystem
;
function
createWithLocale
(
locale
numberingSystem
)
{
return
new
Intl
.
DateTimeFormat
(
locale
{
numberingSystem
}
)
;
}
function
create
(
numberingSystem
)
{
return
createWithLocale
(
defaultLocale
numberingSystem
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
create
(
"
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
create
(
"
latn
\
0
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
create
(
"
a
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
create
(
"
toolongstring
"
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
create
(
"
latn
-
toolongstring
"
)
RangeError
)
;
let
dtf
=
create
(
undefined
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
numberingSystem
defaultNumberingSystem
)
;
dtf
=
create
(
"
xxxxxxxx
"
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
numberingSystem
defaultNumberingSystem
)
;
dtf
=
createWithLocale
(
{
defaultLocale
}
-
u
-
nu
-
thai
"
arab
"
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
locale
defaultLocale
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
numberingSystem
"
arab
"
)
;
dtf
=
create
(
"
ARAB
"
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
locale
defaultLocale
)
;
assertEq
(
dtf
.
resolvedOptions
(
)
.
numberingSystem
"
arab
"
)
;
const
numberingSystems
=
[
"
arab
"
"
arabext
"
"
bali
"
"
beng
"
"
deva
"
"
fullwide
"
"
gujr
"
"
guru
"
"
hanidec
"
"
khmr
"
"
knda
"
"
laoo
"
"
latn
"
"
limb
"
"
mlym
"
"
mong
"
"
mymr
"
"
orya
"
"
tamldec
"
"
telu
"
"
thai
"
"
tibt
"
]
;
for
(
let
numberingSystem
of
numberingSystems
)
{
let
dtf1
=
new
Intl
.
DateTimeFormat
(
{
defaultLocale
}
-
u
-
nu
-
{
numberingSystem
}
)
;
let
dtf2
=
new
Intl
.
DateTimeFormat
(
defaultLocale
{
numberingSystem
}
)
;
assertEq
(
dtf1
.
resolvedOptions
(
)
.
numberingSystem
numberingSystem
)
;
assertEq
(
dtf2
.
resolvedOptions
(
)
.
numberingSystem
numberingSystem
)
;
assertEq
(
dtf2
.
format
(
0
)
dtf1
.
format
(
0
)
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
