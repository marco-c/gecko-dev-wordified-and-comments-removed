function
testPunctuation
(
col
expectedIgnorePunctuation
)
{
let
ignorePunctuation
=
col
.
resolvedOptions
(
)
.
ignorePunctuation
;
assertEq
(
ignorePunctuation
expectedIgnorePunctuation
)
;
assertEq
(
col
.
compare
(
"
"
"
*
"
)
ignorePunctuation
?
0
:
-
1
)
;
assertEq
(
col
.
compare
(
"
"
"
"
)
ignorePunctuation
?
0
:
-
1
)
;
}
const
locales
=
[
"
en
"
"
de
"
"
fr
"
"
it
"
"
es
"
"
ar
"
"
zh
"
"
ja
"
"
th
"
"
th
-
Thai
"
"
th
-
TH
"
"
th
-
u
-
kf
-
false
"
]
;
for
(
let
locale
of
locales
)
{
let
isThai
=
new
Intl
.
Locale
(
locale
)
.
language
=
=
=
"
th
"
;
testPunctuation
(
new
Intl
.
Collator
(
locale
{
}
)
isThai
)
;
for
(
let
ignorePunctuation
of
[
true
false
]
)
{
testPunctuation
(
new
Intl
.
Collator
(
locale
{
ignorePunctuation
}
)
ignorePunctuation
)
;
}
}
if
(
typeof
getDefaultLocale
=
=
=
"
undefined
"
)
{
var
getDefaultLocale
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
getDefaultLocale
;
}
if
(
typeof
setDefaultLocale
=
=
=
"
undefined
"
)
{
var
setDefaultLocale
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
setDefaultLocale
;
}
const
defaultLocale
=
getDefaultLocale
(
)
;
function
withLocale
(
locale
fn
)
{
setDefaultLocale
(
locale
)
;
try
{
fn
(
)
;
}
finally
{
setDefaultLocale
(
defaultLocale
)
;
}
}
for
(
let
locale
of
[
"
th
"
"
th
-
TH
"
]
)
{
withLocale
(
locale
(
)
=
>
{
testPunctuation
(
new
Intl
.
Collator
(
undefined
{
}
)
true
)
;
}
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
