const
{
Element
Literal
}
=
ListFormatParts
;
const
styles
=
[
"
long
"
"
short
"
"
narrow
"
]
;
{
const
list
=
[
]
;
const
expected
=
[
]
;
const
locales
=
[
"
ar
"
"
de
"
"
en
"
"
es
"
"
ja
"
"
nl
"
"
th
"
"
zh
"
]
;
for
(
let
locale
of
locales
)
{
for
(
let
style
of
styles
)
{
let
lf
=
new
Intl
.
ListFormat
(
locale
{
type
:
"
unit
"
style
}
)
;
assertParts
(
lf
list
expected
)
;
}
}
}
{
const
list
=
[
"
A
"
]
;
const
expected
=
[
Element
(
list
[
0
]
)
]
;
const
locales
=
[
"
ar
"
"
de
"
"
en
"
"
es
"
"
ja
"
"
nl
"
"
th
"
"
zh
"
]
;
for
(
let
locale
of
locales
)
{
for
(
let
style
of
styles
)
{
let
lf
=
new
Intl
.
ListFormat
(
locale
{
type
:
"
unit
"
style
}
)
;
assertParts
(
lf
list
expected
)
;
}
}
}
{
const
list
=
[
"
A
"
"
B
"
]
;
const
testData
=
{
"
ar
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
de
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
en
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
es
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
y
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
ja
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Element
(
"
B
"
)
]
}
"
nl
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
en
"
)
Element
(
"
B
"
)
]
short
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
th
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
short
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
]
}
"
zh
"
:
{
long
:
[
Element
(
"
A
"
)
Element
(
"
B
"
)
]
}
}
;
for
(
let
[
locale
localeData
]
of
Object
.
entries
(
testData
)
)
{
for
(
let
style
of
styles
)
{
let
lf
=
new
Intl
.
ListFormat
(
locale
{
type
:
"
unit
"
style
}
)
;
let
{
[
style
]
:
expected
=
localeData
.
long
}
=
localeData
;
assertParts
(
lf
list
expected
)
;
}
}
}
{
const
list
=
[
"
A
"
"
B
"
"
C
"
"
D
"
]
;
const
testData
=
{
"
ar
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
}
"
de
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
und
"
)
Element
(
"
D
"
)
]
}
"
en
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
}
"
es
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
y
"
)
Element
(
"
D
"
)
]
short
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
}
"
ja
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Element
(
"
B
"
)
Element
(
"
C
"
)
Element
(
"
D
"
)
]
}
"
nl
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
en
"
)
Element
(
"
D
"
)
]
short
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
}
"
th
"
:
{
long
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
narrow
:
[
Element
(
"
A
"
)
Literal
(
"
"
)
Element
(
"
B
"
)
Literal
(
"
"
)
Element
(
"
C
"
)
Literal
(
"
"
)
Element
(
"
D
"
)
]
}
"
zh
"
:
{
long
:
[
Element
(
"
A
"
)
Element
(
"
B
"
)
Element
(
"
C
"
)
Element
(
"
D
"
)
]
}
}
;
for
(
let
[
locale
localeData
]
of
Object
.
entries
(
testData
)
)
{
for
(
let
style
of
styles
)
{
let
lf
=
new
Intl
.
ListFormat
(
locale
{
type
:
"
unit
"
style
}
)
;
let
{
[
style
]
:
expected
=
localeData
.
long
}
=
localeData
;
assertParts
(
lf
list
expected
)
;
}
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
