var
irregularGrandfathered
=
[
"
en
-
gb
-
oed
"
"
i
-
ami
"
"
i
-
bnn
"
"
i
-
default
"
"
i
-
enochian
"
"
i
-
hak
"
"
i
-
klingon
"
"
i
-
lux
"
"
i
-
mingo
"
"
i
-
navajo
"
"
i
-
pwn
"
"
i
-
tao
"
"
i
-
tay
"
"
i
-
tsu
"
"
sgn
-
be
-
fr
"
"
sgn
-
be
-
nl
"
"
sgn
-
ch
-
de
"
]
;
var
regularGrandfatheredWithExtlangLike
=
[
"
no
-
bok
"
"
no
-
nyn
"
"
zh
-
min
"
"
zh
-
min
-
nan
"
]
;
var
regularGrandfatheredWithVariantLike
=
{
"
art
-
lojban
"
:
"
jbo
"
"
cel
-
gaulish
"
:
"
cel
-
gaulish
"
"
zh
-
guoyu
"
:
"
cmn
"
"
zh
-
hakka
"
:
"
hak
"
"
zh
-
xiang
"
:
"
hsn
"
}
;
for
(
let
locale
of
[
.
.
.
irregularGrandfathered
.
.
.
regularGrandfatheredWithExtlangLike
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
Intl
.
getCanonicalLocales
(
locale
)
RangeError
)
;
}
for
(
let
[
locale
canonical
]
of
Object
.
entries
(
regularGrandfatheredWithVariantLike
)
)
{
assertEq
(
Intl
.
getCanonicalLocales
(
locale
)
[
0
]
canonical
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
