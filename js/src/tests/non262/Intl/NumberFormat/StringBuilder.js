var
format
=
new
Intl
.
NumberFormat
(
"
it
-
IT
"
{
minimumFractionDigits
:
1
}
)
;
assertEq
(
format
.
format
(
1123123123123123123123
.
1
)
"
1
.
123
.
123
.
123
.
123
.
123
.
100
.
000
0
"
)
;
assertEq
(
format
.
format
(
12123123123123123123123
.
1
)
"
12
.
123
.
123
.
123
.
123
.
122
.
000
.
000
0
"
)
;
assertEq
(
format
.
format
(
123123123123123123123123
.
1
)
"
123
.
123
.
123
.
123
.
123
.
120
.
000
.
000
0
"
)
;
function
formatToFixed
(
x
)
{
var
mfd
=
format
.
resolvedOptions
(
)
.
maximumFractionDigits
;
var
s
=
x
.
toFixed
(
mfd
)
;
var
m
=
s
.
match
(
/
^
(
\
d
)
\
.
(
\
d
+
)
e
\
+
(
\
d
+
)
/
)
;
assertEq
(
m
!
=
=
null
true
)
;
s
=
m
[
1
]
+
m
[
2
]
.
padEnd
(
m
[
3
]
"
0
"
)
;
m
=
s
.
match
(
/
\
d
{
1
3
}
(
?
=
(
?
:
\
d
{
3
}
)
*
)
/
g
)
;
assertEq
(
m
!
=
=
null
true
)
;
return
m
.
join
(
"
.
"
)
+
"
0
"
;
}
assertEq
(
formatToFixed
(
1123123123123123123123
.
1
)
"
1
.
123
.
123
.
123
.
123
.
123
.
100
.
000
0
"
)
;
assertEq
(
formatToFixed
(
12123123123123123123123
.
1
)
"
12
.
123
.
123
.
123
.
123
.
122
.
000
.
000
0
"
)
;
assertEq
(
formatToFixed
(
123123123123123123123123
.
1
)
"
123
.
123
.
123
.
123
.
123
.
120
.
000
.
000
0
"
)
;
reportCompare
(
0
0
"
ok
"
)
;
