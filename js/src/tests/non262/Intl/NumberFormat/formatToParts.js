var
BUGNUMBER
=
1289882
;
var
summary
=
"
Implement
Intl
.
NumberFormat
.
prototype
.
formatToParts
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
assertEq
(
"
formatToParts
"
in
Intl
.
NumberFormat
(
)
true
)
;
function
GenericPartCreator
(
type
)
{
return
function
(
str
)
{
return
{
type
value
:
str
}
;
}
;
}
var
Nan
=
GenericPartCreator
(
"
nan
"
)
;
var
Inf
=
GenericPartCreator
(
"
infinity
"
)
;
var
Integer
=
GenericPartCreator
(
"
integer
"
)
;
var
Group
=
GenericPartCreator
(
"
group
"
)
;
var
Decimal
=
GenericPartCreator
(
"
decimal
"
)
;
var
Fraction
=
GenericPartCreator
(
"
fraction
"
)
;
var
MinusSign
=
GenericPartCreator
(
"
minusSign
"
)
;
var
PlusSign
=
GenericPartCreator
(
"
plusSign
"
)
;
var
PercentSign
=
GenericPartCreator
(
"
percentSign
"
)
;
var
Currency
=
GenericPartCreator
(
"
currency
"
)
;
var
Literal
=
GenericPartCreator
(
"
literal
"
)
;
function
assertParts
(
nf
x
expected
)
{
var
parts
=
nf
.
formatToParts
(
x
)
;
assertEq
(
parts
.
map
(
part
=
>
part
.
value
)
.
join
(
"
"
)
nf
.
format
(
x
)
"
formatToParts
and
format
must
agree
"
)
;
var
len
=
parts
.
length
;
assertEq
(
len
expected
.
length
"
parts
count
mismatch
"
)
;
for
(
var
i
=
0
;
i
<
len
;
i
+
+
)
{
assertEq
(
parts
[
i
]
.
type
expected
[
i
]
.
type
"
type
mismatch
at
"
+
i
)
;
assertEq
(
parts
[
i
]
.
value
expected
[
i
]
.
value
"
value
mismatch
at
"
+
i
)
;
}
}
var
usdCodeOptions
=
{
style
:
"
currency
"
currency
:
"
USD
"
currencyDisplay
:
"
code
"
minimumFractionDigits
:
0
maximumFractionDigits
:
0
}
;
var
usDollarsCode
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usdCodeOptions
)
;
assertParts
(
usDollarsCode
25
[
Currency
(
"
USD
"
)
Literal
(
"
\
xA0
"
)
Integer
(
"
25
"
)
]
)
;
var
xqqCodeOptions
=
{
style
:
"
currency
"
currency
:
"
XQQ
"
currencyDisplay
:
"
code
"
minimumFractionDigits
:
0
maximumFractionDigits
:
0
}
;
var
xqqMoneyCode
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
xqqCodeOptions
)
;
assertParts
(
xqqMoneyCode
25
[
Currency
(
"
XQQ
"
)
Literal
(
"
\
xA0
"
)
Integer
(
"
25
"
)
]
)
;
var
usdNameOptions
=
{
style
:
"
currency
"
currency
:
"
USD
"
currencyDisplay
:
"
name
"
minimumFractionDigits
:
0
maximumFractionDigits
:
0
}
;
var
usDollarsName
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usdNameOptions
)
;
assertParts
(
usDollarsName
25
[
Integer
(
"
25
"
)
Literal
(
"
"
)
Currency
(
"
US
dollars
"
)
]
)
;
var
usdNameGroupingOptions
=
{
style
:
"
currency
"
currency
:
"
USD
"
currencyDisplay
:
"
name
"
minimumFractionDigits
:
0
maximumFractionDigits
:
0
}
;
var
usDollarsNameGrouping
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usdNameGroupingOptions
)
;
assertParts
(
usDollarsNameGrouping
12345678
[
Integer
(
"
12
"
)
Group
(
"
"
)
Integer
(
"
345
"
)
Group
(
"
"
)
Integer
(
"
678
"
)
Literal
(
"
"
)
Currency
(
"
US
dollars
"
)
]
)
;
var
xqqNameOptions
=
{
style
:
"
currency
"
currency
:
"
XQQ
"
currencyDisplay
:
"
name
"
minimumFractionDigits
:
0
maximumFractionDigits
:
0
}
;
var
xqqMoneyName
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
xqqNameOptions
)
;
assertParts
(
xqqMoneyName
25
[
Integer
(
"
25
"
)
Literal
(
"
"
)
Currency
(
"
XQQ
"
)
]
)
;
var
usdNameFractionOptions
=
{
style
:
"
currency
"
currency
:
"
USD
"
currencyDisplay
:
"
name
"
minimumFractionDigits
:
2
maximumFractionDigits
:
2
}
;
var
usdNameFractionFormatter
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usdNameFractionOptions
)
;
var
usNationalSurplus
=
-
19766580028249
.
41
;
assertParts
(
usdNameFractionFormatter
usNationalSurplus
[
MinusSign
(
"
-
"
)
Integer
(
"
19
"
)
Group
(
"
"
)
Integer
(
"
766
"
)
Group
(
"
"
)
Integer
(
"
580
"
)
Group
(
"
"
)
Integer
(
"
028
"
)
Group
(
"
"
)
Integer
(
"
249
"
)
Decimal
(
"
.
"
)
Fraction
(
"
41
"
)
Literal
(
"
"
)
Currency
(
"
US
dollars
"
)
]
)
;
var
usPercentOptions
=
{
style
:
"
percent
"
minimumFractionDigits
:
1
maximumFractionDigits
:
1
}
;
var
usPercentFormatter
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usPercentOptions
)
;
assertParts
(
usPercentFormatter
0
.
375
[
Integer
(
"
37
"
)
Decimal
(
"
.
"
)
Fraction
(
"
5
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
usPercentFormatter
-
1284
.
375
[
MinusSign
(
"
-
"
)
Integer
(
"
128
"
)
Group
(
"
"
)
Integer
(
"
437
"
)
Decimal
(
"
.
"
)
Fraction
(
"
5
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
usPercentFormatter
NaN
[
Nan
(
"
NaN
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
usPercentFormatter
Infinity
[
Inf
(
"
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
usPercentFormatter
-
Infinity
[
MinusSign
(
"
-
"
)
Inf
(
"
"
)
PercentSign
(
"
%
"
)
]
)
;
var
dePercentOptions
=
{
style
:
"
percent
"
minimumFractionDigits
:
1
maximumFractionDigits
:
1
}
;
var
dePercentFormatter
=
new
Intl
.
NumberFormat
(
"
de
"
dePercentOptions
)
;
assertParts
(
dePercentFormatter
0
.
375
[
Integer
(
"
37
"
)
Decimal
(
"
"
)
Fraction
(
"
5
"
)
Literal
(
"
\
xA0
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
dePercentFormatter
-
1284
.
375
[
MinusSign
(
"
-
"
)
Integer
(
"
128
"
)
Group
(
"
.
"
)
Integer
(
"
437
"
)
Decimal
(
"
"
)
Fraction
(
"
5
"
)
Literal
(
"
\
xA0
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
dePercentFormatter
NaN
[
Nan
(
"
NaN
"
)
Literal
(
"
\
xA0
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
dePercentFormatter
Infinity
[
Inf
(
"
"
)
Literal
(
"
\
xA0
"
)
PercentSign
(
"
%
"
)
]
)
;
assertParts
(
dePercentFormatter
-
Infinity
[
MinusSign
(
"
-
"
)
Inf
(
"
"
)
Literal
(
"
\
xA0
"
)
PercentSign
(
"
%
"
)
]
)
;
var
arPercentOptions
=
{
style
:
"
percent
"
minimumFractionDigits
:
2
}
;
var
arPercentFormatter
=
new
Intl
.
NumberFormat
(
"
ar
-
IQ
"
arPercentOptions
)
;
assertParts
(
arPercentFormatter
-
135
.
32
[
MinusSign
(
"
\
u
{
061C
}
-
"
)
Integer
(
"
"
)
Group
(
"
"
)
Integer
(
"
"
)
Decimal
(
"
"
)
Fraction
(
"
"
)
PercentSign
(
"
\
u
{
061C
}
"
)
]
)
;
var
usDecimalOptions
=
{
style
:
"
decimal
"
maximumFractionDigits
:
7
}
;
var
usDecimalFormatter
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usDecimalOptions
)
;
assertParts
(
usDecimalFormatter
42
[
Integer
(
"
42
"
)
]
)
;
assertParts
(
usDecimalFormatter
1337
[
Integer
(
"
1
"
)
Group
(
"
"
)
Integer
(
"
337
"
)
]
)
;
assertParts
(
usDecimalFormatter
-
6
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
6
"
)
Decimal
(
"
.
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
usDecimalFormatter
-
1376
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
1
"
)
Group
(
"
"
)
Integer
(
"
376
"
)
Decimal
(
"
.
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
usDecimalFormatter
124816
.
8359375
[
Integer
(
"
124
"
)
Group
(
"
"
)
Integer
(
"
816
"
)
Decimal
(
"
.
"
)
Fraction
(
"
8359375
"
)
]
)
;
var
usNoGroupingDecimalOptions
=
{
style
:
"
decimal
"
useGrouping
:
false
maximumFractionDigits
:
7
}
;
var
usNoGroupingDecimalFormatter
=
new
Intl
.
NumberFormat
(
"
en
-
US
"
usNoGroupingDecimalOptions
)
;
assertParts
(
usNoGroupingDecimalFormatter
1337
[
Integer
(
"
1337
"
)
]
)
;
assertParts
(
usNoGroupingDecimalFormatter
-
6
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
6
"
)
Decimal
(
"
.
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
usNoGroupingDecimalFormatter
-
1376
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
1376
"
)
Decimal
(
"
.
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
usNoGroupingDecimalFormatter
124816
.
8359375
[
Integer
(
"
124816
"
)
Decimal
(
"
.
"
)
Fraction
(
"
8359375
"
)
]
)
;
var
deDecimalOptions
=
{
style
:
"
decimal
"
maximumFractionDigits
:
7
}
;
var
deDecimalFormatter
=
new
Intl
.
NumberFormat
(
"
de
-
DE
"
deDecimalOptions
)
;
assertParts
(
deDecimalFormatter
42
[
Integer
(
"
42
"
)
]
)
;
assertParts
(
deDecimalFormatter
1337
[
Integer
(
"
1
"
)
Group
(
"
.
"
)
Integer
(
"
337
"
)
]
)
;
assertParts
(
deDecimalFormatter
-
6
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
6
"
)
Decimal
(
"
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
deDecimalFormatter
-
1376
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
1
"
)
Group
(
"
.
"
)
Integer
(
"
376
"
)
Decimal
(
"
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
deDecimalFormatter
124816
.
8359375
[
Integer
(
"
124
"
)
Group
(
"
.
"
)
Integer
(
"
816
"
)
Decimal
(
"
"
)
Fraction
(
"
8359375
"
)
]
)
;
var
deNoGroupingDecimalOptions
=
{
style
:
"
decimal
"
useGrouping
:
false
maximumFractionDigits
:
7
}
;
var
deNoGroupingDecimalFormatter
=
new
Intl
.
NumberFormat
(
"
de
-
DE
"
deNoGroupingDecimalOptions
)
;
assertParts
(
deNoGroupingDecimalFormatter
1337
[
Integer
(
"
1337
"
)
]
)
;
assertParts
(
deNoGroupingDecimalFormatter
-
6
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
6
"
)
Decimal
(
"
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
deNoGroupingDecimalFormatter
-
1376
.
25
[
MinusSign
(
"
-
"
)
Integer
(
"
1376
"
)
Decimal
(
"
"
)
Fraction
(
"
25
"
)
]
)
;
assertParts
(
deNoGroupingDecimalFormatter
124816
.
8359375
[
Integer
(
"
124816
"
)
Decimal
(
"
"
)
Fraction
(
"
8359375
"
)
]
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
'
ok
'
)
;
print
(
"
Tests
complete
"
)
;
