var
BUGNUMBER
=
1434429
;
var
summary
=
"
Report
unterminated
string
/
template
literal
errors
with
the
line
/
column
"
+
"
number
of
the
point
of
non
-
termination
"
;
function
test
(
f
quotes
[
line
col
]
)
{
var
caught
=
false
;
try
{
f
(
)
;
}
catch
(
e
)
{
caught
=
true
;
assertEq
(
e
.
lineNumber
line
"
line
number
"
)
;
assertEq
(
e
.
columnNumber
col
"
column
number
"
)
;
assertEq
(
e
.
message
.
includes
(
quotes
)
true
"
message
must
contain
delimiter
"
)
;
}
assertEq
(
caught
true
)
;
}
test
(
function
(
)
{
eval
(
"
'
hi
"
)
;
}
"
'
'
"
[
1
4
]
)
;
test
(
function
(
)
{
eval
(
"
'
hi
\
\
"
)
;
}
"
'
'
"
[
1
5
]
)
;
test
(
function
(
)
{
eval
(
"
'
hi
"
)
;
}
"
'
'
"
[
1
7
]
)
;
test
(
function
(
)
{
eval
(
"
'
hi
\
\
"
)
;
}
"
'
'
"
[
1
8
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
'
)
;
}
'
"
"
'
[
2
8
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
\
\
'
)
;
}
'
"
"
'
[
2
9
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
\
\
\
n
bye
\
\
\
n
no
really
'
)
;
}
'
"
"
'
[
4
14
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
\
\
\
n
bye
\
\
\
n
no
really
\
\
'
)
;
}
'
"
"
'
[
4
15
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
\
\
\
n
bye
\
n
'
)
;
}
'
"
"
'
[
3
9
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
"
hi
\
\
\
n
bye
\
\
'
)
;
}
'
"
"
'
[
3
10
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
'
)
;
}
'
'
[
2
8
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
\
\
'
)
;
}
'
'
[
2
9
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
htmlEscape
'
)
;
}
'
'
[
2
16
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
htmlEscape
\
\
'
)
;
}
'
'
[
2
17
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
htmlEscape
\
n
'
)
;
}
'
'
[
3
5
]
)
;
test
(
function
(
)
{
eval
(
'
var
x
=
\
n
htmlEscape
\
n
\
\
'
)
;
}
'
'
[
3
6
]
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
"
ok
"
)
;
print
(
"
Tests
complete
"
)
;
