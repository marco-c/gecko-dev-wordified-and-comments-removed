var
BUGNUMBER
=
1337209
;
var
summary
=
"
Test
gray
marking
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
if
(
typeof
gczeal
!
=
=
'
undefined
'
)
gczeal
(
0
)
;
function
test
(
)
{
grayRoot
(
)
.
x
=
Object
.
create
(
null
)
;
addMarkObservers
(
[
grayRoot
(
)
grayRoot
(
)
.
x
this
Object
.
create
(
null
)
]
)
;
gc
(
)
;
let
marks
=
getMarks
(
)
;
assertEq
(
marks
[
0
]
'
gray
'
'
gray
root
'
)
;
assertEq
(
marks
[
1
]
'
gray
'
'
object
reachable
from
gray
root
'
)
;
assertEq
(
marks
[
2
]
'
black
'
'
global
'
)
;
assertEq
(
marks
[
3
]
'
dead
'
'
dead
object
should
have
been
collected
'
)
;
grayRoot
(
)
.
x
=
7
;
gc
(
)
;
marks
=
getMarks
(
)
;
assertEq
(
marks
[
0
]
'
gray
'
'
gray
root
'
)
;
assertEq
(
marks
[
1
]
'
dead
'
'
object
no
longer
reachable
from
gray
root
'
)
;
assertEq
(
marks
[
2
]
'
black
'
'
global
'
)
;
assertEq
(
marks
[
3
]
'
dead
'
'
dead
object
should
have
been
collected
'
)
;
var
wm
=
new
WeakMap
(
)
;
var
global
=
newGlobal
(
{
newCompartment
:
true
}
)
;
var
wrapper1
=
global
.
eval
(
"
Object
.
create
(
null
)
"
)
;
wrapper1
.
name
=
"
wrapper1
"
;
var
value1
=
Object
.
create
(
null
)
;
wm
.
set
(
wrapper1
value1
)
;
var
wrapper2
=
global
.
eval
(
"
Object
.
create
(
null
)
"
)
;
wrapper2
.
name
=
"
wrapper2
"
;
var
value2
=
global
.
eval
(
"
Object
.
create
(
null
)
"
)
;
wm
.
set
(
wrapper2
value2
)
;
grayRoot
(
)
.
root1
=
wrapper1
;
grayRoot
(
)
.
root2
=
wrapper2
;
clearMarkObservers
(
)
;
addMarkObservers
(
[
wrapper1
value1
wrapper2
value2
]
)
;
wrapper1
=
wrapper2
=
null
;
value1
=
value2
=
null
;
gc
(
)
;
marks
=
getMarks
(
)
;
assertEq
(
marks
[
0
]
'
gray
'
'
gray
key
1
'
)
;
assertEq
(
marks
[
1
]
'
gray
'
'
black
map
gray
key
=
>
gray
value
'
)
;
assertEq
(
marks
[
2
]
'
gray
'
'
gray
key
2
'
)
;
assertEq
(
marks
[
3
]
'
gray
'
'
black
map
gray
key
=
>
gray
value
'
)
;
wrapper1
=
grayRoot
(
)
.
root1
;
gc
(
)
;
marks
=
getMarks
(
)
;
assertEq
(
marks
[
0
]
'
black
'
'
black
key
1
'
)
;
assertEq
(
marks
[
1
]
'
black
'
'
black
map
black
key
=
>
black
value
'
)
;
assertEq
(
marks
[
2
]
'
gray
'
'
gray
key
2
'
)
;
assertEq
(
marks
[
3
]
'
gray
'
'
black
map
gray
key
=
>
gray
value
'
)
;
clearMarkObservers
(
)
;
wm
=
new
WeakMap
(
)
;
let
key
=
Object
.
create
(
null
)
;
global
.
grayRoot
(
)
.
delegate
=
key
;
let
value
=
Object
.
create
(
null
)
;
wm
.
set
(
key
value
)
;
grayRoot
(
)
.
value
=
value
;
global
.
addMarkObservers
(
[
wm
key
value
]
)
;
addMarkObservers
(
[
wm
key
value
]
)
;
key
=
null
;
value
=
null
;
gc
(
)
;
let
[
other_map_mark
other_key_mark
other_value_mark
map_mark
key_mark
value_mark
]
=
getMarks
(
)
;
assertEq
(
other_map_mark
'
dead
'
'
nothing
points
to
wm
in
other
compartment
'
)
;
assertEq
(
other_key_mark
'
gray
'
'
delegate
should
be
gray
'
)
;
assertEq
(
other_value_mark
'
dead
'
'
nothing
points
to
value
wrapper
in
other
compartment
'
)
;
assertEq
(
map_mark
'
black
'
'
map
in
var
=
>
black
'
)
;
assertEq
(
key_mark
'
gray
'
'
black
map
gray
delegate
=
>
gray
key
'
)
;
assertEq
(
value_mark
'
gray
'
'
black
map
gray
delegate
/
key
=
>
gray
value
'
)
;
global
.
delegate
=
global
.
grayRoot
(
)
.
delegate
;
gc
(
)
;
[
other_map_mark
other_key_mark
other_value_mark
map_mark
key_mark
value_mark
]
=
getMarks
(
)
;
assertEq
(
other_map_mark
'
dead
'
'
nothing
points
to
wm
in
other
compartment
'
)
;
assertEq
(
other_key_mark
'
black
'
'
delegate
held
in
global
.
delegate
'
)
;
assertEq
(
other_value_mark
'
dead
'
'
nothing
points
to
value
wrapper
in
other
compartment
'
)
;
assertEq
(
map_mark
'
black
'
'
map
in
var
=
>
black
'
)
;
assertEq
(
key_mark
'
black
'
'
black
map
black
delegate
=
>
black
key
'
)
;
assertEq
(
value_mark
'
black
'
'
black
map
black
key
=
>
black
value
'
)
;
grayRoot
(
)
.
map
=
wm
;
wm
=
null
;
gc
(
)
;
[
other_map_mark
other_key_mark
other_value_mark
map_mark
key_mark
value_mark
]
=
getMarks
(
)
;
assertEq
(
other_map_mark
'
dead
'
'
nothing
points
to
wm
in
other
compartment
'
)
;
assertEq
(
other_key_mark
'
black
'
'
delegate
held
in
global
.
delegate
'
)
;
assertEq
(
other_value_mark
'
dead
'
'
nothing
points
to
value
wrapper
in
other
compartment
'
)
;
assertEq
(
map_mark
'
gray
'
'
map
is
a
gray
root
'
)
;
assertEq
(
key_mark
'
black
'
'
black
delegate
marks
its
key
black
'
)
;
assertEq
(
value_mark
'
gray
'
'
gray
map
black
key
=
>
gray
value
'
)
;
}
test
(
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
