function
check
(
v
)
{
try
{
serialize
(
v
)
;
}
catch
(
exc
)
{
return
;
}
throw
new
Error
(
"
serializing
"
+
JSON
.
stringify
(
v
)
+
"
should
have
failed
with
an
exception
"
)
;
}
check
(
new
Error
(
"
oops
"
)
)
;
check
(
this
)
;
check
(
Math
)
;
check
(
function
(
)
{
}
)
;
check
(
new
Proxy
(
{
}
{
}
)
)
;
check
(
{
get
x
(
)
{
throw
new
Error
(
"
fail
"
)
;
}
}
)
;
for
(
let
[
write_scope
read_scope
]
of
[
[
'
SameProcess
'
'
DifferentProcessForIndexedDB
'
]
[
'
SameProcess
'
'
DifferentProcess
'
]
]
)
{
var
ab
=
new
ArrayBuffer
(
12
)
;
var
buffer
=
serialize
(
ab
[
ab
]
{
scope
:
write_scope
}
)
;
var
caught
=
false
;
try
{
deserialize
(
buffer
{
scope
:
read_scope
}
)
;
}
catch
(
exc
)
{
caught
=
true
;
}
assertEq
(
caught
true
{
write_scope
}
clone
buffer
should
not
be
deserializable
as
{
read_scope
}
)
;
}
reportCompare
(
0
0
"
ok
"
)
;
