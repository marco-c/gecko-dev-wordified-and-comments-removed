function
check
(
v
)
{
try
{
serialize
(
v
)
;
}
catch
(
exc
)
{
return
;
}
throw
new
Error
(
"
serializing
"
+
JSON
.
stringify
(
v
)
+
"
should
have
failed
with
an
exception
"
)
;
}
check
(
new
Error
(
"
oops
"
)
)
;
check
(
this
)
;
check
(
Math
)
;
check
(
function
(
)
{
}
)
;
check
(
new
Proxy
(
{
}
{
}
)
)
;
check
(
{
get
x
(
)
{
throw
new
Error
(
"
fail
"
)
;
}
}
)
;
for
(
let
[
write_scope
read_scope
]
of
[
[
'
SameProcess
'
'
DifferentProcessForIndexedDB
'
]
[
'
SameProcess
'
'
DifferentProcess
'
]
]
)
{
var
ab
=
new
ArrayBuffer
(
12
)
;
var
buffer
=
serialize
(
ab
[
ab
]
{
scope
:
write_scope
}
)
;
var
caught
=
false
;
try
{
deserialize
(
buffer
{
scope
:
read_scope
}
)
;
}
catch
(
exc
)
{
caught
=
true
;
}
assertEq
(
caught
true
{
write_scope
}
clone
buffer
should
not
be
deserializable
as
{
read_scope
}
)
;
}
const
fuzzing
=
getBuildConfiguration
(
)
[
'
fuzzing
-
defined
'
]
;
const
shouldThrow
=
fuzzing
=
=
=
false
;
var
clone
=
serialize
(
{
foo
:
7
}
undefined
{
scope
:
'
DifferentProcess
'
}
)
;
deserialize
(
clone
)
;
clone
.
clonebuffer
=
clone
.
clonebuffer
+
"
\
0
\
0
\
0
\
0
\
0
\
0
\
0
\
0
"
;
var
exc
=
{
message
:
'
no
error
'
}
;
try
{
deserialize
(
clone
)
;
}
catch
(
e
)
{
exc
=
e
;
}
if
(
shouldThrow
)
{
assertEq
(
exc
.
message
.
includes
(
"
bad
serialized
structured
data
"
)
true
)
;
assertEq
(
exc
.
message
.
includes
(
"
extra
data
"
)
true
)
;
}
function
dumpData
(
data
)
{
data
.
forEach
(
(
x
i
)
=
>
print
(
[
{
i
}
]
0x
{
(
i
*
8
)
.
toString
(
16
)
}
:
0x
{
x
.
toString
(
16
)
}
)
)
;
}
function
testInnerExtraData
(
)
{
const
ab
=
new
ArrayBuffer
(
8
)
;
(
new
BigUint64Array
(
ab
)
)
[
0
]
=
0xdeadbeefn
;
const
clone
=
serialize
(
{
ABC
:
7
CBA
:
ab
}
[
ab
]
{
scope
:
'
DifferentProcess
'
}
)
;
const
data
=
[
.
.
.
new
BigUint64Array
(
clone
.
arraybuffer
)
]
;
dumpData
(
data
)
;
const
fake
=
new
ArrayBuffer
(
clone
.
arraybuffer
.
byteLength
+
24
)
;
const
view
=
new
BigUint64Array
(
fake
)
;
view
.
set
(
new
BigUint64Array
(
clone
.
arraybuffer
)
0
)
;
view
[
1
]
=
view
[
1
]
&
~
1n
;
view
[
5
]
+
=
24n
;
view
[
9
]
=
0xffff00030000000dn
;
view
[
16
]
=
0xfeeddeadbeef2dadn
;
view
[
17
]
=
view
[
14
]
;
view
[
18
]
=
view
[
15
]
;
view
[
19
]
=
0x1cedc0ffeen
;
dumpData
(
view
)
;
clone
.
arraybuffer
=
fake
;
let
d
;
let
exc
;
try
{
d
=
deserialize
(
clone
)
;
print
(
JSON
.
stringify
(
d
)
)
;
print
(
new
BigUint64Array
(
d
.
CBA
)
[
0
]
.
toString
(
16
)
)
;
}
catch
(
e
)
{
exc
=
e
;
}
const
fuzzing
=
getBuildConfiguration
(
)
[
'
fuzzing
-
defined
'
]
;
const
shouldThrow
=
fuzzing
=
=
=
false
;
if
(
shouldThrow
)
{
assertEq
(
Boolean
(
exc
)
true
)
;
assertEq
(
exc
.
message
.
includes
(
"
extra
data
"
)
true
)
;
print
(
PASS
with
FUZZING
:
Found
expected
exception
"
{
exc
.
message
}
"
)
;
}
else
{
assertEq
(
new
BigUint64Array
(
d
.
CBA
)
[
0
]
.
toString
(
16
)
"
1cedc0ffee
"
)
;
assertEq
(
d
.
ABC
13
)
;
print
(
"
PASS
without
FUZZING
"
)
;
}
}
testInnerExtraData
(
)
;
reportCompare
(
0
0
"
ok
"
)
;
