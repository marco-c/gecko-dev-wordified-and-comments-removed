var
constructors
=
[
{
constructor
:
Object
}
{
constructor
:
Function
}
{
constructor
:
Boolean
}
{
constructor
:
Error
}
{
constructor
:
EvalError
}
{
constructor
:
RangeError
}
{
constructor
:
ReferenceError
}
{
constructor
:
SyntaxError
}
{
constructor
:
TypeError
}
{
constructor
:
URIError
}
{
constructor
:
Number
}
{
constructor
:
Date
}
{
constructor
:
String
}
{
constructor
:
RegExp
}
{
constructor
:
Array
}
{
constructor
:
Int8Array
}
{
constructor
:
Map
}
{
constructor
:
Set
}
{
constructor
:
WeakMap
}
{
constructor
:
WeakSet
}
{
constructor
:
ArrayBuffer
}
.
.
.
(
typeof
SharedArrayBuffer
=
=
=
"
function
"
?
[
{
constructor
:
SharedArrayBuffer
}
]
:
[
]
)
{
constructor
:
DataView
args
:
[
new
ArrayBuffer
(
0
)
]
}
{
constructor
:
function
*
(
)
{
}
.
constructor
}
{
constructor
:
async
function
*
(
)
{
}
.
constructor
}
{
constructor
:
Promise
args
:
[
function
(
)
{
}
]
}
{
constructor
:
async
function
(
)
{
}
.
constructor
}
{
constructor
:
function
(
)
{
}
}
.
.
.
(
typeof
Intl
!
=
=
"
undefined
"
?
[
{
constructor
:
Intl
.
Collator
}
{
constructor
:
Intl
.
NumberFormat
}
{
constructor
:
Intl
.
DateTimeFormat
}
{
constructor
:
Intl
.
PluralRules
}
{
constructor
:
Intl
.
RelativeTimeFormat
}
.
.
.
(
Intl
.
Locale
?
[
Intl
.
Locale
]
:
[
]
)
]
:
[
]
)
]
;
for
(
let
{
constructor
args
=
[
]
}
of
constructors
)
{
let
revoked
=
0
;
let
{
proxy
revoke
}
=
Proxy
.
revocable
(
function
(
)
{
}
{
get
(
t
pk
r
)
{
if
(
pk
=
=
=
"
prototype
"
)
{
revoked
+
+
;
revoke
(
)
;
return
undefined
;
}
return
Reflect
.
get
(
t
pk
r
)
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
Reflect
.
construct
(
constructor
args
proxy
)
;
}
TypeError
)
;
assertEq
(
revoked
1
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
