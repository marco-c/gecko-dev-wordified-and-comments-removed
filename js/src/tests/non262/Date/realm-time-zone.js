const
nsPerMinute
=
60
*
1000
*
1000
*
1000
;
const
defaultTimeZone
=
"
PST8PDT
"
;
assertEq
(
[
"
PST
"
"
PDT
"
]
.
includes
(
getTimeZone
(
)
)
true
)
;
const
canonicalDefaultTimeZone
=
new
Intl
.
DateTimeFormat
(
"
en
"
{
timeZone
:
defaultTimeZone
}
)
.
resolvedOptions
(
)
.
timeZone
;
function
test
(
timeZone
)
{
assertEq
(
getRealmTimeZone
(
)
canonicalDefaultTimeZone
)
;
var
g
=
newGlobal
(
{
timeZone
}
)
;
var
initialTimeZone
=
timeZone
?
?
canonicalDefaultTimeZone
;
assertEq
(
g
.
getRealmTimeZone
(
)
initialTimeZone
)
;
var
d
=
new
g
.
Date
(
)
;
assertEq
(
d
.
getTimezoneOffset
(
)
*
nsPerMinute
-
d
.
toTemporalInstant
(
)
.
toZonedDateTimeISO
(
initialTimeZone
)
.
offsetNanoseconds
)
;
g
.
setRealmTimeZone
(
"
Asia
/
Tokyo
"
)
;
assertEq
(
g
.
getRealmTimeZone
(
)
"
Asia
/
Tokyo
"
)
;
assertEq
(
getRealmTimeZone
(
)
canonicalDefaultTimeZone
)
;
assertEq
(
d
.
getTimezoneOffset
(
)
*
nsPerMinute
-
d
.
toTemporalInstant
(
)
.
toZonedDateTimeISO
(
"
Asia
/
Tokyo
"
)
.
offsetNanoseconds
)
;
g
.
setRealmTimeZone
(
undefined
)
;
assertEq
(
g
.
getRealmTimeZone
(
)
canonicalDefaultTimeZone
)
;
assertEq
(
d
.
getTimezoneOffset
(
)
*
nsPerMinute
-
d
.
toTemporalInstant
(
)
.
toZonedDateTimeISO
(
defaultTimeZone
)
.
offsetNanoseconds
)
;
}
test
(
)
;
test
(
"
Europe
/
London
"
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
