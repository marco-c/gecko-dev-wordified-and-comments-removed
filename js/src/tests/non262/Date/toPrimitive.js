var
toPrimitive
=
Date
.
prototype
[
Symbol
.
toPrimitive
]
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
undefined
"
default
"
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
3
"
default
"
)
TypeError
)
;
var
obj
=
{
toString
(
)
{
return
"
str
"
;
}
valueOf
(
)
{
return
"
val
"
;
}
}
;
assertEq
(
toPrimitive
.
call
(
obj
"
number
"
)
"
val
"
)
;
assertEq
(
toPrimitive
.
call
(
obj
"
string
"
)
"
str
"
)
;
assertEq
(
toPrimitive
.
call
(
obj
"
default
"
)
"
str
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
obj
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
obj
undefined
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
obj
"
boolean
"
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
obj
[
"
number
"
]
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
toPrimitive
.
call
(
obj
{
toString
(
)
{
throw
"
FAIL
"
;
}
}
)
TypeError
)
;
var
dateobj
=
new
Date
(
)
;
Date
.
prototype
.
toString
=
function
(
)
{
assertEq
(
this
dateobj
)
;
return
14
;
}
;
Date
.
prototype
.
valueOf
=
function
(
)
{
return
"
92
"
;
}
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
number
"
)
"
92
"
)
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
string
"
)
14
)
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
default
"
)
14
)
;
assertEq
(
dateobj
=
=
14
true
)
;
Date
.
prototype
.
toString
=
{
}
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
string
"
)
"
92
"
)
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
default
"
)
"
92
"
)
;
Date
.
prototype
.
toString
=
function
(
)
{
return
15
;
}
;
Date
.
prototype
.
valueOf
=
"
ponies
"
;
assertEq
(
dateobj
[
Symbol
.
toPrimitive
]
(
"
number
"
)
15
)
;
Date
.
prototype
.
toString
=
"
ponies
"
;
assertThrowsInstanceOf
(
(
)
=
>
dateobj
[
Symbol
.
toPrimitive
]
(
"
default
"
)
TypeError
)
;
assertEq
(
toPrimitive
.
name
"
[
Symbol
.
toPrimitive
]
"
)
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
Date
.
prototype
Symbol
.
toPrimitive
)
;
assertEq
(
desc
.
configurable
true
)
;
assertEq
(
desc
.
enumerable
false
)
;
assertEq
(
desc
.
writable
false
)
;
reportCompare
(
0
0
)
;
