function
makeTestCases
(
)
{
const
resolveIndex
=
object
=
>
0
in
object
;
const
resolveFunction
=
object
=
>
"
length
"
in
object
;
const
expected
=
array
=
>
(
{
keys
:
Object
.
keys
(
array
)
values
:
Object
.
values
(
array
)
entries
:
Object
.
entries
(
array
)
}
)
;
return
[
{
object
:
function
(
)
{
return
arguments
;
}
(
)
resolve
:
resolveIndex
.
.
.
expected
(
[
]
)
}
{
object
:
function
(
x
)
{
return
arguments
;
}
(
1
)
resolve
:
resolveIndex
.
.
.
expected
(
[
1
]
)
}
{
object
:
function
(
x
y
z
)
{
return
arguments
;
}
(
1
2
3
)
resolve
:
resolveIndex
.
.
.
expected
(
[
1
2
3
]
)
}
{
object
:
function
(
)
{
"
use
strict
"
;
return
arguments
;
}
(
)
resolve
:
resolveIndex
.
.
.
expected
(
[
]
)
}
{
object
:
function
(
x
)
{
"
use
strict
"
;
return
arguments
;
}
(
1
)
resolve
:
resolveIndex
.
.
.
expected
(
[
1
]
)
}
{
object
:
function
(
x
y
z
)
{
"
use
strict
"
;
return
arguments
;
}
(
1
2
3
)
resolve
:
resolveIndex
.
.
.
expected
(
[
1
2
3
]
)
}
{
object
:
new
String
(
"
"
)
resolve
:
resolveIndex
.
.
.
expected
(
[
]
)
}
{
object
:
new
String
(
"
a
"
)
resolve
:
resolveIndex
.
.
.
expected
(
[
"
a
"
]
)
}
{
object
:
new
String
(
"
abc
"
)
resolve
:
resolveIndex
.
.
.
expected
(
[
"
a
"
"
b
"
"
c
"
]
)
}
{
object
:
function
(
)
{
}
resolve
:
resolveFunction
.
.
.
expected
(
[
]
)
}
]
;
}
var
assertWith
=
{
keys
:
assertEqArray
values
:
assertEqArray
entries
(
actual
expected
)
{
assertEq
(
actual
.
length
expected
.
length
)
;
for
(
let
i
=
0
;
i
<
expected
.
length
;
+
+
i
)
assertEqArray
(
actual
[
i
]
expected
[
i
]
)
;
}
}
;
for
(
let
method
of
[
"
keys
"
"
values
"
"
entries
"
]
)
{
let
assert
=
assertWith
[
method
]
;
for
(
let
{
object
[
method
]
:
expected
}
of
makeTestCases
(
)
)
{
assert
(
Object
[
method
]
(
object
)
expected
)
;
assert
(
Object
[
method
]
(
object
)
expected
)
;
}
for
(
let
{
object
resolve
[
method
]
:
expected
}
of
makeTestCases
(
)
)
{
resolve
(
object
)
;
assert
(
Object
[
method
]
(
object
)
expected
)
;
assert
(
Object
[
method
]
(
object
)
expected
)
;
}
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
