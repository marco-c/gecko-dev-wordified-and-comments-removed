function
createScope
(
)
{
let
log
=
[
]
;
let
environment
=
{
}
;
let
scope
=
new
Proxy
(
environment
new
Proxy
(
{
has
(
target
property
)
{
log
.
push
(
{
target
property
}
)
;
return
Reflect
.
has
(
target
property
)
;
}
get
(
target
property
receiver
)
{
log
.
push
(
{
target
property
receiver
}
)
;
return
Reflect
.
get
(
target
property
receiver
)
;
}
set
(
target
property
value
receiver
)
{
log
.
push
(
{
target
property
value
receiver
}
)
;
return
Reflect
.
set
(
target
property
value
receiver
)
;
}
getOwnPropertyDescriptor
(
target
property
)
{
log
.
push
(
{
target
property
}
)
;
return
Reflect
.
getOwnPropertyDescriptor
(
target
property
)
;
}
defineProperty
(
target
property
descriptor
)
{
log
.
push
(
{
target
property
descriptor
}
)
;
return
Reflect
.
defineProperty
(
target
property
descriptor
)
;
}
}
{
get
(
target
property
receiver
)
{
log
.
push
(
property
)
;
return
Reflect
.
get
(
target
property
receiver
)
;
}
}
)
)
;
return
{
log
environment
scope
}
;
}
{
let
{
log
environment
scope
}
=
createScope
(
)
;
environment
.
a
=
true
;
with
(
scope
)
{
a
&
&
=
false
;
}
assertEq
(
environment
.
a
false
)
;
with
(
scope
)
{
a
&
&
=
true
;
}
assertEq
(
environment
.
a
false
)
;
assertDeepEq
(
log
.
slice
(
)
[
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
"
set
"
{
target
:
environment
property
:
"
a
"
value
:
false
receiver
:
scope
}
"
getOwnPropertyDescriptor
"
{
target
:
environment
property
:
"
a
"
}
"
defineProperty
"
{
target
:
environment
property
:
"
a
"
descriptor
:
{
value
:
false
}
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
]
)
;
}
{
let
{
log
environment
scope
}
=
createScope
(
)
;
environment
.
a
=
false
;
with
(
scope
)
{
a
|
|
=
true
;
}
assertEq
(
environment
.
a
true
)
;
with
(
scope
)
{
a
|
|
=
false
;
}
assertEq
(
environment
.
a
true
)
;
assertDeepEq
(
log
.
slice
(
)
[
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
"
set
"
{
target
:
environment
property
:
"
a
"
value
:
true
receiver
:
scope
}
"
getOwnPropertyDescriptor
"
{
target
:
environment
property
:
"
a
"
}
"
defineProperty
"
{
target
:
environment
property
:
"
a
"
descriptor
:
{
value
:
true
}
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
]
)
;
}
{
let
{
log
environment
scope
}
=
createScope
(
)
;
environment
.
a
=
null
;
with
(
scope
)
{
a
?
?
=
true
;
}
assertEq
(
environment
.
a
true
)
;
with
(
scope
)
{
a
?
?
=
false
;
}
assertEq
(
environment
.
a
true
)
;
assertDeepEq
(
log
.
slice
(
)
[
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
"
set
"
{
target
:
environment
property
:
"
a
"
value
:
true
receiver
:
scope
}
"
getOwnPropertyDescriptor
"
{
target
:
environment
property
:
"
a
"
}
"
defineProperty
"
{
target
:
environment
property
:
"
a
"
descriptor
:
{
value
:
true
}
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
Symbol
.
unscopables
receiver
:
scope
}
"
has
"
{
target
:
environment
property
:
"
a
"
}
"
get
"
{
target
:
environment
property
:
"
a
"
receiver
:
scope
}
]
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
