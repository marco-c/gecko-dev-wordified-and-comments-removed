function
argsLength
(
)
{
return
{
value
:
arguments
.
length
}
;
}
function
sum
(
.
.
.
rest
)
{
return
{
value
:
rest
.
reduce
(
(
a
c
)
=
>
a
+
c
0
)
}
;
}
function
call
(
f
argList
)
{
return
eval
(
(
{
f
}
(
{
argList
}
)
)
.
value
)
;
}
function
newCall
(
F
argList
)
{
return
eval
(
(
new
{
F
}
(
{
argList
}
)
)
.
value
)
;
}
function
superCall
(
superClass
argList
)
{
return
eval
(
(
new
class
extends
{
superClass
}
{
constructor
(
)
{
super
(
{
argList
}
)
;
}
}
)
.
value
)
;
}
for
(
let
type
of
[
call
newCall
superCall
]
)
{
let
test
=
type
.
bind
(
null
"
argsLength
"
)
;
assertEq
(
test
(
"
10
"
)
1
)
;
assertEq
(
test
(
"
10
20
"
)
2
)
;
assertEq
(
test
(
"
10
20
30
"
)
3
)
;
assertEq
(
test
(
"
10
20
30
40
"
)
4
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
"
)
2
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
30
"
)
3
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
.
.
.
[
30
]
"
)
3
)
;
}
for
(
let
type
of
[
call
newCall
superCall
]
)
{
let
test
=
type
.
bind
(
null
"
sum
"
)
;
assertEq
(
test
(
"
10
"
)
10
)
;
assertEq
(
test
(
"
10
20
"
)
30
)
;
assertEq
(
test
(
"
10
20
30
"
)
60
)
;
assertEq
(
test
(
"
10
20
30
40
"
)
100
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
"
)
30
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
30
"
)
60
)
;
assertEq
(
test
(
"
.
.
.
[
10
20
]
.
.
.
[
30
]
"
)
60
)
;
}
for
(
let
type
of
[
call
newCall
superCall
]
)
{
let
test
=
type
.
bind
(
null
"
f
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
b
"
)
SyntaxError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
