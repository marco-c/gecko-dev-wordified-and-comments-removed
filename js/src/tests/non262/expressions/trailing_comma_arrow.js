function
arrow
(
argList
parameters
=
"
"
returnExpr
=
"
"
)
{
return
eval
(
let
fun
=
(
{
argList
}
)
=
>
{
return
{
returnExpr
}
;
}
fun
(
{
parameters
}
)
;
)
;
}
function
arrowConcise
(
argList
parameters
=
"
"
returnExpr
=
"
null
"
)
{
return
eval
(
let
fun
=
(
{
argList
}
)
=
>
{
returnExpr
}
;
fun
(
{
parameters
}
)
;
)
;
}
const
tests
=
[
arrow
arrowConcise
]
;
for
(
let
test
of
tests
)
{
assertEq
(
test
(
"
a
"
"
10
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
a
b
"
"
10
20
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
a
=
30
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
a
=
30
b
=
40
"
"
"
"
a
+
b
"
)
70
)
;
assertEq
(
test
(
"
[
a
]
"
"
[
10
]
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
[
a
]
[
b
]
"
"
[
10
]
[
20
]
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
[
a
]
=
[
30
]
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
[
a
]
=
[
30
]
[
b
]
=
[
40
]
"
"
"
"
a
+
b
"
)
70
)
;
assertEq
(
test
(
"
{
a
}
"
"
{
a
:
10
}
"
"
a
"
)
10
)
;
assertEq
(
test
(
"
{
a
}
{
b
}
"
"
{
a
:
10
}
{
b
:
20
}
"
"
a
+
b
"
)
30
)
;
assertEq
(
test
(
"
{
a
}
=
{
a
:
30
}
"
"
"
"
a
"
)
30
)
;
assertEq
(
test
(
"
{
a
}
=
{
a
:
30
}
{
b
}
=
{
b
:
40
}
"
"
"
"
a
+
b
"
)
70
)
;
}
for
(
let
test
of
tests
)
{
assertEq
(
test
(
"
a
"
"
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
a
b
"
"
"
"
fun
.
length
"
)
2
)
;
assertEq
(
test
(
"
[
a
]
"
"
[
]
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
[
a
]
[
b
]
"
"
[
]
[
]
"
"
fun
.
length
"
)
2
)
;
assertEq
(
test
(
"
{
a
}
"
"
{
}
"
"
fun
.
length
"
)
1
)
;
assertEq
(
test
(
"
{
a
}
{
b
}
"
"
{
}
{
}
"
"
fun
.
length
"
)
2
)
;
}
for
(
let
test
of
tests
)
{
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
.
.
.
a
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
.
.
.
b
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
test
(
"
a
b
"
)
SyntaxError
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
a
=
>
{
}
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
a
=
>
null
"
)
SyntaxError
)
;
for
(
let
trail
of
[
"
"
"
;
"
"
\
n
=
>
{
}
"
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
b
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
.
.
.
a
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
.
.
.
b
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
b
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
.
.
.
a
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
a
)
"
+
trail
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
(
.
.
.
a
)
"
+
trail
)
SyntaxError
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
