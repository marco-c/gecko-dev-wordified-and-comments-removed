var
BUGNUMBER
=
1343158
;
var
summary
=
"
Error
.
stack
should
provide
meaningful
stack
trace
in
async
function
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
let
COOKIE
=
"
C0F5DBB89807
"
;
async
function
thrower
(
)
{
let
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
^
thrower
.
+
ErrorStack
.
js
:
11
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
inner
.
+
ErrorStack
.
js
:
38
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
middle
.
+
ErrorStack
.
js
:
58
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
throw
new
Error
(
COOKIE
)
;
}
async
function
inner
(
)
{
let
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
inner
.
+
ErrorStack
.
js
:
22
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
middle
.
+
ErrorStack
.
js
:
58
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
Promise
.
resolve
(
100
)
;
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
inner
.
+
ErrorStack
.
js
:
31
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
middle
.
+
ErrorStack
.
js
:
58
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
thrower
(
)
;
}
async
function
middle
(
)
{
let
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
inner
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
middle
.
+
ErrorStack
.
js
:
42
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
Promise
.
resolve
(
1000
)
;
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
inner
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
middle
.
+
ErrorStack
.
js
:
51
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
inner
(
)
;
}
async
function
outer
(
)
{
let
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
inner
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
middle
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
outer
.
+
ErrorStack
.
js
:
62
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
Promise
.
resolve
(
10000
)
;
stack
=
new
Error
(
)
.
stack
;
assertEq
(
/
thrower
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
inner
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
middle
.
+
ErrorStack
.
js
/
m
.
test
(
stack
)
false
toMessage
(
stack
)
)
;
assertEq
(
/
^
outer
.
+
ErrorStack
.
js
:
71
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
await
middle
(
)
;
}
try
{
getPromiseResult
(
outer
(
)
)
;
assertEq
(
true
false
)
;
}
catch
(
e
)
{
if
(
!
e
.
message
.
includes
(
COOKIE
)
)
throw
e
;
let
stack
=
e
.
stack
;
assertEq
(
/
^
thrower
.
+
ErrorStack
.
js
:
18
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
inner
.
+
ErrorStack
.
js
:
38
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
middle
.
+
ErrorStack
.
js
:
58
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
outer
.
+
ErrorStack
.
js
:
78
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
assertEq
(
/
^
async
\
*
.
+
ErrorStack
.
js
:
82
/
m
.
test
(
stack
)
true
toMessage
(
stack
)
)
;
}
function
toMessage
(
stack
)
{
return
[
stack
:
{
stack
.
replace
(
/
\
n
/
g
"
\
\
n
"
)
}
]
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
