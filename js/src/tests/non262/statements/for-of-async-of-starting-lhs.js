if
(
typeof
getRealmConfiguration
=
=
=
"
undefined
"
)
{
var
getRealmConfiguration
=
SpecialPowers
.
Cu
.
getJSTestingFunctions
(
)
.
getRealmConfiguration
;
}
const
IsTopLevelAwaitEnabled
=
getRealmConfiguration
(
)
.
topLevelAwait
;
const
AsyncFunction
=
async
function
(
)
{
}
.
constructor
;
function
assertNoError
(
f
msg
)
{
try
{
f
(
)
;
}
catch
(
e
)
{
assertEq
(
true
false
{
msg
}
:
{
e
}
)
;
}
}
function
assertSyntaxError
(
code
)
{
assertThrowsInstanceOf
(
function
(
)
{
Function
(
code
)
;
}
SyntaxError
"
Function
:
"
+
code
)
;
assertThrowsInstanceOf
(
function
(
)
{
AsyncFunction
(
code
)
;
}
SyntaxError
"
AsyncFunction
:
"
+
code
)
;
if
(
typeof
parseModule
=
=
=
"
function
"
)
{
assertThrowsInstanceOf
(
function
(
)
{
parseModule
(
code
)
;
}
SyntaxError
"
Module
:
"
+
code
)
;
}
}
function
assertNoSyntaxError
(
code
)
{
assertNoError
(
function
(
)
{
Function
(
code
)
;
}
"
Function
:
"
+
code
)
;
assertNoError
(
function
(
)
{
AsyncFunction
(
code
)
;
}
"
AsyncFunction
:
"
+
code
)
;
if
(
typeof
parseModule
=
=
=
"
function
"
)
{
assertNoError
(
function
(
)
{
parseModule
(
code
)
;
}
"
Module
:
"
+
code
)
;
}
}
function
assertNoSyntaxErrorAsyncContext
(
code
)
{
assertNoError
(
function
(
)
{
AsyncFunction
(
code
)
;
}
"
AsyncFunction
:
"
+
code
)
;
if
(
typeof
parseModule
=
=
=
"
function
"
&
&
IsTopLevelAwaitEnabled
)
{
assertNoError
(
function
(
)
{
parseModule
(
code
)
;
}
"
Module
:
"
+
code
)
;
}
}
const
invalidTestCases
=
[
"
for
(
async
of
=
>
{
}
in
[
]
)
;
"
"
for
(
async
o
\
\
u0066
=
>
{
}
in
[
]
)
;
"
"
for
(
async
of
=
>
{
}
of
[
]
)
;
"
"
for
(
async
o
\
\
u0066
=
>
{
}
of
[
]
)
;
"
"
for
(
async
of
[
]
)
;
"
"
for
await
(
async
of
=
>
{
}
of
[
]
)
;
"
"
for
await
(
async
o
\
\
u0066
=
>
{
}
of
[
]
)
;
"
]
;
for
(
let
source
of
invalidTestCases
)
{
assertSyntaxError
(
source
)
;
assertSyntaxError
(
source
.
split
(
"
"
)
.
join
(
"
\
n
"
)
)
;
}
assertNoSyntaxError
(
"
for
(
async
of
=
>
{
}
;
;
)
;
"
)
const
validTestCases
=
[
"
for
(
async
;
;
)
;
"
"
for
(
\
\
u0061sync
;
;
)
;
"
"
for
(
async
in
[
]
)
;
"
"
for
(
\
\
u0061sync
in
[
]
)
;
"
"
for
(
async
.
prop
in
[
]
)
;
"
"
for
(
async
[
0
]
in
[
]
)
;
"
"
for
(
\
\
u0061sync
of
[
]
)
;
"
"
for
(
async
.
prop
of
[
]
)
;
"
"
for
(
async
[
0
]
of
[
]
)
;
"
]
;
for
(
let
source
of
validTestCases
)
{
assertNoSyntaxError
(
source
)
;
assertNoSyntaxError
(
source
.
split
(
"
"
)
.
join
(
"
\
n
"
)
)
;
}
const
validTestCasesAsync
=
[
"
for
await
(
async
of
[
]
)
;
"
"
for
await
(
\
\
u0061sync
of
[
]
)
;
"
"
for
await
(
async
.
prop
of
[
]
)
;
"
"
for
await
(
async
[
0
]
of
[
]
)
;
"
]
;
for
(
let
source
of
validTestCasesAsync
)
{
assertNoSyntaxErrorAsyncContext
(
source
)
;
assertNoSyntaxErrorAsyncContext
(
source
.
split
(
"
"
)
.
join
(
"
\
n
"
)
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
