var
hasSharedMemory
=
!
!
(
this
.
SharedArrayBuffer
&
&
this
.
getSharedObject
&
&
this
.
setSharedObject
)
;
if
(
!
hasSharedMemory
)
{
reportCompare
(
true
true
)
;
quit
(
0
)
;
}
var
sab
=
new
SharedArrayBuffer
(
12
)
;
var
mem
=
new
Int32Array
(
sab
)
;
assertEq
(
getSharedObject
(
)
null
)
;
assertEq
(
setSharedObject
(
mem
.
buffer
)
undefined
)
;
assertEq
(
getSharedObject
(
)
=
=
null
false
)
;
var
v
=
getSharedObject
(
)
;
assertEq
(
v
.
byteLength
mem
.
buffer
.
byteLength
)
;
var
w
=
new
Int32Array
(
v
)
;
mem
[
0
]
=
314159
;
assertEq
(
w
[
0
]
314159
)
;
mem
[
0
]
=
0
;
setSharedObject
(
3
.
14
)
;
assertEq
(
getSharedObject
(
)
3
.
14
)
;
setSharedObject
(
null
)
;
assertEq
(
getSharedObject
(
)
null
)
;
setSharedObject
(
mem
.
buffer
)
;
setSharedObject
(
undefined
)
;
assertEq
(
getSharedObject
(
)
null
)
;
setSharedObject
(
mem
.
buffer
)
;
setSharedObject
(
)
;
assertEq
(
getSharedObject
(
)
null
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
{
x
:
10
y
:
20
}
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
[
1
2
]
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
new
ArrayBuffer
(
10
)
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
new
Int32Array
(
10
)
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
false
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
mem
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
"
abracadabra
"
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
(
)
=
>
37
)
Error
)
;
if
(
!
this
.
WebAssembly
|
|
!
wasmThreadsSupported
(
)
)
{
reportCompare
(
true
true
)
;
quit
(
0
)
;
}
setSharedObject
(
null
)
;
var
mem
=
new
WebAssembly
.
Memory
(
{
initial
:
1
maximum
:
1
shared
:
true
}
)
;
setSharedObject
(
mem
)
;
var
ia1
=
new
Int32Array
(
mem
.
buffer
)
;
var
mem2
=
getSharedObject
(
)
;
assertEq
(
mem2
.
buffer
instanceof
SharedArrayBuffer
true
)
;
assertEq
(
mem2
.
buffer
.
byteLength
65536
)
;
var
ia2
=
new
Int32Array
(
mem2
.
buffer
)
;
ia2
[
37
]
=
0x12345678
;
assertEq
(
ia1
[
37
]
0x12345678
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedObject
(
new
WebAssembly
.
Memory
(
{
initial
:
1
maximum
:
1
}
)
)
Error
)
;
var
mod
=
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
func
(
export
"
hi
"
)
(
result
i32
)
(
i32
.
const
37
)
)
(
import
"
m
"
"
f
"
(
param
i32
)
(
result
i32
)
)
)
)
)
;
setSharedObject
(
mod
)
;
var
mod2
=
getSharedObject
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
WebAssembly
.
Instance
(
mod2
{
m
:
{
}
}
)
WebAssembly
.
LinkError
)
;
new
WebAssembly
.
Instance
(
mod2
{
m
:
{
f
:
(
x
)
=
>
x
}
}
)
;
reportCompare
(
true
true
)
;
