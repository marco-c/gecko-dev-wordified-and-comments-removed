var
DEBUG
=
false
;
function
dprint
(
s
)
{
if
(
DEBUG
)
print
(
s
)
;
}
var
hasSharedArrayBuffer
=
!
!
(
this
.
SharedArrayBuffer
&
&
this
.
getSharedArrayBuffer
&
&
this
.
setSharedArrayBuffer
)
;
if
(
hasSharedArrayBuffer
)
{
var
sab
=
new
SharedArrayBuffer
(
12
)
;
var
mem
=
new
Int32Array
(
sab
)
;
assertEq
(
getSharedArrayBuffer
(
)
null
)
;
assertEq
(
setSharedArrayBuffer
(
mem
.
buffer
)
undefined
)
;
assertEq
(
getSharedArrayBuffer
(
)
=
=
null
false
)
;
var
v
=
getSharedArrayBuffer
(
)
;
assertEq
(
v
.
byteLength
mem
.
buffer
.
byteLength
)
;
var
w
=
new
Int32Array
(
v
)
;
mem
[
0
]
=
314159
;
assertEq
(
w
[
0
]
314159
)
;
mem
[
0
]
=
0
;
setSharedArrayBuffer
(
null
)
;
assertEq
(
getSharedArrayBuffer
(
)
null
)
;
setSharedArrayBuffer
(
mem
.
buffer
)
;
setSharedArrayBuffer
(
undefined
)
;
assertEq
(
getSharedArrayBuffer
(
)
null
)
;
setSharedArrayBuffer
(
mem
.
buffer
)
;
setSharedArrayBuffer
(
)
;
assertEq
(
getSharedArrayBuffer
(
)
null
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
{
x
:
10
y
:
20
}
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
[
1
2
]
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
new
ArrayBuffer
(
10
)
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
new
Int32Array
(
10
)
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
false
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
3
.
14
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
mem
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
"
abracadabra
"
)
Error
)
;
assertThrowsInstanceOf
(
(
)
=
>
setSharedArrayBuffer
(
(
)
=
>
37
)
Error
)
;
}
if
(
hasSharedArrayBuffer
&
&
helperThreadCount
(
)
!
=
=
0
)
{
mem
[
0
]
=
42
;
assertEq
(
Atomics
.
wait
(
mem
0
33
)
"
not
-
equal
"
)
;
assertEq
(
Atomics
.
wait
(
mem
0
42
100
)
"
timed
-
out
"
)
;
mem
[
0
]
=
42
;
mem
[
1
]
=
37
;
mem
[
2
]
=
DEBUG
;
setSharedArrayBuffer
(
mem
.
buffer
)
;
evalInWorker
(
var
mem
=
new
Int32Array
(
getSharedArrayBuffer
(
)
)
;
function
dprint
(
s
)
{
if
(
mem
[
2
]
)
print
(
s
)
;
}
assertEq
(
mem
[
0
]
42
)
;
assertEq
(
mem
[
1
]
37
)
;
mem
[
1
]
=
1337
;
dprint
(
"
Sleeping
for
2
seconds
"
)
;
sleep
(
2
)
;
dprint
(
"
Waking
the
main
thread
now
"
)
;
setSharedArrayBuffer
(
null
)
;
assertEq
(
Atomics
.
wake
(
mem
0
1
)
1
)
;
)
;
var
then
=
Date
.
now
(
)
;
assertEq
(
Atomics
.
wait
(
mem
0
42
)
"
ok
"
)
;
dprint
(
"
Woke
up
as
I
should
have
in
"
+
(
Date
.
now
(
)
-
then
)
/
1000
+
"
s
"
)
;
assertEq
(
mem
[
1
]
1337
)
;
assertEq
(
getSharedArrayBuffer
(
)
null
)
;
setSharedArrayBuffer
(
mem
.
buffer
)
;
evalInWorker
(
var
mem
=
new
Int32Array
(
getSharedArrayBuffer
(
)
)
;
sleep
(
2
)
;
assertEq
(
Atomics
.
wake
(
mem
0
)
1
)
;
)
;
var
then
=
Date
.
now
(
)
;
dprint
(
"
Main
thread
waiting
on
wakeup
(
2s
)
"
)
;
assertEq
(
Atomics
.
wait
(
mem
0
42
)
"
ok
"
)
;
dprint
(
"
Woke
up
as
I
should
have
in
"
+
(
Date
.
now
(
)
-
then
)
/
1000
+
"
s
"
)
;
var
exn
=
false
;
timeout
(
2
function
(
)
{
dprint
(
"
In
the
interrupt
starting
inner
wait
with
timeout
2s
"
)
;
try
{
Atomics
.
wait
(
mem
0
42
)
;
}
catch
(
e
)
{
dprint
(
"
Got
the
interrupt
exception
!
"
)
;
exn
=
true
;
}
return
true
;
}
)
;
try
{
dprint
(
"
Starting
outer
wait
"
)
;
assertEq
(
Atomics
.
wait
(
mem
0
42
5000
)
"
timed
-
out
"
)
;
}
finally
{
timeout
(
-
1
)
;
}
assertEq
(
exn
true
)
;
}
dprint
(
"
Done
"
)
;
reportCompare
(
true
true
)
;
