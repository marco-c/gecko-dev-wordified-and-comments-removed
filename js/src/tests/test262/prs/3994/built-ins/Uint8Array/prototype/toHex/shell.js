function
DETACHBUFFER
(
buffer
)
{
if
(
!
262
|
|
typeof
262
.
detachArrayBuffer
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
No
method
available
to
detach
an
ArrayBuffer
"
)
;
}
262
.
detachArrayBuffer
(
buffer
)
;
}
function
isConstructor
(
f
)
{
if
(
typeof
f
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
isConstructor
invoked
with
a
non
-
function
value
"
)
;
}
try
{
Reflect
.
construct
(
function
(
)
{
}
[
]
f
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
var
floatArrayConstructors
=
[
Float64Array
Float32Array
]
;
var
nonClampedIntArrayConstructors
=
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
;
var
intArrayConstructors
=
nonClampedIntArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
if
(
typeof
Float16Array
!
=
=
'
undefined
'
)
{
floatArrayConstructors
.
push
(
Float16Array
)
;
}
var
typedArrayConstructors
=
floatArrayConstructors
.
concat
(
intArrayConstructors
)
;
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
typedArrayConstructors
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
var
nonAtomicsFriendlyTypedArrayConstructors
=
floatArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
function
testWithNonAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
nonAtomicsFriendlyTypedArrayConstructors
)
;
}
function
testWithAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
)
;
}
function
testTypedArrayConversions
(
byteConversionValues
fn
)
{
var
values
=
byteConversionValues
.
values
;
var
expected
=
byteConversionValues
.
expected
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
name
=
TA
.
name
.
slice
(
0
-
5
)
;
return
values
.
forEach
(
function
(
value
index
)
{
var
exp
=
expected
[
name
]
[
index
]
;
var
initial
=
0
;
if
(
exp
=
=
=
0
)
{
initial
=
1
;
}
fn
(
TA
value
exp
initial
)
;
}
)
;
}
)
;
}
function
isFloatTypedArrayConstructor
(
arg
)
{
return
floatArrayConstructors
.
indexOf
(
arg
)
!
=
=
-
1
;
}
function
floatTypedArrayConstructorPrecision
(
FA
)
{
if
(
typeof
Float16Array
!
=
=
"
undefined
"
&
&
FA
=
=
=
Float16Array
)
{
return
"
half
"
;
}
else
if
(
FA
=
=
=
Float32Array
)
{
return
"
single
"
;
}
else
if
(
FA
=
=
=
Float64Array
)
{
return
"
double
"
;
}
else
{
throw
new
Error
(
"
Malformed
test
-
floatTypedArrayConstructorPrecision
called
with
non
-
float
TypedArray
"
)
;
}
}
