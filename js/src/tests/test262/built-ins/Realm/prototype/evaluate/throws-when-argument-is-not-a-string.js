assert
.
sameValue
(
typeof
Realm
.
prototype
.
evaluate
'
function
'
'
This
test
must
fail
if
Realm
.
prototype
.
evaluate
is
not
a
function
'
)
;
const
r
=
new
Realm
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
[
'
1
+
1
'
]
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
{
[
Symbol
.
toPrimitive
]
(
)
{
return
'
1
+
1
'
;
}
}
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
1
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
null
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
undefined
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
true
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
false
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
r
.
evaluate
(
new
String
(
'
nope
'
)
)
)
;
reportCompare
(
0
0
)
;
