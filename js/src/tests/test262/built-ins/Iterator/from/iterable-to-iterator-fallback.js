function
*
g
(
)
{
yield
0
;
yield
1
;
yield
2
;
}
let
iter
=
(
function
(
)
{
let
n
=
g
(
)
;
return
{
[
Symbol
.
iterator
]
:
0
next
:
(
)
=
>
n
.
next
(
)
}
;
}
)
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
Iterator
.
from
(
iter
)
;
}
)
;
iter
=
(
function
(
)
{
let
n
=
g
(
)
;
return
{
[
Symbol
.
iterator
]
:
null
next
:
(
)
=
>
n
.
next
(
)
}
;
}
)
(
)
;
assert
.
compareArray
(
Array
.
from
(
Iterator
.
from
(
iter
)
)
[
0
1
2
]
)
;
iter
=
(
function
(
)
{
let
n
=
g
(
)
;
return
{
[
Symbol
.
iterator
]
:
undefined
next
:
(
)
=
>
n
.
next
(
)
}
;
}
)
(
)
;
assert
.
compareArray
(
Array
.
from
(
Iterator
.
from
(
iter
)
)
[
0
1
2
]
)
;
reportCompare
(
0
0
)
;
