function
MakeIterable
(
iterator
)
{
return
{
[
Symbol
.
iterator
]
(
)
{
return
iterator
;
}
}
;
}
var
iterator
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
undefined
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
undefined
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
null
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
null
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
true
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
boolean
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
123
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
number
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
123n
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
bigint
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
"
abc
"
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
string
"
)
;
iterator
=
Iterator
.
concat
(
MakeIterable
(
Symbol
(
)
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
"
iterator
is
symbol
"
)
;
reportCompare
(
0
0
)
;
