function
*
g
(
)
{
yield
0
;
}
Number
.
prototype
[
Symbol
.
iterator
]
=
function
*
(
)
{
let
i
=
0
;
let
target
=
this
>
>
>
0
;
while
(
i
<
target
)
{
yield
i
;
+
+
i
;
}
}
;
assert
.
compareArray
(
Array
.
from
(
5
)
[
0
1
2
3
4
]
)
;
assert
.
throws
(
TypeError
function
(
)
{
for
(
let
unused
of
g
(
)
.
flatMap
(
v
=
>
5
)
)
;
}
)
;
let
iter
=
g
(
)
.
flatMap
(
v
=
>
new
Number
(
5
)
)
;
assert
.
compareArray
(
Array
.
from
(
iter
)
[
0
1
2
3
4
]
)
;
reportCompare
(
0
0
)
;
