let
effects
=
[
]
;
Iterator
.
prototype
.
take
.
call
(
{
get
next
(
)
{
effects
.
push
(
'
get
next
'
)
;
return
function
(
)
{
return
{
done
:
true
value
:
undefined
}
;
}
;
}
}
{
valueOf
(
)
{
effects
.
push
(
'
ToNumber
limit
'
)
;
return
0
;
}
}
)
;
assert
.
compareArray
(
effects
[
'
ToNumber
limit
'
'
get
next
'
]
)
;
effects
=
[
]
;
assert
.
throws
(
TypeError
function
(
)
{
Iterator
.
prototype
.
take
.
call
(
null
{
valueOf
(
)
{
effects
.
push
(
'
ToNumber
limit
'
)
;
return
0
;
}
}
)
;
}
)
;
assert
.
compareArray
(
effects
[
]
)
;
effects
=
[
]
;
assert
.
throws
(
RangeError
function
(
)
{
Iterator
.
prototype
.
take
.
call
(
{
get
next
(
)
{
effects
.
push
(
'
get
next
'
)
;
return
function
(
)
{
return
{
done
:
true
value
:
undefined
}
;
}
;
}
}
NaN
)
;
}
)
;
assert
.
compareArray
(
effects
[
]
)
;
reportCompare
(
0
0
)
;
