function
*
g
(
)
{
yield
1
;
yield
0
;
yield
2
;
yield
0
;
yield
3
;
yield
0
;
yield
4
;
}
let
iterator
=
g
(
)
;
let
predicateCalls
=
0
;
iterator
=
iterator
.
filter
(
value
=
>
{
+
+
predicateCalls
;
return
value
!
=
=
0
;
}
)
;
let
resultCount
=
0
;
for
(
let
value
of
iterator
)
{
+
+
resultCount
;
assert
.
sameValue
(
value
resultCount
)
;
}
assert
.
sameValue
(
resultCount
4
)
;
let
{
value
done
}
=
iterator
.
next
(
)
;
assert
.
sameValue
(
value
undefined
)
;
assert
.
sameValue
(
done
true
)
;
reportCompare
(
0
0
)
;
