let
IteratorPrototype
=
Object
.
getPrototypeOf
(
Object
.
getPrototypeOf
(
[
]
[
Symbol
.
iterator
]
(
)
)
)
let
sentinel
=
{
}
;
let
{
get
set
}
=
Object
.
getOwnPropertyDescriptor
(
Iterator
.
prototype
'
constructor
'
)
;
assert
.
sameValue
(
Iterator
.
prototype
.
constructor
Iterator
)
;
assert
.
sameValue
(
get
.
call
(
)
Iterator
)
;
assert
.
throws
(
TypeError
(
)
=
>
set
.
call
(
undefined
'
'
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
set
.
call
(
null
'
'
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
set
.
call
(
true
'
'
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
set
.
call
(
IteratorPrototype
'
'
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
IteratorPrototype
.
constructor
=
'
'
)
;
assert
.
sameValue
(
Iterator
.
prototype
.
constructor
Iterator
)
;
assert
.
sameValue
(
get
.
call
(
)
Iterator
)
;
let
FakeGeneratorPrototype
=
Object
.
create
(
IteratorPrototype
)
;
Object
.
freeze
(
IteratorPrototype
)
;
FakeGeneratorPrototype
.
constructor
=
sentinel
;
assert
.
sameValue
(
FakeGeneratorPrototype
.
constructor
sentinel
)
;
assert
.
sameValue
(
Iterator
.
prototype
.
constructor
Iterator
)
;
assert
.
sameValue
(
get
.
call
(
)
Iterator
)
;
let
o
=
{
constructor
:
sentinel
+
'
a
'
}
;
set
.
call
(
o
sentinel
)
;
assert
.
sameValue
(
o
.
constructor
sentinel
)
;
assert
.
sameValue
(
Iterator
.
prototype
.
constructor
Iterator
)
;
assert
.
sameValue
(
get
.
call
(
)
Iterator
)
;
reportCompare
(
0
0
)
;
