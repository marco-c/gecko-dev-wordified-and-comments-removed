const
s1
=
new
Set
(
[
1
2
]
)
;
const
s2
=
{
size
:
2
has
:
(
v
)
=
>
{
if
(
v
=
=
=
1
)
return
false
;
if
(
v
=
=
=
2
)
return
true
;
throw
new
Test262Error
(
"
Set
.
prototype
.
intersection
should
only
call
its
argument
'
s
has
method
with
contents
of
this
"
)
;
}
keys
:
function
*
keys
(
)
{
throw
new
Test262Error
(
"
Set
.
prototype
.
intersection
should
not
call
its
argument
'
s
keys
iterator
when
this
.
size
arg
.
size
"
)
;
}
}
;
const
expected
=
[
2
]
;
const
combined
=
s1
.
intersection
(
s2
)
;
assert
.
compareArray
(
[
.
.
.
combined
]
expected
)
;
assert
.
sameValue
(
combined
instanceof
Set
true
"
The
returned
object
is
a
Set
"
)
;
reportCompare
(
0
0
)
;
