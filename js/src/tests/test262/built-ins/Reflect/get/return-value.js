var
o
=
{
}
;
o
.
p1
=
'
value
1
'
;
assert
.
sameValue
(
Reflect
.
get
(
o
'
p1
'
)
'
value
1
'
'
Return
value
from
data
descriptor
'
)
;
Object
.
defineProperty
(
o
'
p2
'
{
get
:
undefined
}
)
;
assert
.
sameValue
(
Reflect
.
get
(
o
'
p2
'
)
undefined
'
Return
undefined
if
getter
is
undefined
'
)
;
Object
.
defineProperty
(
o
'
p3
'
{
get
:
function
(
)
{
return
'
foo
'
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
get
(
o
'
p3
'
)
'
foo
'
'
Return
Call
(
getter
Receiver
)
'
)
;
var
o2
=
Object
.
create
(
{
p
:
42
}
)
;
assert
.
sameValue
(
Reflect
.
get
(
o2
'
p
'
)
42
'
Return
value
from
prototype
without
own
property
.
'
)
;
assert
.
sameValue
(
Reflect
.
get
(
o2
'
u
'
)
undefined
'
Return
undefined
without
property
on
the
object
and
its
prototype
'
)
;
reportCompare
(
0
0
)
;
