let
count
=
0
;
function
fn
(
.
.
.
args
)
{
count
+
+
;
return
args
;
}
let
f_unction
=
new
Function
(
)
;
Object
.
defineProperty
(
f_unction
"
length
"
{
get
(
)
{
return
1
;
}
}
)
;
assert
.
compareArray
(
Reflect
.
apply
(
fn
null
f_unction
)
[
undefined
]
)
;
let
object
=
new
Object
(
)
;
Object
.
defineProperty
(
object
"
length
"
{
get
(
)
{
return
1
;
}
}
)
;
assert
.
compareArray
(
Reflect
.
apply
(
fn
null
object
)
[
undefined
]
)
;
let
number
=
new
Number
(
)
;
Object
.
defineProperty
(
number
"
length
"
{
get
(
)
{
return
1
;
}
}
)
;
assert
.
compareArray
(
Reflect
.
apply
(
fn
null
number
)
[
undefined
]
)
;
let
boolean
=
new
Boolean
(
)
;
Object
.
defineProperty
(
boolean
"
length
"
{
get
(
)
{
return
1
;
}
}
)
;
assert
.
compareArray
(
Reflect
.
apply
(
fn
null
boolean
)
[
undefined
]
)
;
assert
.
sameValue
(
count
4
'
The
value
of
count
is
1
'
)
;
reportCompare
(
0
0
)
;
