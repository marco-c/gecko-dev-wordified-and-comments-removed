const
datetime
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_987_654_321n
"
UTC
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
null
}
)
"
null
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
true
}
)
"
true
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
false
}
)
"
false
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
Symbol
(
)
}
)
"
symbol
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
2
}
)
"
number
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
2n
}
)
"
bigint
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
datetime
.
with
(
{
second
:
41
}
{
overflow
:
{
}
}
)
"
plain
object
"
)
;
const
expected
=
[
"
get
overflow
.
toString
"
"
call
overflow
.
toString
"
]
;
const
actual
=
[
]
;
const
observer
=
TemporalHelpers
.
toPrimitiveObserver
(
actual
"
constrain
"
"
overflow
"
)
;
const
result
=
datetime
.
with
(
{
second
:
41
}
{
overflow
:
observer
}
)
;
assert
.
sameValue
(
result
.
epochNanoseconds
1_000_000_001_987_654_321n
"
object
with
toString
"
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
"
)
;
reportCompare
(
0
0
)
;
