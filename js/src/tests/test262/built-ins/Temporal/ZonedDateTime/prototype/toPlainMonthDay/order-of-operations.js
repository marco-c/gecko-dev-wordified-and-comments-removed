const
expected
=
[
"
get
this
.
calendar
.
fields
"
"
get
this
.
calendar
.
monthDayFromFields
"
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
calendar
.
fields
"
"
get
this
.
calendar
.
day
"
"
call
this
.
calendar
.
day
"
"
get
this
.
calendar
.
monthCode
"
"
call
this
.
calendar
.
monthCode
"
"
call
this
.
calendar
.
monthDayFromFields
"
]
;
const
actual
=
[
]
;
const
timeZone
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
this
.
timeZone
"
)
;
const
calendar
=
TemporalHelpers
.
calendarObserver
(
actual
"
this
.
calendar
"
)
;
const
instance
=
new
Temporal
.
ZonedDateTime
(
0n
timeZone
calendar
)
;
Object
.
defineProperties
(
instance
{
day
:
{
get
(
)
{
actual
.
push
(
"
get
this
.
day
"
)
;
return
TemporalHelpers
.
toPrimitiveObserver
(
actual
1
"
this
.
day
"
)
;
}
}
monthCode
:
{
get
(
)
{
actual
.
push
(
"
get
this
.
monthCode
"
)
;
return
TemporalHelpers
.
toPrimitiveObserver
(
actual
"
M01
"
"
this
.
monthCode
"
)
;
}
}
}
)
;
actual
.
splice
(
0
)
;
instance
.
toPlainMonthDay
(
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
"
)
;
reportCompare
(
0
0
)
;
