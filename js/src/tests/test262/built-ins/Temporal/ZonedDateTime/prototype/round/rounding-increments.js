const
zdt
=
new
Temporal
.
ZonedDateTime
(
217175010123456789n
"
+
01
:
00
"
)
;
const
expectedHours
=
new
Temporal
.
ZonedDateTime
(
217177200000000000n
"
+
01
:
00
"
)
;
const
expectedMinutes
=
new
Temporal
.
ZonedDateTime
(
217175400000000000n
"
+
01
:
00
"
)
;
const
expectedSeconds
=
new
Temporal
.
ZonedDateTime
(
217175010000000000n
"
+
01
:
00
"
)
;
const
expectedMilliseconds
=
new
Temporal
.
ZonedDateTime
(
217175010120000000n
"
+
01
:
00
"
)
;
const
expectedMicroseconds
=
new
Temporal
.
ZonedDateTime
(
217175010123460000n
"
+
01
:
00
"
)
;
const
expectedNanoseconds
=
new
Temporal
.
ZonedDateTime
(
217175010123456790n
"
+
01
:
00
"
)
;
const
expected1Day
=
new
Temporal
.
ZonedDateTime
(
217206000000000000n
"
+
01
:
00
"
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
hour
"
roundingIncrement
:
4
}
)
expectedHours
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
minute
"
roundingIncrement
:
15
}
)
expectedMinutes
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
second
"
roundingIncrement
:
30
}
)
expectedSeconds
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
millisecond
"
roundingIncrement
:
10
}
)
expectedMilliseconds
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
microsecond
"
roundingIncrement
:
10
}
)
expectedMicroseconds
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
nanosecond
"
roundingIncrement
:
10
}
)
expectedNanoseconds
)
;
TemporalHelpers
.
assertZonedDateTimesEqual
(
zdt
.
round
(
{
smallestUnit
:
"
day
"
roundingIncrement
:
1
}
)
expected1Day
)
;
reportCompare
(
0
0
)
;
