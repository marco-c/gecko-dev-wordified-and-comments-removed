const
calls
=
[
]
;
const
dayLengthNs
=
86400000000000n
;
const
other
=
new
Temporal
.
ZonedDateTime
(
dayLengthNs
"
UTC
"
"
iso8601
"
)
;
function
createRelativeTo
(
count
)
{
const
dayInstant
=
new
Temporal
.
Instant
(
dayLengthNs
)
;
const
substitutions
=
[
]
;
const
timeZone
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
TemporalHelpers
.
substituteMethod
(
timeZone
"
getPossibleInstantsFor
"
substitutions
)
;
substitutions
.
length
=
count
;
let
i
=
0
;
for
(
i
=
0
;
i
<
substitutions
.
length
;
i
+
+
)
{
substitutions
[
i
]
=
[
dayInstant
]
;
}
TemporalHelpers
.
observeMethod
(
calls
timeZone
"
getPossibleInstantsFor
"
)
;
return
new
Temporal
.
ZonedDateTime
(
0n
timeZone
)
;
}
let
zdt
=
createRelativeTo
(
50
)
;
calls
.
splice
(
0
)
;
zdt
.
since
(
other
{
largestUnit
:
"
day
"
}
)
;
assert
.
sameValue
(
calls
.
length
50
+
1
"
Expected
ZonedDateTime
.
since
to
call
getPossibleInstantsFor
correct
number
of
times
"
)
;
zdt
=
createRelativeTo
(
100
)
;
calls
.
splice
(
0
)
;
zdt
.
since
(
other
{
largestUnit
:
"
day
"
}
)
;
assert
.
sameValue
(
calls
.
length
100
+
1
"
Expected
ZonedDateTime
.
since
to
call
getPossibleInstantsFor
correct
number
of
times
"
)
;
zdt
=
createRelativeTo
(
105
)
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
since
(
other
{
largestUnit
:
"
day
"
}
)
"
105
days
>
2
ns
"
)
;
reportCompare
(
0
0
)
;
