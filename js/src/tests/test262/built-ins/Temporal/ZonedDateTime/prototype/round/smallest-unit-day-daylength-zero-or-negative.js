class
TimeZone
extends
Temporal
.
TimeZone
{
#
count
=
0
;
#
nanoseconds
;
constructor
(
nanoseconds
)
{
super
(
"
UTC
"
)
;
this
.
#
nanoseconds
=
nanoseconds
;
}
getPossibleInstantsFor
(
dateTime
)
{
if
(
+
+
this
.
#
count
=
=
=
2
)
{
return
[
new
Temporal
.
Instant
(
this
.
#
nanoseconds
)
]
;
}
return
super
.
getPossibleInstantsFor
(
dateTime
)
;
}
}
{
let
tz
=
new
TimeZone
(
0n
)
;
let
zoned
=
new
Temporal
.
ZonedDateTime
(
0n
tz
)
;
assert
.
throws
(
RangeError
(
)
=
>
zoned
.
round
(
{
smallestUnit
:
"
days
"
}
)
)
;
}
{
let
tz
=
new
TimeZone
(
-
1n
)
;
let
zoned
=
new
Temporal
.
ZonedDateTime
(
0n
tz
)
;
let
result
=
zoned
.
round
(
{
smallestUnit
:
"
days
"
}
)
;
assert
(
zoned
.
equals
(
result
)
)
;
}
reportCompare
(
0
0
)
;
