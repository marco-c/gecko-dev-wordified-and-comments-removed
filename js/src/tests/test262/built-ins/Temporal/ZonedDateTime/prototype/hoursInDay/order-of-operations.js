const
actual
=
[
]
;
const
expected
=
[
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
]
;
const
timeZone
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
this
.
timeZone
"
{
getOffsetNanosecondsFor
(
instant
)
{
const
epochNs
=
instant
.
epochNanoseconds
;
if
(
epochNs
<
1800_000_000_000n
)
return
0
;
if
(
epochNs
<
91800_000_000_000n
)
return
3600_000_000_000
;
if
(
epochNs
<
167400_000_000_000n
)
return
7200_000_000_000
;
if
(
epochNs
<
257400_000_000_000n
)
return
3600_000_000_000
;
return
0
;
}
getPossibleInstantsFor
(
dt
)
{
const
cmp
=
Temporal
.
PlainDateTime
.
compare
;
const
zero
=
new
Temporal
.
TimeZone
(
"
+
00
:
00
"
)
.
getInstantFor
(
dt
)
;
const
one
=
new
Temporal
.
TimeZone
(
"
+
01
:
00
"
)
.
getInstantFor
(
dt
)
;
const
two
=
new
Temporal
.
TimeZone
(
"
+
02
:
00
"
)
.
getInstantFor
(
dt
)
;
const
fallBackLocalOne
=
new
Temporal
.
PlainDateTime
(
1970
1
1
0
30
)
;
const
fallBackLocalTwo
=
new
Temporal
.
PlainDateTime
(
1970
1
2
0
30
)
;
const
springForwardLocalOne
=
new
Temporal
.
PlainDateTime
(
1970
1
2
23
30
)
;
const
springForwardLocalTwo
=
new
Temporal
.
PlainDateTime
(
1970
1
3
23
30
)
;
if
(
cmp
(
dt
fallBackLocalOne
)
<
0
)
return
[
zero
]
;
if
(
cmp
(
dt
fallBackLocalOne
.
add
(
{
hours
:
1
}
)
)
<
0
)
return
[
zero
one
]
;
if
(
cmp
(
dt
fallBackLocalTwo
)
<
0
)
return
[
one
]
;
if
(
cmp
(
dt
fallBackLocalTwo
.
add
(
{
hours
:
1
}
)
)
<
0
)
return
[
one
two
]
;
if
(
cmp
(
dt
springForwardLocalOne
)
<
0
)
return
[
two
]
;
if
(
cmp
(
dt
springForwardLocalOne
.
add
(
{
hours
:
1
}
)
)
<
0
)
return
[
]
;
if
(
cmp
(
dt
springForwardLocalTwo
)
<
0
)
return
[
one
]
;
if
(
cmp
(
dt
springForwardLocalTwo
.
add
(
{
hours
:
1
}
)
)
<
0
)
return
[
]
;
return
[
zero
]
;
}
}
)
;
const
calendar
=
TemporalHelpers
.
calendarObserver
(
actual
"
this
.
calendar
"
)
;
const
instance
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_000_000_000n
timeZone
calendar
)
;
const
fallBackInstance
=
new
Temporal
.
ZonedDateTime
(
43200_000_000_000n
timeZone
calendar
)
;
const
springForwardInstance
=
new
Temporal
.
ZonedDateTime
(
216000_000_000_000n
timeZone
calendar
)
;
actual
.
splice
(
0
)
;
instance
.
hoursInDay
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
with
both
midnights
at
normal
wall
-
clock
times
"
)
;
actual
.
splice
(
0
)
;
fallBackInstance
.
hoursInDay
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
with
both
midnights
at
repeated
wall
-
clock
times
"
)
;
actual
.
splice
(
0
)
;
springForwardInstance
.
hoursInDay
;
assert
.
compareArray
(
actual
[
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
]
"
order
of
operations
with
both
midnights
at
skipped
wall
-
clock
times
"
)
;
actual
.
splice
(
0
)
;
reportCompare
(
0
0
)
;
