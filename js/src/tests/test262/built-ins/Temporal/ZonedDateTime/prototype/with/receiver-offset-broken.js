class
ObservedCalendar
extends
Temporal
.
Calendar
{
constructor
(
)
{
super
(
"
iso8601
"
)
;
this
.
resetCalls
(
)
;
}
toString
(
)
{
return
"
observed
-
calendar
"
;
}
mergeFields
(
original
additional
)
{
this
.
mergeFieldsCalled
+
+
;
const
result
=
super
.
mergeFields
(
original
additional
)
;
result
.
offset
=
Symbol
(
"
can
'
t
convert
to
string
"
)
;
return
result
;
}
resetCalls
(
)
{
this
.
mergeFieldsCalled
=
0
;
}
}
const
calendar
=
new
ObservedCalendar
(
)
;
const
dateTime
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_000_000_000n
"
UTC
"
calendar
)
;
assert
.
throws
(
TypeError
(
)
=
>
dateTime
.
with
(
{
offset
:
Symbol
(
"
can
'
t
convert
to
string
"
)
}
)
"
conversion
failure
on
ZonedDateTime
-
like
"
)
;
assert
.
sameValue
(
calendar
.
mergeFieldsCalled
0
"
calendar
.
mergeFields
should
not
be
called
"
)
;
calendar
.
resetCalls
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
dateTime
.
with
(
{
year
:
2002
}
)
"
conversion
failure
on
sabotaged
return
value
from
mergeFields
"
)
;
assert
.
sameValue
(
calendar
.
mergeFieldsCalled
1
"
calendar
.
mergeFields
was
called
once
"
)
;
calendar
.
resetCalls
(
)
;
reportCompare
(
0
0
)
;
