const
calls
=
[
]
;
const
springFallZone
=
TemporalHelpers
.
springForwardFallBackTimeZone
(
)
;
TemporalHelpers
.
observeMethod
(
calls
springFallZone
"
getPossibleInstantsFor
"
)
;
const
dateLineZone
=
TemporalHelpers
.
crossDateLineTimeZone
(
)
;
TemporalHelpers
.
observeMethod
(
calls
dateLineZone
"
getPossibleInstantsFor
"
)
;
const
zdt1
=
new
Temporal
.
ZonedDateTime
(
946722600_000_000_000n
springFallZone
)
;
{
const
zdt2
=
new
Temporal
.
ZonedDateTime
(
949442400_000_000_000n
springFallZone
)
;
const
result
=
zdt1
.
until
(
zdt2
{
largestUnit
:
"
years
"
}
)
;
TemporalHelpers
.
assertDuration
(
result
0
1
0
0
11
30
0
0
0
0
"
no
wall
-
clock
overshoot
no
DST
"
)
;
assert
.
compareArray
(
calls
[
"
call
getPossibleInstantsFor
"
]
"
one
intermediate
should
be
tried
"
)
;
}
calls
.
splice
(
0
)
;
{
const
zdt2
=
new
Temporal
.
ZonedDateTime
(
949395600_000_000_000n
springFallZone
)
;
const
result
=
zdt1
.
until
(
zdt2
{
largestUnit
:
"
years
"
}
)
;
TemporalHelpers
.
assertDuration
(
result
0
0
0
30
22
30
0
0
0
0
"
wall
-
clock
overshoot
no
DST
"
)
;
assert
.
compareArray
(
calls
[
"
call
getPossibleInstantsFor
"
]
"
one
intermediate
should
be
tried
"
)
;
}
calls
.
splice
(
0
)
;
{
const
zdt2
=
new
Temporal
.
ZonedDateTime
(
954669600_000_000_000n
springFallZone
)
;
const
result
=
zdt1
.
until
(
zdt2
{
largestUnit
:
"
years
"
}
)
;
TemporalHelpers
.
assertDuration
(
result
0
3
0
0
23
30
0
0
0
0
"
wall
-
clock
overshoot
small
consiquential
DST
"
)
;
assert
.
compareArray
(
calls
[
"
call
getPossibleInstantsFor
"
"
call
getPossibleInstantsFor
"
"
call
getPossibleInstantsFor
"
]
"
two
intermediates
should
be
tried
with
disambiguation
"
)
;
}
calls
.
splice
(
0
)
;
{
const
start
=
new
Temporal
.
ZonedDateTime
(
1325102400_000_000_000n
dateLineZone
)
;
const
end
=
new
Temporal
.
ZonedDateTime
(
1325257200_000_000_000n
dateLineZone
)
;
const
result
=
start
.
until
(
end
{
largestUnit
:
"
days
"
}
)
;
TemporalHelpers
.
assertDuration
(
result
0
0
0
1
19
0
0
0
0
0
"
wall
-
clock
overshoot
big
consiquential
DST
"
)
;
assert
.
compareArray
(
calls
[
"
call
getPossibleInstantsFor
"
"
call
getPossibleInstantsFor
"
"
call
getPossibleInstantsFor
"
]
"
two
intermediates
should
be
tried
with
disambiguation
"
)
;
}
reportCompare
(
0
0
)
;
