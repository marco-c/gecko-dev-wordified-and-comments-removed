function
timeZoneSubstituteValues
(
getPossibleInstantsFor
getOffsetNanosecondsFor
)
{
const
tz
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
TemporalHelpers
.
substituteMethod
(
tz
"
getPossibleInstantsFor
"
getPossibleInstantsFor
)
;
TemporalHelpers
.
substituteMethod
(
tz
"
getOffsetNanosecondsFor
"
getOffsetNanosecondsFor
)
;
return
tz
;
}
const
dayNs
=
86_400_000_000_000
;
const
zeroZDT
=
new
Temporal
.
ZonedDateTime
(
0n
"
UTC
"
)
;
const
oneZDT
=
new
Temporal
.
ZonedDateTime
(
1n
"
UTC
"
)
;
const
epochInstant
=
new
Temporal
.
Instant
(
0n
)
;
const
options
=
{
largestUnit
:
"
days
"
smallestUnit
:
"
seconds
"
roundingMode
:
"
expand
"
}
;
let
start
=
new
Temporal
.
ZonedDateTime
(
0n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
epochInstant
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
dayNs
-
1
-
dayNs
+
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
start
.
since
(
oneZDT
options
)
"
days
<
0
and
sign
=
1
"
)
;
start
=
new
Temporal
.
ZonedDateTime
(
1n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
epochInstant
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
-
dayNs
+
1
dayNs
-
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
start
.
since
(
zeroZDT
options
)
"
days
>
0
and
sign
=
-
1
"
)
;
start
=
new
Temporal
.
ZonedDateTime
(
1n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
new
Temporal
.
Instant
(
-
2_000_000_000n
)
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
dayNs
-
1
-
dayNs
+
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
start
.
since
(
zeroZDT
options
)
"
norm
>
0
and
sign
=
-
1
"
)
;
start
=
new
Temporal
.
ZonedDateTime
(
0n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
new
Temporal
.
Instant
(
2n
*
*
53n
)
]
]
[
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
start
.
since
(
oneZDT
options
)
"
Should
throw
RangeError
when
time
zone
calculates
an
outrageous
day
length
"
)
;
reportCompare
(
0
0
)
;
