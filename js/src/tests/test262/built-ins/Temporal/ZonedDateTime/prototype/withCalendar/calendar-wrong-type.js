const
instance
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_000_000_000n
"
UTC
"
{
dateAdd
(
)
{
}
dateFromFields
(
)
{
}
dateUntil
(
)
{
}
day
(
)
{
}
dayOfWeek
(
)
{
}
dayOfYear
(
)
{
}
daysInMonth
(
)
{
}
daysInWeek
(
)
{
}
daysInYear
(
)
{
}
fields
(
)
{
}
id
:
"
replace
-
me
"
inLeapYear
(
)
{
}
mergeFields
(
)
{
}
month
(
)
{
}
monthCode
(
)
{
}
monthDayFromFields
(
)
{
}
monthsInYear
(
)
{
}
weekOfYear
(
)
{
}
year
(
)
{
}
yearMonthFromFields
(
)
{
}
yearOfWeek
(
)
{
}
}
)
;
const
primitiveTests
=
[
[
null
"
null
"
]
[
true
"
boolean
"
]
[
"
"
"
empty
string
"
]
[
1
"
number
that
doesn
'
t
convert
to
a
valid
ISO
string
"
]
[
1n
"
bigint
"
]
]
;
for
(
const
[
arg
description
]
of
primitiveTests
)
{
assert
.
throws
(
typeof
arg
=
=
=
'
string
'
?
RangeError
:
TypeError
(
)
=
>
instance
.
withCalendar
(
arg
)
{
description
}
does
not
convert
to
a
valid
ISO
string
)
;
}
const
typeErrorTests
=
[
[
Symbol
(
)
"
symbol
"
]
[
{
}
"
plain
object
that
doesn
'
t
implement
the
protocol
"
]
[
new
Temporal
.
TimeZone
(
"
UTC
"
)
"
time
zone
instance
"
]
[
Temporal
.
Calendar
"
Temporal
.
Calendar
object
"
]
]
;
for
(
const
[
arg
description
]
of
typeErrorTests
)
{
assert
.
throws
(
TypeError
(
)
=
>
instance
.
withCalendar
(
arg
)
{
description
}
is
not
a
valid
object
and
does
not
convert
to
a
string
)
;
}
reportCompare
(
0
0
)
;
