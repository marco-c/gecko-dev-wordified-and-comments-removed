const
expected
=
[
"
get
other
.
calendar
"
"
has
other
.
calendar
.
dateAdd
"
"
has
other
.
calendar
.
dateFromFields
"
"
has
other
.
calendar
.
dateUntil
"
"
has
other
.
calendar
.
day
"
"
has
other
.
calendar
.
dayOfWeek
"
"
has
other
.
calendar
.
dayOfYear
"
"
has
other
.
calendar
.
daysInMonth
"
"
has
other
.
calendar
.
daysInWeek
"
"
has
other
.
calendar
.
daysInYear
"
"
has
other
.
calendar
.
fields
"
"
has
other
.
calendar
.
id
"
"
has
other
.
calendar
.
inLeapYear
"
"
has
other
.
calendar
.
mergeFields
"
"
has
other
.
calendar
.
month
"
"
has
other
.
calendar
.
monthCode
"
"
has
other
.
calendar
.
monthDayFromFields
"
"
has
other
.
calendar
.
monthsInYear
"
"
has
other
.
calendar
.
weekOfYear
"
"
has
other
.
calendar
.
year
"
"
has
other
.
calendar
.
yearMonthFromFields
"
"
has
other
.
calendar
.
yearOfWeek
"
"
get
other
.
calendar
.
dateFromFields
"
"
get
other
.
calendar
.
fields
"
"
call
other
.
calendar
.
fields
"
"
get
other
.
day
"
"
get
other
.
day
.
valueOf
"
"
call
other
.
day
.
valueOf
"
"
get
other
.
hour
"
"
get
other
.
hour
.
valueOf
"
"
call
other
.
hour
.
valueOf
"
"
get
other
.
microsecond
"
"
get
other
.
microsecond
.
valueOf
"
"
call
other
.
microsecond
.
valueOf
"
"
get
other
.
millisecond
"
"
get
other
.
millisecond
.
valueOf
"
"
call
other
.
millisecond
.
valueOf
"
"
get
other
.
minute
"
"
get
other
.
minute
.
valueOf
"
"
call
other
.
minute
.
valueOf
"
"
get
other
.
month
"
"
get
other
.
month
.
valueOf
"
"
call
other
.
month
.
valueOf
"
"
get
other
.
monthCode
"
"
get
other
.
monthCode
.
toString
"
"
call
other
.
monthCode
.
toString
"
"
get
other
.
nanosecond
"
"
get
other
.
nanosecond
.
valueOf
"
"
call
other
.
nanosecond
.
valueOf
"
"
get
other
.
offset
"
"
get
other
.
offset
.
toString
"
"
call
other
.
offset
.
toString
"
"
get
other
.
second
"
"
get
other
.
second
.
valueOf
"
"
call
other
.
second
.
valueOf
"
"
get
other
.
timeZone
"
"
get
other
.
year
"
"
get
other
.
year
.
valueOf
"
"
call
other
.
year
.
valueOf
"
"
has
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
has
other
.
timeZone
.
getPossibleInstantsFor
"
"
has
other
.
timeZone
.
id
"
"
call
other
.
calendar
.
dateFromFields
"
"
get
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
other
.
timeZone
.
getPossibleInstantsFor
"
"
call
other
.
timeZone
.
getPossibleInstantsFor
"
"
call
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
calendar
.
id
"
"
get
other
.
calendar
.
id
"
"
ownKeys
options
"
"
getOwnPropertyDescriptor
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
"
"
getOwnPropertyDescriptor
options
.
roundingMode
"
"
get
options
.
roundingMode
"
"
getOwnPropertyDescriptor
options
.
largestUnit
"
"
get
options
.
largestUnit
"
"
getOwnPropertyDescriptor
options
.
smallestUnit
"
"
get
options
.
smallestUnit
"
"
getOwnPropertyDescriptor
options
.
additional
"
"
get
options
.
additional
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
]
;
const
actual
=
[
]
;
const
ownTimeZone
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
this
.
timeZone
"
)
;
const
ownCalendar
=
TemporalHelpers
.
calendarObserver
(
actual
"
this
.
calendar
"
)
;
const
instance
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_000_000_000n
ownTimeZone
ownCalendar
)
;
const
dstTimeZone
=
TemporalHelpers
.
springForwardFallBackTimeZone
(
)
;
const
ownDstTimeZone
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
this
.
timeZone
"
{
getOffsetNanosecondsFor
:
dstTimeZone
.
getOffsetNanosecondsFor
getPossibleInstantsFor
:
dstTimeZone
.
getPossibleInstantsFor
}
)
;
const
otherDstTimeZone
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
other
.
timeZone
"
{
getOffsetNanosecondsFor
:
dstTimeZone
.
getOffsetNanosecondsFor
getPossibleInstantsFor
:
dstTimeZone
.
getPossibleInstantsFor
}
)
;
const
fallBackInstance
=
new
Temporal
.
ZonedDateTime
(
972808200_000_000_000n
ownDstTimeZone
ownCalendar
)
;
const
otherDateTimePropertyBag
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2004
month
:
5
monthCode
:
"
M05
"
day
:
12
hour
:
1
minute
:
46
second
:
40
millisecond
:
250
microsecond
:
500
nanosecond
:
750
offset
:
"
+
00
:
00
"
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
timeZone
:
TemporalHelpers
.
timeZoneObserver
(
actual
"
other
.
timeZone
"
)
}
"
other
"
)
;
function
createOptionsObserver
(
{
smallestUnit
=
"
nanoseconds
"
largestUnit
=
"
auto
"
roundingMode
=
"
halfExpand
"
roundingIncrement
=
1
}
=
{
}
)
{
return
TemporalHelpers
.
propertyBagObserver
(
actual
{
roundingIncrement
roundingMode
largestUnit
smallestUnit
additional
:
"
property
"
}
"
options
"
)
;
}
actual
.
splice
(
0
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
)
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
"
)
;
actual
.
splice
(
0
)
;
const
identicalPropertyBag
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2001
month
:
9
monthCode
:
"
M09
"
day
:
9
hour
:
1
minute
:
46
second
:
40
millisecond
:
0
microsecond
:
0
nanosecond
:
0
offset
:
"
+
00
:
00
"
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
timeZone
:
TemporalHelpers
.
timeZoneObserver
(
actual
"
other
.
timeZone
"
)
}
"
other
"
)
;
instance
.
since
(
identicalPropertyBag
createOptionsObserver
(
{
largestUnit
:
"
years
"
}
)
)
;
assert
.
compareArray
(
actual
expected
.
concat
(
[
"
get
this
.
timeZone
.
id
"
"
get
other
.
timeZone
.
id
"
]
)
"
order
of
operations
with
identical
dates
and
largestUnit
a
calendar
unit
"
)
;
actual
.
splice
(
0
)
;
const
fallBackPropertyBag
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2000
month
:
10
monthCode
:
"
M10
"
day
:
29
hour
:
1
minute
:
30
second
:
0
millisecond
:
0
microsecond
:
0
nanosecond
:
0
offset
:
"
-
08
:
00
"
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
timeZone
:
otherDstTimeZone
}
"
other
"
)
;
fallBackInstance
.
since
(
fallBackPropertyBag
createOptionsObserver
(
{
largestUnit
:
"
days
"
}
)
)
;
assert
.
compareArray
(
actual
[
"
get
other
.
calendar
"
"
has
other
.
calendar
.
dateAdd
"
"
has
other
.
calendar
.
dateFromFields
"
"
has
other
.
calendar
.
dateUntil
"
"
has
other
.
calendar
.
day
"
"
has
other
.
calendar
.
dayOfWeek
"
"
has
other
.
calendar
.
dayOfYear
"
"
has
other
.
calendar
.
daysInMonth
"
"
has
other
.
calendar
.
daysInWeek
"
"
has
other
.
calendar
.
daysInYear
"
"
has
other
.
calendar
.
fields
"
"
has
other
.
calendar
.
id
"
"
has
other
.
calendar
.
inLeapYear
"
"
has
other
.
calendar
.
mergeFields
"
"
has
other
.
calendar
.
month
"
"
has
other
.
calendar
.
monthCode
"
"
has
other
.
calendar
.
monthDayFromFields
"
"
has
other
.
calendar
.
monthsInYear
"
"
has
other
.
calendar
.
weekOfYear
"
"
has
other
.
calendar
.
year
"
"
has
other
.
calendar
.
yearMonthFromFields
"
"
has
other
.
calendar
.
yearOfWeek
"
"
get
other
.
calendar
.
dateFromFields
"
"
get
other
.
calendar
.
fields
"
"
call
other
.
calendar
.
fields
"
"
get
other
.
day
"
"
get
other
.
day
.
valueOf
"
"
call
other
.
day
.
valueOf
"
"
get
other
.
hour
"
"
get
other
.
hour
.
valueOf
"
"
call
other
.
hour
.
valueOf
"
"
get
other
.
microsecond
"
"
get
other
.
microsecond
.
valueOf
"
"
call
other
.
microsecond
.
valueOf
"
"
get
other
.
millisecond
"
"
get
other
.
millisecond
.
valueOf
"
"
call
other
.
millisecond
.
valueOf
"
"
get
other
.
minute
"
"
get
other
.
minute
.
valueOf
"
"
call
other
.
minute
.
valueOf
"
"
get
other
.
month
"
"
get
other
.
month
.
valueOf
"
"
call
other
.
month
.
valueOf
"
"
get
other
.
monthCode
"
"
get
other
.
monthCode
.
toString
"
"
call
other
.
monthCode
.
toString
"
"
get
other
.
nanosecond
"
"
get
other
.
nanosecond
.
valueOf
"
"
call
other
.
nanosecond
.
valueOf
"
"
get
other
.
offset
"
"
get
other
.
offset
.
toString
"
"
call
other
.
offset
.
toString
"
"
get
other
.
second
"
"
get
other
.
second
.
valueOf
"
"
call
other
.
second
.
valueOf
"
"
get
other
.
timeZone
"
"
get
other
.
year
"
"
get
other
.
year
.
valueOf
"
"
call
other
.
year
.
valueOf
"
"
has
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
has
other
.
timeZone
.
getPossibleInstantsFor
"
"
has
other
.
timeZone
.
id
"
"
call
other
.
calendar
.
dateFromFields
"
"
get
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
other
.
timeZone
.
getPossibleInstantsFor
"
"
call
other
.
timeZone
.
getPossibleInstantsFor
"
"
call
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
other
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
calendar
.
id
"
"
get
other
.
calendar
.
id
"
"
ownKeys
options
"
"
getOwnPropertyDescriptor
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
"
"
getOwnPropertyDescriptor
options
.
roundingMode
"
"
get
options
.
roundingMode
"
"
getOwnPropertyDescriptor
options
.
largestUnit
"
"
get
options
.
largestUnit
"
"
getOwnPropertyDescriptor
options
.
smallestUnit
"
"
get
options
.
smallestUnit
"
"
getOwnPropertyDescriptor
options
.
additional
"
"
get
options
.
additional
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
"
get
this
.
timeZone
.
id
"
"
get
other
.
timeZone
.
id
"
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
]
"
order
of
operations
with
identical
wall
-
clock
times
and
largestUnit
a
calendar
unit
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForCalendarDifference
=
[
"
get
this
.
timeZone
.
id
"
"
get
other
.
timeZone
.
id
"
"
get
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
this
.
timeZone
.
getPossibleInstantsFor
"
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
calendar
.
dateUntil
"
]
;
const
expectedOpsForCalendarRounding
=
expected
.
concat
(
expectedOpsForCalendarDifference
[
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
]
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
{
largestUnit
:
"
years
"
smallestUnit
:
"
nanoseconds
"
roundingIncrement
:
1
}
)
)
;
assert
.
compareArray
(
actual
expected
.
concat
(
expectedOpsForCalendarDifference
)
"
order
of
operations
with
largestUnit
years
and
no
rounding
"
)
;
actual
.
splice
(
0
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
years
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForCalendarRounding
"
order
of
operations
with
smallestUnit
=
years
"
)
;
actual
.
splice
(
0
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
months
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForCalendarRounding
"
order
of
operations
with
smallestUnit
=
months
"
)
;
actual
.
splice
(
0
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
weeks
"
}
)
)
;
assert
.
compareArray
(
actual
expected
.
concat
(
expectedOpsForCalendarDifference
[
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
"
call
this
.
timeZone
.
getPossibleInstantsFor
"
]
)
"
order
of
operations
with
smallestUnit
=
weeks
"
)
;
actual
.
splice
(
0
)
;
instance
.
since
(
otherDateTimePropertyBag
createOptionsObserver
(
{
largestUnit
:
"
hours
"
}
)
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
with
largestUnit
being
a
time
unit
"
)
;
actual
.
splice
(
0
)
;
reportCompare
(
0
0
)
;
