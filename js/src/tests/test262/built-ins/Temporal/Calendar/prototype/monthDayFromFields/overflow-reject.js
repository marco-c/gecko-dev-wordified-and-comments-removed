const
cal
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
[
-
1
0
13
9995
]
.
forEach
(
(
month
)
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
year
:
2021
month
day
:
5
}
{
overflow
:
"
reject
"
}
)
Month
{
month
}
is
out
of
range
for
2021
with
overflow
:
reject
)
;
}
)
;
[
-
1
0
32
999
]
.
forEach
(
(
day
)
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
year
:
2021
month
:
12
day
}
{
overflow
:
"
reject
"
}
)
Day
{
day
}
is
out
of
range
for
2021
-
12
with
overflow
:
reject
)
;
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
monthCode
:
"
M12
"
day
}
{
overflow
:
"
reject
"
}
)
Day
{
day
}
is
out
of
range
for
2021
-
M12
with
overflow
:
reject
)
;
}
)
;
TemporalHelpers
.
ISOMonths
.
forEach
(
(
{
month
monthCode
daysInMonth
}
)
=
>
{
const
day
=
daysInMonth
+
1
;
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
month
day
}
{
overflow
:
"
reject
"
}
)
Day
{
day
}
is
out
of
range
for
month
{
month
}
with
overflow
:
reject
)
;
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
monthCode
day
}
{
overflow
:
"
reject
"
}
)
Day
{
day
}
is
out
of
range
for
monthCode
{
monthCode
}
with
overflow
:
reject
)
;
}
)
;
[
[
"
month
"
2
]
[
"
monthCode
"
"
M02
"
]
]
.
forEach
(
(
[
name
value
]
)
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
year
:
2020
[
name
]
:
value
day
:
30
}
{
overflow
:
"
reject
"
}
)
Day
30
is
out
of
range
for
{
name
}
{
value
}
in
leap
year
2020
with
overflow
:
reject
)
;
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
year
:
2021
[
name
]
:
value
day
:
29
}
{
overflow
:
"
reject
"
}
)
Day
29
is
out
of
range
for
{
name
}
{
value
}
in
common
year
2021
with
overflow
:
reject
)
;
}
)
;
reportCompare
(
0
0
)
;
