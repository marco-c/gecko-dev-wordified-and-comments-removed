let
cal
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
)
"
Temporal
.
Calendar
.
prototype
.
dateFromFields
called
on
non
-
object
"
)
;
[
undefined
true
false
123
456n
Symbol
(
)
"
string
"
]
.
forEach
(
function
(
fields
)
{
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
)
"
Temporal
.
Calendar
.
prototype
.
dateFromFields
called
on
non
-
object
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
undefined
)
"
Temporal
.
Calendar
.
prototype
.
dateFromFields
called
on
non
-
object
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
{
overflow
:
"
constrain
"
}
)
"
Temporal
.
Calendar
.
prototype
.
dateFromFields
called
on
non
-
object
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
{
overflow
:
"
reject
"
}
)
"
Temporal
.
Calendar
.
prototype
.
dateFromFields
called
on
non
-
object
"
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
month
:
1
day
:
17
}
)
"
invalid_argument
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
year
:
2021
day
:
17
}
)
"
invalid_argument
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
year
:
2021
month
:
12
}
)
"
invalid_argument
"
)
;
reportCompare
(
0
0
)
;
