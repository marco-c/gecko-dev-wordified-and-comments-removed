let
cal
=
new
Temporal
.
Calendar
(
'
iso8601
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
)
'
cal
.
dateFromFields
(
)
throws
a
TypeError
exception
'
)
;
[
undefined
true
false
123
456n
Symbol
(
)
'
string
'
]
.
forEach
(
function
(
fields
)
{
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
)
'
cal
.
dateFromFields
(
fields
)
throws
a
TypeError
exception
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
undefined
)
'
cal
.
dateFromFields
(
fields
undefined
)
throws
a
TypeError
exception
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
{
overflow
:
'
constrain
'
}
)
'
cal
.
dateFromFields
(
fields
{
overflow
:
"
constrain
"
}
)
throws
a
TypeError
exception
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
fields
{
overflow
:
'
reject
'
}
)
'
cal
.
dateFromFields
(
fields
{
overflow
:
"
reject
"
}
)
throws
a
TypeError
exception
'
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
month
:
1
day
:
17
}
)
'
cal
.
dateFromFields
(
{
month
:
1
day
:
17
}
)
throws
a
TypeError
exception
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
year
:
2021
day
:
17
}
)
'
cal
.
dateFromFields
(
{
year
:
2021
day
:
17
}
)
throws
a
TypeError
exception
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
cal
.
dateFromFields
(
{
year
:
2021
month
:
12
}
)
'
cal
.
dateFromFields
(
{
year
:
2021
month
:
12
}
)
throws
a
TypeError
exception
'
)
;
reportCompare
(
0
0
)
;
