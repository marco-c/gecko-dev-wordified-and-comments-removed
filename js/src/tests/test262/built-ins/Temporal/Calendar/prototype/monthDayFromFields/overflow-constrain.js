const
cal
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
const
opt
=
{
overflow
:
"
constrain
"
}
;
let
result
=
cal
.
monthDayFromFields
(
{
year
:
2021
month
:
13
day
:
1
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
"
M12
"
1
"
month
13
is
constrained
to
12
"
)
;
result
=
cal
.
monthDayFromFields
(
{
year
:
2021
month
:
999999
day
:
500
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
"
M12
"
31
"
month
999999
is
constrained
to
12
and
day
500
is
constrained
to
31
"
)
;
[
-
99999
-
1
0
]
.
forEach
(
(
month
)
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
cal
.
monthDayFromFields
(
{
year
:
2021
month
day
:
1
}
opt
)
Month
{
month
}
is
out
of
range
for
2021
even
with
overflow
:
constrain
)
;
}
)
;
TemporalHelpers
.
ISOMonths
.
forEach
(
(
{
month
monthCode
daysInMonth
}
)
=
>
{
const
day
=
daysInMonth
+
1
;
result
=
cal
.
monthDayFromFields
(
{
month
day
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
monthCode
daysInMonth
day
is
constrained
from
{
day
}
to
{
daysInMonth
}
in
month
{
month
}
)
;
result
=
cal
.
monthDayFromFields
(
{
month
day
:
9001
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
monthCode
daysInMonth
day
is
constrained
to
{
daysInMonth
}
in
month
{
month
}
)
;
result
=
cal
.
monthDayFromFields
(
{
monthCode
day
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
monthCode
daysInMonth
day
is
constrained
from
{
day
}
to
{
daysInMonth
}
in
monthCode
{
monthCode
}
)
;
result
=
cal
.
monthDayFromFields
(
{
monthCode
day
:
9001
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
monthCode
daysInMonth
day
is
constrained
to
{
daysInMonth
}
in
monthCode
{
monthCode
}
)
;
}
)
;
[
[
"
month
"
2
]
[
"
monthCode
"
"
M02
"
]
]
.
forEach
(
(
[
name
value
]
)
=
>
{
result
=
cal
.
monthDayFromFields
(
{
year
:
2020
[
name
]
:
value
day
:
30
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
"
M02
"
29
{
name
}
{
value
}
is
constrained
to
29
in
leap
year
2020
)
;
result
=
cal
.
monthDayFromFields
(
{
year
:
2021
[
name
]
:
value
day
:
29
}
opt
)
;
TemporalHelpers
.
assertPlainMonthDay
(
result
"
M02
"
28
{
name
}
{
value
}
is
constrained
to
28
in
common
year
2021
)
;
}
)
;
reportCompare
(
0
0
)
;
