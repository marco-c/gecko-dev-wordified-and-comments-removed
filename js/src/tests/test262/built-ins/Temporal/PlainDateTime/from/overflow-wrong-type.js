const
validValues
=
[
new
Temporal
.
PlainDateTime
(
2000
5
2
12
)
"
2000
-
05
-
02T12
:
00
"
]
;
validValues
.
forEach
(
(
value
)
=
>
TemporalHelpers
.
checkStringOptionWrongType
(
"
overflow
"
"
constrain
"
(
overflow
)
=
>
Temporal
.
PlainDateTime
.
from
(
value
{
overflow
}
)
(
result
descr
)
=
>
TemporalHelpers
.
assertPlainDateTime
(
result
2000
5
"
M05
"
2
12
0
0
0
0
0
descr
)
)
)
;
const
propertyBag
=
{
year
:
2000
month
:
5
day
:
2
hour
:
12
}
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
null
}
)
"
null
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
true
}
)
"
true
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
false
}
)
"
false
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
Symbol
(
)
}
)
"
symbol
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
2n
}
)
"
bigint
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
{
}
}
)
"
plain
object
"
)
;
const
expected
=
[
"
get
overflow
.
toString
"
"
call
overflow
.
toString
"
"
get
overflow
.
toString
"
"
call
overflow
.
toString
"
]
;
const
actual
=
[
]
;
const
observer
=
TemporalHelpers
.
toPrimitiveObserver
(
actual
"
constrain
"
"
overflow
"
)
;
const
result
=
Temporal
.
PlainDateTime
.
from
(
propertyBag
{
overflow
:
observer
}
)
;
TemporalHelpers
.
assertPlainDateTime
(
result
2000
5
"
M05
"
2
12
0
0
0
0
0
"
object
with
toString
"
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
"
)
;
reportCompare
(
0
0
)
;
