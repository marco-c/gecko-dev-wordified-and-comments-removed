const
dayNs
=
86_400_000_000_000
;
const
dayDuration
=
Temporal
.
Duration
.
from
(
{
days
:
1
}
)
;
const
epochInstant
=
new
Temporal
.
Instant
(
0n
)
;
function
timeZoneSubstituteValues
(
getPossibleInstantsFor
getOffsetNanosecondsFor
)
{
const
tz
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
TemporalHelpers
.
substituteMethod
(
tz
"
getPossibleInstantsFor
"
getPossibleInstantsFor
)
;
TemporalHelpers
.
substituteMethod
(
tz
"
getOffsetNanosecondsFor
"
getOffsetNanosecondsFor
)
;
return
tz
;
}
let
zdt
=
new
Temporal
.
ZonedDateTime
(
-
1n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
epochInstant
]
[
epochInstant
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
dayNs
-
1
-
dayNs
+
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
dayDuration
.
add
(
dayDuration
{
relativeTo
:
zdt
}
)
"
days
<
0
and
sign
=
1
"
)
;
zdt
=
new
Temporal
.
ZonedDateTime
(
1n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
epochInstant
]
[
epochInstant
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
-
dayNs
+
1
dayNs
-
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
dayDuration
.
add
(
dayDuration
{
relativeTo
:
zdt
}
)
"
days
>
0
and
sign
=
-
1
"
)
;
zdt
=
new
Temporal
.
ZonedDateTime
(
0n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
[
new
Temporal
.
Instant
(
-
1n
)
]
[
new
Temporal
.
Instant
(
-
2n
)
]
[
new
Temporal
.
Instant
(
-
4n
)
]
]
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
dayNs
-
1
-
dayNs
+
1
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
dayDuration
.
add
(
dayDuration
{
relativeTo
:
zdt
}
)
"
nanoseconds
>
0
and
sign
=
-
1
"
)
;
zdt
=
new
Temporal
.
ZonedDateTime
(
0n
timeZoneSubstituteValues
(
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
[
new
Temporal
.
Instant
(
2n
*
*
53n
+
2n
*
BigInt
(
dayNs
)
)
]
]
[
]
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
dayDuration
.
add
(
dayDuration
{
relativeTo
:
zdt
}
)
"
Should
throw
RangeError
when
time
zone
calculates
an
outrageous
day
length
"
)
;
reportCompare
(
0
0
)
;
