const
expected
=
[
"
get
options
.
largestUnit
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
relativeTo
"
"
get
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
]
;
const
actual
=
[
]
;
function
createOptionsObserver
(
{
smallestUnit
=
"
nanoseconds
"
largestUnit
=
"
auto
"
roundingMode
=
"
halfExpand
"
roundingIncrement
=
1
relativeTo
=
undefined
}
=
{
}
)
{
return
TemporalHelpers
.
propertyBagObserver
(
actual
{
smallestUnit
largestUnit
roundingMode
roundingIncrement
relativeTo
}
"
options
"
)
;
}
const
instance
=
new
Temporal
.
Duration
(
0
0
0
0
2400
)
;
instance
.
round
(
createOptionsObserver
(
{
smallestUnit
:
"
microseconds
"
}
)
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForPlainRelativeTo
=
[
"
get
options
.
largestUnit
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
relativeTo
"
"
get
options
.
relativeTo
.
calendar
"
"
has
options
.
relativeTo
.
calendar
.
calendar
"
"
get
options
.
relativeTo
.
calendar
.
fields
"
"
call
options
.
relativeTo
.
calendar
.
fields
"
"
get
options
.
relativeTo
.
day
"
"
get
options
.
relativeTo
.
day
.
valueOf
"
"
call
options
.
relativeTo
.
day
.
valueOf
"
"
get
options
.
relativeTo
.
hour
"
"
get
options
.
relativeTo
.
microsecond
"
"
get
options
.
relativeTo
.
millisecond
"
"
get
options
.
relativeTo
.
minute
"
"
get
options
.
relativeTo
.
month
"
"
get
options
.
relativeTo
.
month
.
valueOf
"
"
call
options
.
relativeTo
.
month
.
valueOf
"
"
get
options
.
relativeTo
.
monthCode
"
"
get
options
.
relativeTo
.
monthCode
.
toString
"
"
call
options
.
relativeTo
.
monthCode
.
toString
"
"
get
options
.
relativeTo
.
nanosecond
"
"
get
options
.
relativeTo
.
offset
"
"
get
options
.
relativeTo
.
second
"
"
get
options
.
relativeTo
.
timeZone
"
"
get
options
.
relativeTo
.
year
"
"
get
options
.
relativeTo
.
year
.
valueOf
"
"
call
options
.
relativeTo
.
year
.
valueOf
"
"
get
options
.
relativeTo
.
calendar
.
dateFromFields
"
"
call
options
.
relativeTo
.
calendar
.
dateFromFields
"
"
get
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
]
;
const
plainRelativeTo
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2001
month
:
5
monthCode
:
"
M05
"
day
:
2
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
options
.
relativeTo
.
calendar
"
)
}
"
options
.
relativeTo
"
)
;
instance
.
round
(
createOptionsObserver
(
{
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForPlainRelativeTo
"
order
of
operations
for
PlainDate
relativeTo
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForYearRounding
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
instance
.
round
(
createOptionsObserver
(
{
smallestUnit
:
"
years
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForYearRounding
"
order
of
operations
with
smallestUnit
=
years
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForMonthRounding
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateUntil
"
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
Array
(
2
)
.
fill
(
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
)
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
const
instance2
=
new
Temporal
.
Duration
(
1
0
0
62
)
;
instance2
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
months
"
smallestUnit
:
"
months
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForMonthRounding
"
order
of
operations
with
largestUnit
=
smallestUnit
=
months
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForWeekRounding
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
Array
(
58
)
.
fill
(
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
)
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
const
instance3
=
new
Temporal
.
Duration
(
1
1
0
15
)
;
instance3
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
weeks
"
smallestUnit
:
"
weeks
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForWeekRounding
"
order
of
operations
with
largestUnit
=
smallestUnit
=
weeks
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForDayRounding
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
const
instance4
=
new
Temporal
.
Duration
(
1
1
1
)
instance4
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
days
"
smallestUnit
:
"
days
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForDayRounding
"
order
of
operations
with
largestUnit
=
smallestUnit
=
days
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForDayToYearBalancing
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateUntil
"
]
)
;
const
instance5
=
new
Temporal
.
Duration
(
0
0
0
0
396
*
24
)
;
instance5
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
years
"
smallestUnit
:
"
days
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForDayToYearBalancing
"
order
of
operations
with
largestUnit
=
years
smallestUnit
=
days
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForMonthToYearBalancing
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
get
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateUntil
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateUntil
"
]
)
;
const
instance6
=
new
Temporal
.
Duration
(
0
12
)
;
instance6
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
years
"
smallestUnit
:
"
months
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForMonthToYearBalancing
"
order
of
operations
with
largestUnit
=
years
smallestUnit
=
months
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForDayToMonthBalancing
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
const
instance7
=
new
Temporal
.
Duration
(
0
0
0
0
32
*
24
)
;
instance7
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
months
"
smallestUnit
:
"
days
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForDayToMonthBalancing
"
order
of
operations
with
largestUnit
=
months
smallestUnit
=
days
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForDayToWeekBalancing
=
expectedOpsForPlainRelativeTo
.
concat
(
[
"
get
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
"
call
options
.
relativeTo
.
calendar
.
dateAdd
"
]
)
;
const
instance8
=
new
Temporal
.
Duration
(
0
0
0
0
8
*
24
)
;
instance8
.
round
(
createOptionsObserver
(
{
largestUnit
:
"
weeks
"
smallestUnit
:
"
days
"
relativeTo
:
plainRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForDayToWeekBalancing
"
order
of
operations
with
largestUnit
=
weeks
smallestUnit
=
days
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForZonedRelativeTo
=
[
"
get
options
.
largestUnit
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
relativeTo
"
"
get
options
.
relativeTo
.
calendar
"
"
has
options
.
relativeTo
.
calendar
.
calendar
"
"
get
options
.
relativeTo
.
calendar
.
fields
"
"
call
options
.
relativeTo
.
calendar
.
fields
"
"
get
options
.
relativeTo
.
day
"
"
get
options
.
relativeTo
.
day
.
valueOf
"
"
call
options
.
relativeTo
.
day
.
valueOf
"
"
get
options
.
relativeTo
.
hour
"
"
get
options
.
relativeTo
.
hour
.
valueOf
"
"
call
options
.
relativeTo
.
hour
.
valueOf
"
"
get
options
.
relativeTo
.
microsecond
"
"
get
options
.
relativeTo
.
microsecond
.
valueOf
"
"
call
options
.
relativeTo
.
microsecond
.
valueOf
"
"
get
options
.
relativeTo
.
millisecond
"
"
get
options
.
relativeTo
.
millisecond
.
valueOf
"
"
call
options
.
relativeTo
.
millisecond
.
valueOf
"
"
get
options
.
relativeTo
.
minute
"
"
get
options
.
relativeTo
.
minute
.
valueOf
"
"
call
options
.
relativeTo
.
minute
.
valueOf
"
"
get
options
.
relativeTo
.
month
"
"
get
options
.
relativeTo
.
month
.
valueOf
"
"
call
options
.
relativeTo
.
month
.
valueOf
"
"
get
options
.
relativeTo
.
monthCode
"
"
get
options
.
relativeTo
.
monthCode
.
toString
"
"
call
options
.
relativeTo
.
monthCode
.
toString
"
"
get
options
.
relativeTo
.
nanosecond
"
"
get
options
.
relativeTo
.
nanosecond
.
valueOf
"
"
call
options
.
relativeTo
.
nanosecond
.
valueOf
"
"
get
options
.
relativeTo
.
offset
"
"
get
options
.
relativeTo
.
offset
.
toString
"
"
call
options
.
relativeTo
.
offset
.
toString
"
"
get
options
.
relativeTo
.
second
"
"
get
options
.
relativeTo
.
second
.
valueOf
"
"
call
options
.
relativeTo
.
second
.
valueOf
"
"
get
options
.
relativeTo
.
timeZone
"
"
get
options
.
relativeTo
.
year
"
"
get
options
.
relativeTo
.
year
.
valueOf
"
"
call
options
.
relativeTo
.
year
.
valueOf
"
"
get
options
.
relativeTo
.
calendar
.
dateFromFields
"
"
call
options
.
relativeTo
.
calendar
.
dateFromFields
"
"
has
options
.
relativeTo
.
timeZone
.
timeZone
"
"
get
options
.
relativeTo
.
timeZone
.
getPossibleInstantsFor
"
"
call
options
.
relativeTo
.
timeZone
.
getPossibleInstantsFor
"
"
get
options
.
relativeTo
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
options
.
relativeTo
.
timeZone
.
getOffsetNanosecondsFor
"
"
get
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
"
get
options
.
relativeTo
.
timeZone
.
getOffsetNanosecondsFor
"
"
call
options
.
relativeTo
.
timeZone
.
getOffsetNanosecondsFor
"
]
;
const
zonedRelativeTo
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2001
month
:
5
monthCode
:
"
M05
"
day
:
2
hour
:
6
minute
:
54
second
:
32
millisecond
:
987
microsecond
:
654
nanosecond
:
321
offset
:
"
+
00
:
00
"
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
options
.
relativeTo
.
calendar
"
)
timeZone
:
TemporalHelpers
.
timeZoneObserver
(
actual
"
options
.
relativeTo
.
timeZone
"
)
}
"
options
.
relativeTo
"
)
;
instance
.
round
(
createOptionsObserver
(
{
relativeTo
:
zonedRelativeTo
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForZonedRelativeTo
"
order
of
operations
for
ZonedDateTime
relativeTo
"
)
;
reportCompare
(
0
0
)
;
