class
StopExecution
extends
Error
{
}
const
stopAt
=
1000
;
let
twoDays
=
Temporal
.
Duration
.
from
(
{
days
:
2
}
)
;
let
count
=
0
;
let
cal
=
new
class
extends
Temporal
.
Calendar
{
dateUntil
(
start
end
options
)
{
return
Temporal
.
Duration
.
from
(
{
days
:
Number
.
MAX_VALUE
}
)
;
}
dateAdd
(
date
duration
options
)
{
count
+
=
1
;
if
(
count
=
=
=
stopAt
)
{
throw
new
StopExecution
(
)
;
}
if
(
count
=
=
=
1
)
{
return
Temporal
.
Calendar
.
prototype
.
dateAdd
.
call
(
this
date
duration
options
)
;
}
TemporalHelpers
.
assertPlainDate
(
date
1970
1
"
M01
"
1
)
;
TemporalHelpers
.
assertDuration
(
duration
0
0
0
Number
.
MAX_VALUE
0
0
0
0
0
0
)
;
return
Temporal
.
Calendar
.
prototype
.
dateAdd
.
call
(
this
date
twoDays
options
)
;
}
}
(
"
iso8601
"
)
;
let
zdt
=
new
Temporal
.
ZonedDateTime
(
0n
"
UTC
"
cal
)
;
let
duration
=
Temporal
.
Duration
.
from
(
{
days
:
1
}
)
;
let
options
=
{
largestUnit
:
"
days
"
relativeTo
:
zdt
}
;
assert
.
throws
(
StopExecution
(
)
=
>
duration
.
round
(
options
)
)
;
assert
.
sameValue
(
count
stopAt
)
;
reportCompare
(
0
0
)
;
