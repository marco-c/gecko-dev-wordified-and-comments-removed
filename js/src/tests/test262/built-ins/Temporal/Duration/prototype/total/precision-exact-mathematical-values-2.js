function
nextUp
(
num
)
{
if
(
!
Number
.
isFinite
(
num
)
)
{
return
num
;
}
if
(
num
=
=
=
0
)
{
return
Number
.
MIN_VALUE
;
}
var
f64
=
new
Float64Array
(
[
num
]
)
;
var
u64
=
new
BigUint64Array
(
f64
.
buffer
)
;
u64
[
0
]
+
=
(
num
<
0
?
-
1n
:
1n
)
;
return
f64
[
0
]
;
}
function
nextDown
(
num
)
{
if
(
!
Number
.
isFinite
(
num
)
)
{
return
num
;
}
if
(
num
=
=
=
0
)
{
return
-
Number
.
MIN_VALUE
;
}
var
f64
=
new
Float64Array
(
[
num
]
)
;
var
u64
=
new
BigUint64Array
(
f64
.
buffer
)
;
u64
[
0
]
+
=
(
num
<
0
?
1n
:
-
1n
)
;
return
f64
[
0
]
;
}
let
duration
=
Temporal
.
Duration
.
from
(
{
hours
:
4000
minutes
:
59
seconds
:
59
milliseconds
:
999
microseconds
:
999
nanoseconds
:
999
}
)
;
let
total
=
duration
.
total
(
{
unit
:
"
hours
"
}
)
;
const
expected
=
4000
.
9999999999995
;
assert
.
sameValue
(
expected
4000
.
9999999999997222
)
;
assert
.
sameValue
(
nextDown
(
expected
)
4000
.
999999999999
)
;
assert
.
sameValue
(
nextUp
(
expected
)
4001
)
;
assert
.
sameValue
(
total
expected
)
;
reportCompare
(
0
0
)
;
