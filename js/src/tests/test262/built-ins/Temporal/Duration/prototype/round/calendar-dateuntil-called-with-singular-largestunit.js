const
durations
=
[
[
1
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
1
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
1
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
[
0
0
0
0
0
0
0
0
0
86399_999_999_999
]
]
.
map
(
(
args
)
=
>
new
Temporal
.
Duration
(
.
.
.
args
)
)
;
TemporalHelpers
.
checkCalendarDateUntilLargestUnitSingular
(
(
calendar
largestUnit
index
)
=
>
{
const
duration
=
durations
[
index
]
;
const
relativeTo
=
new
Temporal
.
ZonedDateTime
(
0n
"
UTC
"
calendar
)
;
duration
.
round
(
{
largestUnit
roundingIncrement
:
2
roundingMode
:
'
ceil
'
relativeTo
}
)
;
}
{
years
:
[
"
year
"
"
year
"
]
months
:
[
"
month
"
"
month
"
]
weeks
:
[
"
week
"
"
week
"
]
days
:
[
]
hours
:
[
]
minutes
:
[
]
seconds
:
[
]
milliseconds
:
[
]
microseconds
:
[
]
nanoseconds
:
[
]
}
)
;
TemporalHelpers
.
checkCalendarDateUntilLargestUnitSingular
(
(
calendar
largestUnit
)
=
>
{
const
duration
=
new
Temporal
.
Duration
(
5
60
)
;
const
relativeTo
=
new
Temporal
.
PlainDateTime
(
2000
5
2
0
0
0
0
0
0
calendar
)
;
duration
.
round
(
{
largestUnit
relativeTo
}
)
;
}
{
years
:
[
"
year
"
]
months
:
[
"
month
"
"
month
"
]
weeks
:
[
"
week
"
]
days
:
[
]
hours
:
[
]
minutes
:
[
]
seconds
:
[
]
milliseconds
:
[
]
microseconds
:
[
]
nanoseconds
:
[
]
}
)
;
TemporalHelpers
.
checkCalendarDateUntilLargestUnitSingular
(
(
calendar
largestUnit
)
=
>
{
const
duration
=
new
Temporal
.
Duration
(
0
1
0
0
1
1
1
1
1
1
)
;
const
relativeTo
=
new
Temporal
.
ZonedDateTime
(
1_000_000_000_000_000_000n
"
UTC
"
calendar
)
;
duration
.
round
(
{
largestUnit
smallestUnit
:
largestUnit
relativeTo
}
)
;
}
{
years
:
[
"
year
"
]
months
:
[
"
month
"
]
weeks
:
[
"
week
"
"
week
"
]
days
:
[
]
}
)
;
reportCompare
(
0
0
)
;
