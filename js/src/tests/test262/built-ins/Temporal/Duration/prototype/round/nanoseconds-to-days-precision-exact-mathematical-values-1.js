var
expectedDurationDays
=
[
Number
.
MAX_SAFE_INTEGER
+
4
Number
.
MAX_SAFE_INTEGER
+
3
Number
.
MAX_SAFE_INTEGER
+
2
Number
.
MAX_SAFE_INTEGER
+
1
Number
.
MAX_SAFE_INTEGER
+
0
Number
.
MAX_SAFE_INTEGER
-
1
Number
.
MAX_SAFE_INTEGER
-
2
Number
.
MAX_SAFE_INTEGER
-
3
Number
.
MAX_SAFE_INTEGER
-
4
Number
.
MAX_SAFE_INTEGER
-
5
]
;
class
StopExecution
extends
Error
{
}
var
cal
=
new
class
extends
Temporal
.
Calendar
{
#
dateUntil
=
0
;
dateUntil
(
one
two
options
)
{
if
(
+
+
this
.
#
dateUntil
=
=
=
1
)
{
return
Temporal
.
Duration
.
from
(
{
days
:
Number
.
MAX_SAFE_INTEGER
+
4
}
)
;
}
return
super
.
dateUntil
(
one
two
options
)
;
}
#
dateAdd
=
0
;
dateAdd
(
date
duration
options
)
{
if
(
+
+
this
.
#
dateAdd
=
=
=
3
)
{
assert
.
sameValue
(
duration
.
days
Number
.
MAX_SAFE_INTEGER
+
4
)
;
return
super
.
dateAdd
(
date
"
P6D
"
options
)
;
}
if
(
this
.
#
dateAdd
>
3
)
{
if
(
!
expectedDurationDays
.
length
)
{
throw
new
StopExecution
(
)
;
}
assert
.
sameValue
(
duration
.
days
expectedDurationDays
.
shift
(
)
)
;
return
super
.
dateAdd
(
date
"
P6D
"
options
)
;
}
return
super
.
dateAdd
(
date
duration
options
)
;
}
}
(
"
iso8601
"
)
;
var
zoned
=
new
Temporal
.
ZonedDateTime
(
0n
"
UTC
"
cal
)
;
var
duration
=
Temporal
.
Duration
.
from
(
{
days
:
5
}
)
;
var
options
=
{
smallestUnit
:
"
days
"
relativeTo
:
zoned
}
;
assert
.
throws
(
StopExecution
(
)
=
>
duration
.
round
(
options
)
)
;
reportCompare
(
0
0
)
;
