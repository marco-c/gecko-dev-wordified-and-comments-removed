const
instance
=
new
Temporal
.
Duration
(
1
)
;
const
rangeErrorTests
=
[
[
null
"
null
"
]
[
true
"
boolean
"
]
[
"
"
"
empty
string
"
]
[
1
"
number
that
doesn
'
t
convert
to
a
valid
ISO
string
"
]
[
19761118
"
number
that
would
convert
to
a
valid
ISO
string
in
other
contexts
"
]
[
1n
"
bigint
"
]
]
;
for
(
const
[
timeZone
description
]
of
rangeErrorTests
)
{
assert
.
throws
(
RangeError
(
)
=
>
instance
.
subtract
(
new
Temporal
.
Duration
(
1
)
{
relativeTo
:
{
year
:
2000
month
:
5
day
:
2
timeZone
}
}
)
{
description
}
does
not
convert
to
a
valid
ISO
string
)
;
}
const
typeErrorTests
=
[
[
Symbol
(
)
"
symbol
"
]
[
{
}
"
object
not
implementing
time
zone
protocol
"
]
[
new
Temporal
.
Calendar
(
"
iso8601
"
)
"
calendar
instance
"
]
]
;
for
(
const
[
timeZone
description
]
of
typeErrorTests
)
{
assert
.
throws
(
TypeError
(
)
=
>
instance
.
subtract
(
new
Temporal
.
Duration
(
1
)
{
relativeTo
:
{
year
:
2000
month
:
5
day
:
2
timeZone
}
}
)
{
description
}
is
not
a
valid
object
and
does
not
convert
to
a
string
)
;
}
reportCompare
(
0
0
)
;
