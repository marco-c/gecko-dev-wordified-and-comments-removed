const
plainRelativeTo
=
new
Temporal
.
PlainDate
(
2000
1
1
"
iso8601
"
)
;
const
zonedRelativeTo
=
new
Temporal
.
ZonedDateTime
(
0n
"
UTC
"
"
iso8601
"
)
;
const
d
=
new
Temporal
.
Duration
(
0
0
0
0
23
59
59
999
999
997
)
;
const
noopRoundingOperations
=
[
[
d
{
smallestUnit
:
"
nanoseconds
"
}
"
smallestUnit
ns
"
]
[
d
{
smallestUnit
:
"
nanoseconds
"
relativeTo
:
plainRelativeTo
}
"
smallestUnit
ns
and
plain
relativeTo
"
]
[
d
{
smallestUnit
:
"
nanoseconds
"
relativeTo
:
zonedRelativeTo
}
"
smallestUnit
ns
and
zoned
relativeTo
"
]
[
d
{
smallestUnit
:
"
nanoseconds
"
roundingIncrement
:
1
}
"
round
to
1
ns
"
]
[
d
{
largestUnit
:
"
hours
"
}
"
largestUnit
hours
"
]
[
new
Temporal
.
Duration
(
0
0
0
1
)
{
smallestUnit
:
"
nanoseconds
"
}
"
days
>
0
and
smallestUnit
ns
"
]
[
new
Temporal
.
Duration
(
0
0
0
1
)
{
smallestUnit
:
"
nanoseconds
"
relativeTo
:
plainRelativeTo
}
"
days
>
0
smallestUnit
ns
and
plain
relativeTo
"
]
]
;
for
(
const
[
duration
options
descr
]
of
noopRoundingOperations
)
{
const
result
=
duration
.
round
(
options
)
;
assert
.
notSameValue
(
result
duration
"
rounding
result
should
be
a
new
object
"
)
;
TemporalHelpers
.
assertDurationsEqual
(
result
duration
rounding
should
be
a
no
-
op
with
{
descr
}
)
;
const
negDuration
=
duration
.
negated
(
)
;
const
negResult
=
negDuration
.
round
(
options
)
;
assert
.
notSameValue
(
negResult
negDuration
"
rounding
result
should
be
a
new
object
(
negative
)
"
)
;
TemporalHelpers
.
assertDurationsEqual
(
negResult
negDuration
rounding
should
be
a
no
-
op
with
{
descr
}
(
negative
)
)
;
}
reportCompare
(
0
0
)
;
