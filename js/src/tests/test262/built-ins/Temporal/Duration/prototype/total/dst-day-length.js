const
oneDay
=
new
Temporal
.
Duration
(
0
0
0
1
)
;
const
oneDayNeg
=
new
Temporal
.
Duration
(
0
0
0
-
1
)
;
const
hours12
=
new
Temporal
.
Duration
(
0
0
0
0
12
)
;
const
hours12Neg
=
new
Temporal
.
Duration
(
0
0
0
0
-
12
)
;
const
hours25
=
new
Temporal
.
Duration
(
0
0
0
0
25
)
;
const
hours25Neg
=
new
Temporal
.
Duration
(
0
0
0
0
-
25
)
;
const
hours48
=
new
Temporal
.
Duration
(
0
0
0
0
48
)
;
const
timeZone
=
TemporalHelpers
.
springForwardFallBackTimeZone
(
)
;
const
skippedHourDay
=
new
Temporal
.
ZonedDateTime
(
954662400_000_000_000n
timeZone
)
;
const
repeatedHourDay
=
new
Temporal
.
ZonedDateTime
(
972802800_000_000_000n
timeZone
)
;
const
inRepeatedHour
=
new
Temporal
.
ZonedDateTime
(
972806400_000_000_000n
timeZone
)
;
const
oneDayAfterRepeatedHour
=
new
Temporal
.
ZonedDateTime
(
972896400_000_000_000n
timeZone
)
;
const
beforeSkippedHour
=
new
Temporal
.
ZonedDateTime
(
954585000_000_000_000n
timeZone
)
;
const
dayAfterSkippedHour
=
new
Temporal
.
ZonedDateTime
(
954745200_000_000_000n
timeZone
)
;
const
afterSkippedHour
=
new
Temporal
.
ZonedDateTime
(
954702000_000_000_000n
timeZone
)
;
const
afterRepeatedHour
=
new
Temporal
.
ZonedDateTime
(
972892800_000_000_000n
timeZone
)
;
const
afterRepeatedHourSameDay
=
new
Temporal
.
ZonedDateTime
(
972849600_000_000_000n
timeZone
)
;
const
beforeRepeatedHour
=
new
Temporal
.
ZonedDateTime
(
972716400_000_000_000n
timeZone
)
;
assert
.
sameValue
(
hours25
.
total
(
{
unit
:
"
days
"
relativeTo
:
inRepeatedHour
}
)
1
"
start
inside
repeated
hour
end
after
:
25
hours
=
1
day
"
)
;
assert
.
sameValue
(
oneDay
.
total
(
{
unit
:
"
hours
"
relativeTo
:
inRepeatedHour
}
)
25
"
start
inside
repeated
hour
end
after
:
1
day
=
25
hours
"
)
;
assert
.
sameValue
(
hours25Neg
.
total
(
{
unit
:
"
days
"
relativeTo
:
oneDayAfterRepeatedHour
}
)
-
1
"
start
after
repeated
hour
end
inside
:
-
25
hours
=
1
day
"
)
;
assert
.
sameValue
(
oneDayNeg
.
total
(
{
unit
:
"
hours
"
relativeTo
:
oneDayAfterRepeatedHour
}
)
-
25
"
start
after
repeated
hour
end
inside
:
-
1
day
=
-
25
hours
"
)
;
assert
.
sameValue
(
hours25
.
total
(
{
unit
:
"
days
"
relativeTo
:
beforeSkippedHour
}
)
24
/
23
"
start
in
normal
hour
end
in
skipped
hour
:
25
hours
=
1
1
/
23
day
"
)
;
assert
.
sameValue
(
oneDay
.
total
(
{
unit
:
"
hours
"
relativeTo
:
beforeSkippedHour
}
)
24
"
start
in
normal
hour
end
in
skipped
hour
:
1
day
=
24
hours
"
)
;
assert
.
sameValue
(
hours25
.
total
(
{
unit
:
"
days
"
relativeTo
:
skippedHourDay
}
)
13
/
12
"
start
before
skipped
hour
end
>
1
day
after
:
25
hours
=
1
2
/
24
day
"
)
;
assert
.
sameValue
(
oneDay
.
total
(
{
unit
:
"
hours
"
relativeTo
:
skippedHourDay
}
)
23
"
start
before
skipped
hour
end
>
1
day
after
:
1
day
=
23
hours
"
)
;
assert
.
sameValue
(
hours25Neg
.
total
(
{
unit
:
"
days
"
relativeTo
:
dayAfterSkippedHour
}
)
-
13
/
12
"
start
after
skipped
hour
end
>
1
day
before
:
-
25
hours
=
-
1
2
/
24
day
"
)
;
assert
.
sameValue
(
oneDayNeg
.
total
(
{
unit
:
"
hours
"
relativeTo
:
dayAfterSkippedHour
}
)
-
23
"
start
after
skipped
hour
end
>
1
day
before
:
-
1
day
=
-
23
hours
"
)
;
assert
.
sameValue
(
hours12
.
total
(
{
unit
:
"
days
"
relativeTo
:
skippedHourDay
}
)
12
/
23
"
start
before
skipped
hour
end
<
1
day
after
:
12
hours
=
12
/
23
days
"
)
;
assert
.
sameValue
(
hours12Neg
.
total
(
{
unit
:
"
days
"
relativeTo
:
afterSkippedHour
}
)
-
12
/
23
"
start
after
skipped
hour
end
<
1
day
before
:
-
12
hours
=
-
12
/
23
days
"
)
;
assert
.
sameValue
(
hours25
.
total
(
{
unit
:
"
days
"
relativeTo
:
repeatedHourDay
}
)
1
"
start
before
repeated
hour
end
>
1
day
after
:
25
hours
=
1
day
"
)
;
assert
.
sameValue
(
oneDay
.
total
(
{
unit
:
"
hours
"
relativeTo
:
repeatedHourDay
}
)
25
"
start
before
repeated
hour
end
>
1
day
after
:
1
day
=
25
hours
"
)
;
assert
.
sameValue
(
hours25Neg
.
total
(
{
unit
:
"
days
"
relativeTo
:
afterRepeatedHour
}
)
-
1
"
start
after
repeated
hour
end
>
1
day
before
:
-
25
hours
=
-
1
day
"
)
;
assert
.
sameValue
(
oneDayNeg
.
total
(
{
unit
:
"
hours
"
relativeTo
:
afterRepeatedHour
}
)
-
25
"
start
after
repeated
hour
end
>
1
day
before
:
-
1
day
=
-
25
hours
"
)
;
assert
.
sameValue
(
hours12
.
total
(
{
unit
:
"
days
"
relativeTo
:
repeatedHourDay
}
)
12
/
25
"
start
before
repeated
hour
end
<
1
day
after
:
12
hours
=
12
/
25
days
"
)
;
assert
.
sameValue
(
hours12Neg
.
total
(
{
unit
:
"
days
"
relativeTo
:
afterRepeatedHourSameDay
}
)
-
12
/
25
"
start
after
repeated
hour
end
<
1
day
before
:
-
12
hours
=
-
12
/
25
days
"
)
;
assert
.
sameValue
(
hours48
.
total
(
{
unit
:
"
days
"
relativeTo
:
beforeRepeatedHour
}
)
49
/
25
"
start
before
repeated
hour
end
after
:
48
hours
=
1
24
/
25
days
"
)
;
reportCompare
(
0
0
)
;
