const
actual
=
[
]
;
const
dstTimeZone
=
TemporalHelpers
.
springForwardFallBackTimeZone
(
)
;
const
dstTimeZoneObserver
=
TemporalHelpers
.
timeZoneObserver
(
actual
"
timeZone
"
{
getOffsetNanosecondsFor
:
dstTimeZone
.
getOffsetNanosecondsFor
.
bind
(
dstTimeZone
)
getPossibleInstantsFor
:
dstTimeZone
.
getPossibleInstantsFor
.
bind
(
dstTimeZone
)
}
)
;
const
calendar
=
TemporalHelpers
.
calendarObserver
(
actual
"
calendar
"
)
;
const
instance
=
new
Temporal
.
Duration
(
1
0
0
1
)
;
let
relativeTo
=
{
year
:
2000
month
:
4
day
:
2
hour
:
2
minute
:
30
timeZone
:
dstTimeZoneObserver
calendar
}
;
instance
.
subtract
(
new
Temporal
.
Duration
(
0
0
0
0
24
)
{
relativeTo
}
)
;
const
expected
=
[
"
has
calendar
.
dateAdd
"
"
has
calendar
.
dateFromFields
"
"
has
calendar
.
dateUntil
"
"
has
calendar
.
day
"
"
has
calendar
.
dayOfWeek
"
"
has
calendar
.
dayOfYear
"
"
has
calendar
.
daysInMonth
"
"
has
calendar
.
daysInWeek
"
"
has
calendar
.
daysInYear
"
"
has
calendar
.
fields
"
"
has
calendar
.
id
"
"
has
calendar
.
inLeapYear
"
"
has
calendar
.
mergeFields
"
"
has
calendar
.
month
"
"
has
calendar
.
monthCode
"
"
has
calendar
.
monthDayFromFields
"
"
has
calendar
.
monthsInYear
"
"
has
calendar
.
weekOfYear
"
"
has
calendar
.
year
"
"
has
calendar
.
yearMonthFromFields
"
"
has
calendar
.
yearOfWeek
"
"
get
calendar
.
dateFromFields
"
"
get
calendar
.
fields
"
"
call
calendar
.
fields
"
"
call
calendar
.
dateFromFields
"
"
has
timeZone
.
getOffsetNanosecondsFor
"
"
has
timeZone
.
getPossibleInstantsFor
"
"
has
timeZone
.
id
"
"
get
timeZone
.
getOffsetNanosecondsFor
"
"
get
timeZone
.
getPossibleInstantsFor
"
"
call
timeZone
.
getPossibleInstantsFor
"
]
;
const
expectedSpringForward
=
expected
.
concat
(
[
"
call
timeZone
.
getOffsetNanosecondsFor
"
"
call
timeZone
.
getOffsetNanosecondsFor
"
"
call
timeZone
.
getPossibleInstantsFor
"
]
)
;
assert
.
compareArray
(
actual
.
slice
(
0
expectedSpringForward
.
length
)
expectedSpringForward
"
order
of
operations
converting
property
bag
at
skipped
wall
-
clock
time
"
)
;
actual
.
splice
(
0
)
;
relativeTo
=
{
year
:
2000
month
:
10
day
:
29
hour
:
1
minute
:
30
timeZone
:
dstTimeZoneObserver
calendar
}
;
instance
.
subtract
(
new
Temporal
.
Duration
(
0
0
0
0
24
)
{
relativeTo
}
)
;
assert
.
compareArray
(
actual
.
slice
(
0
expected
.
length
)
expected
"
order
of
operations
converting
property
bag
at
repeated
wall
-
clock
time
"
)
;
actual
.
splice
(
0
)
;
reportCompare
(
0
0
)
;
