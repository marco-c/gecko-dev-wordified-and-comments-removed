const
instance
=
new
Temporal
.
Duration
(
0
0
0
0
24
0
0
0
0
1
)
;
const
tz
=
new
class
extends
Temporal
.
TimeZone
{
#
getPossibleInstantsForCalls
=
0
;
getPossibleInstantsFor
(
dt
)
{
this
.
#
getPossibleInstantsForCalls
+
+
;
if
(
this
.
#
getPossibleInstantsForCalls
<
=
2
)
{
return
[
new
Temporal
.
Instant
(
86400_000_000_000n
+
2n
)
]
}
return
super
.
getPossibleInstantsFor
(
dt
)
;
}
}
(
"
UTC
"
)
;
const
cal
=
new
class
extends
Temporal
.
Calendar
{
#
dateUntilCalls
=
0
;
dateUntil
(
one
two
options
)
{
this
.
#
dateUntilCalls
+
+
;
if
(
this
.
#
dateUntilCalls
=
=
=
1
)
{
return
new
Temporal
.
Duration
(
0
0
0
-
2
)
;
}
return
super
.
dateUntil
(
one
two
options
)
;
}
}
(
"
iso8601
"
)
;
const
relativeTo
=
new
Temporal
.
ZonedDateTime
(
0n
tz
cal
)
;
assert
.
throws
(
RangeError
(
)
=
>
instance
.
round
(
{
relativeTo
smallestUnit
:
"
days
"
}
)
)
;
reportCompare
(
0
0
)
;
