function
nextUp
(
num
)
{
if
(
!
Number
.
isFinite
(
num
)
)
{
return
num
;
}
if
(
num
=
=
=
0
)
{
return
Number
.
MIN_VALUE
;
}
var
f64
=
new
Float64Array
(
[
num
]
)
;
var
u64
=
new
BigUint64Array
(
f64
.
buffer
)
;
u64
[
0
]
+
=
(
num
<
0
?
-
1n
:
1n
)
;
return
f64
[
0
]
;
}
function
nextDown
(
num
)
{
if
(
!
Number
.
isFinite
(
num
)
)
{
return
num
;
}
if
(
num
=
=
=
0
)
{
return
-
Number
.
MIN_VALUE
;
}
var
f64
=
new
Float64Array
(
[
num
]
)
;
var
u64
=
new
BigUint64Array
(
f64
.
buffer
)
;
u64
[
0
]
+
=
(
num
<
0
?
1n
:
-
1n
)
;
return
f64
[
0
]
;
}
function
f64Repr
(
f
)
{
const
buf
=
new
ArrayBuffer
(
8
)
;
new
DataView
(
buf
)
.
setFloat64
(
0
f
)
;
return
new
Uint8Array
(
buf
)
;
}
function
createTimeZone
(
)
{
const
tz
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
TemporalHelpers
.
substituteMethod
(
tz
"
getPossibleInstantsFor
"
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
[
new
Temporal
.
Instant
(
-
86400_0000_0000_000_000_000n
)
]
[
new
Temporal
.
Instant
(
-
86400_0000_0000_000_000_000n
+
2n
*
*
53n
-
1n
)
]
]
)
;
return
tz
;
}
function
createCalendar
(
)
{
const
cal
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
TemporalHelpers
.
substituteMethod
(
cal
"
dateAdd
"
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
new
Temporal
.
PlainDate
(
-
271821
4
20
)
new
Temporal
.
PlainDate
(
-
271821
4
20
)
new
Temporal
.
PlainDate
(
275760
9
13
)
]
)
;
return
cal
;
}
const
expected
=
1
.
000000005000000_1104671915053146003490515686745299
;
assert
.
sameValue
(
expected
1
.
000000005000000_2
"
the
float
representation
of
the
result
is
1
.
0000000050000002
"
)
;
assert
.
compareArray
(
f64Repr
(
expected
)
[
0x3f
0xf0
0x00
0x00
0x01
0x57
0x98
0xef
]
"
the
bit
representation
of
the
result
is
0x3ff00000015798ef
"
)
;
assert
.
sameValue
(
nextDown
(
expected
)
1
.
000000004999999_96961
"
the
next
Number
in
direction
-
Infinity
is
less
precise
"
)
;
assert
.
sameValue
(
nextUp
(
expected
)
1
.
000000005000000_4137
"
the
next
Number
in
direction
+
Infinity
is
less
precise
"
)
;
let
relativeTo
=
new
Temporal
.
ZonedDateTime
(
-
86400_0000_0000_000_000_000n
createTimeZone
(
)
createCalendar
(
)
)
;
const
dYears
=
new
Temporal
.
Duration
(
1
0
0
1
0
0
0
199
0
1
)
;
assert
.
sameValue
(
dYears
.
total
(
{
unit
:
"
years
"
relativeTo
}
)
expected
"
Correct
division
by
large
number
in
years
total
"
)
;
relativeTo
=
new
Temporal
.
ZonedDateTime
(
-
86400_0000_0000_000_000_000n
createTimeZone
(
)
createCalendar
(
)
)
;
const
dMonths
=
new
Temporal
.
Duration
(
0
1
0
1
0
0
0
199
0
1
)
;
assert
.
sameValue
(
dMonths
.
total
(
{
unit
:
"
months
"
relativeTo
}
)
expected
"
Correct
division
by
large
number
in
months
total
"
)
;
const
weeksCal
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
TemporalHelpers
.
substituteMethod
(
weeksCal
"
dateAdd
"
[
TemporalHelpers
.
SUBSTITUTE_SKIP
TemporalHelpers
.
SUBSTITUTE_SKIP
new
Temporal
.
PlainDate
(
275760
9
13
)
]
)
;
relativeTo
=
new
Temporal
.
ZonedDateTime
(
-
86400_0000_0000_000_000_000n
createTimeZone
(
)
weeksCal
)
;
const
dWeeks
=
new
Temporal
.
Duration
(
0
0
1
1
0
0
0
199
0
1
)
;
assert
.
sameValue
(
dWeeks
.
total
(
{
unit
:
"
weeks
"
relativeTo
}
)
expected
"
Correct
division
by
large
number
in
weeks
total
"
)
;
reportCompare
(
0
0
)
;
