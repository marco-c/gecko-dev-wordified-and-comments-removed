let
calls
=
0
;
class
Shift24Hour
extends
Temporal
.
TimeZone
{
id
=
'
TestTimeZone
'
;
constructor
(
)
{
super
(
'
UTC
'
)
;
}
getOffsetNanosecondsFor
(
instant
)
{
return
0
;
}
getPossibleInstantsFor
(
plainDateTime
)
{
calls
+
+
;
const
utc
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
const
[
utcInstant
]
=
utc
.
getPossibleInstantsFor
(
plainDateTime
)
;
return
[
utcInstant
.
subtract
(
{
hours
:
12
}
)
utcInstant
.
add
(
{
hours
:
12
}
)
]
;
}
}
const
timeZone
=
new
Shift24Hour
(
)
;
for
(
const
disambiguation
of
[
"
earlier
"
"
later
"
"
compatible
"
]
)
{
timeZone
.
getInstantFor
(
new
Temporal
.
PlainDateTime
(
1970
1
1
12
)
{
disambiguation
}
)
;
assert
(
calls
>
=
1
"
getPossibleInstantsFor
should
be
called
at
least
once
"
)
;
calls
=
0
;
}
reportCompare
(
0
0
)
;
