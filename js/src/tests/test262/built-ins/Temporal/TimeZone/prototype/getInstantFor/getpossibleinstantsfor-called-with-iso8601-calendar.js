class
SkippedDateTime
extends
Temporal
.
TimeZone
{
constructor
(
)
{
super
(
"
UTC
"
)
;
this
.
calls
=
0
;
}
getPossibleInstantsFor
(
dateTime
)
{
if
(
this
.
calls
+
+
%
2
=
=
0
)
{
return
[
]
;
}
assert
.
sameValue
(
dateTime
.
getISOFields
(
)
.
calendar
"
iso8601
"
"
getPossibleInstantsFor
called
with
dateTime
with
built
-
in
ISO
8601
calendar
"
)
;
return
super
.
getPossibleInstantsFor
(
dateTime
)
;
}
}
const
nonBuiltinISOCalendar
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
for
(
const
disambiguation
of
[
"
earlier
"
"
later
"
"
compatible
"
]
)
{
const
timeZone
=
new
SkippedDateTime
(
)
;
timeZone
.
getInstantFor
(
new
Temporal
.
PlainDateTime
(
2000
3
4
12
34
56
0
0
0
nonBuiltinISOCalendar
)
{
disambiguation
}
)
;
assert
.
sameValue
(
timeZone
.
calls
2
"
getPossibleInstantsFor
should
have
been
called
2
times
"
)
;
}
reportCompare
(
0
0
)
;
