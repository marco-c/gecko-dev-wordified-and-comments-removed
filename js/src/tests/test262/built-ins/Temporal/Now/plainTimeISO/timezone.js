const
actual
=
[
]
;
const
expected
=
[
"
has
timeZone
.
timeZone
"
"
get
timeZone
.
getOffsetNanosecondsFor
"
"
call
timeZone
.
getOffsetNanosecondsFor
"
]
;
const
timeZone
=
new
Proxy
(
{
getOffsetNanosecondsFor
(
instant
)
{
actual
.
push
(
"
call
timeZone
.
getOffsetNanosecondsFor
"
)
;
assert
.
sameValue
(
instant
instanceof
Temporal
.
Instant
true
"
Instant
"
)
;
return
-
Number
(
instant
.
epochNanoseconds
%
86400_000_000_000n
)
;
}
}
{
has
(
target
property
)
{
actual
.
push
(
has
timeZone
.
{
property
}
)
;
return
property
in
target
;
}
get
(
target
property
)
{
actual
.
push
(
get
timeZone
.
{
property
}
)
;
return
target
[
property
]
;
}
}
)
;
const
result
=
Temporal
.
Now
.
plainTimeISO
(
timeZone
)
;
assert
.
sameValue
(
result
instanceof
Temporal
.
PlainTime
true
)
;
for
(
const
property
of
[
"
hour
"
"
minute
"
"
second
"
"
millisecond
"
"
microsecond
"
"
nanosecond
"
]
)
{
assert
.
sameValue
(
result
[
property
]
0
property
)
;
}
assert
.
compareArray
(
actual
expected
)
;
reportCompare
(
0
0
)
;
