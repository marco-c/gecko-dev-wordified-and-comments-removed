const
badResults
=
[
[
undefined
RangeError
]
[
Symbol
(
"
foo
"
)
TypeError
]
]
;
badResults
.
forEach
(
(
[
result
error
]
)
=
>
{
const
calendar
=
new
class
extends
Temporal
.
Calendar
{
monthCode
(
)
{
return
result
;
}
}
(
"
iso8601
"
)
;
const
instance
=
new
Temporal
.
PlainMonthDay
(
12
15
calendar
)
;
assert
.
throws
(
error
(
)
=
>
instance
.
monthCode
{
typeof
result
}
not
converted
to
string
)
;
}
)
;
const
convertedResults
=
[
[
null
"
null
"
]
[
true
"
true
"
]
[
false
"
false
"
]
[
7
.
1
"
7
.
1
"
]
[
"
M01
"
"
M01
"
]
[
{
toString
(
)
{
return
"
M01
"
;
}
}
"
M01
"
]
]
;
convertedResults
.
forEach
(
(
[
result
convertedResult
]
)
=
>
{
const
calendar
=
new
class
extends
Temporal
.
Calendar
{
monthCode
(
)
{
return
result
;
}
}
(
"
iso8601
"
)
;
const
instance
=
new
Temporal
.
PlainMonthDay
(
12
15
calendar
)
;
assert
.
sameValue
(
instance
.
monthCode
convertedResult
{
typeof
result
}
converted
to
string
{
convertedResult
}
)
;
}
)
;
reportCompare
(
0
0
)
;
