const
expected
=
[
"
get
other
.
calendar
"
"
has
other
.
calendar
.
dateAdd
"
"
has
other
.
calendar
.
dateFromFields
"
"
has
other
.
calendar
.
dateUntil
"
"
has
other
.
calendar
.
day
"
"
has
other
.
calendar
.
dayOfWeek
"
"
has
other
.
calendar
.
dayOfYear
"
"
has
other
.
calendar
.
daysInMonth
"
"
has
other
.
calendar
.
daysInWeek
"
"
has
other
.
calendar
.
daysInYear
"
"
has
other
.
calendar
.
fields
"
"
has
other
.
calendar
.
id
"
"
has
other
.
calendar
.
inLeapYear
"
"
has
other
.
calendar
.
mergeFields
"
"
has
other
.
calendar
.
month
"
"
has
other
.
calendar
.
monthCode
"
"
has
other
.
calendar
.
monthDayFromFields
"
"
has
other
.
calendar
.
monthsInYear
"
"
has
other
.
calendar
.
weekOfYear
"
"
has
other
.
calendar
.
year
"
"
has
other
.
calendar
.
yearMonthFromFields
"
"
has
other
.
calendar
.
yearOfWeek
"
"
get
other
.
calendar
.
dateFromFields
"
"
get
other
.
calendar
.
fields
"
"
call
other
.
calendar
.
fields
"
"
get
other
.
day
"
"
get
other
.
day
.
valueOf
"
"
call
other
.
day
.
valueOf
"
"
get
other
.
month
"
"
get
other
.
month
.
valueOf
"
"
call
other
.
month
.
valueOf
"
"
get
other
.
monthCode
"
"
get
other
.
monthCode
.
toString
"
"
call
other
.
monthCode
.
toString
"
"
get
other
.
year
"
"
get
other
.
year
.
valueOf
"
"
call
other
.
year
.
valueOf
"
"
call
other
.
calendar
.
dateFromFields
"
"
get
this
.
calendar
.
id
"
"
get
other
.
calendar
.
id
"
"
ownKeys
options
"
"
getOwnPropertyDescriptor
options
.
roundingIncrement
"
"
get
options
.
roundingIncrement
"
"
getOwnPropertyDescriptor
options
.
roundingMode
"
"
get
options
.
roundingMode
"
"
getOwnPropertyDescriptor
options
.
largestUnit
"
"
get
options
.
largestUnit
"
"
getOwnPropertyDescriptor
options
.
smallestUnit
"
"
get
options
.
smallestUnit
"
"
getOwnPropertyDescriptor
options
.
additional
"
"
get
options
.
additional
"
"
get
options
.
largestUnit
.
toString
"
"
call
options
.
largestUnit
.
toString
"
"
get
options
.
roundingIncrement
.
valueOf
"
"
call
options
.
roundingIncrement
.
valueOf
"
"
get
options
.
roundingMode
.
toString
"
"
call
options
.
roundingMode
.
toString
"
"
get
options
.
smallestUnit
.
toString
"
"
call
options
.
smallestUnit
.
toString
"
]
;
const
actual
=
[
]
;
const
ownCalendar
=
TemporalHelpers
.
calendarObserver
(
actual
"
this
.
calendar
"
)
;
const
instance
=
new
Temporal
.
PlainDate
(
2000
5
2
ownCalendar
)
;
const
otherDatePropertyBag
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2001
month
:
6
monthCode
:
"
M06
"
day
:
2
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
}
"
other
"
)
;
function
createOptionsObserver
(
{
smallestUnit
=
"
days
"
largestUnit
=
"
auto
"
roundingMode
=
"
halfExpand
"
roundingIncrement
=
1
}
=
{
}
)
{
return
TemporalHelpers
.
propertyBagObserver
(
actual
{
roundingIncrement
roundingMode
largestUnit
smallestUnit
additional
:
"
property
"
}
"
options
"
)
;
}
actual
.
splice
(
0
)
;
instance
.
since
(
otherDatePropertyBag
createOptionsObserver
(
{
largestUnit
:
"
years
"
}
)
)
;
assert
.
compareArray
(
actual
expected
.
concat
(
[
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateUntil
"
]
)
"
order
of
operations
"
)
;
actual
.
splice
(
0
)
;
const
identicalPropertyBag
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2000
month
:
5
monthCode
:
"
M05
"
day
:
2
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
}
"
other
"
)
;
instance
.
since
(
identicalPropertyBag
createOptionsObserver
(
)
)
;
assert
.
compareArray
(
actual
expected
"
order
of
operations
with
identical
dates
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForYearRounding
=
expected
.
concat
(
[
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
]
)
;
instance
.
since
(
otherDatePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
years
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForYearRounding
"
order
of
operations
with
smallestUnit
=
years
"
)
;
actual
.
splice
(
0
)
;
const
otherDatePropertyBagSameMonth
=
TemporalHelpers
.
propertyBagObserver
(
actual
{
year
:
2001
month
:
5
monthCode
:
"
M05
"
day
:
2
calendar
:
TemporalHelpers
.
calendarObserver
(
actual
"
other
.
calendar
"
)
}
"
other
"
)
;
const
expectedOpsForYearRoundingSameMonth
=
expected
.
concat
(
[
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
]
)
;
instance
.
since
(
otherDatePropertyBagSameMonth
createOptionsObserver
(
{
smallestUnit
:
"
years
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForYearRoundingSameMonth
"
order
of
operations
with
smallestUnit
=
years
and
no
excess
months
/
weeks
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForMonthRounding
=
expected
.
concat
(
[
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
"
call
this
.
calendar
.
dateAdd
"
]
)
;
instance
.
since
(
otherDatePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
months
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForMonthRounding
"
order
of
operations
with
smallestUnit
=
months
"
)
;
actual
.
splice
(
0
)
;
const
expectedOpsForWeekRounding
=
expected
.
concat
(
[
"
get
this
.
calendar
.
dateAdd
"
"
get
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateUntil
"
"
call
this
.
calendar
.
dateAdd
"
]
)
;
instance
.
since
(
otherDatePropertyBag
createOptionsObserver
(
{
smallestUnit
:
"
weeks
"
}
)
)
;
assert
.
compareArray
(
actual
expectedOpsForWeekRounding
"
order
of
operations
with
smallestUnit
=
weeks
"
)
;
reportCompare
(
0
0
)
;
