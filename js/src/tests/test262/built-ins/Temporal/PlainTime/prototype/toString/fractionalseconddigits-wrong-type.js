const
time
=
new
Temporal
.
PlainTime
(
12
34
56
987
650
0
)
;
assert
.
throws
(
RangeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
null
}
)
"
null
is
not
a
number
and
converts
to
the
string
'
null
'
which
is
not
valid
for
fractionalSecondDigits
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
true
}
)
"
true
is
not
a
number
and
converts
to
the
string
'
true
'
which
is
not
valid
for
fractionalSecondDigits
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
false
}
)
"
false
is
not
a
number
and
converts
to
the
string
'
false
'
which
is
not
valid
for
fractionalSecondDigits
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
Symbol
(
)
}
)
"
symbols
are
not
numbers
and
cannot
convert
to
strings
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
2n
}
)
"
bigints
are
not
numbers
and
convert
to
strings
which
are
not
valid
for
fractionalSecondDigits
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
time
.
toString
(
{
fractionalSecondDigits
:
{
}
}
)
"
plain
objects
are
not
numbers
and
convert
to
strings
which
are
not
valid
for
fractionalSecondDigits
"
)
;
const
expected
=
[
"
get
fractionalSecondDigits
.
toString
"
"
call
fractionalSecondDigits
.
toString
"
]
;
const
actual
=
[
]
;
const
observer
=
TemporalHelpers
.
toPrimitiveObserver
(
actual
"
auto
"
"
fractionalSecondDigits
"
)
;
const
result
=
time
.
toString
(
{
fractionalSecondDigits
:
observer
}
)
;
assert
.
sameValue
(
result
"
12
:
34
:
56
.
98765
"
"
object
with
toString
uses
toString
return
value
"
)
;
assert
.
compareArray
(
actual
expected
"
object
with
toString
calls
toString
and
not
valueOf
"
)
;
reportCompare
(
0
0
)
;
