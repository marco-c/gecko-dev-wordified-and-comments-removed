var
sym
=
Symbol
(
'
a
description
'
)
;
var
results
=
[
]
;
var
set
=
WeakMap
.
prototype
.
set
;
WeakMap
.
prototype
.
set
=
function
(
key
value
)
{
results
.
push
(
{
_this
:
this
key
:
key
value
:
value
}
)
;
return
set
.
call
(
this
key
value
)
;
}
;
var
map
=
new
WeakMap
(
[
[
sym
42
]
[
Symbol
.
hasInstance
43
]
]
)
;
assert
.
sameValue
(
results
.
length
2
'
Called
set
(
)
for
each
entry
'
)
;
assert
.
sameValue
(
results
[
0
]
.
key
sym
'
Adds
object
in
order
-
first
key
regular
symbol
'
)
;
assert
.
sameValue
(
results
[
0
]
.
value
42
'
Adds
object
in
order
-
first
value
'
)
;
assert
.
sameValue
(
results
[
0
]
.
_this
map
'
Adds
object
in
order
-
this
'
)
;
assert
.
sameValue
(
results
[
1
]
.
key
Symbol
.
hasInstance
'
Adds
object
in
order
-
second
key
well
-
known
symbol
'
)
;
assert
.
sameValue
(
results
[
1
]
.
value
43
'
Adds
object
in
order
-
second
value
'
)
;
assert
.
sameValue
(
results
[
1
]
.
_this
map
'
Adds
object
in
order
-
this
'
)
;
reportCompare
(
0
0
)
;
