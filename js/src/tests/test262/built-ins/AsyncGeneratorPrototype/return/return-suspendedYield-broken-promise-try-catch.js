let
caughtErr
;
var
g
=
async
function
*
(
)
{
try
{
yield
;
return
'
this
is
never
returned
'
;
}
catch
(
err
)
{
caughtErr
=
err
;
return
1
;
}
}
;
let
brokenPromise
=
Promise
.
resolve
(
42
)
;
Object
.
defineProperty
(
brokenPromise
'
constructor
'
{
get
:
function
(
)
{
throw
new
Error
(
'
broken
promise
'
)
;
}
}
)
;
var
it
=
g
(
)
;
it
.
next
(
)
.
then
(
(
)
=
>
{
return
it
.
return
(
brokenPromise
)
;
}
)
.
then
(
ret
=
>
{
assert
.
sameValue
(
caughtErr
.
message
'
broken
promise
'
)
;
assert
.
sameValue
(
ret
.
value
1
'
returned
value
'
)
;
assert
.
sameValue
(
ret
.
done
true
'
iterator
is
closed
'
)
;
}
)
.
then
(
DONE
DONE
)
;
