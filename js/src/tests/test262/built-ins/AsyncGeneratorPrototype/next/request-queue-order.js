var
order
=
0
;
async
function
*
g
(
)
{
yield
'
first
'
;
yield
'
second
'
;
}
var
iter
=
g
(
)
;
var
item1
=
iter
.
next
(
)
;
var
item2
=
iter
.
next
(
)
;
var
item3
=
iter
.
next
(
)
;
var
resolvedorder
=
0
;
Promise
.
all
(
[
item3
.
then
(
function
(
result
)
{
resolvedorder
+
+
;
assert
.
sameValue
(
resolvedorder
3
)
;
assert
.
sameValue
(
result
.
value
undefined
)
;
assert
.
sameValue
(
result
.
done
true
)
;
}
)
item2
.
then
(
function
(
result
)
{
resolvedorder
+
+
;
assert
.
sameValue
(
resolvedorder
2
)
;
assert
.
sameValue
(
result
.
value
"
second
"
)
;
assert
.
sameValue
(
result
.
done
false
)
;
}
)
item1
.
then
(
function
(
result
)
{
resolvedorder
+
+
;
assert
.
sameValue
(
resolvedorder
1
)
;
assert
.
sameValue
(
result
.
value
"
first
"
)
;
assert
.
sameValue
(
result
.
done
false
)
;
}
)
]
)
.
then
(
function
(
)
{
DONE
(
)
;
}
DONE
)
;
