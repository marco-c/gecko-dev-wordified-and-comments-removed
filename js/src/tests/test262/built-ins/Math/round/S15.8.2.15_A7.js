assert
.
sameValue
(
1
/
Math
.
round
(
-
0
.
5
)
1
/
-
0
'
The
result
of
evaluating
(
1
/
Math
.
round
(
-
0
.
5
)
)
is
expected
to
be
1
/
-
0
'
)
;
assert
.
sameValue
(
1
/
Math
.
round
(
-
0
.
25
)
1
/
-
0
'
The
result
of
evaluating
(
1
/
Math
.
round
(
-
0
.
25
)
)
is
expected
to
be
1
/
-
0
'
)
;
assert
.
sameValue
(
1
/
Math
.
round
(
-
0
)
1
/
-
0
'
The
result
of
evaluating
(
1
/
Math
.
round
(
-
0
)
)
is
expected
to
be
1
/
-
0
'
)
;
var
x
=
0
;
x
=
0
.
5
-
Number
.
EPSILON
/
4
;
assert
.
sameValue
(
1
/
Math
.
round
(
x
)
1
/
0
'
The
result
of
evaluating
(
1
/
Math
.
round
(
x
)
)
is
expected
to
be
1
/
0
'
)
;
x
=
-
(
2
/
Number
.
EPSILON
-
1
)
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
-
(
2
/
Number
.
EPSILON
-
1
)
)
returns
x
'
)
;
x
=
-
(
1
.
5
/
Number
.
EPSILON
-
1
)
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
-
(
1
.
5
/
Number
.
EPSILON
-
1
)
)
returns
x
'
)
;
x
=
-
(
1
/
Number
.
EPSILON
+
1
)
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
-
(
1
/
Number
.
EPSILON
+
1
)
)
returns
x
'
)
;
x
=
1
/
Number
.
EPSILON
+
1
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
1
/
Number
.
EPSILON
+
1
)
returns
x
'
)
;
x
=
1
.
5
/
Number
.
EPSILON
-
1
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
1
.
5
/
Number
.
EPSILON
-
1
)
returns
x
'
)
;
x
=
2
/
Number
.
EPSILON
-
1
;
assert
.
sameValue
(
Math
.
round
(
x
)
x
'
Math
.
round
(
2
/
Number
.
EPSILON
-
1
)
returns
x
'
)
;
reportCompare
(
0
0
)
;
