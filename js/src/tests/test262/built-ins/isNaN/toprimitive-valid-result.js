var
called
=
0
;
var
obj
=
{
valueOf
:
function
(
)
{
called
=
NaN
;
return
Infinity
;
}
toString
:
function
(
)
{
called
=
NaN
;
return
Infinity
;
}
}
;
obj
[
Symbol
.
toPrimitive
]
=
function
(
)
{
called
+
=
1
;
return
42
;
}
;
assert
.
sameValue
(
isNaN
(
obj
)
false
"
use
returned
value
-
non
-
NaN
number
"
)
;
assert
.
sameValue
(
called
1
"
toPrimitive
is
called
-
non
-
NaN
number
"
)
;
called
=
0
;
obj
[
Symbol
.
toPrimitive
]
=
function
(
)
{
called
+
=
1
;
return
"
this
is
not
a
number
"
;
}
;
assert
.
sameValue
(
isNaN
(
obj
)
true
"
use
returned
value
-
string
to
NaN
"
)
;
assert
.
sameValue
(
called
1
"
toPrimitive
is
called
-
string
to
NaN
"
)
;
called
=
0
;
obj
[
Symbol
.
toPrimitive
]
=
function
(
)
{
called
+
=
1
;
return
true
;
}
;
assert
.
sameValue
(
isNaN
(
obj
)
false
"
use
returned
value
-
boolean
true
"
)
;
assert
.
sameValue
(
called
1
"
toPrimitive
is
called
-
boolean
true
"
)
;
called
=
0
;
obj
[
Symbol
.
toPrimitive
]
=
function
(
)
{
called
+
=
1
;
return
false
;
}
;
assert
.
sameValue
(
isNaN
(
obj
)
false
"
use
returned
value
-
boolean
false
"
)
;
assert
.
sameValue
(
called
1
"
toPrimitive
is
called
-
boolean
false
"
)
;
called
=
0
;
obj
[
Symbol
.
toPrimitive
]
=
function
(
)
{
called
+
=
1
;
return
NaN
;
}
;
assert
.
sameValue
(
isNaN
(
obj
)
true
"
use
returned
value
-
NaN
"
)
;
assert
.
sameValue
(
called
1
"
toPrimitive
is
called
-
NaN
"
)
;
reportCompare
(
0
0
)
;
