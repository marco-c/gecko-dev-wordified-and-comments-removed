var
desc
=
{
value
:
0
configurable
:
false
enumerable
:
true
writable
:
true
}
;
var
obj
=
{
valueOf
:
function
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
sample
=
new
TA
(
42
)
;
DETACHBUFFER
(
sample
.
buffer
)
;
assert
.
throws
(
TypeError
function
(
)
{
Reflect
.
defineProperty
(
sample
"
0
"
desc
)
;
}
"
Throws
TypeError
on
valid
numeric
index
if
instance
has
a
detached
buffer
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
-
1
"
desc
)
false
"
Return
false
before
Detached
Buffer
check
when
value
is
a
negative
number
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
1
.
1
"
desc
)
false
"
Return
false
before
Detached
Buffer
check
when
value
is
not
an
integer
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
-
0
"
desc
)
false
"
Return
false
before
Detached
Buffer
check
when
value
is
-
0
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
2
"
{
configurable
:
true
enumerable
:
true
writable
:
true
value
:
obj
}
)
false
"
Return
false
before
Detached
Buffer
check
when
desc
configurable
is
true
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
3
"
{
configurable
:
false
enumerable
:
false
writable
:
true
value
:
obj
}
)
false
"
Return
false
before
Detached
Buffer
check
when
desc
enumerable
is
false
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
4
"
{
writable
:
false
configurable
:
false
enumerable
:
true
value
:
obj
}
)
false
"
Return
false
before
Detached
Buffer
check
when
desc
writable
is
false
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
42
"
desc
)
false
"
Return
false
before
Detached
Buffer
check
when
key
=
=
[
[
ArrayLength
]
]
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
43
"
desc
)
false
"
Return
false
before
Detached
Buffer
check
when
key
>
[
[
ArrayLength
]
]
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
5
"
{
get
:
function
(
)
{
}
}
)
false
"
Return
false
before
Detached
Buffer
check
with
accessor
descriptor
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
"
6
"
{
configurable
:
false
enumerable
:
true
writable
:
true
}
)
true
"
Return
true
before
Detached
Buffer
check
when
desc
value
is
not
present
"
)
;
assert
.
throws
(
Test262Error
function
(
)
{
Reflect
.
defineProperty
(
sample
"
7
"
{
value
:
obj
}
)
;
}
"
Return
Abrupt
before
Detached
Buffer
check
from
ToNumber
(
desc
.
value
)
"
)
;
}
)
;
reportCompare
(
0
0
)
;
