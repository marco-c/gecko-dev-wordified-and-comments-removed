var
handler
=
{
has
:
function
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
var
proxy
=
new
Proxy
(
TypedArray
.
prototype
handler
)
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
sample
=
new
TA
(
1
)
;
Object
.
setPrototypeOf
(
sample
proxy
)
;
assert
.
sameValue
(
Reflect
.
has
(
sample
0
)
true
"
OrdinaryHasProperty
does
not
affect
numericIndex
properties
[
0
]
"
)
;
assert
.
sameValue
(
Reflect
.
has
(
sample
1
)
false
"
OrdinaryHasProperty
does
not
affect
numericIndex
properties
[
1
]
"
)
;
assert
.
throws
(
Test262Error
function
(
)
{
Reflect
.
has
(
sample
"
foo
"
)
;
}
"
Return
abrupt
from
parent
'
s
[
[
HasProperty
]
]
'
foo
'
"
)
;
Object
.
defineProperty
(
sample
"
foo
"
{
value
:
42
}
)
;
assert
.
sameValue
(
Reflect
.
has
(
sample
"
foo
"
)
true
"
trap
is
not
triggered
if
[
[
GetOwnProperty
]
]
returns
a
defined
value
"
)
;
}
)
;
reportCompare
(
0
0
)
;
