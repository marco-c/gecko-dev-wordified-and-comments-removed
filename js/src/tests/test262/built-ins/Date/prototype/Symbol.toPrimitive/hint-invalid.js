var
d
=
new
Date
(
)
;
assert
.
sameValue
(
typeof
d
[
Symbol
.
toPrimitive
]
'
function
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
undefined
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
null
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
'
'
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
'
String
'
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
'
defaultnumber
'
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
new
String
(
'
number
'
)
)
;
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
[
Symbol
.
toPrimitive
]
(
{
toString
:
function
(
)
{
'
number
'
;
}
}
)
;
}
)
;
reportCompare
(
0
0
)
;
