var
regexp
=
/
.
/
g
;
var
str
=
'
abc
'
;
var
iter
=
regexp
[
Symbol
.
matchAll
]
(
str
)
;
var
callArgs
callCount
;
function
callNextWithExecReturnValue
(
returnValue
)
{
callArgs
=
undefined
;
callCount
=
0
;
RegExp
.
prototype
.
exec
=
function
(
)
{
callArgs
=
arguments
;
callCount
+
+
;
return
returnValue
;
}
return
iter
.
next
(
)
;
}
var
firstExecReturnValue
=
[
'
ab
'
]
;
var
result
=
callNextWithExecReturnValue
(
firstExecReturnValue
)
;
assert
.
sameValue
(
result
.
value
firstExecReturnValue
)
;
assert
(
!
result
.
done
)
;
assert
.
sameValue
(
callArgs
.
length
1
)
;
assert
.
sameValue
(
callArgs
[
0
]
str
)
;
assert
.
sameValue
(
callCount
1
)
;
result
=
callNextWithExecReturnValue
(
null
)
;
assert
.
sameValue
(
result
.
value
undefined
)
;
assert
(
result
.
done
)
;
assert
.
sameValue
(
callArgs
.
length
1
)
;
assert
.
sameValue
(
callArgs
[
0
]
str
)
;
assert
.
sameValue
(
callCount
1
)
;
reportCompare
(
0
0
)
;
