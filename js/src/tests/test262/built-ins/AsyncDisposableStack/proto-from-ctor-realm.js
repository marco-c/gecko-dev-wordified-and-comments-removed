var
other
=
262
.
createRealm
(
)
.
global
;
var
newTarget
=
new
other
.
Function
(
)
;
var
stack
;
newTarget
.
prototype
=
undefined
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
undefined
'
)
;
newTarget
.
prototype
=
null
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
null
'
)
;
newTarget
.
prototype
=
true
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
a
Boolean
'
)
;
newTarget
.
prototype
=
'
'
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
a
String
'
)
;
newTarget
.
prototype
=
Symbol
(
)
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
a
Symbol
'
)
;
newTarget
.
prototype
=
1
;
stack
=
Reflect
.
construct
(
AsyncDisposableStack
[
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
stack
)
other
.
AsyncDisposableStack
.
prototype
'
newTarget
.
prototype
is
a
Number
'
)
;
reportCompare
(
0
0
)
;
