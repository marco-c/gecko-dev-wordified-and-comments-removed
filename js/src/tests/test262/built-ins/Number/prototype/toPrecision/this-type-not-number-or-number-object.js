var
toPrecision
=
Number
.
prototype
.
toPrecision
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
{
}
1
)
;
}
"
{
}
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
"
1
"
1
)
;
}
"
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
Number
1
)
;
}
"
Number
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
true
1
)
;
}
"
true
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
false
1
)
;
}
"
false
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
null
1
)
;
}
"
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
undefined
1
)
;
}
"
undefined
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
Symbol
(
"
1
"
)
1
)
;
}
"
symbol
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
toPrecision
.
call
(
[
]
1
)
;
}
"
[
]
"
)
;
reportCompare
(
0
0
)
;
