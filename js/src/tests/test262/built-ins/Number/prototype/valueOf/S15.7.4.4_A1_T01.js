assert
.
sameValue
(
Number
.
prototype
.
valueOf
(
)
0
'
Number
.
prototype
.
valueOf
(
)
must
return
0
'
)
;
assert
.
sameValue
(
(
new
Number
(
)
)
.
valueOf
(
)
0
'
(
new
Number
(
)
)
.
valueOf
(
)
must
return
0
'
)
;
assert
.
sameValue
(
(
new
Number
(
0
)
)
.
valueOf
(
)
0
'
(
new
Number
(
0
)
)
.
valueOf
(
)
must
return
0
'
)
;
assert
.
sameValue
(
(
new
Number
(
-
1
)
)
.
valueOf
(
)
-
1
'
(
new
Number
(
-
1
)
)
.
valueOf
(
)
must
return
-
1
'
)
;
assert
.
sameValue
(
(
new
Number
(
1
)
)
.
valueOf
(
)
1
'
(
new
Number
(
1
)
)
.
valueOf
(
)
must
return
1
'
)
;
assert
.
sameValue
(
new
Number
(
NaN
)
.
valueOf
(
)
NaN
'
new
Number
(
NaN
)
.
valueOf
(
)
returns
NaN
'
)
;
assert
.
sameValue
(
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
valueOf
(
)
Number
.
POSITIVE_INFINITY
'
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
valueOf
(
)
returns
Number
.
POSITIVE_INFINITY
'
)
;
assert
.
sameValue
(
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
valueOf
(
)
Number
.
NEGATIVE_INFINITY
'
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
valueOf
(
)
returns
Number
.
NEGATIVE_INFINITY
'
)
;
reportCompare
(
0
0
)
;
