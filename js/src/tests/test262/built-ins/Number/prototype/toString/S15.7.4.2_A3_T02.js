try
{
var
n
=
Number
.
prototype
.
toString
(
37
)
;
ERROR
(
'
#
1
:
Number
.
prototype
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
)
)
.
toString
(
37
)
;
ERROR
(
'
#
2
:
(
new
Number
(
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
0
)
)
.
toString
(
37
)
;
ERROR
(
'
#
3
:
(
new
Number
(
0
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
-
1
)
)
.
toString
(
37
)
;
ERROR
(
'
#
4
:
(
new
Number
(
-
1
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
1
)
)
.
toString
(
37
)
;
ERROR
(
'
#
5
:
(
new
Number
(
1
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
Number
.
NaN
)
)
.
toString
(
37
)
;
ERROR
(
'
#
6
:
(
new
Number
(
Number
.
NaN
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
toString
(
37
)
;
ERROR
(
'
#
7
:
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
try
{
var
n
=
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
toString
(
37
)
;
ERROR
(
'
#
8
:
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
toString
(
37
)
should
throw
an
Error
'
)
;
}
catch
(
e
)
{
}
reportCompare
(
0
0
)
;
