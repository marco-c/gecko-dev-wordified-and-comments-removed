assert
.
sameValue
(
Number
.
prototype
.
toString
(
20
)
"
0
"
'
Number
.
prototype
.
toString
(
20
)
must
return
"
0
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
)
)
.
toString
(
20
)
"
0
"
'
(
new
Number
(
)
)
.
toString
(
20
)
must
return
"
0
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
0
)
)
.
toString
(
20
)
"
0
"
'
(
new
Number
(
0
)
)
.
toString
(
20
)
must
return
"
0
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
-
1
)
)
.
toString
(
20
)
"
-
1
"
'
(
new
Number
(
-
1
)
)
.
toString
(
20
)
must
return
"
-
1
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
1
)
)
.
toString
(
20
)
"
1
"
'
(
new
Number
(
1
)
)
.
toString
(
20
)
must
return
"
1
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
Number
.
NaN
)
)
.
toString
(
20
)
"
NaN
"
'
(
new
Number
(
Number
.
NaN
)
)
.
toString
(
20
)
must
return
"
NaN
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
toString
(
20
)
"
Infinity
"
'
(
new
Number
(
Number
.
POSITIVE_INFINITY
)
)
.
toString
(
20
)
must
return
"
Infinity
"
'
)
;
assert
.
sameValue
(
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
toString
(
20
)
"
-
Infinity
"
'
(
new
Number
(
Number
.
NEGATIVE_INFINITY
)
)
.
toString
(
20
)
must
return
"
-
Infinity
"
'
)
;
reportCompare
(
0
0
)
;
