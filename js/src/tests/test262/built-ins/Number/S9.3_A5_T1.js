if
(
Number
(
new
Number
(
)
)
!
=
=
0
)
{
throw
new
Test262Error
(
'
#
1
:
Number
(
new
Number
(
)
)
=
=
=
0
.
Actual
:
'
+
(
Number
(
new
Number
(
)
)
)
)
;
}
if
(
Number
(
new
Number
(
0
)
)
!
=
=
0
)
{
throw
new
Test262Error
(
'
#
2
:
Number
(
new
Number
(
0
)
)
=
=
=
0
.
Actual
:
'
+
(
Number
(
new
Number
(
0
)
)
)
)
;
}
assert
.
sameValue
(
Number
(
new
Number
(
NaN
)
)
NaN
"
Number
(
new
Number
(
NaN
)
"
)
;
if
(
Number
(
new
Number
(
null
)
)
!
=
=
0
)
{
throw
new
Test262Error
(
'
#
4
.
1
:
Number
(
new
Number
(
null
)
)
=
=
=
0
.
Actual
:
'
+
(
Number
(
new
Number
(
null
)
)
)
)
;
}
else
{
if
(
1
/
Number
(
new
Number
(
null
)
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
4
.
2
:
Number
(
new
Number
(
null
)
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
}
assert
.
sameValue
(
Number
(
new
Number
(
void
0
)
)
NaN
"
Number
(
new
Number
(
void
0
)
"
)
;
if
(
Number
(
new
Number
(
true
)
)
!
=
=
1
)
{
throw
new
Test262Error
(
'
#
6
:
Number
(
new
Number
(
true
)
)
=
=
=
1
.
Actual
:
'
+
(
Number
(
new
Number
(
true
)
)
)
)
;
}
if
(
Number
(
new
Number
(
false
)
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
7
.
1
:
Number
(
new
Number
(
false
)
)
=
=
=
0
.
Actual
:
'
+
(
Number
(
new
Number
(
false
)
)
)
)
;
}
else
{
if
(
1
/
Number
(
new
Number
(
false
)
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
7
.
2
:
Number
(
new
Number
(
false
)
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
}
if
(
Number
(
new
Boolean
(
true
)
)
!
=
=
1
)
{
throw
new
Test262Error
(
'
#
8
:
Number
(
new
Boolean
(
true
)
)
=
=
=
1
.
Actual
:
'
+
(
Number
(
new
Boolean
(
true
)
)
)
)
;
}
if
(
Number
(
new
Boolean
(
false
)
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
9
.
1
:
Number
(
new
Boolean
(
false
)
)
=
=
=
0
.
Actual
:
'
+
(
Number
(
new
Boolean
(
false
)
)
)
)
;
}
else
{
if
(
1
/
Number
(
new
Boolean
(
false
)
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
9
.
2
:
Number
(
new
Boolean
(
false
)
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
}
assert
.
sameValue
(
Number
(
new
Array
(
2
4
8
16
32
)
)
NaN
"
Number
(
new
Array
(
2
4
8
16
32
)
)
"
)
;
var
myobj1
=
{
ToNumber
:
function
(
)
{
return
12345
;
}
toString
:
function
(
)
{
return
"
67890
"
;
}
valueOf
:
function
(
)
{
return
"
[
object
MyObj
]
"
;
}
}
;
assert
.
sameValue
(
Number
(
myobj1
)
NaN
"
Number
(
myobj1
)
"
)
;
var
myobj2
=
{
ToNumber
:
function
(
)
{
return
12345
;
}
toString
:
function
(
)
{
return
"
67890
"
;
}
valueOf
:
function
(
)
{
return
"
9876543210
"
;
}
}
;
if
(
Number
(
myobj2
)
!
=
=
9876543210
)
{
throw
new
Test262Error
(
"
#
12
:
Number
(
myobj2
)
calls
ToPrimitive
with
hint
Number
.
Exptected
:
9876543210
.
Actual
:
"
+
(
Number
(
myobj2
)
)
)
;
}
var
myobj3
=
{
ToNumber
:
function
(
)
{
return
12345
;
}
toString
:
function
(
)
{
return
"
[
object
MyObj
]
"
;
}
}
;
assert
.
sameValue
(
Number
(
myobj3
)
NaN
"
Number
(
myobj3
)
"
)
;
var
myobj4
=
{
ToNumber
:
function
(
)
{
return
12345
;
}
toString
:
function
(
)
{
return
"
67890
"
;
}
}
;
if
(
Number
(
myobj4
)
!
=
=
67890
)
{
throw
new
Test262Error
(
"
#
14
:
Number
(
myobj4
)
calls
ToPrimitive
with
hint
Number
.
Exptected
:
67890
.
Actual
:
"
+
(
Number
(
myobj4
)
)
)
;
}
var
myobj5
=
{
ToNumber
:
function
(
)
{
return
12345
;
}
}
;
assert
.
sameValue
(
Number
(
myobj5
)
NaN
"
Number
(
myobj5
)
"
)
;
reportCompare
(
0
0
)
;
