var
case1
=
{
get
[
Symbol
.
iterator
]
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
var
obj
=
new
AggregateError
(
case1
)
;
}
'
get
Symbol
.
iterator
'
)
;
var
case2
=
{
get
[
Symbol
.
iterator
]
(
)
{
return
{
}
;
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case2
)
;
}
'
GetMethod
(
obj
iterator
)
abrupts
from
non
callable
'
)
;
var
case3
=
{
[
Symbol
.
iterator
]
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
var
obj
=
new
AggregateError
(
case3
)
;
}
'
Abrupt
from
iterator
call
'
)
;
var
case4
=
{
[
Symbol
.
iterator
]
(
)
{
return
'
a
string
'
;
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case4
)
;
}
'
iterator
call
returns
a
string
'
)
;
var
case5
=
{
[
Symbol
.
iterator
]
(
)
{
return
undefined
;
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case5
)
;
}
'
iterator
call
returns
undefined
'
)
;
var
case6
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
get
next
(
)
{
throw
new
Test262Error
(
)
;
}
}
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
var
obj
=
new
AggregateError
(
case6
)
;
}
'
GetV
(
iterator
next
)
returns
abrupt
'
)
;
var
case7
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
get
next
(
)
{
return
{
}
;
}
}
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case7
)
;
}
'
GetV
(
iterator
next
)
returns
a
non
callable
'
)
;
var
case8
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
throw
new
Test262Error
(
)
;
}
}
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
var
obj
=
new
AggregateError
(
case8
)
;
}
'
abrupt
from
iterator
.
next
(
)
'
)
;
var
case9
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
undefined
;
}
}
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case9
)
;
}
'
iterator
.
next
(
)
returns
undefined
'
)
;
var
case10
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
'
a
string
'
;
}
}
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
var
obj
=
new
AggregateError
(
case10
)
;
}
'
iterator
.
next
(
)
returns
a
string
'
)
;
var
case11
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
{
get
done
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
}
}
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
var
obj
=
new
AggregateError
(
case11
)
;
}
'
IteratorCompete
abrupts
getting
the
done
property
'
)
;
reportCompare
(
0
0
)
;
