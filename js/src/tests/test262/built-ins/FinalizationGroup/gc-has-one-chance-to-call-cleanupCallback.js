var
cleanupCallback
=
0
;
var
called
=
0
;
function
cb
(
)
{
called
+
=
1
;
}
var
fg
=
new
FinalizationGroup
(
function
(
)
{
cleanupCallback
+
=
1
;
}
)
;
function
emptyCells
(
)
{
(
function
(
)
{
var
a
=
{
}
;
fg
.
register
(
a
'
a
'
)
;
}
)
(
)
;
262
.
gc
(
)
;
}
emptyCells
(
)
;
async
function
fn
(
)
{
await
Promise
.
resolve
(
1
)
;
fg
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
called
1
'
cleanupSome
callback
for
the
first
time
'
)
;
assert
(
cleanupCallback
>
=
0
'
cleanupCallback
might
be
0
'
)
;
assert
(
cleanupCallback
<
=
1
'
cleanupCallback
might
be
1
'
)
;
cleanupCallback
=
0
;
262
.
gc
(
)
;
await
Promise
.
resolve
(
2
)
;
fg
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
called
2
'
cleanupSome
callback
for
the
second
time
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
1
'
)
;
262
.
gc
(
)
;
await
Promise
.
resolve
(
3
)
;
fg
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
called
3
'
cleanupSome
callback
for
the
third
time
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
2
'
)
;
262
.
gc
(
)
;
}
fn
(
)
.
then
(
async
function
(
)
{
await
Promise
.
resolve
(
4
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
3
'
)
;
fg
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
called
4
'
cleanupSome
callback
for
the
fourth
time
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
4
'
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
iterator
=
>
{
var
exhausted
=
[
.
.
.
iterator
]
;
assert
.
sameValue
(
exhausted
.
length
1
)
;
assert
.
sameValue
(
exhausted
[
0
]
'
a
'
)
;
called
+
=
1
;
}
)
;
assert
.
sameValue
(
called
5
'
cleanupSome
callback
for
the
fifth
time
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
4
'
)
;
262
.
gc
(
)
;
await
Promise
.
resolve
(
5
)
;
await
await
Promise
.
resolve
(
6
)
;
await
await
await
Promise
.
resolve
(
7
)
;
fg
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
called
5
'
cleanupSome
callback
is
not
called
anymore
no
empty
cells
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
5
'
)
;
}
)
.
then
(
DONE
DONE
)
;
