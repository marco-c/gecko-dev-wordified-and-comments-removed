assert
.
sameValue
(
typeof
FinalizationGroup
.
prototype
.
cleanupSome
'
function
'
)
;
var
cleanupSome
=
FinalizationGroup
.
prototype
.
cleanupSome
;
var
cb
=
function
(
)
{
}
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
{
[
'
[
[
Cells
]
]
'
]
:
{
}
}
cb
)
;
}
'
Ordinary
object
without
[
[
Cells
]
]
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
WeakRef
.
prototype
cb
)
;
}
'
WeakRef
.
prototype
does
not
have
a
[
[
Cells
]
]
internal
slot
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
WeakRef
cb
)
;
}
'
WeakRef
does
not
have
a
[
[
Cells
]
]
internal
slot
'
)
;
var
wr
=
new
WeakRef
(
{
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
wr
cb
)
;
}
'
WeakRef
instance
'
)
;
var
wm
=
new
WeakMap
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
wm
cb
)
;
}
'
WeakMap
instance
'
)
;
var
ws
=
new
WeakSet
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
cleanupSome
.
call
(
ws
cb
)
;
}
'
WeakSet
instance
'
)
;
reportCompare
(
0
0
)
;
