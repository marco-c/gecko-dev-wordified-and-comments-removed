function
check
(
value
expectedName
)
{
var
holdings
;
var
called
=
0
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
holdings
=
[
.
.
.
iterator
]
;
}
function
emptyCells
(
value
)
{
var
target
=
{
}
;
fg
.
register
(
target
value
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
return
emptyCells
(
value
)
.
then
(
function
(
)
{
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
expectedName
)
;
assert
.
sameValue
(
holdings
.
length
1
expectedName
)
;
assert
.
sameValue
(
holdings
[
0
]
value
expectedName
)
;
}
)
;
}
Promise
.
all
(
[
check
(
undefined
'
undefined
'
)
check
(
null
'
null
'
)
check
(
'
'
'
the
empty
string
'
)
check
(
{
}
'
object
'
)
check
(
42
'
number
'
)
check
(
true
'
true
'
)
check
(
false
'
false
'
)
check
(
Symbol
(
1
)
'
symbol
'
)
]
)
.
then
(
(
)
=
>
DONE
(
)
resolveAsyncGC
)
;
