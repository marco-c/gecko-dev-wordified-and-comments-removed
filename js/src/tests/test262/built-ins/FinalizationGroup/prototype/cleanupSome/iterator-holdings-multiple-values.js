var
holdings
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
holdings
=
[
.
.
.
iterator
]
;
}
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
)
;
fg
.
register
(
o
undefined
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
undefined
undefined
]
'
undefined
'
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
null
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
null
]
'
null
'
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
'
'
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
'
'
]
'
the
empty
string
'
)
;
var
other
=
{
}
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
other
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
other
]
'
{
}
'
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
42
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
42
]
'
42
'
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
true
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
true
]
'
true
'
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
false
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
false
]
'
false
'
)
;
var
s
=
Symbol
(
)
;
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
s
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
compareArray
(
holdings
[
s
]
'
symbol
'
)
;
reportCompare
(
0
0
)
;
