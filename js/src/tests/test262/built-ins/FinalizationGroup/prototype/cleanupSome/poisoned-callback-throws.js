var
called
=
0
;
var
iterator
=
false
;
function
poisoned
(
iter
)
{
called
+
=
1
;
iterator
=
iter
;
iter
.
next
(
)
;
throw
new
Test262Error
(
)
;
}
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
emptyCells
(
)
{
var
target
=
{
}
;
fg
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
assert
.
throws
(
Test262Error
function
(
)
{
fg
.
cleanupSome
(
poisoned
)
;
}
)
;
assert
.
sameValue
(
called
1
)
;
assert
.
sameValue
(
typeof
iterator
'
object
'
)
;
assert
.
sameValue
(
typeof
iterator
.
next
'
function
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
iterator
.
next
(
)
;
}
'
iterator
.
next
throws
a
TypeError
if
IsFinalizationGroupCleanupJobActive
is
false
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
