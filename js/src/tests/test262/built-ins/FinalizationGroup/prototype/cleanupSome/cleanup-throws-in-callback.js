var
called
=
0
;
var
endOfCall
=
0
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
if
(
called
=
=
=
1
)
{
var
nestedCallbackRan
=
false
;
assert
.
throws
(
TypeError
(
)
=
>
{
fg
.
cleanupSome
(
(
)
=
>
{
nestedCallbackRan
=
true
}
)
;
}
)
;
assert
.
sameValue
(
nestedCallbackRan
false
)
;
}
endOfCall
+
=
1
;
}
function
emptyCells
(
)
{
var
o1
=
{
}
;
fg
.
register
(
o1
'
holdings
1
'
)
;
var
prom
=
asyncGC
(
o1
)
;
o1
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
'
callback
was
called
'
)
;
assert
.
sameValue
(
endOfCall
1
'
callback
finished
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
