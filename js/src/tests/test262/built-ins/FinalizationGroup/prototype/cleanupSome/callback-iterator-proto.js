var
IteratorPrototype
=
Object
.
getPrototypeOf
(
Object
.
getPrototypeOf
(
[
]
[
Symbol
.
iterator
]
(
)
)
)
;
var
FinalizationGroupCleanupIteratorPrototype
;
var
called
=
0
;
var
cleanupCallbackCalled
=
0
;
function
callback
(
iterator
)
{
called
+
=
1
;
FinalizationGroupCleanupIteratorPrototype
=
Object
.
getPrototypeOf
(
iterator
)
;
}
var
fg
=
new
FinalizationGroup
(
function
(
)
{
cleanupCallbackCalled
+
=
1
;
}
)
;
async
function
register
(
)
{
var
target
=
{
}
;
fg
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
assert
.
sameValue
(
called
0
)
;
return
prom
;
}
register
(
)
.
then
(
function
(
)
{
cleanupCallbackCalled
=
0
;
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
)
;
var
proto
=
Object
.
getPrototypeOf
(
FinalizationGroupCleanupIteratorPrototype
)
;
assert
.
sameValue
(
proto
IteratorPrototype
'
[
[
Prototype
]
]
internal
slot
whose
value
is
the
intrinsic
object
%
IteratorPrototype
%
'
)
;
assert
.
sameValue
(
cleanupCallbackCalled
0
'
if
a
callback
is
given
do
not
call
cleanupCallback
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
