var
holdingsList
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
var
unregA
=
{
}
;
var
unregB
=
{
}
;
var
unregC
=
{
}
;
var
unregDE
=
{
}
;
function
emptyCells
(
)
{
(
function
(
)
{
var
a
=
{
}
;
var
b
=
{
}
;
var
c
=
{
}
;
var
d
=
{
}
;
var
e
=
{
}
;
fg
.
register
(
a
'
a
'
unregA
)
;
fg
.
register
(
b
'
b
'
unregB
)
;
fg
.
register
(
c
'
c
'
unregC
)
;
fg
.
register
(
d
'
d
'
unregDE
)
;
fg
.
register
(
e
'
e
'
unregDE
)
;
}
)
(
)
;
var
res
=
fg
.
unregister
(
unregC
)
;
assert
.
sameValue
(
res
true
'
unregister
c
before
GC
'
)
;
262
.
gc
(
)
;
}
emptyCells
(
)
;
var
res
=
fg
.
unregister
(
unregDE
)
;
assert
.
sameValue
(
res
true
'
unregister
d
and
e
after
GC
'
)
;
fg
.
cleanupSome
(
function
cb
(
iterator
)
{
var
res
=
fb
.
unregister
(
unregA
)
;
assert
.
sameValue
(
res
true
'
unregister
a
before
the
iterator
is
consumed
.
'
)
;
holdingsList
=
[
.
.
.
iterator
]
;
}
)
;
assert
.
sameValue
(
holdingsList
[
0
]
'
b
'
)
;
assert
.
sameValue
(
holdingsList
.
length
1
)
;
res
=
fg
.
unregister
(
unregB
)
;
assert
.
sameValue
(
res
true
'
unregister
B
for
cleanup
'
)
;
holdingsList
=
undefined
;
emptyCells
(
)
;
fg
.
cleanupSome
(
function
cb
(
iterator
)
{
var
res
=
fb
.
unregister
(
unregDE
)
;
assert
.
sameValue
(
res
true
'
unregister
d
and
e
before
the
iterator
is
consumed
.
'
)
;
holdingsList
=
[
.
.
.
iterator
]
;
}
)
;
assert
(
holdingsList
.
includes
(
'
b
'
)
)
;
assert
(
holdingsList
.
includes
(
'
a
'
)
'
just
like
the
first
run
now
without
removing
a
'
)
;
assert
.
sameValue
(
holdingsList
.
length
2
)
;
reportCompare
(
0
0
)
;
