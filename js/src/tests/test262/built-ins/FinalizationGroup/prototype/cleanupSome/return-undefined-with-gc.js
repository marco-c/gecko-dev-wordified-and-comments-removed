var
called
;
var
fn
=
function
(
)
{
called
+
=
1
;
return
39
;
}
;
var
cb
=
function
(
)
{
called
+
=
1
;
return
42
;
}
;
var
fg
=
new
FinalizationGroup
(
fn
)
;
function
emptyCells
(
)
{
var
target
=
{
}
;
fg
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
var
tests
=
[
]
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
fg
.
cleanupSome
(
cb
)
undefined
'
regular
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
fg
.
cleanupSome
(
fn
)
undefined
'
regular
callback
same
FG
cleanup
function
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
fg
.
cleanupSome
(
)
undefined
'
undefined
(
implicit
)
callback
defer
to
FB
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
fg
.
cleanupSome
(
undefined
)
undefined
'
undefined
(
explicit
)
callback
defer
to
FB
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
assert
.
sameValue
(
fg
.
cleanupSome
(
(
)
=
>
1
)
undefined
'
arrow
function
'
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
assert
.
sameValue
(
fg
.
cleanupSome
(
async
function
(
)
{
}
)
undefined
'
async
function
'
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
assert
.
sameValue
(
fg
.
cleanupSome
(
function
*
(
)
{
}
)
undefined
'
generator
'
)
;
}
)
)
;
tests
.
push
(
emptyCells
(
)
.
then
(
function
(
)
{
assert
.
sameValue
(
fg
.
cleanupSome
(
async
function
*
(
)
{
}
)
undefined
'
async
generator
'
)
;
}
)
)
;
Promise
.
all
(
tests
)
.
then
(
(
)
=
>
{
DONE
(
)
;
}
resolveAsyncGC
)
;
