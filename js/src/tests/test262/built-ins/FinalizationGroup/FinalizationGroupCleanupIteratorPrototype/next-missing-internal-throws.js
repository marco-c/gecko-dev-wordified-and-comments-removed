var
FinalizationGroupCleanupIteratorPrototype
;
var
called
=
0
;
var
endOfCall
=
0
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
FinalizationGroupCleanupIteratorPrototype
=
Object
.
getPrototypeOf
(
iterator
)
;
assert
.
sameValue
(
typeof
FinalizationGroupCleanupIteratorPrototype
.
next
'
function
'
)
;
var
next
=
FinalizationGroupCleanupIteratorPrototype
.
next
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
{
}
)
;
}
'
{
}
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
FinalizationGroup
)
;
}
'
FinalizationGroup
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
FinalizationGroupCleanupIteratorPrototype
)
;
}
'
FinalizationGroupCleanupIteratorPrototype
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
fg
)
;
}
'
FinalizationGroup
instance
'
)
;
var
wr
=
new
WeakRef
(
{
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
wr
)
;
}
'
WeakRef
instance
'
)
;
endOfCall
+
=
1
;
}
function
emptyCells
(
)
{
var
target
=
{
}
;
fg
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
'
cleanup
successful
'
)
;
assert
.
sameValue
(
endOfCall
1
'
Abrupt
completions
are
not
directly
returned
.
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
