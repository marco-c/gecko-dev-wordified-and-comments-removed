var
iter
;
var
FinalizationGroupCleanupIteratorPrototype
;
var
called
=
0
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
iter
=
iterator
;
FinalizationGroupCleanupIteratorPrototype
=
Object
.
getPrototypeOf
(
iterator
)
;
}
(
function
(
)
{
var
o
=
{
}
;
fg
.
register
(
o
)
;
}
)
(
)
;
262
.
gc
(
)
;
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
'
cleanup
successful
'
)
;
assert
.
sameValue
(
typeof
iter
'
object
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
iter
)
FinalizationGroupCleanupIteratorPrototype
)
;
assert
.
throws
(
TypeError
function
(
)
{
iter
.
next
(
)
;
}
'
Iter
should
fail
if
not
called
during
the
cleanupSome
call
'
)
;
reportCompare
(
0
0
)
;
