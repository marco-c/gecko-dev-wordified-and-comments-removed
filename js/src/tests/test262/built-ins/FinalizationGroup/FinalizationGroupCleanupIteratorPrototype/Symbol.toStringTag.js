var
FinalizationGroupCleanupIteratorPrototype
;
var
called
=
0
;
var
fg
=
new
FinalizationGroup
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
FinalizationGroupCleanupIteratorPrototype
=
Object
.
getPrototypeOf
(
iterator
)
;
}
function
emptyCells
(
)
{
var
target
=
{
}
;
fg
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
fg
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
'
cleanup
successful
'
)
;
verifyProperty
(
FinalizationGroupCleanupIteratorPrototype
Symbol
.
toStringTag
{
value
:
'
FinalizationGroup
Cleanup
Iterator
'
writable
:
false
enumerable
:
false
configurable
:
true
}
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
