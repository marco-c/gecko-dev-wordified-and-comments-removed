var
sym
=
Symbol
(
)
;
var
seenDescriptors
=
{
}
;
var
proxy
=
new
Proxy
(
{
[
sym
]
:
1
get
foo
(
)
{
}
set
foo
(
_v
)
{
}
}
{
defineProperty
:
function
(
target
key
descriptor
)
{
seenDescriptors
[
key
]
=
descriptor
;
return
Reflect
.
defineProperty
(
target
key
descriptor
)
;
}
}
)
;
Object
.
seal
(
proxy
)
;
assert
.
sameValue
(
seenDescriptors
[
sym
]
.
value
undefined
"
value
"
)
;
assert
.
sameValue
(
seenDescriptors
[
sym
]
.
writable
undefined
"
writable
"
)
;
assert
.
sameValue
(
seenDescriptors
[
sym
]
.
enumerable
undefined
"
enumerable
"
)
;
assert
.
sameValue
(
seenDescriptors
[
sym
]
.
configurable
false
"
configurable
"
)
;
assert
.
sameValue
(
seenDescriptors
.
foo
.
get
undefined
"
get
"
)
;
assert
.
sameValue
(
seenDescriptors
.
foo
.
set
undefined
"
set
"
)
;
assert
.
sameValue
(
seenDescriptors
.
foo
.
enumerable
undefined
"
enumerable
"
)
;
assert
.
sameValue
(
seenDescriptors
.
foo
.
configurable
false
"
configurable
"
)
;
reportCompare
(
0
0
)
;
