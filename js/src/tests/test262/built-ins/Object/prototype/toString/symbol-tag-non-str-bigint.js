let
custom1
=
BigInt
(
0
)
;
let
custom2
=
Object
(
BigInt
(
0
)
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
undefined
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
null
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
Symbol
.
toStringTag
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
86
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
new
String
(
'
test262
'
)
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
{
}
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
Object
.
defineProperty
(
BigInt
.
prototype
Symbol
.
toStringTag
{
value
:
_
=
>
'
str
'
}
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom1
)
'
[
object
Object
]
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
custom2
)
'
[
object
Object
]
'
)
;
reportCompare
(
0
0
)
;
