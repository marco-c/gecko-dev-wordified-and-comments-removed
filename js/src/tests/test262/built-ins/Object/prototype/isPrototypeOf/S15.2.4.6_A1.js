function
USER_FACTORY
(
name
)
{
this
.
name
=
name
;
this
.
getName
=
function
(
)
{
return
name
;
}
;
}
function
FORCEDUSER_FACTORY
(
name
grade
)
{
this
.
name
=
name
;
this
.
grade
=
grade
;
this
.
getGrade
=
function
(
)
{
return
grade
;
}
;
}
var
proto
=
new
USER_FACTORY
(
"
noname
"
)
;
FORCEDUSER_FACTORY
.
prototype
=
proto
;
var
luke
=
new
FORCEDUSER_FACTORY
(
"
Luke
Skywalker
"
12
)
;
assert
.
sameValue
(
proto
.
isPrototypeOf
(
luke
)
true
'
#
1
:
native
ECMAScript
objects
have
an
internal
property
called
[
[
Prototype
]
]
.
'
)
;
assert
.
sameValue
(
USER_FACTORY
.
prototype
.
isPrototypeOf
(
luke
)
true
'
#
2
:
native
ECMAScript
objects
have
an
internal
property
called
[
[
Prototype
]
]
.
'
)
;
if
(
Number
.
isPrototypeOf
(
luke
)
)
{
ERROR
(
'
#
2
:
Native
ECMAScript
objects
have
an
internal
property
called
[
[
Prototype
]
]
.
'
)
;
}
reportCompare
(
0
0
)
;
