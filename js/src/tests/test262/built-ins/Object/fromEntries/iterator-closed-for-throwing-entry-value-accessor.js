function
DummyError
(
)
{
}
var
returned
=
false
;
var
iterable
=
{
[
Symbol
.
iterator
]
:
function
(
)
{
var
advanced
=
false
;
return
{
next
:
function
(
)
{
if
(
advanced
)
{
throw
new
Test262Error
(
'
should
only
advance
once
'
)
;
}
advanced
=
true
;
return
{
done
:
false
value
:
{
get
'
0
'
(
)
{
return
'
key
'
;
}
get
'
1
'
(
)
{
throw
new
DummyError
(
)
;
}
}
}
;
}
return
:
function
(
)
{
if
(
returned
)
{
throw
new
Test262Error
(
'
should
only
return
once
'
)
;
}
returned
=
true
;
}
}
;
}
}
;
assert
.
throws
(
DummyError
function
(
)
{
Object
.
fromEntries
(
iterable
)
;
}
)
;
assert
(
returned
'
iterator
should
be
closed
when
entry
value
property
access
throws
'
)
;
reportCompare
(
0
0
)
;
