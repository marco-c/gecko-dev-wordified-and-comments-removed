assert
.
sameValue
(
typeof
DisposableStack
.
prototype
.
defer
'
function
'
)
;
var
defer
=
DisposableStack
.
prototype
.
defer
;
assert
.
throws
(
TypeError
function
(
)
{
defer
.
call
(
{
[
'
[
[
DisposableState
]
]
'
]
:
{
}
}
)
;
}
'
Ordinary
object
without
[
[
DisposableState
]
]
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
defer
.
call
(
DisposableStack
.
prototype
)
;
}
'
DisposableStack
.
prototype
does
not
have
a
[
[
DisposableState
]
]
internal
slot
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
defer
.
call
(
DisposableStack
)
;
}
'
DisposableStack
does
not
have
a
[
[
DisposableState
]
]
internal
slot
'
)
;
var
asyncStack
=
new
AsyncDisposableStack
(
function
(
)
{
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
defer
.
call
(
asyncStack
)
;
}
'
AsyncDisposableStack
instance
'
)
;
reportCompare
(
0
0
)
;
