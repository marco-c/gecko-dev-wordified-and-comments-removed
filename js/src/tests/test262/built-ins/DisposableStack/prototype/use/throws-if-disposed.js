var
stack
=
new
DisposableStack
(
)
;
stack
.
dispose
(
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
undefined
)
;
}
'
undefined
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
null
)
;
}
'
null
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
true
)
;
}
'
true
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
false
)
;
}
'
false
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
1
)
;
}
'
number
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
'
object
'
)
;
}
'
string
'
)
;
var
s
=
Symbol
(
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
s
)
;
}
'
symbol
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
{
}
)
;
}
'
non
disposable
object
'
)
;
assert
.
throws
(
ReferenceError
function
(
)
{
stack
.
use
(
{
[
Symbol
.
dispose
]
(
)
{
}
}
)
;
}
'
disposable
object
'
)
;
reportCompare
(
0
0
)
;
