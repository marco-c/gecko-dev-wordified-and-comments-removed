if
(
parseInt
(
-
1
)
!
=
=
parseInt
(
"
-
1
"
)
)
{
ERROR
(
'
#
1
:
parseInt
(
-
1
)
=
=
=
parseInt
(
"
-
1
"
)
.
Actual
:
'
+
(
parseInt
(
-
1
)
)
)
;
}
if
(
String
(
parseInt
(
Infinity
)
)
!
=
=
"
NaN
"
)
{
ERROR
(
'
#
2
:
String
(
parseInt
(
Infinity
)
)
=
=
=
"
NaN
"
.
Actual
:
'
+
(
String
(
parseInt
(
Infinity
)
)
)
)
;
}
if
(
String
(
parseInt
(
NaN
)
)
!
=
=
"
NaN
"
)
{
ERROR
(
'
#
3
:
String
(
parseInt
(
NaN
)
)
=
=
=
"
NaN
"
.
Actual
:
'
+
(
String
(
parseInt
(
NaN
)
)
)
)
;
}
if
(
parseInt
(
-
0
)
!
=
=
0
)
{
ERROR
(
'
#
4
:
parseInt
(
-
0
)
=
=
=
0
.
Actual
:
'
+
(
parseInt
(
-
0
)
)
)
;
}
else
{
if
(
1
/
parseInt
(
-
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
ERROR
(
'
#
4
:
parseInt
(
-
0
)
=
=
=
+
0
.
Actual
:
'
+
(
parseInt
(
-
0
)
)
)
;
}
}
reportCompare
(
0
0
)
;
