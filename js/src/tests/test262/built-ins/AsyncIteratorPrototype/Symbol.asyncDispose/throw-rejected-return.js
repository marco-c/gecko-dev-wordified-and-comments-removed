async
function
*
generator
(
)
{
}
const
AsyncIteratorPrototype
=
Object
.
getPrototypeOf
(
Object
.
getPrototypeOf
(
generator
.
prototype
)
)
;
var
returnCount
=
0
;
function
CatchError
(
)
{
}
const
obj
=
{
return
(
)
{
returnCount
+
+
;
return
Promise
.
reject
(
new
CatchError
(
)
)
;
}
}
;
asyncTest
(
async
function
(
)
{
await
assert
.
throwsAsync
(
CatchError
function
(
)
{
return
AsyncIteratorPrototype
[
Symbol
.
asyncDispose
]
.
call
(
obj
)
;
}
"
Promise
should
be
rejected
"
)
;
assert
.
sameValue
(
returnCount
1
)
;
}
)
;
