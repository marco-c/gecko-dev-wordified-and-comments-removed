function
assertIsRawJSON
(
rawJSON
expectedRawJSONValue
)
{
assert
.
sameValue
(
Object
.
getPrototypeOf
(
rawJSON
)
null
"
RawJSON
object
should
have
null
prototype
"
)
;
assert
(
Object
.
hasOwn
(
rawJSON
"
rawJSON
"
)
"
RawJSON
object
should
have
rawJSON
own
property
"
)
;
assert
.
compareArray
(
Object
.
getOwnPropertyNames
(
rawJSON
)
[
"
rawJSON
"
]
"
RawJSON
object
should
have
only
rawJSON
own
property
"
)
;
assert
.
compareArray
(
Object
.
getOwnPropertySymbols
(
rawJSON
)
[
]
"
RawJSON
object
should
have
no
own
property
symbols
"
)
;
assert
.
sameValue
(
rawJSON
.
rawJSON
expectedRawJSONValue
"
rawJSON
value
"
)
;
}
assertIsRawJSON
(
JSON
.
rawJSON
(
1
)
"
1
"
)
;
assertIsRawJSON
(
JSON
.
rawJSON
(
null
)
"
null
"
)
;
assertIsRawJSON
(
JSON
.
rawJSON
(
true
)
"
true
"
)
;
assertIsRawJSON
(
JSON
.
rawJSON
(
false
)
"
false
"
)
;
assertIsRawJSON
(
JSON
.
rawJSON
(
'
"
foo
"
'
)
'
"
foo
"
'
)
;
reportCompare
(
0
0
)
;
