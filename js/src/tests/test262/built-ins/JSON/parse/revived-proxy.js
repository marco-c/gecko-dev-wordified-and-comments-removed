var
objectProxy
=
new
Proxy
(
{
length
:
0
other
:
0
}
{
}
)
;
var
arrayProxy
=
new
Proxy
(
[
]
{
}
)
;
var
arrayProxyProxy
=
new
Proxy
(
arrayProxy
{
}
)
;
var
visitedOther
injectProxy
;
arrayProxy
.
other
=
0
;
injectProxy
=
function
(
name
val
)
{
if
(
name
=
=
=
'
other
'
)
{
visitedOther
=
true
;
}
this
[
1
]
=
objectProxy
;
return
val
;
}
;
visitedOther
=
false
;
JSON
.
parse
(
'
[
null
null
]
'
injectProxy
)
;
assert
.
sameValue
(
visitedOther
true
'
proxy
for
ordinary
object
'
)
;
injectProxy
=
function
(
name
val
)
{
if
(
name
=
=
=
'
other
'
)
{
visitedOther
=
true
;
}
this
[
1
]
=
arrayProxy
;
return
val
;
}
;
visitedOther
=
false
;
JSON
.
parse
(
'
[
null
null
]
'
injectProxy
)
;
assert
.
sameValue
(
visitedOther
false
'
proxy
for
array
'
)
;
injectProxy
=
function
(
name
val
)
{
if
(
name
=
=
=
'
other
'
)
{
visitedOther
=
true
;
}
this
[
1
]
=
arrayProxyProxy
;
return
val
;
}
;
visitedOther
=
false
;
JSON
.
parse
(
'
[
null
null
]
'
injectProxy
)
;
assert
.
sameValue
(
visitedOther
false
'
proxy
for
array
proxy
'
)
;
reportCompare
(
0
0
)
;
