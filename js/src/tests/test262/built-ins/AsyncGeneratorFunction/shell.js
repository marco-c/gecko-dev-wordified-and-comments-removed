var
AsyncFunction
;
var
AsyncGeneratorFunction
;
var
GeneratorFunction
;
try
{
AsyncFunction
=
Object
.
getPrototypeOf
(
new
Function
(
'
return
async
function
dummy
(
)
{
}
'
)
(
)
)
.
constructor
;
}
catch
(
e
)
{
}
try
{
AsyncGeneratorFunction
=
Object
.
getPrototypeOf
(
new
Function
(
'
return
async
function
*
dummy
(
)
{
}
'
)
(
)
)
.
constructor
;
}
catch
(
e
)
{
}
try
{
GeneratorFunction
=
Object
.
getPrototypeOf
(
new
Function
(
'
return
function
*
dummy
(
)
{
}
'
)
(
)
)
.
constructor
;
}
catch
(
e
)
{
}
function
isConstructor
(
f
)
{
if
(
typeof
f
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
isConstructor
invoked
with
a
non
-
function
value
"
)
;
}
try
{
Reflect
.
construct
(
function
(
)
{
}
[
]
f
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
