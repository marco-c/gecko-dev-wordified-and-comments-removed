var
plainObject
=
{
get
foo
(
)
{
}
}
;
Object
.
defineProperty
(
plainObject
"
bar
"
{
configurable
:
false
}
)
;
var
plainObjectTarget
=
new
Proxy
(
plainObject
{
}
)
;
var
plainObjectProxy
=
new
Proxy
(
plainObjectTarget
{
}
)
;
assert
(
delete
plainObjectProxy
.
foo
)
;
assert
(
!
plainObject
.
hasOwnProperty
(
"
foo
"
)
)
;
assert
(
!
Reflect
.
deleteProperty
(
plainObjectProxy
"
bar
"
)
)
;
assert
(
plainObject
.
hasOwnProperty
(
"
bar
"
)
)
;
var
func
=
function
(
)
{
}
;
var
funcTarget
=
new
Proxy
(
func
{
}
)
;
var
funcProxy
=
new
Proxy
(
funcTarget
{
}
)
;
assert
(
delete
funcProxy
.
length
)
;
assert
(
!
func
.
hasOwnProperty
(
"
length
"
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
"
use
strict
"
;
delete
funcProxy
.
prototype
;
}
)
;
reportCompare
(
0
0
)
;
