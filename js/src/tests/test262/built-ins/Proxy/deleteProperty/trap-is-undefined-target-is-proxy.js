var
array
=
[
1
]
;
var
arrayTarget
=
new
Proxy
(
array
{
}
)
;
var
arrayProxy
=
new
Proxy
(
arrayTarget
{
deleteProperty
:
undefined
}
)
;
assert
(
delete
arrayProxy
[
0
]
)
;
assert
(
!
array
.
hasOwnProperty
(
"
0
"
)
)
;
assert
(
!
Reflect
.
deleteProperty
(
arrayProxy
"
length
"
)
)
;
assert
.
sameValue
(
array
.
length
1
)
;
var
trapCalls
=
0
;
var
target
=
new
Proxy
(
{
}
{
deleteProperty
:
function
(
_target
key
)
{
trapCalls
+
+
;
return
key
=
=
=
"
foo
"
;
}
}
)
;
var
proxy
=
new
Proxy
(
target
{
deleteProperty
:
undefined
}
)
;
assert
(
delete
proxy
.
foo
)
;
assert
.
sameValue
(
trapCalls
1
)
;
assert
.
throws
(
TypeError
function
(
)
{
"
use
strict
"
;
delete
proxy
.
bar
;
}
)
;
assert
.
sameValue
(
trapCalls
2
)
;
reportCompare
(
0
0
)
;
