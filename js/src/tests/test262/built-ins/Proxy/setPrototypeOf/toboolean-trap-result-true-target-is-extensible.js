var
called
;
var
target
=
new
Proxy
(
{
}
{
isExtensible
:
function
(
)
{
called
+
=
1
;
return
true
;
}
getPrototypeOf
:
function
(
)
{
throw
new
Test262Error
(
"
target
.
[
[
GetPrototypeOf
]
]
is
not
called
"
)
;
}
}
)
;
var
p
=
new
Proxy
(
target
{
setPrototypeOf
:
function
(
t
v
)
{
return
v
.
attr
;
}
}
)
;
var
result
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
true
}
)
;
assert
.
sameValue
(
result
true
"
true
"
)
;
assert
.
sameValue
(
called
1
"
true
-
isExtensible
is
called
"
)
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
"
false
"
}
)
;
assert
.
sameValue
(
result
true
"
string
"
)
;
assert
.
sameValue
(
called
1
"
string
-
isExtensible
is
called
"
)
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
42
}
)
;
assert
.
sameValue
(
result
true
"
42
"
)
;
assert
.
sameValue
(
called
1
"
number
-
isExtensible
is
called
"
)
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
p
}
)
;
assert
.
sameValue
(
result
true
"
p
"
)
;
assert
.
sameValue
(
called
1
"
object
-
isExtensible
is
called
"
)
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
[
]
}
)
;
assert
.
sameValue
(
result
true
"
[
]
"
)
;
assert
.
sameValue
(
called
1
"
[
]
-
isExtensible
is
called
"
)
;
called
=
0
;
result
=
Reflect
.
setPrototypeOf
(
p
{
attr
:
Symbol
(
1
)
}
)
;
assert
.
sameValue
(
result
true
"
symbol
"
)
;
assert
.
sameValue
(
called
1
"
symbol
-
isExtensible
is
called
"
)
;
reportCompare
(
0
0
)
;
