var
stringTarget
=
new
Proxy
(
new
String
(
"
str
"
)
{
}
)
;
var
stringProxy
=
new
Proxy
(
stringTarget
{
get
:
null
}
)
;
assert
.
sameValue
(
stringProxy
.
length
3
)
;
assert
.
sameValue
(
stringProxy
[
0
]
"
s
"
)
;
assert
.
sameValue
(
stringProxy
[
4
]
undefined
)
;
var
sym
=
Symbol
(
)
;
var
target
=
new
Proxy
(
{
}
{
get
:
function
(
_target
key
)
{
switch
(
key
)
{
case
sym
:
return
1
;
case
"
10
"
:
return
2
;
case
"
foo
"
:
return
3
;
}
}
}
)
;
var
proxy
=
new
Proxy
(
target
{
get
:
null
}
)
;
assert
.
sameValue
(
proxy
[
sym
]
1
)
;
assert
.
sameValue
(
proxy
[
10
]
2
)
;
assert
.
sameValue
(
Object
.
create
(
proxy
)
.
foo
3
)
;
assert
.
sameValue
(
proxy
.
bar
undefined
)
;
reportCompare
(
0
0
)
;
