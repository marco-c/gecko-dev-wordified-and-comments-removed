var
func
=
function
(
)
{
}
;
var
funcTarget
=
new
Proxy
(
func
{
}
)
;
var
funcProxy
=
new
Proxy
(
funcTarget
{
set
:
undefined
}
)
;
assert
(
Reflect
.
set
(
funcProxy
"
prototype
"
null
)
)
;
assert
.
sameValue
(
func
.
prototype
null
)
;
assert
(
!
Reflect
.
set
(
funcProxy
"
length
"
2
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
"
use
strict
"
;
funcProxy
.
name
=
"
foo
"
;
}
)
;
var
trapCalls
=
0
;
var
target
=
new
Proxy
(
{
}
{
set
:
function
(
_target
key
)
{
trapCalls
+
+
;
return
key
=
=
=
"
foo
"
;
}
}
)
;
var
proxy
=
new
Proxy
(
target
{
set
:
undefined
}
)
;
assert
(
Reflect
.
set
(
Object
.
create
(
proxy
)
"
foo
"
1
)
)
;
assert
.
sameValue
(
trapCalls
1
)
;
assert
(
!
Reflect
.
set
(
proxy
"
bar
"
2
)
)
;
assert
.
sameValue
(
trapCalls
2
)
;
reportCompare
(
0
0
)
;
