var
calls
=
0
;
var
_NewTarget
;
var
Target
=
new
Proxy
(
function
(
)
{
throw
new
Test262Error
(
'
target
should
not
be
called
'
)
;
}
{
construct
:
function
(
_Target
args
NewTarget
)
{
calls
+
=
1
;
_NewTarget
=
NewTarget
;
return
{
sum
:
args
[
0
]
+
args
[
1
]
}
;
}
}
)
;
var
P
=
new
Proxy
(
Target
{
construct
:
undefined
}
)
;
var
NewTarget
=
function
(
)
{
}
;
var
obj
=
Reflect
.
construct
(
P
[
3
4
]
NewTarget
)
;
assert
.
sameValue
(
calls
1
"
construct
is
undefined
:
[
[
Construct
]
]
is
invoked
once
"
)
;
assert
.
sameValue
(
_NewTarget
NewTarget
"
construct
is
undefined
:
NewTarget
is
passed
to
[
[
Construct
]
]
"
)
;
assert
.
sameValue
(
obj
.
sum
7
"
construct
is
undefined
:
result
of
[
[
Construct
]
]
is
returned
"
)
;
reportCompare
(
0
0
)
;
