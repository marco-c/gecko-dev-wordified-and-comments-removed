assert
.
sameValue
(
typeof
Atomics
.
waitAsync
'
function
'
'
The
value
of
typeof
Atomics
.
waitAsync
is
"
function
"
'
)
;
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
const
valueOf
=
{
valueOf
(
)
{
return
true
;
}
}
;
const
toPrimitive
=
{
[
Symbol
.
toPrimitive
]
(
)
{
return
true
;
}
}
;
let
outcomes
=
[
]
;
let
lifespan
=
1000
;
let
start
=
262
.
agent
.
monotonicNow
(
)
;
(
function
wait
(
)
{
let
elapsed
=
262
.
agent
.
monotonicNow
(
)
-
start
;
if
(
elapsed
>
lifespan
)
{
DONE
(
"
Test
timed
out
"
)
;
return
;
}
if
(
outcomes
.
length
)
{
assert
.
sameValue
(
outcomes
[
0
]
'
timed
-
out
'
'
The
value
of
outcomes
[
0
]
is
"
timed
-
out
"
'
)
;
assert
.
sameValue
(
outcomes
[
1
]
'
timed
-
out
'
'
The
value
of
outcomes
[
1
]
is
"
timed
-
out
"
'
)
;
assert
.
sameValue
(
outcomes
[
2
]
'
timed
-
out
'
'
The
value
of
outcomes
[
2
]
is
"
timed
-
out
"
'
)
;
DONE
(
)
;
return
;
}
262
.
agent
.
setTimeout
(
wait
0
)
;
}
)
(
)
;
Promise
.
all
(
[
Atomics
.
waitAsync
(
i32a
0
0
true
)
.
value
Atomics
.
waitAsync
(
i32a
0
0
valueOf
)
.
value
Atomics
.
waitAsync
(
i32a
0
0
toPrimitive
)
.
value
]
)
.
then
(
results
=
>
(
outcomes
=
results
)
DONE
)
;
