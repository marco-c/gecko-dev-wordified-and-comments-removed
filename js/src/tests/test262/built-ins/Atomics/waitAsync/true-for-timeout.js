assert
.
sameValue
(
typeof
Atomics
.
waitAsync
'
function
'
)
;
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
const
valueOf
=
{
valueOf
(
)
{
return
true
;
}
}
;
const
toPrimitive
=
{
[
Symbol
.
toPrimitive
]
(
)
{
return
true
;
}
}
;
Promise
.
all
(
[
Atomics
.
waitAsync
(
i32a
0
0
true
)
.
value
Atomics
.
waitAsync
(
i32a
0
0
valueOf
)
.
value
Atomics
.
waitAsync
(
i32a
0
0
toPrimitive
)
.
value
]
)
.
then
(
outcomes
=
>
{
assert
.
sameValue
(
outcomes
[
0
]
'
timed
-
out
'
)
;
assert
.
sameValue
(
outcomes
[
1
]
'
timed
-
out
'
)
;
assert
.
sameValue
(
outcomes
[
2
]
'
timed
-
out
'
)
;
}
)
.
then
(
DONE
DONE
)
;
