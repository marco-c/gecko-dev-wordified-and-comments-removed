assert
.
sameValue
(
typeof
Atomics
.
waitAsync
'
function
'
)
;
const
i64a
=
new
BigInt64Array
(
new
SharedArrayBuffer
(
BigInt64Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
async
(
sab
)
=
>
{
var
i64a
=
new
BigInt64Array
(
sab
)
;
262
.
agent
.
sleep
(
1000
)
;
Atomics
.
notify
(
i64a
0
4
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
262
.
agent
.
safeBroadcast
(
i64a
)
;
const
valueOf
=
{
valueOf
(
)
{
return
undefined
;
}
}
;
const
toPrimitive
=
{
[
Symbol
.
toPrimitive
]
(
)
{
return
undefined
;
}
}
;
Promise
.
all
(
[
Atomics
.
waitAsync
(
i64a
0
0n
)
.
value
Atomics
.
waitAsync
(
i64a
0
0n
undefined
)
.
value
Atomics
.
waitAsync
(
i64a
0
0n
valueOf
)
.
value
Atomics
.
waitAsync
(
i64a
0
0n
toPrimitive
)
.
value
]
)
.
then
(
outcomes
=
>
{
assert
.
sameValue
(
outcomes
[
0
]
'
ok
'
)
;
assert
.
sameValue
(
outcomes
[
1
]
'
ok
'
)
;
assert
.
sameValue
(
outcomes
[
2
]
'
ok
'
)
;
assert
.
sameValue
(
outcomes
[
3
]
'
ok
'
)
;
}
)
.
then
(
DONE
DONE
)
;
