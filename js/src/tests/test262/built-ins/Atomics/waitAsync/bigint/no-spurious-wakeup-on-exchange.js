assert
.
sameValue
(
typeof
Atomics
.
waitAsync
'
function
'
'
The
value
of
typeof
Atomics
.
waitAsync
is
"
function
"
'
)
;
const
RUNNING
=
1
;
const
TIMEOUT
=
262
.
agent
.
timeouts
.
small
;
const
i64a
=
new
BigInt64Array
(
new
SharedArrayBuffer
(
BigInt64Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
async
(
sab
)
=
>
{
const
i64a
=
new
BigInt64Array
(
sab
)
;
Atomics
.
add
(
i64a
{
RUNNING
}
1n
)
;
const
before
=
262
.
agent
.
monotonicNow
(
)
;
const
unpark
=
await
Atomics
.
waitAsync
(
i64a
0
0n
{
TIMEOUT
}
)
.
value
;
const
duration
=
262
.
agent
.
monotonicNow
(
)
-
before
;
262
.
agent
.
report
(
duration
)
;
262
.
agent
.
report
(
unpark
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
262
.
agent
.
safeBroadcastAsync
(
i64a
RUNNING
1n
)
.
then
(
async
agentCount
=
>
{
assert
.
sameValue
(
agentCount
1n
'
The
value
of
agentCount
is
1n
'
)
;
Atomics
.
exchange
(
i64a
0
1n
)
;
const
lapse
=
await
262
.
agent
.
getReportAsync
(
)
;
assert
(
lapse
>
=
TIMEOUT
'
The
result
of
evaluating
(
lapse
>
=
TIMEOUT
)
is
true
'
)
;
const
result
=
await
262
.
agent
.
getReportAsync
(
)
;
assert
.
sameValue
(
result
'
timed
-
out
'
'
The
value
of
result
is
"
timed
-
out
"
'
)
;
assert
.
sameValue
(
Atomics
.
notify
(
i64a
0
)
0
'
Atomics
.
notify
(
new
BigInt64Array
(
new
SharedArrayBuffer
(
BigInt64Array
.
BYTES_PER_ELEMENT
*
4
)
)
0
)
must
return
0
'
)
;
}
)
.
then
(
DONE
DONE
)
;
