assert
.
sameValue
(
typeof
Atomics
.
waitAsync
'
function
'
)
;
const
WAIT_INDEX
=
0
;
const
RUNNING
=
1
;
const
NUMAGENT
=
2
;
const
NOTIFYCOUNT
=
2
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
async
(
sab
)
=
>
{
var
i64a
=
new
BigInt64Array
(
sab
)
;
Atomics
.
add
(
i64a
{
RUNNING
}
1n
)
;
/
/
undefined
=
>
NaN
=
>
+
Infinity
262
.
agent
.
report
(
"
A
"
+
(
await
Atomics
.
waitAsync
(
i64a
0
0n
undefined
)
.
value
)
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
async
(
sab
)
=
>
{
var
i64a
=
new
BigInt64Array
(
sab
)
;
Atomics
.
add
(
i64a
{
RUNNING
}
1n
)
;
/
/
undefined
timeout
arg
=
>
NaN
=
>
+
Infinity
262
.
agent
.
report
(
"
B
"
+
(
await
Atomics
.
waitAsync
(
i64a
0
0n
)
.
value
)
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
const
i64a
=
new
BigInt64Array
(
new
SharedArrayBuffer
(
BigInt64Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
safeBroadcastAsync
(
i64a
RUNNING
BigInt
(
NUMAGENT
)
)
.
then
(
async
(
agentCount
)
=
>
{
assert
.
sameValue
(
agentCount
BigInt
(
NUMAGENT
)
)
;
assert
.
sameValue
(
Atomics
.
notify
(
i64a
WAIT_INDEX
NOTIFYCOUNT
)
NOTIFYCOUNT
'
Atomics
.
notify
(
i64a
WAIT_INDEX
NOTIFYCOUNT
)
returns
the
value
of
NOTIFYCOUNT
(
2
)
'
)
;
const
reports
=
[
await
262
.
agent
.
getReportAsync
(
)
await
262
.
agent
.
getReportAsync
(
)
]
;
reports
.
sort
(
)
;
assert
.
sameValue
(
reports
[
0
]
'
A
ok
'
'
The
value
of
reports
[
0
]
is
"
A
ok
"
'
)
;
assert
.
sameValue
(
reports
[
1
]
'
B
ok
'
'
The
value
of
reports
[
1
]
is
"
B
ok
"
'
)
;
}
)
.
then
(
DONE
DONE
)
;
