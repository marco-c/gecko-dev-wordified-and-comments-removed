const
RUNNING
=
1
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i64a
=
new
BigInt64Array
(
sab
)
;
Atomics
.
add
(
i64a
{
RUNNING
}
1n
)
;
262
.
agent
.
report
(
Atomics
.
wait
(
i64a
0
0n
NaN
)
)
;
/
/
NaN
=
>
+
Infinity
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
const
i64a
=
new
BigInt64Array
(
new
SharedArrayBuffer
(
BigInt64Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
broadcast
(
i64a
.
buffer
)
;
262
.
agent
.
waitUntil
(
i64a
RUNNING
1n
)
;
262
.
agent
.
tryYield
(
)
;
assert
.
sameValue
(
Atomics
.
notify
(
i64a
0
)
1
'
Atomics
.
notify
(
i64a
0
)
returns
1
'
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
ok
'
'
262
.
agent
.
getReport
(
)
returns
"
ok
"
'
)
;
reportCompare
(
0
0
)
;
