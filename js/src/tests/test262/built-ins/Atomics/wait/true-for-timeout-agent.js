const
RUNNING
=
1
;
262
.
agent
.
start
(
const
valueOf
=
{
valueOf
:
function
(
)
{
return
true
;
}
}
;
const
toPrimitive
=
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
return
true
;
}
}
;
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i32a
=
new
Int32Array
(
sab
)
;
Atomics
.
add
(
i32a
{
RUNNING
}
1
)
;
const
start
=
262
.
agent
.
monotonicNow
(
)
;
const
status1
=
Atomics
.
wait
(
i32a
0
0
true
)
;
const
status2
=
Atomics
.
wait
(
i32a
0
0
valueOf
)
;
const
status3
=
Atomics
.
wait
(
i32a
0
0
toPrimitive
)
;
const
duration
=
262
.
agent
.
monotonicNow
(
)
-
start
;
262
.
agent
.
report
(
status1
)
;
262
.
agent
.
report
(
status2
)
;
262
.
agent
.
report
(
status3
)
;
262
.
agent
.
report
(
duration
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
broadcast
(
i32a
.
buffer
)
;
262
.
agent
.
waitUntil
(
i32a
RUNNING
1
)
;
262
.
agent
.
tryYield
(
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
timed
-
out
'
'
262
.
agent
.
getReport
(
)
returns
"
timed
-
out
"
'
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
timed
-
out
'
'
262
.
agent
.
getReport
(
)
returns
"
timed
-
out
"
'
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
timed
-
out
'
'
262
.
agent
.
getReport
(
)
returns
"
timed
-
out
"
'
)
;
const
lapse
=
262
.
agent
.
getReport
(
)
;
assert
(
lapse
>
=
0
'
The
result
of
(
lapse
>
=
0
)
is
true
(
timeout
should
be
a
min
of
0ms
)
'
)
;
assert
(
lapse
<
=
262
.
agent
.
MAX_TIME_EPSILON
'
The
result
of
(
lapse
<
=
262
.
agent
.
MAX_TIME_EPSILON
)
is
true
(
timeout
should
be
a
max
of
262
.
agent
.
MAX_TIME_EPSILON
)
'
)
;
assert
.
sameValue
(
Atomics
.
notify
(
i32a
0
)
0
'
Atomics
.
notify
(
i32a
0
)
returns
0
'
)
;
reportCompare
(
0
0
)
;
