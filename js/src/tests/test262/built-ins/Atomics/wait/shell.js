262
.
agent
.
MAX_TIME_EPSILON
=
100
;
{
let
getReport
=
262
.
agent
.
getReport
.
bind
(
262
.
agent
)
;
262
.
agent
.
getReport
=
function
(
)
{
var
r
;
while
(
(
r
=
getReport
(
)
)
=
=
null
)
{
262
.
agent
.
sleep
(
1
)
;
}
return
r
;
}
;
}
262
.
agent
.
waitUntil
=
function
(
typedArray
index
expected
)
{
var
agents
=
0
;
while
(
(
agents
=
Atomics
.
load
(
typedArray
index
)
)
!
=
=
expected
)
{
}
assert
.
sameValue
(
agents
expected
"
Reporting
number
of
'
agents
'
equals
the
value
of
'
expected
'
"
)
;
}
;
262
.
agent
.
timeouts
=
{
yield
:
100
small
:
200
long
:
1000
huge
:
10000
}
;
262
.
agent
.
tryYield
=
function
(
)
{
262
.
agent
.
sleep
(
262
.
agent
.
timeouts
.
yield
)
;
}
;
262
.
agent
.
trySleep
=
function
(
ms
)
{
262
.
agent
.
sleep
(
ms
)
;
}
;
function
DETACHBUFFER
(
buffer
)
{
if
(
!
262
|
|
typeof
262
.
detachArrayBuffer
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
No
method
available
to
detach
an
ArrayBuffer
"
)
;
}
262
.
detachArrayBuffer
(
buffer
)
;
}
