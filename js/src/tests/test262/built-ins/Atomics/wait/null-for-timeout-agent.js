function
getReport
(
)
{
var
r
;
while
(
(
r
=
262
.
agent
.
getReport
(
)
)
=
=
null
)
{
262
.
agent
.
sleep
(
100
)
;
}
return
r
;
}
262
.
agent
.
start
(
var
valueOf
=
{
valueOf
:
function
(
)
{
return
null
;
}
}
;
var
toPrimitive
=
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
return
null
;
}
}
;
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
var
int32Array
=
new
Int32Array
(
sab
)
;
var
start
=
Date
.
now
(
)
;
262
.
agent
.
report
(
Atomics
.
wait
(
int32Array
0
0
null
)
)
;
262
.
agent
.
report
(
Atomics
.
wait
(
int32Array
0
0
valueOf
)
)
;
262
.
agent
.
report
(
Atomics
.
wait
(
int32Array
0
0
toPrimitive
)
)
;
262
.
agent
.
report
(
Date
.
now
(
)
-
start
)
;
262
.
agent
.
leaving
(
)
;
}
)
)
;
var
int32Array
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
)
)
;
262
.
agent
.
broadcast
(
int32Array
.
buffer
)
;
262
.
agent
.
sleep
(
150
)
;
assert
.
sameValue
(
getReport
(
)
'
timed
-
out
'
)
;
assert
.
sameValue
(
getReport
(
)
'
timed
-
out
'
)
;
assert
.
sameValue
(
getReport
(
)
'
timed
-
out
'
)
;
var
timeDiffReport
=
getReport
(
)
;
assert
(
timeDiffReport
>
=
0
'
timeout
should
be
a
min
of
0ms
'
)
;
assert
(
timeDiffReport
<
=
ATOMICS_MAX_TIME_EPSILON
'
timeout
should
be
a
max
of
ATOMICS_MAX_TIME_EPSILON
'
)
;
assert
.
sameValue
(
Atomics
.
wake
(
int32Array
0
)
0
)
;
reportCompare
(
0
0
)
;
