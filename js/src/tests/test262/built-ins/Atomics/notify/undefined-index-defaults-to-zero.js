var
WAIT_INDEX
=
0
;
var
RUNNING
=
1
;
var
NUMAGENT
=
2
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i32a
=
new
Int32Array
(
sab
)
;
/
/
Notify
main
thread
that
the
agent
was
started
.
Atomics
.
add
(
i32a
{
RUNNING
}
1
)
;
/
/
Wait
until
restarted
by
main
thread
.
var
status
=
Atomics
.
wait
(
i32a
{
WAIT_INDEX
}
0
)
;
/
/
Report
wait
status
.
262
.
agent
.
report
(
status
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
}
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
broadcast
(
i32a
.
buffer
)
;
262
.
agent
.
waitUntil
(
i32a
RUNNING
NUMAGENT
)
;
262
.
agent
.
tryYield
(
)
;
var
woken
=
0
;
while
(
(
woken
=
Atomics
.
notify
(
i32a
undefined
1
)
)
=
=
=
0
)
;
assert
.
sameValue
(
woken
1
'
Atomics
.
notify
(
i32a
undefined
1
)
returns
1
'
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
ok
'
'
262
.
agent
.
getReport
(
)
returns
"
ok
"
'
)
;
var
woken
=
0
;
while
(
(
woken
=
Atomics
.
notify
(
i32a
)
)
=
=
=
0
)
;
assert
.
sameValue
(
woken
1
'
Atomics
.
notify
(
i32a
/
*
default
values
used
*
/
)
returns
1
'
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
ok
'
'
262
.
agent
.
getReport
(
)
returns
"
ok
"
'
)
;
reportCompare
(
0
0
)
;
