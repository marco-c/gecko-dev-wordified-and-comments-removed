const
WAIT_INDEX
=
0
;
const
RUNNING
=
1
;
const
NUMAGENT
=
3
;
const
BUFFER_SIZE
=
4
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i32a
=
new
Int32Array
(
sab
)
;
Atomics
.
add
(
i32a
{
RUNNING
}
1
)
;
262
.
agent
.
report
(
"
A
"
+
Atomics
.
wait
(
i32a
{
WAIT_INDEX
}
0
)
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
}
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
BUFFER_SIZE
)
)
;
262
.
agent
.
safeBroadcast
(
i32a
)
;
262
.
agent
.
waitUntil
(
i32a
RUNNING
NUMAGENT
)
;
262
.
agent
.
tryYield
(
)
;
assert
.
sameValue
(
Atomics
.
notify
(
i32a
WAIT_INDEX
)
NUMAGENT
'
Atomics
.
notify
(
i32a
WAIT_INDEX
)
returns
the
value
of
NUMAGENT
'
)
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
A
ok
'
'
The
value
of
reports
[
i
]
is
"
A
ok
"
'
)
;
}
reportCompare
(
0
0
)
;
