const
WAIT_INDEX
=
0
;
const
RUNNING
=
1
;
const
WAKECOUNT
=
1
;
const
NUMAGENT
=
3
;
const
BUFFER_SIZE
=
4
;
const
TIMEOUT
=
262
.
agent
.
timeouts
.
long
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i32a
=
new
Int32Array
(
sab
)
;
Atomics
.
add
(
i32a
{
RUNNING
}
1
)
;
/
/
Waiters
that
are
not
woken
will
time
out
eventually
.
262
.
agent
.
report
(
Atomics
.
wait
(
i32a
{
WAIT_INDEX
}
0
{
TIMEOUT
}
)
)
;
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
}
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
BUFFER_SIZE
)
)
;
262
.
agent
.
broadcast
(
i32a
.
buffer
)
;
262
.
agent
.
waitUntil
(
i32a
RUNNING
NUMAGENT
)
;
262
.
agent
.
tryYield
(
)
;
assert
.
sameValue
(
Atomics
.
wake
(
i32a
0
WAKECOUNT
)
WAKECOUNT
'
Atomics
.
wake
(
i32a
0
WAKECOUNT
)
returns
the
value
of
WAKECOUNT
'
)
;
262
.
agent
.
trySleep
(
TIMEOUT
)
;
const
reports
=
[
]
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
reports
.
push
(
262
.
agent
.
getReport
(
)
)
;
}
reports
.
sort
(
)
;
for
(
var
i
=
0
;
i
<
WAKECOUNT
;
i
+
+
)
{
assert
.
sameValue
(
reports
[
i
]
'
ok
'
'
The
value
of
reports
[
i
]
is
"
ok
"
'
)
;
}
for
(
var
i
=
WAKECOUNT
;
i
<
NUMAGENT
;
i
+
+
)
{
assert
.
sameValue
(
reports
[
i
]
'
timed
-
out
'
'
The
value
of
reports
[
i
]
is
"
timed
-
out
"
'
)
;
}
reportCompare
(
0
0
)
;
