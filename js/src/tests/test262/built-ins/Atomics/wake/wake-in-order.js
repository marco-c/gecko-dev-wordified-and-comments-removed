var
NUMAGENT
=
3
;
var
WAKEUP
=
0
;
var
SPIN
=
1
;
var
RUNNING
=
SPIN
+
NUMAGENT
;
var
NUMELEM
=
RUNNING
+
1
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
var
ia
=
new
Int32Array
(
sab
)
;
Atomics
.
add
(
ia
{
RUNNING
}
1
)
;
while
(
Atomics
.
load
(
ia
{
SPIN
+
i
}
)
=
=
=
0
)
/
*
nothing
*
/
;
262
.
agent
.
report
(
{
i
}
+
Atomics
.
wait
(
ia
{
WAKEUP
}
0
)
)
;
262
.
agent
.
leaving
(
)
;
}
)
)
;
}
var
ia
=
new
Int32Array
(
new
SharedArrayBuffer
(
NUMELEM
*
Int32Array
.
BYTES_PER_ELEMENT
)
)
;
262
.
agent
.
broadcast
(
ia
.
buffer
)
;
waitUntil
(
ia
RUNNING
NUMAGENT
)
;
262
.
agent
.
sleep
(
50
)
;
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
Atomics
.
store
(
ia
SPIN
+
i
1
)
;
262
.
agent
.
sleep
(
50
)
;
}
for
(
var
i
=
0
;
i
<
NUMAGENT
;
i
+
+
)
{
assert
.
sameValue
(
Atomics
.
wake
(
ia
WAKEUP
1
)
1
)
;
assert
.
sameValue
(
getReport
(
)
i
+
"
ok
"
)
;
}
function
getReport
(
)
{
var
r
;
while
(
(
r
=
262
.
agent
.
getReport
(
)
)
=
=
null
)
{
262
.
agent
.
sleep
(
10
)
;
}
return
r
;
}
function
waitUntil
(
ia
k
value
)
{
var
i
=
0
;
while
(
Atomics
.
load
(
ia
k
)
!
=
=
value
&
&
i
<
15
)
{
262
.
agent
.
sleep
(
10
)
;
i
+
+
;
}
assert
.
sameValue
(
Atomics
.
load
(
ia
k
)
value
"
All
agents
are
running
"
)
;
}
reportCompare
(
0
0
)
;
