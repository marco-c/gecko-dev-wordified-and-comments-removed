const
RUNNING
=
1
;
const
TIMEOUT
=
262
.
agent
.
timeouts
.
long
;
262
.
agent
.
start
(
262
.
agent
.
receiveBroadcast
(
function
(
sab
)
{
const
i32a
=
new
Int32Array
(
sab
)
;
Atomics
.
add
(
i32a
{
RUNNING
}
1
)
;
262
.
agent
.
report
(
Atomics
.
wait
(
i32a
0
0
{
TIMEOUT
}
)
)
;
/
/
We
will
timeout
eventually
262
.
agent
.
leaving
(
)
;
}
)
;
)
;
const
i32a
=
new
Int32Array
(
new
SharedArrayBuffer
(
Int32Array
.
BYTES_PER_ELEMENT
*
4
)
)
;
262
.
agent
.
broadcast
(
i32a
.
buffer
)
;
262
.
agent
.
waitUntil
(
i32a
RUNNING
1
)
;
262
.
agent
.
tryYield
(
)
;
assert
.
sameValue
(
Atomics
.
wake
(
i32a
0
NaN
)
0
'
Atomics
.
wake
(
i32a
0
NaN
)
returns
0
'
)
;
262
.
agent
.
trySleep
(
TIMEOUT
)
;
assert
.
sameValue
(
262
.
agent
.
getReport
(
)
'
timed
-
out
'
'
262
.
agent
.
getReport
(
)
returns
"
timed
-
out
"
'
)
;
reportCompare
(
0
0
)
;
