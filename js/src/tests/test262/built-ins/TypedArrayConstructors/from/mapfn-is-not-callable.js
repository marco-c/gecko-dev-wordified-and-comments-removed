var
getIterator
=
0
;
var
arrayLike
=
{
}
;
Object
.
defineProperty
(
arrayLike
Symbol
.
iterator
{
get
:
function
(
)
{
getIterator
+
+
;
}
}
)
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
null
)
;
}
"
mapfn
is
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
42
)
;
}
"
mapfn
is
a
number
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
"
"
)
;
}
"
mapfn
is
a
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
{
}
)
;
}
"
mapfn
is
an
ordinary
object
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
[
]
)
;
}
"
mapfn
is
an
array
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
true
)
;
}
"
mapfn
is
a
boolean
"
)
;
var
s
=
Symbol
(
"
1
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
TA
.
from
(
arrayLike
s
)
;
}
"
mapfn
is
a
symbol
"
)
;
assert
.
sameValue
(
getIterator
0
"
IsCallable
(
mapfn
)
check
occurs
before
getting
source
[
iterator
]
"
)
;
}
)
;
reportCompare
(
0
0
)
;
