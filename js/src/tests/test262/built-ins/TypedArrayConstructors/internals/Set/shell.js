var
byteConversionValues
=
{
values
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
undefined
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
2049
2051
0
.
00006103515625
0
.
00006097555160522461
5
.
960464477539063e
-
8
2
.
9802322387695312e
-
8
2
.
980232238769532e
-
8
8
.
940696716308594e
-
8
1
.
4901161193847656e
-
7
1
.
490116119384766e
-
7
65504
65520
65519
.
99999999999
0
.
000061005353927612305
0
.
0000610053539276123
]
expected
:
{
Int8
:
[
127
-
128
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
1
0
1
0
1
0
1
0
1
0
0
0
0
1
3
0
0
0
0
0
0
0
0
-
32
-
16
-
17
0
0
]
Uint8
:
[
127
128
255
0
255
0
255
0
255
0
255
0
255
0
1
0
0
0
0
0
0
255
0
0
255
0
129
128
1
0
1
0
1
0
1
0
1
0
0
0
0
1
3
0
0
0
0
0
0
0
0
224
240
239
0
0
]
Uint8Clamped
:
[
127
128
255
255
255
255
255
255
255
255
255
255
255
255
1
0
0
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
255
0
0
255
255
0
0
0
0
0
0
0
0
255
255
255
0
0
]
Int16
:
[
127
128
32767
-
32768
-
1
0
255
256
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
1
0
-
255
-
256
1
0
1
0
0
0
0
2049
2051
0
0
0
0
0
0
0
0
-
32
-
16
-
17
0
0
]
Uint16
:
[
127
128
32767
32768
65535
0
255
256
65535
0
65535
0
65535
0
1
0
0
0
0
0
0
65535
0
0
65535
0
65409
65408
32769
32768
1
0
65281
65280
1
0
1
0
0
0
0
2049
2051
0
0
0
0
0
0
0
0
65504
65520
65519
0
0
]
Int32
:
[
127
128
32767
32768
2147483647
-
2147483648
255
256
65535
65536
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
1
0
0
0
0
2049
2051
0
0
0
0
0
0
0
0
65504
65520
65519
0
0
]
Uint32
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
0
4294967295
0
1
0
0
0
0
0
0
4294967295
0
0
4294967295
0
4294967169
4294967168
4294934529
4294934528
2147483649
2147483648
4294967041
4294967040
4294901761
4294901760
1
0
0
0
0
2049
2051
0
0
0
0
0
0
0
0
65504
65520
65519
0
0
]
Float16
:
[
127
128
32768
32768
Infinity
Infinity
255
256
Infinity
Infinity
Infinity
Infinity
Infinity
Infinity
1
.
099609375
0
.
0999755859375
0
.
5
0
.
5
0
.
60009765625
0
.
7001953125
NaN
-
1
-
0
-
0
.
0999755859375
-
1
.
099609375
NaN
-
127
-
128
-
32768
-
32768
-
Infinity
-
Infinity
-
255
-
256
-
Infinity
-
Infinity
-
Infinity
-
Infinity
Infinity
-
Infinity
0
2048
2052
0
.
00006103515625
0
.
00006097555160522461
5
.
960464477539063e
-
8
0
5
.
960464477539063e
-
8
1
.
1920928955078125e
-
7
1
.
1920928955078125e
-
7
1
.
7881393432617188e
-
7
65504
Infinity
65504
0
.
00006103515625
0
.
00006097555160522461
]
Float32
:
[
127
128
32767
32768
2147483648
2147483648
255
256
65535
65536
4294967296
4294967296
9007199254740992
9007199254740992
1
.
100000023841858
0
.
10000000149011612
0
.
5
0
.
5
0
.
6000000238418579
0
.
699999988079071
NaN
-
1
-
0
-
0
.
10000000149011612
-
1
.
100000023841858
NaN
-
127
-
128
-
32767
-
32768
-
2147483648
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967296
-
4294967296
Infinity
-
Infinity
0
2049
2051
0
.
00006103515625
0
.
00006097555160522461
5
.
960464477539063e
-
8
2
.
9802322387695312e
-
8
2
.
9802322387695312e
-
8
8
.
940696716308594e
-
8
1
.
4901161193847656e
-
7
1
.
4901161193847656e
-
7
65504
65520
65520
0
.
000061005353927612305
0
.
000061005353927612305
]
Float64
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
NaN
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
2049
2051
0
.
00006103515625
0
.
00006097555160522461
5
.
960464477539063e
-
8
2
.
9802322387695312e
-
8
2
.
980232238769532e
-
8
8
.
940696716308594e
-
8
1
.
4901161193847656e
-
7
1
.
490116119384766e
-
7
65504
65520
65519
.
99999999999
0
.
000061005353927612305
0
.
0000610053539276123
]
}
}
;
function
DETACHBUFFER
(
buffer
)
{
if
(
!
262
|
|
typeof
262
.
detachArrayBuffer
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
No
method
available
to
detach
an
ArrayBuffer
"
)
;
}
262
.
detachArrayBuffer
(
buffer
)
;
}
var
NaNs
=
[
NaN
Number
.
NaN
NaN
*
0
0
/
0
Infinity
/
Infinity
-
(
0
/
0
)
Math
.
pow
(
-
1
0
.
5
)
-
Math
.
pow
(
-
1
0
.
5
)
Number
(
"
Not
-
a
-
Number
"
)
]
;
var
floatArrayConstructors
=
[
Float64Array
Float32Array
]
;
var
nonClampedIntArrayConstructors
=
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
;
var
intArrayConstructors
=
nonClampedIntArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
if
(
typeof
Float16Array
!
=
=
'
undefined
'
)
{
floatArrayConstructors
.
push
(
Float16Array
)
;
}
var
typedArrayConstructors
=
floatArrayConstructors
.
concat
(
intArrayConstructors
)
;
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
typedArrayConstructors
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
var
nonAtomicsFriendlyTypedArrayConstructors
=
floatArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
function
testWithNonAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
nonAtomicsFriendlyTypedArrayConstructors
)
;
}
function
testWithAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
)
;
}
function
testTypedArrayConversions
(
byteConversionValues
fn
)
{
var
values
=
byteConversionValues
.
values
;
var
expected
=
byteConversionValues
.
expected
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
name
=
TA
.
name
.
slice
(
0
-
5
)
;
return
values
.
forEach
(
function
(
value
index
)
{
var
exp
=
expected
[
name
]
[
index
]
;
var
initial
=
0
;
if
(
exp
=
=
=
0
)
{
initial
=
1
;
}
fn
(
TA
value
exp
initial
)
;
}
)
;
}
)
;
}
function
isFloatTypedArrayConstructor
(
arg
)
{
return
floatArrayConstructors
.
indexOf
(
arg
)
!
=
=
-
1
;
}
function
floatTypedArrayConstructorPrecision
(
FA
)
{
if
(
typeof
Float16Array
!
=
=
"
undefined
"
&
&
FA
=
=
=
Float16Array
)
{
return
"
half
"
;
}
else
if
(
FA
=
=
=
Float32Array
)
{
return
"
single
"
;
}
else
if
(
FA
=
=
=
Float64Array
)
{
return
"
double
"
;
}
else
{
throw
new
Error
(
"
Malformed
test
-
floatTypedArrayConstructorPrecision
called
with
non
-
float
TypedArray
"
)
;
}
}
