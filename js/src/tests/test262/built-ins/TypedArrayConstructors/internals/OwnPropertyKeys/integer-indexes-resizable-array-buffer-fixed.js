assert
.
sameValue
(
typeof
ArrayBuffer
.
prototype
.
resize
"
function
"
)
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
BPE
=
TA
.
BYTES_PER_ELEMENT
;
var
ab
=
new
ArrayBuffer
(
BPE
*
4
{
maxByteLength
:
BPE
*
5
}
)
;
var
array
=
new
TA
(
ab
BPE
2
)
;
assert
.
sameValue
(
Reflect
.
ownKeys
(
array
)
.
join
(
"
"
)
"
0
1
"
"
initial
"
)
;
try
{
ab
.
resize
(
BPE
*
5
)
;
}
catch
(
_
)
{
}
assert
.
sameValue
(
Reflect
.
ownKeys
(
array
)
.
join
(
"
"
)
"
0
1
"
"
following
grow
"
)
;
try
{
ab
.
resize
(
BPE
*
3
)
;
}
catch
(
_
)
{
}
assert
.
sameValue
(
Reflect
.
ownKeys
(
array
)
.
join
(
"
"
)
"
0
1
"
"
following
shrink
(
within
bounds
)
"
)
;
var
expected
;
try
{
ab
.
resize
(
BPE
*
2
)
;
expected
=
"
"
;
}
catch
(
_
)
{
expected
=
"
0
1
"
;
}
assert
.
sameValue
(
Reflect
.
ownKeys
(
array
)
.
join
(
"
"
)
expected
"
following
shrink
(
out
of
bounds
)
"
)
;
}
)
;
reportCompare
(
0
0
)
;
