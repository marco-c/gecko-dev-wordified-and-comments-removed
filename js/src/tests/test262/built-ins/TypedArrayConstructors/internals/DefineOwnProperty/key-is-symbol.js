testWithTypedArrayConstructors
(
function
(
TA
)
{
var
sample
=
new
TA
(
[
42
43
]
)
;
var
s1
=
Symbol
(
"
foo
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
s1
{
value
:
42
configurable
:
true
}
)
true
"
return
true
after
defining
property
"
)
;
assert
.
sameValue
(
sample
[
s1
]
42
)
;
verifyNotWritable
(
sample
s1
)
;
verifyNotEnumerable
(
sample
s1
)
;
verifyConfigurable
(
sample
s1
)
;
var
s2
=
Symbol
(
"
bar
"
)
;
var
fnset
=
function
(
)
{
}
;
var
fnget
=
function
(
)
{
}
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
sample
s2
{
get
:
fnget
set
:
fnset
enumerable
:
true
}
)
true
"
return
true
after
defining
property
"
)
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
sample
s2
)
;
assert
.
sameValue
(
desc
.
get
fnget
"
accessor
'
s
get
"
)
;
assert
.
sameValue
(
desc
.
set
fnset
"
accessor
'
s
set
"
)
;
assert
.
sameValue
(
desc
.
enumerable
true
)
;
verifyNotConfigurable
(
sample
s2
)
;
}
)
;
reportCompare
(
0
0
)
;
