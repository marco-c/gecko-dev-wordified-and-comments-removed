var
byteConversionValues
=
{
values
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
undefined
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
]
expected
:
{
Int8
:
[
127
-
128
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
1
0
1
0
1
0
1
0
1
0
0
0
0
]
Uint8
:
[
127
128
255
0
255
0
255
0
255
0
255
0
255
0
1
0
0
0
0
0
0
255
0
0
255
0
129
128
1
0
1
0
1
0
1
0
1
0
0
0
0
]
Uint8Clamped
:
[
127
128
255
255
255
255
255
255
255
255
255
255
255
255
1
0
0
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
255
0
0
]
Int16
:
[
127
128
32767
-
32768
-
1
0
255
256
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
1
0
-
255
-
256
1
0
1
0
0
0
0
]
Uint16
:
[
127
128
32767
32768
65535
0
255
256
65535
0
65535
0
65535
0
1
0
0
0
0
0
0
65535
0
0
65535
0
65409
65408
32769
32768
1
0
65281
65280
1
0
1
0
0
0
0
]
Int32
:
[
127
128
32767
32768
2147483647
-
2147483648
255
256
65535
65536
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
1
0
0
0
0
]
Uint32
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
0
4294967295
0
1
0
0
0
0
0
0
4294967295
0
0
4294967295
0
4294967169
4294967168
4294934529
4294934528
2147483649
2147483648
4294967041
4294967040
4294901761
4294901760
1
0
0
0
0
]
Float32
:
[
127
128
32767
32768
2147483648
2147483648
255
256
65535
65536
4294967296
4294967296
9007199254740992
9007199254740992
1
.
100000023841858
0
.
10000000149011612
0
.
5
0
.
5
0
.
6000000238418579
0
.
699999988079071
NaN
-
1
-
0
-
0
.
10000000149011612
-
1
.
100000023841858
NaN
-
127
-
128
-
32767
-
32768
-
2147483648
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967296
-
4294967296
Infinity
-
Infinity
0
]
Float64
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
NaN
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
]
}
}
;
var
NaNs
=
[
NaN
Number
.
NaN
NaN
*
0
0
/
0
Infinity
/
Infinity
-
(
0
/
0
)
Math
.
pow
(
-
1
0
.
5
)
-
Math
.
pow
(
-
1
0
.
5
)
Number
(
"
Not
-
a
-
Number
"
)
]
;
var
typedArrayConstructors
=
[
Float64Array
Float32Array
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
Uint8ClampedArray
]
;
var
floatArrayConstructors
=
typedArrayConstructors
.
slice
(
0
2
)
;
var
intArrayConstructors
=
typedArrayConstructors
.
slice
(
2
7
)
;
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
typedArrayConstructors
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
function
testTypedArrayConversions
(
byteConversionValues
fn
)
{
var
values
=
byteConversionValues
.
values
;
var
expected
=
byteConversionValues
.
expected
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
name
=
TA
.
name
.
slice
(
0
-
5
)
;
return
values
.
forEach
(
function
(
value
index
)
{
var
exp
=
expected
[
name
]
[
index
]
;
var
initial
=
0
;
if
(
exp
=
=
=
0
)
{
initial
=
1
;
}
fn
(
TA
value
exp
initial
)
;
}
)
;
}
)
;
}
