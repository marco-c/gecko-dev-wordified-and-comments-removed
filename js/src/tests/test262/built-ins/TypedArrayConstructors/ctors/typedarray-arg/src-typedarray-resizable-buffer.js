function
IsBigIntTypedArray
(
ta
)
{
return
ta
instanceof
BigInt64Array
|
|
ta
instanceof
BigUint64Array
;
}
function
AllBigIntMatchedCtorCombinations
(
test
)
{
for
(
let
targetCtor
of
ctors
)
{
for
(
let
sourceCtor
of
ctors
)
{
if
(
IsBigIntTypedArray
(
new
targetCtor
(
)
)
!
=
IsBigIntTypedArray
(
new
sourceCtor
(
)
)
)
{
continue
;
}
test
(
targetCtor
sourceCtor
)
;
}
}
}
AllBigIntMatchedCtorCombinations
(
(
targetCtor
sourceCtor
)
=
>
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
sourceCtor
.
BYTES_PER_ELEMENT
8
*
sourceCtor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
sourceCtor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
sourceCtor
(
rab
2
*
sourceCtor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
sourceCtor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
sourceCtor
(
rab
2
*
sourceCtor
.
BYTES_PER_ELEMENT
)
;
const
taFull
=
new
sourceCtor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taFull
[
i
]
=
MayNeedBigInt
(
taFull
i
+
1
)
;
}
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
fixedLength
)
)
[
1
2
3
4
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
fixedLengthWithOffset
)
)
[
3
4
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTracking
)
)
[
1
2
3
4
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTrackingWithOffset
)
)
[
3
4
]
)
;
rab
.
resize
(
3
*
sourceCtor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLength
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLengthWithOffset
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTracking
)
)
[
1
2
3
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTrackingWithOffset
)
)
[
3
]
)
;
rab
.
resize
(
1
*
sourceCtor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLength
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLengthWithOffset
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTracking
)
)
[
1
]
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
lengthTrackingWithOffset
)
;
}
)
;
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLength
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
fixedLengthWithOffset
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTracking
)
)
[
]
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
targetCtor
(
lengthTrackingWithOffset
)
;
}
)
;
rab
.
resize
(
6
*
sourceCtor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taFull
[
i
]
=
MayNeedBigInt
(
taFull
i
+
1
)
;
}
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
fixedLength
)
)
[
1
2
3
4
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
fixedLengthWithOffset
)
)
[
3
4
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTracking
)
)
[
1
2
3
4
5
6
]
)
;
assert
.
compareArray
(
ToNumbers
(
new
targetCtor
(
lengthTrackingWithOffset
)
)
[
3
4
5
6
]
)
;
}
)
;
reportCompare
(
0
0
)
;
