assert
.
sameValue
(
typeof
ArrayBuffer
.
prototype
.
resize
'
function
'
)
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
BPE
=
TA
.
BYTES_PER_ELEMENT
;
var
ab
=
new
ArrayBuffer
(
BPE
*
4
{
maxByteLength
:
BPE
*
5
}
)
;
var
speciesConstructor
=
Object
.
defineProperty
(
function
(
)
{
}
.
bind
(
)
'
prototype
'
{
get
:
function
(
)
{
return
null
;
}
}
)
;
var
onGetSpecies
;
ab
.
constructor
=
Object
.
defineProperty
(
{
}
Symbol
.
species
{
get
:
function
(
)
{
onGetSpecies
(
)
;
return
speciesConstructor
;
}
}
)
;
var
source
=
new
TA
(
ab
BPE
)
;
var
expected
=
[
10
20
30
]
;
source
[
0
]
=
10
;
source
[
1
]
=
20
;
source
[
2
]
=
30
;
onGetSpecies
=
function
(
)
{
try
{
ab
.
resize
(
BPE
*
5
)
;
expected
=
[
10
20
30
0
]
;
}
catch
(
_
)
{
}
}
;
assert
.
sameValue
(
(
new
TA
(
source
)
)
.
join
(
'
'
)
expected
.
join
(
'
'
)
)
;
assert
(
compareArray
(
new
TA
(
source
)
expected
)
'
following
grow
'
)
;
onGetSpecies
=
function
(
)
{
try
{
ab
.
resize
(
BPE
*
3
)
;
expected
=
[
10
20
]
;
}
catch
(
_
)
{
}
}
;
assert
(
compareArray
(
new
TA
(
source
)
expected
)
'
following
shrink
(
within
bounds
)
'
)
;
var
expectedError
;
var
actualError
;
onGetSpecies
=
function
(
)
{
try
{
ab
.
resize
(
BPE
)
;
expectedError
=
TypeError
;
}
catch
(
_
)
{
expectedError
=
Test262Error
;
}
}
;
try
{
new
TA
(
source
)
;
throw
new
Test262Error
(
'
the
operation
completed
successfully
'
)
;
}
catch
(
caught
)
{
actualError
=
caught
;
}
assert
.
sameValue
(
actualError
.
constructor
expectedError
)
;
}
)
;
reportCompare
(
0
0
)
;
