function
subClass
(
type
)
{
try
{
return
new
Function
(
'
return
class
My
'
+
type
+
'
extends
'
+
type
+
'
{
}
'
)
(
)
;
}
catch
(
e
)
{
}
}
const
MyUint8Array
=
subClass
(
'
Uint8Array
'
)
;
const
MyFloat32Array
=
subClass
(
'
Float32Array
'
)
;
const
MyBigInt64Array
=
subClass
(
'
BigInt64Array
'
)
;
const
builtinCtors
=
[
Uint8Array
Int8Array
Uint16Array
Int16Array
Uint32Array
Int32Array
Float32Array
Float64Array
Uint8ClampedArray
]
;
if
(
typeof
Float16Array
!
=
=
'
undefined
'
)
{
builtinCtors
.
push
(
Float16Array
)
;
}
if
(
typeof
BigUint64Array
!
=
=
'
undefined
'
)
{
builtinCtors
.
push
(
BigUint64Array
)
;
}
if
(
typeof
BigInt64Array
!
=
=
'
undefined
'
)
{
builtinCtors
.
push
(
BigInt64Array
)
;
}
const
floatCtors
=
[
Float32Array
Float64Array
MyFloat32Array
]
;
if
(
typeof
Float16Array
!
=
=
'
undefined
'
)
{
floatCtors
.
push
(
Float16Array
)
;
}
const
ctors
=
builtinCtors
.
concat
(
MyUint8Array
MyFloat32Array
)
;
if
(
typeof
MyBigInt64Array
!
=
=
'
undefined
'
)
{
ctors
.
push
(
MyBigInt64Array
)
;
}
function
CreateResizableArrayBuffer
(
byteLength
maxByteLength
)
{
return
new
ArrayBuffer
(
byteLength
{
maxByteLength
:
maxByteLength
}
)
;
}
function
Convert
(
item
)
{
if
(
typeof
item
=
=
'
bigint
'
)
{
return
Number
(
item
)
;
}
return
item
;
}
function
ToNumbers
(
array
)
{
let
result
=
[
]
;
for
(
let
i
=
0
;
i
<
array
.
length
;
i
+
+
)
{
let
item
=
array
[
i
]
;
result
.
push
(
Convert
(
item
)
)
;
}
return
result
;
}
function
MayNeedBigInt
(
ta
n
)
{
assert
.
sameValue
(
typeof
n
'
number
'
)
;
if
(
(
BigInt64Array
!
=
=
'
undefined
'
&
&
ta
instanceof
BigInt64Array
)
|
|
(
BigUint64Array
!
=
=
'
undefined
'
&
&
ta
instanceof
BigUint64Array
)
)
{
return
BigInt
(
n
)
;
}
return
n
;
}
function
CreateRabForTest
(
ctor
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
return
rab
;
}
function
CollectValuesAndResize
(
n
values
rab
resizeAfter
resizeTo
)
{
if
(
typeof
n
=
=
'
bigint
'
)
{
values
.
push
(
Number
(
n
)
)
;
}
else
{
values
.
push
(
n
)
;
}
if
(
values
.
length
=
=
resizeAfter
)
{
rab
.
resize
(
resizeTo
)
;
}
return
true
;
}
function
TestIterationAndResize
(
iterable
expected
rab
resizeAfter
newByteLength
)
{
let
values
=
[
]
;
let
resized
=
false
;
var
arrayValues
=
false
;
for
(
let
value
of
iterable
)
{
if
(
Array
.
isArray
(
value
)
)
{
arrayValues
=
true
;
values
.
push
(
[
value
[
0
]
Number
(
value
[
1
]
)
]
)
;
}
else
{
values
.
push
(
Number
(
value
)
)
;
}
if
(
!
resized
&
&
values
.
length
=
=
resizeAfter
)
{
rab
.
resize
(
newByteLength
)
;
resized
=
true
;
}
}
if
(
!
arrayValues
)
{
assert
.
compareArray
(
[
]
.
concat
(
values
)
expected
"
TestIterationAndResize
:
list
of
iterated
values
"
)
;
}
else
{
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
assert
.
compareArray
(
values
[
i
]
expected
[
i
]
"
TestIterationAndResize
:
list
of
iterated
lists
of
values
"
)
;
}
}
assert
(
resized
"
TestIterationAndResize
:
resize
condition
should
have
been
hit
"
)
;
}
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithBigIntTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
[
BigInt64Array
BigUint64Array
]
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
var
floatArrayConstructors
=
[
Float64Array
Float32Array
]
;
var
nonClampedIntArrayConstructors
=
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
;
var
intArrayConstructors
=
nonClampedIntArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
if
(
typeof
Float16Array
!
=
=
'
undefined
'
)
{
floatArrayConstructors
.
push
(
Float16Array
)
;
}
var
typedArrayConstructors
=
floatArrayConstructors
.
concat
(
intArrayConstructors
)
;
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
typedArrayConstructors
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
var
nonAtomicsFriendlyTypedArrayConstructors
=
floatArrayConstructors
.
concat
(
[
Uint8ClampedArray
]
)
;
function
testWithNonAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
nonAtomicsFriendlyTypedArrayConstructors
)
;
}
function
testWithAtomicsFriendlyTypedArrayConstructors
(
f
)
{
testWithTypedArrayConstructors
(
f
[
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
]
)
;
}
function
testTypedArrayConversions
(
byteConversionValues
fn
)
{
var
values
=
byteConversionValues
.
values
;
var
expected
=
byteConversionValues
.
expected
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
name
=
TA
.
name
.
slice
(
0
-
5
)
;
return
values
.
forEach
(
function
(
value
index
)
{
var
exp
=
expected
[
name
]
[
index
]
;
var
initial
=
0
;
if
(
exp
=
=
=
0
)
{
initial
=
1
;
}
fn
(
TA
value
exp
initial
)
;
}
)
;
}
)
;
}
function
isFloatTypedArrayConstructor
(
arg
)
{
return
floatArrayConstructors
.
indexOf
(
arg
)
!
=
=
-
1
;
}
function
floatTypedArrayConstructorPrecision
(
FA
)
{
if
(
typeof
Float16Array
!
=
=
"
undefined
"
&
&
FA
=
=
=
Float16Array
)
{
return
"
half
"
;
}
else
if
(
FA
=
=
=
Float32Array
)
{
return
"
single
"
;
}
else
if
(
FA
=
=
=
Float64Array
)
{
return
"
double
"
;
}
else
{
throw
new
Error
(
"
Malformed
test
-
floatTypedArrayConstructorPrecision
called
with
non
-
float
TypedArray
"
)
;
}
}
