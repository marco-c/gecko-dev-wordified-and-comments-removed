var
FinalizationRegistryCleanupIteratorPrototype
;
var
called
=
0
;
var
finalizationRegistry
=
new
FinalizationRegistry
(
function
(
)
{
}
)
;
function
callback
(
iterator
)
{
called
+
=
1
;
FinalizationRegistryCleanupIteratorPrototype
=
Object
.
getPrototypeOf
(
iterator
)
;
}
function
emptyCells
(
)
{
var
target
=
{
}
;
finalizationRegistry
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
finalizationRegistry
.
cleanupSome
(
callback
)
;
assert
.
sameValue
(
called
1
'
cleanup
successful
'
)
;
assert
.
sameValue
(
typeof
FinalizationRegistryCleanupIteratorPrototype
.
next
'
function
'
)
;
var
next
=
FinalizationRegistryCleanupIteratorPrototype
.
next
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
undefined
)
;
}
'
undefined
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
null
)
;
}
'
null
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
true
)
;
}
'
true
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
false
)
;
}
'
false
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
1
)
;
}
'
1
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
'
string
'
)
;
}
'
string
'
)
;
var
symbol
=
Symbol
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
next
.
call
(
symbol
)
;
}
'
symbol
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
