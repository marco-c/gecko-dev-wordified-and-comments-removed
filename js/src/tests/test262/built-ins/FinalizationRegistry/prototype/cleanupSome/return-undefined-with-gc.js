var
called
;
var
fn
=
function
(
)
{
called
+
=
1
;
return
39
;
}
;
var
cb
=
function
(
)
{
called
+
=
1
;
return
42
;
}
;
var
finalizationRegistry
=
new
FinalizationRegistry
(
fn
)
;
function
emptyCells
(
)
{
var
target
=
{
}
;
finalizationRegistry
.
register
(
target
)
;
var
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
cb
)
undefined
'
regular
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
fn
)
undefined
'
regular
callback
same
FG
cleanup
function
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
)
undefined
'
undefined
(
implicit
)
callback
defer
to
FB
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
called
=
0
;
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
undefined
)
undefined
'
undefined
(
explicit
)
callback
defer
to
FB
callback
'
)
;
assert
.
sameValue
(
called
1
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
(
)
=
>
1
)
undefined
'
arrow
function
'
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
async
function
(
)
{
}
)
undefined
'
async
function
'
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
function
*
(
)
{
}
)
undefined
'
generator
'
)
;
}
)
.
then
(
emptyCells
)
.
then
(
function
(
)
{
assert
.
sameValue
(
finalizationRegistry
.
cleanupSome
(
async
function
*
(
)
{
}
)
undefined
'
async
generator
'
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
