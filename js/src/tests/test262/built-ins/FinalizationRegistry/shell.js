function
asyncGC
(
.
.
.
targets
)
{
var
finalizationRegistry
=
new
FinalizationRegistry
(
(
)
=
>
{
}
)
;
var
length
=
targets
.
length
;
for
(
let
target
of
targets
)
{
finalizationRegistry
.
register
(
target
'
target
'
)
;
target
=
null
;
}
targets
=
null
;
return
Promise
.
resolve
(
'
tick
'
)
.
then
(
(
)
=
>
asyncGCDeref
(
)
)
.
then
(
(
)
=
>
{
var
names
=
[
]
;
finalizationRegistry
.
cleanupSome
(
name
=
>
{
names
.
push
(
name
)
;
}
)
;
if
(
!
names
|
|
names
.
length
!
=
length
)
{
throw
asyncGC
.
notCollected
;
}
}
)
;
}
asyncGC
.
notCollected
=
Symbol
(
'
Object
was
not
collected
'
)
;
async
function
asyncGCDeref
(
)
{
var
trigger
;
if
(
262
.
clearKeptObjects
)
{
trigger
=
262
.
clearKeptObjects
(
)
;
}
await
262
.
gc
(
)
;
return
Promise
.
resolve
(
trigger
)
;
}
function
resolveAsyncGC
(
err
)
{
if
(
err
=
=
=
asyncGC
.
notCollected
)
{
DONE
(
)
;
}
DONE
(
err
)
;
}
function
isConstructor
(
f
)
{
try
{
Reflect
.
construct
(
function
(
)
{
}
[
]
f
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
