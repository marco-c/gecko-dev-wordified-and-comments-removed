let
cleanupCallback
=
0
;
let
holdings
=
[
]
;
function
cb
(
holding
)
{
holdings
.
push
(
holding
)
;
}
let
finalizationRegistry
=
new
FinalizationRegistry
(
function
(
)
{
cleanupCallback
+
=
1
;
}
)
;
function
emptyCells
(
)
{
let
target
=
{
}
;
finalizationRegistry
.
register
(
target
'
a
'
)
;
let
prom
=
asyncGC
(
target
)
;
target
=
null
;
return
prom
;
}
emptyCells
(
)
.
then
(
async
function
(
)
{
await
Promise
.
resolve
(
1
)
;
finalizationRegistry
.
cleanupSome
(
cb
)
;
let
expectedCalled
=
cleanupCallback
=
=
=
1
?
0
:
1
;
assert
.
sameValue
(
holdings
.
length
expectedCalled
'
cleanupSome
callback
for
the
first
time
'
)
;
assert
(
cleanupCallback
>
=
0
'
cleanupCallback
might
be
0
'
)
;
assert
(
cleanupCallback
<
=
1
'
cleanupCallback
might
be
1
'
)
;
cleanupCallback
=
0
;
await
262
.
gc
(
)
;
await
Promise
.
resolve
(
2
)
;
finalizationRegistry
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
holdings
.
length
expectedCalled
'
cleanupSome
callback
is
not
called
anymore
no
empty
cells
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
1
'
)
;
await
262
.
gc
(
)
;
await
Promise
.
resolve
(
3
)
;
finalizationRegistry
.
cleanupSome
(
cb
)
;
assert
.
sameValue
(
holdings
.
length
expectedCalled
'
cleanupSome
callback
is
not
called
again
#
2
'
)
;
assert
.
sameValue
(
cleanupCallback
0
'
cleanupCallback
is
not
called
again
#
2
'
)
;
if
(
holdings
.
length
)
{
assert
.
compareArray
(
holdings
[
'
a
'
]
)
;
}
await
262
.
gc
(
)
;
}
)
.
then
(
DONE
resolveAsyncGC
)
;
