assert
.
sameValue
(
typeof
ShadowRealm
.
prototype
.
evaluate
'
function
'
'
This
test
must
fail
if
ShadowRealm
.
prototype
.
evaluate
is
not
a
function
'
)
;
const
r
=
new
ShadowRealm
(
)
;
const
properties
=
[
'
globalThis
'
'
Infinity
'
'
NaN
'
'
undefined
'
'
eval
'
'
isFinite
'
'
isNaN
'
'
parseFloat
'
'
parseInt
'
'
decodeURI
'
'
decodeURIComponent
'
'
encodeURI
'
'
encodeURIComponent
'
'
AggregateError
'
'
Array
'
'
ArrayBuffer
'
'
BigInt
'
'
BigInt64Array
'
'
BigUint64Array
'
'
Boolean
'
'
DataView
'
'
Date
'
'
Error
'
'
EvalError
'
'
FinalizationRegistry
'
'
Float32Array
'
'
Float64Array
'
'
Function
'
'
Int8Array
'
'
Int16Array
'
'
Int32Array
'
'
Map
'
'
Number
'
'
Object
'
'
Promise
'
'
Proxy
'
'
RangeError
'
'
ReferenceError
'
'
RegExp
'
'
Set
'
'
SharedArrayBuffer
'
'
String
'
'
Symbol
'
'
SyntaxError
'
'
TypeError
'
'
Uint8Array
'
'
Uint8ClampedArray
'
'
Uint16Array
'
'
Uint32Array
'
'
URIError
'
'
WeakMap
'
'
WeakRef
'
'
WeakSet
'
'
Atomics
'
'
JSON
'
'
Math
'
'
Reflect
'
]
;
const
available
=
properties
.
filter
(
name
=
>
{
return
r
.
evaluate
(
Object
.
prototype
.
hasOwnProperty
.
call
(
globalThis
'
{
name
}
'
)
)
;
}
)
;
assert
.
compareArray
(
properties
available
)
;
reportCompare
(
0
0
)
;
