assert
.
sameValue
(
typeof
ShadowRealm
.
prototype
.
evaluate
'
function
'
'
This
test
must
fail
if
ShadowRealm
.
prototype
.
evaluate
is
not
a
function
'
)
;
const
r
=
new
ShadowRealm
(
)
;
assert
.
sameValue
(
r
.
evaluate
(
'
Object
.
getPrototypeOf
(
globalThis
)
=
=
=
Object
.
prototype
'
)
true
'
The
[
[
Prototype
]
]
of
globalThis
is
Object
.
prototype
'
)
;
assert
.
sameValue
(
r
.
evaluate
(
'
Object
.
isExtensible
(
globalThis
)
'
)
true
'
globalThis
is
extensible
'
)
;
assert
.
sameValue
(
r
.
evaluate
(
'
globalThis
.
constructor
=
=
=
Object
'
)
true
'
globalThis
.
constructor
is
Object
'
)
;
assert
.
sameValue
(
r
.
evaluate
(
let
result
;
try
{
globalThis
.
__proto__
=
{
x
:
2
}
;
result
=
true
;
}
catch
(
e
)
{
result
=
false
;
}
result
;
)
true
'
Can
assign
to
globalThis
.
__proto__
directly
'
)
;
assert
.
sameValue
(
r
.
evaluate
(
Reflect
.
set
(
globalThis
'
__proto__
'
{
x
:
1
}
)
&
&
Reflect
.
setPrototypeOf
(
globalThis
.
__proto__
{
x
:
2
}
)
;
)
true
'
Can
set
an
ordinary
globalThis
.
__proto__
'
)
;
reportCompare
(
0
0
)
;
