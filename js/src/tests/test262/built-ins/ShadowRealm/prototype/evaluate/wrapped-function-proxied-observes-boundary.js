assert
.
sameValue
(
typeof
ShadowRealm
.
prototype
.
evaluate
'
function
'
'
This
test
must
fail
if
ShadowRealm
.
prototype
.
evaluate
is
not
a
function
'
)
;
const
r
=
new
ShadowRealm
(
)
;
const
wrapped
=
r
.
evaluate
(
(
)
=
>
{
return
1
;
}
;
)
;
const
secretObj
=
{
x
:
2
}
;
let
received
;
const
proxiedWrapped
=
new
Proxy
(
wrapped
{
apply
(
target
_
args
)
{
assert
.
sameValue
(
target
wrapped
)
;
received
=
args
;
return
target
(
{
x
:
1
}
)
;
}
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
proxiedWrapped
(
secretObj
)
'
Proxying
a
wrapped
function
and
invoking
it
still
performs
boundary
checks
'
)
;
assert
.
sameValue
(
received
[
0
]
secretObj
'
proxy
still
calls
the
handler
trap
'
)
;
assert
.
sameValue
(
received
.
length
1
)
;
reportCompare
(
0
0
)
;
