var
thrownError
=
new
Error
(
"
Don
'
t
catch
me
.
"
)
var
obj
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
{
value
:
1
done
:
false
}
;
}
throw
(
)
{
return
{
value
:
Promise
.
resolve
(
42
)
done
:
true
}
;
}
}
;
}
}
;
async
function
*
asyncg
(
)
{
return
yield
*
obj
;
}
let
iter
=
asyncg
(
)
;
iter
.
next
(
)
.
then
(
function
(
result
)
{
iter
.
throw
(
thrownError
)
.
then
(
function
(
result
)
{
assert
.
sameValue
(
result
.
value
42
"
Result
.
value
should
be
unwrapped
got
:
"
+
result
.
value
)
;
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
'
the
iterator
is
completed
'
)
;
assert
.
sameValue
(
value
undefined
'
value
is
undefined
'
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
}
)
.
catch
(
DONE
)
;
