var
returnCount
=
0
;
function
Reject
(
)
{
}
var
obj
=
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
{
value
:
1
done
:
false
}
;
}
throw
(
)
{
return
{
value
:
Promise
.
reject
(
new
Reject
(
)
)
done
:
false
}
;
}
return
(
)
{
returnCount
+
=
1
;
}
}
;
}
}
;
async
function
*
asyncg
(
)
{
return
yield
*
obj
;
}
let
iter
=
asyncg
(
)
;
asyncTest
(
async
function
(
)
{
await
assert
.
throwsAsync
(
Reject
async
(
)
=
>
{
await
iter
.
next
(
)
;
return
iter
.
throw
(
)
;
}
"
Promise
should
be
rejected
"
)
;
assert
.
sameValue
(
returnCount
1
)
;
const
result
=
await
iter
.
next
(
)
;
assert
(
result
.
done
"
the
iterator
is
completed
"
)
;
assert
.
sameValue
(
result
.
value
undefined
"
value
is
undefined
"
)
;
}
)
