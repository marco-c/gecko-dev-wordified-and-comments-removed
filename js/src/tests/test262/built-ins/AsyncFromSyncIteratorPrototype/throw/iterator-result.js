var
thrownError
=
new
Error
(
"
Catch
me
.
"
)
function
*
g
(
)
{
yield
42
;
throw
new
Test262Error
(
'
throw
closes
iter
'
)
;
yield
43
;
}
async
function
*
asyncg
(
)
{
yield
*
g
(
)
;
}
var
iter
=
asyncg
(
)
;
iter
.
next
(
)
.
then
(
function
(
result
)
{
iter
.
throw
(
thrownError
)
.
then
(
function
(
result
)
{
throw
new
Test262Error
(
'
throw
should
cause
rejection
of
promise
'
)
;
}
function
(
err
)
{
assert
.
sameValue
(
err
thrownError
"
promise
should
be
reject
with
custom
error
got
:
"
+
err
)
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
'
the
iterator
is
completed
'
)
;
assert
.
sameValue
(
value
undefined
'
value
is
undefined
'
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
}
)
.
catch
(
DONE
)
;
