function
*
g
(
)
{
yield
42
;
throw
new
Test262Error
(
'
return
closes
iter
'
)
;
yield
43
;
}
async
function
*
asyncg
(
)
{
yield
*
g
(
)
;
}
var
iter
=
asyncg
(
)
;
var
val
=
'
some
specific
return
value
'
iter
.
next
(
)
.
then
(
function
(
result
)
{
iter
.
return
(
val
)
.
then
(
function
(
result
)
{
assert
.
sameValue
(
result
.
done
true
'
the
iterator
is
completed
'
)
;
assert
.
sameValue
(
result
.
value
val
'
expect
agrument
to
return
'
)
;
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
'
the
iterator
is
completed
'
)
;
assert
.
sameValue
(
value
undefined
'
value
is
undefined
'
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
}
)
.
catch
(
DONE
)
;
