assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
'
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
'
{
lastChunkHandling
:
'
loose
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
'
{
lastChunkHandling
:
'
strict
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
'
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
'
{
lastChunkHandling
:
'
loose
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
[
101
120
97
]
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
'
{
lastChunkHandling
:
'
strict
'
}
)
;
}
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
=
=
'
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
=
=
'
{
lastChunkHandling
:
'
loose
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
=
=
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
[
101
120
97
102
]
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZh
=
=
'
{
lastChunkHandling
:
'
strict
'
}
)
;
}
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
'
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
'
{
lastChunkHandling
:
'
loose
'
}
)
[
101
120
97
102
]
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZh
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
[
101
120
97
]
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZh
'
{
lastChunkHandling
:
'
strict
'
}
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
'
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
'
{
lastChunkHandling
:
'
loose
'
}
)
;
}
)
;
assert
.
compareArray
(
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
[
101
120
97
]
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
'
{
lastChunkHandling
:
'
strict
'
}
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
=
'
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
=
'
{
lastChunkHandling
:
'
loose
'
}
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
=
'
{
lastChunkHandling
:
'
stop
-
before
-
partial
'
}
)
;
}
)
;
assert
.
throws
(
SyntaxError
function
(
)
{
Uint8Array
.
fromBase64
(
'
ZXhhZg
=
=
=
'
{
lastChunkHandling
:
'
strict
'
}
)
;
}
)
;
reportCompare
(
0
0
)
;
