var
valueOf
=
BigInt
.
prototype
.
valueOf
;
assert
.
sameValue
(
typeof
valueOf
'
function
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
undefined
)
;
}
"
undefined
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
null
)
;
}
"
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
false
)
;
}
"
false
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
true
)
;
}
"
true
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
"
"
)
;
}
"
the
empty
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
"
1n
"
)
;
}
"
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
0
)
;
}
"
number
(
0
)
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
1
)
;
}
"
number
(
1
)
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
NaN
)
;
}
"
NaN
"
)
;
var
s
=
Symbol
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
valueOf
.
call
(
s
)
;
}
"
symbol
"
)
;
reportCompare
(
0
0
)
;
