var
toString
=
BigInt
.
prototype
.
toString
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
{
x
:
1n
}
)
;
}
'
{
x
:
1n
}
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
[
1n
]
)
;
}
'
[
1n
]
'
)
;
var
obj
=
{
valueOf
:
function
(
)
{
throw
new
Test262Error
(
'
no
[
[
BigIntData
]
]
'
)
}
toString
:
function
(
)
{
throw
new
Test262Error
(
'
no
[
[
BigIntData
]
]
'
)
}
[
Symbol
.
toPrimitive
]
:
function
(
)
{
throw
new
Test262Error
(
'
no
[
[
BigIntData
]
]
'
)
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
obj
)
;
}
'
{
valueOf
toString
toPrimitive
}
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
0
)
;
}
'
0
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
1
)
;
}
'
1
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
NaN
)
;
}
'
NaN
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
undefined
)
;
}
'
undefined
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
null
)
;
}
'
null
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
true
)
;
}
'
true
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
toString
.
call
(
false
)
;
}
'
false
'
)
;
reportCompare
(
0
0
)
;
