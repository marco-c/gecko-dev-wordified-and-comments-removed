function
CustomError
(
)
{
}
var
toStringThrows
=
{
[
Symbol
.
toPrimitive
]
(
hint
)
{
if
(
hint
=
=
=
'
string
'
)
{
throw
new
CustomError
(
)
;
}
throw
new
Test262Error
(
'
toPrimitive
should
be
called
with
hint
"
string
"
'
)
;
}
get
toString
(
)
{
throw
new
Test262Error
(
'
toString
property
should
not
be
read
'
)
;
}
get
valueOf
(
)
{
throw
new
Test262Error
(
'
valueOf
property
should
not
be
read
'
)
;
}
}
;
var
re
=
/
.
/
g
;
Object
.
defineProperties
(
re
{
flags
:
{
get
(
)
{
return
toStringThrows
;
}
}
global
:
{
get
(
)
{
throw
new
Test262Error
(
'
global
property
should
not
be
read
'
)
;
}
}
unicode
:
{
get
(
)
{
throw
new
Test262Error
(
'
unicode
property
should
not
be
read
'
)
;
}
}
}
)
;
assert
.
throws
(
CustomError
function
(
)
{
re
[
Symbol
.
replace
]
(
'
'
)
;
}
)
;
reportCompare
(
0
0
)
;
