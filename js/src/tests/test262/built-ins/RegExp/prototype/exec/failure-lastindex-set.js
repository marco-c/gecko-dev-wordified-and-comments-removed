var
R_g
=
/
.
/
g
R_y
=
/
.
/
y
R_gy
=
/
.
/
gy
;
var
S
=
"
test
"
;
var
lastIndex
;
var
bigLastIndexes
=
[
Infinity
Number
.
MAX_VALUE
Number
.
MAX_SAFE_INTEGER
Number
.
MAX_SAFE_INTEGER
-
1
2
*
*
32
+
4
2
*
*
32
+
3
2
*
*
32
+
2
2
*
*
32
+
1
2
*
*
32
2
*
*
32
-
1
5
]
;
for
(
var
i
=
0
;
i
<
bigLastIndexes
.
length
;
i
+
+
)
{
lastIndex
=
bigLastIndexes
[
i
]
;
R_g
.
lastIndex
=
lastIndex
;
R_y
.
lastIndex
=
lastIndex
;
R_gy
.
lastIndex
=
lastIndex
;
assert
.
sameValue
(
R_g
.
exec
(
S
)
null
"
global
RegExp
instance
must
fail
to
match
against
'
"
+
S
+
"
'
at
lastIndex
"
+
lastIndex
)
;
assert
.
sameValue
(
R_y
.
exec
(
S
)
null
"
sticky
RegExp
instance
must
fail
to
match
against
'
"
+
S
+
"
'
at
lastIndex
"
+
lastIndex
)
;
assert
.
sameValue
(
R_gy
.
exec
(
S
)
null
"
global
sticky
RegExp
instance
must
fail
to
match
against
'
"
+
S
+
"
'
at
lastIndex
"
+
lastIndex
)
;
assert
.
sameValue
(
R_g
.
lastIndex
0
"
global
RegExp
instance
lastIndex
must
be
reset
after
"
+
lastIndex
+
"
exceeds
string
length
"
)
;
assert
.
sameValue
(
R_y
.
lastIndex
0
"
sticky
RegExp
instance
lastIndex
must
be
reset
after
"
+
lastIndex
+
"
exceeds
string
length
"
)
;
assert
.
sameValue
(
R_gy
.
lastIndex
0
"
global
sticky
RegExp
instance
lastIndex
must
be
reset
after
"
+
lastIndex
+
"
exceeds
string
length
"
)
;
}
reportCompare
(
0
0
)
;
