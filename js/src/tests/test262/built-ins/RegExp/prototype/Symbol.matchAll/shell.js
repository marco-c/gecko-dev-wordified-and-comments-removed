assert
.
compareIterator
=
function
(
iter
validators
message
)
{
message
=
message
|
|
'
'
;
var
i
result
;
for
(
i
=
0
;
i
<
validators
.
length
;
i
+
+
)
{
result
=
iter
.
next
(
)
;
assert
(
!
result
.
done
'
Expected
'
+
i
+
'
values
(
s
)
.
Instead
iterator
only
produced
'
+
(
i
-
1
)
+
'
value
(
s
)
.
'
+
message
)
;
validators
[
i
]
(
result
.
value
)
;
}
result
=
iter
.
next
(
)
;
assert
(
result
.
done
'
Expected
only
'
+
i
+
'
values
(
s
)
.
Instead
iterator
produced
more
.
'
+
message
)
;
assert
.
sameValue
(
result
.
value
undefined
'
Expected
value
of
undefined
when
iterator
completes
.
'
+
message
)
;
}
function
buildString
(
args
)
{
const
loneCodePoints
=
args
.
loneCodePoints
;
const
ranges
=
args
.
ranges
;
const
CHUNK_SIZE
=
10000
;
let
result
=
String
.
fromCodePoint
.
apply
(
null
loneCodePoints
)
;
for
(
let
i
=
0
;
i
<
ranges
.
length
;
i
+
+
)
{
let
range
=
ranges
[
i
]
;
let
start
=
range
[
0
]
;
let
end
=
range
[
1
]
;
let
codePoints
=
[
]
;
for
(
let
length
=
0
codePoint
=
start
;
codePoint
<
=
end
;
codePoint
+
+
)
{
codePoints
[
length
+
+
]
=
codePoint
;
if
(
length
=
=
=
CHUNK_SIZE
)
{
result
+
=
String
.
fromCodePoint
.
apply
(
null
codePoints
)
;
codePoints
.
length
=
length
=
0
;
}
}
result
+
=
String
.
fromCodePoint
.
apply
(
null
codePoints
)
;
}
return
result
;
}
function
printCodePoint
(
codePoint
)
{
const
hex
=
codePoint
.
toString
(
16
)
.
toUpperCase
(
)
.
padStart
(
6
"
0
"
)
;
return
U
+
{
hex
}
;
}
function
printStringCodePoints
(
string
)
{
const
buf
=
[
]
;
for
(
let
symbol
of
string
)
{
let
formatted
=
printCodePoint
(
symbol
.
codePointAt
(
0
)
)
;
buf
.
push
(
formatted
)
;
}
return
buf
.
join
(
'
'
)
;
}
function
testPropertyEscapes
(
regExp
string
expression
)
{
if
(
!
regExp
.
test
(
string
)
)
{
for
(
let
symbol
of
string
)
{
let
formatted
=
printCodePoint
(
symbol
.
codePointAt
(
0
)
)
;
assert
(
regExp
.
test
(
symbol
)
\
{
expression
}
\
should
match
{
formatted
}
(
\
{
symbol
}
\
)
)
;
}
}
}
function
testPropertyOfStrings
(
args
)
{
const
regExp
=
args
.
regExp
;
const
expression
=
args
.
expression
;
const
matchStrings
=
args
.
matchStrings
;
const
nonMatchStrings
=
args
.
nonMatchStrings
;
const
allStrings
=
matchStrings
.
join
(
'
'
)
;
if
(
!
regExp
.
test
(
allStrings
)
)
{
for
(
let
string
of
matchStrings
)
{
assert
(
regExp
.
test
(
string
)
\
{
expression
}
\
should
match
{
string
}
(
{
printStringCodePoints
(
string
)
}
)
)
;
}
}
if
(
!
nonMatchStrings
)
return
;
const
allNonMatchStrings
=
nonMatchStrings
.
join
(
'
'
)
;
if
(
regExp
.
test
(
allNonMatchStrings
)
)
{
for
(
let
string
of
nonMatchStrings
)
{
assert
(
!
regExp
.
test
(
string
)
\
{
expression
}
\
should
not
match
{
string
}
(
{
printStringCodePoints
(
string
)
}
)
)
;
}
}
}
const
testExtendedCharacterClass
=
testPropertyOfStrings
;
function
matchValidator
(
expectedEntries
expectedIndex
expectedInput
)
{
return
function
(
match
)
{
assert
.
compareArray
(
match
expectedEntries
'
Match
entries
'
)
;
assert
.
sameValue
(
match
.
index
expectedIndex
'
Match
index
'
)
;
assert
.
sameValue
(
match
.
input
expectedInput
'
Match
input
'
)
;
}
}
