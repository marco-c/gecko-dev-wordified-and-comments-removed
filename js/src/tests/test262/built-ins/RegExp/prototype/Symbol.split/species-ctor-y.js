var
flagsArg
;
var
re
=
{
}
;
re
.
constructor
=
function
(
)
{
}
;
re
.
constructor
[
Symbol
.
species
]
=
function
(
_
flags
)
{
flagsArg
=
flags
;
return
/
.
/
y
;
}
;
re
.
flags
=
'
'
;
RegExp
.
prototype
[
Symbol
.
split
]
.
call
(
re
'
'
)
;
assert
.
sameValue
(
flagsArg
'
y
'
)
;
re
.
flags
=
'
abcd
'
;
RegExp
.
prototype
[
Symbol
.
split
]
.
call
(
re
'
'
)
;
assert
.
sameValue
(
flagsArg
'
abcdy
'
)
;
re
.
flags
=
'
Y
'
;
RegExp
.
prototype
[
Symbol
.
split
]
.
call
(
re
'
'
)
;
assert
.
sameValue
(
flagsArg
'
Yy
'
)
;
re
.
flags
=
'
y
'
;
RegExp
.
prototype
[
Symbol
.
split
]
.
call
(
re
'
'
)
;
assert
.
sameValue
(
flagsArg
'
y
'
)
;
re
.
flags
=
'
abycd
'
;
RegExp
.
prototype
[
Symbol
.
split
]
.
call
(
re
'
'
)
;
assert
.
sameValue
(
flagsArg
'
abycd
'
)
;
reportCompare
(
0
0
)
;
