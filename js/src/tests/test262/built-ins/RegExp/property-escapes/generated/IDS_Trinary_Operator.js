const
matchSymbols
=
buildString
(
{
loneCodePoints
:
[
]
ranges
:
[
[
0x002FF2
0x002FF3
]
]
}
)
;
testPropertyEscapes
(
/
^
\
p
{
IDS_Trinary_Operator
}
+
/
u
matchSymbols
"
\
\
p
{
IDS_Trinary_Operator
}
"
)
;
testPropertyEscapes
(
/
^
\
p
{
IDST
}
+
/
u
matchSymbols
"
\
\
p
{
IDST
}
"
)
;
const
nonMatchSymbols
=
buildString
(
{
loneCodePoints
:
[
]
ranges
:
[
[
0x00DC00
0x00DFFF
]
[
0x000000
0x002FF1
]
[
0x002FF4
0x00DBFF
]
[
0x00E000
0x10FFFF
]
]
}
)
;
testPropertyEscapes
(
/
^
\
P
{
IDS_Trinary_Operator
}
+
/
u
nonMatchSymbols
"
\
\
P
{
IDS_Trinary_Operator
}
"
)
;
testPropertyEscapes
(
/
^
\
P
{
IDST
}
+
/
u
nonMatchSymbols
"
\
\
P
{
IDST
}
"
)
;
reportCompare
(
0
0
)
;
