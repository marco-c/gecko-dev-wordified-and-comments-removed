const
matchSymbols
=
buildString
(
{
loneCodePoints
:
[
0x01145B
]
ranges
:
[
[
0x011400
0x011459
]
[
0x01145D
0x01145F
]
]
}
)
;
testPropertyEscapes
(
/
^
\
p
{
Script
=
Newa
}
+
/
u
matchSymbols
"
\
\
p
{
Script
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
p
{
Script
=
Newa
}
+
/
u
matchSymbols
"
\
\
p
{
Script
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
p
{
sc
=
Newa
}
+
/
u
matchSymbols
"
\
\
p
{
sc
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
p
{
sc
=
Newa
}
+
/
u
matchSymbols
"
\
\
p
{
sc
=
Newa
}
"
)
;
const
nonMatchSymbols
=
buildString
(
{
loneCodePoints
:
[
0x01145A
0x01145C
]
ranges
:
[
[
0x00DC00
0x00DFFF
]
[
0x000000
0x00DBFF
]
[
0x00E000
0x0113FF
]
[
0x011460
0x10FFFF
]
]
}
)
;
testPropertyEscapes
(
/
^
\
P
{
Script
=
Newa
}
+
/
u
nonMatchSymbols
"
\
\
P
{
Script
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
P
{
Script
=
Newa
}
+
/
u
nonMatchSymbols
"
\
\
P
{
Script
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
P
{
sc
=
Newa
}
+
/
u
nonMatchSymbols
"
\
\
P
{
sc
=
Newa
}
"
)
;
testPropertyEscapes
(
/
^
\
P
{
sc
=
Newa
}
+
/
u
nonMatchSymbols
"
\
\
P
{
sc
=
Newa
}
"
)
;
reportCompare
(
0
0
)
;
