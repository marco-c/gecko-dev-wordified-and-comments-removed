var
re1
=
/
a
.
a
|
(
?
-
s
:
b
.
b
|
(
?
s
:
c
.
c
)
|
d
.
d
|
(
?
-
s
:
e
.
e
)
|
f
.
f
)
|
g
.
g
|
(
?
s
:
h
.
h
)
|
k
.
k
/
s
;
assert
(
re1
.
test
(
"
a
\
na
"
)
"
a
.
a
should
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
b
\
nb
"
)
"
b
.
b
should
not
match
newline
"
)
;
assert
(
re1
.
test
(
"
c
\
nc
"
)
"
c
.
c
should
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
d
\
nd
"
)
"
d
.
d
should
not
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
e
\
ne
"
)
"
e
.
e
should
not
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
f
\
nf
"
)
"
f
.
f
should
not
match
newline
"
)
;
assert
(
re1
.
test
(
"
g
\
ng
"
)
"
g
.
g
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
h
\
nh
"
)
"
h
.
h
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
k
\
nk
"
)
"
k
.
k
should
match
newline
"
)
;
var
re2
=
/
a
.
a
|
(
?
s
:
b
.
b
|
(
?
-
s
:
c
.
c
)
|
d
.
d
|
(
?
s
:
e
.
e
)
|
f
.
f
)
|
g
.
g
|
(
?
-
s
:
h
.
h
)
|
k
.
k
/
;
assert
(
!
re2
.
test
(
"
a
\
na
"
)
"
a
.
a
should
not
match
newline
"
)
;
assert
(
re2
.
test
(
"
b
\
nb
"
)
"
b
.
b
should
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
c
\
nc
"
)
"
c
.
c
should
not
match
newline
"
)
;
assert
(
re2
.
test
(
"
d
\
nd
"
)
"
d
.
d
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
e
\
ne
"
)
"
e
.
e
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
f
\
nf
"
)
"
f
.
f
should
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
g
\
ng
"
)
"
g
.
g
should
not
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
h
\
nh
"
)
"
h
.
h
should
not
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
k
\
nk
"
)
"
k
.
k
should
not
match
newline
"
)
;
reportCompare
(
0
0
)
;
