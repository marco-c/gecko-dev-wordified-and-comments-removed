var
re1
=
/
(
?
i
:
\
b
)
/
;
assert
(
re1
.
test
(
"
A
"
)
"
\
\
b
should
match
after
A
"
)
;
assert
(
re1
.
test
(
"
a
"
)
"
\
\
b
should
match
after
a
"
)
;
assert
(
re1
.
test
(
"
z
"
)
"
\
\
b
should
match
after
z
"
)
;
assert
(
re1
.
test
(
"
Z
"
)
"
\
\
b
should
match
after
Z
"
)
;
var
re2
=
/
(
?
i
:
\
b
)
/
u
;
assert
(
re2
.
test
(
"
A
"
)
"
\
\
b
should
match
after
A
"
)
;
assert
(
re2
.
test
(
"
a
"
)
"
\
\
b
should
match
after
a
"
)
;
assert
(
re2
.
test
(
"
z
"
)
"
\
\
b
should
match
after
z
"
)
;
assert
(
re2
.
test
(
"
Z
"
)
"
\
\
b
should
match
after
Z
"
)
;
assert
(
re2
.
test
(
"
\
u017f
"
)
"
\
\
b
should
match
after
\
u017f
"
)
;
assert
(
re2
.
test
(
"
\
u212a
"
)
"
\
\
b
should
match
after
\
u212a
"
)
;
var
re3
=
/
(
?
i
-
:
\
b
)
/
;
assert
(
re3
.
test
(
"
A
"
)
"
\
\
b
should
match
after
A
"
)
;
assert
(
re3
.
test
(
"
a
"
)
"
\
\
b
should
match
after
a
"
)
;
assert
(
re3
.
test
(
"
z
"
)
"
\
\
b
should
match
after
z
"
)
;
assert
(
re3
.
test
(
"
Z
"
)
"
\
\
b
should
match
after
Z
"
)
;
var
re4
=
/
(
?
i
-
:
\
b
)
/
u
;
assert
(
re4
.
test
(
"
A
"
)
"
\
\
b
should
match
after
A
"
)
;
assert
(
re4
.
test
(
"
a
"
)
"
\
\
b
should
match
after
a
"
)
;
assert
(
re4
.
test
(
"
z
"
)
"
\
\
b
should
match
after
z
"
)
;
assert
(
re4
.
test
(
"
Z
"
)
"
\
\
b
should
match
after
Z
"
)
;
assert
(
re4
.
test
(
"
\
u017f
"
)
"
\
\
b
should
match
after
\
u017f
"
)
;
assert
(
re4
.
test
(
"
\
u212a
"
)
"
\
\
b
should
match
after
\
u212a
"
)
;
reportCompare
(
0
0
)
;
