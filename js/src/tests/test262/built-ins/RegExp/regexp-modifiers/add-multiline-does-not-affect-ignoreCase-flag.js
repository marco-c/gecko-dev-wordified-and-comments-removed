var
re1
=
/
(
?
m
:
es
)
/
;
assert
(
re1
.
test
(
"
es
"
)
"
s
should
match
s
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
eS
"
)
"
s
should
not
match
S
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
es
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
eS
\
nz
"
)
"
s
should
not
match
S
in
modified
group
"
)
;
var
re2
=
/
(
?
m
:
es
)
/
i
;
assert
(
re2
.
test
(
"
es
"
)
"
s
should
match
s
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
eS
"
)
"
s
should
match
S
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
es
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
eS
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
var
re3
=
/
(
?
m
-
:
es
)
/
;
assert
(
re3
.
test
(
"
es
"
)
"
s
should
match
s
in
modified
group
"
)
;
assert
(
!
re3
.
test
(
"
eS
"
)
"
s
should
not
match
S
in
modified
group
"
)
;
assert
(
re3
.
test
(
"
es
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
assert
(
!
re3
.
test
(
"
eS
\
nz
"
)
"
s
should
not
match
S
in
modified
group
"
)
;
var
re4
=
/
(
?
m
-
:
es
)
/
i
;
assert
(
re4
.
test
(
"
es
"
)
"
s
should
match
s
in
modified
group
"
)
;
assert
(
re4
.
test
(
"
eS
"
)
"
s
should
match
S
in
modified
group
"
)
;
assert
(
re4
.
test
(
"
es
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
assert
(
re4
.
test
(
"
eS
\
nz
"
)
"
should
match
newline
in
modified
group
"
)
;
reportCompare
(
0
0
)
;
