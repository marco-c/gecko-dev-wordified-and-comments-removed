var
re1
=
/
^
a
|
(
?
-
m
:
^
b
|
(
?
m
:
^
c
)
|
^
d
|
(
?
-
m
:
^
e
)
|
^
f
)
|
^
g
|
(
?
m
:
^
h
)
|
^
k
/
m
;
assert
(
re1
.
test
(
"
\
na
\
n
"
)
"
^
a
should
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
\
nb
\
n
"
)
"
^
b
should
not
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
nc
\
n
"
)
"
^
c
should
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
\
nd
\
n
"
)
"
^
d
should
not
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
\
ne
\
n
"
)
"
^
e
should
not
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
\
nf
\
n
"
)
"
^
f
should
not
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
ng
\
n
"
)
"
^
g
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
nh
\
n
"
)
"
^
h
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
nk
\
n
"
)
"
^
k
should
match
newline
"
)
;
var
re2
=
/
^
a
|
(
?
m
:
^
b
|
(
?
-
m
:
^
c
)
|
^
d
|
(
?
m
:
^
e
)
|
^
f
)
|
^
g
|
(
?
-
m
:
^
h
)
|
^
k
/
;
assert
(
!
re2
.
test
(
"
\
na
\
n
"
)
"
^
a
should
not
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
nb
\
n
"
)
"
^
b
should
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
\
nc
\
n
"
)
"
^
c
should
not
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
nd
\
n
"
)
"
^
d
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
ne
\
n
"
)
"
^
e
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
nf
\
n
"
)
"
^
f
should
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
\
ng
\
n
"
)
"
^
g
should
not
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
\
nh
\
n
"
)
"
^
h
should
not
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
\
nk
\
n
"
)
"
^
k
should
not
match
newline
"
)
;
reportCompare
(
0
0
)
;
