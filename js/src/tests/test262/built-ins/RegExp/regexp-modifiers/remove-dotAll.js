var
re1
=
/
(
?
-
s
:
^
.
)
/
s
;
assert
(
re1
.
test
(
"
a
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
3
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
u2027
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
u0085
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
v
"
)
"
Pattern
character
'
.
'
should
match
mon
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
f
"
)
"
Pattern
character
'
.
'
should
match
mon
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
u180E
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
\
u
{
10300
}
"
)
"
Supplementary
plane
not
matched
by
a
single
.
"
)
;
assert
(
!
re1
.
test
(
"
\
n
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
n
'
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
\
r
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
r
'
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
\
u2028
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
u2028
'
in
modified
group
"
)
;
assert
(
!
re1
.
test
(
"
\
u2029
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
u2029
'
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
uD800
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
uDFFF
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
var
re2
=
new
RegExp
(
"
(
?
-
s
:
^
.
)
"
"
s
"
)
;
assert
(
re2
.
test
(
"
a
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
3
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
u2027
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
u0085
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
v
"
)
"
Pattern
character
'
.
'
should
match
mon
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
f
"
)
"
Pattern
character
'
.
'
should
match
mon
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
u180E
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
!
re2
.
test
(
"
\
u
{
10300
}
"
)
"
Supplementary
plane
not
matched
by
a
single
.
"
)
;
assert
(
!
re2
.
test
(
"
\
n
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
n
'
in
modified
group
"
)
;
assert
(
!
re2
.
test
(
"
\
r
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
r
'
in
modified
group
"
)
;
assert
(
!
re2
.
test
(
"
\
u2028
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
u2028
'
in
modified
group
"
)
;
assert
(
!
re2
.
test
(
"
\
u2029
"
)
"
Pattern
character
'
.
'
should
not
match
'
\
\
u2029
'
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
uD800
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
uDFFF
"
)
"
Pattern
character
'
.
'
should
match
non
-
line
terminators
in
modified
group
"
)
;
reportCompare
(
0
0
)
;
