var
re1
=
/
^
a
|
^
b
|
(
?
-
m
:
^
c
)
|
^
d
|
^
e
/
m
;
assert
(
re1
.
test
(
"
\
na
\
n
"
)
"
Alternative
^
a
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
nb
\
n
"
)
"
Alternative
^
b
should
match
newline
"
)
;
assert
(
!
re1
.
test
(
"
\
nc
\
n
"
)
"
Alternative
(
?
-
m
:
^
c
)
should
not
match
newline
in
modified
group
"
)
;
assert
(
re1
.
test
(
"
\
nd
\
n
"
)
"
Alternative
^
d
should
match
newline
"
)
;
assert
(
re1
.
test
(
"
\
ne
\
n
"
)
"
Alternative
^
e
should
match
newline
"
)
;
var
re2
=
/
(
^
a
)
|
(
?
:
^
b
)
|
(
?
-
m
:
^
c
)
|
(
?
:
^
d
)
|
(
^
e
)
/
m
;
assert
(
re2
.
test
(
"
\
na
\
n
"
)
"
Alternative
(
^
a
)
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
nb
\
n
"
)
"
Alternative
(
?
:
^
b
)
should
match
newline
"
)
;
assert
(
!
re2
.
test
(
"
\
nc
\
n
"
)
"
Alternative
(
?
-
m
:
^
c
)
should
not
match
newline
in
modified
group
"
)
;
assert
(
re2
.
test
(
"
\
nd
\
n
"
)
"
Alternative
(
?
:
^
d
)
should
match
newline
"
)
;
assert
(
re2
.
test
(
"
\
ne
\
n
"
)
"
Alternative
(
^
e
)
should
match
newline
"
)
;
reportCompare
(
0
0
)
;
