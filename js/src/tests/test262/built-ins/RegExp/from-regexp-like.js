var
obj
=
{
source
:
'
source
text
'
flags
:
'
i
'
}
;
var
result
;
obj
[
Symbol
.
match
]
=
true
;
result
=
new
RegExp
(
obj
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
result
)
RegExp
.
prototype
)
;
assert
.
sameValue
(
result
.
source
'
source
text
'
)
;
assert
.
sameValue
(
result
.
flags
'
i
'
)
;
obj
[
Symbol
.
match
]
=
'
string
'
;
result
=
new
RegExp
(
obj
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
result
)
RegExp
.
prototype
)
;
assert
.
sameValue
(
result
.
source
'
source
text
'
)
;
assert
.
sameValue
(
result
.
flags
'
i
'
)
;
obj
[
Symbol
.
match
]
=
[
]
;
result
=
new
RegExp
(
obj
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
result
)
RegExp
.
prototype
)
;
assert
.
sameValue
(
result
.
source
'
source
text
'
)
;
assert
.
sameValue
(
result
.
flags
'
i
'
)
;
obj
[
Symbol
.
match
]
=
Symbol
(
)
;
result
=
new
RegExp
(
obj
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
result
)
RegExp
.
prototype
)
;
assert
.
sameValue
(
result
.
source
'
source
text
'
)
;
assert
.
sameValue
(
result
.
flags
'
i
'
)
;
obj
[
Symbol
.
match
]
=
86
;
result
=
new
RegExp
(
obj
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
result
)
RegExp
.
prototype
)
;
assert
.
sameValue
(
result
.
source
'
source
text
'
)
;
assert
.
sameValue
(
result
.
flags
'
i
'
)
;
reportCompare
(
0
0
)
;
