assert
.
sameValue
(
typeof
SharedArrayBuffer
.
prototype
.
grow
"
function
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
undefined
)
;
}
"
this
value
is
undefined
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
null
)
;
}
"
this
value
is
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
true
)
;
}
"
this
value
is
Boolean
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
"
"
)
;
}
"
this
value
is
String
"
)
;
var
symbol
=
Symbol
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
symbol
)
;
}
"
this
value
is
Symbol
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
1
)
;
}
"
this
value
is
Number
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
SharedArrayBuffer
.
prototype
.
grow
.
call
(
1n
)
;
}
"
this
value
is
bigint
"
)
;
reportCompare
(
0
0
)
;
