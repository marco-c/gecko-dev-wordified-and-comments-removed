var
obj1
=
{
valueOf
:
function
(
)
{
return
42
;
}
}
;
var
obj2
=
{
toString
:
function
(
)
{
return
42
;
}
}
;
var
buffer
;
buffer
=
new
SharedArrayBuffer
(
obj1
)
;
assert
.
sameValue
(
buffer
.
byteLength
42
"
object
'
s
valueOf
"
)
;
buffer
=
new
SharedArrayBuffer
(
obj2
)
;
assert
.
sameValue
(
buffer
.
byteLength
42
"
object
'
s
toString
"
)
;
buffer
=
new
SharedArrayBuffer
(
"
"
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
the
Empty
string
"
)
;
buffer
=
new
SharedArrayBuffer
(
"
0
"
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
string
'
0
'
"
)
;
buffer
=
new
SharedArrayBuffer
(
"
1
"
)
;
assert
.
sameValue
(
buffer
.
byteLength
1
"
string
'
1
'
"
)
;
buffer
=
new
SharedArrayBuffer
(
true
)
;
assert
.
sameValue
(
buffer
.
byteLength
1
"
true
"
)
;
buffer
=
new
SharedArrayBuffer
(
false
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
false
"
)
;
buffer
=
new
SharedArrayBuffer
(
NaN
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
NaN
"
)
;
buffer
=
new
SharedArrayBuffer
(
null
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
null
"
)
;
buffer
=
new
SharedArrayBuffer
(
undefined
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
undefined
"
)
;
buffer
=
new
SharedArrayBuffer
(
0
.
1
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
0
.
1
"
)
;
buffer
=
new
SharedArrayBuffer
(
0
.
9
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
0
.
9
"
)
;
buffer
=
new
SharedArrayBuffer
(
1
.
1
)
;
assert
.
sameValue
(
buffer
.
byteLength
1
"
1
.
1
"
)
;
buffer
=
new
SharedArrayBuffer
(
1
.
9
)
;
assert
.
sameValue
(
buffer
.
byteLength
1
"
1
.
9
"
)
;
buffer
=
new
SharedArrayBuffer
(
-
0
.
1
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
-
0
.
1
"
)
;
buffer
=
new
SharedArrayBuffer
(
-
0
.
99999
)
;
assert
.
sameValue
(
buffer
.
byteLength
0
"
-
0
.
99999
"
)
;
reportCompare
(
0
0
)
;
