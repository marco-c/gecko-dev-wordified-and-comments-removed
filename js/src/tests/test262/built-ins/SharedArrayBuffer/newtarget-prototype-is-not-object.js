function
newTarget
(
)
{
}
newTarget
.
prototype
=
undefined
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
1
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
undefined
"
)
;
newTarget
.
prototype
=
null
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
2
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
null
"
)
;
newTarget
.
prototype
=
true
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
3
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
a
Boolean
"
)
;
newTarget
.
prototype
=
"
"
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
4
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
a
String
"
)
;
newTarget
.
prototype
=
Symbol
(
)
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
5
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
a
Symbol
"
)
;
newTarget
.
prototype
=
1
;
var
arrayBuffer
=
Reflect
.
construct
(
SharedArrayBuffer
[
6
]
newTarget
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
arrayBuffer
)
SharedArrayBuffer
.
prototype
"
newTarget
.
prototype
is
a
Number
"
)
;
reportCompare
(
0
0
)
;
