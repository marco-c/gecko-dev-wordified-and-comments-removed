function
testLoad
(
type
name
count
)
{
var
loadFn
=
type
.
fn
[
name
]
;
assert
.
sameValue
(
'
function
'
typeof
loadFn
)
;
var
bufLanes
=
2
*
type
.
lanes
;
var
bufSize
=
bufLanes
*
type
.
laneSize
+
8
;
var
ab
=
new
ArrayBuffer
(
bufSize
)
;
var
buf
=
new
type
.
view
(
ab
)
;
for
(
var
i
=
0
;
i
<
bufLanes
;
i
+
+
)
buf
[
i
]
=
i
;
for
(
var
i
=
0
;
i
<
type
.
lanes
;
i
+
+
)
{
var
a
=
loadFn
(
buf
i
)
;
checkValue
(
type
a
function
(
index
)
{
return
index
<
count
?
i
+
index
:
0
;
}
)
;
}
checkValue
(
type
loadFn
(
buf
"
0
"
)
function
(
index
)
{
return
index
<
count
?
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
"
-
0
.
0
"
)
function
(
index
)
{
return
index
<
count
?
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
"
00
"
)
function
(
index
)
{
return
index
<
count
?
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
false
)
function
(
index
)
{
return
index
<
count
?
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
null
)
function
(
index
)
{
return
index
<
count
?
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
"
01
"
)
function
(
index
)
{
return
index
<
count
?
1
+
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
"
+
1e0
"
)
function
(
index
)
{
return
index
<
count
?
1
+
index
:
0
;
}
)
;
checkValue
(
type
loadFn
(
buf
true
)
function
(
index
)
{
return
index
<
count
?
1
+
index
:
0
;
}
)
;
var
f64
=
new
Float64Array
(
ab
)
;
var
stride
=
8
/
type
.
laneSize
;
for
(
var
i
=
0
;
i
<
1
;
i
+
+
)
{
var
a
=
loadFn
(
f64
i
)
;
checkValue
(
type
a
function
(
index
)
{
return
index
<
count
?
stride
*
i
+
index
:
0
;
}
)
;
}
var
i8
=
new
Int8Array
(
ab
)
;
for
(
var
misalignment
=
1
;
misalignment
<
8
;
misalignment
+
+
)
{
for
(
var
i
=
i8
.
length
-
1
;
i
>
0
;
i
-
-
)
i8
[
i
]
=
i8
[
i
-
1
]
;
var
a
=
loadFn
(
i8
misalignment
)
;
checkValue
(
type
a
function
(
index
)
{
return
index
<
count
?
i
+
index
:
0
;
}
)
;
}
function
testIndexCheck
(
buf
index
err
)
{
assert
.
throws
(
err
function
(
)
{
loadFn
(
buf
index
)
;
}
)
;
}
testIndexCheck
(
buf
-
1
RangeError
)
;
testIndexCheck
(
buf
0
.
7
RangeError
)
;
testIndexCheck
(
buf
-
0
.
1
RangeError
)
;
testIndexCheck
(
buf
NaN
RangeError
)
;
testIndexCheck
(
buf
bufSize
/
type
.
laneSize
-
count
+
1
RangeError
)
;
testIndexCheck
(
buf
.
buffer
1
TypeError
)
;
testIndexCheck
(
buf
"
a
"
RangeError
)
;
}
simdTypes
.
filter
(
isNumerical
)
.
forEach
(
function
(
type
)
{
testSimdFunction
(
type
.
name
+
'
load
'
function
(
)
{
testLoad
(
type
'
load
'
type
.
lanes
)
;
}
)
;
}
)
;
simdTypes
.
filter
(
hasLoadStore123
)
.
forEach
(
function
(
type
)
{
testSimdFunction
(
type
.
name
+
'
load1
'
function
(
)
{
testLoad
(
type
'
load1
'
1
)
;
}
)
;
testSimdFunction
(
type
.
name
+
'
load2
'
function
(
)
{
testLoad
(
type
'
load2
'
2
)
;
}
)
;
testSimdFunction
(
type
.
name
+
'
load3
'
function
(
)
{
testLoad
(
type
'
load3
'
3
)
;
}
)
;
}
)
;
reportCompare
(
0
0
)
;
