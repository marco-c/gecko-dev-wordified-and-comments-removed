var
obj
=
{
valueOf
:
function
(
)
{
return
1
;
}
}
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
sample
;
sample
=
new
TA
(
[
42
43
]
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
"
1
"
)
-
1
"
string
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
"
1
"
)
1
"
string
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
true
)
-
1
"
true
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
true
)
1
"
true
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
false
)
0
"
false
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
false
)
1
"
false
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
NaN
)
0
"
NaN
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
NaN
)
1
"
NaN
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
null
)
0
"
null
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
null
)
1
"
null
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
undefined
)
0
"
undefined
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
undefined
)
1
"
undefined
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
null
)
0
"
null
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
null
)
1
"
null
[
1
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
42
obj
)
-
1
"
object
[
0
]
"
)
;
assert
.
sameValue
(
sample
.
indexOf
(
43
obj
)
1
"
object
[
1
]
"
)
;
}
)
;
reportCompare
(
0
0
)
;
