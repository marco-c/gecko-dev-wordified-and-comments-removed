for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
4
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
0
;
}
}
;
assert
.
compareArray
(
ToNumbers
(
fixedLength
.
subarray
(
evil
1
)
)
[
]
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
4
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
1
;
}
}
;
assert
.
compareArray
(
ToNumbers
(
fixedLength
.
subarray
(
0
evil
)
)
[
]
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
0
;
}
}
;
assert
.
compareArray
(
ToNumbers
(
fixedLength
.
subarray
(
evil
)
)
[
0
2
4
6
]
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
4
;
}
}
;
assert
.
compareArray
(
ToNumbers
(
fixedLength
.
subarray
(
0
evil
)
)
[
0
2
4
6
]
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateRabForTest
(
ctor
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
0
;
}
}
;
assert
.
compareArray
(
ToNumbers
(
lengthTracking
.
subarray
(
evil
lengthTracking
.
length
)
)
[
0
2
4
6
]
)
;
}
reportCompare
(
0
0
)
;
