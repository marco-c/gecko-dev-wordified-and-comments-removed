var
set
=
TypedArray
.
prototype
.
set
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
undefined
[
]
)
;
}
"
this
is
undefined
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
null
[
]
)
;
}
"
this
is
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
undefined
new
Int8Array
(
)
)
;
}
"
this
is
undefined
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
null
new
Int8Array
(
)
)
;
}
"
this
is
null
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
42
[
]
)
;
}
"
this
is
42
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
"
1
"
[
]
)
;
}
"
this
is
a
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
true
[
]
)
;
}
"
this
is
true
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
false
[
]
)
;
}
"
this
is
false
"
)
;
var
s1
=
Symbol
(
"
s
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
s1
[
]
)
;
}
"
this
is
a
Symbol
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
42
new
Int8Array
(
1
)
)
;
}
"
this
is
42
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
"
1
"
new
Int8Array
(
1
)
)
;
}
"
this
is
a
string
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
true
new
Int8Array
(
1
)
)
;
}
"
this
is
true
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
false
new
Int8Array
(
1
)
)
;
}
"
this
is
false
"
)
;
var
s2
=
Symbol
(
"
s
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
set
.
call
(
s2
new
Int8Array
(
1
)
)
;
}
"
this
is
a
Symbol
"
)
;
reportCompare
(
0
0
)
;
