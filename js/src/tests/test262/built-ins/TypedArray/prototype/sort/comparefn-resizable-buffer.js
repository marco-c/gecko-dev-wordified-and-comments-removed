for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taFull
=
new
ctor
(
rab
0
)
;
function
WriteUnsortedData
(
)
{
for
(
let
i
=
0
;
i
<
taFull
.
length
;
+
+
i
)
{
taFull
[
i
]
=
MayNeedBigInt
(
taFull
10
-
i
)
;
}
}
function
OddBeforeEvenComparison
(
a
b
)
{
a
=
Number
(
a
)
;
b
=
Number
(
b
)
;
if
(
a
%
2
=
=
1
&
&
b
%
2
=
=
0
)
{
return
-
1
;
}
if
(
a
%
2
=
=
0
&
&
b
%
2
=
=
1
)
{
return
1
;
}
if
(
a
<
b
)
{
return
-
1
;
}
if
(
a
>
b
)
{
return
1
;
}
return
0
;
}
WriteUnsortedData
(
)
;
fixedLength
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
7
9
8
10
]
)
;
WriteUnsortedData
(
)
;
fixedLengthWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
7
8
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
7
9
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
7
8
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
8
]
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
8
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
9
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
8
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
]
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
]
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
]
)
;
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
}
)
;
lengthTracking
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
]
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
fixedLength
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
7
9
8
10
6
5
]
)
;
WriteUnsortedData
(
)
;
fixedLengthWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
7
8
6
5
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
5
7
9
6
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
OddBeforeEvenComparison
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
5
7
6
8
]
)
;
}
reportCompare
(
0
0
)
;
