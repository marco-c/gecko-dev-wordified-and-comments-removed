for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taFull
=
new
ctor
(
rab
0
)
;
function
WriteUnsortedData
(
)
{
for
(
let
i
=
0
;
i
<
taFull
.
length
;
+
+
i
)
{
taFull
[
i
]
=
MayNeedBigInt
(
taFull
10
-
2
*
i
)
;
}
}
WriteUnsortedData
(
)
;
fixedLength
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
4
6
8
10
]
)
;
WriteUnsortedData
(
)
;
fixedLengthWithOffset
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
8
4
6
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
4
6
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
8
4
6
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
6
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
8
6
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
]
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
sort
(
)
;
}
)
;
rab
.
resize
(
0
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
sort
(
)
;
}
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
]
)
;
WriteUnsortedData
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
sort
(
)
;
}
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteUnsortedData
(
)
;
fixedLength
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
4
6
8
10
2
0
]
)
;
WriteUnsortedData
(
)
;
fixedLengthWithOffset
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
8
4
6
2
0
]
)
;
WriteUnsortedData
(
)
;
lengthTracking
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
0
2
4
6
8
10
]
)
;
WriteUnsortedData
(
)
;
lengthTrackingWithOffset
.
sort
(
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
8
0
2
4
6
]
)
;
}
reportCompare
(
0
0
)
;
