function
CollectWithUndefined
(
values
)
{
return
(
n
ix
ta
)
=
>
{
if
(
typeof
n
=
=
'
bigint
'
)
{
values
.
push
(
Number
(
n
)
)
;
}
else
{
values
.
push
(
n
)
;
}
if
(
ta
instanceof
BigInt64Array
|
|
ta
instanceof
BigUint64Array
)
{
return
0n
;
}
return
0
;
}
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
let
resizeWhenConstructorCalled
=
false
;
class
MyArray
extends
ctor
{
constructor
(
.
.
.
params
)
{
super
(
.
.
.
params
)
;
if
(
resizeWhenConstructorCalled
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
}
}
;
const
fixedLength
=
new
MyArray
(
rab
0
4
)
;
resizeWhenConstructorCalled
=
true
;
const
values
=
[
]
;
fixedLength
.
map
(
CollectWithUndefined
(
values
)
)
;
assert
.
compareArray
(
values
[
undefined
undefined
undefined
undefined
]
)
;
assert
.
sameValue
(
rab
.
byteLength
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
i
)
;
}
let
resizeWhenConstructorCalled
=
false
;
class
MyArray
extends
ctor
{
constructor
(
.
.
.
params
)
{
super
(
.
.
.
params
)
;
if
(
resizeWhenConstructorCalled
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
}
}
;
const
lengthTracking
=
new
MyArray
(
rab
)
;
resizeWhenConstructorCalled
=
true
;
const
values
=
[
]
;
lengthTracking
.
map
(
CollectWithUndefined
(
values
)
)
;
assert
.
compareArray
(
values
[
0
1
undefined
undefined
]
)
;
assert
.
sameValue
(
rab
.
byteLength
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
reportCompare
(
0
0
)
;
