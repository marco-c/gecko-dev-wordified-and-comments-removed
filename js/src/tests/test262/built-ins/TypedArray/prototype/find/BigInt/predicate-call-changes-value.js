testWithBigIntTypedArrayConstructors
(
function
(
TA
)
{
var
arr
=
[
1n
2n
3n
]
;
var
sample
;
var
result
;
sample
=
new
TA
(
3
)
;
sample
.
find
(
function
(
val
i
)
{
sample
[
i
]
=
arr
[
i
]
;
assert
.
sameValue
(
val
0n
"
value
is
not
mapped
to
instance
"
)
;
}
)
;
assert
(
compareArray
(
sample
arr
)
"
values
set
during
each
predicate
call
"
)
;
sample
=
new
TA
(
arr
)
;
result
=
sample
.
find
(
function
(
val
i
)
{
if
(
i
=
=
=
0
)
{
sample
[
2
]
=
7n
;
}
return
val
=
=
=
7n
;
}
)
;
assert
.
sameValue
(
result
7n
"
value
found
"
)
;
sample
=
new
TA
(
arr
)
;
result
=
sample
.
find
(
function
(
val
i
)
{
if
(
i
=
=
=
0
)
{
sample
[
2
]
=
7n
;
}
return
val
=
=
=
3n
;
}
)
;
assert
.
sameValue
(
result
undefined
"
value
not
found
"
)
;
sample
=
new
TA
(
arr
)
;
result
=
sample
.
find
(
function
(
val
i
)
{
if
(
i
>
0
)
{
sample
[
0
]
=
7n
;
}
return
val
=
=
=
7n
;
}
)
;
assert
.
sameValue
(
result
undefined
"
value
not
found
-
changed
after
call
"
)
;
sample
=
new
TA
(
arr
)
;
result
=
sample
.
find
(
function
(
)
{
sample
[
0
]
=
7n
;
return
true
;
}
)
;
assert
.
sameValue
(
result
1n
"
find
(
)
returns
previous
found
value
"
)
;
}
)
;
reportCompare
(
0
0
)
;
