testWithBigIntTypedArrayConstructors
(
function
(
TA
)
{
var
sample
=
new
TA
(
[
1n
2n
3n
]
)
;
var
called
=
0
;
var
result
=
sample
.
findIndex
(
function
(
)
{
called
+
+
;
return
false
;
}
)
;
assert
.
sameValue
(
called
3
"
predicate
was
called
three
times
"
)
;
assert
.
sameValue
(
result
-
1
"
result
is
-
1
when
predicate
returns
are
false
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
"
"
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
string
)
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
undefined
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
undefined
)
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
null
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
null
)
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
0
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
0
)
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
-
0
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
-
0
)
"
)
;
result
=
sample
.
findIndex
(
function
(
)
{
return
NaN
;
}
)
;
assert
.
sameValue
(
result
-
1
"
ToBoolean
(
NaN
)
"
)
;
}
)
;
reportCompare
(
0
0
)
;
