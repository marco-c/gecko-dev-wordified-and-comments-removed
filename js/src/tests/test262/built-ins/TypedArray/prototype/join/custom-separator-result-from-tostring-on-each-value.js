var
arr
=
[
-
2
Infinity
NaN
-
Infinity
0
.
6
9007199254740992
]
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
sample
=
new
TA
(
arr
)
;
var
result
separator
expected
;
separator
=
"
"
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
)
;
separator
=
undefined
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
null
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
"
"
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
0
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
"
"
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
"
a
b
c
"
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
{
}
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
{
toString
:
function
(
)
{
return
"
foo
"
;
}
}
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
{
toString
:
undefined
valueOf
:
function
(
)
{
return
"
bar
"
;
}
}
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
true
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
false
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
1
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
separator
=
0
;
expected
=
arr
.
map
(
function
(
_
i
)
{
return
sample
[
i
]
.
toString
(
)
;
}
)
.
join
(
separator
)
;
result
=
sample
.
join
(
separator
)
;
assert
.
sameValue
(
result
expected
"
using
:
"
+
separator
)
;
}
)
;
reportCompare
(
0
0
)
;
