for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
function
listToString
(
list
)
{
const
comma
=
[
'
'
'
'
]
.
toLocaleString
(
)
;
const
len
=
list
.
length
;
let
result
=
'
'
;
if
(
len
>
1
)
{
for
(
let
i
=
0
;
i
<
len
-
1
;
i
+
+
)
{
result
+
=
list
[
i
]
+
comma
;
}
}
if
(
len
>
0
)
{
result
+
=
list
[
len
-
1
]
;
}
return
result
;
}
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
sameValue
(
fixedLength
.
toLocaleString
(
)
listToString
(
[
0
2
4
6
]
)
)
;
assert
.
sameValue
(
fixedLengthWithOffset
.
toLocaleString
(
)
listToString
(
[
4
6
]
)
)
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
0
2
4
6
]
)
)
;
assert
.
sameValue
(
lengthTrackingWithOffset
.
toLocaleString
(
)
listToString
(
[
4
6
]
)
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
toLocaleString
(
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
toLocaleString
(
)
;
}
)
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
0
2
4
]
)
)
;
assert
.
sameValue
(
lengthTrackingWithOffset
.
toLocaleString
(
)
listToString
(
[
4
]
)
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
toLocaleString
(
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
toLocaleString
(
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
toLocaleString
(
)
;
}
)
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
0
]
)
)
;
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
toLocaleString
(
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
toLocaleString
(
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
toLocaleString
(
)
;
}
)
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
]
)
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
sameValue
(
fixedLength
.
toLocaleString
(
)
listToString
(
[
0
2
4
6
]
)
)
;
assert
.
sameValue
(
fixedLengthWithOffset
.
toLocaleString
(
)
listToString
(
[
4
6
]
)
)
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
0
2
4
6
8
10
]
)
)
;
assert
.
sameValue
(
lengthTrackingWithOffset
.
toLocaleString
(
)
listToString
(
[
4
6
8
10
]
)
)
;
}
reportCompare
(
0
0
)
;
