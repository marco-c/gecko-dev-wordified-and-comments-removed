const
oldNumberPrototypeToLocaleString
=
Number
.
prototype
.
toLocaleString
;
const
oldBigIntPrototypeToLocaleString
=
BigInt
.
prototype
.
toLocaleString
;
function
listToString
(
list
)
{
const
comma
=
[
'
'
'
'
]
.
toLocaleString
(
)
;
const
len
=
list
.
length
;
let
result
=
'
'
;
if
(
len
>
1
)
{
for
(
let
i
=
0
;
i
<
len
-
1
;
i
+
+
)
{
result
+
=
list
[
i
]
+
comma
;
}
}
if
(
len
>
0
)
{
result
+
=
list
[
len
-
1
]
;
}
return
result
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
let
resizeAfter
=
2
;
Number
.
prototype
.
toLocaleString
=
function
(
)
{
-
-
resizeAfter
;
if
(
resizeAfter
=
=
0
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
return
oldNumberPrototypeToLocaleString
.
call
(
this
)
;
}
;
BigInt
.
prototype
.
toLocaleString
=
function
(
)
{
-
-
resizeAfter
;
if
(
resizeAfter
=
=
0
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
return
oldBigIntPrototypeToLocaleString
.
call
(
this
)
;
}
;
assert
.
sameValue
(
fixedLength
.
toLocaleString
(
)
listToString
(
[
0
0
'
'
'
'
]
)
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
lengthTracking
=
new
ctor
(
rab
)
;
let
resizeAfter
=
2
;
Number
.
prototype
.
toLocaleString
=
function
(
)
{
-
-
resizeAfter
;
if
(
resizeAfter
=
=
0
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
return
oldNumberPrototypeToLocaleString
.
call
(
this
)
;
}
;
BigInt
.
prototype
.
toLocaleString
=
function
(
)
{
-
-
resizeAfter
;
if
(
resizeAfter
=
=
0
)
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
}
return
oldBigIntPrototypeToLocaleString
.
call
(
this
)
;
}
;
assert
.
sameValue
(
lengthTracking
.
toLocaleString
(
)
listToString
(
[
0
0
'
'
'
'
]
)
)
;
}
Number
.
prototype
.
toLocaleString
=
oldNumberPrototypeToLocaleString
;
BigInt
.
prototype
.
toLocaleString
=
oldBigIntPrototypeToLocaleString
;
reportCompare
(
0
0
)
;
