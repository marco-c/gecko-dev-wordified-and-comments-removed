for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
lengthTracking
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
WriteToTypedArray
(
lengthTracking
i
i
)
;
}
const
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteToTypedArray
(
lengthTracking
4
4
)
;
WriteToTypedArray
(
lengthTracking
5
5
)
;
return
0
;
}
}
;
lengthTracking
.
copyWithin
(
evil
2
)
;
assert
.
compareArray
(
ToNumbers
(
lengthTracking
)
[
2
3
2
3
4
5
]
)
;
rab
.
resize
(
4
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
WriteToTypedArray
(
lengthTracking
i
i
)
;
}
lengthTracking
.
copyWithin
(
2
evil
)
;
assert
.
compareArray
(
ToNumbers
(
lengthTracking
)
[
0
1
0
1
4
5
]
)
;
}
reportCompare
(
0
0
)
;
