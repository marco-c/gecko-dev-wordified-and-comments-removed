for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
let
n2
=
MayNeedBigInt
(
fixedLength
2
)
;
let
n4
=
MayNeedBigInt
(
fixedLength
4
)
;
assert
(
fixedLength
.
includes
(
n2
)
)
;
assert
(
!
fixedLength
.
includes
(
undefined
)
)
;
assert
(
fixedLength
.
includes
(
n2
1
)
)
;
assert
(
!
fixedLength
.
includes
(
n2
2
)
)
;
assert
(
fixedLength
.
includes
(
n2
-
3
)
)
;
assert
(
!
fixedLength
.
includes
(
n2
-
2
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
n2
)
)
;
assert
(
fixedLengthWithOffset
.
includes
(
n4
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
undefined
)
)
;
assert
(
fixedLengthWithOffset
.
includes
(
n4
0
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
n4
1
)
)
;
assert
(
fixedLengthWithOffset
.
includes
(
n4
-
2
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
n4
-
1
)
)
;
assert
(
lengthTracking
.
includes
(
n2
)
)
;
assert
(
!
lengthTracking
.
includes
(
undefined
)
)
;
assert
(
lengthTracking
.
includes
(
n2
1
)
)
;
assert
(
!
lengthTracking
.
includes
(
n2
2
)
)
;
assert
(
lengthTracking
.
includes
(
n2
-
3
)
)
;
assert
(
!
lengthTracking
.
includes
(
n2
-
2
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
n2
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n4
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
undefined
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n4
0
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
n4
1
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n4
-
2
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
n4
-
1
)
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
includes
(
n2
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
includes
(
n2
)
;
}
)
;
assert
(
lengthTracking
.
includes
(
n2
)
)
;
assert
(
!
lengthTracking
.
includes
(
undefined
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
n2
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n4
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
undefined
)
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
includes
(
n2
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
includes
(
n2
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
includes
(
n2
)
;
}
)
;
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
includes
(
n2
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
includes
(
n2
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
includes
(
n2
)
;
}
)
;
assert
(
!
lengthTracking
.
includes
(
n2
)
)
;
assert
(
!
lengthTracking
.
includes
(
undefined
)
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
let
n8
=
MayNeedBigInt
(
fixedLength
8
)
;
assert
(
fixedLength
.
includes
(
n2
)
)
;
assert
(
!
fixedLength
.
includes
(
undefined
)
)
;
assert
(
!
fixedLength
.
includes
(
n8
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
n2
)
)
;
assert
(
fixedLengthWithOffset
.
includes
(
n4
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
undefined
)
)
;
assert
(
!
fixedLengthWithOffset
.
includes
(
n8
)
)
;
assert
(
lengthTracking
.
includes
(
n2
)
)
;
assert
(
!
lengthTracking
.
includes
(
undefined
)
)
;
assert
(
lengthTracking
.
includes
(
n8
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
n2
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n4
)
)
;
assert
(
!
lengthTrackingWithOffset
.
includes
(
undefined
)
)
;
assert
(
lengthTrackingWithOffset
.
includes
(
n8
)
)
;
}
reportCompare
(
0
0
)
;
