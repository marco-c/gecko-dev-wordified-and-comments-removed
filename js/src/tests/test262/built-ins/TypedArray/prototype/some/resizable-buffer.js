for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
function
div3
(
n
)
{
return
Number
(
n
)
%
3
=
=
0
;
}
function
over10
(
n
)
{
return
Number
(
n
)
>
10
;
}
assert
(
fixedLength
.
some
(
div3
)
)
;
assert
(
!
fixedLength
.
some
(
over10
)
)
;
assert
(
fixedLengthWithOffset
.
some
(
div3
)
)
;
assert
(
!
fixedLengthWithOffset
.
some
(
over10
)
)
;
assert
(
lengthTracking
.
some
(
div3
)
)
;
assert
(
!
lengthTracking
.
some
(
over10
)
)
;
assert
(
lengthTrackingWithOffset
.
some
(
div3
)
)
;
assert
(
!
lengthTrackingWithOffset
.
some
(
over10
)
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
some
(
div3
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
some
(
div3
)
;
}
)
;
assert
(
lengthTracking
.
some
(
div3
)
)
;
assert
(
!
lengthTracking
.
some
(
over10
)
)
;
assert
(
!
lengthTrackingWithOffset
.
some
(
div3
)
)
;
assert
(
!
lengthTrackingWithOffset
.
some
(
over10
)
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
some
(
div3
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
some
(
div3
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
some
(
div3
)
;
}
)
;
assert
(
lengthTracking
.
some
(
div3
)
)
;
assert
(
!
lengthTracking
.
some
(
over10
)
)
;
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLength
.
some
(
div3
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
fixedLengthWithOffset
.
some
(
div3
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
lengthTrackingWithOffset
.
some
(
div3
)
;
}
)
;
assert
(
!
lengthTracking
.
some
(
div3
)
)
;
assert
(
!
lengthTracking
.
some
(
over10
)
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
(
fixedLength
.
some
(
div3
)
)
;
assert
(
!
fixedLength
.
some
(
over10
)
)
;
assert
(
fixedLengthWithOffset
.
some
(
div3
)
)
;
assert
(
!
fixedLengthWithOffset
.
some
(
over10
)
)
;
assert
(
lengthTracking
.
some
(
div3
)
)
;
assert
(
!
lengthTracking
.
some
(
over10
)
)
;
assert
(
lengthTrackingWithOffset
.
some
(
div3
)
)
;
assert
(
!
lengthTrackingWithOffset
.
some
(
over10
)
)
;
}
reportCompare
(
0
0
)
;
