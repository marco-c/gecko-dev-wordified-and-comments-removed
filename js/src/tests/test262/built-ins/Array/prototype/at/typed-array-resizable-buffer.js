function
ArrayAtHelper
(
ta
index
)
{
const
result
=
Array
.
prototype
.
at
.
call
(
ta
index
)
;
return
Convert
(
result
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
let
ta_write
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
ta_write
[
i
]
=
MayNeedBigInt
(
ta_write
i
)
;
}
assert
.
sameValue
(
ArrayAtHelper
(
fixedLength
-
1
)
3
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTracking
-
1
)
3
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLengthWithOffset
-
1
)
3
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTrackingWithOffset
-
1
)
3
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLength
-
1
)
undefined
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLengthWithOffset
-
1
)
undefined
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTracking
-
1
)
2
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTrackingWithOffset
-
1
)
2
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLength
-
1
)
undefined
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLengthWithOffset
-
1
)
undefined
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTrackingWithOffset
-
1
)
undefined
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTracking
-
1
)
0
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLength
-
1
)
0
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTracking
-
1
)
0
)
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLengthWithOffset
-
1
)
0
)
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTrackingWithOffset
-
1
)
0
)
;
}
reportCompare
(
0
0
)
;
