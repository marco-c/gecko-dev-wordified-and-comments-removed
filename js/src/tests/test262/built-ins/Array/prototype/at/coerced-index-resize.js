function
ArrayAtHelper
(
ta
index
)
{
return
Array
.
prototype
.
at
.
call
(
ta
index
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
let
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
2
)
;
return
0
;
}
}
;
assert
.
sameValue
(
ArrayAtHelper
(
fixedLength
evil
)
undefined
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
lengthTracking
=
new
ctor
(
rab
)
;
let
evil
=
{
valueOf
:
(
)
=
>
{
rab
.
resize
(
2
)
;
return
-
1
;
}
}
;
assert
.
sameValue
(
ArrayAtHelper
(
lengthTracking
evil
)
undefined
)
;
}
reportCompare
(
0
0
)
;
