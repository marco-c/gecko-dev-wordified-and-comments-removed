for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
taWrite
.
length
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
function
MapGatherCompare
(
array
)
{
const
values
=
[
]
;
function
GatherValues
(
n
ix
)
{
assert
.
sameValue
(
ix
values
.
length
)
;
values
.
push
(
n
)
;
if
(
typeof
n
=
=
'
bigint
'
)
{
return
n
+
1n
;
}
return
n
+
1
;
}
const
newValues
=
Array
.
prototype
.
map
.
call
(
array
GatherValues
)
;
for
(
let
i
=
0
;
i
<
values
.
length
;
+
+
i
)
{
if
(
typeof
values
[
i
]
=
=
'
bigint
'
)
{
assert
.
sameValue
(
values
[
i
]
+
1n
newValues
[
i
]
)
;
}
else
{
assert
.
sameValue
(
values
[
i
]
+
1
newValues
[
i
]
)
;
}
}
return
ToNumbers
(
values
)
;
}
assert
.
compareArray
(
MapGatherCompare
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTracking
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTrackingWithOffset
)
[
4
6
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTracking
)
[
0
2
4
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTrackingWithOffset
)
[
4
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTrackingWithOffset
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTracking
)
[
0
]
)
;
rab
.
resize
(
0
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTrackingWithOffset
)
[
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTracking
)
[
]
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
compareArray
(
MapGatherCompare
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTracking
)
[
0
2
4
6
8
10
]
)
;
assert
.
compareArray
(
MapGatherCompare
(
lengthTrackingWithOffset
)
[
4
6
8
10
]
)
;
}
reportCompare
(
0
0
)
;
