function
ArrayEntriesHelper
(
ta
)
{
return
Array
.
prototype
.
entries
.
call
(
ta
)
;
}
function
ValuesFromArrayEntries
(
ta
)
{
let
result
=
[
]
;
let
expectedKey
=
0
;
for
(
let
[
key
value
]
of
Array
.
prototype
.
entries
.
call
(
ta
)
)
{
assert
.
sameValue
(
key
expectedKey
'
TypedArray
method
.
entries
should
return
expectedKey
.
'
)
;
+
+
expectedKey
;
result
.
push
(
Number
(
value
)
)
;
}
return
result
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
compareArray
(
ValuesFromArrayEntries
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTracking
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTrackingWithOffset
)
[
4
6
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
ArrayEntriesHelper
(
fixedLength
)
;
ArrayEntriesHelper
(
fixedLengthWithOffset
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLength
)
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLengthWithOffset
)
)
;
}
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTracking
)
[
0
2
4
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTrackingWithOffset
)
[
4
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
ArrayEntriesHelper
(
fixedLength
)
;
ArrayEntriesHelper
(
fixedLengthWithOffset
)
;
ArrayEntriesHelper
(
lengthTrackingWithOffset
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLength
)
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLengthWithOffset
)
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
lengthTrackingWithOffset
)
)
;
}
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTracking
)
[
0
]
)
;
rab
.
resize
(
0
)
;
ArrayEntriesHelper
(
fixedLength
)
;
ArrayEntriesHelper
(
fixedLengthWithOffset
)
;
ArrayEntriesHelper
(
lengthTrackingWithOffset
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLength
)
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
fixedLengthWithOffset
)
)
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
Array
.
from
(
ArrayEntriesHelper
(
lengthTrackingWithOffset
)
)
;
}
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTracking
)
[
]
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
compareArray
(
ValuesFromArrayEntries
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTracking
)
[
0
2
4
6
8
10
]
)
;
assert
.
compareArray
(
ValuesFromArrayEntries
(
lengthTrackingWithOffset
)
[
4
6
8
10
]
)
;
}
reportCompare
(
0
0
)
;
