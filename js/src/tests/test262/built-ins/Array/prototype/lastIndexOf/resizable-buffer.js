for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
Math
.
floor
(
i
/
2
)
)
;
}
let
n0
=
MayNeedBigInt
(
fixedLength
0
)
;
let
n1
=
MayNeedBigInt
(
fixedLength
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
2
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
-
2
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
-
3
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n1
1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n1
-
2
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n1
-
3
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n1
-
2
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n1
-
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
2
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
-
3
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n1
1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n1
2
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n1
-
3
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
-
2
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
-
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
)
0
)
;
rab
.
resize
(
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
Math
.
floor
(
i
/
2
)
)
;
}
let
n2
=
MayNeedBigInt
(
fixedLength
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n1
)
3
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
n2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLength
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
n2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
fixedLengthWithOffset
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n1
)
3
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
n2
)
5
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
n2
)
3
)
;
assert
.
sameValue
(
Array
.
prototype
.
lastIndexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
}
reportCompare
(
0
0
)
;
