assert
.
sameValue
(
typeof
ArrayBuffer
.
prototype
.
resize
'
function
'
)
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
BPE
=
TA
.
BYTES_PER_ELEMENT
;
var
buffer
=
new
ArrayBuffer
(
BPE
*
3
{
maxByteLength
:
BPE
*
4
}
)
;
var
sample
=
new
TA
(
buffer
)
;
var
secondElement
expectedElements
expectedIndices
expectedArrays
;
var
elements
indices
arrays
result
;
elements
=
[
]
;
indices
=
[
]
;
arrays
=
[
]
;
result
=
Array
.
prototype
.
findLast
.
call
(
sample
function
(
element
index
array
)
{
if
(
elements
.
length
=
=
=
0
)
{
try
{
buffer
.
resize
(
BPE
)
;
secondElement
=
undefined
;
expectedElements
=
[
0
]
;
expectedIndices
=
[
0
]
;
expectedArrays
=
[
sample
]
;
}
catch
(
_
)
{
secondElement
=
0
;
expectedElements
=
[
0
0
0
]
;
expectedIndices
=
[
2
1
0
]
;
expectedArrays
=
[
sample
sample
sample
]
;
}
}
elements
.
push
(
element
)
;
indices
.
push
(
index
)
;
arrays
.
push
(
array
)
;
return
false
;
}
)
;
assert
.
compareArray
(
elements
[
0
secondElement
0
]
'
elements
(
shrink
)
'
)
;
assert
.
compareArray
(
indices
[
2
1
0
]
'
indices
(
shrink
)
'
)
;
assert
.
compareArray
(
arrays
[
sample
sample
sample
]
'
arrays
(
shrink
)
'
)
;
assert
.
sameValue
(
result
undefined
'
result
(
shrink
)
'
)
;
elements
=
[
]
;
indices
=
[
]
;
arrays
=
[
]
;
result
=
Array
.
prototype
.
findLast
.
call
(
sample
function
(
element
index
array
)
{
if
(
elements
.
length
=
=
=
0
)
{
try
{
buffer
.
resize
(
4
*
BPE
)
;
}
catch
(
_
)
{
}
}
elements
.
push
(
element
)
;
indices
.
push
(
index
)
;
arrays
.
push
(
array
)
;
return
false
;
}
)
;
assert
.
compareArray
(
elements
expectedElements
'
elements
(
grow
)
'
)
;
assert
.
compareArray
(
indices
expectedIndices
'
indices
(
grow
)
'
)
;
assert
.
compareArray
(
arrays
expectedArrays
'
arrays
(
grow
)
'
)
;
assert
.
sameValue
(
result
undefined
'
result
(
grow
)
'
)
;
}
)
;
reportCompare
(
0
0
)
;
