function
same
(
e
)
{
return
e
;
}
var
ta
;
var
actual
;
ta
=
new
Int32Array
(
[
1
0
42
]
)
;
Object
.
defineProperty
(
ta
'
constructor
'
{
get
(
)
{
throw
"
it
should
not
object
the
typedarray
ctor
"
;
}
}
)
;
actual
=
[
]
.
flatMap
.
call
(
ta
same
)
;
assert
.
compareArray
(
actual
[
1
0
42
]
'
The
value
of
actual
is
expected
to
be
[
1
0
42
]
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
actual
)
Array
.
prototype
'
Object
.
getPrototypeOf
(
[
]
.
flatMap
.
call
(
ta
same
)
"
)
returns
Array
.
prototype
'
)
;
assert
.
sameValue
(
actual
instanceof
Int32Array
false
'
The
result
of
evaluating
(
actual
instanceof
Int32Array
)
is
expected
to
be
false
'
)
;
ta
=
new
Int32Array
(
0
)
;
Object
.
defineProperty
(
ta
'
constructor
'
{
get
(
)
{
throw
"
it
should
not
object
the
typedarray
ctor
"
;
}
}
)
;
actual
=
[
]
.
flatMap
.
call
(
ta
same
)
;
assert
.
compareArray
(
actual
[
]
'
The
value
of
actual
is
expected
to
be
[
]
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
actual
)
Array
.
prototype
'
Object
.
getPrototypeOf
(
[
]
.
flatMap
.
call
(
ta
same
)
"
)
returns
Array
.
prototype
'
)
;
assert
.
sameValue
(
actual
instanceof
Int32Array
false
'
The
result
of
evaluating
(
actual
instanceof
Int32Array
)
is
expected
to
be
false
'
)
;
reportCompare
(
0
0
)
;
