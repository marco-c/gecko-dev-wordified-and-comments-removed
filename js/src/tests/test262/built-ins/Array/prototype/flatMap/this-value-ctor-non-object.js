assert
.
sameValue
(
typeof
Array
.
prototype
.
flatMap
'
function
'
'
The
value
of
typeof
Array
.
prototype
.
flatMap
is
expected
to
be
"
function
"
'
)
;
var
a
=
[
]
;
var
mapperFn
=
function
(
)
{
}
;
a
.
constructor
=
null
;
assert
.
throws
(
TypeError
function
(
)
{
a
.
flatMap
(
mapperFn
)
;
}
'
a
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
a
=
[
]
;
a
.
constructor
=
1
;
assert
.
throws
(
TypeError
function
(
)
{
a
.
flatMap
(
mapperFn
)
;
}
'
a
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
a
=
[
]
;
a
.
constructor
=
'
string
'
;
assert
.
throws
(
TypeError
function
(
)
{
a
.
flatMap
(
mapperFn
)
;
}
'
a
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
a
=
[
]
;
a
.
constructor
=
true
;
assert
.
throws
(
TypeError
function
(
)
{
a
.
flatMap
(
mapperFn
)
;
}
'
a
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
a
=
[
]
;
a
.
constructor
=
Symbol
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
a
.
flatMap
(
mapperFn
)
;
}
'
a
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
a
=
[
]
;
a
.
constructor
=
undefined
;
var
actual
=
a
.
flatMap
(
mapperFn
)
;
assert
.
compareArray
(
actual
[
]
'
The
value
of
actual
is
expected
to
be
[
]
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
actual
)
Array
.
prototype
'
Object
.
getPrototypeOf
(
a
.
flatMap
(
mapperFn
)
)
returns
Array
.
prototype
'
)
;
assert
.
notSameValue
(
actual
a
'
The
value
of
actual
is
expected
to
not
equal
the
value
of
a
'
)
;
reportCompare
(
0
0
)
;
