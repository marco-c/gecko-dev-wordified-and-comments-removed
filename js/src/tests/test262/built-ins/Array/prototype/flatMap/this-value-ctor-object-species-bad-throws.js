assert
.
sameValue
(
typeof
Array
.
prototype
.
flatMap
'
function
'
'
The
value
of
typeof
Array
.
prototype
.
flatMap
is
expected
to
be
"
function
"
'
)
;
var
arr
=
[
[
42
1
]
[
42
2
]
]
;
var
mapperFn
=
function
(
e
)
{
return
e
;
}
;
arr
.
constructor
=
{
}
;
var
actual
=
arr
.
flatMap
(
mapperFn
)
;
assert
.
compareArray
(
actual
[
42
1
42
2
]
'
The
value
of
actual
is
expected
to
be
[
42
1
42
2
]
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
actual
)
Array
.
prototype
'
Object
.
getPrototypeOf
(
arr
.
flatMap
(
mapperFn
)
)
returns
Array
.
prototype
'
)
;
var
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
0
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
'
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
false
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
{
}
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
[
]
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
Symbol
(
)
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
TypeError
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
called
=
0
;
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
throw
new
Test262Error
}
}
;
assert
.
throws
(
Test262Error
function
(
)
{
arr
.
flatMap
(
mapperFn
)
;
}
'
arr
.
flatMap
(
mapperFn
)
throws
a
Test262Error
exception
'
)
;
assert
.
sameValue
(
called
1
'
The
value
of
called
is
expected
to
be
1
'
)
;
reportCompare
(
0
0
)
;
