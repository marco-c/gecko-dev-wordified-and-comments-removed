assert
.
sameValue
(
typeof
Array
.
prototype
.
flatMap
'
function
'
)
;
var
arr
=
[
[
42
1
]
[
42
2
]
]
;
var
mapperFn
=
function
(
e
)
{
return
e
;
}
;
var
called
=
0
;
var
ctorCalled
=
0
;
function
ctor
(
len
)
{
assert
.
sameValue
(
new
.
target
ctor
'
new
target
is
defined
'
)
;
assert
.
sameValue
(
len
0
'
first
argument
is
always
0
'
)
;
ctorCalled
+
+
;
}
arr
.
constructor
=
{
get
[
Symbol
.
species
]
(
)
{
called
+
+
;
return
ctor
;
}
}
;
var
actual
=
arr
.
flatMap
(
mapperFn
)
;
assert
(
actual
instanceof
ctor
'
returned
value
is
an
instance
of
custom
ctor
'
)
;
assert
.
sameValue
(
called
1
'
got
species
once
'
)
;
assert
.
sameValue
(
ctorCalled
1
'
called
custom
ctor
once
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
hasOwnProperty
.
call
(
actual
'
length
'
)
false
'
it
does
not
define
an
own
length
property
'
)
;
verifyProperty
(
actual
'
0
'
{
configurable
:
true
writable
:
true
enumerable
:
true
value
:
42
}
)
;
verifyProperty
(
actual
'
1
'
{
configurable
:
true
writable
:
true
enumerable
:
true
value
:
1
}
)
;
verifyProperty
(
actual
'
2
'
{
configurable
:
true
writable
:
true
enumerable
:
true
value
:
42
}
)
;
verifyProperty
(
actual
'
3
'
{
configurable
:
true
writable
:
true
enumerable
:
true
value
:
2
}
)
;
reportCompare
(
0
0
)
;
