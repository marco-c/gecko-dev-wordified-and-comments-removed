function
MayNeedBigInt
(
ta
n
)
{
if
(
typeof
n
=
=
'
number
'
&
&
(
ta
instanceof
BigInt64Array
|
|
ta
instanceof
BigUint64Array
)
)
{
return
BigInt
(
n
)
;
}
return
n
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
WriteToTypedArray
(
taWrite
i
2
*
i
)
;
}
let
n2
=
MayNeedBigInt
(
fixedLength
2
)
;
let
n4
=
MayNeedBigInt
(
fixedLength
4
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
1
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
-
3
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
-
2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
0
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
1
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
-
2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
-
1
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
1
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
-
3
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
-
2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
0
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
1
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
-
2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
-
1
)
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
undefined
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
undefined
)
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n2
)
)
;
rab
.
resize
(
0
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
undefined
)
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
WriteToTypedArray
(
taWrite
i
2
*
i
)
;
}
let
n8
=
MayNeedBigInt
(
fixedLength
8
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLength
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
undefined
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLength
n8
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n4
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
undefined
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
fixedLengthWithOffset
n8
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n2
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTracking
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTracking
n8
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n2
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n4
)
)
;
assert
(
!
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
undefined
)
)
;
assert
(
Array
.
prototype
.
includes
.
call
(
lengthTrackingWithOffset
n8
)
)
;
}
reportCompare
(
0
0
)
;
