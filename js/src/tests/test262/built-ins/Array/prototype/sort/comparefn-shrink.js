function
ResizeAndCompare
(
rab
resizeTo
)
{
return
(
a
b
)
=
>
{
rab
.
resize
(
resizeTo
)
;
if
(
a
<
b
)
{
return
-
1
;
}
if
(
a
>
b
)
{
return
1
;
}
return
0
;
}
}
function
WriteUnsortedData
(
taFull
)
{
for
(
let
i
=
0
;
i
<
taFull
.
length
;
+
+
i
)
{
taFull
[
i
]
=
MayNeedBigInt
(
taFull
10
-
i
)
;
}
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
resizeTo
=
2
*
ctor
.
BYTES_PER_ELEMENT
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
taFull
=
new
ctor
(
rab
0
)
;
WriteUnsortedData
(
taFull
)
;
Array
.
prototype
.
sort
.
call
(
fixedLength
ResizeAndCompare
(
rab
resizeTo
)
)
;
assert
.
compareArray
(
ToNumbers
(
taFull
)
[
10
9
]
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
resizeTo
=
2
*
ctor
.
BYTES_PER_ELEMENT
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
taFull
=
new
ctor
(
rab
0
)
;
WriteUnsortedData
(
taFull
)
;
Array
.
prototype
.
sort
.
call
(
lengthTracking
ResizeAndCompare
(
rab
resizeTo
)
)
;
const
newData
=
ToNumbers
(
taFull
)
;
assert
.
sameValue
(
newData
.
length
2
)
;
assert
(
[
10
9
8
7
]
.
includes
(
newData
[
0
]
)
)
;
assert
(
[
10
9
8
7
]
.
includes
(
newData
[
1
]
)
)
;
}
reportCompare
(
0
0
)
;
