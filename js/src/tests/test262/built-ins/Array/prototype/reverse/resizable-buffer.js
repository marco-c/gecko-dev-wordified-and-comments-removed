for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
wholeArrayView
=
new
ctor
(
rab
)
;
function
WriteData
(
)
{
for
(
let
i
=
0
;
i
<
wholeArrayView
.
length
;
+
+
i
)
{
WriteToTypedArray
(
wholeArrayView
i
2
*
i
)
;
}
}
WriteData
(
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLength
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
6
4
2
0
]
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLengthWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
6
4
0
2
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTracking
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
2
0
4
6
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTrackingWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
2
0
6
4
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteData
(
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLength
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
2
4
]
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLengthWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
2
4
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTracking
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
4
2
0
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTrackingWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
4
2
0
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteData
(
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLength
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
]
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLengthWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTrackingWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTracking
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
0
]
)
;
rab
.
resize
(
0
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLength
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
]
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLengthWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTrackingWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTracking
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
]
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
WriteData
(
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLength
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
6
4
2
0
8
10
]
)
;
Array
.
prototype
.
reverse
.
call
(
fixedLengthWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
6
4
0
2
8
10
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTracking
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
10
8
2
0
4
6
]
)
;
Array
.
prototype
.
reverse
.
call
(
lengthTrackingWithOffset
)
;
assert
.
compareArray
(
ToNumbers
(
wholeArrayView
)
[
10
8
6
4
0
2
]
)
;
}
reportCompare
(
0
0
)
;
