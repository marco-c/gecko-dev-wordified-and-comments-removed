function
MayNeedBigInt
(
ta
n
)
{
if
(
typeof
n
=
=
'
number
'
&
&
(
ta
instanceof
BigInt64Array
|
|
ta
instanceof
BigUint64Array
)
)
{
return
BigInt
(
n
)
;
}
return
n
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
WriteToTypedArray
(
taWrite
i
Math
.
floor
(
i
/
2
)
)
;
}
let
n0
=
MayNeedBigInt
(
fixedLength
0
)
;
let
n1
=
MayNeedBigInt
(
fixedLength
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
-
2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
-
3
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n1
1
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n1
-
3
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n1
-
2
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n1
-
2
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n1
-
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n0
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n0
2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n1
-
3
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n1
1
)
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n1
-
2
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n1
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n1
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n0
)
0
)
;
rab
.
resize
(
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
WriteToTypedArray
(
taWrite
i
Math
.
floor
(
i
/
2
)
)
;
}
let
n2
=
MayNeedBigInt
(
fixedLength
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n1
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
n2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLength
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
n2
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
fixedLengthWithOffset
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n1
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
n2
)
4
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTracking
undefined
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n0
)
-
1
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n1
)
0
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
n2
)
2
)
;
assert
.
sameValue
(
Array
.
prototype
.
indexOf
.
call
(
lengthTrackingWithOffset
undefined
)
-
1
)
;
}
reportCompare
(
0
0
)
;
