let
values
;
let
rab
;
let
resizeAfter
;
let
resizeTo
;
function
ResizeMidIteration
(
acc
n
)
{
return
CollectValuesAndResize
(
n
values
rab
resizeAfter
resizeTo
)
;
}
for
(
let
ctor
of
ctors
)
{
values
=
[
]
;
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
resizeAfter
=
2
;
resizeTo
=
3
*
ctor
.
BYTES_PER_ELEMENT
;
Array
.
prototype
.
reduce
.
call
(
fixedLength
ResizeMidIteration
'
initial
value
'
)
;
assert
.
compareArray
(
values
[
0
2
]
)
;
}
for
(
let
ctor
of
ctors
)
{
values
=
[
]
;
rab
=
CreateRabForTest
(
ctor
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
resizeAfter
=
1
;
resizeTo
=
3
*
ctor
.
BYTES_PER_ELEMENT
;
Array
.
prototype
.
reduce
.
call
(
fixedLengthWithOffset
ResizeMidIteration
'
initial
value
'
)
;
assert
.
compareArray
(
values
[
4
]
)
;
}
for
(
let
ctor
of
ctors
)
{
values
=
[
]
;
rab
=
CreateRabForTest
(
ctor
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
resizeAfter
=
2
;
resizeTo
=
3
*
ctor
.
BYTES_PER_ELEMENT
;
Array
.
prototype
.
reduce
.
call
(
lengthTracking
ResizeMidIteration
'
initial
value
'
)
;
assert
.
compareArray
(
values
[
0
2
4
]
)
;
}
for
(
let
ctor
of
ctors
)
{
values
=
[
]
;
rab
=
CreateRabForTest
(
ctor
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
resizeAfter
=
1
;
resizeTo
=
3
*
ctor
.
BYTES_PER_ELEMENT
;
Array
.
prototype
.
reduce
.
call
(
lengthTrackingWithOffset
ResizeMidIteration
'
initial
value
'
)
;
assert
.
compareArray
(
values
[
4
]
)
;
}
reportCompare
(
0
0
)
;
