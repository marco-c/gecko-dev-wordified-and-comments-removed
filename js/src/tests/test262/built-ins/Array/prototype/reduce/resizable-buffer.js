for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
function
ReduceCollecting
(
array
)
{
const
reduceValues
=
[
]
;
Array
.
prototype
.
reduce
.
call
(
array
(
acc
n
)
=
>
{
reduceValues
.
push
(
n
)
;
}
'
initial
value
'
)
;
return
ToNumbers
(
reduceValues
)
;
}
assert
.
compareArray
(
ReduceCollecting
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTracking
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTrackingWithOffset
)
[
4
6
]
)
;
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTracking
)
[
0
2
4
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTrackingWithOffset
)
[
4
]
)
;
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTracking
)
[
0
]
)
;
rab
.
resize
(
0
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLength
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLengthWithOffset
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTrackingWithOffset
)
[
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTracking
)
[
]
)
;
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
for
(
let
i
=
0
;
i
<
6
;
+
+
i
)
{
taWrite
[
i
]
=
MayNeedBigInt
(
taWrite
2
*
i
)
;
}
assert
.
compareArray
(
ReduceCollecting
(
fixedLength
)
[
0
2
4
6
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
fixedLengthWithOffset
)
[
4
6
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTracking
)
[
0
2
4
6
8
10
]
)
;
assert
.
compareArray
(
ReduceCollecting
(
lengthTrackingWithOffset
)
[
4
6
8
10
]
)
;
}
reportCompare
(
0
0
)
;
