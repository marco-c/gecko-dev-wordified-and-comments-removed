function
StopSplice
(
)
{
}
var
traps
=
[
]
;
var
targetLength
;
var
array
=
[
"
no
-
hole
"
"
stop
"
]
;
array
.
constructor
=
{
[
Symbol
.
species
]
:
function
(
n
)
{
targetLength
=
n
;
return
target
;
}
}
;
var
source
=
new
Proxy
(
array
allowProxyTraps
(
{
get
(
t
pk
r
)
{
traps
.
push
(
source
.
[
[
Get
]
]
:
{
String
(
pk
)
}
)
;
if
(
pk
=
=
=
"
length
"
)
return
2
*
*
53
+
2
;
return
Reflect
.
get
(
t
pk
r
)
;
}
has
(
t
pk
r
)
{
traps
.
push
(
source
.
[
[
Has
]
]
:
{
String
(
pk
)
}
)
;
return
Reflect
.
get
(
t
pk
r
)
;
}
}
)
)
;
var
target
=
new
Proxy
(
[
]
allowProxyTraps
(
{
defineProperty
(
t
pk
desc
)
{
traps
.
push
(
target
.
[
[
DefineProperty
]
]
:
{
String
(
pk
)
}
)
;
if
(
pk
=
=
=
"
0
"
|
|
pk
=
=
=
"
1
"
)
return
Reflect
.
defineProperty
(
t
pk
desc
)
;
throw
new
StopSplice
(
)
;
}
}
)
)
;
assert
.
throws
(
StopSplice
function
(
)
{
Array
.
prototype
.
splice
.
call
(
source
0
2
*
*
53
+
4
)
;
}
)
;
assert
.
sameValue
(
targetLength
2
*
*
53
-
1
"
length
and
deleteCount
were
correctly
clamped
to
2
^
53
-
1
"
)
;
assert
.
compareArray
(
traps
[
"
source
.
[
[
Get
]
]
:
length
"
"
source
.
[
[
Get
]
]
:
constructor
"
"
source
.
[
[
Has
]
]
:
0
"
"
source
.
[
[
Get
]
]
:
0
"
"
target
.
[
[
DefineProperty
]
]
:
0
"
"
source
.
[
[
Has
]
]
:
1
"
"
source
.
[
[
Has
]
]
:
2
"
"
source
.
[
[
Get
]
]
:
2
"
"
target
.
[
[
DefineProperty
]
]
:
2
"
]
)
;
reportCompare
(
0
0
)
;
