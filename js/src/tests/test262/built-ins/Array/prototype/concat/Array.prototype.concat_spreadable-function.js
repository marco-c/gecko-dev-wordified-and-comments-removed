var
fn
=
function
(
a
b
c
)
{
}
assert
.
compareArray
(
[
fn
]
[
]
.
concat
(
fn
)
'
[
fn
]
must
return
the
same
value
returned
by
[
]
.
concat
(
fn
)
'
)
;
fn
[
Symbol
.
isConcatSpreadable
]
=
true
;
fn
[
0
]
=
1
fn
[
1
]
=
2
fn
[
2
]
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
fn
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
fn
)
'
)
;
Function
.
prototype
[
Symbol
.
isConcatSpreadable
]
=
true
;
assert
.
compareArray
(
[
void
0
void
0
void
0
]
[
]
.
concat
(
function
(
a
b
c
)
{
}
)
'
[
void
0
void
0
void
0
]
must
return
the
same
value
returned
by
[
]
.
concat
(
function
(
a
b
c
)
{
}
)
'
)
;
Function
.
prototype
[
0
]
=
1
;
Function
.
prototype
[
1
]
=
2
;
Function
.
prototype
[
2
]
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
function
(
a
b
c
)
{
}
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
function
(
a
b
c
)
{
}
)
'
)
;
delete
Function
.
prototype
[
Symbol
.
isConcatSpreadable
]
;
delete
Function
.
prototype
[
0
]
;
delete
Function
.
prototype
[
1
]
;
delete
Function
.
prototype
[
2
]
;
reportCompare
(
0
0
)
;
