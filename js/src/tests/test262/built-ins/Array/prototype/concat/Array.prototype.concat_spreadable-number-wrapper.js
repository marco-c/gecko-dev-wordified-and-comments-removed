var
num
=
new
Number
(
true
)
assert
.
compareArray
(
[
num
]
[
]
.
concat
(
num
)
'
[
num
]
must
return
the
same
value
returned
by
[
]
.
concat
(
num
)
'
)
;
num
[
Symbol
.
isConcatSpreadable
]
=
true
;
num
.
length
=
3
;
num
[
0
]
=
1
num
[
1
]
=
2
num
[
2
]
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
num
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
num
)
'
)
;
Number
.
prototype
[
Symbol
.
isConcatSpreadable
]
=
true
;
assert
.
compareArray
(
[
]
[
]
.
concat
(
new
Number
(
123
)
)
'
[
]
must
return
the
same
value
returned
by
[
]
.
concat
(
new
Number
(
123
)
)
'
)
;
Number
.
prototype
[
0
]
=
1
;
Number
.
prototype
[
1
]
=
2
;
Number
.
prototype
[
2
]
=
3
;
Number
.
prototype
.
length
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
new
Number
(
123
)
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
new
Number
(
123
)
)
'
)
;
assert
.
compareArray
(
[
true
]
[
]
.
concat
(
true
)
'
[
true
]
must
return
the
same
value
returned
by
[
]
.
concat
(
true
)
'
)
;
delete
Number
.
prototype
[
Symbol
.
isConcatSpreadable
]
;
delete
Number
.
prototype
[
0
]
;
delete
Number
.
prototype
[
1
]
;
delete
Number
.
prototype
[
2
]
;
delete
Number
.
prototype
.
length
;
reportCompare
(
0
0
)
;
