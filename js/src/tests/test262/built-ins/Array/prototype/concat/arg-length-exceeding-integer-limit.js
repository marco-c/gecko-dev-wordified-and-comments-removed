var
spreadableLengthOutOfRange
=
{
}
;
spreadableLengthOutOfRange
.
length
=
Number
.
MAX_SAFE_INTEGER
;
spreadableLengthOutOfRange
[
Symbol
.
isConcatSpreadable
]
=
true
;
assert
.
throws
(
TypeError
function
(
)
{
[
1
]
.
concat
(
spreadableLengthOutOfRange
)
;
}
'
[
1
]
.
concat
(
spreadableLengthOutOfRange
)
throws
a
TypeError
exception
'
)
;
var
proxyForArrayWithLengthOutOfRange
=
new
Proxy
(
[
]
{
get
:
function
(
_target
key
)
{
if
(
key
=
=
=
"
length
"
)
{
return
Number
.
MAX_SAFE_INTEGER
;
}
}
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
[
]
.
concat
(
1
proxyForArrayWithLengthOutOfRange
)
;
}
'
[
]
.
concat
(
1
proxyForArrayWithLengthOutOfRange
)
throws
a
TypeError
exception
'
)
;
reportCompare
(
0
0
)
;
