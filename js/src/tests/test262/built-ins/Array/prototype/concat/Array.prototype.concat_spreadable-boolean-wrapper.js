var
bool
=
new
Boolean
(
true
)
assert
.
compareArray
(
[
bool
]
[
]
.
concat
(
bool
)
'
[
bool
]
must
return
the
same
value
returned
by
[
]
.
concat
(
bool
)
'
)
;
bool
[
Symbol
.
isConcatSpreadable
]
=
true
;
bool
.
length
=
3
;
bool
[
0
]
=
1
bool
[
1
]
=
2
bool
[
2
]
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
bool
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
bool
)
'
)
;
Boolean
.
prototype
[
Symbol
.
isConcatSpreadable
]
=
true
;
assert
.
compareArray
(
[
]
[
]
.
concat
(
new
Boolean
(
true
)
)
'
[
]
must
return
the
same
value
returned
by
[
]
.
concat
(
new
Boolean
(
true
)
)
'
)
;
Boolean
.
prototype
[
0
]
=
1
;
Boolean
.
prototype
[
1
]
=
2
;
Boolean
.
prototype
[
2
]
=
3
;
Boolean
.
prototype
.
length
=
3
;
assert
.
compareArray
(
[
1
2
3
]
[
]
.
concat
(
new
Boolean
(
true
)
)
'
[
1
2
3
]
must
return
the
same
value
returned
by
[
]
.
concat
(
new
Boolean
(
true
)
)
'
)
;
assert
.
compareArray
(
[
true
]
[
]
.
concat
(
true
)
'
[
true
]
must
return
the
same
value
returned
by
[
]
.
concat
(
true
)
'
)
;
delete
Boolean
.
prototype
[
Symbol
.
isConcatSpreadable
]
;
delete
Boolean
.
prototype
[
0
]
;
delete
Boolean
.
prototype
[
1
]
;
delete
Boolean
.
prototype
[
2
]
;
delete
Boolean
.
prototype
.
length
;
reportCompare
(
0
0
)
;
