let
closed
=
false
;
const
iterator
=
{
next
(
)
{
return
Promise
.
resolve
(
{
value
:
1
done
:
false
}
)
;
}
return
(
)
{
closed
=
true
;
return
Promise
.
resolve
(
{
done
:
true
}
)
;
}
[
Symbol
.
asyncIterator
]
(
)
{
return
this
;
}
}
asyncTest
(
async
(
)
=
>
{
await
assert
.
throwsAsync
(
Error
(
)
=
>
Array
.
fromAsync
(
iterator
(
val
)
=
>
{
assert
.
sameValue
(
val
1
"
mapfn
receives
value
from
iterator
"
)
;
throw
new
Error
(
"
mapfn
throws
"
)
;
}
)
"
sync
mapfn
throwing
should
cause
fromAsync
to
reject
"
)
;
assert
(
closed
"
sync
mapfn
throwing
should
close
iterator
"
)
}
)
;
