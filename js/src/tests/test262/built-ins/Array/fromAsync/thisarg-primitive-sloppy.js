asyncTest
(
async
(
)
=
>
{
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
sameValue
(
this
globalThis
"
the
global
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
undefined
"
)
;
}
undefined
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
sameValue
(
this
globalThis
"
the
global
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
null
"
)
;
}
null
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
notSameValue
(
this
"
string
"
"
string
thisArg
should
not
be
bound
as
the
this
-
value
of
mapfn
"
)
;
assert
.
sameValue
(
typeof
this
"
object
"
"
a
String
wrapper
object
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
a
string
"
)
assert
.
sameValue
(
this
.
valueOf
(
)
"
string
"
"
String
wrapper
object
should
have
the
same
primitive
value
as
thisArg
"
)
;
}
"
string
"
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
notSameValue
(
this
3
.
1416
"
number
thisArg
should
be
not
bound
as
the
this
-
value
of
mapfn
"
)
;
assert
.
sameValue
(
typeof
this
"
object
"
"
a
Number
wrapper
object
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
a
number
"
)
assert
.
sameValue
(
this
.
valueOf
(
)
3
.
1416
"
Number
wrapper
object
should
have
the
same
primitive
value
as
thisArg
"
)
;
}
3
.
1416
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
notSameValue
(
this
42n
"
bigint
thisArg
should
not
be
bound
as
the
this
-
value
of
mapfn
"
)
;
assert
.
sameValue
(
typeof
this
"
object
"
"
a
BigInt
wrapper
object
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
a
bigint
"
)
assert
.
sameValue
(
this
.
valueOf
(
)
42n
"
BigInt
wrapper
object
should
have
the
same
primitive
value
as
thisArg
"
)
;
}
42n
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
notSameValue
(
this
true
"
boolean
thisArg
should
not
be
bound
as
the
this
-
value
of
mapfn
"
)
;
assert
.
sameValue
(
typeof
this
"
object
"
"
a
Boolean
wrapper
object
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
a
boolean
"
)
assert
.
sameValue
(
this
.
valueOf
(
)
true
"
Boolean
wrapper
object
should
have
the
same
primitive
value
as
thisArg
"
)
;
}
true
)
;
const
symbolThis
=
Symbol
(
"
symbol
"
)
;
await
Array
.
fromAsync
(
[
1
2
3
]
async
function
(
)
{
assert
.
notSameValue
(
this
symbolThis
"
symbol
thisArg
should
not
be
bound
as
the
this
-
value
of
mapfn
"
)
;
assert
.
sameValue
(
typeof
this
"
object
"
"
a
Symbol
wrapper
object
should
be
bound
as
the
this
-
value
of
mapfn
when
thisArg
is
a
symbol
"
)
assert
.
sameValue
(
this
.
valueOf
(
)
symbolThis
"
Symbol
wrapper
object
should
have
the
same
primitive
value
as
thisArg
"
)
;
}
symbolThis
)
;
}
)
;
