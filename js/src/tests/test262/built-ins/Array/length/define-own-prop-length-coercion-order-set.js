var
array
=
[
1
2
3
]
;
var
hints
=
[
]
;
var
length
=
{
}
;
length
[
Symbol
.
toPrimitive
]
=
function
(
hint
)
{
hints
.
push
(
hint
)
;
Object
.
defineProperty
(
array
"
length
"
{
writable
:
false
}
)
;
return
0
;
}
;
assert
.
throws
(
TypeError
function
(
)
{
"
use
strict
"
;
array
.
length
=
length
;
}
'
"
use
strict
"
;
array
.
length
=
length
throws
a
TypeError
exception
'
)
;
assert
.
compareArray
(
hints
[
"
number
"
"
number
"
]
'
The
value
of
hints
is
expected
to
be
[
"
number
"
"
number
"
]
'
)
;
array
=
[
1
2
3
]
;
hints
=
[
]
;
assert
(
!
Reflect
.
set
(
array
"
length
"
length
)
'
The
value
of
!
Reflect
.
set
(
array
"
length
"
length
)
is
expected
to
be
true
'
)
;
assert
.
compareArray
(
hints
[
"
number
"
"
number
"
]
'
The
value
of
hints
is
expected
to
be
[
"
number
"
"
number
"
]
'
)
;
reportCompare
(
0
0
)
;
