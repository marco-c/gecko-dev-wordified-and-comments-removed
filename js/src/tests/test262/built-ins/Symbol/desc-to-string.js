var
calls
val
;
val
=
{
toString
:
function
(
)
{
calls
+
=
'
toString
'
;
return
{
}
;
}
valueOf
:
function
(
)
{
calls
+
=
'
valueOf
'
;
}
}
;
calls
=
'
'
;
Symbol
(
val
)
;
assert
.
sameValue
(
calls
'
toStringvalueOf
'
)
;
val
=
{
toString
:
function
(
)
{
calls
+
=
'
toString
'
;
}
valueOf
:
function
(
)
{
calls
+
=
'
valueOf
'
;
}
}
;
calls
=
'
'
;
Symbol
(
val
)
;
assert
.
sameValue
(
calls
'
toString
'
)
;
val
=
{
toString
:
null
valueOf
:
function
(
)
{
calls
+
=
'
valueOf
'
;
}
}
;
calls
=
'
'
;
Symbol
(
val
)
;
assert
.
sameValue
(
calls
'
valueOf
'
)
;
val
=
{
toString
:
null
valueOf
:
function
(
)
{
calls
+
=
'
valueOf
'
;
return
{
}
;
}
}
;
calls
=
'
'
;
assert
.
throws
(
TypeError
function
(
)
{
Symbol
(
val
)
;
}
'
toString
is
not
callable
and
valueOf
returns
a
non
-
primitive
value
'
)
;
assert
.
sameValue
(
calls
'
valueOf
'
'
invocation
pattern
for
non
-
callable
toString
'
)
;
val
=
{
toString
:
function
(
)
{
calls
+
=
'
toString
'
;
return
{
}
;
}
valueOf
:
function
(
)
{
calls
+
=
'
valueOf
'
;
return
{
}
;
}
}
;
calls
=
'
'
;
assert
.
throws
(
TypeError
function
(
)
{
Symbol
(
val
)
;
}
'
toString
nor
valueOf
both
return
non
-
primitive
values
'
)
;
assert
.
sameValue
(
calls
'
toStringvalueOf
'
'
invocation
pattern
for
non
-
callable
toString
and
valueOf
'
)
;
reportCompare
(
0
0
)
;
