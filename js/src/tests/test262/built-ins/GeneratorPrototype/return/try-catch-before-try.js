var
unreachable
=
0
;
function
*
g
(
)
{
yield
;
try
{
unreachable
+
=
1
;
}
catch
(
e
)
{
throw
e
;
}
unreachable
+
=
1
;
}
var
iter
=
g
(
)
;
var
result
;
iter
.
next
(
)
;
assert
.
sameValue
(
unreachable
0
'
statement
following
yield
not
executed
(
paused
at
yield
)
'
)
;
result
=
iter
.
return
(
45
)
;
assert
.
sameValue
(
result
.
value
45
'
Result
value
following
return
'
)
;
assert
.
sameValue
(
result
.
done
true
'
Result
done
flag
following
return
'
)
;
assert
.
sameValue
(
unreachable
0
'
statement
following
yield
not
executed
(
following
return
)
'
)
;
result
=
iter
.
next
(
)
;
assert
.
sameValue
(
result
.
value
undefined
'
Result
value
is
undefined
when
complete
'
)
;
assert
.
sameValue
(
result
.
done
true
'
Result
done
flag
is
true
when
complete
'
)
;
assert
.
sameValue
(
unreachable
0
'
statement
following
yield
not
executed
(
once
"
completed
"
)
'
)
;
reportCompare
(
0
0
)
;
