let
callCount
=
0
;
let
thenable
=
{
then
(
_
reject
)
{
callCount
+
+
;
reject
(
'
reason
'
)
;
}
}
;
Promise
.
any
(
[
thenable
]
)
.
then
(
(
)
=
>
{
DONE
(
'
The
promise
should
not
be
fulfilled
.
'
)
;
}
(
error
)
=
>
{
assert
.
sameValue
(
callCount
1
"
callCount
=
=
=
1
"
)
;
assert
(
error
instanceof
AggregateError
"
error
instanceof
AggregateError
"
)
;
assert
.
sameValue
(
error
.
errors
[
0
]
"
reason
"
"
error
.
errors
[
0
]
=
=
=
'
reason
'
"
)
;
DONE
(
)
;
}
)
;
