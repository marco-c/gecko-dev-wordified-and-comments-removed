let
callCount
=
0
;
let
errorArray
;
function
Constructor
(
executor
)
{
function
reject
(
error
)
{
callCount
+
=
1
;
errorArray
=
error
.
errors
;
assert
(
Array
.
isArray
(
error
.
errors
)
"
error
is
array
"
)
;
assert
.
sameValue
(
error
.
errors
.
length
3
"
error
.
length
"
)
;
assert
.
sameValue
(
error
.
errors
[
0
]
"
p1
-
rejection
"
"
error
.
errors
[
0
]
=
=
=
'
p1
-
rejection
'
"
)
;
assert
.
sameValue
(
error
.
errors
[
1
]
"
p2
-
rejection
"
"
error
.
errors
[
1
]
=
=
=
'
p2
-
rejection
'
"
)
;
assert
.
sameValue
(
error
.
errors
[
2
]
"
p3
-
rejection
"
"
error
.
errors
[
2
]
=
=
=
'
p3
-
rejection
'
"
)
;
assert
(
error
instanceof
AggregateError
"
error
instanceof
AggregateError
"
)
;
}
executor
(
ERROR
reject
)
;
}
Constructor
.
resolve
=
function
(
v
)
{
return
v
;
}
;
let
p1OnRejected
;
let
p1
=
{
then
(
onResolved
onRejected
)
{
p1OnRejected
=
onRejected
;
}
}
;
let
p2
=
{
then
(
onResolved
onRejected
)
{
onRejected
(
"
p2
-
rejection
"
)
;
onRejected
(
"
unexpectedonRejectedValue
"
)
;
}
}
;
let
p3
=
{
then
(
onResolved
onRejected
)
{
onRejected
(
"
p3
-
rejection
"
)
;
}
}
;
assert
.
sameValue
(
callCount
0
"
callCount
before
call
to
any
(
)
"
)
;
Promise
.
any
.
call
(
Constructor
[
p1
p2
p3
]
)
;
assert
.
sameValue
(
callCount
0
"
callCount
after
call
to
any
(
)
"
)
;
p1OnRejected
(
"
p1
-
rejection
"
)
;
assert
.
sameValue
(
callCount
1
"
callCount
after
call
to
p1OnRejected
(
)
"
)
;
assert
.
sameValue
(
errorArray
[
0
]
"
p1
-
rejection
"
"
errorArray
[
0
]
=
=
=
'
p1
-
rejection
'
after
call
to
p1OnRejected
(
.
.
.
)
"
)
;
assert
.
sameValue
(
errorArray
[
1
]
"
p2
-
rejection
"
"
errorArray
[
1
]
=
=
=
'
p2
-
rejection
'
after
call
to
p1OnRejected
(
.
.
.
)
"
)
;
assert
.
sameValue
(
errorArray
[
2
]
"
p3
-
rejection
"
"
errorArray
[
2
]
=
=
=
'
p3
-
rejection
'
after
call
to
p1OnRejected
(
.
.
.
)
"
)
;
reportCompare
(
0
0
)
;
