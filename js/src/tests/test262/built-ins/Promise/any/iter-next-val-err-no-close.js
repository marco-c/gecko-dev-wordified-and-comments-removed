let
callCount
=
0
;
let
returnCount
=
0
;
let
error
=
new
Test262Error
(
)
;
let
poisoned
=
{
done
:
false
}
;
Object
.
defineProperty
(
poisoned
'
value
'
{
get
(
)
{
callCount
+
+
;
throw
error
;
}
}
)
;
let
iterNextValThrows
=
{
[
Symbol
.
iterator
]
(
)
{
callCount
+
+
;
return
{
next
(
)
{
callCount
+
+
;
return
poisoned
;
}
return
(
)
{
returnCount
+
+
;
return
{
}
;
}
}
;
}
}
;
Promise
.
any
(
iterNextValThrows
)
.
then
(
(
)
=
>
{
DONE
(
'
The
promise
should
be
rejected
but
was
resolved
'
)
;
}
(
reason
)
=
>
{
assert
(
error
instanceof
Test262Error
)
;
assert
.
sameValue
(
reason
error
)
;
assert
.
sameValue
(
callCount
3
'
callCount
=
=
=
3
'
)
;
assert
.
sameValue
(
returnCount
0
)
;
}
)
.
then
(
DONE
DONE
)
;
