var
rejection
=
{
}
;
var
thenable
=
{
then
(
_
reject
)
{
new
Promise
(
(
resolve
)
=
>
resolve
(
)
)
.
then
(
(
)
=
>
reject
(
rejection
)
)
;
}
}
;
Promise
.
any
(
[
thenable
]
)
.
then
(
(
)
=
>
{
DONE
(
'
The
promise
should
be
rejected
.
'
)
;
}
(
aggregate
)
=
>
{
assert
(
aggregate
instanceof
AggregateError
)
;
assert
.
sameValue
(
aggregate
.
errors
.
length
1
)
;
assert
.
sameValue
(
aggregate
.
errors
[
0
]
rejection
)
;
}
)
.
then
(
DONE
DONE
)
;
