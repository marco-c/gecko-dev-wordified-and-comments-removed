var
checkPoint
=
'
'
;
function
fn1
(
executor
)
{
checkPoint
+
=
'
a
'
;
executor
(
)
;
checkPoint
+
=
'
b
'
;
executor
(
function
(
)
{
}
function
(
)
{
}
)
;
checkPoint
+
=
'
c
'
;
}
fn1
.
resolve
=
function
(
)
{
throw
new
Test262Error
(
)
;
}
;
Promise
.
any
.
call
(
fn1
[
]
)
;
assert
.
sameValue
(
checkPoint
'
abc
'
'
executor
initially
called
with
no
arguments
'
)
;
checkPoint
=
'
'
;
function
fn2
(
executor
)
{
checkPoint
+
=
'
a
'
;
executor
(
undefined
undefined
)
;
checkPoint
+
=
'
b
'
;
executor
(
function
(
)
{
}
function
(
)
{
}
)
;
checkPoint
+
=
'
c
'
;
}
fn2
.
resolve
=
function
(
)
{
throw
new
Test262Error
(
)
;
}
;
Promise
.
any
.
call
(
fn2
[
]
)
;
assert
.
sameValue
(
checkPoint
'
abc
'
'
executor
initially
called
with
(
undefined
undefined
)
'
)
;
checkPoint
=
'
'
;
function
fn3
(
executor
)
{
checkPoint
+
=
'
a
'
;
executor
(
undefined
function
(
)
{
}
)
;
checkPoint
+
=
'
b
'
;
executor
(
function
(
)
{
}
function
(
)
{
}
)
;
checkPoint
+
=
'
c
'
;
}
Object
.
defineProperty
(
fn3
'
resolve
'
{
get
(
)
{
throw
new
Test262Error
(
)
;
}
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
Promise
.
any
.
call
(
fn3
[
]
)
;
}
'
executor
initially
called
with
(
undefined
function
)
'
)
;
assert
.
sameValue
(
checkPoint
'
ab
'
'
executor
initially
called
with
(
undefined
function
)
'
)
;
checkPoint
=
'
'
;
function
fn4
(
executor
)
{
checkPoint
+
=
'
a
'
;
executor
(
function
(
)
{
}
undefined
)
;
checkPoint
+
=
'
b
'
;
executor
(
function
(
)
{
}
function
(
)
{
}
)
;
checkPoint
+
=
'
c
'
;
}
Object
.
defineProperty
(
fn4
'
resolve
'
{
get
(
)
{
throw
new
Test262Error
(
)
;
}
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
Promise
.
any
.
call
(
fn4
[
]
)
;
}
'
executor
initially
called
with
(
function
undefined
)
'
)
;
assert
.
sameValue
(
checkPoint
'
ab
'
'
executor
initially
called
with
(
function
undefined
)
'
)
;
checkPoint
=
'
'
;
function
fn5
(
executor
)
{
checkPoint
+
=
'
a
'
;
executor
(
'
invalid
value
'
123
)
;
checkPoint
+
=
'
b
'
;
executor
(
function
(
)
{
}
function
(
)
{
}
)
;
checkPoint
+
=
'
c
'
;
}
Object
.
defineProperty
(
fn5
'
resolve
'
{
get
(
)
{
throw
new
Test262Error
(
)
;
}
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
Promise
.
any
.
call
(
fn5
[
]
)
;
}
'
executor
initially
called
with
(
String
Number
)
'
)
;
assert
.
sameValue
(
checkPoint
'
ab
'
'
executor
initially
called
with
(
String
Number
)
'
)
;
reportCompare
(
0
0
)
;
