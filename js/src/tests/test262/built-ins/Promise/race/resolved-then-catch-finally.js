let
a
=
Promise
.
reject
(
'
a
'
)
.
catch
(
(
v
)
=
>
v
)
;
let
b
=
Promise
.
resolve
(
'
b
'
)
.
then
(
(
v
)
=
>
{
throw
v
}
)
;
let
c
=
Promise
.
reject
(
'
c
'
)
.
then
(
(
v
)
=
>
{
throw
v
;
}
)
;
let
d
=
Promise
.
resolve
(
'
d
'
)
.
finally
(
(
v
)
=
>
v
)
;
let
e
=
Promise
.
reject
(
'
e
'
)
.
finally
(
(
v
)
=
>
v
)
;
let
f
=
Promise
.
resolve
(
'
f
'
)
.
finally
(
(
v
)
=
>
{
throw
v
;
}
)
;
let
g
=
Promise
.
reject
(
'
g
'
)
.
finally
(
(
v
)
=
>
{
throw
v
;
}
)
;
let
h
=
Promise
.
reject
(
'
h
'
)
.
then
(
(
v
)
=
>
v
(
)
=
>
'
j
'
)
;
let
i
=
Promise
.
resolve
(
'
i
'
)
.
then
(
v
=
>
v
)
;
Promise
.
race
(
[
a
b
c
d
e
f
g
h
i
]
)
.
then
(
winner
=
>
{
assert
.
sameValue
(
winner
'
a
'
)
;
}
)
.
then
(
DONE
DONE
)
;
