let
callCount
=
0
;
let
sequence
=
[
]
;
function
Constructor
(
executor
)
{
function
reject
(
value
)
{
callCount
+
=
1
;
sequence
.
push
(
value
)
;
}
executor
(
(
)
=
>
{
throw
new
Test262Error
(
)
;
}
reject
)
;
}
Constructor
.
resolve
=
function
(
v
)
{
return
v
;
}
;
let
pReject
;
let
a
=
{
then
(
_
rejecter
)
{
pReject
=
rejecter
;
}
}
;
assert
.
sameValue
(
callCount
0
'
callCount
before
call
to
race
(
)
'
)
;
Promise
.
race
.
call
(
Constructor
[
a
]
)
;
assert
.
sameValue
(
callCount
0
'
callCount
after
call
to
race
(
)
'
)
;
pReject
(
1
)
;
pReject
(
2
)
;
pReject
(
3
)
;
assert
.
sameValue
(
callCount
3
'
callCount
after
resolving
a
'
)
;
assert
.
sameValue
(
sequence
.
length
3
)
;
checkSequence
(
sequence
)
;
reportCompare
(
0
0
)
;
