var
p0
=
Promise
.
resolve
(
2
)
.
then
(
v
=
>
v
+
1
)
;
var
p1
=
Promise
.
reject
(
21
)
.
catch
(
v
=
>
v
*
2
)
;
var
p2
=
Promise
.
resolve
(
'
nope
'
)
.
then
(
(
)
=
>
{
throw
'
foo
'
}
)
;
var
p3
=
Promise
.
reject
(
'
yes
'
)
.
then
(
(
)
=
>
{
throw
'
nope
'
;
}
)
;
var
p4
=
Promise
.
resolve
(
'
here
'
)
.
finally
(
(
)
=
>
'
nope
'
)
;
var
p5
=
Promise
.
reject
(
'
here
too
'
)
.
finally
(
(
)
=
>
'
nope
'
)
;
var
p6
=
Promise
.
resolve
(
'
nope
'
)
.
finally
(
(
)
=
>
{
throw
'
finally
'
;
}
)
;
var
p7
=
Promise
.
reject
(
'
nope
'
)
.
finally
(
(
)
=
>
{
throw
'
finally
after
rejected
'
;
}
)
;
var
p8
=
Promise
.
reject
(
1
)
.
then
(
(
)
=
>
'
nope
'
(
)
=
>
0
)
;
Promise
.
allSettled
(
[
p0
p1
p2
p3
p4
p5
p6
p7
p8
]
)
.
then
(
function
(
settled
)
{
checkSettledPromises
(
settled
[
{
status
:
'
fulfilled
'
value
:
3
}
{
status
:
'
fulfilled
'
value
:
42
}
{
status
:
'
rejected
'
reason
:
'
foo
'
}
{
status
:
'
rejected
'
reason
:
'
yes
'
}
{
status
:
'
fulfilled
'
value
:
'
here
'
}
{
status
:
'
rejected
'
reason
:
'
here
too
'
}
{
status
:
'
rejected
'
reason
:
'
finally
'
}
{
status
:
'
rejected
'
reason
:
'
finally
after
rejected
'
}
{
status
:
'
fulfilled
'
value
:
0
}
]
'
settled
'
)
;
}
)
.
then
(
DONE
DONE
)
;
