class
MyPromise
extends
Promise
{
}
var
mp1Value
=
{
}
;
var
mp1
=
MyPromise
.
reject
(
mp1Value
)
;
var
mp2
=
MyPromise
.
reject
(
42
)
;
var
thenCalls
=
[
]
;
var
then
=
Promise
.
prototype
.
then
;
Promise
.
prototype
.
then
=
function
(
resolve
reject
)
{
thenCalls
.
push
(
{
promise
:
this
resolve
reject
}
)
;
return
then
.
call
(
this
resolve
reject
)
;
}
;
mp1
.
finally
(
(
)
=
>
mp2
)
.
then
(
value
=
>
{
throw
new
Test262Error
(
"
Expected
the
promise
to
be
rejected
got
resolved
with
"
+
value
)
;
}
(
)
=
>
{
assert
.
sameValue
(
thenCalls
.
length
5
)
;
var
mp2Calls
=
thenCalls
.
filter
(
c
=
>
c
.
promise
=
=
=
mp2
)
;
assert
.
sameValue
(
mp2Calls
.
length
1
)
;
assert
.
sameValue
(
mp2Calls
[
0
]
.
reject
undefined
)
;
var
thrown
=
false
;
try
{
mp2Calls
[
0
]
.
resolve
(
)
;
}
catch
(
error
)
{
thrown
=
true
;
assert
.
sameValue
(
error
mp1Value
)
;
}
assert
(
thrown
"
Expected
resolve
(
)
to
throw
but
it
didn
'
t
"
)
;
}
)
.
then
(
DONE
DONE
)
;
