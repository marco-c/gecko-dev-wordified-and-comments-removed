class
MyError
extends
Error
{
}
var
myError
=
new
MyError
(
)
;
Promise
.
reject
(
myError
)
.
finally
(
function
(
)
{
}
)
.
then
(
function
(
value
)
{
DONE
(
'
Expected
promise
to
be
rejected
got
fulfilled
with
'
+
value
)
;
}
function
(
reason
)
{
if
(
reason
=
=
=
myError
)
{
DONE
(
)
;
}
else
{
DONE
(
reason
)
;
}
}
)
;
var
calls
=
0
;
var
expected
=
[
{
length
:
0
name
:
'
'
}
{
length
:
1
name
:
'
'
}
]
;
var
then
=
Promise
.
prototype
.
then
;
Promise
.
prototype
.
then
=
function
(
resolve
reject
)
{
assert
(
!
isConstructor
(
resolve
)
)
;
assert
.
sameValue
(
resolve
.
length
expected
[
calls
]
.
length
)
;
assert
.
sameValue
(
resolve
.
name
expected
[
calls
]
.
name
)
;
if
(
calls
=
=
=
0
)
{
assert
.
throws
(
MyError
resolve
)
;
}
calls
+
=
1
;
return
then
.
call
(
this
resolve
reject
)
;
}
;
