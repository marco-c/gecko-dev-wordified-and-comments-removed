class
MyError
extends
Error
{
}
var
myError
=
new
MyError
(
)
;
Promise
.
reject
(
myError
)
.
finally
(
function
(
)
{
}
)
.
then
(
function
(
value
)
{
DONE
(
'
Expected
promise
to
be
rejected
got
fulfilled
with
'
+
value
)
;
}
function
(
reason
)
{
if
(
reason
=
=
=
myError
)
{
DONE
(
)
;
}
else
{
DONE
(
reason
)
;
}
}
)
;
var
calls
=
0
;
var
expected
=
[
{
length
:
0
name
:
'
'
}
{
length
:
1
name
:
'
'
}
]
;
var
then
=
Promise
.
prototype
.
then
;
Promise
.
prototype
.
then
=
function
(
resolve
reject
)
{
assert
.
sameValue
(
resolve
.
length
expected
[
calls
]
.
length
'
The
value
of
resolve
.
length
is
expected
to
equal
the
value
of
expected
[
calls
]
.
length
'
)
;
assert
.
sameValue
(
resolve
.
name
expected
[
calls
]
.
name
'
The
value
of
resolve
.
name
is
expected
to
equal
the
value
of
expected
[
calls
]
.
name
'
)
;
if
(
calls
=
=
=
0
)
{
assert
.
throws
(
MyError
resolve
'
resolve
(
)
throws
MyError
'
)
;
assert
.
sameValue
(
arguments
.
length
1
'
then
invoked
with
one
argument
'
)
;
}
else
{
assert
.
sameValue
(
isConstructor
(
reject
)
false
'
isConstructor
(
reject
)
must
return
false
'
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
reject
(
)
;
}
'
new
reject
(
)
throws
TypeError
'
)
;
assert
.
sameValue
(
arguments
.
length
2
'
then
invoked
with
two
arguments
'
)
;
}
calls
+
=
1
;
return
then
.
call
(
this
resolve
reject
)
;
}
;
