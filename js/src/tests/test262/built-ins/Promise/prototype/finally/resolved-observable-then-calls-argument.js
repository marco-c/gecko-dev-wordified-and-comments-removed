var
value
=
{
}
;
Promise
.
resolve
(
value
)
.
finally
(
function
(
)
{
}
)
.
then
(
(
)
=
>
DONE
(
)
DONE
)
;
var
calls
=
0
;
var
expected
=
[
{
length
:
0
name
:
'
'
}
{
length
:
1
name
:
'
'
}
]
;
var
then
=
Promise
.
prototype
.
then
;
Promise
.
prototype
.
then
=
function
(
resolve
)
{
assert
(
!
isConstructor
(
resolve
)
)
;
assert
.
sameValue
(
resolve
.
length
expected
[
calls
]
.
length
)
;
assert
.
sameValue
(
resolve
.
name
expected
[
calls
]
.
name
)
;
if
(
calls
=
=
=
0
)
{
assert
.
sameValue
(
resolve
(
)
value
)
;
}
calls
+
=
1
;
return
then
.
call
(
this
resolve
)
;
}
;
