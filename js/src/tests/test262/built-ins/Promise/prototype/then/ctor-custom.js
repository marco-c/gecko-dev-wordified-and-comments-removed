var
callCount
=
0
;
var
thisValue
firstArg
argLength
getCapabilitiesExecutor
;
var
executor
=
function
(
)
{
}
;
var
p1
=
new
Promise
(
function
(
)
{
}
)
;
var
SpeciesConstructor
=
class
extends
Promise
{
constructor
(
a
)
{
super
(
a
)
;
callCount
+
=
1
;
thisValue
=
this
;
getCapabilitiesExecutor
=
a
;
argLength
=
arguments
.
length
;
}
}
;
var
p2
;
p1
.
constructor
=
function
(
)
{
}
;
p1
.
constructor
[
Symbol
.
species
]
=
SpeciesConstructor
;
p2
=
p1
.
then
(
)
;
assert
.
sameValue
(
callCount
1
'
The
constructor
is
invoked
exactly
once
'
)
;
assert
(
thisValue
instanceof
SpeciesConstructor
)
;
assert
.
sameValue
(
argLength
1
'
The
constructor
is
invoked
with
a
single
argument
'
)
;
assert
.
sameValue
(
typeof
getCapabilitiesExecutor
'
function
'
)
;
assert
.
sameValue
(
getCapabilitiesExecutor
.
length
2
'
ES6
25
.
4
.
1
.
5
.
1
:
The
length
property
of
a
GetCapabilitiesExecutor
function
is
2
.
'
)
;
assert
(
p2
instanceof
SpeciesConstructor
'
The
returned
object
is
an
instance
of
the
constructor
'
)
;
reportCompare
(
0
0
)
;
