const
text
=
'
a
b
c
d
'
;
function
doSearch
(
regex
)
{
return
RegExp
.
prototype
[
Symbol
.
search
]
.
call
(
regex
text
)
;
}
assert
.
sameValue
(
doSearch
(
/
a
/
)
2
"
Basic
search
without
flags
"
)
;
assert
.
sameValue
(
doSearch
(
/
a
/
u
)
2
"
Search
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
a
/
v
)
2
"
Search
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
/
)
0
"
Search
for
surrogate
pair
without
flags
"
)
;
assert
.
sameValue
(
doSearch
(
/
/
u
)
0
"
Search
for
surrogate
pair
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
/
v
)
0
"
Search
for
surrogate
pair
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
\
p
{
Script
=
Han
}
/
u
)
0
"
Unicode
property
escapes
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
\
p
{
Script
=
Han
}
/
v
)
0
"
Unicode
property
escapes
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
c
.
/
)
8
"
Dot
without
u
or
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
c
.
/
u
)
8
"
Dot
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
c
.
/
v
)
8
"
Dot
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
/
u
)
9
"
Complex
emoji
sequence
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
/
v
)
9
"
Complex
emoji
sequence
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
[
]
/
v
)
9
"
Complex
emoji
sequence
in
set
notation
with
v
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
[
]
/
u
)
9
"
Complex
emoji
sequence
in
set
notation
with
u
flag
throws
"
)
;
assert
.
sameValue
(
doSearch
(
/
x
/
u
)
-
1
"
Search
for
non
-
existent
pattern
with
u
flag
"
)
;
assert
.
sameValue
(
doSearch
(
/
x
/
v
)
-
1
"
Search
for
non
-
existent
pattern
with
v
flag
"
)
;
reportCompare
(
0
0
)
;
