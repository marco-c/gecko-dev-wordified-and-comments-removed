function
testCoercibleToIndexZero
(
test
)
{
testCoercibleToIntegerZero
(
test
)
;
}
function
testCoercibleToIndexOne
(
test
)
{
testCoercibleToIntegerOne
(
test
)
;
}
function
testCoercibleToIndexFromIndex
(
nominalIndex
test
)
{
assert
(
Number
.
isInteger
(
nominalIndex
)
)
;
assert
(
0
<
=
nominalIndex
&
&
nominalIndex
<
=
2
*
*
53
-
1
)
;
testCoercibleToIntegerFromInteger
(
nominalIndex
test
)
;
}
function
testCoercibleToIntegerZero
(
test
)
{
testCoercibleToNumberZero
(
test
)
;
testCoercibleToIntegerFromInteger
(
0
test
)
;
testCoercibleToNumberNan
(
test
)
;
test
(
{
}
)
;
test
(
[
]
)
;
}
function
testCoercibleToIntegerOne
(
test
)
{
testCoercibleToNumberOne
(
test
)
;
testCoercibleToIntegerFromInteger
(
1
test
)
;
test
(
[
1
]
)
;
test
(
[
"
1
"
]
)
;
}
function
testCoercibleToNumberZero
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testPrimitiveValue
(
null
)
;
testPrimitiveValue
(
false
)
;
testPrimitiveValue
(
0
)
;
testPrimitiveValue
(
"
0
"
)
;
}
function
testCoercibleToNumberNan
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testPrimitiveValue
(
undefined
)
;
testPrimitiveValue
(
NaN
)
;
testPrimitiveValue
(
"
"
)
;
testPrimitiveValue
(
"
foo
"
)
;
testPrimitiveValue
(
"
true
"
)
;
}
function
testCoercibleToNumberOne
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testPrimitiveValue
(
true
)
;
testPrimitiveValue
(
1
)
;
testPrimitiveValue
(
"
1
"
)
;
}
function
testCoercibleToIntegerFromInteger
(
nominalInteger
test
)
{
assert
(
Number
.
isInteger
(
nominalInteger
)
)
;
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
test
(
[
value
]
)
;
}
function
testPrimitiveNumber
(
number
)
{
testPrimitiveValue
(
number
)
;
testPrimitiveValue
(
number
.
toString
(
)
)
;
}
testPrimitiveNumber
(
nominalInteger
)
;
if
(
nominalInteger
>
=
0
)
{
testPrimitiveNumber
(
nominalInteger
+
0
.
9
)
;
}
if
(
nominalInteger
<
=
0
)
{
testPrimitiveNumber
(
nominalInteger
-
0
.
9
)
;
}
}
function
testPrimitiveWrappers
(
primitiveValue
hint
test
)
{
if
(
primitiveValue
!
=
null
)
{
test
(
Object
(
primitiveValue
)
)
;
}
testCoercibleToPrimitiveWithMethod
(
hint
function
(
)
{
return
primitiveValue
;
}
test
)
;
}
function
testCoercibleToPrimitiveWithMethod
(
hint
method
test
)
{
var
methodNames
;
if
(
hint
=
=
=
"
number
"
)
{
methodNames
=
[
"
valueOf
"
"
toString
"
]
;
}
else
if
(
hint
=
=
=
"
string
"
)
{
methodNames
=
[
"
toString
"
"
valueOf
"
]
;
}
else
{
throw
new
Test262Error
(
)
;
}
test
(
{
[
Symbol
.
toPrimitive
]
:
method
[
methodNames
[
0
]
]
:
function
(
)
{
throw
new
Test262Error
(
)
;
}
[
methodNames
[
1
]
]
:
function
(
)
{
throw
new
Test262Error
(
)
;
}
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
method
[
methodNames
[
1
]
]
:
function
(
)
{
throw
new
Test262Error
(
)
;
}
}
)
;
if
(
hint
=
=
=
"
number
"
)
{
test
(
{
[
methodNames
[
1
]
]
:
method
}
)
;
}
test
(
{
[
Symbol
.
toPrimitive
]
:
undefined
[
methodNames
[
0
]
]
:
method
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
Symbol
.
toPrimitive
]
:
null
[
methodNames
[
0
]
]
:
method
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
null
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
1
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
{
}
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
function
(
)
{
return
{
}
;
}
[
methodNames
[
1
]
]
:
method
}
)
;
test
(
{
[
methodNames
[
0
]
]
:
function
(
)
{
return
Object
(
1
)
;
}
[
methodNames
[
1
]
]
:
method
}
)
;
}
function
testNotCoercibleToIndex
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
RangeError
value
)
;
testPrimitiveWrappers
(
value
"
number
"
function
(
value
)
{
test
(
RangeError
value
)
;
}
)
;
}
testNotCoercibleToInteger
(
test
)
;
testPrimitiveValue
(
-
1
)
;
testPrimitiveValue
(
-
2
.
5
)
;
testPrimitiveValue
(
"
-
2
.
5
"
)
;
testPrimitiveValue
(
-
Infinity
)
;
testPrimitiveValue
(
2
*
*
53
)
;
testPrimitiveValue
(
Infinity
)
;
}
function
testNotCoercibleToInteger
(
test
)
{
testNotCoercibleToNumber
(
test
)
;
}
function
testNotCoercibleToNumber
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
TypeError
value
)
;
testPrimitiveWrappers
(
value
"
number
"
function
(
value
)
{
test
(
TypeError
value
)
;
}
)
;
}
testPrimitiveValue
(
Symbol
(
"
1
"
)
)
;
if
(
typeof
BigInt
!
=
=
"
undefined
"
)
{
testPrimitiveValue
(
BigInt
(
0
)
)
;
}
testNotCoercibleToPrimitive
(
"
number
"
test
)
;
}
function
testNotCoercibleToPrimitive
(
hint
test
)
{
function
MyError
(
)
{
}
test
(
TypeError
{
[
Symbol
.
toPrimitive
]
:
1
}
)
;
test
(
TypeError
{
[
Symbol
.
toPrimitive
]
:
{
}
}
)
;
test
(
TypeError
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
return
Object
(
1
)
;
}
}
)
;
test
(
TypeError
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
return
{
}
;
}
}
)
;
test
(
MyError
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
throw
new
MyError
(
)
;
}
}
)
;
testCoercibleToPrimitiveWithMethod
(
hint
function
(
)
{
throw
new
MyError
(
)
;
}
function
(
value
)
{
test
(
MyError
value
)
;
}
)
;
function
testUnsuitableMethod
(
method
)
{
test
(
TypeError
{
valueOf
:
method
toString
:
method
}
)
;
}
testUnsuitableMethod
(
null
)
;
testUnsuitableMethod
(
1
)
;
testUnsuitableMethod
(
{
}
)
;
testUnsuitableMethod
(
function
(
)
{
return
Object
(
1
)
;
}
)
;
testUnsuitableMethod
(
function
(
)
{
return
{
}
;
}
)
;
}
function
testCoercibleToString
(
test
)
{
function
testPrimitiveValue
(
value
expectedString
)
{
test
(
value
expectedString
)
;
testPrimitiveWrappers
(
value
"
string
"
function
(
value
)
{
test
(
value
expectedString
)
;
}
)
;
}
testPrimitiveValue
(
undefined
"
undefined
"
)
;
testPrimitiveValue
(
null
"
null
"
)
;
testPrimitiveValue
(
true
"
true
"
)
;
testPrimitiveValue
(
false
"
false
"
)
;
testPrimitiveValue
(
0
"
0
"
)
;
testPrimitiveValue
(
-
0
"
0
"
)
;
testPrimitiveValue
(
Infinity
"
Infinity
"
)
;
testPrimitiveValue
(
-
Infinity
"
-
Infinity
"
)
;
testPrimitiveValue
(
123
.
456
"
123
.
456
"
)
;
testPrimitiveValue
(
-
123
.
456
"
-
123
.
456
"
)
;
testPrimitiveValue
(
"
"
"
"
)
;
testPrimitiveValue
(
"
foo
"
"
foo
"
)
;
if
(
typeof
BigInt
!
=
=
"
undefined
"
)
{
testPrimitiveValue
(
BigInt
(
0
)
"
0
"
)
;
}
test
(
[
]
"
"
)
;
test
(
[
"
foo
"
"
bar
"
]
"
foo
bar
"
)
;
test
(
{
}
"
[
object
Object
]
"
)
;
}
function
testNotCoercibleToString
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
TypeError
value
)
;
testPrimitiveWrappers
(
value
"
string
"
function
(
value
)
{
test
(
TypeError
value
)
;
}
)
;
}
testPrimitiveValue
(
Symbol
(
"
1
"
)
)
;
testNotCoercibleToPrimitive
(
"
string
"
test
)
;
}
function
testCoercibleToBigIntZero
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testCoercibleToBigIntFromBigInt
(
BigInt
(
0
)
test
)
;
testPrimitiveValue
(
-
BigInt
(
0
)
)
;
testPrimitiveValue
(
"
-
0
"
)
;
testPrimitiveValue
(
false
)
;
testPrimitiveValue
(
"
"
)
;
testPrimitiveValue
(
"
"
)
;
test
(
[
]
)
;
test
(
[
0
]
)
;
}
function
testCoercibleToBigIntOne
(
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testCoercibleToBigIntFromBigInt
(
BigInt
(
1
)
test
)
;
testPrimitiveValue
(
true
)
;
test
(
[
1
]
)
;
}
function
testCoercibleToBigIntFromBigInt
(
nominalBigInt
test
)
{
function
testPrimitiveValue
(
value
)
{
test
(
value
)
;
testPrimitiveWrappers
(
value
"
number
"
test
)
;
}
testPrimitiveValue
(
nominalBigInt
)
;
testPrimitiveValue
(
nominalBigInt
.
toString
(
)
)
;
testPrimitiveValue
(
"
0b
"
+
nominalBigInt
.
toString
(
2
)
)
;
testPrimitiveValue
(
"
0o
"
+
nominalBigInt
.
toString
(
8
)
)
;
testPrimitiveValue
(
"
0x
"
+
nominalBigInt
.
toString
(
16
)
)
;
testPrimitiveValue
(
"
"
+
nominalBigInt
.
toString
(
)
+
"
"
)
;
test
(
[
nominalBigInt
]
)
;
test
(
[
nominalBigInt
.
toString
(
)
]
)
;
}
function
testNotCoercibleToBigInt
(
test
)
{
function
testPrimitiveValue
(
error
value
)
{
test
(
error
value
)
;
testPrimitiveWrappers
(
value
"
number
"
function
(
value
)
{
test
(
error
value
)
;
}
)
;
}
testPrimitiveValue
(
TypeError
undefined
)
;
testPrimitiveValue
(
TypeError
null
)
;
testPrimitiveValue
(
TypeError
0
)
;
testPrimitiveValue
(
TypeError
NaN
)
;
testPrimitiveValue
(
TypeError
Infinity
)
;
testPrimitiveValue
(
TypeError
Symbol
(
"
1
"
)
)
;
function
testStringValue
(
string
)
{
testPrimitiveValue
(
SyntaxError
string
)
;
testPrimitiveValue
(
SyntaxError
"
"
+
string
)
;
testPrimitiveValue
(
SyntaxError
string
+
"
"
)
;
testPrimitiveValue
(
SyntaxError
"
"
+
string
+
"
"
)
;
}
testStringValue
(
"
a
"
)
;
testStringValue
(
"
0b2
"
)
;
testStringValue
(
"
0o8
"
)
;
testStringValue
(
"
0xg
"
)
;
testStringValue
(
"
1n
"
)
;
}
