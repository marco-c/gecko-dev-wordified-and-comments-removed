var
toPrimitiveAccessed
=
0
;
var
toStringAccessed
=
0
;
var
valueOfAccessed
=
0
;
var
thisVal
=
{
get
[
Symbol
.
toPrimitive
]
(
)
{
toPrimitiveAccessed
+
=
1
;
return
function
(
)
{
return
'
42
'
;
}
;
}
get
toString
(
)
{
toStringAccessed
+
=
1
;
return
function
(
)
{
return
'
'
;
}
;
}
get
valueOf
(
)
{
valueOfAccessed
+
=
1
;
return
function
(
)
{
return
'
'
;
}
;
}
}
;
var
result
=
String
.
prototype
.
trimEnd
.
call
(
thisVal
)
;
assert
.
sameValue
(
toPrimitiveAccessed
1
'
thisVal
[
Symbol
.
toPrimitive
]
expected
to
have
been
accessed
.
'
)
;
assert
.
sameValue
(
result
'
42
'
'
thisVal
[
Symbol
.
toPrimitive
]
expected
to
have
been
called
.
'
)
;
assert
.
sameValue
(
toStringAccessed
0
'
thisVal
.
toString
should
not
have
been
accessed
.
'
)
;
assert
.
sameValue
(
valueOfAccessed
0
'
thisVal
.
valueOf
should
not
have
been
accessed
.
'
)
;
reportCompare
(
0
0
)
;
