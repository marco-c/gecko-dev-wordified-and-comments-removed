var
poisoned
=
0
;
var
poison
=
{
toString
(
)
{
poisoned
+
=
1
;
throw
'
Should
not
call
toString
on
this
/
replaceValue
'
;
}
}
;
var
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
get
[
Symbol
.
replace
]
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
assert
.
throws
(
Test262Error
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
custom
abrupt
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
{
}
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
an
object
(
not
callable
)
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
'
'
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
a
string
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
42
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
a
number
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
Symbol
(
)
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
a
symbol
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
true
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
true
'
)
;
searchValue
=
{
[
Symbol
.
match
]
:
false
flags
:
'
g
'
[
Symbol
.
replace
]
:
false
toString
(
)
{
throw
'
Should
not
call
toString
on
searchValue
'
;
}
}
;
assert
.
throws
(
TypeError
function
(
)
{
'
'
.
replaceAll
.
call
(
poison
searchValue
poison
)
;
}
'
replace
is
false
'
)
;
assert
.
sameValue
(
poisoned
0
)
;
reportCompare
(
0
0
)
;
