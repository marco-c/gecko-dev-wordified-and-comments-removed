var
result
;
var
called
;
var
thisValue
;
called
=
0
;
thisValue
=
{
[
Symbol
.
toPrimitive
]
(
)
{
called
+
=
1
;
return
'
aa
'
;
}
toString
(
)
{
throw
'
poison
'
;
}
valueOf
(
)
{
throw
'
poison
'
;
}
}
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
a
'
'
z
'
)
;
assert
.
sameValue
(
result
'
zz
'
'
object
toPrimitive
'
)
;
assert
.
sameValue
(
called
1
'
toPrimitive
is
called
only
once
'
)
;
called
=
0
;
thisValue
=
{
[
Symbol
.
toPrimitive
]
:
undefined
toString
(
)
{
called
+
=
1
;
return
'
aa
'
;
}
valueOf
(
)
{
throw
'
poison
'
;
}
}
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
a
'
'
z
'
)
;
assert
.
sameValue
(
result
'
zz
'
'
object
toString
'
)
;
assert
.
sameValue
(
called
1
'
toString
is
called
only
once
'
)
;
called
=
0
;
thisValue
=
{
[
Symbol
.
toPrimitive
]
:
undefined
toString
:
undefined
valueOf
(
)
{
called
+
=
1
;
return
'
aa
'
;
}
}
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
a
'
'
z
'
)
;
assert
.
sameValue
(
result
'
zz
'
'
object
valueOf
'
)
;
assert
.
sameValue
(
called
1
'
valueOf
is
called
only
once
'
)
;
thisValue
=
4244
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
4
'
'
z
'
)
;
assert
.
sameValue
(
result
'
z2zz
'
'
number
'
)
;
thisValue
=
true
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
ru
'
'
o
m
'
)
;
assert
.
sameValue
(
result
'
to
me
'
'
Boolean
true
'
)
;
thisValue
=
false
;
result
=
'
'
.
replaceAll
.
call
(
thisValue
'
al
'
'
on
'
)
;
assert
.
sameValue
(
result
'
fonse
'
'
Boolean
false
'
)
;
reportCompare
(
0
0
)
;
