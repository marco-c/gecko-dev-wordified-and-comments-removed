var
str
=
'
undefined
is
not
a
function
'
;
var
result
=
str
.
split
(
undefined
1
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
1
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
1
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
1
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
2
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
2
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
2
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
2
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
undefined
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
undefined
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
undefined
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
undefined
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
true
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
boolean
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
boolean
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
boolean
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
2
*
*
32
+
1
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
ToUint32
2
*
*
32
+
1
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
ToUint32
2
*
*
32
+
1
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
ToUint32
2
*
*
32
+
1
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
2
*
*
31
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
ToUint32
2
*
*
31
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
ToUint32
2
*
*
31
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
ToUint32
2
*
*
31
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
2
*
*
16
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
ToUint32
2
*
*
16
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
ToUint32
2
*
*
16
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
ToUint32
2
*
*
16
[
0
]
is
the
same
string
'
)
;
result
=
str
.
split
(
undefined
{
valueOf
(
)
{
return
1
;
}
}
)
;
assert
.
sameValue
(
Array
.
isArray
(
result
)
true
'
boolean
result
is
array
'
)
;
assert
.
sameValue
(
result
.
length
1
'
boolean
result
.
length
'
)
;
assert
.
sameValue
(
result
[
0
]
str
'
boolean
[
0
]
is
the
same
string
'
)
;
reportCompare
(
0
0
)
;
