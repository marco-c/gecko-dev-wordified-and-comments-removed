function
ExpectedError
(
message
)
{
this
.
message
=
message
|
|
"
"
;
}
ExpectedError
.
prototype
.
toString
=
function
(
)
{
return
"
ExpectedError
:
"
+
this
.
message
;
}
;
var
split
=
String
.
prototype
.
split
;
var
nonStringableReceiver
=
{
}
;
nonStringableReceiver
.
toString
=
function
(
)
{
throw
new
ExpectedError
(
"
receiver
.
toString
"
)
;
}
;
var
splitter
=
{
}
;
splitter
[
Symbol
.
split
]
=
function
(
)
{
}
;
try
{
split
.
call
(
nonStringableReceiver
splitter
Symbol
(
)
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
undefined
'
ToString
should
not
be
called
on
the
receiver
when
the
separator
has
a
split
method
.
'
)
;
}
var
nonStringableSeparator
=
{
}
;
nonStringableSeparator
[
Symbol
.
toPrimitive
]
=
function
(
)
{
throw
new
Test262Error
(
"
separator
[
Symbol
.
toPrimitive
]
"
)
;
}
;
nonStringableSeparator
.
toString
=
function
(
)
{
throw
new
Test262Error
(
"
separator
.
toString
"
)
;
}
;
nonStringableSeparator
.
valueOf
=
function
(
)
{
throw
new
Test262Error
(
"
separator
.
valueOf
"
)
;
}
;
assert
.
throws
(
ExpectedError
function
(
)
{
split
.
call
(
nonStringableReceiver
nonStringableSeparator
Symbol
(
)
)
;
}
'
ToString
should
be
called
on
the
receiver
before
processing
the
separator
or
limit
.
'
)
;
reportCompare
(
0
0
)
;
