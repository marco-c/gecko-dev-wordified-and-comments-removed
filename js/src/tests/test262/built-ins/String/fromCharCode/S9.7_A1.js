if
(
String
.
fromCharCode
(
Number
.
NaN
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
1
.
1
:
String
.
fromCharCode
(
Number
.
NaN
)
.
charCodeAt
(
0
)
=
=
=
0
.
Actual
:
'
+
(
String
.
fromCharCode
(
Number
.
NaN
)
.
charCodeAt
(
0
)
)
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
Number
.
NaN
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
1
.
2
:
String
.
fromCharCode
(
Number
.
NaN
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
if
(
String
.
fromCharCode
(
Number
(
"
abc
"
)
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
2
.
1
:
String
.
fromCharCode
(
Number
(
"
abc
"
)
)
.
charCodeAt
(
0
)
=
=
=
0
.
Actual
:
'
+
(
String
.
fromCharCode
(
Number
(
"
abc
"
)
)
.
charCodeAt
(
0
)
)
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
2
.
2
:
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
if
(
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
3
.
1
:
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
=
=
=
0
.
Actual
:
'
+
(
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
)
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
3
.
2
:
String
.
fromCharCode
(
0
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
if
(
String
.
fromCharCode
(
-
0
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
"
#
4
.
1
:
String
.
fromCharCode
(
-
0
)
.
charCodeAt
(
0
)
=
=
=
+
0
"
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
-
0
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
"
#
4
.
2
:
String
.
fromCharCode
(
-
0
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
"
)
;
}
if
(
String
.
fromCharCode
(
Number
.
POSITIVE_INFINITY
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
'
#
5
.
1
:
String
.
fromCharCode
(
Number
.
POSITIVE_INFINITY
)
.
charCodeAt
(
0
)
=
=
=
0
.
Actual
:
'
+
(
String
.
fromCharCode
(
Number
.
POSITIVE_INFINITY
)
.
charCodeAt
(
0
)
)
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
Number
.
POSITIVE_INFINITY
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
'
#
5
.
2
:
String
.
fromCharCode
(
Number
.
POSITIVE_INFINITY
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
'
)
;
}
if
(
String
.
fromCharCode
(
Number
.
NEGATIVE_INFINITY
)
.
charCodeAt
(
0
)
!
=
=
+
0
)
{
throw
new
Test262Error
(
"
#
6
.
1
:
String
.
fromCharCode
(
Number
.
NEGATIVE_INFINITY
)
.
charCodeAt
(
0
)
=
=
=
+
0
"
)
;
}
else
if
(
1
/
String
.
fromCharCode
(
Number
.
NEGATIVE_INFINITY
)
.
charCodeAt
(
0
)
!
=
=
Number
.
POSITIVE_INFINITY
)
{
throw
new
Test262Error
(
"
#
6
.
2
:
String
.
fromCharCode
(
Number
.
NEGATIVE_INFINITY
)
.
charCodeAt
(
0
)
=
=
=
+
0
.
Actual
:
-
0
"
)
;
}
reportCompare
(
0
0
)
;
