const
instance
=
new
Temporal
.
Calendar
(
"
gregory
"
)
;
const
base
=
{
era
:
"
ad
"
month
:
5
calendar
:
"
gregory
"
}
;
[
Infinity
-
Infinity
]
.
forEach
(
(
inf
)
=
>
{
[
"
constrain
"
"
reject
"
]
.
forEach
(
(
overflow
)
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
instance
.
yearMonthFromFields
(
{
.
.
.
base
eraYear
:
inf
}
{
overflow
}
)
eraYear
property
cannot
be
{
inf
}
(
overflow
{
overflow
}
)
;
const
calls
=
[
]
;
const
obj
=
TemporalHelpers
.
toPrimitiveObserver
(
calls
inf
"
eraYear
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
instance
.
yearMonthFromFields
(
{
.
.
.
base
eraYear
:
obj
}
{
overflow
}
)
)
;
assert
.
compareArray
(
calls
[
"
get
eraYear
.
valueOf
"
"
call
eraYear
.
valueOf
"
]
"
it
fails
after
fetching
the
primitive
value
"
)
;
}
)
;
}
)
;
reportCompare
(
0
0
)
;
