const
timeZone
=
new
Temporal
.
TimeZone
(
"
UTC
"
)
;
const
instance
=
new
Temporal
.
Calendar
(
"
iso8601
"
)
;
const
rangeErrorTests
=
[
[
null
"
null
"
]
[
true
"
boolean
"
]
[
"
"
"
empty
string
"
]
[
1
"
number
that
doesn
'
t
convert
to
a
valid
ISO
string
"
]
[
1n
"
bigint
"
]
]
;
for
(
const
[
calendar
description
]
of
rangeErrorTests
)
{
const
arg
=
{
year
:
2019
monthCode
:
"
M11
"
day
:
1
calendar
}
;
assert
.
throws
(
RangeError
(
)
=
>
instance
.
eraYear
(
arg
)
{
description
}
does
not
convert
to
a
valid
ISO
string
)
;
}
const
typeErrorTests
=
[
[
Symbol
(
)
"
symbol
"
]
[
{
}
"
plain
object
that
doesn
'
t
implement
the
protocol
"
]
[
new
Temporal
.
TimeZone
(
"
UTC
"
)
"
time
zone
instance
"
]
[
Temporal
.
Calendar
"
Temporal
.
Calendar
object
"
]
[
Temporal
.
Calendar
.
prototype
"
Temporal
.
Calendar
.
prototype
object
"
]
]
;
for
(
const
[
calendar
description
]
of
typeErrorTests
)
{
const
arg
=
{
year
:
2019
monthCode
:
"
M11
"
day
:
1
calendar
}
;
assert
.
throws
(
TypeError
(
)
=
>
instance
.
eraYear
(
arg
)
{
description
}
is
not
a
valid
property
bag
and
does
not
convert
to
a
string
)
;
}
reportCompare
(
0
0
)
;
