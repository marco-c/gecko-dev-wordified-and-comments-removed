const
instance
=
new
Temporal
.
PlainDate
(
1919
3
31
)
;
const
startOfDay
=
instance
.
toZonedDateTime
(
"
America
/
Toronto
"
)
;
const
midnightDisambiguated
=
instance
.
toZonedDateTime
(
{
timeZone
:
"
America
/
Toronto
"
plainTime
:
new
Temporal
.
PlainTime
(
)
}
)
;
TemporalHelpers
.
assertDuration
(
startOfDay
.
until
(
midnightDisambiguated
)
0
0
0
0
0
30
0
0
0
0
"
start
of
day
is
30
minutes
earlier
than
following
the
disambiguation
strategy
for
midnight
"
)
;
assert
.
sameValue
(
startOfDay
.
epochNanoseconds
instance
.
toZonedDateTime
(
{
timeZone
:
"
America
/
Toronto
"
}
)
.
epochNanoseconds
"
omitted
plainTime
is
the
same
result
as
using
the
string
shorthand
"
)
;
assert
.
sameValue
(
startOfDay
.
epochNanoseconds
instance
.
toZonedDateTime
(
{
timeZone
:
"
America
/
Toronto
"
plainTime
:
undefined
}
)
.
epochNanoseconds
"
explicitly
undefined
plainTime
is
the
same
result
as
using
the
string
shorthand
"
)
;
reportCompare
(
0
0
)
;
