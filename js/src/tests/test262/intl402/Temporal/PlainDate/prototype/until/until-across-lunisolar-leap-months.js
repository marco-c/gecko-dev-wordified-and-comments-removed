const
year2000
=
new
Temporal
.
PlainDate
(
2000
3
1
)
.
withCalendar
(
"
chinese
"
)
.
year
;
const
year2001
=
new
Temporal
.
PlainDate
(
2001
3
1
)
.
withCalendar
(
"
chinese
"
)
.
year
;
const
one
=
Temporal
.
PlainDate
.
from
(
{
year
:
year2000
month
:
6
day
:
1
calendar
:
'
chinese
'
}
)
;
const
two
=
Temporal
.
PlainDate
.
from
(
{
year
:
year2001
month
:
6
day
:
1
calendar
:
'
chinese
'
}
)
;
assert
.
sameValue
(
one
.
inLeapYear
false
"
year
2000
is
not
a
leap
year
"
)
;
assert
.
sameValue
(
one
.
monthCode
"
M06
"
"
sixth
month
in
year
2000
has
month
code
M06
"
)
;
assert
.
sameValue
(
two
.
inLeapYear
true
"
year
2001
is
a
leap
year
"
)
;
assert
.
sameValue
(
two
.
monthCode
"
M05
"
"
sixth
month
in
year
2001
has
month
code
M05
"
)
;
const
expected
=
{
years
:
'
P12M
'
months
:
'
P12M
'
weeks
:
'
P50W4D
'
days
:
'
P354D
'
}
;
Object
.
entries
(
expected
)
.
forEach
(
(
[
largestUnit
expectedResult
]
)
=
>
{
const
actualResult
=
one
.
until
(
two
{
largestUnit
}
)
;
assert
.
sameValue
(
actualResult
.
toString
(
)
expectedResult
)
;
}
)
;
reportCompare
(
0
0
)
;
