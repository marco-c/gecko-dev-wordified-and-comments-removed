const
dtmFall
=
new
Temporal
.
PlainDateTime
(
2000
10
29
1
45
)
;
assert
.
sameValue
(
dtmFall
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
)
.
epochNanoseconds
972809100_000_000_000n
"
epoch
nanoseconds
in
fall
back
-
no
disambiguation
"
)
;
assert
.
sameValue
(
dtmFall
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
earlier
"
}
)
.
epochNanoseconds
972809100_000_000_000n
"
epoch
nanoseconds
in
fall
back
-
earlier
"
)
;
assert
.
sameValue
(
dtmFall
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
later
"
}
)
.
epochNanoseconds
972812700_000_000_000n
"
epoch
nanoseconds
in
fall
back
-
later
"
)
;
assert
.
sameValue
(
dtmFall
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
compatible
"
}
)
.
epochNanoseconds
972809100_000_000_000n
"
epoch
nanoseconds
in
fall
back
-
compatible
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
dtmFall
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
reject
"
}
)
"
fall
back
-
reject
"
)
;
var
dtmSpring
=
new
Temporal
.
PlainDateTime
(
2000
4
2
2
30
)
;
assert
.
sameValue
(
dtmSpring
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
)
.
epochNanoseconds
954671400_000_000_000n
"
epoch
nanoseconds
in
spring
forward
-
no
disambiguation
"
)
;
assert
.
sameValue
(
dtmSpring
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
earlier
"
}
)
.
epochNanoseconds
954667800_000_000_000n
"
epoch
nanoseconds
in
spring
forward
-
earlier
"
)
;
assert
.
sameValue
(
dtmSpring
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
later
"
}
)
.
epochNanoseconds
954671400_000_000_000n
"
epoch
nanoseconds
in
spring
forward
-
later
"
)
;
assert
.
sameValue
(
dtmSpring
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
compatible
"
}
)
.
epochNanoseconds
954671400_000_000_000n
"
epoch
nanoseconds
in
spring
forward
-
compatible
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
dtmSpring
.
toZonedDateTime
(
"
America
/
Los_Angeles
"
{
disambiguation
:
"
reject
"
}
)
"
spring
forward
-
reject
"
)
;
reportCompare
(
0
0
)
;
