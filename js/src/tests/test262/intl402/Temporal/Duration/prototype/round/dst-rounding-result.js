{
const
duration
=
new
Temporal
.
Duration
(
0
1
0
15
11
30
)
;
const
relativeTo
=
new
Temporal
.
ZonedDateTime
(
950868000_000_000_000n
"
America
/
Vancouver
"
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
smallestUnit
:
"
months
"
relativeTo
}
)
0
2
0
0
0
0
0
0
0
0
"
1
month
15
days
12
hours
should
be
exactly
1
.
5
months
which
rounds
up
to
2
months
"
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
smallestUnit
:
"
months
"
roundingMode
:
'
halfTrunc
'
relativeTo
}
)
0
1
0
0
0
0
0
0
0
0
"
1
month
15
days
12
hours
should
be
exactly
1
.
5
months
which
rounds
down
to
1
month
"
)
;
}
{
const
duration
=
new
Temporal
.
Duration
(
0
1
0
15
0
30
)
;
const
relativeTo
=
new
Temporal
.
ZonedDateTime
(
951991200_000_000_000n
"
America
/
Vancouver
"
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
smallestUnit
:
"
months
"
relativeTo
}
)
0
2
0
0
0
0
0
0
0
0
"
1
month
15
days
00
:
30
should
be
exactly
1
.
5
months
which
rounds
up
to
2
months
"
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
smallestUnit
:
"
months
"
roundingMode
:
'
halfTrunc
'
relativeTo
}
)
0
1
0
0
0
0
0
0
0
0
"
1
month
15
days
00
:
30
should
be
exactly
1
.
5
months
which
rounds
down
to
1
month
"
)
;
}
{
const
duration
=
new
Temporal
.
Duration
(
0
0
0
0
11
30
)
;
const
relativeTo
=
new
Temporal
.
PlainDateTime
(
2000
4
2
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
relativeTo
smallestUnit
:
"
days
"
}
)
0
0
0
1
0
0
0
0
0
0
)
;
TemporalHelpers
.
assertDuration
(
duration
.
round
(
{
relativeTo
smallestUnit
:
"
days
"
roundingMode
:
"
halfTrunc
"
}
)
0
0
0
0
0
0
0
0
0
0
)
;
}
reportCompare
(
0
0
)
;
