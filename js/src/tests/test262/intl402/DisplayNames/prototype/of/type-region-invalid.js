var
displayNames
=
new
Intl
.
DisplayNames
(
undefined
{
type
:
'
region
'
}
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
00
'
)
;
}
'
insufficient
length
numeric
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
a
'
)
;
}
'
insufficient
length
alpha
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
aaa
'
)
;
}
'
excessive
length
alpha
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
1111
'
)
;
}
'
excessive
length
numeric
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
'
)
;
}
'
empty
string
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
a01
'
)
;
}
'
mixed
alphanumeric
(
alpha
first
length
3
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
a1
'
)
;
}
'
mixed
alphanumeric
(
alpha
first
length
2
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
1a
'
)
;
}
'
mixed
alphanumeric
(
numeric
first
length
2
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
1a1
'
)
;
}
'
mixed
alphanumeric
(
numeric
first
length
3
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
-
111
'
)
;
}
'
leading
separator
(
dash
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
_111
'
)
;
}
'
leading
separator
(
underscore
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
111
-
'
)
;
}
'
trailing
separator
(
dash
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
111
-
'
)
;
}
'
trailing
separator
(
underscore
)
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
aa
'
)
;
}
'
leading
space
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
aa
'
)
;
}
'
trailing
space
'
)
;
assert
.
throws
(
RangeError
function
(
)
{
displayNames
.
of
(
'
a
c
'
)
;
}
'
interstitial
space
'
)
;
reportCompare
(
0
0
)
;
