var
locales
=
{
length
:
{
valueOf
(
)
{
throw
new
Test262Error
(
)
;
}
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
Intl
.
DisplayNames
(
locales
)
;
}
'
poisoned
valueOf
for
ToNumber
'
)
;
locales
.
length
=
{
[
Symbol
.
toPrimitive
]
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
Intl
.
DisplayNames
(
locales
)
;
}
'
poisoned
ToPrimitive
for
ToNumber
'
)
;
locales
.
length
=
{
toString
(
)
{
throw
new
Test262Error
(
)
;
}
}
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
Intl
.
DisplayNames
(
locales
)
;
}
'
poisoned
toString
for
ToNumber
'
)
;
locales
.
length
=
Symbol
(
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
Intl
.
DisplayNames
(
locales
)
;
}
'
length
is
Symbol
'
)
;
locales
.
length
=
BigInt
(
1
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
new
Intl
.
DisplayNames
(
locales
)
;
}
'
length
is
BigInt
'
)
;
reportCompare
(
0
0
)
;
