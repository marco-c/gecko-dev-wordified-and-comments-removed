let
breakCounts
=
{
}
;
for
(
const
locale
of
[
"
en
"
"
fr
"
"
ja
"
"
zh
"
"
ko
"
]
)
{
for
(
const
lineBreakStyle
of
[
"
strict
"
"
normal
"
"
loose
"
]
)
{
const
seg
=
new
Intl
.
Segmenter
(
[
locale
]
{
granularity
:
"
line
"
lineBreakStyle
:
lineBreakStyle
}
)
;
let
opportunity
=
0
;
for
(
const
text
of
[
"
"
"
ABC
DEF
GHI
JKL
MNO
"
"
"
"
ABC
DEF
GHI
JKL
MNO
PQR
"
"
ABC
DEF
GHI
JKL
MNO
PQR
"
]
)
{
const
iter
=
seg
.
segment
(
text
)
;
while
(
!
iter
.
following
(
)
)
{
opportunity
+
+
;
}
}
breakCounts
[
locale
+
"
-
"
+
lineBreakStyle
]
=
opportunity
;
}
}
assert
(
breakCounts
[
"
ja
-
loose
"
]
>
breakCounts
[
"
ja
-
normal
"
]
)
;
assert
(
breakCounts
[
"
ja
-
normal
"
]
>
breakCounts
[
"
ja
-
strict
"
]
)
;
assert
(
breakCounts
[
"
zh
-
loose
"
]
>
breakCounts
[
"
zh
-
normal
"
]
)
;
assert
(
breakCounts
[
"
zh
-
normal
"
]
>
breakCounts
[
"
zh
-
strict
"
]
)
;
assert
(
breakCounts
[
"
en
-
loose
"
]
>
=
breakCounts
[
"
en
-
normal
"
]
)
;
assert
(
breakCounts
[
"
fr
-
loose
"
]
>
=
breakCounts
[
"
fr
-
normal
"
]
)
;
assert
(
breakCounts
[
"
ko
-
loose
"
]
>
=
breakCounts
[
"
ko
-
normal
"
]
)
;
assert
(
breakCounts
[
"
en
-
normal
"
]
>
breakCounts
[
"
en
-
strict
"
]
)
;
assert
(
breakCounts
[
"
fr
-
normal
"
]
>
breakCounts
[
"
fr
-
strict
"
]
)
;
assert
(
breakCounts
[
"
ko
-
normal
"
]
>
breakCounts
[
"
ko
-
strict
"
]
)
;
reportCompare
(
0
0
)
;
