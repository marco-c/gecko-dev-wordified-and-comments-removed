function
nextDown
(
num
)
{
if
(
!
Number
.
isFinite
(
num
)
)
{
return
num
;
}
if
(
num
=
=
=
0
)
{
return
-
Number
.
MIN_VALUE
;
}
let
f64
=
new
Float64Array
(
[
num
]
)
;
let
u64
=
new
BigUint64Array
(
f64
.
buffer
)
;
u64
[
0
]
+
=
(
num
<
0
?
1n
:
-
1n
)
;
return
f64
[
0
]
;
}
const
df
=
new
Intl
.
DurationFormat
(
)
;
const
invalidValues
=
{
days
:
[
Math
.
ceil
(
(
Number
.
MAX_SAFE_INTEGER
+
1
)
/
86400
)
]
hours
:
[
Math
.
ceil
(
(
Number
.
MAX_SAFE_INTEGER
+
1
)
/
3600
)
]
minutes
:
[
Math
.
ceil
(
(
Number
.
MAX_SAFE_INTEGER
+
1
)
/
60
)
]
seconds
:
[
Number
.
MAX_SAFE_INTEGER
+
1
]
milliseconds
:
[
(
Number
.
MAX_SAFE_INTEGER
+
1
)
*
1e3
9007199254740992_000
]
microseconds
:
[
(
Number
.
MAX_SAFE_INTEGER
+
1
)
*
1e6
9007199254740992_000_000
]
nanoseconds
:
[
(
Number
.
MAX_SAFE_INTEGER
+
1
)
*
1e9
9007199254740992_000_000_000
]
}
;
const
validValues
=
{
days
:
[
Math
.
floor
(
Number
.
MAX_SAFE_INTEGER
/
86400
)
]
hours
:
[
Math
.
floor
(
Number
.
MAX_SAFE_INTEGER
/
3600
)
]
minutes
:
[
Math
.
floor
(
Number
.
MAX_SAFE_INTEGER
/
60
)
]
seconds
:
[
Number
.
MAX_SAFE_INTEGER
]
milliseconds
:
[
Number
.
MAX_SAFE_INTEGER
*
1e3
nextDown
(
9007199254740992_000
)
]
microseconds
:
[
Number
.
MAX_SAFE_INTEGER
*
1e6
nextDown
(
9007199254740992_000_000
)
]
nanoseconds
:
[
Number
.
MAX_SAFE_INTEGER
*
1e9
nextDown
(
9007199254740992_000_000_000
)
]
}
;
for
(
let
[
unit
values
]
of
Object
.
entries
(
invalidValues
)
)
{
for
(
let
value
of
values
)
{
let
positive
=
{
[
unit
]
:
value
}
;
assert
.
throws
(
RangeError
(
)
=
>
df
.
format
(
positive
)
Duration
"
{
unit
}
"
throws
when
value
is
{
value
}
)
;
let
negative
=
{
[
unit
]
:
-
value
}
;
assert
.
throws
(
RangeError
(
)
=
>
df
.
format
(
negative
)
Duration
"
{
unit
}
"
throws
when
value
is
{
-
value
}
)
;
}
}
for
(
let
[
unit
values
]
of
Object
.
entries
(
validValues
)
)
{
for
(
let
value
of
values
)
{
let
positive
=
{
[
unit
]
:
value
}
;
assert
.
sameValue
(
typeof
df
.
format
(
positive
)
"
string
"
Duration
"
{
unit
}
"
doesn
'
t
throw
when
value
is
{
value
}
)
;
let
negative
=
{
[
unit
]
:
-
value
}
;
assert
.
sameValue
(
typeof
df
.
format
(
negative
)
"
string
"
Duration
"
{
unit
}
"
doesn
'
t
throw
when
value
is
{
-
value
}
)
;
}
}
reportCompare
(
0
0
)
;
