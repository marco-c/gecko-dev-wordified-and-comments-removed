const
validNumericOptions
=
[
[
false
false
]
[
true
true
]
[
null
false
]
[
0
false
]
[
0
.
5
true
]
[
"
true
"
true
]
[
"
false
"
true
]
[
{
valueOf
(
)
{
return
false
;
}
}
true
]
]
;
for
(
const
[
numeric
expected
]
of
validNumericOptions
)
{
let
expect
=
expected
?
"
en
-
u
-
kn
"
:
"
en
-
u
-
kn
-
false
"
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
'
{
numeric
}
)
.
toString
(
)
expect
new
Intl
.
Locale
(
"
en
"
{
numeric
:
{
numeric
}
}
)
.
toString
(
)
returns
"
{
expected
}
"
)
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kn
-
true
'
{
numeric
}
)
.
toString
(
)
expect
new
Intl
.
Locale
(
"
en
-
u
-
kn
-
true
"
{
numeric
:
{
numeric
}
}
)
.
toString
(
)
returns
"
{
expected
}
"
)
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kf
-
lower
'
{
numeric
}
)
.
numeric
expected
new
Intl
.
Locale
(
"
en
-
u
-
kf
-
lower
"
{
numeric
:
{
numeric
}
}
)
.
numeric
equals
"
{
expected
}
"
)
;
}
reportCompare
(
0
0
)
;
