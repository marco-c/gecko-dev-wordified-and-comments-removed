const
validNumericOptions
=
[
[
undefined
undefined
]
[
false
"
false
"
]
[
true
"
true
"
]
[
null
"
false
"
]
[
0
"
false
"
]
[
0
.
5
"
true
"
]
[
{
valueOf
(
)
{
return
false
;
}
}
"
true
"
]
]
;
for
(
const
[
numeric
expected
]
of
validNumericOptions
)
{
const
options
=
{
numeric
}
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
'
options
)
.
toString
(
)
expected
?
(
"
en
-
u
-
kn
-
"
+
expected
)
:
"
en
"
)
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kn
-
true
'
options
)
.
toString
(
)
"
en
-
u
-
kn
-
"
+
(
expected
|
|
"
true
"
)
)
;
if
(
"
numeric
"
in
Intl
.
Locale
.
prototype
)
{
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kf
-
lower
'
options
)
.
numeric
expected
)
;
}
}
reportCompare
(
0
0
)
;
