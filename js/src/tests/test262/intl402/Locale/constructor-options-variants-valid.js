const
validVariantsOptions
=
[
[
'
en
'
undefined
undefined
]
[
'
en
'
'
spanglis
'
'
en
-
spanglis
'
]
[
'
xx
'
'
1xyz
'
'
xx
-
1xyz
'
]
[
'
xx
'
'
1234
'
'
xx
-
1234
'
]
[
'
xx
'
'
abcde
'
'
xx
-
abcde
'
]
[
'
xx
'
'
12345678
'
'
xx
-
12345678
'
]
[
'
xx
'
'
1xyz
-
1234
-
abcde
-
12345678
'
'
xx
-
1234
-
12345678
-
1xyz
-
abcde
'
]
[
'
en
'
'
spanglis
-
oxendict
'
'
en
-
oxendict
-
spanglis
'
]
]
;
for
(
const
[
lang
variants
baseName
]
of
validVariantsOptions
)
{
let
options
=
{
variants
}
;
let
optionsRepr
=
{
variants
:
{
typeof
variants
=
=
=
"
string
"
?
"
{
variants
}
"
:
variants
}
}
;
let
instance
;
let
expect
;
instance
=
new
Intl
.
Locale
(
lang
options
)
;
expect
=
baseName
|
|
lang
;
assert
.
sameValue
(
instance
.
toString
(
)
expect
new
Intl
.
Locale
(
"
{
lang
}
"
{
optionsRepr
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
instance
=
new
Intl
.
Locale
(
lang
+
'
-
fonipa
'
options
)
;
expect
=
baseName
|
|
(
lang
+
'
-
fonipa
'
)
;
assert
.
sameValue
(
instance
.
toString
(
)
expect
new
Intl
.
Locale
(
"
{
lang
}
-
fonipa
"
{
optionsRepr
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
instance
=
new
Intl
.
Locale
(
lang
+
'
-
u
-
ca
-
gregory
'
options
)
;
expect
=
(
baseName
|
|
lang
)
+
'
-
u
-
ca
-
gregory
'
;
assert
.
sameValue
(
instance
.
toString
(
)
expect
new
Intl
.
Locale
(
"
{
lang
}
-
u
-
ca
-
gregory
"
{
optionsRepr
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
instance
=
new
Intl
.
Locale
(
lang
+
'
-
fonipa
-
u
-
ca
-
gregory
'
options
)
;
expect
=
(
baseName
|
|
(
lang
+
'
-
fonipa
'
)
)
+
'
-
u
-
ca
-
gregory
'
;
assert
.
sameValue
(
instance
.
toString
(
)
expect
new
Intl
.
Locale
(
"
{
lang
}
-
fonipa
-
u
-
ca
-
gregory
"
{
optionsRepr
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
}
reportCompare
(
0
0
)
;
