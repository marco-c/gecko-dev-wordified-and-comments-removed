const
irregularGrandfathered
=
[
"
en
-
GB
-
oed
"
"
i
-
ami
"
"
i
-
bnn
"
"
i
-
default
"
"
i
-
enochian
"
"
i
-
hak
"
"
i
-
klingon
"
"
i
-
lux
"
"
i
-
mingo
"
"
i
-
navajo
"
"
i
-
pwn
"
"
i
-
tao
"
"
i
-
tay
"
"
i
-
tsu
"
"
sgn
-
BE
-
FR
"
"
sgn
-
BE
-
NL
"
"
sgn
-
CH
-
DE
"
]
;
for
(
const
tag
of
irregularGrandfathered
)
{
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
tag
)
)
;
}
const
regularGrandfathered
=
[
{
tag
:
"
art
-
lojban
"
canonical
:
"
jbo
"
maximized
:
"
jbo
-
Latn
-
001
"
}
{
tag
:
"
zh
-
guoyu
"
canonical
:
"
cmn
"
}
{
tag
:
"
zh
-
hakka
"
canonical
:
"
hak
"
maximized
:
"
hak
-
Hans
-
CN
"
}
{
tag
:
"
zh
-
xiang
"
canonical
:
"
hsn
"
maximized
:
"
hsn
-
Hans
-
CN
"
}
]
;
for
(
const
{
tag
canonical
maximized
=
canonical
minimized
=
canonical
}
of
regularGrandfathered
)
{
assert
.
sameValue
(
Intl
.
getCanonicalLocales
(
tag
)
[
0
]
canonical
)
;
const
loc
=
new
Intl
.
Locale
(
tag
)
;
assert
.
sameValue
(
loc
.
toString
(
)
canonical
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
toString
(
)
maximized
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
maximize
(
)
.
toString
(
)
maximized
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
toString
(
)
minimized
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
minimize
(
)
.
toString
(
)
minimized
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
minimize
(
)
.
toString
(
)
minimized
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
maximize
(
)
.
toString
(
)
maximized
)
;
}
const
regularGrandfatheredWithExtLang
=
[
"
no
-
bok
"
"
no
-
nyn
"
"
zh
-
min
"
"
zh
-
min
-
nan
"
]
;
for
(
const
tag
of
regularGrandfatheredWithExtLang
)
{
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
tag
)
)
;
}
const
extras
=
[
"
fonipa
"
"
a
-
not
-
assigned
"
"
u
-
attr
"
"
u
-
co
"
"
u
-
co
-
phonebk
"
"
x
-
private
"
]
;
for
(
const
{
tag
}
of
regularGrandfathered
)
{
const
priv
=
"
-
x
-
0
"
;
const
tagMax
=
new
Intl
.
Locale
(
tag
+
priv
)
.
maximize
(
)
.
toString
(
)
.
slice
(
0
-
priv
.
length
)
;
const
tagMin
=
new
Intl
.
Locale
(
tag
+
priv
)
.
minimize
(
)
.
toString
(
)
.
slice
(
0
-
priv
.
length
)
;
for
(
const
extra
of
extras
)
{
const
loc
=
new
Intl
.
Locale
(
tag
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
toString
(
)
tag
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
toString
(
)
tagMax
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
maximize
(
)
.
toString
(
)
tagMax
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
toString
(
)
tagMin
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
minimize
(
)
.
toString
(
)
tagMin
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
maximize
(
)
.
minimize
(
)
.
toString
(
)
tagMin
+
"
-
"
+
extra
)
;
assert
.
sameValue
(
loc
.
minimize
(
)
.
maximize
(
)
.
toString
(
)
tagMax
+
"
-
"
+
extra
)
;
}
}
reportCompare
(
0
0
)
;
