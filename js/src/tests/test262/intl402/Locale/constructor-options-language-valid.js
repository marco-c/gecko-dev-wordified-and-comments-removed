const
validLanguageOptions
=
[
[
null
'
null
'
]
[
'
zh
-
cmn
'
'
cmn
'
]
[
'
ZH
-
CMN
'
'
cmn
'
]
[
{
toString
(
)
{
return
'
de
'
}
}
'
de
'
]
]
;
for
(
const
[
language
expected
]
of
validLanguageOptions
)
{
let
expect
=
expected
|
|
'
en
'
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
'
{
language
}
)
.
toString
(
)
expect
new
Intl
.
Locale
(
'
en
'
{
language
:
"
{
language
}
"
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
expect
=
(
expected
|
|
'
en
'
)
+
'
-
US
'
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
US
'
{
language
}
)
.
toString
(
)
expect
new
Intl
.
Locale
(
'
en
-
US
'
{
language
:
"
{
language
}
"
}
)
.
toString
(
)
returns
"
{
expect
}
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
'
en
-
els
'
{
language
}
)
)
;
}
const
invalidLanguageOptions
=
[
'
abcd
'
]
;
for
(
const
language
of
invalidLanguageOptions
)
{
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
'
en
'
{
language
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
'
en
-
US
'
{
language
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
new
Intl
.
Locale
(
'
en
-
els
'
{
language
}
)
)
;
}
reportCompare
(
0
0
)
;
