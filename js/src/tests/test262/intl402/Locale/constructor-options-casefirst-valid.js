const
validCaseFirstOptions
=
[
"
upper
"
"
lower
"
"
false
"
false
{
toString
(
)
{
return
false
;
}
}
]
;
for
(
const
caseFirst
of
validCaseFirstOptions
)
{
const
options
=
{
caseFirst
}
;
const
expected
=
String
(
caseFirst
)
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
'
options
)
.
toString
(
)
"
en
-
u
-
kf
-
"
+
expected
)
;
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kf
-
lower
'
options
)
.
toString
(
)
"
en
-
u
-
kf
-
"
+
expected
)
;
if
(
"
caseFirst
"
in
Intl
.
Locale
.
prototype
)
{
assert
.
sameValue
(
new
Intl
.
Locale
(
'
en
-
u
-
kf
-
lower
'
options
)
.
caseFirst
expected
)
;
}
}
reportCompare
(
0
0
)
;
