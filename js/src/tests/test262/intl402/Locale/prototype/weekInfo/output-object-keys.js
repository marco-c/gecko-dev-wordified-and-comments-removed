const
result
=
new
Intl
.
Locale
(
'
en
'
)
.
weekInfo
;
function
isIntegerBetweenOneAndSeven
(
value
)
{
return
value
=
=
=
1
|
|
value
=
=
=
2
|
|
value
=
=
=
3
|
|
value
=
=
=
4
|
|
value
=
=
=
5
|
|
value
=
=
=
6
|
|
value
=
=
=
7
;
}
assert
.
compareArray
(
Reflect
.
ownKeys
(
result
)
[
'
firstDay
'
'
weekend
'
'
minimalDays
'
]
)
;
verifyProperty
(
result
'
firstDay
'
{
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
assert
(
isIntegerBetweenOneAndSeven
(
new
Intl
.
Locale
(
'
en
'
)
.
weekInfo
.
firstDay
)
'
firstDay
must
be
an
integer
between
one
and
seven
(
inclusive
)
'
)
;
verifyProperty
(
result
'
weekend
'
{
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
assert
(
new
Intl
.
Locale
(
'
en
'
)
.
weekInfo
.
weekend
.
every
(
isIntegerBetweenOneAndSeven
)
'
weekend
must
include
integers
between
one
and
seven
(
inclusive
)
'
)
;
let
original
=
new
Intl
.
Locale
(
'
en
'
)
.
weekInfo
.
weekend
;
let
sorted
=
original
.
slice
(
)
.
sort
(
)
;
assert
.
compareArray
(
original
sorted
)
;
verifyProperty
(
result
'
minimalDays
'
{
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
assert
(
isIntegerBetweenOneAndSeven
(
new
Intl
.
Locale
(
'
en
'
)
.
weekInfo
.
minimalDays
)
'
minimalDays
must
be
an
integer
between
one
and
seven
(
inclusive
)
'
)
;
reportCompare
(
0
0
)
;
