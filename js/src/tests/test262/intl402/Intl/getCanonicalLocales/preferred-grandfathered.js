var
irregularGrandfathered
=
[
"
en
-
gb
-
oed
"
"
i
-
ami
"
"
i
-
bnn
"
"
i
-
default
"
"
i
-
enochian
"
"
i
-
hak
"
"
i
-
klingon
"
"
i
-
lux
"
"
i
-
mingo
"
"
i
-
navajo
"
"
i
-
pwn
"
"
i
-
tao
"
"
i
-
tay
"
"
i
-
tsu
"
"
sgn
-
be
-
fr
"
"
sgn
-
be
-
nl
"
"
sgn
-
ch
-
de
"
]
;
var
regularGrandfatheredNonUTS35
=
[
"
no
-
bok
"
"
no
-
nyn
"
"
zh
-
min
"
"
zh
-
min
-
nan
"
]
;
var
regularGrandfatheredUTS35
=
{
"
art
-
lojban
"
:
"
jbo
"
"
cel
-
gaulish
"
:
"
xtg
-
x
-
cel
-
gaulish
"
"
zh
-
guoyu
"
:
"
zh
"
"
zh
-
hakka
"
:
"
hak
"
"
zh
-
xiang
"
:
"
hsn
"
}
;
irregularGrandfathered
.
forEach
(
function
(
tag
)
{
assert
.
sameValue
(
isCanonicalizedStructurallyValidLanguageTag
(
tag
)
false
"
Test
data
\
"
"
+
tag
+
"
\
"
is
not
a
structurally
valid
language
tag
.
"
)
;
}
)
;
regularGrandfatheredNonUTS35
.
forEach
(
function
(
tag
)
{
assert
.
sameValue
(
isCanonicalizedStructurallyValidLanguageTag
(
tag
)
false
"
Test
data
\
"
"
+
tag
+
"
\
"
is
not
a
structurally
valid
language
tag
.
"
)
;
}
)
;
Object
.
getOwnPropertyNames
(
regularGrandfatheredUTS35
)
.
forEach
(
function
(
tag
)
{
var
canonicalizedTag
=
regularGrandfatheredUTS35
[
tag
]
;
assert
(
isCanonicalizedStructurallyValidLanguageTag
(
canonicalizedTag
)
"
Test
data
\
"
"
+
canonicalizedTag
+
"
\
"
is
a
canonicalized
and
structurally
valid
language
tag
.
"
)
;
}
)
;
Object
.
getOwnPropertyNames
(
regularGrandfatheredUTS35
)
.
forEach
(
function
(
tag
)
{
var
canonicalLocales
=
Intl
.
getCanonicalLocales
(
tag
)
;
assert
.
sameValue
(
canonicalLocales
.
length
1
)
;
assert
.
sameValue
(
canonicalLocales
[
0
]
regularGrandfatheredUTS35
[
tag
]
)
;
}
)
;
reportCompare
(
0
0
)
;
