const
numberingSystems
=
Intl
.
supportedValuesOf
(
"
numberingSystem
"
)
;
assert
(
Array
.
isArray
(
numberingSystems
)
"
Returns
an
Array
object
.
"
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
numberingSystems
)
Array
.
prototype
"
The
array
prototype
is
Array
.
prototype
"
)
;
const
otherNumberingSystems
=
Intl
.
supportedValuesOf
(
"
numberingSystem
"
)
;
assert
.
notSameValue
(
otherNumberingSystems
numberingSystems
"
Returns
a
new
array
object
for
each
call
.
"
)
;
assert
.
compareArray
(
numberingSystems
otherNumberingSystems
.
sort
(
)
"
The
array
is
sorted
.
"
)
;
assert
.
sameValue
(
new
Set
(
numberingSystems
)
.
size
numberingSystems
.
length
"
The
array
doesn
'
t
contain
duplicates
.
"
)
;
const
typeRE
=
/
^
[
a
-
z0
-
9
]
{
3
8
}
(
-
[
a
-
z0
-
9
]
{
3
8
}
)
*
/
;
for
(
let
numberingSystem
of
numberingSystems
)
{
assert
(
typeRE
.
test
(
numberingSystem
)
{
numberingSystem
}
matches
the
'
type
'
production
)
;
}
for
(
let
numberingSystem
of
numberingSystems
)
{
assert
.
sameValue
(
new
Intl
.
Locale
(
"
und
"
{
numberingSystem
}
)
.
numberingSystem
numberingSystem
{
numberingSystem
}
is
canonicalised
)
;
}
reportCompare
(
0
0
)
;
