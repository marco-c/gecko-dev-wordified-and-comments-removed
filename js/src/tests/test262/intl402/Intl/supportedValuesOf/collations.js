const
collations
=
Intl
.
supportedValuesOf
(
"
collation
"
)
;
assert
(
Array
.
isArray
(
collations
)
"
Returns
an
Array
object
.
"
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
collations
)
Array
.
prototype
"
The
array
prototype
is
Array
.
prototype
"
)
;
const
otherCollations
=
Intl
.
supportedValuesOf
(
"
collation
"
)
;
assert
.
notSameValue
(
otherCollations
collations
"
Returns
a
new
array
object
for
each
call
.
"
)
;
assert
.
compareArray
(
collations
otherCollations
.
sort
(
)
"
The
array
is
sorted
.
"
)
;
assert
.
sameValue
(
new
Set
(
collations
)
.
size
collations
.
length
"
The
array
doesn
'
t
contain
duplicates
.
"
)
;
const
typeRE
=
/
^
[
a
-
z0
-
9
]
{
3
8
}
(
-
[
a
-
z0
-
9
]
{
3
8
}
)
*
/
;
for
(
let
collation
of
collations
)
{
assert
(
typeRE
.
test
(
collation
)
{
collation
}
matches
the
'
type
'
production
)
;
}
for
(
let
collation
of
collations
)
{
assert
.
sameValue
(
new
Intl
.
Locale
(
"
und
"
{
collation
}
)
.
collation
collation
{
collation
}
is
canonicalised
)
;
}
assert
(
!
collations
.
includes
(
"
standard
"
)
"
Mustn
'
t
include
the
'
standard
'
collation
type
.
"
)
;
assert
(
!
collations
.
includes
(
"
search
"
)
"
Mustn
'
t
include
the
'
search
'
collation
type
.
"
)
;
reportCompare
(
0
0
)
;
