let
calendars
=
allCalendars
(
)
;
let
date1
=
new
Date
(
2017
3
12
)
;
let
date2
=
new
Date
(
)
;
function
serializeTypesAndLiteral
(
parts
)
{
let
types
=
parts
.
map
(
part
=
>
{
if
(
part
.
type
=
=
"
literal
"
)
{
return
{
part
.
type
}
(
{
part
.
value
}
)
;
}
return
part
.
type
;
}
)
;
return
types
.
join
(
"
:
"
)
;
}
let
df
=
new
Intl
.
DateTimeFormat
(
"
en
"
)
;
let
base
=
serializeTypesAndLiteral
(
df
.
formatRangeToParts
(
date1
date2
)
)
;
const
foundDifferentPattern
=
calendars
.
some
(
function
(
calendar
)
{
let
cdf
=
new
Intl
.
DateTimeFormat
(
"
en
-
u
-
ca
-
"
+
calendar
)
;
return
base
!
=
serializeTypesAndLiteral
(
cdf
.
formatRangeToParts
(
date1
date2
)
)
;
}
)
;
assert
.
sameValue
(
foundDifferentPattern
true
)
;
reportCompare
(
0
0
)
;
