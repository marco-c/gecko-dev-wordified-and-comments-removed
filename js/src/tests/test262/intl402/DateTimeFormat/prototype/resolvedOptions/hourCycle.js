const
hcValuePairs
=
[
[
"
h11
"
"
h12
"
]
[
"
h23
"
"
h24
"
]
]
;
const
hour12Values
=
[
'
h11
'
'
h12
'
]
;
const
hour24Values
=
[
'
h23
'
'
h24
'
]
;
for
(
const
hcValuePair
of
hcValuePairs
)
{
for
(
const
hcValue
of
hcValuePair
)
{
const
resolvedOptions
=
new
Intl
.
DateTimeFormat
(
de
-
u
-
hc
-
{
hcValue
}
{
hour
:
'
numeric
'
}
)
.
resolvedOptions
(
)
;
mustHaveProperty
(
resolvedOptions
'
hourCycle
'
hcValuePair
)
;
mustHaveProperty
(
resolvedOptions
'
hour12
'
[
hour12Values
.
includes
(
hcValue
)
]
)
;
}
}
for
(
const
hcValuePair
of
hcValuePairs
)
{
for
(
const
hcValue
of
hcValuePair
)
{
const
resolvedOptions
=
new
Intl
.
DateTimeFormat
(
en
-
US
{
hour
:
'
numeric
'
hourCycle
:
hcValue
}
)
.
resolvedOptions
(
)
;
mustHaveProperty
(
resolvedOptions
'
hourCycle
'
hcValuePair
)
;
mustHaveProperty
(
resolvedOptions
'
hour12
'
[
hour12Values
.
includes
(
hcValue
)
]
)
;
}
}
let
resolvedOptions
=
new
Intl
.
DateTimeFormat
(
en
-
US
-
u
-
hc
-
h12
{
hour
:
'
numeric
'
hourCycle
:
'
h23
'
}
)
.
resolvedOptions
(
)
;
mustHaveProperty
(
resolvedOptions
'
hourCycle
'
[
'
h23
'
'
h24
'
]
)
;
mustHaveProperty
(
resolvedOptions
'
hour12
'
[
false
]
)
;
resolvedOptions
=
new
Intl
.
DateTimeFormat
(
fr
{
hour
:
'
numeric
'
hour12
:
true
hourCycle
:
'
h23
'
}
)
.
resolvedOptions
(
)
;
mustHaveProperty
(
resolvedOptions
'
hourCycle
'
[
'
h11
'
'
h12
'
]
)
;
mustHaveProperty
(
resolvedOptions
'
hour12
'
[
true
]
)
;
resolvedOptions
=
new
Intl
.
DateTimeFormat
(
fr
-
u
-
hc
-
h24
{
hour
:
'
numeric
'
hour12
:
true
}
)
.
resolvedOptions
(
)
;
mustHaveProperty
(
resolvedOptions
'
hourCycle
'
[
'
h11
'
'
h12
'
]
)
;
mustHaveProperty
(
resolvedOptions
'
hour12
'
[
true
]
)
;
reportCompare
(
0
0
)
;
