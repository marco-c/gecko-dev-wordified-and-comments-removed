var
dtf
=
new
Intl
.
DateTimeFormat
(
undefined
{
hour
:
"
numeric
"
minute
:
"
numeric
"
second
:
"
numeric
"
}
)
;
function
formatAsString
(
dtf
time
)
{
return
dtf
.
formatToParts
(
time
)
.
map
(
part
=
>
part
.
value
)
.
join
(
"
"
)
;
}
var
expected
=
formatAsString
(
dtf
0
)
;
assert
.
sameValue
(
formatAsString
(
dtf
-
0
.
9
)
expected
"
formatToParts
(
-
0
.
9
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
-
0
.
5
)
expected
"
formatToParts
(
-
0
.
5
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
-
0
.
1
)
expected
"
formatToParts
(
-
0
.
1
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
-
Number
.
MIN_VALUE
)
expected
"
formatToParts
(
-
Number
.
MIN_VALUE
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
-
0
)
expected
"
formatToParts
(
-
0
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
+
0
)
expected
"
formatToParts
(
+
0
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
Number
.
MIN_VALUE
)
expected
"
formatToParts
(
Number
.
MIN_VALUE
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
0
.
1
)
expected
"
formatToParts
(
0
.
1
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
0
.
5
)
expected
"
formatToParts
(
0
.
5
)
"
)
;
assert
.
sameValue
(
formatAsString
(
dtf
0
.
9
)
expected
"
formatToParts
(
0
.
9
)
"
)
;
reportCompare
(
0
0
)
;
