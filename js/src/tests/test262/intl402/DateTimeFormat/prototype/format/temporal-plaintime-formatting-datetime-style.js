const
locale
=
"
en
-
US
"
;
const
timeZone
=
"
Pacific
/
Apia
"
;
const
dateStyles
=
[
"
full
"
"
long
"
"
medium
"
"
short
"
]
;
const
timeStyles
=
[
"
full
"
"
long
"
"
medium
"
"
short
"
]
;
const
time
=
new
Temporal
.
PlainTime
(
0
34
56
777
888
999
)
;
const
expected
=
{
full
:
{
hour
:
true
minute
:
true
second
:
true
millisecond
:
false
microsecond
:
false
nanosecond
:
false
}
long
:
{
hour
:
true
minute
:
true
second
:
true
millisecond
:
false
microsecond
:
false
nanosecond
:
false
}
medium
:
{
hour
:
true
minute
:
true
second
:
true
millisecond
:
false
microsecond
:
false
nanosecond
:
false
}
short
:
{
hour
:
true
minute
:
true
second
:
false
millisecond
:
false
microsecond
:
false
nanosecond
:
false
}
}
;
function
ensureTimeField
(
result
field
value
timeStyle
)
{
let
present
=
expected
[
timeStyle
]
[
field
]
;
let
verb
=
present
?
"
should
"
:
"
should
not
"
;
assert
.
sameValue
(
result
.
includes
(
value
)
present
timeStyle
=
{
timeStyle
}
:
{
field
}
{
verb
}
appear
)
;
}
for
(
let
dateStyle
of
dateStyles
)
{
let
dtf
=
new
Intl
.
DateTimeFormat
(
locale
{
dateStyle
timeZone
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
dtf
.
format
(
time
)
dateStyle
=
{
dateStyle
}
)
;
}
for
(
let
timeStyle
of
timeStyles
)
{
let
dtf
=
new
Intl
.
DateTimeFormat
(
locale
{
timeStyle
timeZone
}
)
;
let
result
=
dtf
.
format
(
time
)
;
ensureTimeField
(
result
"
hour
"
"
12
"
timeStyle
)
;
ensureTimeField
(
result
"
minute
"
"
34
"
timeStyle
)
;
ensureTimeField
(
result
"
second
"
"
56
"
timeStyle
)
;
ensureTimeField
(
result
"
millisecond
"
"
777
"
timeStyle
)
;
ensureTimeField
(
result
"
microsecond
"
"
888
"
timeStyle
)
;
ensureTimeField
(
result
"
nanosecond
"
"
999
"
timeStyle
)
;
for
(
let
dateStyle
of
dateStyles
)
{
let
dtf
=
new
Intl
.
DateTimeFormat
(
locale
{
dateStyle
timeStyle
timeZone
}
)
;
assert
.
sameValue
(
dtf
.
format
(
time
)
result
dateStyle
=
{
dateStyle
}
timeStyle
=
{
timeStyle
}
)
;
}
}
reportCompare
(
0
0
)
;
