const
values
=
[
[
undefined
"
short
"
]
[
"
short
"
]
[
"
narrow
"
]
[
"
long
"
]
]
;
for
(
const
[
value
expected
=
value
]
of
values
)
{
const
nf
=
new
Intl
.
NumberFormat
(
[
]
{
style
:
"
unit
"
unitDisplay
:
value
unit
:
"
hour
"
}
)
;
const
resolvedOptions
=
nf
.
resolvedOptions
(
)
;
assert
.
sameValue
(
"
unitDisplay
"
in
resolvedOptions
true
)
;
assert
.
sameValue
(
resolvedOptions
.
unitDisplay
expected
)
;
}
for
(
const
[
value
expected
=
value
]
of
values
)
{
const
nf
=
new
Intl
.
NumberFormat
(
[
]
{
style
:
"
unit
"
unitDisplay
:
value
unit
:
"
percent
"
}
)
;
const
resolvedOptions
=
nf
.
resolvedOptions
(
)
;
assert
.
sameValue
(
"
unitDisplay
"
in
resolvedOptions
true
)
;
assert
.
sameValue
(
resolvedOptions
.
unitDisplay
expected
)
;
}
for
(
const
[
value
]
of
values
)
{
const
nf
=
new
Intl
.
NumberFormat
(
[
]
{
style
:
"
percent
"
unitDisplay
:
value
}
)
;
const
resolvedOptions
=
nf
.
resolvedOptions
(
)
;
assert
.
sameValue
(
"
unitDisplay
"
in
resolvedOptions
false
)
;
assert
.
sameValue
(
resolvedOptions
.
unitDisplay
undefined
)
;
}
const
invalidValues
=
[
"
"
"
Short
"
"
s
"
"
\
u017Fhort
"
]
;
for
(
const
unitDisplay
of
invalidValues
)
{
assert
.
throws
(
RangeError
(
)
=
>
{
new
Intl
.
NumberFormat
(
[
]
{
unitDisplay
}
)
;
}
)
;
}
reportCompare
(
0
0
)
;
