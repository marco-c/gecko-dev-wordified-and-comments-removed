const
nf
=
new
Intl
.
NumberFormat
(
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
23
12
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
23n
12n
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
23
-
Infinity
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
23
-
0
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
0
-
0
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
Infinity
23
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
Infinity
-
Infinity
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
Infinity
-
0
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
-
0
-
1
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
assert
.
sameValue
(
typeof
nf
.
formatRangeToParts
(
-
0
-
Infinity
)
"
object
"
"
should
return
object
not
throw
RangeError
"
)
;
reportCompare
(
0
0
)
;
