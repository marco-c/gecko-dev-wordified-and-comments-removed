const
nf
=
new
Intl
.
NumberFormat
(
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
23
12
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
23n
12n
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
23
-
Infinity
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
23
-
0
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
0
-
0
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
Infinity
23
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
Infinity
-
Infinity
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
Infinity
-
0
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
-
0
-
1
)
}
)
;
assert
.
throws
(
RangeError
(
)
=
>
{
nf
.
formatRangeToParts
(
-
0
-
Infinity
)
}
)
;
reportCompare
(
0
0
)
;
