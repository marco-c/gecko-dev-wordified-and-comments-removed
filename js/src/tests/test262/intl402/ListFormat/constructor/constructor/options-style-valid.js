const
validOptions
=
[
[
undefined
"
long
"
]
[
"
long
"
"
long
"
]
[
"
short
"
"
short
"
]
[
{
toString
(
)
{
return
"
short
"
;
}
}
"
short
"
]
]
;
for
(
const
[
validOption
expected
]
of
validOptions
)
{
const
lf
=
new
Intl
.
ListFormat
(
[
]
{
"
style
"
:
validOption
}
)
;
const
resolvedOptions
=
lf
.
resolvedOptions
(
)
;
assert
.
sameValue
(
resolvedOptions
.
style
expected
)
;
}
const
lf
=
new
Intl
.
ListFormat
(
[
]
{
"
style
"
:
"
narrow
"
"
type
"
:
"
unit
"
}
)
;
const
resolvedOptions
=
lf
.
resolvedOptions
(
)
;
assert
.
sameValue
(
resolvedOptions
.
style
"
narrow
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
lf
=
new
Intl
.
ListFormat
(
[
]
{
"
style
"
:
"
narrow
"
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
lf
=
new
Intl
.
ListFormat
(
[
]
{
"
style
"
:
"
narrow
"
"
type
"
:
"
conjuction
"
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
lf
=
new
Intl
.
ListFormat
(
[
]
{
"
style
"
:
"
narrow
"
"
type
"
:
"
disjuction
"
}
)
)
;
reportCompare
(
0
0
)
;
