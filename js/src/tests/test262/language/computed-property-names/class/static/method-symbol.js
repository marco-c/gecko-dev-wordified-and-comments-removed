var
sym1
=
Symbol
(
)
;
var
sym2
=
Symbol
(
)
;
class
C
{
static
a
(
)
{
return
'
A
'
;
}
static
[
sym1
]
(
)
{
return
'
B
'
;
}
static
c
(
)
{
return
'
C
'
;
}
static
[
sym2
]
(
)
{
return
'
D
'
;
}
}
assert
.
sameValue
(
C
.
a
(
)
'
A
'
"
C
.
a
(
)
returns
'
A
'
.
Defined
as
static
a
(
)
{
return
'
A
'
;
}
"
)
;
assert
.
sameValue
(
C
[
sym1
]
(
)
'
B
'
"
C
[
sym1
]
(
)
returns
'
B
'
.
Defined
as
static
[
sym1
]
(
)
{
return
'
B
'
;
}
"
)
;
assert
.
sameValue
(
C
.
c
(
)
'
C
'
"
C
.
c
(
)
returns
'
C
'
.
Defined
as
static
c
(
)
{
return
'
C
'
;
}
"
)
;
assert
.
sameValue
(
C
[
sym2
]
(
)
'
D
'
"
C
[
sym2
]
(
)
returns
'
D
'
.
Defined
as
static
[
sym2
]
(
)
{
return
'
D
'
;
}
"
)
;
assert
.
compareArray
(
Object
.
keys
(
C
)
[
]
)
;
reportCompare
(
0
0
)
;
