async
function
fn
(
)
{
let
err
;
let
result
=
Object
.
create
(
null
)
;
const
keep
=
result
;
try
{
result
=
await
import
(
'
.
/
double
-
error
-
resolution_FIXTURE
.
js
'
)
;
}
catch
(
error
)
{
err
=
error
;
}
assert
.
sameValue
(
err
'
foo
'
'
first
evaluation
should
be
an
abrupt
completion
'
)
;
assert
.
sameValue
(
result
keep
'
result
should
not
be
set
'
)
;
err
=
undefined
;
try
{
result
=
await
import
(
'
.
/
double
-
error
-
resolution_FIXTURE
.
js
'
)
;
}
catch
(
error
)
{
err
=
error
;
}
assert
.
sameValue
(
result
keep
'
result
should
still
be
the
same
as
keep
'
)
;
assert
.
sameValue
(
err
'
foo
'
'
second
evaluation
should
repeat
the
same
abrupt
completion
'
)
;
}
fn
(
)
.
then
(
DONE
DONE
)
;
