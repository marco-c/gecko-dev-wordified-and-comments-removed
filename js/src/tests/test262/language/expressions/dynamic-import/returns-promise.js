const
originalPromise
=
Promise
;
fnGlobalObject
(
)
.
Promise
=
function
(
)
{
throw
"
This
should
not
be
called
"
;
}
;
const
p
=
import
(
'
.
/
dynamic
-
import
-
module_FIXTURE
.
js
'
)
;
assert
.
sameValue
(
p
.
constructor
originalPromise
'
constructor
is
%
Promise
%
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
p
)
originalPromise
.
prototype
'
prototype
is
%
PromisePrototype
%
'
)
;
assert
.
sameValue
(
p
.
then
originalPromise
.
prototype
.
then
'
preserves
the
original
then
method
'
)
;
assert
.
sameValue
(
p
.
catch
originalPromise
.
prototype
.
catch
'
preserves
the
original
catch
method
'
)
;
assert
.
sameValue
(
p
.
finally
originalPromise
.
prototype
.
finally
'
preserves
the
original
finally
method
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
hasOwnProperty
.
call
(
p
'
then
'
)
false
'
returned
promise
has
no
own
property
then
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
hasOwnProperty
.
call
(
p
'
catch
'
)
false
'
returned
promise
has
no
own
property
catch
'
)
;
assert
.
sameValue
(
Object
.
prototype
.
hasOwnProperty
.
call
(
p
'
finally
'
)
false
'
returned
promise
has
no
own
property
finally
'
)
;
reportCompare
(
0
0
)
;
