var
calls
=
0
;
var
reason
=
{
}
;
var
obj
=
{
get
[
Symbol
.
iterator
]
(
)
{
throw
reason
;
}
get
[
Symbol
.
asyncIterator
]
(
)
{
calls
+
=
1
;
return
undefined
;
}
}
;
var
callCount
=
0
;
var
C
=
class
{
async
*
#
gen
(
)
{
callCount
+
=
1
;
yield
*
obj
;
throw
new
Test262Error
(
'
abrupt
completion
closes
iter
'
)
;
}
get
gen
(
)
{
return
this
.
#
gen
;
}
}
const
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
'
)
;
var
iter
=
c
.
gen
(
)
;
iter
.
next
(
)
.
then
(
(
)
=
>
{
throw
new
Test262Error
(
'
Promise
incorrectly
fulfilled
.
'
)
;
}
v
=
>
{
assert
.
sameValue
(
v
reason
'
reject
reason
'
)
;
assert
.
sameValue
(
calls
1
)
;
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
'
the
iterator
is
completed
'
)
;
assert
.
sameValue
(
value
undefined
'
value
is
undefined
'
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
'
)
;
