var
C
=
class
{
async
*
m
(
)
{
return
42
;
}
#
m
=
'
test262
'
;
;
method
(
)
{
return
this
.
#
m
;
}
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
m
"
)
false
)
;
assert
.
sameValue
(
c
.
m
C
.
prototype
.
m
)
;
verifyProperty
(
C
.
prototype
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
{
restore
:
true
}
)
;
c
.
m
(
)
.
next
(
)
.
then
(
function
(
v
)
{
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
function
assertions
(
)
{
function
DONE
(
error
)
{
if
(
error
)
{
throw
new
Test262Error
(
'
Test262
:
AsyncTestFailure
'
)
}
}
assert
.
sameValue
(
c
.
method
(
)
'
test262
'
)
;
}
return
Promise
.
resolve
(
assertions
(
)
)
;
}
DONE
)
.
then
(
DONE
DONE
)
;
