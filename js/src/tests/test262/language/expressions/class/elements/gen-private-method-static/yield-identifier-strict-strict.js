'
use
strict
'
;
DONOTEVALUATE
(
)
;
var
callCount
=
0
;
var
C
=
class
{
static
*
#
gen
(
)
{
callCount
+
=
1
;
(
function
(
)
{
var
yield
;
throw
new
Test262Error
(
)
;
}
(
)
)
}
static
get
gen
(
)
{
return
this
.
#
gen
;
}
}
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
var
iter
=
C
.
gen
(
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
