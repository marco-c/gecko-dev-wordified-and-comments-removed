var
x
=
Symbol
(
)
;
var
y
=
Symbol
(
)
;
var
C
=
class
{
static
m
(
)
{
return
42
;
}
[
x
]
;
[
y
]
=
42
;
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
C
.
m
(
)
42
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
m
"
)
"
m
doesn
'
t
appear
as
an
own
property
on
the
C
instance
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
m
"
)
"
m
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
C
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
x
)
"
Symbol
x
doesn
'
t
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
x
)
"
Symbol
x
doesn
'
t
appear
as
an
own
property
on
C
constructor
"
)
;
verifyProperty
(
c
x
{
value
:
undefined
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
y
)
"
Symbol
y
doesn
'
t
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
y
)
"
Symbol
y
doesn
'
t
appear
as
an
own
property
on
C
constructor
"
)
;
verifyProperty
(
c
y
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
x
"
)
"
x
doesn
'
t
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
x
"
)
"
x
doesn
'
t
appear
as
an
own
property
on
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
x
"
)
"
x
doesn
'
t
appear
as
an
own
property
on
C
instance
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
y
"
)
"
y
doesn
'
t
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
y
"
)
"
y
doesn
'
t
appear
as
an
own
property
on
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
y
"
)
"
y
doesn
'
t
appear
as
an
own
property
on
C
instance
"
)
;
reportCompare
(
0
0
)
;
