var
C
=
class
{
static
#
x
(
value
)
{
return
value
/
2
;
}
static
#
y
(
value
)
{
return
value
*
2
;
}
static
x
(
)
{
return
this
.
#
x
(
84
)
;
}
static
y
(
)
{
return
this
.
#
y
(
43
)
;
}
}
var
c
=
new
C
(
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
x
"
)
"
test
1
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
"
test
2
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
"
test
3
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
y
"
)
"
test
4
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
"
test
5
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
"
test
6
"
)
;
assert
.
sameValue
(
C
.
x
(
)
42
"
test
7
"
)
;
assert
.
sameValue
(
C
.
y
(
)
86
"
test
8
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
"
test
9
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
"
test
10
"
)
;
reportCompare
(
0
0
)
;
