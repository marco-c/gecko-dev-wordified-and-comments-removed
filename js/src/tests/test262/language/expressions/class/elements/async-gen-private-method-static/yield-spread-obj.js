var
callCount
=
0
;
var
C
=
class
{
static
async
*
#
gen
(
)
{
callCount
+
=
1
;
yield
{
.
.
.
yield
y
:
1
.
.
.
yield
yield
}
;
}
static
get
gen
(
)
{
return
this
.
#
gen
;
}
}
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
#
gen
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
#
gen
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
var
iter
=
C
.
gen
(
)
;
iter
.
next
(
)
;
iter
.
next
(
{
x
:
42
}
)
;
iter
.
next
(
{
x
:
'
lol
'
}
)
;
var
item
=
iter
.
next
(
{
y
:
39
}
)
;
item
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
value
.
x
42
)
;
assert
.
sameValue
(
value
.
y
39
)
;
assert
.
sameValue
(
Object
.
keys
(
value
)
.
length
2
)
;
assert
.
sameValue
(
done
false
)
;
}
)
.
then
(
DONE
DONE
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
#
gen
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
#
gen
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
