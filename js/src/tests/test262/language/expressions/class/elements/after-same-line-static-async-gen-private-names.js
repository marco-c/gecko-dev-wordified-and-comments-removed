var
C
=
class
{
static
async
*
m
(
)
{
return
42
;
}
#
x
;
#
y
;
x
(
)
{
this
.
#
x
=
42
;
return
this
.
#
x
;
}
y
(
)
{
this
.
#
y
=
43
;
return
this
.
#
y
;
}
}
var
c
=
new
C
(
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
m
"
)
"
m
doesn
'
t
appear
as
an
own
property
on
the
C
instance
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
m
"
)
"
m
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
C
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
{
restore
:
true
}
)
;
C
.
m
(
)
.
next
(
)
.
then
(
function
(
v
)
{
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
function
assertions
(
)
{
function
DONE
(
error
)
{
if
(
error
)
{
throw
new
Test262Error
(
'
Test262
:
AsyncTestFailure
'
)
}
}
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
x
"
)
"
test
1
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
"
test
2
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
"
test
3
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
y
"
)
"
test
4
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
"
test
5
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
"
test
6
"
)
;
assert
.
sameValue
(
c
.
x
(
)
42
"
test
7
"
)
;
assert
.
sameValue
(
c
.
y
(
)
43
"
test
8
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
"
test
9
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
"
test
10
"
)
;
}
return
Promise
.
resolve
(
assertions
(
)
)
;
}
)
.
then
(
DONE
DONE
)
;
