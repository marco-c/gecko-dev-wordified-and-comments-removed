var
C
=
class
{
async
m
(
)
{
return
42
;
}
static
#
x
;
static
#
y
;
static
x
(
)
{
this
.
#
x
=
42
;
return
this
.
#
x
;
}
static
y
(
)
{
this
.
#
y
=
43
;
return
this
.
#
y
;
}
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
m
"
)
false
)
;
assert
.
sameValue
(
c
.
m
C
.
prototype
.
m
)
;
verifyProperty
(
C
.
prototype
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
{
restore
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
x
"
)
false
"
test
1
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
false
"
test
2
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
false
"
test
3
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
y
"
)
false
"
test
4
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
false
"
test
5
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
false
"
test
6
"
)
;
assert
.
sameValue
(
C
.
x
(
)
42
"
test
7
"
)
;
assert
.
sameValue
(
C
.
y
(
)
43
"
test
8
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
false
"
test
9
"
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
false
"
test
10
"
)
;
c
.
m
(
)
.
then
(
function
(
v
)
{
assert
.
sameValue
(
v
42
)
;
}
DONE
)
.
then
(
DONE
DONE
)
;
