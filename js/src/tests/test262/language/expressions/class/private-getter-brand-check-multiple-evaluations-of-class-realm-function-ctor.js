let
classStringExpression
=
return
class
{
get
#
m
(
)
{
return
'
test262
'
;
}
access
(
o
)
{
return
o
.
#
m
;
}
}
;
let
createAndInstantiateClass
=
function
(
)
{
let
realm
=
262
.
createRealm
(
)
;
let
classFactoryFunction
=
new
(
realm
.
global
.
Function
)
(
classStringExpression
)
;
let
Class
=
classFactoryFunction
(
)
;
let
obj
=
new
Class
(
)
;
obj
.
realm
=
realm
;
return
obj
;
}
;
let
c1
=
createAndInstantiateClass
(
)
;
let
c2
=
createAndInstantiateClass
(
)
;
assert
.
sameValue
(
c1
.
access
(
c1
)
'
test262
'
)
;
assert
.
sameValue
(
c2
.
access
(
c2
)
'
test262
'
)
;
assert
.
throws
(
c1
.
realm
.
global
.
TypeError
function
(
)
{
c1
.
access
(
c2
)
;
}
'
invalid
access
of
c1
private
method
'
)
;
assert
.
throws
(
c2
.
realm
.
global
.
TypeError
function
(
)
{
c2
.
access
(
c1
)
;
}
'
invalid
access
of
c2
private
method
'
)
;
reportCompare
(
0
0
)
;
