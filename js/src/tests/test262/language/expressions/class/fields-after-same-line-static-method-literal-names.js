const
fn
=
function
(
)
{
}
var
C
=
class
{
static
m
(
)
{
return
42
;
}
a
;
b
=
42
;
c
=
fn
;
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
C
.
m
(
)
42
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
m
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
m
"
)
false
)
;
verifyProperty
(
C
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
a
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
a
"
)
false
)
;
verifyProperty
(
c
"
a
"
{
value
:
undefined
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
b
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
b
"
)
false
)
;
verifyProperty
(
c
"
b
"
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
c
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
c
"
)
false
)
;
verifyProperty
(
c
"
c
"
{
value
:
fn
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
reportCompare
(
0
0
)
;
