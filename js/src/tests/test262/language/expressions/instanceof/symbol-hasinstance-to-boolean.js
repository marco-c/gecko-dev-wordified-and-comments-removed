var
F
=
{
}
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
undefined
;
}
;
assert
.
sameValue
(
0
instanceof
F
false
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
null
;
}
;
assert
.
sameValue
(
0
instanceof
F
false
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
true
;
}
;
assert
.
sameValue
(
0
instanceof
F
true
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
NaN
;
}
;
assert
.
sameValue
(
0
instanceof
F
false
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
1
;
}
;
assert
.
sameValue
(
0
instanceof
F
true
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
'
'
;
}
;
assert
.
sameValue
(
0
instanceof
F
false
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
'
string
'
;
}
;
assert
.
sameValue
(
0
instanceof
F
true
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
Symbol
(
)
;
}
;
assert
.
sameValue
(
0
instanceof
F
true
)
;
F
[
Symbol
.
hasInstance
]
=
function
(
)
{
return
{
}
;
}
;
assert
.
sameValue
(
0
instanceof
F
true
)
;
reportCompare
(
0
0
)
;
