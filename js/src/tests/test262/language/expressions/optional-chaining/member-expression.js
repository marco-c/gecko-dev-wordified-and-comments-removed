const
a
=
{
b
:
22
}
;
assert
.
sameValue
(
22
a
?
.
b
)
;
function
fn
(
)
{
return
this
?
.
a
}
assert
.
sameValue
(
33
fn
.
call
(
{
a
:
33
}
)
)
;
assert
.
sameValue
(
undefined
"
hello
"
?
.
a
)
;
assert
.
sameValue
(
undefined
null
?
.
a
)
;
assert
.
sameValue
(
2
[
1
2
]
?
.
[
1
]
)
;
assert
.
sameValue
(
44
{
a
:
44
}
?
.
a
)
;
assert
.
sameValue
(
'
a
'
(
function
a
(
)
{
}
?
.
name
)
)
;
assert
.
sameValue
(
'
Foo
'
(
class
Foo
{
}
?
.
name
)
)
;
assert
.
sameValue
(
'
a
'
(
function
*
a
(
)
{
}
?
.
name
)
)
;
assert
.
sameValue
(
'
a
'
(
async
function
a
(
)
{
}
?
.
name
)
)
;
assert
.
sameValue
(
'
a
'
(
async
function
*
a
(
)
{
}
?
.
name
)
)
;
assert
.
sameValue
(
true
/
[
a
-
z
]
/
?
.
test
(
'
a
'
)
)
;
assert
.
sameValue
(
'
h
'
hello
?
.
[
0
]
)
;
assert
.
sameValue
(
undefined
(
{
a
:
33
}
null
)
?
.
a
)
;
assert
.
sameValue
(
33
(
undefined
{
a
:
33
}
)
?
.
a
)
;
const
arr
=
[
{
a
:
33
}
]
;
assert
.
sameValue
(
33
arr
[
0
]
?
.
a
)
;
assert
.
sameValue
(
undefined
arr
[
1
]
?
.
a
)
;
const
obj
=
{
a
:
{
b
:
44
}
}
;
assert
.
sameValue
(
44
obj
.
a
?
.
b
)
;
assert
.
sameValue
(
undefined
obj
.
c
?
.
b
)
;
function
f2
(
)
{
return
{
a
:
33
}
;
}
function
f3
(
)
{
}
assert
.
sameValue
(
33
f2
hello
world
?
.
a
)
;
assert
.
sameValue
(
undefined
f3
hello
world
?
.
a
)
;
class
A
{
a
(
)
{
}
undf
(
)
{
return
super
.
a
?
.
c
;
}
}
class
B
extends
A
{
dot
(
)
{
return
super
.
a
?
.
name
;
}
expr
(
)
{
return
super
[
'
a
'
]
?
.
name
;
}
undf2
(
)
{
return
super
.
b
?
.
c
;
}
}
const
subcls
=
new
B
(
)
;
assert
.
sameValue
(
'
a
'
subcls
.
dot
(
)
)
;
assert
.
sameValue
(
'
a
'
subcls
.
expr
(
)
)
;
assert
.
sameValue
(
undefined
subcls
.
undf2
(
)
)
;
assert
.
sameValue
(
undefined
(
new
A
(
)
)
.
undf
(
)
)
;
class
C
{
constructor
(
)
{
assert
.
sameValue
(
undefined
new
.
target
?
.
a
)
;
}
}
new
C
(
)
;
class
D
{
constructor
(
val
)
{
this
.
a
=
val
;
}
}
assert
.
sameValue
(
99
new
D
(
99
)
?
.
a
)
;
reportCompare
(
0
0
)
;
