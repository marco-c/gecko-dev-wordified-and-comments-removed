function
asyncTest
(
testFunc
)
{
if
(
!
Object
.
hasOwn
(
globalThis
"
DONE
"
)
)
{
throw
new
Test262Error
(
"
asyncTest
called
without
async
flag
"
)
;
}
if
(
typeof
testFunc
!
=
=
"
function
"
)
{
DONE
(
new
Test262Error
(
"
asyncTest
called
with
non
-
function
argument
"
)
)
;
return
;
}
try
{
testFunc
(
)
.
then
(
function
(
)
{
DONE
(
)
;
}
function
(
error
)
{
DONE
(
error
)
;
}
)
;
}
catch
(
syncError
)
{
DONE
(
syncError
)
;
}
}
assert
.
throwsAsync
=
function
(
expectedErrorConstructor
func
message
)
{
return
new
Promise
(
function
(
resolve
)
{
var
fail
=
function
(
detail
)
{
if
(
message
=
=
=
undefined
)
{
throw
new
Test262Error
(
detail
)
;
}
throw
new
Test262Error
(
message
+
"
"
+
detail
)
;
}
;
if
(
typeof
expectedErrorConstructor
!
=
=
"
function
"
)
{
fail
(
"
assert
.
throwsAsync
called
with
an
argument
that
is
not
an
error
constructor
"
)
;
}
if
(
typeof
func
!
=
=
"
function
"
)
{
fail
(
"
assert
.
throwsAsync
called
with
an
argument
that
is
not
a
function
"
)
;
}
var
expectedName
=
expectedErrorConstructor
.
name
;
var
expectation
=
"
Expected
a
"
+
expectedName
+
"
to
be
thrown
asynchronously
"
;
var
res
;
try
{
res
=
func
(
)
;
}
catch
(
thrown
)
{
fail
(
expectation
+
"
but
the
function
threw
synchronously
"
)
;
}
if
(
res
=
=
=
null
|
|
typeof
res
!
=
=
"
object
"
|
|
typeof
res
.
then
!
=
=
"
function
"
)
{
fail
(
expectation
+
"
but
result
was
not
a
thenable
"
)
;
}
var
onResFulfilled
onResRejected
;
var
resSettlementP
=
new
Promise
(
function
(
onFulfilled
onRejected
)
{
onResFulfilled
=
onFulfilled
;
onResRejected
=
onRejected
;
}
)
;
try
{
res
.
then
(
onResFulfilled
onResRejected
)
}
catch
(
thrown
)
{
fail
(
expectation
+
"
but
.
then
threw
synchronously
"
)
;
}
resolve
(
resSettlementP
.
then
(
function
(
)
{
fail
(
expectation
+
"
but
no
exception
was
thrown
at
all
"
)
;
}
function
(
thrown
)
{
var
actualName
;
if
(
thrown
=
=
=
null
|
|
typeof
thrown
!
=
=
"
object
"
)
{
fail
(
expectation
+
"
but
thrown
value
was
not
an
object
"
)
;
}
else
if
(
thrown
.
constructor
!
=
=
expectedErrorConstructor
)
{
actualName
=
thrown
.
constructor
.
name
;
if
(
expectedName
=
=
=
actualName
)
{
fail
(
expectation
+
"
but
got
a
different
error
constructor
with
the
same
name
"
)
;
}
fail
(
expectation
+
"
but
got
a
"
+
actualName
)
;
}
}
)
)
;
}
)
;
}
;
function
isConstructor
(
f
)
{
if
(
typeof
f
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
isConstructor
invoked
with
a
non
-
function
value
"
)
;
}
try
{
Reflect
.
construct
(
function
(
)
{
}
[
]
f
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
