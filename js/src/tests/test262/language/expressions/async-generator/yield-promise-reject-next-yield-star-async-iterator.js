let
error
=
new
Error
(
)
;
async
function
*
readFile
(
)
{
yield
Promise
.
reject
(
error
)
;
yield
"
unreachable
"
;
}
var
callCount
=
0
;
var
gen
=
async
function
*
(
)
{
callCount
+
=
1
;
yield
*
readFile
(
)
;
}
;
var
iter
=
gen
(
)
;
iter
.
next
(
)
.
then
(
(
)
=
>
{
throw
new
Test262Error
(
"
Promise
incorrectly
resolved
.
"
)
;
}
rejectValue
=
>
{
assert
.
sameValue
(
rejectValue
error
)
;
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
"
The
value
of
IteratorResult
.
done
is
true
"
)
;
assert
.
sameValue
(
value
undefined
"
The
value
of
IteratorResult
.
value
is
undefined
"
)
;
}
)
.
then
(
DONE
DONE
)
;
}
DONE
)
.
catch
(
DONE
)
;
assert
.
sameValue
(
callCount
1
)
;
