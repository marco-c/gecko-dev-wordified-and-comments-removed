var
quickIter
=
{
}
;
var
normalCompletion
=
false
;
var
errorCompletion
=
false
;
var
delegationComplete
=
false
;
var
iter
returnReceived
;
quickIter
[
Symbol
.
iterator
]
=
function
(
)
{
return
{
next
:
function
(
)
{
return
{
done
:
false
}
;
}
return
:
function
(
x
)
{
returnReceived
=
x
;
return
{
done
:
true
value
:
3333
}
;
}
}
;
}
;
function
*
g
(
)
{
try
{
yield
*
quickIter
;
normalCompletion
=
true
;
}
catch
(
e
)
{
errorCompletion
=
true
;
}
finally
{
delegationComplete
=
true
;
}
}
iter
=
g
(
)
;
iter
.
next
(
)
;
iter
.
return
(
2222
)
;
assert
.
sameValue
(
returnReceived
2222
)
;
assert
.
sameValue
(
delegationComplete
true
'
delegation
complete
'
)
;
assert
.
sameValue
(
normalCompletion
false
'
completion
was
abrupt
'
)
;
assert
.
sameValue
(
errorCompletion
false
'
completion
was
not
of
type
"
throw
"
'
)
;
reportCompare
(
0
0
)
;
