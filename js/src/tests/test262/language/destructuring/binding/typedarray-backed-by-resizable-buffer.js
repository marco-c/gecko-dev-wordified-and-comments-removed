for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
fixedLengthWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
2
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
let
ta_write
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
ta_write
[
i
]
=
MayNeedBigInt
(
ta_write
i
)
;
}
{
let
[
a
b
c
d
e
]
=
fixedLength
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
d
]
)
[
0
1
2
3
]
)
;
assert
.
sameValue
(
e
undefined
)
;
}
{
let
[
a
b
c
]
=
fixedLengthWithOffset
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
]
)
[
2
3
]
)
;
assert
.
sameValue
(
c
undefined
)
;
}
{
let
[
a
b
c
d
e
]
=
lengthTracking
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
d
]
)
[
0
1
2
3
]
)
;
assert
.
sameValue
(
e
undefined
)
;
}
{
let
[
a
b
c
]
=
lengthTrackingWithOffset
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
]
)
[
2
3
]
)
;
assert
.
sameValue
(
c
undefined
)
;
}
rab
.
resize
(
3
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLength
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLengthWithOffset
;
}
)
;
{
let
[
a
b
c
d
]
=
lengthTracking
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
]
)
[
0
1
2
]
)
;
assert
.
sameValue
(
d
undefined
)
;
}
{
let
[
a
b
]
=
lengthTrackingWithOffset
;
assert
.
compareArray
(
ToNumbers
(
[
a
]
)
[
2
]
)
;
assert
.
sameValue
(
b
undefined
)
;
}
rab
.
resize
(
1
*
ctor
.
BYTES_PER_ELEMENT
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLength
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLengthWithOffset
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
lengthTrackingWithOffset
;
}
)
;
{
let
[
a
b
]
=
lengthTracking
;
assert
.
compareArray
(
ToNumbers
(
[
a
]
)
[
0
]
)
;
assert
.
sameValue
(
b
undefined
)
;
}
rab
.
resize
(
0
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLength
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
fixedLengthWithOffset
;
}
)
;
assert
.
throws
(
TypeError
(
)
=
>
{
let
[
a
b
c
]
=
lengthTrackingWithOffset
;
}
)
;
{
let
[
a
]
=
lengthTracking
;
assert
.
sameValue
(
a
undefined
)
;
}
rab
.
resize
(
6
*
ctor
.
BYTES_PER_ELEMENT
)
;
{
let
[
a
b
c
d
e
]
=
fixedLength
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
d
]
)
[
0
0
0
0
]
)
;
assert
.
sameValue
(
e
undefined
)
;
}
{
let
[
a
b
c
]
=
fixedLengthWithOffset
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
]
)
[
0
0
]
)
;
assert
.
sameValue
(
c
undefined
)
;
}
{
let
[
a
b
c
d
e
f
g
]
=
lengthTracking
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
d
e
f
]
)
[
0
0
0
0
0
0
]
)
;
assert
.
sameValue
(
g
undefined
)
;
}
{
let
[
a
b
c
d
e
]
=
lengthTrackingWithOffset
;
assert
.
compareArray
(
ToNumbers
(
[
a
b
c
d
]
)
[
0
0
0
0
]
)
;
assert
.
sameValue
(
e
undefined
)
;
}
}
reportCompare
(
0
0
)
;
