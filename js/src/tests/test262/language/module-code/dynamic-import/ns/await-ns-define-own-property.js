var
sym
=
Symbol
(
'
test262
'
)
;
const
exported
=
[
'
local1
'
'
renamed
'
'
indirect
'
]
;
async
function
fn
(
)
{
const
ns
=
await
import
(
'
.
/
define
-
own
-
property_FIXTURE
.
js
'
)
;
for
(
const
key
of
[
'
local2
'
0
sym
Symbol
.
iterator
]
)
{
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
key
{
}
)
false
'
Reflect
.
defineProperty
:
'
+
key
.
toString
(
)
)
;
assert
.
throws
(
TypeError
function
(
)
{
Object
.
defineProperty
(
ns
key
{
}
)
;
}
'
Object
.
defineProperty
:
'
+
key
.
toString
(
)
)
;
}
for
(
const
key
of
(
[
.
.
.
exported
Symbol
.
toStringTag
]
)
)
{
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
key
{
}
)
true
No
change
requested
Reflect
.
defineProperty
:
{
key
.
toString
(
)
}
)
;
assert
.
sameValue
(
Object
.
defineProperty
(
ns
key
{
}
)
ns
No
change
requested
Object
.
defineProperty
:
{
key
.
toString
(
)
}
)
;
}
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
'
indirect
'
{
writable
:
true
enumerable
:
true
configurable
:
false
}
)
true
'
Reflect
.
defineProperty
:
indirect
'
)
;
assert
.
sameValue
(
Object
.
defineProperty
(
ns
'
indirect
'
{
writable
:
true
enumerable
:
true
configurable
:
false
}
)
ns
'
Object
.
defineProperty
:
indirect
'
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
Symbol
.
toStringTag
{
value
:
"
Module
"
writable
:
false
enumerable
:
false
configurable
:
false
}
)
true
'
Reflect
.
defineProperty
:
Symbol
.
toStringTag
'
)
;
assert
.
sameValue
(
Object
.
defineProperty
(
ns
Symbol
.
toStringTag
{
value
:
"
Module
"
writable
:
false
enumerable
:
false
configurable
:
false
}
)
ns
'
Object
.
defineProperty
:
Symbol
.
toStringTag
'
)
;
for
(
const
key
of
(
[
.
.
.
exported
Symbol
.
toStringTag
]
)
)
{
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
key
{
value
:
123
}
)
false
Change
requested
Reflect
.
defineProperty
:
{
key
.
toString
(
)
}
)
;
assert
.
throws
(
TypeError
function
(
)
{
Object
.
defineProperty
(
ns
key
{
value
:
123
}
)
;
}
Change
requested
Object
.
defineProperty
:
{
key
.
toString
(
)
}
)
;
}
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
'
indirect
'
{
writable
:
true
enumerable
:
true
configurable
:
true
}
)
false
'
Reflect
.
defineProperty
:
indirect
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
Object
.
defineProperty
(
ns
'
indirect
'
{
writable
:
true
enumerable
:
true
configurable
:
true
}
)
;
}
'
Object
.
defineProperty
:
indirect
'
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
ns
Symbol
.
toStringTag
{
value
:
"
module
"
writable
:
false
enumerable
:
false
configurable
:
false
}
)
false
'
Reflect
.
defineProperty
:
Symbol
.
toStringTag
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
Object
.
defineProperty
(
ns
Symbol
.
toStringTag
{
value
:
"
module
"
writable
:
false
enumerable
:
false
configurable
:
false
}
)
;
}
'
Object
.
defineProperty
:
Symbol
.
toStringTag
'
)
;
}
fn
(
)
.
then
(
DONE
DONE
)
.
catch
(
DONE
)
;
