var
count
=
{
catch
:
0
finally
:
0
}
;
var
fn
=
function
(
)
{
try
{
return
'
try
'
;
}
catch
(
e
)
{
count
.
catch
+
=
1
;
return
'
catch
'
;
}
finally
{
count
.
finally
+
=
1
;
return
'
finally
'
;
}
return
'
wat
'
;
}
;
assert
.
sameValue
(
fn
(
)
'
finally
'
'
1
:
try
Return
catch
Return
finally
Return
;
Completion
:
finally
'
)
;
assert
.
sameValue
(
count
.
catch
0
'
1
'
)
;
assert
.
sameValue
(
count
.
finally
1
'
1
'
)
;
count
.
catch
=
0
;
count
.
finally
=
0
;
fn
=
function
(
)
{
try
{
throw
'
try
'
;
}
catch
(
e
)
{
count
.
catch
+
=
1
;
return
'
catch
'
;
}
finally
{
count
.
finally
+
=
1
;
return
'
finally
'
;
}
return
'
wat
'
;
}
;
assert
.
sameValue
(
fn
(
)
'
finally
'
'
2
:
try
Abrupt
catch
Return
finally
Return
;
Completion
:
finally
'
)
;
assert
.
sameValue
(
count
.
catch
1
'
2
:
catch
count
'
)
;
assert
.
sameValue
(
count
.
finally
1
'
2
:
fiinally
count
'
)
;
count
.
catch
=
0
;
count
.
finally
=
0
;
fn
=
function
(
)
{
try
{
throw
'
try
'
;
}
catch
(
e
)
{
count
.
catch
+
=
1
;
throw
'
catch
'
;
}
finally
{
count
.
finally
+
=
1
;
return
'
finally
'
;
}
return
'
wat
'
;
}
;
assert
.
sameValue
(
fn
(
)
'
finally
'
fn
'
3
:
try
Abrupt
catch
Abrupt
finally
Normal
;
Completion
:
finally
'
)
;
assert
.
sameValue
(
count
.
catch
1
'
3
:
catch
count
'
)
;
assert
.
sameValue
(
count
.
finally
1
'
3
:
fiinally
count
'
)
;
reportCompare
(
0
0
)
;
