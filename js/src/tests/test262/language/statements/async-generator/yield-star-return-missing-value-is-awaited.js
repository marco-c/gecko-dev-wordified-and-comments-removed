var
asyncIterable
=
{
[
Symbol
.
asyncIterator
]
:
function
(
)
{
return
this
;
}
next
:
function
(
)
{
return
{
value
:
1
done
:
false
}
;
}
}
;
async
function
*
asyncGenerator
(
)
{
yield
*
asyncIterable
;
}
var
asyncIterator
=
asyncGenerator
(
)
;
asyncIterator
.
next
(
)
.
then
(
function
(
)
{
var
promise
=
Promise
.
resolve
(
2
)
.
then
(
(
)
=
>
3
)
;
return
asyncIterator
.
return
(
promise
)
.
then
(
function
(
result
)
{
assert
.
sameValue
(
result
.
value
3
)
;
assert
.
sameValue
(
result
.
done
true
)
;
}
)
;
}
)
.
then
(
DONE
DONE
)
;
