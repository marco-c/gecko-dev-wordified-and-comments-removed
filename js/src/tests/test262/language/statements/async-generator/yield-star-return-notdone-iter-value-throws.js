var
token
=
{
}
;
var
asyncIter
=
{
[
Symbol
.
asyncIterator
]
(
)
{
return
this
;
}
next
(
)
{
return
{
done
:
false
value
:
undefined
}
;
}
return
(
)
{
return
{
done
:
false
get
value
(
)
{
throw
token
;
}
}
;
}
}
;
async
function
*
f
(
)
{
var
thrown
;
try
{
yield
*
asyncIter
;
}
catch
(
e
)
{
thrown
=
e
;
}
return
thrown
;
}
var
iter
=
f
(
)
;
iter
.
next
(
)
.
then
(
(
)
=
>
{
iter
.
return
(
)
.
then
(
(
{
value
}
)
=
>
{
assert
.
sameValue
(
value
token
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
