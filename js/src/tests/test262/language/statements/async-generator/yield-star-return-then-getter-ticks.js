var
expected
=
[
"
start
"
"
tick
1
"
"
tick
2
"
"
get
then
"
"
tick
3
"
"
get
return
"
"
get
then
"
"
tick
4
"
]
;
var
actual
=
[
]
;
var
asyncIter
=
{
[
Symbol
.
asyncIterator
]
(
)
{
return
this
;
}
next
(
)
{
return
{
done
:
false
}
;
}
get
return
(
)
{
actual
.
push
(
"
get
return
"
)
;
}
}
;
async
function
*
f
(
)
{
actual
.
push
(
"
start
"
)
;
yield
*
asyncIter
;
actual
.
push
(
"
stop
-
never
reached
"
)
;
}
Promise
.
resolve
(
0
)
.
then
(
(
)
=
>
actual
.
push
(
"
tick
1
"
)
)
.
then
(
(
)
=
>
actual
.
push
(
"
tick
2
"
)
)
.
then
(
(
)
=
>
actual
.
push
(
"
tick
3
"
)
)
.
then
(
(
)
=
>
actual
.
push
(
"
tick
4
"
)
)
.
then
(
(
)
=
>
{
assert
.
compareArray
(
actual
expected
"
Ticks
for
return
with
thenable
getter
"
)
;
}
)
.
then
(
DONE
DONE
)
;
var
it
=
f
(
)
;
it
.
next
(
)
;
it
.
return
(
{
get
then
(
)
{
actual
.
push
(
"
get
then
"
)
;
}
}
)
;
