var
log
=
[
]
;
var
env
=
{
p
:
0
}
;
var
proxy
=
new
Proxy
(
env
allowProxyTraps
(
{
has
(
t
pk
)
{
log
.
push
(
"
has
:
"
+
String
(
pk
)
)
;
return
Reflect
.
has
(
t
pk
)
;
}
get
(
t
pk
r
)
{
log
.
push
(
"
get
:
"
+
String
(
pk
)
)
;
return
Reflect
.
get
(
t
pk
r
)
;
}
set
(
t
pk
v
r
)
{
log
.
push
(
"
set
:
"
+
String
(
pk
)
)
;
return
Reflect
.
set
(
t
pk
v
r
)
;
}
getOwnPropertyDescriptor
(
t
pk
)
{
log
.
push
(
"
getOwnPropertyDescriptor
:
"
+
String
(
pk
)
)
;
return
Reflect
.
getOwnPropertyDescriptor
(
t
pk
)
;
}
defineProperty
(
t
pk
d
)
{
log
.
push
(
"
defineProperty
:
"
+
String
(
pk
)
)
;
return
Reflect
.
defineProperty
(
t
pk
d
)
;
}
}
)
)
;
with
(
proxy
)
{
p
=
1
;
}
assert
.
compareArray
(
log
[
"
has
:
p
"
"
get
:
Symbol
(
Symbol
.
unscopables
)
"
"
has
:
p
"
"
set
:
p
"
"
getOwnPropertyDescriptor
:
p
"
"
defineProperty
:
p
"
]
)
;
reportCompare
(
0
0
)
;
