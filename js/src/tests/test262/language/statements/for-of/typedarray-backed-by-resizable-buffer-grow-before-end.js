function
CreateRab
(
buffer_byte_length
ctor
)
{
const
rab
=
CreateResizableArrayBuffer
(
buffer_byte_length
2
*
buffer_byte_length
)
;
let
ta_write
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
buffer_byte_length
/
ctor
.
BYTES_PER_ELEMENT
;
+
+
i
)
{
ta_write
[
i
]
=
MayNeedBigInt
(
ta_write
i
%
128
)
;
}
return
rab
;
}
for
(
let
ctor
of
ctors
)
{
const
no_elements
=
10
;
const
offset
=
2
;
const
buffer_byte_length
=
no_elements
*
ctor
.
BYTES_PER_ELEMENT
;
const
byte_offset
=
offset
*
ctor
.
BYTES_PER_ELEMENT
;
let
rab
=
CreateRab
(
buffer_byte_length
ctor
)
;
const
length_tracking_ta
=
new
ctor
(
rab
)
;
{
let
expected
=
[
]
;
for
(
let
i
=
0
;
i
<
no_elements
;
+
+
i
)
{
expected
.
push
(
i
%
128
)
;
}
for
(
let
i
=
0
;
i
<
no_elements
;
+
+
i
)
{
expected
.
push
(
0
)
;
}
TestIterationAndResize
(
length_tracking_ta
expected
rab
no_elements
buffer_byte_length
*
2
)
;
}
rab
=
CreateRab
(
buffer_byte_length
ctor
)
;
const
length_tracking_ta_with_offset
=
new
ctor
(
rab
byte_offset
)
;
{
let
expected
=
[
]
;
for
(
let
i
=
offset
;
i
<
no_elements
;
+
+
i
)
{
expected
.
push
(
i
%
128
)
;
}
for
(
let
i
=
0
;
i
<
no_elements
;
+
+
i
)
{
expected
.
push
(
0
)
;
}
TestIterationAndResize
(
length_tracking_ta_with_offset
expected
rab
no_elements
-
offset
buffer_byte_length
*
2
)
;
}
}
reportCompare
(
0
0
)
;
