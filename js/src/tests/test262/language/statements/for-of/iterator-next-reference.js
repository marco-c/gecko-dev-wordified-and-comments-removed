var
iterable
=
{
}
;
var
iterator
=
{
}
;
var
iterationCount
=
0
;
var
loadNextCount
=
0
;
iterable
[
Symbol
.
iterator
]
=
function
(
)
{
return
iterator
;
}
;
function
next
(
)
{
if
(
iterationCount
)
return
{
done
:
true
}
;
return
{
value
:
45
done
:
false
}
;
}
Object
.
defineProperty
(
iterator
'
next
'
{
get
(
)
{
loadNextCount
+
+
;
return
next
;
}
configurable
:
true
}
)
;
for
(
var
x
of
iterable
)
{
assert
.
sameValue
(
x
45
)
;
Object
.
defineProperty
(
iterator
'
next
'
{
get
:
function
(
)
{
throw
new
Test262Error
(
'
Should
not
access
the
next
method
after
the
iteration
prologue
.
'
)
;
}
}
)
;
iterationCount
+
+
;
}
assert
.
sameValue
(
iterationCount
1
)
;
assert
.
sameValue
(
loadNextCount
1
)
;
reportCompare
(
0
0
)
;
