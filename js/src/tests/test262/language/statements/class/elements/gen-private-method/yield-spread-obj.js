var
callCount
=
0
;
class
C
{
*
#
gen
(
)
{
callCount
+
=
1
;
yield
{
.
.
.
yield
y
:
1
.
.
.
yield
yield
}
;
}
get
gen
(
)
{
return
this
.
#
gen
;
}
}
const
c
=
new
C
(
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
instance
"
)
;
var
iter
=
c
.
gen
(
)
;
iter
.
next
(
)
;
iter
.
next
(
{
x
:
42
}
)
;
iter
.
next
(
{
x
:
'
lol
'
}
)
;
var
item
=
iter
.
next
(
{
y
:
39
}
)
;
assert
.
sameValue
(
item
.
value
.
x
42
)
;
assert
.
sameValue
(
item
.
value
.
y
39
)
;
assert
.
sameValue
(
Object
.
keys
(
item
.
value
)
.
length
2
)
;
assert
.
sameValue
(
item
.
done
false
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
instance
"
)
;
reportCompare
(
0
0
)
;
