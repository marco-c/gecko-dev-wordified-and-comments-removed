class
C
{
#
x
;
#
y
foo
=
"
foobar
"
bar
=
"
barbaz
"
;
x
(
)
{
this
.
#
x
=
42
;
return
this
.
#
x
;
}
y
(
)
{
this
.
#
y
=
43
;
return
this
.
#
y
;
}
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
c
.
foo
"
foobar
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
foo
"
)
"
foo
doesn
'
t
appear
as
an
own
property
on
the
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
foo
"
)
"
foo
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
c
"
foo
"
{
value
:
"
foobar
"
enumerable
:
true
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
c
.
bar
"
barbaz
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
bar
"
)
"
bar
doesn
'
t
appear
as
an
own
property
on
the
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
bar
"
)
"
bar
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
c
"
bar
"
{
value
:
"
barbaz
"
enumerable
:
true
configurable
:
true
writable
:
true
}
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
x
"
)
"
test
1
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
x
"
)
"
test
2
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
"
test
3
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
y
"
)
"
test
4
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
y
"
)
"
test
5
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
"
test
6
"
)
;
assert
.
sameValue
(
c
.
x
(
)
42
"
test
7
"
)
;
assert
.
sameValue
(
c
.
y
(
)
43
"
test
8
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
x
"
)
"
test
9
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
#
y
"
)
"
test
10
"
)
;
reportCompare
(
0
0
)
;
