let
arr
=
[
]
;
let
expectedTarget
=
null
;
function
ProxyBase
(
)
{
expectedTarget
=
this
;
return
new
Proxy
(
this
{
defineProperty
:
function
(
target
key
descriptor
)
{
arr
.
push
(
key
)
;
arr
.
push
(
descriptor
.
value
)
;
arr
.
push
(
target
)
;
assert
.
sameValue
(
descriptor
.
enumerable
true
)
;
assert
.
sameValue
(
descriptor
.
configurable
true
)
;
assert
.
sameValue
(
descriptor
.
writable
true
)
;
return
Reflect
.
defineProperty
(
target
key
descriptor
)
;
}
}
)
;
}
class
Test
extends
ProxyBase
{
f
=
3
;
g
=
"
Test262
"
;
}
let
t
=
new
Test
(
)
;
assert
.
sameValue
(
t
.
f
3
)
;
assert
.
sameValue
(
t
.
g
"
Test262
"
)
;
assert
.
compareArray
(
arr
[
"
f
"
3
expectedTarget
"
g
"
"
Test262
"
expectedTarget
]
)
;
reportCompare
(
0
0
)
;
