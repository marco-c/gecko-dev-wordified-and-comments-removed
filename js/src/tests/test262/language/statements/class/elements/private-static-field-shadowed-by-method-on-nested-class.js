class
C
{
static
#
m
=
(
)
=
>
'
outer
class
'
;
static
fieldAccess
(
)
{
return
this
.
#
m
(
)
;
}
static
B
=
class
{
#
m
(
)
{
return
'
inner
class
'
;
}
static
access
(
o
)
{
return
o
.
#
m
(
)
;
}
}
}
assert
.
sameValue
(
C
.
fieldAccess
(
)
'
outer
class
'
)
;
let
b
=
new
C
.
B
(
)
;
assert
.
sameValue
(
C
.
B
.
access
(
b
)
'
inner
class
'
)
;
assert
.
throws
(
TypeError
function
(
)
{
C
.
B
.
access
(
C
)
;
}
'
accessed
private
method
from
an
arbritary
object
'
)
;
reportCompare
(
0
0
)
;
