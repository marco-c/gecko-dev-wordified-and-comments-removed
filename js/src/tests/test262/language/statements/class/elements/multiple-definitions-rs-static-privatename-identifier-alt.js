class
C
{
foo
=
"
foobar
"
;
m
(
)
{
return
42
}
static
#
;
static
#
_
;
static
#
\
u
{
6F
}
;
static
#
;
static
#
ZW_
_NJ
;
static
#
ZW_
_J
m2
(
)
{
return
39
}
bar
=
"
barbaz
"
;
static
(
value
)
{
this
.
#
=
value
;
return
this
.
#
;
}
static
_
(
value
)
{
this
.
#
_
=
value
;
return
this
.
#
_
;
}
static
o
(
value
)
{
this
.
#
\
u
{
6F
}
=
value
;
return
this
.
#
\
u
{
6F
}
;
}
static
(
value
)
{
this
.
#
=
value
;
return
this
.
#
;
}
static
ZW_
_NJ
(
value
)
{
this
.
#
ZW_
_NJ
=
value
;
return
this
.
#
ZW_
_NJ
;
}
static
ZW_
_J
(
value
)
{
this
.
#
ZW_
_J
=
value
;
return
this
.
#
ZW_
_J
;
}
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
c
.
m
(
)
42
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
m
"
)
"
m
doesn
'
t
appear
as
an
own
property
on
the
C
instance
"
)
;
assert
.
sameValue
(
c
.
m
C
.
prototype
.
m
)
;
verifyProperty
(
C
.
prototype
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
c
.
m2
(
)
39
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
c
"
m2
"
)
"
m2
doesn
'
t
appear
as
an
own
property
on
the
C
instance
"
)
;
assert
.
sameValue
(
c
.
m2
C
.
prototype
.
m2
)
;
verifyProperty
(
C
.
prototype
"
m2
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
c
.
foo
"
foobar
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
foo
"
)
"
foo
doesn
'
t
appear
as
an
own
property
on
the
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
foo
"
)
"
foo
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
c
"
foo
"
{
value
:
"
foobar
"
enumerable
:
true
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
c
.
bar
"
barbaz
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
bar
"
)
"
bar
doesn
'
t
appear
as
an
own
property
on
the
C
constructor
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
bar
"
)
"
bar
doesn
'
t
appear
as
an
own
property
on
the
C
prototype
"
)
;
verifyProperty
(
c
"
bar
"
{
value
:
"
barbaz
"
enumerable
:
true
configurable
:
true
writable
:
true
}
)
;
assert
.
sameValue
(
C
.
(
1
)
1
)
;
assert
.
sameValue
(
C
.
_
(
1
)
1
)
;
assert
.
sameValue
(
C
.
o
(
1
)
1
)
;
assert
.
sameValue
(
C
.
(
1
)
1
)
;
assert
.
sameValue
(
C
.
ZW_
_NJ
(
1
)
1
)
;
assert
.
sameValue
(
C
.
ZW_
_J
(
1
)
1
)
;
reportCompare
(
0
0
)
;
