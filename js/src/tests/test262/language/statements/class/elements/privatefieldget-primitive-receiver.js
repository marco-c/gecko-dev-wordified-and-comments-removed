let
count
=
0
;
class
C
{
#
p
=
1
;
method
(
)
{
count
+
+
;
try
{
count
+
+
;
this
.
#
p
;
}
catch
(
e
)
{
count
+
+
;
if
(
e
instanceof
TypeError
)
{
throw
new
Test262Error
(
)
;
}
}
}
}
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
15
)
;
}
)
;
assert
.
sameValue
(
count
3
)
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
'
Test262
'
)
;
}
)
;
assert
.
sameValue
(
count
6
)
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
Symbol
(
'
Test262
'
)
)
;
}
)
;
assert
.
sameValue
(
count
9
)
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
15n
)
;
}
)
;
assert
.
sameValue
(
count
12
)
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
null
)
;
}
)
;
assert
.
sameValue
(
count
15
)
;
assert
.
throws
(
Test262Error
(
)
=
>
{
new
C
(
)
.
method
.
call
(
undefined
)
;
}
)
;
assert
.
sameValue
(
count
18
)
;
reportCompare
(
0
0
)
;
