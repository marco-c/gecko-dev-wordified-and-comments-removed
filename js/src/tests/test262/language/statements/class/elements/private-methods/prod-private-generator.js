function
hasProp
(
obj
name
expected
msg
)
{
var
hasOwnProperty
=
Object
.
prototype
.
hasOwnProperty
.
call
(
obj
name
)
;
assert
.
sameValue
(
hasOwnProperty
expected
msg
)
;
var
hasProperty
=
Reflect
.
has
(
obj
name
)
;
assert
.
sameValue
(
hasProperty
expected
msg
)
;
}
class
C
{
*
#
m
(
)
{
return
42
;
}
get
ref
(
)
{
return
this
.
#
m
;
}
constructor
(
)
{
hasProp
(
this
'
#
m
'
false
'
private
methods
are
defined
in
an
special
internal
slot
and
cannot
be
found
as
own
properties
'
)
;
assert
.
sameValue
(
typeof
this
.
#
m
'
function
'
)
;
assert
.
sameValue
(
this
.
ref
this
.
#
m
'
returns
the
same
value
'
)
;
assert
.
sameValue
(
this
.
#
m
(
(
)
=
>
this
)
(
)
.
#
m
'
memberexpression
and
call
expression
forms
'
)
;
var
res
=
this
.
#
m
(
)
.
next
(
)
;
assert
.
sameValue
(
res
.
value
42
'
return
from
generator
method
inside
ctor
'
)
;
assert
.
sameValue
(
res
.
done
true
'
iterator
is
done
inside
ctor
'
)
;
assert
.
sameValue
(
this
.
#
m
.
name
'
#
m
'
'
function
name
inside
constructor
'
)
;
}
}
var
c
=
new
C
(
)
;
var
other
=
new
C
(
)
;
hasProp
(
C
.
prototype
'
#
m
'
false
'
method
is
not
defined
in
the
prototype
'
)
;
hasProp
(
C
'
#
m
'
false
'
method
is
not
defined
in
the
contructor
'
)
;
hasProp
(
c
'
#
m
'
false
'
method
cannot
be
seen
outside
of
the
class
'
)
;
assert
.
sameValue
(
c
.
ref
other
.
ref
'
The
method
is
defined
once
and
reused
on
every
new
instance
'
)
;
var
res
=
c
.
ref
(
)
.
next
(
)
;
assert
.
sameValue
(
res
.
value
42
'
return
from
generator
method
'
)
;
assert
.
sameValue
(
res
.
done
true
'
iterator
is
done
'
)
;
assert
.
sameValue
(
c
.
ref
.
name
'
#
m
'
'
function
name
is
preserved
external
reference
'
)
;
reportCompare
(
0
0
)
;
