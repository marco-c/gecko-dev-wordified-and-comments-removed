var
x
=
Symbol
(
)
;
var
y
=
Symbol
(
)
;
class
C
{
static
async
*
m
(
)
{
return
42
;
}
[
x
]
;
[
y
]
=
42
;
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
m
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
m
"
)
false
)
;
verifyProperty
(
C
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
{
restore
:
true
}
)
;
C
.
m
(
)
.
next
(
)
.
then
(
function
(
v
)
{
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
function
assertions
(
)
{
function
DONE
(
error
)
{
if
(
error
)
{
throw
new
Test262Error
(
'
Test262
:
AsyncTestFailure
'
)
}
}
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
x
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
x
)
false
)
;
verifyProperty
(
c
x
{
value
:
undefined
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
y
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
y
)
false
)
;
verifyProperty
(
c
y
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
y
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
y
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
y
"
)
false
)
;
}
return
Promise
.
resolve
(
assertions
(
)
)
;
}
)
.
then
(
DONE
DONE
)
;
