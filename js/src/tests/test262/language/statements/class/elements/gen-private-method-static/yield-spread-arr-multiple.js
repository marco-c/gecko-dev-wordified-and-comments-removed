var
arr
=
[
'
a
'
'
b
'
'
c
'
]
;
var
item
;
var
callCount
=
0
;
class
C
{
static
*
#
gen
(
)
{
callCount
+
=
1
;
yield
[
.
.
.
yield
yield
]
;
}
static
get
gen
(
)
{
return
this
.
#
gen
;
}
}
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
var
iter
=
C
.
gen
(
)
;
iter
.
next
(
false
)
;
item
=
iter
.
next
(
[
'
a
'
'
b
'
'
c
'
]
)
;
item
=
iter
.
next
(
item
.
value
)
;
assert
.
compareArray
(
item
.
value
arr
)
;
assert
.
sameValue
(
item
.
done
false
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
prototype
"
)
;
assert
(
!
Object
.
prototype
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
"
Private
field
'
#
gen
'
does
not
appear
as
an
own
property
on
C
constructor
"
)
;
reportCompare
(
0
0
)
;
