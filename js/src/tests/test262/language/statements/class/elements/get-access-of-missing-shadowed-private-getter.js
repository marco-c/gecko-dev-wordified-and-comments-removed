class
A
{
get
#
f
(
)
{
throw
new
Test262Error
(
)
;
}
}
class
C
extends
A
{
set
#
f
(
v
)
{
throw
new
Test262Error
(
)
;
}
getAccess
(
)
{
return
this
.
#
f
;
}
}
let
c
=
new
C
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
c
.
getAccess
(
)
;
}
'
subclass
private
accessor
should
shadow
super
class
private
accessor
'
)
;
class
B
{
get
#
f
(
)
{
throw
new
Test262Error
(
)
;
}
Inner
=
class
{
set
#
f
(
v
)
{
throw
new
Test262Error
(
)
;
}
getAccess
(
)
{
return
this
.
#
f
;
}
}
}
let
b
=
new
B
(
)
;
let
innerB
=
new
b
.
Inner
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
innerB
.
getAccess
(
)
;
}
'
inner
class
private
accessor
should
shadow
outer
class
private
accessor
'
)
;
class
D
{
set
#
f
(
v
)
{
throw
new
Test262Error
(
)
;
}
Inner
=
class
{
get
#
f
(
)
{
throw
new
Test262Error
(
)
;
}
}
getAccess
(
)
{
return
this
.
#
f
;
}
}
let
d
=
new
D
(
)
;
assert
.
throws
(
TypeError
function
(
)
{
d
.
getAccess
(
)
;
}
'
inner
class
private
accessor
should
not
be
visible
to
outer
class
private
accessor
'
)
;
reportCompare
(
0
0
)
;
