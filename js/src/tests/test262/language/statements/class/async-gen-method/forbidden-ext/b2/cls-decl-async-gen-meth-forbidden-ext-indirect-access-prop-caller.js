var
CALLER_OWN_PROPERTY_DOES_NOT_EXIST
=
Symbol
(
)
;
function
inner
(
)
{
return
inner
.
hasOwnProperty
(
"
caller
"
)
?
inner
.
caller
:
CALLER_OWN_PROPERTY_DOES_NOT_EXIST
;
}
var
callCount
=
0
;
class
C
{
async
*
method
(
)
{
let
descriptor
=
Object
.
getOwnPropertyDescriptor
(
inner
"
caller
"
)
;
if
(
descriptor
&
&
descriptor
.
configurable
&
&
false
)
{
Object
.
defineProperty
(
inner
"
caller
"
{
}
)
;
}
var
result
=
inner
(
)
;
if
(
descriptor
&
&
descriptor
.
configurable
&
&
false
)
{
assert
.
sameValue
(
result
1
'
If
this
test
defined
an
own
"
caller
"
property
on
the
inner
function
then
it
should
be
accessible
and
should
return
the
value
it
was
set
to
.
'
)
;
}
if
(
result
!
=
=
CALLER_OWN_PROPERTY_DOES_NOT_EXIST
)
{
assert
.
notSameValue
(
result
this
.
method
)
;
}
callCount
+
+
;
}
}
C
.
prototype
.
method
(
)
.
next
(
)
.
then
(
(
)
=
>
{
assert
.
sameValue
(
callCount
1
'
function
body
evaluated
'
)
;
}
DONE
)
.
then
(
DONE
DONE
)
;
