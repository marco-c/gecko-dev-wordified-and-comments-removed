var
x
=
"
b
"
;
class
C
{
[
x
]
=
42
;
[
10
]
=
"
meep
"
;
[
"
not
initialized
"
]
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
b
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
b
"
)
false
)
;
verifyProperty
(
c
"
b
"
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
x
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
10
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
10
"
)
false
)
;
verifyProperty
(
c
"
10
"
{
value
:
"
meep
"
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
not
initialized
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
not
initialized
"
)
false
)
;
verifyProperty
(
c
"
not
initialized
"
{
value
:
undefined
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
reportCompare
(
0
0
)
;
