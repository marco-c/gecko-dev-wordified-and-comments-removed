var
o
=
{
a
:
3
b
:
4
}
;
Object
.
defineProperty
(
o
"
x
"
{
value
:
4
enumerable
:
false
}
)
;
var
callCount
=
0
;
class
C
{
static
async
*
#
method
(
{
.
.
.
rest
}
)
{
assert
.
sameValue
(
rest
.
x
undefined
)
;
verifyProperty
(
rest
"
a
"
{
enumerable
:
true
writable
:
true
configurable
:
true
value
:
3
}
)
;
verifyProperty
(
rest
"
b
"
{
enumerable
:
true
writable
:
true
configurable
:
true
value
:
4
}
)
;
callCount
=
callCount
+
1
;
}
static
get
method
(
)
{
return
this
.
#
method
;
}
}
;
C
.
method
(
o
)
.
next
(
)
.
then
(
(
)
=
>
{
assert
.
sameValue
(
callCount
1
'
invoked
exactly
once
'
)
;
}
)
.
then
(
DONE
DONE
)
;
