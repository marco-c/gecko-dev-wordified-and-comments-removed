var
arr
=
[
'
a
'
'
b
'
'
c
'
]
;
var
callCount
=
0
;
class
C
{
*
#
gen
(
)
{
callCount
+
=
1
;
yield
[
.
.
.
yield
]
;
}
get
gen
(
)
{
return
this
.
#
gen
;
}
}
const
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
'
)
;
var
iter
=
c
.
gen
(
)
;
iter
.
next
(
false
)
;
var
item
=
iter
.
next
(
arr
)
;
var
value
=
item
.
value
;
assert
.
notSameValue
(
value
arr
'
value
is
a
new
array
'
)
;
assert
(
Array
.
isArray
(
value
)
'
value
is
an
Array
exotic
object
'
)
;
assert
.
sameValue
(
value
.
length
3
)
assert
.
sameValue
(
value
[
0
]
'
a
'
)
;
assert
.
sameValue
(
value
[
1
]
'
b
'
)
;
assert
.
sameValue
(
value
[
2
]
'
c
'
)
;
assert
.
sameValue
(
item
.
done
false
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
c
"
#
gen
"
)
'
)
;
reportCompare
(
0
0
)
;
