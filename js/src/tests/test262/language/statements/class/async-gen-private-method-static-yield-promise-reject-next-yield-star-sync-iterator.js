let
error
=
new
Error
(
)
;
let
iterable
=
[
Promise
.
reject
(
error
)
"
unreachable
"
]
;
var
callCount
=
0
;
class
C
{
static
async
*
#
gen
(
)
{
callCount
+
=
1
;
yield
*
iterable
;
}
static
get
gen
(
)
{
return
this
.
#
gen
;
}
}
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
var
iter
=
C
.
gen
(
)
;
iter
.
next
(
)
.
then
(
(
)
=
>
{
throw
new
Test262Error
(
"
Promise
incorrectly
resolved
.
"
)
;
}
rejectValue
=
>
{
assert
.
sameValue
(
rejectValue
error
)
;
iter
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
"
The
value
of
IteratorResult
.
done
is
true
"
)
;
assert
.
sameValue
(
value
undefined
"
The
value
of
IteratorResult
.
value
is
undefined
"
)
;
}
)
.
then
(
DONE
DONE
)
;
}
)
.
catch
(
DONE
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
