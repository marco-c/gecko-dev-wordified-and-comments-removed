'
use
strict
'
;
DONOTEVALUATE
(
)
;
var
callCount
=
0
;
class
C
{
static
async
*
#
gen
(
)
{
callCount
+
=
1
;
return
{
.
.
.
(
function
(
)
{
var
yield
;
throw
new
Test262Error
(
)
;
}
(
)
)
}
}
static
get
gen
(
)
{
return
this
.
#
gen
;
}
}
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
var
iter
=
C
.
gen
(
)
;
assert
.
sameValue
(
callCount
1
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
#
gen
"
)
'
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
false
'
Object
.
hasOwnProperty
.
call
(
C
"
#
gen
"
)
'
)
;
