var
s1
=
Symbol
(
)
;
var
s2
=
Symbol
(
)
;
var
s3
=
Symbol
(
)
;
var
err
=
function
(
)
{
throw
new
Test262Error
(
)
;
}
;
var
obj1
=
{
[
Symbol
.
toPrimitive
]
:
function
(
)
{
return
s1
;
}
toString
:
err
valueOf
:
err
}
;
var
obj2
=
{
toString
:
function
(
)
{
return
s2
;
}
valueOf
:
err
}
;
var
obj3
=
{
toString
:
undefined
valueOf
:
function
(
)
{
return
s3
;
}
}
;
class
C
{
static
[
obj1
]
=
42
;
static
[
obj2
]
=
43
;
static
[
obj3
]
=
44
;
}
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
s1
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
s2
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
s3
)
false
)
;
verifyProperty
(
C
s1
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
verifyProperty
(
C
s2
{
value
:
43
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
verifyProperty
(
C
s3
{
value
:
44
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
s1
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
s2
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
s3
)
false
)
;
reportCompare
(
0
0
)
;
