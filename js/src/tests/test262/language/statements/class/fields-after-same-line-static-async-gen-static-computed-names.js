class
C
{
static
async
*
m
(
)
{
return
42
;
}
static
[
"
a
"
]
=
42
;
[
"
a
"
]
=
39
;
}
var
c
=
new
C
(
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
c
"
m
"
)
false
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
m
"
)
false
)
;
verifyProperty
(
C
"
m
"
{
enumerable
:
false
configurable
:
true
writable
:
true
}
{
restore
:
true
}
)
;
assert
.
sameValue
(
Object
.
hasOwnProperty
.
call
(
C
.
prototype
"
a
"
)
false
)
;
verifyProperty
(
C
"
a
"
{
value
:
42
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
verifyProperty
(
c
"
a
"
{
value
:
39
enumerable
:
true
writable
:
true
configurable
:
true
}
)
;
C
.
m
(
)
.
next
(
)
.
then
(
function
(
v
)
{
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
}
DONE
)
.
then
(
DONE
DONE
)
;
