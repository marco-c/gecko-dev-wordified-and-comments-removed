var
otherIterator
=
[
'
fifth
'
'
sixth
'
'
seventh
'
]
[
Symbol
.
iterator
]
(
)
;
var
spread
parentArgs
;
function
Parent
(
)
{
parentArgs
=
arguments
;
}
class
C
extends
Parent
{
}
Array
.
prototype
[
Symbol
.
iterator
]
=
function
(
)
{
spread
=
this
;
return
otherIterator
;
}
;
new
C
(
'
first
'
'
second
'
'
third
'
'
fourth
'
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
spread
)
Array
.
prototype
)
;
assert
.
sameValue
(
spread
.
length
4
)
;
assert
.
sameValue
(
spread
[
0
]
'
first
'
)
;
assert
.
sameValue
(
spread
[
1
]
'
second
'
)
;
assert
.
sameValue
(
spread
[
2
]
'
third
'
)
;
assert
.
sameValue
(
spread
[
3
]
'
fourth
'
)
;
assert
.
sameValue
(
typeof
parentArgs
'
object
'
'
parent
arguments
object
'
)
;
assert
.
sameValue
(
parentArgs
.
length
3
)
;
assert
.
sameValue
(
parentArgs
[
0
]
'
fifth
'
)
;
assert
.
sameValue
(
parentArgs
[
1
]
'
sixth
'
)
;
assert
.
sameValue
(
parentArgs
[
2
]
'
seventh
'
)
;
reportCompare
(
0
0
)
;
