assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
monthCode
:
"
M11
"
day
:
18
timeZone
:
"
+
01
:
00
"
}
)
}
"
1976
-
11
-
18T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
11
day
:
18
timeZone
:
"
+
01
:
00
"
}
)
}
"
1976
-
11
-
18T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
11
monthCode
:
"
M12
"
day
:
18
timeZone
:
"
+
01
:
00
"
}
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
{
}
)
)
assert
.
throws
(
TypeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
undefined
monthCode
:
undefined
day
:
18
timeZone
:
"
+
01
:
00
"
}
)
)
assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
11
day
:
18
timeZone
:
"
+
01
:
00
"
}
(
)
=
>
{
}
)
}
"
1976
-
11
-
18T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
{
years
:
1976
months
:
11
days
:
18
timeZone
:
"
+
01
:
00
"
}
)
)
;
assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
11
day
:
18
timeZone
:
"
+
01
:
00
"
hours
:
12
}
)
}
"
1976
-
11
-
18T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
[
null
true
1000
1000n
Symbol
(
)
{
}
]
.
forEach
(
offset
=
>
{
assert
.
throws
(
typeof
offset
=
=
=
"
string
"
|
|
(
typeof
offset
=
=
=
"
object
"
&
&
offset
!
=
=
null
)
|
|
typeof
offset
=
=
=
"
function
"
?
RangeError
:
TypeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
{
year
:
1976
month
:
11
day
:
18
offset
:
offset
timeZone
:
"
+
10
:
00
"
}
)
)
}
)
;
var
bad
=
{
year
:
2019
month
:
1
day
:
32
timeZone
:
"
+
01
:
00
"
}
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
bad
{
overflow
:
"
reject
"
}
)
)
;
assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
bad
)
}
"
2019
-
01
-
31T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
assert
.
sameValue
(
{
Temporal
.
ZonedDateTime
.
from
(
bad
{
overflow
:
"
constrain
"
}
)
}
"
2019
-
01
-
31T00
:
00
:
00
+
01
:
00
[
+
01
:
00
]
"
)
;
var
obj
=
{
year
:
2020
month
:
3
day
:
8
hour
:
1
offset
:
"
-
04
:
00
"
timeZone
:
"
-
08
:
00
"
}
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
obj
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
obj
{
offset
:
"
reject
"
}
)
)
;
var
obj
=
{
year
:
2020
month
:
3
day
:
8
hour
:
1
offset
:
"
-
04
:
00
"
timeZone
:
"
UTC
"
}
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
obj
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
obj
{
offset
:
"
reject
"
}
)
)
;
[
"
"
"
EARLIER
"
"
balance
"
3
null
]
.
forEach
(
disambiguation
=
>
{
assert
.
throws
(
RangeError
(
)
=
>
Temporal
.
ZonedDateTime
.
from
(
"
2020
-
11
-
01T04
:
00
[
UTC
]
"
{
disambiguation
}
)
)
;
}
)
;
reportCompare
(
0
0
)
;
