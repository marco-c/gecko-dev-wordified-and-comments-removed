var
zdt
=
new
Temporal
.
PlainDateTime
(
1976
11
18
15
23
30
123
456
789
)
.
toZonedDateTime
(
"
UTC
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
year
:
2019
}
)
}
"
2019
-
11
-
18T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
month
:
5
}
)
}
"
1976
-
05
-
18T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
monthCode
:
"
M05
"
}
)
}
"
1976
-
05
-
18T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
month
:
5
monthCode
:
"
M06
"
}
)
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
day
:
5
}
)
}
"
1976
-
11
-
05T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
hour
:
5
}
)
}
"
1976
-
11
-
18T05
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
minute
:
5
}
)
}
"
1976
-
11
-
18T15
:
05
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
second
:
5
}
)
}
"
1976
-
11
-
18T15
:
23
:
05
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
millisecond
:
5
}
)
}
"
1976
-
11
-
18T15
:
23
:
30
.
005456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
microsecond
:
5
}
)
}
"
1976
-
11
-
18T15
:
23
:
30
.
123005789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
nanosecond
:
5
}
)
}
"
1976
-
11
-
18T15
:
23
:
30
.
123456005
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
month
:
5
second
:
15
}
)
}
"
1976
-
05
-
18T15
:
23
:
15
.
123456789
+
00
:
00
[
UTC
]
"
)
;
var
overflow
=
"
constrain
"
;
assert
.
sameValue
(
{
zdt
.
with
(
{
month
:
29
}
{
overflow
}
)
}
"
1976
-
12
-
18T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
day
:
31
}
{
overflow
}
)
}
"
1976
-
11
-
30T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
hour
:
29
}
{
overflow
}
)
}
"
1976
-
11
-
18T23
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
nanosecond
:
9000
}
{
overflow
}
)
}
"
1976
-
11
-
18T15
:
23
:
30
.
123456999
+
00
:
00
[
UTC
]
"
)
;
var
overflow
=
"
reject
"
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
month
:
29
}
{
overflow
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
day
:
31
}
{
overflow
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
hour
:
29
}
{
overflow
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
nanosecond
:
9000
}
{
overflow
}
)
)
;
var
dstStartDay
=
Temporal
.
ZonedDateTime
.
from
(
"
2019
-
03
-
10T12
:
00
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
var
dstEndDay
=
Temporal
.
ZonedDateTime
.
from
(
"
2019
-
11
-
03T12
:
00
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
var
oneThirty
=
{
hour
:
1
minute
:
30
}
;
var
twoThirty
=
{
hour
:
2
minute
:
30
}
;
var
offset
=
"
ignore
"
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
compatible
"
}
)
}
"
2019
-
03
-
10T03
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
earlier
"
}
)
}
"
2019
-
03
-
10T01
:
30
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
later
"
}
)
}
"
2019
-
03
-
10T03
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstEndDay
.
with
(
oneThirty
{
offset
disambiguation
:
"
compatible
"
}
)
}
"
2019
-
11
-
03T01
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstEndDay
.
with
(
oneThirty
{
offset
disambiguation
:
"
earlier
"
}
)
}
"
2019
-
11
-
03T01
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstEndDay
.
with
(
oneThirty
{
offset
disambiguation
:
"
later
"
}
)
}
"
2019
-
11
-
03T01
:
30
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
dstStartDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
reject
"
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
dstEndDay
.
with
(
oneThirty
{
offset
disambiguation
:
"
reject
"
}
)
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
twoThirty
{
offset
}
)
}
{
dstStartDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
compatible
"
}
)
}
)
;
assert
.
sameValue
(
{
dstEndDay
.
with
(
twoThirty
{
offset
}
)
}
{
dstEndDay
.
with
(
twoThirty
{
offset
disambiguation
:
"
compatible
"
}
)
}
)
;
[
"
"
"
EARLIER
"
"
balance
"
]
.
forEach
(
disambiguation
=
>
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
day
:
5
}
{
disambiguation
}
)
)
)
;
var
bogus
=
{
.
.
.
twoThirty
offset
:
"
+
23
:
59
"
}
;
var
preserveExact
=
dstStartDay
.
with
(
bogus
{
offset
:
"
use
"
}
)
;
assert
.
sameValue
(
{
preserveExact
}
"
2019
-
03
-
08T23
:
01
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
preserveExact
.
epochNanoseconds
Temporal
.
Instant
.
from
(
"
2019
-
03
-
10T02
:
30
:
01
+
23
:
59
"
)
.
epochNanoseconds
)
;
var
offset
=
"
ignore
"
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
bogus
{
offset
disambiguation
:
"
earlier
"
}
)
}
"
2019
-
03
-
10T01
:
30
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
bogus
{
offset
disambiguation
:
"
later
"
}
)
}
"
2019
-
03
-
10T03
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
var
offset
=
"
prefer
"
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
bogus
{
offset
disambiguation
:
"
earlier
"
}
)
}
"
2019
-
03
-
10T01
:
30
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
bogus
{
offset
disambiguation
:
"
later
"
}
)
}
"
2019
-
03
-
10T03
:
30
:
01
-
02
:
30
[
America
/
St_Johns
]
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
dstStartDay
.
with
(
{
.
.
.
twoThirty
offset
:
"
+
23
:
59
"
}
{
offset
:
"
reject
"
}
)
)
;
var
doubleTime
=
Temporal
.
ZonedDateTime
.
from
(
"
2019
-
11
-
03T01
:
30
:
01
-
03
:
30
[
America
/
St_Johns
]
"
)
;
var
preserveExact
=
doubleTime
.
with
(
{
offset
:
"
-
02
:
30
"
}
{
offset
:
"
use
"
}
)
;
assert
.
sameValue
(
preserveExact
.
offset
"
-
02
:
30
"
)
;
assert
.
sameValue
(
preserveExact
.
epochNanoseconds
Temporal
.
Instant
.
from
(
"
2019
-
11
-
03T01
:
30
:
01
-
02
:
30
"
)
.
epochNanoseconds
)
;
var
offset
=
"
ignore
"
;
assert
.
sameValue
(
doubleTime
.
with
(
{
offset
:
"
-
02
:
30
"
}
{
offset
disambiguation
:
"
earlier
"
}
)
.
offset
"
-
02
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
offset
:
"
-
02
:
30
"
}
{
offset
disambiguation
:
"
later
"
}
)
.
offset
"
-
03
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
offset
:
"
-
02
:
30
"
}
{
offset
:
"
prefer
"
}
)
.
offset
"
-
02
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
offset
:
"
-
02
:
30
"
}
{
offset
:
"
reject
"
}
)
.
offset
"
-
02
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
minute
:
31
}
{
offset
:
"
use
"
}
)
.
offset
"
-
03
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
minute
:
31
}
{
offset
:
"
ignore
"
}
)
.
offset
"
-
02
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
minute
:
31
}
{
offset
:
"
prefer
"
}
)
.
offset
"
-
03
:
30
"
)
;
assert
.
sameValue
(
doubleTime
.
with
(
{
minute
:
31
}
{
offset
:
"
reject
"
}
)
.
offset
"
-
03
:
30
"
)
;
assert
.
sameValue
(
{
dstStartDay
.
with
(
twoThirty
)
}
{
dstStartDay
.
with
(
twoThirty
{
offset
:
"
prefer
"
}
)
}
)
;
assert
.
sameValue
(
{
dstEndDay
.
with
(
twoThirty
)
}
{
dstEndDay
.
with
(
twoThirty
{
offset
:
"
prefer
"
}
)
}
)
;
assert
.
sameValue
(
{
doubleTime
.
with
(
{
minute
:
31
}
)
}
{
doubleTime
.
with
(
{
minute
:
31
}
{
offset
:
"
prefer
"
}
)
}
)
;
[
"
"
"
PREFER
"
"
balance
"
]
.
forEach
(
offset
=
>
assert
.
throws
(
RangeError
(
)
=
>
zdt
.
with
(
{
day
:
5
}
{
offset
}
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
{
}
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
{
months
:
12
}
)
)
;
assert
.
sameValue
(
{
zdt
.
with
(
{
month
:
12
days
:
15
}
)
}
"
1976
-
12
-
18T15
:
23
:
30
.
123456789
+
00
:
00
[
UTC
]
"
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
{
month
:
2
timeZone
:
"
Asia
/
Ulaanbaatar
"
}
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
dstStartDay
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
{
month
:
2
calendar
:
"
japanese
"
}
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
Temporal
.
PlainDateTime
.
from
(
"
1976
-
11
-
18T12
:
00
"
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
Temporal
.
PlainDate
.
from
(
"
1976
-
11
-
18
"
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
Temporal
.
PlainTime
.
from
(
"
12
:
00
"
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
Temporal
.
PlainYearMonth
.
from
(
"
1976
-
11
"
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
Temporal
.
PlainMonthDay
.
from
(
"
11
-
18
"
)
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
"
1976
-
11
-
18T12
:
00
+
00
:
00
[
UTC
]
"
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
"
1976
-
11
-
18
"
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
"
12
:
00
"
)
)
;
assert
.
throws
(
TypeError
(
)
=
>
zdt
.
with
(
"
invalid
"
)
)
;
reportCompare
(
0
0
)
;
