var
inst
=
Temporal
.
Instant
.
from
(
"
1976
-
11
-
18T14
:
23
:
30
.
123456789Z
"
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
roundingIncrement
:
1
roundingMode
:
"
ceil
"
}
)
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
hour
"
roundingIncrement
:
4
}
)
}
"
1976
-
11
-
18T16
:
00
:
00Z
"
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
minute
"
roundingIncrement
:
15
}
)
}
"
1976
-
11
-
18T14
:
30
:
00Z
"
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
second
"
roundingIncrement
:
30
}
)
}
"
1976
-
11
-
18T14
:
23
:
30Z
"
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
millisecond
"
roundingIncrement
:
10
}
)
}
"
1976
-
11
-
18T14
:
23
:
30
.
12Z
"
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
microsecond
"
roundingIncrement
:
10
}
)
}
"
1976
-
11
-
18T14
:
23
:
30
.
12346Z
"
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
nanosecond
"
roundingIncrement
:
10
}
)
}
"
1976
-
11
-
18T14
:
23
:
30
.
12345679Z
"
)
;
var
expected
=
"
1976
-
11
-
19T00
:
00
:
00Z
"
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
hour
"
roundingIncrement
:
24
}
)
}
expected
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
minute
"
roundingIncrement
:
1440
}
)
}
expected
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
second
"
roundingIncrement
:
86400
}
)
}
expected
)
;
assert
.
sameValue
(
{
inst
.
round
(
{
smallestUnit
:
"
millisecond
"
roundingIncrement
:
86400000
}
)
}
expected
)
;
assert
(
inst
.
round
(
{
smallestUnit
:
"
second
"
roundingIncrement
:
864
}
)
instanceof
Temporal
.
Instant
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
hour
"
roundingIncrement
:
7
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
minute
"
roundingIncrement
:
29
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
second
"
roundingIncrement
:
29
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
millisecond
"
roundingIncrement
:
29
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
microsecond
"
roundingIncrement
:
29
}
)
)
;
assert
.
throws
(
RangeError
(
)
=
>
inst
.
round
(
{
smallestUnit
:
"
nanosecond
"
roundingIncrement
:
29
}
)
)
;
[
"
hour
"
"
minute
"
"
second
"
"
millisecond
"
"
microsecond
"
"
nanosecond
"
]
.
forEach
(
smallestUnit
=
>
{
assert
(
inst
.
round
(
{
smallestUnit
}
)
.
equals
(
inst
.
round
(
{
smallestUnit
:
{
smallestUnit
}
s
}
)
)
)
;
}
)
;
[
"
hour
"
"
minute
"
"
second
"
"
millisecond
"
"
microsecond
"
"
nanosecond
"
]
.
forEach
(
smallestUnit
=
>
{
assert
(
inst
.
round
(
smallestUnit
)
.
equals
(
inst
.
round
(
{
smallestUnit
}
)
)
)
;
}
)
;
reportCompare
(
0
0
)
;
