'
use
strict
'
;
class
MyUint8Array
extends
Uint8Array
{
}
class
MyFloat32Array
extends
Float32Array
{
}
class
MyBigInt64Array
extends
BigInt64Array
{
}
const
builtinCtors
=
[
Uint8Array
Int8Array
Uint16Array
Int16Array
Uint32Array
Int32Array
Float32Array
Float64Array
Uint8ClampedArray
BigUint64Array
BigInt64Array
]
;
const
ctors
=
[
.
.
.
builtinCtors
MyUint8Array
MyFloat32Array
MyBigInt64Array
]
;
function
CreateResizableArrayBuffer
(
byteLength
maxByteLength
)
{
return
new
ArrayBuffer
(
byteLength
{
maxByteLength
:
maxByteLength
}
)
;
}
function
WriteToTypedArray
(
array
index
value
)
{
if
(
array
instanceof
BigInt64Array
|
|
array
instanceof
BigUint64Array
)
{
array
[
index
]
=
BigInt
(
value
)
;
}
else
{
array
[
index
]
=
value
;
}
}
function
Convert
(
item
)
{
if
(
typeof
item
=
=
'
bigint
'
)
{
return
Number
(
item
)
;
}
return
item
;
}
function
ToNumbers
(
array
)
{
let
result
=
[
]
;
for
(
let
item
of
array
)
{
result
.
push
(
Convert
(
item
)
)
;
}
return
result
;
}
function
CreateRabForTest
(
ctor
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
taWrite
=
new
ctor
(
rab
)
;
for
(
let
i
=
0
;
i
<
4
;
+
+
i
)
{
WriteToTypedArray
(
taWrite
i
2
*
i
)
;
}
return
rab
;
}
let
rab
;
let
resizeTo
;
function
CreateSourceProxy
(
length
)
{
return
new
Proxy
(
{
}
{
get
(
target
prop
receiver
)
{
if
(
prop
=
=
'
length
'
)
{
rab
.
resize
(
resizeTo
)
;
return
length
;
}
return
true
;
}
}
)
;
}
for
(
let
ctor
of
ctors
)
{
rab
=
CreateRabForTest
(
ctor
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
resizeTo
=
6
*
ctor
.
BYTES_PER_ELEMENT
;
assert
.
throws
(
RangeError
(
)
=
>
{
lengthTracking
.
set
(
CreateSourceProxy
(
6
)
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
new
ctor
(
rab
)
)
[
0
2
4
6
0
0
]
)
;
}
for
(
let
ctor
of
ctors
)
{
rab
=
CreateRabForTest
(
ctor
)
;
const
lengthTrackingWithOffset
=
new
ctor
(
rab
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
resizeTo
=
6
*
ctor
.
BYTES_PER_ELEMENT
;
assert
.
throws
(
RangeError
(
)
=
>
{
lengthTrackingWithOffset
.
set
(
CreateSourceProxy
(
4
)
)
;
}
)
;
assert
.
compareArray
(
ToNumbers
(
new
ctor
(
rab
)
)
[
0
2
4
6
0
0
]
)
;
}
reportCompare
(
0
0
)
;
