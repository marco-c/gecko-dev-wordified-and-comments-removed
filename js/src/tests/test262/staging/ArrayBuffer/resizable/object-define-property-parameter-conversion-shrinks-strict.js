'
use
strict
'
;
class
MyUint8Array
extends
Uint8Array
{
}
class
MyFloat32Array
extends
Float32Array
{
}
class
MyBigInt64Array
extends
BigInt64Array
{
}
const
builtinCtors
=
[
Uint8Array
Int8Array
Uint16Array
Int16Array
Uint32Array
Int32Array
Float32Array
Float64Array
Uint8ClampedArray
BigUint64Array
BigInt64Array
]
;
const
ctors
=
[
.
.
.
builtinCtors
MyUint8Array
MyFloat32Array
MyBigInt64Array
]
;
function
CreateResizableArrayBuffer
(
byteLength
maxByteLength
)
{
return
new
ArrayBuffer
(
byteLength
{
maxByteLength
:
maxByteLength
}
)
;
}
function
ObjectDefinePropertyHelper
(
ta
index
value
)
{
if
(
ta
instanceof
BigInt64Array
|
|
ta
instanceof
BigUint64Array
)
{
Object
.
defineProperty
(
ta
index
{
value
:
BigInt
(
value
)
}
)
;
}
else
{
Object
.
defineProperty
(
ta
index
{
value
:
value
}
)
;
}
}
const
helper
=
ObjectDefinePropertyHelper
;
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
fixedLength
=
new
ctor
(
rab
0
4
)
;
const
evil
=
{
toString
:
(
)
=
>
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
0
;
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
helper
(
fixedLength
evil
8
)
;
}
)
;
}
for
(
let
ctor
of
ctors
)
{
const
rab
=
CreateResizableArrayBuffer
(
4
*
ctor
.
BYTES_PER_ELEMENT
8
*
ctor
.
BYTES_PER_ELEMENT
)
;
const
lengthTracking
=
new
ctor
(
rab
0
)
;
const
evil
=
{
toString
:
(
)
=
>
{
rab
.
resize
(
2
*
ctor
.
BYTES_PER_ELEMENT
)
;
return
3
;
}
}
;
assert
.
throws
(
TypeError
(
)
=
>
{
helper
(
lengthTracking
evil
8
)
;
}
)
;
}
reportCompare
(
0
0
)
;
