'
use
strict
'
;
class
MyUint8Array
extends
Uint8Array
{
}
class
MyFloat32Array
extends
Float32Array
{
}
class
MyBigInt64Array
extends
BigInt64Array
{
}
const
builtinCtors
=
[
Uint8Array
Int8Array
Uint16Array
Int16Array
Uint32Array
Int32Array
Float32Array
Float64Array
Uint8ClampedArray
BigUint64Array
BigInt64Array
]
;
const
ctors
=
[
.
.
.
builtinCtors
MyUint8Array
MyFloat32Array
MyBigInt64Array
]
;
function
CreateResizableArrayBuffer
(
byteLength
maxByteLength
)
{
return
new
ArrayBuffer
(
byteLength
{
maxByteLength
:
maxByteLength
}
)
;
}
const
rab
=
CreateResizableArrayBuffer
(
16
40
)
;
let
tas_and_lengths
=
[
]
;
for
(
let
ctor
of
ctors
)
{
const
length
=
8
/
ctor
.
BYTES_PER_ELEMENT
;
tas_and_lengths
.
push
(
[
new
ctor
(
rab
0
length
)
length
]
)
;
}
for
(
let
[
ta
length
]
of
tas_and_lengths
)
{
assert
.
sameValue
(
ta
.
length
length
)
;
assert
.
sameValue
(
ta
.
byteLength
length
*
ta
.
BYTES_PER_ELEMENT
)
;
}
rab
.
resize
(
2
)
;
for
(
let
[
ta
length
]
of
tas_and_lengths
)
{
assert
.
sameValue
(
ta
.
length
0
)
;
assert
.
sameValue
(
ta
.
byteLength
0
)
;
}
rab
.
resize
(
8
)
;
for
(
let
[
ta
length
]
of
tas_and_lengths
)
{
assert
.
sameValue
(
ta
.
length
length
)
;
assert
.
sameValue
(
ta
.
byteLength
length
*
ta
.
BYTES_PER_ELEMENT
)
;
}
rab
.
resize
(
40
)
;
for
(
let
[
ta
length
]
of
tas_and_lengths
)
{
assert
.
sameValue
(
ta
.
length
length
)
;
assert
.
sameValue
(
ta
.
byteLength
length
*
ta
.
BYTES_PER_ELEMENT
)
;
}
reportCompare
(
0
0
)
;
