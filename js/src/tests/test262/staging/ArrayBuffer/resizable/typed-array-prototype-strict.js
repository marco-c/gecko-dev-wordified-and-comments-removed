'
use
strict
'
;
class
MyUint8Array
extends
Uint8Array
{
}
class
MyFloat32Array
extends
Float32Array
{
}
class
MyBigInt64Array
extends
BigInt64Array
{
}
const
builtinCtors
=
[
Uint8Array
Int8Array
Uint16Array
Int16Array
Uint32Array
Int32Array
Float32Array
Float64Array
Uint8ClampedArray
BigUint64Array
BigInt64Array
]
;
const
ctors
=
[
.
.
.
builtinCtors
MyUint8Array
MyFloat32Array
MyBigInt64Array
]
;
function
CreateResizableArrayBuffer
(
byteLength
maxByteLength
)
{
return
new
ArrayBuffer
(
byteLength
{
maxByteLength
:
maxByteLength
}
)
;
}
const
rab
=
CreateResizableArrayBuffer
(
40
80
)
;
const
ab
=
new
ArrayBuffer
(
80
)
;
for
(
let
ctor
of
ctors
)
{
const
ta_rab
=
new
ctor
(
rab
0
3
)
;
const
ta_ab
=
new
ctor
(
ab
0
3
)
;
assert
.
sameValue
(
ta_ab
.
__proto__
ta_rab
.
__proto__
)
;
}
reportCompare
(
0
0
)
;
