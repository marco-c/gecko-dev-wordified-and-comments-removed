function
TestDisposableStackMoveOnDisposedStack
(
)
{
let
stack
=
new
DisposableStack
(
)
;
stack
.
dispose
(
)
;
let
newStack
=
stack
.
move
(
)
;
}
;
assert
.
throws
(
ReferenceError
(
)
=
>
TestDisposableStackMoveOnDisposedStack
(
)
'
Cannot
move
elements
from
a
disposed
stack
!
'
)
;
let
valuesNormal
=
[
]
;
(
function
TestDisposableStackMove
(
)
{
let
stack
=
new
DisposableStack
(
)
;
const
firstDisposable
=
{
value
:
1
[
Symbol
.
dispose
]
(
)
{
valuesNormal
.
push
(
42
)
;
}
}
;
const
secondDisposable
=
{
value
:
2
[
Symbol
.
dispose
]
(
)
{
valuesNormal
.
push
(
43
)
;
}
}
;
stack
.
use
(
firstDisposable
)
;
stack
.
use
(
secondDisposable
)
;
let
newStack
=
stack
.
move
(
)
;
newStack
.
dispose
(
)
;
stack
.
dispose
(
)
;
}
)
(
)
;
assert
.
compareArray
(
valuesNormal
[
43
42
]
)
;
(
function
TestDisposableStackMoveNotSameObjects
(
)
{
let
stack
=
new
DisposableStack
(
)
;
const
firstDisposable
=
{
value
:
1
[
Symbol
.
dispose
]
(
)
{
return
42
;
}
}
;
const
secondDisposable
=
{
value
:
2
[
Symbol
.
dispose
]
(
)
{
return
43
;
}
}
;
stack
.
use
(
firstDisposable
)
;
stack
.
use
(
secondDisposable
)
;
let
newStack
=
stack
.
move
(
)
;
assert
.
notSameValue
(
stack
newStack
)
;
}
)
(
)
;
reportCompare
(
0
0
)
;
