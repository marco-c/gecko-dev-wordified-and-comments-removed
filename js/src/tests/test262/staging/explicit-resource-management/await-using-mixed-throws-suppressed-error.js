asyncTest
(
async
function
(
)
{
let
firstDisposeError
=
new
Test262Error
(
'
The
Symbol
.
dispose
is
throwing
!
'
)
;
let
secondDisposeError
=
new
Test262Error
(
'
The
Symbol
.
asyncDispose
is
throwing
!
'
)
;
async
function
TestTwoDisposeMethodsThrow
(
)
{
using
x
=
{
value
:
1
[
Symbol
.
dispose
]
(
)
{
throw
firstDisposeError
;
}
}
;
await
using
y
=
{
value
:
1
[
Symbol
.
asyncDispose
]
(
)
{
throw
secondDisposeError
;
}
}
;
}
;
await
assert
.
throwsAsync
(
SuppressedError
(
)
=
>
TestTwoDisposeMethodsThrow
(
)
'
An
error
was
suppressed
during
disposal
'
)
;
async
function
RunTestTwoDisposeMethodsThrow
(
)
{
try
{
TestTwoDisposeMethodsThrow
(
)
;
}
catch
(
error
)
{
assert
(
error
instanceof
SuppressedError
'
error
is
an
instanceof
SuppressedError
'
)
;
assert
.
sameValue
(
error
.
error
firstDisposeError
'
error
.
error
'
)
;
assert
.
sameValue
(
error
.
suppressed
secondDisposeError
'
error
.
suppressed
'
)
;
}
}
await
RunTestTwoDisposeMethodsThrow
(
)
;
}
)
;
