asyncTest
(
async
function
(
)
{
let
firstDisposeError
=
undefined
;
let
secondDisposeError
=
undefined
;
async
function
TestTwoDisposeMethodsThrowUndefined
(
)
{
await
using
x
=
{
value
:
1
[
Symbol
.
asyncDispose
]
(
)
{
throw
firstDisposeError
;
}
}
;
await
using
y
=
{
value
:
1
[
Symbol
.
asyncDispose
]
(
)
{
throw
secondDisposeError
;
}
}
;
}
;
await
assert
.
throwsAsync
(
SuppressedError
(
)
=
>
TestTwoDisposeMethodsThrowUndefined
(
)
'
An
error
was
suppressed
during
disposal
'
)
;
async
function
RunTestTwoDisposeMethodsThrowUndefined
(
)
{
try
{
TestTwoDisposeMethodsThrowUndefined
(
)
;
}
catch
(
error
)
{
assert
(
error
instanceof
SuppressedError
'
error
is
an
instanceof
SuppressedError
'
)
;
assert
.
sameValue
(
error
.
error
firstDisposeError
'
error
.
error
'
)
;
assert
.
sameValue
(
error
.
suppressed
secondDisposeError
'
error
.
suppressed
'
)
;
}
}
await
RunTestTwoDisposeMethodsThrowUndefined
(
)
;
}
)
;
