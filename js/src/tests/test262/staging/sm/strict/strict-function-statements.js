assert
.
sameValue
(
testLenientAndStrict
(
"
function
f
(
)
{
}
"
parsesSuccessfully
parsesSuccessfully
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
{
(
function
f
(
)
{
}
)
}
"
parsesSuccessfully
parsesSuccessfully
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
if
(
true
)
function
f
(
)
{
}
"
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
while
(
true
)
function
f
(
)
{
}
"
parseRaisesException
(
SyntaxError
)
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
do
function
f
(
)
{
}
while
(
true
)
;
"
parseRaisesException
(
SyntaxError
)
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
for
(
;
;
)
function
f
(
)
{
}
"
parseRaisesException
(
SyntaxError
)
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
for
(
x
in
[
]
)
function
f
(
)
{
}
"
parseRaisesException
(
SyntaxError
)
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
with
(
o
)
function
f
(
)
{
}
"
parseRaisesException
(
SyntaxError
)
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
switch
(
1
)
{
case
1
:
function
f
(
)
{
}
}
"
parsesSuccessfully
parsesSuccessfully
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
x
:
function
f
(
)
{
}
"
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
try
{
function
f
(
)
{
}
}
catch
(
x
)
{
}
"
parsesSuccessfully
parsesSuccessfully
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
if
(
true
)
(
function
f
(
)
{
}
)
"
parsesSuccessfully
parsesSuccessfully
)
true
)
;
assert
.
sameValue
(
parsesSuccessfully
(
"
function
f
(
)
{
function
g
(
)
{
}
}
"
)
true
)
;
assert
.
sameValue
(
parsesSuccessfully
(
"
function
f
(
)
{
if
(
true
)
function
g
(
)
{
}
}
"
)
true
)
;
assert
.
sameValue
(
parseRaisesException
(
SyntaxError
)
(
"
function
f
(
)
{
'
use
strict
'
;
if
(
true
)
function
g
(
)
{
}
}
"
)
true
)
;
assert
.
sameValue
(
parsesSuccessfully
(
"
function
f
(
)
{
'
use
strict
'
;
{
function
g
(
)
{
}
}
}
"
)
true
)
;
assert
.
sameValue
(
parsesSuccessfully
(
"
function
f
(
)
{
'
use
strict
'
;
if
(
true
)
(
function
g
(
)
{
}
)
}
"
)
true
)
;
assert
.
sameValue
(
parsesSuccessfully
(
"
function
f
(
)
{
'
use
strict
'
;
{
(
function
g
(
)
{
}
)
}
}
"
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
function
f
(
)
{
}
"
completesNormally
completesNormally
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
"
{
function
f
(
)
{
}
}
"
completesNormally
completesNormally
)
true
)
;
reportCompare
(
0
0
)
;
