assert
.
sameValue
(
testLenientAndStrict
(
'
let
eval
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
let
x
eval
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
let
arguments
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
let
x
arguments
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
const
eval
=
undefined
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
const
x
=
undefined
eval
=
undefined
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
const
arguments
=
undefined
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
const
x
=
undefined
arguments
=
undefined
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
eval
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
[
eval
]
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
{
x
:
eval
}
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
arguments
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
[
arguments
]
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
assert
.
sameValue
(
testLenientAndStrict
(
'
for
(
let
{
x
:
arguments
}
in
[
]
)
break
;
'
parsesSuccessfully
parseRaisesException
(
SyntaxError
)
)
true
)
;
reportCompare
(
0
0
)
;
