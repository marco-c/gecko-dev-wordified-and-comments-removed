var
STRING
=
"
xyzzy
"
;
var
NUMBER
=
42
;
function
assertCallsToPrimitive
(
f
expectedHint
expectedResult
)
{
var
hint
=
undefined
;
var
testObj
=
{
[
Symbol
.
toPrimitive
]
(
h
)
{
assert
.
sameValue
(
hint
undefined
)
;
hint
=
h
;
return
h
=
=
=
"
number
"
?
NUMBER
:
STRING
;
}
}
;
var
result
=
f
(
testObj
)
;
assert
.
sameValue
(
hint
expectedHint
String
(
f
)
)
;
assert
.
sameValue
(
result
expectedResult
String
(
f
)
)
;
}
assertCallsToPrimitive
(
Number
"
number
"
NUMBER
)
;
assertCallsToPrimitive
(
String
"
string
"
STRING
)
;
var
obj
=
{
[
STRING
]
:
"
pass
"
}
;
assertCallsToPrimitive
(
key
=
>
obj
[
key
]
"
string
"
"
pass
"
)
;
assertCallsToPrimitive
(
x
=
>
x
>
=
42
"
number
"
true
)
;
assertCallsToPrimitive
(
x
=
>
x
>
"
42
"
"
number
"
false
)
;
assertCallsToPrimitive
(
x
=
>
x
!
=
STRING
"
default
"
false
)
;
assertCallsToPrimitive
(
x
=
>
STRING
=
=
x
"
default
"
true
)
;
assertCallsToPrimitive
(
x
=
>
x
=
=
NUMBER
"
default
"
false
)
;
assertCallsToPrimitive
(
x
=
>
NUMBER
!
=
x
"
default
"
true
)
;
assertCallsToPrimitive
(
x
=
>
1
+
x
"
default
"
"
1
"
+
STRING
)
;
assertCallsToPrimitive
(
x
=
>
"
"
+
x
"
default
"
STRING
)
;
assertCallsToPrimitive
(
x
=
>
(
new
Date
(
x
)
)
.
valueOf
(
)
"
default
"
Number
(
STRING
)
)
;
var
expected
=
"
a
suffusion
of
yellow
"
;
function
testJSON
(
x
)
{
x
.
toJSON
=
Date
.
prototype
.
toJSON
;
x
.
toISOString
=
function
(
)
{
return
expected
;
}
;
return
JSON
.
stringify
(
x
)
;
}
assertCallsToPrimitive
(
testJSON
"
number
"
JSON
.
stringify
(
expected
)
)
;
reportCompare
(
0
0
)
;
