var
ieval
=
eval
;
var
AsyncFunction
=
async
function
(
)
{
}
.
constructor
;
var
functionContext
=
{
Function
:
{
constructor
:
Function
toSourceBody
:
code
=
>
function
f
(
)
{
{
code
}
}
toSourceParameter
:
code
=
>
function
f
(
x
=
{
code
}
)
{
}
}
AsyncFunction
:
{
constructor
:
AsyncFunction
toSourceBody
:
code
=
>
async
function
f
(
)
{
{
code
}
}
toSourceParameter
:
code
=
>
async
function
f
(
x
=
{
code
}
)
{
}
}
}
;
function
assertSyntaxError
(
kind
code
)
{
var
{
constructor
toSourceBody
toSourceParameter
}
=
functionContext
[
kind
]
;
var
body
=
toSourceBody
(
code
)
;
var
parameter
=
toSourceParameter
(
code
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
constructor
(
code
)
;
}
SyntaxError
constructor
.
name
+
"
:
"
+
code
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
constructor
(
x
=
{
code
}
"
"
)
;
}
SyntaxError
constructor
.
name
+
"
:
"
+
code
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
eval
(
body
)
;
}
SyntaxError
"
eval
:
"
+
body
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
ieval
(
body
)
;
}
SyntaxError
"
indirect
eval
:
"
+
body
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
eval
(
parameter
)
;
}
SyntaxError
"
eval
:
"
+
parameter
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
ieval
(
parameter
)
;
}
SyntaxError
"
indirect
eval
:
"
+
parameter
)
;
}
function
assertNoSyntaxError
(
kind
code
)
{
var
{
constructor
toSourceBody
toSourceParameter
}
=
functionContext
[
kind
]
;
var
body
=
toSourceBody
(
code
)
;
var
parameter
=
toSourceParameter
(
code
)
;
constructor
(
code
)
;
constructor
(
x
=
{
code
}
"
"
)
;
eval
(
body
)
;
ieval
(
body
)
;
eval
(
parameter
)
;
ieval
(
parameter
)
;
}
function
assertSyntaxErrorAsync
(
code
)
{
assertNoSyntaxError
(
"
Function
"
code
)
;
assertSyntaxError
(
"
AsyncFunction
"
code
)
;
}
function
assertSyntaxErrorBoth
(
code
)
{
assertSyntaxError
(
"
Function
"
code
)
;
assertSyntaxError
(
"
AsyncFunction
"
code
)
;
}
assertSyntaxErrorAsync
(
"
(
a
=
await
/
r
/
g
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
await
/
r
/
g
)
=
>
{
}
"
)
;
assertSyntaxErrorAsync
(
"
(
a
=
(
b
=
await
/
r
/
g
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
(
b
=
await
/
r
/
g
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
(
a
=
async
(
b
=
await
/
r
/
g
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
async
(
b
=
await
/
r
/
g
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorAsync
(
"
(
.
.
.
await
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
.
.
.
await
)
=
>
{
}
"
)
;
assertSyntaxErrorAsync
(
"
(
a
.
.
.
await
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
.
.
.
await
)
=
>
{
}
"
)
;
assertSyntaxErrorAsync
(
"
(
a
=
(
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
(
a
=
async
(
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
(
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
async
(
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorAsync
(
"
(
a
=
(
b
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
(
a
=
async
(
b
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
(
b
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
assertSyntaxErrorBoth
(
"
async
(
a
=
async
(
b
.
.
.
await
)
=
>
{
}
)
=
>
{
}
"
)
;
reportCompare
(
0
0
)
;
