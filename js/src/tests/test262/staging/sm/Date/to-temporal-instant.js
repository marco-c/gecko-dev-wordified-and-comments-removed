const
min
=
new
Date
(
-
8640000000000000
)
.
toTemporalInstant
(
)
;
const
max
=
new
Date
(
8640000000000000
)
.
toTemporalInstant
(
)
;
const
epoch
=
new
Date
(
0
)
.
toTemporalInstant
(
)
;
const
minTemporalInstant
=
new
Temporal
.
Instant
(
-
8640000000000000000000n
)
const
maxTemporalInstant
=
new
Temporal
.
Instant
(
8640000000000000000000n
)
const
zeroInstant
=
new
Temporal
.
Instant
(
0n
)
let
zero
=
Temporal
.
Duration
.
from
(
{
nanoseconds
:
0
}
)
;
let
one
=
Temporal
.
Duration
.
from
(
{
nanoseconds
:
1
}
)
;
let
minusOne
=
Temporal
.
Duration
.
from
(
{
nanoseconds
:
-
1
}
)
;
{
const
invalidDate
=
new
Date
(
NaN
)
;
assertThrowsInstanceOf
(
(
)
=
>
invalidDate
.
toTemporalInstant
(
)
RangeError
)
;
}
{
assert
.
sameValue
(
min
.
epochNanoseconds
minTemporalInstant
.
epochNanoseconds
)
;
assert
.
sameValue
(
max
.
epochNanoseconds
maxTemporalInstant
.
epochNanoseconds
)
;
assert
.
sameValue
(
epoch
.
epochNanoseconds
zeroInstant
.
epochNanoseconds
)
;
assert
.
sameValue
(
min
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
minTemporalInstant
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
)
;
assert
.
sameValue
(
max
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
maxTemporalInstant
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
)
;
assert
.
sameValue
(
epoch
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
zeroInstant
.
toZonedDateTimeISO
(
'
UTC
'
)
.
toString
(
)
)
;
}
{
assert
.
sameValue
(
min
.
add
(
zero
)
.
epochNanoseconds
min
.
epochNanoseconds
)
;
assert
.
sameValue
(
min
.
subtract
(
zero
)
.
epochNanoseconds
min
.
epochNanoseconds
)
;
assert
.
sameValue
(
max
.
add
(
zero
)
.
epochNanoseconds
max
.
epochNanoseconds
)
;
assert
.
sameValue
(
max
.
subtract
(
zero
)
.
epochNanoseconds
max
.
epochNanoseconds
)
;
assert
.
sameValue
(
min
.
add
(
one
)
.
epochNanoseconds
min
.
epochNanoseconds
+
1n
)
;
assert
.
sameValue
(
min
.
subtract
(
minusOne
)
.
epochNanoseconds
min
.
epochNanoseconds
+
1n
)
;
assert
.
sameValue
(
max
.
add
(
minusOne
)
.
epochNanoseconds
max
.
epochNanoseconds
-
1n
)
;
assert
.
sameValue
(
max
.
subtract
(
one
)
.
epochNanoseconds
max
.
epochNanoseconds
-
1n
)
;
assertThrowsInstanceOf
(
(
)
=
>
min
.
add
(
minusOne
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
min
.
subtract
(
one
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
max
.
add
(
one
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
max
.
subtract
(
minusOne
)
RangeError
)
;
}
reportCompare
(
0
0
)
;
