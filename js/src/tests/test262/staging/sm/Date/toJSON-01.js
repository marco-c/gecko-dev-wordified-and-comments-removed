var
gTestfile
=
'
toJSON
-
01
.
js
'
;
var
BUGNUMBER
=
584811
;
var
summary
=
"
Date
.
prototype
.
toJSON
isn
'
t
to
spec
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
var
called
;
var
dateToJSON
=
Date
.
prototype
.
toJSON
;
assert
.
sameValue
(
Date
.
prototype
.
hasOwnProperty
(
"
toJSON
"
)
true
)
;
assert
.
sameValue
(
typeof
dateToJSON
"
function
"
)
;
var
invalidDate
=
new
Date
(
)
;
invalidDate
.
setTime
(
NaN
)
;
assert
.
sameValue
(
JSON
.
stringify
(
{
p
:
invalidDate
}
)
'
{
"
p
"
:
null
}
'
)
;
assert
.
sameValue
(
dateToJSON
.
length
1
)
;
try
{
dateToJSON
.
call
(
null
)
;
throw
new
Error
(
"
should
have
thrown
a
TypeError
"
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
ToObject
throws
TypeError
for
null
/
undefined
"
)
;
}
try
{
dateToJSON
.
call
(
undefined
)
;
throw
new
Error
(
"
should
have
thrown
a
TypeError
"
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
ToObject
throws
TypeError
for
null
/
undefined
"
)
;
}
try
{
var
r
=
dateToJSON
.
call
(
{
get
valueOf
(
)
{
throw
17
;
}
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
17
"
bad
exception
:
"
+
e
)
;
}
called
=
false
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
null
toString
:
function
(
)
{
called
=
true
;
return
12
;
}
toISOString
:
function
(
)
{
return
"
ohai
"
;
}
}
)
"
ohai
"
)
;
assert
.
sameValue
(
called
true
)
;
called
=
false
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
called
=
true
;
return
42
;
}
toISOString
:
function
(
)
{
return
null
;
}
}
)
null
)
;
assert
.
sameValue
(
called
true
)
;
try
{
called
=
false
;
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
called
=
true
;
return
{
}
;
}
get
toString
(
)
{
throw
42
;
}
}
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
called
true
)
;
assert
.
sameValue
(
e
42
"
bad
exception
:
"
+
e
)
;
}
called
=
false
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
called
=
true
;
return
{
}
;
}
get
toString
(
)
{
return
function
(
)
{
return
8675309
;
}
;
}
toISOString
:
function
(
)
{
return
true
;
}
}
)
true
)
;
assert
.
sameValue
(
called
true
)
;
var
asserted
=
false
;
called
=
false
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
called
=
true
;
return
{
}
;
}
get
toString
(
)
{
assert
.
sameValue
(
called
true
)
;
asserted
=
true
;
return
function
(
)
{
return
8675309
;
}
;
}
toISOString
:
function
(
)
{
return
NaN
;
}
}
)
NaN
)
;
assert
.
sameValue
(
asserted
true
)
;
try
{
var
r
=
dateToJSON
.
call
(
{
valueOf
:
null
toString
:
null
get
toISOString
(
)
{
throw
new
Error
(
"
shouldn
'
t
have
been
gotten
"
)
;
}
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
bad
exception
:
"
+
e
)
;
}
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
Infinity
;
}
}
)
null
)
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
-
Infinity
;
}
}
)
null
)
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
NaN
;
}
}
)
null
)
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
Infinity
;
}
toISOString
:
function
(
)
{
return
{
}
;
}
}
)
null
)
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
-
Infinity
;
}
toISOString
:
function
(
)
{
return
[
]
;
}
}
)
null
)
;
assert
.
sameValue
(
dateToJSON
.
call
(
{
valueOf
:
function
(
)
{
return
NaN
;
}
toISOString
:
function
(
)
{
return
undefined
;
}
}
)
null
)
;
try
{
var
r
=
dateToJSON
.
call
(
{
get
toISOString
(
)
{
throw
42
;
}
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
42
"
bad
exception
:
"
+
e
)
;
}
try
{
var
r
=
dateToJSON
.
call
(
{
toISOString
:
null
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
bad
exception
:
"
+
e
)
;
}
try
{
var
r
=
dateToJSON
.
call
(
{
toISOString
:
undefined
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
bad
exception
:
"
+
e
)
;
}
try
{
var
r
=
dateToJSON
.
call
(
{
toISOString
:
"
oogabooga
"
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
bad
exception
:
"
+
e
)
;
}
try
{
var
r
=
dateToJSON
.
call
(
{
toISOString
:
Math
.
PI
}
)
;
throw
new
Error
(
"
didn
'
t
throw
returned
:
"
+
r
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
TypeError
true
"
bad
exception
:
"
+
e
)
;
}
var
o
=
{
toISOString
:
function
(
a
)
{
called
=
true
;
assert
.
sameValue
(
this
o
)
;
assert
.
sameValue
(
a
undefined
)
;
assert
.
sameValue
(
arguments
.
length
0
)
;
return
obj
;
}
}
;
var
obj
=
{
}
;
called
=
false
;
assert
.
sameValue
(
dateToJSON
.
call
(
o
)
obj
"
should
have
gotten
obj
back
"
)
;
assert
.
sameValue
(
called
true
)
;
print
(
"
All
tests
passed
!
"
)
;
reportCompare
(
0
0
)
;
