var
log
=
"
"
;
function
collect_results
(
iter
)
{
var
ret
=
[
]
;
var
result
;
do
{
result
=
iter
.
next
(
)
;
ret
.
push
(
result
)
;
}
while
(
!
result
.
done
)
;
return
ret
;
}
function
Iter
(
val
count
)
{
function
next
(
)
{
log
+
=
'
n
'
;
return
{
get
done
(
)
{
log
+
=
"
d
"
;
return
count
-
-
=
=
0
;
}
get
value
(
)
{
log
+
=
"
v
"
;
return
val
;
}
}
}
function
iterator
(
)
{
log
+
=
'
i
'
;
return
this
;
}
this
.
next
=
next
;
this
[
Symbol
.
iterator
]
=
iterator
;
}
function
*
delegate
(
iter
)
{
return
yield
*
iter
;
}
var
inner
=
new
Iter
(
42
5
)
;
var
outer
=
delegate
(
inner
)
;
outer
.
next
(
)
;
outer
.
next
(
)
;
outer
.
next
(
)
;
outer
.
next
(
)
;
outer
.
next
(
)
;
outer
.
next
(
)
;
assert
.
sameValue
(
log
"
indndndndndndv
"
)
;
assert
.
deepEqual
(
outer
.
next
(
)
{
value
:
undefined
done
:
true
}
)
;
assert
.
sameValue
(
log
"
indndndndndndv
"
)
;
reportCompare
(
0
0
)
;
