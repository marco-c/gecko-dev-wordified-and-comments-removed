var
BUGNUMBER
=
1202134
;
var
summary
=
"
Return
value
should
not
be
overwritten
by
finally
block
with
normal
execution
.
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
var
f
g
v
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
return
43
;
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
throw
43
;
}
}
;
var
caught
=
false
;
g
=
f
(
)
;
try
{
v
=
g
.
next
(
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
43
)
;
caught
=
true
;
}
assert
.
sameValue
(
caught
true
)
;
f
=
function
*
(
)
{
do
try
{
return
42
;
}
finally
{
break
;
}
while
(
false
)
;
return
43
;
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
L
:
try
{
return
42
;
}
finally
{
break
L
;
}
return
43
;
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
do
try
{
return
42
;
}
finally
{
continue
;
}
while
(
false
)
;
return
43
;
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
do
try
{
return
43
;
}
finally
{
break
;
}
while
(
0
)
;
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
L
:
try
{
return
43
;
}
finally
{
break
L
;
}
}
}
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
do
try
{
return
43
;
}
finally
{
continue
;
}
while
(
0
)
;
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
try
{
try
{
return
43
;
}
finally
{
throw
9
;
}
}
catch
(
e
)
{
}
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
41
;
}
finally
{
try
{
return
42
;
}
finally
{
do
try
{
return
43
;
}
finally
{
break
;
}
while
(
0
)
;
}
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
yield
43
;
}
}
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
false
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
yield
43
;
}
}
;
caught
=
false
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
false
)
;
try
{
v
=
g
.
throw
(
44
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
44
)
;
caught
=
true
;
}
assert
.
sameValue
(
caught
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
try
{
yield
43
;
}
catch
(
e
)
{
}
}
}
;
caught
=
false
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
false
)
;
v
=
g
.
throw
(
44
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
return
42
;
}
finally
{
yield
43
;
}
}
;
caught
=
false
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
43
)
;
assert
.
sameValue
(
v
.
done
false
)
;
v
=
g
.
return
(
44
)
;
assert
.
sameValue
(
v
.
value
44
)
;
assert
.
sameValue
(
v
.
done
true
)
;
f
=
function
*
(
)
{
try
{
yield
42
;
}
finally
{
do
try
{
return
43
;
}
finally
{
continue
;
}
while
(
0
)
;
}
}
;
caught
=
false
;
g
=
f
(
)
;
v
=
g
.
next
(
)
;
assert
.
sameValue
(
v
.
value
42
)
;
assert
.
sameValue
(
v
.
done
false
)
;
v
=
g
.
return
(
44
)
;
assert
.
sameValue
(
v
.
value
44
)
;
assert
.
sameValue
(
v
.
done
true
)
;
reportCompare
(
0
0
)
;
