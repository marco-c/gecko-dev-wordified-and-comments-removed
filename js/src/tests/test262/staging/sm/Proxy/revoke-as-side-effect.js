function
createProxy
(
proxyTarget
)
{
var
{
proxy
revoke
}
=
Proxy
.
revocable
(
proxyTarget
new
Proxy
(
{
}
{
get
(
target
propertyKey
receiver
)
{
print
(
"
trap
get
:
"
propertyKey
)
;
revoke
(
)
;
}
}
)
)
;
return
proxy
;
}
var
obj
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
createProxy
(
{
}
)
)
Object
.
prototype
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
createProxy
(
[
]
)
)
Array
.
prototype
)
;
obj
=
{
}
;
Object
.
setPrototypeOf
(
createProxy
(
obj
)
Array
.
prototype
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
obj
)
Array
.
prototype
)
;
assert
.
sameValue
(
Object
.
isExtensible
(
createProxy
(
{
}
)
)
true
)
;
assert
.
sameValue
(
Object
.
isExtensible
(
createProxy
(
Object
.
preventExtensions
(
{
}
)
)
)
false
)
;
obj
=
{
}
;
Object
.
preventExtensions
(
createProxy
(
obj
)
)
;
assert
.
sameValue
(
Object
.
isExtensible
(
obj
)
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
createProxy
(
{
}
)
"
a
"
)
undefined
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
createProxy
(
{
a
:
5
}
)
"
a
"
)
.
value
5
)
;
obj
=
{
}
;
Object
.
defineProperty
(
createProxy
(
obj
)
"
a
"
{
value
:
5
}
)
;
assert
.
sameValue
(
obj
.
a
5
)
;
assert
.
sameValue
(
"
a
"
in
createProxy
(
{
}
)
false
)
;
assert
.
sameValue
(
"
a
"
in
createProxy
(
{
a
:
5
}
)
true
)
;
assert
.
sameValue
(
createProxy
(
{
}
)
.
a
undefined
)
;
assert
.
sameValue
(
createProxy
(
{
a
:
5
}
)
.
a
5
)
;
assertThrowsInstanceOf
(
(
)
=
>
createProxy
(
{
}
)
.
a
=
0
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
createProxy
(
{
a
:
5
}
)
.
a
=
0
TypeError
)
;
assert
.
sameValue
(
delete
createProxy
(
{
}
)
.
a
true
)
;
assert
.
sameValue
(
delete
createProxy
(
Object
.
defineProperty
(
{
}
"
a
"
{
configurable
:
false
}
)
)
.
a
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyNames
(
createProxy
(
{
}
)
)
.
length
0
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyNames
(
createProxy
(
{
a
:
5
}
)
)
.
length
1
)
;
assert
.
sameValue
(
createProxy
(
function
(
)
{
return
"
ok
"
}
)
(
)
"
ok
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
(
createProxy
(
function
q
(
)
{
return
obj
;
}
)
)
TypeError
)
;
reportCompare
(
0
0
)
;
