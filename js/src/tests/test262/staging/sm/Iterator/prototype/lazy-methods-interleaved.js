class
TestIterator
extends
Iterator
{
value
=
0
;
next
(
)
{
return
{
done
:
false
value
:
this
.
value
+
+
}
;
}
}
function
unwrapResult
(
result
)
{
return
result
;
}
const
methods
=
[
iter
=
>
iter
.
map
(
x
=
>
x
)
iter
=
>
iter
.
filter
(
x
=
>
true
)
iter
=
>
iter
.
take
(
2
)
iter
=
>
iter
.
drop
(
0
)
iter
=
>
iter
.
flatMap
(
x
=
>
[
x
]
)
]
;
for
(
const
firstMethod
of
methods
)
{
for
(
const
secondMethod
of
methods
)
{
const
iterator
=
new
TestIterator
(
)
;
const
firstHelper
=
firstMethod
(
iterator
)
;
const
secondHelper
=
secondMethod
(
iterator
)
;
let
firstResult
=
unwrapResult
(
firstHelper
.
next
(
)
)
;
assert
.
sameValue
(
firstResult
.
done
false
)
;
assert
.
sameValue
(
firstResult
.
value
0
)
;
let
secondResult
=
unwrapResult
(
secondHelper
.
next
(
)
)
;
assert
.
sameValue
(
secondResult
.
done
false
)
;
assert
.
sameValue
(
secondResult
.
value
1
)
;
firstResult
=
unwrapResult
(
firstHelper
.
next
(
)
)
;
assert
.
sameValue
(
firstResult
.
done
false
)
;
assert
.
sameValue
(
firstResult
.
value
2
)
;
secondResult
=
unwrapResult
(
secondHelper
.
next
(
)
)
;
assert
.
sameValue
(
secondResult
.
done
false
)
;
assert
.
sameValue
(
secondResult
.
value
3
)
;
}
}
reportCompare
(
0
0
)
;
