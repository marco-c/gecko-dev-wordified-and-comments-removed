function
isSyntaxError
(
code
)
{
try
{
eval
(
code
)
;
return
false
;
}
catch
(
exception
)
{
if
(
SyntaxError
.
prototype
.
isPrototypeOf
(
exception
)
)
return
true
;
throw
exception
;
}
;
}
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
x
)
{
}
"
)
false
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
[
x
]
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
{
y
:
x
}
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
{
x
}
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
[
x
]
x
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
{
y
:
x
}
x
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
{
x
}
x
)
{
}
)
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
[
x
x
]
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
{
x
x
}
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
{
y
:
x
z
:
x
}
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
x
[
y
]
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
x
x
{
y
}
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
[
y
]
x
x
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
{
y
}
x
x
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
a
b
c
d
e
f
g
h
b
[
y
]
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
[
y
]
a
b
c
d
e
f
g
h
a
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
[
a
]
b
c
d
e
f
g
h
i
a
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
a
b
c
d
e
f
g
h
i
[
a
]
)
{
}
"
)
true
)
;
assert
.
sameValue
(
isSyntaxError
(
"
function
f
(
a
b
c
d
e
f
g
h
i
[
a
]
)
{
}
"
)
true
)
;
reportCompare
(
0
0
)
;
