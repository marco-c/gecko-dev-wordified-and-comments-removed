{
assert
.
sameValue
(
f
(
)
4
)
;
function
f
(
)
{
return
3
;
}
assert
.
sameValue
(
f
(
)
4
)
;
function
f
(
)
{
return
4
;
}
assert
.
sameValue
(
f
(
)
4
)
;
}
assert
.
sameValue
(
f
(
)
4
)
;
{
assert
.
sameValue
(
f
(
)
4
)
;
function
f
(
)
{
return
3
;
}
assert
.
sameValue
(
f
(
)
4
)
;
l
:
function
f
(
)
{
return
4
;
}
assert
.
sameValue
(
f
(
)
4
)
;
}
assert
.
sameValue
(
f
(
)
4
)
;
function
test
(
)
{
{
assert
.
sameValue
(
f
(
)
2
)
;
function
f
(
)
{
return
1
;
}
assert
.
sameValue
(
f
(
)
2
)
;
function
f
(
)
{
return
2
;
}
assert
.
sameValue
(
f
(
)
2
)
;
}
assert
.
sameValue
(
f
(
)
2
)
;
}
test
(
)
;
var
log
=
'
'
;
try
{
eval
(
"
use
strict
"
;
{
function
f
(
)
{
}
function
f
(
)
{
}
}
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
SyntaxError
true
)
;
log
+
=
'
e
'
;
}
try
{
eval
(
{
let
x
=
42
;
function
x
(
)
{
}
}
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
SyntaxError
true
)
;
log
+
=
'
e
'
;
}
try
{
eval
(
{
const
x
=
42
;
function
x
(
)
{
}
}
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
instanceof
SyntaxError
true
)
;
log
+
=
'
e
'
;
}
assert
.
sameValue
(
log
'
eee
'
)
;
if
(
'
assert
.
sameValue
'
in
this
)
reportCompare
(
0
0
)
;
