var
symbols
=
[
Symbol
(
)
Symbol
(
"
one
"
)
Symbol
.
for
(
"
two
"
)
Symbol
.
iterator
]
;
function
testSymbolConversions
(
sym
)
{
assert
.
sameValue
(
Boolean
(
sym
)
true
)
;
assert
.
sameValue
(
!
sym
false
)
;
assert
.
sameValue
(
sym
|
|
13
sym
)
;
assert
.
sameValue
(
sym
&
&
13
13
)
;
assertThrowsInstanceOf
(
(
)
=
>
+
sym
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sym
|
0
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
"
+
sym
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sym
+
"
"
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
"
+
[
1
2
sym
]
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
[
"
simple
"
"
thimble
"
sym
]
.
join
(
)
TypeError
)
;
assert
.
sameValue
(
String
(
sym
)
sym
.
toString
(
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
String
(
sym
)
TypeError
)
;
var
obj
=
Object
(
sym
)
;
assert
.
sameValue
(
typeof
obj
"
object
"
)
;
assert
.
sameValue
(
Object
.
prototype
.
toString
.
call
(
obj
)
"
[
object
Symbol
]
"
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
obj
)
Symbol
.
prototype
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyNames
(
obj
)
.
length
0
)
;
assert
.
sameValue
(
Object
(
sym
)
=
=
=
Object
(
sym
)
false
)
;
var
f
=
function
(
)
{
return
this
;
}
;
assert
.
sameValue
(
f
.
call
(
sym
)
=
=
=
f
.
call
(
sym
)
false
)
;
}
for
(
var
sym
of
symbols
)
{
testSymbolConversions
(
sym
)
;
var
symobj
=
Object
(
sym
)
;
assertThrowsInstanceOf
(
(
)
=
>
Number
(
symobj
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
String
(
symobj
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
symobj
<
0
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
0
<
symobj
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
symobj
+
1
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
"
"
+
symobj
TypeError
)
;
assert
.
sameValue
(
sym
=
=
symobj
true
)
;
assert
.
sameValue
(
sym
=
=
=
symobj
false
)
;
assert
.
sameValue
(
symobj
=
=
0
false
)
;
assert
.
sameValue
(
0
!
=
symobj
true
)
;
assertThrowsInstanceOf
(
(
)
=
>
String
(
Object
(
sym
)
)
TypeError
)
;
}
delete
Symbol
.
prototype
[
Symbol
.
toPrimitive
]
;
assert
.
sameValue
(
Symbol
.
toPrimitive
in
Symbol
.
prototype
false
)
;
testSymbolConversions
(
symbols
[
0
]
)
;
var
VALUEOF_CALLED
=
117
.
25
;
Symbol
.
prototype
.
valueOf
=
function
(
)
{
return
VALUEOF_CALLED
;
}
;
Symbol
.
prototype
.
toString
=
function
(
)
{
return
"
toString
called
"
;
}
;
for
(
var
sym
of
symbols
)
{
var
symobj
=
Object
(
sym
)
;
assert
.
sameValue
(
Number
(
symobj
)
VALUEOF_CALLED
)
;
assert
.
sameValue
(
String
(
symobj
)
"
toString
called
"
)
;
assert
.
sameValue
(
symobj
<
0
VALUEOF_CALLED
<
0
)
;
assert
.
sameValue
(
0
<
symobj
0
<
VALUEOF_CALLED
)
;
assert
.
sameValue
(
symobj
+
1
VALUEOF_CALLED
+
1
)
;
assert
.
sameValue
(
"
"
+
symobj
"
"
+
VALUEOF_CALLED
)
;
assert
.
sameValue
(
symobj
=
=
0
false
)
;
assert
.
sameValue
(
0
!
=
symobj
true
)
;
}
reportCompare
(
0
0
)
;
