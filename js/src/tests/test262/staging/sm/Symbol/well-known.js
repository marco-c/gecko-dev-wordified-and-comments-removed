var
names
=
[
"
isConcatSpreadable
"
"
iterator
"
"
match
"
"
replace
"
"
search
"
"
species
"
"
hasInstance
"
"
split
"
"
toPrimitive
"
"
unscopables
"
"
asyncIterator
"
]
;
for
(
var
name
of
names
)
{
assert
.
sameValue
(
typeof
Symbol
[
name
]
"
symbol
"
)
;
assert
.
sameValue
(
Symbol
[
name
]
!
=
=
Symbol
.
for
(
"
Symbol
.
"
+
name
)
true
)
;
if
(
typeof
Realm
=
=
=
'
function
'
)
throw
new
Error
(
"
please
update
this
test
to
use
Realms
"
)
;
if
(
typeof
createNewGlobal
=
=
=
'
function
'
)
{
var
g
=
createNewGlobal
(
)
;
assert
.
sameValue
(
Symbol
[
name
]
g
.
Symbol
[
name
]
)
;
}
var
desc
=
Object
.
getOwnPropertyDescriptor
(
Symbol
name
)
;
assert
.
sameValue
(
typeof
desc
.
value
"
symbol
"
)
;
assert
.
sameValue
(
desc
.
writable
false
)
;
assert
.
sameValue
(
desc
.
enumerable
false
)
;
assert
.
sameValue
(
desc
.
configurable
false
)
;
}
reportCompare
(
0
0
)
;
