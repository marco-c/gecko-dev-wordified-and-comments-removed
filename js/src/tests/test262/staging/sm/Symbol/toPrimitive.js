var
sym
=
Symbol
.
for
(
"
truth
"
)
var
obj
=
Object
(
sym
)
;
assert
.
sameValue
(
obj
[
Symbol
.
toPrimitive
]
(
"
default
"
)
sym
)
;
assert
.
sameValue
(
obj
[
Symbol
.
toPrimitive
]
(
"
number
"
)
sym
)
;
assert
.
sameValue
(
obj
[
Symbol
.
toPrimitive
]
(
"
string
"
)
sym
)
;
assert
.
sameValue
(
obj
[
Symbol
.
toPrimitive
]
(
)
sym
)
;
assert
.
sameValue
(
obj
[
Symbol
.
toPrimitive
]
(
Math
.
atan2
)
sym
)
;
assert
.
sameValue
(
sym
[
Symbol
.
toPrimitive
]
(
)
sym
)
;
var
obj2
=
createNewGlobal
(
)
.
Object
(
sym
)
;
assert
.
sameValue
(
obj2
[
Symbol
.
toPrimitive
]
(
"
default
"
)
sym
)
;
var
symbolToPrimitive
=
Symbol
.
prototype
[
Symbol
.
toPrimitive
]
;
var
nonSymbols
=
[
undefined
null
true
13
NaN
"
justice
"
{
}
[
sym
]
symbolToPrimitive
new
Proxy
(
obj
{
}
)
]
;
for
(
var
value
of
nonSymbols
)
{
assertThrowsInstanceOf
(
(
)
=
>
symbolToPrimitive
.
call
(
value
"
string
"
)
TypeError
)
;
}
assert
.
sameValue
(
symbolToPrimitive
.
name
"
[
Symbol
.
toPrimitive
]
"
)
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
Symbol
.
prototype
Symbol
.
toPrimitive
)
;
assert
.
sameValue
(
desc
.
configurable
true
)
;
assert
.
sameValue
(
desc
.
enumerable
false
)
;
assert
.
sameValue
(
desc
.
writable
false
)
;
reportCompare
(
0
0
)
;
