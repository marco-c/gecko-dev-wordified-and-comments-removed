var
BUGNUMBER
=
616294
;
var
summary
=
"
|
delete
x
|
inside
a
function
in
eval
code
where
that
eval
code
includes
"
+
"
|
var
x
|
at
top
level
actually
does
delete
the
binding
for
x
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
var
f
;
function
testOuterVar
(
)
{
return
eval
(
"
var
x
;
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterVar
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testOuterFunction
(
)
{
return
eval
(
"
function
x
(
)
{
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterFunction
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testOuterForVar
(
)
{
return
eval
(
"
for
(
var
x
;
false
;
)
;
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterForVar
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testOuterForInVar
(
)
{
return
eval
(
"
for
(
var
x
in
{
}
)
;
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterForInVar
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testOuterNestedVar
(
)
{
return
eval
(
"
for
(
var
q
=
0
;
q
<
5
;
q
+
+
)
{
var
x
;
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterNestedVar
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testOuterNestedConditionalVar
(
)
{
return
eval
(
"
for
(
var
q
=
0
;
q
<
5
;
q
+
+
)
{
if
(
false
)
{
var
x
;
}
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testOuterNestedConditionalVar
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testVarInWith
(
)
{
return
eval
(
"
with
(
{
}
)
{
var
x
;
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testVarInWith
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testForVarInWith
(
)
{
return
eval
(
"
with
(
{
}
)
{
for
(
var
x
=
0
;
x
<
5
;
x
+
+
)
;
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testForVarInWith
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testForInVarInWith
(
)
{
return
eval
(
"
with
(
{
}
)
{
for
(
var
x
in
{
}
)
;
}
(
function
(
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testForInVarInWith
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testUnknown
(
)
{
return
eval
(
"
nameToDelete
=
17
;
(
function
(
)
{
return
delete
nameToDelete
;
}
)
"
)
;
}
f
=
testUnknown
(
)
;
assert
.
sameValue
(
f
(
)
true
)
;
assert
.
sameValue
(
f
(
)
true
)
;
function
testArgumentShadow
(
)
{
return
eval
(
"
var
x
;
(
function
(
x
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testArgumentShadow
(
)
;
assert
.
sameValue
(
f
(
)
false
)
;
function
testArgument
(
)
{
return
eval
(
"
(
function
(
x
)
{
return
delete
x
;
}
)
"
)
;
}
f
=
testArgument
(
)
;
assert
.
sameValue
(
f
(
)
false
)
;
function
testFunctionLocal
(
)
{
return
eval
(
"
(
function
(
)
{
var
x
;
return
delete
x
;
}
)
"
)
;
}
f
=
testFunctionLocal
(
)
;
assert
.
sameValue
(
f
(
)
false
)
;
print
(
"
All
tests
passed
!
"
)
;
reportCompare
(
0
0
)
;
