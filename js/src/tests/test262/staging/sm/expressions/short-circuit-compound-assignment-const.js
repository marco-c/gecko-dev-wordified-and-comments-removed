function
notEvaluated
(
)
{
throw
new
Error
(
"
should
not
be
evaluated
"
)
;
}
{
const
a
=
false
;
a
&
&
=
notEvaluated
(
)
;
assert
.
sameValue
(
a
false
)
;
const
b
=
true
;
assertThrowsInstanceOf
(
(
)
=
>
{
b
&
&
=
1
;
}
TypeError
)
;
assert
.
sameValue
(
b
true
)
;
}
{
let
f
=
function
fn
(
)
{
fn
&
&
=
true
;
assert
.
sameValue
(
fn
f
)
;
}
;
f
(
)
;
let
g
=
function
fn
(
)
{
"
use
strict
"
;
assertThrowsInstanceOf
(
(
)
=
>
{
fn
&
&
=
1
;
}
TypeError
)
;
assert
.
sameValue
(
fn
g
)
;
}
;
g
(
)
;
}
{
const
a
=
true
;
a
|
|
=
notEvaluated
(
)
;
assert
.
sameValue
(
a
true
)
;
const
b
=
false
;
assertThrowsInstanceOf
(
(
)
=
>
{
b
|
|
=
0
;
}
TypeError
)
;
assert
.
sameValue
(
b
false
)
;
}
{
let
f
=
function
fn
(
)
{
fn
|
|
=
notEvaluated
(
)
;
assert
.
sameValue
(
fn
f
)
;
}
;
f
(
)
;
let
g
=
function
fn
(
)
{
"
use
strict
"
;
fn
|
|
=
notEvaluated
(
)
;
assert
.
sameValue
(
fn
g
)
;
}
;
g
(
)
;
}
{
const
a
=
true
;
a
?
?
=
notEvaluated
(
)
;
assert
.
sameValue
(
a
true
)
;
const
b
=
null
;
assertThrowsInstanceOf
(
(
)
=
>
{
b
?
?
=
0
;
}
TypeError
)
;
assert
.
sameValue
(
b
null
)
;
}
{
let
f
=
function
fn
(
)
{
fn
?
?
=
notEvaluated
(
)
;
assert
.
sameValue
(
fn
f
)
;
}
;
f
(
)
;
let
g
=
function
fn
(
)
{
"
use
strict
"
;
fn
?
?
=
notEvaluated
(
)
;
assert
.
sameValue
(
fn
g
)
;
}
;
g
(
)
;
}
reportCompare
(
0
0
)
;
