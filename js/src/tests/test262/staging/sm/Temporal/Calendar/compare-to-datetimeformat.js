const
hebrewMonths
=
{
Tishri
:
1
Heshvan
:
2
Kislev
:
3
Tevet
:
4
Shevat
:
5
"
Adar
I
"
:
6
Adar
:
6
"
Adar
II
"
:
7
Nisan
:
[
7
8
]
Iyar
:
[
8
9
]
Sivan
:
[
9
10
]
Tamuz
:
[
10
11
]
Av
:
[
11
12
]
Elul
:
[
12
13
]
}
;
function
toFields
(
dtf
date
calendar
timeZone
)
{
let
{
epochMilliseconds
}
=
date
.
withCalendar
(
"
iso8601
"
)
.
toZonedDateTime
(
timeZone
)
;
let
parts
=
dtf
.
formatToParts
(
epochMilliseconds
)
;
let
monthPart
=
parts
.
find
(
(
{
type
}
)
=
>
type
=
=
=
"
month
"
)
;
let
dayPart
=
parts
.
find
(
(
{
type
}
)
=
>
type
=
=
=
"
day
"
)
;
assert
.
sameValue
(
monthPart
!
=
=
undefined
true
)
;
assert
.
sameValue
(
dayPart
!
=
=
undefined
true
)
;
let
month
=
parseInt
(
monthPart
.
value
10
)
;
let
day
=
parseInt
(
dayPart
.
value
10
)
;
if
(
!
Number
.
isInteger
(
month
)
&
&
calendar
=
=
=
"
hebrew
"
)
{
assert
.
sameValue
(
Object
.
hasOwn
(
hebrewMonths
monthPart
.
value
)
true
month
=
{
monthPart
.
value
}
)
;
let
hebrewMonth
=
hebrewMonths
[
monthPart
.
value
]
;
if
(
Array
.
isArray
(
hebrewMonth
)
)
{
month
=
hebrewMonth
[
Number
(
date
.
inLeapYear
)
]
;
}
else
{
month
=
hebrewMonth
;
}
}
assert
.
sameValue
(
Number
.
isInteger
(
month
)
true
month
=
{
monthPart
.
value
}
)
;
assert
.
sameValue
(
Number
.
isInteger
(
day
)
true
day
=
{
dayPart
.
value
}
)
;
return
{
month
day
}
;
}
const
maximumDaysPerMonth
=
31
;
const
timeZone
=
"
UTC
"
;
for
(
let
calendar
of
Intl
.
supportedValuesOf
(
"
calendar
"
)
)
{
if
(
calendar
=
=
=
"
chinese
"
)
continue
;
if
(
calendar
=
=
=
"
dangi
"
)
continue
;
if
(
calendar
=
=
=
"
islamic
"
)
continue
;
if
(
calendar
=
=
=
"
islamic
-
rgsa
"
)
continue
;
if
(
calendar
=
=
=
"
hebrew
"
)
continue
;
if
(
calendar
=
=
=
"
islamic
-
umalqura
"
)
continue
;
if
(
calendar
=
=
=
"
persian
"
)
continue
;
let
dtf
=
new
Intl
.
DateTimeFormat
(
"
en
"
{
calendar
timeZone
month
:
"
numeric
"
day
:
"
numeric
"
}
)
;
for
(
let
y
=
2050
;
y
>
=
1950
;
-
-
y
)
{
let
isoYear
=
Temporal
.
PlainDate
.
from
(
{
year
:
y
month
:
1
day
:
1
}
)
;
let
{
year
monthsInYear
}
=
isoYear
.
withCalendar
(
calendar
)
;
for
(
let
month
=
1
;
month
<
=
monthsInYear
;
+
+
month
)
{
let
date
=
Temporal
.
PlainDate
.
from
(
{
calendar
year
month
day
:
maximumDaysPerMonth
}
)
;
let
fields
=
toFields
(
dtf
date
calendar
timeZone
)
;
assert
.
sameValue
(
fields
.
month
date
.
month
date
=
{
date
}
)
;
assert
.
sameValue
(
fields
.
day
date
.
day
date
=
{
date
}
)
;
}
}
}
reportCompare
(
0
0
)
;
