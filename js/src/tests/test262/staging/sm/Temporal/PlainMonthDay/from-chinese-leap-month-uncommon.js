const
monthCodes
=
[
"
M01L
"
"
M09L
"
"
M10L
"
"
M11L
"
"
M12L
"
]
;
function
assertSameISOFields
(
actual
expected
)
{
let
actualFields
=
actual
.
getISOFields
(
)
;
let
expectedFields
=
expected
.
getISOFields
(
)
;
assert
.
sameValue
(
typeof
actualFields
.
isoYear
"
number
"
)
;
assert
.
sameValue
(
typeof
actualFields
.
isoMonth
"
number
"
)
;
assert
.
sameValue
(
typeof
actualFields
.
isoDay
"
number
"
)
;
assert
.
sameValue
(
actualFields
.
isoMonth
>
0
true
)
;
assert
.
sameValue
(
actualFields
.
isoDay
>
0
true
)
;
assert
.
sameValue
(
actualFields
.
isoYear
expectedFields
.
isoYear
)
;
assert
.
sameValue
(
actualFields
.
isoMonth
expectedFields
.
isoMonth
)
;
assert
.
sameValue
(
actualFields
.
isoDay
expectedFields
.
isoDay
)
;
}
const
calendar
=
"
chinese
"
;
const
day
=
30
;
for
(
let
monthCode
of
monthCodes
)
{
let
pmd
=
Temporal
.
PlainMonthDay
.
from
(
{
calendar
monthCode
day
}
)
;
assert
.
sameValue
(
pmd
.
monthCode
monthCode
)
;
assert
.
sameValue
(
pmd
.
day
day
)
;
let
constrain
=
Temporal
.
PlainMonthDay
.
from
(
{
calendar
monthCode
day
:
day
+
1
}
{
overflow
:
"
constrain
"
}
)
;
assert
.
sameValue
(
constrain
.
monthCode
monthCode
)
;
assert
.
sameValue
(
constrain
.
day
day
)
;
assertSameISOFields
(
constrain
pmd
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
Temporal
.
PlainMonthDay
.
from
(
{
calendar
monthCode
day
:
day
+
1
}
{
overflow
:
"
reject
"
}
)
;
}
RangeError
)
;
}
reportCompare
(
0
0
)
;
