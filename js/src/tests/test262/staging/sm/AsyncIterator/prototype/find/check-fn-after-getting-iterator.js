const
log
=
[
]
;
const
handlerProxy
=
new
Proxy
(
{
}
{
get
:
(
target
key
receiver
)
=
>
(
.
.
.
args
)
=
>
{
log
.
push
(
{
key
}
:
{
args
[
1
]
?
.
toString
(
)
}
)
;
return
Reflect
[
key
]
(
.
.
.
args
)
;
}
}
)
;
class
TestIterator
extends
AsyncIterator
{
next
(
)
{
return
Promise
.
resolve
(
{
done
:
true
}
)
;
}
}
const
iter
=
new
Proxy
(
new
TestIterator
(
)
handlerProxy
)
;
iter
.
find
(
1
)
.
then
(
(
)
=
>
assert
.
sameValue
(
true
false
'
expected
error
'
)
err
=
>
{
assert
.
sameValue
(
err
instanceof
TypeError
true
)
;
assert
.
sameValue
(
log
.
join
(
'
\
n
'
)
get
:
find
get
:
next
)
;
}
)
;
reportCompare
(
0
0
)
;
