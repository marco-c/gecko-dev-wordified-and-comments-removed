class
TestError
extends
Error
{
}
class
TestIterator
extends
AsyncIterator
{
async
next
(
)
{
return
{
done
:
false
value
:
1
}
;
}
closeCount
=
0
;
async
return
(
value
)
{
this
.
closeCount
+
+
;
return
{
done
:
true
value
}
;
}
}
async
function
*
gen
(
x
)
{
yield
x
;
}
const
methods
=
[
iter
=
>
iter
.
map
(
x
=
>
x
)
iter
=
>
iter
.
filter
(
x
=
>
true
)
iter
=
>
iter
.
take
(
Infinity
)
iter
=
>
iter
.
drop
(
0
)
iter
=
>
iter
.
asIndexedPairs
(
)
iter
=
>
iter
.
flatMap
(
gen
)
]
;
(
async
(
)
=
>
{
for
(
const
method
of
methods
)
{
const
iter
=
new
TestIterator
(
)
;
const
iterHelper
=
method
(
iter
)
;
await
iterHelper
.
next
(
)
assert
.
sameValue
(
iter
.
closeCount
0
)
;
try
{
await
iterHelper
.
throw
(
new
TestError
(
)
)
;
assert
.
sameValue
(
true
false
'
Expected
reject
'
)
;
}
catch
(
exc
)
{
assert
.
sameValue
(
exc
instanceof
TestError
true
)
;
}
assert
.
sameValue
(
iter
.
closeCount
1
)
;
try
{
await
iterHelper
.
throw
(
new
TestError
(
)
)
;
assert
.
sameValue
(
true
false
'
Expected
reject
'
)
;
}
catch
(
exc
)
{
assert
.
sameValue
(
exc
instanceof
TestError
true
)
;
}
assert
.
sameValue
(
iter
.
closeCount
1
)
;
}
for
(
const
method
of
methods
)
{
const
iter
=
new
TestIterator
(
)
;
const
iterHelper
=
method
(
iter
)
;
assert
.
sameValue
(
iter
.
closeCount
0
)
;
try
{
await
iterHelper
.
throw
(
new
TestError
(
)
)
;
assert
.
sameValue
(
true
false
'
Expected
reject
'
)
;
}
catch
(
exc
)
{
assert
.
sameValue
(
exc
instanceof
TestError
true
)
;
}
assert
.
sameValue
(
iter
.
closeCount
1
)
;
try
{
await
iterHelper
.
throw
(
new
TestError
(
)
)
;
assert
.
sameValue
(
true
false
'
Expected
reject
'
)
;
}
catch
(
exc
)
{
assert
.
sameValue
(
exc
instanceof
TestError
true
)
;
}
assert
.
sameValue
(
iter
.
closeCount
1
)
;
}
}
)
(
)
;
reportCompare
(
0
0
)
;
