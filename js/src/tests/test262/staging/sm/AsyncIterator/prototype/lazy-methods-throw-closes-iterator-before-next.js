class
TestError
extends
Error
{
}
class
TestIterator
extends
AsyncIterator
{
async
next
(
)
{
return
{
done
:
false
value
:
1
}
;
}
closed
=
false
;
async
return
(
value
)
{
this
.
closed
=
true
;
return
{
done
:
true
value
}
;
}
}
async
function
*
gen
(
x
)
{
yield
x
;
}
const
methods
=
[
iter
=
>
iter
.
map
(
x
=
>
x
)
iter
=
>
iter
.
filter
(
x
=
>
x
)
iter
=
>
iter
.
take
(
1
)
iter
=
>
iter
.
drop
(
0
)
iter
=
>
iter
.
asIndexedPairs
(
)
iter
=
>
iter
.
flatMap
(
gen
)
]
;
for
(
const
method
of
methods
)
{
const
iter
=
new
TestIterator
(
)
;
const
iterHelper
=
method
(
iter
)
;
assert
.
sameValue
(
iter
.
closed
false
)
;
iterHelper
.
throw
(
new
TestError
(
)
)
.
then
(
_
=
>
assert
.
sameValue
(
true
false
'
Expected
reject
.
'
)
err
=
>
{
assert
.
sameValue
(
err
instanceof
TestError
true
)
;
assert
.
sameValue
(
iter
.
closed
true
)
;
iterHelper
.
next
(
)
.
then
(
(
{
done
value
}
)
=
>
{
assert
.
sameValue
(
done
true
)
;
assert
.
sameValue
(
value
undefined
)
;
}
)
;
}
)
;
}
reportCompare
(
0
0
)
;
