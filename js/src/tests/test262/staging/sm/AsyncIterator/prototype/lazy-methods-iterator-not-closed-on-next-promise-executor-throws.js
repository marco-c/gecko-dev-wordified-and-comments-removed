class
TestError
extends
Error
{
}
class
TestIterator
extends
AsyncIterator
{
next
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
throw
new
TestError
(
)
;
}
)
;
}
closed
=
false
;
async
return
(
value
)
{
this
.
closed
=
true
;
return
{
done
:
true
value
}
;
}
}
const
methods
=
[
[
"
map
"
x
=
>
x
]
[
"
filter
"
x
=
>
true
]
[
"
take
"
Infinity
]
[
"
drop
"
0
]
[
"
asIndexedPairs
"
undefined
]
[
"
flatMap
"
async
function
*
(
x
)
{
yield
x
;
}
]
]
;
(
async
(
)
=
>
{
for
(
const
[
method
arg
]
of
methods
)
{
const
iterator
=
new
TestIterator
(
)
;
assert
.
sameValue
(
iterator
.
closed
false
)
;
try
{
await
iterator
[
method
]
(
arg
)
.
next
(
)
;
assert
.
sameValue
(
true
false
'
Expected
exception
'
)
;
}
catch
(
err
)
{
assert
.
sameValue
(
err
instanceof
TestError
true
)
;
}
assert
.
sameValue
(
iterator
.
closed
false
)
;
}
}
)
(
)
;
reportCompare
(
0
0
)
;
