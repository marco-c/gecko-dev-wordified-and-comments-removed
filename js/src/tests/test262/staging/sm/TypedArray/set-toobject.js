let
ta
=
new
Int32Array
(
4
)
;
for
(
let
nullOrUndefined
of
[
null
undefined
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
ta
.
set
(
nullOrUndefined
)
TypeError
)
;
class
ExpectedError
extends
Error
{
}
assertThrowsInstanceOf
(
(
)
=
>
ta
.
set
(
nullOrUndefined
{
valueOf
(
)
{
throw
new
ExpectedError
(
)
;
}
}
)
ExpectedError
)
;
}
assert
.
compareArray
(
ta
[
0
0
0
0
]
)
;
ta
.
set
(
"
"
)
;
assert
.
compareArray
(
ta
[
0
0
0
0
]
)
;
ta
.
set
(
"
123
"
)
;
assert
.
compareArray
(
ta
[
1
2
3
0
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
ta
.
set
(
"
456789
"
)
RangeError
)
;
assert
.
compareArray
(
ta
[
1
2
3
0
]
)
;
for
(
let
value
of
[
true
false
0
NaN
123
Infinity
Symbol
(
)
]
)
{
ta
.
set
(
value
)
;
assert
.
compareArray
(
ta
[
1
2
3
0
]
)
;
}
Number
.
prototype
.
length
=
4
;
Number
.
prototype
[
3
]
=
-
1
;
try
{
ta
.
set
(
456
)
;
assert
.
compareArray
(
ta
[
0
0
0
-
1
]
)
;
}
finally
{
delete
Number
.
prototype
.
length
;
delete
Number
.
prototype
[
3
]
;
}
reportCompare
(
0
0
)
;
