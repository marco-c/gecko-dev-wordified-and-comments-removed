const
otherGlobal
=
createNewGlobal
(
)
;
function
*
createBuffers
(
lengths
=
[
0
8
]
)
{
for
(
let
length
of
lengths
)
{
let
buffer
=
new
ArrayBuffer
(
length
)
;
yield
{
buffer
detach
:
(
)
=
>
262
.
detachArrayBuffer
(
buffer
)
}
;
}
for
(
let
length
of
lengths
)
{
let
buffer
=
new
otherGlobal
.
ArrayBuffer
(
length
)
;
yield
{
buffer
detach
:
(
)
=
>
otherGlobal
.
262
.
detachArrayBuffer
(
buffer
)
}
;
}
}
const
poisonedValue
=
new
Proxy
(
{
}
new
Proxy
(
{
}
{
get
(
)
{
throw
new
Error
(
"
Poisoned
Value
"
)
;
}
}
)
)
;
class
ExpectedError
extends
Error
{
}
function
ConstructorWithThrowingPrototype
(
detach
)
{
return
Object
.
defineProperty
(
function
(
)
{
}
.
bind
(
null
)
"
prototype
"
{
get
(
)
{
if
(
detach
)
detach
(
)
;
throw
new
ExpectedError
(
)
;
}
}
)
;
}
function
ValueThrowing
(
detach
)
{
return
{
valueOf
(
)
{
if
(
detach
)
detach
(
)
;
throw
new
ExpectedError
(
)
;
}
}
;
}
function
ValueReturning
(
value
detach
)
{
return
{
valueOf
(
)
{
if
(
detach
)
detach
(
)
;
return
value
;
}
}
;
}
for
(
let
{
buffer
}
of
createBuffers
(
)
)
{
let
constructor
=
ConstructorWithThrowingPrototype
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
construct
(
Int32Array
[
buffer
poisonedValue
0
]
constructor
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
constructor
=
ConstructorWithThrowingPrototype
(
)
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
construct
(
Int32Array
[
buffer
0
0
]
constructor
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
constructor
=
ConstructorWithThrowingPrototype
(
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
construct
(
Int32Array
[
buffer
0
0
]
constructor
)
ExpectedError
)
;
}
for
(
let
{
buffer
}
of
createBuffers
(
)
)
{
let
constructor
=
ConstructorWithThrowingPrototype
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
construct
(
Int32Array
[
buffer
0
poisonedValue
]
constructor
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueThrowing
(
)
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
0
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueThrowing
(
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
0
)
ExpectedError
)
;
}
for
(
let
{
buffer
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueThrowing
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
poisonedValue
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
1
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
0
)
RangeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueReturning
(
1
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
0
)
RangeError
)
;
}
for
(
let
{
buffer
}
of
createBuffers
(
)
)
{
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
1
poisonedValue
)
RangeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
0
;
let
length
=
ValueThrowing
(
)
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueReturning
(
0
detach
)
;
let
length
=
ValueThrowing
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
0
;
let
length
=
ValueThrowing
(
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
ExpectedError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
[
1
9
]
)
)
{
let
byteOffset
=
0
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
[
1
9
]
)
)
{
let
byteOffset
=
ValueReturning
(
0
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
64
;
detach
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueReturning
(
64
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
64
;
let
length
=
ValueReturning
(
0
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
0
;
let
length
=
ValueReturning
(
64
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
ValueReturning
(
0
detach
)
;
let
length
=
0
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
TypeError
)
;
}
for
(
let
{
buffer
detach
}
of
createBuffers
(
)
)
{
let
byteOffset
=
0
;
let
length
=
ValueReturning
(
0
detach
)
;
assertThrowsInstanceOf
(
(
)
=
>
new
Int32Array
(
buffer
byteOffset
length
)
TypeError
)
;
}
reportCompare
(
0
0
)
;
