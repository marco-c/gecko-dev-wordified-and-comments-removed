for
(
var
constructor
of
anyTypedArrayConstructors
)
{
assert
.
sameValue
(
constructor
.
prototype
.
at
.
length
1
)
;
assert
.
sameValue
(
new
constructor
(
[
0
]
)
.
at
(
0
)
0
)
;
assert
.
sameValue
(
new
constructor
(
[
0
]
)
.
at
(
-
1
)
0
)
;
assert
.
sameValue
(
new
constructor
(
[
]
)
.
at
(
0
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
]
)
.
at
(
-
1
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
]
)
.
at
(
1
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
0
)
0
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
1
)
1
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
-
2
)
0
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
-
1
)
1
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
2
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
-
3
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
-
4
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
Infinity
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
-
Infinity
)
undefined
)
;
assert
.
sameValue
(
new
constructor
(
[
0
1
]
)
.
at
(
NaN
)
0
)
;
if
(
typeof
createNewGlobal
=
=
=
"
function
"
)
{
var
at
=
createNewGlobal
(
)
[
constructor
.
name
]
.
prototype
.
at
;
assert
.
sameValue
(
at
.
call
(
new
constructor
(
[
1
2
3
]
)
2
)
3
)
;
}
var
invalidReceivers
=
[
undefined
null
1
false
"
"
Symbol
(
)
[
]
{
}
/
.
/
new
Proxy
(
new
constructor
(
)
{
}
)
]
;
invalidReceivers
.
forEach
(
invalidReceiver
=
>
{
assertThrowsInstanceOf
(
(
)
=
>
{
constructor
.
prototype
.
at
.
call
(
invalidReceiver
)
;
}
TypeError
"
Assert
that
'
at
'
fails
if
this
value
is
not
a
TypedArray
"
)
;
}
)
;
assert
.
sameValue
(
Object
.
defineProperty
(
new
constructor
(
[
1
2
3
]
)
"
length
"
{
get
(
)
{
throw
new
Error
(
"
length
accessor
called
"
)
;
}
}
)
.
at
(
1
)
2
)
;
}
reportCompare
(
0
0
)
;
