'
use
strict
'
;
"
use
strict
"
;
assert
.
sameValue
(
Object
.
isSealed
(
new
Int32Array
(
2
)
)
false
)
;
assert
.
sameValue
(
Object
.
isSealed
(
new
Int32Array
(
0
)
)
false
)
;
var
array
=
new
Int32Array
(
0
)
;
Object
.
preventExtensions
(
array
)
;
assert
.
sameValue
(
Object
.
isSealed
(
array
)
true
)
;
array
=
new
Int32Array
(
1
)
;
array
.
b
=
"
test
"
;
Object
.
preventExtensions
(
array
)
;
assert
.
sameValue
(
Object
.
isSealed
(
array
)
false
)
;
Object
.
defineProperty
(
array
"
b
"
{
configurable
:
false
}
)
;
assert
.
sameValue
(
Object
.
isSealed
(
array
)
false
)
;
array
=
new
Int32Array
(
2
)
;
array
.
b
=
"
test
"
;
assertThrowsInstanceOf
(
(
)
=
>
Object
.
seal
(
array
)
TypeError
)
;
assert
.
sameValue
(
Object
.
isSealed
(
array
)
false
)
;
assertThrowsInstanceOf
(
(
)
=
>
array
.
c
=
15
TypeError
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
new
Int32Array
(
2
)
)
false
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
new
Int32Array
(
0
)
)
false
)
;
var
array
=
new
Int32Array
(
0
)
;
Object
.
preventExtensions
(
array
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
array
)
true
)
;
array
=
new
Int32Array
(
0
)
;
array
.
b
=
"
test
"
;
assert
.
sameValue
(
Object
.
isFrozen
(
array
)
false
)
;
Object
.
preventExtensions
(
array
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
array
)
false
)
;
Object
.
defineProperty
(
array
"
b
"
{
configurable
:
false
writable
:
false
}
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
array
)
true
)
;
array
=
new
Int32Array
(
1
)
;
assertThrowsInstanceOf
(
(
)
=
>
Object
.
freeze
(
array
)
TypeError
)
;
assert
.
sameValue
(
Object
.
isExtensible
(
array
)
false
)
;
assert
.
sameValue
(
Object
.
isFrozen
(
array
)
false
)
;
reportCompare
(
0
0
)
;
