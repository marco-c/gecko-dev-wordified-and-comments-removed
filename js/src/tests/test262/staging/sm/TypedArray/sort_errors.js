if
(
typeof
262
.
detachArrayBuffer
=
=
=
"
function
"
)
{
assertThrowsInstanceOf
(
(
)
=
>
{
let
buffer
=
new
ArrayBuffer
(
32
)
;
let
array
=
new
Int32Array
(
buffer
)
;
262
.
detachArrayBuffer
(
buffer
)
;
array
.
sort
(
)
;
}
TypeError
)
;
}
if
(
typeof
262
.
detachArrayBuffer
=
=
=
"
function
"
)
{
let
detached
=
false
;
let
ta
=
new
Int32Array
(
3
)
;
ta
.
sort
(
function
(
a
b
)
{
if
(
!
detached
)
{
detached
=
true
;
262
.
detachArrayBuffer
(
ta
.
buffer
)
;
}
return
a
-
b
;
}
)
;
assert
.
sameValue
(
detached
true
)
;
}
if
(
typeof
createNewGlobal
=
=
=
"
function
"
)
{
let
ta
=
new
Int32Array
(
3
)
;
let
otherGlobal
=
createNewGlobal
(
)
;
otherGlobal
.
Int32Array
.
prototype
.
sort
.
call
(
ta
function
(
a
b
)
{
return
a
-
b
;
}
)
;
}
if
(
typeof
createNewGlobal
=
=
=
"
function
"
&
&
typeof
262
.
detachArrayBuffer
=
=
=
"
function
"
)
{
let
detached
=
false
;
let
ta
=
new
Int32Array
(
3
)
;
let
otherGlobal
=
createNewGlobal
(
)
;
otherGlobal
.
Int32Array
.
prototype
.
sort
.
call
(
ta
function
(
a
b
)
{
if
(
!
detached
)
{
detached
=
true
;
262
.
detachArrayBuffer
(
ta
.
buffer
)
;
}
return
a
-
b
;
}
)
;
assert
.
sameValue
(
detached
true
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
{
let
array
=
[
4
3
2
1
]
;
Int32Array
.
prototype
.
sort
.
call
(
array
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
Int32Array
.
prototype
.
sort
.
call
(
{
a
:
1
b
:
2
}
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
Int32Array
.
prototype
.
sort
.
call
(
Int32Array
.
prototype
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
let
buf
=
new
ArrayBuffer
(
32
)
;
Int32Array
.
prototype
.
sort
.
call
(
buf
)
;
}
TypeError
)
;
function
badComparator
(
x
y
)
{
if
(
x
=
=
99
&
&
y
=
=
99
)
throw
new
TypeError
;
return
x
-
y
;
}
assertThrowsInstanceOf
(
(
)
=
>
{
let
array
=
new
Uint8Array
(
[
99
99
99
99
]
)
;
array
.
sort
(
badComparator
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
let
array
=
new
Uint8Array
(
[
1
99
2
99
]
)
;
array
.
sort
(
badComparator
)
;
}
TypeError
)
;
reportCompare
(
0
0
)
;
