for
(
var
constructor
of
anyTypedArrayConstructors
)
{
assert
.
sameValue
(
anyTypedArrayConstructors
[
0
]
.
from
=
=
=
constructor
.
from
true
)
;
var
src
=
new
constructor
(
[
1
2
3
]
)
copy
=
constructor
.
from
(
src
)
;
assert
.
sameValue
(
copy
=
=
=
src
false
)
;
assert
.
sameValue
(
copy
instanceof
constructor
true
)
;
assert
.
deepEqual
(
copy
src
)
;
var
a
=
new
constructor
(
[
0
1
]
)
;
a
.
name
=
"
lisa
"
;
assert
.
deepEqual
(
constructor
.
from
(
a
)
new
constructor
(
[
0
1
]
)
)
;
src
=
{
0
:
0
1
:
1
length
:
2
}
;
copy
=
constructor
.
from
(
src
)
;
assert
.
sameValue
(
copy
instanceof
constructor
true
)
;
assert
.
deepEqual
(
copy
new
constructor
(
[
0
1
]
)
)
;
src
=
{
0
:
"
0
"
1
:
"
1
"
2
:
"
two
"
9
:
"
nine
"
name
:
"
lisa
"
length
:
2
}
;
assert
.
deepEqual
(
constructor
.
from
(
src
)
new
constructor
(
[
0
1
]
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
{
}
)
new
constructor
(
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
1
)
new
constructor
(
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
"
123
"
)
new
constructor
(
[
1
2
3
]
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
true
)
new
constructor
(
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
Symbol
(
)
)
new
constructor
(
)
)
;
src
=
{
length
:
2
1
:
"
1
"
0
:
"
0
"
}
;
assert
.
deepEqual
(
constructor
.
from
(
src
)
new
constructor
(
[
0
1
]
)
)
;
}
reportCompare
(
0
0
)
;
