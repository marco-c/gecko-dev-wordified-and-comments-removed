for
(
var
constructor
of
anyTypedArrayConstructors
)
{
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
undefined
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
null
)
TypeError
)
;
function
ObjectWithThrowingLengthGetterSetter
(
.
.
.
rest
)
{
var
ta
=
new
constructor
(
.
.
.
rest
)
;
Object
.
defineProperty
(
ta
"
length
"
{
configurable
:
true
get
(
)
{
throw
new
RangeError
(
"
getter
!
"
)
;
}
set
(
)
{
throw
new
RangeError
(
"
setter
!
"
)
;
}
}
)
;
return
ta
;
}
ObjectWithThrowingLengthGetterSetter
.
from
=
constructor
.
from
;
assert
.
sameValue
(
ObjectWithThrowingLengthGetterSetter
.
from
(
[
123
]
)
[
0
]
123
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
[
3
4
5
]
{
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
[
3
4
5
]
"
also
not
a
function
"
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
[
3
4
5
]
null
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
[
]
JSON
)
TypeError
)
;
var
log
=
"
"
;
var
obj
;
function
C
(
.
.
.
rest
)
{
log
+
=
"
C
"
;
obj
=
new
constructor
(
.
.
.
rest
)
;
return
obj
;
}
var
p
=
new
Proxy
(
{
}
{
has
:
function
(
)
{
log
+
=
"
1
"
;
}
get
:
function
(
)
{
log
+
=
"
2
"
;
}
getOwnPropertyDescriptor
:
function
(
)
{
log
+
=
"
3
"
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
.
call
(
C
p
{
}
)
TypeError
)
;
assert
.
sameValue
(
log
"
"
)
;
var
arrayish
=
{
get
length
(
)
{
log
+
=
"
l
"
;
return
1
;
}
get
0
(
)
{
log
+
=
"
0
"
;
return
"
q
"
;
}
}
;
log
=
"
"
;
var
exc
=
{
surprise
:
"
ponies
"
}
;
assertThrowsValue
(
(
)
=
>
constructor
.
from
.
call
(
C
arrayish
(
)
=
>
{
throw
exc
;
}
)
exc
)
;
assert
.
sameValue
(
log
"
lC0
"
)
;
assert
.
sameValue
(
obj
instanceof
constructor
true
)
;
for
(
var
primitive
of
[
"
foo
"
17
Symbol
(
)
true
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
{
[
Symbol
.
iterator
]
:
primitive
}
)
TypeError
)
;
}
assert
.
deepEqual
(
constructor
.
from
(
{
[
Symbol
.
iterator
]
:
null
}
)
new
constructor
(
)
)
;
assert
.
deepEqual
(
constructor
.
from
(
{
[
Symbol
.
iterator
]
:
undefined
}
)
new
constructor
(
)
)
;
for
(
var
primitive
of
[
undefined
null
"
foo
"
17
Symbol
(
)
true
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
constructor
.
from
(
{
[
Symbol
.
iterator
]
(
)
{
return
{
next
(
)
{
return
primitive
;
}
}
;
}
}
)
TypeError
)
;
}
}
reportCompare
(
0
0
)
;
