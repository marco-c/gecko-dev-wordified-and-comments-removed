assert
.
sameValue
(
Math
.
f16round
(
)
NaN
)
;
assert
.
sameValue
(
Math
.
f16round
(
NaN
)
NaN
)
;
assert
.
sameValue
(
Math
.
f16round
(
-
Infinity
)
-
Infinity
)
;
assert
.
sameValue
(
Math
.
f16round
(
Infinity
)
Infinity
)
;
assert
.
sameValue
(
Math
.
f16round
(
-
0
)
-
0
)
;
assert
.
sameValue
(
Math
.
f16round
(
+
0
)
+
0
)
;
function
toFloat16
(
num
)
{
const
INVERSE_OF_EPSILON
=
1
/
Number
.
EPSILON
;
function
roundTiesToEven
(
num
)
{
return
(
num
+
INVERSE_OF_EPSILON
)
-
INVERSE_OF_EPSILON
;
}
const
FLOAT16_MIN_VALUE
=
6
.
103515625e
-
05
;
const
FLOAT16_MAX_VALUE
=
65504
;
const
FLOAT16_EPSILON
=
0
.
0009765625
;
const
FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE
=
FLOAT16_EPSILON
*
FLOAT16_MIN_VALUE
;
const
FLOAT16_EPSILON_DEVIDED_BY_EPSILON
=
FLOAT16_EPSILON
*
INVERSE_OF_EPSILON
;
function
roundToFloat16
(
num
)
{
const
number
=
+
num
;
if
(
!
isFinite
(
number
)
|
|
number
=
=
=
0
)
{
return
number
;
}
const
sign
=
number
>
0
?
1
:
-
1
;
const
absolute
=
Math
.
abs
(
number
)
;
if
(
absolute
<
FLOAT16_MIN_VALUE
)
{
return
sign
*
roundTiesToEven
(
absolute
/
FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE
)
*
FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE
;
}
const
temp
=
(
1
+
FLOAT16_EPSILON_DEVIDED_BY_EPSILON
)
*
absolute
;
const
result
=
temp
-
(
temp
-
absolute
)
;
if
(
result
>
FLOAT16_MAX_VALUE
|
|
isNaN
(
result
)
)
{
return
sign
*
Infinity
;
}
return
sign
*
result
;
}
return
roundToFloat16
(
num
)
;
}
;
for
(
var
i
=
0
;
i
<
64
;
+
+
i
)
{
var
p
=
Math
.
pow
(
2
i
)
+
1
;
assert
.
sameValue
(
Math
.
f16round
(
p
)
toFloat16
(
p
)
)
;
assert
.
sameValue
(
Math
.
f16round
(
-
p
)
toFloat16
(
-
p
)
)
;
}
function
maxValue
(
exponentWidth
significandWidth
)
{
var
n
=
0
;
var
maxExp
=
Math
.
pow
(
2
exponentWidth
-
1
)
-
1
;
for
(
var
i
=
significandWidth
;
i
>
=
0
;
i
-
-
)
n
+
=
Math
.
pow
(
2
maxExp
-
i
)
;
return
n
;
}
var
DBL_MAX
=
maxValue
(
11
52
)
;
assert
.
sameValue
(
DBL_MAX
Number
.
MAX_VALUE
)
;
assert
.
sameValue
(
Math
.
f16round
(
DBL_MAX
)
Infinity
)
;
var
FLT16_MAX
=
maxValue
(
5
10
)
;
assert
.
sameValue
(
Math
.
f16round
(
FLT16_MAX
)
FLT16_MAX
)
;
assert
.
sameValue
(
Math
.
f16round
(
65519
)
FLT16_MAX
)
;
assert
.
sameValue
(
Math
.
f16round
(
65520
)
Infinity
)
;
function
minValue
(
exponentWidth
significandWidth
)
{
return
Math
.
pow
(
2
-
(
Math
.
pow
(
2
exponentWidth
-
1
)
-
2
)
-
significandWidth
)
;
}
var
DBL_MIN
=
Math
.
pow
(
2
-
1074
)
;
assert
.
sameValue
(
DBL_MIN
Number
.
MIN_VALUE
)
;
assert
.
sameValue
(
Math
.
f16round
(
DBL_MIN
)
0
)
;
var
FLT16_MIN
=
minValue
(
5
10
)
;
assert
.
sameValue
(
Math
.
f16round
(
FLT16_MIN
)
FLT16_MIN
)
;
assert
.
sameValue
(
Math
.
f16round
(
FLT16_MIN
/
2
)
0
)
;
assert
.
sameValue
(
Math
.
f16round
(
2
.
980232238769531911744490042422139897126953655970282852649688720703125e
-
8
)
FLT16_MIN
)
;
assert
.
sameValue
(
Math
.
f16round
(
-
FLT16_MIN
)
-
FLT16_MIN
)
;
assert
.
sameValue
(
Math
.
f16round
(
-
FLT16_MIN
/
2
)
-
0
)
;
assert
.
sameValue
(
Math
.
f16round
(
2
.
980232238769531911744490042422139897126953655970282852649688720703125e
-
8
)
FLT16_MIN
)
;
assert
.
sameValue
(
Math
.
f16round
(
0
.
499994
)
0
.
5
)
;
assert
.
sameValue
(
Math
.
f16round
(
1
.
337
)
1
.
3369140625
)
;
assert
.
sameValue
(
Math
.
f16round
(
1
.
00048828125000022204
)
1
.
0009765625
)
;
reportCompare
(
0
0
)
;
