assertThrowsInstanceOf
(
(
)
=
>
eval
(
class
a
extends
Math
.
sin
{
constructor
(
)
{
}
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
(
class
a
extends
Math
.
sin
{
constructor
(
)
{
}
}
)
)
TypeError
)
;
class
basic
{
constructor
(
)
{
}
}
class
nullExtends
extends
null
{
constructor
(
)
{
}
}
var
nullExtendsExpr
=
class
extends
null
{
constructor
(
)
{
}
}
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
basic
)
Function
.
prototype
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
basic
.
prototype
)
Object
.
prototype
)
;
for
(
let
extension
of
[
nullExtends
nullExtendsExpr
]
)
{
assert
.
sameValue
(
Object
.
getPrototypeOf
(
extension
)
Function
.
prototype
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
extension
.
prototype
)
null
)
;
}
var
baseMethodCalled
;
var
staticMethodCalled
;
var
overrideCalled
;
class
base
{
constructor
(
)
{
}
;
method
(
)
{
baseMethodCalled
=
true
;
}
static
staticMethod
(
)
{
staticMethodCalled
=
true
;
}
override
(
)
{
overrideCalled
=
"
base
"
}
}
class
derived
extends
base
{
constructor
(
)
{
super
(
)
;
}
;
override
(
)
{
overrideCalled
=
"
derived
"
;
}
}
var
derivedExpr
=
class
extends
base
{
constructor
(
)
{
super
(
)
;
}
;
override
(
)
{
overrideCalled
=
"
derived
"
;
}
}
;
for
(
let
extension
of
[
derived
derivedExpr
]
)
{
baseMethodCalled
=
false
;
staticMethodCalled
=
false
;
overrideCalled
=
"
"
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
extension
)
base
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
extension
.
prototype
)
base
.
prototype
)
;
(
new
extension
(
)
)
.
method
(
)
;
assert
.
sameValue
(
baseMethodCalled
true
)
;
(
new
extension
(
)
)
.
override
(
)
;
assert
.
sameValue
(
overrideCalled
"
derived
"
)
;
extension
.
staticMethod
(
)
;
assert
.
sameValue
(
staticMethodCalled
true
)
;
}
function
nope
(
)
{
class
Foo
extends
"
Bar
"
{
constructor
(
)
{
}
}
}
function
nopeExpr
(
)
{
(
class
extends
"
Bar
"
{
constructor
(
)
{
}
}
)
;
}
assertThrowsInstanceOf
(
nope
TypeError
)
;
assertThrowsInstanceOf
(
nopeExpr
TypeError
)
;
nope
.
prototype
=
"
not
really
no
"
;
function
stillNo
(
)
{
class
Foo
extends
nope
{
constructor
(
)
{
}
}
}
function
stillNoExpr
(
)
{
(
class
extends
nope
{
constructor
(
)
{
}
}
)
;
}
assertThrowsInstanceOf
(
stillNo
TypeError
)
;
assertThrowsInstanceOf
(
stillNoExpr
TypeError
)
;
reportCompare
(
0
0
)
;
