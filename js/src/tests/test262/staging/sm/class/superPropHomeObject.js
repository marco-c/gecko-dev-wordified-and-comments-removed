class
base
{
constructor
(
)
{
}
test
(
expectedThis
)
{
assert
.
sameValue
(
this
expectedThis
)
;
}
}
class
derived
extends
base
{
constructor
(
)
{
super
(
)
;
}
test
(
expected
)
{
super
.
test
(
expected
)
;
}
testArrow
(
)
{
return
(
(
)
=
>
super
.
test
(
this
)
)
;
}
[
"
testCPN
"
]
(
expected
)
{
super
.
test
(
expected
)
;
}
}
let
derivedInstance
=
new
derived
(
)
;
derivedInstance
.
test
(
derivedInstance
)
;
derivedInstance
.
testCPN
(
derivedInstance
)
;
let
obj
=
{
test
:
derivedInstance
.
test
}
;
obj
.
test
(
obj
)
;
let
testSolo
=
derivedInstance
.
test
;
testSolo
(
undefined
)
;
let
anotherObject
=
{
}
;
derivedInstance
.
test
.
call
(
anotherObject
anotherObject
)
;
let
strThis
=
"
this
is
not
an
object
!
"
;
derivedInstance
.
test
.
call
(
strThis
strThis
)
;
let
arrowTest
=
derivedInstance
.
testArrow
(
)
;
arrowTest
(
)
;
class
base1
{
constructor
(
)
{
}
test
(
)
{
return
"
llama
"
;
}
}
class
base2
{
constructor
(
)
{
}
test
(
)
{
return
"
alpaca
"
;
}
}
let
animals
=
[
]
;
for
(
let
exprBase
of
[
base1
base2
]
)
new
class
extends
exprBase
{
constructor
(
)
{
super
(
)
;
}
test
(
)
{
animals
.
push
(
super
[
"
test
"
]
(
)
)
;
}
}
(
)
.
test
(
)
;
assert
.
deepEqual
(
animals
[
"
llama
"
"
alpaca
"
]
)
;
reportCompare
(
0
0
)
;
