class
base
{
constructor
(
)
{
}
testChain
(
)
{
this
.
baseCalled
=
true
;
}
}
class
middle
extends
base
{
constructor
(
)
{
super
(
)
;
}
testChain
(
)
{
this
.
middleCalled
=
true
;
super
.
testChain
(
)
;
}
}
class
derived
extends
middle
{
constructor
(
)
{
super
(
)
;
}
testChain
(
)
{
super
.
testChain
(
)
;
assert
.
sameValue
(
this
.
middleCalled
true
)
;
assert
.
sameValue
(
this
.
baseCalled
true
)
;
}
}
new
derived
(
)
.
testChain
(
)
;
function
bootlegMiddle
(
)
{
}
bootlegMiddle
.
prototype
=
middle
.
prototype
;
new
class
extends
bootlegMiddle
{
constructor
(
)
{
super
(
)
;
}
testChain
(
)
{
super
.
testChain
(
)
;
assert
.
sameValue
(
this
.
middleCalled
true
)
;
assert
.
sameValue
(
this
.
baseCalled
true
)
;
}
}
(
)
.
testChain
(
)
;
base
.
prototype
.
x
=
"
yeehaw
"
;
let
chain
=
class
extends
base
{
constructor
(
)
{
super
(
)
;
}
}
const
CHAIN_LENGTH
=
100
;
for
(
let
i
=
0
;
i
<
CHAIN_LENGTH
;
i
+
+
)
chain
=
class
extends
chain
{
constructor
(
)
{
super
(
)
;
}
}
let
inst
=
new
chain
(
)
;
inst
.
testChain
(
)
;
assert
.
sameValue
(
inst
.
baseCalled
true
)
;
assert
.
sameValue
(
inst
.
x
"
yeehaw
"
)
;
reportCompare
(
0
0
)
;
