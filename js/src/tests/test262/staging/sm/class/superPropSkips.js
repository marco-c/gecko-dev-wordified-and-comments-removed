class
base
{
constructor
(
)
{
}
}
class
derived
extends
base
{
constructor
(
)
{
super
(
)
;
this
.
prop
=
"
flamingo
"
;
}
toString
(
)
{
throw
"
No
!
"
;
}
testSkipGet
(
)
{
assert
.
sameValue
(
super
.
prop
undefined
)
;
}
testSkipDerivedOverrides
(
)
{
assert
.
sameValue
(
super
[
"
toString
"
]
(
)
Object
.
prototype
.
toString
.
call
(
this
)
)
;
}
testSkipSet
(
)
{
super
.
prop
=
"
rat
"
;
assert
.
sameValue
(
this
.
prop
"
rat
"
)
;
assert
.
sameValue
(
this
.
nonWritableProp
"
pony
"
)
;
super
.
nonWritableProp
=
"
bear
"
;
assert
.
sameValue
(
this
.
nonWritableProp
"
bear
"
)
;
}
}
Object
.
defineProperty
(
derived
.
prototype
"
nonWritableProp
"
{
writable
:
false
value
:
"
pony
"
}
)
;
let
instance
=
new
derived
(
)
;
instance
.
testSkipGet
(
)
;
instance
.
testSkipDerivedOverrides
(
)
;
instance
.
testSkipSet
(
)
;
reportCompare
(
0
0
)
;
