class
func
extends
Function
{
}
let
inst
=
new
func
(
"
x
"
"
return
this
.
bar
+
x
"
)
;
let
bound
=
inst
.
bind
(
{
bar
:
3
}
4
)
;
assert
.
sameValue
(
bound
instanceof
func
true
)
;
assert
.
sameValue
(
bound
(
)
7
)
;
Object
.
setPrototypeOf
(
inst
null
)
;
bound
=
Function
.
prototype
.
bind
.
call
(
inst
{
bar
:
1
}
3
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
bound
)
null
)
;
assert
.
sameValue
(
bound
(
)
4
)
;
function
toBind
(
)
{
}
var
boundArgs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
boundArgs
.
push
(
i
)
;
let
bound
=
toBind
.
bind
(
undefined
.
.
.
boundArgs
)
;
bound
.
prototype
=
{
}
;
class
test
extends
bound
{
}
;
let
passedArgs
=
[
]
;
for
(
let
j
=
0
;
j
<
15
;
j
+
+
)
{
passedArgs
.
push
(
j
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
new
test
(
.
.
.
passedArgs
)
)
test
.
prototype
)
;
}
}
reportCompare
(
0
0
)
;
