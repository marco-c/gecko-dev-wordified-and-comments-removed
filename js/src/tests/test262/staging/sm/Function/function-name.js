function
testFunctionName
(
f
)
{
var
name
=
f
.
name
;
f
.
name
=
'
g
'
;
assert
.
sameValue
(
f
.
name
name
)
;
assert
.
sameValue
(
delete
f
.
name
true
)
;
assert
.
sameValue
(
f
.
name
'
'
)
;
assert
.
sameValue
(
f
.
hasOwnProperty
(
'
name
'
)
false
)
;
f
.
name
=
'
g
'
;
assert
.
sameValue
(
f
.
name
'
'
)
;
Object
.
defineProperty
(
f
'
name
'
{
value
:
'
g
'
}
)
;
assert
.
sameValue
(
f
.
name
'
g
'
)
;
}
function
testFunctionNameStrict
(
f
)
{
"
use
strict
"
;
var
name
=
f
.
name
;
var
error
;
try
{
f
.
name
=
'
g
'
;
}
catch
(
e
)
{
error
=
e
;
}
assert
.
sameValue
(
f
.
name
name
)
;
assert
.
sameValue
(
error
instanceof
TypeError
true
)
;
assert
.
sameValue
(
delete
f
.
name
true
)
;
assert
.
sameValue
(
f
.
name
'
'
)
;
assert
.
sameValue
(
f
.
hasOwnProperty
(
'
name
'
)
false
)
;
error
=
null
;
try
{
f
.
name
=
'
g
'
;
}
catch
(
e
)
{
error
=
e
;
}
assert
.
sameValue
(
f
.
name
'
'
)
;
assert
.
sameValue
(
error
instanceof
TypeError
true
)
;
Object
.
defineProperty
(
f
'
name
'
{
value
:
'
g
'
}
)
;
assert
.
sameValue
(
f
.
name
'
g
'
)
;
}
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
Object
"
name
"
)
.
writable
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
Object
"
name
"
)
.
enumerable
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
Object
"
name
"
)
.
configurable
true
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
Object
"
name
"
)
.
value
'
Object
'
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
function
f
(
)
{
}
"
name
"
)
.
writable
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
function
f
(
)
{
}
"
name
"
)
.
enumerable
false
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
function
f
(
)
{
}
"
name
"
)
.
configurable
true
)
;
assert
.
sameValue
(
Object
.
getOwnPropertyDescriptor
(
function
f
(
)
{
}
"
name
"
)
.
value
'
f
'
)
;
function
f
(
)
{
}
;
Object
.
defineProperty
(
f
'
name
'
{
value
:
'
g
'
}
)
;
assert
.
sameValue
(
f
.
name
'
g
'
)
;
testFunctionName
(
function
f
(
)
{
}
)
;
testFunctionNameStrict
(
function
f
(
)
{
}
)
;
testFunctionName
(
Function
.
prototype
.
apply
)
;
testFunctionNameStrict
(
Function
.
prototype
.
call
)
;
testFunctionName
(
Array
.
prototype
.
forEach
)
;
testFunctionNameStrict
(
Array
.
prototype
.
some
)
;
reportCompare
(
0
0
)
;
