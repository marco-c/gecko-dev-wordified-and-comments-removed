var
global
=
this
;
var
otherGlobal
=
createNewGlobal
(
)
;
var
thisGlobal
=
(
)
=
>
global
;
var
alternateGlobals
=
(
function
(
i
)
{
return
(
)
=
>
(
i
+
+
%
2
)
=
=
=
0
?
global
:
otherGlobal
;
}
)
(
0
)
;
function
performTests
(
pickGlobal
)
{
assert
.
sameValue
(
Array
.
isArray
(
[
]
)
true
)
;
var
proxy
=
new
(
pickGlobal
(
)
)
.
Proxy
(
[
]
{
}
)
;
assert
.
sameValue
(
Array
.
isArray
(
proxy
)
true
)
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
{
proxy
=
new
(
pickGlobal
(
)
)
.
Proxy
(
proxy
{
}
)
;
assert
.
sameValue
(
Array
.
isArray
(
proxy
)
true
)
;
}
var
revocable
=
(
pickGlobal
(
)
)
.
Proxy
.
revocable
(
[
]
{
}
)
;
proxy
=
revocable
.
proxy
;
assert
.
sameValue
(
Array
.
isArray
(
proxy
)
true
)
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
{
proxy
=
new
(
pickGlobal
(
)
)
.
Proxy
(
proxy
{
}
)
;
assert
.
sameValue
(
Array
.
isArray
(
proxy
)
true
)
;
}
revocable
.
revoke
(
)
;
assertThrowsInstanceOf
(
(
)
=
>
Array
.
isArray
(
revocable
.
proxy
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
Array
.
isArray
(
proxy
)
TypeError
)
;
}
performTests
(
thisGlobal
)
;
performTests
(
alternateGlobals
)
;
function
crossGlobalTest
(
)
{
var
array
=
new
otherGlobal
.
Array
(
)
;
assert
.
sameValue
(
Array
.
isArray
(
array
)
true
)
;
assert
.
sameValue
(
Array
.
isArray
(
new
Proxy
(
array
{
}
)
)
true
)
;
assert
.
sameValue
(
Array
.
isArray
(
new
otherGlobal
.
Proxy
(
array
{
}
)
)
true
)
;
}
crossGlobalTest
(
)
;
reportCompare
(
0
0
)
;
