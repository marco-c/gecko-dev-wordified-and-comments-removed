var
BUGNUMBER
=
1180306
;
var
summary
=
'
Array
.
from
should
close
iterator
on
error
'
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
function
test
(
ctor
{
mapVal
=
undefined
nextVal
=
undefined
nextThrowVal
=
undefined
modifier
=
undefined
exceptionVal
=
undefined
exceptionType
=
undefined
closed
=
true
}
)
{
let
iterable
=
{
closed
:
false
[
Symbol
.
iterator
]
(
)
{
let
iterator
=
{
first
:
true
next
(
)
{
if
(
this
.
first
)
{
this
.
first
=
false
;
if
(
nextThrowVal
)
throw
nextThrowVal
;
return
nextVal
;
}
return
{
value
:
undefined
done
:
true
}
;
}
return
(
)
{
iterable
.
closed
=
true
;
return
{
}
;
}
}
;
if
(
modifier
)
modifier
(
iterator
iterable
)
;
return
iterator
;
}
}
;
if
(
exceptionVal
)
{
let
caught
=
false
;
try
{
ctor
.
from
(
iterable
mapVal
)
;
}
catch
(
e
)
{
assert
.
sameValue
(
e
exceptionVal
)
;
caught
=
true
;
}
assert
.
sameValue
(
caught
true
)
;
}
else
if
(
exceptionType
)
{
assertThrowsInstanceOf
(
(
)
=
>
ctor
.
from
(
iterable
mapVal
)
exceptionType
)
;
}
else
{
ctor
.
from
(
iterable
mapVal
)
;
}
assert
.
sameValue
(
iterable
.
closed
closed
)
;
}
test
(
Array
{
mapVal
:
(
)
=
>
{
throw
"
map
throws
"
;
}
nextVal
:
{
value
:
1
done
:
false
}
exceptionVal
:
"
map
throws
"
closed
:
true
}
)
;
class
MyArray
extends
Array
{
constructor
(
)
{
return
new
Proxy
(
{
}
{
defineProperty
(
)
{
throw
"
defineProperty
throws
"
;
}
}
)
;
}
}
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
modifier
:
(
iterator
iterable
)
=
>
{
Object
.
defineProperty
(
iterator
"
return
"
{
get
:
function
(
)
{
iterable
.
closed
=
true
;
throw
"
return
getter
throws
"
;
}
}
)
;
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
modifier
:
(
iterator
iterable
)
=
>
{
Object
.
defineProperty
(
iterator
"
return
"
{
get
:
function
(
)
{
iterable
.
closed
=
true
;
return
"
non
object
"
;
}
}
)
;
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
modifier
:
(
iterator
iterable
)
=
>
{
Object
.
defineProperty
(
iterator
"
return
"
{
get
:
function
(
)
{
iterable
.
closed
=
true
;
return
{
}
;
}
}
)
;
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
modifier
:
(
iterator
iterable
)
=
>
{
iterator
.
return
=
function
(
)
{
iterable
.
closed
=
true
;
throw
"
return
throws
"
;
}
;
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
MyArray
{
nextVal
:
{
value
:
1
done
:
false
}
modifier
:
(
iterator
iterable
)
=
>
{
iterator
.
return
=
function
(
)
{
iterable
.
closed
=
true
;
return
"
non
object
"
;
}
;
}
exceptionVal
:
"
defineProperty
throws
"
closed
:
true
}
)
;
test
(
Array
{
nextThrowVal
:
"
next
throws
"
exceptionVal
:
"
next
throws
"
closed
:
false
}
)
;
test
(
Array
{
nextVal
:
{
value
:
{
}
get
done
(
)
{
throw
"
done
getter
throws
"
;
}
}
exceptionVal
:
"
done
getter
throws
"
closed
:
false
}
)
;
test
(
Array
{
nextVal
:
{
get
value
(
)
{
throw
"
value
getter
throws
"
;
}
done
:
false
}
exceptionVal
:
"
value
getter
throws
"
closed
:
false
}
)
;
test
(
Array
{
nextVal
:
{
value
:
1
done
:
false
}
closed
:
false
}
)
;
reportCompare
(
0
0
)
;
