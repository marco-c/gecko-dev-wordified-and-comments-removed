var
BUGNUMBER
=
645464
;
var
summary
=
"
[
[
DefaultValue
]
]
behavior
wrong
for
String
with
overridden
valueOf
/
toString
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
var
s
=
new
String
(
"
c
"
)
;
assert
.
sameValue
(
s
=
=
"
c
"
true
)
;
var
s2
=
new
String
(
)
;
s2
.
valueOf
=
function
(
)
{
return
"
foo
"
;
}
;
assert
.
sameValue
(
s2
=
=
"
foo
"
true
)
;
var
s3
=
new
String
(
)
;
s3
.
toString
=
function
(
)
{
return
"
bar
"
;
}
;
assert
.
sameValue
(
s3
=
=
"
"
true
)
;
function
testEquality
(
)
{
var
s
=
new
String
(
"
c
"
)
;
assert
.
sameValue
(
s
=
=
"
c
"
true
)
;
var
s2
=
new
String
(
)
;
s2
.
valueOf
=
function
(
)
{
return
"
foo
"
;
}
;
assert
.
sameValue
(
s2
=
=
"
foo
"
true
)
;
var
s3
=
new
String
(
)
;
s3
.
toString
=
function
(
)
{
return
"
bar
"
;
}
;
assert
.
sameValue
(
s3
=
=
"
"
true
)
;
}
testEquality
(
)
;
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
+
"
"
"
"
)
;
var
s2
=
new
String
(
)
;
s2
.
toString
=
function
(
)
{
return
"
bar
"
;
}
;
assert
.
sameValue
(
s2
+
"
"
"
"
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s3
+
"
"
"
baz
"
)
;
function
testStringAddition
(
)
{
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
+
"
"
"
"
)
;
var
s2
=
new
String
(
)
;
s2
.
toString
=
function
(
)
{
return
"
bar
"
;
}
;
assert
.
sameValue
(
s2
+
"
"
"
"
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s3
+
"
"
"
baz
"
)
;
}
testStringAddition
(
)
;
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
+
s
"
"
)
;
var
s2
=
new
String
(
)
;
s2
.
toString
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s2
+
s2
"
"
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
quux
"
;
}
;
assert
.
sameValue
(
s3
+
s3
"
quuxquux
"
)
;
function
testNonStringAddition
(
)
{
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
+
s
"
"
)
;
var
s2
=
new
String
(
)
;
s2
.
toString
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s2
+
s2
"
"
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
quux
"
;
}
;
assert
.
sameValue
(
s3
+
s3
"
quuxquux
"
)
;
}
testNonStringAddition
(
)
;
var
obj
=
{
primitive
:
17
valueOf
:
42
toString
:
8675309
}
;
var
s
=
new
String
(
"
primitive
"
)
;
assert
.
sameValue
(
obj
[
s
]
17
)
;
var
s2
=
new
String
(
"
primitive
"
)
;
s2
.
valueOf
=
function
(
)
{
return
"
valueOf
"
;
}
assert
.
sameValue
(
obj
[
s2
]
17
)
;
var
s3
=
new
String
(
"
primitive
"
)
;
s3
.
toString
=
function
(
)
{
return
"
toString
"
;
}
;
assert
.
sameValue
(
obj
[
s3
]
8675309
)
;
function
testPropertyNameToString
(
)
{
var
obj
=
{
primitive
:
17
valueOf
:
42
toString
:
8675309
}
;
var
s
=
new
String
(
"
primitive
"
)
;
assert
.
sameValue
(
obj
[
s
]
17
)
;
var
s2
=
new
String
(
"
primitive
"
)
;
s2
.
valueOf
=
function
(
)
{
return
"
valueOf
"
;
}
assert
.
sameValue
(
obj
[
s2
]
17
)
;
var
s3
=
new
String
(
"
primitive
"
)
;
s3
.
toString
=
function
(
)
{
return
"
toString
"
;
}
;
assert
.
sameValue
(
obj
[
s3
]
8675309
)
;
}
testPropertyNameToString
(
)
;
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
in
{
"
"
:
5
}
true
)
;
var
s2
=
new
String
(
)
;
s
.
toString
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s
in
{
baz
:
42
}
true
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
quux
"
;
}
;
assert
.
sameValue
(
s3
in
{
"
"
:
17
}
true
)
;
function
testInOperatorName
(
)
{
var
s
=
new
String
(
)
;
assert
.
sameValue
(
s
in
{
"
"
:
5
}
true
)
;
var
s2
=
new
String
(
)
;
s
.
toString
=
function
(
)
{
return
"
baz
"
;
}
;
assert
.
sameValue
(
s
in
{
baz
:
42
}
true
)
;
var
s3
=
new
String
(
)
;
s3
.
valueOf
=
function
(
)
{
return
"
quux
"
;
}
;
assert
.
sameValue
(
s3
in
{
"
"
:
17
}
true
)
;
}
testInOperatorName
(
)
;
print
(
"
All
tests
passed
!
"
)
;
reportCompare
(
0
0
)
;
