function
TestStringIteratorPrototypeConfusion
(
)
{
var
iter
=
"
"
[
Symbol
.
iterator
]
(
)
;
assertThrowsInstanceOfWithMessage
(
(
)
=
>
iter
.
next
.
call
(
Object
.
getPrototypeOf
(
iter
)
)
TypeError
"
next
method
called
on
incompatible
String
Iterator
"
)
;
}
TestStringIteratorPrototypeConfusion
(
)
;
function
TestStringIteratorWrappers
(
)
{
var
iter
=
"
"
[
Symbol
.
iterator
]
(
)
;
assert
.
deepEqual
(
iter
.
next
.
call
(
createNewGlobal
(
)
.
eval
(
'
"
x
"
[
Symbol
.
iterator
]
(
)
'
)
)
{
value
:
"
x
"
done
:
false
}
)
}
if
(
typeof
createNewGlobal
=
=
=
"
function
"
)
{
TestStringIteratorWrappers
(
)
;
}
reportCompare
(
0
0
)
;
