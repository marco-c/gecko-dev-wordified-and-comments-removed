assert
.
sameValue
(
typeof
String
.
prototype
.
matchAll
"
function
"
)
;
assert
.
sameValue
(
String
.
prototype
.
matchAll
.
name
"
matchAll
"
)
;
assert
.
sameValue
(
String
.
prototype
.
matchAll
.
length
1
)
;
assert
.
sameValue
(
typeof
Symbol
.
matchAll
"
symbol
"
)
;
assert
.
sameValue
(
typeof
RegExp
.
prototype
[
Symbol
.
matchAll
]
"
function
"
)
;
assert
.
sameValue
(
RegExp
.
prototype
[
Symbol
.
matchAll
]
.
name
"
[
Symbol
.
matchAll
]
"
)
;
assert
.
sameValue
(
RegExp
.
prototype
[
Symbol
.
matchAll
]
.
length
1
)
;
const
IteratorPrototype
=
Object
.
getPrototypeOf
(
Object
.
getPrototypeOf
(
[
]
[
Symbol
.
iterator
]
(
)
)
)
;
const
RegExpStringIteratorPrototype
=
Object
.
getPrototypeOf
(
"
"
.
matchAll
(
"
"
)
)
;
assert
.
sameValue
(
Object
.
getPrototypeOf
(
RegExpStringIteratorPrototype
)
IteratorPrototype
)
;
assert
.
sameValue
(
typeof
RegExpStringIteratorPrototype
.
next
"
function
"
)
;
assert
.
sameValue
(
RegExpStringIteratorPrototype
.
next
.
name
"
next
"
)
;
assert
.
sameValue
(
RegExpStringIteratorPrototype
.
next
.
length
0
)
;
assert
.
sameValue
(
RegExpStringIteratorPrototype
[
Symbol
.
toStringTag
]
"
RegExp
String
Iterator
"
)
;
const
RegExp_prototype_exec
=
RegExp
.
prototype
.
exec
;
const
RegExp_prototype_match
=
RegExp
.
prototype
[
Symbol
.
match
]
;
function
assertEqIterMatchResult
(
actual
expected
)
{
assert
.
sameValue
(
actual
.
done
expected
.
done
)
;
if
(
actual
.
value
=
=
=
undefined
|
|
expected
.
value
=
=
=
undefined
)
{
assert
.
sameValue
(
actual
.
value
expected
.
value
)
;
}
else
{
assert
.
compareArray
(
actual
.
value
expected
.
value
)
;
assert
.
sameValue
(
actual
.
value
.
input
expected
.
value
.
input
)
;
assert
.
sameValue
(
actual
.
value
.
index
expected
.
value
.
index
)
;
}
}
function
assertEqMatchResults
(
actual
expected
)
{
var
actualIter
=
actual
[
Symbol
.
iterator
]
(
)
;
var
expectedIter
=
expected
[
Symbol
.
iterator
]
(
)
;
while
(
true
)
{
var
actualResult
=
actualIter
.
next
(
)
;
var
expectedResult
=
expectedIter
.
next
(
)
;
assertEqIterMatchResult
(
actualResult
expectedResult
)
;
if
(
actualResult
.
done
&
&
expectedResult
.
done
)
return
;
}
}
function
*
matchResults
(
string
regexp
lastIndex
=
0
)
{
regexp
.
lastIndex
=
lastIndex
;
while
(
true
)
{
var
match
=
Reflect
.
apply
(
RegExp_prototype_exec
regexp
[
string
]
)
;
if
(
match
=
=
=
null
)
return
;
yield
match
;
if
(
!
regexp
.
global
)
return
;
}
}
assertEqMatchResults
(
/
a
/
[
Symbol
.
matchAll
]
(
"
ababcca
"
)
matchResults
(
"
ababcca
"
/
a
/
)
)
;
assertEqMatchResults
(
"
ababcca
"
.
matchAll
(
/
a
/
g
)
matchResults
(
"
ababcca
"
/
a
/
g
)
)
;
assertEqMatchResults
(
"
ababcca
"
.
matchAll
(
"
a
"
)
matchResults
(
"
ababcca
"
/
a
/
g
)
)
;
{
let
otherGlobal
=
createNewGlobal
(
)
;
let
iterator
=
otherGlobal
.
eval
(
"
ababcca
"
.
matchAll
(
/
a
/
g
)
)
;
let
expected
=
matchResults
(
"
ababcca
"
/
a
/
g
)
;
assertEqIterMatchResult
(
RegExpStringIteratorPrototype
.
next
.
call
(
iterator
)
expected
.
next
(
)
)
;
}
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabb
"
.
matchAll
(
regexp
)
;
regexp
.
compile
(
"
b
+
"
"
g
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aabb
"
/
a
+
/
g
)
)
;
}
{
let
regexp
=
/
a
+
/
gi
;
let
iterator
=
"
aAbb
"
.
matchAll
(
regexp
)
;
regexp
.
compile
(
"
a
+
"
"
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aAbb
"
/
a
+
/
gi
)
)
;
}
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
let
expected
=
matchResults
(
"
aabbaa
"
/
a
+
/
g
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
regexp
.
compile
(
"
b
+
"
"
g
"
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
}
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabbAA
"
.
matchAll
(
regexp
)
;
let
expected
=
matchResults
(
"
aabbAA
"
/
a
+
/
g
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
regexp
.
compile
(
"
a
+
"
"
i
"
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
}
{
let
regexp
=
/
a
+
/
g
;
regexp
.
lastIndex
=
1
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
let
expected
=
matchResults
(
"
aabbaa
"
/
a
+
/
g
1
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
}
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
regexp
.
lastIndex
=
1
;
let
expected
=
matchResults
(
"
aabbaa
"
/
a
+
/
g
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
assertEqIterMatchResult
(
iterator
.
next
(
)
expected
.
next
(
)
)
;
assert
.
sameValue
(
regexp
.
lastIndex
1
)
;
}
try
{
let
regexp
=
/
a
+
/
g
;
let
callCount
=
0
;
Object
.
defineProperty
(
RegExp
.
prototype
Symbol
.
match
{
get
(
)
{
assert
.
sameValue
(
this
regexp
)
;
callCount
+
+
;
return
RegExp_prototype_match
;
}
}
)
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
assert
.
sameValue
(
callCount
2
)
;
}
finally
{
Object
.
defineProperty
(
RegExp
.
prototype
Symbol
.
match
{
value
:
RegExp_prototype_match
writable
:
true
enumerable
:
false
configurable
:
true
}
)
;
}
try
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
let
lastIndices
=
[
0
2
6
]
[
Symbol
.
iterator
]
(
)
;
let
iteratorRegExp
=
null
;
let
callCount
=
0
;
Object
.
defineProperty
(
RegExp
.
prototype
"
exec
"
{
get
(
)
{
callCount
+
+
;
if
(
iteratorRegExp
=
=
=
null
)
iteratorRegExp
=
this
;
assert
.
sameValue
(
this
=
=
=
regexp
false
)
;
assert
.
sameValue
(
this
iteratorRegExp
)
;
assert
.
sameValue
(
this
.
source
regexp
.
source
)
;
assert
.
sameValue
(
this
.
flags
regexp
.
flags
)
;
assert
.
sameValue
(
this
.
lastIndex
lastIndices
.
next
(
)
.
value
)
;
return
RegExp_prototype_exec
;
}
}
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aabbaa
"
/
a
+
/
g
)
)
;
assert
.
sameValue
(
callCount
3
)
;
}
finally
{
Object
.
defineProperty
(
RegExp
.
prototype
"
exec
"
{
value
:
RegExp_prototype_exec
writable
:
true
enumerable
:
false
configurable
:
true
}
)
;
}
try
{
let
regexp
=
/
a
+
/
g
;
let
iterator
=
"
aabbaa
"
.
matchAll
(
regexp
)
;
let
lastIndices
=
[
0
2
6
]
[
Symbol
.
iterator
]
(
)
;
let
iteratorRegExp
=
null
;
let
callCount
=
0
;
RegExp
.
prototype
.
exec
=
function
(
.
.
.
args
)
{
callCount
+
+
;
if
(
iteratorRegExp
=
=
=
null
)
iteratorRegExp
=
this
;
assert
.
sameValue
(
this
=
=
=
regexp
false
)
;
assert
.
sameValue
(
this
iteratorRegExp
)
;
assert
.
sameValue
(
this
.
source
regexp
.
source
)
;
assert
.
sameValue
(
this
.
flags
regexp
.
flags
)
;
assert
.
sameValue
(
this
.
lastIndex
lastIndices
.
next
(
)
.
value
)
;
return
Reflect
.
apply
(
RegExp_prototype_exec
this
args
)
;
}
;
assertEqMatchResults
(
iterator
matchResults
(
"
aabbaa
"
/
a
+
/
g
)
)
;
assert
.
sameValue
(
callCount
3
)
;
}
finally
{
Object
.
defineProperty
(
RegExp
.
prototype
"
exec
"
{
value
:
RegExp_prototype_exec
writable
:
true
enumerable
:
false
configurable
:
true
}
)
;
}
{
let
regexp
=
/
a
+
/
;
regexp
.
lastIndex
=
2
;
let
iterator
=
regexp
[
Symbol
.
matchAll
]
(
"
aaaaa
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aaaaa
"
/
a
+
/
g
0
)
)
;
}
{
let
regexp
=
/
a
+
/
g
;
regexp
.
lastIndex
=
2
;
let
iterator
=
regexp
[
Symbol
.
matchAll
]
(
"
aaaaa
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aaaaa
"
/
a
+
/
g
2
)
)
;
}
{
let
regexp
=
/
a
+
/
y
;
regexp
.
lastIndex
=
2
;
let
iterator
=
regexp
[
Symbol
.
matchAll
]
(
"
aaaaa
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aaaaa
"
/
a
+
/
g
2
)
)
;
}
{
let
regexp
=
/
a
+
/
gy
;
regexp
.
lastIndex
=
2
;
let
iterator
=
regexp
[
Symbol
.
matchAll
]
(
"
aaaaa
"
)
;
assertEqMatchResults
(
iterator
matchResults
(
"
aaaaa
"
/
a
+
/
g
2
)
)
;
}
reportCompare
(
0
0
)
;
