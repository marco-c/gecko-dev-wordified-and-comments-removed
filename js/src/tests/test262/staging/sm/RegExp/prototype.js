const
t
=
RegExp
.
prototype
;
let
properties
=
"
toString
compile
exec
test
"
+
"
flags
dotAll
global
hasIndices
ignoreCase
multiline
source
sticky
unicode
unicodeSets
"
+
"
constructor
"
+
"
Symbol
(
Symbol
.
match
)
Symbol
(
Symbol
.
replace
)
Symbol
(
Symbol
.
search
)
Symbol
(
Symbol
.
split
)
"
;
if
(
Object
.
prototype
.
toSource
)
{
properties
=
"
toSource
"
+
properties
;
}
if
(
Symbol
.
matchAll
)
{
properties
+
=
"
Symbol
(
Symbol
.
matchAll
)
"
;
}
assert
.
compareArray
(
Reflect
.
ownKeys
(
t
)
.
map
(
String
)
.
sort
(
)
properties
.
split
(
"
"
)
.
sort
(
)
)
;
function
getter
(
name
)
{
return
Object
.
getOwnPropertyDescriptor
(
t
name
)
.
get
.
call
(
t
)
;
}
assert
.
sameValue
(
getter
(
"
flags
"
)
"
"
)
;
assert
.
sameValue
(
getter
(
"
global
"
)
undefined
)
;
assert
.
sameValue
(
getter
(
"
ignoreCase
"
)
undefined
)
;
assert
.
sameValue
(
getter
(
"
multiline
"
)
undefined
)
;
assert
.
sameValue
(
getter
(
"
source
"
)
"
(
?
:
)
"
)
;
assert
.
sameValue
(
getter
(
"
sticky
"
)
undefined
)
;
assert
.
sameValue
(
getter
(
"
unicode
"
)
undefined
)
;
assert
.
sameValue
(
t
.
toString
(
)
"
/
(
?
:
)
/
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
.
compile
(
"
b
"
"
i
"
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
.
test
(
"
x
"
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
t
.
exec
(
"
x
"
)
TypeError
)
;
reportCompare
(
0
0
)
;
