function
test
(
otherGlobal
)
{
var
otherRegExp
=
otherGlobal
.
RegExp
;
for
(
let
name
of
[
"
global
"
"
ignoreCase
"
"
multiline
"
"
sticky
"
"
unicode
"
"
source
"
]
)
{
let
getter
=
Object
.
getOwnPropertyDescriptor
(
RegExp
.
prototype
name
)
.
get
;
assert
.
sameValue
(
typeof
getter
"
function
"
)
;
let
ex
;
try
{
getter
.
call
(
otherRegExp
.
prototype
)
;
}
catch
(
e
)
{
ex
=
e
;
}
assert
.
sameValue
(
ex
instanceof
TypeError
|
|
ex
instanceof
otherGlobal
.
TypeError
true
)
;
}
let
flagsGetter
=
Object
.
getOwnPropertyDescriptor
(
RegExp
.
prototype
"
flags
"
)
.
get
;
assert
.
sameValue
(
flagsGetter
.
call
(
otherRegExp
.
prototype
)
"
"
)
;
assert
.
sameValue
(
RegExp
.
prototype
.
toString
.
call
(
otherRegExp
.
prototype
)
"
/
(
?
:
)
/
"
)
;
}
test
(
createNewGlobal
(
)
)
;
test
(
createNewGlobal
(
{
newCompartment
:
true
}
)
)
;
reportCompare
(
0
0
)
;
