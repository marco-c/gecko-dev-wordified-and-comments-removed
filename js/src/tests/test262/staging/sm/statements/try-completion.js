var
BUGNUMBER
=
819125
;
var
summary
=
"
try
block
should
return
try
value
if
finally
returned
normally
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
function
expectTryValue
(
code
isUndefined
)
{
assert
.
sameValue
(
eval
(
code
)
isUndefined
?
undefined
:
'
try
'
)
;
}
function
expectCatchValue
(
code
isUndefined
)
{
assert
.
sameValue
(
eval
(
code
)
isUndefined
?
undefined
:
'
catch
'
)
;
}
function
expectFinallyValue
(
code
isUndefined
)
{
assert
.
sameValue
(
eval
(
code
)
isUndefined
?
undefined
:
'
finally
'
)
;
}
expectTryValue
(
try
{
'
try
'
;
}
finally
{
'
finally
'
;
}
)
;
expectTryValue
(
try
{
}
finally
{
'
finally
'
;
}
true
)
;
expectTryValue
(
while
(
true
)
{
try
{
'
try
'
;
break
;
}
finally
{
'
finally
'
;
}
}
)
;
expectTryValue
(
while
(
true
)
{
try
{
break
;
}
finally
{
'
finally
'
;
}
}
true
)
;
expectTryValue
(
do
{
try
{
'
try
'
;
continue
;
}
finally
{
'
finally
'
;
}
}
while
(
false
)
;
)
;
expectTryValue
(
do
{
try
{
continue
;
}
finally
{
'
finally
'
;
}
}
while
(
false
)
;
true
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
}
finally
{
'
finally
'
;
}
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
}
finally
{
'
finally
'
;
}
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
}
finally
{
'
finally
'
;
}
true
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
}
finally
{
'
finally
'
;
}
true
)
;
expectCatchValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
break
;
}
finally
{
'
finally
'
;
}
}
)
;
expectCatchValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
break
;
}
finally
{
'
finally
'
;
}
}
true
)
;
expectCatchValue
(
do
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
continue
;
}
finally
{
'
finally
'
;
}
}
while
(
false
)
;
)
;
expectCatchValue
(
do
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
continue
;
}
finally
{
'
finally
'
;
}
}
while
(
false
)
;
true
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
}
finally
{
'
finally
'
;
break
;
}
}
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
}
finally
{
break
;
}
}
true
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
break
;
}
finally
{
'
finally
'
;
break
;
}
}
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
break
;
}
finally
{
break
;
}
}
true
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
continue
;
}
finally
{
'
finally
'
;
break
;
}
}
while
(
false
)
;
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
continue
;
}
finally
{
break
;
}
}
while
(
false
)
;
true
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
}
finally
{
'
finally
'
;
break
;
}
}
false
)
;
expectFinallyValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
}
finally
{
break
;
}
}
true
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
}
finally
{
'
finally
'
;
continue
;
}
}
while
(
false
)
;
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
}
finally
{
continue
;
}
}
while
(
false
)
;
true
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
break
;
}
finally
{
'
finally
'
;
continue
;
}
}
while
(
false
)
;
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
break
;
}
finally
{
continue
;
}
}
while
(
false
)
;
true
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
continue
;
}
finally
{
'
finally
'
;
continue
;
}
}
while
(
false
)
;
)
;
expectFinallyValue
(
do
{
try
{
'
try
'
;
continue
;
}
finally
{
continue
;
}
}
while
(
false
)
;
true
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
}
)
;
expectCatchValue
(
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
}
true
)
;
expectCatchValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
break
;
}
}
)
;
expectCatchValue
(
while
(
true
)
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
break
;
}
}
true
)
;
expectCatchValue
(
do
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
'
catch
'
;
continue
;
}
}
while
(
false
)
;
)
;
expectCatchValue
(
do
{
try
{
'
try
'
;
throw
'
exception
'
;
}
catch
(
e
)
{
continue
;
}
}
while
(
false
)
;
true
)
;
reportCompare
(
0
0
)
;
