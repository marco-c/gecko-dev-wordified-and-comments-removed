function
test
(
)
{
var
returnCalled
=
0
;
var
returnCalledExpected
=
0
;
var
catchEntered
=
0
;
var
finallyEntered
=
0
;
var
finallyEnteredExpected
=
0
;
var
iterable
=
{
}
;
iterable
[
Symbol
.
iterator
]
=
makeIterator
(
{
ret
:
function
(
)
{
returnCalled
+
+
;
throw
42
;
}
}
)
;
assertThrowsValue
(
function
(
)
{
for
(
var
x
of
iterable
)
{
try
{
return
;
}
catch
(
e
)
{
catchEntered
+
+
;
}
finally
{
finallyEntered
+
+
;
}
}
}
42
)
;
assert
.
sameValue
(
returnCalled
+
+
returnCalledExpected
)
;
assert
.
sameValue
(
catchEntered
0
)
;
assert
.
sameValue
(
finallyEntered
+
+
finallyEnteredExpected
)
;
}
test
(
)
;
reportCompare
(
0
0
)
;
