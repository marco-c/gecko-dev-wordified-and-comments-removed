var
someObjects
=
[
{
}
new
Int32Array
(
7
)
Object
(
Symbol
(
"
table
"
)
)
new
Proxy
(
{
}
{
}
)
]
;
for
(
var
obj
of
someObjects
)
{
assert
.
sameValue
(
Reflect
.
preventExtensions
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
preventExtensions
(
obj
)
true
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
isExtensible
(
)
TypeError
)
;
for
(
var
value
of
[
undefined
null
true
1
NaN
"
Phaedo
"
Symbol
(
"
good
"
)
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
isExtensible
(
value
)
TypeError
)
;
}
obj
=
{
}
;
var
proxy
=
new
Proxy
(
obj
{
preventExtensions
(
)
{
return
false
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
preventExtensions
(
proxy
)
false
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
proxy
)
true
)
;
obj
=
{
}
;
proxy
=
new
Proxy
(
obj
{
preventExtensions
(
)
{
throw
"
fit
"
;
}
}
)
;
assertThrowsValue
(
(
)
=
>
Reflect
.
preventExtensions
(
proxy
)
"
fit
"
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
proxy
)
true
)
;
obj
=
{
}
;
proxy
=
new
Proxy
(
obj
{
preventExtensions
(
)
{
return
true
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
preventExtensions
(
proxy
)
TypeError
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
proxy
)
true
)
;
reportCompare
(
0
0
)
;
