var
obj
=
{
}
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
x
"
{
value
:
7
}
)
true
)
;
assert
.
sameValue
(
obj
.
x
7
)
;
var
desc
=
Reflect
.
getOwnPropertyDescriptor
(
obj
"
x
"
)
;
assert
.
deepEqual
(
desc
{
value
:
7
writable
:
false
enumerable
:
false
configurable
:
false
}
)
;
var
key
=
Symbol
(
"
:
o
)
"
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
key
{
value
:
8
}
)
true
)
;
assert
.
sameValue
(
obj
[
key
]
8
)
;
obj
=
[
1
2
3
4
5
]
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
length
"
{
value
:
4
}
)
true
)
;
assert
.
deepEqual
(
obj
[
1
2
3
4
]
)
;
obj
=
{
}
;
var
proxy
=
new
Proxy
(
obj
{
defineProperty
(
t
id
desc
)
{
t
[
id
]
=
1
;
return
true
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
proxy
"
prop
"
{
value
:
7
}
)
true
)
;
assert
.
sameValue
(
obj
.
prop
1
)
;
assert
.
sameValue
(
delete
obj
.
prop
true
)
;
assert
.
sameValue
(
"
prop
"
in
obj
false
)
;
obj
=
{
}
;
var
attributes
=
{
configurable
:
17
enumerable
:
undefined
value
:
null
}
;
proxy
=
new
Proxy
(
obj
{
defineProperty
(
t
id
desc
)
{
assert
.
sameValue
(
desc
!
=
=
attributes
true
)
;
assert
.
sameValue
(
desc
.
configurable
true
)
;
assert
.
sameValue
(
desc
.
enumerable
false
)
;
assert
.
sameValue
(
desc
.
value
null
)
;
assert
.
sameValue
(
"
writable
"
in
desc
false
)
;
return
15
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
proxy
"
prop
"
attributes
)
true
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
defineProperty
(
obj
"
y
"
)
TypeError
)
;
for
(
var
attributes
of
SOME_PRIMITIVE_VALUES
)
{
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
defineProperty
(
obj
"
y
"
attributes
)
TypeError
)
;
}
obj
=
Object
.
preventExtensions
(
{
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
value
:
4
}
)
false
)
;
obj
=
Object
.
preventExtensions
(
Object
.
create
(
{
"
prop
"
:
3
}
)
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
value
:
4
}
)
false
)
;
obj
=
Object
.
freeze
(
{
prop
:
1
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
configurable
:
true
}
)
false
)
;
obj
=
Object
.
freeze
(
Object
.
defineProperties
(
{
}
{
x
:
{
enumerable
:
true
configurable
:
false
value
:
0
}
y
:
{
enumerable
:
false
configurable
:
false
value
:
0
}
}
)
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
x
"
{
enumerable
:
false
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
y
"
{
enumerable
:
true
}
)
false
)
;
obj
=
Object
.
seal
(
{
x
:
1
get
y
(
)
{
return
2
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
x
"
{
get
(
)
{
return
2
;
}
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
y
"
{
value
:
1
}
)
false
)
;
obj
=
Object
.
freeze
(
{
prop
:
0
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
writable
:
true
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
writable
:
false
}
)
true
)
;
obj
=
Object
.
freeze
(
{
prop
:
0
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
value
:
-
0
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
value
:
+
0
}
)
true
)
;
function
g
(
)
{
}
function
s
(
x
)
{
}
obj
=
{
}
;
Object
.
defineProperty
(
obj
"
prop
"
{
get
:
g
set
:
s
configurable
:
false
}
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
get
:
s
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
get
:
g
}
)
true
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
set
:
g
}
)
false
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
"
prop
"
{
set
:
s
}
)
true
)
;
var
falseValues
=
[
false
0
-
0
"
"
NaN
null
undefined
]
;
if
(
typeof
createIsHTMLDDA
=
=
=
"
function
"
)
falseValues
.
push
(
createIsHTMLDDA
(
)
)
;
var
value
;
proxy
=
new
Proxy
(
{
}
{
defineProperty
(
t
id
desc
)
{
return
value
;
}
}
)
;
for
(
value
of
falseValues
)
{
assert
.
sameValue
(
Reflect
.
defineProperty
(
proxy
"
prop
"
{
value
:
1
}
)
false
)
;
}
obj
=
Object
.
freeze
(
{
x
:
1
}
)
;
proxy
=
new
Proxy
(
obj
{
defineProperty
(
t
id
desc
)
{
return
true
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
defineProperty
(
proxy
"
x
"
{
value
:
2
}
)
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
defineProperty
(
proxy
"
y
"
{
value
:
0
}
)
TypeError
)
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
proxy
"
x
"
{
value
:
1
}
)
true
)
;
var
poison
=
(
counter
=
>
new
Proxy
(
{
}
new
Proxy
(
{
}
{
get
(
)
{
throw
counter
+
+
;
}
}
)
)
)
(
42
)
;
assertThrowsValue
(
(
)
=
>
{
Reflect
.
defineProperty
(
poison
{
toString
(
)
{
throw
17
;
}
valueOf
(
)
{
throw
8675309
;
}
}
poison
)
;
}
17
)
;
reportCompare
(
0
0
)
;
