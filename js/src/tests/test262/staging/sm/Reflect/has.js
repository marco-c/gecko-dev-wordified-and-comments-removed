assert
.
sameValue
(
Reflect
.
has
(
{
x
:
0
}
"
x
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
{
x
:
0
}
"
y
"
)
false
)
;
assert
.
sameValue
(
Reflect
.
has
(
{
x
:
0
}
"
toString
"
)
true
)
;
var
arr
=
[
"
zero
"
]
;
arr
[
10000
]
=
0
;
assert
.
sameValue
(
Reflect
.
has
(
arr
"
10000
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
arr
10000
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
arr
"
-
0
"
)
false
)
;
assert
.
sameValue
(
Reflect
.
has
(
arr
-
0
)
true
)
;
var
str
=
new
String
(
"
hello
"
)
;
assert
.
sameValue
(
Reflect
.
has
(
str
"
4
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
str
"
-
0
"
)
false
)
;
assert
.
sameValue
(
Reflect
.
has
(
str
-
0
)
true
)
;
var
obj
=
{
get
prop
(
)
{
}
}
;
for
(
var
i
=
0
;
i
<
2
;
i
+
+
)
{
obj
=
new
Proxy
(
obj
{
}
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
"
prop
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
"
nope
"
)
false
)
;
}
obj
=
new
Proxy
(
{
}
{
has
(
t
k
)
{
return
k
.
startsWith
(
"
door
"
)
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
"
doorbell
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
"
dormitory
"
)
false
)
;
reportCompare
(
0
0
)
;
