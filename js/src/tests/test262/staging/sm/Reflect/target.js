var
methodInfo
=
{
apply
:
[
undefined
[
]
]
construct
:
[
[
]
]
defineProperty
:
[
"
x
"
{
}
]
deleteProperty
:
[
"
x
"
]
get
:
[
"
x
"
{
}
]
getOwnPropertyDescriptor
:
[
"
x
"
]
getPrototypeOf
:
[
]
has
:
[
"
x
"
]
isExtensible
:
[
]
ownKeys
:
[
]
preventExtensions
:
[
]
set
:
[
"
x
"
0
]
setPrototypeOf
:
[
{
}
]
}
;
for
(
const
name
of
Reflect
.
ownKeys
(
Reflect
)
)
{
if
(
typeof
name
!
=
=
"
symbol
"
&
&
name
!
=
=
"
parse
"
)
assert
.
sameValue
(
name
in
methodInfo
true
)
;
}
for
(
const
name
of
Object
.
keys
(
methodInfo
)
)
{
var
args
=
methodInfo
[
name
]
;
assertThrowsInstanceOf
(
Reflect
[
name
]
TypeError
)
;
for
(
var
value
of
SOME_PRIMITIVE_VALUES
)
{
assertThrowsInstanceOf
(
(
)
=
>
Reflect
[
name
]
(
value
.
.
.
args
)
TypeError
)
;
}
}
reportCompare
(
0
0
)
;
