var
obj
=
{
x
:
1
y
:
2
}
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
obj
"
x
"
)
true
)
;
assert
.
deepEqual
(
obj
{
y
:
2
}
)
;
var
arr
=
[
1
1
2
3
5
]
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
arr
"
3
"
)
true
)
;
assert
.
deepEqual
(
arr
[
1
1
2
5
]
)
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
{
}
"
q
"
)
true
)
;
var
proto
=
{
x
:
1
}
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
Object
.
create
(
proto
)
"
x
"
)
true
)
;
assert
.
sameValue
(
proto
.
x
1
)
;
var
arr
=
[
]
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
arr
"
length
"
)
false
)
;
assert
.
sameValue
(
arr
.
hasOwnProperty
(
"
length
"
)
true
)
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
this
"
undefined
"
)
false
)
;
assert
.
sameValue
(
this
.
undefined
void
0
)
;
var
value
;
var
proxy
=
new
Proxy
(
{
}
{
deleteProperty
(
t
k
)
{
return
value
;
}
}
)
;
for
(
value
of
[
true
false
0
"
something
"
{
}
]
)
{
assert
.
sameValue
(
Reflect
.
deleteProperty
(
proxy
"
q
"
)
!
!
value
)
;
}
proxy
=
new
Proxy
(
{
}
{
deleteProperty
(
t
k
)
{
throw
"
vase
"
;
}
}
)
;
assertThrowsValue
(
(
)
=
>
Reflect
.
deleteProperty
(
proxy
"
prop
"
)
"
vase
"
)
;
proxy
=
new
Proxy
(
Object
.
freeze
(
{
prop
:
1
}
)
{
deleteProperty
(
t
k
)
{
return
true
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
deleteProperty
(
proxy
"
prop
"
)
TypeError
)
;
function
f
(
x
y
z
)
{
assert
.
sameValue
(
Reflect
.
deleteProperty
(
arguments
"
0
"
)
true
)
;
arguments
.
x
=
33
;
return
x
;
}
assert
.
sameValue
(
f
(
17
19
23
)
17
)
;
function
testFrozenArguments
(
)
{
Object
.
freeze
(
arguments
)
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
arguments
"
0
"
)
false
)
;
assert
.
sameValue
(
arguments
[
0
]
"
zero
"
)
;
assert
.
sameValue
(
arguments
[
1
]
"
one
"
)
;
}
testFrozenArguments
(
"
zero
"
"
one
"
)
;
reportCompare
(
0
0
)
;
