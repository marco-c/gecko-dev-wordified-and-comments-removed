var
someObjects
=
[
{
}
{
a
:
"
a
"
}
[
0
1
]
new
Uint8Array
(
64
)
Object
(
Symbol
(
"
table
"
)
)
new
Proxy
(
{
}
{
}
)
]
;
if
(
typeof
SharedArrayBuffer
!
=
"
undefined
"
)
someObjects
.
push
(
new
Uint8Array
(
new
SharedArrayBuffer
(
64
)
)
)
;
for
(
var
obj
of
someObjects
)
{
assert
.
sameValue
(
Reflect
.
isExtensible
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
preventExtensions
(
obj
)
true
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
obj
)
false
)
;
}
var
arr
=
[
0
1
2
3
]
;
Object
.
defineProperty
(
arr
"
length
"
{
writable
:
false
}
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
arr
)
true
)
;
for
(
var
ext
of
[
true
false
]
)
{
var
obj
=
{
}
;
if
(
!
ext
)
Object
.
preventExtensions
(
obj
)
;
var
proxy
=
new
Proxy
(
obj
{
isExtensible
(
)
{
return
ext
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
isExtensible
(
proxy
)
ext
)
;
}
proxy
=
new
Proxy
(
{
}
{
isExtensible
(
)
{
throw
"
oops
"
;
}
}
)
;
assertThrowsValue
(
(
)
=
>
Reflect
.
isExtensible
(
proxy
)
"
oops
"
)
;
proxy
=
new
Proxy
(
{
}
{
isExtensible
(
)
{
return
false
;
}
}
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
isExtensible
(
proxy
)
TypeError
)
;
reportCompare
(
0
0
)
;
