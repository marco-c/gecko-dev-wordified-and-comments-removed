var
x
=
{
p
:
1
}
;
assert
.
sameValue
(
Reflect
.
get
(
x
"
p
"
)
1
)
;
assert
.
sameValue
(
Reflect
.
get
(
x
"
toString
"
)
Object
.
prototype
.
toString
)
;
assert
.
sameValue
(
Reflect
.
get
(
x
"
missing
"
)
undefined
)
;
assert
.
sameValue
(
Reflect
.
get
(
[
]
700
)
undefined
)
;
assert
.
sameValue
(
Reflect
.
get
(
[
"
zero
"
"
one
"
]
1
)
"
one
"
)
;
assert
.
sameValue
(
Reflect
.
get
(
new
Uint8Array
(
[
0
1
2
3
4
5
6
7
]
)
7
)
7
)
;
var
f
=
new
Float64Array
(
[
NaN
]
)
;
var
u
=
new
Uint32Array
(
f
.
buffer
)
;
u
[
0
]
+
+
;
u
[
1
]
+
+
;
assert
.
sameValue
(
f
[
0
]
NaN
)
;
assert
.
sameValue
(
Reflect
.
get
(
f
0
)
NaN
)
;
assert
.
sameValue
(
Reflect
.
get
(
new
Proxy
(
x
{
}
)
"
p
"
)
1
)
;
var
obj
=
new
Proxy
(
x
{
get
(
t
k
r
)
{
return
k
+
"
ful
"
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
mood
"
)
"
moodful
"
)
;
assertThrowsInstanceOf
(
(
)
=
>
Reflect
.
get
(
obj
Symbol
(
)
)
TypeError
)
;
obj
=
{
set
name
(
x
)
{
}
}
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
name
"
)
undefined
)
;
obj
=
{
get
x
(
)
{
return
this
;
}
}
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
x
"
Math
)
Math
)
;
assert
.
sameValue
(
Reflect
.
get
(
Object
.
create
(
obj
)
"
x
"
JSON
)
JSON
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
x
"
)
obj
)
;
obj
=
new
Proxy
(
{
}
{
get
(
t
k
r
)
{
assert
.
sameValue
(
k
"
itself
"
)
;
return
r
;
}
}
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
itself
"
)
obj
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
itself
"
Math
)
Math
)
;
assert
.
sameValue
(
Reflect
.
get
(
Object
.
create
(
obj
)
"
itself
"
Math
)
Math
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
"
itself
"
37
.
2
)
37
.
2
)
;
reportCompare
(
0
0
)
;
