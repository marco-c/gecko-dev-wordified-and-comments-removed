var
keys
=
[
{
value
:
null
expected
:
"
null
"
}
{
value
:
undefined
expected
:
"
undefined
"
}
{
value
:
true
expected
:
"
true
"
}
{
value
:
42
expected
:
"
42
"
}
{
value
:
"
string
"
}
{
value
:
"
"
}
{
value
:
"
string
with
\
0
"
}
{
value
:
new
String
(
"
ok
"
)
expected
:
"
ok
"
}
{
value
:
Symbol
(
"
sym
"
)
}
{
value
:
Symbol
.
iterator
}
{
value
:
Object
(
Symbol
.
for
(
"
comet
"
)
)
expected
:
Symbol
.
for
(
"
comet
"
)
}
{
value
:
{
toString
(
)
{
return
"
key
"
;
}
valueOf
(
)
{
return
"
bad
"
;
}
}
expected
:
"
key
"
}
{
value
:
{
toString
:
undefined
valueOf
(
)
{
return
"
fallback
"
;
}
}
expected
:
"
fallback
"
}
{
value
:
{
[
Symbol
.
toPrimitive
]
(
hint
)
{
return
hint
;
}
}
expected
:
"
string
"
}
{
value
:
{
[
Symbol
.
toPrimitive
]
(
hint
)
{
return
Symbol
.
for
(
hint
)
;
}
}
expected
:
Symbol
.
for
(
"
string
"
)
}
]
;
for
(
var
{
value
expected
}
of
keys
)
{
if
(
expected
=
=
=
undefined
)
expected
=
value
;
var
obj
=
{
}
;
assert
.
sameValue
(
Reflect
.
defineProperty
(
obj
value
{
value
:
1
configurable
:
true
}
)
true
)
;
assert
.
deepEqual
(
Reflect
.
ownKeys
(
obj
)
[
expected
]
)
;
assert
.
deepEqual
(
Reflect
.
getOwnPropertyDescriptor
(
obj
value
)
{
value
:
1
writable
:
false
enumerable
:
false
configurable
:
true
}
)
;
assert
.
sameValue
(
Reflect
.
deleteProperty
(
obj
value
)
true
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
value
)
false
)
;
assert
.
sameValue
(
Reflect
.
set
(
obj
value
113
)
true
)
;
assert
.
sameValue
(
obj
[
expected
]
113
)
;
assert
.
sameValue
(
Reflect
.
has
(
obj
value
)
true
)
;
assert
.
sameValue
(
Reflect
.
get
(
obj
value
)
113
)
;
}
var
exc
=
{
}
;
var
badKey
=
{
toString
(
)
{
throw
exc
;
}
}
;
var
methodNames
=
[
"
defineProperty
"
"
deleteProperty
"
"
has
"
"
get
"
"
getOwnPropertyDescriptor
"
"
set
"
]
;
for
(
var
name
of
methodNames
)
{
assertThrowsValue
(
(
)
=
>
Reflect
[
name
]
(
{
}
badKey
)
exc
)
;
}
reportCompare
(
0
0
)
;
