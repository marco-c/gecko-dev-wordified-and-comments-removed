var
roundTo
=
{
smallestUnit
:
"
day
"
}
;
var
roundMeDown
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
10
-
29T11
:
29
:
59
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
assert
.
sameValue
(
{
roundMeDown
.
round
(
roundTo
)
}
"
2000
-
10
-
29T00
:
00
:
00
-
07
:
00
[
America
/
Vancouver
]
"
)
;
var
roundMeUp
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
10
-
29T11
:
30
:
01
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
assert
.
sameValue
(
{
roundMeUp
.
round
(
roundTo
)
}
"
2000
-
10
-
30T00
:
00
:
00
-
08
:
00
[
America
/
Vancouver
]
"
)
;
var
roundTo
=
{
smallestUnit
:
"
day
"
}
;
var
roundMeDown
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
02T12
:
29
:
59
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
assert
.
sameValue
(
{
roundMeDown
.
round
(
roundTo
)
}
"
2000
-
04
-
02T00
:
00
:
00
-
08
:
00
[
America
/
Vancouver
]
"
)
;
var
roundMeUp
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
02T12
:
30
:
01
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
assert
.
sameValue
(
{
roundMeUp
.
round
(
roundTo
)
}
"
2000
-
04
-
03T00
:
00
:
00
-
07
:
00
[
America
/
Vancouver
]
"
)
;
var
almostSkipped
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
02T01
:
59
:
59
.
999999999
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
rounded
=
almostSkipped
.
round
(
{
smallestUnit
:
"
microsecond
"
roundingMode
:
"
halfExpand
"
}
)
;
assert
.
sameValue
(
{
rounded
}
"
2000
-
04
-
02T03
:
00
:
00
-
07
:
00
[
America
/
Vancouver
]
"
)
;
assert
.
sameValue
(
rounded
.
epochNanoseconds
-
almostSkipped
.
epochNanoseconds
1n
)
;
reportCompare
(
0
0
)
;
