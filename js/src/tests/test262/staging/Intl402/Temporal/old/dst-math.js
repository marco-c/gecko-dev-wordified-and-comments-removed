var
hourBeforeDstStart
=
new
Temporal
.
PlainDateTime
(
2000
4
2
1
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
dayBeforeDstStart
=
new
Temporal
.
PlainDateTime
(
2000
4
1
2
30
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
added
=
hourBeforeDstStart
.
add
(
{
hours
:
1
}
)
;
assert
.
sameValue
(
added
.
hour
3
)
;
var
diff
=
hourBeforeDstStart
.
until
(
added
{
largestUnit
:
"
hours
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
PT1H
"
)
;
assert
.
sameValue
(
{
diff
}
{
added
.
since
(
hourBeforeDstStart
{
largestUnit
:
"
hours
"
}
)
}
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
hourBeforeDstStart
}
)
;
var
added
=
hourBeforeDstStart
.
add
(
{
hours
:
2
}
)
;
assert
.
sameValue
(
added
.
hour
4
)
;
var
diff
=
hourBeforeDstStart
.
until
(
added
{
largestUnit
:
"
hours
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
PT2H
"
)
;
assert
.
sameValue
(
{
diff
}
{
added
.
since
(
hourBeforeDstStart
{
largestUnit
:
"
hours
"
}
)
}
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
hourBeforeDstStart
}
)
;
var
added
=
hourBeforeDstStart
.
add
(
{
hours
:
1
minutes
:
30
}
)
;
assert
.
sameValue
(
added
.
hour
3
)
;
assert
.
sameValue
(
added
.
minute
30
)
;
var
diff
=
hourBeforeDstStart
.
until
(
added
{
largestUnit
:
"
hours
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
PT1H30M
"
)
;
assert
.
sameValue
(
{
diff
}
{
added
.
since
(
hourBeforeDstStart
{
largestUnit
:
"
hours
"
}
)
}
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
hourBeforeDstStart
}
)
;
var
start
=
new
Temporal
.
PlainDateTime
(
2011
12
29
22
)
.
toZonedDateTime
(
"
Pacific
/
Apia
"
)
;
var
added
=
start
.
add
(
{
days
:
1
hours
:
1
}
)
;
assert
.
sameValue
(
added
.
day
31
)
;
assert
.
sameValue
(
added
.
hour
23
)
;
assert
.
sameValue
(
added
.
minute
0
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P2DT1H
"
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
start
}
)
;
var
start
=
new
Temporal
.
PlainDateTime
(
2011
12
31
23
)
.
toZonedDateTime
(
"
Pacific
/
Apia
"
)
;
var
skipped
=
start
.
subtract
(
{
days
:
1
hours
:
1
}
)
;
assert
.
sameValue
(
skipped
.
day
31
)
;
assert
.
sameValue
(
skipped
.
hour
22
)
;
assert
.
sameValue
(
skipped
.
minute
0
)
;
var
end
=
start
.
subtract
(
{
days
:
2
hours
:
1
}
)
;
assert
.
sameValue
(
end
.
day
29
)
;
assert
.
sameValue
(
end
.
hour
22
)
;
assert
.
sameValue
(
end
.
minute
0
)
;
var
diff
=
end
.
since
(
start
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2DT1H
"
)
;
var
undo
=
start
.
add
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
end
}
)
;
var
start
=
dayBeforeDstStart
.
add
(
{
hours
:
1
}
)
;
var
added
=
start
.
add
(
{
days
:
1
}
)
;
assert
.
sameValue
(
added
.
day
2
)
;
assert
.
sameValue
(
added
.
hour
3
)
;
assert
.
sameValue
(
added
.
minute
30
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1D
"
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
start
}
)
;
var
added
=
dayBeforeDstStart
.
add
(
{
days
:
1
}
)
;
assert
.
sameValue
(
added
.
day
2
)
;
assert
.
sameValue
(
added
.
hour
3
)
;
assert
.
sameValue
(
added
.
minute
30
)
;
var
diff
=
dayBeforeDstStart
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1D
"
)
;
var
undo
=
dayBeforeDstStart
.
add
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
added
}
)
;
var
start
=
dayBeforeDstStart
.
add
(
{
hours
:
23
}
)
;
var
added
=
start
.
add
(
{
hours
:
2
}
)
;
assert
.
sameValue
(
added
.
day
2
)
;
assert
.
sameValue
(
added
.
hour
4
)
;
assert
.
sameValue
(
added
.
minute
30
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
PT2H
"
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
start
}
)
;
var
start
=
hourBeforeDstStart
.
subtract
(
{
days
:
1
}
)
.
add
(
{
hours
:
1
}
)
;
var
added
=
start
.
add
(
{
days
:
1
}
)
;
assert
.
sameValue
(
added
.
day
2
)
;
assert
.
sameValue
(
added
.
hour
3
)
;
assert
.
sameValue
(
added
.
minute
0
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1D
"
)
;
var
undo
=
start
.
add
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
added
}
)
;
var
start
=
hourBeforeDstStart
;
var
added
=
start
.
add
(
{
hours
:
24
}
)
;
assert
.
sameValue
(
added
.
day
3
)
;
assert
.
sameValue
(
added
.
hour
2
)
;
assert
.
sameValue
(
added
.
minute
0
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1DT1H
"
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
start
}
)
;
var
start
=
hourBeforeDstStart
.
subtract
(
{
hours
:
1
}
)
;
var
added
=
start
.
add
(
{
hours
:
24
}
)
;
assert
.
sameValue
(
added
.
day
3
)
;
assert
.
sameValue
(
added
.
hour
1
)
;
assert
.
sameValue
(
added
.
minute
0
)
;
var
diff
=
start
.
until
(
added
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1DT1H
"
)
;
var
undo
=
added
.
subtract
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
start
}
)
;
var
start
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
10
-
27T01
:
45
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
end
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
10
-
30T01
:
15
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P2DT24H30M
"
)
;
var
undo
=
start
.
add
(
diff
)
;
assert
.
sameValue
(
{
undo
}
{
end
}
)
;
var
start
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
04T02
:
30
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
end
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
01T14
:
15
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
diff
=
start
.
until
(
end
{
smallestUnit
:
"
days
"
roundingMode
:
"
halfExpand
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P3D
"
)
;
var
diff
=
start
.
until
(
end
{
smallestUnit
:
"
days
"
roundingMode
:
"
ceil
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2D
"
)
;
var
diff
=
start
.
until
(
end
{
smallestUnit
:
"
days
"
roundingMode
:
"
trunc
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2D
"
)
;
var
diff
=
start
.
until
(
end
{
smallestUnit
:
"
days
"
roundingMode
:
"
floor
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P3D
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
halfExpand
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2DT12H
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
ceil
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2DT12H
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
trunc
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2DT12H
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
floor
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P2DT13H
"
)
;
var
start
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
01T02
:
30
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
end
=
Temporal
.
PlainDateTime
.
from
(
"
2000
-
04
-
02T03
:
15
"
)
.
toZonedDateTime
(
"
America
/
Vancouver
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
PT23H45M
"
)
;
var
end
=
Temporal
.
PlainDateTime
.
from
(
"
2011
-
12
-
31T05
:
00
"
)
.
toZonedDateTime
(
"
Pacific
/
Apia
"
)
;
var
start
=
Temporal
.
PlainDateTime
.
from
(
"
2011
-
12
-
28T10
:
00
"
)
.
toZonedDateTime
(
"
Pacific
/
Apia
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P1DT19H
"
)
;
var
start
=
Temporal
.
ZonedDateTime
.
from
(
"
2020
-
01
-
01T00
:
00
-
08
:
00
[
-
08
:
00
]
"
)
;
var
end
=
Temporal
.
ZonedDateTime
.
from
(
"
2020
-
01
-
03T23
:
59
-
08
:
00
[
-
08
:
00
]
"
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
halfExpand
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
P3D
"
)
;
var
start
=
Temporal
.
ZonedDateTime
.
from
(
"
2020
-
01
-
01T00
:
00
-
08
:
00
[
-
08
:
00
]
"
)
;
var
end
=
Temporal
.
ZonedDateTime
.
from
(
"
2020
-
01
-
03T23
:
59
-
08
:
00
[
-
08
:
00
]
"
)
;
var
diff
=
end
.
until
(
start
{
largestUnit
:
"
days
"
smallestUnit
:
"
hours
"
roundingMode
:
"
halfExpand
"
}
)
;
assert
.
sameValue
(
{
diff
}
"
-
P3D
"
)
;
var
stepsPerHour
=
2
;
var
minutesPerStep
=
60
/
stepsPerHour
;
var
hoursUntilEnd
=
26
;
var
startHourRange
=
3
;
for
(
var
i
=
0
;
i
<
startHourRange
*
stepsPerHour
;
i
+
+
)
{
var
start
=
hourBeforeDstStart
.
add
(
{
minutes
:
minutesPerStep
*
i
}
)
;
for
(
var
j
=
0
;
j
<
hoursUntilEnd
*
stepsPerHour
;
j
+
+
)
{
var
end
=
start
.
add
(
{
minutes
:
j
*
minutesPerStep
}
)
;
var
diff
=
start
.
until
(
end
{
largestUnit
:
"
days
"
}
)
;
var
expectedMinutes
=
minutesPerStep
*
(
j
%
stepsPerHour
)
;
assert
.
sameValue
(
diff
.
minutes
expectedMinutes
)
;
var
diff60
=
Math
.
floor
(
j
/
stepsPerHour
)
;
if
(
i
>
=
stepsPerHour
)
{
var
expectedDays
=
diff60
<
24
?
0
:
diff60
<
48
?
1
:
2
;
var
expectedHours
=
diff60
<
24
?
diff60
:
diff60
<
48
?
diff60
-
24
:
diff60
-
48
;
assert
.
sameValue
(
diff
.
hours
expectedHours
)
;
assert
.
sameValue
(
diff
.
days
expectedDays
)
;
}
else
{
var
expectedDays
=
diff60
<
23
?
0
:
diff60
<
47
?
1
:
2
;
var
expectedHours
=
diff60
<
23
?
diff60
:
diff60
<
47
?
diff60
-
23
:
diff60
-
47
;
assert
.
sameValue
(
diff
.
hours
expectedHours
)
;
assert
.
sameValue
(
diff
.
days
expectedDays
)
;
}
}
}
reportCompare
(
0
0
)
;
