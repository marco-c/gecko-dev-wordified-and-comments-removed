const
usDayPeriodSpace
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
timeStyle
:
"
short
"
}
)
.
formatToParts
(
0
)
.
find
(
(
part
i
parts
)
=
>
part
.
type
=
=
=
"
literal
"
&
&
parts
[
i
+
1
]
.
type
=
=
=
"
dayPeriod
"
)
?
.
value
|
|
"
"
;
function
maybeGetWeekdayOnlyFormat
(
)
{
const
fmt
=
new
Intl
.
DateTimeFormat
(
"
en
-
US
"
{
weekday
:
"
long
"
timeZone
:
"
Europe
/
Vienna
"
}
)
;
if
(
[
"
era
"
"
year
"
"
month
"
"
day
"
"
hour
"
"
minute
"
"
second
"
"
timeZoneName
"
]
.
some
(
(
prop
)
=
>
prop
in
fmt
.
resolvedOptions
(
)
)
)
{
return
null
;
}
return
fmt
;
}
var
datetime
=
Temporal
.
PlainDateTime
.
from
(
"
1976
-
11
-
18T15
:
23
:
30
"
)
;
assert
.
sameValue
(
{
datetime
.
toLocaleString
(
"
en
-
US
"
{
timeZone
:
"
America
/
New_York
"
}
)
}
11
/
18
/
1976
3
:
23
:
30
{
usDayPeriodSpace
}
PM
)
;
assert
.
sameValue
(
{
datetime
.
toLocaleString
(
"
de
-
AT
"
{
timeZone
:
"
Europe
/
Vienna
"
}
)
}
"
18
.
11
.
1976
15
:
23
:
30
"
)
;
var
fmt
=
maybeGetWeekdayOnlyFormat
(
)
;
if
(
fmt
)
assert
.
sameValue
(
fmt
.
format
(
datetime
)
"
Thursday
"
)
;
assert
.
sameValue
(
datetime
.
toLocaleString
(
"
en
-
US
"
{
timeZoneName
:
"
long
"
}
)
11
/
18
/
1976
3
:
23
:
30
{
usDayPeriodSpace
}
PM
)
;
var
dstStart
=
new
Temporal
.
PlainDateTime
(
2020
3
8
2
30
)
;
assert
.
sameValue
(
{
dstStart
.
toLocaleString
(
"
en
-
US
"
{
timeZone
:
"
America
/
Los_Angeles
"
}
)
}
3
/
8
/
2020
3
:
30
:
00
{
usDayPeriodSpace
}
AM
)
;
reportCompare
(
0
0
)
;
