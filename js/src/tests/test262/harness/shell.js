function
arrayContains
(
array
subArray
)
{
var
found
;
for
(
var
i
=
0
;
i
<
subArray
.
length
;
i
+
+
)
{
found
=
false
;
for
(
var
j
=
0
;
j
<
array
.
length
;
j
+
+
)
{
if
(
subArray
[
i
]
=
=
=
array
[
j
]
)
{
found
=
true
;
break
;
}
}
if
(
!
found
)
{
return
false
;
}
}
return
true
;
}
function
assertRelativeDateMs
(
date
expectedMs
)
{
var
actualMs
=
date
.
valueOf
(
)
;
var
localOffset
=
date
.
getTimezoneOffset
(
)
*
60000
;
if
(
actualMs
-
localOffset
!
=
=
expectedMs
)
{
ERROR
(
'
Expected
'
+
date
+
'
to
be
'
+
expectedMs
+
'
milliseconds
from
the
Unix
epoch
'
)
;
}
}
var
byteConversionValues
=
{
values
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
undefined
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
]
expected
:
{
Int8
:
[
127
-
128
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
1
0
1
0
1
0
1
0
1
0
0
0
0
]
Uint8
:
[
127
128
255
0
255
0
255
0
255
0
255
0
255
0
1
0
0
0
0
0
0
255
0
0
255
0
129
128
1
0
1
0
1
0
1
0
1
0
0
0
0
]
Uint8Clamped
:
[
127
128
255
255
255
255
255
255
255
255
255
255
255
255
1
0
0
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
255
0
0
]
Int16
:
[
127
128
32767
-
32768
-
1
0
255
256
-
1
0
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
1
0
-
255
-
256
1
0
1
0
0
0
0
]
Uint16
:
[
127
128
32767
32768
65535
0
255
256
65535
0
65535
0
65535
0
1
0
0
0
0
0
0
65535
0
0
65535
0
65409
65408
32769
32768
1
0
65281
65280
1
0
1
0
0
0
0
]
Int32
:
[
127
128
32767
32768
2147483647
-
2147483648
255
256
65535
65536
-
1
0
-
1
0
1
0
0
0
0
0
0
-
1
0
0
-
1
0
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
1
0
0
0
0
]
Uint32
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
0
4294967295
0
1
0
0
0
0
0
0
4294967295
0
0
4294967295
0
4294967169
4294967168
4294934529
4294934528
2147483649
2147483648
4294967041
4294967040
4294901761
4294901760
1
0
0
0
0
]
Float32
:
[
127
128
32767
32768
2147483648
2147483648
255
256
65535
65536
4294967296
4294967296
9007199254740992
9007199254740992
1
.
100000023841858
0
.
10000000149011612
0
.
5
0
.
5
0
.
6000000238418579
0
.
699999988079071
NaN
-
1
-
0
-
0
.
10000000149011612
-
1
.
100000023841858
NaN
-
127
-
128
-
32767
-
32768
-
2147483648
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967296
-
4294967296
Infinity
-
Infinity
0
]
Float64
:
[
127
128
32767
32768
2147483647
2147483648
255
256
65535
65536
4294967295
4294967296
9007199254740991
9007199254740992
1
.
1
0
.
1
0
.
5
0
.
50000001
0
.
6
0
.
7
NaN
-
1
-
0
-
0
.
1
-
1
.
1
NaN
-
127
-
128
-
32767
-
32768
-
2147483647
-
2147483648
-
255
-
256
-
65535
-
65536
-
4294967295
-
4294967296
Infinity
-
Infinity
0
]
}
}
;
var
date_1899_end
=
-
2208988800001
;
var
date_1900_start
=
-
2208988800000
;
var
date_1969_end
=
-
1
;
var
date_1970_start
=
0
;
var
date_1999_end
=
946684799999
;
var
date_2000_start
=
946684800000
;
var
date_2099_end
=
4102444799999
;
var
date_2100_start
=
4102444800000
;
var
start_of_time
=
-
8
.
64e15
;
var
end_of_time
=
8
.
64e15
;
function
decimalToHexString
(
n
)
{
var
hex
=
"
0123456789ABCDEF
"
;
n
>
>
>
=
0
;
var
s
=
"
"
;
while
(
n
)
{
s
=
hex
[
n
&
0xf
]
+
s
;
n
>
>
>
=
4
;
}
while
(
s
.
length
<
4
)
{
s
=
"
0
"
+
s
;
}
return
s
;
}
function
decimalToPercentHexString
(
n
)
{
var
hex
=
"
0123456789ABCDEF
"
;
return
"
%
"
+
hex
[
(
n
>
>
4
)
&
0xf
]
+
hex
[
n
&
0xf
]
;
}
function
DETACHBUFFER
(
buffer
)
{
if
(
!
262
|
|
typeof
262
.
detachArrayBuffer
!
=
=
"
function
"
)
{
throw
new
Test262Error
(
"
No
method
available
to
detach
an
ArrayBuffer
"
)
;
}
262
.
detachArrayBuffer
(
buffer
)
;
}
var
__globalObject
=
Function
(
"
return
this
;
"
)
(
)
;
function
fnGlobalObject
(
)
{
return
__globalObject
;
}
function
isConstructor
(
f
)
{
try
{
Reflect
.
construct
(
function
(
)
{
}
[
]
f
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
var
NaNs
=
[
NaN
Number
.
NaN
NaN
*
0
0
/
0
Infinity
/
Infinity
-
(
0
/
0
)
Math
.
pow
(
-
1
0
.
5
)
-
Math
.
pow
(
-
1
0
.
5
)
Number
(
"
Not
-
a
-
Number
"
)
]
;
const
NATIVE_FUNCTION_RE
=
/
\
bfunction
\
b
[
\
s
\
S
]
*
\
(
[
\
s
\
S
]
*
\
)
[
\
s
\
S
]
*
\
{
[
\
s
\
S
]
*
\
[
[
\
s
\
S
]
*
\
bnative
\
b
[
\
s
\
S
]
+
\
bcode
\
b
[
\
s
\
S
]
*
\
]
[
\
s
\
S
]
*
\
}
/
;
const
assertToStringOrNativeFunction
=
function
(
fn
expected
)
{
const
actual
=
"
"
+
fn
;
try
{
assert
.
sameValue
(
actual
expected
)
;
}
catch
(
unused
)
{
assertNativeFunction
(
fn
expected
)
;
}
}
;
const
assertNativeFunction
=
function
(
fn
special
)
{
const
actual
=
"
"
+
fn
;
assert
(
NATIVE_FUNCTION_RE
.
test
(
actual
)
"
Conforms
to
NativeFunction
Syntax
:
'
"
+
actual
+
"
'
.
"
+
(
special
?
"
(
"
+
special
+
"
)
"
:
"
"
)
)
;
}
;
function
checkSequence
(
arr
message
)
{
arr
.
forEach
(
function
(
e
i
)
{
if
(
e
!
=
=
(
i
+
1
)
)
{
ERROR
(
(
message
?
message
:
"
Steps
in
unexpected
sequence
:
"
)
+
"
'
"
+
arr
.
join
(
'
'
)
+
"
'
"
)
;
}
}
)
;
return
true
;
}
function
allowProxyTraps
(
overrides
)
{
function
throwTest262Error
(
msg
)
{
return
function
(
)
{
throw
new
Test262Error
(
msg
)
;
}
;
}
if
(
!
overrides
)
{
overrides
=
{
}
;
}
return
{
getPrototypeOf
:
overrides
.
getPrototypeOf
|
|
throwTest262Error
(
'
[
[
GetPrototypeOf
]
]
trap
called
'
)
setPrototypeOf
:
overrides
.
setPrototypeOf
|
|
throwTest262Error
(
'
[
[
SetPrototypeOf
]
]
trap
called
'
)
isExtensible
:
overrides
.
isExtensible
|
|
throwTest262Error
(
'
[
[
IsExtensible
]
]
trap
called
'
)
preventExtensions
:
overrides
.
preventExtensions
|
|
throwTest262Error
(
'
[
[
PreventExtensions
]
]
trap
called
'
)
getOwnPropertyDescriptor
:
overrides
.
getOwnPropertyDescriptor
|
|
throwTest262Error
(
'
[
[
GetOwnProperty
]
]
trap
called
'
)
has
:
overrides
.
has
|
|
throwTest262Error
(
'
[
[
HasProperty
]
]
trap
called
'
)
get
:
overrides
.
get
|
|
throwTest262Error
(
'
[
[
Get
]
]
trap
called
'
)
set
:
overrides
.
set
|
|
throwTest262Error
(
'
[
[
Set
]
]
trap
called
'
)
deleteProperty
:
overrides
.
deleteProperty
|
|
throwTest262Error
(
'
[
[
Delete
]
]
trap
called
'
)
defineProperty
:
overrides
.
defineProperty
|
|
throwTest262Error
(
'
[
[
DefineOwnProperty
]
]
trap
called
'
)
enumerate
:
throwTest262Error
(
'
[
[
Enumerate
]
]
trap
called
:
this
trap
has
been
removed
'
)
ownKeys
:
overrides
.
ownKeys
|
|
throwTest262Error
(
'
[
[
OwnPropertyKeys
]
]
trap
called
'
)
apply
:
overrides
.
apply
|
|
throwTest262Error
(
'
[
[
Call
]
]
trap
called
'
)
construct
:
overrides
.
construct
|
|
throwTest262Error
(
'
[
[
Construct
]
]
trap
called
'
)
}
;
}
var
MAX_ITERATIONS
=
100000
;
var
typedArrayConstructors
=
[
Float64Array
Float32Array
Int32Array
Int16Array
Int8Array
Uint32Array
Uint16Array
Uint8Array
Uint8ClampedArray
]
;
var
floatArrayConstructors
=
typedArrayConstructors
.
slice
(
0
2
)
;
var
intArrayConstructors
=
typedArrayConstructors
.
slice
(
2
7
)
;
var
TypedArray
=
Object
.
getPrototypeOf
(
Int8Array
)
;
function
testWithTypedArrayConstructors
(
f
selected
)
{
var
constructors
=
selected
|
|
typedArrayConstructors
;
for
(
var
i
=
0
;
i
<
constructors
.
length
;
+
+
i
)
{
var
constructor
=
constructors
[
i
]
;
try
{
f
(
constructor
)
;
}
catch
(
e
)
{
e
.
message
+
=
"
(
Testing
with
"
+
constructor
.
name
+
"
.
)
"
;
throw
e
;
}
}
}
function
testTypedArrayConversions
(
byteConversionValues
fn
)
{
var
values
=
byteConversionValues
.
values
;
var
expected
=
byteConversionValues
.
expected
;
testWithTypedArrayConstructors
(
function
(
TA
)
{
var
name
=
TA
.
name
.
slice
(
0
-
5
)
;
return
values
.
forEach
(
function
(
value
index
)
{
var
exp
=
expected
[
name
]
[
index
]
;
var
initial
=
0
;
if
(
exp
=
=
=
0
)
{
initial
=
1
;
}
fn
(
TA
value
exp
initial
)
;
}
)
;
}
)
;
}
if
(
Promise
=
=
=
undefined
&
&
this
.
setTimeout
=
=
=
undefined
)
{
if
(
/
\
DONE
(
)
/
.
test
(
code
)
)
ERROR
(
"
Async
test
capability
is
not
supported
in
your
test
environment
"
)
;
}
if
(
Promise
!
=
=
undefined
&
&
this
.
setTimeout
=
=
=
undefined
)
{
(
function
(
that
)
{
that
.
setTimeout
=
function
(
callback
delay
)
{
var
p
=
Promise
.
resolve
(
)
;
var
start
=
Date
.
now
(
)
;
var
end
=
start
+
delay
;
function
check
(
)
{
var
timeLeft
=
end
-
Date
.
now
(
)
;
if
(
timeLeft
>
0
)
p
.
then
(
check
)
;
else
callback
(
)
;
}
p
.
then
(
check
)
;
}
}
)
(
this
)
;
}
