[
"
input
"
"
_
"
]
.
forEach
(
function
(
property
)
{
const
desc
=
Object
.
getOwnPropertyDescriptor
(
RegExp
property
)
;
[
"
get
"
"
set
"
]
.
forEach
(
function
(
accessor
)
{
const
messagePrefix
=
"
RegExp
.
"
+
property
+
"
"
+
accessor
+
"
ter
"
;
assert
.
sameValue
(
typeof
desc
[
accessor
]
"
function
"
messagePrefix
)
;
assert
.
throws
(
TypeError
function
(
)
{
desc
[
accessor
]
(
)
;
}
messagePrefix
+
"
throws
for
property
descriptor
receiver
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
desc
[
accessor
]
.
call
(
/
/
)
;
}
messagePrefix
+
"
throws
for
RegExp
instance
receiver
"
)
;
assert
.
throws
(
TypeError
function
(
)
{
desc
[
accessor
]
.
call
(
RegExp
.
prototype
)
;
}
messagePrefix
+
"
throws
for
%
RegExp
.
prototype
%
receiver
"
)
;
[
undefined
null
{
}
true
false
0
1
"
string
"
]
.
forEach
(
function
(
value
)
{
assert
.
throws
(
TypeError
function
(
)
{
desc
[
accessor
]
.
call
(
value
)
;
}
messagePrefix
+
'
throws
for
primitive
"
'
+
value
+
'
"
receiver
'
)
;
}
)
;
}
)
;
}
)
;
reportCompare
(
0
0
)
;
