var
SECTION
=
"
proto_12
"
;
var
VERSION
=
"
JS1_3
"
;
var
TITLE
=
"
No
Multiple
Inheritance
"
;
writeHeaderToLog
(
SECTION
+
"
"
+
TITLE
)
;
function
Employee
(
name
dept
)
{
this
.
name
=
name
|
|
"
"
;
this
.
dept
=
dept
|
|
"
general
"
;
this
.
id
=
idCounter
+
+
;
}
function
Manager
(
)
{
this
.
reports
=
[
]
;
}
Manager
.
prototype
=
new
Employee
(
)
;
function
WorkerBee
(
name
dept
projs
)
{
this
.
base
=
Employee
;
this
.
base
(
name
dept
)
this
.
projects
=
projs
|
|
new
Array
(
)
;
}
WorkerBee
.
prototype
=
new
Employee
(
)
;
function
SalesPerson
(
)
{
this
.
dept
=
"
sales
"
;
this
.
quota
=
100
;
}
SalesPerson
.
prototype
=
new
WorkerBee
(
)
;
function
Hobbyist
(
hobby
)
{
this
.
hobby
=
hobby
|
|
"
yodeling
"
;
}
function
Engineer
(
name
projs
machine
hobby
)
{
this
.
base1
=
WorkerBee
;
this
.
base1
(
name
"
engineering
"
projs
)
this
.
base2
=
Hobbyist
;
this
.
base2
(
hobby
)
;
this
.
projects
=
projs
|
|
new
Array
(
)
;
this
.
machine
=
machine
|
|
"
"
;
}
Engineer
.
prototype
=
new
WorkerBee
(
)
;
var
idCounter
=
1
;
var
les
=
new
Engineer
(
"
Morris
Les
"
new
Array
(
"
JavaScript
"
)
"
indy
"
)
;
Hobbyist
.
prototype
.
equipment
=
[
"
horn
"
"
mountain
"
"
goat
"
]
;
new
TestCase
(
"
les
.
name
"
"
Morris
Les
"
les
.
name
)
;
new
TestCase
(
"
les
.
dept
"
"
engineering
"
les
.
dept
)
;
Array
.
prototype
.
getClass
=
Object
.
prototype
.
toString
;
new
TestCase
(
"
les
.
projects
.
getClass
(
)
"
"
[
object
Array
]
"
les
.
projects
.
getClass
(
)
)
;
new
TestCase
(
"
les
.
projects
[
0
]
"
"
JavaScript
"
les
.
projects
[
0
]
)
;
new
TestCase
(
"
les
.
machine
"
"
indy
"
les
.
machine
)
;
new
TestCase
(
"
les
.
hobby
"
"
yodeling
"
les
.
hobby
)
;
new
TestCase
(
"
les
.
equpment
"
void
0
les
.
equipment
)
;
test
(
)
;
