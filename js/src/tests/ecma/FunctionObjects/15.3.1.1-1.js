var
SECTION
=
"
15
.
3
.
1
.
1
-
1
"
;
var
VERSION
=
"
ECMA_1
"
;
var
TITLE
=
"
The
Function
Constructor
Called
as
a
Function
"
;
writeHeaderToLog
(
SECTION
+
"
"
+
TITLE
)
;
var
MyObject
=
Function
(
"
value
"
"
this
.
value
=
value
;
this
.
valueOf
=
Function
(
'
return
this
.
value
'
)
;
this
.
toString
=
Function
(
'
return
String
(
this
.
value
)
;
'
)
"
)
;
var
myfunc
=
Function
(
)
;
myfunc
.
toString
=
Object
.
prototype
.
toString
;
myfunc
.
toString
=
Object
.
prototype
.
toString
;
new
TestCase
(
"
myfunc
=
Function
(
)
;
myfunc
.
toString
=
Object
.
prototype
.
toString
;
myfunc
.
toString
(
)
"
"
[
object
Function
]
"
myfunc
.
toString
(
)
)
;
new
TestCase
(
"
myfunc
.
length
"
0
myfunc
.
length
)
;
new
TestCase
(
"
myfunc
.
prototype
.
toString
(
)
"
"
[
object
Object
]
"
myfunc
.
prototype
.
toString
(
)
)
;
new
TestCase
(
"
myfunc
.
prototype
.
constructor
"
myfunc
myfunc
.
prototype
.
constructor
)
;
new
TestCase
(
"
myfunc
.
arguments
"
null
myfunc
.
arguments
)
;
new
TestCase
(
"
var
OBJ
=
new
MyObject
(
true
)
;
OBJ
.
valueOf
(
)
"
true
eval
(
"
var
OBJ
=
new
MyObject
(
true
)
;
OBJ
.
valueOf
(
)
"
)
)
;
new
TestCase
(
"
OBJ
.
toString
(
)
"
"
true
"
OBJ
.
toString
(
)
)
;
new
TestCase
(
"
OBJ
.
toString
=
Object
.
prototype
.
toString
;
OBJ
.
toString
(
)
"
"
[
object
Object
]
"
eval
(
"
OBJ
.
toString
=
Object
.
prototype
.
toString
;
OBJ
.
toString
(
)
"
)
)
;
new
TestCase
(
"
MyObject
.
toString
=
Object
.
prototype
.
toString
;
MyObject
.
toString
(
)
"
"
[
object
Function
]
"
eval
(
"
MyObject
.
toString
=
Object
.
prototype
.
toString
;
MyObject
.
toString
(
)
"
)
)
;
new
TestCase
(
"
MyObject
.
length
"
1
MyObject
.
length
)
;
new
TestCase
(
"
MyObject
.
prototype
.
constructor
"
MyObject
MyObject
.
prototype
.
constructor
)
;
new
TestCase
(
"
MyObject
.
arguments
"
null
MyObject
.
arguments
)
;
test
(
)
;
