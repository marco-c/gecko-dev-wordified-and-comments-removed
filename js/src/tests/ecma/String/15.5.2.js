var
SECTION
=
"
15
.
5
.
2
"
;
var
VERSION
=
"
ECMA_1
"
;
var
TITLE
=
"
The
String
Constructor
"
;
writeHeaderToLog
(
SECTION
+
"
"
+
TITLE
)
;
new
TestCase
(
"
typeof
new
String
(
'
string
primitive
'
)
"
"
object
"
typeof
new
String
(
'
string
primitive
'
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
'
string
primitive
'
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
'
string
primitive
'
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
'
string
primitive
'
)
)
.
valueOf
(
)
"
'
string
primitive
'
(
new
String
(
'
string
primitive
'
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
'
string
primitive
'
)
)
.
substring
"
String
.
prototype
.
substring
(
new
String
(
'
string
primitive
'
)
)
.
substring
)
;
new
TestCase
(
"
typeof
new
String
(
void
0
)
"
"
object
"
typeof
new
String
(
void
0
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
void
0
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
void
0
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
void
0
)
)
.
valueOf
(
)
"
"
undefined
"
(
new
String
(
void
0
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
void
0
)
)
.
toString
"
String
.
prototype
.
toString
(
new
String
(
void
0
)
)
.
toString
)
;
new
TestCase
(
"
typeof
new
String
(
null
)
"
"
object
"
typeof
new
String
(
null
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
null
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
null
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
null
)
)
.
valueOf
(
)
"
"
null
"
(
new
String
(
null
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
null
)
)
.
valueOf
"
String
.
prototype
.
valueOf
(
new
String
(
null
)
)
.
valueOf
)
;
new
TestCase
(
"
typeof
new
String
(
true
)
"
"
object
"
typeof
new
String
(
true
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
true
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
true
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
true
)
)
.
valueOf
(
)
"
"
true
"
(
new
String
(
true
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
true
)
)
.
charAt
"
String
.
prototype
.
charAt
(
new
String
(
true
)
)
.
charAt
)
;
new
TestCase
(
"
typeof
new
String
(
false
)
"
"
object
"
typeof
new
String
(
false
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
false
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
false
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
false
)
)
.
valueOf
(
)
"
"
false
"
(
new
String
(
false
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
false
)
)
.
charCodeAt
"
String
.
prototype
.
charCodeAt
(
new
String
(
false
)
)
.
charCodeAt
)
;
new
TestCase
(
"
typeof
new
String
(
new
Boolean
(
true
)
)
"
"
object
"
typeof
new
String
(
new
Boolean
(
true
)
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
new
Boolean
(
true
)
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
new
Boolean
(
true
)
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
new
Boolean
(
true
)
)
)
.
valueOf
(
)
"
"
true
"
(
new
String
(
new
Boolean
(
true
)
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
new
Boolean
(
true
)
)
)
.
indexOf
"
String
.
prototype
.
indexOf
(
new
String
(
new
Boolean
(
true
)
)
)
.
indexOf
)
;
new
TestCase
(
"
typeof
new
String
(
)
"
"
object
"
typeof
new
String
(
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
)
)
.
valueOf
(
)
"
'
'
(
new
String
(
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
)
)
.
lastIndexOf
"
String
.
prototype
.
lastIndexOf
(
new
String
(
)
)
.
lastIndexOf
)
;
new
TestCase
(
"
typeof
new
String
(
'
'
)
"
"
object
"
typeof
new
String
(
'
'
)
)
;
new
TestCase
(
"
var
TESTSTRING
=
new
String
(
'
'
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
"
[
object
String
]
"
eval
(
"
var
TESTSTRING
=
new
String
(
'
'
)
;
TESTSTRING
.
toString
=
Object
.
prototype
.
toString
;
TESTSTRING
.
toString
(
)
"
)
)
;
new
TestCase
(
"
(
new
String
(
'
'
)
)
.
valueOf
(
)
"
'
'
(
new
String
(
'
'
)
)
.
valueOf
(
)
)
;
new
TestCase
(
"
(
new
String
(
'
'
)
)
.
split
"
String
.
prototype
.
split
(
new
String
(
'
'
)
)
.
split
)
;
test
(
)
;
