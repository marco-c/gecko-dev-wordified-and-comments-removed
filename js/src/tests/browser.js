(
function
initializeUtilityExports
(
global
parent
)
{
"
use
strict
"
;
var
Error
=
global
.
Error
;
var
String
=
global
.
String
;
var
GlobalEval
=
global
.
eval
;
var
ReflectApply
=
global
.
Reflect
.
apply
;
var
FunctionToString
=
global
.
Function
.
prototype
.
toString
;
var
ObjectDefineProperty
=
global
.
Object
.
defineProperty
;
var
ObjectGetOwnPropertyDescriptor
=
global
.
Object
.
getOwnPropertyDescriptor
;
var
Worker
=
global
.
Worker
;
var
Blob
=
global
.
Blob
;
var
URL
=
global
.
URL
;
var
document
=
global
.
document
;
var
documentAll
=
global
.
document
.
all
;
var
documentDocumentElement
=
global
.
document
.
documentElement
;
var
DocumentCreateElement
=
global
.
document
.
createElement
;
var
EventTargetPrototypeAddEventListener
=
global
.
EventTarget
.
prototype
.
addEventListener
;
var
HTMLElementPrototypeStyleSetter
=
ObjectGetOwnPropertyDescriptor
(
global
.
HTMLElement
.
prototype
"
style
"
)
.
set
;
var
HTMLIFramePrototypeContentWindowGetter
=
ObjectGetOwnPropertyDescriptor
(
global
.
HTMLIFrameElement
.
prototype
"
contentWindow
"
)
.
get
;
var
HTMLScriptElementTextSetter
=
ObjectGetOwnPropertyDescriptor
(
global
.
HTMLScriptElement
.
prototype
"
text
"
)
.
set
;
var
NodePrototypeAppendChild
=
global
.
Node
.
prototype
.
appendChild
;
var
NodePrototypeRemoveChild
=
global
.
Node
.
prototype
.
removeChild
;
var
{
get
:
WindowOnErrorGetter
set
:
WindowOnErrorSetter
}
=
ObjectGetOwnPropertyDescriptor
(
global
"
onerror
"
)
;
var
WorkerPrototypePostMessage
=
Worker
.
prototype
.
postMessage
;
var
URLCreateObjectURL
=
URL
.
createObjectURL
;
var
savedGlobalOnError
=
[
]
;
function
setGlobalOnError
(
newOnError
)
{
var
currentOnError
=
ReflectApply
(
WindowOnErrorGetter
global
[
]
)
;
ArrayPush
(
savedGlobalOnError
currentOnError
)
;
ReflectApply
(
WindowOnErrorSetter
global
[
newOnError
]
)
;
}
function
restoreGlobalOnError
(
)
{
var
previousOnError
=
ArrayPop
(
savedGlobalOnError
)
;
ReflectApply
(
WindowOnErrorSetter
global
[
previousOnError
]
)
;
}
function
ArrayPush
(
array
value
)
{
ReflectApply
(
ObjectDefineProperty
null
[
array
array
.
length
{
__proto__
:
null
value
writable
:
true
enumerable
:
true
configurable
:
true
}
]
)
;
}
function
ArrayPop
(
array
)
{
if
(
array
.
length
)
{
var
item
=
array
[
array
.
length
-
1
]
;
array
.
length
-
=
1
;
return
item
;
}
}
function
AppendChild
(
elt
kid
)
{
ReflectApply
(
NodePrototypeAppendChild
elt
[
kid
]
)
;
}
function
CreateElement
(
name
)
{
return
ReflectApply
(
DocumentCreateElement
document
[
name
]
)
;
}
function
RemoveChild
(
elt
kid
)
{
ReflectApply
(
NodePrototypeRemoveChild
elt
[
kid
]
)
;
}
function
CreateWorker
(
script
)
{
var
blob
=
new
Blob
(
[
script
]
{
__proto__
:
null
type
:
"
text
/
javascript
"
}
)
;
return
new
Worker
(
URLCreateObjectURL
(
blob
)
)
;
}
var
evaluate
=
global
.
evaluate
;
if
(
typeof
evaluate
!
=
=
"
function
"
)
{
evaluate
=
function
evaluate
(
code
)
{
if
(
typeof
code
!
=
=
"
string
"
)
throw
Error
(
"
Expected
string
argument
for
evaluate
(
)
"
)
;
return
GlobalEval
(
code
)
;
}
;
global
.
evaluate
=
evaluate
;
}
var
evaluateScript
=
global
.
evaluateScript
;
if
(
typeof
evaluateScript
!
=
=
"
function
"
)
{
evaluateScript
=
function
evaluateScript
(
code
)
{
code
=
String
(
code
)
;
var
script
=
CreateElement
(
"
script
"
)
;
var
hasUncaughtError
=
false
;
var
uncaughtError
;
var
eventOptions
=
{
__proto__
:
null
once
:
true
}
;
ReflectApply
(
EventTargetPrototypeAddEventListener
script
[
"
beforescriptexecute
"
function
(
)
{
setGlobalOnError
(
function
(
messageOrEvent
source
lineno
colno
error
)
{
hasUncaughtError
=
true
;
uncaughtError
=
error
;
return
true
;
}
)
;
}
eventOptions
]
)
;
ReflectApply
(
EventTargetPrototypeAddEventListener
script
[
"
afterscriptexecute
"
function
(
)
{
restoreGlobalOnError
(
)
;
}
eventOptions
]
)
;
ReflectApply
(
HTMLScriptElementTextSetter
script
[
code
]
)
;
AppendChild
(
documentDocumentElement
script
)
;
RemoveChild
(
documentDocumentElement
script
)
;
if
(
hasUncaughtError
)
throw
uncaughtError
;
}
;
global
.
evaluateScript
=
evaluateScript
;
}
var
newGlobal
=
global
.
newGlobal
;
if
(
typeof
newGlobal
!
=
=
"
function
"
)
{
newGlobal
=
parent
?
parent
.
newGlobal
:
function
newGlobal
(
)
{
var
iframe
=
CreateElement
(
"
iframe
"
)
;
AppendChild
(
documentDocumentElement
iframe
)
;
var
win
=
ReflectApply
(
HTMLIFramePrototypeContentWindowGetter
iframe
[
]
)
;
ReflectApply
(
HTMLElementPrototypeStyleSetter
iframe
[
"
display
:
none
"
]
)
;
var
initFunction
=
ReflectApply
(
FunctionToString
initializeUtilityExports
[
]
)
;
win
.
Function
(
"
parent
"
initFunction
+
"
;
initializeUtilityExports
(
this
parent
)
;
"
)
(
global
)
;
return
win
;
}
;
global
.
newGlobal
=
newGlobal
;
}
var
detachArrayBuffer
=
global
.
detachArrayBuffer
;
if
(
typeof
detachArrayBuffer
!
=
=
"
function
"
)
{
var
worker
=
null
;
detachArrayBuffer
=
function
detachArrayBuffer
(
arrayBuffer
)
{
if
(
worker
=
=
=
null
)
{
worker
=
CreateWorker
(
"
/
*
black
hole
*
/
"
)
;
}
ReflectApply
(
WorkerPrototypePostMessage
worker
[
"
detach
"
[
arrayBuffer
]
]
)
;
}
;
global
.
detachArrayBuffer
=
detachArrayBuffer
;
}
var
createIsHTMLDDA
=
global
.
createIsHTMLDDA
;
if
(
typeof
createIsHTMLDDA
!
=
=
"
function
"
)
{
createIsHTMLDDA
=
function
(
)
{
return
documentAll
;
}
;
global
.
createIsHTMLDDA
=
createIsHTMLDDA
;
}
}
)
(
this
)
;
(
function
(
global
)
{
"
use
strict
"
;
var
undefined
;
var
Error
=
global
.
Error
;
var
Number
=
global
.
Number
;
var
Object
=
global
.
Object
;
var
String
=
global
.
String
;
var
decodeURIComponent
=
global
.
decodeURIComponent
;
var
ReflectApply
=
global
.
Reflect
.
apply
;
var
ObjectDefineProperty
=
Object
.
defineProperty
;
var
ObjectPrototypeHasOwnProperty
=
Object
.
prototype
.
hasOwnProperty
;
var
ObjectPrototypeIsPrototypeOf
=
Object
.
prototype
.
isPrototypeOf
;
var
ObjectGetOwnPropertyDescriptor
=
Object
.
getOwnPropertyDescriptor
;
var
window
=
global
.
window
;
var
document
=
global
.
document
;
var
documentDocumentElement
=
document
.
documentElement
;
var
DocumentCreateElement
=
document
.
createElement
;
var
ElementSetClassName
=
ObjectGetOwnPropertyDescriptor
(
global
.
Element
.
prototype
"
className
"
)
.
set
;
var
NodePrototypeAppendChild
=
global
.
Node
.
prototype
.
appendChild
;
var
NodePrototypeTextContentSetter
=
ObjectGetOwnPropertyDescriptor
(
global
.
Node
.
prototype
"
textContent
"
)
.
set
;
var
setTimeout
=
global
.
setTimeout
;
var
dump
=
global
.
dump
;
var
gczeal
=
global
.
gczeal
;
var
print
=
global
.
print
;
var
reportFailure
=
global
.
reportFailure
;
var
TestCase
=
global
.
TestCase
;
var
SpecialPowers
=
global
.
SpecialPowers
;
var
SpecialPowersCu
=
SpecialPowers
.
Cu
;
var
SpecialPowersForceGC
=
SpecialPowers
.
forceGC
;
var
printOutputContainer
=
global
.
document
.
getElementById
(
"
jsreftest
-
print
-
output
-
container
"
)
;
function
ArrayPush
(
array
value
)
{
ReflectApply
(
ObjectDefineProperty
null
[
array
array
.
length
{
__proto__
:
null
value
writable
:
true
enumerable
:
true
configurable
:
true
}
]
)
;
}
function
ArrayPop
(
array
)
{
if
(
array
.
length
)
{
var
item
=
array
[
array
.
length
-
1
]
;
array
.
length
-
=
1
;
return
item
;
}
}
function
HasOwnProperty
(
object
property
)
{
return
ReflectApply
(
ObjectPrototypeHasOwnProperty
object
[
property
]
)
;
}
function
AppendChild
(
elt
kid
)
{
ReflectApply
(
NodePrototypeAppendChild
elt
[
kid
]
)
;
}
function
CreateElement
(
name
)
{
return
ReflectApply
(
DocumentCreateElement
document
[
name
]
)
;
}
function
SetTextContent
(
element
text
)
{
ReflectApply
(
NodePrototypeTextContentSetter
element
[
text
]
)
;
}
var
currentOptions
;
function
browserOptionsClear
(
)
{
for
(
var
optionName
in
currentOptions
)
{
delete
currentOptions
[
optionName
]
;
SpecialPowersCu
[
optionName
]
=
false
;
}
}
function
AddPrintOutput
(
s
)
{
var
msgDiv
=
CreateElement
(
"
div
"
)
;
SetTextContent
(
msgDiv
s
)
;
AppendChild
(
printOutputContainer
msgDiv
)
;
}
global
.
AddPrintOutput
=
AddPrintOutput
;
function
writeHeaderToLog
(
string
)
{
string
=
String
(
string
)
;
dump
(
string
+
"
\
n
"
)
;
var
h2
=
CreateElement
(
"
h2
"
)
;
SetTextContent
(
h2
string
)
;
AppendChild
(
printOutputContainer
h2
)
;
}
global
.
writeHeaderToLog
=
writeHeaderToLog
;
var
expectedError
;
window
.
onerror
=
function
(
msg
page
line
column
error
)
{
browserOptionsClear
(
)
;
if
(
DESCRIPTION
=
=
=
undefined
)
{
DESCRIPTION
=
"
Unknown
"
;
}
var
actual
=
"
error
"
;
var
expected
=
expectedError
;
if
(
expected
!
=
=
"
error
"
&
&
expected
!
=
=
"
Unknown
"
)
{
if
(
ReflectApply
(
ObjectPrototypeIsPrototypeOf
Error
.
prototype
[
error
]
)
)
{
actual
=
error
.
constructor
.
name
;
}
else
{
expected
=
"
error
"
;
}
}
var
reason
=
{
page
}
:
{
line
}
:
{
msg
}
;
new
TestCase
(
DESCRIPTION
expected
actual
reason
)
;
reportFailure
(
msg
)
;
}
;
function
gc
(
)
{
try
{
SpecialPowersForceGC
(
)
;
}
catch
(
ex
)
{
print
(
"
gc
:
"
+
ex
)
;
}
}
global
.
gc
=
gc
;
function
options
(
aOptionName
)
{
var
value
=
"
"
;
for
(
var
optionName
in
currentOptions
)
{
if
(
value
)
value
+
=
"
"
;
value
+
=
optionName
;
}
if
(
aOptionName
)
{
if
(
!
HasOwnProperty
(
SpecialPowersCu
aOptionName
)
)
{
throw
"
Unsupported
JSContext
option
'
"
+
aOptionName
+
"
'
"
;
}
if
(
aOptionName
in
currentOptions
)
{
delete
currentOptions
[
aOptionName
]
;
SpecialPowersCu
[
aOptionName
]
=
false
;
}
else
{
currentOptions
[
aOptionName
]
=
true
;
SpecialPowersCu
[
aOptionName
]
=
true
;
}
}
return
value
;
}
global
.
options
=
options
;
function
jsTestDriverBrowserInit
(
)
{
for
(
var
optionName
of
[
"
strict
"
"
werror
"
"
strict_mode
"
]
)
{
if
(
!
HasOwnProperty
(
SpecialPowersCu
optionName
)
)
throw
"
options
is
out
of
sync
with
Components
.
utils
"
;
if
(
SpecialPowersCu
[
optionName
]
)
SpecialPowersCu
[
optionName
]
=
false
;
}
currentOptions
=
Object
.
create
(
null
)
;
if
(
document
.
location
.
search
.
indexOf
(
"
?
"
)
!
=
=
0
)
{
return
;
}
var
properties
=
Object
.
create
(
null
)
;
var
fields
=
document
.
location
.
search
.
slice
(
1
)
.
split
(
"
;
"
)
;
for
(
var
i
=
0
;
i
<
fields
.
length
;
i
+
+
)
{
var
propertycaptures
=
/
^
(
[
^
=
]
+
)
=
(
.
*
)
/
.
exec
(
fields
[
i
]
)
;
if
(
propertycaptures
=
=
=
null
)
{
properties
[
fields
[
i
]
]
=
true
;
}
else
{
properties
[
propertycaptures
[
1
]
]
=
decodeURIComponent
(
propertycaptures
[
2
]
)
;
}
}
global
.
gTestPath
=
properties
.
test
;
var
testpathparts
=
properties
.
test
.
split
(
"
/
"
)
;
if
(
testpathparts
.
length
<
2
)
{
return
;
}
var
testFileName
=
testpathparts
[
testpathparts
.
length
-
1
]
;
if
(
testFileName
.
endsWith
(
"
-
n
.
js
"
)
)
{
expectedError
=
"
error
"
;
}
else
if
(
properties
.
error
)
{
expectedError
=
properties
.
error
;
}
else
{
expectedError
=
"
Unknown
"
;
}
if
(
properties
.
gczeal
)
{
gczeal
(
Number
(
properties
.
gczeal
)
)
;
}
document
.
title
=
properties
.
test
;
var
prepath
=
"
"
;
var
scripts
=
[
]
;
for
(
var
i
=
0
;
i
<
testpathparts
.
length
-
1
;
i
+
+
)
{
prepath
+
=
testpathparts
[
i
]
+
"
/
"
;
scripts
.
push
(
{
src
:
prepath
+
"
shell
.
js
"
module
:
false
}
)
;
scripts
.
push
(
{
src
:
prepath
+
"
browser
.
js
"
module
:
false
}
)
;
}
var
moduleTest
=
!
!
properties
.
module
;
scripts
.
push
(
{
src
:
prepath
+
testFileName
module
:
moduleTest
}
)
;
scripts
.
push
(
{
src
:
"
js
-
test
-
driver
-
end
.
js
"
module
:
false
}
)
;
if
(
!
moduleTest
)
{
for
(
var
i
=
0
;
i
<
scripts
.
length
;
i
+
+
)
{
var
src
=
scripts
[
i
]
.
src
;
document
.
write
(
<
script
src
=
"
{
src
}
"
charset
=
"
utf
-
8
"
>
<
\
/
script
>
)
;
}
}
else
{
function
appendScript
(
index
)
{
var
script
=
scriptElements
[
index
]
;
scriptElements
[
index
]
=
null
;
if
(
script
!
=
=
null
)
{
ReflectApply
(
NodePrototypeAppendChild
documentDocumentElement
[
script
]
)
;
}
}
var
scriptElements
=
[
]
;
for
(
var
i
=
0
;
i
<
scripts
.
length
;
i
+
+
)
{
var
spec
=
scripts
[
i
]
;
var
script
=
document
.
createElement
(
"
script
"
)
;
script
.
charset
=
"
utf
-
8
"
;
if
(
spec
.
module
)
{
script
.
type
=
"
module
"
;
}
script
.
src
=
spec
.
src
;
let
nextScriptIndex
=
i
+
1
;
if
(
nextScriptIndex
<
scripts
.
length
)
{
var
callNextAppend
=
(
)
=
>
appendScript
(
nextScriptIndex
)
;
script
.
addEventListener
(
"
afterscriptexecute
"
callNextAppend
{
once
:
true
}
)
;
if
(
spec
.
module
)
{
script
.
addEventListener
(
"
error
"
callNextAppend
{
once
:
true
}
)
;
}
}
scriptElements
[
i
]
=
script
;
}
appendScript
(
0
)
;
}
}
function
jsTestDriverEnd
(
)
{
if
(
gDelayTestDriverEnd
)
{
return
;
}
window
.
onerror
=
null
;
browserOptionsClear
(
)
;
if
(
window
.
opener
&
&
window
.
opener
.
runNextTest
)
{
if
(
window
.
opener
.
reportCallBack
)
{
window
.
opener
.
reportCallBack
(
window
.
opener
.
gWindow
)
;
}
setTimeout
(
"
window
.
opener
.
runNextTest
(
)
"
250
)
;
}
else
{
ReflectApply
(
ElementSetClassName
documentDocumentElement
[
"
"
]
)
;
gPageCompleted
=
true
;
}
}
global
.
jsTestDriverEnd
=
jsTestDriverEnd
;
var
dialogCloserSubjects
=
[
]
;
var
dialogCloser
=
SpecialPowers
.
Cc
[
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
]
.
getService
(
SpecialPowers
.
Ci
.
nsIWindowWatcher
)
;
var
dialogCloserObserver
=
{
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
domwindowopened
"
&
&
subject
.
isChromeWindow
)
{
ArrayPush
(
dialogCloserSubjects
subject
)
;
subject
.
setTimeout
(
closeDialog
0
)
;
}
}
}
;
function
closeDialog
(
)
{
while
(
dialogCloserSubjects
.
length
>
0
)
{
var
subject
=
ArrayPop
(
dialogCloserSubjects
)
;
subject
.
close
(
)
;
}
}
function
unregisterDialogCloser
(
)
{
gczeal
(
0
)
;
if
(
!
dialogCloserObserver
|
|
!
dialogCloser
)
{
return
;
}
dialogCloser
.
unregisterNotification
(
dialogCloserObserver
)
;
dialogCloserObserver
=
null
;
dialogCloser
=
null
;
}
dialogCloser
.
registerNotification
(
dialogCloserObserver
)
;
window
.
addEventListener
(
"
unload
"
unregisterDialogCloser
true
)
;
jsTestDriverBrowserInit
(
)
;
}
)
(
this
)
;
var
gDelayTestDriverEnd
=
false
;
var
gPageCompleted
;
