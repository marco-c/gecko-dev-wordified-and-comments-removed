var
UBound
=
0
;
var
BUGNUMBER
=
77578
;
var
summary
=
'
Testing
eval
scope
inside
a
function
'
;
var
cnEquals
=
'
=
'
;
var
status
=
'
'
;
var
statusitems
=
[
]
;
var
actual
=
'
'
;
var
actualvalues
=
[
]
;
var
expect
=
'
'
;
var
expectedvalues
=
[
]
;
var
i
=
999
;
var
j
=
999
;
var
k
=
999
;
test
(
)
;
function
test
(
)
{
printBugNumber
(
BUGNUMBER
)
;
printStatus
(
summary
)
;
testA
(
)
;
testB
(
)
;
testC
(
)
;
for
(
var
i
=
0
;
i
<
UBound
;
i
+
+
)
{
reportCompare
(
expectedvalues
[
i
]
actualvalues
[
i
]
statusitems
[
i
]
)
;
}
}
function
testA
(
)
{
var
sTestScript
=
"
"
;
sTestScript
+
=
"
status
=
'
Section
A
of
test
'
;
"
;
sTestScript
+
=
"
var
i
=
1
;
"
;
sTestScript
+
=
"
actual
=
eval
(
'
i
'
)
;
"
;
sTestScript
+
=
"
expect
=
1
;
"
;
sTestScript
+
=
"
captureThis
(
'
i
'
)
;
"
;
eval
(
sTestScript
)
;
}
function
testB
(
)
{
var
sTestScript
=
"
"
;
sTestScript
+
=
"
status
=
'
Section
B
of
test
'
;
"
;
sTestScript
+
=
"
for
(
var
j
=
1
;
j
<
2
;
j
+
+
)
"
;
sTestScript
+
=
"
{
"
;
sTestScript
+
=
"
actual
=
eval
(
'
j
'
)
;
"
;
sTestScript
+
=
"
}
;
"
;
sTestScript
+
=
"
expect
=
1
;
"
;
sTestScript
+
=
"
captureThis
(
'
j
'
)
;
"
;
eval
(
sTestScript
)
;
}
function
testC
(
)
{
var
sTestScript
=
"
"
;
sTestScript
+
=
"
status
=
'
Section
C
of
test
'
;
"
;
sTestScript
+
=
"
try
"
;
sTestScript
+
=
"
{
"
;
sTestScript
+
=
"
var
k
=
1
;
"
;
sTestScript
+
=
"
actual
=
eval
(
'
k
'
)
;
"
;
sTestScript
+
=
"
}
"
;
sTestScript
+
=
"
catch
(
e
)
"
;
sTestScript
+
=
"
{
"
;
sTestScript
+
=
"
}
;
"
;
sTestScript
+
=
"
expect
=
1
;
"
;
sTestScript
+
=
"
captureThis
(
'
k
'
)
;
"
;
eval
(
sTestScript
)
;
}
function
captureThis
(
varName
)
{
statusitems
[
UBound
]
=
status
;
actualvalues
[
UBound
]
=
varName
+
cnEquals
+
actual
;
expectedvalues
[
UBound
]
=
varName
+
cnEquals
+
expect
;
UBound
+
+
;
}
