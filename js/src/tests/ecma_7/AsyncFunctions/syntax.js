if
(
asyncFunctionsEnabled
(
)
)
{
assertEq
(
Reflect
.
parse
(
"
function
a
(
)
{
}
"
)
.
body
[
0
]
.
async
false
)
;
assertEq
(
Reflect
.
parse
(
"
function
*
a
(
)
{
}
"
)
.
body
[
0
]
.
async
false
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
}
"
)
.
body
[
0
]
.
async
true
)
;
assertEq
(
Reflect
.
parse
(
"
(
)
=
>
{
}
"
)
.
body
[
0
]
.
async
undefined
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
*
a
(
)
{
}
"
)
SyntaxError
)
;
assertEq
(
Reflect
.
parse
(
"
async
\
nfunction
a
(
)
{
}
"
)
.
body
[
0
]
.
expression
.
name
"
async
"
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
(
)
=
>
true
"
)
SyntaxError
)
;
assertEq
(
Reflect
.
parse
(
"
(
async
function
(
)
{
}
)
(
)
"
)
.
body
[
0
]
.
expression
.
callee
.
async
true
)
;
assertEq
(
Reflect
.
parse
(
"
var
k
=
async
function
(
)
{
}
"
)
.
body
[
0
]
.
declarations
[
0
]
.
init
.
async
true
)
;
assertEq
(
Reflect
.
parse
(
"
var
nmd
=
async
function
named
(
)
{
}
"
)
.
body
[
0
]
.
declarations
[
0
]
.
init
.
id
.
name
"
named
"
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
await
4
;
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
function
a
(
)
{
await
4
;
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
function
*
a
(
)
{
await
4
;
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
k
(
)
{
function
a
(
)
{
await
4
;
}
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
)
{
await
\
n4
;
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
k
=
await
3
)
{
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
)
{
async
function
b
(
k
=
await
3
)
{
}
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
)
{
var
await
=
4
;
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
)
{
return
await
;
}
"
)
SyntaxError
)
;
assertThrows
(
(
)
=
>
Reflect
.
parse
(
"
async
function
a
(
)
{
yield
3
;
}
"
)
SyntaxError
)
;
Reflect
.
parse
(
"
function
a
(
)
{
'
use
strict
'
;
var
await
=
3
;
}
"
)
;
Reflect
.
parse
(
"
'
use
strict
'
;
var
await
=
3
;
"
)
;
Reflect
.
parse
(
"
var
await
=
3
;
async
function
a
(
)
{
await
4
;
}
"
)
;
Reflect
.
parse
(
"
async
function
a
(
)
{
await
4
;
}
var
await
=
5
"
)
;
Reflect
.
parse
(
"
async
function
a
(
)
{
function
b
(
)
{
return
await
;
}
}
"
)
Reflect
.
parse
(
"
async
function
a
(
)
{
var
k
=
{
async
:
4
}
}
"
)
;
Reflect
.
parse
(
"
function
a
(
)
{
await
:
4
}
"
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
await
4
;
}
"
)
.
body
[
0
]
.
body
.
body
[
0
]
.
expression
.
operator
"
await
"
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
async
function
b
(
)
{
await
4
;
}
}
"
)
.
body
[
0
]
.
body
.
body
[
0
]
.
body
.
body
[
0
]
.
expression
.
operator
"
await
"
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
await
2
+
3
;
}
"
)
.
body
[
0
]
.
body
.
body
[
0
]
.
expression
.
left
.
argument
.
value
2
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
await
2
+
3
;
}
"
)
.
body
[
0
]
.
body
.
body
[
0
]
.
expression
.
left
.
operator
"
await
"
)
;
assertEq
(
Reflect
.
parse
(
"
async
function
a
(
)
{
await
2
+
3
;
}
"
)
.
body
[
0
]
.
body
.
body
[
0
]
.
expression
.
right
.
value
3
)
;
assertEq
(
Reflect
.
parse
(
"
{
async
function
a
(
)
{
return
2
;
}
}
"
)
.
body
[
0
]
.
body
[
0
]
.
async
true
)
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
