const
oldArrayIterator
=
Array
.
prototype
[
Symbol
.
iterator
]
;
try
{
let
callCount
=
0
;
Array
.
prototype
[
Symbol
.
iterator
]
=
function
(
)
{
callCount
+
=
1
;
return
oldArrayIterator
.
call
(
this
)
;
}
;
function
arrayIterCalledOnce
(
.
.
.
[
]
)
{
}
assertEq
(
callCount
0
)
;
arrayIterCalledOnce
(
)
;
assertEq
(
callCount
1
)
;
callCount
=
0
;
function
arrayIterNotCalledBeforeRest
(
t
=
assertEq
(
callCount
0
)
.
.
.
[
]
)
{
}
assertEq
(
callCount
0
)
;
arrayIterNotCalledBeforeRest
(
)
;
assertEq
(
callCount
1
)
;
callCount
=
0
;
function
arrayIterCalledWhenDestructuring
(
.
.
.
[
t
=
assertEq
(
callCount
1
)
]
)
{
}
assertEq
(
callCount
0
)
;
arrayIterCalledWhenDestructuring
(
)
;
assertEq
(
callCount
1
)
;
}
finally
{
Array
.
prototype
[
Symbol
.
iterator
]
=
oldArrayIterator
;
}
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
0
0
)
;
