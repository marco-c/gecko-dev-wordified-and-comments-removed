var
BUGNUMBER
=
1135708
;
var
summary
=
"
Implement
the
exponentiation
operator
"
;
print
(
BUGNUMBER
+
"
:
"
+
summary
)
;
assertEq
(
2
*
*
2
*
*
3
256
)
;
assertEq
(
1
*
*
1
*
*
4
1
)
;
var
two
=
2
;
var
three
=
3
;
var
four
=
4
;
assertEq
(
two
*
*
two
*
*
three
256
)
;
assertEq
(
1
*
*
1
*
*
four
1
)
;
assertEq
(
2
*
*
3
/
2
*
*
3
1
)
;
assertEq
(
2
*
*
3
*
2
*
*
3
64
)
;
assertEq
(
2
*
*
3
+
2
*
*
3
16
)
;
assertEq
(
(
2
*
*
3
)
*
*
2
64
)
;
assertEq
(
2
*
*
(
3
*
*
2
)
512
)
;
var
x
=
2
;
assertEq
(
x
*
*
=
2
*
*
3
256
)
;
assertEq
(
x
256
)
;
for
(
var
i
=
0
;
i
<
10000
;
i
+
+
)
{
assertEq
(
(
2
*
*
3
)
*
*
2
64
)
;
assertEq
(
2
*
*
(
3
*
*
2
)
512
)
;
var
x
=
2
;
assertEq
(
x
*
*
=
2
*
*
3
256
)
;
assertEq
(
x
256
)
;
}
var
a
c
e
;
a
=
c
=
e
=
2
;
assertEq
(
a
*
*
c
*
*
e
16
)
;
assertThrows
(
function
(
)
{
return
Reflect
.
parse
(
"
2
*
*
3
"
)
;
}
SyntaxError
)
;
for
(
let
unaryOp
of
[
"
delete
"
"
typeof
"
"
void
"
"
+
"
"
-
"
"
!
"
"
~
"
]
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
unaryOp
+
"
a
*
*
2
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
unaryOp
+
"
"
+
unaryOp
+
"
a
*
*
2
"
)
SyntaxError
)
;
}
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
delete
a
.
name
*
*
2
"
)
SyntaxError
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
delete
a
[
0
]
*
*
2
"
)
SyntaxError
)
;
for
(
let
unaryOp
of
[
"
delete
"
"
void
"
"
+
"
"
-
"
"
!
"
"
~
"
]
)
{
let
a
=
0
;
eval
(
"
(
"
+
unaryOp
+
"
a
)
*
*
2
"
)
;
eval
(
"
(
"
+
unaryOp
+
"
"
+
unaryOp
+
"
a
)
*
*
2
"
)
;
}
{
let
a
=
{
}
;
(
delete
a
.
name
)
*
*
2
;
(
delete
a
[
0
]
)
*
*
2
;
}
var
thrower
=
{
get
value
(
)
{
throw
new
Error
(
)
;
}
}
;
assertThrowsInstanceOf
(
function
(
)
{
return
thrower
.
value
*
*
2
;
}
Error
)
;
assertThrowsInstanceOf
(
function
(
)
{
return
2
*
*
thrower
.
value
;
}
Error
)
;
assertThrowsInstanceOf
(
function
(
)
{
return
2
*
*
thrower
.
value
*
*
2
;
}
Error
)
;
var
convertibleToPrimitive
=
{
valueOf
:
function
(
)
{
throw
new
Error
(
"
oops
"
)
;
}
}
;
assertThrowsInstanceOf
(
function
(
)
{
return
convertibleToPrimitive
*
*
3
;
}
Error
)
;
assertThrowsInstanceOf
(
function
(
)
{
return
3
*
*
convertibleToPrimitive
;
}
Error
)
;
assertEq
(
NaN
*
*
2
NaN
)
;
assertEq
(
2
*
*
NaN
NaN
)
;
assertEq
(
2
*
*
"
3
"
8
)
;
assertEq
(
"
2
"
*
*
3
8
)
;
var
parseTree
=
Reflect
.
parse
(
"
a
*
*
b
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
type
"
ExpressionStatement
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
operator
"
*
*
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
left
.
name
"
a
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
right
.
name
"
b
"
)
;
var
parseTree
=
Reflect
.
parse
(
"
a
*
*
b
*
*
c
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
type
"
ExpressionStatement
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
left
.
name
"
a
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
right
.
operator
"
*
*
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
right
.
left
.
name
"
b
"
)
;
assertEq
(
parseTree
.
body
[
0
]
.
expression
.
right
.
right
.
name
"
c
"
)
;
if
(
typeof
reportCompare
=
=
=
"
function
"
)
reportCompare
(
true
true
)
;
