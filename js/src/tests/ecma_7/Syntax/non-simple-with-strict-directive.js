const
testCases
=
[
"
[
]
"
"
[
a
]
"
"
x
[
a
]
"
"
[
a
]
x
"
"
[
a
=
0
]
"
"
x
[
a
=
0
]
"
"
[
a
=
0
]
x
"
"
[
.
.
.
a
]
"
"
x
[
.
.
.
a
]
"
"
[
.
.
.
a
]
x
"
"
[
.
.
.
[
a
]
]
"
"
x
[
.
.
.
[
a
]
]
"
"
[
.
.
.
[
a
]
]
x
"
"
{
}
"
"
{
p
:
o
}
"
"
x
{
p
:
o
}
"
"
{
p
:
o
}
x
"
"
{
p
:
o
=
0
}
"
"
x
{
p
:
o
=
0
}
"
"
{
p
:
o
=
0
}
x
"
"
{
o
}
"
"
x
{
o
}
"
"
{
o
}
x
"
"
{
o
=
0
}
"
"
x
{
o
=
0
}
"
"
{
o
=
0
}
x
"
"
d
=
0
"
"
x
d
=
0
"
"
d
=
0
x
"
"
.
.
.
rest
"
"
x
.
.
.
rest
"
"
.
.
.
[
]
"
"
.
.
.
[
a
]
"
"
x
.
.
.
[
]
"
"
x
.
.
.
[
a
]
"
"
.
.
.
{
}
"
"
.
.
.
{
p
:
o
}
"
"
x
.
.
.
{
}
"
"
x
.
.
.
{
p
:
o
}
"
"
x
d
=
123
[
a
]
{
p
:
0
}
.
.
.
rest
"
]
;
const
GeneratorFunction
=
function
*
(
)
{
}
.
constructor
;
const
functionDefinitions
=
[
parameters
=
>
function
f
(
{
parameters
}
)
{
"
use
strict
"
;
}
parameters
=
>
void
function
(
{
parameters
}
)
{
"
use
strict
"
;
}
;
parameters
=
>
void
function
f
(
{
parameters
}
)
{
"
use
strict
"
;
}
;
parameters
=
>
Function
(
'
{
parameters
}
'
'
"
use
strict
"
;
'
)
parameters
=
>
function
*
g
(
{
parameters
}
)
{
"
use
strict
"
;
}
parameters
=
>
void
function
*
(
{
parameters
}
)
{
"
use
strict
"
;
}
;
parameters
=
>
void
function
*
g
(
{
parameters
}
)
{
"
use
strict
"
;
}
;
parameters
=
>
GeneratorFunction
(
'
{
parameters
}
'
'
"
use
strict
"
;
'
)
parameters
=
>
(
{
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
(
class
{
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
class
C
{
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
parameters
=
>
(
class
{
constructor
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
class
C
{
constructor
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
parameters
=
>
(
{
get
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
(
class
{
get
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
class
C
{
get
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
parameters
=
>
(
{
set
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
(
class
{
set
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
class
C
{
set
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
parameters
=
>
(
{
*
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
(
class
{
*
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
)
;
parameters
=
>
class
C
{
*
m
(
{
parameters
}
)
{
"
use
strict
"
;
}
}
parameters
=
>
(
{
parameters
}
)
=
>
{
"
use
strict
"
;
}
;
]
;
for
(
let
nonSimpleParameters
of
testCases
)
{
for
(
let
def
of
functionDefinitions
)
{
assertThrowsInstanceOf
(
(
)
=
>
eval
(
{
def
(
nonSimpleParameters
)
}
)
SyntaxError
def
(
nonSimpleParameters
)
)
;
assertThrowsInstanceOf
(
(
)
=
>
eval
(
"
use
strict
"
;
{
def
(
nonSimpleParameters
)
}
)
SyntaxError
"
use
strict
"
;
{
def
(
nonSimpleParameters
)
}
)
;
}
}
if
(
typeof
reportCompare
=
=
=
'
function
'
)
reportCompare
(
0
0
)
;
