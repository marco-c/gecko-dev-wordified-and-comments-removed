#
ifndef
jsweakcache_h
#
define
jsweakcache_h
#
include
"
jscntxt
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
vm
/
Runtime
.
h
"
namespace
js
{
template
<
class
Key
class
Value
class
HashPolicy
=
DefaultHasher
<
Key
>
class
AllocPolicy
=
RuntimeAllocPolicy
>
class
WeakCache
:
public
HashMap
<
Key
Value
HashPolicy
AllocPolicy
>
{
private
:
typedef
HashMap
<
Key
Value
HashPolicy
AllocPolicy
>
Base
;
typedef
typename
Base
:
:
Range
Range
;
typedef
typename
Base
:
:
Enum
Enum
;
public
:
explicit
WeakCache
(
JSRuntime
*
rt
)
:
Base
(
rt
)
{
}
explicit
WeakCache
(
JSContext
*
cx
)
:
Base
(
cx
-
>
runtime
(
)
)
{
}
public
:
void
sweep
(
FreeOp
*
fop
)
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
Key
key
(
e
.
front
(
)
.
key
)
;
MOZ_ASSERT
(
key
)
;
MOZ_ASSERT
(
e
.
front
(
)
.
value
(
)
)
;
if
(
gc
:
:
IsAboutToBeFinalized
(
&
key
)
|
|
gc
:
:
IsAboutToBeFinalized
(
e
.
front
(
)
.
value
)
)
e
.
removeFront
(
)
;
else
if
(
key
!
=
e
.
front
(
)
.
key
)
e
.
rekeyFront
(
key
)
;
}
#
ifdef
DEBUG
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Key
key
(
r
.
front
(
)
.
key
)
;
Value
value
(
r
.
front
(
)
.
value
)
;
MOZ_ASSERT
(
key
)
;
MOZ_ASSERT
(
value
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
&
key
)
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
&
value
)
)
;
CheckGCThingAfterMovingGC
(
key
)
;
CheckGCThingAfterMovingGC
(
value
)
;
auto
ptr
=
this
-
>
lookup
(
key
)
;
MOZ_ASSERT
(
ptr
.
found
(
)
&
&
&
*
ptr
=
=
&
r
.
front
(
)
)
;
}
#
endif
}
}
;
template
<
class
Key
class
Value
class
HashPolicy
=
DefaultHasher
<
Key
>
class
AllocPolicy
=
RuntimeAllocPolicy
>
class
WeakValueCache
:
public
HashMap
<
Key
Value
HashPolicy
AllocPolicy
>
{
public
:
typedef
HashMap
<
Key
Value
HashPolicy
AllocPolicy
>
Base
;
typedef
typename
Base
:
:
Range
Range
;
typedef
typename
Base
:
:
Enum
Enum
;
explicit
WeakValueCache
(
JSRuntime
*
rt
)
:
Base
(
rt
)
{
}
explicit
WeakValueCache
(
JSContext
*
cx
)
:
Base
(
cx
-
>
runtime
(
)
)
{
}
public
:
void
sweep
(
FreeOp
*
fop
)
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
MOZ_ASSERT
(
e
.
front
(
)
.
value
(
)
)
;
if
(
gc
:
:
IsAboutToBeFinalized
(
&
e
.
front
(
)
.
value
(
)
)
)
e
.
removeFront
(
)
;
}
#
ifdef
DEBUG
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Value
value
(
r
.
front
(
)
.
value
(
)
)
;
MOZ_ASSERT
(
value
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
&
value
)
)
;
CheckGCThingAfterMovingGC
(
value
)
;
auto
ptr
=
this
-
>
lookup
(
r
.
front
(
)
.
key
(
)
)
;
MOZ_ASSERT
(
ptr
.
found
(
)
&
&
&
*
ptr
=
=
&
r
.
front
(
)
)
;
}
#
endif
}
}
;
}
#
endif
