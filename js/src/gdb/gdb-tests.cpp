#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
gdb
-
tests
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
Initialization
.
h
"
using
namespace
JS
;
static
const
JSClassOps
global_classOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
JS_GlobalObjectTraceHook
}
;
static
const
JSClass
global_class
=
{
"
global
"
JSCLASS_GLOBAL_FLAGS
&
global_classOps
}
;
template
<
typename
T
>
static
inline
T
*
checkPtr
(
T
*
ptr
)
{
if
(
!
ptr
)
abort
(
)
;
return
ptr
;
}
static
void
checkBool
(
bool
success
)
{
if
(
!
success
)
abort
(
)
;
}
void
reportWarning
(
JSContext
*
cx
JSErrorReport
*
report
)
{
fprintf
(
stderr
"
%
s
:
%
u
:
%
s
\
n
"
report
-
>
filename
?
report
-
>
filename
:
"
<
no
filename
>
"
(
unsigned
int
)
report
-
>
lineno
report
-
>
message
(
)
.
c_str
(
)
)
;
}
void
breakpoint
(
)
{
fprintf
(
stderr
"
Called
"
__FILE__
"
:
breakpoint
\
n
"
)
;
}
GDBFragment
*
GDBFragment
:
:
allFragments
=
nullptr
;
int
main
(
int
argc
const
char
*
*
argv
)
{
if
(
!
JS_Init
(
)
)
return
1
;
JSContext
*
cx
=
checkPtr
(
JS_NewContext
(
1024
*
1024
)
)
;
JS_SetGCParameter
(
cx
JSGC_MAX_BYTES
0xffffffff
)
;
JS_SetNativeStackQuota
(
cx
5000000
)
;
checkBool
(
JS
:
:
InitSelfHostedCode
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
reportWarning
)
;
JSAutoRequest
ar
(
cx
)
;
JS
:
:
CompartmentOptions
options
;
options
.
behaviors
(
)
.
setVersion
(
JSVERSION_LATEST
)
;
RootedObject
global
(
cx
checkPtr
(
JS_NewGlobalObject
(
cx
&
global_class
nullptr
JS
:
:
FireOnNewGlobalHook
options
)
)
)
;
JSAutoCompartment
ac
(
cx
global
)
;
checkBool
(
JS_InitStandardClasses
(
cx
global
)
)
;
argv
+
+
;
while
(
*
argv
)
{
const
char
*
name
=
*
argv
+
+
;
GDBFragment
*
fragment
;
for
(
fragment
=
GDBFragment
:
:
allFragments
;
fragment
;
fragment
=
fragment
-
>
next
)
{
if
(
strcmp
(
fragment
-
>
name
(
)
name
)
=
=
0
)
{
fragment
-
>
run
(
cx
argv
)
;
break
;
}
}
if
(
!
fragment
)
{
fprintf
(
stderr
"
Unrecognized
fragment
name
:
%
s
\
n
"
name
)
;
exit
(
1
)
;
}
}
return
0
;
}
