#
include
"
gdb
-
tests
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
StringType
.
h
"
FRAGMENT
(
JSString
simple
)
{
JS
:
:
Rooted
<
JSString
*
>
empty
(
cx
JS_NewStringCopyN
(
cx
nullptr
0
)
)
;
JS
:
:
Rooted
<
JSString
*
>
x
(
cx
JS_NewStringCopyN
(
cx
"
x
"
1
)
)
;
JS
:
:
Rooted
<
JSString
*
>
z
(
cx
JS_NewStringCopyZ
(
cx
"
z
"
)
)
;
JS
:
:
Rooted
<
JSString
*
>
stars
(
cx
JS_NewStringCopyZ
(
cx
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
"
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
"
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
"
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
"
)
)
;
JS
:
:
Rooted
<
JSString
*
>
xz
(
cx
JS_ConcatStrings
(
cx
x
z
)
)
;
JS
:
:
Rooted
<
JSString
*
>
doubleStars
(
cx
JS_ConcatStrings
(
cx
stars
stars
)
)
;
JSString
*
xRaw
=
x
;
breakpoint
(
)
;
use
(
empty
)
;
use
(
x
)
;
use
(
z
)
;
use
(
stars
)
;
use
(
xz
)
;
use
(
doubleStars
)
;
use
(
xRaw
)
;
}
FRAGMENT
(
JSString
null
)
{
JS
:
:
Rooted
<
JSString
*
>
null
(
cx
nullptr
)
;
JSString
*
nullRaw
=
null
;
breakpoint
(
)
;
use
(
null
)
;
use
(
nullRaw
)
;
}
FRAGMENT
(
JSString
subclasses
)
{
JS
:
:
Rooted
<
JSLinearString
*
>
linear
(
cx
JS_EnsureLinearString
(
cx
JS_NewStringCopyZ
(
cx
"
Hi
!
"
)
)
)
;
breakpoint
(
)
;
use
(
linear
)
;
}
FRAGMENT
(
JSString
atom
)
{
JSAtom
*
molybdenum
=
js
:
:
Atomize
(
cx
"
molybdenum
"
10
)
;
breakpoint
(
)
;
use
(
molybdenum
)
;
}
