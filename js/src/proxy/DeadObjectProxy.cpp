#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
ProxyObject
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
const
DeadObjectProxy
DeadObjectProxy
:
:
singleton
;
const
char
DeadObjectProxy
:
:
family
=
0
;
static
void
ReportDead
(
JSContext
*
cx
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DEAD_OBJECT
)
;
}
bool
DeadObjectProxy
:
:
getOwnPropertyDescriptor
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
MutableHandle
<
mozilla
:
:
Maybe
<
PropertyDescriptor
>
>
desc
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
defineProperty
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
Handle
<
PropertyDescriptor
>
desc
ObjectOpResult
&
result
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
ownPropertyKeys
(
JSContext
*
cx
HandleObject
wrapper
MutableHandleIdVector
props
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
delete_
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
ObjectOpResult
&
result
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
getPrototype
(
JSContext
*
cx
HandleObject
proxy
MutableHandleObject
protop
)
const
{
protop
.
set
(
nullptr
)
;
return
true
;
}
bool
DeadObjectProxy
:
:
getPrototypeIfOrdinary
(
JSContext
*
cx
HandleObject
proxy
bool
*
isOrdinary
MutableHandleObject
protop
)
const
{
*
isOrdinary
=
false
;
return
true
;
}
bool
DeadObjectProxy
:
:
preventExtensions
(
JSContext
*
cx
HandleObject
proxy
ObjectOpResult
&
result
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
isExtensible
(
JSContext
*
cx
HandleObject
proxy
bool
*
extensible
)
const
{
*
extensible
=
true
;
return
true
;
}
bool
DeadObjectProxy
:
:
call
(
JSContext
*
cx
HandleObject
wrapper
const
CallArgs
&
args
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
construct
(
JSContext
*
cx
HandleObject
wrapper
const
CallArgs
&
args
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
nativeCall
(
JSContext
*
cx
IsAcceptableThis
test
NativeImpl
impl
const
CallArgs
&
args
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
getBuiltinClass
(
JSContext
*
cx
HandleObject
proxy
ESClass
*
cls
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
bool
DeadObjectProxy
:
:
isArray
(
JSContext
*
cx
HandleObject
obj
JS
:
:
IsArrayAnswer
*
answer
)
const
{
ReportDead
(
cx
)
;
return
false
;
}
const
char
*
DeadObjectProxy
:
:
className
(
JSContext
*
cx
HandleObject
wrapper
)
const
{
return
"
DeadObject
"
;
}
JSString
*
DeadObjectProxy
:
:
fun_toString
(
JSContext
*
cx
HandleObject
proxy
bool
isToSource
)
const
{
ReportDead
(
cx
)
;
return
nullptr
;
}
RegExpShared
*
DeadObjectProxy
:
:
regexp_toShared
(
JSContext
*
cx
HandleObject
proxy
)
const
{
ReportDead
(
cx
)
;
return
nullptr
;
}
bool
js
:
:
IsDeadProxyObject
(
const
JSObject
*
obj
)
{
return
IsDerivedProxyObject
(
obj
&
DeadObjectProxy
:
:
singleton
)
;
}
Value
js
:
:
DeadProxyTargetValue
(
JSObject
*
obj
)
{
int32_t
flags
=
0
;
if
(
obj
-
>
isCallable
(
)
)
{
flags
|
=
DeadObjectProxyIsCallable
;
}
if
(
obj
-
>
isConstructor
(
)
)
{
flags
|
=
DeadObjectProxyIsConstructor
;
}
if
(
obj
-
>
isBackgroundFinalized
(
)
)
{
flags
|
=
DeadObjectProxyIsBackgroundFinalized
;
}
return
Int32Value
(
flags
)
;
}
JSObject
*
js
:
:
NewDeadProxyObject
(
JSContext
*
cx
JSObject
*
origObj
)
{
RootedValue
target
(
cx
)
;
if
(
origObj
)
{
target
=
DeadProxyTargetValue
(
origObj
)
;
}
else
{
target
=
Int32Value
(
DeadObjectProxyIsBackgroundFinalized
)
;
}
return
NewProxyObject
(
cx
&
DeadObjectProxy
:
:
singleton
target
nullptr
ProxyOptions
(
)
)
;
}
