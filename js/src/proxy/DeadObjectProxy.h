#
ifndef
proxy_DeadObjectProxy_h
#
define
proxy_DeadObjectProxy_h
#
include
"
js
/
Proxy
.
h
"
namespace
js
{
class
ProxyObject
;
enum
DeadProxyIsCallableIsConstructorOption
{
DeadProxyNotCallableNotConstructor
DeadProxyNotCallableIsConstructor
DeadProxyIsCallableNotConstructor
DeadProxyIsCallableIsConstructor
}
;
template
<
DeadProxyIsCallableIsConstructorOption
CC
>
class
DeadObjectProxy
:
public
BaseProxyHandler
{
public
:
explicit
constexpr
DeadObjectProxy
(
)
:
BaseProxyHandler
(
&
family
)
{
}
virtual
bool
getOwnPropertyDescriptor
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
MutableHandle
<
PropertyDescriptor
>
desc
)
const
override
;
virtual
bool
defineProperty
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
Handle
<
PropertyDescriptor
>
desc
ObjectOpResult
&
result
)
const
override
;
virtual
bool
ownPropertyKeys
(
JSContext
*
cx
HandleObject
wrapper
AutoIdVector
&
props
)
const
override
;
virtual
bool
delete_
(
JSContext
*
cx
HandleObject
wrapper
HandleId
id
ObjectOpResult
&
result
)
const
override
;
virtual
bool
getPrototype
(
JSContext
*
cx
HandleObject
proxy
MutableHandleObject
protop
)
const
override
;
virtual
bool
getPrototypeIfOrdinary
(
JSContext
*
cx
HandleObject
proxy
bool
*
isOrdinary
MutableHandleObject
protop
)
const
override
;
virtual
bool
preventExtensions
(
JSContext
*
cx
HandleObject
proxy
ObjectOpResult
&
result
)
const
override
;
virtual
bool
isExtensible
(
JSContext
*
cx
HandleObject
proxy
bool
*
extensible
)
const
override
;
virtual
bool
call
(
JSContext
*
cx
HandleObject
proxy
const
CallArgs
&
args
)
const
override
;
virtual
bool
construct
(
JSContext
*
cx
HandleObject
proxy
const
CallArgs
&
args
)
const
override
;
virtual
bool
nativeCall
(
JSContext
*
cx
IsAcceptableThis
test
NativeImpl
impl
const
CallArgs
&
args
)
const
override
;
virtual
bool
hasInstance
(
JSContext
*
cx
HandleObject
proxy
MutableHandleValue
v
bool
*
bp
)
const
override
;
virtual
bool
getBuiltinClass
(
JSContext
*
cx
HandleObject
proxy
ESClass
*
cls
)
const
override
;
virtual
bool
isArray
(
JSContext
*
cx
HandleObject
proxy
JS
:
:
IsArrayAnswer
*
answer
)
const
override
;
virtual
const
char
*
className
(
JSContext
*
cx
HandleObject
proxy
)
const
override
;
virtual
JSString
*
fun_toString
(
JSContext
*
cx
HandleObject
proxy
unsigned
indent
)
const
override
;
virtual
RegExpShared
*
regexp_toShared
(
JSContext
*
cx
HandleObject
proxy
)
const
override
;
virtual
bool
isCallable
(
JSObject
*
obj
)
const
override
{
return
CC
=
=
DeadProxyIsCallableIsConstructor
|
|
CC
=
=
DeadProxyIsCallableNotConstructor
;
}
virtual
bool
isConstructor
(
JSObject
*
obj
)
const
override
{
return
CC
=
=
DeadProxyIsCallableIsConstructor
|
|
CC
=
=
DeadProxyNotCallableIsConstructor
;
}
static
const
DeadObjectProxy
*
singleton
(
)
{
static
DeadObjectProxy
singleton
;
return
&
singleton
;
}
static
const
char
family
;
}
;
bool
IsDeadProxyObject
(
JSObject
*
obj
)
;
const
BaseProxyHandler
*
SelectDeadProxyHandler
(
ProxyObject
*
obj
)
;
JSObject
*
NewDeadProxyObject
(
JSContext
*
cx
JSObject
*
origObj
=
nullptr
)
;
}
#
endif
