function
RegExpFlagsGetter
(
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
result
=
"
"
;
if
(
R
.
global
)
result
+
=
"
g
"
;
if
(
R
.
ignoreCase
)
result
+
=
"
i
"
;
if
(
R
.
multiline
)
result
+
=
"
m
"
;
if
(
R
.
unicode
)
result
+
=
"
u
"
;
if
(
R
.
sticky
)
result
+
=
"
y
"
;
return
result
;
}
_SetCanonicalName
(
RegExpFlagsGetter
"
get
flags
"
)
;
function
RegExpToString
(
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
pattern
=
R
.
source
;
var
flags
=
R
.
flags
;
return
'
/
'
+
pattern
+
'
/
'
+
flags
;
}
function
RegExp_prototype_Exec
(
string
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
|
|
!
IsRegExpObject
(
R
)
)
return
callFunction
(
CallRegExpMethodIfWrapped
R
string
"
RegExp_prototype_Exec
"
)
;
var
S
=
ToString
(
string
)
;
return
RegExpBuiltinExec
(
R
S
false
)
;
}
function
RegExpExec
(
R
S
forTest
)
{
var
exec
=
R
.
exec
;
if
(
exec
=
=
=
RegExp_prototype_Exec
|
|
!
IsCallable
(
exec
)
)
{
return
RegExpBuiltinExec
(
R
S
forTest
)
;
}
var
result
=
callContentFunction
(
exec
R
S
)
;
if
(
typeof
result
!
=
=
"
object
"
)
ThrowTypeError
(
JSMSG_EXEC_NOT_OBJORNULL
)
;
return
forTest
?
result
!
=
=
null
:
result
;
}
function
RegExpBuiltinExec
(
R
S
forTest
)
{
if
(
!
IsRegExpObject
(
R
)
)
return
callFunction
(
CallRegExpMethodIfWrapped
R
R
S
forTest
"
RegExpBuiltinExec
"
)
;
var
lastIndex
=
ToLength
(
R
.
lastIndex
)
;
var
global
=
!
!
R
.
global
;
var
sticky
=
!
!
R
.
sticky
;
if
(
!
global
&
&
!
sticky
)
{
lastIndex
=
0
;
}
else
{
if
(
lastIndex
<
0
|
|
lastIndex
>
S
.
length
)
{
R
.
lastIndex
=
0
;
return
forTest
?
false
:
null
;
}
}
if
(
forTest
)
{
var
endIndex
=
RegExpTester
(
R
S
lastIndex
sticky
)
;
if
(
endIndex
=
=
-
1
)
{
R
.
lastIndex
=
0
;
return
false
;
}
if
(
global
|
|
sticky
)
R
.
lastIndex
=
endIndex
;
return
true
;
}
var
result
=
RegExpMatcher
(
R
S
lastIndex
sticky
)
;
if
(
result
=
=
=
null
)
{
R
.
lastIndex
=
0
;
}
else
{
if
(
global
|
|
sticky
)
R
.
lastIndex
=
result
.
index
+
result
[
0
]
.
length
;
}
return
result
;
}
function
RegExpTest
(
string
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
S
=
ToString
(
string
)
;
return
RegExpExec
(
R
S
true
)
;
}
_SetCanonicalName
(
RegExpToString
"
toString
"
)
;
