function
RegExpFlagsGetter
(
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
result
=
"
"
;
if
(
R
.
global
)
result
+
=
"
g
"
;
if
(
R
.
ignoreCase
)
result
+
=
"
i
"
;
if
(
R
.
multiline
)
result
+
=
"
m
"
;
if
(
R
.
unicode
)
result
+
=
"
u
"
;
if
(
R
.
sticky
)
result
+
=
"
y
"
;
return
result
;
}
_SetCanonicalName
(
RegExpFlagsGetter
"
get
flags
"
)
;
function
RegExpToString
(
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
pattern
=
R
.
source
;
var
flags
=
R
.
flags
;
return
'
/
'
+
pattern
+
'
/
'
+
flags
;
}
_SetCanonicalName
(
RegExpToString
"
toString
"
)
;
function
AdvanceStringIndex
(
S
index
)
{
assert
(
typeof
S
=
=
=
"
string
"
"
Expected
string
as
1st
argument
"
)
;
assert
(
index
>
=
0
&
&
index
<
=
MAX_NUMERIC_INDEX
"
Expected
integer
as
2nd
argument
"
)
;
var
length
=
S
.
length
;
if
(
index
+
1
>
=
length
)
return
index
+
1
;
var
first
=
callFunction
(
std_String_charCodeAt
S
index
)
;
if
(
first
<
0xD800
|
|
first
>
0xDBFF
)
return
index
+
1
;
var
second
=
callFunction
(
std_String_charCodeAt
S
index
+
1
)
;
if
(
second
<
0xDC00
|
|
second
>
0xDFFF
)
return
index
+
1
;
return
index
+
2
;
}
function
RegExpMatch
(
string
)
{
var
rx
=
this
;
if
(
!
IsObject
(
rx
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
rx
=
=
=
null
?
"
null
"
:
typeof
rx
)
;
var
S
=
ToString
(
string
)
;
if
(
!
rx
.
global
)
return
RegExpExec
(
rx
S
false
)
;
var
fullUnicode
=
!
!
rx
.
unicode
;
rx
.
lastIndex
=
0
;
var
A
=
[
]
;
var
n
=
0
;
while
(
true
)
{
var
result
=
RegExpExec
(
rx
S
false
)
;
if
(
result
=
=
=
null
)
return
(
n
=
=
=
0
)
?
null
:
A
;
var
matchStr
=
ToString
(
result
[
0
]
)
;
_DefineDataProperty
(
A
n
matchStr
)
;
if
(
matchStr
=
=
=
"
"
)
{
var
lastIndex
=
ToLength
(
rx
.
lastIndex
)
;
rx
.
lastIndex
=
fullUnicode
?
AdvanceStringIndex
(
S
lastIndex
)
:
lastIndex
+
1
;
}
n
+
+
;
}
}
function
IsRegExpMethodOptimizable
(
rx
)
{
var
RegExpProto
=
GetBuiltinPrototype
(
"
RegExp
"
)
;
return
RegExpPrototypeOptimizable
(
RegExpProto
)
&
&
RegExpInstanceOptimizable
(
rx
RegExpProto
)
&
&
RegExpProto
.
exec
=
=
=
RegExp_prototype_Exec
;
}
function
RegExpReplace
(
string
replaceValue
)
{
var
rx
=
this
;
if
(
!
IsObject
(
rx
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
rx
=
=
=
null
?
"
null
"
:
typeof
rx
)
;
var
S
=
ToString
(
string
)
;
var
lengthS
=
S
.
length
;
var
functionalReplace
=
IsCallable
(
replaceValue
)
;
var
firstDollarIndex
=
-
1
;
if
(
!
functionalReplace
)
{
replaceValue
=
ToString
(
replaceValue
)
;
firstDollarIndex
=
callFunction
(
std_String_indexOf
replaceValue
"
"
)
;
}
var
global
=
!
!
rx
.
global
;
if
(
!
functionalReplace
&
&
firstDollarIndex
=
=
=
-
1
&
&
IsRegExpMethodOptimizable
(
rx
)
)
{
if
(
global
)
{
if
(
lengthS
<
0x7fff
)
return
RegExpGlobalReplaceShortOpt
(
rx
S
lengthS
replaceValue
)
;
return
RegExpGlobalReplaceOpt
(
rx
S
lengthS
replaceValue
)
;
}
return
RegExpLocalReplaceOpt
(
rx
S
lengthS
replaceValue
)
;
}
var
fullUnicode
=
false
;
if
(
global
)
{
fullUnicode
=
!
!
rx
.
unicode
;
rx
.
lastIndex
=
0
;
}
var
results
=
[
]
;
var
nResults
=
0
;
while
(
true
)
{
var
result
=
RegExpExec
(
rx
S
false
)
;
if
(
result
=
=
=
null
)
break
;
_DefineDataProperty
(
results
nResults
+
+
result
)
;
if
(
!
global
)
break
;
var
matchStr
=
ToString
(
result
[
0
]
)
;
if
(
matchStr
=
=
=
"
"
)
{
var
lastIndex
=
ToLength
(
rx
.
lastIndex
)
;
rx
.
lastIndex
=
fullUnicode
?
AdvanceStringIndex
(
S
lastIndex
)
:
lastIndex
+
1
;
}
}
var
accumulatedResult
=
"
"
;
var
nextSourcePosition
=
0
;
for
(
var
i
=
0
;
i
<
nResults
;
i
+
+
)
{
result
=
results
[
i
]
;
var
nCaptures
=
std_Math_max
(
ToLength
(
result
.
length
)
-
1
0
)
;
var
matched
=
ToString
(
result
[
0
]
)
;
var
matchLength
=
matched
.
length
;
var
position
=
std_Math_max
(
std_Math_min
(
ToInteger
(
result
.
index
)
lengthS
)
0
)
;
var
n
capN
replacement
;
if
(
functionalReplace
|
|
firstDollarIndex
!
=
=
-
1
)
{
var
captures
=
[
]
;
var
capturesLength
=
0
;
if
(
functionalReplace
&
&
nCaptures
>
4
)
_DefineDataProperty
(
captures
capturesLength
+
+
matched
)
;
for
(
n
=
1
;
n
<
=
nCaptures
;
n
+
+
)
{
capN
=
result
[
n
]
;
if
(
capN
!
=
=
undefined
)
capN
=
ToString
(
capN
)
;
_DefineDataProperty
(
captures
capturesLength
+
+
capN
)
;
}
if
(
functionalReplace
)
{
switch
(
nCaptures
)
{
case
0
:
replacement
=
ToString
(
replaceValue
(
matched
position
S
)
)
;
break
;
case
1
:
replacement
=
ToString
(
replaceValue
(
matched
captures
[
0
]
position
S
)
)
;
break
;
case
2
:
replacement
=
ToString
(
replaceValue
(
matched
captures
[
0
]
captures
[
1
]
position
S
)
)
;
break
;
case
3
:
replacement
=
ToString
(
replaceValue
(
matched
captures
[
0
]
captures
[
1
]
captures
[
2
]
position
S
)
)
;
break
;
case
4
:
replacement
=
ToString
(
replaceValue
(
matched
captures
[
0
]
captures
[
1
]
captures
[
2
]
captures
[
3
]
position
S
)
)
;
break
;
default
:
_DefineDataProperty
(
captures
capturesLength
+
+
position
)
;
_DefineDataProperty
(
captures
capturesLength
+
+
S
)
;
replacement
=
ToString
(
callFunction
(
std_Function_apply
replaceValue
null
captures
)
)
;
}
}
else
{
replacement
=
RegExpGetSubstitution
(
matched
S
position
captures
replaceValue
firstDollarIndex
)
;
}
}
else
{
for
(
n
=
1
;
n
<
=
nCaptures
;
n
+
+
)
{
capN
=
result
[
n
]
;
if
(
capN
!
=
=
undefined
)
ToString
(
capN
)
;
}
replacement
=
replaceValue
;
}
if
(
position
>
=
nextSourcePosition
)
{
accumulatedResult
+
=
Substring
(
S
nextSourcePosition
position
-
nextSourcePosition
)
+
replacement
;
nextSourcePosition
=
position
+
matchLength
;
}
}
if
(
nextSourcePosition
>
=
lengthS
)
return
accumulatedResult
;
return
accumulatedResult
+
Substring
(
S
nextSourcePosition
lengthS
-
nextSourcePosition
)
;
}
function
RegExpGlobalReplaceShortOpt
(
rx
S
lengthS
replaceValue
)
{
var
fullUnicode
=
!
!
rx
.
unicode
;
var
lastIndex
=
0
;
rx
.
lastIndex
=
0
;
var
accumulatedResult
=
"
"
;
var
nextSourcePosition
=
0
;
var
sticky
=
!
!
rx
.
sticky
;
while
(
true
)
{
var
result
=
RegExpSearcher
(
rx
S
lastIndex
sticky
)
;
if
(
result
=
=
=
-
1
)
break
;
var
position
=
result
&
0x7fff
;
lastIndex
=
(
result
>
>
15
)
&
0x7fff
;
accumulatedResult
+
=
Substring
(
S
nextSourcePosition
position
-
nextSourcePosition
)
+
replaceValue
;
nextSourcePosition
=
lastIndex
;
if
(
lastIndex
=
=
=
position
)
{
lastIndex
=
fullUnicode
?
AdvanceStringIndex
(
S
lastIndex
)
:
lastIndex
+
1
;
if
(
lastIndex
>
lengthS
)
break
;
}
}
if
(
nextSourcePosition
>
=
lengthS
)
return
accumulatedResult
;
return
accumulatedResult
+
Substring
(
S
nextSourcePosition
lengthS
-
nextSourcePosition
)
;
}
function
RegExpGlobalReplaceOpt
(
rx
S
lengthS
replaceValue
)
{
var
fullUnicode
=
!
!
rx
.
unicode
;
var
lastIndex
=
0
;
rx
.
lastIndex
=
0
;
var
accumulatedResult
=
"
"
;
var
nextSourcePosition
=
0
;
var
sticky
=
!
!
rx
.
sticky
;
while
(
true
)
{
var
result
=
RegExpMatcher
(
rx
S
lastIndex
sticky
)
;
if
(
result
=
=
=
null
)
break
;
var
matchStr
=
result
[
0
]
;
var
matched
=
result
[
0
]
;
var
matchLength
=
matched
.
length
;
var
position
=
result
.
index
;
lastIndex
=
position
+
matchLength
;
accumulatedResult
+
=
Substring
(
S
nextSourcePosition
position
-
nextSourcePosition
)
+
replaceValue
;
nextSourcePosition
=
lastIndex
;
if
(
matchLength
=
=
=
0
)
{
lastIndex
=
fullUnicode
?
AdvanceStringIndex
(
S
lastIndex
)
:
lastIndex
+
1
;
if
(
lastIndex
>
lengthS
)
break
;
}
}
if
(
nextSourcePosition
>
=
lengthS
)
return
accumulatedResult
;
return
accumulatedResult
+
Substring
(
S
nextSourcePosition
lengthS
-
nextSourcePosition
)
;
}
function
RegExpLocalReplaceOpt
(
rx
S
lengthS
replaceValue
)
{
var
sticky
=
!
!
rx
.
sticky
;
var
lastIndex
;
if
(
sticky
)
{
lastIndex
=
ToLength
(
rx
.
lastIndex
)
;
if
(
lastIndex
>
lengthS
)
{
rx
.
lastIndex
=
0
;
return
S
;
}
}
else
{
lastIndex
=
0
;
}
var
result
=
RegExpMatcher
(
rx
S
lastIndex
sticky
)
;
if
(
result
=
=
=
null
)
{
rx
.
lastIndex
=
0
;
return
S
;
}
var
matched
=
result
[
0
]
;
var
matchLength
=
matched
.
length
;
var
position
=
result
.
index
;
var
accumulatedResult
=
Substring
(
S
0
position
)
+
replaceValue
;
var
nextSourcePosition
=
position
+
matchLength
;
if
(
sticky
)
rx
.
lastIndex
=
nextSourcePosition
;
if
(
nextSourcePosition
>
=
lengthS
)
return
accumulatedResult
;
return
accumulatedResult
+
Substring
(
S
nextSourcePosition
lengthS
-
nextSourcePosition
)
;
}
function
RegExpSearch
(
string
)
{
var
rx
=
this
;
if
(
!
IsObject
(
rx
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
rx
=
=
=
null
?
"
null
"
:
typeof
rx
)
;
var
S
=
ToString
(
string
)
;
var
result
;
if
(
IsRegExpMethodOptimizable
(
rx
)
&
&
S
.
length
<
0x7fff
)
{
var
sticky
=
!
!
rx
.
sticky
;
result
=
RegExpSearcher
(
rx
S
0
sticky
)
;
if
(
result
=
=
=
-
1
)
return
-
1
;
return
result
&
0x7fff
;
}
var
previousLastIndex
=
rx
.
lastIndex
;
rx
.
lastIndex
=
0
;
result
=
RegExpExec
(
rx
S
false
)
;
rx
.
lastIndex
=
previousLastIndex
;
if
(
result
=
=
=
null
)
return
-
1
;
return
result
.
index
;
}
function
IsRegExpSplitOptimizable
(
C
)
{
var
RegExpCtor
=
GetBuiltinConstructor
(
"
RegExp
"
)
;
if
(
C
!
=
=
RegExpCtor
)
return
false
;
var
RegExpProto
=
RegExpCtor
.
prototype
;
return
RegExpPrototypeOptimizable
(
RegExpProto
)
&
&
RegExpProto
.
exec
=
=
=
RegExp_prototype_Exec
;
}
function
RegExpSplit
(
string
limit
)
{
var
rx
=
this
;
if
(
!
IsObject
(
rx
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
rx
=
=
=
null
?
"
null
"
:
typeof
rx
)
;
var
S
=
ToString
(
string
)
;
var
C
=
SpeciesConstructor
(
rx
GetBuiltinConstructor
(
"
RegExp
"
)
)
;
var
flags
=
ToString
(
rx
.
flags
)
;
var
unicodeMatching
=
callFunction
(
std_String_includes
flags
"
u
"
)
;
var
newFlags
;
if
(
callFunction
(
std_String_includes
flags
"
y
"
)
)
newFlags
=
flags
;
else
newFlags
=
flags
+
"
y
"
;
var
splitter
=
new
C
(
rx
newFlags
)
;
var
A
=
[
]
;
var
lengthA
=
0
;
var
lim
;
if
(
limit
=
=
=
undefined
)
lim
=
MAX_NUMERIC_INDEX
;
else
lim
=
limit
>
>
>
0
;
var
size
=
S
.
length
;
var
p
=
0
;
if
(
lim
=
=
=
0
)
return
A
;
if
(
size
=
=
=
0
)
{
var
z
=
RegExpExec
(
splitter
S
false
)
;
if
(
z
!
=
=
null
)
return
A
;
_DefineDataProperty
(
A
0
S
)
;
return
A
;
}
var
optimizable
=
IsRegExpSplitOptimizable
(
C
)
;
var
q
=
p
;
while
(
q
<
size
)
{
var
e
;
if
(
optimizable
)
{
z
=
RegExpMatcher
(
splitter
S
q
false
)
;
if
(
z
=
=
=
null
)
break
;
q
=
z
.
index
;
if
(
q
>
=
size
)
break
;
e
=
ToLength
(
q
+
z
[
0
]
.
length
)
;
}
else
{
splitter
.
lastIndex
=
q
;
z
=
RegExpExec
(
splitter
S
false
)
;
if
(
z
=
=
=
null
)
{
q
=
unicodeMatching
?
AdvanceStringIndex
(
S
q
)
:
q
+
1
;
continue
;
}
e
=
ToLength
(
splitter
.
lastIndex
)
;
}
if
(
e
=
=
=
p
)
{
q
=
unicodeMatching
?
AdvanceStringIndex
(
S
q
)
:
q
+
1
;
continue
;
}
_DefineDataProperty
(
A
lengthA
Substring
(
S
p
q
-
p
)
)
;
lengthA
+
+
;
if
(
lengthA
=
=
=
lim
)
return
A
;
p
=
e
;
var
numberOfCaptures
=
std_Math_max
(
ToLength
(
z
.
length
)
-
1
0
)
;
var
i
=
1
;
while
(
i
<
=
numberOfCaptures
)
{
_DefineDataProperty
(
A
lengthA
z
[
i
]
)
;
i
+
+
;
lengthA
+
+
;
if
(
lengthA
=
=
=
lim
)
return
A
;
}
q
=
p
;
}
if
(
p
>
=
size
)
_DefineDataProperty
(
A
lengthA
"
"
)
;
else
_DefineDataProperty
(
A
lengthA
Substring
(
S
p
size
-
p
)
)
;
return
A
;
}
function
RegExp_prototype_Exec
(
string
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
|
|
!
IsRegExpObject
(
R
)
)
return
callFunction
(
CallRegExpMethodIfWrapped
R
string
"
RegExp_prototype_Exec
"
)
;
var
S
=
ToString
(
string
)
;
return
RegExpBuiltinExec
(
R
S
false
)
;
}
function
RegExpExec
(
R
S
forTest
)
{
var
exec
=
R
.
exec
;
if
(
exec
=
=
=
RegExp_prototype_Exec
|
|
!
IsCallable
(
exec
)
)
{
return
RegExpBuiltinExec
(
R
S
forTest
)
;
}
var
result
=
callContentFunction
(
exec
R
S
)
;
if
(
typeof
result
!
=
=
"
object
"
)
ThrowTypeError
(
JSMSG_EXEC_NOT_OBJORNULL
)
;
return
forTest
?
result
!
=
=
null
:
result
;
}
function
RegExpBuiltinExec
(
R
S
forTest
)
{
if
(
!
IsRegExpObject
(
R
)
)
return
callFunction
(
CallRegExpMethodIfWrapped
R
R
S
forTest
"
RegExpBuiltinExec
"
)
;
var
lastIndex
=
ToLength
(
R
.
lastIndex
)
;
var
global
=
!
!
R
.
global
;
var
sticky
=
!
!
R
.
sticky
;
if
(
!
global
&
&
!
sticky
)
{
lastIndex
=
0
;
}
else
{
if
(
lastIndex
>
S
.
length
)
{
R
.
lastIndex
=
0
;
return
forTest
?
false
:
null
;
}
}
if
(
forTest
)
{
var
endIndex
=
RegExpTester
(
R
S
lastIndex
sticky
)
;
if
(
endIndex
=
=
-
1
)
{
R
.
lastIndex
=
0
;
return
false
;
}
if
(
global
|
|
sticky
)
R
.
lastIndex
=
endIndex
;
return
true
;
}
var
result
=
RegExpMatcher
(
R
S
lastIndex
sticky
)
;
if
(
result
=
=
=
null
)
{
R
.
lastIndex
=
0
;
}
else
{
if
(
global
|
|
sticky
)
R
.
lastIndex
=
result
.
index
+
result
[
0
]
.
length
;
}
return
result
;
}
function
RegExpTest
(
string
)
{
var
R
=
this
;
if
(
!
IsObject
(
R
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
R
=
=
=
null
?
"
null
"
:
typeof
R
)
;
var
S
=
ToString
(
string
)
;
return
RegExpExec
(
R
S
true
)
;
}
function
RegExpSpecies
(
)
{
return
this
;
}
