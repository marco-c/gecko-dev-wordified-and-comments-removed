#
ifndef
builtin_String_h
#
define
builtin_String_h
#
include
"
NamespaceImports
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
js
{
class
ArrayObject
;
class
GlobalObject
;
extern
JSObject
*
InitStringClass
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
extern
bool
str_fromCharCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_fromCharCode_one_arg
(
JSContext
*
cx
HandleValue
code
MutableHandleValue
rval
)
;
extern
bool
str_fromCodePoint
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_fromCodePoint_one_arg
(
JSContext
*
cx
HandleValue
code
MutableHandleValue
rval
)
;
extern
bool
str_includes
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_indexOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_startsWith
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_charCodeAt_impl
(
JSContext
*
cx
HandleString
string
HandleValue
index
MutableHandleValue
res
)
;
extern
bool
str_charCodeAt
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
str_endsWith
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
#
if
JS_HAS_INTL_API
[
[
nodiscard
]
]
extern
bool
intl_toLocaleLowerCase
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_toLocaleUpperCase
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
#
endif
ArrayObject
*
StringSplitString
(
JSContext
*
cx
HandleString
str
HandleString
sep
uint32_t
limit
)
;
JSString
*
StringFlatReplaceString
(
JSContext
*
cx
HandleString
string
HandleString
pattern
HandleString
replacement
)
;
JSString
*
str_replace_string_raw
(
JSContext
*
cx
HandleString
string
HandleString
pattern
HandleString
replacement
)
;
JSString
*
str_replaceAll_string_raw
(
JSContext
*
cx
HandleString
string
HandleString
pattern
HandleString
replacement
)
;
extern
bool
StringIndexOf
(
JSContext
*
cx
HandleString
string
HandleString
searchString
int32_t
*
result
)
;
extern
bool
StringStartsWith
(
JSContext
*
cx
HandleString
string
HandleString
searchString
bool
*
result
)
;
extern
bool
StringEndsWith
(
JSContext
*
cx
HandleString
string
HandleString
searchString
bool
*
result
)
;
extern
JSString
*
StringToLowerCase
(
JSContext
*
cx
HandleString
string
)
;
extern
JSString
*
StringToUpperCase
(
JSContext
*
cx
HandleString
string
)
;
extern
bool
StringConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
FlatStringMatch
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
FlatStringSearch
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
}
#
endif
