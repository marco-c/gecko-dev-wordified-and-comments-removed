#
ifndef
builtin_DisposableStackObjectBase_h
#
define
builtin_DisposableStackObjectBase_h
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
UsingHint
.
h
"
namespace
js
{
enum
AdoptClosureSlots
{
AdoptClosureSlot_ValueSlot
=
0
AdoptClosureSlot_OnDisposeSlot
}
;
bool
ThrowIfOnDisposeNotCallable
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
onDispose
)
;
bool
AdoptClosure
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
bool
AddDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
ArrayObject
*
>
disposeCapability
JS
:
:
Handle
<
JS
:
:
Value
>
val
UsingHint
hint
)
;
bool
AddDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
ArrayObject
*
>
disposeCapability
JS
:
:
Handle
<
JS
:
:
Value
>
val
UsingHint
hint
JS
:
:
Handle
<
JS
:
:
Value
>
methodVal
)
;
bool
CreateDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
objVal
UsingHint
hint
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CreateDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
objVal
UsingHint
hint
JS
:
:
Handle
<
JS
:
:
Value
>
methodVal
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
GetDisposeMethod
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
obj
UsingHint
hint
JS
:
:
MutableHandle
<
JS
:
:
Value
>
disposeMethod
)
;
class
DisposableStackObjectBase
:
public
NativeObject
{
public
:
enum
DisposableState
:
uint8_t
{
Pending
Disposed
}
;
static
constexpr
uint32_t
DISPOSABLE_RESOURCE_STACK_SLOT
=
0
;
static
constexpr
uint32_t
STATE_SLOT
=
1
;
static
constexpr
uint32_t
RESERVED_SLOTS
=
2
;
protected
:
ArrayObject
*
getOrCreateDisposeCapability
(
JSContext
*
cx
)
;
bool
isDisposableResourceStackEmpty
(
)
const
;
void
clearDisposableResourceStack
(
)
;
ArrayObject
*
nonEmptyDisposableResourceStack
(
)
const
;
DisposableState
state
(
)
const
;
void
setState
(
DisposableState
state
)
;
}
;
}
#
endif
