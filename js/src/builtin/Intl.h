#
ifndef
builtin_Intl_h
#
define
builtin_Intl_h
#
include
"
NamespaceImports
.
h
"
#
if
ENABLE_INTL_API
#
include
"
unicode
/
utypes
.
h
"
#
endif
namespace
js
{
extern
JSObject
*
InitIntlClass
(
JSContext
*
cx
HandleObject
obj
)
;
extern
MOZ_MUST_USE
bool
intl_Collator
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_Collator_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_availableCollations
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_CompareStrings
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_numberingSystem
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_FormatNumber
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_DateTimeFormat
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_DateTimeFormat_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_availableCalendars
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_availableTimeZones
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_canonicalizeTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_defaultTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_patternForSkeleton
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_FormatDateTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_GetCalendarInfo
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
#
if
ENABLE_INTL_API
inline
const
UChar
*
Char16ToUChar
(
const
char16_t
*
chars
)
{
return
reinterpret_cast
<
const
UChar
*
>
(
chars
)
;
}
inline
UChar
*
Char16ToUChar
(
char16_t
*
chars
)
{
return
reinterpret_cast
<
UChar
*
>
(
chars
)
;
}
#
endif
}
#
endif
