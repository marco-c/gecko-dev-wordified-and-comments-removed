#
ifndef
builtin_Intl_h
#
define
builtin_Intl_h
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jsalloc
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
if
ENABLE_INTL_API
#
include
"
unicode
/
utypes
.
h
"
#
endif
#
include
"
vm
/
NativeObject
.
h
"
class
JSLinearString
;
namespace
js
{
class
FreeOp
;
extern
JSObject
*
InitIntlClass
(
JSContext
*
cx
HandleObject
obj
)
;
class
SharedIntlData
{
struct
LinearStringLookup
{
union
{
const
JS
:
:
Latin1Char
*
latin1Chars
;
const
char16_t
*
twoByteChars
;
}
;
bool
isLatin1
;
size_t
length
;
JS
:
:
AutoCheckCannotGC
nogc
;
HashNumber
hash
=
0
;
explicit
LinearStringLookup
(
JSLinearString
*
string
)
:
isLatin1
(
string
-
>
hasLatin1Chars
(
)
)
length
(
string
-
>
length
(
)
)
{
if
(
isLatin1
)
latin1Chars
=
string
-
>
latin1Chars
(
nogc
)
;
else
twoByteChars
=
string
-
>
twoByteChars
(
nogc
)
;
}
}
;
private
:
using
TimeZoneName
=
JSAtom
*
;
struct
TimeZoneHasher
{
struct
Lookup
:
LinearStringLookup
{
explicit
Lookup
(
JSLinearString
*
timeZone
)
;
}
;
static
js
:
:
HashNumber
hash
(
const
Lookup
&
lookup
)
{
return
lookup
.
hash
;
}
static
bool
match
(
TimeZoneName
key
const
Lookup
&
lookup
)
;
}
;
using
TimeZoneSet
=
js
:
:
GCHashSet
<
TimeZoneName
TimeZoneHasher
js
:
:
SystemAllocPolicy
>
;
using
TimeZoneMap
=
js
:
:
GCHashMap
<
TimeZoneName
TimeZoneName
TimeZoneHasher
js
:
:
SystemAllocPolicy
>
;
TimeZoneSet
availableTimeZones
;
TimeZoneSet
ianaZonesTreatedAsLinksByICU
;
TimeZoneMap
ianaLinksCanonicalizedDifferentlyByICU
;
bool
timeZoneDataInitialized
=
false
;
bool
ensureTimeZones
(
JSContext
*
cx
)
;
public
:
bool
validateTimeZoneName
(
JSContext
*
cx
JS
:
:
HandleString
timeZone
MutableHandleAtom
result
)
;
bool
tryCanonicalizeTimeZoneConsistentWithIANA
(
JSContext
*
cx
JS
:
:
HandleString
timeZone
MutableHandleAtom
result
)
;
private
:
using
Locale
=
JSAtom
*
;
struct
LocaleHasher
{
struct
Lookup
:
LinearStringLookup
{
explicit
Lookup
(
JSLinearString
*
locale
)
;
}
;
static
js
:
:
HashNumber
hash
(
const
Lookup
&
lookup
)
{
return
lookup
.
hash
;
}
static
bool
match
(
Locale
key
const
Lookup
&
lookup
)
;
}
;
using
LocaleSet
=
js
:
:
GCHashSet
<
Locale
LocaleHasher
js
:
:
SystemAllocPolicy
>
;
LocaleSet
upperCaseFirstLocales
;
bool
upperCaseFirstInitialized
=
false
;
bool
ensureUpperCaseFirstLocales
(
JSContext
*
cx
)
;
public
:
bool
isUpperCaseFirst
(
JSContext
*
cx
JS
:
:
HandleString
locale
bool
*
isUpperFirst
)
;
public
:
void
destroyInstance
(
)
;
void
trace
(
JSTracer
*
trc
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
class
CollatorObject
:
public
NativeObject
{
public
:
static
const
Class
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
UCOLLATOR_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
object
slot
"
)
;
private
:
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
}
;
extern
MOZ_MUST_USE
bool
intl_Collator
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_Collator_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_availableCollations
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_CompareStrings
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_isUpperCaseFirst
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
class
NumberFormatObject
:
public
NativeObject
{
public
:
static
const
Class
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
UNUMBER_FORMAT_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
object
slot
"
)
;
private
:
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
}
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_numberingSystem
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_FormatNumber
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
class
DateTimeFormatObject
:
public
NativeObject
{
public
:
static
const
Class
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
UDATE_FORMAT_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
object
slot
"
)
;
private
:
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
}
;
extern
MOZ_MUST_USE
bool
intl_DateTimeFormat
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_DateTimeFormat_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_availableCalendars
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_IsValidTimeZoneName
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_canonicalizeTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_defaultTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_defaultTimeZoneOffset
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_patternForSkeleton
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_patternForStyle
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_FormatDateTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
class
PluralRulesObject
:
public
NativeObject
{
public
:
static
const
Class
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
UPLURAL_RULES_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
object
slot
"
)
;
private
:
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
}
;
extern
MOZ_MUST_USE
bool
intl_PluralRules_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_SelectPluralRule
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_GetPluralCategories
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_GetCalendarInfo
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_GetLocaleInfo
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_ComputeDisplayNames
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_toLocaleLowerCase
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_toLocaleUpperCase
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
#
if
ENABLE_INTL_API
inline
const
UChar
*
Char16ToUChar
(
const
char16_t
*
chars
)
{
return
reinterpret_cast
<
const
UChar
*
>
(
chars
)
;
}
inline
UChar
*
Char16ToUChar
(
char16_t
*
chars
)
{
return
reinterpret_cast
<
UChar
*
>
(
chars
)
;
}
inline
char16_t
*
UCharToChar16
(
UChar
*
chars
)
{
return
reinterpret_cast
<
char16_t
*
>
(
chars
)
;
}
inline
const
char16_t
*
UCharToChar16
(
const
UChar
*
chars
)
{
return
reinterpret_cast
<
const
char16_t
*
>
(
chars
)
;
}
#
endif
}
#
endif
