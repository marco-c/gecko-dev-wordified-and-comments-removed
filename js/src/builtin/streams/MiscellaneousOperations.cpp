#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
JS
:
:
Handle
;
using
JS
:
:
MutableHandle
;
using
JS
:
:
ToNumber
;
using
JS
:
:
Value
;
[
[
nodiscard
]
]
js
:
:
PromiseObject
*
js
:
:
PromiseRejectedWithPendingError
(
JSContext
*
cx
)
{
Rooted
<
Value
>
exn
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
exn
)
)
{
return
nullptr
;
}
return
PromiseObject
:
:
unforgeableReject
(
cx
exn
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
CreateAlgorithmFromUnderlyingMethod
(
JSContext
*
cx
Handle
<
Value
>
underlyingObject
const
char
*
methodNameForErrorMessage
Handle
<
PropertyName
*
>
methodName
MutableHandle
<
Value
>
method
)
{
cx
-
>
check
(
underlyingObject
)
;
cx
-
>
check
(
methodName
)
;
cx
-
>
check
(
method
)
;
MOZ_ASSERT
(
!
underlyingObject
.
isUndefined
(
)
)
;
if
(
!
GetProperty
(
cx
underlyingObject
methodName
method
)
)
{
return
false
;
}
if
(
!
method
.
isUndefined
(
)
)
{
if
(
!
IsCallable
(
method
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_FUNCTION
methodNameForErrorMessage
)
;
return
false
;
}
return
true
;
}
return
true
;
}
[
[
nodiscard
]
]
bool
js
:
:
InvokeOrNoop
(
JSContext
*
cx
Handle
<
Value
>
O
Handle
<
PropertyName
*
>
P
Handle
<
Value
>
arg
MutableHandle
<
Value
>
rval
)
{
cx
-
>
check
(
O
P
arg
)
;
MOZ_ASSERT
(
!
O
.
isUndefined
(
)
)
;
Rooted
<
Value
>
method
(
cx
)
;
if
(
!
GetProperty
(
cx
O
P
&
method
)
)
{
return
false
;
}
if
(
method
.
isUndefined
(
)
)
{
return
true
;
}
return
Call
(
cx
method
O
arg
rval
)
;
}
[
[
nodiscard
]
]
bool
js
:
:
ValidateAndNormalizeHighWaterMark
(
JSContext
*
cx
Handle
<
Value
>
highWaterMarkVal
double
*
highWaterMark
)
{
if
(
!
ToNumber
(
cx
highWaterMarkVal
highWaterMark
)
)
{
return
false
;
}
if
(
mozilla
:
:
IsNaN
(
*
highWaterMark
)
|
|
*
highWaterMark
<
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_STREAM_INVALID_HIGHWATERMARK
)
;
return
false
;
}
return
true
;
}
[
[
nodiscard
]
]
bool
js
:
:
MakeSizeAlgorithmFromSizeFunction
(
JSContext
*
cx
Handle
<
Value
>
size
)
{
cx
-
>
check
(
size
)
;
if
(
size
.
isUndefined
(
)
)
{
return
true
;
}
if
(
!
IsCallable
(
size
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_FUNCTION
"
ReadableStream
argument
options
.
size
"
)
;
return
false
;
}
return
true
;
}
