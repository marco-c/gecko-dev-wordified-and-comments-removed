#
ifndef
builtin_streams_ReadableStreamDefaultControllerOperations_h
#
define
builtin_streams_ReadableStreamDefaultControllerOperations_h
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
{
class
ReadableStream
;
class
ReadableStreamController
;
class
ReadableStreamDefaultController
;
[
[
nodiscard
]
]
extern
bool
ReadableStreamDefaultControllerEnqueue
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
chunk
)
;
[
[
nodiscard
]
]
extern
bool
ReadableStreamControllerError
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
e
)
;
[
[
nodiscard
]
]
extern
bool
ReadableStreamDefaultControllerClose
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
)
;
[
[
nodiscard
]
]
extern
double
ReadableStreamControllerGetDesiredSizeUnchecked
(
ReadableStreamController
*
controller
)
;
[
[
nodiscard
]
]
extern
bool
ReadableStreamControllerCallPullIfNeeded
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamController
*
>
unwrappedController
)
;
extern
void
ReadableStreamControllerClearAlgorithms
(
JS
:
:
Handle
<
ReadableStreamController
*
>
controller
)
;
enum
class
SourceAlgorithms
{
Script
Tee
}
;
[
[
nodiscard
]
]
extern
bool
SetUpReadableStreamDefaultController
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStream
*
>
stream
SourceAlgorithms
sourceAlgorithms
JS
:
:
Handle
<
JS
:
:
Value
>
underlyingSource
JS
:
:
Handle
<
JS
:
:
Value
>
pullMethod
JS
:
:
Handle
<
JS
:
:
Value
>
cancelMethod
double
highWaterMark
JS
:
:
Handle
<
JS
:
:
Value
>
size
)
;
[
[
nodiscard
]
]
extern
bool
SetUpReadableStreamDefaultControllerFromUnderlyingSource
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStream
*
>
stream
JS
:
:
Handle
<
JS
:
:
Value
>
underlyingSource
double
highWaterMark
JS
:
:
Handle
<
JS
:
:
Value
>
sizeAlgorithm
)
;
}
#
endif
