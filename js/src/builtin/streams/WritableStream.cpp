#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultControllerOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
RealmOptions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
js
:
:
CreateWritableStreamDefaultWriter
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
ReturnPromiseRejectedWithPendingError
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
js
:
:
WritableStream
;
using
js
:
:
WritableStreamAbort
;
using
js
:
:
WritableStreamClose
;
using
js
:
:
WritableStreamCloseQueuedOrInFlight
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
bool
WritableStream
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
MOZ_ASSERT
(
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getWritableStreamsEnabled
(
)
"
WritableStream
should
be
enabled
in
this
realm
if
we
reach
here
"
)
;
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
WritableStream
"
)
)
{
return
false
;
}
Rooted
<
Value
>
underlyingSink
(
cx
args
.
get
(
0
)
)
;
if
(
underlyingSink
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
underlyingSink
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
Value
>
strategy
(
cx
args
.
get
(
1
)
)
;
if
(
strategy
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
strategy
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_WritableStream
&
proto
)
)
{
return
false
;
}
Rooted
<
WritableStream
*
>
stream
(
cx
WritableStream
:
:
create
(
cx
nullptr
proto
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
Value
>
size
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
size
&
size
)
)
{
return
false
;
}
Rooted
<
Value
>
highWaterMarkVal
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMarkVal
)
)
{
return
false
;
}
Rooted
<
Value
>
type
(
cx
)
;
if
(
!
GetProperty
(
cx
underlyingSink
cx
-
>
names
(
)
.
type
&
type
)
)
{
return
false
;
}
if
(
!
type
.
isUndefined
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_UNDERLYINGSINK_TYPE_WRONG
)
;
return
false
;
}
if
(
!
MakeSizeAlgorithmFromSizeFunction
(
cx
size
)
)
{
return
false
;
}
double
highWaterMark
;
if
(
highWaterMarkVal
.
isUndefined
(
)
)
{
highWaterMark
=
1
;
}
else
{
if
(
!
ValidateAndNormalizeHighWaterMark
(
cx
highWaterMarkVal
&
highWaterMark
)
)
{
return
false
;
}
}
if
(
!
SetUpWritableStreamDefaultControllerFromUnderlyingSink
(
cx
stream
underlyingSink
highWaterMark
size
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
stream
)
;
return
true
;
}
static
bool
WritableStream_locked
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
WritableStream
>
(
cx
args
"
get
locked
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
unwrappedStream
-
>
isLocked
(
)
)
;
return
true
;
}
static
bool
WritableStream_abort
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
WritableStream
>
(
cx
args
"
abort
"
)
)
;
if
(
!
unwrappedStream
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedStream
-
>
isLocked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_USE_LOCKED_WRITABLESTREAM
"
abort
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
WritableStreamAbort
(
cx
unwrappedStream
args
.
get
(
0
)
)
;
if
(
!
promise
)
{
return
false
;
}
cx
-
>
check
(
promise
)
;
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
bool
WritableStream_close
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
WritableStream
>
(
cx
args
"
close
"
)
)
;
if
(
!
unwrappedStream
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedStream
-
>
isLocked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_USE_LOCKED_WRITABLESTREAM
"
close
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAM_CLOSE_CLOSING_OR_CLOSED
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
WritableStreamClose
(
cx
unwrappedStream
)
;
if
(
!
promise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
bool
WritableStream_getWriter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
WritableStream
>
(
cx
args
"
getWriter
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
auto
*
writer
=
CreateWritableStreamDefaultWriter
(
cx
unwrappedStream
)
;
if
(
!
writer
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
writer
)
;
return
true
;
}
static
const
JSFunctionSpec
WritableStream_methods
[
]
=
{
JS_FN
(
"
abort
"
WritableStream_abort
1
0
)
JS_FN
(
"
close
"
WritableStream_close
0
0
)
JS_FN
(
"
getWriter
"
WritableStream_getWriter
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
WritableStream_properties
[
]
=
{
JS_PSG
(
"
locked
"
WritableStream_locked
0
)
JS_PS_END
}
;
JS_STREAMS_CLASS_SPEC
(
WritableStream
0
SlotCount
0
JSCLASS_SLOT0_IS_NSISUPPORTS
JS_NULL_CLASS_OPS
)
;
