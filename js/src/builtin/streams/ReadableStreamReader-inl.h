#
ifndef
builtin_streams_ReadableStreamReader_inl_h
#
define
builtin_streams_ReadableStreamReader_inl_h
#
include
"
builtin
/
streams
/
ReadableStreamReader
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
namespace
js
{
[
[
nodiscard
]
]
inline
ReadableStream
*
UnwrapStreamFromReader
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamReader
*
>
reader
)
{
MOZ_ASSERT
(
reader
-
>
hasStream
(
)
)
;
return
UnwrapInternalSlot
<
ReadableStream
>
(
cx
reader
ReadableStreamReader
:
:
Slot_Stream
)
;
}
[
[
nodiscard
]
]
inline
ReadableStreamReader
*
UnwrapReaderFromStream
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStream
*
>
stream
)
{
return
UnwrapInternalSlot
<
ReadableStreamReader
>
(
cx
stream
ReadableStream
:
:
Slot_Reader
)
;
}
[
[
nodiscard
]
]
inline
ReadableStreamReader
*
UnwrapReaderFromStreamNoThrow
(
ReadableStream
*
stream
)
{
JSObject
*
readerObj
=
&
stream
-
>
getFixedSlot
(
ReadableStream
:
:
Slot_Reader
)
.
toObject
(
)
;
if
(
IsProxy
(
readerObj
)
)
{
if
(
JS_IsDeadWrapper
(
readerObj
)
)
{
return
nullptr
;
}
readerObj
=
readerObj
-
>
maybeUnwrapAs
<
ReadableStreamReader
>
(
)
;
if
(
!
readerObj
)
{
return
nullptr
;
}
}
return
&
readerObj
-
>
as
<
ReadableStreamReader
>
(
)
;
}
}
#
endif
