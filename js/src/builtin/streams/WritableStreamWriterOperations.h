#
ifndef
builtin_streams_WritableStreamWriterOperations_h
#
define
builtin_streams_WritableStreamWriterOperations_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
js
{
class
PromiseObject
;
class
WritableStreamDefaultWriter
;
extern
JSObject
*
WritableStreamDefaultWriterAbort
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
JS
:
:
Handle
<
JS
:
:
Value
>
reason
)
;
extern
PromiseObject
*
WritableStreamDefaultWriterClose
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
)
;
extern
PromiseObject
*
WritableStreamDefaultWriterCloseWithErrorPropagation
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultWriterEnsureClosedPromiseRejected
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultWriterEnsureReadyPromiseRejected
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultWriterGetDesiredSize
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
JS
:
:
MutableHandle
<
JS
:
:
Value
>
size
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultWriterRelease
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
)
;
extern
PromiseObject
*
WritableStreamDefaultWriterWrite
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
JS
:
:
Handle
<
JS
:
:
Value
>
chunk
)
;
}
#
endif
