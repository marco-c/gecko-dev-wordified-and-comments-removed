#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamReader
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
js
:
:
ForAuthorCodeBool
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
ListObject
;
using
js
:
:
NewObjectWithClassProto
;
using
js
:
:
ReadableStream
;
using
js
:
:
ReadableStreamDefaultReader
;
using
js
:
:
ReadableStreamReader
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
MOZ_MUST_USE
ReadableStreamDefaultReader
*
js
:
:
CreateReadableStreamDefaultReader
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
ForAuthorCodeBool
forAuthorCode
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
NewObjectWithClassProto
<
ReadableStreamDefaultReader
>
(
cx
proto
)
)
;
if
(
!
reader
)
{
return
nullptr
;
}
if
(
unwrappedStream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED
)
;
return
nullptr
;
}
if
(
!
ReadableStreamReaderGenericInitialize
(
cx
reader
unwrappedStream
forAuthorCode
)
)
{
return
nullptr
;
}
return
reader
;
}
bool
ReadableStreamDefaultReader
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ReadableStreamDefaultReader
"
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Null
&
proto
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckArgument
<
ReadableStream
>
(
cx
args
"
ReadableStreamDefaultReader
constructor
"
0
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
Rooted
<
JSObject
*
>
reader
(
cx
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
ForAuthorCodeBool
:
:
Yes
proto
)
)
;
if
(
!
reader
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
reader
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_closed
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
UnwrapAndTypeCheckThis
<
ReadableStreamDefaultReader
>
(
cx
args
"
get
closed
"
)
)
;
if
(
!
unwrappedReader
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
closedPromise
(
cx
unwrappedReader
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
closedPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_cancel
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
UnwrapAndTypeCheckThis
<
ReadableStreamDefaultReader
>
(
cx
args
"
cancel
"
)
)
;
if
(
!
unwrappedReader
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedReader
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_OWNED
"
cancel
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
cancelPromise
=
ReadableStreamReaderGenericCancel
(
cx
unwrappedReader
args
.
get
(
0
)
)
;
if
(
!
cancelPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
cancelPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_read
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
UnwrapAndTypeCheckThis
<
ReadableStreamDefaultReader
>
(
cx
args
"
read
"
)
)
;
if
(
!
unwrappedReader
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedReader
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_OWNED
"
read
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
readPromise
=
js
:
:
ReadableStreamDefaultReaderRead
(
cx
unwrappedReader
)
;
if
(
!
readPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
readPromise
)
;
return
true
;
}
static
bool
ReadableStreamDefaultReader_releaseLock
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
UnwrapAndTypeCheckThis
<
ReadableStreamDefaultReader
>
(
cx
args
"
releaseLock
"
)
)
;
if
(
!
reader
)
{
return
false
;
}
if
(
!
reader
-
>
hasStream
(
)
)
{
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
Value
val
=
reader
-
>
getFixedSlot
(
ReadableStreamReader
:
:
Slot_Requests
)
;
if
(
!
val
.
isUndefined
(
)
)
{
ListObject
*
readRequests
=
&
val
.
toObject
(
)
.
as
<
ListObject
>
(
)
;
if
(
readRequests
-
>
length
(
)
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_EMPTY
"
releaseLock
"
)
;
return
false
;
}
}
if
(
!
js
:
:
ReadableStreamReaderGenericRelease
(
cx
reader
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
const
JSFunctionSpec
ReadableStreamDefaultReader_methods
[
]
=
{
JS_FN
(
"
cancel
"
ReadableStreamDefaultReader_cancel
1
0
)
JS_FN
(
"
read
"
ReadableStreamDefaultReader_read
0
0
)
JS_FN
(
"
releaseLock
"
ReadableStreamDefaultReader_releaseLock
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
ReadableStreamDefaultReader_properties
[
]
=
{
JS_PSG
(
"
closed
"
ReadableStreamDefaultReader_closed
0
)
JS_PS_END
}
;
const
JSClass
ReadableStreamReader
:
:
class_
=
{
"
ReadableStreamReader
"
}
;
JS_STREAMS_CLASS_SPEC
(
ReadableStreamDefaultReader
1
SlotCount
js
:
:
ClassSpec
:
:
DontDefineConstructor
0
JS_NULL_CLASS_OPS
)
;
