#
include
"
builtin
/
streams
/
PullIntoDescriptor
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
js
:
:
PullIntoDescriptor
;
using
JS
:
:
Handle
;
using
JS
:
:
Int32Value
;
using
JS
:
:
ObjectOrNullValue
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
PullIntoDescriptor
*
PullIntoDescriptor
:
:
create
(
JSContext
*
cx
Handle
<
ArrayBufferObject
*
>
buffer
uint32_t
byteOffset
uint32_t
byteLength
uint32_t
bytesFilled
uint32_t
elementSize
Handle
<
JSObject
*
>
ctor
ReaderType
readerType
)
{
Rooted
<
PullIntoDescriptor
*
>
descriptor
(
cx
NewBuiltinClassInstance
<
PullIntoDescriptor
>
(
cx
)
)
;
if
(
!
descriptor
)
{
return
nullptr
;
}
descriptor
-
>
setFixedSlot
(
Slot_buffer
ObjectValue
(
*
buffer
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_Ctor
ObjectOrNullValue
(
ctor
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ByteOffset
Int32Value
(
byteOffset
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ByteLength
Int32Value
(
byteLength
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_BytesFilled
Int32Value
(
bytesFilled
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ElementSize
Int32Value
(
elementSize
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ReaderType
Int32Value
(
static_cast
<
int32_t
>
(
readerType
)
)
)
;
return
descriptor
;
}
const
JSClass
PullIntoDescriptor
:
:
class_
=
{
"
PullIntoDescriptor
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
