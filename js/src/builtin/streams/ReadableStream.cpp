#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamInternals
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamReader
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Stream
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
js
:
:
CanGC
;
using
js
:
:
CreateReadableStreamDefaultReader
;
using
js
:
:
EqualStrings
;
using
js
:
:
ForAuthorCodeBool
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
NativeObject
;
using
js
:
:
NewBuiltinClassInstance
;
using
js
:
:
NewDenseFullyAllocatedArray
;
using
js
:
:
PlainObject
;
using
js
:
:
ReadableStream
;
using
js
:
:
ReadableStreamTee
;
using
js
:
:
ReturnPromiseRejectedWithPendingError
;
using
js
:
:
ToString
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
ReadableStream
*
ReadableStream
:
:
createExternalSourceStream
(
JSContext
*
cx
JS
:
:
ReadableStreamUnderlyingSource
*
source
void
*
nsISupportsObject_alreadyAddreffed
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
ReadableStream
*
>
stream
(
cx
create
(
cx
nsISupportsObject_alreadyAddreffed
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
if
(
!
SetUpExternalReadableByteStreamController
(
cx
stream
source
)
)
{
return
nullptr
;
}
return
stream
;
}
bool
ReadableStream
:
:
constructor
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ReadableStream
"
)
)
{
return
false
;
}
Rooted
<
Value
>
underlyingSource
(
cx
args
.
get
(
0
)
)
;
if
(
underlyingSource
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
underlyingSource
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
Value
>
strategy
(
cx
args
.
get
(
1
)
)
;
if
(
strategy
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
strategy
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_ReadableStream
&
proto
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
stream
(
cx
ReadableStream
:
:
create
(
cx
nullptr
proto
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
Value
>
size
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
size
&
size
)
)
{
return
false
;
}
Rooted
<
Value
>
highWaterMarkVal
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMarkVal
)
)
{
return
false
;
}
Rooted
<
Value
>
type
(
cx
)
;
if
(
!
GetProperty
(
cx
underlyingSource
cx
-
>
names
(
)
.
type
&
type
)
)
{
return
false
;
}
Rooted
<
JSString
*
>
typeString
(
cx
ToString
<
CanGC
>
(
cx
type
)
)
;
if
(
!
typeString
)
{
return
false
;
}
bool
equal
;
if
(
!
EqualStrings
(
cx
typeString
cx
-
>
names
(
)
.
bytes
&
equal
)
)
{
return
false
;
}
if
(
equal
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_BYTES_TYPE_NOT_IMPLEMENTED
)
;
return
false
;
}
if
(
type
.
isUndefined
(
)
)
{
if
(
!
MakeSizeAlgorithmFromSizeFunction
(
cx
size
)
)
{
return
false
;
}
double
highWaterMark
;
if
(
highWaterMarkVal
.
isUndefined
(
)
)
{
highWaterMark
=
1
;
}
else
{
if
(
!
ValidateAndNormalizeHighWaterMark
(
cx
highWaterMarkVal
&
highWaterMark
)
)
{
return
false
;
}
}
if
(
!
SetUpReadableStreamDefaultControllerFromUnderlyingSource
(
cx
stream
underlyingSource
highWaterMark
size
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
stream
)
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_UNDERLYINGSOURCE_TYPE_WRONG
)
;
return
false
;
}
static
MOZ_MUST_USE
bool
ReadableStream_locked
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
get
locked
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
unwrappedStream
-
>
locked
(
)
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStream_cancel
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
cancel
"
)
)
;
if
(
!
unwrappedStream
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedStream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED_METHOD
"
cancel
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
cancelPromise
(
cx
js
:
:
ReadableStreamCancel
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
;
if
(
!
cancelPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
cancelPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStream_getReader
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
Value
>
optionsVal
(
cx
args
.
get
(
0
)
)
;
if
(
optionsVal
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
optionsVal
.
setObject
(
*
emptyObj
)
;
}
Rooted
<
Value
>
modeVal
(
cx
)
;
if
(
!
GetProperty
(
cx
optionsVal
cx
-
>
names
(
)
.
mode
&
modeVal
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
getReader
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
Rooted
<
JSObject
*
>
reader
(
cx
)
;
if
(
modeVal
.
isUndefined
(
)
)
{
reader
=
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
ForAuthorCodeBool
:
:
Yes
)
;
}
else
{
Rooted
<
JSString
*
>
mode
(
cx
ToString
<
CanGC
>
(
cx
modeVal
)
)
;
if
(
!
mode
)
{
return
false
;
}
bool
equal
;
if
(
!
EqualStrings
(
cx
mode
cx
-
>
names
(
)
.
byob
&
equal
)
)
{
return
false
;
}
if
(
equal
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_BYTES_TYPE_NOT_IMPLEMENTED
)
;
return
false
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_INVALID_READER_MODE
)
;
return
false
;
}
if
(
!
reader
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
reader
)
;
return
true
;
}
static
bool
ReadableStream_tee
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
tee
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
branch1
(
cx
)
;
Rooted
<
ReadableStream
*
>
branch2
(
cx
)
;
if
(
!
ReadableStreamTee
(
cx
unwrappedStream
false
&
branch1
&
branch2
)
)
{
return
false
;
}
Rooted
<
NativeObject
*
>
branches
(
cx
NewDenseFullyAllocatedArray
(
cx
2
)
)
;
if
(
!
branches
)
{
return
false
;
}
branches
-
>
setDenseInitializedLength
(
2
)
;
branches
-
>
initDenseElement
(
0
ObjectValue
(
*
branch1
)
)
;
branches
-
>
initDenseElement
(
1
ObjectValue
(
*
branch2
)
)
;
args
.
rval
(
)
.
setObject
(
*
branches
)
;
return
true
;
}
static
const
JSFunctionSpec
ReadableStream_methods
[
]
=
{
JS_FN
(
"
cancel
"
ReadableStream_cancel
1
0
)
JS_FN
(
"
getReader
"
ReadableStream_getReader
0
0
)
JS_FN
(
"
tee
"
ReadableStream_tee
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
ReadableStream_properties
[
]
=
{
JS_PSG
(
"
locked
"
ReadableStream_locked
0
)
JS_PS_END
}
;
JS_STREAMS_CLASS_SPEC
(
ReadableStream
0
SlotCount
0
JSCLASS_PRIVATE_IS_NSISUPPORTS
|
JSCLASS_HAS_PRIVATE
JS_NULL_CLASS_OPS
)
;
