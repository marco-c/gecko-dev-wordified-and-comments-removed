#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamController
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamDefaultControllerOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamInternals
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamOperations
.
h
"
#
include
"
builtin
/
streams
/
ReadableStreamReader
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Stream
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Some
;
using
js
:
:
CanGC
;
using
js
:
:
ClassSpec
;
using
js
:
:
CreateReadableStreamDefaultReader
;
using
js
:
:
EqualStrings
;
using
js
:
:
ForAuthorCodeBool
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
NativeObject
;
using
js
:
:
NewBuiltinClassInstance
;
using
js
:
:
NewDenseFullyAllocatedArray
;
using
js
:
:
PlainObject
;
using
js
:
:
ReadableStream
;
using
js
:
:
ReadableStreamPipeTo
;
using
js
:
:
ReadableStreamTee
;
using
js
:
:
ReturnPromiseRejectedWithPendingError
;
using
js
:
:
ToString
;
using
js
:
:
UnwrapAndTypeCheckArgument
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
js
:
:
UnwrapAndTypeCheckValue
;
using
js
:
:
WritableStream
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
JS
:
:
ReadableStreamMode
ReadableStream
:
:
mode
(
)
const
{
ReadableStreamController
*
controller
=
this
-
>
controller
(
)
;
if
(
controller
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
return
JS
:
:
ReadableStreamMode
:
:
Default
;
}
return
controller
-
>
as
<
ReadableByteStreamController
>
(
)
.
hasExternalSource
(
)
?
JS
:
:
ReadableStreamMode
:
:
ExternalSource
:
JS
:
:
ReadableStreamMode
:
:
Byte
;
}
ReadableStream
*
ReadableStream
:
:
createExternalSourceStream
(
JSContext
*
cx
JS
:
:
ReadableStreamUnderlyingSource
*
source
void
*
nsISupportsObject_alreadyAddreffed
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
ReadableStream
*
>
stream
(
cx
create
(
cx
nsISupportsObject_alreadyAddreffed
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
if
(
!
SetUpExternalReadableByteStreamController
(
cx
stream
source
)
)
{
return
nullptr
;
}
return
stream
;
}
bool
ReadableStream
:
:
constructor
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ReadableStream
"
)
)
{
return
false
;
}
Rooted
<
Value
>
underlyingSource
(
cx
args
.
get
(
0
)
)
;
if
(
underlyingSource
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
underlyingSource
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
Value
>
strategy
(
cx
args
.
get
(
1
)
)
;
if
(
strategy
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
strategy
=
ObjectValue
(
*
emptyObj
)
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_ReadableStream
&
proto
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
stream
(
cx
ReadableStream
:
:
create
(
cx
nullptr
proto
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
Value
>
size
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
size
&
size
)
)
{
return
false
;
}
Rooted
<
Value
>
highWaterMarkVal
(
cx
)
;
if
(
!
GetProperty
(
cx
strategy
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMarkVal
)
)
{
return
false
;
}
Rooted
<
Value
>
type
(
cx
)
;
if
(
!
GetProperty
(
cx
underlyingSource
cx
-
>
names
(
)
.
type
&
type
)
)
{
return
false
;
}
Rooted
<
JSString
*
>
typeString
(
cx
ToString
<
CanGC
>
(
cx
type
)
)
;
if
(
!
typeString
)
{
return
false
;
}
bool
equal
;
if
(
!
EqualStrings
(
cx
typeString
cx
-
>
names
(
)
.
bytes
&
equal
)
)
{
return
false
;
}
if
(
equal
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_BYTES_TYPE_NOT_IMPLEMENTED
)
;
return
false
;
}
if
(
type
.
isUndefined
(
)
)
{
if
(
!
MakeSizeAlgorithmFromSizeFunction
(
cx
size
)
)
{
return
false
;
}
double
highWaterMark
;
if
(
highWaterMarkVal
.
isUndefined
(
)
)
{
highWaterMark
=
1
;
}
else
{
if
(
!
ValidateAndNormalizeHighWaterMark
(
cx
highWaterMarkVal
&
highWaterMark
)
)
{
return
false
;
}
}
if
(
!
SetUpReadableStreamDefaultControllerFromUnderlyingSource
(
cx
stream
underlyingSource
highWaterMark
size
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
stream
)
;
return
true
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_UNDERLYINGSOURCE_TYPE_WRONG
)
;
return
false
;
}
[
[
nodiscard
]
]
static
bool
ReadableStream_locked
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
get
locked
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
unwrappedStream
-
>
locked
(
)
)
;
return
true
;
}
[
[
nodiscard
]
]
static
bool
ReadableStream_cancel
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
cancel
"
)
)
;
if
(
!
unwrappedStream
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedStream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED_METHOD
"
cancel
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
cancelPromise
(
cx
js
:
:
ReadableStreamCancel
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
;
if
(
!
cancelPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
cancelPromise
)
;
return
true
;
}
enum
class
ReadableStreamReaderMode
{
Byob
}
;
[
[
nodiscard
]
]
static
bool
ReadableStream_getReader
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
getReader
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
Rooted
<
Value
>
optionsVal
(
cx
args
.
get
(
0
)
)
;
if
(
!
optionsVal
.
isNullOrUndefined
(
)
&
&
!
optionsVal
.
isObject
(
)
)
{
ReportValueError
(
cx
JSMSG_CANT_CONVERT_TO
JSDVG_IGNORE_STACK
optionsVal
nullptr
"
dictionary
"
)
;
return
false
;
}
Maybe
<
ReadableStreamReaderMode
>
mode
;
if
(
optionsVal
.
isObject
(
)
)
{
Rooted
<
Value
>
modeVal
(
cx
)
;
if
(
!
GetProperty
(
cx
optionsVal
cx
-
>
names
(
)
.
mode
&
modeVal
)
)
{
return
false
;
}
if
(
!
modeVal
.
isUndefined
(
)
)
{
Rooted
<
JSString
*
>
modeStr
(
cx
ToString
<
CanGC
>
(
cx
modeVal
)
)
;
if
(
!
modeStr
)
{
return
false
;
}
bool
equal
;
if
(
!
EqualStrings
(
cx
modeStr
cx
-
>
names
(
)
.
byob
&
equal
)
)
{
return
false
;
}
if
(
!
equal
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_INVALID_READER_MODE
)
;
return
false
;
}
mode
=
Some
(
ReadableStreamReaderMode
:
:
Byob
)
;
}
}
Rooted
<
JSObject
*
>
reader
(
cx
)
;
if
(
mode
.
isNothing
(
)
)
{
reader
=
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
ForAuthorCodeBool
:
:
Yes
)
;
}
else
{
MOZ_ASSERT
(
mode
.
value
(
)
=
=
ReadableStreamReaderMode
:
:
Byob
)
;
reader
=
CreateReadableStreamBYOBReader
(
cx
unwrappedStream
ForAuthorCodeBool
:
:
Yes
)
;
}
if
(
!
reader
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
reader
)
;
return
true
;
}
static
bool
ReadableStream_pipeTo
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
Value
>
options
(
cx
args
.
get
(
1
)
)
;
if
(
options
.
isUndefined
(
)
)
{
JSObject
*
emptyObj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
emptyObj
)
{
return
false
;
}
options
.
setObject
(
*
emptyObj
)
;
}
bool
preventClose
preventAbort
preventCancel
;
Rooted
<
Value
>
signalVal
(
cx
)
;
{
auto
&
v
=
signalVal
;
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
preventClose
&
v
)
)
{
return
false
;
}
preventClose
=
JS
:
:
ToBoolean
(
v
)
;
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
preventAbort
&
v
)
)
{
return
false
;
}
preventAbort
=
JS
:
:
ToBoolean
(
v
)
;
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
preventCancel
&
v
)
)
{
return
false
;
}
preventCancel
=
JS
:
:
ToBoolean
(
v
)
;
}
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
signal
&
signalVal
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
unwrappedThis
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
pipeTo
"
)
)
;
if
(
!
unwrappedThis
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
WritableStream
*
>
unwrappedDest
(
cx
UnwrapAndTypeCheckArgument
<
WritableStream
>
(
cx
args
"
pipeTo
"
0
)
)
;
if
(
!
unwrappedDest
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
signal
(
cx
nullptr
)
;
if
(
!
signalVal
.
isUndefined
(
)
)
{
if
(
!
UnwrapAndTypeCheckValue
(
cx
signalVal
cx
-
>
runtime
(
)
-
>
maybeAbortSignalClass
(
)
[
cx
]
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_PIPETO_BAD_SIGNAL
)
;
}
)
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
signal
=
&
signalVal
.
toObject
(
)
;
}
if
(
unwrappedThis
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED_METHOD
"
pipeTo
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedDest
-
>
isLocked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAM_ALREADY_LOCKED
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
ReadableStreamPipeTo
(
cx
unwrappedThis
unwrappedDest
preventClose
preventAbort
preventCancel
signal
)
;
if
(
!
promise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
bool
ReadableStream_tee
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckThis
<
ReadableStream
>
(
cx
args
"
tee
"
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
branch1
(
cx
)
;
Rooted
<
ReadableStream
*
>
branch2
(
cx
)
;
if
(
!
ReadableStreamTee
(
cx
unwrappedStream
false
&
branch1
&
branch2
)
)
{
return
false
;
}
Rooted
<
NativeObject
*
>
branches
(
cx
NewDenseFullyAllocatedArray
(
cx
2
)
)
;
if
(
!
branches
)
{
return
false
;
}
branches
-
>
setDenseInitializedLength
(
2
)
;
branches
-
>
initDenseElement
(
0
ObjectValue
(
*
branch1
)
)
;
branches
-
>
initDenseElement
(
1
ObjectValue
(
*
branch2
)
)
;
args
.
rval
(
)
.
setObject
(
*
branches
)
;
return
true
;
}
static
const
JSFunctionSpec
ReadableStream_methods
[
]
=
{
JS_FN
(
"
cancel
"
ReadableStream_cancel
0
JSPROP_ENUMERATE
)
JS_FN
(
"
getReader
"
ReadableStream_getReader
0
JSPROP_ENUMERATE
)
JS_FN
(
"
tee
"
ReadableStream_tee
0
JSPROP_ENUMERATE
)
JS_FS_END
}
;
static
const
JSPropertySpec
ReadableStream_properties
[
]
=
{
JS_PSG
(
"
locked
"
ReadableStream_locked
JSPROP_ENUMERATE
)
JS_STRING_SYM_PS
(
toStringTag
"
ReadableStream
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
bool
FinishReadableStreamClassInit
(
JSContext
*
cx
Handle
<
JSObject
*
>
ctor
Handle
<
JSObject
*
>
proto
)
{
const
auto
&
rco
=
cx
-
>
realm
(
)
-
>
creationOptions
(
)
;
if
(
rco
.
getStreamsEnabled
(
)
&
&
rco
.
getWritableStreamsEnabled
(
)
&
&
rco
.
getReadableStreamPipeToEnabled
(
)
)
{
Rooted
<
jsid
>
pipeTo
(
cx
NameToId
(
cx
-
>
names
(
)
.
pipeTo
)
)
;
if
(
!
DefineFunction
(
cx
proto
pipeTo
ReadableStream_pipeTo
2
JSPROP_RESOLVING
|
JSPROP_ENUMERATE
)
)
{
return
false
;
}
}
return
true
;
}
const
ClassSpec
ReadableStream
:
:
classSpec_
=
{
js
:
:
GenericCreateConstructor
<
ReadableStream
:
:
constructor
0
js
:
:
gc
:
:
AllocKind
:
:
FUNCTION
>
js
:
:
GenericCreatePrototype
<
ReadableStream
>
nullptr
nullptr
ReadableStream_methods
ReadableStream_properties
FinishReadableStreamClassInit
0
}
;
const
JSClass
ReadableStream
:
:
class_
=
{
"
ReadableStream
"
JSCLASS_HAS_RESERVED_SLOTS
(
ReadableStream
:
:
SlotCount
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_ReadableStream
)
|
JSCLASS_SLOT0_IS_NSISUPPORTS
JS_NULL_CLASS_OPS
&
ReadableStream
:
:
classSpec_
}
;
const
JSClass
ReadableStream
:
:
protoClass_
=
{
"
ReadableStream
.
prototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_ReadableStream
)
JS_NULL_CLASS_OPS
&
ReadableStream
:
:
classSpec_
}
;
