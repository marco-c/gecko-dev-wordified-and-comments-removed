#
ifndef
builtin_streams_ReadableStreamReader_h
#
define
builtin_streams_ReadableStreamReader_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
List
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
struct
JSContext
;
namespace
js
{
class
ReadableStream
;
enum
class
ForAuthorCodeBool
{
No
Yes
}
;
class
ReadableStreamReader
:
public
NativeObject
{
public
:
enum
Slots
{
Slot_Stream
Slot_Requests
Slot_ClosedPromise
Slot_ForAuthorCode
SlotCount
}
;
bool
hasStream
(
)
const
{
return
!
getFixedSlot
(
Slot_Stream
)
.
isUndefined
(
)
;
}
void
setStream
(
JSObject
*
stream
)
{
setFixedSlot
(
Slot_Stream
JS
:
:
ObjectValue
(
*
stream
)
)
;
}
void
clearStream
(
)
{
setFixedSlot
(
Slot_Stream
JS
:
:
UndefinedValue
(
)
)
;
}
bool
isClosed
(
)
{
return
!
hasStream
(
)
;
}
ForAuthorCodeBool
forAuthorCode
(
)
const
{
return
getFixedSlot
(
Slot_ForAuthorCode
)
.
toBoolean
(
)
?
ForAuthorCodeBool
:
:
Yes
:
ForAuthorCodeBool
:
:
No
;
}
void
setForAuthorCode
(
ForAuthorCodeBool
value
)
{
setFixedSlot
(
Slot_ForAuthorCode
JS
:
:
BooleanValue
(
value
=
=
ForAuthorCodeBool
:
:
Yes
)
)
;
}
ListObject
*
requests
(
)
const
{
return
&
getFixedSlot
(
Slot_Requests
)
.
toObject
(
)
.
as
<
ListObject
>
(
)
;
}
void
clearRequests
(
)
{
setFixedSlot
(
Slot_Requests
JS
:
:
UndefinedValue
(
)
)
;
}
JSObject
*
closedPromise
(
)
const
{
return
&
getFixedSlot
(
Slot_ClosedPromise
)
.
toObject
(
)
;
}
void
setClosedPromise
(
JSObject
*
wrappedPromise
)
{
setFixedSlot
(
Slot_ClosedPromise
JS
:
:
ObjectValue
(
*
wrappedPromise
)
)
;
}
static
const
JSClass
class_
;
}
;
class
ReadableStreamDefaultReader
:
public
ReadableStreamReader
{
public
:
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
JSClass
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
JSClass
protoClass_
;
}
;
extern
MOZ_MUST_USE
ReadableStreamDefaultReader
*
CreateReadableStreamDefaultReader
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStream
*
>
unwrappedStream
ForAuthorCodeBool
forAuthorCode
=
ForAuthorCodeBool
:
:
No
JS
:
:
Handle
<
JSObject
*
>
proto
=
nullptr
)
;
extern
MOZ_MUST_USE
JSObject
*
ReadableStreamReaderGenericCancel
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamReader
*
>
unwrappedReader
JS
:
:
Handle
<
JS
:
:
Value
>
reason
)
;
extern
MOZ_MUST_USE
bool
ReadableStreamReaderGenericInitialize
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamReader
*
>
reader
JS
:
:
Handle
<
ReadableStream
*
>
unwrappedStream
ForAuthorCodeBool
forAuthorCode
)
;
extern
MOZ_MUST_USE
bool
ReadableStreamReaderGenericRelease
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamReader
*
>
unwrappedReader
)
;
extern
MOZ_MUST_USE
JSObject
*
ReadableStreamDefaultReaderRead
(
JSContext
*
cx
JS
:
:
Handle
<
ReadableStreamDefaultReader
*
>
unwrappedReader
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
ReadableStreamReader
>
(
)
const
{
return
is
<
js
:
:
ReadableStreamDefaultReader
>
(
)
;
}
#
endif
