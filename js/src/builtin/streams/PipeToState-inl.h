#
ifndef
builtin_streams_PipeToState_inl_h
#
define
builtin_streams_PipeToState_inl_h
#
include
"
builtin
/
streams
/
PipeToState
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSObject
;
namespace
js
{
[
[
nodiscard
]
]
inline
JSObject
*
UnwrapSignalFromPipeToState
(
JSContext
*
cx
JS
:
:
Handle
<
PipeToState
*
>
pipeToState
)
{
cx
-
>
check
(
pipeToState
)
;
MOZ_ASSERT
(
pipeToState
-
>
hasSignal
(
)
)
;
return
UnwrapAndDowncastValue
(
cx
pipeToState
-
>
getFixedSlot
(
PipeToState
:
:
Slot_Signal
)
cx
-
>
runtime
(
)
-
>
maybeAbortSignalClass
(
)
)
;
}
}
#
endif
