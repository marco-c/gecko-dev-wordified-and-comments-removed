#
ifndef
builtin_streams_WritableStreamDefaultControllerOperations_h
#
define
builtin_streams_WritableStreamDefaultControllerOperations_h
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
{
class
WritableStream
;
class
WritableStreamDefaultController
;
extern
JSObject
*
WritableStreamControllerAbortSteps
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
reason
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamControllerErrorSteps
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamControllerStartHandler
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamControllerStartFailedHandler
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
enum
class
SinkAlgorithms
{
Script
Transform
}
;
[
[
nodiscard
]
]
extern
bool
SetUpWritableStreamDefaultController
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
stream
SinkAlgorithms
algorithms
JS
:
:
Handle
<
JS
:
:
Value
>
underlyingSink
JS
:
:
Handle
<
JS
:
:
Value
>
writeMethod
JS
:
:
Handle
<
JS
:
:
Value
>
closeMethod
JS
:
:
Handle
<
JS
:
:
Value
>
abortMethod
double
highWaterMark
JS
:
:
Handle
<
JS
:
:
Value
>
size
)
;
[
[
nodiscard
]
]
extern
bool
SetUpWritableStreamDefaultControllerFromUnderlyingSink
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
stream
JS
:
:
Handle
<
JS
:
:
Value
>
underlyingSink
double
highWaterMark
JS
:
:
Handle
<
JS
:
:
Value
>
sizeAlgorithm
)
;
extern
void
WritableStreamDefaultControllerClearAlgorithms
(
WritableStreamDefaultController
*
unwrappedController
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerClose
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerGetChunkSize
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
chunk
JS
:
:
MutableHandle
<
JS
:
:
Value
>
returnValue
)
;
extern
double
WritableStreamDefaultControllerGetDesiredSize
(
const
WritableStreamDefaultController
*
controller
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerWrite
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
chunk
JS
:
:
Handle
<
JS
:
:
Value
>
chunkSize
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerErrorIfNeeded
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerProcessClose
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerProcessWrite
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
chunk
)
;
extern
bool
WritableStreamDefaultControllerGetBackpressure
(
const
WritableStreamDefaultController
*
unwrappedController
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDefaultControllerError
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
}
#
endif
