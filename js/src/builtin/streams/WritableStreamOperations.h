#
ifndef
builtin_streams_WritableStreamOperations_h
#
define
builtin_streams_WritableStreamOperations_h
#
include
"
jstypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
{
class
PromiseObject
;
class
WritableStream
;
extern
JSObject
*
WritableStreamAbort
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
JS
:
:
Handle
<
JS
:
:
Value
>
reason
)
;
extern
JSObject
*
WritableStreamClose
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
PromiseObject
*
WritableStreamAddWriteRequest
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamDealWithRejection
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamStartErroring
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
JS
:
:
Handle
<
JS
:
:
Value
>
reason
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamFinishErroring
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamFinishInFlightWrite
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamFinishInFlightWriteWithError
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamFinishInFlightClose
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamFinishInFlightCloseWithError
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
JS
:
:
Handle
<
JS
:
:
Value
>
error
)
;
extern
bool
WritableStreamCloseQueuedOrInFlight
(
const
WritableStream
*
unwrappedStream
)
;
extern
void
WritableStreamMarkCloseRequestInFlight
(
WritableStream
*
unwrappedStream
)
;
extern
void
WritableStreamMarkFirstWriteRequestInFlight
(
WritableStream
*
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
)
;
[
[
nodiscard
]
]
extern
bool
WritableStreamUpdateBackpressure
(
JSContext
*
cx
JS
:
:
Handle
<
WritableStream
*
>
unwrappedStream
bool
backpressure
)
;
}
#
endif
