#
include
"
builtin
/
streams
/
TeeState
.
h
"
#
include
"
builtin
/
streams
/
ReadableStream
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
js
:
:
ReadableStream
;
using
js
:
:
TeeState
;
using
JS
:
:
Handle
;
using
JS
:
:
Int32Value
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
TeeState
*
TeeState
:
:
create
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
Rooted
<
TeeState
*
>
state
(
cx
NewBuiltinClassInstance
<
TeeState
>
(
cx
)
)
;
if
(
!
state
)
{
return
nullptr
;
}
Rooted
<
PromiseObject
*
>
cancelPromise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
cancelPromise
)
{
return
nullptr
;
}
state
-
>
setFixedSlot
(
Slot_Flags
Int32Value
(
0
)
)
;
state
-
>
setFixedSlot
(
Slot_CancelPromise
ObjectValue
(
*
cancelPromise
)
)
;
Rooted
<
JSObject
*
>
wrappedStream
(
cx
unwrappedStream
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedStream
)
)
{
return
nullptr
;
}
state
-
>
setFixedSlot
(
Slot_Stream
JS
:
:
ObjectValue
(
*
wrappedStream
)
)
;
return
state
;
}
const
JSClass
TeeState
:
:
class_
=
{
"
TeeState
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
