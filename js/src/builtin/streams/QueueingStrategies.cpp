#
include
"
builtin
/
streams
/
QueueingStrategies
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
ProtoKey
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
js
:
:
ByteLengthQueuingStrategy
;
using
js
:
:
CountQueuingStrategy
;
using
js
:
:
PropertyName
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectOpResult
;
using
JS
:
:
Rooted
;
using
JS
:
:
ToNumber
;
using
JS
:
:
ToObject
;
using
JS
:
:
Value
;
bool
js
:
:
ByteLengthQueuingStrategy
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ByteLengthQueuingStrategy
"
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_ByteLengthQueuingStrategy
&
proto
)
)
{
return
false
;
}
Rooted
<
ByteLengthQueuingStrategy
*
>
strategy
(
cx
NewObjectWithClassProto
<
ByteLengthQueuingStrategy
>
(
cx
proto
)
)
;
if
(
!
strategy
)
{
return
false
;
}
RootedObject
argObj
(
cx
ToObject
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
argObj
)
{
return
false
;
}
RootedValue
highWaterMarkV
(
cx
)
;
if
(
!
GetProperty
(
cx
argObj
argObj
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMarkV
)
)
{
return
false
;
}
if
(
highWaterMarkV
.
isUndefined
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_STREAM_MISSING_HIGHWATERMARK
)
;
return
false
;
}
double
highWaterMark
;
if
(
!
ToNumber
(
cx
highWaterMarkV
&
highWaterMark
)
)
{
return
false
;
}
strategy
-
>
setHighWaterMark
(
highWaterMark
)
;
args
.
rval
(
)
.
setObject
(
*
strategy
)
;
return
true
;
}
static
bool
ByteLengthQueuingStrategy_highWaterMark
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ByteLengthQueuingStrategy
*
>
unwrappedStrategy
(
cx
UnwrapAndTypeCheckThis
<
ByteLengthQueuingStrategy
>
(
cx
args
"
get
highWaterMark
"
)
)
;
if
(
!
unwrappedStrategy
)
{
return
false
;
}
args
.
rval
(
)
.
setDouble
(
unwrappedStrategy
-
>
highWaterMark
(
)
)
;
return
true
;
}
static
bool
ByteLengthQueuingStrategy_size
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
GetProperty
(
cx
args
.
get
(
0
)
cx
-
>
names
(
)
.
byteLength
args
.
rval
(
)
)
;
}
static
const
JSPropertySpec
ByteLengthQueuingStrategy_properties
[
]
=
{
JS_PSG
(
"
highWaterMark
"
ByteLengthQueuingStrategy_highWaterMark
JSPROP_ENUMERATE
)
JS_STRING_SYM_PS
(
toStringTag
"
ByteLengthQueuingStrategy
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
const
JSFunctionSpec
ByteLengthQueuingStrategy_methods
[
]
=
{
JS_FN
(
"
size
"
ByteLengthQueuingStrategy_size
1
0
)
JS_FS_END
}
;
JS_STREAMS_CLASS_SPEC
(
ByteLengthQueuingStrategy
1
SlotCount
0
0
JS_NULL_CLASS_OPS
)
;
bool
js
:
:
CountQueuingStrategy
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
CountQueuingStrategy
"
)
)
{
return
false
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_CountQueuingStrategy
&
proto
)
)
{
return
false
;
}
Rooted
<
CountQueuingStrategy
*
>
strategy
(
cx
NewObjectWithClassProto
<
CountQueuingStrategy
>
(
cx
proto
)
)
;
if
(
!
strategy
)
{
return
false
;
}
RootedObject
argObj
(
cx
ToObject
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
argObj
)
{
return
false
;
}
RootedValue
highWaterMarkV
(
cx
)
;
if
(
!
GetProperty
(
cx
argObj
argObj
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMarkV
)
)
{
return
false
;
}
if
(
highWaterMarkV
.
isUndefined
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_STREAM_MISSING_HIGHWATERMARK
)
;
return
false
;
}
double
highWaterMark
;
if
(
!
ToNumber
(
cx
highWaterMarkV
&
highWaterMark
)
)
{
return
false
;
}
strategy
-
>
setHighWaterMark
(
highWaterMark
)
;
args
.
rval
(
)
.
setObject
(
*
strategy
)
;
return
true
;
}
static
bool
CountQueuingStrategy_highWaterMark
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
CountQueuingStrategy
*
>
unwrappedStrategy
(
cx
UnwrapAndTypeCheckThis
<
CountQueuingStrategy
>
(
cx
args
"
get
highWaterMark
"
)
)
;
if
(
!
unwrappedStrategy
)
{
return
false
;
}
args
.
rval
(
)
.
setDouble
(
unwrappedStrategy
-
>
highWaterMark
(
)
)
;
return
true
;
}
static
bool
CountQueuingStrategy_size
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
args
.
rval
(
)
.
setInt32
(
1
)
;
return
true
;
}
static
const
JSPropertySpec
CountQueuingStrategy_properties
[
]
=
{
JS_PSG
(
"
highWaterMark
"
CountQueuingStrategy_highWaterMark
JSPROP_ENUMERATE
)
JS_STRING_SYM_PS
(
toStringTag
"
CountQueuingStrategy
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
const
JSFunctionSpec
CountQueuingStrategy_methods
[
]
=
{
JS_FN
(
"
size
"
CountQueuingStrategy_size
0
0
)
JS_FS_END
}
;
JS_STREAMS_CLASS_SPEC
(
CountQueuingStrategy
1
SlotCount
0
0
JS_NULL_CLASS_OPS
)
;
