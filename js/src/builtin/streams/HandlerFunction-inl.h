#
ifndef
builtin_streams_HandlerFunction_inl_h
#
define
builtin_streams_HandlerFunction_inl_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stddef
.
h
>
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectGroup
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
namespace
js
{
constexpr
size_t
StreamHandlerFunctionSlot_Target
=
0
;
inline
MOZ_MUST_USE
JSFunction
*
NewHandler
(
JSContext
*
cx
Native
handler
JS
:
:
Handle
<
JSObject
*
>
target
)
{
cx
-
>
check
(
target
)
;
JS
:
:
Handle
<
PropertyName
*
>
funName
=
cx
-
>
names
(
)
.
empty
;
JS
:
:
Rooted
<
JSFunction
*
>
handlerFun
(
cx
NewNativeFunction
(
cx
handler
0
funName
gc
:
:
AllocKind
:
:
FUNCTION_EXTENDED
GenericObject
)
)
;
if
(
!
handlerFun
)
{
return
nullptr
;
}
handlerFun
-
>
setExtendedSlot
(
StreamHandlerFunctionSlot_Target
JS
:
:
ObjectValue
(
*
target
)
)
;
return
handlerFun
;
}
template
<
class
T
>
inline
MOZ_MUST_USE
T
*
TargetFromHandler
(
const
JS
:
:
CallArgs
&
args
)
{
JSFunction
&
func
=
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
;
return
&
func
.
getExtendedSlot
(
StreamHandlerFunctionSlot_Target
)
.
toObject
(
)
.
as
<
T
>
(
)
;
}
}
#
endif
