#
include
"
builtin
/
streams
/
WritableStreamDefaultControllerOperations
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
builtin
/
Promise
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
QueueWithSizes
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultController
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
List
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
builtin
/
streams
/
HandlerFunction
-
inl
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
-
inl
.
h
"
#
include
"
builtin
/
streams
/
QueueWithSizes
-
inl
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
Int32Value
;
using
JS
:
:
MagicValue
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
UndefinedHandleValue
;
using
JS
:
:
Value
;
using
js
:
:
ListObject
;
using
js
:
:
NewHandler
;
using
js
:
:
PeekQueueValue
;
using
js
:
:
TargetFromHandler
;
using
js
:
:
WritableStream
;
using
js
:
:
WritableStreamCloseQueuedOrInFlight
;
using
js
:
:
WritableStreamDefaultController
;
using
js
:
:
WritableStreamFinishErroring
;
using
js
:
:
WritableStreamMarkCloseRequestInFlight
;
using
js
:
:
WritableStreamMarkFirstWriteRequestInFlight
;
using
js
:
:
WritableStreamUpdateBackpressure
;
JSObject
*
js
:
:
WritableStreamControllerAbortSteps
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
reason
)
{
cx
-
>
check
(
reason
)
;
Rooted
<
Value
>
unwrappedAbortMethod
(
cx
unwrappedController
-
>
abortMethod
(
)
)
;
Rooted
<
JSObject
*
>
result
(
cx
)
;
if
(
unwrappedAbortMethod
.
isUndefined
(
)
)
{
result
=
PromiseObject
:
:
unforgeableResolve
(
cx
UndefinedHandleValue
)
;
if
(
!
result
)
{
return
nullptr
;
}
}
else
{
{
AutoRealm
ar
(
cx
unwrappedController
)
;
cx
-
>
check
(
unwrappedAbortMethod
)
;
Rooted
<
Value
>
underlyingSink
(
cx
unwrappedController
-
>
underlyingSink
(
)
)
;
cx
-
>
check
(
underlyingSink
)
;
Rooted
<
Value
>
wrappedReason
(
cx
reason
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedReason
)
)
{
return
nullptr
;
}
result
=
PromiseCall
(
cx
unwrappedAbortMethod
underlyingSink
wrappedReason
)
;
if
(
!
result
)
{
return
nullptr
;
}
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
result
)
)
{
return
nullptr
;
}
}
WritableStreamDefaultControllerClearAlgorithms
(
unwrappedController
)
;
return
result
;
}
bool
js
:
:
WritableStreamControllerErrorSteps
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
{
return
ResetQueue
(
cx
unwrappedController
)
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
;
bool
js
:
:
WritableStreamControllerStartHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
TargetFromHandler
<
WritableStreamDefaultController
>
(
args
)
)
;
#
ifdef
DEBUG
const
auto
*
unwrappedStream
=
unwrappedController
-
>
stream
(
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
#
endif
unwrappedController
-
>
setStarted
(
)
;
if
(
!
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
cx
unwrappedController
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
bool
js
:
:
WritableStreamControllerStartFailedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
TargetFromHandler
<
WritableStreamDefaultController
>
(
args
)
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
unwrappedController
-
>
setStarted
(
)
;
if
(
!
WritableStreamDealWithRejection
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
MOZ_MUST_USE
bool
js
:
:
SetUpWritableStreamDefaultController
(
JSContext
*
cx
Handle
<
WritableStream
*
>
stream
SinkAlgorithms
sinkAlgorithms
Handle
<
Value
>
underlyingSink
Handle
<
Value
>
writeMethod
Handle
<
Value
>
closeMethod
Handle
<
Value
>
abortMethod
double
highWaterMark
Handle
<
Value
>
size
)
{
cx
-
>
check
(
stream
)
;
cx
-
>
check
(
underlyingSink
)
;
cx
-
>
check
(
writeMethod
)
;
MOZ_ASSERT
(
writeMethod
.
isUndefined
(
)
|
|
IsCallable
(
writeMethod
)
)
;
cx
-
>
check
(
closeMethod
)
;
MOZ_ASSERT
(
closeMethod
.
isUndefined
(
)
|
|
IsCallable
(
closeMethod
)
)
;
cx
-
>
check
(
abortMethod
)
;
MOZ_ASSERT
(
abortMethod
.
isUndefined
(
)
|
|
IsCallable
(
abortMethod
)
)
;
MOZ_ASSERT
(
highWaterMark
>
=
0
)
;
cx
-
>
check
(
size
)
;
MOZ_ASSERT
(
size
.
isUndefined
(
)
|
|
IsCallable
(
size
)
)
;
Rooted
<
WritableStreamDefaultController
*
>
controller
(
cx
NewBuiltinClassInstance
<
WritableStreamDefaultController
>
(
cx
)
)
;
if
(
!
controller
)
{
return
false
;
}
MOZ_ASSERT
(
!
stream
-
>
hasController
(
)
)
;
controller
-
>
setStream
(
stream
)
;
stream
-
>
setController
(
controller
)
;
if
(
!
ResetQueue
(
cx
controller
)
)
{
return
false
;
}
controller
-
>
setFlags
(
0
)
;
MOZ_ASSERT
(
!
controller
-
>
started
(
)
)
;
controller
-
>
setStrategySize
(
size
)
;
controller
-
>
setStrategyHWM
(
highWaterMark
)
;
controller
-
>
setWriteMethod
(
writeMethod
)
;
controller
-
>
setCloseMethod
(
closeMethod
)
;
controller
-
>
setAbortMethod
(
abortMethod
)
;
bool
backpressure
=
WritableStreamDefaultControllerGetBackpressure
(
controller
)
;
if
(
!
WritableStreamUpdateBackpressure
(
cx
stream
backpressure
)
)
{
return
false
;
}
Rooted
<
Value
>
startResult
(
cx
)
;
if
(
sinkAlgorithms
=
=
SinkAlgorithms
:
:
Script
)
{
Rooted
<
Value
>
controllerVal
(
cx
ObjectValue
(
*
controller
)
)
;
if
(
!
InvokeOrNoop
(
cx
underlyingSink
cx
-
>
names
(
)
.
start
controllerVal
&
startResult
)
)
{
return
false
;
}
}
Rooted
<
JSObject
*
>
startPromise
(
cx
PromiseObject
:
:
unforgeableResolve
(
cx
startResult
)
)
;
if
(
!
startPromise
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onStartFulfilled
(
cx
NewHandler
(
cx
WritableStreamControllerStartHandler
controller
)
)
;
if
(
!
onStartFulfilled
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onStartRejected
(
cx
NewHandler
(
cx
WritableStreamControllerStartFailedHandler
controller
)
)
;
if
(
!
onStartRejected
)
{
return
false
;
}
return
JS
:
:
AddPromiseReactions
(
cx
startPromise
onStartFulfilled
onStartRejected
)
;
}
MOZ_MUST_USE
bool
js
:
:
SetUpWritableStreamDefaultControllerFromUnderlyingSink
(
JSContext
*
cx
Handle
<
WritableStream
*
>
stream
Handle
<
Value
>
underlyingSink
double
highWaterMark
Handle
<
Value
>
sizeAlgorithm
)
{
cx
-
>
check
(
stream
)
;
cx
-
>
check
(
underlyingSink
)
;
cx
-
>
check
(
sizeAlgorithm
)
;
MOZ_ASSERT
(
!
underlyingSink
.
isUndefined
(
)
)
;
SinkAlgorithms
sinkAlgorithms
=
SinkAlgorithms
:
:
Script
;
Rooted
<
Value
>
writeMethod
(
cx
)
;
if
(
!
CreateAlgorithmFromUnderlyingMethod
(
cx
underlyingSink
"
WritableStream
sink
.
write
method
"
cx
-
>
names
(
)
.
write
&
writeMethod
)
)
{
return
false
;
}
Rooted
<
Value
>
closeMethod
(
cx
)
;
if
(
!
CreateAlgorithmFromUnderlyingMethod
(
cx
underlyingSink
"
WritableStream
sink
.
close
method
"
cx
-
>
names
(
)
.
close
&
closeMethod
)
)
{
return
false
;
}
Rooted
<
Value
>
abortMethod
(
cx
)
;
if
(
!
CreateAlgorithmFromUnderlyingMethod
(
cx
underlyingSink
"
WritableStream
sink
.
abort
method
"
cx
-
>
names
(
)
.
abort
&
abortMethod
)
)
{
return
false
;
}
return
SetUpWritableStreamDefaultController
(
cx
stream
sinkAlgorithms
underlyingSink
writeMethod
closeMethod
abortMethod
highWaterMark
sizeAlgorithm
)
;
}
void
js
:
:
WritableStreamDefaultControllerClearAlgorithms
(
WritableStreamDefaultController
*
unwrappedController
)
{
unwrappedController
-
>
clearWriteMethod
(
)
;
unwrappedController
-
>
clearCloseMethod
(
)
;
unwrappedController
-
>
clearAbortMethod
(
)
;
unwrappedController
-
>
clearStrategySize
(
)
;
}
bool
js
:
:
WritableStreamDefaultControllerClose
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
{
{
Rooted
<
Value
>
v
(
cx
MagicValue
(
JS_WRITABLESTREAM_CLOSE_RECORD
)
)
;
Rooted
<
Value
>
size
(
cx
Int32Value
(
0
)
)
;
if
(
!
EnqueueValueWithSize
(
cx
unwrappedController
v
size
)
)
{
return
false
;
}
}
return
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
cx
unwrappedController
)
;
}
bool
js
:
:
WritableStreamDefaultControllerGetChunkSize
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
chunk
MutableHandle
<
Value
>
returnValue
)
{
cx
-
>
check
(
chunk
)
;
Rooted
<
Value
>
unwrappedStrategySize
(
cx
unwrappedController
-
>
strategySize
(
)
)
;
if
(
unwrappedStrategySize
.
isUndefined
(
)
)
{
returnValue
.
setInt32
(
1
)
;
return
true
;
}
MOZ_ASSERT
(
IsCallable
(
unwrappedStrategySize
)
)
;
{
bool
success
;
{
AutoRealm
ar
(
cx
unwrappedController
)
;
cx
-
>
check
(
unwrappedStrategySize
)
;
Rooted
<
Value
>
wrappedChunk
(
cx
chunk
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedChunk
)
)
{
return
false
;
}
success
=
Call
(
cx
unwrappedStrategySize
UndefinedHandleValue
wrappedChunk
returnValue
)
;
}
if
(
success
)
{
return
cx
-
>
compartment
(
)
-
>
wrap
(
cx
returnValue
)
;
}
}
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
cx
-
>
getPendingException
(
returnValue
)
)
{
return
false
;
}
cx
-
>
check
(
returnValue
)
;
cx
-
>
clearPendingException
(
)
;
if
(
!
WritableStreamDefaultControllerErrorIfNeeded
(
cx
unwrappedController
returnValue
)
)
{
return
false
;
}
returnValue
.
setInt32
(
1
)
;
return
true
;
}
double
js
:
:
WritableStreamDefaultControllerGetDesiredSize
(
const
WritableStreamDefaultController
*
controller
)
{
return
controller
-
>
strategyHWM
(
)
-
controller
-
>
queueTotalSize
(
)
;
}
bool
js
:
:
WritableStreamDefaultControllerWrite
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
chunk
Handle
<
Value
>
chunkSize
)
{
MOZ_ASSERT
(
!
chunk
.
isMagic
(
)
)
;
cx
-
>
check
(
chunk
)
;
cx
-
>
check
(
chunkSize
)
;
bool
succeeded
=
EnqueueValueWithSize
(
cx
unwrappedController
chunk
chunkSize
)
;
if
(
!
succeeded
)
{
Rooted
<
Value
>
enqueueResult
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
cx
-
>
getPendingException
(
&
enqueueResult
)
)
{
return
false
;
}
cx
-
>
check
(
enqueueResult
)
;
cx
-
>
clearPendingException
(
)
;
return
WritableStreamDefaultControllerErrorIfNeeded
(
cx
unwrappedController
enqueueResult
)
;
}
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
if
(
!
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
&
&
unwrappedStream
-
>
writable
(
)
)
{
bool
backpressure
=
WritableStreamDefaultControllerGetBackpressure
(
unwrappedController
)
;
if
(
!
WritableStreamUpdateBackpressure
(
cx
unwrappedStream
backpressure
)
)
{
return
false
;
}
}
return
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
cx
unwrappedController
)
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultControllerProcessIfNeeded
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
;
MOZ_MUST_USE
bool
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
{
if
(
!
unwrappedController
-
>
started
(
)
)
{
return
true
;
}
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
if
(
!
unwrappedStream
-
>
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
{
return
true
;
}
MOZ_ASSERT
(
!
unwrappedStream
-
>
closed
(
)
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
errored
(
)
)
;
if
(
unwrappedStream
-
>
erroring
(
)
)
{
return
WritableStreamFinishErroring
(
cx
unwrappedStream
)
;
}
return
WritableStreamDefaultControllerProcessIfNeeded
(
cx
unwrappedController
)
;
}
bool
js
:
:
WritableStreamDefaultControllerErrorIfNeeded
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
if
(
unwrappedController
-
>
stream
(
)
-
>
writable
(
)
)
{
if
(
!
WritableStreamDefaultControllerError
(
cx
unwrappedController
error
)
)
{
return
false
;
}
}
return
true
;
}
static
MOZ_MUST_USE
JSObject
*
PerformCloseAlgorithm
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
{
JS_ReportErrorASCII
(
cx
"
boo
"
)
;
return
nullptr
;
}
static
MOZ_MUST_USE
JSObject
*
PerformWriteAlgorithm
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
chunk
)
{
cx
-
>
check
(
chunk
)
;
JS_ReportErrorASCII
(
cx
"
boo
"
)
;
return
nullptr
;
}
static
MOZ_MUST_USE
bool
WritableStreamCloseHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
TargetFromHandler
<
WritableStream
>
(
args
)
)
;
if
(
!
WritableStreamFinishInFlightClose
(
cx
unwrappedStream
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamCloseFailedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
TargetFromHandler
<
WritableStream
>
(
args
)
)
;
if
(
!
WritableStreamFinishInFlightCloseWithError
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamWriteHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
TargetFromHandler
<
WritableStream
>
(
args
)
)
;
if
(
!
WritableStreamFinishInFlightWrite
(
cx
unwrappedStream
)
)
{
return
false
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
DequeueValue
(
unwrappedStream
-
>
controller
(
)
cx
)
;
if
(
!
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
&
&
unwrappedStream
-
>
writable
(
)
)
{
bool
backpressure
=
WritableStreamDefaultControllerGetBackpressure
(
unwrappedStream
-
>
controller
(
)
)
;
if
(
!
WritableStreamUpdateBackpressure
(
cx
unwrappedStream
backpressure
)
)
{
return
false
;
}
}
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
if
(
!
WritableStreamDefaultControllerAdvanceQueueIfNeeded
(
cx
unwrappedController
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamWriteFailedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
TargetFromHandler
<
WritableStream
>
(
args
)
)
;
if
(
unwrappedStream
-
>
writable
(
)
)
{
WritableStreamDefaultControllerClearAlgorithms
(
unwrappedStream
-
>
controller
(
)
)
;
}
if
(
!
WritableStreamFinishInFlightWriteWithError
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
bool
WritableStreamDefaultControllerProcessIfNeeded
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
)
{
ListObject
*
unwrappedQueue
=
unwrappedController
-
>
queue
(
)
;
if
(
QueueIsEmpty
(
unwrappedQueue
)
)
{
return
true
;
}
Rooted
<
JSObject
*
>
sinkWriteOrClosePromise
(
cx
)
;
JSNative
onFulfilledFunc
onRejectedFunc
;
if
(
PeekQueueValue
(
unwrappedQueue
)
.
isMagic
(
JS_WRITABLESTREAM_CLOSE_RECORD
)
)
{
MOZ_ASSERT
(
unwrappedQueue
-
>
length
(
)
=
=
2
)
;
onFulfilledFunc
=
WritableStreamCloseHandler
;
onRejectedFunc
=
WritableStreamCloseFailedHandler
;
WritableStreamMarkCloseRequestInFlight
(
unwrappedController
-
>
stream
(
)
)
;
DequeueValue
(
unwrappedController
cx
)
;
MOZ_ASSERT
(
unwrappedQueue
-
>
isEmpty
(
)
)
;
sinkWriteOrClosePromise
=
PerformCloseAlgorithm
(
cx
unwrappedController
)
;
}
else
{
onFulfilledFunc
=
WritableStreamWriteHandler
;
onRejectedFunc
=
WritableStreamWriteFailedHandler
;
Rooted
<
Value
>
chunk
(
cx
PeekQueueValue
(
unwrappedQueue
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
chunk
)
)
{
return
false
;
}
WritableStreamMarkFirstWriteRequestInFlight
(
unwrappedController
-
>
stream
(
)
)
;
sinkWriteOrClosePromise
=
PerformWriteAlgorithm
(
cx
unwrappedController
chunk
)
;
}
if
(
!
sinkWriteOrClosePromise
)
{
return
false
;
}
Rooted
<
JSObject
*
>
stream
(
cx
unwrappedController
-
>
stream
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
stream
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onFulfilled
(
cx
NewHandler
(
cx
onFulfilledFunc
stream
)
)
;
if
(
!
onFulfilled
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onRejected
(
cx
NewHandler
(
cx
onRejectedFunc
stream
)
)
;
if
(
!
onRejected
)
{
return
false
;
}
return
JS
:
:
AddPromiseReactions
(
cx
sinkWriteOrClosePromise
onFulfilled
onRejected
)
;
}
bool
js
:
:
WritableStreamDefaultControllerGetBackpressure
(
const
WritableStreamDefaultController
*
unwrappedController
)
{
return
WritableStreamDefaultControllerGetDesiredSize
(
unwrappedController
)
<
=
0
.
0
;
}
bool
js
:
:
WritableStreamDefaultControllerError
(
JSContext
*
cx
Handle
<
WritableStreamDefaultController
*
>
unwrappedController
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
)
;
WritableStreamDefaultControllerClearAlgorithms
(
unwrappedController
)
;
return
WritableStreamStartErroring
(
cx
unwrappedStream
error
)
;
}
