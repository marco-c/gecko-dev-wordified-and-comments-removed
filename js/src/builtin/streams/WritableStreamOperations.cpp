#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultController
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
-
inl
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
-
inl
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
List
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
js
:
:
WritableStream
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
RejectPromise
;
using
JS
:
:
ResolvePromise
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
MOZ_MUST_USE
WritableStream
*
WritableStream
:
:
create
(
JSContext
*
cx
void
*
nsISupportsObject_alreadyAddreffed
Handle
<
JSObject
*
>
proto
)
{
cx
-
>
check
(
proto
)
;
Rooted
<
WritableStream
*
>
stream
(
cx
NewObjectWithClassProto
<
WritableStream
>
(
cx
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
JS_SetPrivate
(
stream
nsISupportsObject_alreadyAddreffed
)
;
stream
-
>
initWritableState
(
)
;
MOZ_ASSERT
(
stream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
stream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasWriter
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasController
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasPendingAbortRequest
(
)
)
;
if
(
!
StoreNewListInFixedSlot
(
cx
stream
WritableStream
:
:
Slot_WriteRequests
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
stream
-
>
backpressure
(
)
)
;
return
stream
;
}
void
WritableStream
:
:
clearInFlightWriteRequest
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
stateIsInitialized
(
)
)
;
MOZ_ASSERT
(
haveInFlightWriteRequest
(
)
)
;
writeRequests
(
)
-
>
popFirst
(
cx
)
;
setFlag
(
HaveInFlightWriteRequest
false
)
;
MOZ_ASSERT
(
!
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamDealWithRejection
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
if
(
unwrappedStream
-
>
writable
(
)
)
{
return
WritableStreamStartErroring
(
cx
unwrappedStream
error
)
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
erroring
(
)
)
;
return
WritableStreamFinishErroring
(
cx
unwrappedStream
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamStartErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
reason
)
{
cx
-
>
check
(
reason
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
hasController
(
)
)
;
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
unwrappedStream
-
>
setErroring
(
)
;
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
Rooted
<
Value
>
wrappedReason
(
cx
reason
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedReason
)
)
{
return
false
;
}
unwrappedStream
-
>
setStoredError
(
wrappedReason
)
;
}
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
#
ifdef
DEBUG
static
bool
WritableStreamHasOperationMarkedInFlight
(
const
WritableStream
*
unwrappedStream
)
;
#
endif
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
erroring
(
)
)
;
MOZ_ASSERT
(
!
WritableStreamHasOperationMarkedInFlight
(
unwrappedStream
)
)
;
unwrappedStream
-
>
setErrored
(
)
;
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightWrite
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
Rooted
<
JSObject
*
>
writeRequest
(
cx
&
unwrappedStream
-
>
inFlightWriteRequest
(
)
.
toObject
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
writeRequest
)
)
{
return
false
;
}
if
(
!
ResolvePromise
(
cx
writeRequest
UndefinedHandleValue
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightWriteRequest
(
cx
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
return
true
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightWriteWithError
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
Rooted
<
JSObject
*
>
writeRequest
(
cx
&
unwrappedStream
-
>
inFlightWriteRequest
(
)
.
toObject
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
writeRequest
)
)
{
return
false
;
}
if
(
!
RejectPromise
(
cx
writeRequest
error
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightWriteRequest
(
cx
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
return
WritableStreamDealWithRejection
(
cx
unwrappedStream
error
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightClose
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
)
;
{
Rooted
<
JSObject
*
>
inFlightCloseRequest
(
cx
&
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
toObject
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
inFlightCloseRequest
)
)
{
return
false
;
}
if
(
!
ResolvePromise
(
cx
inFlightCloseRequest
UndefinedHandleValue
)
)
{
return
false
;
}
}
unwrappedStream
-
>
clearInFlightCloseRequest
(
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
if
(
unwrappedStream
-
>
erroring
(
)
)
{
unwrappedStream
-
>
clearStoredError
(
)
;
if
(
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
{
Rooted
<
JSObject
*
>
pendingAbortRequestPromise
(
cx
unwrappedStream
-
>
pendingAbortRequestPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
pendingAbortRequestPromise
)
)
{
return
false
;
}
if
(
!
ResolvePromise
(
cx
pendingAbortRequestPromise
UndefinedHandleValue
)
)
{
return
false
;
}
unwrappedStream
-
>
clearPendingAbortRequest
(
)
;
}
}
unwrappedStream
-
>
setClosed
(
)
;
if
(
unwrappedStream
-
>
hasWriter
(
)
)
{
Rooted
<
JSObject
*
>
closedPromise
(
cx
)
;
{
WritableStreamDefaultWriter
*
unwrappedWriter
=
UnwrapWriterFromStream
(
cx
unwrappedStream
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
closedPromise
=
unwrappedWriter
-
>
closedPromise
(
)
;
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
if
(
!
ResolvePromise
(
cx
closedPromise
UndefinedHandleValue
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
!
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
return
true
;
}
bool
js
:
:
WritableStreamCloseQueuedOrInFlight
(
const
WritableStream
*
unwrappedStream
)
{
return
unwrappedStream
-
>
haveCloseRequestOrInFlightCloseRequest
(
)
;
}
#
ifdef
DEBUG
bool
WritableStreamHasOperationMarkedInFlight
(
const
WritableStream
*
unwrappedStream
)
{
return
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
|
|
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
;
}
#
endif
void
js
:
:
WritableStreamMarkCloseRequestInFlight
(
WritableStream
*
unwrappedStream
)
{
MOZ_ASSERT
(
!
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
;
unwrappedStream
-
>
convertCloseRequestToInFlightCloseRequest
(
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamUpdateBackpressure
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
bool
backpressure
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
