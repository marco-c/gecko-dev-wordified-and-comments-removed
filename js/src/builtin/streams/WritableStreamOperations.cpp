#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultController
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultControllerOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamWriterOperations
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
List
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
builtin
/
HandlerFunction
-
inl
.
h
"
#
include
"
builtin
/
Promise
-
inl
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
-
inl
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
-
inl
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
-
inl
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
List
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
js
:
:
ExtraFromHandler
;
using
js
:
:
PromiseObject
;
using
js
:
:
TargetFromHandler
;
using
js
:
:
UnwrapAndDowncastObject
;
using
js
:
:
WritableStream
;
using
js
:
:
WritableStreamDefaultController
;
using
js
:
:
WritableStreamRejectCloseAndClosedPromiseIfNeeded
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
RejectPromise
;
using
JS
:
:
ResolvePromise
;
using
JS
:
:
Rooted
;
using
JS
:
:
UndefinedHandleValue
;
using
JS
:
:
Value
;
MOZ_MUST_USE
WritableStream
*
WritableStream
:
:
create
(
JSContext
*
cx
void
*
nsISupportsObject_alreadyAddreffed
Handle
<
JSObject
*
>
proto
)
{
cx
-
>
check
(
proto
)
;
Rooted
<
WritableStream
*
>
stream
(
cx
NewObjectWithClassProto
<
WritableStream
>
(
cx
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
stream
-
>
setPrivate
(
nsISupportsObject_alreadyAddreffed
)
;
stream
-
>
initWritableState
(
)
;
MOZ_ASSERT
(
stream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
stream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasWriter
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasController
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasPendingAbortRequest
(
)
)
;
if
(
!
StoreNewListInFixedSlot
(
cx
stream
WritableStream
:
:
Slot_WriteRequests
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
stream
-
>
backpressure
(
)
)
;
return
stream
;
}
void
WritableStream
:
:
clearInFlightWriteRequest
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
stateIsInitialized
(
)
)
;
MOZ_ASSERT
(
haveInFlightWriteRequest
(
)
)
;
writeRequests
(
)
-
>
popFirst
(
cx
)
;
setFlag
(
HaveInFlightWriteRequest
false
)
;
MOZ_ASSERT
(
!
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
}
JSObject
*
js
:
:
WritableStreamAbort
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
reason
)
{
cx
-
>
check
(
reason
)
;
if
(
unwrappedStream
-
>
closed
(
)
|
|
unwrappedStream
-
>
errored
(
)
)
{
return
PromiseResolvedWithUndefined
(
cx
)
;
}
if
(
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
{
Rooted
<
JSObject
*
>
pendingPromise
(
cx
unwrappedStream
-
>
pendingAbortRequestPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
pendingPromise
)
)
{
return
nullptr
;
}
return
pendingPromise
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
Rooted
<
PromiseObject
*
>
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
bool
wasAlreadyErroring
=
unwrappedStream
-
>
erroring
(
)
;
Handle
<
Value
>
pendingReason
=
wasAlreadyErroring
?
UndefinedHandleValue
:
reason
;
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
Rooted
<
JSObject
*
>
wrappedPromise
(
cx
promise
)
;
Rooted
<
Value
>
wrappedPendingReason
(
cx
pendingReason
)
;
JS
:
:
Compartment
*
comp
=
cx
-
>
compartment
(
)
;
if
(
!
comp
-
>
wrap
(
cx
&
wrappedPromise
)
|
|
!
comp
-
>
wrap
(
cx
&
wrappedPendingReason
)
)
{
return
nullptr
;
}
unwrappedStream
-
>
setPendingAbortRequest
(
wrappedPromise
wrappedPendingReason
wasAlreadyErroring
)
;
}
if
(
!
wasAlreadyErroring
)
{
if
(
!
WritableStreamStartErroring
(
cx
unwrappedStream
pendingReason
)
)
{
return
nullptr
;
}
}
return
promise
;
}
JSObject
*
js
:
:
WritableStreamClose
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
if
(
unwrappedStream
-
>
closed
(
)
|
|
unwrappedStream
-
>
errored
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAM_CLOSED_OR_ERRORED
)
;
return
PromiseRejectedWithPendingError
(
cx
)
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
MOZ_ASSERT
(
!
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
)
;
Rooted
<
PromiseObject
*
>
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
Rooted
<
JSObject
*
>
wrappedPromise
(
cx
promise
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedPromise
)
)
{
return
nullptr
;
}
unwrappedStream
-
>
setCloseRequest
(
promise
)
;
}
if
(
unwrappedStream
-
>
hasWriter
(
)
&
&
unwrappedStream
-
>
backpressure
(
)
&
&
unwrappedStream
-
>
writable
(
)
)
{
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapWriterFromStream
(
cx
unwrappedStream
)
)
;
if
(
!
unwrappedWriter
)
{
return
nullptr
;
}
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
unwrappedWriter
-
>
readyPromise
(
)
)
)
{
return
nullptr
;
}
}
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
if
(
!
WritableStreamDefaultControllerClose
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
return
promise
;
}
MOZ_MUST_USE
PromiseObject
*
js
:
:
WritableStreamAddWriteRequest
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
isLocked
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
)
;
Rooted
<
PromiseObject
*
>
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
if
(
!
AppendToListInFixedSlot
(
cx
unwrappedStream
WritableStream
:
:
Slot_WriteRequests
promise
)
)
{
return
nullptr
;
}
return
promise
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamDealWithRejection
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
if
(
unwrappedStream
-
>
writable
(
)
)
{
return
WritableStreamStartErroring
(
cx
unwrappedStream
error
)
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
erroring
(
)
)
;
return
WritableStreamFinishErroring
(
cx
unwrappedStream
)
;
}
static
bool
WritableStreamHasOperationMarkedInFlight
(
const
WritableStream
*
unwrappedStream
)
;
MOZ_MUST_USE
bool
js
:
:
WritableStreamStartErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
reason
)
{
cx
-
>
check
(
reason
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
hasController
(
)
)
;
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
unwrappedStream
-
>
setErroring
(
)
;
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
Rooted
<
Value
>
wrappedReason
(
cx
reason
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedReason
)
)
{
return
false
;
}
unwrappedStream
-
>
setStoredError
(
wrappedReason
)
;
}
if
(
unwrappedStream
-
>
hasWriter
(
)
)
{
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapWriterFromStream
(
cx
unwrappedStream
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
WritableStreamDefaultWriterEnsureReadyPromiseRejected
(
cx
unwrappedWriter
reason
)
)
{
return
false
;
}
}
if
(
!
WritableStreamHasOperationMarkedInFlight
(
unwrappedStream
)
&
&
unwrappedController
-
>
started
(
)
)
{
if
(
!
WritableStreamFinishErroring
(
cx
unwrappedStream
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
AbortRequestPromiseFulfilledHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
JSObject
*
>
abortRequestPromise
(
cx
TargetFromHandler
<
JSObject
>
(
args
)
)
;
if
(
!
ResolvePromise
(
cx
abortRequestPromise
UndefinedHandleValue
)
)
{
return
false
;
}
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndDowncastObject
<
WritableStream
>
(
cx
ExtraFromHandler
<
JSObject
>
(
args
)
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
if
(
!
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
cx
unwrappedStream
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
false
;
}
static
bool
AbortRequestPromiseRejectedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
JSObject
*
>
abortRequestPromise
(
cx
TargetFromHandler
<
JSObject
>
(
args
)
)
;
if
(
!
RejectPromise
(
cx
abortRequestPromise
args
.
get
(
0
)
)
)
{
return
false
;
}
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndDowncastObject
<
WritableStream
>
(
cx
ExtraFromHandler
<
JSObject
>
(
args
)
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
if
(
!
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
cx
unwrappedStream
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
false
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
erroring
(
)
)
;
MOZ_ASSERT
(
!
WritableStreamHasOperationMarkedInFlight
(
unwrappedStream
)
)
;
unwrappedStream
-
>
setErrored
(
)
;
{
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
if
(
!
WritableStreamControllerErrorSteps
(
cx
unwrappedController
)
)
{
return
false
;
}
}
Rooted
<
Value
>
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
false
;
}
{
Rooted
<
ListObject
*
>
unwrappedWriteRequests
(
cx
unwrappedStream
-
>
writeRequests
(
)
)
;
Rooted
<
JSObject
*
>
writeRequest
(
cx
)
;
uint32_t
len
=
unwrappedWriteRequests
-
>
length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
writeRequest
=
&
unwrappedWriteRequests
-
>
get
(
i
)
.
toObject
(
)
;
if
(
!
RejectUnwrappedPromiseWithError
(
cx
&
writeRequest
storedError
)
)
{
return
false
;
}
}
}
unwrappedStream
-
>
clearWriteRequests
(
)
;
if
(
!
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
{
return
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
cx
unwrappedStream
)
;
}
Rooted
<
Value
>
abortRequestReason
(
cx
unwrappedStream
-
>
pendingAbortRequestReason
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
abortRequestReason
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
abortRequestPromise
(
cx
unwrappedStream
-
>
pendingAbortRequestPromise
(
)
)
;
bool
wasAlreadyErroring
=
unwrappedStream
-
>
pendingAbortRequestWasAlreadyErroring
(
)
;
unwrappedStream
-
>
clearPendingAbortRequest
(
)
;
if
(
wasAlreadyErroring
)
{
if
(
!
RejectUnwrappedPromiseWithError
(
cx
&
abortRequestPromise
storedError
)
)
{
return
false
;
}
return
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
cx
unwrappedStream
)
;
}
Rooted
<
WritableStreamDefaultController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
Rooted
<
JSObject
*
>
promise
(
cx
WritableStreamControllerAbortSteps
(
cx
unwrappedController
abortRequestReason
)
)
;
if
(
!
promise
)
{
return
false
;
}
cx
-
>
check
(
promise
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
abortRequestPromise
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
stream
(
cx
unwrappedStream
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
stream
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onFulfilled
(
cx
NewHandlerWithExtra
(
cx
AbortRequestPromiseFulfilledHandler
abortRequestPromise
stream
)
)
;
if
(
!
onFulfilled
)
{
return
false
;
}
Rooted
<
JSObject
*
>
onRejected
(
cx
NewHandlerWithExtra
(
cx
AbortRequestPromiseRejectedHandler
abortRequestPromise
stream
)
)
;
if
(
!
onRejected
)
{
return
false
;
}
return
JS
:
:
AddPromiseReactions
(
cx
promise
onFulfilled
onRejected
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightWrite
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
&
unwrappedStream
-
>
inFlightWriteRequest
(
)
.
toObject
(
)
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightWriteRequest
(
cx
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
return
true
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightWriteWithError
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
if
(
!
RejectUnwrappedPromiseWithError
(
cx
&
unwrappedStream
-
>
inFlightWriteRequest
(
)
.
toObject
(
)
error
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightWriteRequest
(
cx
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
return
WritableStreamDealWithRejection
(
cx
unwrappedStream
error
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightClose
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
)
;
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
&
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
toObject
(
)
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightCloseRequest
(
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
if
(
unwrappedStream
-
>
erroring
(
)
)
{
unwrappedStream
-
>
clearStoredError
(
)
;
if
(
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
{
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
unwrappedStream
-
>
pendingAbortRequestPromise
(
)
)
)
{
return
false
;
}
unwrappedStream
-
>
clearPendingAbortRequest
(
)
;
}
}
unwrappedStream
-
>
setClosed
(
)
;
if
(
unwrappedStream
-
>
hasWriter
(
)
)
{
WritableStreamDefaultWriter
*
unwrappedWriter
=
UnwrapWriterFromStream
(
cx
unwrappedStream
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
unwrappedWriter
-
>
closedPromise
(
)
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
!
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
return
true
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishInFlightCloseWithError
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
cx
-
>
check
(
error
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
if
(
!
RejectUnwrappedPromiseWithError
(
cx
&
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
toObject
(
)
error
)
)
{
return
false
;
}
unwrappedStream
-
>
clearInFlightCloseRequest
(
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
^
unwrappedStream
-
>
erroring
(
)
)
;
if
(
unwrappedStream
-
>
hasPendingAbortRequest
(
)
)
{
if
(
!
RejectUnwrappedPromiseWithError
(
cx
unwrappedStream
-
>
pendingAbortRequestPromise
(
)
error
)
)
{
return
false
;
}
unwrappedStream
-
>
clearPendingAbortRequest
(
)
;
}
return
WritableStreamDealWithRejection
(
cx
unwrappedStream
error
)
;
}
bool
js
:
:
WritableStreamCloseQueuedOrInFlight
(
const
WritableStream
*
unwrappedStream
)
{
return
unwrappedStream
-
>
haveCloseRequestOrInFlightCloseRequest
(
)
;
}
bool
WritableStreamHasOperationMarkedInFlight
(
const
WritableStream
*
unwrappedStream
)
{
return
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
|
|
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
;
}
void
js
:
:
WritableStreamMarkCloseRequestInFlight
(
WritableStream
*
unwrappedStream
)
{
MOZ_ASSERT
(
!
unwrappedStream
-
>
haveInFlightCloseRequest
(
)
)
;
MOZ_ASSERT
(
!
unwrappedStream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
;
unwrappedStream
-
>
convertCloseRequestToInFlightCloseRequest
(
)
;
}
void
js
:
:
WritableStreamMarkFirstWriteRequestInFlight
(
WritableStream
*
unwrappedStream
)
{
MOZ_ASSERT
(
!
unwrappedStream
-
>
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
writeRequests
(
)
-
>
length
(
)
>
0
)
;
unwrappedStream
-
>
setHaveInFlightWriteRequest
(
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamRejectCloseAndClosedPromiseIfNeeded
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
errored
(
)
)
;
Rooted
<
Value
>
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
false
;
}
if
(
!
unwrappedStream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
if
(
!
RejectUnwrappedPromiseWithError
(
cx
&
unwrappedStream
-
>
closeRequest
(
)
.
toObject
(
)
storedError
)
)
{
return
false
;
}
unwrappedStream
-
>
clearCloseRequest
(
)
;
}
if
(
unwrappedStream
-
>
hasWriter
(
)
)
{
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapWriterFromStream
(
cx
unwrappedStream
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
RejectUnwrappedPromiseWithError
(
cx
unwrappedWriter
-
>
closedPromise
(
)
storedError
)
)
{
return
false
;
}
Rooted
<
PromiseObject
*
>
unwrappedClosedPromise
(
cx
UnwrapAndDowncastObject
<
PromiseObject
>
(
cx
unwrappedWriter
-
>
closedPromise
(
)
)
)
;
if
(
!
unwrappedClosedPromise
)
{
return
false
;
}
js
:
:
SetSettledPromiseIsHandled
(
cx
unwrappedClosedPromise
)
;
}
return
true
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamUpdateBackpressure
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
bool
backpressure
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
!
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
)
;
if
(
unwrappedStream
-
>
hasWriter
(
)
&
&
backpressure
!
=
unwrappedStream
-
>
backpressure
(
)
)
{
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapWriterFromStream
(
cx
unwrappedStream
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
backpressure
)
{
Rooted
<
JSObject
*
>
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
false
;
}
AutoRealm
ar
(
cx
unwrappedWriter
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
promise
)
)
{
return
false
;
}
unwrappedWriter
-
>
setReadyPromise
(
promise
)
;
}
else
{
if
(
!
ResolveUnwrappedPromiseWithUndefined
(
cx
unwrappedWriter
-
>
readyPromise
(
)
)
)
{
return
false
;
}
}
}
unwrappedStream
-
>
setBackpressure
(
backpressure
)
;
return
true
;
}
