#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
List
-
inl
.
h
"
using
js
:
:
WritableStream
;
using
JS
:
:
Handle
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
MOZ_MUST_USE
WritableStream
*
WritableStream
:
:
create
(
JSContext
*
cx
void
*
nsISupportsObject_alreadyAddreffed
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
WritableStream
*
>
stream
(
cx
NewObjectWithClassProto
<
WritableStream
>
(
cx
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
JS_SetPrivate
(
stream
nsISupportsObject_alreadyAddreffed
)
;
stream
-
>
initWritableState
(
)
;
MOZ_ASSERT
(
stream
-
>
writable
(
)
)
;
MOZ_ASSERT
(
stream
-
>
storedError
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasWriter
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasController
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
closeRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
stream
-
>
inFlightCloseRequest
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
!
stream
-
>
hasPendingAbortRequest
(
)
)
;
if
(
!
StoreNewListInFixedSlot
(
cx
stream
WritableStream
:
:
Slot_WriteRequests
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
stream
-
>
backpressure
(
)
)
;
return
stream
;
}
void
WritableStream
:
:
clearInFlightWriteRequest
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
stateIsInitialized
(
)
)
;
MOZ_ASSERT
(
haveInFlightWriteRequest
(
)
)
;
writeRequests
(
)
-
>
popFirst
(
cx
)
;
setFlag
(
HaveInFlightWriteRequest
false
)
;
MOZ_ASSERT
(
!
haveInFlightWriteRequest
(
)
)
;
MOZ_ASSERT
(
inFlightWriteRequest
(
)
.
isUndefined
(
)
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamDealWithRejection
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
error
)
{
if
(
unwrappedStream
-
>
writable
(
)
)
{
return
WritableStreamStartErroring
(
cx
unwrappedStream
error
)
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
erroring
(
)
)
;
return
WritableStreamFinishErroring
(
cx
unwrappedStream
)
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamStartErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
Value
>
reason
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamFinishErroring
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
MOZ_MUST_USE
bool
js
:
:
WritableStreamUpdateBackpressure
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
bool
backpressure
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
