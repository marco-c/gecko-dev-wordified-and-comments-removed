#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
-
inl
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStream
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamWriterOperations
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
PromiseObject
.
h
"
#
include
"
builtin
/
Promise
-
inl
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
using
js
:
:
ClassSpec
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
ReturnPromiseRejectedWithPendingError
;
using
js
:
:
UnwrapAndTypeCheckArgument
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
js
:
:
WritableStream
;
using
js
:
:
WritableStreamCloseQueuedOrInFlight
;
using
js
:
:
WritableStreamDefaultWriter
;
using
js
:
:
WritableStreamDefaultWriterGetDesiredSize
;
using
js
:
:
WritableStreamDefaultWriterRelease
;
using
js
:
:
WritableStreamDefaultWriterWrite
;
MOZ_MUST_USE
WritableStreamDefaultWriter
*
js
:
:
CreateWritableStreamDefaultWriter
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
WritableStreamDefaultWriter
*
>
writer
(
cx
NewObjectWithClassProto
<
WritableStreamDefaultWriter
>
(
cx
proto
)
)
;
if
(
!
writer
)
{
return
nullptr
;
}
{
Rooted
<
JSObject
*
>
stream
(
cx
unwrappedStream
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
stream
)
)
{
return
nullptr
;
}
writer
-
>
setStream
(
stream
)
;
}
if
(
unwrappedStream
-
>
writable
(
)
)
{
PromiseObject
*
promise
;
if
(
!
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
&
&
unwrappedStream
-
>
backpressure
(
)
)
{
promise
=
PromiseObject
:
:
createSkippingExecutor
(
cx
)
;
}
else
{
promise
=
PromiseResolvedWithUndefined
(
cx
)
;
}
if
(
!
promise
)
{
return
nullptr
;
}
writer
-
>
setReadyPromise
(
promise
)
;
promise
=
PromiseObject
:
:
createSkippingExecutor
(
cx
)
;
if
(
!
promise
)
{
return
nullptr
;
}
writer
-
>
setClosedPromise
(
promise
)
;
}
else
if
(
unwrappedStream
-
>
closed
(
)
)
{
PromiseObject
*
readyPromise
=
PromiseResolvedWithUndefined
(
cx
)
;
if
(
!
readyPromise
)
{
return
nullptr
;
}
writer
-
>
setReadyPromise
(
readyPromise
)
;
PromiseObject
*
closedPromise
=
PromiseResolvedWithUndefined
(
cx
)
;
if
(
!
closedPromise
)
{
return
nullptr
;
}
writer
-
>
setClosedPromise
(
closedPromise
)
;
}
else
{
Rooted
<
Value
>
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
nullptr
;
}
if
(
unwrappedStream
-
>
erroring
(
)
)
{
Rooted
<
JSObject
*
>
promise
(
cx
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
writer
-
>
setReadyPromise
(
promise
)
;
js
:
:
SetSettledPromiseIsHandled
(
cx
promise
.
as
<
PromiseObject
>
(
)
)
;
JSObject
*
closedPromise
=
PromiseObject
:
:
createSkippingExecutor
(
cx
)
;
if
(
!
closedPromise
)
{
return
nullptr
;
}
writer
-
>
setClosedPromise
(
closedPromise
)
;
}
else
{
MOZ_ASSERT
(
unwrappedStream
-
>
errored
(
)
)
;
Rooted
<
JSObject
*
>
promise
(
cx
)
;
promise
=
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
;
if
(
!
promise
)
{
return
nullptr
;
}
writer
-
>
setReadyPromise
(
promise
)
;
js
:
:
SetSettledPromiseIsHandled
(
cx
promise
.
as
<
PromiseObject
>
(
)
)
;
promise
=
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
;
if
(
!
promise
)
{
return
nullptr
;
}
writer
-
>
setClosedPromise
(
promise
)
;
js
:
:
SetSettledPromiseIsHandled
(
cx
promise
.
as
<
PromiseObject
>
(
)
)
;
}
}
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
Rooted
<
JSObject
*
>
wrappedWriter
(
cx
writer
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedWriter
)
)
{
return
nullptr
;
}
unwrappedStream
-
>
setWriter
(
wrappedWriter
)
;
}
return
writer
;
}
bool
WritableStreamDefaultWriter
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
MOZ_ASSERT
(
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getWritableStreamsEnabled
(
)
"
WritableStream
should
be
enabled
in
this
realm
if
we
reach
here
"
)
;
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
WritableStreamDefaultWriter
"
)
)
{
return
false
;
}
Rooted
<
WritableStream
*
>
unwrappedStream
(
cx
UnwrapAndTypeCheckArgument
<
WritableStream
>
(
cx
args
"
WritableStreamDefaultWriter
constructor
"
0
)
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
if
(
unwrappedStream
-
>
isLocked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAM_ALREADY_LOCKED
)
;
return
false
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Null
&
proto
)
)
{
return
false
;
}
Rooted
<
WritableStreamDefaultWriter
*
>
writer
(
cx
CreateWritableStreamDefaultWriter
(
cx
unwrappedStream
proto
)
)
;
if
(
!
writer
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
writer
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_closed
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
closed
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
closedPromise
(
cx
unwrappedWriter
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
closedPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_desiredSize
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
desiredSize
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAMWRITER_NOT_OWNED
"
get
desiredSize
"
)
;
return
false
;
}
if
(
!
WritableStreamDefaultWriterGetDesiredSize
(
cx
unwrappedWriter
args
.
rval
(
)
)
)
{
return
false
;
}
MOZ_ASSERT
(
args
.
rval
(
)
.
isNull
(
)
|
|
args
.
rval
(
)
.
isNumber
(
)
"
expected
a
type
that
'
ll
never
require
wrapping
"
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_ready
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
ready
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
readyPromise
(
cx
unwrappedWriter
-
>
readyPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readyPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
readyPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_abort
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
abort
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAMWRITER_NOT_OWNED
"
abort
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
WritableStreamDefaultWriterAbort
(
cx
unwrappedWriter
args
.
get
(
0
)
)
;
if
(
!
promise
)
{
return
false
;
}
cx
-
>
check
(
promise
)
;
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_close
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
close
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAMWRITER_NOT_OWNED
"
write
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
WritableStream
*
unwrappedStream
=
UnwrapStreamFromWriter
(
cx
unwrappedWriter
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
if
(
WritableStreamCloseQueuedOrInFlight
(
unwrappedStream
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAM_CLOSE_CLOSING_OR_CLOSED
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
WritableStreamDefaultWriterClose
(
cx
unwrappedWriter
)
;
if
(
!
promise
)
{
return
false
;
}
cx
-
>
check
(
promise
)
;
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_releaseLock
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
close
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
#
ifdef
DEBUG
{
WritableStream
*
unwrappedStream
=
UnwrapStreamFromWriter
(
cx
unwrappedWriter
)
;
if
(
!
unwrappedStream
)
{
return
false
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
hasWriter
(
)
)
;
}
#
endif
if
(
!
WritableStreamDefaultWriterRelease
(
cx
unwrappedWriter
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStreamDefaultWriter_write
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
write
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAMWRITER_NOT_OWNED
"
write
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
promise
=
WritableStreamDefaultWriterWrite
(
cx
unwrappedWriter
args
.
get
(
0
)
)
;
if
(
!
promise
)
{
return
false
;
}
cx
-
>
check
(
promise
)
;
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
static
const
JSPropertySpec
WritableStreamDefaultWriter_properties
[
]
=
{
JS_PSG
(
"
closed
"
WritableStreamDefaultWriter_closed
0
)
JS_PSG
(
"
desiredSize
"
WritableStreamDefaultWriter_desiredSize
0
)
JS_PSG
(
"
ready
"
WritableStreamDefaultWriter_ready
0
)
JS_PS_END
}
;
static
const
JSFunctionSpec
WritableStreamDefaultWriter_methods
[
]
=
{
JS_FN
(
"
abort
"
WritableStreamDefaultWriter_abort
1
0
)
JS_FN
(
"
close
"
WritableStreamDefaultWriter_close
0
0
)
JS_FN
(
"
releaseLock
"
WritableStreamDefaultWriter_releaseLock
0
0
)
JS_FN
(
"
write
"
WritableStreamDefaultWriter_write
1
0
)
JS_FS_END
}
;
JS_STREAMS_CLASS_SPEC
(
WritableStreamDefaultWriter
1
SlotCount
ClassSpec
:
:
DontDefineConstructor
0
JS_NULL_CLASS_OPS
)
;
