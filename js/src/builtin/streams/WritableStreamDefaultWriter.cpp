#
include
"
builtin
/
streams
/
WritableStreamDefaultWriter
-
inl
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
streams
/
ClassSpecMacro
.
h
"
#
include
"
builtin
/
streams
/
MiscellaneousOperations
.
h
"
#
include
"
builtin
/
streams
/
WritableStreamWriterOperations
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
using
JS
:
:
CallArgs
;
using
JS
:
:
CallArgsFromVp
;
using
JS
:
:
Handle
;
using
JS
:
:
Rooted
;
using
JS
:
:
Value
;
using
js
:
:
ClassSpec
;
using
js
:
:
GetErrorMessage
;
using
js
:
:
ReturnPromiseRejectedWithPendingError
;
using
js
:
:
UnwrapAndTypeCheckThis
;
using
js
:
:
WritableStreamDefaultWriter
;
using
js
:
:
WritableStreamDefaultWriterGetDesiredSize
;
MOZ_MUST_USE
WritableStreamDefaultWriter
*
js
:
:
CreateWritableStreamDefaultWriter
(
JSContext
*
cx
Handle
<
WritableStream
*
>
unwrappedStream
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
nullptr
;
}
bool
WritableStreamDefaultWriter
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorASCII
(
cx
"
epic
fail
"
)
;
return
false
;
}
static
MOZ_MUST_USE
bool
WritableStream_closed
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
closed
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
closedPromise
(
cx
unwrappedWriter
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
closedPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStream_desiredSize
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
desiredSize
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
false
;
}
if
(
!
unwrappedWriter
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_WRITABLESTREAMWRITER_NOT_OWNED
"
get
desiredSize
"
)
;
return
false
;
}
if
(
!
WritableStreamDefaultWriterGetDesiredSize
(
cx
unwrappedWriter
args
.
rval
(
)
)
)
{
return
false
;
}
MOZ_ASSERT
(
args
.
rval
(
)
.
isNull
(
)
|
|
args
.
rval
(
)
.
isNumber
(
)
"
expected
a
type
that
'
ll
never
require
wrapping
"
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
WritableStream_ready
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
WritableStreamDefaultWriter
*
>
unwrappedWriter
(
cx
UnwrapAndTypeCheckThis
<
WritableStreamDefaultWriter
>
(
cx
args
"
get
ready
"
)
)
;
if
(
!
unwrappedWriter
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
Rooted
<
JSObject
*
>
readyPromise
(
cx
unwrappedWriter
-
>
readyPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readyPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
readyPromise
)
;
return
true
;
}
static
const
JSPropertySpec
WritableStreamDefaultWriter_properties
[
]
=
{
JS_PSG
(
"
closed
"
WritableStream_closed
0
)
JS_PSG
(
"
desiredSize
"
WritableStream_desiredSize
0
)
JS_PSG
(
"
ready
"
WritableStream_ready
0
)
JS_PS_END
}
;
static
const
JSFunctionSpec
WritableStreamDefaultWriter_methods
[
]
=
{
JS_FS_END
}
;
JS_STREAMS_CLASS_SPEC
(
WritableStreamDefaultWriter
0
SlotCount
ClassSpec
:
:
DontDefineConstructor
0
JS_NULL_CLASS_OPS
)
;
