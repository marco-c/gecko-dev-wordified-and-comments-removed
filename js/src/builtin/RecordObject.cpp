#
include
"
builtin
/
RecordObject
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
RecordType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
RecordObject
*
RecordObject
:
:
create
(
JSContext
*
cx
Handle
<
RecordType
*
>
record
)
{
RecordObject
*
rec
=
NewBuiltinClassInstance
<
RecordObject
>
(
cx
)
;
if
(
!
rec
)
{
return
nullptr
;
}
rec
-
>
setFixedSlot
(
PrimitiveValueSlot
ExtendedPrimitiveValue
(
*
record
)
)
;
return
rec
;
}
RecordType
*
RecordObject
:
:
unbox
(
)
const
{
return
&
getFixedSlot
(
PrimitiveValueSlot
)
.
toExtendedPrimitive
(
)
.
as
<
RecordType
>
(
)
;
}
bool
RecordObject
:
:
maybeUnbox
(
JSObject
*
obj
MutableHandle
<
RecordType
*
>
rrec
)
{
if
(
obj
-
>
is
<
RecordType
>
(
)
)
{
rrec
.
set
(
&
obj
-
>
as
<
RecordType
>
(
)
)
;
return
true
;
}
if
(
obj
-
>
is
<
RecordObject
>
(
)
)
{
rrec
.
set
(
obj
-
>
as
<
RecordObject
>
(
)
.
unbox
(
)
)
;
return
true
;
}
return
false
;
}
bool
rec_resolve
(
JSContext
*
cx
HandleObject
obj
HandleId
id
bool
*
resolvedp
)
{
RootedValue
value
(
cx
)
;
*
resolvedp
=
obj
-
>
as
<
RecordObject
>
(
)
.
unbox
(
)
-
>
getOwnProperty
(
cx
id
&
value
)
;
if
(
*
resolvedp
)
{
static
const
unsigned
RECORD_PROPERTY_ATTRS
=
JSPROP_ENUMERATE
|
JSPROP_READONLY
|
JSPROP_PERMANENT
;
return
DefineDataProperty
(
cx
obj
id
value
RECORD_PROPERTY_ATTRS
|
JSPROP_RESOLVING
)
;
}
return
true
;
}
static
const
JSClassOps
RecordObjectClassOps
=
{
nullptr
nullptr
nullptr
nullptr
rec_resolve
nullptr
nullptr
nullptr
nullptr
nullptr
}
;
const
JSClass
RecordObject
:
:
class_
=
{
"
RecordObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
&
RecordObjectClassOps
}
;
