#
ifndef
builtin_ParseRecordObject_h
#
define
builtin_ParseRecordObject_h
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
vm
/
JSContext
.
h
"
namespace
js
{
using
JSONParseNode
=
JSString
;
class
ParseRecordObject
:
public
NativeObject
{
enum
{
ParseNodeSlot
ValueSlot
KeySlot
EntriesSlot
SlotCount
}
;
public
:
using
EntryMap
=
JSObject
;
static
const
JSClass
class_
;
static
ParseRecordObject
*
create
(
JSContext
*
cx
const
Value
&
val
)
;
static
ParseRecordObject
*
create
(
JSContext
*
cx
Handle
<
js
:
:
JSONParseNode
*
>
parseNode
const
Value
&
val
)
;
JSONParseNode
*
getParseNode
(
)
const
{
const
Value
&
slot
=
getSlot
(
ParseNodeSlot
)
;
return
slot
.
isUndefined
(
)
?
nullptr
:
slot
.
toString
(
)
;
}
JS
:
:
PropertyKey
getKey
(
JSContext
*
cx
)
const
;
bool
setKey
(
JSContext
*
cx
const
JS
:
:
PropertyKey
&
key
)
;
const
Value
&
getValue
(
)
const
{
return
getSlot
(
ValueSlot
)
;
}
void
setValue
(
JS
:
:
Handle
<
JS
:
:
Value
>
value
)
{
setSlot
(
ValueSlot
value
)
;
}
bool
hasValue
(
)
const
{
return
!
getValue
(
)
.
isUndefined
(
)
;
}
bool
getEntries
(
JSContext
*
cx
MutableHandle
<
EntryMap
*
>
entries
)
;
bool
setEntries
(
JSContext
*
cx
Handle
<
EntryMap
*
>
entries
)
;
}
;
}
#
endif
