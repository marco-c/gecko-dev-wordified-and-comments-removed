function
ArrayIndexOf
(
searchElement
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
len
=
=
=
0
)
return
-
1
;
var
n
=
arguments
.
length
>
1
?
ToInteger
(
arguments
[
1
]
)
+
0
:
0
;
if
(
n
>
=
len
)
return
-
1
;
var
k
;
if
(
n
>
=
0
)
k
=
n
;
else
{
k
=
len
+
n
;
if
(
k
<
0
)
k
=
0
;
}
for
(
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
&
&
O
[
k
]
=
=
=
searchElement
)
return
k
;
}
return
-
1
;
}
function
ArrayStaticIndexOf
(
list
searchElement
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
indexOf
"
)
;
var
fromIndex
=
arguments
.
length
>
2
?
arguments
[
2
]
:
0
;
return
callFunction
(
ArrayIndexOf
list
searchElement
fromIndex
)
;
}
function
ArrayLastIndexOf
(
searchElement
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
len
=
=
=
0
)
return
-
1
;
var
n
=
arguments
.
length
>
1
?
ToInteger
(
arguments
[
1
]
)
+
0
:
len
-
1
;
var
k
;
if
(
n
>
len
-
1
)
k
=
len
-
1
;
else
if
(
n
<
0
)
k
=
len
+
n
;
else
k
=
n
;
for
(
;
k
>
=
0
;
k
-
-
)
{
if
(
k
in
O
&
&
O
[
k
]
=
=
=
searchElement
)
return
k
;
}
return
-
1
;
}
function
ArrayStaticLastIndexOf
(
list
searchElement
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
lastIndexOf
"
)
;
var
fromIndex
;
if
(
arguments
.
length
>
2
)
{
fromIndex
=
arguments
[
2
]
;
}
else
{
var
O
=
ToObject
(
list
)
;
var
len
=
ToLength
(
O
.
length
)
;
fromIndex
=
len
-
1
;
}
return
callFunction
(
ArrayLastIndexOf
list
searchElement
fromIndex
)
;
}
function
ArrayEvery
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
every
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
void
0
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
if
(
!
callContentFunction
(
callbackfn
T
O
[
k
]
k
O
)
)
return
false
;
}
}
return
true
;
}
function
ArrayStaticEvery
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
every
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
var
T
=
arguments
.
length
>
2
?
arguments
[
2
]
:
void
0
;
return
callFunction
(
ArrayEvery
list
callbackfn
T
)
;
}
function
ArraySome
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
some
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
void
0
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
if
(
callContentFunction
(
callbackfn
T
O
[
k
]
k
O
)
)
return
true
;
}
}
return
false
;
}
function
ArrayStaticSome
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
some
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
var
T
=
arguments
.
length
>
2
?
arguments
[
2
]
:
void
0
;
return
callFunction
(
ArraySome
list
callbackfn
T
)
;
}
function
ArraySort
(
comparefn
)
{
if
(
comparefn
!
=
=
undefined
)
{
if
(
!
IsCallable
(
comparefn
)
)
ThrowTypeError
(
JSMSG_BAD_SORT_ARG
)
;
}
var
O
=
ToObject
(
this
)
;
if
(
callFunction
(
ArrayNativeSort
O
comparefn
)
)
return
O
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
len
<
=
1
)
return
O
;
var
wrappedCompareFn
=
comparefn
;
comparefn
=
function
(
x
y
)
{
if
(
x
=
=
=
undefined
)
{
if
(
y
=
=
=
undefined
)
return
0
;
return
1
;
}
if
(
y
=
=
=
undefined
)
return
-
1
;
var
v
=
ToNumber
(
wrappedCompareFn
(
x
y
)
)
;
return
v
!
=
=
v
?
0
:
v
;
}
return
MergeSort
(
O
len
comparefn
)
;
}
function
ArrayForEach
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
forEach
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
void
0
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
callContentFunction
(
callbackfn
T
O
[
k
]
k
O
)
;
}
}
return
void
0
;
}
function
ArrayStaticForEach
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
forEach
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
var
T
=
arguments
.
length
>
2
?
arguments
[
2
]
:
void
0
;
callFunction
(
ArrayForEach
list
callbackfn
T
)
;
}
function
ArrayMap
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
map
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
void
0
;
var
A
=
ArraySpeciesCreate
(
O
len
)
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
var
mappedValue
=
callContentFunction
(
callbackfn
T
O
[
k
]
k
O
)
;
_DefineDataProperty
(
A
k
mappedValue
)
;
}
}
return
A
;
}
function
ArrayStaticMap
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
map
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
var
T
=
arguments
.
length
>
2
?
arguments
[
2
]
:
void
0
;
return
callFunction
(
ArrayMap
list
callbackfn
T
)
;
}
function
ArrayFilter
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
filter
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
void
0
;
var
A
=
ArraySpeciesCreate
(
O
0
)
;
for
(
var
k
=
0
to
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
var
kValue
=
O
[
k
]
;
var
selected
=
callContentFunction
(
callbackfn
T
kValue
k
O
)
;
if
(
selected
)
_DefineDataProperty
(
A
to
+
+
kValue
)
;
}
}
return
A
;
}
function
ArrayStaticFilter
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
filter
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
var
T
=
arguments
.
length
>
2
?
arguments
[
2
]
:
void
0
;
return
callFunction
(
ArrayFilter
list
callbackfn
T
)
;
}
function
ArrayReduce
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
reduce
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
k
=
0
;
var
accumulator
;
if
(
arguments
.
length
>
1
)
{
accumulator
=
arguments
[
1
]
;
}
else
{
if
(
len
=
=
=
0
)
ThrowTypeError
(
JSMSG_EMPTY_ARRAY_REDUCE
)
;
if
(
IsPackedArray
(
O
)
)
{
accumulator
=
O
[
k
+
+
]
;
}
else
{
var
kPresent
=
false
;
for
(
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
accumulator
=
O
[
k
]
;
kPresent
=
true
;
k
+
+
;
break
;
}
}
if
(
!
kPresent
)
ThrowTypeError
(
JSMSG_EMPTY_ARRAY_REDUCE
)
;
}
}
for
(
;
k
<
len
;
k
+
+
)
{
if
(
k
in
O
)
{
accumulator
=
callbackfn
(
accumulator
O
[
k
]
k
O
)
;
}
}
return
accumulator
;
}
function
ArrayStaticReduce
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
reduce
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
if
(
arguments
.
length
>
2
)
return
callFunction
(
ArrayReduce
list
callbackfn
arguments
[
2
]
)
;
return
callFunction
(
ArrayReduce
list
callbackfn
)
;
}
function
ArrayReduceRight
(
callbackfn
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
reduce
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
k
=
len
-
1
;
var
accumulator
;
if
(
arguments
.
length
>
1
)
{
accumulator
=
arguments
[
1
]
;
}
else
{
if
(
len
=
=
=
0
)
ThrowTypeError
(
JSMSG_EMPTY_ARRAY_REDUCE
)
;
if
(
IsPackedArray
(
O
)
)
{
accumulator
=
O
[
k
-
-
]
;
}
else
{
var
kPresent
=
false
;
for
(
;
k
>
=
0
;
k
-
-
)
{
if
(
k
in
O
)
{
accumulator
=
O
[
k
]
;
kPresent
=
true
;
k
-
-
;
break
;
}
}
if
(
!
kPresent
)
ThrowTypeError
(
JSMSG_EMPTY_ARRAY_REDUCE
)
;
}
}
for
(
;
k
>
=
0
;
k
-
-
)
{
if
(
k
in
O
)
{
accumulator
=
callbackfn
(
accumulator
O
[
k
]
k
O
)
;
}
}
return
accumulator
;
}
function
ArrayStaticReduceRight
(
list
callbackfn
)
{
if
(
arguments
.
length
<
2
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
reduceRight
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
callbackfn
)
)
;
if
(
arguments
.
length
>
2
)
return
callFunction
(
ArrayReduceRight
list
callbackfn
arguments
[
2
]
)
;
return
callFunction
(
ArrayReduceRight
list
callbackfn
)
;
}
function
ArrayFind
(
predicate
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
find
"
)
;
if
(
!
IsCallable
(
predicate
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
predicate
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
var
kValue
=
O
[
k
]
;
if
(
callContentFunction
(
predicate
T
kValue
k
O
)
)
return
kValue
;
}
return
undefined
;
}
function
ArrayFindIndex
(
predicate
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
arguments
.
length
=
=
=
0
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
prototype
.
find
"
)
;
if
(
!
IsCallable
(
predicate
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
predicate
)
)
;
var
T
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
callContentFunction
(
predicate
T
O
[
k
]
k
O
)
)
return
k
;
}
return
-
1
;
}
function
ArrayCopyWithin
(
target
start
end
=
undefined
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
var
relativeTarget
=
ToInteger
(
target
)
;
var
to
=
relativeTarget
<
0
?
std_Math_max
(
len
+
relativeTarget
0
)
:
std_Math_min
(
relativeTarget
len
)
;
var
relativeStart
=
ToInteger
(
start
)
;
var
from
=
relativeStart
<
0
?
std_Math_max
(
len
+
relativeStart
0
)
:
std_Math_min
(
relativeStart
len
)
;
var
relativeEnd
=
end
=
=
=
undefined
?
len
:
ToInteger
(
end
)
;
var
final
=
relativeEnd
<
0
?
std_Math_max
(
len
+
relativeEnd
0
)
:
std_Math_min
(
relativeEnd
len
)
;
var
count
=
std_Math_min
(
final
-
from
len
-
to
)
;
if
(
from
<
to
&
&
to
<
(
from
+
count
)
)
{
from
=
from
+
count
-
1
;
to
=
to
+
count
-
1
;
while
(
count
>
0
)
{
if
(
from
in
O
)
O
[
to
]
=
O
[
from
]
;
else
delete
O
[
to
]
;
from
-
-
;
to
-
-
;
count
-
-
;
}
}
else
{
while
(
count
>
0
)
{
if
(
from
in
O
)
O
[
to
]
=
O
[
from
]
;
else
delete
O
[
to
]
;
from
+
+
;
to
+
+
;
count
-
-
;
}
}
return
O
;
}
function
ArrayFill
(
value
start
=
0
end
=
undefined
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
var
relativeStart
=
ToInteger
(
start
)
;
var
k
=
relativeStart
<
0
?
std_Math_max
(
len
+
relativeStart
0
)
:
std_Math_min
(
relativeStart
len
)
;
var
relativeEnd
=
end
=
=
=
undefined
?
len
:
ToInteger
(
end
)
;
var
final
=
relativeEnd
<
0
?
std_Math_max
(
len
+
relativeEnd
0
)
:
std_Math_min
(
relativeEnd
len
)
;
for
(
;
k
<
final
;
k
+
+
)
{
O
[
k
]
=
value
;
}
return
O
;
}
function
ArrayIncludes
(
searchElement
fromIndex
=
0
)
{
var
O
=
ToObject
(
this
)
;
var
len
=
ToLength
(
O
.
length
)
;
if
(
len
=
=
=
0
)
return
false
;
var
n
=
ToInteger
(
fromIndex
)
;
var
k
;
if
(
n
>
=
0
)
{
k
=
n
;
}
else
{
k
=
len
+
n
;
if
(
k
<
0
)
k
=
0
;
}
while
(
k
<
len
)
{
if
(
SameValueZero
(
searchElement
O
[
k
]
)
)
return
true
;
k
+
+
;
}
return
false
;
}
function
CreateArrayIteratorAt
(
obj
kind
n
)
{
var
iteratedObject
=
ToObject
(
obj
)
;
var
iterator
=
NewArrayIterator
(
)
;
UnsafeSetReservedSlot
(
iterator
ITERATOR_SLOT_TARGET
iteratedObject
)
;
UnsafeSetReservedSlot
(
iterator
ITERATOR_SLOT_NEXT_INDEX
n
)
;
UnsafeSetReservedSlot
(
iterator
ITERATOR_SLOT_ITEM_KIND
kind
)
;
return
iterator
;
}
function
CreateArrayIterator
(
obj
kind
)
{
return
CreateArrayIteratorAt
(
obj
kind
0
)
;
}
function
ArrayIteratorNext
(
)
{
if
(
!
IsObject
(
this
)
|
|
!
IsArrayIterator
(
this
)
)
{
return
callFunction
(
CallArrayIteratorMethodIfWrapped
this
"
ArrayIteratorNext
"
)
;
}
var
a
=
UnsafeGetReservedSlot
(
this
ITERATOR_SLOT_TARGET
)
;
var
result
=
{
value
:
undefined
done
:
false
}
;
if
(
a
=
=
=
null
)
{
result
.
done
=
true
;
return
result
;
}
var
index
=
UnsafeGetReservedSlot
(
this
ITERATOR_SLOT_NEXT_INDEX
)
;
var
itemKind
=
UnsafeGetInt32FromReservedSlot
(
this
ITERATOR_SLOT_ITEM_KIND
)
;
var
len
;
if
(
IsPossiblyWrappedTypedArray
(
a
)
)
{
len
=
PossiblyWrappedTypedArrayLength
(
a
)
;
if
(
len
=
=
=
0
)
{
if
(
PossiblyWrappedTypedArrayHasDetachedBuffer
(
a
)
)
ThrowTypeError
(
JSMSG_TYPED_ARRAY_DETACHED
)
;
}
}
else
{
len
=
ToLength
(
a
.
length
)
;
}
if
(
index
>
=
len
)
{
UnsafeSetReservedSlot
(
this
ITERATOR_SLOT_TARGET
null
)
;
result
.
done
=
true
;
return
result
;
}
UnsafeSetReservedSlot
(
this
ITERATOR_SLOT_NEXT_INDEX
index
+
1
)
;
if
(
itemKind
=
=
=
ITEM_KIND_VALUE
)
{
result
.
value
=
a
[
index
]
;
return
result
;
}
if
(
itemKind
=
=
=
ITEM_KIND_KEY_AND_VALUE
)
{
var
pair
=
[
index
a
[
index
]
]
;
result
.
value
=
pair
;
return
result
;
}
assert
(
itemKind
=
=
=
ITEM_KIND_KEY
itemKind
)
;
result
.
value
=
index
;
return
result
;
}
function
ArrayValuesAt
(
n
)
{
return
CreateArrayIteratorAt
(
this
ITEM_KIND_VALUE
n
)
;
}
function
ArrayValues
(
)
{
return
CreateArrayIterator
(
this
ITEM_KIND_VALUE
)
;
}
_SetCanonicalName
(
ArrayValues
"
values
"
)
;
function
ArrayEntries
(
)
{
return
CreateArrayIterator
(
this
ITEM_KIND_KEY_AND_VALUE
)
;
}
function
ArrayKeys
(
)
{
return
CreateArrayIterator
(
this
ITEM_KIND_KEY
)
;
}
function
ArrayFrom
(
items
mapfn
=
undefined
thisArg
=
undefined
)
{
var
C
=
this
;
var
mapping
=
mapfn
!
=
=
undefined
;
if
(
mapping
&
&
!
IsCallable
(
mapfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
1
mapfn
)
)
;
var
T
=
thisArg
;
var
usingIterator
=
GetMethod
(
items
std_iterator
)
;
if
(
usingIterator
!
=
=
undefined
)
{
var
A
=
IsConstructor
(
C
)
?
new
C
(
)
:
[
]
;
var
k
=
0
;
var
iterator
=
GetIterator
(
items
usingIterator
)
;
var
iteratorWrapper
=
MakeIteratorWrapper
(
iterator
)
;
for
(
var
nextValue
of
allowContentIter
(
iteratorWrapper
)
)
{
var
mappedValue
=
mapping
?
callContentFunction
(
mapfn
T
nextValue
k
)
:
nextValue
;
_DefineDataProperty
(
A
k
+
+
mappedValue
)
;
}
A
.
length
=
k
;
return
A
;
}
assert
(
usingIterator
=
=
=
undefined
"
items
can
'
t
be
an
Iterable
after
step
6
.
g
.
iv
"
)
;
var
arrayLike
=
ToObject
(
items
)
;
var
len
=
ToLength
(
arrayLike
.
length
)
;
var
A
=
IsConstructor
(
C
)
?
new
C
(
len
)
:
std_Array
(
len
)
;
for
(
var
k
=
0
;
k
<
len
;
k
+
+
)
{
var
kValue
=
items
[
k
]
;
var
mappedValue
=
mapping
?
callContentFunction
(
mapfn
T
kValue
k
)
:
kValue
;
_DefineDataProperty
(
A
k
mappedValue
)
;
}
A
.
length
=
len
;
return
A
;
}
function
MakeIteratorWrapper
(
iterator
)
{
return
{
[
std_iterator
]
:
function
IteratorMethod
(
)
{
return
iterator
;
}
}
;
}
function
ArrayToString
(
)
{
var
array
=
ToObject
(
this
)
;
var
func
=
array
.
join
;
if
(
!
IsCallable
(
func
)
)
return
callFunction
(
std_Object_toString
array
)
;
return
callContentFunction
(
func
array
)
;
}
function
ArrayToLocaleString
(
locales
options
)
{
assert
(
IsObject
(
this
)
"
|
this
|
should
be
an
object
"
)
;
var
array
=
this
;
var
len
=
ToLength
(
array
.
length
)
;
if
(
len
=
=
=
0
)
return
"
"
;
var
firstElement
=
array
[
0
]
;
var
R
;
if
(
firstElement
=
=
=
undefined
|
|
firstElement
=
=
=
null
)
{
R
=
"
"
;
}
else
{
#
if
EXPOSE_INTL_API
R
=
ToString
(
callContentFunction
(
firstElement
.
toLocaleString
firstElement
locales
options
)
)
;
#
else
R
=
ToString
(
callContentFunction
(
firstElement
.
toLocaleString
firstElement
)
)
;
#
endif
}
var
separator
=
"
"
;
for
(
var
k
=
1
;
k
<
len
;
k
+
+
)
{
var
nextElement
=
array
[
k
]
;
R
+
=
separator
;
if
(
!
(
nextElement
=
=
=
undefined
|
|
nextElement
=
=
=
null
)
)
{
#
if
EXPOSE_INTL_API
R
+
=
ToString
(
callContentFunction
(
nextElement
.
toLocaleString
nextElement
locales
options
)
)
;
#
else
R
+
=
ToString
(
callContentFunction
(
nextElement
.
toLocaleString
nextElement
)
)
;
#
endif
}
}
return
R
;
}
function
ArraySpecies
(
)
{
return
this
;
}
_SetCanonicalName
(
ArraySpecies
"
get
[
Symbol
.
species
]
"
)
;
function
ArraySpeciesCreate
(
originalArray
length
)
{
assert
(
typeof
length
=
=
"
number
"
"
length
should
be
a
number
"
)
;
assert
(
length
>
=
0
"
length
should
be
a
non
-
negative
number
"
)
;
if
(
length
=
=
=
-
0
)
length
=
0
;
if
(
!
IsArray
(
originalArray
)
)
return
std_Array
(
length
)
;
var
C
=
originalArray
.
constructor
;
if
(
IsConstructor
(
C
)
&
&
IsWrappedArrayConstructor
(
C
)
)
return
std_Array
(
length
)
;
if
(
IsObject
(
C
)
)
{
C
=
C
[
std_species
]
;
if
(
C
=
=
=
GetBuiltinConstructor
(
"
Array
"
)
)
return
std_Array
(
length
)
;
if
(
C
=
=
=
null
)
return
std_Array
(
length
)
;
}
if
(
C
=
=
=
undefined
)
return
std_Array
(
length
)
;
if
(
!
IsConstructor
(
C
)
)
ThrowTypeError
(
JSMSG_NOT_CONSTRUCTOR
"
constructor
property
"
)
;
return
new
C
(
length
)
;
}
function
IsConcatSpreadable
(
O
)
{
if
(
!
IsObject
(
O
)
)
return
false
;
var
spreadable
=
O
[
std_isConcatSpreadable
]
;
if
(
spreadable
!
=
=
undefined
)
return
ToBoolean
(
spreadable
)
;
return
IsArray
(
O
)
;
}
function
ArrayConcat
(
arg1
)
{
var
O
=
ToObject
(
this
)
;
var
A
=
ArraySpeciesCreate
(
O
0
)
;
var
n
=
0
;
var
i
=
0
argsLen
=
arguments
.
length
;
var
E
=
O
;
var
k
len
;
while
(
true
)
{
if
(
IsConcatSpreadable
(
E
)
)
{
len
=
ToLength
(
E
.
length
)
;
if
(
n
+
len
>
MAX_NUMERIC_INDEX
)
ThrowTypeError
(
JSMSG_TOO_LONG_ARRAY
)
;
if
(
IsPackedArray
(
A
)
&
&
IsPackedArray
(
E
)
)
{
for
(
k
=
0
;
k
<
len
;
k
+
+
)
{
_DefineDataProperty
(
A
n
E
[
k
]
)
;
n
+
+
;
}
}
else
{
for
(
k
=
0
;
k
<
len
;
k
+
+
)
{
if
(
k
in
E
)
_DefineDataProperty
(
A
n
E
[
k
]
)
;
n
+
+
;
}
}
}
else
{
if
(
n
>
=
MAX_NUMERIC_INDEX
)
ThrowTypeError
(
JSMSG_TOO_LONG_ARRAY
)
;
_DefineDataProperty
(
A
n
E
)
;
n
+
+
;
}
if
(
i
>
=
argsLen
)
break
;
E
=
arguments
[
i
]
;
i
+
+
;
}
A
.
length
=
n
;
return
A
;
}
function
ArrayStaticConcat
(
arr
arg1
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
concat
"
)
;
var
args
=
callFunction
(
std_Array_slice
arguments
1
)
;
return
callFunction
(
std_Function_apply
ArrayConcat
arr
args
)
;
}
function
ArrayStaticJoin
(
arr
separator
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
join
"
)
;
return
callFunction
(
std_Array_join
arr
separator
)
;
}
function
ArrayStaticReverse
(
arr
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
reverse
"
)
;
return
callFunction
(
std_Array_reverse
arr
)
;
}
function
ArrayStaticSort
(
arr
comparefn
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
sort
"
)
;
return
callFunction
(
ArraySort
arr
comparefn
)
;
}
function
ArrayStaticPush
(
arr
arg1
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
push
"
)
;
var
args
=
callFunction
(
std_Array_slice
arguments
1
)
;
return
callFunction
(
std_Function_apply
std_Array_push
arr
args
)
;
}
function
ArrayStaticPop
(
arr
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
pop
"
)
;
return
callFunction
(
std_Array_pop
arr
)
;
}
function
ArrayStaticShift
(
arr
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
shift
"
)
;
return
callFunction
(
std_Array_shift
arr
)
;
}
function
ArrayStaticUnshift
(
arr
arg1
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
unshift
"
)
;
var
args
=
callFunction
(
std_Array_slice
arguments
1
)
;
return
callFunction
(
std_Function_apply
std_Array_unshift
arr
args
)
;
}
function
ArrayStaticSplice
(
arr
start
deleteCount
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
splice
"
)
;
var
args
=
callFunction
(
std_Array_slice
arguments
1
)
;
return
callFunction
(
std_Function_apply
std_Array_splice
arr
args
)
;
}
function
ArrayStaticSlice
(
arr
start
end
)
{
if
(
arguments
.
length
<
1
)
ThrowTypeError
(
JSMSG_MISSING_FUN_ARG
0
"
Array
.
slice
"
)
;
return
callFunction
(
std_Array_slice
arr
start
end
)
;
}
