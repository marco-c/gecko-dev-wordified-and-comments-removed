#
include
"
builtin
/
Promise
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
gc
/
Heap
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
Debug
.
h
"
#
include
"
jsobjinlines
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
static
const
JSFunctionSpec
promise_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
catch
"
"
Promise_catch
"
1
0
)
JS_SELF_HOSTED_FN
(
"
then
"
"
Promise_then
"
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
promise_static_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
all
"
"
Promise_static_all
"
1
0
)
JS_SELF_HOSTED_FN
(
"
race
"
"
Promise_static_race
"
1
0
)
JS_SELF_HOSTED_FN
(
"
reject
"
"
Promise_static_reject
"
1
0
)
JS_SELF_HOSTED_FN
(
"
resolve
"
"
Promise_static_resolve
"
1
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
promise_static_properties
[
]
=
{
JS_SELF_HOSTED_SYM_GET
(
species
"
Promise_static_get_species
"
0
)
JS_PS_END
}
;
PromiseObject
*
PromiseObject
:
:
create
(
JSContext
*
cx
HandleObject
executor
HandleObject
proto
)
{
MOZ_ASSERT
(
executor
-
>
isCallable
(
)
)
;
RootedObject
usedProto
(
cx
proto
)
;
bool
wrappedProto
=
false
;
if
(
proto
&
&
IsWrapper
(
proto
)
)
{
wrappedProto
=
true
;
usedProto
=
CheckedUnwrap
(
proto
)
;
if
(
!
usedProto
)
return
nullptr
;
}
Rooted
<
PromiseObject
*
>
promise
(
cx
)
;
{
mozilla
:
:
Maybe
<
AutoCompartment
>
ac
;
if
(
wrappedProto
)
ac
.
emplace
(
cx
usedProto
)
;
promise
=
&
NewObjectWithClassProto
(
cx
&
class_
usedProto
)
-
>
as
<
PromiseObject
>
(
)
;
if
(
!
promise
)
return
nullptr
;
promise
-
>
setFixedSlot
(
PROMISE_STATE_SLOT
Int32Value
(
PROMISE_STATE_PENDING
)
)
;
RootedArrayObject
reactions
(
cx
NewDenseEmptyArray
(
cx
)
)
;
if
(
!
reactions
)
return
nullptr
;
promise
-
>
setFixedSlot
(
PROMISE_FULFILL_REACTIONS_SLOT
ObjectValue
(
*
reactions
)
)
;
reactions
=
NewDenseEmptyArray
(
cx
)
;
if
(
!
reactions
)
return
nullptr
;
promise
-
>
setFixedSlot
(
PROMISE_REJECT_REACTIONS_SLOT
ObjectValue
(
*
reactions
)
)
;
RootedObject
stack
(
cx
)
;
if
(
!
JS
:
:
CaptureCurrentStack
(
cx
&
stack
0
)
)
return
nullptr
;
promise
-
>
setFixedSlot
(
PROMISE_ALLOCATION_SITE_SLOT
ObjectValue
(
*
stack
)
)
;
Value
now
=
JS
:
:
TimeValue
(
JS
:
:
TimeClip
(
static_cast
<
double
>
(
PRMJ_Now
(
)
)
/
PRMJ_USEC_PER_MSEC
)
)
;
promise
-
>
setFixedSlot
(
PROMISE_ALLOCATION_TIME_SLOT
now
)
;
}
RootedValue
promiseVal
(
cx
ObjectValue
(
*
promise
)
)
;
if
(
wrappedProto
&
&
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
promiseVal
)
)
return
nullptr
;
RootedValue
resolvingFunctionsVal
(
cx
)
;
if
(
!
GlobalObject
:
:
getIntrinsicValue
(
cx
cx
-
>
global
(
)
cx
-
>
names
(
)
.
CreateResolvingFunctions
&
resolvingFunctionsVal
)
)
{
return
nullptr
;
}
InvokeArgs
args
(
cx
)
;
if
(
!
args
.
init
(
1
)
)
return
nullptr
;
args
.
setCallee
(
resolvingFunctionsVal
)
;
args
.
setThis
(
UndefinedValue
(
)
)
;
args
[
0
]
.
set
(
promiseVal
)
;
if
(
!
Invoke
(
cx
args
)
)
return
nullptr
;
RootedArrayObject
resolvingFunctions
(
cx
&
args
.
rval
(
)
.
toObject
(
)
.
as
<
ArrayObject
>
(
)
)
;
RootedValue
resolveVal
(
cx
resolvingFunctions
-
>
getDenseElement
(
0
)
)
;
MOZ_ASSERT
(
IsCallable
(
resolveVal
)
)
;
RootedValue
rejectVal
(
cx
resolvingFunctions
-
>
getDenseElement
(
1
)
)
;
MOZ_ASSERT
(
IsCallable
(
rejectVal
)
)
;
if
(
wrappedProto
)
{
AutoCompartment
ac
(
cx
promise
)
;
RootedValue
wrappedResolveVal
(
cx
resolveVal
)
;
RootedValue
wrappedRejectVal
(
cx
rejectVal
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedResolveVal
)
|
|
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedRejectVal
)
)
{
return
nullptr
;
}
promise
-
>
setFixedSlot
(
PROMISE_RESOLVE_FUNCTION_SLOT
wrappedResolveVal
)
;
promise
-
>
setFixedSlot
(
PROMISE_REJECT_FUNCTION_SLOT
wrappedRejectVal
)
;
}
else
{
promise
-
>
setFixedSlot
(
PROMISE_RESOLVE_FUNCTION_SLOT
resolveVal
)
;
promise
-
>
setFixedSlot
(
PROMISE_REJECT_FUNCTION_SLOT
rejectVal
)
;
}
InvokeArgs
args2
(
cx
)
;
if
(
!
args2
.
init
(
2
)
)
return
nullptr
;
args2
.
setCallee
(
ObjectValue
(
*
executor
)
)
;
args2
.
setThis
(
UndefinedValue
(
)
)
;
args2
[
0
]
.
set
(
resolveVal
)
;
args2
[
1
]
.
set
(
rejectVal
)
;
bool
success
=
Invoke
(
cx
args2
)
;
if
(
!
success
)
{
RootedValue
exceptionVal
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
exceptionVal
)
)
return
nullptr
;
InvokeArgs
args
(
cx
)
;
if
(
!
args
.
init
(
1
)
)
return
nullptr
;
args
.
setCallee
(
rejectVal
)
;
args
.
setThis
(
UndefinedValue
(
)
)
;
args
[
0
]
.
set
(
exceptionVal
)
;
if
(
!
Invoke
(
cx
args
)
)
return
nullptr
;
}
JS
:
:
dbg
:
:
onNewPromise
(
cx
promise
)
;
return
promise
;
}
namespace
{
mozilla
:
:
Atomic
<
uint64_t
>
gIDGenerator
(
0
)
;
}
double
PromiseObject
:
:
getID
(
)
{
Value
idVal
(
getReservedSlot
(
PROMISE_ID_SLOT
)
)
;
if
(
idVal
.
isUndefined
(
)
)
{
idVal
.
setDouble
(
+
+
gIDGenerator
)
;
setReservedSlot
(
PROMISE_ID_SLOT
idVal
)
;
}
return
idVal
.
toNumber
(
)
;
}
bool
PromiseObject
:
:
dependentPromises
(
JSContext
*
cx
AutoValueVector
&
values
)
{
RootedValue
rejectReactionsVal
(
cx
getReservedSlot
(
PROMISE_REJECT_REACTIONS_SLOT
)
)
;
RootedObject
rejectReactions
(
cx
rejectReactionsVal
.
toObjectOrNull
(
)
)
;
if
(
!
rejectReactions
)
return
true
;
AutoIdVector
keys
(
cx
)
;
if
(
!
GetPropertyKeys
(
cx
rejectReactions
JSITER_OWNONLY
&
keys
)
)
return
false
;
if
(
keys
.
length
(
)
=
=
0
)
return
true
;
if
(
!
values
.
growBy
(
keys
.
length
(
)
)
)
return
false
;
RootedAtom
capabilitiesAtom
(
cx
Atomize
(
cx
"
capabilities
"
strlen
(
"
capabilities
"
)
)
)
;
if
(
!
capabilitiesAtom
)
return
false
;
RootedId
capabilitiesId
(
cx
AtomToId
(
capabilitiesAtom
)
)
;
for
(
size_t
i
=
0
;
i
<
keys
.
length
(
)
;
i
+
+
)
{
MutableHandleValue
val
=
values
[
i
]
;
if
(
!
GetProperty
(
cx
rejectReactions
rejectReactions
keys
[
i
]
val
)
)
return
false
;
RootedObject
reaction
(
cx
&
val
.
toObject
(
)
)
;
if
(
!
GetProperty
(
cx
reaction
reaction
capabilitiesId
val
)
)
return
false
;
RootedObject
capabilities
(
cx
&
val
.
toObject
(
)
)
;
if
(
!
GetProperty
(
cx
capabilities
capabilities
cx
-
>
runtime
(
)
-
>
commonNames
-
>
promise
val
)
)
return
false
;
}
return
true
;
}
namespace
js
{
bool
PromiseConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Promise
"
)
)
return
false
;
RootedValue
executorVal
(
cx
args
.
get
(
0
)
)
;
if
(
!
IsCallable
(
executorVal
)
)
return
ReportIsNotFunction
(
cx
executorVal
)
;
RootedObject
executor
(
cx
&
executorVal
.
toObject
(
)
)
;
RootedObject
newTarget
(
cx
&
args
.
newTarget
(
)
.
toObject
(
)
)
;
RootedObject
originalNewTarget
(
cx
newTarget
)
;
bool
needsWrapping
=
false
;
if
(
IsWrapper
(
newTarget
)
)
{
newTarget
=
CheckedUnwrap
(
newTarget
)
;
MOZ_ASSERT
(
newTarget
)
;
MOZ_ASSERT
(
newTarget
!
=
originalNewTarget
)
;
{
AutoCompartment
ac
(
cx
newTarget
)
;
RootedObject
promiseCtor
(
cx
)
;
if
(
!
GetBuiltinConstructor
(
cx
JSProto_Promise
&
promiseCtor
)
)
return
false
;
if
(
newTarget
=
=
promiseCtor
)
needsWrapping
=
true
;
}
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromConstructor
(
cx
newTarget
&
proto
)
)
return
false
;
if
(
needsWrapping
&
&
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
proto
)
)
return
false
;
Rooted
<
PromiseObject
*
>
promise
(
cx
PromiseObject
:
:
create
(
cx
executor
proto
)
)
;
if
(
!
promise
)
return
false
;
args
.
rval
(
)
.
setObject
(
*
promise
)
;
if
(
needsWrapping
)
return
cx
-
>
compartment
(
)
-
>
wrap
(
cx
args
.
rval
(
)
)
;
return
true
;
}
bool
PromiseObject
:
:
resolve
(
JSContext
*
cx
HandleValue
resolutionValue
)
{
if
(
this
-
>
getFixedSlot
(
PROMISE_STATE_SLOT
)
.
toInt32
(
)
!
=
unsigned
(
JS
:
:
PromiseState
:
:
Pending
)
)
return
true
;
RootedValue
funVal
(
cx
this
-
>
getReservedSlot
(
PROMISE_RESOLVE_FUNCTION_SLOT
)
)
;
MOZ_ASSERT
(
funVal
.
toObject
(
)
.
is
<
JSFunction
>
(
)
)
;
InvokeArgs
args
(
cx
)
;
if
(
!
args
.
init
(
1
)
)
return
false
;
args
.
setCallee
(
funVal
)
;
args
.
setThis
(
UndefinedValue
(
)
)
;
args
[
0
]
.
set
(
resolutionValue
)
;
return
Invoke
(
cx
args
)
;
}
bool
PromiseObject
:
:
reject
(
JSContext
*
cx
HandleValue
rejectionValue
)
{
if
(
this
-
>
getFixedSlot
(
PROMISE_STATE_SLOT
)
.
toInt32
(
)
!
=
unsigned
(
JS
:
:
PromiseState
:
:
Pending
)
)
return
true
;
RootedValue
funVal
(
cx
this
-
>
getReservedSlot
(
PROMISE_REJECT_FUNCTION_SLOT
)
)
;
MOZ_ASSERT
(
funVal
.
toObject
(
)
.
is
<
JSFunction
>
(
)
)
;
InvokeArgs
args
(
cx
)
;
if
(
!
args
.
init
(
1
)
)
return
false
;
args
.
setCallee
(
funVal
)
;
args
.
setThis
(
UndefinedValue
(
)
)
;
args
[
0
]
.
set
(
rejectionValue
)
;
return
Invoke
(
cx
args
)
;
}
}
static
JSObject
*
CreatePromisePrototype
(
JSContext
*
cx
JSProtoKey
key
)
{
return
cx
-
>
global
(
)
-
>
createBlankPrototype
(
cx
&
PromiseObject
:
:
protoClass_
)
;
}
static
const
ClassSpec
PromiseObjectClassSpec
=
{
GenericCreateConstructor
<
PromiseConstructor
1
gc
:
:
AllocKind
:
:
FUNCTION
>
CreatePromisePrototype
promise_static_methods
promise_static_properties
promise_methods
}
;
const
Class
PromiseObject
:
:
class_
=
{
"
Promise
"
JSCLASS_HAS_RESERVED_SLOTS
(
RESERVED_SLOTS
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Promise
)
|
JSCLASS_HAS_XRAYED_CONSTRUCTOR
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
&
PromiseObjectClassSpec
}
;
static
const
ClassSpec
PromiseObjectProtoClassSpec
=
{
DELEGATED_CLASSSPEC
(
PromiseObject
:
:
class_
.
spec
)
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
ClassSpec
:
:
IsDelegated
}
;
const
Class
PromiseObject
:
:
protoClass_
=
{
"
PromiseProto
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Promise
)
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
&
PromiseObjectProtoClassSpec
}
;
