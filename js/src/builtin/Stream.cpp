#
include
"
builtin
/
Stream
.
h
"
#
include
"
js
/
Stream
.
h
"
#
include
"
gc
/
Heap
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
SelfHosting
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
List
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
enum
ReaderType
{
ReaderType_Default
ReaderType_BYOB
}
;
template
<
class
T
>
bool
Is
(
const
HandleValue
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
T
>
(
)
;
}
template
<
class
T
>
bool
IsMaybeWrapped
(
const
HandleValue
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
canUnwrapAs
<
T
>
(
)
;
}
JS
:
:
ReadableStreamMode
ReadableStream
:
:
mode
(
)
const
{
ReadableStreamController
*
controller
=
this
-
>
controller
(
)
;
if
(
controller
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
return
JS
:
:
ReadableStreamMode
:
:
Default
;
}
return
controller
-
>
as
<
ReadableByteStreamController
>
(
)
.
hasExternalSource
(
)
?
JS
:
:
ReadableStreamMode
:
:
ExternalSource
:
JS
:
:
ReadableStreamMode
:
:
Byte
;
}
uint8_t
ReadableStream
:
:
embeddingFlags
(
)
const
{
uint8_t
flags
=
controller
(
)
-
>
flags
(
)
>
>
ReadableStreamController
:
:
EmbeddingFlagsOffset
;
MOZ_ASSERT_IF
(
flags
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
)
;
return
flags
;
}
template
<
class
T
>
static
T
*
ToUnwrapped
(
JSContext
*
cx
JSObject
*
obj
)
{
if
(
IsWrapper
(
obj
)
)
{
obj
=
CheckedUnwrap
(
obj
)
;
if
(
!
obj
)
{
ReportAccessDenied
(
cx
)
;
return
nullptr
;
}
}
return
&
obj
-
>
as
<
T
>
(
)
;
}
template
<
class
T
>
static
T
*
ToUnwrapped
(
JSContext
*
cx
HandleValue
v
)
{
return
ToUnwrapped
<
T
>
(
cx
&
v
.
toObject
(
)
)
;
}
static
MOZ_MUST_USE
bool
UnwrapStreamFromReader
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
reader
MutableHandle
<
ReadableStream
*
>
unwrappedResult
)
{
MOZ_ASSERT
(
reader
-
>
hasStream
(
)
)
;
return
UnwrapInternalSlot
(
cx
reader
ReadableStreamReader
:
:
Slot_Stream
unwrappedResult
)
;
}
static
MOZ_MUST_USE
bool
UnwrapReaderFromStream
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
MutableHandle
<
ReadableStreamReader
*
>
unwrappedResult
)
{
return
UnwrapInternalSlot
(
cx
stream
ReadableStream
:
:
Slot_Reader
unwrappedResult
)
;
}
static
MOZ_MUST_USE
ReadableStreamReader
*
UnwrapReaderFromStreamNoThrow
(
ReadableStream
*
stream
)
{
JSObject
*
readerObj
=
&
stream
-
>
getFixedSlot
(
ReadableStream
:
:
Slot_Reader
)
.
toObject
(
)
;
if
(
IsProxy
(
readerObj
)
)
{
if
(
JS_IsDeadWrapper
(
readerObj
)
)
{
return
nullptr
;
}
readerObj
=
CheckedUnwrap
(
readerObj
)
;
if
(
!
readerObj
)
{
return
nullptr
;
}
}
return
&
readerObj
-
>
as
<
ReadableStreamReader
>
(
)
;
}
inline
static
MOZ_MUST_USE
JSFunction
*
NewHandler
(
JSContext
*
cx
Native
handler
HandleObject
target
)
{
cx
-
>
check
(
target
)
;
RootedAtom
funName
(
cx
cx
-
>
names
(
)
.
empty
)
;
RootedFunction
handlerFun
(
cx
NewNativeFunction
(
cx
handler
0
funName
gc
:
:
AllocKind
:
:
FUNCTION_EXTENDED
GenericObject
)
)
;
if
(
!
handlerFun
)
{
return
nullptr
;
}
handlerFun
-
>
setExtendedSlot
(
0
ObjectValue
(
*
target
)
)
;
return
handlerFun
;
}
template
<
class
T
>
inline
static
MOZ_MUST_USE
T
*
TargetFromHandler
(
JSObject
&
handler
)
{
return
&
handler
.
as
<
JSFunction
>
(
)
.
getExtendedSlot
(
0
)
.
toObject
(
)
.
as
<
T
>
(
)
;
}
inline
static
MOZ_MUST_USE
bool
ResetQueue
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedContainer
)
;
inline
static
MOZ_MUST_USE
bool
InvokeOrNoop
(
JSContext
*
cx
HandleValue
O
HandlePropertyName
P
HandleValue
arg
MutableHandleValue
rval
)
;
static
MOZ_MUST_USE
JSObject
*
PromiseInvokeOrNoop
(
JSContext
*
cx
HandleValue
O
HandlePropertyName
P
HandleValue
arg
)
;
static
MOZ_MUST_USE
JSObject
*
PromiseRejectedWithPendingError
(
JSContext
*
cx
)
{
RootedValue
exn
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
exn
)
)
{
return
nullptr
;
}
return
PromiseObject
:
:
unforgeableReject
(
cx
exn
)
;
}
static
MOZ_MUST_USE
bool
ReturnPromiseRejectedWithPendingError
(
JSContext
*
cx
const
CallArgs
&
args
)
{
JSObject
*
promise
=
PromiseRejectedWithPendingError
(
cx
)
;
if
(
!
promise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
promise
)
;
return
true
;
}
inline
static
MOZ_MUST_USE
bool
SetNewList
(
JSContext
*
cx
HandleNativeObject
unwrappedContainer
uint32_t
slot
)
{
AutoRealm
ar
(
cx
unwrappedContainer
)
;
NativeObject
*
list
=
NewList
(
cx
)
;
if
(
!
list
)
{
return
false
;
}
unwrappedContainer
-
>
setFixedSlot
(
slot
ObjectValue
(
*
list
)
)
;
return
true
;
}
class
ByteStreamChunk
:
public
NativeObject
{
private
:
enum
Slots
{
Slot_Buffer
=
0
Slot_ByteOffset
Slot_ByteLength
SlotCount
}
;
public
:
static
const
Class
class_
;
ArrayBufferObject
*
buffer
(
)
{
return
&
getFixedSlot
(
Slot_Buffer
)
.
toObject
(
)
.
as
<
ArrayBufferObject
>
(
)
;
}
uint32_t
byteOffset
(
)
{
return
getFixedSlot
(
Slot_ByteOffset
)
.
toInt32
(
)
;
}
void
SetByteOffset
(
uint32_t
offset
)
{
setFixedSlot
(
Slot_ByteOffset
Int32Value
(
offset
)
)
;
}
uint32_t
byteLength
(
)
{
return
getFixedSlot
(
Slot_ByteLength
)
.
toInt32
(
)
;
}
void
SetByteLength
(
uint32_t
length
)
{
setFixedSlot
(
Slot_ByteLength
Int32Value
(
length
)
)
;
}
static
ByteStreamChunk
*
create
(
JSContext
*
cx
HandleObject
buffer
uint32_t
byteOffset
uint32_t
byteLength
)
{
Rooted
<
ByteStreamChunk
*
>
chunk
(
cx
NewBuiltinClassInstance
<
ByteStreamChunk
>
(
cx
)
)
;
if
(
!
chunk
)
{
return
nullptr
;
}
chunk
-
>
setFixedSlot
(
Slot_Buffer
ObjectValue
(
*
buffer
)
)
;
chunk
-
>
setFixedSlot
(
Slot_ByteOffset
Int32Value
(
byteOffset
)
)
;
chunk
-
>
setFixedSlot
(
Slot_ByteLength
Int32Value
(
byteLength
)
)
;
return
chunk
;
}
}
;
const
Class
ByteStreamChunk
:
:
class_
=
{
"
ByteStreamChunk
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
class
PullIntoDescriptor
:
public
NativeObject
{
private
:
enum
Slots
{
Slot_buffer
Slot_ByteOffset
Slot_ByteLength
Slot_BytesFilled
Slot_ElementSize
Slot_Ctor
Slot_ReaderType
SlotCount
}
;
public
:
static
const
Class
class_
;
ArrayBufferObject
*
buffer
(
)
{
return
&
getFixedSlot
(
Slot_buffer
)
.
toObject
(
)
.
as
<
ArrayBufferObject
>
(
)
;
}
void
setBuffer
(
ArrayBufferObject
*
buffer
)
{
setFixedSlot
(
Slot_buffer
ObjectValue
(
*
buffer
)
)
;
}
JSObject
*
ctor
(
)
{
return
getFixedSlot
(
Slot_Ctor
)
.
toObjectOrNull
(
)
;
}
uint32_t
byteOffset
(
)
const
{
return
getFixedSlot
(
Slot_ByteOffset
)
.
toInt32
(
)
;
}
uint32_t
byteLength
(
)
const
{
return
getFixedSlot
(
Slot_ByteLength
)
.
toInt32
(
)
;
}
uint32_t
bytesFilled
(
)
const
{
return
getFixedSlot
(
Slot_BytesFilled
)
.
toInt32
(
)
;
}
void
setBytesFilled
(
int32_t
bytes
)
{
setFixedSlot
(
Slot_BytesFilled
Int32Value
(
bytes
)
)
;
}
uint32_t
elementSize
(
)
const
{
return
getFixedSlot
(
Slot_ElementSize
)
.
toInt32
(
)
;
}
uint32_t
readerType
(
)
const
{
return
getFixedSlot
(
Slot_ReaderType
)
.
toInt32
(
)
;
}
static
PullIntoDescriptor
*
create
(
JSContext
*
cx
HandleArrayBufferObject
buffer
uint32_t
byteOffset
uint32_t
byteLength
uint32_t
bytesFilled
uint32_t
elementSize
HandleObject
ctor
uint32_t
readerType
)
{
Rooted
<
PullIntoDescriptor
*
>
descriptor
(
cx
NewBuiltinClassInstance
<
PullIntoDescriptor
>
(
cx
)
)
;
if
(
!
descriptor
)
{
return
nullptr
;
}
descriptor
-
>
setFixedSlot
(
Slot_buffer
ObjectValue
(
*
buffer
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_Ctor
ObjectOrNullValue
(
ctor
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ByteOffset
Int32Value
(
byteOffset
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ByteLength
Int32Value
(
byteLength
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_BytesFilled
Int32Value
(
bytesFilled
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ElementSize
Int32Value
(
elementSize
)
)
;
descriptor
-
>
setFixedSlot
(
Slot_ReaderType
Int32Value
(
readerType
)
)
;
return
descriptor
;
}
}
;
const
Class
PullIntoDescriptor
:
:
class_
=
{
"
PullIntoDescriptor
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
class
QueueEntry
:
public
NativeObject
{
private
:
enum
Slots
{
Slot_Value
=
0
Slot_Size
SlotCount
}
;
public
:
static
const
Class
class_
;
Value
value
(
)
{
return
getFixedSlot
(
Slot_Value
)
;
}
double
size
(
)
{
return
getFixedSlot
(
Slot_Size
)
.
toNumber
(
)
;
}
static
QueueEntry
*
create
(
JSContext
*
cx
HandleValue
value
double
size
)
{
Rooted
<
QueueEntry
*
>
entry
(
cx
NewBuiltinClassInstance
<
QueueEntry
>
(
cx
)
)
;
if
(
!
entry
)
{
return
nullptr
;
}
entry
-
>
setFixedSlot
(
Slot_Value
value
)
;
entry
-
>
setFixedSlot
(
Slot_Size
NumberValue
(
size
)
)
;
return
entry
;
}
}
;
const
Class
QueueEntry
:
:
class_
=
{
"
QueueEntry
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
class
TeeState
:
public
NativeObject
{
public
:
enum
Slots
{
Slot_Flags
=
0
Slot_Reason1
Slot_Reason2
Slot_Promise
Slot_Stream
Slot_Branch1
Slot_Branch2
SlotCount
}
;
private
:
enum
Flags
{
Flag_ClosedOrErrored
=
1
<
<
0
Flag_Canceled1
=
1
<
<
1
Flag_Canceled2
=
1
<
<
2
Flag_CloneForBranch2
=
1
<
<
3
}
;
uint32_t
flags
(
)
const
{
return
getFixedSlot
(
Slot_Flags
)
.
toInt32
(
)
;
}
void
setFlags
(
uint32_t
flags
)
{
setFixedSlot
(
Slot_Flags
Int32Value
(
flags
)
)
;
}
public
:
static
const
Class
class_
;
bool
cloneForBranch2
(
)
const
{
return
flags
(
)
&
Flag_CloneForBranch2
;
}
bool
closedOrErrored
(
)
const
{
return
flags
(
)
&
Flag_ClosedOrErrored
;
}
void
setClosedOrErrored
(
)
{
MOZ_ASSERT
(
!
(
flags
(
)
&
Flag_ClosedOrErrored
)
)
;
setFlags
(
flags
(
)
|
Flag_ClosedOrErrored
)
;
}
bool
canceled1
(
)
const
{
return
flags
(
)
&
Flag_Canceled1
;
}
void
setCanceled1
(
HandleValue
reason
)
{
MOZ_ASSERT
(
!
(
flags
(
)
&
Flag_Canceled1
)
)
;
setFlags
(
flags
(
)
|
Flag_Canceled1
)
;
setFixedSlot
(
Slot_Reason1
reason
)
;
}
bool
canceled2
(
)
const
{
return
flags
(
)
&
Flag_Canceled2
;
}
void
setCanceled2
(
HandleValue
reason
)
{
MOZ_ASSERT
(
!
(
flags
(
)
&
Flag_Canceled2
)
)
;
setFlags
(
flags
(
)
|
Flag_Canceled2
)
;
setFixedSlot
(
Slot_Reason2
reason
)
;
}
Value
reason1
(
)
const
{
MOZ_ASSERT
(
canceled1
(
)
)
;
return
getFixedSlot
(
Slot_Reason1
)
;
}
Value
reason2
(
)
const
{
MOZ_ASSERT
(
canceled2
(
)
)
;
return
getFixedSlot
(
Slot_Reason2
)
;
}
PromiseObject
*
promise
(
)
{
return
&
getFixedSlot
(
Slot_Promise
)
.
toObject
(
)
.
as
<
PromiseObject
>
(
)
;
}
ReadableStreamDefaultController
*
branch1
(
)
{
ReadableStreamDefaultController
*
controller
=
&
getFixedSlot
(
Slot_Branch1
)
.
toObject
(
)
.
as
<
ReadableStreamDefaultController
>
(
)
;
MOZ_ASSERT
(
controller
-
>
flags
(
)
&
ReadableStreamController
:
:
Flag_TeeBranch
)
;
MOZ_ASSERT
(
controller
-
>
isTeeBranch1
(
)
)
;
return
controller
;
}
void
setBranch1
(
ReadableStreamDefaultController
*
controller
)
{
MOZ_ASSERT
(
controller
-
>
flags
(
)
&
ReadableStreamController
:
:
Flag_TeeBranch
)
;
MOZ_ASSERT
(
controller
-
>
isTeeBranch1
(
)
)
;
setFixedSlot
(
Slot_Branch1
ObjectValue
(
*
controller
)
)
;
}
ReadableStreamDefaultController
*
branch2
(
)
{
ReadableStreamDefaultController
*
controller
=
&
getFixedSlot
(
Slot_Branch2
)
.
toObject
(
)
.
as
<
ReadableStreamDefaultController
>
(
)
;
MOZ_ASSERT
(
controller
-
>
flags
(
)
&
ReadableStreamController
:
:
Flag_TeeBranch
)
;
MOZ_ASSERT
(
controller
-
>
isTeeBranch2
(
)
)
;
return
controller
;
}
void
setBranch2
(
ReadableStreamDefaultController
*
controller
)
{
MOZ_ASSERT
(
controller
-
>
flags
(
)
&
ReadableStreamController
:
:
Flag_TeeBranch
)
;
MOZ_ASSERT
(
controller
-
>
isTeeBranch2
(
)
)
;
setFixedSlot
(
Slot_Branch2
ObjectValue
(
*
controller
)
)
;
}
static
TeeState
*
create
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
Rooted
<
TeeState
*
>
state
(
cx
NewBuiltinClassInstance
<
TeeState
>
(
cx
)
)
;
if
(
!
state
)
{
return
nullptr
;
}
Rooted
<
PromiseObject
*
>
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
state
-
>
setFixedSlot
(
Slot_Flags
Int32Value
(
0
)
)
;
state
-
>
setFixedSlot
(
Slot_Promise
ObjectValue
(
*
promise
)
)
;
RootedObject
wrappedStream
(
cx
unwrappedStream
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedStream
)
)
{
return
nullptr
;
}
state
-
>
setFixedSlot
(
Slot_Stream
ObjectValue
(
*
wrappedStream
)
)
;
return
state
;
}
}
;
const
Class
TeeState
:
:
class_
=
{
"
TeeState
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
}
;
#
define
CLASS_SPEC
(
cls
nCtorArgs
nSlots
specFlags
classFlags
classOps
)
\
const
ClassSpec
cls
:
:
classSpec_
=
{
\
GenericCreateConstructor
<
cls
:
:
constructor
nCtorArgs
gc
:
:
AllocKind
:
:
FUNCTION
>
\
GenericCreatePrototype
<
cls
>
\
nullptr
\
nullptr
\
cls
#
#
_methods
\
cls
#
#
_properties
\
nullptr
\
specFlags
\
}
;
\
\
const
Class
cls
:
:
class_
=
{
\
#
cls
\
JSCLASS_HAS_RESERVED_SLOTS
(
nSlots
)
|
\
JSCLASS_HAS_CACHED_PROTO
(
JSProto_
#
#
cls
)
|
\
classFlags
\
classOps
\
&
cls
:
:
classSpec_
\
}
;
\
\
const
Class
cls
:
:
protoClass_
=
{
\
"
object
"
\
JSCLASS_HAS_CACHED_PROTO
(
JSProto_
#
#
cls
)
\
JS_NULL_CLASS_OPS
\
&
cls
:
:
classSpec_
\
}
;
ReadableStream
*
ReadableStream
:
:
createStream
(
JSContext
*
cx
HandleObject
proto
)
{
Rooted
<
ReadableStream
*
>
stream
(
cx
NewObjectWithClassProto
<
ReadableStream
>
(
cx
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
stream
-
>
initStateBits
(
Readable
)
;
return
stream
;
}
static
MOZ_MUST_USE
ReadableStreamDefaultController
*
CreateReadableStreamDefaultController
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
HandleValue
underlyingSource
HandleValue
size
HandleValue
highWaterMarkVal
)
;
ReadableStream
*
ReadableStream
:
:
createDefaultStream
(
JSContext
*
cx
HandleValue
underlyingSource
HandleValue
size
HandleValue
highWaterMark
HandleObject
proto
)
{
Rooted
<
ReadableStream
*
>
stream
(
cx
createStream
(
cx
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
ReadableStreamDefaultController
*
controller
=
CreateReadableStreamDefaultController
(
cx
stream
underlyingSource
size
highWaterMark
)
;
if
(
!
controller
)
{
return
nullptr
;
}
stream
-
>
setController
(
controller
)
;
return
stream
;
}
static
MOZ_MUST_USE
ReadableByteStreamController
*
CreateExternalReadableByteStreamController
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
void
*
underlyingSource
)
;
ReadableStream
*
ReadableStream
:
:
createExternalSourceStream
(
JSContext
*
cx
void
*
underlyingSource
uint8_t
flags
HandleObject
proto
)
{
Rooted
<
ReadableStream
*
>
stream
(
cx
createStream
(
cx
proto
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
Rooted
<
ReadableStreamController
*
>
controller
(
cx
)
;
controller
=
CreateExternalReadableByteStreamController
(
cx
stream
underlyingSource
)
;
if
(
!
controller
)
{
return
nullptr
;
}
stream
-
>
setController
(
controller
)
;
controller
-
>
setEmbeddingFlags
(
flags
)
;
return
stream
;
}
bool
ReadableStream
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
RootedValue
underlyingSource
(
cx
args
.
get
(
0
)
)
;
RootedValue
options
(
cx
args
.
get
(
1
)
)
;
if
(
underlyingSource
.
isUndefined
(
)
)
{
RootedObject
sourceObj
(
cx
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
)
;
if
(
!
sourceObj
)
{
return
false
;
}
underlyingSource
=
ObjectValue
(
*
sourceObj
)
;
}
RootedValue
size
(
cx
)
;
RootedValue
highWaterMark
(
cx
)
;
if
(
!
options
.
isUndefined
(
)
)
{
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
size
&
size
)
)
{
return
false
;
}
if
(
!
GetProperty
(
cx
options
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMark
)
)
{
return
false
;
}
}
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ReadableStream
"
)
)
{
return
false
;
}
RootedValue
typeVal
(
cx
)
;
if
(
!
GetProperty
(
cx
underlyingSource
cx
-
>
names
(
)
.
type
&
typeVal
)
)
{
return
false
;
}
RootedString
type
(
cx
ToString
<
CanGC
>
(
cx
typeVal
)
)
;
if
(
!
type
)
{
return
false
;
}
int32_t
notByteStream
;
if
(
!
CompareStrings
(
cx
type
cx
-
>
names
(
)
.
bytes
&
notByteStream
)
)
{
return
false
;
}
if
(
highWaterMark
.
isUndefined
(
)
)
{
highWaterMark
=
Int32Value
(
notByteStream
?
1
:
0
)
;
}
Rooted
<
ReadableStream
*
>
stream
(
cx
)
;
if
(
!
notByteStream
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_BYTES_TYPE_NOT_IMPLEMENTED
)
;
return
false
;
}
else
if
(
typeVal
.
isUndefined
(
)
)
{
stream
=
createDefaultStream
(
cx
underlyingSource
size
highWaterMark
)
;
}
else
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_UNDERLYINGSOURCE_TYPE_WRONG
)
;
return
false
;
}
if
(
!
stream
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
stream
)
;
return
true
;
}
static
bool
ReadableStream_locked
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStream
"
"
get
locked
"
&
unwrappedStream
)
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
unwrappedStream
-
>
locked
(
)
)
;
return
true
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamCancel
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
HandleValue
reason
)
;
static
MOZ_MUST_USE
bool
ReadableStream_cancel
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStream
"
"
cancel
"
&
unwrappedStream
)
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
unwrappedStream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED_METHOD
"
cancel
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
RootedObject
cancelPromise
(
cx
:
:
ReadableStreamCancel
(
cx
unwrappedStream
args
.
get
(
0
)
)
)
;
if
(
!
cancelPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
cancelPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
ReadableStreamDefaultReader
*
CreateReadableStreamDefaultReader
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
;
static
bool
ReadableStream_getReader
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStream
"
"
getReader
"
&
unwrappedStream
)
)
{
return
false
;
}
RootedObject
reader
(
cx
)
;
RootedValue
modeVal
(
cx
)
;
HandleValue
optionsVal
=
args
.
get
(
0
)
;
if
(
!
optionsVal
.
isUndefined
(
)
)
{
if
(
!
GetProperty
(
cx
optionsVal
cx
-
>
names
(
)
.
mode
&
modeVal
)
)
{
return
false
;
}
}
if
(
modeVal
.
isUndefined
(
)
)
{
reader
=
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
)
;
}
else
{
RootedString
mode
(
cx
ToString
<
CanGC
>
(
cx
modeVal
)
)
;
if
(
!
mode
)
{
return
false
;
}
int32_t
notByob
;
if
(
!
CompareStrings
(
cx
mode
cx
-
>
names
(
)
.
byob
&
notByob
)
)
{
return
false
;
}
if
(
notByob
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_INVALID_READER_MODE
)
;
return
false
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_BYTES_TYPE_NOT_IMPLEMENTED
)
;
}
if
(
!
reader
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
reader
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamTee
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
bool
cloneForBranch2
MutableHandle
<
ReadableStream
*
>
branch1
MutableHandle
<
ReadableStream
*
>
branch2
)
;
static
bool
ReadableStream_tee
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStream
"
"
tee
"
&
unwrappedStream
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
branch1
(
cx
)
;
Rooted
<
ReadableStream
*
>
branch2
(
cx
)
;
if
(
!
ReadableStreamTee
(
cx
unwrappedStream
false
&
branch1
&
branch2
)
)
{
return
false
;
}
RootedNativeObject
branches
(
cx
NewDenseFullyAllocatedArray
(
cx
2
)
)
;
if
(
!
branches
)
{
return
false
;
}
branches
-
>
setDenseInitializedLength
(
2
)
;
branches
-
>
initDenseElement
(
0
ObjectValue
(
*
branch1
)
)
;
branches
-
>
initDenseElement
(
1
ObjectValue
(
*
branch2
)
)
;
args
.
rval
(
)
.
setObject
(
*
branches
)
;
return
true
;
}
static
const
JSFunctionSpec
ReadableStream_methods
[
]
=
{
JS_FN
(
"
cancel
"
ReadableStream_cancel
1
0
)
JS_FN
(
"
getReader
"
ReadableStream_getReader
0
0
)
JS_FN
(
"
tee
"
ReadableStream_tee
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
ReadableStream_properties
[
]
=
{
JS_PSG
(
"
locked
"
ReadableStream_locked
0
)
JS_PS_END
}
;
CLASS_SPEC
(
ReadableStream
0
SlotCount
0
0
JS_NULL_CLASS_OPS
)
;
bool
ReadableStream
:
:
locked
(
)
const
{
if
(
hasController
(
)
&
&
controller
(
)
-
>
sourceLocked
(
)
)
{
return
true
;
}
return
hasReader
(
)
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerClose
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerEnqueue
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
HandleValue
chunk
)
;
static
bool
TeeReaderReadHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
TeeState
*
>
teeState
(
cx
TargetFromHandler
<
TeeState
>
(
args
.
callee
(
)
)
)
;
HandleValue
resultVal
=
args
.
get
(
0
)
;
RootedObject
result
(
cx
&
resultVal
.
toObject
(
)
)
;
RootedValue
value
(
cx
)
;
if
(
!
GetPropertyPure
(
cx
result
NameToId
(
cx
-
>
names
(
)
.
value
)
value
.
address
(
)
)
)
{
return
false
;
}
RootedValue
doneVal
(
cx
)
;
if
(
!
GetPropertyPure
(
cx
result
NameToId
(
cx
-
>
names
(
)
.
done
)
doneVal
.
address
(
)
)
)
{
return
false
;
}
bool
done
=
doneVal
.
toBoolean
(
)
;
if
(
done
&
&
!
teeState
-
>
closedOrErrored
(
)
)
{
if
(
!
teeState
-
>
canceled1
(
)
)
{
Rooted
<
ReadableStreamDefaultController
*
>
branch1
(
cx
teeState
-
>
branch1
(
)
)
;
if
(
!
ReadableStreamDefaultControllerClose
(
cx
branch1
)
)
{
return
false
;
}
}
if
(
!
teeState
-
>
canceled2
(
)
)
{
Rooted
<
ReadableStreamDefaultController
*
>
branch2
(
cx
teeState
-
>
branch2
(
)
)
;
if
(
!
ReadableStreamDefaultControllerClose
(
cx
branch2
)
)
{
return
false
;
}
}
teeState
-
>
setClosedOrErrored
(
)
;
}
if
(
teeState
-
>
closedOrErrored
(
)
)
{
return
true
;
}
RootedValue
value1
(
cx
value
)
;
RootedValue
value2
(
cx
value
)
;
MOZ_ASSERT
(
!
teeState
-
>
cloneForBranch2
(
)
"
tee
(
cloneForBranch2
=
true
)
should
not
be
exposed
"
)
;
Rooted
<
ReadableStreamDefaultController
*
>
controller
(
cx
)
;
if
(
!
teeState
-
>
canceled1
(
)
)
{
controller
=
teeState
-
>
branch1
(
)
;
if
(
!
ReadableStreamDefaultControllerEnqueue
(
cx
controller
value1
)
)
{
return
false
;
}
}
if
(
!
teeState
-
>
canceled2
(
)
)
{
controller
=
teeState
-
>
branch2
(
)
;
if
(
!
ReadableStreamDefaultControllerEnqueue
(
cx
controller
value2
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamDefaultReaderRead
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultReader
*
>
unwrappedReader
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamTee_Pull
(
JSContext
*
cx
Handle
<
TeeState
*
>
unwrappedTeeState
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapInternalSlot
(
cx
unwrappedTeeState
TeeState
:
:
Slot_Stream
&
unwrappedStream
)
)
{
return
nullptr
;
}
Rooted
<
ReadableStreamReader
*
>
unwrappedReaderObj
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReaderObj
)
)
{
return
nullptr
;
}
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
&
unwrappedReaderObj
-
>
as
<
ReadableStreamDefaultReader
>
(
)
)
;
RootedObject
readPromise
(
cx
:
:
ReadableStreamDefaultReaderRead
(
cx
unwrappedReader
)
)
;
if
(
!
readPromise
)
{
return
nullptr
;
}
RootedObject
onFulfilled
(
cx
NewHandler
(
cx
TeeReaderReadHandler
unwrappedTeeState
)
)
;
if
(
!
onFulfilled
)
{
return
nullptr
;
}
return
JS
:
:
CallOriginalPromiseThen
(
cx
readPromise
onFulfilled
nullptr
)
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamTee_Cancel
(
JSContext
*
cx
Handle
<
TeeState
*
>
unwrappedTeeState
Handle
<
ReadableStreamDefaultController
*
>
unwrappedBranch
HandleValue
reason
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapInternalSlot
(
cx
unwrappedTeeState
TeeState
:
:
Slot_Stream
&
unwrappedStream
)
)
{
return
nullptr
;
}
bool
bothBranchesCanceled
=
false
;
{
RootedValue
unwrappedReason
(
cx
reason
)
;
{
AutoRealm
ar
(
cx
unwrappedTeeState
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
unwrappedReason
)
)
{
return
nullptr
;
}
}
if
(
unwrappedBranch
-
>
isTeeBranch1
(
)
)
{
unwrappedTeeState
-
>
setCanceled1
(
unwrappedReason
)
;
bothBranchesCanceled
=
unwrappedTeeState
-
>
canceled2
(
)
;
}
else
{
MOZ_ASSERT
(
unwrappedBranch
-
>
isTeeBranch2
(
)
)
;
unwrappedTeeState
-
>
setCanceled2
(
unwrappedReason
)
;
bothBranchesCanceled
=
unwrappedTeeState
-
>
canceled1
(
)
;
}
}
if
(
bothBranchesCanceled
)
{
RootedNativeObject
compositeReason
(
cx
NewDenseFullyAllocatedArray
(
cx
2
)
)
;
if
(
!
compositeReason
)
{
return
nullptr
;
}
compositeReason
-
>
setDenseInitializedLength
(
2
)
;
RootedValue
reason1
(
cx
unwrappedTeeState
-
>
reason1
(
)
)
;
RootedValue
reason2
(
cx
unwrappedTeeState
-
>
reason2
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
reason1
)
|
|
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
reason2
)
)
{
return
nullptr
;
}
compositeReason
-
>
initDenseElement
(
0
reason1
)
;
compositeReason
-
>
initDenseElement
(
1
reason2
)
;
RootedValue
compositeReasonVal
(
cx
ObjectValue
(
*
compositeReason
)
)
;
RootedObject
cancelResult
(
cx
:
:
ReadableStreamCancel
(
cx
unwrappedStream
compositeReasonVal
)
)
;
{
Rooted
<
PromiseObject
*
>
promise
(
cx
unwrappedTeeState
-
>
promise
(
)
)
;
AutoRealm
ar
(
cx
promise
)
;
if
(
!
cancelResult
)
{
if
(
!
RejectPromiseWithPendingError
(
cx
promise
)
)
{
return
nullptr
;
}
}
else
{
RootedValue
resultVal
(
cx
ObjectValue
(
*
cancelResult
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
resultVal
)
)
{
return
nullptr
;
}
if
(
!
PromiseObject
:
:
resolve
(
cx
promise
resultVal
)
)
{
return
nullptr
;
}
}
}
}
RootedObject
promise
(
cx
unwrappedTeeState
-
>
promise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
promise
)
)
{
return
nullptr
;
}
return
promise
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerErrorIfNeeded
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
HandleValue
e
)
;
static
bool
TeeReaderClosedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
TeeState
*
>
teeState
(
cx
TargetFromHandler
<
TeeState
>
(
args
.
callee
(
)
)
)
;
HandleValue
reason
=
args
.
get
(
0
)
;
if
(
!
teeState
-
>
closedOrErrored
(
)
)
{
teeState
-
>
setClosedOrErrored
(
)
;
Rooted
<
ReadableStreamDefaultController
*
>
branch1
(
cx
teeState
-
>
branch1
(
)
)
;
if
(
!
ReadableStreamDefaultControllerErrorIfNeeded
(
cx
branch1
reason
)
)
{
return
false
;
}
Rooted
<
ReadableStreamDefaultController
*
>
branch2
(
cx
teeState
-
>
branch2
(
)
)
;
if
(
!
ReadableStreamDefaultControllerErrorIfNeeded
(
cx
branch2
reason
)
)
{
return
false
;
}
}
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamTee
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
bool
cloneForBranch2
MutableHandle
<
ReadableStream
*
>
branch1Stream
MutableHandle
<
ReadableStream
*
>
branch2Stream
)
{
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
)
)
;
if
(
!
reader
)
{
return
false
;
}
Rooted
<
TeeState
*
>
teeState
(
cx
TeeState
:
:
create
(
cx
unwrappedStream
)
)
;
if
(
!
teeState
)
{
return
false
;
}
RootedValue
hwmValue
(
cx
NumberValue
(
1
)
)
;
RootedValue
underlyingSource
(
cx
ObjectValue
(
*
teeState
)
)
;
branch1Stream
.
set
(
ReadableStream
:
:
createDefaultStream
(
cx
underlyingSource
UndefinedHandleValue
hwmValue
)
)
;
if
(
!
branch1Stream
)
{
return
false
;
}
Rooted
<
ReadableStreamDefaultController
*
>
branch1
(
cx
)
;
branch1
=
&
branch1Stream
-
>
controller
(
)
-
>
as
<
ReadableStreamDefaultController
>
(
)
;
branch1
-
>
setTeeBranch1
(
)
;
teeState
-
>
setBranch1
(
branch1
)
;
branch2Stream
.
set
(
ReadableStream
:
:
createDefaultStream
(
cx
underlyingSource
UndefinedHandleValue
hwmValue
)
)
;
if
(
!
branch2Stream
)
{
return
false
;
}
Rooted
<
ReadableStreamDefaultController
*
>
branch2
(
cx
)
;
branch2
=
&
branch2Stream
-
>
controller
(
)
-
>
as
<
ReadableStreamDefaultController
>
(
)
;
branch2
-
>
setTeeBranch2
(
)
;
teeState
-
>
setBranch2
(
branch2
)
;
RootedObject
closedPromise
(
cx
reader
-
>
closedPromise
(
)
)
;
RootedObject
onRejected
(
cx
NewHandler
(
cx
TeeReaderClosedHandler
teeState
)
)
;
if
(
!
onRejected
)
{
return
false
;
}
if
(
!
JS
:
:
AddPromiseReactions
(
cx
closedPromise
nullptr
onRejected
)
)
{
return
false
;
}
return
true
;
}
inline
static
MOZ_MUST_USE
bool
AppendToListAtSlot
(
JSContext
*
cx
HandleNativeObject
unwrappedContainer
uint32_t
slot
HandleObject
obj
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamAddReadOrReadIntoRequest
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
Rooted
<
ReadableStreamReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReader
)
)
{
return
nullptr
;
}
MOZ_ASSERT_IF
(
unwrappedReader
-
>
is
<
ReadableStreamDefaultReader
>
(
)
unwrappedStream
-
>
readable
(
)
)
;
RootedObject
promise
(
cx
PromiseObject
:
:
createSkippingExecutor
(
cx
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
if
(
!
AppendToListAtSlot
(
cx
unwrappedReader
ReadableStreamReader
:
:
Slot_Requests
promise
)
)
{
return
nullptr
;
}
return
promise
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamControllerCancelSteps
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
HandleValue
reason
)
;
static
bool
ReturnUndefined
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
MOZ_MUST_USE
bool
ReadableStreamCloseInternal
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamCancel
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
HandleValue
reason
)
{
AssertSameCompartment
(
cx
reason
)
;
unwrappedStream
-
>
setDisturbed
(
)
;
if
(
unwrappedStream
-
>
closed
(
)
)
{
return
PromiseObject
:
:
unforgeableResolve
(
cx
UndefinedHandleValue
)
;
}
if
(
unwrappedStream
-
>
errored
(
)
)
{
RootedValue
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
nullptr
;
}
return
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
;
}
if
(
!
ReadableStreamCloseInternal
(
cx
unwrappedStream
)
)
{
return
nullptr
;
}
Rooted
<
ReadableStreamController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
RootedObject
sourceCancelPromise
(
cx
ReadableStreamControllerCancelSteps
(
cx
unwrappedController
reason
)
)
;
if
(
!
sourceCancelPromise
)
{
return
nullptr
;
}
RootedAtom
funName
(
cx
cx
-
>
names
(
)
.
empty
)
;
RootedFunction
returnUndefined
(
cx
NewNativeFunction
(
cx
ReturnUndefined
0
funName
)
)
;
if
(
!
returnUndefined
)
{
return
nullptr
;
}
return
JS
:
:
CallOriginalPromiseThen
(
cx
sourceCancelPromise
returnUndefined
nullptr
)
;
}
MOZ_MUST_USE
bool
ReadableStreamCloseInternal
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
unwrappedStream
-
>
setClosed
(
)
;
if
(
!
unwrappedStream
-
>
hasReader
(
)
)
{
return
true
;
}
Rooted
<
ReadableStreamReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReader
)
)
{
return
false
;
}
if
(
unwrappedReader
-
>
is
<
ReadableStreamDefaultReader
>
(
)
)
{
RootedNativeObject
unwrappedReadRequests
(
cx
unwrappedReader
-
>
requests
(
)
)
;
uint32_t
len
=
unwrappedReadRequests
-
>
getDenseInitializedLength
(
)
;
RootedObject
readRequest
(
cx
)
;
RootedObject
resultObj
(
cx
)
;
RootedValue
resultVal
(
cx
)
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
readRequest
=
&
unwrappedReadRequests
-
>
getDenseElement
(
i
)
.
toObject
(
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readRequest
)
)
{
return
false
;
}
resultObj
=
CreateIterResultObject
(
cx
UndefinedHandleValue
true
)
;
if
(
!
resultObj
)
{
return
false
;
}
resultVal
=
ObjectValue
(
*
resultObj
)
;
if
(
!
ResolvePromise
(
cx
readRequest
resultVal
)
)
{
return
false
;
}
}
unwrappedReader
-
>
clearRequests
(
)
;
}
RootedObject
closedPromise
(
cx
unwrappedReader
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
if
(
!
ResolvePromise
(
cx
closedPromise
UndefinedHandleValue
)
)
{
return
false
;
}
if
(
unwrappedStream
-
>
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
&
&
cx
-
>
runtime
(
)
-
>
readableStreamClosedCallback
)
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
ReadableStreamController
*
controller
=
unwrappedStream
-
>
controller
(
)
;
void
*
source
=
controller
-
>
underlyingSource
(
)
.
toPrivate
(
)
;
cx
-
>
runtime
(
)
-
>
readableStreamClosedCallback
(
cx
unwrappedStream
source
unwrappedStream
-
>
embeddingFlags
(
)
)
;
}
return
true
;
}
MOZ_MUST_USE
bool
ReadableStreamErrorInternal
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
HandleValue
e
)
{
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
unwrappedStream
-
>
setErrored
(
)
;
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
RootedValue
wrappedError
(
cx
e
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedError
)
)
{
return
false
;
}
unwrappedStream
-
>
setStoredError
(
wrappedError
)
;
}
if
(
!
unwrappedStream
-
>
hasReader
(
)
)
{
return
true
;
}
Rooted
<
ReadableStreamReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReader
)
)
{
return
false
;
}
RootedNativeObject
unwrappedReadRequests
(
cx
unwrappedReader
-
>
requests
(
)
)
;
RootedObject
readRequest
(
cx
)
;
RootedValue
val
(
cx
)
;
uint32_t
len
=
unwrappedReadRequests
-
>
getDenseInitializedLength
(
)
;
for
(
uint32_t
i
=
0
;
i
<
len
;
i
+
+
)
{
val
=
unwrappedReadRequests
-
>
getDenseElement
(
i
)
;
readRequest
=
&
val
.
toObject
(
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readRequest
)
)
{
return
false
;
}
if
(
!
RejectPromise
(
cx
readRequest
e
)
)
{
return
false
;
}
}
if
(
!
SetNewList
(
cx
unwrappedReader
ReadableStreamReader
:
:
Slot_Requests
)
)
{
return
false
;
}
RootedObject
closedPromise
(
cx
unwrappedReader
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
if
(
!
RejectPromise
(
cx
closedPromise
e
)
)
{
return
false
;
}
if
(
unwrappedStream
-
>
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
&
&
cx
-
>
runtime
(
)
-
>
readableStreamErroredCallback
)
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
ReadableStreamController
*
controller
=
unwrappedStream
-
>
controller
(
)
;
void
*
source
=
controller
-
>
underlyingSource
(
)
.
toPrivate
(
)
;
RootedValue
error
(
cx
e
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
error
)
)
{
return
false
;
}
cx
-
>
runtime
(
)
-
>
readableStreamErroredCallback
(
cx
unwrappedStream
source
unwrappedStream
-
>
embeddingFlags
(
)
error
)
;
}
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamFulfillReadOrReadIntoRequest
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
HandleValue
chunk
bool
done
)
{
cx
-
>
check
(
chunk
)
;
Rooted
<
ReadableStreamReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReader
)
)
{
return
false
;
}
RootedNativeObject
unwrappedReadIntoRequests
(
cx
unwrappedReader
-
>
requests
(
)
)
;
RootedObject
readIntoRequest
(
cx
ShiftFromList
<
JSObject
>
(
cx
unwrappedReadIntoRequests
)
)
;
MOZ_ASSERT
(
readIntoRequest
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readIntoRequest
)
)
{
return
false
;
}
RootedObject
iterResult
(
cx
CreateIterResultObject
(
cx
chunk
done
)
)
;
if
(
!
iterResult
)
{
return
false
;
}
RootedValue
val
(
cx
ObjectValue
(
*
iterResult
)
)
;
return
ResolvePromise
(
cx
readIntoRequest
val
)
;
}
static
uint32_t
ReadableStreamGetNumReadRequests
(
ReadableStream
*
stream
)
{
if
(
!
stream
-
>
hasReader
(
)
)
{
return
0
;
}
JS
:
:
AutoSuppressGCAnalysis
nogc
;
ReadableStreamReader
*
reader
=
UnwrapReaderFromStreamNoThrow
(
stream
)
;
if
(
!
reader
)
{
return
0
;
}
return
reader
-
>
requests
(
)
-
>
getDenseInitializedLength
(
)
;
}
static
MOZ_MUST_USE
bool
ReadableStreamHasDefaultReader
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
bool
*
result
)
{
if
(
!
unwrappedStream
-
>
hasReader
(
)
)
{
*
result
=
false
;
return
true
;
}
Rooted
<
ReadableStreamReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapReaderFromStream
(
cx
unwrappedStream
&
unwrappedReader
)
)
{
return
false
;
}
*
result
=
unwrappedReader
-
>
is
<
ReadableStreamDefaultReader
>
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamReaderGenericInitialize
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
reader
Handle
<
ReadableStream
*
>
unwrappedStream
)
;
static
MOZ_MUST_USE
ReadableStreamDefaultReader
*
CreateReadableStreamDefaultReader
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
NewBuiltinClassInstance
<
ReadableStreamDefaultReader
>
(
cx
)
)
;
if
(
!
reader
)
{
return
nullptr
;
}
if
(
unwrappedStream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED
)
;
return
nullptr
;
}
if
(
!
ReadableStreamReaderGenericInitialize
(
cx
reader
unwrappedStream
)
)
{
return
nullptr
;
}
if
(
!
SetNewList
(
cx
reader
ReadableStreamReader
:
:
Slot_Requests
)
)
{
return
nullptr
;
}
return
reader
;
}
bool
ReadableStreamDefaultReader
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
ReadableStreamDefaultReader
"
)
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapAndTypeCheckArgument
(
cx
args
"
ReadableStreamDefaultReader
constructor
"
0
&
unwrappedStream
)
)
{
return
false
;
}
RootedObject
reader
(
cx
CreateReadableStreamDefaultReader
(
cx
unwrappedStream
)
)
;
if
(
!
reader
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
reader
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_closed
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultReader
"
"
get
closed
"
&
unwrappedReader
)
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
RootedObject
closedPromise
(
cx
unwrappedReader
-
>
closedPromise
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
closedPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamReaderGenericCancel
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
unwrappedReader
HandleValue
reason
)
;
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_cancel
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultReader
"
"
cancel
"
&
unwrappedReader
)
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedReader
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_OWNED
"
cancel
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
cancelPromise
=
ReadableStreamReaderGenericCancel
(
cx
unwrappedReader
args
.
get
(
0
)
)
;
if
(
!
cancelPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
cancelPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultReader_read
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
unwrappedReader
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultReader
"
"
read
"
&
unwrappedReader
)
)
{
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
if
(
!
unwrappedReader
-
>
hasStream
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_OWNED
"
read
"
)
;
return
ReturnPromiseRejectedWithPendingError
(
cx
args
)
;
}
JSObject
*
readPromise
=
:
:
ReadableStreamDefaultReaderRead
(
cx
unwrappedReader
)
;
if
(
!
readPromise
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
readPromise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamReaderGenericRelease
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
reader
)
;
static
bool
ReadableStreamDefaultReader_releaseLock
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultReader
"
"
releaseLock
"
&
reader
)
)
{
return
false
;
}
if
(
!
reader
-
>
hasStream
(
)
)
{
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
Value
val
=
reader
-
>
getFixedSlot
(
ReadableStreamReader
:
:
Slot_Requests
)
;
if
(
!
val
.
isUndefined
(
)
)
{
NativeObject
*
readRequests
=
&
val
.
toObject
(
)
.
as
<
NativeObject
>
(
)
;
uint32_t
len
=
readRequests
-
>
getDenseInitializedLength
(
)
;
if
(
len
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_NOT_EMPTY
"
releaseLock
"
)
;
return
false
;
}
}
if
(
!
ReadableStreamReaderGenericRelease
(
cx
reader
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
const
JSFunctionSpec
ReadableStreamDefaultReader_methods
[
]
=
{
JS_FN
(
"
cancel
"
ReadableStreamDefaultReader_cancel
1
0
)
JS_FN
(
"
read
"
ReadableStreamDefaultReader_read
0
0
)
JS_FN
(
"
releaseLock
"
ReadableStreamDefaultReader_releaseLock
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
ReadableStreamDefaultReader_properties
[
]
=
{
JS_PSG
(
"
closed
"
ReadableStreamDefaultReader_closed
0
)
JS_PS_END
}
;
const
Class
ReadableStreamReader
:
:
class_
=
{
"
ReadableStreamReader
"
}
;
CLASS_SPEC
(
ReadableStreamDefaultReader
1
SlotCount
ClassSpec
:
:
DontDefineConstructor
0
JS_NULL_CLASS_OPS
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamReaderGenericCancel
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
unwrappedReader
HandleValue
reason
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapStreamFromReader
(
cx
unwrappedReader
&
unwrappedStream
)
)
{
return
nullptr
;
}
return
:
:
ReadableStreamCancel
(
cx
unwrappedStream
reason
)
;
}
static
MOZ_MUST_USE
bool
ReadableStreamReaderGenericInitialize
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
reader
Handle
<
ReadableStream
*
>
unwrappedStream
)
{
cx
-
>
check
(
reader
)
;
{
RootedObject
readerCompartmentStream
(
cx
unwrappedStream
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
readerCompartmentStream
)
)
{
return
false
;
}
reader
-
>
setStream
(
readerCompartmentStream
)
;
}
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
RootedObject
streamCompartmentReader
(
cx
reader
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
streamCompartmentReader
)
)
{
return
false
;
}
unwrappedStream
-
>
setReader
(
streamCompartmentReader
)
;
}
RootedObject
promise
(
cx
)
;
if
(
unwrappedStream
-
>
readable
(
)
)
{
promise
=
PromiseObject
:
:
createSkippingExecutor
(
cx
)
;
}
else
if
(
unwrappedStream
-
>
closed
(
)
)
{
promise
=
PromiseObject
:
:
unforgeableResolve
(
cx
UndefinedHandleValue
)
;
}
else
{
MOZ_ASSERT
(
unwrappedStream
-
>
errored
(
)
)
;
RootedValue
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
false
;
}
promise
=
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
;
}
if
(
!
promise
)
{
return
false
;
}
reader
-
>
setClosedPromise
(
promise
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamReaderGenericRelease
(
JSContext
*
cx
Handle
<
ReadableStreamReader
*
>
unwrappedReader
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapStreamFromReader
(
cx
unwrappedReader
&
unwrappedStream
)
)
{
return
false
;
}
MOZ_ASSERT
(
UnwrapReaderFromStreamNoThrow
(
unwrappedStream
)
=
=
unwrappedReader
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMREADER_RELEASED
)
;
RootedValue
exn
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
exn
)
)
{
return
false
;
}
if
(
unwrappedStream
-
>
readable
(
)
)
{
Rooted
<
PromiseObject
*
>
closedPromise
(
cx
)
;
if
(
!
UnwrapInternalSlot
(
cx
unwrappedReader
ReadableStreamReader
:
:
Slot_ClosedPromise
&
closedPromise
)
)
{
return
false
;
}
AutoRealm
ar
(
cx
closedPromise
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
exn
)
)
{
return
false
;
}
if
(
!
PromiseObject
:
:
reject
(
cx
closedPromise
exn
)
)
{
return
false
;
}
}
else
{
RootedObject
closedPromise
(
cx
PromiseObject
:
:
unforgeableReject
(
cx
exn
)
)
;
if
(
!
closedPromise
)
{
return
false
;
}
AutoRealm
ar
(
cx
unwrappedReader
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
closedPromise
)
)
{
return
false
;
}
unwrappedReader
-
>
setClosedPromise
(
closedPromise
)
;
}
unwrappedStream
-
>
clearReader
(
)
;
unwrappedReader
-
>
clearStream
(
)
;
return
true
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamControllerPullSteps
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamDefaultReaderRead
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultReader
*
>
unwrappedReader
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
)
;
if
(
!
UnwrapStreamFromReader
(
cx
unwrappedReader
&
unwrappedStream
)
)
{
return
nullptr
;
}
unwrappedStream
-
>
setDisturbed
(
)
;
if
(
unwrappedStream
-
>
closed
(
)
)
{
RootedObject
iterResult
(
cx
CreateIterResultObject
(
cx
UndefinedHandleValue
true
)
)
;
if
(
!
iterResult
)
{
return
nullptr
;
}
RootedValue
iterResultVal
(
cx
ObjectValue
(
*
iterResult
)
)
;
return
PromiseObject
:
:
unforgeableResolve
(
cx
iterResultVal
)
;
}
if
(
unwrappedStream
-
>
errored
(
)
)
{
RootedValue
storedError
(
cx
unwrappedStream
-
>
storedError
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
storedError
)
)
{
return
nullptr
;
}
return
PromiseObject
:
:
unforgeableReject
(
cx
storedError
)
;
}
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
Rooted
<
ReadableStreamController
*
>
unwrappedController
(
cx
unwrappedStream
-
>
controller
(
)
)
;
return
ReadableStreamControllerPullSteps
(
cx
unwrappedController
)
;
}
inline
static
MOZ_MUST_USE
bool
ReadableStreamControllerCallPullIfNeeded
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
;
static
bool
ControllerStartHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamController
*
>
controller
(
cx
)
;
controller
=
TargetFromHandler
<
ReadableStreamController
>
(
args
.
callee
(
)
)
;
controller
-
>
setStarted
(
)
;
MOZ_ASSERT
(
!
controller
-
>
pulling
(
)
)
;
MOZ_ASSERT
(
!
controller
-
>
pullAgain
(
)
)
;
if
(
!
ReadableStreamControllerCallPullIfNeeded
(
cx
controller
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamControllerError
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
HandleValue
e
)
;
static
bool
ControllerStartFailedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamController
*
>
controller
(
cx
TargetFromHandler
<
ReadableStreamController
>
(
args
.
callee
(
)
)
)
;
if
(
controller
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
Rooted
<
ReadableStreamDefaultController
*
>
defaultController
(
cx
&
controller
-
>
as
<
ReadableStreamDefaultController
>
(
)
)
;
return
ReadableStreamDefaultControllerErrorIfNeeded
(
cx
defaultController
args
.
get
(
0
)
)
;
}
if
(
controller
-
>
stream
(
)
-
>
readable
(
)
)
{
if
(
!
ReadableStreamControllerError
(
cx
controller
args
.
get
(
0
)
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ValidateAndNormalizeHighWaterMark
(
JSContext
*
cx
HandleValue
highWaterMarkVal
double
*
highWaterMark
)
;
static
MOZ_MUST_USE
bool
ValidateAndNormalizeQueuingStrategy
(
JSContext
*
cx
HandleValue
size
HandleValue
highWaterMarkVal
double
*
highWaterMark
)
;
static
MOZ_MUST_USE
ReadableStreamDefaultController
*
CreateReadableStreamDefaultController
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
HandleValue
underlyingSource
HandleValue
size
HandleValue
highWaterMarkVal
)
{
cx
-
>
check
(
stream
underlyingSource
size
highWaterMarkVal
)
;
Rooted
<
ReadableStreamDefaultController
*
>
controller
(
cx
NewBuiltinClassInstance
<
ReadableStreamDefaultController
>
(
cx
)
)
;
if
(
!
controller
)
{
return
nullptr
;
}
controller
-
>
setStream
(
stream
)
;
controller
-
>
setUnderlyingSource
(
underlyingSource
)
;
if
(
!
ResetQueue
(
cx
controller
)
)
{
return
nullptr
;
}
controller
-
>
setFlags
(
0
)
;
double
highWaterMark
;
if
(
!
ValidateAndNormalizeQueuingStrategy
(
cx
size
highWaterMarkVal
&
highWaterMark
)
)
{
return
nullptr
;
}
controller
-
>
setStrategySize
(
size
)
;
controller
-
>
setStrategyHWM
(
highWaterMark
)
;
RootedValue
startResult
(
cx
)
;
RootedValue
controllerVal
(
cx
ObjectValue
(
*
controller
)
)
;
if
(
!
InvokeOrNoop
(
cx
underlyingSource
cx
-
>
names
(
)
.
start
controllerVal
&
startResult
)
)
{
return
nullptr
;
}
RootedObject
startPromise
(
cx
PromiseObject
:
:
unforgeableResolve
(
cx
startResult
)
)
;
if
(
!
startPromise
)
{
return
nullptr
;
}
RootedObject
onStartFulfilled
(
cx
NewHandler
(
cx
ControllerStartHandler
controller
)
)
;
if
(
!
onStartFulfilled
)
{
return
nullptr
;
}
RootedObject
onStartRejected
(
cx
NewHandler
(
cx
ControllerStartFailedHandler
controller
)
)
;
if
(
!
onStartRejected
)
{
return
nullptr
;
}
if
(
!
JS
:
:
AddPromiseReactions
(
cx
startPromise
onStartFulfilled
onStartRejected
)
)
{
return
nullptr
;
}
return
controller
;
}
bool
ReadableStreamDefaultController
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BOGUS_CONSTRUCTOR
"
ReadableStreamDefaultController
"
)
;
return
false
;
}
static
MOZ_MUST_USE
double
ReadableStreamControllerGetDesiredSizeUnchecked
(
ReadableStreamController
*
controller
)
;
static
bool
ReadableStreamDefaultController_desiredSize
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamController
*
>
unwrappedController
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultController
"
"
get
desiredSize
"
&
unwrappedController
)
)
{
return
false
;
}
ReadableStream
*
unwrappedStream
=
unwrappedController
-
>
stream
(
)
;
if
(
unwrappedStream
-
>
errored
(
)
)
{
args
.
rval
(
)
.
setNull
(
)
;
return
true
;
}
if
(
unwrappedStream
-
>
closed
(
)
)
{
args
.
rval
(
)
.
setInt32
(
0
)
;
return
true
;
}
args
.
rval
(
)
.
setNumber
(
ReadableStreamControllerGetDesiredSizeUnchecked
(
unwrappedController
)
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerClose
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
bool
VerifyControllerStateForClosing
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
{
if
(
unwrappedController
-
>
closeRequested
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_CLOSED
"
close
"
)
;
return
false
;
}
ReadableStream
*
unwrappedStream
=
unwrappedController
-
>
stream
(
)
;
if
(
!
unwrappedStream
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
close
"
)
;
return
false
;
}
return
true
;
}
static
bool
ReadableStreamDefaultController_close
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultController
*
>
unwrappedController
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultController
"
"
close
"
&
unwrappedController
)
)
{
return
false
;
}
if
(
!
VerifyControllerStateForClosing
(
cx
unwrappedController
)
)
{
return
false
;
}
if
(
!
ReadableStreamDefaultControllerClose
(
cx
unwrappedController
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
bool
ReadableStreamDefaultController_enqueue
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultController
*
>
unwrappedController
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultController
"
"
enqueue
"
&
unwrappedController
)
)
{
return
false
;
}
if
(
unwrappedController
-
>
closeRequested
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_CLOSED
"
enqueue
"
)
;
return
false
;
}
if
(
!
unwrappedController
-
>
stream
(
)
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
enqueue
"
)
;
return
false
;
}
if
(
!
ReadableStreamDefaultControllerEnqueue
(
cx
unwrappedController
args
.
get
(
0
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
bool
ReadableStreamDefaultController_error
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ReadableStreamDefaultController
*
>
unwrappedController
(
cx
)
;
if
(
!
UnwrapThisForNonGenericMethod
(
cx
args
.
thisv
(
)
"
ReadableStreamDefaultController
"
"
enqueue
"
&
unwrappedController
)
)
{
return
false
;
}
if
(
!
unwrappedController
-
>
stream
(
)
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
error
"
)
;
return
false
;
}
if
(
!
ReadableStreamControllerError
(
cx
unwrappedController
args
.
get
(
0
)
)
)
{
return
false
;
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
const
JSPropertySpec
ReadableStreamDefaultController_properties
[
]
=
{
JS_PSG
(
"
desiredSize
"
ReadableStreamDefaultController_desiredSize
0
)
JS_PS_END
}
;
static
const
JSFunctionSpec
ReadableStreamDefaultController_methods
[
]
=
{
JS_FN
(
"
close
"
ReadableStreamDefaultController_close
0
0
)
JS_FN
(
"
enqueue
"
ReadableStreamDefaultController_enqueue
1
0
)
JS_FN
(
"
error
"
ReadableStreamDefaultController_error
1
0
)
JS_FS_END
}
;
const
Class
ReadableStreamController
:
:
class_
=
{
"
ReadableStreamController
"
}
;
CLASS_SPEC
(
ReadableStreamDefaultController
4
SlotCount
ClassSpec
:
:
DontDefineConstructor
0
JS_NULL_CLASS_OPS
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableStreamControllerCancelSteps
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
HandleValue
reason
)
{
AssertSameCompartment
(
cx
reason
)
;
if
(
!
unwrappedController
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
RootedNativeObject
unwrappedPendingPullIntos
(
cx
unwrappedController
-
>
as
<
ReadableByteStreamController
>
(
)
.
pendingPullIntos
(
)
)
;
if
(
unwrappedPendingPullIntos
-
>
getDenseInitializedLength
(
)
!
=
0
)
{
PullIntoDescriptor
*
unwrappedDescriptor
=
ToUnwrapped
<
PullIntoDescriptor
>
(
cx
PeekList
<
JSObject
>
(
unwrappedPendingPullIntos
)
)
;
if
(
!
unwrappedDescriptor
)
{
return
nullptr
;
}
unwrappedDescriptor
-
>
setBytesFilled
(
0
)
;
}
}
RootedValue
unwrappedUnderlyingSource
(
cx
)
;
unwrappedUnderlyingSource
=
unwrappedController
-
>
underlyingSource
(
)
;
if
(
!
ResetQueue
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
if
(
IsMaybeWrapped
<
TeeState
>
(
unwrappedUnderlyingSource
)
)
{
Rooted
<
TeeState
*
>
unwrappedteeState
(
cx
)
;
unwrappedteeState
=
&
unwrappedUnderlyingSource
.
toObject
(
)
.
unwrapAs
<
TeeState
>
(
)
;
Rooted
<
ReadableStreamDefaultController
*
>
unwrappedDefaultController
(
cx
)
;
unwrappedDefaultController
=
&
unwrappedController
-
>
as
<
ReadableStreamDefaultController
>
(
)
;
return
ReadableStreamTee_Cancel
(
cx
unwrappedteeState
unwrappedDefaultController
reason
)
;
}
if
(
unwrappedController
-
>
hasExternalSource
(
)
)
{
RootedValue
rval
(
cx
)
;
{
AutoRealm
ar
(
cx
unwrappedController
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
unwrappedController
-
>
stream
(
)
)
;
void
*
source
=
unwrappedUnderlyingSource
.
toPrivate
(
)
;
RootedValue
wrappedReason
(
cx
reason
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedReason
)
)
{
return
nullptr
;
}
cx
-
>
check
(
stream
wrappedReason
)
;
rval
=
cx
-
>
runtime
(
)
-
>
readableStreamCancelCallback
(
cx
stream
source
stream
-
>
embeddingFlags
(
)
wrappedReason
)
;
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
rval
)
)
{
return
nullptr
;
}
return
PromiseObject
:
:
unforgeableResolve
(
cx
rval
)
;
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
unwrappedUnderlyingSource
)
)
{
return
nullptr
;
}
return
PromiseInvokeOrNoop
(
cx
unwrappedUnderlyingSource
cx
-
>
names
(
)
.
cancel
reason
)
;
}
inline
static
MOZ_MUST_USE
bool
DequeueValue
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedContainer
MutableHandleValue
chunk
)
;
static
JSObject
*
ReadableStreamDefaultControllerPullSteps
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
RootedNativeObject
unwrappedQueue
(
cx
)
;
RootedValue
val
(
cx
unwrappedController
-
>
getFixedSlot
(
StreamController
:
:
Slot_Queue
)
)
;
if
(
val
.
isObject
(
)
)
{
unwrappedQueue
=
&
val
.
toObject
(
)
.
as
<
NativeObject
>
(
)
;
}
if
(
unwrappedQueue
&
&
unwrappedQueue
-
>
getDenseInitializedLength
(
)
!
=
0
)
{
RootedValue
chunk
(
cx
)
;
if
(
!
DequeueValue
(
cx
unwrappedController
&
chunk
)
)
{
return
nullptr
;
}
if
(
unwrappedController
-
>
closeRequested
(
)
&
&
unwrappedQueue
-
>
getDenseInitializedLength
(
)
=
=
0
)
{
if
(
!
ReadableStreamCloseInternal
(
cx
unwrappedStream
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
ReadableStreamControllerCallPullIfNeeded
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
}
cx
-
>
check
(
chunk
)
;
RootedObject
iterResultObj
(
cx
CreateIterResultObject
(
cx
chunk
false
)
)
;
if
(
!
iterResultObj
)
{
return
nullptr
;
}
RootedValue
iterResult
(
cx
ObjectValue
(
*
iterResultObj
)
)
;
return
PromiseObject
:
:
unforgeableResolve
(
cx
iterResult
)
;
}
RootedObject
pendingPromise
(
cx
ReadableStreamAddReadOrReadIntoRequest
(
cx
unwrappedStream
)
)
;
if
(
!
pendingPromise
)
{
return
nullptr
;
}
if
(
!
ReadableStreamControllerCallPullIfNeeded
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
return
pendingPromise
;
}
static
bool
ControllerPullHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
RootedValue
controllerVal
(
cx
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
.
getExtendedSlot
(
0
)
)
;
Rooted
<
ReadableStreamController
*
>
controller
(
cx
)
;
controller
=
ToUnwrapped
<
ReadableStreamController
>
(
cx
controllerVal
)
;
if
(
!
controller
)
{
return
false
;
}
bool
pullAgain
=
controller
-
>
pullAgain
(
)
;
controller
-
>
clearPullFlags
(
)
;
if
(
pullAgain
)
{
if
(
!
ReadableStreamControllerCallPullIfNeeded
(
cx
controller
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
bool
ControllerPullFailedHandler
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
HandleValue
e
=
args
.
get
(
0
)
;
RootedValue
controllerVal
(
cx
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
.
getExtendedSlot
(
0
)
)
;
Rooted
<
ReadableStreamController
*
>
controller
(
cx
)
;
controller
=
ToUnwrapped
<
ReadableStreamController
>
(
cx
controllerVal
)
;
if
(
!
controller
)
{
return
false
;
}
if
(
controller
-
>
stream
(
)
-
>
readable
(
)
)
{
if
(
!
ReadableStreamControllerError
(
cx
controller
e
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setUndefined
(
)
;
return
true
;
}
static
bool
ReadableStreamControllerShouldCallPull
(
ReadableStreamController
*
unwrappedController
)
;
static
MOZ_MUST_USE
double
ReadableStreamControllerGetDesiredSizeUnchecked
(
ReadableStreamController
*
unwrappedController
)
;
inline
static
MOZ_MUST_USE
bool
ReadableStreamControllerCallPullIfNeeded
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
{
bool
shouldPull
=
ReadableStreamControllerShouldCallPull
(
unwrappedController
)
;
if
(
!
shouldPull
)
{
return
true
;
}
if
(
unwrappedController
-
>
pulling
(
)
)
{
unwrappedController
-
>
setPullAgain
(
)
;
return
true
;
}
MOZ_ASSERT
(
!
unwrappedController
-
>
pullAgain
(
)
)
;
unwrappedController
-
>
setPulling
(
)
;
RootedObject
wrappedController
(
cx
unwrappedController
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedController
)
)
{
return
false
;
}
RootedValue
controllerVal
(
cx
ObjectValue
(
*
wrappedController
)
)
;
RootedValue
unwrappedUnderlyingSource
(
cx
unwrappedController
-
>
underlyingSource
(
)
)
;
RootedObject
pullPromise
(
cx
)
;
if
(
IsMaybeWrapped
<
TeeState
>
(
unwrappedUnderlyingSource
)
)
{
Rooted
<
TeeState
*
>
unwrappedTeeState
(
cx
)
;
unwrappedTeeState
=
&
UncheckedUnwrap
(
&
unwrappedUnderlyingSource
.
toObject
(
)
)
-
>
as
<
TeeState
>
(
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
unwrappedController
-
>
stream
(
)
)
;
pullPromise
=
ReadableStreamTee_Pull
(
cx
unwrappedTeeState
)
;
}
else
if
(
unwrappedController
-
>
hasExternalSource
(
)
)
{
{
AutoRealm
ar
(
cx
unwrappedController
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
unwrappedController
-
>
stream
(
)
)
;
void
*
source
=
unwrappedUnderlyingSource
.
toPrivate
(
)
;
double
desiredSize
=
ReadableStreamControllerGetDesiredSizeUnchecked
(
unwrappedController
)
;
cx
-
>
runtime
(
)
-
>
readableStreamDataRequestCallback
(
cx
stream
source
stream
-
>
embeddingFlags
(
)
desiredSize
)
;
}
pullPromise
=
PromiseObject
:
:
unforgeableResolve
(
cx
UndefinedHandleValue
)
;
}
else
{
RootedValue
underlyingSource
(
cx
unwrappedUnderlyingSource
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
underlyingSource
)
)
{
return
false
;
}
pullPromise
=
PromiseInvokeOrNoop
(
cx
underlyingSource
cx
-
>
names
(
)
.
pull
controllerVal
)
;
}
if
(
!
pullPromise
)
{
return
false
;
}
RootedObject
onPullFulfilled
(
cx
NewHandler
(
cx
ControllerPullHandler
wrappedController
)
)
;
if
(
!
onPullFulfilled
)
{
return
false
;
}
RootedObject
onPullRejected
(
cx
NewHandler
(
cx
ControllerPullFailedHandler
wrappedController
)
)
;
if
(
!
onPullRejected
)
{
return
false
;
}
return
JS
:
:
AddPromiseReactions
(
cx
pullPromise
onPullFulfilled
onPullRejected
)
;
}
static
bool
ReadableStreamControllerShouldCallPull
(
ReadableStreamController
*
unwrappedController
)
{
ReadableStream
*
unwrappedStream
=
unwrappedController
-
>
stream
(
)
;
if
(
!
unwrappedStream
-
>
readable
(
)
)
{
return
false
;
}
if
(
unwrappedController
-
>
closeRequested
(
)
)
{
return
false
;
}
if
(
!
unwrappedController
-
>
started
(
)
)
{
return
false
;
}
if
(
unwrappedStream
-
>
locked
(
)
&
&
ReadableStreamGetNumReadRequests
(
unwrappedStream
)
>
0
)
{
return
true
;
}
double
desiredSize
=
ReadableStreamControllerGetDesiredSizeUnchecked
(
unwrappedController
)
;
return
desiredSize
>
0
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerClose
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
!
unwrappedController
-
>
closeRequested
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
unwrappedController
-
>
setCloseRequested
(
)
;
RootedNativeObject
unwrappedQueue
(
cx
unwrappedController
-
>
queue
(
)
)
;
if
(
unwrappedQueue
-
>
getDenseInitializedLength
(
)
=
=
0
)
{
return
ReadableStreamCloseInternal
(
cx
unwrappedStream
)
;
}
return
true
;
}
static
MOZ_MUST_USE
bool
EnqueueValueWithSize
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedContainer
HandleValue
value
HandleValue
sizeVal
)
;
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerEnqueue
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
HandleValue
chunk
)
{
AssertSameCompartment
(
cx
chunk
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
!
unwrappedController
-
>
closeRequested
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
if
(
unwrappedStream
-
>
locked
(
)
&
&
ReadableStreamGetNumReadRequests
(
unwrappedStream
)
>
0
)
{
if
(
!
ReadableStreamFulfillReadOrReadIntoRequest
(
cx
unwrappedStream
chunk
false
)
)
{
return
false
;
}
}
else
{
RootedValue
chunkSize
(
cx
NumberValue
(
1
)
)
;
bool
success
=
true
;
RootedValue
strategySize
(
cx
unwrappedController
-
>
strategySize
(
)
)
;
if
(
!
strategySize
.
isUndefined
(
)
)
{
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
strategySize
)
)
{
return
false
;
}
success
=
Call
(
cx
strategySize
UndefinedHandleValue
chunk
&
chunkSize
)
;
}
if
(
success
)
{
success
=
EnqueueValueWithSize
(
cx
unwrappedController
chunk
chunkSize
)
;
}
if
(
!
success
)
{
RootedValue
exn
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
exn
)
)
{
return
false
;
}
if
(
!
ReadableStreamDefaultControllerErrorIfNeeded
(
cx
unwrappedController
exn
)
)
{
return
false
;
}
cx
-
>
setPendingException
(
exn
)
;
return
false
;
}
}
return
ReadableStreamControllerCallPullIfNeeded
(
cx
unwrappedController
)
;
}
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerClearPendingPullIntos
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
bool
ReadableStreamControllerError
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
HandleValue
e
)
{
MOZ_ASSERT
(
!
cx
-
>
isExceptionPending
(
)
)
;
AssertSameCompartment
(
cx
e
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
if
(
unwrappedController
-
>
is
<
ReadableByteStreamController
>
(
)
)
{
Rooted
<
ReadableByteStreamController
*
>
unwrappedByteStreamController
(
cx
&
unwrappedController
-
>
as
<
ReadableByteStreamController
>
(
)
)
;
if
(
!
ReadableByteStreamControllerClearPendingPullIntos
(
cx
unwrappedByteStreamController
)
)
{
return
false
;
}
}
if
(
!
ResetQueue
(
cx
unwrappedController
)
)
{
return
false
;
}
return
ReadableStreamErrorInternal
(
cx
unwrappedStream
e
)
;
}
static
MOZ_MUST_USE
bool
ReadableStreamDefaultControllerErrorIfNeeded
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultController
*
>
unwrappedController
HandleValue
e
)
{
MOZ_ASSERT
(
!
cx
-
>
isExceptionPending
(
)
)
;
if
(
unwrappedController
-
>
stream
(
)
-
>
readable
(
)
)
{
return
ReadableStreamControllerError
(
cx
unwrappedController
e
)
;
}
return
true
;
}
static
MOZ_MUST_USE
double
ReadableStreamControllerGetDesiredSizeUnchecked
(
ReadableStreamController
*
controller
)
{
#
if
DEBUG
ReadableStream
*
stream
=
controller
-
>
stream
(
)
;
MOZ_ASSERT
(
!
(
stream
-
>
errored
(
)
|
|
stream
-
>
closed
(
)
)
)
;
#
endif
return
controller
-
>
strategyHWM
(
)
-
controller
-
>
queueTotalSize
(
)
;
}
#
if
0
static
MOZ_MUST_USE
ReadableByteStreamController
*
CreateReadableByteStreamController
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
HandleValue
underlyingByteSource
HandleValue
highWaterMarkVal
)
{
cx
-
>
check
(
stream
underlyingByteSource
highWaterMarkVal
)
;
Rooted
<
ReadableByteStreamController
*
>
controller
(
cx
NewBuiltinClassInstance
<
ReadableByteStreamController
>
(
cx
)
)
;
if
(
!
controller
)
{
return
nullptr
;
}
controller
-
>
setStream
(
stream
)
;
controller
-
>
setUnderlyingSource
(
underlyingByteSource
)
;
controller
-
>
setFlags
(
0
)
;
if
(
!
ReadableByteStreamControllerClearPendingPullIntos
(
cx
controller
)
)
{
return
nullptr
;
}
if
(
!
ResetQueue
(
cx
controller
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
controller
-
>
flags
(
)
=
=
0
)
;
double
highWaterMark
;
if
(
!
ValidateAndNormalizeHighWaterMark
(
cx
highWaterMarkVal
&
highWaterMark
)
)
{
return
nullptr
;
}
controller
-
>
setStrategyHWM
(
highWaterMark
)
;
RootedValue
autoAllocateChunkSize
(
cx
)
;
if
(
!
GetProperty
(
cx
underlyingByteSource
cx
-
>
names
(
)
.
autoAllocateChunkSize
&
autoAllocateChunkSize
)
)
{
return
nullptr
;
}
if
(
!
autoAllocateChunkSize
.
isUndefined
(
)
)
{
if
(
!
IsInteger
(
autoAllocateChunkSize
)
|
|
autoAllocateChunkSize
.
toNumber
(
)
<
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLEBYTESTREAMCONTROLLER_BAD_CHUNKSIZE
)
;
return
nullptr
;
}
}
controller
-
>
setAutoAllocateChunkSize
(
autoAllocateChunkSize
)
;
if
(
!
SetNewList
(
cx
controller
ReadableByteStreamController
:
:
Slot_PendingPullIntos
)
)
{
return
nullptr
;
}
RootedValue
startResult
(
cx
)
;
RootedValue
controllerVal
(
cx
ObjectValue
(
*
controller
)
)
;
if
(
!
InvokeOrNoop
(
cx
underlyingByteSource
cx
-
>
names
(
)
.
start
controllerVal
&
startResult
)
)
{
return
nullptr
;
}
RootedObject
startPromise
(
cx
PromiseObject
:
:
unforgeableResolve
(
cx
startResult
)
)
;
if
(
!
startPromise
)
{
return
nullptr
;
}
RootedObject
onStartFulfilled
(
cx
NewHandler
(
cx
ControllerStartHandler
controller
)
)
;
if
(
!
onStartFulfilled
)
{
return
nullptr
;
}
RootedObject
onStartRejected
(
cx
NewHandler
(
cx
ControllerStartFailedHandler
controller
)
)
;
if
(
!
onStartRejected
)
{
return
nullptr
;
}
if
(
!
JS
:
:
AddPromiseReactions
(
cx
startPromise
onStartFulfilled
onStartRejected
)
)
{
return
nullptr
;
}
return
controller
;
}
#
endif
bool
ReadableByteStreamController
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_BOGUS_CONSTRUCTOR
"
ReadableByteStreamController
"
)
;
return
false
;
}
static
MOZ_MUST_USE
ReadableByteStreamController
*
CreateExternalReadableByteStreamController
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
void
*
underlyingSource
)
{
Rooted
<
ReadableByteStreamController
*
>
controller
(
cx
NewBuiltinClassInstance
<
ReadableByteStreamController
>
(
cx
)
)
;
if
(
!
controller
)
{
return
nullptr
;
}
controller
-
>
setStream
(
stream
)
;
controller
-
>
setUnderlyingSource
(
PrivateValue
(
underlyingSource
)
)
;
controller
-
>
setFlags
(
ReadableStreamController
:
:
Flag_ExternalSource
)
;
controller
-
>
setQueueTotalSize
(
0
)
;
controller
-
>
setStrategyHWM
(
0
)
;
if
(
!
SetNewList
(
cx
controller
ReadableByteStreamController
:
:
Slot_PendingPullIntos
)
)
{
return
nullptr
;
}
RootedObject
startPromise
(
cx
PromiseObject
:
:
unforgeableResolve
(
cx
UndefinedHandleValue
)
)
;
if
(
!
startPromise
)
{
return
nullptr
;
}
RootedObject
onStartFulfilled
(
cx
NewHandler
(
cx
ControllerStartHandler
controller
)
)
;
if
(
!
onStartFulfilled
)
{
return
nullptr
;
}
RootedObject
onStartRejected
(
cx
NewHandler
(
cx
ControllerStartFailedHandler
controller
)
)
;
if
(
!
onStartRejected
)
{
return
nullptr
;
}
if
(
!
JS
:
:
AddPromiseReactions
(
cx
startPromise
onStartFulfilled
onStartRejected
)
)
{
return
nullptr
;
}
return
controller
;
}
static
const
JSPropertySpec
ReadableByteStreamController_properties
[
]
=
{
JS_PS_END
}
;
static
const
JSFunctionSpec
ReadableByteStreamController_methods
[
]
=
{
JS_FS_END
}
;
static
void
ReadableByteStreamControllerFinalize
(
FreeOp
*
fop
JSObject
*
obj
)
{
ReadableByteStreamController
&
controller
=
obj
-
>
as
<
ReadableByteStreamController
>
(
)
;
if
(
controller
.
getFixedSlot
(
ReadableStreamController
:
:
Slot_Flags
)
.
isUndefined
(
)
)
{
return
;
}
if
(
!
controller
.
hasExternalSource
(
)
)
{
return
;
}
uint8_t
embeddingFlags
=
controller
.
flags
(
)
>
>
ReadableStreamController
:
:
EmbeddingFlagsOffset
;
void
*
underlyingSource
=
controller
.
underlyingSource
(
)
.
toPrivate
(
)
;
obj
-
>
runtimeFromAnyThread
(
)
-
>
readableStreamFinalizeCallback
(
underlyingSource
embeddingFlags
)
;
}
static
const
ClassOps
ReadableByteStreamControllerClassOps
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
ReadableByteStreamControllerFinalize
nullptr
nullptr
nullptr
nullptr
}
;
CLASS_SPEC
(
ReadableByteStreamController
3
SlotCount
ClassSpec
:
:
DontDefineConstructor
JSCLASS_BACKGROUND_FINALIZE
&
ReadableByteStreamControllerClassOps
)
;
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerHandleQueueDrain
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
JSObject
*
ReadableByteStreamControllerPullSteps
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
#
ifdef
DEBUG
bool
result
;
if
(
!
ReadableStreamHasDefaultReader
(
cx
unwrappedStream
&
result
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
result
)
;
#
endif
RootedValue
val
(
cx
)
;
double
queueTotalSize
=
unwrappedController
-
>
queueTotalSize
(
)
;
if
(
queueTotalSize
>
0
)
{
MOZ_ASSERT
(
ReadableStreamGetNumReadRequests
(
unwrappedStream
)
=
=
0
)
;
RootedObject
view
(
cx
)
;
if
(
unwrappedStream
-
>
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
)
{
void
*
underlyingSource
=
unwrappedController
-
>
underlyingSource
(
)
.
toPrivate
(
)
;
view
=
JS_NewUint8Array
(
cx
queueTotalSize
)
;
if
(
!
view
)
{
return
nullptr
;
}
size_t
bytesWritten
;
{
AutoRealm
ar
(
cx
unwrappedStream
)
;
JS
:
:
AutoSuppressGCAnalysis
suppressGC
(
cx
)
;
JS
:
:
AutoCheckCannotGC
noGC
;
bool
dummy
;
void
*
buffer
=
JS_GetArrayBufferViewData
(
view
&
dummy
noGC
)
;
auto
cb
=
cx
-
>
runtime
(
)
-
>
readableStreamWriteIntoReadRequestCallback
;
MOZ_ASSERT
(
cb
)
;
cb
(
cx
unwrappedStream
underlyingSource
unwrappedStream
-
>
embeddingFlags
(
)
buffer
queueTotalSize
&
bytesWritten
)
;
}
queueTotalSize
=
queueTotalSize
-
bytesWritten
;
}
else
{
RootedNativeObject
unwrappedQueue
(
cx
unwrappedController
-
>
queue
(
)
)
;
Rooted
<
ByteStreamChunk
*
>
unwrappedEntry
(
cx
ToUnwrapped
<
ByteStreamChunk
>
(
cx
ShiftFromList
<
JSObject
>
(
cx
unwrappedQueue
)
)
)
;
if
(
!
unwrappedEntry
)
{
return
nullptr
;
}
queueTotalSize
=
queueTotalSize
-
unwrappedEntry
-
>
byteLength
(
)
;
RootedObject
buffer
(
cx
unwrappedEntry
-
>
buffer
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
buffer
)
)
{
return
nullptr
;
}
uint32_t
byteOffset
=
unwrappedEntry
-
>
byteOffset
(
)
;
view
=
JS_NewUint8ArrayWithBuffer
(
cx
buffer
byteOffset
unwrappedEntry
-
>
byteLength
(
)
)
;
if
(
!
view
)
{
return
nullptr
;
}
}
unwrappedController
-
>
setQueueTotalSize
(
queueTotalSize
)
;
if
(
!
ReadableByteStreamControllerHandleQueueDrain
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
val
.
setObject
(
*
view
)
;
RootedObject
iterResult
(
cx
CreateIterResultObject
(
cx
val
false
)
)
;
if
(
!
iterResult
)
{
return
nullptr
;
}
val
.
setObject
(
*
iterResult
)
;
return
PromiseObject
:
:
unforgeableResolve
(
cx
val
)
;
}
val
=
unwrappedController
-
>
autoAllocateChunkSize
(
)
;
if
(
!
val
.
isUndefined
(
)
)
{
double
autoAllocateChunkSize
=
val
.
toNumber
(
)
;
JSObject
*
bufferObj
=
JS_NewArrayBuffer
(
cx
autoAllocateChunkSize
)
;
if
(
!
bufferObj
)
{
return
PromiseRejectedWithPendingError
(
cx
)
;
}
RootedArrayBufferObject
buffer
(
cx
&
bufferObj
-
>
as
<
ArrayBufferObject
>
(
)
)
;
RootedObject
pullIntoDescriptor
(
cx
PullIntoDescriptor
:
:
create
(
cx
buffer
0
autoAllocateChunkSize
0
1
nullptr
ReaderType_Default
)
)
;
if
(
!
pullIntoDescriptor
)
{
return
PromiseRejectedWithPendingError
(
cx
)
;
}
if
(
!
AppendToListAtSlot
(
cx
unwrappedController
ReadableByteStreamController
:
:
Slot_PendingPullIntos
pullIntoDescriptor
)
)
{
return
nullptr
;
}
}
RootedObject
promise
(
cx
ReadableStreamAddReadOrReadIntoRequest
(
cx
unwrappedStream
)
)
;
if
(
!
promise
)
{
return
nullptr
;
}
if
(
!
ReadableStreamControllerCallPullIfNeeded
(
cx
unwrappedController
)
)
{
return
nullptr
;
}
return
promise
;
}
static
MOZ_MUST_USE
JSObject
*
ReadableStreamControllerPullSteps
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
{
if
(
unwrappedController
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
Rooted
<
ReadableStreamDefaultController
*
>
unwrappedDefaultController
(
cx
&
unwrappedController
-
>
as
<
ReadableStreamDefaultController
>
(
)
)
;
return
ReadableStreamDefaultControllerPullSteps
(
cx
unwrappedDefaultController
)
;
}
Rooted
<
ReadableByteStreamController
*
>
unwrappedByteController
(
cx
&
unwrappedController
-
>
as
<
ReadableByteStreamController
>
(
)
)
;
return
ReadableByteStreamControllerPullSteps
(
cx
unwrappedByteController
)
;
}
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerInvalidateBYOBRequest
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
;
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerClearPendingPullIntos
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
{
if
(
!
ReadableByteStreamControllerInvalidateBYOBRequest
(
cx
unwrappedController
)
)
{
return
false
;
}
return
SetNewList
(
cx
unwrappedController
ReadableByteStreamController
:
:
Slot_PendingPullIntos
)
;
}
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerClose
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
{
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
!
unwrappedController
-
>
closeRequested
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
if
(
unwrappedController
-
>
queueTotalSize
(
)
>
0
)
{
unwrappedController
-
>
setCloseRequested
(
)
;
return
true
;
}
RootedNativeObject
unwrappedPendingPullIntos
(
cx
unwrappedController
-
>
pendingPullIntos
(
)
)
;
if
(
unwrappedPendingPullIntos
-
>
getDenseInitializedLength
(
)
!
=
0
)
{
Rooted
<
PullIntoDescriptor
*
>
unwrappedFirstPendingPullInto
(
cx
ToUnwrapped
<
PullIntoDescriptor
>
(
cx
PeekList
<
JSObject
>
(
unwrappedPendingPullIntos
)
)
)
;
if
(
!
unwrappedFirstPendingPullInto
)
{
return
false
;
}
if
(
unwrappedFirstPendingPullInto
-
>
bytesFilled
(
)
>
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLEBYTESTREAMCONTROLLER_CLOSE_PENDING_PULL
)
;
RootedValue
e
(
cx
)
;
if
(
!
cx
-
>
isExceptionPending
(
)
|
|
!
GetAndClearException
(
cx
&
e
)
)
{
return
false
;
}
if
(
!
ReadableStreamControllerError
(
cx
unwrappedController
e
)
)
{
return
false
;
}
cx
-
>
setPendingException
(
e
)
;
return
false
;
}
}
return
ReadableStreamCloseInternal
(
cx
unwrappedStream
)
;
}
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerHandleQueueDrain
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedController
)
{
MOZ_ASSERT
(
unwrappedController
-
>
is
<
ReadableByteStreamController
>
(
)
)
;
Rooted
<
ReadableStream
*
>
unwrappedStream
(
cx
unwrappedController
-
>
stream
(
)
)
;
MOZ_ASSERT
(
unwrappedStream
-
>
readable
(
)
)
;
if
(
unwrappedController
-
>
queueTotalSize
(
)
=
=
0
&
&
unwrappedController
-
>
closeRequested
(
)
)
{
return
ReadableStreamCloseInternal
(
cx
unwrappedStream
)
;
}
return
ReadableStreamControllerCallPullIfNeeded
(
cx
unwrappedController
)
;
}
enum
BYOBRequestSlots
{
BYOBRequestSlot_Controller
BYOBRequestSlot_View
BYOBRequestSlotCount
}
;
static
MOZ_MUST_USE
bool
ReadableByteStreamControllerInvalidateBYOBRequest
(
JSContext
*
cx
Handle
<
ReadableByteStreamController
*
>
unwrappedController
)
{
RootedValue
unwrappedBYOBRequestVal
(
cx
unwrappedController
-
>
byobRequest
(
)
)
;
if
(
unwrappedBYOBRequestVal
.
isUndefined
(
)
)
{
return
true
;
}
RootedNativeObject
unwrappedBYOBRequest
(
cx
ToUnwrapped
<
NativeObject
>
(
cx
unwrappedBYOBRequestVal
)
)
;
if
(
!
unwrappedBYOBRequest
)
{
return
false
;
}
unwrappedBYOBRequest
-
>
setFixedSlot
(
BYOBRequestSlot_Controller
UndefinedValue
(
)
)
;
unwrappedBYOBRequest
-
>
setFixedSlot
(
BYOBRequestSlot_View
UndefinedValue
(
)
)
;
unwrappedController
-
>
clearBYOBRequest
(
)
;
return
true
;
}
bool
js
:
:
ByteLengthQueuingStrategy
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
RootedObject
strategy
(
cx
NewBuiltinClassInstance
<
ByteLengthQueuingStrategy
>
(
cx
)
)
;
if
(
!
strategy
)
{
return
false
;
}
RootedObject
argObj
(
cx
ToObject
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
argObj
)
{
return
false
;
}
RootedValue
highWaterMark
(
cx
)
;
if
(
!
GetProperty
(
cx
argObj
argObj
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMark
)
)
{
return
false
;
}
if
(
!
SetProperty
(
cx
strategy
cx
-
>
names
(
)
.
highWaterMark
highWaterMark
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
strategy
)
;
return
true
;
}
bool
ByteLengthQueuingStrategy_size
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
GetProperty
(
cx
args
.
get
(
0
)
cx
-
>
names
(
)
.
byteLength
args
.
rval
(
)
)
;
}
static
const
JSPropertySpec
ByteLengthQueuingStrategy_properties
[
]
=
{
JS_PS_END
}
;
static
const
JSFunctionSpec
ByteLengthQueuingStrategy_methods
[
]
=
{
JS_FN
(
"
size
"
ByteLengthQueuingStrategy_size
1
0
)
JS_FS_END
}
;
CLASS_SPEC
(
ByteLengthQueuingStrategy
1
0
0
0
JS_NULL_CLASS_OPS
)
;
bool
js
:
:
CountQueuingStrategy
:
:
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
CountQueuingStrategy
*
>
strategy
(
cx
NewBuiltinClassInstance
<
CountQueuingStrategy
>
(
cx
)
)
;
if
(
!
strategy
)
{
return
false
;
}
RootedObject
argObj
(
cx
ToObject
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
argObj
)
{
return
false
;
}
RootedValue
highWaterMark
(
cx
)
;
if
(
!
GetProperty
(
cx
argObj
argObj
cx
-
>
names
(
)
.
highWaterMark
&
highWaterMark
)
)
{
return
false
;
}
if
(
!
SetProperty
(
cx
strategy
cx
-
>
names
(
)
.
highWaterMark
highWaterMark
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
strategy
)
;
return
true
;
}
bool
CountQueuingStrategy_size
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
args
.
rval
(
)
.
setInt32
(
1
)
;
return
true
;
}
static
const
JSPropertySpec
CountQueuingStrategy_properties
[
]
=
{
JS_PS_END
}
;
static
const
JSFunctionSpec
CountQueuingStrategy_methods
[
]
=
{
JS_FN
(
"
size
"
CountQueuingStrategy_size
0
0
)
JS_FS_END
}
;
CLASS_SPEC
(
CountQueuingStrategy
1
0
0
0
JS_NULL_CLASS_OPS
)
;
#
undef
CLASS_SPEC
inline
static
MOZ_MUST_USE
bool
DequeueValue
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
container
MutableHandleValue
chunk
)
{
RootedNativeObject
queue
(
cx
container
-
>
queue
(
)
)
;
MOZ_ASSERT
(
queue
-
>
getDenseInitializedLength
(
)
>
0
)
;
Rooted
<
QueueEntry
*
>
pair
(
cx
ShiftFromList
<
QueueEntry
>
(
cx
queue
)
)
;
MOZ_ASSERT
(
pair
)
;
double
totalSize
=
container
-
>
queueTotalSize
(
)
;
totalSize
-
=
pair
-
>
size
(
)
;
if
(
totalSize
<
0
)
{
totalSize
=
0
;
}
container
-
>
setQueueTotalSize
(
totalSize
)
;
RootedValue
val
(
cx
pair
-
>
value
(
)
)
;
if
(
container
-
>
compartment
(
)
!
=
cx
-
>
compartment
(
)
&
&
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
val
)
)
{
return
false
;
}
chunk
.
set
(
val
)
;
return
true
;
}
static
MOZ_MUST_USE
bool
EnqueueValueWithSize
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
container
HandleValue
value
HandleValue
sizeVal
)
{
double
size
;
if
(
!
ToNumber
(
cx
sizeVal
&
size
)
)
{
return
false
;
}
if
(
size
<
0
|
|
mozilla
:
:
IsNaN
(
size
)
|
|
mozilla
:
:
IsInfinite
(
size
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NUMBER_MUST_BE_FINITE_NON_NEGATIVE
"
size
"
)
;
return
false
;
}
RootedNativeObject
queue
(
cx
container
-
>
queue
(
)
)
;
RootedValue
wrappedVal
(
cx
value
)
;
{
AutoRealm
ar
(
cx
container
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
wrappedVal
)
)
{
return
false
;
}
QueueEntry
*
entry
=
QueueEntry
:
:
create
(
cx
wrappedVal
size
)
;
if
(
!
entry
)
{
return
false
;
}
RootedValue
val
(
cx
ObjectValue
(
*
entry
)
)
;
if
(
!
AppendToList
(
cx
queue
val
)
)
{
return
false
;
}
}
container
-
>
setQueueTotalSize
(
container
-
>
queueTotalSize
(
)
+
size
)
;
return
true
;
}
inline
static
MOZ_MUST_USE
bool
ResetQueue
(
JSContext
*
cx
Handle
<
ReadableStreamController
*
>
unwrappedContainer
)
{
if
(
!
SetNewList
(
cx
unwrappedContainer
StreamController
:
:
Slot_Queue
)
)
{
return
false
;
}
unwrappedContainer
-
>
setQueueTotalSize
(
0
)
;
return
true
;
}
inline
static
MOZ_MUST_USE
bool
AppendToListAtSlot
(
JSContext
*
cx
HandleNativeObject
unwrappedContainer
uint32_t
slot
HandleObject
obj
)
{
RootedNativeObject
list
(
cx
&
unwrappedContainer
-
>
getFixedSlot
(
slot
)
.
toObject
(
)
.
as
<
NativeObject
>
(
)
)
;
AutoRealm
ar
(
cx
list
)
;
RootedValue
val
(
cx
ObjectValue
(
*
obj
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
val
)
)
{
return
false
;
}
return
AppendToList
(
cx
list
val
)
;
}
inline
static
MOZ_MUST_USE
bool
InvokeOrNoop
(
JSContext
*
cx
HandleValue
O
HandlePropertyName
P
HandleValue
arg
MutableHandleValue
rval
)
{
RootedValue
method
(
cx
)
;
if
(
!
GetProperty
(
cx
O
P
&
method
)
)
{
return
false
;
}
if
(
method
.
isUndefined
(
)
)
{
return
true
;
}
return
Call
(
cx
method
O
arg
rval
)
;
}
static
MOZ_MUST_USE
JSObject
*
PromiseInvokeOrNoop
(
JSContext
*
cx
HandleValue
O
HandlePropertyName
P
HandleValue
arg
)
{
MOZ_ASSERT
(
!
O
.
isUndefined
(
)
)
;
RootedValue
returnValue
(
cx
)
;
if
(
!
InvokeOrNoop
(
cx
O
P
arg
&
returnValue
)
)
{
return
PromiseRejectedWithPendingError
(
cx
)
;
}
return
PromiseObject
:
:
unforgeableResolve
(
cx
returnValue
)
;
}
static
MOZ_MUST_USE
bool
ValidateAndNormalizeHighWaterMark
(
JSContext
*
cx
HandleValue
highWaterMarkVal
double
*
highWaterMark
)
{
if
(
!
ToNumber
(
cx
highWaterMarkVal
highWaterMark
)
)
{
return
false
;
}
if
(
mozilla
:
:
IsNaN
(
*
highWaterMark
)
|
|
*
highWaterMark
<
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_STREAM_INVALID_HIGHWATERMARK
)
;
return
false
;
}
return
true
;
}
static
MOZ_MUST_USE
bool
ValidateAndNormalizeQueuingStrategy
(
JSContext
*
cx
HandleValue
size
HandleValue
highWaterMarkVal
double
*
highWaterMark
)
{
if
(
!
size
.
isUndefined
(
)
&
&
!
IsCallable
(
size
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_FUNCTION
"
ReadableStream
argument
options
.
size
"
)
;
return
false
;
}
if
(
!
ValidateAndNormalizeHighWaterMark
(
cx
highWaterMarkVal
highWaterMark
)
)
{
return
false
;
}
return
true
;
}
JS_FRIEND_API
(
JSObject
*
)
js
:
:
UnwrapReadableStream
(
JSObject
*
obj
)
{
if
(
JSObject
*
unwrapped
=
CheckedUnwrap
(
obj
)
)
{
return
unwrapped
-
>
is
<
ReadableStream
>
(
)
?
unwrapped
:
nullptr
;
}
return
nullptr
;
}
extern
JS_PUBLIC_API
(
void
)
JS
:
:
SetReadableStreamCallbacks
(
JSContext
*
cx
JS
:
:
RequestReadableStreamDataCallback
dataRequestCallback
JS
:
:
WriteIntoReadRequestBufferCallback
writeIntoReadRequestCallback
JS
:
:
CancelReadableStreamCallback
cancelCallback
JS
:
:
ReadableStreamClosedCallback
closedCallback
JS
:
:
ReadableStreamErroredCallback
erroredCallback
JS
:
:
ReadableStreamFinalizeCallback
finalizeCallback
)
{
MOZ_ASSERT
(
dataRequestCallback
)
;
MOZ_ASSERT
(
writeIntoReadRequestCallback
)
;
MOZ_ASSERT
(
cancelCallback
)
;
MOZ_ASSERT
(
closedCallback
)
;
MOZ_ASSERT
(
erroredCallback
)
;
MOZ_ASSERT
(
finalizeCallback
)
;
JSRuntime
*
rt
=
cx
-
>
runtime
(
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamDataRequestCallback
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamWriteIntoReadRequestCallback
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamCancelCallback
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamClosedCallback
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamErroredCallback
)
;
MOZ_ASSERT
(
!
rt
-
>
readableStreamFinalizeCallback
)
;
rt
-
>
readableStreamDataRequestCallback
=
dataRequestCallback
;
rt
-
>
readableStreamWriteIntoReadRequestCallback
=
writeIntoReadRequestCallback
;
rt
-
>
readableStreamCancelCallback
=
cancelCallback
;
rt
-
>
readableStreamClosedCallback
=
closedCallback
;
rt
-
>
readableStreamErroredCallback
=
erroredCallback
;
rt
-
>
readableStreamFinalizeCallback
=
finalizeCallback
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
HasReadableStreamCallbacks
(
JSContext
*
cx
)
{
return
cx
-
>
runtime
(
)
-
>
readableStreamDataRequestCallback
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
NewReadableDefaultStreamObject
(
JSContext
*
cx
JS
:
:
HandleObject
underlyingSource
JS
:
:
HandleFunction
size
double
highWaterMark
JS
:
:
HandleObject
proto
)
{
MOZ_ASSERT
(
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
RootedObject
source
(
cx
underlyingSource
)
;
if
(
!
source
)
{
source
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
)
;
if
(
!
source
)
{
return
nullptr
;
}
}
RootedValue
sourceVal
(
cx
ObjectValue
(
*
source
)
)
;
RootedValue
sizeVal
(
cx
size
?
ObjectValue
(
*
size
)
:
UndefinedValue
(
)
)
;
RootedValue
highWaterMarkVal
(
cx
NumberValue
(
highWaterMark
)
)
;
return
ReadableStream
:
:
createDefaultStream
(
cx
sourceVal
sizeVal
highWaterMarkVal
proto
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
NewReadableExternalSourceStreamObject
(
JSContext
*
cx
void
*
underlyingSource
uint8_t
flags
HandleObject
proto
)
{
MOZ_ASSERT
(
!
cx
-
>
zone
(
)
-
>
isAtomsZone
(
)
)
;
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
MOZ_ASSERT
(
(
uintptr_t
(
underlyingSource
)
&
1
)
=
=
0
"
external
underlying
source
pointers
must
be
aligned
"
)
;
#
ifdef
DEBUG
JSRuntime
*
rt
=
cx
-
>
runtime
(
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamDataRequestCallback
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamWriteIntoReadRequestCallback
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamCancelCallback
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamClosedCallback
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamErroredCallback
)
;
MOZ_ASSERT
(
rt
-
>
readableStreamFinalizeCallback
)
;
#
endif
return
ReadableStream
:
:
createExternalSourceStream
(
cx
underlyingSource
flags
proto
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
IsReadableStream
(
JSObject
*
obj
)
{
return
obj
-
>
canUnwrapAs
<
ReadableStream
>
(
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
IsReadableStreamReader
(
JSObject
*
obj
)
{
return
obj
-
>
canUnwrapAs
<
ReadableStreamDefaultReader
>
(
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
IsReadableStreamDefaultReader
(
JSObject
*
obj
)
{
return
obj
-
>
canUnwrapAs
<
ReadableStreamDefaultReader
>
(
)
;
}
template
<
class
T
>
static
MOZ_MUST_USE
T
*
APIToUnwrapped
(
JSContext
*
cx
JSObject
*
obj
)
{
cx
-
>
check
(
obj
)
;
return
ToUnwrapped
<
T
>
(
cx
obj
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamIsReadable
(
JSContext
*
cx
HandleObject
streamObj
bool
*
result
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
*
result
=
stream
-
>
readable
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamIsLocked
(
JSContext
*
cx
HandleObject
streamObj
bool
*
result
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
*
result
=
stream
-
>
locked
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamIsDisturbed
(
JSContext
*
cx
HandleObject
streamObj
bool
*
result
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
*
result
=
stream
-
>
disturbed
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamGetEmbeddingFlags
(
JSContext
*
cx
HandleObject
streamObj
uint8_t
*
flags
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
*
flags
=
stream
-
>
embeddingFlags
(
)
;
return
true
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
ReadableStreamCancel
(
JSContext
*
cx
HandleObject
streamObj
HandleValue
reason
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
reason
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
return
:
:
ReadableStreamCancel
(
cx
stream
reason
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamGetMode
(
JSContext
*
cx
HandleObject
streamObj
JS
:
:
ReadableStreamMode
*
mode
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
*
mode
=
stream
-
>
mode
(
)
;
return
true
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
ReadableStreamGetReader
(
JSContext
*
cx
HandleObject
streamObj
ReadableStreamReaderMode
mode
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
nullptr
;
}
JSObject
*
result
=
CreateReadableStreamDefaultReader
(
cx
stream
)
;
MOZ_ASSERT_IF
(
result
IsObjectInContextCompartment
(
result
cx
)
)
;
return
result
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamGetExternalUnderlyingSource
(
JSContext
*
cx
HandleObject
streamObj
void
*
*
source
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
MOZ_ASSERT
(
stream
-
>
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
)
;
if
(
stream
-
>
locked
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_LOCKED
)
;
return
false
;
}
if
(
!
stream
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
ReadableStreamGetExternalUnderlyingSource
"
)
;
return
false
;
}
auto
controller
=
&
stream
-
>
controller
(
)
-
>
as
<
ReadableByteStreamController
>
(
)
;
controller
-
>
setSourceLocked
(
)
;
*
source
=
controller
-
>
underlyingSource
(
)
.
toPrivate
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamReleaseExternalUnderlyingSource
(
JSContext
*
cx
HandleObject
streamObj
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
MOZ_ASSERT
(
stream
-
>
mode
(
)
=
=
JS
:
:
ReadableStreamMode
:
:
ExternalSource
)
;
MOZ_ASSERT
(
stream
-
>
locked
(
)
)
;
MOZ_ASSERT
(
stream
-
>
controller
(
)
-
>
sourceLocked
(
)
)
;
stream
-
>
controller
(
)
-
>
clearSourceLocked
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamUpdateDataAvailableFromSource
(
JSContext
*
cx
JS
:
:
HandleObject
streamObj
uint32_t
availableData
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
ReadableByteStreamController
*
>
controller
(
cx
&
stream
-
>
controller
(
)
-
>
as
<
ReadableByteStreamController
>
(
)
)
;
if
(
controller
-
>
closeRequested
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_CLOSED
"
enqueue
"
)
;
return
false
;
}
if
(
!
controller
-
>
stream
(
)
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
enqueue
"
)
;
return
false
;
}
controller
-
>
clearPullFlags
(
)
;
#
if
DEBUG
uint32_t
oldAvailableData
=
controller
-
>
getFixedSlot
(
StreamController
:
:
Slot_TotalSize
)
.
toInt32
(
)
;
#
endif
controller
-
>
setQueueTotalSize
(
availableData
)
;
if
(
ReadableStreamGetNumReadRequests
(
stream
)
=
=
0
)
{
return
true
;
}
bool
hasDefaultReader
;
if
(
!
ReadableStreamHasDefaultReader
(
cx
stream
&
hasDefaultReader
)
)
{
return
false
;
}
if
(
hasDefaultReader
)
{
MOZ_ASSERT
(
oldAvailableData
=
=
0
)
;
JSObject
*
viewObj
=
JS_NewUint8Array
(
cx
availableData
)
;
if
(
!
viewObj
)
{
return
false
;
}
Rooted
<
ArrayBufferViewObject
*
>
transferredView
(
cx
&
viewObj
-
>
as
<
ArrayBufferViewObject
>
(
)
)
;
if
(
!
transferredView
)
{
return
false
;
}
void
*
underlyingSource
=
controller
-
>
underlyingSource
(
)
.
toPrivate
(
)
;
size_t
bytesWritten
;
{
AutoRealm
ar
(
cx
stream
)
;
JS
:
:
AutoSuppressGCAnalysis
suppressGC
(
cx
)
;
JS
:
:
AutoCheckCannotGC
noGC
;
bool
dummy
;
void
*
buffer
=
JS_GetArrayBufferViewData
(
transferredView
&
dummy
noGC
)
;
auto
cb
=
cx
-
>
runtime
(
)
-
>
readableStreamWriteIntoReadRequestCallback
;
MOZ_ASSERT
(
cb
)
;
cb
(
cx
stream
underlyingSource
stream
-
>
embeddingFlags
(
)
buffer
availableData
&
bytesWritten
)
;
}
RootedValue
chunk
(
cx
ObjectValue
(
*
transferredView
)
)
;
if
(
!
ReadableStreamFulfillReadOrReadIntoRequest
(
cx
stream
chunk
false
)
)
{
return
false
;
}
controller
-
>
setQueueTotalSize
(
availableData
-
bytesWritten
)
;
}
else
{
MOZ_ASSERT
(
!
stream
-
>
locked
(
)
)
;
}
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamTee
(
JSContext
*
cx
HandleObject
streamObj
MutableHandleObject
branch1Obj
MutableHandleObject
branch2Obj
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
ReadableStream
*
>
branch1Stream
(
cx
)
;
Rooted
<
ReadableStream
*
>
branch2Stream
(
cx
)
;
if
(
!
ReadableStreamTee
(
cx
stream
false
&
branch1Stream
&
branch2Stream
)
)
{
return
false
;
}
branch1Obj
.
set
(
branch1Stream
)
;
branch2Obj
.
set
(
branch2Stream
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamGetDesiredSize
(
JSContext
*
cx
JSObject
*
streamObj
bool
*
hasValue
double
*
value
)
{
ReadableStream
*
stream
=
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
;
if
(
!
stream
)
{
return
false
;
}
if
(
stream
-
>
errored
(
)
)
{
*
hasValue
=
false
;
return
true
;
}
*
hasValue
=
true
;
if
(
stream
-
>
closed
(
)
)
{
*
value
=
0
;
return
true
;
}
*
value
=
ReadableStreamControllerGetDesiredSizeUnchecked
(
stream
-
>
controller
(
)
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamClose
(
JSContext
*
cx
HandleObject
streamObj
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
Rooted
<
ReadableStreamController
*
>
controllerObj
(
cx
stream
-
>
controller
(
)
)
;
if
(
!
VerifyControllerStateForClosing
(
cx
controllerObj
)
)
{
return
false
;
}
if
(
controllerObj
-
>
is
<
ReadableStreamDefaultController
>
(
)
)
{
Rooted
<
ReadableStreamDefaultController
*
>
controller
(
cx
)
;
controller
=
&
controllerObj
-
>
as
<
ReadableStreamDefaultController
>
(
)
;
return
ReadableStreamDefaultControllerClose
(
cx
controller
)
;
}
Rooted
<
ReadableByteStreamController
*
>
controller
(
cx
)
;
controller
=
&
controllerObj
-
>
as
<
ReadableByteStreamController
>
(
)
;
return
ReadableByteStreamControllerClose
(
cx
controller
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamEnqueue
(
JSContext
*
cx
HandleObject
streamObj
HandleValue
chunk
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
chunk
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
if
(
stream
-
>
mode
(
)
!
=
JS
:
:
ReadableStreamMode
:
:
Default
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAM_NOT_DEFAULT_CONTROLLER
"
JS
:
:
ReadableStreamEnqueue
"
)
;
return
false
;
}
Rooted
<
ReadableStreamDefaultController
*
>
controller
(
cx
)
;
controller
=
&
stream
-
>
controller
(
)
-
>
as
<
ReadableStreamDefaultController
>
(
)
;
MOZ_ASSERT
(
!
controller
-
>
closeRequested
(
)
)
;
MOZ_ASSERT
(
stream
-
>
readable
(
)
)
;
return
ReadableStreamDefaultControllerEnqueue
(
cx
controller
chunk
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamError
(
JSContext
*
cx
HandleObject
streamObj
HandleValue
error
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
error
)
;
Rooted
<
ReadableStream
*
>
stream
(
cx
APIToUnwrapped
<
ReadableStream
>
(
cx
streamObj
)
)
;
if
(
!
stream
)
{
return
false
;
}
if
(
!
stream
-
>
readable
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_READABLESTREAMCONTROLLER_NOT_READABLE
"
error
"
)
;
return
false
;
}
Rooted
<
ReadableStreamController
*
>
controller
(
cx
stream
-
>
controller
(
)
)
;
return
ReadableStreamControllerError
(
cx
controller
error
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamReaderIsClosed
(
JSContext
*
cx
HandleObject
readerObj
bool
*
result
)
{
Rooted
<
ReadableStreamReader
*
>
reader
(
cx
APIToUnwrapped
<
ReadableStreamReader
>
(
cx
readerObj
)
)
;
if
(
!
reader
)
{
return
false
;
}
*
result
=
reader
-
>
isClosed
(
)
;
return
true
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamReaderCancel
(
JSContext
*
cx
HandleObject
readerObj
HandleValue
reason
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
cx
-
>
check
(
reason
)
;
Rooted
<
ReadableStreamReader
*
>
reader
(
cx
APIToUnwrapped
<
ReadableStreamReader
>
(
cx
readerObj
)
)
;
if
(
!
reader
)
{
return
false
;
}
return
ReadableStreamReaderGenericCancel
(
cx
reader
reason
)
;
}
JS_PUBLIC_API
(
bool
)
JS
:
:
ReadableStreamReaderReleaseLock
(
JSContext
*
cx
HandleObject
readerObj
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStreamReader
*
>
reader
(
cx
APIToUnwrapped
<
ReadableStreamReader
>
(
cx
readerObj
)
)
;
if
(
!
reader
)
{
return
false
;
}
#
ifdef
DEBUG
Rooted
<
ReadableStream
*
>
stream
(
cx
)
;
if
(
!
UnwrapStreamFromReader
(
cx
reader
&
stream
)
)
{
return
false
;
}
MOZ_ASSERT
(
ReadableStreamGetNumReadRequests
(
stream
)
=
=
0
)
;
#
endif
return
ReadableStreamReaderGenericRelease
(
cx
reader
)
;
}
JS_PUBLIC_API
(
JSObject
*
)
JS
:
:
ReadableStreamDefaultReaderRead
(
JSContext
*
cx
HandleObject
readerObj
)
{
AssertHeapIsIdle
(
)
;
CHECK_THREAD
(
cx
)
;
Rooted
<
ReadableStreamDefaultReader
*
>
reader
(
cx
)
;
reader
=
APIToUnwrapped
<
ReadableStreamDefaultReader
>
(
cx
readerObj
)
;
if
(
!
reader
)
{
return
nullptr
;
}
return
:
:
ReadableStreamDefaultReaderRead
(
cx
reader
)
;
}
