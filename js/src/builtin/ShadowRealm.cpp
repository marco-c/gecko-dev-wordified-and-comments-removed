#
include
"
builtin
/
ShadowRealm
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
builtin
/
Promise
.
h
"
#
include
"
builtin
/
WrappedFunctionObject
.
h
"
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
Exception
.
h
"
#
include
"
js
/
GlobalObject
.
h
"
#
include
"
js
/
Principals
.
h
"
#
include
"
js
/
Promise
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
ShadowRealmCallbacks
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Wrapper
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
builtin
/
HandlerFunction
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
using
JS
:
:
AutoStableStringChars
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
SourceOwnership
;
using
JS
:
:
SourceText
;
static
JSObject
*
DefaultNewShadowRealmGlobal
(
JSContext
*
cx
JS
:
:
RealmOptions
&
options
JSPrincipals
*
principals
HandleObject
unused
)
{
static
const
JSClass
shadowRealmGlobal
=
{
"
ShadowRealmGlobal
"
JSCLASS_GLOBAL_FLAGS
&
JS
:
:
DefaultGlobalClassOps
}
;
return
JS_NewGlobalObject
(
cx
&
shadowRealmGlobal
principals
JS
:
:
FireOnNewGlobalHook
options
)
;
}
bool
ShadowRealmObject
:
:
construct
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
args
.
isConstructing
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_CONSTRUCTOR
"
ShadowRealm
"
)
;
return
false
;
}
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_ShadowRealm
&
proto
)
)
{
return
false
;
}
Rooted
<
ShadowRealmObject
*
>
shadowRealmObj
(
cx
NewObjectWithClassProto
<
ShadowRealmObject
>
(
cx
proto
)
)
;
if
(
!
shadowRealmObj
)
{
return
false
;
}
JS
:
:
RealmOptions
options
(
cx
-
>
realm
(
)
-
>
creationOptions
(
)
cx
-
>
realm
(
)
-
>
behaviors
(
)
)
;
options
.
creationOptions
(
)
.
setExistingCompartment
(
cx
-
>
compartment
(
)
)
;
JS
:
:
GlobalCreationCallback
newGlobal
=
cx
-
>
runtime
(
)
-
>
getShadowRealmGlobalCreationCallback
(
)
;
if
(
!
newGlobal
)
{
newGlobal
=
DefaultNewShadowRealmGlobal
;
}
JSPrincipals
*
principals
=
JS
:
:
GetRealmPrincipals
(
cx
-
>
realm
(
)
)
;
RootedObject
global
(
cx
newGlobal
(
cx
options
principals
cx
-
>
global
(
)
)
)
;
if
(
!
global
)
{
return
false
;
}
MOZ_RELEASE_ASSERT
(
global
-
>
compartment
(
)
=
=
cx
-
>
compartment
(
)
)
;
shadowRealmObj
-
>
initFixedSlot
(
GlobalSlot
ObjectValue
(
*
global
)
)
;
JS
:
:
GlobalInitializeCallback
hostInitializeShadowRealm
=
cx
-
>
runtime
(
)
-
>
getShadowRealmInitializeGlobalCallback
(
)
;
if
(
hostInitializeShadowRealm
)
{
if
(
!
hostInitializeShadowRealm
(
cx
global
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setObject
(
*
shadowRealmObj
)
;
return
true
;
}
static
ShadowRealmObject
*
ValidateShadowRealmObject
(
JSContext
*
cx
HandleObject
O
)
{
RootedObject
maybeUnwrappedO
(
cx
O
)
;
if
(
IsCrossCompartmentWrapper
(
O
)
)
{
maybeUnwrappedO
=
CheckedUnwrapDynamic
(
O
cx
)
;
if
(
!
maybeUnwrappedO
)
{
return
nullptr
;
}
}
if
(
!
maybeUnwrappedO
-
>
is
<
ShadowRealmObject
>
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_SHADOW_REALM
)
;
return
nullptr
;
}
return
&
maybeUnwrappedO
-
>
as
<
ShadowRealmObject
>
(
)
;
}
static
bool
PerformShadowRealmEval
(
JSContext
*
cx
HandleString
sourceText
Realm
*
callerRealm
Realm
*
evalRealm
MutableHandleValue
rval
)
{
MOZ_ASSERT
(
callerRealm
!
=
evalRealm
)
;
if
(
!
cx
-
>
isRuntimeCodeGenEnabled
(
JS
:
:
RuntimeCode
:
:
JS
sourceText
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CSP_BLOCKED_SHADOWREALM
)
;
return
false
;
}
bool
compileSuccess
=
false
;
bool
evalSuccess
=
false
;
do
{
Rooted
<
GlobalObject
*
>
evalRealmGlobal
(
cx
evalRealm
-
>
maybeGlobal
(
)
)
;
AutoRealm
ar
(
cx
evalRealmGlobal
)
;
AutoStableStringChars
linearChars
(
cx
)
;
if
(
!
linearChars
.
initTwoByte
(
cx
sourceText
)
)
{
return
false
;
}
SourceText
<
char16_t
>
srcBuf
;
const
char16_t
*
chars
=
linearChars
.
twoByteRange
(
)
.
begin
(
)
.
get
(
)
;
SourceOwnership
ownership
=
linearChars
.
maybeGiveOwnershipToCaller
(
)
?
SourceOwnership
:
:
TakeOwnership
:
SourceOwnership
:
:
Borrowed
;
if
(
!
srcBuf
.
init
(
cx
chars
linearChars
.
length
(
)
ownership
)
)
{
return
false
;
}
RootedScript
callerScript
(
cx
)
;
const
char
*
filename
;
unsigned
lineno
;
uint32_t
pcOffset
;
bool
mutedErrors
;
DescribeScriptedCallerForCompilation
(
cx
&
callerScript
&
filename
&
lineno
&
pcOffset
&
mutedErrors
)
;
CompileOptions
options
(
cx
)
;
options
.
setIsRunOnce
(
true
)
.
setNoScriptRval
(
false
)
.
setMutedErrors
(
mutedErrors
)
.
setFileAndLine
(
filename
lineno
)
;
Rooted
<
Scope
*
>
enclosing
(
cx
&
evalRealmGlobal
-
>
emptyGlobalScope
(
)
)
;
RootedScript
script
(
cx
frontend
:
:
CompileEvalScript
(
cx
options
srcBuf
enclosing
evalRealmGlobal
)
)
;
compileSuccess
=
!
!
script
;
if
(
!
compileSuccess
)
{
break
;
}
RootedObject
environment
(
cx
&
evalRealmGlobal
-
>
lexicalEnvironment
(
)
)
;
evalSuccess
=
ExecuteKernel
(
cx
script
environment
NullFramePtr
(
)
rval
)
;
}
while
(
false
)
;
if
(
!
compileSuccess
)
{
JS_ClearPendingException
(
cx
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SHADOW_REALM_GENERIC_SYNTAX
)
;
return
false
;
}
if
(
!
evalSuccess
)
{
JS_ClearPendingException
(
cx
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SHADOW_REALM_EVALUATE_FAILURE
)
;
return
false
;
}
return
GetWrappedValue
(
cx
callerRealm
rval
rval
)
;
}
static
bool
ShadowRealm_evaluate
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
RootedObject
obj
(
cx
ToObject
(
cx
args
.
thisv
(
)
)
)
;
if
(
!
obj
)
{
return
false
;
}
Rooted
<
ShadowRealmObject
*
>
shadowRealm
(
cx
ValidateShadowRealmObject
(
cx
obj
)
)
;
if
(
!
shadowRealm
)
{
return
false
;
}
if
(
!
args
.
get
(
0
)
.
isString
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SHADOW_REALM_EVALUATE_NOT_STRING
)
;
return
false
;
}
RootedString
sourceText
(
cx
args
.
get
(
0
)
.
toString
(
)
)
;
Realm
*
callerRealm
=
cx
-
>
realm
(
)
;
Realm
*
evalRealm
=
shadowRealm
-
>
getShadowRealm
(
)
;
return
PerformShadowRealmEval
(
cx
sourceText
callerRealm
evalRealm
args
.
rval
(
)
)
;
}
static
bool
ShadowRealm_importValue
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_SHADOW_REALM_IMPORTVALUE_NOT_IMPLEMENTED
)
;
return
false
;
}
static
const
JSFunctionSpec
shadowrealm_methods
[
]
=
{
JS_FN
(
"
evaluate
"
ShadowRealm_evaluate
1
0
)
JS_FN
(
"
importValue
"
ShadowRealm_importValue
2
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
shadowrealm_properties
[
]
=
{
JS_STRING_SYM_PS
(
toStringTag
"
ShadowRealm
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
const
ClassSpec
ShadowRealmObjectClassSpec
=
{
GenericCreateConstructor
<
ShadowRealmObject
:
:
construct
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
ShadowRealmObject
>
nullptr
nullptr
shadowrealm_methods
shadowrealm_properties
}
;
const
JSClass
ShadowRealmObject
:
:
class_
=
{
"
ShadowRealm
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_ShadowRealm
)
|
JSCLASS_HAS_RESERVED_SLOTS
(
ShadowRealmObject
:
:
SlotCount
)
JS_NULL_CLASS_OPS
&
ShadowRealmObjectClassSpec
}
;
const
JSClass
ShadowRealmObject
:
:
protoClass_
=
{
"
ShadowRealm
.
prototype
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_ShadowRealm
)
JS_NULL_CLASS_OPS
&
ShadowRealmObjectClassSpec
}
;
