#
ifndef
builtin_TestingUtility_h
#
define
builtin_TestingUtility_h
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Utility
.
h
"
struct
JSContext
;
class
JSObject
;
class
JSString
;
namespace
JS
{
class
JS_PUBLIC_API
CompileOptions
;
}
namespace
js
{
class
FrontendContext
;
class
ScriptSource
;
namespace
frontend
{
struct
CompilationStencil
;
}
[
[
nodiscard
]
]
bool
ParseCompileOptions
(
JSContext
*
cx
JS
:
:
CompileOptions
&
options
JS
:
:
Handle
<
JSObject
*
>
opts
JS
:
:
UniqueChars
*
fileNameBytes
)
;
[
[
nodiscard
]
]
bool
ParseSourceOptions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
opts
JS
:
:
MutableHandle
<
JSString
*
>
displayURL
JS
:
:
MutableHandle
<
JSString
*
>
sourceMapURL
)
;
[
[
nodiscard
]
]
bool
SetSourceOptions
(
JSContext
*
cx
FrontendContext
*
fc
ScriptSource
*
source
JS
:
:
Handle
<
JSString
*
>
displayURL
JS
:
:
Handle
<
JSString
*
>
sourceMapURL
)
;
JSObject
*
CreateScriptPrivate
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
path
=
nullptr
)
;
[
[
nodiscard
]
]
bool
ParseDebugMetadata
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
opts
JS
:
:
MutableHandle
<
JS
:
:
Value
>
privateValue
JS
:
:
MutableHandle
<
JSString
*
>
elementAttributeName
)
;
[
[
nodiscard
]
]
JS
:
:
UniqueChars
StringToLocale
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
callee
JS
:
:
Handle
<
JSString
*
>
str
)
;
enum
class
AllowTimeZoneLink
:
bool
{
No
Yes
}
;
[
[
nodiscard
]
]
JS
:
:
UniqueChars
StringToTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
callee
JS
:
:
Handle
<
JSString
*
>
str
AllowTimeZoneLink
allowLink
)
;
bool
ValidateLazinessOfStencilAndGlobal
(
JSContext
*
cx
const
JS
:
:
Stencil
*
stencil
)
;
bool
ValidateModuleCompileOptions
(
JSContext
*
cx
JS
:
:
CompileOptions
&
options
)
;
}
#
endif
