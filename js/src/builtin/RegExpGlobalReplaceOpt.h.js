function
FUNC_NAME
(
rx
S
lengthS
replaceValue
fullUnicode
#
ifdef
SUBSTITUTION
firstDollarIndex
#
endif
#
ifdef
ELEMBASE
elemBase
#
endif
)
{
var
lastIndex
=
0
;
rx
.
lastIndex
=
0
;
#
if
defined
(
FUNCTIONAL
)
|
|
defined
(
SUBSTITUTION
)
rx
=
regexp_clone
(
rx
)
;
#
endif
var
accumulatedResult
=
"
"
;
var
nextSourcePosition
=
0
;
while
(
true
)
{
var
result
=
RegExpMatcher
(
rx
S
lastIndex
)
;
if
(
result
=
=
=
null
)
break
;
var
nCaptures
;
#
if
defined
(
FUNCTIONAL
)
|
|
defined
(
SUBSTITUTION
)
nCaptures
=
std_Math_max
(
result
.
length
-
1
0
)
;
#
endif
var
matched
=
result
[
0
]
;
var
matchLength
=
matched
.
length
;
var
position
=
result
.
index
;
lastIndex
=
position
+
matchLength
;
var
replacement
;
#
if
defined
(
FUNCTIONAL
)
replacement
=
RegExpGetComplexReplacement
(
result
matched
S
position
nCaptures
replaceValue
true
-
1
)
;
#
elif
defined
(
SUBSTITUTION
)
replacement
=
RegExpGetComplexReplacement
(
result
matched
S
position
nCaptures
replaceValue
false
firstDollarIndex
)
;
#
elif
defined
(
ELEMBASE
)
if
(
IsObject
(
elemBase
)
)
{
var
prop
=
GetStringDataProperty
(
elemBase
matched
)
;
if
(
prop
!
=
=
undefined
)
{
assert
(
typeof
prop
=
=
=
"
string
"
"
GetStringDataProperty
should
return
either
string
or
undefined
"
)
;
replacement
=
prop
;
}
else
{
elemBase
=
undefined
;
}
}
if
(
!
IsObject
(
elemBase
)
)
{
nCaptures
=
std_Math_max
(
result
.
length
-
1
0
)
;
replacement
=
RegExpGetComplexReplacement
(
result
matched
S
position
nCaptures
replaceValue
true
-
1
)
;
}
#
else
replacement
=
replaceValue
;
#
endif
accumulatedResult
+
=
Substring
(
S
nextSourcePosition
position
-
nextSourcePosition
)
+
replacement
;
nextSourcePosition
=
lastIndex
;
if
(
matchLength
=
=
=
0
)
{
lastIndex
=
fullUnicode
?
AdvanceStringIndex
(
S
lastIndex
)
:
lastIndex
+
1
;
if
(
lastIndex
>
lengthS
)
break
;
}
}
if
(
nextSourcePosition
>
=
lengthS
)
return
accumulatedResult
;
return
accumulatedResult
+
Substring
(
S
nextSourcePosition
lengthS
-
nextSourcePosition
)
;
}
