"
use
strict
"
;
module
.
exports
=
{
plugins
:
[
"
spidermonkey
-
js
"
]
overrides
:
[
{
files
:
[
"
*
.
js
"
]
excludedFiles
:
"
.
eslintrc
.
js
"
processor
:
"
spidermonkey
-
js
/
processor
"
env
:
{
node
:
false
browser
:
false
builtin
:
false
es2021
:
false
"
mozilla
/
privileged
"
:
false
"
mozilla
/
specific
"
:
false
"
spidermonkey
-
js
/
environment
"
:
true
}
parserOptions
:
{
ecmaVersion
:
"
latest
"
sourceType
:
"
script
"
ecmaFeatures
:
{
impliedStrict
:
true
}
babelOptions
:
{
parserOpts
:
{
strictMode
:
true
}
}
}
rules
:
{
"
no
-
self
-
compare
"
:
"
off
"
"
no
-
lonely
-
if
"
:
"
off
"
"
no
-
redeclare
"
:
"
off
"
"
no
-
void
"
:
[
"
error
"
{
allowAsStatement
:
true
}
]
eqeqeq
:
"
error
"
strict
:
[
"
error
"
"
never
"
]
"
no
-
restricted
-
syntax
"
:
[
"
error
"
{
selector
:
"
ClassDeclaration
"
message
:
"
Class
declarations
are
not
allowed
"
}
{
selector
:
"
ClassExpression
"
message
:
"
Class
expressions
are
not
allowed
"
}
{
selector
:
"
Literal
[
regex
]
"
message
:
"
Regular
expression
literals
are
not
allowed
"
}
{
selector
:
"
CallExpression
>
MemberExpression
.
callee
"
message
:
"
Direct
method
calls
are
not
allowed
use
callFunction
(
)
or
callContentFunction
(
)
"
}
{
selector
:
"
NewExpression
>
MemberExpression
.
callee
"
message
:
"
Direct
method
calls
are
not
allowed
use
constructContentFunction
(
)
"
}
{
selector
:
"
YieldExpression
[
delegate
=
true
]
"
message
:
"
yield
*
is
not
allowed
because
it
can
run
user
-
modifiable
iteration
code
"
}
{
selector
:
"
ForOfStatement
>
:
not
(
CallExpression
)
.
right
"
message
:
"
for
-
of
loops
must
use
allowContentIter
(
)
allowContentIterWith
(
)
or
allowContentIterWithNext
(
)
"
}
{
selector
:
"
ForOfStatement
>
CallExpression
.
right
>
:
not
(
Identifier
[
name
=
'
allowContentIter
'
]
Identifier
[
name
=
'
allowContentIterWith
'
]
Identifier
[
name
=
'
allowContentIterWithNext
'
]
)
.
callee
"
message
:
"
for
-
of
loops
must
use
allowContentIter
(
)
allowContentIterWith
(
)
or
allowContentIterWithNext
"
}
{
selector
:
"
CallExpression
[
callee
.
name
=
'
TO_PROPERTY_KEY
'
]
>
:
not
(
Identifier
)
.
arguments
:
first
-
child
"
message
:
"
TO_PROPERTY_KEY
macro
must
be
called
with
a
simple
identifier
"
}
{
selector
:
"
Identifier
[
name
=
'
arguments
'
]
"
message
:
"
'
arguments
'
is
disallowed
use
ArgumentsLength
(
)
GetArgument
(
n
)
or
rest
-
parameters
"
}
{
selector
:
"
VariableDeclaration
[
kind
=
'
let
'
]
"
message
:
"
'
let
'
declarations
are
disallowed
to
avoid
TDZ
checks
use
'
var
'
instead
"
}
{
selector
:
"
VariableDeclaration
[
kind
=
'
const
'
]
"
message
:
"
'
const
'
declarations
are
disallowed
to
avoid
TDZ
checks
use
'
var
'
instead
"
}
]
"
no
-
unused
-
vars
"
:
[
"
error
"
{
args
:
"
none
"
vars
:
"
local
"
}
]
}
globals
:
{
ArgumentsLength
:
"
readonly
"
allowContentIter
:
"
readonly
"
allowContentIterWith
:
"
readonly
"
allowContentIterWithNext
:
"
readonly
"
callContentFunction
:
"
readonly
"
callFunction
:
"
readonly
"
constructContentFunction
:
"
readonly
"
DefineDataProperty
:
"
readonly
"
forceInterpreter
:
"
readonly
"
GetArgument
:
"
readonly
"
GetBuiltinConstructor
:
"
readonly
"
GetBuiltinPrototype
:
"
readonly
"
GetBuiltinSymbol
:
"
readonly
"
getPropertySuper
:
"
readonly
"
hasOwn
:
"
readonly
"
IsNullOrUndefined
:
"
readonly
"
IteratorClose
:
"
readonly
"
resumeGenerator
:
"
readonly
"
SetCanonicalName
:
"
readonly
"
SetIsInlinableLargeFunction
:
"
readonly
"
ToNumeric
:
"
readonly
"
ToString
:
"
readonly
"
DisposeResourcesAsync
:
"
readonly
"
DisposeResourcesSync
:
"
readonly
"
undefined
:
"
readonly
"
AsyncIterator
:
"
off
"
Iterator
:
"
off
"
Record
:
"
off
"
Temporal
:
"
off
"
Tuple
:
"
off
"
}
}
]
}
;
