var
displayNamesInternalProperties
=
{
localeData
:
function
(
)
{
return
{
}
;
}
relevantExtensionKeys
:
[
]
}
;
var
mozDisplayNamesInternalProperties
=
{
localeData
:
function
(
)
{
return
{
ca
:
intl_availableCalendars
default
:
{
ca
:
intl_defaultCalendar
}
}
;
}
relevantExtensionKeys
:
[
"
ca
"
]
}
;
function
resolveDisplayNamesInternals
(
lazyDisplayNamesData
)
{
assert
(
IsObject
(
lazyDisplayNamesData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
mozExtensions
=
lazyDisplayNamesData
.
mozExtensions
;
var
DisplayNames
=
mozExtensions
?
mozDisplayNamesInternalProperties
:
displayNamesInternalProperties
;
var
localeData
=
DisplayNames
.
localeData
;
var
r
=
ResolveLocale
(
"
DisplayNames
"
lazyDisplayNamesData
.
requestedLocales
lazyDisplayNamesData
.
opt
DisplayNames
.
relevantExtensionKeys
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
return
internalProps
;
}
function
getDisplayNamesInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getDisplayNamesInternals
called
with
non
-
object
"
)
;
assert
(
GuardToDisplayNames
(
obj
)
!
=
=
null
"
getDisplayNamesInternals
called
with
non
-
DisplayNames
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
DisplayNames
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
return
internalProps
;
internalProps
=
resolveDisplayNamesInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeDisplayNames
(
displayNames
locales
options
mozExtensions
)
{
assert
(
IsObject
(
displayNames
)
"
InitializeDisplayNames
called
with
non
-
object
"
)
;
assert
(
GuardToDisplayNames
(
displayNames
)
!
=
=
null
"
InitializeDisplayNames
called
with
non
-
DisplayNames
"
)
;
var
lazyDisplayNamesData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyDisplayNamesData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
options
=
std_Object_create
(
null
)
;
else
options
=
ToObject
(
options
)
;
var
opt
=
new
Record
(
)
;
lazyDisplayNamesData
.
opt
=
opt
;
lazyDisplayNamesData
.
mozExtensions
=
mozExtensions
;
var
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
initializeIntlObject
(
displayNames
"
DisplayNames
"
lazyDisplayNamesData
)
;
}
function
Intl_DisplayNames_supportedLocalesOf
(
locales
)
{
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
availableLocales
=
"
DisplayNames
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_DisplayNames_of
(
code
)
{
var
displayNames
=
this
;
if
(
!
IsObject
(
displayNames
)
|
|
(
displayNames
=
GuardToDisplayNames
(
displayNames
)
)
=
=
=
null
)
{
return
callFunction
(
CallDisplayNamesMethodIfWrapped
this
"
Intl_DisplayNames_of
"
)
;
}
var
internals
=
getDisplayNamesInternals
(
displayNames
)
;
return
;
}
function
Intl_DisplayNames_resolvedOptions
(
)
{
var
displayNames
=
this
;
if
(
!
IsObject
(
displayNames
)
|
|
(
displayNames
=
GuardToDisplayNames
(
displayNames
)
)
=
=
=
null
)
{
return
callFunction
(
CallDisplayNamesMethodIfWrapped
this
"
Intl_DisplayNames_resolvedOptions
"
)
;
}
var
internals
=
getDisplayNamesInternals
(
displayNames
)
;
var
options
=
{
locale
:
internals
.
locale
}
;
return
options
;
}
