function
segmenterLocaleData
(
)
{
return
{
}
;
}
var
segmenterInternalProperties
=
{
localeData
:
segmenterLocaleData
relevantExtensionKeys
:
[
]
}
;
function
resolveSegmenterInternals
(
lazySegmenterData
)
{
assert
(
IsObject
(
lazySegmenterData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
Segmenter
=
segmenterInternalProperties
;
var
localeData
=
Segmenter
.
localeData
;
var
r
=
ResolveLocale
(
"
Segmenter
"
lazySegmenterData
.
requestedLocales
lazySegmenterData
.
opt
Segmenter
.
relevantExtensionKeys
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
granularity
=
lazySegmenterData
.
granularity
;
return
internalProps
;
}
function
getSegmenterInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getSegmenterInternals
called
with
non
-
object
"
)
;
assert
(
intl_GuardToSegmenter
(
obj
)
!
=
=
null
"
getSegmenterInternals
called
with
non
-
Segmenter
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
Segmenter
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
{
return
internalProps
;
}
internalProps
=
resolveSegmenterInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeSegmenter
(
segmenter
locales
options
)
{
assert
(
IsObject
(
segmenter
)
"
InitializeSegmenter
called
with
non
-
object
"
)
;
assert
(
intl_GuardToSegmenter
(
segmenter
)
!
=
=
null
"
InitializeSegmenter
called
with
non
-
Segmenter
"
)
;
var
lazySegmenterData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazySegmenterData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
{
options
=
std_Object_create
(
null
)
;
}
else
if
(
!
IsObject
(
options
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
options
=
=
=
null
?
"
null
"
:
typeof
options
)
;
}
var
opt
=
new_Record
(
)
;
lazySegmenterData
.
opt
=
opt
;
var
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
var
granularity
=
GetOption
(
options
"
granularity
"
"
string
"
[
"
grapheme
"
"
word
"
"
sentence
"
]
"
grapheme
"
)
;
lazySegmenterData
.
granularity
=
granularity
;
initializeIntlObject
(
segmenter
"
Segmenter
"
lazySegmenterData
)
;
}
function
Intl_Segmenter_supportedLocalesOf
(
locales
)
{
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
availableLocales
=
"
Segmenter
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_Segmenter_segment
(
value
)
{
var
segmenter
=
this
;
if
(
!
IsObject
(
segmenter
)
|
|
(
segmenter
=
intl_GuardToSegmenter
(
segmenter
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallSegmenterMethodIfWrapped
this
value
"
Intl_Segmenter_segment
"
)
;
}
getSegmenterInternals
(
segmenter
)
;
var
string
=
ToString
(
value
)
;
return
intl_CreateSegmentsObject
(
segmenter
string
)
;
}
function
Intl_Segmenter_resolvedOptions
(
)
{
var
segmenter
=
this
;
if
(
!
IsObject
(
segmenter
)
|
|
(
segmenter
=
intl_GuardToSegmenter
(
segmenter
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallSegmenterMethodIfWrapped
this
"
Intl_Segmenter_resolvedOptions
"
)
;
}
var
internals
=
getSegmenterInternals
(
segmenter
)
;
var
options
=
{
locale
:
internals
.
locale
granularity
:
internals
.
granularity
}
;
return
options
;
}
function
CreateSegmentDataObject
(
string
boundaries
)
{
assert
(
typeof
string
=
=
=
"
string
"
"
CreateSegmentDataObject
"
)
;
assert
(
IsPackedArray
(
boundaries
)
&
&
boundaries
.
length
=
=
=
3
"
CreateSegmentDataObject
"
)
;
var
startIndex
=
boundaries
[
0
]
;
assert
(
typeof
startIndex
=
=
=
"
number
"
&
&
(
startIndex
|
0
)
=
=
=
startIndex
"
startIndex
is
an
int32
-
value
"
)
;
var
endIndex
=
boundaries
[
1
]
;
assert
(
typeof
endIndex
=
=
=
"
number
"
&
&
(
endIndex
|
0
)
=
=
=
endIndex
"
endIndex
is
an
int32
-
value
"
)
;
var
isWordLike
=
boundaries
[
2
]
;
assert
(
typeof
isWordLike
=
=
=
"
boolean
"
|
|
isWordLike
=
=
=
undefined
"
isWordLike
is
either
a
boolean
or
undefined
"
)
;
assert
(
startIndex
>
=
0
"
startIndex
is
a
positive
number
"
)
;
assert
(
endIndex
<
=
string
.
length
"
endIndex
is
less
-
than
-
equals
the
string
length
"
)
;
assert
(
startIndex
<
endIndex
"
startIndex
is
strictly
less
than
endIndex
"
)
;
var
segment
=
SubstringKernel
(
string
startIndex
|
0
(
endIndex
-
startIndex
)
|
0
)
;
if
(
isWordLike
=
=
=
undefined
)
{
return
{
segment
index
:
startIndex
input
:
string
}
;
}
return
{
segment
index
:
startIndex
input
:
string
isWordLike
}
;
}
function
Intl_Segments_containing
(
index
)
{
var
segments
=
this
;
if
(
!
IsObject
(
segments
)
|
|
(
segments
=
intl_GuardToSegments
(
segments
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallSegmentsMethodIfWrapped
this
index
"
Intl_Segments_containing
"
)
;
}
var
string
=
UnsafeGetStringFromReservedSlot
(
segments
INTL_SEGMENTS_STRING_SLOT
)
;
var
len
=
string
.
length
;
var
n
=
ToInteger
(
index
)
;
if
(
n
<
0
|
|
n
>
=
len
)
{
return
undefined
;
}
var
boundaries
=
intl_FindSegmentBoundaries
(
segments
n
|
0
)
;
return
CreateSegmentDataObject
(
string
boundaries
)
;
}
function
Intl_Segments_iterator
(
)
{
var
segments
=
this
;
if
(
!
IsObject
(
segments
)
|
|
(
segments
=
intl_GuardToSegments
(
segments
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallSegmentsMethodIfWrapped
this
"
Intl_Segments_iterator
"
)
;
}
return
intl_CreateSegmentIterator
(
segments
)
;
}
function
Intl_SegmentIterator_next
(
)
{
var
iterator
=
this
;
if
(
!
IsObject
(
iterator
)
|
|
(
iterator
=
intl_GuardToSegmentIterator
(
iterator
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallSegmentIteratorMethodIfWrapped
this
"
Intl_SegmentIterator_next
"
)
;
}
var
string
=
UnsafeGetStringFromReservedSlot
(
iterator
INTL_SEGMENT_ITERATOR_STRING_SLOT
)
;
var
index
=
UnsafeGetInt32FromReservedSlot
(
iterator
INTL_SEGMENT_ITERATOR_INDEX_SLOT
)
;
var
result
=
{
value
:
undefined
done
:
false
}
;
if
(
index
=
=
=
string
.
length
)
{
result
.
done
=
true
;
return
result
;
}
var
boundaries
=
intl_FindNextSegmentBoundaries
(
iterator
)
;
result
.
value
=
CreateSegmentDataObject
(
string
boundaries
)
;
return
result
;
}
