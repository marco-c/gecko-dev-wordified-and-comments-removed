function
Intl_getCanonicalLocales
(
locales
)
{
return
CanonicalizeLocaleList
(
locales
)
;
}
function
Intl_supportedValuesOf
(
key
)
{
key
=
ToString
(
key
)
;
return
intl_SupportedValuesOf
(
key
)
;
}
function
Intl_getCalendarInfo
(
locales
)
{
const
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
const
DateTimeFormat
=
dateTimeFormatInternalProperties
;
const
localeData
=
DateTimeFormat
.
localeData
;
const
localeOpt
=
new_Record
(
)
;
localeOpt
.
localeMatcher
=
"
best
fit
"
;
const
r
=
ResolveLocale
(
"
DateTimeFormat
"
requestedLocales
localeOpt
DateTimeFormat
.
relevantExtensionKeys
localeData
)
;
const
result
=
intl_GetCalendarInfo
(
r
.
locale
)
;
DefineDataProperty
(
result
"
calendar
"
r
.
ca
)
;
DefineDataProperty
(
result
"
locale
"
r
.
locale
)
;
return
result
;
}
function
Intl_getDisplayNames
(
locales
options
)
{
const
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
if
(
options
=
=
=
undefined
)
options
=
std_Object_create
(
null
)
;
else
options
=
ToObject
(
options
)
;
const
DateTimeFormat
=
dateTimeFormatInternalProperties
;
const
localeData
=
DateTimeFormat
.
localeData
;
const
localeOpt
=
new_Record
(
)
;
localeOpt
.
localeMatcher
=
"
best
fit
"
;
const
r
=
ResolveLocale
(
"
DateTimeFormat
"
requestedLocales
localeOpt
DateTimeFormat
.
relevantExtensionKeys
localeData
)
;
const
style
=
GetOption
(
options
"
style
"
"
string
"
[
"
long
"
"
short
"
"
narrow
"
]
"
long
"
)
;
let
keys
=
options
.
keys
;
if
(
keys
=
=
=
undefined
)
{
keys
=
[
]
;
}
else
if
(
!
IsObject
(
keys
)
)
{
ThrowTypeError
(
JSMSG_INVALID_KEYS_TYPE
)
;
}
let
processedKeys
=
[
]
;
let
len
=
ToLength
(
keys
.
length
)
;
for
(
let
i
=
0
;
i
<
len
;
i
+
+
)
{
DefineDataProperty
(
processedKeys
i
ToString
(
keys
[
i
]
)
)
;
}
const
names
=
intl_ComputeDisplayNames
(
r
.
locale
style
processedKeys
)
;
const
values
=
{
}
;
for
(
let
i
=
0
;
i
<
len
;
i
+
+
)
{
const
key
=
processedKeys
[
i
]
;
const
name
=
names
[
i
]
;
assert
(
typeof
name
=
=
=
"
string
"
"
unexpected
non
-
string
value
"
)
;
assert
(
name
.
length
>
0
"
empty
string
value
"
)
;
DefineDataProperty
(
values
key
name
)
;
}
const
result
=
{
locale
:
r
.
locale
style
values
}
;
return
result
;
}
function
Intl_getLocaleInfo
(
locales
)
{
const
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
const
DateTimeFormat
=
dateTimeFormatInternalProperties
;
const
localeData
=
DateTimeFormat
.
localeData
;
const
localeOpt
=
new_Record
(
)
;
localeOpt
.
localeMatcher
=
"
best
fit
"
;
const
r
=
ResolveLocale
(
"
DateTimeFormat
"
requestedLocales
localeOpt
DateTimeFormat
.
relevantExtensionKeys
localeData
)
;
return
intl_GetLocaleInfo
(
r
.
locale
)
;
}
