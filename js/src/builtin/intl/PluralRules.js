var
pluralRulesInternalProperties
=
{
localeData
:
pluralRulesLocaleData
relevantExtensionKeys
:
[
]
}
;
function
pluralRulesLocaleData
(
)
{
return
{
}
;
}
function
resolvePluralRulesInternals
(
lazyPluralRulesData
)
{
assert
(
IsObject
(
lazyPluralRulesData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
PluralRules
=
pluralRulesInternalProperties
;
var
localeData
=
PluralRules
.
localeData
;
const
r
=
ResolveLocale
(
"
PluralRules
"
lazyPluralRulesData
.
requestedLocales
lazyPluralRulesData
.
opt
PluralRules
.
relevantExtensionKeys
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
type
=
lazyPluralRulesData
.
type
;
internalProps
.
minimumIntegerDigits
=
lazyPluralRulesData
.
minimumIntegerDigits
;
if
(
"
minimumFractionDigits
"
in
lazyPluralRulesData
)
{
assert
(
"
maximumFractionDigits
"
in
lazyPluralRulesData
"
min
/
max
frac
digits
mismatch
"
)
;
internalProps
.
minimumFractionDigits
=
lazyPluralRulesData
.
minimumFractionDigits
;
internalProps
.
maximumFractionDigits
=
lazyPluralRulesData
.
maximumFractionDigits
;
}
if
(
"
minimumSignificantDigits
"
in
lazyPluralRulesData
)
{
assert
(
"
maximumSignificantDigits
"
in
lazyPluralRulesData
"
min
/
max
sig
digits
mismatch
"
)
;
internalProps
.
minimumSignificantDigits
=
lazyPluralRulesData
.
minimumSignificantDigits
;
internalProps
.
maximumSignificantDigits
=
lazyPluralRulesData
.
maximumSignificantDigits
;
}
internalProps
.
pluralCategories
=
null
;
return
internalProps
;
}
function
getPluralRulesInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getPluralRulesInternals
called
with
non
-
object
"
)
;
assert
(
GuardToPluralRules
(
obj
)
!
=
=
null
"
getPluralRulesInternals
called
with
non
-
PluralRules
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
PluralRules
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
return
internalProps
;
internalProps
=
resolvePluralRulesInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializePluralRules
(
pluralRules
locales
options
)
{
assert
(
IsObject
(
pluralRules
)
"
InitializePluralRules
called
with
non
-
object
"
)
;
assert
(
GuardToPluralRules
(
pluralRules
)
!
=
=
null
"
InitializePluralRules
called
with
non
-
PluralRules
"
)
;
const
lazyPluralRulesData
=
std_Object_create
(
null
)
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyPluralRulesData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
options
=
std_Object_create
(
null
)
;
else
options
=
ToObject
(
options
)
;
let
opt
=
new
Record
(
)
;
lazyPluralRulesData
.
opt
=
opt
;
let
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
const
type
=
GetOption
(
options
"
type
"
"
string
"
[
"
cardinal
"
"
ordinal
"
]
"
cardinal
"
)
;
lazyPluralRulesData
.
type
=
type
;
SetNumberFormatDigitOptions
(
lazyPluralRulesData
options
0
3
"
standard
"
)
;
initializeIntlObject
(
pluralRules
"
PluralRules
"
lazyPluralRulesData
)
;
}
function
Intl_PluralRules_supportedLocalesOf
(
locales
)
{
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
availableLocales
=
"
PluralRules
"
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_PluralRules_select
(
value
)
{
let
pluralRules
=
this
;
if
(
!
IsObject
(
pluralRules
)
|
|
(
pluralRules
=
GuardToPluralRules
(
pluralRules
)
)
=
=
=
null
)
{
return
callFunction
(
CallPluralRulesMethodIfWrapped
this
value
"
Intl_PluralRules_select
"
)
;
}
getPluralRulesInternals
(
pluralRules
)
;
let
n
=
ToNumber
(
value
)
;
return
intl_SelectPluralRule
(
pluralRules
n
)
;
}
function
Intl_PluralRules_resolvedOptions
(
)
{
var
pluralRules
=
this
;
if
(
!
IsObject
(
pluralRules
)
|
|
(
pluralRules
=
GuardToPluralRules
(
pluralRules
)
)
=
=
=
null
)
{
return
callFunction
(
CallPluralRulesMethodIfWrapped
this
"
Intl_PluralRules_resolvedOptions
"
)
;
}
var
internals
=
getPluralRulesInternals
(
pluralRules
)
;
var
result
=
{
locale
:
internals
.
locale
type
:
internals
.
type
minimumIntegerDigits
:
internals
.
minimumIntegerDigits
}
;
assert
(
hasOwn
(
"
minimumFractionDigits
"
internals
)
=
=
=
hasOwn
(
"
maximumFractionDigits
"
internals
)
"
minimumFractionDigits
is
present
iff
maximumFractionDigits
is
present
"
)
;
if
(
hasOwn
(
"
minimumFractionDigits
"
internals
)
)
{
_DefineDataProperty
(
result
"
minimumFractionDigits
"
internals
.
minimumFractionDigits
)
;
_DefineDataProperty
(
result
"
maximumFractionDigits
"
internals
.
maximumFractionDigits
)
;
}
assert
(
hasOwn
(
"
minimumSignificantDigits
"
internals
)
=
=
=
hasOwn
(
"
maximumSignificantDigits
"
internals
)
"
minimumSignificantDigits
is
present
iff
maximumSignificantDigits
is
present
"
)
;
if
(
hasOwn
(
"
minimumSignificantDigits
"
internals
)
)
{
_DefineDataProperty
(
result
"
minimumSignificantDigits
"
internals
.
minimumSignificantDigits
)
;
_DefineDataProperty
(
result
"
maximumSignificantDigits
"
internals
.
maximumSignificantDigits
)
;
}
var
internalsPluralCategories
=
internals
.
pluralCategories
;
if
(
internalsPluralCategories
=
=
=
null
)
{
internalsPluralCategories
=
intl_GetPluralCategories
(
pluralRules
)
;
internals
.
pluralCategories
=
internalsPluralCategories
;
}
var
pluralCategories
=
[
]
;
for
(
var
i
=
0
;
i
<
internalsPluralCategories
.
length
;
i
+
+
)
_DefineDataProperty
(
pluralCategories
i
internalsPluralCategories
[
i
]
)
;
_DefineDataProperty
(
result
"
pluralCategories
"
pluralCategories
)
;
return
result
;
}
