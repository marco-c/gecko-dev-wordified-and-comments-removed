var
pluralRulesInternalProperties
=
{
localeData
:
pluralRulesLocaleData
_availableLocales
:
null
availableLocales
:
function
(
)
{
var
locales
=
this
.
_availableLocales
;
if
(
locales
)
return
locales
;
locales
=
intl_PluralRules_availableLocales
(
)
;
addSpecialMissingLanguageTags
(
locales
)
;
return
(
this
.
_availableLocales
=
locales
)
;
}
relevantExtensionKeys
:
[
]
}
;
function
pluralRulesLocaleData
(
)
{
return
{
}
;
}
function
resolvePluralRulesInternals
(
lazyPluralRulesData
)
{
assert
(
IsObject
(
lazyPluralRulesData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
PluralRules
=
pluralRulesInternalProperties
;
const
r
=
ResolveLocale
(
callFunction
(
PluralRules
.
availableLocales
PluralRules
)
lazyPluralRulesData
.
requestedLocales
lazyPluralRulesData
.
opt
PluralRules
.
relevantExtensionKeys
PluralRules
.
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
type
=
lazyPluralRulesData
.
type
;
internalProps
.
pluralCategories
=
intl_GetPluralCategories
(
internalProps
.
locale
internalProps
.
type
)
;
internalProps
.
minimumIntegerDigits
=
lazyPluralRulesData
.
minimumIntegerDigits
;
internalProps
.
minimumFractionDigits
=
lazyPluralRulesData
.
minimumFractionDigits
;
internalProps
.
maximumFractionDigits
=
lazyPluralRulesData
.
maximumFractionDigits
;
if
(
"
minimumSignificantDigits
"
in
lazyPluralRulesData
)
{
assert
(
"
maximumSignificantDigits
"
in
lazyPluralRulesData
"
min
/
max
sig
digits
mismatch
"
)
;
internalProps
.
minimumSignificantDigits
=
lazyPluralRulesData
.
minimumSignificantDigits
;
internalProps
.
maximumSignificantDigits
=
lazyPluralRulesData
.
maximumSignificantDigits
;
}
return
internalProps
;
}
function
getPluralRulesInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getPluralRulesInternals
called
with
non
-
object
"
)
;
assert
(
IsPluralRules
(
obj
)
"
getPluralRulesInternals
called
with
non
-
PluralRules
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
PluralRules
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
return
internalProps
;
internalProps
=
resolvePluralRulesInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializePluralRules
(
pluralRules
locales
options
)
{
assert
(
IsObject
(
pluralRules
)
"
InitializePluralRules
called
with
non
-
object
"
)
;
assert
(
IsPluralRules
(
pluralRules
)
"
InitializePluralRules
called
with
non
-
PluralRules
"
)
;
const
lazyPluralRulesData
=
std_Object_create
(
null
)
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyPluralRulesData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
options
=
std_Object_create
(
null
)
;
else
options
=
ToObject
(
options
)
;
const
type
=
GetOption
(
options
"
type
"
"
string
"
[
"
cardinal
"
"
ordinal
"
]
"
cardinal
"
)
;
lazyPluralRulesData
.
type
=
type
;
let
opt
=
new
Record
(
)
;
lazyPluralRulesData
.
opt
=
opt
;
let
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
SetNumberFormatDigitOptions
(
lazyPluralRulesData
options
0
3
)
;
initializeIntlObject
(
pluralRules
"
PluralRules
"
lazyPluralRulesData
)
;
}
function
Intl_PluralRules_supportedLocalesOf
(
locales
)
{
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
availableLocales
=
callFunction
(
pluralRulesInternalProperties
.
availableLocales
pluralRulesInternalProperties
)
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_PluralRules_select
(
value
)
{
let
pluralRules
=
this
;
if
(
!
IsObject
(
pluralRules
)
|
|
!
IsPluralRules
(
pluralRules
)
)
ThrowTypeError
(
JSMSG_INTL_OBJECT_NOT_INITED
"
PluralRules
"
"
select
"
"
PluralRules
"
)
;
getPluralRulesInternals
(
pluralRules
)
;
let
n
=
ToNumber
(
value
)
;
return
intl_SelectPluralRule
(
pluralRules
n
)
;
}
function
Intl_PluralRules_resolvedOptions
(
)
{
if
(
!
IsObject
(
this
)
|
|
!
IsPluralRules
(
this
)
)
{
ThrowTypeError
(
JSMSG_INTL_OBJECT_NOT_INITED
"
PluralRules
"
"
resolvedOptions
"
"
PluralRules
"
)
;
}
var
internals
=
getPluralRulesInternals
(
this
)
;
var
internalsPluralCategories
=
internals
.
pluralCategories
;
var
pluralCategories
=
[
]
;
for
(
var
i
=
0
;
i
<
internalsPluralCategories
.
length
;
i
+
+
)
_DefineDataProperty
(
pluralCategories
i
internalsPluralCategories
[
i
]
)
;
var
result
=
{
locale
:
internals
.
locale
type
:
internals
.
type
pluralCategories
minimumIntegerDigits
:
internals
.
minimumIntegerDigits
minimumFractionDigits
:
internals
.
minimumFractionDigits
maximumFractionDigits
:
internals
.
maximumFractionDigits
}
;
var
optionalProperties
=
[
"
minimumSignificantDigits
"
"
maximumSignificantDigits
"
]
;
for
(
var
i
=
0
;
i
<
optionalProperties
.
length
;
i
+
+
)
{
var
p
=
optionalProperties
[
i
]
;
if
(
hasOwn
(
p
internals
)
)
_DefineDataProperty
(
result
p
internals
[
p
]
)
;
}
return
result
;
}
