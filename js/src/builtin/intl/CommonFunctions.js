#
ifdef
DEBUG
#
define
assertIsValidAndCanonicalLanguageTag
(
locale
desc
)
\
do
{
\
let
localeObj
=
parseLanguageTag
(
locale
)
;
\
assert
(
localeObj
!
=
=
null
\
{
desc
}
is
a
structurally
valid
language
tag
)
;
\
CanonicalizeLanguageTagObject
(
localeObj
)
;
\
assert
(
StringFromLanguageTagObject
(
localeObj
)
=
=
=
locale
\
{
desc
}
is
a
canonicalized
language
tag
)
;
\
}
while
(
false
)
#
else
#
define
assertIsValidAndCanonicalLanguageTag
(
locale
desc
)
;
/
/
Elided
assertion
.
#
endif
function
startOfUnicodeExtensions
(
locale
)
{
assert
(
typeof
locale
=
=
=
"
string
"
"
locale
is
a
string
"
)
;
var
start
=
callFunction
(
std_String_indexOf
locale
"
-
u
-
"
)
;
if
(
start
<
0
)
return
-
1
;
var
privateExt
=
callFunction
(
std_String_indexOf
locale
"
-
x
-
"
)
;
if
(
privateExt
>
=
0
&
&
privateExt
<
start
)
return
-
1
;
return
start
;
}
function
endOfUnicodeExtensions
(
locale
start
)
{
assert
(
typeof
locale
=
=
=
"
string
"
"
locale
is
a
string
"
)
;
assert
(
0
<
=
start
&
&
start
<
locale
.
length
"
start
is
an
index
into
locale
"
)
;
assert
(
Substring
(
locale
start
3
)
=
=
=
"
-
u
-
"
"
start
points
to
Unicode
extension
sequence
"
)
;
#
define
HYPHEN
0x2D
assert
(
std_String_fromCharCode
(
HYPHEN
)
=
=
=
"
-
"
"
code
unit
constant
should
match
the
expected
character
"
)
;
for
(
var
i
=
start
+
5
end
=
locale
.
length
-
4
;
i
<
=
end
;
i
+
+
)
{
if
(
callFunction
(
std_String_charCodeAt
locale
i
)
!
=
=
HYPHEN
)
continue
;
if
(
callFunction
(
std_String_charCodeAt
locale
i
+
2
)
=
=
=
HYPHEN
)
return
i
;
i
+
=
2
;
}
#
undef
HYPHEN
return
locale
.
length
;
}
function
removeUnicodeExtensions
(
locale
)
{
assertIsValidAndCanonicalLanguageTag
(
locale
"
locale
with
possible
Unicode
extension
"
)
;
var
start
=
startOfUnicodeExtensions
(
locale
)
;
if
(
start
<
0
)
return
locale
;
var
end
=
endOfUnicodeExtensions
(
locale
start
)
;
var
left
=
Substring
(
locale
0
start
)
;
var
right
=
Substring
(
locale
end
locale
.
length
-
end
)
;
var
combined
=
left
+
right
;
assertIsValidAndCanonicalLanguageTag
(
combined
"
the
recombined
locale
"
)
;
assert
(
startOfUnicodeExtensions
(
combined
)
<
0
"
recombination
failed
to
remove
all
Unicode
locale
extension
sequences
"
)
;
return
combined
;
}
function
getUnicodeExtensions
(
locale
)
{
assertIsValidAndCanonicalLanguageTag
(
locale
"
locale
with
Unicode
extension
"
)
;
var
start
=
startOfUnicodeExtensions
(
locale
)
;
assert
(
start
>
=
0
"
start
of
Unicode
extension
sequence
not
found
"
)
;
var
end
=
endOfUnicodeExtensions
(
locale
start
)
;
return
Substring
(
locale
start
end
-
start
)
;
}
#
define
NONE
0b00
#
define
ALPHA
0b01
#
define
DIGIT
0b10
#
define
HYPHEN
0x2D
#
define
DIGIT_ZERO
0x30
#
define
DIGIT_NINE
0x39
#
define
UPPER_A
0x41
#
define
UPPER_Z
0x5A
#
define
LOWER_A
0x61
#
define
LOWER_T
0x74
#
define
LOWER_U
0x75
#
define
LOWER_X
0x78
#
define
LOWER_Z
0x7A
#
define
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
\
if
(
!
callFunction
(
ts
.
nextToken
ts
)
)
\
return
null
;
#
ifdef
DEBUG
#
define
NEXT_TOKEN_OR_ASSERT
(
ts
)
\
if
(
!
callFunction
(
ts
.
nextToken
ts
)
)
\
assert
(
false
"
unexpected
invalid
subtag
"
)
;
#
else
#
define
NEXT_TOKEN_OR_ASSERT
(
ts
)
\
callFunction
(
ts
.
nextToken
ts
)
;
#
endif
#
define
SUBTAG_VAR_OR_RETURN_NULL
(
ts
target
)
\
{
\
target
=
Substring
(
ts
.
localeLowercase
ts
.
tokenStart
ts
.
tokenLength
)
;
\
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
\
}
#
define
SUBTAG_VAR_OR_ASSERT
(
ts
target
)
\
{
\
target
=
Substring
(
ts
.
localeLowercase
ts
.
tokenStart
ts
.
tokenLength
)
;
\
NEXT_TOKEN_OR_ASSERT
(
ts
)
\
}
function
BCP47TokenStream
(
locale
)
{
this
.
locale
=
locale
;
this
.
localeLowercase
=
callFunction
(
std_String_toLowerCase
locale
)
;
this
.
index
=
0
;
this
.
token
=
NONE
;
this
.
tokenStart
=
0
;
this
.
tokenLength
=
0
;
assert
(
std_String_fromCharCode
(
HYPHEN
)
=
=
=
"
-
"
&
&
std_String_fromCharCode
(
DIGIT_ZERO
)
=
=
=
"
0
"
&
&
std_String_fromCharCode
(
DIGIT_NINE
)
=
=
=
"
9
"
&
&
std_String_fromCharCode
(
UPPER_A
)
=
=
=
"
A
"
&
&
std_String_fromCharCode
(
UPPER_Z
)
=
=
=
"
Z
"
&
&
std_String_fromCharCode
(
LOWER_A
)
=
=
=
"
a
"
&
&
std_String_fromCharCode
(
LOWER_T
)
=
=
=
"
t
"
&
&
std_String_fromCharCode
(
LOWER_U
)
=
=
=
"
u
"
&
&
std_String_fromCharCode
(
LOWER_X
)
=
=
=
"
x
"
&
&
std_String_fromCharCode
(
LOWER_Z
)
=
=
=
"
z
"
"
code
unit
constants
should
match
the
expected
characters
"
)
;
}
MakeConstructible
(
BCP47TokenStream
{
__proto__
:
null
nextToken
:
function
(
)
{
var
type
=
NONE
;
var
{
index
locale
}
=
this
;
for
(
var
i
=
index
;
i
<
locale
.
length
;
i
+
+
)
{
var
c
=
callFunction
(
std_String_charCodeAt
locale
i
)
;
if
(
(
UPPER_A
<
=
c
&
&
c
<
=
UPPER_Z
)
|
|
(
LOWER_A
<
=
c
&
&
c
<
=
LOWER_Z
)
)
type
|
=
ALPHA
;
else
if
(
DIGIT_ZERO
<
=
c
&
&
c
<
=
DIGIT_NINE
)
type
|
=
DIGIT
;
else
if
(
c
=
=
=
HYPHEN
&
&
i
>
index
&
&
i
+
1
<
locale
.
length
)
break
;
else
return
false
;
}
this
.
token
=
type
;
this
.
tokenStart
=
index
;
this
.
tokenLength
=
i
-
index
;
this
.
index
=
i
+
1
;
return
true
;
}
isDigitAt
:
function
(
index
)
{
assert
(
0
<
=
index
&
&
index
<
this
.
tokenLength
"
must
be
an
index
into
the
current
token
"
)
;
var
c
=
callFunction
(
std_String_charCodeAt
this
.
localeLowercase
this
.
tokenStart
+
index
)
;
assert
(
!
(
c
<
=
DIGIT_NINE
)
|
|
c
>
=
DIGIT_ZERO
"
token
-
start
-
code
-
unit
<
=
'
9
'
implies
token
-
start
-
code
-
unit
is
in
'
0
'
.
.
'
9
'
"
+
"
and
because
all
digits
are
sorted
before
any
letters
"
)
;
return
c
<
=
DIGIT_NINE
;
}
singletonKey
:
function
(
)
{
assert
(
this
.
tokenLength
=
=
=
1
"
token
is
not
a
singleton
"
)
;
var
c
=
callFunction
(
std_String_charCodeAt
this
.
localeLowercase
this
.
tokenStart
)
;
assert
(
(
DIGIT_ZERO
<
=
c
&
&
c
<
=
DIGIT_NINE
)
|
|
(
LOWER_A
<
=
c
&
&
c
<
=
LOWER_Z
)
"
unexpected
code
unit
"
)
;
return
c
;
}
singletonValue
:
function
(
)
{
var
singletonStart
=
this
.
tokenStart
;
var
min
=
callFunction
(
this
.
singletonKey
this
)
=
=
=
LOWER_X
?
1
:
2
;
NEXT_TOKEN_OR_RETURN_NULL
(
this
)
;
if
(
!
(
min
<
=
this
.
tokenLength
&
&
this
.
tokenLength
<
=
8
)
)
return
null
;
do
{
NEXT_TOKEN_OR_RETURN_NULL
(
this
)
;
}
while
(
min
<
=
this
.
tokenLength
&
&
this
.
tokenLength
<
=
8
)
;
return
callFunction
(
this
.
singletonValueAt
this
singletonStart
)
;
}
singletonValueAt
:
function
(
start
)
{
var
length
=
this
.
tokenStart
-
1
-
start
;
if
(
length
<
=
2
)
return
null
;
return
Substring
(
this
.
localeLowercase
start
length
)
;
}
}
)
;
function
parseLanguageTag
(
locale
)
{
assert
(
typeof
locale
=
=
=
"
string
"
"
locale
is
a
string
"
)
;
var
ts
=
new
BCP47TokenStream
(
locale
)
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
var
language
script
region
privateuse
;
var
variants
=
[
]
;
var
extensions
=
[
]
;
if
(
ts
.
token
!
=
=
ALPHA
|
|
ts
.
tokenLength
=
=
=
1
|
|
ts
.
tokenLength
=
=
=
4
|
|
ts
.
tokenLength
>
8
)
{
return
null
;
}
assert
(
(
2
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
3
)
|
|
(
5
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
"
language
subtags
have
2
-
3
or
5
-
8
letters
"
)
;
SUBTAG_VAR_OR_RETURN_NULL
(
ts
language
)
;
if
(
ts
.
tokenLength
=
=
=
4
&
&
ts
.
token
=
=
=
ALPHA
)
{
SUBTAG_VAR_OR_RETURN_NULL
(
ts
script
)
;
script
=
callFunction
(
std_String_toUpperCase
script
[
0
]
)
+
Substring
(
script
1
script
.
length
-
1
)
;
}
if
(
(
ts
.
tokenLength
=
=
=
2
&
&
ts
.
token
=
=
=
ALPHA
)
|
|
(
ts
.
tokenLength
=
=
=
3
&
&
ts
.
token
=
=
=
DIGIT
)
)
{
SUBTAG_VAR_OR_RETURN_NULL
(
ts
region
)
;
region
=
callFunction
(
std_String_toUpperCase
region
)
;
}
while
(
(
5
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
|
|
(
ts
.
tokenLength
=
=
=
4
&
&
callFunction
(
ts
.
isDigitAt
ts
0
)
)
)
{
var
variant
;
SUBTAG_VAR_OR_RETURN_NULL
(
ts
variant
)
;
if
(
callFunction
(
ArrayIndexOf
variants
variant
)
!
=
=
-
1
)
return
null
;
_DefineDataProperty
(
variants
variants
.
length
variant
)
;
}
var
seenSingletons
=
[
]
;
while
(
ts
.
tokenLength
=
=
=
1
)
{
var
singleton
=
callFunction
(
ts
.
singletonKey
ts
)
;
if
(
singleton
=
=
=
LOWER_X
)
break
;
assert
(
!
(
UPPER_A
<
=
singleton
&
&
singleton
<
=
UPPER_Z
)
"
unexpected
upper
-
case
code
unit
"
)
;
if
(
callFunction
(
ArrayIndexOf
seenSingletons
singleton
)
!
=
=
-
1
)
return
null
;
_DefineDataProperty
(
seenSingletons
seenSingletons
.
length
singleton
)
;
var
extension
;
if
(
singleton
=
=
=
LOWER_U
)
{
var
extensionStart
=
ts
.
tokenStart
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
while
(
2
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
{
if
(
ts
.
tokenLength
=
=
=
2
&
&
callFunction
(
ts
.
isDigitAt
ts
1
)
)
return
null
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
extension
=
callFunction
(
ts
.
singletonValueAt
ts
extensionStart
)
;
}
else
if
(
singleton
=
=
=
LOWER_T
)
{
var
extensionStart
=
ts
.
tokenStart
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
if
(
ts
.
token
=
=
=
ALPHA
)
{
if
(
ts
.
tokenLength
=
=
=
1
|
|
ts
.
tokenLength
=
=
=
4
|
|
ts
.
tokenLength
>
8
)
return
null
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
if
(
ts
.
tokenLength
=
=
=
4
&
&
ts
.
token
=
=
=
ALPHA
)
{
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
if
(
(
ts
.
tokenLength
=
=
=
2
&
&
ts
.
token
=
=
=
ALPHA
)
|
|
(
ts
.
tokenLength
=
=
=
3
&
&
ts
.
token
=
=
=
DIGIT
)
)
{
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
while
(
(
5
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
|
|
(
ts
.
tokenLength
=
=
=
4
&
&
callFunction
(
ts
.
isDigitAt
ts
0
)
)
)
{
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
}
while
(
ts
.
tokenLength
=
=
=
2
)
{
if
(
callFunction
(
ts
.
isDigitAt
ts
0
)
|
|
!
callFunction
(
ts
.
isDigitAt
ts
1
)
)
{
return
null
;
}
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
if
(
!
(
3
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
)
return
null
;
do
{
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
while
(
3
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
;
}
extension
=
callFunction
(
ts
.
singletonValueAt
ts
extensionStart
)
;
}
else
{
extension
=
callFunction
(
ts
.
singletonValue
ts
)
;
}
if
(
!
extension
)
return
null
;
_DefineDataProperty
(
extensions
extensions
.
length
extension
)
;
}
if
(
ts
.
tokenLength
=
=
=
1
&
&
callFunction
(
ts
.
singletonKey
ts
)
=
=
=
LOWER_X
)
{
privateuse
=
callFunction
(
ts
.
singletonValue
ts
)
;
if
(
!
privateuse
)
return
null
;
}
if
(
ts
.
token
!
=
=
NONE
)
return
null
;
var
tagObj
=
{
language
script
region
variants
extensions
privateuse
}
;
if
(
hasOwn
(
ts
.
localeLowercase
grandfatheredMappings
)
)
updateGrandfatheredMappings
(
tagObj
)
;
return
tagObj
;
}
function
parseStandaloneLanguage
(
language
)
{
var
length
=
language
.
length
;
if
(
length
<
2
|
|
length
=
=
=
4
|
|
length
>
8
|
|
!
IsASCIIAlphaString
(
language
)
)
{
return
null
;
}
return
callFunction
(
std_String_toLowerCase
language
)
;
}
function
parseStandaloneScript
(
script
)
{
if
(
script
.
length
!
=
=
4
|
|
!
IsASCIIAlphaString
(
script
)
)
{
return
null
;
}
return
callFunction
(
std_String_toUpperCase
script
[
0
]
)
+
callFunction
(
std_String_toLowerCase
Substring
(
script
1
script
.
length
-
1
)
)
;
}
function
parseStandaloneRegion
(
region
)
{
var
length
=
region
.
length
;
if
(
(
length
!
=
=
2
|
|
!
IsASCIIAlphaString
(
region
)
)
&
&
(
length
!
=
=
3
|
|
!
IsASCIIDigitString
(
region
)
)
)
{
return
null
;
}
return
callFunction
(
std_String_toUpperCase
region
)
;
}
function
parseStandaloneUnicodeExtensionType
(
type
)
{
var
ts
=
new
BCP47TokenStream
(
type
)
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
do
{
if
(
ts
.
tokenLength
<
3
|
|
ts
.
tokenLength
>
8
)
return
null
;
NEXT_TOKEN_OR_RETURN_NULL
(
ts
)
;
}
while
(
ts
.
token
!
=
=
NONE
)
;
return
ts
.
localeLowercase
;
}
function
TransformExtensionComponents
(
extension
)
{
assert
(
typeof
extension
=
=
=
"
string
"
"
extension
is
a
String
value
"
)
;
assert
(
callFunction
(
std_String_startsWith
extension
"
t
-
"
)
"
extension
starts
with
'
t
-
'
"
)
;
var
ts
=
new
BCP47TokenStream
(
Substring
(
extension
2
extension
.
length
-
2
)
)
;
NEXT_TOKEN_OR_ASSERT
(
ts
)
;
var
localeObj
;
if
(
ts
.
token
=
=
=
ALPHA
)
{
assert
(
(
2
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
3
)
|
|
(
5
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
"
language
subtags
have
2
-
3
or
5
-
8
letters
"
)
;
var
language
;
SUBTAG_VAR_OR_ASSERT
(
ts
language
)
;
var
script
;
if
(
ts
.
tokenLength
=
=
=
4
&
&
ts
.
token
=
=
=
ALPHA
)
{
SUBTAG_VAR_OR_ASSERT
(
ts
script
)
;
script
=
callFunction
(
std_String_toUpperCase
script
[
0
]
)
+
Substring
(
script
1
script
.
length
-
1
)
;
}
var
region
;
if
(
(
ts
.
tokenLength
=
=
=
2
&
&
ts
.
token
=
=
=
ALPHA
)
|
|
(
ts
.
tokenLength
=
=
=
3
&
&
ts
.
token
=
=
=
DIGIT
)
)
{
SUBTAG_VAR_OR_ASSERT
(
ts
region
)
;
region
=
callFunction
(
std_String_toUpperCase
region
)
;
}
var
variants
=
[
]
;
while
(
(
5
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
|
|
(
ts
.
tokenLength
=
=
=
4
&
&
callFunction
(
ts
.
isDigitAt
ts
0
)
)
)
{
var
variant
;
SUBTAG_VAR_OR_ASSERT
(
ts
variant
)
;
_DefineDataProperty
(
variants
variants
.
length
variant
)
;
}
localeObj
=
{
language
script
region
variants
extensions
:
[
]
privateuse
:
undefined
}
;
}
var
fields
=
[
]
;
while
(
ts
.
tokenLength
=
=
=
2
)
{
assert
(
!
callFunction
(
ts
.
isDigitAt
ts
0
)
&
&
callFunction
(
ts
.
isDigitAt
ts
1
)
"
unexpected
invalid
tkey
subtag
"
)
;
var
key
;
SUBTAG_VAR_OR_ASSERT
(
ts
key
)
;
assert
(
3
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
"
unexpected
invalid
tvalue
subtag
"
)
;
var
value
;
SUBTAG_VAR_OR_ASSERT
(
ts
value
)
;
while
(
3
<
=
ts
.
tokenLength
&
&
ts
.
tokenLength
<
=
8
)
{
var
part
;
SUBTAG_VAR_OR_ASSERT
(
ts
part
)
;
value
+
=
"
-
"
+
part
;
}
_DefineDataProperty
(
fields
fields
.
length
{
key
value
}
)
;
}
assert
(
ts
.
token
=
=
=
NONE
"
unexpected
trailing
characters
in
promised
-
to
-
be
-
valid
transform
extension
"
)
;
return
{
locale
:
localeObj
fields
}
;
}
#
undef
NONE
#
undef
ALPHA
#
undef
DIGIT
#
undef
HYPHEN
#
undef
DIGIT_ZERO
#
undef
DIGIT_NINE
#
undef
UPPER_A
#
undef
UPPER_Z
#
undef
LOWER_A
#
undef
LOWER_T
#
undef
LOWER_U
#
undef
LOWER_X
#
undef
LOWER_Z
#
undef
SUBTAG_VAR_OR_ASSERT
#
undef
SUBTAG_VAR_OR_RETURN_NULL
#
undef
NEXT_TOKEN_OR_ASSERT
#
undef
NEXT_TOKEN_OR_RETURN_NULL
function
IsStructurallyValidLanguageTag
(
locale
)
{
return
parseLanguageTag
(
locale
)
!
=
=
null
;
}
function
CanonicalizeLanguageTagObject
(
localeObj
)
{
assert
(
IsObject
(
localeObj
)
"
CanonicalizeLanguageTagObject
"
)
;
#
ifdef
DEBUG
function
IsLowerCase
(
s
)
{
return
s
=
=
=
callFunction
(
std_String_toLowerCase
s
)
;
}
function
IsUpperCase
(
s
)
{
return
s
=
=
=
callFunction
(
std_String_toUpperCase
s
)
;
}
function
IsTitleCase
(
s
)
{
assert
(
s
.
length
>
0
"
unexpected
empy
string
"
)
;
var
r
=
callFunction
(
std_String_toUpperCase
s
[
0
]
)
+
callFunction
(
std_String_toLowerCase
Substring
(
s
1
s
.
length
-
1
)
)
;
return
s
=
=
=
r
;
}
#
endif
assert
(
localeObj
.
script
=
=
=
undefined
|
|
IsTitleCase
(
localeObj
.
script
)
"
If
present
script
subtag
is
in
title
case
"
)
;
assert
(
localeObj
.
region
=
=
=
undefined
|
|
IsUpperCase
(
localeObj
.
region
)
"
If
present
region
subtag
is
in
upper
case
"
)
;
assert
(
IsLowerCase
(
localeObj
.
language
)
"
language
subtag
is
in
lower
case
"
)
;
assert
(
callFunction
(
ArrayEvery
localeObj
.
variants
IsLowerCase
)
"
variant
subtags
are
in
lower
case
"
)
;
assert
(
callFunction
(
ArrayEvery
localeObj
.
extensions
IsLowerCase
)
"
extension
subtags
are
in
lower
case
"
)
;
assert
(
localeObj
.
privateuse
=
=
=
undefined
|
|
IsLowerCase
(
localeObj
.
privateuse
)
"
If
present
privateuse
subtag
is
in
lower
case
"
)
;
var
variants
=
localeObj
.
variants
;
if
(
variants
.
length
>
0
)
{
callFunction
(
ArraySort
variants
)
;
}
var
extensions
=
localeObj
.
extensions
;
if
(
extensions
.
length
>
0
)
{
callFunction
(
ArraySort
extensions
)
;
for
(
var
i
=
0
;
i
<
extensions
.
length
;
i
+
+
)
{
var
ext
=
extensions
[
i
]
;
assert
(
IsLowerCase
(
ext
)
"
extension
subtags
must
be
in
lower
-
case
"
)
;
assert
(
ext
[
1
]
=
=
=
"
-
"
"
extension
subtags
start
with
a
singleton
"
)
;
if
(
ext
[
0
]
=
=
=
"
u
"
)
{
var
{
attributes
keywords
}
=
UnicodeExtensionComponents
(
ext
)
;
extensions
[
i
]
=
CanonicalizeUnicodeExtension
(
attributes
keywords
false
)
;
}
if
(
ext
[
0
]
=
=
=
"
t
"
)
{
var
{
locale
fields
}
=
TransformExtensionComponents
(
ext
)
;
extensions
[
i
]
=
CanonicalizeTransformExtension
(
locale
fields
)
;
}
}
}
updateLocaleIdMappings
(
localeObj
)
;
}
function
UnicodeExtensionComponents
(
extension
)
{
assert
(
typeof
extension
=
=
=
"
string
"
"
extension
is
a
String
value
"
)
;
var
attributes
=
[
]
;
var
keywords
=
[
]
;
var
isKeyword
=
false
;
var
size
=
extension
.
length
;
assert
(
callFunction
(
std_String_startsWith
extension
"
u
-
"
)
"
extension
starts
with
'
u
-
'
"
)
;
var
k
=
2
;
var
key
value
;
while
(
k
<
size
)
{
var
e
=
callFunction
(
std_String_indexOf
extension
"
-
"
k
)
;
var
len
=
(
e
<
0
?
size
:
e
)
-
k
;
var
subtag
=
Substring
(
extension
k
len
)
;
if
(
!
isKeyword
)
{
if
(
len
!
=
=
2
)
_DefineDataProperty
(
attributes
attributes
.
length
subtag
)
;
}
else
{
if
(
len
=
=
=
2
)
{
_DefineDataProperty
(
keywords
keywords
.
length
{
key
value
}
)
;
}
else
{
if
(
value
!
=
=
"
"
)
value
+
=
"
-
"
;
value
+
=
subtag
;
}
}
if
(
len
=
=
=
2
)
{
isKeyword
=
true
;
key
=
subtag
;
value
=
"
"
;
}
k
+
=
len
+
1
;
}
if
(
isKeyword
)
{
_DefineDataProperty
(
keywords
keywords
.
length
{
key
value
}
)
;
}
return
{
attributes
keywords
}
;
}
function
CanonicalizeUnicodeExtension
(
attributes
keywords
canonicalForm
)
{
assert
(
attributes
.
length
>
0
|
|
keywords
.
length
>
0
"
unexpected
empty
Unicode
locale
extension
components
"
)
;
if
(
attributes
.
length
>
1
)
callFunction
(
ArraySort
attributes
)
;
if
(
keywords
.
length
>
1
)
{
function
UnicodeKeySort
(
left
right
)
{
var
leftKey
=
left
.
key
;
var
rightKey
=
right
.
key
;
assert
(
leftKey
.
length
=
=
=
2
"
left
key
is
a
Unicode
key
"
)
;
assert
(
rightKey
.
length
=
=
=
2
"
right
key
is
a
Unicode
key
"
)
;
var
diff
=
callFunction
(
std_String_charCodeAt
leftKey
0
)
-
callFunction
(
std_String_charCodeAt
rightKey
0
)
;
if
(
diff
=
=
=
0
)
{
diff
=
callFunction
(
std_String_charCodeAt
leftKey
1
)
-
callFunction
(
std_String_charCodeAt
rightKey
1
)
;
}
return
diff
;
}
callFunction
(
ArraySort
keywords
UnicodeKeySort
)
;
}
var
extension
=
"
u
"
;
for
(
var
i
=
0
;
i
<
attributes
.
length
;
i
+
+
)
{
var
attribute
=
attributes
[
i
]
;
assert
(
attribute
=
=
=
callFunction
(
std_String_toLowerCase
attribute
)
"
Attributes
are
already
canonicalized
to
lower
case
"
)
;
if
(
canonicalForm
&
&
i
>
0
&
&
attributes
[
i
-
1
]
=
=
=
attribute
)
{
continue
;
}
extension
+
=
"
-
"
+
attributes
[
i
]
;
}
for
(
var
i
=
0
;
i
<
keywords
.
length
;
i
+
+
)
{
var
{
key
value
}
=
keywords
[
i
]
;
assert
(
key
=
=
=
callFunction
(
std_String_toLowerCase
key
)
&
&
value
=
=
=
callFunction
(
std_String_toLowerCase
value
)
"
Keywords
are
already
canonicalized
to
lower
case
"
)
;
if
(
canonicalForm
&
&
i
>
0
&
&
keywords
[
i
-
1
]
.
key
=
=
=
key
)
{
continue
;
}
extension
+
=
"
-
"
+
key
;
if
(
canonicalForm
&
&
hasOwn
(
key
deprecatedUnicodeExtensionTypes
)
&
&
hasOwn
(
value
deprecatedUnicodeExtensionTypes
[
key
]
)
)
{
value
=
deprecatedUnicodeExtensionTypes
[
key
]
[
value
]
;
assert
(
value
=
=
=
callFunction
(
std_String_toLowerCase
value
)
"
Preferred
keyword
value
is
already
in
lower
case
"
)
;
}
if
(
value
!
=
=
"
"
&
&
value
!
=
=
"
true
"
)
extension
+
=
"
-
"
+
value
;
}
return
extension
;
}
function
CanonicalizeTransformExtension
(
localeObj
fields
)
{
assert
(
localeObj
!
=
=
undefined
|
|
fields
.
length
>
0
"
unexpected
empty
Transform
locale
extension
components
"
)
;
if
(
fields
.
length
>
0
)
{
function
TransformKeySort
(
left
right
)
{
var
leftKey
=
left
.
key
;
var
rightKey
=
right
.
key
;
assert
(
leftKey
.
length
=
=
=
2
"
left
key
is
a
Transform
key
"
)
;
assert
(
rightKey
.
length
=
=
=
2
"
right
key
is
a
Transform
key
"
)
;
var
diff
=
callFunction
(
std_String_charCodeAt
leftKey
0
)
-
callFunction
(
std_String_charCodeAt
rightKey
0
)
;
if
(
diff
=
=
=
0
)
{
diff
=
callFunction
(
std_String_charCodeAt
leftKey
1
)
-
callFunction
(
std_String_charCodeAt
rightKey
1
)
;
}
return
diff
;
}
callFunction
(
ArraySort
fields
TransformKeySort
)
;
}
var
extension
=
"
t
"
;
if
(
localeObj
!
=
=
undefined
)
{
var
localeStr
=
StringFromLanguageTagObject
(
localeObj
)
;
extension
+
=
"
-
"
+
callFunction
(
std_String_toLowerCase
localeStr
)
;
}
for
(
var
i
=
0
;
i
<
fields
.
length
;
i
+
+
)
{
var
{
key
value
}
=
fields
[
i
]
;
extension
+
=
"
-
"
+
key
+
"
-
"
+
value
;
}
return
extension
;
}
function
CanonicalizeLanguageTag
(
locale
)
{
var
localeObj
=
parseLanguageTag
(
locale
)
;
assert
(
localeObj
!
=
=
null
"
CanonicalizeLanguageTag
"
)
;
CanonicalizeLanguageTagObject
(
localeObj
)
;
return
StringFromLanguageTagObject
(
localeObj
)
;
}
function
StringFromLanguageTagObject
(
localeObj
)
{
assert
(
IsObject
(
localeObj
)
"
StringFromLanguageTagObject
"
)
;
var
{
language
script
region
variants
extensions
privateuse
}
=
localeObj
;
var
canonical
=
language
;
if
(
script
!
=
=
undefined
)
canonical
+
=
"
-
"
+
script
;
if
(
region
!
=
=
undefined
)
canonical
+
=
"
-
"
+
region
;
if
(
variants
.
length
>
0
)
canonical
+
=
"
-
"
+
callFunction
(
std_Array_join
variants
"
-
"
)
;
if
(
extensions
.
length
>
0
)
canonical
+
=
"
-
"
+
callFunction
(
std_Array_join
extensions
"
-
"
)
;
if
(
privateuse
!
=
=
undefined
)
canonical
+
=
"
-
"
+
privateuse
;
return
canonical
;
}
function
IsASCIIAlphaString
(
s
)
{
assert
(
typeof
s
=
=
=
"
string
"
"
IsASCIIAlphaString
"
)
;
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
callFunction
(
std_String_charCodeAt
s
i
)
;
if
(
!
(
(
0x41
<
=
c
&
&
c
<
=
0x5A
)
|
|
(
0x61
<
=
c
&
&
c
<
=
0x7A
)
)
)
return
false
;
}
return
true
;
}
function
IsASCIIDigitString
(
s
)
{
assert
(
typeof
s
=
=
=
"
string
"
"
IsASCIIDigitString
"
)
;
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
callFunction
(
std_String_charCodeAt
s
i
)
;
if
(
!
(
0x30
<
=
c
&
&
c
<
=
0x39
)
)
return
false
;
}
return
true
;
}
function
ValidateAndCanonicalizeLanguageTag
(
locale
)
{
assert
(
typeof
locale
=
=
=
"
string
"
"
ValidateAndCanonicalizeLanguageTag
"
)
;
if
(
locale
.
length
=
=
=
2
|
|
locale
.
length
=
=
=
3
)
{
if
(
!
IsASCIIAlphaString
(
locale
)
)
ThrowRangeError
(
JSMSG_INVALID_LANGUAGE_TAG
locale
)
;
assert
(
IsStructurallyValidLanguageTag
(
locale
)
"
2
*
3ALPHA
is
a
valid
language
tag
"
)
;
locale
=
callFunction
(
std_String_toLowerCase
locale
)
;
if
(
!
hasOwn
(
locale
complexLanguageMappings
)
)
{
locale
=
hasOwn
(
locale
languageMappings
)
?
languageMappings
[
locale
]
:
locale
;
assert
(
locale
=
=
=
CanonicalizeLanguageTag
(
locale
)
"
expected
same
canonicalization
"
)
;
return
locale
;
}
}
var
localeObj
=
parseLanguageTag
(
locale
)
;
if
(
localeObj
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_LANGUAGE_TAG
locale
)
;
CanonicalizeLanguageTagObject
(
localeObj
)
return
StringFromLanguageTagObject
(
localeObj
)
;
}
function
lastDitchLocale
(
)
{
return
"
en
-
GB
"
;
}
var
oldStyleLanguageTagMappings
=
{
"
pa
-
PK
"
:
"
pa
-
Arab
-
PK
"
"
zh
-
CN
"
:
"
zh
-
Hans
-
CN
"
"
zh
-
HK
"
:
"
zh
-
Hant
-
HK
"
"
zh
-
SG
"
:
"
zh
-
Hans
-
SG
"
"
zh
-
TW
"
:
"
zh
-
Hant
-
TW
"
}
;
var
localeCandidateCache
=
{
runtimeDefaultLocale
:
undefined
candidateDefaultLocale
:
undefined
}
;
var
localeCache
=
{
runtimeDefaultLocale
:
undefined
defaultLocale
:
undefined
}
;
function
DefaultLocaleIgnoringAvailableLocales
(
)
{
const
runtimeDefaultLocale
=
RuntimeDefaultLocale
(
)
;
if
(
runtimeDefaultLocale
=
=
=
localeCandidateCache
.
runtimeDefaultLocale
)
return
localeCandidateCache
.
candidateDefaultLocale
;
var
candidate
=
parseLanguageTag
(
runtimeDefaultLocale
)
;
if
(
candidate
=
=
=
null
)
{
candidate
=
lastDitchLocale
(
)
;
}
else
{
CanonicalizeLanguageTagObject
(
candidate
)
;
candidate
=
StringFromLanguageTagObject
(
candidate
)
;
candidate
=
removeUnicodeExtensions
(
candidate
)
;
if
(
hasOwn
(
candidate
oldStyleLanguageTagMappings
)
)
candidate
=
oldStyleLanguageTagMappings
[
candidate
]
;
}
localeCandidateCache
.
candidateDefaultLocale
=
candidate
;
localeCandidateCache
.
runtimeDefaultLocale
=
runtimeDefaultLocale
;
assertIsValidAndCanonicalLanguageTag
(
candidate
"
the
candidate
locale
"
)
;
assert
(
startOfUnicodeExtensions
(
candidate
)
<
0
"
the
candidate
must
not
contain
a
Unicode
extension
sequence
"
)
;
return
candidate
;
}
function
DefaultLocale
(
)
{
if
(
IsRuntimeDefaultLocale
(
localeCache
.
runtimeDefaultLocale
)
)
return
localeCache
.
defaultLocale
;
var
runtimeDefaultLocale
=
RuntimeDefaultLocale
(
)
;
var
candidate
=
DefaultLocaleIgnoringAvailableLocales
(
)
;
var
locale
;
if
(
BestAvailableLocaleIgnoringDefault
(
callFunction
(
collatorInternalProperties
.
availableLocales
collatorInternalProperties
)
candidate
)
&
&
BestAvailableLocaleIgnoringDefault
(
callFunction
(
numberFormatInternalProperties
.
availableLocales
numberFormatInternalProperties
)
candidate
)
&
&
BestAvailableLocaleIgnoringDefault
(
callFunction
(
dateTimeFormatInternalProperties
.
availableLocales
dateTimeFormatInternalProperties
)
candidate
)
)
{
locale
=
candidate
;
}
else
{
locale
=
lastDitchLocale
(
)
;
}
assertIsValidAndCanonicalLanguageTag
(
locale
"
the
computed
default
locale
"
)
;
assert
(
startOfUnicodeExtensions
(
locale
)
<
0
"
the
computed
default
locale
must
not
contain
a
Unicode
extension
sequence
"
)
;
localeCache
.
defaultLocale
=
locale
;
localeCache
.
runtimeDefaultLocale
=
runtimeDefaultLocale
;
return
locale
;
}
function
addSpecialMissingLanguageTags
(
availableLocales
)
{
var
oldStyleLocales
=
std_Object_getOwnPropertyNames
(
oldStyleLanguageTagMappings
)
;
for
(
var
i
=
0
;
i
<
oldStyleLocales
.
length
;
i
+
+
)
{
var
oldStyleLocale
=
oldStyleLocales
[
i
]
;
if
(
availableLocales
[
oldStyleLanguageTagMappings
[
oldStyleLocale
]
]
)
availableLocales
[
oldStyleLocale
]
=
true
;
}
var
lastDitch
=
lastDitchLocale
(
)
;
assert
(
lastDitch
=
=
=
"
en
-
GB
"
&
&
availableLocales
.
en
"
shouldn
'
t
be
a
need
to
add
every
locale
implied
by
the
last
-
"
+
"
ditch
locale
merely
just
the
last
-
ditch
locale
"
)
;
availableLocales
[
lastDitch
]
=
true
;
}
function
CanonicalizeLocaleList
(
locales
)
{
if
(
locales
=
=
=
undefined
)
return
[
]
;
if
(
typeof
locales
=
=
=
"
string
"
)
return
[
ValidateAndCanonicalizeLanguageTag
(
locales
)
]
;
var
unboxedLocale
=
callFunction
(
unboxLocaleOrNull
locales
)
;
if
(
unboxedLocale
!
=
=
null
)
return
[
StringFromLanguageTagObject
(
unboxedLocale
.
locale
)
]
var
seen
=
[
]
;
var
O
=
ToObject
(
locales
)
;
var
len
=
ToLength
(
O
.
length
)
;
var
k
=
0
;
while
(
k
<
len
)
{
if
(
k
in
O
)
{
var
kValue
=
O
[
k
]
;
if
(
!
(
typeof
kValue
=
=
=
"
string
"
|
|
IsObject
(
kValue
)
)
)
ThrowTypeError
(
JSMSG_INVALID_LOCALES_ELEMENT
)
;
var
unboxedLocale
=
callFunction
(
unboxLocaleOrNull
kValue
)
;
var
tag
=
unboxedLocale
!
=
=
null
?
StringFromLanguageTagObject
(
unboxedLocale
.
locale
)
:
ValidateAndCanonicalizeLanguageTag
(
ToString
(
kValue
)
)
;
if
(
callFunction
(
ArrayIndexOf
seen
tag
)
=
=
=
-
1
)
_DefineDataProperty
(
seen
seen
.
length
tag
)
;
}
k
+
+
;
}
return
seen
;
}
function
BestAvailableLocaleHelper
(
availableLocales
locale
considerDefaultLocale
)
{
assertIsValidAndCanonicalLanguageTag
(
locale
"
BestAvailableLocale
locale
"
)
;
assert
(
startOfUnicodeExtensions
(
locale
)
<
0
"
locale
must
contain
no
Unicode
extensions
"
)
;
var
defaultLocale
;
if
(
considerDefaultLocale
)
defaultLocale
=
DefaultLocale
(
)
;
var
candidate
=
locale
;
while
(
true
)
{
if
(
availableLocales
[
candidate
]
)
return
candidate
;
if
(
considerDefaultLocale
&
&
candidate
.
length
<
=
defaultLocale
.
length
)
{
if
(
candidate
=
=
=
defaultLocale
)
return
candidate
;
if
(
callFunction
(
std_String_startsWith
defaultLocale
candidate
+
"
-
"
)
)
return
candidate
;
}
var
pos
=
callFunction
(
std_String_lastIndexOf
candidate
"
-
"
)
;
if
(
pos
=
=
=
-
1
)
return
undefined
;
if
(
pos
>
=
2
&
&
candidate
[
pos
-
2
]
=
=
=
"
-
"
)
pos
-
=
2
;
candidate
=
callFunction
(
String_substring
candidate
0
pos
)
;
}
}
function
BestAvailableLocale
(
availableLocales
locale
)
{
return
BestAvailableLocaleHelper
(
availableLocales
locale
true
)
;
}
function
BestAvailableLocaleIgnoringDefault
(
availableLocales
locale
)
{
return
BestAvailableLocaleHelper
(
availableLocales
locale
false
)
;
}
function
LookupMatcher
(
availableLocales
requestedLocales
)
{
var
result
=
new
Record
(
)
;
for
(
var
i
=
0
;
i
<
requestedLocales
.
length
;
i
+
+
)
{
var
locale
=
requestedLocales
[
i
]
;
var
noExtensionsLocale
=
removeUnicodeExtensions
(
locale
)
;
var
availableLocale
=
BestAvailableLocale
(
availableLocales
noExtensionsLocale
)
;
if
(
availableLocale
!
=
=
undefined
)
{
result
.
locale
=
availableLocale
;
if
(
locale
!
=
=
noExtensionsLocale
)
result
.
extension
=
getUnicodeExtensions
(
locale
)
;
return
result
;
}
}
result
.
locale
=
DefaultLocale
(
)
;
return
result
;
}
function
BestFitMatcher
(
availableLocales
requestedLocales
)
{
return
LookupMatcher
(
availableLocales
requestedLocales
)
;
}
function
UnicodeExtensionValue
(
extension
key
)
{
assert
(
typeof
extension
=
=
=
"
string
"
"
extension
is
a
string
value
"
)
;
assert
(
callFunction
(
std_String_startsWith
extension
"
-
u
-
"
)
&
&
getUnicodeExtensions
(
"
und
"
+
extension
)
=
=
=
extension
"
extension
is
a
Unicode
extension
subtag
"
)
;
assert
(
typeof
key
=
=
=
"
string
"
"
key
is
a
string
value
"
)
;
assert
(
key
.
length
=
=
=
2
"
key
is
a
Unicode
extension
key
subtag
"
)
;
var
size
=
extension
.
length
;
var
searchValue
=
"
-
"
+
key
+
"
-
"
;
var
pos
=
callFunction
(
std_String_indexOf
extension
searchValue
)
;
if
(
pos
!
=
=
-
1
)
{
var
start
=
pos
+
4
;
var
end
=
start
;
var
k
=
start
;
while
(
true
)
{
var
e
=
callFunction
(
std_String_indexOf
extension
"
-
"
k
)
;
var
len
=
e
=
=
=
-
1
?
size
-
k
:
e
-
k
;
if
(
len
=
=
=
2
)
break
;
if
(
e
=
=
=
-
1
)
{
end
=
size
;
break
;
}
end
=
e
;
k
=
e
+
1
;
}
return
callFunction
(
String_substring
extension
start
end
)
;
}
searchValue
=
"
-
"
+
key
;
if
(
callFunction
(
std_String_endsWith
extension
searchValue
)
)
return
"
"
;
}
function
ResolveLocale
(
availableLocales
requestedLocales
options
relevantExtensionKeys
localeData
)
{
var
matcher
=
options
.
localeMatcher
;
var
r
=
(
matcher
=
=
=
"
lookup
"
)
?
LookupMatcher
(
availableLocales
requestedLocales
)
:
BestFitMatcher
(
availableLocales
requestedLocales
)
;
var
foundLocale
=
r
.
locale
;
var
extension
=
r
.
extension
;
var
result
=
new
Record
(
)
;
result
.
dataLocale
=
foundLocale
;
var
supportedExtension
=
"
-
u
"
;
var
localeDataProvider
=
localeData
(
)
;
for
(
var
i
=
0
;
i
<
relevantExtensionKeys
.
length
;
i
+
+
)
{
var
key
=
relevantExtensionKeys
[
i
]
;
var
keyLocaleData
=
undefined
;
var
value
=
undefined
;
var
supportedExtensionAddition
=
"
"
;
if
(
extension
!
=
=
undefined
)
{
var
requestedValue
=
UnicodeExtensionValue
(
extension
key
)
;
if
(
requestedValue
!
=
=
undefined
)
{
keyLocaleData
=
callFunction
(
localeDataProvider
[
key
]
null
foundLocale
)
;
if
(
requestedValue
!
=
=
"
"
)
{
if
(
callFunction
(
ArrayIndexOf
keyLocaleData
requestedValue
)
!
=
=
-
1
)
{
value
=
requestedValue
;
supportedExtensionAddition
=
"
-
"
+
key
+
"
-
"
+
value
;
}
}
else
{
if
(
callFunction
(
ArrayIndexOf
keyLocaleData
"
true
"
)
!
=
=
-
1
)
{
value
=
"
true
"
;
supportedExtensionAddition
=
"
-
"
+
key
;
}
}
}
}
var
optionsValue
=
options
[
key
]
;
assert
(
typeof
optionsValue
=
=
=
"
string
"
|
|
optionsValue
=
=
=
undefined
|
|
optionsValue
=
=
=
null
"
unexpected
type
for
options
value
"
)
;
if
(
optionsValue
!
=
=
undefined
&
&
optionsValue
!
=
=
value
)
{
if
(
keyLocaleData
=
=
=
undefined
)
keyLocaleData
=
callFunction
(
localeDataProvider
[
key
]
null
foundLocale
)
;
if
(
callFunction
(
ArrayIndexOf
keyLocaleData
optionsValue
)
!
=
=
-
1
)
{
value
=
optionsValue
;
supportedExtensionAddition
=
"
"
;
}
}
if
(
value
=
=
=
undefined
)
{
value
=
keyLocaleData
=
=
=
undefined
?
callFunction
(
localeDataProvider
.
default
[
key
]
null
foundLocale
)
:
keyLocaleData
[
0
]
;
}
assert
(
typeof
value
=
=
=
"
string
"
|
|
value
=
=
=
null
"
unexpected
locale
data
value
"
)
;
result
[
key
]
=
value
;
supportedExtension
+
=
supportedExtensionAddition
;
}
if
(
supportedExtension
.
length
>
2
)
{
assert
(
!
callFunction
(
std_String_startsWith
foundLocale
"
x
-
"
)
"
unexpected
privateuse
-
only
locale
returned
from
ICU
"
)
;
var
privateIndex
=
callFunction
(
std_String_indexOf
foundLocale
"
-
x
-
"
)
;
if
(
privateIndex
=
=
=
-
1
)
{
foundLocale
+
=
supportedExtension
;
}
else
{
var
preExtension
=
callFunction
(
String_substring
foundLocale
0
privateIndex
)
;
var
postExtension
=
callFunction
(
String_substring
foundLocale
privateIndex
)
;
foundLocale
=
preExtension
+
supportedExtension
+
postExtension
;
}
assertIsValidAndCanonicalLanguageTag
(
foundLocale
"
locale
after
concatenation
"
)
;
}
result
.
locale
=
foundLocale
;
return
result
;
}
function
LookupSupportedLocales
(
availableLocales
requestedLocales
)
{
var
subset
=
[
]
;
for
(
var
i
=
0
;
i
<
requestedLocales
.
length
;
i
+
+
)
{
var
locale
=
requestedLocales
[
i
]
;
var
noExtensionsLocale
=
removeUnicodeExtensions
(
locale
)
;
var
availableLocale
=
BestAvailableLocale
(
availableLocales
noExtensionsLocale
)
;
if
(
availableLocale
!
=
=
undefined
)
_DefineDataProperty
(
subset
subset
.
length
locale
)
;
}
return
subset
;
}
function
BestFitSupportedLocales
(
availableLocales
requestedLocales
)
{
return
LookupSupportedLocales
(
availableLocales
requestedLocales
)
;
}
function
SupportedLocales
(
availableLocales
requestedLocales
options
)
{
var
matcher
;
if
(
options
!
=
=
undefined
)
{
options
=
ToObject
(
options
)
;
matcher
=
options
.
localeMatcher
;
if
(
matcher
!
=
=
undefined
)
{
matcher
=
ToString
(
matcher
)
;
if
(
matcher
!
=
=
"
lookup
"
&
&
matcher
!
=
=
"
best
fit
"
)
ThrowRangeError
(
JSMSG_INVALID_LOCALE_MATCHER
matcher
)
;
}
}
return
(
matcher
=
=
=
undefined
|
|
matcher
=
=
=
"
best
fit
"
)
?
BestFitSupportedLocales
(
availableLocales
requestedLocales
)
:
LookupSupportedLocales
(
availableLocales
requestedLocales
)
;
}
function
GetOption
(
options
property
type
values
fallback
)
{
var
value
=
options
[
property
]
;
if
(
value
!
=
=
undefined
)
{
if
(
type
=
=
=
"
boolean
"
)
value
=
ToBoolean
(
value
)
;
else
if
(
type
=
=
=
"
string
"
)
value
=
ToString
(
value
)
;
else
assert
(
false
"
GetOption
"
)
;
if
(
values
!
=
=
undefined
&
&
callFunction
(
ArrayIndexOf
values
value
)
=
=
=
-
1
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
property
value
)
;
return
value
;
}
return
fallback
;
}
function
DefaultNumberOption
(
value
minimum
maximum
fallback
)
{
assert
(
typeof
minimum
=
=
=
"
number
"
&
&
(
minimum
|
0
)
=
=
=
minimum
"
DefaultNumberOption
"
)
;
assert
(
typeof
maximum
=
=
=
"
number
"
&
&
(
maximum
|
0
)
=
=
=
maximum
"
DefaultNumberOption
"
)
;
assert
(
typeof
fallback
=
=
=
"
number
"
&
&
(
fallback
|
0
)
=
=
=
fallback
"
DefaultNumberOption
"
)
;
assert
(
minimum
<
=
fallback
&
&
fallback
<
=
maximum
"
DefaultNumberOption
"
)
;
if
(
value
!
=
=
undefined
)
{
value
=
ToNumber
(
value
)
;
if
(
Number_isNaN
(
value
)
|
|
value
<
minimum
|
|
value
>
maximum
)
ThrowRangeError
(
JSMSG_INVALID_DIGITS_VALUE
value
)
;
return
std_Math_floor
(
value
)
|
0
;
}
return
fallback
;
}
function
GetNumberOption
(
options
property
minimum
maximum
fallback
)
{
return
DefaultNumberOption
(
options
[
property
]
minimum
maximum
fallback
)
;
}
var
intlFallbackSymbolHolder
=
{
value
:
undefined
}
;
function
intlFallbackSymbol
(
)
{
var
fallbackSymbol
=
intlFallbackSymbolHolder
.
value
;
if
(
!
fallbackSymbol
)
{
fallbackSymbol
=
std_Symbol
(
"
IntlLegacyConstructedSymbol
"
)
;
intlFallbackSymbolHolder
.
value
=
fallbackSymbol
;
}
return
fallbackSymbol
;
}
function
initializeIntlObject
(
obj
type
lazyData
)
{
assert
(
IsObject
(
obj
)
"
Non
-
object
passed
to
initializeIntlObject
"
)
;
assert
(
(
type
=
=
=
"
Collator
"
&
&
GuardToCollator
(
obj
)
!
=
=
null
)
|
|
(
type
=
=
=
"
DateTimeFormat
"
&
&
GuardToDateTimeFormat
(
obj
)
!
=
=
null
)
|
|
(
type
=
=
=
"
NumberFormat
"
&
&
GuardToNumberFormat
(
obj
)
!
=
=
null
)
|
|
(
type
=
=
=
"
PluralRules
"
&
&
GuardToPluralRules
(
obj
)
!
=
=
null
)
|
|
(
type
=
=
=
"
RelativeTimeFormat
"
&
&
GuardToRelativeTimeFormat
(
obj
)
!
=
=
null
)
"
type
must
match
the
object
'
s
class
"
)
;
assert
(
IsObject
(
lazyData
)
"
non
-
object
lazy
data
"
)
;
var
internals
=
std_Object_create
(
null
)
;
internals
.
type
=
type
;
internals
.
lazyData
=
lazyData
;
internals
.
internalProps
=
null
;
assert
(
UnsafeGetReservedSlot
(
obj
INTL_INTERNALS_OBJECT_SLOT
)
=
=
=
null
"
Internal
slot
already
initialized
?
"
)
;
UnsafeSetReservedSlot
(
obj
INTL_INTERNALS_OBJECT_SLOT
internals
)
;
}
function
setInternalProperties
(
internals
internalProps
)
{
assert
(
IsObject
(
internals
.
lazyData
)
"
lazy
data
must
exist
already
"
)
;
assert
(
IsObject
(
internalProps
)
"
internalProps
argument
should
be
an
object
"
)
;
internals
.
internalProps
=
internalProps
;
internals
.
lazyData
=
null
;
}
function
maybeInternalProperties
(
internals
)
{
assert
(
IsObject
(
internals
)
"
non
-
object
passed
to
maybeInternalProperties
"
)
;
var
lazyData
=
internals
.
lazyData
;
if
(
lazyData
)
return
null
;
assert
(
IsObject
(
internals
.
internalProps
)
"
missing
lazy
data
and
computed
internals
"
)
;
return
internals
.
internalProps
;
}
function
getIntlObjectInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getIntlObjectInternals
called
with
non
-
Object
"
)
;
assert
(
GuardToCollator
(
obj
)
!
=
=
null
|
|
GuardToDateTimeFormat
(
obj
)
!
=
=
null
|
|
GuardToNumberFormat
(
obj
)
!
=
=
null
|
|
GuardToPluralRules
(
obj
)
!
=
=
null
|
|
GuardToRelativeTimeFormat
(
obj
)
!
=
=
null
"
getIntlObjectInternals
called
with
non
-
Intl
object
"
)
;
var
internals
=
UnsafeGetReservedSlot
(
obj
INTL_INTERNALS_OBJECT_SLOT
)
;
assert
(
IsObject
(
internals
)
"
internals
not
an
object
"
)
;
assert
(
hasOwn
(
"
type
"
internals
)
"
missing
type
"
)
;
assert
(
(
internals
.
type
=
=
=
"
Collator
"
&
&
GuardToCollator
(
obj
)
!
=
=
null
)
|
|
(
internals
.
type
=
=
=
"
DateTimeFormat
"
&
&
GuardToDateTimeFormat
(
obj
)
!
=
=
null
)
|
|
(
internals
.
type
=
=
=
"
NumberFormat
"
&
&
GuardToNumberFormat
(
obj
)
!
=
=
null
)
|
|
(
internals
.
type
=
=
=
"
PluralRules
"
&
&
GuardToPluralRules
(
obj
)
!
=
=
null
)
|
|
(
internals
.
type
=
=
=
"
RelativeTimeFormat
"
&
&
GuardToRelativeTimeFormat
(
obj
)
!
=
=
null
)
"
type
must
match
the
object
'
s
class
"
)
;
assert
(
hasOwn
(
"
lazyData
"
internals
)
"
missing
lazyData
"
)
;
assert
(
hasOwn
(
"
internalProps
"
internals
)
"
missing
internalProps
"
)
;
return
internals
;
}
function
getInternals
(
obj
)
{
var
internals
=
getIntlObjectInternals
(
obj
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
return
internalProps
;
var
type
=
internals
.
type
;
if
(
type
=
=
=
"
Collator
"
)
internalProps
=
resolveCollatorInternals
(
internals
.
lazyData
)
;
else
if
(
type
=
=
=
"
DateTimeFormat
"
)
internalProps
=
resolveDateTimeFormatInternals
(
internals
.
lazyData
)
;
else
if
(
type
=
=
=
"
NumberFormat
"
)
internalProps
=
resolveNumberFormatInternals
(
internals
.
lazyData
)
;
else
internalProps
=
resolvePluralRulesInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
