#
include
"
builtin
/
intl
/
Collator
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
intl
/
Collator
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
LanguageTag
.
h
"
#
include
"
builtin
/
intl
/
ScopedICUObject
.
h
"
#
include
"
builtin
/
intl
/
SharedIntlData
.
h
"
#
include
"
gc
/
FreeOp
.
h
"
#
include
"
js
/
CharacterEncoding
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
WellKnownAtom
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
using
JS
:
:
AutoStableStringChars
;
using
js
:
:
intl
:
:
IcuLocale
;
using
js
:
:
intl
:
:
ReportInternalError
;
using
js
:
:
intl
:
:
SharedIntlData
;
using
js
:
:
intl
:
:
StringsAreEqual
;
const
JSClassOps
CollatorObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
CollatorObject
:
:
finalize
nullptr
nullptr
nullptr
nullptr
}
;
const
JSClass
CollatorObject
:
:
class_
=
{
"
Intl
.
Collator
"
JSCLASS_HAS_RESERVED_SLOTS
(
CollatorObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Collator
)
|
JSCLASS_FOREGROUND_FINALIZE
&
CollatorObject
:
:
classOps_
&
CollatorObject
:
:
classSpec_
}
;
const
JSClass
&
CollatorObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
bool
collator_toSource
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
args
.
rval
(
)
.
setString
(
cx
-
>
names
(
)
.
Collator
)
;
return
true
;
}
static
const
JSFunctionSpec
collator_static_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
supportedLocalesOf
"
"
Intl_Collator_supportedLocalesOf
"
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
collator_methods
[
]
=
{
JS_SELF_HOSTED_FN
(
"
resolvedOptions
"
"
Intl_Collator_resolvedOptions
"
0
0
)
JS_FN
(
js_toSource_str
collator_toSource
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
collator_properties
[
]
=
{
JS_SELF_HOSTED_GET
(
"
compare
"
"
Intl_Collator_compare_get
"
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Intl
.
Collator
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
bool
Collator
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
const
ClassSpec
CollatorObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
Collator
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
CollatorObject
>
collator_static_methods
nullptr
collator_methods
collator_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
static
bool
Collator
(
JSContext
*
cx
const
CallArgs
&
args
)
{
RootedObject
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Collator
&
proto
)
)
{
return
false
;
}
Rooted
<
CollatorObject
*
>
collator
(
cx
NewObjectWithClassProto
<
CollatorObject
>
(
cx
proto
)
)
;
if
(
!
collator
)
{
return
false
;
}
HandleValue
locales
=
args
.
get
(
0
)
;
HandleValue
options
=
args
.
get
(
1
)
;
if
(
!
intl
:
:
InitializeObject
(
cx
collator
cx
-
>
names
(
)
.
InitializeCollator
locales
options
)
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
collator
)
;
return
true
;
}
static
bool
Collator
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
Collator
(
cx
args
)
;
}
bool
js
:
:
intl_Collator
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
MOZ_ASSERT
(
args
.
length
(
)
=
=
2
)
;
MOZ_ASSERT
(
!
args
.
isConstructing
(
)
)
;
return
Collator
(
cx
args
)
;
}
void
js
:
:
CollatorObject
:
:
finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
{
MOZ_ASSERT
(
fop
-
>
onMainThread
(
)
)
;
if
(
mozilla
:
:
intl
:
:
Collator
*
coll
=
obj
-
>
as
<
CollatorObject
>
(
)
.
getCollator
(
)
)
{
intl
:
:
RemoveICUCellMemory
(
fop
obj
CollatorObject
:
:
EstimatedMemoryUse
)
;
delete
coll
;
}
}
bool
js
:
:
intl_availableCollations
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
MOZ_ASSERT
(
args
.
length
(
)
=
=
1
)
;
MOZ_ASSERT
(
args
[
0
]
.
isString
(
)
)
;
UniqueChars
locale
=
intl
:
:
EncodeLocale
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
locale
)
{
return
false
;
}
auto
keywords
=
mozilla
:
:
intl
:
:
Collator
:
:
GetBcp47KeywordValuesForLocale
(
locale
.
get
(
)
)
;
if
(
keywords
.
isErr
(
)
)
{
ReportInternalError
(
cx
keywords
.
unwrapErr
(
)
)
;
return
false
;
}
RootedObject
collations
(
cx
NewDenseEmptyArray
(
cx
)
)
;
if
(
!
collations
)
{
return
false
;
}
if
(
!
NewbornArrayPush
(
cx
collations
NullValue
(
)
)
)
{
return
false
;
}
for
(
auto
result
:
keywords
.
unwrap
(
)
)
{
if
(
result
.
isErr
(
)
)
{
ReportInternalError
(
cx
)
;
return
false
;
}
mozilla
:
:
Span
<
const
char
>
collation
=
result
.
unwrap
(
)
;
if
(
StringsAreEqual
(
collation
.
data
(
)
"
standard
"
)
|
|
StringsAreEqual
(
collation
.
data
(
)
"
search
"
)
)
{
continue
;
}
JSString
*
jscollation
=
NewStringCopy
<
CanGC
>
(
cx
collation
)
;
if
(
!
jscollation
)
{
return
false
;
}
if
(
!
NewbornArrayPush
(
cx
collations
StringValue
(
jscollation
)
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setObject
(
*
collations
)
;
return
true
;
}
static
mozilla
:
:
intl
:
:
Collator
*
NewIntlCollator
(
JSContext
*
cx
Handle
<
CollatorObject
*
>
collator
)
{
RootedValue
value
(
cx
)
;
RootedObject
internals
(
cx
intl
:
:
GetInternalsObject
(
cx
collator
)
)
;
if
(
!
internals
)
{
return
nullptr
;
}
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
locale
&
value
)
)
{
return
nullptr
;
}
UniqueChars
locale
=
intl
:
:
EncodeLocale
(
cx
value
.
toString
(
)
)
;
if
(
!
locale
)
{
return
nullptr
;
}
using
mozilla
:
:
intl
:
:
Collator
;
Collator
:
:
Options
options
{
}
;
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
usage
&
value
)
)
{
return
nullptr
;
}
{
JSLinearString
*
usage
=
value
.
toString
(
)
-
>
ensureLinear
(
cx
)
;
if
(
!
usage
)
{
return
nullptr
;
}
if
(
StringEqualsLiteral
(
usage
"
search
"
)
)
{
intl
:
:
LanguageTag
tag
(
cx
)
;
if
(
!
intl
:
:
LanguageTagParser
:
:
parse
(
cx
mozilla
:
:
MakeStringSpan
(
locale
.
get
(
)
)
tag
)
)
{
return
nullptr
;
}
JS
:
:
RootedVector
<
intl
:
:
UnicodeExtensionKeyword
>
keywords
(
cx
)
;
if
(
!
keywords
.
emplaceBack
(
"
co
"
cx
-
>
names
(
)
.
search
)
)
{
return
nullptr
;
}
if
(
!
intl
:
:
ApplyUnicodeExtensionToTag
(
cx
tag
keywords
)
)
{
return
nullptr
;
}
locale
=
tag
.
toStringZ
(
cx
)
;
if
(
!
locale
)
{
return
nullptr
;
}
}
else
{
MOZ_ASSERT
(
StringEqualsLiteral
(
usage
"
sort
"
)
)
;
}
}
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
sensitivity
&
value
)
)
{
return
nullptr
;
}
{
JSLinearString
*
sensitivity
=
value
.
toString
(
)
-
>
ensureLinear
(
cx
)
;
if
(
!
sensitivity
)
{
return
nullptr
;
}
if
(
StringEqualsLiteral
(
sensitivity
"
base
"
)
)
{
options
.
sensitivity
=
Collator
:
:
Sensitivity
:
:
Base
;
}
else
if
(
StringEqualsLiteral
(
sensitivity
"
accent
"
)
)
{
options
.
sensitivity
=
Collator
:
:
Sensitivity
:
:
Accent
;
}
else
if
(
StringEqualsLiteral
(
sensitivity
"
case
"
)
)
{
options
.
sensitivity
=
Collator
:
:
Sensitivity
:
:
Case
;
}
else
{
MOZ_ASSERT
(
StringEqualsLiteral
(
sensitivity
"
variant
"
)
)
;
options
.
sensitivity
=
Collator
:
:
Sensitivity
:
:
Variant
;
}
}
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
ignorePunctuation
&
value
)
)
{
return
nullptr
;
}
options
.
ignorePunctuation
=
value
.
toBoolean
(
)
;
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
numeric
&
value
)
)
{
return
nullptr
;
}
if
(
!
value
.
isUndefined
(
)
)
{
options
.
numeric
=
value
.
toBoolean
(
)
;
}
if
(
!
GetProperty
(
cx
internals
internals
cx
-
>
names
(
)
.
caseFirst
&
value
)
)
{
return
nullptr
;
}
if
(
!
value
.
isUndefined
(
)
)
{
JSLinearString
*
caseFirst
=
value
.
toString
(
)
-
>
ensureLinear
(
cx
)
;
if
(
!
caseFirst
)
{
return
nullptr
;
}
if
(
StringEqualsLiteral
(
caseFirst
"
upper
"
)
)
{
options
.
caseFirst
=
Collator
:
:
CaseFirst
:
:
Upper
;
}
else
if
(
StringEqualsLiteral
(
caseFirst
"
lower
"
)
)
{
options
.
caseFirst
=
Collator
:
:
CaseFirst
:
:
Lower
;
}
else
{
MOZ_ASSERT
(
StringEqualsLiteral
(
caseFirst
"
false
"
)
)
;
options
.
caseFirst
=
Collator
:
:
CaseFirst
:
:
False
;
}
}
auto
collResult
=
Collator
:
:
TryCreate
(
IcuLocale
(
locale
.
get
(
)
)
)
;
if
(
collResult
.
isErr
(
)
)
{
ReportInternalError
(
cx
collResult
.
unwrapErr
(
)
)
;
return
nullptr
;
}
auto
coll
=
collResult
.
unwrap
(
)
;
auto
optResult
=
coll
-
>
SetOptions
(
options
)
;
if
(
optResult
.
isErr
(
)
)
{
ReportInternalError
(
cx
optResult
.
unwrapErr
(
)
)
;
return
nullptr
;
}
return
coll
.
release
(
)
;
}
static
bool
intl_CompareStrings
(
JSContext
*
cx
mozilla
:
:
intl
:
:
Collator
*
coll
HandleString
str1
HandleString
str2
MutableHandleValue
result
)
{
MOZ_ASSERT
(
str1
)
;
MOZ_ASSERT
(
str2
)
;
if
(
str1
=
=
str2
)
{
result
.
setInt32
(
0
)
;
return
true
;
}
AutoStableStringChars
stableChars1
(
cx
)
;
if
(
!
stableChars1
.
initTwoByte
(
cx
str1
)
)
{
return
false
;
}
AutoStableStringChars
stableChars2
(
cx
)
;
if
(
!
stableChars2
.
initTwoByte
(
cx
str2
)
)
{
return
false
;
}
mozilla
:
:
Range
<
const
char16_t
>
chars1
=
stableChars1
.
twoByteRange
(
)
;
mozilla
:
:
Range
<
const
char16_t
>
chars2
=
stableChars2
.
twoByteRange
(
)
;
result
.
setInt32
(
coll
-
>
CompareStrings
(
chars1
chars2
)
)
;
return
true
;
}
bool
js
:
:
intl_CompareStrings
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
MOZ_ASSERT
(
args
.
length
(
)
=
=
3
)
;
MOZ_ASSERT
(
args
[
0
]
.
isObject
(
)
)
;
MOZ_ASSERT
(
args
[
1
]
.
isString
(
)
)
;
MOZ_ASSERT
(
args
[
2
]
.
isString
(
)
)
;
Rooted
<
CollatorObject
*
>
collator
(
cx
&
args
[
0
]
.
toObject
(
)
.
as
<
CollatorObject
>
(
)
)
;
mozilla
:
:
intl
:
:
Collator
*
coll
=
collator
-
>
getCollator
(
)
;
if
(
!
coll
)
{
coll
=
NewIntlCollator
(
cx
collator
)
;
if
(
!
coll
)
{
return
false
;
}
collator
-
>
setCollator
(
coll
)
;
intl
:
:
AddICUCellMemory
(
collator
CollatorObject
:
:
EstimatedMemoryUse
)
;
}
RootedString
str1
(
cx
args
[
1
]
.
toString
(
)
)
;
RootedString
str2
(
cx
args
[
2
]
.
toString
(
)
)
;
return
intl_CompareStrings
(
cx
coll
str1
str2
args
.
rval
(
)
)
;
}
bool
js
:
:
intl_isUpperCaseFirst
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
MOZ_ASSERT
(
args
.
length
(
)
=
=
1
)
;
MOZ_ASSERT
(
args
[
0
]
.
isString
(
)
)
;
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
RootedString
locale
(
cx
args
[
0
]
.
toString
(
)
)
;
bool
isUpperFirst
;
if
(
!
sharedIntlData
.
isUpperCaseFirst
(
cx
locale
&
isUpperFirst
)
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
isUpperFirst
)
;
return
true
;
}
