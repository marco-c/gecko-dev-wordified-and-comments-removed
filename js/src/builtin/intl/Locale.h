#
ifndef
builtin_intl_Locale_h
#
define
builtin_intl_Locale_h
#
include
<
stdint
.
h
>
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
GlobalObject
;
class
LocaleObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
SLOT_COUNT
=
1
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
"
"
object
slot
"
)
;
}
;
extern
JSObject
*
CreateLocalePrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
Intl
JS
:
:
Handle
<
GlobalObject
*
>
global
)
;
class
NativeLocaleObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
uint32_t
LANGUAGE_TAG_SLOT
=
0
;
static
constexpr
uint32_t
BASENAME_SLOT
=
1
;
static
constexpr
uint32_t
UNICODE_EXTENSION_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
JSString
*
languageTag
(
)
const
{
return
getFixedSlot
(
LANGUAGE_TAG_SLOT
)
.
toString
(
)
;
}
JSString
*
baseName
(
)
const
{
return
getFixedSlot
(
BASENAME_SLOT
)
.
toString
(
)
;
}
const
Value
&
unicodeExtension
(
)
const
{
return
getFixedSlot
(
UNICODE_EXTENSION_SLOT
)
;
}
}
;
extern
JSObject
*
CreateNativeLocalePrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
Intl
JS
:
:
Handle
<
GlobalObject
*
>
global
)
;
extern
MOZ_MUST_USE
bool
intl_CreateUninitializedLocale
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_AddLikelySubtags
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_RemoveLikelySubtags
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
}
#
endif
