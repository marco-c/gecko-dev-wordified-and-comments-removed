#
ifndef
builtin_intl_CommonFunctions_h
#
define
builtin_intl_CommonFunctions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
type_traits
>
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
StringType
.
h
"
namespace
mozilla
:
:
intl
{
enum
class
ICUError
:
uint8_t
;
}
namespace
js
{
namespace
intl
{
extern
bool
InitializeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
PropertyName
*
>
initializer
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
)
;
enum
class
DateTimeFormatOptions
{
Standard
EnableMozExtensions
}
;
extern
bool
LegacyInitializeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
PropertyName
*
>
initializer
JS
:
:
Handle
<
JS
:
:
Value
>
thisValue
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
DateTimeFormatOptions
dtfOptions
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
extern
JSObject
*
GetInternalsObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
extern
void
ReportInternalError
(
JSContext
*
cx
)
;
extern
void
ReportInternalError
(
JSContext
*
cx
mozilla
:
:
intl
:
:
ICUError
error
)
;
static
inline
bool
StringsAreEqual
(
const
char
*
s1
const
char
*
s2
)
{
return
!
strcmp
(
s1
s2
)
;
}
static
inline
const
char
*
LastDitchLocale
(
)
{
return
"
en
-
GB
"
;
}
struct
OldStyleLanguageTagMapping
{
const
char
*
const
oldStyle
;
const
char
*
const
modernStyle
;
constexpr
OldStyleLanguageTagMapping
(
const
char
*
oldStyle
const
char
*
modernStyle
)
:
oldStyle
(
oldStyle
)
modernStyle
(
modernStyle
)
{
}
}
;
extern
const
OldStyleLanguageTagMapping
oldStyleLanguageTagMappings
[
5
]
;
extern
UniqueChars
EncodeLocale
(
JSContext
*
cx
JSString
*
locale
)
;
constexpr
size_t
INITIAL_CHAR_BUFFER_SIZE
=
32
;
void
AddICUCellMemory
(
JSObject
*
obj
size_t
nbytes
)
;
void
RemoveICUCellMemory
(
JSFreeOp
*
fop
JSObject
*
obj
size_t
nbytes
)
;
}
}
#
endif
