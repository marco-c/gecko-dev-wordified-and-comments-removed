#
ifndef
builtin_intl_CommonFunctions_h
#
define
builtin_intl_CommonFunctions_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
"
builtin
/
intl
/
ICUStubs
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
StringType
.
h
"
namespace
js
{
namespace
intl
{
extern
bool
InitializeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
PropertyName
*
>
initializer
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
)
;
enum
class
DateTimeFormatOptions
{
Standard
EnableMozExtensions
}
;
extern
bool
LegacyInitializeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
PropertyName
*
>
initializer
JS
:
:
Handle
<
JS
:
:
Value
>
thisValue
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
DateTimeFormatOptions
dtfOptions
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
extern
JSObject
*
GetInternalsObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
extern
void
ReportInternalError
(
JSContext
*
cx
)
;
static
inline
bool
StringsAreEqual
(
const
char
*
s1
const
char
*
s2
)
{
return
!
strcmp
(
s1
s2
)
;
}
static
inline
const
char
*
IcuLocale
(
const
char
*
locale
)
{
if
(
StringsAreEqual
(
locale
"
und
"
)
)
return
"
"
;
return
locale
;
}
static_assert
(
mozilla
:
:
IsSame
<
UChar
char16_t
>
:
:
value
"
SpiderMonkey
doesn
'
t
support
redefining
UChar
to
a
different
type
"
)
;
constexpr
size_t
INITIAL_CHAR_BUFFER_SIZE
=
32
;
template
<
typename
ICUStringFunction
size_t
InlineCapacity
>
static
int32_t
CallICU
(
JSContext
*
cx
const
ICUStringFunction
&
strFn
Vector
<
char16_t
InlineCapacity
>
&
chars
)
{
MOZ_ASSERT
(
chars
.
length
(
)
=
=
0
)
;
MOZ_ALWAYS_TRUE
(
chars
.
resize
(
InlineCapacity
)
)
;
UErrorCode
status
=
U_ZERO_ERROR
;
int32_t
size
=
strFn
(
chars
.
begin
(
)
InlineCapacity
&
status
)
;
if
(
status
=
=
U_BUFFER_OVERFLOW_ERROR
)
{
MOZ_ASSERT
(
size
>
=
0
)
;
if
(
!
chars
.
resize
(
size_t
(
size
)
)
)
return
-
1
;
status
=
U_ZERO_ERROR
;
strFn
(
chars
.
begin
(
)
size
&
status
)
;
}
if
(
U_FAILURE
(
status
)
)
{
ReportInternalError
(
cx
)
;
return
-
1
;
}
MOZ_ASSERT
(
size
>
=
0
)
;
return
size
;
}
template
<
typename
ICUStringFunction
>
static
JSString
*
CallICU
(
JSContext
*
cx
const
ICUStringFunction
&
strFn
)
{
Vector
<
char16_t
INITIAL_CHAR_BUFFER_SIZE
>
chars
(
cx
)
;
int32_t
size
=
CallICU
(
cx
strFn
chars
)
;
if
(
size
<
0
)
return
nullptr
;
return
NewStringCopyN
<
CanGC
>
(
cx
chars
.
begin
(
)
size_t
(
size
)
)
;
}
using
CountAvailable
=
int32_t
(
*
)
(
)
;
using
GetAvailable
=
const
char
*
(
*
)
(
int32_t
localeIndex
)
;
extern
bool
GetAvailableLocales
(
JSContext
*
cx
CountAvailable
countAvailable
GetAvailable
getAvailable
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
}
}
#
endif
