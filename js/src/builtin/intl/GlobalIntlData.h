#
ifndef
builtin_intl_GlobalIntlData_h
#
define
builtin_intl_GlobalIntlData_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
class
CollatorObject
;
class
DateTimeFormatObject
;
class
NumberFormatObject
;
namespace
temporal
{
class
TimeZoneObject
;
}
}
namespace
js
:
:
intl
{
enum
class
DateTimeFormatKind
;
class
GlobalIntlData
{
GCPtr
<
JSLinearString
*
>
runtimeDefaultLocale_
;
GCPtr
<
JSLinearString
*
>
defaultLocale_
;
GCPtr
<
JSLinearString
*
>
runtimeDefaultTimeZone_
;
GCPtr
<
JSLinearString
*
>
defaultTimeZone_
;
GCPtr
<
JSObject
*
>
defaultTimeZoneObject_
;
GCPtr
<
JSLinearString
*
>
collatorLocale_
;
GCPtr
<
JSObject
*
>
collator_
;
GCPtr
<
JSLinearString
*
>
numberFormatLocale_
;
GCPtr
<
JSObject
*
>
numberFormat_
;
GCPtr
<
JSLinearString
*
>
dateTimeFormatLocale_
;
GCPtr
<
JSObject
*
>
dateTimeFormatToLocaleAll_
;
GCPtr
<
JSObject
*
>
dateTimeFormatToLocaleDate_
;
GCPtr
<
JSObject
*
>
dateTimeFormatToLocaleTime_
;
public
:
JSLinearString
*
defaultLocale
(
JSContext
*
cx
)
;
JSLinearString
*
defaultTimeZone
(
JSContext
*
cx
)
;
temporal
:
:
TimeZoneObject
*
getOrCreateDefaultTimeZone
(
JSContext
*
cx
)
;
CollatorObject
*
getOrCreateCollator
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
locale
)
;
NumberFormatObject
*
getOrCreateNumberFormat
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
locale
)
;
DateTimeFormatObject
*
getOrCreateDateTimeFormat
(
JSContext
*
cx
DateTimeFormatKind
kind
JS
:
:
Handle
<
JSLinearString
*
>
locale
)
;
void
trace
(
JSTracer
*
trc
)
;
private
:
bool
ensureRuntimeDefaultLocale
(
JSContext
*
cx
)
;
bool
ensureRuntimeDefaultTimeZone
(
JSContext
*
cx
)
;
void
resetCollator
(
)
;
void
resetNumberFormat
(
)
;
void
resetDateTimeFormat
(
)
;
}
;
}
#
endif
