function
durationFormatLocaleData
(
)
{
return
{
nu
:
getNumberingSystems
default
:
{
nu
:
intl_numberingSystem
}
}
;
}
var
durationFormatInternalProperties
=
{
localeData
:
durationFormatLocaleData
relevantExtensionKeys
:
[
"
nu
"
]
}
;
function
resolveDurationFormatInternals
(
lazyDurationFormatData
)
{
assert
(
IsObject
(
lazyDurationFormatData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
DurationFormat
=
durationFormatInternalProperties
;
var
r
=
ResolveLocale
(
"
DurationFormat
"
lazyDurationFormatData
.
requestedLocales
lazyDurationFormatData
.
opt
DurationFormat
.
relevantExtensionKeys
DurationFormat
.
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
numberingSystem
=
r
.
nu
;
internalProps
.
style
=
lazyDurationFormatData
.
style
;
internalProps
.
yearsStyle
=
lazyDurationFormatData
.
yearsStyle
;
internalProps
.
yearsDisplay
=
lazyDurationFormatData
.
yearsDisplay
;
internalProps
.
weeksStyle
=
lazyDurationFormatData
.
weeksStyle
;
internalProps
.
weeksDisplay
=
lazyDurationFormatData
.
weeksDisplay
;
internalProps
.
monthsStyle
=
lazyDurationFormatData
.
monthsStyle
;
internalProps
.
monthsDisplay
=
lazyDurationFormatData
.
monthsDisplay
;
internalProps
.
daysStyle
=
lazyDurationFormatData
.
daysStyle
;
internalProps
.
daysDisplay
=
lazyDurationFormatData
.
daysDisplay
;
internalProps
.
hoursStyle
=
lazyDurationFormatData
.
hoursStyle
;
internalProps
.
hoursDisplay
=
lazyDurationFormatData
.
hoursDisplay
;
internalProps
.
minutesStyle
=
lazyDurationFormatData
.
minutesStyle
;
internalProps
.
minutesDisplay
=
lazyDurationFormatData
.
minutesDisplay
;
internalProps
.
secondsStyle
=
lazyDurationFormatData
.
secondsStyle
;
internalProps
.
secondsDisplay
=
lazyDurationFormatData
.
secondsDisplay
;
internalProps
.
millisecondsStyle
=
lazyDurationFormatData
.
millisecondsStyle
;
internalProps
.
millisecondsDisplay
=
lazyDurationFormatData
.
millisecondsDisplay
;
internalProps
.
microsecondsStyle
=
lazyDurationFormatData
.
microsecondsStyle
;
internalProps
.
microsecondsDisplay
=
lazyDurationFormatData
.
microsecondsDisplay
;
internalProps
.
nanosecondsStyle
=
lazyDurationFormatData
.
nanosecondsStyle
;
internalProps
.
nanosecondsDisplay
=
lazyDurationFormatData
.
nanosecondsDisplay
;
internalProps
.
fractionalDigits
=
lazyDurationFormatData
.
fractionalDigits
;
return
internalProps
;
}
function
getDurationFormatInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getDurationFormatInternals
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDurationFormat
(
obj
)
!
=
=
null
"
getDurationFormatInternals
called
with
non
-
DurationFormat
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
DurationFormat
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
{
return
internalProps
;
}
internalProps
=
resolveDurationFormatInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeDurationFormat
(
durationFormat
locales
options
)
{
assert
(
IsObject
(
durationFormat
)
"
InitializeDurationFormat
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDurationFormat
(
durationFormat
)
!
=
=
null
"
InitializeDurationFormat
called
with
non
-
DurationFormat
"
)
;
var
lazyDurationFormatData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyDurationFormatData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
{
options
=
std_Object_create
(
null
)
;
}
else
if
(
!
IsObject
(
options
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
options
=
=
=
null
?
"
null
"
:
typeof
options
)
;
}
var
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
var
numberingSystem
=
GetOption
(
options
"
numberingSystem
"
"
string
"
undefined
undefined
)
;
if
(
numberingSystem
!
=
=
undefined
)
{
numberingSystem
=
intl_ValidateAndCanonicalizeUnicodeExtensionType
(
numberingSystem
"
numberingSystem
"
"
nu
"
)
;
}
var
opt
=
new_Record
(
)
;
opt
.
localeMatcher
=
matcher
;
opt
.
nu
=
numberingSystem
;
lazyDurationFormatData
.
opt
=
opt
;
var
style
=
GetOption
(
options
"
style
"
"
string
"
[
"
long
"
"
short
"
"
narrow
"
"
digital
"
]
"
short
"
)
;
lazyDurationFormatData
.
style
=
style
;
var
yearsOptions
=
GetDurationUnitOptions
(
"
years
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
yearsStyle
=
yearsOptions
.
style
;
lazyDurationFormatData
.
yearsDisplay
=
yearsOptions
.
display
;
var
monthsOptions
=
GetDurationUnitOptions
(
"
months
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
monthsStyle
=
monthsOptions
.
style
;
lazyDurationFormatData
.
monthsDisplay
=
monthsOptions
.
display
;
var
weeksOptions
=
GetDurationUnitOptions
(
"
weeks
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
weeksStyle
=
weeksOptions
.
style
;
lazyDurationFormatData
.
weeksDisplay
=
weeksOptions
.
display
;
var
daysOptions
=
GetDurationUnitOptions
(
"
days
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
daysStyle
=
daysOptions
.
style
;
lazyDurationFormatData
.
daysDisplay
=
daysOptions
.
display
;
var
hoursOptions
=
GetDurationUnitOptions
(
"
hours
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
"
"
)
;
lazyDurationFormatData
.
hoursStyle
=
hoursOptions
.
style
;
lazyDurationFormatData
.
hoursDisplay
=
hoursOptions
.
display
;
var
minutesOptions
=
GetDurationUnitOptions
(
"
minutes
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
hoursOptions
.
style
)
;
lazyDurationFormatData
.
minutesStyle
=
minutesOptions
.
style
;
lazyDurationFormatData
.
minutesDisplay
=
minutesOptions
.
display
;
var
secondsOptions
=
GetDurationUnitOptions
(
"
seconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
minutesOptions
.
style
)
;
lazyDurationFormatData
.
secondsStyle
=
secondsOptions
.
style
;
lazyDurationFormatData
.
secondsDisplay
=
secondsOptions
.
display
;
var
millisecondsOptions
=
GetDurationUnitOptions
(
"
milliseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
secondsOptions
.
style
)
;
lazyDurationFormatData
.
millisecondsStyle
=
millisecondsOptions
.
style
;
lazyDurationFormatData
.
millisecondsDisplay
=
millisecondsOptions
.
display
;
var
microsecondsOptions
=
GetDurationUnitOptions
(
"
microseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
millisecondsOptions
.
style
)
;
lazyDurationFormatData
.
microsecondsStyle
=
microsecondsOptions
.
style
;
lazyDurationFormatData
.
microsecondsDisplay
=
microsecondsOptions
.
display
;
var
nanosecondsOptions
=
GetDurationUnitOptions
(
"
nanoseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
microsecondsOptions
.
style
)
;
lazyDurationFormatData
.
nanosecondsStyle
=
nanosecondsOptions
.
style
;
lazyDurationFormatData
.
nanosecondsDisplay
=
nanosecondsOptions
.
display
;
lazyDurationFormatData
.
fractionalDigits
=
GetNumberOption
(
options
"
fractionalDigits
"
0
9
undefined
)
;
initializeIntlObject
(
durationFormat
"
DurationFormat
"
lazyDurationFormatData
)
;
}
function
GetDurationUnitOptions
(
unit
options
baseStyle
stylesList
digitalBase
prevStyle
)
{
assert
(
typeof
unit
=
=
=
"
string
"
"
unit
is
a
string
"
)
;
assert
(
IsObject
(
options
)
"
options
is
an
object
"
)
;
assert
(
typeof
baseStyle
=
=
=
"
string
"
"
baseStyle
is
a
string
"
)
;
assert
(
IsArray
(
stylesList
)
"
stylesList
is
an
array
"
)
;
assert
(
typeof
digitalBase
=
=
=
"
string
"
"
digitalBase
is
a
string
"
)
;
assert
(
typeof
prevStyle
=
=
=
"
string
"
"
prevStyle
is
a
string
"
)
;
var
styleOption
=
GetOption
(
options
unit
"
string
"
stylesList
undefined
)
;
var
style
=
styleOption
;
var
displayDefault
=
"
always
"
;
if
(
style
=
=
=
undefined
)
{
if
(
baseStyle
=
=
=
"
digital
"
)
{
if
(
unit
!
=
=
"
hours
"
&
&
unit
!
=
=
"
minutes
"
&
&
unit
!
=
=
"
seconds
"
)
{
displayDefault
=
"
auto
"
;
}
style
=
digitalBase
;
}
else
{
if
(
prevStyle
=
=
=
"
numeric
"
|
|
prevStyle
=
=
=
"
2
-
digit
"
)
{
if
(
unit
!
=
=
"
minutes
"
&
&
unit
!
=
=
"
seconds
"
)
{
displayDefault
=
"
auto
"
;
}
style
=
"
numeric
"
;
}
else
{
displayDefault
=
"
auto
"
;
style
=
baseStyle
;
}
}
}
var
isFractional
=
style
=
=
=
"
numeric
"
&
&
(
unit
=
=
=
"
milliseconds
"
|
|
unit
=
=
=
"
microseconds
"
|
|
unit
=
=
=
"
nanoseconds
"
)
;
if
(
isFractional
)
{
displayDefault
=
"
auto
"
;
}
var
displayField
=
unit
+
"
Display
"
;
var
displayOption
=
GetOption
(
options
displayField
"
string
"
[
"
auto
"
"
always
"
]
undefined
)
;
var
display
=
displayOption
?
?
displayDefault
;
if
(
display
=
=
=
"
always
"
&
&
isFractional
)
{
assert
(
styleOption
!
=
=
undefined
|
|
displayOption
!
=
=
undefined
"
no
error
is
thrown
when
both
'
style
'
and
'
display
'
are
absent
"
)
;
ThrowRangeError
(
styleOption
!
=
=
undefined
&
&
displayOption
!
=
=
undefined
?
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION
:
displayOption
!
=
=
undefined
?
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION_DEFAULT_STYLE
:
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION_DEFAULT_DISPLAY
unit
)
;
}
if
(
prevStyle
=
=
=
"
numeric
"
|
|
prevStyle
=
=
=
"
2
-
digit
"
)
{
if
(
style
!
=
=
"
numeric
"
&
&
style
!
=
=
"
2
-
digit
"
)
{
ThrowRangeError
(
JSMSG_INTL_DURATION_INVALID_NON_NUMERIC_OPTION
unit
"
{
style
}
"
)
;
}
else
if
(
unit
=
=
=
"
minutes
"
|
|
unit
=
=
=
"
seconds
"
)
{
style
=
"
2
-
digit
"
;
}
}
return
{
style
display
}
;
}
function
Intl_DurationFormat_supportedLocalesOf
(
locales
)
{
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
availableLocales
=
"
DurationFormat
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_DurationFormat_resolvedOptions
(
)
{
var
durationFormat
=
this
;
if
(
!
IsObject
(
durationFormat
)
|
|
(
durationFormat
=
intl_GuardToDurationFormat
(
durationFormat
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDurationFormatMethodIfWrapped
this
"
Intl_DurationFormat_resolvedOptions
"
)
;
}
var
internals
=
getDurationFormatInternals
(
durationFormat
)
;
var
result
=
{
locale
:
internals
.
locale
numberingSystem
:
internals
.
numberingSystem
style
:
internals
.
style
years
:
internals
.
yearsStyle
yearsDisplay
:
internals
.
yearsDisplay
months
:
internals
.
monthsStyle
monthsDisplay
:
internals
.
monthsDisplay
weeks
:
internals
.
weeksStyle
weeksDisplay
:
internals
.
weeksDisplay
days
:
internals
.
daysStyle
daysDisplay
:
internals
.
daysDisplay
hours
:
internals
.
hoursStyle
hoursDisplay
:
internals
.
hoursDisplay
minutes
:
internals
.
minutesStyle
minutesDisplay
:
internals
.
minutesDisplay
seconds
:
internals
.
secondsStyle
secondsDisplay
:
internals
.
secondsDisplay
milliseconds
:
internals
.
millisecondsStyle
millisecondsDisplay
:
internals
.
millisecondsDisplay
microseconds
:
internals
.
microsecondsStyle
microsecondsDisplay
:
internals
.
microsecondsDisplay
nanoseconds
:
internals
.
nanosecondsStyle
nanosecondsDisplay
:
internals
.
nanosecondsDisplay
}
;
if
(
internals
.
fractionalDigits
!
=
=
undefined
)
{
DefineDataProperty
(
result
"
fractionalDigits
"
internals
.
fractionalDigits
)
;
}
return
result
;
}
