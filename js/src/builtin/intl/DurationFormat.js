function
durationFormatLocaleData
(
)
{
return
{
nu
:
getNumberingSystems
default
:
{
nu
:
intl_numberingSystem
}
}
;
}
var
durationFormatInternalProperties
=
{
localeData
:
durationFormatLocaleData
relevantExtensionKeys
:
[
"
nu
"
]
}
;
function
resolveDurationFormatInternals
(
lazyDurationFormatData
)
{
assert
(
IsObject
(
lazyDurationFormatData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
DurationFormat
=
durationFormatInternalProperties
;
var
r
=
ResolveLocale
(
"
DurationFormat
"
lazyDurationFormatData
.
requestedLocales
lazyDurationFormatData
.
opt
DurationFormat
.
relevantExtensionKeys
DurationFormat
.
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
numberingSystem
=
r
.
nu
;
internalProps
.
style
=
lazyDurationFormatData
.
style
;
internalProps
.
yearsStyle
=
lazyDurationFormatData
.
yearsStyle
;
internalProps
.
yearsDisplay
=
lazyDurationFormatData
.
yearsDisplay
;
internalProps
.
weeksStyle
=
lazyDurationFormatData
.
weeksStyle
;
internalProps
.
weeksDisplay
=
lazyDurationFormatData
.
weeksDisplay
;
internalProps
.
monthsStyle
=
lazyDurationFormatData
.
monthsStyle
;
internalProps
.
monthsDisplay
=
lazyDurationFormatData
.
monthsDisplay
;
internalProps
.
daysStyle
=
lazyDurationFormatData
.
daysStyle
;
internalProps
.
daysDisplay
=
lazyDurationFormatData
.
daysDisplay
;
internalProps
.
hoursStyle
=
lazyDurationFormatData
.
hoursStyle
;
internalProps
.
hoursDisplay
=
lazyDurationFormatData
.
hoursDisplay
;
internalProps
.
minutesStyle
=
lazyDurationFormatData
.
minutesStyle
;
internalProps
.
minutesDisplay
=
lazyDurationFormatData
.
minutesDisplay
;
internalProps
.
secondsStyle
=
lazyDurationFormatData
.
secondsStyle
;
internalProps
.
secondsDisplay
=
lazyDurationFormatData
.
secondsDisplay
;
internalProps
.
millisecondsStyle
=
lazyDurationFormatData
.
millisecondsStyle
;
internalProps
.
millisecondsDisplay
=
lazyDurationFormatData
.
millisecondsDisplay
;
internalProps
.
microsecondsStyle
=
lazyDurationFormatData
.
microsecondsStyle
;
internalProps
.
microsecondsDisplay
=
lazyDurationFormatData
.
microsecondsDisplay
;
internalProps
.
nanosecondsStyle
=
lazyDurationFormatData
.
nanosecondsStyle
;
internalProps
.
nanosecondsDisplay
=
lazyDurationFormatData
.
nanosecondsDisplay
;
internalProps
.
fractionalDigits
=
lazyDurationFormatData
.
fractionalDigits
;
return
internalProps
;
}
function
getDurationFormatInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getDurationFormatInternals
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDurationFormat
(
obj
)
!
=
=
null
"
getDurationFormatInternals
called
with
non
-
DurationFormat
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
DurationFormat
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
{
return
internalProps
;
}
internalProps
=
resolveDurationFormatInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeDurationFormat
(
durationFormat
locales
options
)
{
assert
(
IsObject
(
durationFormat
)
"
InitializeDurationFormat
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDurationFormat
(
durationFormat
)
!
=
=
null
"
InitializeDurationFormat
called
with
non
-
DurationFormat
"
)
;
var
lazyDurationFormatData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyDurationFormatData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
{
options
=
std_Object_create
(
null
)
;
}
else
if
(
!
IsObject
(
options
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
options
=
=
=
null
?
"
null
"
:
typeof
options
)
;
}
var
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
var
numberingSystem
=
GetOption
(
options
"
numberingSystem
"
"
string
"
undefined
undefined
)
;
if
(
numberingSystem
!
=
=
undefined
)
{
numberingSystem
=
intl_ValidateAndCanonicalizeUnicodeExtensionType
(
numberingSystem
"
numberingSystem
"
"
nu
"
)
;
}
var
opt
=
new_Record
(
)
;
opt
.
localeMatcher
=
matcher
;
opt
.
nu
=
numberingSystem
;
lazyDurationFormatData
.
opt
=
opt
;
var
style
=
GetOption
(
options
"
style
"
"
string
"
[
"
long
"
"
short
"
"
narrow
"
"
digital
"
]
"
short
"
)
;
lazyDurationFormatData
.
style
=
style
;
var
yearsOptions
=
GetDurationUnitOptions
(
"
years
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
yearsStyle
=
yearsOptions
.
style
;
lazyDurationFormatData
.
yearsDisplay
=
yearsOptions
.
display
;
var
monthsOptions
=
GetDurationUnitOptions
(
"
months
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
monthsStyle
=
monthsOptions
.
style
;
lazyDurationFormatData
.
monthsDisplay
=
monthsOptions
.
display
;
var
weeksOptions
=
GetDurationUnitOptions
(
"
weeks
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
weeksStyle
=
weeksOptions
.
style
;
lazyDurationFormatData
.
weeksDisplay
=
weeksOptions
.
display
;
var
daysOptions
=
GetDurationUnitOptions
(
"
days
"
options
style
[
"
long
"
"
short
"
"
narrow
"
]
"
short
"
"
"
)
;
lazyDurationFormatData
.
daysStyle
=
daysOptions
.
style
;
lazyDurationFormatData
.
daysDisplay
=
daysOptions
.
display
;
var
hoursOptions
=
GetDurationUnitOptions
(
"
hours
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
"
"
)
;
lazyDurationFormatData
.
hoursStyle
=
hoursOptions
.
style
;
lazyDurationFormatData
.
hoursDisplay
=
hoursOptions
.
display
;
var
minutesOptions
=
GetDurationUnitOptions
(
"
minutes
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
hoursOptions
.
style
)
;
lazyDurationFormatData
.
minutesStyle
=
minutesOptions
.
style
;
lazyDurationFormatData
.
minutesDisplay
=
minutesOptions
.
display
;
var
secondsOptions
=
GetDurationUnitOptions
(
"
seconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
"
2
-
digit
"
]
"
numeric
"
minutesOptions
.
style
)
;
lazyDurationFormatData
.
secondsStyle
=
secondsOptions
.
style
;
lazyDurationFormatData
.
secondsDisplay
=
secondsOptions
.
display
;
var
millisecondsOptions
=
GetDurationUnitOptions
(
"
milliseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
secondsOptions
.
style
)
;
lazyDurationFormatData
.
millisecondsStyle
=
millisecondsOptions
.
style
;
lazyDurationFormatData
.
millisecondsDisplay
=
millisecondsOptions
.
display
;
var
microsecondsOptions
=
GetDurationUnitOptions
(
"
microseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
millisecondsOptions
.
style
)
;
lazyDurationFormatData
.
microsecondsStyle
=
microsecondsOptions
.
style
;
lazyDurationFormatData
.
microsecondsDisplay
=
microsecondsOptions
.
display
;
var
nanosecondsOptions
=
GetDurationUnitOptions
(
"
nanoseconds
"
options
style
[
"
long
"
"
short
"
"
narrow
"
"
numeric
"
]
"
numeric
"
microsecondsOptions
.
style
)
;
lazyDurationFormatData
.
nanosecondsStyle
=
nanosecondsOptions
.
style
;
lazyDurationFormatData
.
nanosecondsDisplay
=
nanosecondsOptions
.
display
;
lazyDurationFormatData
.
fractionalDigits
=
GetNumberOption
(
options
"
fractionalDigits
"
0
9
undefined
)
;
initializeIntlObject
(
durationFormat
"
DurationFormat
"
lazyDurationFormatData
)
;
}
function
GetDurationUnitOptions
(
unit
options
baseStyle
stylesList
digitalBase
prevStyle
)
{
assert
(
typeof
unit
=
=
=
"
string
"
"
unit
is
a
string
"
)
;
assert
(
IsObject
(
options
)
"
options
is
an
object
"
)
;
assert
(
typeof
baseStyle
=
=
=
"
string
"
"
baseStyle
is
a
string
"
)
;
assert
(
IsArray
(
stylesList
)
"
stylesList
is
an
array
"
)
;
assert
(
typeof
digitalBase
=
=
=
"
string
"
"
digitalBase
is
a
string
"
)
;
assert
(
typeof
prevStyle
=
=
=
"
string
"
"
prevStyle
is
a
string
"
)
;
var
styleOption
=
GetOption
(
options
unit
"
string
"
stylesList
undefined
)
;
var
style
=
styleOption
;
var
displayDefault
=
"
always
"
;
if
(
style
=
=
=
undefined
)
{
if
(
baseStyle
=
=
=
"
digital
"
)
{
if
(
unit
!
=
=
"
hours
"
&
&
unit
!
=
=
"
minutes
"
&
&
unit
!
=
=
"
seconds
"
)
{
displayDefault
=
"
auto
"
;
}
style
=
digitalBase
;
}
else
{
if
(
prevStyle
=
=
=
"
numeric
"
|
|
prevStyle
=
=
=
"
2
-
digit
"
)
{
if
(
unit
!
=
=
"
minutes
"
&
&
unit
!
=
=
"
seconds
"
)
{
displayDefault
=
"
auto
"
;
}
style
=
"
numeric
"
;
}
else
{
displayDefault
=
"
auto
"
;
style
=
baseStyle
;
}
}
}
var
isFractional
=
style
=
=
=
"
numeric
"
&
&
(
unit
=
=
=
"
milliseconds
"
|
|
unit
=
=
=
"
microseconds
"
|
|
unit
=
=
=
"
nanoseconds
"
)
;
if
(
isFractional
)
{
displayDefault
=
"
auto
"
;
}
var
displayField
=
unit
+
"
Display
"
;
var
displayOption
=
GetOption
(
options
displayField
"
string
"
[
"
auto
"
"
always
"
]
undefined
)
;
var
display
=
displayOption
?
?
displayDefault
;
if
(
display
=
=
=
"
always
"
&
&
isFractional
)
{
assert
(
styleOption
!
=
=
undefined
|
|
displayOption
!
=
=
undefined
"
no
error
is
thrown
when
both
'
style
'
and
'
display
'
are
absent
"
)
;
ThrowRangeError
(
styleOption
!
=
=
undefined
&
&
displayOption
!
=
=
undefined
?
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION
:
displayOption
!
=
=
undefined
?
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION_DEFAULT_STYLE
:
JSMSG_INTL_DURATION_INVALID_DISPLAY_OPTION_DEFAULT_DISPLAY
unit
)
;
}
if
(
prevStyle
=
=
=
"
numeric
"
|
|
prevStyle
=
=
=
"
2
-
digit
"
)
{
if
(
style
!
=
=
"
numeric
"
&
&
style
!
=
=
"
2
-
digit
"
)
{
ThrowRangeError
(
JSMSG_INTL_DURATION_INVALID_NON_NUMERIC_OPTION
unit
"
{
style
}
"
)
;
}
else
if
(
unit
=
=
=
"
minutes
"
|
|
unit
=
=
=
"
seconds
"
)
{
style
=
"
2
-
digit
"
;
}
}
return
{
style
display
}
;
}
function
Intl_DurationFormat_supportedLocalesOf
(
locales
)
{
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
availableLocales
=
"
DurationFormat
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
DurationSign
(
record
)
{
assert
(
IsObject
(
record
)
"
record
is
an
object
"
)
;
assert
(
Number_isInteger
(
record
.
years
)
"
record
.
years
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
months
)
"
record
.
months
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
weeks
)
"
record
.
weeks
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
days
)
"
record
.
days
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
hours
)
"
record
.
hours
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
minutes
)
"
record
.
minutes
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
seconds
)
"
record
.
seconds
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
milliseconds
)
"
record
.
milliseconds
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
microseconds
)
"
record
.
microseconds
is
an
integer
"
)
;
assert
(
Number_isInteger
(
record
.
nanoseconds
)
"
record
.
nanoseconds
is
an
integer
"
)
;
return
(
std_Math_sign
(
record
.
years
)
|
|
std_Math_sign
(
record
.
months
)
|
|
std_Math_sign
(
record
.
weeks
)
|
|
std_Math_sign
(
record
.
days
)
|
|
std_Math_sign
(
record
.
hours
)
|
|
std_Math_sign
(
record
.
minutes
)
|
|
std_Math_sign
(
record
.
seconds
)
|
|
std_Math_sign
(
record
.
milliseconds
)
|
|
std_Math_sign
(
record
.
microseconds
)
|
|
std_Math_sign
(
record
.
nanoseconds
)
)
;
}
function
ComputeFractionalDigits
(
duration
unit
)
{
assert
(
IsValidDuration
(
duration
)
"
DurationToFractional
called
with
non
-
valid
duration
"
)
;
var
exponent
;
if
(
unit
=
=
=
"
seconds
"
)
{
exponent
=
9
;
}
else
if
(
unit
=
=
=
"
milliseconds
"
)
{
exponent
=
6
;
}
else
{
assert
(
unit
=
=
=
"
microseconds
"
"
unexpected
unit
"
)
;
exponent
=
3
;
}
switch
(
exponent
)
{
case
9
:
{
if
(
duration
.
milliseconds
=
=
=
0
&
&
duration
.
microseconds
=
=
=
0
&
&
duration
.
nanoseconds
=
=
=
0
)
{
return
duration
.
seconds
;
}
break
;
}
case
6
:
{
if
(
duration
.
microseconds
=
=
=
0
&
&
duration
.
nanoseconds
=
=
=
0
)
{
return
duration
.
milliseconds
;
}
break
;
}
case
3
:
{
if
(
duration
.
nanoseconds
=
=
=
0
)
{
return
duration
.
microseconds
;
}
break
;
}
}
var
ns
=
NumberToBigInt
(
duration
.
nanoseconds
)
;
switch
(
exponent
)
{
case
9
:
ns
+
=
NumberToBigInt
(
duration
.
seconds
)
*
1_000_000_000n
;
case
6
:
ns
+
=
NumberToBigInt
(
duration
.
milliseconds
)
*
1_000_000n
;
case
3
:
ns
+
=
NumberToBigInt
(
duration
.
microseconds
)
*
1_000n
;
}
var
e
=
NumberToBigInt
(
10
*
*
exponent
)
;
var
q
=
ns
/
e
;
var
r
=
ns
%
e
;
if
(
r
<
0
)
{
r
=
-
r
;
}
r
=
callFunction
(
String_pad_start
ToString
(
r
)
exponent
"
0
"
)
;
return
{
q
}
.
{
r
}
;
}
function
FormatNumericHoursOrMinutesOrSeconds
(
internals
value
style
unit
signDisplayed
formatToParts
)
{
assert
(
unit
=
=
=
"
hour
"
|
|
unit
=
=
=
"
minute
"
|
|
unit
=
=
=
"
second
"
"
unexpected
unit
:
"
+
unit
)
;
assert
(
style
=
=
=
"
numeric
"
|
|
style
=
=
=
"
2
-
digit
"
"
invalid
style
:
"
+
style
)
;
var
nfOpts
=
std_Object_create
(
null
)
;
nfOpts
.
numberingSystem
=
internals
.
numberingSystem
;
if
(
style
=
=
=
"
2
-
digit
"
)
{
nfOpts
.
minimumIntegerDigits
=
2
;
}
if
(
!
signDisplayed
)
{
nfOpts
.
signDisplay
=
"
never
"
;
}
nfOpts
.
useGrouping
=
false
;
if
(
unit
=
=
=
"
second
"
)
{
var
fractionalDigits
=
internals
.
fractionalDigits
;
nfOpts
.
maximumFractionDigits
=
fractionalDigits
?
?
9
;
nfOpts
.
minimumFractionDigits
=
fractionalDigits
?
?
0
;
nfOpts
.
roundingMode
=
"
trunc
"
;
}
var
nf
=
intl_NumberFormat
(
internals
.
locale
nfOpts
)
;
var
parts
=
intl_FormatNumber
(
nf
value
formatToParts
)
;
if
(
formatToParts
)
{
assert
(
IsArray
(
parts
)
"
parts
is
an
array
"
)
;
for
(
var
i
=
0
;
i
<
parts
.
length
;
i
+
+
)
{
DefineDataProperty
(
parts
[
i
]
"
unit
"
unit
)
;
}
}
return
parts
;
}
function
FormatNumericUnits
(
internals
duration
firstNumericUnit
signDisplayed
formatToParts
)
{
assert
(
firstNumericUnit
=
=
=
"
hours
"
|
|
firstNumericUnit
=
=
=
"
minutes
"
|
|
firstNumericUnit
=
=
=
"
seconds
"
"
invalid
numeric
unit
:
"
+
firstNumericUnit
)
;
var
numericPartsList
;
if
(
formatToParts
)
{
numericPartsList
=
[
]
;
}
else
{
numericPartsList
=
"
"
;
}
var
hoursValue
=
duration
.
hours
;
var
hoursDisplay
=
internals
.
hoursDisplay
;
var
minutesValue
=
duration
.
minutes
;
var
minutesDisplay
=
internals
.
minutesDisplay
;
var
secondsValue
=
ComputeFractionalDigits
(
duration
"
seconds
"
)
;
var
secondsDisplay
=
internals
.
secondsDisplay
;
var
hoursFormatted
=
false
;
if
(
firstNumericUnit
=
=
=
"
hours
"
)
{
hoursFormatted
=
hoursValue
!
=
=
0
|
|
hoursDisplay
=
=
=
"
always
"
;
}
var
secondsFormatted
=
secondsValue
!
=
=
0
|
|
secondsDisplay
=
=
=
"
always
"
;
var
minutesFormatted
=
false
;
if
(
firstNumericUnit
=
=
=
"
hours
"
|
|
firstNumericUnit
=
=
=
"
minutes
"
)
{
minutesFormatted
=
(
(
hoursFormatted
&
&
secondsFormatted
)
|
|
minutesValue
!
=
=
0
|
|
minutesDisplay
=
=
=
"
always
"
)
;
}
if
(
!
hoursFormatted
&
&
!
minutesFormatted
&
&
!
secondsFormatted
)
{
return
undefined
;
}
var
timeSeparator
;
if
(
(
minutesFormatted
&
&
hoursFormatted
)
|
|
(
secondsFormatted
&
&
minutesFormatted
)
)
{
timeSeparator
=
intl_GetTimeSeparator
(
internals
.
locale
internals
.
numberingSystem
)
;
}
if
(
hoursFormatted
)
{
if
(
signDisplayed
&
&
hoursValue
=
=
=
0
&
&
DurationSign
(
duration
)
<
0
)
{
hoursValue
=
-
0
;
}
var
hoursParts
=
FormatNumericHoursOrMinutesOrSeconds
(
internals
hoursValue
internals
.
hoursStyle
"
hour
"
signDisplayed
formatToParts
)
;
if
(
formatToParts
)
{
for
(
var
i
=
0
;
i
<
hoursParts
.
length
;
i
+
+
)
{
DefineDataProperty
(
numericPartsList
numericPartsList
.
length
hoursParts
[
i
]
)
;
}
}
else
{
numericPartsList
+
=
hoursParts
;
}
signDisplayed
=
false
;
}
if
(
minutesFormatted
)
{
if
(
signDisplayed
&
&
minutesValue
=
=
=
0
&
&
DurationSign
(
duration
)
<
0
)
{
minutesValue
=
-
0
;
}
if
(
hoursFormatted
)
{
if
(
formatToParts
)
{
DefineDataProperty
(
numericPartsList
numericPartsList
.
length
{
type
:
"
literal
"
value
:
timeSeparator
}
)
;
}
else
{
numericPartsList
+
=
timeSeparator
;
}
}
var
minutesParts
=
FormatNumericHoursOrMinutesOrSeconds
(
internals
minutesValue
internals
.
minutesStyle
"
minute
"
signDisplayed
formatToParts
)
;
if
(
formatToParts
)
{
for
(
var
i
=
0
;
i
<
minutesParts
.
length
;
i
+
+
)
{
DefineDataProperty
(
numericPartsList
numericPartsList
.
length
minutesParts
[
i
]
)
;
}
}
else
{
numericPartsList
+
=
minutesParts
;
}
signDisplayed
=
false
;
}
if
(
secondsFormatted
)
{
if
(
minutesFormatted
)
{
if
(
formatToParts
)
{
DefineDataProperty
(
numericPartsList
numericPartsList
.
length
{
type
:
"
literal
"
value
:
timeSeparator
}
)
;
}
else
{
numericPartsList
+
=
timeSeparator
;
}
}
var
secondsParts
=
FormatNumericHoursOrMinutesOrSeconds
(
internals
secondsValue
internals
.
secondsStyle
"
second
"
signDisplayed
formatToParts
)
;
if
(
formatToParts
)
{
for
(
var
i
=
0
;
i
<
secondsParts
.
length
;
i
+
+
)
{
DefineDataProperty
(
numericPartsList
numericPartsList
.
length
secondsParts
[
i
]
)
;
}
}
else
{
numericPartsList
+
=
secondsParts
;
}
}
return
numericPartsList
;
}
function
ListFormatParts
(
internals
partitionedPartsList
formatToParts
)
{
assert
(
IsArray
(
partitionedPartsList
)
"
partitionedPartsList
is
an
array
"
)
;
var
lfOpts
=
std_Object_create
(
null
)
;
lfOpts
.
type
=
"
unit
"
;
var
listStyle
=
internals
.
style
;
if
(
listStyle
=
=
=
"
digital
"
)
{
listStyle
=
"
short
"
;
}
lfOpts
.
style
=
listStyle
;
var
ListFormat
=
GetBuiltinConstructor
(
"
ListFormat
"
)
;
var
lf
=
new
ListFormat
(
internals
.
locale
lfOpts
)
;
if
(
!
formatToParts
)
{
return
intl_FormatList
(
lf
partitionedPartsList
false
)
;
}
var
strings
=
[
]
;
for
(
var
i
=
0
;
i
<
partitionedPartsList
.
length
;
i
+
+
)
{
var
parts
=
partitionedPartsList
[
i
]
;
assert
(
IsArray
(
parts
)
"
parts
is
an
array
"
)
;
var
string
=
"
"
;
for
(
var
j
=
0
;
j
<
parts
.
length
;
j
+
+
)
{
var
part
=
parts
[
j
]
;
assert
(
hasOwn
(
"
type
"
part
)
&
&
hasOwn
(
"
value
"
part
)
&
&
typeof
part
.
value
=
=
=
"
string
"
"
part
is
a
number
-
formatted
element
"
)
;
string
+
=
part
.
value
;
}
DefineDataProperty
(
strings
strings
.
length
string
)
;
}
var
formattedPartsList
=
intl_FormatList
(
lf
strings
true
)
;
var
partitionedPartsIndex
=
0
;
var
flattenedPartsList
=
[
]
;
for
(
var
i
=
0
;
i
<
formattedPartsList
.
length
;
i
+
+
)
{
var
listPart
=
formattedPartsList
[
i
]
;
assert
(
hasOwn
(
"
type
"
listPart
)
&
&
hasOwn
(
"
value
"
listPart
)
&
&
typeof
listPart
.
type
=
=
=
"
string
"
"
part
is
a
list
-
formatted
element
"
)
;
if
(
listPart
.
type
=
=
=
"
element
"
)
{
assert
(
partitionedPartsIndex
<
partitionedPartsList
.
length
"
resultIndex
is
an
index
into
result
"
)
;
var
parts
=
partitionedPartsList
[
partitionedPartsIndex
]
;
assert
(
IsArray
(
parts
)
"
parts
is
an
array
"
)
;
for
(
var
j
=
0
;
j
<
parts
.
length
;
j
+
+
)
{
DefineDataProperty
(
flattenedPartsList
flattenedPartsList
.
length
parts
[
j
]
)
;
}
partitionedPartsIndex
+
=
1
;
}
else
{
assert
(
listPart
.
type
=
=
=
"
literal
"
"
literal
part
"
)
;
DefineDataProperty
(
flattenedPartsList
flattenedPartsList
.
length
listPart
)
;
}
}
assert
(
partitionedPartsIndex
=
=
=
partitionedPartsList
.
length
"
all
number
-
formatted
parts
handled
"
)
;
return
flattenedPartsList
;
}
function
PartitionDurationFormatPattern
(
durationFormat
duration
formatToParts
)
{
assert
(
IsObject
(
durationFormat
)
"
PartitionDurationFormatPattern
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDurationFormat
(
durationFormat
)
!
=
=
null
"
PartitionDurationFormatPattern
called
with
non
-
DurationFormat
"
)
;
assert
(
IsValidDuration
(
duration
)
"
PartitionDurationFormatPattern
called
with
non
-
valid
duration
"
)
;
assert
(
typeof
formatToParts
=
=
=
"
boolean
"
"
PartitionDurationFormatPattern
called
with
non
-
boolean
formatToParts
"
)
;
var
units
=
[
"
years
"
"
months
"
"
weeks
"
"
days
"
"
hours
"
"
minutes
"
"
seconds
"
"
milliseconds
"
"
microseconds
"
"
nanoseconds
"
]
;
var
internals
=
getDurationFormatInternals
(
durationFormat
)
;
var
result
=
[
]
;
var
signDisplayed
=
true
;
var
numericUnitFound
=
false
;
for
(
var
i
=
0
;
!
numericUnitFound
&
&
i
<
units
.
length
;
i
+
+
)
{
var
unit
=
units
[
i
]
;
var
value
=
duration
[
unit
]
;
var
style
=
internals
[
unit
+
"
Style
"
]
;
var
display
=
internals
[
unit
+
"
Display
"
]
;
if
(
style
=
=
=
"
numeric
"
|
|
style
=
=
=
"
2
-
digit
"
)
{
var
numericPartsList
=
FormatNumericUnits
(
internals
duration
unit
signDisplayed
formatToParts
)
;
if
(
numericPartsList
!
=
=
undefined
)
{
DefineDataProperty
(
result
result
.
length
numericPartsList
)
;
}
numericUnitFound
=
true
;
}
else
{
var
nfOpts
=
std_Object_create
(
null
)
;
if
(
unit
=
=
=
"
seconds
"
|
|
unit
=
=
=
"
milliseconds
"
|
|
unit
=
=
=
"
microseconds
"
)
{
if
(
internals
[
units
[
i
+
1
]
+
"
Style
"
]
=
=
=
"
numeric
"
)
{
value
=
ComputeFractionalDigits
(
duration
unit
)
;
var
fractionalDigits
=
internals
.
fractionalDigits
;
nfOpts
.
maximumFractionDigits
=
fractionalDigits
?
?
9
;
nfOpts
.
minimumFractionDigits
=
fractionalDigits
?
?
0
;
nfOpts
.
roundingMode
=
"
trunc
"
;
numericUnitFound
=
true
;
}
}
if
(
value
=
=
=
0
&
&
display
=
=
=
"
auto
"
)
{
continue
;
}
nfOpts
.
numberingSystem
=
internals
.
numberingSystem
;
if
(
signDisplayed
)
{
signDisplayed
=
false
;
if
(
value
=
=
=
0
&
&
DurationSign
(
duration
)
<
0
)
{
value
=
-
0
;
}
}
else
{
nfOpts
.
signDisplay
=
"
never
"
;
}
var
numberFormatUnit
=
Substring
(
unit
0
unit
.
length
-
1
)
;
nfOpts
.
style
=
"
unit
"
;
nfOpts
.
unit
=
numberFormatUnit
;
nfOpts
.
unitDisplay
=
style
;
var
nf
=
intl_NumberFormat
(
internals
.
locale
nfOpts
)
;
var
parts
=
intl_FormatNumber
(
nf
value
formatToParts
)
;
if
(
formatToParts
)
{
assert
(
IsArray
(
parts
)
"
parts
is
an
array
"
)
;
for
(
var
j
=
0
;
j
<
parts
.
length
;
j
+
+
)
{
DefineDataProperty
(
parts
[
j
]
"
unit
"
numberFormatUnit
)
;
}
}
DefineDataProperty
(
result
result
.
length
parts
)
;
}
}
return
ListFormatParts
(
internals
result
formatToParts
)
;
}
function
Intl_DurationFormat_resolvedOptions
(
)
{
var
durationFormat
=
this
;
if
(
!
IsObject
(
durationFormat
)
|
|
(
durationFormat
=
intl_GuardToDurationFormat
(
durationFormat
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDurationFormatMethodIfWrapped
this
"
Intl_DurationFormat_resolvedOptions
"
)
;
}
var
internals
=
getDurationFormatInternals
(
durationFormat
)
;
var
result
=
{
locale
:
internals
.
locale
numberingSystem
:
internals
.
numberingSystem
style
:
internals
.
style
years
:
internals
.
yearsStyle
yearsDisplay
:
internals
.
yearsDisplay
months
:
internals
.
monthsStyle
monthsDisplay
:
internals
.
monthsDisplay
weeks
:
internals
.
weeksStyle
weeksDisplay
:
internals
.
weeksDisplay
days
:
internals
.
daysStyle
daysDisplay
:
internals
.
daysDisplay
hours
:
internals
.
hoursStyle
hoursDisplay
:
internals
.
hoursDisplay
minutes
:
internals
.
minutesStyle
minutesDisplay
:
internals
.
minutesDisplay
seconds
:
internals
.
secondsStyle
secondsDisplay
:
internals
.
secondsDisplay
milliseconds
:
internals
.
millisecondsStyle
millisecondsDisplay
:
internals
.
millisecondsDisplay
microseconds
:
internals
.
microsecondsStyle
microsecondsDisplay
:
internals
.
microsecondsDisplay
nanoseconds
:
internals
.
nanosecondsStyle
nanosecondsDisplay
:
internals
.
nanosecondsDisplay
}
;
if
(
internals
.
fractionalDigits
!
=
=
undefined
)
{
DefineDataProperty
(
result
"
fractionalDigits
"
internals
.
fractionalDigits
)
;
}
return
result
;
}
