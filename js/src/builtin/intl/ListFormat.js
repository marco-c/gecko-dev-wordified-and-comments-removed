function
listFormatLocaleData
(
)
{
return
{
}
;
}
var
listFormatInternalProperties
=
{
localeData
:
listFormatLocaleData
relevantExtensionKeys
:
[
]
}
;
function
resolveListFormatInternals
(
lazyListFormatData
)
{
assert
(
IsObject
(
lazyListFormatData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
ListFormat
=
listFormatInternalProperties
;
var
localeData
=
ListFormat
.
localeData
;
var
r
=
ResolveLocale
(
"
ListFormat
"
lazyListFormatData
.
requestedLocales
lazyListFormatData
.
opt
ListFormat
.
relevantExtensionKeys
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
type
=
lazyListFormatData
.
type
;
internalProps
.
style
=
lazyListFormatData
.
style
;
return
internalProps
;
}
function
getListFormatInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getListFormatInternals
called
with
non
-
object
"
)
;
assert
(
intl_GuardToListFormat
(
obj
)
!
=
=
null
"
getListFormatInternals
called
with
non
-
ListFormat
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
ListFormat
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
{
return
internalProps
;
}
internalProps
=
resolveListFormatInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeListFormat
(
listFormat
locales
options
)
{
assert
(
IsObject
(
listFormat
)
"
InitializeListFormat
called
with
non
-
object
"
)
;
assert
(
intl_GuardToListFormat
(
listFormat
)
!
=
=
null
"
InitializeListFormat
called
with
non
-
ListFormat
"
)
;
var
lazyListFormatData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyListFormatData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
{
options
=
std_Object_create
(
null
)
;
}
else
if
(
!
IsObject
(
options
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
options
=
=
=
null
?
"
null
"
:
typeof
options
)
;
}
var
opt
=
new_Record
(
)
;
lazyListFormatData
.
opt
=
opt
;
let
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
var
type
=
GetOption
(
options
"
type
"
"
string
"
[
"
conjunction
"
"
disjunction
"
"
unit
"
]
"
conjunction
"
)
;
lazyListFormatData
.
type
=
type
;
var
style
=
GetOption
(
options
"
style
"
"
string
"
[
"
long
"
"
short
"
"
narrow
"
]
"
long
"
)
;
lazyListFormatData
.
style
=
style
;
initializeIntlObject
(
listFormat
"
ListFormat
"
lazyListFormatData
)
;
}
function
Intl_ListFormat_supportedLocalesOf
(
locales
)
{
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
availableLocales
=
"
ListFormat
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
StringListFromIterable
(
iterable
methodName
)
{
if
(
iterable
=
=
=
undefined
)
{
return
[
]
;
}
var
list
=
[
]
;
for
(
var
element
of
allowContentIter
(
iterable
)
)
{
if
(
typeof
element
!
=
=
"
string
"
)
{
ThrowTypeError
(
JSMSG_NOT_EXPECTED_TYPE
methodName
"
string
"
typeof
element
)
;
}
DefineDataProperty
(
list
list
.
length
element
)
;
}
return
list
;
}
function
Intl_ListFormat_format
(
list
)
{
var
listFormat
=
this
;
if
(
!
IsObject
(
listFormat
)
|
|
(
listFormat
=
intl_GuardToListFormat
(
listFormat
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallListFormatMethodIfWrapped
this
list
"
Intl_ListFormat_format
"
)
;
}
var
stringList
=
StringListFromIterable
(
list
"
format
"
)
;
if
(
stringList
.
length
<
2
)
{
return
stringList
.
length
=
=
=
0
?
"
"
:
stringList
[
0
]
;
}
getListFormatInternals
(
listFormat
)
;
return
intl_FormatList
(
listFormat
stringList
false
)
;
}
function
Intl_ListFormat_formatToParts
(
list
)
{
var
listFormat
=
this
;
if
(
!
IsObject
(
listFormat
)
|
|
(
listFormat
=
intl_GuardToListFormat
(
listFormat
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallListFormatMethodIfWrapped
this
list
"
Intl_ListFormat_formatToParts
"
)
;
}
var
stringList
=
StringListFromIterable
(
list
"
formatToParts
"
)
;
if
(
stringList
.
length
<
2
)
{
return
stringList
.
length
=
=
=
0
?
[
]
:
[
{
type
:
"
element
"
value
:
stringList
[
0
]
}
]
;
}
getListFormatInternals
(
listFormat
)
;
return
intl_FormatList
(
listFormat
stringList
true
)
;
}
function
Intl_ListFormat_resolvedOptions
(
)
{
var
listFormat
=
this
;
if
(
!
IsObject
(
listFormat
)
|
|
(
listFormat
=
intl_GuardToListFormat
(
listFormat
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallListFormatMethodIfWrapped
this
"
Intl_ListFormat_resolvedOptions
"
)
;
}
var
internals
=
getListFormatInternals
(
listFormat
)
;
var
result
=
{
locale
:
internals
.
locale
type
:
internals
.
type
style
:
internals
.
style
}
;
return
result
;
}
