var
localeInternalProperties
=
{
relevantExtensionKeys
:
[
"
ca
"
"
co
"
"
hc
"
"
kf
"
"
kn
"
"
nu
"
]
}
;
function
ApplyOptionsToTag
(
tagObj
options
)
{
var
languageOption
=
GetOption
(
options
"
language
"
"
string
"
undefined
undefined
)
;
var
language
;
if
(
languageOption
!
=
=
undefined
)
{
language
=
parseStandaloneLanguage
(
languageOption
)
;
if
(
language
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
language
"
languageOption
)
;
}
var
scriptOption
=
GetOption
(
options
"
script
"
"
string
"
undefined
undefined
)
;
var
script
;
if
(
scriptOption
!
=
=
undefined
)
{
script
=
parseStandaloneScript
(
scriptOption
)
;
if
(
script
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
script
"
scriptOption
)
;
}
var
regionOption
=
GetOption
(
options
"
region
"
"
string
"
undefined
undefined
)
;
var
region
;
if
(
regionOption
!
=
=
undefined
)
{
region
=
parseStandaloneRegion
(
regionOption
)
;
if
(
region
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
region
"
regionOption
)
;
}
if
(
language
=
=
=
undefined
&
&
script
=
=
=
undefined
&
&
region
=
=
=
undefined
)
return
;
if
(
language
!
=
=
undefined
)
tagObj
.
language
=
language
;
if
(
script
!
=
=
undefined
)
tagObj
.
script
=
script
;
if
(
region
!
=
=
undefined
)
tagObj
.
region
=
region
;
if
(
language
!
=
=
undefined
)
updateGrandfatheredMappings
(
tagObj
)
;
updateLocaleIdMappings
(
tagObj
)
;
}
function
ApplyUnicodeExtensionToTag
(
tagObj
options
relevantExtensionKeys
)
{
var
extensions
=
tagObj
.
extensions
;
var
extensionIndex
=
-
1
;
for
(
var
i
=
0
;
i
<
extensions
.
length
;
i
+
+
)
{
if
(
extensions
[
i
]
[
0
]
=
=
=
"
u
"
)
{
extensionIndex
=
i
;
break
;
}
}
if
(
extensionIndex
<
0
)
{
var
hasUnicodeOptions
=
false
;
for
(
var
i
=
0
;
i
<
relevantExtensionKeys
.
length
;
i
+
+
)
{
if
(
options
[
relevantExtensionKeys
[
i
]
]
!
=
=
undefined
)
{
hasUnicodeOptions
=
true
;
break
;
}
}
if
(
!
hasUnicodeOptions
)
return
;
}
var
attributes
keywords
;
if
(
extensionIndex
>
=
0
)
{
var
components
=
UnicodeExtensionComponents
(
extensions
[
extensionIndex
]
)
;
attributes
=
components
.
attributes
;
keywords
=
components
.
keywords
;
}
else
{
attributes
=
[
]
;
keywords
=
[
]
;
}
for
(
var
i
=
0
;
i
<
relevantExtensionKeys
.
length
;
i
+
+
)
{
var
key
=
relevantExtensionKeys
[
i
]
;
var
value
=
undefined
;
var
entry
=
null
;
for
(
var
j
=
0
;
j
<
keywords
.
length
;
j
+
+
)
{
if
(
keywords
[
j
]
.
key
=
=
=
key
)
{
entry
=
keywords
[
j
]
;
value
=
entry
.
value
;
break
;
}
}
assert
(
hasOwn
(
key
options
)
"
option
value
for
each
extension
key
present
"
)
;
var
optionsValue
=
options
[
key
]
;
if
(
optionsValue
!
=
=
undefined
)
{
assert
(
typeof
optionsValue
=
=
=
"
string
"
"
optionsValue
is
a
string
"
)
;
value
=
optionsValue
;
if
(
entry
!
=
=
null
)
entry
.
value
=
value
;
else
_DefineDataProperty
(
keywords
keywords
.
length
{
key
value
}
)
;
}
options
[
key
]
=
value
;
}
var
newExtension
=
CanonicalizeUnicodeExtension
(
attributes
keywords
true
)
;
assert
(
newExtension
!
=
=
"
"
"
unexpected
empty
Unicode
extension
"
)
;
if
(
extensionIndex
>
=
0
)
{
extensions
[
extensionIndex
]
=
newExtension
;
}
else
{
_DefineDataProperty
(
extensions
extensions
.
length
newExtension
)
;
if
(
extensions
.
length
>
1
)
{
callFunction
(
ArraySort
extensions
)
;
}
}
}
function
InitializeLocale
(
locale
tag
options
)
{
if
(
!
(
typeof
tag
=
=
=
"
string
"
|
|
IsObject
(
tag
)
)
)
ThrowTypeError
(
JSMSG_INVALID_LOCALES_ELEMENT
)
;
var
unboxedLocale
=
callFunction
(
unboxLocaleOrNull
tag
)
;
if
(
unboxedLocale
=
=
=
null
)
tag
=
ToString
(
tag
)
;
var
hasOptions
=
options
!
=
=
undefined
;
if
(
hasOptions
)
options
=
ToObject
(
options
)
;
var
tagObj
;
if
(
unboxedLocale
=
=
=
null
)
{
tagObj
=
parseLanguageTag
(
tag
)
;
if
(
tagObj
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_LANGUAGE_TAG
tag
)
;
CanonicalizeLanguageTagObject
(
tagObj
)
;
}
else
{
tagObj
=
copyLanguageTagObject
(
unboxedLocale
.
locale
)
;
}
var
opt
=
new
Record
(
)
;
if
(
hasOptions
)
{
ApplyOptionsToTag
(
tagObj
options
)
;
var
calendar
=
GetOption
(
options
"
calendar
"
"
string
"
undefined
undefined
)
;
if
(
calendar
!
=
=
undefined
)
{
var
standaloneCalendar
=
parseStandaloneUnicodeExtensionType
(
calendar
)
;
if
(
standaloneCalendar
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
calendar
"
calendar
)
;
calendar
=
standaloneCalendar
;
}
opt
.
ca
=
calendar
;
var
collation
=
GetOption
(
options
"
collation
"
"
string
"
undefined
undefined
)
;
if
(
collation
!
=
=
undefined
)
{
var
standaloneCollation
=
parseStandaloneUnicodeExtensionType
(
collation
)
;
if
(
standaloneCollation
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
collation
"
collation
)
;
collation
=
standaloneCollation
;
}
opt
.
co
=
collation
;
opt
.
hc
=
GetOption
(
options
"
hourCycle
"
"
string
"
[
"
h11
"
"
h12
"
"
h23
"
"
h24
"
]
undefined
)
;
opt
.
kf
=
GetOption
(
options
"
caseFirst
"
"
string
"
[
"
upper
"
"
lower
"
"
false
"
]
undefined
)
;
var
numeric
=
GetOption
(
options
"
numeric
"
"
boolean
"
undefined
undefined
)
;
if
(
numeric
!
=
=
undefined
)
numeric
=
ToString
(
numeric
)
;
opt
.
kn
=
numeric
;
var
numberingSystem
=
GetOption
(
options
"
numberingSystem
"
"
string
"
undefined
undefined
)
;
if
(
numberingSystem
!
=
=
undefined
)
{
var
standaloneNumberingSystem
=
parseStandaloneUnicodeExtensionType
(
numberingSystem
)
;
if
(
standaloneNumberingSystem
=
=
=
null
)
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
numberingSystem
"
numberingSystem
)
;
numberingSystem
=
standaloneNumberingSystem
;
}
opt
.
nu
=
numberingSystem
;
}
else
{
opt
.
ca
=
undefined
;
opt
.
co
=
undefined
;
opt
.
hc
=
undefined
;
opt
.
kf
=
undefined
;
opt
.
kn
=
undefined
;
opt
.
nu
=
undefined
;
}
var
{
relevantExtensionKeys
}
=
localeInternalProperties
;
if
(
hasOptions
|
|
unboxedLocale
=
=
=
null
)
{
ApplyUnicodeExtensionToTag
(
tagObj
opt
relevantExtensionKeys
)
;
}
else
{
opt
.
ca
=
unboxedLocale
.
calendar
;
opt
.
co
=
unboxedLocale
.
collation
;
opt
.
hc
=
unboxedLocale
.
hourCycle
;
opt
.
kf
=
unboxedLocale
.
caseFirst
;
opt
.
kn
=
unboxedLocale
.
numeric
;
opt
.
nu
=
unboxedLocale
.
numberingSystem
;
}
var
internals
=
new
Record
(
)
;
internals
.
locale
=
tagObj
;
internals
.
calendar
=
opt
.
ca
;
internals
.
collation
=
opt
.
co
;
internals
.
hourCycle
=
opt
.
hc
;
internals
.
caseFirst
=
opt
.
kf
;
internals
.
numeric
=
opt
.
kn
=
=
=
"
true
"
|
|
opt
.
kn
=
=
=
"
"
;
internals
.
numberingSystem
=
opt
.
nu
;
assert
(
UnsafeGetReservedSlot
(
locale
INTL_INTERNALS_OBJECT_SLOT
)
=
=
=
null
"
Internal
slot
already
initialized
?
"
)
;
UnsafeSetReservedSlot
(
locale
INTL_INTERNALS_OBJECT_SLOT
internals
)
;
}
function
unboxLocaleOrNull
(
)
{
if
(
!
IsObject
(
this
)
)
return
null
;
var
loc
=
GuardToLocale
(
this
)
;
if
(
loc
!
=
=
null
)
return
getLocaleInternals
(
loc
)
;
if
(
IsWrappedLocale
(
this
)
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
unboxLocaleOrNull
"
)
;
return
null
;
}
function
copyLanguageTagObject
(
tagObj
)
{
assert
(
IsObject
(
tagObj
)
"
copyLanguageTagObject
called
with
non
-
object
"
)
;
var
variants
=
[
]
;
for
(
var
i
=
0
;
i
<
tagObj
.
variants
.
length
;
i
+
+
)
_DefineDataProperty
(
variants
i
tagObj
.
variants
[
i
]
)
;
var
extensions
=
[
]
;
for
(
var
i
=
0
;
i
<
tagObj
.
extensions
.
length
;
i
+
+
)
_DefineDataProperty
(
extensions
i
tagObj
.
extensions
[
i
]
)
;
return
{
language
:
tagObj
.
language
script
:
tagObj
.
script
region
:
tagObj
.
region
variants
extensions
privateuse
:
tagObj
.
privateuse
}
;
}
function
getLocaleInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getLocaleInternals
called
with
non
-
object
"
)
;
assert
(
GuardToLocale
(
obj
)
!
=
=
null
"
getLocaleInternals
called
with
non
-
Locale
"
)
;
var
internals
=
UnsafeGetReservedSlot
(
obj
INTL_INTERNALS_OBJECT_SLOT
)
;
assert
(
IsObject
(
internals
)
"
Internal
slot
not
initialized
?
"
)
;
return
internals
;
}
function
Intl_Locale_toString
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_toString
"
)
;
var
tagObj
=
getLocaleInternals
(
loc
)
.
locale
;
return
StringFromLanguageTagObject
(
tagObj
)
;
}
function
Intl_Locale_baseName_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_baseName_get
"
)
;
var
tagObj
=
getLocaleInternals
(
loc
)
.
locale
;
var
baseName
=
tagObj
.
language
;
if
(
tagObj
.
script
!
=
=
undefined
)
baseName
+
=
"
-
"
+
tagObj
.
script
;
if
(
tagObj
.
region
!
=
=
undefined
)
baseName
+
=
"
-
"
+
tagObj
.
region
;
if
(
tagObj
.
variants
.
length
>
0
)
baseName
+
=
"
-
"
+
callFunction
(
std_Array_join
tagObj
.
variants
"
-
"
)
;
return
baseName
;
}
_SetCanonicalName
(
Intl_Locale_baseName_get
"
get
baseName
"
)
;
function
Intl_Locale_calendar_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_calendar_get
"
)
;
return
getLocaleInternals
(
loc
)
.
calendar
;
}
_SetCanonicalName
(
Intl_Locale_calendar_get
"
get
calendar
"
)
;
function
Intl_Locale_collation_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_collation_get
"
)
;
return
getLocaleInternals
(
loc
)
.
collation
;
}
_SetCanonicalName
(
Intl_Locale_collation_get
"
get
collation
"
)
;
function
Intl_Locale_hourCycle_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_hourCycle_get
"
)
;
return
getLocaleInternals
(
loc
)
.
hourCycle
;
}
_SetCanonicalName
(
Intl_Locale_hourCycle_get
"
get
hourCycle
"
)
;
function
Intl_Locale_caseFirst_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_caseFirst_get
"
)
;
return
getLocaleInternals
(
loc
)
.
caseFirst
;
}
_SetCanonicalName
(
Intl_Locale_caseFirst_get
"
get
caseFirst
"
)
;
function
Intl_Locale_numeric_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_numeric_get
"
)
;
return
getLocaleInternals
(
loc
)
.
numeric
;
}
_SetCanonicalName
(
Intl_Locale_numeric_get
"
get
numeric
"
)
;
function
Intl_Locale_numberingSystem_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_numberingSystem_get
"
)
;
return
getLocaleInternals
(
loc
)
.
numberingSystem
;
}
_SetCanonicalName
(
Intl_Locale_numberingSystem_get
"
get
numberingSystem
"
)
;
function
Intl_Locale_language_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_language_get
"
)
;
var
tagObj
=
getLocaleInternals
(
loc
)
.
locale
;
return
tagObj
.
language
;
}
_SetCanonicalName
(
Intl_Locale_language_get
"
get
language
"
)
;
function
Intl_Locale_script_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_script_get
"
)
;
var
tagObj
=
getLocaleInternals
(
loc
)
.
locale
;
return
tagObj
.
script
;
}
_SetCanonicalName
(
Intl_Locale_script_get
"
get
script
"
)
;
function
Intl_Locale_region_get
(
)
{
var
loc
=
this
;
if
(
!
IsObject
(
loc
)
|
|
(
loc
=
GuardToLocale
(
loc
)
)
=
=
=
null
)
return
callFunction
(
CallLocaleMethodIfWrapped
this
"
Intl_Locale_region_get
"
)
;
var
tagObj
=
getLocaleInternals
(
loc
)
.
locale
;
return
tagObj
.
region
;
}
_SetCanonicalName
(
Intl_Locale_region_get
"
get
region
"
)
;
