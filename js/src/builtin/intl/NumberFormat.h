#
ifndef
builtin_intl_NumberFormat_h
#
define
builtin_intl_NumberFormat_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
namespace
js
{
class
ArrayObject
;
class
FreeOp
;
class
NumberFormatObject
:
public
NativeObject
{
public
:
static
const
Class
class_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
UNUMBER_FORMAT_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
"
"
object
slot
"
)
;
private
:
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
}
;
extern
JSObject
*
CreateNumberFormatPrototype
(
JSContext
*
cx
HandleObject
Intl
Handle
<
GlobalObject
*
>
global
MutableHandleObject
constructor
)
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_NumberFormat_availableLocales
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_numberingSystem
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
intl_FormatNumber
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
namespace
intl
{
using
FieldType
=
js
:
:
ImmutablePropertyNamePtr
JSAtomState
:
:
*
;
struct
Field
{
uint32_t
begin
;
uint32_t
end
;
FieldType
type
;
Field
(
)
=
default
;
Field
(
uint32_t
begin
uint32_t
end
FieldType
type
)
:
begin
(
begin
)
end
(
end
)
type
(
type
)
{
}
}
;
class
NumberFormatFields
{
using
FieldsVector
=
Vector
<
Field
16
>
;
FieldsVector
fields_
;
double
number_
;
public
:
NumberFormatFields
(
JSContext
*
cx
double
number
)
:
fields_
(
cx
)
number_
(
number
)
{
}
MOZ_MUST_USE
bool
append
(
int32_t
field
int32_t
begin
int32_t
end
)
;
MOZ_MUST_USE
ArrayObject
*
toArray
(
JSContext
*
cx
JS
:
:
HandleString
overallResult
FieldType
unitType
)
;
}
;
}
}
#
endif
