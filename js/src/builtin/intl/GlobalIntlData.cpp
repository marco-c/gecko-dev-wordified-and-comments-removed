#
include
"
builtin
/
intl
/
GlobalIntlData
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
builtin
/
intl
/
Collator
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
DateTimeFormat
.
h
"
#
include
"
builtin
/
intl
/
FormatBuffer
.
h
"
#
include
"
builtin
/
intl
/
IntlObject
.
h
"
#
include
"
builtin
/
intl
/
NumberFormat
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
void
js
:
:
intl
:
:
GlobalIntlData
:
:
resetCollator
(
)
{
collatorLocale_
=
nullptr
;
collator_
=
nullptr
;
}
void
js
:
:
intl
:
:
GlobalIntlData
:
:
resetNumberFormat
(
)
{
numberFormatLocale_
=
nullptr
;
numberFormat_
=
nullptr
;
}
void
js
:
:
intl
:
:
GlobalIntlData
:
:
resetDateTimeFormat
(
)
{
dateTimeFormatLocale_
=
nullptr
;
dateTimeFormatToLocaleAll_
=
nullptr
;
dateTimeFormatToLocaleDate_
=
nullptr
;
dateTimeFormatToLocaleTime_
=
nullptr
;
}
bool
js
:
:
intl
:
:
GlobalIntlData
:
:
ensureRuntimeDefaultLocale
(
JSContext
*
cx
)
{
const
char
*
locale
=
cx
-
>
realm
(
)
-
>
getLocale
(
)
;
if
(
!
locale
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
runtimeDefaultLocale_
|
|
!
StringEqualsAscii
(
runtimeDefaultLocale_
locale
)
)
{
runtimeDefaultLocale_
=
NewStringCopyZ
<
CanGC
>
(
cx
locale
)
;
if
(
!
runtimeDefaultLocale_
)
{
return
false
;
}
defaultLocale_
=
nullptr
;
resetCollator
(
)
;
resetNumberFormat
(
)
;
resetDateTimeFormat
(
)
;
}
return
true
;
}
bool
js
:
:
intl
:
:
GlobalIntlData
:
:
ensureRuntimeDefaultTimeZone
(
JSContext
*
cx
)
{
TimeZoneIdentifierVector
timeZoneId
;
if
(
!
DateTimeInfo
:
:
timeZoneId
(
DateTimeInfo
:
:
forceUTC
(
cx
-
>
realm
(
)
)
timeZoneId
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
runtimeDefaultTimeZone_
|
|
!
StringEqualsAscii
(
runtimeDefaultTimeZone_
timeZoneId
.
begin
(
)
timeZoneId
.
length
(
)
)
)
{
runtimeDefaultTimeZone_
=
NewStringCopy
<
CanGC
>
(
cx
static_cast
<
mozilla
:
:
Span
<
const
char
>
>
(
timeZoneId
)
)
;
if
(
!
runtimeDefaultTimeZone_
)
{
return
false
;
}
resetDateTimeFormat
(
)
;
}
return
true
;
}
JSLinearString
*
js
:
:
intl
:
:
GlobalIntlData
:
:
defaultLocale
(
JSContext
*
cx
)
{
if
(
!
ensureRuntimeDefaultLocale
(
cx
)
)
{
return
nullptr
;
}
if
(
!
defaultLocale_
)
{
defaultLocale_
=
ComputeDefaultLocale
(
cx
)
;
}
return
defaultLocale_
;
}
static
inline
bool
EqualLocale
(
const
JSLinearString
*
str1
const
JSLinearString
*
str2
)
{
if
(
str1
&
&
str2
)
{
return
EqualStrings
(
str1
str2
)
;
}
return
!
str1
&
&
!
str2
;
}
static
inline
Value
LocaleOrDefault
(
JSLinearString
*
locale
)
{
if
(
locale
)
{
return
StringValue
(
locale
)
;
}
return
UndefinedValue
(
)
;
}
CollatorObject
*
js
:
:
intl
:
:
GlobalIntlData
:
:
getOrCreateCollator
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
locale
)
{
if
(
!
ensureRuntimeDefaultLocale
(
cx
)
)
{
return
nullptr
;
}
if
(
!
EqualLocale
(
collatorLocale_
locale
)
)
{
resetCollator
(
)
;
collatorLocale_
=
locale
;
}
if
(
!
collator_
)
{
Rooted
<
Value
>
locales
(
cx
LocaleOrDefault
(
locale
)
)
;
auto
*
collator
=
CreateCollator
(
cx
locales
UndefinedHandleValue
)
;
if
(
!
collator
)
{
return
nullptr
;
}
collator_
=
collator
;
}
return
&
collator_
-
>
as
<
CollatorObject
>
(
)
;
}
NumberFormatObject
*
js
:
:
intl
:
:
GlobalIntlData
:
:
getOrCreateNumberFormat
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
locale
)
{
if
(
!
ensureRuntimeDefaultLocale
(
cx
)
)
{
return
nullptr
;
}
if
(
!
EqualLocale
(
numberFormatLocale_
locale
)
)
{
resetNumberFormat
(
)
;
numberFormatLocale_
=
locale
;
}
if
(
!
numberFormat_
)
{
Rooted
<
Value
>
locales
(
cx
LocaleOrDefault
(
locale
)
)
;
auto
*
numberFormat
=
CreateNumberFormat
(
cx
locales
UndefinedHandleValue
)
;
if
(
!
numberFormat
)
{
return
nullptr
;
}
numberFormat_
=
numberFormat
;
}
return
&
numberFormat_
-
>
as
<
NumberFormatObject
>
(
)
;
}
DateTimeFormatObject
*
js
:
:
intl
:
:
GlobalIntlData
:
:
getOrCreateDateTimeFormat
(
JSContext
*
cx
DateTimeFormatKind
kind
Handle
<
JSLinearString
*
>
locale
)
{
if
(
!
ensureRuntimeDefaultLocale
(
cx
)
)
{
return
nullptr
;
}
if
(
!
ensureRuntimeDefaultTimeZone
(
cx
)
)
{
return
nullptr
;
}
if
(
!
EqualLocale
(
dateTimeFormatLocale_
locale
)
)
{
resetDateTimeFormat
(
)
;
dateTimeFormatLocale_
=
locale
;
}
JSObject
*
dtfObject
=
nullptr
;
switch
(
kind
)
{
case
DateTimeFormatKind
:
:
All
:
dtfObject
=
dateTimeFormatToLocaleAll_
;
break
;
case
DateTimeFormatKind
:
:
Date
:
dtfObject
=
dateTimeFormatToLocaleDate_
;
break
;
case
DateTimeFormatKind
:
:
Time
:
dtfObject
=
dateTimeFormatToLocaleTime_
;
break
;
}
if
(
!
dtfObject
)
{
Rooted
<
Value
>
locales
(
cx
LocaleOrDefault
(
locale
)
)
;
auto
*
dateTimeFormat
=
CreateDateTimeFormat
(
cx
locales
UndefinedHandleValue
kind
)
;
if
(
!
dateTimeFormat
)
{
return
nullptr
;
}
switch
(
kind
)
{
case
DateTimeFormatKind
:
:
All
:
dateTimeFormatToLocaleAll_
=
dateTimeFormat
;
break
;
case
DateTimeFormatKind
:
:
Date
:
dateTimeFormatToLocaleDate_
=
dateTimeFormat
;
break
;
case
DateTimeFormatKind
:
:
Time
:
dateTimeFormatToLocaleTime_
=
dateTimeFormat
;
break
;
}
dtfObject
=
dateTimeFormat
;
}
return
&
dtfObject
-
>
as
<
DateTimeFormatObject
>
(
)
;
}
void
js
:
:
intl
:
:
GlobalIntlData
:
:
trace
(
JSTracer
*
trc
)
{
TraceNullableEdge
(
trc
&
runtimeDefaultLocale_
"
GlobalIntlData
:
:
runtimeDefaultLocale_
"
)
;
TraceNullableEdge
(
trc
&
defaultLocale_
"
GlobalIntlData
:
:
defaultLocale_
"
)
;
TraceNullableEdge
(
trc
&
runtimeDefaultTimeZone_
"
GlobalIntlData
:
:
runtimeDefaultTimeZone_
"
)
;
TraceNullableEdge
(
trc
&
collatorLocale_
"
GlobalIntlData
:
:
collatorLocale_
"
)
;
TraceNullableEdge
(
trc
&
collator_
"
GlobalIntlData
:
:
collator_
"
)
;
TraceNullableEdge
(
trc
&
numberFormatLocale_
"
GlobalIntlData
:
:
numberFormatLocale_
"
)
;
TraceNullableEdge
(
trc
&
numberFormat_
"
GlobalIntlData
:
:
numberFormat_
"
)
;
TraceNullableEdge
(
trc
&
dateTimeFormatLocale_
"
GlobalIntlData
:
:
dateTimeFormatLocale_
"
)
;
TraceNullableEdge
(
trc
&
dateTimeFormatToLocaleAll_
"
GlobalIntlData
:
:
dateTimeFormatToLocaleAll_
"
)
;
TraceNullableEdge
(
trc
&
dateTimeFormatToLocaleDate_
"
GlobalIntlData
:
:
dateTimeFormatToLocaleDate_
"
)
;
TraceNullableEdge
(
trc
&
dateTimeFormatToLocaleTime_
"
GlobalIntlData
:
:
dateTimeFormatToLocaleTime_
"
)
;
}
