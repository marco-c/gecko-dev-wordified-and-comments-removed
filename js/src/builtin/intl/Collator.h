#
ifndef
builtin_intl_Collator_h
#
define
builtin_intl_Collator_h
#
include
<
stdint
.
h
>
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
mozilla
:
:
intl
{
class
Collator
;
}
namespace
js
{
class
CollatorObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
INTL_COLLATOR_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
"
"
object
slot
"
)
;
static
constexpr
size_t
EstimatedMemoryUse
=
1128
;
mozilla
:
:
intl
:
:
Collator
*
getCollator
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
INTL_COLLATOR_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
Collator
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setCollator
(
mozilla
:
:
intl
:
:
Collator
*
collator
)
{
setFixedSlot
(
INTL_COLLATOR_SLOT
PrivateValue
(
collator
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
const
ClassSpec
classSpec_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
[
[
nodiscard
]
]
extern
bool
intl_Collator
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_availableCollations
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_CompareStrings
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_isUpperCaseFirst
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_isIgnorePunctuation
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
namespace
intl
{
[
[
nodiscard
]
]
extern
CollatorObject
*
CreateCollator
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
)
;
[
[
nodiscard
]
]
extern
CollatorObject
*
GetOrCreateCollator
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
locales
JS
:
:
Handle
<
JS
:
:
Value
>
options
)
;
[
[
nodiscard
]
]
extern
bool
CompareStrings
(
JSContext
*
cx
JS
:
:
Handle
<
CollatorObject
*
>
collator
JS
:
:
Handle
<
JSString
*
>
str1
JS
:
:
Handle
<
JSString
*
>
str2
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
}
}
#
endif
