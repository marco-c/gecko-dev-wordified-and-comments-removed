function
resolveDateTimeFormatInternals
(
lazyDateTimeFormatData
)
{
assert
(
IsObject
(
lazyDateTimeFormatData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
DateTimeFormat
=
dateTimeFormatInternalProperties
;
var
localeData
=
DateTimeFormat
.
localeData
;
var
r
=
ResolveLocale
(
"
DateTimeFormat
"
lazyDateTimeFormatData
.
requestedLocales
lazyDateTimeFormatData
.
localeOpt
DateTimeFormat
.
relevantExtensionKeys
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
calendar
=
r
.
ca
;
internalProps
.
numberingSystem
=
r
.
nu
;
var
formatOptions
=
lazyDateTimeFormatData
.
formatOptions
;
if
(
r
.
hc
!
=
=
null
&
&
formatOptions
.
hour12
=
=
=
undefined
)
{
formatOptions
.
hourCycle
=
r
.
hc
;
}
internalProps
.
timeZone
=
lazyDateTimeFormatData
.
timeZone
;
if
(
lazyDateTimeFormatData
.
patternOption
!
=
=
undefined
)
{
internalProps
.
pattern
=
lazyDateTimeFormatData
.
patternOption
;
}
else
if
(
lazyDateTimeFormatData
.
dateStyle
!
=
=
undefined
|
|
lazyDateTimeFormatData
.
timeStyle
!
=
=
undefined
)
{
internalProps
.
hourCycle
=
formatOptions
.
hourCycle
;
internalProps
.
hour12
=
formatOptions
.
hour12
;
internalProps
.
dateStyle
=
lazyDateTimeFormatData
.
dateStyle
;
internalProps
.
timeStyle
=
lazyDateTimeFormatData
.
timeStyle
;
}
else
{
internalProps
.
hourCycle
=
formatOptions
.
hourCycle
;
internalProps
.
hour12
=
formatOptions
.
hour12
;
internalProps
.
weekday
=
formatOptions
.
weekday
;
internalProps
.
era
=
formatOptions
.
era
;
internalProps
.
year
=
formatOptions
.
year
;
internalProps
.
month
=
formatOptions
.
month
;
internalProps
.
day
=
formatOptions
.
day
;
internalProps
.
dayPeriod
=
formatOptions
.
dayPeriod
;
internalProps
.
hour
=
formatOptions
.
hour
;
internalProps
.
minute
=
formatOptions
.
minute
;
internalProps
.
second
=
formatOptions
.
second
;
internalProps
.
fractionalSecondDigits
=
formatOptions
.
fractionalSecondDigits
;
internalProps
.
timeZoneName
=
formatOptions
.
timeZoneName
;
}
return
internalProps
;
}
function
getDateTimeFormatInternals
(
obj
)
{
assert
(
IsObject
(
obj
)
"
getDateTimeFormatInternals
called
with
non
-
object
"
)
;
assert
(
intl_GuardToDateTimeFormat
(
obj
)
!
=
=
null
"
getDateTimeFormatInternals
called
with
non
-
DateTimeFormat
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
DateTimeFormat
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
{
return
internalProps
;
}
internalProps
=
resolveDateTimeFormatInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
UnwrapDateTimeFormat
(
dtf
)
{
if
(
IsObject
(
dtf
)
&
&
intl_GuardToDateTimeFormat
(
dtf
)
=
=
=
null
&
&
!
intl_IsWrappedDateTimeFormat
(
dtf
)
&
&
callFunction
(
std_Object_isPrototypeOf
GetBuiltinPrototype
(
"
DateTimeFormat
"
)
dtf
)
)
{
dtf
=
dtf
[
intlFallbackSymbol
(
)
]
;
}
return
dtf
;
}
function
CanonicalizeTimeZoneName
(
timeZone
)
{
assert
(
typeof
timeZone
=
=
=
"
string
"
"
CanonicalizeTimeZoneName
"
)
;
assert
(
timeZone
!
=
=
"
Etc
/
Unknown
"
"
Invalid
time
zone
"
)
;
assert
(
timeZone
=
=
=
intl_IsValidTimeZoneName
(
timeZone
)
"
Time
zone
name
not
normalized
"
)
;
var
ianaTimeZone
=
intl_canonicalizeTimeZone
(
timeZone
)
;
assert
(
ianaTimeZone
!
=
=
"
Etc
/
Unknown
"
"
Invalid
canonical
time
zone
"
)
;
assert
(
ianaTimeZone
=
=
=
intl_IsValidTimeZoneName
(
ianaTimeZone
)
"
Unsupported
canonical
time
zone
"
)
;
if
(
ianaTimeZone
=
=
=
"
Etc
/
UTC
"
|
|
ianaTimeZone
=
=
=
"
Etc
/
GMT
"
)
{
ianaTimeZone
=
"
UTC
"
;
}
return
ianaTimeZone
;
}
var
timeZoneCache
=
{
icuDefaultTimeZone
:
undefined
defaultTimeZone
:
undefined
}
;
function
DefaultTimeZone
(
)
{
if
(
intl_isDefaultTimeZone
(
timeZoneCache
.
icuDefaultTimeZone
)
)
{
return
timeZoneCache
.
defaultTimeZone
;
}
var
icuDefaultTimeZone
=
intl_defaultTimeZone
(
)
;
var
timeZone
=
intl_IsValidTimeZoneName
(
icuDefaultTimeZone
)
;
if
(
timeZone
=
=
=
null
)
{
var
msPerHour
=
60
*
60
*
1000
;
var
offset
=
intl_defaultTimeZoneOffset
(
)
;
assert
(
offset
=
=
=
(
offset
|
0
)
"
milliseconds
offset
shouldn
'
t
be
able
to
exceed
int32_t
range
"
)
;
var
offsetHours
=
offset
/
msPerHour
;
var
offsetHoursFraction
=
offset
%
msPerHour
;
if
(
offsetHoursFraction
=
=
=
0
)
{
timeZone
=
"
Etc
/
GMT
"
+
(
offsetHours
<
0
?
"
+
"
:
"
-
"
)
+
std_Math_abs
(
offsetHours
)
;
timeZone
=
intl_IsValidTimeZoneName
(
timeZone
)
;
}
if
(
timeZone
=
=
=
null
)
{
timeZone
=
"
UTC
"
;
}
}
var
defaultTimeZone
=
CanonicalizeTimeZoneName
(
timeZone
)
;
timeZoneCache
.
defaultTimeZone
=
defaultTimeZone
;
timeZoneCache
.
icuDefaultTimeZone
=
icuDefaultTimeZone
;
return
defaultTimeZone
;
}
function
TimeZoneOffsetString
(
offsetString
)
{
assert
(
typeof
(
offsetString
)
=
=
=
"
string
"
"
offsetString
is
a
string
"
)
;
if
(
offsetString
.
length
<
3
|
|
offsetString
.
length
>
6
)
{
return
null
;
}
var
sign
=
offsetString
[
0
]
;
if
(
sign
!
=
=
"
+
"
&
&
sign
!
=
=
"
-
"
)
{
return
null
;
}
var
hourTens
=
offsetString
[
1
]
;
var
hourOnes
=
offsetString
[
2
]
;
var
minutesTens
=
"
0
"
;
var
minutesOnes
=
"
0
"
;
if
(
offsetString
.
length
>
3
)
{
var
separatorLength
=
offsetString
[
3
]
=
=
=
"
:
"
?
1
:
0
;
if
(
offsetString
.
length
!
=
=
(
5
+
separatorLength
)
)
{
return
null
;
}
minutesTens
=
offsetString
[
3
+
separatorLength
]
;
minutesOnes
=
offsetString
[
4
+
separatorLength
]
;
}
if
(
hourTens
<
"
0
"
|
|
hourOnes
<
"
0
"
|
|
minutesTens
<
"
0
"
|
|
minutesOnes
<
"
0
"
|
|
hourTens
>
"
2
"
|
|
hourOnes
>
"
9
"
|
|
minutesTens
>
"
5
"
|
|
minutesOnes
>
"
9
"
|
|
(
hourTens
=
=
=
"
2
"
&
&
hourOnes
>
"
3
"
)
)
{
return
null
;
}
if
(
hourTens
=
=
=
"
0
"
&
&
hourOnes
=
=
=
"
0
"
&
&
minutesTens
=
=
=
"
0
"
&
&
minutesOnes
=
=
=
"
0
"
)
{
sign
=
"
+
"
;
}
return
sign
+
hourTens
+
hourOnes
+
"
:
"
+
minutesTens
+
minutesOnes
;
}
function
InitializeDateTimeFormat
(
dateTimeFormat
thisValue
locales
options
required
defaults
mozExtensions
)
{
assert
(
IsObject
(
dateTimeFormat
)
"
InitializeDateTimeFormat
called
with
non
-
Object
"
)
;
assert
(
intl_GuardToDateTimeFormat
(
dateTimeFormat
)
!
=
=
null
"
InitializeDateTimeFormat
called
with
non
-
DateTimeFormat
"
)
;
assert
(
required
=
=
=
"
date
"
|
|
required
=
=
=
"
time
"
|
|
required
=
=
=
"
any
"
InitializeDateTimeFormat
called
with
invalid
required
value
:
{
required
}
)
;
assert
(
defaults
=
=
=
"
date
"
|
|
defaults
=
=
=
"
time
"
|
|
defaults
=
=
=
"
all
"
InitializeDateTimeFormat
called
with
invalid
defaults
value
:
{
defaults
}
)
;
var
lazyDateTimeFormatData
=
std_Object_create
(
null
)
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyDateTimeFormatData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
{
options
=
std_Object_create
(
null
)
;
}
else
{
options
=
ToObject
(
options
)
;
}
var
localeOpt
=
new_Record
(
)
;
lazyDateTimeFormatData
.
localeOpt
=
localeOpt
;
var
localeMatcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
localeOpt
.
localeMatcher
=
localeMatcher
;
var
calendar
=
GetOption
(
options
"
calendar
"
"
string
"
undefined
undefined
)
;
if
(
calendar
!
=
=
undefined
)
{
calendar
=
intl_ValidateAndCanonicalizeUnicodeExtensionType
(
calendar
"
calendar
"
"
ca
"
)
;
}
localeOpt
.
ca
=
calendar
;
var
numberingSystem
=
GetOption
(
options
"
numberingSystem
"
"
string
"
undefined
undefined
)
;
if
(
numberingSystem
!
=
=
undefined
)
{
numberingSystem
=
intl_ValidateAndCanonicalizeUnicodeExtensionType
(
numberingSystem
"
numberingSystem
"
"
nu
"
)
;
}
localeOpt
.
nu
=
numberingSystem
;
var
hour12
=
GetOption
(
options
"
hour12
"
"
boolean
"
undefined
undefined
)
;
var
hourCycle
=
GetOption
(
options
"
hourCycle
"
"
string
"
[
"
h11
"
"
h12
"
"
h23
"
"
h24
"
]
undefined
)
;
if
(
hour12
!
=
=
undefined
)
{
hourCycle
=
null
;
}
localeOpt
.
hc
=
hourCycle
;
var
timeZone
=
options
.
timeZone
;
if
(
timeZone
=
=
=
undefined
)
{
timeZone
=
DefaultTimeZone
(
)
;
}
else
{
timeZone
=
ToString
(
timeZone
)
;
var
offsetString
=
TimeZoneOffsetString
(
timeZone
)
;
if
(
offsetString
!
=
=
null
)
{
timeZone
=
offsetString
;
}
else
{
var
validTimeZone
=
intl_IsValidTimeZoneName
(
timeZone
)
;
if
(
validTimeZone
!
=
=
null
)
{
timeZone
=
CanonicalizeTimeZoneName
(
validTimeZone
)
;
}
else
{
ThrowRangeError
(
JSMSG_INVALID_TIME_ZONE
timeZone
)
;
}
}
}
lazyDateTimeFormatData
.
timeZone
=
timeZone
;
var
formatOptions
=
new_Record
(
)
;
lazyDateTimeFormatData
.
formatOptions
=
formatOptions
;
if
(
mozExtensions
)
{
var
pattern
=
GetOption
(
options
"
pattern
"
"
string
"
undefined
undefined
)
;
lazyDateTimeFormatData
.
patternOption
=
pattern
;
}
if
(
hour12
!
=
=
undefined
)
{
formatOptions
.
hour12
=
hour12
;
}
formatOptions
.
weekday
=
GetOption
(
options
"
weekday
"
"
string
"
[
"
narrow
"
"
short
"
"
long
"
]
undefined
)
;
formatOptions
.
era
=
GetOption
(
options
"
era
"
"
string
"
[
"
narrow
"
"
short
"
"
long
"
]
undefined
)
;
formatOptions
.
year
=
GetOption
(
options
"
year
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
]
undefined
)
;
formatOptions
.
month
=
GetOption
(
options
"
month
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
"
narrow
"
"
short
"
"
long
"
]
undefined
)
;
formatOptions
.
day
=
GetOption
(
options
"
day
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
]
undefined
)
;
formatOptions
.
dayPeriod
=
GetOption
(
options
"
dayPeriod
"
"
string
"
[
"
narrow
"
"
short
"
"
long
"
]
undefined
)
;
formatOptions
.
hour
=
GetOption
(
options
"
hour
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
]
undefined
)
;
formatOptions
.
minute
=
GetOption
(
options
"
minute
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
]
undefined
)
;
formatOptions
.
second
=
GetOption
(
options
"
second
"
"
string
"
[
"
2
-
digit
"
"
numeric
"
]
undefined
)
;
formatOptions
.
fractionalSecondDigits
=
GetNumberOption
(
options
"
fractionalSecondDigits
"
1
3
undefined
)
;
formatOptions
.
timeZoneName
=
GetOption
(
options
"
timeZoneName
"
"
string
"
[
"
short
"
"
long
"
"
shortOffset
"
"
longOffset
"
"
shortGeneric
"
"
longGeneric
"
]
undefined
)
;
var
formatMatcher
=
GetOption
(
options
"
formatMatcher
"
"
string
"
[
"
basic
"
"
best
fit
"
]
"
best
fit
"
)
;
void
formatMatcher
;
var
dateStyle
=
GetOption
(
options
"
dateStyle
"
"
string
"
[
"
full
"
"
long
"
"
medium
"
"
short
"
]
undefined
)
;
lazyDateTimeFormatData
.
dateStyle
=
dateStyle
;
var
timeStyle
=
GetOption
(
options
"
timeStyle
"
"
string
"
[
"
full
"
"
long
"
"
medium
"
"
short
"
]
undefined
)
;
lazyDateTimeFormatData
.
timeStyle
=
timeStyle
;
if
(
dateStyle
!
=
=
undefined
|
|
timeStyle
!
=
=
undefined
)
{
var
explicitFormatComponent
=
formatOptions
.
weekday
!
=
=
undefined
?
"
weekday
"
:
formatOptions
.
era
!
=
=
undefined
?
"
era
"
:
formatOptions
.
year
!
=
=
undefined
?
"
year
"
:
formatOptions
.
month
!
=
=
undefined
?
"
month
"
:
formatOptions
.
day
!
=
=
undefined
?
"
day
"
:
formatOptions
.
dayPeriod
!
=
=
undefined
?
"
dayPeriod
"
:
formatOptions
.
hour
!
=
=
undefined
?
"
hour
"
:
formatOptions
.
minute
!
=
=
undefined
?
"
minute
"
:
formatOptions
.
second
!
=
=
undefined
?
"
second
"
:
formatOptions
.
fractionalSecondDigits
!
=
=
undefined
?
"
fractionalSecondDigits
"
:
formatOptions
.
timeZoneName
!
=
=
undefined
?
"
timeZoneName
"
:
undefined
;
if
(
explicitFormatComponent
!
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_INVALID_DATETIME_OPTION
explicitFormatComponent
dateStyle
!
=
=
undefined
?
"
dateStyle
"
:
"
timeStyle
"
)
;
}
if
(
required
=
=
=
"
date
"
&
&
timeStyle
!
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_INVALID_DATETIME_STYLE
"
timeStyle
"
"
toLocaleDateString
"
)
;
}
if
(
required
=
=
=
"
time
"
&
&
dateStyle
!
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_INVALID_DATETIME_STYLE
"
dateStyle
"
"
toLocaleTimeString
"
)
;
}
}
else
{
var
needDefaults
=
true
;
if
(
required
=
=
=
"
date
"
|
|
required
=
=
=
"
any
"
)
{
needDefaults
=
formatOptions
.
weekday
=
=
=
undefined
&
&
formatOptions
.
year
=
=
=
undefined
&
&
formatOptions
.
month
=
=
=
undefined
&
&
formatOptions
.
day
=
=
=
undefined
;
}
if
(
required
=
=
=
"
time
"
|
|
required
=
=
=
"
any
"
)
{
needDefaults
=
needDefaults
&
&
formatOptions
.
dayPeriod
=
=
=
undefined
&
&
formatOptions
.
hour
=
=
=
undefined
&
&
formatOptions
.
minute
=
=
=
undefined
&
&
formatOptions
.
second
=
=
=
undefined
&
&
formatOptions
.
fractionalSecondDigits
=
=
=
undefined
;
}
if
(
needDefaults
&
&
(
defaults
=
=
=
"
date
"
|
|
defaults
=
=
=
"
all
"
)
)
{
formatOptions
.
year
=
"
numeric
"
;
formatOptions
.
month
=
"
numeric
"
;
formatOptions
.
day
=
"
numeric
"
;
}
if
(
needDefaults
&
&
(
defaults
=
=
=
"
time
"
|
|
defaults
=
=
=
"
all
"
)
)
{
formatOptions
.
hour
=
"
numeric
"
;
formatOptions
.
minute
=
"
numeric
"
;
formatOptions
.
second
=
"
numeric
"
;
}
}
initializeIntlObject
(
dateTimeFormat
"
DateTimeFormat
"
lazyDateTimeFormatData
)
;
if
(
dateTimeFormat
!
=
=
thisValue
&
&
callFunction
(
std_Object_isPrototypeOf
GetBuiltinPrototype
(
"
DateTimeFormat
"
)
thisValue
)
)
{
DefineDataProperty
(
thisValue
intlFallbackSymbol
(
)
dateTimeFormat
ATTR_NONENUMERABLE
|
ATTR_NONCONFIGURABLE
|
ATTR_NONWRITABLE
)
;
return
thisValue
;
}
return
dateTimeFormat
;
}
function
Intl_DateTimeFormat_supportedLocalesOf
(
locales
)
{
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
availableLocales
=
"
DateTimeFormat
"
;
var
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
var
dateTimeFormatInternalProperties
=
{
localeData
:
dateTimeFormatLocaleData
relevantExtensionKeys
:
[
"
ca
"
"
hc
"
"
nu
"
]
}
;
function
dateTimeFormatLocaleData
(
)
{
return
{
ca
:
intl_availableCalendars
nu
:
getNumberingSystems
hc
:
(
)
=
>
{
return
[
null
"
h11
"
"
h12
"
"
h23
"
"
h24
"
]
;
}
default
:
{
ca
:
intl_defaultCalendar
nu
:
intl_numberingSystem
hc
:
(
)
=
>
{
return
null
;
}
}
}
;
}
function
createDateTimeFormatFormat
(
dtf
)
{
return
function
(
date
)
{
assert
(
IsObject
(
dtf
)
"
dateTimeFormatFormatToBind
called
with
non
-
Object
"
)
;
assert
(
intl_GuardToDateTimeFormat
(
dtf
)
!
=
=
null
"
dateTimeFormatFormatToBind
called
with
non
-
DateTimeFormat
"
)
;
var
x
=
date
=
=
=
undefined
?
std_Date_now
(
)
:
ToNumber
(
date
)
;
return
intl_FormatDateTime
(
dtf
x
false
)
;
}
;
}
function
Intl_DateTimeFormat_format_get
(
)
{
var
thisArg
=
UnwrapDateTimeFormat
(
this
)
;
var
dtf
=
thisArg
;
if
(
!
IsObject
(
dtf
)
|
|
(
dtf
=
intl_GuardToDateTimeFormat
(
dtf
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDateTimeFormatMethodIfWrapped
thisArg
"
Intl_DateTimeFormat_format_get
"
)
;
}
var
internals
=
getDateTimeFormatInternals
(
dtf
)
;
if
(
internals
.
boundFormat
=
=
=
undefined
)
{
internals
.
boundFormat
=
createDateTimeFormatFormat
(
dtf
)
;
}
return
internals
.
boundFormat
;
}
SetCanonicalName
(
Intl_DateTimeFormat_format_get
"
get
format
"
)
;
function
Intl_DateTimeFormat_formatToParts
(
date
)
{
var
dtf
=
this
;
if
(
!
IsObject
(
dtf
)
|
|
(
dtf
=
intl_GuardToDateTimeFormat
(
dtf
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDateTimeFormatMethodIfWrapped
this
date
"
Intl_DateTimeFormat_formatToParts
"
)
;
}
var
x
=
date
=
=
=
undefined
?
std_Date_now
(
)
:
ToNumber
(
date
)
;
getDateTimeFormatInternals
(
dtf
)
;
return
intl_FormatDateTime
(
dtf
x
true
)
;
}
function
Intl_DateTimeFormat_formatRange
(
startDate
endDate
)
{
var
dtf
=
this
;
if
(
!
IsObject
(
dtf
)
|
|
(
dtf
=
intl_GuardToDateTimeFormat
(
dtf
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDateTimeFormatMethodIfWrapped
this
startDate
endDate
"
Intl_DateTimeFormat_formatRange
"
)
;
}
if
(
startDate
=
=
=
undefined
|
|
endDate
=
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_UNDEFINED_DATE
startDate
=
=
=
undefined
?
"
start
"
:
"
end
"
"
formatRange
"
)
;
}
var
x
=
ToNumber
(
startDate
)
;
var
y
=
ToNumber
(
endDate
)
;
getDateTimeFormatInternals
(
dtf
)
;
return
intl_FormatDateTimeRange
(
dtf
x
y
false
)
;
}
function
Intl_DateTimeFormat_formatRangeToParts
(
startDate
endDate
)
{
var
dtf
=
this
;
if
(
!
IsObject
(
dtf
)
|
|
(
dtf
=
intl_GuardToDateTimeFormat
(
dtf
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDateTimeFormatMethodIfWrapped
this
startDate
endDate
"
Intl_DateTimeFormat_formatRangeToParts
"
)
;
}
if
(
startDate
=
=
=
undefined
|
|
endDate
=
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_UNDEFINED_DATE
startDate
=
=
=
undefined
?
"
start
"
:
"
end
"
"
formatRangeToParts
"
)
;
}
var
x
=
ToNumber
(
startDate
)
;
var
y
=
ToNumber
(
endDate
)
;
getDateTimeFormatInternals
(
dtf
)
;
return
intl_FormatDateTimeRange
(
dtf
x
y
true
)
;
}
function
Intl_DateTimeFormat_resolvedOptions
(
)
{
var
thisArg
=
UnwrapDateTimeFormat
(
this
)
;
var
dtf
=
thisArg
;
if
(
!
IsObject
(
dtf
)
|
|
(
dtf
=
intl_GuardToDateTimeFormat
(
dtf
)
)
=
=
=
null
)
{
return
callFunction
(
intl_CallDateTimeFormatMethodIfWrapped
thisArg
"
Intl_DateTimeFormat_resolvedOptions
"
)
;
}
var
internals
=
getDateTimeFormatInternals
(
dtf
)
;
var
result
=
{
locale
:
internals
.
locale
calendar
:
internals
.
calendar
numberingSystem
:
internals
.
numberingSystem
timeZone
:
internals
.
timeZone
}
;
if
(
internals
.
pattern
!
=
=
undefined
)
{
DefineDataProperty
(
result
"
pattern
"
internals
.
pattern
)
;
}
var
hasDateStyle
=
internals
.
dateStyle
!
=
=
undefined
;
var
hasTimeStyle
=
internals
.
timeStyle
!
=
=
undefined
;
if
(
hasDateStyle
|
|
hasTimeStyle
)
{
if
(
hasTimeStyle
)
{
intl_resolveDateTimeFormatComponents
(
dtf
result
false
)
;
}
if
(
hasDateStyle
)
{
DefineDataProperty
(
result
"
dateStyle
"
internals
.
dateStyle
)
;
}
if
(
hasTimeStyle
)
{
DefineDataProperty
(
result
"
timeStyle
"
internals
.
timeStyle
)
;
}
}
else
{
intl_resolveDateTimeFormatComponents
(
dtf
result
true
)
;
}
return
result
;
}
