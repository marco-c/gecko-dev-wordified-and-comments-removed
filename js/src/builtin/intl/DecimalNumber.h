#
ifndef
builtin_intl_DecimalNumber_h
#
define
builtin_intl_DecimalNumber_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
class
JSLinearString
;
namespace
JS
{
class
JS_PUBLIC_API
AutoCheckCannotGC
;
}
namespace
js
:
:
intl
{
class
MOZ_STACK_CLASS
DecimalNumber
final
{
using
Latin1String
=
mozilla
:
:
Span
<
const
JS
:
:
Latin1Char
>
;
using
TwoByteString
=
mozilla
:
:
Span
<
const
char16_t
>
;
mozilla
:
:
Variant
<
Latin1String
TwoByteString
>
string_
;
char
charAt
(
size_t
i
)
const
{
if
(
string_
.
is
<
Latin1String
>
(
)
)
{
return
static_cast
<
char
>
(
string_
.
as
<
Latin1String
>
(
)
[
i
]
)
;
}
return
static_cast
<
char
>
(
string_
.
as
<
TwoByteString
>
(
)
[
i
]
)
;
}
int32_t
exponent_
=
0
;
size_t
significandStart_
=
0
;
size_t
significandEnd_
=
0
;
bool
zero_
=
false
;
bool
negative_
=
false
;
bool
exponentTooLarge_
=
false
;
template
<
typename
CharT
>
explicit
DecimalNumber
(
mozilla
:
:
Span
<
const
CharT
>
string
)
:
string_
(
string
)
{
}
public
:
bool
isZero
(
)
const
{
return
zero_
;
}
bool
isNegative
(
)
const
{
return
negative_
;
}
bool
exponentTooLarge
(
)
const
{
return
exponentTooLarge_
;
}
int32_t
exponent
(
)
const
{
return
exponent_
;
}
size_t
significandStart
(
)
const
{
return
significandStart_
;
}
size_t
significandEnd
(
)
const
{
return
significandEnd_
;
}
int32_t
compareTo
(
const
DecimalNumber
&
other
)
const
;
template
<
typename
CharT
>
static
mozilla
:
:
Maybe
<
DecimalNumber
>
from
(
mozilla
:
:
Span
<
const
CharT
>
chars
)
;
static
mozilla
:
:
Maybe
<
DecimalNumber
>
from
(
JSLinearString
*
str
JS
:
:
AutoCheckCannotGC
&
nogc
)
;
}
;
}
#
endif
