var
relativeTimeFormatInternalProperties
=
{
localeData
:
relativeTimeFormatLocaleData
_availableLocales
:
null
availableLocales
:
function
(
)
{
var
locales
=
this
.
_availableLocales
;
if
(
locales
)
return
locales
;
locales
=
intl_RelativeTimeFormat_availableLocales
(
)
;
addSpecialMissingLanguageTags
(
locales
)
;
return
(
this
.
_availableLocales
=
locales
)
;
}
relevantExtensionKeys
:
[
]
}
;
function
relativeTimeFormatLocaleData
(
)
{
return
{
}
;
}
function
resolveRelativeTimeFormatInternals
(
lazyRelativeTimeFormatData
)
{
assert
(
IsObject
(
lazyRelativeTimeFormatData
)
"
lazy
data
not
an
object
?
"
)
;
var
internalProps
=
std_Object_create
(
null
)
;
var
RelativeTimeFormat
=
relativeTimeFormatInternalProperties
;
const
r
=
ResolveLocale
(
callFunction
(
RelativeTimeFormat
.
availableLocales
RelativeTimeFormat
)
lazyRelativeTimeFormatData
.
requestedLocales
lazyRelativeTimeFormatData
.
opt
RelativeTimeFormat
.
relevantExtensionKeys
RelativeTimeFormat
.
localeData
)
;
internalProps
.
locale
=
r
.
locale
;
internalProps
.
style
=
lazyRelativeTimeFormatData
.
style
;
internalProps
.
numeric
=
lazyRelativeTimeFormatData
.
numeric
;
return
internalProps
;
}
function
getRelativeTimeFormatInternals
(
obj
methodName
)
{
assert
(
IsObject
(
obj
)
"
getRelativeTimeFormatInternals
called
with
non
-
object
"
)
;
assert
(
GuardToRelativeTimeFormat
(
obj
)
!
=
=
null
"
getRelativeTimeFormatInternals
called
with
non
-
RelativeTimeFormat
"
)
;
var
internals
=
getIntlObjectInternals
(
obj
)
;
assert
(
internals
.
type
=
=
=
"
RelativeTimeFormat
"
"
bad
type
escaped
getIntlObjectInternals
"
)
;
var
internalProps
=
maybeInternalProperties
(
internals
)
;
if
(
internalProps
)
return
internalProps
;
internalProps
=
resolveRelativeTimeFormatInternals
(
internals
.
lazyData
)
;
setInternalProperties
(
internals
internalProps
)
;
return
internalProps
;
}
function
InitializeRelativeTimeFormat
(
relativeTimeFormat
locales
options
)
{
assert
(
IsObject
(
relativeTimeFormat
)
"
InitializeRelativeimeFormat
called
with
non
-
object
"
)
;
assert
(
GuardToRelativeTimeFormat
(
relativeTimeFormat
)
!
=
=
null
"
InitializeRelativeTimeFormat
called
with
non
-
RelativeTimeFormat
"
)
;
const
lazyRelativeTimeFormatData
=
std_Object_create
(
null
)
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
lazyRelativeTimeFormatData
.
requestedLocales
=
requestedLocales
;
if
(
options
=
=
=
undefined
)
options
=
std_Object_create
(
null
)
;
else
options
=
ToObject
(
options
)
;
let
opt
=
new
Record
(
)
;
let
matcher
=
GetOption
(
options
"
localeMatcher
"
"
string
"
[
"
lookup
"
"
best
fit
"
]
"
best
fit
"
)
;
opt
.
localeMatcher
=
matcher
;
lazyRelativeTimeFormatData
.
opt
=
opt
;
const
style
=
GetOption
(
options
"
style
"
"
string
"
[
"
long
"
"
short
"
"
narrow
"
]
"
long
"
)
;
lazyRelativeTimeFormatData
.
style
=
style
;
const
numeric
=
GetOption
(
options
"
numeric
"
"
string
"
[
"
always
"
"
auto
"
]
"
always
"
)
;
lazyRelativeTimeFormatData
.
numeric
=
numeric
;
initializeIntlObject
(
relativeTimeFormat
"
RelativeTimeFormat
"
lazyRelativeTimeFormatData
)
;
}
function
Intl_RelativeTimeFormat_supportedLocalesOf
(
locales
)
{
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
availableLocales
=
callFunction
(
relativeTimeFormatInternalProperties
.
availableLocales
relativeTimeFormatInternalProperties
)
;
let
requestedLocales
=
CanonicalizeLocaleList
(
locales
)
;
return
SupportedLocales
(
availableLocales
requestedLocales
options
)
;
}
function
Intl_RelativeTimeFormat_format
(
value
unit
)
{
let
relativeTimeFormat
=
this
;
if
(
!
IsObject
(
relativeTimeFormat
)
|
|
(
relativeTimeFormat
=
GuardToRelativeTimeFormat
(
relativeTimeFormat
)
)
=
=
=
null
)
ThrowTypeError
(
JSMSG_INTL_OBJECT_NOT_INITED
"
RelativeTimeFormat
"
"
format
"
"
RelativeTimeFormat
"
)
;
var
internals
=
getRelativeTimeFormatInternals
(
relativeTimeFormat
)
;
let
t
=
ToNumber
(
value
)
;
let
u
=
ToString
(
unit
)
;
if
(
!
Number_isFinite
(
t
)
)
{
ThrowRangeError
(
JSMSG_DATE_NOT_FINITE
"
RelativeTimeFormat
"
)
;
}
switch
(
u
)
{
case
"
second
"
:
case
"
seconds
"
:
case
"
minute
"
:
case
"
minutes
"
:
case
"
hour
"
:
case
"
hours
"
:
case
"
day
"
:
case
"
days
"
:
case
"
week
"
:
case
"
weeks
"
:
case
"
month
"
:
case
"
months
"
:
case
"
quarter
"
:
case
"
quarters
"
:
case
"
year
"
:
case
"
years
"
:
break
;
default
:
ThrowRangeError
(
JSMSG_INVALID_OPTION_VALUE
"
unit
"
u
)
;
}
return
intl_FormatRelativeTime
(
relativeTimeFormat
t
u
internals
.
numeric
)
;
}
function
Intl_RelativeTimeFormat_resolvedOptions
(
)
{
var
relativeTimeFormat
;
if
(
!
IsObject
(
this
)
|
|
(
relativeTimeFormat
=
GuardToRelativeTimeFormat
(
this
)
)
=
=
=
null
)
{
ThrowTypeError
(
JSMSG_INTL_OBJECT_NOT_INITED
"
RelativeTimeFormat
"
"
resolvedOptions
"
"
RelativeTimeFormat
"
)
;
}
var
internals
=
getRelativeTimeFormatInternals
(
relativeTimeFormat
"
resolvedOptions
"
)
;
var
result
=
{
locale
:
internals
.
locale
style
:
internals
.
style
numeric
:
internals
.
numeric
}
;
return
result
;
}
