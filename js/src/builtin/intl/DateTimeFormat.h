#
ifndef
builtin_intl_DateTimeFormat_h
#
define
builtin_intl_DateTimeFormat_h
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
mozilla
:
:
intl
{
class
DateTimeFormat
;
class
DateIntervalFormat
;
}
namespace
js
{
class
DateTimeFormatObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
INTERNALS_SLOT
=
0
;
static
constexpr
uint32_t
DATE_FORMAT_SLOT
=
1
;
static
constexpr
uint32_t
DATE_INTERVAL_FORMAT_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
static_assert
(
INTERNALS_SLOT
=
=
INTL_INTERNALS_OBJECT_SLOT
"
INTERNALS_SLOT
must
match
self
-
hosting
define
for
internals
"
"
object
slot
"
)
;
static
constexpr
size_t
UDateFormatEstimatedMemoryUse
=
105402
;
static
constexpr
size_t
UDateIntervalFormatEstimatedMemoryUse
=
133064
;
mozilla
:
:
intl
:
:
DateTimeFormat
*
getDateFormat
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
DATE_FORMAT_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
DateTimeFormat
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setDateFormat
(
mozilla
:
:
intl
:
:
DateTimeFormat
*
dateFormat
)
{
setFixedSlot
(
DATE_FORMAT_SLOT
PrivateValue
(
dateFormat
)
)
;
}
mozilla
:
:
intl
:
:
DateIntervalFormat
*
getDateIntervalFormat
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
DATE_INTERVAL_FORMAT_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
DateIntervalFormat
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setDateIntervalFormat
(
mozilla
:
:
intl
:
:
DateIntervalFormat
*
dateIntervalFormat
)
{
setFixedSlot
(
DATE_INTERVAL_FORMAT_SLOT
PrivateValue
(
dateIntervalFormat
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
const
ClassSpec
classSpec_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
[
[
nodiscard
]
]
extern
bool
intl_DateTimeFormat
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_availableCalendars
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_defaultCalendar
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_IsValidTimeZoneName
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_canonicalizeTimeZone
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_defaultTimeZone
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_defaultTimeZoneOffset
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_isDefaultTimeZone
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_FormatDateTime
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_FormatDateTimeRange
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intl_resolveDateTimeFormatComponents
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
}
#
endif
