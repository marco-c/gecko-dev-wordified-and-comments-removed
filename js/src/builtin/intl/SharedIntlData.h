#
ifndef
builtin_intl_SharedIntlData_h
#
define
builtin_intl_SharedIntlData_h
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
stddef
.
h
>
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CharacterEncoding
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
vm
/
StringType
.
h
"
using
UDateTimePatternGenerator
=
void
*
;
namespace
js
{
namespace
intl
{
class
DateTimePatternGeneratorDeleter
{
public
:
void
operator
(
)
(
UDateTimePatternGenerator
*
ptr
)
;
}
;
class
SharedIntlData
{
struct
LinearStringLookup
{
union
{
const
JS
:
:
Latin1Char
*
latin1Chars
;
const
char16_t
*
twoByteChars
;
}
;
bool
isLatin1
;
size_t
length
;
JS
:
:
AutoCheckCannotGC
nogc
;
HashNumber
hash
=
0
;
explicit
LinearStringLookup
(
JSLinearString
*
string
)
:
isLatin1
(
string
-
>
hasLatin1Chars
(
)
)
length
(
string
-
>
length
(
)
)
{
if
(
isLatin1
)
{
latin1Chars
=
string
-
>
latin1Chars
(
nogc
)
;
}
else
{
twoByteChars
=
string
-
>
twoByteChars
(
nogc
)
;
}
}
}
;
private
:
using
TimeZoneName
=
JSAtom
*
;
struct
TimeZoneHasher
{
struct
Lookup
:
LinearStringLookup
{
explicit
Lookup
(
JSLinearString
*
timeZone
)
;
}
;
static
js
:
:
HashNumber
hash
(
const
Lookup
&
lookup
)
{
return
lookup
.
hash
;
}
static
bool
match
(
TimeZoneName
key
const
Lookup
&
lookup
)
;
}
;
using
TimeZoneSet
=
GCHashSet
<
TimeZoneName
TimeZoneHasher
SystemAllocPolicy
>
;
using
TimeZoneMap
=
GCHashMap
<
TimeZoneName
TimeZoneName
TimeZoneHasher
SystemAllocPolicy
>
;
TimeZoneSet
availableTimeZones
;
TimeZoneSet
ianaZonesTreatedAsLinksByICU
;
TimeZoneMap
ianaLinksCanonicalizedDifferentlyByICU
;
bool
timeZoneDataInitialized
=
false
;
bool
ensureTimeZones
(
JSContext
*
cx
)
;
public
:
bool
validateTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
result
)
;
bool
tryCanonicalizeTimeZoneConsistentWithIANA
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
result
)
;
private
:
#
if
DEBUG
|
|
MOZ_SYSTEM_ICU
using
Locale
=
JSAtom
*
;
struct
LocaleHasher
{
struct
Lookup
:
LinearStringLookup
{
explicit
Lookup
(
JSLinearString
*
locale
)
;
}
;
static
js
:
:
HashNumber
hash
(
const
Lookup
&
lookup
)
{
return
lookup
.
hash
;
}
static
bool
match
(
Locale
key
const
Lookup
&
lookup
)
;
}
;
using
LocaleSet
=
GCHashSet
<
Locale
LocaleHasher
SystemAllocPolicy
>
;
LocaleSet
upperCaseFirstLocales
;
bool
upperCaseFirstInitialized
=
false
;
bool
ensureUpperCaseFirstLocales
(
JSContext
*
cx
)
;
#
endif
public
:
bool
isUpperCaseFirst
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
locale
bool
*
isUpperFirst
)
;
private
:
using
UniqueUDateTimePatternGenerator
=
mozilla
:
:
UniquePtr
<
UDateTimePatternGenerator
DateTimePatternGeneratorDeleter
>
;
UniqueUDateTimePatternGenerator
dateTimePatternGenerator
;
JS
:
:
UniqueChars
dateTimePatternGeneratorLocale
;
public
:
UDateTimePatternGenerator
*
getDateTimePatternGenerator
(
JSContext
*
cx
const
char
*
locale
)
;
public
:
void
destroyInstance
(
)
;
void
trace
(
JSTracer
*
trc
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
}
}
#
endif
