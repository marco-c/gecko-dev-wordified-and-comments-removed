#
ifndef
builtin_SIMD_h
#
define
builtin_SIMD_h
#
include
"
jsapi
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
SIMDConstants
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
Conversions
.
h
"
namespace
js
{
class
GlobalObject
;
struct
Float32x4
{
typedef
float
Elem
;
static
const
unsigned
lanes
=
4
;
static
const
SimdType
type
=
SimdType
:
:
Float32x4
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
double
d
;
if
(
!
ToNumber
(
cx
v
&
d
)
)
return
false
;
*
out
=
float
(
d
)
;
return
true
;
}
static
Value
ToValue
(
Elem
value
)
{
return
DoubleValue
(
JS
:
:
CanonicalizeNaN
(
value
)
)
;
}
}
;
struct
Float64x2
{
typedef
double
Elem
;
static
const
unsigned
lanes
=
2
;
static
const
SimdType
type
=
SimdType
:
:
Float64x2
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToNumber
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
DoubleValue
(
JS
:
:
CanonicalizeNaN
(
value
)
)
;
}
}
;
struct
Int8x16
{
typedef
int8_t
Elem
;
static
const
unsigned
lanes
=
16
;
static
const
SimdType
type
=
SimdType
:
:
Int8x16
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToInt8
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Int16x8
{
typedef
int16_t
Elem
;
static
const
unsigned
lanes
=
8
;
static
const
SimdType
type
=
SimdType
:
:
Int16x8
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToInt16
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Int32x4
{
typedef
int32_t
Elem
;
static
const
unsigned
lanes
=
4
;
static
const
SimdType
type
=
SimdType
:
:
Int32x4
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToInt32
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Uint8x16
{
typedef
uint8_t
Elem
;
static
const
unsigned
lanes
=
16
;
static
const
SimdType
type
=
SimdType
:
:
Uint8x16
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToUint8
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Uint16x8
{
typedef
uint16_t
Elem
;
static
const
unsigned
lanes
=
8
;
static
const
SimdType
type
=
SimdType
:
:
Uint16x8
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToUint16
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Uint32x4
{
typedef
uint32_t
Elem
;
static
const
unsigned
lanes
=
4
;
static
const
SimdType
type
=
SimdType
:
:
Uint32x4
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
return
ToUint32
(
cx
v
out
)
;
}
static
Value
ToValue
(
Elem
value
)
{
return
NumberValue
(
value
)
;
}
}
;
struct
Bool8x16
{
typedef
int8_t
Elem
;
static
const
unsigned
lanes
=
16
;
static
const
SimdType
type
=
SimdType
:
:
Bool8x16
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
*
out
=
ToBoolean
(
v
)
?
-
1
:
0
;
return
true
;
}
static
Value
ToValue
(
Elem
value
)
{
return
BooleanValue
(
value
)
;
}
}
;
struct
Bool16x8
{
typedef
int16_t
Elem
;
static
const
unsigned
lanes
=
8
;
static
const
SimdType
type
=
SimdType
:
:
Bool16x8
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
*
out
=
ToBoolean
(
v
)
?
-
1
:
0
;
return
true
;
}
static
Value
ToValue
(
Elem
value
)
{
return
BooleanValue
(
value
)
;
}
}
;
struct
Bool32x4
{
typedef
int32_t
Elem
;
static
const
unsigned
lanes
=
4
;
static
const
SimdType
type
=
SimdType
:
:
Bool32x4
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
*
out
=
ToBoolean
(
v
)
?
-
1
:
0
;
return
true
;
}
static
Value
ToValue
(
Elem
value
)
{
return
BooleanValue
(
value
)
;
}
}
;
struct
Bool64x2
{
typedef
int64_t
Elem
;
static
const
unsigned
lanes
=
2
;
static
const
SimdType
type
=
SimdType
:
:
Bool64x2
;
static
MOZ_MUST_USE
bool
Cast
(
JSContext
*
cx
JS
:
:
HandleValue
v
Elem
*
out
)
{
*
out
=
ToBoolean
(
v
)
?
-
1
:
0
;
return
true
;
}
static
Value
ToValue
(
Elem
value
)
{
return
BooleanValue
(
value
)
;
}
}
;
PropertyName
*
SimdTypeToName
(
const
JSAtomState
&
atoms
SimdType
type
)
;
bool
IsSimdTypeName
(
const
JSAtomState
&
atoms
const
PropertyName
*
name
SimdType
*
type
)
;
const
char
*
SimdTypeToString
(
SimdType
type
)
;
template
<
typename
V
>
JSObject
*
CreateSimd
(
JSContext
*
cx
const
typename
V
:
:
Elem
*
data
)
;
template
<
typename
V
>
bool
IsVectorObject
(
HandleValue
v
)
;
template
<
typename
V
>
MOZ_MUST_USE
bool
ToSimdConstant
(
JSContext
*
cx
HandleValue
v
jit
:
:
SimdConstant
*
out
)
;
JSObject
*
InitSimdClass
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
namespace
jit
{
extern
const
JSJitInfo
JitInfo_SimdInt32x4_extractLane
;
extern
const
JSJitInfo
JitInfo_SimdFloat32x4_extractLane
;
}
#
define
DECLARE_SIMD_FLOAT32X4_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_float32x4_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
FLOAT32X4_FUNCTION_LIST
(
DECLARE_SIMD_FLOAT32X4_FUNCTION
)
#
undef
DECLARE_SIMD_FLOAT32X4_FUNCTION
#
define
DECLARE_SIMD_FLOAT64X2_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_float64x2_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
FLOAT64X2_FUNCTION_LIST
(
DECLARE_SIMD_FLOAT64X2_FUNCTION
)
#
undef
DECLARE_SIMD_FLOAT64X2_FUNCTION
#
define
DECLARE_SIMD_INT8X16_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_int8x16_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
INT8X16_FUNCTION_LIST
(
DECLARE_SIMD_INT8X16_FUNCTION
)
#
undef
DECLARE_SIMD_INT8X16_FUNCTION
#
define
DECLARE_SIMD_INT16X8_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_int16x8_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
INT16X8_FUNCTION_LIST
(
DECLARE_SIMD_INT16X8_FUNCTION
)
#
undef
DECLARE_SIMD_INT16X8_FUNCTION
#
define
DECLARE_SIMD_INT32X4_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_int32x4_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
INT32X4_FUNCTION_LIST
(
DECLARE_SIMD_INT32X4_FUNCTION
)
#
undef
DECLARE_SIMD_INT32X4_FUNCTION
#
define
DECLARE_SIMD_UINT8X16_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_uint8x16_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
UINT8X16_FUNCTION_LIST
(
DECLARE_SIMD_UINT8X16_FUNCTION
)
#
undef
DECLARE_SIMD_UINT8X16_FUNCTION
#
define
DECLARE_SIMD_UINT16X8_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_uint16x8_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
UINT16X8_FUNCTION_LIST
(
DECLARE_SIMD_UINT16X8_FUNCTION
)
#
undef
DECLARE_SIMD_UINT16X8_FUNCTION
#
define
DECLARE_SIMD_UINT32X4_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_uint32x4_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
UINT32X4_FUNCTION_LIST
(
DECLARE_SIMD_UINT32X4_FUNCTION
)
#
undef
DECLARE_SIMD_UINT32X4_FUNCTION
#
define
DECLARE_SIMD_BOOL8X16_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_bool8x16_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
BOOL8X16_FUNCTION_LIST
(
DECLARE_SIMD_BOOL8X16_FUNCTION
)
#
undef
DECLARE_SIMD_BOOL8X16_FUNCTION
#
define
DECLARE_SIMD_BOOL16X8_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_bool16x8_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
BOOL16X8_FUNCTION_LIST
(
DECLARE_SIMD_BOOL16X8_FUNCTION
)
#
undef
DECLARE_SIMD_BOOL16X8_FUNCTION
#
define
DECLARE_SIMD_BOOL32X4_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_bool32x4_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
BOOL32X4_FUNCTION_LIST
(
DECLARE_SIMD_BOOL32X4_FUNCTION
)
#
undef
DECLARE_SIMD_BOOL32X4_FUNCTION
#
define
DECLARE_SIMD_BOOL64X2_FUNCTION
(
Name
Func
Operands
)
\
extern
MOZ_MUST_USE
bool
\
simd_bool64x2_
#
#
Name
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
BOOL64X2_FUNCTION_LIST
(
DECLARE_SIMD_BOOL64X2_FUNCTION
)
#
undef
DECLARE_SIMD_BOOL64X2_FUNCTION
}
#
endif
