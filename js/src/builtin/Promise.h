#
ifndef
builtin_Promise_h
#
define
builtin_Promise_h
#
include
"
builtin
/
SelfHostingDefines
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
enum
PromiseSlots
{
PromiseSlot_Flags
=
0
PromiseSlot_ReactionsOrResult
PromiseSlot_RejectFunction
PromiseSlot_AwaitGenerator
=
PromiseSlot_RejectFunction
PromiseSlot_AllocationSite
PromiseSlot_ResolutionSite
PromiseSlot_AllocationTime
PromiseSlot_ResolutionTime
PromiseSlot_Id
PromiseSlots
}
;
#
define
PROMISE_FLAG_RESOLVED
0x1
#
define
PROMISE_FLAG_FULFILLED
0x2
#
define
PROMISE_FLAG_HANDLED
0x4
#
define
PROMISE_FLAG_REPORTED
0x8
#
define
PROMISE_FLAG_DEFAULT_RESOLVE_FUNCTION
0x10
#
define
PROMISE_FLAG_DEFAULT_REJECT_FUNCTION
0x20
#
define
PROMISE_FLAG_ASYNC
0x40
class
AutoSetNewObjectMetadata
;
class
PromiseObject
:
public
NativeObject
{
public
:
static
const
unsigned
RESERVED_SLOTS
=
PromiseSlots
;
static
const
Class
class_
;
static
const
Class
protoClass_
;
static
PromiseObject
*
create
(
JSContext
*
cx
HandleObject
executor
HandleObject
proto
=
nullptr
bool
needsWrapping
=
false
)
;
static
PromiseObject
*
createSkippingExecutor
(
JSContext
*
cx
)
;
static
JSObject
*
unforgeableResolve
(
JSContext
*
cx
HandleValue
value
)
;
static
JSObject
*
unforgeableReject
(
JSContext
*
cx
HandleValue
value
)
;
JS
:
:
PromiseState
state
(
)
{
int32_t
flags
=
getFixedSlot
(
PromiseSlot_Flags
)
.
toInt32
(
)
;
if
(
!
(
flags
&
PROMISE_FLAG_RESOLVED
)
)
{
MOZ_ASSERT
(
!
(
flags
&
PROMISE_FLAG_FULFILLED
)
)
;
return
JS
:
:
PromiseState
:
:
Pending
;
}
if
(
flags
&
PROMISE_FLAG_FULFILLED
)
return
JS
:
:
PromiseState
:
:
Fulfilled
;
return
JS
:
:
PromiseState
:
:
Rejected
;
}
Value
value
(
)
{
MOZ_ASSERT
(
state
(
)
=
=
JS
:
:
PromiseState
:
:
Fulfilled
)
;
return
getFixedSlot
(
PromiseSlot_ReactionsOrResult
)
;
}
Value
reason
(
)
{
MOZ_ASSERT
(
state
(
)
=
=
JS
:
:
PromiseState
:
:
Rejected
)
;
return
getFixedSlot
(
PromiseSlot_ReactionsOrResult
)
;
}
static
MOZ_MUST_USE
bool
resolve
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
HandleValue
resolutionValue
)
;
static
MOZ_MUST_USE
bool
reject
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
HandleValue
rejectionValue
)
;
static
void
onSettled
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
double
allocationTime
(
)
{
return
getFixedSlot
(
PromiseSlot_AllocationTime
)
.
toNumber
(
)
;
}
double
resolutionTime
(
)
{
return
getFixedSlot
(
PromiseSlot_ResolutionTime
)
.
toNumber
(
)
;
}
JSObject
*
allocationSite
(
)
{
return
getFixedSlot
(
PromiseSlot_AllocationSite
)
.
toObjectOrNull
(
)
;
}
JSObject
*
resolutionSite
(
)
{
return
getFixedSlot
(
PromiseSlot_ResolutionSite
)
.
toObjectOrNull
(
)
;
}
double
lifetime
(
)
;
double
timeToResolution
(
)
{
MOZ_ASSERT
(
state
(
)
!
=
JS
:
:
PromiseState
:
:
Pending
)
;
return
resolutionTime
(
)
-
allocationTime
(
)
;
}
MOZ_MUST_USE
bool
dependentPromises
(
JSContext
*
cx
MutableHandle
<
GCVector
<
Value
>
>
values
)
;
uint64_t
getID
(
)
;
bool
isUnhandled
(
)
{
MOZ_ASSERT
(
state
(
)
=
=
JS
:
:
PromiseState
:
:
Rejected
)
;
return
!
(
getFixedSlot
(
PromiseSlot_Flags
)
.
toInt32
(
)
&
PROMISE_FLAG_HANDLED
)
;
}
void
markAsReported
(
)
{
MOZ_ASSERT
(
isUnhandled
(
)
)
;
int32_t
flags
=
getFixedSlot
(
PromiseSlot_Flags
)
.
toInt32
(
)
;
setFixedSlot
(
PromiseSlot_Flags
Int32Value
(
flags
|
PROMISE_FLAG_REPORTED
)
)
;
}
}
;
MOZ_MUST_USE
bool
EnqueuePromiseReactions
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
HandleObject
dependentPromise
HandleValue
onFulfilled
HandleValue
onRejected
)
;
MOZ_MUST_USE
JSObject
*
GetWaitForAllPromise
(
JSContext
*
cx
const
JS
:
:
AutoObjectVector
&
promises
)
;
MOZ_MUST_USE
JSObject
*
OriginalPromiseThen
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
HandleValue
onFulfilled
HandleValue
onRejected
)
;
MOZ_MUST_USE
PromiseObject
*
CreatePromiseObjectForAsync
(
JSContext
*
cx
HandleValue
generatorVal
)
;
MOZ_MUST_USE
bool
AsyncFunctionReturned
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
resultPromise
HandleValue
value
)
;
MOZ_MUST_USE
bool
AsyncFunctionThrown
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
resultPromise
)
;
MOZ_MUST_USE
bool
AsyncFunctionAwait
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
resultPromise
HandleValue
value
)
;
class
AsyncGeneratorObject
;
MOZ_MUST_USE
bool
AsyncGeneratorAwait
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
)
;
MOZ_MUST_USE
bool
AsyncGeneratorResolve
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
value
bool
done
)
;
MOZ_MUST_USE
bool
AsyncGeneratorReject
(
JSContext
*
cx
Handle
<
AsyncGeneratorObject
*
>
asyncGenObj
HandleValue
exception
)
;
MOZ_MUST_USE
bool
AsyncGeneratorEnqueue
(
JSContext
*
cx
HandleValue
asyncGenVal
CompletionKind
completionKind
HandleValue
completionValue
MutableHandleValue
result
)
;
class
PromiseTask
:
public
JS
:
:
AsyncTask
{
JSRuntime
*
runtime_
;
PersistentRooted
<
PromiseObject
*
>
promise_
;
void
finish
(
JSContext
*
cx
)
override
final
;
void
cancel
(
JSContext
*
cx
)
override
final
;
protected
:
virtual
bool
finishPromise
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
=
0
;
public
:
PromiseTask
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
~
PromiseTask
(
)
;
JSRuntime
*
runtime
(
)
const
{
return
runtime_
;
}
virtual
void
execute
(
)
=
0
;
bool
executeAndFinish
(
JSContext
*
cx
)
;
}
;
bool
Promise_static_resolve
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
bool
Promise_reject
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
bool
Promise_then
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
}
#
endif
