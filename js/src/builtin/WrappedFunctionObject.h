#
ifndef
builtin_WrappedFunctionObject_h
#
define
builtin_WrappedFunctionObject_h
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
WrappedFunctionObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
enum
{
WrappedTargetFunctionSlot
SlotCount
}
;
JSObject
*
getTargetFunction
(
)
const
{
return
&
getFixedSlot
(
WrappedTargetFunctionSlot
)
.
toObject
(
)
;
}
void
setTargetFunction
(
JSObject
&
obj
)
{
setFixedSlot
(
WrappedTargetFunctionSlot
ObjectValue
(
obj
)
)
;
}
}
;
bool
WrappedFunctionCreate
(
JSContext
*
cx
Realm
*
callerRealm
HandleObject
target
MutableHandleValue
res
)
;
bool
GetWrappedValue
(
JSContext
*
cx
Realm
*
callerRealm
HandleValue
value
MutableHandleValue
res
)
;
}
#
endif
