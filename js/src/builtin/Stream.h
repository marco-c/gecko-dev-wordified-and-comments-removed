#
ifndef
builtin_Stream_h
#
define
builtin_Stream_h
#
include
"
builtin
/
Promise
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
ReadableStreamReader
;
class
ReadableStreamController
;
class
ReadableStream
:
public
NativeObject
{
public
:
enum
Slots
{
Slot_Controller
Slot_Reader
Slot_State
Slot_StoredError
SlotCount
}
;
private
:
uint32_t
stateBits
(
)
const
{
return
getFixedSlot
(
Slot_State
)
.
toInt32
(
)
;
}
void
initStateBits
(
uint32_t
stateBits
)
{
setFixedSlot
(
Slot_State
Int32Value
(
stateBits
)
)
;
}
void
setStateBits
(
uint32_t
stateBits
)
{
MOZ_ASSERT_IF
(
disturbed
(
)
stateBits
&
Disturbed
)
;
MOZ_ASSERT_IF
(
closed
(
)
|
|
errored
(
)
!
(
stateBits
&
Readable
)
)
;
setFixedSlot
(
Slot_State
Int32Value
(
stateBits
)
)
;
}
public
:
bool
readable
(
)
const
{
return
stateBits
(
)
&
Readable
;
}
bool
closed
(
)
const
{
return
stateBits
(
)
&
Closed
;
}
void
setClosed
(
)
{
setStateBits
(
(
stateBits
(
)
&
Disturbed
)
|
Closed
)
;
}
bool
errored
(
)
const
{
return
stateBits
(
)
&
Errored
;
}
void
setErrored
(
)
{
setStateBits
(
(
stateBits
(
)
&
Disturbed
)
|
Errored
)
;
}
bool
disturbed
(
)
const
{
return
stateBits
(
)
&
Disturbed
;
}
void
setDisturbed
(
)
{
setStateBits
(
stateBits
(
)
|
Disturbed
)
;
}
bool
hasController
(
)
const
{
return
!
getFixedSlot
(
Slot_Controller
)
.
isUndefined
(
)
;
}
inline
ReadableStreamController
*
controller
(
)
const
;
inline
void
setController
(
ReadableStreamController
*
controller
)
;
void
clearController
(
)
{
setFixedSlot
(
Slot_Controller
JS
:
:
UndefinedValue
(
)
)
;
}
bool
hasReader
(
)
const
{
return
!
getFixedSlot
(
Slot_Reader
)
.
isUndefined
(
)
;
}
void
setReader
(
JSObject
*
reader
)
{
setFixedSlot
(
Slot_Reader
JS
:
:
ObjectValue
(
*
reader
)
)
;
}
void
clearReader
(
)
{
setFixedSlot
(
Slot_Reader
JS
:
:
UndefinedValue
(
)
)
;
}
Value
storedError
(
)
const
{
return
getFixedSlot
(
Slot_StoredError
)
;
}
void
setStoredError
(
HandleValue
value
)
{
setFixedSlot
(
Slot_StoredError
value
)
;
}
public
:
static
ReadableStream
*
createDefaultStream
(
JSContext
*
cx
HandleValue
underlyingSource
HandleValue
size
HandleValue
highWaterMark
HandleObject
proto
=
nullptr
)
;
static
ReadableStream
*
createExternalSourceStream
(
JSContext
*
cx
void
*
underlyingSource
uint8_t
flags
HandleObject
proto
=
nullptr
)
;
bool
locked
(
)
const
;
JS
:
:
ReadableStreamMode
mode
(
)
const
;
uint8_t
embeddingFlags
(
)
const
;
static
MOZ_MUST_USE
JSObject
*
cancel
(
JSContext
*
cx
Handle
<
ReadableStream
*
>
stream
HandleValue
reason
)
;
enum
State
{
Readable
=
1
<
<
0
Closed
=
1
<
<
1
Errored
=
1
<
<
2
Disturbed
=
1
<
<
3
}
;
private
:
static
MOZ_MUST_USE
ReadableStream
*
createStream
(
JSContext
*
cx
HandleObject
proto
=
nullptr
)
;
public
:
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
class
ReadableStreamReader
:
public
NativeObject
{
public
:
enum
Slots
{
Slot_Stream
Slot_Requests
Slot_ClosedPromise
SlotCount
}
;
bool
hasStream
(
)
const
{
return
!
getFixedSlot
(
Slot_Stream
)
.
isUndefined
(
)
;
}
void
setStream
(
JSObject
*
stream
)
{
setFixedSlot
(
Slot_Stream
ObjectValue
(
*
stream
)
)
;
}
void
clearStream
(
)
{
setFixedSlot
(
Slot_Stream
UndefinedValue
(
)
)
;
}
bool
isClosed
(
)
{
return
!
hasStream
(
)
;
}
NativeObject
*
requests
(
)
const
{
return
&
getFixedSlot
(
Slot_Requests
)
.
toObject
(
)
.
as
<
NativeObject
>
(
)
;
}
void
clearRequests
(
)
{
setFixedSlot
(
Slot_Requests
UndefinedValue
(
)
)
;
}
JSObject
*
closedPromise
(
)
const
{
return
&
getFixedSlot
(
Slot_ClosedPromise
)
.
toObject
(
)
;
}
void
setClosedPromise
(
JSObject
*
wrappedPromise
)
{
setFixedSlot
(
Slot_ClosedPromise
ObjectValue
(
*
wrappedPromise
)
)
;
}
static
const
Class
class_
;
}
;
class
ReadableStreamDefaultReader
:
public
ReadableStreamReader
{
public
:
static
MOZ_MUST_USE
JSObject
*
read
(
JSContext
*
cx
Handle
<
ReadableStreamDefaultReader
*
>
reader
)
;
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
class
StreamController
:
public
NativeObject
{
public
:
enum
Slots
{
Slot_Queue
Slot_TotalSize
SlotCount
}
;
NativeObject
*
queue
(
)
const
{
return
&
getFixedSlot
(
Slot_Queue
)
.
toObject
(
)
.
as
<
NativeObject
>
(
)
;
}
double
queueTotalSize
(
)
const
{
return
getFixedSlot
(
Slot_TotalSize
)
.
toNumber
(
)
;
}
void
setQueueTotalSize
(
double
size
)
{
setFixedSlot
(
Slot_TotalSize
NumberValue
(
size
)
)
;
}
}
;
class
ReadableStreamController
:
public
StreamController
{
public
:
enum
Slots
{
Slot_Stream
=
StreamController
:
:
SlotCount
Slot_UnderlyingSource
Slot_StrategyHWM
Slot_Flags
SlotCount
}
;
enum
ControllerFlags
{
Flag_Started
=
1
<
<
0
Flag_Pulling
=
1
<
<
1
Flag_PullAgain
=
1
<
<
2
Flag_CloseRequested
=
1
<
<
3
Flag_TeeBranch
=
1
<
<
4
Flag_TeeBranch1
=
1
<
<
5
Flag_TeeBranch2
=
1
<
<
6
Flag_ExternalSource
=
1
<
<
7
Flag_SourceLocked
=
1
<
<
8
}
;
static
constexpr
uint8_t
EmbeddingFlagsOffset
=
24
;
ReadableStream
*
stream
(
)
const
{
return
&
getFixedSlot
(
Slot_Stream
)
.
toObject
(
)
.
as
<
ReadableStream
>
(
)
;
}
void
setStream
(
ReadableStream
*
stream
)
{
setFixedSlot
(
Slot_Stream
ObjectValue
(
*
stream
)
)
;
}
Value
underlyingSource
(
)
const
{
return
getFixedSlot
(
Slot_UnderlyingSource
)
;
}
void
setUnderlyingSource
(
const
Value
&
underlyingSource
)
{
setFixedSlot
(
Slot_UnderlyingSource
underlyingSource
)
;
}
double
strategyHWM
(
)
const
{
return
getFixedSlot
(
Slot_StrategyHWM
)
.
toNumber
(
)
;
}
void
setStrategyHWM
(
double
highWaterMark
)
{
setFixedSlot
(
Slot_StrategyHWM
NumberValue
(
highWaterMark
)
)
;
}
uint32_t
flags
(
)
const
{
return
getFixedSlot
(
Slot_Flags
)
.
toInt32
(
)
;
}
void
setFlags
(
uint32_t
flags
)
{
setFixedSlot
(
Slot_Flags
Int32Value
(
flags
)
)
;
}
void
addFlags
(
uint32_t
flags
)
{
setFlags
(
this
-
>
flags
(
)
|
flags
)
;
}
void
removeFlags
(
uint32_t
flags
)
{
setFlags
(
this
-
>
flags
(
)
&
~
flags
)
;
}
bool
started
(
)
const
{
return
flags
(
)
&
Flag_Started
;
}
void
setStarted
(
)
{
addFlags
(
Flag_Started
)
;
}
bool
pulling
(
)
const
{
return
flags
(
)
&
Flag_Pulling
;
}
void
setPulling
(
)
{
addFlags
(
Flag_Pulling
)
;
}
void
clearPullFlags
(
)
{
removeFlags
(
Flag_Pulling
|
Flag_PullAgain
)
;
}
bool
pullAgain
(
)
const
{
return
flags
(
)
&
Flag_PullAgain
;
}
void
setPullAgain
(
)
{
addFlags
(
Flag_PullAgain
)
;
}
bool
closeRequested
(
)
const
{
return
flags
(
)
&
Flag_CloseRequested
;
}
void
setCloseRequested
(
)
{
addFlags
(
Flag_CloseRequested
)
;
}
bool
isTeeBranch1
(
)
const
{
return
flags
(
)
&
Flag_TeeBranch1
;
}
void
setTeeBranch1
(
)
{
addFlags
(
Flag_TeeBranch
|
Flag_TeeBranch1
)
;
}
bool
isTeeBranch2
(
)
const
{
return
flags
(
)
&
Flag_TeeBranch2
;
}
void
setTeeBranch2
(
)
{
addFlags
(
Flag_TeeBranch
|
Flag_TeeBranch2
)
;
}
bool
hasExternalSource
(
)
const
{
return
flags
(
)
&
Flag_ExternalSource
;
}
bool
sourceLocked
(
)
const
{
return
flags
(
)
&
Flag_SourceLocked
;
}
void
setSourceLocked
(
)
{
addFlags
(
Flag_SourceLocked
)
;
}
void
clearSourceLocked
(
)
{
removeFlags
(
Flag_SourceLocked
)
;
}
void
setEmbeddingFlags
(
uint8_t
flags
)
{
addFlags
(
uint32_t
(
flags
)
<
<
EmbeddingFlagsOffset
)
;
}
static
const
Class
class_
;
}
;
class
ReadableStreamDefaultController
:
public
ReadableStreamController
{
private
:
enum
Slots
{
Slot_StrategySize
=
ReadableStreamController
:
:
SlotCount
SlotCount
}
;
public
:
Value
strategySize
(
)
const
{
return
getFixedSlot
(
Slot_StrategySize
)
;
}
void
setStrategySize
(
const
Value
&
size
)
{
setFixedSlot
(
Slot_StrategySize
size
)
;
}
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
class
ReadableByteStreamController
:
public
ReadableStreamController
{
public
:
enum
Slots
{
Slot_BYOBRequest
=
ReadableStreamController
:
:
SlotCount
Slot_PendingPullIntos
Slot_AutoAllocateSize
SlotCount
}
;
Value
byobRequest
(
)
const
{
return
getFixedSlot
(
Slot_BYOBRequest
)
;
}
void
clearBYOBRequest
(
)
{
setFixedSlot
(
Slot_BYOBRequest
JS
:
:
UndefinedValue
(
)
)
;
}
NativeObject
*
pendingPullIntos
(
)
const
{
return
&
getFixedSlot
(
Slot_PendingPullIntos
)
.
toObject
(
)
.
as
<
NativeObject
>
(
)
;
}
Value
autoAllocateChunkSize
(
)
const
{
return
getFixedSlot
(
Slot_AutoAllocateSize
)
;
}
void
setAutoAllocateChunkSize
(
const
Value
&
size
)
{
setFixedSlot
(
Slot_AutoAllocateSize
size
)
;
}
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
class
ByteLengthQueuingStrategy
:
public
NativeObject
{
public
:
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
class
CountQueuingStrategy
:
public
NativeObject
{
public
:
static
bool
constructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
const
ClassSpec
classSpec_
;
static
const
Class
class_
;
static
const
ClassSpec
protoClassSpec_
;
static
const
Class
protoClass_
;
}
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
StreamController
>
(
)
const
{
return
is
<
js
:
:
ReadableStreamDefaultController
>
(
)
|
|
is
<
js
:
:
ReadableByteStreamController
>
(
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
ReadableStreamController
>
(
)
const
{
return
is
<
js
:
:
ReadableStreamDefaultController
>
(
)
|
|
is
<
js
:
:
ReadableByteStreamController
>
(
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
ReadableStreamReader
>
(
)
const
{
return
is
<
js
:
:
ReadableStreamDefaultReader
>
(
)
;
}
namespace
js
{
inline
ReadableStreamController
*
ReadableStream
:
:
controller
(
)
const
{
return
&
getFixedSlot
(
Slot_Controller
)
.
toObject
(
)
.
as
<
ReadableStreamController
>
(
)
;
}
inline
void
ReadableStream
:
:
setController
(
ReadableStreamController
*
controller
)
{
setFixedSlot
(
Slot_Controller
JS
:
:
ObjectValue
(
*
controller
)
)
;
}
}
#
endif
