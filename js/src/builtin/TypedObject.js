#
include
"
TypedObjectConstants
.
h
"
#
define
DESCR_KIND
(
obj
)
\
UnsafeGetInt32FromReservedSlot
(
obj
JS_DESCR_SLOT_KIND
)
#
define
DESCR_STRING_REPR
(
obj
)
\
UnsafeGetStringFromReservedSlot
(
obj
JS_DESCR_SLOT_STRING_REPR
)
#
define
DESCR_ALIGNMENT
(
obj
)
\
UnsafeGetInt32FromReservedSlot
(
obj
JS_DESCR_SLOT_ALIGNMENT
)
#
define
DESCR_SIZE
(
obj
)
\
UnsafeGetInt32FromReservedSlot
(
obj
JS_DESCR_SLOT_SIZE
)
#
define
DESCR_OPAQUE
(
obj
)
\
UnsafeGetBooleanFromReservedSlot
(
obj
JS_DESCR_SLOT_OPAQUE
)
#
define
DESCR_TYPE
(
obj
)
\
UnsafeGetInt32FromReservedSlot
(
obj
JS_DESCR_SLOT_TYPE
)
#
define
DESCR_ARRAY_ELEMENT_TYPE
(
obj
)
\
UnsafeGetObjectFromReservedSlot
(
obj
JS_DESCR_SLOT_ARRAY_ELEM_TYPE
)
#
define
DESCR_ARRAY_LENGTH
(
obj
)
\
TO_INT32
(
UnsafeGetInt32FromReservedSlot
(
obj
JS_DESCR_SLOT_ARRAY_LENGTH
)
)
#
define
DESCR_STRUCT_FIELD_NAMES
(
obj
)
\
UnsafeGetObjectFromReservedSlot
(
obj
JS_DESCR_SLOT_STRUCT_FIELD_NAMES
)
#
define
DESCR_STRUCT_FIELD_TYPES
(
obj
)
\
UnsafeGetObjectFromReservedSlot
(
obj
JS_DESCR_SLOT_STRUCT_FIELD_TYPES
)
#
define
DESCR_STRUCT_FIELD_OFFSETS
(
obj
)
\
UnsafeGetObjectFromReservedSlot
(
obj
JS_DESCR_SLOT_STRUCT_FIELD_OFFSETS
)
function
TypedObjectGet
(
descr
typedObj
offset
)
{
assert
(
IsObject
(
descr
)
&
&
ObjectIsTypeDescr
(
descr
)
"
get
(
)
called
with
bad
type
descr
"
)
;
switch
(
DESCR_KIND
(
descr
)
)
{
case
JS_TYPEREPR_SCALAR_KIND
:
return
TypedObjectGetScalar
(
descr
typedObj
offset
)
;
case
JS_TYPEREPR_REFERENCE_KIND
:
return
TypedObjectGetReference
(
descr
typedObj
offset
)
;
case
JS_TYPEREPR_ARRAY_KIND
:
case
JS_TYPEREPR_STRUCT_KIND
:
return
TypedObjectGetDerived
(
descr
typedObj
offset
)
;
}
assert
(
false
"
Unhandled
kind
:
"
+
DESCR_KIND
(
descr
)
)
;
return
undefined
;
}
function
TypedObjectGetDerived
(
descr
typedObj
offset
)
{
assert
(
!
TypeDescrIsSimpleType
(
descr
)
"
getDerived
(
)
used
with
simple
type
"
)
;
return
NewDerivedTypedObject
(
descr
typedObj
offset
|
0
)
;
}
function
TypedObjectGetDerivedIf
(
descr
typedObj
offset
cond
)
{
return
(
cond
?
TypedObjectGetDerived
(
descr
typedObj
offset
)
:
undefined
)
;
}
function
TypedObjectGetOpaque
(
descr
typedObj
offset
)
{
assert
(
!
TypeDescrIsSimpleType
(
descr
)
"
getDerived
(
)
used
with
simple
type
"
)
;
return
NewOpaqueTypedObject
(
descr
typedObj
offset
|
0
)
;
}
function
TypedObjectGetOpaqueIf
(
descr
typedObj
offset
cond
)
{
return
(
cond
?
TypedObjectGetOpaque
(
descr
typedObj
offset
)
:
undefined
)
;
}
function
TypedObjectGetScalar
(
descr
typedObj
offset
)
{
var
type
=
DESCR_TYPE
(
descr
)
;
switch
(
type
)
{
case
JS_SCALARTYPEREPR_INT8
:
return
Load_int8
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_UINT8
:
case
JS_SCALARTYPEREPR_UINT8_CLAMPED
:
return
Load_uint8
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_INT16
:
return
Load_int16
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_UINT16
:
return
Load_uint16
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_INT32
:
return
Load_int32
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_UINT32
:
return
Load_uint32
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_FLOAT32
:
return
Load_float32
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_FLOAT64
:
return
Load_float64
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_BIGINT64
:
return
Load_bigint64
(
typedObj
offset
|
0
)
;
case
JS_SCALARTYPEREPR_BIGUINT64
:
return
Load_biguint64
(
typedObj
offset
|
0
)
;
}
assert
(
false
"
Unhandled
scalar
type
:
"
+
type
)
;
return
undefined
;
}
function
TypedObjectGetReference
(
descr
typedObj
offset
)
{
var
type
=
DESCR_TYPE
(
descr
)
;
switch
(
type
)
{
case
JS_REFERENCETYPEREPR_ANY
:
return
Load_Any
(
typedObj
offset
|
0
)
;
case
JS_REFERENCETYPEREPR_OBJECT
:
return
Load_Object
(
typedObj
offset
|
0
)
;
case
JS_REFERENCETYPEREPR_WASM_ANYREF
:
var
boxed
=
Load_WasmAnyRef
(
typedObj
offset
|
0
)
;
if
(
!
IsBoxedWasmAnyRef
(
boxed
)
)
return
boxed
;
return
UnboxBoxedWasmAnyRef
(
boxed
)
;
case
JS_REFERENCETYPEREPR_STRING
:
return
Load_string
(
typedObj
offset
|
0
)
;
}
assert
(
false
"
Unhandled
scalar
type
:
"
+
type
)
;
return
undefined
;
}
function
TypedObjectSet
(
descr
typedObj
offset
name
fromValue
)
{
switch
(
DESCR_KIND
(
descr
)
)
{
case
JS_TYPEREPR_SCALAR_KIND
:
TypedObjectSetScalar
(
descr
typedObj
offset
fromValue
)
;
return
;
case
JS_TYPEREPR_REFERENCE_KIND
:
TypedObjectSetReference
(
descr
typedObj
offset
name
fromValue
)
;
return
;
case
JS_TYPEREPR_ARRAY_KIND
:
var
length
=
DESCR_ARRAY_LENGTH
(
descr
)
;
if
(
TypedObjectSetArray
(
descr
length
typedObj
offset
fromValue
)
)
return
;
break
;
case
JS_TYPEREPR_STRUCT_KIND
:
if
(
!
IsObject
(
fromValue
)
)
break
;
var
fieldNames
=
DESCR_STRUCT_FIELD_NAMES
(
descr
)
;
var
fieldDescrs
=
DESCR_STRUCT_FIELD_TYPES
(
descr
)
;
var
fieldOffsets
=
DESCR_STRUCT_FIELD_OFFSETS
(
descr
)
;
for
(
var
i
=
0
;
i
<
fieldNames
.
length
;
i
+
+
)
{
var
fieldName
=
fieldNames
[
i
]
;
var
fieldDescr
=
fieldDescrs
[
i
]
;
var
fieldOffset
=
fieldOffsets
[
i
]
;
var
fieldValue
=
fromValue
[
fieldName
]
;
TypedObjectSet
(
fieldDescr
typedObj
offset
+
fieldOffset
fieldName
fieldValue
)
;
}
return
;
}
ThrowTypeError
(
JSMSG_CANT_CONVERT_TO
typeof
(
fromValue
)
DESCR_STRING_REPR
(
descr
)
)
;
}
function
TypedObjectSetArray
(
descr
length
typedObj
offset
fromValue
)
{
if
(
!
IsObject
(
fromValue
)
)
return
false
;
if
(
fromValue
.
length
!
=
=
length
)
return
false
;
if
(
length
>
0
)
{
var
elemDescr
=
DESCR_ARRAY_ELEMENT_TYPE
(
descr
)
;
var
elemSize
=
DESCR_SIZE
(
elemDescr
)
;
var
elemOffset
=
offset
;
for
(
var
i
=
0
;
i
<
length
;
i
+
+
)
{
TypedObjectSet
(
elemDescr
typedObj
elemOffset
null
fromValue
[
i
]
)
;
elemOffset
+
=
elemSize
;
}
}
return
true
;
}
function
TypedObjectSetScalar
(
descr
typedObj
offset
fromValue
)
{
assert
(
DESCR_KIND
(
descr
)
=
=
=
JS_TYPEREPR_SCALAR_KIND
"
Expected
scalar
type
descriptor
"
)
;
var
type
=
DESCR_TYPE
(
descr
)
;
switch
(
type
)
{
case
JS_SCALARTYPEREPR_INT8
:
return
Store_int8
(
typedObj
offset
|
0
TO_INT32
(
fromValue
)
&
0xFF
)
;
case
JS_SCALARTYPEREPR_UINT8
:
return
Store_uint8
(
typedObj
offset
|
0
TO_UINT32
(
fromValue
)
&
0xFF
)
;
case
JS_SCALARTYPEREPR_UINT8_CLAMPED
:
var
v
=
ClampToUint8
(
+
fromValue
)
;
return
Store_int8
(
typedObj
offset
|
0
v
)
;
case
JS_SCALARTYPEREPR_INT16
:
return
Store_int16
(
typedObj
offset
|
0
TO_INT32
(
fromValue
)
&
0xFFFF
)
;
case
JS_SCALARTYPEREPR_UINT16
:
return
Store_uint16
(
typedObj
offset
|
0
TO_UINT32
(
fromValue
)
&
0xFFFF
)
;
case
JS_SCALARTYPEREPR_INT32
:
return
Store_int32
(
typedObj
offset
|
0
TO_INT32
(
fromValue
)
)
;
case
JS_SCALARTYPEREPR_UINT32
:
return
Store_uint32
(
typedObj
offset
|
0
TO_UINT32
(
fromValue
)
)
;
case
JS_SCALARTYPEREPR_FLOAT32
:
return
Store_float32
(
typedObj
offset
|
0
+
fromValue
)
;
case
JS_SCALARTYPEREPR_FLOAT64
:
return
Store_float64
(
typedObj
offset
|
0
+
fromValue
)
;
case
JS_SCALARTYPEREPR_BIGINT64
:
return
Store_bigint64
(
typedObj
offset
|
0
fromValue
)
;
case
JS_SCALARTYPEREPR_BIGUINT64
:
return
Store_biguint64
(
typedObj
offset
|
0
fromValue
)
;
}
assert
(
false
"
Unhandled
scalar
type
:
"
+
type
)
;
return
undefined
;
}
function
TypedObjectSetReference
(
descr
typedObj
offset
name
fromValue
)
{
var
type
=
DESCR_TYPE
(
descr
)
;
switch
(
type
)
{
case
JS_REFERENCETYPEREPR_ANY
:
return
Store_Any
(
typedObj
offset
|
0
name
fromValue
)
;
case
JS_REFERENCETYPEREPR_OBJECT
:
var
value
=
(
fromValue
=
=
=
null
?
fromValue
:
ToObject
(
fromValue
)
)
;
return
Store_Object
(
typedObj
offset
|
0
name
value
)
;
case
JS_REFERENCETYPEREPR_WASM_ANYREF
:
var
value
=
(
IsBoxableWasmAnyRef
(
fromValue
)
?
BoxWasmAnyRef
(
fromValue
)
:
fromValue
)
;
return
Store_WasmAnyRef
(
typedObj
offset
|
0
name
value
)
;
case
JS_REFERENCETYPEREPR_STRING
:
return
Store_string
(
typedObj
offset
|
0
name
ToString
(
fromValue
)
)
;
}
assert
(
false
"
Unhandled
scalar
type
:
"
+
type
)
;
return
undefined
;
}
function
ConvertAndCopyTo
(
destDescr
destTypedObj
destOffset
fieldName
fromValue
)
{
assert
(
IsObject
(
destDescr
)
&
&
ObjectIsTypeDescr
(
destDescr
)
"
ConvertAndCopyTo
:
not
type
obj
"
)
;
assert
(
IsObject
(
destTypedObj
)
&
&
ObjectIsTypedObject
(
destTypedObj
)
"
ConvertAndCopyTo
:
not
type
typedObj
"
)
;
TypedObjectSet
(
destDescr
destTypedObj
destOffset
fieldName
fromValue
)
;
}
function
Reify
(
sourceDescr
sourceTypedObj
sourceOffset
)
{
assert
(
IsObject
(
sourceDescr
)
&
&
ObjectIsTypeDescr
(
sourceDescr
)
"
Reify
:
not
type
obj
"
)
;
assert
(
IsObject
(
sourceTypedObj
)
&
&
ObjectIsTypedObject
(
sourceTypedObj
)
"
Reify
:
not
type
typedObj
"
)
;
return
TypedObjectGet
(
sourceDescr
sourceTypedObj
sourceOffset
)
;
}
function
TypeDescrEquivalent
(
otherDescr
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypeDescr
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
!
IsObject
(
otherDescr
)
|
|
!
ObjectIsTypeDescr
(
otherDescr
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
return
DescrsEquiv
(
this
otherDescr
)
;
}
function
TypedObjectArrayRedimension
(
newArrayType
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypedObject
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
!
IsObject
(
newArrayType
)
|
|
!
ObjectIsTypeDescr
(
newArrayType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
oldArrayType
=
TypedObjectTypeDescr
(
this
)
;
var
oldElementType
=
oldArrayType
;
var
oldElementCount
=
1
;
if
(
DESCR_KIND
(
oldArrayType
)
!
=
JS_TYPEREPR_ARRAY_KIND
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
while
(
DESCR_KIND
(
oldElementType
)
=
=
=
JS_TYPEREPR_ARRAY_KIND
)
{
oldElementCount
*
=
oldElementType
.
length
;
oldElementType
=
oldElementType
.
elementType
;
}
var
newElementType
=
newArrayType
;
var
newElementCount
=
1
;
while
(
DESCR_KIND
(
newElementType
)
=
=
JS_TYPEREPR_ARRAY_KIND
)
{
newElementCount
*
=
newElementType
.
length
;
newElementType
=
newElementType
.
elementType
;
}
if
(
oldElementCount
!
=
=
newElementCount
)
{
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
if
(
!
DescrsEquiv
(
oldElementType
newElementType
)
)
{
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
assert
(
DESCR_SIZE
(
oldArrayType
)
=
=
DESCR_SIZE
(
newArrayType
)
"
Byte
sizes
should
be
equal
"
)
;
return
NewDerivedTypedObject
(
newArrayType
this
0
)
;
}
function
DescrsEquiv
(
descr1
descr2
)
{
assert
(
IsObject
(
descr1
)
&
&
ObjectIsTypeDescr
(
descr1
)
"
descr1
not
descr
"
)
;
assert
(
IsObject
(
descr2
)
&
&
ObjectIsTypeDescr
(
descr2
)
"
descr2
not
descr
"
)
;
return
DESCR_STRING_REPR
(
descr1
)
=
=
=
DESCR_STRING_REPR
(
descr2
)
;
}
function
DescrToSource
(
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypeDescr
(
this
)
)
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Type
"
"
toSource
"
"
value
"
)
;
return
DESCR_STRING_REPR
(
this
)
;
}
function
ArrayShorthand
(
.
.
.
dims
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypeDescr
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
AT
=
GetTypedObjectModule
(
)
.
ArrayType
;
if
(
dims
.
length
=
=
0
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
accum
=
this
;
for
(
var
i
=
dims
.
length
-
1
;
i
>
=
0
;
i
-
-
)
accum
=
new
AT
(
accum
dims
[
i
]
)
;
return
accum
;
}
function
TypeOfTypedObject
(
obj
)
{
if
(
IsObject
(
obj
)
&
&
ObjectIsTypedObject
(
obj
)
)
return
TypedObjectTypeDescr
(
obj
)
;
var
T
=
GetTypedObjectModule
(
)
;
switch
(
typeof
obj
)
{
case
"
object
"
:
return
T
.
Object
;
case
"
function
"
:
return
T
.
Object
;
case
"
string
"
:
return
T
.
String
;
case
"
number
"
:
return
T
.
float64
;
case
"
undefined
"
:
return
T
.
Any
;
default
:
return
T
.
Any
;
}
}
function
TypedObjectArrayTypeBuild
(
a
b
c
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypeDescr
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
kind
=
DESCR_KIND
(
this
)
;
switch
(
kind
)
{
case
JS_TYPEREPR_ARRAY_KIND
:
if
(
typeof
a
=
=
=
"
function
"
)
return
BuildTypedSeqImpl
(
this
this
.
length
1
a
)
;
else
if
(
typeof
a
=
=
=
"
number
"
&
&
typeof
b
=
=
=
"
function
"
)
return
BuildTypedSeqImpl
(
this
this
.
length
a
b
)
;
else
if
(
typeof
a
=
=
=
"
number
"
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
else
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
break
;
default
:
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
}
function
TypedObjectArrayTypeFrom
(
a
b
c
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypeDescr
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
untypedInput
=
!
IsObject
(
a
)
|
|
!
ObjectIsTypedObject
(
a
)
|
|
!
TypeDescrIsArrayType
(
TypedObjectTypeDescr
(
a
)
)
;
if
(
untypedInput
)
{
if
(
b
=
=
=
1
&
&
IsCallable
(
c
)
)
return
MapUntypedSeqImpl
(
a
this
c
)
;
if
(
IsCallable
(
b
)
)
return
MapUntypedSeqImpl
(
a
this
b
)
;
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
if
(
typeof
b
=
=
=
"
number
"
&
&
IsCallable
(
c
)
)
return
MapTypedSeqImpl
(
a
b
this
c
)
;
if
(
IsCallable
(
b
)
)
return
MapTypedSeqImpl
(
a
1
this
b
)
;
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
function
TypedObjectArrayMap
(
a
b
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypedObject
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
thisType
=
TypedObjectTypeDescr
(
this
)
;
if
(
!
TypeDescrIsArrayType
(
thisType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
typeof
a
=
=
=
"
number
"
&
&
typeof
b
=
=
=
"
function
"
)
return
MapTypedSeqImpl
(
this
a
thisType
b
)
;
else
if
(
typeof
a
=
=
=
"
function
"
)
return
MapTypedSeqImpl
(
this
1
thisType
a
)
;
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
function
TypedObjectArrayReduce
(
a
b
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypedObject
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
thisType
=
TypedObjectTypeDescr
(
this
)
;
if
(
!
TypeDescrIsArrayType
(
thisType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
a
!
=
=
undefined
&
&
typeof
a
!
=
=
"
function
"
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
outputType
=
thisType
.
elementType
;
return
ReduceTypedSeqImpl
(
this
outputType
a
b
)
;
}
function
TypedObjectArrayFilter
(
func
)
{
if
(
!
IsObject
(
this
)
|
|
!
ObjectIsTypedObject
(
this
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
thisType
=
TypedObjectTypeDescr
(
this
)
;
if
(
!
TypeDescrIsArrayType
(
thisType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
typeof
func
!
=
=
"
function
"
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
return
FilterTypedSeqImpl
(
this
func
)
;
}
function
NUM_BYTES
(
bits
)
{
return
(
bits
+
7
)
>
>
3
;
}
function
SET_BIT
(
data
index
)
{
var
word
=
index
>
>
3
;
var
mask
=
1
<
<
(
index
&
0x7
)
;
data
[
word
]
|
=
mask
;
}
function
GET_BIT
(
data
index
)
{
var
word
=
index
>
>
3
;
var
mask
=
1
<
<
(
index
&
0x7
)
;
return
(
data
[
word
]
&
mask
)
!
=
0
;
}
function
BuildTypedSeqImpl
(
arrayType
len
depth
func
)
{
assert
(
IsObject
(
arrayType
)
&
&
ObjectIsTypeDescr
(
arrayType
)
"
Build
called
on
non
-
type
-
object
"
)
;
if
(
depth
<
=
0
|
|
TO_INT32
(
depth
)
!
=
=
depth
)
{
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
var
{
iterationSpace
grainType
totalLength
}
=
ComputeIterationSpace
(
arrayType
depth
len
)
;
var
result
=
new
arrayType
(
)
;
var
indices
=
new
List
(
)
;
indices
.
length
=
depth
;
for
(
var
i
=
0
;
i
<
depth
;
i
+
+
)
{
indices
[
i
]
=
0
;
}
var
grainTypeIsComplex
=
!
TypeDescrIsSimpleType
(
grainType
)
;
var
size
=
DESCR_SIZE
(
grainType
)
;
var
outOffset
=
0
;
for
(
i
=
0
;
i
<
totalLength
;
i
+
+
)
{
var
userOutPointer
=
TypedObjectGetOpaqueIf
(
grainType
result
outOffset
grainTypeIsComplex
)
;
callFunction
(
std_Array_push
indices
userOutPointer
)
;
var
r
=
callFunction
(
std_Function_apply
func
undefined
indices
)
;
callFunction
(
std_Array_pop
indices
)
;
if
(
r
!
=
=
undefined
)
TypedObjectSet
(
grainType
result
outOffset
null
r
)
;
IncrementIterationSpace
(
indices
iterationSpace
)
;
outOffset
+
=
size
;
}
return
result
;
}
function
ComputeIterationSpace
(
arrayType
depth
len
)
{
assert
(
IsObject
(
arrayType
)
&
&
ObjectIsTypeDescr
(
arrayType
)
"
ComputeIterationSpace
called
on
non
-
type
-
object
"
)
;
assert
(
TypeDescrIsArrayType
(
arrayType
)
"
ComputeIterationSpace
called
on
non
-
array
-
type
"
)
;
assert
(
depth
>
0
"
ComputeIterationSpace
called
on
non
-
positive
depth
"
)
;
var
iterationSpace
=
new
List
(
)
;
iterationSpace
.
length
=
depth
;
iterationSpace
[
0
]
=
len
;
var
totalLength
=
len
;
var
grainType
=
arrayType
.
elementType
;
for
(
var
i
=
1
;
i
<
depth
;
i
+
+
)
{
if
(
TypeDescrIsArrayType
(
grainType
)
)
{
var
grainLen
=
grainType
.
length
;
iterationSpace
[
i
]
=
grainLen
;
totalLength
*
=
grainLen
;
grainType
=
grainType
.
elementType
;
}
else
{
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
}
}
return
{
iterationSpace
grainType
totalLength
}
;
}
function
IncrementIterationSpace
(
indices
iterationSpace
)
{
assert
(
indices
.
length
=
=
=
iterationSpace
.
length
"
indices
dimension
must
equal
iterationSpace
dimension
.
"
)
;
var
n
=
indices
.
length
-
1
;
while
(
true
)
{
indices
[
n
]
+
=
1
;
if
(
indices
[
n
]
<
iterationSpace
[
n
]
)
return
;
assert
(
indices
[
n
]
=
=
=
iterationSpace
[
n
]
"
Components
of
indices
must
match
those
of
iterationSpace
.
"
)
;
indices
[
n
]
=
0
;
if
(
n
=
=
0
)
return
;
n
-
=
1
;
}
}
function
MapUntypedSeqImpl
(
inArray
outputType
maybeFunc
)
{
assert
(
IsObject
(
outputType
)
"
1
.
Map
/
From
called
on
non
-
object
outputType
"
)
;
assert
(
ObjectIsTypeDescr
(
outputType
)
"
1
.
Map
/
From
called
on
non
-
type
-
object
outputType
"
)
;
inArray
=
ToObject
(
inArray
)
;
assert
(
TypeDescrIsArrayType
(
outputType
)
"
Map
/
From
called
on
non
array
-
type
outputType
"
)
;
if
(
!
IsCallable
(
maybeFunc
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
maybeFunc
)
)
;
var
func
=
maybeFunc
;
var
outLength
=
outputType
.
length
;
var
outGrainType
=
outputType
.
elementType
;
var
result
=
new
outputType
(
)
;
var
outUnitSize
=
DESCR_SIZE
(
outGrainType
)
;
var
outGrainTypeIsComplex
=
!
TypeDescrIsSimpleType
(
outGrainType
)
;
var
outOffset
=
0
;
for
(
var
i
=
0
;
i
<
outLength
;
i
+
+
)
{
if
(
i
in
inArray
)
{
var
element
=
inArray
[
i
]
;
var
out
=
TypedObjectGetOpaqueIf
(
outGrainType
result
outOffset
outGrainTypeIsComplex
)
;
var
r
=
func
(
element
i
inArray
out
)
;
if
(
r
!
=
=
undefined
)
TypedObjectSet
(
outGrainType
result
outOffset
null
r
)
;
}
outOffset
+
=
outUnitSize
;
}
return
result
;
}
function
MapTypedSeqImpl
(
inArray
depth
outputType
func
)
{
assert
(
IsObject
(
outputType
)
&
&
ObjectIsTypeDescr
(
outputType
)
"
2
.
Map
/
From
called
on
non
-
type
-
object
outputType
"
)
;
assert
(
IsObject
(
inArray
)
&
&
ObjectIsTypedObject
(
inArray
)
"
Map
/
From
called
on
non
-
object
or
untyped
input
array
.
"
)
;
assert
(
TypeDescrIsArrayType
(
outputType
)
"
Map
/
From
called
on
non
array
-
type
outputType
"
)
;
if
(
depth
<
=
0
|
|
TO_INT32
(
depth
)
!
=
=
depth
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
inputType
=
TypeOfTypedObject
(
inArray
)
;
var
{
iterationSpace
:
inIterationSpace
grainType
:
inGrainType
}
=
ComputeIterationSpace
(
inputType
depth
inArray
.
length
)
;
if
(
!
IsObject
(
inGrainType
)
|
|
!
ObjectIsTypeDescr
(
inGrainType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
{
iterationSpace
grainType
:
outGrainType
totalLength
}
=
ComputeIterationSpace
(
outputType
depth
outputType
.
length
)
;
for
(
var
i
=
0
;
i
<
depth
;
i
+
+
)
if
(
inIterationSpace
[
i
]
!
=
=
iterationSpace
[
i
]
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
result
=
new
outputType
(
)
;
var
inGrainTypeIsComplex
=
!
TypeDescrIsSimpleType
(
inGrainType
)
;
var
outGrainTypeIsComplex
=
!
TypeDescrIsSimpleType
(
outGrainType
)
;
var
inOffset
=
0
;
var
outOffset
=
0
;
var
isDepth1Simple
=
depth
=
=
1
&
&
!
(
inGrainTypeIsComplex
|
|
outGrainTypeIsComplex
)
;
var
inUnitSize
=
isDepth1Simple
?
0
:
DESCR_SIZE
(
inGrainType
)
;
var
outUnitSize
=
isDepth1Simple
?
0
:
DESCR_SIZE
(
outGrainType
)
;
function
DoMapTypedSeqDepth1
(
)
{
for
(
var
i
=
0
;
i
<
totalLength
;
i
+
+
)
{
var
element
=
TypedObjectGet
(
inGrainType
inArray
inOffset
)
;
var
out
=
TypedObjectGetOpaqueIf
(
outGrainType
result
outOffset
outGrainTypeIsComplex
)
;
var
r
=
func
(
element
i
inArray
out
)
;
if
(
r
!
=
=
undefined
)
TypedObjectSet
(
outGrainType
result
outOffset
null
r
)
;
inOffset
+
=
inUnitSize
;
outOffset
+
=
outUnitSize
;
}
return
result
;
}
function
DoMapTypedSeqDepth1Simple
(
inArray
totalLength
func
result
)
{
for
(
var
i
=
0
;
i
<
totalLength
;
i
+
+
)
{
var
r
=
func
(
inArray
[
i
]
i
inArray
undefined
)
;
if
(
r
!
=
=
undefined
)
result
[
i
]
=
r
;
}
return
result
;
}
function
DoMapTypedSeqDepthN
(
)
{
var
indices
=
new
List
(
)
;
for
(
var
i
=
0
;
i
<
depth
;
i
+
+
)
callFunction
(
std_Array_push
indices
0
)
;
for
(
var
i
=
0
;
i
<
totalLength
;
i
+
+
)
{
var
element
=
TypedObjectGet
(
inGrainType
inArray
inOffset
)
;
var
out
=
TypedObjectGetOpaqueIf
(
outGrainType
result
outOffset
outGrainTypeIsComplex
)
;
var
args
=
[
element
]
;
callFunction
(
std_Function_apply
std_Array_push
args
indices
)
;
callFunction
(
std_Array_push
args
inArray
out
)
;
var
r
=
callFunction
(
std_Function_apply
func
void
0
args
)
;
if
(
r
!
=
=
undefined
)
TypedObjectSet
(
outGrainType
result
outOffset
null
r
)
;
inOffset
+
=
inUnitSize
;
outOffset
+
=
outUnitSize
;
IncrementIterationSpace
(
indices
iterationSpace
)
;
}
return
result
;
}
if
(
isDepth1Simple
)
return
DoMapTypedSeqDepth1Simple
(
inArray
totalLength
func
result
)
;
if
(
depth
=
=
1
)
return
DoMapTypedSeqDepth1
(
)
;
return
DoMapTypedSeqDepthN
(
)
;
}
function
ReduceTypedSeqImpl
(
array
outputType
func
initial
)
{
assert
(
IsObject
(
array
)
&
&
ObjectIsTypedObject
(
array
)
"
Reduce
called
on
non
-
object
or
untyped
input
array
.
"
)
;
assert
(
IsObject
(
outputType
)
&
&
ObjectIsTypeDescr
(
outputType
)
"
Reduce
called
on
non
-
type
-
object
outputType
"
)
;
var
start
value
;
if
(
initial
=
=
=
undefined
&
&
array
.
length
<
1
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
if
(
TypeDescrIsSimpleType
(
outputType
)
)
{
if
(
initial
=
=
=
undefined
)
{
start
=
1
;
value
=
array
[
0
]
;
}
else
{
start
=
0
;
value
=
outputType
(
initial
)
;
}
for
(
var
i
=
start
;
i
<
array
.
length
;
i
+
+
)
value
=
outputType
(
func
(
value
array
[
i
]
)
)
;
}
else
{
if
(
initial
=
=
=
undefined
)
{
start
=
1
;
value
=
new
outputType
(
array
[
0
]
)
;
}
else
{
start
=
0
;
value
=
initial
;
}
for
(
var
i
=
start
;
i
<
array
.
length
;
i
+
+
)
value
=
func
(
value
array
[
i
]
)
;
}
return
value
;
}
function
FilterTypedSeqImpl
(
array
func
)
{
assert
(
IsObject
(
array
)
&
&
ObjectIsTypedObject
(
array
)
"
Filter
called
on
non
-
object
or
untyped
input
array
.
"
)
;
assert
(
typeof
func
=
=
=
"
function
"
"
Filter
called
with
non
-
function
predicate
"
)
;
var
arrayType
=
TypeOfTypedObject
(
array
)
;
if
(
!
TypeDescrIsArrayType
(
arrayType
)
)
ThrowTypeError
(
JSMSG_TYPEDOBJECT_BAD_ARGS
)
;
var
elementType
=
arrayType
.
elementType
;
var
flags
=
new
Uint8Array
(
NUM_BYTES
(
array
.
length
)
)
;
var
count
=
0
;
var
size
=
DESCR_SIZE
(
elementType
)
;
var
inOffset
=
0
;
for
(
var
i
=
0
;
i
<
array
.
length
;
i
+
+
)
{
var
v
=
TypedObjectGet
(
elementType
array
inOffset
)
;
if
(
func
(
v
i
array
)
)
{
SET_BIT
(
flags
i
)
;
count
+
+
;
}
inOffset
+
=
size
;
}
var
AT
=
GetTypedObjectModule
(
)
.
ArrayType
;
var
resultType
=
new
AT
(
elementType
count
)
;
var
result
=
new
resultType
(
)
;
for
(
var
i
=
0
j
=
0
;
i
<
array
.
length
;
i
+
+
)
{
if
(
GET_BIT
(
flags
i
)
)
result
[
j
+
+
]
=
array
[
i
]
;
}
return
result
;
}
