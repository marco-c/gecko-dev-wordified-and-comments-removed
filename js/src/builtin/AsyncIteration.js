function
AsyncIteratorIdentity
(
)
{
return
this
;
}
function
AsyncGeneratorNext
(
val
)
{
assert
(
IsAsyncGeneratorObject
(
this
)
"
ThisArgument
must
be
a
generator
object
for
async
generators
"
)
;
return
resumeGenerator
(
this
val
"
next
"
)
;
}
function
AsyncGeneratorThrow
(
val
)
{
assert
(
IsAsyncGeneratorObject
(
this
)
"
ThisArgument
must
be
a
generator
object
for
async
generators
"
)
;
return
resumeGenerator
(
this
val
"
throw
"
)
;
}
function
AsyncGeneratorReturn
(
val
)
{
assert
(
IsAsyncGeneratorObject
(
this
)
"
ThisArgument
must
be
a
generator
object
for
async
generators
"
)
;
return
resumeGenerator
(
this
val
"
return
"
)
;
}
async
function
AsyncIteratorClose
(
iteratorRecord
value
)
{
const
iterator
=
iteratorRecord
.
iterator
;
const
returnMethod
=
iterator
.
return
;
if
(
returnMethod
!
=
=
undefined
&
&
returnMethod
!
=
=
null
)
{
const
result
=
await
callContentFunction
(
returnMethod
iterator
)
;
if
(
!
IsObject
(
result
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
DecompileArg
(
0
result
)
)
;
}
}
return
value
;
}
function
GetAsyncIteratorDirectWrapper
(
obj
)
{
if
(
!
IsObject
(
obj
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
obj
)
;
}
const
nextMethod
=
obj
.
next
;
if
(
!
IsCallable
(
nextMethod
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
nextMethod
)
;
}
return
{
[
GetBuiltinSymbol
(
"
asyncIterator
"
)
]
:
function
AsyncIteratorMethod
(
)
{
return
this
;
}
next
(
value
)
{
return
callContentFunction
(
nextMethod
obj
value
)
;
}
async
return
(
value
)
{
const
returnMethod
=
obj
.
return
;
if
(
returnMethod
!
=
=
undefined
&
&
returnMethod
!
=
=
null
)
{
return
callContentFunction
(
returnMethod
obj
value
)
;
}
return
{
done
:
true
value
}
;
}
}
;
}
function
AsyncIteratorHelperNext
(
value
)
{
let
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
(
O
=
GuardToAsyncIteratorHelper
(
O
)
)
=
=
=
null
)
{
return
callFunction
(
CallAsyncIteratorHelperMethodIfWrapped
this
value
"
AsyncIteratorHelperNext
"
)
;
}
const
generator
=
UnsafeGetReservedSlot
(
O
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
)
;
return
callFunction
(
IntrinsicAsyncGeneratorNext
generator
value
)
;
}
function
AsyncIteratorHelperReturn
(
value
)
{
let
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
(
O
=
GuardToAsyncIteratorHelper
(
O
)
)
=
=
=
null
)
{
return
callFunction
(
CallAsyncIteratorHelperMethodIfWrapped
this
value
"
AsyncIteratorHelperReturn
"
)
;
}
const
generator
=
UnsafeGetReservedSlot
(
O
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
)
;
return
callFunction
(
IntrinsicAsyncGeneratorReturn
generator
value
)
;
}
function
AsyncIteratorHelperThrow
(
value
)
{
let
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
(
O
=
GuardToAsyncIteratorHelper
(
O
)
)
=
=
=
null
)
{
return
callFunction
(
CallAsyncIteratorHelperMethodIfWrapped
this
value
"
AsyncIteratorHelperThrow
"
)
;
}
const
generator
=
UnsafeGetReservedSlot
(
O
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
)
;
return
callFunction
(
IntrinsicAsyncGeneratorThrow
generator
value
)
;
}
function
AsyncIteratorMap
(
mapper
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
if
(
!
IsCallable
(
mapper
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
mapper
)
)
;
}
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorMapGenerator
(
iterated
mapper
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorMapGenerator
(
iterated
mapper
)
{
let
lastValue
;
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
for
(
let
next
=
await
IteratorNext
(
iterated
lastValue
)
;
!
next
.
done
;
next
=
await
IteratorNext
(
iterated
lastValue
)
)
{
const
value
=
next
.
value
;
needClose
=
true
;
lastValue
=
yield
callContentFunction
(
mapper
undefined
value
)
;
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
)
;
}
}
}
function
AsyncIteratorFilter
(
filterer
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
if
(
!
IsCallable
(
filterer
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
filterer
)
)
;
}
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorFilterGenerator
(
iterated
filterer
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorFilterGenerator
(
iterated
filterer
)
{
let
lastValue
;
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
for
(
let
next
=
await
IteratorNext
(
iterated
lastValue
)
;
!
next
.
done
;
next
=
await
IteratorNext
(
iterated
lastValue
)
)
{
const
value
=
next
.
value
;
needClose
=
true
;
if
(
await
callContentFunction
(
filterer
undefined
value
)
)
{
lastValue
=
yield
value
;
}
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
)
;
}
}
}
function
AsyncIteratorTake
(
limit
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
const
remaining
=
ToInteger
(
limit
)
;
if
(
remaining
<
0
)
{
ThrowRangeError
(
JSMSG_NEGATIVE_LIMIT
)
;
}
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorTakeGenerator
(
iterated
remaining
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorTakeGenerator
(
iterated
remaining
)
{
let
lastValue
;
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
for
(
;
remaining
>
0
;
remaining
-
-
)
{
const
next
=
await
IteratorNext
(
iterated
lastValue
)
;
if
(
next
.
done
)
{
return
undefined
;
}
const
value
=
next
.
value
;
needClose
=
true
;
lastValue
=
yield
value
;
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
undefined
)
;
}
}
return
AsyncIteratorClose
(
iterated
undefined
)
;
}
function
AsyncIteratorDrop
(
limit
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
const
remaining
=
ToInteger
(
limit
)
;
if
(
remaining
<
0
)
{
ThrowRangeError
(
JSMSG_NEGATIVE_LIMIT
)
;
}
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorDropGenerator
(
iterated
remaining
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorDropGenerator
(
iterated
remaining
)
{
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
for
(
;
remaining
>
0
;
remaining
-
-
)
{
const
next
=
await
IteratorNext
(
iterated
)
;
if
(
next
.
done
)
{
return
;
}
}
let
lastValue
;
for
(
let
next
=
await
IteratorNext
(
iterated
lastValue
)
;
!
next
.
done
;
next
=
await
IteratorNext
(
iterated
lastValue
)
)
{
const
value
=
next
.
value
;
needClose
=
true
;
lastValue
=
yield
value
;
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
)
;
}
}
}
function
AsyncIteratorAsIndexedPairs
(
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorAsIndexedPairsGenerator
(
iterated
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorAsIndexedPairsGenerator
(
iterated
)
{
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
let
lastValue
;
for
(
let
next
=
await
IteratorNext
(
iterated
lastValue
)
index
=
0
;
!
next
.
done
;
next
=
await
IteratorNext
(
iterated
lastValue
)
index
+
+
)
{
const
value
=
next
.
value
;
needClose
=
true
;
lastValue
=
yield
[
index
value
]
;
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
)
;
}
}
}
function
AsyncIteratorFlatMap
(
mapper
)
{
const
iterated
=
GetIteratorDirect
(
this
)
;
if
(
!
IsCallable
(
mapper
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
mapper
)
)
;
}
const
iteratorHelper
=
NewAsyncIteratorHelper
(
)
;
const
generator
=
AsyncIteratorFlatMapGenerator
(
iterated
mapper
)
;
callFunction
(
IntrinsicAsyncGeneratorNext
generator
)
;
UnsafeSetReservedSlot
(
iteratorHelper
ASYNC_ITERATOR_HELPER_GENERATOR_SLOT
generator
)
;
return
iteratorHelper
;
}
async
function
*
AsyncIteratorFlatMapGenerator
(
iterated
mapper
)
{
let
needClose
=
true
;
try
{
yield
;
needClose
=
false
;
for
(
let
next
=
await
IteratorNext
(
iterated
)
;
!
next
.
done
;
next
=
await
IteratorNext
(
iterated
)
)
{
const
value
=
next
.
value
;
needClose
=
true
;
const
mapped
=
await
callContentFunction
(
mapper
undefined
value
)
;
for
await
(
const
innerValue
of
allowContentIter
(
mapped
)
)
{
yield
innerValue
;
}
needClose
=
false
;
}
}
finally
{
if
(
needClose
)
{
AsyncIteratorClose
(
iterated
)
;
}
}
}
async
function
AsyncIteratorReduce
(
reducer
)
{
const
iterated
=
GetAsyncIteratorDirectWrapper
(
this
)
;
if
(
!
IsCallable
(
reducer
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
reducer
)
)
;
}
let
accumulator
;
if
(
arguments
.
length
=
=
=
1
)
{
const
next
=
await
callContentFunction
(
iterated
.
next
iterated
)
;
if
(
!
IsObject
(
next
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
DecompileArg
(
0
next
)
)
;
}
if
(
next
.
done
)
{
ThrowTypeError
(
JSMSG_EMPTY_ITERATOR_REDUCE
)
;
}
accumulator
=
next
.
value
;
}
else
{
accumulator
=
arguments
[
1
]
;
}
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
accumulator
=
await
callContentFunction
(
reducer
undefined
accumulator
value
)
;
}
return
accumulator
;
}
async
function
AsyncIteratorToArray
(
)
{
const
iterated
=
{
[
GetBuiltinSymbol
(
"
asyncIterator
"
)
]
:
(
)
=
>
this
}
;
const
items
=
[
]
;
let
index
=
0
;
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
DefineDataProperty
(
items
index
+
+
value
)
;
}
return
items
;
}
async
function
AsyncIteratorForEach
(
fn
)
{
const
iterated
=
GetAsyncIteratorDirectWrapper
(
this
)
;
if
(
!
IsCallable
(
fn
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
fn
)
)
;
}
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
await
callContentFunction
(
fn
undefined
value
)
;
}
}
async
function
AsyncIteratorSome
(
fn
)
{
const
iterated
=
GetAsyncIteratorDirectWrapper
(
this
)
;
if
(
!
IsCallable
(
fn
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
fn
)
)
;
}
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
if
(
await
callContentFunction
(
fn
undefined
value
)
)
{
return
true
;
}
}
return
false
;
}
async
function
AsyncIteratorEvery
(
fn
)
{
const
iterated
=
GetAsyncIteratorDirectWrapper
(
this
)
;
if
(
!
IsCallable
(
fn
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
fn
)
)
;
}
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
if
(
!
(
await
callContentFunction
(
fn
undefined
value
)
)
)
{
return
false
;
}
}
return
true
;
}
async
function
AsyncIteratorFind
(
fn
)
{
const
iterated
=
GetAsyncIteratorDirectWrapper
(
this
)
;
if
(
!
IsCallable
(
fn
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
fn
)
)
;
}
for
await
(
const
value
of
allowContentIter
(
iterated
)
)
{
if
(
await
callContentFunction
(
fn
undefined
value
)
)
{
return
value
;
}
}
}
