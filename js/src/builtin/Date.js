#
if
JS_HAS_INTL_API
var
dateTimeFormatCache
=
new_Record
(
)
;
function
GetCachedFormat
(
format
required
defaults
)
{
assert
(
format
=
=
=
"
dateTimeFormat
"
|
|
format
=
=
=
"
dateFormat
"
|
|
format
=
=
=
"
timeFormat
"
"
unexpected
format
key
:
please
update
the
comment
by
dateTimeFormatCache
"
)
;
var
formatters
;
if
(
!
intl_IsRuntimeDefaultLocale
(
dateTimeFormatCache
.
runtimeDefaultLocale
)
|
|
!
intl_isDefaultTimeZone
(
dateTimeFormatCache
.
icuDefaultTimeZone
)
)
{
formatters
=
dateTimeFormatCache
.
formatters
=
new_Record
(
)
;
dateTimeFormatCache
.
runtimeDefaultLocale
=
intl_RuntimeDefaultLocale
(
)
;
dateTimeFormatCache
.
icuDefaultTimeZone
=
intl_defaultTimeZone
(
)
;
}
else
{
formatters
=
dateTimeFormatCache
.
formatters
;
}
var
fmt
=
formatters
[
format
]
;
if
(
fmt
=
=
=
undefined
)
{
fmt
=
formatters
[
format
]
=
intl_CreateDateTimeFormat
(
undefined
undefined
required
defaults
)
;
}
return
fmt
;
}
function
Date_toLocaleString
(
)
{
var
x
=
callFunction
(
ThisTimeValue
this
DATE_METHOD_LOCALE_STRING
)
;
if
(
Number_isNaN
(
x
)
)
{
return
"
Invalid
Date
"
;
}
var
locales
=
ArgumentsLength
(
)
?
GetArgument
(
0
)
:
undefined
;
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
dateTimeFormat
;
if
(
locales
=
=
=
undefined
&
&
options
=
=
=
undefined
)
{
dateTimeFormat
=
GetCachedFormat
(
"
dateTimeFormat
"
"
any
"
"
all
"
)
;
}
else
{
dateTimeFormat
=
intl_CreateDateTimeFormat
(
locales
options
"
any
"
"
all
"
)
;
}
return
intl_FormatDateTime
(
dateTimeFormat
x
false
)
;
}
function
Date_toLocaleDateString
(
)
{
var
x
=
callFunction
(
ThisTimeValue
this
DATE_METHOD_LOCALE_DATE_STRING
)
;
if
(
Number_isNaN
(
x
)
)
{
return
"
Invalid
Date
"
;
}
var
locales
=
ArgumentsLength
(
)
?
GetArgument
(
0
)
:
undefined
;
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
dateTimeFormat
;
if
(
locales
=
=
=
undefined
&
&
options
=
=
=
undefined
)
{
dateTimeFormat
=
GetCachedFormat
(
"
dateFormat
"
"
date
"
"
date
"
)
;
}
else
{
dateTimeFormat
=
intl_CreateDateTimeFormat
(
locales
options
"
date
"
"
date
"
)
;
}
return
intl_FormatDateTime
(
dateTimeFormat
x
false
)
;
}
function
Date_toLocaleTimeString
(
)
{
var
x
=
callFunction
(
ThisTimeValue
this
DATE_METHOD_LOCALE_TIME_STRING
)
;
if
(
Number_isNaN
(
x
)
)
{
return
"
Invalid
Date
"
;
}
var
locales
=
ArgumentsLength
(
)
?
GetArgument
(
0
)
:
undefined
;
var
options
=
ArgumentsLength
(
)
>
1
?
GetArgument
(
1
)
:
undefined
;
var
dateTimeFormat
;
if
(
locales
=
=
=
undefined
&
&
options
=
=
=
undefined
)
{
dateTimeFormat
=
GetCachedFormat
(
"
timeFormat
"
"
time
"
"
time
"
)
;
}
else
{
dateTimeFormat
=
intl_CreateDateTimeFormat
(
locales
options
"
time
"
"
time
"
)
;
}
return
intl_FormatDateTime
(
dateTimeFormat
x
false
)
;
}
#
endif
/
/
JS_HAS_INTL_API
