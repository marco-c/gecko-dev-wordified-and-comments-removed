#
ifndef
builtin_RegExp_h
#
define
builtin_RegExp_h
#
include
"
vm
/
RegExpObject
.
h
"
namespace
js
{
JSObject
*
InitRegExpClass
(
JSContext
*
cx
HandleObject
obj
)
;
enum
RegExpStaticsUpdate
{
UpdateRegExpStatics
DontUpdateRegExpStatics
}
;
bool
ExecuteRegExpLegacy
(
JSContext
*
cx
RegExpStatics
*
res
RegExpObject
&
reobj
HandleLinearString
input
size_t
*
lastIndex
bool
test
MutableHandleValue
rval
)
;
bool
CreateRegExpMatchResult
(
JSContext
*
cx
HandleString
input
const
MatchPairs
&
matches
MutableHandleValue
rval
)
;
extern
bool
RegExpMatcher
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
RegExpMatcherRaw
(
JSContext
*
cx
HandleObject
regexp
HandleString
input
uint32_t
lastIndex
bool
sticky
MatchPairs
*
maybeMatches
MutableHandleValue
output
)
;
extern
bool
RegExpTester
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
RegExpTesterRaw
(
JSContext
*
cx
HandleObject
regexp
HandleString
input
uint32_t
lastIndex
bool
sticky
int32_t
*
endIndex
)
;
extern
bool
regexp_exec_no_statics
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
regexp_test_no_statics
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
regexp_construct_no_statics
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
bool
IsRegExp
(
JSContext
*
cx
HandleValue
value
bool
*
result
)
;
extern
bool
regexp_construct
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
const
JSPropertySpec
regexp_static_props
[
]
;
extern
const
JSPropertySpec
regexp_properties
[
]
;
extern
const
JSFunctionSpec
regexp_methods
[
]
;
extern
bool
regexp_global
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
regexp_ignoreCase
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
regexp_multiline
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
regexp_sticky
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
regexp_unicode
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
}
#
endif
