#
ifndef
builtin_RegExp_h
#
define
builtin_RegExp_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
NamespaceImports
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
RegExpShared
.
h
"
class
JSLinearString
;
namespace
JS
{
class
Value
;
}
namespace
js
{
class
ArrayObject
;
class
MatchPairs
;
class
RegExpObject
;
class
RegExpStatics
;
JSObject
*
InitRegExpClass
(
JSContext
*
cx
HandleObject
obj
)
;
[
[
nodiscard
]
]
bool
ExecuteRegExpLegacy
(
JSContext
*
cx
RegExpStatics
*
res
Handle
<
RegExpObject
*
>
reobj
Handle
<
JSLinearString
*
>
input
size_t
*
lastIndex
bool
test
MutableHandleValue
rval
)
;
[
[
nodiscard
]
]
bool
CreateRegExpMatchResult
(
JSContext
*
cx
HandleRegExpShared
re
HandleString
input
const
MatchPairs
&
matches
MutableHandleValue
rval
)
;
[
[
nodiscard
]
]
extern
bool
RegExpMatcher
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
RegExpMatcherRaw
(
JSContext
*
cx
HandleObject
regexp
HandleString
input
int32_t
lastIndex
MatchPairs
*
maybeMatches
MutableHandleValue
output
)
;
[
[
nodiscard
]
]
extern
bool
RegExpSearcher
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
RegExpSearcherRaw
(
JSContext
*
cx
HandleObject
regexp
HandleString
input
int32_t
lastIndex
MatchPairs
*
maybeMatches
int32_t
*
result
)
;
[
[
nodiscard
]
]
extern
bool
RegExpSearcherLastLimit
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
RegExpBuiltinExecMatchFromJit
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
HandleString
input
MatchPairs
*
maybeMatches
MutableHandleValue
output
)
;
[
[
nodiscard
]
]
extern
bool
RegExpBuiltinExecTestFromJit
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
HandleString
input
bool
*
result
)
;
[
[
nodiscard
]
]
extern
bool
intrinsic_GetElemBaseForLambda
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
intrinsic_GetStringDataProperty
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_construct_raw_flags
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
IsRegExp
(
JSContext
*
cx
HandleValue
value
bool
*
result
)
;
[
[
nodiscard
]
]
extern
bool
RegExpCreate
(
JSContext
*
cx
HandleValue
pattern
HandleValue
flags
MutableHandleValue
rval
)
;
[
[
nodiscard
]
]
extern
bool
RegExpPrototypeOptimizable
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
RegExpPrototypeOptimizableRaw
(
JSContext
*
cx
JSObject
*
proto
)
;
[
[
nodiscard
]
]
extern
bool
RegExpInstanceOptimizable
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
RegExpInstanceOptimizableRaw
(
JSContext
*
cx
JSObject
*
obj
JSObject
*
proto
)
;
[
[
nodiscard
]
]
extern
bool
RegExpBuiltinExec
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
regexp
Handle
<
JSString
*
>
string
bool
forTest
MutableHandle
<
Value
>
rval
)
;
[
[
nodiscard
]
]
extern
bool
RegExpExec
(
JSContext
*
cx
Handle
<
JSObject
*
>
regexp
Handle
<
JSString
*
>
string
bool
forTest
MutableHandle
<
Value
>
rval
)
;
[
[
nodiscard
]
]
extern
bool
RegExpGetSubstitution
(
JSContext
*
cx
Handle
<
ArrayObject
*
>
matchResult
Handle
<
JSLinearString
*
>
string
size_t
position
Handle
<
JSLinearString
*
>
replacement
size_t
firstDollarIndex
HandleValue
namedCaptures
MutableHandleValue
rval
)
;
[
[
nodiscard
]
]
extern
bool
RegExpHasCaptureGroups
(
JSContext
*
cx
Handle
<
RegExpObject
*
>
obj
Handle
<
JSString
*
>
input
bool
*
result
)
;
[
[
nodiscard
]
]
extern
bool
GetFirstDollarIndex
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
GetFirstDollarIndexRaw
(
JSContext
*
cx
JSString
*
str
int32_t
*
index
)
;
extern
int32_t
GetFirstDollarIndexRawFlat
(
JSLinearString
*
text
)
;
[
[
nodiscard
]
]
extern
bool
regexp_construct
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
const
JSPropertySpec
regexp_static_props
[
]
;
extern
const
JSPropertySpec
regexp_properties
[
]
;
extern
const
JSFunctionSpec
regexp_methods
[
]
;
[
[
nodiscard
]
]
extern
bool
regexp_hasIndices
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_global
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_ignoreCase
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_multiline
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_dotAll
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_sticky
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_unicode
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
[
[
nodiscard
]
]
extern
bool
regexp_unicodeSets
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
#
ifdef
DEBUG
constexpr
uint32_t
RegExpSearcherLastLimitSentinel
=
UINT32_MAX
;
#
endif
}
#
endif
