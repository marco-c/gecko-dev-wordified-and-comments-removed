function
SetConstructorInit
(
iterable
)
{
var
set
=
this
;
var
adder
=
set
.
add
;
if
(
!
IsCallable
(
adder
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
typeof
adder
)
;
for
(
var
nextValue
of
allowContentIter
(
iterable
)
)
callContentFunction
(
adder
set
nextValue
)
;
}
function
SetForEach
(
callbackfn
thisArg
=
undefined
)
{
var
S
=
this
;
if
(
!
IsObject
(
S
)
|
|
(
S
=
GuardToSetObject
(
S
)
)
=
=
=
null
)
return
callFunction
(
CallSetMethodIfWrapped
this
callbackfn
thisArg
"
SetForEach
"
)
;
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
values
=
callFunction
(
std_Set_values
S
)
;
var
setIterationResult
=
setIteratorTemp
.
setIterationResult
;
if
(
!
setIterationResult
)
setIterationResult
=
setIteratorTemp
.
setIterationResult
=
_CreateSetIterationResult
(
)
;
while
(
true
)
{
var
done
=
_GetNextSetEntryForIterator
(
values
setIterationResult
)
;
if
(
done
)
break
;
var
value
=
setIterationResult
[
0
]
;
setIterationResult
[
0
]
=
null
;
callContentFunction
(
callbackfn
thisArg
value
value
S
)
;
}
}
function
SetSpecies
(
)
{
return
this
;
}
_SetCanonicalName
(
SetSpecies
"
get
[
Symbol
.
species
]
"
)
;
var
setIteratorTemp
=
{
setIterationResult
:
null
}
;
function
SetIteratorNext
(
)
{
var
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
(
O
=
GuardToSetIterator
(
O
)
)
=
=
=
null
)
return
callFunction
(
CallSetIteratorMethodIfWrapped
this
"
SetIteratorNext
"
)
;
var
setIterationResult
=
setIteratorTemp
.
setIterationResult
;
if
(
!
setIterationResult
)
setIterationResult
=
setIteratorTemp
.
setIterationResult
=
_CreateSetIterationResult
(
)
;
var
retVal
=
{
value
:
undefined
done
:
true
}
;
var
done
=
_GetNextSetEntryForIterator
(
O
setIterationResult
)
;
if
(
!
done
)
{
var
itemKind
=
UnsafeGetInt32FromReservedSlot
(
O
ITERATOR_SLOT_ITEM_KIND
)
;
var
result
;
if
(
itemKind
=
=
=
ITEM_KIND_VALUE
)
{
result
=
setIterationResult
[
0
]
;
}
else
{
assert
(
itemKind
=
=
=
ITEM_KIND_KEY_AND_VALUE
itemKind
)
;
result
=
[
setIterationResult
[
0
]
setIterationResult
[
0
]
]
;
}
setIterationResult
[
0
]
=
null
;
retVal
.
value
=
result
;
retVal
.
done
=
false
;
}
return
retVal
;
}
