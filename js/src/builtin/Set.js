function
SetConstructorInit
(
iterable
)
{
var
set
=
this
;
var
adder
=
set
.
add
;
if
(
!
IsCallable
(
adder
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
typeof
adder
)
;
var
iterFn
=
iterable
[
std_iterator
]
;
if
(
!
IsCallable
(
iterFn
)
)
ThrowTypeError
(
JSMSG_NOT_ITERABLE
DecompileArg
(
0
iterable
)
)
;
var
iter
=
callContentFunction
(
iterFn
iterable
)
;
if
(
!
IsObject
(
iter
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
typeof
iter
)
;
while
(
true
)
{
var
next
=
callContentFunction
(
iter
.
next
iter
)
;
if
(
!
IsObject
(
next
)
)
ThrowTypeError
(
JSMSG_NOT_NONNULL_OBJECT
typeof
next
)
;
if
(
next
.
done
)
return
;
var
nextValue
=
next
.
value
;
callContentFunction
(
adder
set
nextValue
)
;
}
}
function
SetForEach
(
callbackfn
thisArg
=
undefined
)
{
var
S
=
this
;
if
(
!
IsObject
(
S
)
)
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Set
"
"
forEach
"
typeof
S
)
;
try
{
callFunction
(
std_Set_has
S
)
;
}
catch
(
e
)
{
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Set
"
"
forEach
"
typeof
S
)
;
}
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
values
=
callFunction
(
std_Set_iterator
S
)
;
while
(
true
)
{
var
result
=
callFunction
(
std_Set_iterator_next
values
)
;
if
(
result
.
done
)
break
;
var
value
=
result
.
value
;
callContentFunction
(
callbackfn
thisArg
value
value
S
)
;
}
}
function
SetSpecies
(
)
{
return
this
;
}
_SetCanonicalName
(
SetSpecies
"
get
[
Symbol
.
species
]
"
)
;
