function
SetConstructorInit
(
iterable
)
{
var
set
=
this
;
var
adder
=
set
.
add
;
if
(
!
IsCallable
(
adder
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
typeof
adder
)
;
}
for
(
var
nextValue
of
allowContentIter
(
iterable
)
)
{
callContentFunction
(
adder
set
nextValue
)
;
}
}
#
ifdef
ENABLE_NEW_SET_METHODS
function
SetUnion
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
Ctr
=
SpeciesConstructor
(
set
GetBuiltinConstructor
(
"
Set
"
)
)
;
var
newSet
=
constructContentFunction
(
Ctr
Ctr
set
)
;
var
adder
=
newSet
.
add
;
if
(
!
IsCallable
(
adder
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
add
"
)
;
}
return
AddEntryFromIterable
(
newSet
iterable
adder
)
;
}
function
SetIntersection
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
Ctr
=
SpeciesConstructor
(
set
GetBuiltinConstructor
(
"
Set
"
)
)
;
var
newSet
=
constructContentFunction
(
Ctr
Ctr
)
;
var
hasCheck
=
set
.
has
;
if
(
!
IsCallable
(
hasCheck
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
has
"
)
;
}
var
adder
=
newSet
.
add
;
if
(
!
IsCallable
(
adder
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
add
"
)
;
}
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
newSet
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
var
has
;
try
{
has
=
callContentFunction
(
hasCheck
set
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
if
(
has
)
{
needClose
=
true
;
try
{
callContentFunction
(
adder
newSet
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
}
}
}
function
SetDifference
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
Ctr
=
SpeciesConstructor
(
set
GetBuiltinConstructor
(
"
Set
"
)
)
;
var
newSet
=
constructContentFunction
(
Ctr
Ctr
set
)
;
var
remover
=
newSet
.
delete
;
if
(
!
IsCallable
(
remover
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
delete
"
)
;
}
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
newSet
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
try
{
callContentFunction
(
remover
newSet
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
}
}
function
SetSymmetricDifference
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
Ctr
=
SpeciesConstructor
(
set
GetBuiltinConstructor
(
"
Set
"
)
)
;
var
newSet
=
constructContentFunction
(
Ctr
Ctr
set
)
;
var
remover
=
newSet
.
delete
;
if
(
!
IsCallable
(
remover
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
delete
"
)
;
}
var
adder
=
newSet
.
add
;
if
(
!
IsCallable
(
adder
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
add
"
)
;
}
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
newSet
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
var
removed
;
try
{
removed
=
callContentFunction
(
remover
newSet
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
if
(
!
removed
)
{
needClose
=
true
;
try
{
callContentFunction
(
adder
newSet
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
}
}
}
function
SetIsSubsetOf
(
iterable
)
{
var
set
=
this
;
var
iteratorRecord
=
GetIteratorSync
(
set
)
;
if
(
!
IsObject
(
iterable
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
otherSet
=
iterable
;
var
hasCheck
=
otherSet
.
has
;
if
(
!
IsCallable
(
hasCheck
)
)
{
let
set
=
GetBuiltinConstructor
(
"
Set
"
)
;
otherSet
=
new
set
(
)
;
AddEntryFromIterable
(
otherSet
iterable
std_Set_add
)
;
hasCheck
=
std_Set_has
;
}
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
true
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
var
has
;
try
{
has
=
callContentFunction
(
hasCheck
otherSet
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
if
(
!
has
)
{
return
false
;
}
}
}
function
SetIsSupersetOf
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
hasCheck
=
set
.
has
;
if
(
!
IsCallable
(
hasCheck
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
has
"
)
;
}
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
true
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
var
has
;
try
{
has
=
callContentFunction
(
hasCheck
set
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
if
(
!
has
)
{
return
false
;
}
}
}
function
SetIsDisjointFrom
(
iterable
)
{
var
set
=
this
;
if
(
!
IsObject
(
set
)
)
{
ThrowTypeError
(
JSMSG_OBJECT_REQUIRED
set
=
=
=
null
?
"
null
"
:
typeof
set
)
;
}
var
hasCheck
=
set
.
has
;
if
(
!
IsCallable
(
hasCheck
)
)
{
ThrowTypeError
(
JSMSG_PROPERTY_NOT_CALLABLE
"
has
"
)
;
}
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
true
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
var
has
;
try
{
has
=
callContentFunction
(
hasCheck
set
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
if
(
has
)
{
return
false
;
}
}
}
function
AddEntryFromIterable
(
target
iterable
adder
)
{
assert
(
IsCallable
(
adder
)
"
adder
argument
is
callable
"
)
;
var
iteratorRecord
=
GetIteratorSync
(
iterable
)
;
while
(
true
)
{
var
next
=
IteratorStep
(
iteratorRecord
)
;
if
(
!
next
)
{
return
target
;
}
var
nextValue
=
next
.
value
;
var
needClose
=
true
;
try
{
callContentFunction
(
adder
target
nextValue
)
;
needClose
=
false
;
}
finally
{
if
(
needClose
)
{
IteratorClose
(
iteratorRecord
)
;
}
}
}
}
#
endif
function
SetForEach
(
callbackfn
thisArg
=
undefined
)
{
var
S
=
this
;
if
(
!
IsObject
(
S
)
|
|
(
S
=
GuardToSetObject
(
S
)
)
=
=
=
null
)
{
return
callFunction
(
CallSetMethodIfWrapped
this
callbackfn
thisArg
"
SetForEach
"
)
;
}
if
(
!
IsCallable
(
callbackfn
)
)
{
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
}
var
values
=
callFunction
(
std_Set_values
S
)
;
var
setIterationResult
=
setIteratorTemp
.
setIterationResult
;
if
(
!
setIterationResult
)
{
setIterationResult
=
setIteratorTemp
.
setIterationResult
=
CreateSetIterationResult
(
)
;
}
while
(
true
)
{
var
done
=
GetNextSetEntryForIterator
(
values
setIterationResult
)
;
if
(
done
)
{
break
;
}
var
value
=
setIterationResult
[
0
]
;
setIterationResult
[
0
]
=
null
;
callContentFunction
(
callbackfn
thisArg
value
value
S
)
;
}
}
function
SetSpecies
(
)
{
return
this
;
}
SetCanonicalName
(
SetSpecies
"
get
[
Symbol
.
species
]
"
)
;
var
setIteratorTemp
=
{
setIterationResult
:
null
}
;
function
SetIteratorNext
(
)
{
var
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
(
O
=
GuardToSetIterator
(
O
)
)
=
=
=
null
)
{
return
callFunction
(
CallSetIteratorMethodIfWrapped
this
"
SetIteratorNext
"
)
;
}
var
setIterationResult
=
setIteratorTemp
.
setIterationResult
;
if
(
!
setIterationResult
)
{
setIterationResult
=
setIteratorTemp
.
setIterationResult
=
CreateSetIterationResult
(
)
;
}
var
retVal
=
{
value
:
undefined
done
:
true
}
;
var
done
=
GetNextSetEntryForIterator
(
O
setIterationResult
)
;
if
(
!
done
)
{
var
itemKind
=
UnsafeGetInt32FromReservedSlot
(
O
ITERATOR_SLOT_ITEM_KIND
)
;
var
result
;
if
(
itemKind
=
=
=
ITEM_KIND_VALUE
)
{
result
=
setIterationResult
[
0
]
;
}
else
{
assert
(
itemKind
=
=
=
ITEM_KIND_KEY_AND_VALUE
itemKind
)
;
result
=
[
setIterationResult
[
0
]
setIterationResult
[
0
]
]
;
}
setIterationResult
[
0
]
=
null
;
retVal
.
value
=
result
;
retVal
.
done
=
false
;
}
return
retVal
;
}
