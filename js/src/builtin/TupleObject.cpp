#
include
"
builtin
/
TupleObject
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
TupleType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
TupleObject
*
TupleObject
:
:
create
(
JSContext
*
cx
Handle
<
TupleType
*
>
tuple
)
{
TupleObject
*
tup
=
NewBuiltinClassInstance
<
TupleObject
>
(
cx
)
;
if
(
!
tup
)
{
return
nullptr
;
}
tup
-
>
setFixedSlot
(
PrimitiveValueSlot
ExtendedPrimitiveValue
(
*
tuple
)
)
;
return
tup
;
}
TupleType
*
TupleObject
:
:
unbox
(
)
const
{
return
&
getFixedSlot
(
PrimitiveValueSlot
)
.
toExtendedPrimitive
(
)
.
as
<
TupleType
>
(
)
;
}
bool
TupleObject
:
:
maybeUnbox
(
JSObject
*
obj
MutableHandle
<
TupleType
*
>
tupp
)
{
if
(
obj
-
>
is
<
TupleType
>
(
)
)
{
tupp
.
set
(
&
obj
-
>
as
<
TupleType
>
(
)
)
;
return
true
;
}
if
(
obj
-
>
is
<
TupleObject
>
(
)
)
{
tupp
.
set
(
obj
-
>
as
<
TupleObject
>
(
)
.
unbox
(
)
)
;
return
true
;
}
return
false
;
}
bool
tup_mayResolve
(
const
JSAtomState
&
jsid
id
JSObject
*
)
{
return
id
.
isInt
(
)
;
}
bool
tup_resolve
(
JSContext
*
cx
HandleObject
obj
HandleId
id
bool
*
resolvedp
)
{
RootedValue
value
(
cx
)
;
*
resolvedp
=
obj
-
>
as
<
TupleObject
>
(
)
.
unbox
(
)
-
>
getOwnProperty
(
id
&
value
)
;
if
(
*
resolvedp
)
{
static
const
unsigned
TUPLE_ELEMENT_ATTRS
=
JSPROP_ENUMERATE
|
JSPROP_READONLY
|
JSPROP_PERMANENT
;
return
DefineDataProperty
(
cx
obj
id
value
TUPLE_ELEMENT_ATTRS
|
JSPROP_RESOLVING
)
;
}
return
true
;
}
const
JSClassOps
TupleObjectClassOps
=
{
nullptr
nullptr
nullptr
nullptr
tup_resolve
tup_mayResolve
nullptr
nullptr
nullptr
nullptr
nullptr
}
;
const
JSClass
TupleObject
:
:
class_
=
{
"
TupleObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Tuple
)
&
TupleObjectClassOps
}
;
