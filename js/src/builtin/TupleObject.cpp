#
include
"
builtin
/
TupleObject
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
TupleType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
TupleObject
*
TupleObject
:
:
create
(
JSContext
*
cx
Handle
<
TupleType
*
>
tuple
)
{
TupleObject
*
tup
=
NewBuiltinClassInstance
<
TupleObject
>
(
cx
)
;
if
(
!
tup
)
{
return
nullptr
;
}
tup
-
>
setFixedSlot
(
PrimitiveValueSlot
ExtendedPrimitiveValue
(
*
tuple
)
)
;
return
tup
;
}
TupleType
*
TupleObject
:
:
unbox
(
)
const
{
return
&
getFixedSlot
(
PrimitiveValueSlot
)
.
toExtendedPrimitive
(
)
.
as
<
TupleType
>
(
)
;
}
const
JSClass
TupleObject
:
:
class_
=
{
"
TupleObject
"
JSCLASS_HAS_RESERVED_SLOTS
(
SlotCount
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Tuple
)
JS_NULL_CLASS_OPS
JS_NULL_CLASS_SPEC
JS_NULL_CLASS_EXT
JS_NULL_OBJECT_OPS
}
;
