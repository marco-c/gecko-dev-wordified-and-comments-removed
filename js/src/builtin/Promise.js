function
Promise_catch
(
onRejected
)
{
return
callContentFunction
(
this
.
then
this
undefined
onRejected
)
;
}
function
Promise_finally
(
onFinally
)
{
var
promise
=
this
;
if
(
!
IsObject
(
promise
)
)
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Promise
"
"
finally
"
"
value
"
)
;
var
C
=
SpeciesConstructor
(
promise
GetBuiltinConstructor
(
"
Promise
"
)
)
;
assert
(
IsConstructor
(
C
)
"
SpeciesConstructor
returns
a
constructor
function
"
)
;
var
thenFinally
catchFinally
;
if
(
!
IsCallable
(
onFinally
)
)
{
thenFinally
=
onFinally
;
catchFinally
=
onFinally
;
}
else
{
(
thenFinally
)
=
function
(
value
)
{
var
result
=
onFinally
(
)
;
var
promise
=
PromiseResolve
(
C
result
)
;
return
callContentFunction
(
promise
.
then
promise
function
(
)
{
return
value
;
}
)
;
}
;
(
catchFinally
)
=
function
(
reason
)
{
var
result
=
onFinally
(
)
;
var
promise
=
PromiseResolve
(
C
result
)
;
return
callContentFunction
(
promise
.
then
promise
function
(
)
{
throw
reason
;
}
)
;
}
;
}
return
callContentFunction
(
promise
.
then
promise
thenFinally
catchFinally
)
;
}
