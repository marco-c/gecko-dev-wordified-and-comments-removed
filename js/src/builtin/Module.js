function
ModuleResolveExport
(
exportName
resolveSet
=
[
]
exportStarSet
=
[
]
)
{
if
(
!
IsObject
(
this
)
|
|
!
IsModule
(
this
)
)
{
return
callFunction
(
CallModuleMethodIfWrapped
this
exportName
resolveSet
exportStarSet
"
ModuleResolveExport
"
)
;
}
let
module
=
this
;
for
(
let
i
=
0
;
i
<
resolveSet
.
length
;
i
+
+
)
{
let
r
=
resolveSet
[
i
]
;
if
(
r
.
module
=
=
=
module
&
&
r
.
exportName
=
=
=
exportName
)
return
null
;
}
resolveSet
.
push
(
{
module
:
module
exportName
:
exportName
}
)
;
let
localExportEntries
=
module
.
localExportEntries
;
for
(
let
i
=
0
;
i
<
localExportEntries
.
length
;
i
+
+
)
{
let
e
=
localExportEntries
[
i
]
;
if
(
exportName
=
=
=
e
.
exportName
)
return
{
module
:
module
bindingName
:
e
.
localName
}
;
}
let
indirectExportEntries
=
module
.
indirectExportEntries
;
for
(
let
i
=
0
;
i
<
indirectExportEntries
.
length
;
i
+
+
)
{
let
e
=
indirectExportEntries
[
i
]
;
if
(
exportName
=
=
=
e
.
exportName
)
{
let
importedModule
=
HostResolveImportedModule
(
module
e
.
moduleRequest
)
;
let
indirectResolution
=
importedModule
.
resolveExport
(
e
.
importName
resolveSet
exportStarSet
)
;
if
(
indirectResolution
!
=
=
null
)
return
indirectResolution
;
}
}
if
(
exportName
=
=
=
"
default
"
)
{
ThrowSyntaxError
(
JSMSG_BAD_DEFAULT_EXPORT
)
;
}
if
(
module
in
exportStarSet
)
return
null
;
exportStarSet
.
push
(
module
)
;
let
starResolution
=
null
;
let
starExportEntries
=
module
.
starExportEntries
;
for
(
let
i
=
0
;
i
<
starExportEntries
.
length
;
i
+
+
)
{
let
e
=
starExportEntries
[
i
]
;
let
importedModule
=
HostResolveImportedModule
(
module
e
.
moduleRequest
)
;
let
resolution
=
importedModule
.
resolveExport
(
exportName
resolveSet
exportStarSet
)
;
if
(
resolution
=
=
=
"
ambiguous
"
)
return
resolution
;
if
(
resolution
!
=
=
null
)
{
if
(
starResolution
=
=
=
null
)
{
starResolution
=
resolution
;
}
else
{
if
(
resolution
.
module
!
=
=
starResolution
.
module
|
|
resolution
.
exportName
!
=
=
starResolution
.
exportName
)
{
return
"
ambiguous
"
;
}
}
}
}
return
starResolution
;
}
