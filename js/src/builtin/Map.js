function
MapForEach
(
callbackfn
thisArg
=
undefined
)
{
var
M
=
this
;
if
(
!
IsObject
(
M
)
)
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Map
"
"
forEach
"
typeof
M
)
;
try
{
callFunction
(
std_Map_has
M
)
;
}
catch
(
e
)
{
ThrowTypeError
(
JSMSG_INCOMPATIBLE_PROTO
"
Map
"
"
forEach
"
typeof
M
)
;
}
if
(
!
IsCallable
(
callbackfn
)
)
ThrowTypeError
(
JSMSG_NOT_FUNCTION
DecompileArg
(
0
callbackfn
)
)
;
var
entries
=
callFunction
(
std_Map_iterator
M
)
;
while
(
true
)
{
var
result
=
callFunction
(
std_Map_iterator_next
entries
)
;
if
(
result
.
done
)
break
;
var
entry
=
result
.
value
;
callContentFunction
(
callbackfn
thisArg
entry
[
1
]
entry
[
0
]
M
)
;
}
}
var
iteratorTemp
=
{
mapIterationResultPair
:
null
}
;
function
MapIteratorNext
(
)
{
var
O
=
this
;
if
(
!
IsObject
(
O
)
|
|
!
IsMapIterator
(
O
)
)
return
callFunction
(
CallMapIteratorMethodIfWrapped
O
"
MapIteratorNext
"
)
;
var
mapIterationResultPair
=
iteratorTemp
.
mapIterationResultPair
;
if
(
!
mapIterationResultPair
)
mapIterationResultPair
=
iteratorTemp
.
mapIterationResultPair
=
[
null
null
]
;
var
retVal
=
{
value
:
undefined
done
:
true
}
;
var
done
=
_GetNextMapEntryForIterator
(
O
mapIterationResultPair
)
;
if
(
!
done
)
{
var
itemKind
=
UnsafeGetInt32FromReservedSlot
(
this
ITERATOR_SLOT_ITEM_KIND
)
;
var
result
;
if
(
itemKind
=
=
=
ITEM_KIND_KEY
)
{
result
=
mapIterationResultPair
[
0
]
;
}
else
if
(
itemKind
=
=
=
ITEM_KIND_VALUE
)
{
result
=
mapIterationResultPair
[
1
]
;
}
else
{
assert
(
itemKind
=
=
=
ITEM_KIND_KEY_AND_VALUE
itemKind
)
;
result
=
[
mapIterationResultPair
[
0
]
mapIterationResultPair
[
1
]
]
;
}
mapIterationResultPair
[
0
]
=
null
;
mapIterationResultPair
[
1
]
=
null
;
retVal
.
value
=
result
;
retVal
.
done
=
false
;
}
return
retVal
;
}
function
MapSpecies
(
)
{
return
this
;
}
_SetCanonicalName
(
MapSpecies
"
get
[
Symbol
.
species
]
"
)
;
