#
ifndef
builtin_MapObject_inl_h
#
define
builtin_MapObject_inl_h
#
include
"
builtin
/
MapObject
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
namespace
js
{
template
<
JSProtoKey
ProtoKey
>
[
[
nodiscard
]
]
static
bool
IsOptimizableInitForSet
(
JSContext
*
cx
JSNative
addNative
HandleObject
setObject
HandleValue
iterable
bool
*
optimized
)
{
MOZ_ASSERT
(
!
*
optimized
)
;
if
(
!
iterable
.
isObject
(
)
)
{
return
true
;
}
RootedObject
array
(
cx
&
iterable
.
toObject
(
)
)
;
if
(
!
IsPackedArray
(
array
)
)
{
return
true
;
}
JSObject
*
proto
=
setObject
-
>
staticPrototype
(
)
;
MOZ_ASSERT
(
proto
)
;
if
(
proto
!
=
cx
-
>
global
(
)
-
>
maybeGetPrototype
(
ProtoKey
)
)
{
return
true
;
}
auto
*
nproto
=
&
proto
-
>
as
<
NativeObject
>
(
)
;
mozilla
:
:
Maybe
<
PropertyInfo
>
addProp
=
nproto
-
>
lookup
(
cx
cx
-
>
names
(
)
.
add
)
;
if
(
addProp
.
isNothing
(
)
|
|
!
addProp
-
>
isDataProperty
(
)
)
{
return
true
;
}
Value
propVal
=
nproto
-
>
getSlot
(
addProp
-
>
slot
(
)
)
;
if
(
!
IsNativeFunction
(
propVal
addNative
)
)
{
return
true
;
}
ForOfPIC
:
:
Chain
*
stubChain
=
ForOfPIC
:
:
getOrCreate
(
cx
)
;
if
(
!
stubChain
)
{
return
false
;
}
return
stubChain
-
>
tryOptimizeArray
(
cx
array
.
as
<
ArrayObject
>
(
)
optimized
)
;
}
}
#
endif
