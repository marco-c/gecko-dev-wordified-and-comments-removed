async
function
DisposeResources
(
disposeCapability
)
{
var
hadError
=
false
;
var
latestException
=
undefined
;
var
needsAwait
=
false
;
var
hasAwaited
=
false
;
var
index
=
disposeCapability
.
length
-
1
;
while
(
index
>
=
0
)
{
var
resource
=
disposeCapability
[
index
-
-
]
;
var
value
=
resource
.
value
;
var
hint
=
resource
.
hint
;
assert
(
hint
=
=
=
USING_HINT_ASYNC
"
expected
async
-
dispose
hint
for
AsyncDisposableStack
"
)
;
var
method
=
resource
.
method
;
if
(
method
!
=
=
undefined
)
{
var
result
;
try
{
result
=
callContentFunction
(
method
value
)
;
await
result
;
hasAwaited
=
true
;
}
catch
(
e
)
{
if
(
hadError
)
{
latestException
=
CreateSuppressedError
(
e
latestException
)
;
}
else
{
latestException
=
e
;
hadError
=
true
;
}
}
}
else
{
needsAwait
=
true
;
}
}
if
(
needsAwait
&
&
!
hasAwaited
)
{
await
undefined
;
}
if
(
hadError
)
{
throw
latestException
;
}
}
async
function
AsyncDisposableStackDisposeAsync
(
)
{
var
asyncDisposableStack
=
this
;
if
(
!
IsObject
(
asyncDisposableStack
)
|
|
(
asyncDisposableStack
=
GuardToAsyncDisposableStackHelper
(
asyncDisposableStack
)
)
=
=
=
null
)
{
return
callFunction
(
CallAsyncDisposableStackMethodIfWrapped
this
"
AsyncDisposableStackDisposeAsync
"
)
;
}
var
state
=
UnsafeGetReservedSlot
(
asyncDisposableStack
DISPOSABLE_STACK_STATE_SLOT
)
;
if
(
state
=
=
=
undefined
)
{
ThrowTypeError
(
JSMSG_INCOMPATIBLE_METHOD
'
disposeAsync
'
'
method
'
'
AsyncDisposableStack
'
)
;
}
if
(
state
=
=
=
DISPOSABLE_STACK_STATE_DISPOSED
)
{
return
undefined
;
}
UnsafeSetReservedSlot
(
asyncDisposableStack
DISPOSABLE_STACK_STATE_SLOT
DISPOSABLE_STACK_STATE_DISPOSED
)
;
var
disposeCapability
=
UnsafeGetReservedSlot
(
asyncDisposableStack
DISPOSABLE_STACK_DISPOSABLE_RESOURCE_STACK_SLOT
)
;
UnsafeSetReservedSlot
(
asyncDisposableStack
DISPOSABLE_STACK_DISPOSABLE_RESOURCE_STACK_SLOT
undefined
)
;
if
(
disposeCapability
=
=
=
undefined
)
{
return
undefined
;
}
await
DisposeResources
(
disposeCapability
)
;
return
undefined
;
}
SetCanonicalName
(
AsyncDisposableStackDisposeAsync
'
disposeAsync
'
)
;
