var
numberFormatCache
=
new
Record
(
)
;
function
Number_toLocaleString
(
)
{
var
x
=
callFunction
(
std_Number_valueOf
this
)
;
var
locales
=
arguments
.
length
>
0
?
arguments
[
0
]
:
undefined
;
var
options
=
arguments
.
length
>
1
?
arguments
[
1
]
:
undefined
;
var
numberFormat
;
if
(
locales
=
=
=
undefined
&
&
options
=
=
=
undefined
)
{
if
(
!
IsRuntimeDefaultLocale
(
numberFormatCache
.
runtimeDefaultLocale
)
)
{
numberFormatCache
.
numberFormat
=
intl_NumberFormat
(
locales
options
)
;
numberFormatCache
.
runtimeDefaultLocale
=
RuntimeDefaultLocale
(
)
;
}
numberFormat
=
numberFormatCache
.
numberFormat
;
}
else
{
numberFormat
=
intl_NumberFormat
(
locales
options
)
;
}
return
intl_FormatNumber
(
numberFormat
x
false
)
;
}
function
Number_isFinite
(
num
)
{
if
(
typeof
num
!
=
=
"
number
"
)
return
false
;
return
num
-
num
=
=
=
0
;
}
function
Number_isNaN
(
num
)
{
if
(
typeof
num
!
=
=
"
number
"
)
return
false
;
return
num
!
=
=
num
;
}
function
Number_isInteger
(
number
)
{
if
(
typeof
number
!
=
=
"
number
"
)
return
false
;
if
(
number
=
=
=
-
(
2
*
*
31
)
)
return
true
;
var
absNumber
=
std_Math_abs
(
number
)
;
var
integer
=
std_Math_floor
(
absNumber
)
;
if
(
absNumber
-
integer
!
=
=
0
)
return
false
;
return
true
;
}
function
Number_isSafeInteger
(
number
)
{
if
(
typeof
number
!
=
=
"
number
"
)
return
false
;
if
(
number
=
=
=
-
(
2
*
*
31
)
)
return
true
;
var
absNumber
=
std_Math_abs
(
number
)
;
var
integer
=
std_Math_floor
(
absNumber
)
;
if
(
absNumber
-
integer
!
=
=
0
)
return
false
;
if
(
integer
<
=
(
2
*
*
53
)
-
1
)
return
true
;
return
false
;
}
function
Global_isNaN
(
number
)
{
return
Number_isNaN
(
ToNumber
(
number
)
)
;
}
function
Global_isFinite
(
number
)
{
return
Number_isFinite
(
ToNumber
(
number
)
)
;
}
