#
include
"
builtin
/
DisposableStackObjectBase
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
DisposableRecord
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
bool
js
:
:
AdoptClosure
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
{
JS
:
:
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
JS
:
:
Rooted
<
JSFunction
*
>
callee
(
cx
&
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
cx
callee
-
>
getExtendedSlot
(
AdoptClosureSlot_ValueSlot
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
onDispose
(
cx
callee
-
>
getExtendedSlot
(
AdoptClosureSlot_OnDisposeSlot
)
)
;
return
Call
(
cx
onDispose
JS
:
:
UndefinedHandleValue
value
args
.
rval
(
)
)
;
}
bool
js
:
:
ThrowIfOnDisposeNotCallable
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
onDispose
)
{
if
(
IsCallable
(
onDispose
)
)
{
return
true
;
}
JS
:
:
UniqueChars
bytes
=
DecompileValueGenerator
(
cx
JSDVG_SEARCH_STACK
onDispose
nullptr
)
;
if
(
!
bytes
)
{
return
false
;
}
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_NOT_FUNCTION
bytes
.
get
(
)
)
;
return
false
;
}
bool
js
:
:
CreateDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
objVal
UsingHint
hint
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
method
(
cx
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
object
(
cx
)
;
if
(
objVal
.
isNullOrUndefined
(
)
)
{
object
.
setUndefined
(
)
;
method
.
setUndefined
(
)
;
}
else
{
if
(
!
objVal
.
isObject
(
)
)
{
return
ThrowCheckIsObject
(
cx
CheckIsObjectKind
:
:
Disposable
)
;
}
object
.
set
(
objVal
)
;
if
(
!
GetDisposeMethod
(
cx
object
hint
&
method
)
)
{
return
false
;
}
}
DisposableRecordObject
*
disposableRecord
=
DisposableRecordObject
:
:
create
(
cx
object
method
hint
)
;
if
(
!
disposableRecord
)
{
return
false
;
}
result
.
set
(
ObjectValue
(
*
disposableRecord
)
)
;
return
true
;
}
bool
js
:
:
CreateDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
obj
UsingHint
hint
JS
:
:
Handle
<
JS
:
:
Value
>
methodVal
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
method
(
cx
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
object
(
cx
)
;
if
(
!
IsCallable
(
methodVal
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DISPOSE_NOT_CALLABLE
)
;
return
false
;
}
object
.
set
(
obj
)
;
method
.
set
(
methodVal
)
;
DisposableRecordObject
*
disposableRecord
=
DisposableRecordObject
:
:
create
(
cx
object
method
hint
)
;
if
(
!
disposableRecord
)
{
return
false
;
}
result
.
set
(
ObjectValue
(
*
disposableRecord
)
)
;
return
true
;
}
bool
js
:
:
AddDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
ArrayObject
*
>
disposeCapability
JS
:
:
Handle
<
JS
:
:
Value
>
val
UsingHint
hint
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
resource
(
cx
)
;
if
(
val
.
isNullOrUndefined
(
)
&
&
hint
=
=
UsingHint
:
:
Sync
)
{
return
true
;
}
if
(
!
CreateDisposableResource
(
cx
val
hint
&
resource
)
)
{
return
false
;
}
return
NewbornArrayPush
(
cx
disposeCapability
resource
)
;
}
bool
js
:
:
AddDisposableResource
(
JSContext
*
cx
JS
:
:
Handle
<
ArrayObject
*
>
disposeCapability
JS
:
:
Handle
<
JS
:
:
Value
>
val
UsingHint
hint
JS
:
:
Handle
<
JS
:
:
Value
>
methodVal
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
resource
(
cx
)
;
MOZ_ASSERT
(
val
.
isUndefined
(
)
)
;
if
(
!
CreateDisposableResource
(
cx
val
hint
methodVal
&
resource
)
)
{
return
false
;
}
return
NewbornArrayPush
(
cx
disposeCapability
resource
)
;
}
bool
js
:
:
GetDisposeMethod
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
objVal
UsingHint
hint
JS
:
:
MutableHandle
<
JS
:
:
Value
>
disposeMethod
)
{
switch
(
hint
)
{
case
UsingHint
:
:
Async
:
{
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
idAsync
(
cx
PropertyKey
:
:
Symbol
(
cx
-
>
wellKnownSymbols
(
)
.
asyncDispose
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
&
objVal
.
toObject
(
)
)
;
if
(
!
GetProperty
(
cx
obj
obj
idAsync
disposeMethod
)
)
{
return
false
;
}
if
(
disposeMethod
.
isNullOrUndefined
(
)
)
{
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
idSync
(
cx
PropertyKey
:
:
Symbol
(
cx
-
>
wellKnownSymbols
(
)
.
dispose
)
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
syncDisposeMethod
(
cx
)
;
if
(
!
GetProperty
(
cx
obj
obj
idSync
&
syncDisposeMethod
)
)
{
return
false
;
}
if
(
!
syncDisposeMethod
.
isNullOrUndefined
(
)
)
{
if
(
!
IsCallable
(
syncDisposeMethod
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DISPOSE_NOT_CALLABLE
)
;
return
false
;
}
JS
:
:
Handle
<
PropertyName
*
>
funName
=
cx
-
>
names
(
)
.
empty_
;
JSFunction
*
asyncWrapper
=
NewNativeFunction
(
cx
SyncDisposalClosure
0
funName
gc
:
:
AllocKind
:
:
FUNCTION_EXTENDED
GenericObject
)
;
if
(
!
asyncWrapper
)
{
return
false
;
}
asyncWrapper
-
>
initExtendedSlot
(
uint8_t
(
SyncDisposalClosureSlots
:
:
Method
)
syncDisposeMethod
)
;
disposeMethod
.
set
(
JS
:
:
ObjectValue
(
*
asyncWrapper
)
)
;
}
}
break
;
}
case
UsingHint
:
:
Sync
:
{
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
id
(
cx
PropertyKey
:
:
Symbol
(
cx
-
>
wellKnownSymbols
(
)
.
dispose
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
&
objVal
.
toObject
(
)
)
;
if
(
!
GetProperty
(
cx
obj
obj
id
disposeMethod
)
)
{
return
false
;
}
break
;
}
default
:
MOZ_CRASH
(
"
Invalid
UsingHint
"
)
;
}
if
(
disposeMethod
.
isNullOrUndefined
(
)
|
|
!
IsCallable
(
disposeMethod
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DISPOSE_NOT_CALLABLE
)
;
return
false
;
}
return
true
;
}
ArrayObject
*
DisposableStackObjectBase
:
:
getOrCreateDisposeCapability
(
JSContext
*
cx
)
{
ArrayObject
*
disposablesList
=
nullptr
;
if
(
isDisposableResourceStackEmpty
(
)
)
{
disposablesList
=
NewDenseEmptyArray
(
cx
)
;
if
(
!
disposablesList
)
{
return
nullptr
;
}
setReservedSlot
(
DISPOSABLE_RESOURCE_STACK_SLOT
ObjectValue
(
*
disposablesList
)
)
;
}
else
{
disposablesList
=
nonEmptyDisposableResourceStack
(
)
;
}
return
disposablesList
;
}
bool
DisposableStackObjectBase
:
:
isDisposableResourceStackEmpty
(
)
const
{
return
getReservedSlot
(
DISPOSABLE_RESOURCE_STACK_SLOT
)
.
isUndefined
(
)
;
}
void
DisposableStackObjectBase
:
:
clearDisposableResourceStack
(
)
{
setReservedSlot
(
DISPOSABLE_RESOURCE_STACK_SLOT
JS
:
:
UndefinedValue
(
)
)
;
}
ArrayObject
*
DisposableStackObjectBase
:
:
nonEmptyDisposableResourceStack
(
)
const
{
MOZ_ASSERT
(
!
isDisposableResourceStackEmpty
(
)
)
;
return
&
getReservedSlot
(
DISPOSABLE_RESOURCE_STACK_SLOT
)
.
toObject
(
)
.
as
<
ArrayObject
>
(
)
;
}
DisposableStackObjectBase
:
:
DisposableState
DisposableStackObjectBase
:
:
state
(
)
const
{
return
DisposableState
(
uint8_t
(
getReservedSlot
(
STATE_SLOT
)
.
toInt32
(
)
)
)
;
}
void
DisposableStackObjectBase
:
:
setState
(
DisposableState
state
)
{
setReservedSlot
(
STATE_SLOT
JS
:
:
Int32Value
(
int32_t
(
state
)
)
)
;
}
