#
ifndef
builtin_temporal_PlainDate_h
#
define
builtin_temporal_PlainDate_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
struct
ClassSpec
;
class
PlainObject
;
}
namespace
js
:
:
temporal
{
class
PlainDateObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
ISO_YEAR_SLOT
=
0
;
static
constexpr
uint32_t
ISO_MONTH_SLOT
=
1
;
static
constexpr
uint32_t
ISO_DAY_SLOT
=
2
;
static
constexpr
uint32_t
CALENDAR_SLOT
=
3
;
static
constexpr
uint32_t
SLOT_COUNT
=
4
;
int32_t
isoYear
(
)
const
{
return
getFixedSlot
(
ISO_YEAR_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoMonth
(
)
const
{
return
getFixedSlot
(
ISO_MONTH_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoDay
(
)
const
{
return
getFixedSlot
(
ISO_DAY_SLOT
)
.
toInt32
(
)
;
}
CalendarValue
calendar
(
)
const
{
return
CalendarValue
(
getFixedSlot
(
CALENDAR_SLOT
)
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
class
MOZ_STACK_CLASS
PlainDateWithCalendar
final
{
PlainDate
date_
;
CalendarValue
calendar_
;
public
:
PlainDateWithCalendar
(
)
=
default
;
PlainDateWithCalendar
(
const
PlainDate
&
date
const
CalendarValue
&
calendar
)
:
date_
(
date
)
calendar_
(
calendar
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
}
const
auto
&
date
(
)
const
{
return
date_
;
}
const
auto
&
calendar
(
)
const
{
return
calendar_
;
}
operator
const
PlainDate
&
(
)
const
{
return
date
(
)
;
}
void
trace
(
JSTracer
*
trc
)
{
calendar_
.
trace
(
trc
)
;
}
const
auto
*
calendarDoNotUse
(
)
const
{
return
&
calendar_
;
}
}
;
inline
PlainDate
ToPlainDate
(
const
PlainDateObject
*
date
)
{
return
{
date
-
>
isoYear
(
)
date
-
>
isoMonth
(
)
date
-
>
isoDay
(
)
}
;
}
enum
class
TemporalOverflow
;
enum
class
TemporalUnit
;
class
DurationObject
;
class
ZonedDateTimeObject
;
#
ifdef
DEBUG
bool
IsValidISODate
(
const
PlainDate
&
date
)
;
bool
IsValidISODate
(
double
year
double
month
double
day
)
;
#
endif
bool
ThrowIfInvalidISODate
(
JSContext
*
cx
const
PlainDate
&
date
)
;
bool
ThrowIfInvalidISODate
(
JSContext
*
cx
double
year
double
month
double
day
)
;
bool
ToTemporalDate
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
PlainDate
*
result
)
;
bool
ToTemporalDate
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
JS
:
:
MutableHandle
<
PlainDateWithCalendar
>
result
)
;
PlainDateObject
*
CreateTemporalDate
(
JSContext
*
cx
const
PlainDate
&
date
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
bool
CreateTemporalDate
(
JSContext
*
cx
const
PlainDate
&
date
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
MutableHandle
<
PlainDateWithCalendar
>
result
)
;
bool
RegulateISODate
(
JSContext
*
cx
const
PlainDate
&
date
TemporalOverflow
overflow
PlainDate
*
result
)
;
struct
RegulatedISODate
final
{
double
year
=
0
;
int32_t
month
=
0
;
int32_t
day
=
0
;
}
;
bool
RegulateISODate
(
JSContext
*
cx
double
year
double
month
double
day
TemporalOverflow
overflow
RegulatedISODate
*
result
)
;
bool
AddISODate
(
JSContext
*
cx
const
PlainDate
&
date
const
DateDuration
&
duration
TemporalOverflow
overflow
PlainDate
*
result
)
;
Wrapped
<
PlainDateObject
*
>
AddDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
Duration
&
duration
JS
:
:
Handle
<
JSObject
*
>
options
)
;
Wrapped
<
PlainDateObject
*
>
AddDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
DateDuration
&
duration
)
;
bool
AddDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
const
PlainDate
&
date
const
DateDuration
&
duration
JS
:
:
Handle
<
JSObject
*
>
options
PlainDate
*
result
)
;
bool
AddDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
DateDuration
&
duration
PlainDate
*
result
)
;
DateDuration
DifferenceISODate
(
const
PlainDate
&
start
const
PlainDate
&
end
TemporalUnit
largestUnit
)
;
bool
DifferenceDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
TemporalUnit
largestUnit
JS
:
:
Handle
<
PlainObject
*
>
options
DateDuration
*
result
)
;
bool
DifferenceDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
TemporalUnit
largestUnit
DateDuration
*
result
)
;
bool
DifferenceDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
const
PlainDate
&
one
const
PlainDate
&
two
TemporalUnit
largestUnit
JS
:
:
Handle
<
PlainObject
*
>
options
DateDuration
*
result
)
;
bool
DifferenceDate
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
const
PlainDate
&
one
const
PlainDate
&
two
TemporalUnit
largestUnit
DateDuration
*
result
)
;
int32_t
CompareISODate
(
const
PlainDate
&
one
const
PlainDate
&
two
)
;
bool
BalanceISODate
(
JSContext
*
cx
int32_t
year
int32_t
month
int64_t
day
PlainDate
*
result
)
;
PlainDate
BalanceISODate
(
int32_t
year
int32_t
month
int32_t
day
)
;
PlainDate
BalanceISODateNew
(
int32_t
year
int32_t
month
int32_t
day
)
;
bool
IsBuiltinAccess
(
JSContext
*
cx
JS
:
:
Handle
<
PlainDateObject
*
>
date
std
:
:
initializer_list
<
CalendarField
>
fieldNames
)
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
PlainDateWithCalendar
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
const
auto
&
date
(
)
const
{
return
container
(
)
.
date
(
)
;
}
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
calendar
(
)
const
{
return
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
:
:
fromMarkedLocation
(
container
(
)
.
calendarDoNotUse
(
)
)
;
}
operator
const
temporal
:
:
PlainDate
&
(
)
const
{
return
date
(
)
;
}
}
;
}
#
endif
