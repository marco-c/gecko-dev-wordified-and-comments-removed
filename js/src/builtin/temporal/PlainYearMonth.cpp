#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
ToString
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsPlainYearMonth
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
PlainYearMonthObject
>
(
)
;
}
template
<
typename
T
>
static
bool
ISOYearMonthWithinLimits
(
T
year
int32_t
month
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
if
(
year
<
-
271821
|
|
year
>
275760
)
{
return
false
;
}
if
(
year
=
=
-
271821
&
&
month
<
4
)
{
return
false
;
}
if
(
year
=
=
275760
&
&
month
>
9
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ISOYearMonthWithinLimits
(
int32_t
year
int32_t
month
)
{
return
:
:
ISOYearMonthWithinLimits
(
year
month
)
;
}
static
PlainYearMonthObject
*
CreateTemporalYearMonth
(
JSContext
*
cx
const
CallArgs
&
args
double
isoYear
double
isoMonth
double
isoDay
Handle
<
CalendarValue
>
calendar
)
{
MOZ_ASSERT
(
IsInteger
(
isoYear
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoMonth
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoDay
)
)
;
if
(
!
ThrowIfInvalidISODate
(
cx
isoYear
isoMonth
isoDay
)
)
{
return
nullptr
;
}
if
(
!
:
:
ISOYearMonthWithinLimits
(
isoYear
int32_t
(
isoMonth
)
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_YEAR_MONTH_INVALID
)
;
return
nullptr
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_PlainYearMonth
&
proto
)
)
{
return
nullptr
;
}
auto
*
obj
=
NewObjectWithClassProto
<
PlainYearMonthObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
nullptr
;
}
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_YEAR_SLOT
Int32Value
(
int32_t
(
isoYear
)
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_MONTH_SLOT
Int32Value
(
int32_t
(
isoMonth
)
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
CALENDAR_SLOT
calendar
.
toSlotValue
(
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_DAY_SLOT
Int32Value
(
int32_t
(
isoDay
)
)
)
;
return
obj
;
}
PlainYearMonthObject
*
js
:
:
temporal
:
:
CreateTemporalYearMonth
(
JSContext
*
cx
const
PlainDate
&
date
Handle
<
CalendarValue
>
calendar
)
{
const
auto
&
[
isoYear
isoMonth
isoDay
]
=
date
;
if
(
!
ThrowIfInvalidISODate
(
cx
date
)
)
{
return
nullptr
;
}
if
(
!
:
:
ISOYearMonthWithinLimits
(
isoYear
isoMonth
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_YEAR_MONTH_INVALID
)
;
return
nullptr
;
}
auto
*
obj
=
NewBuiltinClassInstance
<
PlainYearMonthObject
>
(
cx
)
;
if
(
!
obj
)
{
return
nullptr
;
}
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_YEAR_SLOT
Int32Value
(
isoYear
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_MONTH_SLOT
Int32Value
(
isoMonth
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
CALENDAR_SLOT
calendar
.
toSlotValue
(
)
)
;
obj
-
>
setFixedSlot
(
PlainYearMonthObject
:
:
ISO_DAY_SLOT
Int32Value
(
isoDay
)
)
;
return
obj
;
}
static
auto
*
CreateTemporalYearMonth
(
JSContext
*
cx
Handle
<
PlainYearMonthWithCalendar
>
yearMonth
)
{
MOZ_ASSERT
(
ISOYearMonthWithinLimits
(
yearMonth
.
date
(
)
.
year
yearMonth
.
date
(
)
.
month
)
)
;
return
CreateTemporalYearMonth
(
cx
yearMonth
yearMonth
.
calendar
(
)
)
;
}
bool
js
:
:
temporal
:
:
CreateTemporalYearMonth
(
JSContext
*
cx
const
PlainDate
&
date
Handle
<
CalendarValue
>
calendar
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
{
const
auto
&
[
isoYear
isoMonth
isoDay
]
=
date
;
if
(
!
ThrowIfInvalidISODate
(
cx
date
)
)
{
return
false
;
}
if
(
!
:
:
ISOYearMonthWithinLimits
(
isoYear
isoMonth
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_YEAR_MONTH_INVALID
)
;
return
false
;
}
result
.
set
(
PlainYearMonthWithCalendar
{
date
calendar
}
)
;
return
true
;
}
static
bool
ToTemporalYearMonth
(
JSContext
*
cx
Handle
<
JSObject
*
>
item
TemporalOverflow
overflow
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
{
if
(
auto
*
plainYearMonth
=
item
-
>
maybeUnwrapIf
<
PlainYearMonthObject
>
(
)
)
{
auto
date
=
ToPlainDate
(
plainYearMonth
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
plainYearMonth
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
result
.
set
(
PlainYearMonthWithCalendar
{
date
calendar
}
)
;
return
true
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
GetTemporalCalendarWithISODefault
(
cx
item
&
calendar
)
)
{
return
false
;
}
Rooted
<
CalendarRecord
>
calendarRec
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendar
&
calendarRec
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareCalendarFields
(
cx
calendarRec
item
{
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
)
)
;
if
(
!
fields
)
{
return
false
;
}
return
CalendarYearMonthFromFields
(
cx
calendar
fields
overflow
result
)
;
}
static
bool
ToTemporalYearMonth
(
JSContext
*
cx
Handle
<
Value
>
item
TemporalOverflow
overflow
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
{
if
(
item
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
itemObj
(
cx
&
item
.
toObject
(
)
)
;
return
ToTemporalYearMonth
(
cx
itemObj
overflow
result
)
;
}
if
(
!
item
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
item
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
string
(
cx
item
.
toString
(
)
)
;
PlainDate
date
;
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalYearMonthString
(
cx
string
&
date
&
calendarString
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
if
(
calendarString
)
{
if
(
!
ToBuiltinCalendar
(
cx
calendarString
&
calendar
)
)
{
return
false
;
}
}
Rooted
<
PlainYearMonthObject
*
>
obj
(
cx
CreateTemporalYearMonth
(
cx
date
calendar
)
)
;
if
(
!
obj
)
{
return
false
;
}
return
CalendarYearMonthFromFields
(
cx
calendar
obj
TemporalOverflow
:
:
Constrain
result
)
;
}
static
bool
ToTemporalYearMonth
(
JSContext
*
cx
Handle
<
Value
>
item
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
{
return
ToTemporalYearMonth
(
cx
item
TemporalOverflow
:
:
Constrain
result
)
;
}
static
bool
DifferenceTemporalPlainYearMonth
(
JSContext
*
cx
TemporalDifference
operation
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
Rooted
<
PlainYearMonthWithCalendar
>
other
(
cx
)
;
if
(
!
ToTemporalYearMonth
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainYearMonthObject
*
>
>
otherYearMonth
(
cx
)
;
if
(
args
.
get
(
0
)
.
isObject
(
)
&
&
args
[
0
]
.
toObject
(
)
.
canUnwrapAs
<
PlainYearMonthObject
>
(
)
)
{
otherYearMonth
=
&
args
[
0
]
.
toObject
(
)
;
}
else
{
auto
*
obj
=
CreateTemporalYearMonth
(
cx
other
)
;
if
(
!
obj
)
{
return
false
;
}
otherYearMonth
=
obj
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
if
(
!
CalendarEquals
(
calendar
other
.
calendar
(
)
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INCOMPATIBLE
ToTemporalCalendarIdentifier
(
calendar
)
.
data
(
)
ToTemporalCalendarIdentifier
(
other
.
calendar
(
)
)
.
data
(
)
)
;
return
false
;
}
DifferenceSettings
settings
;
Rooted
<
PlainObject
*
>
resolvedOptions
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
ToName
(
operation
)
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetDifferenceSettings
(
cx
operation
options
TemporalUnitGroup
:
:
Date
TemporalUnit
:
:
Month
TemporalUnit
:
:
Month
TemporalUnit
:
:
Year
&
settings
)
)
{
return
false
;
}
}
else
{
settings
=
{
TemporalUnit
:
:
Month
TemporalUnit
:
:
Year
TemporalRoundingMode
:
:
Trunc
Increment
{
1
}
}
;
}
if
(
ToPlainDate
(
yearMonth
)
=
=
other
.
date
(
)
)
{
auto
*
obj
=
CreateTemporalDuration
(
cx
{
}
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
Rooted
<
CalendarRecord
>
calendarRec
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendar
&
calendarRec
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
thisFields
(
cx
)
;
JS
:
:
RootedVector
<
PropertyKey
>
thisFieldNames
(
cx
)
;
if
(
!
PrepareCalendarFieldsAndFieldNames
(
cx
calendarRec
yearMonth
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
thisFields
&
thisFieldNames
)
)
{
return
false
;
}
Value
one
=
Int32Value
(
1
)
;
auto
handleOne
=
Handle
<
Value
>
:
:
fromMarkedLocation
(
&
one
)
;
if
(
!
DefineDataProperty
(
cx
thisFields
cx
-
>
names
(
)
.
day
handleOne
)
)
{
return
false
;
}
Rooted
<
PlainDateWithCalendar
>
thisDate
(
cx
)
;
if
(
!
CalendarDateFromFields
(
cx
calendar
thisFields
TemporalOverflow
:
:
Constrain
&
thisDate
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
otherFields
(
cx
PrepareTemporalFields
(
cx
otherYearMonth
thisFieldNames
)
)
;
if
(
!
otherFields
)
{
return
false
;
}
if
(
!
DefineDataProperty
(
cx
otherFields
cx
-
>
names
(
)
.
day
handleOne
)
)
{
return
false
;
}
Rooted
<
PlainDateWithCalendar
>
otherDate
(
cx
)
;
if
(
!
CalendarDateFromFields
(
cx
calendar
otherFields
TemporalOverflow
:
:
Constrain
&
otherDate
)
)
{
return
false
;
}
DateDuration
until
;
if
(
!
CalendarDateUntil
(
cx
calendar
thisDate
otherDate
settings
.
largestUnit
&
until
)
)
{
return
false
;
}
auto
dateDuration
=
DateDuration
{
until
.
years
until
.
months
}
;
if
(
settings
.
smallestUnit
!
=
TemporalUnit
:
:
Month
|
|
settings
.
roundingIncrement
!
=
Increment
{
1
}
)
{
auto
duration
=
NormalizedDuration
{
dateDuration
{
}
}
;
auto
otherDateTime
=
PlainDateTime
{
otherDate
{
}
}
;
auto
destEpochNs
=
GetUTCEpochNanoseconds
(
otherDateTime
)
;
auto
dateTime
=
PlainDateTime
{
thisDate
{
}
}
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
TimeZoneValue
{
}
)
;
RoundedRelativeDuration
relative
;
if
(
!
RoundRelativeDuration
(
cx
duration
destEpochNs
dateTime
calendar
timeZone
settings
.
largestUnit
settings
.
roundingIncrement
settings
.
smallestUnit
settings
.
roundingMode
&
relative
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
relative
.
duration
)
)
;
dateDuration
=
relative
.
duration
.
toDateDuration
(
)
;
}
auto
duration
=
Duration
{
double
(
dateDuration
.
years
)
double
(
dateDuration
.
months
)
}
;
if
(
operation
=
=
TemporalDifference
:
:
Since
)
{
duration
=
duration
.
negate
(
)
;
}
auto
*
obj
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
enum
class
PlainYearMonthDuration
{
Add
Subtract
}
;
static
bool
AddDurationToOrSubtractDurationFromPlainYearMonth
(
JSContext
*
cx
PlainYearMonthDuration
operation
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
Duration
duration
;
if
(
!
ToTemporalDurationRecord
(
cx
args
.
get
(
0
)
&
duration
)
)
{
return
false
;
}
if
(
operation
=
=
PlainYearMonthDuration
:
:
Subtract
)
{
duration
=
duration
.
negate
(
)
;
}
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
if
(
args
.
hasDefined
(
1
)
)
{
const
char
*
name
=
operation
=
=
PlainYearMonthDuration
:
:
Add
?
"
add
"
:
"
subtract
"
;
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
name
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetTemporalOverflowOption
(
cx
options
&
overflow
)
)
{
return
false
;
}
}
auto
timeDuration
=
NormalizeTimeDuration
(
duration
)
;
auto
balancedTime
=
BalanceTimeDuration
(
timeDuration
TemporalUnit
:
:
Day
)
;
auto
durationToAdd
=
DateDuration
{
int64_t
(
duration
.
years
)
int64_t
(
duration
.
months
)
int64_t
(
duration
.
weeks
)
int64_t
(
duration
.
days
)
+
balancedTime
.
days
}
;
int32_t
sign
=
DurationSign
(
durationToAdd
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
Rooted
<
CalendarRecord
>
calendarRec
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendar
&
calendarRec
)
)
{
return
false
;
}
;
Rooted
<
PlainObject
*
>
fields
(
cx
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
PrepareCalendarFieldsAndFieldNames
(
cx
calendarRec
yearMonth
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fields
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fieldsCopy
(
cx
SnapshotOwnProperties
(
cx
fields
)
)
;
if
(
!
fieldsCopy
)
{
return
false
;
}
Value
one
=
Int32Value
(
1
)
;
auto
handleOne
=
Handle
<
Value
>
:
:
fromMarkedLocation
(
&
one
)
;
if
(
!
DefineDataProperty
(
cx
fields
cx
-
>
names
(
)
.
day
handleOne
)
)
{
return
false
;
}
Rooted
<
PlainDateWithCalendar
>
intermediateDate
(
cx
)
;
if
(
!
CalendarDateFromFields
(
cx
calendar
fields
TemporalOverflow
:
:
Constrain
&
intermediateDate
)
)
{
return
false
;
}
Rooted
<
PlainDateWithCalendar
>
date
(
cx
)
;
if
(
sign
<
0
)
{
auto
oneMonthDuration
=
DateDuration
{
0
1
}
;
PlainDate
nextMonth
;
if
(
!
CalendarDateAdd
(
cx
calendar
intermediateDate
oneMonthDuration
TemporalOverflow
:
:
Constrain
&
nextMonth
)
)
{
return
false
;
}
auto
endOfMonthISO
=
BalanceISODate
(
nextMonth
.
year
nextMonth
.
month
nextMonth
.
day
-
1
)
;
Rooted
<
PlainDateWithCalendar
>
endOfMonth
(
cx
)
;
if
(
!
CreateTemporalDate
(
cx
endOfMonthISO
calendar
&
endOfMonth
)
)
{
return
false
;
}
Rooted
<
Value
>
day
(
cx
)
;
if
(
!
CalendarDay
(
cx
calendar
endOfMonth
.
date
(
)
&
day
)
)
{
return
false
;
}
if
(
!
DefineDataProperty
(
cx
fieldsCopy
cx
-
>
names
(
)
.
day
day
)
)
{
return
false
;
}
if
(
!
CalendarDateFromFields
(
cx
calendar
fieldsCopy
TemporalOverflow
:
:
Constrain
&
date
)
)
{
return
false
;
}
}
else
{
date
=
intermediateDate
;
}
PlainDate
addedDate
;
if
(
!
AddDate
(
cx
calendar
date
durationToAdd
overflow
&
addedDate
)
)
{
return
false
;
}
Rooted
<
PlainDateObject
*
>
addedDateObj
(
cx
CreateTemporalDate
(
cx
addedDate
calendar
)
)
;
if
(
!
addedDateObj
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
addedDateFields
(
cx
PrepareTemporalFields
(
cx
addedDateObj
fieldNames
)
)
;
if
(
!
addedDateFields
)
{
return
false
;
}
Rooted
<
PlainYearMonthWithCalendar
>
result
(
cx
)
;
if
(
!
CalendarYearMonthFromFields
(
cx
calendar
addedDateFields
overflow
&
result
)
)
{
return
false
;
}
auto
*
obj
=
CreateTemporalYearMonth
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainYearMonthConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
PlainYearMonth
"
)
)
{
return
false
;
}
double
isoYear
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
0
)
"
year
"
&
isoYear
)
)
{
return
false
;
}
double
isoMonth
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
1
)
"
month
"
&
isoMonth
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
ToTemporalCalendarWithISODefault
(
cx
args
.
get
(
2
)
&
calendar
)
)
{
return
false
;
}
double
isoDay
=
1
;
if
(
args
.
hasDefined
(
3
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
3
]
"
day
"
&
isoDay
)
)
{
return
false
;
}
}
auto
*
yearMonth
=
CreateTemporalYearMonth
(
cx
args
isoYear
isoMonth
isoDay
calendar
)
;
if
(
!
yearMonth
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
yearMonth
)
;
return
true
;
}
static
bool
PlainYearMonth_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
from
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetTemporalOverflowOption
(
cx
options
&
overflow
)
)
{
return
false
;
}
}
Rooted
<
PlainYearMonthWithCalendar
>
yearMonth
(
cx
)
;
if
(
!
ToTemporalYearMonth
(
cx
args
.
get
(
0
)
overflow
&
yearMonth
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalYearMonth
(
cx
yearMonth
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainYearMonth_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
PlainYearMonthWithCalendar
>
one
(
cx
)
;
if
(
!
ToTemporalYearMonth
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
Rooted
<
PlainYearMonthWithCalendar
>
two
(
cx
)
;
if
(
!
ToTemporalYearMonth
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
CompareISODate
(
one
two
)
)
;
return
true
;
}
static
bool
PlainYearMonth_calendarId
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
auto
*
calendarId
=
ToTemporalCalendarIdentifier
(
cx
calendar
)
;
if
(
!
calendarId
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
calendarId
)
;
return
true
;
}
static
bool
PlainYearMonth_calendarId
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_calendarId
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_era
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarEra
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_era
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_era
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_eraYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarEraYear
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_eraYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_eraYear
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_year
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarYear
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_year
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_month
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarMonth
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_month
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_monthCode
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarMonthCode
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_monthCode
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_daysInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarDaysInYear
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_daysInYear
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_daysInMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarDaysInMonth
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_daysInMonth
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_monthsInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarMonthsInYear
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_monthsInYear
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_inLeapYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
return
CalendarInLeapYear
(
cx
calendar
ToPlainDate
(
yearMonth
)
args
.
rval
(
)
)
;
}
static
bool
PlainYearMonth_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_inLeapYear
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
Rooted
<
JSObject
*
>
temporalYearMonthLike
(
cx
RequireObjectArg
(
cx
"
temporalYearMonthLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalYearMonthLike
)
{
return
false
;
}
if
(
!
ThrowIfTemporalLikeObject
(
cx
temporalYearMonthLike
)
)
{
return
false
;
}
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
with
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetTemporalOverflowOption
(
cx
options
&
overflow
)
)
{
return
false
;
}
}
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
Rooted
<
CalendarRecord
>
calendarRec
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendar
&
calendarRec
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
PrepareCalendarFieldsAndFieldNames
(
cx
calendarRec
yearMonth
{
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fields
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
partialYearMonth
(
cx
PreparePartialTemporalFields
(
cx
temporalYearMonthLike
fieldNames
)
)
;
if
(
!
partialYearMonth
)
{
return
false
;
}
Rooted
<
JSObject
*
>
mergedFields
(
cx
CalendarMergeFields
(
cx
calendarRec
fields
partialYearMonth
)
)
;
if
(
!
mergedFields
)
{
return
false
;
}
fields
=
PrepareTemporalFields
(
cx
mergedFields
fieldNames
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
PlainYearMonthWithCalendar
>
result
(
cx
)
;
if
(
!
CalendarYearMonthFromFields
(
cx
calendar
fields
overflow
&
result
)
)
{
return
false
;
}
auto
*
obj
=
CreateTemporalYearMonth
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainYearMonth_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_with
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_add
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromPlainYearMonth
(
cx
PlainYearMonthDuration
:
:
Add
args
)
;
}
static
bool
PlainYearMonth_add
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_add
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_subtract
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromPlainYearMonth
(
cx
PlainYearMonthDuration
:
:
Subtract
args
)
;
}
static
bool
PlainYearMonth_subtract
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_subtract
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_until
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalPlainYearMonth
(
cx
TemporalDifference
:
:
Until
args
)
;
}
static
bool
PlainYearMonth_until
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_until
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_since
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalPlainYearMonth
(
cx
TemporalDifference
:
:
Since
args
)
;
}
static
bool
PlainYearMonth_since
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_since
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_equals
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
yearMonth
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
;
auto
date
=
ToPlainDate
(
yearMonth
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
yearMonth
-
>
calendar
(
)
)
;
Rooted
<
PlainYearMonthWithCalendar
>
other
(
cx
)
;
if
(
!
ToTemporalYearMonth
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
bool
equals
=
date
=
=
other
.
date
(
)
&
&
CalendarEquals
(
calendar
other
.
calendar
(
)
)
;
args
.
rval
(
)
.
setBoolean
(
equals
)
;
return
true
;
}
static
bool
PlainYearMonth_equals
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_equals
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
auto
showCalendar
=
ShowCalendar
:
:
Auto
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toString
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetTemporalShowCalendarNameOption
(
cx
options
&
showCalendar
)
)
{
return
false
;
}
}
JSString
*
str
=
TemporalYearMonthToString
(
cx
yearMonth
showCalendar
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainYearMonth_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_toString
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_toLocaleString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
JSString
*
str
=
TemporalYearMonthToString
(
cx
yearMonth
ShowCalendar
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainYearMonth_toLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_toLocaleString
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
JSString
*
str
=
TemporalYearMonthToString
(
cx
yearMonth
ShowCalendar
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainYearMonth_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_toJSON
>
(
cx
args
)
;
}
static
bool
PlainYearMonth_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
PlainYearMonth
"
"
primitive
type
"
)
;
return
false
;
}
static
bool
PlainYearMonth_toPlainDate
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainYearMonthObject
*
>
yearMonth
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainYearMonthObject
>
(
)
)
;
Rooted
<
JSObject
*
>
item
(
cx
RequireObjectArg
(
cx
"
item
"
"
toPlainDate
"
args
.
get
(
0
)
)
)
;
if
(
!
item
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendarValue
(
cx
yearMonth
-
>
calendar
(
)
)
;
Rooted
<
CalendarRecord
>
calendar
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendarValue
&
calendar
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
receiverFields
(
cx
)
;
JS
:
:
RootedVector
<
PropertyKey
>
receiverFieldNames
(
cx
)
;
if
(
!
PrepareCalendarFieldsAndFieldNames
(
cx
calendar
yearMonth
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
receiverFields
&
receiverFieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
inputFields
(
cx
)
;
JS
:
:
RootedVector
<
PropertyKey
>
inputFieldNames
(
cx
)
;
if
(
!
PrepareCalendarFieldsAndFieldNames
(
cx
calendar
item
{
CalendarField
:
:
Day
}
&
inputFields
&
inputFieldNames
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
mergedFields
(
cx
CalendarMergeFields
(
cx
calendar
receiverFields
inputFields
)
)
;
if
(
!
mergedFields
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
concatenatedFieldNames
(
cx
)
;
if
(
!
ConcatTemporalFieldNames
(
receiverFieldNames
inputFieldNames
concatenatedFieldNames
.
get
(
)
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
mergedFromConcatenatedFields
(
cx
PrepareTemporalFields
(
cx
mergedFields
concatenatedFieldNames
)
)
;
if
(
!
mergedFromConcatenatedFields
)
{
return
false
;
}
auto
obj
=
CalendarDateFromFields
(
cx
calendar
mergedFromConcatenatedFields
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainYearMonth_toPlainDate
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainYearMonth
PlainYearMonth_toPlainDate
>
(
cx
args
)
;
}
const
JSClass
PlainYearMonthObject
:
:
class_
=
{
"
Temporal
.
PlainYearMonth
"
JSCLASS_HAS_RESERVED_SLOTS
(
PlainYearMonthObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_PlainYearMonth
)
JS_NULL_CLASS_OPS
&
PlainYearMonthObject
:
:
classSpec_
}
;
const
JSClass
&
PlainYearMonthObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
PlainYearMonth_methods
[
]
=
{
JS_FN
(
"
from
"
PlainYearMonth_from
1
0
)
JS_FN
(
"
compare
"
PlainYearMonth_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
PlainYearMonth_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
PlainYearMonth_with
1
0
)
JS_FN
(
"
add
"
PlainYearMonth_add
1
0
)
JS_FN
(
"
subtract
"
PlainYearMonth_subtract
1
0
)
JS_FN
(
"
until
"
PlainYearMonth_until
1
0
)
JS_FN
(
"
since
"
PlainYearMonth_since
1
0
)
JS_FN
(
"
equals
"
PlainYearMonth_equals
1
0
)
JS_FN
(
"
toString
"
PlainYearMonth_toString
0
0
)
JS_FN
(
"
toLocaleString
"
PlainYearMonth_toLocaleString
0
0
)
JS_FN
(
"
toJSON
"
PlainYearMonth_toJSON
0
0
)
JS_FN
(
"
valueOf
"
PlainYearMonth_valueOf
0
0
)
JS_FN
(
"
toPlainDate
"
PlainYearMonth_toPlainDate
1
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
PlainYearMonth_prototype_properties
[
]
=
{
JS_PSG
(
"
calendarId
"
PlainYearMonth_calendarId
0
)
JS_PSG
(
"
era
"
PlainYearMonth_era
0
)
JS_PSG
(
"
eraYear
"
PlainYearMonth_eraYear
0
)
JS_PSG
(
"
year
"
PlainYearMonth_year
0
)
JS_PSG
(
"
month
"
PlainYearMonth_month
0
)
JS_PSG
(
"
monthCode
"
PlainYearMonth_monthCode
0
)
JS_PSG
(
"
daysInYear
"
PlainYearMonth_daysInYear
0
)
JS_PSG
(
"
daysInMonth
"
PlainYearMonth_daysInMonth
0
)
JS_PSG
(
"
monthsInYear
"
PlainYearMonth_monthsInYear
0
)
JS_PSG
(
"
inLeapYear
"
PlainYearMonth_inLeapYear
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
PlainYearMonth
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
PlainYearMonthObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
PlainYearMonthConstructor
2
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
PlainYearMonthObject
>
PlainYearMonth_methods
nullptr
PlainYearMonth_prototype_methods
PlainYearMonth_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
