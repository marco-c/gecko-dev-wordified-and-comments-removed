#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
algorithm
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stddef
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainMonthDay
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsPlainDateTime
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
PlainDateTimeObject
>
(
)
;
}
#
ifdef
DEBUG
bool
js
:
:
temporal
:
:
IsValidISODateTime
(
const
PlainDateTime
&
dateTime
)
{
return
IsValidISODate
(
dateTime
.
date
)
&
&
IsValidTime
(
dateTime
.
time
)
;
}
#
endif
static
bool
ThrowIfInvalidISODateTime
(
JSContext
*
cx
const
PlainDateTime
&
dateTime
)
{
return
ThrowIfInvalidISODate
(
cx
dateTime
.
date
)
&
&
ThrowIfInvalidTime
(
cx
dateTime
.
time
)
;
}
template
<
typename
T
>
static
bool
ISODateTimeWithinLimits
(
T
year
T
month
T
day
T
hour
T
minute
T
second
T
millisecond
T
microsecond
T
nanosecond
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
)
;
MOZ_ASSERT
(
IsInteger
(
day
)
)
;
MOZ_ASSERT
(
IsInteger
(
hour
)
)
;
MOZ_ASSERT
(
IsInteger
(
minute
)
)
;
MOZ_ASSERT
(
IsInteger
(
second
)
)
;
MOZ_ASSERT
(
IsInteger
(
millisecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
microsecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanosecond
)
)
;
MOZ_ASSERT
(
IsValidISODate
(
year
month
day
)
)
;
MOZ_ASSERT
(
IsValidTime
(
hour
minute
second
millisecond
microsecond
nanosecond
)
)
;
constexpr
int32_t
minYear
=
-
271821
;
constexpr
int32_t
maxYear
=
275760
;
if
(
minYear
<
year
&
&
year
<
maxYear
)
{
return
true
;
}
if
(
year
<
0
)
{
if
(
year
!
=
minYear
)
{
return
false
;
}
if
(
month
!
=
4
)
{
return
month
>
4
;
}
if
(
day
!
=
(
20
-
1
)
)
{
return
day
>
(
20
-
1
)
;
}
return
!
(
hour
=
=
0
&
&
minute
=
=
0
&
&
second
=
=
0
&
&
millisecond
=
=
0
&
&
microsecond
=
=
0
&
&
nanosecond
=
=
0
)
;
}
if
(
year
!
=
maxYear
)
{
return
false
;
}
if
(
month
!
=
9
)
{
return
month
<
9
;
}
if
(
day
>
13
)
{
return
false
;
}
return
true
;
}
template
<
typename
T
>
static
bool
ISODateTimeWithinLimits
(
T
year
T
month
T
day
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsValidISODate
(
year
month
day
)
)
;
constexpr
int32_t
minYear
=
-
271821
;
constexpr
int32_t
maxYear
=
275760
;
if
(
minYear
<
year
&
&
year
<
maxYear
)
{
return
true
;
}
if
(
year
<
0
)
{
if
(
year
!
=
minYear
)
{
return
false
;
}
if
(
month
!
=
4
)
{
return
month
>
4
;
}
if
(
day
<
(
20
-
1
)
)
{
return
false
;
}
return
true
;
}
if
(
year
!
=
maxYear
)
{
return
false
;
}
if
(
month
!
=
9
)
{
return
month
<
9
;
}
if
(
day
>
13
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ISODateTimeWithinLimits
(
double
year
double
month
double
day
)
{
return
:
:
ISODateTimeWithinLimits
(
year
month
day
)
;
}
bool
js
:
:
temporal
:
:
ISODateTimeWithinLimits
(
const
PlainDateTime
&
dateTime
)
{
auto
&
[
date
time
]
=
dateTime
;
return
:
:
ISODateTimeWithinLimits
(
date
.
year
date
.
month
date
.
day
time
.
hour
time
.
minute
time
.
second
time
.
millisecond
time
.
microsecond
time
.
nanosecond
)
;
}
bool
js
:
:
temporal
:
:
ISODateTimeWithinLimits
(
const
PlainDate
&
date
)
{
return
:
:
ISODateTimeWithinLimits
(
date
.
year
date
.
month
date
.
day
)
;
}
static
PlainDateTimeObject
*
CreateTemporalDateTime
(
JSContext
*
cx
const
CallArgs
&
args
double
isoYear
double
isoMonth
double
isoDay
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
Handle
<
JSObject
*
>
calendar
)
{
MOZ_ASSERT
(
IsInteger
(
isoYear
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoMonth
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoDay
)
)
;
MOZ_ASSERT
(
IsInteger
(
hour
)
)
;
MOZ_ASSERT
(
IsInteger
(
minute
)
)
;
MOZ_ASSERT
(
IsInteger
(
second
)
)
;
MOZ_ASSERT
(
IsInteger
(
millisecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
microsecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanosecond
)
)
;
if
(
!
ThrowIfInvalidISODate
(
cx
isoYear
isoMonth
isoDay
)
)
{
return
nullptr
;
}
if
(
!
ThrowIfInvalidTime
(
cx
hour
minute
second
millisecond
microsecond
nanosecond
)
)
{
return
nullptr
;
}
if
(
!
ISODateTimeWithinLimits
(
isoYear
isoMonth
isoDay
hour
minute
second
millisecond
microsecond
nanosecond
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_TIME_INVALID
)
;
return
nullptr
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_PlainDateTime
&
proto
)
)
{
return
nullptr
;
}
auto
*
dateTime
=
NewObjectWithClassProto
<
PlainDateTimeObject
>
(
cx
proto
)
;
if
(
!
dateTime
)
{
return
nullptr
;
}
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_YEAR_SLOT
Int32Value
(
isoYear
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MONTH_SLOT
Int32Value
(
isoMonth
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_DAY_SLOT
Int32Value
(
isoDay
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_HOUR_SLOT
Int32Value
(
hour
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MINUTE_SLOT
Int32Value
(
minute
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_SECOND_SLOT
Int32Value
(
second
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MILLISECOND_SLOT
Int32Value
(
millisecond
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MICROSECOND_SLOT
Int32Value
(
microsecond
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_NANOSECOND_SLOT
Int32Value
(
nanosecond
)
)
;
dateTime
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
CALENDAR_SLOT
ObjectValue
(
*
calendar
)
)
;
return
dateTime
;
}
PlainDateTimeObject
*
js
:
:
temporal
:
:
CreateTemporalDateTime
(
JSContext
*
cx
const
PlainDateTime
&
dateTime
Handle
<
JSObject
*
>
calendar
)
{
auto
&
[
date
time
]
=
dateTime
;
auto
&
[
isoYear
isoMonth
isoDay
]
=
date
;
auto
&
[
hour
minute
second
millisecond
microsecond
nanosecond
]
=
time
;
if
(
!
ThrowIfInvalidISODateTime
(
cx
dateTime
)
)
{
return
nullptr
;
}
if
(
!
ISODateTimeWithinLimits
(
dateTime
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_TIME_INVALID
)
;
return
nullptr
;
}
auto
*
object
=
NewBuiltinClassInstance
<
PlainDateTimeObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_YEAR_SLOT
Int32Value
(
isoYear
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MONTH_SLOT
Int32Value
(
isoMonth
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_DAY_SLOT
Int32Value
(
isoDay
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_HOUR_SLOT
Int32Value
(
hour
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MINUTE_SLOT
Int32Value
(
minute
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_SECOND_SLOT
Int32Value
(
second
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MILLISECOND_SLOT
Int32Value
(
millisecond
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_MICROSECOND_SLOT
Int32Value
(
microsecond
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
ISO_NANOSECOND_SLOT
Int32Value
(
nanosecond
)
)
;
object
-
>
setFixedSlot
(
PlainDateTimeObject
:
:
CALENDAR_SLOT
ObjectValue
(
*
calendar
)
)
;
return
object
;
}
bool
js
:
:
temporal
:
:
InterpretTemporalDateTimeFields
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
PlainObject
*
>
fields
Handle
<
JSObject
*
>
options
PlainDateTime
*
result
)
{
TimeRecord
timeResult
;
if
(
!
ToTemporalTimeRecord
(
cx
fields
&
timeResult
)
)
{
return
false
;
}
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
if
(
!
ToTemporalOverflow
(
cx
options
&
overflow
)
)
{
return
false
;
}
auto
temporalDate
=
js
:
:
temporal
:
:
CalendarDateFromFields
(
cx
calendar
fields
options
)
;
if
(
!
temporalDate
)
{
return
false
;
}
auto
date
=
ToPlainDate
(
&
temporalDate
.
unwrap
(
)
)
;
PlainTime
time
;
if
(
!
RegulateTime
(
cx
timeResult
overflow
&
time
)
)
{
return
false
;
}
*
result
=
{
date
time
}
;
return
true
;
}
bool
js
:
:
temporal
:
:
InterpretTemporalDateTimeFields
(
JSContext
*
cx
Handle
<
JSObject
*
>
calendar
Handle
<
PlainObject
*
>
fields
PlainDateTime
*
result
)
{
TimeRecord
timeResult
;
if
(
!
ToTemporalTimeRecord
(
cx
fields
&
timeResult
)
)
{
return
false
;
}
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
auto
temporalDate
=
CalendarDateFromFields
(
cx
calendar
fields
)
;
if
(
!
temporalDate
)
{
return
false
;
}
auto
date
=
ToPlainDate
(
&
temporalDate
.
unwrap
(
)
)
;
PlainTime
time
;
if
(
!
RegulateTime
(
cx
timeResult
overflow
&
time
)
)
{
return
false
;
}
*
result
=
{
date
time
}
;
return
true
;
}
static
Wrapped
<
PlainDateTimeObject
*
>
ToTemporalDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
Handle
<
JSObject
*
>
maybeOptions
)
{
Rooted
<
JSObject
*
>
calendar
(
cx
)
;
PlainDateTime
result
;
if
(
item
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
itemObj
(
cx
&
item
.
toObject
(
)
)
;
if
(
itemObj
-
>
canUnwrapAs
<
PlainDateTimeObject
>
(
)
)
{
return
itemObj
;
}
if
(
auto
*
zonedDateTime
=
itemObj
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
JSObject
*
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
timeZone
)
)
{
return
nullptr
;
}
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
calendar
)
)
{
return
nullptr
;
}
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
return
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
calendar
)
;
}
if
(
auto
*
date
=
itemObj
-
>
maybeUnwrapIf
<
PlainDateObject
>
(
)
)
{
PlainDateTime
dateTime
=
{
ToPlainDate
(
date
)
{
}
}
;
Rooted
<
JSObject
*
>
calendar
(
cx
date
-
>
calendar
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
calendar
)
)
{
return
nullptr
;
}
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
return
CreateTemporalDateTime
(
cx
dateTime
calendar
)
;
}
calendar
=
GetTemporalCalendarWithISODefault
(
cx
itemObj
)
;
if
(
!
calendar
)
{
return
nullptr
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Hour
CalendarField
:
:
Microsecond
CalendarField
:
:
Millisecond
CalendarField
:
:
Minute
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Nanosecond
CalendarField
:
:
Second
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
nullptr
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
itemObj
fieldNames
)
)
;
if
(
!
fields
)
{
return
nullptr
;
}
if
(
maybeOptions
)
{
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
maybeOptions
&
result
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
&
result
)
)
{
return
nullptr
;
}
}
}
else
{
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
item
)
)
;
if
(
!
string
)
{
return
nullptr
;
}
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalDateTimeString
(
cx
string
&
result
&
calendarString
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
IsValidISODate
(
result
.
date
)
)
;
MOZ_ASSERT
(
IsValidTime
(
result
.
time
)
)
;
Rooted
<
Value
>
calendarValue
(
cx
)
;
if
(
calendarString
)
{
calendarValue
.
setString
(
calendarString
)
;
}
calendar
=
ToTemporalCalendarWithISODefault
(
cx
calendarValue
)
;
if
(
!
calendar
)
{
return
nullptr
;
}
}
return
CreateTemporalDateTime
(
cx
result
calendar
)
;
}
Wrapped
<
PlainDateTimeObject
*
>
js
:
:
temporal
:
:
ToTemporalDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
return
:
:
ToTemporalDateTime
(
cx
item
nullptr
)
;
}
bool
js
:
:
temporal
:
:
ToTemporalDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
PlainDateTime
*
result
)
{
auto
obj
=
:
:
ToTemporalDateTime
(
cx
item
nullptr
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToPlainDateTime
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
static
bool
ToTemporalDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
PlainDateTime
*
result
MutableHandle
<
JSObject
*
>
calendar
)
{
auto
*
obj
=
:
:
ToTemporalDateTime
(
cx
item
nullptr
)
.
unwrapOrNull
(
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToPlainDateTime
(
obj
)
;
calendar
.
set
(
obj
-
>
calendar
(
)
)
;
return
cx
-
>
compartment
(
)
-
>
wrap
(
cx
calendar
)
;
}
static
int32_t
CompareISODateTime
(
const
PlainDateTime
&
one
const
PlainDateTime
&
two
)
{
if
(
int32_t
dateResult
=
CompareISODate
(
one
.
date
two
.
date
)
)
{
return
dateResult
;
}
return
CompareTemporalTime
(
one
.
time
two
.
time
)
;
}
static
bool
PlainDateTimeConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
PlainDateTime
"
)
)
{
return
false
;
}
double
isoYear
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
0
)
"
year
"
&
isoYear
)
)
{
return
false
;
}
double
isoMonth
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
1
)
"
month
"
&
isoMonth
)
)
{
return
false
;
}
double
isoDay
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
2
)
"
day
"
&
isoDay
)
)
{
return
false
;
}
double
hour
=
0
;
if
(
args
.
hasDefined
(
3
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
3
]
"
hour
"
&
hour
)
)
{
return
false
;
}
}
double
minute
=
0
;
if
(
args
.
hasDefined
(
4
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
4
]
"
minute
"
&
minute
)
)
{
return
false
;
}
}
double
second
=
0
;
if
(
args
.
hasDefined
(
5
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
5
]
"
second
"
&
second
)
)
{
return
false
;
}
}
double
millisecond
=
0
;
if
(
args
.
hasDefined
(
6
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
6
]
"
millisecond
"
&
millisecond
)
)
{
return
false
;
}
}
double
microsecond
=
0
;
if
(
args
.
hasDefined
(
7
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
7
]
"
microsecond
"
&
microsecond
)
)
{
return
false
;
}
}
double
nanosecond
=
0
;
if
(
args
.
hasDefined
(
8
)
)
{
if
(
!
ToIntegerWithTruncation
(
cx
args
[
8
]
"
nanosecond
"
&
nanosecond
)
)
{
return
false
;
}
}
Rooted
<
JSObject
*
>
calendar
(
cx
ToTemporalCalendarWithISODefault
(
cx
args
.
get
(
9
)
)
)
;
if
(
!
calendar
)
{
return
false
;
}
auto
*
temporalDateTime
=
CreateTemporalDateTime
(
cx
args
isoYear
isoMonth
isoDay
hour
minute
second
millisecond
microsecond
nanosecond
calendar
)
;
if
(
!
temporalDateTime
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
temporalDateTime
)
;
return
true
;
}
static
bool
PlainDateTime_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
from
"
args
[
1
]
)
;
if
(
!
options
)
{
return
false
;
}
}
if
(
args
.
get
(
0
)
.
isObject
(
)
)
{
JSObject
*
item
=
&
args
[
0
]
.
toObject
(
)
;
if
(
auto
*
temporalDateTime
=
item
-
>
maybeUnwrapIf
<
PlainDateTimeObject
>
(
)
)
{
auto
dateTime
=
ToPlainDateTime
(
temporalDateTime
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
temporalDateTime
-
>
calendar
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
calendar
)
)
{
return
false
;
}
if
(
options
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
options
&
ignored
)
)
{
return
false
;
}
}
auto
*
result
=
CreateTemporalDateTime
(
cx
dateTime
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
auto
result
=
ToTemporalDateTime
(
cx
args
.
get
(
0
)
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDateTime_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
PlainDateTime
one
;
if
(
!
ToTemporalDateTime
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
PlainDateTime
two
;
if
(
!
ToTemporalDateTime
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
CompareISODateTime
(
one
two
)
)
;
return
true
;
}
static
bool
PlainDateTime_calendar
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setObject
(
*
dateTime
-
>
calendar
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_calendar
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_calendar
>
(
cx
args
)
;
}
static
bool
PlainDateTime_year
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_year
>
(
cx
args
)
;
}
static
bool
PlainDateTime_month
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarMonth
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_month
>
(
cx
args
)
;
}
static
bool
PlainDateTime_monthCode
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarMonthCode
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_monthCode
>
(
cx
args
)
;
}
static
bool
PlainDateTime_day
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDay
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_day
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_day
>
(
cx
args
)
;
}
static
bool
PlainDateTime_hour
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoHour
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_hour
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_hour
>
(
cx
args
)
;
}
static
bool
PlainDateTime_minute
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoMinute
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_minute
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_minute
>
(
cx
args
)
;
}
static
bool
PlainDateTime_second
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoSecond
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_second
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_second
>
(
cx
args
)
;
}
static
bool
PlainDateTime_millisecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoMillisecond
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_millisecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_millisecond
>
(
cx
args
)
;
}
static
bool
PlainDateTime_microsecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoMicrosecond
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_microsecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_microsecond
>
(
cx
args
)
;
}
static
bool
PlainDateTime_nanosecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
args
.
rval
(
)
.
setInt32
(
dateTime
-
>
isoNanosecond
(
)
)
;
return
true
;
}
static
bool
PlainDateTime_nanosecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_nanosecond
>
(
cx
args
)
;
}
static
bool
PlainDateTime_dayOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDayOfWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_dayOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_dayOfWeek
>
(
cx
args
)
;
}
static
bool
PlainDateTime_dayOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDayOfYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_dayOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_dayOfYear
>
(
cx
args
)
;
}
static
bool
PlainDateTime_weekOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarWeekOfYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_weekOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_weekOfYear
>
(
cx
args
)
;
}
static
bool
PlainDateTime_yearOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarYearOfWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_yearOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_yearOfWeek
>
(
cx
args
)
;
}
static
bool
PlainDateTime_daysInWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDaysInWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_daysInWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_daysInWeek
>
(
cx
args
)
;
}
static
bool
PlainDateTime_daysInMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDaysInMonth
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_daysInMonth
>
(
cx
args
)
;
}
static
bool
PlainDateTime_daysInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarDaysInYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_daysInYear
>
(
cx
args
)
;
}
static
bool
PlainDateTime_monthsInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarMonthsInYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_monthsInYear
>
(
cx
args
)
;
}
static
bool
PlainDateTime_inLeapYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
return
CalendarInLeapYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDateTime_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_inLeapYear
>
(
cx
args
)
;
}
static
bool
PlainDateTime_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateTimeObject
*
>
dateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
)
;
Rooted
<
JSObject
*
>
temporalDateTimeLike
(
cx
RequireObjectArg
(
cx
"
temporalDateTimeLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDateTimeLike
)
{
return
false
;
}
if
(
!
RejectObjectWithCalendarOrTimeZone
(
cx
temporalDateTimeLike
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
with
"
args
[
1
]
)
;
}
else
{
options
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
options
)
{
return
false
;
}
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Hour
CalendarField
:
:
Microsecond
CalendarField
:
:
Millisecond
CalendarField
:
:
Minute
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Nanosecond
CalendarField
:
:
Second
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
dateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
partialDateTime
(
cx
PreparePartialTemporalFields
(
cx
temporalDateTimeLike
fieldNames
)
)
;
if
(
!
partialDateTime
)
{
return
false
;
}
Rooted
<
JSObject
*
>
mergedFields
(
cx
CalendarMergeFields
(
cx
calendar
fields
partialDateTime
)
)
;
if
(
!
mergedFields
)
{
return
false
;
}
fields
=
PrepareTemporalFields
(
cx
mergedFields
fieldNames
)
;
if
(
!
fields
)
{
return
false
;
}
PlainDateTime
result
;
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
options
&
result
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidISODateTime
(
result
)
)
;
auto
*
obj
=
CreateTemporalDateTime
(
cx
result
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_with
>
(
cx
args
)
;
}
static
bool
PlainDateTime_equals
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
auto
dateTime
=
ToPlainDateTime
(
temporalDateTime
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
temporalDateTime
-
>
calendar
(
)
)
;
PlainDateTime
other
;
Rooted
<
JSObject
*
>
otherCalendar
(
cx
)
;
if
(
!
:
:
ToTemporalDateTime
(
cx
args
.
get
(
0
)
&
other
&
otherCalendar
)
)
{
return
false
;
}
bool
equals
=
false
;
if
(
CompareISODateTime
(
dateTime
other
)
=
=
0
)
{
if
(
!
CalendarEquals
(
cx
calendar
otherCalendar
&
equals
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setBoolean
(
equals
)
;
return
true
;
}
static
bool
PlainDateTime_equals
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_equals
>
(
cx
args
)
;
}
static
bool
PlainDateTime_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
PlainDateTime
"
"
primitive
type
"
)
;
return
false
;
}
static
bool
PlainDateTime_getISOFields
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
auto
dateTime
=
ToPlainDateTime
(
temporalDateTime
)
;
JSObject
*
calendar
=
temporalDateTime
-
>
calendar
(
)
;
Rooted
<
IdValueVector
>
fields
(
cx
IdValueVector
(
cx
)
)
;
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
calendar
)
ObjectValue
(
*
calendar
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoDay
)
Int32Value
(
dateTime
.
date
.
day
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoHour
)
Int32Value
(
dateTime
.
time
.
hour
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMicrosecond
)
Int32Value
(
dateTime
.
time
.
microsecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMillisecond
)
Int32Value
(
dateTime
.
time
.
millisecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMinute
)
Int32Value
(
dateTime
.
time
.
minute
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMonth
)
Int32Value
(
dateTime
.
date
.
month
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoNanosecond
)
Int32Value
(
dateTime
.
time
.
nanosecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoSecond
)
Int32Value
(
dateTime
.
time
.
second
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoYear
)
Int32Value
(
dateTime
.
date
.
year
)
)
)
{
return
false
;
}
auto
*
obj
=
NewPlainObjectWithUniqueNames
(
cx
fields
.
begin
(
)
fields
.
length
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_getISOFields
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_getISOFields
>
(
cx
args
)
;
}
static
bool
PlainDateTime_toPlainDate
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
auto
*
obj
=
CreateTemporalDate
(
cx
ToPlainDate
(
dateTime
)
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_toPlainDate
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_toPlainDate
>
(
cx
args
)
;
}
static
bool
PlainDateTime_toPlainYearMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateTimeObject
*
>
dateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
dateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
obj
=
CalendarYearMonthFromFields
(
cx
calendar
fields
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_toPlainYearMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_toPlainYearMonth
>
(
cx
args
)
;
}
static
bool
PlainDateTime_toPlainMonthDay
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateTimeObject
*
>
dateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
)
;
Rooted
<
JSObject
*
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
MonthCode
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
dateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
obj
=
CalendarMonthDayFromFields
(
cx
calendar
fields
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_toPlainMonthDay
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_toPlainMonthDay
>
(
cx
args
)
;
}
static
bool
PlainDateTime_toPlainTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
dateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateTimeObject
>
(
)
;
auto
*
obj
=
CreateTemporalTime
(
cx
ToPlainTime
(
dateTime
)
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateTime_toPlainTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDateTime
PlainDateTime_toPlainTime
>
(
cx
args
)
;
}
const
JSClass
PlainDateTimeObject
:
:
class_
=
{
"
Temporal
.
PlainDateTime
"
JSCLASS_HAS_RESERVED_SLOTS
(
PlainDateTimeObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_PlainDateTime
)
JS_NULL_CLASS_OPS
&
PlainDateTimeObject
:
:
classSpec_
}
;
const
JSClass
&
PlainDateTimeObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
PlainDateTime_methods
[
]
=
{
JS_FN
(
"
from
"
PlainDateTime_from
1
0
)
JS_FN
(
"
compare
"
PlainDateTime_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
PlainDateTime_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
PlainDateTime_with
1
0
)
JS_FN
(
"
equals
"
PlainDateTime_equals
1
0
)
JS_FN
(
"
valueOf
"
PlainDateTime_valueOf
0
0
)
JS_FN
(
"
toPlainDate
"
PlainDateTime_toPlainDate
0
0
)
JS_FN
(
"
toPlainYearMonth
"
PlainDateTime_toPlainYearMonth
0
0
)
JS_FN
(
"
toPlainMonthDay
"
PlainDateTime_toPlainMonthDay
0
0
)
JS_FN
(
"
toPlainTime
"
PlainDateTime_toPlainTime
0
0
)
JS_FN
(
"
getISOFields
"
PlainDateTime_getISOFields
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
PlainDateTime_prototype_properties
[
]
=
{
JS_PSG
(
"
calendar
"
PlainDateTime_calendar
0
)
JS_PSG
(
"
year
"
PlainDateTime_year
0
)
JS_PSG
(
"
month
"
PlainDateTime_month
0
)
JS_PSG
(
"
monthCode
"
PlainDateTime_monthCode
0
)
JS_PSG
(
"
day
"
PlainDateTime_day
0
)
JS_PSG
(
"
hour
"
PlainDateTime_hour
0
)
JS_PSG
(
"
minute
"
PlainDateTime_minute
0
)
JS_PSG
(
"
second
"
PlainDateTime_second
0
)
JS_PSG
(
"
millisecond
"
PlainDateTime_millisecond
0
)
JS_PSG
(
"
microsecond
"
PlainDateTime_microsecond
0
)
JS_PSG
(
"
nanosecond
"
PlainDateTime_nanosecond
0
)
JS_PSG
(
"
dayOfWeek
"
PlainDateTime_dayOfWeek
0
)
JS_PSG
(
"
dayOfYear
"
PlainDateTime_dayOfYear
0
)
JS_PSG
(
"
weekOfYear
"
PlainDateTime_weekOfYear
0
)
JS_PSG
(
"
yearOfWeek
"
PlainDateTime_yearOfWeek
0
)
JS_PSG
(
"
daysInWeek
"
PlainDateTime_daysInWeek
0
)
JS_PSG
(
"
daysInMonth
"
PlainDateTime_daysInMonth
0
)
JS_PSG
(
"
daysInYear
"
PlainDateTime_daysInYear
0
)
JS_PSG
(
"
monthsInYear
"
PlainDateTime_monthsInYear
0
)
JS_PSG
(
"
inLeapYear
"
PlainDateTime_inLeapYear
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
PlainDateTime
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
PlainDateTimeObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
PlainDateTimeConstructor
3
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
PlainDateTimeObject
>
PlainDateTime_methods
nullptr
PlainDateTime_prototype_methods
PlainDateTime_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
