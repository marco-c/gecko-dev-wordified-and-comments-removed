#
ifndef
builtin_temporal_PlainTime_h
#
define
builtin_temporal_PlainTime_h
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
}
namespace
js
:
:
temporal
{
class
PlainTimeObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
PACKED_TIME_SLOT
=
0
;
static
constexpr
uint32_t
SLOT_COUNT
=
1
;
PlainTime
time
(
)
const
{
auto
packed
=
PackedTime
{
mozilla
:
:
BitwiseCast
<
uint64_t
>
(
getFixedSlot
(
PACKED_TIME_SLOT
)
.
toDouble
(
)
)
}
;
return
PackedTime
:
:
unpack
(
packed
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
class
Increment
;
enum
class
TemporalOverflow
;
enum
class
TemporalRoundingMode
;
enum
class
TemporalUnit
;
#
ifdef
DEBUG
bool
IsValidTime
(
const
PlainTime
&
time
)
;
bool
IsValidTime
(
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
;
#
endif
bool
ThrowIfInvalidTime
(
JSContext
*
cx
const
PlainTime
&
time
)
;
bool
ThrowIfInvalidTime
(
JSContext
*
cx
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
;
PlainTimeObject
*
CreateTemporalTime
(
JSContext
*
cx
const
PlainTime
&
time
)
;
bool
ToTemporalTime
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
PlainTime
*
result
)
;
struct
TimeRecord
final
{
int64_t
days
=
0
;
PlainTime
time
;
}
;
TimeRecord
AddTime
(
const
PlainTime
&
time
const
NormalizedTimeDuration
&
duration
)
;
NormalizedTimeDuration
DifferenceTime
(
const
PlainTime
&
time1
const
PlainTime
&
time2
)
;
struct
TemporalTimeLike
final
{
double
hour
=
0
;
double
minute
=
0
;
double
second
=
0
;
double
millisecond
=
0
;
double
microsecond
=
0
;
double
nanosecond
=
0
;
}
;
bool
RegulateTime
(
JSContext
*
cx
const
TemporalTimeLike
&
time
TemporalOverflow
overflow
PlainTime
*
result
)
;
int32_t
CompareTimeRecord
(
const
PlainTime
&
one
const
PlainTime
&
two
)
;
TimeRecord
BalanceTime
(
const
PlainTime
&
time
int64_t
nanoseconds
)
;
TimeRecord
RoundTime
(
const
PlainTime
&
time
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
)
;
}
#
endif
