#
ifndef
builtin_temporal_PlainTime_h
#
define
builtin_temporal_PlainTime_h
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
}
namespace
js
:
:
temporal
{
class
PlainTimeObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
ISO_HOUR_SLOT
=
0
;
static
constexpr
uint32_t
ISO_MINUTE_SLOT
=
1
;
static
constexpr
uint32_t
ISO_SECOND_SLOT
=
2
;
static
constexpr
uint32_t
ISO_MILLISECOND_SLOT
=
3
;
static
constexpr
uint32_t
ISO_MICROSECOND_SLOT
=
4
;
static
constexpr
uint32_t
ISO_NANOSECOND_SLOT
=
5
;
static
constexpr
uint32_t
CALENDAR_SLOT
=
6
;
static
constexpr
uint32_t
SLOT_COUNT
=
7
;
int32_t
isoHour
(
)
const
{
return
getFixedSlot
(
ISO_HOUR_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoMinute
(
)
const
{
return
getFixedSlot
(
ISO_MINUTE_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoSecond
(
)
const
{
return
getFixedSlot
(
ISO_SECOND_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoMillisecond
(
)
const
{
return
getFixedSlot
(
ISO_MILLISECOND_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoMicrosecond
(
)
const
{
return
getFixedSlot
(
ISO_MICROSECOND_SLOT
)
.
toInt32
(
)
;
}
int32_t
isoNanosecond
(
)
const
{
return
getFixedSlot
(
ISO_NANOSECOND_SLOT
)
.
toInt32
(
)
;
}
JSObject
*
getCalendar
(
)
const
{
return
getFixedSlot
(
CALENDAR_SLOT
)
.
toObjectOrNull
(
)
;
}
void
setCalendar
(
JSObject
*
calendar
)
{
setFixedSlot
(
CALENDAR_SLOT
JS
:
:
ObjectValue
(
*
calendar
)
)
;
}
static
JSObject
*
getOrCreateCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
PlainTimeObject
*
>
obj
)
{
if
(
auto
*
calendar
=
obj
-
>
getCalendar
(
)
)
{
return
calendar
;
}
return
createCalendar
(
cx
obj
)
;
}
private
:
static
JSObject
*
createCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
PlainTimeObject
*
>
obj
)
;
static
const
ClassSpec
classSpec_
;
}
;
inline
PlainTime
ToPlainTime
(
const
PlainTimeObject
*
time
)
{
return
{
time
-
>
isoHour
(
)
time
-
>
isoMinute
(
)
time
-
>
isoSecond
(
)
time
-
>
isoMillisecond
(
)
time
-
>
isoMicrosecond
(
)
time
-
>
isoNanosecond
(
)
}
;
}
enum
class
TemporalOverflow
;
#
ifdef
DEBUG
bool
IsValidTime
(
const
PlainTime
&
time
)
;
bool
IsValidTime
(
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
;
#
endif
bool
ThrowIfInvalidTime
(
JSContext
*
cx
const
PlainTime
&
time
)
;
bool
ThrowIfInvalidTime
(
JSContext
*
cx
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
;
PlainTimeObject
*
CreateTemporalTime
(
JSContext
*
cx
const
PlainTime
&
time
)
;
bool
ToTemporalTime
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
PlainTime
*
result
)
;
struct
TimeRecord
final
{
double
hour
=
0
;
double
minute
=
0
;
double
second
=
0
;
double
millisecond
=
0
;
double
microsecond
=
0
;
double
nanosecond
=
0
;
}
;
bool
ToTemporalTimeRecord
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
temporalTimeLike
TimeRecord
*
result
)
;
bool
RegulateTime
(
JSContext
*
cx
const
TimeRecord
&
time
TemporalOverflow
overflow
PlainTime
*
result
)
;
int32_t
CompareTemporalTime
(
const
PlainTime
&
one
const
PlainTime
&
two
)
;
struct
BalancedTime
final
{
int32_t
days
=
0
;
PlainTime
time
;
}
;
BalancedTime
BalanceTime
(
const
PlainTime
&
time
int64_t
nanoseconds
)
;
}
#
endif
