#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
cstdlib
>
#
include
<
utility
>
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainMonthDay
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
ToString
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ComparisonOperators
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsZonedDateTime
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
ZonedDateTimeObject
>
(
)
;
}
static
int64_t
RoundNanosecondsToMinutesIncrement
(
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
constexpr
int64_t
increment
=
ToNanoseconds
(
TemporalUnit
:
:
Minute
)
;
int64_t
quotient
=
offsetNanoseconds
/
increment
;
int64_t
remainder
=
offsetNanoseconds
%
increment
;
if
(
std
:
:
abs
(
remainder
*
2
)
>
=
increment
)
{
quotient
+
=
(
offsetNanoseconds
>
0
?
1
:
-
1
)
;
}
return
quotient
*
increment
;
}
bool
js
:
:
temporal
:
:
InterpretISODateTimeOffset
(
JSContext
*
cx
const
PlainDateTime
&
dateTime
OffsetBehaviour
offsetBehaviour
int64_t
offsetNanoseconds
Handle
<
TimeZoneValue
>
timeZone
TemporalDisambiguation
disambiguation
TemporalOffset
offsetOption
MatchBehaviour
matchBehaviour
Instant
*
result
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
MOZ_ASSERT
(
IsValidISODate
(
dateTime
.
date
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
Rooted
<
PlainDateTimeWithCalendar
>
temporalDateTime
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
dateTime
calendar
&
temporalDateTime
)
)
{
return
false
;
}
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Wall
|
|
offsetOption
=
=
TemporalOffset
:
:
Ignore
)
{
return
GetInstantFor
(
cx
timeZone
temporalDateTime
disambiguation
result
)
;
}
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Exact
|
|
offsetOption
=
=
TemporalOffset
:
:
Use
)
{
auto
epochNanoseconds
=
GetUTCEpochNanoseconds
(
dateTime
InstantSpan
:
:
fromNanoseconds
(
offsetNanoseconds
)
)
;
if
(
!
IsValidEpochInstant
(
epochNanoseconds
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
*
result
=
epochNanoseconds
;
return
true
;
}
MOZ_ASSERT
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
;
MOZ_ASSERT
(
offsetOption
=
=
TemporalOffset
:
:
Prefer
|
|
offsetOption
=
=
TemporalOffset
:
:
Reject
)
;
Rooted
<
InstantVector
>
possibleInstants
(
cx
InstantVector
(
cx
)
)
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
temporalDateTime
&
possibleInstants
)
)
{
return
false
;
}
if
(
!
possibleInstants
.
empty
(
)
)
{
Rooted
<
Value
>
getOffsetNanosecondsFor
(
cx
)
;
if
(
timeZone
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
timeZoneObj
(
cx
timeZone
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
timeZoneObj
cx
-
>
names
(
)
.
getOffsetNanosecondsFor
&
getOffsetNanosecondsFor
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
InstantObject
*
>
>
candidate
(
cx
)
;
for
(
size_t
i
=
0
;
i
<
possibleInstants
.
length
(
)
;
i
+
+
)
{
candidate
=
possibleInstants
[
i
]
;
int64_t
candidateNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
candidate
getOffsetNanosecondsFor
&
candidateNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
candidateNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
if
(
candidateNanoseconds
=
=
offsetNanoseconds
)
{
auto
*
unwrapped
=
candidate
.
unwrap
(
cx
)
;
if
(
!
unwrapped
)
{
return
false
;
}
*
result
=
ToInstant
(
unwrapped
)
;
return
true
;
}
if
(
matchBehaviour
=
=
MatchBehaviour
:
:
MatchMinutes
)
{
int64_t
roundedCandidateNanoseconds
=
RoundNanosecondsToMinutesIncrement
(
candidateNanoseconds
)
;
if
(
roundedCandidateNanoseconds
=
=
offsetNanoseconds
)
{
auto
*
unwrapped
=
candidate
.
unwrap
(
cx
)
;
if
(
!
unwrapped
)
{
return
false
;
}
*
result
=
ToInstant
(
unwrapped
)
;
return
true
;
}
}
}
}
if
(
offsetOption
=
=
TemporalOffset
:
:
Reject
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_ZONED_DATE_TIME_NO_TIME_FOUND
)
;
return
false
;
}
Rooted
<
Wrapped
<
InstantObject
*
>
>
instant
(
cx
)
;
if
(
!
DisambiguatePossibleInstants
(
cx
possibleInstants
timeZone
temporalDateTime
disambiguation
&
instant
)
)
{
return
false
;
}
auto
*
unwrappedInstant
=
instant
.
unwrap
(
cx
)
;
if
(
!
unwrappedInstant
)
{
return
false
;
}
*
result
=
ToInstant
(
unwrappedInstant
)
;
return
true
;
}
static
bool
ToTemporalZonedDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
Handle
<
JSObject
*
>
maybeOptions
MutableHandle
<
ZonedDateTime
>
result
)
{
Rooted
<
PlainObject
*
>
maybeResolvedOptions
(
cx
)
;
if
(
maybeOptions
)
{
maybeResolvedOptions
=
SnapshotOwnProperties
(
cx
maybeOptions
)
;
if
(
!
maybeResolvedOptions
)
{
return
false
;
}
}
auto
offsetBehaviour
=
OffsetBehaviour
:
:
Option
;
auto
matchBehaviour
=
MatchBehaviour
:
:
MatchExactly
;
int64_t
offsetNanoseconds
=
0
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
PlainDateTime
dateTime
;
auto
disambiguation
=
TemporalDisambiguation
:
:
Compatible
;
auto
offsetOption
=
TemporalOffset
:
:
Reject
;
if
(
item
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
itemObj
(
cx
&
item
.
toObject
(
)
)
;
if
(
auto
*
zonedDateTime
=
itemObj
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
result
.
set
(
ZonedDateTime
{
instant
timeZone
calendar
}
)
;
return
true
;
}
if
(
!
GetTemporalCalendarWithISODefault
(
cx
itemObj
&
calendar
)
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
if
(
!
AppendSorted
(
cx
fieldNames
.
get
(
)
{
TemporalField
:
:
Hour
TemporalField
:
:
Microsecond
TemporalField
:
:
Millisecond
TemporalField
:
:
Minute
TemporalField
:
:
Nanosecond
TemporalField
:
:
Offset
TemporalField
:
:
Second
TemporalField
:
:
TimeZone
}
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
itemObj
fieldNames
{
TemporalField
:
:
TimeZone
}
)
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
Value
>
timeZoneValue
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
timeZone
&
timeZoneValue
)
)
{
return
false
;
}
if
(
!
ToTemporalTimeZone
(
cx
timeZoneValue
&
timeZone
)
)
{
return
false
;
}
Rooted
<
Value
>
offsetValue
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
offset
&
offsetValue
)
)
{
return
false
;
}
MOZ_ASSERT
(
offsetValue
.
isString
(
)
|
|
offsetValue
.
isUndefined
(
)
)
;
Rooted
<
JSString
*
>
offsetString
(
cx
)
;
if
(
offsetValue
.
isString
(
)
)
{
offsetString
=
offsetValue
.
toString
(
)
;
}
else
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
if
(
maybeResolvedOptions
)
{
if
(
!
ToTemporalDisambiguation
(
cx
maybeResolvedOptions
&
disambiguation
)
)
{
return
false
;
}
if
(
!
ToTemporalOffset
(
cx
maybeResolvedOptions
&
offsetOption
)
)
{
return
false
;
}
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
maybeResolvedOptions
&
dateTime
)
)
{
return
false
;
}
}
else
{
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
&
dateTime
)
)
{
return
false
;
}
}
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
if
(
!
ParseDateTimeUTCOffset
(
cx
offsetString
&
offsetNanoseconds
)
)
{
return
false
;
}
}
}
else
{
if
(
!
item
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
item
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
string
(
cx
item
.
toString
(
)
)
;
bool
isUTC
;
bool
hasOffset
;
int64_t
timeZoneOffset
;
Rooted
<
ParsedTimeZone
>
timeZoneString
(
cx
)
;
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalZonedDateTimeString
(
cx
string
&
dateTime
&
isUTC
&
hasOffset
&
timeZoneOffset
&
timeZoneString
&
calendarString
)
)
{
return
false
;
}
MOZ_ASSERT
(
timeZoneString
)
;
if
(
!
ToTemporalTimeZone
(
cx
timeZoneString
&
timeZone
)
)
{
return
false
;
}
if
(
isUTC
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Exact
;
}
else
if
(
!
hasOffset
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
if
(
calendarString
)
{
if
(
!
ToBuiltinCalendar
(
cx
calendarString
&
calendar
)
)
{
return
false
;
}
}
else
{
calendar
.
set
(
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
}
matchBehaviour
=
MatchBehaviour
:
:
MatchMinutes
;
if
(
maybeResolvedOptions
)
{
if
(
!
ToTemporalDisambiguation
(
cx
maybeResolvedOptions
&
disambiguation
)
)
{
return
false
;
}
if
(
!
ToTemporalOffset
(
cx
maybeResolvedOptions
&
offsetOption
)
)
{
return
false
;
}
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeResolvedOptions
&
ignored
)
)
{
return
false
;
}
}
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
MOZ_ASSERT
(
hasOffset
)
;
offsetNanoseconds
=
timeZoneOffset
;
}
}
Instant
epochNanoseconds
;
if
(
!
InterpretISODateTimeOffset
(
cx
dateTime
offsetBehaviour
offsetNanoseconds
timeZone
disambiguation
offsetOption
matchBehaviour
&
epochNanoseconds
)
)
{
return
false
;
}
result
.
set
(
ZonedDateTime
{
epochNanoseconds
timeZone
calendar
}
)
;
return
true
;
}
static
bool
ToTemporalZonedDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
MutableHandle
<
ZonedDateTime
>
result
)
{
return
ToTemporalZonedDateTime
(
cx
item
nullptr
result
)
;
}
static
ZonedDateTimeObject
*
ToTemporalZonedDateTime
(
JSContext
*
cx
Handle
<
Value
>
item
Handle
<
JSObject
*
>
maybeOptions
)
{
Rooted
<
ZonedDateTime
>
result
(
cx
)
;
if
(
!
ToTemporalZonedDateTime
(
cx
item
maybeOptions
&
result
)
)
{
return
nullptr
;
}
return
CreateTemporalZonedDateTime
(
cx
result
.
instant
(
)
result
.
timeZone
(
)
result
.
calendar
(
)
)
;
}
static
ZonedDateTimeObject
*
CreateTemporalZonedDateTime
(
JSContext
*
cx
const
CallArgs
&
args
Handle
<
BigInt
*
>
epochNanoseconds
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
)
{
MOZ_ASSERT
(
IsValidEpochNanoseconds
(
epochNanoseconds
)
)
;
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_ZonedDateTime
&
proto
)
)
{
return
nullptr
;
}
auto
*
obj
=
NewObjectWithClassProto
<
ZonedDateTimeObject
>
(
cx
proto
)
;
if
(
!
obj
)
{
return
nullptr
;
}
auto
instant
=
ToInstant
(
epochNanoseconds
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
SECONDS_SLOT
NumberValue
(
instant
.
seconds
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
NANOSECONDS_SLOT
Int32Value
(
instant
.
nanoseconds
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
TIMEZONE_SLOT
timeZone
.
toSlotValue
(
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
CALENDAR_SLOT
calendar
.
toValue
(
)
)
;
return
obj
;
}
ZonedDateTimeObject
*
js
:
:
temporal
:
:
CreateTemporalZonedDateTime
(
JSContext
*
cx
const
Instant
&
instant
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
auto
*
obj
=
NewBuiltinClassInstance
<
ZonedDateTimeObject
>
(
cx
)
;
if
(
!
obj
)
{
return
nullptr
;
}
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
SECONDS_SLOT
NumberValue
(
instant
.
seconds
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
NANOSECONDS_SLOT
Int32Value
(
instant
.
nanoseconds
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
TIMEZONE_SLOT
timeZone
.
toSlotValue
(
)
)
;
obj
-
>
setFixedSlot
(
ZonedDateTimeObject
:
:
CALENDAR_SLOT
calendar
.
toValue
(
)
)
;
return
obj
;
}
struct
PlainDateTimeAndInstant
{
PlainDateTime
dateTime
;
Instant
instant
;
}
;
static
bool
AddDaysToZonedDateTime
(
JSContext
*
cx
const
Instant
&
instant
const
PlainDateTime
&
dateTime
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
double
days
TemporalOverflow
overflow
PlainDateTimeAndInstant
*
result
)
{
if
(
days
=
=
0
)
{
*
result
=
{
dateTime
instant
}
;
return
true
;
}
PlainDate
addedDate
;
if
(
!
AddISODate
(
cx
dateTime
.
date
{
0
0
0
days
}
overflow
&
addedDate
)
)
{
return
false
;
}
Rooted
<
PlainDateTimeWithCalendar
>
dateTimeResult
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
addedDate
dateTime
.
time
}
calendar
&
dateTimeResult
)
)
{
return
false
;
}
Instant
instantResult
;
if
(
!
GetInstantFor
(
cx
timeZone
dateTimeResult
TemporalDisambiguation
:
:
Compatible
&
instantResult
)
)
{
return
false
;
}
*
result
=
{
ToPlainDateTime
(
dateTimeResult
)
instantResult
}
;
return
true
;
}
bool
js
:
:
temporal
:
:
AddDaysToZonedDateTime
(
JSContext
*
cx
const
Instant
&
instant
const
PlainDateTime
&
dateTime
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
double
days
TemporalOverflow
overflow
Instant
*
result
)
{
PlainDateTimeAndInstant
dateTimeAndInstant
;
if
(
!
:
:
AddDaysToZonedDateTime
(
cx
instant
dateTime
timeZone
calendar
days
overflow
&
dateTimeAndInstant
)
)
{
return
false
;
}
*
result
=
dateTimeAndInstant
.
instant
;
return
true
;
}
bool
js
:
:
temporal
:
:
AddDaysToZonedDateTime
(
JSContext
*
cx
const
Instant
&
instant
const
PlainDateTime
&
dateTime
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
double
days
Instant
*
result
)
{
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
return
AddDaysToZonedDateTime
(
cx
instant
dateTime
timeZone
calendar
days
overflow
result
)
;
}
static
bool
AddZonedDateTime
(
JSContext
*
cx
const
Instant
&
epochNanoseconds
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
const
Duration
&
duration
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
dateTime
Handle
<
JSObject
*
>
maybeOptions
Instant
*
result
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
epochNanoseconds
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
.
date
(
)
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
.
time
(
)
)
)
;
if
(
duration
.
years
=
=
0
&
&
duration
.
months
=
=
0
&
&
duration
.
weeks
=
=
0
&
&
duration
.
days
=
=
0
)
{
return
AddInstant
(
cx
epochNanoseconds
duration
result
)
;
}
PlainDateTime
temporalDateTime
;
if
(
dateTime
)
{
temporalDateTime
=
*
dateTime
;
}
else
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochNanoseconds
&
temporalDateTime
)
)
{
return
false
;
}
}
auto
&
[
date
time
]
=
temporalDateTime
;
if
(
duration
.
years
=
=
0
&
&
duration
.
months
=
=
0
&
&
duration
.
weeks
=
=
0
)
{
auto
overflow
=
TemporalOverflow
:
:
Constrain
;
if
(
maybeOptions
)
{
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
overflow
)
)
{
return
false
;
}
}
Instant
intermediate
;
if
(
!
AddDaysToZonedDateTime
(
cx
epochNanoseconds
temporalDateTime
timeZone
calendar
duration
.
days
overflow
&
intermediate
)
)
{
return
false
;
}
return
AddInstant
(
cx
intermediate
duration
.
time
(
)
result
)
;
}
const
auto
&
datePart
=
date
;
auto
dateDuration
=
duration
.
date
(
)
;
PlainDate
addedDate
;
if
(
maybeOptions
)
{
if
(
!
CalendarDateAdd
(
cx
calendar
datePart
dateDuration
maybeOptions
&
addedDate
)
)
{
return
false
;
}
}
else
{
if
(
!
CalendarDateAdd
(
cx
calendar
datePart
dateDuration
&
addedDate
)
)
{
return
false
;
}
}
Rooted
<
PlainDateTimeWithCalendar
>
intermediateDateTime
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
addedDate
time
}
calendar
&
intermediateDateTime
)
)
{
return
false
;
}
Instant
intermediateInstant
;
if
(
!
GetInstantFor
(
cx
timeZone
intermediateDateTime
TemporalDisambiguation
:
:
Compatible
&
intermediateInstant
)
)
{
return
false
;
}
return
AddInstant
(
cx
intermediateInstant
duration
.
time
(
)
result
)
;
}
static
bool
AddZonedDateTime
(
JSContext
*
cx
const
Instant
&
epochNanoseconds
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
const
Duration
&
duration
Handle
<
JSObject
*
>
maybeOptions
Instant
*
result
)
{
return
:
:
AddZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
duration
mozilla
:
:
Nothing
(
)
maybeOptions
result
)
;
}
bool
js
:
:
temporal
:
:
AddZonedDateTime
(
JSContext
*
cx
const
Instant
&
epochInstant
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
const
Duration
&
duration
Instant
*
result
)
{
return
:
:
AddZonedDateTime
(
cx
epochInstant
timeZone
calendar
duration
mozilla
:
:
Nothing
(
)
nullptr
result
)
;
}
bool
js
:
:
temporal
:
:
AddZonedDateTime
(
JSContext
*
cx
const
Instant
&
epochNanoseconds
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
const
Duration
&
duration
const
PlainDateTime
&
dateTime
Instant
*
result
)
{
return
:
:
AddZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
duration
mozilla
:
:
SomeRef
(
dateTime
)
nullptr
result
)
;
}
double
js
:
:
temporal
:
:
NanosecondsAndDays
:
:
daysNumber
(
)
const
{
if
(
days
)
{
return
BigInt
:
:
numberValue
(
days
)
;
}
return
double
(
daysInt
)
;
}
void
js
:
:
temporal
:
:
NanosecondsAndDays
:
:
trace
(
JSTracer
*
trc
)
{
if
(
days
)
{
TraceRoot
(
trc
&
days
"
NanosecondsAndDays
:
:
days
"
)
;
}
}
static
bool
NanosecondsToDays
(
JSContext
*
cx
const
InstantSpan
&
nanoseconds
Handle
<
ZonedDateTime
>
zonedRelativeTo
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
MutableHandle
<
NanosecondsAndDays
>
result
)
{
MOZ_ASSERT
(
IsValidInstantSpan
(
nanoseconds
)
)
;
if
(
nanoseconds
=
=
InstantSpan
{
}
)
{
result
.
set
(
NanosecondsAndDays
:
:
from
(
int64_t
(
0
)
InstantSpan
{
}
InstantSpan
:
:
fromNanoseconds
(
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
)
)
;
return
true
;
}
int32_t
sign
=
nanoseconds
<
InstantSpan
{
}
?
-
1
:
1
;
auto
startNs
=
zonedRelativeTo
.
instant
(
)
;
auto
timeZone
=
zonedRelativeTo
.
timeZone
(
)
;
auto
calendar
=
zonedRelativeTo
.
calendar
(
)
;
auto
endNs
=
startNs
+
nanoseconds
;
if
(
!
IsValidEpochInstant
(
endNs
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
PlainDateTime
startDateTime
;
if
(
!
precalculatedPlainDateTime
)
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startNs
&
startDateTime
)
)
{
return
false
;
}
}
else
{
startDateTime
=
*
precalculatedPlainDateTime
;
}
PlainDateTime
endDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
endNs
&
endDateTime
)
)
{
return
false
;
}
int64_t
days
=
DaysUntil
(
startDateTime
.
date
endDateTime
.
date
)
;
int32_t
timeSign
=
CompareTemporalTime
(
startDateTime
.
time
endDateTime
.
time
)
;
if
(
days
>
0
&
&
timeSign
>
0
)
{
days
-
=
1
;
}
else
if
(
days
<
0
&
&
timeSign
<
0
)
{
days
+
=
1
;
}
PlainDateTimeAndInstant
relativeResult
;
if
(
!
:
:
AddDaysToZonedDateTime
(
cx
startNs
startDateTime
timeZone
calendar
days
TemporalOverflow
:
:
Constrain
&
relativeResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidISODateTime
(
relativeResult
.
dateTime
)
)
;
MOZ_ASSERT
(
IsValidEpochInstant
(
relativeResult
.
instant
)
)
;
if
(
sign
>
0
)
{
while
(
days
>
0
&
&
relativeResult
.
instant
>
endNs
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
days
-
=
1
;
if
(
!
:
:
AddDaysToZonedDateTime
(
cx
startNs
startDateTime
timeZone
calendar
days
TemporalOverflow
:
:
Constrain
&
relativeResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidISODateTime
(
relativeResult
.
dateTime
)
)
;
MOZ_ASSERT
(
IsValidEpochInstant
(
relativeResult
.
instant
)
)
;
}
MOZ_ASSERT_IF
(
days
>
0
relativeResult
.
instant
<
=
endNs
)
;
}
MOZ_ASSERT_IF
(
days
=
=
0
relativeResult
.
instant
=
=
startNs
)
;
auto
ns
=
endNs
-
relativeResult
.
instant
;
MOZ_ASSERT
(
IsValidInstantSpan
(
ns
)
)
;
InstantSpan
dayLengthNs
{
}
;
while
(
true
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
PlainDateTimeAndInstant
oneDayFarther
;
if
(
!
:
:
AddDaysToZonedDateTime
(
cx
relativeResult
.
instant
relativeResult
.
dateTime
timeZone
calendar
sign
TemporalOverflow
:
:
Constrain
&
oneDayFarther
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidISODateTime
(
oneDayFarther
.
dateTime
)
)
;
MOZ_ASSERT
(
IsValidEpochInstant
(
oneDayFarther
.
instant
)
)
;
dayLengthNs
=
oneDayFarther
.
instant
-
relativeResult
.
instant
;
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLengthNs
)
)
;
auto
diff
=
ns
-
dayLengthNs
;
MOZ_ASSERT
(
IsValidInstantSpan
(
diff
)
)
;
MOZ_ASSERT
(
diff
=
=
(
endNs
-
oneDayFarther
.
instant
)
)
;
if
(
diff
=
=
InstantSpan
{
}
|
|
(
(
diff
<
InstantSpan
{
}
)
=
=
(
sign
<
0
)
)
)
{
ns
=
diff
;
relativeResult
=
oneDayFarther
;
days
+
=
sign
;
}
else
{
break
;
}
}
if
(
days
<
0
&
&
sign
>
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_ZONED_DATE_TIME_INCORRECT_SIGN
"
days
"
)
;
return
false
;
}
if
(
days
>
0
&
&
sign
<
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_ZONED_DATE_TIME_INCORRECT_SIGN
"
days
"
)
;
return
false
;
}
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLengthNs
)
)
;
MOZ_ASSERT
(
IsValidInstantSpan
(
ns
)
)
;
if
(
sign
<
0
)
{
if
(
ns
>
InstantSpan
{
}
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_ZONED_DATE_TIME_INCORRECT_SIGN
"
nanoseconds
"
)
;
return
false
;
}
}
else
{
MOZ_ASSERT
(
ns
>
=
InstantSpan
{
}
)
;
}
MOZ_ASSERT
(
ns
.
abs
(
)
<
dayLengthNs
.
abs
(
)
)
;
result
.
set
(
NanosecondsAndDays
:
:
from
(
days
ns
dayLengthNs
.
abs
(
)
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
NanosecondsToDays
(
JSContext
*
cx
const
InstantSpan
&
nanoseconds
Handle
<
ZonedDateTime
>
zonedRelativeTo
MutableHandle
<
NanosecondsAndDays
>
result
)
{
return
:
:
NanosecondsToDays
(
cx
nanoseconds
zonedRelativeTo
mozilla
:
:
Nothing
(
)
result
)
;
}
bool
js
:
:
temporal
:
:
NanosecondsToDays
(
JSContext
*
cx
const
InstantSpan
&
nanoseconds
Handle
<
ZonedDateTime
>
zonedRelativeTo
const
PlainDateTime
&
precalculatedPlainDateTime
MutableHandle
<
NanosecondsAndDays
>
result
)
{
return
:
:
NanosecondsToDays
(
cx
nanoseconds
zonedRelativeTo
mozilla
:
:
SomeRef
(
precalculatedPlainDateTime
)
result
)
;
}
static
bool
DifferenceZonedDateTime
(
JSContext
*
cx
const
Instant
&
ns1
const
Instant
&
ns2
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
TemporalUnit
largestUnit
Handle
<
PlainObject
*
>
maybeOptions
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
ns1
)
)
;
MOZ_ASSERT
(
IsValidEpochInstant
(
ns2
)
)
;
if
(
ns1
=
=
ns2
)
{
*
result
=
{
}
;
return
true
;
}
PlainDateTime
startDateTime
;
if
(
!
precalculatedPlainDateTime
)
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
ns1
&
startDateTime
)
)
{
return
false
;
}
}
else
{
startDateTime
=
*
precalculatedPlainDateTime
;
}
PlainDateTime
endDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
ns2
&
endDateTime
)
)
{
return
false
;
}
Duration
dateDifference
;
if
(
maybeOptions
)
{
if
(
!
DifferenceISODateTime
(
cx
startDateTime
endDateTime
calendar
largestUnit
maybeOptions
&
dateDifference
)
)
{
return
false
;
}
}
else
{
if
(
!
DifferenceISODateTime
(
cx
startDateTime
endDateTime
calendar
largestUnit
&
dateDifference
)
)
{
return
false
;
}
}
Instant
intermediateNs
;
if
(
!
AddZonedDateTime
(
cx
ns1
timeZone
calendar
{
dateDifference
.
years
dateDifference
.
months
dateDifference
.
weeks
}
startDateTime
&
intermediateNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
auto
timeRemainder
=
ns2
-
intermediateNs
;
MOZ_ASSERT
(
IsValidInstantSpan
(
timeRemainder
)
)
;
Rooted
<
ZonedDateTime
>
intermediate
(
cx
ZonedDateTime
{
intermediateNs
timeZone
calendar
}
)
;
Rooted
<
NanosecondsAndDays
>
nanosAndDays
(
cx
)
;
if
(
!
NanosecondsToDays
(
cx
timeRemainder
intermediate
&
nanosAndDays
)
)
{
return
false
;
}
TimeDuration
timeDifference
;
if
(
!
BalanceTimeDuration
(
cx
nanosAndDays
.
nanoseconds
(
)
TemporalUnit
:
:
Hour
&
timeDifference
)
)
{
return
false
;
}
*
result
=
{
dateDifference
.
years
dateDifference
.
months
dateDifference
.
weeks
nanosAndDays
.
daysNumber
(
)
timeDifference
.
hours
timeDifference
.
minutes
timeDifference
.
seconds
timeDifference
.
milliseconds
timeDifference
.
microseconds
timeDifference
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
*
result
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
DifferenceZonedDateTime
(
JSContext
*
cx
const
Instant
&
ns1
const
Instant
&
ns2
Handle
<
TimeZoneValue
>
timeZone
Handle
<
CalendarValue
>
calendar
TemporalUnit
largestUnit
const
PlainDateTime
&
precalculatedPlainDateTime
Duration
*
result
)
{
return
:
:
DifferenceZonedDateTime
(
cx
ns1
ns2
timeZone
calendar
largestUnit
nullptr
mozilla
:
:
SomeRef
(
precalculatedPlainDateTime
)
result
)
;
}
static
bool
TimeZoneEqualsOrThrow
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
one
Handle
<
TimeZoneValue
>
two
)
{
if
(
one
.
isObject
(
)
&
&
two
.
isObject
(
)
&
&
one
.
toObject
(
)
=
=
two
.
toObject
(
)
)
{
return
true
;
}
Rooted
<
JSString
*
>
timeZoneOne
(
cx
ToTemporalTimeZoneIdentifier
(
cx
one
)
)
;
if
(
!
timeZoneOne
)
{
return
false
;
}
Rooted
<
JSString
*
>
timeZoneTwo
(
cx
ToTemporalTimeZoneIdentifier
(
cx
two
)
)
;
if
(
!
timeZoneTwo
)
{
return
false
;
}
bool
equals
;
if
(
!
TimeZoneEquals
(
cx
timeZoneOne
timeZoneTwo
&
equals
)
)
{
return
false
;
}
if
(
equals
)
{
return
true
;
}
if
(
auto
charsOne
=
QuoteString
(
cx
timeZoneOne
)
)
{
if
(
auto
charsTwo
=
QuoteString
(
cx
timeZoneTwo
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INCOMPATIBLE
charsOne
.
get
(
)
charsTwo
.
get
(
)
)
;
}
}
return
false
;
}
static
bool
RoundISODateTime
(
JSContext
*
cx
const
PlainDateTime
&
dateTime
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
const
InstantSpan
&
dayLength
PlainDateTime
*
result
)
{
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLength
)
)
;
MOZ_ASSERT
(
dayLength
>
(
InstantSpan
{
}
)
)
;
const
auto
&
[
date
time
]
=
dateTime
;
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
auto
roundedTime
=
RoundTime
(
time
increment
unit
roundingMode
dayLength
)
;
MOZ_ASSERT
(
0
<
=
roundedTime
.
days
&
&
roundedTime
.
days
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
PlainDate
balanceResult
;
if
(
!
BalanceISODate
(
cx
date
.
year
date
.
month
int64_t
(
date
.
day
)
+
roundedTime
.
days
&
balanceResult
)
)
{
return
false
;
}
*
result
=
{
balanceResult
roundedTime
.
time
}
;
return
true
;
}
static
bool
DifferenceTemporalZonedDateTime
(
JSContext
*
cx
TemporalDifference
operation
const
CallArgs
&
args
)
{
Rooted
<
ZonedDateTime
>
zonedDateTime
(
cx
ZonedDateTime
{
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
}
)
;
auto
epochInstant
=
zonedDateTime
.
instant
(
)
;
auto
timeZone
=
zonedDateTime
.
timeZone
(
)
;
auto
calendar
=
zonedDateTime
.
calendar
(
)
;
Rooted
<
ZonedDateTime
>
other
(
cx
)
;
if
(
!
ToTemporalZonedDateTime
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
auto
otherInstant
=
other
.
instant
(
)
;
auto
otherTimeZone
=
other
.
timeZone
(
)
;
auto
otherCalendar
=
other
.
calendar
(
)
;
if
(
!
CalendarEqualsOrThrow
(
cx
calendar
otherCalendar
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
resolvedOptions
(
cx
)
;
DifferenceSettings
settings
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
ToName
(
operation
)
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
resolvedOptions
=
SnapshotOwnProperties
(
cx
options
)
;
if
(
!
resolvedOptions
)
{
return
false
;
}
if
(
!
GetDifferenceSettings
(
cx
operation
resolvedOptions
TemporalUnitGroup
:
:
DateTime
TemporalUnit
:
:
Nanosecond
TemporalUnit
:
:
Hour
&
settings
)
)
{
return
false
;
}
Rooted
<
Value
>
largestUnitValue
(
cx
StringValue
(
TemporalUnitToString
(
cx
settings
.
largestUnit
)
)
)
;
if
(
!
DefineDataProperty
(
cx
resolvedOptions
cx
-
>
names
(
)
.
largestUnit
largestUnitValue
)
)
{
return
false
;
}
}
else
{
settings
=
{
TemporalUnit
:
:
Nanosecond
TemporalUnit
:
:
Hour
TemporalRoundingMode
:
:
Trunc
Increment
{
1
}
}
;
}
if
(
settings
.
largestUnit
>
TemporalUnit
:
:
Day
)
{
MOZ_ASSERT
(
settings
.
smallestUnit
>
=
settings
.
largestUnit
)
;
Duration
difference
;
if
(
!
DifferenceInstant
(
cx
epochInstant
otherInstant
settings
.
roundingIncrement
settings
.
smallestUnit
settings
.
largestUnit
settings
.
roundingMode
&
difference
)
)
{
return
false
;
}
if
(
operation
=
=
TemporalDifference
:
:
Since
)
{
difference
=
difference
.
negate
(
)
;
}
auto
*
result
=
CreateTemporalDuration
(
cx
difference
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
if
(
!
TimeZoneEqualsOrThrow
(
cx
timeZone
otherTimeZone
)
)
{
return
false
;
}
if
(
epochInstant
=
=
otherInstant
)
{
auto
*
obj
=
CreateTemporalDuration
(
cx
{
}
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
PlainDateTime
precalculatedPlainDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
&
precalculatedPlainDateTime
)
)
{
return
false
;
}
Duration
difference
;
if
(
!
:
:
DifferenceZonedDateTime
(
cx
epochInstant
otherInstant
timeZone
calendar
settings
.
largestUnit
resolvedOptions
mozilla
:
:
SomeRef
<
const
PlainDateTime
>
(
precalculatedPlainDateTime
)
&
difference
)
)
{
return
false
;
}
bool
roundingGranularityIsNoop
=
settings
.
smallestUnit
=
=
TemporalUnit
:
:
Nanosecond
&
&
settings
.
roundingIncrement
=
=
Increment
{
1
}
;
if
(
roundingGranularityIsNoop
)
{
if
(
operation
=
=
TemporalDifference
:
:
Since
)
{
difference
=
difference
.
negate
(
)
;
}
auto
*
obj
=
CreateTemporalDuration
(
cx
difference
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
Duration
roundResult
;
if
(
!
RoundDuration
(
cx
difference
settings
.
roundingIncrement
settings
.
smallestUnit
settings
.
roundingMode
zonedDateTime
precalculatedPlainDateTime
&
roundResult
)
)
{
return
false
;
}
Duration
result
;
if
(
!
AdjustRoundedDurationDays
(
cx
roundResult
settings
.
roundingIncrement
settings
.
smallestUnit
settings
.
roundingMode
zonedDateTime
precalculatedPlainDateTime
&
result
)
)
{
return
false
;
}
if
(
operation
=
=
TemporalDifference
:
:
Since
)
{
result
=
result
.
negate
(
)
;
}
auto
*
obj
=
CreateTemporalDuration
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
enum
class
ZonedDateTimeDuration
{
Add
Subtract
}
;
static
bool
AddDurationToOrSubtractDurationFromZonedDateTime
(
JSContext
*
cx
ZonedDateTimeDuration
operation
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Duration
duration
;
if
(
!
ToTemporalDurationRecord
(
cx
args
.
get
(
0
)
&
duration
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
const
char
*
name
=
operation
=
=
ZonedDateTimeDuration
:
:
Add
?
"
add
"
:
"
subtract
"
;
options
=
RequireObjectArg
(
cx
"
options
"
name
args
[
1
]
)
;
}
else
{
options
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
options
)
{
return
false
;
}
if
(
operation
=
=
ZonedDateTimeDuration
:
:
Subtract
)
{
duration
=
duration
.
negate
(
)
;
}
Instant
resultInstant
;
if
(
!
:
:
AddZonedDateTime
(
cx
instant
timeZone
calendar
duration
options
&
resultInstant
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
resultInstant
)
)
;
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
resultInstant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTimeConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
ZonedDateTime
"
)
)
{
return
false
;
}
Rooted
<
BigInt
*
>
epochNanoseconds
(
cx
js
:
:
ToBigInt
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
epochNanoseconds
)
{
return
false
;
}
if
(
!
IsValidEpochNanoseconds
(
epochNanoseconds
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
if
(
!
ToTemporalTimeZone
(
cx
args
.
get
(
1
)
&
timeZone
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
ToTemporalCalendarWithISODefault
(
cx
args
.
get
(
2
)
&
calendar
)
)
{
return
false
;
}
auto
*
obj
=
CreateTemporalZonedDateTime
(
cx
args
epochNanoseconds
timeZone
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
ZonedDateTime_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
from
"
args
[
1
]
)
;
if
(
!
options
)
{
return
false
;
}
}
if
(
args
.
get
(
0
)
.
isObject
(
)
)
{
JSObject
*
item
=
&
args
[
0
]
.
toObject
(
)
;
if
(
auto
*
zonedDateTime
=
item
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
options
)
{
TemporalDisambiguation
ignoredDisambiguation
;
if
(
!
ToTemporalDisambiguation
(
cx
options
&
ignoredDisambiguation
)
)
{
return
false
;
}
TemporalOffset
ignoredOffset
;
if
(
!
ToTemporalOffset
(
cx
options
&
ignoredOffset
)
)
{
return
false
;
}
TemporalOverflow
ignoredOverflow
;
if
(
!
ToTemporalOverflow
(
cx
options
&
ignoredOverflow
)
)
{
return
false
;
}
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochInstant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
auto
*
result
=
ToTemporalZonedDateTime
(
cx
args
.
get
(
0
)
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
ZonedDateTime
>
one
(
cx
)
;
if
(
!
ToTemporalZonedDateTime
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
Rooted
<
ZonedDateTime
>
two
(
cx
)
;
if
(
!
ToTemporalZonedDateTime
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
auto
oneNs
=
one
.
instant
(
)
;
auto
twoNs
=
two
.
instant
(
)
;
args
.
rval
(
)
.
setInt32
(
oneNs
>
twoNs
?
1
:
oneNs
<
twoNs
?
-
1
:
0
)
;
return
true
;
}
static
bool
ZonedDateTime_calendarId
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
auto
*
calendarId
=
ToTemporalCalendarIdentifier
(
cx
calendar
)
;
if
(
!
calendarId
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
calendarId
)
;
return
true
;
}
static
bool
ZonedDateTime_calendarId
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_calendarId
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_timeZoneId
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
auto
*
timeZoneId
=
ToTemporalTimeZoneIdentifier
(
cx
timeZone
)
;
if
(
!
timeZoneId
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
timeZoneId
)
;
return
true
;
}
static
bool
ZonedDateTime_timeZoneId
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_timeZoneId
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_year
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_year
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_month
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarMonth
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_month
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_monthCode
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarMonthCode
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_monthCode
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_day
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDay
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_day
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_day
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_hour
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
hour
)
;
return
true
;
}
static
bool
ZonedDateTime_hour
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_hour
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_minute
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
minute
)
;
return
true
;
}
static
bool
ZonedDateTime_minute
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_minute
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_second
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
second
)
;
return
true
;
}
static
bool
ZonedDateTime_second
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_second
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_millisecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
millisecond
)
;
return
true
;
}
static
bool
ZonedDateTime_millisecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_millisecond
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_microsecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
microsecond
)
;
return
true
;
}
static
bool
ZonedDateTime_microsecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_microsecond
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_nanosecond
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
dateTime
.
time
.
nanosecond
)
;
return
true
;
}
static
bool
ZonedDateTime_nanosecond
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_nanosecond
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_epochSeconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
args
.
rval
(
)
.
setNumber
(
instant
.
seconds
)
;
return
true
;
}
static
bool
ZonedDateTime_epochSeconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_epochSeconds
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_epochMilliseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
args
.
rval
(
)
.
setNumber
(
instant
.
floorToMilliseconds
(
)
)
;
return
true
;
}
static
bool
ZonedDateTime_epochMilliseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_epochMilliseconds
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_epochMicroseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
auto
*
microseconds
=
BigInt
:
:
createFromInt64
(
cx
instant
.
floorToMicroseconds
(
)
)
;
if
(
!
microseconds
)
{
return
false
;
}
args
.
rval
(
)
.
setBigInt
(
microseconds
)
;
return
true
;
}
static
bool
ZonedDateTime_epochMicroseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_epochMicroseconds
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_epochNanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
*
nanoseconds
=
ToEpochNanoseconds
(
cx
ToInstant
(
zonedDateTime
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
args
.
rval
(
)
.
setBigInt
(
nanoseconds
)
;
return
true
;
}
static
bool
ZonedDateTime_epochNanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_epochNanoseconds
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_dayOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDayOfWeek
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_dayOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_dayOfWeek
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_dayOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDayOfYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_dayOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_dayOfYear
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_weekOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarWeekOfYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_weekOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_weekOfYear
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_yearOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarYearOfWeek
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_yearOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_yearOfWeek
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_hoursInDay
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
isoCalendar
(
cx
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
PlainDateTime
temporalDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
&
temporalDateTime
)
)
{
return
false
;
}
const
auto
&
date
=
temporalDateTime
.
date
;
Rooted
<
PlainDateTimeWithCalendar
>
today
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
date
{
}
}
isoCalendar
&
today
)
)
{
return
false
;
}
auto
tomorrowFields
=
BalanceISODate
(
date
.
year
date
.
month
date
.
day
+
1
)
;
Rooted
<
PlainDateTimeWithCalendar
>
tomorrow
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
tomorrowFields
{
}
}
isoCalendar
&
tomorrow
)
)
{
return
false
;
}
Instant
todayInstant
;
if
(
!
GetInstantFor
(
cx
timeZone
today
TemporalDisambiguation
:
:
Compatible
&
todayInstant
)
)
{
return
false
;
}
Instant
tomorrowInstant
;
if
(
!
GetInstantFor
(
cx
timeZone
tomorrow
TemporalDisambiguation
:
:
Compatible
&
tomorrowInstant
)
)
{
return
false
;
}
auto
diffNs
=
tomorrowInstant
-
todayInstant
;
MOZ_ASSERT
(
IsValidInstantSpan
(
diffNs
)
)
;
constexpr
int32_t
secPerHour
=
60
*
60
;
constexpr
int64_t
nsPerSec
=
ToNanoseconds
(
TemporalUnit
:
:
Second
)
;
constexpr
double
nsPerHour
=
ToNanoseconds
(
TemporalUnit
:
:
Hour
)
;
int64_t
hours
=
diffNs
.
seconds
/
secPerHour
;
int64_t
seconds
=
diffNs
.
seconds
%
secPerHour
;
int64_t
nanoseconds
=
seconds
*
nsPerSec
+
diffNs
.
nanoseconds
;
double
result
=
double
(
hours
)
+
double
(
nanoseconds
)
/
nsPerHour
;
args
.
rval
(
)
.
setNumber
(
result
)
;
return
true
;
}
static
bool
ZonedDateTime_hoursInDay
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_hoursInDay
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_daysInWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDaysInWeek
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_daysInWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_daysInWeek
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_daysInMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDaysInMonth
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_daysInMonth
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_daysInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarDaysInYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_daysInYear
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_monthsInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarMonthsInYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_monthsInYear
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_inLeapYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
return
CalendarInLeapYear
(
cx
calendar
dateTime
args
.
rval
(
)
)
;
}
static
bool
ZonedDateTime_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_inLeapYear
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_offsetNanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offsetNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
args
.
rval
(
)
.
setNumber
(
offsetNanoseconds
)
;
return
true
;
}
static
bool
ZonedDateTime_offsetNanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_offsetNanoseconds
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_offset
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
JSString
*
str
=
GetOffsetStringFor
(
cx
timeZone
epochInstant
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
ZonedDateTime_offset
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_offset
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
ZonedDateTimeObject
*
>
zonedDateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
)
;
Rooted
<
JSObject
*
>
temporalZonedDateTimeLike
(
cx
RequireObjectArg
(
cx
"
temporalZonedDateTimeLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalZonedDateTimeLike
)
{
return
false
;
}
if
(
!
RejectTemporalLikeObject
(
cx
temporalZonedDateTimeLike
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
resolvedOptions
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
with
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
resolvedOptions
=
SnapshotOwnProperties
(
cx
options
)
;
}
else
{
resolvedOptions
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
resolvedOptions
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offsetNanoseconds
)
)
{
return
false
;
}
Rooted
<
PlainDateTimeObject
*
>
dateTime
(
cx
GetPlainDateTimeFor
(
cx
instant
calendar
offsetNanoseconds
)
)
;
if
(
!
dateTime
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
dateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
struct
TimeField
{
using
FieldName
=
ImmutableTenuredPtr
<
PropertyName
*
>
JSAtomState
:
:
*
;
FieldName
name
;
int32_t
value
;
}
timeFields
[
]
=
{
{
&
JSAtomState
:
:
hour
dateTime
-
>
isoHour
(
)
}
{
&
JSAtomState
:
:
minute
dateTime
-
>
isoMinute
(
)
}
{
&
JSAtomState
:
:
second
dateTime
-
>
isoSecond
(
)
}
{
&
JSAtomState
:
:
millisecond
dateTime
-
>
isoMillisecond
(
)
}
{
&
JSAtomState
:
:
microsecond
dateTime
-
>
isoMicrosecond
(
)
}
{
&
JSAtomState
:
:
nanosecond
dateTime
-
>
isoNanosecond
(
)
}
}
;
Rooted
<
Value
>
timeFieldValue
(
cx
)
;
for
(
const
auto
&
timeField
:
timeFields
)
{
Handle
<
PropertyName
*
>
name
=
cx
-
>
names
(
)
.
*
(
timeField
.
name
)
;
timeFieldValue
.
setInt32
(
timeField
.
value
)
;
if
(
!
DefineDataProperty
(
cx
fields
name
timeFieldValue
)
)
{
return
false
;
}
}
JSString
*
fieldsOffset
=
FormatUTCOffsetNanoseconds
(
cx
offsetNanoseconds
)
;
if
(
!
fieldsOffset
)
{
return
false
;
}
timeFieldValue
.
setString
(
fieldsOffset
)
;
if
(
!
DefineDataProperty
(
cx
fields
cx
-
>
names
(
)
.
offset
timeFieldValue
)
)
{
return
false
;
}
if
(
!
AppendSorted
(
cx
fieldNames
.
get
(
)
{
TemporalField
:
:
Hour
TemporalField
:
:
Microsecond
TemporalField
:
:
Millisecond
TemporalField
:
:
Minute
TemporalField
:
:
Nanosecond
TemporalField
:
:
Offset
TemporalField
:
:
Second
}
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
partialZonedDateTime
(
cx
PreparePartialTemporalFields
(
cx
temporalZonedDateTimeLike
fieldNames
)
)
;
if
(
!
partialZonedDateTime
)
{
return
false
;
}
Rooted
<
JSObject
*
>
mergedFields
(
cx
CalendarMergeFields
(
cx
calendar
fields
partialZonedDateTime
)
)
;
if
(
!
mergedFields
)
{
return
false
;
}
fields
=
PrepareTemporalFields
(
cx
mergedFields
fieldNames
{
TemporalField
:
:
Offset
}
)
;
if
(
!
fields
)
{
return
false
;
}
auto
disambiguation
=
TemporalDisambiguation
:
:
Compatible
;
if
(
!
ToTemporalDisambiguation
(
cx
resolvedOptions
&
disambiguation
)
)
{
return
false
;
}
auto
offset
=
TemporalOffset
:
:
Prefer
;
if
(
!
ToTemporalOffset
(
cx
resolvedOptions
&
offset
)
)
{
return
false
;
}
PlainDateTime
dateTimeResult
;
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
resolvedOptions
&
dateTimeResult
)
)
{
return
false
;
}
Rooted
<
Value
>
offsetString
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
offset
&
offsetString
)
)
{
return
false
;
}
MOZ_ASSERT
(
offsetString
.
isString
(
)
)
;
Rooted
<
JSString
*
>
offsetStr
(
cx
offsetString
.
toString
(
)
)
;
int64_t
newOffsetNanoseconds
;
if
(
!
ParseDateTimeUTCOffset
(
cx
offsetStr
&
newOffsetNanoseconds
)
)
{
return
false
;
}
Instant
epochNanoseconds
;
if
(
!
InterpretISODateTimeOffset
(
cx
dateTimeResult
OffsetBehaviour
:
:
Option
newOffsetNanoseconds
timeZone
disambiguation
offset
MatchBehaviour
:
:
MatchExactly
&
epochNanoseconds
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_with
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_withPlainTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainTime
time
=
{
}
;
if
(
args
.
hasDefined
(
0
)
)
{
if
(
!
ToTemporalTime
(
cx
args
[
0
]
&
time
)
)
{
return
false
;
}
}
PlainDateTime
plainDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
&
plainDateTime
)
)
{
return
false
;
}
Rooted
<
PlainDateTimeWithCalendar
>
resultPlainDateTime
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
plainDateTime
.
date
time
}
calendar
&
resultPlainDateTime
)
)
{
return
false
;
}
Instant
instant
;
if
(
!
GetInstantFor
(
cx
timeZone
resultPlainDateTime
TemporalDisambiguation
:
:
Compatible
&
instant
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
instant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_withPlainTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_withPlainTime
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_withPlainDate
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
PlainDateWithCalendar
>
plainDate
(
cx
)
;
if
(
!
ToTemporalDate
(
cx
args
.
get
(
0
)
&
plainDate
)
)
{
return
false
;
}
auto
date
=
plainDate
.
date
(
)
;
PlainDateTime
plainDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
&
plainDateTime
)
)
{
return
false
;
}
if
(
!
ConsolidateCalendars
(
cx
calendar
plainDate
.
calendar
(
)
&
calendar
)
)
{
return
false
;
}
Rooted
<
PlainDateTimeWithCalendar
>
resultPlainDateTime
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
date
plainDateTime
.
time
}
calendar
&
resultPlainDateTime
)
)
{
return
false
;
}
Instant
instant
;
if
(
!
GetInstantFor
(
cx
timeZone
resultPlainDateTime
TemporalDisambiguation
:
:
Compatible
&
instant
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
instant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_withPlainDate
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_withPlainDate
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_withTimeZone
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochNanoseconds
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
if
(
!
ToTemporalTimeZone
(
cx
args
.
get
(
0
)
&
timeZone
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_withTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_withTimeZone
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_withCalendar
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochNanoseconds
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
ToTemporalCalendar
(
cx
args
.
get
(
0
)
&
calendar
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_withCalendar
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_withCalendar
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_add
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromZonedDateTime
(
cx
ZonedDateTimeDuration
:
:
Add
args
)
;
}
static
bool
ZonedDateTime_add
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_add
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_subtract
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromZonedDateTime
(
cx
ZonedDateTimeDuration
:
:
Subtract
args
)
;
}
static
bool
ZonedDateTime_subtract
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_subtract
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_until
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalZonedDateTime
(
cx
TemporalDifference
:
:
Until
args
)
;
}
static
bool
ZonedDateTime_until
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_until
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_since
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalZonedDateTime
(
cx
TemporalDifference
:
:
Since
args
)
;
}
static
bool
ZonedDateTime_since
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_since
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_round
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
auto
roundingMode
=
TemporalRoundingMode
:
:
HalfExpand
;
auto
roundingIncrement
=
Increment
{
1
}
;
if
(
args
.
get
(
0
)
.
isString
(
)
)
{
Rooted
<
JSString
*
>
paramString
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
GetTemporalUnit
(
cx
paramString
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DayTime
&
smallestUnit
)
)
{
return
false
;
}
}
else
{
Rooted
<
JSObject
*
>
roundTo
(
cx
RequireObjectArg
(
cx
"
roundTo
"
"
round
"
args
.
get
(
0
)
)
)
;
if
(
!
roundTo
)
{
return
false
;
}
if
(
!
ToTemporalRoundingIncrement
(
cx
roundTo
&
roundingIncrement
)
)
{
return
false
;
}
if
(
!
ToTemporalRoundingMode
(
cx
roundTo
&
roundingMode
)
)
{
return
false
;
}
if
(
!
GetTemporalUnit
(
cx
roundTo
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DayTime
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Auto
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_MISSING_OPTION
"
smallestUnit
"
)
;
return
false
;
}
MOZ_ASSERT
(
TemporalUnit
:
:
Day
<
=
smallestUnit
&
&
smallestUnit
<
=
TemporalUnit
:
:
Nanosecond
)
;
auto
maximum
=
Increment
{
1
}
;
bool
inclusive
=
true
;
if
(
smallestUnit
>
TemporalUnit
:
:
Day
)
{
maximum
=
MaximumTemporalDurationRoundingIncrement
(
smallestUnit
)
;
inclusive
=
false
;
}
if
(
!
ValidateTemporalRoundingIncrement
(
cx
roundingIncrement
maximum
inclusive
)
)
{
return
false
;
}
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Nanosecond
&
&
roundingIncrement
=
=
Increment
{
1
}
)
{
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochInstant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
epochInstant
&
offsetNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
temporalDateTime
=
GetPlainDateTimeFor
(
epochInstant
offsetNanoseconds
)
;
Rooted
<
CalendarValue
>
isoCalendar
(
cx
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
Rooted
<
PlainDateTimeWithCalendar
>
dtStart
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
temporalDateTime
.
date
{
}
}
isoCalendar
&
dtStart
)
)
{
return
false
;
}
Instant
startNs
;
if
(
!
GetInstantFor
(
cx
timeZone
dtStart
TemporalDisambiguation
:
:
Compatible
&
startNs
)
)
{
return
false
;
}
Instant
endNs
;
if
(
!
AddDaysToZonedDateTime
(
cx
startNs
ToPlainDateTime
(
dtStart
)
timeZone
calendar
1
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
auto
dayLengthNs
=
endNs
-
startNs
;
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLengthNs
)
)
;
if
(
dayLengthNs
<
=
InstantSpan
{
}
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_ZONED_DATE_TIME_NON_POSITIVE_DAY_LENGTH
)
;
return
false
;
}
PlainDateTime
roundResult
;
if
(
!
RoundISODateTime
(
cx
temporalDateTime
roundingIncrement
smallestUnit
roundingMode
dayLengthNs
&
roundResult
)
)
{
return
false
;
}
Instant
epochNanoseconds
;
if
(
!
InterpretISODateTimeOffset
(
cx
roundResult
OffsetBehaviour
:
:
Option
offsetNanoseconds
timeZone
TemporalDisambiguation
:
:
Compatible
TemporalOffset
:
:
Prefer
MatchBehaviour
:
:
MatchExactly
&
epochNanoseconds
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_round
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_round
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_equals
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochNanoseconds
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
ZonedDateTime
>
other
(
cx
)
;
if
(
!
ToTemporalZonedDateTime
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
auto
otherEpochNanoseconds
=
other
.
instant
(
)
;
auto
otherTimeZone
=
other
.
timeZone
(
)
;
auto
otherCalendar
=
other
.
calendar
(
)
;
bool
equals
=
epochNanoseconds
=
=
otherEpochNanoseconds
;
if
(
equals
&
&
!
TimeZoneEquals
(
cx
timeZone
otherTimeZone
&
equals
)
)
{
return
false
;
}
if
(
equals
&
&
!
CalendarEquals
(
cx
calendar
otherCalendar
&
equals
)
)
{
return
false
;
}
args
.
rval
(
)
.
setBoolean
(
equals
)
;
return
true
;
}
static
bool
ZonedDateTime_equals
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_equals
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
ZonedDateTimeObject
*
>
zonedDateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
)
;
SecondsStringPrecision
precision
=
{
Precision
:
:
Auto
(
)
TemporalUnit
:
:
Nanosecond
Increment
{
1
}
}
;
auto
roundingMode
=
TemporalRoundingMode
:
:
Trunc
;
auto
showCalendar
=
CalendarOption
:
:
Auto
;
auto
showTimeZone
=
TimeZoneNameOption
:
:
Auto
;
auto
showOffset
=
ShowOffsetOption
:
:
Auto
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toString
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
ToCalendarNameOption
(
cx
options
&
showCalendar
)
)
{
return
false
;
}
auto
digits
=
Precision
:
:
Auto
(
)
;
if
(
!
ToFractionalSecondDigits
(
cx
options
&
digits
)
)
{
return
false
;
}
if
(
!
ToShowOffsetOption
(
cx
options
&
showOffset
)
)
{
return
false
;
}
if
(
!
ToTemporalRoundingMode
(
cx
options
&
roundingMode
)
)
{
return
false
;
}
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
if
(
!
GetTemporalUnit
(
cx
options
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
Time
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Hour
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_UNIT_OPTION
"
hour
"
"
smallestUnit
"
)
;
return
false
;
}
if
(
!
ToTimeZoneNameOption
(
cx
options
&
showTimeZone
)
)
{
return
false
;
}
precision
=
ToSecondsStringPrecision
(
smallestUnit
digits
)
;
}
JSString
*
str
=
TemporalZonedDateTimeToString
(
cx
zonedDateTime
precision
.
precision
showCalendar
showTimeZone
showOffset
precision
.
increment
precision
.
unit
roundingMode
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
ZonedDateTime_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toString
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toLocaleString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
ZonedDateTimeObject
*
>
zonedDateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
)
;
JSString
*
str
=
TemporalZonedDateTimeToString
(
cx
zonedDateTime
Precision
:
:
Auto
(
)
CalendarOption
:
:
Auto
TimeZoneNameOption
:
:
Auto
ShowOffsetOption
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
ZonedDateTime_toLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toLocaleString
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
ZonedDateTimeObject
*
>
zonedDateTime
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
)
;
JSString
*
str
=
TemporalZonedDateTimeToString
(
cx
zonedDateTime
Precision
:
:
Auto
(
)
CalendarOption
:
:
Auto
TimeZoneNameOption
:
:
Auto
ShowOffsetOption
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
ZonedDateTime_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toJSON
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
ZonedDateTime
"
"
primitive
type
"
)
;
return
false
;
}
static
bool
ZonedDateTime_startOfDay
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
temporalDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
temporalDateTime
)
)
{
return
false
;
}
Rooted
<
PlainDateTimeWithCalendar
>
startDateTime
(
cx
)
;
if
(
!
CreateTemporalDateTime
(
cx
{
temporalDateTime
.
date
{
}
}
calendar
&
startDateTime
)
)
{
return
false
;
}
Instant
startInstant
;
if
(
!
GetInstantFor
(
cx
timeZone
startDateTime
TemporalDisambiguation
:
:
Compatible
&
startInstant
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
startInstant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_startOfDay
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_startOfDay
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toInstant
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
auto
*
result
=
CreateTemporalInstant
(
cx
instant
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toInstant
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toInstant
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toPlainDate
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
PlainDateTime
temporalDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
temporalDateTime
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalDate
(
cx
temporalDateTime
.
date
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toPlainDate
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toPlainDate
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toPlainTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
PlainDateTime
temporalDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
temporalDateTime
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalTime
(
cx
temporalDateTime
.
time
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toPlainTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toPlainTime
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toPlainDateTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
auto
*
result
=
GetPlainDateTimeFor
(
cx
timeZone
instant
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toPlainDateTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toPlainDateTime
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toPlainYearMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
PlainDateTimeObject
*
>
temporalDateTime
(
cx
GetPlainDateTimeFor
(
cx
timeZone
instant
calendar
)
)
;
if
(
!
temporalDateTime
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
temporalDateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
result
=
CalendarYearMonthFromFields
(
cx
calendar
fields
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toPlainYearMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toPlainYearMonth
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_toPlainMonthDay
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
Rooted
<
PlainDateTimeObject
*
>
temporalDateTime
(
cx
GetPlainDateTimeFor
(
cx
timeZone
instant
calendar
)
)
;
if
(
!
temporalDateTime
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
MonthCode
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
temporalDateTime
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
result
=
CalendarMonthDayFromFields
(
cx
calendar
fields
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
ZonedDateTime_toPlainMonthDay
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_toPlainMonthDay
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_getISOFields
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
IdValueVector
>
fields
(
cx
IdValueVector
(
cx
)
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
epochInstant
&
offsetNanoseconds
)
)
{
return
false
;
}
auto
temporalDateTime
=
GetPlainDateTimeFor
(
epochInstant
offsetNanoseconds
)
;
Rooted
<
JSString
*
>
offset
(
cx
FormatUTCOffsetNanoseconds
(
cx
offsetNanoseconds
)
)
;
if
(
!
offset
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
calendar
)
calendar
.
toValue
(
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoDay
)
Int32Value
(
temporalDateTime
.
date
.
day
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoHour
)
Int32Value
(
temporalDateTime
.
time
.
hour
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMicrosecond
)
Int32Value
(
temporalDateTime
.
time
.
microsecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMillisecond
)
Int32Value
(
temporalDateTime
.
time
.
millisecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMinute
)
Int32Value
(
temporalDateTime
.
time
.
minute
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMonth
)
Int32Value
(
temporalDateTime
.
date
.
month
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoNanosecond
)
Int32Value
(
temporalDateTime
.
time
.
nanosecond
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoSecond
)
Int32Value
(
temporalDateTime
.
time
.
second
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoYear
)
Int32Value
(
temporalDateTime
.
date
.
year
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
offset
)
StringValue
(
offset
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
timeZone
)
timeZone
.
toValue
(
)
)
)
{
return
false
;
}
auto
*
obj
=
NewPlainObjectWithUniqueNames
(
cx
fields
.
begin
(
)
fields
.
length
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
ZonedDateTime_getISOFields
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_getISOFields
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_getCalendar
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
auto
*
obj
=
ToTemporalCalendarObject
(
cx
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
ZonedDateTime_getCalendar
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_getCalendar
>
(
cx
args
)
;
}
static
bool
ZonedDateTime_getTimeZone
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
zonedDateTime
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
ZonedDateTimeObject
>
(
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
auto
*
obj
=
ToTemporalTimeZoneObject
(
cx
timeZone
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
ZonedDateTime_getTimeZone
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsZonedDateTime
ZonedDateTime_getTimeZone
>
(
cx
args
)
;
}
const
JSClass
ZonedDateTimeObject
:
:
class_
=
{
"
Temporal
.
ZonedDateTime
"
JSCLASS_HAS_RESERVED_SLOTS
(
ZonedDateTimeObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_ZonedDateTime
)
JS_NULL_CLASS_OPS
&
ZonedDateTimeObject
:
:
classSpec_
}
;
const
JSClass
&
ZonedDateTimeObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
ZonedDateTime_methods
[
]
=
{
JS_FN
(
"
from
"
ZonedDateTime_from
1
0
)
JS_FN
(
"
compare
"
ZonedDateTime_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
ZonedDateTime_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
ZonedDateTime_with
1
0
)
JS_FN
(
"
withPlainTime
"
ZonedDateTime_withPlainTime
0
0
)
JS_FN
(
"
withPlainDate
"
ZonedDateTime_withPlainDate
1
0
)
JS_FN
(
"
withTimeZone
"
ZonedDateTime_withTimeZone
1
0
)
JS_FN
(
"
withCalendar
"
ZonedDateTime_withCalendar
1
0
)
JS_FN
(
"
add
"
ZonedDateTime_add
1
0
)
JS_FN
(
"
subtract
"
ZonedDateTime_subtract
1
0
)
JS_FN
(
"
until
"
ZonedDateTime_until
1
0
)
JS_FN
(
"
since
"
ZonedDateTime_since
1
0
)
JS_FN
(
"
round
"
ZonedDateTime_round
1
0
)
JS_FN
(
"
equals
"
ZonedDateTime_equals
1
0
)
JS_FN
(
"
toString
"
ZonedDateTime_toString
0
0
)
JS_FN
(
"
toLocaleString
"
ZonedDateTime_toLocaleString
0
0
)
JS_FN
(
"
toJSON
"
ZonedDateTime_toJSON
0
0
)
JS_FN
(
"
valueOf
"
ZonedDateTime_valueOf
0
0
)
JS_FN
(
"
startOfDay
"
ZonedDateTime_startOfDay
0
0
)
JS_FN
(
"
toInstant
"
ZonedDateTime_toInstant
0
0
)
JS_FN
(
"
toPlainDate
"
ZonedDateTime_toPlainDate
0
0
)
JS_FN
(
"
toPlainTime
"
ZonedDateTime_toPlainTime
0
0
)
JS_FN
(
"
toPlainDateTime
"
ZonedDateTime_toPlainDateTime
0
0
)
JS_FN
(
"
toPlainYearMonth
"
ZonedDateTime_toPlainYearMonth
0
0
)
JS_FN
(
"
toPlainMonthDay
"
ZonedDateTime_toPlainMonthDay
0
0
)
JS_FN
(
"
getISOFields
"
ZonedDateTime_getISOFields
0
0
)
JS_FN
(
"
getCalendar
"
ZonedDateTime_getCalendar
0
0
)
JS_FN
(
"
getTimeZone
"
ZonedDateTime_getTimeZone
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
ZonedDateTime_prototype_properties
[
]
=
{
JS_PSG
(
"
calendarId
"
ZonedDateTime_calendarId
0
)
JS_PSG
(
"
timeZoneId
"
ZonedDateTime_timeZoneId
0
)
JS_PSG
(
"
year
"
ZonedDateTime_year
0
)
JS_PSG
(
"
month
"
ZonedDateTime_month
0
)
JS_PSG
(
"
monthCode
"
ZonedDateTime_monthCode
0
)
JS_PSG
(
"
day
"
ZonedDateTime_day
0
)
JS_PSG
(
"
hour
"
ZonedDateTime_hour
0
)
JS_PSG
(
"
minute
"
ZonedDateTime_minute
0
)
JS_PSG
(
"
second
"
ZonedDateTime_second
0
)
JS_PSG
(
"
millisecond
"
ZonedDateTime_millisecond
0
)
JS_PSG
(
"
microsecond
"
ZonedDateTime_microsecond
0
)
JS_PSG
(
"
nanosecond
"
ZonedDateTime_nanosecond
0
)
JS_PSG
(
"
epochSeconds
"
ZonedDateTime_epochSeconds
0
)
JS_PSG
(
"
epochMilliseconds
"
ZonedDateTime_epochMilliseconds
0
)
JS_PSG
(
"
epochMicroseconds
"
ZonedDateTime_epochMicroseconds
0
)
JS_PSG
(
"
epochNanoseconds
"
ZonedDateTime_epochNanoseconds
0
)
JS_PSG
(
"
dayOfWeek
"
ZonedDateTime_dayOfWeek
0
)
JS_PSG
(
"
dayOfYear
"
ZonedDateTime_dayOfYear
0
)
JS_PSG
(
"
weekOfYear
"
ZonedDateTime_weekOfYear
0
)
JS_PSG
(
"
yearOfWeek
"
ZonedDateTime_yearOfWeek
0
)
JS_PSG
(
"
hoursInDay
"
ZonedDateTime_hoursInDay
0
)
JS_PSG
(
"
daysInWeek
"
ZonedDateTime_daysInWeek
0
)
JS_PSG
(
"
daysInMonth
"
ZonedDateTime_daysInMonth
0
)
JS_PSG
(
"
daysInYear
"
ZonedDateTime_daysInYear
0
)
JS_PSG
(
"
monthsInYear
"
ZonedDateTime_monthsInYear
0
)
JS_PSG
(
"
inLeapYear
"
ZonedDateTime_inLeapYear
0
)
JS_PSG
(
"
offsetNanoseconds
"
ZonedDateTime_offsetNanoseconds
0
)
JS_PSG
(
"
offset
"
ZonedDateTime_offset
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
ZonedDateTime
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
ZonedDateTimeObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
ZonedDateTimeConstructor
2
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
ZonedDateTimeObject
>
ZonedDateTime_methods
nullptr
ZonedDateTime_prototype_methods
ZonedDateTime_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
