#
ifndef
builtin_temporal_Calendar_h
#
define
builtin_temporal_Calendar_h
#
include
<
stdint
.
h
>
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
class
JSStringBuilder
;
}
namespace
js
:
:
temporal
{
class
CalendarObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
SLOT_COUNT
=
1
;
JSString
*
identifier
(
)
const
{
return
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
struct
PlainDate
;
struct
PlainDateTime
;
enum
class
CalendarOption
;
int32_t
ISODaysInYear
(
int32_t
year
)
;
int32_t
ISODaysInMonth
(
int32_t
year
int32_t
month
)
;
int32_t
ISODaysInMonth
(
double
year
int32_t
month
)
;
int32_t
ToISODayOfYear
(
const
PlainDate
&
date
)
;
int32_t
MakeDay
(
const
PlainDate
&
date
)
;
int64_t
MakeDate
(
const
PlainDateTime
&
dateTime
)
;
int64_t
MakeDate
(
int32_t
year
int32_t
month
int32_t
day
)
;
CalendarObject
*
GetISO8601Calendar
(
JSContext
*
cx
)
;
JSObject
*
ToTemporalCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
)
;
JSObject
*
ToTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
)
;
JSObject
*
GetTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
item
)
;
bool
CalendarYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonth
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthCode
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDay
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarWeekOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarYearOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInWeek
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInMonth
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthsInYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarInLeapYear
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
MaybeFormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
JS
:
:
Handle
<
JSObject
*
>
calendarObject
CalendarOption
showCalendar
)
;
bool
FormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
JS
:
:
Handle
<
JSString
*
>
id
CalendarOption
showCalendar
)
;
JSString
*
CalendarToString
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
calendar
)
;
}
#
endif
