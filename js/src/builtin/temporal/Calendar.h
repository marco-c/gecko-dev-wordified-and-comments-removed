#
ifndef
builtin_temporal_Calendar_h
#
define
builtin_temporal_Calendar_h
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
class
JSStringBuilder
;
class
PlainObject
;
}
namespace
js
:
:
temporal
{
class
CalendarObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
SLOT_COUNT
=
1
;
JSString
*
identifier
(
)
const
{
return
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
using
CalendarValue
=
JSObject
*
;
struct
Duration
;
struct
PlainDate
;
struct
PlainDateTime
;
class
DurationObject
;
class
PlainDateObject
;
class
PlainMonthDayObject
;
class
PlainYearMonthObject
;
enum
class
CalendarOption
;
enum
class
TemporalUnit
;
int32_t
ISODaysInYear
(
int32_t
year
)
;
int32_t
ISODaysInMonth
(
int32_t
year
int32_t
month
)
;
int32_t
ISODaysInMonth
(
double
year
int32_t
month
)
;
int32_t
ToISODayOfYear
(
const
PlainDate
&
date
)
;
int32_t
MakeDay
(
const
PlainDate
&
date
)
;
int64_t
MakeDate
(
const
PlainDateTime
&
dateTime
)
;
int64_t
MakeDate
(
int32_t
year
int32_t
month
int32_t
day
)
;
CalendarObject
*
GetISO8601Calendar
(
JSContext
*
cx
)
;
bool
ToTemporalCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
ToTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
GetTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
item
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
enum
class
CalendarField
{
Year
Month
MonthCode
Day
Hour
Minute
Second
Millisecond
Microsecond
Nanosecond
}
;
bool
CalendarFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
std
:
:
initializer_list
<
CalendarField
>
fieldNames
JS
:
:
MutableHandle
<
JS
:
:
StackGCVector
<
JS
:
:
PropertyKey
>
>
result
)
;
JSObject
*
CalendarMergeFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
PlainObject
*
>
fields
JS
:
:
Handle
<
PlainObject
*
>
additionalFields
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
JS
:
:
Handle
<
JS
:
:
Value
>
dateAdd
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
JS
:
:
Handle
<
JSObject
*
>
options
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
PlainDateObject
*
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
JS
:
:
Handle
<
JSObject
*
>
options
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
PlainDateObject
*
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
JS
:
:
Handle
<
JS
:
:
Value
>
dateAdd
PlainDate
*
result
)
;
bool
CalendarDateUntil
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
JS
:
:
Handle
<
JSObject
*
>
options
JS
:
:
Handle
<
JS
:
:
Value
>
dateUntil
Duration
*
result
)
;
bool
CalendarDateUntil
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
TemporalUnit
largestUnit
JS
:
:
Handle
<
JS
:
:
Value
>
dateUntil
Duration
*
result
)
;
bool
CalendarDateUntil
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
JS
:
:
Handle
<
JSObject
*
>
options
Duration
*
result
)
;
bool
CalendarDateUntil
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
one
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
two
TemporalUnit
largestUnit
Duration
*
result
)
;
bool
CalendarYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonth
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthCode
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDay
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarWeekOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarYearOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInMonth
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthsInYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarInLeapYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JS
:
:
Value
>
dateLike
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
JS
:
:
Handle
<
JSObject
*
>
options
)
;
Wrapped
<
PlainYearMonthObject
*
>
CalendarYearMonthFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
)
;
Wrapped
<
PlainYearMonthObject
*
>
CalendarYearMonthFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
JS
:
:
Handle
<
JSObject
*
>
options
)
;
Wrapped
<
PlainMonthDayObject
*
>
CalendarMonthDayFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
)
;
Wrapped
<
PlainMonthDayObject
*
>
CalendarMonthDayFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
JS
:
:
Handle
<
JSObject
*
>
options
)
;
bool
CalendarEquals
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
one
JS
:
:
Handle
<
CalendarValue
>
two
bool
*
equals
)
;
bool
CalendarEqualsOrThrow
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
one
JS
:
:
Handle
<
CalendarValue
>
two
)
;
bool
ConsolidateCalendars
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
one
JS
:
:
Handle
<
CalendarValue
>
two
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
MaybeFormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
JS
:
:
Handle
<
CalendarValue
>
calendarObject
CalendarOption
showCalendar
)
;
bool
FormatCalendarAnnotation
(
JSContext
*
cx
JSStringBuilder
&
result
JS
:
:
Handle
<
JSString
*
>
id
CalendarOption
showCalendar
)
;
JSString
*
CalendarToString
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
bool
IsBuiltinAccess
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarObject
*
>
calendar
std
:
:
initializer_list
<
CalendarField
>
fieldNames
)
;
}
#
endif
