#
ifndef
builtin_temporal_Calendar_h
#
define
builtin_temporal_Calendar_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
struct
ClassSpec
;
class
PlainObject
;
}
namespace
js
:
:
temporal
{
enum
class
CalendarId
:
int32_t
{
ISO8601
Buddhist
Chinese
Coptic
Dangi
Ethiopian
EthiopianAmeteAlem
Gregorian
Hebrew
Indian
Islamic
IslamicCivil
IslamicRGSA
IslamicTabular
IslamicUmmAlQura
Japanese
Persian
ROC
}
;
inline
constexpr
auto
availableCalendars
=
{
CalendarId
:
:
ISO8601
CalendarId
:
:
Buddhist
CalendarId
:
:
Chinese
CalendarId
:
:
Coptic
CalendarId
:
:
Dangi
CalendarId
:
:
Ethiopian
CalendarId
:
:
EthiopianAmeteAlem
CalendarId
:
:
Gregorian
CalendarId
:
:
Hebrew
CalendarId
:
:
Indian
CalendarId
:
:
Islamic
CalendarId
:
:
IslamicCivil
CalendarId
:
:
IslamicRGSA
CalendarId
:
:
IslamicTabular
CalendarId
:
:
IslamicUmmAlQura
CalendarId
:
:
Japanese
CalendarId
:
:
Persian
CalendarId
:
:
ROC
}
;
constexpr
auto
&
AvailableCalendars
(
)
{
return
availableCalendars
;
}
class
CalendarObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
SLOT_COUNT
=
1
;
CalendarId
identifier
(
)
const
{
return
static_cast
<
CalendarId
>
(
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toInt32
(
)
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
class
MOZ_STACK_CLASS
CalendarValue
final
{
JS
:
:
Value
value_
{
}
;
public
:
CalendarValue
(
)
=
default
;
explicit
CalendarValue
(
const
JS
:
:
Value
&
value
)
:
value_
(
value
)
{
MOZ_ASSERT
(
value
.
isInt32
(
)
)
;
}
explicit
CalendarValue
(
CalendarId
calendarId
)
:
value_
(
JS
:
:
Int32Value
(
static_cast
<
int32_t
>
(
calendarId
)
)
)
{
}
explicit
operator
bool
(
)
const
{
return
!
value_
.
isUndefined
(
)
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
return
value_
;
}
CalendarId
identifier
(
)
const
{
return
static_cast
<
CalendarId
>
(
value_
.
toInt32
(
)
)
;
}
void
trace
(
JSTracer
*
trc
)
;
JS
:
:
Value
*
valueDoNotUse
(
)
{
return
&
value_
;
}
JS
:
:
Value
const
*
valueDoNotUse
(
)
const
{
return
&
value_
;
}
}
;
class
MOZ_STACK_CLASS
CalendarRecord
final
{
CalendarValue
receiver_
;
public
:
CalendarRecord
(
)
=
default
;
explicit
CalendarRecord
(
const
CalendarValue
&
receiver
)
:
receiver_
(
receiver
)
{
}
const
auto
&
receiver
(
)
const
{
return
receiver_
;
}
auto
*
receiverDoNotUse
(
)
const
{
return
&
receiver_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
struct
DateDuration
;
struct
Duration
;
struct
PlainDate
;
struct
PlainDateTime
;
class
DurationObject
;
class
PlainDateObject
;
class
PlainDateWithCalendar
;
class
PlainMonthDayWithCalendar
;
class
PlainYearMonthWithCalendar
;
enum
class
TemporalOverflow
;
enum
class
TemporalUnit
;
int32_t
ISODaysInYear
(
int32_t
year
)
;
int32_t
ISODaysInMonth
(
int32_t
year
int32_t
month
)
;
int32_t
ISODaysInMonth
(
double
year
int32_t
month
)
;
int32_t
ToISODayOfYear
(
const
PlainDate
&
date
)
;
int32_t
MakeDay
(
const
PlainDate
&
date
)
;
int64_t
MakeDate
(
const
PlainDateTime
&
dateTime
)
;
int64_t
MakeDate
(
int32_t
year
int32_t
month
int32_t
day
)
;
bool
ToBuiltinCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
id
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
ToTemporalCalendar
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
ToTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalCalendarLike
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
bool
GetTemporalCalendarWithISODefault
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
item
JS
:
:
MutableHandle
<
CalendarValue
>
result
)
;
std
:
:
string_view
ToTemporalCalendarIdentifier
(
const
CalendarValue
&
calendar
)
;
JSLinearString
*
ToTemporalCalendarIdentifier
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
enum
class
CalendarField
{
Year
Month
MonthCode
Day
}
;
using
CalendarFieldNames
=
JS
:
:
StackGCVector
<
JS
:
:
PropertyKey
>
;
bool
CalendarFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
mozilla
:
:
EnumSet
<
CalendarField
>
fieldNames
JS
:
:
MutableHandle
<
CalendarFieldNames
>
result
)
;
PlainObject
*
CalendarMergeFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
PlainObject
*
>
fields
JS
:
:
Handle
<
PlainObject
*
>
additionalFields
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
DateDuration
&
duration
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
Duration
&
duration
JS
:
:
Handle
<
JSObject
*
>
options
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
)
;
Wrapped
<
PlainDateObject
*
>
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
JS
:
:
Handle
<
Wrapped
<
DurationObject
*
>
>
duration
JS
:
:
Handle
<
JSObject
*
>
options
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
const
PlainDate
&
date
const
DateDuration
&
duration
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
const
PlainDate
&
date
const
DateDuration
&
duration
JS
:
:
Handle
<
JSObject
*
>
options
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarRecord
>
calendar
JS
:
:
Handle
<
Wrapped
<
PlainDateObject
*
>
>
date
const
DateDuration
&
duration
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
const
Duration
&
duration
TemporalOverflow
overflow
PlainDate
*
result
)
;
bool
CalendarDateAdd
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
const
DateDuration
&
duration
TemporalOverflow
overflow
PlainDate
*
result
)
;
bool
CalendarDateUntil
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
one
const
PlainDate
&
two
TemporalUnit
largestUnit
DateDuration
*
result
)
;
bool
CalendarEra
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarEraYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonth
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthCode
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDay
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDayOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarWeekOfYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarYearOfWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInWeek
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInMonth
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDaysInYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarMonthsInYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarInLeapYear
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CalendarDateFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
PlainObject
*
>
fields
TemporalOverflow
overflow
MutableHandle
<
PlainDateWithCalendar
>
result
)
;
bool
CalendarYearMonthFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
TemporalOverflow
overflow
JS
:
:
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
;
bool
CalendarMonthDayFromFields
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
Handle
<
JSObject
*
>
fields
TemporalOverflow
overflow
JS
:
:
MutableHandle
<
PlainMonthDayWithCalendar
>
result
)
;
inline
bool
CalendarEquals
(
const
CalendarValue
&
one
const
CalendarValue
&
two
)
{
return
one
.
identifier
(
)
=
=
two
.
identifier
(
)
;
}
bool
CreateCalendarMethodsRecord
(
JSContext
*
cx
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
MutableHandle
<
CalendarRecord
>
result
)
;
bool
WrapCalendarValue
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
calendar
)
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
CalendarValue
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
explicit
operator
bool
(
)
const
{
return
bool
(
container
(
)
)
;
}
JS
:
:
Handle
<
JS
:
:
Value
>
toSlotValue
(
)
const
{
return
JS
:
:
Handle
<
JS
:
:
Value
>
:
:
fromMarkedLocation
(
container
(
)
.
valueDoNotUse
(
)
)
;
}
temporal
:
:
CalendarId
identifier
(
)
const
{
return
container
(
)
.
identifier
(
)
;
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
temporal
:
:
CalendarValue
Wrapper
>
:
public
WrappedPtrOperations
<
temporal
:
:
CalendarValue
Wrapper
>
{
auto
&
container
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
JS
:
:
MutableHandle
<
JS
:
:
Value
>
toMutableValue
(
)
{
return
JS
:
:
MutableHandle
<
JS
:
:
Value
>
:
:
fromMarkedLocation
(
container
(
)
.
valueDoNotUse
(
)
)
;
}
public
:
bool
wrap
(
JSContext
*
cx
)
{
return
temporal
:
:
WrapCalendarValue
(
cx
toMutableValue
(
)
)
;
}
}
;
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
CalendarRecord
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
receiver
(
)
const
{
return
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
:
:
fromMarkedLocation
(
container
(
)
.
receiverDoNotUse
(
)
)
;
}
}
;
}
#
endif
