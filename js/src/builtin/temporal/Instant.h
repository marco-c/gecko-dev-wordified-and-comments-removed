#
ifndef
builtin_temporal_Instant_h
#
define
builtin_temporal_Instant_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
}
namespace
js
:
:
temporal
{
class
InstantObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
SECONDS_SLOT
=
0
;
static
constexpr
uint32_t
NANOSECONDS_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
EpochNanoseconds
epochNanoseconds
(
)
const
{
double
seconds
=
getFixedSlot
(
SECONDS_SLOT
)
.
toNumber
(
)
;
MOZ_ASSERT
(
-
8
'
640
'
000
'
000
'
000
<
=
seconds
&
&
seconds
<
=
8
'
640
'
000
'
000
'
000
)
;
int32_t
nanoseconds
=
getFixedSlot
(
NANOSECONDS_SLOT
)
.
toInt32
(
)
;
MOZ_ASSERT
(
0
<
=
nanoseconds
&
&
nanoseconds
<
=
999
'
999
'
999
)
;
return
{
{
int64_t
(
seconds
)
nanoseconds
}
}
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
class
Increment
;
enum
class
TemporalUnit
;
enum
class
TemporalRoundingMode
;
bool
IsValidEpochNanoseconds
(
const
JS
:
:
BigInt
*
epochNanoseconds
)
;
bool
IsValidEpochNanoseconds
(
const
EpochNanoseconds
&
epochNanoseconds
)
;
#
ifdef
DEBUG
bool
IsValidEpochDuration
(
const
EpochDuration
&
duration
)
;
#
endif
EpochNanoseconds
ToEpochNanoseconds
(
const
JS
:
:
BigInt
*
epochNanoseconds
)
;
JS
:
:
BigInt
*
ToBigInt
(
JSContext
*
cx
const
EpochNanoseconds
&
epochNanoseconds
)
;
InstantObject
*
CreateTemporalInstant
(
JSContext
*
cx
const
EpochNanoseconds
&
epochNanoseconds
)
;
EpochNanoseconds
GetUTCEpochNanoseconds
(
const
ISODateTime
&
isoDateTime
)
;
EpochNanoseconds
RoundTemporalInstant
(
const
EpochNanoseconds
&
ns
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
)
;
bool
AddInstant
(
JSContext
*
cx
const
EpochNanoseconds
&
epochNanoseconds
const
TimeDuration
&
duration
EpochNanoseconds
*
result
)
;
TimeDuration
DifferenceInstant
(
const
EpochNanoseconds
&
ns1
const
EpochNanoseconds
&
ns2
Increment
roundingIncrement
TemporalUnit
smallestUnit
TemporalRoundingMode
roundingMode
)
;
}
#
endif
