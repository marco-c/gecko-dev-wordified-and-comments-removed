#
ifndef
builtin_temporal_Instant_h
#
define
builtin_temporal_Instant_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
}
namespace
js
:
:
temporal
{
class
InstantObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
SECONDS_SLOT
=
0
;
static
constexpr
uint32_t
NANOSECONDS_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
int64_t
seconds
(
)
const
{
double
seconds
=
getFixedSlot
(
SECONDS_SLOT
)
.
toNumber
(
)
;
MOZ_ASSERT
(
-
8
'
640
'
000
'
000
'
000
<
=
seconds
&
&
seconds
<
=
8
'
640
'
000
'
000
'
000
)
;
return
int64_t
(
seconds
)
;
}
int32_t
nanoseconds
(
)
const
{
int32_t
nanoseconds
=
getFixedSlot
(
NANOSECONDS_SLOT
)
.
toInt32
(
)
;
MOZ_ASSERT
(
0
<
=
nanoseconds
&
&
nanoseconds
<
=
999
'
999
'
999
)
;
return
nanoseconds
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
inline
Instant
ToInstant
(
const
InstantObject
*
instant
)
{
return
{
instant
-
>
seconds
(
)
instant
-
>
nanoseconds
(
)
}
;
}
class
Increment
;
enum
class
TemporalUnit
;
enum
class
TemporalRoundingMode
;
bool
IsValidEpochNanoseconds
(
const
JS
:
:
BigInt
*
epochNanoseconds
)
;
bool
IsValidEpochInstant
(
const
Instant
&
instant
)
;
bool
IsValidInstantDifference
(
const
Instant
&
ns
)
;
bool
IsValidInstantDifference
(
const
JS
:
:
BigInt
*
ns
)
;
Instant
ToInstant
(
const
JS
:
:
BigInt
*
epochNanoseconds
)
;
Instant
ToInstantDifference
(
const
JS
:
:
BigInt
*
epochNanoseconds
)
;
JS
:
:
BigInt
*
ToEpochNanoseconds
(
JSContext
*
cx
const
Instant
&
instant
)
;
JS
:
:
BigInt
*
ToEpochDifferenceNanoseconds
(
JSContext
*
cx
const
Instant
&
instant
)
;
Wrapped
<
InstantObject
*
>
ToTemporalInstant
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
)
;
bool
ToTemporalInstantEpochInstant
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
item
Instant
*
result
)
;
InstantObject
*
CreateTemporalInstant
(
JSContext
*
cx
const
Instant
&
instant
)
;
Instant
GetUTCEpochNanoseconds
(
const
PlainDateTime
&
dateTime
)
;
bool
RoundTemporalInstant
(
JSContext
*
cx
const
Instant
&
ns
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Instant
*
result
)
;
bool
AddInstant
(
JSContext
*
cx
const
Instant
&
instant
const
Duration
&
duration
Instant
*
result
)
;
}
#
endif
