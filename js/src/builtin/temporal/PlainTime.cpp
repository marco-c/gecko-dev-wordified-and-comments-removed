#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
stddef
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
#
ifdef
DEBUG
template
<
typename
T
>
static
bool
IsValidTime
(
T
hour
T
minute
T
second
T
millisecond
T
microsecond
T
nanosecond
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
hour
)
)
;
MOZ_ASSERT
(
IsInteger
(
minute
)
)
;
MOZ_ASSERT
(
IsInteger
(
second
)
)
;
MOZ_ASSERT
(
IsInteger
(
millisecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
microsecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanosecond
)
)
;
if
(
hour
<
0
|
|
hour
>
23
)
{
return
false
;
}
if
(
minute
<
0
|
|
minute
>
59
)
{
return
false
;
}
if
(
second
<
0
|
|
second
>
59
)
{
return
false
;
}
if
(
millisecond
<
0
|
|
millisecond
>
999
)
{
return
false
;
}
if
(
microsecond
<
0
|
|
microsecond
>
999
)
{
return
false
;
}
if
(
nanosecond
<
0
|
|
nanosecond
>
999
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
IsValidTime
(
const
PlainTime
&
time
)
{
auto
&
[
hour
minute
second
millisecond
microsecond
nanosecond
]
=
time
;
return
:
:
IsValidTime
(
hour
minute
second
millisecond
microsecond
nanosecond
)
;
}
bool
js
:
:
temporal
:
:
IsValidTime
(
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
{
return
:
:
IsValidTime
(
hour
minute
second
millisecond
microsecond
nanosecond
)
;
}
#
endif
static
void
ReportInvalidTimeValue
(
JSContext
*
cx
const
char
*
name
int32_t
min
int32_t
max
double
num
)
{
Int32ToCStringBuf
minCbuf
;
const
char
*
minStr
=
Int32ToCString
(
&
minCbuf
min
)
;
Int32ToCStringBuf
maxCbuf
;
const
char
*
maxStr
=
Int32ToCString
(
&
maxCbuf
max
)
;
ToCStringBuf
numCbuf
;
const
char
*
numStr
=
NumberToCString
(
&
numCbuf
num
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_TIME_INVALID_VALUE
name
minStr
maxStr
numStr
)
;
}
template
<
typename
T
>
static
inline
bool
ThrowIfInvalidTimeValue
(
JSContext
*
cx
const
char
*
name
int32_t
min
int32_t
max
T
num
)
{
if
(
min
<
=
num
&
&
num
<
=
max
)
{
return
true
;
}
ReportInvalidTimeValue
(
cx
name
min
max
num
)
;
return
false
;
}
template
<
typename
T
>
static
bool
ThrowIfInvalidTime
(
JSContext
*
cx
T
hour
T
minute
T
second
T
millisecond
T
microsecond
T
nanosecond
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
hour
)
)
;
MOZ_ASSERT
(
IsInteger
(
minute
)
)
;
MOZ_ASSERT
(
IsInteger
(
second
)
)
;
MOZ_ASSERT
(
IsInteger
(
millisecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
microsecond
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanosecond
)
)
;
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
hour
"
0
23
hour
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
minute
"
0
59
minute
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
second
"
0
59
second
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
millisecond
"
0
999
millisecond
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
microsecond
"
0
999
microsecond
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidTimeValue
(
cx
"
nanosecond
"
0
999
nanosecond
)
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidTime
(
JSContext
*
cx
const
PlainTime
&
time
)
{
auto
&
[
hour
minute
second
millisecond
microsecond
nanosecond
]
=
time
;
return
:
:
ThrowIfInvalidTime
(
cx
hour
minute
second
millisecond
microsecond
nanosecond
)
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidTime
(
JSContext
*
cx
double
hour
double
minute
double
second
double
millisecond
double
microsecond
double
nanosecond
)
{
return
:
:
ThrowIfInvalidTime
(
cx
hour
minute
second
millisecond
microsecond
nanosecond
)
;
}
static
bool
PlainTimeConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
MOZ_CRASH
(
"
NYI
"
)
;
}
const
JSClass
PlainTimeObject
:
:
class_
=
{
"
Temporal
.
PlainTime
"
JSCLASS_HAS_RESERVED_SLOTS
(
PlainTimeObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_PlainTime
)
JS_NULL_CLASS_OPS
&
PlainTimeObject
:
:
classSpec_
}
;
const
JSClass
&
PlainTimeObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
PlainTime_methods
[
]
=
{
JS_FS_END
}
;
static
const
JSFunctionSpec
PlainTime_prototype_methods
[
]
=
{
JS_FS_END
}
;
static
const
JSPropertySpec
PlainTime_prototype_properties
[
]
=
{
JS_PS_END
}
;
const
ClassSpec
PlainTimeObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
PlainTimeConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
PlainTimeObject
>
PlainTime_methods
nullptr
PlainTime_prototype_methods
PlainTime_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
