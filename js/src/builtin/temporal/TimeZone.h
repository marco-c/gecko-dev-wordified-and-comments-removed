#
ifndef
builtin_temporal_TimeZone_h
#
define
builtin_temporal_TimeZone_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
<
array
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
class
JSLinearString
;
class
JS_PUBLIC_API
JSTracer
;
struct
JSClassOps
;
namespace
js
{
struct
ClassSpec
;
}
namespace
mozilla
:
:
intl
{
class
TimeZone
;
}
namespace
js
:
:
temporal
{
class
BuiltinTimeZoneObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
OFFSET_MINUTES_SLOT
=
1
;
static
constexpr
uint32_t
INTL_TIMEZONE_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
static
constexpr
size_t
EstimatedMemoryUse
=
6840
;
JSLinearString
*
identifier
(
)
const
{
return
&
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
-
>
asLinear
(
)
;
}
const
auto
&
offsetMinutes
(
)
const
{
return
getFixedSlot
(
OFFSET_MINUTES_SLOT
)
;
}
mozilla
:
:
intl
:
:
TimeZone
*
getTimeZone
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
INTL_TIMEZONE_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
TimeZone
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setTimeZone
(
mozilla
:
:
intl
:
:
TimeZone
*
timeZone
)
{
setFixedSlot
(
INTL_TIMEZONE_SLOT
JS
:
:
PrivateValue
(
timeZone
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
}
namespace
js
:
:
temporal
{
class
MOZ_STACK_CLASS
TimeZoneValue
final
{
BuiltinTimeZoneObject
*
object_
=
nullptr
;
public
:
TimeZoneValue
(
)
=
default
;
explicit
TimeZoneValue
(
BuiltinTimeZoneObject
*
timeZone
)
:
object_
(
timeZone
)
{
MOZ_ASSERT
(
object_
)
;
}
explicit
TimeZoneValue
(
const
JS
:
:
Value
&
value
)
:
object_
(
&
value
.
toObject
(
)
.
as
<
BuiltinTimeZoneObject
>
(
)
)
{
}
explicit
operator
bool
(
)
const
{
return
!
!
object_
;
}
bool
isOffset
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
offsetMinutes
(
)
.
isInt32
(
)
;
}
auto
offsetMinutes
(
)
const
{
MOZ_ASSERT
(
isOffset
(
)
)
;
return
object_
-
>
offsetMinutes
(
)
.
toInt32
(
)
;
}
auto
*
identifier
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
identifier
(
)
;
}
auto
*
getTimeZone
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
-
>
getTimeZone
(
)
;
}
auto
*
toBuiltinTimeZoneObject
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
object_
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
JS
:
:
ObjectValue
(
*
object_
)
;
}
auto
address
(
)
{
return
&
object_
;
}
auto
address
(
)
const
{
return
&
object_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
class
PossibleInstants
final
{
static
constexpr
size_t
MaxLength
=
2
;
std
:
:
array
<
Instant
MaxLength
>
array_
=
{
}
;
size_t
length_
=
0
;
void
append
(
const
Instant
&
instant
)
{
array_
[
length_
+
+
]
=
instant
;
}
public
:
PossibleInstants
(
)
=
default
;
explicit
PossibleInstants
(
const
Instant
&
instant
)
{
append
(
instant
)
;
}
explicit
PossibleInstants
(
const
Instant
&
earlier
const
Instant
&
later
)
{
MOZ_ASSERT
(
earlier
<
=
later
)
;
append
(
earlier
)
;
append
(
later
)
;
}
size_t
length
(
)
const
{
return
length_
;
}
bool
empty
(
)
const
{
return
length_
=
=
0
;
}
const
auto
&
operator
[
]
(
size_t
i
)
const
{
return
array_
[
i
]
;
}
auto
begin
(
)
const
{
return
array_
.
begin
(
)
;
}
auto
end
(
)
const
{
return
array_
.
begin
(
)
+
length_
;
}
const
auto
&
front
(
)
const
{
MOZ_ASSERT
(
length_
>
0
)
;
return
array_
[
0
]
;
}
const
auto
&
back
(
)
const
{
MOZ_ASSERT
(
length_
>
0
)
;
return
array_
[
length_
-
1
]
;
}
}
;
struct
ParsedTimeZone
;
struct
PlainDateTime
;
enum
class
TemporalDisambiguation
;
bool
IsValidTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
;
JSLinearString
*
CanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
timeZone
)
;
BuiltinTimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
identifier
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalTimeZoneLike
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
ParsedTimeZone
>
string
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
bool
TimeZoneEquals
(
const
TimeZoneValue
&
one
const
TimeZoneValue
&
two
)
;
PlainDateTime
GetISODateTimeFor
(
const
Instant
&
instant
int64_t
offsetNanoseconds
)
;
bool
GetISODateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
JSString
*
FormatUTCOffsetNanoseconds
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
bool
GetPossibleInstantsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
PossibleInstants
*
result
)
;
bool
DisambiguatePossibleInstants
(
JSContext
*
cx
const
PossibleInstants
&
possibleInstants
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
bool
GetNamedTimeZoneNextTransition
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
bool
GetNamedTimeZonePreviousTransition
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
bool
GetStartOfDay
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
PlainDate
&
date
Instant
*
result
)
;
bool
WrapTimeZoneValueObject
(
JSContext
*
cx
JS
:
:
MutableHandle
<
BuiltinTimeZoneObject
*
>
timeZone
)
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
explicit
operator
bool
(
)
const
{
return
!
!
container
(
)
;
}
bool
isOffset
(
)
const
{
return
container
(
)
.
isOffset
(
)
;
}
auto
offsetMinutes
(
)
const
{
return
container
(
)
.
offsetMinutes
(
)
;
}
auto
*
identifier
(
)
const
{
return
container
(
)
.
identifier
(
)
;
}
auto
*
getTimeZone
(
)
const
{
return
container
(
)
.
getTimeZone
(
)
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
return
container
(
)
.
toSlotValue
(
)
;
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
:
public
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
auto
&
container
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
bool
wrap
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
container
(
)
)
;
auto
mh
=
JS
:
:
MutableHandle
<
temporal
:
:
BuiltinTimeZoneObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
return
temporal
:
:
WrapTimeZoneValueObject
(
cx
mh
)
;
}
}
;
}
#
endif
