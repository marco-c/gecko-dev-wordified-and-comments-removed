#
ifndef
builtin_temporal_TimeZone_h
#
define
builtin_temporal_TimeZone_h
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
class
JSLinearString
;
struct
JSClassOps
;
namespace
js
{
struct
ClassSpec
;
}
namespace
mozilla
:
:
intl
{
class
TimeZone
;
}
namespace
js
:
:
temporal
{
class
TimeZoneObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
OFFSET_NANOSECONDS_SLOT
=
1
;
static
constexpr
uint32_t
INTL_TIMEZONE_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
static
constexpr
size_t
EstimatedMemoryUse
=
6840
;
JSString
*
identifier
(
)
const
{
return
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
;
}
const
auto
&
offsetNanoseconds
(
)
const
{
return
getFixedSlot
(
OFFSET_NANOSECONDS_SLOT
)
;
}
mozilla
:
:
intl
:
:
TimeZone
*
getTimeZone
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
INTL_TIMEZONE_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
TimeZone
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setTimeZone
(
mozilla
:
:
intl
:
:
TimeZone
*
timeZone
)
{
setFixedSlot
(
INTL_TIMEZONE_SLOT
JS
:
:
PrivateValue
(
timeZone
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
const
ClassSpec
classSpec_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
using
TimeZoneValue
=
JSObject
*
;
struct
Instant
;
struct
PlainDateTime
;
class
InstantObject
;
class
PlainDateTimeObject
;
enum
class
TemporalDisambiguation
;
bool
IsValidTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
;
JSString
*
CanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
timeZone
)
;
JSString
*
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
)
;
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
identifier
)
;
TimeZoneObject
*
CreateTemporalTimeZoneUTC
(
JSContext
*
cx
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalTimeZoneLike
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
string
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
InstantObject
*
>
instant
PlainDateTime
*
result
)
;
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
JSString
*
GetOffsetStringFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
using
InstantVector
=
JS
:
:
StackGCVector
<
Wrapped
<
InstantObject
*
>
>
;
bool
GetPossibleInstantsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
JS
:
:
MutableHandle
<
InstantVector
>
list
)
;
Wrapped
<
InstantObject
*
>
DisambiguatePossibleInstants
(
JSContext
*
cx
JS
:
:
Handle
<
InstantVector
>
possibleInstants
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTimeObj
TemporalDisambiguation
disambiguation
)
;
JSString
*
FormatTimeZoneOffsetString
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
;
JSString
*
FormatISOTimeZoneOffsetString
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
;
}
#
endif
