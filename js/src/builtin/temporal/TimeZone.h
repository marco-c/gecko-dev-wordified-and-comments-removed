#
ifndef
builtin_temporal_TimeZone_h
#
define
builtin_temporal_TimeZone_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
class
JSLinearString
;
class
JS_PUBLIC_API
JSTracer
;
struct
JSClassOps
;
namespace
js
{
struct
ClassSpec
;
}
namespace
mozilla
:
:
intl
{
class
TimeZone
;
}
namespace
js
:
:
temporal
{
class
BuiltinTimeZoneObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
constexpr
uint32_t
IDENTIFIER_SLOT
=
0
;
static
constexpr
uint32_t
OFFSET_MINUTES_SLOT
=
1
;
static
constexpr
uint32_t
INTL_TIMEZONE_SLOT
=
2
;
static
constexpr
uint32_t
SLOT_COUNT
=
3
;
static
constexpr
size_t
EstimatedMemoryUse
=
6840
;
JSString
*
identifier
(
)
const
{
return
getFixedSlot
(
IDENTIFIER_SLOT
)
.
toString
(
)
;
}
const
auto
&
offsetMinutes
(
)
const
{
return
getFixedSlot
(
OFFSET_MINUTES_SLOT
)
;
}
mozilla
:
:
intl
:
:
TimeZone
*
getTimeZone
(
)
const
{
const
auto
&
slot
=
getFixedSlot
(
INTL_TIMEZONE_SLOT
)
;
if
(
slot
.
isUndefined
(
)
)
{
return
nullptr
;
}
return
static_cast
<
mozilla
:
:
intl
:
:
TimeZone
*
>
(
slot
.
toPrivate
(
)
)
;
}
void
setTimeZone
(
mozilla
:
:
intl
:
:
TimeZone
*
timeZone
)
{
setFixedSlot
(
INTL_TIMEZONE_SLOT
JS
:
:
PrivateValue
(
timeZone
)
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
}
namespace
js
:
:
temporal
{
class
MOZ_STACK_CLASS
TimeZoneValue
final
{
JSObject
*
object_
=
nullptr
;
public
:
TimeZoneValue
(
)
=
default
;
explicit
TimeZoneValue
(
BuiltinTimeZoneObject
*
timeZone
)
:
object_
(
timeZone
)
{
MOZ_ASSERT
(
isString
(
)
)
;
}
explicit
TimeZoneValue
(
JSObject
*
timeZone
)
:
object_
(
timeZone
)
{
MOZ_ASSERT
(
isObject
(
)
)
;
}
explicit
TimeZoneValue
(
const
JS
:
:
Value
&
value
)
:
object_
(
&
value
.
toObject
(
)
)
{
}
explicit
operator
bool
(
)
const
{
return
!
!
object_
;
}
bool
isString
(
)
const
{
return
object_
&
&
object_
-
>
is
<
BuiltinTimeZoneObject
>
(
)
;
}
bool
isObject
(
)
const
{
return
object_
&
&
!
isString
(
)
;
}
bool
isTimeZoneObjectMaybeBuiltin
(
)
const
{
return
object_
&
&
object_
-
>
is
<
BuiltinTimeZoneObject
>
(
)
;
}
auto
*
toString
(
)
const
{
MOZ_ASSERT
(
isString
(
)
)
;
return
&
object_
-
>
as
<
BuiltinTimeZoneObject
>
(
)
;
}
JSObject
*
toObject
(
)
const
{
MOZ_ASSERT
(
isObject
(
)
)
;
return
object_
;
}
auto
*
toTimeZoneObjectMaybeBuiltin
(
)
const
{
MOZ_ASSERT
(
isTimeZoneObjectMaybeBuiltin
(
)
)
;
return
&
object_
-
>
as
<
BuiltinTimeZoneObject
>
(
)
;
}
JS
:
:
Value
toValue
(
)
const
{
if
(
isString
(
)
)
{
return
JS
:
:
StringValue
(
toString
(
)
-
>
identifier
(
)
)
;
}
MOZ_ASSERT
(
object_
)
;
return
JS
:
:
ObjectValue
(
*
object_
)
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
MOZ_ASSERT
(
object_
)
;
return
JS
:
:
ObjectValue
(
*
object_
)
;
}
auto
address
(
)
{
return
&
object_
;
}
auto
address
(
)
const
{
return
&
object_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
enum
class
TimeZoneMethod
{
GetOffsetNanosecondsFor
GetPossibleInstantsFor
}
;
class
MOZ_STACK_CLASS
TimeZoneRecord
final
{
TimeZoneValue
receiver_
;
JSObject
*
getOffsetNanosecondsFor_
=
nullptr
;
JSObject
*
getPossibleInstantsFor_
=
nullptr
;
#
ifdef
DEBUG
mozilla
:
:
EnumSet
<
TimeZoneMethod
>
lookedUp_
{
}
;
#
endif
public
:
TimeZoneRecord
(
)
=
default
;
explicit
TimeZoneRecord
(
const
TimeZoneValue
&
receiver
)
:
receiver_
(
receiver
)
{
}
const
auto
&
receiver
(
)
const
{
return
receiver_
;
}
auto
*
getOffsetNanosecondsFor
(
)
const
{
return
getOffsetNanosecondsFor_
;
}
auto
*
getPossibleInstantsFor
(
)
const
{
return
getPossibleInstantsFor_
;
}
#
ifdef
DEBUG
auto
&
lookedUp
(
)
const
{
return
lookedUp_
;
}
auto
&
lookedUp
(
)
{
return
lookedUp_
;
}
#
endif
auto
*
receiverDoNotUse
(
)
const
{
return
&
receiver_
;
}
auto
*
getOffsetNanosecondsForDoNotUse
(
)
const
{
return
&
getOffsetNanosecondsFor_
;
}
auto
*
getOffsetNanosecondsForDoNotUse
(
)
{
return
&
getOffsetNanosecondsFor_
;
}
auto
*
getPossibleInstantsForDoNotUse
(
)
const
{
return
&
getPossibleInstantsFor_
;
}
auto
*
getPossibleInstantsForDoNotUse
(
)
{
return
&
getPossibleInstantsFor_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
struct
Instant
;
struct
ParsedTimeZone
;
struct
PlainDateTime
;
class
CalendarValue
;
class
InstantObject
;
class
PlainDateTimeObject
;
class
PlainDateTimeWithCalendar
;
enum
class
TemporalDisambiguation
;
bool
IsValidTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
JS
:
:
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
;
JSString
*
CanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSLinearString
*
>
timeZone
)
;
JSString
*
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
timeZone
)
;
BuiltinTimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
identifier
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
temporalTimeZoneLike
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
bool
ToTemporalTimeZone
(
JSContext
*
cx
JS
:
:
Handle
<
ParsedTimeZone
>
string
JS
:
:
MutableHandle
<
TimeZoneValue
>
result
)
;
JSString
*
ToTemporalTimeZoneIdentifier
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
)
;
bool
TimeZoneEquals
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
one
JS
:
:
Handle
<
JSString
*
>
two
bool
*
equals
)
;
bool
TimeZoneEquals
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
one
JS
:
:
Handle
<
TimeZoneValue
>
two
bool
*
equals
)
;
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
JS
:
:
Handle
<
CalendarValue
>
calendar
)
;
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
const
Instant
&
instant
JS
:
:
Handle
<
CalendarValue
>
calendar
int64_t
offsetNanoseconds
)
;
PlainDateTime
GetPlainDateTimeFor
(
const
Instant
&
instant
int64_t
offsetNanoseconds
)
;
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
bool
GetPlainDateTimeFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
;
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
PlainDateTimeObject
*
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
bool
GetInstantFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
;
JSString
*
FormatUTCOffsetNanoseconds
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
;
JSString
*
GetOffsetStringFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
)
;
JSString
*
GetOffsetStringFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
JS
:
:
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
;
using
InstantVector
=
JS
:
:
StackGCVector
<
Wrapped
<
InstantObject
*
>
>
;
bool
GetPossibleInstantsFor
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
JS
:
:
Handle
<
PlainDateTimeWithCalendar
>
dateTime
JS
:
:
MutableHandle
<
InstantVector
>
list
)
;
bool
DisambiguatePossibleInstants
(
JSContext
*
cx
JS
:
:
Handle
<
InstantVector
>
possibleInstants
JS
:
:
Handle
<
TimeZoneRecord
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
JS
:
:
MutableHandle
<
Wrapped
<
InstantObject
*
>
>
result
)
;
bool
GetNamedTimeZoneNextTransition
(
JSContext
*
cx
JS
:
:
Handle
<
BuiltinTimeZoneObject
*
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
bool
GetNamedTimeZonePreviousTransition
(
JSContext
*
cx
JS
:
:
Handle
<
BuiltinTimeZoneObject
*
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
;
bool
CreateTimeZoneMethodsRecord
(
JSContext
*
cx
JS
:
:
Handle
<
TimeZoneValue
>
timeZone
mozilla
:
:
EnumSet
<
TimeZoneMethod
>
methods
JS
:
:
MutableHandle
<
TimeZoneRecord
>
result
)
;
#
ifdef
DEBUG
inline
bool
TimeZoneMethodsRecordHasLookedUp
(
const
TimeZoneRecord
&
timeZone
TimeZoneMethod
methodName
)
{
return
timeZone
.
lookedUp
(
)
.
contains
(
methodName
)
;
}
#
endif
inline
bool
TimeZoneMethodsRecordIsBuiltin
(
const
TimeZoneRecord
&
timeZone
)
{
return
timeZone
.
receiver
(
)
.
isString
(
)
;
}
bool
WrapTimeZoneValueObject
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
timeZone
)
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
explicit
operator
bool
(
)
const
{
return
!
!
container
(
)
;
}
bool
isString
(
)
const
{
return
container
(
)
.
isString
(
)
;
}
bool
isObject
(
)
const
{
return
container
(
)
.
isObject
(
)
;
}
JS
:
:
Handle
<
temporal
:
:
BuiltinTimeZoneObject
*
>
toString
(
)
const
{
MOZ_ASSERT
(
container
(
)
.
isString
(
)
)
;
auto
h
=
JS
:
:
Handle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
return
h
.
template
as
<
temporal
:
:
BuiltinTimeZoneObject
>
(
)
;
}
JS
:
:
Handle
<
JSObject
*
>
toObject
(
)
const
{
MOZ_ASSERT
(
container
(
)
.
isObject
(
)
)
;
return
JS
:
:
Handle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
}
JS
:
:
Handle
<
temporal
:
:
BuiltinTimeZoneObject
*
>
toTimeZoneObjectMaybeBuiltin
(
)
const
{
MOZ_ASSERT
(
container
(
)
.
isTimeZoneObjectMaybeBuiltin
(
)
)
;
auto
h
=
JS
:
:
Handle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
return
h
.
template
as
<
temporal
:
:
BuiltinTimeZoneObject
>
(
)
;
}
JS
:
:
Value
toValue
(
)
const
{
return
container
(
)
.
toValue
(
)
;
}
JS
:
:
Value
toSlotValue
(
)
const
{
return
container
(
)
.
toSlotValue
(
)
;
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
:
public
WrappedPtrOperations
<
temporal
:
:
TimeZoneValue
Wrapper
>
{
auto
&
container
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
bool
wrap
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
container
(
)
.
isString
(
)
|
|
container
(
)
.
isObject
(
)
)
;
auto
mh
=
JS
:
:
MutableHandle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
address
(
)
)
;
return
temporal
:
:
WrapTimeZoneValueObject
(
cx
mh
)
;
}
}
;
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
TimeZoneRecord
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
JS
:
:
Handle
<
temporal
:
:
TimeZoneValue
>
receiver
(
)
const
{
return
JS
:
:
Handle
<
temporal
:
:
TimeZoneValue
>
:
:
fromMarkedLocation
(
container
(
)
.
receiverDoNotUse
(
)
)
;
}
JS
:
:
Handle
<
JSObject
*
>
getOffsetNanosecondsFor
(
)
const
{
return
JS
:
:
Handle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
getOffsetNanosecondsForDoNotUse
(
)
)
;
}
JS
:
:
Handle
<
JSObject
*
>
getPossibleInstantsFor
(
)
const
{
return
JS
:
:
Handle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
getPossibleInstantsForDoNotUse
(
)
)
;
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
temporal
:
:
TimeZoneRecord
Wrapper
>
:
public
WrappedPtrOperations
<
temporal
:
:
TimeZoneRecord
Wrapper
>
{
auto
&
container
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
JS
:
:
MutableHandle
<
JSObject
*
>
getOffsetNanosecondsFor
(
)
{
return
JS
:
:
MutableHandle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
getOffsetNanosecondsForDoNotUse
(
)
)
;
}
JS
:
:
MutableHandle
<
JSObject
*
>
getPossibleInstantsFor
(
)
{
return
JS
:
:
MutableHandle
<
JSObject
*
>
:
:
fromMarkedLocation
(
container
(
)
.
getPossibleInstantsForDoNotUse
(
)
)
;
}
}
;
}
#
endif
