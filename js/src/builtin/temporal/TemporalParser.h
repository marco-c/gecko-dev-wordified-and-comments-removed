#
ifndef
builtin_temporal_TemporalParser_h
#
define
builtin_temporal_TemporalParser_h
#
include
<
stdint
.
h
>
#
include
"
js
/
TypeDecls
.
h
"
class
JSLinearString
;
namespace
js
:
:
temporal
{
struct
PlainDate
;
struct
PlainDateTime
;
struct
PlainTime
;
bool
ParseTemporalInstantString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainDateTime
*
result
int64_t
*
offset
)
;
bool
ParseTemporalTimeZoneString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
JS
:
:
MutableHandle
<
JSString
*
>
timeZoneName
int64_t
*
offsetNanoseconds
)
;
bool
ParseTimeZoneOffsetString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
int64_t
*
result
)
;
JSLinearString
*
ParseTemporalCalendarString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
)
;
bool
ParseTemporalTimeString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainTime
*
result
JS
:
:
MutableHandle
<
JSString
*
>
calendar
)
;
bool
ParseTemporalDateString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainDate
*
result
JS
:
:
MutableHandle
<
JSString
*
>
calendar
)
;
bool
ParseTemporalMonthDayString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainDate
*
result
bool
*
hasYear
JS
:
:
MutableHandle
<
JSString
*
>
calendar
)
;
bool
ParseTemporalYearMonthString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainDate
*
result
JS
:
:
MutableHandle
<
JSString
*
>
calendar
)
;
bool
ParseTemporalDateTimeString
(
JSContext
*
cx
JS
:
:
Handle
<
JSString
*
>
str
PlainDateTime
*
result
JS
:
:
MutableHandle
<
JSString
*
>
calendar
)
;
}
#
endif
