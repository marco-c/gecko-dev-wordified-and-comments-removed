#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
<
initializer_list
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string_view
>
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Crash
.
h
"
namespace
js
:
:
temporal
{
enum
class
EraCode
{
Standard
Inverse
Meiji
Taisho
Showa
Heisei
Reiwa
}
;
namespace
eras
{
inline
constexpr
auto
Standard
=
{
EraCode
:
:
Standard
}
;
inline
constexpr
auto
StandardInverse
=
{
EraCode
:
:
Standard
EraCode
:
:
Inverse
}
;
inline
constexpr
auto
Japanese
=
{
EraCode
:
:
Standard
EraCode
:
:
Inverse
EraCode
:
:
Meiji
EraCode
:
:
Taisho
EraCode
:
:
Showa
EraCode
:
:
Heisei
EraCode
:
:
Reiwa
}
;
namespace
names
{
using
namespace
std
:
:
literals
;
inline
constexpr
auto
Empty
=
{
"
"
sv
}
;
inline
constexpr
auto
Coptic
=
{
"
coptic
"
sv
}
;
inline
constexpr
auto
CopticInverse
=
{
"
coptic
-
inverse
"
sv
}
;
inline
constexpr
auto
Ethiopian
=
{
"
ethiopic
"
sv
"
incar
"
sv
}
;
inline
constexpr
auto
EthiopianInverse
=
{
"
ethioaa
"
sv
"
ethiopic
-
amete
-
alem
"
sv
"
mundi
"
sv
}
;
inline
constexpr
auto
Gregorian
=
{
"
gregory
"
sv
"
ce
"
sv
"
ad
"
sv
}
;
inline
constexpr
auto
GregorianInverse
=
{
"
gregory
-
inverse
"
sv
"
bc
"
sv
"
bce
"
sv
}
;
inline
constexpr
auto
Japanese
=
{
"
japanese
"
sv
"
gregory
"
sv
"
ad
"
sv
"
ce
"
sv
}
;
inline
constexpr
auto
JapaneseInverse
=
{
"
japanese
-
inverse
"
sv
"
gregory
-
inverse
"
sv
"
bc
"
sv
"
bce
"
sv
}
;
inline
constexpr
auto
JapaneseMeiji
=
{
"
meiji
"
sv
}
;
inline
constexpr
auto
JapaneseTaisho
=
{
"
taisho
"
sv
}
;
inline
constexpr
auto
JapaneseShowa
=
{
"
showa
"
sv
}
;
inline
constexpr
auto
JapaneseHeisei
=
{
"
heisei
"
sv
}
;
inline
constexpr
auto
JapaneseReiwa
=
{
"
reiwa
"
sv
}
;
inline
constexpr
auto
ROC
=
{
"
roc
"
sv
"
minguo
"
sv
}
;
inline
constexpr
auto
ROCInverse
=
{
"
roc
-
inverse
"
sv
"
before
-
roc
"
sv
}
;
}
}
constexpr
auto
&
CalendarEras
(
CalendarId
id
)
{
switch
(
id
)
{
case
CalendarId
:
:
ISO8601
:
return
eras
:
:
Standard
;
#
if
defined
(
MOZ_ICU4X
)
case
CalendarId
:
:
Buddhist
:
case
CalendarId
:
:
Chinese
:
case
CalendarId
:
:
Dangi
:
case
CalendarId
:
:
EthiopianAmeteAlem
:
case
CalendarId
:
:
Hebrew
:
case
CalendarId
:
:
Indian
:
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
case
CalendarId
:
:
Persian
:
return
eras
:
:
Standard
;
case
CalendarId
:
:
Coptic
:
case
CalendarId
:
:
Ethiopian
:
case
CalendarId
:
:
Gregorian
:
case
CalendarId
:
:
ROC
:
return
eras
:
:
StandardInverse
;
case
CalendarId
:
:
Japanese
:
return
eras
:
:
Japanese
;
#
endif
}
JS_CONSTEXPR_CRASH
(
"
invalid
calendar
id
"
)
;
}
constexpr
bool
CalendarEraRelevant
(
CalendarId
calendar
)
{
return
CalendarEras
(
calendar
)
.
size
(
)
>
1
;
}
constexpr
auto
&
CalendarEraNames
(
CalendarId
calendar
EraCode
era
)
{
switch
(
calendar
)
{
case
CalendarId
:
:
ISO8601
:
return
eras
:
:
names
:
:
Empty
;
#
if
defined
(
MOZ_ICU4X
)
case
CalendarId
:
:
Buddhist
:
case
CalendarId
:
:
Chinese
:
case
CalendarId
:
:
Dangi
:
case
CalendarId
:
:
EthiopianAmeteAlem
:
case
CalendarId
:
:
Hebrew
:
case
CalendarId
:
:
Indian
:
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
case
CalendarId
:
:
Persian
:
return
eras
:
:
names
:
:
Empty
;
case
CalendarId
:
:
Coptic
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
eras
:
:
names
:
:
Coptic
:
eras
:
:
names
:
:
CopticInverse
;
}
case
CalendarId
:
:
Ethiopian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
eras
:
:
names
:
:
Ethiopian
:
eras
:
:
names
:
:
EthiopianInverse
;
}
case
CalendarId
:
:
Gregorian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
eras
:
:
names
:
:
Gregorian
:
eras
:
:
names
:
:
GregorianInverse
;
}
case
CalendarId
:
:
Japanese
:
{
switch
(
era
)
{
case
EraCode
:
:
Standard
:
return
eras
:
:
names
:
:
Japanese
;
case
EraCode
:
:
Inverse
:
return
eras
:
:
names
:
:
JapaneseInverse
;
case
EraCode
:
:
Meiji
:
return
eras
:
:
names
:
:
JapaneseMeiji
;
case
EraCode
:
:
Taisho
:
return
eras
:
:
names
:
:
JapaneseTaisho
;
case
EraCode
:
:
Showa
:
return
eras
:
:
names
:
:
JapaneseShowa
;
case
EraCode
:
:
Heisei
:
return
eras
:
:
names
:
:
JapaneseHeisei
;
case
EraCode
:
:
Reiwa
:
return
eras
:
:
names
:
:
JapaneseReiwa
;
}
break
;
}
case
CalendarId
:
:
ROC
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
eras
:
:
names
:
:
ROC
:
eras
:
:
names
:
:
ROCInverse
;
}
#
endif
}
JS_CONSTEXPR_CRASH
(
"
invalid
era
"
)
;
}
constexpr
auto
CalendarEraName
(
CalendarId
calendar
EraCode
era
)
{
auto
&
names
=
CalendarEraNames
(
calendar
era
)
;
MOZ_ASSERT
(
names
.
size
(
)
>
0
)
;
return
*
names
.
begin
(
)
;
}
constexpr
bool
CalendarEraStartsAtYearBoundary
(
CalendarId
id
)
{
switch
(
id
)
{
case
CalendarId
:
:
ISO8601
:
return
true
;
#
if
defined
(
MOZ_ICU4X
)
case
CalendarId
:
:
Buddhist
:
case
CalendarId
:
:
Chinese
:
case
CalendarId
:
:
Dangi
:
case
CalendarId
:
:
EthiopianAmeteAlem
:
case
CalendarId
:
:
Hebrew
:
case
CalendarId
:
:
Indian
:
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
case
CalendarId
:
:
Persian
:
return
true
;
case
CalendarId
:
:
Coptic
:
case
CalendarId
:
:
Ethiopian
:
case
CalendarId
:
:
Gregorian
:
case
CalendarId
:
:
ROC
:
return
true
;
case
CalendarId
:
:
Japanese
:
return
false
;
#
endif
}
JS_CONSTEXPR_CRASH
(
"
invalid
calendar
id
"
)
;
}
constexpr
bool
CalendarEraStartsAtYearBoundary
(
CalendarId
id
EraCode
era
)
{
MOZ_ASSERT_IF
(
id
!
=
CalendarId
:
:
Japanese
CalendarEraStartsAtYearBoundary
(
id
)
)
;
return
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
;
}
}
