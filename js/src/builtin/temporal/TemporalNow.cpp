#
include
"
builtin
/
temporal
/
TemporalNow
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
<
cstdlib
>
#
include
<
stdint
.
h
>
#
include
<
string_view
>
#
include
<
utility
>
#
include
"
jsdate
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
FormatBuffer
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
bool
SystemTimeZoneOffset
(
JSContext
*
cx
int32_t
*
offset
)
{
auto
rawOffset
=
DateTimeInfo
:
:
getRawOffsetMs
(
DateTimeInfo
:
:
forceUTC
(
cx
-
>
realm
(
)
)
)
;
if
(
rawOffset
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
)
;
return
false
;
}
*
offset
=
rawOffset
.
unwrap
(
)
;
return
true
;
}
static
JSLinearString
*
SystemTimeZoneIdentifier
(
JSContext
*
cx
)
{
intl
:
:
FormatBuffer
<
char16_t
intl
:
:
INITIAL_CHAR_BUFFER_SIZE
>
formatBuffer
(
cx
)
;
auto
result
=
DateTimeInfo
:
:
timeZoneId
(
DateTimeInfo
:
:
forceUTC
(
cx
-
>
realm
(
)
)
formatBuffer
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
Rooted
<
JSLinearString
*
>
timeZone
(
cx
formatBuffer
.
toString
(
cx
)
)
;
if
(
!
timeZone
)
{
return
nullptr
;
}
Rooted
<
JSAtom
*
>
validTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
validTimeZone
)
)
{
return
nullptr
;
}
if
(
validTimeZone
)
{
return
CanonicalizeTimeZoneName
(
cx
validTimeZone
)
;
}
int32_t
offset
;
if
(
!
SystemTimeZoneOffset
(
cx
&
offset
)
)
{
return
nullptr
;
}
constexpr
int32_t
msPerHour
=
60
*
60
*
1000
;
int32_t
offsetHours
=
std
:
:
abs
(
offset
/
msPerHour
)
;
int32_t
offsetHoursFraction
=
offset
%
msPerHour
;
if
(
offsetHoursFraction
=
=
0
&
&
offsetHours
<
24
)
{
constexpr
std
:
:
string_view
etcGMT
=
"
Etc
/
GMT
"
;
char
offsetString
[
etcGMT
.
length
(
)
+
3
]
;
size_t
n
=
etcGMT
.
copy
(
offsetString
etcGMT
.
length
(
)
)
;
offsetString
[
n
+
+
]
=
offset
<
0
?
'
+
'
:
'
-
'
;
if
(
offsetHours
>
=
10
)
{
offsetString
[
n
+
+
]
=
char
(
'
0
'
+
(
offsetHours
/
10
)
)
;
}
offsetString
[
n
+
+
]
=
char
(
'
0
'
+
(
offsetHours
%
10
)
)
;
MOZ_ASSERT
(
n
=
=
etcGMT
.
length
(
)
+
2
|
|
n
=
=
etcGMT
.
length
(
)
+
3
)
;
timeZone
=
NewStringCopyN
<
CanGC
>
(
cx
offsetString
n
)
;
if
(
!
timeZone
)
{
return
nullptr
;
}
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
validTimeZone
)
)
{
return
nullptr
;
}
if
(
validTimeZone
)
{
return
CanonicalizeTimeZoneName
(
cx
validTimeZone
)
;
}
}
return
cx
-
>
names
(
)
.
UTC
;
}
static
bool
SystemTimeZone
(
JSContext
*
cx
MutableHandle
<
TimeZoneValue
>
result
)
{
Rooted
<
JSLinearString
*
>
timeZoneIdentifier
(
cx
SystemTimeZoneIdentifier
(
cx
)
)
;
if
(
!
timeZoneIdentifier
)
{
return
false
;
}
auto
*
timeZone
=
CreateTemporalTimeZone
(
cx
timeZoneIdentifier
)
;
if
(
!
timeZone
)
{
return
false
;
}
result
.
set
(
TimeZoneValue
(
timeZone
)
)
;
return
true
;
}
static
bool
SystemUTCEpochNanoseconds
(
JSContext
*
cx
Instant
*
result
)
{
JS
:
:
ClippedTime
nowMillis
=
DateNow
(
cx
)
;
MOZ_ASSERT
(
nowMillis
.
isValid
(
)
)
;
MOZ_ASSERT
(
nowMillis
.
toDouble
(
)
>
=
js
:
:
StartOfTime
)
;
MOZ_ASSERT
(
nowMillis
.
toDouble
(
)
<
=
js
:
:
EndOfTime
)
;
*
result
=
Instant
:
:
fromMilliseconds
(
int64_t
(
nowMillis
.
toDouble
(
)
)
)
;
return
true
;
}
static
bool
SystemDateTime
(
JSContext
*
cx
Handle
<
Value
>
temporalTimeZoneLike
PlainDateTime
*
dateTime
)
{
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
if
(
temporalTimeZoneLike
.
isUndefined
(
)
)
{
if
(
!
SystemTimeZone
(
cx
&
timeZone
)
)
{
return
false
;
}
}
else
{
if
(
!
ToTemporalTimeZone
(
cx
temporalTimeZoneLike
&
timeZone
)
)
{
return
false
;
}
}
Instant
instant
;
if
(
!
SystemUTCEpochNanoseconds
(
cx
&
instant
)
)
{
return
false
;
}
return
GetISODateTimeFor
(
cx
timeZone
instant
dateTime
)
;
}
static
bool
Temporal_Now_timeZoneId
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
auto
*
result
=
SystemTimeZoneIdentifier
(
cx
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
result
)
;
return
true
;
}
static
bool
Temporal_Now_instant
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Instant
instant
;
if
(
!
SystemUTCEpochNanoseconds
(
cx
&
instant
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalInstant
(
cx
instant
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Temporal_Now_plainDateTimeISO
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
PlainDateTime
dateTime
;
if
(
!
SystemDateTime
(
cx
args
.
get
(
0
)
&
dateTime
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
auto
*
result
=
CreateTemporalDateTime
(
cx
dateTime
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Temporal_Now_zonedDateTimeISO
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
if
(
!
args
.
hasDefined
(
0
)
)
{
if
(
!
SystemTimeZone
(
cx
&
timeZone
)
)
{
return
false
;
}
}
else
{
if
(
!
ToTemporalTimeZone
(
cx
args
[
0
]
&
timeZone
)
)
{
return
false
;
}
}
Instant
instant
;
if
(
!
SystemUTCEpochNanoseconds
(
cx
&
instant
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
instant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Temporal_Now_plainDateISO
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
PlainDateTime
dateTime
;
if
(
!
SystemDateTime
(
cx
args
.
get
(
0
)
&
dateTime
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
auto
*
result
=
CreateTemporalDate
(
cx
dateTime
.
date
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Temporal_Now_plainTimeISO
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
PlainDateTime
dateTime
;
if
(
!
SystemDateTime
(
cx
args
.
get
(
0
)
&
dateTime
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalTime
(
cx
dateTime
.
time
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
const
JSClass
TemporalNowObject
:
:
class_
=
{
"
Temporal
.
Now
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_TemporalNow
)
JS_NULL_CLASS_OPS
&
TemporalNowObject
:
:
classSpec_
}
;
static
const
JSFunctionSpec
TemporalNow_methods
[
]
=
{
JS_FN
(
"
timeZoneId
"
Temporal_Now_timeZoneId
0
0
)
JS_FN
(
"
instant
"
Temporal_Now_instant
0
0
)
JS_FN
(
"
plainDateTimeISO
"
Temporal_Now_plainDateTimeISO
0
0
)
JS_FN
(
"
zonedDateTimeISO
"
Temporal_Now_zonedDateTimeISO
0
0
)
JS_FN
(
"
plainDateISO
"
Temporal_Now_plainDateISO
0
0
)
JS_FN
(
"
plainTimeISO
"
Temporal_Now_plainTimeISO
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
TemporalNow_properties
[
]
=
{
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Now
"
JSPROP_READONLY
)
JS_PS_END
}
;
static
JSObject
*
CreateTemporalNowObject
(
JSContext
*
cx
JSProtoKey
key
)
{
Rooted
<
JSObject
*
>
proto
(
cx
&
cx
-
>
global
(
)
-
>
getObjectPrototype
(
)
)
;
return
NewTenuredObjectWithGivenProto
(
cx
&
TemporalNowObject
:
:
class_
proto
)
;
}
const
ClassSpec
TemporalNowObject
:
:
classSpec_
=
{
CreateTemporalNowObject
nullptr
TemporalNow_methods
TemporalNow_properties
nullptr
nullptr
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
