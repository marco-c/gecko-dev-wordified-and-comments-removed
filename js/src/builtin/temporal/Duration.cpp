#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
Int128
.
h
"
#
include
"
builtin
/
temporal
/
Int96
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsDuration
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
DurationObject
>
(
)
;
}
#
ifdef
DEBUG
static
bool
IsIntegerOrInfinity
(
double
d
)
{
return
IsInteger
(
d
)
|
|
std
:
:
isinf
(
d
)
;
}
static
bool
IsIntegerOrInfinityDuration
(
const
Duration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
return
IsIntegerOrInfinity
(
years
)
&
&
IsIntegerOrInfinity
(
months
)
&
&
IsIntegerOrInfinity
(
weeks
)
&
&
IsIntegerOrInfinity
(
days
)
&
&
IsIntegerOrInfinity
(
hours
)
&
&
IsIntegerOrInfinity
(
minutes
)
&
&
IsIntegerOrInfinity
(
seconds
)
&
&
IsIntegerOrInfinity
(
milliseconds
)
&
&
IsIntegerOrInfinity
(
microseconds
)
&
&
IsIntegerOrInfinity
(
nanoseconds
)
;
}
static
bool
IsIntegerDuration
(
const
Duration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
return
IsInteger
(
years
)
&
&
IsInteger
(
months
)
&
&
IsInteger
(
weeks
)
&
&
IsInteger
(
days
)
&
&
IsInteger
(
hours
)
&
&
IsInteger
(
minutes
)
&
&
IsInteger
(
seconds
)
&
&
IsInteger
(
milliseconds
)
&
&
IsInteger
(
microseconds
)
&
&
IsInteger
(
nanoseconds
)
;
}
#
endif
static
constexpr
bool
IsSafeInteger
(
int64_t
x
)
{
constexpr
int64_t
MaxSafeInteger
=
int64_t
(
1
)
<
<
53
;
constexpr
int64_t
MinSafeInteger
=
-
MaxSafeInteger
;
return
MinSafeInteger
<
x
&
&
x
<
MaxSafeInteger
;
}
int32_t
js
:
:
temporal
:
:
DurationSign
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
v
<
0
)
{
return
-
1
;
}
if
(
v
>
0
)
{
return
1
;
}
}
return
0
;
}
int32_t
js
:
:
temporal
:
:
DurationSign
(
const
DateDuration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
]
=
duration
;
for
(
auto
v
:
{
years
months
weeks
days
}
)
{
if
(
v
<
0
)
{
return
-
1
;
}
if
(
v
>
0
)
{
return
1
;
}
}
return
0
;
}
static
NormalizedTimeDuration
NormalizeNanoseconds
(
const
Int96
&
nanoseconds
)
{
auto
[
seconds
nanos
]
=
nanoseconds
/
ToNanoseconds
(
TemporalUnit
:
:
Second
)
;
return
{
seconds
nanos
}
;
}
static
mozilla
:
:
Maybe
<
NormalizedTimeDuration
>
NormalizeNanoseconds
(
double
nanoseconds
)
{
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
if
(
auto
int96
=
Int96
:
:
fromInteger
(
nanoseconds
)
)
{
constexpr
auto
limit
=
Int96
{
uint64_t
(
1
)
<
<
53
}
*
ToNanoseconds
(
TemporalUnit
:
:
Second
)
;
if
(
int96
-
>
abs
(
)
<
limit
)
{
return
mozilla
:
:
Some
(
NormalizeNanoseconds
(
*
int96
)
)
;
}
}
return
mozilla
:
:
Nothing
(
)
;
}
static
NormalizedTimeDuration
NormalizeMicroseconds
(
const
Int96
&
microseconds
)
{
auto
[
seconds
micros
]
=
microseconds
/
ToMicroseconds
(
TemporalUnit
:
:
Second
)
;
int32_t
nanos
=
micros
*
int32_t
(
ToNanoseconds
(
TemporalUnit
:
:
Microsecond
)
)
;
return
{
seconds
nanos
}
;
}
static
mozilla
:
:
Maybe
<
NormalizedTimeDuration
>
NormalizeMicroseconds
(
double
microseconds
)
{
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
if
(
auto
int96
=
Int96
:
:
fromInteger
(
microseconds
)
)
{
constexpr
auto
limit
=
Int96
{
uint64_t
(
1
)
<
<
53
}
*
ToMicroseconds
(
TemporalUnit
:
:
Second
)
;
if
(
int96
-
>
abs
(
)
<
limit
)
{
return
mozilla
:
:
Some
(
NormalizeMicroseconds
(
*
int96
)
)
;
}
}
return
mozilla
:
:
Nothing
(
)
;
}
static
mozilla
:
:
Maybe
<
NormalizedTimeDuration
>
NormalizeSeconds
(
const
Duration
&
duration
)
{
do
{
auto
nanoseconds
=
NormalizeNanoseconds
(
duration
.
nanoseconds
)
;
if
(
!
nanoseconds
)
{
break
;
}
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
*
nanoseconds
)
)
;
auto
microseconds
=
NormalizeMicroseconds
(
duration
.
microseconds
)
;
if
(
!
microseconds
)
{
break
;
}
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
*
microseconds
)
)
;
int64_t
milliseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
milliseconds
&
milliseconds
)
)
{
break
;
}
int64_t
seconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
seconds
&
seconds
)
)
{
break
;
}
int64_t
minutes
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
minutes
&
minutes
)
)
{
break
;
}
int64_t
hours
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
hours
&
hours
)
)
{
break
;
}
int64_t
days
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
days
&
days
)
)
{
break
;
}
mozilla
:
:
CheckedInt64
millis
=
days
;
millis
*
=
24
;
millis
+
=
hours
;
millis
*
=
60
;
millis
+
=
minutes
;
millis
*
=
60
;
millis
+
=
seconds
;
millis
*
=
1000
;
millis
+
=
milliseconds
;
if
(
!
millis
.
isValid
(
)
)
{
break
;
}
auto
milli
=
NormalizedTimeDuration
:
:
fromMilliseconds
(
millis
.
value
(
)
)
;
if
(
!
IsValidNormalizedTimeDuration
(
milli
)
)
{
break
;
}
auto
result
=
milli
+
*
microseconds
+
*
nanoseconds
;
if
(
!
IsValidNormalizedTimeDuration
(
result
)
)
{
break
;
}
return
mozilla
:
:
Some
(
result
)
;
}
while
(
false
)
;
return
mozilla
:
:
Nothing
(
)
;
}
static
mozilla
:
:
Maybe
<
NormalizedTimeDuration
>
NormalizeDays
(
int64_t
days
)
{
do
{
auto
millis
=
mozilla
:
:
CheckedInt64
(
days
)
*
ToMilliseconds
(
TemporalUnit
:
:
Day
)
;
if
(
!
millis
.
isValid
(
)
)
{
break
;
}
auto
result
=
NormalizedTimeDuration
:
:
fromMilliseconds
(
millis
.
value
(
)
)
;
if
(
!
IsValidNormalizedTimeDuration
(
result
)
)
{
break
;
}
return
mozilla
:
:
Some
(
result
)
;
}
while
(
false
)
;
return
mozilla
:
:
Nothing
(
)
;
}
static
NormalizedTimeDuration
NormalizeTimeDuration
(
double
hours
double
minutes
double
seconds
double
milliseconds
double
microseconds
double
nanoseconds
)
{
MOZ_ASSERT
(
IsInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
mozilla
:
:
CheckedInt64
millis
=
int64_t
(
hours
)
;
millis
*
=
60
;
millis
+
=
int64_t
(
minutes
)
;
millis
*
=
60
;
millis
+
=
int64_t
(
seconds
)
;
millis
*
=
1000
;
millis
+
=
int64_t
(
milliseconds
)
;
MOZ_ASSERT
(
millis
.
isValid
(
)
)
;
auto
normalized
=
NormalizedTimeDuration
:
:
fromMilliseconds
(
millis
.
value
(
)
)
;
auto
micros
=
Int96
:
:
fromInteger
(
microseconds
)
;
MOZ_ASSERT
(
micros
)
;
normalized
+
=
NormalizeMicroseconds
(
*
micros
)
;
auto
nanos
=
Int96
:
:
fromInteger
(
nanoseconds
)
;
MOZ_ASSERT
(
nanos
)
;
normalized
+
=
NormalizeNanoseconds
(
*
nanos
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
normalized
)
)
;
return
normalized
;
}
NormalizedTimeDuration
js
:
:
temporal
:
:
NormalizeTimeDuration
(
int32_t
hours
int32_t
minutes
int32_t
seconds
int32_t
milliseconds
int32_t
microseconds
int32_t
nanoseconds
)
{
mozilla
:
:
CheckedInt64
millis
=
int64_t
(
hours
)
;
millis
*
=
60
;
millis
+
=
int64_t
(
minutes
)
;
millis
*
=
60
;
millis
+
=
int64_t
(
seconds
)
;
millis
*
=
1000
;
millis
+
=
int64_t
(
milliseconds
)
;
MOZ_ASSERT
(
millis
.
isValid
(
)
)
;
auto
normalized
=
NormalizedTimeDuration
:
:
fromMilliseconds
(
millis
.
value
(
)
)
;
normalized
+
=
NormalizeMicroseconds
(
Int96
{
microseconds
}
)
;
normalized
+
=
NormalizeNanoseconds
(
Int96
{
nanoseconds
}
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
normalized
)
)
;
return
normalized
;
}
NormalizedTimeDuration
js
:
:
temporal
:
:
NormalizeTimeDuration
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
:
:
NormalizeTimeDuration
(
duration
.
hours
duration
.
minutes
duration
.
seconds
duration
.
milliseconds
duration
.
microseconds
duration
.
nanoseconds
)
;
}
static
bool
AddNormalizedTimeDuration
(
JSContext
*
cx
const
NormalizedTimeDuration
&
one
const
NormalizedTimeDuration
&
two
NormalizedTimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
two
)
)
;
auto
sum
=
one
+
two
;
if
(
!
IsValidNormalizedTimeDuration
(
sum
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
sum
;
return
true
;
}
static
bool
SubtractNormalizedTimeDuration
(
JSContext
*
cx
const
NormalizedTimeDuration
&
one
const
NormalizedTimeDuration
&
two
NormalizedTimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
two
)
)
;
auto
sum
=
one
-
two
;
if
(
!
IsValidNormalizedTimeDuration
(
sum
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
sum
;
return
true
;
}
bool
js
:
:
temporal
:
:
Add24HourDaysToNormalizedTimeDuration
(
JSContext
*
cx
const
NormalizedTimeDuration
&
d
int64_t
days
NormalizedTimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
d
)
)
;
auto
normalizedDays
=
NormalizeDays
(
days
)
;
if
(
!
normalizedDays
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
auto
sum
=
d
+
*
normalizedDays
;
if
(
!
IsValidNormalizedTimeDuration
(
sum
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
sum
;
return
true
;
}
bool
js
:
:
temporal
:
:
CombineDateAndNormalizedTimeDuration
(
JSContext
*
cx
const
DateDuration
&
date
const
NormalizedTimeDuration
&
time
NormalizedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
date
)
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
time
)
)
;
int32_t
dateSign
=
DurationSign
(
date
)
;
int32_t
timeSign
=
NormalizedTimeDurationSign
(
time
)
;
if
(
(
dateSign
*
timeSign
)
<
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_COMBINE_INVALID_SIGN
)
;
return
false
;
}
*
result
=
{
date
time
}
;
return
true
;
}
NormalizedTimeDuration
js
:
:
temporal
:
:
NormalizedTimeDurationFromEpochNanosecondsDifference
(
const
Instant
&
one
const
Instant
&
two
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
one
)
)
;
MOZ_ASSERT
(
IsValidEpochInstant
(
two
)
)
;
auto
result
=
one
-
two
;
MOZ_ASSERT
(
IsValidInstantSpan
(
result
)
)
;
return
result
.
to
<
NormalizedTimeDuration
>
(
)
;
}
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
int32_t
sign
=
DurationSign
(
duration
)
;
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
!
std
:
:
isfinite
(
v
)
)
{
return
false
;
}
if
(
v
<
0
&
&
sign
>
0
)
{
return
false
;
}
if
(
v
>
0
&
&
sign
<
0
)
{
return
false
;
}
}
if
(
std
:
:
abs
(
years
)
>
=
double
(
int64_t
(
1
)
<
<
32
)
)
{
return
false
;
}
if
(
std
:
:
abs
(
months
)
>
=
double
(
int64_t
(
1
)
<
<
32
)
)
{
return
false
;
}
if
(
std
:
:
abs
(
weeks
)
>
=
double
(
int64_t
(
1
)
<
<
32
)
)
{
return
false
;
}
if
(
!
NormalizeSeconds
(
duration
)
)
{
return
false
;
}
return
true
;
}
#
ifdef
DEBUG
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
DateDuration
&
duration
)
{
return
IsValidDuration
(
duration
.
toDuration
(
)
)
;
}
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
NormalizedDuration
&
duration
)
{
return
IsValidDuration
(
duration
.
date
)
&
&
IsValidNormalizedTimeDuration
(
duration
.
time
)
&
&
(
DurationSign
(
duration
.
date
)
*
NormalizedTimeDurationSign
(
duration
.
time
)
>
=
0
)
;
}
#
endif
static
bool
ThrowInvalidDurationPart
(
JSContext
*
cx
double
value
const
char
*
name
unsigned
errorNumber
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
value
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
errorNumber
name
numStr
)
;
return
false
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
int32_t
sign
=
DurationSign
(
duration
)
;
auto
throwIfInvalid
=
[
&
]
(
double
v
const
char
*
name
)
{
if
(
!
std
:
:
isfinite
(
v
)
)
{
return
ThrowInvalidDurationPart
(
cx
v
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
if
(
(
v
<
0
&
&
sign
>
0
)
|
|
(
v
>
0
&
&
sign
<
0
)
)
{
return
ThrowInvalidDurationPart
(
cx
v
name
JSMSG_TEMPORAL_DURATION_INVALID_SIGN
)
;
}
return
true
;
}
;
auto
throwIfTooLarge
=
[
&
]
(
double
v
const
char
*
name
)
{
if
(
std
:
:
abs
(
v
)
>
=
double
(
int64_t
(
1
)
<
<
32
)
)
{
return
ThrowInvalidDurationPart
(
cx
v
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
return
true
;
}
;
if
(
!
throwIfInvalid
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
days
"
days
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
hours
"
hours
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
minutes
"
minutes
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
seconds
"
seconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
milliseconds
"
milliseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
microseconds
"
microseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
nanoseconds
"
nanoseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
NormalizeSeconds
(
duration
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidDuration
(
JSContext
*
cx
const
DateDuration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
]
=
duration
;
int32_t
sign
=
DurationSign
(
duration
)
;
auto
throwIfInvalid
=
[
&
]
(
int64_t
v
const
char
*
name
)
{
if
(
(
v
<
0
&
&
sign
>
0
)
|
|
(
v
>
0
&
&
sign
<
0
)
)
{
return
ThrowInvalidDurationPart
(
cx
double
(
v
)
name
JSMSG_TEMPORAL_DURATION_INVALID_SIGN
)
;
}
return
true
;
}
;
auto
throwIfTooLarge
=
[
&
]
(
int64_t
v
const
char
*
name
)
{
if
(
std
:
:
abs
(
v
)
>
=
(
int64_t
(
1
)
<
<
32
)
)
{
return
ThrowInvalidDurationPart
(
cx
double
(
v
)
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
return
true
;
}
;
if
(
!
throwIfInvalid
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
days
"
days
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfTooLarge
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
std
:
:
abs
(
days
)
>
(
(
int64_t
(
1
)
<
<
53
)
/
86400
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
true
;
}
static
TemporalUnit
DefaultTemporalLargestUnit
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerDuration
(
duration
)
)
;
if
(
duration
.
years
!
=
0
)
{
return
TemporalUnit
:
:
Year
;
}
if
(
duration
.
months
!
=
0
)
{
return
TemporalUnit
:
:
Month
;
}
if
(
duration
.
weeks
!
=
0
)
{
return
TemporalUnit
:
:
Week
;
}
if
(
duration
.
days
!
=
0
)
{
return
TemporalUnit
:
:
Day
;
}
if
(
duration
.
hours
!
=
0
)
{
return
TemporalUnit
:
:
Hour
;
}
if
(
duration
.
minutes
!
=
0
)
{
return
TemporalUnit
:
:
Minute
;
}
if
(
duration
.
seconds
!
=
0
)
{
return
TemporalUnit
:
:
Second
;
}
if
(
duration
.
milliseconds
!
=
0
)
{
return
TemporalUnit
:
:
Millisecond
;
}
if
(
duration
.
microseconds
!
=
0
)
{
return
TemporalUnit
:
:
Microsecond
;
}
return
TemporalUnit
:
:
Nanosecond
;
}
static
DurationObject
*
CreateTemporalDuration
(
JSContext
*
cx
const
CallArgs
&
args
const
Duration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Duration
&
proto
)
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithClassProto
<
DurationObject
>
(
cx
proto
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
return
object
;
}
DurationObject
*
js
:
:
temporal
:
:
CreateTemporalDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
MOZ_ASSERT
(
IsInteger
(
years
)
)
;
MOZ_ASSERT
(
IsInteger
(
months
)
)
;
MOZ_ASSERT
(
IsInteger
(
weeks
)
)
;
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
IsInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
auto
*
object
=
NewBuiltinClassInstance
<
DurationObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
return
object
;
}
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
const
char
*
name
Handle
<
Value
>
argument
double
*
num
)
{
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
if
(
!
js
:
:
IsInteger
(
d
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
name
)
;
return
false
;
}
*
num
=
d
;
return
true
;
}
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
Handle
<
PropertyName
*
>
name
Handle
<
Value
>
argument
double
*
result
)
{
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
if
(
!
js
:
:
IsInteger
(
d
)
)
{
if
(
auto
nameStr
=
js
:
:
QuoteString
(
cx
name
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
nameStr
.
get
(
)
)
;
}
return
false
;
}
*
result
=
d
;
return
true
;
}
static
bool
ToTemporalPartialDurationRecord
(
JSContext
*
cx
Handle
<
JSObject
*
>
temporalDurationLike
Duration
*
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
bool
any
=
false
;
auto
getDurationProperty
=
[
&
]
(
Handle
<
PropertyName
*
>
name
double
*
num
)
{
if
(
!
GetProperty
(
cx
temporalDurationLike
temporalDurationLike
name
&
value
)
)
{
return
false
;
}
if
(
!
value
.
isUndefined
(
)
)
{
any
=
true
;
if
(
!
ToIntegerIfIntegral
(
cx
name
value
num
)
)
{
return
false
;
}
}
return
true
;
}
;
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
days
&
result
-
>
days
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
hours
&
result
-
>
hours
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
microseconds
&
result
-
>
microseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
milliseconds
&
result
-
>
milliseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
minutes
&
result
-
>
minutes
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
months
&
result
-
>
months
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
nanoseconds
&
result
-
>
nanoseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
seconds
&
result
-
>
seconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
weeks
&
result
-
>
weeks
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
years
&
result
-
>
years
)
)
{
return
false
;
}
if
(
!
any
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ToTemporalDurationRecord
(
JSContext
*
cx
Handle
<
Value
>
temporalDurationLike
Duration
*
result
)
{
if
(
!
temporalDurationLike
.
isObject
(
)
)
{
if
(
!
temporalDurationLike
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
temporalDurationLike
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
string
(
cx
temporalDurationLike
.
toString
(
)
)
;
return
ParseTemporalDurationString
(
cx
string
result
)
;
}
Rooted
<
JSObject
*
>
durationLike
(
cx
&
temporalDurationLike
.
toObject
(
)
)
;
if
(
auto
*
duration
=
durationLike
-
>
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
*
result
=
ToDuration
(
duration
)
;
return
true
;
}
Duration
duration
=
{
}
;
if
(
!
ToTemporalPartialDurationRecord
(
cx
durationLike
&
duration
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
false
;
}
*
result
=
duration
;
return
true
;
}
Wrapped
<
DurationObject
*
>
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
if
(
item
.
isObject
(
)
)
{
JSObject
*
itemObj
=
&
item
.
toObject
(
)
;
if
(
itemObj
-
>
canUnwrapAs
<
DurationObject
>
(
)
)
{
return
itemObj
;
}
}
Duration
result
;
if
(
!
ToTemporalDurationRecord
(
cx
item
&
result
)
)
{
return
nullptr
;
}
return
CreateTemporalDuration
(
cx
result
)
;
}
bool
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
Duration
*
result
)
{
auto
obj
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToDuration
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
int32_t
js
:
:
temporal
:
:
DaysUntil
(
const
PlainDate
&
earlier
const
PlainDate
&
later
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
earlier
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
later
)
)
;
int32_t
epochDaysEarlier
=
MakeDay
(
earlier
)
;
MOZ_ASSERT
(
MinEpochDay
<
=
epochDaysEarlier
&
&
epochDaysEarlier
<
=
MaxEpochDay
)
;
int32_t
epochDaysLater
=
MakeDay
(
later
)
;
MOZ_ASSERT
(
MinEpochDay
<
=
epochDaysLater
&
&
epochDaysLater
<
=
MaxEpochDay
)
;
return
epochDaysLater
-
epochDaysEarlier
;
}
static
bool
MoveRelativeDate
(
JSContext
*
cx
Handle
<
CalendarRecord
>
calendar
Handle
<
Wrapped
<
PlainDateObject
*
>
>
relativeTo
const
DateDuration
&
duration
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
relativeToResult
int32_t
*
daysResult
)
{
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
relativeToDate
=
ToPlainDate
(
unwrappedRelativeTo
)
;
auto
newDate
=
AddDate
(
cx
calendar
relativeTo
duration
)
;
if
(
!
newDate
)
{
return
false
;
}
auto
later
=
ToPlainDate
(
&
newDate
.
unwrap
(
)
)
;
relativeToResult
.
set
(
newDate
)
;
*
daysResult
=
DaysUntil
(
relativeToDate
later
)
;
MOZ_ASSERT
(
std
:
:
abs
(
*
daysResult
)
<
=
MaxEpochDaysDuration
)
;
return
true
;
}
static
bool
MoveRelativeZonedDateTime
(
JSContext
*
cx
Handle
<
ZonedDateTime
>
zonedDateTime
Handle
<
CalendarRecord
>
calendar
Handle
<
TimeZoneRecord
>
timeZone
const
DateDuration
&
duration
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
MutableHandle
<
ZonedDateTime
>
result
)
{
MOZ_ASSERT
(
TimeZoneMethodsRecordHasLookedUp
(
timeZone
TimeZoneMethod
:
:
GetOffsetNanosecondsFor
)
)
;
MOZ_ASSERT
(
TimeZoneMethodsRecordHasLookedUp
(
timeZone
TimeZoneMethod
:
:
GetPossibleInstantsFor
)
)
;
Instant
intermediateNs
;
if
(
precalculatedPlainDateTime
)
{
if
(
!
AddZonedDateTime
(
cx
zonedDateTime
.
instant
(
)
timeZone
calendar
duration
*
precalculatedPlainDateTime
&
intermediateNs
)
)
{
return
false
;
}
}
else
{
if
(
!
AddZonedDateTime
(
cx
zonedDateTime
.
instant
(
)
timeZone
calendar
duration
&
intermediateNs
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
result
.
set
(
ZonedDateTime
{
intermediateNs
zonedDateTime
.
timeZone
(
)
zonedDateTime
.
calendar
(
)
}
)
;
return
true
;
}
static
NormalizedTimeAndDays
NormalizedTimeDurationToDays
(
const
NormalizedTimeDuration
&
duration
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
auto
[
seconds
nanoseconds
]
=
duration
;
if
(
seconds
<
0
&
&
nanoseconds
>
0
)
{
seconds
+
=
1
;
nanoseconds
-
=
1
'
000
'
000
'
000
;
}
int64_t
days
=
seconds
/
ToSeconds
(
TemporalUnit
:
:
Day
)
;
seconds
=
seconds
%
ToSeconds
(
TemporalUnit
:
:
Day
)
;
int64_t
time
=
seconds
*
ToNanoseconds
(
TemporalUnit
:
:
Second
)
+
nanoseconds
;
constexpr
int64_t
dayLength
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
MOZ_ASSERT
(
std
:
:
abs
(
time
)
<
dayLength
)
;
return
{
days
time
dayLength
}
;
}
static
TimeDuration
CreateTimeDurationRecord
(
int64_t
days
int64_t
hours
int64_t
minutes
int64_t
seconds
int64_t
milliseconds
int64_t
microseconds
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
0
0
0
double
(
days
)
double
(
hours
)
double
(
minutes
)
double
(
seconds
)
double
(
milliseconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
days
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsSafeInteger
(
nanoseconds
)
)
;
return
{
days
hours
minutes
seconds
milliseconds
double
(
microseconds
)
double
(
nanoseconds
)
}
;
}
static
TimeDuration
CreateTimeDurationRecord
(
int64_t
milliseconds
const
Int128
&
microseconds
const
Int128
&
nanoseconds
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
0
0
0
0
0
0
0
double
(
milliseconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
)
)
;
return
{
0
0
0
0
milliseconds
double
(
microseconds
)
double
(
nanoseconds
)
}
;
}
TimeDuration
js
:
:
temporal
:
:
BalanceTimeDuration
(
const
NormalizedTimeDuration
&
duration
TemporalUnit
largestUnit
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
MOZ_ASSERT
(
largestUnit
<
=
TemporalUnit
:
:
Second
"
fallible
fractional
seconds
units
"
)
;
auto
[
seconds
nanoseconds
]
=
duration
;
if
(
seconds
<
0
&
&
nanoseconds
>
0
)
{
seconds
+
=
1
;
nanoseconds
-
=
ToNanoseconds
(
TemporalUnit
:
:
Second
)
;
}
int64_t
days
=
0
;
int64_t
hours
=
0
;
int64_t
minutes
=
0
;
int64_t
milliseconds
=
0
;
int64_t
microseconds
=
0
;
switch
(
largestUnit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
milliseconds
)
<
=
999
)
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
hours
=
minutes
/
60
;
minutes
=
minutes
%
60
;
days
=
hours
/
24
;
hours
=
hours
%
24
;
break
;
}
case
TemporalUnit
:
:
Hour
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
milliseconds
)
<
=
999
)
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
hours
=
minutes
/
60
;
minutes
=
minutes
%
60
;
break
;
}
case
TemporalUnit
:
:
Minute
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
milliseconds
)
<
=
999
)
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
break
;
}
case
TemporalUnit
:
:
Second
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
milliseconds
)
<
=
999
)
;
break
;
}
case
TemporalUnit
:
:
Millisecond
:
case
TemporalUnit
:
:
Microsecond
:
case
TemporalUnit
:
:
Nanosecond
:
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
return
CreateTimeDurationRecord
(
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
)
;
}
bool
js
:
:
temporal
:
:
BalanceTimeDuration
(
JSContext
*
cx
const
NormalizedTimeDuration
&
duration
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
auto
[
seconds
nanoseconds
]
=
duration
;
if
(
seconds
<
0
&
&
nanoseconds
>
0
)
{
seconds
+
=
1
;
nanoseconds
-
=
ToNanoseconds
(
TemporalUnit
:
:
Second
)
;
}
switch
(
largestUnit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
case
TemporalUnit
:
:
Hour
:
case
TemporalUnit
:
:
Minute
:
case
TemporalUnit
:
:
Second
:
*
result
=
BalanceTimeDuration
(
duration
largestUnit
)
;
return
true
;
case
TemporalUnit
:
:
Millisecond
:
{
constexpr
auto
limit
=
(
int64_t
(
1
)
<
<
53
)
*
ToMilliseconds
(
TemporalUnit
:
:
Second
)
;
constexpr
auto
max
=
int64_t
(
0x7cff
'
ffff
'
ffff
'
fdff
)
;
static_assert
(
double
(
max
)
<
double
(
limit
)
)
;
static_assert
(
double
(
max
+
1
)
>
=
double
(
limit
)
)
;
static_assert
(
(
NormalizedTimeDuration
:
:
max
(
)
.
seconds
+
1
)
*
ToMilliseconds
(
TemporalUnit
:
:
Second
)
<
=
INT64_MAX
"
total
number
duration
milliseconds
fits
into
int64
"
)
;
int64_t
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
int64_t
milliseconds
=
microseconds
/
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
milliseconds
)
<
=
999
)
;
microseconds
=
microseconds
%
1000
;
auto
millis
=
(
seconds
*
ToMilliseconds
(
TemporalUnit
:
:
Second
)
)
+
milliseconds
;
if
(
std
:
:
abs
(
millis
)
>
max
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
CreateTimeDurationRecord
(
millis
Int128
{
microseconds
}
Int128
{
nanoseconds
}
)
;
return
true
;
}
case
TemporalUnit
:
:
Microsecond
:
{
constexpr
auto
limit
=
Uint128
{
int64_t
(
1
)
<
<
53
}
*
Uint128
{
ToMicroseconds
(
TemporalUnit
:
:
Second
)
}
;
constexpr
auto
max
=
(
Uint128
{
0x1e8
}
<
<
64
)
+
Uint128
{
0x47ff
'
ffff
'
fff7
'
ffff
}
;
static_assert
(
max
<
limit
)
;
MOZ_ASSERT
(
double
(
max
)
<
double
(
limit
)
)
;
MOZ_ASSERT
(
double
(
max
+
Uint128
{
1
}
)
>
=
double
(
limit
)
)
;
int64_t
microseconds
=
nanoseconds
/
1000
;
MOZ_ASSERT
(
std
:
:
abs
(
microseconds
)
<
=
999
'
999
)
;
nanoseconds
=
nanoseconds
%
1000
;
auto
micros
=
(
Int128
{
seconds
}
*
Int128
{
ToMicroseconds
(
TemporalUnit
:
:
Second
)
}
)
+
Int128
{
microseconds
}
;
if
(
micros
.
abs
(
)
>
max
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
CreateTimeDurationRecord
(
0
micros
Int128
{
nanoseconds
}
)
;
return
true
;
}
case
TemporalUnit
:
:
Nanosecond
:
{
constexpr
auto
limit
=
Uint128
{
int64_t
(
1
)
<
<
53
}
*
Uint128
{
ToNanoseconds
(
TemporalUnit
:
:
Second
)
}
;
constexpr
auto
max
=
(
Uint128
{
0x77359
}
<
<
64
)
+
Uint128
{
0x3fff
'
ffff
'
dfff
'
ffff
}
;
static_assert
(
max
<
limit
)
;
MOZ_ASSERT
(
double
(
max
)
<
double
(
limit
)
)
;
MOZ_ASSERT
(
double
(
max
+
Uint128
{
1
}
)
>
=
double
(
limit
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
=
999
'
999
'
999
)
;
auto
nanos
=
(
Int128
{
seconds
}
*
Int128
{
ToNanoseconds
(
TemporalUnit
:
:
Second
)
}
)
+
Int128
{
nanoseconds
}
;
if
(
nanos
.
abs
(
)
>
max
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
CreateTimeDurationRecord
(
0
Int128
{
}
nanos
)
;
return
true
;
}
case
TemporalUnit
:
:
Auto
:
break
;
}
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
static
bool
BalanceTimeDurationRelative
(
JSContext
*
cx
const
NormalizedDuration
&
duration
TemporalUnit
largestUnit
Handle
<
ZonedDateTime
>
relativeTo
Handle
<
TimeZoneRecord
>
timeZone
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
const
auto
&
startNs
=
relativeTo
.
instant
(
)
;
const
auto
&
startInstant
=
startNs
;
auto
intermediateNs
=
startNs
;
PlainDateTime
startDateTime
;
if
(
duration
.
date
.
days
!
=
0
)
{
if
(
!
precalculatedPlainDateTime
)
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startInstant
&
startDateTime
)
)
{
return
false
;
}
precalculatedPlainDateTime
=
mozilla
:
:
SomeRef
<
const
PlainDateTime
>
(
startDateTime
)
;
}
Rooted
<
CalendarValue
>
isoCalendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
if
(
!
AddDaysToZonedDateTime
(
cx
startInstant
*
precalculatedPlainDateTime
timeZone
isoCalendar
duration
.
date
.
days
&
intermediateNs
)
)
{
return
false
;
}
}
Instant
endNs
;
if
(
!
AddInstant
(
cx
intermediateNs
duration
.
time
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
auto
normalized
=
NormalizedTimeDurationFromEpochNanosecondsDifference
(
endNs
startInstant
)
;
if
(
normalized
=
=
NormalizedTimeDuration
{
}
)
{
*
result
=
{
}
;
return
true
;
}
int64_t
days
=
0
;
if
(
TemporalUnit
:
:
Year
<
=
largestUnit
&
&
largestUnit
<
=
TemporalUnit
:
:
Day
)
{
if
(
!
precalculatedPlainDateTime
)
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startInstant
&
startDateTime
)
)
{
return
false
;
}
precalculatedPlainDateTime
=
mozilla
:
:
SomeRef
<
const
PlainDateTime
>
(
startDateTime
)
;
}
NormalizedTimeAndDays
timeAndDays
;
if
(
!
NormalizedTimeDurationToDays
(
cx
normalized
relativeTo
timeZone
*
precalculatedPlainDateTime
&
timeAndDays
)
)
{
return
false
;
}
days
=
timeAndDays
.
days
;
normalized
=
NormalizedTimeDuration
:
:
fromNanoseconds
(
timeAndDays
.
time
)
;
MOZ_ASSERT_IF
(
days
>
0
normalized
>
=
NormalizedTimeDuration
{
}
)
;
MOZ_ASSERT_IF
(
days
<
0
normalized
<
=
NormalizedTimeDuration
{
}
)
;
largestUnit
=
TemporalUnit
:
:
Hour
;
}
TimeDuration
balanceResult
;
if
(
!
BalanceTimeDuration
(
cx
normalized
largestUnit
&
balanceResult
)
)
{
return
false
;
}
*
result
=
{
days
balanceResult
.
hours
balanceResult
.
minutes
balanceResult
.
seconds
balanceResult
.
milliseconds
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
result
-
>
toDuration
(
)
)
)
;
return
true
;
}
static
DateDuration
CreateDateDurationRecord
(
int64_t
years
int64_t
months
int64_t
weeks
int64_t
days
)
{
MOZ_ASSERT
(
IsValidDuration
(
Duration
{
double
(
years
)
double
(
months
)
double
(
weeks
)
double
(
days
)
}
)
)
;
return
{
years
months
weeks
days
}
;
}
static
bool
CreateDateDurationRecord
(
JSContext
*
cx
int64_t
years
int64_t
months
int64_t
weeks
int64_t
days
DateDuration
*
result
)
{
auto
duration
=
DateDuration
{
years
months
weeks
days
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
false
;
}
*
result
=
duration
;
return
true
;
}
static
bool
UnbalanceDateDurationRelativeHasEffect
(
const
DateDuration
&
duration
TemporalUnit
largestUnit
)
{
MOZ_ASSERT
(
largestUnit
!
=
TemporalUnit
:
:
Auto
)
;
return
(
largestUnit
>
TemporalUnit
:
:
Year
&
&
duration
.
years
!
=
0
)
|
|
(
largestUnit
>
TemporalUnit
:
:
Month
&
&
duration
.
months
!
=
0
)
|
|
(
largestUnit
>
TemporalUnit
:
:
Week
&
&
duration
.
weeks
!
=
0
)
;
}
static
bool
UnbalanceDateDurationRelative
(
JSContext
*
cx
const
DateDuration
&
duration
TemporalUnit
largestUnit
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
auto
[
years
months
weeks
days
]
=
duration
;
if
(
!
UnbalanceDateDurationRelativeHasEffect
(
duration
largestUnit
)
)
{
*
result
=
duration
;
return
true
;
}
MOZ_ASSERT
(
largestUnit
!
=
TemporalUnit
:
:
Year
)
;
MOZ_ASSERT
(
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateAdd
)
)
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
MOZ_ASSERT
(
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateUntil
)
)
;
auto
yearsDuration
=
DateDuration
{
years
}
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
later
(
cx
CalendarDateAdd
(
cx
calendar
plainRelativeTo
yearsDuration
)
)
;
if
(
!
later
)
{
return
false
;
}
DateDuration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
plainRelativeTo
later
TemporalUnit
:
:
Month
&
untilResult
)
)
{
return
false
;
}
int64_t
yearsInMonths
=
untilResult
.
months
;
return
CreateDateDurationRecord
(
cx
0
months
+
yearsInMonths
weeks
days
result
)
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
{
auto
yearsMonthsDuration
=
DateDuration
{
years
months
}
;
auto
later
=
CalendarDateAdd
(
cx
calendar
plainRelativeTo
yearsMonthsDuration
)
;
if
(
!
later
)
{
return
false
;
}
auto
laterDate
=
ToPlainDate
(
&
later
.
unwrap
(
)
)
;
auto
*
unwrappedRelativeTo
=
plainRelativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
relativeToDate
=
ToPlainDate
(
unwrappedRelativeTo
)
;
int32_t
yearsMonthsInDays
=
DaysUntil
(
relativeToDate
laterDate
)
;
return
CreateDateDurationRecord
(
cx
0
0
weeks
days
+
yearsMonthsInDays
result
)
;
}
auto
yearsMonthsWeeksDuration
=
DateDuration
{
years
months
weeks
}
;
auto
later
=
CalendarDateAdd
(
cx
calendar
plainRelativeTo
yearsMonthsWeeksDuration
)
;
if
(
!
later
)
{
return
false
;
}
auto
laterDate
=
ToPlainDate
(
&
later
.
unwrap
(
)
)
;
auto
*
unwrappedRelativeTo
=
plainRelativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
relativeToDate
=
ToPlainDate
(
unwrappedRelativeTo
)
;
int32_t
yearsMonthsWeeksInDay
=
DaysUntil
(
relativeToDate
laterDate
)
;
return
CreateDateDurationRecord
(
cx
0
0
0
days
+
yearsMonthsWeeksInDay
result
)
;
}
static
bool
UnbalanceDateDurationRelative
(
JSContext
*
cx
const
DateDuration
&
duration
TemporalUnit
largestUnit
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
if
(
!
UnbalanceDateDurationRelativeHasEffect
(
duration
largestUnit
)
)
{
*
result
=
duration
;
return
true
;
}
MOZ_ASSERT
(
largestUnit
!
=
TemporalUnit
:
:
Year
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
calendar
"
)
;
return
false
;
}
static
bool
BalanceDateDurationRelative
(
JSContext
*
cx
const
DateDuration
&
duration
TemporalUnit
largestUnit
TemporalUnit
smallestUnit
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
largestUnit
<
=
smallestUnit
)
;
auto
[
years
months
weeks
days
]
=
duration
;
if
(
largestUnit
>
TemporalUnit
:
:
Week
|
|
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
)
)
{
*
result
=
duration
;
return
true
;
}
if
(
!
plainRelativeTo
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
MOZ_ASSERT
(
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateAdd
)
)
;
MOZ_ASSERT
(
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateUntil
)
)
;
auto
untilAddedDate
=
[
&
]
(
const
DateDuration
&
duration
DateDuration
*
untilResult
)
{
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
later
(
cx
AddDate
(
cx
calendar
plainRelativeTo
duration
)
)
;
if
(
!
later
)
{
return
false
;
}
return
CalendarDateUntil
(
cx
calendar
plainRelativeTo
later
largestUnit
untilResult
)
;
}
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
)
{
if
(
smallestUnit
=
=
TemporalUnit
:
:
Week
)
{
MOZ_ASSERT
(
days
=
=
0
)
;
auto
yearsMonthsDuration
=
DateDuration
{
years
months
}
;
DateDuration
untilResult
;
if
(
!
untilAddedDate
(
yearsMonthsDuration
&
untilResult
)
)
{
return
false
;
}
*
result
=
CreateDateDurationRecord
(
untilResult
.
years
untilResult
.
months
weeks
0
)
;
return
true
;
}
const
auto
&
yearsMonthsWeeksDaysDuration
=
duration
;
DateDuration
untilResult
;
if
(
!
untilAddedDate
(
yearsMonthsWeeksDaysDuration
&
untilResult
)
)
{
return
false
;
}
*
result
=
CreateDateDurationRecord
(
untilResult
.
years
untilResult
.
months
untilResult
.
weeks
untilResult
.
days
)
;
return
true
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
MOZ_ASSERT
(
years
=
=
0
)
;
if
(
smallestUnit
=
=
TemporalUnit
:
:
Week
)
{
MOZ_ASSERT
(
days
=
=
0
)
;
*
result
=
CreateDateDurationRecord
(
0
months
weeks
0
)
;
return
true
;
}
const
auto
&
monthsWeeksDaysDuration
=
duration
;
DateDuration
untilResult
;
if
(
!
untilAddedDate
(
monthsWeeksDaysDuration
&
untilResult
)
)
{
return
false
;
}
*
result
=
CreateDateDurationRecord
(
0
untilResult
.
months
untilResult
.
weeks
untilResult
.
days
)
;
return
true
;
}
MOZ_ASSERT
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
;
MOZ_ASSERT
(
years
=
=
0
)
;
MOZ_ASSERT
(
months
=
=
0
)
;
const
auto
&
weeksDaysDuration
=
duration
;
DateDuration
untilResult
;
if
(
!
untilAddedDate
(
weeksDaysDuration
&
untilResult
)
)
{
return
false
;
}
*
result
=
CreateDateDurationRecord
(
0
0
untilResult
.
weeks
untilResult
.
days
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
BalanceDateDurationRelative
(
JSContext
*
cx
const
DateDuration
&
duration
TemporalUnit
largestUnit
TemporalUnit
smallestUnit
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
DateDuration
*
result
)
{
MOZ_ASSERT
(
plainRelativeTo
)
;
MOZ_ASSERT
(
calendar
.
receiver
(
)
)
;
return
:
:
BalanceDateDurationRelative
(
cx
duration
largestUnit
smallestUnit
plainRelativeTo
calendar
result
)
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
auto
normalized1
=
NormalizeTimeDuration
(
one
)
;
auto
normalized2
=
NormalizeTimeDuration
(
two
)
;
if
(
largestUnit
<
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
NormalizedTimeDuration
normalized
;
if
(
!
AddNormalizedTimeDuration
(
cx
normalized1
normalized2
&
normalized
)
)
{
return
false
;
}
int64_t
days1
=
mozilla
:
:
AssertedCast
<
int64_t
>
(
one
.
days
)
;
int64_t
days2
=
mozilla
:
:
AssertedCast
<
int64_t
>
(
two
.
days
)
;
auto
totalDays
=
mozilla
:
:
CheckedInt64
(
days1
)
+
days2
;
MOZ_ASSERT
(
totalDays
.
isValid
(
)
"
adding
two
duration
days
can
'
t
overflow
"
)
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
normalized
totalDays
.
value
(
)
&
normalized
)
)
{
return
false
;
}
TimeDuration
balanced
;
if
(
!
temporal
:
:
BalanceTimeDuration
(
cx
normalized
largestUnit
&
balanced
)
)
{
return
false
;
}
*
result
=
balanced
.
toDuration
(
)
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
auto
normalized1
=
NormalizeTimeDuration
(
one
)
;
auto
normalized2
=
NormalizeTimeDuration
(
two
)
;
auto
dateDuration1
=
one
.
toDateDuration
(
)
;
auto
dateDuration2
=
two
.
toDateDuration
(
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
intermediate
(
cx
AddDate
(
cx
calendar
plainRelativeTo
dateDuration1
)
)
;
if
(
!
intermediate
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
end
(
cx
AddDate
(
cx
calendar
intermediate
dateDuration2
)
)
;
if
(
!
end
)
{
return
false
;
}
auto
dateLargestUnit
=
std
:
:
min
(
TemporalUnit
:
:
Day
largestUnit
)
;
DateDuration
dateDifference
;
if
(
!
DifferenceDate
(
cx
calendar
plainRelativeTo
end
dateLargestUnit
&
dateDifference
)
)
{
return
false
;
}
NormalizedTimeDuration
normalized1WithDays
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
normalized1
dateDifference
.
days
&
normalized1WithDays
)
)
{
return
false
;
}
NormalizedTimeDuration
normalized
;
if
(
!
AddNormalizedTimeDuration
(
cx
normalized1WithDays
normalized2
&
normalized
)
)
{
return
false
;
}
TimeDuration
balanced
;
if
(
!
temporal
:
:
BalanceTimeDuration
(
cx
normalized
largestUnit
&
balanced
)
)
{
return
false
;
}
*
result
=
{
double
(
dateDifference
.
years
)
double
(
dateDifference
.
months
)
double
(
dateDifference
.
weeks
)
double
(
balanced
.
days
)
double
(
balanced
.
hours
)
double
(
balanced
.
minutes
)
double
(
balanced
.
seconds
)
double
(
balanced
.
milliseconds
)
balanced
.
microseconds
balanced
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
*
result
)
)
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
TimeZoneRecord
>
timeZone
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
Duration
*
result
)
{
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
auto
normalized1
=
NormalizeTimeDuration
(
one
)
;
auto
normalized2
=
NormalizeTimeDuration
(
two
)
;
bool
startDateTimeNeeded
=
largestUnit
<
=
TemporalUnit
:
:
Day
;
if
(
!
startDateTimeNeeded
)
{
Instant
intermediateNs
;
if
(
!
AddInstant
(
cx
zonedRelativeTo
.
instant
(
)
normalized1
&
intermediateNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
Instant
endNs
;
if
(
!
AddInstant
(
cx
intermediateNs
normalized2
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
auto
normalized
=
NormalizedTimeDurationFromEpochNanosecondsDifference
(
endNs
zonedRelativeTo
.
instant
(
)
)
;
TimeDuration
balanced
;
if
(
!
BalanceTimeDuration
(
cx
normalized
largestUnit
&
balanced
)
)
{
return
false
;
}
*
result
=
balanced
.
toDuration
(
)
;
return
true
;
}
PlainDateTime
startDateTime
;
if
(
!
precalculatedPlainDateTime
)
{
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
zonedRelativeTo
.
instant
(
)
&
startDateTime
)
)
{
return
false
;
}
}
else
{
startDateTime
=
*
precalculatedPlainDateTime
;
}
auto
norm1
=
CreateNormalizedDurationRecord
(
one
.
toDateDuration
(
)
normalized1
)
;
Instant
intermediateNs
;
if
(
!
AddZonedDateTime
(
cx
zonedRelativeTo
.
instant
(
)
timeZone
calendar
norm1
startDateTime
&
intermediateNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
auto
norm2
=
CreateNormalizedDurationRecord
(
two
.
toDateDuration
(
)
normalized2
)
;
Instant
endNs
;
if
(
!
AddZonedDateTime
(
cx
intermediateNs
timeZone
calendar
norm2
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
NormalizedDuration
difference
;
if
(
!
DifferenceZonedDateTime
(
cx
zonedRelativeTo
.
instant
(
)
endNs
timeZone
calendar
largestUnit
startDateTime
&
difference
)
)
{
return
false
;
}
auto
balanced
=
BalanceTimeDuration
(
difference
.
time
TemporalUnit
:
:
Hour
)
;
*
result
=
{
double
(
difference
.
date
.
years
)
double
(
difference
.
date
.
months
)
double
(
difference
.
date
.
weeks
)
double
(
difference
.
date
.
days
)
double
(
balanced
.
hours
)
double
(
balanced
.
minutes
)
double
(
balanced
.
seconds
)
double
(
balanced
.
milliseconds
)
balanced
.
microseconds
balanced
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
*
result
)
)
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
TimeZoneRecord
>
timeZone
Duration
*
result
)
{
return
AddDuration
(
cx
one
two
zonedRelativeTo
calendar
timeZone
mozilla
:
:
Nothing
(
)
result
)
;
}
static
bool
AdjustRoundedDurationDays
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
TimeZoneRecord
>
timeZone
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
NormalizedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
if
(
(
TemporalUnit
:
:
Year
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Day
)
|
|
(
unit
=
=
TemporalUnit
:
:
Nanosecond
&
&
increment
=
=
Increment
{
1
}
)
)
{
*
result
=
duration
;
return
true
;
}
MOZ_ASSERT
(
increment
<
MaximumTemporalDurationRoundingIncrement
(
unit
)
)
;
MOZ_ASSERT
(
precalculatedPlainDateTime
)
;
int32_t
direction
=
NormalizedTimeDurationSign
(
duration
.
time
)
;
Instant
dayStart
;
if
(
!
AddZonedDateTime
(
cx
zonedRelativeTo
.
instant
(
)
timeZone
calendar
duration
.
date
*
precalculatedPlainDateTime
&
dayStart
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
dayStart
)
)
;
PlainDateTime
dayStartDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
dayStart
&
dayStartDateTime
)
)
{
return
false
;
}
Instant
dayEnd
;
if
(
!
AddDaysToZonedDateTime
(
cx
dayStart
dayStartDateTime
timeZone
zonedRelativeTo
.
calendar
(
)
direction
&
dayEnd
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
dayEnd
)
)
;
auto
dayLengthNs
=
NormalizedTimeDurationFromEpochNanosecondsDifference
(
dayEnd
dayStart
)
;
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLengthNs
.
to
<
InstantSpan
>
(
)
)
)
;
NormalizedTimeDuration
oneDayLess
;
if
(
!
SubtractNormalizedTimeDuration
(
cx
duration
.
time
dayLengthNs
&
oneDayLess
)
)
{
return
false
;
}
int32_t
oneDayLessSign
=
NormalizedTimeDurationSign
(
oneDayLess
)
;
if
(
(
direction
>
0
&
&
oneDayLessSign
<
0
)
|
|
(
direction
<
0
&
&
oneDayLessSign
>
0
)
)
{
*
result
=
duration
;
return
true
;
}
Duration
adjustedDateDuration
;
if
(
!
AddDuration
(
cx
duration
.
date
.
toDuration
(
)
{
0
0
0
double
(
direction
)
}
zonedRelativeTo
calendar
timeZone
precalculatedPlainDateTime
&
adjustedDateDuration
)
)
{
return
false
;
}
NormalizedTimeDuration
roundedTime
;
if
(
!
RoundDuration
(
cx
oneDayLess
increment
unit
roundingMode
&
roundedTime
)
)
{
return
false
;
}
return
CombineDateAndNormalizedTimeDuration
(
cx
adjustedDateDuration
.
toDateDuration
(
)
roundedTime
result
)
;
}
bool
js
:
:
temporal
:
:
AdjustRoundedDurationDays
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
TimeZoneRecord
>
timeZone
const
PlainDateTime
&
precalculatedPlainDateTime
NormalizedDuration
*
result
)
{
return
:
:
AdjustRoundedDurationDays
(
cx
duration
increment
unit
roundingMode
zonedRelativeTo
calendar
timeZone
mozilla
:
:
SomeRef
(
precalculatedPlainDateTime
)
result
)
;
}
static
bool
NumberToStringBuilder
(
JSContext
*
cx
double
num
JSStringBuilder
&
sb
)
{
MOZ_ASSERT
(
IsInteger
(
num
)
)
;
MOZ_ASSERT
(
num
>
=
0
)
;
MOZ_ASSERT
(
num
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
ToCStringBuf
cbuf
;
size_t
length
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
num
&
length
)
;
return
sb
.
append
(
numStr
length
)
;
}
static
Duration
AbsoluteDuration
(
const
Duration
&
duration
)
{
return
{
std
:
:
abs
(
duration
.
years
)
std
:
:
abs
(
duration
.
months
)
std
:
:
abs
(
duration
.
weeks
)
std
:
:
abs
(
duration
.
days
)
std
:
:
abs
(
duration
.
hours
)
std
:
:
abs
(
duration
.
minutes
)
std
:
:
abs
(
duration
.
seconds
)
std
:
:
abs
(
duration
.
milliseconds
)
std
:
:
abs
(
duration
.
microseconds
)
std
:
:
abs
(
duration
.
nanoseconds
)
}
;
}
[
[
nodiscard
]
]
static
bool
FormatFractionalSeconds
(
JSStringBuilder
&
result
int32_t
subSecondNanoseconds
Precision
precision
)
{
MOZ_ASSERT
(
0
<
=
subSecondNanoseconds
&
&
subSecondNanoseconds
<
1
'
000
'
000
'
000
)
;
MOZ_ASSERT
(
precision
!
=
Precision
:
:
Minute
(
)
)
;
if
(
precision
=
=
Precision
:
:
Auto
(
)
)
{
if
(
subSecondNanoseconds
=
=
0
)
{
return
true
;
}
if
(
!
result
.
append
(
'
.
'
)
)
{
return
false
;
}
int32_t
k
=
100
'
000
'
000
;
do
{
if
(
!
result
.
append
(
char
(
'
0
'
+
(
subSecondNanoseconds
/
k
)
)
)
)
{
return
false
;
}
subSecondNanoseconds
%
=
k
;
k
/
=
10
;
}
while
(
subSecondNanoseconds
)
;
}
else
{
uint8_t
p
=
precision
.
value
(
)
;
if
(
p
=
=
0
)
{
return
true
;
}
if
(
!
result
.
append
(
'
.
'
)
)
{
return
false
;
}
int32_t
k
=
100
'
000
'
000
;
for
(
uint8_t
i
=
0
;
i
<
precision
.
value
(
)
;
i
+
+
)
{
if
(
!
result
.
append
(
char
(
'
0
'
+
(
subSecondNanoseconds
/
k
)
)
)
)
{
return
false
;
}
subSecondNanoseconds
%
=
k
;
k
/
=
10
;
}
}
return
true
;
}
static
JSString
*
TemporalDurationToString
(
JSContext
*
cx
const
Duration
&
duration
Precision
precision
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
precision
!
=
Precision
:
:
Minute
(
)
)
;
if
(
duration
=
=
Duration
{
}
&
&
(
precision
=
=
Precision
:
:
Auto
(
)
|
|
precision
.
value
(
)
=
=
0
)
)
{
return
NewStringCopyZ
<
CanGC
>
(
cx
"
PT0S
"
)
;
}
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
AbsoluteDuration
(
duration
)
;
MOZ_ASSERT
(
years
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
months
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
weeks
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
days
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
hours
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
minutes
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
MOZ_ASSERT
(
seconds
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
;
auto
secondsDuration
=
NormalizeTimeDuration
(
0
.
0
0
.
0
seconds
milliseconds
microseconds
nanoseconds
)
;
int32_t
sign
=
DurationSign
(
duration
)
;
JSStringBuilder
result
(
cx
)
;
if
(
sign
<
0
)
{
if
(
!
result
.
append
(
'
-
'
)
)
{
return
nullptr
;
}
}
if
(
!
result
.
append
(
'
P
'
)
)
{
return
nullptr
;
}
if
(
years
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
years
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
Y
'
)
)
{
return
nullptr
;
}
}
if
(
months
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
months
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
M
'
)
)
{
return
nullptr
;
}
}
if
(
weeks
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
weeks
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
W
'
)
)
{
return
nullptr
;
}
}
if
(
days
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
days
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
D
'
)
)
{
return
nullptr
;
}
}
bool
zeroMinutesAndHigher
=
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
&
&
hours
=
=
0
&
&
minutes
=
=
0
;
bool
hasSecondsPart
=
(
secondsDuration
!
=
NormalizedTimeDuration
{
}
)
|
|
zeroMinutesAndHigher
|
|
precision
!
=
Precision
:
:
Auto
(
)
;
if
(
hours
!
=
0
|
|
minutes
!
=
0
|
|
hasSecondsPart
)
{
if
(
!
result
.
append
(
'
T
'
)
)
{
return
nullptr
;
}
if
(
hours
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
hours
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
H
'
)
)
{
return
nullptr
;
}
}
if
(
minutes
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
minutes
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
M
'
)
)
{
return
nullptr
;
}
}
if
(
hasSecondsPart
)
{
if
(
!
NumberToStringBuilder
(
cx
double
(
secondsDuration
.
seconds
)
result
)
)
{
return
nullptr
;
}
if
(
!
FormatFractionalSeconds
(
result
secondsDuration
.
nanoseconds
precision
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
S
'
)
)
{
return
nullptr
;
}
}
}
return
result
.
finishString
(
)
;
}
static
bool
GetTemporalRelativeToOption
(
JSContext
*
cx
Handle
<
JSObject
*
>
options
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
MutableHandle
<
ZonedDateTime
>
zonedRelativeTo
MutableHandle
<
TimeZoneRecord
>
timeZoneRecord
)
{
Rooted
<
Value
>
value
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
relativeTo
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
plainRelativeTo
.
set
(
nullptr
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
}
)
;
timeZoneRecord
.
set
(
TimeZoneRecord
{
}
)
;
return
true
;
}
auto
offsetBehaviour
=
OffsetBehaviour
:
:
Option
;
auto
matchBehaviour
=
MatchBehaviour
:
:
MatchExactly
;
PlainDateTime
dateTime
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
int64_t
offsetNs
;
if
(
value
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
obj
(
cx
&
value
.
toObject
(
)
)
;
if
(
auto
*
zonedDateTime
=
obj
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
auto
instant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
Rooted
<
TimeZoneRecord
>
timeZoneRec
(
cx
)
;
if
(
!
CreateTimeZoneMethodsRecord
(
cx
timeZone
{
TimeZoneMethod
:
:
GetOffsetNanosecondsFor
TimeZoneMethod
:
:
GetPossibleInstantsFor
}
&
timeZoneRec
)
)
{
return
false
;
}
plainRelativeTo
.
set
(
nullptr
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
instant
timeZone
calendar
}
)
;
timeZoneRecord
.
set
(
timeZoneRec
)
;
return
true
;
}
if
(
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
plainRelativeTo
.
set
(
obj
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
}
)
;
timeZoneRecord
.
set
(
TimeZoneRecord
{
}
)
;
return
true
;
}
if
(
auto
*
dateTime
=
obj
-
>
maybeUnwrapIf
<
PlainDateTimeObject
>
(
)
)
{
auto
plainDateTime
=
ToPlainDate
(
dateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
auto
*
plainDate
=
CreateTemporalDate
(
cx
plainDateTime
calendar
)
;
if
(
!
plainDate
)
{
return
false
;
}
plainRelativeTo
.
set
(
plainDate
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
}
)
;
timeZoneRecord
.
set
(
TimeZoneRecord
{
}
)
;
return
true
;
}
if
(
!
GetTemporalCalendarWithISODefault
(
cx
obj
&
calendar
)
)
{
return
false
;
}
Rooted
<
CalendarRecord
>
calendarRec
(
cx
)
;
if
(
!
CreateCalendarMethodsRecord
(
cx
calendar
{
CalendarMethod
:
:
DateFromFields
CalendarMethod
:
:
Fields
}
&
calendarRec
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareCalendarFields
(
cx
calendarRec
obj
{
CalendarField
:
:
Day
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
{
TemporalField
:
:
Hour
TemporalField
:
:
Microsecond
TemporalField
:
:
Millisecond
TemporalField
:
:
Minute
TemporalField
:
:
Nanosecond
TemporalField
:
:
Offset
TemporalField
:
:
Second
TemporalField
:
:
TimeZone
}
)
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
dateOptions
(
cx
NewPlainObjectWithProto
(
cx
nullptr
)
)
;
if
(
!
dateOptions
)
{
return
false
;
}
Rooted
<
Value
>
overflow
(
cx
StringValue
(
cx
-
>
names
(
)
.
constrain
)
)
;
if
(
!
DefineDataProperty
(
cx
dateOptions
cx
-
>
names
(
)
.
overflow
overflow
)
)
{
return
false
;
}
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendarRec
fields
dateOptions
&
dateTime
)
)
{
return
false
;
}
Rooted
<
Value
>
offset
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
offset
&
offset
)
)
{
return
false
;
}
Rooted
<
Value
>
timeZoneValue
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
timeZone
&
timeZoneValue
)
)
{
return
false
;
}
if
(
!
timeZoneValue
.
isUndefined
(
)
)
{
if
(
!
ToTemporalTimeZone
(
cx
timeZoneValue
&
timeZone
)
)
{
return
false
;
}
}
if
(
offset
.
isUndefined
(
)
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
if
(
timeZone
)
{
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
MOZ_ASSERT
(
!
offset
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
offset
.
isString
(
)
)
;
Rooted
<
JSString
*
>
offsetString
(
cx
offset
.
toString
(
)
)
;
if
(
!
offsetString
)
{
return
false
;
}
if
(
!
ParseDateTimeUTCOffset
(
cx
offsetString
&
offsetNs
)
)
{
return
false
;
}
}
else
{
offsetNs
=
0
;
}
}
}
else
{
if
(
!
value
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
value
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
string
(
cx
value
.
toString
(
)
)
;
bool
isUTC
;
bool
hasOffset
;
int64_t
timeZoneOffset
;
Rooted
<
ParsedTimeZone
>
timeZoneAnnotation
(
cx
)
;
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalRelativeToString
(
cx
string
&
dateTime
&
isUTC
&
hasOffset
&
timeZoneOffset
&
timeZoneAnnotation
&
calendarString
)
)
{
return
false
;
}
if
(
timeZoneAnnotation
)
{
if
(
!
ToTemporalTimeZone
(
cx
timeZoneAnnotation
&
timeZone
)
)
{
return
false
;
}
if
(
isUTC
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Exact
;
}
else
if
(
!
hasOffset
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
matchBehaviour
=
MatchBehaviour
:
:
MatchMinutes
;
}
else
{
MOZ_ASSERT
(
!
timeZone
)
;
}
if
(
calendarString
)
{
if
(
!
ToBuiltinCalendar
(
cx
calendarString
&
calendar
)
)
{
return
false
;
}
}
else
{
calendar
.
set
(
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
}
if
(
timeZone
)
{
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
MOZ_ASSERT
(
hasOffset
)
;
offsetNs
=
timeZoneOffset
;
}
else
{
offsetNs
=
0
;
}
}
}
if
(
!
timeZone
)
{
auto
*
plainDate
=
CreateTemporalDate
(
cx
dateTime
.
date
calendar
)
;
if
(
!
plainDate
)
{
return
false
;
}
plainRelativeTo
.
set
(
plainDate
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
}
)
;
timeZoneRecord
.
set
(
TimeZoneRecord
{
}
)
;
return
true
;
}
Rooted
<
TimeZoneRecord
>
timeZoneRec
(
cx
)
;
if
(
!
CreateTimeZoneMethodsRecord
(
cx
timeZone
{
TimeZoneMethod
:
:
GetOffsetNanosecondsFor
TimeZoneMethod
:
:
GetPossibleInstantsFor
}
&
timeZoneRec
)
)
{
return
false
;
}
Instant
epochNanoseconds
;
if
(
!
InterpretISODateTimeOffset
(
cx
dateTime
offsetBehaviour
offsetNs
timeZoneRec
TemporalDisambiguation
:
:
Compatible
TemporalOffset
:
:
Reject
matchBehaviour
&
epochNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
epochNanoseconds
)
)
;
plainRelativeTo
.
set
(
nullptr
)
;
zonedRelativeTo
.
set
(
ZonedDateTime
{
epochNanoseconds
timeZone
calendar
}
)
;
timeZoneRecord
.
set
(
timeZoneRec
)
;
return
true
;
}
static
bool
CreateCalendarMethodsRecordFromRelativeTo
(
JSContext
*
cx
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
ZonedDateTime
>
zonedRelativeTo
mozilla
:
:
EnumSet
<
CalendarMethod
>
methods
MutableHandle
<
CalendarRecord
>
result
)
{
if
(
zonedRelativeTo
)
{
return
CreateCalendarMethodsRecord
(
cx
zonedRelativeTo
.
calendar
(
)
methods
result
)
;
}
if
(
plainRelativeTo
)
{
auto
*
unwrapped
=
plainRelativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrapped
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
unwrapped
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
return
CreateCalendarMethodsRecord
(
cx
calendar
methods
result
)
;
}
return
true
;
}
struct
RoundedDuration
final
{
NormalizedDuration
duration
;
double
total
=
0
;
}
;
enum
class
ComputeRemainder
:
bool
{
No
Yes
}
;
static
NormalizedTimeDuration
RoundNormalizedTimeDurationToIncrement
(
const
NormalizedTimeDuration
&
duration
const
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
MOZ_ASSERT
(
unit
>
TemporalUnit
:
:
Day
)
;
MOZ_ASSERT
(
increment
<
=
MaximumTemporalDurationRoundingIncrement
(
unit
)
)
;
int64_t
divisor
=
ToNanoseconds
(
unit
)
*
increment
.
value
(
)
;
MOZ_ASSERT
(
divisor
>
0
)
;
MOZ_ASSERT
(
divisor
<
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
totalNanoseconds
=
duration
.
toNanoseconds
(
)
;
auto
rounded
=
RoundNumberToIncrement
(
totalNanoseconds
Int128
{
divisor
}
roundingMode
)
;
return
NormalizedTimeDuration
:
:
fromNanoseconds
(
rounded
)
;
}
static
bool
RoundNormalizedTimeDurationToIncrement
(
JSContext
*
cx
const
NormalizedTimeDuration
&
duration
const
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
NormalizedTimeDuration
*
result
)
{
auto
rounded
=
RoundNormalizedTimeDurationToIncrement
(
duration
unit
increment
roundingMode
)
;
if
(
!
IsValidNormalizedTimeDuration
(
rounded
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_INVALID_NORMALIZED_TIME
)
;
return
false
;
}
*
result
=
rounded
;
return
true
;
}
static
double
TotalNormalizedTimeDuration
(
const
NormalizedTimeDuration
&
duration
const
TemporalUnit
unit
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
MOZ_ASSERT
(
unit
>
TemporalUnit
:
:
Day
)
;
auto
numerator
=
duration
.
toNanoseconds
(
)
;
auto
denominator
=
Int128
{
ToNanoseconds
(
unit
)
}
;
return
FractionToDouble
(
numerator
denominator
)
;
}
NormalizedTimeDuration
js
:
:
temporal
:
:
RoundDuration
(
const
NormalizedTimeDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
MOZ_ASSERT
(
unit
>
TemporalUnit
:
:
Day
)
;
auto
rounded
=
RoundNormalizedTimeDurationToIncrement
(
duration
unit
increment
roundingMode
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
rounded
)
)
;
return
rounded
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
NormalizedTimeDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
NormalizedTimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
)
)
;
MOZ_ASSERT
(
unit
>
TemporalUnit
:
:
Day
)
;
return
RoundNormalizedTimeDurationToIncrement
(
cx
duration
unit
increment
roundingMode
result
)
;
}
#
ifdef
DEBUG
static
constexpr
int64_t
MaxDurationDays
=
(
int64_t
(
1
)
<
<
53
)
/
(
24
*
60
*
60
)
;
static
constexpr
int64_t
MaxFractionalDays
=
2
*
MaxDurationDays
+
2
*
MaxEpochDaysDuration
;
#
endif
struct
FractionalDays
final
{
int64_t
days
=
0
;
int64_t
time
=
0
;
int64_t
dayLength
=
0
;
FractionalDays
(
)
=
default
;
explicit
FractionalDays
(
int64_t
durationDays
const
NormalizedTimeAndDays
&
timeAndDays
)
:
days
(
durationDays
+
timeAndDays
.
days
)
time
(
timeAndDays
.
time
)
dayLength
(
timeAndDays
.
dayLength
)
{
MOZ_ASSERT
(
std
:
:
abs
(
durationDays
)
<
=
MaxDurationDays
)
;
MOZ_ASSERT
(
std
:
:
abs
(
timeAndDays
.
days
)
<
=
MaxDurationDays
)
;
MOZ_ASSERT
(
std
:
:
abs
(
days
)
<
=
MaxFractionalDays
)
;
MOZ_ASSERT
(
dayLength
>
0
)
;
MOZ_ASSERT
(
dayLength
<
int64_t
(
1
)
<
<
53
)
;
MOZ_ASSERT
(
std
:
:
abs
(
time
)
<
dayLength
)
;
}
FractionalDays
operator
+
=
(
int32_t
epochDays
)
{
MOZ_ASSERT
(
std
:
:
abs
(
epochDays
)
<
=
MaxEpochDaysDuration
)
;
days
+
=
epochDays
;
MOZ_ASSERT
(
std
:
:
abs
(
days
)
<
=
MaxFractionalDays
)
;
return
*
this
;
}
FractionalDays
operator
-
=
(
int32_t
epochDays
)
{
MOZ_ASSERT
(
std
:
:
abs
(
epochDays
)
<
=
MaxEpochDaysDuration
)
;
days
-
=
epochDays
;
MOZ_ASSERT
(
std
:
:
abs
(
days
)
<
=
MaxFractionalDays
)
;
return
*
this
;
}
int64_t
truncate
(
)
const
{
int64_t
truncatedDays
=
days
;
if
(
time
>
0
)
{
if
(
truncatedDays
<
0
)
{
truncatedDays
+
=
1
;
}
}
else
if
(
time
<
0
)
{
if
(
truncatedDays
>
0
)
{
truncatedDays
-
=
1
;
}
}
MOZ_ASSERT
(
std
:
:
abs
(
truncatedDays
)
<
=
MaxFractionalDays
+
1
)
;
return
truncatedDays
;
}
int32_t
sign
(
)
const
{
if
(
days
!
=
0
)
{
return
days
<
0
?
-
1
:
1
;
}
return
time
<
0
?
-
1
:
time
>
0
?
1
:
0
;
}
}
;
struct
Fraction
final
{
int64_t
numerator
=
0
;
int32_t
denominator
=
0
;
constexpr
Fraction
(
)
=
default
;
constexpr
Fraction
(
int64_t
numerator
int32_t
denominator
)
:
numerator
(
numerator
)
denominator
(
denominator
)
{
MOZ_ASSERT
(
denominator
>
0
)
;
}
}
;
struct
RoundedNumber
final
{
Int128
rounded
;
double
total
=
0
;
}
;
static
RoundedNumber
RoundNumberToIncrement
(
const
Fraction
&
fraction
const
FractionalDays
&
fractionalDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
)
{
MOZ_ASSERT
(
std
:
:
abs
(
fraction
.
numerator
)
<
(
int64_t
(
1
)
<
<
32
)
*
2
)
;
MOZ_ASSERT
(
fraction
.
denominator
>
0
)
;
MOZ_ASSERT
(
fraction
.
denominator
<
=
MaxEpochDaysDuration
)
;
MOZ_ASSERT
(
std
:
:
abs
(
fractionalDays
.
days
)
<
=
MaxFractionalDays
)
;
MOZ_ASSERT
(
fractionalDays
.
dayLength
>
0
)
;
MOZ_ASSERT
(
fractionalDays
.
dayLength
<
(
int64_t
(
1
)
<
<
53
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
fractionalDays
.
time
)
<
fractionalDays
.
dayLength
)
;
MOZ_ASSERT
(
increment
<
=
Increment
:
:
max
(
)
)
;
if
(
fractionalDays
.
time
=
=
0
)
{
auto
[
numerator
denominator
]
=
fraction
;
int64_t
totalDays
=
fractionalDays
.
days
+
denominator
*
numerator
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
)
{
constexpr
auto
rounded
=
Int128
{
0
}
;
double
total
=
FractionToDouble
(
totalDays
denominator
)
;
return
{
rounded
total
}
;
}
auto
rounded
=
RoundNumberToIncrement
(
totalDays
denominator
increment
roundingMode
)
;
constexpr
double
total
=
0
;
return
{
rounded
total
}
;
}
do
{
auto
dayLength
=
mozilla
:
:
CheckedInt64
(
fractionalDays
.
dayLength
)
;
auto
denominator
=
dayLength
*
fraction
.
denominator
;
if
(
!
denominator
.
isValid
(
)
)
{
break
;
}
auto
amountNanos
=
denominator
*
fraction
.
numerator
;
if
(
!
amountNanos
.
isValid
(
)
)
{
break
;
}
auto
totalNanoseconds
=
dayLength
*
fractionalDays
.
days
;
totalNanoseconds
+
=
fractionalDays
.
time
;
totalNanoseconds
+
=
amountNanos
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
if
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
)
{
constexpr
auto
rounded
=
Int128
{
0
}
;
double
total
=
FractionToDouble
(
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
)
;
return
{
rounded
total
}
;
}
auto
rounded
=
RoundNumberToIncrement
(
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
increment
roundingMode
)
;
constexpr
double
total
=
0
;
return
{
rounded
total
}
;
}
while
(
false
)
;
auto
dayLength
=
Int128
{
fractionalDays
.
dayLength
}
;
MOZ_ASSERT
(
dayLength
<
Int128
{
1
}
<
<
53
)
;
auto
denominator
=
dayLength
*
Int128
{
fraction
.
denominator
}
;
MOZ_ASSERT
(
denominator
<
Int128
{
1
}
<
<
(
53
+
28
)
)
;
auto
totalDays
=
Int128
{
fractionalDays
.
days
}
;
MOZ_ASSERT
(
totalDays
.
abs
(
)
<
=
Uint128
{
1
}
<
<
39
)
;
auto
totalAmount
=
Int128
{
fraction
.
numerator
}
;
MOZ_ASSERT
(
totalAmount
.
abs
(
)
<
=
Uint128
{
1
}
<
<
33
)
;
auto
amountNanos
=
denominator
*
totalAmount
;
MOZ_ASSERT
(
amountNanos
.
abs
(
)
<
=
Uint128
{
1
}
<
<
114
)
;
auto
totalNanoseconds
=
dayLength
*
totalDays
;
totalNanoseconds
+
=
Int128
{
fractionalDays
.
time
}
;
totalNanoseconds
+
=
amountNanos
;
MOZ_ASSERT
(
totalNanoseconds
.
abs
(
)
<
=
Uint128
{
1
}
<
<
115
)
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
)
{
constexpr
auto
rounded
=
Int128
{
0
}
;
double
total
=
FractionToDouble
(
totalNanoseconds
denominator
)
;
return
{
rounded
total
}
;
}
auto
rounded
=
RoundNumberToIncrement
(
totalNanoseconds
denominator
increment
roundingMode
)
;
constexpr
double
total
=
0
;
return
{
rounded
total
}
;
}
static
bool
RoundDurationYear
(
JSContext
*
cx
const
NormalizedDuration
&
duration
FractionalDays
fractionalDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarRecord
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
auto
[
years
months
weeks
days
]
=
duration
.
date
;
auto
yearsDuration
=
DateDuration
{
years
}
;
auto
yearsLater
=
AddDate
(
cx
calendar
dateRelativeTo
yearsDuration
)
;
if
(
!
yearsLater
)
{
return
false
;
}
auto
yearsLaterDate
=
ToPlainDate
(
&
yearsLater
.
unwrap
(
)
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
yearsLater
)
;
auto
yearsMonthsWeeks
=
DateDuration
{
years
months
weeks
}
;
PlainDate
yearsMonthsWeeksLater
;
if
(
!
AddDate
(
cx
calendar
dateRelativeTo
yearsMonthsWeeks
&
yearsMonthsWeeksLater
)
)
{
return
false
;
}
int32_t
monthsWeeksInDays
=
DaysUntil
(
yearsLaterDate
yearsMonthsWeeksLater
)
;
MOZ_ASSERT
(
std
:
:
abs
(
monthsWeeksInDays
)
<
=
MaxEpochDaysDuration
)
;
fractionalDays
+
=
monthsWeeksInDays
;
PlainDate
isoResult
;
if
(
!
BalanceISODate
(
cx
yearsLaterDate
fractionalDays
.
truncate
(
)
&
isoResult
)
)
{
return
false
;
}
Rooted
<
PlainDateObject
*
>
wholeDaysLater
(
cx
CreateTemporalDate
(
cx
isoResult
calendar
.
receiver
(
)
)
)
;
if
(
!
wholeDaysLater
)
{
return
false
;
}
DateDuration
timePassed
;
if
(
!
DifferenceDate
(
cx
calendar
newRelativeTo
wholeDaysLater
TemporalUnit
:
:
Year
&
timePassed
)
)
{
return
false
;
}
int64_t
yearsPassed
=
timePassed
.
years
;
years
+
=
yearsPassed
;
auto
yearsPassedDuration
=
DateDuration
{
yearsPassed
}
;
int32_t
daysPassed
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
yearsPassedDuration
&
newRelativeTo
&
daysPassed
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
daysPassed
)
<
=
MaxEpochDaysDuration
)
;
fractionalDays
-
=
daysPassed
;
int32_t
sign
=
fractionalDays
.
sign
(
)
<
0
?
-
1
:
1
;
auto
oneYear
=
DateDuration
{
sign
}
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
moveResultIgnored
(
cx
)
;
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneYear
&
moveResultIgnored
&
oneYearDays
)
)
{
return
false
;
}
if
(
oneYearDays
=
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_NUMBER
"
days
"
)
;
return
false
;
}
auto
fractionalYears
=
Fraction
{
years
std
:
:
abs
(
oneYearDays
)
}
;
auto
[
numYears
total
]
=
RoundNumberToIncrement
(
fractionalYears
fractionalDays
increment
roundingMode
computeRemainder
)
;
int64_t
numMonths
=
0
;
int64_t
numWeeks
=
0
;
constexpr
auto
time
=
NormalizedTimeDuration
{
}
;
if
(
numYears
.
abs
(
)
>
=
(
Uint128
{
1
}
<
<
32
)
)
{
return
ThrowInvalidDurationPart
(
cx
double
(
numYears
)
"
years
"
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
auto
resultDuration
=
DateDuration
{
int64_t
(
numYears
)
numMonths
numWeeks
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
{
resultDuration
time
}
total
}
;
return
true
;
}
static
bool
RoundDurationMonth
(
JSContext
*
cx
const
NormalizedDuration
&
duration
FractionalDays
fractionalDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarRecord
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
auto
[
years
months
weeks
days
]
=
duration
.
date
;
auto
yearsMonths
=
DateDuration
{
years
months
}
;
auto
yearsMonthsLater
=
AddDate
(
cx
calendar
dateRelativeTo
yearsMonths
)
;
if
(
!
yearsMonthsLater
)
{
return
false
;
}
auto
yearsMonthsLaterDate
=
ToPlainDate
(
&
yearsMonthsLater
.
unwrap
(
)
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
yearsMonthsLater
)
;
auto
yearsMonthsWeeks
=
DateDuration
{
years
months
weeks
}
;
PlainDate
yearsMonthsWeeksLater
;
if
(
!
AddDate
(
cx
calendar
dateRelativeTo
yearsMonthsWeeks
&
yearsMonthsWeeksLater
)
)
{
return
false
;
}
int32_t
weeksInDays
=
DaysUntil
(
yearsMonthsLaterDate
yearsMonthsWeeksLater
)
;
MOZ_ASSERT
(
std
:
:
abs
(
weeksInDays
)
<
=
MaxEpochDaysDuration
)
;
fractionalDays
+
=
weeksInDays
;
PlainDate
isoResult
;
if
(
!
BalanceISODate
(
cx
yearsMonthsLaterDate
fractionalDays
.
truncate
(
)
&
isoResult
)
)
{
return
false
;
}
Rooted
<
PlainDateObject
*
>
wholeDaysLater
(
cx
CreateTemporalDate
(
cx
isoResult
calendar
.
receiver
(
)
)
)
;
if
(
!
wholeDaysLater
)
{
return
false
;
}
DateDuration
timePassed
;
if
(
!
DifferenceDate
(
cx
calendar
newRelativeTo
wholeDaysLater
TemporalUnit
:
:
Month
&
timePassed
)
)
{
return
false
;
}
int64_t
monthsPassed
=
timePassed
.
months
;
months
+
=
monthsPassed
;
auto
monthsPassedDuration
=
DateDuration
{
0
monthsPassed
}
;
int32_t
daysPassed
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
monthsPassedDuration
&
newRelativeTo
&
daysPassed
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
daysPassed
)
<
=
MaxEpochDaysDuration
)
;
fractionalDays
-
=
daysPassed
;
int32_t
sign
=
fractionalDays
.
sign
(
)
<
0
?
-
1
:
1
;
auto
oneMonth
=
DateDuration
{
0
sign
}
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
moveResultIgnored
(
cx
)
;
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneMonth
&
moveResultIgnored
&
oneMonthDays
)
)
{
return
false
;
}
if
(
oneMonthDays
=
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_NUMBER
"
days
"
)
;
return
false
;
}
auto
fractionalMonths
=
Fraction
{
months
std
:
:
abs
(
oneMonthDays
)
}
;
auto
[
numMonths
total
]
=
RoundNumberToIncrement
(
fractionalMonths
fractionalDays
increment
roundingMode
computeRemainder
)
;
int64_t
numWeeks
=
0
;
constexpr
auto
time
=
NormalizedTimeDuration
{
}
;
if
(
numMonths
.
abs
(
)
>
=
(
Uint128
{
1
}
<
<
32
)
)
{
return
ThrowInvalidDurationPart
(
cx
double
(
numMonths
)
"
months
"
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
auto
resultDuration
=
DateDuration
{
years
int64_t
(
numMonths
)
numWeeks
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
{
resultDuration
time
}
total
}
;
return
true
;
}
static
bool
RoundDurationWeek
(
JSContext
*
cx
const
NormalizedDuration
&
duration
FractionalDays
fractionalDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarRecord
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
auto
[
years
months
weeks
days
]
=
duration
.
date
;
auto
*
unwrappedRelativeTo
=
dateRelativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
relativeToDate
=
ToPlainDate
(
unwrappedRelativeTo
)
;
PlainDate
isoResult
;
if
(
!
BalanceISODate
(
cx
relativeToDate
fractionalDays
.
truncate
(
)
&
isoResult
)
)
{
return
false
;
}
Rooted
<
PlainDateObject
*
>
wholeDaysLater
(
cx
CreateTemporalDate
(
cx
isoResult
calendar
.
receiver
(
)
)
)
;
if
(
!
wholeDaysLater
)
{
return
false
;
}
DateDuration
timePassed
;
if
(
!
DifferenceDate
(
cx
calendar
dateRelativeTo
wholeDaysLater
TemporalUnit
:
:
Week
&
timePassed
)
)
{
return
false
;
}
int64_t
weeksPassed
=
timePassed
.
weeks
;
weeks
+
=
weeksPassed
;
auto
weeksPassedDuration
=
DateDuration
{
0
0
weeksPassed
}
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
daysPassed
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
weeksPassedDuration
&
newRelativeTo
&
daysPassed
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
daysPassed
)
<
=
MaxEpochDaysDuration
)
;
fractionalDays
-
=
daysPassed
;
int32_t
sign
=
fractionalDays
.
sign
(
)
<
0
?
-
1
:
1
;
auto
oneWeek
=
DateDuration
{
0
0
sign
}
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
moveResultIgnored
(
cx
)
;
int32_t
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneWeek
&
moveResultIgnored
&
oneWeekDays
)
)
{
return
false
;
}
if
(
oneWeekDays
=
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_NUMBER
"
days
"
)
;
return
false
;
}
auto
fractionalWeeks
=
Fraction
{
weeks
std
:
:
abs
(
oneWeekDays
)
}
;
auto
[
numWeeks
total
]
=
RoundNumberToIncrement
(
fractionalWeeks
fractionalDays
increment
roundingMode
computeRemainder
)
;
constexpr
auto
time
=
NormalizedTimeDuration
{
}
;
if
(
numWeeks
.
abs
(
)
>
=
(
Uint128
{
1
}
<
<
32
)
)
{
return
ThrowInvalidDurationPart
(
cx
double
(
numWeeks
)
"
weeks
"
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
}
auto
resultDuration
=
DateDuration
{
years
months
int64_t
(
numWeeks
)
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
{
resultDuration
time
}
total
}
;
return
true
;
}
static
bool
RoundDurationDay
(
JSContext
*
cx
const
NormalizedDuration
&
duration
const
FractionalDays
&
fractionalDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
auto
[
years
months
weeks
days
]
=
duration
.
date
;
constexpr
auto
zero
=
Fraction
{
0
1
}
;
auto
[
numDays
total
]
=
RoundNumberToIncrement
(
zero
fractionalDays
increment
roundingMode
computeRemainder
)
;
MOZ_ASSERT
(
Int128
{
INT64_MIN
}
<
=
numDays
&
&
numDays
<
=
Int128
{
INT64_MAX
}
"
rounded
days
fits
in
int64
"
)
;
constexpr
auto
time
=
NormalizedTimeDuration
{
}
;
auto
resultDuration
=
DateDuration
{
years
months
weeks
int64_t
(
numDays
)
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
{
resultDuration
time
}
total
}
;
return
true
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
.
time
)
)
;
MOZ_ASSERT_IF
(
unit
>
TemporalUnit
:
:
Day
IsValidDuration
(
duration
.
date
)
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
if
(
unit
<
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
if
(
unit
=
=
TemporalUnit
:
:
Day
)
{
auto
timeAndDays
=
NormalizedTimeDurationToDays
(
duration
.
time
)
;
auto
fractionalDays
=
FractionalDays
{
duration
.
date
.
days
timeAndDays
}
;
return
RoundDurationDay
(
cx
duration
fractionalDays
increment
roundingMode
computeRemainder
result
)
;
}
MOZ_ASSERT
(
TemporalUnit
:
:
Hour
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Nanosecond
)
;
auto
time
=
duration
.
time
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
RoundNormalizedTimeDurationToIncrement
(
cx
time
unit
increment
roundingMode
&
time
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT
(
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
total
=
TotalNormalizedTimeDuration
(
duration
.
time
unit
)
;
}
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
time
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
.
date
)
)
;
*
result
=
{
{
duration
.
date
time
}
total
}
;
return
true
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
TimeZoneRecord
>
timeZone
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
Duration
{
double
(
duration
.
date
.
years
)
double
(
duration
.
date
.
months
)
double
(
duration
.
date
.
weeks
)
}
)
)
;
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
duration
.
time
)
)
;
MOZ_ASSERT_IF
(
unit
>
TemporalUnit
:
:
Day
IsValidDuration
(
duration
.
date
)
)
;
MOZ_ASSERT
(
plainRelativeTo
|
|
zonedRelativeTo
"
Use
RoundDuration
without
relativeTo
when
plainRelativeTo
and
"
"
zonedRelativeTo
are
both
undefined
"
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
MOZ_ASSERT_IF
(
unit
<
=
TemporalUnit
:
:
Week
plainRelativeTo
)
;
MOZ_ASSERT_IF
(
unit
<
=
TemporalUnit
:
:
Week
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateAdd
)
)
;
MOZ_ASSERT_IF
(
unit
<
=
TemporalUnit
:
:
Week
CalendarMethodsRecordHasLookedUp
(
calendar
CalendarMethod
:
:
DateUntil
)
)
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
break
;
case
TemporalUnit
:
:
Day
:
if
(
zonedRelativeTo
)
{
break
;
}
[
[
fallthrough
]
]
;
case
TemporalUnit
:
:
Hour
:
case
TemporalUnit
:
:
Minute
:
case
TemporalUnit
:
:
Second
:
case
TemporalUnit
:
:
Millisecond
:
case
TemporalUnit
:
:
Microsecond
:
case
TemporalUnit
:
:
Nanosecond
:
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
computeRemainder
result
)
;
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
MOZ_ASSERT
(
TemporalUnit
:
:
Year
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Day
)
;
FractionalDays
fractionalDays
;
if
(
zonedRelativeTo
)
{
Rooted
<
ZonedDateTime
>
intermediate
(
cx
)
;
if
(
!
MoveRelativeZonedDateTime
(
cx
zonedRelativeTo
calendar
timeZone
duration
.
date
precalculatedPlainDateTime
&
intermediate
)
)
{
return
false
;
}
NormalizedTimeAndDays
timeAndDays
;
if
(
!
NormalizedTimeDurationToDays
(
cx
duration
.
time
intermediate
timeZone
&
timeAndDays
)
)
{
return
false
;
}
fractionalDays
=
FractionalDays
{
duration
.
date
.
days
timeAndDays
}
;
}
else
{
auto
timeAndDays
=
NormalizedTimeDurationToDays
(
duration
.
time
)
;
fractionalDays
=
FractionalDays
{
duration
.
date
.
days
timeAndDays
}
;
}
switch
(
unit
)
{
case
TemporalUnit
:
:
Year
:
return
RoundDurationYear
(
cx
duration
fractionalDays
increment
roundingMode
plainRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Month
:
return
RoundDurationMonth
(
cx
duration
fractionalDays
increment
roundingMode
plainRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Week
:
return
RoundDurationWeek
(
cx
duration
fractionalDays
increment
roundingMode
plainRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Day
:
return
RoundDurationDay
(
cx
duration
fractionalDays
increment
roundingMode
computeRemainder
result
)
;
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Hour
:
case
TemporalUnit
:
:
Minute
:
case
TemporalUnit
:
:
Second
:
case
TemporalUnit
:
:
Millisecond
:
case
TemporalUnit
:
:
Microsecond
:
case
TemporalUnit
:
:
Nanosecond
:
break
;
}
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
NormalizedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
Rooted
<
ZonedDateTime
>
zonedRelativeTo
(
cx
ZonedDateTime
{
}
)
;
Rooted
<
TimeZoneRecord
>
timeZone
(
cx
TimeZoneRecord
{
}
)
;
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
{
}
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
plainRelativeTo
calendar
zonedRelativeTo
timeZone
precalculatedPlainDateTime
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
duration
;
return
true
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
NormalizedDuration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
PlainDateObject
*
>
plainRelativeTo
Handle
<
CalendarRecord
>
calendar
Handle
<
ZonedDateTime
>
zonedRelativeTo
Handle
<
TimeZoneRecord
>
timeZone
const
PlainDateTime
&
precalculatedPlainDateTime
NormalizedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
plainRelativeTo
calendar
zonedRelativeTo
timeZone
mozilla
:
:
SomeRef
(
precalculatedPlainDateTime
)
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
duration
;
return
true
;
}
enum
class
DurationOperation
{
Add
Subtract
}
;
static
bool
AddDurationToOrSubtractDurationFromDuration
(
JSContext
*
cx
DurationOperation
operation
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
Duration
other
;
if
(
!
ToTemporalDurationRecord
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
(
cx
)
;
Rooted
<
ZonedDateTime
>
zonedRelativeTo
(
cx
)
;
Rooted
<
TimeZoneRecord
>
timeZone
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
const
char
*
name
=
operation
=
=
DurationOperation
:
:
Add
?
"
add
"
:
"
subtract
"
;
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
name
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
GetTemporalRelativeToOption
(
cx
options
&
plainRelativeTo
&
zonedRelativeTo
&
timeZone
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
plainRelativeTo
|
|
!
zonedRelativeTo
)
;
MOZ_ASSERT_IF
(
zonedRelativeTo
timeZone
.
receiver
(
)
)
;
}
Rooted
<
CalendarRecord
>
calendar
(
cx
)
;
if
(
!
CreateCalendarMethodsRecordFromRelativeTo
(
cx
plainRelativeTo
zonedRelativeTo
{
CalendarMethod
:
:
DateAdd
CalendarMethod
:
:
DateUntil
}
&
calendar
)
)
{
return
false
;
}
if
(
operation
=
=
DurationOperation
:
:
Subtract
)
{
other
=
other
.
negate
(
)
;
}
Duration
result
;
if
(
plainRelativeTo
)
{
if
(
!
AddDuration
(
cx
duration
other
plainRelativeTo
calendar
&
result
)
)
{
return
false
;
}
}
else
if
(
zonedRelativeTo
)
{
if
(
!
AddDuration
(
cx
duration
other
zonedRelativeTo
calendar
timeZone
&
result
)
)
{
return
false
;
}
}
else
{
if
(
!
AddDuration
(
cx
duration
other
&
result
)
)
{
return
false
;
}
}
auto
*
obj
=
CreateTemporalDuration
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
DurationConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
Duration
"
)
)
{
return
false
;
}
double
years
=
0
;
if
(
args
.
hasDefined
(
0
)
&
&
!
ToIntegerIfIntegral
(
cx
"
years
"
args
[
0
]
&
years
)
)
{
return
false
;
}
double
months
=
0
;
if
(
args
.
hasDefined
(
1
)
&
&
!
ToIntegerIfIntegral
(
cx
"
months
"
args
[
1
]
&
months
)
)
{
return
false
;
}
double
weeks
=
0
;
if
(
args
.
hasDefined
(
2
)
&
&
!
ToIntegerIfIntegral
(
cx
"
weeks
"
args
[
2
]
&
weeks
)
)
{
return
false
;
}
double
days
=
0
;
if
(
args
.
hasDefined
(
3
)
&
&
!
ToIntegerIfIntegral
(
cx
"
days
"
args
[
3
]
&
days
)
)
{
return
false
;
}
double
hours
=
0
;
if
(
args
.
hasDefined
(
4
)
&
&
!
ToIntegerIfIntegral
(
cx
"
hours
"
args
[
4
]
&
hours
)
)
{
return
false
;
}
double
minutes
=
0
;
if
(
args
.
hasDefined
(
5
)
&
&
!
ToIntegerIfIntegral
(
cx
"
minutes
"
args
[
5
]
&
minutes
)
)
{
return
false
;
}
double
seconds
=
0
;
if
(
args
.
hasDefined
(
6
)
&
&
!
ToIntegerIfIntegral
(
cx
"
seconds
"
args
[
6
]
&
seconds
)
)
{
return
false
;
}
double
milliseconds
=
0
;
if
(
args
.
hasDefined
(
7
)
&
&
!
ToIntegerIfIntegral
(
cx
"
milliseconds
"
args
[
7
]
&
milliseconds
)
)
{
return
false
;
}
double
microseconds
=
0
;
if
(
args
.
hasDefined
(
8
)
&
&
!
ToIntegerIfIntegral
(
cx
"
microseconds
"
args
[
8
]
&
microseconds
)
)
{
return
false
;
}
double
nanoseconds
=
0
;
if
(
args
.
hasDefined
(
9
)
&
&
!
ToIntegerIfIntegral
(
cx
"
nanoseconds
"
args
[
9
]
&
nanoseconds
)
)
{
return
false
;
}
auto
*
duration
=
CreateTemporalDuration
(
cx
args
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
;
if
(
!
duration
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
duration
)
;
return
true
;
}
static
bool
Duration_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Handle
<
Value
>
item
=
args
.
get
(
0
)
;
if
(
item
.
isObject
(
)
)
{
if
(
auto
*
duration
=
item
.
toObject
(
)
.
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
auto
*
result
=
CreateTemporalDuration
(
cx
ToDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
auto
result
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Duration
one
;
if
(
!
ToTemporalDuration
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
Duration
two
;
if
(
!
ToTemporalDuration
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
2
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
compare
"
args
[
2
]
)
;
if
(
!
options
)
{
return
false
;
}
}
if
(
one
=
=
two
)
{
args
.
rval
(
)
.
setInt32
(
0
)
;
return
true
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
(
cx
)
;
Rooted
<
ZonedDateTime
>
zonedRelativeTo
(
cx
)
;
Rooted
<
TimeZoneRecord
>
timeZone
(
cx
)
;
if
(
options
)
{
if
(
!
GetTemporalRelativeToOption
(
cx
options
&
plainRelativeTo
&
zonedRelativeTo
&
timeZone
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
plainRelativeTo
|
|
!
zonedRelativeTo
)
;
MOZ_ASSERT_IF
(
zonedRelativeTo
timeZone
.
receiver
(
)
)
;
}
auto
hasCalendarUnit
=
[
]
(
const
auto
&
d
)
{
return
d
.
years
!
=
0
|
|
d
.
months
!
=
0
|
|
d
.
weeks
!
=
0
;
}
;
bool
calendarUnitsPresent
=
hasCalendarUnit
(
one
)
|
|
hasCalendarUnit
(
two
)
;
Rooted
<
CalendarRecord
>
calendar
(
cx
)
;
if
(
!
CreateCalendarMethodsRecordFromRelativeTo
(
cx
plainRelativeTo
zonedRelativeTo
{
CalendarMethod
:
:
DateAdd
}
&
calendar
)
)
{
return
false
;
}
if
(
zonedRelativeTo
&
&
(
calendarUnitsPresent
|
|
one
.
days
!
=
0
|
|
two
.
days
!
=
0
)
)
{
const
auto
&
instant
=
zonedRelativeTo
.
instant
(
)
;
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
false
;
}
auto
normalized1
=
CreateNormalizedDurationRecord
(
one
)
;
auto
normalized2
=
CreateNormalizedDurationRecord
(
two
)
;
Instant
after1
;
if
(
!
AddZonedDateTime
(
cx
instant
timeZone
calendar
normalized1
dateTime
&
after1
)
)
{
return
false
;
}
Instant
after2
;
if
(
!
AddZonedDateTime
(
cx
instant
timeZone
calendar
normalized2
dateTime
&
after2
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
after1
<
after2
?
-
1
:
after1
>
after2
?
1
:
0
)
;
return
true
;
}
int64_t
days1
days2
;
if
(
calendarUnitsPresent
)
{
DateDuration
unbalanceResult1
;
if
(
plainRelativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
one
.
toDateDuration
(
)
TemporalUnit
:
:
Day
plainRelativeTo
calendar
&
unbalanceResult1
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
one
.
toDateDuration
(
)
TemporalUnit
:
:
Day
&
unbalanceResult1
)
)
{
return
false
;
}
MOZ_ASSERT
(
one
.
toDateDuration
(
)
=
=
unbalanceResult1
)
;
}
DateDuration
unbalanceResult2
;
if
(
plainRelativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
two
.
toDateDuration
(
)
TemporalUnit
:
:
Day
plainRelativeTo
calendar
&
unbalanceResult2
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
two
.
toDateDuration
(
)
TemporalUnit
:
:
Day
&
unbalanceResult2
)
)
{
return
false
;
}
MOZ_ASSERT
(
two
.
toDateDuration
(
)
=
=
unbalanceResult2
)
;
}
days1
=
unbalanceResult1
.
days
;
days2
=
unbalanceResult2
.
days
;
}
else
{
days1
=
mozilla
:
:
AssertedCast
<
int64_t
>
(
one
.
days
)
;
days2
=
mozilla
:
:
AssertedCast
<
int64_t
>
(
two
.
days
)
;
}
auto
normalized1
=
NormalizeTimeDuration
(
one
)
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
normalized1
days1
&
normalized1
)
)
{
return
false
;
}
auto
normalized2
=
NormalizeTimeDuration
(
two
)
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
normalized2
days2
&
normalized2
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
CompareNormalizedTimeDuration
(
normalized1
normalized2
)
)
;
return
true
;
}
static
bool
Duration_years
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
years
(
)
)
;
return
true
;
}
static
bool
Duration_years
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_years
>
(
cx
args
)
;
}
static
bool
Duration_months
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
months
(
)
)
;
return
true
;
}
static
bool
Duration_months
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_months
>
(
cx
args
)
;
}
static
bool
Duration_weeks
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
weeks
(
)
)
;
return
true
;
}
static
bool
Duration_weeks
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_weeks
>
(
cx
args
)
;
}
static
bool
Duration_days
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
days
(
)
)
;
return
true
;
}
static
bool
Duration_days
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_days
>
(
cx
args
)
;
}
static
bool
Duration_hours
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
hours
(
)
)
;
return
true
;
}
static
bool
Duration_hours
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_hours
>
(
cx
args
)
;
}
static
bool
Duration_minutes
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
minutes
(
)
)
;
return
true
;
}
static
bool
Duration_minutes
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_minutes
>
(
cx
args
)
;
}
static
bool
Duration_seconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
seconds
(
)
)
;
return
true
;
}
static
bool
Duration_seconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_seconds
>
(
cx
args
)
;
}
static
bool
Duration_milliseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
milliseconds
(
)
)
;
return
true
;
}
static
bool
Duration_milliseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_milliseconds
>
(
cx
args
)
;
}
static
bool
Duration_microseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
microseconds
(
)
)
;
return
true
;
}
static
bool
Duration_microseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_microseconds
>
(
cx
args
)
;
}
static
bool
Duration_nanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
nanoseconds
(
)
)
;
return
true
;
}
static
bool
Duration_nanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_nanoseconds
>
(
cx
args
)
;
}
static
bool
Duration_sign
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
args
.
rval
(
)
.
setInt32
(
DurationSign
(
duration
)
)
;
return
true
;
}
static
bool
Duration_sign
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_sign
>
(
cx
args
)
;
}
static
bool
Duration_blank
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
args
.
rval
(
)
.
setBoolean
(
duration
=
=
Duration
{
}
)
;
return
true
;
}
static
bool
Duration_blank
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_blank
>
(
cx
args
)
;
}
static
bool
Duration_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
Rooted
<
JSObject
*
>
temporalDurationLike
(
cx
RequireObjectArg
(
cx
"
temporalDurationLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDurationLike
)
{
return
false
;
}
if
(
!
ToTemporalPartialDurationRecord
(
cx
temporalDurationLike
&
duration
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_with
>
(
cx
args
)
;
}
static
bool
Duration_negated
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
auto
*
result
=
CreateTemporalDuration
(
cx
duration
.
negate
(
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_negated
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_negated
>
(
cx
args
)
;
}
static
bool
Duration_abs
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
auto
*
result
=
CreateTemporalDuration
(
cx
AbsoluteDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_abs
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_abs
>
(
cx
args
)
;
}
static
bool
Duration_add
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromDuration
(
cx
DurationOperation
:
:
Add
args
)
;
}
static
bool
Duration_add
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_add
>
(
cx
args
)
;
}
static
bool
Duration_subtract
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromDuration
(
cx
DurationOperation
:
:
Subtract
args
)
;
}
static
bool
Duration_subtract
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_subtract
>
(
cx
args
)
;
}
static
bool
Duration_round
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
auto
existingLargestUnit
=
DefaultTemporalLargestUnit
(
duration
)
;
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
TemporalUnit
largestUnit
;
auto
roundingMode
=
TemporalRoundingMode
:
:
HalfExpand
;
auto
roundingIncrement
=
Increment
{
1
}
;
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
(
cx
)
;
Rooted
<
ZonedDateTime
>
zonedRelativeTo
(
cx
)
;
Rooted
<
TimeZoneRecord
>
timeZone
(
cx
)
;
if
(
args
.
get
(
0
)
.
isString
(
)
)
{
Rooted
<
JSString
*
>
paramString
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
GetTemporalUnitValuedOption
(
cx
paramString
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DateTime
&
smallestUnit
)
)
{
return
false
;
}
auto
defaultLargestUnit
=
std
:
:
min
(
existingLargestUnit
smallestUnit
)
;
largestUnit
=
defaultLargestUnit
;
}
else
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
roundTo
"
"
round
"
args
.
get
(
0
)
)
)
;
if
(
!
options
)
{
return
false
;
}
bool
smallestUnitPresent
=
true
;
bool
largestUnitPresent
=
true
;
Rooted
<
Value
>
largestUnitValue
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
largestUnit
&
largestUnitValue
)
)
{
return
false
;
}
if
(
!
largestUnitValue
.
isUndefined
(
)
)
{
Rooted
<
JSString
*
>
largestUnitStr
(
cx
JS
:
:
ToString
(
cx
largestUnitValue
)
)
;
if
(
!
largestUnitStr
)
{
return
false
;
}
largestUnit
=
TemporalUnit
:
:
Auto
;
if
(
!
GetTemporalUnitValuedOption
(
cx
largestUnitStr
TemporalUnitKey
:
:
LargestUnit
TemporalUnitGroup
:
:
DateTime
&
largestUnit
)
)
{
return
false
;
}
}
if
(
!
GetTemporalRelativeToOption
(
cx
options
&
plainRelativeTo
&
zonedRelativeTo
&
timeZone
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
plainRelativeTo
|
|
!
zonedRelativeTo
)
;
MOZ_ASSERT_IF
(
zonedRelativeTo
timeZone
.
receiver
(
)
)
;
if
(
!
GetRoundingIncrementOption
(
cx
options
&
roundingIncrement
)
)
{
return
false
;
}
if
(
!
GetRoundingModeOption
(
cx
options
&
roundingMode
)
)
{
return
false
;
}
if
(
!
GetTemporalUnitValuedOption
(
cx
options
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DateTime
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Auto
)
{
smallestUnitPresent
=
false
;
smallestUnit
=
TemporalUnit
:
:
Nanosecond
;
}
auto
defaultLargestUnit
=
std
:
:
min
(
existingLargestUnit
smallestUnit
)
;
if
(
largestUnitValue
.
isUndefined
(
)
)
{
largestUnitPresent
=
false
;
largestUnit
=
defaultLargestUnit
;
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Auto
)
{
largestUnit
=
defaultLargestUnit
;
}
if
(
!
smallestUnitPresent
&
&
!
largestUnitPresent
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT_SPECIFIER
)
;
return
false
;
}
if
(
largestUnit
>
smallestUnit
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_UNIT_RANGE
)
;
return
false
;
}
if
(
smallestUnit
>
TemporalUnit
:
:
Day
)
{
auto
maximum
=
MaximumTemporalDurationRoundingIncrement
(
smallestUnit
)
;
if
(
!
ValidateTemporalRoundingIncrement
(
cx
roundingIncrement
maximum
false
)
)
{
return
false
;
}
}
}
bool
hoursToDaysConversionMayOccur
=
false
;
if
(
duration
.
days
!
=
0
&
&
zonedRelativeTo
)
{
hoursToDaysConversionMayOccur
=
true
;
}
else
if
(
std
:
:
abs
(
duration
.
hours
)
>
=
24
)
{
hoursToDaysConversionMayOccur
=
true
;
}
bool
roundingGranularityIsNoop
=
smallestUnit
=
=
TemporalUnit
:
:
Nanosecond
&
&
roundingIncrement
=
=
Increment
{
1
}
;
bool
calendarUnitsPresent
=
duration
.
years
!
=
0
|
|
duration
.
months
!
=
0
|
|
duration
.
weeks
!
=
0
;
if
(
roundingGranularityIsNoop
&
&
largestUnit
=
=
existingLargestUnit
&
&
!
calendarUnitsPresent
&
&
!
hoursToDaysConversionMayOccur
&
&
std
:
:
abs
(
duration
.
minutes
)
<
60
&
&
std
:
:
abs
(
duration
.
seconds
)
<
60
&
&
std
:
:
abs
(
duration
.
milliseconds
)
<
1000
&
&
std
:
:
abs
(
duration
.
microseconds
)
<
1000
&
&
std
:
:
abs
(
duration
.
nanoseconds
)
<
1000
)
{
auto
*
obj
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
{
}
;
bool
plainDateTimeOrRelativeToWillBeUsed
=
!
roundingGranularityIsNoop
|
|
largestUnit
<
=
TemporalUnit
:
:
Day
|
|
calendarUnitsPresent
|
|
duration
.
days
!
=
0
;
PlainDateTime
relativeToDateTime
;
if
(
zonedRelativeTo
&
&
plainDateTimeOrRelativeToWillBeUsed
)
{
const
auto
&
instant
=
zonedRelativeTo
.
instant
(
)
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
relativeToDateTime
)
)
{
return
false
;
}
precalculatedPlainDateTime
=
mozilla
:
:
SomeRef
<
const
PlainDateTime
>
(
relativeToDateTime
)
;
plainRelativeTo
=
CreateTemporalDate
(
cx
relativeToDateTime
.
date
zonedRelativeTo
.
calendar
(
)
)
;
if
(
!
plainRelativeTo
)
{
return
false
;
}
}
Rooted
<
CalendarRecord
>
calendar
(
cx
)
;
if
(
!
CreateCalendarMethodsRecordFromRelativeTo
(
cx
plainRelativeTo
zonedRelativeTo
{
CalendarMethod
:
:
DateAdd
CalendarMethod
:
:
DateUntil
}
&
calendar
)
)
{
return
false
;
}
DateDuration
unbalanceResult
;
if
(
plainRelativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
.
toDateDuration
(
)
largestUnit
plainRelativeTo
calendar
&
unbalanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
.
toDateDuration
(
)
largestUnit
&
unbalanceResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
duration
.
toDateDuration
(
)
=
=
unbalanceResult
)
;
}
MOZ_ASSERT
(
IsValidDuration
(
unbalanceResult
)
)
;
auto
roundInput
=
NormalizedDuration
{
unbalanceResult
NormalizeTimeDuration
(
duration
)
}
;
RoundedDuration
rounded
;
if
(
plainRelativeTo
|
|
zonedRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
roundingIncrement
smallestUnit
roundingMode
plainRelativeTo
calendar
zonedRelativeTo
timeZone
precalculatedPlainDateTime
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
IsValidDuration
(
roundInput
)
)
;
if
(
!
:
:
RoundDuration
(
cx
roundInput
roundingIncrement
smallestUnit
roundingMode
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
}
auto
roundResult
=
rounded
.
duration
;
TimeDuration
balanceResult
;
if
(
zonedRelativeTo
)
{
NormalizedDuration
adjustResult
;
if
(
!
AdjustRoundedDurationDays
(
cx
roundResult
roundingIncrement
smallestUnit
roundingMode
zonedRelativeTo
calendar
timeZone
precalculatedPlainDateTime
&
adjustResult
)
)
{
return
false
;
}
roundResult
=
adjustResult
;
if
(
!
BalanceTimeDurationRelative
(
cx
roundResult
largestUnit
zonedRelativeTo
timeZone
precalculatedPlainDateTime
&
balanceResult
)
)
{
return
false
;
}
}
else
{
NormalizedTimeDuration
withDays
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
roundResult
.
time
roundResult
.
date
.
days
&
withDays
)
)
{
return
false
;
}
if
(
!
temporal
:
:
BalanceTimeDuration
(
cx
withDays
largestUnit
&
balanceResult
)
)
{
return
false
;
}
}
auto
balanceInput
=
DateDuration
{
roundResult
.
date
.
years
roundResult
.
date
.
months
roundResult
.
date
.
weeks
balanceResult
.
days
}
;
DateDuration
dateResult
;
if
(
!
:
:
BalanceDateDurationRelative
(
cx
balanceInput
largestUnit
smallestUnit
plainRelativeTo
calendar
&
dateResult
)
)
{
return
false
;
}
auto
result
=
Duration
{
double
(
dateResult
.
years
)
double
(
dateResult
.
months
)
double
(
dateResult
.
weeks
)
double
(
dateResult
.
days
)
double
(
balanceResult
.
hours
)
double
(
balanceResult
.
minutes
)
double
(
balanceResult
.
seconds
)
double
(
balanceResult
.
milliseconds
)
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
;
auto
*
obj
=
CreateTemporalDuration
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
Duration_round
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_round
>
(
cx
args
)
;
}
static
bool
Duration_total
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
plainRelativeTo
(
cx
)
;
Rooted
<
ZonedDateTime
>
zonedRelativeTo
(
cx
)
;
Rooted
<
TimeZoneRecord
>
timeZone
(
cx
)
;
auto
unit
=
TemporalUnit
:
:
Auto
;
if
(
args
.
get
(
0
)
.
isString
(
)
)
{
MOZ_ASSERT
(
!
plainRelativeTo
&
&
!
zonedRelativeTo
)
;
Rooted
<
JSString
*
>
paramString
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
GetTemporalUnitValuedOption
(
cx
paramString
TemporalUnitKey
:
:
Unit
TemporalUnitGroup
:
:
DateTime
&
unit
)
)
{
return
false
;
}
}
else
{
Rooted
<
JSObject
*
>
totalOf
(
cx
RequireObjectArg
(
cx
"
totalOf
"
"
total
"
args
.
get
(
0
)
)
)
;
if
(
!
totalOf
)
{
return
false
;
}
if
(
!
GetTemporalRelativeToOption
(
cx
totalOf
&
plainRelativeTo
&
zonedRelativeTo
&
timeZone
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
plainRelativeTo
|
|
!
zonedRelativeTo
)
;
MOZ_ASSERT_IF
(
zonedRelativeTo
timeZone
.
receiver
(
)
)
;
if
(
!
GetTemporalUnitValuedOption
(
cx
totalOf
TemporalUnitKey
:
:
Unit
TemporalUnitGroup
:
:
DateTime
&
unit
)
)
{
return
false
;
}
if
(
unit
=
=
TemporalUnit
:
:
Auto
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_MISSING_OPTION
"
unit
"
)
;
return
false
;
}
}
mozilla
:
:
Maybe
<
const
PlainDateTime
&
>
precalculatedPlainDateTime
{
}
;
bool
plainDateTimeOrRelativeToWillBeUsed
=
unit
<
=
TemporalUnit
:
:
Day
|
|
duration
.
toDateDuration
(
)
!
=
DateDuration
{
}
;
PlainDateTime
relativeToDateTime
;
if
(
zonedRelativeTo
&
&
plainDateTimeOrRelativeToWillBeUsed
)
{
const
auto
&
instant
=
zonedRelativeTo
.
instant
(
)
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
relativeToDateTime
)
)
{
return
false
;
}
precalculatedPlainDateTime
=
mozilla
:
:
SomeRef
<
const
PlainDateTime
>
(
relativeToDateTime
)
;
plainRelativeTo
=
CreateTemporalDate
(
cx
relativeToDateTime
.
date
zonedRelativeTo
.
calendar
(
)
)
;
if
(
!
plainRelativeTo
)
{
return
false
;
}
}
Rooted
<
CalendarRecord
>
calendar
(
cx
)
;
if
(
!
CreateCalendarMethodsRecordFromRelativeTo
(
cx
plainRelativeTo
zonedRelativeTo
{
CalendarMethod
:
:
DateAdd
CalendarMethod
:
:
DateUntil
}
&
calendar
)
)
{
return
false
;
}
DateDuration
unbalanceResult
;
if
(
plainRelativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
.
toDateDuration
(
)
unit
plainRelativeTo
calendar
&
unbalanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
.
toDateDuration
(
)
unit
&
unbalanceResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
duration
.
toDateDuration
(
)
=
=
unbalanceResult
)
;
}
int64_t
unbalancedDays
=
unbalanceResult
.
days
;
int64_t
days
;
NormalizedTimeDuration
normTime
;
if
(
zonedRelativeTo
)
{
Rooted
<
ZonedDateTime
>
intermediate
(
cx
)
;
if
(
!
MoveRelativeZonedDateTime
(
cx
zonedRelativeTo
calendar
timeZone
{
unbalanceResult
.
years
unbalanceResult
.
months
unbalanceResult
.
weeks
0
}
precalculatedPlainDateTime
&
intermediate
)
)
{
return
false
;
}
auto
timeDuration
=
NormalizeTimeDuration
(
duration
)
;
const
auto
&
startNs
=
intermediate
.
instant
(
)
;
const
auto
&
startInstant
=
startNs
;
mozilla
:
:
Maybe
<
PlainDateTime
>
startDateTime
{
}
;
Instant
intermediateNs
;
if
(
unbalancedDays
!
=
0
)
{
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startInstant
&
dateTime
)
)
{
return
false
;
}
startDateTime
=
mozilla
:
:
Some
(
dateTime
)
;
Rooted
<
CalendarValue
>
isoCalendar
(
cx
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
Instant
addResult
;
if
(
!
AddDaysToZonedDateTime
(
cx
startInstant
dateTime
timeZone
isoCalendar
unbalancedDays
&
addResult
)
)
{
return
false
;
}
intermediateNs
=
addResult
;
}
else
{
intermediateNs
=
startNs
;
}
Instant
endNs
;
if
(
!
AddInstant
(
cx
intermediateNs
timeDuration
&
endNs
)
)
{
return
false
;
}
auto
difference
=
NormalizedTimeDurationFromEpochNanosecondsDifference
(
endNs
startNs
)
;
if
(
TemporalUnit
:
:
Year
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Day
&
&
difference
!
=
NormalizedTimeDuration
{
}
)
{
if
(
!
startDateTime
)
{
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startInstant
&
dateTime
)
)
{
return
false
;
}
startDateTime
=
mozilla
:
:
Some
(
dateTime
)
;
}
NormalizedTimeAndDays
timeAndDays
;
if
(
!
NormalizedTimeDurationToDays
(
cx
difference
intermediate
timeZone
*
startDateTime
&
timeAndDays
)
)
{
return
false
;
}
normTime
=
NormalizedTimeDuration
:
:
fromNanoseconds
(
timeAndDays
.
time
)
;
days
=
timeAndDays
.
days
;
}
else
{
normTime
=
difference
;
days
=
0
;
}
}
else
{
auto
timeDuration
=
NormalizeTimeDuration
(
duration
)
;
if
(
!
Add24HourDaysToNormalizedTimeDuration
(
cx
timeDuration
unbalancedDays
&
normTime
)
)
{
return
false
;
}
days
=
0
;
}
MOZ_ASSERT
(
IsValidNormalizedTimeDuration
(
normTime
)
)
;
auto
roundInput
=
NormalizedDuration
{
{
unbalanceResult
.
years
unbalanceResult
.
months
unbalanceResult
.
weeks
days
}
normTime
}
;
MOZ_ASSERT_IF
(
unit
>
TemporalUnit
:
:
Day
IsValidDuration
(
roundInput
.
date
)
)
;
RoundedDuration
rounded
;
if
(
plainRelativeTo
|
|
zonedRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
Increment
{
1
}
unit
TemporalRoundingMode
:
:
Trunc
plainRelativeTo
calendar
zonedRelativeTo
timeZone
precalculatedPlainDateTime
ComputeRemainder
:
:
Yes
&
rounded
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
IsValidDuration
(
roundInput
)
)
;
if
(
!
:
:
RoundDuration
(
cx
roundInput
Increment
{
1
}
unit
TemporalRoundingMode
:
:
Trunc
ComputeRemainder
:
:
Yes
&
rounded
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setNumber
(
rounded
.
total
)
;
return
true
;
}
static
bool
Duration_total
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_total
>
(
cx
args
)
;
}
static
bool
Duration_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
SecondsStringPrecision
precision
=
{
Precision
:
:
Auto
(
)
TemporalUnit
:
:
Nanosecond
Increment
{
1
}
}
;
auto
roundingMode
=
TemporalRoundingMode
:
:
Trunc
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toString
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
auto
digits
=
Precision
:
:
Auto
(
)
;
if
(
!
GetTemporalFractionalSecondDigitsOption
(
cx
options
&
digits
)
)
{
return
false
;
}
if
(
!
GetRoundingModeOption
(
cx
options
&
roundingMode
)
)
{
return
false
;
}
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
if
(
!
GetTemporalUnitValuedOption
(
cx
options
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
Time
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Hour
|
|
smallestUnit
=
=
TemporalUnit
:
:
Minute
)
{
const
char
*
smallestUnitStr
=
smallestUnit
=
=
TemporalUnit
:
:
Hour
?
"
hour
"
:
"
minute
"
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_UNIT_OPTION
smallestUnitStr
"
smallestUnit
"
)
;
return
false
;
}
precision
=
ToSecondsStringPrecision
(
smallestUnit
digits
)
;
}
Duration
result
;
if
(
precision
.
unit
!
=
TemporalUnit
:
:
Nanosecond
|
|
precision
.
increment
!
=
Increment
{
1
}
)
{
auto
timeDuration
=
NormalizeTimeDuration
(
duration
)
;
auto
largestUnit
=
DefaultTemporalLargestUnit
(
duration
)
;
NormalizedTimeDuration
rounded
;
if
(
!
RoundDuration
(
cx
timeDuration
precision
.
increment
precision
.
unit
roundingMode
&
rounded
)
)
{
return
false
;
}
auto
balanced
=
BalanceTimeDuration
(
rounded
std
:
:
min
(
largestUnit
TemporalUnit
:
:
Second
)
)
;
result
=
{
duration
.
years
duration
.
months
duration
.
weeks
duration
.
days
+
double
(
balanced
.
days
)
double
(
balanced
.
hours
)
double
(
balanced
.
minutes
)
double
(
balanced
.
seconds
)
double
(
balanced
.
milliseconds
)
balanced
.
microseconds
balanced
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
}
else
{
result
=
duration
;
}
JSString
*
str
=
TemporalDurationToString
(
cx
result
precision
.
precision
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toString
>
(
cx
args
)
;
}
static
bool
Duration_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
JSString
*
str
=
TemporalDurationToString
(
cx
duration
Precision
:
:
Auto
(
)
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toJSON
>
(
cx
args
)
;
}
static
bool
Duration_toLocaleString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
duration
=
ToDuration
(
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
)
;
JSString
*
str
=
TemporalDurationToString
(
cx
duration
Precision
:
:
Auto
(
)
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toLocaleString
>
(
cx
args
)
;
}
static
bool
Duration_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
Duration
"
"
primitive
type
"
)
;
return
false
;
}
const
JSClass
DurationObject
:
:
class_
=
{
"
Temporal
.
Duration
"
JSCLASS_HAS_RESERVED_SLOTS
(
DurationObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Duration
)
JS_NULL_CLASS_OPS
&
DurationObject
:
:
classSpec_
}
;
const
JSClass
&
DurationObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
Duration_methods
[
]
=
{
JS_FN
(
"
from
"
Duration_from
1
0
)
JS_FN
(
"
compare
"
Duration_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
Duration_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
Duration_with
1
0
)
JS_FN
(
"
negated
"
Duration_negated
0
0
)
JS_FN
(
"
abs
"
Duration_abs
0
0
)
JS_FN
(
"
add
"
Duration_add
1
0
)
JS_FN
(
"
subtract
"
Duration_subtract
1
0
)
JS_FN
(
"
round
"
Duration_round
1
0
)
JS_FN
(
"
total
"
Duration_total
1
0
)
JS_FN
(
"
toString
"
Duration_toString
0
0
)
JS_FN
(
"
toJSON
"
Duration_toJSON
0
0
)
JS_FN
(
"
toLocaleString
"
Duration_toLocaleString
0
0
)
JS_FN
(
"
valueOf
"
Duration_valueOf
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
Duration_prototype_properties
[
]
=
{
JS_PSG
(
"
years
"
Duration_years
0
)
JS_PSG
(
"
months
"
Duration_months
0
)
JS_PSG
(
"
weeks
"
Duration_weeks
0
)
JS_PSG
(
"
days
"
Duration_days
0
)
JS_PSG
(
"
hours
"
Duration_hours
0
)
JS_PSG
(
"
minutes
"
Duration_minutes
0
)
JS_PSG
(
"
seconds
"
Duration_seconds
0
)
JS_PSG
(
"
milliseconds
"
Duration_milliseconds
0
)
JS_PSG
(
"
microseconds
"
Duration_microseconds
0
)
JS_PSG
(
"
nanoseconds
"
Duration_nanoseconds
0
)
JS_PSG
(
"
sign
"
Duration_sign
0
)
JS_PSG
(
"
blank
"
Duration_blank
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Duration
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
DurationObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
DurationConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
DurationObject
>
Duration_methods
nullptr
Duration_prototype_methods
Duration_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
