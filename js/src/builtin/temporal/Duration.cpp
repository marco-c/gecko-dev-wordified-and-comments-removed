#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
proxy
/
DeadObjectProxy
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsDuration
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
DurationObject
>
(
)
;
}
#
ifdef
DEBUG
static
bool
IsIntegerOrInfinity
(
double
d
)
{
return
IsInteger
(
d
)
|
|
std
:
:
isinf
(
d
)
;
}
static
bool
IsIntegerOrInfinityDuration
(
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
return
IsIntegerOrInfinity
(
years
)
&
&
IsIntegerOrInfinity
(
months
)
&
&
IsIntegerOrInfinity
(
weeks
)
&
&
IsIntegerOrInfinity
(
days
)
&
&
IsIntegerOrInfinity
(
hours
)
&
&
IsIntegerOrInfinity
(
minutes
)
&
&
IsIntegerOrInfinity
(
seconds
)
&
&
IsIntegerOrInfinity
(
milliseconds
)
&
&
IsIntegerOrInfinity
(
microseconds
)
&
&
IsIntegerOrInfinity
(
nanoseconds
)
;
}
static
bool
IsIntegerDuration
(
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
return
IsInteger
(
years
)
&
&
IsInteger
(
months
)
&
&
IsInteger
(
weeks
)
&
&
IsInteger
(
days
)
&
&
IsInteger
(
hours
)
&
&
IsInteger
(
minutes
)
&
&
IsInteger
(
seconds
)
&
&
IsInteger
(
milliseconds
)
&
&
IsInteger
(
microseconds
)
&
&
IsInteger
(
nanoseconds
)
;
}
#
endif
int32_t
js
:
:
temporal
:
:
DurationSign
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
v
<
0
)
{
return
-
1
;
}
if
(
v
>
0
)
{
return
1
;
}
}
return
0
;
}
bool
js
:
:
temporal
:
:
IsValidDuration
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
int32_t
sign
=
DurationSign
(
duration
)
;
for
(
auto
v
:
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
!
std
:
:
isfinite
(
v
)
)
{
return
false
;
}
if
(
v
<
0
&
&
sign
>
0
)
{
return
false
;
}
if
(
v
>
0
&
&
sign
<
0
)
{
return
false
;
}
}
return
true
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerOrInfinityDuration
(
duration
)
)
;
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
int32_t
sign
=
DurationSign
(
duration
)
;
auto
report
=
[
&
]
(
double
v
const
char
*
name
unsigned
errorNumber
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
v
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
errorNumber
name
numStr
)
;
}
;
auto
throwIfInvalid
=
[
&
]
(
double
v
const
char
*
name
)
{
if
(
!
std
:
:
isfinite
(
v
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_NON_FINITE
)
;
return
false
;
}
if
(
(
v
<
0
&
&
sign
>
0
)
|
|
(
v
>
0
&
&
sign
<
0
)
)
{
report
(
v
name
JSMSG_TEMPORAL_DURATION_INVALID_SIGN
)
;
return
false
;
}
return
true
;
}
;
if
(
!
throwIfInvalid
(
years
"
years
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
months
"
months
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
weeks
"
weeks
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
days
"
days
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
hours
"
hours
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
minutes
"
minutes
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
seconds
"
seconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
milliseconds
"
milliseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
microseconds
"
microseconds
"
)
)
{
return
false
;
}
if
(
!
throwIfInvalid
(
nanoseconds
"
nanoseconds
"
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
true
;
}
static
TemporalUnit
DefaultTemporalLargestUnit
(
const
Duration
&
duration
)
{
MOZ_ASSERT
(
IsIntegerDuration
(
duration
)
)
;
if
(
duration
.
years
!
=
0
)
{
return
TemporalUnit
:
:
Year
;
}
if
(
duration
.
months
!
=
0
)
{
return
TemporalUnit
:
:
Month
;
}
if
(
duration
.
weeks
!
=
0
)
{
return
TemporalUnit
:
:
Week
;
}
if
(
duration
.
days
!
=
0
)
{
return
TemporalUnit
:
:
Day
;
}
if
(
duration
.
hours
!
=
0
)
{
return
TemporalUnit
:
:
Hour
;
}
if
(
duration
.
minutes
!
=
0
)
{
return
TemporalUnit
:
:
Minute
;
}
if
(
duration
.
seconds
!
=
0
)
{
return
TemporalUnit
:
:
Second
;
}
if
(
duration
.
milliseconds
!
=
0
)
{
return
TemporalUnit
:
:
Millisecond
;
}
if
(
duration
.
microseconds
!
=
0
)
{
return
TemporalUnit
:
:
Microsecond
;
}
return
TemporalUnit
:
:
Nanosecond
;
}
static
DurationObject
*
CreateTemporalDuration
(
JSContext
*
cx
const
CallArgs
&
args
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_Duration
&
proto
)
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithClassProto
<
DurationObject
>
(
cx
proto
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
return
object
;
}
DurationObject
*
js
:
:
temporal
:
:
CreateTemporalDuration
(
JSContext
*
cx
const
Duration
&
duration
)
{
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
MOZ_ASSERT
(
IsInteger
(
years
)
)
;
MOZ_ASSERT
(
IsInteger
(
months
)
)
;
MOZ_ASSERT
(
IsInteger
(
weeks
)
)
;
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
IsInteger
(
hours
)
)
;
MOZ_ASSERT
(
IsInteger
(
minutes
)
)
;
MOZ_ASSERT
(
IsInteger
(
seconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
milliseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
microseconds
)
)
;
MOZ_ASSERT
(
IsInteger
(
nanoseconds
)
)
;
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
nullptr
;
}
auto
*
object
=
NewBuiltinClassInstance
<
DurationObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
DurationObject
:
:
YEARS_SLOT
NumberValue
(
years
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MONTHS_SLOT
NumberValue
(
months
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
WEEKS_SLOT
NumberValue
(
weeks
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
DAYS_SLOT
NumberValue
(
days
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
HOURS_SLOT
NumberValue
(
hours
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MINUTES_SLOT
NumberValue
(
minutes
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
SECONDS_SLOT
NumberValue
(
seconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MILLISECONDS_SLOT
NumberValue
(
milliseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
MICROSECONDS_SLOT
NumberValue
(
microseconds
+
(
+
0
.
0
)
)
)
;
object
-
>
setFixedSlot
(
DurationObject
:
:
NANOSECONDS_SLOT
NumberValue
(
nanoseconds
+
(
+
0
.
0
)
)
)
;
return
object
;
}
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
const
char
*
name
Handle
<
Value
>
argument
double
*
num
)
{
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
if
(
!
js
:
:
IsInteger
(
d
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
name
)
;
return
false
;
}
*
num
=
d
;
return
true
;
}
static
bool
ToIntegerIfIntegral
(
JSContext
*
cx
Handle
<
PropertyName
*
>
name
Handle
<
Value
>
argument
double
*
result
)
{
double
d
;
if
(
!
JS
:
:
ToNumber
(
cx
argument
&
d
)
)
{
return
false
;
}
if
(
!
js
:
:
IsInteger
(
d
)
)
{
if
(
auto
nameStr
=
js
:
:
QuoteString
(
cx
name
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
d
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_NOT_INTEGER
numStr
nameStr
.
get
(
)
)
;
}
return
false
;
}
*
result
=
d
;
return
true
;
}
static
bool
ToTemporalPartialDurationRecord
(
JSContext
*
cx
Handle
<
JSObject
*
>
temporalDurationLike
Duration
*
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
bool
any
=
false
;
auto
getDurationProperty
=
[
&
]
(
Handle
<
PropertyName
*
>
name
double
*
num
)
{
if
(
!
GetProperty
(
cx
temporalDurationLike
temporalDurationLike
name
&
value
)
)
{
return
false
;
}
if
(
!
value
.
isUndefined
(
)
)
{
any
=
true
;
if
(
!
ToIntegerIfIntegral
(
cx
name
value
num
)
)
{
return
false
;
}
}
return
true
;
}
;
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
days
&
result
-
>
days
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
hours
&
result
-
>
hours
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
microseconds
&
result
-
>
microseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
milliseconds
&
result
-
>
milliseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
minutes
&
result
-
>
minutes
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
months
&
result
-
>
months
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
nanoseconds
&
result
-
>
nanoseconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
seconds
&
result
-
>
seconds
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
weeks
&
result
-
>
weeks
)
)
{
return
false
;
}
if
(
!
getDurationProperty
(
cx
-
>
names
(
)
.
years
&
result
-
>
years
)
)
{
return
false
;
}
if
(
!
any
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ToTemporalDurationRecord
(
JSContext
*
cx
Handle
<
Value
>
temporalDurationLike
Duration
*
result
)
{
if
(
!
temporalDurationLike
.
isObject
(
)
)
{
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
temporalDurationLike
)
)
;
if
(
!
string
)
{
return
false
;
}
return
ParseTemporalDurationString
(
cx
string
result
)
;
}
Rooted
<
JSObject
*
>
durationLike
(
cx
&
temporalDurationLike
.
toObject
(
)
)
;
if
(
auto
*
duration
=
durationLike
-
>
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
*
result
=
ToDuration
(
duration
)
;
return
true
;
}
Duration
duration
=
{
}
;
if
(
!
ToTemporalPartialDurationRecord
(
cx
durationLike
&
duration
)
)
{
return
false
;
}
if
(
!
ThrowIfInvalidDuration
(
cx
duration
)
)
{
return
false
;
}
*
result
=
duration
;
return
true
;
}
Wrapped
<
DurationObject
*
>
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
if
(
item
.
isObject
(
)
)
{
JSObject
*
itemObj
=
&
item
.
toObject
(
)
;
if
(
itemObj
-
>
canUnwrapAs
<
DurationObject
>
(
)
)
{
return
itemObj
;
}
}
Duration
result
;
if
(
!
ToTemporalDurationRecord
(
cx
item
&
result
)
)
{
return
nullptr
;
}
return
CreateTemporalDuration
(
cx
result
)
;
}
bool
js
:
:
temporal
:
:
ToTemporalDuration
(
JSContext
*
cx
Handle
<
Value
>
item
Duration
*
result
)
{
auto
obj
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToDuration
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
static
bool
CalculateOffsetShift
(
JSContext
*
cx
Handle
<
JSObject
*
>
relativeTo
const
Duration
&
duration
int64_t
*
result
)
{
if
(
!
relativeTo
)
{
*
result
=
0
;
return
true
;
}
auto
*
zonedRelativeTo
=
relativeTo
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
;
if
(
!
zonedRelativeTo
)
{
*
result
=
0
;
return
true
;
}
auto
epochInstant
=
ToInstant
(
zonedRelativeTo
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedRelativeTo
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedRelativeTo
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
int64_t
offsetBefore
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
epochInstant
&
offsetBefore
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetBefore
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Instant
after
;
if
(
!
AddZonedDateTime
(
cx
epochInstant
timeZone
calendar
duration
&
after
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
after
)
)
;
int64_t
offsetAfter
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
after
&
offsetAfter
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetAfter
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
*
result
=
offsetAfter
-
offsetBefore
;
return
true
;
}
static
int32_t
DaysUntil
(
const
PlainDate
&
earlier
const
PlainDate
&
later
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
earlier
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
later
)
)
;
int32_t
epochDaysEarlier
=
MakeDay
(
earlier
)
;
MOZ_ASSERT
(
std
:
:
abs
(
epochDaysEarlier
)
<
=
100
'
000
'
000
)
;
int32_t
epochDaysLater
=
MakeDay
(
later
)
;
MOZ_ASSERT
(
std
:
:
abs
(
epochDaysLater
)
<
=
100
'
000
'
000
)
;
return
epochDaysLater
-
epochDaysEarlier
;
}
static
bool
MoveRelativeDate
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
Handle
<
Wrapped
<
PlainDateObject
*
>
>
relativeTo
Handle
<
DurationObject
*
>
duration
Handle
<
Value
>
dateAdd
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
relativeToResult
int32_t
*
daysResult
)
{
MOZ_ASSERT
(
IsCallable
(
dateAdd
)
|
|
dateAdd
.
isUndefined
(
)
)
;
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
relativeToDate
=
ToPlainDate
(
unwrappedRelativeTo
)
;
auto
newDate
=
CalendarDateAdd
(
cx
calendar
relativeTo
duration
dateAdd
)
;
if
(
!
newDate
)
{
return
false
;
}
auto
later
=
ToPlainDate
(
&
newDate
.
unwrap
(
)
)
;
relativeToResult
.
set
(
newDate
)
;
*
daysResult
=
DaysUntil
(
relativeToDate
later
)
;
MOZ_ASSERT
(
std
:
:
abs
(
*
daysResult
)
<
=
200
'
000
'
000
)
;
return
true
;
}
static
ZonedDateTimeObject
*
MoveRelativeZonedDateTime
(
JSContext
*
cx
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
zonedDateTime
const
Duration
&
duration
)
{
auto
*
unwrappedZonedDateTime
=
zonedDateTime
.
unwrap
(
cx
)
;
if
(
!
unwrappedZonedDateTime
)
{
return
nullptr
;
}
auto
instant
=
ToInstant
(
unwrappedZonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
unwrappedZonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedZonedDateTime
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
nullptr
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
nullptr
;
}
Instant
intermediateNs
;
if
(
!
AddZonedDateTime
(
cx
instant
timeZone
calendar
duration
.
date
(
)
&
intermediateNs
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
return
CreateTemporalZonedDateTime
(
cx
intermediateNs
timeZone
calendar
)
;
}
static
mozilla
:
:
Maybe
<
int64_t
>
TotalDurationNanoseconds
(
const
Duration
&
duration
int64_t
offsetShift
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetShift
)
<
=
2
*
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int64_t
days
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
days
&
days
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
int64_t
hours
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
hours
&
hours
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
mozilla
:
:
CheckedInt64
result
=
days
;
result
*
=
24
;
result
+
=
hours
;
int64_t
minutes
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
minutes
&
minutes
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
60
;
result
+
=
minutes
;
int64_t
seconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
seconds
&
seconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
60
;
result
+
=
seconds
;
int64_t
milliseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
milliseconds
&
milliseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
milliseconds
;
int64_t
microseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
microseconds
&
microseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
microseconds
;
int64_t
nanoseconds
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
nanoseconds
&
nanoseconds
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
result
*
=
1000
;
result
+
=
nanoseconds
;
if
(
days
!
=
0
)
{
result
-
=
offsetShift
;
}
if
(
!
result
.
isValid
(
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
return
mozilla
:
:
Some
(
result
.
value
(
)
)
;
}
static
BigInt
*
TotalDurationNanosecondsSlow
(
JSContext
*
cx
const
Duration
&
duration
int64_t
offsetShift
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetShift
)
<
=
2
*
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Rooted
<
BigInt
*
>
result
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
result
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
temp
(
cx
)
;
auto
multiplyAdd
=
[
&
]
(
int32_t
factor
double
number
)
{
temp
=
BigInt
:
:
createFromInt64
(
cx
factor
)
;
if
(
!
temp
)
{
return
false
;
}
result
=
BigInt
:
:
mul
(
cx
result
temp
)
;
if
(
!
result
)
{
return
false
;
}
temp
=
BigInt
:
:
createFromDouble
(
cx
number
)
;
if
(
!
temp
)
{
return
false
;
}
result
=
BigInt
:
:
add
(
cx
result
temp
)
;
return
!
!
result
;
}
;
if
(
!
multiplyAdd
(
24
duration
.
hours
)
)
{
return
nullptr
;
}
if
(
!
multiplyAdd
(
60
duration
.
minutes
)
)
{
return
nullptr
;
}
if
(
!
multiplyAdd
(
60
duration
.
seconds
)
)
{
return
nullptr
;
}
if
(
!
multiplyAdd
(
1000
duration
.
milliseconds
)
)
{
return
nullptr
;
}
if
(
!
multiplyAdd
(
1000
duration
.
microseconds
)
)
{
return
nullptr
;
}
if
(
!
multiplyAdd
(
1000
duration
.
nanoseconds
)
)
{
return
nullptr
;
}
if
(
duration
.
days
!
=
0
&
&
offsetShift
!
=
0
)
{
temp
=
BigInt
:
:
createFromInt64
(
cx
offsetShift
)
;
if
(
!
temp
)
{
return
nullptr
;
}
result
=
BigInt
:
:
sub
(
cx
result
temp
)
;
if
(
!
result
)
{
return
nullptr
;
}
}
return
result
;
}
struct
NanosecondsAndDays
final
{
int32_t
days
=
0
;
int64_t
nanoseconds
=
0
;
}
;
static
:
:
NanosecondsAndDays
NanosecondsToDays
(
int64_t
nanoseconds
)
{
constexpr
int64_t
dayLengthNs
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
static_assert
(
INT64_MAX
/
dayLengthNs
<
=
INT32_MAX
"
days
doesn
'
t
exceed
INT32_MAX
"
)
;
return
{
int32_t
(
nanoseconds
/
dayLengthNs
)
nanoseconds
%
dayLengthNs
}
;
}
static
bool
NanosecondsToDaysSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanoseconds
MutableHandle
<
temporal
:
:
NanosecondsAndDays
>
result
)
{
constexpr
int64_t
dayLengthNs
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
Rooted
<
BigInt
*
>
dayLength
(
cx
BigInt
:
:
createFromInt64
(
cx
dayLengthNs
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
Rooted
<
BigInt
*
>
days
(
cx
)
;
Rooted
<
BigInt
*
>
nanos
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
dayLength
&
days
&
nanos
)
)
{
return
false
;
}
result
.
initialize
(
days
ToInstantSpan
(
nanos
)
InstantSpan
:
:
fromNanoseconds
(
dayLengthNs
)
)
;
return
true
;
}
static
bool
NanosecondsToDays
(
JSContext
*
cx
const
Duration
&
duration
MutableHandle
<
temporal
:
:
NanosecondsAndDays
>
result
)
{
if
(
auto
total
=
TotalDurationNanoseconds
(
duration
.
time
(
)
0
)
)
{
auto
nanosAndDays
=
:
:
NanosecondsToDays
(
*
total
)
;
result
.
initialize
(
nanosAndDays
.
days
InstantSpan
:
:
fromNanoseconds
(
nanosAndDays
.
nanoseconds
)
InstantSpan
:
:
fromNanoseconds
(
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
)
;
return
true
;
}
Rooted
<
BigInt
*
>
nanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
duration
.
time
(
)
0
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
return
:
:
NanosecondsToDaysSlow
(
cx
nanoseconds
result
)
;
}
static
bool
NanosecondsToDaysError
(
JSContext
*
cx
Handle
<
ZonedDateTimeObject
*
>
zonedRelativeTo
)
{
auto
startNs
=
ToInstant
(
zonedRelativeTo
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedRelativeTo
-
>
timeZone
(
)
)
;
PlainDateTime
startDateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
startNs
&
startDateTime
)
)
{
return
false
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
static
bool
NanosecondsToDays
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
ZonedDateTimeObject
*
>
zonedRelativeTo
MutableHandle
<
temporal
:
:
NanosecondsAndDays
>
result
)
{
if
(
auto
total
=
TotalDurationNanoseconds
(
duration
.
time
(
)
0
)
)
{
auto
nanoseconds
=
InstantSpan
:
:
fromNanoseconds
(
*
total
)
;
MOZ_ASSERT
(
IsValidInstantSpan
(
nanoseconds
)
)
;
return
NanosecondsToDays
(
cx
nanoseconds
zonedRelativeTo
result
)
;
}
auto
*
nanoseconds
=
TotalDurationNanosecondsSlow
(
cx
duration
.
time
(
)
0
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
if
(
!
IsValidInstantSpan
(
nanoseconds
)
)
{
return
NanosecondsToDaysError
(
cx
zonedRelativeTo
)
;
}
return
NanosecondsToDays
(
cx
ToInstantSpan
(
nanoseconds
)
zonedRelativeTo
result
)
;
}
static
TimeDuration
CreateTimeDurationRecord
(
int64_t
days
int64_t
hours
int64_t
minutes
int64_t
seconds
int64_t
milliseconds
int64_t
microseconds
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
0
0
0
double
(
days
)
double
(
hours
)
double
(
minutes
)
double
(
seconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
)
)
;
return
{
double
(
days
)
double
(
hours
)
double
(
minutes
)
double
(
seconds
)
double
(
milliseconds
)
double
(
microseconds
)
double
(
nanoseconds
)
}
;
}
static
bool
CreateTimeDurationRecordPossiblyInfinite
(
JSContext
*
cx
double
days
double
hours
double
minutes
double
seconds
double
milliseconds
double
microseconds
double
nanoseconds
TimeDuration
*
result
)
{
MOZ_ASSERT
(
!
std
:
:
isnan
(
days
)
&
&
!
std
:
:
isnan
(
hours
)
&
&
!
std
:
:
isnan
(
minutes
)
&
&
!
std
:
:
isnan
(
seconds
)
&
&
!
std
:
:
isnan
(
milliseconds
)
&
&
!
std
:
:
isnan
(
microseconds
)
&
&
!
std
:
:
isnan
(
nanoseconds
)
)
;
for
(
double
v
:
{
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
{
if
(
std
:
:
isinf
(
v
)
)
{
*
result
=
{
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
return
true
;
}
}
if
(
!
ThrowIfInvalidDuration
(
cx
{
0
0
0
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
)
{
return
false
;
}
*
result
=
{
days
+
(
+
0
.
0
)
hours
+
(
+
0
.
0
)
minutes
+
(
+
0
.
0
)
seconds
+
(
+
0
.
0
)
milliseconds
+
(
+
0
.
0
)
microseconds
+
(
+
0
.
0
)
nanoseconds
+
(
+
0
.
0
)
}
;
return
true
;
}
static
TimeDuration
BalanceTimeDuration
(
int64_t
nanoseconds
TemporalUnit
largestUnit
)
{
int64_t
days
=
0
;
int64_t
hours
=
0
;
int64_t
minutes
=
0
;
int64_t
seconds
=
0
;
int64_t
milliseconds
=
0
;
int64_t
microseconds
=
0
;
switch
(
largestUnit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
seconds
=
milliseconds
/
1000
;
milliseconds
=
milliseconds
%
1000
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
hours
=
minutes
/
60
;
minutes
=
minutes
%
60
;
days
=
hours
/
24
;
hours
=
hours
%
24
;
break
;
}
case
TemporalUnit
:
:
Hour
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
seconds
=
milliseconds
/
1000
;
milliseconds
=
milliseconds
%
1000
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
hours
=
minutes
/
60
;
minutes
=
minutes
%
60
;
break
;
}
case
TemporalUnit
:
:
Minute
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
seconds
=
milliseconds
/
1000
;
milliseconds
=
milliseconds
%
1000
;
minutes
=
seconds
/
60
;
seconds
=
seconds
%
60
;
break
;
}
case
TemporalUnit
:
:
Second
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
seconds
=
milliseconds
/
1000
;
milliseconds
=
milliseconds
%
1000
;
break
;
}
case
TemporalUnit
:
:
Millisecond
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
milliseconds
=
microseconds
/
1000
;
microseconds
=
microseconds
%
1000
;
break
;
}
case
TemporalUnit
:
:
Microsecond
:
{
microseconds
=
nanoseconds
/
1000
;
nanoseconds
=
nanoseconds
%
1000
;
break
;
}
case
TemporalUnit
:
:
Nanosecond
:
{
break
;
}
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
return
CreateTimeDurationRecord
(
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
)
;
}
static
bool
BalancePossiblyInfiniteTimeDurationSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanos
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
BigInt
*
zero
=
BigInt
:
:
zero
(
cx
)
;
if
(
!
zero
)
{
return
false
;
}
Rooted
<
BigInt
*
>
days
(
cx
zero
)
;
Rooted
<
BigInt
*
>
hours
(
cx
zero
)
;
Rooted
<
BigInt
*
>
minutes
(
cx
zero
)
;
Rooted
<
BigInt
*
>
seconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
milliseconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
microseconds
(
cx
zero
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
nanos
)
;
Rooted
<
BigInt
*
>
thousand
(
cx
BigInt
:
:
createFromInt64
(
cx
1000
)
)
;
if
(
!
thousand
)
{
return
false
;
}
Rooted
<
BigInt
*
>
sixty
(
cx
BigInt
:
:
createFromInt64
(
cx
60
)
)
;
if
(
!
sixty
)
{
return
false
;
}
Rooted
<
BigInt
*
>
twentyfour
(
cx
BigInt
:
:
createFromInt64
(
cx
24
)
)
;
if
(
!
twentyfour
)
{
return
false
;
}
switch
(
largestUnit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Day
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
seconds
sixty
&
minutes
&
seconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
minutes
sixty
&
hours
&
minutes
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
hours
twentyfour
&
days
&
hours
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Hour
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
seconds
sixty
&
minutes
&
seconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
minutes
sixty
&
hours
&
minutes
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Minute
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
seconds
sixty
&
minutes
&
seconds
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Second
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
milliseconds
thousand
&
seconds
&
milliseconds
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Millisecond
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
if
(
!
BigInt
:
:
divmod
(
cx
microseconds
thousand
&
milliseconds
&
microseconds
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Microsecond
:
{
if
(
!
BigInt
:
:
divmod
(
cx
nanoseconds
thousand
&
microseconds
&
nanoseconds
)
)
{
return
false
;
}
break
;
}
case
TemporalUnit
:
:
Nanosecond
:
{
break
;
}
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
return
CreateTimeDurationRecordPossiblyInfinite
(
cx
BigInt
:
:
numberValue
(
days
)
BigInt
:
:
numberValue
(
hours
)
BigInt
:
:
numberValue
(
minutes
)
BigInt
:
:
numberValue
(
seconds
)
BigInt
:
:
numberValue
(
milliseconds
)
BigInt
:
:
numberValue
(
microseconds
)
BigInt
:
:
numberValue
(
nanoseconds
)
result
)
;
}
static
bool
BalanceTimeDurationSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
nanoseconds
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
if
(
!
BalancePossiblyInfiniteTimeDurationSlow
(
cx
nanoseconds
largestUnit
result
)
)
{
return
false
;
}
return
ThrowIfInvalidDuration
(
cx
result
-
>
toDuration
(
)
)
;
}
static
bool
BalanceTimeDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
MOZ_ASSERT
(
largestUnit
>
=
TemporalUnit
:
:
Day
)
;
if
(
auto
oneNanoseconds
=
TotalDurationNanoseconds
(
one
0
)
)
{
if
(
auto
twoNanoseconds
=
TotalDurationNanoseconds
(
two
0
)
)
{
mozilla
:
:
CheckedInt64
nanoseconds
=
*
oneNanoseconds
;
nanoseconds
+
=
*
twoNanoseconds
;
if
(
nanoseconds
.
isValid
(
)
)
{
*
result
=
:
:
BalanceTimeDuration
(
nanoseconds
.
value
(
)
largestUnit
)
;
return
true
;
}
}
}
Rooted
<
BigInt
*
>
oneNanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
one
0
)
)
;
if
(
!
oneNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
twoNanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
two
0
)
)
;
if
(
!
twoNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoseconds
(
cx
BigInt
:
:
add
(
cx
oneNanoseconds
twoNanoseconds
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
return
BalanceTimeDurationSlow
(
cx
nanoseconds
largestUnit
result
)
;
}
static
bool
BalanceTimeDuration
(
JSContext
*
cx
double
days
const
Duration
&
one
const
Duration
&
two
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
if
(
auto
oneNanoseconds
=
TotalDurationNanoseconds
(
one
0
)
)
{
if
(
auto
twoNanoseconds
=
TotalDurationNanoseconds
(
two
0
)
)
{
int64_t
intDays
;
if
(
mozilla
:
:
NumberEqualsInt64
(
days
&
intDays
)
)
{
mozilla
:
:
CheckedInt64
daysNanoseconds
=
intDays
;
daysNanoseconds
*
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
;
mozilla
:
:
CheckedInt64
nanoseconds
=
*
oneNanoseconds
;
nanoseconds
+
=
*
twoNanoseconds
;
nanoseconds
+
=
daysNanoseconds
;
if
(
nanoseconds
.
isValid
(
)
)
{
*
result
=
:
:
BalanceTimeDuration
(
nanoseconds
.
value
(
)
largestUnit
)
;
return
true
;
}
}
}
}
Rooted
<
BigInt
*
>
oneNanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
one
0
)
)
;
if
(
!
oneNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
twoNanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
two
0
)
)
;
if
(
!
twoNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoseconds
(
cx
BigInt
:
:
add
(
cx
oneNanoseconds
twoNanoseconds
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
if
(
days
)
{
Rooted
<
BigInt
*
>
daysNanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
{
0
0
0
days
}
0
)
)
;
if
(
!
daysNanoseconds
)
{
return
false
;
}
nanoseconds
=
BigInt
:
:
add
(
cx
nanoseconds
daysNanoseconds
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
}
return
BalanceTimeDurationSlow
(
cx
nanoseconds
largestUnit
result
)
;
}
static
bool
BalancePossiblyInfiniteTimeDuration
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
.
time
(
)
)
)
;
if
(
auto
nanoseconds
=
TotalDurationNanoseconds
(
duration
0
)
)
{
*
result
=
:
:
BalanceTimeDuration
(
*
nanoseconds
largestUnit
)
;
return
true
;
}
Rooted
<
BigInt
*
>
nanoseconds
(
cx
TotalDurationNanosecondsSlow
(
cx
duration
0
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
return
:
:
BalancePossiblyInfiniteTimeDurationSlow
(
cx
nanoseconds
largestUnit
result
)
;
}
bool
js
:
:
temporal
:
:
BalanceTimeDuration
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
if
(
!
:
:
BalancePossiblyInfiniteTimeDuration
(
cx
duration
largestUnit
result
)
)
{
return
false
;
}
return
ThrowIfInvalidDuration
(
cx
result
-
>
toDuration
(
)
)
;
}
static
bool
BalancePossiblyInfiniteTimeDurationRelative
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeTo
TimeDuration
*
result
)
{
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
epochInstant
=
ToInstant
(
unwrappedRelativeTo
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
unwrappedRelativeTo
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedRelativeTo
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
Instant
endNs
;
if
(
!
AddZonedDateTime
(
cx
epochInstant
timeZone
calendar
{
0
0
0
duration
.
days
duration
.
hours
duration
.
minutes
duration
.
seconds
duration
.
milliseconds
duration
.
microseconds
duration
.
nanoseconds
}
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
auto
nanoseconds
=
endNs
-
epochInstant
;
MOZ_ASSERT
(
IsValidInstantSpan
(
nanoseconds
)
)
;
double
days
=
0
;
if
(
TemporalUnit
:
:
Year
<
=
largestUnit
&
&
largestUnit
<
=
TemporalUnit
:
:
Day
)
{
Rooted
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
(
cx
)
;
if
(
!
NanosecondsToDays
(
cx
nanoseconds
relativeTo
&
nanosAndDays
)
)
{
return
false
;
}
days
=
nanosAndDays
.
daysNumber
(
)
;
MOZ_ASSERT
(
IsInteger
(
days
)
)
;
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
;
MOZ_ASSERT_IF
(
days
>
0
nanoseconds
>
=
InstantSpan
{
}
)
;
MOZ_ASSERT_IF
(
days
<
0
nanoseconds
<
=
InstantSpan
{
}
)
;
largestUnit
=
TemporalUnit
:
:
Hour
;
}
TimeDuration
balanceResult
;
if
(
auto
nanos
=
nanoseconds
.
toNanoseconds
(
)
;
nanos
.
isValid
(
)
)
{
balanceResult
=
:
:
BalanceTimeDuration
(
nanos
.
value
(
)
largestUnit
)
;
MOZ_ASSERT
(
IsValidDuration
(
balanceResult
.
toDuration
(
)
)
)
;
}
else
{
Rooted
<
BigInt
*
>
ns
(
cx
ToEpochNanoseconds
(
cx
nanoseconds
)
)
;
if
(
!
ns
)
{
return
false
;
}
if
(
!
:
:
BalancePossiblyInfiniteTimeDurationSlow
(
cx
ns
largestUnit
&
balanceResult
)
)
{
return
false
;
}
if
(
!
IsValidDuration
(
balanceResult
.
toDuration
(
)
)
)
{
*
result
=
balanceResult
;
return
true
;
}
}
*
result
=
{
days
balanceResult
.
hours
balanceResult
.
minutes
balanceResult
.
seconds
balanceResult
.
milliseconds
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
;
return
true
;
}
static
bool
BalanceTimeDurationRelative
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeTo
TimeDuration
*
result
)
{
if
(
!
BalancePossiblyInfiniteTimeDurationRelative
(
cx
duration
largestUnit
relativeTo
result
)
)
{
return
false
;
}
return
ThrowIfInvalidDuration
(
cx
result
-
>
toDuration
(
)
)
;
}
bool
js
:
:
temporal
:
:
BalanceTimeDuration
(
JSContext
*
cx
const
InstantSpan
&
nanoseconds
TemporalUnit
largestUnit
TimeDuration
*
result
)
{
MOZ_ASSERT
(
IsValidInstantSpan
(
nanoseconds
)
)
;
if
(
auto
nanos
=
nanoseconds
.
toNanoseconds
(
)
;
nanos
.
isValid
(
)
)
{
*
result
=
:
:
BalanceTimeDuration
(
nanos
.
value
(
)
largestUnit
)
;
return
true
;
}
Rooted
<
BigInt
*
>
nanos
(
cx
ToEpochNanoseconds
(
cx
nanoseconds
)
)
;
if
(
!
nanos
)
{
return
false
;
}
return
:
:
BalanceTimeDurationSlow
(
cx
nanos
largestUnit
result
)
;
}
static
DateDuration
CreateDateDurationRecord
(
double
years
double
months
double
weeks
double
days
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
years
months
weeks
days
}
)
)
;
return
{
years
months
weeks
days
}
;
}
static
bool
CreateDateDurationRecord
(
JSContext
*
cx
double
years
double
months
double
weeks
double
days
DateDuration
*
result
)
{
if
(
!
ThrowIfInvalidDuration
(
cx
{
years
months
weeks
days
}
)
)
{
return
false
;
}
*
result
=
{
years
months
weeks
days
}
;
return
true
;
}
static
double
IsSafeInteger
(
double
num
)
{
MOZ_ASSERT
(
js
:
:
IsInteger
(
num
)
|
|
std
:
:
isinf
(
num
)
)
;
constexpr
double
maxSafeInteger
=
DOUBLE_INTEGRAL_PRECISION_LIMIT
-
1
;
constexpr
double
minSafeInteger
=
-
maxSafeInteger
;
return
minSafeInteger
<
=
num
&
&
num
<
=
maxSafeInteger
;
}
static
bool
UnbalanceDateDurationRelativeSlow
(
JSContext
*
cx
const
Duration
&
duration
double
amountToAdd
TemporalUnit
largestUnit
int32_t
sign
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
DurationObject
*
>
oneYear
Handle
<
DurationObject
*
>
oneMonth
Handle
<
DurationObject
*
>
oneWeek
Handle
<
Value
>
dateAdd
Handle
<
Value
>
dateUntil
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
dateRelativeTo
)
;
MOZ_ASSERT
(
calendar
)
;
Rooted
<
BigInt
*
>
years
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
years
)
)
;
if
(
!
years
)
{
return
false
;
}
Rooted
<
BigInt
*
>
months
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
months
)
)
;
if
(
!
months
)
{
return
false
;
}
Rooted
<
BigInt
*
>
weeks
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
weeks
)
)
;
if
(
!
weeks
)
{
return
false
;
}
Rooted
<
BigInt
*
>
days
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
days
)
{
return
false
;
}
MOZ_ASSERT
(
largestUnit
!
=
TemporalUnit
:
:
Year
)
;
MOZ_ASSERT
(
!
years
-
>
isZero
(
)
|
|
!
months
-
>
isZero
(
)
|
|
!
weeks
-
>
isZero
(
)
|
|
!
days
-
>
isZero
(
)
)
;
MOZ_ASSERT
(
sign
=
=
-
1
|
|
sign
=
=
1
)
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
if
(
amountToAdd
)
{
Rooted
<
BigInt
*
>
toAdd
(
cx
BigInt
:
:
createFromDouble
(
cx
amountToAdd
)
)
;
if
(
!
toAdd
)
{
return
false
;
}
months
=
BigInt
:
:
add
(
cx
months
toAdd
)
;
if
(
!
months
)
{
return
false
;
}
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
Rooted
<
BigInt
*
>
oneYearMonths
(
cx
)
;
while
(
!
years
-
>
isZero
(
)
)
{
newRelativeTo
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
)
;
if
(
!
newRelativeTo
)
{
return
false
;
}
Duration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
newRelativeTo
TemporalUnit
:
:
Month
dateUntil
&
untilResult
)
)
{
return
false
;
}
oneYearMonths
=
BigInt
:
:
createFromDouble
(
cx
untilResult
.
months
)
;
if
(
!
oneYearMonths
)
{
return
false
;
}
dateRelativeTo
.
set
(
newRelativeTo
)
;
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
months
=
BigInt
:
:
add
(
cx
months
oneYearMonths
)
;
if
(
!
months
)
{
return
false
;
}
}
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
{
if
(
amountToAdd
)
{
Rooted
<
BigInt
*
>
toAdd
(
cx
BigInt
:
:
createFromDouble
(
cx
amountToAdd
)
)
;
if
(
!
toAdd
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
toAdd
)
;
if
(
!
days
)
{
return
false
;
}
if
(
!
years
-
>
isZero
(
)
)
{
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
!
months
-
>
isZero
(
)
)
;
if
(
sign
<
0
)
{
months
=
BigInt
:
:
inc
(
cx
months
)
;
}
else
{
months
=
BigInt
:
:
dec
(
cx
months
)
;
}
if
(
!
months
)
{
return
false
;
}
}
}
Rooted
<
BigInt
*
>
oneYearDays
(
cx
)
;
while
(
!
years
-
>
isZero
(
)
)
{
int32_t
oneYearDaysInt
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
dateRelativeTo
&
oneYearDaysInt
)
)
{
return
false
;
}
oneYearDays
=
BigInt
:
:
createFromInt64
(
cx
oneYearDaysInt
)
;
if
(
!
oneYearDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
oneYearDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
}
Rooted
<
BigInt
*
>
oneMonthDays
(
cx
)
;
while
(
!
months
-
>
isZero
(
)
)
{
int32_t
oneMonthDaysInt
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
dateRelativeTo
&
oneMonthDaysInt
)
)
{
return
false
;
}
oneMonthDays
=
BigInt
:
:
createFromInt64
(
cx
oneMonthDaysInt
)
;
if
(
!
oneMonthDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
oneMonthDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
sign
<
0
)
{
months
=
BigInt
:
:
inc
(
cx
months
)
;
}
else
{
months
=
BigInt
:
:
dec
(
cx
months
)
;
}
if
(
!
months
)
{
return
false
;
}
}
}
else
if
(
!
years
-
>
isZero
(
)
|
|
!
months
-
>
isZero
(
)
|
|
!
weeks
-
>
isZero
(
)
)
{
if
(
amountToAdd
)
{
Rooted
<
BigInt
*
>
toAdd
(
cx
BigInt
:
:
createFromDouble
(
cx
amountToAdd
)
)
;
if
(
!
toAdd
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
toAdd
)
;
if
(
!
days
)
{
return
false
;
}
if
(
!
years
-
>
isZero
(
)
)
{
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
}
else
if
(
!
months
-
>
isZero
(
)
)
{
if
(
sign
<
0
)
{
months
=
BigInt
:
:
inc
(
cx
months
)
;
}
else
{
months
=
BigInt
:
:
dec
(
cx
months
)
;
}
if
(
!
months
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
!
weeks
-
>
isZero
(
)
)
;
if
(
sign
<
0
)
{
weeks
=
BigInt
:
:
inc
(
cx
weeks
)
;
}
else
{
weeks
=
BigInt
:
:
dec
(
cx
weeks
)
;
}
if
(
!
years
)
{
return
false
;
}
}
}
Rooted
<
BigInt
*
>
oneYearDays
(
cx
)
;
while
(
!
years
-
>
isZero
(
)
)
{
int32_t
oneYearDaysInt
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
dateRelativeTo
&
oneYearDaysInt
)
)
{
return
false
;
}
oneYearDays
=
BigInt
:
:
createFromInt64
(
cx
oneYearDaysInt
)
;
if
(
!
oneYearDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
oneYearDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
sign
<
0
)
{
years
=
BigInt
:
:
inc
(
cx
years
)
;
}
else
{
years
=
BigInt
:
:
dec
(
cx
years
)
;
}
if
(
!
years
)
{
return
false
;
}
}
Rooted
<
BigInt
*
>
oneMonthDays
(
cx
)
;
while
(
!
months
-
>
isZero
(
)
)
{
int32_t
oneMonthDaysInt
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
dateRelativeTo
&
oneMonthDaysInt
)
)
{
return
false
;
}
oneMonthDays
=
BigInt
:
:
createFromInt64
(
cx
oneMonthDaysInt
)
;
if
(
!
oneMonthDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
oneMonthDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
sign
<
0
)
{
months
=
BigInt
:
:
inc
(
cx
months
)
;
}
else
{
months
=
BigInt
:
:
dec
(
cx
months
)
;
}
if
(
!
months
)
{
return
false
;
}
}
Rooted
<
BigInt
*
>
oneWeekDays
(
cx
)
;
while
(
!
weeks
-
>
isZero
(
)
)
{
int32_t
oneWeekDaysInt
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
dateRelativeTo
&
oneWeekDaysInt
)
)
{
return
false
;
}
oneWeekDays
=
BigInt
:
:
createFromInt64
(
cx
oneWeekDaysInt
)
;
if
(
!
oneWeekDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
oneWeekDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
sign
<
0
)
{
weeks
=
BigInt
:
:
inc
(
cx
weeks
)
;
}
else
{
weeks
=
BigInt
:
:
dec
(
cx
weeks
)
;
}
if
(
!
years
)
{
return
false
;
}
}
}
return
CreateDateDurationRecord
(
cx
BigInt
:
:
numberValue
(
years
)
BigInt
:
:
numberValue
(
months
)
BigInt
:
:
numberValue
(
weeks
)
BigInt
:
:
numberValue
(
days
)
result
)
;
}
static
bool
UnbalanceDateDurationRelative
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
Handle
<
JSObject
*
>
relativeTo
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
double
years
=
duration
.
years
;
double
months
=
duration
.
months
;
double
weeks
=
duration
.
weeks
;
double
days
=
duration
.
days
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
|
|
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
)
)
{
*
result
=
CreateDateDurationRecord
(
years
months
weeks
days
)
;
return
true
;
}
int32_t
sign
=
DurationSign
(
{
years
months
weeks
days
}
)
;
MOZ_ASSERT
(
sign
!
=
0
)
;
Rooted
<
DurationObject
*
>
oneYear
(
cx
CreateTemporalDuration
(
cx
{
double
(
sign
)
}
)
)
;
if
(
!
oneYear
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
oneMonth
(
cx
CreateTemporalDuration
(
cx
{
0
double
(
sign
)
}
)
)
;
if
(
!
oneMonth
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
oneWeek
(
cx
CreateTemporalDuration
(
cx
{
0
0
double
(
sign
)
}
)
)
;
if
(
!
oneWeek
)
{
return
false
;
}
auto
date
=
ToTemporalDate
(
cx
relativeTo
)
;
if
(
!
date
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
(
cx
date
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
date
.
unwrap
(
)
.
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
Rooted
<
Value
>
dateAdd
(
cx
)
;
Rooted
<
Value
>
dateUntil
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethod
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
if
(
!
GetMethod
(
cx
calendarObj
cx
-
>
names
(
)
.
dateUntil
&
dateUntil
)
)
{
return
false
;
}
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
years
)
|
|
!
IsSafeInteger
(
months
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
0
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
dateUntil
result
)
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
while
(
years
!
=
0
)
{
newRelativeTo
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
)
;
if
(
!
newRelativeTo
)
{
return
false
;
}
Duration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
newRelativeTo
TemporalUnit
:
:
Month
dateUntil
&
untilResult
)
)
{
return
false
;
}
double
oneYearMonths
=
untilResult
.
months
;
dateRelativeTo
=
newRelativeTo
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
months
+
oneYearMonths
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneYearMonths
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
years
-
=
sign
;
months
+
=
oneYearMonths
;
}
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
{
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethod
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
years
)
|
|
!
IsSafeInteger
(
months
)
|
|
!
IsSafeInteger
(
days
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
0
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
while
(
years
!
=
0
)
{
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
&
dateRelativeTo
&
oneYearDays
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
oneYearDays
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneYearDays
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
days
+
=
oneYearDays
;
years
-
=
sign
;
}
while
(
months
!
=
0
)
{
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
dateRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
oneMonthDays
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneMonthDays
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
days
+
=
oneMonthDays
;
months
-
=
sign
;
}
}
else
if
(
years
!
=
0
|
|
months
!
=
0
|
|
weeks
!
=
0
)
{
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethod
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
years
)
|
|
!
IsSafeInteger
(
months
)
|
|
!
IsSafeInteger
(
weeks
)
|
|
!
IsSafeInteger
(
days
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
0
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
while
(
years
!
=
0
)
{
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
&
dateRelativeTo
&
oneYearDays
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
oneYearDays
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneYearDays
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
days
+
=
oneYearDays
;
years
-
=
sign
;
}
while
(
months
!
=
0
)
{
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
dateRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
oneMonthDays
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneMonthDays
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
days
+
=
oneMonthDays
;
months
-
=
sign
;
}
while
(
weeks
!
=
0
)
{
int32_t
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
&
dateRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
oneWeekDays
)
)
)
{
return
UnbalanceDateDurationRelativeSlow
(
cx
{
years
months
weeks
days
}
oneWeekDays
largestUnit
sign
&
dateRelativeTo
calendar
oneYear
oneMonth
oneWeek
dateAdd
UndefinedHandleValue
result
)
;
}
days
+
=
oneWeekDays
;
weeks
-
=
sign
;
}
}
return
CreateDateDurationRecord
(
cx
years
months
weeks
days
result
)
;
}
static
bool
UnbalanceDateDurationRelative
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
double
years
=
duration
.
years
;
double
months
=
duration
.
months
;
double
weeks
=
duration
.
weeks
;
double
days
=
duration
.
days
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
|
|
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
)
)
{
*
result
=
CreateDateDurationRecord
(
years
months
weeks
days
)
;
return
true
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
calendar
"
)
;
return
false
;
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
calendar
"
)
;
return
false
;
}
else
if
(
years
!
=
0
|
|
months
!
=
0
|
|
weeks
!
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
calendar
"
)
;
return
false
;
}
*
result
=
CreateDateDurationRecord
(
years
months
weeks
days
)
;
return
true
;
}
static
bool
BalanceDateDurationRelativeSlow
(
JSContext
*
cx
TemporalUnit
largestUnit
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
MutableHandle
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
DurationObject
*
>
oneYear
Handle
<
Value
>
dateAdd
Handle
<
Value
>
dateUntil
double
months
int32_t
addedMonths
double
oneYearMonths
uint32_t
*
resultAddedYears
double
*
resultMonth
)
{
MOZ_ASSERT
(
largestUnit
=
=
TemporalUnit
:
:
Year
)
;
Rooted
<
BigInt
*
>
bigIntMonths
(
cx
BigInt
:
:
createFromDouble
(
cx
months
)
)
;
if
(
!
bigIntMonths
)
{
return
false
;
}
if
(
addedMonths
)
{
Rooted
<
BigInt
*
>
bigIntAdded
(
cx
BigInt
:
:
createFromInt64
(
cx
addedMonths
)
)
;
if
(
!
bigIntAdded
)
{
return
false
;
}
bigIntMonths
=
BigInt
:
:
add
(
cx
bigIntMonths
bigIntAdded
)
;
if
(
!
bigIntMonths
)
{
return
false
;
}
}
Rooted
<
BigInt
*
>
bigIntOneYearMonths
(
cx
BigInt
:
:
createFromDouble
(
cx
oneYearMonths
)
)
;
if
(
!
bigIntOneYearMonths
)
{
return
false
;
}
MOZ_ASSERT
(
BigInt
:
:
absoluteCompare
(
bigIntMonths
bigIntOneYearMonths
)
>
=
0
)
;
uint32_t
addedYears
=
0
;
while
(
BigInt
:
:
absoluteCompare
(
bigIntMonths
bigIntOneYearMonths
)
>
=
0
)
{
bigIntMonths
=
BigInt
:
:
sub
(
cx
bigIntMonths
bigIntOneYearMonths
)
;
if
(
!
bigIntMonths
)
{
return
false
;
}
addedYears
+
=
1
;
dateRelativeTo
.
set
(
newRelativeTo
)
;
newRelativeTo
.
set
(
CalendarDateAdd
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
)
)
;
if
(
!
newRelativeTo
)
{
return
false
;
}
Duration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
newRelativeTo
TemporalUnit
:
:
Month
dateUntil
&
untilResult
)
)
{
return
false
;
}
bigIntOneYearMonths
=
BigInt
:
:
createFromDouble
(
cx
untilResult
.
months
)
;
if
(
!
bigIntOneYearMonths
)
{
return
false
;
}
}
*
resultAddedYears
=
addedYears
;
*
resultMonth
=
BigInt
:
:
numberValue
(
bigIntMonths
)
;
return
true
;
}
static
bool
BalanceDateDurationRelative
(
JSContext
*
cx
const
Duration
&
duration
TemporalUnit
largestUnit
Handle
<
JSObject
*
>
relativeTo
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
double
years
=
duration
.
years
;
double
months
=
duration
.
months
;
double
weeks
=
duration
.
weeks
;
double
days
=
duration
.
days
;
if
(
largestUnit
>
TemporalUnit
:
:
Week
|
|
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
)
)
{
*
result
=
CreateDateDurationRecord
(
years
months
weeks
days
)
;
return
true
;
}
if
(
!
relativeTo
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
int32_t
sign
=
DurationSign
(
{
years
months
weeks
days
}
)
;
MOZ_ASSERT
(
sign
!
=
0
)
;
Rooted
<
DurationObject
*
>
oneYear
(
cx
CreateTemporalDuration
(
cx
{
double
(
sign
)
}
)
)
;
if
(
!
oneYear
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
oneMonth
(
cx
CreateTemporalDuration
(
cx
{
0
double
(
sign
)
}
)
)
;
if
(
!
oneMonth
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
oneWeek
(
cx
CreateTemporalDuration
(
cx
{
0
0
double
(
sign
)
}
)
)
;
if
(
!
oneWeek
)
{
return
false
;
}
auto
date
=
ToTemporalDate
(
cx
relativeTo
)
;
if
(
!
date
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
(
cx
date
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
date
.
unwrap
(
)
.
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
)
{
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
&
newRelativeTo
&
oneYearDays
)
)
{
return
false
;
}
uint32_t
addedYears
=
0
;
while
(
std
:
:
abs
(
days
)
>
=
std
:
:
abs
(
oneYearDays
)
)
{
days
-
=
oneYearDays
;
addedYears
+
=
1
;
dateRelativeTo
=
newRelativeTo
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
&
newRelativeTo
&
oneYearDays
)
)
{
return
false
;
}
}
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
uint32_t
addedMonths
=
0
;
while
(
std
:
:
abs
(
days
)
>
=
std
:
:
abs
(
oneMonthDays
)
)
{
days
-
=
oneMonthDays
;
addedMonths
+
=
1
;
dateRelativeTo
=
newRelativeTo
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
}
newRelativeTo
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
)
;
if
(
!
newRelativeTo
)
{
return
false
;
}
Rooted
<
Value
>
dateUntil
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateUntil
&
dateUntil
)
)
{
return
false
;
}
}
Duration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
newRelativeTo
TemporalUnit
:
:
Month
dateUntil
&
untilResult
)
)
{
return
false
;
}
double
oneYearMonths
=
untilResult
.
months
;
if
(
MOZ_LIKELY
(
IsSafeInteger
(
months
+
double
(
addedMonths
)
*
sign
)
)
)
{
months
+
=
double
(
addedMonths
)
*
sign
;
while
(
std
:
:
abs
(
months
)
>
=
std
:
:
abs
(
oneYearMonths
)
)
{
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
months
-
oneYearMonths
)
)
)
{
constexpr
int32_t
zeroAddedMonths
=
0
;
uint32_t
slowYears
;
double
slowMonths
;
if
(
!
BalanceDateDurationRelativeSlow
(
cx
largestUnit
&
dateRelativeTo
&
newRelativeTo
calendar
oneYear
dateAdd
dateUntil
months
zeroAddedMonths
oneYearMonths
&
slowYears
&
slowMonths
)
)
{
return
false
;
}
addedYears
+
=
slowYears
;
months
=
slowMonths
;
break
;
}
months
-
=
oneYearMonths
;
addedYears
+
=
1
;
dateRelativeTo
=
newRelativeTo
;
newRelativeTo
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
)
;
if
(
!
newRelativeTo
)
{
return
false
;
}
Duration
untilResult
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
newRelativeTo
TemporalUnit
:
:
Month
dateUntil
&
untilResult
)
)
{
return
false
;
}
oneYearMonths
=
untilResult
.
months
;
}
}
else
{
uint32_t
slowYears
;
double
slowMonths
;
if
(
!
BalanceDateDurationRelativeSlow
(
cx
largestUnit
&
dateRelativeTo
&
newRelativeTo
calendar
oneYear
dateAdd
dateUntil
months
int32_t
(
addedMonths
)
*
sign
oneYearMonths
&
slowYears
&
slowMonths
)
)
{
return
false
;
}
addedYears
+
=
slowYears
;
months
=
slowMonths
;
}
years
+
=
double
(
addedYears
)
*
sign
;
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
uint32_t
addedMonths
=
0
;
while
(
std
:
:
abs
(
days
)
>
=
std
:
:
abs
(
oneMonthDays
)
)
{
days
-
=
oneMonthDays
;
addedMonths
+
=
1
;
dateRelativeTo
=
newRelativeTo
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
}
months
+
=
double
(
addedMonths
)
*
sign
;
}
else
{
MOZ_ASSERT
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
;
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
uint32_t
addedWeeks
=
0
;
while
(
std
:
:
abs
(
days
)
>
=
std
:
:
abs
(
oneWeekDays
)
)
{
days
-
=
oneWeekDays
;
addedWeeks
+
=
1
;
dateRelativeTo
=
newRelativeTo
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
}
weeks
+
=
double
(
addedWeeks
)
*
sign
;
}
*
result
=
CreateDateDurationRecord
(
years
months
weeks
days
)
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Duration
*
duration
)
{
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
if
(
largestUnit
<
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
TimeDuration
result
;
if
(
!
BalanceTimeDuration
(
cx
one
two
largestUnit
&
result
)
)
{
return
false
;
}
*
duration
=
result
.
toDuration
(
)
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Handle
<
Wrapped
<
PlainDateObject
*
>
>
relativeTo
Duration
*
duration
)
{
MOZ_ASSERT
(
IsValidDuration
(
one
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
two
)
)
;
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedRelativeTo
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
auto
dateDuration1
=
one
.
date
(
)
;
auto
dateDuration2
=
two
.
date
(
)
;
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
intermediate
(
cx
CalendarDateAdd
(
cx
calendar
relativeTo
dateDuration1
dateAdd
)
)
;
if
(
!
intermediate
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
end
(
cx
CalendarDateAdd
(
cx
calendar
intermediate
dateDuration2
dateAdd
)
)
;
if
(
!
end
)
{
return
false
;
}
auto
dateLargestUnit
=
std
:
:
min
(
TemporalUnit
:
:
Day
largestUnit
)
;
Duration
dateDifference
;
if
(
!
CalendarDateUntil
(
cx
calendar
relativeTo
end
dateLargestUnit
&
dateDifference
)
)
{
return
false
;
}
TimeDuration
result
;
if
(
!
BalanceTimeDuration
(
cx
dateDifference
.
days
one
.
time
(
)
two
.
time
(
)
largestUnit
&
result
)
)
{
return
false
;
}
*
duration
=
{
dateDifference
.
years
dateDifference
.
months
dateDifference
.
weeks
result
.
days
result
.
hours
result
.
minutes
result
.
seconds
result
.
milliseconds
result
.
microseconds
result
.
nanoseconds
}
;
return
true
;
}
static
bool
AddDuration
(
JSContext
*
cx
const
Duration
&
one
const
Duration
&
two
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeTo
Duration
*
result
)
{
auto
largestUnit1
=
DefaultTemporalLargestUnit
(
one
)
;
auto
largestUnit2
=
DefaultTemporalLargestUnit
(
two
)
;
auto
largestUnit
=
std
:
:
min
(
largestUnit1
largestUnit2
)
;
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
epochInstant
=
ToInstant
(
unwrappedRelativeTo
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
unwrappedRelativeTo
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedRelativeTo
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
Instant
intermediateNs
;
if
(
!
AddZonedDateTime
(
cx
epochInstant
timeZone
calendar
one
&
intermediateNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
intermediateNs
)
)
;
Instant
endNs
;
if
(
!
AddZonedDateTime
(
cx
intermediateNs
timeZone
calendar
two
&
endNs
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
endNs
)
)
;
if
(
largestUnit
>
TemporalUnit
:
:
Day
)
{
return
DifferenceInstant
(
cx
epochInstant
endNs
Increment
{
1
}
TemporalUnit
:
:
Nanosecond
largestUnit
TemporalRoundingMode
:
:
HalfExpand
result
)
;
}
return
DifferenceZonedDateTime
(
cx
epochInstant
endNs
timeZone
calendar
largestUnit
result
)
;
}
static
bool
RoundDuration
(
JSContext
*
cx
int64_t
totalNanoseconds
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Hour
)
;
double
rounded
;
if
(
!
RoundNumberToIncrement
(
cx
totalNanoseconds
unit
increment
roundingMode
&
rounded
)
)
{
return
false
;
}
double
hours
=
0
;
double
minutes
=
0
;
double
seconds
=
0
;
double
milliseconds
=
0
;
double
microseconds
=
0
;
double
nanoseconds
=
0
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Day
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
case
TemporalUnit
:
:
Hour
:
hours
=
rounded
;
break
;
case
TemporalUnit
:
:
Minute
:
minutes
=
rounded
;
break
;
case
TemporalUnit
:
:
Second
:
seconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Millisecond
:
milliseconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Microsecond
:
microseconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Nanosecond
:
nanoseconds
=
rounded
;
break
;
}
*
result
=
{
0
0
0
0
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
return
ThrowIfInvalidDuration
(
cx
*
result
)
;
}
static
bool
RoundDuration
(
JSContext
*
cx
Handle
<
BigInt
*
>
totalNanoseconds
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Hour
)
;
double
rounded
;
if
(
!
RoundNumberToIncrement
(
cx
totalNanoseconds
unit
increment
roundingMode
&
rounded
)
)
{
return
false
;
}
double
hours
=
0
;
double
minutes
=
0
;
double
seconds
=
0
;
double
milliseconds
=
0
;
double
microseconds
=
0
;
double
nanoseconds
=
0
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Day
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
case
TemporalUnit
:
:
Hour
:
hours
=
rounded
;
break
;
case
TemporalUnit
:
:
Minute
:
minutes
=
rounded
;
break
;
case
TemporalUnit
:
:
Second
:
seconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Millisecond
:
milliseconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Microsecond
:
microseconds
=
rounded
;
break
;
case
TemporalUnit
:
:
Nanosecond
:
nanoseconds
=
rounded
;
break
;
}
*
result
=
{
0
0
0
0
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
return
ThrowIfInvalidDuration
(
cx
*
result
)
;
}
static
bool
AdjustRoundedDurationDaysSlow
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeTo
InstantSpan
dayLength
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLength
)
)
;
Rooted
<
BigInt
*
>
timeRemainderNs
(
cx
TotalDurationNanosecondsSlow
(
cx
duration
.
time
(
)
0
)
)
;
if
(
!
timeRemainderNs
)
{
return
false
;
}
int32_t
direction
=
timeRemainderNs
-
>
sign
(
)
;
Rooted
<
BigInt
*
>
dayLengthNs
(
cx
ToEpochNanoseconds
(
cx
dayLength
)
)
;
if
(
!
dayLengthNs
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLengthNs
)
)
;
Rooted
<
BigInt
*
>
oneDayLess
(
cx
BigInt
:
:
sub
(
cx
timeRemainderNs
dayLengthNs
)
)
;
if
(
!
oneDayLess
)
{
return
false
;
}
if
(
(
direction
>
0
&
&
oneDayLess
-
>
sign
(
)
<
0
)
|
|
(
direction
<
0
&
&
oneDayLess
-
>
sign
(
)
>
0
)
)
{
*
result
=
duration
;
return
true
;
}
Duration
adjustedDateDuration
;
if
(
!
AddDuration
(
cx
{
duration
.
years
duration
.
months
duration
.
weeks
duration
.
days
}
{
0
0
0
double
(
direction
)
}
relativeTo
&
adjustedDateDuration
)
)
{
return
false
;
}
Duration
roundedTimeDuration
;
if
(
!
RoundDuration
(
cx
oneDayLess
unit
increment
roundingMode
&
roundedTimeDuration
)
)
{
return
false
;
}
TimeDuration
adjustedTimeDuration
;
if
(
!
BalanceTimeDuration
(
cx
roundedTimeDuration
TemporalUnit
:
:
Hour
&
adjustedTimeDuration
)
)
{
return
false
;
}
*
result
=
{
adjustedDateDuration
.
years
adjustedDateDuration
.
months
adjustedDateDuration
.
weeks
adjustedDateDuration
.
days
adjustedTimeDuration
.
hours
adjustedTimeDuration
.
minutes
adjustedTimeDuration
.
seconds
adjustedTimeDuration
.
milliseconds
adjustedTimeDuration
.
microseconds
adjustedTimeDuration
.
nanoseconds
}
;
MOZ_ASSERT
(
IsValidDuration
(
*
result
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
AdjustRoundedDurationDays
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeTo
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
if
(
(
TemporalUnit
:
:
Year
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Day
)
|
|
(
unit
=
=
TemporalUnit
:
:
Nanosecond
&
&
increment
=
=
Increment
{
1
}
)
)
{
*
result
=
duration
;
return
true
;
}
MOZ_ASSERT
(
increment
<
MaximumTemporalDurationRoundingIncrement
(
unit
)
)
;
int32_t
direction
=
DurationSign
(
duration
.
time
(
)
)
;
auto
*
unwrappedRelativeTo
=
relativeTo
.
unwrap
(
cx
)
;
if
(
!
unwrappedRelativeTo
)
{
return
false
;
}
auto
nanoseconds
=
ToInstant
(
unwrappedRelativeTo
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
unwrappedRelativeTo
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedRelativeTo
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
Instant
dayStart
;
if
(
!
AddZonedDateTime
(
cx
nanoseconds
timeZone
calendar
duration
.
date
(
)
&
dayStart
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
dayStart
)
)
;
Instant
dayEnd
;
if
(
!
AddZonedDateTime
(
cx
dayStart
timeZone
calendar
{
0
0
0
double
(
direction
)
}
&
dayEnd
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
dayEnd
)
)
;
auto
dayLength
=
dayEnd
-
dayStart
;
MOZ_ASSERT
(
IsValidInstantSpan
(
dayLength
)
)
;
auto
timeRemainderNs
=
TotalDurationNanoseconds
(
duration
.
time
(
)
0
)
;
if
(
!
timeRemainderNs
)
{
return
AdjustRoundedDurationDaysSlow
(
cx
duration
increment
unit
roundingMode
relativeTo
dayLength
result
)
;
}
auto
checkedOneDayLess
=
*
timeRemainderNs
-
dayLength
.
toNanoseconds
(
)
;
if
(
!
checkedOneDayLess
.
isValid
(
)
)
{
return
AdjustRoundedDurationDaysSlow
(
cx
duration
increment
unit
roundingMode
relativeTo
dayLength
result
)
;
}
auto
oneDayLess
=
checkedOneDayLess
.
value
(
)
;
if
(
(
direction
>
0
&
&
oneDayLess
<
0
)
|
|
(
direction
<
0
&
&
oneDayLess
>
0
)
)
{
*
result
=
duration
;
return
true
;
}
Duration
adjustedDateDuration
;
if
(
!
AddDuration
(
cx
{
duration
.
years
duration
.
months
duration
.
weeks
duration
.
days
}
{
0
0
0
double
(
direction
)
}
relativeTo
&
adjustedDateDuration
)
)
{
return
false
;
}
Duration
roundedTimeDuration
;
if
(
!
RoundDuration
(
cx
oneDayLess
unit
increment
roundingMode
&
roundedTimeDuration
)
)
{
return
false
;
}
TimeDuration
adjustedTimeDuration
;
if
(
!
BalanceTimeDuration
(
cx
roundedTimeDuration
TemporalUnit
:
:
Hour
&
adjustedTimeDuration
)
)
{
return
false
;
}
*
result
=
{
adjustedDateDuration
.
years
adjustedDateDuration
.
months
adjustedDateDuration
.
weeks
adjustedDateDuration
.
days
adjustedTimeDuration
.
hours
adjustedTimeDuration
.
minutes
adjustedTimeDuration
.
seconds
adjustedTimeDuration
.
milliseconds
adjustedTimeDuration
.
microseconds
adjustedTimeDuration
.
nanoseconds
}
;
return
ThrowIfInvalidDuration
(
cx
*
result
)
;
}
static
bool
BigIntToStringBuilder
(
JSContext
*
cx
Handle
<
BigInt
*
>
num
JSStringBuilder
&
sb
)
{
MOZ_ASSERT
(
!
num
-
>
isNegative
(
)
)
;
JSLinearString
*
str
=
BigInt
:
:
toString
<
CanGC
>
(
cx
num
10
)
;
if
(
!
str
)
{
return
false
;
}
return
sb
.
append
(
str
)
;
}
static
bool
NumberToStringBuilder
(
JSContext
*
cx
double
num
JSStringBuilder
&
sb
)
{
MOZ_ASSERT
(
IsInteger
(
num
)
)
;
MOZ_ASSERT
(
num
>
=
0
)
;
if
(
num
<
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
{
ToCStringBuf
cbuf
;
size_t
length
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
num
&
length
)
;
return
sb
.
append
(
numStr
length
)
;
}
Rooted
<
BigInt
*
>
bi
(
cx
BigInt
:
:
createFromDouble
(
cx
num
)
)
;
if
(
!
bi
)
{
return
false
;
}
return
BigIntToStringBuilder
(
cx
bi
sb
)
;
}
static
Duration
AbsoluteDuration
(
const
Duration
&
duration
)
{
return
{
std
:
:
abs
(
duration
.
years
)
std
:
:
abs
(
duration
.
months
)
std
:
:
abs
(
duration
.
weeks
)
std
:
:
abs
(
duration
.
days
)
std
:
:
abs
(
duration
.
hours
)
std
:
:
abs
(
duration
.
minutes
)
std
:
:
abs
(
duration
.
seconds
)
std
:
:
abs
(
duration
.
milliseconds
)
std
:
:
abs
(
duration
.
microseconds
)
std
:
:
abs
(
duration
.
nanoseconds
)
}
;
}
static
JSString
*
TemporalDurationToString
(
JSContext
*
cx
const
Duration
&
duration
Precision
precision
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
!
precision
.
isMinute
(
)
)
;
const
auto
&
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
AbsoluteDuration
(
duration
)
;
if
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
&
&
hours
=
=
0
&
&
minutes
=
=
0
&
&
seconds
=
=
0
&
&
milliseconds
=
=
0
&
&
microseconds
=
=
0
&
&
nanoseconds
=
=
0
&
&
(
precision
.
isAuto
(
)
|
|
precision
.
value
(
)
=
=
0
)
)
{
return
NewStringCopyZ
<
CanGC
>
(
cx
"
PT0S
"
)
;
}
Rooted
<
BigInt
*
>
totalSecondsBigInt
(
cx
)
;
double
totalSeconds
=
seconds
;
int32_t
fraction
=
0
;
if
(
milliseconds
!
=
0
|
|
microseconds
!
=
0
|
|
nanoseconds
!
=
0
)
{
bool
imprecise
=
false
;
do
{
int64_t
sec
;
int64_t
milli
;
int64_t
micro
;
int64_t
nano
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
seconds
&
sec
)
|
|
!
mozilla
:
:
NumberEqualsInt64
(
milliseconds
&
milli
)
|
|
!
mozilla
:
:
NumberEqualsInt64
(
microseconds
&
micro
)
|
|
!
mozilla
:
:
NumberEqualsInt64
(
nanoseconds
&
nano
)
)
{
imprecise
=
true
;
break
;
}
mozilla
:
:
CheckedInt64
intermediate
;
intermediate
=
micro
;
intermediate
+
=
(
nano
/
1000
)
;
if
(
!
intermediate
.
isValid
(
)
)
{
imprecise
=
true
;
break
;
}
micro
=
intermediate
.
value
(
)
;
nano
%
=
1000
;
intermediate
=
milli
;
intermediate
+
=
(
micro
/
1000
)
;
if
(
!
intermediate
.
isValid
(
)
)
{
imprecise
=
true
;
break
;
}
milli
=
intermediate
.
value
(
)
;
micro
%
=
1000
;
intermediate
=
sec
;
intermediate
+
=
(
milli
/
1000
)
;
if
(
!
intermediate
.
isValid
(
)
)
{
imprecise
=
true
;
break
;
}
sec
=
intermediate
.
value
(
)
;
milli
%
=
1000
;
if
(
sec
<
int64_t
(
DOUBLE_INTEGRAL_PRECISION_LIMIT
)
)
{
totalSeconds
=
double
(
sec
)
;
}
else
{
totalSecondsBigInt
=
BigInt
:
:
createFromInt64
(
cx
sec
)
;
if
(
!
totalSecondsBigInt
)
{
return
nullptr
;
}
}
MOZ_ASSERT
(
0
<
=
milli
&
&
milli
<
=
999
)
;
MOZ_ASSERT
(
0
<
=
micro
&
&
micro
<
=
999
)
;
MOZ_ASSERT
(
0
<
=
nano
&
&
nano
<
=
999
)
;
fraction
=
milli
*
1
'
000
'
000
+
micro
*
1
'
000
+
nano
;
MOZ_ASSERT
(
0
<
=
fraction
&
&
fraction
<
1
'
000
'
000
'
000
)
;
}
while
(
false
)
;
if
(
imprecise
)
{
Rooted
<
BigInt
*
>
secs
(
cx
BigInt
:
:
createFromDouble
(
cx
seconds
)
)
;
if
(
!
secs
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
millis
(
cx
BigInt
:
:
createFromDouble
(
cx
milliseconds
)
)
;
if
(
!
millis
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
micros
(
cx
BigInt
:
:
createFromDouble
(
cx
microseconds
)
)
;
if
(
!
micros
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
nanos
(
cx
BigInt
:
:
createFromDouble
(
cx
nanoseconds
)
)
;
if
(
!
nanos
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
thousand
(
cx
BigInt
:
:
createFromInt64
(
cx
1000
)
)
;
if
(
!
thousand
)
{
return
nullptr
;
}
Rooted
<
BigInt
*
>
quotient
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
nanos
thousand
&
quotient
&
nanos
)
)
{
return
nullptr
;
}
micros
=
BigInt
:
:
add
(
cx
micros
quotient
)
;
if
(
!
micros
)
{
return
nullptr
;
}
if
(
!
BigInt
:
:
divmod
(
cx
micros
thousand
&
quotient
&
micros
)
)
{
return
nullptr
;
}
millis
=
BigInt
:
:
add
(
cx
millis
quotient
)
;
if
(
!
millis
)
{
return
nullptr
;
}
if
(
!
BigInt
:
:
divmod
(
cx
millis
thousand
&
quotient
&
millis
)
)
{
return
nullptr
;
}
totalSecondsBigInt
=
BigInt
:
:
add
(
cx
secs
quotient
)
;
if
(
!
totalSecondsBigInt
)
{
return
nullptr
;
}
int64_t
milli
=
BigInt
:
:
toInt64
(
millis
)
;
int64_t
micro
=
BigInt
:
:
toInt64
(
micros
)
;
int64_t
nano
=
BigInt
:
:
toInt64
(
nanos
)
;
MOZ_ASSERT
(
0
<
=
milli
&
&
milli
<
=
999
)
;
MOZ_ASSERT
(
0
<
=
micro
&
&
micro
<
=
999
)
;
MOZ_ASSERT
(
0
<
=
nano
&
&
nano
<
=
999
)
;
fraction
=
milli
*
1
'
000
'
000
+
micro
*
1
'
000
+
nano
;
MOZ_ASSERT
(
0
<
=
fraction
&
&
fraction
<
1
'
000
'
000
'
000
)
;
}
}
JSStringBuilder
result
(
cx
)
;
int32_t
sign
=
DurationSign
(
duration
)
;
if
(
sign
<
0
)
{
if
(
!
result
.
append
(
'
-
'
)
)
{
return
nullptr
;
}
}
if
(
!
result
.
append
(
'
P
'
)
)
{
return
nullptr
;
}
if
(
years
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
years
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
Y
'
)
)
{
return
nullptr
;
}
}
if
(
months
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
months
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
M
'
)
)
{
return
nullptr
;
}
}
if
(
weeks
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
weeks
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
W
'
)
)
{
return
nullptr
;
}
}
if
(
days
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
days
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
D
'
)
)
{
return
nullptr
;
}
}
bool
hasSecondsPart
=
totalSeconds
!
=
0
|
|
(
totalSecondsBigInt
&
&
!
totalSecondsBigInt
-
>
isZero
(
)
)
|
|
fraction
!
=
0
|
|
(
years
=
=
0
&
&
months
=
=
0
&
&
weeks
=
=
0
&
&
days
=
=
0
&
&
hours
=
=
0
&
&
minutes
=
=
0
)
|
|
!
precision
.
isAuto
(
)
;
if
(
hours
!
=
0
|
|
minutes
!
=
0
|
|
hasSecondsPart
)
{
if
(
!
result
.
append
(
'
T
'
)
)
{
return
nullptr
;
}
if
(
hours
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
hours
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
H
'
)
)
{
return
nullptr
;
}
}
if
(
minutes
!
=
0
)
{
if
(
!
NumberToStringBuilder
(
cx
minutes
result
)
)
{
return
nullptr
;
}
if
(
!
result
.
append
(
'
M
'
)
)
{
return
nullptr
;
}
}
if
(
hasSecondsPart
)
{
if
(
totalSecondsBigInt
)
{
if
(
!
BigIntToStringBuilder
(
cx
totalSecondsBigInt
result
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
NumberToStringBuilder
(
cx
totalSeconds
result
)
)
{
return
nullptr
;
}
}
if
(
precision
.
isAuto
(
)
)
{
if
(
fraction
!
=
0
)
{
if
(
!
result
.
append
(
'
.
'
)
)
{
return
nullptr
;
}
uint32_t
k
=
100
'
000
'
000
;
do
{
if
(
!
result
.
append
(
char
(
'
0
'
+
(
fraction
/
k
)
)
)
)
{
return
nullptr
;
}
fraction
%
=
k
;
k
/
=
10
;
}
while
(
fraction
)
;
}
}
else
if
(
precision
.
value
(
)
!
=
0
)
{
if
(
!
result
.
append
(
'
.
'
)
)
{
return
nullptr
;
}
uint32_t
k
=
100
'
000
'
000
;
for
(
uint8_t
i
=
0
;
i
<
precision
.
value
(
)
;
i
+
+
)
{
if
(
!
result
.
append
(
char
(
'
0
'
+
(
fraction
/
k
)
)
)
)
{
return
nullptr
;
}
fraction
%
=
k
;
k
/
=
10
;
}
}
if
(
!
result
.
append
(
'
S
'
)
)
{
return
nullptr
;
}
}
}
return
result
.
finishString
(
)
;
}
static
bool
ToRelativeTemporalObject
(
JSContext
*
cx
Handle
<
JSObject
*
>
options
MutableHandle
<
JSObject
*
>
result
)
{
Rooted
<
Value
>
value
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
relativeTo
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
result
.
set
(
nullptr
)
;
return
true
;
}
auto
offsetBehaviour
=
OffsetBehaviour
:
:
Option
;
auto
matchBehaviour
=
MatchBehaviour
:
:
MatchExactly
;
PlainDateTime
dateTime
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
int64_t
offsetNs
;
if
(
value
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
obj
(
cx
&
value
.
toObject
(
)
)
;
if
(
obj
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
result
.
set
(
obj
)
;
return
true
;
}
if
(
obj
-
>
canUnwrapAs
<
ZonedDateTimeObject
>
(
)
)
{
result
.
set
(
obj
)
;
return
true
;
}
if
(
auto
*
dateTime
=
obj
-
>
maybeUnwrapIf
<
PlainDateTimeObject
>
(
)
)
{
auto
plainDateTime
=
ToPlainDate
(
dateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
auto
*
date
=
CreateTemporalDate
(
cx
plainDateTime
calendar
)
;
if
(
!
date
)
{
return
false
;
}
result
.
set
(
date
)
;
return
true
;
}
if
(
!
GetTemporalCalendarWithISODefault
(
cx
obj
&
calendar
)
)
{
return
false
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Hour
CalendarField
:
:
Microsecond
CalendarField
:
:
Millisecond
CalendarField
:
:
Minute
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Nanosecond
CalendarField
:
:
Second
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
if
(
!
AppendSorted
(
cx
fieldNames
.
get
(
)
{
TemporalField
:
:
Offset
TemporalField
:
:
TimeZone
}
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
obj
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
JSObject
*
>
dateOptions
(
cx
NewPlainObjectWithProto
(
cx
nullptr
)
)
;
if
(
!
dateOptions
)
{
return
false
;
}
Rooted
<
Value
>
overflow
(
cx
StringValue
(
cx
-
>
names
(
)
.
constrain
)
)
;
if
(
!
DefineDataProperty
(
cx
dateOptions
cx
-
>
names
(
)
.
overflow
overflow
)
)
{
return
false
;
}
if
(
!
InterpretTemporalDateTimeFields
(
cx
calendar
fields
dateOptions
&
dateTime
)
)
{
return
false
;
}
Rooted
<
Value
>
offset
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
offset
&
offset
)
)
{
return
false
;
}
Rooted
<
Value
>
timeZoneValue
(
cx
)
;
if
(
!
GetProperty
(
cx
fields
fields
cx
-
>
names
(
)
.
timeZone
&
timeZoneValue
)
)
{
return
false
;
}
if
(
!
timeZoneValue
.
isUndefined
(
)
)
{
if
(
!
ToTemporalTimeZone
(
cx
timeZoneValue
&
timeZone
)
)
{
return
false
;
}
}
if
(
offset
.
isUndefined
(
)
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
if
(
timeZone
)
{
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
MOZ_ASSERT
(
!
offset
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
offset
.
isString
(
)
)
;
Rooted
<
JSString
*
>
offsetString
(
cx
offset
.
toString
(
)
)
;
if
(
!
offsetString
)
{
return
false
;
}
if
(
!
ParseTimeZoneOffsetString
(
cx
offsetString
&
offsetNs
)
)
{
return
false
;
}
}
else
{
offsetNs
=
0
;
}
}
}
else
{
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
value
)
)
;
if
(
!
string
)
{
return
false
;
}
bool
isUTC
;
bool
hasOffset
;
int64_t
timeZoneOffset
;
Rooted
<
JSString
*
>
timeZoneName
(
cx
)
;
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalRelativeToString
(
cx
string
&
dateTime
&
isUTC
&
hasOffset
&
timeZoneOffset
&
timeZoneName
&
calendarString
)
)
{
return
false
;
}
if
(
timeZoneName
)
{
if
(
!
ToTemporalTimeZone
(
cx
timeZoneName
&
timeZone
)
)
{
return
false
;
}
if
(
isUTC
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Exact
;
}
else
if
(
!
hasOffset
)
{
offsetBehaviour
=
OffsetBehaviour
:
:
Wall
;
}
matchBehaviour
=
MatchBehaviour
:
:
MatchMinutes
;
}
else
{
MOZ_ASSERT
(
!
timeZone
)
;
}
if
(
calendarString
)
{
if
(
!
ToBuiltinCalendar
(
cx
calendarString
&
calendar
)
)
{
return
false
;
}
}
else
{
calendar
.
set
(
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
}
if
(
timeZone
)
{
if
(
offsetBehaviour
=
=
OffsetBehaviour
:
:
Option
)
{
MOZ_ASSERT
(
hasOffset
)
;
offsetNs
=
timeZoneOffset
;
}
else
{
offsetNs
=
0
;
}
}
}
if
(
!
timeZone
)
{
auto
*
obj
=
CreateTemporalDate
(
cx
dateTime
.
date
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
result
.
set
(
obj
)
;
return
true
;
}
Instant
epochNanoseconds
;
if
(
!
InterpretISODateTimeOffset
(
cx
dateTime
offsetBehaviour
offsetNs
timeZone
TemporalDisambiguation
:
:
Compatible
TemporalOffset
:
:
Reject
matchBehaviour
&
epochNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
IsValidEpochInstant
(
epochNanoseconds
)
)
;
auto
*
obj
=
CreateTemporalZonedDateTime
(
cx
epochNanoseconds
timeZone
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
result
.
set
(
obj
)
;
return
true
;
}
static
constexpr
bool
IsSafeInteger
(
int64_t
x
)
{
constexpr
int64_t
MaxSafeInteger
=
int64_t
(
1
)
<
<
53
;
constexpr
int64_t
MinSafeInteger
=
-
MaxSafeInteger
;
return
MinSafeInteger
<
x
&
&
x
<
MaxSafeInteger
;
}
static
void
TruncateNumber
(
int64_t
numerator
int64_t
denominator
double
*
quotient
double
*
total
)
{
int64_t
q
=
numerator
/
denominator
;
int64_t
r
=
numerator
%
denominator
;
if
(
:
:
IsSafeInteger
(
numerator
)
&
&
:
:
IsSafeInteger
(
denominator
)
)
{
*
quotient
=
double
(
q
)
;
*
total
=
double
(
numerator
)
/
double
(
denominator
)
;
}
else
{
*
quotient
=
double
(
q
)
;
*
total
=
double
(
q
)
+
double
(
r
)
/
double
(
denominator
)
;
}
}
static
bool
TruncateNumber
(
JSContext
*
cx
Handle
<
BigInt
*
>
numerator
Handle
<
BigInt
*
>
denominator
double
*
quotient
double
*
total
)
{
MOZ_ASSERT
(
!
denominator
-
>
isNegative
(
)
)
;
MOZ_ASSERT
(
!
denominator
-
>
isZero
(
)
)
;
if
(
numerator
-
>
isZero
(
)
)
{
*
quotient
=
0
;
*
total
=
0
;
return
true
;
}
int64_t
num
denom
;
if
(
BigInt
:
:
isInt64
(
numerator
&
num
)
&
&
BigInt
:
:
isInt64
(
denominator
&
denom
)
)
{
TruncateNumber
(
num
denom
quotient
total
)
;
return
true
;
}
Rooted
<
BigInt
*
>
quot
(
cx
)
;
Rooted
<
BigInt
*
>
rem
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
numerator
denominator
&
quot
&
rem
)
)
{
return
false
;
}
double
q
=
BigInt
:
:
numberValue
(
quot
)
;
*
quotient
=
q
;
*
total
=
q
+
BigInt
:
:
numberValue
(
rem
)
/
BigInt
:
:
numberValue
(
denominator
)
;
return
true
;
}
static
bool
TruncateNumber
(
JSContext
*
cx
const
Duration
&
toRound
TemporalUnit
unit
double
*
quotient
double
*
total
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Day
)
;
int64_t
denominator
=
ToNanoseconds
(
unit
)
;
MOZ_ASSERT
(
denominator
>
0
)
;
MOZ_ASSERT
(
denominator
<
=
86
'
400
'
000
'
000
'
000
)
;
if
(
auto
numerator
=
TotalDurationNanoseconds
(
toRound
0
)
)
{
TruncateNumber
(
*
numerator
denominator
quotient
total
)
;
return
true
;
}
Rooted
<
BigInt
*
>
numerator
(
cx
TotalDurationNanosecondsSlow
(
cx
toRound
0
)
)
;
if
(
!
numerator
)
{
return
false
;
}
if
(
denominator
=
=
1
)
{
double
q
=
BigInt
:
:
numberValue
(
numerator
)
;
*
quotient
=
q
;
*
total
=
q
;
return
true
;
}
Rooted
<
BigInt
*
>
denom
(
cx
BigInt
:
:
createFromInt64
(
cx
denominator
)
)
;
if
(
!
denom
)
{
return
false
;
}
Rooted
<
BigInt
*
>
quot
(
cx
)
;
Rooted
<
BigInt
*
>
rem
(
cx
)
;
if
(
!
BigInt
:
:
divmod
(
cx
numerator
denom
&
quot
&
rem
)
)
{
return
false
;
}
double
q
=
BigInt
:
:
numberValue
(
quot
)
;
*
quotient
=
q
;
*
total
=
q
+
BigInt
:
:
numberValue
(
rem
)
/
double
(
denominator
)
;
return
true
;
}
static
bool
RoundNumberToIncrement
(
JSContext
*
cx
const
Duration
&
toRound
TemporalUnit
unit
Increment
increment
TemporalRoundingMode
roundingMode
double
*
result
)
{
MOZ_ASSERT
(
unit
>
=
TemporalUnit
:
:
Day
)
;
if
(
auto
total
=
TotalDurationNanoseconds
(
toRound
0
)
)
{
return
RoundNumberToIncrement
(
cx
*
total
unit
increment
roundingMode
result
)
;
}
Rooted
<
BigInt
*
>
totalNs
(
cx
TotalDurationNanosecondsSlow
(
cx
toRound
0
)
)
;
if
(
!
totalNs
)
{
return
false
;
}
return
RoundNumberToIncrement
(
cx
totalNs
unit
increment
roundingMode
result
)
;
}
struct
RoundedDuration
final
{
Duration
duration
;
double
total
=
0
;
}
;
enum
class
ComputeRemainder
:
bool
{
No
Yes
}
;
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
auto
[
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
]
=
duration
;
if
(
unit
<
=
TemporalUnit
:
:
Week
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_UNCOMPARABLE
"
relativeTo
"
)
;
return
false
;
}
Duration
toRound
;
double
*
roundedTime
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Week
:
case
TemporalUnit
:
:
Month
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
case
TemporalUnit
:
:
Day
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1
'
000
'
000
'
000
}
"
limited
by
ToTemporalRoundingIncrement
"
)
;
toRound
=
duration
;
roundedTime
=
&
days
;
hours
=
0
;
minutes
=
0
;
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Hour
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
24
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
hours
;
minutes
=
0
;
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Minute
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
60
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
0
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
minutes
;
seconds
=
0
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Second
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
60
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
0
0
seconds
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
seconds
;
milliseconds
=
0
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Millisecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
0
0
0
milliseconds
microseconds
nanoseconds
}
;
roundedTime
=
&
milliseconds
;
microseconds
=
0
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Microsecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
0
0
0
0
microseconds
nanoseconds
}
;
roundedTime
=
&
microseconds
;
nanoseconds
=
0
;
break
;
}
case
TemporalUnit
:
:
Nanosecond
:
{
MOZ_ASSERT
(
increment
<
=
Increment
{
1000
}
"
limited
by
MaximumTemporalDurationRoundingIncrement
"
)
;
toRound
=
{
0
0
0
0
0
0
0
0
0
nanoseconds
}
;
roundedTime
=
&
nanoseconds
;
break
;
}
}
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
RoundNumberToIncrement
(
cx
toRound
unit
increment
roundingMode
roundedTime
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT
(
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
if
(
!
TruncateNumber
(
cx
toRound
unit
roundedTime
&
total
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
years
=
=
duration
.
years
)
;
MOZ_ASSERT
(
months
=
=
duration
.
months
)
;
MOZ_ASSERT
(
weeks
=
=
duration
.
weeks
)
;
MOZ_ASSERT
(
IsIntegerOrInfinity
(
days
)
)
;
Duration
resultDuration
=
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
double
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT
(
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
ComputeRemainder
:
:
Yes
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
total
;
return
true
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
duration
;
return
true
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
result
)
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
years
Handle
<
BigInt
*
>
days
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
int32_t
oneYearDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
nanosAndDays
.
dayLength
(
)
>
InstantSpan
{
}
)
;
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
.
abs
(
)
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
nanoseconds
(
)
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
dayLength
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
dayLength
(
)
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
if
(
oneYearDays
=
=
0
)
{
JS_ReportErrorASCII
(
cx
"
division
by
zero
"
)
;
return
false
;
}
Rooted
<
BigInt
*
>
denominator
(
cx
BigInt
:
:
createFromInt64
(
cx
std
:
:
abs
(
oneYearDays
)
)
)
;
if
(
!
denominator
)
{
return
false
;
}
denominator
=
BigInt
:
:
mul
(
cx
denominator
dayLength
)
;
if
(
!
denominator
)
{
return
false
;
}
Rooted
<
BigInt
*
>
totalNanoseconds
(
cx
BigInt
:
:
mul
(
cx
days
dayLength
)
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
nanoseconds
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
yearNanos
(
cx
BigInt
:
:
mul
(
cx
years
denominator
)
)
;
if
(
!
yearNanos
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
yearNanos
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
double
numYears
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
denominator
increment
roundingMode
&
numYears
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
TruncateNumber
(
cx
totalNanoseconds
denominator
&
numYears
&
total
)
)
{
return
false
;
}
}
double
numMonths
=
0
;
double
numWeeks
=
0
;
Duration
resultDuration
=
{
numYears
numMonths
numWeeks
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
Handle
<
BigInt
*
>
inDays
Handle
<
BigInt
*
>
years
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
int32_t
daysPassed
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
days
(
cx
inDays
)
;
Rooted
<
BigInt
*
>
biDaysPassed
(
cx
BigInt
:
:
createFromInt64
(
cx
daysPassed
)
)
;
if
(
!
biDaysPassed
)
{
return
false
;
}
days
=
BigInt
:
:
sub
(
cx
days
biDaysPassed
)
;
if
(
!
days
)
{
return
false
;
}
bool
daysIsNegative
=
days
-
>
isNegative
(
)
|
|
(
days
-
>
isZero
(
)
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneYear
(
cx
CreateTemporalDuration
(
cx
{
sign
}
)
)
;
if
(
!
oneYear
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
moveResultIgnored
(
cx
)
;
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneYear
dateAdd
&
moveResultIgnored
&
oneYearDays
)
)
{
return
false
;
}
return
RoundDurationYearSlow
(
cx
years
days
nanosAndDays
oneYearDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
BigInt
*
>
days
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
double
yearsPassed
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
years
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
years
)
)
;
if
(
!
years
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biYearsPassed
(
cx
BigInt
:
:
createFromDouble
(
cx
yearsPassed
)
)
;
if
(
!
biYearsPassed
)
{
return
false
;
}
years
=
BigInt
:
:
add
(
cx
years
biYearsPassed
)
;
if
(
!
years
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
yearsDuration
(
cx
CreateTemporalDuration
(
cx
{
yearsPassed
}
)
)
;
if
(
!
yearsDuration
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
daysPassed
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
yearsDuration
dateAdd
&
newRelativeTo
&
daysPassed
)
)
{
return
false
;
}
return
RoundDurationYearSlow
(
cx
days
years
nanosAndDays
daysPassed
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
mozilla
:
:
Maybe
<
int64_t
>
DaysFrom
(
const
temporal
:
:
NanosecondsAndDays
&
nanosAndDays
)
{
if
(
auto
*
days
=
nanosAndDays
.
days
)
{
int64_t
daysInt
;
if
(
BigInt
:
:
isInt64
(
days
&
daysInt
)
)
{
return
mozilla
:
:
Some
(
daysInt
)
;
}
return
mozilla
:
:
Nothing
(
)
;
}
return
mozilla
:
:
Some
(
nanosAndDays
.
daysInt
)
;
}
static
BigInt
*
DaysFrom
(
JSContext
*
cx
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
)
{
if
(
auto
days
=
nanosAndDays
.
days
(
)
)
{
return
days
;
}
return
BigInt
:
:
createFromInt64
(
cx
nanosAndDays
.
daysInt
(
)
)
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
int32_t
monthsWeeksInDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
days
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoDays
(
cx
DaysFrom
(
cx
nanosAndDays
)
)
;
if
(
!
nanoDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
nanoDays
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biMonthsWeeksInDays
(
cx
BigInt
:
:
createFromInt64
(
cx
monthsWeeksInDays
)
)
;
if
(
!
biMonthsWeeksInDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
biMonthsWeeksInDays
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
truncatedDays
(
cx
days
)
;
if
(
nanosAndDays
.
nanoseconds
(
)
>
InstantSpan
{
}
)
{
if
(
truncatedDays
-
>
isNegative
(
)
)
{
truncatedDays
=
BigInt
:
:
inc
(
cx
truncatedDays
)
;
if
(
!
truncatedDays
)
{
return
false
;
}
}
}
else
if
(
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
{
truncatedDays
=
BigInt
:
:
dec
(
cx
truncatedDays
)
;
if
(
!
truncatedDays
)
{
return
false
;
}
}
Rooted
<
DurationObject
*
>
wholeDaysDuration
(
cx
CreateTemporalDuration
(
cx
{
0
0
0
BigInt
:
:
numberValue
(
truncatedDays
)
}
)
)
;
if
(
!
wholeDaysDuration
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
wholeDaysLater
(
cx
CalendarDateAdd
(
cx
calendar
dateRelativeTo
wholeDaysDuration
dateAdd
)
)
;
if
(
!
wholeDaysLater
)
{
return
false
;
}
Duration
timePassed
;
if
(
!
CalendarDateUntil
(
cx
calendar
dateRelativeTo
wholeDaysLater
TemporalUnit
:
:
Year
&
timePassed
)
)
{
return
false
;
}
double
yearsPassed
=
timePassed
.
years
;
return
RoundDurationYearSlow
(
cx
duration
days
nanosAndDays
yearsPassed
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
const
Duration
&
duration
double
days
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
double
yearsPassed
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
return
RoundDurationYearSlow
(
cx
duration
biDays
nanosAndDays
yearsPassed
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationYearSlow
(
JSContext
*
cx
double
days
double
years
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
int32_t
daysPassed
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biYears
(
cx
BigInt
:
:
createFromDouble
(
cx
years
)
)
;
if
(
!
biYears
)
{
return
false
;
}
return
RoundDurationYearSlow
(
cx
biDays
biYears
nanosAndDays
daysPassed
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationYear
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
double
years
=
duration
.
years
;
double
months
=
duration
.
months
;
double
weeks
=
duration
.
weeks
;
Rooted
<
DurationObject
*
>
yearsDuration
(
cx
CreateTemporalDuration
(
cx
{
years
}
)
)
;
if
(
!
yearsDuration
)
{
return
false
;
}
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
auto
yearsLater
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
yearsDuration
dateAdd
)
;
if
(
!
yearsLater
)
{
return
false
;
}
auto
yearsLaterDate
=
ToPlainDate
(
&
yearsLater
.
unwrap
(
)
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
yearsLater
)
;
Duration
yearsMonthsWeeks
=
{
years
months
weeks
}
;
PlainDate
yearsMonthsWeeksLater
;
if
(
!
CalendarDateAdd
(
cx
calendar
dateRelativeTo
yearsMonthsWeeks
dateAdd
&
yearsMonthsWeeksLater
)
)
{
return
false
;
}
int32_t
monthsWeeksInDays
=
DaysUntil
(
yearsLaterDate
yearsMonthsWeeksLater
)
;
MOZ_ASSERT
(
std
:
:
abs
(
monthsWeeksInDays
)
<
=
200
'
000
'
000
)
;
double
days
=
duration
.
days
;
double
extraDays
=
nanosAndDays
.
daysNumber
(
)
;
MOZ_ASSERT
(
(
days
<
=
0
&
&
extraDays
<
=
0
)
|
|
(
days
>
=
0
&
&
extraDays
>
=
0
)
)
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
extraDays
)
)
)
{
return
RoundDurationYearSlow
(
cx
duration
nanosAndDays
monthsWeeksInDays
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
days
+
=
extraDays
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
monthsWeeksInDays
)
)
)
{
return
RoundDurationYearSlow
(
cx
duration
nanosAndDays
monthsWeeksInDays
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
days
+
=
monthsWeeksInDays
;
double
truncatedDays
=
days
;
if
(
nanosAndDays
.
nanoseconds
(
)
>
InstantSpan
{
}
)
{
if
(
truncatedDays
<
0
)
{
truncatedDays
+
=
1
;
}
}
else
if
(
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
{
if
(
truncatedDays
>
0
)
{
truncatedDays
-
=
1
;
}
}
Rooted
<
DurationObject
*
>
wholeDaysDuration
(
cx
CreateTemporalDuration
(
cx
{
0
0
0
truncatedDays
}
)
)
;
if
(
!
wholeDaysDuration
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
wholeDaysLater
(
cx
CalendarDateAdd
(
cx
calendar
newRelativeTo
wholeDaysDuration
dateAdd
)
)
;
if
(
!
wholeDaysLater
)
{
return
false
;
}
Duration
timePassed
;
if
(
!
CalendarDateUntil
(
cx
calendar
newRelativeTo
wholeDaysLater
TemporalUnit
:
:
Year
&
timePassed
)
)
{
return
false
;
}
double
yearsPassed
=
timePassed
.
years
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
years
+
yearsPassed
)
)
)
{
return
RoundDurationYearSlow
(
cx
duration
days
nanosAndDays
yearsPassed
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
years
+
=
yearsPassed
;
yearsDuration
=
CreateTemporalDuration
(
cx
{
yearsPassed
}
)
;
if
(
!
yearsDuration
)
{
return
false
;
}
int32_t
daysPassed
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
yearsDuration
dateAdd
&
newRelativeTo
&
daysPassed
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
-
daysPassed
)
)
)
{
return
RoundDurationYearSlow
(
cx
days
years
nanosAndDays
daysPassed
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
days
-
=
daysPassed
;
bool
daysIsNegative
=
days
<
0
|
|
(
days
=
=
0
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneYear
(
cx
CreateTemporalDuration
(
cx
{
sign
}
)
)
;
if
(
!
oneYear
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
moveResultIgnored
(
cx
)
;
int32_t
oneYearDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneYear
dateAdd
&
moveResultIgnored
&
oneYearDays
)
)
{
return
false
;
}
do
{
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
.
toNanoseconds
(
)
;
if
(
!
nanoseconds
.
isValid
(
)
)
{
break
;
}
auto
dayLength
=
nanosAndDays
.
dayLength
(
)
.
toNanoseconds
(
)
;
if
(
!
dayLength
.
isValid
(
)
)
{
break
;
}
if
(
oneYearDays
=
=
0
)
{
JS_ReportErrorASCII
(
cx
"
division
by
zero
"
)
;
return
false
;
}
auto
denominator
=
dayLength
*
std
:
:
abs
(
oneYearDays
)
;
if
(
!
denominator
.
isValid
(
)
)
{
break
;
}
int64_t
intDays
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
days
&
intDays
)
)
{
break
;
}
auto
totalNanoseconds
=
dayLength
*
intDays
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
nanoseconds
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
int64_t
intYears
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
years
&
intYears
)
)
{
break
;
}
auto
yearNanos
=
denominator
*
intYears
;
if
(
!
yearNanos
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
yearNanos
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
double
numYears
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
increment
roundingMode
&
numYears
)
)
{
return
false
;
}
}
else
{
TruncateNumber
(
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
&
numYears
&
total
)
;
}
double
numMonths
=
0
;
double
numWeeks
=
0
;
Duration
resultDuration
=
{
numYears
numMonths
numWeeks
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
while
(
false
)
;
Rooted
<
BigInt
*
>
biYears
(
cx
BigInt
:
:
createFromDouble
(
cx
years
)
)
;
if
(
!
biYears
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
return
RoundDurationYearSlow
(
cx
biYears
biDays
nanosAndDays
oneYearDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationMonthSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
BigInt
*
>
months
Handle
<
BigInt
*
>
days
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
BigInt
*
>
oneMonthDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
nanosAndDays
.
dayLength
(
)
>
InstantSpan
{
}
)
;
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
.
abs
(
)
)
;
MOZ_ASSERT
(
!
oneMonthDays
-
>
isNegative
(
)
)
;
MOZ_ASSERT
(
!
oneMonthDays
-
>
isZero
(
)
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
nanoseconds
(
)
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
dayLength
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
dayLength
(
)
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
Rooted
<
BigInt
*
>
denominator
(
cx
BigInt
:
:
mul
(
cx
oneMonthDays
dayLength
)
)
;
if
(
!
denominator
)
{
return
false
;
}
Rooted
<
BigInt
*
>
totalNanoseconds
(
cx
BigInt
:
:
mul
(
cx
days
dayLength
)
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
nanoseconds
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
monthNanos
(
cx
BigInt
:
:
mul
(
cx
months
denominator
)
)
;
if
(
!
monthNanos
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
monthNanos
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
double
numMonths
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
denominator
increment
roundingMode
&
numMonths
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
TruncateNumber
(
cx
totalNanoseconds
denominator
&
numMonths
&
total
)
)
{
return
false
;
}
}
double
numWeeks
=
0
;
double
numDays
=
0
;
Duration
resultDuration
=
{
duration
.
years
numMonths
numWeeks
numDays
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
static
bool
RoundDurationMonthSlow
(
JSContext
*
cx
const
Duration
&
duration
double
sign
Handle
<
BigInt
*
>
inMonths
Handle
<
BigInt
*
>
inDays
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
DurationObject
*
>
oneMonth
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
months
(
cx
inMonths
)
;
Rooted
<
BigInt
*
>
days
(
cx
inDays
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneMonthDays
(
cx
BigInt
:
:
createFromInt64
(
cx
oneMonthDays
)
)
;
if
(
!
biOneMonthDays
)
{
return
false
;
}
auto
daysLargerThanOrEqualToOneMonthDays
=
[
&
]
(
)
{
auto
cmp
=
BigInt
:
:
absoluteCompare
(
days
biOneMonthDays
)
;
if
(
cmp
>
0
)
{
return
true
;
}
if
(
cmp
<
0
)
{
return
false
;
}
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
;
return
nanoseconds
=
=
InstantSpan
{
}
|
|
(
days
-
>
isNegative
(
)
=
=
(
nanoseconds
<
InstantSpan
{
}
)
)
;
}
;
while
(
daysLargerThanOrEqualToOneMonthDays
(
)
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
if
(
sign
<
0
)
{
months
=
BigInt
:
:
dec
(
cx
months
)
;
}
else
{
months
=
BigInt
:
:
inc
(
cx
months
)
;
}
if
(
!
months
)
{
return
false
;
}
days
=
BigInt
:
:
sub
(
cx
days
biOneMonthDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
biOneMonthDays
=
BigInt
:
:
createFromInt64
(
cx
oneMonthDays
)
;
if
(
!
biOneMonthDays
)
{
return
false
;
}
}
if
(
biOneMonthDays
-
>
isNegative
(
)
)
{
biOneMonthDays
=
BigInt
:
:
neg
(
cx
biOneMonthDays
)
;
if
(
!
biOneMonthDays
)
{
return
false
;
}
}
return
RoundDurationMonthSlow
(
cx
duration
months
days
nanosAndDays
biOneMonthDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationMonthSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
int32_t
weeksInDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
months
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
months
)
)
;
if
(
!
months
)
{
return
false
;
}
Rooted
<
BigInt
*
>
days
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoDays
(
cx
DaysFrom
(
cx
nanosAndDays
)
)
;
if
(
!
nanoDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
nanoDays
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biWeeksInDays
(
cx
BigInt
:
:
createFromInt64
(
cx
weeksInDays
)
)
;
if
(
!
biWeeksInDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
biWeeksInDays
)
;
if
(
!
days
)
{
return
false
;
}
bool
daysIsNegative
=
days
-
>
isNegative
(
)
|
|
(
days
-
>
isZero
(
)
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneMonth
(
cx
CreateTemporalDuration
(
cx
{
0
sign
}
)
)
;
if
(
!
oneMonth
)
{
return
false
;
}
return
RoundDurationMonthSlow
(
cx
duration
sign
months
days
nanosAndDays
oneMonth
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationMonthSlow
(
JSContext
*
cx
const
Duration
&
duration
double
sign
double
months
double
days
int32_t
oneMonthDays
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
DurationObject
*
>
oneMonth
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
biMonths
(
cx
BigInt
:
:
createFromDouble
(
cx
months
)
)
;
if
(
!
biMonths
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneMonthDays
(
cx
BigInt
:
:
createFromInt64
(
cx
oneMonthDays
)
)
;
if
(
!
biOneMonthDays
)
{
return
false
;
}
if
(
sign
<
0
)
{
biMonths
=
BigInt
:
:
dec
(
cx
biMonths
)
;
}
else
{
biMonths
=
BigInt
:
:
inc
(
cx
biMonths
)
;
}
if
(
!
biMonths
)
{
return
false
;
}
biDays
=
BigInt
:
:
sub
(
cx
biDays
biOneMonthDays
)
;
if
(
!
biDays
)
{
return
false
;
}
return
RoundDurationMonthSlow
(
cx
duration
sign
biMonths
biDays
nanosAndDays
oneMonth
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationMonth
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
double
years
=
duration
.
years
;
double
months
=
duration
.
months
;
double
weeks
=
duration
.
weeks
;
Rooted
<
DurationObject
*
>
yearsMonths
(
cx
CreateTemporalDuration
(
cx
{
years
months
}
)
)
;
if
(
!
yearsMonths
)
{
return
false
;
}
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
auto
yearsMonthsLater
=
CalendarDateAdd
(
cx
calendar
dateRelativeTo
yearsMonths
dateAdd
)
;
if
(
!
yearsMonthsLater
)
{
return
false
;
}
auto
yearsMonthsLaterDate
=
ToPlainDate
(
&
yearsMonthsLater
.
unwrap
(
)
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
yearsMonthsLater
)
;
Duration
yearsMonthsWeeks
=
{
years
months
weeks
}
;
PlainDate
yearsMonthsWeeksLater
;
if
(
!
CalendarDateAdd
(
cx
calendar
dateRelativeTo
yearsMonthsWeeks
dateAdd
&
yearsMonthsWeeksLater
)
)
{
return
false
;
}
int32_t
weeksInDays
=
DaysUntil
(
yearsMonthsLaterDate
yearsMonthsWeeksLater
)
;
double
days
=
duration
.
days
;
double
extraDays
=
nanosAndDays
.
daysNumber
(
)
;
MOZ_ASSERT
(
(
days
<
=
0
&
&
extraDays
<
=
0
)
|
|
(
days
>
=
0
&
&
extraDays
>
=
0
)
)
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
extraDays
)
)
)
{
return
RoundDurationMonthSlow
(
cx
duration
nanosAndDays
weeksInDays
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
days
+
=
extraDays
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
weeksInDays
)
)
)
{
return
RoundDurationMonthSlow
(
cx
duration
nanosAndDays
weeksInDays
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
days
+
=
weeksInDays
;
bool
daysIsNegative
=
days
<
0
|
|
(
days
=
=
0
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneMonth
(
cx
CreateTemporalDuration
(
cx
{
0
sign
}
)
)
;
if
(
!
oneMonth
)
{
return
false
;
}
int32_t
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
auto
daysLargerThanOrEqualToOneMonthDays
=
[
&
]
(
)
{
if
(
std
:
:
abs
(
days
)
>
std
:
:
abs
(
oneMonthDays
)
)
{
return
true
;
}
if
(
std
:
:
abs
(
days
)
<
std
:
:
abs
(
oneMonthDays
)
)
{
return
false
;
}
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
;
return
nanoseconds
=
=
InstantSpan
{
}
|
|
(
(
days
<
0
)
=
=
(
nanoseconds
<
InstantSpan
{
}
)
)
;
}
;
while
(
daysLargerThanOrEqualToOneMonthDays
(
)
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
months
+
sign
)
|
|
!
IsSafeInteger
(
days
-
oneMonthDays
)
)
)
{
return
RoundDurationMonthSlow
(
cx
duration
sign
months
days
oneMonthDays
nanosAndDays
oneMonth
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
months
+
=
sign
;
days
-
=
oneMonthDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneMonth
dateAdd
&
newRelativeTo
&
oneMonthDays
)
)
{
return
false
;
}
}
do
{
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
.
toNanoseconds
(
)
;
if
(
!
nanoseconds
.
isValid
(
)
)
{
break
;
}
auto
dayLength
=
nanosAndDays
.
dayLength
(
)
.
toNanoseconds
(
)
;
if
(
!
dayLength
.
isValid
(
)
)
{
break
;
}
auto
denominator
=
dayLength
*
std
:
:
abs
(
oneMonthDays
)
;
if
(
!
denominator
.
isValid
(
)
)
{
break
;
}
int64_t
intDays
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
days
&
intDays
)
)
{
break
;
}
auto
totalNanoseconds
=
dayLength
*
intDays
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
nanoseconds
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
int64_t
intMonths
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
months
&
intMonths
)
)
{
break
;
}
auto
monthNanos
=
denominator
*
intMonths
;
if
(
!
monthNanos
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
monthNanos
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
double
numMonths
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
increment
roundingMode
&
numMonths
)
)
{
return
false
;
}
}
else
{
TruncateNumber
(
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
&
numMonths
&
total
)
;
}
double
numWeeks
=
0
;
double
numDays
=
0
;
Duration
resultDuration
=
{
duration
.
years
numMonths
numWeeks
numDays
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
while
(
false
)
;
Rooted
<
BigInt
*
>
biMonths
(
cx
BigInt
:
:
createFromDouble
(
cx
months
)
)
;
if
(
!
biMonths
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneMonthDays
(
cx
BigInt
:
:
createFromInt64
(
cx
std
:
:
abs
(
oneMonthDays
)
)
)
;
if
(
!
biOneMonthDays
)
{
return
false
;
}
return
RoundDurationMonthSlow
(
cx
duration
biMonths
biDays
nanosAndDays
biOneMonthDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationWeekSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
BigInt
*
>
weeks
Handle
<
BigInt
*
>
days
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
BigInt
*
>
oneWeekDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
nanosAndDays
.
dayLength
(
)
>
InstantSpan
{
}
)
;
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
.
abs
(
)
)
;
MOZ_ASSERT
(
!
oneWeekDays
-
>
isNegative
(
)
)
;
MOZ_ASSERT
(
!
oneWeekDays
-
>
isZero
(
)
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
nanoseconds
(
)
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
dayLength
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
dayLength
(
)
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
Rooted
<
BigInt
*
>
denominator
(
cx
BigInt
:
:
mul
(
cx
oneWeekDays
dayLength
)
)
;
if
(
!
denominator
)
{
return
false
;
}
Rooted
<
BigInt
*
>
totalNanoseconds
(
cx
BigInt
:
:
mul
(
cx
days
dayLength
)
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
nanoseconds
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
weekNanos
(
cx
BigInt
:
:
mul
(
cx
weeks
denominator
)
)
;
if
(
!
weekNanos
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
weekNanos
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
double
numWeeks
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
denominator
increment
roundingMode
&
numWeeks
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
TruncateNumber
(
cx
totalNanoseconds
denominator
&
numWeeks
&
total
)
)
{
return
false
;
}
}
double
numDays
=
0
;
Duration
resultDuration
=
{
duration
.
years
duration
.
months
numWeeks
numDays
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
static
bool
RoundDurationWeekSlow
(
JSContext
*
cx
const
Duration
&
duration
double
sign
Handle
<
BigInt
*
>
inWeeks
Handle
<
BigInt
*
>
inDays
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
DurationObject
*
>
oneWeek
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
weeks
(
cx
inWeeks
)
;
Rooted
<
BigInt
*
>
days
(
cx
inDays
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneWeekDays
(
cx
BigInt
:
:
createFromInt64
(
cx
oneWeekDays
)
)
;
if
(
!
biOneWeekDays
)
{
return
false
;
}
auto
daysLargerThanOrEqualToOneWeekDays
=
[
&
]
(
)
{
auto
cmp
=
BigInt
:
:
absoluteCompare
(
days
biOneWeekDays
)
;
if
(
cmp
>
0
)
{
return
true
;
}
if
(
cmp
<
0
)
{
return
false
;
}
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
;
return
nanoseconds
=
=
InstantSpan
{
}
|
|
(
days
-
>
isNegative
(
)
=
=
(
nanoseconds
<
InstantSpan
{
}
)
)
;
}
;
while
(
daysLargerThanOrEqualToOneWeekDays
(
)
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
if
(
sign
<
0
)
{
weeks
=
BigInt
:
:
dec
(
cx
weeks
)
;
}
else
{
weeks
=
BigInt
:
:
inc
(
cx
weeks
)
;
}
if
(
!
weeks
)
{
return
false
;
}
days
=
BigInt
:
:
sub
(
cx
days
biOneWeekDays
)
;
if
(
!
days
)
{
return
false
;
}
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
biOneWeekDays
=
BigInt
:
:
createFromInt64
(
cx
oneWeekDays
)
;
if
(
!
biOneWeekDays
)
{
return
false
;
}
}
if
(
biOneWeekDays
-
>
isNegative
(
)
)
{
biOneWeekDays
=
BigInt
:
:
neg
(
cx
biOneWeekDays
)
;
if
(
!
biOneWeekDays
)
{
return
false
;
}
}
return
RoundDurationWeekSlow
(
cx
duration
weeks
days
nanosAndDays
biOneWeekDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationWeekSlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
weeks
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
weeks
)
)
;
if
(
!
weeks
)
{
return
false
;
}
Rooted
<
BigInt
*
>
days
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
days
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoDays
(
cx
DaysFrom
(
cx
nanosAndDays
)
)
;
if
(
!
nanoDays
)
{
return
false
;
}
days
=
BigInt
:
:
add
(
cx
days
nanoDays
)
;
if
(
!
days
)
{
return
false
;
}
bool
daysIsNegative
=
days
-
>
isNegative
(
)
|
|
(
days
-
>
isZero
(
)
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneWeek
(
cx
CreateTemporalDuration
(
cx
{
0
0
sign
}
)
)
;
if
(
!
oneWeek
)
{
return
false
;
}
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
return
RoundDurationWeekSlow
(
cx
duration
sign
weeks
days
nanosAndDays
oneWeek
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationWeekSlow
(
JSContext
*
cx
const
Duration
&
duration
double
sign
double
weeks
double
days
int32_t
oneWeekDays
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Handle
<
DurationObject
*
>
oneWeek
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
Handle
<
Value
>
dateAdd
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
Rooted
<
BigInt
*
>
biWeeks
(
cx
BigInt
:
:
createFromDouble
(
cx
weeks
)
)
;
if
(
!
biWeeks
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneWeekDays
(
cx
BigInt
:
:
createFromInt64
(
cx
oneWeekDays
)
)
;
if
(
!
biOneWeekDays
)
{
return
false
;
}
if
(
sign
<
0
)
{
biWeeks
=
BigInt
:
:
dec
(
cx
biWeeks
)
;
}
else
{
biWeeks
=
BigInt
:
:
inc
(
cx
biWeeks
)
;
}
if
(
!
biWeeks
)
{
return
false
;
}
biDays
=
BigInt
:
:
sub
(
cx
biDays
biOneWeekDays
)
;
if
(
!
biDays
)
{
return
false
;
}
return
RoundDurationWeekSlow
(
cx
duration
sign
biWeeks
biDays
nanosAndDays
oneWeek
increment
roundingMode
dateRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
static
bool
RoundDurationWeek
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
Handle
<
CalendarValue
>
calendar
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
double
days
=
duration
.
days
;
double
extraDays
=
nanosAndDays
.
daysNumber
(
)
;
MOZ_ASSERT
(
(
days
<
=
0
&
&
extraDays
<
=
0
)
|
|
(
days
>
=
0
&
&
extraDays
>
=
0
)
)
;
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
days
+
extraDays
)
)
)
{
return
RoundDurationWeekSlow
(
cx
duration
nanosAndDays
increment
roundingMode
dateRelativeTo
calendar
computeRemainder
result
)
;
}
days
+
=
extraDays
;
bool
daysIsNegative
=
days
<
0
|
|
(
days
=
=
0
&
&
nanosAndDays
.
nanoseconds
(
)
<
InstantSpan
{
}
)
;
double
sign
=
daysIsNegative
?
-
1
:
1
;
Rooted
<
DurationObject
*
>
oneWeek
(
cx
CreateTemporalDuration
(
cx
{
0
0
sign
}
)
)
;
if
(
!
oneWeek
)
{
return
false
;
}
Rooted
<
Value
>
dateAdd
(
cx
)
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
GetMethodForCall
(
cx
calendarObj
cx
-
>
names
(
)
.
dateAdd
&
dateAdd
)
)
{
return
false
;
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
newRelativeTo
(
cx
)
;
int32_t
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
dateRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
auto
daysLargerThanOrEqualToOneWeekDays
=
[
&
]
(
)
{
if
(
std
:
:
abs
(
days
)
>
std
:
:
abs
(
oneWeekDays
)
)
{
return
true
;
}
if
(
std
:
:
abs
(
days
)
<
std
:
:
abs
(
oneWeekDays
)
)
{
return
false
;
}
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
;
return
nanoseconds
=
=
InstantSpan
{
}
|
|
(
(
days
<
0
)
=
=
(
nanoseconds
<
InstantSpan
{
}
)
)
;
}
;
double
weeks
=
duration
.
weeks
;
while
(
daysLargerThanOrEqualToOneWeekDays
(
)
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
if
(
MOZ_UNLIKELY
(
!
IsSafeInteger
(
weeks
+
sign
)
|
|
!
IsSafeInteger
(
days
-
oneWeekDays
)
)
)
{
return
RoundDurationWeekSlow
(
cx
duration
sign
weeks
days
oneWeekDays
nanosAndDays
oneWeek
increment
roundingMode
newRelativeTo
calendar
dateAdd
computeRemainder
result
)
;
}
weeks
+
=
sign
;
days
-
=
oneWeekDays
;
if
(
!
MoveRelativeDate
(
cx
calendar
newRelativeTo
oneWeek
dateAdd
&
newRelativeTo
&
oneWeekDays
)
)
{
return
false
;
}
}
do
{
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
.
toNanoseconds
(
)
;
if
(
!
nanoseconds
.
isValid
(
)
)
{
break
;
}
auto
dayLength
=
nanosAndDays
.
dayLength
(
)
.
toNanoseconds
(
)
;
if
(
!
dayLength
.
isValid
(
)
)
{
break
;
}
auto
denominator
=
dayLength
*
std
:
:
abs
(
oneWeekDays
)
;
if
(
!
denominator
.
isValid
(
)
)
{
break
;
}
int64_t
intDays
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
days
&
intDays
)
)
{
break
;
}
auto
totalNanoseconds
=
dayLength
*
intDays
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
nanoseconds
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
int64_t
intWeeks
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
weeks
&
intWeeks
)
)
{
break
;
}
auto
weekNanos
=
denominator
*
intWeeks
;
if
(
!
weekNanos
.
isValid
(
)
)
{
break
;
}
totalNanoseconds
+
=
weekNanos
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
double
numWeeks
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
increment
roundingMode
&
numWeeks
)
)
{
return
false
;
}
}
else
{
TruncateNumber
(
totalNanoseconds
.
value
(
)
denominator
.
value
(
)
&
numWeeks
&
total
)
;
}
double
numDays
=
0
;
Duration
resultDuration
=
{
duration
.
years
duration
.
months
numWeeks
numDays
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
while
(
false
)
;
Rooted
<
BigInt
*
>
biWeeks
(
cx
BigInt
:
:
createFromDouble
(
cx
weeks
)
)
;
if
(
!
biWeeks
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biDays
(
cx
BigInt
:
:
createFromDouble
(
cx
days
)
)
;
if
(
!
biDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
biOneWeekDays
(
cx
BigInt
:
:
createFromInt64
(
cx
std
:
:
abs
(
oneWeekDays
)
)
)
;
if
(
!
biOneWeekDays
)
{
return
false
;
}
return
RoundDurationWeekSlow
(
cx
duration
biWeeks
biDays
nanosAndDays
biOneWeekDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDurationDaySlow
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
nanosAndDays
.
dayLength
(
)
>
InstantSpan
{
}
)
;
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
.
abs
(
)
)
;
Rooted
<
BigInt
*
>
nanoseconds
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
nanoseconds
(
)
)
)
;
if
(
!
nanoseconds
)
{
return
false
;
}
Rooted
<
BigInt
*
>
dayLength
(
cx
ToEpochNanoseconds
(
cx
nanosAndDays
.
dayLength
(
)
)
)
;
if
(
!
dayLength
)
{
return
false
;
}
Rooted
<
BigInt
*
>
nanoDays
(
cx
DaysFrom
(
cx
nanosAndDays
)
)
;
if
(
!
nanoDays
)
{
return
false
;
}
Rooted
<
BigInt
*
>
totalNanoseconds
(
cx
BigInt
:
:
createFromDouble
(
cx
duration
.
days
)
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
nanoDays
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
mul
(
cx
totalNanoseconds
dayLength
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
totalNanoseconds
=
BigInt
:
:
add
(
cx
totalNanoseconds
nanoseconds
)
;
if
(
!
totalNanoseconds
)
{
return
false
;
}
double
days
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
dayLength
increment
roundingMode
&
days
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
TruncateNumber
(
cx
totalNanoseconds
dayLength
&
days
&
total
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
IsIntegerOrInfinity
(
days
)
)
;
Duration
resultDuration
=
{
duration
.
years
duration
.
months
duration
.
weeks
days
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
static
bool
RoundDurationDay
(
JSContext
*
cx
const
Duration
&
duration
Handle
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
Increment
increment
TemporalRoundingMode
roundingMode
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
nanosAndDays
.
dayLength
(
)
>
InstantSpan
{
}
)
;
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
.
abs
(
)
)
;
do
{
auto
nanoseconds
=
nanosAndDays
.
nanoseconds
(
)
.
toNanoseconds
(
)
;
auto
dayLength
=
nanosAndDays
.
dayLength
(
)
.
toNanoseconds
(
)
;
auto
nanoDays
=
DaysFrom
(
nanosAndDays
)
;
if
(
!
nanoDays
)
{
break
;
}
int64_t
durationDays
;
if
(
!
mozilla
:
:
NumberEqualsInt64
(
duration
.
days
&
durationDays
)
)
{
break
;
}
auto
totalNanoseconds
=
mozilla
:
:
CheckedInt64
(
durationDays
)
+
*
nanoDays
;
totalNanoseconds
*
=
dayLength
;
totalNanoseconds
+
=
nanoseconds
;
if
(
!
totalNanoseconds
.
isValid
(
)
)
{
break
;
}
double
days
;
double
total
=
0
;
if
(
computeRemainder
=
=
ComputeRemainder
:
:
No
)
{
if
(
!
temporal
:
:
RoundNumberToIncrement
(
cx
totalNanoseconds
.
value
(
)
dayLength
.
value
(
)
increment
roundingMode
&
days
)
)
{
return
false
;
}
}
else
{
:
:
TruncateNumber
(
totalNanoseconds
.
value
(
)
dayLength
.
value
(
)
&
days
&
total
)
;
}
MOZ_ASSERT
(
IsIntegerOrInfinity
(
days
)
)
;
Duration
resultDuration
=
{
duration
.
years
duration
.
months
duration
.
weeks
days
}
;
if
(
!
ThrowIfInvalidDuration
(
cx
resultDuration
)
)
{
return
false
;
}
*
result
=
{
resultDuration
total
}
;
return
true
;
}
while
(
false
)
;
return
RoundDurationDaySlow
(
cx
duration
nanosAndDays
increment
roundingMode
computeRemainder
result
)
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
JSObject
*
>
relativeTo
ComputeRemainder
computeRemainder
RoundedDuration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
duration
.
years
duration
.
months
duration
.
weeks
}
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
.
time
(
)
)
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT_IF
(
computeRemainder
=
=
ComputeRemainder
:
:
Yes
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
MOZ_ASSERT
(
relativeTo
)
;
Rooted
<
Wrapped
<
ZonedDateTimeObject
*
>
>
zonedRelativeTo
(
cx
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
(
cx
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
auto
*
unwrapped
=
relativeTo
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
zonedRelativeTo
=
relativeTo
;
calendar
.
set
(
unwrapped
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
dateRelativeTo
=
ToTemporalDate
(
cx
relativeTo
)
;
if
(
!
dateRelativeTo
)
{
return
false
;
}
}
else
if
(
auto
*
unwrapped
=
relativeTo
-
>
maybeUnwrapIf
<
PlainDateObject
>
(
)
)
{
dateRelativeTo
=
relativeTo
;
calendar
.
set
(
unwrapped
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
}
else
if
(
IsDeadProxyObject
(
relativeTo
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_DEAD_OBJECT
)
;
return
false
;
}
else
{
MOZ_CRASH
(
"
expected
either
PlainDateObject
or
ZonedDateTimeObject
"
)
;
}
switch
(
unit
)
{
case
TemporalUnit
:
:
Year
:
case
TemporalUnit
:
:
Month
:
case
TemporalUnit
:
:
Week
:
break
;
case
TemporalUnit
:
:
Day
:
if
(
zonedRelativeTo
)
{
break
;
}
[
[
fallthrough
]
]
;
case
TemporalUnit
:
:
Hour
:
case
TemporalUnit
:
:
Minute
:
case
TemporalUnit
:
:
Second
:
case
TemporalUnit
:
:
Millisecond
:
case
TemporalUnit
:
:
Microsecond
:
case
TemporalUnit
:
:
Nanosecond
:
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
computeRemainder
result
)
;
case
TemporalUnit
:
:
Auto
:
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
MOZ_ASSERT
(
TemporalUnit
:
:
Year
<
=
unit
&
&
unit
<
=
TemporalUnit
:
:
Day
)
;
Rooted
<
temporal
:
:
NanosecondsAndDays
>
nanosAndDays
(
cx
)
;
if
(
zonedRelativeTo
)
{
Rooted
<
ZonedDateTimeObject
*
>
intermediate
(
cx
MoveRelativeZonedDateTime
(
cx
zonedRelativeTo
duration
.
date
(
)
)
)
;
if
(
!
intermediate
)
{
return
false
;
}
if
(
!
NanosecondsToDays
(
cx
duration
intermediate
&
nanosAndDays
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
NanosecondsToDays
(
cx
duration
&
nanosAndDays
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
nanosAndDays
.
nanoseconds
(
)
.
abs
(
)
<
nanosAndDays
.
dayLength
(
)
)
;
switch
(
unit
)
{
case
TemporalUnit
:
:
Year
:
return
RoundDurationYear
(
cx
duration
nanosAndDays
increment
roundingMode
dateRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Month
:
return
RoundDurationMonth
(
cx
duration
nanosAndDays
increment
roundingMode
dateRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Week
:
return
RoundDurationWeek
(
cx
duration
nanosAndDays
increment
roundingMode
dateRelativeTo
calendar
computeRemainder
result
)
;
case
TemporalUnit
:
:
Day
:
return
RoundDurationDay
(
cx
duration
nanosAndDays
increment
roundingMode
computeRemainder
result
)
;
case
TemporalUnit
:
:
Auto
:
case
TemporalUnit
:
:
Hour
:
case
TemporalUnit
:
:
Minute
:
case
TemporalUnit
:
:
Second
:
case
TemporalUnit
:
:
Millisecond
:
case
TemporalUnit
:
:
Microsecond
:
case
TemporalUnit
:
:
Nanosecond
:
break
;
}
MOZ_CRASH
(
"
Unexpected
temporal
unit
"
)
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
JSObject
*
>
relativeTo
double
*
result
)
{
MOZ_ASSERT
(
increment
=
=
Increment
{
1
}
)
;
MOZ_ASSERT
(
roundingMode
=
=
TemporalRoundingMode
:
:
Trunc
)
;
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
relativeTo
ComputeRemainder
:
:
Yes
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
total
;
return
true
;
}
static
bool
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
JSObject
*
>
relativeTo
Duration
*
result
)
{
RoundedDuration
rounded
;
if
(
!
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
relativeTo
ComputeRemainder
:
:
No
&
rounded
)
)
{
return
false
;
}
*
result
=
rounded
.
duration
;
return
true
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
Wrapped
<
PlainDateObject
*
>
>
relativeTo
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
relativeTo
result
)
;
}
bool
js
:
:
temporal
:
:
RoundDuration
(
JSContext
*
cx
const
Duration
&
duration
Increment
increment
TemporalUnit
unit
TemporalRoundingMode
roundingMode
Handle
<
ZonedDateTimeObject
*
>
relativeTo
Duration
*
result
)
{
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
return
:
:
RoundDuration
(
cx
duration
increment
unit
roundingMode
relativeTo
result
)
;
}
enum
class
DurationOperation
{
Add
Subtract
}
;
static
bool
AddDurationToOrSubtractDurationFromDuration
(
JSContext
*
cx
DurationOperation
operation
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
Duration
other
;
if
(
!
ToTemporalDurationRecord
(
cx
args
.
get
(
0
)
&
other
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
const
char
*
name
=
operation
=
=
DurationOperation
:
:
Add
?
"
add
"
:
"
subtract
"
;
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
name
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
ToRelativeTemporalObject
(
cx
options
&
relativeTo
)
)
{
return
false
;
}
}
if
(
operation
=
=
DurationOperation
:
:
Subtract
)
{
other
=
other
.
negate
(
)
;
}
Duration
result
;
if
(
relativeTo
)
{
if
(
relativeTo
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
relativeToObj
(
cx
relativeTo
)
;
if
(
!
AddDuration
(
cx
duration
other
relativeToObj
&
result
)
)
{
return
false
;
}
}
else
if
(
relativeTo
-
>
canUnwrapAs
<
ZonedDateTimeObject
>
(
)
)
{
Rooted
<
Wrapped
<
ZonedDateTimeObject
*
>
>
relativeToObj
(
cx
relativeTo
)
;
if
(
!
AddDuration
(
cx
duration
other
relativeToObj
&
result
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
!
IsDeadProxyObject
(
relativeTo
)
"
ToRelativeTemporalObject
doesn
'
t
return
dead
wrappers
"
)
;
MOZ_CRASH
(
"
expected
either
PlainDateObject
or
ZonedDateTimeObject
"
)
;
}
}
else
{
if
(
!
AddDuration
(
cx
duration
other
&
result
)
)
{
return
false
;
}
}
auto
*
obj
=
CreateTemporalDuration
(
cx
result
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
DurationConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
Duration
"
)
)
{
return
false
;
}
double
years
=
0
;
if
(
args
.
hasDefined
(
0
)
&
&
!
ToIntegerIfIntegral
(
cx
"
years
"
args
[
0
]
&
years
)
)
{
return
false
;
}
double
months
=
0
;
if
(
args
.
hasDefined
(
1
)
&
&
!
ToIntegerIfIntegral
(
cx
"
months
"
args
[
1
]
&
months
)
)
{
return
false
;
}
double
weeks
=
0
;
if
(
args
.
hasDefined
(
2
)
&
&
!
ToIntegerIfIntegral
(
cx
"
weeks
"
args
[
2
]
&
weeks
)
)
{
return
false
;
}
double
days
=
0
;
if
(
args
.
hasDefined
(
3
)
&
&
!
ToIntegerIfIntegral
(
cx
"
days
"
args
[
3
]
&
days
)
)
{
return
false
;
}
double
hours
=
0
;
if
(
args
.
hasDefined
(
4
)
&
&
!
ToIntegerIfIntegral
(
cx
"
hours
"
args
[
4
]
&
hours
)
)
{
return
false
;
}
double
minutes
=
0
;
if
(
args
.
hasDefined
(
5
)
&
&
!
ToIntegerIfIntegral
(
cx
"
minutes
"
args
[
5
]
&
minutes
)
)
{
return
false
;
}
double
seconds
=
0
;
if
(
args
.
hasDefined
(
6
)
&
&
!
ToIntegerIfIntegral
(
cx
"
seconds
"
args
[
6
]
&
seconds
)
)
{
return
false
;
}
double
milliseconds
=
0
;
if
(
args
.
hasDefined
(
7
)
&
&
!
ToIntegerIfIntegral
(
cx
"
milliseconds
"
args
[
7
]
&
milliseconds
)
)
{
return
false
;
}
double
microseconds
=
0
;
if
(
args
.
hasDefined
(
8
)
&
&
!
ToIntegerIfIntegral
(
cx
"
microseconds
"
args
[
8
]
&
microseconds
)
)
{
return
false
;
}
double
nanoseconds
=
0
;
if
(
args
.
hasDefined
(
9
)
&
&
!
ToIntegerIfIntegral
(
cx
"
nanoseconds
"
args
[
9
]
&
nanoseconds
)
)
{
return
false
;
}
auto
*
duration
=
CreateTemporalDuration
(
cx
args
{
years
months
weeks
days
hours
minutes
seconds
milliseconds
microseconds
nanoseconds
}
)
;
if
(
!
duration
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
duration
)
;
return
true
;
}
static
bool
Duration_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Handle
<
Value
>
item
=
args
.
get
(
0
)
;
if
(
item
.
isObject
(
)
)
{
if
(
auto
*
duration
=
item
.
toObject
(
)
.
maybeUnwrapIf
<
DurationObject
>
(
)
)
{
auto
*
result
=
CreateTemporalDuration
(
cx
ToDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
auto
result
=
ToTemporalDuration
(
cx
item
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Duration
one
;
if
(
!
ToTemporalDuration
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
Duration
two
;
if
(
!
ToTemporalDuration
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
if
(
args
.
hasDefined
(
2
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
compare
"
args
[
2
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
ToRelativeTemporalObject
(
cx
options
&
relativeTo
)
)
{
return
false
;
}
}
int64_t
shift1
;
if
(
!
CalculateOffsetShift
(
cx
relativeTo
one
.
date
(
)
&
shift1
)
)
{
return
false
;
}
int64_t
shift2
;
if
(
!
CalculateOffsetShift
(
cx
relativeTo
two
.
date
(
)
&
shift2
)
)
{
return
false
;
}
double
days1
days2
;
if
(
one
.
years
!
=
0
|
|
one
.
months
!
=
0
|
|
one
.
weeks
!
=
0
|
|
two
.
years
!
=
0
|
|
two
.
months
!
=
0
|
|
two
.
weeks
!
=
0
)
{
DateDuration
unbalanceResult1
;
if
(
relativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
one
TemporalUnit
:
:
Day
relativeTo
&
unbalanceResult1
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
one
TemporalUnit
:
:
Day
&
unbalanceResult1
)
)
{
return
false
;
}
MOZ_ASSERT
(
one
.
date
(
)
=
=
unbalanceResult1
.
toDuration
(
)
)
;
}
DateDuration
unbalanceResult2
;
if
(
relativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
two
TemporalUnit
:
:
Day
relativeTo
&
unbalanceResult2
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
two
TemporalUnit
:
:
Day
&
unbalanceResult2
)
)
{
return
false
;
}
MOZ_ASSERT
(
two
.
date
(
)
=
=
unbalanceResult2
.
toDuration
(
)
)
;
}
days1
=
unbalanceResult1
.
days
;
days2
=
unbalanceResult2
.
days
;
}
else
{
days1
=
one
.
days
;
days2
=
two
.
days
;
}
Duration
oneTotal
=
{
0
0
0
days1
one
.
hours
one
.
minutes
one
.
seconds
one
.
milliseconds
one
.
microseconds
one
.
nanoseconds
}
;
Duration
twoTotal
=
{
0
0
0
days2
two
.
hours
two
.
minutes
two
.
seconds
two
.
milliseconds
two
.
microseconds
two
.
nanoseconds
}
;
if
(
auto
ns1
=
TotalDurationNanoseconds
(
oneTotal
shift1
)
)
{
if
(
auto
ns2
=
TotalDurationNanoseconds
(
twoTotal
shift2
)
)
{
args
.
rval
(
)
.
setInt32
(
*
ns1
<
*
ns2
?
-
1
:
*
ns1
>
*
ns2
?
1
:
0
)
;
return
true
;
}
}
Rooted
<
BigInt
*
>
ns1
(
cx
TotalDurationNanosecondsSlow
(
cx
oneTotal
shift1
)
)
;
if
(
!
ns1
)
{
return
false
;
}
auto
*
ns2
=
TotalDurationNanosecondsSlow
(
cx
twoTotal
shift2
)
;
if
(
!
ns2
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
BigInt
:
:
compare
(
ns1
ns2
)
)
;
return
true
;
}
static
bool
Duration_years
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
years
(
)
)
;
return
true
;
}
static
bool
Duration_years
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_years
>
(
cx
args
)
;
}
static
bool
Duration_months
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
months
(
)
)
;
return
true
;
}
static
bool
Duration_months
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_months
>
(
cx
args
)
;
}
static
bool
Duration_weeks
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
weeks
(
)
)
;
return
true
;
}
static
bool
Duration_weeks
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_weeks
>
(
cx
args
)
;
}
static
bool
Duration_days
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
days
(
)
)
;
return
true
;
}
static
bool
Duration_days
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_days
>
(
cx
args
)
;
}
static
bool
Duration_hours
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
hours
(
)
)
;
return
true
;
}
static
bool
Duration_hours
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_hours
>
(
cx
args
)
;
}
static
bool
Duration_minutes
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
minutes
(
)
)
;
return
true
;
}
static
bool
Duration_minutes
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_minutes
>
(
cx
args
)
;
}
static
bool
Duration_seconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
seconds
(
)
)
;
return
true
;
}
static
bool
Duration_seconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_seconds
>
(
cx
args
)
;
}
static
bool
Duration_milliseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
milliseconds
(
)
)
;
return
true
;
}
static
bool
Duration_milliseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_milliseconds
>
(
cx
args
)
;
}
static
bool
Duration_microseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
microseconds
(
)
)
;
return
true
;
}
static
bool
Duration_microseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_microseconds
>
(
cx
args
)
;
}
static
bool
Duration_nanoseconds
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
args
.
rval
(
)
.
setNumber
(
duration
-
>
nanoseconds
(
)
)
;
return
true
;
}
static
bool
Duration_nanoseconds
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_nanoseconds
>
(
cx
args
)
;
}
static
bool
Duration_sign
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
args
.
rval
(
)
.
setInt32
(
sign
)
;
return
true
;
}
static
bool
Duration_sign
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_sign
>
(
cx
args
)
;
}
static
bool
Duration_blank
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
int32_t
sign
=
DurationSign
(
ToDuration
(
duration
)
)
;
args
.
rval
(
)
.
setBoolean
(
sign
=
=
0
)
;
return
true
;
}
static
bool
Duration_blank
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_blank
>
(
cx
args
)
;
}
static
bool
Duration_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
Rooted
<
JSObject
*
>
temporalDurationLike
(
cx
RequireObjectArg
(
cx
"
temporalDurationLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDurationLike
)
{
return
false
;
}
if
(
!
ToTemporalPartialDurationRecord
(
cx
temporalDurationLike
&
duration
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalDuration
(
cx
duration
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_with
>
(
cx
args
)
;
}
static
bool
Duration_negated
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
auto
*
result
=
CreateTemporalDuration
(
cx
duration
.
negate
(
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_negated
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_negated
>
(
cx
args
)
;
}
static
bool
Duration_abs
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
auto
*
result
=
CreateTemporalDuration
(
cx
AbsoluteDuration
(
duration
)
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
Duration_abs
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_abs
>
(
cx
args
)
;
}
static
bool
Duration_add
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromDuration
(
cx
DurationOperation
:
:
Add
args
)
;
}
static
bool
Duration_add
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_add
>
(
cx
args
)
;
}
static
bool
Duration_subtract
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
AddDurationToOrSubtractDurationFromDuration
(
cx
DurationOperation
:
:
Subtract
args
)
;
}
static
bool
Duration_subtract
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_subtract
>
(
cx
args
)
;
}
static
bool
Duration_round
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
TemporalUnit
largestUnit
;
auto
roundingMode
=
TemporalRoundingMode
:
:
HalfExpand
;
auto
roundingIncrement
=
Increment
{
1
}
;
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
if
(
args
.
get
(
0
)
.
isString
(
)
)
{
Rooted
<
JSString
*
>
paramString
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
GetTemporalUnit
(
cx
paramString
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DateTime
&
smallestUnit
)
)
{
return
false
;
}
auto
defaultLargestUnit
=
DefaultTemporalLargestUnit
(
duration
)
;
defaultLargestUnit
=
std
:
:
min
(
defaultLargestUnit
smallestUnit
)
;
largestUnit
=
defaultLargestUnit
;
}
else
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
roundTo
"
"
round
"
args
.
get
(
0
)
)
)
;
if
(
!
options
)
{
return
false
;
}
bool
smallestUnitPresent
=
true
;
bool
largestUnitPresent
=
true
;
Rooted
<
Value
>
largestUnitValue
(
cx
)
;
if
(
!
GetProperty
(
cx
options
options
cx
-
>
names
(
)
.
largestUnit
&
largestUnitValue
)
)
{
return
false
;
}
if
(
!
largestUnitValue
.
isUndefined
(
)
)
{
Rooted
<
JSString
*
>
largestUnitStr
(
cx
JS
:
:
ToString
(
cx
largestUnitValue
)
)
;
if
(
!
largestUnitStr
)
{
return
false
;
}
largestUnit
=
TemporalUnit
:
:
Auto
;
if
(
!
GetTemporalUnit
(
cx
largestUnitStr
TemporalUnitKey
:
:
LargestUnit
TemporalUnitGroup
:
:
DateTime
&
largestUnit
)
)
{
return
false
;
}
}
if
(
!
ToRelativeTemporalObject
(
cx
options
&
relativeTo
)
)
{
return
false
;
}
if
(
!
ToTemporalRoundingIncrement
(
cx
options
&
roundingIncrement
)
)
{
return
false
;
}
if
(
!
ToTemporalRoundingMode
(
cx
options
&
roundingMode
)
)
{
return
false
;
}
if
(
!
GetTemporalUnit
(
cx
options
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
DateTime
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Auto
)
{
smallestUnitPresent
=
false
;
smallestUnit
=
TemporalUnit
:
:
Nanosecond
;
}
auto
defaultLargestUnit
=
DefaultTemporalLargestUnit
(
duration
)
;
defaultLargestUnit
=
std
:
:
min
(
defaultLargestUnit
smallestUnit
)
;
if
(
largestUnitValue
.
isUndefined
(
)
)
{
largestUnitPresent
=
false
;
largestUnit
=
defaultLargestUnit
;
}
else
if
(
largestUnit
=
=
TemporalUnit
:
:
Auto
)
{
largestUnit
=
defaultLargestUnit
;
}
if
(
!
smallestUnitPresent
&
&
!
largestUnitPresent
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_DURATION_MISSING_UNIT_SPECIFIER
)
;
return
false
;
}
if
(
largestUnit
>
smallestUnit
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_UNIT_RANGE
)
;
return
false
;
}
if
(
smallestUnit
>
TemporalUnit
:
:
Day
)
{
auto
maximum
=
MaximumTemporalDurationRoundingIncrement
(
smallestUnit
)
;
if
(
!
ValidateTemporalRoundingIncrement
(
cx
roundingIncrement
maximum
false
)
)
{
return
false
;
}
}
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
(
cx
)
;
Rooted
<
Wrapped
<
ZonedDateTimeObject
*
>
>
zonedRelativeTo
(
cx
)
;
if
(
relativeTo
)
{
if
(
relativeTo
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
dateRelativeTo
=
relativeTo
;
}
else
if
(
relativeTo
-
>
canUnwrapAs
<
ZonedDateTimeObject
>
(
)
)
{
zonedRelativeTo
=
relativeTo
;
}
else
{
MOZ_ASSERT
(
!
IsDeadProxyObject
(
relativeTo
)
"
ToRelativeTemporalObject
doesn
'
t
return
dead
wrappers
"
)
;
MOZ_CRASH
(
"
expected
either
PlainDateObject
or
ZonedDateTimeObject
"
)
;
}
}
DateDuration
unbalanceResult
;
if
(
relativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
largestUnit
relativeTo
&
unbalanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
largestUnit
&
unbalanceResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
duration
.
date
(
)
=
=
unbalanceResult
.
toDuration
(
)
)
;
}
Duration
roundInput
=
{
unbalanceResult
.
years
unbalanceResult
.
months
unbalanceResult
.
weeks
unbalanceResult
.
days
duration
.
hours
duration
.
minutes
duration
.
seconds
duration
.
milliseconds
duration
.
microseconds
duration
.
nanoseconds
}
;
Duration
roundResult
;
if
(
dateRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
roundingIncrement
smallestUnit
roundingMode
dateRelativeTo
&
roundResult
)
)
{
return
false
;
}
}
else
if
(
zonedRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
roundingIncrement
smallestUnit
roundingMode
zonedRelativeTo
&
roundResult
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
roundingIncrement
smallestUnit
roundingMode
&
roundResult
)
)
{
return
false
;
}
}
TimeDuration
balanceResult
;
if
(
zonedRelativeTo
)
{
Duration
adjustResult
;
if
(
!
AdjustRoundedDurationDays
(
cx
roundResult
roundingIncrement
smallestUnit
roundingMode
zonedRelativeTo
&
adjustResult
)
)
{
return
false
;
}
roundResult
=
adjustResult
;
if
(
!
BalanceTimeDurationRelative
(
cx
roundResult
largestUnit
zonedRelativeTo
&
balanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
BalanceTimeDuration
(
cx
roundResult
largestUnit
&
balanceResult
)
)
{
return
false
;
}
}
Duration
balanceInput
=
{
roundResult
.
years
roundResult
.
months
roundResult
.
weeks
balanceResult
.
days
}
;
DateDuration
result
;
if
(
!
BalanceDateDurationRelative
(
cx
balanceInput
largestUnit
relativeTo
&
result
)
)
{
return
false
;
}
auto
*
obj
=
CreateTemporalDuration
(
cx
{
result
.
years
result
.
months
result
.
weeks
result
.
days
balanceResult
.
hours
balanceResult
.
minutes
balanceResult
.
seconds
balanceResult
.
milliseconds
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
Duration_round
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_round
>
(
cx
args
)
;
}
static
bool
Duration_total
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
durationObj
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
auto
duration
=
ToDuration
(
durationObj
)
;
Rooted
<
JSObject
*
>
relativeTo
(
cx
)
;
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
dateRelativeTo
(
cx
)
;
Rooted
<
Wrapped
<
ZonedDateTimeObject
*
>
>
zonedRelativeTo
(
cx
)
;
auto
unit
=
TemporalUnit
:
:
Auto
;
if
(
args
.
get
(
0
)
.
isString
(
)
)
{
MOZ_ASSERT
(
!
relativeTo
)
;
Rooted
<
JSString
*
>
paramString
(
cx
args
[
0
]
.
toString
(
)
)
;
if
(
!
GetTemporalUnit
(
cx
paramString
TemporalUnitKey
:
:
Unit
TemporalUnitGroup
:
:
DateTime
&
unit
)
)
{
return
false
;
}
}
else
{
Rooted
<
JSObject
*
>
totalOf
(
cx
RequireObjectArg
(
cx
"
totalOf
"
"
total
"
args
.
get
(
0
)
)
)
;
if
(
!
totalOf
)
{
return
false
;
}
if
(
!
ToRelativeTemporalObject
(
cx
totalOf
&
relativeTo
)
)
{
return
false
;
}
if
(
relativeTo
)
{
if
(
relativeTo
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
dateRelativeTo
=
relativeTo
;
}
else
if
(
relativeTo
-
>
canUnwrapAs
<
ZonedDateTimeObject
>
(
)
)
{
zonedRelativeTo
=
relativeTo
;
}
else
{
MOZ_ASSERT
(
!
IsDeadProxyObject
(
relativeTo
)
"
ToRelativeTemporalObject
doesn
'
t
return
dead
wrappers
"
)
;
MOZ_CRASH
(
"
expected
either
PlainDateObject
or
ZonedDateTimeObject
"
)
;
}
}
if
(
!
GetTemporalUnit
(
cx
totalOf
TemporalUnitKey
:
:
Unit
TemporalUnitGroup
:
:
DateTime
&
unit
)
)
{
return
false
;
}
if
(
unit
=
=
TemporalUnit
:
:
Auto
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_MISSING_OPTION
"
unit
"
)
;
return
false
;
}
}
DateDuration
unbalanceResult
;
if
(
relativeTo
)
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
unit
relativeTo
&
unbalanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
UnbalanceDateDurationRelative
(
cx
duration
unit
&
unbalanceResult
)
)
{
return
false
;
}
MOZ_ASSERT
(
duration
.
date
(
)
=
=
unbalanceResult
.
toDuration
(
)
)
;
}
Duration
balanceInput
=
{
0
0
0
unbalanceResult
.
days
duration
.
hours
duration
.
minutes
duration
.
seconds
duration
.
milliseconds
duration
.
microseconds
duration
.
nanoseconds
}
;
TimeDuration
balanceResult
;
if
(
zonedRelativeTo
)
{
Rooted
<
ZonedDateTimeObject
*
>
intermediate
(
cx
MoveRelativeZonedDateTime
(
cx
zonedRelativeTo
{
unbalanceResult
.
years
unbalanceResult
.
months
unbalanceResult
.
weeks
0
}
)
)
;
if
(
!
intermediate
)
{
return
false
;
}
if
(
!
BalancePossiblyInfiniteTimeDurationRelative
(
cx
balanceInput
unit
intermediate
&
balanceResult
)
)
{
return
false
;
}
}
else
{
if
(
!
BalancePossiblyInfiniteTimeDuration
(
cx
balanceInput
unit
&
balanceResult
)
)
{
return
false
;
}
}
for
(
double
v
:
{
balanceResult
.
days
balanceResult
.
hours
balanceResult
.
minutes
balanceResult
.
seconds
balanceResult
.
milliseconds
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
)
{
if
(
std
:
:
isinf
(
v
)
)
{
args
.
rval
(
)
.
setDouble
(
v
)
;
return
true
;
}
}
MOZ_ASSERT
(
IsValidDuration
(
balanceResult
.
toDuration
(
)
)
)
;
Duration
roundInput
=
{
unbalanceResult
.
years
unbalanceResult
.
months
unbalanceResult
.
weeks
balanceResult
.
days
balanceResult
.
hours
balanceResult
.
minutes
balanceResult
.
seconds
balanceResult
.
milliseconds
balanceResult
.
microseconds
balanceResult
.
nanoseconds
}
;
double
total
;
if
(
zonedRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
Increment
{
1
}
unit
TemporalRoundingMode
:
:
Trunc
zonedRelativeTo
&
total
)
)
{
return
false
;
}
}
else
if
(
dateRelativeTo
)
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
Increment
{
1
}
unit
TemporalRoundingMode
:
:
Trunc
dateRelativeTo
&
total
)
)
{
return
false
;
}
}
else
{
if
(
!
:
:
RoundDuration
(
cx
roundInput
Increment
{
1
}
unit
TemporalRoundingMode
:
:
Trunc
&
total
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setNumber
(
total
)
;
return
true
;
}
static
bool
Duration_total
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_total
>
(
cx
args
)
;
}
static
bool
Duration_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
SecondsStringPrecision
precision
=
{
Precision
:
:
Auto
(
)
TemporalUnit
:
:
Nanosecond
Increment
{
1
}
}
;
auto
roundingMode
=
TemporalRoundingMode
:
:
Trunc
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toString
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
auto
digits
=
Precision
:
:
Auto
(
)
;
if
(
!
ToFractionalSecondDigits
(
cx
options
&
digits
)
)
{
return
false
;
}
if
(
!
ToTemporalRoundingMode
(
cx
options
&
roundingMode
)
)
{
return
false
;
}
auto
smallestUnit
=
TemporalUnit
:
:
Auto
;
if
(
!
GetTemporalUnit
(
cx
options
TemporalUnitKey
:
:
SmallestUnit
TemporalUnitGroup
:
:
Time
&
smallestUnit
)
)
{
return
false
;
}
if
(
smallestUnit
=
=
TemporalUnit
:
:
Hour
|
|
smallestUnit
=
=
TemporalUnit
:
:
Minute
)
{
const
char
*
smallestUnitStr
=
smallestUnit
=
=
TemporalUnit
:
:
Hour
?
"
hour
"
:
"
minute
"
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_UNIT_OPTION
smallestUnitStr
"
smallestUnit
"
)
;
return
false
;
}
precision
=
ToSecondsStringPrecision
(
smallestUnit
digits
)
;
}
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
Duration
rounded
;
if
(
!
temporal
:
:
RoundDuration
(
cx
ToDuration
(
duration
)
precision
.
increment
precision
.
unit
roundingMode
&
rounded
)
)
{
return
false
;
}
JSString
*
str
=
TemporalDurationToString
(
cx
rounded
precision
.
precision
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toString
>
(
cx
args
)
;
}
static
bool
Duration_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
JSString
*
str
=
TemporalDurationToString
(
cx
ToDuration
(
duration
)
Precision
:
:
Auto
(
)
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toJSON
>
(
cx
args
)
;
}
static
bool
Duration_toLocaleString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
duration
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
DurationObject
>
(
)
;
JSString
*
str
=
TemporalDurationToString
(
cx
ToDuration
(
duration
)
Precision
:
:
Auto
(
)
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
Duration_toLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsDuration
Duration_toLocaleString
>
(
cx
args
)
;
}
static
bool
Duration_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
Duration
"
"
primitive
type
"
)
;
return
false
;
}
const
JSClass
DurationObject
:
:
class_
=
{
"
Temporal
.
Duration
"
JSCLASS_HAS_RESERVED_SLOTS
(
DurationObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Duration
)
JS_NULL_CLASS_OPS
&
DurationObject
:
:
classSpec_
}
;
const
JSClass
&
DurationObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
Duration_methods
[
]
=
{
JS_FN
(
"
from
"
Duration_from
1
0
)
JS_FN
(
"
compare
"
Duration_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
Duration_prototype_methods
[
]
=
{
JS_FN
(
"
with
"
Duration_with
1
0
)
JS_FN
(
"
negated
"
Duration_negated
0
0
)
JS_FN
(
"
abs
"
Duration_abs
0
0
)
JS_FN
(
"
add
"
Duration_add
1
0
)
JS_FN
(
"
subtract
"
Duration_subtract
1
0
)
JS_FN
(
"
round
"
Duration_round
1
0
)
JS_FN
(
"
total
"
Duration_total
1
0
)
JS_FN
(
"
toString
"
Duration_toString
0
0
)
JS_FN
(
"
toJSON
"
Duration_toJSON
0
0
)
JS_FN
(
"
toLocaleString
"
Duration_toLocaleString
0
0
)
JS_FN
(
"
valueOf
"
Duration_valueOf
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
Duration_prototype_properties
[
]
=
{
JS_PSG
(
"
years
"
Duration_years
0
)
JS_PSG
(
"
months
"
Duration_months
0
)
JS_PSG
(
"
weeks
"
Duration_weeks
0
)
JS_PSG
(
"
days
"
Duration_days
0
)
JS_PSG
(
"
hours
"
Duration_hours
0
)
JS_PSG
(
"
minutes
"
Duration_minutes
0
)
JS_PSG
(
"
seconds
"
Duration_seconds
0
)
JS_PSG
(
"
milliseconds
"
Duration_milliseconds
0
)
JS_PSG
(
"
microseconds
"
Duration_microseconds
0
)
JS_PSG
(
"
nanoseconds
"
Duration_nanoseconds
0
)
JS_PSG
(
"
sign
"
Duration_sign
0
)
JS_PSG
(
"
blank
"
Duration_blank
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
Duration
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
DurationObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
DurationConstructor
0
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
DurationObject
>
Duration_methods
nullptr
Duration_prototype_methods
Duration_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
