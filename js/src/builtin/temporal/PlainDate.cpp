#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainMonthDay
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalFields
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalRoundingMode
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
ds
/
IdValuePair
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsPlainDate
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
PlainDateObject
>
(
)
;
}
#
ifdef
DEBUG
template
<
typename
T
>
static
bool
IsValidISODate
(
T
year
T
month
T
day
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
)
;
MOZ_ASSERT
(
IsInteger
(
day
)
)
;
if
(
month
<
1
|
|
month
>
12
)
{
return
false
;
}
int32_t
daysInMonth
=
js
:
:
temporal
:
:
ISODaysInMonth
(
year
int32_t
(
month
)
)
;
if
(
day
<
1
|
|
day
>
daysInMonth
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
IsValidISODate
(
const
PlainDate
&
date
)
{
auto
&
[
year
month
day
]
=
date
;
return
:
:
IsValidISODate
(
year
month
day
)
;
}
bool
js
:
:
temporal
:
:
IsValidISODate
(
double
year
double
month
double
day
)
{
return
:
:
IsValidISODate
(
year
month
day
)
;
}
#
endif
static
void
ReportInvalidDateValue
(
JSContext
*
cx
const
char
*
name
int32_t
min
int32_t
max
double
num
)
{
Int32ToCStringBuf
minCbuf
;
const
char
*
minStr
=
Int32ToCString
(
&
minCbuf
min
)
;
Int32ToCStringBuf
maxCbuf
;
const
char
*
maxStr
=
Int32ToCString
(
&
maxCbuf
max
)
;
ToCStringBuf
numCbuf
;
const
char
*
numStr
=
NumberToCString
(
&
numCbuf
num
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID_VALUE
name
minStr
maxStr
numStr
)
;
}
template
<
typename
T
>
static
inline
bool
ThrowIfInvalidDateValue
(
JSContext
*
cx
const
char
*
name
int32_t
min
int32_t
max
T
num
)
{
if
(
min
<
=
num
&
&
num
<
=
max
)
{
return
true
;
}
ReportInvalidDateValue
(
cx
name
min
max
num
)
;
return
false
;
}
template
<
typename
T
>
static
bool
ThrowIfInvalidISODate
(
JSContext
*
cx
T
year
T
month
T
day
)
{
static_assert
(
std
:
:
is_same_v
<
T
int32_t
>
|
|
std
:
:
is_same_v
<
T
double
>
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
)
;
MOZ_ASSERT
(
IsInteger
(
day
)
)
;
if
(
!
ThrowIfInvalidDateValue
(
cx
"
month
"
1
12
month
)
)
{
return
false
;
}
int32_t
daysInMonth
=
js
:
:
temporal
:
:
ISODaysInMonth
(
year
int32_t
(
month
)
)
;
if
(
!
ThrowIfInvalidDateValue
(
cx
"
day
"
1
daysInMonth
day
)
)
{
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidISODate
(
JSContext
*
cx
const
PlainDate
&
date
)
{
auto
&
[
year
month
day
]
=
date
;
return
:
:
ThrowIfInvalidISODate
(
cx
year
month
day
)
;
}
bool
js
:
:
temporal
:
:
ThrowIfInvalidISODate
(
JSContext
*
cx
double
year
double
month
double
day
)
{
return
:
:
ThrowIfInvalidISODate
(
cx
year
month
day
)
;
}
bool
js
:
:
temporal
:
:
RegulateISODate
(
JSContext
*
cx
const
PlainDate
&
date
TemporalOverflow
overflow
PlainDate
*
result
)
{
auto
&
[
year
month
day
]
=
date
;
if
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
{
int32_t
m
=
std
:
:
clamp
(
month
1
12
)
;
int32_t
daysInMonth
=
ISODaysInMonth
(
year
m
)
;
int32_t
d
=
std
:
:
clamp
(
day
1
daysInMonth
)
;
*
result
=
{
year
m
d
}
;
return
true
;
}
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
;
if
(
!
ThrowIfInvalidISODate
(
cx
year
month
day
)
)
{
return
false
;
}
*
result
=
{
year
month
day
}
;
return
true
;
}
bool
js
:
:
temporal
:
:
RegulateISODate
(
JSContext
*
cx
double
year
double
month
double
day
TemporalOverflow
overflow
RegulatedISODate
*
result
)
{
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
)
;
MOZ_ASSERT
(
IsInteger
(
day
)
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
{
int32_t
m
=
int32_t
(
std
:
:
clamp
(
month
1
.
0
12
.
0
)
)
;
double
daysInMonth
=
double
(
ISODaysInMonth
(
year
m
)
)
;
int32_t
d
=
int32_t
(
std
:
:
clamp
(
day
1
.
0
daysInMonth
)
)
;
*
result
=
{
year
m
d
}
;
return
true
;
}
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
;
if
(
!
ThrowIfInvalidISODate
(
cx
year
month
day
)
)
{
return
false
;
}
*
result
=
{
year
int32_t
(
month
)
int32_t
(
day
)
}
;
return
true
;
}
static
PlainDateObject
*
CreateTemporalDate
(
JSContext
*
cx
const
CallArgs
&
args
double
isoYear
double
isoMonth
double
isoDay
Handle
<
CalendarValue
>
calendar
)
{
MOZ_ASSERT
(
IsInteger
(
isoYear
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoMonth
)
)
;
MOZ_ASSERT
(
IsInteger
(
isoDay
)
)
;
if
(
!
ThrowIfInvalidISODate
(
cx
isoYear
isoMonth
isoDay
)
)
{
return
nullptr
;
}
if
(
!
ISODateTimeWithinLimits
(
isoYear
isoMonth
isoDay
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
nullptr
;
}
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_PlainDate
&
proto
)
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithClassProto
<
PlainDateObject
>
(
cx
proto
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_YEAR_SLOT
Int32Value
(
isoYear
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_MONTH_SLOT
Int32Value
(
isoMonth
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_DAY_SLOT
Int32Value
(
isoDay
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
CALENDAR_SLOT
calendar
.
toValue
(
)
)
;
return
object
;
}
PlainDateObject
*
js
:
:
temporal
:
:
CreateTemporalDate
(
JSContext
*
cx
const
PlainDate
&
date
Handle
<
CalendarValue
>
calendar
)
{
auto
&
[
isoYear
isoMonth
isoDay
]
=
date
;
if
(
!
ThrowIfInvalidISODate
(
cx
date
)
)
{
return
nullptr
;
}
if
(
!
ISODateTimeWithinLimits
(
date
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
nullptr
;
}
auto
*
object
=
NewBuiltinClassInstance
<
PlainDateObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_YEAR_SLOT
Int32Value
(
isoYear
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_MONTH_SLOT
Int32Value
(
isoMonth
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
ISO_DAY_SLOT
Int32Value
(
isoDay
)
)
;
object
-
>
setFixedSlot
(
PlainDateObject
:
:
CALENDAR_SLOT
calendar
.
toValue
(
)
)
;
return
object
;
}
static
Wrapped
<
PlainDateObject
*
>
ToTemporalDate
(
JSContext
*
cx
Handle
<
JSObject
*
>
item
Handle
<
JSObject
*
>
maybeOptions
)
{
if
(
item
-
>
canUnwrapAs
<
PlainDateObject
>
(
)
)
{
return
item
;
}
if
(
auto
*
zonedDateTime
=
item
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
auto
epochInstant
=
ToInstant
(
zonedDateTime
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
zonedDateTime
-
>
calendar
(
)
)
;
if
(
!
timeZone
.
wrap
(
cx
)
)
{
return
nullptr
;
}
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
nullptr
;
}
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
epochInstant
&
dateTime
)
)
{
return
nullptr
;
}
return
CreateTemporalDate
(
cx
dateTime
.
date
calendar
)
;
}
if
(
auto
*
dateTime
=
item
-
>
maybeUnwrapIf
<
PlainDateTimeObject
>
(
)
)
{
auto
date
=
ToPlainDate
(
dateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
dateTime
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
nullptr
;
}
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
return
CreateTemporalDate
(
cx
date
calendar
)
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
GetTemporalCalendarWithISODefault
(
cx
item
&
calendar
)
)
{
return
nullptr
;
}
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
nullptr
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
item
fieldNames
)
)
;
if
(
!
fields
)
{
return
nullptr
;
}
return
:
:
CalendarDateFromFields
(
cx
calendar
fields
maybeOptions
)
;
}
static
Wrapped
<
PlainDateObject
*
>
ToTemporalDate
(
JSContext
*
cx
Handle
<
Value
>
item
Handle
<
JSObject
*
>
maybeOptions
)
{
if
(
item
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
itemObj
(
cx
&
item
.
toObject
(
)
)
;
return
:
:
ToTemporalDate
(
cx
itemObj
maybeOptions
)
;
}
if
(
maybeOptions
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
maybeOptions
&
ignored
)
)
{
return
nullptr
;
}
}
Rooted
<
JSString
*
>
string
(
cx
JS
:
:
ToString
(
cx
item
)
)
;
if
(
!
string
)
{
return
nullptr
;
}
PlainDate
result
;
Rooted
<
JSString
*
>
calendarString
(
cx
)
;
if
(
!
ParseTemporalDateString
(
cx
string
&
result
&
calendarString
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
IsValidISODate
(
result
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
CalendarValue
(
cx
-
>
names
(
)
.
iso8601
)
)
;
if
(
calendarString
)
{
if
(
!
ToBuiltinCalendar
(
cx
calendarString
&
calendar
)
)
{
return
nullptr
;
}
}
return
CreateTemporalDate
(
cx
result
calendar
)
;
}
static
Wrapped
<
PlainDateObject
*
>
ToTemporalDate
(
JSContext
*
cx
Handle
<
Value
>
item
)
{
return
:
:
ToTemporalDate
(
cx
item
nullptr
)
;
}
Wrapped
<
PlainDateObject
*
>
js
:
:
temporal
:
:
ToTemporalDate
(
JSContext
*
cx
Handle
<
JSObject
*
>
item
)
{
return
:
:
ToTemporalDate
(
cx
item
nullptr
)
;
}
bool
js
:
:
temporal
:
:
ToTemporalDate
(
JSContext
*
cx
Handle
<
Value
>
item
PlainDate
*
result
)
{
auto
obj
=
:
:
ToTemporalDate
(
cx
item
nullptr
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToPlainDate
(
&
obj
.
unwrap
(
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
ToTemporalDate
(
JSContext
*
cx
Handle
<
Value
>
item
PlainDate
*
result
MutableHandle
<
CalendarValue
>
calendar
)
{
auto
*
obj
=
:
:
ToTemporalDate
(
cx
item
nullptr
)
.
unwrapOrNull
(
)
;
if
(
!
obj
)
{
return
false
;
}
*
result
=
ToPlainDate
(
obj
)
;
calendar
.
set
(
obj
-
>
calendar
(
)
)
;
return
calendar
.
wrap
(
cx
)
;
}
static
JSString
*
TemporalDateToString
(
JSContext
*
cx
Handle
<
PlainDateObject
*
>
temporalDate
CalendarOption
showCalendar
)
{
auto
[
year
month
day
]
=
ToPlainDate
(
temporalDate
)
;
JSStringBuilder
result
(
cx
)
;
if
(
!
result
.
reserve
(
1
+
6
+
1
+
2
+
1
+
2
)
)
{
return
nullptr
;
}
if
(
0
<
=
year
&
&
year
<
=
9999
)
{
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
/
1000
)
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
1000
)
/
100
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
100
)
/
10
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
10
)
)
)
;
}
else
{
result
.
infallibleAppend
(
year
<
0
?
'
-
'
:
'
+
'
)
;
year
=
std
:
:
abs
(
year
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
/
100000
)
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
100000
)
/
10000
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
10000
)
/
1000
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
1000
)
/
100
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
100
)
/
10
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
year
%
10
)
)
)
;
}
result
.
infallibleAppend
(
'
-
'
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
month
/
10
)
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
month
%
10
)
)
)
;
result
.
infallibleAppend
(
'
-
'
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
day
/
10
)
)
)
;
result
.
infallibleAppend
(
char
(
'
0
'
+
(
day
%
10
)
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
if
(
!
MaybeFormatCalendarAnnotation
(
cx
result
calendar
showCalendar
)
)
{
return
nullptr
;
}
return
result
.
finishString
(
)
;
}
static
int32_t
NonNegativeModulo
(
double
x
int32_t
y
)
{
MOZ_ASSERT
(
IsInteger
(
x
)
)
;
MOZ_ASSERT
(
y
>
0
)
;
double
r
=
std
:
:
fmod
(
x
y
)
;
int32_t
result
;
MOZ_ALWAYS_TRUE
(
mozilla
:
:
NumberEqualsInt32
(
r
&
result
)
)
;
return
(
result
<
0
)
?
(
result
+
y
)
:
result
;
}
struct
BalancedYearMonth
final
{
double
year
=
0
;
int32_t
month
=
0
;
}
;
static
BalancedYearMonth
BalanceISOYearMonth
(
double
year
double
month
)
{
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
)
;
year
=
year
+
std
:
:
floor
(
(
month
-
1
)
/
12
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
|
|
std
:
:
isinf
(
year
)
)
;
int32_t
mon
=
NonNegativeModulo
(
month
-
1
12
)
+
1
;
MOZ_ASSERT
(
1
<
=
mon
&
&
mon
<
=
12
)
;
return
{
year
mon
}
;
}
static
bool
CanBalanceISOYear
(
double
year
)
{
constexpr
int32_t
minYear
=
-
271821
;
constexpr
int32_t
maxYear
=
275760
;
return
minYear
<
=
year
&
&
year
<
=
maxYear
;
}
static
bool
CanBalanceISODay
(
double
day
)
{
constexpr
int64_t
maxInstantSeconds
=
8
'
640
'
000
'
000
'
000
;
constexpr
int64_t
maxInstantDays
=
maxInstantSeconds
/
60
/
60
/
24
;
constexpr
int64_t
maximumDayDifference
=
2
*
maxInstantDays
+
20
;
static_assert
(
maximumDayDifference
<
=
INT32_MAX
)
;
return
std
:
:
abs
(
day
)
<
=
maximumDayDifference
;
}
PlainDate
js
:
:
temporal
:
:
BalanceISODateNew
(
int32_t
year
int32_t
month
int32_t
day
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
int64_t
ms
=
MakeDate
(
year
month
day
)
;
return
{
int32_t
(
JS
:
:
YearFromTime
(
ms
)
)
int32_t
(
JS
:
:
MonthFromTime
(
ms
)
+
1
)
int32_t
(
JS
:
:
DayFromTime
(
ms
)
)
}
;
}
bool
js
:
:
temporal
:
:
BalanceISODate
(
JSContext
*
cx
int32_t
year
int32_t
month
int64_t
day
PlainDate
*
result
)
{
if
(
!
CanBalanceISODay
(
day
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
false
;
}
*
result
=
BalanceISODate
(
year
month
int32_t
(
day
)
)
;
return
true
;
}
PlainDate
js
:
:
temporal
:
:
BalanceISODate
(
int32_t
year
int32_t
month
int32_t
day
)
{
MOZ_ASSERT
(
CanBalanceISOYear
(
year
)
)
;
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
MOZ_ASSERT
(
CanBalanceISODay
(
day
)
)
;
constexpr
int32_t
daysInNonLeapYear
=
365
;
if
(
std
:
:
abs
(
day
)
>
daysInNonLeapYear
)
{
int32_t
testYear
=
month
>
2
?
year
:
year
-
1
;
while
(
day
<
-
ISODaysInYear
(
testYear
)
)
{
day
+
=
ISODaysInYear
(
testYear
)
;
year
-
=
1
;
testYear
-
=
1
;
}
testYear
+
=
1
;
while
(
day
>
ISODaysInYear
(
testYear
)
)
{
day
-
=
ISODaysInYear
(
testYear
)
;
year
+
=
1
;
testYear
+
=
1
;
}
}
while
(
day
<
1
)
{
if
(
-
-
month
=
=
0
)
{
month
=
12
;
year
-
=
1
;
}
day
+
=
ISODaysInMonth
(
year
month
)
;
}
while
(
day
>
ISODaysInMonth
(
year
month
)
)
{
day
-
=
ISODaysInMonth
(
year
month
)
;
if
(
+
+
month
=
=
13
)
{
month
=
1
;
year
+
=
1
;
}
}
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
MOZ_ASSERT
(
1
<
=
day
&
&
day
<
=
31
)
;
return
{
year
month
day
}
;
}
bool
js
:
:
temporal
:
:
AddISODate
(
JSContext
*
cx
const
PlainDate
&
date
const
Duration
&
duration
TemporalOverflow
overflow
PlainDate
*
result
)
{
MOZ_ASSERT
(
IsValidISODate
(
date
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
date
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
MOZ_ASSERT
(
IsInteger
(
duration
.
years
)
)
;
MOZ_ASSERT
(
IsInteger
(
duration
.
months
)
)
;
MOZ_ASSERT
(
IsInteger
(
duration
.
weeks
)
)
;
MOZ_ASSERT
(
IsInteger
(
duration
.
days
)
)
;
auto
yearMonth
=
BalanceISOYearMonth
(
date
.
year
+
duration
.
years
date
.
month
+
duration
.
months
)
;
MOZ_ASSERT
(
IsInteger
(
yearMonth
.
year
)
|
|
std
:
:
isinf
(
yearMonth
.
year
)
)
;
MOZ_ASSERT
(
1
<
=
yearMonth
.
month
&
&
yearMonth
.
month
<
=
12
)
;
if
(
!
CanBalanceISOYear
(
yearMonth
.
year
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
false
;
}
PlainDate
regulated
;
if
(
!
RegulateISODate
(
cx
{
int32_t
(
yearMonth
.
year
)
yearMonth
.
month
date
.
day
}
overflow
&
regulated
)
)
{
return
false
;
}
double
d
=
regulated
.
day
+
(
duration
.
days
+
duration
.
weeks
*
7
)
;
if
(
!
CanBalanceISODay
(
d
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
false
;
}
auto
balanced
=
BalanceISODate
(
regulated
.
year
regulated
.
month
int32_t
(
d
)
)
;
MOZ_ASSERT
(
IsValidISODate
(
balanced
)
)
;
*
result
=
balanced
;
return
true
;
}
int32_t
js
:
:
temporal
:
:
CompareISODate
(
const
PlainDate
&
one
const
PlainDate
&
two
)
{
if
(
one
.
year
!
=
two
.
year
)
{
return
one
.
year
<
two
.
year
?
-
1
:
1
;
}
if
(
one
.
month
!
=
two
.
month
)
{
return
one
.
month
<
two
.
month
?
-
1
:
1
;
}
if
(
one
.
day
!
=
two
.
day
)
{
return
one
.
day
<
two
.
day
?
-
1
:
1
;
}
return
0
;
}
static
DateDuration
CreateDateDurationRecord
(
int32_t
years
int32_t
months
int32_t
weeks
int32_t
days
)
{
MOZ_ASSERT
(
IsValidDuration
(
{
double
(
years
)
double
(
months
)
double
(
weeks
)
double
(
days
)
}
)
)
;
return
{
double
(
years
)
double
(
months
)
double
(
weeks
)
double
(
days
)
}
;
}
bool
js
:
:
temporal
:
:
DifferenceISODate
(
JSContext
*
cx
const
PlainDate
&
start
const
PlainDate
&
end
TemporalUnit
largestUnit
DateDuration
*
result
)
{
MOZ_ASSERT
(
IsValidISODate
(
start
)
)
;
MOZ_ASSERT
(
IsValidISODate
(
end
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
start
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
end
)
)
;
MOZ_ASSERT
(
TemporalUnit
:
:
Year
<
=
largestUnit
&
&
largestUnit
<
=
TemporalUnit
:
:
Day
)
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
|
|
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
int32_t
sign
=
-
CompareISODate
(
start
end
)
;
if
(
sign
=
=
0
)
{
*
result
=
CreateDateDurationRecord
(
0
0
0
0
)
;
return
true
;
}
int32_t
years
=
end
.
year
-
start
.
year
;
PlainDate
mid
;
if
(
!
AddISODate
(
cx
start
{
double
(
years
)
0
0
0
}
TemporalOverflow
:
:
Constrain
&
mid
)
)
{
return
false
;
}
int32_t
midSign
=
-
CompareISODate
(
mid
end
)
;
if
(
midSign
=
=
0
)
{
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
)
{
*
result
=
CreateDateDurationRecord
(
years
0
0
0
)
;
}
else
{
*
result
=
CreateDateDurationRecord
(
0
years
*
12
0
0
)
;
}
return
true
;
}
int32_t
months
=
end
.
month
-
start
.
month
;
if
(
midSign
!
=
sign
)
{
years
-
=
sign
;
months
+
=
sign
*
12
;
}
if
(
!
AddISODate
(
cx
start
{
double
(
years
)
double
(
months
)
0
}
TemporalOverflow
:
:
Constrain
&
mid
)
)
{
return
false
;
}
midSign
=
-
CompareISODate
(
mid
end
)
;
if
(
midSign
=
=
0
)
{
if
(
largestUnit
=
=
TemporalUnit
:
:
Year
)
{
*
result
=
CreateDateDurationRecord
(
years
months
0
0
)
;
}
else
{
*
result
=
CreateDateDurationRecord
(
0
months
+
years
*
12
0
0
)
;
}
return
true
;
}
if
(
midSign
!
=
sign
)
{
months
-
=
sign
;
if
(
months
=
=
-
sign
)
{
years
-
=
sign
;
months
=
11
*
sign
;
}
if
(
!
AddISODate
(
cx
start
{
double
(
years
)
double
(
months
)
0
}
TemporalOverflow
:
:
Constrain
&
mid
)
)
{
return
false
;
}
}
int32_t
days
;
if
(
mid
.
month
=
=
end
.
month
)
{
MOZ_ASSERT
(
mid
.
year
=
=
end
.
year
)
;
days
=
end
.
day
-
mid
.
day
;
}
else
if
(
sign
<
0
)
{
days
=
-
mid
.
day
-
(
ISODaysInMonth
(
end
.
year
end
.
month
)
-
end
.
day
)
;
}
else
{
days
=
end
.
day
+
(
ISODaysInMonth
(
mid
.
year
mid
.
month
)
-
mid
.
day
)
;
}
if
(
largestUnit
=
=
TemporalUnit
:
:
Month
)
{
months
+
=
years
*
12
;
years
=
0
;
}
*
result
=
CreateDateDurationRecord
(
years
months
0
days
)
;
return
true
;
}
MOZ_ASSERT
(
largestUnit
=
=
TemporalUnit
:
:
Week
|
|
largestUnit
=
=
TemporalUnit
:
:
Day
)
;
int32_t
epochDaysStart
=
MakeDay
(
start
)
;
int32_t
epochDaysEnd
=
MakeDay
(
end
)
;
int32_t
days
=
epochDaysEnd
-
epochDaysStart
;
int32_t
weeks
=
0
;
if
(
largestUnit
=
=
TemporalUnit
:
:
Week
)
{
weeks
=
days
/
7
;
days
=
days
%
7
;
}
*
result
=
CreateDateDurationRecord
(
0
0
weeks
days
)
;
return
true
;
}
static
bool
DifferenceTemporalPlainDate
(
JSContext
*
cx
TemporalDifference
operation
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
auto
wrappedOther
=
:
:
ToTemporalDate
(
cx
args
.
get
(
0
)
)
;
if
(
!
wrappedOther
)
{
return
false
;
}
Rooted
<
Wrapped
<
PlainDateObject
*
>
>
other
(
cx
wrappedOther
)
;
Rooted
<
CalendarValue
>
otherCalendar
(
cx
wrappedOther
.
unwrap
(
)
.
calendar
(
)
)
;
if
(
!
otherCalendar
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
!
CalendarEqualsOrThrow
(
cx
calendar
otherCalendar
)
)
{
return
false
;
}
DifferenceSettings
settings
;
Duration
duration
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
ToName
(
operation
)
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
resolvedOptions
(
cx
NewPlainObjectWithProto
(
cx
nullptr
)
)
;
if
(
!
resolvedOptions
)
{
return
false
;
}
if
(
!
CopyDataProperties
(
cx
resolvedOptions
options
)
)
{
return
false
;
}
if
(
!
GetDifferenceSettings
(
cx
operation
resolvedOptions
TemporalUnitGroup
:
:
Date
TemporalUnit
:
:
Day
TemporalUnit
:
:
Day
&
settings
)
)
{
return
false
;
}
Rooted
<
Value
>
largestUnitValue
(
cx
StringValue
(
TemporalUnitToString
(
cx
settings
.
largestUnit
)
)
)
;
if
(
!
DefineDataProperty
(
cx
resolvedOptions
cx
-
>
names
(
)
.
largestUnit
largestUnitValue
)
)
{
return
false
;
}
Duration
result
;
if
(
!
CalendarDateUntil
(
cx
calendar
temporalDate
other
resolvedOptions
&
result
)
)
{
return
false
;
}
duration
=
result
.
date
(
)
;
}
else
{
settings
=
{
TemporalUnit
:
:
Day
TemporalUnit
:
:
Day
TemporalRoundingMode
:
:
Trunc
Increment
{
1
}
}
;
Duration
result
;
if
(
!
CalendarDateUntil
(
cx
calendar
temporalDate
other
settings
.
largestUnit
&
result
)
)
{
return
false
;
}
duration
=
result
.
date
(
)
;
}
if
(
settings
.
smallestUnit
!
=
TemporalUnit
:
:
Day
|
|
settings
.
roundingIncrement
!
=
Increment
{
1
}
)
{
if
(
!
temporal
:
:
RoundDuration
(
cx
duration
.
date
(
)
settings
.
roundingIncrement
settings
.
smallestUnit
settings
.
roundingMode
temporalDate
&
duration
)
)
{
return
false
;
}
}
if
(
operation
=
=
TemporalDifference
:
:
Since
)
{
duration
=
duration
.
negate
(
)
;
}
auto
*
obj
=
CreateTemporalDuration
(
cx
duration
.
date
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDateConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
PlainDate
"
)
)
{
return
false
;
}
double
isoYear
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
0
)
"
year
"
&
isoYear
)
)
{
return
false
;
}
double
isoMonth
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
1
)
"
month
"
&
isoMonth
)
)
{
return
false
;
}
double
isoDay
;
if
(
!
ToIntegerWithTruncation
(
cx
args
.
get
(
2
)
"
day
"
&
isoDay
)
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
ToTemporalCalendarWithISODefault
(
cx
args
.
get
(
3
)
&
calendar
)
)
{
return
false
;
}
auto
*
temporalDate
=
CreateTemporalDate
(
cx
args
isoYear
isoMonth
isoDay
calendar
)
;
if
(
!
temporalDate
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
temporalDate
)
;
return
true
;
}
static
bool
PlainDate_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
from
"
args
[
1
]
)
;
if
(
!
options
)
{
return
false
;
}
}
if
(
args
.
get
(
0
)
.
isObject
(
)
)
{
JSObject
*
item
=
&
args
[
0
]
.
toObject
(
)
;
if
(
auto
*
temporalDate
=
item
-
>
maybeUnwrapIf
<
PlainDateObject
>
(
)
)
{
auto
date
=
ToPlainDate
(
temporalDate
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
if
(
!
calendar
.
wrap
(
cx
)
)
{
return
false
;
}
if
(
options
)
{
TemporalOverflow
ignored
;
if
(
!
ToTemporalOverflow
(
cx
options
&
ignored
)
)
{
return
false
;
}
}
auto
*
result
=
CreateTemporalDate
(
cx
date
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
}
auto
result
=
ToTemporalDate
(
cx
args
.
get
(
0
)
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_compare
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
PlainDate
one
;
if
(
!
ToTemporalDate
(
cx
args
.
get
(
0
)
&
one
)
)
{
return
false
;
}
PlainDate
two
;
if
(
!
ToTemporalDate
(
cx
args
.
get
(
1
)
&
two
)
)
{
return
false
;
}
args
.
rval
(
)
.
setInt32
(
CompareISODate
(
one
two
)
)
;
return
true
;
}
static
bool
PlainDate_calendarId
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
auto
*
calendarId
=
ToTemporalCalendarIdentifier
(
cx
calendar
)
;
if
(
!
calendarId
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
calendarId
)
;
return
true
;
}
static
bool
PlainDate_calendarId
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_calendarId
>
(
cx
args
)
;
}
static
bool
PlainDate_year
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_year
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_year
>
(
cx
args
)
;
}
static
bool
PlainDate_month
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarMonth
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_month
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_month
>
(
cx
args
)
;
}
static
bool
PlainDate_monthCode
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarMonthCode
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_monthCode
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_monthCode
>
(
cx
args
)
;
}
static
bool
PlainDate_day
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDay
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_day
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_day
>
(
cx
args
)
;
}
static
bool
PlainDate_dayOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDayOfWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_dayOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_dayOfWeek
>
(
cx
args
)
;
}
static
bool
PlainDate_dayOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDayOfYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_dayOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_dayOfYear
>
(
cx
args
)
;
}
static
bool
PlainDate_weekOfYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarWeekOfYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_weekOfYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_weekOfYear
>
(
cx
args
)
;
}
static
bool
PlainDate_yearOfWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarYearOfWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_yearOfWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_yearOfWeek
>
(
cx
args
)
;
}
static
bool
PlainDate_daysInWeek
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDaysInWeek
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_daysInWeek
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_daysInWeek
>
(
cx
args
)
;
}
static
bool
PlainDate_daysInMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDaysInMonth
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_daysInMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_daysInMonth
>
(
cx
args
)
;
}
static
bool
PlainDate_daysInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarDaysInYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_daysInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_daysInYear
>
(
cx
args
)
;
}
static
bool
PlainDate_monthsInYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarMonthsInYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_monthsInYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_monthsInYear
>
(
cx
args
)
;
}
static
bool
PlainDate_inLeapYear
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
return
CalendarInLeapYear
(
cx
calendar
args
.
thisv
(
)
args
.
rval
(
)
)
;
}
static
bool
PlainDate_inLeapYear
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_inLeapYear
>
(
cx
args
)
;
}
static
bool
PlainDate_toPlainYearMonth
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
temporalDate
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
obj
=
CalendarYearMonthFromFields
(
cx
calendar
fields
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDate_toPlainYearMonth
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toPlainYearMonth
>
(
cx
args
)
;
}
static
bool
PlainDate_toPlainMonthDay
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
do
{
static
constexpr
std
:
:
initializer_list
<
CalendarField
>
fieldNames
=
{
CalendarField
:
:
Day
CalendarField
:
:
MonthCode
}
;
if
(
calendar
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
calendarObj
(
cx
calendar
.
toObject
(
)
)
;
if
(
!
calendarObj
-
>
is
<
CalendarObject
>
(
)
)
{
break
;
}
auto
builtinCalendar
=
calendarObj
.
as
<
CalendarObject
>
(
)
;
if
(
!
IsBuiltinAccess
(
cx
builtinCalendar
fieldNames
)
)
{
break
;
}
}
else
{
if
(
!
IsBuiltinAccessForStringCalendar
(
cx
)
)
{
break
;
}
}
if
(
!
IsBuiltinAccess
(
cx
temporalDate
fieldNames
)
)
{
break
;
}
auto
date
=
ToPlainDate
(
temporalDate
)
;
auto
result
=
PlainDate
{
1972
date
.
month
date
.
day
}
;
auto
*
obj
=
CreateTemporalMonthDay
(
cx
result
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
while
(
false
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
MonthCode
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
temporalDate
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
auto
obj
=
CalendarMonthDayFromFields
(
cx
calendar
fields
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDate_toPlainMonthDay
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toPlainMonthDay
>
(
cx
args
)
;
}
static
bool
PlainDate_toPlainDateTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
PlainDateTime
dateTime
=
{
ToPlainDate
(
temporalDate
)
{
}
}
;
if
(
args
.
hasDefined
(
0
)
)
{
if
(
!
ToTemporalTime
(
cx
args
[
0
]
&
dateTime
.
time
)
)
{
return
false
;
}
}
auto
*
obj
=
CreateTemporalDateTime
(
cx
dateTime
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDate_toPlainDateTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toPlainDateTime
>
(
cx
args
)
;
}
static
bool
PlainDate_getISOFields
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
auto
date
=
ToPlainDate
(
temporalDate
)
;
auto
calendar
=
temporalDate
-
>
calendar
(
)
;
Rooted
<
IdValueVector
>
fields
(
cx
IdValueVector
(
cx
)
)
;
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
calendar
)
calendar
.
toValue
(
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoDay
)
Int32Value
(
date
.
day
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoMonth
)
Int32Value
(
date
.
month
)
)
)
{
return
false
;
}
if
(
!
fields
.
emplaceBack
(
NameToId
(
cx
-
>
names
(
)
.
isoYear
)
Int32Value
(
date
.
year
)
)
)
{
return
false
;
}
auto
*
obj
=
NewPlainObjectWithUniqueNames
(
cx
fields
.
begin
(
)
fields
.
length
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDate_getISOFields
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_getISOFields
>
(
cx
args
)
;
}
static
bool
PlainDate_getCalendar
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
auto
*
obj
=
ToTemporalCalendarObject
(
cx
calendar
)
;
if
(
!
obj
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
obj
)
;
return
true
;
}
static
bool
PlainDate_getCalendar
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_getCalendar
>
(
cx
args
)
;
}
static
bool
PlainDate_add
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
Rooted
<
Wrapped
<
DurationObject
*
>
>
duration
(
cx
ToTemporalDuration
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
duration
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
add
"
args
[
1
]
)
;
}
else
{
options
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
options
)
{
return
false
;
}
auto
result
=
CalendarDateAdd
(
cx
calendar
temporalDate
duration
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_add
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_add
>
(
cx
args
)
;
}
static
bool
PlainDate_subtract
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
Duration
duration
;
if
(
!
ToTemporalDuration
(
cx
args
.
get
(
0
)
&
duration
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
subtract
"
args
[
1
]
)
;
}
else
{
options
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
options
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
negatedDuration
(
cx
CreateTemporalDuration
(
cx
duration
.
negate
(
)
)
)
;
if
(
!
negatedDuration
)
{
return
false
;
}
auto
result
=
CalendarDateAdd
(
cx
calendar
temporalDate
negatedDuration
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_subtract
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_subtract
>
(
cx
args
)
;
}
static
bool
PlainDate_with
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
Rooted
<
JSObject
*
>
temporalDateLike
(
cx
RequireObjectArg
(
cx
"
temporalDateLike
"
"
with
"
args
.
get
(
0
)
)
)
;
if
(
!
temporalDateLike
)
{
return
false
;
}
if
(
!
RejectTemporalLikeObject
(
cx
temporalDateLike
)
)
{
return
false
;
}
Rooted
<
JSObject
*
>
options
(
cx
)
;
if
(
args
.
hasDefined
(
1
)
)
{
options
=
RequireObjectArg
(
cx
"
options
"
"
with
"
args
[
1
]
)
;
}
else
{
options
=
NewPlainObjectWithProto
(
cx
nullptr
)
;
}
if
(
!
options
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
JS
:
:
RootedVector
<
PropertyKey
>
fieldNames
(
cx
)
;
if
(
!
CalendarFields
(
cx
calendar
{
CalendarField
:
:
Day
CalendarField
:
:
Month
CalendarField
:
:
MonthCode
CalendarField
:
:
Year
}
&
fieldNames
)
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
fields
(
cx
PrepareTemporalFields
(
cx
temporalDate
fieldNames
)
)
;
if
(
!
fields
)
{
return
false
;
}
Rooted
<
PlainObject
*
>
partialDate
(
cx
PreparePartialTemporalFields
(
cx
temporalDateLike
fieldNames
)
)
;
if
(
!
partialDate
)
{
return
false
;
}
Rooted
<
JSObject
*
>
mergedFields
(
cx
CalendarMergeFields
(
cx
calendar
fields
partialDate
)
)
;
if
(
!
mergedFields
)
{
return
false
;
}
fields
=
PrepareTemporalFields
(
cx
mergedFields
fieldNames
)
;
if
(
!
fields
)
{
return
false
;
}
auto
result
=
:
:
CalendarDateFromFields
(
cx
calendar
fields
options
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_with
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_with
>
(
cx
args
)
;
}
static
bool
PlainDate_withCalendar
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
auto
date
=
ToPlainDate
(
temporalDate
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
ToTemporalCalendar
(
cx
args
.
get
(
0
)
&
calendar
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalDate
(
cx
date
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_withCalendar
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_withCalendar
>
(
cx
args
)
;
}
static
bool
PlainDate_until
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalPlainDate
(
cx
TemporalDifference
:
:
Until
args
)
;
}
static
bool
PlainDate_until
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_until
>
(
cx
args
)
;
}
static
bool
PlainDate_since
(
JSContext
*
cx
const
CallArgs
&
args
)
{
return
DifferenceTemporalPlainDate
(
cx
TemporalDifference
:
:
Since
args
)
;
}
static
bool
PlainDate_since
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_since
>
(
cx
args
)
;
}
static
bool
PlainDate_equals
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
auto
date
=
ToPlainDate
(
temporalDate
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
PlainDate
other
;
Rooted
<
CalendarValue
>
otherCalendar
(
cx
)
;
if
(
!
ToTemporalDate
(
cx
args
.
get
(
0
)
&
other
&
otherCalendar
)
)
{
return
false
;
}
bool
equals
=
false
;
if
(
date
.
year
=
=
other
.
year
&
&
date
.
month
=
=
other
.
month
&
&
date
.
day
=
=
other
.
day
)
{
if
(
!
CalendarEquals
(
cx
calendar
otherCalendar
&
equals
)
)
{
return
false
;
}
}
args
.
rval
(
)
.
setBoolean
(
equals
)
;
return
true
;
}
static
bool
PlainDate_equals
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_equals
>
(
cx
args
)
;
}
static
bool
PlainDate_toZonedDateTime
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
temporalDate
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
;
auto
date
=
ToPlainDate
(
temporalDate
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
temporalDate
-
>
calendar
(
)
)
;
Rooted
<
TimeZoneValue
>
timeZone
(
cx
)
;
Rooted
<
Value
>
temporalTime
(
cx
)
;
if
(
args
.
get
(
0
)
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
item
(
cx
&
args
[
0
]
.
toObject
(
)
)
;
if
(
item
-
>
canUnwrapAs
<
TimeZoneObject
>
(
)
)
{
timeZone
.
set
(
TimeZoneValue
(
item
)
)
;
temporalTime
.
setUndefined
(
)
;
}
else
{
Rooted
<
Value
>
timeZoneLike
(
cx
)
;
if
(
!
GetProperty
(
cx
item
item
cx
-
>
names
(
)
.
timeZone
&
timeZoneLike
)
)
{
return
false
;
}
if
(
timeZoneLike
.
isUndefined
(
)
)
{
if
(
!
ToTemporalTimeZone
(
cx
args
[
0
]
&
timeZone
)
)
{
return
false
;
}
temporalTime
.
setUndefined
(
)
;
}
else
{
if
(
!
ToTemporalTimeZone
(
cx
timeZoneLike
&
timeZone
)
)
{
return
false
;
}
if
(
!
GetProperty
(
cx
item
item
cx
-
>
names
(
)
.
plainTime
&
temporalTime
)
)
{
return
false
;
}
}
}
}
else
{
if
(
!
ToTemporalTimeZone
(
cx
args
.
get
(
0
)
&
timeZone
)
)
{
return
false
;
}
temporalTime
.
setUndefined
(
)
;
}
Rooted
<
PlainDateTimeObject
*
>
temporalDateTime
(
cx
)
;
if
(
temporalTime
.
isUndefined
(
)
)
{
temporalDateTime
=
CreateTemporalDateTime
(
cx
{
date
{
}
}
calendar
)
;
if
(
!
temporalDateTime
)
{
return
false
;
}
}
else
{
PlainTime
time
;
if
(
!
ToTemporalTime
(
cx
temporalTime
&
time
)
)
{
return
false
;
}
temporalDateTime
=
CreateTemporalDateTime
(
cx
{
date
time
}
calendar
)
;
if
(
!
temporalDateTime
)
{
return
false
;
}
}
Instant
instant
;
if
(
!
GetInstantFor
(
cx
timeZone
temporalDateTime
TemporalDisambiguation
:
:
Compatible
&
instant
)
)
{
return
false
;
}
auto
*
result
=
CreateTemporalZonedDateTime
(
cx
instant
timeZone
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
PlainDate_toZonedDateTime
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toZonedDateTime
>
(
cx
args
)
;
}
static
bool
PlainDate_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
auto
showCalendar
=
CalendarOption
:
:
Auto
;
if
(
args
.
hasDefined
(
0
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
toString
"
args
[
0
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
ToCalendarNameOption
(
cx
options
&
showCalendar
)
)
{
return
false
;
}
}
JSString
*
str
=
TemporalDateToString
(
cx
temporalDate
showCalendar
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainDate_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toString
>
(
cx
args
)
;
}
static
bool
PlainDate_toLocaleString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
JSString
*
str
=
TemporalDateToString
(
cx
temporalDate
CalendarOption
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainDate_toLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toLocaleString
>
(
cx
args
)
;
}
static
bool
PlainDate_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
PlainDateObject
*
>
temporalDate
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
PlainDateObject
>
(
)
)
;
JSString
*
str
=
TemporalDateToString
(
cx
temporalDate
CalendarOption
:
:
Auto
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
PlainDate_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsPlainDate
PlainDate_toJSON
>
(
cx
args
)
;
}
static
bool
PlainDate_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_CANT_CONVERT_TO
"
PlainDate
"
"
primitive
type
"
)
;
return
false
;
}
const
JSClass
PlainDateObject
:
:
class_
=
{
"
Temporal
.
PlainDate
"
JSCLASS_HAS_RESERVED_SLOTS
(
PlainDateObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_PlainDate
)
JS_NULL_CLASS_OPS
&
PlainDateObject
:
:
classSpec_
}
;
const
JSClass
&
PlainDateObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
PlainDate_methods
[
]
=
{
JS_FN
(
"
from
"
PlainDate_from
1
0
)
JS_FN
(
"
compare
"
PlainDate_compare
2
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
PlainDate_prototype_methods
[
]
=
{
JS_FN
(
"
toPlainMonthDay
"
PlainDate_toPlainMonthDay
0
0
)
JS_FN
(
"
toPlainYearMonth
"
PlainDate_toPlainYearMonth
0
0
)
JS_FN
(
"
toPlainDateTime
"
PlainDate_toPlainDateTime
0
0
)
JS_FN
(
"
getISOFields
"
PlainDate_getISOFields
0
0
)
JS_FN
(
"
getCalendar
"
PlainDate_getCalendar
0
0
)
JS_FN
(
"
add
"
PlainDate_add
1
0
)
JS_FN
(
"
subtract
"
PlainDate_subtract
1
0
)
JS_FN
(
"
with
"
PlainDate_with
1
0
)
JS_FN
(
"
withCalendar
"
PlainDate_withCalendar
1
0
)
JS_FN
(
"
until
"
PlainDate_until
1
0
)
JS_FN
(
"
since
"
PlainDate_since
1
0
)
JS_FN
(
"
equals
"
PlainDate_equals
1
0
)
JS_FN
(
"
toZonedDateTime
"
PlainDate_toZonedDateTime
1
0
)
JS_FN
(
"
toString
"
PlainDate_toString
0
0
)
JS_FN
(
"
toLocaleString
"
PlainDate_toLocaleString
0
0
)
JS_FN
(
"
toJSON
"
PlainDate_toJSON
0
0
)
JS_FN
(
"
valueOf
"
PlainDate_valueOf
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
PlainDate_prototype_properties
[
]
=
{
JS_PSG
(
"
calendarId
"
PlainDate_calendarId
0
)
JS_PSG
(
"
year
"
PlainDate_year
0
)
JS_PSG
(
"
month
"
PlainDate_month
0
)
JS_PSG
(
"
monthCode
"
PlainDate_monthCode
0
)
JS_PSG
(
"
day
"
PlainDate_day
0
)
JS_PSG
(
"
dayOfWeek
"
PlainDate_dayOfWeek
0
)
JS_PSG
(
"
dayOfYear
"
PlainDate_dayOfYear
0
)
JS_PSG
(
"
weekOfYear
"
PlainDate_weekOfYear
0
)
JS_PSG
(
"
yearOfWeek
"
PlainDate_yearOfWeek
0
)
JS_PSG
(
"
daysInWeek
"
PlainDate_daysInWeek
0
)
JS_PSG
(
"
daysInMonth
"
PlainDate_daysInMonth
0
)
JS_PSG
(
"
daysInYear
"
PlainDate_daysInYear
0
)
JS_PSG
(
"
monthsInYear
"
PlainDate_monthsInYear
0
)
JS_PSG
(
"
inLeapYear
"
PlainDate_inLeapYear
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
PlainDate
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
PlainDateObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
PlainDateConstructor
3
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
PlainDateObject
>
PlainDate_methods
nullptr
PlainDate_prototype_methods
PlainDate_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
struct
PlainDateNameAndNative
final
{
PropertyName
*
name
;
JSNative
native
;
}
;
static
PlainDateNameAndNative
GetPlainDateNameAndNative
(
JSContext
*
cx
CalendarField
fieldName
)
{
switch
(
fieldName
)
{
case
CalendarField
:
:
Year
:
return
{
cx
-
>
names
(
)
.
year
PlainDate_year
}
;
case
CalendarField
:
:
Month
:
return
{
cx
-
>
names
(
)
.
month
PlainDate_month
}
;
case
CalendarField
:
:
MonthCode
:
return
{
cx
-
>
names
(
)
.
monthCode
PlainDate_monthCode
}
;
case
CalendarField
:
:
Day
:
return
{
cx
-
>
names
(
)
.
day
PlainDate_day
}
;
case
CalendarField
:
:
Hour
:
case
CalendarField
:
:
Minute
:
case
CalendarField
:
:
Second
:
case
CalendarField
:
:
Millisecond
:
case
CalendarField
:
:
Microsecond
:
case
CalendarField
:
:
Nanosecond
:
break
;
}
MOZ_CRASH
(
"
invalid
temporal
field
name
"
)
;
}
bool
js
:
:
temporal
:
:
IsBuiltinAccess
(
JSContext
*
cx
JS
:
:
Handle
<
PlainDateObject
*
>
date
std
:
:
initializer_list
<
CalendarField
>
fieldNames
)
{
if
(
date
-
>
shape
(
)
-
>
propMapLength
(
)
>
0
)
{
return
false
;
}
JSObject
*
proto
=
cx
-
>
global
(
)
-
>
maybeGetPrototype
(
JSProto_PlainDate
)
;
if
(
!
proto
)
{
return
false
;
}
if
(
date
-
>
staticPrototype
(
)
!
=
proto
)
{
return
false
;
}
auto
*
nproto
=
&
proto
-
>
as
<
NativeObject
>
(
)
;
for
(
auto
fieldName
:
fieldNames
)
{
auto
[
name
native
]
=
GetPlainDateNameAndNative
(
cx
fieldName
)
;
auto
prop
=
nproto
-
>
lookupPure
(
name
)
;
if
(
!
prop
|
|
!
prop
-
>
isDataProperty
(
)
)
{
return
false
;
}
if
(
!
IsNativeFunction
(
nproto
-
>
getSlot
(
prop
-
>
slot
(
)
)
native
)
)
{
return
false
;
}
}
return
true
;
}
