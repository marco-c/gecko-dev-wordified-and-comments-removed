#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
intl
/
ICU4XGeckoDataProvider
.
h
"
#
include
"
mozilla
/
intl
/
Locale
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
TextUtils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
algorithm
>
#
include
<
array
>
#
include
<
cmath
>
#
include
<
cstring
>
#
include
<
iterator
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
diplomat_runtime
.
h
"
#
include
"
ICU4XAnyCalendarKind
.
h
"
#
include
"
ICU4XCalendar
.
h
"
#
include
"
ICU4XDate
.
h
"
#
include
"
ICU4XIsoDate
.
h
"
#
include
"
ICU4XIsoWeekday
.
h
"
#
include
"
ICU4XWeekCalculator
.
h
"
#
include
"
ICU4XWeekOf
.
h
"
#
include
"
ICU4XWeekRelativeUnit
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
temporal
/
CalendarFields
.
h
"
#
include
"
builtin
/
temporal
/
Crash
.
h
"
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
builtin
/
temporal
/
Era
.
h
"
#
include
"
builtin
/
temporal
/
MonthCode
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainMonthDay
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainYearMonth
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
Text
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PropertyInfo
.
h
"
#
include
"
vm
/
PropertyKey
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
vm
/
Stack
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
Compartment
-
inl
.
h
"
#
include
"
vm
/
JSAtomUtils
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
void
js
:
:
temporal
:
:
CalendarValue
:
:
trace
(
JSTracer
*
trc
)
{
TraceRoot
(
trc
&
value_
"
CalendarValue
:
:
value
"
)
;
}
bool
js
:
:
temporal
:
:
WrapCalendarValue
(
JSContext
*
cx
MutableHandle
<
JS
:
:
Value
>
calendar
)
{
MOZ_ASSERT
(
calendar
.
isInt32
(
)
)
;
return
cx
-
>
compartment
(
)
-
>
wrap
(
cx
calendar
)
;
}
static
constexpr
bool
IsISOLeapYear
(
int32_t
year
)
{
return
(
year
%
4
=
=
0
)
&
&
(
(
year
%
100
!
=
0
)
|
|
(
year
%
400
=
=
0
)
)
;
}
static
int32_t
ISODaysInYear
(
int32_t
year
)
{
return
IsISOLeapYear
(
year
)
?
366
:
365
;
}
static
constexpr
int32_t
ISODaysInMonth
(
int32_t
year
int32_t
month
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
constexpr
uint8_t
daysInMonth
[
2
]
[
13
]
=
{
{
0
31
28
31
30
31
30
31
31
30
31
30
31
}
{
0
31
29
31
30
31
30
31
31
30
31
30
31
}
}
;
return
daysInMonth
[
IsISOLeapYear
(
year
)
]
[
month
]
;
}
int32_t
js
:
:
temporal
:
:
ISODaysInMonth
(
int32_t
year
int32_t
month
)
{
return
:
:
ISODaysInMonth
(
year
month
)
;
}
static
int32_t
WeekDay
(
int32_t
day
)
{
int32_t
result
=
(
day
+
4
)
%
7
;
if
(
result
<
0
)
{
result
+
=
7
;
}
return
result
;
}
static
int32_t
ToISODayOfWeek
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateWithinLimits
(
date
)
)
;
int32_t
day
=
MakeDay
(
date
)
;
int32_t
weekday
=
WeekDay
(
day
)
;
return
weekday
!
=
0
?
weekday
:
7
;
}
static
constexpr
auto
FirstDayOfMonth
(
int32_t
year
)
{
std
:
:
array
<
int32_t
13
>
days
=
{
}
;
for
(
int32_t
month
=
1
;
month
<
=
12
;
+
+
month
)
{
days
[
month
]
=
days
[
month
-
1
]
+
:
:
ISODaysInMonth
(
year
month
)
;
}
return
days
;
}
static
int32_t
ToISODayOfYear
(
int32_t
year
int32_t
month
int32_t
day
)
{
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
12
)
;
constexpr
decltype
(
FirstDayOfMonth
(
0
)
)
firstDayOfMonth
[
2
]
=
{
FirstDayOfMonth
(
1
)
FirstDayOfMonth
(
0
)
}
;
return
firstDayOfMonth
[
IsISOLeapYear
(
year
)
]
[
month
-
1
]
+
day
;
}
static
int32_t
ToISODayOfYear
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateWithinLimits
(
date
)
)
;
const
auto
&
[
year
month
day
]
=
date
;
return
:
:
ToISODayOfYear
(
year
month
day
)
;
}
static
int32_t
FloorDiv
(
int32_t
dividend
int32_t
divisor
)
{
MOZ_ASSERT
(
divisor
>
0
)
;
int32_t
quotient
=
dividend
/
divisor
;
int32_t
remainder
=
dividend
%
divisor
;
if
(
remainder
<
0
)
{
quotient
-
=
1
;
}
return
quotient
;
}
static
int32_t
DayFromYear
(
int32_t
year
)
{
return
365
*
(
year
-
1970
)
+
FloorDiv
(
year
-
1969
4
)
-
FloorDiv
(
year
-
1901
100
)
+
FloorDiv
(
year
-
1601
400
)
;
}
static
int64_t
MakeTime
(
const
PlainTime
&
time
)
{
MOZ_ASSERT
(
IsValidTime
(
time
)
)
;
int64_t
h
=
time
.
hour
;
int64_t
m
=
time
.
minute
;
int64_t
s
=
time
.
second
;
int64_t
milli
=
time
.
millisecond
;
return
h
*
ToMilliseconds
(
TemporalUnit
:
:
Hour
)
+
m
*
ToMilliseconds
(
TemporalUnit
:
:
Minute
)
+
s
*
ToMilliseconds
(
TemporalUnit
:
:
Second
)
+
milli
;
}
int32_t
js
:
:
temporal
:
:
MakeDay
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateWithinLimits
(
date
)
)
;
return
DayFromYear
(
date
.
year
)
+
ToISODayOfYear
(
date
)
-
1
;
}
int64_t
js
:
:
temporal
:
:
MakeDate
(
const
PlainDateTime
&
dateTime
)
{
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
int64_t
tv
=
MakeDay
(
dateTime
.
date
)
*
ToMilliseconds
(
TemporalUnit
:
:
Day
)
+
MakeTime
(
dateTime
.
time
)
;
return
tv
;
}
struct
YearWeek
final
{
int32_t
year
=
0
;
int32_t
week
=
0
;
}
;
static
YearWeek
ToISOWeekOfYear
(
const
PlainDate
&
date
)
{
MOZ_ASSERT
(
ISODateWithinLimits
(
date
)
)
;
const
auto
&
[
year
month
day
]
=
date
;
int32_t
doy
=
ToISODayOfYear
(
date
)
;
int32_t
dow
=
ToISODayOfWeek
(
date
)
;
int32_t
woy
=
(
10
+
doy
-
dow
)
/
7
;
MOZ_ASSERT
(
0
<
=
woy
&
&
woy
<
=
53
)
;
auto
isLongYear
=
[
]
(
int32_t
year
)
{
int32_t
startOfYear
=
ToISODayOfWeek
(
{
year
1
1
}
)
;
return
startOfYear
=
=
4
|
|
(
startOfYear
=
=
3
&
&
IsISOLeapYear
(
year
)
)
;
}
;
if
(
woy
=
=
0
)
{
return
{
year
-
1
52
+
int32_t
(
isLongYear
(
year
-
1
)
)
}
;
}
if
(
woy
=
=
53
&
&
!
isLongYear
(
year
)
)
{
return
{
year
+
1
1
}
;
}
return
{
year
woy
}
;
}
static
std
:
:
string_view
CalendarIdToBcp47
(
CalendarId
id
)
{
switch
(
id
)
{
case
CalendarId
:
:
ISO8601
:
return
"
iso8601
"
;
case
CalendarId
:
:
Buddhist
:
return
"
buddhist
"
;
case
CalendarId
:
:
Chinese
:
return
"
chinese
"
;
case
CalendarId
:
:
Coptic
:
return
"
coptic
"
;
case
CalendarId
:
:
Dangi
:
return
"
dangi
"
;
case
CalendarId
:
:
Ethiopian
:
return
"
ethiopic
"
;
case
CalendarId
:
:
EthiopianAmeteAlem
:
return
"
ethioaa
"
;
case
CalendarId
:
:
Gregorian
:
return
"
gregory
"
;
case
CalendarId
:
:
Hebrew
:
return
"
hebrew
"
;
case
CalendarId
:
:
Indian
:
return
"
indian
"
;
case
CalendarId
:
:
Islamic
:
return
"
islamic
"
;
case
CalendarId
:
:
IslamicCivil
:
return
"
islamic
-
civil
"
;
case
CalendarId
:
:
IslamicRGSA
:
return
"
islamic
-
rgsa
"
;
case
CalendarId
:
:
IslamicTabular
:
return
"
islamic
-
tbla
"
;
case
CalendarId
:
:
IslamicUmmAlQura
:
return
"
islamic
-
umalqura
"
;
case
CalendarId
:
:
Japanese
:
return
"
japanese
"
;
case
CalendarId
:
:
Persian
:
return
"
persian
"
;
case
CalendarId
:
:
ROC
:
return
"
roc
"
;
}
MOZ_CRASH
(
"
invalid
calendar
id
"
)
;
}
class
MOZ_STACK_CLASS
AsciiLowerCaseChars
final
{
static
constexpr
size_t
InlineCapacity
=
24
;
Vector
<
char
InlineCapacity
>
chars_
;
public
:
explicit
AsciiLowerCaseChars
(
JSContext
*
cx
)
:
chars_
(
cx
)
{
}
operator
mozilla
:
:
Span
<
const
char
>
(
)
const
{
return
mozilla
:
:
Span
<
const
char
>
{
chars_
}
;
}
[
[
nodiscard
]
]
bool
init
(
JSLinearString
*
str
)
{
MOZ_ASSERT
(
StringIsAscii
(
str
)
)
;
if
(
!
chars_
.
resize
(
str
-
>
length
(
)
)
)
{
return
false
;
}
CopyChars
(
reinterpret_cast
<
JS
:
:
Latin1Char
*
>
(
chars_
.
begin
(
)
)
*
str
)
;
mozilla
:
:
intl
:
:
AsciiToLowerCase
(
chars_
.
begin
(
)
chars_
.
length
(
)
chars_
.
begin
(
)
)
;
return
true
;
}
}
;
bool
js
:
:
temporal
:
:
CanonicalizeCalendar
(
JSContext
*
cx
Handle
<
JSString
*
>
id
MutableHandle
<
CalendarValue
>
result
)
{
Rooted
<
JSLinearString
*
>
linear
(
cx
id
-
>
ensureLinear
(
cx
)
)
;
if
(
!
linear
)
{
return
false
;
}
do
{
if
(
!
StringIsAscii
(
linear
)
|
|
linear
-
>
empty
(
)
)
{
break
;
}
AsciiLowerCaseChars
lowerCaseChars
(
cx
)
;
if
(
!
lowerCaseChars
.
init
(
linear
)
)
{
return
false
;
}
mozilla
:
:
Span
<
const
char
>
id
=
lowerCaseChars
;
if
(
mozilla
:
:
intl
:
:
LocaleParser
:
:
CanParseUnicodeExtensionType
(
id
)
.
isErr
(
)
)
{
break
;
}
static
constexpr
auto
key
=
mozilla
:
:
MakeStringSpan
(
"
ca
"
)
;
if
(
const
char
*
replacement
=
mozilla
:
:
intl
:
:
Locale
:
:
ReplaceUnicodeExtensionType
(
key
id
)
)
{
id
=
mozilla
:
:
MakeStringSpan
(
replacement
)
;
}
static
constexpr
auto
&
calendars
=
AvailableCalendars
(
)
;
for
(
auto
identifier
:
calendars
)
{
if
(
id
=
=
mozilla
:
:
Span
{
CalendarIdToBcp47
(
identifier
)
}
)
{
result
.
set
(
CalendarValue
(
identifier
)
)
;
return
true
;
}
}
}
while
(
false
)
;
if
(
auto
chars
=
QuoteString
(
cx
linear
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_ID
chars
.
get
(
)
)
;
}
return
false
;
}
template
<
typename
T
typename
.
.
.
Ts
>
static
bool
ToTemporalCalendar
(
JSContext
*
cx
Handle
<
JSObject
*
>
object
MutableHandle
<
CalendarValue
>
result
)
{
if
(
auto
*
unwrapped
=
object
-
>
maybeUnwrapIf
<
T
>
(
)
)
{
result
.
set
(
unwrapped
-
>
calendar
(
)
)
;
return
result
.
wrap
(
cx
)
;
}
if
constexpr
(
sizeof
.
.
.
(
Ts
)
>
0
)
{
return
ToTemporalCalendar
<
Ts
.
.
.
>
(
cx
object
result
)
;
}
result
.
set
(
CalendarValue
(
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
ToTemporalCalendar
(
JSContext
*
cx
Handle
<
Value
>
temporalCalendarLike
MutableHandle
<
CalendarValue
>
result
)
{
if
(
temporalCalendarLike
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
obj
(
cx
&
temporalCalendarLike
.
toObject
(
)
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
:
:
ToTemporalCalendar
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
PlainYearMonthObject
ZonedDateTimeObject
>
(
cx
obj
&
calendar
)
)
{
return
false
;
}
if
(
calendar
)
{
result
.
set
(
calendar
)
;
return
true
;
}
}
if
(
!
temporalCalendarLike
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
temporalCalendarLike
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
str
(
cx
temporalCalendarLike
.
toString
(
)
)
;
Rooted
<
JSLinearString
*
>
id
(
cx
ParseTemporalCalendarString
(
cx
str
)
)
;
if
(
!
id
)
{
return
false
;
}
return
CanonicalizeCalendar
(
cx
id
result
)
;
}
bool
js
:
:
temporal
:
:
GetTemporalCalendarWithISODefault
(
JSContext
*
cx
Handle
<
JSObject
*
>
item
MutableHandle
<
CalendarValue
>
result
)
{
Rooted
<
CalendarValue
>
calendar
(
cx
)
;
if
(
!
:
:
ToTemporalCalendar
<
PlainDateObject
PlainDateTimeObject
PlainMonthDayObject
PlainYearMonthObject
ZonedDateTimeObject
>
(
cx
item
&
calendar
)
)
{
return
false
;
}
if
(
calendar
)
{
result
.
set
(
calendar
)
;
return
true
;
}
Rooted
<
Value
>
calendarValue
(
cx
)
;
if
(
!
GetProperty
(
cx
item
item
cx
-
>
names
(
)
.
calendar
&
calendarValue
)
)
{
return
false
;
}
if
(
calendarValue
.
isUndefined
(
)
)
{
result
.
set
(
CalendarValue
(
CalendarId
:
:
ISO8601
)
)
;
return
true
;
}
return
ToTemporalCalendar
(
cx
calendarValue
result
)
;
}
std
:
:
string_view
js
:
:
temporal
:
:
ToTemporalCalendarIdentifier
(
const
CalendarValue
&
calendar
)
{
return
CalendarIdToBcp47
(
calendar
.
identifier
(
)
)
;
}
JSLinearString
*
js
:
:
temporal
:
:
ToTemporalCalendarIdentifier
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
)
{
return
NewStringCopy
<
CanGC
>
(
cx
ToTemporalCalendarIdentifier
(
calendar
)
)
;
}
static
auto
ToAnyCalendarKind
(
CalendarId
id
)
{
switch
(
id
)
{
case
CalendarId
:
:
ISO8601
:
return
capi
:
:
ICU4XAnyCalendarKind_Iso
;
case
CalendarId
:
:
Buddhist
:
return
capi
:
:
ICU4XAnyCalendarKind_Buddhist
;
case
CalendarId
:
:
Chinese
:
return
capi
:
:
ICU4XAnyCalendarKind_Chinese
;
case
CalendarId
:
:
Coptic
:
return
capi
:
:
ICU4XAnyCalendarKind_Coptic
;
case
CalendarId
:
:
Dangi
:
return
capi
:
:
ICU4XAnyCalendarKind_Dangi
;
case
CalendarId
:
:
Ethiopian
:
return
capi
:
:
ICU4XAnyCalendarKind_Ethiopian
;
case
CalendarId
:
:
EthiopianAmeteAlem
:
return
capi
:
:
ICU4XAnyCalendarKind_EthiopianAmeteAlem
;
case
CalendarId
:
:
Gregorian
:
return
capi
:
:
ICU4XAnyCalendarKind_Gregorian
;
case
CalendarId
:
:
Hebrew
:
return
capi
:
:
ICU4XAnyCalendarKind_Hebrew
;
case
CalendarId
:
:
Indian
:
return
capi
:
:
ICU4XAnyCalendarKind_Indian
;
case
CalendarId
:
:
IslamicCivil
:
return
capi
:
:
ICU4XAnyCalendarKind_IslamicCivil
;
case
CalendarId
:
:
Islamic
:
return
capi
:
:
ICU4XAnyCalendarKind_IslamicObservational
;
case
CalendarId
:
:
IslamicRGSA
:
return
capi
:
:
ICU4XAnyCalendarKind_IslamicObservational
;
case
CalendarId
:
:
IslamicTabular
:
return
capi
:
:
ICU4XAnyCalendarKind_IslamicTabular
;
case
CalendarId
:
:
IslamicUmmAlQura
:
return
capi
:
:
ICU4XAnyCalendarKind_IslamicUmmAlQura
;
case
CalendarId
:
:
Japanese
:
return
capi
:
:
ICU4XAnyCalendarKind_Japanese
;
case
CalendarId
:
:
Persian
:
return
capi
:
:
ICU4XAnyCalendarKind_Persian
;
case
CalendarId
:
:
ROC
:
return
capi
:
:
ICU4XAnyCalendarKind_Roc
;
}
MOZ_CRASH
(
"
invalid
calendar
id
"
)
;
}
class
ICU4XCalendarDeleter
{
public
:
void
operator
(
)
(
capi
:
:
ICU4XCalendar
*
ptr
)
{
capi
:
:
ICU4XCalendar_destroy
(
ptr
)
;
}
}
;
using
UniqueICU4XCalendar
=
mozilla
:
:
UniquePtr
<
capi
:
:
ICU4XCalendar
ICU4XCalendarDeleter
>
;
static
UniqueICU4XCalendar
CreateICU4XCalendar
(
JSContext
*
cx
CalendarId
id
)
{
auto
result
=
capi
:
:
ICU4XCalendar_create_for_kind
(
mozilla
:
:
intl
:
:
GetDataProvider
(
)
ToAnyCalendarKind
(
id
)
)
;
if
(
!
result
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
nullptr
;
}
return
UniqueICU4XCalendar
{
result
.
ok
}
;
}
class
ICU4XDateDeleter
{
public
:
void
operator
(
)
(
capi
:
:
ICU4XDate
*
ptr
)
{
capi
:
:
ICU4XDate_destroy
(
ptr
)
;
}
}
;
using
UniqueICU4XDate
=
mozilla
:
:
UniquePtr
<
capi
:
:
ICU4XDate
ICU4XDateDeleter
>
;
static
UniqueICU4XDate
CreateICU4XDate
(
JSContext
*
cx
const
PlainDate
&
date
const
capi
:
:
ICU4XCalendar
*
calendar
)
{
auto
result
=
capi
:
:
ICU4XDate_create_from_iso_in_calendar
(
date
.
year
date
.
month
date
.
day
calendar
)
;
if
(
!
result
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
nullptr
;
}
return
UniqueICU4XDate
{
result
.
ok
}
;
}
class
ICU4XIsoDateDeleter
{
public
:
void
operator
(
)
(
capi
:
:
ICU4XIsoDate
*
ptr
)
{
capi
:
:
ICU4XIsoDate_destroy
(
ptr
)
;
}
}
;
using
UniqueICU4XIsoDate
=
mozilla
:
:
UniquePtr
<
capi
:
:
ICU4XIsoDate
ICU4XIsoDateDeleter
>
;
class
ICU4XWeekCalculatorDeleter
{
public
:
void
operator
(
)
(
capi
:
:
ICU4XWeekCalculator
*
ptr
)
{
capi
:
:
ICU4XWeekCalculator_destroy
(
ptr
)
;
}
}
;
using
UniqueICU4XWeekCalculator
=
mozilla
:
:
UniquePtr
<
capi
:
:
ICU4XWeekCalculator
ICU4XWeekCalculatorDeleter
>
;
static
UniqueICU4XWeekCalculator
CreateICU4WeekCalculator
(
JSContext
*
cx
CalendarId
calendar
)
{
MOZ_ASSERT
(
calendar
=
=
CalendarId
:
:
Gregorian
)
;
auto
firstWeekday
=
capi
:
:
ICU4XIsoWeekday_Monday
;
uint8_t
minWeekDays
=
1
;
auto
*
result
=
capi
:
:
ICU4XWeekCalculator_create_from_first_day_of_week_and_min_week_days
(
firstWeekday
minWeekDays
)
;
return
UniqueICU4XWeekCalculator
{
result
}
;
}
static
constexpr
size_t
EraNameMaxLength
(
)
{
size_t
length
=
0
;
for
(
auto
calendar
:
AvailableCalendars
(
)
)
{
for
(
auto
era
:
CalendarEras
(
calendar
)
)
{
for
(
auto
name
:
CalendarEraNames
(
calendar
era
)
)
{
length
=
std
:
:
max
(
length
name
.
length
(
)
)
;
}
}
}
return
length
;
}
static
mozilla
:
:
Maybe
<
EraCode
>
EraForString
(
CalendarId
calendar
JSLinearString
*
string
)
{
MOZ_ASSERT
(
CalendarEraRelevant
(
calendar
)
)
;
constexpr
size_t
MaxLength
=
24
;
static_assert
(
MaxLength
>
=
EraNameMaxLength
(
)
"
Storage
size
is
at
least
as
large
as
the
largest
known
era
"
)
;
if
(
string
-
>
length
(
)
>
MaxLength
|
|
!
StringIsAscii
(
string
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
char
chars
[
MaxLength
]
=
{
}
;
CopyChars
(
reinterpret_cast
<
JS
:
:
Latin1Char
*
>
(
chars
)
*
string
)
;
auto
stringView
=
std
:
:
string_view
{
chars
string
-
>
length
(
)
}
;
for
(
auto
era
:
CalendarEras
(
calendar
)
)
{
for
(
auto
name
:
CalendarEraNames
(
calendar
era
)
)
{
if
(
name
=
=
stringView
)
{
return
mozilla
:
:
Some
(
era
)
;
}
}
}
return
mozilla
:
:
Nothing
(
)
;
}
static
constexpr
std
:
:
string_view
IcuEraName
(
CalendarId
calendar
EraCode
era
)
{
switch
(
calendar
)
{
case
CalendarId
:
:
ISO8601
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
default
"
;
}
case
CalendarId
:
:
Buddhist
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
be
"
;
}
case
CalendarId
:
:
Chinese
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
chinese
"
;
}
case
CalendarId
:
:
Coptic
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
"
ad
"
:
"
bd
"
;
}
case
CalendarId
:
:
Dangi
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
dangi
"
;
}
case
CalendarId
:
:
Ethiopian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
"
incar
"
:
"
pre
-
incar
"
;
}
case
CalendarId
:
:
EthiopianAmeteAlem
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
mundi
"
;
}
case
CalendarId
:
:
Gregorian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
"
ce
"
:
"
bce
"
;
}
case
CalendarId
:
:
Hebrew
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
am
"
;
}
case
CalendarId
:
:
Indian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
saka
"
;
}
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
case
CalendarId
:
:
Persian
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
return
"
ah
"
;
}
case
CalendarId
:
:
Japanese
:
{
switch
(
era
)
{
case
EraCode
:
:
Standard
:
return
"
ce
"
;
case
EraCode
:
:
Inverse
:
return
"
bce
"
;
case
EraCode
:
:
Meiji
:
return
"
meiji
"
;
case
EraCode
:
:
Taisho
:
return
"
taisho
"
;
case
EraCode
:
:
Showa
:
return
"
showa
"
;
case
EraCode
:
:
Heisei
:
return
"
heisei
"
;
case
EraCode
:
:
Reiwa
:
return
"
reiwa
"
;
}
break
;
}
case
CalendarId
:
:
ROC
:
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
|
|
era
=
=
EraCode
:
:
Inverse
)
;
return
era
=
=
EraCode
:
:
Standard
?
"
roc
"
:
"
roc
-
inverse
"
;
}
}
JS_CONSTEXPR_CRASH
(
"
invalid
era
"
)
;
}
enum
class
CalendarError
{
Generic
Overflow
Underflow
OutOfRange
UnknownEra
UnknownMonthCode
}
;
static
mozilla
:
:
Result
<
UniqueICU4XDate
CalendarError
>
CreateDateFromCodes
(
CalendarId
calendarId
const
capi
:
:
ICU4XCalendar
*
calendar
EraYear
eraYear
MonthCode
monthCode
int32_t
day
)
{
MOZ_ASSERT
(
calendarId
!
=
CalendarId
:
:
ISO8601
)
;
MOZ_ASSERT
(
capi
:
:
ICU4XCalendar_kind
(
calendar
)
=
=
ToAnyCalendarKind
(
calendarId
)
)
;
MOZ_ASSERT
(
mozilla
:
:
EnumSet
<
EraCode
>
(
CalendarEras
(
calendarId
)
)
.
contains
(
eraYear
.
era
)
)
;
MOZ_ASSERT_IF
(
CalendarEraRelevant
(
calendarId
)
eraYear
.
year
>
0
)
;
MOZ_ASSERT
(
CalendarMonthCodes
(
calendarId
)
.
contains
(
monthCode
)
)
;
MOZ_ASSERT
(
day
>
0
)
;
MOZ_ASSERT
(
day
<
=
CalendarDaysInMonth
(
calendarId
)
.
second
)
;
auto
era
=
IcuEraName
(
calendarId
eraYear
.
era
)
;
auto
monthCodeView
=
std
:
:
string_view
{
monthCode
}
;
auto
date
=
capi
:
:
ICU4XDate_create_from_codes_in_calendar
(
era
.
data
(
)
era
.
length
(
)
eraYear
.
year
monthCodeView
.
data
(
)
monthCodeView
.
length
(
)
day
calendar
)
;
if
(
date
.
is_ok
)
{
return
UniqueICU4XDate
{
date
.
ok
}
;
}
switch
(
date
.
err
)
{
case
capi
:
:
ICU4XError_CalendarOverflowError
:
return
mozilla
:
:
Err
(
CalendarError
:
:
Overflow
)
;
case
capi
:
:
ICU4XError_CalendarUnderflowError
:
return
mozilla
:
:
Err
(
CalendarError
:
:
Underflow
)
;
case
capi
:
:
ICU4XError_CalendarOutOfRangeError
:
return
mozilla
:
:
Err
(
CalendarError
:
:
OutOfRange
)
;
case
capi
:
:
ICU4XError_CalendarUnknownEraError
:
return
mozilla
:
:
Err
(
CalendarError
:
:
UnknownEra
)
;
case
capi
:
:
ICU4XError_CalendarUnknownMonthCodeError
:
return
mozilla
:
:
Err
(
CalendarError
:
:
UnknownMonthCode
)
;
default
:
return
mozilla
:
:
Err
(
CalendarError
:
:
Generic
)
;
}
}
static
mozilla
:
:
Result
<
UniqueICU4XDate
CalendarError
>
CreateDateFromCodesConstrainToJapaneseEra
(
JSContext
*
cx
CalendarId
calendarId
const
capi
:
:
ICU4XCalendar
*
calendar
EraYear
eraYear
MonthCode
monthCode
int32_t
day
)
{
MOZ_ASSERT
(
calendarId
=
=
CalendarId
:
:
Japanese
)
;
MOZ_ASSERT
(
capi
:
:
ICU4XCalendar_kind
(
calendar
)
=
=
ToAnyCalendarKind
(
calendarId
)
)
;
MOZ_ASSERT
(
!
CalendarEraStartsAtYearBoundary
(
calendarId
eraYear
.
era
)
)
;
MOZ_ASSERT
(
!
monthCode
.
isLeapMonth
(
)
)
;
MOZ_ASSERT
(
1
<
=
monthCode
.
ordinal
(
)
&
&
monthCode
.
ordinal
(
)
<
=
12
)
;
MOZ_ASSERT
(
1
<
=
day
&
&
day
<
=
31
)
;
const
auto
&
[
era
year
]
=
eraYear
;
int32_t
month
=
monthCode
.
ordinal
(
)
;
const
int32_t
startMonth
=
month
;
if
(
year
=
=
1
)
{
MOZ_ASSERT
(
capi
:
:
ICU4XCalendar_kind
(
calendar
)
!
=
capi
:
:
ICU4XAnyCalendarKind_JapaneseExtended
)
;
auto
firstEraYear
=
EraYear
{
era
1
}
;
for
(
;
month
<
=
12
;
month
+
+
)
{
auto
firstDayOfMonth
=
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
MonthCode
{
month
}
1
)
;
if
(
firstDayOfMonth
.
isOk
(
)
)
{
if
(
month
=
=
startMonth
)
{
int32_t
lastDayOfMonth
=
capi
:
:
ICU4XDate_days_in_month
(
firstDayOfMonth
.
inspect
(
)
.
get
(
)
)
;
return
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
MonthCode
{
month
}
std
:
:
min
(
day
lastDayOfMonth
)
)
;
}
break
;
}
if
(
firstDayOfMonth
.
inspectErr
(
)
!
=
CalendarError
:
:
OutOfRange
)
{
return
firstDayOfMonth
.
propagateErr
(
)
;
}
}
MOZ_ASSERT
(
startMonth
<
month
)
;
auto
monthCode
=
MonthCode
{
month
-
1
}
;
if
(
startMonth
<
month
-
1
)
{
for
(
int32_t
firstDayOfEra
=
2
;
firstDayOfEra
<
=
31
;
firstDayOfEra
+
+
)
{
auto
date
=
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
monthCode
firstDayOfEra
)
;
if
(
date
.
isOk
(
)
)
{
return
date
.
unwrap
(
)
;
}
if
(
date
.
inspectErr
(
)
=
=
CalendarError
:
:
OutOfRange
)
{
continue
;
}
if
(
date
.
inspectErr
(
)
=
=
CalendarError
:
:
Overflow
)
{
break
;
}
return
date
.
propagateErr
(
)
;
}
return
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
MonthCode
{
month
}
1
)
;
}
auto
date
=
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
monthCode
day
)
;
if
(
date
.
isOk
(
)
)
{
return
date
.
unwrap
(
)
;
}
auto
errorCode
=
date
.
inspectErr
(
)
;
int32_t
direction
;
if
(
errorCode
=
=
CalendarError
:
:
Overflow
)
{
direction
=
-
1
;
}
else
if
(
errorCode
=
=
CalendarError
:
:
OutOfRange
)
{
direction
=
1
;
}
else
{
return
date
.
propagateErr
(
)
;
}
while
(
(
direction
<
0
&
&
day
>
28
)
|
|
(
direction
>
0
&
&
day
<
31
)
)
{
day
+
=
direction
;
auto
date
=
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
monthCode
day
)
;
if
(
date
.
isOk
(
)
)
{
return
date
.
unwrap
(
)
;
}
if
(
date
.
inspectErr
(
)
=
=
errorCode
)
{
continue
;
}
return
date
.
propagateErr
(
)
;
}
return
CreateDateFromCodes
(
calendarId
calendar
firstEraYear
MonthCode
{
month
}
1
)
;
}
auto
firstDayOfYear
=
CreateDateFromCodes
(
calendarId
calendar
EraYear
{
era
year
}
MonthCode
{
1
}
1
)
;
int32_t
lastYearInEra
;
if
(
firstDayOfYear
.
isOk
(
)
)
{
lastYearInEra
=
year
;
}
else
if
(
firstDayOfYear
.
inspectErr
(
)
=
=
CalendarError
:
:
OutOfRange
)
{
int32_t
minYear
=
1
;
int32_t
maxYear
=
year
;
while
(
minYear
!
=
maxYear
)
{
int32_t
candidateYear
=
minYear
+
(
maxYear
-
minYear
)
/
2
;
auto
firstDayOfYear
=
CreateDateFromCodes
(
calendarId
calendar
EraYear
{
era
candidateYear
}
MonthCode
{
1
}
1
)
;
if
(
firstDayOfYear
.
isOk
(
)
)
{
minYear
=
candidateYear
+
1
;
}
else
if
(
firstDayOfYear
.
inspectErr
(
)
=
=
CalendarError
:
:
OutOfRange
)
{
maxYear
=
candidateYear
;
}
else
{
return
firstDayOfYear
.
propagateErr
(
)
;
}
}
MOZ_ASSERT
(
1
<
minYear
&
&
minYear
<
=
year
)
;
lastYearInEra
=
minYear
-
1
;
month
=
12
;
day
=
31
;
}
else
{
return
firstDayOfYear
.
propagateErr
(
)
;
}
auto
lastEraYear
=
EraYear
{
era
lastYearInEra
}
;
for
(
;
month
>
0
;
month
-
-
)
{
auto
monthCode
=
MonthCode
{
month
}
;
auto
firstDayOfMonth
=
CreateDateFromCodes
(
calendarId
calendar
lastEraYear
monthCode
1
)
;
if
(
firstDayOfMonth
.
isErr
(
)
)
{
if
(
firstDayOfMonth
.
inspectErr
(
)
=
=
CalendarError
:
:
OutOfRange
)
{
continue
;
}
return
firstDayOfMonth
.
propagateErr
(
)
;
}
auto
intermediateDate
=
firstDayOfMonth
.
unwrap
(
)
;
int32_t
lastDayOfMonth
=
capi
:
:
ICU4XDate_days_in_month
(
intermediateDate
.
get
(
)
)
;
if
(
lastYearInEra
=
=
year
&
&
month
=
=
startMonth
)
{
day
=
std
:
:
min
(
day
lastDayOfMonth
)
;
}
else
{
MOZ_ASSERT_IF
(
lastYearInEra
=
=
year
month
<
startMonth
)
;
day
=
lastDayOfMonth
;
}
for
(
int32_t
nextDay
=
2
;
nextDay
<
=
day
;
nextDay
+
+
)
{
auto
nextDayOfMonth
=
CreateDateFromCodes
(
calendarId
calendar
lastEraYear
monthCode
nextDay
)
;
if
(
nextDayOfMonth
.
isErr
(
)
)
{
if
(
nextDayOfMonth
.
inspectErr
(
)
=
=
CalendarError
:
:
OutOfRange
)
{
break
;
}
return
nextDayOfMonth
.
propagateErr
(
)
;
}
intermediateDate
=
nextDayOfMonth
.
unwrap
(
)
;
}
return
intermediateDate
;
}
MOZ_CRASH
(
"
error
constraining
to
end
of
era
"
)
;
}
static
void
ReportCalendarFieldOverflow
(
JSContext
*
cx
const
char
*
name
double
num
)
{
ToCStringBuf
numCbuf
;
const
char
*
numStr
=
NumberToCString
(
&
numCbuf
num
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_OVERFLOW_FIELD
name
numStr
)
;
}
static
UniqueICU4XDate
CreateDateFromCodes
(
JSContext
*
cx
CalendarId
calendarId
const
capi
:
:
ICU4XCalendar
*
calendar
EraYear
eraYear
MonthCode
monthCode
int32_t
day
TemporalOverflow
overflow
)
{
MOZ_ASSERT
(
CalendarMonthCodes
(
calendarId
)
.
contains
(
monthCode
)
)
;
MOZ_ASSERT
(
day
>
0
)
;
MOZ_ASSERT
(
day
<
=
CalendarDaysInMonth
(
calendarId
)
.
second
)
;
int32_t
daysInMonth
=
CalendarDaysInMonth
(
calendarId
monthCode
)
.
second
;
if
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
{
day
=
std
:
:
min
(
day
daysInMonth
)
;
}
else
{
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
;
if
(
day
>
daysInMonth
)
{
ReportCalendarFieldOverflow
(
cx
"
day
"
day
)
;
return
nullptr
;
}
}
auto
result
=
CreateDateFromCodes
(
calendarId
calendar
eraYear
monthCode
day
)
;
if
(
result
.
isOk
(
)
)
{
return
result
.
unwrap
(
)
;
}
switch
(
result
.
inspectErr
(
)
)
{
case
CalendarError
:
:
UnknownMonthCode
:
{
MOZ_ASSERT
(
CalendarHasLeapMonths
(
calendarId
)
)
;
MOZ_ASSERT
(
monthCode
.
isLeapMonth
(
)
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
char
code
[
5
]
=
{
}
;
auto
monthCodeView
=
std
:
:
string_view
{
monthCode
}
;
monthCodeView
.
copy
(
code
monthCodeView
.
length
(
)
)
;
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_MONTHCODE
code
)
;
return
nullptr
;
}
int32_t
nonLeapMonth
=
std
:
:
min
(
monthCode
.
ordinal
(
)
+
1
12
)
;
auto
nonLeapMonthCode
=
MonthCode
{
nonLeapMonth
}
;
return
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
nonLeapMonthCode
day
overflow
)
;
}
case
CalendarError
:
:
Overflow
:
{
MOZ_ASSERT
(
day
>
CalendarDaysInMonth
(
calendarId
monthCode
)
.
first
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
day
"
day
)
;
return
nullptr
;
}
auto
firstDayOfMonth
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
monthCode
1
overflow
)
;
if
(
!
firstDayOfMonth
)
{
return
nullptr
;
}
int32_t
daysInMonth
=
capi
:
:
ICU4XDate_days_in_month
(
firstDayOfMonth
.
get
(
)
)
;
MOZ_ASSERT
(
day
>
daysInMonth
)
;
return
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
monthCode
daysInMonth
overflow
)
;
}
case
CalendarError
:
:
OutOfRange
:
{
MOZ_ASSERT
(
calendarId
=
=
CalendarId
:
:
Japanese
)
;
MOZ_ASSERT
(
!
CalendarEraStartsAtYearBoundary
(
calendarId
eraYear
.
era
)
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
eraYear
"
eraYear
.
year
)
;
return
nullptr
;
}
auto
result
=
CreateDateFromCodesConstrainToJapaneseEra
(
cx
calendarId
calendar
eraYear
monthCode
day
)
;
if
(
result
.
isOk
(
)
)
{
return
result
.
unwrap
(
)
;
}
break
;
}
case
CalendarError
:
:
Underflow
:
case
CalendarError
:
:
UnknownEra
:
MOZ_ASSERT
(
false
"
unexpected
calendar
error
"
)
;
break
;
case
CalendarError
:
:
Generic
:
break
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
nullptr
;
}
static
UniqueICU4XDate
CreateDateFrom
(
JSContext
*
cx
CalendarId
calendarId
const
capi
:
:
ICU4XCalendar
*
calendar
EraYear
eraYear
int32_t
month
int32_t
day
TemporalOverflow
overflow
)
{
MOZ_ASSERT
(
calendarId
!
=
CalendarId
:
:
ISO8601
)
;
MOZ_ASSERT
(
month
>
0
)
;
MOZ_ASSERT
(
day
>
0
)
;
MOZ_ASSERT
(
month
<
=
CalendarMonthsPerYear
(
calendarId
)
)
;
MOZ_ASSERT
(
day
<
=
CalendarDaysInMonth
(
calendarId
)
.
second
)
;
switch
(
calendarId
)
{
case
CalendarId
:
:
ISO8601
:
case
CalendarId
:
:
Buddhist
:
case
CalendarId
:
:
Coptic
:
case
CalendarId
:
:
Ethiopian
:
case
CalendarId
:
:
EthiopianAmeteAlem
:
case
CalendarId
:
:
Gregorian
:
case
CalendarId
:
:
Indian
:
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
case
CalendarId
:
:
Japanese
:
case
CalendarId
:
:
Persian
:
case
CalendarId
:
:
ROC
:
{
MOZ_ASSERT
(
!
CalendarHasLeapMonths
(
calendarId
)
)
;
auto
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
MonthCode
{
month
}
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
MOZ_ASSERT_IF
(
CalendarEraStartsAtYearBoundary
(
calendarId
)
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
=
=
uint32_t
(
month
)
)
;
return
date
;
}
case
CalendarId
:
:
Dangi
:
case
CalendarId
:
:
Chinese
:
{
static_assert
(
CalendarHasLeapMonths
(
CalendarId
:
:
Chinese
)
)
;
static_assert
(
CalendarMonthsPerYear
(
CalendarId
:
:
Chinese
)
=
=
13
)
;
static_assert
(
CalendarHasLeapMonths
(
CalendarId
:
:
Dangi
)
)
;
static_assert
(
CalendarMonthsPerYear
(
CalendarId
:
:
Dangi
)
=
=
13
)
;
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
13
)
;
auto
monthCode
=
MonthCode
{
std
:
:
min
(
month
12
)
}
;
auto
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
monthCode
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
int32_t
ordinal
=
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
;
if
(
ordinal
=
=
month
)
{
return
date
;
}
if
(
ordinal
>
month
)
{
MOZ_ASSERT
(
1
<
month
&
&
month
<
=
12
)
;
MOZ_ASSERT
(
capi
:
:
ICU4XDate_months_in_year
(
date
.
get
(
)
)
=
=
13
)
;
MOZ_ASSERT
(
(
ordinal
-
month
)
=
=
1
)
;
if
(
month
>
2
)
{
auto
previousMonthCode
=
MonthCode
{
month
-
1
}
;
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
previousMonthCode
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
int32_t
ordinal
=
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
;
if
(
ordinal
=
=
month
)
{
return
date
;
}
}
}
else
{
MOZ_ASSERT
(
month
=
=
13
)
;
MOZ_ASSERT
(
ordinal
=
=
12
)
;
if
(
capi
:
:
ICU4XDate_months_in_year
(
date
.
get
(
)
)
!
=
13
)
{
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
month
"
month
)
;
return
nullptr
;
}
return
date
;
}
}
auto
leapMonthCode
=
MonthCode
{
month
-
1
true
}
;
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
leapMonthCode
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
MOZ_ASSERT
(
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
=
=
uint32_t
(
month
)
"
unexpected
ordinal
month
"
)
;
return
date
;
}
case
CalendarId
:
:
Hebrew
:
{
static_assert
(
CalendarHasLeapMonths
(
CalendarId
:
:
Hebrew
)
)
;
static_assert
(
CalendarMonthsPerYear
(
CalendarId
:
:
Hebrew
)
=
=
13
)
;
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
13
)
;
auto
monthCode
=
MonthCode
{
std
:
:
min
(
month
12
)
}
;
auto
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
monthCode
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
int32_t
ordinal
=
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
;
if
(
ordinal
=
=
month
)
{
return
date
;
}
if
(
ordinal
>
month
)
{
MOZ_ASSERT
(
1
<
month
&
&
month
<
=
12
)
;
MOZ_ASSERT
(
capi
:
:
ICU4XDate_months_in_year
(
date
.
get
(
)
)
=
=
13
)
;
MOZ_ASSERT
(
(
ordinal
-
month
)
=
=
1
)
;
}
else
{
MOZ_ASSERT
(
month
=
=
13
)
;
MOZ_ASSERT
(
ordinal
=
=
12
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
month
"
month
)
;
return
nullptr
;
}
return
date
;
}
bool
isLeapMonth
=
month
=
=
6
;
auto
previousMonthCode
=
MonthCode
{
month
-
1
isLeapMonth
}
;
date
=
CreateDateFromCodes
(
cx
calendarId
calendar
eraYear
previousMonthCode
day
overflow
)
;
if
(
!
date
)
{
return
nullptr
;
}
MOZ_ASSERT
(
capi
:
:
ICU4XDate_ordinal_month
(
date
.
get
(
)
)
=
=
uint32_t
(
month
)
"
unexpected
ordinal
month
"
)
;
return
date
;
}
}
MOZ_CRASH
(
"
invalid
calendar
id
"
)
;
}
static
constexpr
size_t
ICUEraNameMaxLength
(
)
{
size_t
length
=
0
;
for
(
auto
calendar
:
AvailableCalendars
(
)
)
{
for
(
auto
era
:
CalendarEras
(
calendar
)
)
{
auto
name
=
IcuEraName
(
calendar
era
)
;
length
=
std
:
:
max
(
length
name
.
length
(
)
)
;
}
}
return
length
;
}
static
bool
CalendarDateEra
(
JSContext
*
cx
CalendarId
calendar
const
capi
:
:
ICU4XDate
*
date
EraCode
*
result
)
{
MOZ_ASSERT
(
calendar
!
=
CalendarId
:
:
ISO8601
)
;
constexpr
size_t
MaxLength
=
15
;
static_assert
(
MaxLength
>
=
ICUEraNameMaxLength
(
)
"
Storage
size
is
at
least
as
large
as
the
largest
known
era
"
)
;
char
buf
[
MaxLength
+
1
]
=
{
}
;
auto
writable
=
capi
:
:
diplomat_simple_writeable
(
buf
std
:
:
size
(
buf
)
)
;
if
(
!
capi
:
:
ICU4XDate_era
(
date
&
writable
)
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
MOZ_ASSERT
(
writable
.
buf
=
=
buf
"
unexpected
buffer
relocation
"
)
;
auto
dateEra
=
std
:
:
string_view
{
writable
.
buf
writable
.
len
}
;
for
(
auto
era
:
CalendarEras
(
calendar
)
)
{
if
(
IcuEraName
(
calendar
era
)
=
=
dateEra
)
{
*
result
=
era
;
return
true
;
}
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
static
bool
CalendarDateYear
(
JSContext
*
cx
CalendarId
calendar
const
capi
:
:
ICU4XDate
*
date
int32_t
*
result
)
{
MOZ_ASSERT
(
calendar
!
=
CalendarId
:
:
ISO8601
)
;
if
(
!
CalendarEraRelevant
(
calendar
)
)
{
int32_t
year
=
capi
:
:
ICU4XDate_year_in_era
(
date
)
;
*
result
=
year
;
return
true
;
}
if
(
calendar
!
=
CalendarId
:
:
Japanese
)
{
MOZ_ASSERT
(
CalendarEras
(
calendar
)
.
size
(
)
=
=
2
)
;
int32_t
year
=
capi
:
:
ICU4XDate_year_in_era
(
date
)
;
MOZ_ASSERT
(
year
>
0
"
era
years
are
strictly
positive
in
ICU4X
"
)
;
EraCode
era
;
if
(
!
CalendarDateEra
(
cx
calendar
date
&
era
)
)
{
return
false
;
}
if
(
era
=
=
EraCode
:
:
Inverse
)
{
year
=
-
(
year
-
1
)
;
}
else
{
MOZ_ASSERT
(
era
=
=
EraCode
:
:
Standard
)
;
}
*
result
=
year
;
return
true
;
}
UniqueICU4XIsoDate
isoDate
{
capi
:
:
ICU4XDate_to_iso
(
date
)
}
;
int32_t
isoYear
=
capi
:
:
ICU4XIsoDate_year
(
isoDate
.
get
(
)
)
;
*
result
=
isoYear
;
return
true
;
}
static
bool
CalendarDateMonthCode
(
JSContext
*
cx
CalendarId
calendar
const
capi
:
:
ICU4XDate
*
date
MonthCode
*
result
)
{
MOZ_ASSERT
(
calendar
!
=
CalendarId
:
:
ISO8601
)
;
constexpr
size_t
MaxLength
=
std
:
:
string_view
{
MonthCode
:
:
maxLeapMonth
(
)
}
.
length
(
)
;
static_assert
(
MaxLength
>
std
:
:
string_view
{
MonthCode
:
:
maxNonLeapMonth
(
)
}
.
length
(
)
"
string
representation
of
max
-
leap
month
is
larger
"
)
;
char
buf
[
MaxLength
+
1
]
=
{
}
;
auto
writable
=
capi
:
:
diplomat_simple_writeable
(
buf
std
:
:
size
(
buf
)
)
;
if
(
!
capi
:
:
ICU4XDate_month_code
(
date
&
writable
)
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
MOZ_ASSERT
(
writable
.
buf
=
=
buf
"
unexpected
buffer
relocation
"
)
;
auto
view
=
std
:
:
string_view
{
writable
.
buf
writable
.
len
}
;
MOZ_ASSERT
(
view
.
length
(
)
>
=
3
)
;
MOZ_ASSERT
(
view
[
0
]
=
=
'
M
'
)
;
MOZ_ASSERT
(
mozilla
:
:
IsAsciiDigit
(
view
[
1
]
)
)
;
MOZ_ASSERT
(
mozilla
:
:
IsAsciiDigit
(
view
[
2
]
)
)
;
MOZ_ASSERT_IF
(
view
.
length
(
)
>
3
view
[
3
]
=
=
'
L
'
)
;
int32_t
ordinal
=
AsciiDigitToNumber
(
view
[
1
]
)
*
10
+
AsciiDigitToNumber
(
view
[
2
]
)
;
bool
isLeapMonth
=
view
.
length
(
)
>
3
;
auto
monthCode
=
MonthCode
{
ordinal
isLeapMonth
}
;
static
constexpr
auto
IrregularAdarII
=
MonthCode
{
6
true
}
;
static
constexpr
auto
RegularAdarII
=
MonthCode
{
6
}
;
if
(
calendar
=
=
CalendarId
:
:
Hebrew
&
&
monthCode
=
=
IrregularAdarII
)
{
monthCode
=
RegularAdarII
;
}
MOZ_ASSERT
(
CalendarMonthCodes
(
calendar
)
.
contains
(
monthCode
)
)
;
*
result
=
monthCode
;
return
true
;
}
class
MonthCodeString
{
char
str_
[
4
+
1
]
;
public
:
explicit
MonthCodeString
(
MonthCodeField
field
)
{
str_
[
0
]
=
'
M
'
;
str_
[
1
]
=
char
(
'
0
'
+
(
field
.
ordinal
(
)
/
10
)
)
;
str_
[
2
]
=
char
(
'
0
'
+
(
field
.
ordinal
(
)
%
10
)
)
;
str_
[
3
]
=
field
.
isLeapMonth
(
)
?
'
L
'
:
'
\
0
'
;
str_
[
4
]
=
'
\
0
'
;
}
const
char
*
toCString
(
)
const
{
return
str_
;
}
}
;
static
bool
ISOCalendarResolveMonth
(
JSContext
*
cx
Handle
<
CalendarFields
>
fields
double
*
result
)
{
double
month
=
fields
.
month
(
)
;
MOZ_ASSERT_IF
(
fields
.
has
(
CalendarField
:
:
Month
)
IsInteger
(
month
)
&
&
month
>
0
)
;
if
(
!
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Month
)
)
;
*
result
=
month
;
return
true
;
}
auto
monthCode
=
fields
.
monthCode
(
)
;
int32_t
ordinal
=
monthCode
.
ordinal
(
)
;
if
(
ordinal
<
1
|
|
ordinal
>
12
|
|
monthCode
.
isLeapMonth
(
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_MONTHCODE
MonthCodeString
{
monthCode
}
.
toCString
(
)
)
;
return
false
;
}
if
(
fields
.
has
(
CalendarField
:
:
Month
)
&
&
month
!
=
ordinal
)
{
ToCStringBuf
cbuf
;
const
char
*
monthStr
=
NumberToCString
(
&
cbuf
month
)
;
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INCOMPATIBLE_MONTHCODE
MonthCodeString
{
monthCode
}
.
toCString
(
)
monthStr
)
;
return
false
;
}
*
result
=
ordinal
;
return
true
;
}
struct
EraYears
{
mozilla
:
:
Maybe
<
EraYear
>
fromEpoch
;
mozilla
:
:
Maybe
<
EraYear
>
fromEra
;
}
;
static
bool
CalendarFieldYear
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
EraYears
*
result
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Year
)
|
|
fields
.
has
(
CalendarField
:
:
EraYear
)
)
;
bool
hasRelevantEra
=
fields
.
has
(
CalendarField
:
:
Era
)
&
&
CalendarEraRelevant
(
calendar
)
;
MOZ_ASSERT_IF
(
fields
.
has
(
CalendarField
:
:
Era
)
CalendarEraRelevant
(
calendar
)
)
;
mozilla
:
:
Maybe
<
EraYear
>
fromEpoch
;
if
(
fields
.
has
(
CalendarField
:
:
Year
)
)
{
double
year
=
fields
.
year
(
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
int32_t
intYear
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
year
&
intYear
)
)
{
ReportCalendarFieldOverflow
(
cx
"
year
"
year
)
;
return
false
;
}
fromEpoch
=
mozilla
:
:
Some
(
CalendarEraYear
(
calendar
intYear
)
)
;
}
else
{
MOZ_ASSERT
(
hasRelevantEra
)
;
}
mozilla
:
:
Maybe
<
EraYear
>
fromEra
;
if
(
hasRelevantEra
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Era
)
)
;
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
EraYear
)
)
;
auto
era
=
fields
.
era
(
)
;
MOZ_ASSERT
(
era
)
;
double
eraYear
=
fields
.
eraYear
(
)
;
MOZ_ASSERT
(
IsInteger
(
eraYear
)
)
;
auto
*
linearEra
=
era
-
>
ensureLinear
(
cx
)
;
if
(
!
linearEra
)
{
return
false
;
}
auto
eraCode
=
EraForString
(
calendar
linearEra
)
;
if
(
!
eraCode
)
{
if
(
auto
code
=
QuoteString
(
cx
era
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_ERA
code
.
get
(
)
)
;
}
return
false
;
}
int32_t
intEraYear
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
eraYear
&
intEraYear
)
)
{
ReportCalendarFieldOverflow
(
cx
"
eraYear
"
eraYear
)
;
return
false
;
}
fromEra
=
mozilla
:
:
Some
(
EraYear
{
*
eraCode
intEraYear
}
)
;
}
*
result
=
{
fromEpoch
fromEra
}
;
return
true
;
}
struct
Month
{
MonthCode
code
;
int32_t
ordinal
=
0
;
}
;
static
bool
CalendarFieldMonth
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
Month
*
result
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Month
)
|
|
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
;
int32_t
intMonth
=
0
;
if
(
fields
.
has
(
CalendarField
:
:
Month
)
)
{
double
month
=
fields
.
month
(
)
;
MOZ_ASSERT
(
IsInteger
(
month
)
&
&
month
>
0
)
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
month
&
intMonth
)
)
{
intMonth
=
0
;
}
const
int32_t
monthsPerYear
=
CalendarMonthsPerYear
(
calendar
)
;
if
(
intMonth
<
1
|
|
intMonth
>
monthsPerYear
)
{
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
month
"
month
)
;
return
false
;
}
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
;
intMonth
=
monthsPerYear
;
}
MOZ_ASSERT
(
intMonth
>
0
)
;
}
MonthCode
fromMonthCode
;
if
(
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
{
auto
monthCode
=
fields
.
monthCode
(
)
;
int32_t
ordinal
=
monthCode
.
ordinal
(
)
;
bool
isLeapMonth
=
monthCode
.
isLeapMonth
(
)
;
constexpr
int32_t
minMonth
=
MonthCode
{
1
}
.
ordinal
(
)
;
constexpr
int32_t
maxNonLeapMonth
=
MonthCode
:
:
maxNonLeapMonth
(
)
.
ordinal
(
)
;
constexpr
int32_t
maxLeapMonth
=
MonthCode
:
:
maxLeapMonth
(
)
.
ordinal
(
)
;
const
int32_t
maxMonth
=
isLeapMonth
?
maxLeapMonth
:
maxNonLeapMonth
;
if
(
minMonth
<
=
ordinal
&
&
ordinal
<
=
maxMonth
)
{
fromMonthCode
=
MonthCode
{
ordinal
isLeapMonth
}
;
}
const
auto
&
monthCodes
=
CalendarMonthCodes
(
calendar
)
;
if
(
!
monthCodes
.
contains
(
fromMonthCode
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INVALID_MONTHCODE
MonthCodeString
{
monthCode
}
.
toCString
(
)
)
;
return
false
;
}
}
*
result
=
{
fromMonthCode
intMonth
}
;
return
true
;
}
static
bool
CalendarFieldDay
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
int32_t
*
result
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Day
)
)
;
double
day
=
fields
.
day
(
)
;
MOZ_ASSERT
(
IsInteger
(
day
)
&
&
day
>
0
)
;
int32_t
intDay
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
day
&
intDay
)
)
{
intDay
=
0
;
}
int32_t
daysPerMonth
=
CalendarDaysInMonth
(
calendar
)
.
second
;
if
(
intDay
<
1
|
|
intDay
>
daysPerMonth
)
{
if
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
{
ReportCalendarFieldOverflow
(
cx
"
day
"
day
)
;
return
false
;
}
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
;
intDay
=
daysPerMonth
;
}
*
result
=
intDay
;
return
true
;
}
static
bool
CalendarFieldEraYearMatchesYear
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
const
capi
:
:
ICU4XDate
*
date
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
EraYear
)
)
;
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Year
)
)
;
double
year
=
fields
.
year
(
)
;
MOZ_ASSERT
(
IsInteger
(
year
)
)
;
int32_t
intYear
;
MOZ_ALWAYS_TRUE
(
mozilla
:
:
NumberEqualsInt32
(
year
&
intYear
)
)
;
int32_t
yearFromEraYear
;
if
(
!
CalendarDateYear
(
cx
calendar
date
&
yearFromEraYear
)
)
{
return
false
;
}
if
(
intYear
!
=
yearFromEraYear
)
{
ToCStringBuf
yearCbuf
;
const
char
*
yearStr
=
NumberToCString
(
&
yearCbuf
intYear
)
;
ToCStringBuf
fromEraCbuf
;
const
char
*
fromEraStr
=
NumberToCString
(
&
fromEraCbuf
yearFromEraYear
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INCOMPATIBLE_YEAR
yearStr
fromEraStr
)
;
return
false
;
}
return
true
;
}
static
bool
CalendarFieldMonthCodeMatchesMonth
(
JSContext
*
cx
Handle
<
CalendarFields
>
fields
const
capi
:
:
ICU4XDate
*
date
int32_t
month
)
{
int32_t
ordinal
=
capi
:
:
ICU4XDate_ordinal_month
(
date
)
;
if
(
month
!
=
ordinal
)
{
ToCStringBuf
cbuf
;
const
char
*
monthStr
=
NumberToCString
(
&
cbuf
fields
.
month
(
)
)
;
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INCOMPATIBLE_MONTHCODE
MonthCodeString
{
fields
.
monthCode
(
)
}
.
toCString
(
)
monthStr
)
;
return
false
;
}
return
true
;
}
static
PlainDate
ToPlainDate
(
const
capi
:
:
ICU4XDate
*
date
)
{
UniqueICU4XIsoDate
isoDate
{
capi
:
:
ICU4XDate_to_iso
(
date
)
}
;
int32_t
isoYear
=
capi
:
:
ICU4XIsoDate_year
(
isoDate
.
get
(
)
)
;
int32_t
isoMonth
=
capi
:
:
ICU4XIsoDate_month
(
isoDate
.
get
(
)
)
;
MOZ_ASSERT
(
1
<
=
isoMonth
&
&
isoMonth
<
=
12
)
;
int32_t
isoDay
=
capi
:
:
ICU4XIsoDate_day_of_month
(
isoDate
.
get
(
)
)
;
MOZ_ASSERT
(
1
<
=
isoDay
&
&
isoDay
<
=
:
:
ISODaysInMonth
(
isoYear
isoMonth
)
)
;
return
{
isoYear
isoMonth
isoDay
}
;
}
static
UniqueICU4XDate
CreateDateFrom
(
JSContext
*
cx
CalendarId
calendar
const
capi
:
:
ICU4XCalendar
*
cal
const
EraYears
&
eraYears
const
Month
&
month
int32_t
day
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
)
{
auto
eraYear
=
eraYears
.
fromEra
?
*
eraYears
.
fromEra
:
*
eraYears
.
fromEpoch
;
UniqueICU4XDate
date
;
if
(
month
.
code
!
=
MonthCode
{
}
)
{
date
=
CreateDateFromCodes
(
cx
calendar
cal
eraYear
month
.
code
day
overflow
)
;
}
else
{
date
=
CreateDateFrom
(
cx
calendar
cal
eraYear
month
.
ordinal
day
overflow
)
;
}
if
(
!
date
)
{
return
nullptr
;
}
if
(
eraYears
.
fromEpoch
&
&
eraYears
.
fromEra
)
{
if
(
!
CalendarFieldEraYearMatchesYear
(
cx
calendar
fields
date
.
get
(
)
)
)
{
return
nullptr
;
}
}
if
(
month
.
code
!
=
MonthCode
{
}
&
&
month
.
ordinal
>
0
)
{
if
(
!
CalendarFieldMonthCodeMatchesMonth
(
cx
fields
date
.
get
(
)
month
.
ordinal
)
)
{
return
nullptr
;
}
}
return
date
;
}
static
bool
CalendarDateToISO
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
PlainDate
*
result
)
{
if
(
calendar
=
=
CalendarId
:
:
ISO8601
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Year
)
)
;
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Month
)
|
|
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
;
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Day
)
)
;
double
month
;
if
(
!
ISOCalendarResolveMonth
(
cx
fields
&
month
)
)
{
return
false
;
}
int32_t
intYear
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
fields
.
year
(
)
&
intYear
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
false
;
}
return
RegulateISODate
(
cx
intYear
month
fields
.
day
(
)
overflow
result
)
;
}
EraYears
eraYears
;
if
(
!
CalendarFieldYear
(
cx
calendar
fields
&
eraYears
)
)
{
return
false
;
}
Month
month
;
if
(
!
CalendarFieldMonth
(
cx
calendar
fields
overflow
&
month
)
)
{
return
false
;
}
int32_t
day
;
if
(
!
CalendarFieldDay
(
cx
calendar
fields
overflow
&
day
)
)
{
return
false
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendar
)
;
if
(
!
cal
)
{
return
false
;
}
auto
date
=
CreateDateFrom
(
cx
calendar
cal
.
get
(
)
eraYears
month
day
fields
overflow
)
;
if
(
!
date
)
{
return
false
;
}
*
result
=
ToPlainDate
(
date
.
get
(
)
)
;
return
true
;
}
static
bool
CalendarMonthDayToISOReferenceDate
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
PlainDate
*
result
)
{
if
(
calendar
=
=
CalendarId
:
:
ISO8601
)
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Month
)
|
|
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
;
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
Day
)
)
;
double
month
;
if
(
!
ISOCalendarResolveMonth
(
cx
fields
&
month
)
)
{
return
false
;
}
int32_t
referenceISOYear
=
1972
;
double
year
=
!
fields
.
has
(
CalendarField
:
:
Year
)
?
referenceISOYear
:
fields
.
year
(
)
;
int32_t
intYear
;
if
(
!
mozilla
:
:
NumberEqualsInt32
(
year
&
intYear
)
)
{
intYear
=
int32_t
(
std
:
:
fmod
(
year
400
)
)
;
}
PlainDate
regulated
;
if
(
!
RegulateISODate
(
cx
intYear
month
fields
.
day
(
)
overflow
&
regulated
)
)
{
return
false
;
}
*
result
=
{
referenceISOYear
regulated
.
month
regulated
.
day
}
;
return
true
;
}
EraYears
eraYears
;
if
(
fields
.
has
(
CalendarField
:
:
Year
)
|
|
fields
.
has
(
CalendarField
:
:
EraYear
)
)
{
if
(
!
CalendarFieldYear
(
cx
calendar
fields
&
eraYears
)
)
{
return
false
;
}
}
else
{
MOZ_ASSERT
(
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
;
}
Month
month
;
if
(
!
CalendarFieldMonth
(
cx
calendar
fields
overflow
&
month
)
)
{
return
false
;
}
int32_t
day
;
if
(
!
CalendarFieldDay
(
cx
calendar
fields
overflow
&
day
)
)
{
return
false
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendar
)
;
if
(
!
cal
)
{
return
false
;
}
auto
monthCode
=
month
.
code
;
if
(
fields
.
has
(
CalendarField
:
:
Year
)
|
|
fields
.
has
(
CalendarField
:
:
EraYear
)
)
{
auto
date
=
CreateDateFrom
(
cx
calendar
cal
.
get
(
)
eraYears
month
day
fields
overflow
)
;
if
(
!
date
)
{
return
false
;
}
if
(
!
fields
.
has
(
CalendarField
:
:
MonthCode
)
)
{
if
(
!
CalendarDateMonthCode
(
cx
calendar
date
.
get
(
)
&
monthCode
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
monthCode
!
=
MonthCode
{
}
)
;
if
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
{
int32_t
minDaysInMonth
=
CalendarDaysInMonth
(
calendar
monthCode
)
.
first
;
if
(
day
>
minDaysInMonth
)
{
day
=
capi
:
:
ICU4XDate_day_of_month
(
date
.
get
(
)
)
;
}
}
else
{
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
;
MOZ_ASSERT
(
day
=
=
int32_t
(
capi
:
:
ICU4XDate_day_of_month
(
date
.
get
(
)
)
)
)
;
}
}
else
{
MOZ_ASSERT
(
monthCode
!
=
MonthCode
{
}
)
;
int32_t
maxDaysInMonth
=
CalendarDaysInMonth
(
calendar
monthCode
)
.
second
;
if
(
overflow
=
=
TemporalOverflow
:
:
Constrain
)
{
day
=
std
:
:
min
(
day
maxDaysInMonth
)
;
}
else
{
MOZ_ASSERT
(
overflow
=
=
TemporalOverflow
:
:
Reject
)
;
if
(
day
>
maxDaysInMonth
)
{
ReportCalendarFieldOverflow
(
cx
"
day
"
day
)
;
return
false
;
}
}
}
constexpr
auto
isoReferenceDate
=
PlainDate
{
1972
12
31
}
;
auto
fromIsoDate
=
CreateICU4XDate
(
cx
isoReferenceDate
cal
.
get
(
)
)
;
if
(
!
fromIsoDate
)
{
return
false
;
}
int32_t
calendarYear
;
if
(
!
CalendarDateYear
(
cx
calendar
fromIsoDate
.
get
(
)
&
calendarYear
)
)
{
return
false
;
}
constexpr
size_t
maxIterations
=
10
'
000
;
UniqueICU4XDate
date
;
for
(
size_t
i
=
0
;
i
<
maxIterations
;
i
+
+
)
{
if
(
!
CheckForInterrupt
(
cx
)
)
{
return
false
;
}
auto
candidateYear
=
CalendarEraYear
(
calendar
calendarYear
)
;
auto
result
=
CreateDateFromCodes
(
calendar
cal
.
get
(
)
candidateYear
monthCode
day
)
;
if
(
result
.
isOk
(
)
)
{
auto
plainDate
=
ToPlainDate
(
result
.
inspect
(
)
.
get
(
)
)
;
if
(
plainDate
.
year
>
isoReferenceDate
.
year
)
{
calendarYear
-
=
1
;
continue
;
}
date
=
result
.
unwrap
(
)
;
break
;
}
switch
(
result
.
inspectErr
(
)
)
{
case
CalendarError
:
:
UnknownMonthCode
:
{
MOZ_ASSERT
(
CalendarHasLeapMonths
(
calendar
)
)
;
MOZ_ASSERT
(
monthCode
.
isLeapMonth
(
)
)
;
calendarYear
-
=
1
;
continue
;
}
case
CalendarError
:
:
Overflow
:
{
MOZ_ASSERT
(
day
>
CalendarDaysInMonth
(
calendar
monthCode
)
.
first
)
;
calendarYear
-
=
1
;
continue
;
}
case
CalendarError
:
:
OutOfRange
:
case
CalendarError
:
:
Underflow
:
case
CalendarError
:
:
UnknownEra
:
MOZ_ASSERT
(
false
"
unexpected
calendar
error
"
)
;
break
;
case
CalendarError
:
:
Generic
:
break
;
}
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
if
(
!
date
)
{
ReportCalendarFieldOverflow
(
cx
"
day
"
day
)
;
return
false
;
}
if
(
month
.
code
!
=
MonthCode
{
}
&
&
month
.
ordinal
>
0
)
{
if
(
!
CalendarFieldMonthCodeMatchesMonth
(
cx
fields
date
.
get
(
)
month
.
ordinal
)
)
{
return
false
;
}
}
*
result
=
ToPlainDate
(
date
.
get
(
)
)
;
return
true
;
}
enum
class
FieldType
{
Date
YearMonth
MonthDay
}
;
static
bool
CalendarResolveFields
(
JSContext
*
cx
CalendarId
calendar
Handle
<
CalendarFields
>
fields
FieldType
type
)
{
if
(
calendar
=
=
CalendarId
:
:
ISO8601
)
{
const
char
*
missingField
=
nullptr
;
if
(
(
type
=
=
FieldType
:
:
Date
|
|
type
=
=
FieldType
:
:
YearMonth
)
&
&
!
fields
.
has
(
CalendarField
:
:
Year
)
)
{
missingField
=
"
year
"
;
}
else
if
(
(
type
=
=
FieldType
:
:
Date
|
|
type
=
=
FieldType
:
:
MonthDay
)
&
&
!
fields
.
has
(
CalendarField
:
:
Day
)
)
{
missingField
=
"
day
"
;
}
else
if
(
!
fields
.
has
(
CalendarField
:
:
MonthCode
)
&
&
!
fields
.
has
(
CalendarField
:
:
Month
)
)
{
missingField
=
"
month
"
;
}
if
(
missingField
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_MISSING_FIELD
missingField
)
;
return
false
;
}
return
true
;
}
bool
requireDay
=
type
=
=
FieldType
:
:
Date
|
|
type
=
=
FieldType
:
:
MonthDay
;
bool
requireYear
=
type
=
=
FieldType
:
:
Date
|
|
type
=
=
FieldType
:
:
YearMonth
|
|
!
fields
.
has
(
CalendarField
:
:
MonthCode
)
;
const
char
*
missingField
=
nullptr
;
if
(
!
fields
.
has
(
CalendarField
:
:
MonthCode
)
&
&
!
fields
.
has
(
CalendarField
:
:
Month
)
)
{
missingField
=
"
monthCode
"
;
}
else
if
(
requireDay
&
&
!
fields
.
has
(
CalendarField
:
:
Day
)
)
{
missingField
=
"
day
"
;
}
else
if
(
!
CalendarEraRelevant
(
calendar
)
)
{
if
(
requireYear
&
&
!
fields
.
has
(
CalendarField
:
:
Year
)
)
{
missingField
=
"
year
"
;
}
}
else
{
if
(
fields
.
has
(
CalendarField
:
:
Era
)
!
=
fields
.
has
(
CalendarField
:
:
EraYear
)
)
{
missingField
=
fields
.
has
(
CalendarField
:
:
Era
)
?
"
eraYear
"
:
"
era
"
;
}
else
if
(
requireYear
&
&
!
fields
.
has
(
CalendarField
:
:
EraYear
)
&
&
!
fields
.
has
(
CalendarField
:
:
Year
)
)
{
missingField
=
"
eraYear
"
;
}
}
if
(
missingField
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_MISSING_FIELD
missingField
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarEra
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setUndefined
(
)
;
return
true
;
}
if
(
!
CalendarEraRelevant
(
calendarId
)
)
{
result
.
setUndefined
(
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
EraCode
era
;
if
(
!
CalendarDateEra
(
cx
calendarId
dt
.
get
(
)
&
era
)
)
{
return
false
;
}
auto
*
str
=
NewStringCopy
<
CanGC
>
(
cx
CalendarEraName
(
calendarId
era
)
)
;
if
(
!
str
)
{
return
false
;
}
result
.
setString
(
str
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarEraYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setUndefined
(
)
;
return
true
;
}
if
(
!
CalendarEraRelevant
(
calendarId
)
)
{
result
.
setUndefined
(
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
year
=
capi
:
:
ICU4XDate_year_in_era
(
dt
.
get
(
)
)
;
result
.
setInt32
(
year
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
date
.
year
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
year
;
if
(
!
CalendarDateYear
(
cx
calendarId
dt
.
get
(
)
&
year
)
)
{
return
false
;
}
result
.
setInt32
(
year
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarMonth
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
date
.
month
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
month
=
capi
:
:
ICU4XDate_ordinal_month
(
dt
.
get
(
)
)
;
result
.
setInt32
(
month
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarMonthCode
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
auto
monthCode
=
MonthCode
{
date
.
month
}
;
JSString
*
str
=
NewStringCopy
<
CanGC
>
(
cx
std
:
:
string_view
{
monthCode
}
)
;
if
(
!
str
)
{
return
false
;
}
result
.
setString
(
str
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
MonthCode
monthCode
;
if
(
!
CalendarDateMonthCode
(
cx
calendarId
dt
.
get
(
)
&
monthCode
)
)
{
return
false
;
}
auto
*
str
=
NewStringCopy
<
CanGC
>
(
cx
std
:
:
string_view
{
monthCode
}
)
;
if
(
!
str
)
{
return
false
;
}
result
.
setString
(
str
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDay
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
date
.
day
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
day
=
capi
:
:
ICU4XDate_day_of_month
(
dt
.
get
(
)
)
;
result
.
setInt32
(
day
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDayOfWeek
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
ToISODayOfWeek
(
date
)
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
static_assert
(
capi
:
:
ICU4XIsoWeekday_Monday
=
=
1
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Tuesday
=
=
2
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Wednesday
=
=
3
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Thursday
=
=
4
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Friday
=
=
5
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Saturday
=
=
6
)
;
static_assert
(
capi
:
:
ICU4XIsoWeekday_Sunday
=
=
7
)
;
capi
:
:
ICU4XIsoWeekday
day
=
capi
:
:
ICU4XDate_day_of_week
(
dt
.
get
(
)
)
;
result
.
setInt32
(
static_cast
<
int32_t
>
(
day
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDayOfYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
ToISODayOfYear
(
date
)
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
if
(
calendarId
=
=
CalendarId
:
:
Japanese
)
{
int32_t
year
;
if
(
!
CalendarDateYear
(
cx
calendarId
dt
.
get
(
)
&
year
)
)
{
return
false
;
}
auto
eraYear
=
CalendarEraYear
(
calendarId
year
)
;
int32_t
dayOfYear
=
capi
:
:
ICU4XDate_day_of_month
(
dt
.
get
(
)
)
;
int32_t
month
=
capi
:
:
ICU4XDate_ordinal_month
(
dt
.
get
(
)
)
;
while
(
month
>
1
)
{
auto
previousMonth
=
CreateDateFrom
(
cx
calendarId
cal
.
get
(
)
eraYear
-
-
month
1
TemporalOverflow
:
:
Reject
)
;
if
(
!
previousMonth
)
{
return
false
;
}
dayOfYear
+
=
capi
:
:
ICU4XDate_days_in_month
(
previousMonth
.
get
(
)
)
;
}
MOZ_ASSERT
(
dayOfYear
<
=
capi
:
:
ICU4XDate_days_in_year
(
dt
.
get
(
)
)
)
;
result
.
setInt32
(
dayOfYear
)
;
return
true
;
}
int32_t
day
=
capi
:
:
ICU4XDate_day_of_year
(
dt
.
get
(
)
)
;
result
.
setInt32
(
day
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarWeekOfYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
ToISOWeekOfYear
(
date
)
.
week
)
;
return
true
;
}
if
(
calendarId
!
=
CalendarId
:
:
Gregorian
)
{
result
.
setUndefined
(
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
auto
weekCal
=
CreateICU4WeekCalculator
(
cx
calendarId
)
;
if
(
!
weekCal
)
{
return
false
;
}
auto
week
=
capi
:
:
ICU4XDate_week_of_year
(
dt
.
get
(
)
weekCal
.
get
(
)
)
;
if
(
!
week
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
result
.
setInt32
(
week
.
ok
.
week
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarYearOfWeek
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
ToISOWeekOfYear
(
date
)
.
year
)
;
return
true
;
}
if
(
calendarId
!
=
CalendarId
:
:
Gregorian
)
{
result
.
setUndefined
(
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
auto
weekCal
=
CreateICU4WeekCalculator
(
cx
calendarId
)
;
if
(
!
weekCal
)
{
return
false
;
}
auto
week
=
capi
:
:
ICU4XDate_week_of_year
(
dt
.
get
(
)
weekCal
.
get
(
)
)
;
if
(
!
week
.
is_ok
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_CALENDAR_INTERNAL_ERROR
)
;
return
false
;
}
int32_t
relative
=
0
;
switch
(
week
.
ok
.
unit
)
{
case
capi
:
:
ICU4XWeekRelativeUnit_Previous
:
relative
=
-
1
;
break
;
case
capi
:
:
ICU4XWeekRelativeUnit_Current
:
relative
=
0
;
break
;
case
capi
:
:
ICU4XWeekRelativeUnit_Next
:
relative
=
1
;
break
;
}
int32_t
calendarYear
;
if
(
!
CalendarDateYear
(
cx
calendarId
dt
.
get
(
)
&
calendarYear
)
)
{
return
false
;
}
result
.
setInt32
(
calendarYear
+
relative
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDaysInWeek
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
result
.
setInt32
(
7
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDaysInMonth
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
:
:
ISODaysInMonth
(
date
.
year
date
.
month
)
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
days
=
capi
:
:
ICU4XDate_days_in_month
(
dt
.
get
(
)
)
;
result
.
setInt32
(
days
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDaysInYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
ISODaysInYear
(
date
.
year
)
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
days
=
capi
:
:
ICU4XDate_days_in_year
(
dt
.
get
(
)
)
;
result
.
setInt32
(
days
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarMonthsInYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setInt32
(
12
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
int32_t
months
=
capi
:
:
ICU4XDate_months_in_year
(
dt
.
get
(
)
)
;
result
.
setInt32
(
months
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarInLeapYear
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
MutableHandle
<
Value
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setBoolean
(
IsISOLeapYear
(
date
.
year
)
)
;
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
bool
inLeapYear
=
false
;
switch
(
calendarId
)
{
case
CalendarId
:
:
ISO8601
:
case
CalendarId
:
:
Buddhist
:
case
CalendarId
:
:
Gregorian
:
case
CalendarId
:
:
Japanese
:
case
CalendarId
:
:
Coptic
:
case
CalendarId
:
:
Ethiopian
:
case
CalendarId
:
:
EthiopianAmeteAlem
:
case
CalendarId
:
:
Indian
:
case
CalendarId
:
:
Persian
:
case
CalendarId
:
:
ROC
:
{
MOZ_ASSERT
(
!
CalendarHasLeapMonths
(
calendarId
)
)
;
int32_t
days
=
capi
:
:
ICU4XDate_days_in_year
(
dt
.
get
(
)
)
;
MOZ_ASSERT
(
days
=
=
365
|
|
days
=
=
366
)
;
inLeapYear
=
days
=
=
366
;
break
;
}
case
CalendarId
:
:
Islamic
:
case
CalendarId
:
:
IslamicCivil
:
case
CalendarId
:
:
IslamicRGSA
:
case
CalendarId
:
:
IslamicTabular
:
case
CalendarId
:
:
IslamicUmmAlQura
:
{
MOZ_ASSERT
(
!
CalendarHasLeapMonths
(
calendarId
)
)
;
int32_t
days
=
capi
:
:
ICU4XDate_days_in_year
(
dt
.
get
(
)
)
;
MOZ_ASSERT
(
days
=
=
353
|
|
days
=
=
354
|
|
days
=
=
355
)
;
inLeapYear
=
days
=
=
355
;
break
;
}
case
CalendarId
:
:
Chinese
:
case
CalendarId
:
:
Dangi
:
case
CalendarId
:
:
Hebrew
:
{
MOZ_ASSERT
(
CalendarHasLeapMonths
(
calendarId
)
)
;
int32_t
months
=
capi
:
:
ICU4XDate_months_in_year
(
dt
.
get
(
)
)
;
MOZ_ASSERT
(
months
=
=
12
|
|
months
=
=
13
)
;
inLeapYear
=
months
=
=
13
;
break
;
}
}
result
.
setBoolean
(
inLeapYear
)
;
return
true
;
}
enum
class
DateFieldType
{
Date
YearMonth
MonthDay
}
;
static
bool
ISODateToFields
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
DateFieldType
type
MutableHandle
<
CalendarFields
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
result
.
set
(
CalendarFields
{
}
)
;
if
(
calendarId
=
=
CalendarId
:
:
ISO8601
)
{
result
.
setMonthCode
(
MonthCode
{
date
.
month
}
)
;
if
(
type
=
=
DateFieldType
:
:
MonthDay
|
|
type
=
=
DateFieldType
:
:
Date
)
{
result
.
setDay
(
date
.
day
)
;
}
if
(
type
=
=
DateFieldType
:
:
YearMonth
|
|
type
=
=
DateFieldType
:
:
Date
)
{
result
.
setYear
(
date
.
year
)
;
}
return
true
;
}
auto
cal
=
CreateICU4XCalendar
(
cx
calendarId
)
;
if
(
!
cal
)
{
return
false
;
}
auto
dt
=
CreateICU4XDate
(
cx
date
cal
.
get
(
)
)
;
if
(
!
dt
)
{
return
false
;
}
MonthCode
monthCode
;
if
(
!
CalendarDateMonthCode
(
cx
calendarId
dt
.
get
(
)
&
monthCode
)
)
{
return
false
;
}
result
.
setMonthCode
(
monthCode
)
;
if
(
type
=
=
DateFieldType
:
:
MonthDay
|
|
type
=
=
DateFieldType
:
:
Date
)
{
int32_t
day
=
capi
:
:
ICU4XDate_day_of_month
(
dt
.
get
(
)
)
;
result
.
setDay
(
day
)
;
}
if
(
type
=
=
DateFieldType
:
:
YearMonth
|
|
type
=
=
DateFieldType
:
:
Date
)
{
int32_t
year
;
if
(
!
CalendarDateYear
(
cx
calendarId
dt
.
get
(
)
&
year
)
)
{
return
false
;
}
result
.
setYear
(
year
)
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
ISODateToFields
(
JSContext
*
cx
Handle
<
PlainDateWithCalendar
>
date
MutableHandle
<
CalendarFields
>
result
)
{
return
ISODateToFields
(
cx
date
.
calendar
(
)
date
DateFieldType
:
:
Date
result
)
;
}
bool
js
:
:
temporal
:
:
ISODateToFields
(
JSContext
*
cx
Handle
<
PlainDateTimeWithCalendar
>
dateTime
MutableHandle
<
CalendarFields
>
result
)
{
return
ISODateToFields
(
cx
dateTime
.
calendar
(
)
dateTime
.
date
(
)
DateFieldType
:
:
Date
result
)
;
}
bool
js
:
:
temporal
:
:
ISODateToFields
(
JSContext
*
cx
Handle
<
PlainMonthDayWithCalendar
>
monthDay
MutableHandle
<
CalendarFields
>
result
)
{
return
ISODateToFields
(
cx
monthDay
.
calendar
(
)
monthDay
.
date
(
)
DateFieldType
:
:
MonthDay
result
)
;
}
bool
js
:
:
temporal
:
:
ISODateToFields
(
JSContext
*
cx
Handle
<
PlainYearMonthWithCalendar
>
yearMonth
MutableHandle
<
CalendarFields
>
result
)
{
return
ISODateToFields
(
cx
yearMonth
.
calendar
(
)
yearMonth
.
date
(
)
DateFieldType
:
:
YearMonth
result
)
;
}
bool
js
:
:
temporal
:
:
CalendarDateFromFields
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
MutableHandle
<
PlainDateWithCalendar
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
!
CalendarResolveFields
(
cx
calendarId
fields
FieldType
:
:
Date
)
)
{
return
false
;
}
PlainDate
date
;
if
(
!
CalendarDateToISO
(
cx
calendarId
fields
overflow
&
date
)
)
{
return
false
;
}
return
CreateTemporalDate
(
cx
date
calendar
result
)
;
}
bool
js
:
:
temporal
:
:
CalendarYearMonthFromFields
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
MutableHandle
<
PlainYearMonthWithCalendar
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
!
CalendarResolveFields
(
cx
calendarId
fields
FieldType
:
:
YearMonth
)
)
{
return
false
;
}
int32_t
firstDayIndex
=
1
;
Rooted
<
CalendarFields
>
resolvedFields
(
cx
CalendarFields
{
fields
}
)
;
resolvedFields
.
setDay
(
firstDayIndex
)
;
PlainDate
date
;
if
(
!
CalendarDateToISO
(
cx
calendarId
resolvedFields
overflow
&
date
)
)
{
return
false
;
}
return
CreateTemporalYearMonth
(
cx
date
calendar
result
)
;
}
bool
js
:
:
temporal
:
:
CalendarMonthDayFromFields
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
Handle
<
CalendarFields
>
fields
TemporalOverflow
overflow
MutableHandle
<
PlainMonthDayWithCalendar
>
result
)
{
auto
calendarId
=
calendar
.
identifier
(
)
;
if
(
!
CalendarResolveFields
(
cx
calendarId
fields
FieldType
:
:
MonthDay
)
)
{
return
false
;
}
PlainDate
date
;
if
(
!
CalendarMonthDayToISOReferenceDate
(
cx
calendarId
fields
overflow
&
date
)
)
{
return
false
;
}
return
CreateTemporalMonthDay
(
cx
date
calendar
result
)
;
}
bool
js
:
:
temporal
:
:
CalendarDateAdd
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
date
const
DateDuration
&
duration
TemporalOverflow
overflow
PlainDate
*
result
)
{
MOZ_ASSERT
(
IsValidISODate
(
date
)
)
;
MOZ_ASSERT
(
IsValidDuration
(
duration
)
)
;
if
(
!
AddISODate
(
cx
date
duration
overflow
result
)
)
{
return
false
;
}
if
(
!
ISODateWithinLimits
(
*
result
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_INVALID
)
;
return
false
;
}
return
true
;
}
bool
js
:
:
temporal
:
:
CalendarDateUntil
(
JSContext
*
cx
Handle
<
CalendarValue
>
calendar
const
PlainDate
&
one
const
PlainDate
&
two
TemporalUnit
largestUnit
DateDuration
*
result
)
{
MOZ_ASSERT
(
largestUnit
<
=
TemporalUnit
:
:
Day
)
;
*
result
=
DifferenceISODate
(
one
two
largestUnit
)
;
return
true
;
}
