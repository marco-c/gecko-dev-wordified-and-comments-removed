#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
iterator
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
string_view
>
#
include
<
utility
>
#
include
"
jsfriendapi
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
ObjectOperations
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
bool
js
:
:
temporal
:
:
ToPositiveIntegerWithTruncation
(
JSContext
*
cx
Handle
<
Value
>
value
const
char
*
name
double
*
result
)
{
double
number
;
if
(
!
ToIntegerWithTruncation
(
cx
value
name
&
number
)
)
{
return
false
;
}
if
(
number
<
=
0
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_NUMBER
name
)
;
return
false
;
}
*
result
=
number
;
return
true
;
}
bool
js
:
:
temporal
:
:
ToIntegerWithTruncation
(
JSContext
*
cx
Handle
<
Value
>
value
const
char
*
name
double
*
result
)
{
double
number
;
if
(
!
JS
:
:
ToNumber
(
cx
value
&
number
)
)
{
return
false
;
}
if
(
!
std
:
:
isfinite
(
number
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_INTEGER
name
)
;
return
false
;
}
*
result
=
std
:
:
trunc
(
number
)
+
(
+
0
.
0
)
;
return
true
;
}
static
JSObject
*
CreateTemporalObject
(
JSContext
*
cx
JSProtoKey
key
)
{
RootedObject
proto
(
cx
&
cx
-
>
global
(
)
-
>
getObjectPrototype
(
)
)
;
return
NewTenuredObjectWithGivenProto
<
TemporalObject
>
(
cx
proto
)
;
}
static
bool
TemporalClassFinish
(
JSContext
*
cx
Handle
<
JSObject
*
>
temporal
Handle
<
JSObject
*
>
proto
)
{
Rooted
<
PropertyKey
>
ctorId
(
cx
)
;
Rooted
<
Value
>
ctorValue
(
cx
)
;
auto
defineProperty
=
[
&
]
(
JSProtoKey
protoKey
Handle
<
PropertyName
*
>
name
)
{
JSObject
*
ctor
=
GlobalObject
:
:
getOrCreateConstructor
(
cx
protoKey
)
;
if
(
!
ctor
)
{
return
false
;
}
ctorId
=
NameToId
(
name
)
;
ctorValue
.
setObject
(
*
ctor
)
;
return
DefineDataProperty
(
cx
temporal
ctorId
ctorValue
0
)
;
}
;
for
(
const
auto
&
protoKey
:
{
JSProto_Calendar
JSProto_Duration
JSProto_Instant
JSProto_PlainDate
JSProto_PlainDateTime
JSProto_PlainMonthDay
JSProto_PlainTime
JSProto_PlainYearMonth
JSProto_TimeZone
JSProto_ZonedDateTime
}
)
{
if
(
!
defineProperty
(
protoKey
ClassName
(
protoKey
cx
)
)
)
{
return
false
;
}
}
if
(
!
defineProperty
(
JSProto_TemporalNow
cx
-
>
names
(
)
.
Now
)
)
{
return
false
;
}
return
true
;
}
const
JSClass
TemporalObject
:
:
class_
=
{
"
Temporal
"
JSCLASS_HAS_CACHED_PROTO
(
JSProto_Temporal
)
JS_NULL_CLASS_OPS
&
TemporalObject
:
:
classSpec_
}
;
static
const
JSPropertySpec
Temporal_properties
[
]
=
{
JS_PS_END
}
;
const
ClassSpec
TemporalObject
:
:
classSpec_
=
{
CreateTemporalObject
nullptr
nullptr
Temporal_properties
nullptr
nullptr
TemporalClassFinish
}
;
