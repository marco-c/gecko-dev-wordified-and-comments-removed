#
ifndef
builtin_temporal_Temporal_h
#
define
builtin_temporal_Temporal_h
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
struct
ClassSpec
;
class
PlainObject
;
class
PropertyName
;
}
namespace
js
:
:
temporal
{
class
TemporalObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
private
:
static
const
ClassSpec
classSpec_
;
}
;
enum
class
CalendarOption
{
Auto
Always
Never
Critical
}
;
bool
ToCalendarNameOption
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
options
CalendarOption
*
result
)
;
bool
ToPositiveIntegerWithTruncation
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
value
const
char
*
name
double
*
result
)
;
bool
ToIntegerWithTruncation
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
value
const
char
*
name
double
*
result
)
;
bool
GetMethod
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
object
JS
:
:
Handle
<
PropertyName
*
>
name
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
GetMethodForCall
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
object
JS
:
:
Handle
<
PropertyName
*
>
name
JS
:
:
MutableHandle
<
JS
:
:
Value
>
result
)
;
bool
CopyDataProperties
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
target
JS
:
:
Handle
<
JSObject
*
>
source
)
;
bool
CopyDataPropertiesIgnoreUndefined
(
JSContext
*
cx
JS
:
:
Handle
<
PlainObject
*
>
target
JS
:
:
Handle
<
JSObject
*
>
source
)
;
}
#
endif
