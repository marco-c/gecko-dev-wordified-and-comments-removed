#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
FormatBuffer
.
h
"
#
include
"
builtin
/
intl
/
SharedIntlData
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Duration
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
Wrapped
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCContext
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PIC
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
static
inline
bool
IsTimeZone
(
Handle
<
Value
>
v
)
{
return
v
.
isObject
(
)
&
&
v
.
toObject
(
)
.
is
<
TimeZoneObject
>
(
)
;
}
static
mozilla
:
:
UniquePtr
<
mozilla
:
:
intl
:
:
TimeZone
>
CreateIntlTimeZone
(
JSContext
*
cx
JSString
*
identifier
)
{
JS
:
:
AutoStableStringChars
stableChars
(
cx
)
;
if
(
!
stableChars
.
initTwoByte
(
cx
identifier
)
)
{
return
nullptr
;
}
auto
result
=
mozilla
:
:
intl
:
:
TimeZone
:
:
TryCreate
(
mozilla
:
:
Some
(
stableChars
.
twoByteRange
(
)
)
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
return
result
.
unwrap
(
)
;
}
static
mozilla
:
:
intl
:
:
TimeZone
*
GetOrCreateIntlTimeZone
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
)
{
if
(
auto
*
tz
=
timeZone
-
>
getTimeZone
(
)
)
{
return
tz
;
}
auto
*
tz
=
CreateIntlTimeZone
(
cx
timeZone
-
>
identifier
(
)
)
.
release
(
)
;
if
(
!
tz
)
{
return
nullptr
;
}
timeZone
-
>
setTimeZone
(
tz
)
;
intl
:
:
AddICUCellMemory
(
timeZone
TimeZoneObject
:
:
EstimatedMemoryUse
)
;
return
tz
;
}
bool
js
:
:
temporal
:
:
IsValidTimeZoneName
(
JSContext
*
cx
Handle
<
JSString
*
>
timeZone
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
if
(
!
sharedIntlData
.
validateTimeZoneName
(
cx
timeZone
validatedTimeZone
)
)
{
return
false
;
}
if
(
validatedTimeZone
)
{
cx
-
>
markAtom
(
validatedTimeZone
)
;
}
return
true
;
}
JSString
*
js
:
:
temporal
:
:
CanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
timeZone
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
timeZone
"
Etc
/
Unknown
"
)
"
Invalid
time
zone
"
)
;
Rooted
<
JSAtom
*
>
checkTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
timeZone
checkTimeZone
)
"
Time
zone
name
not
normalized
"
)
;
#
endif
Rooted
<
JSLinearString
*
>
ianaTimeZone
(
cx
)
;
do
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
Rooted
<
JSAtom
*
>
canonicalTimeZone
(
cx
)
;
if
(
!
sharedIntlData
.
tryCanonicalizeTimeZoneConsistentWithIANA
(
cx
timeZone
&
canonicalTimeZone
)
)
{
return
nullptr
;
}
if
(
canonicalTimeZone
)
{
cx
-
>
markAtom
(
canonicalTimeZone
)
;
ianaTimeZone
=
canonicalTimeZone
;
break
;
}
JS
:
:
AutoStableStringChars
stableChars
(
cx
)
;
if
(
!
stableChars
.
initTwoByte
(
cx
timeZone
)
)
{
return
nullptr
;
}
intl
:
:
FormatBuffer
<
char16_t
intl
:
:
INITIAL_CHAR_BUFFER_SIZE
>
buffer
(
cx
)
;
auto
result
=
mozilla
:
:
intl
:
:
TimeZone
:
:
GetCanonicalTimeZoneID
(
stableChars
.
twoByteRange
(
)
buffer
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
ianaTimeZone
=
buffer
.
toString
(
cx
)
;
if
(
!
ianaTimeZone
)
{
return
nullptr
;
}
}
while
(
false
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
Unknown
"
)
"
Invalid
canonical
time
zone
"
)
;
if
(
!
IsValidTimeZoneName
(
cx
ianaTimeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
ianaTimeZone
checkTimeZone
)
"
Unsupported
canonical
time
zone
"
)
;
#
endif
if
(
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
UTC
"
)
|
|
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
GMT
"
)
)
{
return
cx
-
>
names
(
)
.
UTC
;
}
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
GMT
"
)
)
;
return
ianaTimeZone
;
}
JSString
*
js
:
:
temporal
:
:
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSString
*
>
timeZone
)
{
Rooted
<
JSAtom
*
>
validatedTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
validatedTimeZone
)
)
{
return
nullptr
;
}
if
(
!
validatedTimeZone
)
{
if
(
auto
chars
=
QuoteString
(
cx
timeZone
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INVALID_IDENTIFIER
chars
.
get
(
)
)
;
}
return
nullptr
;
}
return
CanonicalizeTimeZoneName
(
cx
validatedTimeZone
)
;
}
static
bool
TimeZone_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
JSString
*
js
:
:
temporal
:
:
TimeZoneToString
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
)
{
if
(
timeZone
-
>
is
<
TimeZoneObject
>
(
)
&
&
HasNoToPrimitiveMethodPure
(
timeZone
cx
)
&
&
HasNativeMethodPure
(
timeZone
cx
-
>
names
(
)
.
toString
TimeZone_toString
cx
)
)
{
JSString
*
id
=
timeZone
-
>
as
<
TimeZoneObject
>
(
)
.
identifier
(
)
;
MOZ_ASSERT
(
id
)
;
return
id
;
}
Rooted
<
Value
>
timeZoneValue
(
cx
ObjectValue
(
*
timeZone
)
)
;
return
JS
:
:
ToString
(
cx
timeZoneValue
)
;
}
class
EpochInstantList
final
{
static
constexpr
size_t
MaxLength
=
2
;
mozilla
:
:
Array
<
Instant
MaxLength
>
array_
=
{
}
;
size_t
length_
=
0
;
public
:
EpochInstantList
(
)
=
default
;
size_t
length
(
)
const
{
return
length_
;
}
void
append
(
const
Instant
&
instant
)
{
array_
[
length_
+
+
]
=
instant
;
}
auto
&
operator
[
]
(
size_t
i
)
{
return
array_
[
i
]
;
}
const
auto
&
operator
[
]
(
size_t
i
)
const
{
return
array_
[
i
]
;
}
auto
begin
(
)
const
{
return
array_
.
begin
(
)
;
}
auto
end
(
)
const
{
return
array_
.
begin
(
)
+
length_
;
}
}
;
static
bool
GetNamedTimeZoneEpochNanoseconds
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
PlainDateTime
&
dateTime
EpochInstantList
&
instants
)
{
MOZ_ASSERT
(
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
MOZ_ASSERT
(
instants
.
length
(
)
=
=
0
)
;
int64_t
ms
=
MakeDate
(
dateTime
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
getOffset
=
[
&
]
(
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
skippedTime
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
repeatedTime
int32_t
*
offset
)
{
auto
result
=
tz
-
>
GetUTCOffsetMs
(
ms
skippedTime
repeatedTime
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
false
;
}
*
offset
=
result
.
unwrap
(
)
;
MOZ_ASSERT
(
std
:
:
abs
(
*
offset
)
<
UnitsPerDay
(
TemporalUnit
:
:
Millisecond
)
)
;
return
true
;
}
;
constexpr
auto
formerTime
=
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
:
:
Former
;
constexpr
auto
latterTime
=
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
:
:
Latter
;
int32_t
formerOffset
;
if
(
!
getOffset
(
formerTime
formerTime
&
formerOffset
)
)
{
return
false
;
}
int32_t
latterOffset
;
if
(
!
getOffset
(
latterTime
latterTime
&
latterOffset
)
)
{
return
false
;
}
if
(
formerOffset
=
=
latterOffset
)
{
auto
epochInstant
=
GetUTCEpochNanoseconds
(
dateTime
)
-
InstantSpan
:
:
fromMilliseconds
(
formerOffset
)
;
instants
.
append
(
epochInstant
)
;
return
true
;
}
int32_t
disambiguationOffset
;
if
(
!
getOffset
(
formerTime
latterTime
&
disambiguationOffset
)
)
{
return
false
;
}
if
(
disambiguationOffset
=
=
formerOffset
)
{
return
true
;
}
for
(
auto
offset
:
{
formerOffset
latterOffset
}
)
{
auto
epochInstant
=
GetUTCEpochNanoseconds
(
dateTime
)
-
InstantSpan
:
:
fromMilliseconds
(
offset
)
;
instants
.
append
(
epochInstant
)
;
}
MOZ_ASSERT
(
instants
.
length
(
)
=
=
2
)
;
if
(
instants
[
0
]
>
instants
[
1
]
)
{
std
:
:
swap
(
instants
[
0
]
instants
[
1
]
)
;
}
return
true
;
}
static
bool
GetNamedTimeZoneOffsetNanoseconds
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
Instant
&
epochInstant
int64_t
*
offset
)
{
MOZ_ASSERT
(
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
;
int64_t
millis
=
epochInstant
.
floorToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
result
=
tz
-
>
GetOffsetMs
(
millis
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
false
;
}
int64_t
nanoPerMs
=
1
'
000
'
000
;
*
offset
=
result
.
unwrap
(
)
*
nanoPerMs
;
return
true
;
}
static
bool
GetNamedTimeZoneNextTransition
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
{
MOZ_ASSERT
(
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
;
int64_t
millis
=
epochInstant
.
floorToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
next
=
tz
-
>
GetNextTransition
(
millis
)
;
if
(
next
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
next
.
unwrapErr
(
)
)
;
return
false
;
}
auto
transition
=
next
.
unwrap
(
)
;
if
(
!
transition
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
auto
transitionInstant
=
Instant
:
:
fromMilliseconds
(
*
transition
)
;
if
(
!
IsValidEpochInstant
(
transitionInstant
)
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
*
result
=
mozilla
:
:
Some
(
transitionInstant
)
;
return
true
;
}
static
bool
GetNamedTimeZonePreviousTransition
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
{
MOZ_ASSERT
(
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
;
int64_t
millis
=
epochInstant
.
ceilToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
previous
=
tz
-
>
GetPreviousTransition
(
millis
)
;
if
(
previous
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
previous
.
unwrapErr
(
)
)
;
return
false
;
}
auto
transition
=
previous
.
unwrap
(
)
;
if
(
!
transition
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
auto
transitionInstant
=
Instant
:
:
fromMilliseconds
(
*
transition
)
;
if
(
!
IsValidEpochInstant
(
transitionInstant
)
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
*
result
=
mozilla
:
:
Some
(
transitionInstant
)
;
return
true
;
}
JSString
*
js
:
:
temporal
:
:
FormatTimeZoneOffsetString
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
char
sign
=
offsetNanoseconds
>
=
0
?
'
+
'
:
'
-
'
;
offsetNanoseconds
=
std
:
:
abs
(
offsetNanoseconds
)
;
int32_t
nanoseconds
=
int32_t
(
offsetNanoseconds
%
1
'
000
'
000
'
000
)
;
int32_t
quotient
=
int32_t
(
offsetNanoseconds
/
1
'
000
'
000
'
000
)
;
int32_t
seconds
=
quotient
%
60
;
quotient
/
=
60
;
int32_t
minutes
=
quotient
%
60
;
int32_t
hours
=
quotient
/
60
;
MOZ_ASSERT
(
hours
<
24
"
time
zone
offset
mustn
'
t
exceed
24
-
hours
"
)
;
constexpr
size_t
maxLength
=
1
+
2
+
1
+
2
+
1
+
2
+
1
+
9
;
char
result
[
maxLength
]
;
size_t
n
=
0
;
result
[
n
+
+
]
=
sign
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
%
10
)
;
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
%
10
)
;
if
(
seconds
!
=
0
|
|
nanoseconds
!
=
0
)
{
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
'
0
'
+
(
seconds
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
seconds
%
10
)
;
if
(
uint32_t
fractional
=
nanoseconds
)
{
result
[
n
+
+
]
=
'
.
'
;
uint32_t
k
=
100
'
000
'
000
;
do
{
result
[
n
+
+
]
=
'
0
'
+
(
fractional
/
k
)
;
fractional
%
=
k
;
k
/
=
10
;
}
while
(
fractional
)
;
}
}
MOZ_ASSERT
(
n
<
=
maxLength
)
;
return
NewStringCopyN
<
CanGC
>
(
cx
result
n
)
;
}
static
int32_t
RoundNanosecondsToMinutes
(
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
constexpr
int64_t
increment
=
ToNanoseconds
(
TemporalUnit
:
:
Minute
)
;
int64_t
quotient
=
offsetNanoseconds
/
increment
;
int64_t
remainder
=
offsetNanoseconds
%
increment
;
if
(
std
:
:
abs
(
remainder
*
2
)
>
=
increment
)
{
quotient
+
=
(
offsetNanoseconds
>
0
?
1
:
-
1
)
;
}
return
quotient
;
}
JSString
*
js
:
:
temporal
:
:
FormatISOTimeZoneOffsetString
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int32_t
offsetMinutes
=
RoundNanosecondsToMinutes
(
offsetNanoseconds
)
;
int32_t
sign
=
offsetMinutes
<
0
?
-
1
:
1
;
auto
hm
=
std
:
:
div
(
std
:
:
abs
(
offsetMinutes
)
60
)
;
int32_t
hours
=
hm
.
quot
;
int32_t
minutes
=
hm
.
rem
;
MOZ_ASSERT
(
hours
<
24
"
time
zone
offset
mustn
'
t
exceed
24
-
hours
"
)
;
constexpr
size_t
maxLength
=
1
+
2
+
1
+
2
;
char
result
[
maxLength
]
;
size_t
n
=
0
;
result
[
n
+
+
]
=
sign
<
0
?
'
-
'
:
'
+
'
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
%
10
)
;
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
%
10
)
;
MOZ_ASSERT
(
n
=
=
maxLength
)
;
return
NewStringCopyN
<
CanGC
>
(
cx
result
n
)
;
}
static
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
const
CallArgs
&
args
Handle
<
JSString
*
>
identifier
Handle
<
Value
>
offsetNanoseconds
)
{
MOZ_ASSERT
(
offsetNanoseconds
.
isUndefined
(
)
|
|
offsetNanoseconds
.
isNumber
(
)
)
;
MOZ_ASSERT_IF
(
offsetNanoseconds
.
isNumber
(
)
std
:
:
abs
(
offsetNanoseconds
.
toNumber
(
)
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_TimeZone
&
proto
)
)
{
return
nullptr
;
}
auto
*
timeZone
=
NewObjectWithClassProto
<
TimeZoneObject
>
(
cx
proto
)
;
if
(
!
timeZone
)
{
return
nullptr
;
}
timeZone
-
>
setFixedSlot
(
TimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
timeZone
-
>
setFixedSlot
(
TimeZoneObject
:
:
OFFSET_NANOSECONDS_SLOT
offsetNanoseconds
)
;
return
timeZone
;
}
static
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSString
*
>
identifier
)
{
auto
*
object
=
NewBuiltinClassInstance
<
TimeZoneObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
OFFSET_NANOSECONDS_SLOT
UndefinedValue
(
)
)
;
return
object
;
}
static
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Rooted
<
JSString
*
>
identifier
(
cx
FormatTimeZoneOffsetString
(
cx
offsetNanoseconds
)
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
auto
*
object
=
NewBuiltinClassInstance
<
TimeZoneObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
OFFSET_NANOSECONDS_SLOT
NumberValue
(
offsetNanoseconds
)
)
;
return
object
;
}
TimeZoneObject
*
js
:
:
temporal
:
:
CreateTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSString
*
>
identifier
)
{
return
:
:
CreateTemporalTimeZone
(
cx
identifier
)
;
}
TimeZoneObject
*
js
:
:
temporal
:
:
CreateTemporalTimeZoneUTC
(
JSContext
*
cx
)
{
Handle
<
JSString
*
>
identifier
=
cx
-
>
names
(
)
.
UTC
.
toHandle
(
)
;
return
:
:
CreateTemporalTimeZone
(
cx
identifier
)
;
}
TimeZoneObject
*
js
:
:
temporal
:
:
ToTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSString
*
>
string
)
{
Rooted
<
JSString
*
>
timeZoneName
(
cx
)
;
int64_t
offsetNanoseconds
=
0
;
if
(
!
ParseTemporalTimeZoneString
(
cx
string
&
timeZoneName
&
offsetNanoseconds
)
)
{
return
nullptr
;
}
if
(
timeZoneName
)
{
timeZoneName
=
ValidateAndCanonicalizeTimeZoneName
(
cx
timeZoneName
)
;
if
(
!
timeZoneName
)
{
return
nullptr
;
}
return
:
:
CreateTemporalTimeZone
(
cx
timeZoneName
)
;
}
return
:
:
CreateTemporalTimeZone
(
cx
offsetNanoseconds
)
;
}
JSObject
*
js
:
:
temporal
:
:
ToTemporalTimeZone
(
JSContext
*
cx
Handle
<
Value
>
temporalTimeZoneLike
)
{
Rooted
<
Value
>
timeZoneLike
(
cx
temporalTimeZoneLike
)
;
if
(
timeZoneLike
.
isObject
(
)
)
{
Rooted
<
JSObject
*
>
obj
(
cx
&
timeZoneLike
.
toObject
(
)
)
;
if
(
obj
-
>
canUnwrapAs
<
TimeZoneObject
>
(
)
)
{
return
obj
;
}
if
(
auto
*
zonedDateTime
=
obj
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
Rooted
<
JSObject
*
>
timeZone
(
cx
zonedDateTime
-
>
timeZone
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
timeZone
)
)
{
return
nullptr
;
}
return
timeZone
;
}
if
(
obj
-
>
canUnwrapAs
<
CalendarObject
>
(
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_OBJECT
"
Temporal
.
TimeZone
"
"
Temporal
.
Calendar
"
)
;
return
nullptr
;
}
bool
hasTimeZone
;
if
(
!
HasProperty
(
cx
obj
cx
-
>
names
(
)
.
timeZone
&
hasTimeZone
)
)
{
return
nullptr
;
}
if
(
!
hasTimeZone
)
{
return
obj
;
}
if
(
!
GetProperty
(
cx
obj
obj
cx
-
>
names
(
)
.
timeZone
&
timeZoneLike
)
)
{
return
nullptr
;
}
if
(
timeZoneLike
.
isObject
(
)
)
{
obj
=
&
timeZoneLike
.
toObject
(
)
;
if
(
obj
-
>
canUnwrapAs
<
CalendarObject
>
(
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INVALID_OBJECT
"
Temporal
.
TimeZone
"
"
Temporal
.
Calendar
"
)
;
return
nullptr
;
}
if
(
!
HasProperty
(
cx
obj
cx
-
>
names
(
)
.
timeZone
&
hasTimeZone
)
)
{
return
nullptr
;
}
if
(
!
hasTimeZone
)
{
return
obj
;
}
}
}
Rooted
<
JSString
*
>
identifier
(
cx
JS
:
:
ToString
(
cx
timeZoneLike
)
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
if
(
!
timeZoneLike
.
isString
(
)
&
&
!
timeZoneLike
.
isObject
(
)
&
&
!
timeZoneLike
.
isNumeric
(
)
)
{
ReportValueError
(
cx
JSMSG_TEMPORAL_TIMEZONE_PARSE_BAD_TYPE
JSDVG_IGNORE_STACK
timeZoneLike
nullptr
)
;
return
nullptr
;
}
return
ToTemporalTimeZone
(
cx
identifier
)
;
}
static
bool
BuiltinGetOffsetNanosecondsFor
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
{
if
(
timeZone
-
>
offsetNanoseconds
(
)
.
isNumber
(
)
)
{
double
offset
=
timeZone
-
>
offsetNanoseconds
(
)
.
toNumber
(
)
;
MOZ_ASSERT
(
IsInteger
(
offset
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
offset
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
*
offsetNanoseconds
=
int64_t
(
offset
)
;
return
true
;
}
MOZ_ASSERT
(
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
;
int64_t
offset
;
if
(
!
GetNamedTimeZoneOffsetNanoseconds
(
cx
timeZone
instant
&
offset
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offset
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
*
offsetNanoseconds
=
offset
;
return
true
;
}
static
bool
GetOffsetNanosecondsFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
Handle
<
Value
>
getOffsetNanosecondsFor
int64_t
*
offsetNanoseconds
)
{
Rooted
<
Value
>
instantVal
(
cx
ObjectValue
(
*
instant
)
)
;
Rooted
<
Value
>
rval
(
cx
)
;
if
(
!
Call
(
cx
getOffsetNanosecondsFor
timeZone
instantVal
&
rval
)
)
{
return
false
;
}
if
(
!
rval
.
isNumber
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
rval
nullptr
"
not
a
number
"
)
;
return
false
;
}
double
num
=
rval
.
toNumber
(
)
;
if
(
!
IsInteger
(
num
)
|
|
std
:
:
abs
(
num
)
>
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
{
ToCStringBuf
cbuf
;
const
char
*
numStr
=
NumberToCString
(
&
cbuf
num
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_NANOS_RANGE
numStr
)
;
return
false
;
}
*
offsetNanoseconds
=
int64_t
(
num
)
;
return
true
;
}
static
bool
TimeZone_getOffsetNanosecondsFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
bool
js
:
:
temporal
:
:
GetOffsetNanosecondsFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
int64_t
*
offsetNanoseconds
)
{
Rooted
<
Value
>
getOffsetNanosecondsFor
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
timeZone
cx
-
>
names
(
)
.
getOffsetNanosecondsFor
&
getOffsetNanosecondsFor
)
)
{
return
false
;
}
if
(
timeZone
-
>
is
<
TimeZoneObject
>
(
)
&
&
IsNativeFunction
(
getOffsetNanosecondsFor
TimeZone_getOffsetNanosecondsFor
)
)
{
auto
*
unwrapped
=
instant
.
unwrap
(
cx
)
;
if
(
!
unwrapped
)
{
return
false
;
}
return
BuiltinGetOffsetNanosecondsFor
(
cx
timeZone
.
as
<
TimeZoneObject
>
(
)
ToInstant
(
unwrapped
)
offsetNanoseconds
)
;
}
return
:
:
GetOffsetNanosecondsFor
(
cx
timeZone
instant
getOffsetNanosecondsFor
offsetNanoseconds
)
;
}
bool
js
:
:
temporal
:
:
GetOffsetNanosecondsFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
{
Rooted
<
Value
>
getOffsetNanosecondsFor
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
timeZone
cx
-
>
names
(
)
.
getOffsetNanosecondsFor
&
getOffsetNanosecondsFor
)
)
{
return
false
;
}
if
(
timeZone
-
>
is
<
TimeZoneObject
>
(
)
&
&
IsNativeFunction
(
getOffsetNanosecondsFor
TimeZone_getOffsetNanosecondsFor
)
)
{
return
BuiltinGetOffsetNanosecondsFor
(
cx
timeZone
.
as
<
TimeZoneObject
>
(
)
instant
offsetNanoseconds
)
;
}
Rooted
<
InstantObject
*
>
obj
(
cx
CreateTemporalInstant
(
cx
instant
)
)
;
if
(
!
obj
)
{
return
false
;
}
return
:
:
GetOffsetNanosecondsFor
(
cx
timeZone
obj
getOffsetNanosecondsFor
offsetNanoseconds
)
;
}
JSString
*
js
:
:
temporal
:
:
GetOffsetStringFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
)
{
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offsetNanoseconds
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
return
FormatTimeZoneOffsetString
(
cx
offsetNanoseconds
)
;
}
static
inline
double
PositiveModulo
(
double
dividend
double
divisor
)
{
MOZ_ASSERT
(
divisor
>
0
)
;
MOZ_ASSERT
(
std
:
:
isfinite
(
divisor
)
)
;
double
result
=
std
:
:
fmod
(
dividend
divisor
)
;
if
(
result
<
0
)
{
result
+
=
divisor
;
}
return
result
+
(
+
0
.
0
)
;
}
static
double
HourFromTime
(
double
t
)
{
return
PositiveModulo
(
std
:
:
floor
(
t
/
msPerHour
)
HoursPerDay
)
;
}
static
double
MinFromTime
(
double
t
)
{
return
PositiveModulo
(
std
:
:
floor
(
t
/
msPerMinute
)
MinutesPerHour
)
;
}
static
double
SecFromTime
(
double
t
)
{
return
PositiveModulo
(
std
:
:
floor
(
t
/
msPerSecond
)
SecondsPerMinute
)
;
}
static
double
msFromTime
(
double
t
)
{
return
PositiveModulo
(
t
msPerSecond
)
;
}
static
PlainDateTime
GetISOPartsFromEpoch
(
const
Instant
&
instant
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
int32_t
remainderNs
=
instant
.
nanoseconds
%
1
'
000
'
000
;
int64_t
epochMilliseconds
=
instant
.
floorToMilliseconds
(
)
;
int32_t
year
=
JS
:
:
YearFromTime
(
epochMilliseconds
)
;
int32_t
month
=
JS
:
:
MonthFromTime
(
epochMilliseconds
)
+
1
;
int32_t
day
=
JS
:
:
DayFromTime
(
epochMilliseconds
)
;
int32_t
hour
=
HourFromTime
(
epochMilliseconds
)
;
int32_t
minute
=
MinFromTime
(
epochMilliseconds
)
;
int32_t
second
=
SecFromTime
(
epochMilliseconds
)
;
int32_t
millisecond
=
msFromTime
(
epochMilliseconds
)
;
int32_t
microsecond
=
remainderNs
/
1000
;
int32_t
nanosecond
=
remainderNs
%
1000
;
PlainDateTime
result
=
{
{
year
month
day
}
{
hour
minute
second
millisecond
microsecond
nanosecond
}
}
;
MOZ_ASSERT
(
IsValidISODateTime
(
result
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
result
)
)
;
return
result
;
}
static
PlainDateTime
BalanceISODateTime
(
const
PlainDateTime
&
dateTime
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
&
[
date
time
]
=
dateTime
;
auto
balancedTime
=
BalanceTime
(
time
nanoseconds
)
;
MOZ_ASSERT
(
-
1
<
=
balancedTime
.
days
&
&
balancedTime
.
days
<
=
1
)
;
auto
balancedDate
=
BalanceISODate
(
date
.
year
date
.
month
date
.
day
+
balancedTime
.
days
)
;
return
{
balancedDate
balancedTime
.
time
}
;
}
static
bool
GetPlainDateTimeFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
PlainDateTime
*
result
)
{
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offsetNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
*
unwrappedInstant
=
instant
.
unwrap
(
cx
)
;
if
(
!
unwrappedInstant
)
{
return
false
;
}
PlainDateTime
dateTime
=
GetISOPartsFromEpoch
(
ToInstant
(
unwrappedInstant
)
)
;
auto
balanced
=
BalanceISODateTime
(
dateTime
offsetNanoseconds
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
balanced
)
)
;
*
result
=
balanced
;
return
true
;
}
static
PlainDateTimeObject
*
GetPlainDateTimeFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
InstantObject
*
>
>
instant
Handle
<
CalendarValue
>
calendar
)
{
PlainDateTime
dateTime
;
if
(
!
GetPlainDateTimeFor
(
cx
timeZone
instant
&
dateTime
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
return
CreateTemporalDateTime
(
cx
dateTime
calendar
)
;
}
PlainDateTimeObject
*
js
:
:
temporal
:
:
GetPlainDateTimeFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
const
Instant
&
instant
Handle
<
CalendarValue
>
calendar
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
Rooted
<
InstantObject
*
>
obj
(
cx
CreateTemporalInstant
(
cx
instant
)
)
;
if
(
!
obj
)
{
return
nullptr
;
}
return
:
:
GetPlainDateTimeFor
(
cx
timeZone
obj
calendar
)
;
}
bool
js
:
:
temporal
:
:
GetPlainDateTimeFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
InstantObject
*
>
instant
PlainDateTime
*
result
)
{
return
:
:
GetPlainDateTimeFor
(
cx
timeZone
instant
result
)
;
}
bool
js
:
:
temporal
:
:
GetPlainDateTimeFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
Rooted
<
InstantObject
*
>
obj
(
cx
CreateTemporalInstant
(
cx
instant
)
)
;
if
(
!
obj
)
{
return
false
;
}
return
:
:
GetPlainDateTimeFor
(
cx
timeZone
obj
result
)
;
}
static
bool
BuiltinGetPossibleInstantsFor
(
JSContext
*
cx
Handle
<
TimeZoneObject
*
>
timeZone
const
PlainDateTime
&
dateTime
EpochInstantList
&
possibleInstants
)
{
MOZ_ASSERT
(
possibleInstants
.
length
(
)
=
=
0
)
;
if
(
timeZone
-
>
offsetNanoseconds
(
)
.
isNumber
(
)
)
{
double
offsetNs
=
timeZone
-
>
offsetNanoseconds
(
)
.
toNumber
(
)
;
MOZ_ASSERT
(
IsInteger
(
offsetNs
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
offsetNs
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
epochInstant
=
GetUTCEpochNanoseconds
(
dateTime
)
;
possibleInstants
.
append
(
epochInstant
-
InstantSpan
:
:
fromNanoseconds
(
offsetNs
)
)
;
}
else
{
if
(
!
GetNamedTimeZoneEpochNanoseconds
(
cx
timeZone
dateTime
possibleInstants
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
possibleInstants
.
length
(
)
<
=
2
)
;
for
(
const
auto
&
epochInstant
:
possibleInstants
)
{
if
(
!
IsValidEpochInstant
(
epochInstant
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
}
return
true
;
}
static
bool
TimeZone_getPossibleInstantsFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
bool
js
:
:
temporal
:
:
GetPossibleInstantsFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
MutableHandle
<
InstantVector
>
list
)
{
Rooted
<
Value
>
getPossibleInstantsFor
(
cx
)
;
if
(
!
GetMethodForCall
(
cx
timeZone
cx
-
>
names
(
)
.
getPossibleInstantsFor
&
getPossibleInstantsFor
)
)
{
return
false
;
}
if
(
timeZone
-
>
is
<
TimeZoneObject
>
(
)
&
&
IsNativeFunction
(
getPossibleInstantsFor
TimeZone_getPossibleInstantsFor
)
)
{
ForOfPIC
:
:
Chain
*
stubChain
=
ForOfPIC
:
:
getOrCreate
(
cx
)
;
if
(
!
stubChain
)
{
return
false
;
}
bool
arrayIterationSane
;
if
(
!
stubChain
-
>
tryOptimizeArray
(
cx
&
arrayIterationSane
)
)
{
return
false
;
}
if
(
arrayIterationSane
)
{
auto
*
unwrapped
=
dateTime
.
unwrap
(
cx
)
;
if
(
!
unwrapped
)
{
return
false
;
}
EpochInstantList
possibleInstants
;
if
(
!
BuiltinGetPossibleInstantsFor
(
cx
timeZone
.
as
<
TimeZoneObject
>
(
)
ToPlainDateTime
(
unwrapped
)
possibleInstants
)
)
{
return
false
;
}
for
(
const
auto
&
possibleInstant
:
possibleInstants
)
{
auto
*
instant
=
CreateTemporalInstant
(
cx
possibleInstant
)
;
if
(
!
instant
)
{
return
false
;
}
if
(
!
list
.
append
(
instant
)
)
{
return
false
;
}
}
return
true
;
}
}
Rooted
<
Value
>
thisv
(
cx
ObjectValue
(
*
timeZone
)
)
;
Rooted
<
Value
>
arg
(
cx
ObjectValue
(
*
dateTime
)
)
;
Rooted
<
Value
>
rval
(
cx
)
;
if
(
!
Call
(
cx
getPossibleInstantsFor
thisv
arg
&
rval
)
)
{
return
false
;
}
JS
:
:
ForOfIterator
iterator
(
cx
)
;
if
(
!
iterator
.
init
(
rval
)
)
{
return
false
;
}
Rooted
<
Value
>
nextValue
(
cx
)
;
while
(
true
)
{
bool
done
;
if
(
!
iterator
.
next
(
&
nextValue
&
done
)
)
{
return
false
;
}
if
(
done
)
{
break
;
}
if
(
nextValue
.
isObject
(
)
)
{
JSObject
*
obj
=
&
nextValue
.
toObject
(
)
;
if
(
obj
-
>
canUnwrapAs
<
InstantObject
>
(
)
)
{
if
(
!
list
.
append
(
obj
)
)
{
return
false
;
}
continue
;
}
}
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
nextValue
nullptr
"
not
an
instant
"
)
;
iterator
.
closeThrow
(
)
;
return
false
;
}
return
true
;
}
static
bool
AddDateTime
(
JSContext
*
cx
const
PlainDateTime
&
dateTime
int64_t
nanoseconds
Handle
<
CalendarValue
>
calendar
PlainDateTime
*
result
)
{
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
=
2
*
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
&
[
date
time
]
=
dateTime
;
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
auto
timeResult
=
BalanceTime
(
time
nanoseconds
)
;
Rooted
<
PlainDateObject
*
>
datePart
(
cx
CreateTemporalDate
(
cx
date
calendar
)
)
;
if
(
!
datePart
)
{
return
false
;
}
Rooted
<
DurationObject
*
>
dateDuration
(
cx
CreateTemporalDuration
(
cx
{
0
0
0
double
(
timeResult
.
days
)
}
)
)
;
if
(
!
dateDuration
)
{
return
false
;
}
PlainDate
addedDate
;
if
(
!
CalendarDateAdd
(
cx
calendar
datePart
dateDuration
&
addedDate
)
)
{
return
false
;
}
*
result
=
{
addedDate
timeResult
.
time
}
;
return
true
;
}
Wrapped
<
InstantObject
*
>
js
:
:
temporal
:
:
DisambiguatePossibleInstants
(
JSContext
*
cx
Handle
<
InstantVector
>
possibleInstants
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTimeObj
TemporalDisambiguation
disambiguation
)
{
if
(
possibleInstants
.
length
(
)
=
=
1
)
{
return
possibleInstants
[
0
]
;
}
if
(
!
possibleInstants
.
empty
(
)
)
{
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Earlier
|
|
disambiguation
=
=
TemporalDisambiguation
:
:
Compatible
)
{
return
possibleInstants
[
0
]
;
}
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Later
)
{
size_t
last
=
possibleInstants
.
length
(
)
-
1
;
return
possibleInstants
[
last
]
;
}
MOZ_ASSERT
(
disambiguation
=
=
TemporalDisambiguation
:
:
Reject
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
nullptr
;
}
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Reject
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
nullptr
;
}
constexpr
auto
oneDay
=
InstantSpan
:
:
fromNanoseconds
(
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
*
unwrappedDateTime
=
dateTimeObj
.
unwrap
(
cx
)
;
if
(
!
unwrappedDateTime
)
{
return
nullptr
;
}
auto
dateTime
=
ToPlainDateTime
(
unwrappedDateTime
)
;
Rooted
<
CalendarValue
>
calendar
(
cx
unwrappedDateTime
-
>
calendar
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
calendar
)
)
{
return
nullptr
;
}
auto
epochNanoseconds
=
GetUTCEpochNanoseconds
(
dateTime
)
;
auto
dayBefore
=
epochNanoseconds
-
oneDay
;
if
(
!
IsValidEpochInstant
(
dayBefore
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
nullptr
;
}
auto
dayAfter
=
epochNanoseconds
+
oneDay
;
if
(
!
IsValidEpochInstant
(
dayAfter
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
nullptr
;
}
int64_t
offsetBefore
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
dayBefore
&
offsetBefore
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetBefore
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int64_t
offsetAfter
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
dayAfter
&
offsetAfter
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetAfter
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int64_t
nanoseconds
=
offsetAfter
-
offsetBefore
;
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Earlier
)
{
PlainDateTime
earlier
;
if
(
!
AddDateTime
(
cx
dateTime
-
nanoseconds
calendar
&
earlier
)
)
{
return
nullptr
;
}
Rooted
<
PlainDateTimeObject
*
>
earlierDateTime
(
cx
CreateTemporalDateTime
(
cx
earlier
calendar
)
)
;
if
(
!
earlierDateTime
)
{
return
nullptr
;
}
Rooted
<
InstantVector
>
earlierInstants
(
cx
InstantVector
(
cx
)
)
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
earlierDateTime
&
earlierInstants
)
)
{
return
nullptr
;
}
if
(
earlierInstants
.
empty
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
nullptr
;
}
return
earlierInstants
[
0
]
;
}
MOZ_ASSERT
(
disambiguation
=
=
TemporalDisambiguation
:
:
Compatible
|
|
disambiguation
=
=
TemporalDisambiguation
:
:
Later
)
;
PlainDateTime
later
;
if
(
!
AddDateTime
(
cx
dateTime
nanoseconds
calendar
&
later
)
)
{
return
nullptr
;
}
Rooted
<
PlainDateTimeObject
*
>
laterDateTime
(
cx
CreateTemporalDateTime
(
cx
later
calendar
)
)
;
if
(
!
laterDateTime
)
{
return
nullptr
;
}
Rooted
<
InstantVector
>
laterInstants
(
cx
InstantVector
(
cx
)
)
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
laterDateTime
&
laterInstants
)
)
{
return
nullptr
;
}
if
(
laterInstants
.
empty
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
nullptr
;
}
size_t
last
=
laterInstants
.
length
(
)
-
1
;
return
laterInstants
[
last
]
;
}
static
Wrapped
<
InstantObject
*
>
GetInstantFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
TemporalDisambiguation
disambiguation
)
{
Rooted
<
InstantVector
>
possibleInstants
(
cx
InstantVector
(
cx
)
)
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
dateTime
&
possibleInstants
)
)
{
return
nullptr
;
}
return
DisambiguatePossibleInstants
(
cx
possibleInstants
timeZone
dateTime
disambiguation
)
;
}
bool
js
:
:
temporal
:
:
GetInstantFor
(
JSContext
*
cx
Handle
<
JSObject
*
>
timeZone
Handle
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
{
auto
instant
=
:
:
GetInstantFor
(
cx
timeZone
dateTime
disambiguation
)
;
if
(
!
instant
)
{
return
false
;
}
*
result
=
ToInstant
(
&
instant
.
unwrap
(
)
)
;
return
true
;
}
static
bool
IsTimeZoneOffsetStringPrefix
(
JSLinearString
*
offsetString
)
{
if
(
offsetString
-
>
empty
(
)
)
{
return
false
;
}
char16_t
ch
=
offsetString
-
>
latin1OrTwoByteChar
(
0
)
;
return
ch
=
=
'
+
'
|
|
ch
=
=
'
-
'
|
|
ch
=
=
0x2212
;
}
static
bool
TimeZoneConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
TimeZone
"
)
)
{
return
false
;
}
Rooted
<
JSString
*
>
identifier
(
cx
JS
:
:
ToString
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
identifier
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
linearIdentifier
(
cx
identifier
-
>
ensureLinear
(
cx
)
)
;
if
(
!
linearIdentifier
)
{
return
false
;
}
Rooted
<
JSString
*
>
canonical
(
cx
)
;
Rooted
<
Value
>
offsetNanoseconds
(
cx
)
;
if
(
IsTimeZoneOffsetStringPrefix
(
linearIdentifier
)
)
{
int64_t
nanoseconds
;
if
(
!
ParseTimeZoneOffsetString
(
cx
linearIdentifier
&
nanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
canonical
=
FormatTimeZoneOffsetString
(
cx
nanoseconds
)
;
if
(
!
canonical
)
{
return
false
;
}
offsetNanoseconds
.
setNumber
(
nanoseconds
)
;
}
else
{
canonical
=
ValidateAndCanonicalizeTimeZoneName
(
cx
linearIdentifier
)
;
if
(
!
canonical
)
{
return
false
;
}
offsetNanoseconds
.
setUndefined
(
)
;
}
auto
*
timeZone
=
CreateTemporalTimeZone
(
cx
args
canonical
offsetNanoseconds
)
;
if
(
!
timeZone
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
timeZone
)
;
return
true
;
}
static
bool
TimeZone_from
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
JSObject
*
timeZone
=
ToTemporalTimeZone
(
cx
args
.
get
(
0
)
)
;
if
(
!
timeZone
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
timeZone
)
;
return
true
;
}
static
bool
TimeZone_getOffsetNanosecondsFor
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Instant
instant
;
if
(
!
ToTemporalInstantEpochInstant
(
cx
args
.
get
(
0
)
&
instant
)
)
{
return
false
;
}
int64_t
offset
;
if
(
!
BuiltinGetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offset
)
)
{
return
false
;
}
args
.
rval
(
)
.
setNumber
(
offset
)
;
return
true
;
}
static
bool
TimeZone_getOffsetNanosecondsFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getOffsetNanosecondsFor
>
(
cx
args
)
;
}
static
bool
TimeZone_getOffsetStringFor
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Rooted
<
Wrapped
<
InstantObject
*
>
>
instant
(
cx
ToTemporalInstant
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
instant
)
{
return
false
;
}
JSString
*
str
=
GetOffsetStringFor
(
cx
timeZone
instant
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
TimeZone_getOffsetStringFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getOffsetStringFor
>
(
cx
args
)
;
}
static
bool
TimeZone_getPlainDateTimeFor
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Rooted
<
Wrapped
<
InstantObject
*
>
>
instant
(
cx
ToTemporalInstant
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
instant
)
{
return
false
;
}
Rooted
<
CalendarValue
>
calendar
(
cx
ToTemporalCalendarWithISODefault
(
cx
args
.
get
(
1
)
)
)
;
if
(
!
calendar
)
{
return
false
;
}
auto
*
result
=
GetPlainDateTimeFor
(
cx
timeZone
instant
calendar
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
TimeZone_getPlainDateTimeFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getPlainDateTimeFor
>
(
cx
args
)
;
}
static
bool
TimeZone_getInstantFor
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Rooted
<
Wrapped
<
PlainDateTimeObject
*
>
>
dateTime
(
cx
ToTemporalDateTime
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
dateTime
)
{
return
false
;
}
auto
disambiguation
=
TemporalDisambiguation
:
:
Compatible
;
if
(
args
.
hasDefined
(
1
)
)
{
Rooted
<
JSObject
*
>
options
(
cx
RequireObjectArg
(
cx
"
options
"
"
getInstantFor
"
args
[
1
]
)
)
;
if
(
!
options
)
{
return
false
;
}
if
(
!
ToTemporalDisambiguation
(
cx
options
&
disambiguation
)
)
{
return
false
;
}
}
auto
result
=
GetInstantFor
(
cx
timeZone
dateTime
disambiguation
)
;
if
(
!
result
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
TimeZone_getInstantFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getInstantFor
>
(
cx
args
)
;
}
static
bool
TimeZone_getPossibleInstantsFor
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
PlainDateTime
dateTime
;
if
(
!
ToTemporalDateTime
(
cx
args
.
get
(
0
)
&
dateTime
)
)
{
return
false
;
}
EpochInstantList
possibleInstants
;
if
(
!
BuiltinGetPossibleInstantsFor
(
cx
timeZone
dateTime
possibleInstants
)
)
{
return
false
;
}
size_t
length
=
possibleInstants
.
length
(
)
;
Rooted
<
ArrayObject
*
>
result
(
cx
NewDenseFullyAllocatedArray
(
cx
length
)
)
;
if
(
!
result
)
{
return
false
;
}
result
-
>
ensureDenseInitializedLength
(
0
length
)
;
for
(
size_t
i
=
0
;
i
<
length
;
i
+
+
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
possibleInstants
[
i
]
)
)
;
auto
*
instant
=
CreateTemporalInstant
(
cx
possibleInstants
[
i
]
)
;
if
(
!
instant
)
{
return
false
;
}
result
-
>
initDenseElement
(
i
ObjectValue
(
*
instant
)
)
;
}
args
.
rval
(
)
.
setObject
(
*
result
)
;
return
true
;
}
static
bool
TimeZone_getPossibleInstantsFor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getPossibleInstantsFor
>
(
cx
args
)
;
}
static
bool
TimeZone_getNextTransition
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Instant
startingPoint
;
if
(
!
ToTemporalInstantEpochInstant
(
cx
args
.
get
(
0
)
&
startingPoint
)
)
{
return
false
;
}
if
(
!
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
{
args
.
rval
(
)
.
setNull
(
)
;
return
true
;
}
mozilla
:
:
Maybe
<
Instant
>
transition
;
if
(
!
GetNamedTimeZoneNextTransition
(
cx
timeZone
startingPoint
&
transition
)
)
{
return
false
;
}
if
(
!
transition
)
{
args
.
rval
(
)
.
setNull
(
)
;
return
true
;
}
auto
*
instant
=
CreateTemporalInstant
(
cx
*
transition
)
;
if
(
!
instant
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
instant
)
;
return
true
;
}
static
bool
TimeZone_getNextTransition
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getNextTransition
>
(
cx
args
)
;
}
static
bool
TimeZone_getPreviousTransition
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
TimeZoneObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
)
;
Instant
startingPoint
;
if
(
!
ToTemporalInstantEpochInstant
(
cx
args
.
get
(
0
)
&
startingPoint
)
)
{
return
false
;
}
if
(
!
timeZone
-
>
offsetNanoseconds
(
)
.
isUndefined
(
)
)
{
args
.
rval
(
)
.
setNull
(
)
;
return
true
;
}
mozilla
:
:
Maybe
<
Instant
>
transition
;
if
(
!
GetNamedTimeZonePreviousTransition
(
cx
timeZone
startingPoint
&
transition
)
)
{
return
false
;
}
if
(
!
transition
)
{
args
.
rval
(
)
.
setNull
(
)
;
return
true
;
}
auto
*
instant
=
CreateTemporalInstant
(
cx
*
transition
)
;
if
(
!
instant
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
instant
)
;
return
true
;
}
static
bool
TimeZone_getPreviousTransition
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_getPreviousTransition
>
(
cx
args
)
;
}
static
bool
TimeZone_toString
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
timeZone
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
;
args
.
rval
(
)
.
setString
(
timeZone
-
>
identifier
(
)
)
;
return
true
;
}
static
bool
TimeZone_toString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_toString
>
(
cx
args
)
;
}
static
bool
TimeZone_toJSON
(
JSContext
*
cx
const
CallArgs
&
args
)
{
Rooted
<
JSObject
*
>
timeZone
(
cx
&
args
.
thisv
(
)
.
toObject
(
)
)
;
JSString
*
str
=
TimeZoneToString
(
cx
timeZone
)
;
if
(
!
str
)
{
return
false
;
}
args
.
rval
(
)
.
setString
(
str
)
;
return
true
;
}
static
bool
TimeZone_toJSON
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_toJSON
>
(
cx
args
)
;
}
static
bool
TimeZone_id
(
JSContext
*
cx
const
CallArgs
&
args
)
{
auto
*
timeZone
=
&
args
.
thisv
(
)
.
toObject
(
)
.
as
<
TimeZoneObject
>
(
)
;
args
.
rval
(
)
.
setString
(
timeZone
-
>
identifier
(
)
)
;
return
true
;
}
static
bool
TimeZone_id
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
return
CallNonGenericMethod
<
IsTimeZone
TimeZone_id
>
(
cx
args
)
;
}
void
js
:
:
temporal
:
:
TimeZoneObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
MOZ_ASSERT
(
gcx
-
>
onMainThread
(
)
)
;
if
(
auto
*
timeZone
=
obj
-
>
as
<
TimeZoneObject
>
(
)
.
getTimeZone
(
)
)
{
intl
:
:
RemoveICUCellMemory
(
gcx
obj
TimeZoneObject
:
:
EstimatedMemoryUse
)
;
delete
timeZone
;
}
}
const
JSClassOps
TimeZoneObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
TimeZoneObject
:
:
finalize
nullptr
nullptr
nullptr
}
;
const
JSClass
TimeZoneObject
:
:
class_
=
{
"
Temporal
.
TimeZone
"
JSCLASS_HAS_RESERVED_SLOTS
(
TimeZoneObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_TimeZone
)
|
JSCLASS_FOREGROUND_FINALIZE
&
TimeZoneObject
:
:
classOps_
&
TimeZoneObject
:
:
classSpec_
}
;
const
JSClass
&
TimeZoneObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
TimeZone_methods
[
]
=
{
JS_FN
(
"
from
"
TimeZone_from
1
0
)
JS_FS_END
}
;
static
const
JSFunctionSpec
TimeZone_prototype_methods
[
]
=
{
JS_FN
(
"
getOffsetNanosecondsFor
"
TimeZone_getOffsetNanosecondsFor
1
0
)
JS_FN
(
"
getOffsetStringFor
"
TimeZone_getOffsetStringFor
1
0
)
JS_FN
(
"
getPlainDateTimeFor
"
TimeZone_getPlainDateTimeFor
1
0
)
JS_FN
(
"
getInstantFor
"
TimeZone_getInstantFor
1
0
)
JS_FN
(
"
getPossibleInstantsFor
"
TimeZone_getPossibleInstantsFor
1
0
)
JS_FN
(
"
getNextTransition
"
TimeZone_getNextTransition
1
0
)
JS_FN
(
"
getPreviousTransition
"
TimeZone_getPreviousTransition
1
0
)
JS_FN
(
"
toString
"
TimeZone_toString
0
0
)
JS_FN
(
"
toJSON
"
TimeZone_toJSON
0
0
)
JS_FS_END
}
;
static
const
JSPropertySpec
TimeZone_prototype_properties
[
]
=
{
JS_PSG
(
"
id
"
TimeZone_id
0
)
JS_STRING_SYM_PS
(
toStringTag
"
Temporal
.
TimeZone
"
JSPROP_READONLY
)
JS_PS_END
}
;
const
ClassSpec
TimeZoneObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
TimeZoneConstructor
1
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
TimeZoneObject
>
TimeZone_methods
nullptr
TimeZone_prototype_methods
TimeZone_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
