#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
utility
>
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
FormatBuffer
.
h
"
#
include
"
builtin
/
intl
/
SharedIntlData
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCContext
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PlainObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
bool
js
:
:
temporal
:
:
IsValidTimeZoneName
(
JSContext
*
cx
Handle
<
JSString
*
>
timeZone
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
if
(
!
sharedIntlData
.
validateTimeZoneName
(
cx
timeZone
validatedTimeZone
)
)
{
return
false
;
}
if
(
validatedTimeZone
)
{
cx
-
>
markAtom
(
validatedTimeZone
)
;
}
return
true
;
}
JSString
*
js
:
:
temporal
:
:
CanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
timeZone
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
timeZone
"
Etc
/
Unknown
"
)
"
Invalid
time
zone
"
)
;
Rooted
<
JSAtom
*
>
checkTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
timeZone
checkTimeZone
)
"
Time
zone
name
not
normalized
"
)
;
#
endif
Rooted
<
JSLinearString
*
>
ianaTimeZone
(
cx
)
;
do
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
Rooted
<
JSAtom
*
>
canonicalTimeZone
(
cx
)
;
if
(
!
sharedIntlData
.
tryCanonicalizeTimeZoneConsistentWithIANA
(
cx
timeZone
&
canonicalTimeZone
)
)
{
return
nullptr
;
}
if
(
canonicalTimeZone
)
{
cx
-
>
markAtom
(
canonicalTimeZone
)
;
ianaTimeZone
=
canonicalTimeZone
;
break
;
}
JS
:
:
AutoStableStringChars
stableChars
(
cx
)
;
if
(
!
stableChars
.
initTwoByte
(
cx
timeZone
)
)
{
return
nullptr
;
}
intl
:
:
FormatBuffer
<
char16_t
intl
:
:
INITIAL_CHAR_BUFFER_SIZE
>
buffer
(
cx
)
;
auto
result
=
mozilla
:
:
intl
:
:
TimeZone
:
:
GetCanonicalTimeZoneID
(
stableChars
.
twoByteRange
(
)
buffer
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
ianaTimeZone
=
buffer
.
toString
(
cx
)
;
if
(
!
ianaTimeZone
)
{
return
nullptr
;
}
}
while
(
false
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
Unknown
"
)
"
Invalid
canonical
time
zone
"
)
;
if
(
!
IsValidTimeZoneName
(
cx
ianaTimeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
ianaTimeZone
checkTimeZone
)
"
Unsupported
canonical
time
zone
"
)
;
#
endif
if
(
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
UTC
"
)
|
|
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
GMT
"
)
)
{
return
cx
-
>
names
(
)
.
UTC
;
}
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
GMT
"
)
)
;
return
ianaTimeZone
;
}
JSString
*
js
:
:
temporal
:
:
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSString
*
>
timeZone
)
{
Rooted
<
JSAtom
*
>
validatedTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
validatedTimeZone
)
)
{
return
nullptr
;
}
if
(
!
validatedTimeZone
)
{
if
(
auto
chars
=
QuoteString
(
cx
timeZone
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INVALID_IDENTIFIER
chars
.
get
(
)
)
;
}
return
nullptr
;
}
return
CanonicalizeTimeZoneName
(
cx
validatedTimeZone
)
;
}
JSString
*
js
:
:
temporal
:
:
FormatTimeZoneOffsetString
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
char
sign
=
offsetNanoseconds
>
=
0
?
'
+
'
:
'
-
'
;
offsetNanoseconds
=
std
:
:
abs
(
offsetNanoseconds
)
;
int32_t
nanoseconds
=
int32_t
(
offsetNanoseconds
%
1
'
000
'
000
'
000
)
;
int32_t
quotient
=
int32_t
(
offsetNanoseconds
/
1
'
000
'
000
'
000
)
;
int32_t
seconds
=
quotient
%
60
;
quotient
/
=
60
;
int32_t
minutes
=
quotient
%
60
;
int32_t
hours
=
quotient
/
60
;
MOZ_ASSERT
(
hours
<
24
"
time
zone
offset
mustn
'
t
exceed
24
-
hours
"
)
;
constexpr
size_t
maxLength
=
1
+
2
+
1
+
2
+
1
+
2
+
1
+
9
;
char
result
[
maxLength
]
;
size_t
n
=
0
;
result
[
n
+
+
]
=
sign
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
hours
%
10
)
;
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
minutes
%
10
)
;
if
(
seconds
!
=
0
|
|
nanoseconds
!
=
0
)
{
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
'
0
'
+
(
seconds
/
10
)
;
result
[
n
+
+
]
=
'
0
'
+
(
seconds
%
10
)
;
if
(
uint32_t
fractional
=
nanoseconds
)
{
result
[
n
+
+
]
=
'
.
'
;
uint32_t
k
=
100
'
000
'
000
;
do
{
result
[
n
+
+
]
=
'
0
'
+
(
fractional
/
k
)
;
fractional
%
=
k
;
k
/
=
10
;
}
while
(
fractional
)
;
}
}
MOZ_ASSERT
(
n
<
=
maxLength
)
;
return
NewStringCopyN
<
CanGC
>
(
cx
result
n
)
;
}
static
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
const
CallArgs
&
args
Handle
<
JSString
*
>
identifier
Handle
<
Value
>
offsetNanoseconds
)
{
MOZ_ASSERT
(
offsetNanoseconds
.
isUndefined
(
)
|
|
offsetNanoseconds
.
isNumber
(
)
)
;
MOZ_ASSERT_IF
(
offsetNanoseconds
.
isNumber
(
)
std
:
:
abs
(
offsetNanoseconds
.
toNumber
(
)
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
Rooted
<
JSObject
*
>
proto
(
cx
)
;
if
(
!
GetPrototypeFromBuiltinConstructor
(
cx
args
JSProto_TimeZone
&
proto
)
)
{
return
nullptr
;
}
auto
*
timeZone
=
NewObjectWithClassProto
<
TimeZoneObject
>
(
cx
proto
)
;
if
(
!
timeZone
)
{
return
nullptr
;
}
timeZone
-
>
setFixedSlot
(
TimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
timeZone
-
>
setFixedSlot
(
TimeZoneObject
:
:
OFFSET_NANOSECONDS_SLOT
offsetNanoseconds
)
;
return
timeZone
;
}
static
TimeZoneObject
*
CreateTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSString
*
>
identifier
)
{
auto
*
object
=
NewBuiltinClassInstance
<
TimeZoneObject
>
(
cx
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
object
-
>
setFixedSlot
(
TimeZoneObject
:
:
OFFSET_NANOSECONDS_SLOT
UndefinedValue
(
)
)
;
return
object
;
}
TimeZoneObject
*
js
:
:
temporal
:
:
CreateTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSString
*
>
identifier
)
{
return
:
:
CreateTemporalTimeZone
(
cx
identifier
)
;
}
TimeZoneObject
*
js
:
:
temporal
:
:
CreateTemporalTimeZoneUTC
(
JSContext
*
cx
)
{
Handle
<
JSString
*
>
identifier
=
cx
-
>
names
(
)
.
UTC
.
toHandle
(
)
;
return
:
:
CreateTemporalTimeZone
(
cx
identifier
)
;
}
static
bool
IsTimeZoneOffsetStringPrefix
(
JSLinearString
*
offsetString
)
{
if
(
offsetString
-
>
empty
(
)
)
{
return
false
;
}
char16_t
ch
=
offsetString
-
>
latin1OrTwoByteChar
(
0
)
;
return
ch
=
=
'
+
'
|
|
ch
=
=
'
-
'
|
|
ch
=
=
0x2212
;
}
static
bool
TimeZoneConstructor
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
{
CallArgs
args
=
CallArgsFromVp
(
argc
vp
)
;
if
(
!
ThrowIfNotConstructing
(
cx
args
"
Temporal
.
TimeZone
"
)
)
{
return
false
;
}
Rooted
<
JSString
*
>
identifier
(
cx
JS
:
:
ToString
(
cx
args
.
get
(
0
)
)
)
;
if
(
!
identifier
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
linearIdentifier
(
cx
identifier
-
>
ensureLinear
(
cx
)
)
;
if
(
!
linearIdentifier
)
{
return
false
;
}
Rooted
<
JSString
*
>
canonical
(
cx
)
;
Rooted
<
Value
>
offsetNanoseconds
(
cx
)
;
if
(
IsTimeZoneOffsetStringPrefix
(
linearIdentifier
)
)
{
int64_t
nanoseconds
;
if
(
!
ParseTimeZoneOffsetString
(
cx
linearIdentifier
&
nanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
canonical
=
FormatTimeZoneOffsetString
(
cx
nanoseconds
)
;
if
(
!
canonical
)
{
return
false
;
}
offsetNanoseconds
.
setNumber
(
nanoseconds
)
;
}
else
{
canonical
=
ValidateAndCanonicalizeTimeZoneName
(
cx
linearIdentifier
)
;
if
(
!
canonical
)
{
return
false
;
}
offsetNanoseconds
.
setUndefined
(
)
;
}
auto
*
timeZone
=
CreateTemporalTimeZone
(
cx
args
canonical
offsetNanoseconds
)
;
if
(
!
timeZone
)
{
return
false
;
}
args
.
rval
(
)
.
setObject
(
*
timeZone
)
;
return
true
;
}
void
js
:
:
temporal
:
:
TimeZoneObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
MOZ_ASSERT
(
gcx
-
>
onMainThread
(
)
)
;
}
const
JSClassOps
TimeZoneObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
TimeZoneObject
:
:
finalize
nullptr
nullptr
nullptr
}
;
const
JSClass
TimeZoneObject
:
:
class_
=
{
"
Temporal
.
TimeZone
"
JSCLASS_HAS_RESERVED_SLOTS
(
TimeZoneObject
:
:
SLOT_COUNT
)
|
JSCLASS_HAS_CACHED_PROTO
(
JSProto_TimeZone
)
|
JSCLASS_FOREGROUND_FINALIZE
&
TimeZoneObject
:
:
classOps_
&
TimeZoneObject
:
:
classSpec_
}
;
const
JSClass
&
TimeZoneObject
:
:
protoClass_
=
PlainObject
:
:
class_
;
static
const
JSFunctionSpec
TimeZone_methods
[
]
=
{
JS_FS_END
}
;
static
const
JSFunctionSpec
TimeZone_prototype_methods
[
]
=
{
JS_FS_END
}
;
static
const
JSPropertySpec
TimeZone_prototype_properties
[
]
=
{
JS_PS_END
}
;
const
ClassSpec
TimeZoneObject
:
:
classSpec_
=
{
GenericCreateConstructor
<
TimeZoneConstructor
1
gc
:
:
AllocKind
:
:
FUNCTION
>
GenericCreatePrototype
<
TimeZoneObject
>
TimeZone_methods
nullptr
TimeZone_prototype_methods
TimeZone_prototype_properties
nullptr
ClassSpec
:
:
DontDefineConstructor
}
;
