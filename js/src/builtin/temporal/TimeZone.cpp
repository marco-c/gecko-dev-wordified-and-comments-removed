#
include
"
builtin
/
temporal
/
TimeZone
.
h
"
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
<
initializer_list
>
#
include
<
iterator
>
#
include
<
utility
>
#
include
"
jsdate
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
intl
/
CommonFunctions
.
h
"
#
include
"
builtin
/
intl
/
FormatBuffer
.
h
"
#
include
"
builtin
/
intl
/
SharedIntlData
.
h
"
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
Instant
.
h
"
#
include
"
builtin
/
temporal
/
PlainDate
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
PlainTime
.
h
"
#
include
"
builtin
/
temporal
/
Temporal
.
h
"
#
include
"
builtin
/
temporal
/
TemporalParser
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
builtin
/
temporal
/
TemporalUnit
.
h
"
#
include
"
builtin
/
temporal
/
ZonedDateTime
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GCContext
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
ComparisonOperators
.
h
"
#
include
"
js
/
Date
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
ForOfIterator
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
Printer
.
h
"
#
include
"
js
/
PropertyDescriptor
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
Compartment
.
h
"
#
include
"
vm
/
DateTime
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
#
include
"
vm
/
ObjectOperations
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
temporal
;
void
js
:
:
temporal
:
:
TimeZoneValue
:
:
trace
(
JSTracer
*
trc
)
{
TraceNullableRoot
(
trc
&
object_
"
TimeZoneValue
:
:
object
"
)
;
}
static
mozilla
:
:
UniquePtr
<
mozilla
:
:
intl
:
:
TimeZone
>
CreateIntlTimeZone
(
JSContext
*
cx
JSLinearString
*
identifier
)
{
JS
:
:
AutoStableStringChars
stableChars
(
cx
)
;
if
(
!
stableChars
.
initTwoByte
(
cx
identifier
)
)
{
return
nullptr
;
}
auto
result
=
mozilla
:
:
intl
:
:
TimeZone
:
:
TryCreate
(
mozilla
:
:
Some
(
stableChars
.
twoByteRange
(
)
)
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
return
result
.
unwrap
(
)
;
}
static
mozilla
:
:
intl
:
:
TimeZone
*
GetOrCreateIntlTimeZone
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
)
{
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
if
(
auto
*
tz
=
timeZone
.
getTimeZone
(
)
)
{
return
tz
;
}
auto
*
tz
=
CreateIntlTimeZone
(
cx
timeZone
.
identifier
(
)
)
.
release
(
)
;
if
(
!
tz
)
{
return
nullptr
;
}
auto
*
builtin
=
timeZone
.
get
(
)
.
toBuiltinTimeZoneObject
(
)
;
builtin
-
>
setTimeZone
(
tz
)
;
intl
:
:
AddICUCellMemory
(
builtin
BuiltinTimeZoneObject
:
:
EstimatedMemoryUse
)
;
return
tz
;
}
bool
js
:
:
temporal
:
:
IsValidTimeZoneName
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
timeZone
MutableHandle
<
JSAtom
*
>
validatedTimeZone
)
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
if
(
!
sharedIntlData
.
validateTimeZoneName
(
cx
timeZone
validatedTimeZone
)
)
{
return
false
;
}
if
(
validatedTimeZone
)
{
cx
-
>
markAtom
(
validatedTimeZone
)
;
}
return
true
;
}
JSLinearString
*
js
:
:
temporal
:
:
CanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
timeZone
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
timeZone
"
Etc
/
Unknown
"
)
"
Invalid
time
zone
"
)
;
Rooted
<
JSAtom
*
>
checkTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
timeZone
checkTimeZone
)
"
Time
zone
name
not
normalized
"
)
;
#
endif
Rooted
<
JSLinearString
*
>
ianaTimeZone
(
cx
)
;
do
{
intl
:
:
SharedIntlData
&
sharedIntlData
=
cx
-
>
runtime
(
)
-
>
sharedIntlData
.
ref
(
)
;
Rooted
<
JSAtom
*
>
canonicalTimeZone
(
cx
)
;
if
(
!
sharedIntlData
.
tryCanonicalizeTimeZoneConsistentWithIANA
(
cx
timeZone
&
canonicalTimeZone
)
)
{
return
nullptr
;
}
if
(
canonicalTimeZone
)
{
cx
-
>
markAtom
(
canonicalTimeZone
)
;
ianaTimeZone
=
canonicalTimeZone
;
break
;
}
JS
:
:
AutoStableStringChars
stableChars
(
cx
)
;
if
(
!
stableChars
.
initTwoByte
(
cx
timeZone
)
)
{
return
nullptr
;
}
intl
:
:
FormatBuffer
<
char16_t
intl
:
:
INITIAL_CHAR_BUFFER_SIZE
>
buffer
(
cx
)
;
auto
result
=
mozilla
:
:
intl
:
:
TimeZone
:
:
GetCanonicalTimeZoneID
(
stableChars
.
twoByteRange
(
)
buffer
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
nullptr
;
}
ianaTimeZone
=
buffer
.
toString
(
cx
)
;
if
(
!
ianaTimeZone
)
{
return
nullptr
;
}
}
while
(
false
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
Unknown
"
)
"
Invalid
canonical
time
zone
"
)
;
if
(
!
IsValidTimeZoneName
(
cx
ianaTimeZone
&
checkTimeZone
)
)
{
return
nullptr
;
}
MOZ_ASSERT
(
EqualStrings
(
ianaTimeZone
checkTimeZone
)
"
Unsupported
canonical
time
zone
"
)
;
#
endif
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
UTC
"
)
)
;
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
Etc
/
GMT
"
)
)
;
MOZ_ASSERT
(
!
StringEqualsLiteral
(
ianaTimeZone
"
GMT
"
)
)
;
return
ianaTimeZone
;
}
static
JSLinearString
*
ValidateAndCanonicalizeTimeZoneName
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
timeZone
)
{
Rooted
<
JSAtom
*
>
validatedTimeZone
(
cx
)
;
if
(
!
IsValidTimeZoneName
(
cx
timeZone
&
validatedTimeZone
)
)
{
return
nullptr
;
}
if
(
!
validatedTimeZone
)
{
if
(
auto
chars
=
QuoteString
(
cx
timeZone
)
)
{
JS_ReportErrorNumberUTF8
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INVALID_IDENTIFIER
chars
.
get
(
)
)
;
}
return
nullptr
;
}
return
CanonicalizeTimeZoneName
(
cx
validatedTimeZone
)
;
}
static
bool
GetNamedTimeZoneEpochNanoseconds
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
PossibleInstants
*
instants
)
{
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
int64_t
ms
=
MakeDate
(
dateTime
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
getOffset
=
[
&
]
(
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
skippedTime
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
repeatedTime
int32_t
*
offset
)
{
auto
result
=
tz
-
>
GetUTCOffsetMs
(
ms
skippedTime
repeatedTime
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
false
;
}
*
offset
=
result
.
unwrap
(
)
;
MOZ_ASSERT
(
std
:
:
abs
(
*
offset
)
<
UnitsPerDay
(
TemporalUnit
:
:
Millisecond
)
)
;
return
true
;
}
;
constexpr
auto
formerTime
=
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
:
:
Former
;
constexpr
auto
latterTime
=
mozilla
:
:
intl
:
:
TimeZone
:
:
LocalOption
:
:
Latter
;
int32_t
formerOffset
;
if
(
!
getOffset
(
formerTime
formerTime
&
formerOffset
)
)
{
return
false
;
}
int32_t
latterOffset
;
if
(
!
getOffset
(
latterTime
latterTime
&
latterOffset
)
)
{
return
false
;
}
if
(
formerOffset
=
=
latterOffset
)
{
auto
instant
=
GetUTCEpochNanoseconds
(
dateTime
InstantSpan
:
:
fromMilliseconds
(
formerOffset
)
)
;
*
instants
=
PossibleInstants
{
instant
}
;
return
true
;
}
int32_t
disambiguationOffset
;
if
(
!
getOffset
(
formerTime
latterTime
&
disambiguationOffset
)
)
{
return
false
;
}
if
(
disambiguationOffset
=
=
formerOffset
)
{
*
instants
=
{
}
;
return
true
;
}
auto
formerInstant
=
GetUTCEpochNanoseconds
(
dateTime
InstantSpan
:
:
fromMilliseconds
(
formerOffset
)
)
;
auto
latterInstant
=
GetUTCEpochNanoseconds
(
dateTime
InstantSpan
:
:
fromMilliseconds
(
latterOffset
)
)
;
if
(
formerInstant
>
latterInstant
)
{
std
:
:
swap
(
formerInstant
latterInstant
)
;
}
*
instants
=
PossibleInstants
{
formerInstant
latterInstant
}
;
return
true
;
}
static
bool
GetNamedTimeZoneOffsetNanoseconds
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
int64_t
*
offset
)
{
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
int64_t
millis
=
epochInstant
.
floorToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
result
=
tz
-
>
GetOffsetMs
(
millis
)
;
if
(
result
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
result
.
unwrapErr
(
)
)
;
return
false
;
}
int64_t
nanoPerMs
=
1
'
000
'
000
;
*
offset
=
result
.
unwrap
(
)
*
nanoPerMs
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetNamedTimeZoneNextTransition
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
{
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
int64_t
millis
=
epochInstant
.
floorToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
next
=
tz
-
>
GetNextTransition
(
millis
)
;
if
(
next
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
next
.
unwrapErr
(
)
)
;
return
false
;
}
auto
transition
=
next
.
unwrap
(
)
;
if
(
!
transition
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
auto
transitionInstant
=
Instant
:
:
fromMilliseconds
(
*
transition
)
;
if
(
!
IsValidEpochInstant
(
transitionInstant
)
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
*
result
=
mozilla
:
:
Some
(
transitionInstant
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetNamedTimeZonePreviousTransition
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
epochInstant
mozilla
:
:
Maybe
<
Instant
>
*
result
)
{
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
int64_t
millis
=
epochInstant
.
ceilToMilliseconds
(
)
;
auto
*
tz
=
GetOrCreateIntlTimeZone
(
cx
timeZone
)
;
if
(
!
tz
)
{
return
false
;
}
auto
previous
=
tz
-
>
GetPreviousTransition
(
millis
)
;
if
(
previous
.
isErr
(
)
)
{
intl
:
:
ReportInternalError
(
cx
previous
.
unwrapErr
(
)
)
;
return
false
;
}
auto
transition
=
previous
.
unwrap
(
)
;
if
(
!
transition
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
auto
transitionInstant
=
Instant
:
:
fromMilliseconds
(
*
transition
)
;
if
(
!
IsValidEpochInstant
(
transitionInstant
)
)
{
*
result
=
mozilla
:
:
Nothing
(
)
;
return
true
;
}
*
result
=
mozilla
:
:
Some
(
transitionInstant
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetStartOfDay
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
PlainDate
&
date
Instant
*
result
)
{
auto
dateTime
=
PlainDateTime
{
date
{
}
}
;
PossibleInstants
possibleInstants
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
dateTime
&
possibleInstants
)
)
{
return
false
;
}
if
(
!
possibleInstants
.
empty
(
)
)
{
*
result
=
possibleInstants
[
0
]
;
return
true
;
}
MOZ_ASSERT
(
!
timeZone
.
isOffset
(
)
)
;
constexpr
auto
oneDay
=
InstantSpan
:
:
fromNanoseconds
(
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
previousDayEpochNs
=
GetUTCEpochNanoseconds
(
dateTime
)
-
oneDay
;
mozilla
:
:
Maybe
<
Instant
>
transition
{
}
;
if
(
!
GetNamedTimeZoneNextTransition
(
cx
timeZone
previousDayEpochNs
&
transition
)
)
{
return
false
;
}
MOZ_ASSERT
(
transition
"
time
zone
transition
not
found
"
)
;
*
result
=
*
transition
;
return
true
;
}
static
JSLinearString
*
FormatOffsetTimeZoneIdentifier
(
JSContext
*
cx
int32_t
offsetMinutes
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetMinutes
)
<
UnitsPerDay
(
TemporalUnit
:
:
Minute
)
)
;
char
sign
=
offsetMinutes
>
=
0
?
'
+
'
:
'
-
'
;
int32_t
absoluteMinutes
=
std
:
:
abs
(
offsetMinutes
)
;
int32_t
hour
=
absoluteMinutes
/
60
;
int32_t
minute
=
absoluteMinutes
%
60
;
char
result
[
]
=
{
sign
char
(
'
0
'
+
(
hour
/
10
)
)
char
(
'
0
'
+
(
hour
%
10
)
)
'
:
'
char
(
'
0
'
+
(
minute
/
10
)
)
char
(
'
0
'
+
(
minute
%
10
)
)
}
;
return
NewStringCopyN
<
CanGC
>
(
cx
result
std
:
:
size
(
result
)
)
;
}
static
BuiltinTimeZoneObject
*
CreateBuiltinTimeZone
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
identifier
)
{
auto
*
object
=
NewObjectWithGivenProto
<
BuiltinTimeZoneObject
>
(
cx
nullptr
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
BuiltinTimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
object
-
>
setFixedSlot
(
BuiltinTimeZoneObject
:
:
OFFSET_MINUTES_SLOT
UndefinedValue
(
)
)
;
return
object
;
}
static
BuiltinTimeZoneObject
*
CreateBuiltinTimeZone
(
JSContext
*
cx
int32_t
offsetMinutes
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetMinutes
)
<
UnitsPerDay
(
TemporalUnit
:
:
Minute
)
)
;
Rooted
<
JSLinearString
*
>
identifier
(
cx
FormatOffsetTimeZoneIdentifier
(
cx
offsetMinutes
)
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
auto
*
object
=
NewObjectWithGivenProto
<
BuiltinTimeZoneObject
>
(
cx
nullptr
)
;
if
(
!
object
)
{
return
nullptr
;
}
object
-
>
setFixedSlot
(
BuiltinTimeZoneObject
:
:
IDENTIFIER_SLOT
StringValue
(
identifier
)
)
;
object
-
>
setFixedSlot
(
BuiltinTimeZoneObject
:
:
OFFSET_MINUTES_SLOT
Int32Value
(
offsetMinutes
)
)
;
return
object
;
}
BuiltinTimeZoneObject
*
js
:
:
temporal
:
:
CreateTemporalTimeZone
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
identifier
)
{
return
:
:
CreateBuiltinTimeZone
(
cx
identifier
)
;
}
bool
js
:
:
temporal
:
:
ToTemporalTimeZone
(
JSContext
*
cx
Handle
<
ParsedTimeZone
>
string
MutableHandle
<
TimeZoneValue
>
result
)
{
if
(
!
string
.
name
(
)
)
{
auto
*
obj
=
:
:
CreateBuiltinTimeZone
(
cx
string
.
offset
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
result
.
set
(
TimeZoneValue
(
obj
)
)
;
return
true
;
}
Rooted
<
JSLinearString
*
>
timeZoneName
(
cx
ValidateAndCanonicalizeTimeZoneName
(
cx
string
.
name
(
)
)
)
;
if
(
!
timeZoneName
)
{
return
false
;
}
auto
*
obj
=
:
:
CreateBuiltinTimeZone
(
cx
timeZoneName
)
;
if
(
!
obj
)
{
return
false
;
}
result
.
set
(
TimeZoneValue
(
obj
)
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
ToTemporalTimeZone
(
JSContext
*
cx
Handle
<
Value
>
temporalTimeZoneLike
MutableHandle
<
TimeZoneValue
>
result
)
{
if
(
temporalTimeZoneLike
.
isObject
(
)
)
{
JSObject
*
obj
=
&
temporalTimeZoneLike
.
toObject
(
)
;
if
(
auto
*
zonedDateTime
=
obj
-
>
maybeUnwrapIf
<
ZonedDateTimeObject
>
(
)
)
{
result
.
set
(
zonedDateTime
-
>
timeZone
(
)
)
;
return
result
.
wrap
(
cx
)
;
}
}
if
(
!
temporalTimeZoneLike
.
isString
(
)
)
{
ReportValueError
(
cx
JSMSG_UNEXPECTED_TYPE
JSDVG_IGNORE_STACK
temporalTimeZoneLike
nullptr
"
not
a
string
"
)
;
return
false
;
}
Rooted
<
JSString
*
>
identifier
(
cx
temporalTimeZoneLike
.
toString
(
)
)
;
Rooted
<
ParsedTimeZone
>
timeZoneName
(
cx
)
;
if
(
!
ParseTemporalTimeZoneString
(
cx
identifier
&
timeZoneName
)
)
{
return
false
;
}
return
ToTemporalTimeZone
(
cx
timeZoneName
result
)
;
}
bool
js
:
:
temporal
:
:
WrapTimeZoneValueObject
(
JSContext
*
cx
MutableHandle
<
BuiltinTimeZoneObject
*
>
timeZone
)
{
if
(
MOZ_LIKELY
(
timeZone
-
>
compartment
(
)
=
=
cx
-
>
compartment
(
)
)
)
{
return
true
;
}
const
auto
&
offsetMinutes
=
timeZone
-
>
offsetMinutes
(
)
;
if
(
offsetMinutes
.
isInt32
(
)
)
{
auto
*
obj
=
CreateBuiltinTimeZone
(
cx
offsetMinutes
.
toInt32
(
)
)
;
if
(
!
obj
)
{
return
false
;
}
timeZone
.
set
(
obj
)
;
return
true
;
}
MOZ_ASSERT
(
offsetMinutes
.
isUndefined
(
)
)
;
Rooted
<
JSString
*
>
identifier
(
cx
timeZone
-
>
identifier
(
)
)
;
if
(
!
cx
-
>
compartment
(
)
-
>
wrap
(
cx
&
identifier
)
)
{
return
false
;
}
Rooted
<
JSLinearString
*
>
linear
(
cx
identifier
-
>
ensureLinear
(
cx
)
)
;
if
(
!
linear
)
{
return
false
;
}
auto
*
obj
=
:
:
CreateBuiltinTimeZone
(
cx
linear
)
;
if
(
!
obj
)
{
return
false
;
}
timeZone
.
set
(
obj
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetOffsetNanosecondsFor
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
int64_t
*
offsetNanoseconds
)
{
if
(
timeZone
.
isOffset
(
)
)
{
int32_t
offset
=
timeZone
.
offsetMinutes
(
)
;
MOZ_ASSERT
(
std
:
:
abs
(
offset
)
<
UnitsPerDay
(
TemporalUnit
:
:
Minute
)
)
;
*
offsetNanoseconds
=
int64_t
(
offset
)
*
ToNanoseconds
(
TemporalUnit
:
:
Minute
)
;
return
true
;
}
int64_t
offset
;
if
(
!
GetNamedTimeZoneOffsetNanoseconds
(
cx
timeZone
instant
&
offset
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offset
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
*
offsetNanoseconds
=
offset
;
return
true
;
}
JSString
*
js
:
:
temporal
:
:
FormatUTCOffsetNanoseconds
(
JSContext
*
cx
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
char
sign
=
offsetNanoseconds
>
=
0
?
'
+
'
:
'
-
'
;
int64_t
absoluteNanoseconds
=
std
:
:
abs
(
offsetNanoseconds
)
;
int32_t
subSecondNanoseconds
=
int32_t
(
absoluteNanoseconds
%
1
'
000
'
000
'
000
)
;
int32_t
quotient
=
int32_t
(
absoluteNanoseconds
/
1
'
000
'
000
'
000
)
;
int32_t
second
=
quotient
%
60
;
quotient
/
=
60
;
int32_t
minute
=
quotient
%
60
;
int32_t
hour
=
quotient
/
60
;
MOZ_ASSERT
(
hour
<
24
"
time
zone
offset
mustn
'
t
exceed
24
-
hours
"
)
;
constexpr
size_t
maxLength
=
1
+
2
+
1
+
2
+
1
+
2
+
1
+
9
;
char
result
[
maxLength
]
;
size_t
n
=
0
;
result
[
n
+
+
]
=
sign
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
hour
/
10
)
)
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
hour
%
10
)
)
;
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
minute
/
10
)
)
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
minute
%
10
)
)
;
if
(
second
!
=
0
|
|
subSecondNanoseconds
!
=
0
)
{
result
[
n
+
+
]
=
'
:
'
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
second
/
10
)
)
;
result
[
n
+
+
]
=
char
(
'
0
'
+
(
second
%
10
)
)
;
if
(
uint32_t
fractional
=
subSecondNanoseconds
)
{
result
[
n
+
+
]
=
'
.
'
;
uint32_t
k
=
100
'
000
'
000
;
do
{
result
[
n
+
+
]
=
char
(
'
0
'
+
(
fractional
/
k
)
)
;
fractional
%
=
k
;
k
/
=
10
;
}
while
(
fractional
)
;
}
}
MOZ_ASSERT
(
n
<
=
maxLength
)
;
return
NewStringCopyN
<
CanGC
>
(
cx
result
n
)
;
}
bool
js
:
:
temporal
:
:
TimeZoneEquals
(
const
TimeZoneValue
&
one
const
TimeZoneValue
&
two
)
{
if
(
!
one
.
isOffset
(
)
&
&
!
two
.
isOffset
(
)
)
{
return
EqualStrings
(
one
.
identifier
(
)
two
.
identifier
(
)
)
;
}
if
(
one
.
isOffset
(
)
&
&
two
.
isOffset
(
)
)
{
return
one
.
offsetMinutes
(
)
=
=
two
.
offsetMinutes
(
)
;
}
return
false
;
}
static
PlainDateTime
GetISOPartsFromEpoch
(
const
Instant
&
instant
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
int32_t
remainderNs
=
instant
.
nanoseconds
%
1
'
000
'
000
;
int32_t
millisecond
=
instant
.
nanoseconds
/
1
'
000
'
000
;
int64_t
epochMilliseconds
=
instant
.
floorToMilliseconds
(
)
;
auto
[
year
month
day
]
=
ToYearMonthDay
(
epochMilliseconds
)
;
auto
[
hour
minute
second
]
=
ToHourMinuteSecond
(
epochMilliseconds
)
;
int32_t
microsecond
=
remainderNs
/
1000
;
int32_t
nanosecond
=
remainderNs
%
1000
;
PlainDateTime
result
=
{
{
year
month
+
1
day
}
{
hour
minute
second
millisecond
microsecond
nanosecond
}
}
;
MOZ_ASSERT
(
IsValidISODateTime
(
result
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
result
)
)
;
return
result
;
}
static
PlainDateTime
BalanceISODateTime
(
const
PlainDateTime
&
dateTime
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsValidISODateTime
(
dateTime
)
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
dateTime
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
const
auto
&
[
date
time
]
=
dateTime
;
auto
balancedTime
=
BalanceTime
(
time
nanoseconds
)
;
MOZ_ASSERT
(
std
:
:
abs
(
balancedTime
.
days
)
<
=
1
)
;
auto
balancedDate
=
BalanceISODate
(
date
balancedTime
.
days
)
;
return
{
balancedDate
balancedTime
.
time
}
;
}
PlainDateTime
js
:
:
temporal
:
:
GetISODateTimeFor
(
const
Instant
&
instant
int64_t
offsetNanoseconds
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
PlainDateTime
dateTime
=
GetISOPartsFromEpoch
(
instant
)
;
auto
balanced
=
BalanceISODateTime
(
dateTime
offsetNanoseconds
)
;
MOZ_ASSERT
(
ISODateTimeWithinLimits
(
balanced
)
)
;
return
balanced
;
}
bool
js
:
:
temporal
:
:
GetISODateTimeFor
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
Instant
&
instant
PlainDateTime
*
result
)
{
MOZ_ASSERT
(
IsValidEpochInstant
(
instant
)
)
;
int64_t
offsetNanoseconds
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
instant
&
offsetNanoseconds
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetNanoseconds
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
*
result
=
GetISODateTimeFor
(
instant
offsetNanoseconds
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetPossibleInstantsFor
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
PossibleInstants
*
result
)
{
if
(
!
ISODateTimeWithinLimits
(
dateTime
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_PLAIN_DATE_TIME_INVALID
)
;
return
false
;
}
PossibleInstants
possibleInstants
;
if
(
timeZone
.
isOffset
(
)
)
{
int32_t
offsetMin
=
timeZone
.
offsetMinutes
(
)
;
MOZ_ASSERT
(
std
:
:
abs
(
offsetMin
)
<
UnitsPerDay
(
TemporalUnit
:
:
Minute
)
)
;
auto
epochInstant
=
GetUTCEpochNanoseconds
(
dateTime
InstantSpan
:
:
fromMinutes
(
offsetMin
)
)
;
possibleInstants
=
PossibleInstants
{
epochInstant
}
;
}
else
{
if
(
!
GetNamedTimeZoneEpochNanoseconds
(
cx
timeZone
dateTime
&
possibleInstants
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
possibleInstants
.
length
(
)
<
=
2
)
;
for
(
const
auto
&
epochInstant
:
possibleInstants
)
{
if
(
!
IsValidEpochInstant
(
epochInstant
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
}
*
result
=
possibleInstants
;
return
true
;
}
static
auto
AddTime
(
const
PlainTime
&
time
int64_t
nanoseconds
)
{
MOZ_ASSERT
(
IsValidTime
(
time
)
)
;
MOZ_ASSERT
(
std
:
:
abs
(
nanoseconds
)
<
=
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
return
BalanceTime
(
time
nanoseconds
)
;
}
bool
js
:
:
temporal
:
:
DisambiguatePossibleInstants
(
JSContext
*
cx
const
PossibleInstants
&
possibleInstants
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
{
if
(
possibleInstants
.
length
(
)
=
=
1
)
{
*
result
=
possibleInstants
.
front
(
)
;
return
true
;
}
if
(
!
possibleInstants
.
empty
(
)
)
{
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Earlier
|
|
disambiguation
=
=
TemporalDisambiguation
:
:
Compatible
)
{
*
result
=
possibleInstants
.
front
(
)
;
return
true
;
}
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Later
)
{
*
result
=
possibleInstants
.
back
(
)
;
return
true
;
}
MOZ_ASSERT
(
disambiguation
=
=
TemporalDisambiguation
:
:
Reject
)
;
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
false
;
}
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Reject
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
false
;
}
constexpr
auto
oneDay
=
InstantSpan
:
:
fromNanoseconds
(
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
auto
epochNanoseconds
=
GetUTCEpochNanoseconds
(
dateTime
)
;
auto
dayBefore
=
epochNanoseconds
-
oneDay
;
if
(
!
IsValidEpochInstant
(
dayBefore
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
auto
dayAfter
=
epochNanoseconds
+
oneDay
;
if
(
!
IsValidEpochInstant
(
dayAfter
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_INSTANT_INVALID
)
;
return
false
;
}
int64_t
offsetBefore
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
dayBefore
&
offsetBefore
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetBefore
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int64_t
offsetAfter
;
if
(
!
GetOffsetNanosecondsFor
(
cx
timeZone
dayAfter
&
offsetAfter
)
)
{
return
false
;
}
MOZ_ASSERT
(
std
:
:
abs
(
offsetAfter
)
<
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
;
int64_t
nanoseconds
=
offsetAfter
-
offsetBefore
;
if
(
std
:
:
abs
(
nanoseconds
)
>
ToNanoseconds
(
TemporalUnit
:
:
Day
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_OFFSET_SHIFT_ONE_DAY
)
;
return
false
;
}
if
(
disambiguation
=
=
TemporalDisambiguation
:
:
Earlier
)
{
auto
earlierTime
=
:
:
AddTime
(
dateTime
.
time
-
nanoseconds
)
;
MOZ_ASSERT
(
std
:
:
abs
(
earlierTime
.
days
)
<
=
1
"
subtracting
nanoseconds
is
at
most
one
day
"
)
;
auto
earlierDate
=
BalanceISODate
(
dateTime
.
date
earlierTime
.
days
)
;
auto
earlierDateTime
=
PlainDateTime
{
earlierDate
earlierTime
.
time
}
;
PossibleInstants
earlierInstants
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
earlierDateTime
&
earlierInstants
)
)
{
return
false
;
}
if
(
earlierInstants
.
empty
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
false
;
}
*
result
=
earlierInstants
.
front
(
)
;
return
true
;
}
MOZ_ASSERT
(
disambiguation
=
=
TemporalDisambiguation
:
:
Compatible
|
|
disambiguation
=
=
TemporalDisambiguation
:
:
Later
)
;
auto
laterTime
=
:
:
AddTime
(
dateTime
.
time
nanoseconds
)
;
MOZ_ASSERT
(
std
:
:
abs
(
laterTime
.
days
)
<
=
1
"
adding
nanoseconds
is
at
most
one
day
"
)
;
auto
laterDate
=
BalanceISODate
(
dateTime
.
date
laterTime
.
days
)
;
auto
laterDateTime
=
PlainDateTime
{
laterDate
laterTime
.
time
}
;
PossibleInstants
laterInstants
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
laterDateTime
&
laterInstants
)
)
{
return
false
;
}
if
(
laterInstants
.
empty
(
)
)
{
JS_ReportErrorNumberASCII
(
cx
GetErrorMessage
nullptr
JSMSG_TEMPORAL_TIMEZONE_INSTANT_AMBIGUOUS
)
;
return
false
;
}
*
result
=
laterInstants
.
back
(
)
;
return
true
;
}
bool
js
:
:
temporal
:
:
GetInstantFor
(
JSContext
*
cx
Handle
<
TimeZoneValue
>
timeZone
const
PlainDateTime
&
dateTime
TemporalDisambiguation
disambiguation
Instant
*
result
)
{
PossibleInstants
possibleInstants
;
if
(
!
GetPossibleInstantsFor
(
cx
timeZone
dateTime
&
possibleInstants
)
)
{
return
false
;
}
return
DisambiguatePossibleInstants
(
cx
possibleInstants
timeZone
dateTime
disambiguation
result
)
;
}
void
js
:
:
temporal
:
:
BuiltinTimeZoneObject
:
:
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
{
MOZ_ASSERT
(
gcx
-
>
onMainThread
(
)
)
;
if
(
auto
*
timeZone
=
obj
-
>
as
<
BuiltinTimeZoneObject
>
(
)
.
getTimeZone
(
)
)
{
intl
:
:
RemoveICUCellMemory
(
gcx
obj
EstimatedMemoryUse
)
;
delete
timeZone
;
}
}
const
JSClassOps
BuiltinTimeZoneObject
:
:
classOps_
=
{
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
BuiltinTimeZoneObject
:
:
finalize
nullptr
nullptr
nullptr
}
;
const
JSClass
BuiltinTimeZoneObject
:
:
class_
=
{
"
Temporal
.
BuiltinTimeZone
"
JSCLASS_HAS_RESERVED_SLOTS
(
BuiltinTimeZoneObject
:
:
SLOT_COUNT
)
|
JSCLASS_FOREGROUND_FINALIZE
&
BuiltinTimeZoneObject
:
:
classOps_
}
;
