#
ifndef
builtin_temporal_PlainMonthDay_h
#
define
builtin_temporal_PlainMonthDay_h
#
include
<
stdint
.
h
>
#
include
"
builtin
/
temporal
/
Calendar
.
h
"
#
include
"
builtin
/
temporal
/
PlainDateTime
.
h
"
#
include
"
builtin
/
temporal
/
TemporalTypes
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
struct
ClassSpec
;
}
namespace
js
:
:
temporal
{
class
PlainMonthDayObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
const
JSClass
&
protoClass_
;
static
constexpr
uint32_t
PACKED_DATE_SLOT
=
0
;
static
constexpr
uint32_t
CALENDAR_SLOT
=
1
;
static
constexpr
uint32_t
SLOT_COUNT
=
2
;
PlainDate
date
(
)
const
{
auto
packed
=
PackedDate
{
getFixedSlot
(
PACKED_DATE_SLOT
)
.
toPrivateUint32
(
)
}
;
return
PackedDate
:
:
unpack
(
packed
)
;
}
CalendarValue
calendar
(
)
const
{
return
CalendarValue
(
getFixedSlot
(
CALENDAR_SLOT
)
)
;
}
private
:
static
const
ClassSpec
classSpec_
;
}
;
class
MOZ_STACK_CLASS
PlainMonthDayWithCalendar
final
{
PlainDate
date_
;
CalendarValue
calendar_
;
public
:
PlainMonthDayWithCalendar
(
)
=
default
;
PlainMonthDayWithCalendar
(
const
PlainDate
&
date
const
CalendarValue
&
calendar
)
:
date_
(
date
)
calendar_
(
calendar
)
{
MOZ_ASSERT
(
ISODateWithinLimits
(
date
)
)
;
}
explicit
PlainMonthDayWithCalendar
(
const
PlainMonthDayObject
*
monthDay
)
:
PlainMonthDayWithCalendar
(
monthDay
-
>
date
(
)
monthDay
-
>
calendar
(
)
)
{
}
const
auto
&
date
(
)
const
{
return
date_
;
}
const
auto
&
calendar
(
)
const
{
return
calendar_
;
}
operator
const
PlainDate
&
(
)
const
{
return
date
(
)
;
}
void
trace
(
JSTracer
*
trc
)
{
calendar_
.
trace
(
trc
)
;
}
const
auto
*
calendarDoNotUse
(
)
const
{
return
&
calendar_
;
}
}
;
PlainMonthDayObject
*
CreateTemporalMonthDay
(
JSContext
*
cx
JS
:
:
Handle
<
PlainMonthDayWithCalendar
>
monthDay
)
;
bool
CreateTemporalMonthDay
(
JSContext
*
cx
const
PlainDate
&
isoDate
JS
:
:
Handle
<
CalendarValue
>
calendar
JS
:
:
MutableHandle
<
PlainMonthDayWithCalendar
>
result
)
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
temporal
:
:
PlainMonthDayWithCalendar
Wrapper
>
{
const
auto
&
container
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
const
auto
&
date
(
)
const
{
return
container
(
)
.
date
(
)
;
}
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
calendar
(
)
const
{
return
JS
:
:
Handle
<
temporal
:
:
CalendarValue
>
:
:
fromMarkedLocation
(
container
(
)
.
calendarDoNotUse
(
)
)
;
}
operator
const
temporal
:
:
PlainDate
&
(
)
const
{
return
date
(
)
;
}
}
;
}
#
endif
