load
(
libdir
+
"
codegen
-
test
-
common
.
js
"
)
;
var
ABS
=
0x
{
HEXES
}
;
var
ABSADDR
=
{
HEX
}
{
2
}
{
HEX
}
{
2
}
{
HEX
}
{
2
}
{
HEX
}
{
2
}
;
var
x86_prefix
=
8b
ec
mov
%
esp
%
ebp
(
b8
ef
be
ad
de
mov
\
\
0xDEADBEEF
%
eax
)
?
var
x86_loadarg0
=
f3
0f
6f
45
{
HEX
}
{
2
}
movdqux
0x
{
HEXES
}
\
\
(
%
.
bp
\
\
)
%
xmm0
;
var
x86_suffix
=
5d
pop
%
.
bp
;
function
codegenTestX86_v128xLITERAL_v128
(
inputs
options
=
{
}
)
{
for
(
let
[
op
literal
expected
]
of
inputs
)
{
codegenTestX86_adhoc
(
wrap
(
options
(
func
(
export
"
f
"
)
(
param
v128
)
(
result
v128
)
(
{
op
}
(
local
.
get
0
)
{
literal
}
)
)
)
'
f
'
x86_loadarg0
+
expected
options
)
}
}
function
codegenTestX86_adhoc
(
module_text
export_name
expected
options
=
{
}
)
{
assertEq
(
hasDisassembler
(
)
true
)
;
let
ins
=
wasmEvalText
(
module_text
)
;
let
output
=
wasmDis
(
ins
.
exports
[
export_name
]
{
tier
:
"
ion
"
asString
:
true
}
)
;
if
(
!
options
.
no_prefix
)
expected
=
x86_prefix
+
'
\
n
'
+
expected
;
if
(
!
options
.
no_suffix
)
expected
=
expected
+
'
\
n
'
+
x86_suffix
;
expected
=
fixlines
(
expected
)
;
if
(
options
.
log
)
{
print
(
module_text
)
;
print
(
output
)
;
print
(
expected
)
;
}
assertEq
(
output
.
match
(
new
RegExp
(
expected
)
)
!
=
null
true
)
;
}
