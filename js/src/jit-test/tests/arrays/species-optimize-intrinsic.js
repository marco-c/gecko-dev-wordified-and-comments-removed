var
canOptimize
=
getSelfHostedValue
(
"
CanOptimizeArraySpecies
"
)
;
function
test1
(
)
{
for
(
var
i
=
0
;
i
<
20
;
i
+
+
)
{
assertEq
(
canOptimize
(
[
1
2
3
]
)
true
)
;
var
a
=
[
]
;
for
(
var
j
=
0
;
j
<
10
;
j
+
+
)
{
a
.
push
(
j
)
;
}
assertEq
(
canOptimize
(
a
)
true
)
;
assertEq
(
canOptimize
(
a
.
slice
(
)
)
true
)
;
assertEq
(
canOptimize
(
a
.
map
(
x
=
>
x
+
1
)
)
true
)
;
assertEq
(
canOptimize
(
{
}
)
false
)
;
Object
.
setPrototypeOf
(
a
Object
.
create
(
Array
.
prototype
)
)
;
assertEq
(
canOptimize
(
a
)
false
)
;
a
=
[
]
;
a
.
constructor
=
function
(
)
{
}
;
assertEq
(
canOptimize
(
a
)
false
)
;
}
}
test1
(
)
;
function
test2
(
)
{
for
(
var
i
=
0
;
i
<
20
;
i
+
+
)
{
assertEq
(
canOptimize
(
[
1
2
3
]
)
i
<
=
16
)
;
if
(
i
=
=
=
16
)
{
Array
.
prototype
.
constructor
=
Object
;
}
}
}
test2
(
)
;
