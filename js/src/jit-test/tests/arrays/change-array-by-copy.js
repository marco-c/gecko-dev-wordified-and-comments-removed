load
(
libdir
+
'
array
-
compare
.
js
'
)
;
load
(
libdir
+
"
asserts
.
js
"
)
;
sequence
=
[
1
2
3
]
;
reversedSequence
=
sequence
.
withReversed
(
)
;
assertEq
(
arraysEqual
(
sequence
[
1
2
3
]
)
true
)
;
assertEq
(
arraysEqual
(
reversedSequence
[
3
2
1
]
)
true
)
;
sequence
=
[
87
3
5
888
321
42
]
;
sortedSequence
=
sequence
.
withSorted
(
(
x
y
)
=
>
(
x
>
=
y
)
)
;
assertEq
(
arraysEqual
(
sequence
[
87
3
5
888
321
42
]
)
true
)
;
assertEq
(
arraysEqual
(
sortedSequence
[
3
5
42
87
321
888
]
)
true
)
;
sequence
=
[
"
the
"
"
quick
"
"
fox
"
"
jumped
"
"
over
"
"
the
"
"
lazy
"
"
dog
"
]
;
sortedSequence
=
sequence
.
withSorted
(
)
;
assertEq
(
arraysEqual
(
sequence
[
"
the
"
"
quick
"
"
fox
"
"
jumped
"
"
over
"
"
the
"
"
lazy
"
"
dog
"
]
)
true
)
;
assertEq
(
arraysEqual
(
sortedSequence
[
"
dog
"
"
fox
"
"
jumped
"
"
lazy
"
"
over
"
"
quick
"
"
the
"
"
the
"
]
)
true
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withSorted
(
[
1
2
3
]
)
TypeError
)
;
function
unchanged
(
a
)
{
assertEq
(
arraysEqual
(
a
[
'
angel
'
'
clown
'
'
mandarin
'
'
sturgeon
'
]
)
true
)
;
}
myFish
=
[
'
angel
'
'
clown
'
'
mandarin
'
'
sturgeon
'
]
myFishSpliced
=
myFish
.
withSpliced
(
2
0
'
drum
'
)
unchanged
(
myFish
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
'
drum
'
'
mandarin
'
'
sturgeon
'
]
)
true
)
;
myFishSpliced
=
myFish
.
withSpliced
(
2
0
'
drum
'
'
guitar
'
)
;
unchanged
(
myFish
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
'
drum
'
'
guitar
'
'
mandarin
'
'
sturgeon
'
]
)
true
)
;
myFish1
=
[
'
angel
'
'
clown
'
'
drum
'
'
mandarin
'
'
sturgeon
'
]
myFishSpliced
=
myFish1
.
withSpliced
(
3
1
)
;
assertEq
(
arraysEqual
(
myFish1
[
'
angel
'
'
clown
'
'
drum
'
'
mandarin
'
'
sturgeon
'
]
)
true
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
'
drum
'
'
sturgeon
'
]
)
true
)
;
myFish2
=
[
'
angel
'
'
clown
'
'
drum
'
'
sturgeon
'
]
myFishSpliced
=
myFish2
.
withSpliced
(
2
1
'
trumpet
'
)
;
assertEq
(
arraysEqual
(
myFish2
[
'
angel
'
'
clown
'
'
drum
'
'
sturgeon
'
]
)
true
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
'
trumpet
'
'
sturgeon
'
]
)
true
)
;
myFish3
=
[
'
angel
'
'
clown
'
'
trumpet
'
'
sturgeon
'
]
myFishSpliced
=
myFish3
.
withSpliced
(
0
2
'
parrot
'
'
anemone
'
'
blue
'
)
;
assertEq
(
arraysEqual
(
myFish3
[
'
angel
'
'
clown
'
'
trumpet
'
'
sturgeon
'
]
)
true
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
parrot
'
'
anemone
'
'
blue
'
'
trumpet
'
'
sturgeon
'
]
)
true
)
;
myFish4
=
[
'
parrot
'
'
anemone
'
'
blue
'
'
trumpet
'
'
sturgeon
'
]
myFishSpliced
=
myFish4
.
withSpliced
(
2
2
)
;
assertEq
(
arraysEqual
(
myFish4
[
'
parrot
'
'
anemone
'
'
blue
'
'
trumpet
'
'
sturgeon
'
]
)
true
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
parrot
'
'
anemone
'
'
sturgeon
'
]
)
true
)
;
myFishSpliced
=
myFish
.
withSpliced
(
-
2
1
)
;
unchanged
(
myFish
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
'
sturgeon
'
]
)
true
)
;
myFishSpliced
=
myFish
.
withSpliced
(
2
)
;
unchanged
(
myFish
)
;
assertEq
(
arraysEqual
(
myFishSpliced
[
'
angel
'
'
clown
'
]
)
true
)
;
sequence
=
[
1
2
3
]
;
seq_withAt
=
sequence
.
withAt
(
1
42
)
;
assertEq
(
arraysEqual
(
sequence
[
1
2
3
]
)
true
)
;
assertEq
(
arraysEqual
(
seq_withAt
[
1
42
3
]
)
true
)
;
assertEq
(
arraysEqual
(
sequence
.
withAt
(
false
42
)
[
42
2
3
]
)
true
)
;
assertEq
(
arraysEqual
(
sequence
.
withAt
(
true
42
)
[
1
42
3
]
)
true
)
;
assertEq
(
arraysEqual
(
sequence
.
withAt
(
null
42
)
[
42
2
3
]
)
true
)
;
assertEq
(
arraysEqual
(
sequence
.
withAt
(
[
]
42
)
[
42
2
3
]
)
true
)
;
assertEq
(
arraysEqual
(
sequence
.
withAt
(
"
2
"
42
)
[
1
2
42
]
)
true
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
3
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
5
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
-
10
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
"
monkeys
"
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
Infinity
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
undefined
42
)
RangeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
sequence
.
withAt
(
function
(
)
{
}
42
)
RangeError
)
;
