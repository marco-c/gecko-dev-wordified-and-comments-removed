function
IsASCIIAlphaString_CharCodeAt
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
.
charCodeAt
(
i
)
;
if
(
!
(
(
0x41
<
=
c
&
&
c
<
=
0x5A
)
|
|
(
0x61
<
=
c
&
&
c
<
=
0x7A
)
)
)
return
false
;
}
return
true
;
}
function
IsASCIIAlphaString_CharAt
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
.
charAt
(
i
)
;
if
(
!
(
(
"
A
"
<
=
c
&
&
c
<
=
"
Z
"
)
|
|
(
"
a
"
<
=
c
&
&
c
<
=
"
z
"
)
)
)
return
false
;
}
return
true
;
}
function
IsASCIIAlphaString_GetElem
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
[
i
]
;
if
(
!
(
(
"
A
"
<
=
c
&
&
c
<
=
"
Z
"
)
|
|
(
"
a
"
<
=
c
&
&
c
<
=
"
z
"
)
)
)
return
false
;
}
return
true
;
}
function
IsGreekOrCyrillicString_CharCodeAt
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
.
charCodeAt
(
i
)
;
if
(
!
(
(
0x0370
<
=
c
&
&
c
<
=
0x03FF
)
|
|
(
0x400
<
=
c
&
&
c
<
=
0x052F
)
)
)
return
false
;
}
return
true
;
}
function
IsGreekOrCyrillicString_CharAt
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
.
charAt
(
i
)
;
if
(
!
(
(
"
"
<
=
c
&
&
c
<
=
"
"
)
|
|
(
"
"
<
=
c
&
&
c
<
=
"
"
)
)
)
return
false
;
}
return
true
;
}
function
IsGreekOrCyrillicString_GetElem
(
s
)
{
for
(
var
i
=
0
;
i
<
s
.
length
;
i
+
+
)
{
var
c
=
s
[
i
]
;
if
(
!
(
(
"
"
<
=
c
&
&
c
<
=
"
"
)
|
|
(
"
"
<
=
c
&
&
c
<
=
"
"
)
)
)
return
false
;
}
return
true
;
}
function
main
(
)
{
function
compareLatin1
(
)
{
var
strings
=
[
"
ABCABCABC
"
"
abcabcabc
"
]
;
var
q
=
0
;
for
(
var
i
=
0
;
i
<
200
;
+
+
i
)
{
var
str
=
strings
[
i
&
1
]
;
for
(
var
j
=
0
;
j
<
str
.
length
;
+
+
j
)
{
if
(
str
[
j
]
=
=
=
"
a
"
)
q
+
+
;
if
(
"
A
"
=
=
str
[
j
]
)
q
+
+
;
if
(
str
[
j
]
!
=
"
b
"
)
q
+
+
;
if
(
"
D
"
!
=
=
str
[
j
]
)
q
+
+
;
}
}
assertEq
(
q
100
*
3
+
100
*
3
+
100
*
15
+
100
*
18
)
;
}
function
compareTwoByte
(
)
{
var
strings
=
[
"
"
"
abcabcabc
"
]
;
var
q
=
0
;
for
(
var
i
=
0
;
i
<
200
;
+
+
i
)
{
var
str
=
strings
[
i
&
1
]
;
for
(
var
j
=
0
;
j
<
str
.
length
;
+
+
j
)
{
if
(
"
"
=
=
=
str
[
j
]
)
q
+
+
;
if
(
str
[
j
]
=
=
"
"
)
q
+
+
;
if
(
"
"
!
=
str
[
j
]
)
q
+
+
;
if
(
str
[
j
]
!
=
=
"
"
)
q
+
+
;
}
}
assertEq
(
q
100
*
3
+
100
*
3
+
100
*
15
+
100
*
18
)
;
}
function
compareRangeLatin1
(
)
{
var
strings
=
[
"
ABCABCABC
"
"
abcabcabc
"
"
abcABCabc
"
"
abcabc123
"
"
abc
[
_
]
ABC
"
"
ABC
{
|
}
abc
"
"
!
#
456_
~
"
"
aBcZyyZUU
"
]
;
for
(
var
i
=
0
;
i
<
200
;
+
+
i
)
{
var
str
=
strings
[
i
&
7
]
;
var
resultCharCodeAt
=
IsASCIIAlphaString_CharCodeAt
(
str
)
;
var
resultCharAt
=
IsASCIIAlphaString_CharAt
(
str
)
;
var
resultGetElem
=
IsASCIIAlphaString_GetElem
(
str
)
;
assertEq
(
resultCharAt
resultCharCodeAt
)
;
assertEq
(
resultGetElem
resultCharCodeAt
)
;
}
}
function
compareRangeTwoByte
(
)
{
var
strings
=
[
"
"
"
"
"
"
"
"
"
"
"
abc
"
"
"
"
abcabcabc
"
]
;
for
(
var
i
=
0
;
i
<
200
;
+
+
i
)
{
var
str
=
strings
[
i
&
7
]
;
var
resultCharCodeAt
=
IsGreekOrCyrillicString_CharCodeAt
(
str
)
;
var
resultCharAt
=
IsGreekOrCyrillicString_CharAt
(
str
)
;
var
resultGetElem
=
IsGreekOrCyrillicString_GetElem
(
str
)
;
assertEq
(
resultCharAt
resultCharCodeAt
)
;
assertEq
(
resultGetElem
resultCharCodeAt
)
;
}
}
compareLatin1
(
)
;
compareTwoByte
(
)
;
compareRangeLatin1
(
)
;
compareRangeTwoByte
(
)
;
}
for
(
var
i
=
0
;
i
<
15
;
+
+
i
)
{
main
(
)
;
}
