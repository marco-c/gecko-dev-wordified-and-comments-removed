if
(
getJitCompilerOptions
(
)
[
"
ion
.
warmup
.
trigger
"
]
<
=
100
)
setJitCompilerOption
(
"
ion
.
warmup
.
trigger
"
100
)
;
if
(
getJitCompilerOptions
(
)
[
"
ion
.
forceinlineCaches
"
]
)
setJitCompilerOption
(
"
ion
.
forceinlineCaches
"
0
)
;
var
resumeHere
=
function
(
i
)
{
if
(
i
>
=
99
)
bailout
(
)
;
}
;
var
uceFault
=
function
(
i
)
{
if
(
i
>
98
)
uceFault
=
function
(
i
)
{
return
true
;
}
;
return
false
;
}
;
var
global_arr
;
function
escape
(
arr
)
{
global_arr
=
arr
;
}
function
array0Length
(
i
)
{
var
a
=
[
]
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array0LengthBail
(
i
)
{
var
a
=
[
]
;
resumeHere
(
i
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array1Length
(
i
)
{
var
a
=
[
1
]
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array1LengthBail
(
i
)
{
var
a
=
[
1
]
;
resumeHere
(
i
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2Length
(
i
)
{
var
a
=
[
1
2
]
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2LengthBail
(
i
)
{
var
a
=
[
1
2
]
;
resumeHere
(
i
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array1Content
(
i
)
{
var
a
=
[
42
]
;
assertEq
(
a
[
0
]
42
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array1ContentBail0
(
i
)
{
var
a
=
[
42
]
;
resumeHere
(
i
)
;
assertEq
(
a
[
0
]
42
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array1ContentBail1
(
i
)
{
var
a
=
[
42
]
;
assertEq
(
a
[
0
]
42
)
;
resumeHere
(
i
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2Content
(
i
)
{
var
a
=
[
1
2
]
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
2
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2ContentBail0
(
i
)
{
var
a
=
[
1
2
]
;
resumeHere
(
i
)
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
2
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2ContentBail1
(
i
)
{
var
a
=
[
1
2
]
;
assertEq
(
a
[
0
]
1
)
;
resumeHere
(
i
)
;
assertEq
(
a
[
1
]
2
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
array2ContentBail2
(
i
)
{
var
a
=
[
1
2
]
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
2
)
;
resumeHere
(
i
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
arrayWrite1
(
i
)
{
var
a
=
[
1
2
]
;
a
[
0
]
=
42
;
assertEq
(
a
[
0
]
42
)
;
assertEq
(
a
[
1
]
2
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
arrayWrite2
(
i
)
{
var
a
=
[
1
2
]
;
a
.
length
=
1
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
undefined
)
;
assertRecoveredOnBailout
(
a
false
)
;
return
a
.
length
;
}
function
arrayWrite3
(
i
)
{
var
a
=
[
1
2
0
]
;
if
(
i
%
2
=
=
=
1
)
a
[
0
]
=
2
;
assertEq
(
a
[
0
]
1
+
(
i
%
2
)
)
;
assertRecoveredOnBailout
(
a
true
)
;
if
(
i
%
2
=
=
=
1
)
bailout
(
)
;
assertEq
(
a
[
0
]
1
+
(
i
%
2
)
)
;
return
a
.
length
;
}
function
arrayWrite4
(
i
)
{
var
a
=
[
1
2
0
]
;
for
(
var
x
=
0
;
x
<
2
;
x
+
+
)
{
if
(
x
%
2
=
=
=
1
)
bailout
(
)
;
else
a
[
0
]
=
a
[
0
]
+
1
;
}
assertEq
(
a
[
0
]
2
)
;
assertEq
(
a
[
1
]
2
)
;
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
arrayWriteDoubles
(
i
)
{
var
a
=
[
0
0
0
]
;
a
[
0
]
=
3
.
14
;
for
(
var
x
=
0
;
x
<
2
;
x
+
+
)
{
assertEq
(
a
[
0
]
3
.
14
)
;
assertEq
(
a
[
1
]
0
)
;
}
assertRecoveredOnBailout
(
a
true
)
;
return
a
.
length
;
}
function
arrayHole0
(
i
)
{
var
a
=
[
1
3
]
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
undefined
)
;
assertEq
(
a
[
2
]
3
)
;
assertRecoveredOnBailout
(
a
false
)
;
return
a
.
length
;
}
function
arrayHole1
(
i
)
{
var
a
=
[
1
3
]
;
assertEq
(
a
[
0
]
1
)
;
assertEq
(
a
[
1
]
100
)
;
assertEq
(
a
[
2
]
3
)
;
assertRecoveredOnBailout
(
a
false
)
;
return
a
.
length
;
}
function
build
(
l
)
{
var
arr
=
[
]
;
for
(
var
i
=
0
;
i
<
l
;
i
+
+
)
arr
.
push
(
i
)
;
return
arr
}
var
uceFault_arrayAlloc3
=
eval
(
uneval
(
uceFault
)
.
replace
(
'
uceFault
'
'
uceFault_arrayAlloc3
'
)
)
;
function
arrayAlloc
(
i
)
{
var
a
=
[
0
1
2
3
]
;
if
(
uceFault_arrayAlloc3
(
i
)
|
|
uceFault_arrayAlloc3
(
i
)
)
{
assertEq
(
a
[
0
]
0
)
;
assertEq
(
a
[
3
]
3
)
;
return
a
.
length
;
}
assertRecoveredOnBailout
(
a
true
)
;
return
0
;
}
;
eval
(
uneval
(
resumeHere
)
)
;
for
(
var
i
=
0
;
i
<
100
;
i
+
+
)
{
array0Length
(
i
)
;
array0LengthBail
(
i
)
;
array1Length
(
i
)
;
array1LengthBail
(
i
)
;
array2Length
(
i
)
;
array2LengthBail
(
i
)
;
array1Content
(
i
)
;
array1ContentBail0
(
i
)
;
array1ContentBail1
(
i
)
;
array2Content
(
i
)
;
array2ContentBail0
(
i
)
;
array2ContentBail1
(
i
)
;
array2ContentBail2
(
i
)
;
arrayWrite1
(
i
)
;
arrayWrite2
(
i
)
;
arrayWrite3
(
i
)
;
arrayWrite4
(
i
)
;
arrayWriteDoubles
(
i
)
;
arrayHole0
(
i
)
;
arrayAlloc
(
i
)
;
}
Object
.
defineProperty
(
Array
.
prototype
1
{
value
:
100
configurable
:
true
enumerable
:
true
writable
:
true
}
)
;
for
(
var
i
=
0
;
i
<
100
;
i
+
+
)
{
arrayHole1
(
i
)
;
}
