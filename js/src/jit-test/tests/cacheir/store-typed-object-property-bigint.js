var
xs
=
[
new
new
TypedObject
.
StructType
(
{
foo
:
TypedObject
.
bigint64
}
)
new
new
TypedObject
.
StructType
(
{
foo
:
TypedObject
.
biguint64
}
)
]
;
function
storeConstantZero
(
)
{
var
value
=
0n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeConstantZero
(
)
;
function
storeInlineDigits
(
)
{
var
value
=
1n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeInlineDigits
(
)
;
function
storeInlineDigitsNegative
(
)
{
var
value
=
-
1n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeInlineDigitsNegative
(
)
;
function
storeInlineDigitsTwoDigits
(
)
{
var
value
=
4294967296n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeInlineDigitsTwoDigits
(
)
;
function
storeInlineDigitsTwoDigitsNegative
(
)
{
var
value
=
-
4294967296n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeInlineDigitsTwoDigitsNegative
(
)
;
function
storeHeapDigits
(
)
{
var
value
=
2n
*
*
1000n
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeHeapDigits
(
)
;
function
storeHeapDigitsNegative
(
)
{
var
value
=
-
(
2n
*
*
1000n
)
;
for
(
var
i
=
0
;
i
<
100
;
+
+
i
)
{
var
ta
=
xs
[
i
&
1
]
;
ta
.
foo
=
value
;
}
assertEq
(
xs
[
0
]
.
foo
BigInt
.
asIntN
(
64
value
)
)
;
assertEq
(
xs
[
1
]
.
foo
BigInt
.
asUintN
(
64
value
)
)
;
}
storeHeapDigitsNegative
(
)
;
