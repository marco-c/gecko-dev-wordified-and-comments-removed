load
(
libdir
+
"
asserts
.
js
"
)
;
function
makeConstantCompareFn
(
val
op
)
{
return
new
Function
(
'
val
'
return
val
{
op
}
{
val
}
;
)
;
}
{
function
testConstantCompareFn
(
fn
i
expectedOnSuccess
)
{
assertEq
(
fn
(
i
)
expectedOnSuccess
)
;
assertEq
(
fn
(
i
+
1
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
i
-
1
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
i
+
0
.
5
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
i
-
0
.
5
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
String
(
i
)
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
String
(
i
+
1
)
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
String
(
i
-
1
)
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
true
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
false
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
null
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
undefined
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
NaN
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
Infinity
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
-
Infinity
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
{
}
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
[
]
)
!
expectedOnSuccess
)
;
if
(
i
=
=
=
0
)
{
assertEq
(
fn
(
+
0
)
expectedOnSuccess
)
;
assertEq
(
fn
(
-
0
)
expectedOnSuccess
)
;
assertEq
(
fn
(
0
.
0
)
expectedOnSuccess
)
;
assertEq
(
fn
(
-
0
.
0
)
expectedOnSuccess
)
;
}
assertEq
(
fn
(
9007199254740992
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
-
9007199254740993
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
BigInt
(
i
)
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
BigInt
(
i
+
1
)
)
!
expectedOnSuccess
)
;
assertEq
(
fn
(
BigInt
(
i
-
1
)
)
!
expectedOnSuccess
)
;
}
for
(
let
i
=
-
128
;
i
<
=
127
;
i
+
+
)
{
const
fnEq
=
makeConstantCompareFn
(
i
'
=
=
=
'
)
;
const
fnNe
=
makeConstantCompareFn
(
i
'
!
=
=
'
)
;
testConstantCompareFn
(
fnEq
i
true
)
;
testConstantCompareFn
(
fnNe
i
false
)
;
}
}
