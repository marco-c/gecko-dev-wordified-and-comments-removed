load
(
libdir
+
"
asm
.
js
"
)
;
let
useCounters
=
getUseCounterResults
(
)
;
assertEq
(
useCounters
.
AsmJS
0
)
;
assertEq
(
useCounters
.
UseAsm
1
)
;
assertEq
(
useCounters
.
Wasm
0
)
;
asmLink
(
asmCompile
(
USE_ASM
+
"
function
f
(
i
)
{
i
=
i
|
0
;
return
(
i
*
2
)
|
0
}
return
f
"
)
)
;
Function
.
apply
(
null
[
USE_ASM
+
"
function
f
(
)
{
i
=
i
|
0
}
function
g
(
)
{
f
(
0
)
}
return
g
"
]
)
;
function
valid
(
)
{
"
use
asm
"
;
function
f
(
i
)
{
i
=
i
|
0
;
return
(
i
*
2
)
|
0
}
return
f
;
}
let
f
=
valid
(
)
;
assertEq
(
f
(
0
)
0
)
;
assertEq
(
f
(
1
)
2
)
;
useCounters
=
getUseCounterResults
(
)
;
assertEq
(
useCounters
.
AsmJS
isAsmJSCompilationAvailable
(
)
?
2
:
0
)
;
assertEq
(
useCounters
.
UseAsm
3
)
;
assertEq
(
useCounters
.
Wasm
0
)
;
