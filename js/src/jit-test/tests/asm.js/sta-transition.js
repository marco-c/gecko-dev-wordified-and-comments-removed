load
(
libdir
+
"
asm
.
js
"
)
;
if
(
!
this
.
SharedArrayBuffer
|
|
!
isAsmJSCompilationAvailable
(
)
)
quit
(
0
)
;
setJitCompilerOption
(
'
asmjs
.
atomics
.
enable
'
1
)
;
var
m1
=
asmCompile
(
"
stdlib
"
"
ffi
"
"
heap
"
"
use
asm
"
;
var
i8
=
new
stdlib
.
Int8Array
(
heap
)
;
var
add
=
stdlib
.
Atomics
.
add
;
function
f
(
)
{
add
(
i8
0
1
)
;
return
37
;
}
return
{
f
:
f
}
)
;
assertEq
(
isAsmJSModule
(
m1
)
true
)
;
var
{
f
}
=
m1
(
this
{
}
new
SharedArrayBuffer
(
65536
)
)
;
assertEq
(
f
(
)
37
)
;
var
m4
=
asmCompile
(
"
stdlib
"
"
ffi
"
"
heap
"
"
use
asm
"
;
var
i8
=
new
stdlib
.
Int8Array
(
heap
)
;
function
i
(
)
{
return
i8
[
0
]
|
0
;
}
return
{
i
:
i
}
)
;
assertEq
(
isAsmJSModule
(
m4
)
true
)
;
var
{
i
}
=
m4
(
this
{
}
new
SharedArrayBuffer
(
65536
)
)
;
assertEq
(
isAsmJSFunction
(
i
)
false
)
;
