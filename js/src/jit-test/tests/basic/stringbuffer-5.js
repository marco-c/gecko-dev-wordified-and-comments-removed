gczeal
(
0
)
;
var
strLatin1
=
newString
(
"
abcdefghijklmnopqrstuvwxyz
"
.
repeat
(
10
)
{
newStringBuffer
:
true
}
)
;
var
strTwoByte
=
newString
(
"
abcdefghijklmnopqrstuvwx
\
u3210
\
u1234
"
.
repeat
(
10
)
{
newStringBuffer
:
true
}
)
;
function
checkRefCount
(
s
expected
)
{
if
(
getBuildConfiguration
(
"
debug
"
)
)
{
var
repr
=
JSON
.
parse
(
stringRepresentation
(
s
)
)
;
assertEq
(
repr
.
bufferRefCount
expected
)
;
}
}
function
test
(
)
{
checkRefCount
(
strLatin1
1
)
;
checkRefCount
(
strTwoByte
1
)
;
var
clonebufferSameProcess
=
serialize
(
[
strLatin1
strTwoByte
strLatin1
strTwoByte
]
[
]
{
scope
:
"
SameProcess
"
}
)
;
assertEq
(
clonebufferSameProcess
.
arraybuffer
.
byteLength
<
200
true
)
;
checkRefCount
(
strLatin1
3
)
;
checkRefCount
(
strTwoByte
3
)
;
var
arr1
=
deserialize
(
clonebufferSameProcess
)
;
assertEq
(
arr1
.
length
4
)
;
assertEq
(
arr1
[
0
]
strLatin1
)
;
assertEq
(
arr1
[
1
]
strTwoByte
)
;
assertEq
(
arr1
[
2
]
strLatin1
)
;
assertEq
(
arr1
[
3
]
strTwoByte
)
;
checkRefCount
(
strLatin1
5
)
;
checkRefCount
(
strTwoByte
5
)
;
var
clonebufferDifferentProcess
=
serialize
(
[
strLatin1
strTwoByte
strLatin1
strTwoByte
]
[
]
{
scope
:
"
DifferentProcess
"
}
)
;
assertEq
(
clonebufferDifferentProcess
.
arraybuffer
.
byteLength
>
500
true
)
;
var
arr2
=
deserialize
(
clonebufferDifferentProcess
)
;
assertEq
(
arr2
.
length
4
)
;
assertEq
(
arr2
[
0
]
strLatin1
)
;
assertEq
(
arr2
[
1
]
strTwoByte
)
;
assertEq
(
arr2
[
2
]
strLatin1
)
;
assertEq
(
arr2
[
3
]
strTwoByte
)
;
checkRefCount
(
strLatin1
5
)
;
checkRefCount
(
strTwoByte
5
)
;
}
test
(
)
;
gc
(
)
;
checkRefCount
(
strLatin1
1
)
;
checkRefCount
(
strTwoByte
1
)
;
function
testAtom
(
)
{
var
sourceLatin1
=
"
abcde
"
.
repeat
(
200
)
;
var
reLatin1
=
new
RegExp
(
sourceLatin1
)
;
var
sourceTwoByte
=
"
abcd
\
u1234
"
.
repeat
(
200
)
;
var
reTwoByte
=
new
RegExp
(
sourceTwoByte
)
;
var
clonebuffer
=
serialize
(
[
reLatin1
reTwoByte
]
[
]
{
scope
:
"
SameProcess
"
}
)
;
var
arr
=
deserialize
(
clonebuffer
)
;
assertEq
(
arr
.
length
2
)
;
assertEq
(
arr
[
0
]
.
source
sourceLatin1
)
;
assertEq
(
arr
[
1
]
.
source
sourceTwoByte
)
;
}
testAtom
(
)
;
