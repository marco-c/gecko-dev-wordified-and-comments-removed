if
(
!
(
this
.
SharedArrayBuffer
&
&
this
.
getSharedArrayBuffer
&
&
this
.
setSharedArrayBuffer
)
)
quit
(
0
)
;
const
numWorkers
=
4
;
const
iterCount
=
255
;
const
sabLength
=
1024
;
const
oddResult
=
(
function
(
)
{
var
v
=
0
;
for
(
var
j
=
0
;
j
<
numWorkers
;
j
+
+
)
v
|
=
(
iterCount
<
<
(
8
*
j
)
)
;
return
v
;
}
)
(
)
;
const
evenResult
=
0
;
const
sab
=
new
SharedArrayBuffer
(
sabLength
)
;
setSharedArrayBuffer
(
sab
)
;
const
iab
=
new
SharedInt32Array
(
sab
)
;
function
testRun
(
limit
)
{
console
.
log
(
"
Limit
=
"
+
limit
)
;
for
(
var
i
=
0
;
i
<
numWorkers
;
i
+
+
)
{
evalInWorker
(
const
iab
=
new
SharedInt32Array
(
getSharedArrayBuffer
(
)
)
;
const
v
=
1
<
<
(
8
*
{
i
}
)
;
for
(
var
i
=
0
;
i
<
{
limit
}
;
i
+
+
)
{
for
(
var
k
=
0
;
k
<
{
iterCount
}
;
k
+
+
)
{
if
(
i
&
1
)
{
for
(
var
j
=
1
;
j
<
iab
.
length
;
j
+
+
)
Atomics
.
sub
(
iab
j
v
)
;
}
else
{
for
(
var
j
=
1
;
j
<
iab
.
length
;
j
+
+
)
Atomics
.
add
(
iab
j
v
)
;
}
}
}
Atomics
.
add
(
iab
0
1
)
;
)
;
}
while
(
Atomics
.
load
(
iab
0
)
!
=
numWorkers
)
;
Atomics
.
store
(
iab
0
0
)
;
const
v
=
(
limit
&
1
)
?
oddResult
:
evenResult
;
for
(
var
i
=
1
;
i
<
iab
.
length
;
i
+
+
)
{
assertEq
(
iab
[
i
]
v
)
;
iab
[
i
]
=
0
;
}
}
function
fib
(
n
)
{
if
(
n
<
2
)
return
n
;
return
fib
(
n
-
1
)
+
fib
(
n
-
2
)
;
}
const
limit
=
(
function
(
)
{
var
val
=
5
;
if
(
typeof
getJitCompilerOptions
=
=
"
function
"
)
{
var
opt
=
getJitCompilerOptions
(
)
;
if
(
opt
[
"
ion
.
enable
"
]
)
val
=
10
;
}
return
val
;
}
)
(
)
;
console
.
log
(
"
This
test
can
easily
take
60s
on
2015
-
class
x86
hardware
"
)
;
for
(
var
i
=
2
;
i
<
limit
;
i
+
+
)
testRun
(
fib
(
i
)
)
;
