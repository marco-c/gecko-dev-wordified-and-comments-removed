if
(
getJitCompilerOptions
(
)
[
"
ion
.
warmup
.
trigger
"
]
!
=
30
)
setJitCompilerOption
(
"
ion
.
warmup
.
trigger
"
30
)
;
if
(
getJitCompilerOptions
(
)
[
"
baseline
.
warmup
.
trigger
"
]
!
=
10
)
setJitCompilerOption
(
"
baseline
.
warmup
.
trigger
"
10
)
;
function
checkLcov
(
fun
)
{
var
keys
=
[
"
TN
"
"
SF
"
"
FN
"
"
FNDA
"
"
FNF
"
"
FNH
"
"
BRDA
"
"
BRF
"
"
BRH
"
"
DA
"
"
LF
"
"
LH
"
]
;
function
startsWithKey
(
s
)
{
for
(
k
of
keys
)
{
if
(
s
.
startsWith
(
k
)
)
return
true
;
}
return
false
;
}
;
var
source
=
fun
.
toSource
(
)
;
source
=
source
.
slice
(
source
.
indexOf
(
'
{
'
)
+
1
source
.
lastIndexOf
(
'
}
'
)
)
;
var
lcovRef
=
[
]
;
var
currLine
=
0
;
var
currFun
=
"
<
badfunction
>
"
;
for
(
var
line
of
source
.
split
(
'
\
n
'
)
)
{
currLine
+
+
;
for
(
var
comment
of
line
.
split
(
"
/
/
"
)
.
slice
(
1
)
)
{
if
(
!
startsWithKey
(
comment
)
)
continue
;
comment
=
comment
.
trim
(
)
;
if
(
comment
.
startsWith
(
"
FN
:
"
)
)
currFun
=
comment
.
split
(
'
'
)
[
1
]
;
comment
=
comment
.
replace
(
'
'
currLine
)
;
comment
=
comment
.
replace
(
'
%
'
currFun
)
;
lcovRef
.
push
(
comment
)
;
}
}
var
g
=
newGlobal
(
)
;
g
.
eval
(
source
)
;
var
lcovResRaw
=
getLcovInfo
(
g
)
;
var
lcovRes
=
lcovResRaw
.
split
(
'
\
n
'
)
;
for
(
ref
of
lcovRef
)
{
if
(
lcovRes
.
indexOf
(
ref
)
=
=
-
1
)
{
print
(
"
Cannot
find
"
+
ref
+
"
in
the
following
Lcov
result
:
\
n
"
lcovResRaw
)
;
print
(
"
In
the
following
source
:
\
n
"
source
)
;
assertEq
(
true
false
)
;
}
}
}
checkLcov
(
function
(
)
{
"
"
.
split
(
'
'
)
;
}
)
;
checkLcov
(
function
(
)
{
function
f
(
)
{
"
"
.
split
(
'
'
)
;
}
"
"
.
split
(
'
'
)
;
}
)
;
checkLcov
(
function
(
)
{
function
f
(
)
{
"
"
.
split
(
'
'
)
;
}
f
(
)
;
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
3
)
l
.
push
(
'
'
)
;
l
.
pop
(
)
;
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
2
)
l
.
push
(
'
'
)
;
l
.
pop
(
)
;
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
3
)
l
.
push
(
'
'
)
;
else
l
.
pop
(
)
;
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
2
)
l
.
push
(
'
'
)
;
else
l
.
pop
(
)
;
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
2
)
l
.
push
(
'
'
)
;
else
{
if
(
l
.
length
=
=
1
)
l
.
pop
(
)
;
}
}
)
;
checkLcov
(
function
(
)
{
function
f
(
i
)
{
var
x
=
0
;
while
(
i
-
-
)
{
x
+
=
i
;
x
=
x
/
2
;
}
return
x
;
}
f
(
5
)
;
f
(
5
)
;
}
)
;
checkLcov
(
function
(
)
{
try
{
var
l
=
"
"
.
split
(
'
'
)
;
if
(
l
.
length
=
=
2
)
{
l
.
push
(
'
'
)
;
throw
l
;
}
l
.
pop
(
)
;
}
catch
(
x
)
{
x
.
pop
(
)
;
}
}
)
;
checkLcov
(
function
(
)
{
var
l
=
"
"
.
split
(
'
'
)
;
try
{
try
{
if
(
l
.
length
=
=
2
)
{
l
.
push
(
'
'
)
;
throw
l
;
}
l
.
pop
(
)
;
}
finally
{
l
.
pop
(
)
;
}
}
catch
(
x
)
{
}
}
)
;
checkLcov
(
function
(
)
{
function
f
(
)
{
throw
1
;
f
(
)
;
}
var
l
=
"
"
.
split
(
'
'
)
;
try
{
f
(
)
;
f
(
)
;
}
catch
(
x
)
{
}
}
)
;
