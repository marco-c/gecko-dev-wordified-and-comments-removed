load
(
libdir
+
"
asserts
.
js
"
)
;
load
(
libdir
+
"
array
-
compare
.
js
"
)
;
if
(
!
wasmDebuggingIsSupported
(
)
)
quit
(
)
;
var
g
=
newGlobal
(
)
;
var
dbg
=
new
Debugger
(
g
)
;
var
s
;
dbg
.
onNewScript
=
(
script
)
=
>
{
s
=
script
;
}
g
.
eval
(
o
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
'
(
module
(
func
)
(
export
"
"
0
)
)
'
)
)
)
;
)
;
assertEq
(
s
.
format
"
wasm
"
)
;
var
source
=
s
.
source
;
assertEq
(
source
.
text
.
includes
(
'
module
'
)
false
)
;
assertThrowsInstanceOf
(
(
)
=
>
source
.
binary
Error
)
;
dbg
.
allowWasmBinarySource
=
true
;
g
.
eval
(
o
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
'
(
module
(
func
)
(
export
"
"
0
)
)
'
)
)
)
;
)
;
assertEq
(
s
.
format
"
wasm
"
)
;
var
source2
=
s
.
source
;
assertEq
(
source2
.
text
'
[
wasm
]
'
)
;
arraysEqual
(
source2
.
binary
wasmTextToBinary
(
'
(
module
(
func
)
(
export
"
"
0
)
)
'
)
)
;
