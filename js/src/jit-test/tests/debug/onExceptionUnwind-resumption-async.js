load
(
libdir
+
"
asserts
.
js
"
)
;
var
g
=
newGlobal
(
)
;
var
dbg
=
Debugger
(
g
)
;
g
.
eval
(
async
function
f
(
)
{
return
e
;
}
)
;
var
currentFrame
;
var
uncaughtException
;
dbg
.
uncaughtExceptionHook
=
function
(
e
)
{
uncaughtException
=
e
;
return
{
return
:
currentFrame
.
eval
(
"
(
{
done
:
true
value
:
'
uncaught
'
}
)
"
)
.
return
}
;
}
;
function
testUncaughtException
(
)
{
uncaughtException
=
undefined
;
var
val
=
g
.
eval
(
var
val
;
f
(
)
.
then
(
v
=
>
{
val
=
v
}
)
;
drainJobQueue
(
)
;
val
;
)
;
assertEq
(
val
"
uncaught
"
)
;
assertEq
(
uncaughtException
instanceof
TypeError
true
)
;
}
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
return
undefined
;
}
;
g
.
eval
(
var
E
;
f
(
)
.
catch
(
e
=
>
{
exc
=
e
}
)
;
drainJobQueue
(
)
;
assertEq
(
exc
instanceof
ReferenceError
true
)
;
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
"
foo
"
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
value
:
10
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
done
:
true
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
done
:
10
value
:
10
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
get
done
(
)
{
return
true
;
}
value
:
10
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
done
:
true
get
value
(
)
{
return
10
;
}
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
new
Proxy
(
{
done
:
true
value
:
10
}
{
}
)
"
)
.
return
}
;
}
;
testUncaughtException
(
)
;
dbg
.
onExceptionUnwind
=
function
(
frame
)
{
currentFrame
=
frame
;
return
{
return
:
frame
.
eval
(
"
(
{
done
:
true
value
:
10
}
)
"
)
.
return
}
;
}
;
var
val
=
g
.
eval
(
var
val
;
f
(
)
.
then
(
v
=
>
{
val
=
v
}
)
;
drainJobQueue
(
)
;
val
;
)
;
assertEq
(
val
10
)
;
