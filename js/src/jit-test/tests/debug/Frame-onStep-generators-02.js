load
(
libdir
+
"
asserts
.
js
"
)
;
let
g
=
newGlobal
(
{
newCompartment
:
true
}
)
;
g
.
eval
(
\
function
*
z
(
)
{
/
/
line
1
yield
1
;
/
/
2
yield
2
;
/
/
3
}
/
/
4
function
f
(
)
{
/
/
5
let
gen
=
z
(
)
;
/
/
6
gen
.
next
(
)
;
/
/
7
gen
.
throw
(
"
fit
"
)
;
/
/
8
}
/
/
9
)
;
let
log
=
"
"
;
let
previousLine
=
-
1
;
let
dbg
=
new
Debugger
(
g
)
;
dbg
.
onEnterFrame
=
frame
=
>
{
log
+
=
frame
.
callee
.
name
+
"
{
"
;
frame
.
onStep
=
(
)
=
>
{
let
line
=
frame
.
script
.
getOffsetLocation
(
frame
.
offset
)
.
lineNumber
;
if
(
previousLine
!
=
line
)
{
log
+
=
line
;
previousLine
=
line
;
}
}
;
frame
.
onPop
=
completion
=
>
{
if
(
"
throw
"
in
completion
)
log
+
=
"
!
"
;
log
+
=
"
}
"
;
}
}
;
assertThrowsValue
(
(
)
=
>
g
.
f
(
)
"
fit
"
)
;
assertEq
(
log
"
f
{
56z
{
1
}
67z
{
12
}
78z
{
!
}
!
}
"
)
;
