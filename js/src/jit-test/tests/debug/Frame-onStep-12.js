var
bitOfCode
=
debugger
;
/
/
+
0
if
(
false
)
{
/
/
+
1
for
(
var
b
=
0
;
b
<
0
;
b
+
+
)
{
/
/
+
2
c
=
2
/
/
+
3
}
/
/
+
4
}
;
var
g
=
newGlobal
(
)
;
var
dbg
=
Debugger
(
g
)
;
g
.
eval
(
"
function
nothing
(
)
{
}
\
n
"
)
;
var
log
=
'
'
;
dbg
.
onDebuggerStatement
=
function
(
frame
)
{
let
debugLine
=
frame
.
script
.
getOffsetLocation
(
frame
.
offset
)
.
lineNumber
;
frame
.
onStep
=
function
(
)
{
let
foundLine
=
this
.
script
.
getOffsetLocation
(
this
.
offset
)
.
lineNumber
;
if
(
this
.
script
.
getLineOffsets
(
foundLine
)
.
indexOf
(
this
.
offset
)
>
=
0
)
{
log
+
=
(
foundLine
-
debugLine
)
.
toString
(
16
)
;
}
}
;
}
;
function
testOne
(
name
body
expected
)
{
print
(
name
)
;
log
=
'
'
;
g
.
eval
(
function
{
name
}
(
)
{
{
body
}
}
)
;
g
.
eval
(
{
name
}
(
)
;
)
;
assertEq
(
log
expected
)
;
}
testOne
(
"
testTryFinally
"
try
{
{
bitOfCode
}
}
finally
{
/
/
+
6
}
/
/
+
7
nothing
(
)
;
/
/
+
8
"
1689
"
)
;
testOne
(
"
testTryCatch
"
try
{
{
bitOfCode
}
}
catch
(
e
)
{
/
/
+
6
}
/
/
+
7
nothing
(
)
;
/
/
+
8
"
189
"
)
;
testOne
(
"
testCatchFinally
"
try
{
throw
new
TypeError
(
)
;
}
catch
(
e
)
{
{
bitOfCode
}
}
finally
{
/
/
+
6
}
/
/
+
7
nothing
(
)
;
/
/
+
8
"
1689
"
)
;
testOne
(
"
testCatch
"
try
{
throw
new
TypeError
(
)
;
}
catch
(
e
if
e
instanceof
TypeError
)
{
{
bitOfCode
}
}
catch
(
e
)
{
/
/
+
6
}
/
/
+
7
nothing
(
)
;
/
/
+
8
"
189
"
)
;
testOne
(
"
testFinally
"
try
{
}
finally
{
{
bitOfCode
}
}
/
/
+
6
nothing
(
)
;
/
/
+
7
"
178
"
)
;
testOne
(
"
testThen
"
if
(
1
=
=
=
1
)
{
{
bitOfCode
}
}
else
{
/
/
+
6
}
/
/
+
7
nothing
(
)
;
/
/
+
8
"
189
"
)
;
testOne
(
"
testSwitch
"
var
x
=
5
;
switch
(
x
)
{
case
5
:
{
bitOfCode
}
}
/
/
+
6
nothing
(
)
;
/
/
+
7
"
178
"
)
;
