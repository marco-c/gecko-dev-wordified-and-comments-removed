load
(
libdir
+
"
wasm
.
js
"
)
;
if
(
!
wasmDebuggingIsSupported
(
)
)
quit
(
)
;
var
onBreakpointCalled
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
wasmScript
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
assertEq
(
breakpoints
.
length
3
)
;
assertEq
(
breakpoints
[
0
]
.
offset
>
0
true
)
;
assertEq
(
breakpoints
[
0
]
.
offset
<
breakpoints
[
1
]
.
offset
true
)
;
assertEq
(
breakpoints
[
1
]
.
offset
<
breakpoints
[
2
]
.
offset
true
)
;
onBreakpointCalled
=
0
;
breakpoints
.
forEach
(
function
(
bp
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
{
hit
:
(
frame
)
=
>
{
assertEq
(
frame
.
offset
offset
)
;
onBreakpointCalled
+
+
;
}
}
)
;
}
)
;
}
function
(
{
dbg
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
3
)
;
}
)
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
wasmScript
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
onBreakpointCalled
=
0
;
var
handlers
=
[
]
;
breakpoints
.
forEach
(
function
(
bp
i
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
handlers
[
i
]
=
{
hit
:
(
frame
)
=
>
{
assertEq
(
frame
.
offset
breakpoints
[
0
]
.
offset
)
;
onBreakpointCalled
+
+
;
handlers
.
forEach
(
h
=
>
wasmScript
.
clearBreakpoint
(
h
)
)
;
}
}
)
;
}
)
;
}
function
(
{
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
1
)
;
}
)
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
wasmScript
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
onBreakpointCalled
=
0
;
var
handlers
=
[
]
;
breakpoints
.
forEach
(
function
(
bp
i
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
handlers
[
i
]
=
{
hit
:
(
frame
)
=
>
{
assertEq
(
frame
.
offset
breakpoints
[
0
]
.
offset
)
;
onBreakpointCalled
+
+
;
handlers
.
forEach
(
h
=
>
wasmScript
.
clearBreakpoint
(
h
)
)
;
}
}
)
;
}
)
;
}
function
(
{
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
1
)
;
}
)
;
var
onStepCalled
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
dbg
wasmScript
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
onBreakpointCalled
=
0
;
onStepCalled
=
[
]
;
var
handlers
=
[
]
;
breakpoints
.
forEach
(
function
(
bp
i
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
handlers
[
i
]
=
{
hit
:
(
frame
)
=
>
{
assertEq
(
false
true
)
;
onBreakpointCalled
+
+
;
}
}
)
;
}
)
;
dbg
.
onEnterFrame
=
function
(
frame
)
{
if
(
frame
.
type
!
=
'
wasmcall
'
)
return
;
frame
.
onStep
=
function
(
)
{
onStepCalled
.
push
(
frame
.
offset
)
;
}
;
handlers
.
forEach
(
h
=
>
wasmScript
.
clearBreakpoint
(
h
)
)
;
}
;
}
function
(
{
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
0
)
;
assertEq
(
onStepCalled
.
length
3
)
;
}
)
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
wasmScript
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
onBreakpointCalled
=
0
;
breakpoints
.
forEach
(
function
(
bp
i
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
{
hit
:
(
frame
)
=
>
{
assertEq
(
frame
.
offset
breakpoints
[
0
]
.
offset
)
;
onBreakpointCalled
+
+
;
wasmScript
.
clearAllBreakpoints
(
)
;
}
}
)
;
}
)
;
}
function
(
{
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
1
)
;
}
)
;
wasmRunWithDebugger
(
'
(
module
(
func
(
nop
)
(
nop
)
)
(
export
"
test
"
0
)
)
'
undefined
function
(
{
dbg
wasmScript
g
}
)
{
var
breakpoints
=
wasmGetScriptBreakpoints
(
wasmScript
)
;
onBreakpointCalled
=
0
;
breakpoints
.
forEach
(
function
(
bp
i
)
{
var
offset
=
bp
.
offset
;
wasmScript
.
setBreakpoint
(
offset
{
hit
:
(
frame
)
=
>
{
onBreakpointCalled
+
+
;
}
}
)
;
}
)
;
dbg
.
onEnterFrame
=
function
(
frame
)
{
dbg
.
removeDebuggee
(
g
)
;
}
;
}
function
(
{
error
}
)
{
assertEq
(
error
undefined
)
;
assertEq
(
onBreakpointCalled
0
)
;
}
)
;
