const
{
Instance
compile
compileStreaming
}
=
WebAssembly
;
for
(
let
i
=
0
;
i
<
200
;
i
+
+
)
{
gc
(
undefined
"
shrinking
"
)
;
function
compileAndRun
(
x
g
)
{
var
cache
=
streamCacheEntry
(
wasmTextToBinary
(
x
)
)
;
compileStreaming
(
cache
)
.
then
(
function
(
m
)
{
g
(
new
Instance
(
m
undefined
)
)
;
return
compileStreaming
(
cache
)
;
}
)
.
then
(
function
(
m
)
{
g
(
new
Instance
(
m
undefined
)
)
;
}
)
;
drainJobQueue
(
)
;
}
compileAndRun
(
'
(
module
\
(
func
test
(
param
i64
)
(
result
f64
)
local
.
get
0
f64
.
convert_u
/
i64
)
\
(
func
(
export
"
run
"
)
(
result
i32
)
i64
.
const
1
call
test
f64
.
const
1
f64
.
eq
)
\
)
'
function
(
i
)
{
}
)
;
compileAndRun
(
'
(
module
\
(
func
(
export
"
run
"
)
(
result
i64
)
(
i64
.
const
1
)
)
\
)
'
function
(
i
)
{
i
.
exports
.
run
(
)
;
}
)
;
}
