if
(
!
wasmBulkMemSupported
(
)
)
quit
(
0
)
;
function
do_test
(
insn1
insn2
errKind
errText
isMem
haveMemOrTable
)
{
let
preamble
;
if
(
isMem
)
{
let
mem_def
=
haveMemOrTable
?
"
(
memory
1
1
)
"
:
"
"
;
let
mem_init
=
haveMemOrTable
?
(
data
(
i32
.
const
2
)
"
\
\
03
\
\
01
\
\
04
\
\
01
"
)
(
data
passive
"
\
\
02
\
\
07
\
\
01
\
\
08
"
)
(
data
(
i32
.
const
12
)
"
\
\
07
\
\
05
\
\
02
\
\
03
\
\
06
"
)
(
data
passive
"
\
\
05
\
\
09
\
\
02
\
\
07
\
\
06
"
)
:
"
"
;
preamble
=
;
;
-
-
-
-
-
-
-
-
Memories
-
-
-
-
-
-
-
-
{
mem_def
}
;
;
-
-
-
-
-
-
-
-
Memory
initialisers
-
-
-
-
-
-
-
-
{
mem_init
}
;
}
else
{
let
tab_def
=
haveMemOrTable
?
"
(
table
30
30
anyfunc
)
"
:
"
"
;
let
tab_init
=
haveMemOrTable
?
(
elem
(
i32
.
const
2
)
3
1
4
1
)
(
elem
passive
2
7
1
8
)
(
elem
(
i32
.
const
12
)
7
5
2
3
6
)
(
elem
passive
5
9
2
7
6
)
:
"
"
;
preamble
=
;
;
-
-
-
-
-
-
-
-
Tables
-
-
-
-
-
-
-
-
{
tab_def
}
;
;
-
-
-
-
-
-
-
-
Table
initialisers
-
-
-
-
-
-
-
-
{
tab_init
}
;
;
-
-
-
-
-
-
Functions
(
0
.
.
9
)
referred
by
the
table
/
esegs
-
-
-
-
-
-
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
}
let
txt
=
"
(
module
\
n
"
+
preamble
+
;
;
-
-
-
-
-
-
-
-
testfn
-
-
-
-
-
-
-
-
(
func
(
export
"
testfn
"
)
{
insn1
}
{
insn2
}
)
)
;
if
(
!
!
errKind
)
{
assertErrorMessage
(
(
)
=
>
{
let
inst
=
wasmEvalText
(
txt
)
;
inst
.
exports
.
testfn
(
)
;
}
errKind
errText
)
;
}
else
{
let
inst
=
wasmEvalText
(
txt
)
;
assertEq
(
undefined
inst
.
exports
.
testfn
(
)
)
;
}
}
function
mem_test
(
insn1
insn2
errKind
errText
haveMem
=
true
)
{
do_test
(
insn1
insn2
errKind
errText
true
haveMem
)
;
}
function
mem_test_nofail
(
insn1
insn2
)
{
do_test
(
insn1
insn2
undefined
undefined
true
true
)
;
}
function
tab_test
(
insn1
insn2
errKind
errText
haveTab
=
true
)
{
do_test
(
insn1
insn2
errKind
errText
false
haveTab
)
;
}
function
tab_test_nofail
(
insn1
insn2
)
{
do_test
(
insn1
insn2
undefined
undefined
false
true
)
;
}
mem_test
(
"
memory
.
drop
3
"
"
"
WebAssembly
.
CompileError
/
can
'
t
touch
memory
without
memory
/
false
)
;
mem_test
(
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
can
'
t
touch
memory
without
memory
/
false
)
;
mem_test
(
"
memory
.
drop
4
"
"
"
WebAssembly
.
CompileError
/
memory
.
{
drop
init
}
index
out
of
range
/
)
;
mem_test
(
"
(
memory
.
init
4
(
i32
.
const
1234
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
memory
.
{
drop
init
}
index
out
of
range
/
)
;
mem_test
(
"
memory
.
drop
2
"
"
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
data
segment
/
)
;
mem_test
(
"
(
memory
.
init
2
(
i32
.
const
1234
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
data
segment
/
)
;
mem_test_nofail
(
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
(
memory
.
init
1
(
i32
.
const
4321
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
)
;
mem_test
(
"
memory
.
drop
1
"
"
memory
.
drop
1
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
data
segment
/
)
;
mem_test
(
"
memory
.
drop
1
"
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
data
segment
/
)
;
mem_test
(
"
"
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
0
)
(
i32
.
const
5
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
mem_test
(
"
"
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
2
)
(
i32
.
const
3
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
mem_test
(
"
"
"
(
memory
.
init
1
(
i32
.
const
0xFFFE
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
mem_test
(
"
"
"
(
memory
.
init
1
(
i32
.
const
1234
)
(
i32
.
const
4
)
(
i32
.
const
0
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
mem_test
(
"
"
"
(
memory
.
init
1
(
i32
.
const
0x10000
)
(
i32
.
const
2
)
(
i32
.
const
0
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
mem_test
(
"
memory
.
drop
1
(
i32
.
const
42
)
"
"
"
WebAssembly
.
CompileError
/
unused
values
not
explicitly
dropped
by
end
of
block
/
)
;
mem_test
(
"
(
memory
.
init
1
(
i32
.
const
1
)
(
i32
.
const
1
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
SyntaxError
/
parsing
wasm
text
at
/
)
;
mem_test
(
"
(
memory
.
init
1
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
popping
value
from
empty
stack
/
)
;
{
const
tys
=
[
'
i32
'
'
f32
'
'
i64
'
'
f64
'
]
;
for
(
let
ty1
of
tys
)
{
for
(
let
ty2
of
tys
)
{
for
(
let
ty3
of
tys
)
{
if
(
ty1
=
=
'
i32
'
&
&
ty2
=
=
'
i32
'
&
&
ty3
=
=
'
i32
'
)
continue
;
let
i1
=
(
memory
.
init
1
(
{
ty1
}
.
const
1
)
(
{
ty2
}
.
const
1
)
(
{
ty3
}
.
const
1
)
)
;
mem_test
(
i1
"
"
WebAssembly
.
CompileError
/
type
mismatch
/
)
;
}
}
}
}
tab_test
(
"
table
.
drop
3
"
"
"
WebAssembly
.
CompileError
/
can
'
t
table
.
drop
without
a
table
/
false
)
;
tab_test
(
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
can
'
t
table
.
init
without
a
table
/
false
)
;
tab_test
(
"
table
.
drop
4
"
"
"
WebAssembly
.
CompileError
/
table
.
drop
index
out
of
range
/
)
;
tab_test
(
"
(
table
.
init
4
(
i32
.
const
12
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
table
.
init
index
out
of
range
/
)
;
tab_test
(
"
table
.
drop
2
"
"
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
element
segment
/
)
;
tab_test
(
"
(
table
.
init
2
(
i32
.
const
12
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
element
segment
/
)
;
tab_test_nofail
(
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
(
table
.
init
1
(
i32
.
const
21
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
)
;
tab_test
(
"
table
.
drop
1
"
"
table
.
drop
1
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
element
segment
/
)
;
tab_test
(
"
table
.
drop
1
"
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
WebAssembly
.
RuntimeError
/
use
of
invalid
passive
element
segment
/
)
;
tab_test
(
"
"
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
0
)
(
i32
.
const
5
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
"
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
2
)
(
i32
.
const
3
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
"
"
(
table
.
init
1
(
i32
.
const
28
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
"
"
(
table
.
init
1
(
i32
.
const
12
)
(
i32
.
const
4
)
(
i32
.
const
0
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
"
"
(
table
.
init
1
(
i32
.
const
30
)
(
i32
.
const
2
)
(
i32
.
const
0
)
)
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
table
.
drop
1
(
i32
.
const
42
)
"
"
"
WebAssembly
.
CompileError
/
unused
values
not
explicitly
dropped
by
end
of
block
/
)
;
tab_test
(
"
(
table
.
init
1
(
i32
.
const
1
)
(
i32
.
const
1
)
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
SyntaxError
/
parsing
wasm
text
at
/
)
;
tab_test
(
"
(
table
.
init
1
(
i32
.
const
1
)
(
i32
.
const
1
)
)
"
"
"
WebAssembly
.
CompileError
/
popping
value
from
empty
stack
/
)
;
{
const
tys
=
[
'
i32
'
'
f32
'
'
i64
'
'
f64
'
]
;
const
ops
=
[
'
table
.
init
1
'
'
table
.
copy
'
]
;
for
(
let
ty1
of
tys
)
{
for
(
let
ty2
of
tys
)
{
for
(
let
ty3
of
tys
)
{
for
(
let
op
of
ops
)
{
if
(
ty1
=
=
'
i32
'
&
&
ty2
=
=
'
i32
'
&
&
ty3
=
=
'
i32
'
)
continue
;
let
i1
=
(
{
op
}
(
{
ty1
}
.
const
1
)
(
{
ty2
}
.
const
1
)
(
{
ty3
}
.
const
1
)
)
;
tab_test
(
i1
"
"
WebAssembly
.
CompileError
/
type
mismatch
/
)
;
}
}
}
}
}
tab_test
(
"
(
table
.
copy
(
i32
.
const
28
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
(
table
.
copy
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
1
)
(
i32
.
const
2
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
(
table
.
copy
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
6
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
(
table
.
copy
(
i32
.
const
15
)
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
2
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test_nofail
(
"
(
table
.
copy
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
0
)
)
"
"
"
)
;
tab_test
(
"
(
table
.
copy
(
i32
.
const
30
)
(
i32
.
const
15
)
(
i32
.
const
0
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
tab_test
(
"
(
table
.
copy
(
i32
.
const
15
)
(
i32
.
const
30
)
(
i32
.
const
0
)
)
"
"
"
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
