const
isX64
=
getBuildConfiguration
(
"
x64
"
)
&
&
!
getBuildConfiguration
(
"
simulator
"
)
;
if
(
hasDisassembler
(
)
&
&
isX64
)
{
let
t
=
(
module
(
memory
1
)
(
func
(
export
"
dot_product
"
)
(
param
startA
i32
)
(
param
startB
i32
)
(
param
count
i32
)
(
local
sum
f64
)
(
if
(
i32
.
gt_u
(
local
.
get
count
)
(
i32
.
const
0
)
)
(
then
(
loop
cont
(
local
.
set
sum
(
f64
.
add
(
local
.
get
sum
)
(
f64
.
mul
(
f64
.
load
(
local
.
get
startA
)
)
(
f64
.
load
(
local
.
get
startB
)
)
)
)
)
(
local
.
set
startA
(
i32
.
add
(
local
.
get
startA
)
(
i32
.
const
8
)
)
)
(
local
.
set
startB
(
i32
.
add
(
local
.
get
startB
)
(
i32
.
const
8
)
)
)
(
local
.
set
count
(
i32
.
sub
(
local
.
get
count
)
(
i32
.
const
1
)
)
)
(
br_if
cont
(
i32
.
gt_u
(
local
.
get
count
)
(
i32
.
const
0
)
)
)
)
)
)
)
)
;
let
i
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
t
)
)
)
;
const
output
=
wasmDis
(
i
.
exports
.
dot_product
{
tier
:
"
ion
"
asString
:
true
}
)
.
replace
(
/
^
[
0
-
9a
-
f
]
{
8
}
(
?
:
[
0
-
9a
-
f
]
{
2
}
)
+
\
n
?
\
s
+
/
gmi
"
"
)
;
const
re
=
/
\
bv
?
mulsd
[
^
\
n
]
+
\
nv
?
addsd
/
g
;
assertEq
(
re
.
exec
(
output
)
!
=
null
true
)
;
assertEq
(
re
.
exec
(
output
)
!
=
null
true
)
;
assertEq
(
re
.
exec
(
output
)
!
=
null
true
)
;
assertEq
(
re
.
exec
(
output
)
!
=
null
true
)
;
assertEq
(
re
.
exec
(
output
)
=
=
null
true
)
;
}
