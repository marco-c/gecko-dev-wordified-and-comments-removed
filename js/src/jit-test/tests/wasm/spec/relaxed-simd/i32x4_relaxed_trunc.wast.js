let
0
=
instantiate
(
(
module
(
func
(
export
"
i32x4
.
relaxed_trunc_f32x4_s
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
relaxed_trunc_f32x4_s
(
local
.
get
0
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f32x4_u
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
relaxed_trunc_f32x4_u
(
local
.
get
0
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f64x2_s_zero
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
relaxed_trunc_f64x2_s_zero
(
local
.
get
0
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f64x2_u_zero
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
relaxed_trunc_f64x2_u_zero
(
local
.
get
0
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f32x4_s_cmp
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
eq
(
i32x4
.
relaxed_trunc_f32x4_s
(
local
.
get
0
)
)
(
i32x4
.
relaxed_trunc_f32x4_s
(
local
.
get
0
)
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f32x4_u_cmp
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
eq
(
i32x4
.
relaxed_trunc_f32x4_u
(
local
.
get
0
)
)
(
i32x4
.
relaxed_trunc_f32x4_u
(
local
.
get
0
)
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f64x2_s_zero_cmp
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
eq
(
i32x4
.
relaxed_trunc_f64x2_s_zero
(
local
.
get
0
)
)
(
i32x4
.
relaxed_trunc_f64x2_s_zero
(
local
.
get
0
)
)
)
)
(
func
(
export
"
i32x4
.
relaxed_trunc_f64x2_u_zero_cmp
"
)
(
param
v128
)
(
result
v128
)
(
i32x4
.
eq
(
i32x4
.
relaxed_trunc_f64x2_u_zero
(
local
.
get
0
)
)
(
i32x4
.
relaxed_trunc_f64x2_u_zero
(
local
.
get
0
)
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_s
[
f32x4
(
[
-
2147483600
-
2147484000
2
2147484000
]
)
]
)
[
either
(
i32x4
(
[
0x80000000
0x80000000
0x2
0x7fffffff
]
)
i32x4
(
[
0x80000000
0x80000000
0x2
0x80000000
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_s
[
bytes
(
'
v128
'
[
0x0
0x0
0xc0
0x7f
0x0
0x0
0xc0
0xff
0x44
0x44
0xc4
0x7f
0x44
0x44
0xc4
0xff
]
)
]
)
[
either
(
i32x4
(
[
0x0
0x0
0x0
0x0
]
)
i32x4
(
[
0x80000000
0x80000000
0x80000000
0x80000000
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_u
[
f32x4
(
[
0
-
1
4294967000
4294967300
]
)
]
)
[
either
(
i32x4
(
[
0x0
0x0
0xffffff00
0xffffffff
]
)
i32x4
(
[
0x0
0xffffffff
0xffffff00
0xffffffff
]
)
i32x4
(
[
0x0
0xffffffff
0xffffff00
0x0
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_u
[
bytes
(
'
v128
'
[
0x0
0x0
0xc0
0x7f
0x0
0x0
0xc0
0xff
0x44
0x44
0xc4
0x7f
0x44
0x44
0xc4
0xff
]
)
]
)
[
either
(
i32x4
(
[
0x0
0x0
0x0
0x0
]
)
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
i32x4
(
[
0x80000000
0x80000000
0x80000000
0x80000000
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_s_zero
[
f64x2
(
[
-
2147483904
2147483904
]
)
]
)
[
either
(
i32x4
(
[
0x80000000
0x7fffffff
0x0
0x0
]
)
i32x4
(
[
0x80000000
0x80000000
0x0
0x0
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_s_zero
[
bytes
(
'
v128
'
[
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0x7f
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0xff
]
)
]
)
[
either
(
i32x4
(
[
0x0
0x0
0x0
0x0
]
)
i32x4
(
[
0x80000000
0x80000000
0x0
0x0
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_u_zero
[
f64x2
(
[
-
1
4294967296
]
)
]
)
[
either
(
i32x4
(
[
0x0
0xffffffff
0x0
0x0
]
)
i32x4
(
[
0xffffffff
0xffffffff
0x0
0x0
]
)
i32x4
(
[
0xfffffffe
0x0
0x0
0x0
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_u_zero
[
bytes
(
'
v128
'
[
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0x7f
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0xff
]
)
]
)
[
either
(
i32x4
(
[
0x0
0x0
0x0
0x0
]
)
i32x4
(
[
0x0
0x0
0xffffffff
0xffffffff
]
)
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_s_cmp
[
f32x4
(
[
-
2147483600
-
2147484000
2147483600
2147484000
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_s_cmp
[
bytes
(
'
v128
'
[
0x0
0x0
0xc0
0x7f
0x0
0x0
0xc0
0xff
0x44
0x44
0xc4
0x7f
0x44
0x44
0xc4
0xff
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_u_cmp
[
f32x4
(
[
0
-
1
4294967000
4294967300
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f32x4_u_cmp
[
bytes
(
'
v128
'
[
0x0
0x0
0xc0
0x7f
0x0
0x0
0xc0
0xff
0x44
0x44
0xc4
0x7f
0x44
0x44
0xc4
0xff
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_s_zero_cmp
[
f64x2
(
[
-
2147483904
2147483904
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_s_zero_cmp
[
bytes
(
'
v128
'
[
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0x7f
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0xff
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_u_zero_cmp
[
f64x2
(
[
-
1
4294967296
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32x4
.
relaxed_trunc_f64x2_u_zero_cmp
[
bytes
(
'
v128
'
[
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0x7f
0x0
0x0
0x0
0x0
0x0
0x0
0xf8
0xff
]
)
]
)
[
i32x4
(
[
0xffffffff
0xffffffff
0xffffffff
0xffffffff
]
)
]
)
;
