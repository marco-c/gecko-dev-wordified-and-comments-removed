let
0
=
instantiate
(
(
module
(
memory
1
1
shared
)
(
func
(
export
"
init
"
)
(
param
\
value
i64
)
(
i64
.
store
(
i32
.
const
0
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
load
"
)
(
param
\
addr
i32
)
(
result
i32
)
(
i32
.
atomic
.
load
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i64
.
atomic
.
load
"
)
(
param
\
addr
i32
)
(
result
i64
)
(
i64
.
atomic
.
load
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i32
.
atomic
.
load8_u
"
)
(
param
\
addr
i32
)
(
result
i32
)
(
i32
.
atomic
.
load8_u
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i32
.
atomic
.
load16_u
"
)
(
param
\
addr
i32
)
(
result
i32
)
(
i32
.
atomic
.
load16_u
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i64
.
atomic
.
load8_u
"
)
(
param
\
addr
i32
)
(
result
i64
)
(
i64
.
atomic
.
load8_u
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i64
.
atomic
.
load16_u
"
)
(
param
\
addr
i32
)
(
result
i64
)
(
i64
.
atomic
.
load16_u
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i64
.
atomic
.
load32_u
"
)
(
param
\
addr
i32
)
(
result
i64
)
(
i64
.
atomic
.
load32_u
(
local
.
get
\
addr
)
)
)
(
func
(
export
"
i32
.
atomic
.
store
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
i32
.
atomic
.
store
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
store
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
i64
.
atomic
.
store
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
store8
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
i32
.
atomic
.
store8
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
store16
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
i32
.
atomic
.
store16
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
store8
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
i64
.
atomic
.
store8
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
store16
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
i64
.
atomic
.
store16
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
store32
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
i64
.
atomic
.
store32
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
add
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
add
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
add
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
add
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
add_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
add_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
add_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
add_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
add_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
add_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
add_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
add_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
add_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
add_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
sub
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
sub
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
sub
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
sub
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
sub_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
sub_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
sub_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
sub_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
sub_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
sub_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
sub_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
sub_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
sub_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
sub_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
and
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
and
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
and
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
and
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
and_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
and_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
and_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
and_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
and_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
and_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
and_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
and_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
and_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
and_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
or
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
or
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
or
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
or
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
or_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
or_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
or_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
or_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
or_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
or_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
or_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
or_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
or_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
or_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
xor
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
xor
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
xor
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
xor
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
xor_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
xor_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
xor_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
xor_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
xor_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
xor_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
xor_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
xor_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
xor_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
xor_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
xchg
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
xchg
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
xchg
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
xchg
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
xchg_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
xchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
xchg_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
xchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
xchg_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
xchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
xchg_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
xchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
xchg_u
"
)
(
param
\
addr
i32
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
xchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw
.
cmpxchg
"
)
(
param
\
addr
i32
)
(
param
\
expected
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw
.
cmpxchg
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw
.
cmpxchg
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw
.
cmpxchg
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw8
.
cmpxchg_u
"
)
(
param
\
addr
i32
)
(
param
\
expected
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw8
.
cmpxchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i32
.
atomic
.
rmw16
.
cmpxchg_u
"
)
(
param
\
addr
i32
)
(
param
\
expected
i32
)
(
param
\
value
i32
)
(
result
i32
)
(
i32
.
atomic
.
rmw16
.
cmpxchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw8
.
cmpxchg_u
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw8
.
cmpxchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw16
.
cmpxchg_u
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw16
.
cmpxchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
i64
.
atomic
.
rmw32
.
cmpxchg_u
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
value
i64
)
(
result
i64
)
(
i64
.
atomic
.
rmw32
.
cmpxchg_u
(
local
.
get
\
addr
)
(
local
.
get
\
expected
)
(
local
.
get
\
value
)
)
)
)
)
;
invoke
(
0
init
[
506097522914230528n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load
[
0
]
)
[
value
(
"
i32
"
50462976
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load
[
4
]
)
[
value
(
"
i32
"
117835012
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
506097522914230528n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load8_u
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load8_u
[
5
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load16_u
[
0
]
)
[
value
(
"
i32
"
256
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load16_u
[
6
]
)
[
value
(
"
i32
"
1798
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load8_u
[
0
]
)
[
value
(
"
i64
"
0n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load8_u
[
5
]
)
[
value
(
"
i64
"
5n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load16_u
[
0
]
)
[
value
(
"
i64
"
256n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load16_u
[
6
]
)
[
value
(
"
i64
"
1798n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load32_u
[
0
]
)
[
value
(
"
i64
"
50462976n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load32_u
[
4
]
)
[
value
(
"
i64
"
117835012n
)
]
)
;
invoke
(
0
init
[
0n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
store
[
0
-
1122868
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
4293844428n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store
[
0
81985529216486895n
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
81985529216486895n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
store8
[
1
66
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
81985529216451311n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
store16
[
4
34884
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
82059046171656943n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store8
[
1
153n
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
82059046171679215n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store16
[
4
51966n
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
82132412803029487n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store32
[
4
3735928559n
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
-
2401053090302420497n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
add
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938552723337n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
add
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1302123111102223123n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
add_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303646n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
add_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247355407n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
add_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303507n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
add_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247352320n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
add_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941648599030n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
sub
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782942236850841n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
sub
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1157442765392383759n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
sub_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303492n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
sub_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247317011n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
sub_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303631n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
sub_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247320098n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
sub_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782939140975148n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
and
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938230460432n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
and
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
72340172821233664n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
and_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303425n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
and_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247299088n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
and_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303424n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
and_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303169n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
and_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782937962086401n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
or
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938283235193n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
or
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938280989459n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
or_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303645n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
or_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247355391n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
or_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303507n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
or_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247348223n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
or_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941647484917n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
xor
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938013747049n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
xor
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1157442765459755795n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
xor_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303644n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
xor_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247355375n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
xor_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303507n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
xor_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247344126n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
xor_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941646370804n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
xchg
[
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938266392184n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
xchg
[
0
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
72340172854919682n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
xchg_u
[
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303629n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
xchg_u
[
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247351038n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
xchg_u
[
0
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303490n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
xchg_u
[
0
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247347951n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
xchg_u
[
0
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941362267877n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
cmpxchg
[
0
0
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
cmpxchg
[
0
0n
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
cmpxchg_u
[
0
0
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
cmpxchg_u
[
0
286331153
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303629n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
cmpxchg_u
[
0
0
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
cmpxchg_u
[
0
286331153
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247351038n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
cmpxchg_u
[
0
0n
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
cmpxchg_u
[
0
1229782938247303441n
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303490n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
cmpxchg_u
[
0
0n
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
cmpxchg_u
[
0
1229782938247303441n
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247347951n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
cmpxchg_u
[
0
0n
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
cmpxchg_u
[
0
1229782938247303441n
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941362267877n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
cmpxchg
[
0
286331153
305419896
]
)
[
value
(
"
i32
"
286331153
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938266392184n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
cmpxchg
[
0
1229782938247303441n
72340172854919682n
]
)
[
value
(
"
i64
"
1229782938247303441n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
72340172854919682n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw8
.
cmpxchg_u
[
0
17
-
842150451
]
)
[
value
(
"
i32
"
17
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303629n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
cmpxchg_u
[
0
4369
-
889271554
]
)
[
value
(
"
i32
"
4369
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247351038n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw8
.
cmpxchg_u
[
0
17n
4774451407313060418n
]
)
[
value
(
"
i64
"
17n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247303490n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
cmpxchg_u
[
0
4369n
-
4688318750159552785n
]
)
[
value
(
"
i64
"
4369n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782938247347951n
)
]
)
;
invoke
(
0
init
[
1229782938247303441n
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
cmpxchg_u
[
0
286331153n
-
3838290751524198683n
]
)
[
value
(
"
i64
"
286331153n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
0
]
)
[
value
(
"
i64
"
1229782941362267877n
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load
[
1
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load
[
1
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
load16_u
[
1
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load16_u
[
1
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
load32_u
[
1
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
store
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
store16
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store16
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
store32
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
add
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
add
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
add_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
add_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
add_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
sub
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
sub
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
sub_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
sub_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
sub_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
and
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
and
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
and_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
and_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
and_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
or
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
or
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
or_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
or_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
or_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
xor
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
xor
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
xor_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
xor_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
xor_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
xchg
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
xchg
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
xchg_u
[
1
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
xchg_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
xchg_u
[
1
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw
.
cmpxchg
[
1
0
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw
.
cmpxchg
[
1
0n
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i32
.
atomic
.
rmw16
.
cmpxchg_u
[
1
0
0
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw16
.
cmpxchg_u
[
1
0n
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
0
i64
.
atomic
.
rmw32
.
cmpxchg_u
[
1
0n
0n
]
)
unaligned
atomic
)
;
let
1
=
instantiate
(
(
module
(
memory
1
1
shared
)
(
func
(
export
"
init
"
)
(
param
\
value
i64
)
(
i64
.
store
(
i32
.
const
0
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
memory
.
atomic
.
notify
"
)
(
param
\
addr
i32
)
(
param
\
count
i32
)
(
result
i32
)
(
memory
.
atomic
.
notify
(
local
.
get
0
)
(
local
.
get
1
)
)
)
(
func
(
export
"
memory
.
atomic
.
wait32
"
)
(
param
\
addr
i32
)
(
param
\
expected
i32
)
(
param
\
timeout
i64
)
(
result
i32
)
(
memory
.
atomic
.
wait32
(
local
.
get
0
)
(
local
.
get
1
)
(
local
.
get
2
)
)
)
(
func
(
export
"
memory
.
atomic
.
wait64
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
timeout
i64
)
(
result
i32
)
(
memory
.
atomic
.
wait64
(
local
.
get
0
)
(
local
.
get
1
)
(
local
.
get
2
)
)
)
)
)
;
invoke
(
1
init
[
281474976710655n
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait32
[
0
0
0n
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait64
[
0
0n
0n
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
notify
[
0
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait32
[
65536
0
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait64
[
65536
0n
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
notify
[
65536
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait32
[
65531
0
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
wait64
[
65524
0n
0n
]
)
unaligned
atomic
)
;
assert_trap
(
(
)
=
>
invoke
(
1
memory
.
atomic
.
notify
[
65531
0
]
)
unaligned
atomic
)
;
let
2
=
instantiate
(
(
module
(
memory
1
1
)
(
func
(
export
"
init
"
)
(
param
\
value
i64
)
(
i64
.
store
(
i32
.
const
0
)
(
local
.
get
\
value
)
)
)
(
func
(
export
"
memory
.
atomic
.
notify
"
)
(
param
\
addr
i32
)
(
param
\
count
i32
)
(
result
i32
)
(
memory
.
atomic
.
notify
(
local
.
get
0
)
(
local
.
get
1
)
)
)
(
func
(
export
"
memory
.
atomic
.
wait32
"
)
(
param
\
addr
i32
)
(
param
\
expected
i32
)
(
param
\
timeout
i64
)
(
result
i32
)
(
memory
.
atomic
.
wait32
(
local
.
get
0
)
(
local
.
get
1
)
(
local
.
get
2
)
)
)
(
func
(
export
"
memory
.
atomic
.
wait64
"
)
(
param
\
addr
i32
)
(
param
\
expected
i64
)
(
param
\
timeout
i64
)
(
result
i32
)
(
memory
.
atomic
.
wait64
(
local
.
get
0
)
(
local
.
get
1
)
(
local
.
get
2
)
)
)
)
)
;
invoke
(
2
init
[
281474976710655n
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
memory
.
atomic
.
wait32
[
0
0
0n
]
)
expected
shared
memory
)
;
assert_trap
(
(
)
=
>
invoke
(
2
memory
.
atomic
.
wait64
[
0
0n
0n
]
)
expected
shared
memory
)
;
assert_return
(
(
)
=
>
invoke
(
2
memory
.
atomic
.
notify
[
0
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
memory
.
atomic
.
notify
[
65536
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
2
memory
.
atomic
.
notify
[
65531
0
]
)
unaligned
atomic
)
;
let
3
=
instantiate
(
(
module
(
memory
1
1
)
(
func
(
drop
(
memory
.
atomic
.
notify
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
memory
.
atomic
.
wait32
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
memory
.
atomic
.
wait64
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
load
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
load
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
load16_u
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
load16_u
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
load32_u
(
i32
.
const
0
)
)
)
)
(
func
(
i32
.
atomic
.
store
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
(
func
(
i64
.
atomic
.
store
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
(
func
(
i32
.
atomic
.
store16
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
(
func
(
i64
.
atomic
.
store16
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
(
func
(
i64
.
atomic
.
store32
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
add
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
add
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
add_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
add_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
add_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
sub
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
sub
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
sub_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
sub_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
sub_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
and
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
and
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
and_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
and_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
and_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
or
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
or
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
or_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
or_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
or_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
xor
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
xor
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
xor_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
xor_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
xor_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
xchg
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
xchg
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
xchg_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
xchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
xchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw
.
cmpxchg
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw
.
cmpxchg
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
cmpxchg_u
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
cmpxchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
cmpxchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
;
let
4
=
instantiate
(
(
module
(
func
(
export
"
fence
"
)
(
atomic
.
fence
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
4
fence
[
]
)
[
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
memory
.
atomic
.
notify
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
memory
.
atomic
.
wait32
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
memory
.
atomic
.
wait64
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
load
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
load
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
load16_u
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
load16_u
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
load32_u
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
i32
.
atomic
.
store
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
i64
.
atomic
.
store
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
i32
.
atomic
.
store16
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
i64
.
atomic
.
store16
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
i64
.
atomic
.
store32
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
add
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
add
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
add_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
add_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
add_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
sub
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
sub
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
sub_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
sub_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
sub_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
and
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
and
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
and_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
and_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
and_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
or
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
or
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
or_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
or_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
or_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
xor
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
xor
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
xor_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
xor_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
xor_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
xchg
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
xchg
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
xchg_u
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
xchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
xchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw
.
cmpxchg
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw
.
cmpxchg
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i32
.
atomic
.
rmw16
.
cmpxchg_u
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw16
.
cmpxchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
drop
(
i64
.
atomic
.
rmw32
.
cmpxchg_u
(
i32
.
const
0
)
(
i64
.
const
0
)
(
i64
.
const
0
)
)
)
)
)
)
unknown
memory
)
;
