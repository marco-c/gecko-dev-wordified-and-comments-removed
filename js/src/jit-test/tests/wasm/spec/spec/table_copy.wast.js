let
0
=
instantiate
(
(
module
(
func
(
export
"
ef0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
export
"
ef1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
export
"
ef2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
export
"
ef3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
export
"
ef4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
)
)
;
register
(
0
a
)
;
let
1
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
nop
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
1
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
1
check_t1
[
29
]
)
uninitialized
element
)
;
let
2
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
13
)
(
i32
.
const
2
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
2
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
13
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
14
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
15
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
2
check_t1
[
29
]
)
uninitialized
element
)
;
let
3
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
25
)
(
i32
.
const
15
)
(
i32
.
const
2
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
3
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
24
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
25
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t0
[
26
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
3
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
3
check_t1
[
29
]
)
uninitialized
element
)
;
let
4
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
13
)
(
i32
.
const
25
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
4
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
15
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
4
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
4
check_t1
[
29
]
)
uninitialized
element
)
;
let
5
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
20
)
(
i32
.
const
22
)
(
i32
.
const
4
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
5
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
5
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
5
check_t1
[
29
]
)
uninitialized
element
)
;
let
6
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
25
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
6
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
25
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
26
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t0
[
27
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
6
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
6
check_t1
[
29
]
)
uninitialized
element
)
;
let
7
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
10
)
(
i32
.
const
12
)
(
i32
.
const
7
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
7
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
9
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
10
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
11
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
12
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
13
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t0
[
14
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
7
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
7
check_t1
[
29
]
)
uninitialized
element
)
;
let
8
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
12
)
(
i32
.
const
10
)
(
i32
.
const
7
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
8
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
13
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
14
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
15
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
16
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
17
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t0
[
18
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
8
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
8
check_t1
[
29
]
)
uninitialized
element
)
;
let
9
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t1
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
10
)
(
i32
.
const
0
)
(
i32
.
const
20
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
9
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
13
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
14
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
15
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
21
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
22
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
23
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
24
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
25
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
9
check_t1
[
26
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
9
check_t1
[
29
]
)
uninitialized
element
)
;
let
10
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
nop
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
10
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
10
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
10
check_t1
[
29
]
)
uninitialized
element
)
;
let
11
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
13
)
(
i32
.
const
2
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
11
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
13
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
14
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
15
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
11
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
11
check_t1
[
29
]
)
uninitialized
element
)
;
let
12
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
25
)
(
i32
.
const
15
)
(
i32
.
const
2
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
12
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
24
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
25
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t0
[
26
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
12
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
12
check_t1
[
29
]
)
uninitialized
element
)
;
let
13
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
13
)
(
i32
.
const
25
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
13
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
15
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
13
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
13
check_t1
[
29
]
)
uninitialized
element
)
;
let
14
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
20
)
(
i32
.
const
22
)
(
i32
.
const
4
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
14
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
14
check_t1
[
29
]
)
uninitialized
element
)
;
let
15
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
25
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
15
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
25
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
26
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t0
[
27
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
15
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
15
check_t1
[
29
]
)
uninitialized
element
)
;
let
16
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
10
)
(
i32
.
const
12
)
(
i32
.
const
7
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
16
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
9
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
10
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
11
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
12
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
13
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t0
[
14
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
16
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
16
check_t1
[
29
]
)
uninitialized
element
)
;
let
17
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t1
(
i32
.
const
12
)
(
i32
.
const
10
)
(
i32
.
const
7
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
17
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
13
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
14
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
15
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
16
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
17
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t0
[
18
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
11
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
14
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
17
check_t1
[
15
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
17
check_t1
[
29
]
)
uninitialized
element
)
;
let
18
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
;
;
type
#
0
(
import
"
a
"
"
ef0
"
(
func
(
result
i32
)
)
)
;
;
index
0
(
import
"
a
"
"
ef1
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef2
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef3
"
(
func
(
result
i32
)
)
)
(
import
"
a
"
"
ef4
"
(
func
(
result
i32
)
)
)
;
;
index
4
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t1
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t1
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
3
)
func
1
3
1
4
)
(
elem
(
table
\
t0
)
(
i32
.
const
11
)
func
6
3
2
5
7
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
;
;
index
5
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
;
;
index
9
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t1
(
i32
.
const
10
)
(
i32
.
const
0
)
(
i32
.
const
20
)
)
)
(
func
(
export
"
check_t0
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t1
(
type
0
)
(
local
.
get
0
)
)
)
(
func
(
export
"
check_t1
"
)
(
param
i32
)
(
result
i32
)
(
call_indirect
\
t0
(
type
0
)
(
local
.
get
0
)
)
)
)
)
;
invoke
(
18
test
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
1
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
2
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
12
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
13
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
14
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
15
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t0
[
16
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t0
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
2
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
4
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
6
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
11
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
12
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
13
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
14
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
15
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
21
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
22
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
23
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
24
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
25
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
18
check_t1
[
26
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
18
check_t1
[
29
]
)
uninitialized
element
)
;
let
19
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
28
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
19
test
[
]
)
out
of
bounds
table
access
)
;
let
20
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
1
)
(
i32
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
20
test
[
]
)
out
of
bounds
table
access
)
;
let
21
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
6
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
21
test
[
]
)
out
of
bounds
table
access
)
;
let
22
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
15
)
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
22
test
[
]
)
out
of
bounds
table
access
)
;
let
23
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
23
test
[
]
)
;
let
24
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
30
)
(
i32
.
const
15
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
24
test
[
]
)
;
let
25
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
31
)
(
i32
.
const
15
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
25
test
[
]
)
out
of
bounds
table
access
)
;
let
26
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
15
)
(
i32
.
const
30
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
26
test
[
]
)
;
let
27
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
15
)
(
i32
.
const
31
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
27
test
[
]
)
out
of
bounds
table
access
)
;
let
28
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
30
)
(
i32
.
const
30
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
28
test
[
]
)
;
let
29
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i32
.
const
31
)
(
i32
.
const
31
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
29
test
[
]
)
out
of
bounds
table
access
)
;
let
30
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
28
)
(
i32
.
const
1
)
(
i32
.
const
3
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
30
test
[
]
)
out
of
bounds
table
access
)
;
let
31
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
1
)
(
i32
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
31
test
[
]
)
out
of
bounds
table
access
)
;
let
32
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
6
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
32
test
[
]
)
out
of
bounds
table
access
)
;
let
33
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
15
)
(
i32
.
const
0xFFFFFFFE
)
(
i32
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
33
test
[
]
)
out
of
bounds
table
access
)
;
let
34
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
15
)
(
i32
.
const
25
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
34
test
[
]
)
;
let
35
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
30
)
(
i32
.
const
15
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
35
test
[
]
)
;
let
36
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
31
)
(
i32
.
const
15
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
36
test
[
]
)
out
of
bounds
table
access
)
;
let
37
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
15
)
(
i32
.
const
30
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
37
test
[
]
)
;
let
38
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
15
)
(
i32
.
const
31
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
38
test
[
]
)
out
of
bounds
table
access
)
;
let
39
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
30
)
(
i32
.
const
30
)
(
i32
.
const
0
)
)
)
)
)
;
invoke
(
39
test
[
]
)
;
let
40
=
instantiate
(
(
module
(
table
\
t0
30
30
funcref
)
(
table
\
t1
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i32
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i32
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i32
.
const
31
)
(
i32
.
const
31
)
(
i32
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
40
test
[
]
)
out
of
bounds
table
access
)
;
let
41
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
28
)
(
i64
.
const
1
)
(
i64
.
const
3
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
41
test
[
]
)
out
of
bounds
table
access
)
;
let
42
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
0xFFFFFFFE
)
(
i64
.
const
1
)
(
i64
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
42
test
[
]
)
out
of
bounds
table
access
)
;
let
43
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
15
)
(
i64
.
const
25
)
(
i64
.
const
6
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
43
test
[
]
)
out
of
bounds
table
access
)
;
let
44
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
15
)
(
i64
.
const
0xFFFFFFFE
)
(
i64
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
44
test
[
]
)
out
of
bounds
table
access
)
;
let
45
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
15
)
(
i64
.
const
25
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
45
test
[
]
)
;
let
46
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
30
)
(
i64
.
const
15
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
46
test
[
]
)
;
let
47
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
31
)
(
i64
.
const
15
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
47
test
[
]
)
out
of
bounds
table
access
)
;
let
48
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
15
)
(
i64
.
const
30
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
48
test
[
]
)
;
let
49
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
15
)
(
i64
.
const
31
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
49
test
[
]
)
out
of
bounds
table
access
)
;
let
50
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
30
)
(
i64
.
const
30
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
50
test
[
]
)
;
let
51
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t0
\
t0
(
i64
.
const
31
)
(
i64
.
const
31
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
51
test
[
]
)
out
of
bounds
table
access
)
;
let
52
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
28
)
(
i64
.
const
1
)
(
i64
.
const
3
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
52
test
[
]
)
out
of
bounds
table
access
)
;
let
53
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
0xFFFFFFFE
)
(
i64
.
const
1
)
(
i64
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
53
test
[
]
)
out
of
bounds
table
access
)
;
let
54
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
15
)
(
i64
.
const
25
)
(
i64
.
const
6
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
54
test
[
]
)
out
of
bounds
table
access
)
;
let
55
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
15
)
(
i64
.
const
0xFFFFFFFE
)
(
i64
.
const
2
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
55
test
[
]
)
out
of
bounds
table
access
)
;
let
56
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
15
)
(
i64
.
const
25
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
56
test
[
]
)
;
let
57
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
30
)
(
i64
.
const
15
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
57
test
[
]
)
;
let
58
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
31
)
(
i64
.
const
15
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
58
test
[
]
)
out
of
bounds
table
access
)
;
let
59
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
15
)
(
i64
.
const
30
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
59
test
[
]
)
;
let
60
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
15
)
(
i64
.
const
31
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
60
test
[
]
)
out
of
bounds
table
access
)
;
let
61
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
30
)
(
i64
.
const
30
)
(
i64
.
const
0
)
)
)
)
)
;
invoke
(
61
test
[
]
)
;
let
62
=
instantiate
(
(
module
(
table
\
t0
i64
30
30
funcref
)
(
table
\
t1
i64
30
30
funcref
)
(
elem
(
table
\
t0
)
(
i64
.
const
2
)
func
3
1
4
1
)
(
elem
funcref
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
1
)
(
ref
.
func
8
)
)
(
elem
(
table
\
t0
)
(
i64
.
const
12
)
func
7
5
2
3
6
)
(
elem
funcref
(
ref
.
func
5
)
(
ref
.
func
9
)
(
ref
.
func
2
)
(
ref
.
func
7
)
(
ref
.
func
6
)
)
(
func
(
result
i32
)
(
i32
.
const
0
)
)
(
func
(
result
i32
)
(
i32
.
const
1
)
)
(
func
(
result
i32
)
(
i32
.
const
2
)
)
(
func
(
result
i32
)
(
i32
.
const
3
)
)
(
func
(
result
i32
)
(
i32
.
const
4
)
)
(
func
(
result
i32
)
(
i32
.
const
5
)
)
(
func
(
result
i32
)
(
i32
.
const
6
)
)
(
func
(
result
i32
)
(
i32
.
const
7
)
)
(
func
(
result
i32
)
(
i32
.
const
8
)
)
(
func
(
result
i32
)
(
i32
.
const
9
)
)
(
func
(
export
"
test
"
)
(
table
.
copy
\
t1
\
t0
(
i64
.
const
31
)
(
i64
.
const
31
)
(
i64
.
const
0
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
62
test
[
]
)
out
of
bounds
table
access
)
;
let
63
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
0
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
63
run
[
24
0
16
]
)
out
of
bounds
table
access
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
1
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
2
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
3
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
5
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
6
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
63
test
[
7
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
63
test
[
31
]
)
uninitialized
element
)
;
let
64
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
0
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
\
f8
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
64
run
[
23
0
15
]
)
out
of
bounds
table
access
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
1
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
2
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
3
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
5
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
6
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
7
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
64
test
[
8
]
)
[
value
(
"
i32
"
8
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
64
test
[
31
]
)
uninitialized
element
)
;
let
65
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
24
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
65
run
[
0
24
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
65
test
[
23
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
24
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
25
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
26
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
27
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
28
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
29
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
30
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
65
test
[
31
]
)
[
value
(
"
i32
"
7
)
]
)
;
let
66
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
23
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
\
f8
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
66
run
[
0
23
15
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
66
test
[
22
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
23
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
24
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
25
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
26
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
27
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
28
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
29
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
30
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
66
test
[
31
]
)
[
value
(
"
i32
"
8
)
]
)
;
let
67
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
11
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
67
run
[
24
11
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
10
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
11
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
12
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
13
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
14
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
15
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
16
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
17
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
67
test
[
18
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
67
test
[
31
]
)
uninitialized
element
)
;
let
68
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
24
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
68
run
[
11
24
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
68
test
[
23
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
24
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
25
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
26
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
27
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
28
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
29
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
30
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
68
test
[
31
]
)
[
value
(
"
i32
"
7
)
]
)
;
let
69
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
21
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
69
run
[
24
21
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
20
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
21
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
22
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
23
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
24
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
25
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
26
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
27
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
69
test
[
28
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
69
test
[
31
]
)
uninitialized
element
)
;
let
70
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
24
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
70
run
[
21
24
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
70
test
[
23
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
24
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
25
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
26
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
27
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
28
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
29
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
30
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
70
test
[
31
]
)
[
value
(
"
i32
"
7
)
]
)
;
let
71
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
32
64
funcref
)
(
elem
(
i32
.
const
21
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
\
f8
\
f9
\
f10
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
71
run
[
21
21
16
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
71
test
[
20
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
21
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
22
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
23
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
24
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
25
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
26
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
27
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
28
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
29
]
)
[
value
(
"
i32
"
8
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
30
]
)
[
value
(
"
i32
"
9
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
71
test
[
31
]
)
[
value
(
"
i32
"
10
)
]
)
;
let
72
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
128
128
funcref
)
(
elem
(
i32
.
const
112
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
\
f8
\
f9
\
f10
\
f11
\
f12
\
f13
\
f14
\
f15
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
72
run
[
0
112
-
32
]
)
out
of
bounds
table
access
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
0
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
1
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
2
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
3
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
4
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
5
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
6
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
7
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
8
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
9
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
10
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
11
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
12
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
13
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
14
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
15
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
31
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
32
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
33
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
34
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
35
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
36
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
37
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
38
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
39
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
40
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
41
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
42
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
43
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
44
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
45
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
46
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
47
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
48
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
49
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
50
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
51
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
52
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
53
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
54
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
55
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
56
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
57
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
58
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
59
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
60
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
61
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
62
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
63
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
64
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
65
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
66
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
67
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
68
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
69
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
70
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
71
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
72
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
73
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
74
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
75
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
76
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
77
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
78
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
79
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
80
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
81
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
82
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
83
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
84
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
85
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
86
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
87
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
88
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
89
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
90
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
91
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
92
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
93
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
94
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
95
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
96
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
97
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
98
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
99
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
100
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
101
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
102
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
103
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
104
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
105
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
106
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
107
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
108
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
109
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
110
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
72
test
[
111
]
)
uninitialized
element
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
112
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
113
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
114
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
115
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
116
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
117
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
118
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
119
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
120
]
)
[
value
(
"
i32
"
8
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
121
]
)
[
value
(
"
i32
"
9
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
122
]
)
[
value
(
"
i32
"
10
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
123
]
)
[
value
(
"
i32
"
11
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
124
]
)
[
value
(
"
i32
"
12
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
125
]
)
[
value
(
"
i32
"
13
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
126
]
)
[
value
(
"
i32
"
14
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
72
test
[
127
]
)
[
value
(
"
i32
"
15
)
]
)
;
let
73
=
instantiate
(
(
module
(
type
(
func
(
result
i32
)
)
)
(
table
128
128
funcref
)
(
elem
(
i32
.
const
0
)
\
f0
\
f1
\
f2
\
f3
\
f4
\
f5
\
f6
\
f7
\
f8
\
f9
\
f10
\
f11
\
f12
\
f13
\
f14
\
f15
)
(
func
\
f0
(
export
"
f0
"
)
(
result
i32
)
(
i32
.
const
0
)
)
(
func
\
f1
(
export
"
f1
"
)
(
result
i32
)
(
i32
.
const
1
)
)
(
func
\
f2
(
export
"
f2
"
)
(
result
i32
)
(
i32
.
const
2
)
)
(
func
\
f3
(
export
"
f3
"
)
(
result
i32
)
(
i32
.
const
3
)
)
(
func
\
f4
(
export
"
f4
"
)
(
result
i32
)
(
i32
.
const
4
)
)
(
func
\
f5
(
export
"
f5
"
)
(
result
i32
)
(
i32
.
const
5
)
)
(
func
\
f6
(
export
"
f6
"
)
(
result
i32
)
(
i32
.
const
6
)
)
(
func
\
f7
(
export
"
f7
"
)
(
result
i32
)
(
i32
.
const
7
)
)
(
func
\
f8
(
export
"
f8
"
)
(
result
i32
)
(
i32
.
const
8
)
)
(
func
\
f9
(
export
"
f9
"
)
(
result
i32
)
(
i32
.
const
9
)
)
(
func
\
f10
(
export
"
f10
"
)
(
result
i32
)
(
i32
.
const
10
)
)
(
func
\
f11
(
export
"
f11
"
)
(
result
i32
)
(
i32
.
const
11
)
)
(
func
\
f12
(
export
"
f12
"
)
(
result
i32
)
(
i32
.
const
12
)
)
(
func
\
f13
(
export
"
f13
"
)
(
result
i32
)
(
i32
.
const
13
)
)
(
func
\
f14
(
export
"
f14
"
)
(
result
i32
)
(
i32
.
const
14
)
)
(
func
\
f15
(
export
"
f15
"
)
(
result
i32
)
(
i32
.
const
15
)
)
(
func
(
export
"
test
"
)
(
param
\
n
i32
)
(
result
i32
)
(
call_indirect
(
type
0
)
(
local
.
get
\
n
)
)
)
(
func
(
export
"
run
"
)
(
param
\
targetOffs
i32
)
(
param
\
srcOffs
i32
)
(
param
\
len
i32
)
(
table
.
copy
(
local
.
get
\
targetOffs
)
(
local
.
get
\
srcOffs
)
(
local
.
get
\
len
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
73
run
[
112
0
-
32
]
)
out
of
bounds
table
access
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
1
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
2
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
3
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
4
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
5
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
6
]
)
[
value
(
"
i32
"
6
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
7
]
)
[
value
(
"
i32
"
7
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
8
]
)
[
value
(
"
i32
"
8
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
9
]
)
[
value
(
"
i32
"
9
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
10
]
)
[
value
(
"
i32
"
10
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
11
]
)
[
value
(
"
i32
"
11
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
12
]
)
[
value
(
"
i32
"
12
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
13
]
)
[
value
(
"
i32
"
13
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
14
]
)
[
value
(
"
i32
"
14
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
73
test
[
15
]
)
[
value
(
"
i32
"
15
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
16
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
17
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
18
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
19
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
20
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
21
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
22
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
23
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
24
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
25
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
26
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
27
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
28
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
29
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
30
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
31
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
32
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
33
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
34
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
35
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
36
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
37
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
38
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
39
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
40
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
41
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
42
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
43
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
44
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
45
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
46
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
47
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
48
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
49
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
50
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
51
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
52
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
53
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
54
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
55
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
56
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
57
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
58
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
59
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
60
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
61
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
62
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
63
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
64
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
65
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
66
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
67
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
68
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
69
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
70
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
71
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
72
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
73
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
74
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
75
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
76
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
77
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
78
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
79
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
80
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
81
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
82
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
83
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
84
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
85
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
86
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
87
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
88
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
89
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
90
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
91
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
92
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
93
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
94
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
95
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
96
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
97
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
98
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
99
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
100
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
101
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
102
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
103
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
104
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
105
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
106
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
107
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
108
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
109
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
110
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
111
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
112
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
113
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
114
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
115
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
116
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
117
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
118
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
119
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
120
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
121
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
122
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
123
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
124
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
125
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
126
]
)
uninitialized
element
)
;
assert_trap
(
(
)
=
>
invoke
(
73
test
[
127
]
)
uninitialized
element
)
;
