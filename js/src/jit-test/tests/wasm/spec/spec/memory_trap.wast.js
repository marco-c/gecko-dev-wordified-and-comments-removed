let
0
=
instantiate
(
(
module
(
memory
1
)
(
func
\
addr_limit
(
result
i32
)
(
i32
.
mul
(
memory
.
size
)
(
i32
.
const
0x10000
)
)
)
(
func
(
export
"
store
"
)
(
param
\
i
i32
)
(
param
\
v
i32
)
(
i32
.
store
(
i32
.
add
(
call
\
addr_limit
)
(
local
.
get
\
i
)
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
load
"
)
(
param
\
i
i32
)
(
result
i32
)
(
i32
.
load
(
i32
.
add
(
call
\
addr_limit
)
(
local
.
get
\
i
)
)
)
)
(
func
(
export
"
memory
.
grow
"
)
(
param
i32
)
(
result
i32
)
(
memory
.
grow
(
local
.
get
0
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
0
store
[
-
4
42
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
load
[
-
4
]
)
[
value
(
"
i32
"
42
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
3
305419896
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
2
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
1
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
0
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
2147483648
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
2147483648
]
)
out
of
bounds
memory
access
)
;
assert_return
(
(
)
=
>
invoke
(
0
memory
.
grow
[
65537
]
)
[
value
(
"
i32
"
-
1
)
]
)
;
let
1
=
instantiate
(
(
module
(
memory
1
)
(
data
(
i32
.
const
0
)
"
abcdefgh
"
)
(
data
(
i32
.
const
0xfff8
)
"
abcdefgh
"
)
(
func
(
export
"
i32
.
load
"
)
(
param
\
a
i32
)
(
result
i32
)
(
i32
.
load
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load
(
local
.
get
\
a
)
)
)
(
func
(
export
"
f32
.
load
"
)
(
param
\
a
i32
)
(
result
f32
)
(
f32
.
load
(
local
.
get
\
a
)
)
)
(
func
(
export
"
f64
.
load
"
)
(
param
\
a
i32
)
(
result
f64
)
(
f64
.
load
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i32
.
load8_s
"
)
(
param
\
a
i32
)
(
result
i32
)
(
i32
.
load8_s
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i32
.
load8_u
"
)
(
param
\
a
i32
)
(
result
i32
)
(
i32
.
load8_u
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i32
.
load16_s
"
)
(
param
\
a
i32
)
(
result
i32
)
(
i32
.
load16_s
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i32
.
load16_u
"
)
(
param
\
a
i32
)
(
result
i32
)
(
i32
.
load16_u
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load8_s
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load8_s
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load8_u
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load8_u
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load16_s
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load16_s
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load16_u
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load16_u
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load32_s
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load32_s
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i64
.
load32_u
"
)
(
param
\
a
i32
)
(
result
i64
)
(
i64
.
load32_u
(
local
.
get
\
a
)
)
)
(
func
(
export
"
i32
.
store
"
)
(
param
\
a
i32
)
(
param
\
v
i32
)
(
i32
.
store
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i64
.
store
"
)
(
param
\
a
i32
)
(
param
\
v
i64
)
(
i64
.
store
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
f32
.
store
"
)
(
param
\
a
i32
)
(
param
\
v
f32
)
(
f32
.
store
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
f64
.
store
"
)
(
param
\
a
i32
)
(
param
\
v
f64
)
(
f64
.
store
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i32
.
store8
"
)
(
param
\
a
i32
)
(
param
\
v
i32
)
(
i32
.
store8
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i32
.
store16
"
)
(
param
\
a
i32
)
(
param
\
v
i32
)
(
i32
.
store16
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i64
.
store8
"
)
(
param
\
a
i32
)
(
param
\
v
i64
)
(
i64
.
store8
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i64
.
store16
"
)
(
param
\
a
i32
)
(
param
\
v
i64
)
(
i64
.
store16
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
(
func
(
export
"
i64
.
store32
"
)
(
param
\
a
i32
)
(
param
\
v
i64
)
(
i64
.
store32
(
local
.
get
\
a
)
(
local
.
get
\
v
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
65536
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
65535
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
65534
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
65533
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
-
1
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
-
2
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
-
3
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
-
4
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65536
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65535
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65534
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65533
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65532
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65531
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65530
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65529
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
1
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
2
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
3
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
4
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
5
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
6
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
7
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
-
8
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
65536
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
65535
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
65534
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
65533
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
-
1
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
-
2
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
-
3
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
-
4
value
(
"
f32
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65536
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65535
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65534
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65533
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65532
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65531
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65530
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65529
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
1
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
2
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
3
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
4
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
5
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
6
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
7
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
-
8
value
(
"
f64
"
0
)
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store8
[
65536
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store8
[
-
1
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store16
[
65536
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store16
[
65535
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store16
[
-
1
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store16
[
-
2
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store8
[
65536
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store8
[
-
1
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store16
[
65536
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store16
[
65535
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store16
[
-
1
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store16
[
-
2
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
65536
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
65535
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
65534
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
65533
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
-
1
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
-
2
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
-
3
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store32
[
-
4
0n
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load
[
-
4
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65532
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65531
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65530
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
65529
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
4
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
5
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
6
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
7
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load
[
-
8
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
load
[
-
4
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65532
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65531
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65530
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
65529
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
4
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
5
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
6
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
7
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
load
[
-
8
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load8_s
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load8_s
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load8_u
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load8_u
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_s
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_s
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_s
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_s
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_u
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_u
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_u
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
load16_u
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load8_s
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load8_s
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load8_u
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load8_u
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_s
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_s
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_s
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_s
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_u
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_u
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_u
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load16_u
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_s
[
-
4
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
65536
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
65535
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
65534
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
65533
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
load32_u
[
-
4
]
)
out
of
bounds
memory
access
)
;
if
(
!
partialOobWriteMayWritePartialData
(
)
)
{
assert_return
(
(
)
=
>
invoke
(
1
i64
.
load
[
65528
]
)
[
value
(
"
i64
"
7523094288207667809n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
i64
.
load
[
0
]
)
[
value
(
"
i64
"
7523094288207667809n
)
]
)
;
}
assert_return
(
(
)
=
>
invoke
(
1
i64
.
store
[
65528
0n
]
)
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
i32
.
store
[
65533
305419896
]
)
out
of
bounds
memory
access
)
;
if
(
!
partialOobWriteMayWritePartialData
(
)
)
{
assert_return
(
(
)
=
>
invoke
(
1
i32
.
load
[
65532
]
)
[
value
(
"
i32
"
0
)
]
)
;
}
assert_trap
(
(
)
=
>
invoke
(
1
i64
.
store
[
65529
1311768467294899695n
]
)
out
of
bounds
memory
access
)
;
if
(
!
partialOobWriteMayWritePartialData
(
)
)
{
assert_return
(
(
)
=
>
invoke
(
1
i64
.
load
[
65528
]
)
[
value
(
"
i64
"
0n
)
]
)
;
}
assert_trap
(
(
)
=
>
invoke
(
1
f32
.
store
[
65533
value
(
"
f32
"
305419900
)
]
)
out
of
bounds
memory
access
)
;
if
(
!
partialOobWriteMayWritePartialData
(
)
)
{
assert_return
(
(
)
=
>
invoke
(
1
f32
.
load
[
65532
]
)
[
value
(
"
f32
"
0
)
]
)
;
}
assert_trap
(
(
)
=
>
invoke
(
1
f64
.
store
[
65529
value
(
"
f64
"
1311768467294899700
)
]
)
out
of
bounds
memory
access
)
;
if
(
!
partialOobWriteMayWritePartialData
(
)
)
{
assert_return
(
(
)
=
>
invoke
(
1
f64
.
load
[
65528
]
)
[
value
(
"
f64
"
0
)
]
)
;
}
