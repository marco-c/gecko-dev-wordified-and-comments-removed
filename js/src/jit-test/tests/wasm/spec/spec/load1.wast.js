let
0
=
instantiate
(
(
module
M
(
memory
(
export
"
mem
"
)
2
)
(
func
(
export
"
read
"
)
(
param
i32
)
(
result
i32
)
(
i32
.
load8_u
(
local
.
get
0
)
)
)
)
)
;
let
M
=
0
;
register
(
0
M
)
;
let
1
=
instantiate
(
(
module
(
memory
mem1
(
import
"
M
"
"
mem
"
)
2
)
(
memory
mem2
3
)
(
data
(
memory
mem1
)
(
i32
.
const
20
)
"
\
\
01
\
\
02
\
\
03
\
\
04
\
\
05
"
)
(
data
(
memory
mem2
)
(
i32
.
const
50
)
"
\
\
0A
\
\
0B
\
\
0C
\
\
0D
\
\
0E
"
)
(
func
(
export
"
read1
"
)
(
param
i32
)
(
result
i32
)
(
i32
.
load8_u
mem1
(
local
.
get
0
)
)
)
(
func
(
export
"
read2
"
)
(
param
i32
)
(
result
i32
)
(
i32
.
load8_u
mem2
(
local
.
get
0
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
M
read
[
20
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
M
read
[
21
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
M
read
[
22
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
M
read
[
23
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
M
read
[
24
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read1
[
20
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read1
[
21
]
)
[
value
(
"
i32
"
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read1
[
22
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read1
[
23
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read1
[
24
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read2
[
50
]
)
[
value
(
"
i32
"
10
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read2
[
51
]
)
[
value
(
"
i32
"
11
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read2
[
52
]
)
[
value
(
"
i32
"
12
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read2
[
53
]
)
[
value
(
"
i32
"
13
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
1
read2
[
54
]
)
[
value
(
"
i32
"
14
)
]
)
;
