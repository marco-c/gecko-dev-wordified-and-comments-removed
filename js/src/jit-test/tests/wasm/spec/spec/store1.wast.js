let
0
=
instantiate
(
(
module
\
M1
(
memory
(
export
"
mem
"
)
1
)
(
func
(
export
"
load
"
)
(
param
i32
)
(
result
i64
)
(
i64
.
load
(
local
.
get
0
)
)
)
(
func
(
export
"
store
"
)
(
param
i32
i64
)
(
i64
.
store
(
local
.
get
0
)
(
local
.
get
1
)
)
)
)
)
;
let
M1
=
0
;
register
(
0
M1
)
;
let
1
=
instantiate
(
(
module
\
M2
(
memory
(
export
"
mem
"
)
1
)
(
func
(
export
"
load
"
)
(
param
i32
)
(
result
i64
)
(
i64
.
load
(
local
.
get
0
)
)
)
(
func
(
export
"
store
"
)
(
param
i32
i64
)
(
i64
.
store
(
local
.
get
0
)
(
local
.
get
1
)
)
)
)
)
;
let
M2
=
1
;
register
(
1
M2
)
;
invoke
(
M1
store
[
0
1n
]
)
;
invoke
(
M2
store
[
0
2n
]
)
;
assert_return
(
(
)
=
>
invoke
(
M1
load
[
0
]
)
[
value
(
"
i64
"
1n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
M2
load
[
0
]
)
[
value
(
"
i64
"
2n
)
]
)
;
let
2
=
instantiate
(
(
module
(
memory
\
mem1
(
import
"
M1
"
"
mem
"
)
1
)
(
memory
\
mem2
(
import
"
M2
"
"
mem
"
)
1
)
(
func
(
export
"
load1
"
)
(
param
i32
)
(
result
i64
)
(
i64
.
load
\
mem1
(
local
.
get
0
)
)
)
(
func
(
export
"
load2
"
)
(
param
i32
)
(
result
i64
)
(
i64
.
load
\
mem2
(
local
.
get
0
)
)
)
(
func
(
export
"
store1
"
)
(
param
i32
i64
)
(
i64
.
store
\
mem1
(
local
.
get
0
)
(
local
.
get
1
)
)
)
(
func
(
export
"
store2
"
)
(
param
i32
i64
)
(
i64
.
store
\
mem2
(
local
.
get
0
)
(
local
.
get
1
)
)
)
)
)
;
invoke
(
2
store1
[
0
1n
]
)
;
invoke
(
2
store2
[
0
2n
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
load1
[
0
]
)
[
value
(
"
i64
"
1n
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
2
load2
[
0
]
)
[
value
(
"
i64
"
2n
)
]
)
;
