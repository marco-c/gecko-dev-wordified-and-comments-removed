assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
a
(
array
i8
)
)
(
data
d1
"
a
"
)
(
func
(
export
"
array
.
init_data
-
immutable
"
)
(
param
1
(
ref
a
)
)
(
array
.
init_data
a
d1
(
local
.
get
1
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
array
is
immutable
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
a
(
array
(
mut
funcref
)
)
)
(
data
d1
"
a
"
)
(
func
(
export
"
array
.
init_data
-
invalid
-
1
"
)
(
param
1
(
ref
a
)
)
(
array
.
init_data
a
d1
(
local
.
get
1
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
)
)
array
type
is
not
numeric
or
vector
)
;
let
0
=
instantiate
(
(
module
(
type
arr8
(
array
i8
)
)
(
type
arr8_mut
(
array
(
mut
i8
)
)
)
(
type
arr16_mut
(
array
(
mut
i16
)
)
)
(
global
g_arr8
(
ref
arr8
)
(
array
.
new
arr8
(
i32
.
const
10
)
(
i32
.
const
12
)
)
)
(
global
g_arr8_mut
(
mut
(
ref
arr8_mut
)
)
(
array
.
new_default
arr8_mut
(
i32
.
const
12
)
)
)
(
global
g_arr16_mut
(
ref
arr16_mut
)
(
array
.
new_default
arr16_mut
(
i32
.
const
6
)
)
)
(
data
d1
"
abcdefghijkl
"
)
(
func
(
export
"
array_get_nth
"
)
(
param
1
i32
)
(
result
i32
)
(
array
.
get_u
arr8_mut
(
global
.
get
g_arr8_mut
)
(
local
.
get
1
)
)
)
(
func
(
export
"
array_get_nth_i16
"
)
(
param
1
i32
)
(
result
i32
)
(
array
.
get_u
arr16_mut
(
global
.
get
g_arr16_mut
)
(
local
.
get
1
)
)
)
(
func
(
export
"
array_init_data
-
null
"
)
(
array
.
init_data
arr8_mut
d1
(
ref
.
null
arr8_mut
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
0
)
)
)
(
func
(
export
"
array_init_data
"
)
(
param
1
i32
)
(
param
2
i32
)
(
param
3
i32
)
(
array
.
init_data
arr8_mut
d1
(
global
.
get
g_arr8_mut
)
(
local
.
get
1
)
(
local
.
get
2
)
(
local
.
get
3
)
)
)
(
func
(
export
"
array_init_data_i16
"
)
(
param
1
i32
)
(
param
2
i32
)
(
param
3
i32
)
(
array
.
init_data
arr16_mut
d1
(
global
.
get
g_arr16_mut
)
(
local
.
get
1
)
(
local
.
get
2
)
(
local
.
get
3
)
)
)
(
func
(
export
"
drop_segs
"
)
(
data
.
drop
d1
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
-
null
[
]
)
null
array
reference
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
[
13
0
0
]
)
out
of
bounds
array
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
[
0
13
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
[
0
0
13
]
)
out
of
bounds
array
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
[
0
0
13
]
)
out
of
bounds
array
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data_i16
[
0
0
7
]
)
out
of
bounds
array
access
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data
[
12
0
0
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data
[
0
12
0
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data_i16
[
0
6
0
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
11
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_get_nth
[
12
]
)
out
of
bounds
array
access
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
6
]
)
out
of
bounds
array
access
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data
[
4
2
2
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
4
]
)
[
value
(
"
i32
"
99
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
5
]
)
[
value
(
"
i32
"
100
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth
[
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data_i16
[
2
5
2
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
2
]
)
[
value
(
"
i32
"
26470
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
3
]
)
[
value
(
"
i32
"
26984
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_get_nth_i16
[
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
drop_segs
[
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
array_init_data
[
0
0
0
]
)
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
array_init_data
[
0
0
1
]
)
out
of
bounds
memory
access
)
;
let
1
=
instantiate
(
(
module
(
type
a32
(
array
(
mut
i32
)
)
)
(
type
a64
(
array
(
mut
i64
)
)
)
(
data
data0
"
"
)
(
data
data1
"
1
"
)
(
data
data2
"
12
"
)
(
data
data3
"
123
"
)
(
data
data4
"
1234
"
)
(
data
data7
"
1234567
"
)
(
data
data9
"
123456789
"
)
(
func
(
export
"
f0
"
)
(
array
.
init_data
a32
data0
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
f1
"
)
(
array
.
init_data
a32
data1
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
f2
"
)
(
array
.
init_data
a32
data2
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
f3
"
)
(
array
.
init_data
a32
data3
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
f4
"
)
(
array
.
init_data
a32
data4
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
f9
"
)
(
array
.
init_data
a32
data9
(
array
.
new_default
a32
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
6
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g0
"
)
(
array
.
init_data
a64
data0
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g1
"
)
(
array
.
init_data
a64
data1
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g4
"
)
(
array
.
init_data
a64
data4
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g7
"
)
(
array
.
init_data
a64
data7
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g8
"
)
(
array
.
init_data
a64
data9
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
0
)
(
i32
.
const
1
)
)
)
(
func
(
export
"
g9
"
)
(
array
.
init_data
a64
data9
(
array
.
new_default
a64
(
i32
.
const
1
)
)
(
i32
.
const
0
)
(
i32
.
const
2
)
(
i32
.
const
1
)
)
)
)
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f0
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f1
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f2
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f3
[
]
)
out
of
bounds
memory
access
)
;
assert_return
(
(
)
=
>
invoke
(
1
f4
[
]
)
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
f9
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
g0
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
g1
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
g4
[
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
1
g7
[
]
)
out
of
bounds
memory
access
)
;
assert_return
(
(
)
=
>
invoke
(
1
g8
[
]
)
[
]
)
;
assert_trap
(
(
)
=
>
invoke
(
1
g9
[
]
)
out
of
bounds
memory
access
)
;
