let
0
=
instantiate
(
(
module
(
import
"
spectest
"
"
memory
"
(
memory
1
2
)
)
(
import
"
spectest
"
"
memory
"
(
memory
1
2
)
)
(
memory
\
m
(
import
"
spectest
"
"
memory
"
)
1
2
)
(
import
"
spectest
"
"
memory
"
(
memory
1
2
)
)
(
data
(
memory
2
)
(
i32
.
const
10
)
"
\
\
10
"
)
(
func
(
export
"
load
"
)
(
param
i32
)
(
result
i32
)
(
i32
.
load
\
m
(
local
.
get
0
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
0
load
[
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
load
[
10
]
)
[
value
(
"
i32
"
16
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
load
[
8
]
)
[
value
(
"
i32
"
1048576
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
1000000
]
)
out
of
bounds
memory
access
)
;
