let
0
=
instantiate
(
(
module
(
func
)
(
export
"
a
"
(
func
0
)
)
)
)
;
let
1
=
instantiate
(
(
module
(
func
)
(
export
"
a
"
(
func
0
)
)
(
export
"
b
"
(
func
0
)
)
)
)
;
let
2
=
instantiate
(
(
module
(
func
)
(
func
)
(
export
"
a
"
(
func
0
)
)
(
export
"
b
"
(
func
1
)
)
)
)
;
let
3
=
instantiate
(
(
module
(
func
(
export
"
a
"
)
)
)
)
;
let
4
=
instantiate
(
(
module
(
func
(
export
"
a
"
)
(
export
"
b
"
)
(
export
"
c
"
)
)
)
)
;
let
5
=
instantiate
(
(
module
(
func
(
export
"
a
"
)
(
export
"
b
"
)
(
param
i32
)
)
)
)
;
let
6
=
instantiate
(
(
module
(
func
)
(
export
"
a
"
(
func
0
)
)
)
)
;
let
7
=
instantiate
(
(
module
(
func
\
a
(
export
"
a
"
)
)
)
)
;
let
8
=
instantiate
(
(
module
(
func
\
a
)
(
export
"
a
"
(
func
\
a
)
)
)
)
;
let
9
=
instantiate
(
(
module
(
export
"
a
"
(
func
0
)
)
(
func
)
)
)
;
let
10
=
instantiate
(
(
module
(
export
"
a
"
(
func
\
a
)
)
(
func
\
a
)
)
)
;
let
11
=
instantiate
(
(
module
\
Func
(
export
"
e
"
(
func
\
f
)
)
(
func
\
f
(
param
\
n
i32
)
(
result
i32
)
(
return
(
i32
.
add
(
local
.
get
\
n
)
(
i32
.
const
1
)
)
)
)
)
)
;
let
Func
=
11
;
assert_return
(
(
)
=
>
invoke
(
11
e
[
42
]
)
[
value
(
"
i32
"
43
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Func
e
[
42
]
)
[
value
(
"
i32
"
43
)
]
)
;
let
12
=
instantiate
(
(
module
)
)
;
let
13
=
instantiate
(
(
module
\
Other1
)
)
;
let
Other1
=
13
;
assert_return
(
(
)
=
>
invoke
(
Func
e
[
42
]
)
[
value
(
"
i32
"
43
)
]
)
;
let
14
=
instantiate
(
(
module
(
type
(
;
0
;
)
(
func
(
result
i32
)
)
)
(
func
(
;
0
;
)
(
type
0
)
(
result
i32
)
i32
.
const
42
)
(
export
"
a
"
(
func
0
)
)
(
export
"
b
"
(
func
0
)
)
(
export
"
c
"
(
func
0
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
14
a
[
]
)
[
value
(
"
i32
"
42
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
b
[
]
)
[
value
(
"
i32
"
42
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
14
c
[
]
)
[
value
(
"
i32
"
42
)
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
export
"
a
"
(
func
0
)
)
)
)
unknown
function
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
export
"
a
"
(
func
1
)
)
)
)
unknown
function
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
import
"
spectest
"
"
print_i32
"
(
func
(
param
i32
)
)
)
(
export
"
a
"
(
func
1
)
)
)
)
unknown
function
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
export
"
a
"
(
func
0
)
)
(
export
"
a
"
(
func
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
func
)
(
export
"
a
"
(
func
0
)
)
(
export
"
a
"
(
func
1
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
func
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
table
0
funcref
)
(
export
"
a
"
(
func
0
)
)
(
export
"
a
"
(
table
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
)
(
memory
0
)
(
export
"
a
"
(
func
0
)
)
(
export
"
a
"
(
memory
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
tag
\
t0
(
export
"
t0
"
)
)
(
tag
\
t1
(
export
"
t0
"
)
)
)
)
duplicate
export
name
)
;
let
15
=
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
;
let
16
=
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
(
export
"
b
"
(
global
0
)
)
)
)
;
let
17
=
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
(
export
"
b
"
(
global
1
)
)
)
)
;
let
18
=
instantiate
(
(
module
(
global
(
export
"
a
"
)
i32
(
i32
.
const
0
)
)
)
)
;
let
19
=
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
;
let
20
=
instantiate
(
(
module
(
global
\
a
(
export
"
a
"
)
i32
(
i32
.
const
0
)
)
)
)
;
let
21
=
instantiate
(
(
module
(
global
\
a
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
\
a
)
)
)
)
;
let
22
=
instantiate
(
(
module
(
export
"
a
"
(
global
0
)
)
(
global
i32
(
i32
.
const
0
)
)
)
)
;
let
23
=
instantiate
(
(
module
(
export
"
a
"
(
global
\
a
)
)
(
global
\
a
i32
(
i32
.
const
0
)
)
)
)
;
let
24
=
instantiate
(
(
module
\
Global
(
export
"
e
"
(
global
\
g
)
)
(
global
\
g
i32
(
i32
.
const
42
)
)
)
)
;
let
Global
=
24
;
assert_return
(
(
)
=
>
get
(
24
e
)
[
value
(
"
i32
"
42
)
]
)
;
assert_return
(
(
)
=
>
get
(
Global
e
)
[
value
(
"
i32
"
42
)
]
)
;
let
25
=
instantiate
(
(
module
)
)
;
let
26
=
instantiate
(
(
module
\
Other2
)
)
;
let
Other2
=
26
;
assert_return
(
(
)
=
>
get
(
Global
e
)
[
value
(
"
i32
"
42
)
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
export
"
a
"
(
global
0
)
)
)
)
unknown
global
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
1
)
)
)
)
unknown
global
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
import
"
spectest
"
"
global_i32
"
(
global
i32
)
)
(
export
"
a
"
(
global
1
)
)
)
)
unknown
global
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
global
0
)
)
(
export
"
a
"
(
global
1
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
func
)
(
export
"
a
"
(
global
0
)
)
(
export
"
a
"
(
func
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
table
0
funcref
)
(
export
"
a
"
(
global
0
)
)
(
export
"
a
"
(
table
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
global
i32
(
i32
.
const
0
)
)
(
memory
0
)
(
export
"
a
"
(
global
0
)
)
(
export
"
a
"
(
memory
0
)
)
)
)
duplicate
export
name
)
;
let
27
=
instantiate
(
(
module
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
)
)
;
let
28
=
instantiate
(
(
module
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
(
export
"
b
"
(
table
0
)
)
)
)
;
let
29
=
instantiate
(
(
module
(
table
0
funcref
)
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
(
export
"
b
"
(
table
1
)
)
)
)
;
let
30
=
instantiate
(
(
module
(
table
(
export
"
a
"
)
0
funcref
)
)
)
;
let
31
=
instantiate
(
(
module
(
table
(
export
"
a
"
)
0
1
funcref
)
)
)
;
let
32
=
instantiate
(
(
module
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
)
)
;
let
33
=
instantiate
(
(
module
(
table
0
1
funcref
)
(
export
"
a
"
(
table
0
)
)
)
)
;
let
34
=
instantiate
(
(
module
(
table
\
a
(
export
"
a
"
)
0
funcref
)
)
)
;
let
35
=
instantiate
(
(
module
(
table
\
a
(
export
"
a
"
)
0
1
funcref
)
)
)
;
let
36
=
instantiate
(
(
module
(
table
\
a
0
funcref
)
(
export
"
a
"
(
table
\
a
)
)
)
)
;
let
37
=
instantiate
(
(
module
(
table
\
a
0
1
funcref
)
(
export
"
a
"
(
table
\
a
)
)
)
)
;
let
38
=
instantiate
(
(
module
(
export
"
a
"
(
table
0
)
)
(
table
0
funcref
)
)
)
;
let
39
=
instantiate
(
(
module
(
export
"
a
"
(
table
0
)
)
(
table
0
1
funcref
)
)
)
;
let
40
=
instantiate
(
(
module
(
export
"
a
"
(
table
\
a
)
)
(
table
\
a
0
funcref
)
)
)
;
let
41
=
instantiate
(
(
module
(
export
"
a
"
(
table
\
a
)
)
(
table
\
a
0
1
funcref
)
)
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
export
"
a
"
(
table
0
)
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
export
"
a
"
(
table
1
)
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
import
"
spectest
"
"
table
"
(
table
10
20
funcref
)
)
(
export
"
a
"
(
table
1
)
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
(
export
"
a
"
(
table
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
table
0
funcref
)
(
export
"
a
"
(
table
0
)
)
(
export
"
a
"
(
table
1
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
func
)
(
export
"
a
"
(
table
0
)
)
(
export
"
a
"
(
func
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
table
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
funcref
)
(
memory
0
)
(
export
"
a
"
(
table
0
)
)
(
export
"
a
"
(
memory
0
)
)
)
)
duplicate
export
name
)
;
let
42
=
instantiate
(
(
module
(
memory
0
)
(
export
"
a
"
(
memory
0
)
)
)
)
;
let
43
=
instantiate
(
(
module
(
memory
0
)
(
export
"
a
"
(
memory
0
)
)
(
export
"
b
"
(
memory
0
)
)
)
)
;
let
44
=
instantiate
(
(
module
(
memory
(
export
"
a
"
)
0
)
)
)
;
let
45
=
instantiate
(
(
module
(
memory
(
export
"
a
"
)
0
1
)
)
)
;
let
46
=
instantiate
(
(
module
(
memory
0
)
(
export
"
a
"
(
memory
0
)
)
)
)
;
let
47
=
instantiate
(
(
module
(
memory
0
1
)
(
export
"
a
"
(
memory
0
)
)
)
)
;
let
48
=
instantiate
(
(
module
(
memory
\
a
(
export
"
a
"
)
0
)
)
)
;
let
49
=
instantiate
(
(
module
(
memory
\
a
(
export
"
a
"
)
0
1
)
)
)
;
let
50
=
instantiate
(
(
module
(
memory
\
a
0
)
(
export
"
a
"
(
memory
\
a
)
)
)
)
;
let
51
=
instantiate
(
(
module
(
memory
\
a
0
1
)
(
export
"
a
"
(
memory
\
a
)
)
)
)
;
let
52
=
instantiate
(
(
module
(
export
"
a
"
(
memory
0
)
)
(
memory
0
)
)
)
;
let
53
=
instantiate
(
(
module
(
export
"
a
"
(
memory
0
)
)
(
memory
0
1
)
)
)
;
let
54
=
instantiate
(
(
module
(
export
"
a
"
(
memory
\
a
)
)
(
memory
\
a
0
)
)
)
;
let
55
=
instantiate
(
(
module
(
export
"
a
"
(
memory
\
a
)
)
(
memory
\
a
0
1
)
)
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
export
"
a
"
(
memory
0
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
memory
0
)
(
export
"
a
"
(
memory
1
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
import
"
spectest
"
"
memory
"
(
memory
1
2
)
)
(
export
"
a
"
(
memory
1
)
)
)
)
unknown
memory
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
memory
0
)
(
export
"
a
"
(
memory
0
)
)
(
export
"
a
"
(
memory
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
memory
0
)
(
func
)
(
export
"
a
"
(
memory
0
)
)
(
export
"
a
"
(
func
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
memory
0
)
(
global
i32
(
i32
.
const
0
)
)
(
export
"
a
"
(
memory
0
)
)
(
export
"
a
"
(
global
0
)
)
)
)
duplicate
export
name
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
memory
0
)
(
table
0
funcref
)
(
export
"
a
"
(
memory
0
)
)
(
export
"
a
"
(
table
0
)
)
)
)
duplicate
export
name
)
;
