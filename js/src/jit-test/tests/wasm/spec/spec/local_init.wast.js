let
0
=
instantiate
(
(
module
(
func
(
export
"
get
-
after
-
set
"
)
(
param
\
p
(
ref
extern
)
)
(
result
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
local
.
set
\
x
(
local
.
get
\
p
)
)
(
local
.
get
\
x
)
)
(
func
(
export
"
get
-
after
-
tee
"
)
(
param
\
p
(
ref
extern
)
)
(
result
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
drop
(
local
.
tee
\
x
(
local
.
get
\
p
)
)
)
(
local
.
get
\
x
)
)
(
func
(
export
"
get
-
in
-
block
-
after
-
set
"
)
(
param
\
p
(
ref
extern
)
)
(
result
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
local
.
set
\
x
(
local
.
get
\
p
)
)
(
block
(
result
(
ref
extern
)
)
(
local
.
get
\
x
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
0
get
-
after
-
set
[
externref
(
1
)
]
)
[
new
ExternRefResult
(
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
get
-
after
-
tee
[
externref
(
2
)
]
)
[
new
ExternRefResult
(
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
get
-
in
-
block
-
after
-
set
[
externref
(
3
)
]
)
[
new
ExternRefResult
(
3
)
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
\
uninit
(
local
\
x
(
ref
extern
)
)
(
drop
(
local
.
get
\
x
)
)
)
)
)
uninitialized
local
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
\
uninit
-
after
-
end
(
param
\
p
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
block
(
local
.
set
\
x
(
local
.
get
\
p
)
)
(
drop
(
local
.
tee
\
x
(
local
.
get
\
p
)
)
)
)
(
drop
(
local
.
get
\
x
)
)
)
)
)
uninitialized
local
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
\
uninit
-
in
-
else
(
param
\
p
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
if
(
i32
.
const
0
)
(
then
(
local
.
set
\
x
(
local
.
get
\
p
)
)
)
(
else
(
local
.
get
\
x
)
)
)
)
)
)
uninitialized
local
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
\
uninit
-
from
-
if
(
param
\
p
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
if
(
i32
.
const
0
)
(
then
(
local
.
set
\
x
(
local
.
get
\
p
)
)
)
(
else
(
local
.
set
\
x
(
local
.
get
\
p
)
)
)
)
(
drop
(
local
.
get
\
x
)
)
)
)
)
uninitialized
local
)
;
let
1
=
instantiate
(
(
module
(
func
(
export
"
tee
-
init
"
)
(
param
\
p
(
ref
extern
)
)
(
result
(
ref
extern
)
)
(
local
\
x
(
ref
extern
)
)
(
drop
(
local
.
tee
\
x
(
local
.
get
\
p
)
)
)
(
local
.
get
\
x
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
1
tee
-
init
[
externref
(
1
)
]
)
[
new
ExternRefResult
(
1
)
]
)
;
