let
0
=
instantiate
(
(
module
(
table
0
funcref
)
)
)
;
let
1
=
instantiate
(
(
module
(
table
1
funcref
)
)
)
;
let
2
=
instantiate
(
(
module
(
table
0
0
funcref
)
)
)
;
let
3
=
instantiate
(
(
module
(
table
0
1
funcref
)
)
)
;
let
4
=
instantiate
(
(
module
(
table
1
256
funcref
)
)
)
;
let
5
=
instantiate
(
(
module
(
table
0
65536
funcref
)
)
)
;
let
_anon_8
=
module
(
(
module
(
table
0xffff_ffff
funcref
)
)
)
;
let
6
=
instantiate
(
(
module
(
table
0
0xffff_ffff
funcref
)
)
)
;
let
7
=
instantiate
(
(
module
(
table
1
(
ref
null
func
)
)
)
)
;
let
8
=
instantiate
(
(
module
(
table
1
(
ref
null
extern
)
)
)
)
;
let
9
=
instantiate
(
(
module
(
table
1
(
ref
null
\
t
)
)
(
type
\
t
(
func
)
)
)
)
;
let
10
=
instantiate
(
(
module
(
table
0
funcref
)
(
table
0
funcref
)
)
)
;
let
11
=
instantiate
(
(
module
(
table
(
import
"
spectest
"
"
table
"
)
0
funcref
)
(
table
0
funcref
)
)
)
;
let
12
=
instantiate
(
(
module
(
table
0
funcref
(
ref
.
null
func
)
)
)
)
;
let
13
=
instantiate
(
(
module
(
table
1
funcref
(
ref
.
null
func
)
)
)
)
;
let
14
=
instantiate
(
(
module
(
table
1
(
ref
null
func
)
(
ref
.
null
func
)
)
)
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
elem
(
i32
.
const
0
)
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
elem
(
i32
.
const
0
)
\
f
)
(
func
\
f
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
1
0
funcref
)
)
)
size
minimum
must
not
be
greater
than
maximum
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0xffff_ffff
0
funcref
)
)
)
size
minimum
must
not
be
greater
than
maximum
)
;
let
15
=
instantiate
(
(
module
(
table
i64
0
funcref
)
)
)
;
let
16
=
instantiate
(
(
module
(
table
i64
1
funcref
)
)
)
;
let
17
=
instantiate
(
(
module
(
table
i64
0
0
funcref
)
)
)
;
let
18
=
instantiate
(
(
module
(
table
i64
0
1
funcref
)
)
)
;
let
19
=
instantiate
(
(
module
(
table
i64
1
256
funcref
)
)
)
;
let
20
=
instantiate
(
(
module
(
table
i64
0
65536
funcref
)
)
)
;
let
21
=
instantiate
(
(
module
(
table
i64
0
0xffff_ffff
funcref
)
)
)
;
let
22
=
instantiate
(
(
module
(
table
i64
0
0x1_0000_0000
funcref
)
)
)
;
let
_anon_57
=
module
(
(
module
(
table
i64
0xffff_ffff_ffff_ffff
funcref
)
)
)
;
let
23
=
instantiate
(
(
module
(
table
i64
0
0xffff_ffff_ffff_ffff
funcref
)
)
)
;
let
24
=
instantiate
(
(
module
(
table
i64
0
funcref
)
(
table
i64
0
funcref
)
)
)
;
let
25
=
instantiate
(
(
module
(
table
(
import
"
spectest
"
"
table64
"
)
i64
0
funcref
)
(
table
i64
0
funcref
)
)
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
i64
1
0
funcref
)
)
)
size
minimum
must
not
be
greater
than
maximum
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
i64
0xffff_ffff
0
funcref
)
)
)
size
minimum
must
not
be
greater
than
maximum
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
elem
(
i32
.
const
0
)
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
elem
(
i32
.
const
0
)
\
f
)
(
func
\
f
)
)
)
unknown
table
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
1
(
ref
null
func
)
(
i32
.
const
0
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
1
(
ref
func
)
(
ref
.
null
extern
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
\
t
(
func
)
)
(
table
1
(
ref
\
t
)
(
ref
.
null
func
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
1
(
ref
func
)
(
ref
.
null
func
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
(
ref
func
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
table
0
(
ref
extern
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
\
t
(
func
)
)
(
table
0
(
ref
\
t
)
)
)
)
type
mismatch
)
;
let
26
=
instantiate
(
(
module
(
global
(
export
"
g
"
)
(
ref
\
f
)
(
ref
.
func
\
f
)
)
(
type
\
f
(
func
)
)
(
func
\
f
)
)
)
;
register
(
26
M
)
;
let
27
=
instantiate
(
(
module
(
global
\
g
(
import
"
M
"
"
g
"
)
(
ref
\
dummy
)
)
(
type
\
dummy
(
func
)
)
(
func
\
dummy
)
(
table
\
t1
10
funcref
)
(
table
\
t2
10
funcref
(
ref
.
func
\
dummy
)
)
(
table
\
t3
10
(
ref
\
dummy
)
(
ref
.
func
\
dummy
)
)
(
table
\
t4
10
funcref
(
global
.
get
\
g
)
)
(
table
\
t5
10
(
ref
\
dummy
)
(
global
.
get
\
g
)
)
(
func
(
export
"
get1
"
)
(
result
funcref
)
(
table
.
get
\
t1
(
i32
.
const
1
)
)
)
(
func
(
export
"
get2
"
)
(
result
funcref
)
(
table
.
get
\
t2
(
i32
.
const
4
)
)
)
(
func
(
export
"
get3
"
)
(
result
funcref
)
(
table
.
get
\
t3
(
i32
.
const
7
)
)
)
(
func
(
export
"
get4
"
)
(
result
funcref
)
(
table
.
get
\
t4
(
i32
.
const
8
)
)
)
(
func
(
export
"
get5
"
)
(
result
funcref
)
(
table
.
get
\
t5
(
i32
.
const
9
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
27
get1
[
]
)
[
null
]
)
;
assert_return
(
(
)
=
>
invoke
(
27
get2
[
]
)
[
new
RefWithType
(
'
funcref
'
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
27
get3
[
]
)
[
new
RefWithType
(
'
funcref
'
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
27
get4
[
]
)
[
new
RefWithType
(
'
funcref
'
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
27
get5
[
]
)
[
new
RefWithType
(
'
funcref
'
)
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
\
f
(
func
)
)
(
table
10
(
ref
\
f
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
\
f
(
func
)
)
(
table
0
(
ref
\
f
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
type
\
f
(
func
)
)
(
table
0
0
(
ref
\
f
)
)
)
)
type
mismatch
)
;
assert_malformed
(
(
)
=
>
instantiate
(
(
table
\
foo
1
funcref
)
(
table
\
foo
1
funcref
)
)
duplicate
table
)
;
assert_malformed
(
(
)
=
>
instantiate
(
(
import
"
"
"
"
(
table
\
foo
1
funcref
)
)
(
table
\
foo
1
funcref
)
)
duplicate
table
)
;
assert_malformed
(
(
)
=
>
instantiate
(
(
import
"
"
"
"
(
table
\
foo
1
funcref
)
)
(
import
"
"
"
"
(
table
\
foo
1
funcref
)
)
)
duplicate
table
)
;
