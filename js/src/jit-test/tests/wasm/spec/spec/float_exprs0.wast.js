let
0
=
instantiate
(
(
module
(
memory
0
0
)
(
memory
m
1
1
)
(
memory
0
0
)
(
func
(
export
"
init
"
)
(
param
i
i32
)
(
param
x
f64
)
(
f64
.
store
m
(
local
.
get
i
)
(
local
.
get
x
)
)
)
(
func
(
export
"
run
"
)
(
param
n
i32
)
(
param
z
f64
)
(
local
i
i32
)
(
block
exit
(
loop
cont
(
f64
.
store
m
(
local
.
get
i
)
(
f64
.
div
(
f64
.
load
m
(
local
.
get
i
)
)
(
local
.
get
z
)
)
)
(
local
.
set
i
(
i32
.
add
(
local
.
get
i
)
(
i32
.
const
8
)
)
)
(
br_if
cont
(
i32
.
lt_u
(
local
.
get
i
)
(
local
.
get
n
)
)
)
)
)
)
(
func
(
export
"
check
"
)
(
param
i
i32
)
(
result
f64
)
(
f64
.
load
m
(
local
.
get
i
)
)
)
)
)
;
invoke
(
0
init
[
0
value
(
"
f64
"
15
.
1
)
]
)
;
invoke
(
0
init
[
8
value
(
"
f64
"
15
.
2
)
]
)
;
invoke
(
0
init
[
16
value
(
"
f64
"
15
.
3
)
]
)
;
invoke
(
0
init
[
24
value
(
"
f64
"
15
.
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
0
]
)
[
value
(
"
f64
"
15
.
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
8
]
)
[
value
(
"
f64
"
15
.
2
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
16
]
)
[
value
(
"
f64
"
15
.
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
24
]
)
[
value
(
"
f64
"
15
.
4
)
]
)
;
invoke
(
0
run
[
32
value
(
"
f64
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
0
]
)
[
value
(
"
f64
"
5
.
033333333333333
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
8
]
)
[
value
(
"
f64
"
5
.
066666666666666
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
16
]
)
[
value
(
"
f64
"
5
.
1000000000000005
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
check
[
24
]
)
[
value
(
"
f64
"
5
.
133333333333334
)
]
)
;
