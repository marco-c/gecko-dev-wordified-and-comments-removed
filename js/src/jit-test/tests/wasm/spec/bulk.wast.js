let
1
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x05
\
x83
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x01
\
x0b
\
x86
\
x80
\
x80
\
x80
\
x00
\
x01
\
x01
\
x03
\
x66
\
x6f
\
x6f
"
)
;
let
2
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x60
\
x00
\
x00
\
x03
\
x83
\
x80
\
x80
\
x80
\
x00
\
x02
\
x00
\
x00
\
x04
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x70
\
x00
\
x03
\
x09
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x01
\
x05
\
x70
\
x03
\
xd2
\
x00
\
x0b
\
xd0
\
x0b
\
xd2
\
x01
\
x0b
\
x0a
\
x8f
\
x80
\
x80
\
x80
\
x00
\
x02
\
x82
\
x80
\
x80
\
x80
\
x00
\
x00
\
x0b
\
x82
\
x80
\
x80
\
x80
\
x00
\
x00
\
x0b
"
)
;
let
3
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x02
\
x60
\
x03
\
x7f
\
x7f
\
x7f
\
x00
\
x60
\
x01
\
x7f
\
x01
\
x7f
\
x03
\
x83
\
x80
\
x80
\
x80
\
x00
\
x02
\
x00
\
x01
\
x05
\
x83
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x01
\
x07
\
x92
\
x80
\
x80
\
x80
\
x00
\
x02
\
x04
\
x66
\
x69
\
x6c
\
x6c
\
x00
\
x00
\
x07
\
x6c
\
x6f
\
x61
\
x64
\
x38
\
x5f
\
x75
\
x00
\
x01
\
x0a
\
x9d
\
x80
\
x80
\
x80
\
x00
\
x02
\
x8b
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x20
\
x01
\
x20
\
x02
\
xfc
\
x0b
\
x00
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x2d
\
x00
\
x00
\
x0b
"
)
;
run
(
(
)
=
>
call
(
3
"
fill
"
[
1
255
3
]
)
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
0
]
)
0
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
1
]
)
255
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
2
]
)
255
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
3
]
)
255
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
4
]
)
0
)
;
run
(
(
)
=
>
call
(
3
"
fill
"
[
0
48_042
2
]
)
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
0
]
)
170
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
1
]
)
170
)
;
run
(
(
)
=
>
call
(
3
"
fill
"
[
0
0
65_536
]
)
)
;
assert_trap
(
(
)
=
>
call
(
3
"
fill
"
[
65_280
1
257
]
)
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
65_280
]
)
1
)
;
assert_return
(
(
)
=
>
call
(
3
"
load8_u
"
[
65_535
]
)
1
)
;
run
(
(
)
=
>
call
(
3
"
fill
"
[
65_536
0
0
]
)
)
;
run
(
(
)
=
>
call
(
3
"
fill
"
[
65_537
0
0
]
)
)
;
let
4
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x02
\
x60
\
x03
\
x7f
\
x7f
\
x7f
\
x00
\
x60
\
x01
\
x7f
\
x01
\
x7f
\
x03
\
x83
\
x80
\
x80
\
x80
\
x00
\
x02
\
x00
\
x01
\
x05
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x01
\
x01
\
x01
\
x07
\
x92
\
x80
\
x80
\
x80
\
x00
\
x02
\
x04
\
x63
\
x6f
\
x70
\
x79
\
x00
\
x00
\
x07
\
x6c
\
x6f
\
x61
\
x64
\
x38
\
x5f
\
x75
\
x00
\
x01
\
x0a
\
x9e
\
x80
\
x80
\
x80
\
x00
\
x02
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x20
\
x01
\
x20
\
x02
\
xfc
\
x0a
\
x00
\
x00
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x2d
\
x00
\
x00
\
x0b
\
x0b
\
x8a
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x41
\
x00
\
x0b
\
x04
\
xaa
\
xbb
\
xcc
\
xdd
"
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
10
0
4
]
)
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
9
]
)
0
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
10
]
)
170
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
11
]
)
187
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
12
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
13
]
)
221
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
14
]
)
0
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
8
10
4
]
)
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
8
]
)
170
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
9
]
)
187
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
10
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
11
]
)
221
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
12
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
13
]
)
221
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
10
7
6
]
)
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
10
]
)
0
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
11
]
)
170
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
12
]
)
187
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
13
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
14
]
)
221
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
15
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
4
"
load8_u
"
[
16
]
)
0
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
65_280
0
256
]
)
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
65_024
65_280
256
]
)
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
65_536
0
0
]
)
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
0
65_536
0
]
)
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
65_537
0
0
]
)
)
;
run
(
(
)
=
>
call
(
4
"
copy
"
[
0
65_537
0
]
)
)
;
let
5
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x02
\
x60
\
x03
\
x7f
\
x7f
\
x7f
\
x00
\
x60
\
x01
\
x7f
\
x01
\
x7f
\
x03
\
x83
\
x80
\
x80
\
x80
\
x00
\
x02
\
x00
\
x01
\
x05
\
x83
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x01
\
x07
\
x92
\
x80
\
x80
\
x80
\
x00
\
x02
\
x04
\
x69
\
x6e
\
x69
\
x74
\
x00
\
x00
\
x07
\
x6c
\
x6f
\
x61
\
x64
\
x38
\
x5f
\
x75
\
x00
\
x01
\
x0c
\
x81
\
x80
\
x80
\
x80
\
x00
\
x01
\
x0a
\
x9e
\
x80
\
x80
\
x80
\
x00
\
x02
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x20
\
x01
\
x20
\
x02
\
xfc
\
x08
\
x00
\
x00
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x2d
\
x00
\
x00
\
x0b
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x01
\
x01
\
x04
\
xaa
\
xbb
\
xcc
\
xdd
"
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
0
1
2
]
)
)
;
assert_return
(
(
)
=
>
call
(
5
"
load8_u
"
[
0
]
)
187
)
;
assert_return
(
(
)
=
>
call
(
5
"
load8_u
"
[
1
]
)
204
)
;
assert_return
(
(
)
=
>
call
(
5
"
load8_u
"
[
2
]
)
0
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
65_532
0
4
]
)
)
;
assert_trap
(
(
)
=
>
call
(
5
"
init
"
[
65_534
0
3
]
)
)
;
assert_return
(
(
)
=
>
call
(
5
"
load8_u
"
[
65_534
]
)
170
)
;
assert_return
(
(
)
=
>
call
(
5
"
load8_u
"
[
65_535
]
)
187
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
65_536
0
0
]
)
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
0
4
0
]
)
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
65_537
0
0
]
)
)
;
run
(
(
)
=
>
call
(
5
"
init
"
[
0
5
0
]
)
)
;
let
6
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x60
\
x00
\
x00
\
x03
\
x85
\
x80
\
x80
\
x80
\
x00
\
x04
\
x00
\
x00
\
x00
\
x00
\
x05
\
x83
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x01
\
x07
\
xbb
\
x80
\
x80
\
x80
\
x00
\
x04
\
x0c
\
x64
\
x72
\
x6f
\
x70
\
x5f
\
x70
\
x61
\
x73
\
x73
\
x69
\
x76
\
x65
\
x00
\
x00
\
x0c
\
x69
\
x6e
\
x69
\
x74
\
x5f
\
x70
\
x61
\
x73
\
x73
\
x69
\
x76
\
x65
\
x00
\
x01
\
x0b
\
x64
\
x72
\
x6f
\
x70
\
x5f
\
x61
\
x63
\
x74
\
x69
\
x76
\
x65
\
x00
\
x02
\
x0b
\
x69
\
x6e
\
x69
\
x74
\
x5f
\
x61
\
x63
\
x74
\
x69
\
x76
\
x65
\
x00
\
x03
\
x0c
\
x81
\
x80
\
x80
\
x80
\
x00
\
x02
\
x0a
\
xb7
\
x80
\
x80
\
x80
\
x00
\
x04
\
x85
\
x80
\
x80
\
x80
\
x00
\
x00
\
xfc
\
x09
\
x00
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x41
\
x00
\
x41
\
x00
\
xfc
\
x08
\
x00
\
x00
\
x0b
\
x85
\
x80
\
x80
\
x80
\
x00
\
x00
\
xfc
\
x09
\
x01
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x41
\
x00
\
x41
\
x00
\
xfc
\
x08
\
x01
\
x00
\
x0b
\
x0b
\
x88
\
x80
\
x80
\
x80
\
x00
\
x02
\
x01
\
x00
\
x00
\
x41
\
x00
\
x0b
\
x00
"
)
;
run
(
(
)
=
>
call
(
6
"
init_passive
"
[
]
)
)
;
run
(
(
)
=
>
call
(
6
"
drop_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
6
"
drop_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
6
"
init_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
6
"
drop_active
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
6
"
init_active
"
[
]
)
)
;
let
7
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x90
\
x80
\
x80
\
x80
\
x00
\
x03
\
x60
\
x00
\
x01
\
x7f
\
x60
\
x03
\
x7f
\
x7f
\
x7f
\
x00
\
x60
\
x01
\
x7f
\
x01
\
x7f
\
x03
\
x85
\
x80
\
x80
\
x80
\
x00
\
x04
\
x00
\
x00
\
x01
\
x02
\
x04
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x70
\
x00
\
x03
\
x07
\
x8f
\
x80
\
x80
\
x80
\
x00
\
x02
\
x04
\
x69
\
x6e
\
x69
\
x74
\
x00
\
x02
\
x04
\
x63
\
x61
\
x6c
\
x6c
\
x00
\
x03
\
x09
\
x90
\
x80
\
x80
\
x80
\
x00
\
x01
\
x05
\
x70
\
x04
\
xd2
\
x00
\
x0b
\
xd2
\
x01
\
x0b
\
xd2
\
x00
\
x0b
\
xd2
\
x01
\
x0b
\
x0a
\
xb0
\
x80
\
x80
\
x80
\
x00
\
x04
\
x84
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x0b
\
x84
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x01
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x20
\
x01
\
x20
\
x02
\
xfc
\
x0c
\
x00
\
x00
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x11
\
x00
\
x00
\
x0b
"
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
0
1
2
]
)
)
;
assert_return
(
(
)
=
>
call
(
7
"
call
"
[
0
]
)
1
)
;
assert_return
(
(
)
=
>
call
(
7
"
call
"
[
1
]
)
0
)
;
assert_trap
(
(
)
=
>
call
(
7
"
call
"
[
2
]
)
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
1
2
2
]
)
)
;
assert_trap
(
(
)
=
>
call
(
7
"
init
"
[
2
0
2
]
)
)
;
assert_return
(
(
)
=
>
call
(
7
"
call
"
[
2
]
)
0
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
3
0
0
]
)
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
0
4
0
]
)
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
4
0
0
]
)
)
;
run
(
(
)
=
>
call
(
7
"
init
"
[
0
5
0
]
)
)
;
let
8
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x60
\
x00
\
x00
\
x03
\
x86
\
x80
\
x80
\
x80
\
x00
\
x05
\
x00
\
x00
\
x00
\
x00
\
x00
\
x04
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x70
\
x00
\
x01
\
x07
\
xbb
\
x80
\
x80
\
x80
\
x00
\
x04
\
x0c
\
x64
\
x72
\
x6f
\
x70
\
x5f
\
x70
\
x61
\
x73
\
x73
\
x69
\
x76
\
x65
\
x00
\
x01
\
x0c
\
x69
\
x6e
\
x69
\
x74
\
x5f
\
x70
\
x61
\
x73
\
x73
\
x69
\
x76
\
x65
\
x00
\
x02
\
x0b
\
x64
\
x72
\
x6f
\
x70
\
x5f
\
x61
\
x63
\
x74
\
x69
\
x76
\
x65
\
x00
\
x03
\
x0b
\
x69
\
x6e
\
x69
\
x74
\
x5f
\
x61
\
x63
\
x74
\
x69
\
x76
\
x65
\
x00
\
x04
\
x09
\
x8d
\
x80
\
x80
\
x80
\
x00
\
x02
\
x05
\
x70
\
x01
\
xd2
\
x00
\
x0b
\
x00
\
x41
\
x00
\
x0b
\
x01
\
x00
\
x0a
\
xbe
\
x80
\
x80
\
x80
\
x00
\
x05
\
x82
\
x80
\
x80
\
x80
\
x00
\
x00
\
x0b
\
x85
\
x80
\
x80
\
x80
\
x00
\
x00
\
xfc
\
x0d
\
x00
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x41
\
x00
\
x41
\
x00
\
xfc
\
x0c
\
x00
\
x00
\
x0b
\
x85
\
x80
\
x80
\
x80
\
x00
\
x00
\
xfc
\
x0d
\
x01
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x41
\
x00
\
x41
\
x00
\
xfc
\
x0c
\
x01
\
x00
\
x0b
"
)
;
run
(
(
)
=
>
call
(
8
"
init_passive
"
[
]
)
)
;
run
(
(
)
=
>
call
(
8
"
drop_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
8
"
drop_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
8
"
init_passive
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
8
"
drop_active
"
[
]
)
)
;
assert_trap
(
(
)
=
>
call
(
8
"
init_active
"
[
]
)
)
;
let
9
=
instance
(
"
\
x00
\
x61
\
x73
\
x6d
\
x01
\
x00
\
x00
\
x00
\
x01
\
x90
\
x80
\
x80
\
x80
\
x00
\
x03
\
x60
\
x00
\
x01
\
x7f
\
x60
\
x03
\
x7f
\
x7f
\
x7f
\
x00
\
x60
\
x01
\
x7f
\
x01
\
x7f
\
x03
\
x86
\
x80
\
x80
\
x80
\
x00
\
x05
\
x00
\
x00
\
x00
\
x01
\
x02
\
x04
\
x84
\
x80
\
x80
\
x80
\
x00
\
x01
\
x70
\
x00
\
x0a
\
x07
\
x8f
\
x80
\
x80
\
x80
\
x00
\
x02
\
x04
\
x63
\
x6f
\
x70
\
x79
\
x00
\
x03
\
x04
\
x63
\
x61
\
x6c
\
x6c
\
x00
\
x04
\
x09
\
x89
\
x80
\
x80
\
x80
\
x00
\
x01
\
x00
\
x41
\
x00
\
x0b
\
x03
\
x00
\
x01
\
x02
\
x0a
\
xb9
\
x80
\
x80
\
x80
\
x00
\
x05
\
x84
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x00
\
x0b
\
x84
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x01
\
x0b
\
x84
\
x80
\
x80
\
x80
\
x00
\
x00
\
x41
\
x02
\
x0b
\
x8c
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x20
\
x01
\
x20
\
x02
\
xfc
\
x0e
\
x00
\
x00
\
x0b
\
x87
\
x80
\
x80
\
x80
\
x00
\
x00
\
x20
\
x00
\
x11
\
x00
\
x00
\
x0b
"
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
3
0
3
]
)
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
3
]
)
0
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
4
]
)
1
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
5
]
)
2
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
0
1
3
]
)
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
0
]
)
1
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
1
]
)
2
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
2
]
)
0
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
2
0
3
]
)
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
2
]
)
1
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
3
]
)
2
)
;
assert_return
(
(
)
=
>
call
(
9
"
call
"
[
4
]
)
0
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
6
8
2
]
)
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
8
6
2
]
)
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
10
0
0
]
)
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
0
10
0
]
)
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
11
0
0
]
)
)
;
run
(
(
)
=
>
call
(
9
"
copy
"
[
0
11
0
]
)
)
;
