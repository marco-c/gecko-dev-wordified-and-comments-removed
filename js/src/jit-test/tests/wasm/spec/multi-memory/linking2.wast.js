let
0
=
instantiate
(
(
module
Mm
(
memory
mem0
(
export
"
mem0
"
)
0
0
)
(
memory
mem1
(
export
"
mem1
"
)
1
5
)
(
memory
mem2
(
export
"
mem2
"
)
0
0
)
(
data
(
memory
1
)
(
i32
.
const
10
)
"
\
\
00
\
\
01
\
\
02
\
\
03
\
\
04
\
\
05
\
\
06
\
\
07
\
\
08
\
\
09
"
)
(
func
(
export
"
load
"
)
(
param
a
i32
)
(
result
i32
)
(
i32
.
load8_u
mem1
(
local
.
get
0
)
)
)
)
)
;
register
(
0
Mm
)
;
register
(
Mm
Mm
)
;
let
1
=
instantiate
(
(
module
Pm
(
memory
(
import
"
Mm
"
"
mem1
"
)
1
8
)
(
func
(
export
"
grow
"
)
(
param
a
i32
)
(
result
i32
)
(
memory
.
grow
(
local
.
get
0
)
)
)
)
)
;
register
(
1
Pm
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
0
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
2
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
0
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
1
]
)
[
value
(
"
i32
"
3
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
1
]
)
[
value
(
"
i32
"
4
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
0
]
)
[
value
(
"
i32
"
5
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
1
]
)
[
value
(
"
i32
"
-
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
Pm
grow
[
0
]
)
[
value
(
"
i32
"
5
)
]
)
;
