let
0
=
instantiate
(
(
module
(
memory
0
)
(
memory
0
)
(
memory
m
1
)
(
func
addr_limit
(
result
i32
)
(
i32
.
mul
(
memory
.
size
m
)
(
i32
.
const
0x10000
)
)
)
(
func
(
export
"
store
"
)
(
param
i
i32
)
(
param
v
i32
)
(
i32
.
store
m
(
i32
.
add
(
call
addr_limit
)
(
local
.
get
i
)
)
(
local
.
get
v
)
)
)
(
func
(
export
"
load
"
)
(
param
i
i32
)
(
result
i32
)
(
i32
.
load
m
(
i32
.
add
(
call
addr_limit
)
(
local
.
get
i
)
)
)
)
(
func
(
export
"
memory
.
grow
"
)
(
param
i32
)
(
result
i32
)
(
memory
.
grow
m
(
local
.
get
0
)
)
)
)
)
;
assert_return
(
(
)
=
>
invoke
(
0
store
[
-
4
42
]
)
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
load
[
-
4
]
)
[
value
(
"
i32
"
42
)
]
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
3
305419896
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
3
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
2
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
2
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
1
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
1
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
0
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
0
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
store
[
-
2147483648
13
]
)
out
of
bounds
memory
access
)
;
assert_trap
(
(
)
=
>
invoke
(
0
load
[
-
2147483648
]
)
out
of
bounds
memory
access
)
;
assert_return
(
(
)
=
>
invoke
(
0
memory
.
grow
[
65537
]
)
[
value
(
"
i32
"
-
1
)
]
)
;
