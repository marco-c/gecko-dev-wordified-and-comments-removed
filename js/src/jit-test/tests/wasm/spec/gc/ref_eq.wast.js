let
0
=
instantiate
(
(
module
(
type
st
(
sub
(
struct
)
)
)
(
type
st
'
(
sub
(
struct
(
field
i32
)
)
)
)
(
type
at
(
array
i8
)
)
(
type
st
-
sub1
(
sub
st
(
struct
)
)
)
(
type
st
-
sub2
(
sub
st
(
struct
)
)
)
(
type
st
'
-
sub1
(
sub
st
'
(
struct
(
field
i32
)
)
)
)
(
type
st
'
-
sub2
(
sub
st
'
(
struct
(
field
i32
)
)
)
)
(
table
20
(
ref
null
eq
)
)
(
func
(
export
"
init
"
)
(
table
.
set
(
i32
.
const
0
)
(
ref
.
null
eq
)
)
(
table
.
set
(
i32
.
const
1
)
(
ref
.
null
i31
)
)
(
table
.
set
(
i32
.
const
2
)
(
ref
.
i31
(
i32
.
const
7
)
)
)
(
table
.
set
(
i32
.
const
3
)
(
ref
.
i31
(
i32
.
const
7
)
)
)
(
table
.
set
(
i32
.
const
4
)
(
ref
.
i31
(
i32
.
const
8
)
)
)
(
table
.
set
(
i32
.
const
5
)
(
struct
.
new_default
st
)
)
(
table
.
set
(
i32
.
const
6
)
(
struct
.
new_default
st
)
)
(
table
.
set
(
i32
.
const
7
)
(
array
.
new_default
at
(
i32
.
const
0
)
)
)
(
table
.
set
(
i32
.
const
8
)
(
array
.
new_default
at
(
i32
.
const
0
)
)
)
)
(
func
(
export
"
eq
"
)
(
param
i
i32
)
(
param
j
i32
)
(
result
i32
)
(
ref
.
eq
(
table
.
get
(
local
.
get
i
)
)
(
table
.
get
(
local
.
get
j
)
)
)
)
)
)
;
invoke
(
0
init
[
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
0
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
1
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
0
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
0
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
1
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
1
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
2
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
2
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
2
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
3
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
3
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
4
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
4
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
5
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
5
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
6
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
6
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
7
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
7
8
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
0
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
1
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
2
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
3
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
4
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
5
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
6
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
7
]
)
[
value
(
"
i32
"
0
)
]
)
;
assert_return
(
(
)
=
>
invoke
(
0
eq
[
8
8
]
)
[
value
(
"
i32
"
1
)
]
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
any
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
null
any
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
func
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
null
func
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
extern
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
assert_invalid
(
(
)
=
>
instantiate
(
(
module
(
func
(
export
"
eq
"
)
(
param
r
(
ref
null
extern
)
)
(
result
i32
)
(
ref
.
eq
(
local
.
get
r
)
(
local
.
get
r
)
)
)
)
)
type
mismatch
)
;
