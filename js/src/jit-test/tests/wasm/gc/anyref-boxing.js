let
VALUES
=
[
null
undefined
true
false
{
x
:
1337
}
[
"
abracadabra
"
]
1337
13
.
37
"
hi
"
Symbol
(
"
status
"
)
(
)
=
>
1337
]
;
for
(
let
v
of
VALUES
)
{
let
g
=
new
WebAssembly
.
Global
(
{
value
:
"
anyref
"
}
v
)
;
assertEq
(
g
.
value
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
g
=
new
WebAssembly
.
Global
(
{
value
:
"
anyref
"
mutable
:
true
}
)
;
g
.
value
=
v
;
assertEq
(
g
.
value
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
g
=
new
WebAssembly
.
Global
(
{
value
:
"
anyref
"
}
v
)
;
let
ins
=
wasmEvalText
(
(
module
(
import
glob
"
m
"
"
g
"
(
global
anyref
)
)
(
func
(
export
"
f
"
)
(
result
anyref
)
(
global
.
get
glob
)
)
)
{
m
:
{
g
}
}
)
;
assertEq
(
ins
.
exports
.
f
(
)
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
g
=
new
WebAssembly
.
Global
(
{
value
:
"
anyref
"
mutable
:
true
}
)
;
let
ins
=
wasmEvalText
(
(
module
(
import
glob
"
m
"
"
g
"
(
global
(
mut
anyref
)
)
)
(
func
(
export
"
f
"
)
(
param
v
anyref
)
(
global
.
set
glob
(
local
.
get
v
)
)
)
)
{
m
:
{
g
}
}
)
;
ins
.
exports
.
f
(
v
)
;
assertEq
(
g
.
value
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
t
=
new
WebAssembly
.
Table
(
{
element
:
"
anyref
"
initial
:
10
}
)
;
t
.
set
(
3
v
)
;
assertEq
(
t
.
get
(
3
)
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
t
=
new
WebAssembly
.
Table
(
{
element
:
"
anyref
"
initial
:
10
}
)
;
let
ins
=
wasmEvalText
(
(
module
(
import
t
"
m
"
"
t
"
(
table
10
anyref
)
)
(
func
(
export
"
f
"
)
(
param
v
anyref
)
(
table
.
set
t
(
i32
.
const
3
)
(
local
.
get
v
)
)
)
)
{
m
:
{
t
}
}
)
;
ins
.
exports
.
f
(
v
)
;
assertEq
(
t
.
get
(
3
)
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
t
=
new
WebAssembly
.
Table
(
{
element
:
"
anyref
"
initial
:
10
}
)
;
let
ins
=
wasmEvalText
(
(
module
(
import
t
"
m
"
"
t
"
(
table
10
anyref
)
)
(
func
(
export
"
f
"
)
(
result
anyref
)
(
table
.
get
t
(
i32
.
const
3
)
)
)
)
{
m
:
{
t
}
}
)
;
t
.
set
(
3
v
)
;
assertEq
(
ins
.
exports
.
f
(
)
v
)
;
}
for
(
let
v
of
VALUES
)
{
let
returner
=
function
(
)
{
return
v
;
}
;
let
receiver
=
function
(
w
)
{
assertEq
(
w
v
)
;
}
;
let
ins
=
wasmEvalText
(
(
module
(
import
returner
"
m
"
"
returner
"
(
func
(
result
anyref
)
)
)
(
import
receiver
"
m
"
"
receiver
"
(
func
(
param
anyref
)
)
)
(
func
(
export
"
test_returner
"
)
(
result
anyref
)
(
call
returner
)
)
(
func
(
export
"
test_receiver
"
)
(
param
v
anyref
)
(
call
receiver
(
local
.
get
v
)
)
)
)
{
m
:
{
returner
receiver
}
}
)
;
assertEq
(
ins
.
exports
.
test_returner
(
)
v
)
;
ins
.
exports
.
test_receiver
(
v
)
;
}
