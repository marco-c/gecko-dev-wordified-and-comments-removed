if
(
!
wasmGcEnabled
(
)
)
quit
(
0
)
;
{
let
bin
=
wasmTextToBinary
(
(
module
(
type
point
(
struct
(
field
x
f64
)
(
field
y
f64
)
)
)
(
global
g1
(
mut
(
ref
point
)
)
(
ref
.
null
(
ref
point
)
)
)
(
global
g2
(
mut
(
ref
point
)
)
(
ref
.
null
(
ref
point
)
)
)
(
global
g3
(
ref
point
)
(
ref
.
null
(
ref
point
)
)
)
(
func
(
export
"
get
"
)
(
result
(
ref
point
)
)
(
get_global
g1
)
)
(
func
(
export
"
copy
"
)
(
set_global
g2
(
get_global
g1
)
)
)
(
func
(
export
"
clear
"
)
(
set_global
g1
(
get_global
g3
)
)
(
set_global
g2
(
ref
.
null
(
ref
point
)
)
)
)
)
)
;
let
mod
=
new
WebAssembly
.
Module
(
bin
)
;
let
ins
=
new
WebAssembly
.
Instance
(
mod
)
.
exports
;
assertEq
(
ins
.
get
(
)
null
)
;
ins
.
copy
(
)
;
ins
.
clear
(
)
;
}
{
let
bin
=
wasmTextToBinary
(
(
module
(
type
box
(
struct
(
field
val
i32
)
)
)
(
import
"
m
"
"
g
"
(
global
(
mut
(
ref
box
)
)
)
)
)
)
;
assertErrorMessage
(
(
)
=
>
new
WebAssembly
.
Module
(
bin
)
WebAssembly
.
CompileError
/
unexpected
variable
type
in
global
import
\
/
export
/
)
;
}
{
let
bin
=
wasmTextToBinary
(
(
module
(
type
box
(
struct
(
field
val
i32
)
)
)
(
global
boxg
(
export
"
box
"
)
(
mut
(
ref
box
)
)
(
ref
.
null
(
ref
box
)
)
)
)
)
;
assertErrorMessage
(
(
)
=
>
new
WebAssembly
.
Module
(
bin
)
WebAssembly
.
CompileError
/
unexpected
variable
type
in
global
import
\
/
export
/
)
;
}
