function
assertSubtype
(
a
b
types
)
{
types
=
types
|
|
[
]
;
wasmEvalText
(
(
module
{
types
.
map
(
(
x
i
)
=
>
(
type
\
{
i
}
{
x
}
)
)
.
join
(
'
\
n
'
)
}
(
func
unreachable
(
block
(
param
{
b
}
)
(
block
(
param
{
a
}
)
drop
)
)
)
)
)
;
}
function
assertNotSubtype
(
a
b
types
)
{
assertErrorMessage
(
(
)
=
>
{
assertSubtype
(
a
b
types
)
;
}
WebAssembly
.
CompileError
/
type
mismatch
/
)
;
}
assertSubtype
(
'
i32
'
'
i32
'
)
;
assertSubtype
(
'
i64
'
'
i64
'
)
;
assertSubtype
(
'
f32
'
'
f32
'
)
;
assertSubtype
(
'
f64
'
'
f64
'
)
;
assertSubtype
(
'
eqref
'
'
eqref
'
)
;
assertSubtype
(
'
funcref
'
'
funcref
'
)
;
assertNotSubtype
(
'
funcref
'
'
eqref
'
)
;
assertNotSubtype
(
'
eqref
'
'
funcref
'
)
;
assertNotSubtype
(
'
funcref
'
'
externref
'
)
;
assertNotSubtype
(
'
externref
'
'
funcref
'
)
;
assertNotSubtype
(
'
externref
'
'
eqref
'
)
;
assertNotSubtype
(
'
eqref
'
'
externref
'
)
;
assertSubtype
(
'
eqref
'
'
(
ref
0
)
'
[
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
)
'
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
ref
1
)
'
'
(
ref
0
)
'
[
'
(
struct
)
'
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
ref
1
)
'
'
(
ref
0
)
'
[
'
(
struct
(
ref
0
)
)
'
'
(
struct
(
ref
1
)
)
'
]
)
;
assertSubtype
(
'
(
ref
2
)
'
'
(
ref
0
)
'
[
'
(
struct
(
ref
1
)
)
'
'
(
struct
(
ref
0
)
)
'
'
(
struct
(
ref
3
)
)
'
'
(
struct
(
ref
2
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
)
'
'
(
struct
(
field
i32
)
(
field
i32
)
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
i32
)
)
'
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
(
mut
i32
)
)
)
'
'
(
struct
(
field
(
mut
i32
)
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
i32
)
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
(
mut
i32
)
)
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
i32
)
)
'
'
(
struct
(
field
(
mut
i32
)
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
(
mut
(
ref
2
)
)
)
)
'
'
(
struct
(
field
(
mut
(
ref
3
)
)
)
)
'
'
(
struct
)
'
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
(
mut
(
ref
2
)
)
)
)
'
'
(
struct
(
field
(
mut
(
ref
3
)
)
)
)
'
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
struct
(
field
(
ref
2
)
)
)
'
'
(
struct
(
field
(
ref
3
)
)
)
'
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
eqref
'
'
(
ref
0
)
'
[
'
(
array
i32
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
i32
)
'
'
(
array
i32
)
'
]
)
;
assertSubtype
(
'
(
ref
1
)
'
'
(
ref
0
)
'
[
'
(
array
i32
)
'
'
(
array
i32
)
'
]
)
;
assertSubtype
(
'
(
ref
1
)
'
'
(
ref
0
)
'
[
'
(
array
(
ref
0
)
)
'
'
(
array
(
ref
1
)
)
'
]
)
;
assertSubtype
(
'
(
ref
2
)
'
'
(
ref
0
)
'
[
'
(
array
(
ref
1
)
)
'
'
(
array
(
ref
0
)
)
'
'
(
array
(
ref
3
)
)
'
'
(
array
(
ref
2
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
(
mut
i32
)
)
'
'
(
array
(
mut
i32
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
i32
)
'
'
(
array
i32
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
(
mut
i32
)
)
'
'
(
array
i32
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
i32
)
'
'
(
array
(
mut
i32
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
(
mut
(
ref
2
)
)
)
'
'
(
array
(
mut
(
ref
3
)
)
)
'
'
(
struct
)
'
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
(
mut
(
ref
2
)
)
)
'
'
(
array
(
mut
(
ref
3
)
)
)
'
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
(
ref
0
)
'
'
(
ref
1
)
'
[
'
(
array
(
ref
2
)
)
'
'
(
array
(
ref
3
)
)
'
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
(
rtt
0
0
)
'
'
(
rtt
0
1
)
'
[
'
(
struct
)
'
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
rtt
0
0
)
'
'
(
rtt
0
1
)
'
[
'
(
struct
)
'
'
(
struct
(
field
i32
)
)
'
]
)
;
assertSubtype
(
'
(
rtt
0
)
'
'
(
rtt
0
0
)
'
[
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
rtt
0
0
)
'
'
(
rtt
0
)
'
[
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
rtt
0
0
)
'
'
(
rtt
0
0
)
'
[
'
(
struct
)
'
]
)
;
assertSubtype
(
'
(
rtt
1
0
)
'
'
(
rtt
1
0
)
'
[
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
rtt
1
0
)
'
'
(
rtt
0
0
)
'
[
'
(
struct
)
'
]
)
;
assertNotSubtype
(
'
(
rtt
2
0
)
'
'
(
rtt
1
0
)
'
[
'
(
struct
)
'
]
)
;
