let
release_or_beta
=
getBuildConfiguration
(
"
release_or_beta
"
)
;
let
nightly
=
!
release_or_beta
;
let
nightlyOnlyFeatures
=
[
[
'
relaxed
-
simd
'
wasmRelaxedSimdEnabled
(
)
(
module
(
func
(
result
v128
)
unreachable
i16x8
.
relaxed_laneselect
)
)
]
]
;
for
(
let
[
name
enabled
test
]
of
nightlyOnlyFeatures
)
{
if
(
enabled
)
{
assertEq
(
nightly
true
{
name
}
must
be
enabled
only
on
nightly
)
;
wasmEvalText
(
test
)
;
}
else
{
assertErrorMessage
(
(
)
=
>
wasmEvalText
(
test
)
WebAssembly
.
CompileError
/
.
/
)
;
}
}
let
releasedFeaturesMaybeDisabledAnyway
=
[
[
'
simd
'
wasmSimdEnabled
(
)
(
module
(
func
(
result
v128
)
i32
.
const
0
i8x16
.
splat
)
)
]
]
;
for
(
let
[
name
enabled
test
]
of
releasedFeaturesMaybeDisabledAnyway
)
{
if
(
release_or_beta
)
{
if
(
enabled
)
{
wasmEvalText
(
test
)
;
}
else
{
assertErrorMessage
(
(
)
=
>
wasmEvalText
(
test
)
WebAssembly
.
CompileError
/
.
/
)
;
}
}
}
let
releasedFeatures
=
[
[
'
threads
'
wasmThreadsEnabled
(
)
(
module
(
memory
1
1
shared
)
)
]
[
'
multi
-
memory
'
wasmMultiMemoryEnabled
(
)
(
module
(
memory
0
)
(
memory
0
)
)
]
[
'
exnref
'
wasmExnRefEnabled
(
)
(
module
(
func
try_table
end
)
)
]
[
'
memory64
'
wasmMemory64Enabled
(
)
(
module
(
memory
i64
0
)
)
]
[
'
js
-
string
-
builtins
'
wasmJSStringBuiltinsEnabled
(
)
(
module
(
import
"
wasm
:
js
-
string
"
"
concat
"
(
func
(
param
externref
externref
)
(
result
(
ref
extern
)
)
)
)
)
{
builtins
:
[
'
js
-
string
'
]
}
]
]
;
for
(
let
[
name
enabled
test
options
]
of
releasedFeatures
)
{
if
(
release_or_beta
)
{
assertEq
(
enabled
true
{
name
}
must
be
enabled
on
release
and
beta
)
;
wasmEvalText
(
test
{
}
options
)
;
}
}
