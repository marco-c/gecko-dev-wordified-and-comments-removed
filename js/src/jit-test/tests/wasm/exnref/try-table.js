{
let
{
test
}
=
wasmEvalText
(
(
module
(
func
(
export
"
test
"
)
(
result
i32
)
try_table
br
0
(
return
i32
.
const
0
)
end
(
return
i32
.
const
1
)
)
)
)
.
exports
;
assertEq
(
test
(
)
1
)
;
}
{
let
{
test
}
=
wasmEvalText
(
(
module
(
func
(
export
"
test
"
)
(
result
i32
)
try_table
(
result
i32
)
i32
.
const
1
br
0
end
)
)
)
.
exports
;
assertEq
(
test
(
)
1
)
;
}
{
let
{
test
}
=
wasmEvalText
(
(
module
(
func
(
export
"
test
"
)
(
result
i32
)
i32
.
const
1
try_table
(
param
i32
)
return
end
(
return
i32
.
const
0
)
)
)
)
.
exports
;
assertEq
(
test
(
)
1
)
;
}
{
let
{
test
}
=
wasmEvalText
(
(
module
(
tag
A
(
param
i32
)
)
(
tag
B
(
param
i32
)
)
(
tag
C
)
(
table
funcref
(
elem
throwA
throwB
throwC
doNothing
)
)
(
type
empty
(
func
)
)
(
func
throwA
i32
.
const
1
throw
A
)
(
func
throwB
i32
.
const
2
throw
B
)
(
func
throwC
throw
C
)
(
func
doNothing
)
(
func
(
export
"
test
"
)
(
param
i32
)
(
result
i32
)
block
handleA
(
result
i32
exnref
)
block
handleB
(
result
i32
exnref
)
block
handleUnknown
(
result
exnref
)
try_table
(
catch_ref
A
handleA
)
(
catch_ref
B
handleB
)
(
catch_all_ref
handleUnknown
)
(
call_indirect
(
type
empty
)
local
.
get
0
)
end
(
;
nothing
threw
;
)
i32
.
const
-
1
return
end
(
;
handleUnknown
;
)
drop
i32
.
const
3
return
end
(
;
handleB
;
)
drop
return
end
(
;
handleA
;
)
drop
return
)
)
)
.
exports
;
assertEq
(
test
(
0
)
1
)
;
assertEq
(
test
(
1
)
2
)
;
assertEq
(
test
(
2
)
3
)
;
assertEq
(
test
(
3
)
-
1
)
;
}
{
let
{
test
}
=
wasmEvalText
(
(
module
(
tag
A
(
param
i32
)
)
(
tag
B
(
param
i32
)
)
(
tag
C
)
(
table
funcref
(
elem
throwA
throwB
throwC
doNothing
)
)
(
type
empty
(
func
)
)
(
func
throwA
i32
.
const
1
throw
A
)
(
func
throwB
i32
.
const
2
throw
B
)
(
func
throwC
throw
C
)
(
func
doNothing
)
(
func
(
export
"
test
"
)
(
param
i32
)
(
result
i32
)
block
handleA
(
result
i32
)
block
handleB
(
result
i32
)
block
handleUnknown
try_table
(
catch
A
handleA
)
(
catch
B
handleB
)
(
catch_all
handleUnknown
)
(
call_indirect
(
type
empty
)
local
.
get
0
)
end
(
;
nothing
threw
;
)
i32
.
const
-
1
return
end
(
;
handleUnknown
;
)
i32
.
const
3
return
end
(
;
handleB
;
)
return
end
(
;
handleA
;
)
return
)
)
)
.
exports
;
assertEq
(
test
(
0
)
1
)
;
assertEq
(
test
(
1
)
2
)
;
assertEq
(
test
(
2
)
3
)
;
assertEq
(
test
(
3
)
-
1
)
;
}
{
let
tag
=
new
WebAssembly
.
Tag
(
{
parameters
:
[
]
}
)
;
let
exn
=
new
WebAssembly
.
Exception
(
tag
[
]
)
;
let
values
=
[
.
.
.
WasmExternrefValues
exn
]
;
function
throwJS
(
value
)
{
throw
value
;
}
let
{
test
}
=
wasmEvalText
(
(
module
(
import
"
"
"
tag
"
(
tag
tag
)
)
(
import
"
"
"
throwJS
"
(
func
throwJS
(
param
externref
)
)
)
(
func
innerRethrow
(
param
externref
)
try_table
(
result
exnref
)
(
catch_ref
tag
0
)
(
catch_all_ref
0
)
local
.
get
0
call
throwJS
return
end
throw_ref
)
(
func
(
export
"
test
"
)
(
param
externref
)
try_table
(
result
exnref
)
(
catch_ref
tag
0
)
(
catch_all_ref
0
)
local
.
get
0
call
innerRethrow
return
end
throw_ref
)
)
{
"
"
:
{
tag
throwJS
}
}
)
.
exports
;
for
(
let
value
of
values
)
{
try
{
test
(
value
)
;
assertEq
(
true
false
)
;
}
catch
(
thrownValue
)
{
assertEq
(
thrownValue
value
)
;
}
}
}
{
let
{
test
}
=
wasmEvalText
(
(
module
(
import
"
"
"
oom
"
(
func
oom
)
)
(
func
(
export
"
test
"
)
(
result
i32
)
try_table
(
catch_all
0
)
call
oom
(
return
i32
.
const
0
)
end
(
return
i32
.
const
1
)
)
)
{
"
"
:
{
oom
:
throwOutOfMemory
}
}
)
.
exports
;
assertEq
(
test
(
)
1
)
;
}
