let
t
=
(
module
(
func
recursive
(
export
"
recursive
"
)
(
param
i32
)
(
result
i32
)
(
i32
.
le_u
(
local
.
get
0
)
(
i32
.
const
1
)
)
if
(
result
i32
)
(
i32
.
const
1
)
else
(
i32
.
const
1
)
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
1
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
2
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
1
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
2
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
1
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
2
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
1
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
2
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
1
)
)
)
i32
.
add
(
call
recursive
(
i32
.
sub
(
local
.
get
0
)
(
i32
.
const
2
)
)
)
i32
.
add
end
)
)
;
let
i
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
t
)
)
)
;
assertEq
(
i
.
exports
.
recursive
(
10
)
14517361
)
;
assertEq
(
wasmFunctionTier
(
i
.
exports
.
recursive
)
"
optimized
"
)
;
