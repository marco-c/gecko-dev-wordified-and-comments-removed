if
(
!
wasmThreadsSupported
(
)
)
quit
(
0
)
;
{
let
mem1
=
new
WebAssembly
.
Memory
(
{
initial
:
2
maximum
:
4
}
)
;
assertErrorMessage
(
(
)
=
>
serialize
(
mem1
)
TypeError
/
unsupported
type
for
structured
data
/
)
;
assertErrorMessage
(
(
)
=
>
serialize
(
mem1
[
mem1
]
)
TypeError
/
invalid
transferable
array
for
structured
clone
/
)
;
}
{
let
mem1
=
new
WebAssembly
.
Memory
(
{
initial
:
2
maximum
:
4
shared
:
true
}
)
;
let
buf1
=
mem1
.
buffer
;
let
mem2
=
deserialize
(
serialize
(
mem1
)
)
;
assertEq
(
mem2
instanceof
WebAssembly
.
Memory
true
)
;
let
buf2
=
mem2
.
buffer
;
assertEq
(
buf2
instanceof
SharedArrayBuffer
true
)
;
assertEq
(
buf1
!
=
=
buf2
true
)
;
assertEq
(
buf1
.
byteLength
buf2
.
byteLength
)
;
let
v1
=
new
Int32Array
(
buf1
)
;
let
v2
=
new
Int32Array
(
buf2
)
;
v1
[
37
]
=
0x12345678
;
assertEq
(
v2
[
37
]
0x12345678
)
;
let
index
=
2
*
65536
+
200
;
let
access
=
wasmEvalText
(
(
module
(
memory
(
import
"
"
"
memory
"
)
2
4
shared
)
(
func
(
export
"
l
"
)
(
result
i32
)
(
i32
.
load
(
i32
.
const
{
index
}
)
)
)
)
{
"
"
:
{
memory
:
mem2
}
}
)
.
exports
.
l
;
assertErrorMessage
(
access
WebAssembly
.
RuntimeError
/
out
of
bounds
/
)
;
wasmEvalText
(
(
module
(
memory
(
import
"
"
"
memory
"
)
2
4
shared
)
(
func
(
export
"
g
"
)
(
drop
(
grow_memory
(
i32
.
const
1
)
)
)
)
)
{
"
"
:
{
memory
:
mem1
}
}
)
.
exports
.
g
(
)
;
assertEq
(
access
(
)
0
)
;
}
{
let
mem1
=
new
WebAssembly
.
Memory
(
{
initial
:
2
maximum
:
4
shared
:
true
}
)
;
assertErrorMessage
(
(
)
=
>
serialize
(
mem1
[
mem1
]
)
TypeError
/
Shared
memory
objects
must
not
be
in
the
transfer
list
/
)
;
}
{
let
mem
=
new
WebAssembly
.
Memory
(
{
initial
:
2
maximum
:
4
shared
:
true
}
)
;
let
buf
=
mem
.
buffer
;
let
clonedbuf
=
serialize
(
buf
)
;
mem
.
grow
(
1
)
;
let
buf2
=
deserialize
(
clonedbuf
)
;
assertEq
(
buf
.
byteLength
buf2
.
byteLength
)
;
}
