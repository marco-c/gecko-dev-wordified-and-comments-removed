const
options
=
getJitCompilerOptions
(
)
;
if
(
!
options
[
'
baseline
.
enable
'
]
)
quit
(
)
;
const
{
nextLineNumber
startProfiling
endProfiling
assertEqPreciseStacks
}
=
WasmHelpers
;
const
TRIGGER
=
options
[
'
ion
.
warmup
.
trigger
'
]
+
10
;
const
ITER
=
2
*
TRIGGER
;
const
EXCEPTION_ITER
=
ITER
-
2
;
enableGeckoProfiling
(
)
;
var
instance
=
wasmEvalText
(
(
module
(
func
add
(
export
"
add
"
)
(
result
i32
)
(
param
i32
)
(
param
i32
)
get_local
0
get_local
1
i32
.
add
)
(
func
addi64
(
export
"
add64
"
)
(
result
i64
)
(
param
i32
)
(
param
i32
)
get_local
0
get_local
1
call
add
i64
.
extend_s
/
i32
)
)
)
.
exports
;
var
callToMain
;
function
main
(
)
{
var
arrayCallLine
=
nextLineNumber
(
13
)
;
for
(
var
i
=
0
;
i
<
ITER
;
i
+
+
)
{
var
arr
=
[
instance
.
add
(
x
y
)
=
>
x
+
y
]
;
if
(
i
=
=
=
EXCEPTION_ITER
)
{
arr
[
0
]
=
instance
.
add64
;
}
else
if
(
i
=
=
=
EXCEPTION_ITER
+
1
)
{
arr
[
0
]
=
instance
.
add
;
}
var
caught
=
null
;
startProfiling
(
)
;
try
{
arr
[
i
%
2
]
(
i
i
)
;
}
catch
(
e
)
{
caught
=
e
;
}
let
profilingStack
=
endProfiling
(
)
;
assertEq
(
!
!
caught
i
=
=
=
EXCEPTION_ITER
)
;
if
(
caught
)
{
assertEqPreciseStacks
(
profilingStack
[
[
'
'
'
>
'
'
<
>
'
'
i64
>
>
'
'
<
>
'
'
>
'
'
'
]
[
'
'
]
]
)
;
assertEq
(
caught
.
message
'
cannot
pass
i64
to
or
from
JS
'
)
;
let
stack
=
caught
.
stack
.
split
(
'
\
n
'
)
;
let
callsites
=
stack
.
map
(
s
=
>
s
.
split
(
'
'
)
[
0
]
)
;
assertEq
(
callsites
[
0
]
'
main
'
)
;
assertEq
(
callsites
[
1
]
'
'
)
;
let
lines
=
stack
.
map
(
s
=
>
s
.
split
(
'
:
'
)
[
1
]
)
;
assertEq
(
+
lines
[
0
]
arrayCallLine
)
;
assertEq
(
+
lines
[
1
]
callToMain
)
;
}
else
if
(
(
i
%
2
)
=
=
0
)
{
assertEqPreciseStacks
(
profilingStack
[
[
'
'
'
>
'
'
0
>
'
'
>
'
'
'
]
[
'
'
'
!
>
'
'
0
!
>
'
'
!
>
'
'
'
]
]
)
;
}
}
}
callToMain
=
nextLineNumber
(
)
;
main
(
)
;
