for
(
let
op
of
[
"
f32x4
.
relaxed_min
"
"
f32x4
.
relaxed_max
"
"
f64x2
.
relaxed_min
"
"
f64x2
.
relaxed_max
"
]
)
{
const
t
=
(
module
(
func
(
export
"
variant1
"
)
(
result
i32
)
(
i32
.
const
0
)
i8x16
.
splat
(
i32
.
const
0
)
i8x16
.
splat
(
i32
.
const
0
)
i8x16
.
splat
i32x4
.
eq
;
;
stack
top
=
4
x
0xFFFF
'
FFFF
;
stack
top
-
1
=
4
x
0x0000
'
0000
+
op
+
i8x16
.
bitmask
)
(
func
(
export
"
variant2
"
)
(
result
i32
)
(
i32
.
const
0
)
i8x16
.
splat
(
i32
.
const
0
)
i8x16
.
splat
i32x4
.
eq
(
i32
.
const
0
)
i8x16
.
splat
;
;
stack
top
=
4
x
0x0000
'
0000
;
stack
top
-
1
=
4
x
0xFFFF
'
FFFF
+
op
+
i8x16
.
bitmask
)
)
;
let
i
=
new
WebAssembly
.
Instance
(
new
WebAssembly
.
Module
(
wasmTextToBinary
(
t
)
)
)
;
let
result1
=
i
.
exports
.
variant1
(
)
;
let
result2
=
i
.
exports
.
variant2
(
)
;
if
(
getBuildConfiguration
(
"
arm64
"
)
)
{
assertEq
(
result1
65535
)
;
assertEq
(
result2
65535
)
;
}
else
{
assertEq
(
result1
65535
)
;
assertEq
(
result2
0
)
;
}
}
