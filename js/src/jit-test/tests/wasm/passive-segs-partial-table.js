const
tbl_init_len
=
16
;
function
tbl_init
(
min
max
backup
write
segoffs
=
0
)
{
let
ins
=
wasmEvalText
(
(
module
(
table
(
export
"
tbl
"
)
{
min
}
{
max
}
anyfunc
)
(
elem
passive
f0
f1
f2
f3
f4
f5
f6
f7
f8
f9
f10
f11
f12
f13
f14
f15
)
(
func
f0
(
export
"
f0
"
)
)
(
func
f1
(
export
"
f1
"
)
)
(
func
f2
(
export
"
f2
"
)
)
(
func
f3
(
export
"
f3
"
)
)
(
func
f4
(
export
"
f4
"
)
)
(
func
f5
(
export
"
f5
"
)
)
(
func
f6
(
export
"
f6
"
)
)
(
func
f7
(
export
"
f7
"
)
)
(
func
f8
(
export
"
f8
"
)
)
(
func
f9
(
export
"
f9
"
)
)
(
func
f10
(
export
"
f10
"
)
)
(
func
f11
(
export
"
f11
"
)
)
(
func
f12
(
export
"
f12
"
)
)
(
func
f13
(
export
"
f13
"
)
)
(
func
f14
(
export
"
f14
"
)
)
(
func
f15
(
export
"
f15
"
)
)
(
func
(
export
"
run
"
)
(
param
offs
i32
)
(
param
len
i32
)
(
table
.
init
0
(
get_local
offs
)
(
i32
.
const
{
segoffs
}
)
(
get_local
len
)
)
)
)
)
;
let
offs
=
min
-
backup
;
assertErrorMessage
(
(
)
=
>
ins
.
exports
.
run
(
offs
write
)
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
let
tbl
=
ins
.
exports
.
tbl
;
for
(
let
i
=
0
;
i
<
Math
.
min
(
backup
tbl_init_len
-
segoffs
)
;
i
+
+
)
{
assertEq
(
tbl
.
get
(
offs
+
i
)
ins
.
exports
[
"
f
"
+
(
i
+
segoffs
)
]
)
;
}
for
(
let
i
=
Math
.
min
(
backup
tbl_init_len
)
;
i
<
backup
;
i
+
+
)
assertEq
(
tbl
.
get
(
offs
+
i
)
null
)
;
for
(
let
i
=
0
;
i
<
offs
;
i
+
+
)
assertEq
(
tbl
.
get
(
i
)
null
)
;
}
tbl_init
(
tbl_init_len
*
2
tbl_init_len
*
4
Math
.
floor
(
tbl_init_len
/
2
)
tbl_init_len
)
;
tbl_init
(
tbl_init_len
*
2
tbl_init_len
*
4
Math
.
floor
(
tbl_init_len
/
2
)
-
1
tbl_init_len
)
;
tbl_init
(
tbl_init_len
*
10
tbl_init_len
*
20
tbl_init_len
*
4
tbl_init_len
*
2
)
;
tbl_init
(
tbl_init_len
*
10
tbl_init_len
*
20
tbl_init_len
*
4
-
1
tbl_init_len
*
2
-
1
)
;
tbl_init
(
tbl_init_len
*
4
tbl_init_len
*
4
tbl_init_len
0xFFFFFFF0
)
;
tbl_init
(
tbl_init_len
tbl_init_len
tbl_init_len
0xFFFFFFFC
Math
.
floor
(
tbl_init_len
/
2
)
)
;
const
tbl_copy_len
=
16
;
function
tbl_copy
(
min
max
srcOffs
targetOffs
len
copyDown
=
false
)
{
let
ins
=
wasmEvalText
(
(
module
(
table
(
export
"
tbl
"
)
{
min
}
{
max
}
anyfunc
)
(
func
f0
(
export
"
f0
"
)
)
(
func
f1
(
export
"
f1
"
)
)
(
func
f2
(
export
"
f2
"
)
)
(
func
f3
(
export
"
f3
"
)
)
(
func
f4
(
export
"
f4
"
)
)
(
func
f5
(
export
"
f5
"
)
)
(
func
f6
(
export
"
f6
"
)
)
(
func
f7
(
export
"
f7
"
)
)
(
func
f8
(
export
"
f8
"
)
)
(
func
f9
(
export
"
f9
"
)
)
(
func
f10
(
export
"
f10
"
)
)
(
func
f11
(
export
"
f11
"
)
)
(
func
f12
(
export
"
f12
"
)
)
(
func
f13
(
export
"
f13
"
)
)
(
func
f14
(
export
"
f14
"
)
)
(
func
f15
(
export
"
f15
"
)
)
(
func
(
export
"
run
"
)
(
param
targetOffs
i32
)
(
param
srcOffs
i32
)
(
param
len
i32
)
(
table
.
copy
(
get_local
targetOffs
)
(
get_local
srcOffs
)
(
get_local
len
)
)
)
)
)
;
let
tbl
=
ins
.
exports
.
tbl
;
let
targetAvail
=
tbl
.
length
-
targetOffs
;
let
srcAvail
=
tbl
.
length
-
srcOffs
;
let
targetLim
=
targetOffs
+
Math
.
min
(
len
targetAvail
srcAvail
)
;
let
srcLim
=
srcOffs
+
Math
.
min
(
len
targetAvail
srcAvail
)
;
let
immediateOOB
=
copyDown
&
&
(
srcOffs
+
len
>
tbl
.
length
|
|
targetOffs
+
len
>
tbl
.
length
)
;
for
(
let
i
=
srcOffs
j
=
0
;
i
<
srcLim
;
i
+
+
j
+
+
)
tbl
.
set
(
i
ins
.
exports
[
"
f
"
+
j
]
)
;
assertErrorMessage
(
(
)
=
>
ins
.
exports
.
run
(
targetOffs
srcOffs
len
)
WebAssembly
.
RuntimeError
/
index
out
of
bounds
/
)
;
var
t
=
0
;
var
s
=
0
;
var
i
=
0
;
function
checkTarget
(
)
{
if
(
i
>
=
targetOffs
&
&
i
<
targetLim
)
{
assertEq
(
tbl
.
get
(
i
)
ins
.
exports
[
"
f
"
+
(
t
+
+
)
]
)
;
if
(
i
>
=
srcOffs
&
&
i
<
srcLim
)
s
+
+
;
return
true
;
}
return
false
;
}
function
checkSource
(
)
{
if
(
i
>
=
srcOffs
&
&
i
<
srcLim
)
{
assertEq
(
tbl
.
get
(
i
)
ins
.
exports
[
"
f
"
+
(
s
+
+
)
]
)
;
if
(
i
>
=
targetOffs
&
&
i
<
targetLim
)
t
+
+
;
return
true
;
}
return
false
;
}
for
(
i
=
0
;
i
<
tbl
.
length
;
i
+
+
)
{
if
(
immediateOOB
)
{
if
(
checkSource
(
)
)
continue
;
}
else
{
if
(
copyDown
&
&
(
checkSource
(
)
|
|
checkTarget
(
)
)
)
continue
;
if
(
!
copyDown
&
&
(
checkTarget
(
)
|
|
checkSource
(
)
)
)
continue
;
}
assertEq
(
tbl
.
get
(
i
)
null
)
;
}
}
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
0
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
tbl_copy_len
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
0
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
-
1
tbl_copy_len
-
1
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
0
tbl_copy_len
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
-
1
0
tbl_copy_len
-
1
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
tbl_copy_len
-
5
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
tbl_copy_len
true
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
tbl_copy_len
-
5
tbl_copy_len
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
tbl_copy_len
+
5
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
tbl_copy_len
true
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
Math
.
floor
(
1
.
5
*
tbl_copy_len
)
tbl_copy_len
+
5
tbl_copy_len
)
;
tbl_copy
(
tbl_copy_len
*
2
tbl_copy_len
*
4
tbl_copy_len
+
5
tbl_copy_len
+
5
tbl_copy_len
)
;
tbl_copy
(
tbl_copy_len
*
8
tbl_copy_len
*
8
tbl_copy_len
*
7
0
0xFFFFFFE0
)
;
tbl_copy
(
tbl_copy_len
*
8
tbl_copy_len
*
8
0
tbl_copy_len
*
7
0xFFFFFFE0
true
)
;
