load
(
libdir
+
"
wasm
.
js
"
)
;
if
(
!
wasmIsSupported
(
)
)
quit
(
)
;
function
testConversion
(
resultType
opcode
paramType
op
expect
)
{
if
(
paramType
=
=
=
'
i64
'
)
{
assertEq
(
wasmEvalText
(
(
module
(
func
(
param
i64
)
(
result
{
resultType
}
)
(
{
resultType
}
.
{
opcode
}
/
i64
(
get_local
0
)
)
)
(
func
(
result
{
resultType
}
)
(
call
0
(
i64
.
const
{
op
}
)
)
)
(
export
"
"
1
)
)
)
(
)
expect
)
;
assertEq
(
wasmEvalText
(
(
module
(
func
(
result
{
resultType
}
)
(
{
resultType
}
.
{
opcode
}
/
i64
(
i64
.
const
{
op
}
)
)
)
(
export
"
"
0
)
)
)
(
)
expect
)
;
}
else
{
assertEq
(
wasmEvalText
(
'
(
module
(
func
(
param
'
+
paramType
+
'
)
(
result
'
+
resultType
+
'
)
(
'
+
resultType
+
'
.
'
+
opcode
+
'
/
'
+
paramType
+
'
(
get_local
0
)
)
)
(
export
"
"
0
)
)
'
)
(
op
)
expect
)
;
}
for
(
var
bad
of
[
'
i32
'
'
f32
'
'
f64
'
]
)
{
if
(
bad
!
=
resultType
)
assertErrorMessage
(
(
)
=
>
wasmEvalText
(
'
(
module
(
func
(
param
'
+
paramType
+
'
)
(
result
'
+
bad
+
'
)
(
'
+
resultType
+
'
.
'
+
opcode
+
'
/
'
+
paramType
+
'
(
get_local
0
)
)
)
)
'
)
TypeError
mismatchError
(
resultType
bad
)
)
;
if
(
bad
!
=
paramType
)
assertErrorMessage
(
(
)
=
>
wasmEvalText
(
'
(
module
(
func
(
param
'
+
bad
+
'
)
(
result
'
+
resultType
+
'
)
(
'
+
resultType
+
'
.
'
+
opcode
+
'
/
'
+
paramType
+
'
(
get_local
0
)
)
)
)
'
)
TypeError
mismatchError
(
bad
paramType
)
)
;
}
}
if
(
getBuildConfiguration
(
)
.
x64
)
{
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
4294967336
40
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
-
10
-
10
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
"
0xffffffff7fffffff
"
0x7fffffff
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
"
0xffffffff00000000
"
0
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
"
0xfffffffeffffffff
"
-
1
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
"
0x1234567801abcdef
"
0x01abcdef
)
;
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
"
0x8000000000000002
"
2
)
;
}
else
{
try
{
testConversion
(
'
i32
'
'
wrap
'
'
i64
'
4294967336
40
)
;
assertEq
(
0
1
)
;
}
catch
(
e
)
{
assertEq
(
e
.
toString
(
)
.
indexOf
(
"
NYI
on
this
platform
"
)
>
=
0
true
)
;
}
}
testConversion
(
'
i32
'
'
trunc_s
'
'
f32
'
40
.
1
40
)
;
testConversion
(
'
i32
'
'
trunc_u
'
'
f32
'
40
.
1
40
)
;
testConversion
(
'
i32
'
'
trunc_s
'
'
f64
'
40
.
1
40
)
;
testConversion
(
'
i32
'
'
trunc_u
'
'
f64
'
40
.
1
40
)
;
testConversion
(
'
f32
'
'
convert_s
'
'
i32
'
40
40
)
;
testConversion
(
'
f32
'
'
convert_u
'
'
i32
'
40
40
)
;
testConversion
(
'
f32
'
'
demote
'
'
f64
'
40
.
1
40
.
099998474121094
)
;
testConversion
(
'
f64
'
'
convert_s
'
'
i32
'
40
40
)
;
testConversion
(
'
f64
'
'
convert_u
'
'
i32
'
40
40
)
;
testConversion
(
'
f64
'
'
promote
'
'
f32
'
40
.
1
40
.
099998474121094
)
;
