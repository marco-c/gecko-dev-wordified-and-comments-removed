const
values
=
[
[
0x8000_0000
|
0
-
0x80000000n
]
[
0x8000_0001
|
0
-
0x7fffffffn
]
[
0x8000_0002
|
0
-
0x7ffffffen
]
[
0x8000_0003
|
0
-
0x7ffffffdn
]
[
-
3
-
3n
]
[
-
2
-
2n
]
[
-
1
-
1n
]
[
0
0n
]
[
1
1n
]
[
2
2n
]
[
3
3n
]
[
0x7fff_fffd
0x7fff_fffdn
]
[
0x7fff_fffe
0x7fff_fffen
]
[
0x7fff_ffff
0x7fff_ffffn
]
]
;
const
m
=
new
WebAssembly
.
Module
(
wasmTextToBinary
(
(
module
(
func
(
export
"
toInt32
"
)
(
param
i64
)
(
result
i32
)
local
.
get
0
i32
.
wrap_i64
)
(
func
(
export
"
toInt64
"
)
(
param
i64
)
(
result
i64
)
local
.
get
0
)
)
)
)
;
const
{
toInt32
toInt64
}
=
new
WebAssembly
.
Instance
(
m
)
.
exports
;
function
testSimple
(
)
{
for
(
let
i
=
0
;
i
<
1000
;
+
+
i
)
{
let
vals
=
values
[
i
%
values
.
length
]
;
assertEq
(
toInt32
(
BigInt
(
vals
[
0
]
)
)
vals
[
0
]
)
;
assertEq
(
toInt64
(
BigInt
(
vals
[
0
]
)
)
vals
[
1
]
)
;
}
}
testSimple
(
)
;
function
testBoxed
(
)
{
for
(
let
i
=
0
;
i
<
1000
;
+
+
i
)
{
let
vals
=
values
[
i
%
values
.
length
]
;
const
True
=
true
;
let
bi
=
undefined
;
if
(
True
)
{
bi
=
BigInt
(
vals
[
0
]
)
;
}
assertEq
(
toInt32
(
bi
)
vals
[
0
]
)
;
assertEq
(
toInt64
(
bi
)
vals
[
1
]
)
;
}
}
testBoxed
(
)
;
function
testRecover
(
)
{
for
(
let
i
=
0
;
i
<
1000
;
+
+
i
)
{
let
vals
=
values
[
i
%
values
.
length
]
;
const
True
=
true
;
let
bi
=
0n
;
if
(
True
)
{
bi
=
BigInt
(
vals
[
0
]
)
;
}
assertEq
(
toInt32
(
bi
)
vals
[
0
]
)
;
assertEq
(
toInt64
(
bi
)
vals
[
1
]
)
;
}
}
testRecover
(
)
;
