function
testEqzBrIf
(
value
type
untaken
taken
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
local
i32
)
(
set_local
0
(
{
type
}
.
const
{
value
}
)
)
(
set_local
1
(
i32
.
const
{
taken
}
)
)
(
block
b
(
br_if
b
(
{
type
}
.
eqz
(
get_local
0
)
)
)
(
set_local
1
(
i32
.
const
{
untaken
}
)
)
)
(
get_local
1
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzBrIf
(
0
t
37
42
42
)
)
;
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzBrIf
(
1
t
37
42
37
)
)
;
function
testCmpBrIf
(
value
type
untaken
taken
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
local
i32
)
(
set_local
1
(
i32
.
const
{
taken
}
)
)
(
block
b
(
br_if
b
(
{
type
}
.
eq
(
get_local
0
)
(
{
type
}
.
const
{
value
}
)
)
)
(
set_local
1
(
i32
.
const
{
untaken
}
)
)
)
(
get_local
1
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpBrIf
(
0
t
37
42
42
)
)
;
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpBrIf
(
1
t
37
42
37
)
)
;
function
testEqzSelect
(
value
type
iftrue
iffalse
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
set_local
0
(
{
type
}
.
const
{
value
}
)
)
(
select
(
i32
.
const
{
iftrue
}
)
(
i32
.
const
{
iffalse
}
)
(
{
type
}
.
eqz
(
get_local
0
)
)
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzSelect
(
0
t
42
37
42
)
)
;
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzSelect
(
1
t
42
37
37
)
)
;
function
testCmpSelect
(
value
type
iftrue
iffalse
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
select
(
i32
.
const
{
iftrue
}
)
(
i32
.
const
{
iffalse
}
)
(
{
type
}
.
eq
(
get_local
0
)
(
{
type
}
.
const
{
value
}
)
)
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpSelect
(
0
t
42
37
42
)
)
;
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpSelect
(
1
t
42
37
37
)
)
;
function
testEqzIf
(
value
type
trueBranch
falseBranch
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
local
i32
)
(
set_local
0
(
{
type
}
.
const
{
value
}
)
)
(
if
(
{
type
}
.
eqz
(
get_local
0
)
)
(
set_local
1
(
i32
.
const
{
trueBranch
}
)
)
(
set_local
1
(
i32
.
const
{
falseBranch
}
)
)
)
(
get_local
1
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzIf
(
0
t
42
37
42
)
)
;
[
"
i32
"
"
i64
"
]
.
forEach
(
t
=
>
testEqzIf
(
1
t
42
37
37
)
)
;
function
testCmpIf
(
value
type
trueBranch
falseBranch
expected
)
{
var
f
=
wasmEvalText
(
(
module
(
func
(
result
i32
)
(
local
{
type
}
)
(
local
i32
)
(
if
(
{
type
}
.
eq
(
get_local
0
)
(
{
type
}
.
const
{
value
}
)
)
(
set_local
1
(
i32
.
const
{
trueBranch
}
)
)
(
set_local
1
(
i32
.
const
{
falseBranch
}
)
)
)
(
get_local
1
)
)
(
export
"
f
"
0
)
)
)
.
exports
[
"
f
"
]
;
assertEq
(
f
(
)
expected
)
;
}
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpIf
(
0
t
42
37
42
)
)
;
[
"
i32
"
"
i64
"
"
f32
"
"
f64
"
]
.
forEach
(
t
=
>
testCmpIf
(
1
t
42
37
37
)
)
;
