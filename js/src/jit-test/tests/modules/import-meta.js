assertEq
(
typeof
import
.
meta
"
object
"
)
;
assertEq
(
import
.
meta
!
=
=
null
true
)
;
let
obj
=
import
.
meta
;
assertEq
(
import
.
meta
obj
)
;
function
get
(
)
{
return
import
.
meta
;
}
assertEq
(
get
(
)
import
.
meta
)
;
assertEq
(
"
url
"
in
import
.
meta
true
)
;
assertEq
(
import
.
meta
.
url
.
endsWith
(
"
import
-
meta
.
js
"
)
true
)
;
import
getOtherMetaObject
from
"
exportImportMeta
.
js
"
;
let
otherImportMeta
=
getOtherMetaObject
(
)
;
assertEq
(
otherImportMeta
.
url
.
endsWith
(
"
exportImportMeta
.
js
"
)
true
)
;
assertEq
(
Object
.
isExtensible
(
import
.
meta
)
true
)
;
var
desc
=
Object
.
getOwnPropertyDescriptor
(
import
.
meta
"
url
"
)
;
assertEq
(
desc
.
writable
true
)
;
assertEq
(
desc
.
enumerable
true
)
;
assertEq
(
desc
.
configurable
true
)
;
assertEq
(
desc
.
value
import
.
meta
.
url
)
;
assertEq
(
Object
.
getPrototypeOf
(
import
.
meta
)
null
)
;
import
.
meta
.
url
=
0
;
assertEq
(
import
.
meta
.
url
0
)
;
import
.
meta
.
newProp
=
42
;
assertEq
(
import
.
meta
.
newProp
42
)
;
let
found
=
new
Set
(
Reflect
.
ownKeys
(
import
.
meta
)
)
;
assertEq
(
found
.
size
2
)
;
assertEq
(
found
.
has
(
"
url
"
)
true
)
;
assertEq
(
found
.
has
(
"
newProp
"
)
true
)
;
delete
import
.
meta
.
url
;
delete
import
.
meta
.
newProp
;
found
=
new
Set
(
Reflect
.
ownKeys
(
import
.
meta
)
)
;
assertEq
(
found
.
size
0
)
;
