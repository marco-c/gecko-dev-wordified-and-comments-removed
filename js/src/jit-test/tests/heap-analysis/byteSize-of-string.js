var
config
=
getBuildConfiguration
(
)
;
if
(
!
config
[
'
moz
-
memory
'
]
)
quit
(
0
)
;
if
(
config
[
'
pointer
-
byte
-
size
'
]
=
=
4
)
var
s
=
(
s32
s64
)
=
>
s32
else
var
s
=
(
s32
s64
)
=
>
s64
function
copyString
(
str
)
{
if
(
str
.
length
=
=
0
)
return
str
;
return
ensureFlatString
(
str
.
substr
(
0
1
)
+
str
.
substr
(
1
)
)
;
}
function
tByteSize
(
str
)
{
str
=
copyString
(
str
)
;
let
nurserySize
=
byteSize
(
str
)
;
minorgc
(
)
;
var
tenuredSize
=
byteSize
(
str
)
;
if
(
nurserySize
!
=
tenuredSize
)
{
print
(
"
nursery
size
:
"
+
nurserySize
+
"
tenured
size
:
"
+
tenuredSize
)
;
return
-
1
;
}
return
tenuredSize
;
}
const
m32
=
(
config
[
'
pointer
-
byte
-
size
'
]
=
=
4
)
;
const
TA
=
m32
?
24
:
32
;
const
TN
=
m32
?
16
:
24
;
const
FN
=
m32
?
32
:
32
;
const
XN
=
m32
?
16
:
24
;
const
RN
=
m32
?
16
:
24
;
const
DN
=
m32
?
16
:
24
;
assertEq
(
tByteSize
(
"
"
)
s
(
TA
TA
)
)
;
assertEq
(
tByteSize
(
"
1
"
)
s
(
TA
TA
)
)
;
assertEq
(
tByteSize
(
"
1234567
"
)
s
(
TN
TN
)
)
;
assertEq
(
tByteSize
(
"
12345678
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
12345
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
123456
"
)
s
(
FN
FN
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
123456789
.
123
"
)
s
(
FN
FN
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
123456789
.
1234
"
)
s
(
XN
+
32
XN
+
32
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
123456789
.
123456789
.
1
"
)
s
(
XN
+
32
XN
+
32
)
)
;
assertEq
(
tByteSize
(
"
123456789
.
123456789
.
123456789
.
12
"
)
s
(
XN
+
64
XN
+
64
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
TA
TA
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
TN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
TN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
TN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
FN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
FN
FN
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
32
XN
+
32
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
32
XN
+
32
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
64
XN
+
64
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
64
XN
+
64
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
64
XN
+
64
)
)
;
assertEq
(
tByteSize
(
"
"
)
s
(
XN
+
64
XN
+
64
)
)
;
var
fragment8
=
"
En
un
lugar
de
la
Mancha
de
cuyo
nombre
no
quiero
acordarme
"
;
var
rope8
=
fragment8
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
rope8
=
rope8
+
rope8
;
assertEq
(
byteSize
(
rope8
)
s
(
RN
RN
)
)
;
var
matches8
=
rope8
.
match
(
/
(
de
cuyo
nombre
no
quiero
acordarme
)
/
)
;
assertEq
(
byteSize
(
rope8
)
s
(
XN
+
65536
XN
+
65536
)
)
;
rope8a
=
rope8
+
fragment8
;
assertEq
(
byteSize
(
rope8a
)
s
(
RN
RN
)
)
;
rope8a
.
match
(
/
x
/
function
(
)
{
assertEq
(
true
false
)
;
}
)
;
assertEq
(
byteSize
(
rope8a
)
s
(
XN
+
65536
XN
+
65536
)
)
;
assertEq
(
byteSize
(
rope8
)
s
(
RN
RN
)
)
;
var
fragment16
=
"
"
;
var
rope16
=
fragment16
;
for
(
var
i
=
0
;
i
<
10
;
i
+
+
)
rope16
=
rope16
+
rope16
;
assertEq
(
byteSize
(
rope16
)
s
(
RN
RN
)
)
;
let
matches16
=
rope16
.
match
(
/
(
)
/
)
;
assertEq
(
byteSize
(
rope16
)
s
(
RN
+
131072
RN
+
131072
)
)
;
assertEq
(
byteSize
(
rope8
.
substr
(
1000
2000
)
)
s
(
DN
DN
)
)
;
assertEq
(
byteSize
(
rope16
.
substr
(
1000
2000
)
)
s
(
DN
DN
)
)
;
assertEq
(
byteSize
(
matches8
[
0
]
)
s
(
DN
DN
)
)
;
assertEq
(
byteSize
(
matches8
[
1
]
)
s
(
DN
DN
)
)
;
assertEq
(
byteSize
(
matches16
[
0
]
)
s
(
DN
DN
)
)
;
assertEq
(
byteSize
(
matches16
[
1
]
)
s
(
DN
DN
)
)
;
rope16a
=
rope16
+
fragment16
;
assertEq
(
byteSize
(
rope16a
)
s
(
RN
RN
)
)
;
rope16a
.
match
(
/
x
/
function
(
)
{
assertEq
(
true
false
)
;
}
)
;
assertEq
(
byteSize
(
rope16a
)
s
(
XN
+
131072
XN
+
131072
)
)
;
assertEq
(
byteSize
(
rope16
)
s
(
XN
XN
)
)
;
