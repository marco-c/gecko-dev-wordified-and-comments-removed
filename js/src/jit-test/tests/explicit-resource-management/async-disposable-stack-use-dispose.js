load
(
libdir
+
"
asserts
.
js
"
)
;
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
async
function
testDisposalsWithAsyncDisposableStack
(
)
{
const
obj
=
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
1
)
;
}
}
;
stack
.
use
(
obj
)
;
assertEq
(
stack
.
disposed
false
)
;
assertEq
(
await
stack
.
disposeAsync
(
)
undefined
)
;
}
testDisposalsWithAsyncDisposableStack
(
)
;
drainJobQueue
(
)
;
assertEq
(
stack
.
disposed
true
)
;
assertArrayEq
(
disposed
[
1
]
)
;
assertThrowsInstanceOf
(
(
)
=
>
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
(
)
=
>
{
}
}
)
ReferenceError
)
;
}
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
async
function
testAsyncDisposableStackMultipleDispose
(
)
{
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
stack
.
use
(
{
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
i
)
;
}
}
)
;
}
assertEq
(
stack
.
disposed
false
)
;
await
stack
.
disposeAsync
(
)
;
await
stack
.
disposeAsync
(
)
;
}
testAsyncDisposableStackMultipleDispose
(
)
;
drainJobQueue
(
)
;
assertEq
(
stack
.
disposed
true
)
;
assertArrayEq
(
disposed
[
4
3
2
1
0
]
)
;
}
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
async
function
testAsyncDisposableStackUseWithFallback
(
)
{
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
1
)
;
}
}
)
;
stack
.
use
(
{
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
2
)
;
}
}
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
undefined
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
3
)
;
}
}
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
null
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
4
)
;
}
}
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
5
)
;
}
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
6
)
;
}
}
)
;
assertEq
(
stack
.
disposed
false
)
;
await
stack
.
disposeAsync
(
)
;
}
testAsyncDisposableStackUseWithFallback
(
)
;
drainJobQueue
(
)
;
assertEq
(
stack
.
disposed
true
)
;
assertArrayEq
(
disposed
[
5
4
3
2
1
]
)
;
}
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
i
)
;
}
}
)
;
}
assertEq
(
stack
.
disposed
false
)
;
async
function
testAsyncDisposableStackWithUsingDecl
(
)
{
{
await
using
stk
=
stack
;
stk
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
5
)
;
}
}
)
;
stk
.
use
(
{
[
Symbol
.
dispose
]
(
)
{
disposed
.
push
(
6
)
;
}
}
)
;
}
assertEq
(
stack
.
disposed
true
)
;
{
await
using
stk2
=
stack
;
}
assertEq
(
stack
.
disposed
true
)
;
}
testAsyncDisposableStackWithUsingDecl
(
)
;
drainJobQueue
(
)
;
assertArrayEq
(
disposed
[
6
5
4
3
2
1
0
]
)
;
}
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
async
function
testAsyncDisposableStackWithNullUndefineds
(
)
{
stack
.
use
(
undefined
)
;
stack
.
use
(
null
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
1
)
;
}
}
)
;
await
stack
.
disposeAsync
(
)
;
}
testAsyncDisposableStackWithNullUndefineds
(
)
;
drainJobQueue
(
)
;
assertArrayEq
(
disposed
[
1
]
)
;
assertEq
(
stack
.
disposed
true
)
;
}
{
const
disposed
=
[
]
;
const
stack
=
new
AsyncDisposableStack
(
)
;
let
error
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
1
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
(
)
{
disposed
.
push
(
2
)
;
}
}
)
;
}
}
)
;
stack
.
disposeAsync
(
)
.
catch
(
(
e
)
=
>
{
error
=
e
;
}
)
;
drainJobQueue
(
)
;
assertEq
(
error
instanceof
ReferenceError
true
)
;
assertArrayEq
(
disposed
[
1
]
)
;
assertEq
(
stack
.
disposed
true
)
;
}
{
assertThrowsInstanceOf
(
(
)
=
>
{
const
stack
=
new
AsyncDisposableStack
(
)
;
stack
.
use
(
1
)
;
}
TypeError
)
;
}
{
assertThrowsInstanceOf
(
(
)
=
>
{
const
stack
=
new
AsyncDisposableStack
(
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
undefined
}
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
const
stack
=
new
AsyncDisposableStack
(
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
null
}
)
;
}
TypeError
)
;
assertThrowsInstanceOf
(
(
)
=
>
{
const
stack
=
new
AsyncDisposableStack
(
)
;
stack
.
use
(
{
[
Symbol
.
asyncDispose
]
:
1
}
)
;
}
TypeError
)
;
}
