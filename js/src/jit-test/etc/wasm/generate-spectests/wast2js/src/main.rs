use
anyhow
:
:
{
Context
as
_
Result
}
;
use
std
:
:
env
;
use
std
:
:
path
:
:
Path
;
mod
convert
;
mod
out
;
fn
main
(
)
-
>
Result
<
(
)
>
{
let
files
=
env
:
:
args
(
)
.
collect
:
:
<
Vec
<
String
>
>
(
)
;
for
path
in
&
files
[
1
.
.
]
{
let
source
=
std
:
:
fs
:
:
read_to_string
(
path
)
.
with_context
(
|
|
format
!
(
"
failed
to
read
{
}
"
path
)
)
?
;
let
mut
full_script
=
String
:
:
new
(
)
;
full_script
.
push_str
(
&
convert
:
:
harness
(
)
)
;
full_script
.
push_str
(
&
convert
:
:
convert
(
path
&
source
)
?
)
;
std
:
:
fs
:
:
write
(
Path
:
:
new
(
path
)
.
with_extension
(
"
js
"
)
.
file_name
(
)
.
unwrap
(
)
&
full_script
)
?
;
}
Ok
(
(
)
)
}
