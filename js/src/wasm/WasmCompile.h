#
ifndef
wasm_compile_h
#
define
wasm_compile_h
#
include
"
wasm
/
WasmModule
.
h
"
namespace
js
{
namespace
wasm
{
struct
ScriptedCaller
{
UniqueChars
filename
;
unsigned
line
;
unsigned
column
;
}
;
struct
CompileArgs
:
ShareableBase
<
CompileArgs
>
{
Assumptions
assumptions
;
ScriptedCaller
scriptedCaller
;
bool
baselineEnabled
;
bool
debugEnabled
;
bool
ionEnabled
;
CompileArgs
(
Assumptions
&
&
assumptions
ScriptedCaller
&
&
scriptedCaller
)
:
assumptions
(
Move
(
assumptions
)
)
scriptedCaller
(
Move
(
scriptedCaller
)
)
baselineEnabled
(
false
)
debugEnabled
(
false
)
ionEnabled
(
false
)
{
}
CompileArgs
(
)
=
default
;
bool
initFromContext
(
JSContext
*
cx
ScriptedCaller
&
&
scriptedCaller
)
;
}
;
typedef
RefPtr
<
CompileArgs
>
MutableCompileArgs
;
typedef
RefPtr
<
const
CompileArgs
>
SharedCompileArgs
;
SharedModule
Compile
(
const
ShareableBytes
&
bytecode
const
CompileArgs
&
args
UniqueChars
*
error
)
;
bool
GetDebugEnabled
(
const
CompileArgs
&
args
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
;
CompileMode
GetInitialCompileMode
(
const
CompileArgs
&
args
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
;
Tier
GetTier
(
const
CompileArgs
&
args
CompileMode
compileMode
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
;
}
}
#
endif
