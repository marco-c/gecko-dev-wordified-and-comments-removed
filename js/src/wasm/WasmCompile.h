#
ifndef
wasm_compile_h
#
define
wasm_compile_h
#
include
"
vm
/
Runtime
.
h
"
#
include
"
wasm
/
WasmModule
.
h
"
namespace
JS
{
class
OptimizedEncodingListener
;
}
namespace
js
{
namespace
wasm
{
uint32_t
ObservedCPUFeatures
(
)
;
double
EstimateCompiledCodeSize
(
Tier
tier
size_t
bytecodeSize
)
;
SharedModule
CompileBuffer
(
const
CompileArgs
&
args
const
ShareableBytes
&
bytecode
UniqueChars
*
error
UniqueCharsVector
*
warnings
JS
:
:
OptimizedEncodingListener
*
listener
=
nullptr
)
;
bool
CompileTier2
(
const
CompileArgs
&
args
const
Bytes
&
bytecode
const
Module
&
module
UniqueChars
*
error
UniqueCharsVector
*
warnings
Atomic
<
bool
>
*
cancelled
)
;
using
ExclusiveBytesPtr
=
ExclusiveWaitableData
<
const
uint8_t
*
>
;
struct
StreamEndData
{
bool
reached
;
const
Bytes
*
tailBytes
;
Tier2Listener
tier2Listener
;
StreamEndData
(
)
:
reached
(
false
)
{
}
}
;
using
ExclusiveStreamEndData
=
ExclusiveWaitableData
<
StreamEndData
>
;
SharedModule
CompileStreaming
(
const
CompileArgs
&
args
const
Bytes
&
envBytes
const
Bytes
&
codeBytes
const
ExclusiveBytesPtr
&
codeBytesEnd
const
ExclusiveStreamEndData
&
streamEnd
const
Atomic
<
bool
>
&
cancelled
UniqueChars
*
error
UniqueCharsVector
*
warnings
)
;
enum
class
IonDumpContents
{
UnoptimizedMIR
OptimizedMIR
LIR
Default
=
UnoptimizedMIR
}
;
bool
DumpIonFunctionInModule
(
const
ShareableBytes
&
bytecode
uint32_t
targetFuncIndex
IonDumpContents
contents
GenericPrinter
&
out
UniqueChars
*
error
)
;
}
}
#
endif
