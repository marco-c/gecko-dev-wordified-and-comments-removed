#
ifndef
wasm_compile_h
#
define
wasm_compile_h
#
include
"
wasm
/
WasmModule
.
h
"
namespace
js
{
namespace
wasm
{
uint32_t
ObservedCPUFeatures
(
)
;
struct
ScriptedCaller
{
UniqueChars
filename
;
bool
filenameIsURL
;
unsigned
line
;
ScriptedCaller
(
)
:
filenameIsURL
(
false
)
line
(
0
)
{
}
}
;
struct
CompileArgs
:
ShareableBase
<
CompileArgs
>
{
ScriptedCaller
scriptedCaller
;
UniqueChars
sourceMapURL
;
bool
baselineEnabled
;
bool
forceCranelift
;
bool
debugEnabled
;
bool
ionEnabled
;
bool
sharedMemoryEnabled
;
bool
gcTypesConfigured
;
bool
testTiering
;
explicit
CompileArgs
(
ScriptedCaller
&
&
scriptedCaller
)
:
scriptedCaller
(
std
:
:
move
(
scriptedCaller
)
)
baselineEnabled
(
false
)
forceCranelift
(
false
)
debugEnabled
(
false
)
ionEnabled
(
false
)
sharedMemoryEnabled
(
false
)
gcTypesConfigured
(
false
)
testTiering
(
false
)
{
}
CompileArgs
(
JSContext
*
cx
ScriptedCaller
&
&
scriptedCaller
)
;
}
;
typedef
RefPtr
<
CompileArgs
>
MutableCompileArgs
;
typedef
RefPtr
<
const
CompileArgs
>
SharedCompileArgs
;
double
EstimateCompiledCodeSize
(
Tier
tier
size_t
bytecodeSize
)
;
SharedModule
CompileBuffer
(
const
CompileArgs
&
args
const
ShareableBytes
&
bytecode
UniqueChars
*
error
UniqueCharsVector
*
warnings
UniqueLinkData
*
maybeLinkData
=
nullptr
)
;
void
CompileTier2
(
const
CompileArgs
&
args
const
Bytes
&
bytecode
const
Module
&
module
Atomic
<
bool
>
*
cancelled
)
;
typedef
ExclusiveWaitableData
<
const
uint8_t
*
>
ExclusiveBytesPtr
;
struct
StreamEndData
{
bool
reached
;
const
Bytes
*
tailBytes
;
Tier2Listener
tier2Listener
;
StreamEndData
(
)
:
reached
(
false
)
{
}
}
;
typedef
ExclusiveWaitableData
<
StreamEndData
>
ExclusiveStreamEndData
;
SharedModule
CompileStreaming
(
const
CompileArgs
&
args
const
Bytes
&
envBytes
const
Bytes
&
codeBytes
const
ExclusiveBytesPtr
&
codeBytesEnd
const
ExclusiveStreamEndData
&
streamEnd
const
Atomic
<
bool
>
&
cancelled
UniqueChars
*
error
UniqueCharsVector
*
warnings
)
;
}
}
#
endif
