#
ifndef
wasm_table_h
#
define
wasm_table_h
#
include
"
gc
/
Policy
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
namespace
js
{
namespace
wasm
{
class
Table
:
public
ShareableBase
<
Table
>
{
using
InstanceSet
=
JS
:
:
WeakCache
<
GCHashSet
<
ReadBarrieredWasmInstanceObject
MovableCellHasher
<
ReadBarrieredWasmInstanceObject
>
SystemAllocPolicy
>
>
;
using
UniqueByteArray
=
UniquePtr
<
uint8_t
[
]
JS
:
:
FreePolicy
>
;
ReadBarrieredWasmTableObject
maybeObject_
;
InstanceSet
observers_
;
UniqueByteArray
array_
;
const
TableKind
kind_
;
uint32_t
length_
;
const
Maybe
<
uint32_t
>
maximum_
;
const
bool
external_
;
template
<
class
>
friend
struct
js
:
:
MallocProvider
;
Table
(
JSContext
*
cx
const
TableDesc
&
td
HandleWasmTableObject
maybeObject
UniqueByteArray
array
)
;
void
tracePrivate
(
JSTracer
*
trc
)
;
friend
class
js
:
:
WasmTableObject
;
public
:
static
RefPtr
<
Table
>
create
(
JSContext
*
cx
const
TableDesc
&
desc
HandleWasmTableObject
maybeObject
)
;
void
trace
(
JSTracer
*
trc
)
;
bool
external
(
)
const
{
return
external_
;
}
bool
isTypedFunction
(
)
const
{
return
kind_
=
=
TableKind
:
:
TypedFunction
;
}
uint32_t
length
(
)
const
{
return
length_
;
}
Maybe
<
uint32_t
>
maximum
(
)
const
{
return
maximum_
;
}
uint8_t
*
base
(
)
const
{
return
array_
.
get
(
)
;
}
void
*
*
internalArray
(
)
const
;
ExternalTableElem
*
externalArray
(
)
const
;
void
set
(
uint32_t
index
void
*
code
const
Instance
*
instance
)
;
void
setNull
(
uint32_t
index
)
;
void
copy
(
uint32_t
dstIndex
uint32_t
srcIndex
)
;
uint32_t
grow
(
uint32_t
delta
JSContext
*
cx
)
;
bool
movingGrowable
(
)
const
;
bool
addMovingGrowObserver
(
JSContext
*
cx
WasmInstanceObject
*
instance
)
;
size_t
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
;
}
;
typedef
RefPtr
<
Table
>
SharedTable
;
typedef
Vector
<
SharedTable
0
SystemAllocPolicy
>
SharedTableVector
;
}
}
#
endif
