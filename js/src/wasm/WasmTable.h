#
ifndef
wasm_table_h
#
define
wasm_table_h
#
include
"
gc
/
Policy
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
namespace
js
{
namespace
wasm
{
STATIC_ASSERT_ANYREF_IS_JSOBJECT
;
typedef
GCVector
<
HeapPtr
<
JSObject
*
>
0
SystemAllocPolicy
>
TableAnyRefVector
;
class
Table
:
public
ShareableBase
<
Table
>
{
using
InstanceSet
=
JS
:
:
WeakCache
<
GCHashSet
<
WeakHeapPtrWasmInstanceObject
MovableCellHasher
<
WeakHeapPtrWasmInstanceObject
>
SystemAllocPolicy
>
>
;
using
UniqueFuncRefArray
=
UniquePtr
<
FunctionTableElem
[
]
JS
:
:
FreePolicy
>
;
WeakHeapPtrWasmTableObject
maybeObject_
;
InstanceSet
observers_
;
UniqueFuncRefArray
functions_
;
TableAnyRefVector
objects_
;
const
TableKind
kind_
;
uint32_t
length_
;
const
Maybe
<
uint32_t
>
maximum_
;
template
<
class
>
friend
struct
js
:
:
MallocProvider
;
Table
(
JSContext
*
cx
const
TableDesc
&
td
HandleWasmTableObject
maybeObject
UniqueFuncRefArray
functions
)
;
Table
(
JSContext
*
cx
const
TableDesc
&
td
HandleWasmTableObject
maybeObject
TableAnyRefVector
&
&
objects
)
;
void
tracePrivate
(
JSTracer
*
trc
)
;
friend
class
js
:
:
WasmTableObject
;
public
:
static
RefPtr
<
Table
>
create
(
JSContext
*
cx
const
TableDesc
&
desc
HandleWasmTableObject
maybeObject
)
;
void
trace
(
JSTracer
*
trc
)
;
TableKind
kind
(
)
const
{
return
kind_
;
}
bool
isFunction
(
)
const
{
return
kind_
=
=
TableKind
:
:
FuncRef
|
|
kind_
=
=
TableKind
:
:
AsmJS
;
}
uint32_t
length
(
)
const
{
return
length_
;
}
Maybe
<
uint32_t
>
maximum
(
)
const
{
return
maximum_
;
}
uint8_t
*
functionBase
(
)
const
;
const
FunctionTableElem
&
getFuncRef
(
uint32_t
index
)
const
;
bool
getFuncRef
(
JSContext
*
cx
uint32_t
index
MutableHandleFunction
fun
)
const
;
void
setFuncRef
(
uint32_t
index
void
*
code
const
Instance
*
instance
)
;
void
fillFuncRef
(
uint32_t
index
uint32_t
fillCount
AnyRef
ref
JSContext
*
cx
)
;
AnyRef
getAnyRef
(
uint32_t
index
)
const
;
void
fillAnyRef
(
uint32_t
index
uint32_t
fillCount
AnyRef
ref
)
;
void
setNull
(
uint32_t
index
)
;
bool
copy
(
const
Table
&
srcTable
uint32_t
dstIndex
uint32_t
srcIndex
)
;
uint32_t
grow
(
uint32_t
delta
)
;
bool
movingGrowable
(
)
const
;
bool
addMovingGrowObserver
(
JSContext
*
cx
WasmInstanceObject
*
instance
)
;
size_t
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
;
size_t
gcMallocBytes
(
)
const
;
}
;
typedef
RefPtr
<
Table
>
SharedTable
;
typedef
Vector
<
SharedTable
0
SystemAllocPolicy
>
SharedTableVector
;
}
}
#
endif
