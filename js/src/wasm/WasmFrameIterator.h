#
ifndef
wasm_frame_iterator_h
#
define
wasm_frame_iterator_h
#
include
"
js
/
ProfilingFrameIterator
.
h
"
class
JSAtom
;
namespace
js
{
class
WasmActivation
;
namespace
jit
{
class
MacroAssembler
;
}
namespace
wasm
{
class
CallSite
;
class
Code
;
class
CodeRange
;
class
DebugFrame
;
class
Instance
;
class
SigIdDesc
;
struct
FuncOffsets
;
struct
CallableOffsets
;
struct
TrapOffset
;
class
FrameIterator
{
public
:
enum
class
Unwind
{
True
False
}
;
private
:
WasmActivation
*
activation_
;
const
Code
*
code_
;
const
CallSite
*
callsite_
;
const
CodeRange
*
codeRange_
;
uint8_t
*
fp_
;
Unwind
unwind_
;
bool
missingFrameMessage_
;
void
settle
(
)
;
public
:
explicit
FrameIterator
(
)
;
explicit
FrameIterator
(
WasmActivation
*
activation
Unwind
unwind
=
Unwind
:
:
False
)
;
void
operator
+
+
(
)
;
bool
done
(
)
const
;
const
char
*
filename
(
)
const
;
const
char16_t
*
displayURL
(
)
const
;
bool
mutedErrors
(
)
const
;
JSAtom
*
functionDisplayAtom
(
)
const
;
unsigned
lineOrBytecode
(
)
const
;
const
CodeRange
*
codeRange
(
)
const
{
return
codeRange_
;
}
bool
hasInstance
(
)
const
;
Instance
*
instance
(
)
const
;
bool
debugEnabled
(
)
const
;
DebugFrame
*
debugFrame
(
)
const
;
const
CallSite
*
debugTrapCallsite
(
)
const
;
}
;
enum
class
ExitReason
:
uint32_t
{
None
ImportJit
ImportInterp
Trap
DebugTrap
}
;
class
ProfilingFrameIterator
{
const
WasmActivation
*
activation_
;
const
Code
*
code_
;
const
CodeRange
*
codeRange_
;
void
*
callerFP_
;
void
*
callerPC_
;
void
*
stackAddress_
;
ExitReason
exitReason_
;
void
initFromExitFP
(
)
;
public
:
ProfilingFrameIterator
(
)
;
explicit
ProfilingFrameIterator
(
const
WasmActivation
&
activation
)
;
ProfilingFrameIterator
(
const
WasmActivation
&
activation
const
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
&
state
)
;
void
operator
+
+
(
)
;
bool
done
(
)
const
{
return
!
codeRange_
;
}
void
*
stackAddress
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
stackAddress_
;
}
const
char
*
label
(
)
const
;
}
;
void
GenerateExitPrologue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
CallableOffsets
*
offsets
)
;
void
GenerateExitEpilogue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
CallableOffsets
*
offsets
)
;
void
GenerateFunctionPrologue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
const
SigIdDesc
&
sigId
FuncOffsets
*
offsets
)
;
void
GenerateFunctionEpilogue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
FuncOffsets
*
offsets
)
;
void
TraceActivations
(
JSContext
*
cx
const
CooperatingContext
&
target
JSTracer
*
trc
)
;
Instance
*
LookupFaultingInstance
(
WasmActivation
*
activation
void
*
pc
void
*
fp
)
;
}
}
#
endif
