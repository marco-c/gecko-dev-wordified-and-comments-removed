#
ifndef
wasm_cranelift_baldrapi_h
#
define
wasm_cranelift_baldrapi_h
#
include
<
inttypes
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wasm
/
WasmConstants
.
h
"
namespace
js
{
namespace
wasm
{
struct
FuncCompileInput
;
class
GlobalDesc
;
struct
FuncTypeWithId
;
struct
TableDesc
;
struct
ModuleEnvironment
;
}
}
struct
CraneliftStaticEnvironment
{
bool
has_sse2
;
bool
has_sse3
;
bool
has_sse41
;
bool
has_sse42
;
bool
has_popcnt
;
bool
has_avx
;
bool
has_bmi1
;
bool
has_bmi2
;
bool
has_lzcnt
;
bool
platform_is_windows
;
bool
ref_types_enabled
;
bool
threads_enabled
;
size_t
static_memory_bound
;
size_t
memory_guard_size
;
size_t
memory_base_tls_offset
;
size_t
instance_tls_offset
;
size_t
interrupt_tls_offset
;
size_t
cx_tls_offset
;
size_t
realm_cx_offset
;
size_t
realm_tls_offset
;
size_t
realm_func_import_tls_offset
;
size_t
size_of_wasm_frame
;
inline
CraneliftStaticEnvironment
(
)
;
}
;
struct
CraneliftModuleEnvironment
{
const
js
:
:
wasm
:
:
ModuleEnvironment
*
env
;
uint32_t
min_memory_length
;
explicit
inline
CraneliftModuleEnvironment
(
const
js
:
:
wasm
:
:
ModuleEnvironment
&
env
)
;
}
;
struct
BD_Stackmaps
;
struct
CraneliftFuncCompileInput
{
const
uint8_t
*
bytecode
;
size_t
bytecode_size
;
uint32_t
index
;
uint32_t
offset_in_module
;
BD_Stackmaps
*
stackmaps
;
explicit
inline
CraneliftFuncCompileInput
(
const
js
:
:
wasm
:
:
FuncCompileInput
&
)
;
}
;
struct
CraneliftMetadataEntry
{
enum
Which
{
DirectCall
IndirectCall
Trap
SymbolicAccess
}
which
;
uint32_t
code_offset
;
uint32_t
module_bytecode_offset
;
size_t
extra
;
}
;
struct
CraneliftCompiledFunc
{
size_t
num_metadata
;
const
CraneliftMetadataEntry
*
metadatas
;
size_t
frame_pushed
;
bool
contains_calls
;
const
uint8_t
*
code
;
size_t
code_size
;
size_t
jumptables_size
;
size_t
rodata_size
;
size_t
total_size
;
size_t
num_rodata_relocs
;
const
uint32_t
*
rodata_relocs
;
}
;
struct
BD_ConstantValue
{
js
:
:
wasm
:
:
TypeCode
t
;
union
{
int32_t
i32
;
int64_t
i64
;
float
f32
;
double
f64
;
void
*
r
;
}
u
;
}
;
struct
BD_ValType
{
uint32_t
packed
;
}
;
enum
class
BD_SymbolicAddress
:
uint32_t
{
MemoryGrow
=
0
MemorySize
MemoryCopy
MemoryCopyShared
DataDrop
MemoryFill
MemoryFillShared
MemoryInit
TableSize
TableGrow
TableGet
TableSet
TableCopy
TableFill
TableInit
ElemDrop
RefFunc
FloorF32
FloorF64
CeilF32
CeilF64
NearestF32
NearestF64
TruncF32
TruncF64
PreBarrier
PostBarrier
WaitI32
WaitI64
Wake
Limit
}
;
extern
"
C
"
{
js
:
:
wasm
:
:
TypeCode
env_unpack
(
BD_ValType
type
)
;
size_t
env_num_tables
(
const
CraneliftModuleEnvironment
*
env
)
;
size_t
env_num_globals
(
const
CraneliftModuleEnvironment
*
env
)
;
size_t
env_num_types
(
const
CraneliftModuleEnvironment
*
env
)
;
size_t
env_num_funcs
(
const
CraneliftModuleEnvironment
*
env
)
;
size_t
env_num_elems
(
const
CraneliftModuleEnvironment
*
env
)
;
size_t
env_num_datas
(
const
CraneliftModuleEnvironment
*
env
)
;
js
:
:
wasm
:
:
TypeCode
env_elem_typecode
(
const
CraneliftModuleEnvironment
*
env
uint32_t
index
)
;
bool
env_is_func_valid_for_ref
(
const
CraneliftModuleEnvironment
*
env
uint32_t
index
)
;
uint32_t
env_max_memory
(
const
CraneliftModuleEnvironment
*
env
)
;
bool
env_uses_shared_memory
(
const
CraneliftModuleEnvironment
*
env
)
;
bool
env_has_memory
(
const
CraneliftModuleEnvironment
*
env
)
;
const
js
:
:
wasm
:
:
FuncTypeWithId
*
env_type
(
const
CraneliftModuleEnvironment
*
env
size_t
typeIndex
)
;
const
js
:
:
wasm
:
:
FuncTypeWithId
*
env_func_sig
(
const
CraneliftModuleEnvironment
*
env
size_t
funcIndex
)
;
size_t
env_func_sig_index
(
const
CraneliftModuleEnvironment
*
env
size_t
funcIndex
)
;
size_t
env_func_import_tls_offset
(
const
CraneliftModuleEnvironment
*
env
size_t
funcIndex
)
;
bool
env_func_is_import
(
const
CraneliftModuleEnvironment
*
env
size_t
funcIndex
)
;
const
js
:
:
wasm
:
:
FuncTypeWithId
*
env_signature
(
const
CraneliftModuleEnvironment
*
env
size_t
sigIndex
)
;
const
js
:
:
wasm
:
:
TableDesc
*
env_table
(
const
CraneliftModuleEnvironment
*
env
size_t
tableIndex
)
;
const
js
:
:
wasm
:
:
GlobalDesc
*
env_global
(
const
CraneliftModuleEnvironment
*
env
size_t
globalIndex
)
;
bool
global_isConstant
(
const
js
:
:
wasm
:
:
GlobalDesc
*
)
;
bool
global_isIndirect
(
const
js
:
:
wasm
:
:
GlobalDesc
*
)
;
BD_ConstantValue
global_constantValue
(
const
js
:
:
wasm
:
:
GlobalDesc
*
)
;
js
:
:
wasm
:
:
TypeCode
global_type
(
const
js
:
:
wasm
:
:
GlobalDesc
*
)
;
size_t
global_tlsOffset
(
const
js
:
:
wasm
:
:
GlobalDesc
*
)
;
size_t
table_tlsOffset
(
const
js
:
:
wasm
:
:
TableDesc
*
)
;
uint32_t
table_initialLimit
(
const
js
:
:
wasm
:
:
TableDesc
*
)
;
uint32_t
table_maximumLimit
(
const
js
:
:
wasm
:
:
TableDesc
*
)
;
js
:
:
wasm
:
:
TypeCode
table_elementTypeCode
(
const
js
:
:
wasm
:
:
TableDesc
*
)
;
size_t
funcType_numArgs
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
const
BD_ValType
*
funcType_args
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
size_t
funcType_numResults
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
const
BD_ValType
*
funcType_results
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
js
:
:
wasm
:
:
FuncTypeIdDescKind
funcType_idKind
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
size_t
funcType_idImmediate
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
size_t
funcType_idTlsOffset
(
const
js
:
:
wasm
:
:
FuncTypeWithId
*
)
;
void
stackmaps_add
(
BD_Stackmaps
*
sink
const
uint32_t
*
bitMap
size_t
mappedWords
size_t
argsSize
size_t
codeOffset
)
;
}
#
endif
