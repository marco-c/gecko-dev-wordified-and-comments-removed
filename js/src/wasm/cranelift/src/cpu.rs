use
cranelift_codegen
:
:
isa
;
use
cranelift_codegen
:
:
settings
:
:
{
self
Configurable
}
;
use
std
:
:
str
:
:
FromStr
;
use
utils
:
:
{
BasicError
DashResult
}
;
use
baldrdash
:
:
StaticEnvironment
;
impl
From
<
isa
:
:
LookupError
>
for
BasicError
{
fn
from
(
err
:
isa
:
:
LookupError
)
-
>
BasicError
{
BasicError
:
:
new
(
err
.
to_string
(
)
)
}
}
impl
From
<
settings
:
:
SetError
>
for
BasicError
{
fn
from
(
err
:
settings
:
:
SetError
)
-
>
BasicError
{
BasicError
:
:
new
(
err
.
to_string
(
)
)
}
}
pub
fn
make_isa
(
env
:
&
StaticEnvironment
)
-
>
DashResult
<
Box
<
isa
:
:
TargetIsa
>
>
{
let
shared_flags
=
make_shared_flags
(
)
.
expect
(
"
Cranelift
configuration
error
"
)
;
let
mut
ib
=
isa
:
:
lookup
(
triple
!
(
"
x86_64
-
unknown
-
unknown
"
)
)
.
map_err
(
BasicError
:
:
from
)
?
;
if
!
env
.
hasSse2
{
return
Err
(
"
SSE2
is
mandatory
for
Baldrdash
!
"
.
into
(
)
)
;
}
if
env
.
hasSse3
{
ib
.
enable
(
"
has_sse3
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasSse41
{
ib
.
enable
(
"
has_sse41
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasSse42
{
ib
.
enable
(
"
has_sse42
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasPopcnt
{
ib
.
enable
(
"
has_popcnt
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasAvx
{
ib
.
enable
(
"
has_avx
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasBmi1
{
ib
.
enable
(
"
has_bmi1
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasBmi2
{
ib
.
enable
(
"
has_bmi2
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
if
env
.
hasLzcnt
{
ib
.
enable
(
"
has_lzcnt
"
)
.
map_err
(
BasicError
:
:
from
)
?
;
}
Ok
(
ib
.
finish
(
shared_flags
)
)
}
fn
make_shared_flags
(
)
-
>
settings
:
:
SetResult
<
settings
:
:
Flags
>
{
let
mut
sb
=
settings
:
:
builder
(
)
;
sb
.
enable
(
"
avoid_div_traps
"
)
?
;
sb
.
set
(
"
baldrdash_prologue_words
"
"
3
"
)
?
;
sb
.
enable
(
"
allones_funcaddrs
"
)
?
;
if
!
cfg
!
(
debug_assertions
)
{
sb
.
set
(
"
enable_verifier
"
"
false
"
)
?
;
}
sb
.
set
(
"
probestack_enabled
"
"
false
"
)
?
;
sb
.
set
(
"
opt_level
"
"
best
"
)
?
;
sb
.
set
(
"
jump_tables_enabled
"
"
false
"
)
?
;
Ok
(
settings
:
:
Flags
:
:
new
(
sb
)
)
}
