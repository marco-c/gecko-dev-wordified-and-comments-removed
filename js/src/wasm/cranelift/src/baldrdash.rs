use
baldrapi
:
:
CraneliftModuleEnvironment
;
use
cranelift_codegen
:
:
binemit
:
:
CodeOffset
;
use
cranelift_codegen
:
:
cursor
:
:
{
Cursor
FuncCursor
}
;
use
cranelift_codegen
:
:
entity
:
:
EntityRef
;
use
cranelift_codegen
:
:
ir
:
:
immediates
:
:
{
Ieee32
Ieee64
}
;
use
cranelift_codegen
:
:
ir
:
:
stackslot
:
:
StackSize
;
use
cranelift_codegen
:
:
ir
:
:
{
self
InstBuilder
}
;
use
cranelift_codegen
:
:
{
CodegenError
CodegenResult
}
;
use
cranelift_wasm
:
:
{
FuncIndex
GlobalIndex
SignatureIndex
TableIndex
}
;
use
std
:
:
mem
;
use
std
:
:
slice
;
use
baldrapi
;
pub
use
baldrapi
:
:
BD_SymbolicAddress
as
SymbolicAddress
;
pub
use
baldrapi
:
:
BD_ValType
as
ValType
;
pub
use
baldrapi
:
:
CraneliftCompiledFunc
as
CompiledFunc
;
pub
use
baldrapi
:
:
CraneliftFuncCompileInput
as
FuncCompileInput
;
pub
use
baldrapi
:
:
CraneliftMetadataEntry
as
MetadataEntry
;
pub
use
baldrapi
:
:
CraneliftStaticEnvironment
as
StaticEnvironment
;
pub
use
baldrapi
:
:
FuncTypeIdDescKind
;
pub
use
baldrapi
:
:
Trap
;
pub
use
baldrapi
:
:
TypeCode
;
pub
enum
ConstantValue
{
I32
(
i32
)
I64
(
i64
)
F32
(
f32
)
F64
(
f64
)
}
impl
Into
<
Option
<
ir
:
:
Type
>
>
for
TypeCode
{
fn
into
(
self
)
-
>
Option
<
ir
:
:
Type
>
{
match
self
{
TypeCode
:
:
I32
=
>
Some
(
ir
:
:
types
:
:
I32
)
TypeCode
:
:
I64
=
>
Some
(
ir
:
:
types
:
:
I64
)
TypeCode
:
:
F32
=
>
Some
(
ir
:
:
types
:
:
F32
)
TypeCode
:
:
F64
=
>
Some
(
ir
:
:
types
:
:
F64
)
TypeCode
:
:
BlockVoid
=
>
None
_
=
>
panic
!
(
"
unexpected
type
"
)
}
}
}
impl
Into
<
ir
:
:
Type
>
for
TypeCode
{
fn
into
(
self
)
-
>
ir
:
:
Type
{
match
self
.
into
(
)
{
Some
(
t
)
=
>
t
None
=
>
panic
!
(
"
unexpected
void
type
"
)
}
}
}
impl
Into
<
ir
:
:
Type
>
for
ValType
{
fn
into
(
self
)
-
>
ir
:
:
Type
{
unsafe
{
baldrapi
:
:
env_unpack
(
self
)
}
.
into
(
)
}
}
impl
From
<
u32
>
for
SymbolicAddress
{
fn
from
(
x
:
u32
)
-
>
SymbolicAddress
{
assert
!
(
x
<
SymbolicAddress
:
:
Limit
as
u32
)
;
unsafe
{
mem
:
:
transmute
(
x
)
}
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
GlobalDesc
(
*
const
baldrapi
:
:
GlobalDesc
)
;
impl
GlobalDesc
{
pub
fn
value_type
(
self
)
-
>
TypeCode
{
unsafe
{
baldrapi
:
:
global_type
(
self
.
0
)
}
}
pub
fn
is_constant
(
self
)
-
>
bool
{
unsafe
{
baldrapi
:
:
global_isConstant
(
self
.
0
)
}
}
pub
fn
is_indirect
(
self
)
-
>
bool
{
unsafe
{
baldrapi
:
:
global_isIndirect
(
self
.
0
)
}
}
pub
fn
emit_constant
(
self
pos
:
&
mut
FuncCursor
)
-
>
ir
:
:
Value
{
unsafe
{
let
v
=
baldrapi
:
:
global_constantValue
(
self
.
0
)
;
match
v
.
t
{
TypeCode
:
:
I32
=
>
pos
.
ins
(
)
.
iconst
(
ir
:
:
types
:
:
I32
v
.
u
.
i32
as
i64
)
TypeCode
:
:
I64
=
>
pos
.
ins
(
)
.
iconst
(
ir
:
:
types
:
:
I64
v
.
u
.
i64
)
TypeCode
:
:
F32
=
>
pos
.
ins
(
)
.
f32const
(
Ieee32
:
:
with_bits
(
v
.
u
.
i32
as
u32
)
)
TypeCode
:
:
F64
=
>
pos
.
ins
(
)
.
f64const
(
Ieee64
:
:
with_bits
(
v
.
u
.
i64
as
u64
)
)
_
=
>
panic
!
(
"
unexpected
type
"
)
}
}
}
pub
fn
tls_offset
(
self
)
-
>
usize
{
unsafe
{
baldrapi
:
:
global_tlsOffset
(
self
.
0
)
}
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
TableDesc
(
*
const
baldrapi
:
:
TableDesc
)
;
impl
TableDesc
{
pub
fn
tls_offset
(
self
)
-
>
usize
{
unsafe
{
baldrapi
:
:
table_tlsOffset
(
self
.
0
)
}
}
pub
fn
is_external
(
self
)
-
>
bool
{
unsafe
{
baldrapi
:
:
table_isExternal
(
self
.
0
)
}
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
FuncTypeWithId
(
*
const
baldrapi
:
:
FuncTypeWithId
)
;
impl
FuncTypeWithId
{
pub
fn
args
<
'
a
>
(
self
)
-
>
&
'
a
[
ValType
]
{
unsafe
{
let
num_args
=
baldrapi
:
:
funcType_numArgs
(
self
.
0
)
;
if
num_args
=
=
0
{
&
[
]
}
else
{
slice
:
:
from_raw_parts
(
baldrapi
:
:
funcType_args
(
self
.
0
)
num_args
)
}
}
}
pub
fn
ret_type
(
self
)
-
>
TypeCode
{
unsafe
{
baldrapi
:
:
funcType_retType
(
self
.
0
)
}
}
pub
fn
id_kind
(
self
)
-
>
FuncTypeIdDescKind
{
unsafe
{
baldrapi
:
:
funcType_idKind
(
self
.
0
)
}
}
pub
fn
id_immediate
(
self
)
-
>
usize
{
unsafe
{
baldrapi
:
:
funcType_idImmediate
(
self
.
0
)
}
}
pub
fn
id_tls_offset
(
self
)
-
>
usize
{
unsafe
{
baldrapi
:
:
funcType_idTlsOffset
(
self
.
0
)
}
}
}
pub
struct
ModuleEnvironment
<
'
a
>
{
env
:
&
'
a
CraneliftModuleEnvironment
}
impl
<
'
a
>
ModuleEnvironment
<
'
a
>
{
pub
fn
new
(
env
:
&
'
a
CraneliftModuleEnvironment
)
-
>
Self
{
Self
{
env
}
}
pub
fn
function_signature
(
&
self
func_index
:
FuncIndex
)
-
>
FuncTypeWithId
{
FuncTypeWithId
(
unsafe
{
baldrapi
:
:
env_function_signature
(
self
.
env
func_index
.
index
(
)
)
}
)
}
pub
fn
func_import_tls_offset
(
&
self
func_index
:
FuncIndex
)
-
>
usize
{
unsafe
{
baldrapi
:
:
env_func_import_tls_offset
(
self
.
env
func_index
.
index
(
)
)
}
}
pub
fn
func_is_import
(
&
self
func_index
:
FuncIndex
)
-
>
bool
{
unsafe
{
baldrapi
:
:
env_func_is_import
(
self
.
env
func_index
.
index
(
)
)
}
}
pub
fn
signature
(
&
self
sig_index
:
SignatureIndex
)
-
>
FuncTypeWithId
{
FuncTypeWithId
(
unsafe
{
baldrapi
:
:
env_signature
(
self
.
env
sig_index
.
index
(
)
)
}
)
}
pub
fn
table
(
&
self
table_index
:
TableIndex
)
-
>
TableDesc
{
TableDesc
(
unsafe
{
baldrapi
:
:
env_table
(
self
.
env
table_index
.
index
(
)
)
}
)
}
pub
fn
global
(
&
self
global_index
:
GlobalIndex
)
-
>
GlobalDesc
{
GlobalDesc
(
unsafe
{
baldrapi
:
:
env_global
(
self
.
env
global_index
.
index
(
)
)
}
)
}
pub
fn
min_memory_length
(
&
self
)
-
>
i64
{
self
.
env
.
min_memory_length
as
i64
}
}
