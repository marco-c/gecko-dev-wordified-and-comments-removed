use
std
:
:
error
;
use
std
:
:
fmt
;
use
cranelift_wasm
:
:
WasmError
;
type
DashError
=
Box
<
error
:
:
Error
>
;
pub
type
DashResult
<
T
>
=
Result
<
T
DashError
>
;
#
[
derive
(
Debug
)
]
pub
struct
BasicError
{
msg
:
String
}
impl
BasicError
{
pub
fn
new
(
msg
:
String
)
-
>
Self
{
Self
{
msg
}
}
}
impl
fmt
:
:
Display
for
BasicError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
BaldrDash
error
:
{
}
"
self
.
msg
)
}
}
impl
error
:
:
Error
for
BasicError
{
fn
description
(
&
self
)
-
>
&
str
{
&
self
.
msg
}
}
impl
Into
<
WasmError
>
for
BasicError
{
fn
into
(
self
)
-
>
WasmError
{
WasmError
:
:
User
(
self
.
msg
)
}
}
