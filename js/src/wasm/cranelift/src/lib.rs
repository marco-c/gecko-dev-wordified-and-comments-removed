extern
crate
cranelift_codegen
;
extern
crate
cranelift_wasm
;
#
[
macro_use
]
extern
crate
target_lexicon
;
#
[
macro_use
]
extern
crate
log
;
extern
crate
env_logger
;
mod
baldrapi
;
mod
baldrdash
;
mod
compile
;
mod
cpu
;
mod
utils
;
mod
wasm2clif
;
use
baldrdash
:
:
{
CompiledFunc
FuncCompileInput
ModuleEnvironment
StaticEnvironment
}
;
use
compile
:
:
BatchCompiler
;
use
std
:
:
ptr
;
#
[
no_mangle
]
pub
extern
"
C
"
fn
cranelift_initialize
(
)
{
let
filter
=
log
:
:
max_level
(
)
;
match
env_logger
:
:
try_init
(
)
{
Ok
(
_
)
=
>
{
}
Err
(
_
)
=
>
{
log
:
:
set_max_level
(
filter
)
;
}
}
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
cranelift_compiler_create
<
'
a
'
b
>
(
static_env
:
*
const
StaticEnvironment
env
:
*
const
baldrapi
:
:
CraneliftModuleEnvironment
)
-
>
*
mut
BatchCompiler
<
'
a
'
b
>
{
let
env
=
env
.
as_ref
(
)
.
unwrap
(
)
;
let
static_env
=
static_env
.
as_ref
(
)
.
unwrap
(
)
;
match
BatchCompiler
:
:
new
(
static_env
ModuleEnvironment
:
:
new
(
env
)
)
{
Ok
(
compiler
)
=
>
Box
:
:
into_raw
(
Box
:
:
new
(
compiler
)
)
Err
(
err
)
=
>
{
error
!
(
"
When
constructing
the
batch
compiler
:
{
}
"
err
)
;
ptr
:
:
null_mut
(
)
}
}
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
cranelift_compiler_destroy
(
compiler
:
*
mut
BatchCompiler
)
{
assert
!
(
!
compiler
.
is_null
(
)
"
NULL
pointer
passed
to
cranelift_compiler_destroy
"
)
;
let
_box
=
Box
:
:
from_raw
(
compiler
)
;
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
cranelift_compile_function
(
compiler
:
*
mut
BatchCompiler
data
:
*
const
FuncCompileInput
result
:
*
mut
CompiledFunc
)
-
>
bool
{
let
compiler
=
compiler
.
as_mut
(
)
.
unwrap
(
)
;
let
data
=
data
.
as_ref
(
)
.
unwrap
(
)
;
if
let
Err
(
e
)
=
compiler
.
translate_wasm
(
data
)
{
error
!
(
"
Wasm
translation
error
:
{
}
\
n
{
}
"
e
compiler
)
;
return
false
;
}
;
if
let
Err
(
e
)
=
compiler
.
compile
(
)
{
error
!
(
"
Cranelift
compilation
error
:
{
}
\
n
{
}
"
e
compiler
)
;
return
false
;
}
;
let
result
=
result
.
as_mut
(
)
.
unwrap
(
)
;
result
.
reset
(
&
compiler
.
current_func
)
;
true
}
