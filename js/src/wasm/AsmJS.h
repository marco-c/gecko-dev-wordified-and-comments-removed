#
ifndef
wasm_AsmJS_h
#
define
wasm_AsmJS_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
CallArgs
.
h
"
struct
JSContext
;
class
JSFunction
;
namespace
JS
{
class
Value
;
template
<
typename
T
>
class
Handle
;
}
namespace
js
{
namespace
frontend
{
class
ParseContext
;
class
ParseNode
;
template
<
class
ParseHandler
typename
CharT
>
class
Parser
;
class
FullParseHandler
;
}
template
<
typename
Unit
>
using
AsmJSParser
=
frontend
:
:
Parser
<
frontend
:
:
FullParseHandler
Unit
>
;
extern
MOZ_MUST_USE
bool
CompileAsmJS
(
JSContext
*
cx
AsmJSParser
<
mozilla
:
:
Utf8Unit
>
&
parser
frontend
:
:
ParseNode
*
stmtList
bool
*
validated
)
;
extern
MOZ_MUST_USE
bool
CompileAsmJS
(
JSContext
*
cx
AsmJSParser
<
char16_t
>
&
parser
frontend
:
:
ParseNode
*
stmtList
bool
*
validated
)
;
extern
bool
IsAsmJSModuleNative
(
JSNative
native
)
;
extern
bool
IsAsmJSModule
(
JSFunction
*
fun
)
;
extern
bool
IsAsmJSFunction
(
JSFunction
*
fun
)
;
extern
bool
IsAsmJSStrictModeModuleOrFunction
(
JSFunction
*
fun
)
;
extern
bool
InstantiateAsmJS
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSCompilationAvailable
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSModule
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSFunction
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
JSString
*
AsmJSFunctionToString
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
fun
)
;
extern
JSString
*
AsmJSModuleToString
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
fun
bool
isToSource
)
;
extern
bool
IsValidAsmJSHeapLength
(
uint32_t
length
)
;
}
#
endif
