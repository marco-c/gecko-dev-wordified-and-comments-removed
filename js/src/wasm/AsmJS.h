#
ifndef
wasm_AsmJS_h
#
define
wasm_AsmJS_h
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
wasm
/
WasmShareable
.
h
"
struct
JS_PUBLIC_API
JSContext
;
class
JS_PUBLIC_API
JSFunction
;
namespace
JS
{
class
JS_PUBLIC_API
Value
;
template
<
typename
T
>
class
Handle
;
}
namespace
js
{
class
FrontendContext
;
class
ScriptSource
;
namespace
frontend
{
class
ParserAtomsTable
;
class
ParseContext
;
class
ParseNode
;
template
<
class
ParseHandler
typename
CharT
>
class
Parser
;
class
FullParseHandler
;
}
template
<
typename
Unit
>
using
AsmJSParser
=
frontend
:
:
Parser
<
frontend
:
:
FullParseHandler
Unit
>
;
[
[
nodiscard
]
]
extern
bool
CompileAsmJS
(
FrontendContext
*
fc
frontend
:
:
ParserAtomsTable
&
parserAtoms
AsmJSParser
<
mozilla
:
:
Utf8Unit
>
&
parser
frontend
:
:
ParseNode
*
stmtList
bool
*
validated
)
;
[
[
nodiscard
]
]
extern
bool
CompileAsmJS
(
FrontendContext
*
fc
frontend
:
:
ParserAtomsTable
&
parserAtoms
AsmJSParser
<
char16_t
>
&
parser
frontend
:
:
ParseNode
*
stmtList
bool
*
validated
)
;
extern
bool
IsAsmJSModuleNative
(
JSNative
native
)
;
extern
bool
IsAsmJSModule
(
JSFunction
*
fun
)
;
extern
bool
IsAsmJSFunction
(
JSFunction
*
fun
)
;
extern
bool
IsAsmJSStrictModeModuleOrFunction
(
JSFunction
*
fun
)
;
extern
bool
InstantiateAsmJS
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSCompilationAvailable
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSCompilationAvailable
(
JSContext
*
cx
)
;
extern
bool
IsAsmJSModule
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
bool
IsAsmJSFunction
(
JSContext
*
cx
unsigned
argc
JS
:
:
Value
*
vp
)
;
extern
JSString
*
AsmJSFunctionToString
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
fun
)
;
extern
JSString
*
AsmJSModuleToString
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
fun
bool
isToSource
)
;
extern
bool
IsValidAsmJSHeapLength
(
size_t
length
)
;
struct
AsmJSMetadata
;
struct
Metadata
:
public
wasm
:
:
ShareableBase
<
Metadata
>
{
Metadata
(
)
{
}
;
virtual
~
Metadata
(
)
=
default
;
virtual
const
AsmJSMetadata
&
asAsmJS
(
)
const
=
0
;
virtual
bool
mutedErrors
(
)
const
=
0
;
virtual
const
char16_t
*
displayURL
(
)
const
=
0
;
virtual
ScriptSource
*
maybeScriptSource
(
)
const
=
0
;
virtual
bool
getFuncNameForAsmJS
(
uint32_t
funcIndex
wasm
:
:
UTF8Bytes
*
name
)
const
=
0
;
virtual
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
=
0
;
}
;
using
MutableMetadata
=
RefPtr
<
Metadata
>
;
using
SharedMetadata
=
RefPtr
<
const
Metadata
>
;
}
#
endif
