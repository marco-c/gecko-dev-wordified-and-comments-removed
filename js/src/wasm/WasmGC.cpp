#
include
"
wasm
/
WasmGC
.
h
"
namespace
js
{
namespace
wasm
{
void
EmitWasmPreBarrierGuard
(
MacroAssembler
&
masm
Register
tls
Register
scratch
Register
valueAddr
Label
*
skipBarrier
)
{
masm
.
loadPtr
(
Address
(
tls
offsetof
(
TlsData
addressOfNeedsIncrementalBarrier
)
)
scratch
)
;
masm
.
branchTest32
(
Assembler
:
:
Zero
Address
(
scratch
0
)
Imm32
(
0x1
)
skipBarrier
)
;
masm
.
loadPtr
(
Address
(
valueAddr
0
)
scratch
)
;
masm
.
branchTestPtr
(
Assembler
:
:
Zero
scratch
scratch
skipBarrier
)
;
}
void
EmitWasmPreBarrierCall
(
MacroAssembler
&
masm
Register
tls
Register
scratch
Register
valueAddr
)
{
MOZ_ASSERT
(
valueAddr
=
=
PreBarrierReg
)
;
masm
.
loadPtr
(
Address
(
tls
offsetof
(
TlsData
instance
)
)
scratch
)
;
masm
.
loadPtr
(
Address
(
scratch
Instance
:
:
offsetOfPreBarrierCode
(
)
)
scratch
)
;
#
if
defined
(
DEBUG
)
&
&
defined
(
JS_CODEGEN_ARM64
)
Label
ok
;
masm
.
Cmp
(
sp
vixl
:
:
Operand
(
x28
)
)
;
masm
.
B
(
&
ok
Assembler
:
:
Equal
)
;
masm
.
breakpoint
(
)
;
masm
.
bind
(
&
ok
)
;
#
endif
masm
.
call
(
scratch
)
;
}
void
EmitWasmPostBarrierGuard
(
MacroAssembler
&
masm
const
Maybe
<
Register
>
&
object
Register
otherScratch
Register
setValue
Label
*
skipBarrier
)
{
masm
.
branchTestPtr
(
Assembler
:
:
Zero
setValue
setValue
skipBarrier
)
;
if
(
object
)
{
masm
.
branchPtrInNurseryChunk
(
Assembler
:
:
Equal
*
object
otherScratch
skipBarrier
)
;
}
masm
.
branchPtrInNurseryChunk
(
Assembler
:
:
NotEqual
setValue
otherScratch
skipBarrier
)
;
}
}
}
