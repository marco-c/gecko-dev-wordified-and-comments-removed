#
include
"
wasm
/
WasmProcess
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
using
namespace
js
;
using
namespace
wasm
;
using
mozilla
:
:
BinarySearchIf
;
typedef
Vector
<
const
CodeSegment
*
0
SystemAllocPolicy
>
CodeSegmentVector
;
Atomic
<
bool
>
wasm
:
:
CodeExists
(
false
)
;
class
ProcessCodeSegmentMap
{
Mutex
mutatorsMutex_
;
CodeSegmentVector
segments1_
;
CodeSegmentVector
segments2_
;
Atomic
<
size_t
>
observers_
;
CodeSegmentVector
*
mutableCodeSegments_
;
Atomic
<
const
CodeSegmentVector
*
>
readonlyCodeSegments_
;
struct
CodeSegmentPC
{
const
void
*
pc
;
explicit
CodeSegmentPC
(
const
void
*
pc
)
:
pc
(
pc
)
{
}
int
operator
(
)
(
const
CodeSegment
*
cs
)
const
{
if
(
cs
-
>
containsCodePC
(
pc
)
)
return
0
;
if
(
pc
<
cs
-
>
base
(
)
)
return
-
1
;
return
1
;
}
}
;
void
swapAndWait
(
)
{
mutableCodeSegments_
=
const_cast
<
CodeSegmentVector
*
>
(
readonlyCodeSegments_
.
exchange
(
mutableCodeSegments_
)
)
;
while
(
observers_
)
;
}
public
:
ProcessCodeSegmentMap
(
)
:
mutatorsMutex_
(
mutexid
:
:
WasmCodeSegmentMap
)
observers_
(
0
)
mutableCodeSegments_
(
&
segments1_
)
readonlyCodeSegments_
(
&
segments2_
)
{
}
~
ProcessCodeSegmentMap
(
)
{
MOZ_ASSERT
(
segments1_
.
empty
(
)
)
;
MOZ_ASSERT
(
segments2_
.
empty
(
)
)
;
}
bool
insert
(
const
CodeSegment
*
cs
)
{
LockGuard
<
Mutex
>
lock
(
mutatorsMutex_
)
;
size_t
index
;
MOZ_ALWAYS_FALSE
(
BinarySearchIf
(
*
mutableCodeSegments_
0
mutableCodeSegments_
-
>
length
(
)
CodeSegmentPC
(
cs
-
>
base
(
)
)
&
index
)
)
;
if
(
!
mutableCodeSegments_
-
>
insert
(
mutableCodeSegments_
-
>
begin
(
)
+
index
cs
)
)
return
false
;
CodeExists
=
true
;
swapAndWait
(
)
;
#
ifdef
DEBUG
size_t
otherIndex
;
MOZ_ALWAYS_FALSE
(
BinarySearchIf
(
*
mutableCodeSegments_
0
mutableCodeSegments_
-
>
length
(
)
CodeSegmentPC
(
cs
-
>
base
(
)
)
&
otherIndex
)
)
;
MOZ_ASSERT
(
index
=
=
otherIndex
)
;
#
endif
AutoEnterOOMUnsafeRegion
oom
;
if
(
!
mutableCodeSegments_
-
>
insert
(
mutableCodeSegments_
-
>
begin
(
)
+
index
cs
)
)
oom
.
crash
(
"
when
inserting
a
CodeSegment
in
the
process
-
wide
map
"
)
;
return
true
;
}
void
remove
(
const
CodeSegment
*
cs
)
{
LockGuard
<
Mutex
>
lock
(
mutatorsMutex_
)
;
size_t
index
;
MOZ_ALWAYS_TRUE
(
BinarySearchIf
(
*
mutableCodeSegments_
0
mutableCodeSegments_
-
>
length
(
)
CodeSegmentPC
(
cs
-
>
base
(
)
)
&
index
)
)
;
mutableCodeSegments_
-
>
erase
(
mutableCodeSegments_
-
>
begin
(
)
+
index
)
;
if
(
!
mutableCodeSegments_
-
>
length
(
)
)
CodeExists
=
false
;
swapAndWait
(
)
;
#
ifdef
DEBUG
size_t
otherIndex
;
MOZ_ALWAYS_TRUE
(
BinarySearchIf
(
*
mutableCodeSegments_
0
mutableCodeSegments_
-
>
length
(
)
CodeSegmentPC
(
cs
-
>
base
(
)
)
&
otherIndex
)
)
;
MOZ_ASSERT
(
index
=
=
otherIndex
)
;
#
endif
mutableCodeSegments_
-
>
erase
(
mutableCodeSegments_
-
>
begin
(
)
+
index
)
;
}
const
CodeSegment
*
lookup
(
const
void
*
pc
)
{
auto
decObserver
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
observers_
-
-
;
}
)
;
observers_
+
+
;
const
CodeSegmentVector
*
readonly
=
readonlyCodeSegments_
;
size_t
index
;
if
(
!
BinarySearchIf
(
*
readonly
0
readonly
-
>
length
(
)
CodeSegmentPC
(
pc
)
&
index
)
)
return
nullptr
;
return
(
*
readonly
)
[
index
]
;
}
}
;
static
ProcessCodeSegmentMap
processCodeSegmentMap
;
bool
wasm
:
:
RegisterCodeSegment
(
const
CodeSegment
*
cs
)
{
return
processCodeSegmentMap
.
insert
(
cs
)
;
}
void
wasm
:
:
UnregisterCodeSegment
(
const
CodeSegment
*
cs
)
{
processCodeSegmentMap
.
remove
(
cs
)
;
}
const
CodeSegment
*
wasm
:
:
LookupCodeSegment
(
const
void
*
pc
)
{
return
processCodeSegmentMap
.
lookup
(
pc
)
;
}
const
Code
*
wasm
:
:
LookupCode
(
const
void
*
pc
)
{
const
CodeSegment
*
found
=
LookupCodeSegment
(
pc
)
;
return
found
?
found
-
>
code
(
)
:
nullptr
;
}
