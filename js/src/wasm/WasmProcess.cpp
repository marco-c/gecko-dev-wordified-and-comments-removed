#
include
"
wasm
/
WasmProcess
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
gc
/
Memory
.
h
"
#
include
"
threading
/
ExclusiveData
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
wasm
/
WasmBuiltinModule
.
h
"
#
include
"
wasm
/
WasmBuiltins
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmInstance
.
h
"
#
include
"
wasm
/
WasmModuleTypes
.
h
"
#
include
"
wasm
/
WasmStaticTypeDefs
.
h
"
using
namespace
js
;
using
namespace
wasm
;
using
mozilla
:
:
BinarySearchIf
;
Atomic
<
bool
>
wasm
:
:
CodeExists
(
false
)
;
static
Atomic
<
ThreadSafeCodeBlockMap
*
>
sThreadSafeCodeBlockMap
(
nullptr
)
;
bool
wasm
:
:
RegisterCodeBlock
(
const
CodeBlock
*
cs
)
{
if
(
cs
-
>
length
(
)
=
=
0
)
{
return
true
;
}
ThreadSafeCodeBlockMap
*
map
=
sThreadSafeCodeBlockMap
;
MOZ_RELEASE_ASSERT
(
map
)
;
bool
result
=
map
-
>
insert
(
cs
)
;
if
(
result
)
{
CodeExists
=
true
;
}
return
result
;
}
void
wasm
:
:
UnregisterCodeBlock
(
const
CodeBlock
*
cs
)
{
if
(
cs
-
>
length
(
)
=
=
0
)
{
return
;
}
ThreadSafeCodeBlockMap
*
map
=
sThreadSafeCodeBlockMap
;
MOZ_RELEASE_ASSERT
(
map
)
;
size_t
newCount
=
map
-
>
remove
(
cs
)
;
if
(
newCount
=
=
0
)
{
CodeExists
=
false
;
}
}
const
CodeBlock
*
wasm
:
:
LookupCodeBlock
(
const
void
*
pc
const
CodeRange
*
*
codeRange
)
{
ThreadSafeCodeBlockMap
*
map
=
sThreadSafeCodeBlockMap
;
if
(
!
map
)
{
return
nullptr
;
}
return
map
-
>
lookup
(
pc
codeRange
)
;
}
const
Code
*
wasm
:
:
LookupCode
(
const
void
*
pc
const
CodeRange
*
*
codeRange
)
{
const
CodeBlock
*
found
=
LookupCodeBlock
(
pc
codeRange
)
;
MOZ_ASSERT_IF
(
!
found
&
&
codeRange
!
*
codeRange
)
;
return
found
?
found
-
>
code
:
nullptr
;
}
bool
wasm
:
:
InCompiledCode
(
void
*
pc
)
{
if
(
LookupCodeBlock
(
pc
)
)
{
return
true
;
}
const
CodeRange
*
codeRange
;
const
uint8_t
*
codeBase
;
return
LookupBuiltinThunk
(
pc
&
codeRange
&
codeBase
)
;
}
class
ReadLockFlag
{
private
:
bool
enabled_
;
bool
read_
;
public
:
ReadLockFlag
(
)
:
enabled_
(
false
)
read_
(
false
)
{
}
bool
get
(
)
{
read_
=
true
;
return
enabled_
;
}
bool
set
(
bool
enabled
)
{
if
(
read_
)
{
return
false
;
}
enabled_
=
enabled
;
return
true
;
}
}
;
#
ifdef
WASM_SUPPORTS_HUGE_MEMORY
static
const
size_t
MinAddressBitsForHugeMemory
=
38
;
static
const
size_t
MinVirtualMemoryLimitForHugeMemory
=
size_t
(
1
)
<
<
MinAddressBitsForHugeMemory
;
#
endif
ExclusiveData
<
ReadLockFlag
>
sHugeMemoryEnabled32
(
mutexid
:
:
WasmHugeMemoryEnabled
)
;
ExclusiveData
<
ReadLockFlag
>
sHugeMemoryEnabled64
(
mutexid
:
:
WasmHugeMemoryEnabled
)
;
static
MOZ_NEVER_INLINE
bool
IsHugeMemoryEnabledHelper32
(
)
{
auto
state
=
sHugeMemoryEnabled32
.
lock
(
)
;
return
state
-
>
get
(
)
;
}
static
MOZ_NEVER_INLINE
bool
IsHugeMemoryEnabledHelper64
(
)
{
auto
state
=
sHugeMemoryEnabled64
.
lock
(
)
;
return
state
-
>
get
(
)
;
}
bool
wasm
:
:
IsHugeMemoryEnabled
(
wasm
:
:
IndexType
t
)
{
if
(
t
=
=
IndexType
:
:
I32
)
{
static
bool
enabled32
=
IsHugeMemoryEnabledHelper32
(
)
;
return
enabled32
;
}
static
bool
enabled64
=
IsHugeMemoryEnabledHelper64
(
)
;
return
enabled64
;
}
bool
wasm
:
:
DisableHugeMemory
(
)
{
bool
ok
=
true
;
{
auto
state
=
sHugeMemoryEnabled64
.
lock
(
)
;
ok
=
ok
&
&
state
-
>
set
(
false
)
;
}
{
auto
state
=
sHugeMemoryEnabled32
.
lock
(
)
;
ok
=
ok
&
&
state
-
>
set
(
false
)
;
}
return
ok
;
}
void
ConfigureHugeMemory
(
)
{
#
ifdef
WASM_SUPPORTS_HUGE_MEMORY
bool
ok
=
true
;
{
auto
state
=
sHugeMemoryEnabled64
.
lock
(
)
;
ok
=
ok
&
&
state
-
>
set
(
false
)
;
}
if
(
gc
:
:
SystemAddressBits
(
)
<
MinAddressBitsForHugeMemory
)
{
return
;
}
if
(
gc
:
:
VirtualMemoryLimit
(
)
!
=
size_t
(
-
1
)
&
&
gc
:
:
VirtualMemoryLimit
(
)
<
MinVirtualMemoryLimitForHugeMemory
)
{
return
;
}
{
auto
state
=
sHugeMemoryEnabled32
.
lock
(
)
;
ok
=
ok
&
&
state
-
>
set
(
true
)
;
}
MOZ_RELEASE_ASSERT
(
ok
)
;
#
endif
}
const
TagType
*
wasm
:
:
sWrappedJSValueTagType
=
nullptr
;
static
bool
InitTagForJSValue
(
)
{
MutableTagType
type
=
js_new
<
TagType
>
(
)
;
if
(
!
type
)
{
return
false
;
}
ValTypeVector
args
;
if
(
!
args
.
append
(
ValType
(
RefType
:
:
extern_
(
)
)
)
)
{
return
false
;
}
if
(
!
type
-
>
initialize
(
std
:
:
move
(
args
)
)
)
{
return
false
;
}
MOZ_ASSERT
(
WrappedJSValueTagType_ValueOffset
=
=
type
-
>
argOffsets
(
)
[
0
]
)
;
type
.
forget
(
&
sWrappedJSValueTagType
)
;
return
true
;
}
bool
wasm
:
:
Init
(
)
{
MOZ_RELEASE_ASSERT
(
!
sThreadSafeCodeBlockMap
)
;
uintptr_t
pageSize
=
gc
:
:
SystemPageSize
(
)
;
MOZ_RELEASE_ASSERT
(
wasm
:
:
NullPtrGuardSize
<
=
pageSize
)
;
MOZ_RELEASE_ASSERT
(
intptr_t
(
nullptr
)
=
=
AnyRef
:
:
NullRefValue
)
;
ConfigureHugeMemory
(
)
;
AutoEnterOOMUnsafeRegion
oomUnsafe
;
ThreadSafeCodeBlockMap
*
map
=
js_new
<
ThreadSafeCodeBlockMap
>
(
)
;
if
(
!
map
)
{
oomUnsafe
.
crash
(
"
js
:
:
wasm
:
:
Init
"
)
;
}
if
(
!
StaticTypeDefs
:
:
init
(
)
)
{
oomUnsafe
.
crash
(
"
js
:
:
wasm
:
:
Init
"
)
;
}
if
(
!
BuiltinModuleFuncs
:
:
init
(
)
)
{
oomUnsafe
.
crash
(
"
js
:
:
wasm
:
:
Init
"
)
;
}
sThreadSafeCodeBlockMap
=
map
;
if
(
!
InitTagForJSValue
(
)
)
{
oomUnsafe
.
crash
(
"
js
:
:
wasm
:
:
Init
"
)
;
}
return
true
;
}
void
wasm
:
:
ShutDown
(
)
{
if
(
JSRuntime
:
:
hasLiveRuntimes
(
)
)
{
return
;
}
BuiltinModuleFuncs
:
:
destroy
(
)
;
StaticTypeDefs
:
:
destroy
(
)
;
PurgeCanonicalTypes
(
)
;
if
(
sWrappedJSValueTagType
)
{
sWrappedJSValueTagType
-
>
Release
(
)
;
sWrappedJSValueTagType
=
nullptr
;
}
ThreadSafeCodeBlockMap
*
map
=
sThreadSafeCodeBlockMap
;
MOZ_RELEASE_ASSERT
(
map
)
;
sThreadSafeCodeBlockMap
=
nullptr
;
while
(
map
-
>
numActiveLookups
(
)
>
0
)
{
}
ReleaseBuiltinThunks
(
)
;
js_delete
(
map
)
;
}
