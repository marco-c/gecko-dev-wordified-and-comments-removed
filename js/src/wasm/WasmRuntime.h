#
ifndef
wasm_runtime_h
#
define
wasm_runtime_h
#
include
"
NamespaceImports
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
using
mozilla
:
:
HashGeneric
;
namespace
js
{
namespace
jit
{
class
ExecutablePool
;
}
namespace
wasm
{
struct
TypedFuncPtr
{
void
*
funcPtr
;
jit
:
:
ABIFunctionType
abiType
;
TypedFuncPtr
(
void
*
funcPtr
jit
:
:
ABIFunctionType
abiType
)
:
funcPtr
(
funcPtr
)
abiType
(
abiType
)
{
}
typedef
TypedFuncPtr
Lookup
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
return
HashGeneric
(
l
.
funcPtr
uint32_t
(
l
.
abiType
)
)
;
}
static
bool
match
(
const
TypedFuncPtr
&
lhs
const
Lookup
&
rhs
)
{
return
lhs
.
funcPtr
=
=
rhs
.
funcPtr
&
&
lhs
.
abiType
=
=
rhs
.
abiType
;
}
}
;
typedef
HashMap
<
TypedFuncPtr
void
*
TypedFuncPtr
SystemAllocPolicy
>
BuiltinThunkMap
;
struct
BuiltinThunk
{
jit
:
:
ExecutablePool
*
executablePool
;
CodeRange
codeRange
;
size_t
size
;
uint8_t
*
base
;
BuiltinThunk
(
uint8_t
*
base
size_t
size
jit
:
:
ExecutablePool
*
executablePool
CallableOffsets
offsets
)
:
executablePool
(
executablePool
)
codeRange
(
CodeRange
(
CodeRange
:
:
ImportNativeExit
offsets
)
)
size
(
size
)
base
(
base
)
{
}
~
BuiltinThunk
(
)
;
}
;
typedef
UniquePtr
<
BuiltinThunk
>
UniqueBuiltinThunk
;
typedef
Vector
<
UniqueBuiltinThunk
4
SystemAllocPolicy
>
BuiltinThunkVector
;
class
Runtime
{
BuiltinThunkMap
builtinThunkMap_
;
BuiltinThunkVector
builtinThunkVector_
;
bool
getBuiltinThunk
(
JSContext
*
cx
void
*
funcPtr
jit
:
:
ABIFunctionType
type
void
*
*
thunkPtr
)
;
public
:
bool
init
(
)
{
return
builtinThunkMap_
.
init
(
)
;
}
void
destroy
(
)
;
bool
getBuiltinThunk
(
JSContext
*
cx
void
*
funcPtr
const
Sig
&
sig
void
*
*
thunkPtr
)
;
BuiltinThunk
*
lookupBuiltin
(
void
*
pc
)
;
}
;
}
}
#
endif
