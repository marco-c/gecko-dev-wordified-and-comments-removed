#
include
"
wasm
/
WasmFrameIterator
.
h
"
#
include
"
wasm
/
WasmInstance
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
using
namespace
js
:
:
wasm
;
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
Swap
;
static
void
*
ReturnAddressFromFP
(
void
*
fp
)
{
return
reinterpret_cast
<
Frame
*
>
(
fp
)
-
>
returnAddress
;
}
static
uint8_t
*
CallerFPFromFP
(
void
*
fp
)
{
return
reinterpret_cast
<
Frame
*
>
(
fp
)
-
>
callerFP
;
}
static
DebugFrame
*
FrameToDebugFrame
(
void
*
fp
)
{
return
reinterpret_cast
<
DebugFrame
*
>
(
(
uint8_t
*
)
fp
-
DebugFrame
:
:
offsetOfFrame
(
)
)
;
}
FrameIterator
:
:
FrameIterator
(
)
:
activation_
(
nullptr
)
code_
(
nullptr
)
callsite_
(
nullptr
)
codeRange_
(
nullptr
)
fp_
(
nullptr
)
unwind_
(
Unwind
:
:
False
)
missingFrameMessage_
(
false
)
{
MOZ_ASSERT
(
done
(
)
)
;
}
FrameIterator
:
:
FrameIterator
(
WasmActivation
*
activation
Unwind
unwind
)
:
activation_
(
activation
)
code_
(
nullptr
)
callsite_
(
nullptr
)
codeRange_
(
nullptr
)
fp_
(
nullptr
)
unwind_
(
unwind
)
missingFrameMessage_
(
false
)
{
if
(
void
*
resumePC
=
activation
-
>
resumePC
(
)
)
{
code_
=
activation
-
>
compartment
(
)
-
>
wasm
.
lookupCode
(
resumePC
)
;
codeRange_
=
code_
-
>
lookupRange
(
resumePC
)
;
MOZ_ASSERT
(
codeRange_
-
>
kind
(
)
=
=
CodeRange
:
:
Function
)
;
MOZ_ASSERT
(
!
done
(
)
)
;
return
;
}
fp_
=
activation
-
>
fp
(
)
;
if
(
!
fp_
)
{
MOZ_ASSERT
(
done
(
)
)
;
return
;
}
settle
(
)
;
}
bool
FrameIterator
:
:
done
(
)
const
{
return
!
codeRange_
&
&
!
missingFrameMessage_
;
}
void
FrameIterator
:
:
operator
+
+
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
if
(
fp_
)
{
settle
(
)
;
}
else
if
(
codeRange_
)
{
codeRange_
=
nullptr
;
missingFrameMessage_
=
true
;
}
else
{
MOZ_ASSERT
(
missingFrameMessage_
)
;
missingFrameMessage_
=
false
;
}
}
void
FrameIterator
:
:
settle
(
)
{
if
(
unwind_
=
=
Unwind
:
:
True
)
activation_
-
>
unwindFP
(
fp_
)
;
void
*
returnAddress
=
ReturnAddressFromFP
(
fp_
)
;
fp_
=
CallerFPFromFP
(
fp_
)
;
if
(
!
fp_
)
{
code_
=
nullptr
;
codeRange_
=
nullptr
;
callsite_
=
nullptr
;
if
(
unwind_
=
=
Unwind
:
:
True
)
activation_
-
>
unwindFP
(
nullptr
)
;
MOZ_ASSERT
(
done
(
)
)
;
return
;
}
code_
=
activation_
-
>
compartment
(
)
-
>
wasm
.
lookupCode
(
returnAddress
)
;
MOZ_ASSERT
(
code_
)
;
codeRange_
=
code_
-
>
lookupRange
(
returnAddress
)
;
MOZ_ASSERT
(
codeRange_
-
>
kind
(
)
=
=
CodeRange
:
:
Function
)
;
callsite_
=
code_
-
>
lookupCallSite
(
returnAddress
)
;
MOZ_ASSERT
(
callsite_
)
;
MOZ_ASSERT
(
!
done
(
)
)
;
}
const
char
*
FrameIterator
:
:
filename
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
code_
-
>
metadata
(
)
.
filename
.
get
(
)
;
}
const
char16_t
*
FrameIterator
:
:
displayURL
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
code_
-
>
metadata
(
)
.
displayURL
(
)
;
}
bool
FrameIterator
:
:
mutedErrors
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
code_
-
>
metadata
(
)
.
mutedErrors
(
)
;
}
JSAtom
*
FrameIterator
:
:
functionDisplayAtom
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
JSContext
*
cx
=
activation_
-
>
cx
(
)
;
if
(
missingFrameMessage_
)
{
const
char
*
msg
=
"
asm
.
js
/
wasm
frames
may
be
missing
below
this
one
"
;
JSAtom
*
atom
=
Atomize
(
cx
msg
strlen
(
msg
)
)
;
if
(
!
atom
)
{
cx
-
>
clearPendingException
(
)
;
return
cx
-
>
names
(
)
.
empty
;
}
return
atom
;
}
MOZ_ASSERT
(
codeRange_
)
;
JSAtom
*
atom
=
code_
-
>
getFuncAtom
(
cx
codeRange_
-
>
funcIndex
(
)
)
;
if
(
!
atom
)
{
cx
-
>
clearPendingException
(
)
;
return
cx
-
>
names
(
)
.
empty
;
}
return
atom
;
}
unsigned
FrameIterator
:
:
lineOrBytecode
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
callsite_
?
callsite_
-
>
lineOrBytecode
(
)
:
(
codeRange_
?
codeRange_
-
>
funcLineOrBytecode
(
)
:
0
)
;
}
Instance
*
FrameIterator
:
:
instance
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
FrameToDebugFrame
(
fp_
)
-
>
instance
(
)
;
}
bool
FrameIterator
:
:
debugEnabled
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
&
&
code_
)
;
MOZ_ASSERT_IF
(
!
missingFrameMessage_
codeRange_
-
>
kind
(
)
=
=
CodeRange
:
:
Function
)
;
return
code_
-
>
metadata
(
)
.
debugEnabled
&
&
codeRange_
-
>
funcIndex
(
)
>
=
code_
-
>
metadata
(
)
.
funcImports
.
length
(
)
;
}
DebugFrame
*
FrameIterator
:
:
debugFrame
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
&
&
debugEnabled
(
)
)
;
return
FrameToDebugFrame
(
fp_
)
;
}
const
CallSite
*
FrameIterator
:
:
debugTrapCallsite
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
&
&
debugEnabled
(
)
)
;
MOZ_ASSERT
(
callsite_
-
>
kind
(
)
=
=
CallSite
:
:
EnterFrame
|
|
callsite_
-
>
kind
(
)
=
=
CallSite
:
:
LeaveFrame
|
|
callsite_
-
>
kind
(
)
=
=
CallSite
:
:
Breakpoint
)
;
return
callsite_
;
}
#
if
defined
(
JS_CODEGEN_X64
)
#
if
defined
(
DEBUG
)
static
const
unsigned
PushedRetAddr
=
0
;
#
endif
static
const
unsigned
PushedFP
=
16
;
static
const
unsigned
PushedTLS
=
18
;
static
const
unsigned
StoredFP
=
25
;
static
const
unsigned
RestoreFP
=
4
;
#
elif
defined
(
JS_CODEGEN_X86
)
#
if
defined
(
DEBUG
)
static
const
unsigned
PushedRetAddr
=
0
;
#
endif
static
const
unsigned
PushedFP
=
11
;
static
const
unsigned
PushedTLS
=
12
;
static
const
unsigned
StoredFP
=
15
;
static
const
unsigned
RestoreFP
=
3
;
#
elif
defined
(
JS_CODEGEN_ARM
)
static
const
unsigned
PushedRetAddr
=
4
;
static
const
unsigned
PushedFP
=
20
;
static
const
unsigned
PushedTLS
=
24
;
static
const
unsigned
StoredFP
=
28
;
static
const
unsigned
RestoreFP
=
4
;
#
elif
defined
(
JS_CODEGEN_ARM64
)
static
const
unsigned
PushedRetAddr
=
0
;
static
const
unsigned
PushedFP
=
0
;
static
const
unsigned
PushedTLS
=
0
;
static
const
unsigned
StoredFP
=
0
;
static
const
unsigned
RestoreFP
=
0
;
#
elif
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
static
const
unsigned
PushedRetAddr
=
8
;
static
const
unsigned
PushedFP
=
28
;
static
const
unsigned
PushedTLS
=
32
;
static
const
unsigned
StoredFP
=
36
;
static
const
unsigned
RestoreFP
=
4
;
#
elif
defined
(
JS_CODEGEN_NONE
)
#
if
defined
(
DEBUG
)
static
const
unsigned
PushedRetAddr
=
0
;
#
endif
static
const
unsigned
PushedFP
=
1
;
static
const
unsigned
PushedTLS
=
1
;
static
const
unsigned
StoredFP
=
1
;
static
const
unsigned
RestoreFP
=
0
;
#
else
#
error
"
Unknown
architecture
!
"
#
endif
static
void
PushRetAddr
(
MacroAssembler
&
masm
)
{
#
if
defined
(
JS_CODEGEN_ARM
)
masm
.
push
(
lr
)
;
#
elif
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
masm
.
push
(
ra
)
;
#
else
#
endif
}
static
void
GenerateCallablePrologue
(
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
uint32_t
*
entry
)
{
Register
scratch
=
ABINonArgReg0
;
{
#
if
defined
(
JS_CODEGEN_ARM
)
AutoForbidPools
afp
(
&
masm
8
)
;
#
endif
*
entry
=
masm
.
currentOffset
(
)
;
PushRetAddr
(
masm
)
;
MOZ_ASSERT_IF
(
!
masm
.
oom
(
)
PushedRetAddr
=
=
masm
.
currentOffset
(
)
-
*
entry
)
;
masm
.
loadWasmActivationFromTls
(
scratch
)
;
masm
.
push
(
Address
(
scratch
WasmActivation
:
:
offsetOfFP
(
)
)
)
;
MOZ_ASSERT_IF
(
!
masm
.
oom
(
)
PushedFP
=
=
masm
.
currentOffset
(
)
-
*
entry
)
;
masm
.
push
(
WasmTlsReg
)
;
MOZ_ASSERT_IF
(
!
masm
.
oom
(
)
PushedTLS
=
=
masm
.
currentOffset
(
)
-
*
entry
)
;
masm
.
storePtr
(
masm
.
getStackPointer
(
)
Address
(
scratch
WasmActivation
:
:
offsetOfFP
(
)
)
)
;
MOZ_ASSERT_IF
(
!
masm
.
oom
(
)
StoredFP
=
=
masm
.
currentOffset
(
)
-
*
entry
)
;
}
if
(
reason
!
=
ExitReason
:
:
None
)
masm
.
store32
(
Imm32
(
int32_t
(
reason
)
)
Address
(
scratch
WasmActivation
:
:
offsetOfExitReason
(
)
)
)
;
if
(
framePushed
)
masm
.
subFromStackPtr
(
Imm32
(
framePushed
)
)
;
}
static
void
GenerateCallableEpilogue
(
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
uint32_t
*
ret
)
{
Register
scratch
=
ABINonArgReturnReg0
;
Register
scratch2
=
ABINonArgReturnReg1
;
if
(
framePushed
)
masm
.
addToStackPtr
(
Imm32
(
framePushed
)
)
;
masm
.
loadWasmActivationFromTls
(
scratch
)
;
if
(
reason
!
=
ExitReason
:
:
None
)
{
masm
.
store32
(
Imm32
(
int32_t
(
ExitReason
:
:
None
)
)
Address
(
scratch
WasmActivation
:
:
offsetOfExitReason
(
)
)
)
;
}
#
if
defined
(
JS_CODEGEN_ARM
)
AutoForbidPools
afp
(
&
masm
5
)
;
#
endif
masm
.
loadPtr
(
Address
(
masm
.
getStackPointer
(
)
offsetof
(
Frame
callerFP
)
)
scratch2
)
;
masm
.
storePtr
(
scratch2
Address
(
scratch
WasmActivation
:
:
offsetOfFP
(
)
)
)
;
DebugOnly
<
uint32_t
>
afterRestoreFP
=
masm
.
currentOffset
(
)
;
masm
.
addToStackPtr
(
Imm32
(
2
*
sizeof
(
void
*
)
)
)
;
*
ret
=
masm
.
currentOffset
(
)
;
masm
.
ret
(
)
;
MOZ_ASSERT_IF
(
!
masm
.
oom
(
)
RestoreFP
=
=
*
ret
-
afterRestoreFP
)
;
}
void
wasm
:
:
GenerateFunctionPrologue
(
MacroAssembler
&
masm
unsigned
framePushed
const
SigIdDesc
&
sigId
FuncOffsets
*
offsets
)
{
#
if
defined
(
JS_CODEGEN_ARM
)
masm
.
flushBuffer
(
)
;
#
endif
masm
.
haltingAlign
(
CodeAlignment
)
;
offsets
-
>
begin
=
masm
.
currentOffset
(
)
;
TrapOffset
trapOffset
(
0
)
;
TrapDesc
trap
(
trapOffset
Trap
:
:
IndirectCallBadSig
masm
.
framePushed
(
)
)
;
switch
(
sigId
.
kind
(
)
)
{
case
SigIdDesc
:
:
Kind
:
:
Global
:
{
Register
scratch
=
WasmTableCallScratchReg
;
masm
.
loadWasmGlobalPtr
(
sigId
.
globalDataOffset
(
)
scratch
)
;
masm
.
branchPtr
(
Assembler
:
:
Condition
:
:
NotEqual
WasmTableCallSigReg
scratch
trap
)
;
break
;
}
case
SigIdDesc
:
:
Kind
:
:
Immediate
:
masm
.
branch32
(
Assembler
:
:
Condition
:
:
NotEqual
WasmTableCallSigReg
Imm32
(
sigId
.
immediate
(
)
)
trap
)
;
break
;
case
SigIdDesc
:
:
Kind
:
:
None
:
break
;
}
masm
.
nopAlign
(
CodeAlignment
)
;
GenerateCallablePrologue
(
masm
framePushed
ExitReason
:
:
None
&
offsets
-
>
normalEntry
)
;
masm
.
setFramePushed
(
framePushed
)
;
}
void
wasm
:
:
GenerateFunctionEpilogue
(
MacroAssembler
&
masm
unsigned
framePushed
FuncOffsets
*
offsets
)
{
MOZ_ASSERT
(
masm
.
framePushed
(
)
=
=
framePushed
)
;
GenerateCallableEpilogue
(
masm
framePushed
ExitReason
:
:
None
&
offsets
-
>
ret
)
;
masm
.
setFramePushed
(
0
)
;
}
void
wasm
:
:
GenerateExitPrologue
(
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
CallableOffsets
*
offsets
)
{
masm
.
haltingAlign
(
CodeAlignment
)
;
GenerateCallablePrologue
(
masm
framePushed
reason
&
offsets
-
>
begin
)
;
masm
.
setFramePushed
(
framePushed
)
;
}
void
wasm
:
:
GenerateExitEpilogue
(
MacroAssembler
&
masm
unsigned
framePushed
ExitReason
reason
CallableOffsets
*
offsets
)
{
MOZ_ASSERT
(
masm
.
framePushed
(
)
=
=
framePushed
)
;
GenerateCallableEpilogue
(
masm
framePushed
reason
&
offsets
-
>
ret
)
;
masm
.
setFramePushed
(
0
)
;
}
ProfilingFrameIterator
:
:
ProfilingFrameIterator
(
)
:
activation_
(
nullptr
)
code_
(
nullptr
)
codeRange_
(
nullptr
)
callerFP_
(
nullptr
)
callerPC_
(
nullptr
)
stackAddress_
(
nullptr
)
exitReason_
(
ExitReason
:
:
None
)
{
MOZ_ASSERT
(
done
(
)
)
;
}
ProfilingFrameIterator
:
:
ProfilingFrameIterator
(
const
WasmActivation
&
activation
)
:
activation_
(
&
activation
)
code_
(
nullptr
)
codeRange_
(
nullptr
)
callerFP_
(
nullptr
)
callerPC_
(
nullptr
)
stackAddress_
(
nullptr
)
exitReason_
(
ExitReason
:
:
None
)
{
initFromFP
(
)
;
}
static
inline
void
AssertMatchesCallSite
(
const
WasmActivation
&
activation
void
*
callerPC
void
*
callerFP
)
{
#
ifdef
DEBUG
Code
*
code
=
activation
.
compartment
(
)
-
>
wasm
.
lookupCode
(
callerPC
)
;
MOZ_ASSERT
(
code
)
;
const
CodeRange
*
callerCodeRange
=
code
-
>
lookupRange
(
callerPC
)
;
MOZ_ASSERT
(
callerCodeRange
)
;
if
(
callerCodeRange
-
>
kind
(
)
=
=
CodeRange
:
:
Entry
)
{
MOZ_ASSERT
(
callerFP
=
=
nullptr
)
;
return
;
}
const
CallSite
*
callsite
=
code
-
>
lookupCallSite
(
callerPC
)
;
MOZ_ASSERT
(
callsite
)
;
#
endif
}
void
ProfilingFrameIterator
:
:
initFromFP
(
)
{
uint8_t
*
fp
=
activation_
-
>
fp
(
)
;
stackAddress_
=
fp
;
if
(
!
fp
)
{
MOZ_ASSERT
(
done
(
)
)
;
return
;
}
void
*
pc
=
ReturnAddressFromFP
(
fp
)
;
code_
=
activation_
-
>
compartment
(
)
-
>
wasm
.
lookupCode
(
pc
)
;
MOZ_ASSERT
(
code_
)
;
codeRange_
=
code_
-
>
lookupRange
(
pc
)
;
MOZ_ASSERT
(
codeRange_
)
;
switch
(
codeRange_
-
>
kind
(
)
)
{
case
CodeRange
:
:
Entry
:
callerPC_
=
nullptr
;
callerFP_
=
nullptr
;
break
;
case
CodeRange
:
:
Function
:
fp
=
CallerFPFromFP
(
fp
)
;
callerPC_
=
ReturnAddressFromFP
(
fp
)
;
callerFP_
=
CallerFPFromFP
(
fp
)
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
break
;
case
CodeRange
:
:
ImportJitExit
:
case
CodeRange
:
:
ImportInterpExit
:
case
CodeRange
:
:
TrapExit
:
case
CodeRange
:
:
DebugTrap
:
case
CodeRange
:
:
Inline
:
case
CodeRange
:
:
FarJumpIsland
:
MOZ_CRASH
(
"
Unexpected
CodeRange
kind
"
)
;
}
exitReason_
=
activation_
-
>
exitReason
(
)
;
if
(
exitReason_
=
=
ExitReason
:
:
None
)
exitReason_
=
ExitReason
:
:
Native
;
MOZ_ASSERT
(
!
done
(
)
)
;
}
typedef
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
RegisterState
;
ProfilingFrameIterator
:
:
ProfilingFrameIterator
(
const
WasmActivation
&
activation
const
RegisterState
&
state
)
:
activation_
(
&
activation
)
code_
(
nullptr
)
codeRange_
(
nullptr
)
callerFP_
(
nullptr
)
callerPC_
(
nullptr
)
stackAddress_
(
nullptr
)
exitReason_
(
ExitReason
:
:
None
)
{
code_
=
activation_
-
>
compartment
(
)
-
>
wasm
.
lookupCode
(
state
.
pc
)
;
if
(
!
code_
)
{
initFromFP
(
)
;
return
;
}
uint8_t
*
fp
=
activation
.
fp
(
)
;
uint8_t
*
pc
=
(
uint8_t
*
)
state
.
pc
;
void
*
*
sp
=
(
void
*
*
)
state
.
sp
;
const
CodeRange
*
codeRange
=
code_
-
>
lookupRange
(
pc
)
;
uint32_t
offsetInModule
=
pc
-
code_
-
>
segment
(
)
.
base
(
)
;
MOZ_ASSERT
(
offsetInModule
>
=
codeRange
-
>
begin
(
)
)
;
MOZ_ASSERT
(
offsetInModule
<
codeRange
-
>
end
(
)
)
;
uint32_t
offsetFromEntry
;
if
(
codeRange
-
>
isFunction
(
)
)
{
if
(
offsetInModule
<
codeRange
-
>
funcNormalEntry
(
)
)
offsetFromEntry
=
0
;
else
offsetFromEntry
=
offsetInModule
-
codeRange
-
>
funcNormalEntry
(
)
;
}
else
{
offsetFromEntry
=
offsetInModule
-
codeRange
-
>
begin
(
)
;
}
switch
(
codeRange
-
>
kind
(
)
)
{
case
CodeRange
:
:
Function
:
case
CodeRange
:
:
FarJumpIsland
:
case
CodeRange
:
:
ImportJitExit
:
case
CodeRange
:
:
ImportInterpExit
:
case
CodeRange
:
:
TrapExit
:
#
if
defined
(
JS_CODEGEN_ARM
)
|
|
defined
(
JS_CODEGEN_ARM64
)
|
|
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
if
(
offsetFromEntry
<
PushedRetAddr
|
|
codeRange
-
>
isThunk
(
)
)
{
callerPC_
=
state
.
lr
;
callerFP_
=
fp
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
else
#
endif
if
(
offsetFromEntry
<
PushedFP
|
|
codeRange
-
>
isThunk
(
)
)
{
callerPC_
=
sp
[
0
]
;
callerFP_
=
fp
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
else
if
(
offsetFromEntry
<
PushedTLS
)
{
callerPC_
=
sp
[
1
]
;
callerFP_
=
fp
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
else
if
(
offsetFromEntry
<
StoredFP
|
|
offsetInModule
=
=
codeRange
-
>
ret
(
)
-
RestoreFP
)
{
MOZ_ASSERT
(
fp
=
=
CallerFPFromFP
(
sp
)
)
;
callerPC_
=
ReturnAddressFromFP
(
sp
)
;
callerFP_
=
fp
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
else
if
(
offsetInModule
=
=
codeRange
-
>
ret
(
)
)
{
callerPC_
=
sp
[
0
]
;
callerFP_
=
fp
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
else
{
callerPC_
=
ReturnAddressFromFP
(
fp
)
;
callerFP_
=
CallerFPFromFP
(
fp
)
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
}
break
;
case
CodeRange
:
:
Entry
:
MOZ_ASSERT
(
!
fp
)
;
callerPC_
=
nullptr
;
callerFP_
=
nullptr
;
break
;
case
CodeRange
:
:
DebugTrap
:
case
CodeRange
:
:
Inline
:
if
(
!
fp
)
{
MOZ_ASSERT
(
done
(
)
)
;
return
;
}
callerPC_
=
ReturnAddressFromFP
(
fp
)
;
callerFP_
=
CallerFPFromFP
(
fp
)
;
AssertMatchesCallSite
(
*
activation_
callerPC_
callerFP_
)
;
break
;
}
codeRange_
=
codeRange
;
stackAddress_
=
state
.
sp
;
MOZ_ASSERT
(
!
done
(
)
)
;
}
void
ProfilingFrameIterator
:
:
operator
+
+
(
)
{
if
(
exitReason_
!
=
ExitReason
:
:
None
)
{
MOZ_ASSERT
(
codeRange_
)
;
exitReason_
=
ExitReason
:
:
None
;
MOZ_ASSERT
(
!
done
(
)
)
;
return
;
}
if
(
!
callerPC_
)
{
MOZ_ASSERT
(
!
callerFP_
)
;
codeRange_
=
nullptr
;
MOZ_ASSERT
(
done
(
)
)
;
return
;
}
code_
=
activation_
-
>
compartment
(
)
-
>
wasm
.
lookupCode
(
callerPC_
)
;
MOZ_ASSERT
(
code_
)
;
codeRange_
=
code_
-
>
lookupRange
(
callerPC_
)
;
MOZ_ASSERT
(
codeRange_
)
;
switch
(
codeRange_
-
>
kind
(
)
)
{
case
CodeRange
:
:
Entry
:
MOZ_ASSERT
(
callerFP_
=
=
nullptr
)
;
callerPC_
=
nullptr
;
break
;
case
CodeRange
:
:
Function
:
case
CodeRange
:
:
ImportJitExit
:
case
CodeRange
:
:
ImportInterpExit
:
case
CodeRange
:
:
TrapExit
:
case
CodeRange
:
:
DebugTrap
:
case
CodeRange
:
:
Inline
:
case
CodeRange
:
:
FarJumpIsland
:
stackAddress_
=
callerFP_
;
callerPC_
=
ReturnAddressFromFP
(
callerFP_
)
;
AssertMatchesCallSite
(
*
activation_
callerPC_
CallerFPFromFP
(
callerFP_
)
)
;
callerFP_
=
CallerFPFromFP
(
callerFP_
)
;
break
;
}
MOZ_ASSERT
(
!
done
(
)
)
;
}
const
char
*
ProfilingFrameIterator
:
:
label
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
const
char
*
importJitDescription
=
"
fast
FFI
trampoline
(
in
asm
.
js
)
"
;
const
char
*
importInterpDescription
=
"
slow
FFI
trampoline
(
in
asm
.
js
)
"
;
const
char
*
nativeDescription
=
"
native
call
(
in
asm
.
js
)
"
;
const
char
*
trapDescription
=
"
trap
handling
(
in
asm
.
js
)
"
;
const
char
*
debugTrapDescription
=
"
debug
trap
handling
(
in
asm
.
js
)
"
;
switch
(
exitReason_
)
{
case
ExitReason
:
:
None
:
break
;
case
ExitReason
:
:
ImportJit
:
return
importJitDescription
;
case
ExitReason
:
:
ImportInterp
:
return
importInterpDescription
;
case
ExitReason
:
:
Native
:
return
nativeDescription
;
case
ExitReason
:
:
Trap
:
return
trapDescription
;
case
ExitReason
:
:
DebugTrap
:
return
debugTrapDescription
;
}
switch
(
codeRange_
-
>
kind
(
)
)
{
case
CodeRange
:
:
Function
:
return
code_
-
>
profilingLabel
(
codeRange_
-
>
funcIndex
(
)
)
;
case
CodeRange
:
:
Entry
:
return
"
entry
trampoline
(
in
asm
.
js
)
"
;
case
CodeRange
:
:
ImportJitExit
:
return
importJitDescription
;
case
CodeRange
:
:
ImportInterpExit
:
return
importInterpDescription
;
case
CodeRange
:
:
TrapExit
:
return
trapDescription
;
case
CodeRange
:
:
DebugTrap
:
return
debugTrapDescription
;
case
CodeRange
:
:
Inline
:
return
"
inline
stub
(
in
asm
.
js
)
"
;
case
CodeRange
:
:
FarJumpIsland
:
return
"
interstitial
(
in
asm
.
js
)
"
;
}
MOZ_CRASH
(
"
bad
code
range
kind
"
)
;
}
