#
ifndef
wasm_frame_h
#
define
wasm_frame_h
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
"
NamespaceImports
.
h
"
#
include
"
wasm
/
WasmConstants
.
h
"
#
include
"
wasm
/
WasmValue
.
h
"
namespace
js
{
namespace
wasm
{
struct
TlsData
;
constexpr
uintptr_t
ExitOrJitEntryFPTag
=
0x1
;
class
Frame
{
uint8_t
*
callerFP_
;
void
*
returnAddress_
;
public
:
static
constexpr
uint32_t
callerFPOffset
(
)
{
return
offsetof
(
Frame
callerFP_
)
;
}
static
constexpr
uint32_t
returnAddressOffset
(
)
{
return
offsetof
(
Frame
returnAddress_
)
;
}
uint8_t
*
returnAddress
(
)
const
{
return
reinterpret_cast
<
uint8_t
*
>
(
returnAddress_
)
;
}
void
*
*
addressOfReturnAddress
(
)
{
return
reinterpret_cast
<
void
*
*
>
(
&
returnAddress_
)
;
}
uint8_t
*
rawCaller
(
)
const
{
return
callerFP_
;
}
Frame
*
wasmCaller
(
)
const
{
MOZ_ASSERT
(
!
callerIsExitOrJitEntryFP
(
)
)
;
return
reinterpret_cast
<
Frame
*
>
(
callerFP_
)
;
}
bool
callerIsExitOrJitEntryFP
(
)
const
{
return
isExitOrJitEntryFP
(
callerFP_
)
;
}
uint8_t
*
jitEntryCaller
(
)
const
{
return
toJitEntryCaller
(
callerFP_
)
;
}
static
const
Frame
*
fromUntaggedWasmExitFP
(
const
void
*
savedFP
)
{
MOZ_ASSERT
(
!
isExitOrJitEntryFP
(
savedFP
)
)
;
return
reinterpret_cast
<
const
Frame
*
>
(
savedFP
)
;
}
static
bool
isExitOrJitEntryFP
(
const
void
*
fp
)
{
return
reinterpret_cast
<
uintptr_t
>
(
fp
)
&
ExitOrJitEntryFPTag
;
}
static
uint8_t
*
toJitEntryCaller
(
const
void
*
fp
)
{
MOZ_ASSERT
(
isExitOrJitEntryFP
(
fp
)
)
;
return
reinterpret_cast
<
uint8_t
*
>
(
reinterpret_cast
<
uintptr_t
>
(
fp
)
&
~
ExitOrJitEntryFPTag
)
;
}
static
uint8_t
*
addExitOrJitEntryFPTag
(
const
Frame
*
fp
)
{
MOZ_ASSERT
(
!
isExitOrJitEntryFP
(
fp
)
)
;
return
reinterpret_cast
<
uint8_t
*
>
(
reinterpret_cast
<
uintptr_t
>
(
fp
)
|
ExitOrJitEntryFPTag
)
;
}
}
;
static_assert
(
!
std
:
:
is_polymorphic_v
<
Frame
>
"
Frame
doesn
'
t
need
a
vtable
.
"
)
;
static_assert
(
sizeof
(
Frame
)
=
=
2
*
sizeof
(
void
*
)
"
Frame
is
a
two
pointer
structure
"
)
;
class
FrameWithTls
:
public
Frame
{
TlsData
*
calleeTls_
;
TlsData
*
callerTls_
;
public
:
TlsData
*
calleeTls
(
)
{
return
calleeTls_
;
}
TlsData
*
callerTls
(
)
{
return
callerTls_
;
}
constexpr
static
uint32_t
sizeWithoutFrame
(
)
{
return
sizeof
(
wasm
:
:
FrameWithTls
)
-
sizeof
(
wasm
:
:
Frame
)
;
}
constexpr
static
uint32_t
calleeTLSOffset
(
)
{
return
offsetof
(
FrameWithTls
calleeTls_
)
-
sizeof
(
wasm
:
:
Frame
)
;
}
constexpr
static
uint32_t
callerTLSOffset
(
)
{
return
offsetof
(
FrameWithTls
callerTls_
)
-
sizeof
(
wasm
:
:
Frame
)
;
}
}
;
static_assert
(
FrameWithTls
:
:
calleeTLSOffset
(
)
=
=
0u
"
Callee
tls
stored
right
above
the
return
address
.
"
)
;
static_assert
(
FrameWithTls
:
:
callerTLSOffset
(
)
=
=
sizeof
(
void
*
)
"
Caller
tls
stored
right
above
the
callee
tls
.
"
)
;
static_assert
(
FrameWithTls
:
:
sizeWithoutFrame
(
)
=
=
2
*
sizeof
(
void
*
)
"
There
are
only
two
additional
slots
"
)
;
#
if
defined
(
JS_CODEGEN_ARM64
)
static_assert
(
sizeof
(
Frame
)
%
16
=
=
0
"
frame
is
aligned
"
)
;
#
endif
class
DebugFrame
{
union
SpilledRegisterResult
{
private
:
int32_t
i32_
;
int64_t
i64_
;
intptr_t
ref_
;
AnyRef
anyref_
;
float
f32_
;
double
f64_
;
#
ifdef
ENABLE_WASM_SIMD
V128
v128_
;
#
endif
#
ifdef
DEBUG
static
inline
void
assertAllValueTypesHandled
(
ValType
type
)
{
switch
(
type
.
kind
(
)
)
{
case
ValType
:
:
I32
:
case
ValType
:
:
I64
:
case
ValType
:
:
F32
:
case
ValType
:
:
F64
:
case
ValType
:
:
V128
:
case
ValType
:
:
Rtt
:
return
;
case
ValType
:
:
Ref
:
switch
(
type
.
refTypeKind
(
)
)
{
case
RefType
:
:
Func
:
case
RefType
:
:
Extern
:
case
RefType
:
:
Eq
:
case
RefType
:
:
TypeIndex
:
return
;
}
}
}
#
endif
}
;
SpilledRegisterResult
registerResults_
[
MaxRegisterResults
]
;
js
:
:
Value
cachedReturnJSValue_
;
void
*
stackResultsPointer_
;
uint32_t
funcIndex_
;
union
Flags
{
struct
{
uint32_t
observing
:
1
;
uint32_t
isDebuggee
:
1
;
uint32_t
prevUpToDate
:
1
;
uint32_t
hasCachedSavedFrame
:
1
;
uint32_t
hasCachedReturnJSValue
:
1
;
uint32_t
hasSpilledRefRegisterResult
:
MaxRegisterResults
;
}
;
uint32_t
allFlags
;
}
flags_
;
protected
:
#
if
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_ARM
)
|
|
\
defined
(
JS_CODEGEN_X86
)
|
|
defined
(
__wasi__
)
uint32_t
padding_
;
#
endif
#
if
defined
(
ENABLE_WASM_SIMD
)
&
&
defined
(
JS_CODEGEN_ARM64
)
uint64_t
padding_
;
#
endif
private
:
Frame
frame_
;
public
:
static
DebugFrame
*
from
(
Frame
*
fp
)
;
Frame
&
frame
(
)
{
return
frame_
;
}
uint32_t
funcIndex
(
)
const
{
return
funcIndex_
;
}
Instance
*
instance
(
)
const
;
GlobalObject
*
global
(
)
const
;
bool
hasGlobal
(
const
GlobalObject
*
global
)
const
;
JSObject
*
environmentChain
(
)
const
;
bool
getLocal
(
uint32_t
localIndex
MutableHandleValue
vp
)
;
bool
hasCachedReturnJSValue
(
)
const
{
return
flags_
.
hasCachedReturnJSValue
;
}
[
[
nodiscard
]
]
bool
updateReturnJSValue
(
JSContext
*
cx
)
;
HandleValue
returnValue
(
)
const
;
void
clearReturnJSValue
(
)
;
void
observe
(
JSContext
*
cx
)
;
void
leave
(
JSContext
*
cx
)
;
bool
isDebuggee
(
)
const
{
return
flags_
.
isDebuggee
;
}
void
setIsDebuggee
(
)
{
flags_
.
isDebuggee
=
true
;
}
void
unsetIsDebuggee
(
)
{
flags_
.
isDebuggee
=
false
;
}
bool
prevUpToDate
(
)
const
{
return
flags_
.
prevUpToDate
;
}
void
setPrevUpToDate
(
)
{
flags_
.
prevUpToDate
=
true
;
}
void
unsetPrevUpToDate
(
)
{
flags_
.
prevUpToDate
=
false
;
}
bool
hasCachedSavedFrame
(
)
const
{
return
flags_
.
hasCachedSavedFrame
;
}
void
setHasCachedSavedFrame
(
)
{
flags_
.
hasCachedSavedFrame
=
true
;
}
void
clearHasCachedSavedFrame
(
)
{
flags_
.
hasCachedSavedFrame
=
false
;
}
bool
hasSpilledRegisterRefResult
(
size_t
n
)
const
{
uint32_t
mask
=
hasSpilledRegisterRefResultBitMask
(
n
)
;
return
(
flags_
.
allFlags
&
mask
)
!
=
0
;
}
static
constexpr
size_t
offsetOfRegisterResults
(
)
{
return
offsetof
(
DebugFrame
registerResults_
)
;
}
static
constexpr
size_t
offsetOfRegisterResult
(
size_t
n
)
{
MOZ_ASSERT
(
n
<
MaxRegisterResults
)
;
return
offsetOfRegisterResults
(
)
+
n
*
sizeof
(
SpilledRegisterResult
)
;
}
static
constexpr
size_t
offsetOfCachedReturnJSValue
(
)
{
return
offsetof
(
DebugFrame
cachedReturnJSValue_
)
;
}
static
constexpr
size_t
offsetOfStackResultsPointer
(
)
{
return
offsetof
(
DebugFrame
stackResultsPointer_
)
;
}
static
constexpr
size_t
offsetOfFlags
(
)
{
return
offsetof
(
DebugFrame
flags_
)
;
}
static
constexpr
uint32_t
hasSpilledRegisterRefResultBitMask
(
size_t
n
)
{
MOZ_ASSERT
(
n
<
MaxRegisterResults
)
;
union
Flags
flags
=
{
.
allFlags
=
0
}
;
flags
.
hasSpilledRefRegisterResult
=
1
<
<
n
;
MOZ_ASSERT
(
flags
.
allFlags
!
=
0
)
;
return
flags
.
allFlags
;
}
static
constexpr
size_t
offsetOfFuncIndex
(
)
{
return
offsetof
(
DebugFrame
funcIndex_
)
;
}
static
constexpr
size_t
offsetOfFrame
(
)
{
return
offsetof
(
DebugFrame
frame_
)
;
}
static
const
unsigned
Alignment
=
8
;
static
void
alignmentStaticAsserts
(
)
;
}
;
}
}
#
endif
