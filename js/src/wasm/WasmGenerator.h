#
ifndef
wasm_generator_h
#
define
wasm_generator_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
HelperThreadTask
.
h
"
#
include
"
wasm
/
WasmCompile
.
h
"
#
include
"
wasm
/
WasmMetadata
.
h
"
#
include
"
wasm
/
WasmModule
.
h
"
namespace
JS
{
class
OptimizedEncodingListener
;
}
namespace
js
{
namespace
wasm
{
using
mozilla
:
:
DebugOnly
;
struct
CompileTask
;
using
CompileTaskPtrVector
=
Vector
<
CompileTask
*
0
SystemAllocPolicy
>
;
struct
FuncCompileInput
{
const
uint8_t
*
begin
;
const
uint8_t
*
end
;
uint32_t
index
;
uint32_t
lineOrBytecode
;
Uint32Vector
callSiteLineNums
;
FuncCompileInput
(
uint32_t
index
uint32_t
lineOrBytecode
const
uint8_t
*
begin
const
uint8_t
*
end
Uint32Vector
&
&
callSiteLineNums
)
:
begin
(
begin
)
end
(
end
)
index
(
index
)
lineOrBytecode
(
lineOrBytecode
)
callSiteLineNums
(
std
:
:
move
(
callSiteLineNums
)
)
{
}
}
;
using
FuncCompileInputVector
=
Vector
<
FuncCompileInput
8
SystemAllocPolicy
>
;
struct
CompiledCode
{
CompiledCode
(
)
:
featureUsage
(
FeatureUsage
:
:
None
)
{
}
Bytes
bytes
;
CodeRangeVector
codeRanges
;
CallSiteVector
callSites
;
CallSiteTargetVector
callSiteTargets
;
TrapSiteVectorArray
trapSites
;
SymbolicAccessVector
symbolicAccesses
;
jit
:
:
CodeLabelVector
codeLabels
;
StackMaps
stackMaps
;
TryNoteVector
tryNotes
;
CodeRangeUnwindInfoVector
codeRangeUnwindInfos
;
FeatureUsage
featureUsage
;
[
[
nodiscard
]
]
bool
swap
(
jit
:
:
MacroAssembler
&
masm
)
;
void
clear
(
)
{
bytes
.
clear
(
)
;
codeRanges
.
clear
(
)
;
callSites
.
clear
(
)
;
callSiteTargets
.
clear
(
)
;
trapSites
.
clear
(
)
;
symbolicAccesses
.
clear
(
)
;
codeLabels
.
clear
(
)
;
stackMaps
.
clear
(
)
;
tryNotes
.
clear
(
)
;
codeRangeUnwindInfos
.
clear
(
)
;
featureUsage
=
FeatureUsage
:
:
None
;
MOZ_ASSERT
(
empty
(
)
)
;
}
bool
empty
(
)
{
return
bytes
.
empty
(
)
&
&
codeRanges
.
empty
(
)
&
&
callSites
.
empty
(
)
&
&
callSiteTargets
.
empty
(
)
&
&
trapSites
.
empty
(
)
&
&
symbolicAccesses
.
empty
(
)
&
&
codeLabels
.
empty
(
)
&
&
tryNotes
.
empty
(
)
&
&
stackMaps
.
empty
(
)
&
&
codeRangeUnwindInfos
.
empty
(
)
&
&
featureUsage
=
=
FeatureUsage
:
:
None
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
struct
CompileTaskState
{
HelperThreadLockData
<
CompileTaskPtrVector
>
finished_
;
HelperThreadLockData
<
uint32_t
>
numFailed_
;
HelperThreadLockData
<
UniqueChars
>
errorMessage_
;
HelperThreadLockData
<
ConditionVariable
>
condVar_
;
CompileTaskState
(
)
:
numFailed_
(
0
)
{
}
~
CompileTaskState
(
)
{
MOZ_ASSERT
(
finished_
.
refNoCheck
(
)
.
empty
(
)
)
;
MOZ_ASSERT
(
!
numFailed_
.
refNoCheck
(
)
)
;
}
CompileTaskPtrVector
&
finished
(
)
{
return
finished_
.
ref
(
)
;
}
uint32_t
&
numFailed
(
)
{
return
numFailed_
.
ref
(
)
;
}
UniqueChars
&
errorMessage
(
)
{
return
errorMessage_
.
ref
(
)
;
}
ConditionVariable
&
condVar
(
)
{
return
condVar_
.
ref
(
)
;
}
}
;
struct
CompileTask
:
public
HelperThreadTask
{
const
CodeMetadata
&
codeMeta
;
const
CompilerEnvironment
&
compilerEnv
;
CompileTaskState
&
state
;
LifoAlloc
lifo
;
FuncCompileInputVector
inputs
;
CompiledCode
output
;
CompileTask
(
const
CodeMetadata
&
codeMeta
const
CompilerEnvironment
&
compilerEnv
CompileTaskState
&
state
size_t
defaultChunkSize
)
:
codeMeta
(
codeMeta
)
compilerEnv
(
compilerEnv
)
state
(
state
)
lifo
(
defaultChunkSize
)
{
}
virtual
~
CompileTask
(
)
=
default
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
void
runHelperThreadTask
(
AutoLockHelperThreadState
&
locked
)
override
;
ThreadType
threadType
(
)
override
;
}
;
class
MOZ_STACK_CLASS
ModuleGenerator
{
using
CompileTaskVector
=
Vector
<
CompileTask
0
SystemAllocPolicy
>
;
using
CodeOffsetVector
=
Vector
<
jit
:
:
CodeOffset
0
SystemAllocPolicy
>
;
struct
CallFarJump
{
uint32_t
funcIndex
;
jit
:
:
CodeOffset
jump
;
CallFarJump
(
uint32_t
fi
jit
:
:
CodeOffset
j
)
:
funcIndex
(
fi
)
jump
(
j
)
{
}
}
;
using
CallFarJumpVector
=
Vector
<
CallFarJump
0
SystemAllocPolicy
>
;
SharedCompileArgs
const
compileArgs_
;
UniqueChars
*
const
error_
;
UniqueCharsVector
*
const
warnings_
;
const
Atomic
<
bool
>
*
const
cancelled_
;
CodeMetadata
*
const
codeMeta_
;
CompilerEnvironment
*
const
compilerEnv_
;
UniqueLinkData
linkData_
;
UniqueCodeTier
codeTier_
;
MutableCodeMetadataForAsmJS
codeMetaForAsmJS_
;
CompileTaskState
taskState_
;
LifoAlloc
lifo_
;
jit
:
:
TempAllocator
masmAlloc_
;
jit
:
:
WasmMacroAssembler
masm_
;
Uint32Vector
funcToCodeRange_
;
uint32_t
debugTrapCodeOffset_
;
CallFarJumpVector
callFarJumps_
;
CallSiteTargetVector
callSiteTargets_
;
uint32_t
lastPatchedCallSite_
;
uint32_t
startOfUnpatchedCallsites_
;
bool
parallel_
;
uint32_t
outstanding_
;
CompileTaskVector
tasks_
;
CompileTaskPtrVector
freeTasks_
;
CompileTask
*
currentTask_
;
uint32_t
batchedBytecode_
;
DebugOnly
<
bool
>
finishedFuncDefs_
;
bool
funcIsCompiled
(
uint32_t
funcIndex
)
const
;
const
CodeRange
&
funcCodeRange
(
uint32_t
funcIndex
)
const
;
bool
linkCallSites
(
)
;
void
noteCodeRange
(
uint32_t
codeRangeIndex
const
CodeRange
&
codeRange
)
;
bool
linkCompiledCode
(
CompiledCode
&
code
)
;
bool
locallyCompileCurrentTask
(
)
;
bool
finishTask
(
CompileTask
*
task
)
;
bool
launchBatchCompile
(
)
;
bool
finishOutstandingTask
(
)
;
bool
finishCodegen
(
)
;
bool
finishMetadataTier
(
)
;
UniqueCodeTier
finishCodeTier
(
)
;
bool
finishCodeMetadata
(
const
Bytes
&
bytecode
)
;
bool
isAsmJS
(
)
const
{
return
codeMeta_
-
>
isAsmJS
(
)
;
}
Tier
tier
(
)
const
{
return
compilerEnv_
-
>
tier
(
)
;
}
CompileMode
mode
(
)
const
{
return
compilerEnv_
-
>
mode
(
)
;
}
bool
debugEnabled
(
)
const
{
return
compilerEnv_
-
>
debugEnabled
(
)
;
}
void
warnf
(
const
char
*
msg
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
public
:
ModuleGenerator
(
const
CompileArgs
&
args
CodeMetadata
*
codeMeta
CompilerEnvironment
*
compilerEnv
const
Atomic
<
bool
>
*
cancelled
UniqueChars
*
error
UniqueCharsVector
*
warnings
)
;
~
ModuleGenerator
(
)
;
[
[
nodiscard
]
]
bool
init
(
CodeMetadataForAsmJS
*
codeMetaForAsmJS
)
;
[
[
nodiscard
]
]
bool
compileFuncDef
(
uint32_t
funcIndex
uint32_t
lineOrBytecode
const
uint8_t
*
begin
const
uint8_t
*
end
Uint32Vector
&
&
callSiteLineNums
=
Uint32Vector
(
)
)
;
[
[
nodiscard
]
]
bool
finishFuncDefs
(
)
;
SharedModule
finishModule
(
const
ShareableBytes
&
bytecode
MutableModuleMetadata
moduleMeta
JS
:
:
OptimizedEncodingListener
*
maybeTier2Listener
)
;
[
[
nodiscard
]
]
bool
finishTier2
(
const
Module
&
module
)
;
}
;
}
}
#
endif
