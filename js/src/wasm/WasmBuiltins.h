#
ifndef
wasm_builtins_h
#
define
wasm_builtins_h
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
wasm
/
WasmIntrinsicGenerated
.
h
"
namespace
js
{
namespace
jit
{
struct
ResumeFromException
;
}
namespace
wasm
{
class
WasmFrameIter
;
class
CodeRange
;
class
FuncType
;
enum
class
SymbolicAddress
{
ToInt32
#
if
defined
(
JS_CODEGEN_ARM
)
aeabi_idivmod
aeabi_uidivmod
#
endif
ModD
SinD
CosD
TanD
ASinD
ACosD
ATanD
CeilD
CeilF
FloorD
FloorF
TruncD
TruncF
NearbyIntD
NearbyIntF
ExpD
LogD
PowD
ATan2D
HandleDebugTrap
HandleThrow
HandleTrap
ReportV128JSCall
CallImport_General
CoerceInPlace_ToInt32
CoerceInPlace_ToNumber
CoerceInPlace_JitEntry
CoerceInPlace_ToBigInt
AllocateBigInt
BoxValue_Anyref
DivI64
UDivI64
ModI64
UModI64
TruncateDoubleToInt64
TruncateDoubleToUint64
SaturatingTruncateDoubleToInt64
SaturatingTruncateDoubleToUint64
Uint64ToFloat32
Uint64ToDouble
Int64ToFloat32
Int64ToDouble
MemoryGrow
MemorySize
WaitI32
WaitI64
Wake
MemCopy32
MemCopyShared32
DataDrop
MemFill32
MemFillShared32
MemInit32
TableCopy
ElemDrop
TableFill
TableGet
TableGrow
TableInit
TableSet
TableSize
RefFunc
RefTest
RttSub
PreBarrierFiltering
PostBarrier
PostBarrierFiltering
StructNew
#
if
defined
(
ENABLE_WASM_EXCEPTIONS
)
ExceptionNew
ThrowException
ConsumePendingException
PushRefIntoExn
#
endif
ArrayNew
InlineTypedObjectClass
#
define
DECL_INTRINSIC_SA
(
op
export
sa_name
abitype
entry
idx
)
sa_name
FOR_EACH_INTRINSIC
(
DECL_INTRINSIC_SA
)
#
undef
DECL_INTRINSIC_SA
#
ifdef
WASM_CODEGEN_DEBUG
PrintI32
PrintPtr
PrintF32
PrintF64
PrintText
#
endif
Limit
}
;
enum
class
FailureMode
:
uint8_t
{
Infallible
FailOnNegI32
FailOnNullPtr
FailOnInvalidRef
}
;
static
constexpr
size_t
SymbolicAddressSignatureMaxArgs
=
6
;
struct
SymbolicAddressSignature
{
const
SymbolicAddress
identity
;
const
jit
:
:
MIRType
retType
;
const
FailureMode
failureMode
;
const
uint8_t
numArgs
;
const
jit
:
:
MIRType
argTypes
[
SymbolicAddressSignatureMaxArgs
+
1
]
;
}
;
static_assert
(
sizeof
(
SymbolicAddressSignature
)
<
=
16
"
SymbolicAddressSignature
unexpectedly
large
"
)
;
extern
const
SymbolicAddressSignature
SASigSinD
;
extern
const
SymbolicAddressSignature
SASigCosD
;
extern
const
SymbolicAddressSignature
SASigTanD
;
extern
const
SymbolicAddressSignature
SASigASinD
;
extern
const
SymbolicAddressSignature
SASigACosD
;
extern
const
SymbolicAddressSignature
SASigATanD
;
extern
const
SymbolicAddressSignature
SASigCeilD
;
extern
const
SymbolicAddressSignature
SASigCeilF
;
extern
const
SymbolicAddressSignature
SASigFloorD
;
extern
const
SymbolicAddressSignature
SASigFloorF
;
extern
const
SymbolicAddressSignature
SASigTruncD
;
extern
const
SymbolicAddressSignature
SASigTruncF
;
extern
const
SymbolicAddressSignature
SASigNearbyIntD
;
extern
const
SymbolicAddressSignature
SASigNearbyIntF
;
extern
const
SymbolicAddressSignature
SASigExpD
;
extern
const
SymbolicAddressSignature
SASigLogD
;
extern
const
SymbolicAddressSignature
SASigPowD
;
extern
const
SymbolicAddressSignature
SASigATan2D
;
extern
const
SymbolicAddressSignature
SASigMemoryGrow
;
extern
const
SymbolicAddressSignature
SASigMemorySize
;
extern
const
SymbolicAddressSignature
SASigWaitI32
;
extern
const
SymbolicAddressSignature
SASigWaitI64
;
extern
const
SymbolicAddressSignature
SASigWake
;
extern
const
SymbolicAddressSignature
SASigMemCopy32
;
extern
const
SymbolicAddressSignature
SASigMemCopyShared32
;
extern
const
SymbolicAddressSignature
SASigDataDrop
;
extern
const
SymbolicAddressSignature
SASigMemFill32
;
extern
const
SymbolicAddressSignature
SASigMemFillShared32
;
extern
const
SymbolicAddressSignature
SASigMemInit32
;
extern
const
SymbolicAddressSignature
SASigTableCopy
;
extern
const
SymbolicAddressSignature
SASigElemDrop
;
extern
const
SymbolicAddressSignature
SASigTableFill
;
extern
const
SymbolicAddressSignature
SASigTableGet
;
extern
const
SymbolicAddressSignature
SASigTableGrow
;
extern
const
SymbolicAddressSignature
SASigTableInit
;
extern
const
SymbolicAddressSignature
SASigTableSet
;
extern
const
SymbolicAddressSignature
SASigTableSize
;
extern
const
SymbolicAddressSignature
SASigRefFunc
;
extern
const
SymbolicAddressSignature
SASigPreBarrierFiltering
;
extern
const
SymbolicAddressSignature
SASigPostBarrier
;
extern
const
SymbolicAddressSignature
SASigPostBarrierFiltering
;
extern
const
SymbolicAddressSignature
SASigStructNew
;
#
ifdef
ENABLE_WASM_EXCEPTIONS
extern
const
SymbolicAddressSignature
SASigExceptionNew
;
extern
const
SymbolicAddressSignature
SASigThrowException
;
extern
const
SymbolicAddressSignature
SASigConsumePendingException
;
extern
const
SymbolicAddressSignature
SASigPushRefIntoExn
;
#
endif
extern
const
SymbolicAddressSignature
SASigArrayNew
;
extern
const
SymbolicAddressSignature
SASigRefTest
;
extern
const
SymbolicAddressSignature
SASigRttSub
;
extern
const
SymbolicAddressSignature
SASigIntrI8VecMul
;
bool
IsRoundingFunction
(
SymbolicAddress
callee
jit
:
:
RoundingMode
*
mode
)
;
bool
NeedsBuiltinThunk
(
SymbolicAddress
sym
)
;
bool
LookupBuiltinThunk
(
void
*
pc
const
CodeRange
*
*
codeRange
uint8_t
*
*
codeBase
)
;
bool
EnsureBuiltinThunksInitialized
(
)
;
bool
HandleThrow
(
JSContext
*
cx
WasmFrameIter
&
iter
jit
:
:
ResumeFromException
*
rfe
)
;
void
*
SymbolicAddressTarget
(
SymbolicAddress
sym
)
;
void
*
ProvisionalLazyJitEntryStub
(
)
;
void
*
MaybeGetBuiltinThunk
(
JSFunction
*
f
const
FuncType
&
funcType
)
;
void
ReleaseBuiltinThunks
(
)
;
void
*
AddressOf
(
SymbolicAddress
imm
jit
:
:
ABIFunctionType
*
abiType
)
;
#
ifdef
WASM_CODEGEN_DEBUG
void
PrintI32
(
int32_t
val
)
;
void
PrintF32
(
float
val
)
;
void
PrintF64
(
double
val
)
;
void
PrintPtr
(
uint8_t
*
val
)
;
void
PrintText
(
const
char
*
out
)
;
#
endif
}
}
#
endif
