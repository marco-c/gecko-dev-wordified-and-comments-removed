#
ifndef
wasm_builtins_h
#
define
wasm_builtins_h
#
include
"
wasm
/
WasmTypes
.
h
"
namespace
js
{
namespace
jit
{
struct
ResumeFromException
;
}
namespace
wasm
{
class
WasmFrameIter
;
extern
const
SymbolicAddressSignature
SASigSinD
;
extern
const
SymbolicAddressSignature
SASigCosD
;
extern
const
SymbolicAddressSignature
SASigTanD
;
extern
const
SymbolicAddressSignature
SASigASinD
;
extern
const
SymbolicAddressSignature
SASigACosD
;
extern
const
SymbolicAddressSignature
SASigATanD
;
extern
const
SymbolicAddressSignature
SASigCeilD
;
extern
const
SymbolicAddressSignature
SASigCeilF
;
extern
const
SymbolicAddressSignature
SASigFloorD
;
extern
const
SymbolicAddressSignature
SASigFloorF
;
extern
const
SymbolicAddressSignature
SASigTruncD
;
extern
const
SymbolicAddressSignature
SASigTruncF
;
extern
const
SymbolicAddressSignature
SASigNearbyIntD
;
extern
const
SymbolicAddressSignature
SASigNearbyIntF
;
extern
const
SymbolicAddressSignature
SASigExpD
;
extern
const
SymbolicAddressSignature
SASigLogD
;
extern
const
SymbolicAddressSignature
SASigPowD
;
extern
const
SymbolicAddressSignature
SASigATan2D
;
extern
const
SymbolicAddressSignature
SASigMemoryGrow
;
extern
const
SymbolicAddressSignature
SASigMemorySize
;
extern
const
SymbolicAddressSignature
SASigWaitI32
;
extern
const
SymbolicAddressSignature
SASigWaitI64
;
extern
const
SymbolicAddressSignature
SASigWake
;
extern
const
SymbolicAddressSignature
SASigMemCopy
;
extern
const
SymbolicAddressSignature
SASigMemCopyShared
;
extern
const
SymbolicAddressSignature
SASigDataDrop
;
extern
const
SymbolicAddressSignature
SASigMemFill
;
extern
const
SymbolicAddressSignature
SASigMemFillShared
;
extern
const
SymbolicAddressSignature
SASigMemInit
;
extern
const
SymbolicAddressSignature
SASigTableCopy
;
extern
const
SymbolicAddressSignature
SASigElemDrop
;
extern
const
SymbolicAddressSignature
SASigTableFill
;
extern
const
SymbolicAddressSignature
SASigTableGet
;
extern
const
SymbolicAddressSignature
SASigTableGrow
;
extern
const
SymbolicAddressSignature
SASigTableInit
;
extern
const
SymbolicAddressSignature
SASigTableSet
;
extern
const
SymbolicAddressSignature
SASigTableSize
;
extern
const
SymbolicAddressSignature
SASigRefFunc
;
extern
const
SymbolicAddressSignature
SASigPreBarrierFiltering
;
extern
const
SymbolicAddressSignature
SASigPostBarrier
;
extern
const
SymbolicAddressSignature
SASigPostBarrierFiltering
;
extern
const
SymbolicAddressSignature
SASigStructNew
;
#
ifdef
ENABLE_WASM_EXCEPTIONS
extern
const
SymbolicAddressSignature
SASigExceptionNew
;
extern
const
SymbolicAddressSignature
SASigThrowException
;
extern
const
SymbolicAddressSignature
SASigGetLocalExceptionIndex
;
#
endif
extern
const
SymbolicAddressSignature
SASigArrayNew
;
extern
const
SymbolicAddressSignature
SASigRefTest
;
extern
const
SymbolicAddressSignature
SASigRttSub
;
bool
NeedsBuiltinThunk
(
SymbolicAddress
sym
)
;
bool
LookupBuiltinThunk
(
void
*
pc
const
CodeRange
*
*
codeRange
uint8_t
*
*
codeBase
)
;
bool
EnsureBuiltinThunksInitialized
(
)
;
bool
HandleThrow
(
JSContext
*
cx
WasmFrameIter
&
iter
jit
:
:
ResumeFromException
*
rfe
)
;
void
*
SymbolicAddressTarget
(
SymbolicAddress
sym
)
;
void
*
ProvisionalLazyJitEntryStub
(
)
;
void
*
MaybeGetBuiltinThunk
(
JSFunction
*
f
const
FuncType
&
funcType
)
;
void
ReleaseBuiltinThunks
(
)
;
void
*
AddressOf
(
SymbolicAddress
imm
jit
:
:
ABIFunctionType
*
abiType
)
;
#
ifdef
WASM_CODEGEN_DEBUG
void
PrintI32
(
int32_t
val
)
;
void
PrintF32
(
float
val
)
;
void
PrintF64
(
double
val
)
;
void
PrintPtr
(
uint8_t
*
val
)
;
void
PrintText
(
const
char
*
out
)
;
#
endif
}
}
#
endif
