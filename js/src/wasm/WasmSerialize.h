#
ifndef
wasm_serialize_h
#
define
wasm_serialize_h
#
include
"
mozilla
/
MacroForEach
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
cstdint
>
#
include
<
type_traits
>
namespace
js
{
namespace
wasm
{
template
<
typename
T
>
struct
IsCacheablePod
:
public
std
:
:
conditional_t
<
std
:
:
is_arithmetic_v
<
T
>
|
|
std
:
:
is_enum_v
<
T
>
std
:
:
true_type
std
:
:
false_type
>
{
}
;
template
<
typename
T
>
struct
IsCacheablePod
<
mozilla
:
:
Maybe
<
T
>
>
:
public
std
:
:
conditional_t
<
IsCacheablePod
<
T
>
:
:
value
std
:
:
true_type
std
:
:
false_type
>
{
}
;
template
<
typename
T
size_t
N
>
struct
IsCacheablePod
<
T
[
N
]
>
:
public
std
:
:
conditional_t
<
IsCacheablePod
<
T
>
:
:
value
std
:
:
true_type
std
:
:
false_type
>
{
}
;
template
<
class
T
>
inline
constexpr
bool
is_cacheable_pod
=
IsCacheablePod
<
T
>
:
:
value
;
#
define
WASM_DECLARE_CACHEABLE_POD
(
Type
)
\
static_assert
(
!
std
:
:
is_polymorphic_v
<
Type
>
\
#
Type
"
must
not
have
virtual
methods
"
)
;
\
}
/
*
namespace
wasm
*
/
\
}
/
*
namespace
js
*
/
\
template
<
>
\
struct
js
:
:
wasm
:
:
IsCacheablePod
<
js
:
:
wasm
:
:
Type
>
:
public
std
:
:
true_type
{
}
;
\
namespace
js
{
\
namespace
wasm
{
#
define
WASM_CHECK_CACHEABLE_POD_FIELD_
(
Field
)
\
static_assert
(
js
:
:
wasm
:
:
IsCacheablePod
<
decltype
(
Field
)
>
:
:
value
\
#
Field
"
must
be
cacheable
pod
"
)
;
#
define
WASM_CHECK_CACHEABLE_POD
(
Fields
.
.
.
)
\
MOZ_FOR_EACH
(
WASM_CHECK_CACHEABLE_POD_FIELD_
(
)
(
Fields
)
)
#
define
WASM_CHECK_CACHEABLE_POD_WITH_PARENT
(
Parent
Fields
.
.
.
)
\
static_assert
(
js
:
:
wasm
:
:
IsCacheablePod
<
Parent
>
:
:
value
\
#
Parent
"
must
be
cacheable
pod
"
)
;
\
MOZ_FOR_EACH
(
WASM_CHECK_CACHEABLE_POD_FIELD_
(
)
(
Fields
)
)
#
define
WASM_ALLOW_NON_CACHEABLE_POD_FIELD
(
Field
Reason
)
\
static_assert
(
!
js
:
:
wasm
:
:
IsCacheablePod
<
decltype
(
Field
)
>
:
:
value
\
#
Field
"
is
not
cacheable
due
to
"
Reason
)
;
}
}
#
endif
