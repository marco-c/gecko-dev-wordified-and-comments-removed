#
include
"
wasm
/
WasmFeatures
.
h
"
#
include
"
jit
/
AtomicOperations
.
h
"
#
include
"
jit
/
JitContext
.
h
"
#
include
"
jit
/
JitOptions
.
h
"
#
include
"
js
/
Prefs
.
h
"
#
include
"
util
/
StringBuilder
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
wasm
/
WasmBaselineCompile
.
h
"
#
include
"
wasm
/
WasmIonCompile
.
h
"
#
include
"
wasm
/
WasmSignalHandlers
.
h
"
using
namespace
js
;
using
namespace
js
:
:
wasm
;
using
namespace
js
:
:
jit
;
static
inline
bool
IsFuzzingIon
(
JSContext
*
cx
)
{
return
IsFuzzing
(
)
&
&
!
cx
-
>
options
(
)
.
wasmBaseline
(
)
&
&
cx
-
>
options
(
)
.
wasmIon
(
)
;
}
static
inline
bool
WasmThreadsFlag
(
JSContext
*
cx
)
{
return
cx
-
>
realm
(
)
&
&
cx
-
>
realm
(
)
-
>
creationOptions
(
)
.
getSharedMemoryAndAtomicsEnabled
(
)
;
}
#
define
WASM_FEATURE
(
NAME
.
.
.
)
\
static
inline
bool
Wasm
#
#
NAME
#
#
Flag
(
JSContext
*
cx
)
;
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
;
#
undef
WASM_FEATURE
#
define
WASM_FEATURE
(
NAME
LOWER_NAME
COMPILE_PRED
COMPILER_PRED
FLAG_PRED
\
FLAG_FORCE_ON
FLAG_FUZZ_ON
PREF
)
\
static
inline
bool
Wasm
#
#
NAME
#
#
Flag
(
JSContext
*
cx
)
{
\
if
(
!
(
COMPILE_PRED
)
)
{
\
return
false
;
\
}
\
return
(
(
FLAG_PRED
)
&
&
JS
:
:
Prefs
:
:
wasm_
#
#
PREF
(
)
)
|
|
(
FLAG_FORCE_ON
)
;
\
}
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
;
#
undef
WASM_FEATURE
static
inline
bool
WasmDebuggerActive
(
JSContext
*
cx
)
{
if
(
IsFuzzingIon
(
cx
)
)
{
return
false
;
}
return
cx
-
>
realm
(
)
&
&
cx
-
>
realm
(
)
-
>
debuggerObservesWasm
(
)
;
}
bool
wasm
:
:
BaselineAvailable
(
JSContext
*
cx
)
{
if
(
!
cx
-
>
options
(
)
.
wasmBaseline
(
)
|
|
!
BaselinePlatformSupport
(
)
)
{
return
false
;
}
bool
isDisabled
=
false
;
MOZ_ALWAYS_TRUE
(
BaselineDisabledByFeatures
(
cx
&
isDisabled
)
)
;
return
!
isDisabled
;
}
bool
wasm
:
:
IonAvailable
(
JSContext
*
cx
)
{
if
(
!
cx
-
>
options
(
)
.
wasmIon
(
)
|
|
!
IonPlatformSupport
(
)
)
{
return
false
;
}
bool
isDisabled
=
false
;
MOZ_ALWAYS_TRUE
(
IonDisabledByFeatures
(
cx
&
isDisabled
)
)
;
return
!
isDisabled
;
}
bool
wasm
:
:
WasmCompilerForAsmJSAvailable
(
JSContext
*
cx
)
{
return
IonAvailable
(
cx
)
;
}
template
<
size_t
ArrayLength
>
static
inline
bool
Append
(
JSStringBuilder
*
reason
const
char
(
&
s
)
[
ArrayLength
]
char
*
sep
)
{
if
(
(
*
sep
&
&
!
reason
-
>
append
(
*
sep
)
)
|
|
!
reason
-
>
append
(
s
)
)
{
return
false
;
}
*
sep
=
'
'
;
return
true
;
}
bool
wasm
:
:
BaselineDisabledByFeatures
(
JSContext
*
cx
bool
*
isDisabled
JSStringBuilder
*
reason
)
{
bool
testSerialization
=
WasmTestSerializationFlag
(
cx
)
;
if
(
reason
)
{
char
sep
=
0
;
if
(
testSerialization
&
&
!
Append
(
reason
"
testSerialization
"
&
sep
)
)
{
return
false
;
}
}
*
isDisabled
=
testSerialization
;
return
true
;
}
bool
wasm
:
:
IonDisabledByFeatures
(
JSContext
*
cx
bool
*
isDisabled
JSStringBuilder
*
reason
)
{
bool
debug
=
WasmDebuggerActive
(
cx
)
;
if
(
reason
)
{
char
sep
=
0
;
if
(
debug
&
&
!
Append
(
reason
"
debug
"
&
sep
)
)
{
return
false
;
}
}
*
isDisabled
=
debug
;
return
true
;
}
bool
wasm
:
:
AnyCompilerAvailable
(
JSContext
*
cx
)
{
return
wasm
:
:
BaselineAvailable
(
cx
)
|
|
wasm
:
:
IonAvailable
(
cx
)
;
}
#
define
WASM_FEATURE
(
NAME
LOWER_NAME
COMPILE_PRED
COMPILER_PRED
.
.
.
)
\
bool
wasm
:
:
NAME
#
#
Available
(
JSContext
*
cx
)
{
\
return
Wasm
#
#
NAME
#
#
Flag
(
cx
)
&
&
(
COMPILER_PRED
)
;
\
}
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
#
undef
WASM_FEATURE
bool
wasm
:
:
IsSimdPrivilegedContext
(
JSContext
*
cx
)
{
return
cx
-
>
realm
(
)
&
&
cx
-
>
realm
(
)
-
>
principals
(
)
&
&
cx
-
>
realm
(
)
-
>
principals
(
)
-
>
isSystemOrAddonPrincipal
(
)
;
}
bool
wasm
:
:
SimdAvailable
(
JSContext
*
cx
)
{
return
js
:
:
jit
:
:
JitSupportsWasmSimd
(
)
;
}
bool
wasm
:
:
ThreadsAvailable
(
JSContext
*
cx
)
{
return
WasmThreadsFlag
(
cx
)
&
&
AnyCompilerAvailable
(
cx
)
;
}
bool
wasm
:
:
HasPlatformSupport
(
)
{
#
if
!
MOZ_LITTLE_ENDIAN
(
)
return
false
;
#
else
if
(
!
HasJitBackend
(
)
)
{
return
false
;
}
if
(
gc
:
:
SystemPageSize
(
)
>
wasm
:
:
PageSize
)
{
return
false
;
}
if
(
!
JitOptions
.
supportsUnalignedAccesses
)
{
return
false
;
}
if
(
!
jit
:
:
JitSupportsAtomics
(
)
)
{
return
false
;
}
if
(
!
jit
:
:
AtomicOperations
:
:
isLockfree8
(
)
)
{
return
false
;
}
return
BaselinePlatformSupport
(
)
|
|
IonPlatformSupport
(
)
;
#
endif
}
bool
wasm
:
:
HasSupport
(
JSContext
*
cx
)
{
bool
prefEnabled
=
cx
-
>
options
(
)
.
wasm
(
)
;
if
(
MOZ_UNLIKELY
(
!
prefEnabled
)
)
{
prefEnabled
=
cx
-
>
options
(
)
.
wasmForTrustedPrinciples
(
)
&
&
cx
-
>
realm
(
)
&
&
cx
-
>
realm
(
)
-
>
principals
(
)
&
&
cx
-
>
realm
(
)
-
>
principals
(
)
-
>
isSystemOrAddonPrincipal
(
)
;
}
return
prefEnabled
&
&
HasPlatformSupport
(
)
&
&
EnsureFullSignalHandlers
(
cx
)
;
}
bool
wasm
:
:
StreamingCompilationAvailable
(
JSContext
*
cx
)
{
return
HasSupport
(
cx
)
&
&
AnyCompilerAvailable
(
cx
)
&
&
cx
-
>
runtime
(
)
-
>
offThreadPromiseState
.
ref
(
)
.
initialized
(
)
&
&
CanUseExtraThreads
(
)
&
&
cx
-
>
runtime
(
)
-
>
consumeStreamCallback
&
&
cx
-
>
runtime
(
)
-
>
reportStreamErrorCallback
;
}
bool
wasm
:
:
CodeCachingAvailable
(
JSContext
*
cx
)
{
#
ifdef
FUZZING_JS_FUZZILLI
return
false
;
#
else
if
(
ExperimentalCompilePipelineAvailable
(
cx
)
)
{
return
false
;
}
return
StreamingCompilationAvailable
(
cx
)
&
&
IonAvailable
(
cx
)
;
#
endif
}
