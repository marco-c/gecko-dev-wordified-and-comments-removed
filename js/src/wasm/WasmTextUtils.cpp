#
include
"
wasm
/
WasmTextUtils
.
h
"
#
include
"
vm
/
StringBuffer
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
using
mozilla
:
:
IsNaN
;
template
<
size_t
base
>
bool
js
:
:
wasm
:
:
RenderInBase
(
StringBuffer
&
sb
uint64_t
num
)
{
uint64_t
n
=
num
;
uint64_t
pow
=
1
;
while
(
n
)
{
pow
*
=
base
;
n
/
=
base
;
}
pow
/
=
base
;
n
=
num
;
while
(
pow
)
{
if
(
!
sb
.
append
(
"
0123456789abcdef
"
[
n
/
pow
]
)
)
return
false
;
n
-
=
(
n
/
pow
)
*
pow
;
pow
/
=
base
;
}
return
true
;
}
template
bool
js
:
:
wasm
:
:
RenderInBase
<
10
>
(
StringBuffer
&
sb
uint64_t
num
)
;
template
<
class
T
>
bool
js
:
:
wasm
:
:
RenderNaN
(
StringBuffer
&
sb
Raw
<
T
>
num
)
{
typedef
typename
mozilla
:
:
SelectTrait
<
T
>
Traits
;
MOZ_ASSERT
(
IsNaN
(
num
.
fp
(
)
)
)
;
if
(
(
num
.
bits
(
)
&
Traits
:
:
kSignBit
)
&
&
!
sb
.
append
(
"
-
"
)
)
return
false
;
if
(
!
sb
.
append
(
"
nan
"
)
)
return
false
;
typename
Traits
:
:
Bits
payload
=
num
.
bits
(
)
&
Traits
:
:
kSignificandBits
;
if
(
payload
=
=
(
(
Traits
:
:
kSignificandBits
+
1
)
>
>
1
)
)
return
true
;
return
sb
.
append
(
"
:
0x
"
)
&
&
RenderInBase
<
16
>
(
sb
payload
)
;
}
template
MOZ_MUST_USE
bool
js
:
:
wasm
:
:
RenderNaN
(
StringBuffer
&
b
Raw
<
float
>
num
)
;
template
MOZ_MUST_USE
bool
js
:
:
wasm
:
:
RenderNaN
(
StringBuffer
&
b
Raw
<
double
>
num
)
;
