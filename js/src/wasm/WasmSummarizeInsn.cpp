#
include
"
wasm
/
WasmSummarizeInsn
.
h
"
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Some
;
namespace
js
{
namespace
wasm
{
#
if
defined
(
DEBUG
)
#
if
defined
(
JS_CODEGEN_X64
)
|
|
defined
(
JS_CODEGEN_X86
)
static
bool
ModRMisM
(
uint8_t
modrm
)
{
return
(
modrm
&
0b11
'
000
'
000
)
!
=
0b11
'
000
'
000
;
}
static
uint8_t
ModRMmid3
(
uint8_t
modrm
)
{
return
(
modrm
>
>
3
)
&
0b00000111
;
}
enum
Prefix
:
uint32_t
{
PfxLock
=
1
<
<
0
Pfx66
=
1
<
<
1
PfxF2
=
1
<
<
2
PfxF3
=
1
<
<
3
PfxRexW
=
1
<
<
4
PfxVexL
=
1
<
<
5
}
;
static
bool
isEmpty
(
uint32_t
set
)
{
return
set
=
=
0
;
}
static
bool
hasAllOf
(
uint32_t
set
uint32_t
mustBePresent
)
{
return
(
set
&
mustBePresent
)
=
=
mustBePresent
;
}
static
bool
hasNoneOf
(
uint32_t
set
uint32_t
mustNotBePresent
)
{
return
(
set
&
mustNotBePresent
)
=
=
0
;
}
static
bool
hasOnly
(
uint32_t
set
uint32_t
onlyTheseMayBePresent
)
{
return
(
set
&
~
onlyTheseMayBePresent
)
=
=
0
;
}
enum
Escape
{
EscNone
Esc0F
Esc0F38
Esc0F3A
}
;
Maybe
<
TrapMachineInsn
>
SummarizeTrapInstruction
(
const
uint8_t
*
insn
)
{
const
bool
is64bit
=
sizeof
(
void
*
)
=
=
8
;
uint32_t
prefixes
=
0
;
bool
hasREX
=
false
;
bool
hasVEX
=
false
;
while
(
true
)
{
if
(
insn
[
0
]
>
=
0x40
&
&
insn
[
0
]
<
=
0x4F
&
&
is64bit
)
{
hasREX
=
true
;
if
(
insn
[
0
]
>
=
0x48
)
{
prefixes
|
=
PfxRexW
;
}
insn
+
+
;
continue
;
}
if
(
insn
[
0
]
=
=
0x66
)
{
prefixes
|
=
Pfx66
;
insn
+
+
;
continue
;
}
if
(
insn
[
0
]
=
=
0xF0
)
{
prefixes
|
=
PfxLock
;
insn
+
+
;
continue
;
}
if
(
insn
[
0
]
=
=
0xF2
)
{
prefixes
|
=
PfxF2
;
insn
+
+
;
continue
;
}
if
(
insn
[
0
]
=
=
0xF3
)
{
prefixes
|
=
PfxF3
;
insn
+
+
;
continue
;
}
if
(
insn
[
0
]
=
=
0xC4
|
|
insn
[
0
]
=
=
0xC5
)
{
hasVEX
=
true
;
}
break
;
}
if
(
hasAllOf
(
prefixes
PfxF2
|
PfxF3
)
|
|
(
hasREX
&
&
hasVEX
)
)
{
return
Nothing
(
)
;
}
if
(
!
hasVEX
)
{
int
opSize
=
4
;
if
(
prefixes
&
Pfx66
)
{
opSize
=
2
;
}
if
(
prefixes
&
PfxRexW
)
{
MOZ_ASSERT
(
is64bit
)
;
opSize
=
8
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x0B
&
&
isEmpty
(
prefixes
)
)
{
return
Some
(
TrapMachineInsn
:
:
OfficialUD
)
;
}
if
(
prefixes
&
PfxLock
)
{
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
if
(
insn
[
0
]
=
=
0x86
&
&
ModRMisM
(
insn
[
1
]
)
&
&
isEmpty
(
prefixes
)
)
{
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
if
(
insn
[
0
]
=
=
0x87
&
&
ModRMisM
(
insn
[
1
]
)
&
&
hasOnly
(
prefixes
Pfx66
|
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
if
(
(
insn
[
0
]
=
=
0x88
|
|
insn
[
0
]
=
=
0x8A
)
&
&
ModRMisM
(
insn
[
1
]
)
&
&
isEmpty
(
prefixes
)
)
{
return
Some
(
insn
[
0
]
=
=
0x88
?
TrapMachineInsn
:
:
Store8
:
TrapMachineInsn
:
:
Load8
)
;
}
if
(
(
insn
[
0
]
=
=
0x89
|
|
insn
[
0
]
=
=
0x8B
)
&
&
ModRMisM
(
insn
[
1
]
)
&
&
hasOnly
(
prefixes
Pfx66
|
PfxRexW
)
)
{
return
Some
(
insn
[
0
]
=
=
0x89
?
TrapMachineInsnForStore
(
opSize
)
:
TrapMachineInsnForLoad
(
opSize
)
)
;
}
if
(
insn
[
0
]
=
=
0xC6
&
&
ModRMisM
(
insn
[
1
]
)
&
&
ModRMmid3
(
insn
[
1
]
)
=
=
0
&
&
isEmpty
(
prefixes
)
)
{
return
Some
(
TrapMachineInsn
:
:
Store8
)
;
}
if
(
insn
[
0
]
=
=
0xC7
&
&
ModRMisM
(
insn
[
1
]
)
&
&
ModRMmid3
(
insn
[
1
]
)
=
=
0
&
&
hasOnly
(
prefixes
Pfx66
|
PfxRexW
)
)
{
return
Some
(
TrapMachineInsnForStore
(
opSize
)
)
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0xB6
|
|
insn
[
1
]
=
=
0xBE
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
(
opSize
=
=
2
|
|
opSize
=
=
4
|
|
opSize
=
=
8
)
&
&
hasOnly
(
prefixes
Pfx66
|
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0xB7
|
|
insn
[
1
]
=
=
0xBF
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
(
opSize
=
=
4
|
|
opSize
=
=
8
)
&
&
hasOnly
(
prefixes
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
}
if
(
hasAllOf
(
prefixes
PfxRexW
)
&
&
insn
[
0
]
=
=
0x63
&
&
ModRMisM
(
insn
[
1
]
)
&
&
hasOnly
(
prefixes
Pfx66
|
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x10
|
|
insn
[
1
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxRexW
)
)
{
return
Some
(
insn
[
1
]
=
=
0x10
?
TrapMachineInsn
:
:
Load128
:
TrapMachineInsn
:
:
Store128
)
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x12
|
|
insn
[
1
]
=
=
0x16
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
}
if
(
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x13
|
|
insn
[
1
]
=
=
0x17
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxRexW
)
)
{
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
}
if
(
hasAllOf
(
prefixes
PfxF2
)
&
&
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x10
|
|
insn
[
1
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxRexW
|
PfxF2
)
)
{
return
Some
(
insn
[
1
]
=
=
0x10
?
TrapMachineInsn
:
:
Load64
:
TrapMachineInsn
:
:
Store64
)
;
}
if
(
hasAllOf
(
prefixes
PfxF2
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x12
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxF2
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
}
if
(
hasAllOf
(
prefixes
PfxF3
)
&
&
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x10
|
|
insn
[
1
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxRexW
|
PfxF3
)
)
{
return
Some
(
insn
[
1
]
=
=
0x10
?
TrapMachineInsn
:
:
Load32
:
TrapMachineInsn
:
:
Store32
)
;
}
if
(
hasAllOf
(
prefixes
PfxF3
)
&
&
insn
[
0
]
=
=
0x0F
&
&
(
insn
[
1
]
=
=
0x6F
|
|
insn
[
1
]
=
=
0x7F
)
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
PfxF3
)
)
{
return
Some
(
insn
[
1
]
=
=
0x6F
?
TrapMachineInsn
:
:
Load128
:
TrapMachineInsn
:
:
Store128
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x3A
&
&
insn
[
2
]
=
=
0x20
&
&
ModRMisM
(
insn
[
3
]
)
&
&
hasOnly
(
prefixes
Pfx66
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0xC4
&
&
ModRMisM
(
insn
[
2
]
)
&
&
hasOnly
(
prefixes
Pfx66
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x3A
&
&
insn
[
2
]
=
=
0x21
&
&
ModRMisM
(
insn
[
3
]
)
&
&
hasOnly
(
prefixes
Pfx66
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x3A
&
&
(
insn
[
2
]
=
=
0x14
|
|
insn
[
2
]
=
=
0x15
|
|
insn
[
2
]
=
=
0x17
)
&
&
ModRMisM
(
insn
[
3
]
)
&
&
hasOnly
(
prefixes
Pfx66
)
)
{
return
Some
(
insn
[
2
]
=
=
0x14
?
TrapMachineInsn
:
:
Store8
:
insn
[
2
]
=
=
0x15
?
TrapMachineInsn
:
:
Store16
:
TrapMachineInsn
:
:
Store32
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
insn
[
0
]
=
=
0x0F
&
&
insn
[
1
]
=
=
0x38
&
&
(
insn
[
2
]
=
=
0x20
|
|
insn
[
2
]
=
=
0x23
|
|
insn
[
2
]
=
=
0x25
|
|
insn
[
2
]
=
=
0x30
|
|
insn
[
2
]
=
=
0x33
|
|
insn
[
2
]
=
=
0x35
)
&
&
ModRMisM
(
insn
[
3
]
)
&
&
hasOnly
(
prefixes
Pfx66
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
}
return
Nothing
(
)
;
}
MOZ_ASSERT
(
hasVEX
&
&
!
hasREX
)
;
MOZ_ASSERT
(
hasNoneOf
(
prefixes
PfxRexW
)
)
;
MOZ_ASSERT
(
insn
[
0
]
=
=
0xC4
|
|
insn
[
0
]
=
=
0xC5
)
;
Escape
esc
=
EscNone
;
if
(
insn
[
0
]
=
=
0xC4
)
{
switch
(
insn
[
1
]
&
0x1F
)
{
case
1
:
esc
=
Esc0F
;
break
;
case
2
:
esc
=
Esc0F38
;
break
;
case
3
:
esc
=
Esc0F3A
;
break
;
default
:
return
Nothing
(
)
;
}
switch
(
insn
[
2
]
&
3
)
{
case
0
:
break
;
case
1
:
prefixes
|
=
Pfx66
;
break
;
case
2
:
prefixes
|
=
PfxF3
;
break
;
case
3
:
prefixes
|
=
PfxF2
;
break
;
}
if
(
insn
[
2
]
&
4
)
{
prefixes
|
=
PfxVexL
;
}
if
(
(
insn
[
2
]
&
0x80
)
&
&
is64bit
)
{
prefixes
|
=
PfxRexW
;
}
insn
+
=
3
;
}
else
if
(
insn
[
0
]
=
=
0xC5
)
{
esc
=
Esc0F
;
switch
(
insn
[
1
]
&
3
)
{
case
0
:
break
;
case
1
:
prefixes
|
=
Pfx66
;
break
;
case
2
:
prefixes
|
=
PfxF3
;
break
;
case
3
:
prefixes
|
=
PfxF2
;
break
;
}
if
(
insn
[
1
]
&
4
)
{
prefixes
|
=
PfxVexL
;
}
insn
+
=
2
;
}
if
(
hasAllOf
(
prefixes
PfxF2
|
PfxF3
)
)
{
return
Nothing
(
)
;
}
if
(
hasNoneOf
(
prefixes
Pfx66
|
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
(
insn
[
0
]
=
=
0x10
|
|
insn
[
0
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x10
?
TrapMachineInsn
:
:
Load128
:
TrapMachineInsn
:
:
Store128
)
;
}
if
(
hasAllOf
(
prefixes
PfxF2
)
&
&
hasNoneOf
(
prefixes
Pfx66
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
(
insn
[
0
]
=
=
0x10
|
|
insn
[
0
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x10
?
TrapMachineInsn
:
:
Load64
:
TrapMachineInsn
:
:
Store64
)
;
}
if
(
hasAllOf
(
prefixes
PfxF3
)
&
&
hasNoneOf
(
prefixes
Pfx66
|
PfxF2
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
(
insn
[
0
]
=
=
0x10
|
|
insn
[
0
]
=
=
0x11
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x10
?
TrapMachineInsn
:
:
Load32
:
TrapMachineInsn
:
:
Store32
)
;
}
if
(
hasAllOf
(
prefixes
PfxF2
)
&
&
hasNoneOf
(
prefixes
Pfx66
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
insn
[
0
]
=
=
0x12
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
}
if
(
hasNoneOf
(
prefixes
Pfx66
|
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
(
insn
[
0
]
=
=
0x13
|
|
insn
[
0
]
=
=
0x17
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
}
if
(
hasAllOf
(
prefixes
PfxF3
)
&
&
hasNoneOf
(
prefixes
Pfx66
|
PfxF2
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
(
insn
[
0
]
=
=
0x6F
|
|
insn
[
0
]
=
=
0x7F
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x6F
?
TrapMachineInsn
:
:
Load128
:
TrapMachineInsn
:
:
Store128
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
hasNoneOf
(
prefixes
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F
&
&
insn
[
0
]
=
=
0xC4
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
hasNoneOf
(
prefixes
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F38
&
&
(
insn
[
0
]
=
=
0x20
|
|
insn
[
0
]
=
=
0x23
|
|
insn
[
0
]
=
=
0x25
|
|
insn
[
0
]
=
=
0x30
|
|
insn
[
0
]
=
=
0x33
|
|
insn
[
0
]
=
=
0x35
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
hasNoneOf
(
prefixes
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F38
&
&
(
insn
[
0
]
=
=
0x78
|
|
insn
[
0
]
=
=
0x79
|
|
insn
[
0
]
=
=
0x18
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x78
?
TrapMachineInsn
:
:
Load8
:
insn
[
0
]
=
=
0x79
?
TrapMachineInsn
:
:
Load16
:
TrapMachineInsn
:
:
Load32
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
hasNoneOf
(
prefixes
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F3A
&
&
(
insn
[
0
]
=
=
0x14
|
|
insn
[
0
]
=
=
0x15
)
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
insn
[
0
]
=
=
0x14
?
TrapMachineInsn
:
:
Store8
:
TrapMachineInsn
:
:
Store16
)
;
}
if
(
hasAllOf
(
prefixes
Pfx66
)
&
&
hasNoneOf
(
prefixes
PfxF2
|
PfxF3
|
PfxRexW
|
PfxVexL
)
&
&
esc
=
=
Esc0F3A
&
&
insn
[
0
]
=
=
0x17
&
&
ModRMisM
(
insn
[
1
]
)
)
{
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
}
return
Nothing
(
)
;
}
#
elif
defined
(
JS_CODEGEN_ARM64
)
Maybe
<
TrapMachineInsn
>
SummarizeTrapInstruction
(
const
uint8_t
*
insnAddr
)
{
MOZ_ASSERT
(
0
=
=
(
uintptr_t
(
insnAddr
)
&
3
)
)
;
const
uint32_t
insn
=
*
(
uint32_t
*
)
insnAddr
;
#
define
INSN
(
_maxIx
_minIx
)
\
(
(
insn
>
>
(
_minIx
)
)
&
(
(
uint32_t
(
1
)
<
<
(
(
_maxIx
)
-
(
_minIx
)
+
1
)
)
-
1
)
)
if
(
insn
=
=
0xD4A00000
)
{
return
Some
(
TrapMachineInsn
:
:
OfficialUD
)
;
}
switch
(
INSN
(
31
22
)
)
{
case
0b11
'
111
'
00100
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111
'
00100
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b01
'
111
'
00100
:
return
Some
(
TrapMachineInsn
:
:
Store16
)
;
case
0b00
'
111
'
00100
:
return
Some
(
TrapMachineInsn
:
:
Store8
)
;
case
0b11
'
111
'
00101
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111
'
00101
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
111
'
00101
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b00
'
111
'
00101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
if
(
INSN
(
11
10
)
=
=
0b00
)
{
switch
(
INSN
(
31
21
)
)
{
case
0b11
'
111
'
00001
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111
'
00001
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
111
'
00001
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b11
'
111
'
00000
'
0
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111
'
00000
'
0
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b01
'
111
'
00000
'
0
:
return
Some
(
TrapMachineInsn
:
:
Store16
)
;
case
0b10
'
111
'
000
'
10
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
111
'
000
'
11
'
0
:
case
0b01
'
111
'
000
'
10
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
}
}
switch
(
INSN
(
31
22
)
)
{
case
0b10
'
111
'
001
'
10
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
111
'
001
'
10
:
case
0b01
'
111
'
001
'
11
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b00
'
111
'
001
'
10
:
case
0b00
'
111
'
001
'
11
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
if
(
INSN
(
11
10
)
=
=
0b10
)
{
switch
(
INSN
(
31
21
)
)
{
case
0b10
'
1110001
'
01
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
1110001
'
01
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b01
'
1110001
'
11
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b00
'
1110001
'
01
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
case
0b00
'
1110001
'
11
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
}
if
(
INSN
(
11
10
)
=
=
0b10
)
{
switch
(
INSN
(
31
21
)
)
{
case
0b11
'
111000001
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111000001
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b01
'
111000001
:
return
Some
(
TrapMachineInsn
:
:
Store16
)
;
case
0b00
'
111000001
:
return
Some
(
TrapMachineInsn
:
:
Store8
)
;
case
0b11
'
111000011
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111000011
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
111000011
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b00
'
111000011
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
}
switch
(
INSN
(
31
22
)
)
{
case
0b11
'
111
'
101
'
00
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111
'
101
'
00
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b11
'
111
'
101
'
01
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111
'
101
'
01
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
}
if
(
INSN
(
11
10
)
=
=
0b00
)
{
switch
(
INSN
(
31
21
)
)
{
case
0b11
'
111
'
100
'
00
'
0
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111
'
100
'
00
'
0
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b11
'
111
'
100
'
01
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111
'
100
'
01
'
0
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
}
}
if
(
INSN
(
11
10
)
=
=
0b10
)
{
switch
(
INSN
(
31
21
)
)
{
case
0b11
'
111100
'
001
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b10
'
111100
'
001
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b11
'
111100
'
011
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
111100
'
011
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
}
}
if
(
INSN
(
11
10
)
=
=
0b00
)
{
if
(
INSN
(
31
21
)
=
=
0b00
'
111
'
100
'
10
'
0
)
{
return
Some
(
TrapMachineInsn
:
:
Store128
)
;
}
if
(
INSN
(
31
21
)
=
=
0b00
'
111
'
100
'
11
'
0
)
{
return
Some
(
TrapMachineInsn
:
:
Load128
)
;
}
}
if
(
INSN
(
31
22
)
=
=
0b00
'
111
'
101
'
10
)
{
return
Some
(
TrapMachineInsn
:
:
Store128
)
;
}
if
(
INSN
(
31
22
)
=
=
0b00
'
111
'
101
'
11
)
{
return
Some
(
TrapMachineInsn
:
:
Load128
)
;
}
if
(
INSN
(
11
10
)
=
=
0b10
)
{
if
(
INSN
(
31
21
)
=
=
0b00
'
111100
'
101
)
{
return
Some
(
TrapMachineInsn
:
:
Store128
)
;
}
if
(
INSN
(
31
21
)
=
=
0b00
'
111100
'
111
)
{
return
Some
(
TrapMachineInsn
:
:
Load128
)
;
}
}
switch
(
INSN
(
31
10
)
)
{
case
0b11
'
001000
'
010
'
11111
'
0
'
11111
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
case
0b10
'
001000
'
010
'
11111
'
0
'
11111
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b01
'
001000
'
010
'
11111
'
0
'
11111
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b00
'
001000
'
010
'
11111
'
0
'
11111
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
}
if
(
INSN
(
29
21
)
=
=
0b111
'
0000
'
11
&
&
INSN
(
4
0
)
=
=
0b11111
)
{
switch
(
INSN
(
15
10
)
)
{
case
0b0
'
000
'
00
:
case
0b0
'
001
'
00
:
case
0b0
'
010
'
00
:
case
0b0
'
011
'
00
:
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
}
if
(
INSN
(
29
21
)
=
=
0b111
'
0001
'
11
)
{
switch
(
INSN
(
15
10
)
)
{
case
0b0
'
000
'
00
:
case
0b0
'
001
'
00
:
case
0b0
'
010
'
00
:
case
0b0
'
011
'
00
:
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
}
if
(
INSN
(
29
21
)
=
=
0b001000111
&
&
INSN
(
15
10
)
=
=
0b111111
)
{
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
if
(
INSN
(
29
21
)
=
=
0b11100011
'
1
&
&
INSN
(
15
10
)
=
=
0b100000
)
{
return
Some
(
TrapMachineInsn
:
:
Atomic
)
;
}
#
undef
INSN
return
Nothing
(
)
;
}
#
elif
defined
(
JS_CODEGEN_ARM
)
Maybe
<
TrapMachineInsn
>
SummarizeTrapInstruction
(
const
uint8_t
*
insnAddr
)
{
MOZ_ASSERT
(
0
=
=
(
uintptr_t
(
insnAddr
)
&
3
)
)
;
const
uint32_t
insn
=
*
(
uint32_t
*
)
insnAddr
;
#
define
INSN
(
_maxIx
_minIx
)
\
(
(
insn
>
>
(
_minIx
)
)
&
(
(
uint32_t
(
1
)
<
<
(
(
_maxIx
)
-
(
_minIx
)
+
1
)
)
-
1
)
)
if
(
insn
=
=
0xE7F000F0
)
{
return
Some
(
TrapMachineInsn
:
:
OfficialUD
)
;
}
if
(
INSN
(
31
28
)
=
=
0b1110
&
&
INSN
(
27
24
)
=
=
0b0101
&
&
INSN
(
19
16
)
!
=
0b1111
)
{
switch
(
INSN
(
22
20
)
)
{
case
0b000
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b001
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b100
:
return
Some
(
TrapMachineInsn
:
:
Store8
)
;
case
0b101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
default
:
break
;
}
}
if
(
INSN
(
31
28
)
=
=
0b1110
&
&
INSN
(
27
24
)
=
=
0b0001
&
&
INSN
(
22
21
)
=
=
0b10
)
{
switch
(
(
INSN
(
20
20
)
<
<
4
)
|
INSN
(
7
4
)
)
{
case
0b0
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Store16
)
;
case
0b1
'
1101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
case
0b1
'
1111
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b1
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
default
:
break
;
}
}
if
(
INSN
(
31
28
)
=
=
0b1110
&
&
INSN
(
27
24
)
=
=
0b0111
&
&
INSN
(
11
4
)
=
=
0b00000
'
00
'
0
)
{
switch
(
INSN
(
22
20
)
)
{
case
0b000
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b100
:
return
Some
(
TrapMachineInsn
:
:
Store8
)
;
case
0b001
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
default
:
break
;
}
}
if
(
INSN
(
31
28
)
=
=
0b1110
&
&
INSN
(
27
24
)
=
=
0b0001
&
&
INSN
(
22
21
)
=
=
0b00
&
&
INSN
(
11
8
)
=
=
0b0000
)
{
switch
(
(
INSN
(
20
20
)
<
<
4
)
|
INSN
(
7
4
)
)
{
case
0b0
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Store16
)
;
case
0b1
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b1
'
1101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
case
0b1
'
1111
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
default
:
break
;
}
}
if
(
INSN
(
31
28
)
=
=
0b1110
&
&
INSN
(
27
24
)
=
=
0b1101
&
&
INSN
(
21
21
)
=
=
0b0
)
{
switch
(
(
INSN
(
20
20
)
<
<
4
)
|
(
INSN
(
11
8
)
)
)
{
case
0b0
'
1010
:
return
Some
(
TrapMachineInsn
:
:
Store32
)
;
case
0b0
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Store64
)
;
case
0b1
'
1010
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b1
'
1011
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
default
:
break
;
}
}
if
(
INSN
(
31
23
)
=
=
0b1111
'
0100
'
1
&
&
INSN
(
20
20
)
=
=
0
&
&
INSN
(
11
0
)
=
=
0b1000
'
0000
'
1111
)
{
return
INSN
(
21
21
)
=
=
1
?
Some
(
TrapMachineInsn
:
:
Load32
)
:
Some
(
TrapMachineInsn
:
:
Store32
)
;
}
if
(
INSN
(
31
23
)
=
=
0b1111
'
0100
'
0
&
&
INSN
(
20
20
)
=
=
0
&
&
INSN
(
11
0
)
=
=
0b0111
'
1100
'
1111
)
{
return
INSN
(
21
21
)
=
=
1
?
Some
(
TrapMachineInsn
:
:
Load64
)
:
Some
(
TrapMachineInsn
:
:
Store64
)
;
}
if
(
INSN
(
31
23
)
=
=
0b1110
'
0001
'
1
&
&
INSN
(
11
0
)
=
=
0b1111
'
1001
'
1111
)
{
switch
(
INSN
(
22
20
)
)
{
case
0b101
:
return
Some
(
TrapMachineInsn
:
:
Load8
)
;
case
0b111
:
return
Some
(
TrapMachineInsn
:
:
Load16
)
;
case
0b001
:
return
Some
(
TrapMachineInsn
:
:
Load32
)
;
case
0b011
:
return
Some
(
TrapMachineInsn
:
:
Load64
)
;
default
:
break
;
}
}
#
undef
INSN
return
Nothing
(
)
;
}
#
elif
defined
(
JS_CODEGEN_NONE
)
Maybe
<
TrapMachineInsn
>
SummarizeTrapInstruction
(
const
uint8_t
*
insnAddr
)
{
MOZ_CRASH
(
)
;
}
#
else
#
error
"
SummarizeTrapInstruction
:
not
implemented
on
this
architecture
"
#
endif
#
endif
}
}
