#
ifndef
wasmdebugframe_js_h
#
define
wasmdebugframe_js_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
namespace
js
{
class
WasmFunctionCallObject
;
namespace
wasm
{
class
DebugFrame
{
union
{
int32_t
resultI32_
;
int64_t
resultI64_
;
float
resultF32_
;
double
resultF64_
;
}
;
uint32_t
funcIndex_
;
uint32_t
reserved0_
;
union
{
struct
{
bool
observing_
:
1
;
bool
isDebuggee_
:
1
;
bool
prevUpToDate_
:
1
;
bool
hasCachedSavedFrame_
:
1
;
}
;
void
*
reserved1_
;
}
;
TlsData
*
tlsData_
;
Frame
frame_
;
explicit
DebugFrame
(
)
{
}
public
:
inline
uint32_t
funcIndex
(
)
const
{
return
funcIndex_
;
}
inline
TlsData
*
tlsData
(
)
const
{
return
tlsData_
;
}
inline
Frame
&
frame
(
)
{
return
frame_
;
}
Instance
*
instance
(
)
const
;
GlobalObject
*
global
(
)
const
;
JSObject
*
environmentChain
(
)
const
;
void
observeFrame
(
JSContext
*
cx
)
;
void
leaveFrame
(
JSContext
*
cx
)
;
void
trace
(
JSTracer
*
trc
)
;
inline
bool
isDebuggee
(
)
const
{
return
isDebuggee_
;
}
inline
void
setIsDebuggee
(
)
{
isDebuggee_
=
true
;
}
inline
void
unsetIsDebuggee
(
)
{
isDebuggee_
=
false
;
}
inline
bool
prevUpToDate
(
)
const
{
return
prevUpToDate_
;
}
inline
void
setPrevUpToDate
(
)
{
prevUpToDate_
=
true
;
}
inline
void
unsetPrevUpToDate
(
)
{
prevUpToDate_
=
false
;
}
inline
bool
hasCachedSavedFrame
(
)
const
{
return
hasCachedSavedFrame_
;
}
inline
void
setHasCachedSavedFrame
(
)
{
hasCachedSavedFrame_
=
true
;
}
inline
void
*
resultsPtr
(
)
{
return
&
resultI32_
;
}
static
constexpr
size_t
offsetOfResults
(
)
{
return
offsetof
(
DebugFrame
resultI32_
)
;
}
static
constexpr
size_t
offsetOfFlagsWord
(
)
{
return
offsetof
(
DebugFrame
reserved1_
)
;
}
static
constexpr
size_t
offsetOfFuncIndex
(
)
{
return
offsetof
(
DebugFrame
funcIndex_
)
;
}
static
constexpr
size_t
offsetOfTlsData
(
)
{
return
offsetof
(
DebugFrame
tlsData_
)
;
}
static
constexpr
size_t
offsetOfFrame
(
)
{
return
offsetof
(
DebugFrame
frame_
)
;
}
}
;
static_assert
(
DebugFrame
:
:
offsetOfResults
(
)
=
=
0
"
results
shall
be
at
offset
0
"
)
;
static_assert
(
DebugFrame
:
:
offsetOfTlsData
(
)
+
sizeof
(
TlsData
*
)
=
=
DebugFrame
:
:
offsetOfFrame
(
)
"
TLS
pointer
must
be
a
field
just
before
the
wasm
frame
"
)
;
static_assert
(
sizeof
(
DebugFrame
)
%
8
=
=
0
&
&
DebugFrame
:
:
offsetOfFrame
(
)
%
8
=
=
0
"
DebugFrame
and
its
portion
is
8
-
bytes
aligned
for
AbstractFramePtr
"
)
;
}
}
#
endif
