#
ifndef
wasm_debugframe_h
#
define
wasm_debugframe_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
wasm
/
WasmCodegenConstants
.
h
"
#
include
"
wasm
/
WasmFrame
.
h
"
#
include
"
wasm
/
WasmValType
.
h
"
#
include
"
wasm
/
WasmValue
.
h
"
namespace
js
{
class
GlobalObject
;
namespace
wasm
{
class
Instance
;
class
DebugFrame
{
union
SpilledRegisterResult
{
private
:
int32_t
i32_
;
int64_t
i64_
;
intptr_t
ref_
;
AnyRef
anyref_
;
float
f32_
;
double
f64_
;
#
ifdef
ENABLE_WASM_SIMD
V128
v128_
;
#
endif
#
ifdef
DEBUG
static
inline
void
assertAllValueTypesHandled
(
ValType
type
)
{
switch
(
type
.
kind
(
)
)
{
case
ValType
:
:
I32
:
case
ValType
:
:
I64
:
case
ValType
:
:
F32
:
case
ValType
:
:
F64
:
case
ValType
:
:
V128
:
return
;
case
ValType
:
:
Ref
:
switch
(
type
.
refTypeKind
(
)
)
{
case
RefType
:
:
Func
:
case
RefType
:
:
Extern
:
case
RefType
:
:
Eq
:
case
RefType
:
:
TypeRef
:
return
;
}
}
}
#
endif
}
;
SpilledRegisterResult
registerResults_
[
MaxRegisterResults
]
;
JS
:
:
Value
cachedReturnJSValue_
;
void
*
stackResultsPointer_
;
uint32_t
funcIndex_
;
union
Flags
{
struct
{
uint32_t
observing
:
1
;
uint32_t
isDebuggee
:
1
;
uint32_t
prevUpToDate
:
1
;
uint32_t
hasCachedSavedFrame
:
1
;
uint32_t
hasCachedReturnJSValue
:
1
;
uint32_t
hasSpilledRefRegisterResult
:
MaxRegisterResults
;
}
;
uint32_t
allFlags
;
}
flags_
;
protected
:
#
if
defined
(
JS_CODEGEN_ARM
)
|
|
defined
(
JS_CODEGEN_X86
)
|
|
defined
(
__wasi__
)
uint32_t
padding_
;
#
endif
#
if
defined
(
ENABLE_WASM_SIMD
)
&
&
defined
(
JS_CODEGEN_ARM64
)
uint64_t
padding_
;
#
endif
private
:
Frame
frame_
;
public
:
static
DebugFrame
*
from
(
Frame
*
fp
)
;
Frame
&
frame
(
)
{
return
frame_
;
}
uint32_t
funcIndex
(
)
const
{
return
funcIndex_
;
}
Instance
*
instance
(
)
;
const
Instance
*
instance
(
)
const
;
GlobalObject
*
global
(
)
;
bool
hasGlobal
(
const
GlobalObject
*
global
)
const
;
JSObject
*
environmentChain
(
)
;
bool
getLocal
(
uint32_t
localIndex
JS
:
:
MutableHandleValue
vp
)
;
bool
hasCachedReturnJSValue
(
)
const
{
return
flags_
.
hasCachedReturnJSValue
;
}
[
[
nodiscard
]
]
bool
updateReturnJSValue
(
JSContext
*
cx
)
;
JS
:
:
HandleValue
returnValue
(
)
const
;
void
clearReturnJSValue
(
)
;
void
observe
(
JSContext
*
cx
)
;
void
leave
(
JSContext
*
cx
)
;
bool
isDebuggee
(
)
const
{
return
flags_
.
isDebuggee
;
}
void
setIsDebuggee
(
)
{
flags_
.
isDebuggee
=
true
;
}
void
unsetIsDebuggee
(
)
{
flags_
.
isDebuggee
=
false
;
}
bool
prevUpToDate
(
)
const
{
return
flags_
.
prevUpToDate
;
}
void
setPrevUpToDate
(
)
{
flags_
.
prevUpToDate
=
true
;
}
void
unsetPrevUpToDate
(
)
{
flags_
.
prevUpToDate
=
false
;
}
bool
hasCachedSavedFrame
(
)
const
{
return
flags_
.
hasCachedSavedFrame
;
}
void
setHasCachedSavedFrame
(
)
{
flags_
.
hasCachedSavedFrame
=
true
;
}
void
clearHasCachedSavedFrame
(
)
{
flags_
.
hasCachedSavedFrame
=
false
;
}
bool
hasSpilledRegisterRefResult
(
size_t
n
)
const
{
uint32_t
mask
=
hasSpilledRegisterRefResultBitMask
(
n
)
;
return
(
flags_
.
allFlags
&
mask
)
!
=
0
;
}
static
constexpr
size_t
offsetOfRegisterResults
(
)
{
return
offsetof
(
DebugFrame
registerResults_
)
;
}
static
constexpr
size_t
offsetOfRegisterResult
(
size_t
n
)
{
MOZ_ASSERT
(
n
<
MaxRegisterResults
)
;
return
offsetOfRegisterResults
(
)
+
n
*
sizeof
(
SpilledRegisterResult
)
;
}
static
constexpr
size_t
offsetOfCachedReturnJSValue
(
)
{
return
offsetof
(
DebugFrame
cachedReturnJSValue_
)
;
}
static
constexpr
size_t
offsetOfStackResultsPointer
(
)
{
return
offsetof
(
DebugFrame
stackResultsPointer_
)
;
}
static
constexpr
size_t
offsetOfFlags
(
)
{
return
offsetof
(
DebugFrame
flags_
)
;
}
static
constexpr
uint32_t
hasSpilledRegisterRefResultBitMask
(
size_t
n
)
{
MOZ_ASSERT
(
n
<
MaxRegisterResults
)
;
union
Flags
flags
=
{
.
allFlags
=
0
}
;
flags
.
hasSpilledRefRegisterResult
=
1
<
<
n
;
MOZ_ASSERT
(
flags
.
allFlags
!
=
0
)
;
return
flags
.
allFlags
;
}
static
constexpr
size_t
offsetOfFuncIndex
(
)
{
return
offsetof
(
DebugFrame
funcIndex_
)
;
}
static
constexpr
size_t
offsetOfFrame
(
)
{
return
offsetof
(
DebugFrame
frame_
)
;
}
static
const
unsigned
Alignment
=
8
;
static
void
alignmentStaticAsserts
(
)
;
}
;
}
}
#
endif
