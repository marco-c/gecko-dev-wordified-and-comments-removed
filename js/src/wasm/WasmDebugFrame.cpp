#
include
"
wasm
/
WasmDebugFrame
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
wasm
/
WasmBaselineCompile
.
h
"
#
include
"
wasm
/
WasmInstance
.
h
"
#
include
"
jsobjinlines
.
h
"
using
namespace
js
;
using
namespace
js
:
:
wasm
;
Instance
*
DebugFrame
:
:
instance
(
)
const
{
return
tlsData_
-
>
instance
;
}
GlobalObject
*
DebugFrame
:
:
global
(
)
const
{
return
&
instance
(
)
-
>
object
(
)
-
>
global
(
)
;
}
JSObject
*
DebugFrame
:
:
environmentChain
(
)
const
{
return
&
global
(
)
-
>
lexicalEnvironment
(
)
;
}
void
DebugFrame
:
:
observeFrame
(
JSContext
*
cx
)
{
if
(
observing_
)
return
;
instance
(
)
-
>
code
(
)
.
adjustEnterAndLeaveFrameTrapsState
(
cx
true
)
;
observing_
=
true
;
}
void
DebugFrame
:
:
leaveFrame
(
JSContext
*
cx
)
{
if
(
!
observing_
)
return
;
instance
(
)
-
>
code
(
)
.
adjustEnterAndLeaveFrameTrapsState
(
cx
false
)
;
observing_
=
false
;
}
bool
DebugFrame
:
:
getLocal
(
uint32_t
localIndex
MutableHandleValue
vp
)
{
ValTypeVector
locals
;
size_t
argsLength
;
if
(
!
instance
(
)
-
>
code
(
)
.
debugGetLocalTypes
(
funcIndex
(
)
&
locals
&
argsLength
)
)
return
false
;
BaseLocalIter
iter
(
locals
argsLength
true
)
;
while
(
!
iter
.
done
(
)
&
&
iter
.
index
(
)
<
localIndex
)
iter
+
+
;
MOZ_ALWAYS_TRUE
(
!
iter
.
done
(
)
)
;
uint8_t
*
frame
=
static_cast
<
uint8_t
*
>
(
(
void
*
)
this
)
+
offsetOfFrame
(
)
;
void
*
dataPtr
=
frame
-
iter
.
frameOffset
(
)
;
switch
(
iter
.
mirType
(
)
)
{
case
jit
:
:
MIRType
:
:
Int32
:
vp
.
set
(
Int32Value
(
*
static_cast
<
int32_t
*
>
(
dataPtr
)
)
)
;
break
;
case
jit
:
:
MIRType
:
:
Int64
:
vp
.
set
(
NumberValue
(
(
double
)
*
static_cast
<
int64_t
*
>
(
dataPtr
)
)
)
;
break
;
case
jit
:
:
MIRType
:
:
Float32
:
vp
.
set
(
NumberValue
(
*
static_cast
<
float
*
>
(
dataPtr
)
)
)
;
break
;
case
jit
:
:
MIRType
:
:
Double
:
vp
.
set
(
NumberValue
(
*
static_cast
<
double
*
>
(
dataPtr
)
)
)
;
break
;
default
:
MOZ_CRASH
(
"
local
type
"
)
;
}
return
true
;
}
