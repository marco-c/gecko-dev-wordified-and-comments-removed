#
ifndef
wasm_pi_h
#
define
wasm_pi_h
#
include
"
mozilla
/
DoublyLinkedList
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
wasm
/
WasmAnyRef
.
h
"
#
include
"
wasm
/
WasmTypeDef
.
h
"
namespace
js
{
class
PromiseObject
;
class
WasmStructObject
;
namespace
wasm
{
class
SuspenderContext
;
class
SuspenderObject
;
static
const
uint32_t
SuspenderObjectDataSlot
=
0
;
enum
SuspenderState
{
Initial
Moribund
Active
Suspended
}
;
class
SuspenderObjectData
:
public
mozilla
:
:
DoublyLinkedListElement
<
SuspenderObjectData
>
{
void
*
stackMemory_
;
void
*
mainFP_
;
void
*
mainSP_
;
void
*
suspendableFP_
;
void
*
suspendableSP_
;
void
*
suspendableExitFP_
;
void
*
suspendedReturnAddress_
;
SuspenderState
state_
;
SuspenderContext
*
suspendedBy_
;
#
if
defined
(
_WIN32
)
void
*
savedStackBase_
;
void
*
savedStackLimit_
;
#
endif
public
:
explicit
SuspenderObjectData
(
void
*
stackMemory
)
;
inline
SuspenderState
state
(
)
const
{
return
state_
;
}
void
setState
(
SuspenderState
state
)
{
state_
=
state
;
}
inline
bool
traceable
(
)
const
{
return
suspendedBy_
!
=
nullptr
;
}
inline
SuspenderContext
*
suspendedBy
(
)
const
{
return
suspendedBy_
;
}
void
setSuspendedBy
(
SuspenderContext
*
suspendedBy
)
{
suspendedBy_
=
suspendedBy
;
}
inline
void
*
stackMemory
(
)
const
{
return
stackMemory_
;
}
inline
void
*
mainFP
(
)
const
{
return
mainFP_
;
}
inline
void
*
mainSP
(
)
const
{
return
mainSP_
;
}
inline
void
*
suspendableFP
(
)
const
{
return
suspendableFP_
;
}
inline
void
*
suspendableSP
(
)
const
{
return
suspendableSP_
;
}
inline
void
*
suspendableExitFP
(
)
const
{
return
suspendableExitFP_
;
}
inline
void
*
suspendedReturnAddress
(
)
const
{
return
suspendedReturnAddress_
;
}
void
releaseStackMemory
(
)
;
#
if
defined
(
_WIN32
)
void
updateTIBStackFields
(
)
;
void
restoreTIBStackFields
(
)
;
#
endif
#
if
defined
(
JS_SIMULATOR_ARM64
)
|
|
defined
(
JS_SIMULATOR_ARM
)
void
switchSimulatorToMain
(
)
;
void
switchSimulatorToSuspendable
(
)
;
#
endif
static
constexpr
size_t
offsetOfMainFP
(
)
{
return
offsetof
(
SuspenderObjectData
mainFP_
)
;
}
static
constexpr
size_t
offsetOfMainSP
(
)
{
return
offsetof
(
SuspenderObjectData
mainSP_
)
;
}
static
constexpr
size_t
offsetOfSuspendableFP
(
)
{
return
offsetof
(
SuspenderObjectData
suspendableFP_
)
;
}
static
constexpr
size_t
offsetOfSuspendableSP
(
)
{
return
offsetof
(
SuspenderObjectData
suspendableSP_
)
;
}
static
constexpr
size_t
offsetOfSuspendableExitFP
(
)
{
return
offsetof
(
SuspenderObjectData
suspendableExitFP_
)
;
}
static
constexpr
size_t
offsetOfSuspendedReturnAddress
(
)
{
return
offsetof
(
SuspenderObjectData
suspendedReturnAddress_
)
;
}
}
;
#
ifdef
ENABLE_WASM_JSPI
using
CallOnMainStackFn
=
bool
(
*
)
(
void
*
data
)
;
bool
CallOnMainStack
(
JSContext
*
cx
CallOnMainStackFn
fn
void
*
data
)
;
JSFunction
*
WasmSuspendingFunctionCreate
(
JSContext
*
cx
HandleObject
func
wasm
:
:
ValTypeVector
&
&
params
wasm
:
:
ValTypeVector
&
&
results
)
;
JSFunction
*
WasmSuspendingFunctionCreate
(
JSContext
*
cx
HandleObject
func
const
FuncType
&
type
)
;
JSFunction
*
WasmPromisingFunctionCreate
(
JSContext
*
cx
HandleObject
func
wasm
:
:
ValTypeVector
&
&
params
wasm
:
:
ValTypeVector
&
&
results
)
;
SuspenderObject
*
CurrentSuspender
(
Instance
*
instance
int
reserved
)
;
SuspenderObject
*
CreateSuspender
(
Instance
*
instance
int
reserved
)
;
PromiseObject
*
CreatePromisingPromise
(
Instance
*
instance
SuspenderObject
*
suspender
)
;
JSObject
*
GetSuspendingPromiseResult
(
Instance
*
instance
PromiseObject
*
promise
SuspenderObject
*
suspender
)
;
int32_t
AddPromiseReactions
(
Instance
*
instance
SuspenderObject
*
suspender
PromiseObject
*
promise
JSFunction
*
continueOnSuspendable
)
;
int32_t
SetPromisingPromiseResults
(
Instance
*
instance
SuspenderObject
*
suspender
WasmStructObject
*
results
)
;
void
UpdateSuspenderState
(
Instance
*
instance
SuspenderObject
*
suspender
UpdateSuspenderStateAction
action
)
;
#
endif
}
}
#
endif
