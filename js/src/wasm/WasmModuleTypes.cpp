#
include
"
wasm
/
WasmModuleTypes
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
vm
/
JSAtomUtils
.
h
"
#
include
"
vm
/
MallocProvider
.
h
"
#
include
"
wasm
/
WasmUtility
.
h
"
#
include
"
vm
/
JSAtomUtils
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
wasm
;
using
mozilla
:
:
CheckedInt32
;
using
mozilla
:
:
MallocSizeOf
;
CacheableName
CacheableName
:
:
fromUTF8Chars
(
UniqueChars
&
&
utf8Chars
)
{
size_t
length
=
strlen
(
utf8Chars
.
get
(
)
)
;
UTF8Bytes
bytes
;
bytes
.
replaceRawBuffer
(
utf8Chars
.
release
(
)
length
length
+
1
)
;
return
CacheableName
(
std
:
:
move
(
bytes
)
)
;
}
bool
CacheableName
:
:
fromUTF8Chars
(
const
char
*
utf8Chars
CacheableName
*
name
)
{
size_t
utf8CharsLen
=
strlen
(
utf8Chars
)
;
UTF8Bytes
bytes
;
if
(
!
bytes
.
resizeUninitialized
(
utf8CharsLen
)
)
{
return
false
;
}
memcpy
(
bytes
.
begin
(
)
utf8Chars
utf8CharsLen
)
;
*
name
=
CacheableName
(
std
:
:
move
(
bytes
)
)
;
return
true
;
}
MOZ_RUNINIT
BranchHintVector
BranchHintCollection
:
:
invalidVector_
;
JSString
*
CacheableName
:
:
toJSString
(
JSContext
*
cx
)
const
{
return
NewStringCopyUTF8N
(
cx
JS
:
:
UTF8Chars
(
begin
(
)
length
(
)
)
)
;
}
JSAtom
*
CacheableName
:
:
toAtom
(
JSContext
*
cx
)
const
{
return
AtomizeUTF8Chars
(
cx
begin
(
)
length
(
)
)
;
}
bool
CacheableName
:
:
toPropertyKey
(
JSContext
*
cx
MutableHandleId
propertyKey
)
const
{
JSAtom
*
atom
=
toAtom
(
cx
)
;
if
(
!
atom
)
{
return
false
;
}
propertyKey
.
set
(
AtomToId
(
atom
)
)
;
return
true
;
}
UniqueChars
CacheableName
:
:
toQuotedString
(
JSContext
*
cx
)
const
{
RootedString
atom
(
cx
toAtom
(
cx
)
)
;
if
(
!
atom
)
{
return
nullptr
;
}
return
QuoteString
(
cx
atom
.
get
(
)
)
;
}
size_t
CacheableName
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
bytes_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
Import
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
module
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
field
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
Export
:
:
Export
(
CacheableName
&
&
fieldName
uint32_t
index
DefinitionKind
kind
)
:
fieldName_
(
std
:
:
move
(
fieldName
)
)
{
pod
.
kind_
=
kind
;
pod
.
index_
=
index
;
}
uint32_t
Export
:
:
funcIndex
(
)
const
{
MOZ_ASSERT
(
pod
.
kind_
=
=
DefinitionKind
:
:
Function
)
;
return
pod
.
index_
;
}
uint32_t
Export
:
:
memoryIndex
(
)
const
{
MOZ_ASSERT
(
pod
.
kind_
=
=
DefinitionKind
:
:
Memory
)
;
return
pod
.
index_
;
}
uint32_t
Export
:
:
globalIndex
(
)
const
{
MOZ_ASSERT
(
pod
.
kind_
=
=
DefinitionKind
:
:
Global
)
;
return
pod
.
index_
;
}
uint32_t
Export
:
:
tagIndex
(
)
const
{
MOZ_ASSERT
(
pod
.
kind_
=
=
DefinitionKind
:
:
Tag
)
;
return
pod
.
index_
;
}
uint32_t
Export
:
:
tableIndex
(
)
const
{
MOZ_ASSERT
(
pod
.
kind_
=
=
DefinitionKind
:
:
Table
)
;
return
pod
.
index_
;
}
size_t
Export
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
fieldName_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
GlobalDesc
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
initial_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
bool
TagType
:
:
initialize
(
const
SharedTypeDef
&
funcType
)
{
MOZ_ASSERT
(
funcType
-
>
isFuncType
(
)
)
;
type_
=
funcType
;
const
ValTypeVector
&
args
=
argTypes
(
)
;
if
(
!
argOffsets_
.
resize
(
args
.
length
(
)
)
)
{
return
false
;
}
StructLayout
layout
;
for
(
size_t
i
=
0
;
i
<
args
.
length
(
)
;
i
+
+
)
{
CheckedInt32
offset
=
layout
.
addField
(
StorageType
(
args
[
i
]
.
packed
(
)
)
)
;
if
(
!
offset
.
isValid
(
)
)
{
return
false
;
}
argOffsets_
[
i
]
=
offset
.
value
(
)
;
}
CheckedInt32
size
=
layout
.
close
(
)
;
if
(
!
size
.
isValid
(
)
)
{
return
false
;
}
this
-
>
size_
=
size
.
value
(
)
;
return
true
;
}
size_t
TagType
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
argOffsets_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
TagDesc
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
type
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
ModuleElemSegment
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
SizeOfMaybeExcludingThis
(
offsetIfActive
mallocSizeOf
)
+
elemIndices
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
ModuleElemSegment
:
:
Expressions
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
exprBytes
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
DataSegment
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
SizeOfMaybeExcludingThis
(
offsetIfActive
mallocSizeOf
)
+
bytes
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
CustomSection
:
:
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
name
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
sizeof
(
*
payload
)
+
payload
-
>
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
const
char
*
wasm
:
:
ToString
(
LimitsKind
kind
)
{
switch
(
kind
)
{
case
LimitsKind
:
:
Memory
:
return
"
Memory
"
;
case
LimitsKind
:
:
Table
:
return
"
Table
"
;
default
:
MOZ_CRASH
(
)
;
}
}
