#
ifndef
wasm_signal_handlers_h
#
define
wasm_signal_handlers_h
#
include
"
mozilla
/
Attributes
.
h
"
#
if
defined
(
XP_DARWIN
)
#
include
<
mach
/
mach
.
h
>
#
endif
#
include
"
threading
/
Thread
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
struct
JSContext
;
struct
JSRuntime
;
namespace
js
{
extern
void
InterruptRunningJitCode
(
JSContext
*
cx
)
;
namespace
wasm
{
MOZ_MUST_USE
bool
EnsureSignalHandlers
(
JSContext
*
cx
)
;
bool
HaveSignalHandlers
(
)
;
class
ModuleSegment
;
bool
InInterruptibleCode
(
JSContext
*
cx
uint8_t
*
pc
const
ModuleSegment
*
*
ms
)
;
#
if
defined
(
XP_DARWIN
)
class
MachExceptionHandler
{
bool
installed_
;
js
:
:
Thread
thread_
;
mach_port_t
port_
;
void
uninstall
(
)
;
public
:
MachExceptionHandler
(
)
;
~
MachExceptionHandler
(
)
{
uninstall
(
)
;
}
mach_port_t
port
(
)
const
{
return
port_
;
}
bool
installed
(
)
const
{
return
installed_
;
}
bool
install
(
JSContext
*
cx
)
;
}
;
#
endif
struct
InterruptData
{
void
*
unwindPC
;
void
*
resumePC
;
InterruptData
(
void
*
unwindPC
void
*
resumePC
)
:
unwindPC
(
unwindPC
)
resumePC
(
resumePC
)
{
}
}
;
struct
TrapData
{
void
*
pc
;
Trap
trap
;
uint32_t
bytecodeOffset
;
TrapData
(
void
*
pc
Trap
trap
uint32_t
bytecodeOffset
)
:
pc
(
pc
)
trap
(
trap
)
bytecodeOffset
(
bytecodeOffset
)
{
}
}
;
}
}
#
endif
