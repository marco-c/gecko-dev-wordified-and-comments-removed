#
ifndef
wasm_wasm_baseline_object_inl_h
#
define
wasm_wasm_baseline_object_inl_h
namespace
js
{
namespace
wasm
{
const
FuncType
&
BaseCompiler
:
:
funcType
(
)
const
{
return
codeMeta_
.
getFuncType
(
func_
.
index
)
;
}
bool
BaseCompiler
:
:
usesMemory
(
)
const
{
return
codeMeta_
.
memories
.
length
(
)
>
0
;
}
bool
BaseCompiler
:
:
usesSharedMemory
(
uint32_t
memoryIndex
)
const
{
return
codeMeta_
.
usesSharedMemory
(
memoryIndex
)
;
}
const
Local
&
BaseCompiler
:
:
localFromSlot
(
uint32_t
slot
MIRType
type
)
{
MOZ_ASSERT
(
localInfo_
[
slot
]
.
type
=
=
type
)
;
return
localInfo_
[
slot
]
;
}
BytecodeOffset
BaseCompiler
:
:
bytecodeOffset
(
)
const
{
return
iter_
.
bytecodeOffset
(
)
;
}
TrapSiteDesc
BaseCompiler
:
:
trapSiteDesc
(
)
const
{
return
TrapSiteDesc
(
bytecodeOffset
(
)
)
;
}
bool
BaseCompiler
:
:
isMem32
(
uint32_t
memoryIndex
)
const
{
return
codeMeta_
.
memories
[
memoryIndex
]
.
addressType
(
)
=
=
AddressType
:
:
I32
;
}
bool
BaseCompiler
:
:
isMem64
(
uint32_t
memoryIndex
)
const
{
return
codeMeta_
.
memories
[
memoryIndex
]
.
addressType
(
)
=
=
AddressType
:
:
I64
;
}
bool
BaseCompiler
:
:
hugeMemoryEnabled
(
uint32_t
memoryIndex
)
const
{
return
codeMeta_
.
hugeMemoryEnabled
(
memoryIndex
)
;
}
uint32_t
BaseCompiler
:
:
instanceOffsetOfMemoryBase
(
uint32_t
memoryIndex
)
const
{
if
(
memoryIndex
=
=
0
)
{
return
Instance
:
:
offsetOfMemory0Base
(
)
;
}
return
Instance
:
:
offsetInData
(
codeMeta_
.
offsetOfMemoryInstanceData
(
memoryIndex
)
+
offsetof
(
MemoryInstanceData
base
)
)
;
}
uint32_t
BaseCompiler
:
:
instanceOffsetOfBoundsCheckLimit
(
uint32_t
memoryIndex
)
const
{
if
(
memoryIndex
=
=
0
)
{
return
Instance
:
:
offsetOfMemory0BoundsCheckLimit
(
)
;
}
return
Instance
:
:
offsetInData
(
codeMeta_
.
offsetOfMemoryInstanceData
(
memoryIndex
)
+
offsetof
(
MemoryInstanceData
boundsCheckLimit
)
)
;
}
struct
NormalCallResults
final
{
const
StackResultsLoc
&
results
;
explicit
NormalCallResults
(
const
StackResultsLoc
&
results
)
:
results
(
results
)
{
}
inline
uint32_t
onStackCount
(
)
const
{
return
results
.
count
(
)
;
}
inline
StackResults
stackResults
(
)
const
{
return
results
.
stackResults
(
)
;
}
inline
void
getStackResultArea
(
BaseStackFrame
fr
RegPtr
dest
)
const
{
fr
.
computeOutgoingStackResultAreaPtr
(
results
dest
)
;
}
}
;
struct
TailCallResults
final
{
bool
hasStackResults
;
explicit
TailCallResults
(
const
FuncType
&
funcType
)
{
hasStackResults
=
ABIResultIter
:
:
HasStackResults
(
ResultType
:
:
Vector
(
funcType
.
results
(
)
)
)
;
}
inline
uint32_t
onStackCount
(
)
const
{
return
0
;
}
inline
StackResults
stackResults
(
)
const
{
return
hasStackResults
?
StackResults
:
:
HasStackResults
:
StackResults
:
:
NoStackResults
;
}
inline
void
getStackResultArea
(
BaseStackFrame
fr
RegPtr
dest
)
const
{
fr
.
loadIncomingStackResultAreaPtr
(
dest
)
;
}
}
;
struct
NoCallResults
final
{
inline
uint32_t
onStackCount
(
)
const
{
return
0
;
}
inline
StackResults
stackResults
(
)
const
{
return
StackResults
:
:
NoStackResults
;
}
inline
void
getStackResultArea
(
BaseStackFrame
fr
RegPtr
dest
)
const
{
MOZ_CRASH
(
)
;
}
}
;
}
}
#
endif
