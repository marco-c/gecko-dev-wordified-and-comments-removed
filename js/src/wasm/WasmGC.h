#
ifndef
wasm_gc_h
#
define
wasm_gc_h
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
util
/
Memory
.
h
"
namespace
js
{
namespace
wasm
{
using
namespace
js
:
:
jit
;
typedef
Vector
<
bool
32
SystemAllocPolicy
>
ExitStubMapVector
;
struct
StackMap
final
{
uint32_t
numMappedWords
:
30
;
uint32_t
numExitStubWords
:
6
;
uint32_t
frameOffsetFromTop
:
11
;
uint32_t
hasRefTypedDebugFrame
:
1
;
private
:
static
constexpr
uint32_t
maxMappedWords
=
(
1
<
<
30
)
-
1
;
static
constexpr
uint32_t
maxExitStubWords
=
(
1
<
<
6
)
-
1
;
static
constexpr
uint32_t
maxFrameOffsetFromTop
=
(
1
<
<
11
)
-
1
;
uint32_t
bitmap
[
1
]
;
explicit
StackMap
(
uint32_t
numMappedWords
)
:
numMappedWords
(
numMappedWords
)
numExitStubWords
(
0
)
frameOffsetFromTop
(
0
)
hasRefTypedDebugFrame
(
0
)
{
const
uint32_t
nBitmap
=
calcNBitmap
(
numMappedWords
)
;
memset
(
bitmap
0
nBitmap
*
sizeof
(
bitmap
[
0
]
)
)
;
}
public
:
static
StackMap
*
create
(
uint32_t
numMappedWords
)
{
uint32_t
nBitmap
=
calcNBitmap
(
numMappedWords
)
;
char
*
buf
=
(
char
*
)
js_malloc
(
sizeof
(
StackMap
)
+
(
nBitmap
-
1
)
*
sizeof
(
bitmap
[
0
]
)
)
;
if
(
!
buf
)
{
return
nullptr
;
}
return
:
:
new
(
buf
)
StackMap
(
numMappedWords
)
;
}
void
destroy
(
)
{
js_free
(
(
char
*
)
this
)
;
}
void
setExitStubWords
(
uint32_t
nWords
)
{
MOZ_ASSERT
(
numExitStubWords
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
nWords
<
=
maxExitStubWords
)
;
MOZ_ASSERT
(
nWords
<
=
numMappedWords
)
;
numExitStubWords
=
nWords
;
}
void
setFrameOffsetFromTop
(
uint32_t
nWords
)
{
MOZ_ASSERT
(
frameOffsetFromTop
=
=
0
)
;
MOZ_RELEASE_ASSERT
(
nWords
<
=
maxFrameOffsetFromTop
)
;
MOZ_ASSERT
(
frameOffsetFromTop
<
numMappedWords
)
;
frameOffsetFromTop
=
nWords
;
}
void
setHasRefTypedDebugFrame
(
)
{
MOZ_ASSERT
(
hasRefTypedDebugFrame
=
=
0
)
;
hasRefTypedDebugFrame
=
1
;
}
inline
void
setBit
(
uint32_t
bitIndex
)
{
MOZ_ASSERT
(
bitIndex
<
numMappedWords
)
;
uint32_t
wordIndex
=
bitIndex
/
wordsPerBitmapElem
;
uint32_t
wordOffset
=
bitIndex
%
wordsPerBitmapElem
;
bitmap
[
wordIndex
]
|
=
(
1
<
<
wordOffset
)
;
}
inline
uint32_t
getBit
(
uint32_t
bitIndex
)
const
{
MOZ_ASSERT
(
bitIndex
<
numMappedWords
)
;
uint32_t
wordIndex
=
bitIndex
/
wordsPerBitmapElem
;
uint32_t
wordOffset
=
bitIndex
%
wordsPerBitmapElem
;
return
(
bitmap
[
wordIndex
]
>
>
wordOffset
)
&
1
;
}
private
:
static
constexpr
uint32_t
wordsPerBitmapElem
=
sizeof
(
bitmap
[
0
]
)
*
8
;
static
uint32_t
calcNBitmap
(
uint32_t
numMappedWords
)
{
MOZ_RELEASE_ASSERT
(
numMappedWords
<
=
maxMappedWords
)
;
uint32_t
nBitmap
=
(
numMappedWords
+
wordsPerBitmapElem
-
1
)
/
wordsPerBitmapElem
;
return
nBitmap
=
=
0
?
1
:
nBitmap
;
}
}
;
static_assert
(
sizeof
(
StackMap
)
=
=
12
"
wasm
:
:
StackMap
has
unexpected
size
"
)
;
class
StackMaps
{
public
:
struct
Maplet
{
uint8_t
*
nextInsnAddr
;
StackMap
*
map
;
Maplet
(
uint8_t
*
nextInsnAddr
StackMap
*
map
)
:
nextInsnAddr
(
nextInsnAddr
)
map
(
map
)
{
}
void
offsetBy
(
uintptr_t
delta
)
{
nextInsnAddr
+
=
delta
;
}
bool
operator
<
(
const
Maplet
&
other
)
const
{
return
uintptr_t
(
nextInsnAddr
)
<
uintptr_t
(
other
.
nextInsnAddr
)
;
}
}
;
private
:
bool
sorted_
;
Vector
<
Maplet
0
SystemAllocPolicy
>
mapping_
;
public
:
StackMaps
(
)
:
sorted_
(
false
)
{
}
~
StackMaps
(
)
{
for
(
size_t
i
=
0
;
i
<
mapping_
.
length
(
)
;
i
+
+
)
{
mapping_
[
i
]
.
map
-
>
destroy
(
)
;
mapping_
[
i
]
.
map
=
nullptr
;
}
}
MOZ_MUST_USE
bool
add
(
uint8_t
*
nextInsnAddr
StackMap
*
map
)
{
MOZ_ASSERT
(
!
sorted_
)
;
return
mapping_
.
append
(
Maplet
(
nextInsnAddr
map
)
)
;
}
MOZ_MUST_USE
bool
add
(
const
Maplet
&
maplet
)
{
return
add
(
maplet
.
nextInsnAddr
maplet
.
map
)
;
}
void
clear
(
)
{
for
(
size_t
i
=
0
;
i
<
mapping_
.
length
(
)
;
i
+
+
)
{
mapping_
[
i
]
.
nextInsnAddr
=
nullptr
;
mapping_
[
i
]
.
map
=
nullptr
;
}
mapping_
.
clear
(
)
;
}
bool
empty
(
)
const
{
return
mapping_
.
empty
(
)
;
}
size_t
length
(
)
const
{
return
mapping_
.
length
(
)
;
}
Maplet
get
(
size_t
i
)
const
{
return
mapping_
[
i
]
;
}
Maplet
move
(
size_t
i
)
{
Maplet
m
=
mapping_
[
i
]
;
mapping_
[
i
]
.
map
=
nullptr
;
return
m
;
}
void
offsetBy
(
uintptr_t
delta
)
{
for
(
size_t
i
=
0
;
i
<
mapping_
.
length
(
)
;
i
+
+
)
mapping_
[
i
]
.
offsetBy
(
delta
)
;
}
void
sort
(
)
{
MOZ_ASSERT
(
!
sorted_
)
;
std
:
:
sort
(
mapping_
.
begin
(
)
mapping_
.
end
(
)
)
;
sorted_
=
true
;
}
const
StackMap
*
findMap
(
uint8_t
*
nextInsnAddr
)
const
{
struct
Comparator
{
int
operator
(
)
(
Maplet
aVal
)
const
{
if
(
uintptr_t
(
mTarget
)
<
uintptr_t
(
aVal
.
nextInsnAddr
)
)
{
return
-
1
;
}
if
(
uintptr_t
(
mTarget
)
>
uintptr_t
(
aVal
.
nextInsnAddr
)
)
{
return
1
;
}
return
0
;
}
explicit
Comparator
(
uint8_t
*
aTarget
)
:
mTarget
(
aTarget
)
{
}
const
uint8_t
*
mTarget
;
}
;
size_t
result
;
if
(
BinarySearchIf
(
mapping_
0
mapping_
.
length
(
)
Comparator
(
nextInsnAddr
)
&
result
)
)
{
return
mapping_
[
result
]
.
map
;
}
return
nullptr
;
}
}
;
template
<
class
T
>
static
inline
size_t
StackArgAreaSizeUnaligned
(
const
T
&
argTypes
)
{
ABIArgIter
<
const
T
>
i
(
argTypes
)
;
while
(
!
i
.
done
(
)
)
{
i
+
+
;
}
return
i
.
stackBytesConsumedSoFar
(
)
;
}
static
inline
size_t
StackArgAreaSizeUnaligned
(
const
SymbolicAddressSignature
&
saSig
)
{
class
MOZ_STACK_CLASS
ItemsAndLength
{
const
MIRType
*
items_
;
size_t
length_
;
public
:
ItemsAndLength
(
const
MIRType
*
items
size_t
length
)
:
items_
(
items
)
length_
(
length
)
{
}
size_t
length
(
)
const
{
return
length_
;
}
MIRType
operator
[
]
(
size_t
i
)
const
{
return
items_
[
i
]
;
}
}
;
MOZ_ASSERT
(
saSig
.
numArgs
<
sizeof
(
saSig
.
argTypes
)
/
sizeof
(
saSig
.
argTypes
[
0
]
)
)
;
MOZ_ASSERT
(
saSig
.
argTypes
[
saSig
.
numArgs
]
=
=
MIRType
:
:
None
)
;
ItemsAndLength
itemsAndLength
(
saSig
.
argTypes
saSig
.
numArgs
)
;
return
StackArgAreaSizeUnaligned
(
itemsAndLength
)
;
}
static
inline
size_t
AlignStackArgAreaSize
(
size_t
unalignedSize
)
{
return
AlignBytes
(
unalignedSize
16u
)
;
}
template
<
class
T
>
static
inline
size_t
StackArgAreaSizeAligned
(
const
T
&
argTypes
)
{
return
AlignStackArgAreaSize
(
StackArgAreaSizeUnaligned
(
argTypes
)
)
;
}
MOZ_MUST_USE
bool
GenerateStackmapEntriesForTrapExit
(
const
ArgTypeVector
&
args
const
MachineState
&
trapExitLayout
const
size_t
trapExitLayoutNumWords
ExitStubMapVector
*
extras
)
;
void
EmitWasmPreBarrierGuard
(
MacroAssembler
&
masm
Register
tls
Register
scratch
Register
valueAddr
Label
*
skipBarrier
)
;
void
EmitWasmPreBarrierCall
(
MacroAssembler
&
masm
Register
tls
Register
scratch
Register
valueAddr
)
;
void
EmitWasmPostBarrierGuard
(
MacroAssembler
&
masm
const
Maybe
<
Register
>
&
object
Register
otherScratch
Register
setValue
Label
*
skipBarrier
)
;
}
}
#
endif
