#
ifndef
wasm_code_h
#
define
wasm_code_h
#
include
"
wasm
/
WasmGeneratedSourceMap
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
namespace
js
{
struct
AsmJSMetadata
;
namespace
wasm
{
struct
LinkData
;
struct
Metadata
;
class
CodeSegment
;
typedef
UniquePtr
<
CodeSegment
>
UniqueCodeSegment
;
class
CodeSegment
{
uint8_t
*
bytes_
;
uint32_t
functionCodeLength_
;
uint32_t
codeLength_
;
uint32_t
globalDataLength_
;
uint8_t
*
interruptCode_
;
uint8_t
*
outOfBoundsCode_
;
uint8_t
*
unalignedAccessCode_
;
bool
profilingEnabled_
;
CodeSegment
(
)
{
PodZero
(
this
)
;
}
template
<
class
>
friend
struct
js
:
:
MallocProvider
;
CodeSegment
(
const
CodeSegment
&
)
=
delete
;
CodeSegment
(
CodeSegment
&
&
)
=
delete
;
void
operator
=
(
const
CodeSegment
&
)
=
delete
;
void
operator
=
(
CodeSegment
&
&
)
=
delete
;
public
:
static
UniqueCodeSegment
create
(
JSContext
*
cx
const
Bytes
&
code
const
LinkData
&
linkData
const
Metadata
&
metadata
HandleWasmMemoryObject
memory
)
;
~
CodeSegment
(
)
;
uint8_t
*
base
(
)
const
{
return
bytes_
;
}
uint8_t
*
globalData
(
)
const
{
return
bytes_
+
codeLength_
;
}
uint32_t
codeLength
(
)
const
{
return
codeLength_
;
}
uint32_t
globalDataLength
(
)
const
{
return
globalDataLength_
;
}
uint32_t
totalLength
(
)
const
{
return
codeLength_
+
globalDataLength_
;
}
uint8_t
*
interruptCode
(
)
const
{
return
interruptCode_
;
}
uint8_t
*
outOfBoundsCode
(
)
const
{
return
outOfBoundsCode_
;
}
uint8_t
*
unalignedAccessCode
(
)
const
{
return
unalignedAccessCode_
;
}
bool
containsFunctionPC
(
const
void
*
pc
)
const
{
return
pc
>
=
base
(
)
&
&
pc
<
(
base
(
)
+
functionCodeLength_
)
;
}
bool
containsCodePC
(
const
void
*
pc
)
const
{
return
pc
>
=
base
(
)
&
&
pc
<
(
base
(
)
+
codeLength_
)
;
}
void
onMovingGrow
(
uint8_t
*
prevMemoryBase
const
Metadata
&
metadata
ArrayBufferObject
&
buffer
)
;
}
;
struct
ShareableBytes
:
ShareableBase
<
ShareableBytes
>
{
Bytes
bytes
;
size_t
sizeOfExcludingThis
(
MallocSizeOf
m
)
const
{
return
bytes
.
sizeOfExcludingThis
(
m
)
;
}
const
uint8_t
*
begin
(
)
const
{
return
bytes
.
begin
(
)
;
}
const
uint8_t
*
end
(
)
const
{
return
bytes
.
end
(
)
;
}
size_t
length
(
)
const
{
return
bytes
.
length
(
)
;
}
bool
append
(
const
uint8_t
*
p
uint32_t
ct
)
{
return
bytes
.
append
(
p
ct
)
;
}
}
;
typedef
RefPtr
<
ShareableBytes
>
MutableBytes
;
typedef
RefPtr
<
const
ShareableBytes
>
SharedBytes
;
class
FuncDefExport
{
Sig
sig_
;
MOZ_INIT_OUTSIDE_CTOR
struct
CacheablePod
{
uint32_t
funcDefIndex_
;
uint32_t
codeRangeIndex_
;
uint32_t
entryOffset_
;
}
pod
;
public
:
FuncDefExport
(
)
=
default
;
explicit
FuncDefExport
(
Sig
&
&
sig
uint32_t
funcDefIndex
uint32_t
codeRangeIndex
)
:
sig_
(
Move
(
sig
)
)
{
pod
.
funcDefIndex_
=
funcDefIndex
;
pod
.
codeRangeIndex_
=
codeRangeIndex
;
pod
.
entryOffset_
=
UINT32_MAX
;
}
void
initEntryOffset
(
uint32_t
entryOffset
)
{
MOZ_ASSERT
(
pod
.
entryOffset_
=
=
UINT32_MAX
)
;
pod
.
entryOffset_
=
entryOffset
;
}
const
Sig
&
sig
(
)
const
{
return
sig_
;
}
uint32_t
funcDefIndex
(
)
const
{
return
pod
.
funcDefIndex_
;
}
uint32_t
codeRangeIndex
(
)
const
{
return
pod
.
codeRangeIndex_
;
}
uint32_t
entryOffset
(
)
const
{
MOZ_ASSERT
(
pod
.
entryOffset_
!
=
UINT32_MAX
)
;
return
pod
.
entryOffset_
;
}
WASM_DECLARE_SERIALIZABLE
(
FuncDefExport
)
}
;
typedef
Vector
<
FuncDefExport
0
SystemAllocPolicy
>
FuncDefExportVector
;
class
FuncImport
{
Sig
sig_
;
struct
CacheablePod
{
uint32_t
tlsDataOffset_
;
uint32_t
interpExitCodeOffset_
;
uint32_t
jitExitCodeOffset_
;
}
pod
;
public
:
FuncImport
(
)
{
memset
(
&
pod
0
sizeof
(
CacheablePod
)
)
;
}
FuncImport
(
Sig
&
&
sig
uint32_t
tlsDataOffset
)
:
sig_
(
Move
(
sig
)
)
{
pod
.
tlsDataOffset_
=
tlsDataOffset
;
pod
.
interpExitCodeOffset_
=
0
;
pod
.
jitExitCodeOffset_
=
0
;
}
void
initInterpExitOffset
(
uint32_t
off
)
{
MOZ_ASSERT
(
!
pod
.
interpExitCodeOffset_
)
;
pod
.
interpExitCodeOffset_
=
off
;
}
void
initJitExitOffset
(
uint32_t
off
)
{
MOZ_ASSERT
(
!
pod
.
jitExitCodeOffset_
)
;
pod
.
jitExitCodeOffset_
=
off
;
}
const
Sig
&
sig
(
)
const
{
return
sig_
;
}
uint32_t
tlsDataOffset
(
)
const
{
return
pod
.
tlsDataOffset_
;
}
uint32_t
interpExitCodeOffset
(
)
const
{
return
pod
.
interpExitCodeOffset_
;
}
uint32_t
jitExitCodeOffset
(
)
const
{
return
pod
.
jitExitCodeOffset_
;
}
WASM_DECLARE_SERIALIZABLE
(
FuncImport
)
}
;
typedef
Vector
<
FuncImport
0
SystemAllocPolicy
>
FuncImportVector
;
class
CodeRange
{
public
:
enum
Kind
{
Function
Entry
ImportJitExit
ImportInterpExit
TrapExit
FarJumpIsland
Inline
}
;
private
:
uint32_t
begin_
;
uint32_t
profilingReturn_
;
uint32_t
end_
;
uint32_t
funcDefIndex_
;
uint32_t
funcLineOrBytecode_
;
uint8_t
funcBeginToTableEntry_
;
uint8_t
funcBeginToTableProfilingJump_
;
uint8_t
funcBeginToNonProfilingEntry_
;
uint8_t
funcProfilingJumpToProfilingReturn_
;
uint8_t
funcProfilingEpilogueToProfilingReturn_
;
Kind
kind_
:
8
;
public
:
CodeRange
(
)
=
default
;
CodeRange
(
Kind
kind
Offsets
offsets
)
;
CodeRange
(
Kind
kind
ProfilingOffsets
offsets
)
;
CodeRange
(
uint32_t
funcDefIndex
uint32_t
lineOrBytecode
FuncOffsets
offsets
)
;
uint32_t
begin
(
)
const
{
return
begin_
;
}
uint32_t
end
(
)
const
{
return
end_
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
bool
isFunction
(
)
const
{
return
kind
(
)
=
=
Function
;
}
bool
isImportExit
(
)
const
{
return
kind
(
)
=
=
ImportJitExit
|
|
kind
(
)
=
=
ImportInterpExit
;
}
bool
isTrapExit
(
)
const
{
return
kind
(
)
=
=
TrapExit
;
}
bool
isInline
(
)
const
{
return
kind
(
)
=
=
Inline
;
}
uint32_t
profilingReturn
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
|
|
isImportExit
(
)
|
|
isTrapExit
(
)
)
;
return
profilingReturn_
;
}
uint32_t
funcProfilingEntry
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
begin
(
)
;
}
uint32_t
funcTableEntry
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
begin_
+
funcBeginToTableEntry_
;
}
uint32_t
funcTableProfilingJump
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
begin_
+
funcBeginToTableProfilingJump_
;
}
uint32_t
funcNonProfilingEntry
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
begin_
+
funcBeginToNonProfilingEntry_
;
}
uint32_t
funcProfilingJump
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
profilingReturn_
-
funcProfilingJumpToProfilingReturn_
;
}
uint32_t
funcProfilingEpilogue
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
profilingReturn_
-
funcProfilingEpilogueToProfilingReturn_
;
}
uint32_t
funcDefIndex
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
funcDefIndex_
;
}
uint32_t
funcLineOrBytecode
(
)
const
{
MOZ_ASSERT
(
isFunction
(
)
)
;
return
funcLineOrBytecode_
;
}
struct
PC
{
size_t
offset
;
explicit
PC
(
size_t
offset
)
:
offset
(
offset
)
{
}
bool
operator
=
=
(
const
CodeRange
&
rhs
)
const
{
return
offset
>
=
rhs
.
begin
(
)
&
&
offset
<
rhs
.
end
(
)
;
}
bool
operator
<
(
const
CodeRange
&
rhs
)
const
{
return
offset
<
rhs
.
begin
(
)
;
}
}
;
}
;
WASM_DECLARE_POD_VECTOR
(
CodeRange
CodeRangeVector
)
struct
CallThunk
{
uint32_t
offset
;
union
{
uint32_t
funcDefIndex
;
uint32_t
codeRangeIndex
;
}
u
;
CallThunk
(
uint32_t
offset
uint32_t
funcDefIndex
)
:
offset
(
offset
)
{
u
.
funcDefIndex
=
funcDefIndex
;
}
CallThunk
(
)
=
default
;
}
;
WASM_DECLARE_POD_VECTOR
(
CallThunk
CallThunkVector
)
struct
CacheableChars
:
UniqueChars
{
CacheableChars
(
)
=
default
;
explicit
CacheableChars
(
char
*
ptr
)
:
UniqueChars
(
ptr
)
{
}
MOZ_IMPLICIT
CacheableChars
(
UniqueChars
&
&
rhs
)
:
UniqueChars
(
Move
(
rhs
)
)
{
}
WASM_DECLARE_SERIALIZABLE
(
CacheableChars
)
}
;
typedef
Vector
<
CacheableChars
0
SystemAllocPolicy
>
CacheableCharsVector
;
enum
class
MemoryUsage
{
None
=
false
Unshared
=
1
Shared
=
2
}
;
static
inline
bool
UsesMemory
(
MemoryUsage
memoryUsage
)
{
return
bool
(
memoryUsage
)
;
}
struct
NameInBytecode
{
uint32_t
offset
;
uint32_t
length
;
NameInBytecode
(
)
=
default
;
NameInBytecode
(
uint32_t
offset
uint32_t
length
)
:
offset
(
offset
)
length
(
length
)
{
}
}
;
typedef
Vector
<
NameInBytecode
0
SystemAllocPolicy
>
NameInBytecodeVector
;
typedef
Vector
<
char16_t
64
>
TwoByteName
;
struct
MetadataCacheablePod
{
ModuleKind
kind
;
MemoryUsage
memoryUsage
;
uint32_t
minMemoryLength
;
Maybe
<
uint32_t
>
maxMemoryLength
;
Maybe
<
uint32_t
>
startFuncIndex
;
explicit
MetadataCacheablePod
(
ModuleKind
kind
)
:
kind
(
kind
)
memoryUsage
(
MemoryUsage
:
:
None
)
minMemoryLength
(
0
)
{
}
}
;
struct
Metadata
:
ShareableBase
<
Metadata
>
MetadataCacheablePod
{
explicit
Metadata
(
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
:
MetadataCacheablePod
(
kind
)
{
}
virtual
~
Metadata
(
)
{
}
MetadataCacheablePod
&
pod
(
)
{
return
*
this
;
}
const
MetadataCacheablePod
&
pod
(
)
const
{
return
*
this
;
}
FuncImportVector
funcImports
;
FuncDefExportVector
funcDefExports
;
SigWithIdVector
sigIds
;
GlobalDescVector
globals
;
TableDescVector
tables
;
MemoryAccessVector
memoryAccesses
;
MemoryPatchVector
memoryPatches
;
BoundsCheckVector
boundsChecks
;
CodeRangeVector
codeRanges
;
CallSiteVector
callSites
;
CallThunkVector
callThunks
;
NameInBytecodeVector
funcNames
;
CacheableChars
filename
;
bool
usesMemory
(
)
const
{
return
UsesMemory
(
memoryUsage
)
;
}
bool
hasSharedMemory
(
)
const
{
return
memoryUsage
=
=
MemoryUsage
:
:
Shared
;
}
const
FuncDefExport
&
lookupFuncDefExport
(
uint32_t
funcDefIndex
)
const
;
bool
isAsmJS
(
)
const
{
return
kind
=
=
ModuleKind
:
:
AsmJS
;
}
const
AsmJSMetadata
&
asAsmJS
(
)
const
{
MOZ_ASSERT
(
isAsmJS
(
)
)
;
return
*
(
const
AsmJSMetadata
*
)
this
;
}
virtual
bool
mutedErrors
(
)
const
{
return
false
;
}
virtual
const
char16_t
*
displayURL
(
)
const
{
return
nullptr
;
}
virtual
ScriptSource
*
maybeScriptSource
(
)
const
{
return
nullptr
;
}
virtual
bool
getFuncDefName
(
JSContext
*
cx
const
Bytes
*
maybeBytecode
uint32_t
funcDefIndex
TwoByteName
*
name
)
const
;
WASM_DECLARE_SERIALIZABLE_VIRTUAL
(
Metadata
)
;
}
;
typedef
RefPtr
<
Metadata
>
MutableMetadata
;
typedef
RefPtr
<
const
Metadata
>
SharedMetadata
;
class
Code
{
const
UniqueCodeSegment
segment_
;
const
SharedMetadata
metadata_
;
const
SharedBytes
maybeBytecode_
;
UniqueGeneratedSourceMap
maybeSourceMap_
;
CacheableCharsVector
funcLabels_
;
bool
profilingEnabled_
;
public
:
Code
(
UniqueCodeSegment
segment
const
Metadata
&
metadata
const
ShareableBytes
*
maybeBytecode
)
;
CodeSegment
&
segment
(
)
{
return
*
segment_
;
}
const
CodeSegment
&
segment
(
)
const
{
return
*
segment_
;
}
const
Metadata
&
metadata
(
)
const
{
return
*
metadata_
;
}
const
CallSite
*
lookupCallSite
(
void
*
returnAddress
)
const
;
const
CodeRange
*
lookupRange
(
void
*
pc
)
const
;
const
MemoryAccess
*
lookupMemoryAccess
(
void
*
pc
)
const
;
bool
getFuncDefName
(
JSContext
*
cx
uint32_t
funcDefIndex
TwoByteName
*
name
)
const
;
JSAtom
*
getFuncDefAtom
(
JSContext
*
cx
uint32_t
funcDefIndex
)
const
;
JSString
*
createText
(
JSContext
*
cx
)
;
bool
getLineOffsets
(
size_t
lineno
Vector
<
uint32_t
>
&
offsets
)
const
;
MOZ_MUST_USE
bool
ensureProfilingState
(
JSContext
*
cx
bool
enabled
)
;
bool
profilingEnabled
(
)
const
{
return
profilingEnabled_
;
}
const
char
*
profilingLabel
(
uint32_t
funcDefIndex
)
const
{
return
funcLabels_
[
funcDefIndex
]
.
get
(
)
;
}
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
size_t
*
code
size_t
*
data
)
const
;
WASM_DECLARE_SERIALIZABLE
(
Code
)
;
}
;
typedef
UniquePtr
<
Code
>
UniqueCode
;
}
}
#
endif
