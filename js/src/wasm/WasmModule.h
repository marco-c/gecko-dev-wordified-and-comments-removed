#
ifndef
wasm_module_h
#
define
wasm_module_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
Mutex
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmTable
.
h
"
#
include
"
wasm
/
WasmValidate
.
h
"
namespace
js
{
namespace
wasm
{
struct
CompileArgs
;
struct
LinkDataTierCacheablePod
{
uint32_t
outOfBoundsOffset
;
uint32_t
unalignedAccessOffset
;
uint32_t
trapOffset
;
LinkDataTierCacheablePod
(
)
{
mozilla
:
:
PodZero
(
this
)
;
}
}
;
struct
LinkDataTier
:
LinkDataTierCacheablePod
{
const
Tier
tier
;
explicit
LinkDataTier
(
Tier
tier
)
:
tier
(
tier
)
{
}
LinkDataTierCacheablePod
&
pod
(
)
{
return
*
this
;
}
const
LinkDataTierCacheablePod
&
pod
(
)
const
{
return
*
this
;
}
struct
InternalLink
{
uint32_t
patchAtOffset
;
uint32_t
targetOffset
;
#
ifdef
JS_CODELABEL_LINKMODE
uint32_t
mode
;
#
endif
}
;
typedef
Vector
<
InternalLink
0
SystemAllocPolicy
>
InternalLinkVector
;
struct
SymbolicLinkArray
:
EnumeratedArray
<
SymbolicAddress
SymbolicAddress
:
:
Limit
Uint32Vector
>
{
WASM_DECLARE_SERIALIZABLE
(
SymbolicLinkArray
)
}
;
InternalLinkVector
internalLinks
;
SymbolicLinkArray
symbolicLinks
;
WASM_DECLARE_SERIALIZABLE
(
LinkData
)
}
;
typedef
UniquePtr
<
LinkDataTier
>
UniqueLinkDataTier
;
class
LinkData
{
UniqueLinkDataTier
linkData1_
;
mutable
UniqueLinkDataTier
linkData2_
;
public
:
LinkData
(
)
{
}
explicit
LinkData
(
UniqueLinkDataTier
linkData
)
:
linkData1_
(
Move
(
linkData
)
)
{
}
void
setTier2
(
UniqueLinkDataTier
linkData
)
const
;
const
LinkDataTier
&
linkData
(
Tier
tier
)
const
;
WASM_DECLARE_SERIALIZABLE
(
LinkData
)
}
;
struct
Tiering
{
typedef
Vector
<
RefPtr
<
JS
:
:
WasmModuleListener
>
0
SystemAllocPolicy
>
ListenerVector
;
Tiering
(
)
:
active
(
false
)
{
}
~
Tiering
(
)
{
MOZ_ASSERT
(
listeners
.
empty
(
)
)
;
MOZ_ASSERT
(
!
active
)
;
}
ListenerVector
listeners
;
bool
active
;
}
;
typedef
ExclusiveWaitableData
<
Tiering
>
ExclusiveTiering
;
class
Module
:
public
JS
:
:
WasmModule
{
const
Assumptions
assumptions_
;
const
SharedCode
code_
;
const
UniqueConstBytes
unlinkedCodeForDebugging_
;
const
LinkData
linkData_
;
const
ImportVector
imports_
;
const
ExportVector
exports_
;
const
DataSegmentVector
dataSegments_
;
const
ElemSegmentVector
elemSegments_
;
const
SharedBytes
bytecode_
;
ExclusiveTiering
tiering_
;
mutable
Atomic
<
bool
>
codeIsBusy_
;
bool
instantiateFunctions
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
)
const
;
bool
instantiateMemory
(
JSContext
*
cx
MutableHandleWasmMemoryObject
memory
)
const
;
bool
instantiateTable
(
JSContext
*
cx
MutableHandleWasmTableObject
table
SharedTableVector
*
tables
)
const
;
bool
initSegments
(
JSContext
*
cx
HandleWasmInstanceObject
instance
Handle
<
FunctionVector
>
funcImports
HandleWasmMemoryObject
memory
const
ValVector
&
globalImports
)
const
;
class
Tier2GeneratorTaskImpl
;
void
notifyCompilationListeners
(
)
;
public
:
Module
(
Assumptions
&
&
assumptions
const
Code
&
code
UniqueConstBytes
unlinkedCodeForDebugging
LinkData
&
&
linkData
ImportVector
&
&
imports
ExportVector
&
&
exports
DataSegmentVector
&
&
dataSegments
ElemSegmentVector
&
&
elemSegments
const
ShareableBytes
&
bytecode
)
:
assumptions_
(
Move
(
assumptions
)
)
code_
(
&
code
)
unlinkedCodeForDebugging_
(
Move
(
unlinkedCodeForDebugging
)
)
linkData_
(
Move
(
linkData
)
)
imports_
(
Move
(
imports
)
)
exports_
(
Move
(
exports
)
)
dataSegments_
(
Move
(
dataSegments
)
)
elemSegments_
(
Move
(
elemSegments
)
)
bytecode_
(
&
bytecode
)
tiering_
(
mutexid
:
:
WasmModuleTieringLock
)
codeIsBusy_
(
false
)
{
MOZ_ASSERT_IF
(
metadata
(
)
.
debugEnabled
unlinkedCodeForDebugging_
)
;
}
~
Module
(
)
override
{
}
const
Code
&
code
(
)
const
{
return
*
code_
;
}
const
ModuleSegment
&
moduleSegment
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
;
}
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
const
MetadataTier
&
metadata
(
Tier
t
)
const
{
return
code_
-
>
metadata
(
t
)
;
}
const
LinkData
&
linkData
(
)
const
{
return
linkData_
;
}
const
LinkDataTier
&
linkData
(
Tier
t
)
const
{
return
linkData_
.
linkData
(
t
)
;
}
const
ImportVector
&
imports
(
)
const
{
return
imports_
;
}
const
ExportVector
&
exports
(
)
const
{
return
exports_
;
}
const
ShareableBytes
&
bytecode
(
)
const
{
return
*
bytecode_
;
}
uint32_t
codeLength
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
.
length
(
)
;
}
bool
instantiate
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
HandleWasmTableObject
tableImport
HandleWasmMemoryObject
memoryImport
const
ValVector
&
globalImports
HandleObject
instanceProto
MutableHandleWasmInstanceObject
instanceObj
)
const
;
void
startTier2
(
const
CompileArgs
&
args
)
;
bool
finishTier2
(
UniqueLinkDataTier
linkData2
UniqueCodeTier
tier2
ModuleEnvironment
*
env2
)
;
void
blockOnTier2Complete
(
)
const
;
size_t
bytecodeSerializedSize
(
)
const
override
;
void
bytecodeSerialize
(
uint8_t
*
bytecodeBegin
size_t
bytecodeSize
)
const
override
;
bool
compilationComplete
(
)
const
override
;
bool
notifyWhenCompilationComplete
(
JS
:
:
WasmModuleListener
*
listener
)
override
;
size_t
compiledSerializedSize
(
)
const
override
;
void
compiledSerialize
(
uint8_t
*
compiledBegin
size_t
compiledSize
)
const
override
;
static
bool
assumptionsMatch
(
const
Assumptions
&
current
const
uint8_t
*
compiledBegin
size_t
remain
)
;
static
RefPtr
<
Module
>
deserialize
(
const
uint8_t
*
bytecodeBegin
size_t
bytecodeSize
const
uint8_t
*
compiledBegin
size_t
compiledSize
Metadata
*
maybeMetadata
=
nullptr
)
;
JSObject
*
createObject
(
JSContext
*
cx
)
override
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
Code
:
:
SeenSet
*
seenCode
size_t
*
code
size_t
*
data
)
const
;
bool
extractCode
(
JSContext
*
cx
Tier
tier
MutableHandleValue
vp
)
const
;
}
;
typedef
RefPtr
<
Module
>
SharedModule
;
bool
CompiledModuleAssumptionsMatch
(
PRFileDesc
*
compiled
JS
:
:
BuildIdCharVector
&
&
buildId
)
;
SharedModule
DeserializeModule
(
PRFileDesc
*
bytecode
PRFileDesc
*
maybeCompiled
JS
:
:
BuildIdCharVector
&
&
buildId
UniqueChars
filename
unsigned
line
unsigned
column
)
;
}
}
#
endif
