#
ifndef
wasm_module_h
#
define
wasm_module_h
#
include
"
jit
/
shared
/
Assembler
-
shared
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
Mutex
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmTable
.
h
"
#
include
"
wasm
/
WasmValidate
.
h
"
namespace
js
{
namespace
wasm
{
struct
CompileArgs
;
class
Module
:
public
JS
:
:
WasmModule
{
const
SharedCode
code_
;
const
ImportVector
imports_
;
const
ExportVector
exports_
;
const
StructTypeVector
structTypes_
;
const
SharedBytes
bytecode_
;
mutable
Atomic
<
bool
>
debugCodeClaimed_
;
const
UniqueConstBytes
debugUnlinkedCode_
;
const
UniqueLinkData
debugLinkData_
;
mutable
Atomic
<
bool
>
testingTier2Active_
;
bool
instantiateFunctions
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
)
const
;
bool
instantiateMemory
(
JSContext
*
cx
MutableHandleWasmMemoryObject
memory
)
const
;
bool
instantiateTable
(
JSContext
*
cx
MutableHandleWasmTableObject
table
SharedTableVector
*
tables
)
const
;
bool
instantiateGlobals
(
JSContext
*
cx
HandleValVector
globalImportValues
WasmGlobalObjectVector
&
globalObjs
)
const
;
bool
initSegments
(
JSContext
*
cx
HandleWasmInstanceObject
instance
Handle
<
FunctionVector
>
funcImports
HandleWasmMemoryObject
memory
HandleValVector
globalImportValues
)
const
;
class
Tier2GeneratorTaskImpl
;
public
:
Module
(
const
Code
&
code
ImportVector
&
&
imports
ExportVector
&
&
exports
StructTypeVector
&
&
structTypes
const
ShareableBytes
&
bytecode
UniqueConstBytes
debugUnlinkedCode
=
nullptr
UniqueLinkData
debugLinkData
=
nullptr
)
:
code_
(
&
code
)
imports_
(
std
:
:
move
(
imports
)
)
exports_
(
std
:
:
move
(
exports
)
)
structTypes_
(
std
:
:
move
(
structTypes
)
)
bytecode_
(
&
bytecode
)
debugCodeClaimed_
(
false
)
debugUnlinkedCode_
(
std
:
:
move
(
debugUnlinkedCode
)
)
debugLinkData_
(
std
:
:
move
(
debugLinkData
)
)
testingTier2Active_
(
false
)
{
MOZ_ASSERT_IF
(
metadata
(
)
.
debugEnabled
debugUnlinkedCode_
&
&
debugLinkData_
)
;
}
~
Module
(
)
override
{
}
const
Code
&
code
(
)
const
{
return
*
code_
;
}
const
ModuleSegment
&
moduleSegment
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
;
}
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
const
MetadataTier
&
metadata
(
Tier
t
)
const
{
return
code_
-
>
metadata
(
t
)
;
}
const
ImportVector
&
imports
(
)
const
{
return
imports_
;
}
const
ExportVector
&
exports
(
)
const
{
return
exports_
;
}
const
ShareableBytes
&
bytecode
(
)
const
{
return
*
bytecode_
;
}
uint32_t
codeLength
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
.
length
(
)
;
}
bool
instantiate
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
HandleWasmTableObject
tableImport
HandleWasmMemoryObject
memoryImport
HandleValVector
globalImportValues
WasmGlobalObjectVector
&
globalObjs
HandleObject
instanceProto
MutableHandleWasmInstanceObject
instanceObj
)
const
;
void
startTier2
(
const
CompileArgs
&
args
)
;
bool
finishTier2
(
const
LinkData
&
linkData
UniqueCodeTier
tier2
ModuleEnvironment
&
&
env2
)
;
void
testingBlockOnTier2Complete
(
)
const
;
bool
testingTier2Active
(
)
const
{
return
testingTier2Active_
;
}
size_t
serializedSize
(
const
LinkData
&
linkData
)
const
;
void
serialize
(
const
LinkData
&
linkData
uint8_t
*
begin
size_t
size
)
const
;
static
RefPtr
<
Module
>
deserialize
(
const
uint8_t
*
begin
size_t
size
Metadata
*
maybeMetadata
=
nullptr
)
;
JSObject
*
createObject
(
JSContext
*
cx
)
override
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
Code
:
:
SeenSet
*
seenCode
size_t
*
code
size_t
*
data
)
const
;
bool
extractCode
(
JSContext
*
cx
Tier
tier
MutableHandleValue
vp
)
const
;
}
;
typedef
RefPtr
<
Module
>
SharedModule
;
void
ComputeWasmCallee
(
const
Code
&
code
const
Instance
*
instance
Handle
<
FunctionVector
>
funcImports
uint32_t
funcIndexIndex
const
Table
&
table
const
ElemSegment
&
seg
WasmCallee
*
out
)
;
SharedModule
DeserializeModule
(
PRFileDesc
*
bytecode
UniqueChars
filename
unsigned
line
)
;
}
}
#
endif
