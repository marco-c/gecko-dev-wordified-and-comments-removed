#
ifndef
wasm_module_h
#
define
wasm_module_h
#
include
"
js
/
WasmModule
.
h
"
#
include
"
js
/
BuildId
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmException
.
h
"
#
include
"
wasm
/
WasmJS
.
h
"
#
include
"
wasm
/
WasmSerialize
.
h
"
#
include
"
wasm
/
WasmTable
.
h
"
namespace
JS
{
class
OptimizedEncodingListener
;
}
namespace
js
{
namespace
wasm
{
struct
CompileArgs
;
using
Tier2Listener
=
RefPtr
<
JS
:
:
OptimizedEncodingListener
>
;
struct
ImportValues
{
JSFunctionVector
funcs
;
WasmTableObjectVector
tables
;
WasmMemoryObject
*
memory
;
WasmTagObjectVector
tagObjs
;
WasmGlobalObjectVector
globalObjs
;
ValVector
globalValues
;
ImportValues
(
)
:
memory
(
nullptr
)
{
}
void
trace
(
JSTracer
*
trc
)
{
funcs
.
trace
(
trc
)
;
tables
.
trace
(
trc
)
;
if
(
memory
)
{
TraceRoot
(
trc
&
memory
"
import
values
memory
"
)
;
}
tagObjs
.
trace
(
trc
)
;
globalObjs
.
trace
(
trc
)
;
globalValues
.
trace
(
trc
)
;
}
}
;
class
Module
:
public
JS
:
:
WasmModule
{
const
SharedCode
code_
;
const
ImportVector
imports_
;
const
ExportVector
exports_
;
const
DataSegmentVector
dataSegments_
;
const
ElemSegmentVector
elemSegments_
;
const
CustomSectionVector
customSections_
;
const
SharedBytes
debugBytecode_
;
mutable
Tier2Listener
tier2Listener_
;
const
bool
loggingDeserialized_
;
mutable
Atomic
<
bool
>
testingTier2Active_
;
size_t
gcMallocBytesExcludingCode_
;
bool
instantiateFunctions
(
JSContext
*
cx
const
JSFunctionVector
&
funcImports
)
const
;
bool
instantiateMemory
(
JSContext
*
cx
MutableHandle
<
WasmMemoryObject
*
>
memory
)
const
;
bool
instantiateTags
(
JSContext
*
cx
WasmTagObjectVector
&
tagObjs
)
const
;
bool
instantiateImportedTable
(
JSContext
*
cx
const
TableDesc
&
td
Handle
<
WasmTableObject
*
>
table
WasmTableObjectVector
*
tableObjs
SharedTableVector
*
tables
)
const
;
bool
instantiateLocalTable
(
JSContext
*
cx
const
TableDesc
&
td
WasmTableObjectVector
*
tableObjs
SharedTableVector
*
tables
)
const
;
bool
instantiateTables
(
JSContext
*
cx
const
WasmTableObjectVector
&
tableImports
MutableHandle
<
WasmTableObjectVector
>
tableObjs
SharedTableVector
*
tables
)
const
;
bool
instantiateGlobals
(
JSContext
*
cx
const
ValVector
&
globalImportValues
WasmGlobalObjectVector
&
globalObjs
)
const
;
bool
initSegments
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
instance
Handle
<
WasmMemoryObject
*
>
memory
const
ValVector
&
globalImportValues
)
const
;
class
Tier2GeneratorTaskImpl
;
public
:
Module
(
const
Code
&
code
ImportVector
&
&
imports
ExportVector
&
&
exports
DataSegmentVector
&
&
dataSegments
ElemSegmentVector
&
&
elemSegments
CustomSectionVector
&
&
customSections
const
ShareableBytes
*
debugBytecode
=
nullptr
bool
loggingDeserialized
=
false
)
:
code_
(
&
code
)
imports_
(
std
:
:
move
(
imports
)
)
exports_
(
std
:
:
move
(
exports
)
)
dataSegments_
(
std
:
:
move
(
dataSegments
)
)
elemSegments_
(
std
:
:
move
(
elemSegments
)
)
customSections_
(
std
:
:
move
(
customSections
)
)
debugBytecode_
(
debugBytecode
)
loggingDeserialized_
(
loggingDeserialized
)
testingTier2Active_
(
false
)
{
initGCMallocBytesExcludingCode
(
)
;
}
~
Module
(
)
override
;
const
Code
&
code
(
)
const
{
return
*
code_
;
}
const
ModuleSegment
&
moduleSegment
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
;
}
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
const
MetadataTier
&
metadata
(
Tier
t
)
const
{
return
code_
-
>
metadata
(
t
)
;
}
const
ImportVector
&
imports
(
)
const
{
return
imports_
;
}
const
ExportVector
&
exports
(
)
const
{
return
exports_
;
}
const
CustomSectionVector
&
customSections
(
)
const
{
return
customSections_
;
}
const
Bytes
&
debugBytecode
(
)
const
{
return
debugBytecode_
-
>
bytes
;
}
uint32_t
codeLength
(
Tier
t
)
const
{
return
code_
-
>
segment
(
t
)
.
length
(
)
;
}
bool
instantiate
(
JSContext
*
cx
ImportValues
&
imports
HandleObject
instanceProto
MutableHandle
<
WasmInstanceObject
*
>
instanceObj
)
const
;
void
startTier2
(
const
CompileArgs
&
args
const
ShareableBytes
&
bytecode
JS
:
:
OptimizedEncodingListener
*
listener
)
;
bool
finishTier2
(
const
LinkData
&
linkData2
UniqueCodeTier
code2
)
const
;
void
testingBlockOnTier2Complete
(
)
const
;
bool
testingTier2Active
(
)
const
{
return
testingTier2Active_
;
}
[
[
nodiscard
]
]
bool
serialize
(
const
LinkData
&
linkData
Bytes
*
bytes
)
const
;
static
RefPtr
<
Module
>
deserialize
(
const
uint8_t
*
begin
size_t
size
)
;
bool
loggingDeserialized
(
)
const
{
return
loggingDeserialized_
;
}
JSObject
*
createObject
(
JSContext
*
cx
)
const
override
;
JSObject
*
createObjectForAsmJS
(
JSContext
*
cx
)
const
override
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
Code
:
:
SeenSet
*
seenCode
size_t
*
code
size_t
*
data
)
const
;
void
initGCMallocBytesExcludingCode
(
)
;
size_t
gcMallocBytesExcludingCode
(
)
const
{
return
gcMallocBytesExcludingCode_
;
}
bool
extractCode
(
JSContext
*
cx
Tier
tier
MutableHandleValue
vp
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE_ARGS
(
Module
const
wasm
:
:
LinkData
&
linkData
)
;
}
;
using
MutableModule
=
RefPtr
<
Module
>
;
using
SharedModule
=
RefPtr
<
const
Module
>
;
[
[
nodiscard
]
]
bool
GetOptimizedEncodingBuildId
(
JS
:
:
BuildIdCharVector
*
buildId
)
;
}
}
#
endif
