#
ifndef
wasm_wasm_baseline_defs_h
#
define
wasm_wasm_baseline_defs_h
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
<
algorithm
>
#
include
<
utility
>
#
include
"
jit
/
AtomicOp
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
jit
/
JitAllocPolicy
.
h
"
#
include
"
jit
/
Label
.
h
"
#
include
"
jit
/
RegisterAllocator
.
h
"
#
include
"
jit
/
Registers
.
h
"
#
include
"
jit
/
RegisterSets
.
h
"
#
if
defined
(
JS_CODEGEN_ARM
)
#
include
"
jit
/
arm
/
Assembler
-
arm
.
h
"
#
endif
#
if
defined
(
JS_CODEGEN_X64
)
|
|
defined
(
JS_CODEGEN_X86
)
#
include
"
jit
/
x86
-
shared
/
Architecture
-
x86
-
shared
.
h
"
#
include
"
jit
/
x86
-
shared
/
Assembler
-
x86
-
shared
.
h
"
#
endif
#
if
defined
(
JS_CODEGEN_MIPS64
)
#
include
"
jit
/
mips
-
shared
/
Assembler
-
mips
-
shared
.
h
"
#
include
"
jit
/
mips64
/
Assembler
-
mips64
.
h
"
#
endif
#
include
"
js
/
ScalarType
.
h
"
#
include
"
util
/
Memory
.
h
"
#
include
"
wasm
/
TypedObject
.
h
"
#
include
"
wasm
/
WasmCodegenTypes
.
h
"
#
include
"
wasm
/
WasmDebugFrame
.
h
"
#
include
"
wasm
/
WasmGC
.
h
"
#
include
"
wasm
/
WasmGenerator
.
h
"
#
include
"
wasm
/
WasmInstance
.
h
"
#
include
"
wasm
/
WasmOpIter
.
h
"
#
include
"
wasm
/
WasmSignalHandlers
.
h
"
#
include
"
wasm
/
WasmStubs
.
h
"
#
include
"
wasm
/
WasmValidate
.
h
"
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
FloorLog2
;
using
mozilla
:
:
IsPowerOfTwo
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Some
;
namespace
js
{
namespace
wasm
{
using
HandleNaNSpecially
=
bool
;
using
InvertBranch
=
bool
;
using
IsKnownNotZero
=
bool
;
using
IsUnsigned
=
bool
;
using
NeedsBoundsCheck
=
bool
;
using
WantResult
=
bool
;
using
ZeroOnOverflow
=
bool
;
class
BaseStackFrame
;
enum
class
UseABI
{
Wasm
Builtin
System
}
;
enum
class
InterModule
{
False
=
false
True
=
true
}
;
enum
class
RhsDestOp
{
True
=
true
}
;
#
ifdef
JS_CODEGEN_X64
#
define
RABALDR_HAS_HEAPREG
#
endif
#
ifdef
JS_CODEGEN_ARM64
#
define
RABALDR_CHUNKY_STACK
#
define
RABALDR_HAS_HEAPREG
#
endif
#
ifdef
JS_CODEGEN_MIPS64
#
define
RABALDR_HAS_HEAPREG
#
endif
#
ifdef
JS_CODEGEN_X86
#
define
RABALDR_INT_DIV_I64_CALLOUT
#
endif
#
ifdef
JS_CODEGEN_ARM
#
define
RABALDR_HAS_HEAPREG
#
define
RABALDR_INT_DIV_I64_CALLOUT
#
define
RABALDR_I64_TO_FLOAT_CALLOUT
#
define
RABALDR_FLOAT_TO_I64_CALLOUT
#
endif
#
ifdef
JS_CODEGEN_NONE
#
define
RABALDR_HAS_HEAPREG
#
endif
static
constexpr
size_t
MaxPushesPerOpcode
=
10
;
}
}
#
endif
