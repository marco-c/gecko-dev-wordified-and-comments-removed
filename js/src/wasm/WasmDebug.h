#
ifndef
wasm_debug_h
#
define
wasm_debug_h
#
include
"
js
/
ColumnNumber
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
wasm
/
AsmJS
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmCodegenTypes
.
h
"
#
include
"
wasm
/
WasmConstants
.
h
"
#
include
"
wasm
/
WasmExprType
.
h
"
#
include
"
wasm
/
WasmModule
.
h
"
#
include
"
wasm
/
WasmTypeDecls
.
h
"
#
include
"
wasm
/
WasmValType
.
h
"
namespace
js
{
class
Debugger
;
class
WasmBreakpointSite
;
class
WasmInstanceObject
;
namespace
wasm
{
struct
ExprLoc
{
uint32_t
lineno
;
uint32_t
column
;
uint32_t
offset
;
ExprLoc
(
)
:
lineno
(
0
)
column
(
0
)
offset
(
0
)
{
}
ExprLoc
(
uint32_t
lineno_
uint32_t
column_
uint32_t
offset_
)
:
lineno
(
lineno_
)
column
(
column_
)
offset
(
offset_
)
{
}
}
;
using
StepperCounters
=
HashMap
<
uint32_t
uint32_t
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
;
using
WasmBreakpointSiteMap
=
HashMap
<
uint32_t
WasmBreakpointSite
*
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
;
class
DebugState
{
const
SharedCode
code_
;
const
SharedModule
module_
;
bool
enterFrameTrapsEnabled_
;
uint32_t
enterAndLeaveFrameTrapsCounter_
;
WasmBreakpointSiteMap
breakpointSites_
;
StepperCounters
stepperCounters_
;
void
enableDebuggingForFunction
(
Instance
*
instance
uint32_t
funcIndex
)
;
void
disableDebuggingForFunction
(
Instance
*
instance
uint32_t
funcIndex
)
;
void
enableDebugTrapping
(
Instance
*
instance
)
;
void
disableDebugTrapping
(
Instance
*
instance
)
;
public
:
DebugState
(
const
Code
&
code
const
Module
&
module
)
;
void
trace
(
JSTracer
*
trc
)
;
void
finalize
(
JS
:
:
GCContext
*
gcx
)
;
const
BytecodeSource
&
bytecode
(
)
const
{
return
module_
-
>
debugBytecode
(
)
;
}
[
[
nodiscard
]
]
bool
getLineOffsets
(
size_t
lineno
Vector
<
uint32_t
>
*
offsets
)
;
[
[
nodiscard
]
]
bool
getAllColumnOffsets
(
Vector
<
ExprLoc
>
*
offsets
)
;
[
[
nodiscard
]
]
bool
getOffsetLocation
(
uint32_t
offset
uint32_t
*
lineno
JS
:
:
LimitedColumnNumberOneOrigin
*
column
)
;
void
adjustEnterAndLeaveFrameTrapsState
(
JSContext
*
cx
Instance
*
instance
bool
enabled
)
;
void
ensureEnterFrameTrapsState
(
JSContext
*
cx
Instance
*
instance
bool
enabled
)
;
bool
enterFrameTrapsEnabled
(
)
const
{
return
enterFrameTrapsEnabled_
;
}
bool
hasBreakpointTrapAtOffset
(
uint32_t
offset
)
;
void
toggleBreakpointTrap
(
JSRuntime
*
rt
Instance
*
instance
uint32_t
offset
bool
enabled
)
;
WasmBreakpointSite
*
getBreakpointSite
(
uint32_t
offset
)
const
;
WasmBreakpointSite
*
getOrCreateBreakpointSite
(
JSContext
*
cx
Instance
*
instance
uint32_t
offset
)
;
bool
hasBreakpointSite
(
uint32_t
offset
)
;
void
destroyBreakpointSite
(
JS
:
:
GCContext
*
gcx
Instance
*
instance
uint32_t
offset
)
;
void
clearBreakpointsIn
(
JS
:
:
GCContext
*
gcx
WasmInstanceObject
*
instance
js
:
:
Debugger
*
dbg
JSObject
*
handler
)
;
bool
stepModeEnabled
(
uint32_t
funcIndex
)
const
;
[
[
nodiscard
]
]
bool
incrementStepperCount
(
JSContext
*
cx
Instance
*
instance
uint32_t
funcIndex
)
;
void
decrementStepperCount
(
JS
:
:
GCContext
*
gcx
Instance
*
instance
uint32_t
funcIndex
)
;
[
[
nodiscard
]
]
bool
debugGetLocalTypes
(
uint32_t
funcIndex
ValTypeVector
*
locals
size_t
*
argsLength
StackResults
*
stackResults
)
;
[
[
nodiscard
]
]
bool
getGlobal
(
Instance
&
instance
uint32_t
globalIndex
MutableHandleValue
vp
)
;
[
[
nodiscard
]
]
bool
getSourceMappingURL
(
JSContext
*
cx
MutableHandleString
result
)
const
;
const
CodeBlock
&
debugCode
(
)
const
{
return
code_
-
>
debugCodeBlock
(
)
;
}
const
CodeSegment
&
debugSegment
(
)
const
{
return
*
code_
-
>
debugCodeBlock
(
)
.
segment
;
}
const
CodeMetadata
&
codeMeta
(
)
const
{
return
code_
-
>
codeMeta
(
)
;
}
const
CodeMetadataForAsmJS
*
codeMetaForAsmJS
(
)
const
{
return
code_
-
>
codeMetaForAsmJS
(
)
;
}
uint32_t
funcToCodeRangeIndex
(
uint32_t
funcIndex
)
const
{
return
debugCode
(
)
.
funcToCodeRange
[
funcIndex
]
;
}
void
addSizeOfMisc
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
CodeMetadata
:
:
SeenSet
*
seenCodeMeta
CodeMetadataForAsmJS
:
:
SeenSet
*
seenCodeMetaForAsmJS
Code
:
:
SeenSet
*
seenCode
size_t
*
code
size_t
*
data
)
const
;
}
;
using
UniqueDebugState
=
UniquePtr
<
DebugState
>
;
}
}
#
endif
