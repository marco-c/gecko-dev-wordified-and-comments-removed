#
ifndef
wasm_debug_h
#
define
wasm_debug_h
#
include
"
js
/
HashTable
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
namespace
js
{
class
Debugger
;
class
WasmActivation
;
class
WasmBreakpoint
;
class
WasmBreakpointSite
;
class
WasmInstanceObject
;
namespace
wasm
{
struct
LinkData
;
struct
Metadata
;
class
FrameIterator
;
struct
ExprLoc
{
uint32_t
lineno
;
uint32_t
column
;
uint32_t
offset
;
ExprLoc
(
)
:
lineno
(
0
)
column
(
0
)
offset
(
0
)
{
}
ExprLoc
(
uint32_t
lineno_
uint32_t
column_
uint32_t
offset_
)
:
lineno
(
lineno_
)
column
(
column_
)
offset
(
offset_
)
{
}
}
;
typedef
Vector
<
ExprLoc
0
SystemAllocPolicy
>
ExprLocVector
;
typedef
Vector
<
uint32_t
0
SystemAllocPolicy
>
ExprLocIndexVector
;
class
GeneratedSourceMap
{
ExprLocVector
exprlocs_
;
UniquePtr
<
ExprLocIndexVector
>
sortedByOffsetExprLocIndices_
;
uint32_t
totalLines_
;
public
:
explicit
GeneratedSourceMap
(
)
:
totalLines_
(
0
)
{
}
ExprLocVector
&
exprlocs
(
)
{
return
exprlocs_
;
}
uint32_t
totalLines
(
)
{
return
totalLines_
;
}
void
setTotalLines
(
uint32_t
val
)
{
totalLines_
=
val
;
}
bool
searchLineByOffset
(
JSContext
*
cx
uint32_t
offset
size_t
*
exprlocIndex
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
typedef
UniquePtr
<
GeneratedSourceMap
>
UniqueGeneratedSourceMap
;
typedef
HashMap
<
uint32_t
uint32_t
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
StepModeCounters
;
typedef
HashMap
<
uint32_t
WasmBreakpointSite
*
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
WasmBreakpointSiteMap
;
class
DebugState
{
const
SharedCode
code_
;
const
SharedBytes
maybeBytecode_
;
UniqueGeneratedSourceMap
maybeSourceMap_
;
uint32_t
enterAndLeaveFrameTrapsCounter_
;
WasmBreakpointSiteMap
breakpointSites_
;
StepModeCounters
stepModeCounters_
;
void
toggleDebugTrap
(
uint32_t
offset
bool
enabled
)
;
bool
ensureSourceMap
(
JSContext
*
cx
)
;
public
:
DebugState
(
SharedCode
code
const
ShareableBytes
*
maybeBytecode
)
;
const
Bytes
*
maybeBytecode
(
)
const
{
return
maybeBytecode_
?
&
maybeBytecode_
-
>
bytes
:
nullptr
;
}
JSString
*
createText
(
JSContext
*
cx
)
;
bool
getLineOffsets
(
JSContext
*
cx
size_t
lineno
Vector
<
uint32_t
>
*
offsets
)
;
bool
getOffsetLocation
(
JSContext
*
cx
uint32_t
offset
bool
*
found
size_t
*
lineno
size_t
*
column
)
;
bool
totalSourceLines
(
JSContext
*
cx
uint32_t
*
count
)
;
void
adjustEnterAndLeaveFrameTrapsState
(
JSContext
*
cx
bool
enabled
)
;
bool
hasBreakpointTrapAtOffset
(
uint32_t
offset
)
;
void
toggleBreakpointTrap
(
JSRuntime
*
rt
uint32_t
offset
bool
enabled
)
;
WasmBreakpointSite
*
getOrCreateBreakpointSite
(
JSContext
*
cx
uint32_t
offset
)
;
bool
hasBreakpointSite
(
uint32_t
offset
)
;
void
destroyBreakpointSite
(
FreeOp
*
fop
uint32_t
offset
)
;
bool
clearBreakpointsIn
(
JSContext
*
cx
WasmInstanceObject
*
instance
js
:
:
Debugger
*
dbg
JSObject
*
handler
)
;
bool
stepModeEnabled
(
uint32_t
funcIndex
)
const
;
bool
incrementStepModeCount
(
JSContext
*
cx
uint32_t
funcIndex
)
;
bool
decrementStepModeCount
(
JSContext
*
cx
uint32_t
funcIndex
)
;
bool
debugGetLocalTypes
(
uint32_t
funcIndex
ValTypeVector
*
locals
size_t
*
argsLength
)
;
ExprType
debugGetResultType
(
uint32_t
funcIndex
)
;
JSString
*
debugDisplayURL
(
JSContext
*
cx
)
const
;
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
bool
debugEnabled
(
)
const
{
return
metadata
(
)
.
debugEnabled
;
}
const
CodeRangeVector
&
codeRanges
(
)
const
{
return
metadata
(
)
.
codeRanges
;
}
const
CallSiteVector
&
callSites
(
)
const
{
return
metadata
(
)
.
callSites
;
}
uint32_t
debugFuncToCodeRange
(
uint32_t
funcIndex
)
const
{
return
metadata
(
)
.
debugFuncToCodeRange
[
funcIndex
]
;
}
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
Code
:
:
SeenSet
*
seenCode
size_t
*
code
size_t
*
data
)
const
;
}
;
typedef
UniquePtr
<
DebugState
>
UniqueDebugState
;
}
}
#
endif
