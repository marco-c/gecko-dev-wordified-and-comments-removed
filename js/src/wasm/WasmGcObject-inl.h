#
ifndef
wasm_WasmGcObject_inl_h
#
define
wasm_WasmGcObject_inl_h
#
include
"
wasm
/
WasmGcObject
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
gc
/
Nursery
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
namespace
js
{
template
<
bool
ZeroFields
>
MOZ_ALWAYS_INLINE
WasmStructObject
*
WasmStructObject
:
:
createStructIL
(
JSContext
*
cx
wasm
:
:
TypeDefInstanceData
*
typeDefData
js
:
:
gc
:
:
Heap
initialHeap
)
{
MOZ_ASSERT
(
IsWasmGcObjectClass
(
typeDefData
-
>
clasp
)
)
;
MOZ_ASSERT
(
!
typeDefData
-
>
clasp
-
>
isNativeObject
(
)
)
;
debugCheckNewObject
(
typeDefData
-
>
shape
typeDefData
-
>
allocKind
initialHeap
)
;
mozilla
:
:
DebugOnly
<
const
wasm
:
:
TypeDef
*
>
typeDef
=
typeDefData
-
>
typeDef
;
MOZ_ASSERT
(
typeDef
-
>
kind
(
)
=
=
wasm
:
:
TypeDefKind
:
:
Struct
)
;
WasmStructObject
*
structObj
=
(
WasmStructObject
*
)
cx
-
>
newCell
<
WasmGcObject
>
(
typeDefData
-
>
allocKind
initialHeap
typeDefData
-
>
clasp
&
typeDefData
-
>
allocSite
)
;
if
(
MOZ_UNLIKELY
(
!
structObj
)
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
MOZ_ASSERT
(
(
uintptr_t
(
&
(
structObj
-
>
inlineData_
[
0
]
)
)
%
sizeof
(
uintptr_t
)
)
=
=
0
)
;
structObj
-
>
initShape
(
typeDefData
-
>
shape
)
;
structObj
-
>
superTypeVector_
=
typeDefData
-
>
superTypeVector
;
structObj
-
>
outlineData_
=
nullptr
;
if
constexpr
(
ZeroFields
)
{
uint32_t
totalBytes
=
typeDefData
-
>
structTypeSize
;
MOZ_ASSERT
(
totalBytes
=
=
typeDef
-
>
structType
(
)
.
size_
)
;
MOZ_ASSERT
(
totalBytes
<
=
WasmStructObject_MaxInlineBytes
)
;
MOZ_ASSERT
(
(
totalBytes
%
sizeof
(
uintptr_t
)
)
=
=
0
)
;
memset
(
&
(
structObj
-
>
inlineData_
[
0
]
)
0
totalBytes
)
;
}
js
:
:
gc
:
:
gcprobes
:
:
CreateObject
(
structObj
)
;
probes
:
:
CreateObject
(
cx
structObj
)
;
return
structObj
;
}
template
<
bool
ZeroFields
>
MOZ_ALWAYS_INLINE
WasmStructObject
*
WasmStructObject
:
:
createStructOOL
(
JSContext
*
cx
wasm
:
:
TypeDefInstanceData
*
typeDefData
js
:
:
gc
:
:
Heap
initialHeap
)
{
MOZ_ASSERT
(
IsWasmGcObjectClass
(
typeDefData
-
>
clasp
)
)
;
MOZ_ASSERT
(
!
typeDefData
-
>
clasp
-
>
isNativeObject
(
)
)
;
debugCheckNewObject
(
typeDefData
-
>
shape
typeDefData
-
>
allocKind
initialHeap
)
;
mozilla
:
:
DebugOnly
<
const
wasm
:
:
TypeDef
*
>
typeDef
=
typeDefData
-
>
typeDef
;
MOZ_ASSERT
(
typeDef
-
>
kind
(
)
=
=
wasm
:
:
TypeDefKind
:
:
Struct
)
;
uint32_t
totalBytes
=
typeDefData
-
>
structTypeSize
;
MOZ_ASSERT
(
totalBytes
=
=
typeDef
-
>
structType
(
)
.
size_
)
;
MOZ_ASSERT
(
totalBytes
>
WasmStructObject_MaxInlineBytes
)
;
MOZ_ASSERT
(
(
totalBytes
%
sizeof
(
uintptr_t
)
)
=
=
0
)
;
uint32_t
inlineBytes
outlineBytes
;
WasmStructObject
:
:
getDataByteSizes
(
totalBytes
&
inlineBytes
&
outlineBytes
)
;
MOZ_ASSERT
(
inlineBytes
=
=
WasmStructObject_MaxInlineBytes
)
;
MOZ_ASSERT
(
outlineBytes
>
0
)
;
Nursery
&
nursery
=
cx
-
>
nursery
(
)
;
PointerAndUint7
outlineData
=
nursery
.
mallocedBlockCache
(
)
.
alloc
(
outlineBytes
)
;
if
(
MOZ_UNLIKELY
(
!
outlineData
.
pointer
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
Rooted
<
WasmStructObject
*
>
structObj
(
cx
)
;
structObj
=
(
WasmStructObject
*
)
cx
-
>
newCell
<
WasmGcObject
>
(
typeDefData
-
>
allocKind
initialHeap
typeDefData
-
>
clasp
&
typeDefData
-
>
allocSite
)
;
if
(
MOZ_UNLIKELY
(
!
structObj
)
)
{
ReportOutOfMemory
(
cx
)
;
if
(
outlineData
.
pointer
(
)
)
{
nursery
.
mallocedBlockCache
(
)
.
free
(
outlineData
)
;
}
return
nullptr
;
}
MOZ_ASSERT
(
(
uintptr_t
(
&
(
structObj
-
>
inlineData_
[
0
]
)
)
%
sizeof
(
uintptr_t
)
)
=
=
0
)
;
structObj
-
>
initShape
(
typeDefData
-
>
shape
)
;
structObj
-
>
superTypeVector_
=
typeDefData
-
>
superTypeVector
;
structObj
-
>
outlineData_
=
(
uint8_t
*
)
outlineData
.
pointer
(
)
;
if
constexpr
(
ZeroFields
)
{
memset
(
&
(
structObj
-
>
inlineData_
[
0
]
)
0
inlineBytes
)
;
memset
(
outlineData
.
pointer
(
)
0
outlineBytes
)
;
}
if
(
MOZ_LIKELY
(
js
:
:
gc
:
:
IsInsideNursery
(
structObj
)
)
)
{
if
(
MOZ_UNLIKELY
(
!
nursery
.
registerTrailer
(
outlineData
outlineBytes
)
)
)
{
nursery
.
mallocedBlockCache
(
)
.
free
(
outlineData
)
;
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
}
else
{
MOZ_ASSERT
(
structObj
-
>
isTenured
(
)
)
;
AddCellMemory
(
structObj
outlineBytes
+
wasm
:
:
TrailerBlockOverhead
MemoryUse
:
:
WasmTrailerBlock
)
;
}
js
:
:
gc
:
:
gcprobes
:
:
CreateObject
(
structObj
)
;
probes
:
:
CreateObject
(
cx
structObj
)
;
return
structObj
;
}
}
#
endif
