#
ifndef
wasm_wasm_gc_object_inl_h
#
define
wasm_wasm_gc_object_inl_h
#
include
"
wasm
/
WasmGcObject
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
vm
/
Shape
.
h
"
#
include
"
wasm
/
WasmTypeDef
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
namespace
js
{
inline
bool
WasmGcObject
:
:
AllocArgs
:
:
compute
(
JSContext
*
cx
const
wasm
:
:
TypeDef
*
typeDef
AllocArgs
*
args
)
{
const
JSClass
*
clasp
;
gc
:
:
AllocKind
allocKind
;
switch
(
typeDef
-
>
kind
(
)
)
{
case
wasm
:
:
TypeDefKind
:
:
Struct
:
{
clasp
=
&
WasmStructObject
:
:
class_
;
allocKind
=
WasmStructObject
:
:
allocKindForTypeDef
(
typeDef
)
;
break
;
}
case
wasm
:
:
TypeDefKind
:
:
Array
:
{
clasp
=
&
WasmArrayObject
:
:
class_
;
allocKind
=
WasmArrayObject
:
:
allocKind
(
)
;
break
;
}
case
wasm
:
:
TypeDefKind
:
:
Func
:
case
wasm
:
:
TypeDefKind
:
:
None
:
{
MOZ_CRASH
(
)
;
}
}
if
(
CanChangeToBackgroundAllocKind
(
allocKind
clasp
)
)
{
allocKind
=
ForegroundToBackgroundAllocKind
(
allocKind
)
;
}
args
-
>
shape
=
WasmGCShape
:
:
getShape
(
cx
clasp
cx
-
>
realm
(
)
TaggedProto
(
)
&
typeDef
-
>
recGroup
(
)
ObjectFlags
(
)
)
;
if
(
!
args
-
>
shape
)
{
return
false
;
}
args
-
>
allocKind
=
allocKind
;
args
-
>
initialHeap
=
GetInitialHeap
(
GenericObject
clasp
)
;
args
-
>
clasp
=
clasp
;
return
true
;
}
}
#
endif
