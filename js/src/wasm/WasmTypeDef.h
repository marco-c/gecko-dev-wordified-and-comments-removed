#
ifndef
wasm_type_def_h
#
define
wasm_type_def_h
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
js
/
RefCounted
.
h
"
#
include
"
wasm
/
WasmCodegenConstants
.
h
"
#
include
"
wasm
/
WasmCompileArgs
.
h
"
#
include
"
wasm
/
WasmConstants
.
h
"
#
include
"
wasm
/
WasmSerialize
.
h
"
#
include
"
wasm
/
WasmUtility
.
h
"
#
include
"
wasm
/
WasmValType
.
h
"
namespace
js
{
namespace
wasm
{
using
mozilla
:
:
CheckedInt32
;
using
mozilla
:
:
MallocSizeOf
;
class
RecGroup
;
class
FuncType
{
ValTypeVector
args_
;
ValTypeVector
results_
;
uint32_t
immediateTypeId_
;
static
const
uint32_t
NO_IMMEDIATE_TYPE_ID
=
UINT32_MAX
;
bool
temporarilyUnsupportedResultCountForJitEntry
(
)
const
{
return
results
(
)
.
length
(
)
>
MaxResultsForJitEntry
;
}
bool
temporarilyUnsupportedResultCountForJitExit
(
)
const
{
return
results
(
)
.
length
(
)
>
MaxResultsForJitExit
;
}
bool
temporarilyUnsupportedReftypeForEntry
(
)
const
{
for
(
ValType
arg
:
args
(
)
)
{
if
(
arg
.
isRefType
(
)
&
&
(
!
arg
.
isExternRef
(
)
|
|
!
arg
.
isNullable
(
)
)
)
{
return
true
;
}
}
for
(
ValType
result
:
results
(
)
)
{
if
(
result
.
isTypeRef
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
temporarilyUnsupportedReftypeForExit
(
)
const
{
for
(
ValType
result
:
results
(
)
)
{
if
(
result
.
isRefType
(
)
&
&
(
!
result
.
isExternRef
(
)
|
|
!
result
.
isNullable
(
)
)
)
{
return
true
;
}
}
return
false
;
}
void
initImmediateTypeId
(
)
;
public
:
FuncType
(
)
:
args_
(
)
results_
(
)
{
initImmediateTypeId
(
)
;
}
FuncType
(
ValTypeVector
&
&
args
ValTypeVector
&
&
results
)
:
args_
(
std
:
:
move
(
args
)
)
results_
(
std
:
:
move
(
results
)
)
{
initImmediateTypeId
(
)
;
}
FuncType
(
FuncType
&
&
)
=
default
;
FuncType
&
operator
=
(
FuncType
&
&
)
=
default
;
[
[
nodiscard
]
]
bool
clone
(
const
FuncType
&
src
)
{
MOZ_ASSERT
(
args_
.
empty
(
)
)
;
MOZ_ASSERT
(
results_
.
empty
(
)
)
;
immediateTypeId_
=
src
.
immediateTypeId_
;
return
args_
.
appendAll
(
src
.
args_
)
&
&
results_
.
appendAll
(
src
.
results_
)
;
}
ValType
arg
(
unsigned
i
)
const
{
return
args_
[
i
]
;
}
const
ValTypeVector
&
args
(
)
const
{
return
args_
;
}
ValType
result
(
unsigned
i
)
const
{
return
results_
[
i
]
;
}
const
ValTypeVector
&
results
(
)
const
{
return
results_
;
}
bool
hasImmediateTypeId
(
)
const
{
return
immediateTypeId_
!
=
NO_IMMEDIATE_TYPE_ID
;
}
uint32_t
immediateTypeId
(
)
const
{
MOZ_ASSERT
(
hasImmediateTypeId
(
)
)
;
return
immediateTypeId_
;
}
static
const
uint32_t
ImmediateBit
=
0x1
;
HashNumber
hash
(
const
RecGroup
*
recGroup
)
const
{
HashNumber
hn
=
0
;
for
(
const
ValType
&
vt
:
args_
)
{
hn
=
mozilla
:
:
AddToHash
(
hn
vt
.
forMatch
(
recGroup
)
.
hash
(
)
)
;
}
for
(
const
ValType
&
vt
:
results_
)
{
hn
=
mozilla
:
:
AddToHash
(
hn
vt
.
forMatch
(
recGroup
)
.
hash
(
)
)
;
}
return
hn
;
}
static
bool
matches
(
const
RecGroup
*
lhsRecGroup
const
FuncType
&
lhs
const
RecGroup
*
rhsRecGroup
const
FuncType
&
rhs
)
{
if
(
lhs
.
args_
.
length
(
)
!
=
rhs
.
args_
.
length
(
)
|
|
lhs
.
results_
.
length
(
)
!
=
rhs
.
results_
.
length
(
)
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
lhs
.
args_
.
length
(
)
;
i
+
+
)
{
if
(
lhs
.
args_
[
i
]
.
forMatch
(
lhsRecGroup
)
!
=
rhs
.
args_
[
i
]
.
forMatch
(
rhsRecGroup
)
)
{
return
false
;
}
}
for
(
uint32_t
i
=
0
;
i
<
lhs
.
results_
.
length
(
)
;
i
+
+
)
{
if
(
lhs
.
results_
[
i
]
.
forMatch
(
lhsRecGroup
)
!
=
rhs
.
results_
[
i
]
.
forMatch
(
rhsRecGroup
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
strictlyEquals
(
const
FuncType
&
lhs
const
FuncType
&
rhs
)
{
return
EqualContainers
(
lhs
.
args
(
)
rhs
.
args
(
)
)
&
&
EqualContainers
(
lhs
.
results
(
)
rhs
.
results
(
)
)
;
}
static
bool
canBeSubTypeOf
(
const
FuncType
&
subType
const
FuncType
&
superType
)
{
if
(
subType
.
args
(
)
.
length
(
)
!
=
superType
.
args
(
)
.
length
(
)
)
{
return
false
;
}
if
(
subType
.
results
(
)
.
length
(
)
!
=
superType
.
results
(
)
.
length
(
)
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
superType
.
results
(
)
.
length
(
)
;
i
+
+
)
{
if
(
!
ValType
:
:
isSubTypeOf
(
subType
.
results
(
)
[
i
]
superType
.
results
(
)
[
i
]
)
)
{
return
false
;
}
}
for
(
uint32_t
i
=
0
;
i
<
superType
.
args
(
)
.
length
(
)
;
i
+
+
)
{
if
(
!
ValType
:
:
isSubTypeOf
(
superType
.
args
(
)
[
i
]
subType
.
args
(
)
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
bool
canHaveJitEntry
(
)
const
;
bool
canHaveJitExit
(
)
const
;
bool
hasInt64Arg
(
)
const
{
for
(
ValType
arg
:
args
(
)
)
{
if
(
arg
.
kind
(
)
=
=
ValType
:
:
Kind
:
:
I64
)
{
return
true
;
}
}
return
false
;
}
bool
hasUnexposableArgOrRet
(
)
const
{
for
(
ValType
arg
:
args
(
)
)
{
if
(
!
arg
.
isExposable
(
)
)
{
return
true
;
}
}
for
(
ValType
result
:
results
(
)
)
{
if
(
!
result
.
isExposable
(
)
)
{
return
true
;
}
}
return
false
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
FuncType
)
;
}
;
struct
StructField
{
FieldType
type
;
uint32_t
offset
;
bool
isMutable
;
HashNumber
hash
(
const
RecGroup
*
recGroup
)
const
{
HashNumber
hn
=
0
;
hn
=
mozilla
:
:
AddToHash
(
hn
type
.
forMatch
(
recGroup
)
.
hash
(
)
)
;
hn
=
mozilla
:
:
AddToHash
(
hn
HashNumber
(
isMutable
)
)
;
return
hn
;
}
static
bool
canBeSubTypeOf
(
const
StructField
&
subType
const
StructField
&
superType
)
{
if
(
subType
.
isMutable
&
&
superType
.
isMutable
)
{
return
subType
.
type
=
=
superType
.
type
;
}
if
(
!
subType
.
isMutable
&
&
!
superType
.
isMutable
)
{
return
FieldType
:
:
isSubTypeOf
(
subType
.
type
superType
.
type
)
;
}
return
false
;
}
}
;
using
StructFieldVector
=
Vector
<
StructField
0
SystemAllocPolicy
>
;
using
InlineTraceOffsetVector
=
Vector
<
uint32_t
2
SystemAllocPolicy
>
;
using
OutlineTraceOffsetVector
=
Vector
<
uint32_t
0
SystemAllocPolicy
>
;
class
StructType
{
public
:
StructFieldVector
fields_
;
uint32_t
size_
;
InlineTraceOffsetVector
inlineTraceOffsets_
;
OutlineTraceOffsetVector
outlineTraceOffsets_
;
public
:
StructType
(
)
:
fields_
(
)
size_
(
0
)
{
}
explicit
StructType
(
StructFieldVector
&
&
fields
)
:
fields_
(
std
:
:
move
(
fields
)
)
size_
(
0
)
{
}
StructType
(
StructType
&
&
)
=
default
;
StructType
&
operator
=
(
StructType
&
&
)
=
default
;
[
[
nodiscard
]
]
bool
clone
(
const
StructType
&
src
)
{
if
(
!
fields_
.
appendAll
(
src
.
fields_
)
)
{
return
false
;
}
size_
=
src
.
size_
;
return
true
;
}
[
[
nodiscard
]
]
bool
init
(
)
;
bool
isDefaultable
(
)
const
{
for
(
auto
&
field
:
fields_
)
{
if
(
!
field
.
type
.
isDefaultable
(
)
)
{
return
false
;
}
}
return
true
;
}
HashNumber
hash
(
const
RecGroup
*
recGroup
)
const
{
HashNumber
hn
=
0
;
for
(
const
StructField
&
field
:
fields_
)
{
hn
=
mozilla
:
:
AddToHash
(
hn
field
.
hash
(
recGroup
)
)
;
}
return
hn
;
}
static
bool
matches
(
const
RecGroup
*
lhsRecGroup
const
StructType
&
lhs
const
RecGroup
*
rhsRecGroup
const
StructType
&
rhs
)
{
if
(
lhs
.
fields_
.
length
(
)
!
=
rhs
.
fields_
.
length
(
)
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
lhs
.
fields_
.
length
(
)
;
i
+
+
)
{
const
StructField
&
lhsField
=
lhs
.
fields_
[
i
]
;
const
StructField
&
rhsField
=
rhs
.
fields_
[
i
]
;
if
(
lhsField
.
isMutable
!
=
rhsField
.
isMutable
|
|
lhsField
.
type
.
forMatch
(
lhsRecGroup
)
!
=
rhsField
.
type
.
forMatch
(
rhsRecGroup
)
)
{
return
false
;
}
}
return
true
;
}
static
bool
canBeSubTypeOf
(
const
StructType
&
subType
const
StructType
&
superType
)
{
if
(
subType
.
fields_
.
length
(
)
<
superType
.
fields_
.
length
(
)
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
superType
.
fields_
.
length
(
)
;
i
+
+
)
{
if
(
!
StructField
:
:
canBeSubTypeOf
(
subType
.
fields_
[
i
]
superType
.
fields_
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
StructType
)
;
}
;
using
StructTypeVector
=
Vector
<
StructType
0
SystemAllocPolicy
>
;
class
StructLayout
{
CheckedInt32
sizeSoFar
=
0
;
uint32_t
structAlignment
=
1
;
public
:
CheckedInt32
addField
(
FieldType
type
)
;
CheckedInt32
close
(
)
;
}
;
class
ArrayType
{
public
:
FieldType
elementType_
;
bool
isMutable_
;
public
:
ArrayType
(
)
:
isMutable_
(
false
)
{
}
ArrayType
(
FieldType
elementType
bool
isMutable
)
:
elementType_
(
elementType
)
isMutable_
(
isMutable
)
{
}
ArrayType
(
const
ArrayType
&
)
=
default
;
ArrayType
&
operator
=
(
const
ArrayType
&
)
=
default
;
ArrayType
(
ArrayType
&
&
)
=
default
;
ArrayType
&
operator
=
(
ArrayType
&
&
)
=
default
;
[
[
nodiscard
]
]
bool
clone
(
const
ArrayType
&
src
)
{
elementType_
=
src
.
elementType_
;
isMutable_
=
src
.
isMutable_
;
return
true
;
}
bool
isDefaultable
(
)
const
{
return
elementType_
.
isDefaultable
(
)
;
}
HashNumber
hash
(
const
RecGroup
*
recGroup
)
const
{
HashNumber
hn
=
0
;
hn
=
mozilla
:
:
AddToHash
(
hn
elementType_
.
forMatch
(
recGroup
)
.
hash
(
)
)
;
hn
=
mozilla
:
:
AddToHash
(
hn
HashNumber
(
isMutable_
)
)
;
return
hn
;
}
static
bool
matches
(
const
RecGroup
*
lhsRecGroup
const
ArrayType
&
lhs
const
RecGroup
*
rhsRecGroup
const
ArrayType
&
rhs
)
{
if
(
lhs
.
isMutable_
!
=
rhs
.
isMutable_
|
|
lhs
.
elementType_
.
forMatch
(
lhsRecGroup
)
!
=
rhs
.
elementType_
.
forMatch
(
rhsRecGroup
)
)
{
return
false
;
}
return
true
;
}
static
bool
canBeSubTypeOf
(
const
ArrayType
&
subType
const
ArrayType
&
superType
)
{
if
(
subType
.
isMutable_
&
&
superType
.
isMutable_
)
{
return
subType
.
elementType_
=
=
superType
.
elementType_
;
}
if
(
!
subType
.
isMutable_
&
&
!
superType
.
isMutable_
)
{
return
FieldType
:
:
isSubTypeOf
(
subType
.
elementType_
superType
.
elementType_
)
;
}
return
true
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
WASM_DECLARE_CACHEABLE_POD
(
ArrayType
)
;
using
ArrayTypeVector
=
Vector
<
ArrayType
0
SystemAllocPolicy
>
;
class
SuperTypeVector
{
SuperTypeVector
(
)
:
typeDef_
(
nullptr
)
length_
(
0
)
{
}
const
TypeDef
*
typeDef_
;
uint32_t
length_
;
public
:
const
SuperTypeVector
*
types_
[
0
]
;
[
[
nodiscard
]
]
static
const
SuperTypeVector
*
createMultipleForRecGroup
(
RecGroup
*
recGroup
)
;
const
TypeDef
*
typeDef
(
)
const
{
return
typeDef_
;
}
void
setTypeDef
(
const
TypeDef
*
typeDef
)
{
typeDef_
=
typeDef
;
}
uint32_t
length
(
)
const
{
return
length_
;
}
void
setLength
(
uint32_t
length
)
{
length_
=
length
;
}
const
SuperTypeVector
*
type
(
size_t
index
)
const
{
MOZ_ASSERT
(
index
<
length_
)
;
return
types_
[
index
]
;
}
void
setType
(
size_t
index
const
SuperTypeVector
*
type
)
{
MOZ_ASSERT
(
index
<
length_
)
;
types_
[
index
]
=
type
;
}
static
size_t
lengthForTypeDef
(
const
TypeDef
&
typeDef
)
;
static
size_t
byteSizeForTypeDef
(
const
TypeDef
&
typeDef
)
;
static
size_t
offsetOfLength
(
)
{
return
offsetof
(
SuperTypeVector
length_
)
;
}
static
size_t
offsetOfSelfTypeDef
(
)
{
return
offsetof
(
SuperTypeVector
typeDef_
)
;
}
;
static
size_t
offsetOfTypeDefInVector
(
uint32_t
typeDefDepth
)
;
}
;
static_assert
(
offsetof
(
SuperTypeVector
types_
)
=
=
sizeof
(
SuperTypeVector
)
)
;
enum
class
TypeDefKind
:
uint8_t
{
None
=
0
Func
Struct
Array
}
;
class
TypeDef
{
uint32_t
offsetToRecGroup_
;
const
SuperTypeVector
*
superTypeVector_
;
const
TypeDef
*
superTypeDef_
;
uint16_t
subTypingDepth_
;
bool
isFinal_
;
TypeDefKind
kind_
;
union
{
FuncType
funcType_
;
StructType
structType_
;
ArrayType
arrayType_
;
}
;
void
setRecGroup
(
RecGroup
*
recGroup
)
{
uintptr_t
recGroupAddr
=
(
uintptr_t
)
recGroup
;
uintptr_t
typeDefAddr
=
(
uintptr_t
)
this
;
MOZ_ASSERT
(
typeDefAddr
>
recGroupAddr
)
;
MOZ_ASSERT
(
typeDefAddr
-
recGroupAddr
<
=
UINT32_MAX
)
;
offsetToRecGroup_
=
typeDefAddr
-
recGroupAddr
;
}
public
:
explicit
TypeDef
(
RecGroup
*
recGroup
)
:
offsetToRecGroup_
(
0
)
superTypeVector_
(
nullptr
)
superTypeDef_
(
nullptr
)
subTypingDepth_
(
0
)
isFinal_
(
false
)
kind_
(
TypeDefKind
:
:
None
)
{
setRecGroup
(
recGroup
)
;
}
~
TypeDef
(
)
{
switch
(
kind_
)
{
case
TypeDefKind
:
:
Func
:
funcType_
.
~
FuncType
(
)
;
break
;
case
TypeDefKind
:
:
Struct
:
structType_
.
~
StructType
(
)
;
break
;
case
TypeDefKind
:
:
Array
:
arrayType_
.
~
ArrayType
(
)
;
break
;
case
TypeDefKind
:
:
None
:
break
;
}
}
TypeDef
&
operator
=
(
FuncType
&
&
that
)
noexcept
{
MOZ_ASSERT
(
isNone
(
)
)
;
kind_
=
TypeDefKind
:
:
Func
;
new
(
&
funcType_
)
FuncType
(
std
:
:
move
(
that
)
)
;
return
*
this
;
}
TypeDef
&
operator
=
(
StructType
&
&
that
)
noexcept
{
MOZ_ASSERT
(
isNone
(
)
)
;
kind_
=
TypeDefKind
:
:
Struct
;
new
(
&
structType_
)
StructType
(
std
:
:
move
(
that
)
)
;
return
*
this
;
}
TypeDef
&
operator
=
(
ArrayType
&
&
that
)
noexcept
{
MOZ_ASSERT
(
isNone
(
)
)
;
kind_
=
TypeDefKind
:
:
Array
;
new
(
&
arrayType_
)
ArrayType
(
std
:
:
move
(
that
)
)
;
return
*
this
;
}
const
SuperTypeVector
*
superTypeVector
(
)
const
{
return
superTypeVector_
;
}
void
setSuperTypeVector
(
const
SuperTypeVector
*
superTypeVector
)
{
superTypeVector_
=
superTypeVector
;
}
static
size_t
offsetOfKind
(
)
{
return
offsetof
(
TypeDef
kind_
)
;
}
static
size_t
offsetOfSuperTypeVector
(
)
{
return
offsetof
(
TypeDef
superTypeVector_
)
;
}
const
TypeDef
*
superTypeDef
(
)
const
{
return
superTypeDef_
;
}
bool
isFinal
(
)
const
{
return
isFinal_
;
}
uint16_t
subTypingDepth
(
)
const
{
return
subTypingDepth_
;
}
const
RecGroup
&
recGroup
(
)
const
{
uintptr_t
typeDefAddr
=
(
uintptr_t
)
this
;
uintptr_t
recGroupAddr
=
typeDefAddr
-
offsetToRecGroup_
;
return
*
(
const
RecGroup
*
)
recGroupAddr
;
}
TypeDefKind
kind
(
)
const
{
return
kind_
;
}
bool
isNone
(
)
const
{
return
kind_
=
=
TypeDefKind
:
:
None
;
}
bool
isFuncType
(
)
const
{
return
kind_
=
=
TypeDefKind
:
:
Func
;
}
bool
isStructType
(
)
const
{
return
kind_
=
=
TypeDefKind
:
:
Struct
;
}
bool
isArrayType
(
)
const
{
return
kind_
=
=
TypeDefKind
:
:
Array
;
}
const
FuncType
&
funcType
(
)
const
{
MOZ_ASSERT
(
isFuncType
(
)
)
;
return
funcType_
;
}
FuncType
&
funcType
(
)
{
MOZ_ASSERT
(
isFuncType
(
)
)
;
return
funcType_
;
}
const
StructType
&
structType
(
)
const
{
MOZ_ASSERT
(
isStructType
(
)
)
;
return
structType_
;
}
StructType
&
structType
(
)
{
MOZ_ASSERT
(
isStructType
(
)
)
;
return
structType_
;
}
const
ArrayType
&
arrayType
(
)
const
{
MOZ_ASSERT
(
isArrayType
(
)
)
;
return
arrayType_
;
}
ArrayType
&
arrayType
(
)
{
MOZ_ASSERT
(
isArrayType
(
)
)
;
return
arrayType_
;
}
static
inline
uintptr_t
forMatch
(
const
TypeDef
*
typeDef
const
RecGroup
*
recGroup
)
;
HashNumber
hash
(
)
const
{
HashNumber
hn
=
HashNumber
(
kind_
)
;
hn
=
mozilla
:
:
AddToHash
(
hn
TypeDef
:
:
forMatch
(
superTypeDef_
&
recGroup
(
)
)
)
;
hn
=
mozilla
:
:
AddToHash
(
hn
isFinal_
)
;
switch
(
kind_
)
{
case
TypeDefKind
:
:
Func
:
hn
=
mozilla
:
:
AddToHash
(
hn
funcType_
.
hash
(
&
recGroup
(
)
)
)
;
break
;
case
TypeDefKind
:
:
Struct
:
hn
=
mozilla
:
:
AddToHash
(
hn
structType_
.
hash
(
&
recGroup
(
)
)
)
;
break
;
case
TypeDefKind
:
:
Array
:
hn
=
mozilla
:
:
AddToHash
(
hn
arrayType_
.
hash
(
&
recGroup
(
)
)
)
;
break
;
case
TypeDefKind
:
:
None
:
break
;
}
return
hn
;
}
static
bool
matches
(
const
TypeDef
&
lhs
const
TypeDef
&
rhs
)
{
if
(
lhs
.
kind_
!
=
rhs
.
kind_
)
{
return
false
;
}
if
(
lhs
.
isFinal_
!
=
rhs
.
isFinal_
)
{
return
false
;
}
if
(
TypeDef
:
:
forMatch
(
lhs
.
superTypeDef_
&
lhs
.
recGroup
(
)
)
!
=
TypeDef
:
:
forMatch
(
rhs
.
superTypeDef_
&
rhs
.
recGroup
(
)
)
)
{
return
false
;
}
switch
(
lhs
.
kind_
)
{
case
TypeDefKind
:
:
Func
:
return
FuncType
:
:
matches
(
&
lhs
.
recGroup
(
)
lhs
.
funcType_
&
rhs
.
recGroup
(
)
rhs
.
funcType_
)
;
case
TypeDefKind
:
:
Struct
:
return
StructType
:
:
matches
(
&
lhs
.
recGroup
(
)
lhs
.
structType_
&
rhs
.
recGroup
(
)
rhs
.
structType_
)
;
case
TypeDefKind
:
:
Array
:
return
ArrayType
:
:
matches
(
&
lhs
.
recGroup
(
)
lhs
.
arrayType_
&
rhs
.
recGroup
(
)
rhs
.
arrayType_
)
;
case
TypeDefKind
:
:
None
:
return
true
;
}
return
false
;
}
static
bool
canBeSubTypeOf
(
const
TypeDef
*
subType
const
TypeDef
*
superType
)
{
if
(
subType
-
>
kind
(
)
!
=
superType
-
>
kind
(
)
)
{
return
false
;
}
if
(
superType
-
>
isFinal
(
)
)
{
return
false
;
}
switch
(
subType
-
>
kind_
)
{
case
TypeDefKind
:
:
Func
:
return
FuncType
:
:
canBeSubTypeOf
(
subType
-
>
funcType_
superType
-
>
funcType_
)
;
case
TypeDefKind
:
:
Struct
:
return
StructType
:
:
canBeSubTypeOf
(
subType
-
>
structType_
superType
-
>
structType_
)
;
case
TypeDefKind
:
:
Array
:
return
ArrayType
:
:
canBeSubTypeOf
(
subType
-
>
arrayType_
superType
-
>
arrayType_
)
;
case
TypeDefKind
:
:
None
:
MOZ_CRASH
(
)
;
}
return
false
;
}
void
setSuperTypeDef
(
const
TypeDef
*
superTypeDef
)
{
superTypeDef_
=
superTypeDef
;
subTypingDepth_
=
superTypeDef_
-
>
subTypingDepth_
+
1
;
}
void
setFinal
(
const
bool
value
)
{
isFinal_
=
value
;
}
static
bool
isSubTypeOf
(
const
TypeDef
*
subTypeDef
const
TypeDef
*
superTypeDef
)
{
if
(
MOZ_LIKELY
(
subTypeDef
=
=
superTypeDef
)
)
{
return
true
;
}
const
SuperTypeVector
*
subSuperTypeVector
=
subTypeDef
-
>
superTypeVector
(
)
;
if
(
!
subSuperTypeVector
)
{
while
(
subTypeDef
)
{
if
(
subTypeDef
=
=
superTypeDef
)
{
return
true
;
}
subTypeDef
=
subTypeDef
-
>
superTypeDef
(
)
;
}
return
false
;
}
MOZ_ASSERT
(
subSuperTypeVector
-
>
typeDef
(
)
=
=
subTypeDef
)
;
uint32_t
subTypingDepth
=
superTypeDef
-
>
subTypingDepth
(
)
;
if
(
subTypingDepth
>
=
subSuperTypeVector
-
>
length
(
)
)
{
return
false
;
}
const
SuperTypeVector
*
superSuperTypeVector
=
superTypeDef
-
>
superTypeVector
(
)
;
MOZ_ASSERT
(
superSuperTypeVector
)
;
MOZ_ASSERT
(
superSuperTypeVector
-
>
typeDef
(
)
=
=
superTypeDef
)
;
return
subSuperTypeVector
-
>
type
(
subTypingDepth
)
=
=
superSuperTypeVector
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
TypeDef
)
;
}
;
using
SharedTypeDef
=
RefPtr
<
const
TypeDef
>
;
using
MutableTypeDef
=
RefPtr
<
TypeDef
>
;
using
TypeDefVector
=
Vector
<
TypeDef
0
SystemAllocPolicy
>
;
using
TypeDefPtrVector
=
Vector
<
const
TypeDef
*
0
SystemAllocPolicy
>
;
using
TypeDefPtrToIndexMap
=
HashMap
<
const
TypeDef
*
uint32_t
PointerHasher
<
const
TypeDef
*
>
SystemAllocPolicy
>
;
class
RecGroup
:
public
AtomicRefCounted
<
RecGroup
>
{
bool
finalizedTypes_
;
uint32_t
numTypes_
;
const
SuperTypeVector
*
vectors_
;
TypeDef
types_
[
0
]
;
friend
class
TypeContext
;
explicit
RecGroup
(
uint32_t
numTypes
)
:
finalizedTypes_
(
false
)
numTypes_
(
numTypes
)
vectors_
(
nullptr
)
{
}
static
constexpr
size_t
sizeOfRecGroup
(
uint32_t
numTypes
)
{
static_assert
(
MaxTypes
<
=
SIZE_MAX
/
sizeof
(
TypeDef
)
)
;
return
sizeof
(
RecGroup
)
+
sizeof
(
TypeDef
)
*
numTypes
;
}
static
RefPtr
<
RecGroup
>
allocate
(
uint32_t
numTypes
)
{
RecGroup
*
recGroup
=
(
RecGroup
*
)
js_malloc
(
sizeOfRecGroup
(
numTypes
)
)
;
if
(
!
recGroup
)
{
return
nullptr
;
}
new
(
recGroup
)
RecGroup
(
numTypes
)
;
for
(
uint32_t
i
=
0
;
i
<
numTypes
;
i
+
+
)
{
new
(
recGroup
-
>
types_
+
i
)
TypeDef
(
recGroup
)
;
}
return
recGroup
;
}
[
[
nodiscard
]
]
bool
finalizeDefinitions
(
)
{
MOZ_ASSERT
(
!
finalizedTypes_
)
;
#
ifdef
ENABLE_WASM_GC
vectors_
=
SuperTypeVector
:
:
createMultipleForRecGroup
(
this
)
;
if
(
!
vectors_
)
{
return
false
;
}
#
endif
visitReferencedGroups
(
[
]
(
const
RecGroup
*
recGroup
)
{
recGroup
-
>
AddRef
(
)
;
}
)
;
finalizedTypes_
=
true
;
return
true
;
}
template
<
typename
Visitor
>
void
visitReferencedGroups
(
Visitor
visitor
)
const
{
auto
visitValType
=
[
this
visitor
]
(
ValType
type
)
{
if
(
type
.
isTypeRef
(
)
&
&
&
type
.
typeDef
(
)
-
>
recGroup
(
)
!
=
this
)
{
visitor
(
&
type
.
typeDef
(
)
-
>
recGroup
(
)
)
;
}
}
;
auto
visitFieldType
=
[
this
visitor
]
(
FieldType
type
)
{
if
(
type
.
isTypeRef
(
)
&
&
&
type
.
typeDef
(
)
-
>
recGroup
(
)
!
=
this
)
{
visitor
(
&
type
.
typeDef
(
)
-
>
recGroup
(
)
)
;
}
}
;
for
(
uint32_t
i
=
0
;
i
<
numTypes_
;
i
+
+
)
{
const
TypeDef
&
typeDef
=
types_
[
i
]
;
if
(
typeDef
.
superTypeDef
(
)
&
&
&
typeDef
.
superTypeDef
(
)
-
>
recGroup
(
)
!
=
this
)
{
visitor
(
&
typeDef
.
superTypeDef
(
)
-
>
recGroup
(
)
)
;
}
switch
(
typeDef
.
kind
(
)
)
{
case
TypeDefKind
:
:
Func
:
{
const
FuncType
&
funcType
=
typeDef
.
funcType
(
)
;
for
(
auto
type
:
funcType
.
args
(
)
)
{
visitValType
(
type
)
;
}
for
(
auto
type
:
funcType
.
results
(
)
)
{
visitValType
(
type
)
;
}
break
;
}
case
TypeDefKind
:
:
Struct
:
{
const
StructType
&
structType
=
typeDef
.
structType
(
)
;
for
(
const
auto
&
field
:
structType
.
fields_
)
{
visitFieldType
(
field
.
type
)
;
}
break
;
}
case
TypeDefKind
:
:
Array
:
{
const
ArrayType
&
arrayType
=
typeDef
.
arrayType
(
)
;
visitFieldType
(
arrayType
.
elementType_
)
;
break
;
}
case
TypeDefKind
:
:
None
:
{
MOZ_CRASH
(
)
;
}
}
}
}
public
:
~
RecGroup
(
)
{
if
(
finalizedTypes_
)
{
finalizedTypes_
=
false
;
visitReferencedGroups
(
[
]
(
const
RecGroup
*
recGroup
)
{
recGroup
-
>
Release
(
)
;
}
)
;
}
if
(
vectors_
)
{
js_free
(
(
void
*
)
vectors_
)
;
vectors_
=
nullptr
;
}
for
(
uint32_t
i
=
0
;
i
<
numTypes_
;
i
+
+
)
{
type
(
i
)
.
~
TypeDef
(
)
;
}
}
RecGroup
&
operator
=
(
const
RecGroup
&
)
=
delete
;
RecGroup
&
operator
=
(
RecGroup
&
&
)
=
delete
;
TypeDef
&
type
(
uint32_t
groupTypeIndex
)
{
MOZ_ASSERT
(
!
finalizedTypes_
)
;
return
types_
[
groupTypeIndex
]
;
}
const
TypeDef
&
type
(
uint32_t
groupTypeIndex
)
const
{
return
types_
[
groupTypeIndex
]
;
}
uint32_t
numTypes
(
)
const
{
return
numTypes_
;
}
uint32_t
indexOf
(
const
TypeDef
*
typeDef
)
const
{
MOZ_ASSERT
(
typeDef
>
=
types_
)
;
size_t
groupTypeIndex
=
(
size_t
)
(
typeDef
-
types_
)
;
MOZ_ASSERT
(
groupTypeIndex
<
numTypes
(
)
)
;
return
(
uint32_t
)
groupTypeIndex
;
}
HashNumber
hash
(
)
const
{
HashNumber
hn
=
0
;
for
(
uint32_t
i
=
0
;
i
<
numTypes
(
)
;
i
+
+
)
{
hn
=
mozilla
:
:
AddToHash
(
hn
types_
[
i
]
.
hash
(
)
)
;
}
return
hn
;
}
static
bool
matches
(
const
RecGroup
&
lhs
const
RecGroup
&
rhs
)
{
if
(
lhs
.
numTypes
(
)
!
=
rhs
.
numTypes
(
)
)
{
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
lhs
.
numTypes
(
)
;
i
+
+
)
{
if
(
!
TypeDef
:
:
matches
(
lhs
.
type
(
i
)
rhs
.
type
(
i
)
)
)
{
return
false
;
}
}
return
true
;
}
}
;
extern
void
PurgeCanonicalTypes
(
)
;
using
SharedRecGroup
=
RefPtr
<
const
RecGroup
>
;
using
MutableRecGroup
=
RefPtr
<
RecGroup
>
;
using
SharedRecGroupVector
=
Vector
<
SharedRecGroup
0
SystemAllocPolicy
>
;
class
TypeContext
:
public
AtomicRefCounted
<
TypeContext
>
{
FeatureArgs
features_
;
MutableRecGroup
pendingRecGroup_
;
SharedRecGroupVector
recGroups_
;
TypeDefPtrVector
types_
;
TypeDefPtrToIndexMap
moduleIndices_
;
static
SharedRecGroup
canonicalizeGroup
(
SharedRecGroup
recGroup
)
;
public
:
TypeContext
(
)
=
default
;
explicit
TypeContext
(
const
FeatureArgs
&
features
)
:
features_
(
features
)
{
}
~
TypeContext
(
)
;
size_t
sizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
)
const
{
return
types_
.
sizeOfExcludingThis
(
mallocSizeOf
)
+
moduleIndices_
.
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
TypeContext
(
const
TypeContext
&
)
=
delete
;
TypeContext
&
operator
=
(
const
TypeContext
&
)
=
delete
;
TypeContext
(
TypeContext
&
&
)
=
delete
;
TypeContext
&
operator
=
(
TypeContext
&
&
)
=
delete
;
[
[
nodiscard
]
]
MutableRecGroup
startRecGroup
(
uint32_t
numTypes
)
{
MOZ_ASSERT
(
!
pendingRecGroup_
)
;
pendingRecGroup_
=
RecGroup
:
:
allocate
(
numTypes
)
;
if
(
!
pendingRecGroup_
|
|
!
recGroups_
.
append
(
pendingRecGroup_
)
)
{
return
nullptr
;
}
for
(
uint32_t
groupTypeIndex
=
0
;
groupTypeIndex
<
numTypes
;
groupTypeIndex
+
+
)
{
const
TypeDef
*
typeDef
=
&
pendingRecGroup_
-
>
type
(
groupTypeIndex
)
;
uint32_t
typeIndex
=
types_
.
length
(
)
;
if
(
!
types_
.
append
(
typeDef
)
|
|
!
moduleIndices_
.
put
(
typeDef
typeIndex
)
)
{
return
nullptr
;
}
}
return
pendingRecGroup_
;
}
[
[
nodiscard
]
]
bool
endRecGroup
(
)
{
MOZ_ASSERT
(
pendingRecGroup_
)
;
MutableRecGroup
recGroup
=
pendingRecGroup_
;
pendingRecGroup_
=
nullptr
;
if
(
!
recGroup
-
>
finalizeDefinitions
(
)
)
{
return
false
;
}
SharedRecGroup
canonicalRecGroup
=
canonicalizeGroup
(
recGroup
)
;
if
(
!
canonicalRecGroup
)
{
return
false
;
}
if
(
canonicalRecGroup
=
=
recGroup
)
{
return
true
;
}
recGroups_
.
back
(
)
=
canonicalRecGroup
;
MOZ_ASSERT
(
recGroup
-
>
numTypes
(
)
=
=
canonicalRecGroup
-
>
numTypes
(
)
)
;
for
(
uint32_t
groupTypeIndex
=
0
;
groupTypeIndex
<
recGroup
-
>
numTypes
(
)
;
groupTypeIndex
+
+
)
{
uint32_t
typeIndex
=
length
(
)
-
recGroup
-
>
numTypes
(
)
+
groupTypeIndex
;
const
TypeDef
*
oldTypeDef
=
types_
[
typeIndex
]
;
const
TypeDef
*
canonTypeDef
=
&
canonicalRecGroup
-
>
type
(
groupTypeIndex
)
;
types_
[
typeIndex
]
=
canonTypeDef
;
moduleIndices_
.
remove
(
oldTypeDef
)
;
auto
canonTypeIndexEntry
=
moduleIndices_
.
lookupForAdd
(
canonTypeDef
)
;
if
(
!
canonTypeIndexEntry
&
&
!
moduleIndices_
.
add
(
canonTypeIndexEntry
canonTypeDef
typeIndex
)
)
{
return
false
;
}
}
return
true
;
}
template
<
typename
T
>
[
[
nodiscard
]
]
bool
addType
(
T
&
&
type
)
{
MutableRecGroup
recGroup
=
startRecGroup
(
1
)
;
if
(
!
recGroup
)
{
return
false
;
}
recGroup
-
>
type
(
0
)
=
std
:
:
move
(
type
)
;
return
endRecGroup
(
)
;
}
const
TypeDef
&
type
(
uint32_t
index
)
const
{
return
*
types_
[
index
]
;
}
const
TypeDef
&
operator
[
]
(
uint32_t
index
)
const
{
return
*
types_
[
index
]
;
}
bool
empty
(
)
const
{
return
types_
.
empty
(
)
;
}
uint32_t
length
(
)
const
{
return
types_
.
length
(
)
;
}
const
SharedRecGroupVector
&
groups
(
)
const
{
return
recGroups_
;
}
uint32_t
indexOf
(
const
TypeDef
&
typeDef
)
const
{
auto
moduleIndex
=
moduleIndices_
.
readonlyThreadsafeLookup
(
&
typeDef
)
;
MOZ_RELEASE_ASSERT
(
moduleIndex
.
found
(
)
)
;
return
moduleIndex
-
>
value
(
)
;
}
}
;
using
SharedTypeContext
=
RefPtr
<
const
TypeContext
>
;
using
MutableTypeContext
=
RefPtr
<
TypeContext
>
;
class
TypeHandle
{
private
:
SharedTypeContext
context_
;
uint32_t
index_
;
public
:
TypeHandle
(
SharedTypeContext
context
uint32_t
index
)
:
context_
(
context
)
index_
(
index
)
{
MOZ_ASSERT
(
index_
<
context_
-
>
length
(
)
)
;
}
TypeHandle
(
SharedTypeContext
context
const
TypeDef
&
def
)
:
context_
(
context
)
index_
(
context
-
>
indexOf
(
def
)
)
{
}
TypeHandle
(
const
TypeHandle
&
)
=
default
;
TypeHandle
&
operator
=
(
const
TypeHandle
&
)
=
default
;
const
SharedTypeContext
&
context
(
)
const
{
return
context_
;
}
uint32_t
index
(
)
const
{
return
index_
;
}
const
TypeDef
&
def
(
)
const
{
return
context_
-
>
type
(
index_
)
;
}
}
;
inline
uintptr_t
TypeDef
:
:
forMatch
(
const
TypeDef
*
typeDef
const
RecGroup
*
recGroup
)
{
static_assert
(
alignof
(
TypeDef
)
>
1
)
;
MOZ_ASSERT
(
(
uintptr_t
(
typeDef
)
&
0x1
)
=
=
0
)
;
if
(
typeDef
&
&
&
typeDef
-
>
recGroup
(
)
=
=
recGroup
)
{
return
uintptr_t
(
recGroup
-
>
indexOf
(
typeDef
)
)
|
0x1
;
}
return
uintptr_t
(
typeDef
)
;
}
inline
MatchTypeCode
MatchTypeCode
:
:
forMatch
(
PackedTypeCode
ptc
const
RecGroup
*
recGroup
)
{
MatchTypeCode
mtc
=
{
}
;
mtc
.
typeCode
=
PackedRepr
(
ptc
.
typeCode
(
)
)
;
mtc
.
typeRef
=
TypeDef
:
:
forMatch
(
ptc
.
typeDef
(
)
recGroup
)
;
mtc
.
nullable
=
ptc
.
isNullable
(
)
;
return
mtc
;
}
inline
RefTypeHierarchy
RefType
:
:
hierarchy
(
)
const
{
switch
(
kind
(
)
)
{
case
RefType
:
:
Func
:
case
RefType
:
:
NoFunc
:
return
RefTypeHierarchy
:
:
Func
;
case
RefType
:
:
Extern
:
case
RefType
:
:
NoExtern
:
return
RefTypeHierarchy
:
:
Extern
;
case
RefType
:
:
Any
:
case
RefType
:
:
None
:
case
RefType
:
:
I31
:
case
RefType
:
:
Eq
:
case
RefType
:
:
Struct
:
case
RefType
:
:
Array
:
return
RefTypeHierarchy
:
:
Any
;
case
RefType
:
:
TypeRef
:
switch
(
typeDef
(
)
-
>
kind
(
)
)
{
case
TypeDefKind
:
:
Struct
:
case
TypeDefKind
:
:
Array
:
return
RefTypeHierarchy
:
:
Any
;
case
TypeDefKind
:
:
Func
:
return
RefTypeHierarchy
:
:
Func
;
case
TypeDefKind
:
:
None
:
MOZ_CRASH
(
)
;
}
}
MOZ_CRASH
(
"
switch
is
exhaustive
"
)
;
}
inline
TableRepr
RefType
:
:
tableRepr
(
)
const
{
switch
(
hierarchy
(
)
)
{
case
RefTypeHierarchy
:
:
Any
:
case
RefTypeHierarchy
:
:
Extern
:
return
TableRepr
:
:
Ref
;
case
RefTypeHierarchy
:
:
Func
:
return
TableRepr
:
:
Func
;
}
MOZ_CRASH
(
"
switch
is
exhaustive
"
)
;
}
inline
bool
RefType
:
:
isFuncHierarchy
(
)
const
{
return
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Func
;
}
inline
bool
RefType
:
:
isExternHierarchy
(
)
const
{
return
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Extern
;
}
inline
bool
RefType
:
:
isAnyHierarchy
(
)
const
{
return
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Any
;
}
inline
bool
RefType
:
:
isSubTypeOf
(
RefType
subType
RefType
superType
)
{
if
(
subType
=
=
superType
)
{
return
true
;
}
if
(
subType
.
isNullable
(
)
&
&
!
superType
.
isNullable
(
)
)
{
return
false
;
}
if
(
!
subType
.
isTypeRef
(
)
&
&
!
superType
.
isTypeRef
(
)
&
&
subType
.
kind
(
)
=
=
superType
.
kind
(
)
)
{
return
true
;
}
if
(
subType
.
isEq
(
)
&
&
superType
.
isAny
(
)
)
{
return
true
;
}
if
(
subType
.
isI31
(
)
&
&
(
superType
.
isAny
(
)
|
|
superType
.
isEq
(
)
)
)
{
return
true
;
}
if
(
(
subType
.
isStruct
(
)
|
|
subType
.
isArray
(
)
)
&
&
(
superType
.
isAny
(
)
|
|
superType
.
isEq
(
)
)
)
{
return
true
;
}
if
(
subType
.
isTypeRef
(
)
&
&
subType
.
typeDef
(
)
-
>
isStructType
(
)
&
&
(
superType
.
isAny
(
)
|
|
superType
.
isEq
(
)
|
|
superType
.
isStruct
(
)
)
)
{
return
true
;
}
if
(
subType
.
isTypeRef
(
)
&
&
subType
.
typeDef
(
)
-
>
isArrayType
(
)
&
&
(
superType
.
isAny
(
)
|
|
superType
.
isEq
(
)
|
|
superType
.
isArray
(
)
)
)
{
return
true
;
}
if
(
subType
.
isTypeRef
(
)
&
&
subType
.
typeDef
(
)
-
>
isFuncType
(
)
&
&
superType
.
isFunc
(
)
)
{
return
true
;
}
if
(
subType
.
isTypeRef
(
)
&
&
superType
.
isTypeRef
(
)
)
{
return
TypeDef
:
:
isSubTypeOf
(
subType
.
typeDef
(
)
superType
.
typeDef
(
)
)
;
}
if
(
subType
.
isNoFunc
(
)
&
&
superType
.
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Func
)
{
return
true
;
}
if
(
subType
.
isNoExtern
(
)
&
&
superType
.
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Extern
)
{
return
true
;
}
if
(
subType
.
isNone
(
)
&
&
superType
.
hierarchy
(
)
=
=
RefTypeHierarchy
:
:
Any
)
{
return
true
;
}
return
false
;
}
inline
bool
RefType
:
:
castPossible
(
RefType
sourceType
RefType
destType
)
{
if
(
sourceType
.
isNullable
(
)
&
&
destType
.
isNullable
(
)
)
{
return
true
;
}
if
(
sourceType
.
isRefBottom
(
)
|
|
destType
.
isRefBottom
(
)
)
{
return
false
;
}
RefType
sourceNonNull
=
sourceType
.
withIsNullable
(
false
)
;
RefType
destNonNull
=
destType
.
withIsNullable
(
false
)
;
return
RefType
:
:
isSubTypeOf
(
sourceNonNull
destNonNull
)
|
|
RefType
:
:
isSubTypeOf
(
destNonNull
sourceNonNull
)
;
}
}
}
#
endif
