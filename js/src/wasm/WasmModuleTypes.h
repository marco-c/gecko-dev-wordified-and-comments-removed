#
ifndef
wasm_module_types_h
#
define
wasm_module_types_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
RefCounted
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
wasm
/
WasmCompileArgs
.
h
"
#
include
"
wasm
/
WasmConstants
.
h
"
#
include
"
wasm
/
WasmExprType
.
h
"
#
include
"
wasm
/
WasmInitExpr
.
h
"
#
include
"
wasm
/
WasmMemory
.
h
"
#
include
"
wasm
/
WasmSerialize
.
h
"
#
include
"
wasm
/
WasmShareable
.
h
"
#
include
"
wasm
/
WasmTypeDecls
.
h
"
#
include
"
wasm
/
WasmValType
.
h
"
#
include
"
wasm
/
WasmValue
.
h
"
namespace
js
{
namespace
wasm
{
class
FuncType
;
enum
ModuleKind
{
Wasm
AsmJS
}
;
struct
CacheableChars
:
UniqueChars
{
CacheableChars
(
)
=
default
;
explicit
CacheableChars
(
char
*
ptr
)
:
UniqueChars
(
ptr
)
{
}
MOZ_IMPLICIT
CacheableChars
(
UniqueChars
&
&
rhs
)
:
UniqueChars
(
std
:
:
move
(
rhs
)
)
{
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
CacheableCharsVector
=
Vector
<
CacheableChars
0
SystemAllocPolicy
>
;
struct
CacheableName
{
private
:
UTF8Bytes
bytes_
;
const
char
*
begin
(
)
const
{
return
(
const
char
*
)
bytes_
.
begin
(
)
;
}
size_t
length
(
)
const
{
return
bytes_
.
length
(
)
;
}
public
:
CacheableName
(
)
=
default
;
MOZ_IMPLICIT
CacheableName
(
UTF8Bytes
&
&
rhs
)
:
bytes_
(
std
:
:
move
(
rhs
)
)
{
}
bool
isEmpty
(
)
const
{
return
bytes_
.
length
(
)
=
=
0
;
}
mozilla
:
:
Span
<
char
>
utf8Bytes
(
)
{
return
mozilla
:
:
Span
<
char
>
(
bytes_
)
;
}
mozilla
:
:
Span
<
const
char
>
utf8Bytes
(
)
const
{
return
mozilla
:
:
Span
<
const
char
>
(
bytes_
)
;
}
static
CacheableName
fromUTF8Chars
(
UniqueChars
&
&
utf8Chars
)
;
[
[
nodiscard
]
]
static
bool
fromUTF8Chars
(
const
char
*
utf8Chars
CacheableName
*
name
)
;
[
[
nodiscard
]
]
JSString
*
toJSString
(
JSContext
*
cx
)
const
;
[
[
nodiscard
]
]
JSAtom
*
toAtom
(
JSContext
*
cx
)
const
;
[
[
nodiscard
]
]
bool
toPropertyKey
(
JSContext
*
cx
MutableHandleId
propertyKey
)
const
;
[
[
nodiscard
]
]
UniqueChars
toQuotedString
(
JSContext
*
cx
)
const
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
CacheableName
)
;
}
;
using
CacheableNameVector
=
Vector
<
CacheableName
0
SystemAllocPolicy
>
;
struct
NameHasher
{
using
Key
=
mozilla
:
:
Span
<
const
char
>
;
using
Lookup
=
mozilla
:
:
Span
<
const
char
>
;
static
HashNumber
hash
(
const
Lookup
&
aLookup
)
{
return
mozilla
:
:
HashString
(
aLookup
.
data
(
)
aLookup
.
Length
(
)
)
;
}
static
bool
match
(
const
Key
&
aKey
const
Lookup
&
aLookup
)
{
return
aKey
=
=
aLookup
;
}
}
;
struct
Import
{
CacheableName
module
;
CacheableName
field
;
DefinitionKind
kind
;
Import
(
)
=
default
;
Import
(
CacheableName
&
&
module
CacheableName
&
&
field
DefinitionKind
kind
)
:
module
(
std
:
:
move
(
module
)
)
field
(
std
:
:
move
(
field
)
)
kind
(
kind
)
{
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
ImportVector
=
Vector
<
Import
0
SystemAllocPolicy
>
;
class
Export
{
public
:
struct
CacheablePod
{
DefinitionKind
kind_
;
uint32_t
index_
;
WASM_CHECK_CACHEABLE_POD
(
kind_
index_
)
;
}
;
private
:
CacheableName
fieldName_
;
CacheablePod
pod
;
public
:
Export
(
)
=
default
;
explicit
Export
(
CacheableName
&
&
fieldName
uint32_t
index
DefinitionKind
kind
)
;
const
CacheableName
&
fieldName
(
)
const
{
return
fieldName_
;
}
DefinitionKind
kind
(
)
const
{
return
pod
.
kind_
;
}
uint32_t
funcIndex
(
)
const
;
uint32_t
tagIndex
(
)
const
;
uint32_t
memoryIndex
(
)
const
;
uint32_t
globalIndex
(
)
const
;
uint32_t
tableIndex
(
)
const
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
Export
)
;
}
;
WASM_DECLARE_CACHEABLE_POD
(
Export
:
:
CacheablePod
)
;
using
ExportVector
=
Vector
<
Export
0
SystemAllocPolicy
>
;
enum
class
FuncFlags
:
uint8_t
{
None
=
0x0
Exported
=
0x1
Eager
=
0x2
CanRefFunc
=
0x4
}
;
struct
FuncDesc
{
uint32_t
typeIndex
:
24
;
FuncFlags
flags
:
8
;
WASM_CHECK_CACHEABLE_POD
(
typeIndex
flags
)
;
static_assert
(
MaxTypes
<
=
(
1
<
<
24
)
-
1
)
;
static_assert
(
sizeof
(
FuncFlags
)
=
=
sizeof
(
uint8_t
)
)
;
FuncDesc
(
)
=
default
;
explicit
FuncDesc
(
uint32_t
typeIndex
)
:
typeIndex
(
typeIndex
)
flags
(
FuncFlags
:
:
None
)
{
}
void
declareFuncExported
(
bool
eager
bool
canRefFunc
)
{
flags
=
FuncFlags
(
uint8_t
(
flags
)
|
uint8_t
(
FuncFlags
:
:
Exported
)
)
;
if
(
eager
)
{
flags
=
FuncFlags
(
uint8_t
(
flags
)
|
uint8_t
(
FuncFlags
:
:
Eager
)
)
;
}
if
(
canRefFunc
)
{
flags
=
FuncFlags
(
uint8_t
(
flags
)
|
uint8_t
(
FuncFlags
:
:
CanRefFunc
)
)
;
}
}
bool
isExported
(
)
const
{
return
uint8_t
(
flags
)
&
uint8_t
(
FuncFlags
:
:
Exported
)
;
}
bool
isEager
(
)
const
{
return
uint8_t
(
flags
)
&
uint8_t
(
FuncFlags
:
:
Eager
)
;
}
bool
canRefFunc
(
)
const
{
return
uint8_t
(
flags
)
&
uint8_t
(
FuncFlags
:
:
CanRefFunc
)
;
}
}
;
WASM_DECLARE_CACHEABLE_POD
(
FuncDesc
)
;
using
FuncDescVector
=
Vector
<
FuncDesc
0
SystemAllocPolicy
>
;
struct
FuncDefRange
{
explicit
FuncDefRange
(
uint32_t
bytecodeOffset
uint32_t
bodyLength
)
:
bytecodeOffset
(
bytecodeOffset
)
bodyLength
(
bodyLength
)
{
}
uint32_t
bytecodeOffset
=
0
;
uint32_t
bodyLength
=
0
;
WASM_CHECK_CACHEABLE_POD
(
bytecodeOffset
bodyLength
)
;
}
;
WASM_DECLARE_CACHEABLE_POD
(
FuncDefRange
)
;
using
FuncDefRangeVector
=
Vector
<
FuncDefRange
0
SystemAllocPolicy
>
;
struct
CallRefMetricsRange
{
explicit
CallRefMetricsRange
(
)
{
}
explicit
CallRefMetricsRange
(
uint32_t
begin
uint32_t
length
)
:
begin
(
begin
)
length
(
length
)
{
}
uint32_t
begin
=
0
;
uint32_t
length
=
0
;
void
offsetBy
(
uint32_t
offset
)
{
begin
+
=
offset
;
}
WASM_CHECK_CACHEABLE_POD
(
begin
length
)
;
}
;
class
CallRefHint
{
public
:
using
Repr
=
uint32_t
;
private
:
Repr
state_
;
static
constexpr
Repr
UnknownState
=
0
;
static
constexpr
Repr
FirstInlineFuncState
=
UnknownState
+
1
;
explicit
CallRefHint
(
uint32_t
state
)
:
state_
(
state
)
{
}
public
:
static
CallRefHint
unknown
(
)
{
return
CallRefHint
(
UnknownState
)
;
}
static
CallRefHint
inlineFunc
(
uint32_t
funcIndex
)
{
return
CallRefHint
(
FirstInlineFuncState
+
funcIndex
)
;
}
static
CallRefHint
fromRepr
(
Repr
repr
)
{
return
CallRefHint
(
repr
)
;
}
Repr
toRepr
(
)
const
{
return
state_
;
}
bool
isUnknown
(
)
const
{
return
state_
=
=
UnknownState
;
}
bool
isInlineFunc
(
)
const
{
return
state_
>
=
FirstInlineFuncState
;
}
uint32_t
inlineFuncIndex
(
)
const
{
MOZ_ASSERT
(
isInlineFunc
(
)
)
;
return
state_
-
FirstInlineFuncState
;
}
}
;
using
MutableCallRefHint
=
mozilla
:
:
Atomic
<
CallRefHint
:
:
Repr
>
;
using
MutableCallRefHints
=
mozilla
:
:
UniquePtr
<
MutableCallRefHint
[
]
JS
:
:
FreePolicy
>
;
WASM_DECLARE_CACHEABLE_POD
(
CallRefMetricsRange
)
;
using
CallRefMetricsRangeVector
=
Vector
<
CallRefMetricsRange
0
SystemAllocPolicy
>
;
enum
class
BranchHint
:
uint8_t
{
Unlikely
=
0
Likely
=
1
Invalid
=
2
}
;
struct
BranchHintEntry
{
uint32_t
branchOffset
;
BranchHint
value
;
BranchHintEntry
(
)
=
default
;
BranchHintEntry
(
uint32_t
branchOffset
BranchHint
value
)
:
branchOffset
(
branchOffset
)
value
(
value
)
{
}
}
;
using
BranchHintVector
=
Vector
<
BranchHintEntry
0
SystemAllocPolicy
>
;
using
BranchHintFuncMap
=
HashMap
<
uint32_t
BranchHintVector
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
;
struct
BranchHintCollection
{
private
:
static
BranchHintVector
invalidVector_
;
BranchHintFuncMap
branchHintsMap_
;
bool
failedParse_
=
false
;
public
:
[
[
nodiscard
]
]
bool
addHintsForFunc
(
uint32_t
functionIndex
BranchHintVector
&
&
branchHints
)
{
return
branchHintsMap_
.
put
(
functionIndex
std
:
:
move
(
branchHints
)
)
;
}
BranchHintVector
&
getHintVector
(
uint32_t
funcIndex
)
const
{
if
(
auto
hintsVector
=
branchHintsMap_
.
readonlyThreadsafeLookup
(
funcIndex
)
)
{
return
hintsVector
-
>
value
(
)
;
}
return
invalidVector_
;
}
bool
isEmpty
(
)
const
{
return
branchHintsMap_
.
empty
(
)
;
}
void
setFailedAndClear
(
)
{
failedParse_
=
true
;
branchHintsMap_
.
clearAndCompact
(
)
;
}
bool
failedParse
(
)
const
{
return
failedParse_
;
}
}
;
enum
class
GlobalKind
{
Import
Constant
Variable
}
;
class
GlobalDesc
{
GlobalKind
kind_
;
InitExpr
initial_
;
unsigned
offset_
;
bool
isMutable_
;
bool
isWasm_
;
bool
isExport_
;
uint32_t
importIndex_
;
bool
isExport
(
)
const
{
return
!
isConstant
(
)
&
&
isExport_
;
}
bool
isWasm
(
)
const
{
return
!
isConstant
(
)
&
&
isWasm_
;
}
public
:
GlobalDesc
(
)
=
default
;
explicit
GlobalDesc
(
InitExpr
&
&
initial
bool
isMutable
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
:
kind_
(
(
!
isMutable
&
&
initial
.
isLiteral
(
)
)
?
GlobalKind
:
:
Constant
:
GlobalKind
:
:
Variable
)
{
initial_
=
std
:
:
move
(
initial
)
;
if
(
isVariable
(
)
)
{
isMutable_
=
isMutable
;
isWasm_
=
kind
=
=
Wasm
;
isExport_
=
false
;
offset_
=
UINT32_MAX
;
}
}
explicit
GlobalDesc
(
ValType
type
bool
isMutable
uint32_t
importIndex
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
:
kind_
(
GlobalKind
:
:
Import
)
{
initial_
=
InitExpr
(
LitVal
(
type
)
)
;
importIndex_
=
importIndex
;
isMutable_
=
isMutable
;
isWasm_
=
kind
=
=
Wasm
;
isExport_
=
false
;
offset_
=
UINT32_MAX
;
}
void
setOffset
(
unsigned
offset
)
{
MOZ_ASSERT
(
!
isConstant
(
)
)
;
MOZ_ASSERT
(
offset_
=
=
UINT32_MAX
)
;
offset_
=
offset
;
}
unsigned
offset
(
)
const
{
MOZ_ASSERT
(
!
isConstant
(
)
)
;
MOZ_ASSERT
(
offset_
!
=
UINT32_MAX
)
;
return
offset_
;
}
void
setIsExport
(
)
{
if
(
!
isConstant
(
)
)
{
isExport_
=
true
;
}
}
GlobalKind
kind
(
)
const
{
return
kind_
;
}
bool
isVariable
(
)
const
{
return
kind_
=
=
GlobalKind
:
:
Variable
;
}
bool
isConstant
(
)
const
{
return
kind_
=
=
GlobalKind
:
:
Constant
;
}
bool
isImport
(
)
const
{
return
kind_
=
=
GlobalKind
:
:
Import
;
}
bool
isMutable
(
)
const
{
return
!
isConstant
(
)
&
&
isMutable_
;
}
const
InitExpr
&
initExpr
(
)
const
{
MOZ_ASSERT
(
!
isImport
(
)
)
;
return
initial_
;
}
uint32_t
importIndex
(
)
const
{
MOZ_ASSERT
(
isImport
(
)
)
;
return
importIndex_
;
}
LitVal
constantValue
(
)
const
{
return
initial_
.
literal
(
)
;
}
bool
isIndirect
(
)
const
{
return
isMutable
(
)
&
&
isWasm
(
)
&
&
(
isImport
(
)
|
|
isExport
(
)
)
;
}
ValType
type
(
)
const
{
return
initial_
.
type
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
WASM_DECLARE_FRIEND_SERIALIZE
(
GlobalDesc
)
;
}
;
using
GlobalDescVector
=
Vector
<
GlobalDesc
0
SystemAllocPolicy
>
;
using
TagOffsetVector
=
Vector
<
uint32_t
2
SystemAllocPolicy
>
;
class
TagType
:
public
AtomicRefCounted
<
TagType
>
{
ValTypeVector
argTypes_
;
TagOffsetVector
argOffsets_
;
uint32_t
size_
;
public
:
TagType
(
)
:
size_
(
0
)
{
}
~
TagType
(
)
;
const
ValTypeVector
&
argTypes
(
)
const
{
return
argTypes_
;
}
const
TagOffsetVector
&
argOffsets
(
)
const
{
return
argOffsets_
;
}
ResultType
resultType
(
)
const
{
return
ResultType
:
:
Vector
(
argTypes_
)
;
}
uint32_t
tagSize
(
)
const
{
return
size_
;
}
[
[
nodiscard
]
]
bool
initialize
(
ValTypeVector
&
&
argTypes
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
MutableTagType
=
RefPtr
<
TagType
>
;
using
SharedTagType
=
RefPtr
<
const
TagType
>
;
struct
TagDesc
{
TagKind
kind
;
SharedTagType
type
;
bool
isExport
;
TagDesc
(
)
:
isExport
(
false
)
{
}
TagDesc
(
TagKind
kind
const
SharedTagType
&
type
bool
isExport
=
false
)
:
kind
(
kind
)
type
(
type
)
isExport
(
isExport
)
{
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
TagDescVector
=
Vector
<
TagDesc
0
SystemAllocPolicy
>
;
using
ElemExprOffsetVector
=
Vector
<
size_t
0
SystemAllocPolicy
>
;
struct
ModuleElemSegment
{
enum
class
Kind
{
Active
Passive
Declared
}
;
enum
class
Encoding
{
Indices
=
1
Expressions
}
;
struct
Expressions
{
size_t
count
=
0
;
Bytes
exprBytes
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
Kind
kind
;
uint32_t
tableIndex
;
RefType
elemType
;
mozilla
:
:
Maybe
<
InitExpr
>
offsetIfActive
;
Encoding
encoding
;
Uint32Vector
elemIndices
;
Expressions
elemExpressions
;
bool
active
(
)
const
{
return
kind
=
=
Kind
:
:
Active
;
}
const
InitExpr
&
offset
(
)
const
{
return
*
offsetIfActive
;
}
size_t
numElements
(
)
const
{
switch
(
encoding
)
{
case
Encoding
:
:
Indices
:
return
elemIndices
.
length
(
)
;
case
Encoding
:
:
Expressions
:
return
elemExpressions
.
count
;
default
:
MOZ_CRASH
(
"
unknown
element
segment
encoding
"
)
;
}
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
ModuleElemSegmentVector
=
Vector
<
ModuleElemSegment
0
SystemAllocPolicy
>
;
using
InstanceElemSegment
=
GCVector
<
HeapPtr
<
AnyRef
>
0
SystemAllocPolicy
>
;
using
InstanceElemSegmentVector
=
GCVector
<
InstanceElemSegment
0
SystemAllocPolicy
>
;
constexpr
uint32_t
InvalidMemoryIndex
=
UINT32_MAX
;
static_assert
(
InvalidMemoryIndex
>
MaxMemories
"
Invariant
"
)
;
struct
DataSegmentRange
{
uint32_t
memoryIndex
;
mozilla
:
:
Maybe
<
InitExpr
>
offsetIfActive
;
uint32_t
bytecodeOffset
;
uint32_t
length
;
}
;
using
DataSegmentRangeVector
=
Vector
<
DataSegmentRange
0
SystemAllocPolicy
>
;
struct
DataSegment
:
AtomicRefCounted
<
DataSegment
>
{
uint32_t
memoryIndex
;
mozilla
:
:
Maybe
<
InitExpr
>
offsetIfActive
;
Bytes
bytes
;
DataSegment
(
)
=
default
;
bool
active
(
)
const
{
return
!
!
offsetIfActive
;
}
const
InitExpr
&
offset
(
)
const
{
return
*
offsetIfActive
;
}
[
[
nodiscard
]
]
bool
init
(
const
ShareableBytes
&
bytecode
const
DataSegmentRange
&
src
)
{
memoryIndex
=
src
.
memoryIndex
;
if
(
src
.
offsetIfActive
)
{
offsetIfActive
.
emplace
(
)
;
if
(
!
offsetIfActive
-
>
clone
(
*
src
.
offsetIfActive
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
bytes
.
length
(
)
=
=
0
)
;
return
bytes
.
append
(
bytecode
.
begin
(
)
+
src
.
bytecodeOffset
src
.
length
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
MutableDataSegment
=
RefPtr
<
DataSegment
>
;
using
SharedDataSegment
=
RefPtr
<
const
DataSegment
>
;
using
DataSegmentVector
=
Vector
<
SharedDataSegment
0
SystemAllocPolicy
>
;
struct
CustomSectionRange
{
uint32_t
nameOffset
;
uint32_t
nameLength
;
uint32_t
payloadOffset
;
uint32_t
payloadLength
;
WASM_CHECK_CACHEABLE_POD
(
nameOffset
nameLength
payloadOffset
payloadLength
)
;
}
;
WASM_DECLARE_CACHEABLE_POD
(
CustomSectionRange
)
;
using
CustomSectionRangeVector
=
Vector
<
CustomSectionRange
0
SystemAllocPolicy
>
;
struct
CustomSection
{
Bytes
name
;
SharedBytes
payload
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
using
CustomSectionVector
=
Vector
<
CustomSection
0
SystemAllocPolicy
>
;
struct
Name
{
uint32_t
offsetInNamePayload
;
uint32_t
length
;
WASM_CHECK_CACHEABLE_POD
(
offsetInNamePayload
length
)
;
Name
(
)
:
offsetInNamePayload
(
UINT32_MAX
)
length
(
0
)
{
}
}
;
WASM_DECLARE_CACHEABLE_POD
(
Name
)
;
using
NameVector
=
Vector
<
Name
0
SystemAllocPolicy
>
;
enum
class
LimitsKind
{
Memory
Table
}
;
struct
Limits
{
IndexType
indexType
;
uint64_t
initial
;
mozilla
:
:
Maybe
<
uint64_t
>
maximum
;
Shareable
shared
;
WASM_CHECK_CACHEABLE_POD
(
indexType
initial
maximum
shared
)
;
Limits
(
)
=
default
;
explicit
Limits
(
uint64_t
initial
const
mozilla
:
:
Maybe
<
uint64_t
>
&
maximum
=
mozilla
:
:
Nothing
(
)
Shareable
shared
=
Shareable
:
:
False
)
:
indexType
(
IndexType
:
:
I32
)
initial
(
initial
)
maximum
(
maximum
)
shared
(
shared
)
{
}
}
;
WASM_DECLARE_CACHEABLE_POD
(
Limits
)
;
struct
MemoryDesc
{
Limits
limits
;
WASM_CHECK_CACHEABLE_POD
(
limits
)
;
bool
isShared
(
)
const
{
return
limits
.
shared
=
=
Shareable
:
:
True
;
}
bool
canMovingGrow
(
)
const
{
return
limits
.
maximum
.
isNothing
(
)
;
}
bool
boundsCheckLimitIs32Bits
(
)
const
{
return
limits
.
maximum
.
isSome
(
)
&
&
limits
.
maximum
.
value
(
)
<
(
0x100000000
/
PageSize
)
;
}
IndexType
indexType
(
)
const
{
return
limits
.
indexType
;
}
Pages
initialPages
(
)
const
{
return
Pages
(
limits
.
initial
)
;
}
mozilla
:
:
Maybe
<
Pages
>
maximumPages
(
)
const
{
return
limits
.
maximum
.
map
(
[
]
(
uint64_t
x
)
{
return
Pages
(
x
)
;
}
)
;
}
uint64_t
initialLength32
(
)
const
{
MOZ_ASSERT
(
indexType
(
)
=
=
IndexType
:
:
I32
)
;
return
limits
.
initial
*
PageSize
;
}
uint64_t
initialLength64
(
)
const
{
MOZ_ASSERT
(
indexType
(
)
=
=
IndexType
:
:
I64
)
;
return
limits
.
initial
*
PageSize
;
}
MemoryDesc
(
)
{
}
explicit
MemoryDesc
(
Limits
limits
)
:
limits
(
limits
)
{
}
}
;
WASM_DECLARE_CACHEABLE_POD
(
MemoryDesc
)
;
using
MemoryDescVector
=
Vector
<
MemoryDesc
1
SystemAllocPolicy
>
;
static_assert
(
MaxMemory32PagesValidation
<
=
UINT64_MAX
/
PageSize
)
;
struct
TableDesc
{
Limits
limits
;
RefType
elemType
;
bool
isImported
;
bool
isExported
;
bool
isAsmJS
;
mozilla
:
:
Maybe
<
InitExpr
>
initExpr
;
TableDesc
(
)
=
default
;
TableDesc
(
Limits
limits
RefType
elemType
mozilla
:
:
Maybe
<
InitExpr
>
&
&
initExpr
bool
isAsmJS
bool
isImported
=
false
bool
isExported
=
false
)
:
limits
(
limits
)
elemType
(
elemType
)
isImported
(
isImported
)
isExported
(
isExported
)
isAsmJS
(
isAsmJS
)
initExpr
(
std
:
:
move
(
initExpr
)
)
{
}
IndexType
indexType
(
)
const
{
return
limits
.
indexType
;
}
uint64_t
initialLength
(
)
const
{
return
limits
.
initial
;
}
mozilla
:
:
Maybe
<
uint64_t
>
maximumLength
(
)
const
{
return
limits
.
maximum
;
}
}
;
using
TableDescVector
=
Vector
<
TableDesc
0
SystemAllocPolicy
>
;
}
}
#
endif
