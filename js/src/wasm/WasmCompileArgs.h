#
ifndef
wasm_compile_args_h
#
define
wasm_compile_args_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
WasmFeatures
.
h
"
#
include
"
wasm
/
WasmConstants
.
h
"
#
include
"
wasm
/
WasmShareable
.
h
"
namespace
js
{
namespace
wasm
{
enum
class
Shareable
{
False
True
}
;
enum
class
Tier
{
Baseline
Debug
=
Baseline
Optimized
Serialized
=
Optimized
}
;
static
constexpr
const
char
*
ToString
(
Tier
tier
)
{
switch
(
tier
)
{
case
wasm
:
:
Tier
:
:
Baseline
:
return
"
baseline
"
;
case
wasm
:
:
Tier
:
:
Optimized
:
return
"
optimized
"
;
default
:
return
"
unknown
"
;
}
}
class
Tiers
{
Tier
t_
[
2
]
;
uint32_t
n_
;
public
:
explicit
Tiers
(
)
{
n_
=
0
;
}
explicit
Tiers
(
Tier
t
)
{
t_
[
0
]
=
t
;
n_
=
1
;
}
explicit
Tiers
(
Tier
t
Tier
u
)
{
MOZ_ASSERT
(
t
!
=
u
)
;
t_
[
0
]
=
t
;
t_
[
1
]
=
u
;
n_
=
2
;
}
Tier
*
begin
(
)
{
return
t_
;
}
Tier
*
end
(
)
{
return
t_
+
n_
;
}
}
;
struct
BuiltinModuleIds
{
BuiltinModuleIds
(
)
=
default
;
bool
selfTest
=
false
;
bool
intGemm
=
false
;
bool
jsString
=
false
;
bool
jsStringConstants
=
false
;
SharedChars
jsStringConstantsNamespace
;
bool
hasNone
(
)
const
{
return
!
selfTest
&
&
!
intGemm
&
&
!
jsString
&
&
!
jsStringConstants
;
}
}
;
struct
FeatureOptions
{
FeatureOptions
(
)
:
isBuiltinModule
(
false
)
jsStringBuiltins
(
false
)
jsStringConstants
(
false
)
#
ifdef
ENABLE_WASM_GC
requireGC
(
false
)
#
endif
#
ifdef
ENABLE_WASM_TAIL_CALLS
requireTailCalls
(
false
)
#
endif
{
}
bool
isBuiltinModule
;
bool
jsStringBuiltins
;
bool
jsStringConstants
;
SharedChars
jsStringConstantsNamespace
;
#
ifdef
ENABLE_WASM_GC
bool
requireGC
;
#
endif
#
ifdef
ENABLE_WASM_TAIL_CALLS
bool
requireTailCalls
;
#
endif
[
[
nodiscard
]
]
bool
init
(
JSContext
*
cx
HandleValue
val
)
;
}
;
struct
FeatureArgs
{
FeatureArgs
(
)
:
#
define
WASM_FEATURE
(
NAME
LOWER_NAME
.
.
.
)
LOWER_NAME
(
false
)
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
#
undef
WASM_FEATURE
sharedMemory
(
Shareable
:
:
False
)
simd
(
false
)
isBuiltinModule
(
false
)
builtinModules
(
)
{
}
FeatureArgs
(
const
FeatureArgs
&
)
=
default
;
FeatureArgs
&
operator
=
(
const
FeatureArgs
&
)
=
default
;
FeatureArgs
(
FeatureArgs
&
&
)
=
default
;
FeatureArgs
&
operator
=
(
FeatureArgs
&
&
)
=
default
;
static
FeatureArgs
build
(
JSContext
*
cx
const
FeatureOptions
&
options
)
;
static
FeatureArgs
allEnabled
(
)
{
FeatureArgs
args
;
#
define
WASM_FEATURE
(
NAME
LOWER_NAME
.
.
.
)
args
.
LOWER_NAME
=
true
;
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
#
undef
WASM_FEATURE
args
.
sharedMemory
=
Shareable
:
:
True
;
args
.
simd
=
true
;
return
args
;
}
#
define
WASM_FEATURE
(
NAME
LOWER_NAME
.
.
.
)
bool
LOWER_NAME
;
JS_FOR_WASM_FEATURES
(
WASM_FEATURE
)
#
undef
WASM_FEATURE
Shareable
sharedMemory
;
bool
simd
;
bool
isBuiltinModule
;
BuiltinModuleIds
builtinModules
;
}
;
enum
class
FeatureUsage
:
uint8_t
{
None
=
0x0
LegacyExceptions
=
0x1
ReturnCall
=
0x2
}
;
using
FeatureUsageVector
=
Vector
<
FeatureUsage
0
SystemAllocPolicy
>
;
void
SetUseCountersForFeatureUsage
(
JSContext
*
cx
JSObject
*
object
FeatureUsage
usage
)
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
FeatureUsage
)
;
struct
ScriptedCaller
{
UniqueChars
filename
;
bool
filenameIsURL
;
uint32_t
line
;
ScriptedCaller
(
)
:
filenameIsURL
(
false
)
line
(
0
)
{
}
}
;
enum
class
CompileArgsError
{
OutOfMemory
NoCompiler
}
;
struct
CompileArgs
;
using
MutableCompileArgs
=
RefPtr
<
CompileArgs
>
;
using
SharedCompileArgs
=
RefPtr
<
const
CompileArgs
>
;
struct
CompileArgs
:
ShareableBase
<
CompileArgs
>
{
ScriptedCaller
scriptedCaller
;
UniqueChars
sourceMapURL
;
bool
baselineEnabled
;
bool
ionEnabled
;
bool
debugEnabled
;
bool
forceTiering
;
FeatureArgs
features
;
static
SharedCompileArgs
build
(
JSContext
*
cx
ScriptedCaller
&
&
scriptedCaller
const
FeatureOptions
&
options
CompileArgsError
*
error
)
;
static
SharedCompileArgs
buildForAsmJS
(
ScriptedCaller
&
&
scriptedCaller
)
;
static
SharedCompileArgs
buildAndReport
(
JSContext
*
cx
ScriptedCaller
&
&
scriptedCaller
const
FeatureOptions
&
options
bool
reportOOM
=
false
)
;
static
SharedCompileArgs
buildForValidation
(
const
FeatureArgs
&
args
)
;
explicit
CompileArgs
(
)
:
scriptedCaller
(
)
baselineEnabled
(
false
)
ionEnabled
(
false
)
debugEnabled
(
false
)
forceTiering
(
false
)
{
}
}
;
struct
CompileArgs
;
class
Decoder
;
struct
CompilerEnvironment
{
enum
State
{
InitialWithArgs
InitialWithModeTierDebug
Computed
}
;
State
state_
;
union
{
const
CompileArgs
*
args_
;
struct
{
CompileMode
mode_
;
Tier
tier_
;
DebugEnabled
debug_
;
}
;
}
;
public
:
explicit
CompilerEnvironment
(
const
CompileArgs
&
args
)
;
CompilerEnvironment
(
CompileMode
mode
Tier
tier
DebugEnabled
debugEnabled
)
;
void
computeParameters
(
Decoder
&
d
)
;
void
computeParameters
(
)
;
bool
isComputed
(
)
const
{
return
state_
=
=
Computed
;
}
CompileMode
mode
(
)
const
{
MOZ_ASSERT
(
isComputed
(
)
)
;
return
mode_
;
}
CompileState
initialState
(
)
const
{
switch
(
mode
(
)
)
{
case
CompileMode
:
:
Once
:
return
CompileState
:
:
Once
;
case
CompileMode
:
:
EagerTiering
:
return
CompileState
:
:
EagerTier1
;
case
CompileMode
:
:
LazyTiering
:
return
CompileState
:
:
LazyTier1
;
default
:
MOZ_CRASH
(
)
;
}
}
Tier
tier
(
)
const
{
MOZ_ASSERT
(
isComputed
(
)
)
;
return
tier_
;
}
DebugEnabled
debug
(
)
const
{
MOZ_ASSERT
(
isComputed
(
)
)
;
return
debug_
;
}
bool
debugEnabled
(
)
const
{
return
debug
(
)
=
=
DebugEnabled
:
:
True
;
}
}
;
}
}
#
endif
