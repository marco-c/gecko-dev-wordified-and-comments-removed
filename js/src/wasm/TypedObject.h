#
ifndef
wasm_TypedObject_h
#
define
wasm_TypedObject_h
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
WeakMap
.
h
"
#
include
"
vm
/
ArrayBufferObject
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
wasm
/
WasmTypeDef
.
h
"
#
include
"
wasm
/
WasmValType
.
h
"
using
js
:
:
wasm
:
:
FieldType
;
namespace
js
{
class
TypedObject
;
class
RttValue
:
public
NativeObject
{
private
:
static
RttValue
*
create
(
JSContext
*
cx
wasm
:
:
TypeHandle
handle
)
;
public
:
static
const
JSClass
class_
;
enum
Slot
{
TypeContext
=
0
TypeDef
=
1
Parent
=
2
Children
=
3
SlotCount
=
4
}
;
static
RttValue
*
rttCanon
(
JSContext
*
cx
wasm
:
:
TypeHandle
handle
)
;
static
RttValue
*
rttSub
(
JSContext
*
cx
js
:
:
Handle
<
RttValue
*
>
parent
js
:
:
Handle
<
RttValue
*
>
subCanon
)
;
bool
isNewborn
(
)
{
return
getReservedSlot
(
Slot
:
:
TypeContext
)
.
isUndefined
(
)
;
}
const
wasm
:
:
TypeDef
&
typeDef
(
)
const
{
return
*
(
const
wasm
:
:
TypeDef
*
)
getReservedSlot
(
Slot
:
:
TypeDef
)
.
toPrivate
(
)
;
}
const
wasm
:
:
TypeContext
*
typeContext
(
)
const
{
return
(
const
wasm
:
:
TypeContext
*
)
getReservedSlot
(
Slot
:
:
TypeContext
)
.
toPrivate
(
)
;
}
wasm
:
:
TypeHandle
typeHandle
(
)
const
{
return
wasm
:
:
TypeHandle
(
typeContext
(
)
typeDef
(
)
)
;
}
wasm
:
:
TypeDefKind
kind
(
)
const
{
return
typeDef
(
)
.
kind
(
)
;
}
RttValue
*
parent
(
)
const
{
return
(
RttValue
*
)
getReservedSlot
(
Slot
:
:
Parent
)
.
toObjectOrNull
(
)
;
}
ObjectWeakMap
*
maybeChildren
(
)
const
{
return
(
ObjectWeakMap
*
)
getReservedSlot
(
Slot
:
:
Children
)
.
toPrivate
(
)
;
}
ObjectWeakMap
&
children
(
)
const
{
return
*
maybeChildren
(
)
;
}
bool
ensureChildren
(
JSContext
*
cx
)
;
class
PropOffset
{
uint32_t
u32_
;
public
:
PropOffset
(
)
:
u32_
(
0
)
{
}
uint32_t
get
(
)
const
{
return
u32_
;
}
void
set
(
uint32_t
u32
)
{
u32_
=
u32
;
}
}
;
[
[
nodiscard
]
]
bool
lookupProperty
(
JSContext
*
cx
js
:
:
Handle
<
TypedObject
*
>
object
jsid
id
PropOffset
*
offset
wasm
:
:
FieldType
*
type
)
;
[
[
nodiscard
]
]
bool
hasProperty
(
JSContext
*
cx
js
:
:
Handle
<
TypedObject
*
>
object
jsid
id
)
{
RttValue
:
:
PropOffset
offset
;
wasm
:
:
FieldType
type
;
return
lookupProperty
(
cx
object
id
&
offset
&
type
)
;
}
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
static
void
finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
obj
)
;
}
;
class
TypedObject
:
public
JSObject
{
protected
:
GCPtr
<
RttValue
*
>
rttValue_
;
static
const
ObjectOps
objectOps_
;
[
[
nodiscard
]
]
static
bool
obj_lookupProperty
(
JSContext
*
cx
HandleObject
obj
HandleId
id
MutableHandleObject
objp
PropertyResult
*
propp
)
;
[
[
nodiscard
]
]
static
bool
obj_defineProperty
(
JSContext
*
cx
HandleObject
obj
HandleId
id
Handle
<
PropertyDescriptor
>
desc
ObjectOpResult
&
result
)
;
[
[
nodiscard
]
]
static
bool
obj_hasProperty
(
JSContext
*
cx
HandleObject
obj
HandleId
id
bool
*
foundp
)
;
[
[
nodiscard
]
]
static
bool
obj_getProperty
(
JSContext
*
cx
HandleObject
obj
HandleValue
receiver
HandleId
id
MutableHandleValue
vp
)
;
[
[
nodiscard
]
]
static
bool
obj_setProperty
(
JSContext
*
cx
HandleObject
obj
HandleId
id
HandleValue
v
HandleValue
receiver
ObjectOpResult
&
result
)
;
[
[
nodiscard
]
]
static
bool
obj_getOwnPropertyDescriptor
(
JSContext
*
cx
HandleObject
obj
HandleId
id
MutableHandle
<
mozilla
:
:
Maybe
<
PropertyDescriptor
>
>
desc
)
;
[
[
nodiscard
]
]
static
bool
obj_deleteProperty
(
JSContext
*
cx
HandleObject
obj
HandleId
id
ObjectOpResult
&
result
)
;
template
<
typename
T
>
static
T
*
create
(
JSContext
*
cx
gc
:
:
AllocKind
allocKind
gc
:
:
InitialHeap
heap
)
;
void
initDefault
(
)
;
bool
loadValue
(
JSContext
*
cx
const
RttValue
:
:
PropOffset
&
offset
wasm
:
:
FieldType
type
MutableHandleValue
vp
)
;
template
<
typename
V
>
void
visitReferences
(
V
&
visitor
)
;
public
:
static
TypedObject
*
createStruct
(
JSContext
*
cx
Handle
<
RttValue
*
>
rtt
gc
:
:
InitialHeap
heap
=
gc
:
:
DefaultHeap
)
;
static
TypedObject
*
createArray
(
JSContext
*
cx
Handle
<
RttValue
*
>
rtt
uint32_t
numElements
gc
:
:
InitialHeap
heap
=
gc
:
:
DefaultHeap
)
;
RttValue
&
rttValue
(
)
const
{
MOZ_ASSERT
(
rttValue_
)
;
return
*
rttValue_
;
}
[
[
nodiscard
]
]
bool
isRuntimeSubtype
(
js
:
:
Handle
<
RttValue
*
>
rtt
)
const
;
static
constexpr
size_t
offsetOfRttValue
(
)
{
return
offsetof
(
TypedObject
rttValue_
)
;
}
[
[
nodiscard
]
]
static
bool
obj_newEnumerate
(
JSContext
*
cx
HandleObject
obj
MutableHandleIdVector
properties
bool
enumerableOnly
)
;
}
;
class
WasmArrayObject
:
public
TypedObject
{
public
:
uint32_t
numElements_
;
private
:
uint8_t
*
data_
;
friend
class
TypedObject
;
public
:
static
const
JSClass
class_
;
static
gc
:
:
AllocKind
allocKind
(
)
;
uint32_t
numElements
(
)
const
{
return
numElements_
;
}
void
setNumElements
(
uint32_t
numElements
)
{
numElements_
=
numElements
;
}
uint8_t
*
data
(
)
const
{
return
data_
;
}
static
constexpr
size_t
offsetOfNumElements
(
)
{
return
offsetof
(
WasmArrayObject
numElements_
)
;
}
static
constexpr
size_t
offsetOfData
(
)
{
return
offsetof
(
WasmArrayObject
data_
)
;
}
static
void
obj_trace
(
JSTracer
*
trc
JSObject
*
object
)
;
static
void
obj_finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
object
)
;
}
;
#
define
STATIC_ASSERT_WASMARRAYELEMENTS_NUMELEMENTS_IS_U32
\
static_assert
(
sizeof
(
js
:
:
WasmArrayObject
:
:
numElements_
)
=
=
sizeof
(
uint32_t
)
)
class
WasmStructObject
:
public
TypedObject
{
uint8_t
*
outlineData_
;
public
:
alignas
(
8
)
uint8_t
inlineData_
[
0
]
;
protected
:
friend
class
TypedObject
;
public
:
static
const
JSClass
class_
;
static
inline
size_t
sizeOfIncludingInlineData
(
size_t
sizeOfInlineData
)
{
size_t
n
=
sizeof
(
WasmStructObject
)
+
sizeOfInlineData
;
MOZ_ASSERT
(
n
<
=
JSObject
:
:
MAX_BYTE_SIZE
)
;
return
n
;
}
static
inline
gc
:
:
AllocKind
allocKindForRttValue
(
RttValue
*
rtt
)
;
static
inline
void
getDataByteSizes
(
uint32_t
totalBytes
uint32_t
*
inlineBytes
uint32_t
*
outlineBytes
)
;
static
inline
void
fieldOffsetToAreaAndOffset
(
FieldType
fieldType
uint32_t
fieldOffset
bool
*
areaIsOutline
uint32_t
*
areaOffset
)
;
inline
uint8_t
*
fieldOffsetToAddress
(
FieldType
fieldType
uint32_t
fieldOffset
)
;
static
size_t
offsetOfOutlineData
(
)
{
return
offsetof
(
WasmStructObject
outlineData_
)
;
}
static
size_t
offsetOfInlineData
(
)
{
return
offsetof
(
WasmStructObject
inlineData_
)
;
}
static
void
obj_trace
(
JSTracer
*
trc
JSObject
*
object
)
;
static
size_t
obj_moved
(
JSObject
*
dst
JSObject
*
src
)
;
static
void
obj_finalize
(
JS
:
:
GCContext
*
gcx
JSObject
*
object
)
;
}
;
static_assert
(
(
offsetof
(
WasmStructObject
inlineData_
)
%
8
)
=
=
0
)
;
const
size_t
WasmStructObject_MaxInlineBytes
=
(
(
JSObject
:
:
MAX_BYTE_SIZE
-
sizeof
(
WasmStructObject
)
)
/
16
)
*
16
;
static_assert
(
(
WasmStructObject_MaxInlineBytes
%
16
)
=
=
0
)
;
inline
void
WasmStructObject
:
:
getDataByteSizes
(
uint32_t
totalBytes
uint32_t
*
inlineBytes
uint32_t
*
outlineBytes
)
{
*
inlineBytes
=
totalBytes
;
*
outlineBytes
=
0
;
if
(
totalBytes
>
WasmStructObject_MaxInlineBytes
)
{
*
inlineBytes
=
WasmStructObject_MaxInlineBytes
;
*
outlineBytes
=
totalBytes
-
*
inlineBytes
;
}
}
inline
void
WasmStructObject
:
:
fieldOffsetToAreaAndOffset
(
FieldType
fieldType
uint32_t
fieldOffset
bool
*
areaIsOutline
uint32_t
*
areaOffset
)
{
if
(
fieldOffset
<
WasmStructObject_MaxInlineBytes
)
{
*
areaIsOutline
=
false
;
*
areaOffset
=
fieldOffset
;
}
else
{
*
areaIsOutline
=
true
;
*
areaOffset
=
fieldOffset
-
WasmStructObject_MaxInlineBytes
;
}
MOZ_RELEASE_ASSERT
(
(
fieldOffset
<
WasmStructObject_MaxInlineBytes
)
=
=
(
(
fieldOffset
+
fieldType
.
size
(
)
-
1
)
<
WasmStructObject_MaxInlineBytes
)
)
;
}
inline
uint8_t
*
WasmStructObject
:
:
fieldOffsetToAddress
(
FieldType
fieldType
uint32_t
fieldOffset
)
{
bool
areaIsOutline
;
uint32_t
areaOffset
;
fieldOffsetToAreaAndOffset
(
fieldType
fieldOffset
&
areaIsOutline
&
areaOffset
)
;
return
(
(
uint8_t
*
)
(
areaIsOutline
?
outlineData_
:
&
inlineData_
[
0
]
)
)
+
areaOffset
;
}
}
namespace
js
{
inline
bool
IsTypedObjectClass
(
const
JSClass
*
class_
)
{
return
class_
=
=
&
WasmArrayObject
:
:
class_
|
|
class_
=
=
&
WasmStructObject
:
:
class_
;
}
inline
bool
IsWasmArrayObjectClass
(
const
JSClass
*
class_
)
{
return
class_
=
=
&
WasmArrayObject
:
:
class_
;
}
inline
bool
IsWasmStructObjectClass
(
const
JSClass
*
class_
)
{
return
class_
=
=
&
WasmStructObject
:
:
class_
;
}
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
TypedObject
>
(
)
const
{
return
js
:
:
IsTypedObjectClass
(
getClass
(
)
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
WasmArrayObject
>
(
)
const
{
return
js
:
:
IsWasmArrayObjectClass
(
getClass
(
)
)
;
}
template
<
>
inline
bool
JSObject
:
:
is
<
js
:
:
WasmStructObject
>
(
)
const
{
return
js
:
:
IsWasmStructObjectClass
(
getClass
(
)
)
;
}
#
endif
