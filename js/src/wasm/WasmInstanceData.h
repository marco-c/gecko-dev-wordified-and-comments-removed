#
ifndef
wasm_instance_data_h
#
define
wasm_instance_data_h
#
include
<
stdint
.
h
>
#
include
"
NamespaceImports
.
h
"
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
Pretenuring
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
wasm
/
WasmInstance
.
h
"
#
include
"
wasm
/
WasmTypeDecls
.
h
"
namespace
js
{
namespace
wasm
{
struct
ExportArg
{
uint64_t
lo
;
uint64_t
hi
;
}
;
using
ExportFuncPtr
=
int32_t
(
*
)
(
ExportArg
*
Instance
*
)
;
struct
TypeDefInstanceData
{
TypeDefInstanceData
(
)
:
typeDef
(
nullptr
)
superTypeVector
(
nullptr
)
shape
(
nullptr
)
clasp
(
nullptr
)
allocSite
(
nullptr
)
allocKind
(
gc
:
:
AllocKind
:
:
LIMIT
)
{
}
const
wasm
:
:
TypeDef
*
typeDef
;
const
wasm
:
:
SuperTypeVector
*
superTypeVector
;
GCPtr
<
Shape
*
>
shape
;
const
JSClass
*
clasp
;
gc
:
:
AllocSite
allocSite
;
gc
:
:
AllocKind
allocKind
;
}
;
struct
FuncImportInstanceData
{
void
*
code
;
Instance
*
instance
;
JS
:
:
Realm
*
realm
;
GCPtr
<
JSObject
*
>
callable
;
static_assert
(
sizeof
(
GCPtr
<
JSObject
*
>
)
=
=
sizeof
(
void
*
)
"
for
JIT
access
"
)
;
}
;
struct
TableInstanceData
{
uint32_t
length
;
void
*
elements
;
}
;
struct
TagInstanceData
{
GCPtr
<
WasmTagObject
*
>
object
;
}
;
struct
FunctionTableElem
{
void
*
code
;
Instance
*
instance
;
}
;
}
}
#
endif
