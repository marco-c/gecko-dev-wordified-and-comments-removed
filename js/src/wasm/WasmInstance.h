#
ifndef
wasm_instance_h
#
define
wasm_instance_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
SharedMem
.
h
"
#
include
"
wasm
/
WasmExprType
.
h
"
#
include
"
wasm
/
WasmLog
.
h
"
#
include
"
wasm
/
WasmShareable
.
h
"
#
include
"
wasm
/
WasmTypeDecls
.
h
"
#
include
"
wasm
/
WasmValue
.
h
"
namespace
js
{
class
SharedArrayRawBuffer
;
class
WasmBreakpointSite
;
namespace
wasm
{
using
mozilla
:
:
Atomic
;
class
FuncImport
;
struct
FuncImportInstanceData
;
class
GlobalDesc
;
struct
TableDesc
;
struct
TableInstanceData
;
struct
TagDesc
;
class
WasmFrameIter
;
class
alignas
(
16
)
Instance
{
uint8_t
*
memoryBase_
;
uintptr_t
boundsCheckLimit_
;
void
*
debugTrapHandler_
;
JS
:
:
Realm
*
realm_
;
JSContext
*
cx_
;
GCPtr
<
JSObject
*
>
pendingException_
;
GCPtr
<
JSObject
*
>
pendingExceptionTag_
;
Atomic
<
JS
:
:
NativeStackLimit
mozilla
:
:
Relaxed
>
stackLimit_
;
Atomic
<
uint32_t
mozilla
:
:
Relaxed
>
interrupt_
;
const
JS
:
:
shadow
:
:
Zone
:
:
BarrierState
*
addressOfNeedsIncrementalBarrier_
;
public
:
static
constexpr
size_t
offsetOfLastCommonJitField
(
)
{
return
offsetof
(
Instance
addressOfNeedsIncrementalBarrier_
)
;
}
private
:
void
*
*
jumpTable_
;
uint32_t
baselineScratch_
[
2
]
;
const
JSClass
*
valueBoxClass_
;
void
*
jsJitArgsRectifier_
;
void
*
jsJitExceptionHandler_
;
void
*
preBarrierCode_
;
WeakHeapPtr
<
WasmInstanceObject
*
>
object_
;
const
SharedCode
code_
;
const
GCPtr
<
WasmMemoryObject
*
>
memory_
;
const
SharedTableVector
tables_
;
DataSegmentVector
passiveDataSegments_
;
ElemSegmentVector
passiveElemSegments_
;
const
UniqueDebugState
maybeDebug_
;
uint32_t
*
debugFilter_
;
uint32_t
maxInitializedGlobalsIndexPlus1_
;
#
ifdef
ENABLE_WASM_GC
bool
hasGcTypes_
;
#
endif
void
*
allocatedBase_
;
MOZ_ALIGNED_DECL
(
16
char
globalArea_
)
;
const
void
*
*
addressOfTypeId
(
uint32_t
typeIndex
)
const
;
const
void
*
addressOfGlobalCell
(
const
GlobalDesc
&
globalDesc
)
const
;
FuncImportInstanceData
&
funcImportInstanceData
(
const
FuncImport
&
fi
)
;
TableInstanceData
&
tableInstanceData
(
const
TableDesc
&
td
)
const
;
GCPtr
<
WasmTagObject
*
>
&
tagInstanceData
(
const
TagDesc
&
td
)
const
;
friend
class
js
:
:
WasmInstanceObject
;
void
tracePrivate
(
JSTracer
*
trc
)
;
bool
callImport
(
JSContext
*
cx
uint32_t
funcImportIndex
unsigned
argc
uint64_t
*
argv
)
;
Instance
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
object
const
SharedCode
&
code
Handle
<
WasmMemoryObject
*
>
memory
SharedTableVector
&
&
tables
UniqueDebugState
maybeDebug
)
;
~
Instance
(
)
;
public
:
static
Instance
*
create
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
object
const
SharedCode
&
code
uint32_t
globalDataLength
Handle
<
WasmMemoryObject
*
>
memory
SharedTableVector
&
&
tables
UniqueDebugState
maybeDebug
)
;
static
void
destroy
(
Instance
*
instance
)
;
bool
init
(
JSContext
*
cx
const
JSFunctionVector
&
funcImports
const
ValVector
&
globalImportValues
const
WasmGlobalObjectVector
&
globalObjs
const
WasmTagObjectVector
&
tagObjs
const
DataSegmentVector
&
dataSegments
const
ElemSegmentVector
&
elemSegments
)
;
uintptr_t
traceFrame
(
JSTracer
*
trc
const
wasm
:
:
WasmFrameIter
&
wfi
uint8_t
*
nextPC
uintptr_t
highestByteVisitedInPrevFrame
)
;
static
constexpr
size_t
offsetOfMemoryBase
(
)
{
return
offsetof
(
Instance
memoryBase_
)
;
}
static
constexpr
size_t
offsetOfBoundsCheckLimit
(
)
{
return
offsetof
(
Instance
boundsCheckLimit_
)
;
}
static
constexpr
size_t
offsetOfDebugTrapHandler
(
)
{
return
offsetof
(
Instance
debugTrapHandler_
)
;
}
static
constexpr
size_t
offsetOfRealm
(
)
{
return
offsetof
(
Instance
realm_
)
;
}
static
constexpr
size_t
offsetOfCx
(
)
{
return
offsetof
(
Instance
cx_
)
;
}
static
constexpr
size_t
offsetOfValueBoxClass
(
)
{
return
offsetof
(
Instance
valueBoxClass_
)
;
}
static
constexpr
size_t
offsetOfPendingException
(
)
{
return
offsetof
(
Instance
pendingException_
)
;
}
static
constexpr
size_t
offsetOfPendingExceptionTag
(
)
{
return
offsetof
(
Instance
pendingExceptionTag_
)
;
}
static
constexpr
size_t
offsetOfStackLimit
(
)
{
return
offsetof
(
Instance
stackLimit_
)
;
}
static
constexpr
size_t
offsetOfInterrupt
(
)
{
return
offsetof
(
Instance
interrupt_
)
;
}
static
constexpr
size_t
offsetOfAddressOfNeedsIncrementalBarrier
(
)
{
return
offsetof
(
Instance
addressOfNeedsIncrementalBarrier_
)
;
}
static
constexpr
size_t
offsetOfJumpTable
(
)
{
return
offsetof
(
Instance
jumpTable_
)
;
}
static
constexpr
size_t
offsetOfBaselineScratch
(
)
{
return
offsetof
(
Instance
baselineScratch_
)
;
}
static
constexpr
size_t
sizeOfBaselineScratch
(
)
{
return
sizeof
(
baselineScratch_
)
;
}
static
constexpr
size_t
offsetOfJSJitArgsRectifier
(
)
{
return
offsetof
(
Instance
jsJitArgsRectifier_
)
;
}
static
constexpr
size_t
offsetOfJSJitExceptionHandler
(
)
{
return
offsetof
(
Instance
jsJitExceptionHandler_
)
;
}
static
constexpr
size_t
offsetOfPreBarrierCode
(
)
{
return
offsetof
(
Instance
preBarrierCode_
)
;
}
static
constexpr
size_t
offsetOfDebugFilter
(
)
{
return
offsetof
(
Instance
debugFilter_
)
;
}
static
constexpr
size_t
offsetOfGlobalArea
(
)
{
return
offsetof
(
Instance
globalArea_
)
;
}
JSContext
*
cx
(
)
const
{
return
cx_
;
}
void
*
debugTrapHandler
(
)
const
{
return
debugTrapHandler_
;
}
void
setDebugTrapHandler
(
void
*
newHandler
)
{
debugTrapHandler_
=
newHandler
;
}
JS
:
:
Realm
*
realm
(
)
const
{
return
realm_
;
}
bool
debugEnabled
(
)
const
{
return
!
!
maybeDebug_
;
}
DebugState
&
debug
(
)
{
return
*
maybeDebug_
;
}
uint8_t
*
globalData
(
)
const
{
return
(
uint8_t
*
)
&
globalArea_
;
}
const
SharedTableVector
&
tables
(
)
const
{
return
tables_
;
}
SharedMem
<
uint8_t
*
>
memoryBase
(
)
const
;
WasmMemoryObject
*
memory
(
)
const
;
size_t
memoryMappedSize
(
)
const
;
SharedArrayRawBuffer
*
sharedMemoryBuffer
(
)
const
;
bool
memoryAccessInGuardRegion
(
const
uint8_t
*
addr
unsigned
numBytes
)
const
;
void
setInterrupt
(
)
;
bool
isInterrupted
(
)
const
;
void
resetInterrupt
(
JSContext
*
cx
)
;
bool
debugFilter
(
uint32_t
funcIndex
)
const
;
void
setDebugFilter
(
uint32_t
funcIndex
bool
value
)
;
const
Code
&
code
(
)
const
{
return
*
code_
;
}
inline
const
CodeTier
&
code
(
Tier
t
)
const
;
inline
uint8_t
*
codeBase
(
Tier
t
)
const
;
inline
const
MetadataTier
&
metadata
(
Tier
t
)
const
;
inline
const
Metadata
&
metadata
(
)
const
;
inline
bool
isAsmJS
(
)
const
;
WasmInstanceObject
*
object
(
)
const
;
WasmInstanceObject
*
objectUnbarriered
(
)
const
;
[
[
nodiscard
]
]
bool
callExport
(
JSContext
*
cx
uint32_t
funcIndex
CallArgs
args
CoercionLevel
level
=
CoercionLevel
:
:
Spec
)
;
void
setPendingException
(
HandleAnyRef
exn
)
;
void
constantGlobalGet
(
uint32_t
globalIndex
MutableHandleVal
result
)
;
[
[
nodiscard
]
]
bool
constantRefFunc
(
uint32_t
funcIndex
MutableHandleFuncRef
result
)
;
JSAtom
*
getFuncDisplayAtom
(
JSContext
*
cx
uint32_t
funcIndex
)
const
;
void
ensureProfilingLabels
(
bool
profilingEnabled
)
const
;
void
onMovingGrowMemory
(
)
;
void
onMovingGrowTable
(
const
Table
*
theTable
)
;
[
[
nodiscard
]
]
bool
initElems
(
uint32_t
tableIndex
const
ElemSegment
&
seg
uint32_t
dstOffset
uint32_t
srcOffset
uint32_t
len
)
;
#
ifdef
ENABLE_WASM_GC
RttValue
*
rttCanon
(
uint32_t
typeIndex
)
const
;
#
endif
JSString
*
createDisplayURL
(
JSContext
*
cx
)
;
WasmBreakpointSite
*
getOrCreateBreakpointSite
(
JSContext
*
cx
uint32_t
offset
)
;
void
destroyBreakpointSite
(
JS
:
:
GCContext
*
gcx
uint32_t
offset
)
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
SeenSet
<
Metadata
>
*
seenMetadata
SeenSet
<
Code
>
*
seenCode
SeenSet
<
Table
>
*
seenTables
size_t
*
code
size_t
*
data
)
const
;
void
disassembleExport
(
JSContext
*
cx
uint32_t
funcIndex
Tier
tier
PrintCallback
printString
)
const
;
public
:
static
int32_t
callImport_general
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
uint32_t
memoryGrow_m32
(
Instance
*
instance
uint32_t
delta
)
;
static
uint64_t
memoryGrow_m64
(
Instance
*
instance
uint64_t
delta
)
;
static
uint32_t
memorySize_m32
(
Instance
*
instance
)
;
static
uint64_t
memorySize_m64
(
Instance
*
instance
)
;
static
int32_t
memCopy_m32
(
Instance
*
instance
uint32_t
dstByteOffset
uint32_t
srcByteOffset
uint32_t
len
uint8_t
*
memBase
)
;
static
int32_t
memCopyShared_m32
(
Instance
*
instance
uint32_t
dstByteOffset
uint32_t
srcByteOffset
uint32_t
len
uint8_t
*
memBase
)
;
static
int32_t
memCopy_m64
(
Instance
*
instance
uint64_t
dstByteOffset
uint64_t
srcByteOffset
uint64_t
len
uint8_t
*
memBase
)
;
static
int32_t
memCopyShared_m64
(
Instance
*
instance
uint64_t
dstByteOffset
uint64_t
srcByteOffset
uint64_t
len
uint8_t
*
memBase
)
;
static
int32_t
memFill_m32
(
Instance
*
instance
uint32_t
byteOffset
uint32_t
value
uint32_t
len
uint8_t
*
memBase
)
;
static
int32_t
memFillShared_m32
(
Instance
*
instance
uint32_t
byteOffset
uint32_t
value
uint32_t
len
uint8_t
*
memBase
)
;
static
int32_t
memFill_m64
(
Instance
*
instance
uint64_t
byteOffset
uint32_t
value
uint64_t
len
uint8_t
*
memBase
)
;
static
int32_t
memFillShared_m64
(
Instance
*
instance
uint64_t
byteOffset
uint32_t
value
uint64_t
len
uint8_t
*
memBase
)
;
static
int32_t
memInit_m32
(
Instance
*
instance
uint32_t
dstOffset
uint32_t
srcOffset
uint32_t
len
uint32_t
segIndex
)
;
static
int32_t
memInit_m64
(
Instance
*
instance
uint64_t
dstOffset
uint32_t
srcOffset
uint32_t
len
uint32_t
segIndex
)
;
static
int32_t
dataDrop
(
Instance
*
instance
uint32_t
segIndex
)
;
static
int32_t
tableCopy
(
Instance
*
instance
uint32_t
dstOffset
uint32_t
srcOffset
uint32_t
len
uint32_t
dstTableIndex
uint32_t
srcTableIndex
)
;
static
int32_t
tableFill
(
Instance
*
instance
uint32_t
start
void
*
value
uint32_t
len
uint32_t
tableIndex
)
;
static
void
*
tableGet
(
Instance
*
instance
uint32_t
index
uint32_t
tableIndex
)
;
static
uint32_t
tableGrow
(
Instance
*
instance
void
*
initValue
uint32_t
delta
uint32_t
tableIndex
)
;
static
int32_t
tableSet
(
Instance
*
instance
uint32_t
index
void
*
value
uint32_t
tableIndex
)
;
static
uint32_t
tableSize
(
Instance
*
instance
uint32_t
tableIndex
)
;
static
int32_t
tableInit
(
Instance
*
instance
uint32_t
dstOffset
uint32_t
srcOffset
uint32_t
len
uint32_t
segIndex
uint32_t
tableIndex
)
;
static
int32_t
elemDrop
(
Instance
*
instance
uint32_t
segIndex
)
;
static
int32_t
wait_i32_m32
(
Instance
*
instance
uint32_t
byteOffset
int32_t
value
int64_t
timeout
)
;
static
int32_t
wait_i32_m64
(
Instance
*
instance
uint64_t
byteOffset
int32_t
value
int64_t
timeout
)
;
static
int32_t
wait_i64_m32
(
Instance
*
instance
uint32_t
byteOffset
int64_t
value
int64_t
timeout
)
;
static
int32_t
wait_i64_m64
(
Instance
*
instance
uint64_t
byteOffset
int64_t
value
int64_t
timeout
)
;
static
int32_t
wake_m32
(
Instance
*
instance
uint32_t
byteOffset
int32_t
count
)
;
static
int32_t
wake_m64
(
Instance
*
instance
uint64_t
byteOffset
int32_t
count
)
;
static
void
*
refFunc
(
Instance
*
instance
uint32_t
funcIndex
)
;
static
void
preBarrierFiltering
(
Instance
*
instance
gc
:
:
Cell
*
*
location
)
;
static
void
postBarrier
(
Instance
*
instance
gc
:
:
Cell
*
*
location
)
;
static
void
postBarrierPrecise
(
Instance
*
instance
JSObject
*
*
location
JSObject
*
prev
)
;
static
void
postBarrierFiltering
(
Instance
*
instance
gc
:
:
Cell
*
*
location
)
;
static
void
*
structNew
(
Instance
*
instance
void
*
structDescr
)
;
static
void
*
exceptionNew
(
Instance
*
instance
JSObject
*
tag
)
;
static
int32_t
throwException
(
Instance
*
instance
JSObject
*
exn
)
;
static
void
*
arrayNew
(
Instance
*
instance
uint32_t
numElements
void
*
arrayDescr
)
;
static
void
*
arrayNewData
(
Instance
*
instance
uint32_t
segByteOffset
uint32_t
numElements
void
*
arrayDescr
uint32_t
segIndex
)
;
static
void
*
arrayNewElem
(
Instance
*
instance
uint32_t
segElemIndex
uint32_t
numElements
void
*
arrayDescr
uint32_t
segIndex
)
;
static
int32_t
arrayCopy
(
Instance
*
instance
void
*
dstArray
uint32_t
dstIndex
void
*
srcArray
uint32_t
srcIndex
uint32_t
numElements
uint32_t
elementSize
)
;
static
int32_t
refTest
(
Instance
*
instance
void
*
refPtr
void
*
rttPtr
)
;
static
int32_t
intrI8VecMul
(
Instance
*
instance
uint32_t
dest
uint32_t
src1
uint32_t
src2
uint32_t
len
uint8_t
*
memBase
)
;
}
;
bool
ResultsToJSValue
(
JSContext
*
cx
ResultType
type
void
*
registerResultLoc
Maybe
<
char
*
>
stackResultsLoc
MutableHandleValue
rval
CoercionLevel
level
=
CoercionLevel
:
:
Spec
)
;
void
ReportTrapError
(
JSContext
*
cx
unsigned
errorNumber
)
;
void
TraceInstanceEdge
(
JSTracer
*
trc
Instance
*
instance
const
char
*
name
)
;
}
}
#
endif
