#
ifndef
wasm_instance_h
#
define
wasm_instance_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
wasm
/
WasmCode
.
h
"
#
include
"
wasm
/
WasmDebug
.
h
"
#
include
"
wasm
/
WasmTable
.
h
"
namespace
js
{
namespace
wasm
{
class
GlobalSegment
{
uint32_t
globalDataLength_
;
TlsData
*
tlsData_
;
GlobalSegment
(
const
GlobalSegment
&
)
=
delete
;
GlobalSegment
(
GlobalSegment
&
&
)
=
delete
;
void
operator
=
(
const
GlobalSegment
&
)
=
delete
;
void
operator
=
(
GlobalSegment
&
&
)
=
delete
;
public
:
static
UniquePtr
<
GlobalSegment
>
create
(
uint32_t
globalDataLength
)
;
GlobalSegment
(
)
{
PodZero
(
this
)
;
}
~
GlobalSegment
(
)
;
TlsData
*
tlsData
(
)
const
{
return
tlsData_
;
}
uint8_t
*
globalData
(
)
const
{
return
(
uint8_t
*
)
&
tlsData_
-
>
globalArea
;
}
uint32_t
globalDataLength
(
)
const
{
return
globalDataLength_
;
}
size_t
sizeOfMisc
(
MallocSizeOf
mallocSizeOf
)
const
;
}
;
typedef
UniquePtr
<
GlobalSegment
>
UniqueGlobalSegment
;
class
Instance
{
JSCompartment
*
const
compartment_
;
ReadBarrieredWasmInstanceObject
object_
;
const
SharedCode
code_
;
const
UniqueDebugState
debug_
;
const
UniqueGlobalSegment
globals_
;
GCPtrWasmMemoryObject
memory_
;
SharedTableVector
tables_
;
bool
enterFrameTrapsEnabled_
;
const
void
*
*
addressOfSigId
(
const
SigIdDesc
&
sigId
)
const
;
FuncImportTls
&
funcImportTls
(
const
FuncImport
&
fi
)
;
TableTls
&
tableTls
(
const
TableDesc
&
td
)
const
;
friend
class
js
:
:
WasmInstanceObject
;
void
tracePrivate
(
JSTracer
*
trc
)
;
bool
callImport
(
JSContext
*
cx
uint32_t
funcImportIndex
unsigned
argc
const
uint64_t
*
argv
MutableHandleValue
rval
)
;
public
:
Instance
(
JSContext
*
cx
HandleWasmInstanceObject
object
SharedCode
code
UniqueDebugState
debug
UniqueGlobalSegment
globals
HandleWasmMemoryObject
memory
SharedTableVector
&
&
tables
Handle
<
FunctionVector
>
funcImports
const
ValVector
&
globalImports
)
;
~
Instance
(
)
;
bool
init
(
JSContext
*
cx
)
;
void
trace
(
JSTracer
*
trc
)
;
JSContext
*
cx
(
)
const
{
return
tlsData
(
)
-
>
cx
;
}
JSCompartment
*
compartment
(
)
const
{
return
compartment_
;
}
const
Code
&
code
(
)
const
{
return
*
code_
;
}
DebugState
&
debug
(
)
{
return
*
debug_
;
}
const
DebugState
&
debug
(
)
const
{
return
*
debug_
;
}
const
CodeSegment
&
codeSegment
(
)
const
{
return
code_
-
>
segment
(
)
;
}
const
GlobalSegment
&
globalSegment
(
)
const
{
return
*
globals_
;
}
uint8_t
*
codeBase
(
)
const
{
return
code_
-
>
segment
(
)
.
base
(
)
;
}
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
bool
isAsmJS
(
)
const
{
return
metadata
(
)
.
isAsmJS
(
)
;
}
const
SharedTableVector
&
tables
(
)
const
{
return
tables_
;
}
SharedMem
<
uint8_t
*
>
memoryBase
(
)
const
;
size_t
memoryLength
(
)
const
;
size_t
memoryMappedSize
(
)
const
;
bool
memoryAccessInGuardRegion
(
uint8_t
*
addr
unsigned
numBytes
)
const
;
TlsData
*
tlsData
(
)
const
{
return
globals_
-
>
tlsData
(
)
;
}
WasmInstanceObject
*
object
(
)
const
;
WasmInstanceObject
*
objectUnbarriered
(
)
const
;
MOZ_MUST_USE
bool
callExport
(
JSContext
*
cx
uint32_t
funcIndex
CallArgs
args
)
;
bool
getFuncName
(
uint32_t
funcIndex
UTF8Bytes
*
name
)
const
;
JSAtom
*
getFuncAtom
(
JSContext
*
cx
uint32_t
funcIndex
)
const
;
void
ensureProfilingLabels
(
bool
profilingEnabled
)
const
;
void
deoptimizeImportExit
(
uint32_t
funcImportIndex
)
;
bool
memoryAccessWouldFault
(
uint8_t
*
addr
unsigned
numBytes
)
;
void
onMovingGrowMemory
(
uint8_t
*
prevMemoryBase
)
;
void
onMovingGrowTable
(
)
;
bool
debugEnabled
(
)
const
{
return
code_
-
>
metadata
(
)
.
debugEnabled
;
}
bool
enterFrameTrapsEnabled
(
)
const
{
return
enterFrameTrapsEnabled_
;
}
void
ensureEnterFrameTrapsState
(
JSContext
*
cx
bool
enabled
)
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
Code
:
:
SeenSet
*
seenCode
Table
:
:
SeenSet
*
seenTables
size_t
*
code
size_t
*
data
)
const
;
public
:
static
int32_t
callImport_void
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_i32
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_i64
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_f64
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
uint32_t
growMemory_i32
(
Instance
*
instance
uint32_t
delta
)
;
static
uint32_t
currentMemory_i32
(
Instance
*
instance
)
;
}
;
typedef
UniquePtr
<
Instance
>
UniqueInstance
;
bool
InitInstanceStaticData
(
)
;
void
ShutDownInstanceStaticData
(
)
;
}
}
#
endif
