#
ifndef
wasm_js_h
#
define
wasm_js_h
#
include
"
gc
/
Policy
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
namespace
js
{
class
TypedArrayObject
;
namespace
wasm
{
template
<
typename
T
>
JSObject
*
CreateCustomNaNObject
(
JSContext
*
cx
T
*
addr
)
;
bool
ReadCustomFloat32NaNObject
(
JSContext
*
cx
HandleValue
v
uint32_t
*
ret
)
;
bool
ReadCustomDoubleNaNObject
(
JSContext
*
cx
HandleValue
v
uint64_t
*
ret
)
;
JSObject
*
CreateI64Object
(
JSContext
*
cx
int64_t
i64
)
;
bool
ReadI64Object
(
JSContext
*
cx
HandleValue
v
int64_t
*
i64
)
;
bool
HasCompilerSupport
(
ExclusiveContext
*
cx
)
;
bool
HasSupport
(
ExclusiveContext
*
cx
)
;
MOZ_MUST_USE
bool
Eval
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
code
HandleObject
importObj
MutableHandleWasmInstanceObject
instanceObj
)
;
extern
const
char
InstanceExportField
[
]
;
extern
bool
IsExportedFunction
(
JSFunction
*
fun
)
;
extern
bool
IsExportedWasmFunction
(
JSFunction
*
fun
)
;
extern
bool
IsExportedFunction
(
const
Value
&
v
MutableHandleFunction
f
)
;
extern
Instance
&
ExportedFunctionToInstance
(
JSFunction
*
fun
)
;
extern
WasmInstanceObject
*
ExportedFunctionToInstanceObject
(
JSFunction
*
fun
)
;
extern
uint32_t
ExportedFunctionToFuncIndex
(
JSFunction
*
fun
)
;
}
extern
const
Class
WebAssemblyClass
;
JSObject
*
InitWebAssemblyClass
(
JSContext
*
cx
HandleObject
global
)
;
class
WasmModuleObject
:
public
NativeObject
{
static
const
unsigned
MODULE_SLOT
=
0
;
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
bool
imports
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
exports
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
customSections
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
const
JSFunctionSpec
static_methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmModuleObject
*
create
(
ExclusiveContext
*
cx
wasm
:
:
Module
&
module
HandleObject
proto
=
nullptr
)
;
wasm
:
:
Module
&
module
(
)
const
;
}
;
class
WasmInstanceObject
:
public
NativeObject
{
static
const
unsigned
INSTANCE_SLOT
=
0
;
static
const
unsigned
EXPORTS_SLOT
=
1
;
static
const
ClassOps
classOps_
;
bool
isNewborn
(
)
const
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
using
ExportMap
=
GCHashMap
<
uint32_t
HeapPtr
<
JSFunction
*
>
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
;
ExportMap
&
exports
(
)
const
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
2
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
const
JSFunctionSpec
static_methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmInstanceObject
*
create
(
JSContext
*
cx
UniquePtr
<
wasm
:
:
Code
>
code
HandleWasmMemoryObject
memory
Vector
<
RefPtr
<
wasm
:
:
Table
>
0
SystemAllocPolicy
>
&
&
tables
Handle
<
FunctionVector
>
funcImports
const
wasm
:
:
ValVector
&
globalImports
HandleObject
proto
)
;
wasm
:
:
Instance
&
instance
(
)
const
;
static
bool
getExportedFunction
(
JSContext
*
cx
HandleWasmInstanceObject
instanceObj
uint32_t
funcIndex
MutableHandleFunction
fun
)
;
const
wasm
:
:
CodeRange
&
getExportedFunctionCodeRange
(
HandleFunction
fun
)
;
}
;
class
WasmMemoryObject
:
public
NativeObject
{
static
const
unsigned
BUFFER_SLOT
=
0
;
static
const
unsigned
OBSERVERS_SLOT
=
1
;
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
bool
bufferGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
bufferGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
growImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
grow
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
using
InstanceSet
=
GCHashSet
<
ReadBarrieredWasmInstanceObject
MovableCellHasher
<
ReadBarrieredWasmInstanceObject
>
SystemAllocPolicy
>
;
using
WeakInstanceSet
=
JS
:
:
WeakCache
<
InstanceSet
>
;
bool
hasObservers
(
)
const
;
WeakInstanceSet
&
observers
(
)
const
;
WeakInstanceSet
*
getOrCreateObservers
(
JSContext
*
cx
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
2
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
const
JSFunctionSpec
static_methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmMemoryObject
*
create
(
ExclusiveContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
buffer
HandleObject
proto
)
;
ArrayBufferObjectMaybeShared
&
buffer
(
)
const
;
bool
movingGrowable
(
)
const
;
bool
addMovingGrowObserver
(
JSContext
*
cx
WasmInstanceObject
*
instance
)
;
static
uint32_t
grow
(
HandleWasmMemoryObject
memory
uint32_t
delta
JSContext
*
cx
)
;
}
;
class
WasmTableObject
:
public
NativeObject
{
static
const
unsigned
TABLE_SLOT
=
0
;
static
const
ClassOps
classOps_
;
bool
isNewborn
(
)
const
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
static
bool
lengthGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
lengthGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
getImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
get
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
setImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
set
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
growImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
grow
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
const
JSFunctionSpec
static_methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmTableObject
*
create
(
JSContext
*
cx
wasm
:
:
Limits
limits
)
;
wasm
:
:
Table
&
table
(
)
const
;
}
;
}
#
endif
