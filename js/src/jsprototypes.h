#
ifndef
jsprototypes_h
#
define
jsprototypes_h
#
define
CLASP
(
name
)
(
&
name
#
#
Class
)
#
define
OCLASP
(
name
)
(
&
name
#
#
Object
:
:
class_
)
#
define
TYPED_ARRAY_CLASP
(
type
)
(
&
TypedArrayObject
:
:
classes
[
Scalar
:
:
type
]
)
#
define
ERROR_CLASP
(
type
)
(
&
ErrorObject
:
:
classes
[
type
]
)
#
ifdef
EXPOSE_INTL_API
#
define
IF_INTL
(
real
imaginary
)
real
#
else
#
define
IF_INTL
(
real
imaginary
)
imaginary
#
endif
#
ifdef
ENABLE_BINARYDATA
#
define
IF_BDATA
(
real
imaginary
)
real
#
else
#
define
IF_BDATA
(
real
imaginary
)
imaginary
#
endif
#
ifdef
ENABLE_SIMD
#
define
IF_SIMD
(
real
imaginary
)
real
#
else
#
define
IF_SIMD
(
real
imaginary
)
imaginary
#
endif
#
ifdef
ENABLE_SHARED_ARRAY_BUFFER
#
define
IF_SAB
(
real
imaginary
)
real
#
else
#
define
IF_SAB
(
real
imaginary
)
imaginary
#
endif
#
define
JS_FOR_PROTOTYPES
(
real
imaginary
)
\
imaginary
(
Null
0
InitNullClass
dummy
)
\
real
(
Object
1
InitViaClassSpec
OCLASP
(
Plain
)
)
\
real
(
Function
2
InitViaClassSpec
&
JSFunction
:
:
class_
)
\
real
(
Array
3
InitViaClassSpec
OCLASP
(
Array
)
)
\
real
(
Boolean
4
InitBooleanClass
OCLASP
(
Boolean
)
)
\
real
(
JSON
5
InitJSONClass
CLASP
(
JSON
)
)
\
real
(
Date
6
InitViaClassSpec
OCLASP
(
Date
)
)
\
real
(
Math
7
InitMathClass
CLASP
(
Math
)
)
\
real
(
Number
8
InitNumberClass
OCLASP
(
Number
)
)
\
real
(
String
9
InitStringClass
OCLASP
(
String
)
)
\
real
(
RegExp
10
InitViaClassSpec
OCLASP
(
RegExp
)
)
\
real
(
Error
11
InitViaClassSpec
ERROR_CLASP
(
JSEXN_ERR
)
)
\
real
(
InternalError
12
InitViaClassSpec
ERROR_CLASP
(
JSEXN_INTERNALERR
)
)
\
real
(
EvalError
13
InitViaClassSpec
ERROR_CLASP
(
JSEXN_EVALERR
)
)
\
real
(
RangeError
14
InitViaClassSpec
ERROR_CLASP
(
JSEXN_RANGEERR
)
)
\
real
(
ReferenceError
15
InitViaClassSpec
ERROR_CLASP
(
JSEXN_REFERENCEERR
)
)
\
real
(
SyntaxError
16
InitViaClassSpec
ERROR_CLASP
(
JSEXN_SYNTAXERR
)
)
\
real
(
TypeError
17
InitViaClassSpec
ERROR_CLASP
(
JSEXN_TYPEERR
)
)
\
real
(
URIError
18
InitViaClassSpec
ERROR_CLASP
(
JSEXN_URIERR
)
)
\
real
(
DebuggeeWouldRun
19
InitViaClassSpec
ERROR_CLASP
(
JSEXN_DEBUGGEEWOULDRUN
)
)
\
real
(
Iterator
20
InitLegacyIteratorClass
OCLASP
(
PropertyIterator
)
)
\
real
(
StopIteration
21
InitStopIterationClass
OCLASP
(
StopIteration
)
)
\
real
(
ArrayBuffer
22
InitArrayBufferClass
&
js
:
:
ArrayBufferObject
:
:
protoClass
)
\
real
(
Int8Array
23
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Int8
)
)
\
real
(
Uint8Array
24
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Uint8
)
)
\
real
(
Int16Array
25
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Int16
)
)
\
real
(
Uint16Array
26
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Uint16
)
)
\
real
(
Int32Array
27
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Int32
)
)
\
real
(
Uint32Array
28
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Uint32
)
)
\
real
(
Float32Array
29
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Float32
)
)
\
real
(
Float64Array
30
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Float64
)
)
\
real
(
Uint8ClampedArray
31
InitViaClassSpec
TYPED_ARRAY_CLASP
(
Uint8Clamped
)
)
\
real
(
Proxy
32
InitProxyClass
js
:
:
ProxyClassPtr
)
\
real
(
WeakMap
33
InitWeakMapClass
OCLASP
(
WeakMap
)
)
\
real
(
Map
34
InitMapClass
OCLASP
(
Map
)
)
\
real
(
Set
35
InitSetClass
OCLASP
(
Set
)
)
\
real
(
DataView
36
InitDataViewClass
OCLASP
(
DataView
)
)
\
real
(
Symbol
37
InitSymbolClass
OCLASP
(
Symbol
)
)
\
IF_SAB
(
real
imaginary
)
(
SharedArrayBuffer
38
InitSharedArrayBufferClass
&
js
:
:
SharedArrayBufferObject
:
:
protoClass
)
\
IF_INTL
(
real
imaginary
)
(
Intl
39
InitIntlClass
CLASP
(
Intl
)
)
\
IF_BDATA
(
real
imaginary
)
(
TypedObject
40
InitTypedObjectModuleObject
OCLASP
(
TypedObjectModule
)
)
\
real
(
Reflect
41
InitReflect
nullptr
)
\
IF_SIMD
(
real
imaginary
)
(
SIMD
42
InitSimdClass
OCLASP
(
Simd
)
)
\
real
(
WeakSet
43
InitWeakSetClass
OCLASP
(
WeakSet
)
)
\
real
(
TypedArray
44
InitViaClassSpec
&
js
:
:
TypedArrayObject
:
:
sharedTypedArrayPrototypeClass
)
\
IF_SAB
(
real
imaginary
)
(
Atomics
45
InitAtomicsClass
OCLASP
(
Atomics
)
)
\
real
(
SavedFrame
46
InitViaClassSpec
&
js
:
:
SavedFrame
:
:
class_
)
\
real
(
Wasm
47
InitWasmClass
CLASP
(
Wasm
)
)
\
#
define
JS_FOR_EACH_PROTOTYPE
(
macro
)
JS_FOR_PROTOTYPES
(
macro
macro
)
#
endif
