#
ifndef
jit_CompileInfo_h
#
define
jit_CompileInfo_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
algorithm
>
#
include
<
stdint
.
h
>
#
include
"
jit
/
CompileWrappers
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
BindingKind
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
JSAtomState
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Scope
.
h
"
namespace
js
{
class
ModuleObject
;
namespace
jit
{
class
InlineScriptTree
;
inline
unsigned
StartArgSlot
(
JSScript
*
script
)
{
return
2
+
(
script
-
>
argumentsHasVarBinding
(
)
?
1
:
0
)
;
}
inline
unsigned
CountArgSlots
(
JSScript
*
script
JSFunction
*
fun
)
{
return
StartArgSlot
(
script
)
+
(
fun
?
fun
-
>
nargs
(
)
+
1
:
0
)
;
}
enum
AnalysisMode
{
Analysis_None
Analysis_ArgumentsUsage
}
;
class
CompileInfo
{
public
:
CompileInfo
(
CompileRuntime
*
runtime
JSScript
*
script
JSFunction
*
fun
jsbytecode
*
osrPc
AnalysisMode
analysisMode
bool
scriptNeedsArgsObj
InlineScriptTree
*
inlineScriptTree
)
:
script_
(
script
)
fun_
(
fun
)
osrPc_
(
osrPc
)
analysisMode_
(
analysisMode
)
scriptNeedsArgsObj_
(
scriptNeedsArgsObj
)
hadEagerTruncationBailout_
(
script
-
>
hadEagerTruncationBailout
(
)
)
hadSpeculativePhiBailout_
(
script
-
>
hadSpeculativePhiBailout
(
)
)
hadLICMInvalidation_
(
script
-
>
hadLICMInvalidation
(
)
)
hadBoundsCheckBailout_
(
script
-
>
failedBoundsCheck
(
)
)
hadUnboxFoldingBailout_
(
script
-
>
hadUnboxFoldingBailout
(
)
)
mayReadFrameArgsDirectly_
(
script
-
>
mayReadFrameArgsDirectly
(
)
)
anyFormalIsAliased_
(
script
-
>
anyFormalIsAliased
(
)
)
isDerivedClassConstructor_
(
script
-
>
isDerivedClassConstructor
(
)
)
inlineScriptTree_
(
inlineScriptTree
)
{
MOZ_ASSERT_IF
(
osrPc
JSOp
(
*
osrPc
)
=
=
JSOp
:
:
LoopHead
)
;
if
(
fun_
)
{
fun_
=
fun_
-
>
baseScript
(
)
-
>
function
(
)
;
MOZ_ASSERT
(
fun_
-
>
isTenured
(
)
)
;
}
nimplicit_
=
StartArgSlot
(
script
)
+
(
fun
?
1
:
0
)
;
nargs_
=
fun
?
fun
-
>
nargs
(
)
:
0
;
nlocals_
=
script
-
>
nfixed
(
)
;
uint32_t
extra
=
script
-
>
isGlobalCode
(
)
?
1
:
0
;
nstack_
=
std
:
:
max
<
unsigned
>
(
script
-
>
nslots
(
)
-
script
-
>
nfixed
(
)
MinJITStackSize
)
+
extra
;
nslots_
=
nimplicit_
+
nargs_
+
nlocals_
+
nstack_
;
if
(
script
-
>
isDerivedClassConstructor
(
)
)
{
MOZ_ASSERT
(
script
-
>
functionHasThisBinding
(
)
)
;
for
(
BindingIter
bi
(
script
)
;
bi
;
bi
+
+
)
{
if
(
bi
.
name
(
)
!
=
runtime
-
>
names
(
)
.
dotThis
)
{
continue
;
}
BindingLocation
loc
=
bi
.
location
(
)
;
if
(
loc
.
kind
(
)
=
=
BindingLocation
:
:
Kind
:
:
Frame
)
{
thisSlotForDerivedClassConstructor_
=
mozilla
:
:
Some
(
localSlot
(
loc
.
slot
(
)
)
)
;
break
;
}
}
}
needsBodyEnvironmentObject_
=
script
-
>
needsBodyEnvironment
(
)
;
funNeedsSomeEnvironmentObject_
=
fun
?
fun
-
>
needsSomeEnvironmentObject
(
)
:
false
;
}
explicit
CompileInfo
(
unsigned
nlocals
)
:
script_
(
nullptr
)
fun_
(
nullptr
)
osrPc_
(
nullptr
)
analysisMode_
(
Analysis_None
)
scriptNeedsArgsObj_
(
false
)
hadEagerTruncationBailout_
(
false
)
hadSpeculativePhiBailout_
(
false
)
hadLICMInvalidation_
(
false
)
hadBoundsCheckBailout_
(
false
)
hadUnboxFoldingBailout_
(
false
)
mayReadFrameArgsDirectly_
(
false
)
anyFormalIsAliased_
(
false
)
inlineScriptTree_
(
nullptr
)
needsBodyEnvironmentObject_
(
false
)
funNeedsSomeEnvironmentObject_
(
false
)
{
nimplicit_
=
0
;
nargs_
=
0
;
nlocals_
=
nlocals
;
nstack_
=
1
;
nslots_
=
nlocals_
+
nstack_
;
}
JSScript
*
script
(
)
const
{
return
script_
;
}
bool
compilingWasm
(
)
const
{
return
script
(
)
=
=
nullptr
;
}
JSFunction
*
funMaybeLazy
(
)
const
{
return
fun_
;
}
ModuleObject
*
module
(
)
const
{
return
script_
-
>
module
(
)
;
}
jsbytecode
*
osrPc
(
)
const
{
return
osrPc_
;
}
InlineScriptTree
*
inlineScriptTree
(
)
const
{
return
inlineScriptTree_
;
}
const
char
*
filename
(
)
const
{
return
script_
-
>
filename
(
)
;
}
unsigned
lineno
(
)
const
{
return
script_
-
>
lineno
(
)
;
}
unsigned
nslots
(
)
const
{
return
nslots_
;
}
unsigned
nimplicit
(
)
const
{
return
nimplicit_
;
}
unsigned
nargs
(
)
const
{
return
nargs_
;
}
unsigned
nlocals
(
)
const
{
return
nlocals_
;
}
unsigned
ninvoke
(
)
const
{
return
nslots_
-
nstack_
;
}
uint32_t
environmentChainSlot
(
)
const
{
MOZ_ASSERT
(
script
(
)
)
;
return
0
;
}
uint32_t
returnValueSlot
(
)
const
{
MOZ_ASSERT
(
script
(
)
)
;
return
1
;
}
uint32_t
argsObjSlot
(
)
const
{
MOZ_ASSERT
(
hasArguments
(
)
)
;
return
2
;
}
uint32_t
thisSlot
(
)
const
{
MOZ_ASSERT
(
funMaybeLazy
(
)
)
;
MOZ_ASSERT
(
nimplicit_
>
0
)
;
return
nimplicit_
-
1
;
}
uint32_t
firstArgSlot
(
)
const
{
return
nimplicit_
;
}
uint32_t
argSlotUnchecked
(
uint32_t
i
)
const
{
MOZ_ASSERT
(
i
<
nargs_
)
;
return
nimplicit_
+
i
;
}
uint32_t
argSlot
(
uint32_t
i
)
const
{
MOZ_ASSERT
(
!
argsObjAliasesFormals
(
)
)
;
return
argSlotUnchecked
(
i
)
;
}
uint32_t
firstLocalSlot
(
)
const
{
return
nimplicit_
+
nargs_
;
}
uint32_t
localSlot
(
uint32_t
i
)
const
{
return
firstLocalSlot
(
)
+
i
;
}
uint32_t
firstStackSlot
(
)
const
{
return
firstLocalSlot
(
)
+
nlocals
(
)
;
}
uint32_t
stackSlot
(
uint32_t
i
)
const
{
return
firstStackSlot
(
)
+
i
;
}
uint32_t
totalSlots
(
)
const
{
MOZ_ASSERT
(
script
(
)
&
&
funMaybeLazy
(
)
)
;
return
nimplicit
(
)
+
nargs
(
)
+
nlocals
(
)
;
}
bool
hasArguments
(
)
const
{
return
script
(
)
-
>
argumentsHasVarBinding
(
)
;
}
bool
argumentsAliasesFormals
(
)
const
{
return
script
(
)
-
>
argumentsAliasesFormals
(
)
;
}
bool
hasMappedArgsObj
(
)
const
{
return
script
(
)
-
>
hasMappedArgsObj
(
)
;
}
bool
needsArgsObj
(
)
const
{
return
scriptNeedsArgsObj_
;
}
bool
argsObjAliasesFormals
(
)
const
{
return
scriptNeedsArgsObj_
&
&
script
(
)
-
>
hasMappedArgsObj
(
)
;
}
AnalysisMode
analysisMode
(
)
const
{
return
analysisMode_
;
}
bool
isAnalysis
(
)
const
{
return
analysisMode_
!
=
Analysis_None
;
}
bool
needsBodyEnvironmentObject
(
)
const
{
return
needsBodyEnvironmentObject_
;
}
enum
class
SlotObservableKind
{
ObservableNotRecoverable
ObservableRecoverable
NotObservable
}
;
inline
SlotObservableKind
getSlotObservableKind
(
uint32_t
slot
)
const
{
if
(
slot
>
=
firstLocalSlot
(
)
)
{
if
(
thisSlotForDerivedClassConstructor_
&
&
*
thisSlotForDerivedClassConstructor_
=
=
slot
)
{
return
SlotObservableKind
:
:
ObservableNotRecoverable
;
}
return
SlotObservableKind
:
:
NotObservable
;
}
if
(
slot
>
=
firstArgSlot
(
)
)
{
MOZ_ASSERT
(
funMaybeLazy
(
)
)
;
MOZ_ASSERT
(
slot
-
firstArgSlot
(
)
<
nargs
(
)
)
;
if
(
mayReadFrameArgsDirectly_
|
|
!
script
(
)
-
>
strict
(
)
)
{
return
SlotObservableKind
:
:
ObservableRecoverable
;
}
return
SlotObservableKind
:
:
NotObservable
;
}
if
(
funMaybeLazy
(
)
&
&
slot
=
=
thisSlot
(
)
)
{
return
SlotObservableKind
:
:
ObservableRecoverable
;
}
if
(
slot
=
=
environmentChainSlot
(
)
)
{
if
(
needsBodyEnvironmentObject
(
)
)
{
return
SlotObservableKind
:
:
ObservableNotRecoverable
;
}
if
(
funNeedsSomeEnvironmentObject_
|
|
hasArguments
(
)
)
{
return
SlotObservableKind
:
:
ObservableRecoverable
;
}
return
SlotObservableKind
:
:
NotObservable
;
}
if
(
hasArguments
(
)
&
&
slot
=
=
argsObjSlot
(
)
)
{
MOZ_ASSERT
(
funMaybeLazy
(
)
)
;
return
SlotObservableKind
:
:
ObservableRecoverable
;
}
MOZ_ASSERT
(
slot
=
=
returnValueSlot
(
)
)
;
return
SlotObservableKind
:
:
NotObservable
;
}
inline
bool
isObservableSlot
(
uint32_t
slot
)
const
{
SlotObservableKind
kind
=
getSlotObservableKind
(
slot
)
;
return
(
kind
=
=
SlotObservableKind
:
:
ObservableNotRecoverable
|
|
kind
=
=
SlotObservableKind
:
:
ObservableRecoverable
)
;
}
bool
isRecoverableOperand
(
uint32_t
slot
)
const
{
SlotObservableKind
kind
=
getSlotObservableKind
(
slot
)
;
return
(
kind
=
=
SlotObservableKind
:
:
ObservableRecoverable
|
|
kind
=
=
SlotObservableKind
:
:
NotObservable
)
;
}
bool
hadEagerTruncationBailout
(
)
const
{
return
hadEagerTruncationBailout_
;
}
bool
hadSpeculativePhiBailout
(
)
const
{
return
hadSpeculativePhiBailout_
;
}
bool
hadLICMInvalidation
(
)
const
{
return
hadLICMInvalidation_
;
}
bool
hadBoundsCheckBailout
(
)
const
{
return
hadBoundsCheckBailout_
;
}
bool
hadUnboxFoldingBailout
(
)
const
{
return
hadUnboxFoldingBailout_
;
}
bool
mayReadFrameArgsDirectly
(
)
const
{
return
mayReadFrameArgsDirectly_
;
}
bool
anyFormalIsAliased
(
)
const
{
return
anyFormalIsAliased_
;
}
bool
isDerivedClassConstructor
(
)
const
{
return
isDerivedClassConstructor_
;
}
private
:
unsigned
nimplicit_
;
unsigned
nargs_
;
unsigned
nlocals_
;
unsigned
nstack_
;
unsigned
nslots_
;
mozilla
:
:
Maybe
<
unsigned
>
thisSlotForDerivedClassConstructor_
;
JSScript
*
script_
;
JSFunction
*
fun_
;
jsbytecode
*
osrPc_
;
AnalysisMode
analysisMode_
;
bool
scriptNeedsArgsObj_
;
bool
hadEagerTruncationBailout_
;
bool
hadSpeculativePhiBailout_
;
bool
hadLICMInvalidation_
;
bool
hadBoundsCheckBailout_
;
bool
hadUnboxFoldingBailout_
;
bool
mayReadFrameArgsDirectly_
;
bool
anyFormalIsAliased_
;
bool
isDerivedClassConstructor_
;
InlineScriptTree
*
inlineScriptTree_
;
bool
needsBodyEnvironmentObject_
;
bool
funNeedsSomeEnvironmentObject_
;
}
;
}
}
#
endif
