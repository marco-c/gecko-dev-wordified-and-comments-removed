#
ifndef
jit_TIOracle_h
#
define
jit_TIOracle_h
#
include
"
jit
/
Ion
.
h
"
#
include
"
vm
/
TypeInference
.
h
"
namespace
js
{
namespace
jit
{
class
IonBuilder
;
class
MDefinition
;
class
TIOracle
{
public
:
class
Object
{
JSObject
*
raw_
;
explicit
Object
(
JSObject
*
raw
)
:
raw_
(
raw
)
{
}
friend
class
TIOracle
;
public
:
JSObject
*
toRaw
(
)
{
return
raw_
;
}
static
Object
unsafeFromRaw
(
JSObject
*
raw
)
{
return
Object
(
raw
)
;
}
explicit
operator
bool
(
)
{
return
!
!
raw_
;
}
}
;
class
Group
{
using
ObjectKey
=
js
:
:
TypeSet
:
:
ObjectKey
;
ObjectKey
*
raw_
;
explicit
Group
(
ObjectKey
*
raw
)
:
raw_
(
raw
)
{
}
explicit
Group
(
JSObject
*
raw
)
;
explicit
Group
(
ObjectGroup
*
raw
)
;
friend
class
TIOracle
;
public
:
ObjectKey
*
toRaw
(
)
{
return
raw_
;
}
template
<
typename
T
>
static
Group
unsafeFromRaw
(
T
raw
)
{
return
Group
(
raw
)
;
}
explicit
operator
bool
(
)
{
return
!
!
raw_
;
}
}
;
class
TypeSet
{
TemporaryTypeSet
*
raw_
;
explicit
TypeSet
(
TemporaryTypeSet
*
raw
)
:
raw_
(
raw
)
{
}
friend
class
TIOracle
;
public
:
TemporaryTypeSet
*
toRaw
(
)
{
return
raw_
;
}
static
TypeSet
unsafeFromRaw
(
TemporaryTypeSet
*
raw
)
{
return
TypeSet
(
raw
)
;
}
explicit
operator
bool
(
)
{
return
!
!
raw_
;
}
}
;
explicit
TIOracle
(
IonBuilder
*
builder
CompilerConstraintList
*
constraints
)
;
IonBuilder
*
builder
(
)
{
return
builder_
;
}
CompilerConstraintList
*
constraints
(
)
{
return
constraints_
;
}
AbortReasonOr
<
Ok
>
ensureBallast
(
)
;
TypeSet
resultTypeSet
(
MDefinition
*
def
)
;
private
:
Object
wrapObject
(
JSObject
*
object
)
;
bool
hasStableClass
(
Object
obj
)
;
bool
hasStableProto
(
Object
obj
)
;
IonBuilder
*
builder_
;
CompilerConstraintList
*
constraints_
;
}
;
}
}
#
endif
