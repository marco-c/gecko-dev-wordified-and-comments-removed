#
ifndef
jit_AutoWritableJitCode_h
#
define
jit_AutoWritableJitCode_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
<
stddef
.
h
>
#
include
"
jit
/
ExecutableAllocator
.
h
"
#
include
"
jit
/
JitCode
.
h
"
#
include
"
jit
/
JitOptions
.
h
"
#
include
"
jit
/
ProcessExecutableMemory
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Runtime
.
h
"
namespace
js
:
:
jit
{
class
MOZ_RAII
AutoWritableJitCodeFallible
{
JSRuntime
*
rt_
;
void
*
addr_
;
size_t
size_
;
AutoMarkJitCodeWritableForThread
writableForThread_
;
public
:
explicit
AutoWritableJitCodeFallible
(
JitCode
*
code
)
:
rt_
(
code
-
>
runtimeFromMainThread
(
)
)
addr_
(
code
-
>
allocatedMemory
(
)
)
size_
(
code
-
>
allocatedSize
(
)
)
{
rt_
-
>
toggleAutoWritableJitCodeActive
(
true
)
;
}
[
[
nodiscard
]
]
bool
makeWritable
(
)
{
return
ExecutableAllocator
:
:
makeWritable
(
addr_
size_
)
;
}
~
AutoWritableJitCodeFallible
(
)
{
if
(
!
ExecutableAllocator
:
:
makeExecutableAndFlushICache
(
addr_
size_
)
)
{
MOZ_CRASH
(
)
;
}
rt_
-
>
toggleAutoWritableJitCodeActive
(
false
)
;
}
}
;
class
MOZ_RAII
AutoWritableJitCode
:
private
AutoWritableJitCodeFallible
{
public
:
explicit
AutoWritableJitCode
(
JitCode
*
code
)
:
AutoWritableJitCodeFallible
(
code
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
makeWritable
(
)
)
{
oomUnsafe
.
crash
(
"
Failed
to
mmap
.
Likely
no
mappings
available
.
"
)
;
}
}
}
;
}
#
endif
