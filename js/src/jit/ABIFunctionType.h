#
ifndef
jit_ABIFunctionType_h
#
define
jit_ABIFunctionType_h
#
include
<
initializer_list
>
#
include
<
stdint
.
h
>
#
include
"
jit
/
ABIFunctionTypeGenerated
.
h
"
namespace
js
{
namespace
jit
{
enum
ABIArgType
{
ArgType_General
=
0x1
ArgType_Int32
=
0x2
ArgType_Int64
=
0x3
ArgType_Float32
=
0x4
ArgType_Float64
=
0x5
RetType_Shift
=
0x0
ArgType_Shift
=
0x3
ArgType_Mask
=
0x7
}
;
namespace
detail
{
static
constexpr
uint64_t
MakeABIFunctionType
(
ABIArgType
ret
std
:
:
initializer_list
<
ABIArgType
>
args
)
{
uint64_t
abiType
=
0
;
for
(
auto
arg
:
args
)
{
abiType
<
<
=
ArgType_Shift
;
abiType
|
=
(
uint64_t
)
arg
;
}
abiType
<
<
=
ArgType_Shift
;
abiType
|
=
(
uint64_t
)
ret
;
return
abiType
;
}
}
enum
ABIFunctionType
:
uint64_t
{
ABI_FUNCTION_TYPE_ENUM
}
;
static
constexpr
ABIFunctionType
MakeABIFunctionType
(
ABIArgType
ret
std
:
:
initializer_list
<
ABIArgType
>
args
)
{
return
ABIFunctionType
(
detail
:
:
MakeABIFunctionType
(
ret
args
)
)
;
}
}
}
#
endif
