#
ifndef
jit_JitFrames_h
#
define
jit_JitFrames_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jit
/
CalleeToken
.
h
"
#
include
"
jit
/
MachineState
.
h
"
#
include
"
jit
/
Registers
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
js
{
namespace
wasm
{
class
Instance
;
}
namespace
jit
{
enum
class
FrameType
;
class
IonScript
;
class
JitActivation
;
class
JitFrameLayout
;
struct
SafepointSlotEntry
;
struct
VMFunctionData
;
static
const
uintptr_t
FRAMETYPE_BITS
=
4
;
static
const
uintptr_t
FRAMETYPE_MASK
=
(
1
<
<
FRAMETYPE_BITS
)
-
1
;
static
const
uintptr_t
FRAME_HEADER_SIZE_SHIFT
=
FRAMETYPE_BITS
;
static
const
uintptr_t
FRAME_HEADER_SIZE_BITS
=
3
;
static
const
uintptr_t
FRAME_HEADER_SIZE_MASK
=
(
1
<
<
FRAME_HEADER_SIZE_BITS
)
-
1
;
static
const
uintptr_t
HASCACHEDSAVEDFRAME_BIT
=
1
<
<
(
FRAMETYPE_BITS
+
FRAME_HEADER_SIZE_BITS
)
;
static
const
uintptr_t
FRAMESIZE_SHIFT
=
FRAMETYPE_BITS
+
FRAME_HEADER_SIZE_BITS
+
1
;
static
const
uintptr_t
FRAMESIZE_BITS
=
32
-
FRAMESIZE_SHIFT
;
static
const
uintptr_t
FRAMESIZE_MASK
=
(
1
<
<
FRAMESIZE_BITS
)
-
1
;
struct
BaselineBailoutInfo
;
enum
class
ExceptionResumeKind
:
int32_t
{
EntryFrame
Catch
Finally
ForcedReturnBaseline
ForcedReturnIon
Bailout
Wasm
WasmCatch
}
;
struct
ResumeFromException
{
uint8_t
*
framePointer
;
uint8_t
*
stackPointer
;
uint8_t
*
target
;
ExceptionResumeKind
kind
;
wasm
:
:
Instance
*
instance
;
JS
:
:
Value
exception
;
BaselineBailoutInfo
*
bailoutInfo
;
#
if
defined
(
JS_CODEGEN_ARM64
)
uint64_t
padding_
;
#
endif
static
size_t
offsetOfFramePointer
(
)
{
return
offsetof
(
ResumeFromException
framePointer
)
;
}
static
size_t
offsetOfStackPointer
(
)
{
return
offsetof
(
ResumeFromException
stackPointer
)
;
}
static
size_t
offsetOfTarget
(
)
{
return
offsetof
(
ResumeFromException
target
)
;
}
static
size_t
offsetOfKind
(
)
{
return
offsetof
(
ResumeFromException
kind
)
;
}
static
size_t
offsetOfInstance
(
)
{
return
offsetof
(
ResumeFromException
instance
)
;
}
static
size_t
offsetOfException
(
)
{
return
offsetof
(
ResumeFromException
exception
)
;
}
static
size_t
offsetOfBailoutInfo
(
)
{
return
offsetof
(
ResumeFromException
bailoutInfo
)
;
}
}
;
#
if
defined
(
JS_CODEGEN_ARM64
)
static_assert
(
sizeof
(
ResumeFromException
)
%
16
=
=
0
"
ResumeFromException
should
be
aligned
"
)
;
#
endif
void
HandleException
(
ResumeFromException
*
rfe
)
;
void
EnsureBareExitFrame
(
JitActivation
*
act
JitFrameLayout
*
frame
)
;
void
TraceJitActivations
(
JSContext
*
cx
JSTracer
*
trc
)
;
void
UpdateJitActivationsForMinorGC
(
JSRuntime
*
rt
)
;
static
inline
uint32_t
EncodeFrameHeaderSize
(
size_t
headerSize
)
{
MOZ_ASSERT
(
(
headerSize
%
sizeof
(
uintptr_t
)
)
=
=
0
)
;
uint32_t
headerSizeWords
=
headerSize
/
sizeof
(
uintptr_t
)
;
MOZ_ASSERT
(
headerSizeWords
<
=
FRAME_HEADER_SIZE_MASK
)
;
return
headerSizeWords
;
}
static
inline
uint32_t
MakeFrameDescriptor
(
uint32_t
frameSize
FrameType
type
uint32_t
headerSize
)
{
MOZ_ASSERT
(
frameSize
<
FRAMESIZE_MASK
)
;
headerSize
=
EncodeFrameHeaderSize
(
headerSize
)
;
return
0
|
(
frameSize
<
<
FRAMESIZE_SHIFT
)
|
(
headerSize
<
<
FRAME_HEADER_SIZE_SHIFT
)
|
uint32_t
(
type
)
;
}
JSScript
*
GetTopJitJSScript
(
JSContext
*
cx
)
;
#
if
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_ARM64
)
uint8_t
*
alignDoubleSpill
(
uint8_t
*
pointer
)
;
#
else
inline
uint8_t
*
alignDoubleSpill
(
uint8_t
*
pointer
)
{
return
pointer
;
}
#
endif
class
CommonFrameLayout
{
uint8_t
*
returnAddress_
;
uintptr_t
descriptor_
;
public
:
static
size_t
offsetOfDescriptor
(
)
{
return
offsetof
(
CommonFrameLayout
descriptor_
)
;
}
uintptr_t
descriptor
(
)
const
{
return
descriptor_
;
}
static
size_t
offsetOfReturnAddress
(
)
{
return
offsetof
(
CommonFrameLayout
returnAddress_
)
;
}
FrameType
prevType
(
)
const
{
return
FrameType
(
descriptor_
&
FRAMETYPE_MASK
)
;
}
void
changePrevType
(
FrameType
type
)
{
descriptor_
&
=
~
FRAMETYPE_MASK
;
descriptor_
|
=
uintptr_t
(
type
)
;
}
size_t
prevFrameLocalSize
(
)
const
{
return
descriptor_
>
>
FRAMESIZE_SHIFT
;
}
size_t
headerSize
(
)
const
{
return
sizeof
(
uintptr_t
)
*
(
(
descriptor_
>
>
FRAME_HEADER_SIZE_SHIFT
)
&
FRAME_HEADER_SIZE_MASK
)
;
}
bool
hasCachedSavedFrame
(
)
const
{
return
descriptor_
&
HASCACHEDSAVEDFRAME_BIT
;
}
void
setHasCachedSavedFrame
(
)
{
descriptor_
|
=
HASCACHEDSAVEDFRAME_BIT
;
}
void
clearHasCachedSavedFrame
(
)
{
descriptor_
&
=
~
HASCACHEDSAVEDFRAME_BIT
;
}
uint8_t
*
returnAddress
(
)
const
{
return
returnAddress_
;
}
void
setReturnAddress
(
uint8_t
*
addr
)
{
returnAddress_
=
addr
;
}
}
;
class
JitFrameLayout
:
public
CommonFrameLayout
{
CalleeToken
calleeToken_
;
uintptr_t
numActualArgs_
;
public
:
CalleeToken
calleeToken
(
)
const
{
return
calleeToken_
;
}
void
replaceCalleeToken
(
CalleeToken
calleeToken
)
{
calleeToken_
=
calleeToken
;
}
static
constexpr
size_t
offsetOfCalleeToken
(
)
{
return
offsetof
(
JitFrameLayout
calleeToken_
)
;
}
static
constexpr
size_t
offsetOfNumActualArgs
(
)
{
return
offsetof
(
JitFrameLayout
numActualArgs_
)
;
}
static
constexpr
size_t
offsetOfThis
(
)
{
return
sizeof
(
JitFrameLayout
)
;
}
static
constexpr
size_t
offsetOfActualArgs
(
)
{
return
offsetOfThis
(
)
+
sizeof
(
JS
:
:
Value
)
;
}
static
constexpr
size_t
offsetOfActualArg
(
size_t
arg
)
{
return
offsetOfActualArgs
(
)
+
arg
*
sizeof
(
JS
:
:
Value
)
;
}
JS
:
:
Value
thisv
(
)
{
MOZ_ASSERT
(
CalleeTokenIsFunction
(
calleeToken
(
)
)
)
;
return
argv
(
)
[
0
]
;
}
JS
:
:
Value
*
argv
(
)
{
MOZ_ASSERT
(
CalleeTokenIsFunction
(
calleeToken
(
)
)
)
;
return
(
JS
:
:
Value
*
)
(
this
+
1
)
;
}
uintptr_t
numActualArgs
(
)
const
{
return
numActualArgs_
;
}
uint8_t
*
callerFramePtr
(
)
const
{
auto
*
p
=
reinterpret_cast
<
const
uintptr_t
*
>
(
this
)
-
1
;
return
reinterpret_cast
<
uint8_t
*
>
(
*
p
)
;
}
static
constexpr
size_t
IonFirstSlotOffset
=
8
;
uintptr_t
*
slotRef
(
SafepointSlotEntry
where
)
;
static
inline
size_t
Size
(
)
{
return
sizeof
(
JitFrameLayout
)
;
}
}
;
class
RectifierFrameLayout
:
public
JitFrameLayout
{
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
RectifierFrameLayout
)
;
}
}
;
class
WasmToJSJitFrameLayout
:
public
JitFrameLayout
{
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
WasmToJSJitFrameLayout
)
;
}
}
;
class
IonICCallFrameLayout
:
public
CommonFrameLayout
{
protected
:
JitCode
*
stubCode_
;
public
:
static
constexpr
size_t
FramePointerOffset
=
sizeof
(
void
*
)
;
JitCode
*
*
stubCode
(
)
{
return
&
stubCode_
;
}
static
size_t
Size
(
)
{
return
sizeof
(
IonICCallFrameLayout
)
;
}
}
;
enum
class
ExitFrameType
:
uint8_t
{
CallNative
=
0x0
ConstructNative
=
0x1
IonDOMGetter
=
0x2
IonDOMSetter
=
0x3
IonDOMMethod
=
0x4
IonOOLNative
=
0x5
IonOOLProxy
=
0x6
WasmGenericJitEntry
=
0x7
DirectWasmJitCall
=
0x8
InterpreterStub
=
0xFC
VMFunction
=
0xFD
LazyLink
=
0xFE
Bare
=
0xFF
}
;
class
ExitFooterFrame
{
uintptr_t
data_
;
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
ExitFooterFrame
)
;
}
void
setBareExitFrame
(
)
{
data_
=
uintptr_t
(
ExitFrameType
:
:
Bare
)
;
}
ExitFrameType
type
(
)
const
{
static_assert
(
sizeof
(
ExitFrameType
)
=
=
sizeof
(
uint8_t
)
"
Code
assumes
ExitFrameType
fits
in
a
byte
"
)
;
if
(
data_
>
UINT8_MAX
)
{
return
ExitFrameType
:
:
VMFunction
;
}
MOZ_ASSERT
(
ExitFrameType
(
data_
)
!
=
ExitFrameType
:
:
VMFunction
)
;
return
ExitFrameType
(
data_
)
;
}
inline
const
VMFunctionData
*
function
(
)
const
{
MOZ_ASSERT
(
type
(
)
=
=
ExitFrameType
:
:
VMFunction
)
;
return
reinterpret_cast
<
const
VMFunctionData
*
>
(
data_
)
;
}
#
ifdef
JS_CODEGEN_MIPS32
uint8_t
*
alignedForABI
(
)
{
uint8_t
*
address
=
reinterpret_cast
<
uint8_t
*
>
(
this
)
;
address
-
=
sizeof
(
intptr_t
)
;
return
alignDoubleSpill
(
address
)
;
}
#
else
uint8_t
*
alignedForABI
(
)
{
return
reinterpret_cast
<
uint8_t
*
>
(
this
)
;
}
#
endif
template
<
typename
T
>
T
*
outParam
(
)
{
uint8_t
*
address
=
alignedForABI
(
)
;
return
reinterpret_cast
<
T
*
>
(
address
-
sizeof
(
T
)
)
;
}
}
;
class
NativeExitFrameLayout
;
class
IonOOLNativeExitFrameLayout
;
class
IonOOLProxyExitFrameLayout
;
class
IonDOMExitFrameLayout
;
class
ExitFrameLayout
:
public
CommonFrameLayout
{
inline
uint8_t
*
top
(
)
{
return
reinterpret_cast
<
uint8_t
*
>
(
this
+
1
)
;
}
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
ExitFrameLayout
)
;
}
static
inline
size_t
SizeWithFooter
(
)
{
return
Size
(
)
+
ExitFooterFrame
:
:
Size
(
)
;
}
inline
ExitFooterFrame
*
footer
(
)
{
uint8_t
*
sp
=
reinterpret_cast
<
uint8_t
*
>
(
this
)
;
return
reinterpret_cast
<
ExitFooterFrame
*
>
(
sp
-
ExitFooterFrame
:
:
Size
(
)
)
;
}
inline
uint8_t
*
argBase
(
)
{
MOZ_ASSERT
(
isWrapperExit
(
)
)
;
return
top
(
)
;
}
inline
bool
isWrapperExit
(
)
{
return
footer
(
)
-
>
type
(
)
=
=
ExitFrameType
:
:
VMFunction
;
}
inline
bool
isBareExit
(
)
{
return
footer
(
)
-
>
type
(
)
=
=
ExitFrameType
:
:
Bare
;
}
template
<
typename
T
>
inline
bool
is
(
)
{
return
footer
(
)
-
>
type
(
)
=
=
T
:
:
Type
(
)
;
}
template
<
typename
T
>
inline
T
*
as
(
)
{
MOZ_ASSERT
(
this
-
>
is
<
T
>
(
)
)
;
return
reinterpret_cast
<
T
*
>
(
footer
(
)
)
;
}
}
;
class
NativeExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
uintptr_t
argc_
;
uint32_t
loCalleeResult_
;
uint32_t
hiCalleeResult_
;
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
NativeExitFrameLayout
)
;
}
static
size_t
offsetOfResult
(
)
{
return
offsetof
(
NativeExitFrameLayout
loCalleeResult_
)
;
}
inline
JS
:
:
Value
*
vp
(
)
{
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
loCalleeResult_
)
;
}
inline
uintptr_t
argc
(
)
const
{
return
argc_
;
}
}
;
class
CallNativeExitFrameLayout
:
public
NativeExitFrameLayout
{
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
CallNative
;
}
}
;
class
ConstructNativeExitFrameLayout
:
public
NativeExitFrameLayout
{
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
ConstructNative
;
}
}
;
template
<
>
inline
bool
ExitFrameLayout
:
:
is
<
NativeExitFrameLayout
>
(
)
{
return
is
<
CallNativeExitFrameLayout
>
(
)
|
|
is
<
ConstructNativeExitFrameLayout
>
(
)
;
}
class
IonOOLNativeExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
JitCode
*
stubCode_
;
uintptr_t
argc_
;
uint32_t
loCalleeResult_
;
uint32_t
hiCalleeResult_
;
uint32_t
loThis_
;
uint32_t
hiThis_
;
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
IonOOLNative
;
}
static
inline
size_t
Size
(
size_t
argc
)
{
return
sizeof
(
IonOOLNativeExitFrameLayout
)
+
(
argc
*
sizeof
(
JS
:
:
Value
)
)
;
}
static
size_t
offsetOfResult
(
)
{
return
offsetof
(
IonOOLNativeExitFrameLayout
loCalleeResult_
)
;
}
inline
JitCode
*
*
stubCode
(
)
{
return
&
stubCode_
;
}
inline
JS
:
:
Value
*
vp
(
)
{
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
loCalleeResult_
)
;
}
inline
JS
:
:
Value
*
thisp
(
)
{
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
loThis_
)
;
}
inline
uintptr_t
argc
(
)
const
{
return
argc_
;
}
}
;
class
IonOOLProxyExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
JSObject
*
proxy_
;
jsid
id_
;
uint32_t
vp0_
;
uint32_t
vp1_
;
JitCode
*
stubCode_
;
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
IonOOLProxy
;
}
static
inline
size_t
Size
(
)
{
return
sizeof
(
IonOOLProxyExitFrameLayout
)
;
}
static
size_t
offsetOfResult
(
)
{
return
offsetof
(
IonOOLProxyExitFrameLayout
vp0_
)
;
}
inline
JitCode
*
*
stubCode
(
)
{
return
&
stubCode_
;
}
inline
JS
:
:
Value
*
vp
(
)
{
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
vp0_
)
;
}
inline
jsid
*
id
(
)
{
return
&
id_
;
}
inline
JSObject
*
*
proxy
(
)
{
return
&
proxy_
;
}
}
;
class
IonDOMExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
JSObject
*
thisObj
;
uint32_t
loCalleeResult_
;
uint32_t
hiCalleeResult_
;
public
:
static
ExitFrameType
GetterType
(
)
{
return
ExitFrameType
:
:
IonDOMGetter
;
}
static
ExitFrameType
SetterType
(
)
{
return
ExitFrameType
:
:
IonDOMSetter
;
}
static
inline
size_t
Size
(
)
{
return
sizeof
(
IonDOMExitFrameLayout
)
;
}
static
size_t
offsetOfResult
(
)
{
return
offsetof
(
IonDOMExitFrameLayout
loCalleeResult_
)
;
}
inline
JS
:
:
Value
*
vp
(
)
{
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
loCalleeResult_
)
;
}
inline
JSObject
*
*
thisObjAddress
(
)
{
return
&
thisObj
;
}
inline
bool
isMethodFrame
(
)
;
}
;
struct
IonDOMMethodExitFrameLayoutTraits
;
class
IonDOMMethodExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
JSObject
*
thisObj_
;
JS
:
:
Value
*
argv_
;
uintptr_t
argc_
;
uint32_t
loCalleeResult_
;
uint32_t
hiCalleeResult_
;
friend
struct
IonDOMMethodExitFrameLayoutTraits
;
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
IonDOMMethod
;
}
static
inline
size_t
Size
(
)
{
return
sizeof
(
IonDOMMethodExitFrameLayout
)
;
}
static
size_t
offsetOfResult
(
)
{
return
offsetof
(
IonDOMMethodExitFrameLayout
loCalleeResult_
)
;
}
inline
JS
:
:
Value
*
vp
(
)
{
static_assert
(
offsetof
(
IonDOMMethodExitFrameLayout
loCalleeResult_
)
=
=
(
offsetof
(
IonDOMMethodExitFrameLayout
argc_
)
+
sizeof
(
uintptr_t
)
)
)
;
return
reinterpret_cast
<
JS
:
:
Value
*
>
(
&
loCalleeResult_
)
;
}
inline
JSObject
*
*
thisObjAddress
(
)
{
return
&
thisObj_
;
}
inline
uintptr_t
argc
(
)
{
return
argc_
;
}
}
;
inline
bool
IonDOMExitFrameLayout
:
:
isMethodFrame
(
)
{
return
footer_
.
type
(
)
=
=
IonDOMMethodExitFrameLayout
:
:
Type
(
)
;
}
template
<
>
inline
bool
ExitFrameLayout
:
:
is
<
IonDOMExitFrameLayout
>
(
)
{
ExitFrameType
type
=
footer
(
)
-
>
type
(
)
;
return
type
=
=
IonDOMExitFrameLayout
:
:
GetterType
(
)
|
|
type
=
=
IonDOMExitFrameLayout
:
:
SetterType
(
)
|
|
type
=
=
IonDOMMethodExitFrameLayout
:
:
Type
(
)
;
}
template
<
>
inline
IonDOMExitFrameLayout
*
ExitFrameLayout
:
:
as
<
IonDOMExitFrameLayout
>
(
)
{
MOZ_ASSERT
(
is
<
IonDOMExitFrameLayout
>
(
)
)
;
return
reinterpret_cast
<
IonDOMExitFrameLayout
*
>
(
footer
(
)
)
;
}
struct
IonDOMMethodExitFrameLayoutTraits
{
static
const
size_t
offsetOfArgcFromArgv
=
offsetof
(
IonDOMMethodExitFrameLayout
argc_
)
-
offsetof
(
IonDOMMethodExitFrameLayout
argv_
)
;
}
;
class
CalledFromJitExitFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
JitFrameLayout
exit_
;
public
:
static
inline
size_t
Size
(
)
{
return
sizeof
(
CalledFromJitExitFrameLayout
)
;
}
inline
JitFrameLayout
*
jsFrame
(
)
{
return
&
exit_
;
}
static
size_t
offsetOfExitFrame
(
)
{
return
offsetof
(
CalledFromJitExitFrameLayout
exit_
)
;
}
}
;
class
LazyLinkExitFrameLayout
:
public
CalledFromJitExitFrameLayout
{
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
LazyLink
;
}
}
;
class
InterpreterStubExitFrameLayout
:
public
CalledFromJitExitFrameLayout
{
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
InterpreterStub
;
}
}
;
class
WasmGenericJitEntryFrameLayout
:
CalledFromJitExitFrameLayout
{
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
WasmGenericJitEntry
;
}
}
;
template
<
>
inline
bool
ExitFrameLayout
:
:
is
<
CalledFromJitExitFrameLayout
>
(
)
{
return
is
<
InterpreterStubExitFrameLayout
>
(
)
|
|
is
<
LazyLinkExitFrameLayout
>
(
)
|
|
is
<
WasmGenericJitEntryFrameLayout
>
(
)
;
}
template
<
>
inline
CalledFromJitExitFrameLayout
*
ExitFrameLayout
:
:
as
<
CalledFromJitExitFrameLayout
>
(
)
{
MOZ_ASSERT
(
is
<
CalledFromJitExitFrameLayout
>
(
)
)
;
uint8_t
*
sp
=
reinterpret_cast
<
uint8_t
*
>
(
this
)
;
sp
-
=
CalledFromJitExitFrameLayout
:
:
offsetOfExitFrame
(
)
;
return
reinterpret_cast
<
CalledFromJitExitFrameLayout
*
>
(
sp
)
;
}
class
DirectWasmJitCallFrameLayout
{
protected
:
ExitFooterFrame
footer_
;
ExitFrameLayout
exit_
;
public
:
static
ExitFrameType
Type
(
)
{
return
ExitFrameType
:
:
DirectWasmJitCall
;
}
}
;
class
ICStub
;
class
BaselineStubFrameLayout
:
public
CommonFrameLayout
{
public
:
static
constexpr
size_t
FramePointerOffset
=
sizeof
(
void
*
)
;
static
constexpr
size_t
ICStubOffset
=
2
*
sizeof
(
void
*
)
;
static
constexpr
int
ICStubOffsetFromFP
=
-
int
(
sizeof
(
void
*
)
)
;
static
inline
size_t
Size
(
)
{
return
sizeof
(
BaselineStubFrameLayout
)
;
}
inline
ICStub
*
maybeStubPtr
(
)
{
uint8_t
*
fp
=
reinterpret_cast
<
uint8_t
*
>
(
this
)
;
return
*
reinterpret_cast
<
ICStub
*
*
>
(
fp
-
ICStubOffset
)
;
}
}
;
static
constexpr
size_t
StubFrameSize
=
4
*
sizeof
(
uintptr_t
)
;
static
constexpr
size_t
StubFrameSizeFromFP
=
3
*
sizeof
(
uintptr_t
)
;
class
InvalidationBailoutStack
{
RegisterDump
:
:
FPUArray
fpregs_
;
RegisterDump
:
:
GPRArray
regs_
;
IonScript
*
ionScript_
;
uint8_t
*
osiPointReturnAddress_
;
public
:
uint8_t
*
sp
(
)
const
{
return
(
uint8_t
*
)
this
+
sizeof
(
InvalidationBailoutStack
)
;
}
JitFrameLayout
*
fp
(
)
const
;
MachineState
machine
(
)
{
return
MachineState
:
:
FromBailout
(
regs_
fpregs_
)
;
}
IonScript
*
ionScript
(
)
const
{
return
ionScript_
;
}
uint8_t
*
osiPointReturnAddress
(
)
const
{
return
osiPointReturnAddress_
;
}
static
size_t
offsetOfFpRegs
(
)
{
return
offsetof
(
InvalidationBailoutStack
fpregs_
)
;
}
static
size_t
offsetOfRegs
(
)
{
return
offsetof
(
InvalidationBailoutStack
regs_
)
;
}
void
checkInvariants
(
)
const
;
}
;
void
GetPcScript
(
JSContext
*
cx
JSScript
*
*
scriptRes
jsbytecode
*
*
pcRes
)
;
static
const
uint32_t
MinJITStackSize
=
1
;
}
}
#
endif
