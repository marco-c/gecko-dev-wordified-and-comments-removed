#
ifndef
jit_x64_Lowering_x64_h
#
define
jit_x64_Lowering_x64_h
#
include
"
jit
/
x86
-
shared
/
Lowering
-
x86
-
shared
.
h
"
namespace
js
{
namespace
jit
{
class
LIRGeneratorX64
:
public
LIRGeneratorX86Shared
{
public
:
LIRGeneratorX64
(
MIRGenerator
*
gen
MIRGraph
&
graph
LIRGraph
&
lirGraph
)
:
LIRGeneratorX86Shared
(
gen
graph
lirGraph
)
{
}
protected
:
void
lowerUntypedPhiInput
(
MPhi
*
phi
uint32_t
inputPosition
LBlock
*
block
size_t
lirIndex
)
;
void
defineUntypedPhi
(
MPhi
*
phi
size_t
lirIndex
)
;
LBoxAllocation
useBoxFixed
(
MDefinition
*
mir
Register
reg1
Register
bool
useAtStart
=
false
)
;
LAllocation
useByteOpRegister
(
MDefinition
*
mir
)
;
LAllocation
useByteOpRegisterOrNonDoubleConstant
(
MDefinition
*
mir
)
;
LDefinition
tempByteOpRegister
(
)
;
LDefinition
tempToUnbox
(
)
;
bool
needTempForPostBarrier
(
)
{
return
false
;
}
void
lowerDivI64
(
MDiv
*
div
)
;
void
lowerModI64
(
MMod
*
mod
)
;
void
lowerUDiv64
(
MDiv
*
div
)
;
void
lowerUMod64
(
MMod
*
mod
)
;
public
:
void
visitBox
(
MBox
*
box
)
;
void
visitUnbox
(
MUnbox
*
unbox
)
;
void
visitReturn
(
MReturn
*
ret
)
;
void
visitCompareExchangeTypedArrayElement
(
MCompareExchangeTypedArrayElement
*
ins
)
;
void
visitAtomicExchangeTypedArrayElement
(
MAtomicExchangeTypedArrayElement
*
ins
)
;
void
visitAtomicTypedArrayElementBinop
(
MAtomicTypedArrayElementBinop
*
ins
)
;
void
visitAsmJSUnsignedToDouble
(
MAsmJSUnsignedToDouble
*
ins
)
;
void
visitAsmJSUnsignedToFloat32
(
MAsmJSUnsignedToFloat32
*
ins
)
;
void
visitAsmJSLoadHeap
(
MAsmJSLoadHeap
*
ins
)
;
void
visitAsmJSStoreHeap
(
MAsmJSStoreHeap
*
ins
)
;
void
visitAsmJSLoadFuncPtr
(
MAsmJSLoadFuncPtr
*
ins
)
;
void
visitAsmJSCompareExchangeHeap
(
MAsmJSCompareExchangeHeap
*
ins
)
;
void
visitAsmJSAtomicExchangeHeap
(
MAsmJSAtomicExchangeHeap
*
ins
)
;
void
visitAsmJSAtomicBinopHeap
(
MAsmJSAtomicBinopHeap
*
ins
)
;
void
visitWasmStore
(
MWasmStore
*
ins
)
;
void
visitStoreTypedArrayElementStatic
(
MStoreTypedArrayElementStatic
*
ins
)
;
void
visitSubstr
(
MSubstr
*
ins
)
;
void
visitRandom
(
MRandom
*
ins
)
;
void
visitWasmTruncateToInt64
(
MWasmTruncateToInt64
*
ins
)
;
void
visitInt64ToFloatingPoint
(
MInt64ToFloatingPoint
*
ins
)
;
}
;
typedef
LIRGeneratorX64
LIRGeneratorSpecific
;
}
}
#
endif
