#
ifndef
jit_mips32_MacroAssembler_mips32_inl_h
#
define
jit_mips32_MacroAssembler_mips32_inl_h
#
include
"
jit
/
mips32
/
MacroAssembler
-
mips32
.
h
"
#
include
"
jit
/
mips
-
shared
/
MacroAssembler
-
mips
-
shared
-
inl
.
h
"
namespace
js
{
namespace
jit
{
void
MacroAssembler
:
:
andPtr
(
Register
src
Register
dest
)
{
ma_and
(
dest
src
)
;
}
void
MacroAssembler
:
:
andPtr
(
Imm32
imm
Register
dest
)
{
ma_and
(
dest
imm
)
;
}
void
MacroAssembler
:
:
and64
(
Imm64
imm
Register64
dest
)
{
and32
(
Imm32
(
imm
.
value
&
LOW_32_MASK
)
dest
.
low
)
;
and32
(
Imm32
(
(
imm
.
value
>
>
32
)
&
LOW_32_MASK
)
dest
.
high
)
;
}
void
MacroAssembler
:
:
orPtr
(
Register
src
Register
dest
)
{
ma_or
(
dest
src
)
;
}
void
MacroAssembler
:
:
orPtr
(
Imm32
imm
Register
dest
)
{
ma_or
(
dest
imm
)
;
}
void
MacroAssembler
:
:
or64
(
Register64
src
Register64
dest
)
{
or32
(
src
.
low
dest
.
low
)
;
or32
(
src
.
high
dest
.
high
)
;
}
void
MacroAssembler
:
:
xorPtr
(
Register
src
Register
dest
)
{
ma_xor
(
dest
src
)
;
}
void
MacroAssembler
:
:
xorPtr
(
Imm32
imm
Register
dest
)
{
ma_xor
(
dest
imm
)
;
}
void
MacroAssembler
:
:
lshiftPtr
(
Imm32
imm
Register
dest
)
{
ma_sll
(
dest
dest
imm
)
;
}
void
MacroAssembler
:
:
lshift64
(
Imm32
imm
Register64
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
as_sll
(
dest
.
high
dest
.
high
imm
.
value
)
;
as_srl
(
scratch
dest
.
low
32
-
imm
.
value
)
;
as_or
(
dest
.
high
dest
.
high
scratch
)
;
as_sll
(
dest
.
low
dest
.
low
imm
.
value
)
;
}
void
MacroAssembler
:
:
rshiftPtr
(
Imm32
imm
Register
dest
)
{
ma_srl
(
dest
dest
imm
)
;
}
void
MacroAssembler
:
:
rshiftPtrArithmetic
(
Imm32
imm
Register
dest
)
{
ma_sra
(
dest
dest
imm
)
;
}
void
MacroAssembler
:
:
rshift64
(
Imm32
imm
Register64
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
as_srl
(
dest
.
low
dest
.
low
imm
.
value
)
;
as_sll
(
scratch
dest
.
high
32
-
imm
.
value
)
;
as_or
(
dest
.
low
dest
.
low
scratch
)
;
as_srl
(
dest
.
high
dest
.
high
imm
.
value
)
;
}
}
}
#
endif
