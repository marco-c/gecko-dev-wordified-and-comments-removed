#
ifndef
jit_AtomicOp_h
#
define
jit_AtomicOp_h
#
include
<
stdint
.
h
>
namespace
js
{
namespace
jit
{
enum
class
AtomicOp
{
Add
Sub
And
Or
Xor
}
;
class
MemoryBarrier
{
enum
MemoryBarrierBits
:
uint8_t
{
MembarLoadLoad
=
1
MembarLoadStore
=
2
MembarStoreStore
=
4
MembarStoreLoad
=
8
MembarSynchronizing
=
16
MembarNobits
=
0
MembarAllbits
=
31
}
;
MemoryBarrierBits
bits_
;
template
<
typename
.
.
.
MembarBits
>
constexpr
explicit
MemoryBarrier
(
MembarBits
.
.
.
bits
)
:
bits_
(
static_cast
<
MemoryBarrierBits
>
(
(
bits
|
.
.
.
)
)
)
{
}
public
:
constexpr
bool
isNone
(
)
const
{
return
bits_
=
=
MembarNobits
;
}
constexpr
bool
isStoreStore
(
)
const
{
return
bits_
=
=
MembarStoreStore
;
}
constexpr
bool
isSyncStoreStore
(
)
const
{
return
bits_
=
=
static_cast
<
MemoryBarrierBits
>
(
MembarStoreStore
|
MembarSynchronizing
)
;
}
constexpr
bool
hasSync
(
)
const
{
return
bits_
&
MembarSynchronizing
;
}
constexpr
bool
hasStoreLoad
(
)
const
{
return
bits_
&
MembarStoreLoad
;
}
static
constexpr
MemoryBarrier
None
(
)
{
return
MemoryBarrier
{
MembarNobits
}
;
}
static
constexpr
MemoryBarrier
Full
(
)
{
return
MemoryBarrier
{
MembarLoadLoad
MembarLoadStore
MembarStoreLoad
MembarStoreStore
}
;
}
static
constexpr
MemoryBarrier
BeforeLoad
(
)
{
return
MemoryBarrier
{
MembarNobits
}
;
}
static
constexpr
MemoryBarrier
AfterLoad
(
)
{
return
MemoryBarrier
{
MembarLoadLoad
MembarLoadStore
}
;
}
static
constexpr
MemoryBarrier
BeforeStore
(
)
{
return
MemoryBarrier
{
MembarStoreStore
}
;
}
static
constexpr
MemoryBarrier
AfterStore
(
)
{
return
MemoryBarrier
{
MembarStoreLoad
}
;
}
}
;
struct
Synchronization
{
const
MemoryBarrier
barrierBefore
;
const
MemoryBarrier
barrierAfter
;
constexpr
Synchronization
(
MemoryBarrier
before
MemoryBarrier
after
)
:
barrierBefore
(
before
)
barrierAfter
(
after
)
{
}
static
constexpr
Synchronization
None
(
)
{
return
{
MemoryBarrier
:
:
None
(
)
MemoryBarrier
:
:
None
(
)
}
;
}
static
constexpr
Synchronization
Full
(
)
{
return
{
MemoryBarrier
:
:
Full
(
)
MemoryBarrier
:
:
Full
(
)
}
;
}
static
constexpr
Synchronization
Load
(
)
{
return
{
MemoryBarrier
:
:
BeforeLoad
(
)
MemoryBarrier
:
:
AfterLoad
(
)
}
;
}
static
constexpr
Synchronization
Store
(
)
{
return
{
MemoryBarrier
:
:
BeforeStore
(
)
MemoryBarrier
:
:
AfterStore
(
)
}
;
}
constexpr
bool
isNone
(
)
const
{
return
barrierBefore
.
isNone
(
)
&
&
barrierAfter
.
isNone
(
)
;
}
}
;
}
}
#
endif
