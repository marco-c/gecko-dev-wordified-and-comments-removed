#
include
"
jit
/
x86
/
Lowering
-
x86
.
h
"
#
include
"
jit
/
MIR
.
h
"
#
include
"
jit
/
x86
/
Assembler
-
x86
.
h
"
#
include
"
jit
/
shared
/
Lowering
-
shared
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
LBoxAllocation
LIRGeneratorX86
:
:
useBoxFixed
(
MDefinition
*
mir
Register
reg1
Register
reg2
bool
useAtStart
)
{
MOZ_ASSERT
(
mir
-
>
type
(
)
=
=
MIRType
:
:
Value
)
;
MOZ_ASSERT
(
reg1
!
=
reg2
)
;
ensureDefined
(
mir
)
;
return
LBoxAllocation
(
LUse
(
reg1
mir
-
>
virtualRegister
(
)
useAtStart
)
LUse
(
reg2
VirtualRegisterOfPayload
(
mir
)
useAtStart
)
)
;
}
LAllocation
LIRGeneratorX86
:
:
useByteOpRegister
(
MDefinition
*
mir
)
{
return
useFixed
(
mir
eax
)
;
}
LAllocation
LIRGeneratorX86
:
:
useByteOpRegisterOrNonDoubleConstant
(
MDefinition
*
mir
)
{
return
useFixed
(
mir
eax
)
;
}
LDefinition
LIRGeneratorX86
:
:
tempByteOpRegister
(
)
{
return
tempFixed
(
eax
)
;
}
void
LIRGeneratorX86
:
:
visitBox
(
MBox
*
box
)
{
MDefinition
*
inner
=
box
-
>
getOperand
(
0
)
;
if
(
IsFloatingPointType
(
inner
-
>
type
(
)
)
)
{
defineBox
(
new
(
alloc
(
)
)
LBoxFloatingPoint
(
useRegisterAtStart
(
inner
)
tempCopy
(
inner
0
)
inner
-
>
type
(
)
)
box
)
;
return
;
}
if
(
box
-
>
canEmitAtUses
(
)
)
{
emitAtUses
(
box
)
;
return
;
}
if
(
inner
-
>
isConstant
(
)
)
{
defineBox
(
new
(
alloc
(
)
)
LValue
(
inner
-
>
toConstant
(
)
-
>
toJSValue
(
)
)
box
)
;
return
;
}
LBox
*
lir
=
new
(
alloc
(
)
)
LBox
(
use
(
inner
)
inner
-
>
type
(
)
)
;
uint32_t
vreg
=
getVirtualRegister
(
)
;
lir
-
>
setDef
(
0
LDefinition
(
vreg
LDefinition
:
:
GENERAL
)
)
;
lir
-
>
setDef
(
1
LDefinition
:
:
BogusTemp
(
)
)
;
box
-
>
setVirtualRegister
(
vreg
)
;
add
(
lir
)
;
}
void
LIRGeneratorX86
:
:
visitUnbox
(
MUnbox
*
unbox
)
{
MDefinition
*
inner
=
unbox
-
>
getOperand
(
0
)
;
if
(
inner
-
>
type
(
)
=
=
MIRType
:
:
ObjectOrNull
)
{
LUnboxObjectOrNull
*
lir
=
new
(
alloc
(
)
)
LUnboxObjectOrNull
(
useRegisterAtStart
(
inner
)
)
;
if
(
unbox
-
>
fallible
(
)
)
assignSnapshot
(
lir
unbox
-
>
bailoutKind
(
)
)
;
defineReuseInput
(
lir
unbox
0
)
;
return
;
}
MOZ_ASSERT
(
inner
-
>
type
(
)
=
=
MIRType
:
:
Value
)
;
ensureDefined
(
inner
)
;
if
(
IsFloatingPointType
(
unbox
-
>
type
(
)
)
)
{
LUnboxFloatingPoint
*
lir
=
new
(
alloc
(
)
)
LUnboxFloatingPoint
(
useBox
(
inner
)
unbox
-
>
type
(
)
)
;
if
(
unbox
-
>
fallible
(
)
)
assignSnapshot
(
lir
unbox
-
>
bailoutKind
(
)
)
;
define
(
lir
unbox
)
;
return
;
}
LUnbox
*
lir
=
new
(
alloc
(
)
)
LUnbox
;
lir
-
>
setOperand
(
0
usePayloadInRegisterAtStart
(
inner
)
)
;
lir
-
>
setOperand
(
1
useType
(
inner
LUse
:
:
ANY
)
)
;
if
(
unbox
-
>
fallible
(
)
)
assignSnapshot
(
lir
unbox
-
>
bailoutKind
(
)
)
;
defineReuseInput
(
lir
unbox
0
)
;
}
void
LIRGeneratorX86
:
:
visitReturn
(
MReturn
*
ret
)
{
MDefinition
*
opd
=
ret
-
>
getOperand
(
0
)
;
MOZ_ASSERT
(
opd
-
>
type
(
)
=
=
MIRType
:
:
Value
)
;
LReturn
*
ins
=
new
(
alloc
(
)
)
LReturn
;
ins
-
>
setOperand
(
0
LUse
(
JSReturnReg_Type
)
)
;
ins
-
>
setOperand
(
1
LUse
(
JSReturnReg_Data
)
)
;
fillBoxUses
(
ins
0
opd
)
;
add
(
ins
)
;
}
void
LIRGeneratorX86
:
:
defineUntypedPhi
(
MPhi
*
phi
size_t
lirIndex
)
{
LPhi
*
type
=
current
-
>
getPhi
(
lirIndex
+
VREG_TYPE_OFFSET
)
;
LPhi
*
payload
=
current
-
>
getPhi
(
lirIndex
+
VREG_DATA_OFFSET
)
;
uint32_t
typeVreg
=
getVirtualRegister
(
)
;
phi
-
>
setVirtualRegister
(
typeVreg
)
;
uint32_t
payloadVreg
=
getVirtualRegister
(
)
;
MOZ_ASSERT
(
typeVreg
+
1
=
=
payloadVreg
)
;
type
-
>
setDef
(
0
LDefinition
(
typeVreg
LDefinition
:
:
TYPE
)
)
;
payload
-
>
setDef
(
0
LDefinition
(
payloadVreg
LDefinition
:
:
PAYLOAD
)
)
;
annotate
(
type
)
;
annotate
(
payload
)
;
}
void
LIRGeneratorX86
:
:
lowerUntypedPhiInput
(
MPhi
*
phi
uint32_t
inputPosition
LBlock
*
block
size_t
lirIndex
)
{
MDefinition
*
operand
=
phi
-
>
getOperand
(
inputPosition
)
;
LPhi
*
type
=
block
-
>
getPhi
(
lirIndex
+
VREG_TYPE_OFFSET
)
;
LPhi
*
payload
=
block
-
>
getPhi
(
lirIndex
+
VREG_DATA_OFFSET
)
;
type
-
>
setOperand
(
inputPosition
LUse
(
operand
-
>
virtualRegister
(
)
+
VREG_TYPE_OFFSET
LUse
:
:
ANY
)
)
;
payload
-
>
setOperand
(
inputPosition
LUse
(
VirtualRegisterOfPayload
(
operand
)
LUse
:
:
ANY
)
)
;
}
void
LIRGeneratorX86
:
:
visitCompareExchangeTypedArrayElement
(
MCompareExchangeTypedArrayElement
*
ins
)
{
lowerCompareExchangeTypedArrayElement
(
ins
true
)
;
}
void
LIRGeneratorX86
:
:
visitAtomicExchangeTypedArrayElement
(
MAtomicExchangeTypedArrayElement
*
ins
)
{
lowerAtomicExchangeTypedArrayElement
(
ins
true
)
;
}
void
LIRGeneratorX86
:
:
visitAtomicTypedArrayElementBinop
(
MAtomicTypedArrayElementBinop
*
ins
)
{
lowerAtomicTypedArrayElementBinop
(
ins
true
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSUnsignedToDouble
(
MAsmJSUnsignedToDouble
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
input
(
)
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
LAsmJSUInt32ToDouble
*
lir
=
new
(
alloc
(
)
)
LAsmJSUInt32ToDouble
(
useRegisterAtStart
(
ins
-
>
input
(
)
)
temp
(
)
)
;
define
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSUnsignedToFloat32
(
MAsmJSUnsignedToFloat32
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
input
(
)
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
LAsmJSUInt32ToFloat32
*
lir
=
new
(
alloc
(
)
)
LAsmJSUInt32ToFloat32
(
useRegisterAtStart
(
ins
-
>
input
(
)
)
temp
(
)
)
;
define
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitWasmStore
(
MWasmStore
*
ins
)
{
MDefinition
*
base
=
ins
-
>
base
(
)
;
MOZ_ASSERT
(
base
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
LAllocation
baseAlloc
=
useRegisterOrZeroAtStart
(
base
)
;
LAllocation
valueAlloc
;
switch
(
ins
-
>
accessType
(
)
)
{
case
Scalar
:
:
Int8
:
case
Scalar
:
:
Uint8
:
valueAlloc
=
useFixed
(
ins
-
>
value
(
)
eax
)
;
break
;
case
Scalar
:
:
Int16
:
case
Scalar
:
:
Uint16
:
case
Scalar
:
:
Int32
:
case
Scalar
:
:
Uint32
:
case
Scalar
:
:
Float32
:
case
Scalar
:
:
Float64
:
case
Scalar
:
:
Float32x4
:
case
Scalar
:
:
Int8x16
:
case
Scalar
:
:
Int16x8
:
case
Scalar
:
:
Int32x4
:
valueAlloc
=
useRegisterAtStart
(
ins
-
>
value
(
)
)
;
break
;
case
Scalar
:
:
Int64
:
MOZ_CRASH
(
"
NYI
"
)
;
case
Scalar
:
:
Uint8Clamped
:
case
Scalar
:
:
MaxTypedArrayViewType
:
MOZ_CRASH
(
"
unexpected
array
type
"
)
;
}
auto
*
lir
=
new
(
alloc
(
)
)
LWasmStore
(
baseAlloc
valueAlloc
)
;
add
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSLoadHeap
(
MAsmJSLoadHeap
*
ins
)
{
MDefinition
*
base
=
ins
-
>
base
(
)
;
MOZ_ASSERT
(
base
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
LAllocation
baseAlloc
=
gen
-
>
needsBoundsCheckBranch
(
ins
)
?
useRegisterAtStart
(
base
)
:
useRegisterOrZeroAtStart
(
base
)
;
define
(
new
(
alloc
(
)
)
LAsmJSLoadHeap
(
baseAlloc
)
ins
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSStoreHeap
(
MAsmJSStoreHeap
*
ins
)
{
MDefinition
*
base
=
ins
-
>
base
(
)
;
MOZ_ASSERT
(
base
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
LAllocation
baseAlloc
=
gen
-
>
needsBoundsCheckBranch
(
ins
)
?
useRegisterAtStart
(
base
)
:
useRegisterOrZeroAtStart
(
base
)
;
LAsmJSStoreHeap
*
lir
=
nullptr
;
switch
(
ins
-
>
accessType
(
)
)
{
case
Scalar
:
:
Int8
:
case
Scalar
:
:
Uint8
:
lir
=
new
(
alloc
(
)
)
LAsmJSStoreHeap
(
baseAlloc
useFixed
(
ins
-
>
value
(
)
eax
)
)
;
break
;
case
Scalar
:
:
Int16
:
case
Scalar
:
:
Uint16
:
case
Scalar
:
:
Int32
:
case
Scalar
:
:
Uint32
:
case
Scalar
:
:
Float32
:
case
Scalar
:
:
Float64
:
case
Scalar
:
:
Float32x4
:
case
Scalar
:
:
Int8x16
:
case
Scalar
:
:
Int16x8
:
case
Scalar
:
:
Int32x4
:
lir
=
new
(
alloc
(
)
)
LAsmJSStoreHeap
(
baseAlloc
useRegisterAtStart
(
ins
-
>
value
(
)
)
)
;
break
;
case
Scalar
:
:
Int64
:
MOZ_CRASH
(
"
NYI
"
)
;
case
Scalar
:
:
Uint8Clamped
:
case
Scalar
:
:
MaxTypedArrayViewType
:
MOZ_CRASH
(
"
unexpected
array
type
"
)
;
}
add
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitStoreTypedArrayElementStatic
(
MStoreTypedArrayElementStatic
*
ins
)
{
LStoreTypedArrayElementStatic
*
lir
;
switch
(
ins
-
>
accessType
(
)
)
{
case
Scalar
:
:
Int8
:
case
Scalar
:
:
Uint8
:
case
Scalar
:
:
Uint8Clamped
:
lir
=
new
(
alloc
(
)
)
LStoreTypedArrayElementStatic
(
useRegister
(
ins
-
>
ptr
(
)
)
useFixed
(
ins
-
>
value
(
)
eax
)
)
;
break
;
case
Scalar
:
:
Int16
:
case
Scalar
:
:
Uint16
:
case
Scalar
:
:
Int32
:
case
Scalar
:
:
Uint32
:
case
Scalar
:
:
Float32
:
case
Scalar
:
:
Float64
:
lir
=
new
(
alloc
(
)
)
LStoreTypedArrayElementStatic
(
useRegisterAtStart
(
ins
-
>
ptr
(
)
)
useRegisterAtStart
(
ins
-
>
value
(
)
)
)
;
break
;
default
:
MOZ_CRASH
(
"
unexpected
array
type
"
)
;
}
add
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSCompareExchangeHeap
(
MAsmJSCompareExchangeHeap
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
accessType
(
)
<
Scalar
:
:
Float32
)
;
MDefinition
*
base
=
ins
-
>
base
(
)
;
MOZ_ASSERT
(
base
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
bool
byteArray
=
byteSize
(
ins
-
>
accessType
(
)
)
=
=
1
;
const
LAllocation
oldval
=
useRegister
(
ins
-
>
oldValue
(
)
)
;
const
LAllocation
newval
=
byteArray
?
useFixed
(
ins
-
>
newValue
(
)
ebx
)
:
useRegister
(
ins
-
>
newValue
(
)
)
;
LAsmJSCompareExchangeHeap
*
lir
=
new
(
alloc
(
)
)
LAsmJSCompareExchangeHeap
(
useRegister
(
base
)
oldval
newval
)
;
lir
-
>
setAddrTemp
(
temp
(
)
)
;
defineFixed
(
lir
ins
LAllocation
(
AnyRegister
(
eax
)
)
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSAtomicExchangeHeap
(
MAsmJSAtomicExchangeHeap
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
base
(
)
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
const
LAllocation
base
=
useRegister
(
ins
-
>
base
(
)
)
;
const
LAllocation
value
=
useRegister
(
ins
-
>
value
(
)
)
;
LAsmJSAtomicExchangeHeap
*
lir
=
new
(
alloc
(
)
)
LAsmJSAtomicExchangeHeap
(
base
value
)
;
lir
-
>
setAddrTemp
(
temp
(
)
)
;
if
(
byteSize
(
ins
-
>
accessType
(
)
)
=
=
1
)
defineFixed
(
lir
ins
LAllocation
(
AnyRegister
(
eax
)
)
)
;
else
define
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitAsmJSAtomicBinopHeap
(
MAsmJSAtomicBinopHeap
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
accessType
(
)
<
Scalar
:
:
Float32
)
;
MDefinition
*
base
=
ins
-
>
base
(
)
;
MOZ_ASSERT
(
base
-
>
type
(
)
=
=
MIRType
:
:
Int32
)
;
bool
byteArray
=
byteSize
(
ins
-
>
accessType
(
)
)
=
=
1
;
if
(
!
ins
-
>
hasUses
(
)
)
{
LAllocation
value
;
if
(
byteArray
&
&
!
ins
-
>
value
(
)
-
>
isConstant
(
)
)
value
=
useFixed
(
ins
-
>
value
(
)
ebx
)
;
else
value
=
useRegisterOrConstant
(
ins
-
>
value
(
)
)
;
LAsmJSAtomicBinopHeapForEffect
*
lir
=
new
(
alloc
(
)
)
LAsmJSAtomicBinopHeapForEffect
(
useRegister
(
base
)
value
)
;
lir
-
>
setAddrTemp
(
temp
(
)
)
;
add
(
lir
ins
)
;
return
;
}
bool
bitOp
=
!
(
ins
-
>
operation
(
)
=
=
AtomicFetchAddOp
|
|
ins
-
>
operation
(
)
=
=
AtomicFetchSubOp
)
;
LDefinition
tempDef
=
LDefinition
:
:
BogusTemp
(
)
;
LAllocation
value
;
if
(
byteArray
)
{
value
=
useFixed
(
ins
-
>
value
(
)
ebx
)
;
if
(
bitOp
)
tempDef
=
tempFixed
(
ecx
)
;
}
else
if
(
bitOp
|
|
ins
-
>
value
(
)
-
>
isConstant
(
)
)
{
value
=
useRegisterOrConstant
(
ins
-
>
value
(
)
)
;
if
(
bitOp
)
tempDef
=
temp
(
)
;
}
else
{
value
=
useRegisterAtStart
(
ins
-
>
value
(
)
)
;
}
LAsmJSAtomicBinopHeap
*
lir
=
new
(
alloc
(
)
)
LAsmJSAtomicBinopHeap
(
useRegister
(
base
)
value
tempDef
)
;
lir
-
>
setAddrTemp
(
temp
(
)
)
;
if
(
byteArray
|
|
bitOp
)
defineFixed
(
lir
ins
LAllocation
(
AnyRegister
(
eax
)
)
)
;
else
if
(
ins
-
>
value
(
)
-
>
isConstant
(
)
)
define
(
lir
ins
)
;
else
defineReuseInput
(
lir
ins
LAsmJSAtomicBinopHeap
:
:
valueOp
)
;
}
void
LIRGeneratorX86
:
:
lowerDivI64
(
MDiv
*
div
)
{
MOZ_CRASH
(
"
NYI
"
)
;
}
void
LIRGeneratorX86
:
:
lowerModI64
(
MMod
*
mod
)
{
MOZ_CRASH
(
"
NYI
"
)
;
}
void
LIRGeneratorX86
:
:
visitSubstr
(
MSubstr
*
ins
)
{
LSubstr
*
lir
=
new
(
alloc
(
)
)
LSubstr
(
useRegister
(
ins
-
>
string
(
)
)
useRegister
(
ins
-
>
begin
(
)
)
useRegister
(
ins
-
>
length
(
)
)
temp
(
)
LDefinition
:
:
BogusTemp
(
)
tempByteOpRegister
(
)
)
;
define
(
lir
ins
)
;
assignSafepoint
(
lir
ins
)
;
}
void
LIRGeneratorX86
:
:
visitRandom
(
MRandom
*
ins
)
{
LRandom
*
lir
=
new
(
alloc
(
)
)
LRandom
(
temp
(
)
temp
(
)
temp
(
)
temp
(
)
temp
(
)
)
;
defineFixed
(
lir
ins
LFloatReg
(
ReturnDoubleReg
)
)
;
}
void
LIRGeneratorX86
:
:
visitWasmTruncateToInt64
(
MWasmTruncateToInt64
*
ins
)
{
MOZ_CRASH
(
"
NY
"
)
;
}
void
LIRGeneratorX86
:
:
visitInt64ToFloatingPoint
(
MInt64ToFloatingPoint
*
ins
)
{
MOZ_CRASH
(
"
NY
"
)
;
}
