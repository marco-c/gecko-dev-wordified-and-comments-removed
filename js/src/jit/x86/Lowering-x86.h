#
ifndef
jit_x86_Lowering_x86_h
#
define
jit_x86_Lowering_x86_h
#
include
"
jit
/
x86
-
shared
/
Lowering
-
x86
-
shared
.
h
"
namespace
js
{
namespace
jit
{
class
LIRGeneratorX86
:
public
LIRGeneratorX86Shared
{
protected
:
LIRGeneratorX86
(
MIRGenerator
*
gen
MIRGraph
&
graph
LIRGraph
&
lirGraph
)
:
LIRGeneratorX86Shared
(
gen
graph
lirGraph
)
{
}
LBoxAllocation
useBoxFixed
(
MDefinition
*
mir
Register
reg1
Register
reg2
bool
useAtStart
=
false
)
;
LAllocation
useByteOpRegister
(
MDefinition
*
mir
)
;
LAllocation
useByteOpRegisterAtStart
(
MDefinition
*
mir
)
;
LAllocation
useByteOpRegisterOrNonDoubleConstant
(
MDefinition
*
mir
)
;
LDefinition
tempByteOpRegister
(
)
;
inline
LDefinition
tempToUnbox
(
)
{
return
LDefinition
:
:
BogusTemp
(
)
;
}
bool
needTempForPostBarrier
(
)
{
return
true
;
}
void
lowerUntypedPhiInput
(
MPhi
*
phi
uint32_t
inputPosition
LBlock
*
block
size_t
lirIndex
)
;
void
lowerInt64PhiInput
(
MPhi
*
phi
uint32_t
inputPosition
LBlock
*
block
size_t
lirIndex
)
;
void
defineInt64Phi
(
MPhi
*
phi
size_t
lirIndex
)
;
void
lowerForALUInt64
(
LInstructionHelper
<
INT64_PIECES
INT64_PIECES
0
>
*
ins
MDefinition
*
mir
MDefinition
*
input
)
;
void
lowerForALUInt64
(
LInstructionHelper
<
INT64_PIECES
2
*
INT64_PIECES
0
>
*
ins
MDefinition
*
mir
MDefinition
*
lhs
MDefinition
*
rhs
)
;
void
lowerForMulInt64
(
LMulI64
*
ins
MMul
*
mir
MDefinition
*
lhs
MDefinition
*
rhs
)
;
void
lowerBuiltinInt64ToFloatingPoint
(
MBuiltinInt64ToFloatingPoint
*
ins
)
;
void
lowerWasmBuiltinTruncateToInt64
(
MWasmBuiltinTruncateToInt64
*
ins
)
;
void
lowerDivI64
(
MDiv
*
div
)
;
void
lowerWasmBuiltinDivI64
(
MWasmBuiltinDivI64
*
div
)
;
void
lowerModI64
(
MMod
*
mod
)
;
void
lowerWasmBuiltinModI64
(
MWasmBuiltinModI64
*
mod
)
;
void
lowerUDivI64
(
MDiv
*
div
)
;
void
lowerUModI64
(
MMod
*
mod
)
;
void
lowerBigIntDiv
(
MBigIntDiv
*
ins
)
;
void
lowerBigIntMod
(
MBigIntMod
*
ins
)
;
void
lowerBigIntPtrDiv
(
MBigIntPtrDiv
*
ins
)
;
void
lowerBigIntPtrMod
(
MBigIntPtrMod
*
ins
)
;
void
lowerAtomicLoad64
(
MLoadUnboxedScalar
*
ins
)
;
void
lowerAtomicStore64
(
MStoreUnboxedScalar
*
ins
)
;
void
lowerPhi
(
MPhi
*
phi
)
;
public
:
static
bool
allowTypedElementHoleCheck
(
)
{
return
true
;
}
}
;
using
LIRGeneratorSpecific
=
LIRGeneratorX86
;
}
}
#
endif
