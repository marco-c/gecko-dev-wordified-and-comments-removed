#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
jit
/
AutoWritableJitCode
.
h
"
#
include
"
jit
/
ExecutableAllocator
.
h
"
#
include
"
jit
/
riscv64
/
Assembler
-
riscv64
.
h
"
#
include
"
jit
/
riscv64
/
disasm
/
Disasm
-
riscv64
.
h
"
#
include
"
vm
/
Realm
.
h
"
namespace
js
{
namespace
jit
{
void
Assembler
:
:
RecursiveLi
(
Register
rd
int64_t
val
)
{
if
(
val
>
0
&
&
RecursiveLiImplCount
(
val
)
>
2
)
{
unsigned
LeadingZeros
=
mozilla
:
:
CountLeadingZeroes64
(
(
uint64_t
)
val
)
;
uint64_t
ShiftedVal
=
(
uint64_t
)
val
<
<
LeadingZeros
;
int
countFillZero
=
RecursiveLiImplCount
(
ShiftedVal
)
+
1
;
if
(
countFillZero
<
RecursiveLiImplCount
(
val
)
)
{
RecursiveLiImpl
(
rd
ShiftedVal
)
;
srli
(
rd
rd
LeadingZeros
)
;
return
;
}
}
RecursiveLiImpl
(
rd
val
)
;
}
int
Assembler
:
:
RecursiveLiCount
(
int64_t
val
)
{
if
(
val
>
0
&
&
RecursiveLiImplCount
(
val
)
>
2
)
{
unsigned
LeadingZeros
=
mozilla
:
:
CountLeadingZeroes64
(
(
uint64_t
)
val
)
;
uint64_t
ShiftedVal
=
(
uint64_t
)
val
<
<
LeadingZeros
;
int
countFillZero
=
RecursiveLiImplCount
(
ShiftedVal
)
+
1
;
if
(
countFillZero
<
RecursiveLiImplCount
(
val
)
)
{
return
countFillZero
;
}
}
return
RecursiveLiImplCount
(
val
)
;
}
inline
int64_t
signExtend
(
uint64_t
V
int
N
)
{
return
int64_t
(
V
<
<
(
64
-
N
)
)
>
>
(
64
-
N
)
;
}
void
Assembler
:
:
RecursiveLiImpl
(
Register
rd
int64_t
Val
)
{
if
(
is_int32
(
Val
)
)
{
int64_t
Hi20
=
(
(
Val
+
0x800
)
>
>
12
)
&
0xFFFFF
;
int64_t
Lo12
=
Val
<
<
52
>
>
52
;
if
(
Hi20
)
{
lui
(
rd
(
int32_t
)
Hi20
)
;
}
if
(
Lo12
|
|
Hi20
=
=
0
)
{
if
(
Hi20
)
{
addiw
(
rd
rd
Lo12
)
;
}
else
{
addi
(
rd
zero_reg
Lo12
)
;
}
}
return
;
}
int64_t
Lo12
=
Val
<
<
52
>
>
52
;
int64_t
Hi52
=
(
(
uint64_t
)
Val
+
0x800ull
)
>
>
12
;
int
ShiftAmount
=
12
+
mozilla
:
:
CountTrailingZeroes64
(
(
uint64_t
)
Hi52
)
;
Hi52
=
signExtend
(
Hi52
>
>
(
ShiftAmount
-
12
)
64
-
ShiftAmount
)
;
bool
Unsigned
=
false
;
if
(
ShiftAmount
>
12
&
&
!
is_int12
(
Hi52
)
)
{
if
(
is_int32
(
(
uint64_t
)
Hi52
<
<
12
)
)
{
ShiftAmount
-
=
12
;
Hi52
=
(
uint64_t
)
Hi52
<
<
12
;
}
}
RecursiveLi
(
rd
Hi52
)
;
if
(
Unsigned
)
{
}
else
{
slli
(
rd
rd
ShiftAmount
)
;
}
if
(
Lo12
)
{
addi
(
rd
rd
Lo12
)
;
}
}
int
Assembler
:
:
RecursiveLiImplCount
(
int64_t
Val
)
{
int
count
=
0
;
if
(
is_int32
(
Val
)
)
{
int64_t
Hi20
=
(
(
Val
+
0x800
)
>
>
12
)
&
0xFFFFF
;
int64_t
Lo12
=
Val
<
<
52
>
>
52
;
if
(
Hi20
)
{
count
+
+
;
}
if
(
Lo12
|
|
Hi20
=
=
0
)
{
count
+
+
;
}
return
count
;
}
int64_t
Lo12
=
Val
<
<
52
>
>
52
;
int64_t
Hi52
=
(
(
uint64_t
)
Val
+
0x800ull
)
>
>
12
;
int
ShiftAmount
=
12
+
mozilla
:
:
CountTrailingZeroes64
(
(
uint64_t
)
Hi52
)
;
Hi52
=
signExtend
(
Hi52
>
>
(
ShiftAmount
-
12
)
64
-
ShiftAmount
)
;
bool
Unsigned
=
false
;
if
(
ShiftAmount
>
12
&
&
!
is_int12
(
Hi52
)
)
{
if
(
is_int32
(
(
uint64_t
)
Hi52
<
<
12
)
)
{
ShiftAmount
-
=
12
;
Hi52
=
(
uint64_t
)
Hi52
<
<
12
;
}
}
count
+
=
RecursiveLiImplCount
(
Hi52
)
;
if
(
Unsigned
)
{
}
else
{
count
+
+
;
}
if
(
Lo12
)
{
count
+
+
;
}
return
count
;
}
}
}
