#
ifndef
jit_riscv64_disasm_Disasm_riscv64_h
#
define
jit_riscv64_disasm_Disasm_riscv64_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
<
stdio
.
h
>
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv64
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
util
-
riscv64
.
h
"
namespace
js
{
namespace
jit
{
namespace
disasm
{
typedef
unsigned
char
byte
;
class
NameConverter
{
public
:
virtual
~
NameConverter
(
)
{
}
virtual
const
char
*
NameOfCPURegister
(
int
reg
)
const
;
virtual
const
char
*
NameOfByteCPURegister
(
int
reg
)
const
;
virtual
const
char
*
NameOfXMMRegister
(
int
reg
)
const
;
virtual
const
char
*
NameOfAddress
(
byte
*
addr
)
const
;
virtual
const
char
*
NameOfConstant
(
byte
*
addr
)
const
;
virtual
const
char
*
NameInCode
(
byte
*
addr
)
const
;
protected
:
EmbeddedVector
<
char
128
>
tmp_buffer_
;
}
;
class
Disassembler
{
public
:
explicit
Disassembler
(
const
NameConverter
&
converter
)
;
virtual
~
Disassembler
(
)
;
int
InstructionDecode
(
V8Vector
<
char
>
buffer
uint8_t
*
instruction
)
;
int
ConstantPoolSizeAt
(
byte
*
instruction
)
;
static
void
Disassemble
(
FILE
*
f
uint8_t
*
begin
uint8_t
*
end
)
;
private
:
const
NameConverter
&
converter_
;
Disassembler
(
)
=
delete
;
Disassembler
(
const
Disassembler
&
)
=
delete
;
void
operator
=
(
const
Disassembler
&
)
=
delete
;
}
;
}
}
}
#
endif
