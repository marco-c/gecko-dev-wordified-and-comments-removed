#
ifndef
jit_riscv64_MoveEmitter_riscv64_h
#
define
jit_riscv64_MoveEmitter_riscv64_h
#
include
"
mozilla
/
Assertions
.
h
"
namespace
js
{
namespace
jit
{
class
MacroAssemblerRiscv64
;
class
MoveResolver
;
struct
Register
;
class
MoveEmitterRiscv64
{
uint32_t
inCycle_
;
MacroAssembler
&
masm
;
uint32_t
pushedAtStart_
;
int32_t
pushedAtCycle_
;
Register
spilledReg_
;
FloatRegister
spilledFloatReg_
;
public
:
explicit
MoveEmitterRiscv64
(
MacroAssembler
&
m
)
:
inCycle_
(
0
)
masm
(
m
)
pushedAtStart_
(
masm
.
framePushed
(
)
)
pushedAtCycle_
(
-
1
)
spilledReg_
(
InvalidReg
)
spilledFloatReg_
(
InvalidFloatReg
)
{
}
void
emit
(
const
MoveResolver
&
)
;
void
emit
(
const
MoveOp
&
move
)
;
void
emitMove
(
const
MoveOperand
&
from
const
MoveOperand
&
to
)
;
void
emitInt32Move
(
const
MoveOperand
&
from
const
MoveOperand
&
to
)
;
void
emitFloat32Move
(
const
MoveOperand
&
from
const
MoveOperand
&
to
)
;
void
emitDoubleMove
(
const
MoveOperand
&
from
const
MoveOperand
&
to
)
;
void
finish
(
)
;
void
assertDone
(
)
;
void
setScratchRegister
(
Register
)
{
MOZ_CRASH
(
"
Unimplement
on
riscv
"
)
;
}
Address
cycleSlot
(
uint32_t
slot
uint32_t
subslot
=
0
)
const
;
int32_t
getAdjustedOffset
(
const
MoveOperand
&
operand
)
;
Address
getAdjustedAddress
(
const
MoveOperand
&
operand
)
;
void
breakCycle
(
const
MoveOperand
&
from
const
MoveOperand
&
to
MoveOp
:
:
Type
type
uint32_t
slotId
)
;
void
completeCycle
(
const
MoveOperand
&
from
const
MoveOperand
&
to
MoveOp
:
:
Type
type
uint32_t
slot
)
;
}
;
typedef
MoveEmitterRiscv64
MoveEmitter
;
}
}
#
endif
