#
ifndef
jit_riscv64_constant_Constant_riscv64_h
#
define
jit_riscv64_constant_Constant_riscv64_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
<
stdio
.
h
>
#
include
"
jit
/
riscv64
/
constant
/
Base
-
constant
-
riscv
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
a
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
c
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
d
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
f
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
i
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
m
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
v
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
zicsr
.
h
"
#
include
"
jit
/
riscv64
/
constant
/
Constant
-
riscv
-
zifencei
.
h
"
namespace
js
{
namespace
jit
{
const
int
ReasonableBufferSize
=
256
;
static
constexpr
int
kPcLoadDelta
=
4
;
static
constexpr
int
kBranchOffsetBits
=
13
;
static
constexpr
int
kJumpOffsetBits
=
21
;
static
constexpr
int
kCJalOffsetBits
=
12
;
static
constexpr
int
kCBranchOffsetBits
=
9
;
static
constexpr
int
kMaxBranchOffset
=
(
1
<
<
(
kBranchOffsetBits
-
1
)
)
-
1
;
static
constexpr
int
kCBranchOffset
=
(
1
<
<
(
kCBranchOffsetBits
-
1
)
)
-
1
;
static
constexpr
int
kMaxJumpOffset
=
(
1
<
<
(
kJumpOffsetBits
-
1
)
)
-
1
;
static
constexpr
int
kCJumpOffset
=
(
1
<
<
(
kCJalOffsetBits
-
1
)
)
-
1
;
static
constexpr
int
kTrampolineSlotsSize
=
2
*
kInstrSize
;
static_assert
(
kCJalOffsetBits
=
=
kOffset12
)
;
static_assert
(
kCBranchOffsetBits
=
=
kOffset9
)
;
static_assert
(
kJumpOffsetBits
=
=
kOffset21
)
;
static_assert
(
kBranchOffsetBits
=
=
kOffset13
)
;
}
}
#
endif
