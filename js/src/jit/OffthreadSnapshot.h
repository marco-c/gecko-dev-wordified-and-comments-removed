#
ifndef
jit_OffthreadSnapshot_h
#
define
jit_OffthreadSnapshot_h
#
include
"
gc
/
Policy
.
h
"
#
include
"
gc
/
Tracer
.
h
"
template
<
typename
T
>
class
OffthreadGCPtr
{
T
ptr_
;
public
:
explicit
OffthreadGCPtr
(
const
T
&
ptr
)
:
ptr_
(
ptr
)
{
MOZ_ASSERT
(
JS
:
:
GCPolicy
<
T
>
:
:
isTenured
(
ptr
)
"
OffthreadSnapshot
pointers
must
be
tenured
"
)
;
}
OffthreadGCPtr
(
const
OffthreadGCPtr
<
T
>
&
other
)
=
default
;
operator
T
(
)
const
{
return
ptr_
;
}
T
operator
-
>
(
)
const
{
return
ptr_
;
}
void
init
(
T
&
ptr
)
{
MOZ_ASSERT
(
JS
:
:
GCPolicy
<
T
>
:
:
isTenured
(
ptr
)
"
OffthreadSnapshot
pointers
must
be
tenured
"
)
;
MOZ_ASSERT
(
ptr_
=
=
JS
:
:
SafelyInitialized
<
T
>
:
:
create
(
)
"
init
can
only
be
called
on
empty
OffthreadGCPtr
"
)
;
ptr_
=
ptr
;
}
private
:
OffthreadGCPtr
(
)
=
delete
;
void
operator
=
(
OffthreadGCPtr
<
T
>
&
other
)
=
delete
;
}
;
template
<
typename
T
>
inline
void
TraceOffthreadGCPtr
(
JSTracer
*
trc
const
OffthreadGCPtr
<
T
>
&
thing
const
char
*
name
)
{
T
thingRaw
=
thing
;
js
:
:
TraceManuallyBarrieredEdge
(
trc
&
thingRaw
name
)
;
MOZ_ASSERT
(
static_cast
<
T
>
(
thing
)
=
=
thingRaw
"
Unexpected
moving
GC
!
"
)
;
}
#
endif
