#
ifndef
jit_arm_SharedICHelpers_arm_inl_h
#
define
jit_arm_SharedICHelpers_arm_inl_h
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
SharedICHelpers
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
namespace
js
{
namespace
jit
{
inline
void
EmitBaselineTailCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
uint32_t
argSize
)
{
#
ifdef
DEBUG
static_assert
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
movePtr
(
FramePointer
r0
)
;
masm
.
ma_sub
(
BaselineStackReg
r0
)
;
masm
.
sub32
(
Imm32
(
argSize
)
r0
)
;
Address
frameSizeAddr
(
FramePointer
BaselineFrame
:
:
reverseOffsetOfDebugFrameSize
(
)
)
;
masm
.
store32
(
r0
frameSizeAddr
)
;
#
endif
static_assert
(
ICTailCallReg
=
=
lr
)
;
masm
.
pushFrameDescriptor
(
FrameType
:
:
BaselineJS
)
;
masm
.
push
(
lr
)
;
masm
.
jump
(
target
)
;
}
inline
void
EmitBaselineCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
)
{
masm
.
pushFrameDescriptor
(
FrameType
:
:
BaselineStub
)
;
masm
.
call
(
target
)
;
}
inline
void
EmitBaselineEnterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
{
MOZ_ASSERT
(
scratch
!
=
ICTailCallReg
)
;
#
ifdef
DEBUG
masm
.
mov
(
FramePointer
scratch
)
;
masm
.
ma_sub
(
BaselineStackReg
scratch
)
;
Address
frameSizeAddr
(
FramePointer
BaselineFrame
:
:
reverseOffsetOfDebugFrameSize
(
)
)
;
masm
.
store32
(
scratch
frameSizeAddr
)
;
#
endif
masm
.
PushFrameDescriptor
(
FrameType
:
:
BaselineJS
)
;
masm
.
Push
(
ICTailCallReg
)
;
masm
.
Push
(
FramePointer
)
;
masm
.
mov
(
BaselineStackReg
FramePointer
)
;
masm
.
Push
(
ICStubReg
)
;
masm
.
checkStackAlignment
(
)
;
}
}
}
#
endif
