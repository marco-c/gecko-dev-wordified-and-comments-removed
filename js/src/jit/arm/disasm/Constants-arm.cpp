#
include
"
jit
/
arm
/
disasm
/
Constants
-
arm
.
h
"
#
ifdef
JS_DISASM_ARM
namespace
js
{
namespace
jit
{
namespace
disasm
{
double
Instruction
:
:
DoubleImmedVmov
(
)
const
{
uint64_t
high16
;
high16
=
(
Bits
(
17
16
)
<
<
4
)
|
Bits
(
3
0
)
;
high16
|
=
(
0xff
*
Bit
(
18
)
)
<
<
6
;
high16
|
=
(
Bit
(
18
)
^
1
)
<
<
14
;
high16
|
=
Bit
(
19
)
<
<
15
;
uint64_t
imm
=
high16
<
<
48
;
double
d
;
memcpy
(
&
d
&
imm
8
)
;
return
d
;
}
const
char
*
Registers
:
:
names_
[
kNumRegisters
]
=
{
"
r0
"
"
r1
"
"
r2
"
"
r3
"
"
r4
"
"
r5
"
"
r6
"
"
r7
"
"
r8
"
"
r9
"
"
r10
"
"
fp
"
"
ip
"
"
sp
"
"
lr
"
"
pc
"
}
;
const
Registers
:
:
RegisterAlias
Registers
:
:
aliases_
[
]
=
{
{
10
"
sl
"
}
{
11
"
r11
"
}
{
12
"
r12
"
}
{
13
"
r13
"
}
{
14
"
r14
"
}
{
15
"
r15
"
}
{
kNoRegister
NULL
}
}
;
const
char
*
Registers
:
:
Name
(
int
reg
)
{
const
char
*
result
;
if
(
(
0
<
=
reg
)
&
&
(
reg
<
kNumRegisters
)
)
{
result
=
names_
[
reg
]
;
}
else
{
result
=
"
noreg
"
;
}
return
result
;
}
const
char
*
VFPRegisters
:
:
names_
[
kNumVFPRegisters
]
=
{
"
s0
"
"
s1
"
"
s2
"
"
s3
"
"
s4
"
"
s5
"
"
s6
"
"
s7
"
"
s8
"
"
s9
"
"
s10
"
"
s11
"
"
s12
"
"
s13
"
"
s14
"
"
s15
"
"
s16
"
"
s17
"
"
s18
"
"
s19
"
"
s20
"
"
s21
"
"
s22
"
"
s23
"
"
s24
"
"
s25
"
"
s26
"
"
s27
"
"
s28
"
"
s29
"
"
s30
"
"
s31
"
"
d0
"
"
d1
"
"
d2
"
"
d3
"
"
d4
"
"
d5
"
"
d6
"
"
d7
"
"
d8
"
"
d9
"
"
d10
"
"
d11
"
"
d12
"
"
d13
"
"
d14
"
"
d15
"
"
d16
"
"
d17
"
"
d18
"
"
d19
"
"
d20
"
"
d21
"
"
d22
"
"
d23
"
"
d24
"
"
d25
"
"
d26
"
"
d27
"
"
d28
"
"
d29
"
"
d30
"
"
d31
"
}
;
const
char
*
VFPRegisters
:
:
Name
(
int
reg
bool
is_double
)
{
MOZ_ASSERT
(
(
0
<
=
reg
)
&
&
(
reg
<
kNumVFPRegisters
)
)
;
return
names_
[
reg
+
(
is_double
?
kNumVFPSingleRegisters
:
0
)
]
;
}
int
VFPRegisters
:
:
Number
(
const
char
*
name
bool
*
is_double
)
{
for
(
int
i
=
0
;
i
<
kNumVFPRegisters
;
i
+
+
)
{
if
(
strcmp
(
names_
[
i
]
name
)
=
=
0
)
{
if
(
i
<
kNumVFPSingleRegisters
)
{
*
is_double
=
false
;
return
i
;
}
else
{
*
is_double
=
true
;
return
i
-
kNumVFPSingleRegisters
;
}
}
}
return
kNoRegister
;
}
int
Registers
:
:
Number
(
const
char
*
name
)
{
for
(
int
i
=
0
;
i
<
kNumRegisters
;
i
+
+
)
{
if
(
strcmp
(
names_
[
i
]
name
)
=
=
0
)
{
return
i
;
}
}
int
i
=
0
;
while
(
aliases_
[
i
]
.
reg
!
=
kNoRegister
)
{
if
(
strcmp
(
aliases_
[
i
]
.
name
name
)
=
=
0
)
{
return
aliases_
[
i
]
.
reg
;
}
i
+
+
;
}
return
kNoRegister
;
}
}
}
}
#
endif
