#
ifndef
jit_arm_MacroAssembler_arm_inl_h
#
define
jit_arm_MacroAssembler_arm_inl_h
#
include
"
jit
/
arm
/
MacroAssembler
-
arm
.
h
"
namespace
js
{
namespace
jit
{
void
MacroAssembler
:
:
not32
(
Register
reg
)
{
ma_mvn
(
reg
reg
)
;
}
void
MacroAssembler
:
:
and32
(
Register
src
Register
dest
)
{
ma_and
(
src
dest
SetCC
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
Register
dest
)
{
ma_and
(
imm
dest
SetCC
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
dest
scratch
)
;
ma_and
(
imm
scratch
)
;
store32
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
and32
(
const
Address
&
src
Register
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
src
scratch
)
;
ma_and
(
scratch
dest
SetCC
)
;
}
void
MacroAssembler
:
:
andPtr
(
Register
src
Register
dest
)
{
ma_and
(
src
dest
)
;
}
void
MacroAssembler
:
:
andPtr
(
Imm32
imm
Register
dest
)
{
ma_and
(
imm
dest
)
;
}
void
MacroAssembler
:
:
and64
(
Imm64
imm
Register64
dest
)
{
and32
(
Imm32
(
imm
.
value
&
0xFFFFFFFFL
)
dest
.
low
)
;
and32
(
Imm32
(
(
imm
.
value
>
>
32
)
&
0xFFFFFFFFL
)
dest
.
high
)
;
}
void
MacroAssembler
:
:
or32
(
Register
src
Register
dest
)
{
ma_orr
(
src
dest
)
;
}
void
MacroAssembler
:
:
or32
(
Imm32
imm
Register
dest
)
{
ma_orr
(
imm
dest
)
;
}
void
MacroAssembler
:
:
or32
(
Imm32
imm
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
dest
scratch
)
;
ma_orr
(
imm
scratch
)
;
store32
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
orPtr
(
Register
src
Register
dest
)
{
ma_orr
(
src
dest
)
;
}
void
MacroAssembler
:
:
orPtr
(
Imm32
imm
Register
dest
)
{
ma_orr
(
imm
dest
)
;
}
void
MacroAssembler
:
:
or64
(
Register64
src
Register64
dest
)
{
or32
(
src
.
low
dest
.
low
)
;
or32
(
src
.
high
dest
.
high
)
;
}
void
MacroAssembler
:
:
xor64
(
Register64
src
Register64
dest
)
{
ma_eor
(
src
.
low
dest
.
low
)
;
ma_eor
(
src
.
high
dest
.
high
)
;
}
void
MacroAssembler
:
:
xor32
(
Imm32
imm
Register
dest
)
{
ma_eor
(
imm
dest
SetCC
)
;
}
void
MacroAssembler
:
:
xorPtr
(
Register
src
Register
dest
)
{
ma_eor
(
src
dest
)
;
}
void
MacroAssembler
:
:
xorPtr
(
Imm32
imm
Register
dest
)
{
ma_eor
(
imm
dest
)
;
}
void
MacroAssembler
:
:
add32
(
Register
src
Register
dest
)
{
ma_add
(
src
dest
SetCC
)
;
}
void
MacroAssembler
:
:
add32
(
Imm32
imm
Register
dest
)
{
ma_add
(
imm
dest
SetCC
)
;
}
void
MacroAssembler
:
:
add32
(
Imm32
imm
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
dest
scratch
)
;
ma_add
(
imm
scratch
SetCC
)
;
store32
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
addPtr
(
Register
src
Register
dest
)
{
ma_add
(
src
dest
)
;
}
void
MacroAssembler
:
:
addPtr
(
Imm32
imm
Register
dest
)
{
ma_add
(
imm
dest
)
;
}
void
MacroAssembler
:
:
addPtr
(
ImmWord
imm
Register
dest
)
{
addPtr
(
Imm32
(
imm
.
value
)
dest
)
;
}
void
MacroAssembler
:
:
addPtr
(
Imm32
imm
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
loadPtr
(
dest
scratch
)
;
addPtr
(
imm
scratch
)
;
storePtr
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
addPtr
(
const
Address
&
src
Register
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
src
scratch
)
;
ma_add
(
scratch
dest
SetCC
)
;
}
void
MacroAssembler
:
:
add64
(
Register64
src
Register64
dest
)
{
ma_add
(
src
.
low
dest
.
low
SetCC
)
;
ma_adc
(
src
.
high
dest
.
high
)
;
}
void
MacroAssembler
:
:
add64
(
Imm32
imm
Register64
dest
)
{
ma_add
(
imm
dest
.
low
SetCC
)
;
ma_adc
(
Imm32
(
0
)
dest
.
high
LeaveCC
)
;
}
void
MacroAssembler
:
:
addDouble
(
FloatRegister
src
FloatRegister
dest
)
{
ma_vadd
(
dest
src
dest
)
;
}
void
MacroAssembler
:
:
sub32
(
Register
src
Register
dest
)
{
ma_sub
(
src
dest
SetCC
)
;
}
void
MacroAssembler
:
:
sub32
(
Imm32
imm
Register
dest
)
{
ma_sub
(
imm
dest
SetCC
)
;
}
void
MacroAssembler
:
:
sub32
(
const
Address
&
src
Register
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
src
scratch
)
;
ma_sub
(
scratch
dest
SetCC
)
;
}
void
MacroAssembler
:
:
subPtr
(
Register
src
Register
dest
)
{
ma_sub
(
src
dest
)
;
}
void
MacroAssembler
:
:
subPtr
(
Register
src
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
loadPtr
(
dest
scratch
)
;
ma_sub
(
src
scratch
)
;
storePtr
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
subPtr
(
Imm32
imm
Register
dest
)
{
ma_sub
(
imm
dest
)
;
}
void
MacroAssembler
:
:
subPtr
(
const
Address
&
addr
Register
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
loadPtr
(
addr
scratch
)
;
ma_sub
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
subDouble
(
FloatRegister
src
FloatRegister
dest
)
{
ma_vsub
(
dest
src
dest
)
;
}
void
MacroAssembler
:
:
mul64
(
Imm64
imm
const
Register64
&
dest
)
{
ma_mov
(
Imm32
(
imm
.
value
&
0xFFFFFFFFL
)
ScratchRegister
)
;
as_mul
(
dest
.
high
dest
.
high
ScratchRegister
)
;
as_umull
(
secondScratchReg_
ScratchRegister
dest
.
low
ScratchRegister
)
;
as_add
(
dest
.
high
dest
.
high
O2Reg
(
secondScratchReg_
)
)
;
if
(
(
(
imm
.
value
>
>
32
)
&
0xFFFFFFFFL
)
=
=
5
)
as_add
(
secondScratchReg_
dest
.
low
lsl
(
dest
.
low
2
)
)
;
else
MOZ_CRASH
(
"
Not
supported
imm
"
)
;
as_add
(
dest
.
high
dest
.
high
O2Reg
(
secondScratchReg_
)
)
;
ma_mov
(
ScratchRegister
dest
.
low
)
;
}
void
MacroAssembler
:
:
mulBy3
(
Register
src
Register
dest
)
{
as_add
(
dest
src
lsl
(
src
1
)
)
;
}
void
MacroAssembler
:
:
mulDouble
(
FloatRegister
src
FloatRegister
dest
)
{
ma_vmul
(
dest
src
dest
)
;
}
void
MacroAssembler
:
:
mulDoublePtr
(
ImmPtr
imm
Register
temp
FloatRegister
dest
)
{
movePtr
(
imm
ScratchRegister
)
;
loadDouble
(
Address
(
ScratchRegister
0
)
ScratchDoubleReg
)
;
mulDouble
(
ScratchDoubleReg
dest
)
;
}
void
MacroAssembler
:
:
lshiftPtr
(
Imm32
imm
Register
dest
)
{
ma_lsl
(
imm
dest
dest
)
;
}
void
MacroAssembler
:
:
lshift64
(
Imm32
imm
Register64
dest
)
{
as_mov
(
dest
.
high
lsl
(
dest
.
high
imm
.
value
)
)
;
as_orr
(
dest
.
high
dest
.
high
lsr
(
dest
.
low
32
-
imm
.
value
)
)
;
as_mov
(
dest
.
low
lsl
(
dest
.
low
imm
.
value
)
)
;
}
void
MacroAssembler
:
:
rshiftPtr
(
Imm32
imm
Register
dest
)
{
ma_lsr
(
imm
dest
dest
)
;
}
void
MacroAssembler
:
:
rshiftPtrArithmetic
(
Imm32
imm
Register
dest
)
{
ma_asr
(
imm
dest
dest
)
;
}
void
MacroAssembler
:
:
rshift64
(
Imm32
imm
Register64
dest
)
{
as_mov
(
dest
.
low
lsr
(
dest
.
low
imm
.
value
)
)
;
as_orr
(
dest
.
low
dest
.
low
lsl
(
dest
.
high
32
-
imm
.
value
)
)
;
as_mov
(
dest
.
high
lsr
(
dest
.
high
imm
.
value
)
)
;
}
template
<
typename
T
>
void
MacroAssemblerARMCompat
:
:
branchAdd32
(
Condition
cond
T
src
Register
dest
Label
*
label
)
{
asMasm
(
)
.
add32
(
src
dest
)
;
j
(
cond
label
)
;
}
void
MacroAssemblerARMCompat
:
:
incrementInt32Value
(
const
Address
&
addr
)
{
asMasm
(
)
.
add32
(
Imm32
(
1
)
ToPayload
(
addr
)
)
;
}
void
MacroAssemblerARMCompat
:
:
decBranchPtr
(
Condition
cond
Register
lhs
Imm32
imm
Label
*
label
)
{
asMasm
(
)
.
subPtr
(
imm
lhs
)
;
branch32
(
cond
lhs
Imm32
(
0
)
label
)
;
}
}
}
#
endif
