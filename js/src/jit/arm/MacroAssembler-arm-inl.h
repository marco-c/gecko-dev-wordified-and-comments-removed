#
ifndef
jit_arm_MacroAssembler_arm_inl_h
#
define
jit_arm_MacroAssembler_arm_inl_h
#
include
"
jit
/
arm
/
MacroAssembler
-
arm
.
h
"
namespace
js
{
namespace
jit
{
void
MacroAssembler
:
:
and32
(
Register
src
Register
dest
)
{
ma_and
(
src
dest
SetCC
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
Register
dest
)
{
ma_and
(
imm
dest
SetCC
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
const
Address
&
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
dest
scratch
)
;
ma_and
(
imm
scratch
)
;
store32
(
scratch
dest
)
;
}
void
MacroAssembler
:
:
and32
(
const
Address
&
src
Register
dest
)
{
ScratchRegisterScope
scratch
(
*
this
)
;
load32
(
src
scratch
)
;
ma_and
(
scratch
dest
SetCC
)
;
}
void
MacroAssemblerARMCompat
:
:
and64
(
Imm64
imm
Register64
dest
)
{
asMasm
(
)
.
and32
(
Imm32
(
imm
.
value
&
0xFFFFFFFFL
)
dest
.
low
)
;
asMasm
(
)
.
and32
(
Imm32
(
(
imm
.
value
>
>
32
)
&
0xFFFFFFFFL
)
dest
.
high
)
;
}
}
}
#
endif
