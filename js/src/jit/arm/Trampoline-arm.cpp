#
include
"
jit
/
arm
/
SharedICHelpers
-
arm
.
h
"
#
include
"
jit
/
Bailouts
.
h
"
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
CalleeToken
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
jit
/
PerfSpewer
.
h
"
#
include
"
jit
/
VMFunctions
.
h
"
#
include
"
vm
/
JitActivation
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
static
const
FloatRegisterSet
NonVolatileFloatRegs
=
FloatRegisterSet
(
(
1ULL
<
<
FloatRegisters
:
:
d8
)
|
(
1ULL
<
<
FloatRegisters
:
:
d9
)
|
(
1ULL
<
<
FloatRegisters
:
:
d10
)
|
(
1ULL
<
<
FloatRegisters
:
:
d11
)
|
(
1ULL
<
<
FloatRegisters
:
:
d12
)
|
(
1ULL
<
<
FloatRegisters
:
:
d13
)
|
(
1ULL
<
<
FloatRegisters
:
:
d14
)
|
(
1ULL
<
<
FloatRegisters
:
:
d15
)
)
;
static
void
GenerateReturn
(
MacroAssembler
&
masm
int
returnCode
)
{
masm
.
transferMultipleByRuns
(
NonVolatileFloatRegs
IsLoad
StackPointer
IA
)
;
masm
.
addPtr
(
Imm32
(
sizeof
(
void
*
)
)
sp
)
;
masm
.
ma_mov
(
Imm32
(
returnCode
)
r0
)
;
masm
.
startDataTransferM
(
IsLoad
sp
IA
WriteBack
)
;
masm
.
transferReg
(
r4
)
;
masm
.
transferReg
(
r5
)
;
masm
.
transferReg
(
r6
)
;
masm
.
transferReg
(
r7
)
;
masm
.
transferReg
(
r8
)
;
masm
.
transferReg
(
r9
)
;
masm
.
transferReg
(
r10
)
;
masm
.
transferReg
(
r11
)
;
masm
.
transferReg
(
pc
)
;
masm
.
finishDataTransfer
(
)
;
masm
.
flushBuffer
(
)
;
}
struct
EnterJITStack
{
double
d8
;
double
d9
;
double
d10
;
double
d11
;
double
d12
;
double
d13
;
double
d14
;
double
d15
;
void
*
padding
;
void
*
r4
;
void
*
r5
;
void
*
r6
;
void
*
r7
;
void
*
r8
;
void
*
r9
;
void
*
r10
;
void
*
r11
;
void
*
lr
;
CalleeToken
token
;
JSObject
*
scopeChain
;
size_t
numStackValues
;
Value
*
vp
;
}
;
void
JitRuntime
:
:
generateEnterJIT
(
JSContext
*
cx
MacroAssembler
&
masm
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateEnterJIT
"
)
;
enterJITOffset_
=
startTrampolineCode
(
masm
)
;
const
Address
slot_token
(
sp
offsetof
(
EnterJITStack
token
)
)
;
const
Address
slot_vp
(
sp
offsetof
(
EnterJITStack
vp
)
)
;
static_assert
(
OsrFrameReg
=
=
r3
)
;
Assembler
*
aasm
=
&
masm
;
masm
.
startDataTransferM
(
IsStore
sp
DB
WriteBack
)
;
masm
.
transferReg
(
r4
)
;
masm
.
transferReg
(
r5
)
;
masm
.
transferReg
(
r6
)
;
masm
.
transferReg
(
r7
)
;
masm
.
transferReg
(
r8
)
;
masm
.
transferReg
(
r9
)
;
masm
.
transferReg
(
r10
)
;
masm
.
transferReg
(
r11
)
;
masm
.
transferReg
(
lr
)
;
masm
.
finishDataTransfer
(
)
;
masm
.
subPtr
(
Imm32
(
sizeof
(
void
*
)
)
sp
)
;
masm
.
transferMultipleByRuns
(
NonVolatileFloatRegs
IsStore
sp
DB
)
;
masm
.
loadPtr
(
slot_token
r9
)
;
masm
.
movePtr
(
sp
r11
)
;
masm
.
loadPtr
(
slot_vp
r10
)
;
masm
.
unboxInt32
(
Address
(
r10
0
)
r10
)
;
{
Label
noNewTarget
;
masm
.
branchTest32
(
Assembler
:
:
Zero
r9
Imm32
(
CalleeToken_FunctionConstructing
)
&
noNewTarget
)
;
masm
.
add32
(
Imm32
(
1
)
r1
)
;
masm
.
bind
(
&
noNewTarget
)
;
}
aasm
-
>
as_sub
(
r4
sp
O2RegImmShift
(
r1
LSL
3
)
)
;
aasm
-
>
as_bic
(
r4
r4
Imm8
(
JitStackAlignment
-
1
)
)
;
static_assert
(
sizeof
(
JitFrameLayout
)
%
JitStackAlignment
=
=
0
"
No
need
to
consider
the
JitFrameLayout
for
aligning
the
stack
"
)
;
masm
.
movePtr
(
r4
sp
)
;
aasm
-
>
as_mov
(
r5
O2Reg
(
r1
)
SetCC
)
;
{
Label
header
footer
;
aasm
-
>
as_b
(
&
footer
Assembler
:
:
Zero
)
;
masm
.
bind
(
&
header
)
;
aasm
-
>
as_sub
(
r5
r5
Imm8
(
1
)
SetCC
)
;
aasm
-
>
as_extdtr
(
IsLoad
64
true
PostIndex
r6
EDtrAddr
(
r2
EDtrOffImm
(
8
)
)
)
;
aasm
-
>
as_extdtr
(
IsStore
64
true
PostIndex
r6
EDtrAddr
(
r4
EDtrOffImm
(
8
)
)
)
;
aasm
-
>
as_b
(
&
header
Assembler
:
:
NonZero
)
;
masm
.
bind
(
&
footer
)
;
}
masm
.
push
(
r9
)
;
masm
.
pushFrameDescriptorForJitCall
(
FrameType
:
:
CppToJSJit
r10
r10
)
;
Label
returnLabel
;
{
AllocatableGeneralRegisterSet
regs
(
GeneralRegisterSet
:
:
All
(
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
r11
)
)
;
regs
.
take
(
OsrFrameReg
)
;
regs
.
take
(
r0
)
;
MOZ_ASSERT
(
!
regs
.
has
(
ReturnReg
)
"
ReturnReg
matches
r0
"
)
;
const
Address
slot_numStackValues
(
r11
offsetof
(
EnterJITStack
numStackValues
)
)
;
Label
notOsr
;
masm
.
branchTestPtr
(
Assembler
:
:
Zero
OsrFrameReg
OsrFrameReg
&
notOsr
)
;
Register
scratch
=
regs
.
takeAny
(
)
;
Register
numStackValues
=
regs
.
takeAny
(
)
;
masm
.
load32
(
slot_numStackValues
numStackValues
)
;
{
AutoForbidPoolsAndNops
afp
(
&
masm
5
)
;
Label
skipJump
;
masm
.
mov
(
pc
scratch
)
;
masm
.
addPtr
(
Imm32
(
2
*
sizeof
(
uint32_t
)
)
scratch
)
;
masm
.
push
(
scratch
)
;
masm
.
jump
(
&
skipJump
)
;
masm
.
jump
(
&
returnLabel
)
;
masm
.
bind
(
&
skipJump
)
;
}
masm
.
push
(
FramePointer
)
;
masm
.
mov
(
sp
FramePointer
)
;
masm
.
subPtr
(
Imm32
(
BaselineFrame
:
:
Size
(
)
)
sp
)
;
Register
framePtrScratch
=
regs
.
takeAny
(
)
;
masm
.
touchFrameValues
(
numStackValues
scratch
framePtrScratch
)
;
masm
.
mov
(
sp
framePtrScratch
)
;
masm
.
ma_lsl
(
Imm32
(
3
)
numStackValues
scratch
)
;
masm
.
ma_sub
(
sp
scratch
sp
)
;
masm
.
pushFrameDescriptor
(
FrameType
:
:
BaselineJS
)
;
masm
.
push
(
Imm32
(
0
)
)
;
masm
.
push
(
FramePointer
)
;
masm
.
loadJSContext
(
scratch
)
;
masm
.
enterFakeExitFrame
(
scratch
scratch
ExitFrameType
:
:
Bare
)
;
masm
.
push
(
r0
)
;
using
Fn
=
bool
(
*
)
(
BaselineFrame
*
frame
InterpreterFrame
*
interpFrame
uint32_t
numStackValues
)
;
masm
.
setupUnalignedABICall
(
scratch
)
;
masm
.
passABIArg
(
framePtrScratch
)
;
masm
.
passABIArg
(
OsrFrameReg
)
;
masm
.
passABIArg
(
numStackValues
)
;
masm
.
callWithABI
<
Fn
jit
:
:
InitBaselineFrameForOsr
>
(
MoveOp
:
:
GENERAL
CheckUnsafeCallWithABI
:
:
DontCheckHasExitFrame
)
;
Register
jitcode
=
regs
.
takeAny
(
)
;
masm
.
pop
(
jitcode
)
;
MOZ_ASSERT
(
jitcode
!
=
ReturnReg
)
;
Label
error
;
masm
.
addPtr
(
Imm32
(
ExitFrameLayout
:
:
SizeWithFooter
(
)
)
sp
)
;
masm
.
branchIfFalseBool
(
ReturnReg
&
error
)
;
{
Label
skipProfilingInstrumentation
;
AbsoluteAddress
addressOfEnabled
(
cx
-
>
runtime
(
)
-
>
geckoProfiler
(
)
.
addressOfEnabled
(
)
)
;
masm
.
branch32
(
Assembler
:
:
Equal
addressOfEnabled
Imm32
(
0
)
&
skipProfilingInstrumentation
)
;
masm
.
profilerEnterFrame
(
FramePointer
scratch
)
;
masm
.
bind
(
&
skipProfilingInstrumentation
)
;
}
masm
.
jump
(
jitcode
)
;
masm
.
bind
(
&
error
)
;
masm
.
mov
(
FramePointer
sp
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
addPtr
(
Imm32
(
sizeof
(
uintptr_t
)
)
sp
)
;
masm
.
moveValue
(
MagicValue
(
JS_ION_ERROR
)
JSReturnOperand
)
;
masm
.
jump
(
&
returnLabel
)
;
masm
.
bind
(
&
notOsr
)
;
MOZ_ASSERT
(
R1
.
scratchReg
(
)
!
=
r0
)
;
masm
.
loadPtr
(
Address
(
r11
offsetof
(
EnterJITStack
scopeChain
)
)
R1
.
scratchReg
(
)
)
;
}
masm
.
assertStackAlignment
(
JitStackAlignment
2
*
sizeof
(
uintptr_t
)
)
;
masm
.
callJitNoProfiler
(
r0
)
;
masm
.
bind
(
&
returnLabel
)
;
masm
.
mov
(
r11
sp
)
;
masm
.
loadPtr
(
slot_vp
r5
)
;
masm
.
storeValue
(
JSReturnOperand
Address
(
r5
0
)
)
;
GenerateReturn
(
masm
true
)
;
}
mozilla
:
:
Maybe
<
:
:
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
>
JitRuntime
:
:
getCppEntryRegisters
(
JitFrameLayout
*
frameStackAddress
)
{
return
mozilla
:
:
Nothing
{
}
;
}
void
JitRuntime
:
:
generateInvalidator
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateInvalidator
"
)
;
invalidatorOffset_
=
startTrampolineCode
(
masm
)
;
masm
.
as_bic
(
sp
sp
Imm8
(
7
)
)
;
masm
.
startDataTransferM
(
IsStore
sp
DB
WriteBack
)
;
for
(
uint32_t
i
=
0
;
i
<
Registers
:
:
Total
;
i
+
+
)
{
masm
.
transferReg
(
Register
:
:
FromCode
(
i
)
)
;
}
masm
.
finishDataTransfer
(
)
;
if
(
FloatRegisters
:
:
ActualTotalPhys
(
)
!
=
FloatRegisters
:
:
TotalPhys
)
{
ScratchRegisterScope
scratch
(
masm
)
;
int
missingRegs
=
FloatRegisters
:
:
TotalPhys
-
FloatRegisters
:
:
ActualTotalPhys
(
)
;
masm
.
ma_sub
(
Imm32
(
missingRegs
*
sizeof
(
double
)
)
sp
scratch
)
;
}
masm
.
startFloatTransferM
(
IsStore
sp
DB
WriteBack
)
;
for
(
uint32_t
i
=
0
;
i
<
FloatRegisters
:
:
ActualTotalPhys
(
)
;
i
+
+
)
{
masm
.
transferFloatReg
(
FloatRegister
(
i
FloatRegister
:
:
Double
)
)
;
}
masm
.
finishFloatTransfer
(
)
;
masm
.
ma_mov
(
sp
r0
)
;
masm
.
reserveStack
(
sizeof
(
void
*
)
*
2
)
;
masm
.
mov
(
sp
r1
)
;
using
Fn
=
bool
(
*
)
(
InvalidationBailoutStack
*
sp
BaselineBailoutInfo
*
*
info
)
;
masm
.
setupAlignedABICall
(
)
;
masm
.
passABIArg
(
r0
)
;
masm
.
passABIArg
(
r1
)
;
masm
.
callWithABI
<
Fn
InvalidationBailout
>
(
MoveOp
:
:
GENERAL
CheckUnsafeCallWithABI
:
:
DontCheckOther
)
;
masm
.
pop
(
r2
)
;
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
jump
(
bailoutTail
)
;
}
void
JitRuntime
:
:
generateArgumentsRectifier
(
MacroAssembler
&
masm
ArgumentsRectifierKind
kind
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateArgumentsRectifier
"
)
;
switch
(
kind
)
{
case
ArgumentsRectifierKind
:
:
Normal
:
argumentsRectifierOffset_
=
startTrampolineCode
(
masm
)
;
break
;
case
ArgumentsRectifierKind
:
:
TrialInlining
:
trialInliningArgumentsRectifierOffset_
=
startTrampolineCode
(
masm
)
;
break
;
}
masm
.
pushReturnAddress
(
)
;
masm
.
push
(
FramePointer
)
;
masm
.
mov
(
StackPointer
FramePointer
)
;
static_assert
(
JitStackAlignment
=
=
sizeof
(
Value
)
)
;
masm
.
loadNumActualArgs
(
FramePointer
r0
)
;
masm
.
mov
(
r0
r8
)
;
masm
.
loadPtr
(
Address
(
FramePointer
RectifierFrameLayout
:
:
offsetOfCalleeToken
(
)
)
r1
)
;
{
ScratchRegisterScope
scratch
(
masm
)
;
masm
.
ma_and
(
Imm32
(
CalleeTokenMask
)
r1
r6
scratch
)
;
}
masm
.
loadFunctionArgCount
(
r6
r6
)
;
masm
.
ma_sub
(
r6
r8
r2
)
;
{
ScratchRegisterScope
scratch
(
masm
)
;
masm
.
ma_alu
(
sp
lsl
(
r8
3
)
r3
OpAdd
)
;
masm
.
ma_add
(
r3
Imm32
(
sizeof
(
RectifierFrameLayout
)
)
r3
scratch
)
;
}
{
Label
notConstructing
;
masm
.
branchTest32
(
Assembler
:
:
Zero
r1
Imm32
(
CalleeToken_FunctionConstructing
)
&
notConstructing
)
;
masm
.
as_extdtr
(
IsLoad
64
true
Offset
r4
EDtrAddr
(
r3
EDtrOffImm
(
8
)
)
)
;
masm
.
as_extdtr
(
IsStore
64
true
PreIndex
r4
EDtrAddr
(
sp
EDtrOffImm
(
-
8
)
)
)
;
masm
.
bind
(
&
notConstructing
)
;
}
masm
.
moveValue
(
UndefinedValue
(
)
ValueOperand
(
r5
r4
)
)
;
{
Label
undefLoopTop
;
masm
.
bind
(
&
undefLoopTop
)
;
masm
.
as_extdtr
(
IsStore
64
true
PreIndex
r4
EDtrAddr
(
sp
EDtrOffImm
(
-
8
)
)
)
;
masm
.
as_sub
(
r2
r2
Imm8
(
1
)
SetCC
)
;
masm
.
ma_b
(
&
undefLoopTop
Assembler
:
:
NonZero
)
;
}
{
Label
copyLoopTop
;
masm
.
bind
(
&
copyLoopTop
)
;
masm
.
as_extdtr
(
IsLoad
64
true
PostIndex
r4
EDtrAddr
(
r3
EDtrOffImm
(
-
8
)
)
)
;
masm
.
as_extdtr
(
IsStore
64
true
PreIndex
r4
EDtrAddr
(
sp
EDtrOffImm
(
-
8
)
)
)
;
masm
.
as_sub
(
r8
r8
Imm8
(
1
)
SetCC
)
;
masm
.
ma_b
(
&
copyLoopTop
Assembler
:
:
NotSigned
)
;
}
masm
.
ma_push
(
r1
)
;
masm
.
pushFrameDescriptorForJitCall
(
FrameType
:
:
Rectifier
r0
r0
)
;
masm
.
andPtr
(
Imm32
(
CalleeTokenMask
)
r1
)
;
switch
(
kind
)
{
case
ArgumentsRectifierKind
:
:
Normal
:
masm
.
loadJitCodeRaw
(
r1
r3
)
;
argumentsRectifierReturnOffset_
=
masm
.
callJitNoProfiler
(
r3
)
;
break
;
case
ArgumentsRectifierKind
:
:
TrialInlining
:
Label
noBaselineScript
done
;
masm
.
loadBaselineJitCodeRaw
(
r1
r3
&
noBaselineScript
)
;
masm
.
callJitNoProfiler
(
r3
)
;
masm
.
jump
(
&
done
)
;
masm
.
bind
(
&
noBaselineScript
)
;
masm
.
loadJitCodeRaw
(
r1
r3
)
;
masm
.
callJitNoProfiler
(
r3
)
;
masm
.
bind
(
&
done
)
;
break
;
}
masm
.
mov
(
FramePointer
StackPointer
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
ret
(
)
;
}
static
void
PushBailoutFrame
(
MacroAssembler
&
masm
Register
spArg
)
{
#
ifdef
ENABLE_WASM_SIMD
#
error
"
Needs
more
careful
logic
if
SIMD
is
enabled
"
#
endif
masm
.
startDataTransferM
(
IsStore
sp
DB
WriteBack
)
;
for
(
uint32_t
i
=
0
;
i
<
Registers
:
:
Total
;
i
+
+
)
{
masm
.
transferReg
(
Register
:
:
FromCode
(
i
)
)
;
}
masm
.
finishDataTransfer
(
)
;
ScratchRegisterScope
scratch
(
masm
)
;
if
(
FloatRegisters
:
:
ActualTotalPhys
(
)
!
=
FloatRegisters
:
:
TotalPhys
)
{
int
missingRegs
=
FloatRegisters
:
:
TotalPhys
-
FloatRegisters
:
:
ActualTotalPhys
(
)
;
masm
.
ma_sub
(
Imm32
(
missingRegs
*
sizeof
(
double
)
)
sp
scratch
)
;
}
masm
.
startFloatTransferM
(
IsStore
sp
DB
WriteBack
)
;
for
(
uint32_t
i
=
0
;
i
<
FloatRegisters
:
:
ActualTotalPhys
(
)
;
i
+
+
)
{
masm
.
transferFloatReg
(
FloatRegister
(
i
FloatRegister
:
:
Double
)
)
;
}
masm
.
finishFloatTransfer
(
)
;
masm
.
ma_mov
(
sp
spArg
)
;
}
static
void
GenerateBailoutThunk
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
PushBailoutFrame
(
masm
r0
)
;
masm
.
reserveStack
(
sizeof
(
void
*
)
)
;
masm
.
mov
(
sp
r1
)
;
using
Fn
=
bool
(
*
)
(
BailoutStack
*
sp
BaselineBailoutInfo
*
*
info
)
;
masm
.
setupAlignedABICall
(
)
;
masm
.
passABIArg
(
r0
)
;
masm
.
passABIArg
(
r1
)
;
masm
.
callWithABI
<
Fn
Bailout
>
(
MoveOp
:
:
GENERAL
CheckUnsafeCallWithABI
:
:
DontCheckOther
)
;
masm
.
pop
(
r2
)
;
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
jump
(
bailoutTail
)
;
}
void
JitRuntime
:
:
generateBailoutHandler
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateBailoutHandler
"
)
;
bailoutHandlerOffset_
=
startTrampolineCode
(
masm
)
;
GenerateBailoutThunk
(
masm
bailoutTail
)
;
}
bool
JitRuntime
:
:
generateVMWrapper
(
JSContext
*
cx
MacroAssembler
&
masm
const
VMFunctionData
&
f
DynFn
nativeFun
uint32_t
*
wrapperOffset
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateVMWrapper
"
)
;
*
wrapperOffset
=
startTrampolineCode
(
masm
)
;
AllocatableGeneralRegisterSet
regs
(
Register
:
:
Codes
:
:
WrapperMask
)
;
static_assert
(
(
Register
:
:
Codes
:
:
VolatileMask
&
~
Register
:
:
Codes
:
:
WrapperMask
)
=
=
0
"
Wrapper
register
set
must
be
a
superset
of
Volatile
register
set
.
"
)
;
Register
cxreg
=
r0
;
regs
.
take
(
cxreg
)
;
masm
.
pushReturnAddress
(
)
;
masm
.
Push
(
FramePointer
)
;
masm
.
moveStackPtrTo
(
FramePointer
)
;
masm
.
loadJSContext
(
cxreg
)
;
masm
.
enterExitFrame
(
cxreg
regs
.
getAny
(
)
&
f
)
;
Register
argsBase
=
InvalidReg
;
if
(
f
.
explicitArgs
)
{
argsBase
=
r5
;
regs
.
take
(
argsBase
)
;
ScratchRegisterScope
scratch
(
masm
)
;
masm
.
ma_add
(
sp
Imm32
(
ExitFrameLayout
:
:
SizeWithFooter
(
)
)
argsBase
scratch
)
;
}
Register
outReg
=
InvalidReg
;
switch
(
f
.
outParam
)
{
case
Type_Value
:
outReg
=
r4
;
regs
.
take
(
outReg
)
;
masm
.
reserveStack
(
sizeof
(
Value
)
)
;
masm
.
ma_mov
(
sp
outReg
)
;
break
;
case
Type_Handle
:
outReg
=
r4
;
regs
.
take
(
outReg
)
;
masm
.
PushEmptyRooted
(
f
.
outParamRootType
)
;
masm
.
ma_mov
(
sp
outReg
)
;
break
;
case
Type_Int32
:
case
Type_Pointer
:
case
Type_Bool
:
outReg
=
r4
;
regs
.
take
(
outReg
)
;
masm
.
reserveStack
(
sizeof
(
int32_t
)
)
;
masm
.
ma_mov
(
sp
outReg
)
;
break
;
case
Type_Double
:
outReg
=
r4
;
regs
.
take
(
outReg
)
;
masm
.
reserveStack
(
sizeof
(
double
)
)
;
masm
.
ma_mov
(
sp
outReg
)
;
break
;
default
:
MOZ_ASSERT
(
f
.
outParam
=
=
Type_Void
)
;
break
;
}
masm
.
setupUnalignedABICall
(
regs
.
getAny
(
)
)
;
masm
.
passABIArg
(
cxreg
)
;
size_t
argDisp
=
0
;
for
(
uint32_t
explicitArg
=
0
;
explicitArg
<
f
.
explicitArgs
;
explicitArg
+
+
)
{
switch
(
f
.
argProperties
(
explicitArg
)
)
{
case
VMFunctionData
:
:
WordByValue
:
masm
.
passABIArg
(
MoveOperand
(
argsBase
argDisp
)
MoveOp
:
:
GENERAL
)
;
argDisp
+
=
sizeof
(
void
*
)
;
break
;
case
VMFunctionData
:
:
DoubleByValue
:
MOZ_ASSERT
(
f
.
argPassedInFloatReg
(
explicitArg
)
)
;
masm
.
passABIArg
(
MoveOperand
(
argsBase
argDisp
)
MoveOp
:
:
DOUBLE
)
;
argDisp
+
=
sizeof
(
double
)
;
break
;
case
VMFunctionData
:
:
WordByRef
:
masm
.
passABIArg
(
MoveOperand
(
argsBase
argDisp
MoveOperand
:
:
Kind
:
:
EffectiveAddress
)
MoveOp
:
:
GENERAL
)
;
argDisp
+
=
sizeof
(
void
*
)
;
break
;
case
VMFunctionData
:
:
DoubleByRef
:
masm
.
passABIArg
(
MoveOperand
(
argsBase
argDisp
MoveOperand
:
:
Kind
:
:
EffectiveAddress
)
MoveOp
:
:
GENERAL
)
;
argDisp
+
=
2
*
sizeof
(
void
*
)
;
break
;
}
}
if
(
outReg
!
=
InvalidReg
)
{
masm
.
passABIArg
(
outReg
)
;
}
masm
.
callWithABI
(
nativeFun
MoveOp
:
:
GENERAL
CheckUnsafeCallWithABI
:
:
DontCheckHasExitFrame
)
;
switch
(
f
.
failType
(
)
)
{
case
Type_Cell
:
masm
.
branchTestPtr
(
Assembler
:
:
Zero
r0
r0
masm
.
failureLabel
(
)
)
;
break
;
case
Type_Bool
:
masm
.
branchIfFalseBool
(
r0
masm
.
failureLabel
(
)
)
;
break
;
case
Type_Void
:
break
;
default
:
MOZ_CRASH
(
"
unknown
failure
kind
"
)
;
}
switch
(
f
.
outParam
)
{
case
Type_Handle
:
masm
.
popRooted
(
f
.
outParamRootType
ReturnReg
JSReturnOperand
)
;
break
;
case
Type_Value
:
masm
.
loadValue
(
Address
(
sp
0
)
JSReturnOperand
)
;
masm
.
freeStack
(
sizeof
(
Value
)
)
;
break
;
case
Type_Int32
:
case
Type_Pointer
:
masm
.
load32
(
Address
(
sp
0
)
ReturnReg
)
;
masm
.
freeStack
(
sizeof
(
int32_t
)
)
;
break
;
case
Type_Bool
:
masm
.
load8ZeroExtend
(
Address
(
sp
0
)
ReturnReg
)
;
masm
.
freeStack
(
sizeof
(
int32_t
)
)
;
break
;
case
Type_Double
:
masm
.
loadDouble
(
Address
(
sp
0
)
ReturnDoubleReg
)
;
masm
.
freeStack
(
sizeof
(
double
)
)
;
break
;
default
:
MOZ_ASSERT
(
f
.
outParam
=
=
Type_Void
)
;
break
;
}
if
(
f
.
returnsData
(
)
&
&
JitOptions
.
spectreJitToCxxCalls
)
{
masm
.
speculationBarrier
(
)
;
}
masm
.
leaveExitFrame
(
0
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
retn
(
Imm32
(
sizeof
(
ExitFrameLayout
)
-
sizeof
(
void
*
)
+
f
.
explicitStackSlots
(
)
*
sizeof
(
void
*
)
+
f
.
extraValuesToPop
*
sizeof
(
Value
)
)
)
;
return
true
;
}
uint32_t
JitRuntime
:
:
generatePreBarrier
(
JSContext
*
cx
MacroAssembler
&
masm
MIRType
type
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generatePreBarrier
"
)
;
uint32_t
offset
=
startTrampolineCode
(
masm
)
;
masm
.
pushReturnAddress
(
)
;
static_assert
(
PreBarrierReg
=
=
r1
)
;
Register
temp1
=
r2
;
Register
temp2
=
r3
;
Register
temp3
=
r4
;
masm
.
push
(
temp1
)
;
masm
.
push
(
temp2
)
;
masm
.
push
(
temp3
)
;
Label
noBarrier
;
masm
.
emitPreBarrierFastPath
(
cx
-
>
runtime
(
)
type
temp1
temp2
temp3
&
noBarrier
)
;
masm
.
pop
(
temp3
)
;
masm
.
pop
(
temp2
)
;
masm
.
pop
(
temp1
)
;
LiveRegisterSet
save
;
save
.
set
(
)
=
RegisterSet
(
GeneralRegisterSet
(
Registers
:
:
VolatileMask
)
FloatRegisterSet
(
FloatRegisters
:
:
VolatileDoubleMask
)
)
;
masm
.
PushRegsInMask
(
save
)
;
masm
.
movePtr
(
ImmPtr
(
cx
-
>
runtime
(
)
)
r0
)
;
masm
.
setupUnalignedABICall
(
r2
)
;
masm
.
passABIArg
(
r0
)
;
masm
.
passABIArg
(
r1
)
;
masm
.
callWithABI
(
JitPreWriteBarrier
(
type
)
)
;
masm
.
PopRegsInMask
(
save
)
;
masm
.
ret
(
)
;
masm
.
bind
(
&
noBarrier
)
;
masm
.
pop
(
temp3
)
;
masm
.
pop
(
temp2
)
;
masm
.
pop
(
temp1
)
;
masm
.
ret
(
)
;
return
offset
;
}
void
JitRuntime
:
:
generateBailoutTailStub
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateBailoutTailStub
"
)
;
masm
.
bind
(
bailoutTail
)
;
masm
.
generateBailoutTail
(
r1
r2
)
;
}
