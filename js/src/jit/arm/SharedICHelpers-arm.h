#
ifndef
jit_arm_SharedICHelpers_arm_h
#
define
jit_arm_SharedICHelpers_arm_h
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jit
/
SharedICRegisters
.
h
"
namespace
js
{
namespace
jit
{
static
const
size_t
ICStackValueOffset
=
0
;
inline
void
EmitRestoreTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitRepushTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitCallIC
(
MacroAssembler
&
masm
CodeOffset
*
callOffset
)
{
static_assert
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
r0
)
;
masm
.
ma_blx
(
r0
)
;
*
callOffset
=
CodeOffset
(
masm
.
currentOffset
(
)
)
;
}
inline
void
EmitReturnFromIC
(
MacroAssembler
&
masm
)
{
masm
.
ma_mov
(
lr
pc
)
;
}
inline
void
EmitBaselineLeaveStubFrame
(
MacroAssembler
&
masm
bool
calledIntoIon
=
false
)
{
ScratchRegisterScope
scratch
(
masm
)
;
if
(
calledIntoIon
)
{
masm
.
Pop
(
scratch
)
;
masm
.
rshiftPtr
(
Imm32
(
FRAMESIZE_SHIFT
)
scratch
)
;
masm
.
add32
(
scratch
BaselineStackReg
)
;
}
else
{
masm
.
mov
(
BaselineFrameReg
BaselineStackReg
)
;
}
masm
.
Pop
(
BaselineFrameReg
)
;
masm
.
Pop
(
ICStubReg
)
;
masm
.
Pop
(
ICTailCallReg
)
;
masm
.
Pop
(
scratch
)
;
}
template
<
typename
AddrType
>
inline
void
EmitPreBarrier
(
MacroAssembler
&
masm
const
AddrType
&
addr
MIRType
type
)
{
masm
.
push
(
lr
)
;
masm
.
guardedCallPreBarrier
(
addr
type
)
;
masm
.
pop
(
lr
)
;
}
inline
void
EmitStubGuardFailure
(
MacroAssembler
&
masm
)
{
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfNext
(
)
)
ICStubReg
)
;
static_assert
(
ICTailCallReg
=
=
lr
)
;
masm
.
jump
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
)
;
}
}
}
#
endif
