#
ifndef
jit_arm_SharedICHelpers_arm_h
#
define
jit_arm_SharedICHelpers_arm_h
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jit
/
SharedICRegisters
.
h
"
namespace
js
{
namespace
jit
{
static
const
size_t
ICStackValueOffset
=
0
;
inline
void
EmitRestoreTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitRepushTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitCallIC
(
CodeOffset
*
patchOffset
MacroAssembler
&
masm
)
{
CodeOffset
offset
=
masm
.
movWithPatch
(
ImmWord
(
-
1
)
ICStubReg
)
;
*
patchOffset
=
offset
;
masm
.
loadPtr
(
Address
(
ICStubReg
ICEntry
:
:
offsetOfFirstStub
(
)
)
ICStubReg
)
;
MOZ_ASSERT
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
r0
)
;
masm
.
ma_blx
(
r0
)
;
}
inline
void
EmitEnterTypeMonitorIC
(
MacroAssembler
&
masm
size_t
monitorStubOffset
=
ICMonitoredStub
:
:
offsetOfFirstMonitorStub
(
)
)
{
masm
.
loadPtr
(
Address
(
ICStubReg
(
uint32_t
)
monitorStubOffset
)
ICStubReg
)
;
MOZ_ASSERT
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
r0
)
;
masm
.
branch
(
r0
)
;
}
inline
void
EmitReturnFromIC
(
MacroAssembler
&
masm
)
{
masm
.
ma_mov
(
lr
pc
)
;
}
inline
void
EmitChangeICReturnAddress
(
MacroAssembler
&
masm
Register
reg
)
{
masm
.
ma_mov
(
reg
lr
)
;
}
inline
void
EmitBaselineTailCallVM
(
JitCode
*
target
MacroAssembler
&
masm
uint32_t
argSize
)
{
MOZ_ASSERT
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
movePtr
(
BaselineFrameReg
r0
)
;
masm
.
as_add
(
r0
r0
Imm8
(
BaselineFrame
:
:
FramePointerOffset
)
)
;
masm
.
ma_sub
(
BaselineStackReg
r0
)
;
{
ScratchRegisterScope
scratch
(
masm
)
;
masm
.
ma_sub
(
r0
Imm32
(
argSize
)
r1
scratch
)
;
}
masm
.
store32
(
r1
Address
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfFrameSize
(
)
)
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
lr
)
;
masm
.
makeFrameDescriptor
(
r0
JitFrame_BaselineJS
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
r0
)
;
masm
.
push
(
lr
)
;
masm
.
branch
(
target
)
;
}
inline
void
EmitIonTailCallVM
(
JitCode
*
target
MacroAssembler
&
masm
uint32_t
stackSize
)
{
MOZ_ASSERT
(
R2
=
=
ValueOperand
(
r1
r0
)
)
;
masm
.
loadPtr
(
Address
(
sp
stackSize
)
r0
)
;
masm
.
rshiftPtr
(
Imm32
(
FRAMESIZE_SHIFT
)
r0
)
;
masm
.
add32
(
Imm32
(
stackSize
+
JitStubFrameLayout
:
:
Size
(
)
-
sizeof
(
intptr_t
)
)
r0
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
lr
)
;
masm
.
makeFrameDescriptor
(
r0
JitFrame_IonJS
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
r0
)
;
masm
.
push
(
lr
)
;
masm
.
branch
(
target
)
;
}
inline
void
EmitBaselineCreateStubFrameDescriptor
(
MacroAssembler
&
masm
Register
reg
uint32_t
headerSize
)
{
masm
.
mov
(
BaselineFrameReg
reg
)
;
masm
.
as_add
(
reg
reg
Imm8
(
sizeof
(
void
*
)
*
2
)
)
;
masm
.
ma_sub
(
BaselineStackReg
reg
)
;
masm
.
makeFrameDescriptor
(
reg
JitFrame_BaselineStub
headerSize
)
;
}
inline
void
EmitBaselineCallVM
(
JitCode
*
target
MacroAssembler
&
masm
)
{
EmitBaselineCreateStubFrameDescriptor
(
masm
r0
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
r0
)
;
masm
.
call
(
target
)
;
}
static
const
uint32_t
STUB_FRAME_SIZE
=
4
*
sizeof
(
void
*
)
;
static
const
uint32_t
STUB_FRAME_SAVED_STUB_OFFSET
=
sizeof
(
void
*
)
;
inline
void
EmitBaselineEnterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
{
MOZ_ASSERT
(
scratch
!
=
ICTailCallReg
)
;
masm
.
mov
(
BaselineFrameReg
scratch
)
;
masm
.
as_add
(
scratch
scratch
Imm8
(
BaselineFrame
:
:
FramePointerOffset
)
)
;
masm
.
ma_sub
(
BaselineStackReg
scratch
)
;
masm
.
store32
(
scratch
Address
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfFrameSize
(
)
)
)
;
masm
.
makeFrameDescriptor
(
scratch
JitFrame_BaselineJS
BaselineStubFrameLayout
:
:
Size
(
)
)
;
masm
.
Push
(
scratch
)
;
masm
.
Push
(
ICTailCallReg
)
;
masm
.
Push
(
ICStubReg
)
;
masm
.
Push
(
BaselineFrameReg
)
;
masm
.
mov
(
BaselineStackReg
BaselineFrameReg
)
;
masm
.
checkStackAlignment
(
)
;
}
inline
void
EmitBaselineLeaveStubFrame
(
MacroAssembler
&
masm
bool
calledIntoIon
=
false
)
{
ScratchRegisterScope
scratch
(
masm
)
;
if
(
calledIntoIon
)
{
masm
.
Pop
(
scratch
)
;
masm
.
rshiftPtr
(
Imm32
(
FRAMESIZE_SHIFT
)
scratch
)
;
masm
.
add32
(
scratch
BaselineStackReg
)
;
}
else
{
masm
.
mov
(
BaselineFrameReg
BaselineStackReg
)
;
}
masm
.
Pop
(
BaselineFrameReg
)
;
masm
.
Pop
(
ICStubReg
)
;
masm
.
Pop
(
ICTailCallReg
)
;
masm
.
Pop
(
scratch
)
;
}
inline
void
EmitStowICValues
(
MacroAssembler
&
masm
int
values
)
{
MOZ_ASSERT
(
values
>
=
0
&
&
values
<
=
2
)
;
switch
(
values
)
{
case
1
:
masm
.
Push
(
R0
)
;
break
;
case
2
:
masm
.
Push
(
R0
)
;
masm
.
Push
(
R1
)
;
break
;
}
}
inline
void
EmitUnstowICValues
(
MacroAssembler
&
masm
int
values
bool
discard
=
false
)
{
MOZ_ASSERT
(
values
>
=
0
&
&
values
<
=
2
)
;
switch
(
values
)
{
case
1
:
if
(
discard
)
masm
.
addPtr
(
Imm32
(
sizeof
(
Value
)
)
BaselineStackReg
)
;
else
masm
.
popValue
(
R0
)
;
break
;
case
2
:
if
(
discard
)
{
masm
.
addPtr
(
Imm32
(
sizeof
(
Value
)
*
2
)
BaselineStackReg
)
;
}
else
{
masm
.
popValue
(
R1
)
;
masm
.
popValue
(
R0
)
;
}
break
;
}
masm
.
adjustFrame
(
-
values
*
sizeof
(
Value
)
)
;
}
template
<
typename
AddrType
>
inline
void
EmitPreBarrier
(
MacroAssembler
&
masm
const
AddrType
&
addr
MIRType
type
)
{
masm
.
push
(
lr
)
;
masm
.
patchableCallPreBarrier
(
addr
type
)
;
masm
.
pop
(
lr
)
;
}
inline
void
EmitStubGuardFailure
(
MacroAssembler
&
masm
)
{
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfNext
(
)
)
ICStubReg
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
lr
)
;
masm
.
jump
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
)
;
}
}
}
#
endif
