#
ifndef
jit_JitScript_h
#
define
jit_JitScript_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
TrialInlining
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
util
/
TrailingArray
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
TypeInference
.
h
"
class
JS_PUBLIC_API
JSScript
;
namespace
js
{
namespace
jit
{
struct
IonBytecodeInfo
{
bool
usesEnvironmentChain
=
false
;
bool
modifiesArguments
=
false
;
bool
hasTryFinally
=
false
;
}
;
static
constexpr
uintptr_t
BaselineDisabledScript
=
0x1
;
static
BaselineScript
*
const
BaselineDisabledScriptPtr
=
reinterpret_cast
<
BaselineScript
*
>
(
BaselineDisabledScript
)
;
static
constexpr
uintptr_t
IonDisabledScript
=
0x1
;
static
constexpr
uintptr_t
IonCompilingScript
=
0x2
;
static
IonScript
*
const
IonDisabledScriptPtr
=
reinterpret_cast
<
IonScript
*
>
(
IonDisabledScript
)
;
static
IonScript
*
const
IonCompilingScriptPtr
=
reinterpret_cast
<
IonScript
*
>
(
IonCompilingScript
)
;
class
JitScript
;
class
InliningRoot
;
class
alignas
(
uintptr_t
)
ICScript
final
:
public
TrailingArray
{
public
:
ICScript
(
uint32_t
warmUpCount
Offset
endOffset
uint32_t
depth
InliningRoot
*
inliningRoot
=
nullptr
)
:
inliningRoot_
(
inliningRoot
)
warmUpCount_
(
warmUpCount
)
endOffset_
(
endOffset
)
depth_
(
depth
)
{
}
bool
isInlined
(
)
const
{
return
depth_
>
0
;
}
MOZ_MUST_USE
bool
initICEntries
(
JSContext
*
cx
JSScript
*
script
)
;
ICEntry
&
icEntry
(
size_t
index
)
{
MOZ_ASSERT
(
index
<
numICEntries
(
)
)
;
return
icEntries
(
)
[
index
]
;
}
InliningRoot
*
inliningRoot
(
)
const
{
return
inliningRoot_
;
}
uint32_t
depth
(
)
const
{
return
depth_
;
}
void
resetWarmUpCount
(
uint32_t
count
)
{
warmUpCount_
=
count
;
}
static
constexpr
size_t
offsetOfFirstStub
(
uint32_t
entryIndex
)
{
return
sizeof
(
ICScript
)
+
entryIndex
*
sizeof
(
ICEntry
)
+
ICEntry
:
:
offsetOfFirstStub
(
)
;
}
static
constexpr
Offset
offsetOfWarmUpCount
(
)
{
return
offsetof
(
ICScript
warmUpCount_
)
;
}
static
constexpr
Offset
offsetOfDepth
(
)
{
return
offsetof
(
ICScript
depth_
)
;
}
static
constexpr
Offset
offsetOfICEntries
(
)
{
return
sizeof
(
ICScript
)
;
}
uint32_t
numICEntries
(
)
const
{
return
numElements
<
ICEntry
>
(
icEntriesOffset
(
)
endOffset
(
)
)
;
}
ICEntry
*
interpreterICEntryFromPCOffset
(
uint32_t
pcOffset
)
;
ICEntry
*
maybeICEntryFromPCOffset
(
uint32_t
pcOffset
)
;
ICEntry
*
maybeICEntryFromPCOffset
(
uint32_t
pcOffset
ICEntry
*
prevLookedUpEntry
)
;
ICEntry
&
icEntryFromPCOffset
(
uint32_t
pcOffset
)
;
ICEntry
&
icEntryFromPCOffset
(
uint32_t
pcOffset
ICEntry
*
prevLookedUpEntry
)
;
MOZ_MUST_USE
bool
addInlinedChild
(
JSContext
*
cx
js
:
:
UniquePtr
<
ICScript
>
child
uint32_t
pcOffset
)
;
ICScript
*
findInlinedChild
(
uint32_t
pcOffset
)
;
void
removeInlinedChild
(
uint32_t
pcOffset
)
;
bool
hasInlinedChild
(
uint32_t
pcOffset
)
;
FallbackICStubSpace
*
fallbackStubSpace
(
)
;
void
purgeOptimizedStubs
(
Zone
*
zone
)
;
void
trace
(
JSTracer
*
trc
)
;
private
:
class
CallSite
{
public
:
CallSite
(
ICScript
*
callee
uint32_t
pcOffset
)
:
callee_
(
callee
)
pcOffset_
(
pcOffset
)
{
}
ICScript
*
callee_
;
uint32_t
pcOffset_
;
}
;
InliningRoot
*
inliningRoot_
=
nullptr
;
js
:
:
UniquePtr
<
Vector
<
CallSite
>
>
inlinedChildren_
;
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
Relaxed
>
warmUpCount_
=
{
}
;
Offset
endOffset_
;
uint32_t
depth_
;
Offset
icEntriesOffset
(
)
const
{
return
offsetOfICEntries
(
)
;
}
Offset
endOffset
(
)
const
{
return
endOffset_
;
}
ICEntry
*
icEntries
(
)
{
return
offsetToPointer
<
ICEntry
>
(
icEntriesOffset
(
)
)
;
}
JitScript
*
outerJitScript
(
)
;
friend
class
JitScript
;
}
;
class
alignas
(
uintptr_t
)
JitScript
final
:
public
TrailingArray
{
friend
class
:
:
JSScript
;
FallbackICStubSpace
fallbackStubSpace_
=
{
}
;
uint8_t
*
jitCodeSkipArgCheck_
=
nullptr
;
const
char
*
profileString_
=
nullptr
;
struct
CachedIonData
{
RecompileInfoVector
inlinedCompilations_
;
const
HeapPtr
<
EnvironmentObject
*
>
templateEnv
=
nullptr
;
uint16_t
inlinedBytecodeLength
=
0
;
uint8_t
maxInliningDepth
=
UINT8_MAX
;
IonBytecodeInfo
bytecodeInfo
=
{
}
;
CachedIonData
(
EnvironmentObject
*
templateEnv
IonBytecodeInfo
bytecodeInfo
)
;
CachedIonData
(
const
CachedIonData
&
)
=
delete
;
void
operator
=
(
const
CachedIonData
&
)
=
delete
;
void
trace
(
JSTracer
*
trc
)
;
}
;
js
:
:
UniquePtr
<
CachedIonData
>
cachedIonData_
;
BaselineScript
*
baselineScript_
=
nullptr
;
IonScript
*
ionScript_
=
nullptr
;
Offset
endOffset_
=
0
;
struct
Flags
{
bool
active
:
1
;
bool
typesGeneration
:
1
;
bool
hasFreezeConstraints
:
1
;
bool
ionCompiledOrInlined
:
1
;
bool
hadIonOSR
:
1
;
}
;
Flags
flags_
=
{
}
;
js
:
:
UniquePtr
<
InliningRoot
>
inliningRoot_
;
ICScript
icScript_
;
Offset
icEntriesOffset
(
)
const
{
return
offsetOfICEntries
(
)
;
}
Offset
endOffset
(
)
const
{
return
endOffset_
;
}
ICEntry
*
icEntries
(
)
{
return
icScript_
.
icEntries
(
)
;
}
uint32_t
typesGeneration
(
)
const
{
return
uint32_t
(
flags_
.
typesGeneration
)
;
}
void
setTypesGeneration
(
uint32_t
generation
)
{
MOZ_ASSERT
(
generation
<
=
1
)
;
flags_
.
typesGeneration
=
generation
;
}
bool
hasCachedIonData
(
)
const
{
return
!
!
cachedIonData_
;
}
CachedIonData
&
cachedIonData
(
)
{
MOZ_ASSERT
(
hasCachedIonData
(
)
)
;
return
*
cachedIonData_
.
get
(
)
;
}
const
CachedIonData
&
cachedIonData
(
)
const
{
MOZ_ASSERT
(
hasCachedIonData
(
)
)
;
return
*
cachedIonData_
.
get
(
)
;
}
public
:
JitScript
(
JSScript
*
script
Offset
endOffset
const
char
*
profileString
)
;
#
ifdef
DEBUG
~
JitScript
(
)
{
MOZ_ASSERT
(
fallbackStubSpace_
.
isEmpty
(
)
)
;
MOZ_ASSERT
(
!
hasBaselineScript
(
)
)
;
MOZ_ASSERT
(
!
hasIonScript
(
)
)
;
}
#
endif
MOZ_MUST_USE
bool
ensureHasCachedIonData
(
JSContext
*
cx
HandleScript
script
)
;
bool
hasFreezeConstraints
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
const
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
return
flags_
.
hasFreezeConstraints
;
}
void
setHasFreezeConstraints
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
flags_
.
hasFreezeConstraints
=
true
;
}
inline
bool
typesNeedsSweep
(
Zone
*
zone
)
const
;
void
sweepTypes
(
const
js
:
:
AutoSweepJitScript
&
sweep
Zone
*
zone
)
;
void
setIonCompiledOrInlined
(
)
{
flags_
.
ionCompiledOrInlined
=
true
;
}
void
clearIonCompiledOrInlined
(
)
{
flags_
.
ionCompiledOrInlined
=
false
;
}
bool
ionCompiledOrInlined
(
)
const
{
return
flags_
.
ionCompiledOrInlined
;
}
void
setHadIonOSR
(
)
{
flags_
.
hadIonOSR
=
true
;
}
bool
hadIonOSR
(
)
const
{
return
flags_
.
hadIonOSR
;
}
RecompileInfoVector
*
maybeInlinedCompilations
(
const
js
:
:
AutoSweepJitScript
&
sweep
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
if
(
!
hasCachedIonData
(
)
)
{
return
nullptr
;
}
return
&
cachedIonData
(
)
.
inlinedCompilations_
;
}
MOZ_MUST_USE
bool
addInlinedCompilation
(
const
js
:
:
AutoSweepJitScript
&
sweep
RecompileInfo
info
)
{
MOZ_ASSERT
(
sweep
.
jitScript
(
)
=
=
this
)
;
auto
&
inlinedCompilations
=
cachedIonData
(
)
.
inlinedCompilations_
;
if
(
!
inlinedCompilations
.
empty
(
)
&
&
inlinedCompilations
.
back
(
)
=
=
info
)
{
return
true
;
}
return
inlinedCompilations
.
append
(
info
)
;
}
uint32_t
numICEntries
(
)
const
{
return
icScript_
.
numICEntries
(
)
;
}
bool
active
(
)
const
{
return
flags_
.
active
;
}
void
setActive
(
)
{
flags_
.
active
=
true
;
}
void
resetActive
(
)
{
flags_
.
active
=
false
;
}
void
ensureProfileString
(
JSContext
*
cx
JSScript
*
script
)
;
const
char
*
profileString
(
)
const
{
MOZ_ASSERT
(
profileString_
)
;
return
profileString_
;
}
static
void
Destroy
(
Zone
*
zone
JitScript
*
script
)
;
static
constexpr
Offset
offsetOfICEntries
(
)
{
return
sizeof
(
JitScript
)
;
}
static
constexpr
size_t
offsetOfJitCodeSkipArgCheck
(
)
{
return
offsetof
(
JitScript
jitCodeSkipArgCheck_
)
;
}
static
constexpr
size_t
offsetOfBaselineScript
(
)
{
return
offsetof
(
JitScript
baselineScript_
)
;
}
static
constexpr
size_t
offsetOfIonScript
(
)
{
return
offsetof
(
JitScript
ionScript_
)
;
}
static
constexpr
size_t
offsetOfICScript
(
)
{
return
offsetof
(
JitScript
icScript_
)
;
}
static
constexpr
size_t
offsetOfWarmUpCount
(
)
{
return
offsetOfICScript
(
)
+
ICScript
:
:
offsetOfWarmUpCount
(
)
;
}
uint32_t
warmUpCount
(
)
const
{
return
icScript_
.
warmUpCount_
;
}
void
incWarmUpCount
(
uint32_t
amount
)
{
icScript_
.
warmUpCount_
+
=
amount
;
}
void
resetWarmUpCount
(
uint32_t
count
)
;
void
prepareForDestruction
(
Zone
*
zone
)
{
fallbackStubSpace_
.
freeAllAfterMinorGC
(
zone
)
;
}
FallbackICStubSpace
*
fallbackStubSpace
(
)
{
return
&
fallbackStubSpace_
;
}
void
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
data
size_t
*
fallbackStubs
)
const
{
*
data
+
=
mallocSizeOf
(
this
)
;
*
fallbackStubs
+
=
fallbackStubSpace_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
ICEntry
&
icEntry
(
size_t
index
)
{
return
icScript_
.
icEntry
(
index
)
;
}
void
trace
(
JSTracer
*
trc
)
;
void
purgeOptimizedStubs
(
JSScript
*
script
)
;
ICEntry
*
interpreterICEntryFromPCOffset
(
uint32_t
pcOffset
)
{
return
icScript_
.
interpreterICEntryFromPCOffset
(
pcOffset
)
;
}
ICEntry
*
maybeICEntryFromPCOffset
(
uint32_t
pcOffset
)
{
return
icScript_
.
maybeICEntryFromPCOffset
(
pcOffset
)
;
}
ICEntry
*
maybeICEntryFromPCOffset
(
uint32_t
pcOffset
ICEntry
*
prevLookedUpEntry
)
{
return
icScript_
.
maybeICEntryFromPCOffset
(
pcOffset
prevLookedUpEntry
)
;
}
ICEntry
&
icEntryFromPCOffset
(
uint32_t
pcOffset
)
{
return
icScript_
.
icEntryFromPCOffset
(
pcOffset
)
;
}
;
ICEntry
&
icEntryFromPCOffset
(
uint32_t
pcOffset
ICEntry
*
prevLookedUpEntry
)
{
return
icScript_
.
icEntryFromPCOffset
(
pcOffset
prevLookedUpEntry
)
;
}
size_t
allocBytes
(
)
const
{
return
endOffset
(
)
;
}
EnvironmentObject
*
templateEnvironment
(
)
const
{
return
cachedIonData
(
)
.
templateEnv
;
}
bool
modifiesArguments
(
)
const
{
return
cachedIonData
(
)
.
bytecodeInfo
.
modifiesArguments
;
}
bool
usesEnvironmentChain
(
)
const
{
return
cachedIonData
(
)
.
bytecodeInfo
.
usesEnvironmentChain
;
}
bool
hasTryFinally
(
)
const
{
return
cachedIonData
(
)
.
bytecodeInfo
.
hasTryFinally
;
}
uint8_t
maxInliningDepth
(
)
const
{
return
hasCachedIonData
(
)
?
cachedIonData
(
)
.
maxInliningDepth
:
UINT8_MAX
;
}
void
resetMaxInliningDepth
(
)
{
cachedIonData
(
)
.
maxInliningDepth
=
UINT8_MAX
;
}
void
setMaxInliningDepth
(
uint32_t
depth
)
{
MOZ_ASSERT
(
depth
<
=
UINT8_MAX
)
;
cachedIonData
(
)
.
maxInliningDepth
=
depth
;
}
uint16_t
inlinedBytecodeLength
(
)
const
{
return
hasCachedIonData
(
)
?
cachedIonData
(
)
.
inlinedBytecodeLength
:
0
;
}
void
setInlinedBytecodeLength
(
uint32_t
len
)
{
if
(
len
>
UINT16_MAX
)
{
len
=
UINT16_MAX
;
}
cachedIonData
(
)
.
inlinedBytecodeLength
=
len
;
}
private
:
void
setBaselineScriptImpl
(
JSScript
*
script
BaselineScript
*
baselineScript
)
;
void
setBaselineScriptImpl
(
JSFreeOp
*
fop
JSScript
*
script
BaselineScript
*
baselineScript
)
;
public
:
bool
hasBaselineScript
(
)
const
{
bool
res
=
baselineScript_
&
&
baselineScript_
!
=
BaselineDisabledScriptPtr
;
MOZ_ASSERT_IF
(
!
res
!
hasIonScript
(
)
)
;
return
res
;
}
BaselineScript
*
baselineScript
(
)
const
{
MOZ_ASSERT
(
hasBaselineScript
(
)
)
;
return
baselineScript_
;
}
void
setBaselineScript
(
JSScript
*
script
BaselineScript
*
baselineScript
)
{
MOZ_ASSERT
(
!
hasBaselineScript
(
)
)
;
setBaselineScriptImpl
(
script
baselineScript
)
;
MOZ_ASSERT
(
hasBaselineScript
(
)
)
;
}
MOZ_MUST_USE
BaselineScript
*
clearBaselineScript
(
JSFreeOp
*
fop
JSScript
*
script
)
{
BaselineScript
*
baseline
=
baselineScript
(
)
;
setBaselineScriptImpl
(
fop
script
nullptr
)
;
return
baseline
;
}
private
:
void
setIonScriptImpl
(
JSFreeOp
*
fop
JSScript
*
script
IonScript
*
ionScript
)
;
void
setIonScriptImpl
(
JSScript
*
script
IonScript
*
ionScript
)
;
public
:
bool
hasIonScript
(
)
const
{
bool
res
=
ionScript_
&
&
ionScript_
!
=
IonDisabledScriptPtr
&
&
ionScript_
!
=
IonCompilingScriptPtr
;
MOZ_ASSERT_IF
(
res
baselineScript_
)
;
return
res
;
}
IonScript
*
ionScript
(
)
const
{
MOZ_ASSERT
(
hasIonScript
(
)
)
;
return
ionScript_
;
}
void
setIonScript
(
JSScript
*
script
IonScript
*
ionScript
)
{
MOZ_ASSERT
(
!
hasIonScript
(
)
)
;
setIonScriptImpl
(
script
ionScript
)
;
MOZ_ASSERT
(
hasIonScript
(
)
)
;
}
MOZ_MUST_USE
IonScript
*
clearIonScript
(
JSFreeOp
*
fop
JSScript
*
script
)
{
IonScript
*
ion
=
ionScript
(
)
;
setIonScriptImpl
(
fop
script
nullptr
)
;
return
ion
;
}
bool
isIonCompilingOffThread
(
)
const
{
return
ionScript_
=
=
IonCompilingScriptPtr
;
}
void
setIsIonCompilingOffThread
(
JSScript
*
script
)
{
MOZ_ASSERT
(
ionScript_
=
=
nullptr
)
;
setIonScriptImpl
(
script
IonCompilingScriptPtr
)
;
}
void
clearIsIonCompilingOffThread
(
JSScript
*
script
)
{
MOZ_ASSERT
(
isIonCompilingOffThread
(
)
)
;
setIonScriptImpl
(
script
nullptr
)
;
}
ICScript
*
icScript
(
)
{
return
&
icScript_
;
}
bool
hasInliningRoot
(
)
const
{
return
!
!
inliningRoot_
;
}
InliningRoot
*
inliningRoot
(
)
const
{
return
inliningRoot_
.
get
(
)
;
}
InliningRoot
*
getOrCreateInliningRoot
(
JSContext
*
cx
JSScript
*
script
)
;
void
clearInliningRoot
(
)
{
inliningRoot_
.
reset
(
)
;
}
}
;
class
MOZ_RAII
AutoKeepJitScripts
{
TypeZone
&
zone_
;
bool
prev_
;
AutoKeepJitScripts
(
const
AutoKeepJitScripts
&
)
=
delete
;
void
operator
=
(
const
AutoKeepJitScripts
&
)
=
delete
;
public
:
explicit
inline
AutoKeepJitScripts
(
JSContext
*
cx
)
;
inline
~
AutoKeepJitScripts
(
)
;
}
;
void
MarkActiveJitScripts
(
Zone
*
zone
)
;
#
if
defined
(
JS_STRUCTURED_SPEW
)
|
|
defined
(
JS_CACHEIR_SPEW
)
bool
GetStubEnteredCount
(
ICStub
*
stub
uint32_t
*
count
)
;
#
endif
#
ifdef
JS_STRUCTURED_SPEW
void
JitSpewBaselineICStats
(
JSScript
*
script
const
char
*
dumpReason
)
;
#
endif
}
}
#
endif
