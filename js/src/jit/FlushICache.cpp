#
include
"
jit
/
FlushICache
.
h
"
#
ifdef
JS_CODEGEN_ARM64
#
include
"
jit
/
arm64
/
vixl
/
MozCachingDecoder
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Simulator
-
vixl
.
h
"
#
endif
#
if
defined
(
JS_CODEGEN_ARM
)
|
|
defined
(
JS_CODEGEN_ARM64
)
#
ifdef
__linux__
#
include
<
linux
/
version
.
h
>
#
define
LINUX_HAS_MEMBARRIER
(
LINUX_VERSION_CODE
>
=
KERNEL_VERSION
(
4
3
0
)
)
#
else
#
define
LINUX_HAS_MEMBARRIER
0
#
endif
#
if
LINUX_HAS_MEMBARRIER
|
|
defined
(
__android__
)
#
include
<
string
.
h
>
#
if
LINUX_HAS_MEMBARRIER
#
include
<
linux
/
membarrier
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
utsname
.
h
>
#
include
<
unistd
.
h
>
#
elif
defined
(
__android__
)
#
include
<
sys
/
syscall
.
h
>
#
include
<
unistd
.
h
>
#
else
#
error
"
Missing
platform
-
specific
declarations
for
membarrier
syscall
!
"
#
endif
static
int
membarrier
(
int
cmd
int
flags
)
{
return
syscall
(
__NR_membarrier
cmd
flags
)
;
}
#
ifndef
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
#
define
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
(
1
<
<
5
)
#
endif
#
ifndef
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
#
define
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
(
1
<
<
6
)
#
endif
#
endif
using
namespace
js
;
using
namespace
js
:
:
jit
;
namespace
js
{
namespace
jit
{
bool
CanFlushExecutionContextForAllThreads
(
)
{
#
if
(
LINUX_HAS_MEMBARRIER
|
|
defined
(
__android__
)
)
enum
class
MemBarrierAvailable
:
uint32_t
{
Unset
No
Yes
}
;
static
mozilla
:
:
Atomic
<
MemBarrierAvailable
>
state
(
MemBarrierAvailable
:
:
Unset
)
;
MemBarrierAvailable
localState
=
state
;
if
(
MOZ_LIKELY
(
localState
!
=
MemBarrierAvailable
:
:
Unset
)
)
{
return
localState
=
=
MemBarrierAvailable
:
:
Yes
;
}
static
constexpr
int
kRequiredMajor
=
4
;
static
constexpr
int
kRequiredMinor
=
16
;
struct
utsname
uts
;
int
major
minor
;
bool
memBarrierAvailable
=
uname
(
&
uts
)
=
=
0
&
&
strcmp
(
uts
.
sysname
"
Linux
"
)
=
=
0
&
&
sscanf
(
uts
.
release
"
%
d
.
%
d
"
&
major
&
minor
)
=
=
2
&
&
major
>
=
kRequiredMajor
&
&
(
major
!
=
kRequiredMajor
|
|
minor
>
=
kRequiredMinor
)
;
if
(
memBarrierAvailable
&
&
membarrier
(
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
0
)
!
=
0
)
{
memBarrierAvailable
=
false
;
}
bool
ok
=
state
.
compareExchange
(
MemBarrierAvailable
:
:
Unset
memBarrierAvailable
?
MemBarrierAvailable
:
:
Yes
:
MemBarrierAvailable
:
:
No
)
;
if
(
ok
)
{
return
memBarrierAvailable
;
}
MOZ_ASSERT
(
state
!
=
MemBarrierAvailable
:
:
Unset
)
;
return
state
=
=
MemBarrierAvailable
:
:
Yes
;
#
else
return
true
;
#
endif
}
void
FlushExecutionContextForAllThreads
(
)
{
MOZ_RELEASE_ASSERT
(
CanFlushExecutionContextForAllThreads
(
)
)
;
#
if
defined
(
JS_SIMULATOR_ARM64
)
&
&
defined
(
JS_CACHE_SIMULATOR_ARM64
)
using
js
:
:
jit
:
:
SimulatorProcess
;
js
:
:
jit
:
:
AutoLockSimulatorCache
alsc
;
SimulatorProcess
:
:
membarrier
(
)
;
#
elif
(
LINUX_HAS_MEMBARRIER
|
|
defined
(
__android__
)
)
if
(
membarrier
(
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
0
)
!
=
0
)
{
MOZ_CRASH
(
"
membarrier
can
'
t
be
executed
"
)
;
}
#
else
#
endif
}
}
}
#
endif
