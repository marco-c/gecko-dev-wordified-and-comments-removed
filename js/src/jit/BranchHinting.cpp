#
include
"
jit
/
BranchHinting
.
h
"
#
include
"
jit
/
IonAnalysis
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
jit
/
MIRGenerator
.
h
"
#
include
"
jit
/
MIRGraph
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
bool
jit
:
:
BranchHinting
(
MIRGenerator
*
mir
MIRGraph
&
graph
)
{
JitSpew
(
JitSpew_BranchHint
"
Beginning
BranchHinting
pass
"
)
;
mozilla
:
:
Vector
<
MBasicBlock
*
0
>
toBeMoved
;
for
(
MBasicBlock
*
block
:
graph
)
{
if
(
block
-
>
branchHintingUnlikely
(
)
&
&
block
-
>
loopDepth
(
)
=
=
0
&
&
block
-
>
hasLastIns
(
)
&
&
block
-
>
lastIns
(
)
-
>
is
<
js
:
:
jit
:
:
MWasmReturn
>
(
)
)
{
if
(
!
toBeMoved
.
append
(
block
)
)
{
return
false
;
}
}
}
for
(
MBasicBlock
*
block
:
toBeMoved
)
{
#
ifdef
JS_JITSPEW
JitSpew
(
JitSpew_BranchHint
"
Moving
block
%
u
to
the
end
"
block
-
>
id
(
)
)
;
#
endif
graph
.
moveBlockToEnd
(
block
)
;
}
if
(
!
toBeMoved
.
empty
(
)
)
{
RenumberBlocks
(
graph
)
;
}
return
true
;
}
