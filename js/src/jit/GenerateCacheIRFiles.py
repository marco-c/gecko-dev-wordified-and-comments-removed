import
buildconfig
import
yaml
import
six
from
collections
import
OrderedDict
from
mozbuild
.
preprocessor
import
Preprocessor
HEADER_TEMPLATE
=
"
"
"
\
/
*
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
 
*
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
 
*
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
*
/
#
ifndef
%
(
includeguard
)
s
#
define
%
(
includeguard
)
s
/
*
This
file
is
generated
by
jit
/
GenerateCacheIRFiles
.
py
.
Do
not
edit
!
*
/
%
(
contents
)
s
#
endif
/
/
%
(
includeguard
)
s
"
"
"
def
generate_header
(
c_out
includeguard
contents
)
:
    
c_out
.
write
(
HEADER_TEMPLATE
%
{
        
'
includeguard
'
:
includeguard
        
'
contents
'
:
contents
    
}
)
def
load_yaml
(
yaml_path
)
:
    
pp
=
Preprocessor
(
)
    
pp
.
context
.
update
(
buildconfig
.
defines
[
'
ALLDEFINES
'
]
)
    
pp
.
out
=
six
.
StringIO
(
)
    
pp
.
do_filter
(
'
substitution
'
)
    
pp
.
do_include
(
yaml_path
)
    
contents
=
pp
.
out
.
getvalue
(
)
    
class
OrderedLoader
(
yaml
.
Loader
)
:
        
pass
    
def
construct_mapping
(
loader
node
)
:
        
loader
.
flatten_mapping
(
node
)
        
return
OrderedDict
(
loader
.
construct_pairs
(
node
)
)
    
tag
=
yaml
.
resolver
.
BaseResolver
.
DEFAULT_MAPPING_TAG
    
OrderedLoader
.
add_constructor
(
tag
construct_mapping
)
    
return
yaml
.
load
(
contents
OrderedLoader
)
operand_writer_info
=
{
    
'
ValId
'
:
(
'
ValOperandId
'
'
writeOperandId
'
)
    
'
ObjId
'
:
(
'
ObjOperandId
'
'
writeOperandId
'
)
    
'
StrId
'
:
(
'
StringOperandId
'
'
writeOperandId
'
)
    
'
SymId
'
:
(
'
SymbolOperandId
'
'
writeOperandId
'
)
    
'
Int32Id
'
:
(
'
Int32OperandId
'
'
writeOperandId
'
)
    
'
NumId
'
:
(
'
NumberOperandId
'
'
writeOperandId
'
)
    
'
BigIntId
'
:
(
'
BigIntOperandId
'
'
writeOperandId
'
)
    
'
ValTagId
'
:
(
'
ValueTagOperandId
'
'
writeOperandId
'
)
    
'
ShapeField
'
:
(
'
Shape
*
'
'
writeShapeField
'
)
    
'
GroupField
'
:
(
'
ObjectGroup
*
'
'
writeGroupField
'
)
    
'
ObjectField
'
:
(
'
JSObject
*
'
'
writeObjectField
'
)
    
'
StringField
'
:
(
'
JSString
*
'
'
writeStringField
'
)
    
'
AtomField
'
:
(
'
JSAtom
*
'
'
writeStringField
'
)
    
'
PropertyNameField
'
:
(
'
PropertyName
*
'
'
writeStringField
'
)
    
'
SymbolField
'
:
(
'
JS
:
:
Symbol
*
'
'
writeSymbolField
'
)
    
'
RawWordField
'
:
(
'
uintptr_t
'
'
writeRawWordField
'
)
    
'
RawPointerField
'
:
(
'
const
void
*
'
'
writeRawPointerField
'
)
    
'
IdField
'
:
(
'
jsid
'
'
writeIdField
'
)
    
'
ValueField
'
:
(
'
const
Value
&
'
'
writeValueField
'
)
    
'
DOMExpandoGenerationField
'
:
(
'
uint64_t
'
'
writeDOMExpandoGenerationField
'
)
    
'
JSOpImm
'
:
(
'
JSOp
'
'
writeJSOpImm
'
)
    
'
BoolImm
'
:
(
'
bool
'
'
writeBoolImm
'
)
    
'
ByteImm
'
:
(
'
uint32_t
'
'
writeByteImm
'
)
    
'
GuardClassKindImm
'
:
(
'
GuardClassKind
'
'
writeGuardClassKindImm
'
)
    
'
ValueTypeImm
'
:
(
'
ValueType
'
'
writeValueTypeImm
'
)
    
'
JSWhyMagicImm
'
:
(
'
JSWhyMagic
'
'
writeJSWhyMagicImm
'
)
    
'
CallFlagsImm
'
:
(
'
CallFlags
'
'
writeCallFlagsImm
'
)
    
'
TypedThingLayoutImm
'
:
(
'
TypedThingLayout
'
'
writeTypedThingLayoutImm
'
)
    
'
ReferenceTypeImm
'
:
(
'
ReferenceType
'
'
writeReferenceTypeImm
'
)
    
'
ScalarTypeImm
'
:
(
'
Scalar
:
:
Type
'
'
writeScalarTypeImm
'
)
    
'
Int32Imm
'
:
(
'
int32_t
'
'
writeInt32Imm
'
)
    
'
UInt32Imm
'
:
(
'
uint32_t
'
'
writeUInt32Imm
'
)
    
'
JSNativeImm
'
:
(
'
JSNative
'
'
writeJSNativeImm
'
)
    
'
StaticStringImm
'
:
(
'
const
char
*
'
'
writeStaticStringImm
'
)
}
def
gen_writer_method
(
name
operands
custom_writer
)
:
    
"
"
"
Generates
a
CacheIRWRiter
method
for
a
single
opcode
.
"
"
"
    
method_name
=
name
[
0
]
.
lower
(
)
+
name
[
1
:
]
    
if
custom_writer
:
        
method_name
+
=
'
_
'
    
args_sig
=
[
]
    
ret_type
=
'
void
'
    
operands_code
=
'
'
    
if
operands
:
        
for
opnd_name
opnd_type
in
six
.
iteritems
(
operands
)
:
            
argtype
write_method
=
operand_writer_info
[
opnd_type
]
            
if
opnd_name
=
=
'
result
'
:
                
ret_type
=
argtype
                
operands_code
+
=
'
{
}
result
(
newOperandId
(
)
)
;
\
\
\
n
'
.
format
(
argtype
)
                
operands_code
+
=
'
writeOperandId
(
result
)
;
\
\
\
n
'
            
else
:
                
args_sig
.
append
(
'
{
}
{
}
'
.
format
(
argtype
opnd_name
)
)
                
operands_code
+
=
'
{
}
(
{
}
)
;
\
\
\
n
'
.
format
(
write_method
opnd_name
)
    
code
=
'
'
    
if
custom_writer
:
        
code
+
=
'
private
:
\
\
\
n
'
    
code
+
=
'
{
}
{
}
(
{
}
)
{
{
\
\
\
n
'
.
format
(
ret_type
method_name
'
'
.
join
(
args_sig
)
)
    
code
+
=
'
writeOp
(
CacheOp
:
:
{
}
)
;
\
\
\
n
'
.
format
(
name
)
    
code
+
=
operands_code
    
if
ret_type
!
=
'
void
'
:
        
code
+
=
'
return
result
;
\
\
\
n
'
    
code
+
=
'
}
'
    
if
custom_writer
:
        
code
+
=
'
\
\
\
npublic
:
'
    
return
code
operand_compiler_info
=
{
    
'
ValId
'
:
(
'
ValOperandId
'
'
Id
'
'
reader
.
valOperandId
(
)
'
)
    
'
ObjId
'
:
(
'
ObjOperandId
'
'
Id
'
'
reader
.
objOperandId
(
)
'
)
    
'
StrId
'
:
(
'
StringOperandId
'
'
Id
'
'
reader
.
stringOperandId
(
)
'
)
    
'
SymId
'
:
(
'
SymbolOperandId
'
'
Id
'
'
reader
.
symbolOperandId
(
)
'
)
    
'
Int32Id
'
:
(
'
Int32OperandId
'
'
Id
'
'
reader
.
int32OperandId
(
)
'
)
    
'
NumId
'
:
(
'
NumberOperandId
'
'
Id
'
'
reader
.
numberOperandId
(
)
'
)
    
'
BigIntId
'
:
(
'
BigIntOperandId
'
'
Id
'
'
reader
.
bigIntOperandId
(
)
'
)
    
'
ValTagId
'
:
(
'
ValueTagOperandId
'
'
Id
'
'
reader
.
valueTagOperandId
(
)
'
)
    
'
ShapeField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
GroupField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
ObjectField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
StringField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
AtomField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
PropertyNameField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
SymbolField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
RawWordField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
RawPointerField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
IdField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
ValueField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
DOMExpandoGenerationField
'
:
(
'
uint32_t
'
'
Offset
'
'
reader
.
stubOffset
(
)
'
)
    
'
JSOpImm
'
:
(
'
JSOp
'
'
'
'
reader
.
jsop
(
)
'
)
    
'
BoolImm
'
:
(
'
bool
'
'
'
'
reader
.
readBool
(
)
'
)
    
'
ByteImm
'
:
(
'
uint8_t
'
'
'
'
reader
.
readByte
(
)
'
)
    
'
GuardClassKindImm
'
:
(
'
GuardClassKind
'
'
'
'
reader
.
guardClassKind
(
)
'
)
    
'
ValueTypeImm
'
:
(
'
ValueType
'
'
'
'
reader
.
valueType
(
)
'
)
    
'
JSWhyMagicImm
'
:
(
'
JSWhyMagic
'
'
'
'
reader
.
whyMagic
(
)
'
)
    
'
CallFlagsImm
'
:
(
'
CallFlags
'
'
'
'
reader
.
callFlags
(
)
'
)
    
'
TypedThingLayoutImm
'
:
(
'
TypedThingLayout
'
'
'
'
reader
.
typedThingLayout
(
)
'
)
    
'
ReferenceTypeImm
'
:
(
'
ReferenceType
'
'
'
'
reader
.
referenceTypeDescrType
(
)
'
)
    
'
ScalarTypeImm
'
:
(
'
Scalar
:
:
Type
'
'
'
'
reader
.
scalarType
(
)
'
)
    
'
Int32Imm
'
:
(
'
int32_t
'
'
'
'
reader
.
int32Immediate
(
)
'
)
    
'
UInt32Imm
'
:
(
'
uint32_t
'
'
'
'
reader
.
uint32Immediate
(
)
'
)
    
'
JSNativeImm
'
:
(
'
JSNative
'
'
'
'
reinterpret_cast
<
JSNative
>
(
reader
.
pointer
(
)
)
'
)
    
'
StaticStringImm
'
:
(
'
const
char
*
'
'
'
'
reinterpret_cast
<
char
*
>
(
reader
.
pointer
(
)
)
'
)
}
def
gen_compiler_method
(
name
operands
)
:
    
"
"
"
Generates
CacheIRCompiler
header
code
for
a
single
opcode
.
"
"
"
    
method_name
=
'
emit
'
+
name
    
if
not
operands
:
        
return
'
MOZ_MUST_USE
bool
{
}
(
)
;
\
\
\
n
'
.
format
(
method_name
)
    
args_names
=
[
]
    
args_sig
=
[
]
    
operands_code
=
'
'
    
for
opnd_name
opnd_type
in
six
.
iteritems
(
operands
)
:
        
vartype
suffix
readexpr
=
operand_compiler_info
[
opnd_type
]
        
varname
=
opnd_name
+
suffix
        
args_names
.
append
(
varname
)
        
args_sig
.
append
(
'
{
}
{
}
'
.
format
(
vartype
varname
)
)
        
operands_code
+
=
'
{
}
{
}
=
{
}
;
\
\
\
n
'
.
format
(
vartype
varname
readexpr
)
    
code
=
'
MOZ_MUST_USE
bool
{
}
(
{
}
)
;
\
\
\
n
'
.
format
(
method_name
'
'
.
join
(
args_sig
)
)
    
code
+
=
'
MOZ_MUST_USE
bool
{
}
(
)
{
{
\
\
\
n
'
.
format
(
method_name
)
    
code
+
=
operands_code
    
code
+
=
'
return
{
}
(
{
}
)
;
\
\
\
n
'
.
format
(
method_name
'
'
.
join
(
args_names
)
)
    
code
+
=
'
}
\
\
\
n
'
    
return
code
def
generate_cacheirops_header
(
c_out
yaml_path
)
:
    
"
"
"
Generate
CacheIROpsGenerated
.
h
from
CacheIROps
.
yaml
.
The
generated
file
    
contains
:
    
*
A
list
of
all
CacheIR
ops
:
        
#
define
CACHE_IR_OPS
(
_
)
\
        
_
(
GuardToObject
Id
)
\
        
_
(
CompareObjectUndefinedNullResult
Id
Byte
)
\
        
.
.
.
    
*
Lists
of
shared
and
unshared
ops
for
the
CacheIRCompiler
classes
.
See
the
    
'
shared
'
attribute
in
the
YAML
file
.
    
*
Generated
source
code
for
CacheIRWriter
and
CacheIRCompiler
.
    
"
"
"
    
data
=
load_yaml
(
yaml_path
)
    
mapping
=
{
        
'
ValId
'
:
'
Id
'
        
'
ObjId
'
:
'
Id
'
        
'
StrId
'
:
'
Id
'
        
'
SymId
'
:
'
Id
'
        
'
Int32Id
'
:
'
Id
'
        
'
NumId
'
:
'
Id
'
        
'
BigIntId
'
:
'
Id
'
        
'
ValTagId
'
:
'
Id
'
        
'
AnyId
'
:
'
Id
'
        
'
ShapeField
'
:
'
Field
'
        
'
GroupField
'
:
'
Field
'
        
'
ObjectField
'
:
'
Field
'
        
'
StringField
'
:
'
Field
'
        
'
AtomField
'
:
'
Field
'
        
'
PropertyNameField
'
:
'
Field
'
        
'
SymbolField
'
:
'
Field
'
        
'
RawWordField
'
:
'
Field
'
        
'
RawPointerField
'
:
'
Field
'
        
'
DOMExpandoGenerationField
'
:
'
Field
'
        
'
IdField
'
:
'
Field
'
        
'
ValueField
'
:
'
Field
'
        
'
FieldOffset
'
:
'
Field
'
        
'
ByteImm
'
:
'
Byte
'
        
'
BoolImm
'
:
'
Byte
'
        
'
CallFlagsImm
'
:
'
Byte
'
        
'
TypedThingLayoutImm
'
:
'
Byte
'
        
'
ReferenceTypeImm
'
:
'
Byte
'
        
'
ScalarTypeImm
'
:
'
Byte
'
        
'
MetaTwoByteKindImm
'
:
'
Byte
'
        
'
JSOpImm
'
:
'
Byte
'
        
'
ValueTypeImm
'
:
'
Byte
'
        
'
GuardClassKindImm
'
:
'
Byte
'
        
'
JSWhyMagicImm
'
:
'
Byte
'
        
'
Int32Imm
'
:
'
Int32
'
        
'
UInt32Imm
'
:
'
UInt32
'
        
'
JSNativeImm
'
:
'
Word
'
        
'
StaticStringImm
'
:
'
Word
'
    
}
    
ops_items
=
[
]
    
ops_shared
=
[
]
    
ops_unshared
=
[
]
    
writer_methods
=
[
]
    
compiler_shared_methods
=
[
]
    
compiler_unshared_methods
=
[
]
    
for
op
in
data
:
        
name
=
op
[
'
name
'
]
        
operands
=
op
[
'
operands
'
]
        
assert
operands
is
None
or
isinstance
(
operands
OrderedDict
)
        
shared
=
op
[
'
shared
'
]
        
assert
isinstance
(
shared
bool
)
        
gen_boilerplate
=
op
.
get
(
'
gen_boilerplate
'
False
)
        
assert
isinstance
(
gen_boilerplate
bool
)
        
custom_writer
=
op
.
get
(
'
custom_writer
'
False
)
        
assert
isinstance
(
custom_writer
bool
)
        
if
operands
:
            
operands_str
=
'
'
.
join
(
[
mapping
[
v
]
for
v
in
operands
.
values
(
)
]
)
        
else
:
            
operands_str
=
'
None
'
        
ops_items
.
append
(
'
_
(
{
}
{
}
)
'
.
format
(
name
operands_str
)
)
        
if
gen_boilerplate
:
            
writer_methods
.
append
(
gen_writer_method
(
name
operands
custom_writer
)
)
            
if
shared
:
                
compiler_shared_methods
.
append
(
gen_compiler_method
(
name
operands
)
)
            
else
:
                
compiler_unshared_methods
.
append
(
gen_compiler_method
(
name
operands
)
)
        
else
:
            
if
shared
:
                
ops_shared
.
append
(
'
_
(
{
}
)
'
.
format
(
name
)
)
            
else
:
                
ops_unshared
.
append
(
'
_
(
{
}
)
'
.
format
(
name
)
)
    
contents
=
'
#
define
CACHE_IR_OPS
(
_
)
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
ops_items
)
    
contents
+
=
'
\
n
\
n
'
    
contents
+
=
'
#
define
CACHE_IR_SHARED_OPS
(
_
)
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
ops_shared
)
    
contents
+
=
'
\
n
\
n
'
    
contents
+
=
'
#
define
CACHE_IR_UNSHARED_OPS
(
_
)
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
ops_unshared
)
    
contents
+
=
'
\
n
\
n
'
    
contents
+
=
'
#
define
CACHE_IR_WRITER_GENERATED
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
writer_methods
)
    
contents
+
=
'
\
n
\
n
'
    
contents
+
=
'
#
define
CACHE_IR_COMPILER_SHARED_GENERATED
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
compiler_shared_methods
)
    
contents
+
=
'
\
n
\
n
'
    
contents
+
=
'
#
define
CACHE_IR_COMPILER_UNSHARED_GENERATED
\
\
\
n
'
    
contents
+
=
'
\
\
\
n
'
.
join
(
compiler_unshared_methods
)
    
contents
+
=
'
\
n
\
n
'
    
generate_header
(
c_out
'
jit_CacheIROpsGenerated_h
'
contents
)
