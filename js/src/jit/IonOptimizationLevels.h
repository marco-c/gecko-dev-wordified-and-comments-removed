#
ifndef
jit_IonOptimizationLevels_h
#
define
jit_IonOptimizationLevels_h
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
jit
/
JitOptions
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
jit
{
enum
class
OptimizationLevel
:
uint8_t
{
Normal
Wasm
Count
DontCompile
}
;
#
ifdef
JS_JITSPEW
inline
const
char
*
OptimizationLevelString
(
OptimizationLevel
level
)
{
switch
(
level
)
{
case
OptimizationLevel
:
:
DontCompile
:
return
"
Optimization_DontCompile
"
;
case
OptimizationLevel
:
:
Normal
:
return
"
Optimization_Normal
"
;
case
OptimizationLevel
:
:
Wasm
:
return
"
Optimization_Wasm
"
;
case
OptimizationLevel
:
:
Count
:
;
}
MOZ_CRASH
(
"
Invalid
OptimizationLevel
"
)
;
}
#
endif
class
OptimizationInfo
{
OptimizationLevel
level_
;
bool
eaa_
;
bool
ama_
;
bool
edgeCaseAnalysis_
;
bool
eliminateRedundantChecks_
;
bool
eliminateRedundantShapeGuards_
;
bool
eliminateRedundantGCBarriers_
;
bool
inlineInterpreted_
;
bool
inlineNative_
;
bool
gvn_
;
bool
licm_
;
bool
rangeAnalysis_
;
bool
reordering_
;
bool
autoTruncate_
;
bool
sink_
;
bool
scalarReplacement_
;
IonRegisterAllocator
registerAllocator_
;
public
:
constexpr
OptimizationInfo
(
)
:
level_
(
OptimizationLevel
:
:
Normal
)
eaa_
(
false
)
ama_
(
false
)
edgeCaseAnalysis_
(
false
)
eliminateRedundantChecks_
(
false
)
eliminateRedundantShapeGuards_
(
false
)
eliminateRedundantGCBarriers_
(
false
)
inlineInterpreted_
(
false
)
inlineNative_
(
false
)
gvn_
(
false
)
licm_
(
false
)
rangeAnalysis_
(
false
)
reordering_
(
false
)
autoTruncate_
(
false
)
sink_
(
false
)
scalarReplacement_
(
false
)
registerAllocator_
(
RegisterAllocator_Backtracking
)
{
}
constexpr
void
initNormalOptimizationInfo
(
)
{
level_
=
OptimizationLevel
:
:
Normal
;
autoTruncate_
=
true
;
eaa_
=
true
;
edgeCaseAnalysis_
=
true
;
eliminateRedundantChecks_
=
true
;
eliminateRedundantShapeGuards_
=
true
;
eliminateRedundantGCBarriers_
=
true
;
inlineInterpreted_
=
true
;
inlineNative_
=
true
;
licm_
=
true
;
gvn_
=
true
;
rangeAnalysis_
=
true
;
reordering_
=
true
;
scalarReplacement_
=
true
;
sink_
=
true
;
registerAllocator_
=
RegisterAllocator_Backtracking
;
}
constexpr
void
initWasmOptimizationInfo
(
)
{
initNormalOptimizationInfo
(
)
;
level_
=
OptimizationLevel
:
:
Wasm
;
ama_
=
true
;
autoTruncate_
=
false
;
edgeCaseAnalysis_
=
false
;
eliminateRedundantChecks_
=
false
;
eliminateRedundantShapeGuards_
=
false
;
eliminateRedundantGCBarriers_
=
false
;
scalarReplacement_
=
true
;
sink_
=
false
;
}
OptimizationLevel
level
(
)
const
{
return
level_
;
}
bool
inlineInterpreted
(
)
const
{
return
inlineInterpreted_
&
&
!
JitOptions
.
disableInlining
;
}
bool
inlineNative
(
)
const
{
return
inlineNative_
&
&
!
JitOptions
.
disableInlining
;
}
static
uint32_t
baseWarmUpThresholdForScript
(
JSContext
*
cx
JSScript
*
script
)
;
static
uint32_t
warmUpThresholdForPC
(
JSScript
*
script
jsbytecode
*
pc
uint32_t
baseThreshold
)
;
bool
gvnEnabled
(
)
const
{
return
gvn_
&
&
!
JitOptions
.
disableGvn
;
}
bool
licmEnabled
(
)
const
{
return
licm_
&
&
!
JitOptions
.
disableLicm
;
}
bool
rangeAnalysisEnabled
(
)
const
{
return
rangeAnalysis_
&
&
!
JitOptions
.
disableRangeAnalysis
;
}
bool
instructionReorderingEnabled
(
)
const
{
return
reordering_
&
&
!
JitOptions
.
disableInstructionReordering
;
}
bool
autoTruncateEnabled
(
)
const
{
return
autoTruncate_
&
&
rangeAnalysisEnabled
(
)
;
}
bool
sinkEnabled
(
)
const
{
return
sink_
&
&
!
JitOptions
.
disableSink
;
}
bool
eaaEnabled
(
)
const
{
return
eaa_
&
&
!
JitOptions
.
disableEaa
;
}
bool
amaEnabled
(
)
const
{
return
ama_
&
&
!
JitOptions
.
disableAma
;
}
bool
edgeCaseAnalysisEnabled
(
)
const
{
return
edgeCaseAnalysis_
&
&
!
JitOptions
.
disableEdgeCaseAnalysis
;
}
bool
eliminateRedundantChecksEnabled
(
)
const
{
return
eliminateRedundantChecks_
;
}
bool
eliminateRedundantShapeGuardsEnabled
(
)
const
{
return
eliminateRedundantShapeGuards_
&
&
!
JitOptions
.
disableRedundantShapeGuards
;
}
bool
eliminateRedundantGCBarriersEnabled
(
)
const
{
return
eliminateRedundantGCBarriers_
&
&
!
JitOptions
.
disableRedundantGCBarriers
;
}
IonRegisterAllocator
registerAllocator
(
)
const
;
bool
scalarReplacementEnabled
(
)
const
{
return
scalarReplacement_
&
&
!
JitOptions
.
disableScalarReplacement
;
}
}
;
class
OptimizationLevelInfo
{
private
:
mozilla
:
:
EnumeratedArray
<
OptimizationLevel
OptimizationInfo
size_t
(
OptimizationLevel
:
:
Count
)
>
infos_
;
public
:
constexpr
OptimizationLevelInfo
(
)
{
infos_
[
OptimizationLevel
:
:
Normal
]
.
initNormalOptimizationInfo
(
)
;
infos_
[
OptimizationLevel
:
:
Wasm
]
.
initWasmOptimizationInfo
(
)
;
}
const
OptimizationInfo
*
get
(
OptimizationLevel
level
)
const
{
return
&
infos_
[
level
]
;
}
OptimizationLevel
levelForScript
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
=
nullptr
)
const
;
}
;
constexpr
OptimizationLevelInfo
IonOptimizations
;
}
}
#
endif
