#
ifndef
jit_mips64_CodeGenerator_mips64_h
#
define
jit_mips64_CodeGenerator_mips64_h
#
include
"
jit
/
mips
-
shared
/
CodeGenerator
-
mips
-
shared
.
h
"
namespace
js
{
namespace
jit
{
class
CodeGeneratorMIPS64
:
public
CodeGeneratorMIPSShared
{
protected
:
void
testNullEmitBranch
(
Assembler
:
:
Condition
cond
const
ValueOperand
&
value
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
{
MOZ_ASSERT
(
value
.
valueReg
(
)
!
=
SecondScratchReg
)
;
masm
.
splitTag
(
value
.
valueReg
(
)
SecondScratchReg
)
;
emitBranch
(
SecondScratchReg
ImmTag
(
JSVAL_TAG_NULL
)
cond
ifTrue
ifFalse
)
;
}
void
testUndefinedEmitBranch
(
Assembler
:
:
Condition
cond
const
ValueOperand
&
value
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
{
MOZ_ASSERT
(
value
.
valueReg
(
)
!
=
SecondScratchReg
)
;
masm
.
splitTag
(
value
.
valueReg
(
)
SecondScratchReg
)
;
emitBranch
(
SecondScratchReg
ImmTag
(
JSVAL_TAG_UNDEFINED
)
cond
ifTrue
ifFalse
)
;
}
void
testObjectEmitBranch
(
Assembler
:
:
Condition
cond
const
ValueOperand
&
value
MBasicBlock
*
ifTrue
MBasicBlock
*
ifFalse
)
{
MOZ_ASSERT
(
value
.
valueReg
(
)
!
=
SecondScratchReg
)
;
masm
.
splitTag
(
value
.
valueReg
(
)
SecondScratchReg
)
;
emitBranch
(
SecondScratchReg
ImmTag
(
JSVAL_TAG_OBJECT
)
cond
ifTrue
ifFalse
)
;
}
void
emitTableSwitchDispatch
(
MTableSwitch
*
mir
Register
index
Register
base
)
;
public
:
virtual
void
visitCompareB
(
LCompareB
*
lir
)
;
virtual
void
visitCompareBAndBranch
(
LCompareBAndBranch
*
lir
)
;
virtual
void
visitCompareBitwise
(
LCompareBitwise
*
lir
)
;
virtual
void
visitCompareBitwiseAndBranch
(
LCompareBitwiseAndBranch
*
lir
)
;
virtual
void
visitAsmSelectI64
(
LAsmSelectI64
*
ins
)
;
virtual
void
visitAsmReinterpretFromI64
(
LAsmReinterpretFromI64
*
lir
)
;
virtual
void
visitAsmReinterpretToI64
(
LAsmReinterpretToI64
*
lir
)
;
void
visitOutOfLineBailout
(
OutOfLineBailout
*
ool
)
;
void
visitOutOfLineTableSwitch
(
OutOfLineTableSwitch
*
ool
)
;
protected
:
ValueOperand
ToValue
(
LInstruction
*
ins
size_t
pos
)
;
ValueOperand
ToOutValue
(
LInstruction
*
ins
)
;
ValueOperand
ToTempValue
(
LInstruction
*
ins
size_t
pos
)
;
Register
splitTagForTest
(
const
ValueOperand
&
value
)
;
public
:
CodeGeneratorMIPS64
(
MIRGenerator
*
gen
LIRGraph
*
graph
MacroAssembler
*
masm
)
:
CodeGeneratorMIPSShared
(
gen
graph
masm
)
{
}
public
:
void
visitBox
(
LBox
*
box
)
;
void
visitUnbox
(
LUnbox
*
unbox
)
;
void
setReturnDoubleRegs
(
LiveRegisterSet
*
regs
)
;
}
;
typedef
CodeGeneratorMIPS64
CodeGeneratorSpecific
;
}
}
#
endif
