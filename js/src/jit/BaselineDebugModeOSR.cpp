#
include
"
jit
/
BaselineDebugModeOSR
.
h
"
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
BaselineJIT
.
h
"
#
include
"
jit
/
Ion
.
h
"
#
include
"
jit
/
JitcodeMap
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
JSJitFrameIter
.
h
"
#
include
"
jit
/
PerfSpewer
.
h
"
#
include
"
jit
/
JSJitFrameIter
-
inl
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
#
include
"
vm
/
Stack
-
inl
.
h
"
#
include
"
vm
/
TypeInference
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
struct
DebugModeOSREntry
{
JSScript
*
script
;
BaselineScript
*
oldBaselineScript
;
uint32_t
pcOffset
;
RetAddrEntry
:
:
Kind
frameKind
;
explicit
DebugModeOSREntry
(
JSScript
*
script
)
:
script
(
script
)
oldBaselineScript
(
script
-
>
baselineScript
(
)
)
pcOffset
(
uint32_t
(
-
1
)
)
frameKind
(
RetAddrEntry
:
:
Kind
:
:
Invalid
)
{
}
DebugModeOSREntry
(
JSScript
*
script
const
RetAddrEntry
&
retAddrEntry
)
:
script
(
script
)
oldBaselineScript
(
script
-
>
baselineScript
(
)
)
pcOffset
(
retAddrEntry
.
pcOffset
(
)
)
frameKind
(
retAddrEntry
.
kind
(
)
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
pcOffset
=
=
retAddrEntry
.
pcOffset
(
)
)
;
MOZ_ASSERT
(
frameKind
=
=
retAddrEntry
.
kind
(
)
)
;
#
endif
}
DebugModeOSREntry
(
DebugModeOSREntry
&
&
other
)
:
script
(
other
.
script
)
oldBaselineScript
(
other
.
oldBaselineScript
)
pcOffset
(
other
.
pcOffset
)
frameKind
(
other
.
frameKind
)
{
}
bool
recompiled
(
)
const
{
return
oldBaselineScript
!
=
script
-
>
baselineScript
(
)
;
}
}
;
using
DebugModeOSREntryVector
=
Vector
<
DebugModeOSREntry
>
;
class
UniqueScriptOSREntryIter
{
const
DebugModeOSREntryVector
&
entries_
;
size_t
index_
;
public
:
explicit
UniqueScriptOSREntryIter
(
const
DebugModeOSREntryVector
&
entries
)
:
entries_
(
entries
)
index_
(
0
)
{
}
bool
done
(
)
{
return
index_
=
=
entries_
.
length
(
)
;
}
const
DebugModeOSREntry
&
entry
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
entries_
[
index_
]
;
}
UniqueScriptOSREntryIter
&
operator
+
+
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
while
(
+
+
index_
<
entries_
.
length
(
)
)
{
bool
unique
=
true
;
for
(
size_t
i
=
0
;
i
<
index_
;
i
+
+
)
{
if
(
entries_
[
i
]
.
script
=
=
entries_
[
index_
]
.
script
)
{
unique
=
false
;
break
;
}
}
if
(
unique
)
{
break
;
}
}
return
*
this
;
}
}
;
static
bool
CollectJitStackScripts
(
JSContext
*
cx
const
DebugAPI
:
:
ExecutionObservableSet
&
obs
const
ActivationIterator
&
activation
DebugModeOSREntryVector
&
entries
)
{
for
(
OnlyJSJitFrameIter
iter
(
activation
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
const
JSJitFrameIter
&
frame
=
iter
.
frame
(
)
;
switch
(
frame
.
type
(
)
)
{
case
FrameType
:
:
BaselineJS
:
{
JSScript
*
script
=
frame
.
script
(
)
;
if
(
!
obs
.
shouldRecompileOrInvalidate
(
script
)
)
{
break
;
}
BaselineFrame
*
baselineFrame
=
frame
.
baselineFrame
(
)
;
if
(
baselineFrame
-
>
runningInInterpreter
(
)
)
{
if
(
!
entries
.
append
(
DebugModeOSREntry
(
script
)
)
)
{
return
false
;
}
}
else
{
uint8_t
*
retAddr
=
frame
.
resumePCinCurrentFrame
(
)
;
const
RetAddrEntry
&
retAddrEntry
=
script
-
>
baselineScript
(
)
-
>
retAddrEntryFromReturnAddress
(
retAddr
)
;
if
(
!
entries
.
append
(
DebugModeOSREntry
(
script
retAddrEntry
)
)
)
{
return
false
;
}
}
break
;
}
case
FrameType
:
:
BaselineStub
:
break
;
case
FrameType
:
:
IonJS
:
{
InlineFrameIterator
inlineIter
(
cx
&
frame
)
;
while
(
true
)
{
if
(
obs
.
shouldRecompileOrInvalidate
(
inlineIter
.
script
(
)
)
)
{
if
(
!
entries
.
append
(
DebugModeOSREntry
(
inlineIter
.
script
(
)
)
)
)
{
return
false
;
}
}
if
(
!
inlineIter
.
more
(
)
)
{
break
;
}
+
+
inlineIter
;
}
break
;
}
default
:
;
}
}
return
true
;
}
static
bool
CollectInterpreterStackScripts
(
JSContext
*
cx
const
DebugAPI
:
:
ExecutionObservableSet
&
obs
const
ActivationIterator
&
activation
DebugModeOSREntryVector
&
entries
)
{
InterpreterActivation
*
act
=
activation
.
activation
(
)
-
>
asInterpreter
(
)
;
for
(
InterpreterFrameIterator
iter
(
act
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
JSScript
*
script
=
iter
.
frame
(
)
-
>
script
(
)
;
if
(
obs
.
shouldRecompileOrInvalidate
(
script
)
)
{
if
(
!
entries
.
append
(
DebugModeOSREntry
(
iter
.
frame
(
)
-
>
script
(
)
)
)
)
{
return
false
;
}
}
}
return
true
;
}
#
ifdef
JS_JITSPEW
static
const
char
*
RetAddrEntryKindToString
(
RetAddrEntry
:
:
Kind
kind
)
{
switch
(
kind
)
{
case
RetAddrEntry
:
:
Kind
:
:
IC
:
return
"
IC
"
;
case
RetAddrEntry
:
:
Kind
:
:
PrologueIC
:
return
"
prologue
IC
"
;
case
RetAddrEntry
:
:
Kind
:
:
CallVM
:
return
"
callVM
"
;
case
RetAddrEntry
:
:
Kind
:
:
StackCheck
:
return
"
stack
check
"
;
case
RetAddrEntry
:
:
Kind
:
:
InterruptCheck
:
return
"
interrupt
check
"
;
case
RetAddrEntry
:
:
Kind
:
:
DebugTrap
:
return
"
debug
trap
"
;
case
RetAddrEntry
:
:
Kind
:
:
DebugPrologue
:
return
"
debug
prologue
"
;
case
RetAddrEntry
:
:
Kind
:
:
DebugAfterYield
:
return
"
debug
after
yield
"
;
case
RetAddrEntry
:
:
Kind
:
:
DebugEpilogue
:
return
"
debug
epilogue
"
;
default
:
MOZ_CRASH
(
"
bad
RetAddrEntry
kind
"
)
;
}
}
#
endif
static
void
SpewPatchBaselineFrame
(
const
uint8_t
*
oldReturnAddress
const
uint8_t
*
newReturnAddress
JSScript
*
script
RetAddrEntry
:
:
Kind
frameKind
const
jsbytecode
*
pc
)
{
JitSpew
(
JitSpew_BaselineDebugModeOSR
"
Patch
return
%
p
-
>
%
p
on
BaselineJS
frame
(
%
s
:
%
u
:
%
u
)
from
%
s
at
%
s
"
oldReturnAddress
newReturnAddress
script
-
>
filename
(
)
script
-
>
lineno
(
)
script
-
>
column
(
)
RetAddrEntryKindToString
(
frameKind
)
CodeName
(
JSOp
(
*
pc
)
)
)
;
}
static
void
PatchBaselineFramesForDebugMode
(
JSContext
*
cx
const
DebugAPI
:
:
ExecutionObservableSet
&
obs
const
ActivationIterator
&
activation
DebugModeOSREntryVector
&
entries
size_t
*
start
)
{
const
BaselineInterpreter
&
baselineInterp
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
baselineInterpreter
(
)
;
CommonFrameLayout
*
prev
=
nullptr
;
size_t
entryIndex
=
*
start
;
for
(
OnlyJSJitFrameIter
iter
(
activation
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
const
JSJitFrameIter
&
frame
=
iter
.
frame
(
)
;
switch
(
frame
.
type
(
)
)
{
case
FrameType
:
:
BaselineJS
:
{
if
(
!
obs
.
shouldRecompileOrInvalidate
(
frame
.
script
(
)
)
)
{
break
;
}
DebugModeOSREntry
&
entry
=
entries
[
entryIndex
]
;
if
(
!
entry
.
recompiled
(
)
)
{
entryIndex
+
+
;
break
;
}
BaselineFrame
*
baselineFrame
=
frame
.
baselineFrame
(
)
;
if
(
baselineFrame
-
>
runningInInterpreter
(
)
)
{
entryIndex
+
+
;
break
;
}
JSScript
*
script
=
entry
.
script
;
uint32_t
pcOffset
=
entry
.
pcOffset
;
jsbytecode
*
pc
=
script
-
>
offsetToPC
(
pcOffset
)
;
MOZ_ASSERT
(
script
=
=
frame
.
script
(
)
)
;
MOZ_ASSERT
(
pcOffset
<
script
-
>
length
(
)
)
;
BaselineScript
*
bl
=
script
-
>
baselineScript
(
)
;
RetAddrEntry
:
:
Kind
kind
=
entry
.
frameKind
;
uint8_t
*
retAddr
=
nullptr
;
switch
(
kind
)
{
case
RetAddrEntry
:
:
Kind
:
:
IC
:
case
RetAddrEntry
:
:
Kind
:
:
CallVM
:
case
RetAddrEntry
:
:
Kind
:
:
InterruptCheck
:
case
RetAddrEntry
:
:
Kind
:
:
StackCheck
:
{
const
RetAddrEntry
*
retAddrEntry
=
nullptr
;
switch
(
kind
)
{
case
RetAddrEntry
:
:
Kind
:
:
IC
:
case
RetAddrEntry
:
:
Kind
:
:
CallVM
:
case
RetAddrEntry
:
:
Kind
:
:
InterruptCheck
:
retAddrEntry
=
&
bl
-
>
retAddrEntryFromPCOffset
(
pcOffset
kind
)
;
break
;
case
RetAddrEntry
:
:
Kind
:
:
StackCheck
:
retAddrEntry
=
&
bl
-
>
prologueRetAddrEntry
(
kind
)
;
break
;
default
:
MOZ_CRASH
(
"
Unexpected
kind
"
)
;
}
retAddr
=
bl
-
>
returnAddressForEntry
(
*
retAddrEntry
)
;
SpewPatchBaselineFrame
(
prev
-
>
returnAddress
(
)
retAddr
script
kind
pc
)
;
break
;
}
case
RetAddrEntry
:
:
Kind
:
:
DebugPrologue
:
case
RetAddrEntry
:
:
Kind
:
:
DebugEpilogue
:
case
RetAddrEntry
:
:
Kind
:
:
DebugTrap
:
case
RetAddrEntry
:
:
Kind
:
:
DebugAfterYield
:
{
if
(
kind
=
=
RetAddrEntry
:
:
Kind
:
:
DebugPrologue
)
{
frame
.
baselineFrame
(
)
-
>
switchFromJitToInterpreterAtPrologue
(
cx
)
;
}
else
{
frame
.
baselineFrame
(
)
-
>
switchFromJitToInterpreter
(
cx
pc
)
;
}
switch
(
kind
)
{
case
RetAddrEntry
:
:
Kind
:
:
DebugTrap
:
retAddr
=
baselineInterp
.
interpretOpAddr
(
)
.
value
;
break
;
case
RetAddrEntry
:
:
Kind
:
:
DebugPrologue
:
retAddr
=
baselineInterp
.
retAddrForDebugPrologueCallVM
(
)
;
break
;
case
RetAddrEntry
:
:
Kind
:
:
DebugEpilogue
:
retAddr
=
baselineInterp
.
retAddrForDebugEpilogueCallVM
(
)
;
break
;
case
RetAddrEntry
:
:
Kind
:
:
DebugAfterYield
:
retAddr
=
baselineInterp
.
retAddrForDebugAfterYieldCallVM
(
)
;
break
;
default
:
MOZ_CRASH
(
"
Unexpected
kind
"
)
;
}
SpewPatchBaselineFrame
(
prev
-
>
returnAddress
(
)
retAddr
script
kind
pc
)
;
break
;
}
case
RetAddrEntry
:
:
Kind
:
:
PrologueIC
:
case
RetAddrEntry
:
:
Kind
:
:
NonOpCallVM
:
case
RetAddrEntry
:
:
Kind
:
:
Invalid
:
MOZ_CRASH
(
"
Unexpected
RetAddrEntry
Kind
"
)
;
}
prev
-
>
setReturnAddress
(
retAddr
)
;
entryIndex
+
+
;
break
;
}
case
FrameType
:
:
IonJS
:
{
InlineFrameIterator
inlineIter
(
cx
&
frame
)
;
while
(
true
)
{
if
(
obs
.
shouldRecompileOrInvalidate
(
inlineIter
.
script
(
)
)
)
{
entryIndex
+
+
;
}
if
(
!
inlineIter
.
more
(
)
)
{
break
;
}
+
+
inlineIter
;
}
break
;
}
default
:
;
}
prev
=
frame
.
current
(
)
;
}
*
start
=
entryIndex
;
}
static
void
SkipInterpreterFrameEntries
(
const
DebugAPI
:
:
ExecutionObservableSet
&
obs
const
ActivationIterator
&
activation
size_t
*
start
)
{
size_t
entryIndex
=
*
start
;
InterpreterActivation
*
act
=
activation
.
activation
(
)
-
>
asInterpreter
(
)
;
for
(
InterpreterFrameIterator
iter
(
act
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
if
(
obs
.
shouldRecompileOrInvalidate
(
iter
.
frame
(
)
-
>
script
(
)
)
)
{
entryIndex
+
+
;
}
}
*
start
=
entryIndex
;
}
static
bool
RecompileBaselineScriptForDebugMode
(
JSContext
*
cx
JSScript
*
script
DebugAPI
:
:
IsObserving
observing
)
{
if
(
script
-
>
baselineScript
(
)
-
>
hasDebugInstrumentation
(
)
=
=
observing
)
{
return
true
;
}
JitSpew
(
JitSpew_BaselineDebugModeOSR
"
Recompiling
(
%
s
:
%
u
:
%
u
)
for
%
s
"
script
-
>
filename
(
)
script
-
>
lineno
(
)
script
-
>
column
(
)
observing
?
"
DEBUGGING
"
:
"
NORMAL
EXECUTION
"
)
;
AutoKeepJitScripts
keepJitScripts
(
cx
)
;
BaselineScript
*
oldBaselineScript
=
script
-
>
jitScript
(
)
-
>
clearBaselineScript
(
cx
-
>
defaultFreeOp
(
)
script
)
;
MethodStatus
status
=
BaselineCompile
(
cx
script
observing
)
;
if
(
status
!
=
Method_Compiled
)
{
MOZ_ASSERT
(
status
=
=
Method_Error
)
;
script
-
>
jitScript
(
)
-
>
setBaselineScript
(
script
oldBaselineScript
)
;
return
false
;
}
MOZ_ASSERT
(
script
-
>
baselineScript
(
)
-
>
hasDebugInstrumentation
(
)
=
=
observing
)
;
return
true
;
}
static
bool
InvalidateScriptsInZone
(
JSContext
*
cx
Zone
*
zone
const
Vector
<
DebugModeOSREntry
>
&
entries
)
{
RecompileInfoVector
invalid
;
for
(
UniqueScriptOSREntryIter
iter
(
entries
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
JSScript
*
script
=
iter
.
entry
(
)
.
script
;
if
(
script
-
>
zone
(
)
!
=
zone
)
{
continue
;
}
if
(
script
-
>
hasIonScript
(
)
)
{
if
(
!
invalid
.
emplaceBack
(
script
script
-
>
ionScript
(
)
-
>
compilationId
(
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
if
(
script
-
>
hasBaselineScript
(
)
)
{
CancelOffThreadIonCompile
(
script
)
;
}
}
Invalidate
(
zone
-
>
types
cx
-
>
runtime
(
)
-
>
defaultFreeOp
(
)
invalid
true
false
)
;
return
true
;
}
static
void
UndoRecompileBaselineScriptsForDebugMode
(
JSContext
*
cx
const
DebugModeOSREntryVector
&
entries
)
{
for
(
UniqueScriptOSREntryIter
iter
(
entries
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
const
DebugModeOSREntry
&
entry
=
iter
.
entry
(
)
;
JSScript
*
script
=
entry
.
script
;
BaselineScript
*
baselineScript
=
script
-
>
baselineScript
(
)
;
if
(
entry
.
recompiled
(
)
)
{
script
-
>
jitScript
(
)
-
>
setBaselineScript
(
script
entry
.
oldBaselineScript
)
;
BaselineScript
:
:
Destroy
(
cx
-
>
runtime
(
)
-
>
defaultFreeOp
(
)
baselineScript
)
;
}
}
}
bool
jit
:
:
RecompileOnStackBaselineScriptsForDebugMode
(
JSContext
*
cx
const
DebugAPI
:
:
ExecutionObservableSet
&
obs
DebugAPI
:
:
IsObserving
observing
)
{
Vector
<
DebugModeOSREntry
>
entries
(
cx
)
;
for
(
ActivationIterator
iter
(
cx
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
if
(
iter
-
>
isJit
(
)
)
{
if
(
!
CollectJitStackScripts
(
cx
obs
iter
entries
)
)
{
return
false
;
}
}
else
if
(
iter
-
>
isInterpreter
(
)
)
{
if
(
!
CollectInterpreterStackScripts
(
cx
obs
iter
entries
)
)
{
return
false
;
}
}
}
if
(
entries
.
empty
(
)
)
{
return
true
;
}
MOZ_ASSERT
(
!
cx
-
>
isProfilerSamplingEnabled
(
)
)
;
if
(
Zone
*
zone
=
obs
.
singleZone
(
)
)
{
if
(
!
InvalidateScriptsInZone
(
cx
zone
entries
)
)
{
return
false
;
}
}
else
{
using
ZoneRange
=
DebugAPI
:
:
ExecutionObservableSet
:
:
ZoneRange
;
for
(
ZoneRange
r
=
obs
.
zones
(
)
-
>
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
if
(
!
InvalidateScriptsInZone
(
cx
r
.
front
(
)
entries
)
)
{
return
false
;
}
}
}
for
(
size_t
i
=
0
;
i
<
entries
.
length
(
)
;
i
+
+
)
{
JSScript
*
script
=
entries
[
i
]
.
script
;
AutoRealm
ar
(
cx
script
)
;
if
(
!
RecompileBaselineScriptForDebugMode
(
cx
script
observing
)
)
{
UndoRecompileBaselineScriptsForDebugMode
(
cx
entries
)
;
return
false
;
}
}
for
(
UniqueScriptOSREntryIter
iter
(
entries
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
const
DebugModeOSREntry
&
entry
=
iter
.
entry
(
)
;
if
(
entry
.
recompiled
(
)
)
{
BaselineScript
:
:
Destroy
(
cx
-
>
runtime
(
)
-
>
defaultFreeOp
(
)
entry
.
oldBaselineScript
)
;
}
}
size_t
processed
=
0
;
for
(
ActivationIterator
iter
(
cx
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
if
(
iter
-
>
isJit
(
)
)
{
PatchBaselineFramesForDebugMode
(
cx
obs
iter
entries
&
processed
)
;
}
else
if
(
iter
-
>
isInterpreter
(
)
)
{
SkipInterpreterFrameEntries
(
obs
iter
&
processed
)
;
}
}
MOZ_ASSERT
(
processed
=
=
entries
.
length
(
)
)
;
return
true
;
}
