#
include
"
jit
/
WasmBCE
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
jit
/
MIRGenerator
.
h
"
#
include
"
jit
/
MIRGraph
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
typedef
js
:
:
HashMap
<
uint32_t
MDefinition
*
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
LastSeenMap
;
bool
jit
:
:
EliminateBoundsChecks
(
MIRGenerator
*
mir
MIRGraph
&
graph
)
{
JitSpew
(
JitSpew_WasmBCE
"
Begin
"
)
;
LastSeenMap
lastSeen
;
for
(
ReversePostorderIterator
bIter
(
graph
.
rpoBegin
(
)
)
;
bIter
!
=
graph
.
rpoEnd
(
)
;
bIter
+
+
)
{
MBasicBlock
*
block
=
*
bIter
;
for
(
MDefinitionIterator
dIter
(
block
)
;
dIter
;
)
{
MDefinition
*
def
=
*
dIter
+
+
;
switch
(
def
-
>
op
(
)
)
{
case
MDefinition
:
:
Opcode
:
:
WasmBoundsCheck
:
{
MWasmBoundsCheck
*
bc
=
def
-
>
toWasmBoundsCheck
(
)
;
MDefinition
*
addr
=
bc
-
>
index
(
)
;
if
(
addr
-
>
isConstant
(
)
&
&
(
(
addr
-
>
toConstant
(
)
-
>
type
(
)
=
=
MIRType
:
:
Int32
&
&
uint64_t
(
addr
-
>
toConstant
(
)
-
>
toInt32
(
)
)
<
mir
-
>
minWasmHeapLength
(
)
)
|
|
(
addr
-
>
toConstant
(
)
-
>
type
(
)
=
=
MIRType
:
:
Int64
&
&
uint64_t
(
addr
-
>
toConstant
(
)
-
>
toInt64
(
)
)
<
mir
-
>
minWasmHeapLength
(
)
)
)
)
{
bc
-
>
setRedundant
(
)
;
if
(
JitOptions
.
spectreIndexMasking
)
{
bc
-
>
replaceAllUsesWith
(
addr
)
;
}
else
{
MOZ_ASSERT
(
!
bc
-
>
hasUses
(
)
)
;
}
}
else
{
LastSeenMap
:
:
AddPtr
ptr
=
lastSeen
.
lookupForAdd
(
addr
-
>
id
(
)
)
;
if
(
ptr
)
{
MDefinition
*
prevCheckOrPhi
=
ptr
-
>
value
(
)
;
if
(
prevCheckOrPhi
-
>
block
(
)
-
>
dominates
(
block
)
)
{
bc
-
>
setRedundant
(
)
;
if
(
JitOptions
.
spectreIndexMasking
)
{
bc
-
>
replaceAllUsesWith
(
prevCheckOrPhi
)
;
}
else
{
MOZ_ASSERT
(
!
bc
-
>
hasUses
(
)
)
;
}
}
}
else
{
if
(
!
lastSeen
.
add
(
ptr
addr
-
>
id
(
)
def
)
)
{
return
false
;
}
}
}
break
;
}
case
MDefinition
:
:
Opcode
:
:
Phi
:
{
MPhi
*
phi
=
def
-
>
toPhi
(
)
;
bool
phiChecked
=
true
;
MOZ_ASSERT
(
phi
-
>
numOperands
(
)
>
0
)
;
for
(
int
i
=
0
nOps
=
phi
-
>
numOperands
(
)
;
i
<
nOps
;
i
+
+
)
{
MDefinition
*
src
=
phi
-
>
getOperand
(
i
)
;
if
(
JitOptions
.
spectreIndexMasking
)
{
if
(
src
-
>
isWasmBoundsCheck
(
)
)
{
src
=
src
-
>
toWasmBoundsCheck
(
)
-
>
index
(
)
;
}
}
else
{
MOZ_ASSERT
(
!
src
-
>
isWasmBoundsCheck
(
)
)
;
}
LastSeenMap
:
:
Ptr
checkPtr
=
lastSeen
.
lookup
(
src
-
>
id
(
)
)
;
if
(
!
checkPtr
|
|
!
checkPtr
-
>
value
(
)
-
>
block
(
)
-
>
dominates
(
block
)
)
{
phiChecked
=
false
;
break
;
}
}
if
(
phiChecked
)
{
if
(
!
lastSeen
.
put
(
def
-
>
id
(
)
def
)
)
{
return
false
;
}
}
break
;
}
default
:
break
;
}
}
}
return
true
;
}
