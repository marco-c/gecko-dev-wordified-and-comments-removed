#
ifndef
jit_JitRuntime_h
#
define
jit_JitRuntime_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
jit
/
ABIFunctions
.
h
"
#
include
"
jit
/
BaselineICList
.
h
"
#
include
"
jit
/
BaselineJIT
.
h
"
#
include
"
jit
/
CalleeToken
.
h
"
#
include
"
jit
/
InterpreterEntryTrampoline
.
h
"
#
include
"
jit
/
IonCompileTask
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
jit
/
JitCode
.
h
"
#
include
"
jit
/
JitHints
.
h
"
#
include
"
jit
/
shared
/
Assembler
-
shared
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
ProfilingFrameIterator
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
vm
/
GeckoProfiler
.
h
"
#
include
"
vm
/
Runtime
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
class
AutoLockHelperThreadState
;
class
GCMarker
;
namespace
jit
{
class
FrameSizeClass
;
class
Label
;
class
MacroAssembler
;
struct
VMFunctionData
;
enum
class
VMFunctionId
;
enum
class
BaselineICFallbackKind
:
uint8_t
{
#
define
DEF_ENUM_KIND
(
kind
)
kind
IC_BASELINE_FALLBACK_CODE_KIND_LIST
(
DEF_ENUM_KIND
)
#
undef
DEF_ENUM_KIND
Count
}
;
enum
class
BailoutReturnKind
{
GetProp
GetPropSuper
SetProp
GetElem
GetElemSuper
Call
New
Count
}
;
class
BaselineICFallbackCode
{
JitCode
*
code_
=
nullptr
;
using
OffsetArray
=
mozilla
:
:
EnumeratedArray
<
BaselineICFallbackKind
BaselineICFallbackKind
:
:
Count
uint32_t
>
;
OffsetArray
offsets_
=
{
}
;
using
BailoutReturnArray
=
mozilla
:
:
EnumeratedArray
<
BailoutReturnKind
BailoutReturnKind
:
:
Count
uint32_t
>
;
BailoutReturnArray
bailoutReturnOffsets_
=
{
}
;
public
:
BaselineICFallbackCode
(
)
=
default
;
BaselineICFallbackCode
(
const
BaselineICFallbackCode
&
)
=
delete
;
void
operator
=
(
const
BaselineICFallbackCode
&
)
=
delete
;
void
initOffset
(
BaselineICFallbackKind
kind
uint32_t
offset
)
{
offsets_
[
kind
]
=
offset
;
}
void
initCode
(
JitCode
*
code
)
{
code_
=
code
;
}
void
initBailoutReturnOffset
(
BailoutReturnKind
kind
uint32_t
offset
)
{
bailoutReturnOffsets_
[
kind
]
=
offset
;
}
TrampolinePtr
addr
(
BaselineICFallbackKind
kind
)
const
{
return
TrampolinePtr
(
code_
-
>
raw
(
)
+
offsets_
[
kind
]
)
;
}
uint8_t
*
bailoutReturnAddr
(
BailoutReturnKind
kind
)
const
{
return
code_
-
>
raw
(
)
+
bailoutReturnOffsets_
[
kind
]
;
}
}
;
enum
class
ArgumentsRectifierKind
{
Normal
TrialInlining
}
;
enum
class
DebugTrapHandlerKind
{
Interpreter
Compiler
Count
}
;
enum
class
IonGenericCallKind
{
Call
Construct
Count
}
;
using
EnterJitCode
=
void
(
*
)
(
void
*
unsigned
int
Value
*
InterpreterFrame
*
CalleeToken
JSObject
*
size_t
Value
*
)
;
class
JitcodeGlobalTable
;
class
PerfSpewerRangeRecorder
;
class
JitRuntime
{
private
:
MainThreadData
<
uint64_t
>
nextCompilationId_
{
0
}
;
MainThreadData
<
js
:
:
UniquePtr
<
uint8_t
>
>
ionOsrTempData_
{
nullptr
}
;
WriteOnceData
<
uint32_t
>
exceptionTailOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
profilerExitFrameTailOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
enterJITOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
bailoutHandlerOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
argumentsRectifierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
trialInliningArgumentsRectifierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
argumentsRectifierReturnOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
invalidatorOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
valuePreBarrierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
stringPreBarrierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
objectPreBarrierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
shapePreBarrierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
wasmAnyRefPreBarrierOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
freeStubOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
lazyLinkStubOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
interpreterStubOffset_
{
0
}
;
WriteOnceData
<
uint32_t
>
doubleToInt32ValueStubOffset_
{
0
}
;
mozilla
:
:
EnumeratedArray
<
IonGenericCallKind
IonGenericCallKind
:
:
Count
WriteOnceData
<
uint32_t
>
>
ionGenericCallStubOffset_
;
mozilla
:
:
EnumeratedArray
<
DebugTrapHandlerKind
DebugTrapHandlerKind
:
:
Count
WriteOnceData
<
JitCode
*
>
>
debugTrapHandlers_
;
BaselineInterpreter
baselineInterpreter_
;
WriteOnceData
<
JitCode
*
>
trampolineCode_
{
nullptr
}
;
WriteOnceData
<
uint32_t
>
vmInterpreterEntryOffset_
{
0
}
;
using
VMWrapperOffsets
=
Vector
<
uint32_t
0
SystemAllocPolicy
>
;
VMWrapperOffsets
functionWrapperOffsets_
;
MainThreadData
<
BaselineICFallbackCode
>
baselineICFallbackCode_
;
UnprotectedData
<
JitcodeGlobalTable
*
>
jitcodeGlobalTable_
{
nullptr
}
;
MainThreadData
<
JitHintsMap
*
>
jitHintsMap_
{
nullptr
}
;
MainThreadData
<
EntryTrampolineMap
*
>
interpreterEntryMap_
{
nullptr
}
;
#
ifdef
DEBUG
MainThreadData
<
uint32_t
>
ionBailAfterCounter_
{
0
}
;
MainThreadData
<
bool
>
ionBailAfterEnabled_
{
false
}
;
#
endif
typedef
mozilla
:
:
Atomic
<
size_t
mozilla
:
:
SequentiallyConsistent
>
NumFinishedOffThreadTasksType
;
NumFinishedOffThreadTasksType
numFinishedOffThreadTasks_
{
0
}
;
using
IonCompileTaskList
=
mozilla
:
:
LinkedList
<
js
:
:
jit
:
:
IonCompileTask
>
;
MainThreadData
<
IonCompileTaskList
>
ionLazyLinkList_
;
MainThreadData
<
size_t
>
ionLazyLinkListSize_
{
0
}
;
#
ifdef
DEBUG
MainThreadData
<
uint32_t
>
disallowArbitraryCode_
{
false
}
;
#
endif
bool
generateTrampolines
(
JSContext
*
cx
)
;
bool
generateBaselineICFallbackCode
(
JSContext
*
cx
)
;
void
generateLazyLinkStub
(
MacroAssembler
&
masm
)
;
void
generateInterpreterStub
(
MacroAssembler
&
masm
)
;
void
generateDoubleToInt32ValueStub
(
MacroAssembler
&
masm
)
;
void
generateProfilerExitFrameTailStub
(
MacroAssembler
&
masm
Label
*
profilerExitTail
)
;
void
generateExceptionTailStub
(
MacroAssembler
&
masm
Label
*
profilerExitTail
Label
*
bailoutTail
)
;
void
generateBailoutTailStub
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
;
void
generateEnterJIT
(
JSContext
*
cx
MacroAssembler
&
masm
)
;
void
generateArgumentsRectifier
(
MacroAssembler
&
masm
ArgumentsRectifierKind
kind
)
;
void
generateBailoutHandler
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
;
void
generateInvalidator
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
;
uint32_t
generatePreBarrier
(
JSContext
*
cx
MacroAssembler
&
masm
MIRType
type
)
;
void
generateFreeStub
(
MacroAssembler
&
masm
)
;
void
generateIonGenericCallStub
(
MacroAssembler
&
masm
IonGenericCallKind
kind
)
;
void
generateIonGenericCallBoundFunction
(
MacroAssembler
&
masm
Label
*
entry
Label
*
vmCall
)
;
void
generateIonGenericCallNativeFunction
(
MacroAssembler
&
masm
bool
isConstructing
)
;
void
generateIonGenericCallFunCall
(
MacroAssembler
&
masm
Label
*
entry
Label
*
vmCall
)
;
void
generateIonGenericCallArgumentsShift
(
MacroAssembler
&
masm
Register
argc
Register
curr
Register
end
Register
scratch
Label
*
done
)
;
JitCode
*
generateDebugTrapHandler
(
JSContext
*
cx
DebugTrapHandlerKind
kind
)
;
bool
generateVMWrapper
(
JSContext
*
cx
MacroAssembler
&
masm
VMFunctionId
id
const
VMFunctionData
&
f
DynFn
nativeFun
uint32_t
*
wrapperOffset
)
;
bool
generateVMWrappers
(
JSContext
*
cx
MacroAssembler
&
masm
PerfSpewerRangeRecorder
&
rangeRecorder
)
;
uint32_t
startTrampolineCode
(
MacroAssembler
&
masm
)
;
TrampolinePtr
trampolineCode
(
uint32_t
offset
)
const
{
MOZ_ASSERT
(
offset
>
0
)
;
MOZ_ASSERT
(
offset
<
trampolineCode_
-
>
instructionsSize
(
)
)
;
return
TrampolinePtr
(
trampolineCode_
-
>
raw
(
)
+
offset
)
;
}
void
generateBaselineInterpreterEntryTrampoline
(
MacroAssembler
&
masm
)
;
void
generateInterpreterEntryTrampoline
(
MacroAssembler
&
masm
)
;
void
bindLabelToOffset
(
Label
*
label
uint32_t
offset
)
{
MOZ_ASSERT
(
!
trampolineCode_
)
;
label
-
>
bind
(
offset
)
;
}
public
:
JitCode
*
generateEntryTrampolineForScript
(
JSContext
*
cx
JSScript
*
script
)
;
JitRuntime
(
)
=
default
;
~
JitRuntime
(
)
;
[
[
nodiscard
]
]
bool
initialize
(
JSContext
*
cx
)
;
static
void
TraceAtomZoneRoots
(
JSTracer
*
trc
)
;
[
[
nodiscard
]
]
static
bool
MarkJitcodeGlobalTableIteratively
(
GCMarker
*
marker
)
;
static
void
TraceWeakJitcodeGlobalTable
(
JSRuntime
*
rt
JSTracer
*
trc
)
;
const
BaselineICFallbackCode
&
baselineICFallbackCode
(
)
const
{
return
baselineICFallbackCode_
.
ref
(
)
;
}
IonCompilationId
nextCompilationId
(
)
{
return
IonCompilationId
(
nextCompilationId_
+
+
)
;
}
#
ifdef
DEBUG
bool
disallowArbitraryCode
(
)
const
{
return
disallowArbitraryCode_
;
}
void
clearDisallowArbitraryCode
(
)
{
disallowArbitraryCode_
=
false
;
}
const
void
*
addressOfDisallowArbitraryCode
(
)
const
{
return
&
disallowArbitraryCode_
.
refNoCheck
(
)
;
}
#
endif
uint8_t
*
allocateIonOsrTempData
(
size_t
size
)
;
void
freeIonOsrTempData
(
)
;
TrampolinePtr
getVMWrapper
(
VMFunctionId
funId
)
const
{
MOZ_ASSERT
(
trampolineCode_
)
;
return
trampolineCode
(
functionWrapperOffsets_
[
size_t
(
funId
)
]
)
;
}
JitCode
*
debugTrapHandler
(
JSContext
*
cx
DebugTrapHandlerKind
kind
)
;
BaselineInterpreter
&
baselineInterpreter
(
)
{
return
baselineInterpreter_
;
}
TrampolinePtr
getGenericBailoutHandler
(
)
const
{
return
trampolineCode
(
bailoutHandlerOffset_
)
;
}
TrampolinePtr
getExceptionTail
(
)
const
{
return
trampolineCode
(
exceptionTailOffset_
)
;
}
TrampolinePtr
getProfilerExitFrameTail
(
)
const
{
return
trampolineCode
(
profilerExitFrameTailOffset_
)
;
}
TrampolinePtr
getArgumentsRectifier
(
ArgumentsRectifierKind
kind
=
ArgumentsRectifierKind
:
:
Normal
)
const
{
if
(
kind
=
=
ArgumentsRectifierKind
:
:
TrialInlining
)
{
return
trampolineCode
(
trialInliningArgumentsRectifierOffset_
)
;
}
return
trampolineCode
(
argumentsRectifierOffset_
)
;
}
uint32_t
vmInterpreterEntryOffset
(
)
{
return
vmInterpreterEntryOffset_
;
}
TrampolinePtr
getArgumentsRectifierReturnAddr
(
)
const
{
return
trampolineCode
(
argumentsRectifierReturnOffset_
)
;
}
TrampolinePtr
getInvalidationThunk
(
)
const
{
return
trampolineCode
(
invalidatorOffset_
)
;
}
EnterJitCode
enterJit
(
)
const
{
return
JS_DATA_TO_FUNC_PTR
(
EnterJitCode
trampolineCode
(
enterJITOffset_
)
.
value
)
;
}
static
mozilla
:
:
Maybe
<
:
:
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
>
getCppEntryRegisters
(
JitFrameLayout
*
frameStackAddress
)
;
TrampolinePtr
preBarrier
(
MIRType
type
)
const
{
switch
(
type
)
{
case
MIRType
:
:
Value
:
return
trampolineCode
(
valuePreBarrierOffset_
)
;
case
MIRType
:
:
String
:
return
trampolineCode
(
stringPreBarrierOffset_
)
;
case
MIRType
:
:
Object
:
return
trampolineCode
(
objectPreBarrierOffset_
)
;
case
MIRType
:
:
Shape
:
return
trampolineCode
(
shapePreBarrierOffset_
)
;
case
MIRType
:
:
WasmAnyRef
:
return
trampolineCode
(
wasmAnyRefPreBarrierOffset_
)
;
default
:
MOZ_CRASH
(
)
;
}
}
TrampolinePtr
freeStub
(
)
const
{
return
trampolineCode
(
freeStubOffset_
)
;
}
TrampolinePtr
lazyLinkStub
(
)
const
{
return
trampolineCode
(
lazyLinkStubOffset_
)
;
}
TrampolinePtr
interpreterStub
(
)
const
{
return
trampolineCode
(
interpreterStubOffset_
)
;
}
TrampolinePtr
getDoubleToInt32ValueStub
(
)
const
{
return
trampolineCode
(
doubleToInt32ValueStubOffset_
)
;
}
TrampolinePtr
getIonGenericCallStub
(
IonGenericCallKind
kind
)
const
{
return
trampolineCode
(
ionGenericCallStubOffset_
[
kind
]
)
;
}
bool
hasJitcodeGlobalTable
(
)
const
{
return
jitcodeGlobalTable_
!
=
nullptr
;
}
JitcodeGlobalTable
*
getJitcodeGlobalTable
(
)
{
MOZ_ASSERT
(
hasJitcodeGlobalTable
(
)
)
;
return
jitcodeGlobalTable_
;
}
bool
hasJitHintsMap
(
)
const
{
return
jitHintsMap_
!
=
nullptr
;
}
JitHintsMap
*
getJitHintsMap
(
)
{
MOZ_ASSERT
(
hasJitHintsMap
(
)
)
;
return
jitHintsMap_
;
}
bool
hasInterpreterEntryMap
(
)
const
{
return
interpreterEntryMap_
!
=
nullptr
;
}
EntryTrampolineMap
*
getInterpreterEntryMap
(
)
{
MOZ_ASSERT
(
hasInterpreterEntryMap
(
)
)
;
return
interpreterEntryMap_
;
}
bool
isProfilerInstrumentationEnabled
(
JSRuntime
*
rt
)
{
return
rt
-
>
geckoProfiler
(
)
.
enabled
(
)
;
}
bool
isOptimizationTrackingEnabled
(
JSRuntime
*
rt
)
{
return
isProfilerInstrumentationEnabled
(
rt
)
;
}
#
ifdef
DEBUG
void
*
addressOfIonBailAfterCounter
(
)
{
return
&
ionBailAfterCounter_
;
}
void
setIonBailAfterCounter
(
uint32_t
after
)
{
ionBailAfterCounter_
=
after
;
}
bool
ionBailAfterEnabled
(
)
const
{
return
ionBailAfterEnabled_
;
}
void
setIonBailAfterEnabled
(
bool
enabled
)
{
ionBailAfterEnabled_
=
enabled
;
}
#
endif
size_t
numFinishedOffThreadTasks
(
)
const
{
return
numFinishedOffThreadTasks_
;
}
NumFinishedOffThreadTasksType
&
numFinishedOffThreadTasksRef
(
const
AutoLockHelperThreadState
&
locked
)
{
return
numFinishedOffThreadTasks_
;
}
IonCompileTaskList
&
ionLazyLinkList
(
JSRuntime
*
rt
)
;
size_t
ionLazyLinkListSize
(
)
const
{
return
ionLazyLinkListSize_
;
}
void
ionLazyLinkListRemove
(
JSRuntime
*
rt
js
:
:
jit
:
:
IonCompileTask
*
task
)
;
void
ionLazyLinkListAdd
(
JSRuntime
*
rt
js
:
:
jit
:
:
IonCompileTask
*
task
)
;
}
;
}
}
#
endif
