#
ifndef
jit_IonCacheIRCompiler_h
#
define
jit_IonCacheIRCompiler_h
#
include
"
jit
/
CacheIR
.
h
"
#
include
"
jit
/
CacheIRCompiler
.
h
"
#
include
"
jit
/
IonIC
.
h
"
namespace
js
{
namespace
jit
{
class
MOZ_RAII
IonCacheIRCompiler
:
public
CacheIRCompiler
{
public
:
friend
class
AutoSaveLiveRegisters
;
IonCacheIRCompiler
(
JSContext
*
cx
const
CacheIRWriter
&
writer
IonIC
*
ic
IonScript
*
ionScript
IonICStub
*
stub
const
PropertyTypeCheckInfo
*
typeCheckInfo
uint32_t
stubDataOffset
)
;
MOZ_MUST_USE
bool
init
(
)
;
JitCode
*
compile
(
)
;
private
:
const
CacheIRWriter
&
writer_
;
IonIC
*
ic_
;
IonScript
*
ionScript_
;
IonICStub
*
stub_
;
const
PropertyTypeCheckInfo
*
typeCheckInfo_
;
CodeOffsetJump
rejoinOffset_
;
Vector
<
CodeOffset
4
SystemAllocPolicy
>
nextCodeOffsets_
;
Maybe
<
LiveRegisterSet
>
liveRegs_
;
Maybe
<
CodeOffset
>
stubJitCodeOffset_
;
private
:
bool
savedLiveRegs_
;
template
<
typename
T
>
T
rawWordStubField
(
uint32_t
offset
)
;
template
<
typename
T
>
T
rawInt64StubField
(
uint32_t
offset
)
;
uint64_t
*
expandoGenerationStubFieldPtr
(
uint32_t
offset
)
;
void
prepareVMCall
(
MacroAssembler
&
masm
const
AutoSaveLiveRegisters
&
)
;
template
<
typename
Fn
Fn
fn
>
void
callVM
(
MacroAssembler
&
masm
)
;
MOZ_MUST_USE
bool
emitAddAndStoreSlotShared
(
CacheOp
op
)
;
MOZ_MUST_USE
bool
emitCallScriptedGetterResultShared
(
TypedOrValueRegister
receiver
TypedOrValueRegister
output
)
;
MOZ_MUST_USE
bool
emitCallNativeGetterResultShared
(
TypedOrValueRegister
receiver
const
AutoOutputRegister
&
output
AutoSaveLiveRegisters
&
save
)
;
bool
needsPostBarrier
(
)
const
;
void
pushStubCodePointer
(
)
;
#
define
DEFINE_OP
(
op
.
.
.
)
MOZ_MUST_USE
bool
emit
#
#
op
(
)
;
CACHE_IR_OPS
(
DEFINE_OP
)
#
undef
DEFINE_OP
}
;
}
}
#
endif
