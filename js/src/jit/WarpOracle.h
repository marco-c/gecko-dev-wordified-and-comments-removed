#
ifndef
jit_WarpOracle_h
#
define
jit_WarpOracle_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
jit
/
JitAllocPolicy
.
h
"
#
include
"
jit
/
JitContext
.
h
"
namespace
js
{
namespace
jit
{
class
MIRGenerator
;
#
define
WARP_OP_SNAPSHOT_LIST
(
_
)
\
_
(
WarpArguments
)
\
_
(
WarpRegExp
)
class
WarpOpSnapshot
:
public
TempObject
public
mozilla
:
:
LinkedListElement
<
WarpOpSnapshot
>
{
public
:
enum
class
Kind
:
uint16_t
{
#
define
DEF_KIND
(
KIND
)
KIND
WARP_OP_SNAPSHOT_LIST
(
DEF_KIND
)
#
undef
DEF_KIND
}
;
private
:
uint32_t
offset_
=
0
;
#
ifdef
DEBUG
Kind
kind_
;
#
endif
protected
:
WarpOpSnapshot
(
Kind
kind
uint32_t
offset
)
:
offset_
(
offset
)
{
#
ifdef
DEBUG
kind_
=
kind
;
#
endif
}
public
:
uint32_t
offset
(
)
const
{
return
offset_
;
}
template
<
typename
T
>
const
T
*
as
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
T
:
:
ThisKind
)
;
return
static_cast
<
const
T
*
>
(
this
)
;
}
}
;
using
WarpOpSnapshotList
=
mozilla
:
:
LinkedList
<
WarpOpSnapshot
>
;
class
WarpArguments
:
public
WarpOpSnapshot
{
ArgumentsObject
*
templateObj_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpArguments
;
WarpArguments
(
uint32_t
offset
ArgumentsObject
*
templateObj
)
:
WarpOpSnapshot
(
ThisKind
offset
)
templateObj_
(
templateObj
)
{
}
ArgumentsObject
*
templateObj
(
)
const
{
return
templateObj_
;
}
}
;
class
WarpRegExp
:
public
WarpOpSnapshot
{
bool
hasShared_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpRegExp
;
WarpRegExp
(
uint32_t
offset
bool
hasShared
)
:
WarpOpSnapshot
(
ThisKind
offset
)
hasShared_
(
hasShared
)
{
}
bool
hasShared
(
)
const
{
return
hasShared_
;
}
}
;
class
WarpEnvironment
{
public
:
enum
class
Kind
{
None
ConstantObject
Function
}
;
private
:
Kind
kind_
=
Kind
:
:
None
;
union
{
JSObject
*
constantObject_
;
struct
{
CallObject
*
callObjectTemplate_
;
LexicalEnvironmentObject
*
namedLambdaTemplate_
;
}
fun
;
}
;
public
:
void
initConstantObject
(
JSObject
*
obj
)
{
kind_
=
Kind
:
:
ConstantObject
;
MOZ_ASSERT
(
obj
)
;
constantObject_
=
obj
;
}
void
initFunction
(
CallObject
*
callObjectTemplate
LexicalEnvironmentObject
*
namedLambdaTemplate
)
{
kind_
=
Kind
:
:
Function
;
fun
.
callObjectTemplate_
=
callObjectTemplate
;
fun
.
namedLambdaTemplate_
=
namedLambdaTemplate
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
JSObject
*
constantObject
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
ConstantObject
)
;
return
constantObject_
;
}
CallObject
*
maybeCallObjectTemplate
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
Function
)
;
return
fun
.
callObjectTemplate_
;
}
LexicalEnvironmentObject
*
maybeNamedLambdaTemplate
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
Function
)
;
return
fun
.
namedLambdaTemplate_
;
}
}
;
class
WarpScriptSnapshot
:
public
TempObject
{
JSScript
*
script_
;
WarpEnvironment
environment_
;
WarpOpSnapshotList
opSnapshots_
;
public
:
WarpScriptSnapshot
(
JSScript
*
script
const
WarpEnvironment
&
env
WarpOpSnapshotList
&
&
opSnapshots
)
:
script_
(
script
)
environment_
(
env
)
opSnapshots_
(
std
:
:
move
(
opSnapshots
)
)
{
}
JSScript
*
script
(
)
const
{
return
script_
;
}
const
WarpEnvironment
&
environment
(
)
const
{
return
environment_
;
}
const
WarpOpSnapshotList
&
opSnapshots
(
)
const
{
return
opSnapshots_
;
}
}
;
class
WarpSnapshot
:
public
TempObject
{
WarpScriptSnapshot
*
script_
;
LexicalEnvironmentObject
*
globalLexicalEnv_
;
Value
globalLexicalEnvThis_
;
public
:
explicit
WarpSnapshot
(
JSContext
*
cx
WarpScriptSnapshot
*
script
)
;
WarpScriptSnapshot
*
script
(
)
const
{
return
script_
;
}
LexicalEnvironmentObject
*
globalLexicalEnv
(
)
const
{
return
globalLexicalEnv_
;
}
Value
globalLexicalEnvThis
(
)
const
{
return
globalLexicalEnvThis_
;
}
}
;
class
MOZ_STACK_CLASS
WarpOracle
{
JSContext
*
cx_
;
MIRGenerator
&
mirGen_
;
TempAllocator
&
alloc_
;
HandleScript
script_
;
mozilla
:
:
GenericErrorResult
<
AbortReason
>
abort
(
AbortReason
r
)
;
mozilla
:
:
GenericErrorResult
<
AbortReason
>
abort
(
AbortReason
r
const
char
*
message
.
.
.
)
;
AbortReasonOr
<
WarpEnvironment
>
createEnvironment
(
HandleScript
script
)
;
AbortReasonOr
<
WarpScriptSnapshot
*
>
createScriptSnapshot
(
HandleScript
script
)
;
public
:
WarpOracle
(
JSContext
*
cx
MIRGenerator
&
mirGen
HandleScript
script
)
;
AbortReasonOr
<
WarpSnapshot
*
>
createSnapshot
(
)
;
}
;
}
}
#
endif
