#
include
"
jit
/
SharedIC
.
h
"
#
include
"
mozilla
/
SizePrintfMacros
.
h
"
#
include
"
jslibmath
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
jit
/
BaselineDebugModeOSR
.
h
"
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
jit
/
Linker
.
h
"
#
include
"
jit
/
SharedICHelpers
.
h
"
#
ifdef
JS_ION_PERF
#
include
"
jit
/
PerfSpewer
.
h
"
#
endif
#
include
"
jit
/
VMFunctions
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
#
include
"
vm
/
Interpreter
-
inl
.
h
"
namespace
js
{
namespace
jit
{
#
ifdef
DEBUG
void
FallbackICSpew
(
JSContext
*
cx
ICFallbackStub
*
stub
const
char
*
fmt
.
.
.
)
{
if
(
JitSpewEnabled
(
JitSpew_BaselineICFallback
)
)
{
RootedScript
script
(
cx
GetTopJitJSScript
(
cx
)
)
;
jsbytecode
*
pc
=
stub
-
>
icEntry
(
)
-
>
pc
(
script
)
;
char
fmtbuf
[
100
]
;
va_list
args
;
va_start
(
args
fmt
)
;
vsnprintf
(
fmtbuf
100
fmt
args
)
;
va_end
(
args
)
;
JitSpew
(
JitSpew_BaselineICFallback
"
Fallback
hit
for
(
%
s
:
%
"
PRIuSIZE
"
)
(
pc
=
%
"
PRIuSIZE
"
line
=
%
d
uses
=
%
d
stubs
=
%
"
PRIuSIZE
"
)
:
%
s
"
script
-
>
filename
(
)
script
-
>
lineno
(
)
script
-
>
pcToOffset
(
pc
)
PCToLineNumber
(
script
pc
)
script
-
>
getWarmUpCount
(
)
stub
-
>
numOptimizedStubs
(
)
fmtbuf
)
;
}
}
void
TypeFallbackICSpew
(
JSContext
*
cx
ICTypeMonitor_Fallback
*
stub
const
char
*
fmt
.
.
.
)
{
if
(
JitSpewEnabled
(
JitSpew_BaselineICFallback
)
)
{
RootedScript
script
(
cx
GetTopJitJSScript
(
cx
)
)
;
jsbytecode
*
pc
=
stub
-
>
icEntry
(
)
-
>
pc
(
script
)
;
char
fmtbuf
[
100
]
;
va_list
args
;
va_start
(
args
fmt
)
;
vsnprintf
(
fmtbuf
100
fmt
args
)
;
va_end
(
args
)
;
JitSpew
(
JitSpew_BaselineICFallback
"
Type
monitor
fallback
hit
for
(
%
s
:
%
"
PRIuSIZE
"
)
(
pc
=
%
"
PRIuSIZE
"
line
=
%
d
uses
=
%
d
stubs
=
%
d
)
:
%
s
"
script
-
>
filename
(
)
script
-
>
lineno
(
)
script
-
>
pcToOffset
(
pc
)
PCToLineNumber
(
script
pc
)
script
-
>
getWarmUpCount
(
)
(
int
)
stub
-
>
numOptimizedMonitorStubs
(
)
fmtbuf
)
;
}
}
#
endif
ICFallbackStub
*
ICEntry
:
:
fallbackStub
(
)
const
{
return
firstStub
(
)
-
>
getChainFallback
(
)
;
}
void
ICEntry
:
:
trace
(
JSTracer
*
trc
)
{
if
(
!
hasStub
(
)
)
return
;
for
(
ICStub
*
stub
=
firstStub
(
)
;
stub
;
stub
=
stub
-
>
next
(
)
)
stub
-
>
trace
(
trc
)
;
}
ICStubConstIterator
&
ICStubConstIterator
:
:
operator
+
+
(
)
{
MOZ_ASSERT
(
currentStub_
!
=
nullptr
)
;
currentStub_
=
currentStub_
-
>
next
(
)
;
return
*
this
;
}
ICStubIterator
:
:
ICStubIterator
(
ICFallbackStub
*
fallbackStub
bool
end
)
:
icEntry_
(
fallbackStub
-
>
icEntry
(
)
)
fallbackStub_
(
fallbackStub
)
previousStub_
(
nullptr
)
currentStub_
(
end
?
fallbackStub
:
icEntry_
-
>
firstStub
(
)
)
unlinked_
(
false
)
{
}
ICStubIterator
&
ICStubIterator
:
:
operator
+
+
(
)
{
MOZ_ASSERT
(
currentStub_
-
>
next
(
)
!
=
nullptr
)
;
if
(
!
unlinked_
)
previousStub_
=
currentStub_
;
currentStub_
=
currentStub_
-
>
next
(
)
;
unlinked_
=
false
;
return
*
this
;
}
void
ICStubIterator
:
:
unlink
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
currentStub_
-
>
next
(
)
!
=
nullptr
)
;
MOZ_ASSERT
(
currentStub_
!
=
fallbackStub_
)
;
MOZ_ASSERT
(
!
unlinked_
)
;
fallbackStub_
-
>
unlinkStub
(
cx
-
>
zone
(
)
previousStub_
currentStub_
)
;
unlinked_
=
true
;
}
void
ICStub
:
:
markCode
(
JSTracer
*
trc
const
char
*
name
)
{
JitCode
*
stubJitCode
=
jitCode
(
)
;
TraceManuallyBarrieredEdge
(
trc
&
stubJitCode
name
)
;
}
void
ICStub
:
:
updateCode
(
JitCode
*
code
)
{
JitCode
:
:
writeBarrierPre
(
jitCode
(
)
)
;
stubCode_
=
code
-
>
raw
(
)
;
}
void
ICStub
:
:
trace
(
JSTracer
*
trc
)
{
markCode
(
trc
"
shared
-
stub
-
jitcode
"
)
;
if
(
isMonitoredFallback
(
)
)
{
ICTypeMonitor_Fallback
*
lastMonStub
=
toMonitoredFallbackStub
(
)
-
>
fallbackMonitorStub
(
)
;
for
(
ICStubConstIterator
iter
(
lastMonStub
-
>
firstMonitorStub
(
)
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
MOZ_ASSERT_IF
(
iter
-
>
next
(
)
=
=
nullptr
*
iter
=
=
lastMonStub
)
;
iter
-
>
trace
(
trc
)
;
}
}
if
(
isUpdated
(
)
)
{
for
(
ICStubConstIterator
iter
(
toUpdatedStub
(
)
-
>
firstUpdateStub
(
)
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
MOZ_ASSERT_IF
(
iter
-
>
next
(
)
=
=
nullptr
iter
-
>
isTypeUpdate_Fallback
(
)
)
;
iter
-
>
trace
(
trc
)
;
}
}
switch
(
kind
(
)
)
{
case
ICStub
:
:
Call_Scripted
:
{
ICCall_Scripted
*
callStub
=
toCall_Scripted
(
)
;
TraceEdge
(
trc
&
callStub
-
>
callee
(
)
"
baseline
-
callscripted
-
callee
"
)
;
if
(
callStub
-
>
templateObject
(
)
)
TraceEdge
(
trc
&
callStub
-
>
templateObject
(
)
"
baseline
-
callscripted
-
template
"
)
;
break
;
}
case
ICStub
:
:
Call_Native
:
{
ICCall_Native
*
callStub
=
toCall_Native
(
)
;
TraceEdge
(
trc
&
callStub
-
>
callee
(
)
"
baseline
-
callnative
-
callee
"
)
;
if
(
callStub
-
>
templateObject
(
)
)
TraceEdge
(
trc
&
callStub
-
>
templateObject
(
)
"
baseline
-
callnative
-
template
"
)
;
break
;
}
case
ICStub
:
:
Call_ClassHook
:
{
ICCall_ClassHook
*
callStub
=
toCall_ClassHook
(
)
;
if
(
callStub
-
>
templateObject
(
)
)
TraceEdge
(
trc
&
callStub
-
>
templateObject
(
)
"
baseline
-
callclasshook
-
template
"
)
;
break
;
}
case
ICStub
:
:
Call_StringSplit
:
{
ICCall_StringSplit
*
callStub
=
toCall_StringSplit
(
)
;
TraceEdge
(
trc
&
callStub
-
>
templateObject
(
)
"
baseline
-
callstringsplit
-
template
"
)
;
TraceEdge
(
trc
&
callStub
-
>
expectedArg
(
)
"
baseline
-
callstringsplit
-
arg
"
)
;
TraceEdge
(
trc
&
callStub
-
>
expectedThis
(
)
"
baseline
-
callstringsplit
-
this
"
)
;
break
;
}
case
ICStub
:
:
GetElem_NativeSlotName
:
case
ICStub
:
:
GetElem_NativeSlotSymbol
:
case
ICStub
:
:
GetElem_UnboxedPropertyName
:
{
ICGetElemNativeStub
*
getElemStub
=
static_cast
<
ICGetElemNativeStub
*
>
(
this
)
;
getElemStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
if
(
getElemStub
-
>
isSymbol
(
)
)
{
ICGetElem_NativeSlot
<
JS
:
:
Symbol
*
>
*
typedGetElemStub
=
toGetElem_NativeSlotSymbol
(
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
key
(
)
"
baseline
-
getelem
-
native
-
key
"
)
;
}
else
{
ICGetElemNativeSlotStub
<
PropertyName
*
>
*
typedGetElemStub
=
reinterpret_cast
<
ICGetElemNativeSlotStub
<
PropertyName
*
>
*
>
(
this
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
key
(
)
"
baseline
-
getelem
-
native
-
key
"
)
;
}
break
;
}
case
ICStub
:
:
GetElem_NativePrototypeSlotName
:
case
ICStub
:
:
GetElem_NativePrototypeSlotSymbol
:
{
ICGetElemNativeStub
*
getElemStub
=
static_cast
<
ICGetElemNativeStub
*
>
(
this
)
;
getElemStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
if
(
getElemStub
-
>
isSymbol
(
)
)
{
ICGetElem_NativePrototypeSlot
<
JS
:
:
Symbol
*
>
*
typedGetElemStub
=
toGetElem_NativePrototypeSlotSymbol
(
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
key
(
)
"
baseline
-
getelem
-
nativeproto
-
key
"
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
holder
(
)
"
baseline
-
getelem
-
nativeproto
-
holder
"
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
holderShape
(
)
"
baseline
-
getelem
-
nativeproto
-
holdershape
"
)
;
}
else
{
ICGetElem_NativePrototypeSlot
<
PropertyName
*
>
*
typedGetElemStub
=
toGetElem_NativePrototypeSlotName
(
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
key
(
)
"
baseline
-
getelem
-
nativeproto
-
key
"
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
holder
(
)
"
baseline
-
getelem
-
nativeproto
-
holder
"
)
;
TraceEdge
(
trc
&
typedGetElemStub
-
>
holderShape
(
)
"
baseline
-
getelem
-
nativeproto
-
holdershape
"
)
;
}
break
;
}
case
ICStub
:
:
GetElem_NativePrototypeCallNativeName
:
case
ICStub
:
:
GetElem_NativePrototypeCallNativeSymbol
:
case
ICStub
:
:
GetElem_NativePrototypeCallScriptedName
:
case
ICStub
:
:
GetElem_NativePrototypeCallScriptedSymbol
:
{
ICGetElemNativeStub
*
getElemStub
=
static_cast
<
ICGetElemNativeStub
*
>
(
this
)
;
getElemStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
if
(
getElemStub
-
>
isSymbol
(
)
)
{
ICGetElemNativePrototypeCallStub
<
JS
:
:
Symbol
*
>
*
callStub
=
reinterpret_cast
<
ICGetElemNativePrototypeCallStub
<
JS
:
:
Symbol
*
>
*
>
(
this
)
;
TraceEdge
(
trc
&
callStub
-
>
key
(
)
"
baseline
-
getelem
-
nativeprotocall
-
key
"
)
;
TraceEdge
(
trc
&
callStub
-
>
getter
(
)
"
baseline
-
getelem
-
nativeprotocall
-
getter
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
getelem
-
nativeprotocall
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
getelem
-
nativeprotocall
-
holdershape
"
)
;
}
else
{
ICGetElemNativePrototypeCallStub
<
PropertyName
*
>
*
callStub
=
reinterpret_cast
<
ICGetElemNativePrototypeCallStub
<
PropertyName
*
>
*
>
(
this
)
;
TraceEdge
(
trc
&
callStub
-
>
key
(
)
"
baseline
-
getelem
-
nativeprotocall
-
key
"
)
;
TraceEdge
(
trc
&
callStub
-
>
getter
(
)
"
baseline
-
getelem
-
nativeprotocall
-
getter
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
getelem
-
nativeprotocall
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
getelem
-
nativeprotocall
-
holdershape
"
)
;
}
break
;
}
case
ICStub
:
:
GetElem_Dense
:
{
ICGetElem_Dense
*
getElemStub
=
toGetElem_Dense
(
)
;
TraceEdge
(
trc
&
getElemStub
-
>
shape
(
)
"
baseline
-
getelem
-
dense
-
shape
"
)
;
break
;
}
case
ICStub
:
:
GetElem_UnboxedArray
:
{
ICGetElem_UnboxedArray
*
getElemStub
=
toGetElem_UnboxedArray
(
)
;
TraceEdge
(
trc
&
getElemStub
-
>
group
(
)
"
baseline
-
getelem
-
unboxed
-
array
-
group
"
)
;
break
;
}
case
ICStub
:
:
GetElem_TypedArray
:
{
ICGetElem_TypedArray
*
getElemStub
=
toGetElem_TypedArray
(
)
;
TraceEdge
(
trc
&
getElemStub
-
>
shape
(
)
"
baseline
-
getelem
-
typedarray
-
shape
"
)
;
break
;
}
case
ICStub
:
:
SetElem_DenseOrUnboxedArray
:
{
ICSetElem_DenseOrUnboxedArray
*
setElemStub
=
toSetElem_DenseOrUnboxedArray
(
)
;
if
(
setElemStub
-
>
shape
(
)
)
TraceEdge
(
trc
&
setElemStub
-
>
shape
(
)
"
baseline
-
getelem
-
dense
-
shape
"
)
;
TraceEdge
(
trc
&
setElemStub
-
>
group
(
)
"
baseline
-
setelem
-
dense
-
group
"
)
;
break
;
}
case
ICStub
:
:
SetElem_DenseOrUnboxedArrayAdd
:
{
ICSetElem_DenseOrUnboxedArrayAdd
*
setElemStub
=
toSetElem_DenseOrUnboxedArrayAdd
(
)
;
TraceEdge
(
trc
&
setElemStub
-
>
group
(
)
"
baseline
-
setelem
-
denseadd
-
group
"
)
;
JS_STATIC_ASSERT
(
ICSetElem_DenseOrUnboxedArrayAdd
:
:
MAX_PROTO_CHAIN_DEPTH
=
=
4
)
;
switch
(
setElemStub
-
>
protoChainDepth
(
)
)
{
case
0
:
setElemStub
-
>
toImpl
<
0
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
1
:
setElemStub
-
>
toImpl
<
1
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
2
:
setElemStub
-
>
toImpl
<
2
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
3
:
setElemStub
-
>
toImpl
<
3
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
4
:
setElemStub
-
>
toImpl
<
4
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
proto
stub
.
"
)
;
}
break
;
}
case
ICStub
:
:
SetElem_TypedArray
:
{
ICSetElem_TypedArray
*
setElemStub
=
toSetElem_TypedArray
(
)
;
TraceEdge
(
trc
&
setElemStub
-
>
shape
(
)
"
baseline
-
setelem
-
typedarray
-
shape
"
)
;
break
;
}
case
ICStub
:
:
TypeMonitor_SingleObject
:
{
ICTypeMonitor_SingleObject
*
monitorStub
=
toTypeMonitor_SingleObject
(
)
;
TraceEdge
(
trc
&
monitorStub
-
>
object
(
)
"
baseline
-
monitor
-
singleton
"
)
;
break
;
}
case
ICStub
:
:
TypeMonitor_ObjectGroup
:
{
ICTypeMonitor_ObjectGroup
*
monitorStub
=
toTypeMonitor_ObjectGroup
(
)
;
TraceEdge
(
trc
&
monitorStub
-
>
group
(
)
"
baseline
-
monitor
-
group
"
)
;
break
;
}
case
ICStub
:
:
TypeUpdate_SingleObject
:
{
ICTypeUpdate_SingleObject
*
updateStub
=
toTypeUpdate_SingleObject
(
)
;
TraceEdge
(
trc
&
updateStub
-
>
object
(
)
"
baseline
-
update
-
singleton
"
)
;
break
;
}
case
ICStub
:
:
TypeUpdate_ObjectGroup
:
{
ICTypeUpdate_ObjectGroup
*
updateStub
=
toTypeUpdate_ObjectGroup
(
)
;
TraceEdge
(
trc
&
updateStub
-
>
group
(
)
"
baseline
-
update
-
group
"
)
;
break
;
}
case
ICStub
:
:
In_Native
:
{
ICIn_Native
*
inStub
=
toIn_Native
(
)
;
TraceEdge
(
trc
&
inStub
-
>
shape
(
)
"
baseline
-
innative
-
stub
-
shape
"
)
;
TraceEdge
(
trc
&
inStub
-
>
name
(
)
"
baseline
-
innative
-
stub
-
name
"
)
;
break
;
}
case
ICStub
:
:
In_NativePrototype
:
{
ICIn_NativePrototype
*
inStub
=
toIn_NativePrototype
(
)
;
TraceEdge
(
trc
&
inStub
-
>
shape
(
)
"
baseline
-
innativeproto
-
stub
-
shape
"
)
;
TraceEdge
(
trc
&
inStub
-
>
name
(
)
"
baseline
-
innativeproto
-
stub
-
name
"
)
;
TraceEdge
(
trc
&
inStub
-
>
holder
(
)
"
baseline
-
innativeproto
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
inStub
-
>
holderShape
(
)
"
baseline
-
innativeproto
-
stub
-
holdershape
"
)
;
break
;
}
case
ICStub
:
:
In_NativeDoesNotExist
:
{
ICIn_NativeDoesNotExist
*
inStub
=
toIn_NativeDoesNotExist
(
)
;
TraceEdge
(
trc
&
inStub
-
>
name
(
)
"
baseline
-
innativedoesnotexist
-
stub
-
name
"
)
;
JS_STATIC_ASSERT
(
ICIn_NativeDoesNotExist
:
:
MAX_PROTO_CHAIN_DEPTH
=
=
8
)
;
switch
(
inStub
-
>
protoChainDepth
(
)
)
{
case
0
:
inStub
-
>
toImpl
<
0
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
1
:
inStub
-
>
toImpl
<
1
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
2
:
inStub
-
>
toImpl
<
2
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
3
:
inStub
-
>
toImpl
<
3
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
4
:
inStub
-
>
toImpl
<
4
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
5
:
inStub
-
>
toImpl
<
5
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
6
:
inStub
-
>
toImpl
<
6
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
7
:
inStub
-
>
toImpl
<
7
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
8
:
inStub
-
>
toImpl
<
8
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
proto
stub
.
"
)
;
}
break
;
}
case
ICStub
:
:
In_Dense
:
{
ICIn_Dense
*
inStub
=
toIn_Dense
(
)
;
TraceEdge
(
trc
&
inStub
-
>
shape
(
)
"
baseline
-
in
-
dense
-
shape
"
)
;
break
;
}
case
ICStub
:
:
GetName_Global
:
{
ICGetName_Global
*
globalStub
=
toGetName_Global
(
)
;
TraceEdge
(
trc
&
globalStub
-
>
shape
(
)
"
baseline
-
global
-
stub
-
shape
"
)
;
break
;
}
case
ICStub
:
:
GetName_Scope0
:
static_cast
<
ICGetName_Scope
<
0
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope1
:
static_cast
<
ICGetName_Scope
<
1
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope2
:
static_cast
<
ICGetName_Scope
<
2
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope3
:
static_cast
<
ICGetName_Scope
<
3
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope4
:
static_cast
<
ICGetName_Scope
<
4
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope5
:
static_cast
<
ICGetName_Scope
<
5
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetName_Scope6
:
static_cast
<
ICGetName_Scope
<
6
>
*
>
(
this
)
-
>
traceScopes
(
trc
)
;
break
;
case
ICStub
:
:
GetIntrinsic_Constant
:
{
ICGetIntrinsic_Constant
*
constantStub
=
toGetIntrinsic_Constant
(
)
;
TraceEdge
(
trc
&
constantStub
-
>
value
(
)
"
baseline
-
getintrinsic
-
constant
-
value
"
)
;
break
;
}
case
ICStub
:
:
GetProp_Primitive
:
{
ICGetProp_Primitive
*
propStub
=
toGetProp_Primitive
(
)
;
TraceEdge
(
trc
&
propStub
-
>
protoShape
(
)
"
baseline
-
getprop
-
primitive
-
stub
-
shape
"
)
;
break
;
}
case
ICStub
:
:
GetProp_Native
:
{
ICGetProp_Native
*
propStub
=
toGetProp_Native
(
)
;
propStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
break
;
}
case
ICStub
:
:
GetProp_NativePrototype
:
{
ICGetProp_NativePrototype
*
propStub
=
toGetProp_NativePrototype
(
)
;
propStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
TraceEdge
(
trc
&
propStub
-
>
holder
(
)
"
baseline
-
getpropnativeproto
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
propStub
-
>
holderShape
(
)
"
baseline
-
getpropnativeproto
-
stub
-
holdershape
"
)
;
break
;
}
case
ICStub
:
:
GetProp_NativeDoesNotExist
:
{
ICGetProp_NativeDoesNotExist
*
propStub
=
toGetProp_NativeDoesNotExist
(
)
;
propStub
-
>
guard
(
)
.
trace
(
trc
)
;
JS_STATIC_ASSERT
(
ICGetProp_NativeDoesNotExist
:
:
MAX_PROTO_CHAIN_DEPTH
=
=
8
)
;
switch
(
propStub
-
>
protoChainDepth
(
)
)
{
case
0
:
propStub
-
>
toImpl
<
0
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
1
:
propStub
-
>
toImpl
<
1
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
2
:
propStub
-
>
toImpl
<
2
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
3
:
propStub
-
>
toImpl
<
3
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
4
:
propStub
-
>
toImpl
<
4
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
5
:
propStub
-
>
toImpl
<
5
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
6
:
propStub
-
>
toImpl
<
6
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
7
:
propStub
-
>
toImpl
<
7
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
8
:
propStub
-
>
toImpl
<
8
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
proto
stub
.
"
)
;
}
break
;
}
case
ICStub
:
:
GetProp_Unboxed
:
{
ICGetProp_Unboxed
*
propStub
=
toGetProp_Unboxed
(
)
;
TraceEdge
(
trc
&
propStub
-
>
group
(
)
"
baseline
-
getprop
-
unboxed
-
stub
-
group
"
)
;
break
;
}
case
ICStub
:
:
GetProp_TypedObject
:
{
ICGetProp_TypedObject
*
propStub
=
toGetProp_TypedObject
(
)
;
TraceEdge
(
trc
&
propStub
-
>
shape
(
)
"
baseline
-
getprop
-
typedobject
-
stub
-
shape
"
)
;
break
;
}
case
ICStub
:
:
GetProp_CallDOMProxyNative
:
case
ICStub
:
:
GetProp_CallDOMProxyWithGenerationNative
:
{
ICGetPropCallDOMProxyNativeStub
*
propStub
;
if
(
kind
(
)
=
=
ICStub
:
:
GetProp_CallDOMProxyNative
)
propStub
=
toGetProp_CallDOMProxyNative
(
)
;
else
propStub
=
toGetProp_CallDOMProxyWithGenerationNative
(
)
;
propStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
if
(
propStub
-
>
expandoShape
(
)
)
{
TraceEdge
(
trc
&
propStub
-
>
expandoShape
(
)
"
baseline
-
getproplistbasenative
-
stub
-
expandoshape
"
)
;
}
TraceEdge
(
trc
&
propStub
-
>
holder
(
)
"
baseline
-
getproplistbasenative
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
propStub
-
>
holderShape
(
)
"
baseline
-
getproplistbasenative
-
stub
-
holdershape
"
)
;
TraceEdge
(
trc
&
propStub
-
>
getter
(
)
"
baseline
-
getproplistbasenative
-
stub
-
getter
"
)
;
break
;
}
case
ICStub
:
:
GetProp_DOMProxyShadowed
:
{
ICGetProp_DOMProxyShadowed
*
propStub
=
toGetProp_DOMProxyShadowed
(
)
;
TraceEdge
(
trc
&
propStub
-
>
shape
(
)
"
baseline
-
getproplistbaseshadowed
-
stub
-
shape
"
)
;
TraceEdge
(
trc
&
propStub
-
>
name
(
)
"
baseline
-
getproplistbaseshadowed
-
stub
-
name
"
)
;
break
;
}
case
ICStub
:
:
GetProp_CallScripted
:
{
ICGetProp_CallScripted
*
callStub
=
toGetProp_CallScripted
(
)
;
callStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
getpropcallscripted
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
getpropcallscripted
-
stub
-
holdershape
"
)
;
TraceEdge
(
trc
&
callStub
-
>
getter
(
)
"
baseline
-
getpropcallscripted
-
stub
-
getter
"
)
;
break
;
}
case
ICStub
:
:
GetProp_CallNative
:
{
ICGetProp_CallNative
*
callStub
=
toGetProp_CallNative
(
)
;
callStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
getpropcallnative
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
getpropcallnative
-
stub
-
holdershape
"
)
;
TraceEdge
(
trc
&
callStub
-
>
getter
(
)
"
baseline
-
getpropcallnative
-
stub
-
getter
"
)
;
break
;
}
case
ICStub
:
:
SetProp_Native
:
{
ICSetProp_Native
*
propStub
=
toSetProp_Native
(
)
;
TraceEdge
(
trc
&
propStub
-
>
shape
(
)
"
baseline
-
setpropnative
-
stub
-
shape
"
)
;
TraceEdge
(
trc
&
propStub
-
>
group
(
)
"
baseline
-
setpropnative
-
stub
-
group
"
)
;
break
;
}
case
ICStub
:
:
SetProp_NativeAdd
:
{
ICSetProp_NativeAdd
*
propStub
=
toSetProp_NativeAdd
(
)
;
TraceEdge
(
trc
&
propStub
-
>
group
(
)
"
baseline
-
setpropnativeadd
-
stub
-
group
"
)
;
TraceEdge
(
trc
&
propStub
-
>
newShape
(
)
"
baseline
-
setpropnativeadd
-
stub
-
newshape
"
)
;
if
(
propStub
-
>
newGroup
(
)
)
TraceEdge
(
trc
&
propStub
-
>
newGroup
(
)
"
baseline
-
setpropnativeadd
-
stub
-
new
-
group
"
)
;
JS_STATIC_ASSERT
(
ICSetProp_NativeAdd
:
:
MAX_PROTO_CHAIN_DEPTH
=
=
4
)
;
switch
(
propStub
-
>
protoChainDepth
(
)
)
{
case
0
:
propStub
-
>
toImpl
<
0
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
1
:
propStub
-
>
toImpl
<
1
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
2
:
propStub
-
>
toImpl
<
2
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
3
:
propStub
-
>
toImpl
<
3
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
case
4
:
propStub
-
>
toImpl
<
4
>
(
)
-
>
traceShapes
(
trc
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
proto
stub
.
"
)
;
}
break
;
}
case
ICStub
:
:
SetProp_Unboxed
:
{
ICSetProp_Unboxed
*
propStub
=
toSetProp_Unboxed
(
)
;
TraceEdge
(
trc
&
propStub
-
>
group
(
)
"
baseline
-
setprop
-
unboxed
-
stub
-
group
"
)
;
break
;
}
case
ICStub
:
:
SetProp_TypedObject
:
{
ICSetProp_TypedObject
*
propStub
=
toSetProp_TypedObject
(
)
;
TraceEdge
(
trc
&
propStub
-
>
shape
(
)
"
baseline
-
setprop
-
typedobject
-
stub
-
shape
"
)
;
TraceEdge
(
trc
&
propStub
-
>
group
(
)
"
baseline
-
setprop
-
typedobject
-
stub
-
group
"
)
;
break
;
}
case
ICStub
:
:
SetProp_CallScripted
:
{
ICSetProp_CallScripted
*
callStub
=
toSetProp_CallScripted
(
)
;
callStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
setpropcallscripted
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
setpropcallscripted
-
stub
-
holdershape
"
)
;
TraceEdge
(
trc
&
callStub
-
>
setter
(
)
"
baseline
-
setpropcallscripted
-
stub
-
setter
"
)
;
break
;
}
case
ICStub
:
:
SetProp_CallNative
:
{
ICSetProp_CallNative
*
callStub
=
toSetProp_CallNative
(
)
;
callStub
-
>
receiverGuard
(
)
.
trace
(
trc
)
;
TraceEdge
(
trc
&
callStub
-
>
holder
(
)
"
baseline
-
setpropcallnative
-
stub
-
holder
"
)
;
TraceEdge
(
trc
&
callStub
-
>
holderShape
(
)
"
baseline
-
setpropcallnative
-
stub
-
holdershape
"
)
;
TraceEdge
(
trc
&
callStub
-
>
setter
(
)
"
baseline
-
setpropcallnative
-
stub
-
setter
"
)
;
break
;
}
case
ICStub
:
:
InstanceOf_Function
:
{
ICInstanceOf_Function
*
instanceofStub
=
toInstanceOf_Function
(
)
;
TraceEdge
(
trc
&
instanceofStub
-
>
shape
(
)
"
baseline
-
instanceof
-
fun
-
shape
"
)
;
TraceEdge
(
trc
&
instanceofStub
-
>
prototypeObject
(
)
"
baseline
-
instanceof
-
fun
-
prototype
"
)
;
break
;
}
case
ICStub
:
:
NewArray_Fallback
:
{
ICNewArray_Fallback
*
stub
=
toNewArray_Fallback
(
)
;
if
(
stub
-
>
templateObject
(
)
)
TraceEdge
(
trc
&
stub
-
>
templateObject
(
)
"
baseline
-
newarray
-
template
"
)
;
TraceEdge
(
trc
&
stub
-
>
templateGroup
(
)
"
baseline
-
newarray
-
template
-
group
"
)
;
break
;
}
case
ICStub
:
:
NewObject_Fallback
:
{
ICNewObject_Fallback
*
stub
=
toNewObject_Fallback
(
)
;
if
(
stub
-
>
templateObject
(
)
)
TraceEdge
(
trc
&
stub
-
>
templateObject
(
)
"
baseline
-
newobject
-
template
"
)
;
break
;
}
case
ICStub
:
:
Rest_Fallback
:
{
ICRest_Fallback
*
stub
=
toRest_Fallback
(
)
;
TraceEdge
(
trc
&
stub
-
>
templateObject
(
)
"
baseline
-
rest
-
template
"
)
;
break
;
}
default
:
break
;
}
}
void
ICFallbackStub
:
:
unlinkStub
(
Zone
*
zone
ICStub
*
prev
ICStub
*
stub
)
{
MOZ_ASSERT
(
stub
-
>
next
(
)
)
;
if
(
stub
-
>
next
(
)
=
=
this
)
{
MOZ_ASSERT
(
lastStubPtrAddr_
=
=
stub
-
>
addressOfNext
(
)
)
;
if
(
prev
)
lastStubPtrAddr_
=
prev
-
>
addressOfNext
(
)
;
else
lastStubPtrAddr_
=
icEntry
(
)
-
>
addressOfFirstStub
(
)
;
*
lastStubPtrAddr_
=
this
;
}
else
{
if
(
prev
)
{
MOZ_ASSERT
(
prev
-
>
next
(
)
=
=
stub
)
;
prev
-
>
setNext
(
stub
-
>
next
(
)
)
;
}
else
{
MOZ_ASSERT
(
icEntry
(
)
-
>
firstStub
(
)
=
=
stub
)
;
icEntry
(
)
-
>
setFirstStub
(
stub
-
>
next
(
)
)
;
}
}
MOZ_ASSERT
(
numOptimizedStubs_
>
0
)
;
numOptimizedStubs_
-
-
;
if
(
zone
-
>
needsIncrementalBarrier
(
)
)
{
stub
-
>
trace
(
zone
-
>
barrierTracer
(
)
)
;
}
if
(
ICStub
:
:
CanMakeCalls
(
stub
-
>
kind
(
)
)
&
&
stub
-
>
isMonitored
(
)
)
{
ICTypeMonitor_Fallback
*
monitorFallback
=
toMonitoredFallbackStub
(
)
-
>
fallbackMonitorStub
(
)
;
stub
-
>
toMonitoredStub
(
)
-
>
resetFirstMonitorStub
(
monitorFallback
)
;
}
#
ifdef
DEBUG
if
(
!
ICStub
:
:
CanMakeCalls
(
stub
-
>
kind
(
)
)
)
stub
-
>
stubCode_
=
(
uint8_t
*
)
0xbad
;
#
endif
}
void
ICFallbackStub
:
:
unlinkStubsWithKind
(
JSContext
*
cx
ICStub
:
:
Kind
kind
)
{
for
(
ICStubIterator
iter
=
beginChain
(
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
if
(
iter
-
>
kind
(
)
=
=
kind
)
iter
.
unlink
(
cx
)
;
}
}
void
ICTypeMonitor_Fallback
:
:
resetMonitorStubChain
(
Zone
*
zone
)
{
if
(
zone
-
>
needsIncrementalBarrier
(
)
)
{
for
(
ICStub
*
s
=
firstMonitorStub_
;
!
s
-
>
isTypeMonitor_Fallback
(
)
;
s
=
s
-
>
next
(
)
)
s
-
>
trace
(
zone
-
>
barrierTracer
(
)
)
;
}
firstMonitorStub_
=
this
;
numOptimizedMonitorStubs_
=
0
;
if
(
hasFallbackStub_
)
{
lastMonitorStubPtrAddr_
=
nullptr
;
for
(
ICStubConstIterator
iter
=
mainFallbackStub_
-
>
beginChainConst
(
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
if
(
!
iter
-
>
isMonitored
(
)
)
continue
;
iter
-
>
toMonitoredStub
(
)
-
>
resetFirstMonitorStub
(
this
)
;
}
}
else
{
icEntry_
-
>
setFirstStub
(
this
)
;
lastMonitorStubPtrAddr_
=
icEntry_
-
>
addressOfFirstStub
(
)
;
}
}
ICMonitoredStub
:
:
ICMonitoredStub
(
Kind
kind
JitCode
*
stubCode
ICStub
*
firstMonitorStub
)
:
ICStub
(
kind
ICStub
:
:
Monitored
stubCode
)
firstMonitorStub_
(
firstMonitorStub
)
{
MOZ_ASSERT_IF
(
firstMonitorStub_
-
>
isTypeMonitor_Fallback
(
)
firstMonitorStub_
-
>
toTypeMonitor_Fallback
(
)
-
>
firstMonitorStub
(
)
=
=
firstMonitorStub_
)
;
}
bool
ICMonitoredFallbackStub
:
:
initMonitoringChain
(
JSContext
*
cx
ICStubSpace
*
space
)
{
MOZ_ASSERT
(
fallbackMonitorStub_
=
=
nullptr
)
;
ICTypeMonitor_Fallback
:
:
Compiler
compiler
(
cx
this
)
;
ICTypeMonitor_Fallback
*
stub
=
compiler
.
getStub
(
space
)
;
if
(
!
stub
)
return
false
;
fallbackMonitorStub_
=
stub
;
return
true
;
}
bool
ICMonitoredFallbackStub
:
:
addMonitorStubForValue
(
JSContext
*
cx
JSScript
*
script
HandleValue
val
)
{
return
fallbackMonitorStub_
-
>
addMonitorStubForValue
(
cx
script
val
)
;
}
bool
ICUpdatedStub
:
:
initUpdatingChain
(
JSContext
*
cx
ICStubSpace
*
space
)
{
MOZ_ASSERT
(
firstUpdateStub_
=
=
nullptr
)
;
ICTypeUpdate_Fallback
:
:
Compiler
compiler
(
cx
)
;
ICTypeUpdate_Fallback
*
stub
=
compiler
.
getStub
(
space
)
;
if
(
!
stub
)
return
false
;
firstUpdateStub_
=
stub
;
return
true
;
}
JitCode
*
ICStubCompiler
:
:
getStubCode
(
)
{
JitCompartment
*
comp
=
cx
-
>
compartment
(
)
-
>
jitCompartment
(
)
;
uint32_t
stubKey
=
getKey
(
)
;
JitCode
*
stubCode
=
comp
-
>
getStubCode
(
stubKey
)
;
if
(
stubCode
)
return
stubCode
;
JitContext
jctx
(
cx
nullptr
)
;
MacroAssembler
masm
;
#
ifdef
JS_CODEGEN_ARM
masm
.
setSecondScratchReg
(
BaselineSecondScratchReg
)
;
#
endif
if
(
!
generateStubCode
(
masm
)
)
return
nullptr
;
Linker
linker
(
masm
)
;
AutoFlushICache
afc
(
"
getStubCode
"
)
;
Rooted
<
JitCode
*
>
newStubCode
(
cx
linker
.
newCode
<
CanGC
>
(
cx
BASELINE_CODE
)
)
;
if
(
!
newStubCode
)
return
nullptr
;
if
(
!
postGenerateStubCode
(
masm
newStubCode
)
)
return
nullptr
;
if
(
cx
-
>
zone
(
)
-
>
needsIncrementalBarrier
(
)
)
newStubCode
-
>
togglePreBarriers
(
true
)
;
if
(
!
comp
-
>
putStubCode
(
stubKey
newStubCode
)
)
return
nullptr
;
MOZ_ASSERT
(
entersStubFrame_
=
=
ICStub
:
:
CanMakeCalls
(
kind
)
)
;
MOZ_ASSERT
(
!
inStubFrame_
)
;
#
ifdef
JS_ION_PERF
writePerfSpewerJitCodeProfile
(
newStubCode
"
BaselineIC
"
)
;
#
endif
return
newStubCode
;
}
bool
ICStubCompiler
:
:
tailCallVM
(
const
VMFunction
&
fun
MacroAssembler
&
masm
)
{
JitCode
*
code
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
getVMWrapper
(
fun
)
;
if
(
!
code
)
return
false
;
MOZ_ASSERT
(
fun
.
expectTailCall
=
=
TailCall
)
;
uint32_t
argSize
=
fun
.
explicitStackSlots
(
)
*
sizeof
(
void
*
)
;
EmitTailCallVM
(
code
masm
argSize
)
;
return
true
;
}
bool
ICStubCompiler
:
:
callVM
(
const
VMFunction
&
fun
MacroAssembler
&
masm
)
{
MOZ_ASSERT
(
inStubFrame_
)
;
JitCode
*
code
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
getVMWrapper
(
fun
)
;
if
(
!
code
)
return
false
;
MOZ_ASSERT
(
fun
.
expectTailCall
=
=
NonTailCall
)
;
EmitCallVM
(
code
masm
)
;
return
true
;
}
bool
ICStubCompiler
:
:
callTypeUpdateIC
(
MacroAssembler
&
masm
uint32_t
objectOffset
)
{
JitCode
*
code
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
getVMWrapper
(
DoTypeUpdateFallbackInfo
)
;
if
(
!
code
)
return
false
;
EmitCallTypeUpdateIC
(
masm
code
objectOffset
)
;
return
true
;
}
void
ICStubCompiler
:
:
enterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
{
EmitEnterStubFrame
(
masm
scratch
)
;
MOZ_ASSERT
(
!
inStubFrame_
)
;
inStubFrame_
=
true
;
#
ifdef
DEBUG
entersStubFrame_
=
true
;
#
endif
}
void
ICStubCompiler
:
:
leaveStubFrame
(
MacroAssembler
&
masm
bool
calledIntoIon
)
{
MOZ_ASSERT
(
entersStubFrame_
&
&
inStubFrame_
)
;
inStubFrame_
=
false
;
EmitLeaveStubFrame
(
masm
calledIntoIon
)
;
}
void
ICStubCompiler
:
:
pushFramePtr
(
MacroAssembler
&
masm
Register
scratch
)
{
if
(
inStubFrame_
)
{
masm
.
loadPtr
(
Address
(
BaselineFrameReg
0
)
scratch
)
;
masm
.
pushBaselineFramePtr
(
scratch
scratch
)
;
}
else
{
masm
.
pushBaselineFramePtr
(
BaselineFrameReg
scratch
)
;
}
}
bool
ICStubCompiler
:
:
emitPostWriteBarrierSlot
(
MacroAssembler
&
masm
Register
obj
ValueOperand
val
Register
scratch
LiveGeneralRegisterSet
saveRegs
)
{
Label
skipBarrier
;
masm
.
branchPtrInNurseryRange
(
Assembler
:
:
Equal
obj
scratch
&
skipBarrier
)
;
masm
.
branchValueIsNurseryObject
(
Assembler
:
:
NotEqual
val
scratch
&
skipBarrier
)
;
#
if
defined
(
JS_CODEGEN_ARM
)
|
|
defined
(
JS_CODEGEN_MIPS32
)
saveRegs
.
add
(
ICTailCallReg
)
;
#
endif
saveRegs
.
set
(
)
=
GeneralRegisterSet
:
:
Intersect
(
saveRegs
.
set
(
)
GeneralRegisterSet
:
:
Volatile
(
)
)
;
masm
.
PushRegsInMask
(
saveRegs
)
;
masm
.
setupUnalignedABICall
(
scratch
)
;
masm
.
movePtr
(
ImmPtr
(
cx
-
>
runtime
(
)
)
scratch
)
;
masm
.
passABIArg
(
scratch
)
;
masm
.
passABIArg
(
obj
)
;
masm
.
callWithABI
(
JS_FUNC_TO_DATA_PTR
(
void
*
PostWriteBarrier
)
)
;
masm
.
PopRegsInMask
(
saveRegs
)
;
masm
.
bind
(
&
skipBarrier
)
;
return
true
;
}
static
ICStubCompiler
:
:
Engine
SharedStubEngine
(
BaselineFrame
*
frame
)
{
return
frame
?
ICStubCompiler
:
:
Engine
:
:
Baseline
:
ICStubCompiler
:
:
Engine
:
:
IonMonkey
;
}
static
JSScript
*
SharedStubScript
(
BaselineFrame
*
frame
ICFallbackStub
*
stub
)
{
ICStubCompiler
:
:
Engine
engine
=
SharedStubEngine
(
frame
)
;
if
(
engine
=
=
ICStubCompiler
:
:
Engine
:
:
Baseline
)
return
frame
-
>
script
(
)
;
IonICEntry
*
entry
=
(
IonICEntry
*
)
stub
-
>
icEntry
(
)
;
return
entry
-
>
script
(
)
;
}
static
bool
DoBinaryArithFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICBinaryArith_Fallback
*
stub_
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
ret
)
{
ICStubCompiler
:
:
Engine
engine
=
SharedStubEngine
(
frame
)
;
RootedScript
script
(
cx
SharedStubScript
(
frame
stub_
)
)
;
DebugModeOSRVolatileStub
<
ICBinaryArith_Fallback
*
>
stub
(
frame
stub_
)
;
jsbytecode
*
pc
=
stub
-
>
icEntry
(
)
-
>
pc
(
script
)
;
JSOp
op
=
JSOp
(
*
pc
)
;
FallbackICSpew
(
cx
stub
"
BinaryArith
(
%
s
%
d
%
d
)
"
js_CodeName
[
op
]
int
(
lhs
.
isDouble
(
)
?
JSVAL_TYPE_DOUBLE
:
lhs
.
extractNonDoubleType
(
)
)
int
(
rhs
.
isDouble
(
)
?
JSVAL_TYPE_DOUBLE
:
rhs
.
extractNonDoubleType
(
)
)
)
;
RootedValue
lhsCopy
(
cx
lhs
)
;
RootedValue
rhsCopy
(
cx
rhs
)
;
switch
(
op
)
{
case
JSOP_ADD
:
if
(
!
AddValues
(
cx
&
lhsCopy
&
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_SUB
:
if
(
!
SubValues
(
cx
&
lhsCopy
&
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_MUL
:
if
(
!
MulValues
(
cx
&
lhsCopy
&
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_DIV
:
if
(
!
DivValues
(
cx
&
lhsCopy
&
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_MOD
:
if
(
!
ModValues
(
cx
&
lhsCopy
&
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_POW
:
if
(
!
math_pow_handle
(
cx
lhsCopy
rhsCopy
ret
)
)
return
false
;
break
;
case
JSOP_BITOR
:
{
int32_t
result
;
if
(
!
BitOr
(
cx
lhs
rhs
&
result
)
)
return
false
;
ret
.
setInt32
(
result
)
;
break
;
}
case
JSOP_BITXOR
:
{
int32_t
result
;
if
(
!
BitXor
(
cx
lhs
rhs
&
result
)
)
return
false
;
ret
.
setInt32
(
result
)
;
break
;
}
case
JSOP_BITAND
:
{
int32_t
result
;
if
(
!
BitAnd
(
cx
lhs
rhs
&
result
)
)
return
false
;
ret
.
setInt32
(
result
)
;
break
;
}
case
JSOP_LSH
:
{
int32_t
result
;
if
(
!
BitLsh
(
cx
lhs
rhs
&
result
)
)
return
false
;
ret
.
setInt32
(
result
)
;
break
;
}
case
JSOP_RSH
:
{
int32_t
result
;
if
(
!
BitRsh
(
cx
lhs
rhs
&
result
)
)
return
false
;
ret
.
setInt32
(
result
)
;
break
;
}
case
JSOP_URSH
:
{
if
(
!
UrshOperation
(
cx
lhs
rhs
ret
)
)
return
false
;
break
;
}
default
:
MOZ_CRASH
(
"
Unhandled
baseline
arith
op
"
)
;
}
if
(
stub
.
invalid
(
)
)
return
true
;
if
(
ret
.
isDouble
(
)
)
stub
-
>
setSawDoubleResult
(
)
;
if
(
stub
-
>
numOptimizedStubs
(
)
>
=
ICBinaryArith_Fallback
:
:
MAX_OPTIMIZED_STUBS
)
{
stub
-
>
noteUnoptimizableOperands
(
)
;
return
true
;
}
if
(
op
=
=
JSOP_ADD
)
{
if
(
lhs
.
isString
(
)
&
&
rhs
.
isString
(
)
)
{
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
String
String
)
stub
"
js_CodeName
[
op
]
)
;
MOZ_ASSERT
(
ret
.
isString
(
)
)
;
ICBinaryArith_StringConcat
:
:
Compiler
compiler
(
cx
engine
)
;
ICStub
*
strcatStub
=
compiler
.
getStub
(
compiler
.
getStubSpace
(
script
)
)
;
if
(
!
strcatStub
)
return
false
;
stub
-
>
addNewStub
(
strcatStub
)
;
return
true
;
}
if
(
(
lhs
.
isString
(
)
&
&
rhs
.
isObject
(
)
)
|
|
(
lhs
.
isObject
(
)
&
&
rhs
.
isString
(
)
)
)
{
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
%
s
%
s
)
stub
"
js_CodeName
[
op
]
lhs
.
isString
(
)
?
"
String
"
:
"
Object
"
lhs
.
isString
(
)
?
"
Object
"
:
"
String
"
)
;
MOZ_ASSERT
(
ret
.
isString
(
)
)
;
ICBinaryArith_StringObjectConcat
:
:
Compiler
compiler
(
cx
engine
lhs
.
isString
(
)
)
;
ICStub
*
strcatStub
=
compiler
.
getStub
(
compiler
.
getStubSpace
(
script
)
)
;
if
(
!
strcatStub
)
return
false
;
stub
-
>
addNewStub
(
strcatStub
)
;
return
true
;
}
}
if
(
(
(
lhs
.
isBoolean
(
)
&
&
(
rhs
.
isBoolean
(
)
|
|
rhs
.
isInt32
(
)
)
)
|
|
(
rhs
.
isBoolean
(
)
&
&
(
lhs
.
isBoolean
(
)
|
|
lhs
.
isInt32
(
)
)
)
)
&
&
(
op
=
=
JSOP_ADD
|
|
op
=
=
JSOP_SUB
|
|
op
=
=
JSOP_BITOR
|
|
op
=
=
JSOP_BITAND
|
|
op
=
=
JSOP_BITXOR
)
)
{
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
%
s
%
s
)
stub
"
js_CodeName
[
op
]
lhs
.
isBoolean
(
)
?
"
Boolean
"
:
"
Int32
"
rhs
.
isBoolean
(
)
?
"
Boolean
"
:
"
Int32
"
)
;
ICBinaryArith_BooleanWithInt32
:
:
Compiler
compiler
(
cx
op
engine
lhs
.
isBoolean
(
)
rhs
.
isBoolean
(
)
)
;
ICStub
*
arithStub
=
compiler
.
getStub
(
compiler
.
getStubSpace
(
script
)
)
;
if
(
!
arithStub
)
return
false
;
stub
-
>
addNewStub
(
arithStub
)
;
return
true
;
}
if
(
!
lhs
.
isNumber
(
)
|
|
!
rhs
.
isNumber
(
)
)
{
stub
-
>
noteUnoptimizableOperands
(
)
;
return
true
;
}
MOZ_ASSERT
(
ret
.
isNumber
(
)
)
;
if
(
lhs
.
isDouble
(
)
|
|
rhs
.
isDouble
(
)
|
|
ret
.
isDouble
(
)
)
{
if
(
!
cx
-
>
runtime
(
)
-
>
jitSupportsFloatingPoint
)
return
true
;
switch
(
op
)
{
case
JSOP_ADD
:
case
JSOP_SUB
:
case
JSOP_MUL
:
case
JSOP_DIV
:
case
JSOP_MOD
:
{
stub
-
>
unlinkStubsWithKind
(
cx
ICStub
:
:
BinaryArith_Int32
)
;
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
Double
Double
)
stub
"
js_CodeName
[
op
]
)
;
ICBinaryArith_Double
:
:
Compiler
compiler
(
cx
op
engine
)
;
ICStub
*
doubleStub
=
compiler
.
getStub
(
compiler
.
getStubSpace
(
script
)
)
;
if
(
!
doubleStub
)
return
false
;
stub
-
>
addNewStub
(
doubleStub
)
;
return
true
;
}
default
:
break
;
}
}
if
(
lhs
.
isInt32
(
)
&
&
rhs
.
isInt32
(
)
&
&
op
!
=
JSOP_POW
)
{
bool
allowDouble
=
ret
.
isDouble
(
)
;
if
(
allowDouble
)
stub
-
>
unlinkStubsWithKind
(
cx
ICStub
:
:
BinaryArith_Int32
)
;
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
Int32
Int32
%
s
)
stub
"
js_CodeName
[
op
]
allowDouble
?
"
=
>
Double
"
:
"
"
)
;
ICBinaryArith_Int32
:
:
Compiler
compilerInt32
(
cx
op
engine
allowDouble
)
;
ICStub
*
int32Stub
=
compilerInt32
.
getStub
(
compilerInt32
.
getStubSpace
(
script
)
)
;
if
(
!
int32Stub
)
return
false
;
stub
-
>
addNewStub
(
int32Stub
)
;
return
true
;
}
if
(
(
(
lhs
.
isDouble
(
)
&
&
rhs
.
isInt32
(
)
)
|
|
(
lhs
.
isInt32
(
)
&
&
rhs
.
isDouble
(
)
)
)
&
&
ret
.
isInt32
(
)
)
{
switch
(
op
)
{
case
JSOP_BITOR
:
case
JSOP_BITXOR
:
case
JSOP_BITAND
:
{
JitSpew
(
JitSpew_BaselineIC
"
Generating
%
s
(
%
s
%
s
)
stub
"
js_CodeName
[
op
]
lhs
.
isDouble
(
)
?
"
Double
"
:
"
Int32
"
lhs
.
isDouble
(
)
?
"
Int32
"
:
"
Double
"
)
;
ICBinaryArith_DoubleWithInt32
:
:
Compiler
compiler
(
cx
op
engine
lhs
.
isDouble
(
)
)
;
ICStub
*
optStub
=
compiler
.
getStub
(
compiler
.
getStubSpace
(
script
)
)
;
if
(
!
optStub
)
return
false
;
stub
-
>
addNewStub
(
optStub
)
;
return
true
;
}
default
:
break
;
}
}
stub
-
>
noteUnoptimizableOperands
(
)
;
return
true
;
}
typedef
bool
(
*
DoBinaryArithFallbackFn
)
(
JSContext
*
BaselineFrame
*
ICBinaryArith_Fallback
*
HandleValue
HandleValue
MutableHandleValue
)
;
static
const
VMFunction
DoBinaryArithFallbackInfo
=
FunctionInfo
<
DoBinaryArithFallbackFn
>
(
DoBinaryArithFallback
TailCall
PopValues
(
2
)
)
;
bool
ICBinaryArith_Fallback
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
MOZ_ASSERT
(
R0
=
=
JSReturnOperand
)
;
EmitRestoreTailCallReg
(
masm
)
;
masm
.
pushValue
(
R0
)
;
masm
.
pushValue
(
R1
)
;
masm
.
pushValue
(
R1
)
;
masm
.
pushValue
(
R0
)
;
masm
.
push
(
ICStubReg
)
;
pushFramePtr
(
masm
R0
.
scratchReg
(
)
)
;
return
tailCallVM
(
DoBinaryArithFallbackInfo
masm
)
;
}
static
bool
DoConcatStrings
(
JSContext
*
cx
HandleString
lhs
HandleString
rhs
MutableHandleValue
res
)
{
JSString
*
result
=
ConcatStrings
<
CanGC
>
(
cx
lhs
rhs
)
;
if
(
!
result
)
return
false
;
res
.
setString
(
result
)
;
return
true
;
}
typedef
bool
(
*
DoConcatStringsFn
)
(
JSContext
*
HandleString
HandleString
MutableHandleValue
)
;
static
const
VMFunction
DoConcatStringsInfo
=
FunctionInfo
<
DoConcatStringsFn
>
(
DoConcatStrings
TailCall
)
;
bool
ICBinaryArith_StringConcat
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
;
masm
.
branchTestString
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestString
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
EmitRestoreTailCallReg
(
masm
)
;
masm
.
unboxString
(
R0
R0
.
scratchReg
(
)
)
;
masm
.
unboxString
(
R1
R1
.
scratchReg
(
)
)
;
masm
.
push
(
R1
.
scratchReg
(
)
)
;
masm
.
push
(
R0
.
scratchReg
(
)
)
;
if
(
!
tailCallVM
(
DoConcatStringsInfo
masm
)
)
return
false
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
static
JSString
*
ConvertObjectToStringForConcat
(
JSContext
*
cx
HandleValue
obj
)
{
MOZ_ASSERT
(
obj
.
isObject
(
)
)
;
RootedValue
rootedObj
(
cx
obj
)
;
if
(
!
ToPrimitive
(
cx
&
rootedObj
)
)
return
nullptr
;
return
ToString
<
CanGC
>
(
cx
rootedObj
)
;
}
static
bool
DoConcatStringObject
(
JSContext
*
cx
bool
lhsIsString
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
res
)
{
JSString
*
lstr
=
nullptr
;
JSString
*
rstr
=
nullptr
;
if
(
lhsIsString
)
{
MOZ_ASSERT
(
lhs
.
isString
(
)
&
&
rhs
.
isObject
(
)
)
;
rstr
=
ConvertObjectToStringForConcat
(
cx
rhs
)
;
if
(
!
rstr
)
return
false
;
lstr
=
lhs
.
toString
(
)
;
}
else
{
MOZ_ASSERT
(
rhs
.
isString
(
)
&
&
lhs
.
isObject
(
)
)
;
lstr
=
ConvertObjectToStringForConcat
(
cx
lhs
)
;
if
(
!
lstr
)
return
false
;
rstr
=
rhs
.
toString
(
)
;
}
JSString
*
str
=
ConcatStrings
<
NoGC
>
(
cx
lstr
rstr
)
;
if
(
!
str
)
{
RootedString
nlstr
(
cx
lstr
)
nrstr
(
cx
rstr
)
;
str
=
ConcatStrings
<
CanGC
>
(
cx
nlstr
nrstr
)
;
if
(
!
str
)
return
false
;
}
res
.
setString
(
str
)
;
return
true
;
}
typedef
bool
(
*
DoConcatStringObjectFn
)
(
JSContext
*
bool
lhsIsString
HandleValue
HandleValue
MutableHandleValue
)
;
static
const
VMFunction
DoConcatStringObjectInfo
=
FunctionInfo
<
DoConcatStringObjectFn
>
(
DoConcatStringObject
TailCall
PopValues
(
2
)
)
;
bool
ICBinaryArith_StringObjectConcat
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
;
if
(
lhsIsString_
)
{
masm
.
branchTestString
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestObject
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
}
else
{
masm
.
branchTestObject
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestString
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
}
EmitRestoreTailCallReg
(
masm
)
;
masm
.
pushValue
(
R0
)
;
masm
.
pushValue
(
R1
)
;
masm
.
pushValue
(
R1
)
;
masm
.
pushValue
(
R0
)
;
masm
.
push
(
Imm32
(
lhsIsString_
)
)
;
if
(
!
tailCallVM
(
DoConcatStringObjectInfo
masm
)
)
return
false
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
bool
ICBinaryArith_Double
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
;
masm
.
ensureDouble
(
R0
FloatReg0
&
failure
)
;
masm
.
ensureDouble
(
R1
FloatReg1
&
failure
)
;
switch
(
op
)
{
case
JSOP_ADD
:
masm
.
addDouble
(
FloatReg1
FloatReg0
)
;
break
;
case
JSOP_SUB
:
masm
.
subDouble
(
FloatReg1
FloatReg0
)
;
break
;
case
JSOP_MUL
:
masm
.
mulDouble
(
FloatReg1
FloatReg0
)
;
break
;
case
JSOP_DIV
:
masm
.
divDouble
(
FloatReg1
FloatReg0
)
;
break
;
case
JSOP_MOD
:
masm
.
setupUnalignedABICall
(
R0
.
scratchReg
(
)
)
;
masm
.
passABIArg
(
FloatReg0
MoveOp
:
:
DOUBLE
)
;
masm
.
passABIArg
(
FloatReg1
MoveOp
:
:
DOUBLE
)
;
masm
.
callWithABI
(
JS_FUNC_TO_DATA_PTR
(
void
*
NumberMod
)
MoveOp
:
:
DOUBLE
)
;
MOZ_ASSERT
(
ReturnDoubleReg
=
=
FloatReg0
)
;
break
;
default
:
MOZ_CRASH
(
"
Unexpected
op
"
)
;
}
masm
.
boxDouble
(
FloatReg0
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
bool
ICBinaryArith_BooleanWithInt32
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
;
if
(
lhsIsBool_
)
masm
.
branchTestBoolean
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
else
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
if
(
rhsIsBool_
)
masm
.
branchTestBoolean
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
else
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
Register
lhsReg
=
lhsIsBool_
?
masm
.
extractBoolean
(
R0
ExtractTemp0
)
:
masm
.
extractInt32
(
R0
ExtractTemp0
)
;
Register
rhsReg
=
rhsIsBool_
?
masm
.
extractBoolean
(
R1
ExtractTemp1
)
:
masm
.
extractInt32
(
R1
ExtractTemp1
)
;
MOZ_ASSERT
(
op_
=
=
JSOP_ADD
|
|
op_
=
=
JSOP_SUB
|
|
op_
=
=
JSOP_BITOR
|
|
op_
=
=
JSOP_BITXOR
|
|
op_
=
=
JSOP_BITAND
)
;
switch
(
op_
)
{
case
JSOP_ADD
:
{
Label
fixOverflow
;
masm
.
branchAdd32
(
Assembler
:
:
Overflow
rhsReg
lhsReg
&
fixOverflow
)
;
masm
.
tagValue
(
JSVAL_TYPE_INT32
lhsReg
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
fixOverflow
)
;
masm
.
sub32
(
rhsReg
lhsReg
)
;
break
;
}
case
JSOP_SUB
:
{
Label
fixOverflow
;
masm
.
branchSub32
(
Assembler
:
:
Overflow
rhsReg
lhsReg
&
fixOverflow
)
;
masm
.
tagValue
(
JSVAL_TYPE_INT32
lhsReg
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
fixOverflow
)
;
masm
.
add32
(
rhsReg
lhsReg
)
;
break
;
}
case
JSOP_BITOR
:
{
masm
.
orPtr
(
rhsReg
lhsReg
)
;
masm
.
tagValue
(
JSVAL_TYPE_INT32
lhsReg
R0
)
;
EmitReturnFromIC
(
masm
)
;
break
;
}
case
JSOP_BITXOR
:
{
masm
.
xorPtr
(
rhsReg
lhsReg
)
;
masm
.
tagValue
(
JSVAL_TYPE_INT32
lhsReg
R0
)
;
EmitReturnFromIC
(
masm
)
;
break
;
}
case
JSOP_BITAND
:
{
masm
.
andPtr
(
rhsReg
lhsReg
)
;
masm
.
tagValue
(
JSVAL_TYPE_INT32
lhsReg
R0
)
;
EmitReturnFromIC
(
masm
)
;
break
;
}
default
:
MOZ_CRASH
(
"
Unhandled
op
for
BinaryArith_BooleanWithInt32
.
"
)
;
}
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
bool
ICBinaryArith_DoubleWithInt32
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
MOZ_ASSERT
(
op
=
=
JSOP_BITOR
|
|
op
=
=
JSOP_BITAND
|
|
op
=
=
JSOP_BITXOR
)
;
Label
failure
;
Register
intReg
;
Register
scratchReg
;
if
(
lhsIsDouble_
)
{
masm
.
branchTestDouble
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
intReg
=
masm
.
extractInt32
(
R1
ExtractTemp0
)
;
masm
.
unboxDouble
(
R0
FloatReg0
)
;
scratchReg
=
R0
.
scratchReg
(
)
;
}
else
{
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestDouble
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
intReg
=
masm
.
extractInt32
(
R0
ExtractTemp0
)
;
masm
.
unboxDouble
(
R1
FloatReg0
)
;
scratchReg
=
R1
.
scratchReg
(
)
;
}
{
Label
doneTruncate
;
Label
truncateABICall
;
masm
.
branchTruncateDouble
(
FloatReg0
scratchReg
&
truncateABICall
)
;
masm
.
jump
(
&
doneTruncate
)
;
masm
.
bind
(
&
truncateABICall
)
;
masm
.
push
(
intReg
)
;
masm
.
setupUnalignedABICall
(
scratchReg
)
;
masm
.
passABIArg
(
FloatReg0
MoveOp
:
:
DOUBLE
)
;
masm
.
callWithABI
(
mozilla
:
:
BitwiseCast
<
void
*
int32_t
(
*
)
(
double
)
>
(
JS
:
:
ToInt32
)
)
;
masm
.
storeCallResult
(
scratchReg
)
;
masm
.
pop
(
intReg
)
;
masm
.
bind
(
&
doneTruncate
)
;
}
Register
intReg2
=
scratchReg
;
switch
(
op
)
{
case
JSOP_BITOR
:
masm
.
orPtr
(
intReg
intReg2
)
;
break
;
case
JSOP_BITXOR
:
masm
.
xorPtr
(
intReg
intReg2
)
;
break
;
case
JSOP_BITAND
:
masm
.
andPtr
(
intReg
intReg2
)
;
break
;
default
:
MOZ_CRASH
(
"
Unhandled
op
for
BinaryArith_DoubleWithInt32
.
"
)
;
}
masm
.
tagValue
(
JSVAL_TYPE_INT32
intReg2
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
}
}
