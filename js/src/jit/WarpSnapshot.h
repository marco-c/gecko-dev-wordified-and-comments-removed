#
ifndef
jit_WarpSnapshot_h
#
define
jit_WarpSnapshot_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
gc
/
Policy
.
h
"
#
include
"
jit
/
JitAllocPolicy
.
h
"
#
include
"
jit
/
JitContext
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
Printer
.
h
"
namespace
js
{
class
ModuleEnvironmentObject
;
namespace
jit
{
class
CacheIRStubInfo
;
#
define
WARP_OP_SNAPSHOT_LIST
(
_
)
\
_
(
WarpArguments
)
\
_
(
WarpRegExp
)
\
_
(
WarpFunctionProto
)
\
_
(
WarpGetIntrinsic
)
\
_
(
WarpGetImport
)
\
_
(
WarpLambda
)
\
_
(
WarpRest
)
\
_
(
WarpNewArray
)
\
_
(
WarpNewObject
)
\
_
(
WarpBailout
)
\
_
(
WarpCacheIR
)
template
<
typename
T
>
class
WarpGCPtr
{
const
T
ptr_
;
public
:
explicit
WarpGCPtr
(
const
T
&
ptr
)
:
ptr_
(
ptr
)
{
MOZ_ASSERT
(
JS
:
:
GCPolicy
<
T
>
:
:
isTenured
(
ptr
)
"
WarpSnapshot
pointers
must
be
tenured
"
)
;
}
WarpGCPtr
(
const
WarpGCPtr
<
T
>
&
other
)
=
default
;
operator
T
(
)
const
{
return
static_cast
<
T
>
(
ptr_
)
;
}
T
operator
-
>
(
)
const
{
return
static_cast
<
T
>
(
ptr_
)
;
}
private
:
WarpGCPtr
(
)
=
delete
;
void
operator
=
(
WarpGCPtr
<
T
>
&
other
)
=
delete
;
}
;
class
WarpOpSnapshot
:
public
TempObject
public
mozilla
:
:
LinkedListElement
<
WarpOpSnapshot
>
{
public
:
enum
class
Kind
:
uint16_t
{
#
define
DEF_KIND
(
KIND
)
KIND
WARP_OP_SNAPSHOT_LIST
(
DEF_KIND
)
#
undef
DEF_KIND
}
;
private
:
uint32_t
offset_
=
0
;
Kind
kind_
;
protected
:
WarpOpSnapshot
(
Kind
kind
uint32_t
offset
)
:
offset_
(
offset
)
kind_
(
kind
)
{
}
public
:
uint32_t
offset
(
)
const
{
return
offset_
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
template
<
typename
T
>
const
T
*
as
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
T
:
:
ThisKind
)
;
return
static_cast
<
const
T
*
>
(
this
)
;
}
template
<
typename
T
>
T
*
as
(
)
{
MOZ_ASSERT
(
kind_
=
=
T
:
:
ThisKind
)
;
return
static_cast
<
T
*
>
(
this
)
;
}
void
trace
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dump
(
GenericPrinter
&
out
JSScript
*
script
)
const
;
#
endif
}
;
using
WarpOpSnapshotList
=
mozilla
:
:
LinkedList
<
WarpOpSnapshot
>
;
class
WarpArguments
:
public
WarpOpSnapshot
{
WarpGCPtr
<
ArgumentsObject
*
>
templateObj_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpArguments
;
WarpArguments
(
uint32_t
offset
ArgumentsObject
*
templateObj
)
:
WarpOpSnapshot
(
ThisKind
offset
)
templateObj_
(
templateObj
)
{
}
ArgumentsObject
*
templateObj
(
)
const
{
return
templateObj_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpRegExp
:
public
WarpOpSnapshot
{
bool
hasShared_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpRegExp
;
WarpRegExp
(
uint32_t
offset
bool
hasShared
)
:
WarpOpSnapshot
(
ThisKind
offset
)
hasShared_
(
hasShared
)
{
}
bool
hasShared
(
)
const
{
return
hasShared_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpFunctionProto
:
public
WarpOpSnapshot
{
WarpGCPtr
<
JSObject
*
>
proto_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpFunctionProto
;
WarpFunctionProto
(
uint32_t
offset
JSObject
*
proto
)
:
WarpOpSnapshot
(
ThisKind
offset
)
proto_
(
proto
)
{
MOZ_ASSERT
(
proto
)
;
}
JSObject
*
proto
(
)
const
{
return
proto_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpGetIntrinsic
:
public
WarpOpSnapshot
{
WarpGCPtr
<
Value
>
intrinsic_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpGetIntrinsic
;
WarpGetIntrinsic
(
uint32_t
offset
const
Value
&
intrinsic
)
:
WarpOpSnapshot
(
ThisKind
offset
)
intrinsic_
(
intrinsic
)
{
}
Value
intrinsic
(
)
const
{
return
intrinsic_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpGetImport
:
public
WarpOpSnapshot
{
WarpGCPtr
<
ModuleEnvironmentObject
*
>
targetEnv_
;
uint32_t
numFixedSlots_
;
uint32_t
slot_
;
bool
needsLexicalCheck_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpGetImport
;
WarpGetImport
(
uint32_t
offset
ModuleEnvironmentObject
*
targetEnv
uint32_t
numFixedSlots
uint32_t
slot
bool
needsLexicalCheck
)
:
WarpOpSnapshot
(
ThisKind
offset
)
targetEnv_
(
targetEnv
)
numFixedSlots_
(
numFixedSlots
)
slot_
(
slot
)
needsLexicalCheck_
(
needsLexicalCheck
)
{
}
ModuleEnvironmentObject
*
targetEnv
(
)
const
{
return
targetEnv_
;
}
uint32_t
numFixedSlots
(
)
const
{
return
numFixedSlots_
;
}
uint32_t
slot
(
)
const
{
return
slot_
;
}
bool
needsLexicalCheck
(
)
const
{
return
needsLexicalCheck_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpLambda
:
public
WarpOpSnapshot
{
WarpGCPtr
<
BaseScript
*
>
baseScript_
;
FunctionFlags
flags_
;
uint16_t
nargs_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpLambda
;
WarpLambda
(
uint32_t
offset
BaseScript
*
baseScript
FunctionFlags
flags
uint16_t
nargs
)
:
WarpOpSnapshot
(
ThisKind
offset
)
baseScript_
(
baseScript
)
flags_
(
flags
)
nargs_
(
nargs
)
{
}
BaseScript
*
baseScript
(
)
const
{
return
baseScript_
;
}
FunctionFlags
flags
(
)
const
{
return
flags_
;
}
uint16_t
nargs
(
)
const
{
return
nargs_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpBailout
:
public
WarpOpSnapshot
{
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpBailout
;
explicit
WarpBailout
(
uint32_t
offset
)
:
WarpOpSnapshot
(
ThisKind
offset
)
{
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpCacheIR
:
public
WarpOpSnapshot
{
WarpGCPtr
<
JitCode
*
>
stubCode_
;
const
CacheIRStubInfo
*
stubInfo_
;
const
uint8_t
*
stubData_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpCacheIR
;
WarpCacheIR
(
uint32_t
offset
JitCode
*
stubCode
const
CacheIRStubInfo
*
stubInfo
const
uint8_t
*
stubData
)
:
WarpOpSnapshot
(
ThisKind
offset
)
stubCode_
(
stubCode
)
stubInfo_
(
stubInfo
)
stubData_
(
stubData
)
{
}
const
CacheIRStubInfo
*
stubInfo
(
)
const
{
return
stubInfo_
;
}
const
uint8_t
*
stubData
(
)
const
{
return
stubData_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpObjectField
{
static
constexpr
uintptr_t
NurseryIndexTag
=
0x1
;
static
constexpr
uintptr_t
NurseryIndexShift
=
1
;
uintptr_t
data_
;
explicit
WarpObjectField
(
uintptr_t
data
)
:
data_
(
data
)
{
}
public
:
static
WarpObjectField
fromData
(
uintptr_t
data
)
{
return
WarpObjectField
(
data
)
;
}
static
WarpObjectField
fromObject
(
JSObject
*
obj
)
{
return
WarpObjectField
(
uintptr_t
(
obj
)
)
;
}
static
WarpObjectField
fromNurseryIndex
(
uint32_t
index
)
{
uintptr_t
data
=
(
uintptr_t
(
index
)
<
<
NurseryIndexShift
)
|
NurseryIndexTag
;
return
WarpObjectField
(
data
)
;
}
uintptr_t
rawData
(
)
const
{
return
data_
;
}
bool
isNurseryIndex
(
)
const
{
return
(
data_
&
NurseryIndexTag
)
!
=
0
;
}
uint32_t
toNurseryIndex
(
)
const
{
MOZ_ASSERT
(
isNurseryIndex
(
)
)
;
return
data_
>
>
NurseryIndexShift
;
}
JSObject
*
toObject
(
)
const
{
MOZ_ASSERT
(
!
isNurseryIndex
(
)
)
;
return
reinterpret_cast
<
JSObject
*
>
(
data_
)
;
}
}
;
class
WarpRest
:
public
WarpOpSnapshot
{
WarpGCPtr
<
ArrayObject
*
>
templateObject_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpRest
;
WarpRest
(
uint32_t
offset
ArrayObject
*
templateObject
)
:
WarpOpSnapshot
(
ThisKind
offset
)
templateObject_
(
templateObject
)
{
}
ArrayObject
*
templateObject
(
)
const
{
return
templateObject_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpNewArray
:
public
WarpOpSnapshot
{
WarpGCPtr
<
ArrayObject
*
>
templateObject_
;
bool
useVMCall_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpNewArray
;
WarpNewArray
(
uint32_t
offset
ArrayObject
*
templateObject
bool
useVMCall
)
:
WarpOpSnapshot
(
ThisKind
offset
)
templateObject_
(
templateObject
)
useVMCall_
(
useVMCall
)
{
}
ArrayObject
*
templateObject
(
)
const
{
return
templateObject_
;
}
bool
useVMCall
(
)
const
{
return
useVMCall_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpNewObject
:
public
WarpOpSnapshot
{
WarpGCPtr
<
JSObject
*
>
templateObject_
;
public
:
static
constexpr
Kind
ThisKind
=
Kind
:
:
WarpNewObject
;
WarpNewObject
(
uint32_t
offset
JSObject
*
templateObject
)
:
WarpOpSnapshot
(
ThisKind
offset
)
templateObject_
(
templateObject
)
{
}
JSObject
*
templateObject
(
)
const
{
return
templateObject_
;
}
void
traceData
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dumpData
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
struct
NoEnvironment
{
}
;
using
ConstantObjectEnvironment
=
WarpGCPtr
<
JSObject
*
>
;
struct
FunctionEnvironment
{
WarpGCPtr
<
CallObject
*
>
callObjectTemplate
;
WarpGCPtr
<
LexicalEnvironmentObject
*
>
namedLambdaTemplate
;
public
:
FunctionEnvironment
(
CallObject
*
callObjectTemplate
LexicalEnvironmentObject
*
namedLambdaTemplate
)
:
callObjectTemplate
(
callObjectTemplate
)
namedLambdaTemplate
(
namedLambdaTemplate
)
{
}
}
;
using
WarpEnvironment
=
mozilla
:
:
Variant
<
NoEnvironment
ConstantObjectEnvironment
FunctionEnvironment
>
;
class
WarpScriptSnapshot
:
public
TempObject
{
WarpGCPtr
<
JSScript
*
>
script_
;
WarpEnvironment
environment_
;
WarpOpSnapshotList
opSnapshots_
;
WarpGCPtr
<
ModuleObject
*
>
moduleObject_
;
WarpGCPtr
<
JSObject
*
>
instrumentationCallback_
;
mozilla
:
:
Maybe
<
int32_t
>
instrumentationScriptId_
;
mozilla
:
:
Maybe
<
bool
>
instrumentationActive_
;
bool
isArrowFunction_
;
public
:
WarpScriptSnapshot
(
JSScript
*
script
const
WarpEnvironment
&
env
WarpOpSnapshotList
&
&
opSnapshots
ModuleObject
*
moduleObject
JSObject
*
instrumentationCallback
mozilla
:
:
Maybe
<
int32_t
>
instrumentationScriptId
mozilla
:
:
Maybe
<
bool
>
instrumentationActive
)
;
JSScript
*
script
(
)
const
{
return
script_
;
}
const
WarpEnvironment
&
environment
(
)
const
{
return
environment_
;
}
const
WarpOpSnapshotList
&
opSnapshots
(
)
const
{
return
opSnapshots_
;
}
ModuleObject
*
moduleObject
(
)
const
{
return
moduleObject_
;
}
JSObject
*
instrumentationCallback
(
)
const
{
MOZ_ASSERT
(
instrumentationCallback_
)
;
return
instrumentationCallback_
;
}
int32_t
instrumentationScriptId
(
)
const
{
return
*
instrumentationScriptId_
;
}
bool
instrumentationActive
(
)
const
{
return
*
instrumentationActive_
;
}
bool
isArrowFunction
(
)
const
{
return
isArrowFunction_
;
}
void
trace
(
JSTracer
*
trc
)
;
#
ifdef
JS_JITSPEW
void
dump
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
class
WarpBailoutInfo
{
bool
failedBoundsCheck_
=
false
;
bool
failedLexicalCheck_
=
false
;
public
:
bool
failedBoundsCheck
(
)
const
{
return
failedBoundsCheck_
;
}
void
setFailedBoundsCheck
(
)
{
failedBoundsCheck_
=
true
;
}
bool
failedLexicalCheck
(
)
const
{
return
failedLexicalCheck_
;
}
void
setFailedLexicalCheck
(
)
{
failedLexicalCheck_
=
true
;
}
}
;
class
WarpSnapshot
:
public
TempObject
{
WarpScriptSnapshot
*
script_
;
WarpGCPtr
<
LexicalEnvironmentObject
*
>
globalLexicalEnv_
;
WarpGCPtr
<
JSObject
*
>
globalLexicalEnvThis_
;
const
WarpBailoutInfo
bailoutInfo_
;
using
NurseryObjectVector
=
Vector
<
JSObject
*
0
JitAllocPolicy
>
;
NurseryObjectVector
nurseryObjects_
;
public
:
explicit
WarpSnapshot
(
JSContext
*
cx
TempAllocator
&
alloc
WarpScriptSnapshot
*
script
const
WarpBailoutInfo
&
bailoutInfo
)
;
WarpScriptSnapshot
*
script
(
)
const
{
return
script_
;
}
LexicalEnvironmentObject
*
globalLexicalEnv
(
)
const
{
return
globalLexicalEnv_
;
}
JSObject
*
globalLexicalEnvThis
(
)
const
{
return
globalLexicalEnvThis_
;
}
void
trace
(
JSTracer
*
trc
)
;
const
WarpBailoutInfo
&
bailoutInfo
(
)
const
{
return
bailoutInfo_
;
}
NurseryObjectVector
&
nurseryObjects
(
)
{
return
nurseryObjects_
;
}
const
NurseryObjectVector
&
nurseryObjects
(
)
const
{
return
nurseryObjects_
;
}
#
ifdef
JS_JITSPEW
void
dump
(
)
const
;
void
dump
(
GenericPrinter
&
out
)
const
;
#
endif
}
;
}
}
#
endif
