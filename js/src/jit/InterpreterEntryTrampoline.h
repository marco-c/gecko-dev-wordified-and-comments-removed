#
ifndef
jit_InterpreterEntryTrampoline_h
#
define
jit_InterpreterEntryTrampoline_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
jit
/
JitCode
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
namespace
js
{
void
ClearInterpreterEntryMap
(
JSRuntime
*
runtime
)
;
namespace
jit
{
class
EntryTrampoline
{
HeapPtr
<
JitCode
*
>
entryTrampoline_
;
public
:
void
trace
(
JSTracer
*
trc
)
{
TraceNullableEdge
(
trc
&
entryTrampoline_
"
interpreter
-
entry
-
trampoline
"
)
;
}
explicit
EntryTrampoline
(
JSContext
*
cx
JitCode
*
code
)
{
MOZ_ASSERT
(
code
)
;
entryTrampoline_
=
code
;
}
uint8_t
*
raw
(
)
{
MOZ_ASSERT
(
entryTrampoline_
"
Empty
trampoline
code
.
"
)
;
return
entryTrampoline_
-
>
raw
(
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkTrampolineAfterMovingGC
(
)
;
#
endif
}
;
using
JSScriptToTrampolineMap
=
HashMap
<
HeapPtr
<
BaseScript
*
>
EntryTrampoline
DefaultHasher
<
HeapPtr
<
BaseScript
*
>
>
SystemAllocPolicy
>
;
class
EntryTrampolineMap
:
public
JSScriptToTrampolineMap
{
public
:
void
traceTrampolineCode
(
JSTracer
*
trc
)
;
void
updateScriptsAfterMovingGC
(
void
)
;
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkScriptsAfterMovingGC
(
)
;
#
endif
}
;
}
}
#
endif
