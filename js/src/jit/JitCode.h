#
ifndef
jit_IonCode_h
#
define
jit_IonCode_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
jit
/
ExecutableAllocator
.
h
"
#
include
"
jit
/
ICStubSpace
.
h
"
#
include
"
jit
/
IonOptimizationLevels
.
h
"
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
UbiNode
.
h
"
#
include
"
util
/
TrailingArray
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
namespace
js
{
namespace
jit
{
class
JitCode
;
class
MacroAssembler
;
using
TraceLoggerEventVector
=
Vector
<
TraceLoggerEvent
0
SystemAllocPolicy
>
;
struct
JitCodeHeader
{
JitCode
*
jitCode_
;
void
*
nops_
;
void
init
(
JitCode
*
jitCode
)
;
static
JitCodeHeader
*
FromExecutable
(
uint8_t
*
buffer
)
{
return
(
JitCodeHeader
*
)
(
buffer
-
sizeof
(
JitCodeHeader
)
)
;
}
}
;
class
JitCode
:
public
gc
:
:
TenuredCell
{
protected
:
using
CellHeaderWithCodePtr
=
gc
:
:
CellHeaderWithNonGCPointer
<
uint8_t
>
;
CellHeaderWithCodePtr
cellHeaderAndCode_
;
ExecutablePool
*
pool_
;
uint32_t
bufferSize_
;
uint32_t
insnSize_
;
uint32_t
dataSize_
;
uint32_t
jumpRelocTableBytes_
;
uint32_t
dataRelocTableBytes_
;
uint8_t
headerSize_
:
5
;
uint8_t
kind_
:
3
;
bool
invalidated_
:
1
;
bool
hasBytecodeMap_
:
1
;
JitCode
(
)
=
delete
;
JitCode
(
uint8_t
*
code
uint32_t
bufferSize
uint32_t
headerSize
ExecutablePool
*
pool
CodeKind
kind
)
:
cellHeaderAndCode_
(
code
)
pool_
(
pool
)
bufferSize_
(
bufferSize
)
insnSize_
(
0
)
dataSize_
(
0
)
jumpRelocTableBytes_
(
0
)
dataRelocTableBytes_
(
0
)
headerSize_
(
headerSize
)
kind_
(
uint8_t
(
kind
)
)
invalidated_
(
false
)
hasBytecodeMap_
(
false
)
{
MOZ_ASSERT
(
CodeKind
(
kind_
)
=
=
kind
)
;
MOZ_ASSERT
(
headerSize_
=
=
headerSize
)
;
}
uint32_t
dataOffset
(
)
const
{
return
insnSize_
;
}
uint32_t
jumpRelocTableOffset
(
)
const
{
return
dataOffset
(
)
+
dataSize_
;
}
uint32_t
dataRelocTableOffset
(
)
const
{
return
jumpRelocTableOffset
(
)
+
jumpRelocTableBytes_
;
}
public
:
uint8_t
*
raw
(
)
const
{
return
cellHeaderAndCode_
.
ptr
(
)
;
}
uint8_t
*
rawEnd
(
)
const
{
return
raw
(
)
+
insnSize_
;
}
bool
containsNativePC
(
const
void
*
addr
)
const
{
const
uint8_t
*
addr_u8
=
(
const
uint8_t
*
)
addr
;
return
raw
(
)
<
=
addr_u8
&
&
addr_u8
<
rawEnd
(
)
;
}
size_t
instructionsSize
(
)
const
{
return
insnSize_
;
}
size_t
bufferSize
(
)
const
{
return
bufferSize_
;
}
size_t
headerSize
(
)
const
{
return
headerSize_
;
}
void
traceChildren
(
JSTracer
*
trc
)
;
void
finalize
(
JSFreeOp
*
fop
)
;
void
setInvalidated
(
)
{
invalidated_
=
true
;
}
void
setHasBytecodeMap
(
)
{
hasBytecodeMap_
=
true
;
}
bool
invalidated
(
)
const
{
return
!
!
invalidated_
;
}
template
<
typename
T
>
T
as
(
)
const
{
return
JS_DATA_TO_FUNC_PTR
(
T
raw
(
)
)
;
}
void
copyFrom
(
MacroAssembler
&
masm
)
;
static
JitCode
*
FromExecutable
(
uint8_t
*
buffer
)
{
JitCode
*
code
=
JitCodeHeader
:
:
FromExecutable
(
buffer
)
-
>
jitCode_
;
MOZ_ASSERT
(
code
-
>
raw
(
)
=
=
buffer
)
;
return
code
;
}
static
size_t
offsetOfCode
(
)
{
return
offsetof
(
JitCode
cellHeaderAndCode_
)
+
CellHeaderWithCodePtr
:
:
offsetOfPtr
(
)
;
}
uint8_t
*
jumpRelocTable
(
)
{
return
raw
(
)
+
jumpRelocTableOffset
(
)
;
}
template
<
AllowGC
allowGC
>
static
JitCode
*
New
(
JSContext
*
cx
uint8_t
*
code
uint32_t
totalSize
uint32_t
headerSize
ExecutablePool
*
pool
CodeKind
kind
)
;
public
:
static
const
JS
:
:
TraceKind
TraceKind
=
JS
:
:
TraceKind
:
:
JitCode
;
const
gc
:
:
CellHeader
&
cellHeader
(
)
const
{
return
cellHeaderAndCode_
;
}
}
;
class
SnapshotWriter
;
class
RecoverWriter
;
class
SafepointWriter
;
class
CodegenSafepointIndex
;
class
SafepointIndex
;
class
OsiIndex
;
class
IonIC
;
class
alignas
(
8
)
IonScript
final
:
public
TrailingArray
{
private
:
Offset
constantTableOffset_
=
0
;
Offset
runtimeDataOffset_
=
0
;
Offset
osiIndexOffset_
=
0
;
Offset
safepointIndexOffset_
=
0
;
Offset
bailoutTableOffset_
=
0
;
Offset
icIndexOffset_
=
0
;
Offset
safepointsOffset_
=
0
;
Offset
snapshotsOffset_
=
0
;
Offset
rvaTableOffset_
=
0
;
Offset
recoversOffset_
=
0
;
Offset
allocBytes_
=
0
;
HeapPtrJitCode
method_
=
nullptr
;
jsbytecode
*
osrPc_
=
nullptr
;
uint32_t
osrEntryOffset_
=
0
;
uint32_t
skipArgCheckEntryOffset_
=
0
;
uint32_t
invalidateEpilogueOffset_
=
0
;
uint32_t
invalidateEpilogueDataOffset_
=
0
;
uint32_t
numBailouts_
=
0
;
bool
hasProfilingInstrumentation_
=
false
;
uint32_t
recompiling_
=
0
;
uint32_t
frameSlots_
=
0
;
uint32_t
argumentSlots_
=
0
;
uint32_t
frameSize_
=
0
;
uint32_t
invalidationCount_
=
0
;
IonCompilationId
compilationId_
;
OptimizationLevel
optimizationLevel_
;
uint32_t
osrPcMismatchCounter_
=
0
;
TraceLoggerEventVector
traceLoggerEvents_
;
private
:
Offset
constantTableOffset
(
)
const
{
return
constantTableOffset_
;
}
Offset
runtimeDataOffset
(
)
const
{
return
runtimeDataOffset_
;
}
Offset
osiIndexOffset
(
)
const
{
return
osiIndexOffset_
;
}
Offset
safepointIndexOffset
(
)
const
{
return
safepointIndexOffset_
;
}
Offset
bailoutTableOffset
(
)
const
{
return
bailoutTableOffset_
;
}
Offset
icIndexOffset
(
)
const
{
return
icIndexOffset_
;
}
Offset
safepointsOffset
(
)
const
{
return
safepointsOffset_
;
}
Offset
snapshotsOffset
(
)
const
{
return
snapshotsOffset_
;
}
Offset
rvaTableOffset
(
)
const
{
return
rvaTableOffset_
;
}
Offset
recoversOffset
(
)
const
{
return
recoversOffset_
;
}
Offset
endOffset
(
)
const
{
return
allocBytes_
;
}
static
constexpr
size_t
SizeOf_OsiIndex
=
2
*
sizeof
(
uint32_t
)
;
static
constexpr
size_t
SizeOf_SafepointIndex
=
2
*
sizeof
(
uint32_t
)
;
static
constexpr
size_t
SizeOf_SnapshotOffset
=
sizeof
(
uint32_t
)
;
public
:
PreBarrieredValue
*
constants
(
)
{
return
offsetToPointer
<
PreBarrieredValue
>
(
constantTableOffset
(
)
)
;
}
size_t
numConstants
(
)
const
{
return
numElements
<
PreBarrieredValue
>
(
constantTableOffset
(
)
runtimeDataOffset
(
)
)
;
}
uint8_t
*
runtimeData
(
)
{
return
offsetToPointer
<
uint8_t
>
(
runtimeDataOffset
(
)
)
;
}
size_t
runtimeSize
(
)
const
{
return
numElements
<
uint8_t
>
(
runtimeDataOffset
(
)
osiIndexOffset
(
)
)
;
}
OsiIndex
*
osiIndices
(
)
{
return
offsetToPointer
<
OsiIndex
>
(
osiIndexOffset
(
)
)
;
}
const
OsiIndex
*
osiIndices
(
)
const
{
return
offsetToPointer
<
OsiIndex
>
(
osiIndexOffset
(
)
)
;
}
size_t
numOsiIndices
(
)
const
{
return
numElements
<
SizeOf_OsiIndex
>
(
osiIndexOffset
(
)
safepointIndexOffset
(
)
)
;
}
SafepointIndex
*
safepointIndices
(
)
{
return
offsetToPointer
<
SafepointIndex
>
(
safepointIndexOffset
(
)
)
;
}
const
SafepointIndex
*
safepointIndices
(
)
const
{
return
offsetToPointer
<
SafepointIndex
>
(
safepointIndexOffset
(
)
)
;
}
size_t
numSafepointIndices
(
)
const
{
return
numElements
<
SizeOf_SafepointIndex
>
(
safepointIndexOffset
(
)
bailoutTableOffset
(
)
)
;
}
SnapshotOffset
*
bailoutTable
(
)
{
return
offsetToPointer
<
SnapshotOffset
>
(
bailoutTableOffset
(
)
)
;
}
size_t
numBailoutEntries
(
)
const
{
return
numElements
<
SizeOf_SnapshotOffset
>
(
bailoutTableOffset
(
)
icIndexOffset
(
)
)
;
}
uint32_t
*
icIndex
(
)
{
return
offsetToPointer
<
uint32_t
>
(
icIndexOffset
(
)
)
;
}
size_t
numICs
(
)
const
{
return
numElements
<
uint32_t
>
(
icIndexOffset
(
)
safepointsOffset
(
)
)
;
}
const
uint8_t
*
safepoints
(
)
const
{
return
offsetToPointer
<
uint8_t
>
(
safepointsOffset
(
)
)
;
}
size_t
safepointsSize
(
)
const
{
return
numElements
<
uint8_t
>
(
safepointsOffset
(
)
snapshotsOffset
(
)
)
;
}
const
uint8_t
*
snapshots
(
)
const
{
return
offsetToPointer
<
uint8_t
>
(
snapshotsOffset
(
)
)
;
}
size_t
snapshotsListSize
(
)
const
{
return
numElements
<
uint8_t
>
(
snapshotsOffset
(
)
rvaTableOffset
(
)
)
;
}
size_t
snapshotsRVATableSize
(
)
const
{
return
numElements
<
uint8_t
>
(
rvaTableOffset
(
)
recoversOffset
(
)
)
;
}
const
uint8_t
*
recovers
(
)
const
{
return
offsetToPointer
<
uint8_t
>
(
recoversOffset
(
)
)
;
}
size_t
recoversSize
(
)
const
{
return
numElements
<
uint8_t
>
(
recoversOffset
(
)
endOffset
(
)
)
;
}
private
:
IonScript
(
IonCompilationId
compilationId
uint32_t
frameSlots
uint32_t
argumentSlots
uint32_t
frameSize
OptimizationLevel
optimizationLevel
)
;
public
:
static
IonScript
*
New
(
JSContext
*
cx
IonCompilationId
compilationId
uint32_t
frameSlots
uint32_t
argumentSlots
uint32_t
frameSize
size_t
snapshotsListSize
size_t
snapshotsRVATableSize
size_t
recoversSize
size_t
bailoutEntries
size_t
constants
size_t
safepointIndices
size_t
osiIndices
size_t
icEntries
size_t
runtimeSize
size_t
safepointsSize
OptimizationLevel
optimizationLevel
)
;
static
void
Destroy
(
JSFreeOp
*
fop
IonScript
*
script
)
;
void
trace
(
JSTracer
*
trc
)
;
static
inline
size_t
offsetOfInvalidationCount
(
)
{
return
offsetof
(
IonScript
invalidationCount_
)
;
}
static
inline
size_t
offsetOfRecompiling
(
)
{
return
offsetof
(
IonScript
recompiling_
)
;
}
public
:
JitCode
*
method
(
)
const
{
return
method_
;
}
void
setMethod
(
JitCode
*
code
)
{
MOZ_ASSERT
(
!
invalidated
(
)
)
;
method_
=
code
;
}
void
setOsrPc
(
jsbytecode
*
osrPc
)
{
osrPc_
=
osrPc
;
}
jsbytecode
*
osrPc
(
)
const
{
return
osrPc_
;
}
void
setOsrEntryOffset
(
uint32_t
offset
)
{
MOZ_ASSERT
(
!
osrEntryOffset_
)
;
osrEntryOffset_
=
offset
;
}
uint32_t
osrEntryOffset
(
)
const
{
return
osrEntryOffset_
;
}
void
setSkipArgCheckEntryOffset
(
uint32_t
offset
)
{
MOZ_ASSERT
(
!
skipArgCheckEntryOffset_
)
;
skipArgCheckEntryOffset_
=
offset
;
}
uint32_t
getSkipArgCheckEntryOffset
(
)
const
{
return
skipArgCheckEntryOffset_
;
}
bool
containsCodeAddress
(
uint8_t
*
addr
)
const
{
return
method
(
)
-
>
raw
(
)
<
=
addr
&
&
addr
<
=
method
(
)
-
>
raw
(
)
+
method
(
)
-
>
instructionsSize
(
)
;
}
bool
containsReturnAddress
(
uint8_t
*
addr
)
const
{
return
method
(
)
-
>
raw
(
)
<
=
addr
&
&
addr
<
=
method
(
)
-
>
raw
(
)
+
method
(
)
-
>
instructionsSize
(
)
;
}
void
setInvalidationEpilogueOffset
(
uint32_t
offset
)
{
MOZ_ASSERT
(
!
invalidateEpilogueOffset_
)
;
invalidateEpilogueOffset_
=
offset
;
}
uint32_t
invalidateEpilogueOffset
(
)
const
{
MOZ_ASSERT
(
invalidateEpilogueOffset_
)
;
return
invalidateEpilogueOffset_
;
}
void
setInvalidationEpilogueDataOffset
(
uint32_t
offset
)
{
MOZ_ASSERT
(
!
invalidateEpilogueDataOffset_
)
;
invalidateEpilogueDataOffset_
=
offset
;
}
uint32_t
invalidateEpilogueDataOffset
(
)
const
{
MOZ_ASSERT
(
invalidateEpilogueDataOffset_
)
;
return
invalidateEpilogueDataOffset_
;
}
void
incNumBailouts
(
)
{
numBailouts_
+
+
;
}
bool
bailoutExpected
(
)
const
{
return
numBailouts_
>
=
JitOptions
.
frequentBailoutThreshold
;
}
void
setHasProfilingInstrumentation
(
)
{
hasProfilingInstrumentation_
=
true
;
}
void
clearHasProfilingInstrumentation
(
)
{
hasProfilingInstrumentation_
=
false
;
}
bool
hasProfilingInstrumentation
(
)
const
{
return
hasProfilingInstrumentation_
;
}
MOZ_MUST_USE
bool
addTraceLoggerEvent
(
TraceLoggerEvent
&
event
)
{
MOZ_ASSERT
(
event
.
hasTextId
(
)
)
;
return
traceLoggerEvents_
.
append
(
std
:
:
move
(
event
)
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
;
}
PreBarrieredValue
&
getConstant
(
size_t
index
)
{
MOZ_ASSERT
(
index
<
numConstants
(
)
)
;
return
constants
(
)
[
index
]
;
}
uint32_t
frameSlots
(
)
const
{
return
frameSlots_
;
}
uint32_t
argumentSlots
(
)
const
{
return
argumentSlots_
;
}
uint32_t
frameSize
(
)
const
{
return
frameSize_
;
}
SnapshotOffset
bailoutToSnapshot
(
uint32_t
bailoutId
)
{
MOZ_ASSERT
(
bailoutId
<
numBailoutEntries
(
)
)
;
return
bailoutTable
(
)
[
bailoutId
]
;
}
const
SafepointIndex
*
getSafepointIndex
(
uint32_t
disp
)
const
;
const
SafepointIndex
*
getSafepointIndex
(
uint8_t
*
retAddr
)
const
{
MOZ_ASSERT
(
containsCodeAddress
(
retAddr
)
)
;
return
getSafepointIndex
(
retAddr
-
method
(
)
-
>
raw
(
)
)
;
}
const
OsiIndex
*
getOsiIndex
(
uint32_t
disp
)
const
;
const
OsiIndex
*
getOsiIndex
(
uint8_t
*
retAddr
)
const
;
IonIC
&
getICFromIndex
(
uint32_t
index
)
{
MOZ_ASSERT
(
index
<
numICs
(
)
)
;
uint32_t
offset
=
icIndex
(
)
[
index
]
;
return
getIC
(
offset
)
;
}
inline
IonIC
&
getIC
(
uint32_t
offset
)
{
MOZ_ASSERT
(
offset
<
runtimeSize
(
)
)
;
return
*
reinterpret_cast
<
IonIC
*
>
(
runtimeData
(
)
+
offset
)
;
}
void
purgeICs
(
Zone
*
zone
)
;
void
copySnapshots
(
const
SnapshotWriter
*
writer
)
;
void
copyRecovers
(
const
RecoverWriter
*
writer
)
;
void
copyBailoutTable
(
const
SnapshotOffset
*
table
)
;
void
copyConstants
(
const
Value
*
vp
)
;
void
copySafepointIndices
(
const
CodegenSafepointIndex
*
si
)
;
void
copyOsiIndices
(
const
OsiIndex
*
oi
)
;
void
copyRuntimeData
(
const
uint8_t
*
data
)
;
void
copyICEntries
(
const
uint32_t
*
icEntries
)
;
void
copySafepoints
(
const
SafepointWriter
*
writer
)
;
bool
invalidated
(
)
const
{
return
invalidationCount_
!
=
0
;
}
void
invalidate
(
JSContext
*
cx
JSScript
*
script
bool
resetUses
const
char
*
reason
)
;
size_t
invalidationCount
(
)
const
{
return
invalidationCount_
;
}
void
incrementInvalidationCount
(
)
{
invalidationCount_
+
+
;
}
void
decrementInvalidationCount
(
JSFreeOp
*
fop
)
{
MOZ_ASSERT
(
invalidationCount_
)
;
invalidationCount_
-
-
;
if
(
!
invalidationCount_
)
{
Destroy
(
fop
this
)
;
}
}
IonCompilationId
compilationId
(
)
const
{
return
compilationId_
;
}
OptimizationLevel
optimizationLevel
(
)
const
{
return
optimizationLevel_
;
}
uint32_t
incrOsrPcMismatchCounter
(
)
{
return
+
+
osrPcMismatchCounter_
;
}
void
resetOsrPcMismatchCounter
(
)
{
osrPcMismatchCounter_
=
0
;
}
void
setRecompiling
(
)
{
recompiling_
=
true
;
}
bool
isRecompiling
(
)
const
{
return
recompiling_
;
}
void
clearRecompiling
(
)
{
recompiling_
=
false
;
}
size_t
allocBytes
(
)
const
{
return
allocBytes_
;
}
static
void
writeBarrierPre
(
Zone
*
zone
IonScript
*
ionScript
)
;
}
;
struct
IonBlockCounts
{
private
:
uint32_t
id_
;
uint32_t
offset_
;
char
*
description_
;
uint32_t
numSuccessors_
;
uint32_t
*
successors_
;
uint64_t
hitCount_
;
char
*
code_
;
public
:
MOZ_MUST_USE
bool
init
(
uint32_t
id
uint32_t
offset
char
*
description
uint32_t
numSuccessors
)
{
id_
=
id
;
offset_
=
offset
;
description_
=
description
;
numSuccessors_
=
numSuccessors
;
if
(
numSuccessors
)
{
successors_
=
js_pod_calloc
<
uint32_t
>
(
numSuccessors
)
;
if
(
!
successors_
)
{
return
false
;
}
}
return
true
;
}
void
destroy
(
)
{
js_free
(
description_
)
;
js_free
(
successors_
)
;
js_free
(
code_
)
;
}
uint32_t
id
(
)
const
{
return
id_
;
}
uint32_t
offset
(
)
const
{
return
offset_
;
}
const
char
*
description
(
)
const
{
return
description_
;
}
size_t
numSuccessors
(
)
const
{
return
numSuccessors_
;
}
void
setSuccessor
(
size_t
i
uint32_t
id
)
{
MOZ_ASSERT
(
i
<
numSuccessors_
)
;
successors_
[
i
]
=
id
;
}
uint32_t
successor
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
numSuccessors_
)
;
return
successors_
[
i
]
;
}
uint64_t
*
addressOfHitCount
(
)
{
return
&
hitCount_
;
}
uint64_t
hitCount
(
)
const
{
return
hitCount_
;
}
void
setCode
(
const
char
*
code
)
{
char
*
ncode
=
js_pod_malloc
<
char
>
(
strlen
(
code
)
+
1
)
;
if
(
ncode
)
{
strcpy
(
ncode
code
)
;
code_
=
ncode
;
}
}
const
char
*
code
(
)
const
{
return
code_
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
description_
)
+
mallocSizeOf
(
successors_
)
+
mallocSizeOf
(
code_
)
;
}
}
;
struct
IonScriptCounts
{
private
:
IonScriptCounts
*
previous_
=
nullptr
;
size_t
numBlocks_
=
0
;
IonBlockCounts
*
blocks_
=
nullptr
;
public
:
IonScriptCounts
(
)
=
default
;
~
IonScriptCounts
(
)
{
for
(
size_t
i
=
0
;
i
<
numBlocks_
;
i
+
+
)
{
blocks_
[
i
]
.
destroy
(
)
;
}
js_free
(
blocks_
)
;
IonScriptCounts
*
victims
=
previous_
;
while
(
victims
)
{
IonScriptCounts
*
victim
=
victims
;
victims
=
victim
-
>
previous_
;
victim
-
>
previous_
=
nullptr
;
js_delete
(
victim
)
;
}
}
MOZ_MUST_USE
bool
init
(
size_t
numBlocks
)
{
blocks_
=
js_pod_calloc
<
IonBlockCounts
>
(
numBlocks
)
;
if
(
!
blocks_
)
{
return
false
;
}
numBlocks_
=
numBlocks
;
return
true
;
}
size_t
numBlocks
(
)
const
{
return
numBlocks_
;
}
IonBlockCounts
&
block
(
size_t
i
)
{
MOZ_ASSERT
(
i
<
numBlocks_
)
;
return
blocks_
[
i
]
;
}
void
setPrevious
(
IonScriptCounts
*
previous
)
{
previous_
=
previous
;
}
IonScriptCounts
*
previous
(
)
const
{
return
previous_
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
size
=
0
;
auto
currCounts
=
this
;
do
{
size
+
=
currCounts
-
>
sizeOfOneIncludingThis
(
mallocSizeOf
)
;
currCounts
=
currCounts
-
>
previous_
;
}
while
(
currCounts
)
;
return
size
;
}
size_t
sizeOfOneIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
size
=
mallocSizeOf
(
this
)
+
mallocSizeOf
(
blocks_
)
;
for
(
size_t
i
=
0
;
i
<
numBlocks_
;
i
+
+
)
{
blocks_
[
i
]
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
return
size
;
}
}
;
}
}
namespace
JS
{
namespace
ubi
{
template
<
>
class
Concrete
<
js
:
:
jit
:
:
JitCode
>
:
TracerConcrete
<
js
:
:
jit
:
:
JitCode
>
{
protected
:
explicit
Concrete
(
js
:
:
jit
:
:
JitCode
*
ptr
)
:
TracerConcrete
<
js
:
:
jit
:
:
JitCode
>
(
ptr
)
{
}
public
:
static
void
construct
(
void
*
storage
js
:
:
jit
:
:
JitCode
*
ptr
)
{
new
(
storage
)
Concrete
(
ptr
)
;
}
CoarseType
coarseType
(
)
const
final
{
return
CoarseType
:
:
Script
;
}
Size
size
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
override
{
Size
size
=
js
:
:
gc
:
:
Arena
:
:
thingSize
(
get
(
)
.
asTenured
(
)
.
getAllocKind
(
)
)
;
size
+
=
get
(
)
.
bufferSize
(
)
;
size
+
=
get
(
)
.
headerSize
(
)
;
return
size
;
}
const
char16_t
*
typeName
(
)
const
override
{
return
concreteTypeName
;
}
static
const
char16_t
concreteTypeName
[
]
;
}
;
}
template
<
>
struct
DeletePolicy
<
js
:
:
jit
:
:
IonScript
>
{
explicit
DeletePolicy
(
JSRuntime
*
rt
)
:
rt_
(
rt
)
{
}
void
operator
(
)
(
const
js
:
:
jit
:
:
IonScript
*
script
)
;
private
:
JSRuntime
*
rt_
;
}
;
}
#
endif
