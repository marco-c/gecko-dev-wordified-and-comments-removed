#
ifndef
jit_ICStubSpace_h
#
define
jit_ICStubSpace_h
#
include
"
ds
/
LifoAlloc
.
h
"
namespace
js
{
namespace
jit
{
class
ICStubSpace
{
protected
:
LifoAlloc
allocator_
;
explicit
ICStubSpace
(
size_t
chunkSize
)
:
allocator_
(
chunkSize
)
{
}
public
:
inline
void
*
alloc
(
size_t
size
)
{
return
allocator_
.
alloc
(
size
)
;
}
JS_DECLARE_NEW_METHODS
(
allocate
alloc
inline
)
void
freeAllAfterMinorGC
(
JS
:
:
Zone
*
zone
)
;
#
ifdef
DEBUG
bool
isEmpty
(
)
const
{
return
allocator_
.
isEmpty
(
)
;
}
#
endif
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
allocator_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
}
;
struct
OptimizedICStubSpace
:
public
ICStubSpace
{
static
const
size_t
STUB_DEFAULT_CHUNK_SIZE
=
4096
;
public
:
OptimizedICStubSpace
(
)
:
ICStubSpace
(
STUB_DEFAULT_CHUNK_SIZE
)
{
}
}
;
struct
JitScriptICStubSpace
:
public
ICStubSpace
{
static
const
size_t
STUB_DEFAULT_CHUNK_SIZE
=
4096
;
public
:
JitScriptICStubSpace
(
)
:
ICStubSpace
(
STUB_DEFAULT_CHUNK_SIZE
)
{
}
}
;
}
}
#
endif
