#
ifndef
jit_Invalidation_h
#
define
jit_Invalidation_h
#
include
"
jit
/
IonTypes
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
GCVector
.
h
"
namespace
js
{
namespace
jit
{
class
IonScript
;
class
RecompileInfo
{
JSScript
*
script_
;
IonCompilationId
id_
;
public
:
RecompileInfo
(
JSScript
*
script
IonCompilationId
id
)
:
script_
(
script
)
id_
(
id
)
{
}
JSScript
*
script
(
)
const
{
return
script_
;
}
IonScript
*
maybeIonScriptToInvalidate
(
)
const
;
bool
traceWeak
(
JSTracer
*
trc
)
;
bool
operator
=
=
(
const
RecompileInfo
&
other
)
const
{
return
script_
=
=
other
.
script_
&
&
id_
=
=
other
.
id_
;
}
}
;
using
RecompileInfoVector
=
JS
:
:
GCVector
<
RecompileInfo
1
SystemAllocPolicy
>
;
void
InvalidateAll
(
JSFreeOp
*
fop
JS
:
:
Zone
*
zone
)
;
void
FinishInvalidation
(
JSFreeOp
*
fop
JSScript
*
script
)
;
void
AddPendingInvalidation
(
jit
:
:
RecompileInfoVector
&
invalid
JSScript
*
script
)
;
void
Invalidate
(
JSContext
*
cx
const
RecompileInfoVector
&
invalid
bool
resetUses
=
true
bool
cancelOffThread
=
true
)
;
void
Invalidate
(
JSContext
*
cx
JSScript
*
script
bool
resetUses
=
true
bool
cancelOffThread
=
true
)
;
}
}
#
endif
