#
ifndef
jit_TemplateObject_h
#
define
jit_TemplateObject_h
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
namespace
jit
{
class
TemplateNativeObject
;
class
TemplateObject
{
protected
:
JSObject
*
obj_
;
public
:
explicit
TemplateObject
(
JSObject
*
obj
)
:
obj_
(
obj
)
{
}
inline
gc
:
:
AllocKind
getAllocKind
(
)
const
;
inline
bool
isNativeObject
(
)
const
;
inline
const
TemplateNativeObject
&
asTemplateNativeObject
(
)
const
;
inline
bool
isArrayObject
(
)
const
;
inline
bool
isArgumentsObject
(
)
const
;
inline
bool
isTypedArrayObject
(
)
const
;
inline
bool
isRegExpObject
(
)
const
;
inline
bool
isCallObject
(
)
const
;
inline
bool
isBlockLexicalEnvironmentObject
(
)
const
;
inline
bool
isPlainObject
(
)
const
;
inline
gc
:
:
Cell
*
shape
(
)
const
;
}
;
class
TemplateNativeObject
:
public
TemplateObject
{
protected
:
NativeObject
&
asNativeObject
(
)
const
{
return
obj_
-
>
as
<
NativeObject
>
(
)
;
}
public
:
inline
bool
hasDynamicSlots
(
)
const
;
inline
uint32_t
numDynamicSlots
(
)
const
;
inline
uint32_t
numUsedFixedSlots
(
)
const
;
inline
uint32_t
numFixedSlots
(
)
const
;
inline
uint32_t
slotSpan
(
)
const
;
inline
Value
getSlot
(
uint32_t
i
)
const
;
#
ifdef
DEBUG
inline
bool
isSharedMemory
(
)
const
;
#
endif
inline
uint32_t
getDenseCapacity
(
)
const
;
inline
uint32_t
getDenseInitializedLength
(
)
const
;
inline
uint32_t
getArrayLength
(
)
const
;
inline
bool
hasDynamicElements
(
)
const
;
inline
const
Value
*
getDenseElements
(
)
const
;
inline
gc
:
:
Cell
*
regExpShared
(
)
const
;
}
;
}
}
#
endif
