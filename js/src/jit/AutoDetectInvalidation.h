#
ifndef
jit_AutoDetectInvalidation_h
#
define
jit_AutoDetectInvalidation_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
jit
/
IonScript
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
:
:
jit
{
class
AutoDetectInvalidation
{
JSContext
*
cx_
;
IonScript
*
ionScript_
;
MutableHandleValue
rval_
;
bool
disabled_
;
void
setReturnOverride
(
)
;
public
:
AutoDetectInvalidation
(
JSContext
*
cx
MutableHandleValue
rval
IonScript
*
ionScript
)
:
cx_
(
cx
)
ionScript_
(
ionScript
)
rval_
(
rval
)
disabled_
(
false
)
{
MOZ_ASSERT
(
ionScript
)
;
}
AutoDetectInvalidation
(
JSContext
*
cx
MutableHandleValue
rval
)
;
void
disable
(
)
{
MOZ_ASSERT
(
!
disabled_
)
;
disabled_
=
true
;
}
bool
shouldSetReturnOverride
(
)
const
{
return
!
disabled_
&
&
ionScript_
-
>
invalidated
(
)
;
}
~
AutoDetectInvalidation
(
)
{
if
(
MOZ_UNLIKELY
(
shouldSetReturnOverride
(
)
)
)
{
setReturnOverride
(
)
;
}
}
}
;
}
#
endif
