#
ifndef
jit_BaselineIC_h
#
define
jit_BaselineIC_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
jit
/
BaselineICList
.
h
"
#
include
"
jit
/
ICState
.
h
"
#
include
"
jit
/
ICStubSpace
.
h
"
#
include
"
jit
/
JitCode
.
h
"
#
include
"
jit
/
JitOptions
.
h
"
#
include
"
jit
/
Registers
.
h
"
#
include
"
jit
/
RegisterSets
.
h
"
#
include
"
jit
/
shared
/
Assembler
-
shared
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
ArrayObject
.
h
"
#
include
"
vm
/
JSScript
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
js
{
MOZ_COLD
void
ReportOutOfMemory
(
JSContext
*
cx
)
;
namespace
jit
{
class
BaselineFrame
;
class
CacheIRStubInfo
;
class
ICScript
;
class
MacroAssembler
;
enum
class
TailCallVMFunctionId
;
enum
class
VMFunctionId
;
class
ICStub
;
class
ICCacheIRStub
;
class
ICFallbackStub
;
#
define
FORWARD_DECLARE_STUBS
(
kindName
)
class
IC
#
#
kindName
;
IC_BASELINE_STUB_KIND_LIST
(
FORWARD_DECLARE_STUBS
)
#
undef
FORWARD_DECLARE_STUBS
#
ifdef
JS_JITSPEW
void
FallbackICSpew
(
JSContext
*
cx
ICFallbackStub
*
stub
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
3
4
)
;
#
else
#
define
FallbackICSpew
(
.
.
.
)
#
endif
class
ICEntry
{
ICStub
*
firstStub_
;
uint32_t
pcOffset_
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
#
ifdef
JS_64BIT
static
const
uint32_t
EXPECTED_TRACE_MAGIC
=
0xdeaddead
;
uint32_t
traceMagic_
=
EXPECTED_TRACE_MAGIC
;
#
endif
#
endif
public
:
ICEntry
(
ICStub
*
firstStub
uint32_t
pcOffset
)
:
firstStub_
(
firstStub
)
pcOffset_
(
pcOffset
)
{
}
ICStub
*
firstStub
(
)
const
{
MOZ_ASSERT
(
firstStub_
)
;
return
firstStub_
;
}
ICFallbackStub
*
fallbackStub
(
)
const
;
void
setFirstStub
(
ICStub
*
stub
)
{
firstStub_
=
stub
;
}
uint32_t
pcOffset
(
)
const
{
return
pcOffset_
;
}
jsbytecode
*
pc
(
JSScript
*
script
)
const
{
return
script
-
>
offsetToPC
(
pcOffset
(
)
)
;
}
static
constexpr
size_t
offsetOfFirstStub
(
)
{
return
offsetof
(
ICEntry
firstStub_
)
;
}
inline
ICStub
*
*
addressOfFirstStub
(
)
{
return
&
firstStub_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
class
ICStubConstIterator
{
friend
class
ICStub
;
friend
class
ICFallbackStub
;
private
:
ICStub
*
currentStub_
;
public
:
explicit
ICStubConstIterator
(
ICStub
*
currentStub
)
:
currentStub_
(
currentStub
)
{
}
static
ICStubConstIterator
StartingAt
(
ICStub
*
stub
)
{
return
ICStubConstIterator
(
stub
)
;
}
static
ICStubConstIterator
End
(
ICStub
*
stub
)
{
return
ICStubConstIterator
(
nullptr
)
;
}
bool
operator
=
=
(
const
ICStubConstIterator
&
other
)
const
{
return
currentStub_
=
=
other
.
currentStub_
;
}
bool
operator
!
=
(
const
ICStubConstIterator
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
ICStubConstIterator
&
operator
+
+
(
)
;
ICStubConstIterator
operator
+
+
(
int
)
{
ICStubConstIterator
oldThis
(
*
this
)
;
+
+
(
*
this
)
;
return
oldThis
;
}
ICStub
*
operator
*
(
)
const
{
MOZ_ASSERT
(
currentStub_
)
;
return
currentStub_
;
}
ICStub
*
operator
-
>
(
)
const
{
MOZ_ASSERT
(
currentStub_
)
;
return
currentStub_
;
}
bool
atEnd
(
)
const
{
return
currentStub_
=
=
nullptr
;
}
}
;
class
ICStubIterator
{
friend
class
ICFallbackStub
;
private
:
ICEntry
*
icEntry_
;
ICFallbackStub
*
fallbackStub_
;
ICCacheIRStub
*
previousStub_
;
ICStub
*
currentStub_
;
bool
unlinked_
;
explicit
ICStubIterator
(
ICFallbackStub
*
fallbackStub
bool
end
=
false
)
;
public
:
bool
operator
=
=
(
const
ICStubIterator
&
other
)
const
{
MOZ_ASSERT
(
icEntry_
=
=
other
.
icEntry_
)
;
MOZ_ASSERT
(
fallbackStub_
=
=
other
.
fallbackStub_
)
;
return
currentStub_
=
=
other
.
currentStub_
;
}
bool
operator
!
=
(
const
ICStubIterator
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
ICStubIterator
&
operator
+
+
(
)
;
ICStubIterator
operator
+
+
(
int
)
{
ICStubIterator
oldThis
(
*
this
)
;
+
+
(
*
this
)
;
return
oldThis
;
}
ICStub
*
operator
*
(
)
const
{
return
currentStub_
;
}
ICStub
*
operator
-
>
(
)
const
{
return
currentStub_
;
}
bool
atEnd
(
)
const
{
return
currentStub_
=
=
(
ICStub
*
)
fallbackStub_
;
}
void
unlink
(
JSContext
*
cx
JSScript
*
script
)
;
}
;
class
ICStub
{
friend
class
ICFallbackStub
;
public
:
enum
Kind
:
uint8_t
{
INVALID
=
0
#
define
DEF_ENUM_KIND
(
kindName
)
kindName
IC_BASELINE_STUB_KIND_LIST
(
DEF_ENUM_KIND
)
#
undef
DEF_ENUM_KIND
LIMIT
}
;
template
<
typename
T
typename
.
.
.
Args
>
static
T
*
New
(
JSContext
*
cx
ICStubSpace
*
space
JitCode
*
code
Args
&
&
.
.
.
args
)
{
if
(
!
code
)
{
return
nullptr
;
}
T
*
result
=
space
-
>
allocate
<
T
>
(
code
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
if
(
!
result
)
{
ReportOutOfMemory
(
cx
)
;
}
return
result
;
}
template
<
typename
T
typename
.
.
.
Args
>
static
T
*
NewFallback
(
JSContext
*
cx
ICStubSpace
*
space
TrampolinePtr
code
Args
&
&
.
.
.
args
)
{
T
*
result
=
space
-
>
allocate
<
T
>
(
code
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
if
(
MOZ_UNLIKELY
(
!
result
)
)
{
ReportOutOfMemory
(
cx
)
;
}
return
result
;
}
protected
:
uint8_t
*
stubCode_
;
uint32_t
enteredCount_
=
0
;
bool
isFallback_
;
ICStub
(
uint8_t
*
stubCode
bool
isFallback
)
:
stubCode_
(
stubCode
)
isFallback_
(
isFallback
)
{
MOZ_ASSERT
(
stubCode
!
=
nullptr
)
;
}
public
:
inline
bool
isFallback
(
)
const
{
return
isFallback_
;
}
inline
ICStub
*
maybeNext
(
)
const
;
inline
const
ICFallbackStub
*
toFallbackStub
(
)
const
{
MOZ_ASSERT
(
isFallback
(
)
)
;
return
reinterpret_cast
<
const
ICFallbackStub
*
>
(
this
)
;
}
inline
ICFallbackStub
*
toFallbackStub
(
)
{
MOZ_ASSERT
(
isFallback
(
)
)
;
return
reinterpret_cast
<
ICFallbackStub
*
>
(
this
)
;
}
ICCacheIRStub
*
toCacheIRStub
(
)
{
MOZ_ASSERT
(
!
isFallback
(
)
)
;
return
reinterpret_cast
<
ICCacheIRStub
*
>
(
this
)
;
}
const
ICCacheIRStub
*
toCacheIRStub
(
)
const
{
MOZ_ASSERT
(
!
isFallback
(
)
)
;
return
reinterpret_cast
<
const
ICCacheIRStub
*
>
(
this
)
;
}
bool
usesTrampolineCode
(
)
const
{
return
isFallback
(
)
;
}
JitCode
*
jitCode
(
)
{
MOZ_ASSERT
(
!
usesTrampolineCode
(
)
)
;
return
JitCode
:
:
FromExecutable
(
stubCode_
)
;
}
inline
uint8_t
*
rawStubCode
(
)
const
{
return
stubCode_
;
}
uint32_t
enteredCount
(
)
const
{
return
enteredCount_
;
}
inline
void
incrementEnteredCount
(
)
{
enteredCount_
+
+
;
}
void
resetEnteredCount
(
)
{
enteredCount_
=
0
;
}
inline
ICFallbackStub
*
getChainFallback
(
)
;
inline
ICStubConstIterator
beginHere
(
)
{
return
ICStubConstIterator
:
:
StartingAt
(
this
)
;
}
static
constexpr
size_t
offsetOfStubCode
(
)
{
return
offsetof
(
ICStub
stubCode_
)
;
}
static
constexpr
size_t
offsetOfEnteredCount
(
)
{
return
offsetof
(
ICStub
enteredCount_
)
;
}
}
;
class
ICFallbackStub
:
public
ICStub
{
friend
class
ICStubConstIterator
;
protected
:
ICEntry
*
icEntry_
=
nullptr
;
ICState
state_
{
}
;
Kind
kind_
;
ICFallbackStub
(
Kind
kind
TrampolinePtr
stubCode
)
:
ICStub
(
stubCode
.
value
true
)
kind_
(
kind
)
{
isFallback_
=
true
;
}
public
:
inline
ICEntry
*
icEntry
(
)
const
{
return
icEntry_
;
}
inline
Kind
kind
(
)
const
{
return
kind_
;
}
#
define
KIND_METHODS
(
kindName
)
\
inline
bool
is
#
#
kindName
(
)
const
{
return
kind
(
)
=
=
kindName
;
}
\
inline
const
IC
#
#
kindName
*
to
#
#
kindName
(
)
const
{
\
MOZ_ASSERT
(
is
#
#
kindName
(
)
)
;
\
return
reinterpret_cast
<
const
IC
#
#
kindName
*
>
(
this
)
;
\
}
\
inline
IC
#
#
kindName
*
to
#
#
kindName
(
)
{
\
MOZ_ASSERT
(
is
#
#
kindName
(
)
)
;
\
return
reinterpret_cast
<
IC
#
#
kindName
*
>
(
this
)
;
\
}
IC_BASELINE_STUB_KIND_LIST
(
KIND_METHODS
)
#
undef
KIND_METHODS
inline
size_t
numOptimizedStubs
(
)
const
{
return
state_
.
numOptimizedStubs
(
)
;
}
bool
newStubIsFirstStub
(
)
const
{
return
(
state_
.
mode
(
)
=
=
ICState
:
:
Mode
:
:
Specialized
&
&
numOptimizedStubs
(
)
=
=
0
)
;
}
ICState
&
state
(
)
{
return
state_
;
}
void
trace
(
JSTracer
*
trc
)
;
void
fixupICEntry
(
ICEntry
*
icEntry
)
{
MOZ_ASSERT
(
icEntry_
=
=
nullptr
)
;
icEntry_
=
icEntry
;
}
inline
void
addNewStub
(
ICCacheIRStub
*
stub
)
;
ICStubConstIterator
beginChainConst
(
)
const
{
return
ICStubConstIterator
(
icEntry_
-
>
firstStub
(
)
)
;
}
ICStubIterator
beginChain
(
)
{
return
ICStubIterator
(
this
)
;
}
void
discardStubs
(
JSContext
*
cx
JSScript
*
script
)
;
void
clearUsedByTranspiler
(
)
{
state_
.
clearUsedByTranspiler
(
)
;
}
void
setUsedByTranspiler
(
)
{
state_
.
setUsedByTranspiler
(
)
;
}
TrialInliningState
trialInliningState
(
)
const
{
return
state_
.
trialInliningState
(
)
;
}
void
setTrialInliningState
(
TrialInliningState
state
)
{
state_
.
setTrialInliningState
(
state
)
;
}
void
trackNotAttached
(
JSContext
*
cx
JSScript
*
script
)
;
void
maybeInvalidateWarp
(
JSContext
*
cx
JSScript
*
script
)
;
void
unlinkStubDontInvalidateWarp
(
Zone
*
zone
ICCacheIRStub
*
prev
ICCacheIRStub
*
stub
)
;
}
;
class
ICCacheIRStub
:
public
ICStub
{
ICStub
*
next_
=
nullptr
;
const
CacheIRStubInfo
*
stubInfo_
;
public
:
ICCacheIRStub
(
JitCode
*
stubCode
const
CacheIRStubInfo
*
stubInfo
)
:
ICStub
(
stubCode
-
>
raw
(
)
false
)
stubInfo_
(
stubInfo
)
{
}
ICStub
*
next
(
)
const
{
return
next_
;
}
void
setNext
(
ICStub
*
stub
)
{
next_
=
stub
;
}
const
CacheIRStubInfo
*
stubInfo
(
)
const
{
return
stubInfo_
;
}
uint8_t
*
stubDataStart
(
)
;
void
trace
(
JSTracer
*
trc
)
;
bool
makesGCCalls
(
)
const
;
bool
allocatedInFallbackSpace
(
)
const
{
return
makesGCCalls
(
)
;
}
static
constexpr
size_t
offsetOfNext
(
)
{
return
offsetof
(
ICCacheIRStub
next_
)
;
}
}
;
#
ifdef
JS_64BIT
static_assert
(
sizeof
(
ICFallbackStub
)
=
=
4
*
sizeof
(
uintptr_t
)
)
;
static_assert
(
sizeof
(
ICCacheIRStub
)
=
=
4
*
sizeof
(
uintptr_t
)
)
;
#
else
static_assert
(
sizeof
(
ICFallbackStub
)
=
=
5
*
sizeof
(
uintptr_t
)
)
;
static_assert
(
sizeof
(
ICCacheIRStub
)
=
=
5
*
sizeof
(
uintptr_t
)
)
;
#
endif
inline
ICStub
*
ICStub
:
:
maybeNext
(
)
const
{
return
isFallback
(
)
?
nullptr
:
toCacheIRStub
(
)
-
>
next
(
)
;
}
inline
void
ICFallbackStub
:
:
addNewStub
(
ICCacheIRStub
*
stub
)
{
MOZ_ASSERT
(
stub
-
>
next
(
)
=
=
nullptr
)
;
stub
-
>
setNext
(
icEntry_
-
>
firstStub
(
)
)
;
icEntry_
-
>
setFirstStub
(
stub
)
;
state_
.
trackAttached
(
)
;
}
inline
ICFallbackStub
*
ICStub
:
:
getChainFallback
(
)
{
ICStub
*
lastStub
=
this
;
while
(
!
lastStub
-
>
isFallback
(
)
)
{
lastStub
=
lastStub
-
>
toCacheIRStub
(
)
-
>
next
(
)
;
}
return
lastStub
-
>
toFallbackStub
(
)
;
}
AllocatableGeneralRegisterSet
BaselineICAvailableGeneralRegs
(
size_t
numInputs
)
;
class
ICToBool_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICToBool_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
ToBool_Fallback
stubCode
)
{
}
}
;
class
ICGetElem_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetElem_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
GetElem_Fallback
stubCode
)
{
}
}
;
class
ICSetElem_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICSetElem_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
SetElem_Fallback
stubCode
)
{
}
}
;
class
ICIn_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICIn_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
In_Fallback
stubCode
)
{
}
}
;
class
ICHasOwn_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICHasOwn_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
HasOwn_Fallback
stubCode
)
{
}
}
;
class
ICCheckPrivateField_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICCheckPrivateField_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
CheckPrivateField_Fallback
stubCode
)
{
}
}
;
class
ICGetName_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetName_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
GetName_Fallback
stubCode
)
{
}
}
;
class
ICBindName_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICBindName_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
BindName_Fallback
stubCode
)
{
}
}
;
class
ICGetIntrinsic_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetIntrinsic_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
GetIntrinsic_Fallback
stubCode
)
{
}
}
;
class
ICGetProp_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetProp_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
GetProp_Fallback
stubCode
)
{
}
}
;
class
ICSetProp_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICSetProp_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
SetProp_Fallback
stubCode
)
{
}
}
;
class
ICCall_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICCall_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
Call_Fallback
stubCode
)
{
}
}
;
class
ICGetIterator_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetIterator_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
GetIterator_Fallback
stubCode
)
{
}
}
;
class
ICOptimizeSpreadCall_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICOptimizeSpreadCall_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
OptimizeSpreadCall_Fallback
stubCode
)
{
}
}
;
class
ICInstanceOf_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICInstanceOf_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
InstanceOf_Fallback
stubCode
)
{
}
}
;
class
ICTypeOf_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICTypeOf_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
TypeOf_Fallback
stubCode
)
{
}
}
;
class
ICToPropertyKey_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICToPropertyKey_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
ToPropertyKey_Fallback
stubCode
)
{
}
}
;
class
ICRest_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
GCPtrArrayObject
templateObject_
;
ICRest_Fallback
(
TrampolinePtr
stubCode
ArrayObject
*
templateObject
)
:
ICFallbackStub
(
ICStub
:
:
Rest_Fallback
stubCode
)
templateObject_
(
templateObject
)
{
}
public
:
GCPtrArrayObject
&
templateObject
(
)
{
return
templateObject_
;
}
}
;
class
ICUnaryArith_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICUnaryArith_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
UnaryArith_Fallback
stubCode
)
{
}
}
;
class
ICCompare_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICCompare_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
Compare_Fallback
stubCode
)
{
}
}
;
class
ICBinaryArith_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICBinaryArith_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
BinaryArith_Fallback
stubCode
)
{
}
}
;
class
ICNewArray_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
GCPtrArrayObject
templateObject_
;
GCPtrObjectGroup
templateGroup_
;
ICNewArray_Fallback
(
TrampolinePtr
stubCode
ObjectGroup
*
templateGroup
)
:
ICFallbackStub
(
ICStub
:
:
NewArray_Fallback
stubCode
)
templateObject_
(
nullptr
)
templateGroup_
(
templateGroup
)
{
}
public
:
GCPtrArrayObject
&
templateObject
(
)
{
return
templateObject_
;
}
void
setTemplateObject
(
ArrayObject
*
obj
)
{
MOZ_ASSERT
(
obj
-
>
group
(
)
=
=
templateGroup
(
)
)
;
templateObject_
=
obj
;
}
GCPtrObjectGroup
&
templateGroup
(
)
{
return
templateGroup_
;
}
void
setTemplateGroup
(
ObjectGroup
*
group
)
{
templateObject_
=
nullptr
;
templateGroup_
=
group
;
}
}
;
class
ICNewObject_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
GCPtrObject
templateObject_
;
explicit
ICNewObject_Fallback
(
TrampolinePtr
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
NewObject_Fallback
stubCode
)
templateObject_
(
nullptr
)
{
}
public
:
GCPtrObject
&
templateObject
(
)
{
return
templateObject_
;
}
void
setTemplateObject
(
JSObject
*
obj
)
{
templateObject_
=
obj
;
}
}
;
struct
IonOsrTempData
;
extern
bool
DoCallFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICCall_Fallback
*
stub
uint32_t
argc
Value
*
vp
MutableHandleValue
res
)
;
extern
bool
DoSpreadCallFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICCall_Fallback
*
stub
Value
*
vp
MutableHandleValue
res
)
;
extern
bool
DoToBoolFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICToBool_Fallback
*
stub
HandleValue
arg
MutableHandleValue
ret
)
;
extern
bool
DoGetElemSuperFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetElem_Fallback
*
stub
HandleValue
lhs
HandleValue
rhs
HandleValue
receiver
MutableHandleValue
res
)
;
extern
bool
DoGetElemFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetElem_Fallback
*
stub
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
res
)
;
extern
bool
DoSetElemFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICSetElem_Fallback
*
stub
Value
*
stack
HandleValue
objv
HandleValue
index
HandleValue
rhs
)
;
extern
bool
DoInFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICIn_Fallback
*
stub
HandleValue
key
HandleValue
objValue
MutableHandleValue
res
)
;
extern
bool
DoHasOwnFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICHasOwn_Fallback
*
stub
HandleValue
keyValue
HandleValue
objValue
MutableHandleValue
res
)
;
extern
bool
DoCheckPrivateFieldFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICCheckPrivateField_Fallback
*
stub
HandleValue
objValue
HandleValue
keyValue
MutableHandleValue
res
)
;
extern
bool
DoGetNameFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetName_Fallback
*
stub
HandleObject
envChain
MutableHandleValue
res
)
;
extern
bool
DoBindNameFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICBindName_Fallback
*
stub
HandleObject
envChain
MutableHandleValue
res
)
;
extern
bool
DoGetIntrinsicFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetIntrinsic_Fallback
*
stub
MutableHandleValue
res
)
;
extern
bool
DoGetPropFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetProp_Fallback
*
stub
MutableHandleValue
val
MutableHandleValue
res
)
;
extern
bool
DoGetPropSuperFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetProp_Fallback
*
stub
HandleValue
receiver
MutableHandleValue
val
MutableHandleValue
res
)
;
extern
bool
DoSetPropFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICSetProp_Fallback
*
stub
Value
*
stack
HandleValue
lhs
HandleValue
rhs
)
;
extern
bool
DoGetIteratorFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICGetIterator_Fallback
*
stub
HandleValue
value
MutableHandleValue
res
)
;
extern
bool
DoOptimizeSpreadCallFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICOptimizeSpreadCall_Fallback
*
stub
HandleValue
value
MutableHandleValue
res
)
;
extern
bool
DoInstanceOfFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICInstanceOf_Fallback
*
stub
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
res
)
;
extern
bool
DoTypeOfFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICTypeOf_Fallback
*
stub
HandleValue
val
MutableHandleValue
res
)
;
extern
bool
DoToPropertyKeyFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICToPropertyKey_Fallback
*
stub
HandleValue
val
MutableHandleValue
res
)
;
extern
bool
DoRestFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICRest_Fallback
*
stub
MutableHandleValue
res
)
;
extern
bool
DoUnaryArithFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICUnaryArith_Fallback
*
stub
HandleValue
val
MutableHandleValue
res
)
;
extern
bool
DoBinaryArithFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICBinaryArith_Fallback
*
stub
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
ret
)
;
extern
bool
DoNewArrayFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICNewArray_Fallback
*
stub
uint32_t
length
MutableHandleValue
res
)
;
extern
bool
DoNewObjectFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICNewObject_Fallback
*
stub
MutableHandleValue
res
)
;
extern
bool
DoCompareFallback
(
JSContext
*
cx
BaselineFrame
*
frame
ICCompare_Fallback
*
stub
HandleValue
lhs
HandleValue
rhs
MutableHandleValue
ret
)
;
}
}
#
endif
