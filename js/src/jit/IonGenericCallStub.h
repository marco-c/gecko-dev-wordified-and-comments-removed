#
ifndef
jit_IonGenericCallStub_h
#
define
jit_IonGenericCallStub_h
#
include
"
jit
/
Registers
.
h
"
namespace
js
:
:
jit
{
#
ifndef
JS_USE_LINK_REGISTER
static
constexpr
Register
IonGenericCallReturnAddrReg
=
CallTempReg0
;
#
endif
static
constexpr
Register
IonGenericCallCalleeReg
=
CallTempReg1
;
static
constexpr
Register
IonGenericCallArgcReg
=
CallTempReg2
;
#
ifdef
JS_CODEGEN_ARM
static_assert
(
CallTempReg0
=
=
CallTempNonArgRegs
[
0
]
)
;
static
constexpr
Register
IonGenericSecondScratchReg
=
CallTempReg0
;
#
endif
inline
AllocatableGeneralRegisterSet
IonGenericCallScratchRegs
(
)
{
AllocatableGeneralRegisterSet
regs
(
GeneralRegisterSet
:
:
All
(
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
FramePointer
)
)
;
regs
.
take
(
IonGenericCallCalleeReg
)
;
regs
.
take
(
IonGenericCallArgcReg
)
;
#
ifndef
JS_USE_LINK_REGISTER
regs
.
take
(
IonGenericCallReturnAddrReg
)
;
#
endif
#
ifdef
JS_CODEGEN_ARM
regs
.
take
(
IonGenericSecondScratchReg
)
;
#
endif
return
regs
;
}
}
#
endif
