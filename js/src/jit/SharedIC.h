#
ifndef
jit_SharedIC_h
#
define
jit_SharedIC_h
#
include
"
gc
/
GC
.
h
"
#
include
"
jit
/
BaselineICList
.
h
"
#
include
"
jit
/
BaselineJIT
.
h
"
#
include
"
jit
/
ICState
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jit
/
SharedICList
.
h
"
#
include
"
jit
/
SharedICRegisters
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
ReceiverGuard
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
namespace
js
{
namespace
jit
{
class
ICStub
;
class
ICFallbackStub
;
#
define
FORWARD_DECLARE_STUBS
(
kindName
)
class
IC
#
#
kindName
;
IC_BASELINE_STUB_KIND_LIST
(
FORWARD_DECLARE_STUBS
)
IC_SHARED_STUB_KIND_LIST
(
FORWARD_DECLARE_STUBS
)
#
undef
FORWARD_DECLARE_STUBS
#
ifdef
JS_JITSPEW
void
FallbackICSpew
(
JSContext
*
cx
ICFallbackStub
*
stub
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
3
4
)
;
void
TypeFallbackICSpew
(
JSContext
*
cx
ICTypeMonitor_Fallback
*
stub
const
char
*
fmt
.
.
.
)
MOZ_FORMAT_PRINTF
(
3
4
)
;
#
else
#
define
FallbackICSpew
(
.
.
.
)
#
define
TypeFallbackICSpew
(
.
.
.
)
#
endif
class
ICEntry
{
private
:
ICStub
*
firstStub_
;
uint32_t
returnOffset_
;
uint32_t
pcOffset_
:
28
;
public
:
enum
Kind
{
Kind_Op
=
0
Kind_NonOp
Kind_CallVM
Kind_NonOpCallVM
Kind_WarmupCounter
Kind_StackCheck
Kind_EarlyStackCheck
Kind_DebugTrap
Kind_DebugPrologue
Kind_DebugAfterYield
Kind_DebugEpilogue
Kind_Invalid
}
;
private
:
Kind
kind_
:
4
;
void
setKind
(
Kind
kind
)
{
MOZ_ASSERT
(
kind
<
Kind_Invalid
)
;
kind_
=
kind
;
MOZ_ASSERT
(
this
-
>
kind
(
)
=
=
kind
)
;
}
public
:
ICEntry
(
uint32_t
pcOffset
Kind
kind
)
:
firstStub_
(
nullptr
)
returnOffset_
(
)
pcOffset_
(
pcOffset
)
{
MOZ_ASSERT
(
pcOffset_
=
=
pcOffset
)
;
JS_STATIC_ASSERT
(
BaselineScript
:
:
MAX_JSSCRIPT_LENGTH
<
=
(
1u
<
<
28
)
-
1
)
;
MOZ_ASSERT
(
pcOffset
<
=
BaselineScript
:
:
MAX_JSSCRIPT_LENGTH
)
;
setKind
(
kind
)
;
}
CodeOffset
returnOffset
(
)
const
{
return
CodeOffset
(
returnOffset_
)
;
}
void
setReturnOffset
(
CodeOffset
offset
)
{
MOZ_ASSERT
(
offset
.
offset
(
)
<
=
(
size_t
)
UINT32_MAX
)
;
returnOffset_
=
(
uint32_t
)
offset
.
offset
(
)
;
}
uint32_t
pcOffset
(
)
const
{
return
pcOffset_
;
}
jsbytecode
*
pc
(
JSScript
*
script
)
const
{
return
script
-
>
offsetToPC
(
pcOffset_
)
;
}
Kind
kind
(
)
const
{
return
Kind
(
kind_
&
0xf
)
;
}
bool
isForOp
(
)
const
{
return
kind
(
)
=
=
Kind_Op
;
}
void
setFakeKind
(
Kind
kind
)
{
MOZ_ASSERT
(
kind
!
=
Kind_Op
&
&
kind
!
=
Kind_NonOp
)
;
setKind
(
kind
)
;
}
bool
hasStub
(
)
const
{
return
firstStub_
!
=
nullptr
;
}
ICStub
*
firstStub
(
)
const
{
MOZ_ASSERT
(
hasStub
(
)
)
;
return
firstStub_
;
}
ICFallbackStub
*
fallbackStub
(
)
const
;
void
setFirstStub
(
ICStub
*
stub
)
{
firstStub_
=
stub
;
}
static
inline
size_t
offsetOfFirstStub
(
)
{
return
offsetof
(
ICEntry
firstStub_
)
;
}
inline
ICStub
*
*
addressOfFirstStub
(
)
{
return
&
firstStub_
;
}
protected
:
void
traceEntry
(
JSTracer
*
trc
)
;
}
;
class
BaselineICEntry
:
public
ICEntry
{
public
:
BaselineICEntry
(
uint32_t
pcOffset
Kind
kind
)
:
ICEntry
(
pcOffset
kind
)
{
}
void
trace
(
JSTracer
*
trc
)
;
}
;
class
IonICEntry
:
public
ICEntry
{
JSScript
*
script_
;
public
:
IonICEntry
(
uint32_t
pcOffset
Kind
kind
JSScript
*
script
)
:
ICEntry
(
pcOffset
kind
)
script_
(
script
)
{
}
JSScript
*
script
(
)
{
return
script_
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
class
ICMonitoredStub
;
class
ICMonitoredFallbackStub
;
class
ICUpdatedStub
;
class
ICStubConstIterator
{
friend
class
ICStub
;
friend
class
ICFallbackStub
;
private
:
ICStub
*
currentStub_
;
public
:
explicit
ICStubConstIterator
(
ICStub
*
currentStub
)
:
currentStub_
(
currentStub
)
{
}
static
ICStubConstIterator
StartingAt
(
ICStub
*
stub
)
{
return
ICStubConstIterator
(
stub
)
;
}
static
ICStubConstIterator
End
(
ICStub
*
stub
)
{
return
ICStubConstIterator
(
nullptr
)
;
}
bool
operator
=
=
(
const
ICStubConstIterator
&
other
)
const
{
return
currentStub_
=
=
other
.
currentStub_
;
}
bool
operator
!
=
(
const
ICStubConstIterator
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
ICStubConstIterator
&
operator
+
+
(
)
;
ICStubConstIterator
operator
+
+
(
int
)
{
ICStubConstIterator
oldThis
(
*
this
)
;
+
+
(
*
this
)
;
return
oldThis
;
}
ICStub
*
operator
*
(
)
const
{
MOZ_ASSERT
(
currentStub_
)
;
return
currentStub_
;
}
ICStub
*
operator
-
>
(
)
const
{
MOZ_ASSERT
(
currentStub_
)
;
return
currentStub_
;
}
bool
atEnd
(
)
const
{
return
currentStub_
=
=
nullptr
;
}
}
;
class
ICStubIterator
{
friend
class
ICFallbackStub
;
private
:
ICEntry
*
icEntry_
;
ICFallbackStub
*
fallbackStub_
;
ICStub
*
previousStub_
;
ICStub
*
currentStub_
;
bool
unlinked_
;
explicit
ICStubIterator
(
ICFallbackStub
*
fallbackStub
bool
end
=
false
)
;
public
:
bool
operator
=
=
(
const
ICStubIterator
&
other
)
const
{
MOZ_ASSERT
(
icEntry_
=
=
other
.
icEntry_
)
;
MOZ_ASSERT
(
fallbackStub_
=
=
other
.
fallbackStub_
)
;
return
currentStub_
=
=
other
.
currentStub_
;
}
bool
operator
!
=
(
const
ICStubIterator
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
ICStubIterator
&
operator
+
+
(
)
;
ICStubIterator
operator
+
+
(
int
)
{
ICStubIterator
oldThis
(
*
this
)
;
+
+
(
*
this
)
;
return
oldThis
;
}
ICStub
*
operator
*
(
)
const
{
return
currentStub_
;
}
ICStub
*
operator
-
>
(
)
const
{
return
currentStub_
;
}
bool
atEnd
(
)
const
{
return
currentStub_
=
=
(
ICStub
*
)
fallbackStub_
;
}
void
unlink
(
JSContext
*
cx
)
;
}
;
class
ICStub
{
friend
class
ICFallbackStub
;
public
:
enum
Kind
{
INVALID
=
0
#
define
DEF_ENUM_KIND
(
kindName
)
kindName
IC_BASELINE_STUB_KIND_LIST
(
DEF_ENUM_KIND
)
IC_SHARED_STUB_KIND_LIST
(
DEF_ENUM_KIND
)
#
undef
DEF_ENUM_KIND
LIMIT
}
;
static
bool
IsValidKind
(
Kind
k
)
{
return
(
k
>
INVALID
)
&
&
(
k
<
LIMIT
)
;
}
static
bool
IsCacheIRKind
(
Kind
k
)
{
return
k
=
=
CacheIR_Regular
|
|
k
=
=
CacheIR_Monitored
|
|
k
=
=
CacheIR_Updated
;
}
static
const
char
*
KindString
(
Kind
k
)
{
switch
(
k
)
{
#
define
DEF_KIND_STR
(
kindName
)
case
kindName
:
return
#
kindName
;
IC_BASELINE_STUB_KIND_LIST
(
DEF_KIND_STR
)
IC_SHARED_STUB_KIND_LIST
(
DEF_KIND_STR
)
#
undef
DEF_KIND_STR
default
:
MOZ_CRASH
(
"
Invalid
kind
.
"
)
;
}
}
enum
Trait
{
Regular
=
0x0
Fallback
=
0x1
Monitored
=
0x2
MonitoredFallback
=
0x3
Updated
=
0x4
}
;
void
traceCode
(
JSTracer
*
trc
const
char
*
name
)
;
void
updateCode
(
JitCode
*
stubCode
)
;
void
trace
(
JSTracer
*
trc
)
;
template
<
typename
T
typename
.
.
.
Args
>
static
T
*
New
(
JSContext
*
cx
ICStubSpace
*
space
JitCode
*
code
Args
&
&
.
.
.
args
)
{
if
(
!
code
)
return
nullptr
;
T
*
result
=
space
-
>
allocate
<
T
>
(
code
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
if
(
!
result
)
ReportOutOfMemory
(
cx
)
;
return
result
;
}
protected
:
uint8_t
*
stubCode_
;
ICStub
*
next_
;
uint16_t
extra_
;
Trait
trait_
:
3
;
Kind
kind_
:
13
;
inline
ICStub
(
Kind
kind
JitCode
*
stubCode
)
:
stubCode_
(
stubCode
-
>
raw
(
)
)
next_
(
nullptr
)
extra_
(
0
)
trait_
(
Regular
)
kind_
(
kind
)
{
MOZ_ASSERT
(
stubCode
!
=
nullptr
)
;
}
inline
ICStub
(
Kind
kind
Trait
trait
JitCode
*
stubCode
)
:
stubCode_
(
stubCode
-
>
raw
(
)
)
next_
(
nullptr
)
extra_
(
0
)
trait_
(
trait
)
kind_
(
kind
)
{
MOZ_ASSERT
(
stubCode
!
=
nullptr
)
;
}
inline
Trait
trait
(
)
const
{
return
(
Trait
)
(
trait_
&
0x7
)
;
}
public
:
inline
Kind
kind
(
)
const
{
return
static_cast
<
Kind
>
(
kind_
)
;
}
inline
bool
isFallback
(
)
const
{
return
trait
(
)
=
=
Fallback
|
|
trait
(
)
=
=
MonitoredFallback
;
}
inline
bool
isMonitored
(
)
const
{
return
trait
(
)
=
=
Monitored
;
}
inline
bool
isUpdated
(
)
const
{
return
trait
(
)
=
=
Updated
;
}
inline
bool
isMonitoredFallback
(
)
const
{
return
trait
(
)
=
=
MonitoredFallback
;
}
inline
const
ICFallbackStub
*
toFallbackStub
(
)
const
{
MOZ_ASSERT
(
isFallback
(
)
)
;
return
reinterpret_cast
<
const
ICFallbackStub
*
>
(
this
)
;
}
inline
ICFallbackStub
*
toFallbackStub
(
)
{
MOZ_ASSERT
(
isFallback
(
)
)
;
return
reinterpret_cast
<
ICFallbackStub
*
>
(
this
)
;
}
inline
const
ICMonitoredStub
*
toMonitoredStub
(
)
const
{
MOZ_ASSERT
(
isMonitored
(
)
)
;
return
reinterpret_cast
<
const
ICMonitoredStub
*
>
(
this
)
;
}
inline
ICMonitoredStub
*
toMonitoredStub
(
)
{
MOZ_ASSERT
(
isMonitored
(
)
)
;
return
reinterpret_cast
<
ICMonitoredStub
*
>
(
this
)
;
}
inline
const
ICMonitoredFallbackStub
*
toMonitoredFallbackStub
(
)
const
{
MOZ_ASSERT
(
isMonitoredFallback
(
)
)
;
return
reinterpret_cast
<
const
ICMonitoredFallbackStub
*
>
(
this
)
;
}
inline
ICMonitoredFallbackStub
*
toMonitoredFallbackStub
(
)
{
MOZ_ASSERT
(
isMonitoredFallback
(
)
)
;
return
reinterpret_cast
<
ICMonitoredFallbackStub
*
>
(
this
)
;
}
inline
const
ICUpdatedStub
*
toUpdatedStub
(
)
const
{
MOZ_ASSERT
(
isUpdated
(
)
)
;
return
reinterpret_cast
<
const
ICUpdatedStub
*
>
(
this
)
;
}
inline
ICUpdatedStub
*
toUpdatedStub
(
)
{
MOZ_ASSERT
(
isUpdated
(
)
)
;
return
reinterpret_cast
<
ICUpdatedStub
*
>
(
this
)
;
}
#
define
KIND_METHODS
(
kindName
)
\
inline
bool
is
#
#
kindName
(
)
const
{
return
kind
(
)
=
=
kindName
;
}
\
inline
const
IC
#
#
kindName
*
to
#
#
kindName
(
)
const
{
\
MOZ_ASSERT
(
is
#
#
kindName
(
)
)
;
\
return
reinterpret_cast
<
const
IC
#
#
kindName
*
>
(
this
)
;
\
}
\
inline
IC
#
#
kindName
*
to
#
#
kindName
(
)
{
\
MOZ_ASSERT
(
is
#
#
kindName
(
)
)
;
\
return
reinterpret_cast
<
IC
#
#
kindName
*
>
(
this
)
;
\
}
IC_BASELINE_STUB_KIND_LIST
(
KIND_METHODS
)
IC_SHARED_STUB_KIND_LIST
(
KIND_METHODS
)
#
undef
KIND_METHODS
inline
ICStub
*
next
(
)
const
{
return
next_
;
}
inline
bool
hasNext
(
)
const
{
return
next_
!
=
nullptr
;
}
inline
void
setNext
(
ICStub
*
stub
)
{
next_
=
stub
;
}
inline
ICStub
*
*
addressOfNext
(
)
{
return
&
next_
;
}
inline
JitCode
*
jitCode
(
)
{
return
JitCode
:
:
FromExecutable
(
stubCode_
)
;
}
inline
uint8_t
*
rawStubCode
(
)
const
{
return
stubCode_
;
}
inline
ICFallbackStub
*
getChainFallback
(
)
{
ICStub
*
lastStub
=
this
;
while
(
lastStub
-
>
next_
)
lastStub
=
lastStub
-
>
next_
;
MOZ_ASSERT
(
lastStub
-
>
isFallback
(
)
)
;
return
lastStub
-
>
toFallbackStub
(
)
;
}
inline
ICStubConstIterator
beginHere
(
)
{
return
ICStubConstIterator
:
:
StartingAt
(
this
)
;
}
static
inline
size_t
offsetOfNext
(
)
{
return
offsetof
(
ICStub
next_
)
;
}
static
inline
size_t
offsetOfStubCode
(
)
{
return
offsetof
(
ICStub
stubCode_
)
;
}
static
inline
size_t
offsetOfExtra
(
)
{
return
offsetof
(
ICStub
extra_
)
;
}
static
bool
NonCacheIRStubMakesGCCalls
(
Kind
kind
)
;
bool
makesGCCalls
(
)
const
;
bool
allocatedInFallbackSpace
(
)
const
{
MOZ_ASSERT
(
next
(
)
)
;
return
makesGCCalls
(
)
;
}
}
;
class
ICFallbackStub
:
public
ICStub
{
friend
class
ICStubConstIterator
;
protected
:
ICEntry
*
icEntry_
;
ICState
state_
;
ICStub
*
*
lastStubPtrAddr_
;
ICFallbackStub
(
Kind
kind
JitCode
*
stubCode
)
:
ICStub
(
kind
ICStub
:
:
Fallback
stubCode
)
icEntry_
(
nullptr
)
state_
(
)
lastStubPtrAddr_
(
nullptr
)
{
}
ICFallbackStub
(
Kind
kind
Trait
trait
JitCode
*
stubCode
)
:
ICStub
(
kind
trait
stubCode
)
icEntry_
(
nullptr
)
state_
(
)
lastStubPtrAddr_
(
nullptr
)
{
MOZ_ASSERT
(
trait
=
=
ICStub
:
:
Fallback
|
|
trait
=
=
ICStub
:
:
MonitoredFallback
)
;
}
public
:
inline
ICEntry
*
icEntry
(
)
const
{
return
icEntry_
;
}
inline
size_t
numOptimizedStubs
(
)
const
{
return
state_
.
numOptimizedStubs
(
)
;
}
void
setInvalid
(
)
{
state_
.
setInvalid
(
)
;
}
bool
invalid
(
)
const
{
return
state_
.
invalid
(
)
;
}
ICState
&
state
(
)
{
return
state_
;
}
void
fixupICEntry
(
ICEntry
*
icEntry
)
{
MOZ_ASSERT
(
icEntry_
=
=
nullptr
)
;
MOZ_ASSERT
(
lastStubPtrAddr_
=
=
nullptr
)
;
icEntry_
=
icEntry
;
lastStubPtrAddr_
=
icEntry_
-
>
addressOfFirstStub
(
)
;
}
void
addNewStub
(
ICStub
*
stub
)
{
MOZ_ASSERT
(
!
invalid
(
)
)
;
MOZ_ASSERT
(
*
lastStubPtrAddr_
=
=
this
)
;
MOZ_ASSERT
(
stub
-
>
next
(
)
=
=
nullptr
)
;
stub
-
>
setNext
(
this
)
;
*
lastStubPtrAddr_
=
stub
;
lastStubPtrAddr_
=
stub
-
>
addressOfNext
(
)
;
state_
.
trackAttached
(
)
;
}
ICStubConstIterator
beginChainConst
(
)
const
{
return
ICStubConstIterator
(
icEntry_
-
>
firstStub
(
)
)
;
}
ICStubIterator
beginChain
(
)
{
return
ICStubIterator
(
this
)
;
}
bool
hasStub
(
ICStub
:
:
Kind
kind
)
const
{
for
(
ICStubConstIterator
iter
=
beginChainConst
(
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
if
(
iter
-
>
kind
(
)
=
=
kind
)
return
true
;
}
return
false
;
}
unsigned
numStubsWithKind
(
ICStub
:
:
Kind
kind
)
const
{
unsigned
count
=
0
;
for
(
ICStubConstIterator
iter
=
beginChainConst
(
)
;
!
iter
.
atEnd
(
)
;
iter
+
+
)
{
if
(
iter
-
>
kind
(
)
=
=
kind
)
count
+
+
;
}
return
count
;
}
void
discardStubs
(
JSContext
*
cx
)
;
void
unlinkStub
(
Zone
*
zone
ICStub
*
prev
ICStub
*
stub
)
;
void
unlinkStubsWithKind
(
JSContext
*
cx
ICStub
:
:
Kind
kind
)
;
}
;
class
ICCacheIR_Regular
:
public
ICStub
{
const
CacheIRStubInfo
*
stubInfo_
;
public
:
ICCacheIR_Regular
(
JitCode
*
stubCode
const
CacheIRStubInfo
*
stubInfo
)
:
ICStub
(
ICStub
:
:
CacheIR_Regular
stubCode
)
stubInfo_
(
stubInfo
)
{
}
static
ICCacheIR_Regular
*
Clone
(
JSContext
*
cx
ICStubSpace
*
space
ICStub
*
firstMonitorStub
ICCacheIR_Regular
&
other
)
;
void
notePreliminaryObject
(
)
{
extra_
=
1
;
}
bool
hasPreliminaryObject
(
)
const
{
return
extra_
;
}
const
CacheIRStubInfo
*
stubInfo
(
)
const
{
return
stubInfo_
;
}
uint8_t
*
stubDataStart
(
)
;
}
;
class
ICMonitoredStub
:
public
ICStub
{
protected
:
ICStub
*
firstMonitorStub_
;
ICMonitoredStub
(
Kind
kind
JitCode
*
stubCode
ICStub
*
firstMonitorStub
)
;
public
:
inline
void
updateFirstMonitorStub
(
ICStub
*
monitorStub
)
{
MOZ_ASSERT
(
firstMonitorStub_
&
&
firstMonitorStub_
-
>
isTypeMonitor_Fallback
(
)
)
;
firstMonitorStub_
=
monitorStub
;
}
inline
void
resetFirstMonitorStub
(
ICStub
*
monitorFallback
)
{
MOZ_ASSERT
(
monitorFallback
-
>
isTypeMonitor_Fallback
(
)
)
;
firstMonitorStub_
=
monitorFallback
;
}
inline
ICStub
*
firstMonitorStub
(
)
const
{
return
firstMonitorStub_
;
}
static
inline
size_t
offsetOfFirstMonitorStub
(
)
{
return
offsetof
(
ICMonitoredStub
firstMonitorStub_
)
;
}
}
;
class
ICCacheIR_Monitored
:
public
ICMonitoredStub
{
const
CacheIRStubInfo
*
stubInfo_
;
public
:
ICCacheIR_Monitored
(
JitCode
*
stubCode
ICStub
*
firstMonitorStub
const
CacheIRStubInfo
*
stubInfo
)
:
ICMonitoredStub
(
ICStub
:
:
CacheIR_Monitored
stubCode
firstMonitorStub
)
stubInfo_
(
stubInfo
)
{
}
static
ICCacheIR_Monitored
*
Clone
(
JSContext
*
cx
ICStubSpace
*
space
ICStub
*
firstMonitorStub
ICCacheIR_Monitored
&
other
)
;
void
notePreliminaryObject
(
)
{
extra_
=
1
;
}
bool
hasPreliminaryObject
(
)
const
{
return
extra_
;
}
const
CacheIRStubInfo
*
stubInfo
(
)
const
{
return
stubInfo_
;
}
uint8_t
*
stubDataStart
(
)
;
}
;
class
ICUpdatedStub
:
public
ICStub
{
protected
:
ICStub
*
firstUpdateStub_
;
static
const
uint32_t
MAX_OPTIMIZED_STUBS
=
8
;
uint32_t
numOptimizedStubs_
;
ICUpdatedStub
(
Kind
kind
JitCode
*
stubCode
)
:
ICStub
(
kind
ICStub
:
:
Updated
stubCode
)
firstUpdateStub_
(
nullptr
)
numOptimizedStubs_
(
0
)
{
}
public
:
MOZ_MUST_USE
bool
initUpdatingChain
(
JSContext
*
cx
ICStubSpace
*
space
)
;
MOZ_MUST_USE
bool
addUpdateStubForValue
(
JSContext
*
cx
HandleScript
script
HandleObject
obj
HandleObjectGroup
group
HandleId
id
HandleValue
val
)
;
void
addOptimizedUpdateStub
(
ICStub
*
stub
)
{
if
(
firstUpdateStub_
-
>
isTypeUpdate_Fallback
(
)
)
{
stub
-
>
setNext
(
firstUpdateStub_
)
;
firstUpdateStub_
=
stub
;
}
else
{
ICStub
*
iter
=
firstUpdateStub_
;
MOZ_ASSERT
(
iter
-
>
next
(
)
!
=
nullptr
)
;
while
(
!
iter
-
>
next
(
)
-
>
isTypeUpdate_Fallback
(
)
)
iter
=
iter
-
>
next
(
)
;
MOZ_ASSERT
(
iter
-
>
next
(
)
-
>
next
(
)
=
=
nullptr
)
;
stub
-
>
setNext
(
iter
-
>
next
(
)
)
;
iter
-
>
setNext
(
stub
)
;
}
numOptimizedStubs_
+
+
;
}
inline
ICStub
*
firstUpdateStub
(
)
const
{
return
firstUpdateStub_
;
}
void
resetUpdateStubChain
(
Zone
*
zone
)
;
bool
hasTypeUpdateStub
(
ICStub
:
:
Kind
kind
)
{
ICStub
*
stub
=
firstUpdateStub_
;
do
{
if
(
stub
-
>
kind
(
)
=
=
kind
)
return
true
;
stub
=
stub
-
>
next
(
)
;
}
while
(
stub
)
;
return
false
;
}
inline
uint32_t
numOptimizedStubs
(
)
const
{
return
numOptimizedStubs_
;
}
static
inline
size_t
offsetOfFirstUpdateStub
(
)
{
return
offsetof
(
ICUpdatedStub
firstUpdateStub_
)
;
}
}
;
class
ICCacheIR_Updated
:
public
ICUpdatedStub
{
const
CacheIRStubInfo
*
stubInfo_
;
GCPtrObjectGroup
updateStubGroup_
;
GCPtrId
updateStubId_
;
public
:
ICCacheIR_Updated
(
JitCode
*
stubCode
const
CacheIRStubInfo
*
stubInfo
)
:
ICUpdatedStub
(
ICStub
:
:
CacheIR_Updated
stubCode
)
stubInfo_
(
stubInfo
)
updateStubGroup_
(
nullptr
)
updateStubId_
(
JSID_EMPTY
)
{
}
static
ICCacheIR_Updated
*
Clone
(
JSContext
*
cx
ICStubSpace
*
space
ICStub
*
firstMonitorStub
ICCacheIR_Updated
&
other
)
;
GCPtrObjectGroup
&
updateStubGroup
(
)
{
return
updateStubGroup_
;
}
GCPtrId
&
updateStubId
(
)
{
return
updateStubId_
;
}
void
notePreliminaryObject
(
)
{
extra_
=
1
;
}
bool
hasPreliminaryObject
(
)
const
{
return
extra_
;
}
const
CacheIRStubInfo
*
stubInfo
(
)
const
{
return
stubInfo_
;
}
uint8_t
*
stubDataStart
(
)
;
}
;
class
ICStubCompiler
{
js
:
:
gc
:
:
AutoSuppressGC
suppressGC
;
public
:
using
Engine
=
ICStubEngine
;
protected
:
JSContext
*
cx
;
ICStub
:
:
Kind
kind
;
Engine
engine_
;
bool
inStubFrame_
;
#
ifdef
DEBUG
bool
entersStubFrame_
;
uint32_t
framePushedAtEnterStubFrame_
;
#
endif
virtual
int32_t
getKey
(
)
const
{
return
static_cast
<
int32_t
>
(
engine_
)
|
(
static_cast
<
int32_t
>
(
kind
)
<
<
1
)
;
}
virtual
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
=
0
;
virtual
void
postGenerateStubCode
(
MacroAssembler
&
masm
Handle
<
JitCode
*
>
genCode
)
{
}
JitCode
*
getStubCode
(
)
;
ICStubCompiler
(
JSContext
*
cx
ICStub
:
:
Kind
kind
Engine
engine
)
:
suppressGC
(
cx
)
cx
(
cx
)
kind
(
kind
)
engine_
(
engine
)
inStubFrame_
(
false
)
#
ifdef
DEBUG
entersStubFrame_
(
false
)
framePushedAtEnterStubFrame_
(
0
)
#
endif
{
}
void
PushStubPayload
(
MacroAssembler
&
masm
Register
scratch
)
;
void
pushStubPayload
(
MacroAssembler
&
masm
Register
scratch
)
;
MOZ_MUST_USE
bool
tailCallVM
(
const
VMFunction
&
fun
MacroAssembler
&
masm
)
;
MOZ_MUST_USE
bool
callVM
(
const
VMFunction
&
fun
MacroAssembler
&
masm
)
;
void
enterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
;
void
assumeStubFrame
(
)
;
void
leaveStubFrame
(
MacroAssembler
&
masm
bool
calledIntoIon
=
false
)
;
void
guardProfilingEnabled
(
MacroAssembler
&
masm
Register
scratch
Label
*
skip
)
;
public
:
static
inline
AllocatableGeneralRegisterSet
availableGeneralRegs
(
size_t
numInputs
)
{
AllocatableGeneralRegisterSet
regs
(
GeneralRegisterSet
:
:
All
(
)
)
;
#
if
defined
(
JS_CODEGEN_ARM
)
MOZ_ASSERT
(
!
regs
.
has
(
BaselineStackReg
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
ICTailCallReg
)
)
;
regs
.
take
(
BaselineSecondScratchReg
)
;
#
elif
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
MOZ_ASSERT
(
!
regs
.
has
(
BaselineStackReg
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
ICTailCallReg
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
BaselineSecondScratchReg
)
)
;
#
elif
defined
(
JS_CODEGEN_ARM64
)
MOZ_ASSERT
(
!
regs
.
has
(
PseudoStackPointer
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
RealStackPointer
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
ICTailCallReg
)
)
;
#
else
MOZ_ASSERT
(
!
regs
.
has
(
BaselineStackReg
)
)
;
#
endif
regs
.
take
(
BaselineFrameReg
)
;
regs
.
take
(
ICStubReg
)
;
#
ifdef
JS_CODEGEN_X64
regs
.
take
(
ExtractTemp0
)
;
regs
.
take
(
ExtractTemp1
)
;
#
endif
switch
(
numInputs
)
{
case
0
:
break
;
case
1
:
regs
.
take
(
R0
)
;
break
;
case
2
:
regs
.
take
(
R0
)
;
regs
.
take
(
R1
)
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
numInputs
"
)
;
}
return
regs
;
}
protected
:
template
<
typename
T
typename
.
.
.
Args
>
T
*
newStub
(
Args
&
&
.
.
.
args
)
{
return
ICStub
:
:
New
<
T
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
public
:
virtual
ICStub
*
getStub
(
ICStubSpace
*
space
)
=
0
;
static
ICStubSpace
*
StubSpaceForStub
(
bool
makesGCCalls
JSScript
*
outerScript
Engine
engine
)
{
if
(
makesGCCalls
)
{
if
(
engine
=
=
ICStubCompiler
:
:
Engine
:
:
Baseline
)
return
outerScript
-
>
baselineScript
(
)
-
>
fallbackStubSpace
(
)
;
return
outerScript
-
>
ionScript
(
)
-
>
fallbackStubSpace
(
)
;
}
return
outerScript
-
>
zone
(
)
-
>
jitZone
(
)
-
>
optimizedStubSpace
(
)
;
}
ICStubSpace
*
getStubSpace
(
JSScript
*
outerScript
)
{
return
StubSpaceForStub
(
ICStub
:
:
NonCacheIRStubMakesGCCalls
(
kind
)
outerScript
engine_
)
;
}
}
;
class
SharedStubInfo
{
BaselineFrame
*
maybeFrame_
;
RootedScript
outerScript_
;
RootedScript
innerScript_
;
ICEntry
*
icEntry_
;
public
:
SharedStubInfo
(
JSContext
*
cx
void
*
payload
ICEntry
*
entry
)
;
ICStubCompiler
:
:
Engine
engine
(
)
const
{
return
maybeFrame_
?
ICStubCompiler
:
:
Engine
:
:
Baseline
:
ICStubCompiler
:
:
Engine
:
:
IonSharedIC
;
}
HandleScript
script
(
)
const
{
MOZ_ASSERT
(
innerScript_
)
;
return
innerScript_
;
}
HandleScript
innerScript
(
)
const
{
MOZ_ASSERT
(
innerScript_
)
;
return
innerScript_
;
}
HandleScript
outerScript
(
JSContext
*
cx
)
;
jsbytecode
*
pc
(
)
const
{
return
icEntry
(
)
-
>
pc
(
innerScript
(
)
)
;
}
uint32_t
pcOffset
(
)
const
{
return
script
(
)
-
>
pcToOffset
(
pc
(
)
)
;
}
BaselineFrame
*
frame
(
)
const
{
MOZ_ASSERT
(
maybeFrame_
)
;
return
maybeFrame_
;
}
BaselineFrame
*
maybeFrame
(
)
const
{
return
maybeFrame_
;
}
ICEntry
*
icEntry
(
)
const
{
return
icEntry_
;
}
}
;
class
ICMonitoredFallbackStub
:
public
ICFallbackStub
{
protected
:
ICTypeMonitor_Fallback
*
fallbackMonitorStub_
;
ICMonitoredFallbackStub
(
Kind
kind
JitCode
*
stubCode
)
:
ICFallbackStub
(
kind
ICStub
:
:
MonitoredFallback
stubCode
)
fallbackMonitorStub_
(
nullptr
)
{
}
public
:
MOZ_MUST_USE
bool
initMonitoringChain
(
JSContext
*
cx
JSScript
*
script
)
;
MOZ_MUST_USE
bool
addMonitorStubForValue
(
JSContext
*
cx
BaselineFrame
*
frame
StackTypeSet
*
types
HandleValue
val
)
;
ICTypeMonitor_Fallback
*
maybeFallbackMonitorStub
(
)
const
{
return
fallbackMonitorStub_
;
}
ICTypeMonitor_Fallback
*
getFallbackMonitorStub
(
JSContext
*
cx
JSScript
*
script
)
{
if
(
!
fallbackMonitorStub_
&
&
!
initMonitoringChain
(
cx
script
)
)
return
nullptr
;
MOZ_ASSERT
(
fallbackMonitorStub_
)
;
return
fallbackMonitorStub_
;
}
static
inline
size_t
offsetOfFallbackMonitorStub
(
)
{
return
offsetof
(
ICMonitoredFallbackStub
fallbackMonitorStub_
)
;
}
}
;
class
ICMultiStubCompiler
:
public
ICStubCompiler
{
protected
:
JSOp
op
;
virtual
int32_t
getKey
(
)
const
override
{
return
static_cast
<
int32_t
>
(
engine_
)
|
(
static_cast
<
int32_t
>
(
kind
)
<
<
1
)
|
(
static_cast
<
int32_t
>
(
op
)
<
<
17
)
;
}
ICMultiStubCompiler
(
JSContext
*
cx
ICStub
:
:
Kind
kind
JSOp
op
Engine
engine
)
:
ICStubCompiler
(
cx
kind
engine
)
op
(
op
)
{
}
}
;
class
TypeCheckPrimitiveSetStub
:
public
ICStub
{
friend
class
ICStubSpace
;
protected
:
inline
static
uint16_t
TypeToFlag
(
JSValueType
type
)
{
return
1u
<
<
static_cast
<
unsigned
>
(
type
)
;
}
inline
static
uint16_t
ValidFlags
(
)
{
return
(
(
TypeToFlag
(
JSVAL_TYPE_OBJECT
)
<
<
1
)
-
1
)
&
~
TypeToFlag
(
JSVAL_TYPE_MAGIC
)
;
}
TypeCheckPrimitiveSetStub
(
Kind
kind
JitCode
*
stubCode
uint16_t
flags
)
:
ICStub
(
kind
stubCode
)
{
MOZ_ASSERT
(
kind
=
=
TypeMonitor_PrimitiveSet
|
|
kind
=
=
TypeUpdate_PrimitiveSet
)
;
MOZ_ASSERT
(
flags
&
&
!
(
flags
&
~
ValidFlags
(
)
)
)
;
extra_
=
flags
;
}
TypeCheckPrimitiveSetStub
*
updateTypesAndCode
(
uint16_t
flags
JitCode
*
code
)
{
MOZ_ASSERT
(
flags
&
&
!
(
flags
&
~
ValidFlags
(
)
)
)
;
if
(
!
code
)
return
nullptr
;
extra_
=
flags
;
updateCode
(
code
)
;
return
this
;
}
public
:
uint16_t
typeFlags
(
)
const
{
return
extra_
;
}
bool
containsType
(
JSValueType
type
)
const
{
MOZ_ASSERT
(
type
<
=
JSVAL_TYPE_OBJECT
)
;
MOZ_ASSERT
(
type
!
=
JSVAL_TYPE_MAGIC
)
;
return
extra_
&
TypeToFlag
(
type
)
;
}
ICTypeMonitor_PrimitiveSet
*
toMonitorStub
(
)
{
return
toTypeMonitor_PrimitiveSet
(
)
;
}
ICTypeUpdate_PrimitiveSet
*
toUpdateStub
(
)
{
return
toTypeUpdate_PrimitiveSet
(
)
;
}
class
Compiler
:
public
ICStubCompiler
{
protected
:
TypeCheckPrimitiveSetStub
*
existingStub_
;
uint16_t
flags_
;
virtual
int32_t
getKey
(
)
const
override
{
return
static_cast
<
int32_t
>
(
engine_
)
|
(
static_cast
<
int32_t
>
(
kind
)
<
<
1
)
|
(
static_cast
<
int32_t
>
(
flags_
)
<
<
17
)
;
}
public
:
Compiler
(
JSContext
*
cx
Kind
kind
TypeCheckPrimitiveSetStub
*
existingStub
JSValueType
type
)
:
ICStubCompiler
(
cx
kind
Engine
:
:
Baseline
)
existingStub_
(
existingStub
)
flags_
(
(
existingStub
?
existingStub
-
>
typeFlags
(
)
:
0
)
|
TypeToFlag
(
type
)
)
{
MOZ_ASSERT_IF
(
existingStub_
flags_
!
=
existingStub_
-
>
typeFlags
(
)
)
;
}
TypeCheckPrimitiveSetStub
*
updateStub
(
)
{
MOZ_ASSERT
(
existingStub_
)
;
return
existingStub_
-
>
updateTypesAndCode
(
flags_
getStubCode
(
)
)
;
}
}
;
}
;
class
ICTypeMonitor_Fallback
:
public
ICStub
{
friend
class
ICStubSpace
;
static
const
uint32_t
MAX_OPTIMIZED_STUBS
=
8
;
union
{
ICMonitoredFallbackStub
*
mainFallbackStub_
;
ICEntry
*
icEntry_
;
}
;
ICStub
*
firstMonitorStub_
;
ICStub
*
*
lastMonitorStubPtrAddr_
;
uint32_t
numOptimizedMonitorStubs_
:
7
;
uint32_t
invalid_
:
1
;
bool
hasFallbackStub_
:
1
;
uint32_t
argumentIndex_
:
23
;
static
const
uint32_t
BYTECODE_INDEX
=
(
1
<
<
23
)
-
1
;
ICTypeMonitor_Fallback
(
JitCode
*
stubCode
ICMonitoredFallbackStub
*
mainFallbackStub
uint32_t
argumentIndex
)
:
ICStub
(
ICStub
:
:
TypeMonitor_Fallback
stubCode
)
mainFallbackStub_
(
mainFallbackStub
)
firstMonitorStub_
(
thisFromCtor
(
)
)
lastMonitorStubPtrAddr_
(
nullptr
)
numOptimizedMonitorStubs_
(
0
)
invalid_
(
false
)
hasFallbackStub_
(
mainFallbackStub
!
=
nullptr
)
argumentIndex_
(
argumentIndex
)
{
}
ICTypeMonitor_Fallback
*
thisFromCtor
(
)
{
return
this
;
}
void
addOptimizedMonitorStub
(
ICStub
*
stub
)
{
MOZ_ASSERT
(
!
invalid
(
)
)
;
stub
-
>
setNext
(
this
)
;
MOZ_ASSERT
(
(
lastMonitorStubPtrAddr_
!
=
nullptr
)
=
=
(
numOptimizedMonitorStubs_
|
|
!
hasFallbackStub_
)
)
;
if
(
lastMonitorStubPtrAddr_
)
*
lastMonitorStubPtrAddr_
=
stub
;
if
(
numOptimizedMonitorStubs_
=
=
0
)
{
MOZ_ASSERT
(
firstMonitorStub_
=
=
this
)
;
firstMonitorStub_
=
stub
;
}
else
{
MOZ_ASSERT
(
firstMonitorStub_
!
=
nullptr
)
;
}
lastMonitorStubPtrAddr_
=
stub
-
>
addressOfNext
(
)
;
numOptimizedMonitorStubs_
+
+
;
}
public
:
bool
hasStub
(
ICStub
:
:
Kind
kind
)
{
ICStub
*
stub
=
firstMonitorStub_
;
do
{
if
(
stub
-
>
kind
(
)
=
=
kind
)
return
true
;
stub
=
stub
-
>
next
(
)
;
}
while
(
stub
)
;
return
false
;
}
inline
ICFallbackStub
*
mainFallbackStub
(
)
const
{
MOZ_ASSERT
(
hasFallbackStub_
)
;
return
mainFallbackStub_
;
}
inline
ICEntry
*
icEntry
(
)
const
{
return
hasFallbackStub_
?
mainFallbackStub
(
)
-
>
icEntry
(
)
:
icEntry_
;
}
inline
ICStub
*
firstMonitorStub
(
)
const
{
return
firstMonitorStub_
;
}
static
inline
size_t
offsetOfFirstMonitorStub
(
)
{
return
offsetof
(
ICTypeMonitor_Fallback
firstMonitorStub_
)
;
}
inline
uint32_t
numOptimizedMonitorStubs
(
)
const
{
return
numOptimizedMonitorStubs_
;
}
void
setInvalid
(
)
{
invalid_
=
1
;
}
bool
invalid
(
)
const
{
return
invalid_
;
}
inline
bool
monitorsThis
(
)
const
{
return
argumentIndex_
=
=
0
;
}
inline
bool
monitorsArgument
(
uint32_t
*
pargument
)
const
{
if
(
argumentIndex_
>
0
&
&
argumentIndex_
<
BYTECODE_INDEX
)
{
*
pargument
=
argumentIndex_
-
1
;
return
true
;
}
return
false
;
}
inline
bool
monitorsBytecode
(
)
const
{
return
argumentIndex_
=
=
BYTECODE_INDEX
;
}
void
fixupICEntry
(
ICEntry
*
icEntry
)
{
MOZ_ASSERT
(
!
hasFallbackStub_
)
;
MOZ_ASSERT
(
icEntry_
=
=
nullptr
)
;
MOZ_ASSERT
(
lastMonitorStubPtrAddr_
=
=
nullptr
)
;
icEntry_
=
icEntry
;
lastMonitorStubPtrAddr_
=
icEntry_
-
>
addressOfFirstStub
(
)
;
}
MOZ_MUST_USE
bool
addMonitorStubForValue
(
JSContext
*
cx
BaselineFrame
*
frame
StackTypeSet
*
types
HandleValue
val
)
;
void
resetMonitorStubChain
(
Zone
*
zone
)
;
class
Compiler
:
public
ICStubCompiler
{
ICMonitoredFallbackStub
*
mainFallbackStub_
;
uint32_t
argumentIndex_
;
protected
:
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
Compiler
(
JSContext
*
cx
ICMonitoredFallbackStub
*
mainFallbackStub
)
:
ICStubCompiler
(
cx
ICStub
:
:
TypeMonitor_Fallback
Engine
:
:
Baseline
)
mainFallbackStub_
(
mainFallbackStub
)
argumentIndex_
(
BYTECODE_INDEX
)
{
}
Compiler
(
JSContext
*
cx
uint32_t
argumentIndex
)
:
ICStubCompiler
(
cx
ICStub
:
:
TypeMonitor_Fallback
Engine
:
:
Baseline
)
mainFallbackStub_
(
nullptr
)
argumentIndex_
(
argumentIndex
)
{
}
ICTypeMonitor_Fallback
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICTypeMonitor_Fallback
>
(
space
getStubCode
(
)
mainFallbackStub_
argumentIndex_
)
;
}
}
;
}
;
class
ICTypeMonitor_PrimitiveSet
:
public
TypeCheckPrimitiveSetStub
{
friend
class
ICStubSpace
;
ICTypeMonitor_PrimitiveSet
(
JitCode
*
stubCode
uint16_t
flags
)
:
TypeCheckPrimitiveSetStub
(
TypeMonitor_PrimitiveSet
stubCode
flags
)
{
}
public
:
class
Compiler
:
public
TypeCheckPrimitiveSetStub
:
:
Compiler
{
protected
:
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
Compiler
(
JSContext
*
cx
ICTypeMonitor_PrimitiveSet
*
existingStub
JSValueType
type
)
:
TypeCheckPrimitiveSetStub
:
:
Compiler
(
cx
TypeMonitor_PrimitiveSet
existingStub
type
)
{
}
ICTypeMonitor_PrimitiveSet
*
updateStub
(
)
{
TypeCheckPrimitiveSetStub
*
stub
=
this
-
>
TypeCheckPrimitiveSetStub
:
:
Compiler
:
:
updateStub
(
)
;
if
(
!
stub
)
return
nullptr
;
return
stub
-
>
toMonitorStub
(
)
;
}
ICTypeMonitor_PrimitiveSet
*
getStub
(
ICStubSpace
*
space
)
override
{
MOZ_ASSERT
(
!
existingStub_
)
;
return
newStub
<
ICTypeMonitor_PrimitiveSet
>
(
space
getStubCode
(
)
flags_
)
;
}
}
;
}
;
class
ICTypeMonitor_SingleObject
:
public
ICStub
{
friend
class
ICStubSpace
;
GCPtrObject
obj_
;
ICTypeMonitor_SingleObject
(
JitCode
*
stubCode
JSObject
*
obj
)
;
public
:
GCPtrObject
&
object
(
)
{
return
obj_
;
}
static
size_t
offsetOfObject
(
)
{
return
offsetof
(
ICTypeMonitor_SingleObject
obj_
)
;
}
class
Compiler
:
public
ICStubCompiler
{
protected
:
HandleObject
obj_
;
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
Compiler
(
JSContext
*
cx
HandleObject
obj
)
:
ICStubCompiler
(
cx
TypeMonitor_SingleObject
Engine
:
:
Baseline
)
obj_
(
obj
)
{
}
ICTypeMonitor_SingleObject
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICTypeMonitor_SingleObject
>
(
space
getStubCode
(
)
obj_
)
;
}
}
;
}
;
class
ICTypeMonitor_ObjectGroup
:
public
ICStub
{
friend
class
ICStubSpace
;
GCPtrObjectGroup
group_
;
ICTypeMonitor_ObjectGroup
(
JitCode
*
stubCode
ObjectGroup
*
group
)
;
public
:
GCPtrObjectGroup
&
group
(
)
{
return
group_
;
}
static
size_t
offsetOfGroup
(
)
{
return
offsetof
(
ICTypeMonitor_ObjectGroup
group_
)
;
}
class
Compiler
:
public
ICStubCompiler
{
protected
:
HandleObjectGroup
group_
;
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
Compiler
(
JSContext
*
cx
HandleObjectGroup
group
)
:
ICStubCompiler
(
cx
TypeMonitor_ObjectGroup
Engine
:
:
Baseline
)
group_
(
group
)
{
}
ICTypeMonitor_ObjectGroup
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICTypeMonitor_ObjectGroup
>
(
space
getStubCode
(
)
group_
)
;
}
}
;
}
;
class
ICTypeMonitor_AnyValue
:
public
ICStub
{
friend
class
ICStubSpace
;
explicit
ICTypeMonitor_AnyValue
(
JitCode
*
stubCode
)
:
ICStub
(
TypeMonitor_AnyValue
stubCode
)
{
}
public
:
class
Compiler
:
public
ICStubCompiler
{
protected
:
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
explicit
Compiler
(
JSContext
*
cx
)
:
ICStubCompiler
(
cx
TypeMonitor_AnyValue
Engine
:
:
Baseline
)
{
}
ICTypeMonitor_AnyValue
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICTypeMonitor_AnyValue
>
(
space
getStubCode
(
)
)
;
}
}
;
}
;
class
ICCompare_Fallback
:
public
ICFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICCompare_Fallback
(
JitCode
*
stubCode
)
:
ICFallbackStub
(
ICStub
:
:
Compare_Fallback
stubCode
)
{
}
public
:
static
const
uint32_t
MAX_OPTIMIZED_STUBS
=
8
;
static
const
size_t
UNOPTIMIZABLE_ACCESS_BIT
=
0
;
void
noteUnoptimizableAccess
(
)
{
extra_
|
=
(
1u
<
<
UNOPTIMIZABLE_ACCESS_BIT
)
;
}
bool
hadUnoptimizableAccess
(
)
const
{
return
extra_
&
(
1u
<
<
UNOPTIMIZABLE_ACCESS_BIT
)
;
}
class
Compiler
:
public
ICStubCompiler
{
protected
:
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
public
:
explicit
Compiler
(
JSContext
*
cx
Engine
engine
)
:
ICStubCompiler
(
cx
ICStub
:
:
Compare_Fallback
engine
)
{
}
ICStub
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICCompare_Fallback
>
(
space
getStubCode
(
)
)
;
}
}
;
}
;
enum
TypedThingLayout
{
Layout_TypedArray
Layout_OutlineTypedObject
Layout_InlineTypedObject
}
;
void
StripPreliminaryObjectStubs
(
JSContext
*
cx
ICFallbackStub
*
stub
)
;
void
LoadTypedThingData
(
MacroAssembler
&
masm
TypedThingLayout
layout
Register
obj
Register
result
)
;
void
LoadTypedThingLength
(
MacroAssembler
&
masm
TypedThingLayout
layout
Register
obj
Register
result
)
;
class
ICGetProp_Fallback
:
public
ICMonitoredFallbackStub
{
friend
class
ICStubSpace
;
explicit
ICGetProp_Fallback
(
JitCode
*
stubCode
)
:
ICMonitoredFallbackStub
(
ICStub
:
:
GetProp_Fallback
stubCode
)
{
}
public
:
static
const
size_t
UNOPTIMIZABLE_ACCESS_BIT
=
0
;
static
const
size_t
ACCESSED_GETTER_BIT
=
1
;
void
noteUnoptimizableAccess
(
)
{
extra_
|
=
(
1u
<
<
UNOPTIMIZABLE_ACCESS_BIT
)
;
}
bool
hadUnoptimizableAccess
(
)
const
{
return
extra_
&
(
1u
<
<
UNOPTIMIZABLE_ACCESS_BIT
)
;
}
void
noteAccessedGetter
(
)
{
extra_
|
=
(
1u
<
<
ACCESSED_GETTER_BIT
)
;
}
bool
hasAccessedGetter
(
)
const
{
return
extra_
&
(
1u
<
<
ACCESSED_GETTER_BIT
)
;
}
class
Compiler
:
public
ICStubCompiler
{
protected
:
CodeOffset
bailoutReturnOffset_
;
bool
hasReceiver_
;
MOZ_MUST_USE
bool
generateStubCode
(
MacroAssembler
&
masm
)
override
;
void
postGenerateStubCode
(
MacroAssembler
&
masm
Handle
<
JitCode
*
>
code
)
override
;
virtual
int32_t
getKey
(
)
const
override
{
return
static_cast
<
int32_t
>
(
engine_
)
|
(
static_cast
<
int32_t
>
(
kind
)
<
<
1
)
|
(
static_cast
<
int32_t
>
(
hasReceiver_
)
<
<
17
)
;
}
public
:
explicit
Compiler
(
JSContext
*
cx
Engine
engine
bool
hasReceiver
=
false
)
:
ICStubCompiler
(
cx
ICStub
:
:
GetProp_Fallback
engine
)
hasReceiver_
(
hasReceiver
)
{
}
ICStub
*
getStub
(
ICStubSpace
*
space
)
override
{
return
newStub
<
ICGetProp_Fallback
>
(
space
getStubCode
(
)
)
;
}
}
;
}
;
static
inline
uint32_t
SimpleTypeDescrKey
(
SimpleTypeDescr
*
descr
)
{
if
(
descr
-
>
is
<
ScalarTypeDescr
>
(
)
)
return
uint32_t
(
descr
-
>
as
<
ScalarTypeDescr
>
(
)
.
type
(
)
)
<
<
1
;
return
(
uint32_t
(
descr
-
>
as
<
ReferenceTypeDescr
>
(
)
.
type
(
)
)
<
<
1
)
|
1
;
}
inline
bool
SimpleTypeDescrKeyIsScalar
(
uint32_t
key
)
{
return
!
(
key
&
1
)
;
}
inline
ScalarTypeDescr
:
:
Type
ScalarTypeFromSimpleTypeDescrKey
(
uint32_t
key
)
{
MOZ_ASSERT
(
SimpleTypeDescrKeyIsScalar
(
key
)
)
;
return
ScalarTypeDescr
:
:
Type
(
key
>
>
1
)
;
}
inline
ReferenceType
ReferenceTypeFromSimpleTypeDescrKey
(
uint32_t
key
)
{
MOZ_ASSERT
(
!
SimpleTypeDescrKeyIsScalar
(
key
)
)
;
return
ReferenceType
(
key
>
>
1
)
;
}
}
}
#
endif
