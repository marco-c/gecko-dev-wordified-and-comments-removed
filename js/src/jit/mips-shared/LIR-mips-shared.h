#
ifndef
jit_mips_shared_LIR_mips_shared_h
#
define
jit_mips_shared_LIR_mips_shared_h
namespace
js
{
namespace
jit
{
class
LUDivOrMod
:
public
LBinaryMath
<
0
>
{
public
:
LIR_HEADER
(
UDivOrMod
)
;
LUDivOrMod
(
)
:
LBinaryMath
(
classOpcode
)
{
}
MBinaryArithInstruction
*
mir
(
)
const
{
MOZ_ASSERT
(
mir_
-
>
isDiv
(
)
|
|
mir_
-
>
isMod
(
)
)
;
return
static_cast
<
MBinaryArithInstruction
*
>
(
mir_
)
;
}
bool
canBeDivideByZero
(
)
const
{
if
(
mir_
-
>
isMod
(
)
)
{
return
mir_
-
>
toMod
(
)
-
>
canBeDivideByZero
(
)
;
}
return
mir_
-
>
toDiv
(
)
-
>
canBeDivideByZero
(
)
;
}
bool
trapOnError
(
)
const
{
if
(
mir_
-
>
isMod
(
)
)
{
return
mir_
-
>
toMod
(
)
-
>
trapOnError
(
)
;
}
return
mir_
-
>
toDiv
(
)
-
>
trapOnError
(
)
;
}
wasm
:
:
TrapSiteDesc
trapSiteDesc
(
)
const
{
MOZ_ASSERT
(
mir_
-
>
isDiv
(
)
|
|
mir_
-
>
isMod
(
)
)
;
if
(
mir_
-
>
isMod
(
)
)
{
return
mir_
-
>
toMod
(
)
-
>
trapSiteDesc
(
)
;
}
return
mir_
-
>
toDiv
(
)
-
>
trapSiteDesc
(
)
;
}
}
;
}
}
#
endif
