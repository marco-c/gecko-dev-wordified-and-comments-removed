#
ifndef
jit_mips_shared_SharedICHelpers_mips_shared_inl_h
#
define
jit_mips_shared_SharedICHelpers_mips_shared_inl_h
#
include
"
jit
/
SharedICHelpers
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
namespace
js
{
namespace
jit
{
inline
void
EmitBaselineTailCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
uint32_t
argSize
)
{
Register
scratch
=
R2
.
scratchReg
(
)
;
masm
.
movePtr
(
BaselineFrameReg
scratch
)
;
masm
.
addPtr
(
Imm32
(
BaselineFrame
:
:
FramePointerOffset
)
scratch
)
;
masm
.
subPtr
(
BaselineStackReg
scratch
)
;
masm
.
subPtr
(
Imm32
(
argSize
)
scratch
)
;
masm
.
store32
(
scratch
Address
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfFrameSize
(
)
)
)
;
masm
.
addPtr
(
Imm32
(
argSize
)
scratch
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
ra
)
;
masm
.
makeFrameDescriptor
(
scratch
JitFrame_BaselineJS
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
subPtr
(
Imm32
(
sizeof
(
CommonFrameLayout
)
)
StackPointer
)
;
masm
.
storePtr
(
scratch
Address
(
StackPointer
CommonFrameLayout
:
:
offsetOfDescriptor
(
)
)
)
;
masm
.
storePtr
(
ra
Address
(
StackPointer
CommonFrameLayout
:
:
offsetOfReturnAddress
(
)
)
)
;
masm
.
jump
(
target
)
;
}
inline
void
EmitIonTailCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
uint32_t
stackSize
)
{
Register
scratch
=
R2
.
scratchReg
(
)
;
masm
.
loadPtr
(
Address
(
sp
stackSize
)
scratch
)
;
masm
.
rshiftPtr
(
Imm32
(
FRAMESIZE_SHIFT
)
scratch
)
;
masm
.
addPtr
(
Imm32
(
stackSize
+
JitStubFrameLayout
:
:
Size
(
)
-
sizeof
(
intptr_t
)
)
scratch
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
ra
)
;
masm
.
makeFrameDescriptor
(
scratch
JitFrame_IonJS
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
scratch
)
;
masm
.
push
(
ICTailCallReg
)
;
masm
.
jump
(
target
)
;
}
inline
void
EmitBaselineCreateStubFrameDescriptor
(
MacroAssembler
&
masm
Register
reg
uint32_t
headerSize
)
{
masm
.
movePtr
(
BaselineFrameReg
reg
)
;
masm
.
addPtr
(
Imm32
(
sizeof
(
intptr_t
)
*
2
)
reg
)
;
masm
.
subPtr
(
BaselineStackReg
reg
)
;
masm
.
makeFrameDescriptor
(
reg
JitFrame_BaselineStub
headerSize
)
;
}
inline
void
EmitBaselineCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
)
{
Register
scratch
=
R2
.
scratchReg
(
)
;
EmitBaselineCreateStubFrameDescriptor
(
masm
scratch
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
scratch
)
;
masm
.
call
(
target
)
;
}
struct
BaselineStubFrame
{
uintptr_t
savedFrame
;
uintptr_t
savedStub
;
uintptr_t
returnAddress
;
uintptr_t
descriptor
;
}
;
static
const
uint32_t
STUB_FRAME_SIZE
=
sizeof
(
BaselineStubFrame
)
;
static
const
uint32_t
STUB_FRAME_SAVED_STUB_OFFSET
=
offsetof
(
BaselineStubFrame
savedStub
)
;
inline
void
EmitBaselineEnterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
{
MOZ_ASSERT
(
scratch
!
=
ICTailCallReg
)
;
masm
.
movePtr
(
BaselineFrameReg
scratch
)
;
masm
.
addPtr
(
Imm32
(
BaselineFrame
:
:
FramePointerOffset
)
scratch
)
;
masm
.
subPtr
(
BaselineStackReg
scratch
)
;
masm
.
store32
(
scratch
Address
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfFrameSize
(
)
)
)
;
masm
.
makeFrameDescriptor
(
scratch
JitFrame_BaselineJS
BaselineStubFrameLayout
:
:
Size
(
)
)
;
masm
.
subPtr
(
Imm32
(
STUB_FRAME_SIZE
)
StackPointer
)
;
masm
.
storePtr
(
scratch
Address
(
StackPointer
offsetof
(
BaselineStubFrame
descriptor
)
)
)
;
masm
.
storePtr
(
ICTailCallReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
returnAddress
)
)
)
;
masm
.
storePtr
(
ICStubReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
savedStub
)
)
)
;
masm
.
storePtr
(
BaselineFrameReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
savedFrame
)
)
)
;
masm
.
movePtr
(
BaselineStackReg
BaselineFrameReg
)
;
masm
.
assertStackAlignment
(
sizeof
(
Value
)
0
)
;
}
}
}
#
endif
