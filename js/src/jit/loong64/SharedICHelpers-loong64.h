#
ifndef
jit_loong64_SharedICHelpers_loong64_h
#
define
jit_loong64_SharedICHelpers_loong64_h
#
include
"
jit
/
BaselineIC
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jit
/
SharedICRegisters
.
h
"
namespace
js
{
namespace
jit
{
static
const
size_t
ICStackValueOffset
=
0
;
struct
BaselineStubFrame
{
uintptr_t
savedFrame
;
uintptr_t
savedStub
;
uintptr_t
returnAddress
;
uintptr_t
descriptor
;
}
;
inline
void
EmitRestoreTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitRepushTailCallReg
(
MacroAssembler
&
masm
)
{
}
inline
void
EmitCallIC
(
MacroAssembler
&
masm
CodeOffset
*
callOffset
)
{
masm
.
loadPtr
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
R2
.
scratchReg
(
)
)
;
masm
.
call
(
R2
.
scratchReg
(
)
)
;
*
callOffset
=
CodeOffset
(
masm
.
currentOffset
(
)
)
;
}
inline
void
EmitReturnFromIC
(
MacroAssembler
&
masm
)
{
masm
.
branch
(
ra
)
;
}
inline
void
EmitBaselineLeaveStubFrame
(
MacroAssembler
&
masm
)
{
masm
.
loadPtr
(
Address
(
FramePointer
BaselineStubFrameLayout
:
:
ICStubOffsetFromFP
)
ICStubReg
)
;
masm
.
movePtr
(
FramePointer
StackPointer
)
;
masm
.
Pop
(
FramePointer
)
;
masm
.
Pop
(
ICTailCallReg
)
;
{
SecondScratchRegisterScope
scratch2
(
masm
)
;
masm
.
Pop
(
scratch2
)
;
}
}
template
<
typename
AddrType
>
inline
void
EmitPreBarrier
(
MacroAssembler
&
masm
const
AddrType
&
addr
MIRType
type
)
{
masm
.
push
(
ra
)
;
masm
.
guardedCallPreBarrier
(
addr
type
)
;
masm
.
pop
(
ra
)
;
}
inline
void
EmitStubGuardFailure
(
MacroAssembler
&
masm
)
{
masm
.
loadPtr
(
Address
(
ICStubReg
ICCacheIRStub
:
:
offsetOfNext
(
)
)
ICStubReg
)
;
MOZ_ASSERT
(
ICTailCallReg
=
=
ra
)
;
masm
.
jump
(
Address
(
ICStubReg
ICStub
:
:
offsetOfStubCode
(
)
)
)
;
}
}
}
#
endif
