#
ifndef
jit_loong64_SharedICHelpers_loong64_inl_h
#
define
jit_loong64_SharedICHelpers_loong64_inl_h
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
SharedICHelpers
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
namespace
js
{
namespace
jit
{
inline
void
EmitBaselineTailCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
uint32_t
argSize
)
{
Register
scratch
=
R2
.
scratchReg
(
)
;
masm
.
movePtr
(
BaselineFrameReg
scratch
)
;
masm
.
addPtr
(
Imm32
(
BaselineFrame
:
:
FramePointerOffset
)
scratch
)
;
masm
.
subPtr
(
BaselineStackReg
scratch
)
;
#
ifdef
DEBUG
masm
.
subPtr
(
Imm32
(
argSize
)
scratch
)
;
Address
frameSizeAddr
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfDebugFrameSize
(
)
)
;
masm
.
store32
(
scratch
frameSizeAddr
)
;
masm
.
addPtr
(
Imm32
(
argSize
)
scratch
)
;
#
endif
MOZ_ASSERT
(
ICTailCallReg
=
=
ra
)
;
masm
.
makeFrameDescriptor
(
scratch
FrameType
:
:
BaselineJS
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
subPtr
(
Imm32
(
sizeof
(
CommonFrameLayout
)
)
StackPointer
)
;
masm
.
storePtr
(
scratch
Address
(
StackPointer
CommonFrameLayout
:
:
offsetOfDescriptor
(
)
)
)
;
masm
.
storePtr
(
ra
Address
(
StackPointer
CommonFrameLayout
:
:
offsetOfReturnAddress
(
)
)
)
;
masm
.
jump
(
target
)
;
}
inline
void
EmitBaselineCreateStubFrameDescriptor
(
MacroAssembler
&
masm
Register
reg
uint32_t
headerSize
)
{
masm
.
movePtr
(
BaselineFrameReg
reg
)
;
masm
.
addPtr
(
Imm32
(
sizeof
(
intptr_t
)
*
2
)
reg
)
;
masm
.
subPtr
(
BaselineStackReg
reg
)
;
masm
.
makeFrameDescriptor
(
reg
FrameType
:
:
BaselineStub
headerSize
)
;
}
inline
void
EmitBaselineCallVM
(
TrampolinePtr
target
MacroAssembler
&
masm
)
{
Register
scratch
=
R2
.
scratchReg
(
)
;
EmitBaselineCreateStubFrameDescriptor
(
masm
scratch
ExitFrameLayout
:
:
Size
(
)
)
;
masm
.
push
(
scratch
)
;
masm
.
call
(
target
)
;
}
inline
void
EmitBaselineEnterStubFrame
(
MacroAssembler
&
masm
Register
scratch
)
{
MOZ_ASSERT
(
scratch
!
=
ICTailCallReg
)
;
masm
.
movePtr
(
BaselineFrameReg
scratch
)
;
masm
.
addPtr
(
Imm32
(
BaselineFrame
:
:
FramePointerOffset
)
scratch
)
;
masm
.
subPtr
(
BaselineStackReg
scratch
)
;
#
ifdef
DEBUG
Address
frameSizeAddr
(
BaselineFrameReg
BaselineFrame
:
:
reverseOffsetOfDebugFrameSize
(
)
)
;
masm
.
store32
(
scratch
frameSizeAddr
)
;
#
endif
masm
.
makeFrameDescriptor
(
scratch
FrameType
:
:
BaselineJS
BaselineStubFrameLayout
:
:
Size
(
)
)
;
masm
.
subPtr
(
Imm32
(
STUB_FRAME_SIZE
)
StackPointer
)
;
masm
.
storePtr
(
scratch
Address
(
StackPointer
offsetof
(
BaselineStubFrame
descriptor
)
)
)
;
masm
.
storePtr
(
ICTailCallReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
returnAddress
)
)
)
;
masm
.
storePtr
(
ICStubReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
savedStub
)
)
)
;
masm
.
storePtr
(
BaselineFrameReg
Address
(
StackPointer
offsetof
(
BaselineStubFrame
savedFrame
)
)
)
;
masm
.
movePtr
(
BaselineStackReg
BaselineFrameReg
)
;
masm
.
assertStackAlignment
(
sizeof
(
Value
)
0
)
;
}
}
}
#
endif
