#
ifndef
jit_ABIFunctionList_inl_h
#
define
jit_ABIFunctionList_inl_h
#
include
"
jslibmath
.
h
"
#
include
"
jsmath
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
builtin
/
Array
.
h
"
#
include
"
builtin
/
MapObject
.
h
"
#
include
"
builtin
/
RegExp
.
h
"
#
include
"
irregexp
/
RegExpAPI
.
h
"
#
include
"
jit
/
ABIFunctions
.
h
"
#
include
"
jit
/
Bailouts
.
h
"
#
include
"
jit
/
Ion
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
VMFunctions
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
experimental
/
JitInfo
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
proxy
/
Proxy
.
h
"
#
include
"
vm
/
ArgumentsObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
RegExpShared
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
wasm
/
WasmBuiltins
.
h
"
#
include
"
builtin
/
Boolean
-
inl
.
h
"
namespace
js
{
namespace
jit
{
#
if
JS_GC_PROBES
#
define
ABIFUNCTION_JS_GC_PROBES_LIST
(
_
)
\
_
(
js
:
:
jit
:
:
TraceCreateObject
)
#
else
#
define
ABIFUNCTION_JS_GC_PROBES_LIST
(
_
)
#
endif
#
ifdef
WASM_CODEGEN_DEBUG
#
define
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
\
_
(
js
:
:
wasm
:
:
PrintF32
)
\
_
(
js
:
:
wasm
:
:
PrintF64
)
\
_
(
js
:
:
wasm
:
:
PrintI32
)
\
_
(
js
:
:
wasm
:
:
PrintPtr
)
\
_
(
js
:
:
wasm
:
:
PrintText
)
#
else
#
define
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
#
endif
#
define
ABIFUNCTION_LIST
(
_
)
\
ABIFUNCTION_JS_GC_PROBES_LIST
(
_
)
\
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
\
_
(
js
:
:
ArgumentsObject
:
:
finishForIonPure
)
\
_
(
js
:
:
ArrayShiftMoveElements
)
\
_
(
js
:
:
ecmaAtan2
)
\
_
(
js
:
:
ecmaHypot
)
\
_
(
js
:
:
ecmaPow
)
\
_
(
js
:
:
EmulatesUndefined
)
\
_
(
js
:
:
ExecuteRegExpAtomRaw
)
\
_
(
js_free
)
\
_
(
js
:
:
hypot3
)
\
_
(
js
:
:
hypot4
)
\
_
(
js
:
:
Int32ToStringHelperPure
)
\
_
(
js
:
:
irregexp
:
:
CaseInsensitiveCompareNonUnicode
)
\
_
(
js
:
:
irregexp
:
:
CaseInsensitiveCompareUnicode
)
\
_
(
js
:
:
irregexp
:
:
GrowBacktrackStack
)
\
_
(
js
:
:
jit
:
:
AllocateAndInitTypedArrayBuffer
)
\
_
(
js
:
:
jit
:
:
AllocateBigIntNoGC
)
\
_
(
js
:
:
jit
:
:
AllocateFatInlineString
)
\
_
(
js
:
:
jit
:
:
AllocateString
)
\
_
(
js
:
:
jit
:
:
AssertValidBigIntPtr
)
\
_
(
js
:
:
jit
:
:
AssertValidObjectOrNullPtr
)
\
_
(
js
:
:
jit
:
:
AssertValidObjectPtr
)
\
_
(
js
:
:
jit
:
:
AssertValidStringPtr
)
\
_
(
js
:
:
jit
:
:
AssertValidSymbolPtr
)
\
_
(
js
:
:
jit
:
:
AssertValidValue
)
\
_
(
js
:
:
jit
:
:
AssumeUnreachable
)
\
_
(
js
:
:
jit
:
:
Bailout
)
\
_
(
js
:
:
jit
:
:
BigIntNumberEqual
<
EqualityKind
:
:
Equal
>
)
\
_
(
js
:
:
jit
:
:
BigIntNumberEqual
<
EqualityKind
:
:
NotEqual
>
)
\
_
(
js
:
:
jit
:
:
BigIntNumberCompare
<
ComparisonKind
:
:
LessThan
>
)
\
_
(
js
:
:
jit
:
:
NumberBigIntCompare
<
ComparisonKind
:
:
LessThan
>
)
\
_
(
js
:
:
jit
:
:
NumberBigIntCompare
<
ComparisonKind
:
:
GreaterThanOrEqual
>
)
\
_
(
js
:
:
jit
:
:
BigIntNumberCompare
<
ComparisonKind
:
:
GreaterThanOrEqual
>
)
\
_
(
js
:
:
jit
:
:
CreateMatchResultFallbackFunc
)
\
_
(
js
:
:
jit
:
:
FinishBailoutToBaseline
)
\
_
(
js
:
:
jit
:
:
GetDynamicNamePure
)
\
_
(
js
:
:
jit
:
:
GetNativeDataPropertyByValuePure
<
false
>
)
\
_
(
js
:
:
jit
:
:
GetNativeDataPropertyByValuePure
<
true
>
)
\
_
(
js
:
:
jit
:
:
GetNativeDataPropertyPure
<
false
>
)
\
_
(
js
:
:
jit
:
:
GetNativeDataPropertyPure
<
true
>
)
\
_
(
js
:
:
jit
:
:
HandleCodeCoverageAtPC
)
\
_
(
js
:
:
jit
:
:
HandleCodeCoverageAtPrologue
)
\
_
(
js
:
:
jit
:
:
HandleException
)
\
_
(
js
:
:
jit
:
:
HasNativeDataPropertyPure
<
false
>
)
\
_
(
js
:
:
jit
:
:
HasNativeDataPropertyPure
<
true
>
)
\
_
(
js
:
:
jit
:
:
HasNativeElementPure
)
\
_
(
js
:
:
jit
:
:
InitBaselineFrameForOsr
)
\
_
(
js
:
:
jit
:
:
InvalidationBailout
)
\
_
(
js
:
:
jit
:
:
LazyLinkTopActivation
)
\
_
(
js
:
:
jit
:
:
PostGlobalWriteBarrier
)
\
_
(
js
:
:
jit
:
:
PostWriteBarrier
)
\
_
(
js
:
:
jit
:
:
PostWriteElementBarrier
<
IndexInBounds
:
:
Yes
>
)
\
_
(
js
:
:
jit
:
:
PostWriteElementBarrier
<
IndexInBounds
:
:
Maybe
>
)
\
_
(
js
:
:
jit
:
:
Printf0
)
\
_
(
js
:
:
jit
:
:
Printf1
)
\
_
(
js
:
:
jit
:
:
SetNativeDataPropertyPure
<
false
>
)
\
_
(
js
:
:
jit
:
:
SetNativeDataPropertyPure
<
true
>
)
\
_
(
js
:
:
jit
:
:
WrapObjectPure
)
\
_
(
js
:
:
MapIteratorObject
:
:
next
)
\
_
(
js
:
:
NativeObject
:
:
addDenseElementPure
)
\
_
(
js
:
:
NativeObject
:
:
growSlotsPure
)
\
_
(
js
:
:
NumberMod
)
\
_
(
js
:
:
NumberToStringHelperPure
)
\
_
(
js
:
:
powi
)
\
_
(
js
:
:
ProxyGetProperty
)
\
_
(
js
:
:
RegExpInstanceOptimizableRaw
)
\
_
(
js
:
:
RegExpPrototypeOptimizableRaw
)
\
_
(
js
:
:
SetIteratorObject
:
:
next
)
\
_
(
js
:
:
StringToNumberPure
)
\
_
(
js
:
:
TraceLogStartEventPrivate
)
\
_
(
js
:
:
TraceLogStopEventPrivate
)
#
define
ABIFUNCTION_AND_TYPE_LIST
(
_
)
\
_
(
js
:
:
TraceLogStartEvent
\
void
(
*
)
(
TraceLoggerThread
*
const
TraceLoggerEvent
&
)
)
\
_
(
JS
:
:
ToInt32
int32_t
(
*
)
(
double
)
)
#
define
ABIFUNCTIONSIG_LIST
(
_
)
\
_
(
AtomicsCompareExchangeFn
)
\
_
(
AtomicsReadWriteModifyFn
)
\
_
(
bool
(
*
)
(
BigInt
*
BigInt
*
)
)
\
_
(
bool
(
*
)
(
BigInt
*
double
)
)
\
_
(
bool
(
*
)
(
double
BigInt
*
)
)
\
_
(
float
(
*
)
(
float
)
)
\
_
(
JSJitGetterOp
)
\
_
(
JSJitMethodOp
)
\
_
(
JSJitSetterOp
)
\
_
(
JSNative
)
\
_
(
js
:
:
UnaryMathFunctionType
)
\
_
(
void
(
*
)
(
js
:
:
gc
:
:
StoreBuffer
*
js
:
:
gc
:
:
Cell
*
*
)
)
\
_
(
void
(
*
)
(
JSRuntime
*
rt
JSObject
*
*
objp
)
)
\
_
(
void
(
*
)
(
JSRuntime
*
rt
JSString
*
*
stringp
)
)
\
_
(
void
(
*
)
(
JSRuntime
*
rt
ObjectGroup
*
*
groupp
)
)
\
_
(
void
(
*
)
(
JSRuntime
*
rt
Shape
*
*
shapep
)
)
\
_
(
void
(
*
)
(
JSRuntime
*
rt
Value
*
vp
)
)
#
if
MOZ_IS_GCC
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wignored
-
attributes
"
#
endif
#
define
DEF_TEMPLATE
(
fp
)
\
template
<
>
\
struct
ABIFunctionData
<
decltype
(
&
(
:
:
fp
)
)
:
:
fp
>
{
\
static
constexpr
bool
registered
=
true
;
\
}
;
ABIFUNCTION_LIST
(
DEF_TEMPLATE
)
#
undef
DEF_TEMPLATE
#
define
DEF_TEMPLATE
(
fp
.
.
.
)
\
template
<
>
\
struct
ABIFunctionData
<
__VA_ARGS__
:
:
fp
>
{
\
static
constexpr
bool
registered
=
true
;
\
}
;
ABIFUNCTION_AND_TYPE_LIST
(
DEF_TEMPLATE
)
#
undef
DEF_TEMPLATE
#
define
DEF_TEMPLATE
(
.
.
.
)
\
template
<
>
\
struct
ABIFunctionSignatureData
<
__VA_ARGS__
>
{
\
static
constexpr
bool
registered
=
true
;
\
}
;
ABIFUNCTIONSIG_LIST
(
DEF_TEMPLATE
)
#
undef
DEF_TEMPLATE
#
if
MOZ_IS_GCC
#
pragma
GCC
diagnostic
pop
#
endif
}
}
#
endif
