#
ifndef
jit_ABIFunctionList_inl_h
#
define
jit_ABIFunctionList_inl_h
#
include
"
jslibmath
.
h
"
#
include
"
irregexp
/
RegExpAPI
.
h
"
#
include
"
jit
/
ABIFunctions
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
vm
/
ArgumentsObject
.
h
"
#
include
"
wasm
/
WasmBuiltins
.
h
"
namespace
js
{
namespace
jit
{
#
ifdef
WASM_CODEGEN_DEBUG
#
define
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
\
_
(
js
:
:
wasm
:
:
PrintF32
)
\
_
(
js
:
:
wasm
:
:
PrintF64
)
\
_
(
js
:
:
wasm
:
:
PrintI32
)
\
_
(
js
:
:
wasm
:
:
PrintPtr
)
\
_
(
js
:
:
wasm
:
:
PrintText
)
#
else
#
define
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
#
endif
#
define
ABIFUNCTION_LIST
(
_
)
\
ABIFUNCTION_WASM_CODEGEN_DEBUG_LIST
(
_
)
\
_
(
js
:
:
ArgumentsObject
:
:
finishForIonPure
)
\
_
(
js
:
:
irregexp
:
:
CaseInsensitiveCompareNonUnicode
)
\
_
(
js
:
:
irregexp
:
:
CaseInsensitiveCompareUnicode
)
\
_
(
js
:
:
irregexp
:
:
GrowBacktrackStack
)
\
_
(
js
:
:
NumberMod
)
\
#
define
ABIFUNCTION_AND_TYPE_LIST
(
_
)
\
_
(
JS
:
:
ToInt32
int32_t
(
*
)
(
double
)
)
#
if
MOZ_IS_GCC
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wignored
-
attributes
"
#
endif
#
define
DEF_TEMPLATE
(
fp
)
\
template
<
>
\
struct
ABIFunctionData
<
decltype
(
&
(
:
:
fp
)
)
:
:
fp
>
{
\
static
constexpr
bool
registered
=
true
;
\
}
;
ABIFUNCTION_LIST
(
DEF_TEMPLATE
)
#
undef
DEF_TEMPLATE
#
define
DEF_TEMPLATE
(
fp
.
.
.
)
\
template
<
>
\
struct
ABIFunctionData
<
__VA_ARGS__
:
:
fp
>
{
\
static
constexpr
bool
registered
=
true
;
\
}
;
ABIFUNCTION_AND_TYPE_LIST
(
DEF_TEMPLATE
)
#
undef
DEF_TEMPLATE
#
if
MOZ_IS_GCC
#
pragma
GCC
diagnostic
pop
#
endif
}
}
#
endif
