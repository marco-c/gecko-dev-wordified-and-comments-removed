#
include
"
jit
/
WarpOracle
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
jit
/
JitScript
.
h
"
#
include
"
jit
/
MIRGenerator
.
h
"
#
include
"
jit
/
WarpBuilder
.
h
"
#
include
"
vm
/
BytecodeIterator
.
h
"
#
include
"
vm
/
BytecodeLocation
.
h
"
#
include
"
vm
/
BytecodeIterator
-
inl
.
h
"
#
include
"
vm
/
BytecodeLocation
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
WarpOracle
:
:
WarpOracle
(
JSContext
*
cx
MIRGenerator
&
mirGen
HandleScript
script
)
:
cx_
(
cx
)
mirGen_
(
mirGen
)
alloc_
(
mirGen
.
alloc
(
)
)
script_
(
script
)
{
}
mozilla
:
:
GenericErrorResult
<
AbortReason
>
WarpOracle
:
:
abort
(
AbortReason
r
)
{
auto
res
=
mirGen_
.
abort
(
r
)
;
JitSpew
(
JitSpew_IonAbort
"
aborted
%
s
"
script_
-
>
filename
(
)
)
;
return
res
;
}
mozilla
:
:
GenericErrorResult
<
AbortReason
>
WarpOracle
:
:
abort
(
AbortReason
r
const
char
*
message
.
.
.
)
{
va_list
ap
;
va_start
(
ap
message
)
;
auto
res
=
mirGen_
.
abortFmt
(
r
message
ap
)
;
va_end
(
ap
)
;
JitSpew
(
JitSpew_IonAbort
"
aborted
%
s
"
script_
-
>
filename
(
)
)
;
return
res
;
}
AbortReasonOr
<
WarpSnapshot
*
>
WarpOracle
:
:
createSnapshot
(
)
{
WarpScriptSnapshot
*
scriptSnapshot
;
MOZ_TRY_VAR
(
scriptSnapshot
createScriptSnapshot
(
script_
)
)
;
auto
*
snapshot
=
new
(
alloc_
.
fallible
(
)
)
WarpSnapshot
(
scriptSnapshot
)
;
if
(
!
snapshot
)
{
return
abort
(
AbortReason
:
:
Alloc
)
;
}
return
snapshot
;
}
template
<
typename
T
typename
.
.
.
Args
>
static
MOZ_MUST_USE
bool
AddOpSnapshot
(
TempAllocator
&
alloc
WarpOpSnapshotList
&
snapshots
uint32_t
offset
Args
&
&
.
.
.
args
)
{
T
*
snapshot
=
new
(
alloc
.
fallible
(
)
)
T
(
offset
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
if
(
!
snapshot
)
{
return
false
;
}
snapshots
.
insertBack
(
snapshot
)
;
return
true
;
}
AbortReasonOr
<
WarpScriptSnapshot
*
>
WarpOracle
:
:
createScriptSnapshot
(
HandleScript
script
)
{
MOZ_ASSERT
(
script
-
>
hasJitScript
(
)
)
;
if
(
!
script
-
>
jitScript
(
)
-
>
ensureHasCachedIonData
(
cx_
script
)
)
{
return
abort
(
AbortReason
:
:
Error
)
;
}
WarpOpSnapshotList
opSnapshots
;
auto
autoClearOpSnapshots
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
opSnapshots
.
clear
(
)
;
}
)
;
for
(
BytecodeLocation
loc
:
AllBytecodesIterable
(
script
)
)
{
JSOp
op
=
loc
.
getOp
(
)
;
switch
(
op
)
{
#
define
OP_CASE
(
OP
)
case
JSOp
:
:
OP
:
WARP_OPCODE_LIST
(
OP_CASE
)
#
undef
OP_CASE
break
;
default
:
#
ifdef
DEBUG
return
abort
(
AbortReason
:
:
Disable
"
Unsupported
opcode
:
%
s
"
CodeName
(
op
)
)
;
#
else
return
abort
(
AbortReason
:
:
Disable
"
Unsupported
opcode
:
%
u
"
uint8_t
(
op
)
)
;
#
endif
}
uint32_t
offset
=
loc
.
bytecodeToOffset
(
script
)
;
switch
(
op
)
{
case
JSOp
:
:
Arguments
:
if
(
script
-
>
needsArgsObj
(
)
)
{
bool
mapped
=
script
-
>
hasMappedArgsObj
(
)
;
ArgumentsObject
*
templateObj
=
script
-
>
realm
(
)
-
>
maybeArgumentsTemplateObject
(
mapped
)
;
if
(
!
AddOpSnapshot
<
WarpArguments
>
(
alloc_
opSnapshots
offset
templateObj
)
)
{
return
abort
(
AbortReason
:
:
Alloc
)
;
}
}
break
;
case
JSOp
:
:
RegExp
:
{
bool
hasShared
=
loc
.
getRegExp
(
script
)
-
>
hasShared
(
)
;
if
(
!
AddOpSnapshot
<
WarpRegExp
>
(
alloc_
opSnapshots
offset
hasShared
)
)
{
return
abort
(
AbortReason
:
:
Alloc
)
;
}
break
;
}
default
:
break
;
}
}
auto
*
scriptSnapshot
=
new
(
alloc_
.
fallible
(
)
)
WarpScriptSnapshot
(
script
std
:
:
move
(
opSnapshots
)
)
;
if
(
!
scriptSnapshot
)
{
return
abort
(
AbortReason
:
:
Alloc
)
;
}
autoClearOpSnapshots
.
release
(
)
;
return
scriptSnapshot
;
}
