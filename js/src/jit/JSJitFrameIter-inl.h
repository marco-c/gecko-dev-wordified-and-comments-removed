#
ifndef
jit_JSJitFrameIter_inl_h
#
define
jit_JSJitFrameIter_inl_h
#
include
"
jit
/
JSJitFrameIter
.
h
"
#
include
"
jit
/
Bailouts
.
h
"
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
ScriptFromCalleeToken
.
h
"
namespace
js
{
namespace
jit
{
inline
uint8_t
*
JSJitFrameIter
:
:
returnAddress
(
)
const
{
CommonFrameLayout
*
current
=
(
CommonFrameLayout
*
)
current_
;
return
current
-
>
returnAddress
(
)
;
}
inline
FrameType
JSJitFrameIter
:
:
prevType
(
)
const
{
CommonFrameLayout
*
current
=
(
CommonFrameLayout
*
)
current_
;
return
current
-
>
prevType
(
)
;
}
inline
ExitFrameLayout
*
JSJitFrameIter
:
:
exitFrame
(
)
const
{
MOZ_ASSERT
(
isExitFrame
(
)
)
;
return
(
ExitFrameLayout
*
)
fp
(
)
;
}
inline
JitFrameLayout
*
JSJitProfilingFrameIterator
:
:
framePtr
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
(
JitFrameLayout
*
)
fp_
;
}
inline
JSScript
*
JSJitProfilingFrameIterator
:
:
frameScript
(
)
const
{
return
ScriptFromCalleeToken
(
framePtr
(
)
-
>
calleeToken
(
)
)
;
}
inline
BaselineFrame
*
JSJitFrameIter
:
:
baselineFrame
(
)
const
{
MOZ_ASSERT
(
isBaselineJS
(
)
)
;
return
(
BaselineFrame
*
)
(
fp
(
)
-
BaselineFrame
:
:
FramePointerOffset
-
BaselineFrame
:
:
Size
(
)
)
;
}
inline
uint32_t
JSJitFrameIter
:
:
baselineFrameNumValueSlots
(
)
const
{
MOZ_ASSERT
(
isBaselineJS
(
)
)
;
return
baselineFrame
(
)
-
>
numValueSlots
(
*
baselineFrameSize_
)
;
}
template
<
typename
T
>
bool
JSJitFrameIter
:
:
isExitFrameLayout
(
)
const
{
if
(
!
isExitFrame
(
)
)
{
return
false
;
}
return
exitFrame
(
)
-
>
is
<
T
>
(
)
;
}
}
}
#
endif
