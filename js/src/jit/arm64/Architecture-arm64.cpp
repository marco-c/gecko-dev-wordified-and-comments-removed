#
include
"
jit
/
arm64
/
Architecture
-
arm64
.
h
"
#
include
<
cstring
>
#
include
"
jit
/
arm64
/
vixl
/
Cpu
-
vixl
.
h
"
#
include
"
jit
/
FlushICache
.
h
"
#
include
"
jit
/
RegisterSets
.
h
"
namespace
js
{
namespace
jit
{
Registers
:
:
Code
Registers
:
:
FromName
(
const
char
*
name
)
{
if
(
strcmp
(
name
"
ip0
"
)
=
=
0
)
{
return
ip0
;
}
if
(
strcmp
(
name
"
ip1
"
)
=
=
0
)
{
return
ip1
;
}
if
(
strcmp
(
name
"
fp
"
)
=
=
0
)
{
return
fp
;
}
for
(
uint32_t
i
=
0
;
i
<
Total
;
i
+
+
)
{
if
(
strcmp
(
GetName
(
i
)
name
)
=
=
0
)
{
return
Code
(
i
)
;
}
}
return
Invalid
;
}
FloatRegisters
:
:
Code
FloatRegisters
:
:
FromName
(
const
char
*
name
)
{
for
(
size_t
i
=
0
;
i
<
Total
;
i
+
+
)
{
if
(
strcmp
(
GetName
(
i
)
name
)
=
=
0
)
{
return
Code
(
i
)
;
}
}
return
Invalid
;
}
FloatRegisterSet
FloatRegister
:
:
ReduceSetForPush
(
const
FloatRegisterSet
&
s
)
{
SetType
all
=
s
.
bits
(
)
;
SetType
set128b
=
(
all
&
FloatRegisters
:
:
AllSimd128Mask
)
>
>
FloatRegisters
:
:
ShiftSimd128
;
SetType
doubleSet
=
(
all
&
FloatRegisters
:
:
AllDoubleMask
)
>
>
FloatRegisters
:
:
ShiftDouble
;
SetType
singleSet
=
(
all
&
FloatRegisters
:
:
AllSingleMask
)
>
>
FloatRegisters
:
:
ShiftSingle
;
SetType
set64b
=
(
singleSet
|
doubleSet
)
&
~
set128b
;
SetType
reduced
=
(
set128b
<
<
FloatRegisters
:
:
ShiftSimd128
)
|
(
set64b
<
<
FloatRegisters
:
:
ShiftDouble
)
;
return
FloatRegisterSet
(
reduced
)
;
}
uint32_t
FloatRegister
:
:
GetPushSizeInBytes
(
const
FloatRegisterSet
&
s
)
{
SetType
all
=
s
.
bits
(
)
;
SetType
set128b
=
(
all
&
FloatRegisters
:
:
AllSimd128Mask
)
>
>
FloatRegisters
:
:
ShiftSimd128
;
SetType
doubleSet
=
(
all
&
FloatRegisters
:
:
AllDoubleMask
)
>
>
FloatRegisters
:
:
ShiftDouble
;
SetType
singleSet
=
(
all
&
FloatRegisters
:
:
AllSingleMask
)
>
>
FloatRegisters
:
:
ShiftSingle
;
SetType
set64b
=
(
singleSet
|
doubleSet
)
&
~
set128b
;
return
(
(
set64b
.
size
(
)
+
1
)
&
~
1
)
*
sizeof
(
double
)
+
set128b
.
size
(
)
*
SizeOfSimd128
;
}
uint32_t
FloatRegister
:
:
getRegisterDumpOffsetInBytes
(
)
{
static_assert
(
sizeof
(
jit
:
:
FloatRegisters
:
:
RegisterContent
)
=
=
16
)
;
return
encoding
(
)
*
sizeof
(
jit
:
:
FloatRegisters
:
:
RegisterContent
)
;
}
FloatRegisterSet
FloatRegister
:
:
BroadcastToAllSizes
(
const
FloatRegisterSet
&
s
)
{
SetType
all
=
s
.
bits
(
)
;
SetType
set128b
=
(
all
&
FloatRegisters
:
:
AllSimd128Mask
)
>
>
FloatRegisters
:
:
ShiftSimd128
;
SetType
doubleSet
=
(
all
&
FloatRegisters
:
:
AllDoubleMask
)
>
>
FloatRegisters
:
:
ShiftDouble
;
SetType
singleSet
=
(
all
&
FloatRegisters
:
:
AllSingleMask
)
>
>
FloatRegisters
:
:
ShiftSingle
;
SetType
merged
=
set128b
|
doubleSet
|
singleSet
;
SetType
broadcasted
=
(
merged
<
<
FloatRegisters
:
:
ShiftSimd128
)
|
(
merged
<
<
FloatRegisters
:
:
ShiftDouble
)
|
(
merged
<
<
FloatRegisters
:
:
ShiftSingle
)
;
return
FloatRegisterSet
(
broadcasted
)
;
}
uint32_t
GetARM64Flags
(
)
{
return
0
;
}
void
FlushICache
(
void
*
code
size_t
size
bool
codeIsThreadLocal
)
{
vixl
:
:
CPU
:
:
EnsureIAndDCacheCoherency
(
code
size
codeIsThreadLocal
)
;
}
bool
CanFlushICacheFromBackgroundThreads
(
)
{
return
vixl
:
:
CPU
:
:
CanFlushICacheFromBackgroundThreads
(
)
;
}
}
}
