#
include
"
jit
/
SharedIC
.
h
"
#
include
"
jit
/
SharedICHelpers
.
h
"
#
ifdef
JS_SIMULATOR_ARM64
#
include
"
jit
/
arm64
/
Assembler
-
arm64
.
h
"
#
include
"
jit
/
arm64
/
BaselineCompiler
-
arm64
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Debugger
-
vixl
.
h
"
#
endif
using
namespace
js
;
using
namespace
js
:
:
jit
;
namespace
js
{
namespace
jit
{
bool
ICCompare_Int32
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
;
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R0
&
failure
)
;
masm
.
branchTestInt32
(
Assembler
:
:
NotEqual
R1
&
failure
)
;
Assembler
:
:
Condition
cond
=
JSOpToCondition
(
op
true
)
;
masm
.
cmp32
(
R0
.
valueReg
(
)
R1
.
valueReg
(
)
)
;
masm
.
Cset
(
ARMRegister
(
R0
.
valueReg
(
)
32
)
cond
)
;
masm
.
tagValue
(
JSVAL_TYPE_BOOLEAN
R0
.
valueReg
(
)
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
bool
ICCompare_Double
:
:
Compiler
:
:
generateStubCode
(
MacroAssembler
&
masm
)
{
Label
failure
isNaN
;
masm
.
ensureDouble
(
R0
FloatReg0
&
failure
)
;
masm
.
ensureDouble
(
R1
FloatReg1
&
failure
)
;
Register
dest
=
R0
.
valueReg
(
)
;
Assembler
:
:
DoubleCondition
doubleCond
=
JSOpToDoubleCondition
(
op
)
;
Assembler
:
:
Condition
cond
=
Assembler
:
:
ConditionFromDoubleCondition
(
doubleCond
)
;
masm
.
compareDouble
(
doubleCond
FloatReg0
FloatReg1
)
;
masm
.
Cset
(
ARMRegister
(
dest
32
)
cond
)
;
masm
.
tagValue
(
JSVAL_TYPE_BOOLEAN
dest
R0
)
;
EmitReturnFromIC
(
masm
)
;
masm
.
bind
(
&
failure
)
;
EmitStubGuardFailure
(
masm
)
;
return
true
;
}
}
}
