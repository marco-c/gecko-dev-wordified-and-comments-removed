#
include
"
jit
/
arm64
/
SharedICHelpers
-
arm64
.
h
"
#
include
"
jit
/
Bailouts
.
h
"
#
include
"
jit
/
BaselineFrame
.
h
"
#
include
"
jit
/
CalleeToken
.
h
"
#
include
"
jit
/
JitFrames
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
PerfSpewer
.
h
"
#
include
"
jit
/
VMFunctions
.
h
"
#
include
"
vm
/
JitActivation
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
void
JitRuntime
:
:
generateEnterJIT
(
JSContext
*
cx
MacroAssembler
&
masm
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateEnterJIT
"
)
;
enterJITOffset_
=
startTrampolineCode
(
masm
)
;
const
Register
reg_code
=
IntArgReg0
;
const
Register
reg_argc
=
IntArgReg1
;
const
Register
reg_argv
=
IntArgReg2
;
const
Register
reg_osrFrame
=
IntArgReg3
;
const
Register
reg_callee
=
IntArgReg4
;
const
Register
reg_scope
=
IntArgReg5
;
const
Register
reg_osrNStack
=
IntArgReg6
;
const
Register
reg_vp
=
IntArgReg7
;
static_assert
(
OsrFrameReg
=
=
IntArgReg3
)
;
masm
.
SetStackPointer64
(
sp
)
;
masm
.
push
(
r30
r29
)
;
masm
.
moveStackPtrTo
(
r29
)
;
masm
.
push
(
r19
r20
r21
r22
)
;
masm
.
push
(
r23
r24
r25
r26
)
;
masm
.
push
(
r27
r28
r7
r30
)
;
masm
.
push
(
d8
d9
d10
d11
)
;
masm
.
push
(
d12
d13
d14
d15
)
;
#
ifdef
DEBUG
masm
.
movePtr
(
ImmWord
(
0xdeadd00d
)
r23
)
;
masm
.
movePtr
(
ImmWord
(
0xdeadd11d
)
r24
)
;
masm
.
push
(
r23
r24
)
;
#
endif
masm
.
assertStackAlignment
(
JitStackAlignment
)
;
Label
notFunction
;
Register
actual_args
=
r19
;
masm
.
branchTest32
(
Assembler
:
:
NonZero
reg_callee
Imm32
(
CalleeTokenScriptBit
)
&
notFunction
)
;
masm
.
andPtr
(
Imm32
(
uint32_t
(
CalleeTokenMask
)
)
reg_callee
actual_args
)
;
masm
.
loadFunctionArgCount
(
actual_args
actual_args
)
;
masm
.
max32
(
actual_args
reg_argc
actual_args
)
;
Register
frame_size
=
r20
;
Register
scratch
=
r21
;
Register
scratch2
=
r22
;
uint32_t
extraSlots
=
4
;
masm
.
add32
(
Imm32
(
extraSlots
+
1
)
actual_args
frame_size
)
;
masm
.
and32
(
Imm32
(
~
1
)
frame_size
)
;
masm
.
touchFrameValues
(
frame_size
scratch
scratch2
)
;
masm
.
lshift32
(
Imm32
(
3
)
frame_size
)
;
masm
.
subFromStackPtr
(
frame_size
)
;
ARMRegister
dest
(
r23
64
)
;
ARMRegister
arg
(
scratch
64
)
;
ARMRegister
tmp_argc
(
scratch2
64
)
;
ARMRegister
argc
(
reg_argc
64
)
;
ARMRegister
argv
(
reg_argv
64
)
;
masm
.
Add
(
dest
sp
Operand
(
2
*
sizeof
(
uintptr_t
)
)
)
;
masm
.
Add
(
tmp_argc
argc
Operand
(
1
)
)
;
masm
.
Sub
(
argv
argv
Operand
(
sizeof
(
Value
)
)
)
;
Label
argLoop
;
masm
.
bind
(
&
argLoop
)
;
masm
.
Ldr
(
arg
MemOperand
(
argv
Operand
(
8
)
vixl
:
:
PostIndex
)
)
;
masm
.
Str
(
arg
MemOperand
(
dest
Operand
(
8
)
vixl
:
:
PostIndex
)
)
;
masm
.
Subs
(
tmp_argc
tmp_argc
Operand
(
1
)
)
;
masm
.
B
(
&
argLoop
vixl
:
:
Condition
:
:
NonZero
)
;
Label
noUndef
;
const
ARMRegister
missing_args
(
scratch2
64
)
;
masm
.
Subs
(
missing_args
ARMRegister
(
actual_args
64
)
argc
)
;
masm
.
B
(
&
noUndef
vixl
:
:
Condition
:
:
Zero
)
;
Label
undefLoop
;
masm
.
Mov
(
arg
int64_t
(
UndefinedValue
(
)
.
asRawBits
(
)
)
)
;
masm
.
bind
(
&
undefLoop
)
;
masm
.
Str
(
arg
MemOperand
(
dest
Operand
(
8
)
vixl
:
:
PostIndex
)
)
;
masm
.
Subs
(
missing_args
missing_args
Operand
(
1
)
)
;
masm
.
B
(
&
undefLoop
vixl
:
:
Condition
:
:
NonZero
)
;
masm
.
bind
(
&
noUndef
)
;
Label
doneArgs
;
masm
.
branchTest32
(
Assembler
:
:
Zero
reg_callee
Imm32
(
CalleeToken_FunctionConstructing
)
&
doneArgs
)
;
masm
.
Ldr
(
arg
MemOperand
(
argv
)
)
;
masm
.
Str
(
arg
MemOperand
(
dest
)
)
;
masm
.
jump
(
&
doneArgs
)
;
masm
.
bind
(
&
notFunction
)
;
const
int32_t
nonFunctionFrameSize
=
2
*
sizeof
(
uintptr_t
)
;
static_assert
(
nonFunctionFrameSize
%
JitStackAlignment
=
=
0
)
;
masm
.
subFromStackPtr
(
Imm32
(
nonFunctionFrameSize
)
)
;
masm
.
bind
(
&
doneArgs
)
;
masm
.
unboxInt32
(
Address
(
reg_vp
0
)
scratch
)
;
masm
.
makeFrameDescriptorForJitCall
(
FrameType
:
:
CppToJSJit
scratch
scratch
)
;
masm
.
Str
(
ARMRegister
(
scratch
64
)
MemOperand
(
sp
0
)
)
;
masm
.
Str
(
ARMRegister
(
reg_callee
64
)
MemOperand
(
sp
sizeof
(
uintptr_t
)
)
)
;
masm
.
Mov
(
PseudoStackPointer64
sp
)
;
masm
.
SetStackPointer64
(
PseudoStackPointer64
)
;
masm
.
checkStackAlignment
(
)
;
Label
osrReturnPoint
;
{
AllocatableGeneralRegisterSet
regs
(
GeneralRegisterSet
:
:
All
(
)
)
;
MOZ_ASSERT
(
!
regs
.
has
(
FramePointer
)
)
;
regs
.
take
(
OsrFrameReg
)
;
regs
.
take
(
reg_code
)
;
regs
.
take
(
reg_osrNStack
)
;
MOZ_ASSERT
(
!
regs
.
has
(
ReturnReg
)
"
ReturnReg
matches
reg_code
"
)
;
Label
notOsr
;
masm
.
branchTestPtr
(
Assembler
:
:
Zero
OsrFrameReg
OsrFrameReg
&
notOsr
)
;
Register
scratch
=
regs
.
takeAny
(
)
;
masm
.
Adr
(
ARMRegister
(
scratch
64
)
&
osrReturnPoint
)
;
masm
.
push
(
scratch
FramePointer
)
;
masm
.
moveStackPtrTo
(
FramePointer
)
;
masm
.
subFromStackPtr
(
Imm32
(
BaselineFrame
:
:
Size
(
)
)
)
;
Register
framePtrScratch
=
regs
.
takeAny
(
)
;
masm
.
touchFrameValues
(
reg_osrNStack
scratch
framePtrScratch
)
;
masm
.
moveStackPtrTo
(
framePtrScratch
)
;
masm
.
Lsl
(
ARMRegister
(
scratch
32
)
ARMRegister
(
reg_osrNStack
32
)
3
)
;
masm
.
subFromStackPtr
(
scratch
)
;
masm
.
push
(
FrameDescriptor
(
FrameType
:
:
BaselineJS
)
)
;
masm
.
push
(
xzr
)
;
masm
.
push
(
FramePointer
)
;
masm
.
loadJSContext
(
scratch
)
;
masm
.
enterFakeExitFrame
(
scratch
scratch
ExitFrameType
:
:
Bare
)
;
masm
.
push
(
reg_code
)
;
using
Fn
=
bool
(
*
)
(
BaselineFrame
*
frame
InterpreterFrame
*
interpFrame
uint32_t
numStackValues
)
;
masm
.
setupUnalignedABICall
(
r19
)
;
masm
.
passABIArg
(
framePtrScratch
)
;
masm
.
passABIArg
(
reg_osrFrame
)
;
masm
.
passABIArg
(
reg_osrNStack
)
;
masm
.
callWithABI
<
Fn
jit
:
:
InitBaselineFrameForOsr
>
(
ABIType
:
:
General
CheckUnsafeCallWithABI
:
:
DontCheckHasExitFrame
)
;
masm
.
pop
(
scratch
)
;
MOZ_ASSERT
(
scratch
!
=
ReturnReg
)
;
masm
.
addToStackPtr
(
Imm32
(
ExitFrameLayout
:
:
SizeWithFooter
(
)
)
)
;
Label
error
;
masm
.
branchIfFalseBool
(
ReturnReg
&
error
)
;
{
Label
skipProfilingInstrumentation
;
AbsoluteAddress
addressOfEnabled
(
cx
-
>
runtime
(
)
-
>
geckoProfiler
(
)
.
addressOfEnabled
(
)
)
;
masm
.
branch32
(
Assembler
:
:
Equal
addressOfEnabled
Imm32
(
0
)
&
skipProfilingInstrumentation
)
;
masm
.
profilerEnterFrame
(
FramePointer
regs
.
getAny
(
)
)
;
masm
.
bind
(
&
skipProfilingInstrumentation
)
;
}
masm
.
jump
(
scratch
)
;
masm
.
bind
(
&
error
)
;
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
addToStackPtr
(
Imm32
(
sizeof
(
uintptr_t
)
)
)
;
masm
.
syncStackPtr
(
)
;
masm
.
moveValue
(
MagicValue
(
JS_ION_ERROR
)
JSReturnOperand
)
;
masm
.
B
(
&
osrReturnPoint
)
;
masm
.
bind
(
&
notOsr
)
;
masm
.
movePtr
(
reg_scope
R1_
)
;
}
masm
.
assertStackAlignment
(
JitStackAlignment
2
*
sizeof
(
uintptr_t
)
)
;
masm
.
callJitNoProfiler
(
reg_code
)
;
masm
.
bind
(
&
osrReturnPoint
)
;
#
ifdef
DEBUG
static
constexpr
size_t
SavedRegSize
=
22
*
sizeof
(
void
*
)
;
#
else
static
constexpr
size_t
SavedRegSize
=
20
*
sizeof
(
void
*
)
;
#
endif
masm
.
computeEffectiveAddress
(
Address
(
FramePointer
-
int32_t
(
SavedRegSize
)
)
masm
.
getStackPointer
(
)
)
;
masm
.
syncStackPtr
(
)
;
masm
.
SetStackPointer64
(
sp
)
;
#
ifdef
DEBUG
masm
.
pop
(
r24
r23
)
;
Label
x23OK
x24OK
;
masm
.
branchPtr
(
Assembler
:
:
Equal
r23
ImmWord
(
0xdeadd00d
)
&
x23OK
)
;
masm
.
breakpoint
(
)
;
masm
.
bind
(
&
x23OK
)
;
masm
.
branchPtr
(
Assembler
:
:
Equal
r24
ImmWord
(
0xdeadd11d
)
&
x24OK
)
;
masm
.
breakpoint
(
)
;
masm
.
bind
(
&
x24OK
)
;
#
endif
masm
.
pop
(
d15
d14
d13
d12
)
;
masm
.
pop
(
d11
d10
d9
d8
)
;
masm
.
pop
(
r30
r7
r28
r27
)
;
masm
.
pop
(
r26
r25
r24
r23
)
;
masm
.
pop
(
r22
r21
r20
r19
)
;
masm
.
storeValue
(
JSReturnOperand
Address
(
reg_vp
0
)
)
;
masm
.
pop
(
r29
r30
)
;
masm
.
abiret
(
)
;
masm
.
SetStackPointer64
(
PseudoStackPointer64
)
;
}
mozilla
:
:
Maybe
<
:
:
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
>
JitRuntime
:
:
getCppEntryRegisters
(
JitFrameLayout
*
frameStackAddress
)
{
return
mozilla
:
:
Nothing
{
}
;
}
static
void
PushRegisterDump
(
MacroAssembler
&
masm
)
{
const
LiveRegisterSet
First28GeneralRegisters
=
LiveRegisterSet
(
GeneralRegisterSet
(
Registers
:
:
AllMask
&
~
(
1
<
<
31
|
1
<
<
30
|
1
<
<
29
|
1
<
<
28
)
)
FloatRegisterSet
(
FloatRegisters
:
:
NoneMask
)
)
;
const
LiveRegisterSet
AllFloatRegisters
=
LiveRegisterSet
(
GeneralRegisterSet
(
Registers
:
:
NoneMask
)
FloatRegisterSet
(
FloatRegisters
:
:
AllMask
)
)
;
masm
.
asVIXL
(
)
.
Push
(
xzr
x30
x29
xzr
)
;
masm
.
PushRegsInMask
(
First28GeneralRegisters
)
;
masm
.
PushRegsInMask
(
AllFloatRegisters
)
;
}
void
JitRuntime
:
:
generateInvalidator
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateInvalidator
"
)
;
invalidatorOffset_
=
startTrampolineCode
(
masm
)
;
PushRegisterDump
(
masm
)
;
masm
.
moveStackPtrTo
(
r0
)
;
masm
.
Sub
(
x1
masm
.
GetStackPointer64
(
)
Operand
(
sizeof
(
void
*
)
)
)
;
masm
.
moveToStackPtr
(
r1
)
;
using
Fn
=
bool
(
*
)
(
InvalidationBailoutStack
*
sp
BaselineBailoutInfo
*
*
info
)
;
masm
.
setupUnalignedABICall
(
r10
)
;
masm
.
passABIArg
(
r0
)
;
masm
.
passABIArg
(
r1
)
;
masm
.
callWithABI
<
Fn
InvalidationBailout
>
(
ABIType
:
:
General
CheckUnsafeCallWithABI
:
:
DontCheckOther
)
;
masm
.
pop
(
r2
)
;
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
jump
(
bailoutTail
)
;
}
void
JitRuntime
:
:
generateArgumentsRectifier
(
MacroAssembler
&
masm
ArgumentsRectifierKind
kind
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateArgumentsRectifier
"
)
;
switch
(
kind
)
{
case
ArgumentsRectifierKind
:
:
Normal
:
argumentsRectifierOffset_
=
startTrampolineCode
(
masm
)
;
break
;
case
ArgumentsRectifierKind
:
:
TrialInlining
:
trialInliningArgumentsRectifierOffset_
=
startTrampolineCode
(
masm
)
;
break
;
}
masm
.
push
(
lr
)
;
masm
.
push
(
FramePointer
)
;
masm
.
moveStackPtrTo
(
FramePointer
)
;
masm
.
loadNumActualArgs
(
FramePointer
r0
)
;
masm
.
loadPtr
(
Address
(
FramePointer
RectifierFrameLayout
:
:
offsetOfCalleeToken
(
)
)
r1
)
;
masm
.
And
(
x5
x1
Operand
(
CalleeTokenMask
)
)
;
masm
.
loadFunctionArgCount
(
x5
.
asUnsized
(
)
x6
.
asUnsized
(
)
)
;
static_assert
(
CalleeToken_FunctionConstructing
=
=
0x1
"
Constructing
must
be
low
-
order
bit
"
)
;
masm
.
And
(
x4
x1
Operand
(
CalleeToken_FunctionConstructing
)
)
;
masm
.
Add
(
x7
x6
x4
)
;
masm
.
mov
(
r0
r8
)
;
masm
.
Add
(
x3
masm
.
GetStackPointer64
(
)
Operand
(
x8
vixl
:
:
LSL
3
)
)
;
masm
.
Add
(
x3
x3
Operand
(
sizeof
(
RectifierFrameLayout
)
)
)
;
Label
noPadding
;
masm
.
Tbnz
(
x7
0
&
noPadding
)
;
masm
.
asVIXL
(
)
.
Push
(
xzr
)
;
masm
.
bind
(
&
noPadding
)
;
{
Label
notConstructing
;
masm
.
Cbz
(
x4
&
notConstructing
)
;
masm
.
loadPtr
(
Address
(
r3
sizeof
(
Value
)
)
r4
)
;
masm
.
Push
(
r4
)
;
masm
.
bind
(
&
notConstructing
)
;
}
masm
.
Sub
(
w2
w6
w8
)
;
masm
.
moveValue
(
UndefinedValue
(
)
ValueOperand
(
r4
)
)
;
{
Label
undefLoopTop
;
masm
.
bind
(
&
undefLoopTop
)
;
masm
.
Push
(
r4
)
;
masm
.
Subs
(
w2
w2
Operand
(
1
)
)
;
masm
.
B
(
&
undefLoopTop
Assembler
:
:
NonZero
)
;
}
{
Label
copyLoopTop
;
masm
.
bind
(
&
copyLoopTop
)
;
masm
.
Ldr
(
x4
MemOperand
(
x3
-
sizeof
(
Value
)
vixl
:
:
PostIndex
)
)
;
masm
.
Push
(
r4
)
;
masm
.
Subs
(
x8
x8
Operand
(
1
)
)
;
masm
.
B
(
&
copyLoopTop
Assembler
:
:
NotSigned
)
;
}
masm
.
push
(
r1
)
;
masm
.
pushFrameDescriptorForJitCall
(
FrameType
:
:
Rectifier
r0
r0
)
;
switch
(
kind
)
{
case
ArgumentsRectifierKind
:
:
Normal
:
masm
.
loadJitCodeRaw
(
r5
r3
)
;
argumentsRectifierReturnOffset_
=
masm
.
callJitNoProfiler
(
r3
)
;
break
;
case
ArgumentsRectifierKind
:
:
TrialInlining
:
masm
.
loadJitCodeRawNoIon
(
r5
r3
r0
)
;
masm
.
callJitNoProfiler
(
r3
)
;
break
;
}
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
ret
(
)
;
}
static
void
PushBailoutFrame
(
MacroAssembler
&
masm
Register
spArg
)
{
PushRegisterDump
(
masm
)
;
masm
.
moveStackPtrTo
(
spArg
)
;
}
static
void
GenerateBailoutThunk
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
PushBailoutFrame
(
masm
r0
)
;
masm
.
reserveStack
(
sizeof
(
void
*
)
)
;
masm
.
moveStackPtrTo
(
r1
)
;
using
Fn
=
bool
(
*
)
(
BailoutStack
*
sp
BaselineBailoutInfo
*
*
info
)
;
masm
.
setupUnalignedABICall
(
r2
)
;
masm
.
passABIArg
(
r0
)
;
masm
.
passABIArg
(
r1
)
;
masm
.
callWithABI
<
Fn
Bailout
>
(
ABIType
:
:
General
CheckUnsafeCallWithABI
:
:
DontCheckOther
)
;
masm
.
pop
(
r2
)
;
masm
.
moveToStackPtr
(
FramePointer
)
;
masm
.
jump
(
bailoutTail
)
;
}
void
JitRuntime
:
:
generateBailoutHandler
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateBailoutHandler
"
)
;
bailoutHandlerOffset_
=
startTrampolineCode
(
masm
)
;
GenerateBailoutThunk
(
masm
bailoutTail
)
;
}
bool
JitRuntime
:
:
generateVMWrapper
(
JSContext
*
cx
MacroAssembler
&
masm
VMFunctionId
id
const
VMFunctionData
&
f
DynFn
nativeFun
uint32_t
*
wrapperOffset
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateVMWrapper
"
)
;
*
wrapperOffset
=
startTrampolineCode
(
masm
)
;
AllocatableGeneralRegisterSet
regs
(
Register
:
:
Codes
:
:
WrapperMask
)
;
static_assert
(
(
Register
:
:
Codes
:
:
VolatileMask
&
~
Register
:
:
Codes
:
:
WrapperMask
)
=
=
0
"
Wrapper
register
set
must
be
a
superset
of
the
Volatile
register
set
.
"
)
;
Register
reg_cx
=
IntArgReg0
;
regs
.
take
(
reg_cx
)
;
Register
temp
=
regs
.
getAny
(
)
;
size_t
stackAdjustment
=
0
;
stackAdjustment
+
=
ExitFrameLayout
:
:
SizeWithFooter
(
)
-
sizeof
(
uintptr_t
)
;
stackAdjustment
+
=
f
.
sizeOfOutParamStackSlot
(
)
;
masm
.
SetStackPointer64
(
sp
)
;
masm
.
Sub
(
ARMRegister
(
temp
64
)
masm
.
GetStackPointer64
(
)
Operand
(
stackAdjustment
)
)
;
masm
.
And
(
sp
ARMRegister
(
temp
64
)
~
(
uint64_t
(
JitStackAlignment
)
-
1
)
)
;
masm
.
str
(
ARMRegister
(
lr
64
)
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
masm
.
str
(
ARMRegister
(
FramePointer
64
)
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
masm
.
movePtr
(
PseudoStackPointer
FramePointer
)
;
masm
.
loadJSContext
(
reg_cx
)
;
masm
.
loadPtr
(
Address
(
reg_cx
JSContext
:
:
offsetOfActivation
(
)
)
temp
)
;
masm
.
storePtr
(
FramePointer
Address
(
temp
JitActivation
:
:
offsetOfPackedExitFP
(
)
)
)
;
uint32_t
type
=
uint32_t
(
ExitFrameType
:
:
VMFunction
)
+
uint32_t
(
id
)
;
masm
.
move32
(
Imm32
(
type
)
temp
)
;
masm
.
str
(
ARMRegister
(
temp
64
)
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
if
(
f
.
outParam
=
=
Type_Handle
)
{
switch
(
f
.
outParamRootType
)
{
case
VMFunctionData
:
:
RootNone
:
MOZ_CRASH
(
"
Handle
must
have
root
type
"
)
;
case
VMFunctionData
:
:
RootObject
:
case
VMFunctionData
:
:
RootString
:
case
VMFunctionData
:
:
RootCell
:
case
VMFunctionData
:
:
RootBigInt
:
masm
.
str
(
xzr
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
break
;
case
VMFunctionData
:
:
RootValue
:
masm
.
movePtr
(
ImmWord
(
UndefinedValue
(
)
.
asRawBits
(
)
)
temp
)
;
masm
.
str
(
ARMRegister
(
temp
64
)
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
break
;
case
VMFunctionData
:
:
RootId
:
masm
.
movePtr
(
ImmWord
(
JS
:
:
PropertyKey
:
:
Void
(
)
.
asRawBits
(
)
)
temp
)
;
masm
.
str
(
ARMRegister
(
temp
64
)
MemOperand
(
PseudoStackPointer64
-
8
vixl
:
:
PreIndex
)
)
;
}
}
masm
.
moveStackPtrTo
(
PseudoStackPointer
)
;
masm
.
SetStackPointer64
(
PseudoStackPointer64
)
;
MOZ_ASSERT
(
masm
.
framePushed
(
)
=
=
0
)
;
masm
.
setupAlignedABICall
(
)
;
masm
.
passABIArg
(
reg_cx
)
;
size_t
argDisp
=
ExitFrameLayout
:
:
Size
(
)
;
for
(
uint32_t
explicitArg
=
0
;
explicitArg
<
f
.
explicitArgs
;
explicitArg
+
+
)
{
switch
(
f
.
argProperties
(
explicitArg
)
)
{
case
VMFunctionData
:
:
WordByValue
:
masm
.
passABIArg
(
MoveOperand
(
FramePointer
argDisp
)
(
f
.
argPassedInFloatReg
(
explicitArg
)
?
ABIType
:
:
Float64
:
ABIType
:
:
General
)
)
;
argDisp
+
=
sizeof
(
void
*
)
;
break
;
case
VMFunctionData
:
:
WordByRef
:
masm
.
passABIArg
(
MoveOperand
(
FramePointer
argDisp
MoveOperand
:
:
Kind
:
:
EffectiveAddress
)
ABIType
:
:
General
)
;
argDisp
+
=
sizeof
(
void
*
)
;
break
;
case
VMFunctionData
:
:
DoubleByValue
:
case
VMFunctionData
:
:
DoubleByRef
:
MOZ_CRASH
(
"
NYI
:
AArch64
callVM
should
not
be
used
with
128bit
values
.
"
)
;
}
}
const
int32_t
outParamOffset
=
-
int32_t
(
ExitFooterFrame
:
:
Size
(
)
)
-
f
.
sizeOfOutParamStackSlot
(
)
;
if
(
f
.
outParam
!
=
Type_Void
)
{
masm
.
passABIArg
(
MoveOperand
(
FramePointer
outParamOffset
MoveOperand
:
:
Kind
:
:
EffectiveAddress
)
ABIType
:
:
General
)
;
}
masm
.
callWithABI
(
nativeFun
ABIType
:
:
General
CheckUnsafeCallWithABI
:
:
DontCheckHasExitFrame
)
;
switch
(
f
.
failType
(
)
)
{
case
Type_Cell
:
masm
.
branchTestPtr
(
Assembler
:
:
Zero
r0
r0
masm
.
failureLabel
(
)
)
;
break
;
case
Type_Bool
:
masm
.
branchIfFalseBool
(
r0
masm
.
failureLabel
(
)
)
;
break
;
case
Type_Void
:
break
;
default
:
MOZ_CRASH
(
"
unknown
failure
kind
"
)
;
}
masm
.
loadVMFunctionOutParam
(
f
Address
(
FramePointer
outParamOffset
)
)
;
if
(
f
.
returnsData
(
)
&
&
JitOptions
.
spectreJitToCxxCalls
)
{
masm
.
speculationBarrier
(
)
;
}
masm
.
Mov
(
masm
.
GetStackPointer64
(
)
ARMRegister
(
FramePointer
64
)
)
;
masm
.
pop
(
FramePointer
)
;
masm
.
retn
(
Imm32
(
sizeof
(
ExitFrameLayout
)
-
sizeof
(
void
*
)
+
f
.
explicitStackSlots
(
)
*
sizeof
(
void
*
)
+
f
.
extraValuesToPop
*
sizeof
(
Value
)
)
)
;
return
true
;
}
uint32_t
JitRuntime
:
:
generatePreBarrier
(
JSContext
*
cx
MacroAssembler
&
masm
MIRType
type
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generatePreBarrier
"
)
;
uint32_t
offset
=
startTrampolineCode
(
masm
)
;
static_assert
(
PreBarrierReg
=
=
r1
)
;
Register
temp1
=
r2
;
Register
temp2
=
r3
;
Register
temp3
=
r4
;
masm
.
push
(
temp1
)
;
masm
.
push
(
temp2
)
;
masm
.
push
(
temp3
)
;
Label
noBarrier
;
masm
.
emitPreBarrierFastPath
(
cx
-
>
runtime
(
)
type
temp1
temp2
temp3
&
noBarrier
)
;
masm
.
pop
(
temp3
)
;
masm
.
pop
(
temp2
)
;
masm
.
pop
(
temp1
)
;
LiveRegisterSet
regs
=
LiveRegisterSet
(
GeneralRegisterSet
(
Registers
:
:
VolatileMask
)
FloatRegisterSet
(
FloatRegisters
:
:
VolatileMask
)
)
;
regs
.
add
(
lr
)
;
masm
.
PushRegsInMask
(
regs
)
;
masm
.
movePtr
(
ImmPtr
(
cx
-
>
runtime
(
)
)
r3
)
;
masm
.
setupUnalignedABICall
(
r0
)
;
masm
.
passABIArg
(
r3
)
;
masm
.
passABIArg
(
PreBarrierReg
)
;
masm
.
callWithABI
(
JitPreWriteBarrier
(
type
)
)
;
masm
.
PopRegsInMask
(
regs
)
;
masm
.
abiret
(
)
;
masm
.
bind
(
&
noBarrier
)
;
masm
.
pop
(
temp3
)
;
masm
.
pop
(
temp2
)
;
masm
.
pop
(
temp1
)
;
masm
.
abiret
(
)
;
return
offset
;
}
void
JitRuntime
:
:
generateBailoutTailStub
(
MacroAssembler
&
masm
Label
*
bailoutTail
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateBailoutTailStub
"
)
;
masm
.
bind
(
bailoutTail
)
;
masm
.
generateBailoutTail
(
r1
r2
)
;
}
