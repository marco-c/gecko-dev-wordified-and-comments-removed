#
include
"
jit
/
arm64
/
vixl
/
Cpu
-
Features
-
vixl
.
h
"
#
include
<
ostream
>
#
include
"
jit
/
arm64
/
vixl
/
Cpu
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Globals
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Utils
-
vixl
.
h
"
#
if
defined
(
__aarch64__
)
&
&
!
defined
(
JS_SIMULATOR_ARM64
)
#
define
VIXL_USE_AARCH64_CPU_HELPERS
#
endif
namespace
vixl
{
CPUFeatures
CPUFeatures
:
:
All
(
)
{
CPUFeatures
all
;
all
.
features_
.
set
(
)
;
return
all
;
}
CPUFeatures
CPUFeatures
:
:
InferFromIDRegisters
(
)
{
CPUFeatures
features
(
CPUFeatures
:
:
kIDRegisterEmulation
)
;
#
ifdef
VIXL_USE_AARCH64_CPU_HELPERS
features
.
Combine
(
CPU
:
:
InferCPUFeaturesFromIDRegisters
(
)
)
;
#
endif
return
features
;
}
CPUFeatures
CPUFeatures
:
:
InferFromOS
(
QueryIDRegistersOption
option
)
{
#
ifdef
VIXL_USE_AARCH64_CPU_HELPERS
return
CPU
:
:
InferCPUFeaturesFromOS
(
option
)
;
#
else
USE
(
option
)
;
return
CPUFeatures
(
)
;
#
endif
}
void
CPUFeatures
:
:
Combine
(
const
CPUFeatures
&
other
)
{
features_
|
=
other
.
features_
;
}
void
CPUFeatures
:
:
Combine
(
Feature
feature
)
{
if
(
feature
!
=
CPUFeatures
:
:
kNone
)
features_
.
set
(
feature
)
;
}
void
CPUFeatures
:
:
Remove
(
const
CPUFeatures
&
other
)
{
features_
&
=
~
other
.
features_
;
}
void
CPUFeatures
:
:
Remove
(
Feature
feature
)
{
if
(
feature
!
=
CPUFeatures
:
:
kNone
)
features_
.
reset
(
feature
)
;
}
bool
CPUFeatures
:
:
Has
(
const
CPUFeatures
&
other
)
const
{
return
(
features_
&
other
.
features_
)
=
=
other
.
features_
;
}
bool
CPUFeatures
:
:
Has
(
Feature
feature
)
const
{
return
(
feature
=
=
CPUFeatures
:
:
kNone
)
|
|
features_
[
feature
]
;
}
size_t
CPUFeatures
:
:
Count
(
)
const
{
return
features_
.
count
(
)
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
CPUFeatures
:
:
Feature
feature
)
{
switch
(
feature
)
{
#
define
VIXL_FORMAT_FEATURE
(
SYMBOL
NAME
CPUINFO
)
\
case
CPUFeatures
:
:
SYMBOL
:
\
return
os
<
<
NAME
;
VIXL_CPU_FEATURE_LIST
(
VIXL_FORMAT_FEATURE
)
#
undef
VIXL_FORMAT_FEATURE
case
CPUFeatures
:
:
kNone
:
return
os
<
<
"
none
"
;
case
CPUFeatures
:
:
kNumberOfFeatures
:
VIXL_UNREACHABLE
(
)
;
}
VIXL_UNREACHABLE
(
)
;
return
os
;
}
CPUFeatures
:
:
const_iterator
CPUFeatures
:
:
begin
(
)
const
{
return
+
+
end
(
)
;
}
CPUFeatures
:
:
const_iterator
CPUFeatures
:
:
end
(
)
const
{
return
const_iterator
(
this
kNone
)
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
CPUFeatures
&
features
)
{
bool
need_separator
=
false
;
for
(
CPUFeatures
:
:
Feature
feature
:
features
)
{
if
(
need_separator
)
os
<
<
"
"
;
need_separator
=
true
;
os
<
<
feature
;
}
return
os
;
}
bool
CPUFeaturesConstIterator
:
:
operator
=
=
(
const
CPUFeaturesConstIterator
&
other
)
const
{
VIXL_ASSERT
(
IsValid
(
)
)
;
return
(
cpu_features_
=
=
other
.
cpu_features_
)
&
&
(
feature_
=
=
other
.
feature_
)
;
}
CPUFeaturesConstIterator
&
CPUFeaturesConstIterator
:
:
operator
+
+
(
)
{
VIXL_ASSERT
(
IsValid
(
)
)
;
do
{
feature_
=
static_cast
<
CPUFeatures
:
:
Feature
>
(
feature_
+
1
)
;
if
(
feature_
=
=
CPUFeatures
:
:
kNumberOfFeatures
)
{
feature_
=
CPUFeatures
:
:
kNone
;
VIXL_STATIC_ASSERT
(
CPUFeatures
:
:
kNone
=
=
-
1
)
;
}
VIXL_ASSERT
(
CPUFeatures
:
:
kNone
<
=
feature_
)
;
VIXL_ASSERT
(
feature_
<
CPUFeatures
:
:
kNumberOfFeatures
)
;
}
while
(
!
cpu_features_
-
>
Has
(
feature_
)
)
;
return
*
this
;
}
CPUFeaturesConstIterator
CPUFeaturesConstIterator
:
:
operator
+
+
(
int
)
{
CPUFeaturesConstIterator
result
=
*
this
;
+
+
(
*
this
)
;
return
result
;
}
}
