#
ifndef
VIXL_A64_DECODER_A64_H_
#
define
VIXL_A64_DECODER_A64_H_
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Globals
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Instructions
-
vixl
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
define
VISITOR_LIST_THAT_RETURN
(
V
)
\
V
(
PCRelAddressing
)
\
V
(
AddSubImmediate
)
\
V
(
MaxMinImmediate
)
\
V
(
LogicalImmediate
)
\
V
(
MoveWideImmediate
)
\
V
(
AtomicMemory
)
\
V
(
Bitfield
)
\
V
(
Extract
)
\
V
(
UnconditionalBranch
)
\
V
(
UnconditionalBranchToRegister
)
\
V
(
CompareBranch
)
\
V
(
TestBranch
)
\
V
(
ConditionalBranch
)
\
V
(
System
)
\
V
(
Exception
)
\
V
(
LoadStorePairPostIndex
)
\
V
(
LoadStorePairOffset
)
\
V
(
LoadStorePairPreIndex
)
\
V
(
LoadStorePairNonTemporal
)
\
V
(
LoadLiteral
)
\
V
(
LoadStoreUnscaledOffset
)
\
V
(
LoadStorePostIndex
)
\
V
(
LoadStorePreIndex
)
\
V
(
LoadStoreRegisterOffset
)
\
V
(
LoadStoreUnsignedOffset
)
\
V
(
LoadStoreExclusive
)
\
V
(
LogicalShifted
)
\
V
(
AddSubShifted
)
\
V
(
AddSubExtended
)
\
V
(
AddSubWithCarry
)
\
V
(
ConditionalCompareRegister
)
\
V
(
ConditionalCompareImmediate
)
\
V
(
ConditionalSelect
)
\
V
(
DataProcessing1Source
)
\
V
(
DataProcessing2Source
)
\
V
(
DataProcessing3Source
)
\
V
(
FPCompare
)
\
V
(
FPConditionalCompare
)
\
V
(
FPConditionalSelect
)
\
V
(
FPImmediate
)
\
V
(
FPDataProcessing1Source
)
\
V
(
FPDataProcessing2Source
)
\
V
(
FPDataProcessing3Source
)
\
V
(
FPIntegerConvert
)
\
V
(
FPFixedPointConvert
)
\
V
(
Crypto2RegSHA
)
\
V
(
Crypto3RegSHA
)
\
V
(
CryptoAES
)
\
V
(
NEON2RegMisc
)
\
V
(
NEON3Different
)
\
V
(
NEON3Same
)
\
V
(
NEONAcrossLanes
)
\
V
(
NEONByIndexedElement
)
\
V
(
NEONCopy
)
\
V
(
NEONExtract
)
\
V
(
NEONLoadStoreMultiStruct
)
\
V
(
NEONLoadStoreMultiStructPostIndex
)
\
V
(
NEONLoadStoreSingleStruct
)
\
V
(
NEONLoadStoreSingleStructPostIndex
)
\
V
(
NEONModifiedImmediate
)
\
V
(
NEONScalar2RegMisc
)
\
V
(
NEONScalar3Diff
)
\
V
(
NEONScalar3Same
)
\
V
(
NEONScalarByIndexedElement
)
\
V
(
NEONScalarCopy
)
\
V
(
NEONScalarPairwise
)
\
V
(
NEONScalarShiftImmediate
)
\
V
(
NEONShiftImmediate
)
\
V
(
NEONTable
)
\
V
(
NEONPerm
)
#
define
VISITOR_LIST_THAT_DONT_RETURN
(
V
)
\
V
(
Unallocated
)
\
V
(
Unimplemented
)
\
#
define
VISITOR_LIST
(
V
)
\
VISITOR_LIST_THAT_RETURN
(
V
)
\
VISITOR_LIST_THAT_DONT_RETURN
(
V
)
\
namespace
vixl
{
class
DecoderVisitor
{
public
:
enum
VisitorConstness
{
kConstVisitor
kNonConstVisitor
}
;
explicit
DecoderVisitor
(
VisitorConstness
constness
=
kConstVisitor
)
:
constness_
(
constness
)
{
}
virtual
~
DecoderVisitor
(
)
{
}
#
define
DECLARE
(
A
)
virtual
void
Visit
#
#
A
(
const
Instruction
*
instr
)
=
0
;
VISITOR_LIST
(
DECLARE
)
#
undef
DECLARE
bool
IsConstVisitor
(
)
const
{
return
constness_
=
=
kConstVisitor
;
}
Instruction
*
MutableInstruction
(
const
Instruction
*
instr
)
{
VIXL_ASSERT
(
!
IsConstVisitor
(
)
)
;
return
const_cast
<
Instruction
*
>
(
instr
)
;
}
private
:
const
VisitorConstness
constness_
;
}
;
class
Decoder
{
public
:
Decoder
(
)
{
}
void
Decode
(
const
Instruction
*
instr
)
{
#
ifdef
DEBUG
for
(
auto
visitor
:
visitors_
)
{
VIXL_ASSERT
(
visitor
-
>
IsConstVisitor
(
)
)
;
}
#
endif
DecodeInstruction
(
instr
)
;
}
void
Decode
(
Instruction
*
instr
)
{
DecodeInstruction
(
const_cast
<
const
Instruction
*
>
(
instr
)
)
;
}
void
AppendVisitor
(
DecoderVisitor
*
visitor
)
;
void
PrependVisitor
(
DecoderVisitor
*
visitor
)
;
void
InsertVisitorBefore
(
DecoderVisitor
*
new_visitor
DecoderVisitor
*
registered_visitor
)
;
void
InsertVisitorAfter
(
DecoderVisitor
*
new_visitor
DecoderVisitor
*
registered_visitor
)
;
void
RemoveVisitor
(
DecoderVisitor
*
visitor
)
;
#
define
DECLARE
(
A
)
void
Visit
#
#
A
(
const
Instruction
*
instr
)
;
VISITOR_LIST
(
DECLARE
)
#
undef
DECLARE
private
:
void
DecodeInstruction
(
const
Instruction
*
instr
)
;
void
DecodePCRelAddressing
(
const
Instruction
*
instr
)
;
void
DecodeAddSubImmediate
(
const
Instruction
*
instr
)
;
void
DecodeBranchSystemException
(
const
Instruction
*
instr
)
;
void
DecodeLoadStore
(
const
Instruction
*
instr
)
;
void
DecodeLogical
(
const
Instruction
*
instr
)
;
void
DecodeBitfieldExtract
(
const
Instruction
*
instr
)
;
void
DecodeDataProcessing
(
const
Instruction
*
instr
)
;
void
DecodeFP
(
const
Instruction
*
instr
)
;
void
DecodeNEONLoadStore
(
const
Instruction
*
instr
)
;
void
DecodeNEONVectorDataProcessing
(
const
Instruction
*
instr
)
;
void
DecodeNEONScalarDataProcessing
(
const
Instruction
*
instr
)
;
private
:
mozilla
:
:
Vector
<
DecoderVisitor
*
8
js
:
:
SystemAllocPolicy
>
visitors_
;
}
;
}
#
endif
