#
ifndef
VIXL_CPU_AARCH64_H
#
define
VIXL_CPU_AARCH64_H
#
include
"
jit
/
arm64
/
vixl
/
Cpu
-
Features
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Globals
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Instructions
-
vixl
.
h
"
#
ifndef
VIXL_INCLUDE_TARGET_AARCH64
#
error
cpu
-
aarch64
.
h
requires
VIXL_INCLUDE_TARGET_AARCH64
(
scons
target
=
a64
)
.
#
endif
namespace
vixl
{
class
IDRegister
{
protected
:
explicit
IDRegister
(
uint64_t
value
=
0
)
:
value_
(
value
)
{
}
class
Field
{
public
:
enum
Type
{
kUnsigned
kSigned
}
;
static
const
int
kMaxWidthInBits
=
4
;
explicit
constexpr
Field
(
int
lsb
int
bitWidth
=
kMaxWidthInBits
Type
type
=
kUnsigned
)
:
lsb_
(
lsb
)
bitWidth_
(
bitWidth
)
type_
(
type
)
{
}
int
GetWidthInBits
(
)
const
{
return
bitWidth_
;
}
int
GetLsb
(
)
const
{
return
lsb_
;
}
int
GetMsb
(
)
const
{
return
lsb_
+
GetWidthInBits
(
)
-
1
;
}
Type
GetType
(
)
const
{
return
type_
;
}
private
:
int
lsb_
;
int
bitWidth_
;
Type
type_
;
}
;
public
:
int
Get
(
Field
field
)
const
;
private
:
uint64_t
value_
;
}
;
class
AA64PFR0
:
public
IDRegister
{
public
:
explicit
AA64PFR0
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kFP
;
static
const
Field
kAdvSIMD
;
static
const
Field
kRAS
;
static
const
Field
kSVE
;
static
const
Field
kDIT
;
static
const
Field
kCSV2
;
static
const
Field
kCSV3
;
}
;
class
AA64PFR1
:
public
IDRegister
{
public
:
explicit
AA64PFR1
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kBT
;
static
const
Field
kSSBS
;
static
const
Field
kMTE
;
static
const
Field
kSME
;
}
;
class
AA64ISAR0
:
public
IDRegister
{
public
:
explicit
AA64ISAR0
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kAES
;
static
const
Field
kSHA1
;
static
const
Field
kSHA2
;
static
const
Field
kCRC32
;
static
const
Field
kAtomic
;
static
const
Field
kRDM
;
static
const
Field
kSHA3
;
static
const
Field
kSM3
;
static
const
Field
kSM4
;
static
const
Field
kDP
;
static
const
Field
kFHM
;
static
const
Field
kTS
;
static
const
Field
kRNDR
;
}
;
class
AA64ISAR1
:
public
IDRegister
{
public
:
explicit
AA64ISAR1
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kDPB
;
static
const
Field
kAPA
;
static
const
Field
kAPI
;
static
const
Field
kJSCVT
;
static
const
Field
kFCMA
;
static
const
Field
kLRCPC
;
static
const
Field
kGPA
;
static
const
Field
kGPI
;
static
const
Field
kFRINTTS
;
static
const
Field
kSB
;
static
const
Field
kSPECRES
;
static
const
Field
kBF16
;
static
const
Field
kDGH
;
static
const
Field
kI8MM
;
}
;
class
AA64ISAR2
:
public
IDRegister
{
public
:
explicit
AA64ISAR2
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kWFXT
;
static
const
Field
kRPRES
;
static
const
Field
kMOPS
;
static
const
Field
kCSSC
;
}
;
class
AA64MMFR0
:
public
IDRegister
{
public
:
explicit
AA64MMFR0
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kECV
;
}
;
class
AA64MMFR1
:
public
IDRegister
{
public
:
explicit
AA64MMFR1
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kLO
;
static
const
Field
kAFP
;
}
;
class
AA64MMFR2
:
public
IDRegister
{
public
:
explicit
AA64MMFR2
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kAT
;
}
;
class
AA64ZFR0
:
public
IDRegister
{
public
:
explicit
AA64ZFR0
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kSVEver
;
static
const
Field
kAES
;
static
const
Field
kBitPerm
;
static
const
Field
kBF16
;
static
const
Field
kSHA3
;
static
const
Field
kSM4
;
static
const
Field
kI8MM
;
static
const
Field
kF32MM
;
static
const
Field
kF64MM
;
}
;
class
AA64SMFR0
:
public
IDRegister
{
public
:
explicit
AA64SMFR0
(
uint64_t
value
)
:
IDRegister
(
value
)
{
}
CPUFeatures
GetCPUFeatures
(
)
const
;
private
:
static
const
Field
kSMEf32f32
;
static
const
Field
kSMEb16f32
;
static
const
Field
kSMEf16f32
;
static
const
Field
kSMEi8i32
;
static
const
Field
kSMEf64f64
;
static
const
Field
kSMEi16i64
;
static
const
Field
kSMEfa64
;
}
;
class
CPU
{
public
:
static
void
SetUp
(
)
;
static
void
EnsureIAndDCacheCoherency
(
void
*
address
size_t
length
)
;
static
void
FlushExecutionContext
(
)
;
static
CPUFeatures
InferCPUFeaturesFromIDRegisters
(
)
;
static
CPUFeatures
InferCPUFeaturesFromOS
(
CPUFeatures
:
:
QueryIDRegistersOption
option
=
CPUFeatures
:
:
kQueryIDRegistersIfAvailable
)
;
static
int
ReadSVEVectorLengthInBits
(
)
;
template
<
typename
T
>
static
T
SetPointerTag
(
T
pointer
uint64_t
tag
)
{
VIXL_ASSERT
(
IsUintN
(
kAddressTagWidth
tag
)
)
;
uint64_t
raw
=
(
uint64_t
)
pointer
;
VIXL_STATIC_ASSERT
(
sizeof
(
pointer
)
=
=
sizeof
(
raw
)
)
;
raw
=
(
raw
&
~
kAddressTagMask
)
|
(
tag
<
<
kAddressTagOffset
)
;
return
(
T
)
raw
;
}
template
<
typename
T
>
static
uint64_t
GetPointerTag
(
T
pointer
)
{
uint64_t
raw
=
(
uint64_t
)
pointer
;
VIXL_STATIC_ASSERT
(
sizeof
(
pointer
)
=
=
sizeof
(
raw
)
)
;
return
(
raw
&
kAddressTagMask
)
>
>
kAddressTagOffset
;
}
private
:
#
define
VIXL_AARCH64_ID_REG_LIST
(
V
)
\
V
(
AA64PFR0
"
ID_AA64PFR0_EL1
"
)
\
V
(
AA64PFR1
"
ID_AA64PFR1_EL1
"
)
\
V
(
AA64ISAR0
"
ID_AA64ISAR0_EL1
"
)
\
V
(
AA64ISAR1
"
ID_AA64ISAR1_EL1
"
)
\
V
(
AA64MMFR0
"
ID_AA64MMFR0_EL1
"
)
\
V
(
AA64MMFR1
"
ID_AA64MMFR1_EL1
"
)
\
/
*
These
registers
are
RES0
in
the
baseline
Arm8
.
0
.
We
can
always
safely
*
/
\
/
*
read
them
but
some
compilers
don
'
t
accept
the
symbolic
names
.
*
/
\
V
(
AA64SMFR0
"
S3_0_C0_C4_5
"
)
\
V
(
AA64ISAR2
"
S3_0_C0_C6_2
"
)
\
V
(
AA64MMFR2
"
S3_0_C0_C7_2
"
)
\
V
(
AA64ZFR0
"
S3_0_C0_C4_4
"
)
#
define
VIXL_READ_ID_REG
(
NAME
MRS_ARG
)
static
NAME
Read
#
#
NAME
(
)
;
VIXL_AARCH64_ID_REG_LIST
(
VIXL_READ_ID_REG
)
#
undef
VIXL_READ_ID_REG
static
uint32_t
GetCacheType
(
)
;
static
unsigned
icache_line_size_
;
static
unsigned
dcache_line_size_
;
}
;
}
#
endif
