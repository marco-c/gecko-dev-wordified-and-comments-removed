#
include
"
jit
/
arm64
/
vixl
/
Cpu
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Simulator
-
vixl
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Utils
-
vixl
.
h
"
#
include
"
util
/
Windows
.
h
"
#
if
defined
(
XP_DARWIN
)
#
include
<
libkern
/
OSCacheControl
.
h
>
#
endif
#
if
defined
(
__aarch64__
)
&
&
(
defined
(
__linux__
)
|
|
defined
(
__android__
)
)
#
if
defined
(
__linux__
)
#
include
<
linux
/
membarrier
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
utsname
.
h
>
#
include
<
unistd
.
h
>
#
elif
defined
(
__ANDROID__
)
#
include
<
sys
/
syscall
.
h
>
#
include
<
unistd
.
h
>
#
else
#
error
"
Missing
platform
-
specific
declarations
for
membarrier
syscall
!
"
#
endif
#
include
"
vm
/
JSContext
.
h
"
static
int
membarrier
(
int
cmd
int
flags
)
{
return
syscall
(
__NR_membarrier
cmd
flags
)
;
}
#
ifndef
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
#
define
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
(
1
<
<
5
)
#
endif
#
ifndef
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
#
define
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
(
1
<
<
6
)
#
endif
#
endif
namespace
vixl
{
void
CPU
:
:
SetUp
(
)
{
uint32_t
cache_type_register
=
GetCacheType
(
)
;
static
const
int
kDCacheLineSizeShift
=
16
;
static
const
int
kICacheLineSizeShift
=
0
;
static
const
uint32_t
kDCacheLineSizeMask
=
0xf
<
<
kDCacheLineSizeShift
;
static
const
uint32_t
kICacheLineSizeMask
=
0xf
<
<
kICacheLineSizeShift
;
uint32_t
dcache_line_size_power_of_two
=
(
cache_type_register
&
kDCacheLineSizeMask
)
>
>
kDCacheLineSizeShift
;
uint32_t
icache_line_size_power_of_two
=
(
cache_type_register
&
kICacheLineSizeMask
)
>
>
kICacheLineSizeShift
;
dcache_line_size_
=
4
<
<
dcache_line_size_power_of_two
;
icache_line_size_
=
4
<
<
icache_line_size_power_of_two
;
const
uint32_t
conservative_line_size
=
32
;
dcache_line_size_
=
std
:
:
min
(
dcache_line_size_
conservative_line_size
)
;
icache_line_size_
=
std
:
:
min
(
icache_line_size_
conservative_line_size
)
;
}
uint32_t
CPU
:
:
GetCacheType
(
)
{
#
if
defined
(
__aarch64__
)
&
&
(
defined
(
__linux__
)
|
|
defined
(
__android__
)
)
uint64_t
cache_type_register
;
__asm__
__volatile__
(
"
mrs
%
[
ctr
]
ctr_el0
"
:
[
ctr
]
"
=
r
"
(
cache_type_register
)
)
;
VIXL_ASSERT
(
IsUint32
(
cache_type_register
)
)
;
return
static_cast
<
uint32_t
>
(
cache_type_register
)
;
#
else
return
0
;
#
endif
}
bool
CPU
:
:
CanFlushICacheFromBackgroundThreads
(
)
{
#
if
defined
(
__aarch64__
)
&
&
(
defined
(
__linux__
)
|
|
defined
(
__android__
)
)
static
constexpr
int
kRequiredMajor
=
4
;
static
constexpr
int
kRequiredMinor
=
16
;
static
bool
computed
=
false
;
static
bool
kernelHasMembarrier
=
false
;
if
(
!
computed
)
{
struct
utsname
uts
;
int
major
minor
;
kernelHasMembarrier
=
uname
(
&
uts
)
=
=
0
&
&
strcmp
(
uts
.
sysname
"
Linux
"
)
=
=
0
&
&
sscanf
(
uts
.
release
"
%
d
.
%
d
"
&
major
&
minor
)
=
=
2
&
&
major
>
=
kRequiredMajor
&
&
(
major
!
=
kRequiredMajor
|
|
minor
>
=
kRequiredMinor
)
;
if
(
kernelHasMembarrier
&
&
membarrier
(
MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
0
)
!
=
0
)
{
kernelHasMembarrier
=
false
;
}
computed
=
true
;
}
return
kernelHasMembarrier
;
#
else
return
true
;
#
endif
}
void
CPU
:
:
EnsureIAndDCacheCoherency
(
void
*
address
size_t
length
bool
codeIsThreadLocal
)
{
#
if
defined
(
JS_SIMULATOR_ARM64
)
&
&
defined
(
JS_CACHE_SIMULATOR_ARM64
)
using
js
:
:
jit
:
:
SimulatorProcess
;
js
:
:
jit
:
:
AutoLockSimulatorCache
alsc
;
if
(
length
>
0
)
{
SimulatorProcess
:
:
recordICacheFlush
(
address
length
)
;
}
Simulator
*
sim
=
vixl
:
:
Simulator
:
:
Current
(
)
;
if
(
sim
)
{
sim
-
>
FlushICache
(
)
;
}
else
if
(
!
codeIsThreadLocal
)
{
SimulatorProcess
:
:
membarrier
(
)
;
}
#
elif
defined
(
_MSC_VER
)
&
&
defined
(
_M_ARM64
)
FlushInstructionCache
(
GetCurrentProcess
(
)
address
length
)
;
#
elif
defined
(
XP_DARWIN
)
sys_icache_invalidate
(
address
length
)
;
#
elif
defined
(
__aarch64__
)
&
&
(
defined
(
__linux__
)
|
|
defined
(
__android__
)
)
if
(
length
=
=
0
)
{
return
;
}
uintptr_t
start
=
reinterpret_cast
<
uintptr_t
>
(
address
)
;
uintptr_t
dsize
=
static_cast
<
uintptr_t
>
(
dcache_line_size_
)
;
uintptr_t
isize
=
static_cast
<
uintptr_t
>
(
icache_line_size_
)
;
uintptr_t
dline
=
start
&
~
(
dsize
-
1
)
;
uintptr_t
iline
=
start
&
~
(
isize
-
1
)
;
VIXL_ASSERT
(
IsPowerOf2
(
dsize
)
)
;
VIXL_ASSERT
(
IsPowerOf2
(
isize
)
)
;
uintptr_t
end
=
start
+
length
;
do
{
__asm__
__volatile__
(
"
dc
civac
%
[
dline
]
\
n
"
:
:
[
dline
]
"
r
"
(
dline
)
:
"
memory
"
)
;
dline
+
=
dsize
;
}
while
(
dline
<
end
)
;
__asm__
__volatile__
(
"
dsb
ish
\
n
"
:
:
:
"
memory
"
)
;
do
{
__asm__
__volatile__
(
"
ic
ivau
%
[
iline
]
\
n
"
:
:
[
iline
]
"
r
"
(
iline
)
:
"
memory
"
)
;
iline
+
=
isize
;
}
while
(
iline
<
end
)
;
__asm__
__volatile__
(
"
dsb
ish
\
n
"
"
isb
\
n
"
:
:
:
"
memory
"
)
;
if
(
!
codeIsThreadLocal
)
{
JSContext
*
cx
=
js
:
:
TlsContext
.
get
(
)
;
if
(
!
cx
|
|
!
cx
-
>
isMainThreadContext
(
)
)
{
MOZ_RELEASE_ASSERT
(
CPU
:
:
CanFlushICacheFromBackgroundThreads
(
)
)
;
if
(
membarrier
(
MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
0
)
!
=
0
)
{
MOZ_CRASH
(
"
membarrier
can
'
t
be
executed
"
)
;
}
}
}
#
else
USE
(
address
length
)
;
#
endif
}
}
