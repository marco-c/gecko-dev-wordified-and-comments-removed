#
ifndef
VIXL_GLOBALS_H
#
define
VIXL_GLOBALS_H
#
ifndef
__STDC_CONSTANT_MACROS
#
define
__STDC_CONSTANT_MACROS
#
endif
#
ifndef
__STDC_LIMIT_MACROS
#
define
__STDC_LIMIT_MACROS
#
endif
#
ifndef
__STDC_FORMAT_MACROS
#
define
__STDC_FORMAT_MACROS
#
endif
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
inttypes
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
js
-
config
.
h
"
#
include
"
jit
/
arm64
/
vixl
/
Platform
-
vixl
.
h
"
#
include
"
js
/
Utility
.
h
"
typedef
uint8_t
byte
;
typedef
uint16_t
float16
;
const
int
KBytes
=
1024
;
const
int
MBytes
=
1024
*
KBytes
;
#
define
VIXL_ABORT
(
)
\
do
{
printf
(
"
in
%
s
line
%
i
"
__FILE__
__LINE__
)
;
abort
(
)
;
}
while
(
false
)
#
ifdef
DEBUG
#
define
VIXL_ASSERT
(
condition
)
MOZ_ASSERT
(
condition
)
#
define
VIXL_CHECK
(
condition
)
VIXL_ASSERT
(
condition
)
#
define
VIXL_UNIMPLEMENTED
(
)
\
do
{
fprintf
(
stderr
"
UNIMPLEMENTED
\
t
"
)
;
VIXL_ABORT
(
)
;
}
while
(
false
)
#
define
VIXL_UNREACHABLE
(
)
\
do
{
fprintf
(
stderr
"
UNREACHABLE
\
t
"
)
;
VIXL_ABORT
(
)
;
}
while
(
false
)
#
else
#
define
VIXL_ASSERT
(
condition
)
(
(
void
)
0
)
#
define
VIXL_CHECK
(
condition
)
(
(
void
)
0
)
#
define
VIXL_UNIMPLEMENTED
(
)
(
(
void
)
0
)
#
define
VIXL_UNREACHABLE
(
)
MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
(
"
vixl
unreachable
"
)
#
endif
#
define
VIXL_S
(
x
)
#
x
#
define
VIXL_STATIC_ASSERT_LINE
(
line
condition
)
\
static_assert
(
condition
"
STATIC_ASSERT_LINE_
"
VIXL_S
(
line
)
)
#
define
VIXL_STATIC_ASSERT
(
condition
)
\
VIXL_STATIC_ASSERT_LINE
(
__LINE__
condition
)
template
<
typename
T1
>
inline
void
USE
(
T1
)
{
}
template
<
typename
T1
typename
T2
>
inline
void
USE
(
T1
T2
)
{
}
template
<
typename
T1
typename
T2
typename
T3
>
inline
void
USE
(
T1
T2
T3
)
{
}
template
<
typename
T1
typename
T2
typename
T3
typename
T4
>
inline
void
USE
(
T1
T2
T3
T4
)
{
}
#
define
VIXL_ALIGNMENT_EXCEPTION
(
)
\
do
{
fprintf
(
stderr
"
ALIGNMENT
EXCEPTION
\
t
"
)
;
VIXL_ABORT
(
)
;
}
while
(
0
)
#
ifndef
__has_warning
#
define
__has_warning
(
x
)
0
#
endif
#
if
__has_warning
(
"
-
Wimplicit
-
fallthrough
"
)
&
&
__cplusplus
>
=
201103L
#
define
VIXL_FALLTHROUGH
(
)
[
[
clang
:
:
fallthrough
]
]
/
/
NOLINT
#
else
#
define
VIXL_FALLTHROUGH
(
)
do
{
}
while
(
0
)
#
endif
#
endif
