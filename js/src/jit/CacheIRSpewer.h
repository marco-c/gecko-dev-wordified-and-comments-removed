#
ifndef
jit_CacheIRSpewer_h
#
define
jit_CacheIRSpewer_h
#
ifdef
JS_CACHEIR_SPEW
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jit
/
CacheIR
.
h
"
#
include
"
jit
/
JSONPrinter
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
LockGuard
.
h
"
#
include
"
vm
/
MutexIDs
.
h
"
namespace
js
{
namespace
jit
{
class
CacheIRSpewer
{
Mutex
outputLock
;
Fprinter
output
;
mozilla
:
:
Maybe
<
JSONPrinter
>
json
;
static
CacheIRSpewer
cacheIRspewer
;
public
:
CacheIRSpewer
(
)
;
~
CacheIRSpewer
(
)
;
static
CacheIRSpewer
&
singleton
(
)
{
return
cacheIRspewer
;
}
bool
init
(
)
;
bool
enabled
(
)
{
return
json
.
isSome
(
)
;
}
Mutex
&
lock
(
)
{
MOZ_ASSERT
(
enabled
(
)
)
;
return
outputLock
;
}
void
beginCache
(
LockGuard
<
Mutex
>
&
const
IRGenerator
&
generator
)
;
void
valueProperty
(
LockGuard
<
Mutex
>
&
const
char
*
name
HandleValue
v
)
;
void
attached
(
LockGuard
<
Mutex
>
&
const
char
*
name
)
;
void
endCache
(
LockGuard
<
Mutex
>
&
)
;
}
;
}
}
#
endif
#
endif
