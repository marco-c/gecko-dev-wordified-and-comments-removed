#
ifndef
jit_x86_shared_MacroAssembler_x86_shared_inl_h
#
define
jit_x86_shared_MacroAssembler_x86_shared_inl_h
#
include
"
jit
/
x86
-
shared
/
MacroAssembler
-
x86
-
shared
.
h
"
namespace
js
{
namespace
jit
{
void
MacroAssembler
:
:
not32
(
Register
reg
)
{
notl
(
reg
)
;
}
void
MacroAssembler
:
:
and32
(
Register
src
Register
dest
)
{
andl
(
src
dest
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
Register
dest
)
{
andl
(
imm
dest
)
;
}
void
MacroAssembler
:
:
and32
(
Imm32
imm
const
Address
&
dest
)
{
andl
(
imm
Operand
(
dest
)
)
;
}
void
MacroAssembler
:
:
and32
(
const
Address
&
src
Register
dest
)
{
andl
(
Operand
(
src
)
dest
)
;
}
void
MacroAssembler
:
:
or32
(
Register
src
Register
dest
)
{
orl
(
src
dest
)
;
}
void
MacroAssembler
:
:
or32
(
Imm32
imm
Register
dest
)
{
orl
(
imm
dest
)
;
}
void
MacroAssembler
:
:
or32
(
Imm32
imm
const
Address
&
dest
)
{
orl
(
imm
Operand
(
dest
)
)
;
}
void
MacroAssembler
:
:
xor32
(
Register
src
Register
dest
)
{
xorl
(
src
dest
)
;
}
void
MacroAssembler
:
:
xor32
(
Imm32
imm
Register
dest
)
{
xorl
(
imm
dest
)
;
}
void
MacroAssembler
:
:
add32
(
Register
src
Register
dest
)
{
addl
(
src
dest
)
;
}
void
MacroAssembler
:
:
add32
(
Imm32
imm
Register
dest
)
{
addl
(
imm
dest
)
;
}
void
MacroAssembler
:
:
add32
(
Imm32
imm
const
Address
&
dest
)
{
addl
(
imm
Operand
(
dest
)
)
;
}
void
MacroAssembler
:
:
add32
(
Imm32
imm
const
AbsoluteAddress
&
dest
)
{
addl
(
imm
Operand
(
dest
)
)
;
}
void
MacroAssembler
:
:
addFloat32
(
FloatRegister
src
FloatRegister
dest
)
{
vaddss
(
src
dest
dest
)
;
}
void
MacroAssembler
:
:
addDouble
(
FloatRegister
src
FloatRegister
dest
)
{
vaddsd
(
src
dest
dest
)
;
}
void
MacroAssembler
:
:
sub32
(
Register
src
Register
dest
)
{
subl
(
src
dest
)
;
}
void
MacroAssembler
:
:
sub32
(
Imm32
imm
Register
dest
)
{
subl
(
imm
dest
)
;
}
void
MacroAssembler
:
:
sub32
(
const
Address
&
src
Register
dest
)
{
subl
(
Operand
(
src
)
dest
)
;
}
void
MacroAssembler
:
:
subDouble
(
FloatRegister
src
FloatRegister
dest
)
{
vsubsd
(
src
dest
dest
)
;
}
void
MacroAssembler
:
:
mulDouble
(
FloatRegister
src
FloatRegister
dest
)
{
vmulsd
(
src
dest
dest
)
;
}
void
MacroAssembler
:
:
divDouble
(
FloatRegister
src
FloatRegister
dest
)
{
vdivsd
(
src
dest
dest
)
;
}
void
MacroAssembler
:
:
neg32
(
Register
reg
)
{
negl
(
reg
)
;
}
void
MacroAssembler
:
:
negateFloat
(
FloatRegister
reg
)
{
ScratchFloat32Scope
scratch
(
*
this
)
;
vpcmpeqw
(
scratch
scratch
scratch
)
;
vpsllq
(
Imm32
(
31
)
scratch
scratch
)
;
vxorps
(
scratch
reg
reg
)
;
}
void
MacroAssembler
:
:
negateDouble
(
FloatRegister
reg
)
{
ScratchDoubleScope
scratch
(
*
this
)
;
vpcmpeqw
(
scratch
scratch
scratch
)
;
vpsllq
(
Imm32
(
63
)
scratch
scratch
)
;
vxorpd
(
scratch
reg
reg
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
Register
lhs
Register
rhs
Label
*
label
)
{
cmpPtr
(
lhs
rhs
)
;
j
(
cond
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
Register
lhs
Imm32
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
Register
lhs
ImmPtr
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
Register
lhs
ImmGCPtr
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
Register
lhs
ImmWord
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
const
Address
&
lhs
Register
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
const
Address
&
lhs
ImmPtr
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
const
Address
&
lhs
ImmGCPtr
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
void
MacroAssembler
:
:
branchPtr
(
Condition
cond
const
Address
&
lhs
ImmWord
rhs
Label
*
label
)
{
branchPtrImpl
(
cond
lhs
rhs
label
)
;
}
}
}
#
endif
