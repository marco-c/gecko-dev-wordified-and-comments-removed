#
ifndef
jit_shared_AtomicOperations_x86_shared_msvc_h
#
define
jit_shared_AtomicOperations_x86_shared_msvc_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
if
!
defined
(
_MSC_VER
)
#
error
"
This
file
only
for
Microsoft
Visual
C
+
+
"
#
endif
inline
bool
js
:
:
jit
:
:
AtomicOperations
:
:
isLockfree8
(
)
{
return
true
;
}
inline
void
js
:
:
jit
:
:
AtomicOperations
:
:
fenceSeqCst
(
)
{
_ReadWriteBarrier
(
)
;
#
ifdef
_M_IX86
__asm
lock
add
[
esp
]
0
;
#
else
_mm_mfence
(
)
;
#
endif
}
template
<
typename
T
>
inline
T
js
:
:
jit
:
:
AtomicOperations
:
:
loadSeqCst
(
T
*
addr
)
{
MOZ_ASSERT
(
sizeof
(
T
)
<
8
|
|
isLockfree8
(
)
)
;
_ReadWriteBarrier
(
)
;
T
v
=
*
addr
;
_ReadWriteBarrier
(
)
;
return
v
;
}
template
<
typename
T
>
inline
void
js
:
:
jit
:
:
AtomicOperations
:
:
storeSeqCst
(
T
*
addr
T
val
)
{
MOZ_ASSERT
(
sizeof
(
T
)
<
8
|
|
isLockfree8
(
)
)
;
_ReadWriteBarrier
(
)
;
*
addr
=
val
;
fenceSeqCst
(
)
;
}
#
define
MSC_EXCHANGEOP
(
T
U
xchgop
)
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
exchangeSeqCst
(
T
*
addr
T
val
)
{
\
MOZ_ASSERT
(
sizeof
(
T
)
<
8
|
|
isLockfree8
(
)
)
;
\
return
(
T
)
xchgop
(
(
U
volatile
*
)
addr
(
U
)
val
)
;
\
}
#
define
MSC_EXCHANGEOP_CAS
(
T
U
cmpxchg
)
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
exchangeSeqCst
(
T
*
addr
T
newval
)
{
\
MOZ_ASSERT
(
sizeof
(
T
)
<
8
|
|
isLockfree8
(
)
)
;
\
T
oldval
;
\
do
{
\
_ReadWriteBarrier
(
)
;
\
oldval
=
*
addr
;
\
}
while
(
!
cmpxchg
(
(
U
volatile
*
)
addr
(
U
)
newval
(
U
)
oldval
)
)
;
\
return
oldval
;
\
}
MSC_EXCHANGEOP
(
int8_t
char
_InterlockedExchange8
)
MSC_EXCHANGEOP
(
uint8_t
char
_InterlockedExchange8
)
MSC_EXCHANGEOP
(
int16_t
short
_InterlockedExchange16
)
MSC_EXCHANGEOP
(
uint16_t
short
_InterlockedExchange16
)
MSC_EXCHANGEOP
(
int32_t
long
_InterlockedExchange
)
MSC_EXCHANGEOP
(
uint32_t
long
_InterlockedExchange
)
#
ifdef
_M_X64
MSC_EXCHANGEOP
(
int64_t
__int64
_InterlockedExchange64
)
MSC_EXCHANGEOP
(
uint64_t
__int64
_InterlockedExchange64
)
#
else
MSC_EXCHANGEOP_CAS
(
int64_t
__int64
_InterlockedCompareExchange64
)
MSC_EXCHANGEOP_CAS
(
uint64_t
__int64
_InterlockedCompareExchange64
)
#
endif
#
undef
MSC_EXCHANGEOP
#
undef
MSC_EXCHANGEOP_CAS
#
define
MSC_CAS
(
T
U
cmpxchg
)
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
compareExchangeSeqCst
(
T
*
addr
T
oldval
T
newval
)
{
\
MOZ_ASSERT
(
sizeof
(
T
)
<
8
|
|
isLockfree8
(
)
)
;
\
return
(
T
)
cmpxchg
(
(
U
volatile
*
)
addr
(
U
)
newval
(
U
)
oldval
)
;
\
}
MSC_CAS
(
int8_t
char
_InterlockedCompareExchange8
)
MSC_CAS
(
uint8_t
char
_InterlockedCompareExchange8
)
MSC_CAS
(
int16_t
short
_InterlockedCompareExchange16
)
MSC_CAS
(
uint16_t
short
_InterlockedCompareExchange16
)
MSC_CAS
(
int32_t
long
_InterlockedCompareExchange
)
MSC_CAS
(
uint32_t
long
_InterlockedCompareExchange
)
MSC_CAS
(
int64_t
__int64
_InterlockedCompareExchange64
)
MSC_CAS
(
uint64_t
__int64
_InterlockedCompareExchange64
)
#
undef
MSC_CAS
#
define
MSC_FETCHADDOP
(
T
U
xadd
)
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
fetchAddSeqCst
(
T
*
addr
T
val
)
{
\
static_assert
(
sizeof
(
T
)
<
=
4
"
not
available
for
8
-
byte
values
yet
"
)
;
\
return
(
T
)
xadd
(
(
U
volatile
*
)
addr
(
U
)
val
)
;
\
}
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
fetchSubSeqCst
(
T
*
addr
T
val
)
{
\
static_assert
(
sizeof
(
T
)
<
=
4
"
not
available
for
8
-
byte
values
yet
"
)
;
\
return
(
T
)
xadd
(
(
U
volatile
*
)
addr
-
(
U
)
val
)
;
\
}
MSC_FETCHADDOP
(
int8_t
char
_InterlockedExchangeAdd8
)
MSC_FETCHADDOP
(
uint8_t
char
_InterlockedExchangeAdd8
)
MSC_FETCHADDOP
(
int16_t
short
_InterlockedExchangeAdd16
)
MSC_FETCHADDOP
(
uint16_t
short
_InterlockedExchangeAdd16
)
MSC_FETCHADDOP
(
int32_t
long
_InterlockedExchangeAdd
)
MSC_FETCHADDOP
(
uint32_t
long
_InterlockedExchangeAdd
)
#
undef
MSC_FETCHADDOP
#
define
MSC_FETCHBITOP
(
T
U
andop
orop
xorop
)
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
fetchAndSeqCst
(
T
*
addr
T
val
)
{
\
static_assert
(
sizeof
(
T
)
<
=
4
"
not
available
for
8
-
byte
values
yet
"
)
;
\
return
(
T
)
andop
(
(
U
volatile
*
)
addr
(
U
)
val
)
;
\
}
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
fetchOrSeqCst
(
T
*
addr
T
val
)
{
\
static_assert
(
sizeof
(
T
)
<
=
4
"
not
available
for
8
-
byte
values
yet
"
)
;
\
return
(
T
)
orop
(
(
U
volatile
*
)
addr
(
U
)
val
)
;
\
}
\
template
<
>
inline
T
\
js
:
:
jit
:
:
AtomicOperations
:
:
fetchXorSeqCst
(
T
*
addr
T
val
)
{
\
static_assert
(
sizeof
(
T
)
<
=
4
"
not
available
for
8
-
byte
values
yet
"
)
;
\
return
(
T
)
xorop
(
(
U
volatile
*
)
addr
(
U
)
val
)
;
\
}
MSC_FETCHBITOP
(
int8_t
char
_InterlockedAnd8
_InterlockedOr8
_InterlockedXor8
)
MSC_FETCHBITOP
(
uint8_t
char
_InterlockedAnd8
_InterlockedOr8
_InterlockedXor8
)
MSC_FETCHBITOP
(
int16_t
short
_InterlockedAnd16
_InterlockedOr16
_InterlockedXor16
)
MSC_FETCHBITOP
(
uint16_t
short
_InterlockedAnd16
_InterlockedOr16
_InterlockedXor16
)
MSC_FETCHBITOP
(
int32_t
long
_InterlockedAnd
_InterlockedOr
_InterlockedXor
)
MSC_FETCHBITOP
(
uint32_t
long
_InterlockedAnd
_InterlockedOr
_InterlockedXor
)
#
undef
MSC_FETCHBITOP
template
<
typename
T
>
inline
T
js
:
:
jit
:
:
AtomicOperations
:
:
loadSafeWhenRacy
(
T
*
addr
)
{
return
*
addr
;
}
template
<
typename
T
>
inline
void
js
:
:
jit
:
:
AtomicOperations
:
:
storeSafeWhenRacy
(
T
*
addr
T
val
)
{
*
addr
=
val
;
}
inline
void
js
:
:
jit
:
:
AtomicOperations
:
:
memcpySafeWhenRacy
(
void
*
dest
const
void
*
src
size_t
nbytes
)
{
MOZ_ASSERT
(
!
(
(
char
*
)
dest
<
=
(
char
*
)
src
&
&
(
char
*
)
src
<
(
char
*
)
dest
+
nbytes
)
)
;
MOZ_ASSERT
(
!
(
(
char
*
)
src
<
=
(
char
*
)
dest
&
&
(
char
*
)
dest
<
(
char
*
)
src
+
nbytes
)
)
;
:
:
memcpy
(
dest
src
nbytes
)
;
}
inline
void
js
:
:
jit
:
:
AtomicOperations
:
:
memmoveSafeWhenRacy
(
void
*
dest
const
void
*
src
size_t
nbytes
)
{
:
:
memmove
(
dest
src
nbytes
)
;
}
template
<
size_t
nbytes
>
inline
void
js
:
:
jit
:
:
RegionLock
:
:
acquire
(
void
*
addr
)
{
while
(
_InterlockedCompareExchange
(
(
long
*
)
&
spinlock
1
0
)
=
=
1
)
continue
;
}
template
<
size_t
nbytes
>
inline
void
js
:
:
jit
:
:
RegionLock
:
:
release
(
void
*
addr
)
{
MOZ_ASSERT
(
AtomicOperations
:
:
loadSeqCst
(
&
spinlock
)
=
=
1
"
releasing
unlocked
region
lock
"
)
;
_InterlockedExchange
(
(
long
*
)
&
spinlock
0
)
;
}
#
endif
