#
ifndef
jit_x86_shared_Patching_x86_shared_h
#
define
jit_x86_shared_Patching_x86_shared_h
namespace
js
{
namespace
jit
{
namespace
X86Encoding
{
inline
void
*
GetPointer
(
const
void
*
where
)
{
void
*
res
;
memcpy
(
&
res
(
const
char
*
)
where
-
sizeof
(
void
*
)
sizeof
(
void
*
)
)
;
return
res
;
}
inline
void
SetPointer
(
void
*
where
const
void
*
value
)
{
memcpy
(
(
char
*
)
where
-
sizeof
(
void
*
)
&
value
sizeof
(
void
*
)
)
;
}
inline
int32_t
GetInt32
(
const
void
*
where
)
{
int32_t
res
;
memcpy
(
&
res
(
const
char
*
)
where
-
sizeof
(
int32_t
)
sizeof
(
int32_t
)
)
;
return
res
;
}
inline
void
SetInt32
(
void
*
where
int32_t
value
uint32_t
trailing
=
0
)
{
memcpy
(
(
char
*
)
where
-
trailing
-
sizeof
(
int32_t
)
&
value
sizeof
(
int32_t
)
)
;
}
inline
void
SetRel32
(
void
*
from
void
*
to
uint32_t
trailing
=
0
)
{
intptr_t
offset
=
reinterpret_cast
<
intptr_t
>
(
to
)
-
reinterpret_cast
<
intptr_t
>
(
from
)
;
MOZ_ASSERT
(
offset
=
=
static_cast
<
int32_t
>
(
offset
)
"
offset
is
too
great
for
a
32
-
bit
relocation
"
)
;
if
(
offset
!
=
static_cast
<
int32_t
>
(
offset
)
)
{
MOZ_CRASH
(
"
offset
is
too
great
for
a
32
-
bit
relocation
"
)
;
}
SetInt32
(
from
offset
trailing
)
;
}
inline
void
*
GetRel32Target
(
void
*
where
)
{
int32_t
rel
=
GetInt32
(
where
)
;
return
(
char
*
)
where
+
rel
;
}
static_assert
(
MaxCodeBytesPerProcess
<
size_t
(
INT32_MAX
)
"
Invariant
"
)
;
class
JmpSrc
{
public
:
JmpSrc
(
)
:
offset_
(
INT32_MAX
)
trailing_
(
0
)
{
}
explicit
JmpSrc
(
int32_t
offset
)
:
offset_
(
offset
)
trailing_
(
0
)
{
MOZ_ASSERT
(
offset
=
=
-
1
|
|
offset
>
=
0
&
&
offset
<
INT32_MAX
)
;
}
JmpSrc
(
int32_t
offset
uint32_t
trailing
)
:
offset_
(
offset
)
trailing_
(
trailing
)
{
MOZ_ASSERT
(
offset
>
=
0
&
&
offset
<
INT32_MAX
)
;
MOZ_ASSERT
(
trailing
<
=
1
)
;
}
int32_t
offset
(
)
const
{
return
offset_
=
=
INT32_MAX
?
-
1
:
int32_t
(
offset_
)
;
}
uint32_t
trailing
(
)
const
{
return
trailing_
;
}
private
:
uint32_t
offset_
:
31
;
uint32_t
trailing_
:
1
;
}
;
class
JmpDst
{
public
:
explicit
JmpDst
(
int32_t
offset
)
:
offset_
(
offset
)
{
}
int32_t
offset
(
)
const
{
return
offset_
;
}
private
:
int32_t
offset_
;
}
;
inline
bool
CanRelinkJump
(
void
*
from
void
*
to
)
{
intptr_t
offset
=
static_cast
<
char
*
>
(
to
)
-
static_cast
<
char
*
>
(
from
)
;
return
(
offset
=
=
static_cast
<
int32_t
>
(
offset
)
)
;
}
}
}
}
#
endif
