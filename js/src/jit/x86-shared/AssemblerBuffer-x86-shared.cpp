#
include
"
jit
/
x86
-
shared
/
AssemblerBuffer
-
x86
-
shared
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
using
namespace
js
;
using
namespace
jit
;
bool
AssemblerBuffer
:
:
swap
(
Vector
<
uint8_t
0
SystemAllocPolicy
>
&
bytes
)
{
MOZ_ASSERT
(
bytes
.
empty
(
)
)
;
if
(
m_buffer
.
empty
(
)
)
{
if
(
bytes
.
capacity
(
)
>
m_buffer
.
capacity
(
)
)
{
size_t
newCapacity
=
bytes
.
capacity
(
)
;
uint8_t
*
newBuffer
=
bytes
.
extractRawBuffer
(
)
;
MOZ_ASSERT
(
newBuffer
)
;
m_buffer
.
replaceRawBuffer
(
(
unsigned
char
*
)
newBuffer
0
newCapacity
)
;
}
return
true
;
}
size_t
newLength
=
m_buffer
.
length
(
)
;
size_t
newCapacity
=
m_buffer
.
capacity
(
)
;
unsigned
char
*
newBuffer
=
m_buffer
.
extractRawBuffer
(
)
;
if
(
!
newBuffer
)
{
return
bytes
.
append
(
m_buffer
.
begin
(
)
m_buffer
.
end
(
)
)
;
}
bytes
.
replaceRawBuffer
(
(
uint8_t
*
)
newBuffer
newLength
newCapacity
)
;
return
true
;
}
#
ifdef
JS_JITSPEW
void
js
:
:
jit
:
:
GenericAssembler
:
:
spew
(
const
char
*
fmt
va_list
va
)
{
char
buf
[
200
]
;
int
i
=
VsprintfLiteral
(
buf
fmt
va
)
;
if
(
i
>
-
1
)
{
if
(
printer
)
{
printer
-
>
printf
(
"
%
s
\
n
"
buf
)
;
}
js
:
:
jit
:
:
JitSpew
(
js
:
:
jit
:
:
JitSpew_Codegen
"
%
s
"
buf
)
;
}
}
#
endif
