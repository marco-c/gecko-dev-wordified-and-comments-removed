#
ifndef
jit_InlineScriptTree_inl_h
#
define
jit_InlineScriptTree_inl_h
#
include
"
jit
/
InlineScriptTree
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jit
/
JitAllocPolicy
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
JSScript
.
h
"
namespace
js
{
namespace
jit
{
InlineScriptTree
*
InlineScriptTree
:
:
New
(
TempAllocator
*
allocator
InlineScriptTree
*
callerTree
jsbytecode
*
callerPc
JSScript
*
script
bool
isMonomorphicallyInlined
)
{
MOZ_ASSERT_IF
(
!
callerTree
!
callerPc
)
;
MOZ_ASSERT_IF
(
callerTree
callerTree
-
>
script
(
)
-
>
containsPC
(
callerPc
)
)
;
void
*
treeMem
=
allocator
-
>
allocate
(
sizeof
(
InlineScriptTree
)
)
;
if
(
!
treeMem
)
{
return
nullptr
;
}
return
new
(
treeMem
)
InlineScriptTree
(
callerTree
callerPc
script
isMonomorphicallyInlined
)
;
}
InlineScriptTree
*
InlineScriptTree
:
:
addCallee
(
TempAllocator
*
allocator
jsbytecode
*
callerPc
JSScript
*
calleeScript
bool
isMonomorphicallyInlined
)
{
MOZ_ASSERT
(
script_
&
&
script_
-
>
containsPC
(
callerPc
)
)
;
InlineScriptTree
*
calleeTree
=
New
(
allocator
this
callerPc
calleeScript
isMonomorphicallyInlined
)
;
if
(
!
calleeTree
)
{
return
nullptr
;
}
calleeTree
-
>
nextCallee_
=
children_
;
children_
=
calleeTree
;
return
calleeTree
;
}
void
InlineScriptTree
:
:
removeCallee
(
InlineScriptTree
*
callee
)
{
InlineScriptTree
*
*
prevPtr
=
&
children_
;
for
(
InlineScriptTree
*
child
=
children_
;
child
;
child
=
child
-
>
nextCallee_
)
{
if
(
child
=
=
callee
)
{
*
prevPtr
=
child
-
>
nextCallee_
;
return
;
}
prevPtr
=
&
child
-
>
nextCallee_
;
}
MOZ_CRASH
(
"
Callee
not
found
"
)
;
}
}
}
#
endif
