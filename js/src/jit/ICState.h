#
ifndef
jit_ICState_h
#
define
jit_ICState_h
#
include
"
jit
/
JitOptions
.
h
"
namespace
js
{
namespace
jit
{
class
ICState
{
public
:
enum
class
Mode
:
uint8_t
{
Specialized
=
0
Megamorphic
Generic
}
;
private
:
Mode
mode_
;
uint8_t
numOptimizedStubs_
;
uint8_t
numFailures_
;
bool
invalid_
:
1
;
static
const
size_t
MaxOptimizedStubs
=
6
;
void
transition
(
Mode
mode
)
{
MOZ_ASSERT
(
mode
>
mode_
)
;
mode_
=
mode
;
numFailures_
=
0
;
}
MOZ_ALWAYS_INLINE
size_t
maxFailures
(
)
const
{
static_assert
(
MaxOptimizedStubs
=
=
6
"
numFailures_
/
maxFailures
should
fit
in
uint8_t
"
)
;
size_t
res
=
5
+
size_t
(
40
)
*
numOptimizedStubs_
;
MOZ_ASSERT
(
res
<
=
UINT8_MAX
"
numFailures_
should
not
overflow
"
)
;
return
res
;
}
public
:
ICState
(
)
:
invalid_
(
false
)
{
reset
(
)
;
}
Mode
mode
(
)
const
{
return
mode_
;
}
size_t
numOptimizedStubs
(
)
const
{
return
numOptimizedStubs_
;
}
bool
hasFailures
(
)
const
{
return
(
numFailures_
!
=
0
)
;
}
MOZ_ALWAYS_INLINE
bool
canAttachStub
(
)
const
{
if
(
mode_
=
=
Mode
:
:
Generic
|
|
JitOptions
.
disableCacheIR
)
{
return
false
;
}
return
true
;
}
bool
invalid
(
)
const
{
return
invalid_
;
}
void
setInvalid
(
)
{
invalid_
=
true
;
}
MOZ_MUST_USE
MOZ_ALWAYS_INLINE
bool
maybeTransition
(
)
{
if
(
mode_
=
=
Mode
:
:
Generic
)
{
return
false
;
}
if
(
numOptimizedStubs_
<
MaxOptimizedStubs
&
&
numFailures_
<
maxFailures
(
)
)
{
return
false
;
}
if
(
numFailures_
=
=
maxFailures
(
)
|
|
mode_
=
=
Mode
:
:
Megamorphic
)
{
transition
(
Mode
:
:
Generic
)
;
return
true
;
}
MOZ_ASSERT
(
mode_
=
=
Mode
:
:
Specialized
)
;
transition
(
Mode
:
:
Megamorphic
)
;
return
true
;
}
void
reset
(
)
{
mode_
=
Mode
:
:
Specialized
;
numOptimizedStubs_
=
0
;
numFailures_
=
0
;
}
void
trackAttached
(
)
{
MOZ_ASSERT
(
numOptimizedStubs_
<
16
)
;
numOptimizedStubs_
+
+
;
numFailures_
=
std
:
:
min
(
numFailures_
static_cast
<
uint8_t
>
(
1
)
)
;
}
void
trackNotAttached
(
)
{
numFailures_
+
+
;
MOZ_ASSERT
(
numFailures_
>
0
"
numFailures_
should
not
overflow
"
)
;
}
void
trackUnlinkedStub
(
)
{
MOZ_ASSERT
(
numOptimizedStubs_
>
0
)
;
numOptimizedStubs_
-
-
;
}
void
trackUnlinkedAllStubs
(
)
{
numOptimizedStubs_
=
0
;
}
}
;
}
}
#
endif
