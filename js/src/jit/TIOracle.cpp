#
include
"
jit
/
TIOracle
.
h
"
#
include
"
jit
/
IonBuilder
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
TypeInference
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
using
ObjectKey
=
js
:
:
TypeSet
:
:
ObjectKey
;
TIOracle
:
:
TIOracle
(
IonBuilder
*
builder
CompilerConstraintList
*
constraints
)
:
builder_
(
builder
)
constraints_
(
constraints
)
{
}
TIOracle
:
:
Group
:
:
Group
(
JSObject
*
raw
)
:
raw_
(
ObjectKey
:
:
get
(
raw
)
)
{
}
TIOracle
:
:
Group
:
:
Group
(
ObjectGroup
*
raw
)
:
raw_
(
ObjectKey
:
:
get
(
raw
)
)
{
}
AbortReasonOr
<
Ok
>
TIOracle
:
:
ensureBallast
(
)
{
if
(
!
builder_
-
>
alloc
(
)
.
ensureBallast
(
)
)
{
return
builder_
-
>
abort
(
AbortReason
:
:
Alloc
)
;
}
return
Ok
(
)
;
}
TIOracle
:
:
TypeSet
TIOracle
:
:
resultTypeSet
(
MDefinition
*
def
)
{
return
TIOracle
:
:
TypeSet
(
def
-
>
resultTypeSet
(
)
)
;
}
TIOracle
:
:
Object
TIOracle
:
:
wrapObject
(
JSObject
*
object
)
{
return
TIOracle
:
:
Object
(
builder_
-
>
checkNurseryObject
(
object
)
)
;
}
bool
TIOracle
:
:
hasStableClass
(
TIOracle
:
:
Object
obj
)
{
ObjectKey
*
key
=
ObjectKey
:
:
get
(
obj
.
toRaw
(
)
)
;
return
key
-
>
hasStableClassAndProto
(
constraints_
)
;
}
bool
TIOracle
:
:
hasStableProto
(
TIOracle
:
:
Object
obj
)
{
ObjectKey
*
key
=
ObjectKey
:
:
get
(
obj
.
toRaw
(
)
)
;
return
key
-
>
hasStableClassAndProto
(
constraints_
)
;
}
