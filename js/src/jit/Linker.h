#
ifndef
jit_Linker_h
#
define
jit_Linker_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
jit
/
AutoWritableJitCode
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
vm
/
Runtime
.
h
"
struct
JS_PUBLIC_API
JSContext
;
namespace
js
{
namespace
jit
{
class
JitCode
;
enum
class
CodeKind
:
uint8_t
;
class
Linker
{
MacroAssembler
&
masm
;
mozilla
:
:
Maybe
<
AutoWritableJitCodeFallible
>
awjcf
;
JitCode
*
fail
(
JSContext
*
cx
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
public
:
explicit
Linker
(
MacroAssembler
&
masm
)
:
masm
(
masm
)
{
masm
.
finish
(
)
;
}
JitCode
*
newCode
(
JSContext
*
cx
CodeKind
kind
)
;
}
;
}
}
#
endif
