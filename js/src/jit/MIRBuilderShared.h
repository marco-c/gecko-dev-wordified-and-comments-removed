#
ifndef
jit_MIRBuilderShared_h
#
define
jit_MIRBuilderShared_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
ds
/
InlineTable
.
h
"
#
include
"
jit
/
MIRGraph
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
namespace
js
{
namespace
jit
{
class
PendingEdge
{
public
:
enum
class
Kind
:
uint8_t
{
TestTrue
TestFalse
Goto
GotoWithFake
}
;
private
:
MBasicBlock
*
block_
;
Kind
kind_
;
JSOp
testOp_
=
JSOp
:
:
Undefined
;
PendingEdge
(
MBasicBlock
*
block
Kind
kind
JSOp
testOp
=
JSOp
:
:
Undefined
)
:
block_
(
block
)
kind_
(
kind
)
testOp_
(
testOp
)
{
}
public
:
static
PendingEdge
NewTestTrue
(
MBasicBlock
*
block
JSOp
op
)
{
return
PendingEdge
(
block
Kind
:
:
TestTrue
op
)
;
}
static
PendingEdge
NewTestFalse
(
MBasicBlock
*
block
JSOp
op
)
{
return
PendingEdge
(
block
Kind
:
:
TestFalse
op
)
;
}
static
PendingEdge
NewGoto
(
MBasicBlock
*
block
)
{
return
PendingEdge
(
block
Kind
:
:
Goto
)
;
}
static
PendingEdge
NewGotoWithFake
(
MBasicBlock
*
block
)
{
return
PendingEdge
(
block
Kind
:
:
GotoWithFake
)
;
}
MBasicBlock
*
block
(
)
const
{
return
block_
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
JSOp
testOp
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
TestTrue
|
|
kind_
=
=
Kind
:
:
TestFalse
)
;
return
testOp_
;
}
}
;
inline
bool
TestTrueTargetIsJoinPoint
(
JSOp
op
)
{
switch
(
op
)
{
case
JSOp
:
:
IfNe
:
case
JSOp
:
:
Or
:
case
JSOp
:
:
Case
:
return
true
;
case
JSOp
:
:
IfEq
:
case
JSOp
:
:
And
:
case
JSOp
:
:
Coalesce
:
return
false
;
default
:
MOZ_CRASH
(
"
Unexpected
op
"
)
;
}
}
using
PendingEdges
=
Vector
<
PendingEdge
2
SystemAllocPolicy
>
;
using
PendingEdgesMap
=
InlineMap
<
jsbytecode
*
PendingEdges
8
PointerHasher
<
jsbytecode
*
>
SystemAllocPolicy
>
;
class
LoopState
{
MBasicBlock
*
header_
=
nullptr
;
public
:
explicit
LoopState
(
MBasicBlock
*
header
)
:
header_
(
header
)
{
}
MBasicBlock
*
header
(
)
const
{
return
header_
;
}
}
;
using
LoopStateStack
=
Vector
<
LoopState
4
JitAllocPolicy
>
;
}
}
#
endif
