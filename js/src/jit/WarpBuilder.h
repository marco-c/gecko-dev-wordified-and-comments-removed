#
ifndef
jit_WarpBuilder_h
#
define
jit_WarpBuilder_h
#
include
"
jit
/
JitContext
.
h
"
#
include
"
jit
/
MIR
.
h
"
namespace
js
{
namespace
jit
{
#
define
WARP_OPCODE_LIST
(
_
)
\
_
(
Nop
)
\
_
(
Zero
)
\
_
(
Return
)
\
_
(
RetRval
)
class
MIRGenerator
;
class
MIRGraph
;
class
WarpSnapshot
;
class
MOZ_STACK_CLASS
WarpBuilder
{
WarpSnapshot
&
input_
;
MIRGenerator
&
mirGen_
;
MIRGraph
&
graph_
;
TempAllocator
&
alloc_
;
const
CompileInfo
&
info_
;
JSScript
*
script_
;
MBasicBlock
*
current
=
nullptr
;
TempAllocator
&
alloc
(
)
{
return
alloc_
;
}
MIRGraph
&
graph
(
)
{
return
graph_
;
}
const
CompileInfo
&
info
(
)
const
{
return
info_
;
}
WarpSnapshot
&
input
(
)
const
{
return
input_
;
}
BytecodeSite
*
newBytecodeSite
(
jsbytecode
*
pc
)
;
bool
startNewBlock
(
size_t
stackDepth
jsbytecode
*
pc
MBasicBlock
*
maybePredecessor
=
nullptr
)
;
bool
hasTerminatedBlock
(
)
const
{
return
current
=
=
nullptr
;
}
void
setTerminatedBlock
(
)
{
current
=
nullptr
;
}
MConstant
*
constant
(
const
Value
&
v
)
;
void
pushConstant
(
const
Value
&
v
)
;
MOZ_MUST_USE
bool
buildPrologue
(
)
;
MOZ_MUST_USE
bool
buildBody
(
)
;
MOZ_MUST_USE
bool
buildEpilogue
(
)
;
#
define
BUILD_OP
(
OP
)
bool
build_
#
#
OP
(
const
BytecodeLocation
&
loc
)
;
WARP_OPCODE_LIST
(
BUILD_OP
)
#
undef
BUILD_OP
public
:
WarpBuilder
(
WarpSnapshot
&
input
MIRGenerator
&
mirGen
)
;
MOZ_MUST_USE
bool
build
(
)
;
}
;
}
}
#
endif
