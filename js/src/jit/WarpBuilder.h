#
ifndef
jit_WarpBuilder_h
#
define
jit_WarpBuilder_h
#
include
"
jit
/
JitContext
.
h
"
#
include
"
jit
/
MIR
.
h
"
namespace
js
{
namespace
jit
{
#
define
WARP_OPCODE_LIST
(
_
)
\
_
(
Nop
)
\
_
(
NopDestructuring
)
\
_
(
TryDestructuring
)
\
_
(
Lineno
)
\
_
(
DebugLeaveLexicalEnv
)
\
_
(
Undefined
)
\
_
(
Void
)
\
_
(
Null
)
\
_
(
Hole
)
\
_
(
Uninitialized
)
\
_
(
IsConstructing
)
\
_
(
False
)
\
_
(
True
)
\
_
(
Zero
)
\
_
(
One
)
\
_
(
Int8
)
\
_
(
Uint16
)
\
_
(
Uint24
)
\
_
(
Int32
)
\
_
(
Double
)
\
_
(
ResumeIndex
)
\
_
(
Pop
)
\
_
(
PopN
)
\
_
(
Dup
)
\
_
(
Dup2
)
\
_
(
DupAt
)
\
_
(
Swap
)
\
_
(
Pick
)
\
_
(
Unpick
)
\
_
(
GetLocal
)
\
_
(
SetLocal
)
\
_
(
InitLexical
)
\
_
(
ToNumeric
)
\
_
(
Inc
)
\
_
(
Dec
)
\
_
(
Eq
)
\
_
(
Ne
)
\
_
(
Lt
)
\
_
(
Le
)
\
_
(
Gt
)
\
_
(
Ge
)
\
_
(
StrictEq
)
\
_
(
StrictNe
)
\
_
(
Return
)
\
_
(
RetRval
)
class
MIRGenerator
;
class
MIRGraph
;
class
WarpSnapshot
;
class
MOZ_STACK_CLASS
WarpBuilder
{
WarpSnapshot
&
input_
;
MIRGenerator
&
mirGen_
;
MIRGraph
&
graph_
;
TempAllocator
&
alloc_
;
const
CompileInfo
&
info_
;
JSScript
*
script_
;
MBasicBlock
*
current
=
nullptr
;
TempAllocator
&
alloc
(
)
{
return
alloc_
;
}
MIRGraph
&
graph
(
)
{
return
graph_
;
}
const
CompileInfo
&
info
(
)
const
{
return
info_
;
}
WarpSnapshot
&
input
(
)
const
{
return
input_
;
}
BytecodeSite
*
newBytecodeSite
(
jsbytecode
*
pc
)
;
MOZ_MUST_USE
bool
startNewBlock
(
size_t
stackDepth
jsbytecode
*
pc
MBasicBlock
*
maybePredecessor
=
nullptr
)
;
bool
hasTerminatedBlock
(
)
const
{
return
current
=
=
nullptr
;
}
void
setTerminatedBlock
(
)
{
current
=
nullptr
;
}
MOZ_MUST_USE
bool
resumeAfter
(
MInstruction
*
ins
BytecodeLocation
loc
)
;
MConstant
*
constant
(
const
Value
&
v
)
;
void
pushConstant
(
const
Value
&
v
)
;
MOZ_MUST_USE
bool
buildPrologue
(
)
;
MOZ_MUST_USE
bool
buildBody
(
)
;
MOZ_MUST_USE
bool
buildEpilogue
(
)
;
MOZ_MUST_USE
bool
buildUnaryOp
(
BytecodeLocation
loc
)
;
MOZ_MUST_USE
bool
buildCompareOp
(
BytecodeLocation
loc
)
;
#
define
BUILD_OP
(
OP
)
MOZ_MUST_USE
bool
build_
#
#
OP
(
BytecodeLocation
loc
)
;
WARP_OPCODE_LIST
(
BUILD_OP
)
#
undef
BUILD_OP
public
:
WarpBuilder
(
WarpSnapshot
&
input
MIRGenerator
&
mirGen
)
;
MOZ_MUST_USE
bool
build
(
)
;
}
;
}
}
#
endif
