#
ifndef
jit_CompilationDependencyTracker_h
#
define
jit_CompilationDependencyTracker_h
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
struct
JSContext
;
namespace
js
:
:
jit
{
struct
CompilationDependency
{
enum
class
Type
{
GetIterator
EmulatesUndefined
Limit
}
;
Type
type
;
CompilationDependency
(
Type
type
)
:
type
(
type
)
{
}
virtual
bool
operator
=
=
(
CompilationDependency
&
other
)
=
0
;
virtual
bool
checkDependency
(
)
=
0
;
[
[
nodiscard
]
]
virtual
bool
registerDependency
(
JSContext
*
cx
HandleScript
script
)
=
0
;
virtual
UniquePtr
<
CompilationDependency
>
clone
(
)
=
0
;
virtual
~
CompilationDependency
(
)
=
default
;
}
;
struct
CompilationDependencyTracker
{
mozilla
:
:
Vector
<
UniquePtr
<
CompilationDependency
>
8
SystemAllocPolicy
>
dependencies
;
[
[
nodiscard
]
]
bool
addDependency
(
CompilationDependency
&
dep
)
{
MOZ_ASSERT
(
dependencies
.
length
(
)
<
=
32
)
;
for
(
auto
&
existingDep
:
dependencies
)
{
if
(
dep
=
=
*
existingDep
)
{
return
true
;
}
}
return
dependencies
.
append
(
dep
.
clone
(
)
)
;
}
bool
checkDependencies
(
)
{
for
(
auto
&
dep
:
dependencies
)
{
if
(
!
dep
-
>
checkDependency
(
)
)
{
return
false
;
}
}
return
true
;
}
void
reset
(
)
{
dependencies
.
clear
(
)
;
}
}
;
}
#
endif
