#
include
"
jit
/
WarpBuilderShared
.
h
"
#
include
"
jit
/
MIRGenerator
.
h
"
#
include
"
jit
/
MIRGraph
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
WarpBuilderShared
:
:
WarpBuilderShared
(
WarpSnapshot
&
snapshot
MIRGenerator
&
mirGen
MBasicBlock
*
current_
)
:
snapshot_
(
snapshot
)
mirGen_
(
mirGen
)
alloc_
(
mirGen
.
alloc
(
)
)
current
(
current_
)
{
}
bool
WarpBuilderShared
:
:
resumeAfter
(
MInstruction
*
ins
BytecodeLocation
loc
)
{
MOZ_ASSERT
(
ins
-
>
isEffectful
(
)
|
|
ins
-
>
isInt64ToBigInt
(
)
)
;
MOZ_ASSERT
(
!
ins
-
>
isMovable
(
)
)
;
MResumePoint
*
resumePoint
=
MResumePoint
:
:
New
(
alloc
(
)
ins
-
>
block
(
)
loc
.
toRawBytecode
(
)
MResumePoint
:
:
ResumeAfter
)
;
if
(
!
resumePoint
)
{
return
false
;
}
ins
-
>
setResumePoint
(
resumePoint
)
;
return
true
;
}
MConstant
*
WarpBuilderShared
:
:
constant
(
const
Value
&
v
)
{
MOZ_ASSERT_IF
(
v
.
isString
(
)
v
.
toString
(
)
-
>
isLinear
(
)
)
;
MOZ_ASSERT_IF
(
v
.
isGCThing
(
)
!
IsInsideNursery
(
v
.
toGCThing
(
)
)
)
;
MConstant
*
cst
=
MConstant
:
:
New
(
alloc
(
)
v
)
;
current
-
>
add
(
cst
)
;
return
cst
;
}
void
WarpBuilderShared
:
:
pushConstant
(
const
Value
&
v
)
{
MConstant
*
cst
=
constant
(
v
)
;
current
-
>
push
(
cst
)
;
}
MCall
*
WarpBuilderShared
:
:
makeCall
(
CallInfo
&
callInfo
bool
needsThisCheck
WrappedFunction
*
target
bool
isDOMCall
)
{
auto
addUndefined
=
[
this
]
(
)
-
>
MConstant
*
{
return
constant
(
UndefinedValue
(
)
)
;
}
;
return
MakeCall
(
alloc
(
)
addUndefined
callInfo
needsThisCheck
target
isDOMCall
)
;
}
MInstruction
*
WarpBuilderShared
:
:
makeSpreadCall
(
CallInfo
&
callInfo
bool
isSameRealm
WrappedFunction
*
target
)
{
MOZ_ASSERT
(
!
callInfo
.
constructing
(
)
)
;
MElements
*
elements
=
MElements
:
:
New
(
alloc
(
)
callInfo
.
arrayArg
(
)
)
;
current
-
>
add
(
elements
)
;
auto
*
apply
=
MApplyArray
:
:
New
(
alloc
(
)
target
callInfo
.
callee
(
)
elements
callInfo
.
thisArg
(
)
)
;
if
(
callInfo
.
ignoresReturnValue
(
)
)
{
apply
-
>
setIgnoresReturnValue
(
)
;
}
if
(
isSameRealm
)
{
apply
-
>
setNotCrossRealm
(
)
;
}
return
apply
;
}
