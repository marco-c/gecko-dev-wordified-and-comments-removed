#
include
"
jit
/
Ion
.
h
"
#
include
"
jscompartmentinlines
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
JSRuntime
*
CompileRuntime
:
:
runtime
(
)
{
return
reinterpret_cast
<
JSRuntime
*
>
(
this
)
;
}
CompileRuntime
*
CompileRuntime
:
:
get
(
JSRuntime
*
rt
)
{
return
reinterpret_cast
<
CompileRuntime
*
>
(
rt
)
;
}
#
ifdef
JS_GC_ZEAL
const
void
*
CompileRuntime
:
:
addressOfGCZealModeBits
(
)
{
return
runtime
(
)
-
>
gc
.
addressOfZealModeBits
(
)
;
}
#
endif
const
JitRuntime
*
CompileRuntime
:
:
jitRuntime
(
)
{
return
runtime
(
)
-
>
jitRuntime
(
)
;
}
GeckoProfiler
&
CompileRuntime
:
:
geckoProfiler
(
)
{
return
runtime
(
)
-
>
geckoProfiler
(
)
;
}
bool
CompileRuntime
:
:
jitSupportsFloatingPoint
(
)
{
return
runtime
(
)
-
>
jitSupportsFloatingPoint
;
}
bool
CompileRuntime
:
:
hadOutOfMemory
(
)
{
return
runtime
(
)
-
>
hadOutOfMemory
;
}
const
JSAtomState
&
CompileRuntime
:
:
names
(
)
{
return
*
runtime
(
)
-
>
commonNames
;
}
const
PropertyName
*
CompileRuntime
:
:
emptyString
(
)
{
return
runtime
(
)
-
>
emptyString
;
}
const
StaticStrings
&
CompileRuntime
:
:
staticStrings
(
)
{
return
*
runtime
(
)
-
>
staticStrings
;
}
const
Value
&
CompileRuntime
:
:
NaNValue
(
)
{
return
runtime
(
)
-
>
NaNValue
;
}
const
Value
&
CompileRuntime
:
:
positiveInfinityValue
(
)
{
return
runtime
(
)
-
>
positiveInfinityValue
;
}
const
WellKnownSymbols
&
CompileRuntime
:
:
wellKnownSymbols
(
)
{
return
*
runtime
(
)
-
>
wellKnownSymbols
;
}
const
void
*
CompileRuntime
:
:
addressOfActiveJSContext
(
)
{
return
runtime
(
)
-
>
addressOfActiveContext
(
)
;
}
#
ifdef
DEBUG
bool
CompileRuntime
:
:
isInsideNursery
(
gc
:
:
Cell
*
cell
)
{
return
UninlinedIsInsideNursery
(
cell
)
;
}
#
endif
const
DOMCallbacks
*
CompileRuntime
:
:
DOMcallbacks
(
)
{
return
runtime
(
)
-
>
DOMcallbacks
;
}
bool
CompileRuntime
:
:
runtimeMatches
(
JSRuntime
*
rt
)
{
return
rt
=
=
runtime
(
)
;
}
Zone
*
CompileZone
:
:
zone
(
)
{
return
reinterpret_cast
<
Zone
*
>
(
this
)
;
}
CompileZone
*
CompileZone
:
:
get
(
Zone
*
zone
)
{
return
reinterpret_cast
<
CompileZone
*
>
(
zone
)
;
}
CompileRuntime
*
CompileZone
:
:
runtime
(
)
{
return
CompileRuntime
:
:
get
(
zone
(
)
-
>
runtimeFromAnyThread
(
)
)
;
}
bool
CompileZone
:
:
isAtomsZone
(
)
{
return
zone
(
)
-
>
isAtomsZone
(
)
;
}
#
ifdef
DEBUG
const
void
*
CompileZone
:
:
addressOfIonBailAfter
(
)
{
return
zone
(
)
-
>
group
(
)
-
>
addressOfIonBailAfter
(
)
;
}
#
endif
const
void
*
CompileZone
:
:
addressOfJSContext
(
)
{
return
&
zone
(
)
-
>
group
(
)
-
>
context
;
}
const
void
*
CompileZone
:
:
addressOfNeedsIncrementalBarrier
(
)
{
return
zone
(
)
-
>
addressOfNeedsIncrementalBarrier
(
)
;
}
const
void
*
CompileZone
:
:
addressOfFreeList
(
gc
:
:
AllocKind
allocKind
)
{
return
zone
(
)
-
>
arenas
.
addressOfFreeList
(
allocKind
)
;
}
const
void
*
CompileZone
:
:
addressOfNurseryPosition
(
)
{
return
zone
(
)
-
>
group
(
)
-
>
addressOfNurseryPosition
(
)
;
}
const
void
*
CompileZone
:
:
addressOfNurseryCurrentEnd
(
)
{
return
zone
(
)
-
>
group
(
)
-
>
addressOfNurseryCurrentEnd
(
)
;
}
bool
CompileZone
:
:
nurseryExists
(
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
zone
(
)
)
)
;
return
zone
(
)
-
>
group
(
)
-
>
nursery
(
)
.
exists
(
)
;
}
void
CompileZone
:
:
setMinorGCShouldCancelIonCompilations
(
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
zone
(
)
)
)
;
zone
(
)
-
>
group
(
)
-
>
storeBuffer
(
)
.
setShouldCancelIonCompilations
(
)
;
}
bool
CompileZone
:
:
profilingScripts
(
)
{
return
zone
(
)
-
>
group
(
)
-
>
profilingScripts
;
}
JSCompartment
*
CompileCompartment
:
:
compartment
(
)
{
return
reinterpret_cast
<
JSCompartment
*
>
(
this
)
;
}
CompileCompartment
*
CompileCompartment
:
:
get
(
JSCompartment
*
comp
)
{
return
reinterpret_cast
<
CompileCompartment
*
>
(
comp
)
;
}
CompileZone
*
CompileCompartment
:
:
zone
(
)
{
return
CompileZone
:
:
get
(
compartment
(
)
-
>
zone
(
)
)
;
}
CompileRuntime
*
CompileCompartment
:
:
runtime
(
)
{
return
CompileRuntime
:
:
get
(
compartment
(
)
-
>
runtimeFromAnyThread
(
)
)
;
}
const
void
*
CompileCompartment
:
:
addressOfEnumerators
(
)
{
return
&
compartment
(
)
-
>
enumerators
;
}
const
void
*
CompileCompartment
:
:
addressOfLastCachedNativeIterator
(
)
{
return
&
compartment
(
)
-
>
lastCachedNativeIterator
;
}
const
void
*
CompileCompartment
:
:
addressOfRandomNumberGenerator
(
)
{
return
compartment
(
)
-
>
randomNumberGenerator
.
ptr
(
)
;
}
const
JitCompartment
*
CompileCompartment
:
:
jitCompartment
(
)
{
return
compartment
(
)
-
>
jitCompartment
(
)
;
}
const
GlobalObject
*
CompileCompartment
:
:
maybeGlobal
(
)
{
return
compartment
(
)
-
>
unsafeUnbarrieredMaybeGlobal
(
)
;
}
bool
CompileCompartment
:
:
hasAllocationMetadataBuilder
(
)
{
return
compartment
(
)
-
>
hasAllocationMetadataBuilder
(
)
;
}
void
CompileCompartment
:
:
setSingletonsAsValues
(
)
{
compartment
(
)
-
>
behaviors
(
)
.
setSingletonsAsValues
(
)
;
}
JitCompileOptions
:
:
JitCompileOptions
(
)
:
cloneSingletons_
(
false
)
profilerSlowAssertionsEnabled_
(
false
)
offThreadCompilationAvailable_
(
false
)
{
}
JitCompileOptions
:
:
JitCompileOptions
(
JSContext
*
cx
)
{
cloneSingletons_
=
cx
-
>
compartment
(
)
-
>
creationOptions
(
)
.
cloneSingletons
(
)
;
profilerSlowAssertionsEnabled_
=
cx
-
>
runtime
(
)
-
>
geckoProfiler
(
)
.
enabled
(
)
&
&
cx
-
>
runtime
(
)
-
>
geckoProfiler
(
)
.
slowAssertionsEnabled
(
)
;
offThreadCompilationAvailable_
=
OffThreadCompilationAvailable
(
cx
)
;
}
