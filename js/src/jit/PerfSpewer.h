#
ifndef
jit_PerfSpewer_h
#
define
jit_PerfSpewer_h
#
ifdef
JS_ION_PERF
#
include
<
stdio
.
h
>
#
endif
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Vector
.
h
"
#
ifdef
JS_JITSPEW
#
include
"
jit
/
GraphSpewer
.
h
"
#
endif
class
JSScript
;
enum
class
JSOp
:
uint8_t
;
namespace
js
{
namespace
wasm
{
struct
OpBytes
;
struct
CodeMetadata
;
}
namespace
jit
{
class
JitCode
;
class
BacktrackingAllocator
;
class
CompilerFrameInfo
;
class
MacroAssembler
;
class
MBasicBlock
;
class
MIRGraph
;
class
LInstruction
;
enum
class
CacheOp
:
uint16_t
;
struct
AutoLockPerfSpewer
{
AutoLockPerfSpewer
(
)
;
~
AutoLockPerfSpewer
(
)
;
}
;
bool
PerfEnabled
(
)
;
class
PerfSpewer
{
protected
:
struct
DebugEntry
{
constexpr
DebugEntry
(
)
:
offset
(
0
)
line
(
0
)
column
(
0
)
{
}
constexpr
DebugEntry
(
uint32_t
offset_
uint32_t
line_
uint32_t
column_
=
0
)
:
offset
(
offset_
)
line
(
line_
)
column
(
column_
)
{
}
uint32_t
offset
;
uint32_t
line
;
uint32_t
column
;
}
;
Vector
<
DebugEntry
0
SystemAllocPolicy
>
debugInfo_
;
uint32_t
startOffset_
=
0
;
FILE
*
irFile_
=
nullptr
;
uint32_t
irFileLines_
=
0
;
JS
:
:
UniqueChars
irFileName_
;
virtual
const
char
*
CodeName
(
uint32_t
op
)
=
0
;
virtual
const
char
*
IRFileExtension
(
)
{
return
"
.
txt
"
;
}
void
recordOpcode
(
uint32_t
offset
uint32_t
opcode
)
;
void
recordOpcode
(
uint32_t
offset
uint32_t
opcode
JS
:
:
UniqueChars
&
&
str
)
;
void
recordOpcode
(
uint32_t
offset
JS
:
:
UniqueChars
&
&
str
)
;
void
saveDebugInfo
(
const
char
*
filename
uintptr_t
base
AutoLockPerfSpewer
&
lock
)
;
void
saveJitCodeDebugInfo
(
JSScript
*
script
JitCode
*
code
AutoLockPerfSpewer
&
lock
)
;
void
saveWasmCodeDebugInfo
(
uintptr_t
codeBase
AutoLockPerfSpewer
&
lock
)
;
void
saveJSProfile
(
JitCode
*
code
JS
:
:
UniqueChars
&
desc
JSScript
*
script
)
;
void
saveWasmProfile
(
uintptr_t
codeBase
size_t
codeSize
JS
:
:
UniqueChars
&
desc
)
;
virtual
void
disable
(
AutoLockPerfSpewer
&
lock
)
;
virtual
void
disable
(
)
;
public
:
PerfSpewer
(
)
=
default
;
~
PerfSpewer
(
)
;
PerfSpewer
(
PerfSpewer
&
&
)
;
PerfSpewer
&
operator
=
(
PerfSpewer
&
&
)
;
void
markStartOffset
(
uint32_t
offset
)
{
startOffset_
=
offset
;
}
virtual
void
startRecording
(
const
wasm
:
:
CodeMetadata
*
wasmCodeMeta
=
nullptr
)
;
virtual
void
endRecording
(
)
;
void
recordOffset
(
MacroAssembler
&
masm
const
char
*
)
;
static
void
Init
(
)
;
static
void
CollectJitCodeInfo
(
JS
:
:
UniqueChars
&
function_name
JitCode
*
code
AutoLockPerfSpewer
&
lock
)
;
static
void
CollectJitCodeInfo
(
JS
:
:
UniqueChars
&
function_name
void
*
code_addr
uint64_t
code_size
AutoLockPerfSpewer
&
lock
)
;
}
;
void
CollectPerfSpewerJitCodeProfile
(
JitCode
*
code
const
char
*
msg
)
;
void
CollectPerfSpewerJitCodeProfile
(
uintptr_t
base
uint64_t
size
const
char
*
msg
)
;
void
CollectPerfSpewerWasmMap
(
uintptr_t
base
uintptr_t
size
JS
:
:
UniqueChars
&
&
desc
)
;
class
IonPerfSpewer
:
public
PerfSpewer
{
const
char
*
CodeName
(
uint32_t
op
)
override
;
const
char
*
IRFileExtension
(
)
override
;
void
disable
(
)
override
;
#
ifdef
JS_JITSPEW
Fprinter
graphPrinter_
;
UniqueGraphSpewer
graphSpewer_
=
nullptr
;
#
endif
public
:
IonPerfSpewer
(
)
=
default
;
IonPerfSpewer
(
IonPerfSpewer
&
&
)
=
default
;
IonPerfSpewer
&
operator
=
(
IonPerfSpewer
&
&
)
=
default
;
void
startRecording
(
const
wasm
:
:
CodeMetadata
*
wasmCodeMeta
=
nullptr
)
override
;
void
endRecording
(
)
override
;
void
recordPass
(
const
char
*
pass
MIRGraph
*
graph
BacktrackingAllocator
*
ra
=
nullptr
)
;
void
recordInstruction
(
MacroAssembler
&
masm
LInstruction
*
ins
)
;
void
saveJSProfile
(
JSContext
*
cx
JSScript
*
script
JitCode
*
code
)
;
void
saveWasmProfile
(
uintptr_t
codeBase
size_t
codeSize
JS
:
:
UniqueChars
&
desc
)
;
}
;
class
WasmBaselinePerfSpewer
:
public
PerfSpewer
{
const
char
*
CodeName
(
uint32_t
op
)
override
;
public
:
WasmBaselinePerfSpewer
(
)
=
default
;
WasmBaselinePerfSpewer
(
WasmBaselinePerfSpewer
&
&
)
=
default
;
WasmBaselinePerfSpewer
&
operator
=
(
WasmBaselinePerfSpewer
&
&
)
=
default
;
[
[
nodiscard
]
]
bool
needsToRecordInstruction
(
)
const
;
void
recordInstruction
(
MacroAssembler
&
masm
const
wasm
:
:
OpBytes
&
op
)
;
void
saveProfile
(
uintptr_t
codeBase
size_t
codeSize
JS
:
:
UniqueChars
&
desc
)
;
}
;
class
BaselineInterpreterPerfSpewer
:
public
PerfSpewer
{
struct
Op
{
uint32_t
offset
=
0
;
uint32_t
opcode
=
0
;
JS
:
:
UniqueChars
str
;
explicit
Op
(
uint32_t
offset_
uint32_t
opcode_
)
:
offset
(
offset_
)
opcode
(
opcode_
)
{
}
explicit
Op
(
uint32_t
offset_
JS
:
:
UniqueChars
&
&
str_
)
:
offset
(
offset_
)
opcode
(
0
)
str
(
std
:
:
move
(
str_
)
)
{
}
Op
(
Op
&
&
copy
)
{
offset
=
copy
.
offset
;
opcode
=
copy
.
opcode
;
str
=
std
:
:
move
(
copy
.
str
)
;
}
Op
(
Op
&
copy
)
=
delete
;
}
;
Vector
<
Op
0
SystemAllocPolicy
>
ops_
;
const
char
*
CodeName
(
uint32_t
op
)
override
;
public
:
void
recordOffset
(
MacroAssembler
&
masm
const
JSOp
&
op
)
;
void
recordOffset
(
MacroAssembler
&
masm
const
char
*
name
)
;
void
saveProfile
(
JitCode
*
code
)
;
}
;
class
BaselinePerfSpewer
:
public
PerfSpewer
{
const
char
*
CodeName
(
uint32_t
op
)
override
;
public
:
void
recordInstruction
(
MacroAssembler
&
masm
jsbytecode
*
pc
JSScript
*
script
CompilerFrameInfo
&
frame
)
;
void
saveProfile
(
JSContext
*
cx
JSScript
*
script
JitCode
*
code
)
;
}
;
class
InlineCachePerfSpewer
:
public
PerfSpewer
{
const
char
*
CodeName
(
uint32_t
op
)
override
;
public
:
void
recordInstruction
(
MacroAssembler
&
masm
const
CacheOp
&
op
)
;
}
;
class
BaselineICPerfSpewer
:
public
InlineCachePerfSpewer
{
public
:
void
saveProfile
(
JitCode
*
code
const
char
*
stubName
)
;
}
;
class
IonICPerfSpewer
:
public
InlineCachePerfSpewer
{
public
:
explicit
IonICPerfSpewer
(
JSScript
*
script
jsbytecode
*
pc
)
;
void
saveProfile
(
JSContext
*
cx
JSScript
*
script
JitCode
*
code
const
char
*
stubName
)
;
}
;
class
PerfSpewerRangeRecorder
{
using
OffsetPair
=
std
:
:
tuple
<
uint32_t
JS
:
:
UniqueChars
>
;
Vector
<
OffsetPair
0
js
:
:
SystemAllocPolicy
>
ranges
;
MacroAssembler
&
masm
;
void
appendEntry
(
JS
:
:
UniqueChars
&
desc
)
;
public
:
explicit
PerfSpewerRangeRecorder
(
MacroAssembler
&
masm_
)
:
masm
(
masm_
)
{
}
;
void
recordOffset
(
const
char
*
name
)
;
void
recordOffset
(
const
char
*
name
JSContext
*
cx
JSScript
*
script
)
;
void
recordVMWrapperOffset
(
const
char
*
name
)
;
void
collectRangesForJitCode
(
JitCode
*
code
)
;
}
;
}
}
#
endif
