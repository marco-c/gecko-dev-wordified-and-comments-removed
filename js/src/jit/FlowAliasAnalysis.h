#
ifndef
jit_FlowAliasAnalysis_h
#
define
jit_FlowAliasAnalysis_h
#
include
"
jit
/
AliasAnalysisShared
.
h
"
#
include
"
jit
/
MIR
.
h
"
#
include
"
jit
/
MIRGraph
.
h
"
namespace
js
{
namespace
jit
{
class
LoopInfo
;
class
MIRGraph
;
class
GraphStoreInfo
;
typedef
MDefinitionVector
BlockStoreInfo
;
typedef
Vector
<
BlockStoreInfo
*
50
JitAllocPolicy
>
GraphStoreVector
;
class
FlowAliasAnalysis
:
public
AliasAnalysisShared
{
LoopInfo
*
loop_
;
GraphStoreInfo
*
stores_
;
MDefinitionVector
output_
;
MDefinitionVector
worklist_
;
public
:
FlowAliasAnalysis
(
MIRGenerator
*
mir
MIRGraph
&
graph
)
;
MOZ_MUST_USE
bool
analyze
(
)
override
;
protected
:
MOZ_MUST_USE
bool
processStore
(
BlockStoreInfo
&
stores
MDefinition
*
store
)
;
MOZ_MUST_USE
bool
processLoad
(
BlockStoreInfo
&
stores
MDefinition
*
load
)
;
MOZ_MUST_USE
bool
processDeferredLoads
(
LoopInfo
*
info
)
;
MOZ_MUST_USE
bool
improveDependency
(
MDefinition
*
load
MDefinitionVector
&
inputStores
MDefinitionVector
&
outputStores
)
;
MOZ_MUST_USE
bool
improveNonAliasedStores
(
MDefinition
*
load
MDefinitionVector
&
inputStores
MDefinitionVector
&
outputStores
bool
*
improved
bool
onlyControlInstructions
=
false
)
;
MOZ_MUST_USE
bool
improveStoresInFinishedLoops
(
MDefinition
*
load
MDefinitionVector
&
stores
bool
*
improved
)
;
MOZ_MUST_USE
bool
improveLoopDependency
(
MDefinition
*
load
MDefinitionVector
&
inputStores
MDefinitionVector
&
outputStores
)
;
MOZ_MUST_USE
bool
deferImproveDependency
(
MDefinitionVector
&
stores
)
;
void
saveLoadDependency
(
MDefinition
*
load
MDefinitionVector
&
dependencies
)
;
MOZ_MUST_USE
bool
saveStoreDependency
(
MDefinition
*
store
BlockStoreInfo
&
prevStores
)
;
MOZ_MUST_USE
bool
computeBlockStores
(
MBasicBlock
*
block
)
;
MOZ_MUST_USE
bool
isLoopInvariant
(
MDefinition
*
load
MDefinition
*
store
bool
*
loopinvariant
)
;
bool
loopIsFinished
(
MBasicBlock
*
loopheader
)
;
}
;
}
}
#
endif
