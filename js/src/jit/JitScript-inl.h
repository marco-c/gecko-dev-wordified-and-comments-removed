#
ifndef
jit_JitScript_inl_h
#
define
jit_JitScript_inl_h
#
include
"
jit
/
JitScript
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
TypeInference
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
namespace
js
{
namespace
jit
{
inline
StackTypeSet
*
JitScript
:
:
thisTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
)
{
return
typeArray
(
sweep
)
+
script
-
>
numBytecodeTypeSets
(
)
;
}
inline
StackTypeSet
*
JitScript
:
:
argTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
unsigned
i
)
{
MOZ_ASSERT
(
i
<
script
-
>
functionNonDelazifying
(
)
-
>
nargs
(
)
)
;
return
typeArray
(
sweep
)
+
script
-
>
numBytecodeTypeSets
(
)
+
1
+
i
;
}
template
<
typename
TYPESET
>
inline
TYPESET
*
JitScript
:
:
BytecodeTypes
(
JSScript
*
script
jsbytecode
*
pc
uint32_t
*
bytecodeMap
uint32_t
*
hint
TYPESET
*
typeArray
)
{
MOZ_ASSERT
(
CodeSpec
[
*
pc
]
.
format
&
JOF_TYPESET
)
;
uint32_t
offset
=
script
-
>
pcToOffset
(
pc
)
;
size_t
numBytecodeTypeSets
=
script
-
>
numBytecodeTypeSets
(
)
;
if
(
(
*
hint
+
1
)
<
numBytecodeTypeSets
&
&
bytecodeMap
[
*
hint
+
1
]
=
=
offset
)
{
(
*
hint
)
+
+
;
return
typeArray
+
*
hint
;
}
if
(
bytecodeMap
[
*
hint
]
=
=
offset
)
{
return
typeArray
+
*
hint
;
}
size_t
loc
;
bool
found
=
mozilla
:
:
BinarySearch
(
bytecodeMap
0
numBytecodeTypeSets
offset
&
loc
)
;
if
(
found
)
{
MOZ_ASSERT
(
bytecodeMap
[
loc
]
=
=
offset
)
;
}
else
{
MOZ_ASSERT
(
numBytecodeTypeSets
=
=
JSScript
:
:
MaxBytecodeTypeSets
)
;
loc
=
numBytecodeTypeSets
-
1
;
}
*
hint
=
mozilla
:
:
AssertedCast
<
uint32_t
>
(
loc
)
;
return
typeArray
+
*
hint
;
}
inline
StackTypeSet
*
JitScript
:
:
bytecodeTypes
(
const
AutoSweepJitScript
&
sweep
JSScript
*
script
jsbytecode
*
pc
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
script
-
>
zone
(
)
)
)
;
return
BytecodeTypes
(
script
pc
bytecodeTypeMap
(
)
bytecodeTypeMapHint
(
)
typeArray
(
sweep
)
)
;
}
inline
AutoKeepJitScripts
:
:
AutoKeepJitScripts
(
JSContext
*
cx
)
:
zone_
(
cx
-
>
zone
(
)
-
>
types
)
prev_
(
zone_
.
keepJitScripts
)
{
zone_
.
keepJitScripts
=
true
;
}
inline
AutoKeepJitScripts
:
:
~
AutoKeepJitScripts
(
)
{
MOZ_ASSERT
(
zone_
.
keepJitScripts
)
;
zone_
.
keepJitScripts
=
prev_
;
}
inline
bool
JitScript
:
:
typesNeedsSweep
(
Zone
*
zone
)
const
{
MOZ_ASSERT
(
!
js
:
:
TlsContext
.
get
(
)
-
>
inUnsafeCallWithABI
)
;
return
typesGeneration
(
)
!
=
zone
-
>
types
.
generation
;
}
}
}
inline
bool
JSScript
:
:
ensureHasJitScript
(
JSContext
*
cx
js
:
:
jit
:
:
AutoKeepJitScripts
&
)
{
return
jitScript
(
)
|
|
createJitScript
(
cx
)
;
}
#
endif
