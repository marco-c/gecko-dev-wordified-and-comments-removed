#
ifndef
jit_BaselineCacheIRCompiler_h
#
define
jit_BaselineCacheIRCompiler_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jit
/
CacheIR
.
h
"
#
include
"
jit
/
CacheIRCompiler
.
h
"
namespace
js
{
namespace
jit
{
class
ICFallbackStub
;
class
ICStub
;
enum
class
BaselineCacheIRStubKind
{
Regular
Monitored
Updated
}
;
ICStub
*
AttachBaselineCacheIRStub
(
JSContext
*
cx
const
CacheIRWriter
&
writer
CacheKind
kind
BaselineCacheIRStubKind
stubKind
JSScript
*
outerScript
ICScript
*
icScript
ICFallbackStub
*
stub
bool
*
attached
)
;
class
MOZ_RAII
BaselineCacheIRCompiler
:
public
CacheIRCompiler
{
bool
makesGCCalls_
;
BaselineCacheIRStubKind
kind_
;
void
tailCallVMInternal
(
MacroAssembler
&
masm
TailCallVMFunctionId
id
)
;
template
<
typename
Fn
Fn
fn
>
void
tailCallVM
(
MacroAssembler
&
masm
)
;
MOZ_MUST_USE
bool
callTypeUpdateIC
(
Register
obj
ValueOperand
val
Register
scratch
LiveGeneralRegisterSet
saveRegs
)
;
MOZ_MUST_USE
bool
emitStoreSlotShared
(
bool
isFixed
ObjOperandId
objId
uint32_t
offsetOffset
ValOperandId
rhsId
)
;
MOZ_MUST_USE
bool
emitAddAndStoreSlotShared
(
CacheOp
op
ObjOperandId
objId
uint32_t
offsetOffset
ValOperandId
rhsId
bool
changeGroup
uint32_t
newGroupOffset
uint32_t
newShapeOffset
mozilla
:
:
Maybe
<
uint32_t
>
numNewSlotsOffset
)
;
bool
updateArgc
(
CallFlags
flags
Register
argcReg
Register
scratch
)
;
void
loadStackObject
(
ArgumentKind
kind
CallFlags
flags
size_t
stackPushed
Register
argcReg
Register
dest
)
;
void
pushArguments
(
Register
argcReg
Register
calleeReg
Register
scratch
Register
scratch2
CallFlags
flags
bool
isJitCall
)
;
void
pushStandardArguments
(
Register
argcReg
Register
scratch
Register
scratch2
bool
isJitCall
bool
isConstructing
)
;
void
pushArrayArguments
(
Register
argcReg
Register
scratch
Register
scratch2
bool
isJitCall
bool
isConstructing
)
;
void
pushFunCallArguments
(
Register
argcReg
Register
calleeReg
Register
scratch
Register
scratch2
bool
isJitCall
)
;
void
pushFunApplyArgs
(
Register
argcReg
Register
calleeReg
Register
scratch
Register
scratch2
bool
isJitCall
)
;
void
createThis
(
Register
argcReg
Register
calleeReg
Register
scratch
CallFlags
flags
)
;
void
updateReturnValue
(
)
;
enum
class
NativeCallType
{
Native
ClassHook
}
;
bool
emitCallNativeShared
(
NativeCallType
callType
ObjOperandId
calleeId
Int32OperandId
argcId
CallFlags
flags
mozilla
:
:
Maybe
<
bool
>
ignoresReturnValue
mozilla
:
:
Maybe
<
uint32_t
>
targetOffset
)
;
MOZ_MUST_USE
bool
emitCallScriptedGetterResultShared
(
TypedOrValueRegister
receiver
uint32_t
getterOffset
bool
sameRealm
)
;
template
<
typename
T
typename
CallVM
>
MOZ_MUST_USE
bool
emitCallNativeGetterResultShared
(
T
receiver
uint32_t
getterOffset
const
CallVM
&
emitCallVM
)
;
enum
class
StringCode
{
CodeUnit
CodePoint
}
;
bool
emitStringFromCodeResult
(
Int32OperandId
codeId
StringCode
stringCode
)
;
public
:
friend
class
AutoStubFrame
;
BaselineCacheIRCompiler
(
JSContext
*
cx
const
CacheIRWriter
&
writer
uint32_t
stubDataOffset
BaselineCacheIRStubKind
stubKind
)
;
MOZ_MUST_USE
bool
init
(
CacheKind
kind
)
;
template
<
typename
Fn
Fn
fn
>
void
callVM
(
MacroAssembler
&
masm
)
;
JitCode
*
compile
(
)
;
bool
makesGCCalls
(
)
const
;
Address
stubAddress
(
uint32_t
offset
)
const
;
private
:
CACHE_IR_COMPILER_UNSHARED_GENERATED
}
;
}
}
#
endif
