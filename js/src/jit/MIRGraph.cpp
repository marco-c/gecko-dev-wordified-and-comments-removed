#
include
"
jit
/
MIRGraph
.
h
"
#
include
"
jit
/
BytecodeAnalysis
.
h
"
#
include
"
jit
/
Ion
.
h
"
#
include
"
jit
/
JitSpewer
.
h
"
#
include
"
jit
/
MIR
.
h
"
#
include
"
jit
/
MIRGenerator
.
h
"
#
include
"
wasm
/
WasmTypes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
MIRGenerator
:
:
MIRGenerator
(
CompileRealm
*
realm
const
JitCompileOptions
&
options
TempAllocator
*
alloc
MIRGraph
*
graph
const
CompileInfo
*
info
const
OptimizationInfo
*
optimizationInfo
)
:
realm
(
realm
)
runtime
(
realm
?
realm
-
>
runtime
(
)
:
nullptr
)
outerInfo_
(
info
)
optimizationInfo_
(
optimizationInfo
)
alloc_
(
alloc
)
graph_
(
graph
)
offThreadStatus_
(
Ok
(
)
)
cancelBuild_
(
false
)
wasmMaxStackArgBytes_
(
0
)
needsOverrecursedCheck_
(
false
)
needsStaticStackAlignment_
(
false
)
instrumentedProfiling_
(
false
)
instrumentedProfilingIsCached_
(
false
)
safeForMinorGC_
(
true
)
stringsCanBeInNursery_
(
realm
?
realm
-
>
zone
(
)
-
>
canNurseryAllocateStrings
(
)
:
false
)
minWasmHeapLength_
(
0
)
options
(
options
)
gs_
(
alloc
)
{
}
mozilla
:
:
GenericErrorResult
<
AbortReason
>
MIRGenerator
:
:
abort
(
AbortReason
r
)
{
if
(
JitSpewEnabled
(
JitSpew_IonAbort
)
)
{
switch
(
r
)
{
case
AbortReason
:
:
Alloc
:
JitSpew
(
JitSpew_IonAbort
"
AbortReason
:
:
Alloc
"
)
;
break
;
case
AbortReason
:
:
Inlining
:
JitSpew
(
JitSpew_IonAbort
"
AbortReason
:
:
Inlining
"
)
;
break
;
case
AbortReason
:
:
PreliminaryObjects
:
JitSpew
(
JitSpew_IonAbort
"
AbortReason
:
:
PreliminaryObjects
"
)
;
break
;
case
AbortReason
:
:
Disable
:
JitSpew
(
JitSpew_IonAbort
"
AbortReason
:
:
Disable
"
)
;
break
;
case
AbortReason
:
:
Error
:
JitSpew
(
JitSpew_IonAbort
"
AbortReason
:
:
Error
"
)
;
break
;
case
AbortReason
:
:
NoAbort
:
MOZ_CRASH
(
"
Abort
with
AbortReason
:
:
NoAbort
"
)
;
break
;
}
}
return
Err
(
std
:
:
move
(
r
)
)
;
}
mozilla
:
:
GenericErrorResult
<
AbortReason
>
MIRGenerator
:
:
abortFmt
(
AbortReason
r
const
char
*
message
va_list
ap
)
{
JitSpewVA
(
JitSpew_IonAbort
message
ap
)
;
return
Err
(
std
:
:
move
(
r
)
)
;
}
mozilla
:
:
GenericErrorResult
<
AbortReason
>
MIRGenerator
:
:
abort
(
AbortReason
r
const
char
*
message
.
.
.
)
{
va_list
ap
;
va_start
(
ap
message
)
;
auto
forward
=
abortFmt
(
r
message
ap
)
;
va_end
(
ap
)
;
return
forward
;
}
void
MIRGraph
:
:
addBlock
(
MBasicBlock
*
block
)
{
MOZ_ASSERT
(
block
)
;
block
-
>
setId
(
blockIdGen_
+
+
)
;
blocks_
.
pushBack
(
block
)
;
numBlocks_
+
+
;
}
void
MIRGraph
:
:
insertBlockAfter
(
MBasicBlock
*
at
MBasicBlock
*
block
)
{
block
-
>
setId
(
blockIdGen_
+
+
)
;
blocks_
.
insertAfter
(
at
block
)
;
numBlocks_
+
+
;
}
void
MIRGraph
:
:
insertBlockBefore
(
MBasicBlock
*
at
MBasicBlock
*
block
)
{
block
-
>
setId
(
blockIdGen_
+
+
)
;
blocks_
.
insertBefore
(
at
block
)
;
numBlocks_
+
+
;
}
bool
MIRGraph
:
:
removeSuccessorBlocks
(
MBasicBlock
*
start
)
{
if
(
!
start
-
>
hasLastIns
(
)
)
{
return
true
;
}
start
-
>
mark
(
)
;
Vector
<
MBasicBlock
*
4
SystemAllocPolicy
>
blocks
;
for
(
size_t
i
=
0
;
i
<
start
-
>
numSuccessors
(
)
;
i
+
+
)
{
if
(
!
start
-
>
getSuccessor
(
i
)
)
{
continue
;
}
if
(
start
-
>
getSuccessor
(
i
)
-
>
isMarked
(
)
)
{
continue
;
}
if
(
!
blocks
.
append
(
start
-
>
getSuccessor
(
i
)
)
)
{
return
false
;
}
start
-
>
getSuccessor
(
i
)
-
>
mark
(
)
;
}
for
(
size_t
i
=
0
;
i
<
blocks
.
length
(
)
;
i
+
+
)
{
MBasicBlock
*
block
=
blocks
[
i
]
;
if
(
!
block
-
>
hasLastIns
(
)
)
{
continue
;
}
for
(
size_t
j
=
0
;
j
<
block
-
>
numSuccessors
(
)
;
j
+
+
)
{
if
(
!
block
-
>
getSuccessor
(
j
)
)
{
continue
;
}
if
(
block
-
>
getSuccessor
(
j
)
-
>
isMarked
(
)
)
{
continue
;
}
if
(
!
blocks
.
append
(
block
-
>
getSuccessor
(
j
)
)
)
{
return
false
;
}
block
-
>
getSuccessor
(
j
)
-
>
mark
(
)
;
}
}
if
(
osrBlock
(
)
)
{
if
(
osrBlock
(
)
-
>
getSuccessor
(
0
)
-
>
isMarked
(
)
)
{
osrBlock
(
)
-
>
mark
(
)
;
}
}
for
(
size_t
i
=
0
;
i
<
blocks
.
length
(
)
;
i
+
+
)
{
MBasicBlock
*
block
=
blocks
[
i
]
;
bool
allMarked
=
true
;
for
(
size_t
i
=
0
;
i
<
block
-
>
numPredecessors
(
)
;
i
+
+
)
{
if
(
block
-
>
getPredecessor
(
i
)
-
>
isMarked
(
)
)
{
continue
;
}
allMarked
=
false
;
break
;
}
if
(
allMarked
)
{
removeBlock
(
block
)
;
}
else
{
MOZ_ASSERT
(
block
!
=
osrBlock
(
)
)
;
for
(
size_t
j
=
0
;
j
<
block
-
>
numPredecessors
(
)
;
)
{
if
(
!
block
-
>
getPredecessor
(
j
)
-
>
isMarked
(
)
)
{
j
+
+
;
continue
;
}
block
-
>
removePredecessor
(
block
-
>
getPredecessor
(
j
)
)
;
}
MOZ_ASSERT
(
block
-
>
begin
(
)
=
=
block
-
>
end
(
)
)
;
}
}
if
(
osrBlock
(
)
)
{
if
(
osrBlock
(
)
-
>
getSuccessor
(
0
)
-
>
isDead
(
)
)
{
removeBlock
(
osrBlock
(
)
)
;
}
}
for
(
size_t
i
=
0
;
i
<
blocks
.
length
(
)
;
i
+
+
)
{
blocks
[
i
]
-
>
unmark
(
)
;
}
start
-
>
unmark
(
)
;
return
true
;
}
void
MIRGraph
:
:
removeBlock
(
MBasicBlock
*
block
)
{
if
(
block
=
=
osrBlock_
)
{
osrBlock_
=
nullptr
;
}
if
(
returnAccumulator_
)
{
size_t
i
=
0
;
while
(
i
<
returnAccumulator_
-
>
length
(
)
)
{
if
(
(
*
returnAccumulator_
)
[
i
]
=
=
block
)
{
returnAccumulator_
-
>
erase
(
returnAccumulator_
-
>
begin
(
)
+
i
)
;
}
else
{
i
+
+
;
}
}
}
block
-
>
clear
(
)
;
block
-
>
markAsDead
(
)
;
if
(
block
-
>
isInList
(
)
)
{
blocks_
.
remove
(
block
)
;
numBlocks_
-
-
;
}
}
void
MIRGraph
:
:
removeBlockIncludingPhis
(
MBasicBlock
*
block
)
{
removeBlock
(
block
)
;
block
-
>
discardAllPhis
(
)
;
}
void
MIRGraph
:
:
unmarkBlocks
(
)
{
for
(
MBasicBlockIterator
i
(
blocks_
.
begin
(
)
)
;
i
!
=
blocks_
.
end
(
)
;
i
+
+
)
{
i
-
>
unmark
(
)
;
}
}
MBasicBlock
*
MBasicBlock
:
:
New
(
MIRGraph
&
graph
size_t
stackDepth
const
CompileInfo
&
info
MBasicBlock
*
maybePred
BytecodeSite
*
site
Kind
kind
)
{
MOZ_ASSERT
(
site
-
>
pc
(
)
!
=
nullptr
)
;
MBasicBlock
*
block
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
info
site
kind
)
;
if
(
!
block
-
>
init
(
)
)
{
return
nullptr
;
}
if
(
!
block
-
>
inherit
(
graph
.
alloc
(
)
stackDepth
maybePred
0
)
)
{
return
nullptr
;
}
return
block
;
}
MBasicBlock
*
MBasicBlock
:
:
NewPopN
(
MIRGraph
&
graph
const
CompileInfo
&
info
MBasicBlock
*
pred
BytecodeSite
*
site
Kind
kind
uint32_t
popped
)
{
MBasicBlock
*
block
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
info
site
kind
)
;
if
(
!
block
-
>
init
(
)
)
{
return
nullptr
;
}
if
(
!
block
-
>
inherit
(
graph
.
alloc
(
)
pred
-
>
stackDepth
(
)
pred
popped
)
)
{
return
nullptr
;
}
return
block
;
}
MBasicBlock
*
MBasicBlock
:
:
NewWithResumePoint
(
MIRGraph
&
graph
const
CompileInfo
&
info
MBasicBlock
*
pred
BytecodeSite
*
site
MResumePoint
*
resumePoint
)
{
MBasicBlock
*
block
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
info
site
NORMAL
)
;
MOZ_ASSERT
(
!
resumePoint
-
>
instruction
(
)
)
;
resumePoint
-
>
block
(
)
-
>
discardResumePoint
(
resumePoint
RefType_None
)
;
resumePoint
-
>
setBlock
(
block
)
;
block
-
>
addResumePoint
(
resumePoint
)
;
block
-
>
entryResumePoint_
=
resumePoint
;
if
(
!
block
-
>
init
(
)
)
{
return
nullptr
;
}
if
(
!
block
-
>
inheritResumePoint
(
pred
)
)
{
return
nullptr
;
}
return
block
;
}
MBasicBlock
*
MBasicBlock
:
:
NewPendingLoopHeader
(
MIRGraph
&
graph
const
CompileInfo
&
info
MBasicBlock
*
pred
BytecodeSite
*
site
)
{
MOZ_ASSERT
(
site
-
>
pc
(
)
!
=
nullptr
)
;
MBasicBlock
*
block
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
info
site
PENDING_LOOP_HEADER
)
;
if
(
!
block
-
>
init
(
)
)
{
return
nullptr
;
}
if
(
!
block
-
>
inherit
(
graph
.
alloc
(
)
pred
-
>
stackDepth
(
)
pred
0
)
)
{
return
nullptr
;
}
return
block
;
}
MBasicBlock
*
MBasicBlock
:
:
NewSplitEdge
(
MIRGraph
&
graph
MBasicBlock
*
pred
size_t
predEdgeIdx
MBasicBlock
*
succ
)
{
MBasicBlock
*
split
=
nullptr
;
if
(
!
succ
-
>
pc
(
)
)
{
split
=
MBasicBlock
:
:
New
(
graph
succ
-
>
info
(
)
pred
SPLIT_EDGE
)
;
if
(
!
split
)
{
return
nullptr
;
}
}
else
{
MResumePoint
*
succEntry
=
succ
-
>
entryResumePoint
(
)
;
BytecodeSite
*
site
=
new
(
graph
.
alloc
(
)
)
BytecodeSite
(
succ
-
>
trackedTree
(
)
succEntry
-
>
pc
(
)
)
;
split
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
succ
-
>
info
(
)
site
SPLIT_EDGE
)
;
if
(
!
split
-
>
init
(
)
)
{
return
nullptr
;
}
split
-
>
callerResumePoint_
=
succ
-
>
callerResumePoint
(
)
;
split
-
>
stackPosition_
=
succEntry
-
>
stackDepth
(
)
;
MResumePoint
*
splitEntry
=
new
(
graph
.
alloc
(
)
)
MResumePoint
(
split
succEntry
-
>
pc
(
)
MResumePoint
:
:
ResumeAt
)
;
if
(
!
splitEntry
-
>
init
(
graph
.
alloc
(
)
)
)
{
return
nullptr
;
}
split
-
>
entryResumePoint_
=
splitEntry
;
size_t
succEdgeIdx
=
succ
-
>
indexForPredecessor
(
pred
)
;
for
(
size_t
i
=
0
e
=
splitEntry
-
>
numOperands
(
)
;
i
<
e
;
i
+
+
)
{
MDefinition
*
def
=
succEntry
-
>
getOperand
(
i
)
;
MOZ_ASSERT_IF
(
def
-
>
block
(
)
=
=
succ
def
-
>
isPhi
(
)
)
;
if
(
def
-
>
block
(
)
=
=
succ
)
{
def
=
def
-
>
toPhi
(
)
-
>
getOperand
(
succEdgeIdx
)
;
}
splitEntry
-
>
initOperand
(
i
def
)
;
}
if
(
!
split
-
>
predecessors_
.
append
(
pred
)
)
{
return
nullptr
;
}
}
split
-
>
setLoopDepth
(
succ
-
>
loopDepth
(
)
)
;
split
-
>
end
(
MGoto
:
:
New
(
graph
.
alloc
(
)
succ
)
)
;
graph
.
insertBlockAfter
(
pred
split
)
;
pred
-
>
replaceSuccessor
(
predEdgeIdx
split
)
;
succ
-
>
replacePredecessor
(
pred
split
)
;
return
split
;
}
MBasicBlock
*
MBasicBlock
:
:
New
(
MIRGraph
&
graph
const
CompileInfo
&
info
MBasicBlock
*
pred
Kind
kind
)
{
BytecodeSite
*
site
=
new
(
graph
.
alloc
(
)
)
BytecodeSite
(
)
;
MBasicBlock
*
block
=
new
(
graph
.
alloc
(
)
)
MBasicBlock
(
graph
info
site
kind
)
;
if
(
!
block
-
>
init
(
)
)
{
return
nullptr
;
}
if
(
pred
)
{
block
-
>
stackPosition_
=
pred
-
>
stackPosition_
;
if
(
block
-
>
kind_
=
=
PENDING_LOOP_HEADER
)
{
size_t
nphis
=
block
-
>
stackPosition_
;
size_t
nfree
=
graph
.
phiFreeListLength
(
)
;
TempAllocator
&
alloc
=
graph
.
alloc
(
)
;
MPhi
*
phis
=
nullptr
;
if
(
nphis
>
nfree
)
{
phis
=
alloc
.
allocateArray
<
MPhi
>
(
nphis
-
nfree
)
;
if
(
!
phis
)
{
return
nullptr
;
}
}
for
(
size_t
i
=
0
;
i
<
nphis
;
i
+
+
)
{
MDefinition
*
predSlot
=
pred
-
>
getSlot
(
i
)
;
MOZ_ASSERT
(
predSlot
-
>
type
(
)
!
=
MIRType
:
:
Value
)
;
MPhi
*
phi
;
if
(
i
<
nfree
)
{
phi
=
graph
.
takePhiFromFreeList
(
)
;
}
else
{
phi
=
phis
+
(
i
-
nfree
)
;
}
new
(
phi
)
MPhi
(
alloc
predSlot
-
>
type
(
)
)
;
phi
-
>
addInlineInput
(
predSlot
)
;
block
-
>
addPhi
(
phi
)
;
block
-
>
setSlot
(
i
phi
)
;
}
}
else
{
if
(
!
block
-
>
ensureHasSlots
(
0
)
)
{
return
nullptr
;
}
block
-
>
copySlots
(
pred
)
;
}
if
(
!
block
-
>
predecessors_
.
append
(
pred
)
)
{
return
nullptr
;
}
}
return
block
;
}
MBasicBlock
:
:
MBasicBlock
(
MIRGraph
&
graph
const
CompileInfo
&
info
BytecodeSite
*
site
Kind
kind
)
:
unreachable_
(
false
)
specialized_
(
false
)
graph_
(
graph
)
info_
(
info
)
predecessors_
(
graph
.
alloc
(
)
)
stackPosition_
(
info_
.
firstStackSlot
(
)
)
id_
(
0
)
domIndex_
(
0
)
numDominated_
(
0
)
pc_
(
site
-
>
pc
(
)
)
lir_
(
nullptr
)
callerResumePoint_
(
nullptr
)
entryResumePoint_
(
nullptr
)
outerResumePoint_
(
nullptr
)
successorWithPhis_
(
nullptr
)
positionInPhiSuccessor_
(
0
)
loopDepth_
(
0
)
kind_
(
kind
)
mark_
(
false
)
immediatelyDominated_
(
graph
.
alloc
(
)
)
immediateDominator_
(
nullptr
)
trackedSite_
(
site
)
hitCount_
(
0
)
hitState_
(
HitState
:
:
NotDefined
)
#
if
defined
(
JS_ION_PERF
)
|
|
defined
(
DEBUG
)
lineno_
(
0u
)
columnIndex_
(
0u
)
#
endif
{
}
bool
MBasicBlock
:
:
init
(
)
{
return
slots_
.
init
(
graph_
.
alloc
(
)
info_
.
nslots
(
)
)
;
}
bool
MBasicBlock
:
:
increaseSlots
(
size_t
num
)
{
return
slots_
.
growBy
(
graph_
.
alloc
(
)
num
)
;
}
bool
MBasicBlock
:
:
ensureHasSlots
(
size_t
num
)
{
size_t
depth
=
stackDepth
(
)
+
num
;
if
(
depth
>
nslots
(
)
)
{
if
(
!
increaseSlots
(
depth
-
nslots
(
)
)
)
{
return
false
;
}
}
return
true
;
}
void
MBasicBlock
:
:
copySlots
(
MBasicBlock
*
from
)
{
MOZ_ASSERT
(
stackPosition_
<
=
from
-
>
stackPosition_
)
;
MOZ_ASSERT
(
stackPosition_
<
=
nslots
(
)
)
;
MDefinition
*
*
thisSlots
=
slots_
.
begin
(
)
;
MDefinition
*
*
fromSlots
=
from
-
>
slots_
.
begin
(
)
;
for
(
size_t
i
=
0
e
=
stackPosition_
;
i
<
e
;
+
+
i
)
{
thisSlots
[
i
]
=
fromSlots
[
i
]
;
}
}
bool
MBasicBlock
:
:
inherit
(
TempAllocator
&
alloc
size_t
stackDepth
MBasicBlock
*
maybePred
uint32_t
popped
)
{
MOZ_ASSERT_IF
(
maybePred
maybePred
-
>
stackDepth
(
)
=
=
stackDepth
)
;
MOZ_ASSERT
(
stackDepth
>
=
popped
)
;
stackDepth
-
=
popped
;
stackPosition_
=
stackDepth
;
if
(
maybePred
&
&
kind_
!
=
PENDING_LOOP_HEADER
)
{
copySlots
(
maybePred
)
;
}
MOZ_ASSERT
(
info_
.
nslots
(
)
>
=
stackPosition_
)
;
MOZ_ASSERT
(
!
entryResumePoint_
)
;
callerResumePoint_
=
maybePred
?
maybePred
-
>
callerResumePoint
(
)
:
nullptr
;
entryResumePoint_
=
new
(
alloc
)
MResumePoint
(
this
pc
(
)
MResumePoint
:
:
ResumeAt
)
;
if
(
!
entryResumePoint_
-
>
init
(
alloc
)
)
{
return
false
;
}
if
(
maybePred
)
{
if
(
!
predecessors_
.
append
(
maybePred
)
)
{
return
false
;
}
if
(
kind_
=
=
PENDING_LOOP_HEADER
)
{
for
(
size_t
i
=
0
;
i
<
stackDepth
;
i
+
+
)
{
MPhi
*
phi
=
MPhi
:
:
New
(
alloc
.
fallible
(
)
)
;
if
(
!
phi
)
{
return
false
;
}
phi
-
>
addInlineInput
(
maybePred
-
>
getSlot
(
i
)
)
;
addPhi
(
phi
)
;
setSlot
(
i
phi
)
;
entryResumePoint
(
)
-
>
initOperand
(
i
phi
)
;
}
}
else
{
for
(
size_t
i
=
0
;
i
<
stackDepth
;
i
+
+
)
{
entryResumePoint
(
)
-
>
initOperand
(
i
getSlot
(
i
)
)
;
}
}
}
else
{
for
(
size_t
i
=
0
;
i
<
stackDepth
;
i
+
+
)
{
entryResumePoint
(
)
-
>
clearOperand
(
i
)
;
}
}
return
true
;
}
bool
MBasicBlock
:
:
inheritResumePoint
(
MBasicBlock
*
pred
)
{
stackPosition_
=
entryResumePoint_
-
>
stackDepth
(
)
;
for
(
uint32_t
i
=
0
;
i
<
stackPosition_
;
i
+
+
)
{
slots_
[
i
]
=
entryResumePoint_
-
>
getOperand
(
i
)
;
}
MOZ_ASSERT
(
info_
.
nslots
(
)
>
=
stackPosition_
)
;
MOZ_ASSERT
(
kind_
!
=
PENDING_LOOP_HEADER
)
;
MOZ_ASSERT
(
pred
!
=
nullptr
)
;
callerResumePoint_
=
pred
-
>
callerResumePoint
(
)
;
if
(
!
predecessors_
.
append
(
pred
)
)
{
return
false
;
}
return
true
;
}
void
MBasicBlock
:
:
inheritSlots
(
MBasicBlock
*
parent
)
{
stackPosition_
=
parent
-
>
stackPosition_
;
copySlots
(
parent
)
;
}
bool
MBasicBlock
:
:
initEntrySlots
(
TempAllocator
&
alloc
)
{
discardResumePoint
(
entryResumePoint_
)
;
entryResumePoint_
=
MResumePoint
:
:
New
(
alloc
this
pc
(
)
MResumePoint
:
:
ResumeAt
)
;
if
(
!
entryResumePoint_
)
{
return
false
;
}
return
true
;
}
void
MBasicBlock
:
:
shimmySlots
(
int
discardDepth
)
{
MOZ_ASSERT
(
discardDepth
<
0
)
;
MOZ_ASSERT
(
stackPosition_
+
discardDepth
>
=
info_
.
firstStackSlot
(
)
)
;
for
(
int
i
=
discardDepth
;
i
<
-
1
;
i
+
+
)
{
slots_
[
stackPosition_
+
i
]
=
slots_
[
stackPosition_
+
i
+
1
]
;
}
-
-
stackPosition_
;
}
bool
MBasicBlock
:
:
linkOsrValues
(
MStart
*
start
)
{
MResumePoint
*
res
=
start
-
>
resumePoint
(
)
;
for
(
uint32_t
i
=
0
;
i
<
stackDepth
(
)
;
i
+
+
)
{
MDefinition
*
def
=
slots_
[
i
]
;
MInstruction
*
cloneRp
=
nullptr
;
if
(
i
=
=
info
(
)
.
environmentChainSlot
(
)
)
{
if
(
def
-
>
isOsrEnvironmentChain
(
)
)
{
cloneRp
=
def
-
>
toOsrEnvironmentChain
(
)
;
}
}
else
if
(
i
=
=
info
(
)
.
returnValueSlot
(
)
)
{
if
(
def
-
>
isOsrReturnValue
(
)
)
{
cloneRp
=
def
-
>
toOsrReturnValue
(
)
;
}
}
else
if
(
info
(
)
.
hasArguments
(
)
&
&
i
=
=
info
(
)
.
argsObjSlot
(
)
)
{
MOZ_ASSERT
(
def
-
>
isConstant
(
)
|
|
def
-
>
isOsrArgumentsObject
(
)
)
;
MOZ_ASSERT_IF
(
def
-
>
isConstant
(
)
def
-
>
toConstant
(
)
-
>
type
(
)
=
=
MIRType
:
:
Undefined
)
;
if
(
def
-
>
isOsrArgumentsObject
(
)
)
{
cloneRp
=
def
-
>
toOsrArgumentsObject
(
)
;
}
}
else
{
MOZ_ASSERT
(
def
-
>
isOsrValue
(
)
|
|
def
-
>
isGetArgumentsObjectArg
(
)
|
|
def
-
>
isConstant
(
)
|
|
def
-
>
isParameter
(
)
)
;
MOZ_ASSERT_IF
(
def
-
>
isConstant
(
)
def
-
>
toConstant
(
)
-
>
type
(
)
=
=
MIRType
:
:
Undefined
)
;
if
(
def
-
>
isOsrValue
(
)
)
{
cloneRp
=
def
-
>
toOsrValue
(
)
;
}
else
if
(
def
-
>
isGetArgumentsObjectArg
(
)
)
{
cloneRp
=
def
-
>
toGetArgumentsObjectArg
(
)
;
}
else
if
(
def
-
>
isParameter
(
)
)
{
cloneRp
=
def
-
>
toParameter
(
)
;
}
}
if
(
cloneRp
)
{
MResumePoint
*
clone
=
MResumePoint
:
:
Copy
(
graph
(
)
.
alloc
(
)
res
)
;
if
(
!
clone
)
{
return
false
;
}
cloneRp
-
>
setResumePoint
(
clone
)
;
}
}
return
true
;
}
void
MBasicBlock
:
:
rewriteAtDepth
(
int32_t
depth
MDefinition
*
ins
)
{
MOZ_ASSERT
(
depth
<
0
)
;
MOZ_ASSERT
(
stackPosition_
+
depth
>
=
info_
.
firstStackSlot
(
)
)
;
rewriteSlot
(
stackPosition_
+
depth
ins
)
;
}
MDefinition
*
MBasicBlock
:
:
environmentChain
(
)
{
return
getSlot
(
info
(
)
.
environmentChainSlot
(
)
)
;
}
MDefinition
*
MBasicBlock
:
:
argumentsObject
(
)
{
return
getSlot
(
info
(
)
.
argsObjSlot
(
)
)
;
}
void
MBasicBlock
:
:
setEnvironmentChain
(
MDefinition
*
scopeObj
)
{
setSlot
(
info
(
)
.
environmentChainSlot
(
)
scopeObj
)
;
}
void
MBasicBlock
:
:
setArgumentsObject
(
MDefinition
*
argsObj
)
{
setSlot
(
info
(
)
.
argsObjSlot
(
)
argsObj
)
;
}
void
MBasicBlock
:
:
pick
(
int32_t
depth
)
{
for
(
;
depth
<
0
;
depth
+
+
)
{
swapAt
(
depth
)
;
}
}
void
MBasicBlock
:
:
unpick
(
int32_t
depth
)
{
for
(
int32_t
n
=
-
1
;
n
>
=
depth
;
n
-
-
)
{
swapAt
(
n
)
;
}
}
void
MBasicBlock
:
:
swapAt
(
int32_t
depth
)
{
uint32_t
lhsDepth
=
stackPosition_
+
depth
-
1
;
uint32_t
rhsDepth
=
stackPosition_
+
depth
;
MDefinition
*
temp
=
slots_
[
lhsDepth
]
;
slots_
[
lhsDepth
]
=
slots_
[
rhsDepth
]
;
slots_
[
rhsDepth
]
=
temp
;
}
void
MBasicBlock
:
:
discardLastIns
(
)
{
discard
(
lastIns
(
)
)
;
}
MConstant
*
MBasicBlock
:
:
optimizedOutConstant
(
TempAllocator
&
alloc
)
{
MInstruction
*
ins
=
*
begin
(
)
;
if
(
ins
-
>
type
(
)
=
=
MIRType
:
:
MagicOptimizedOut
)
{
return
ins
-
>
toConstant
(
)
;
}
MConstant
*
constant
=
MConstant
:
:
New
(
alloc
MagicValue
(
JS_OPTIMIZED_OUT
)
)
;
insertBefore
(
ins
constant
)
;
return
constant
;
}
void
MBasicBlock
:
:
addFromElsewhere
(
MInstruction
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
block
(
)
!
=
this
)
;
ins
-
>
block
(
)
-
>
instructions_
.
remove
(
ins
)
;
add
(
ins
)
;
}
void
MBasicBlock
:
:
moveBefore
(
MInstruction
*
at
MInstruction
*
ins
)
{
MOZ_ASSERT
(
ins
-
>
block
(
)
=
=
this
)
;
instructions_
.
remove
(
ins
)
;
ins
-
>
setBlock
(
at
-
>
block
(
)
)
;
at
-
>
block
(
)
-
>
instructions_
.
insertBefore
(
at
ins
)
;
ins
-
>
setTrackedSite
(
at
-
>
trackedSite
(
)
)
;
}
MInstruction
*
MBasicBlock
:
:
safeInsertTop
(
MDefinition
*
ins
IgnoreTop
ignore
)
{
MOZ_ASSERT
(
graph
(
)
.
osrBlock
(
)
!
=
this
"
We
are
not
supposed
to
add
any
instruction
in
OSR
blocks
.
"
)
;
MInstructionIterator
insertIter
=
!
ins
|
|
ins
-
>
isPhi
(
)
?
begin
(
)
:
begin
(
ins
-
>
toInstruction
(
)
)
;
while
(
insertIter
-
>
isBeta
(
)
|
|
insertIter
-
>
isInterruptCheck
(
)
|
|
insertIter
-
>
isConstant
(
)
|
|
insertIter
-
>
isParameter
(
)
|
|
(
!
(
ignore
&
IgnoreRecover
)
&
&
insertIter
-
>
isRecoveredOnBailout
(
)
)
)
{
insertIter
+
+
;
}
return
*
insertIter
;
}
void
MBasicBlock
:
:
discardResumePoint
(
MResumePoint
*
rp
ReferencesType
refType
)
{
if
(
refType
&
RefType_DiscardOperands
)
{
rp
-
>
releaseUses
(
)
;
}
#
ifdef
DEBUG
MResumePointIterator
iter
=
resumePointsBegin
(
)
;
while
(
*
iter
!
=
rp
)
{
MOZ_ASSERT
(
iter
!
=
resumePointsEnd
(
)
)
;
iter
+
+
;
}
resumePoints_
.
removeAt
(
iter
)
;
#
endif
}
void
MBasicBlock
:
:
prepareForDiscard
(
MInstruction
*
ins
ReferencesType
refType
)
{
MOZ_ASSERT
(
ins
-
>
block
(
)
=
=
this
)
;
MResumePoint
*
rp
=
ins
-
>
resumePoint
(
)
;
if
(
(
refType
&
RefType_DiscardResumePoint
)
&
&
rp
)
{
discardResumePoint
(
rp
refType
)
;
}
MOZ_ASSERT_IF
(
refType
&
RefType_AssertNoUses
!
ins
-
>
hasUses
(
)
)
;
const
uint32_t
InstructionOperands
=
RefType_DiscardOperands
|
RefType_DiscardInstruction
;
if
(
(
refType
&
InstructionOperands
)
=
=
InstructionOperands
)
{
for
(
size_t
i
=
0
e
=
ins
-
>
numOperands
(
)
;
i
<
e
;
i
+
+
)
{
ins
-
>
releaseOperand
(
i
)
;
}
}
ins
-
>
setDiscarded
(
)
;
}
void
MBasicBlock
:
:
discard
(
MInstruction
*
ins
)
{
prepareForDiscard
(
ins
)
;
instructions_
.
remove
(
ins
)
;
}
void
MBasicBlock
:
:
discardIgnoreOperands
(
MInstruction
*
ins
)
{
#
ifdef
DEBUG
for
(
size_t
i
=
0
e
=
ins
-
>
numOperands
(
)
;
i
<
e
;
i
+
+
)
{
MOZ_ASSERT
(
!
ins
-
>
hasOperand
(
i
)
)
;
}
#
endif
prepareForDiscard
(
ins
RefType_IgnoreOperands
)
;
instructions_
.
remove
(
ins
)
;
}
void
MBasicBlock
:
:
discardDef
(
MDefinition
*
at
)
{
if
(
at
-
>
isPhi
(
)
)
{
at
-
>
block
(
)
-
>
discardPhi
(
at
-
>
toPhi
(
)
)
;
}
else
{
at
-
>
block
(
)
-
>
discard
(
at
-
>
toInstruction
(
)
)
;
}
}
void
MBasicBlock
:
:
discardAllInstructions
(
)
{
MInstructionIterator
iter
=
begin
(
)
;
discardAllInstructionsStartingAt
(
iter
)
;
}
void
MBasicBlock
:
:
discardAllInstructionsStartingAt
(
MInstructionIterator
iter
)
{
while
(
iter
!
=
end
(
)
)
{
MInstruction
*
ins
=
*
iter
+
+
;
prepareForDiscard
(
ins
RefType_DefaultNoAssert
)
;
instructions_
.
remove
(
ins
)
;
}
}
void
MBasicBlock
:
:
discardAllPhiOperands
(
)
{
for
(
MPhiIterator
iter
=
phisBegin
(
)
;
iter
!
=
phisEnd
(
)
;
iter
+
+
)
{
iter
-
>
removeAllOperands
(
)
;
}
for
(
MBasicBlock
*
*
pred
=
predecessors_
.
begin
(
)
;
pred
!
=
predecessors_
.
end
(
)
;
pred
+
+
)
{
(
*
pred
)
-
>
clearSuccessorWithPhis
(
)
;
}
}
void
MBasicBlock
:
:
discardAllPhis
(
)
{
discardAllPhiOperands
(
)
;
phis_
.
clear
(
)
;
}
void
MBasicBlock
:
:
discardAllResumePoints
(
bool
discardEntry
)
{
if
(
outerResumePoint_
)
{
clearOuterResumePoint
(
)
;
}
if
(
discardEntry
&
&
entryResumePoint_
)
{
clearEntryResumePoint
(
)
;
}
#
ifdef
DEBUG
if
(
!
entryResumePoint
(
)
)
{
MOZ_ASSERT
(
resumePointsEmpty
(
)
)
;
}
else
{
MResumePointIterator
iter
(
resumePointsBegin
(
)
)
;
MOZ_ASSERT
(
iter
!
=
resumePointsEnd
(
)
)
;
iter
+
+
;
MOZ_ASSERT
(
iter
=
=
resumePointsEnd
(
)
)
;
}
#
endif
}
void
MBasicBlock
:
:
clear
(
)
{
discardAllInstructions
(
)
;
discardAllResumePoints
(
)
;
discardAllPhiOperands
(
)
;
}
void
MBasicBlock
:
:
insertBefore
(
MInstruction
*
at
MInstruction
*
ins
)
{
MOZ_ASSERT
(
at
-
>
block
(
)
=
=
this
)
;
ins
-
>
setBlock
(
this
)
;
graph
(
)
.
allocDefinitionId
(
ins
)
;
instructions_
.
insertBefore
(
at
ins
)
;
ins
-
>
setTrackedSite
(
at
-
>
trackedSite
(
)
)
;
}
void
MBasicBlock
:
:
insertAfter
(
MInstruction
*
at
MInstruction
*
ins
)
{
MOZ_ASSERT
(
at
-
>
block
(
)
=
=
this
)
;
ins
-
>
setBlock
(
this
)
;
graph
(
)
.
allocDefinitionId
(
ins
)
;
instructions_
.
insertAfter
(
at
ins
)
;
ins
-
>
setTrackedSite
(
at
-
>
trackedSite
(
)
)
;
}
void
MBasicBlock
:
:
insertAtEnd
(
MInstruction
*
ins
)
{
if
(
hasLastIns
(
)
)
{
insertBefore
(
lastIns
(
)
ins
)
;
}
else
{
add
(
ins
)
;
}
}
void
MBasicBlock
:
:
addPhi
(
MPhi
*
phi
)
{
phis_
.
pushBack
(
phi
)
;
phi
-
>
setBlock
(
this
)
;
graph
(
)
.
allocDefinitionId
(
phi
)
;
}
void
MBasicBlock
:
:
discardPhi
(
MPhi
*
phi
)
{
MOZ_ASSERT
(
!
phis_
.
empty
(
)
)
;
phi
-
>
removeAllOperands
(
)
;
phi
-
>
setDiscarded
(
)
;
phis_
.
remove
(
phi
)
;
if
(
phis_
.
empty
(
)
)
{
for
(
MBasicBlock
*
pred
:
predecessors_
)
{
pred
-
>
clearSuccessorWithPhis
(
)
;
}
}
}
void
MBasicBlock
:
:
flagOperandsOfPrunedBranches
(
MInstruction
*
ins
)
{
MResumePoint
*
rp
=
nullptr
;
for
(
MInstructionReverseIterator
iter
=
rbegin
(
ins
)
;
iter
!
=
rend
(
)
;
iter
+
+
)
{
rp
=
iter
-
>
resumePoint
(
)
;
if
(
rp
)
{
break
;
}
}
if
(
!
rp
)
{
rp
=
entryResumePoint
(
)
;
}
MOZ_ASSERT
(
rp
)
;
while
(
rp
)
{
for
(
size_t
i
=
0
end
=
rp
-
>
numOperands
(
)
;
i
<
end
;
i
+
+
)
{
rp
-
>
getOperand
(
i
)
-
>
setUseRemovedUnchecked
(
)
;
}
rp
=
rp
-
>
caller
(
)
;
}
}
bool
MBasicBlock
:
:
addPredecessor
(
TempAllocator
&
alloc
MBasicBlock
*
pred
)
{
return
addPredecessorPopN
(
alloc
pred
0
)
;
}
bool
MBasicBlock
:
:
addPredecessorPopN
(
TempAllocator
&
alloc
MBasicBlock
*
pred
uint32_t
popped
)
{
MOZ_ASSERT
(
pred
)
;
MOZ_ASSERT
(
predecessors_
.
length
(
)
>
0
)
;
MOZ_ASSERT
(
pred
-
>
hasLastIns
(
)
)
;
MOZ_ASSERT
(
pred
-
>
stackPosition_
=
=
stackPosition_
+
popped
)
;
for
(
uint32_t
i
=
0
e
=
stackPosition_
;
i
<
e
;
+
+
i
)
{
MDefinition
*
mine
=
getSlot
(
i
)
;
MDefinition
*
other
=
pred
-
>
getSlot
(
i
)
;
if
(
mine
!
=
other
)
{
if
(
mine
-
>
isPhi
(
)
&
&
mine
-
>
block
(
)
=
=
this
)
{
MOZ_ASSERT
(
predecessors_
.
length
(
)
)
;
if
(
!
mine
-
>
toPhi
(
)
-
>
addInputSlow
(
other
)
)
{
return
false
;
}
}
else
{
MPhi
*
phi
;
if
(
mine
-
>
type
(
)
=
=
other
-
>
type
(
)
)
{
phi
=
MPhi
:
:
New
(
alloc
.
fallible
(
)
mine
-
>
type
(
)
)
;
}
else
{
phi
=
MPhi
:
:
New
(
alloc
.
fallible
(
)
)
;
}
if
(
!
phi
)
{
return
false
;
}
addPhi
(
phi
)
;
if
(
!
phi
-
>
reserveLength
(
predecessors_
.
length
(
)
+
1
)
)
{
return
false
;
}
for
(
size_t
j
=
0
numPreds
=
predecessors_
.
length
(
)
;
j
<
numPreds
;
+
+
j
)
{
MOZ_ASSERT
(
predecessors_
[
j
]
-
>
getSlot
(
i
)
=
=
mine
)
;
phi
-
>
addInput
(
mine
)
;
}
phi
-
>
addInput
(
other
)
;
setSlot
(
i
phi
)
;
if
(
entryResumePoint
(
)
)
{
entryResumePoint
(
)
-
>
replaceOperand
(
i
phi
)
;
}
}
}
}
return
predecessors_
.
append
(
pred
)
;
}
bool
MBasicBlock
:
:
addPredecessorSameInputsAs
(
MBasicBlock
*
pred
MBasicBlock
*
existingPred
)
{
MOZ_ASSERT
(
pred
)
;
MOZ_ASSERT
(
predecessors_
.
length
(
)
>
0
)
;
MOZ_ASSERT
(
pred
-
>
hasLastIns
(
)
)
;
MOZ_ASSERT
(
!
pred
-
>
successorWithPhis
(
)
)
;
if
(
!
phisEmpty
(
)
)
{
size_t
existingPosition
=
indexForPredecessor
(
existingPred
)
;
for
(
MPhiIterator
iter
=
phisBegin
(
)
;
iter
!
=
phisEnd
(
)
;
iter
+
+
)
{
if
(
!
iter
-
>
addInputSlow
(
iter
-
>
getOperand
(
existingPosition
)
)
)
{
return
false
;
}
}
}
if
(
!
predecessors_
.
append
(
pred
)
)
{
return
false
;
}
return
true
;
}
bool
MBasicBlock
:
:
addPredecessorWithoutPhis
(
MBasicBlock
*
pred
)
{
MOZ_ASSERT
(
pred
&
&
pred
-
>
hasLastIns
(
)
)
;
return
predecessors_
.
append
(
pred
)
;
}
bool
MBasicBlock
:
:
addImmediatelyDominatedBlock
(
MBasicBlock
*
child
)
{
return
immediatelyDominated_
.
append
(
child
)
;
}
void
MBasicBlock
:
:
removeImmediatelyDominatedBlock
(
MBasicBlock
*
child
)
{
for
(
size_t
i
=
0
;
;
+
+
i
)
{
MOZ_ASSERT
(
i
<
immediatelyDominated_
.
length
(
)
"
Dominated
block
to
remove
not
present
"
)
;
if
(
immediatelyDominated_
[
i
]
=
=
child
)
{
immediatelyDominated_
[
i
]
=
immediatelyDominated_
.
back
(
)
;
immediatelyDominated_
.
popBack
(
)
;
return
;
}
}
}
void
MBasicBlock
:
:
assertUsesAreNotWithin
(
MUseIterator
use
MUseIterator
end
)
{
#
ifdef
DEBUG
for
(
;
use
!
=
end
;
use
+
+
)
{
MOZ_ASSERT_IF
(
use
-
>
consumer
(
)
-
>
isDefinition
(
)
use
-
>
consumer
(
)
-
>
toDefinition
(
)
-
>
block
(
)
-
>
id
(
)
<
id
(
)
)
;
}
#
endif
}
AbortReason
MBasicBlock
:
:
setBackedge
(
TempAllocator
&
alloc
MBasicBlock
*
pred
)
{
MOZ_ASSERT
(
hasLastIns
(
)
)
;
MOZ_ASSERT
(
pred
-
>
hasLastIns
(
)
)
;
MOZ_ASSERT
(
pred
-
>
stackDepth
(
)
=
=
entryResumePoint
(
)
-
>
stackDepth
(
)
)
;
MOZ_ASSERT
(
kind_
=
=
PENDING_LOOP_HEADER
)
;
bool
hadTypeChange
=
false
;
if
(
!
inheritPhisFromBackedge
(
alloc
pred
&
hadTypeChange
)
)
{
return
AbortReason
:
:
Alloc
;
}
if
(
hadTypeChange
)
{
return
AbortReason
:
:
Disable
;
}
kind_
=
LOOP_HEADER
;
if
(
!
predecessors_
.
append
(
pred
)
)
{
return
AbortReason
:
:
Alloc
;
}
return
AbortReason
:
:
NoAbort
;
}
bool
MBasicBlock
:
:
setBackedgeWasm
(
MBasicBlock
*
pred
size_t
paramCount
)
{
MOZ_ASSERT
(
hasLastIns
(
)
)
;
MOZ_ASSERT
(
pred
-
>
hasLastIns
(
)
)
;
MOZ_ASSERT
(
stackDepth
(
)
+
paramCount
=
=
pred
-
>
stackDepth
(
)
)
;
MOZ_ASSERT
(
kind_
=
=
PENDING_LOOP_HEADER
)
;
size_t
slot
=
0
;
for
(
MPhiIterator
phi
=
phisBegin
(
)
;
phi
!
=
phisEnd
(
)
;
phi
+
+
slot
+
+
)
{
MPhi
*
entryDef
=
*
phi
;
MDefinition
*
exitDef
=
pred
-
>
getSlot
(
slot
)
;
MOZ_ASSERT
(
entryDef
-
>
block
(
)
=
=
this
)
;
MOZ_ASSERT
(
entryDef
-
>
type
(
)
=
=
exitDef
-
>
type
(
)
)
;
MOZ_ASSERT
(
entryDef
-
>
type
(
)
!
=
MIRType
:
:
Value
)
;
if
(
entryDef
=
=
exitDef
)
{
exitDef
=
entryDef
-
>
getOperand
(
0
)
;
}
MOZ_ASSERT
(
phi
-
>
numOperands
(
)
=
=
1
)
;
entryDef
-
>
addInlineInput
(
exitDef
)
;
if
(
slot
<
stackDepth
(
)
)
{
setSlot
(
slot
entryDef
)
;
}
}
kind_
=
LOOP_HEADER
;
return
predecessors_
.
append
(
pred
)
;
}
void
MBasicBlock
:
:
clearLoopHeader
(
)
{
MOZ_ASSERT
(
isLoopHeader
(
)
)
;
kind_
=
NORMAL
;
}
void
MBasicBlock
:
:
setLoopHeader
(
MBasicBlock
*
newBackedge
)
{
MOZ_ASSERT
(
!
isLoopHeader
(
)
)
;
kind_
=
LOOP_HEADER
;
size_t
numPreds
=
numPredecessors
(
)
;
MOZ_ASSERT
(
numPreds
!
=
0
)
;
size_t
lastIndex
=
numPreds
-
1
;
size_t
oldIndex
=
0
;
for
(
;
;
+
+
oldIndex
)
{
MOZ_ASSERT
(
oldIndex
<
numPreds
)
;
MBasicBlock
*
pred
=
getPredecessor
(
oldIndex
)
;
if
(
pred
=
=
newBackedge
)
{
break
;
}
}
std
:
:
swap
(
predecessors_
[
oldIndex
]
predecessors_
[
lastIndex
]
)
;
if
(
!
phisEmpty
(
)
)
{
getPredecessor
(
oldIndex
)
-
>
setSuccessorWithPhis
(
this
oldIndex
)
;
getPredecessor
(
lastIndex
)
-
>
setSuccessorWithPhis
(
this
lastIndex
)
;
for
(
MPhiIterator
iter
(
phisBegin
(
)
)
end
(
phisEnd
(
)
)
;
iter
!
=
end
;
+
+
iter
)
{
MPhi
*
phi
=
*
iter
;
MDefinition
*
last
=
phi
-
>
getOperand
(
oldIndex
)
;
MDefinition
*
old
=
phi
-
>
getOperand
(
lastIndex
)
;
phi
-
>
replaceOperand
(
oldIndex
old
)
;
phi
-
>
replaceOperand
(
lastIndex
last
)
;
}
}
MOZ_ASSERT
(
newBackedge
-
>
loopHeaderOfBackedge
(
)
=
=
this
)
;
MOZ_ASSERT
(
backedge
(
)
=
=
newBackedge
)
;
}
size_t
MBasicBlock
:
:
getSuccessorIndex
(
MBasicBlock
*
block
)
const
{
MOZ_ASSERT
(
lastIns
(
)
)
;
for
(
size_t
i
=
0
;
i
<
numSuccessors
(
)
;
i
+
+
)
{
if
(
getSuccessor
(
i
)
=
=
block
)
{
return
i
;
}
}
MOZ_CRASH
(
"
Invalid
successor
"
)
;
}
size_t
MBasicBlock
:
:
getPredecessorIndex
(
MBasicBlock
*
block
)
const
{
for
(
size_t
i
=
0
e
=
numPredecessors
(
)
;
i
<
e
;
+
+
i
)
{
if
(
getPredecessor
(
i
)
=
=
block
)
{
return
i
;
}
}
MOZ_CRASH
(
"
Invalid
predecessor
"
)
;
}
void
MBasicBlock
:
:
replaceSuccessor
(
size_t
pos
MBasicBlock
*
split
)
{
MOZ_ASSERT
(
lastIns
(
)
)
;
MOZ_ASSERT_IF
(
successorWithPhis_
successorWithPhis_
!
=
getSuccessor
(
pos
)
)
;
lastIns
(
)
-
>
replaceSuccessor
(
pos
split
)
;
}
void
MBasicBlock
:
:
replacePredecessor
(
MBasicBlock
*
old
MBasicBlock
*
split
)
{
for
(
size_t
i
=
0
;
i
<
numPredecessors
(
)
;
i
+
+
)
{
if
(
getPredecessor
(
i
)
=
=
old
)
{
predecessors_
[
i
]
=
split
;
#
ifdef
DEBUG
for
(
size_t
j
=
i
;
j
<
numPredecessors
(
)
;
j
+
+
)
{
MOZ_ASSERT
(
predecessors_
[
j
]
!
=
old
)
;
}
#
endif
return
;
}
}
MOZ_CRASH
(
"
predecessor
was
not
found
"
)
;
}
void
MBasicBlock
:
:
clearDominatorInfo
(
)
{
setImmediateDominator
(
nullptr
)
;
immediatelyDominated_
.
clear
(
)
;
numDominated_
=
0
;
}
void
MBasicBlock
:
:
removePredecessorWithoutPhiOperands
(
MBasicBlock
*
pred
size_t
predIndex
)
{
if
(
isLoopHeader
(
)
&
&
hasUniqueBackedge
(
)
&
&
backedge
(
)
=
=
pred
)
{
clearLoopHeader
(
)
;
}
if
(
pred
-
>
successorWithPhis
(
)
)
{
MOZ_ASSERT
(
pred
-
>
positionInPhiSuccessor
(
)
=
=
predIndex
)
;
pred
-
>
clearSuccessorWithPhis
(
)
;
for
(
size_t
j
=
predIndex
+
1
;
j
<
numPredecessors
(
)
;
j
+
+
)
{
getPredecessor
(
j
)
-
>
setSuccessorWithPhis
(
this
j
-
1
)
;
}
}
predecessors_
.
erase
(
predecessors_
.
begin
(
)
+
predIndex
)
;
}
void
MBasicBlock
:
:
removePredecessor
(
MBasicBlock
*
pred
)
{
size_t
predIndex
=
getPredecessorIndex
(
pred
)
;
for
(
MPhiIterator
iter
(
phisBegin
(
)
)
end
(
phisEnd
(
)
)
;
iter
!
=
end
;
+
+
iter
)
{
iter
-
>
removeOperand
(
predIndex
)
;
}
removePredecessorWithoutPhiOperands
(
pred
predIndex
)
;
}
void
MBasicBlock
:
:
inheritPhis
(
MBasicBlock
*
header
)
{
MResumePoint
*
headerRp
=
header
-
>
entryResumePoint
(
)
;
size_t
stackDepth
=
headerRp
-
>
stackDepth
(
)
;
for
(
size_t
slot
=
0
;
slot
<
stackDepth
;
slot
+
+
)
{
MDefinition
*
exitDef
=
getSlot
(
slot
)
;
MDefinition
*
loopDef
=
headerRp
-
>
getOperand
(
slot
)
;
if
(
loopDef
-
>
block
(
)
!
=
header
)
{
MOZ_ASSERT
(
loopDef
-
>
block
(
)
-
>
id
(
)
<
header
-
>
id
(
)
)
;
MOZ_ASSERT
(
loopDef
=
=
exitDef
)
;
continue
;
}
MPhi
*
phi
=
loopDef
-
>
toPhi
(
)
;
MOZ_ASSERT
(
phi
-
>
numOperands
(
)
=
=
2
)
;
MDefinition
*
entryDef
=
phi
-
>
getOperand
(
0
)
;
if
(
entryDef
!
=
exitDef
)
{
continue
;
}
setSlot
(
slot
phi
)
;
}
}
bool
MBasicBlock
:
:
inheritPhisFromBackedge
(
TempAllocator
&
alloc
MBasicBlock
*
backedge
bool
*
hadTypeChange
)
{
MOZ_ASSERT
(
kind_
=
=
PENDING_LOOP_HEADER
)
;
size_t
stackDepth
=
entryResumePoint
(
)
-
>
stackDepth
(
)
;
for
(
size_t
slot
=
0
;
slot
<
stackDepth
;
slot
+
+
)
{
MDefinition
*
exitDef
=
backedge
-
>
getSlot
(
slot
)
;
MDefinition
*
loopDef
=
entryResumePoint
(
)
-
>
getOperand
(
slot
)
;
if
(
loopDef
-
>
block
(
)
!
=
this
)
{
MOZ_ASSERT
(
loopDef
-
>
block
(
)
-
>
id
(
)
<
id
(
)
)
;
MOZ_ASSERT
(
loopDef
=
=
exitDef
)
;
continue
;
}
MPhi
*
entryDef
=
loopDef
-
>
toPhi
(
)
;
MOZ_ASSERT
(
entryDef
-
>
block
(
)
=
=
this
)
;
if
(
entryDef
=
=
exitDef
)
{
exitDef
=
entryDef
-
>
getOperand
(
0
)
;
}
bool
typeChange
=
false
;
if
(
!
entryDef
-
>
addInputSlow
(
exitDef
)
)
{
return
false
;
}
if
(
!
entryDef
-
>
checkForTypeChange
(
alloc
exitDef
&
typeChange
)
)
{
return
false
;
}
*
hadTypeChange
|
=
typeChange
;
}
return
true
;
}
bool
MBasicBlock
:
:
specializePhis
(
TempAllocator
&
alloc
)
{
if
(
specialized_
)
{
return
true
;
}
specialized_
=
true
;
for
(
MPhiIterator
iter
=
phisBegin
(
)
;
iter
!
=
phisEnd
(
)
;
iter
+
+
)
{
MPhi
*
phi
=
*
iter
;
if
(
!
phi
-
>
specializeType
(
alloc
)
)
{
return
false
;
}
}
return
true
;
}
MTest
*
MBasicBlock
:
:
immediateDominatorBranch
(
BranchDirection
*
pdirection
)
{
*
pdirection
=
FALSE_BRANCH
;
if
(
numPredecessors
(
)
!
=
1
)
{
return
nullptr
;
}
MBasicBlock
*
dom
=
immediateDominator
(
)
;
if
(
dom
!
=
getPredecessor
(
0
)
)
{
return
nullptr
;
}
MInstruction
*
ins
=
dom
-
>
lastIns
(
)
;
if
(
ins
-
>
isTest
(
)
)
{
MTest
*
test
=
ins
-
>
toTest
(
)
;
MOZ_ASSERT
(
test
-
>
ifTrue
(
)
=
=
this
|
|
test
-
>
ifFalse
(
)
=
=
this
)
;
if
(
test
-
>
ifTrue
(
)
=
=
this
&
&
test
-
>
ifFalse
(
)
=
=
this
)
{
return
nullptr
;
}
*
pdirection
=
(
test
-
>
ifTrue
(
)
=
=
this
)
?
TRUE_BRANCH
:
FALSE_BRANCH
;
return
test
;
}
return
nullptr
;
}
MBasicBlock
:
:
BackupPoint
:
:
BackupPoint
(
MBasicBlock
*
current
)
:
current_
(
current
)
lastIns_
(
current
-
>
hasAnyIns
(
)
?
*
current
-
>
rbegin
(
)
:
nullptr
)
stackPosition_
(
current
-
>
stackDepth
(
)
)
slots_
(
)
#
ifdef
DEBUG
lastPhi_
(
!
current
-
>
phisEmpty
(
)
?
*
current
-
>
phis_
.
rbegin
(
)
:
nullptr
)
predecessorsCheckSum_
(
computePredecessorsCheckSum
(
current
)
)
instructionsCheckSum_
(
computeInstructionsCheckSum
(
current
)
)
id_
(
current
-
>
id
(
)
)
callerResumePoint_
(
current
-
>
callerResumePoint
(
)
)
entryResumePoint_
(
current
-
>
entryResumePoint
(
)
)
#
endif
{
MOZ_ASSERT
(
current
-
>
outerResumePoint_
=
=
nullptr
)
;
}
bool
MBasicBlock
:
:
BackupPoint
:
:
init
(
TempAllocator
&
alloc
)
{
if
(
!
slots_
.
init
(
alloc
stackPosition_
)
)
{
return
false
;
}
for
(
size_t
i
=
0
e
=
stackPosition_
;
i
<
e
;
+
+
i
)
{
slots_
[
i
]
=
current_
-
>
slots_
[
i
]
;
}
return
true
;
}
#
ifdef
DEBUG
uintptr_t
MBasicBlock
:
:
BackupPoint
:
:
computePredecessorsCheckSum
(
MBasicBlock
*
block
)
{
uintptr_t
hash
=
0
;
for
(
size_t
i
=
0
;
i
<
block
-
>
numPredecessors
(
)
;
i
+
+
)
{
MBasicBlock
*
pred
=
block
-
>
getPredecessor
(
i
)
;
uintptr_t
data
=
reinterpret_cast
<
uintptr_t
>
(
pred
)
;
hash
=
data
+
(
hash
<
<
6
)
+
(
hash
<
<
16
)
-
hash
;
}
return
hash
;
}
HashNumber
MBasicBlock
:
:
BackupPoint
:
:
computeInstructionsCheckSum
(
MBasicBlock
*
block
)
{
HashNumber
h
=
0
;
MOZ_ASSERT_IF
(
lastIns_
lastIns_
-
>
block
(
)
=
=
block
)
;
for
(
MInstructionIterator
ins
=
block
-
>
begin
(
)
;
ins
!
=
block
-
>
end
(
)
;
+
+
ins
)
{
h
+
=
ins
-
>
valueHash
(
)
;
h
+
=
h
<
<
10
;
h
^
=
h
>
>
6
;
}
return
h
;
}
#
endif
MBasicBlock
*
MBasicBlock
:
:
BackupPoint
:
:
restore
(
)
{
MOZ_ASSERT
(
(
!
current_
-
>
phisEmpty
(
)
?
*
current_
-
>
phis_
.
rbegin
(
)
:
nullptr
)
=
=
lastPhi_
)
;
MOZ_ASSERT_IF
(
lastIns_
lastIns_
-
>
block
(
)
=
=
current_
)
;
MOZ_ASSERT_IF
(
lastIns_
!
lastIns_
-
>
isDiscarded
(
)
)
;
if
(
!
current_
-
>
graph
(
)
.
removeSuccessorBlocks
(
current_
)
)
{
return
nullptr
;
}
MInstructionIterator
lastIns
(
lastIns_
?
+
+
(
current_
-
>
begin
(
lastIns_
)
)
:
current_
-
>
begin
(
)
)
;
current_
-
>
discardAllInstructionsStartingAt
(
lastIns
)
;
current_
-
>
clearOuterResumePoint
(
)
;
MOZ_ASSERT
(
current_
-
>
slots_
.
length
(
)
>
=
stackPosition_
)
;
if
(
current_
-
>
stackPosition_
!
=
stackPosition_
)
{
current_
-
>
setStackDepth
(
stackPosition_
)
;
}
for
(
size_t
i
=
0
e
=
stackPosition_
;
i
<
e
;
+
+
i
)
{
current_
-
>
slots_
[
i
]
=
slots_
[
i
]
;
}
MOZ_ASSERT
(
current_
-
>
id
(
)
=
=
id_
)
;
MOZ_ASSERT
(
predecessorsCheckSum_
=
=
computePredecessorsCheckSum
(
current_
)
)
;
MOZ_ASSERT
(
instructionsCheckSum_
=
=
computeInstructionsCheckSum
(
current_
)
)
;
MOZ_ASSERT
(
current_
-
>
callerResumePoint
(
)
=
=
callerResumePoint_
)
;
MOZ_ASSERT
(
current_
-
>
entryResumePoint
(
)
=
=
entryResumePoint_
)
;
return
current_
;
}
void
MBasicBlock
:
:
dumpStack
(
GenericPrinter
&
out
)
{
#
ifdef
DEBUG
out
.
printf
(
"
%
-
3s
%
-
16s
%
-
6s
%
-
10s
\
n
"
"
#
"
"
name
"
"
copyOf
"
"
first
/
next
"
)
;
out
.
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
for
(
uint32_t
i
=
0
;
i
<
stackPosition_
;
i
+
+
)
{
out
.
printf
(
"
%
-
3u
"
i
)
;
out
.
printf
(
"
%
-
16p
\
n
"
(
void
*
)
slots_
[
i
]
)
;
}
#
endif
}
void
MBasicBlock
:
:
dumpStack
(
)
{
Fprinter
out
(
stderr
)
;
dumpStack
(
out
)
;
out
.
finish
(
)
;
}
void
MIRGraph
:
:
dump
(
GenericPrinter
&
out
)
{
#
ifdef
JS_JITSPEW
for
(
MBasicBlockIterator
iter
(
begin
(
)
)
;
iter
!
=
end
(
)
;
iter
+
+
)
{
iter
-
>
dump
(
out
)
;
out
.
printf
(
"
\
n
"
)
;
}
#
endif
}
void
MIRGraph
:
:
dump
(
)
{
Fprinter
out
(
stderr
)
;
dump
(
out
)
;
out
.
finish
(
)
;
}
void
MBasicBlock
:
:
dump
(
GenericPrinter
&
out
)
{
#
ifdef
JS_JITSPEW
out
.
printf
(
"
block
%
u
:
%
s
%
s
%
s
\
n
"
id
(
)
isLoopHeader
(
)
?
"
(
loop
header
)
"
:
"
"
unreachable
(
)
?
"
(
unreachable
)
"
:
"
"
isMarked
(
)
?
"
(
marked
)
"
:
"
"
)
;
if
(
MResumePoint
*
resume
=
entryResumePoint
(
)
)
{
resume
-
>
dump
(
out
)
;
}
for
(
MPhiIterator
iter
(
phisBegin
(
)
)
;
iter
!
=
phisEnd
(
)
;
iter
+
+
)
{
iter
-
>
dump
(
out
)
;
}
for
(
MInstructionIterator
iter
(
begin
(
)
)
;
iter
!
=
end
(
)
;
iter
+
+
)
{
iter
-
>
dump
(
out
)
;
}
#
endif
}
void
MBasicBlock
:
:
dump
(
)
{
Fprinter
out
(
stderr
)
;
dump
(
out
)
;
out
.
finish
(
)
;
}
