#
ifndef
jit_WarpCacheIRTranspiler_h
#
define
jit_WarpCacheIRTranspiler_h
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Vector
.
h
"
namespace
js
{
namespace
jit
{
class
MBasicBlock
;
class
MDefinition
;
class
MInstruction
;
class
MIRGenerator
;
class
WarpCacheIR
;
using
MDefinitionStackVector
=
Vector
<
MDefinition
*
8
SystemAllocPolicy
>
;
#
define
WARP_CACHE_IR_OPS
(
_
)
\
_
(
GuardShape
)
\
_
(
LoadEnclosingEnvironment
)
\
_
(
LoadDynamicSlotResult
)
\
_
(
LoadEnvironmentFixedSlotResult
)
\
_
(
LoadEnvironmentDynamicSlotResult
)
\
_
(
TypeMonitorResult
)
struct
MOZ_STACK_CLASS
TranspilerOutput
{
MDefinition
*
result
=
nullptr
;
TranspilerOutput
(
)
=
default
;
TranspilerOutput
(
const
TranspilerOutput
&
)
=
delete
;
void
operator
=
(
const
TranspilerOutput
&
)
=
delete
;
}
;
MOZ_MUST_USE
bool
TranspileCacheIRToMIR
(
MIRGenerator
&
mirGen
MBasicBlock
*
current
const
WarpCacheIR
*
snapshot
const
MDefinitionStackVector
&
inputs
TranspilerOutput
&
output
)
;
}
}
#
endif
