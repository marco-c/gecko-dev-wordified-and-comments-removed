#
ifndef
jit_ShuffleAnalysis_h
#
define
jit_ShuffleAnalysis_h
#
include
"
jit
/
IonTypes
.
h
"
namespace
js
{
namespace
jit
{
class
MDefinition
;
enum
class
SimdPermuteOp
{
BROADCAST_8x16
BROADCAST_16x8
MOVE
PERMUTE_8x16
PERMUTE_16x8
PERMUTE_32x4
ROTATE_RIGHT_8x16
SHIFT_RIGHT_8x16
SHIFT_LEFT_8x16
}
;
enum
class
SimdShuffleOp
{
BLEND_8x16
BLEND_16x8
CONCAT_RIGHT_SHIFT_8x16
INTERLEAVE_HIGH_8x16
INTERLEAVE_HIGH_16x8
INTERLEAVE_HIGH_32x4
INTERLEAVE_HIGH_64x2
INTERLEAVE_LOW_8x16
INTERLEAVE_LOW_16x8
INTERLEAVE_LOW_32x4
INTERLEAVE_LOW_64x2
SHUFFLE_BLEND_8x16
}
;
struct
SimdShuffle
{
enum
class
Operand
{
BOTH
BOTH_SWAPPED
LEFT
RIGHT
}
;
Operand
opd
;
SimdConstant
control
;
mozilla
:
:
Maybe
<
SimdPermuteOp
>
permuteOp
;
mozilla
:
:
Maybe
<
SimdShuffleOp
>
shuffleOp
;
static
SimdShuffle
permute
(
Operand
opd
SimdConstant
control
SimdPermuteOp
op
)
{
MOZ_ASSERT
(
opd
=
=
Operand
:
:
LEFT
|
|
opd
=
=
Operand
:
:
RIGHT
)
;
SimdShuffle
s
{
opd
control
mozilla
:
:
Some
(
op
)
mozilla
:
:
Nothing
(
)
}
;
return
s
;
}
static
SimdShuffle
shuffle
(
Operand
opd
SimdConstant
control
SimdShuffleOp
op
)
{
MOZ_ASSERT
(
opd
=
=
Operand
:
:
BOTH
|
|
opd
=
=
Operand
:
:
BOTH_SWAPPED
)
;
SimdShuffle
s
{
opd
control
mozilla
:
:
Nothing
(
)
mozilla
:
:
Some
(
op
)
}
;
return
s
;
}
}
;
#
ifdef
ENABLE_WASM_SIMD
SimdShuffle
AnalyzeSimdShuffle
(
SimdConstant
control
MDefinition
*
lhs
MDefinition
*
rhs
)
;
#
endif
}
}
#
endif
