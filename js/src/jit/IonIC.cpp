#
include
"
jit
/
IonIC
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
SizePrintfMacros
.
h
"
#
include
"
jit
/
CacheIRCompiler
.
h
"
#
include
"
jit
/
Linker
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
#
include
"
vm
/
Interpreter
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
using
mozilla
:
:
Maybe
;
void
IonIC
:
:
updateBaseAddress
(
JitCode
*
code
MacroAssembler
&
masm
)
{
fallbackLabel_
.
repoint
(
code
&
masm
)
;
rejoinLabel_
.
repoint
(
code
&
masm
)
;
codeRaw_
=
fallbackLabel_
.
raw
(
)
;
}
Register
IonIC
:
:
scratchRegisterForEntryJump
(
)
{
switch
(
kind_
)
{
case
CacheKind
:
:
GetProp
:
case
CacheKind
:
:
GetElem
:
{
Register
temp
=
asGetPropertyIC
(
)
-
>
maybeTemp
(
)
;
if
(
temp
!
=
InvalidReg
)
return
temp
;
TypedOrValueRegister
output
=
asGetPropertyIC
(
)
-
>
output
(
)
;
return
output
.
hasValue
(
)
?
output
.
valueReg
(
)
.
scratchReg
(
)
:
output
.
typedReg
(
)
.
gpr
(
)
;
}
case
CacheKind
:
:
GetName
:
MOZ_CRASH
(
"
Baseline
-
specific
for
now
"
)
;
}
MOZ_CRASH
(
"
Invalid
kind
"
)
;
}
void
IonIC
:
:
reset
(
Zone
*
zone
)
{
if
(
firstStub_
&
&
zone
-
>
needsIncrementalBarrier
(
)
)
{
trace
(
zone
-
>
barrierTracer
(
)
)
;
}
#
ifdef
JS_CRASH_DIAGNOSTICS
IonICStub
*
stub
=
firstStub_
;
while
(
stub
)
{
IonICStub
*
next
=
stub
-
>
next
(
)
;
stub
-
>
poison
(
)
;
stub
=
next
;
}
#
endif
firstStub_
=
nullptr
;
codeRaw_
=
fallbackLabel_
.
raw
(
)
;
numStubs_
=
0
;
}
void
IonIC
:
:
trace
(
JSTracer
*
trc
)
{
if
(
script_
)
TraceManuallyBarrieredEdge
(
trc
&
script_
"
IonIC
:
:
script_
"
)
;
uint8_t
*
nextCodeRaw
=
codeRaw_
;
for
(
IonICStub
*
stub
=
firstStub_
;
stub
;
stub
=
stub
-
>
next
(
)
)
{
JitCode
*
code
=
JitCode
:
:
FromExecutable
(
nextCodeRaw
)
;
TraceManuallyBarrieredEdge
(
trc
&
code
"
ion
-
ic
-
code
"
)
;
TraceCacheIRStub
(
trc
stub
stub
-
>
stubInfo
(
)
)
;
nextCodeRaw
=
stub
-
>
nextCodeRaw
(
)
;
}
MOZ_ASSERT
(
nextCodeRaw
=
=
fallbackLabel_
.
raw
(
)
)
;
}
void
IonGetPropertyIC
:
:
maybeDisable
(
Zone
*
zone
bool
attached
)
{
if
(
attached
)
{
failedUpdates_
=
0
;
return
;
}
if
(
!
canAttachStub
(
)
&
&
kind
(
)
=
=
CacheKind
:
:
GetProp
)
{
return
;
}
if
(
+
+
failedUpdates_
>
MAX_FAILED_UPDATES
)
{
JitSpew
(
JitSpew_IonIC
"
Disable
inline
cache
"
)
;
disable
(
zone
)
;
}
}
bool
IonGetPropertyIC
:
:
update
(
JSContext
*
cx
HandleScript
outerScript
IonGetPropertyIC
*
ic
HandleObject
obj
HandleValue
idVal
MutableHandleValue
res
)
{
AutoDetectInvalidation
adi
(
cx
res
outerScript
-
>
ionScript
(
)
)
;
if
(
ic
-
>
idempotent
(
)
)
adi
.
disable
(
)
;
bool
attached
=
false
;
if
(
!
JitOptions
.
disableCacheIR
&
&
!
ic
-
>
disabled
(
)
)
{
if
(
ic
-
>
canAttachStub
(
)
)
{
jsbytecode
*
pc
=
ic
-
>
idempotent
(
)
?
nullptr
:
ic
-
>
pc
(
)
;
RootedValue
objVal
(
cx
ObjectValue
(
*
obj
)
)
;
bool
isTemporarilyUnoptimizable
;
GetPropIRGenerator
gen
(
cx
pc
ic
-
>
kind
(
)
ICStubEngine
:
:
IonIC
&
isTemporarilyUnoptimizable
objVal
idVal
)
;
if
(
ic
-
>
idempotent
(
)
?
gen
.
tryAttachIdempotentStub
(
)
:
gen
.
tryAttachStub
(
)
)
{
attached
=
ic
-
>
attachCacheIRStub
(
cx
gen
.
writerRef
(
)
gen
.
cacheKind
(
)
outerScript
)
;
}
}
ic
-
>
maybeDisable
(
cx
-
>
zone
(
)
attached
)
;
}
if
(
!
attached
&
&
ic
-
>
idempotent
(
)
)
{
JitSpew
(
JitSpew_IonIC
"
Invalidating
from
idempotent
cache
%
s
:
%
"
PRIuSIZE
outerScript
-
>
filename
(
)
outerScript
-
>
lineno
(
)
)
;
outerScript
-
>
setInvalidatedIdempotentCache
(
)
;
if
(
outerScript
-
>
hasIonScript
(
)
)
Invalidate
(
cx
outerScript
)
;
}
if
(
ic
-
>
kind
(
)
=
=
CacheKind
:
:
GetProp
)
{
if
(
!
GetProperty
(
cx
obj
obj
idVal
.
toString
(
)
-
>
asAtom
(
)
.
asPropertyName
(
)
res
)
)
return
false
;
}
else
{
MOZ_ASSERT
(
ic
-
>
kind
(
)
=
=
CacheKind
:
:
GetElem
)
;
if
(
!
GetObjectElementOperation
(
cx
JSOp
(
*
ic
-
>
pc
(
)
)
obj
obj
idVal
res
)
)
return
false
;
}
if
(
!
ic
-
>
idempotent
(
)
)
{
if
(
!
ic
-
>
monitoredResult
(
)
)
TypeScript
:
:
Monitor
(
cx
ic
-
>
script
(
)
ic
-
>
pc
(
)
res
)
;
}
return
true
;
}
uint8_t
*
IonICStub
:
:
stubDataStart
(
)
{
return
reinterpret_cast
<
uint8_t
*
>
(
this
)
+
stubInfo_
-
>
stubDataOffset
(
)
;
}
void
IonIC
:
:
attachStub
(
IonICStub
*
newStub
JitCode
*
code
)
{
MOZ_ASSERT
(
canAttachStub
(
)
)
;
MOZ_ASSERT
(
newStub
)
;
MOZ_ASSERT
(
code
)
;
if
(
firstStub_
)
{
IonICStub
*
last
=
firstStub_
;
while
(
IonICStub
*
next
=
last
-
>
next
(
)
)
last
=
next
;
last
-
>
setNext
(
newStub
code
)
;
}
else
{
firstStub_
=
newStub
;
codeRaw_
=
code
-
>
raw
(
)
;
}
numStubs_
+
+
;
}
