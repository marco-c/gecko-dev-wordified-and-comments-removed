#
include
"
jit
/
TrampolineNatives
.
h
"
#
include
"
jit
/
CalleeToken
.
h
"
#
include
"
jit
/
Ion
.
h
"
#
include
"
jit
/
JitCommon
.
h
"
#
include
"
jit
/
JitRuntime
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jit
/
PerfSpewer
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
experimental
/
JitInfo
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
#
include
"
vm
/
Activation
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
#
define
ADD_NATIVE
(
native
)
\
const
JSJitInfo
js
:
:
jit
:
:
JitInfo_
#
#
native
{
\
{
nullptr
}
\
{
uint16_t
(
TrampolineNative
:
:
native
)
}
\
{
0
}
\
JSJitInfo
:
:
TrampolineNative
}
;
TRAMPOLINE_NATIVE_LIST
(
ADD_NATIVE
)
#
undef
ADD_NATIVE
void
js
:
:
jit
:
:
SetTrampolineNativeJitEntry
(
JSContext
*
cx
JSFunction
*
fun
TrampolineNative
native
)
{
if
(
!
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
)
{
return
;
}
void
*
*
entry
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
trampolineNativeJitEntry
(
native
)
;
MOZ_ASSERT
(
entry
)
;
MOZ_ASSERT
(
*
entry
)
;
fun
-
>
setTrampolineNativeJitEntry
(
entry
)
;
}
uint32_t
JitRuntime
:
:
generateArraySortTrampoline
(
MacroAssembler
&
masm
)
{
AutoCreatedBy
acb
(
masm
"
JitRuntime
:
:
generateArraySortTrampoline
"
)
;
const
uint32_t
offset
=
startTrampolineCode
(
masm
)
;
masm
.
assumeUnreachable
(
"
NYI
"
)
;
return
offset
;
}
void
JitRuntime
:
:
generateTrampolineNatives
(
MacroAssembler
&
masm
TrampolineNativeJitEntryOffsets
&
offsets
PerfSpewerRangeRecorder
&
rangeRecorder
)
{
offsets
[
TrampolineNative
:
:
ArraySort
]
=
generateArraySortTrampoline
(
masm
)
;
rangeRecorder
.
recordOffset
(
"
Trampoline
:
ArraySort
"
)
;
}
bool
jit
:
:
CallTrampolineNativeJitCode
(
JSContext
*
cx
TrampolineNative
native
CallArgs
&
args
)
{
AutoCheckRecursionLimit
recursion
(
cx
)
;
if
(
!
recursion
.
check
(
cx
)
)
{
return
false
;
}
MOZ_ASSERT
(
!
args
.
isConstructing
(
)
)
;
CalleeToken
calleeToken
=
CalleeToToken
(
&
args
.
callee
(
)
.
as
<
JSFunction
>
(
)
false
)
;
Value
*
maxArgv
=
args
.
array
(
)
-
1
;
size_t
maxArgc
=
args
.
length
(
)
+
1
;
Rooted
<
Value
>
result
(
cx
Int32Value
(
args
.
length
(
)
)
)
;
AssertRealmUnchanged
aru
(
cx
)
;
ActivationEntryMonitor
entryMonitor
(
cx
calleeToken
)
;
JitActivation
activation
(
cx
)
;
EnterJitCode
enter
=
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
enterJit
(
)
;
void
*
code
=
*
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
trampolineNativeJitEntry
(
native
)
;
CALL_GENERATED_CODE
(
enter
code
maxArgc
maxArgv
nullptr
calleeToken
nullptr
0
result
.
address
(
)
)
;
MOZ_ASSERT
(
!
cx
-
>
isInUnsafeRegion
(
)
)
;
cx
-
>
runtime
(
)
-
>
jitRuntime
(
)
-
>
freeIonOsrTempData
(
)
;
if
(
result
.
isMagic
(
)
)
{
MOZ_ASSERT
(
result
.
isMagic
(
JS_ION_ERROR
)
)
;
return
false
;
}
args
.
rval
(
)
.
set
(
result
)
;
return
true
;
}
