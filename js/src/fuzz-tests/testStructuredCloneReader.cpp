#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
fuzz
-
tests
/
tests
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
extern
JS
:
:
PersistentRootedObject
gGlobal
;
extern
JSContext
*
gCx
;
static
int
testStructuredCloneReaderInit
(
int
*
argc
char
*
*
*
argv
)
{
return
0
;
}
static
int
testStructuredCloneReaderFuzz
(
const
uint8_t
*
buf
size_t
size
)
{
auto
gcGuard
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
JS
:
:
PrepareForFullGC
(
gCx
)
;
JS
:
:
GCForReason
(
gCx
GC_NORMAL
JS
:
:
gcreason
:
:
API
)
;
}
)
;
if
(
!
size
)
return
0
;
const
size_t
kSegmentAlignment
=
8
;
size_t
buf_size
=
JS_ROUNDUP
(
size
kSegmentAlignment
)
;
auto
clonebuf
=
MakeUnique
<
JSStructuredCloneData
>
(
0
0
buf_size
)
;
if
(
!
clonebuf
|
|
!
clonebuf
-
>
Init
(
buf_size
buf_size
)
)
{
ReportOutOfMemory
(
gCx
)
;
return
0
;
}
memset
(
clonebuf
-
>
Start
(
)
'
\
0
'
buf_size
)
;
js_memcpy
(
clonebuf
-
>
Start
(
)
buf
size
)
;
JS
:
:
StructuredCloneScope
scope
=
JS
:
:
StructuredCloneScope
:
:
DifferentProcess
;
RootedValue
deserialized
(
gCx
)
;
if
(
!
JS_ReadStructuredClone
(
gCx
*
clonebuf
JS_STRUCTURED_CLONE_VERSION
scope
&
deserialized
nullptr
nullptr
)
)
{
return
0
;
}
mozilla
:
:
Maybe
<
JSAutoStructuredCloneBuffer
>
clonebufOut
;
JS
:
:
CloneDataPolicy
policy
;
clonebufOut
.
emplace
(
scope
nullptr
nullptr
)
;
if
(
!
clonebufOut
-
>
write
(
gCx
deserialized
UndefinedHandleValue
policy
)
)
return
0
;
return
0
;
}
MOZ_FUZZING_INTERFACE_RAW
(
testStructuredCloneReaderInit
testStructuredCloneReaderFuzz
StructuredCloneReader
)
;
