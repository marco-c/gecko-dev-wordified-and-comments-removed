var
fuzzBuf
;
function
timed
(
sec
f
)
{
timeout
(
sec
function
(
)
{
return
false
;
}
)
;
f
(
)
;
timeout
(
-
1
)
;
}
var
parseScriptCpp
=
{
module
:
false
rustFrontend
:
false
}
;
var
parseScriptRust
=
{
module
:
false
rustFrontend
:
true
}
;
var
parseModuleRust
=
{
module
:
true
rustFrontend
:
true
}
;
var
parseModuleCpp
=
{
module
:
true
rustFrontend
:
false
}
;
function
test
(
code
verbose
=
false
)
{
var
isScriptCpp
=
false
isModuleCpp
=
false
isScriptRust
=
false
isModuleRust
=
false
;
try
{
parse
(
code
parseScriptCpp
)
;
isScriptCpp
=
true
;
if
(
verbose
)
{
console
.
log
(
"
Parse
Script
C
+
+
:
succeed
"
)
;
}
}
catch
(
exc
)
{
if
(
verbose
)
{
console
.
log
(
"
Parse
Script
C
+
+
:
fail
"
)
;
}
}
try
{
parse
(
code
parseModuleCpp
)
;
isModuleCpp
=
true
;
if
(
verbose
)
{
console
.
log
(
"
Parse
Module
C
+
+
:
succeed
"
)
;
}
}
catch
(
exc
)
{
if
(
verbose
)
{
console
.
log
(
"
Parse
Module
C
+
+
:
fail
"
)
;
}
}
try
{
parse
(
code
parseScriptRust
)
;
isScriptRust
=
true
;
if
(
verbose
)
{
console
.
log
(
"
Parse
Script
Rust
:
succeed
"
)
;
}
}
catch
(
exc
)
{
if
(
verbose
)
{
console
.
log
(
"
Parse
Script
Rust
:
fail
"
)
;
}
}
try
{
parse
(
code
parseModuleRust
)
;
isModuleRust
=
true
;
if
(
verbose
)
{
console
.
log
(
"
Parse
Module
Rust
:
succeed
"
)
;
}
}
catch
(
exc
)
{
if
(
verbose
)
{
console
.
log
(
"
Parse
Module
Rust
:
fail
"
)
;
}
}
if
(
(
isScriptRust
&
&
!
isScriptCpp
)
|
|
(
isModuleRust
&
&
!
isModuleCpp
)
)
{
crash
(
"
Rust
accept
more
than
C
+
+
"
)
;
}
}
function
JSFuzzIterate
(
)
{
let
code
=
String
.
fromCharCode
(
.
.
.
fuzzBuf
)
;
timed
(
3
_
=
>
test
(
code
)
)
;
}
function
testFile
(
file
)
{
let
content
=
os
.
file
.
readFile
(
file
)
;
test
(
content
true
)
;
}
