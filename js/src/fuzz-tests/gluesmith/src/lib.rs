extern
crate
arbitrary
;
extern
crate
wasm_smith
;
use
arbitrary
:
:
{
Arbitrary
Unstructured
}
;
use
wasm_smith
:
:
Module
;
use
std
:
:
ptr
;
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
gluesmith
(
data
:
*
mut
u8
len
:
usize
out
:
*
mut
u8
maxlen
:
usize
)
-
>
usize
{
let
buf
:
&
[
u8
]
=
std
:
:
slice
:
:
from_raw_parts
(
data
len
)
;
let
mut
u
=
Unstructured
:
:
new
(
buf
)
;
let
module
=
match
Module
:
:
arbitrary
(
&
mut
u
)
{
Ok
(
m
)
=
>
m
Err
(
_e
)
=
>
return
0
}
;
let
wasm_bytes
=
module
.
to_bytes
(
)
;
let
src_len
=
wasm_bytes
.
len
(
)
;
if
src_len
>
maxlen
{
return
0
;
}
let
src_ptr
=
wasm_bytes
.
as_ptr
(
)
;
ptr
:
:
copy_nonoverlapping
(
src_ptr
out
src_len
)
;
return
src_len
;
}
