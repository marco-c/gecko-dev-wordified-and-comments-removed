var
fuzzBuf
;
loadRelativeToScript
(
"
util
/
sanitize
.
js
"
)
;
deterministicgc
(
true
)
;
if
(
typeof
fuzzTimeout
=
=
=
"
undefined
"
)
{
fuzzTimeout
=
1
;
}
function
JSFuzzIterate
(
)
{
try
{
let
code
=
String
.
fromCharCode
(
.
.
.
fuzzBuf
)
;
let
result
=
null
;
let
global
=
newGlobal
(
)
;
sanitizeGlobal
(
global
)
;
evaluate
(
setModuleResolveHook
(
function
(
module
specifier
)
{
throw
"
Module
'
"
+
specifier
+
"
'
not
found
"
;
}
)
;
setModuleResolveHook
=
function
(
)
{
}
;
{
global
:
global
catchTermination
:
true
}
)
;
let
lfStart
=
monotonicNow
(
)
;
timeout
(
fuzzTimeout
function
(
)
{
return
false
;
}
)
;
try
{
result
=
evaluate
(
code
{
global
:
global
catchTermination
:
true
}
)
;
}
catch
(
exc
)
{
print
(
exc
)
;
}
timeout
(
-
1
)
;
let
lfStop
=
monotonicNow
(
)
;
gczeal
(
0
)
;
schedulegc
(
0
)
;
setGCCallback
(
{
action
:
"
majorGC
"
}
)
;
clearSavedFrames
(
)
;
if
(
result
=
=
=
"
terminated
"
|
|
(
lfStop
-
lfStart
>
(
fuzzTimeout
*
1000
+
200
)
)
)
{
return
1
;
}
return
0
;
}
catch
(
exc
)
{
print
(
"
Caught
toplevel
exception
:
"
+
exc
)
;
}
return
1
;
}
