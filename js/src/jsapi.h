#
ifndef
jsapi_h
#
define
jsapi_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
RangedPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
<
iterator
>
#
include
<
stdarg
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
"
jsalloc
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
js
/
CallArgs
.
h
"
#
include
"
js
/
CharacterEncoding
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Principals
.
h
"
#
include
"
js
/
Realm
.
h
"
#
include
"
js
/
RefCounted
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Stream
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
js
/
Vector
.
h
"
namespace
JS
{
class
TwoByteChars
;
#
ifdef
JS_DEBUG
class
JS_PUBLIC_API
(
AutoCheckRequestDepth
)
{
JSContext
*
cx
;
public
:
explicit
AutoCheckRequestDepth
(
JSContext
*
cx
)
;
~
AutoCheckRequestDepth
(
)
;
}
;
#
define
CHECK_REQUEST
(
cx
)
\
JS
:
:
AutoCheckRequestDepth
_autoCheckRequestDepth
(
cx
)
#
else
#
define
CHECK_REQUEST
(
cx
)
\
(
(
void
)
0
)
#
endif
template
<
size_t
N
>
class
MOZ_RAII
AutoValueArray
:
public
AutoGCRooter
{
const
size_t
length_
;
Value
elements_
[
N
]
;
public
:
explicit
AutoValueArray
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
VALARRAY
)
length_
(
N
)
{
mozilla
:
:
PodArrayZero
(
elements_
)
;
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
unsigned
length
(
)
const
{
return
length_
;
}
const
Value
*
begin
(
)
const
{
return
elements_
;
}
Value
*
begin
(
)
{
return
elements_
;
}
HandleValue
operator
[
]
(
unsigned
i
)
const
{
MOZ_ASSERT
(
i
<
N
)
;
return
HandleValue
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
MutableHandleValue
operator
[
]
(
unsigned
i
)
{
MOZ_ASSERT
(
i
<
N
)
;
return
MutableHandleValue
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
template
<
class
T
>
class
MOZ_RAII
AutoVectorRooterBase
:
protected
AutoGCRooter
{
typedef
js
:
:
Vector
<
T
8
>
VectorImpl
;
VectorImpl
vector
;
public
:
explicit
AutoVectorRooterBase
(
JSContext
*
cx
ptrdiff_t
tag
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
tag
)
vector
(
cx
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
typedef
T
ElementType
;
typedef
typename
VectorImpl
:
:
Range
Range
;
size_t
length
(
)
const
{
return
vector
.
length
(
)
;
}
bool
empty
(
)
const
{
return
vector
.
empty
(
)
;
}
MOZ_MUST_USE
bool
append
(
const
T
&
v
)
{
return
vector
.
append
(
v
)
;
}
MOZ_MUST_USE
bool
appendN
(
const
T
&
v
size_t
len
)
{
return
vector
.
appendN
(
v
len
)
;
}
MOZ_MUST_USE
bool
append
(
const
T
*
ptr
size_t
len
)
{
return
vector
.
append
(
ptr
len
)
;
}
MOZ_MUST_USE
bool
appendAll
(
const
AutoVectorRooterBase
<
T
>
&
other
)
{
return
vector
.
appendAll
(
other
.
vector
)
;
}
MOZ_MUST_USE
bool
insert
(
T
*
p
const
T
&
val
)
{
return
vector
.
insert
(
p
val
)
;
}
void
infallibleAppend
(
const
T
&
v
)
{
vector
.
infallibleAppend
(
v
)
;
}
void
popBack
(
)
{
vector
.
popBack
(
)
;
}
T
popCopy
(
)
{
return
vector
.
popCopy
(
)
;
}
MOZ_MUST_USE
bool
growBy
(
size_t
inc
)
{
size_t
oldLength
=
vector
.
length
(
)
;
if
(
!
vector
.
growByUninitialized
(
inc
)
)
return
false
;
makeRangeGCSafe
(
oldLength
)
;
return
true
;
}
MOZ_MUST_USE
bool
resize
(
size_t
newLength
)
{
size_t
oldLength
=
vector
.
length
(
)
;
if
(
newLength
<
=
oldLength
)
{
vector
.
shrinkBy
(
oldLength
-
newLength
)
;
return
true
;
}
if
(
!
vector
.
growByUninitialized
(
newLength
-
oldLength
)
)
return
false
;
makeRangeGCSafe
(
oldLength
)
;
return
true
;
}
void
clear
(
)
{
vector
.
clear
(
)
;
}
MOZ_MUST_USE
bool
reserve
(
size_t
newLength
)
{
return
vector
.
reserve
(
newLength
)
;
}
JS
:
:
MutableHandle
<
T
>
operator
[
]
(
size_t
i
)
{
return
JS
:
:
MutableHandle
<
T
>
:
:
fromMarkedLocation
(
&
vector
[
i
]
)
;
}
JS
:
:
Handle
<
T
>
operator
[
]
(
size_t
i
)
const
{
return
JS
:
:
Handle
<
T
>
:
:
fromMarkedLocation
(
&
vector
[
i
]
)
;
}
const
T
*
begin
(
)
const
{
return
vector
.
begin
(
)
;
}
T
*
begin
(
)
{
return
vector
.
begin
(
)
;
}
const
T
*
end
(
)
const
{
return
vector
.
end
(
)
;
}
T
*
end
(
)
{
return
vector
.
end
(
)
;
}
Range
all
(
)
{
return
vector
.
all
(
)
;
}
const
T
&
back
(
)
const
{
return
vector
.
back
(
)
;
}
friend
void
AutoGCRooter
:
:
trace
(
JSTracer
*
trc
)
;
private
:
void
makeRangeGCSafe
(
size_t
oldLength
)
{
T
*
t
=
vector
.
begin
(
)
+
oldLength
;
for
(
size_t
i
=
oldLength
;
i
<
vector
.
length
(
)
;
+
+
i
+
+
t
)
memset
(
t
0
sizeof
(
T
)
)
;
}
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
template
<
typename
T
>
class
MOZ_RAII
AutoVectorRooter
:
public
AutoVectorRooterBase
<
T
>
{
public
:
explicit
AutoVectorRooter
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoVectorRooterBase
<
T
>
(
cx
this
-
>
GetTag
(
T
(
)
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
AutoValueVector
:
public
Rooted
<
GCVector
<
Value
8
>
>
{
using
Vec
=
GCVector
<
Value
8
>
;
using
Base
=
Rooted
<
Vec
>
;
public
:
explicit
AutoValueVector
(
JSContext
*
cx
)
:
Base
(
cx
Vec
(
cx
)
)
{
}
}
;
class
AutoIdVector
:
public
Rooted
<
GCVector
<
jsid
8
>
>
{
using
Vec
=
GCVector
<
jsid
8
>
;
using
Base
=
Rooted
<
Vec
>
;
public
:
explicit
AutoIdVector
(
JSContext
*
cx
)
:
Base
(
cx
Vec
(
cx
)
)
{
}
bool
appendAll
(
const
AutoIdVector
&
other
)
{
return
this
-
>
Base
:
:
appendAll
(
other
.
get
(
)
)
;
}
}
;
class
AutoObjectVector
:
public
Rooted
<
GCVector
<
JSObject
*
8
>
>
{
using
Vec
=
GCVector
<
JSObject
*
8
>
;
using
Base
=
Rooted
<
Vec
>
;
public
:
explicit
AutoObjectVector
(
JSContext
*
cx
)
:
Base
(
cx
Vec
(
cx
)
)
{
}
}
;
using
ValueVector
=
JS
:
:
GCVector
<
JS
:
:
Value
>
;
using
IdVector
=
JS
:
:
GCVector
<
jsid
>
;
using
ScriptVector
=
JS
:
:
GCVector
<
JSScript
*
>
;
using
StringVector
=
JS
:
:
GCVector
<
JSString
*
>
;
template
<
class
Key
class
Value
>
class
MOZ_RAII
AutoHashMapRooter
:
protected
AutoGCRooter
{
private
:
typedef
js
:
:
HashMap
<
Key
Value
>
HashMapImpl
;
public
:
explicit
AutoHashMapRooter
(
JSContext
*
cx
ptrdiff_t
tag
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
tag
)
map
(
cx
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
typedef
Key
KeyType
;
typedef
Value
ValueType
;
typedef
typename
HashMapImpl
:
:
Entry
Entry
;
typedef
typename
HashMapImpl
:
:
Lookup
Lookup
;
typedef
typename
HashMapImpl
:
:
Ptr
Ptr
;
typedef
typename
HashMapImpl
:
:
AddPtr
AddPtr
;
bool
init
(
uint32_t
len
=
16
)
{
return
map
.
init
(
len
)
;
}
bool
initialized
(
)
const
{
return
map
.
initialized
(
)
;
}
Ptr
lookup
(
const
Lookup
&
l
)
const
{
return
map
.
lookup
(
l
)
;
}
void
remove
(
Ptr
p
)
{
map
.
remove
(
p
)
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
const
{
return
map
.
lookupForAdd
(
l
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
add
(
AddPtr
&
p
const
KeyInput
&
k
const
ValueInput
&
v
)
{
return
map
.
add
(
p
k
v
)
;
}
bool
add
(
AddPtr
&
p
const
Key
&
k
)
{
return
map
.
add
(
p
k
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
relookupOrAdd
(
AddPtr
&
p
const
KeyInput
&
k
const
ValueInput
&
v
)
{
return
map
.
relookupOrAdd
(
p
k
v
)
;
}
typedef
typename
HashMapImpl
:
:
Range
Range
;
Range
all
(
)
const
{
return
map
.
all
(
)
;
}
typedef
typename
HashMapImpl
:
:
Enum
Enum
;
void
clear
(
)
{
map
.
clear
(
)
;
}
void
finish
(
)
{
map
.
finish
(
)
;
}
bool
empty
(
)
const
{
return
map
.
empty
(
)
;
}
uint32_t
count
(
)
const
{
return
map
.
count
(
)
;
}
size_t
capacity
(
)
const
{
return
map
.
capacity
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
map
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
map
.
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
bool
has
(
const
Lookup
&
l
)
const
{
return
map
.
has
(
l
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
put
(
const
KeyInput
&
k
const
ValueInput
&
v
)
{
return
map
.
put
(
k
v
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
putNew
(
const
KeyInput
&
k
const
ValueInput
&
v
)
{
return
map
.
putNew
(
k
v
)
;
}
Ptr
lookupWithDefault
(
const
Key
&
k
const
Value
&
defaultValue
)
{
return
map
.
lookupWithDefault
(
k
defaultValue
)
;
}
void
remove
(
const
Lookup
&
l
)
{
map
.
remove
(
l
)
;
}
friend
void
AutoGCRooter
:
:
trace
(
JSTracer
*
trc
)
;
private
:
AutoHashMapRooter
(
const
AutoHashMapRooter
&
hmr
)
=
delete
;
AutoHashMapRooter
&
operator
=
(
const
AutoHashMapRooter
&
hmr
)
=
delete
;
HashMapImpl
map
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
template
<
class
T
>
class
MOZ_RAII
AutoHashSetRooter
:
protected
AutoGCRooter
{
private
:
typedef
js
:
:
HashSet
<
T
>
HashSetImpl
;
public
:
explicit
AutoHashSetRooter
(
JSContext
*
cx
ptrdiff_t
tag
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
tag
)
set
(
cx
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
typedef
typename
HashSetImpl
:
:
Lookup
Lookup
;
typedef
typename
HashSetImpl
:
:
Ptr
Ptr
;
typedef
typename
HashSetImpl
:
:
AddPtr
AddPtr
;
bool
init
(
uint32_t
len
=
16
)
{
return
set
.
init
(
len
)
;
}
bool
initialized
(
)
const
{
return
set
.
initialized
(
)
;
}
Ptr
lookup
(
const
Lookup
&
l
)
const
{
return
set
.
lookup
(
l
)
;
}
void
remove
(
Ptr
p
)
{
set
.
remove
(
p
)
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
const
{
return
set
.
lookupForAdd
(
l
)
;
}
bool
add
(
AddPtr
&
p
const
T
&
t
)
{
return
set
.
add
(
p
t
)
;
}
bool
relookupOrAdd
(
AddPtr
&
p
const
Lookup
&
l
const
T
&
t
)
{
return
set
.
relookupOrAdd
(
p
l
t
)
;
}
typedef
typename
HashSetImpl
:
:
Range
Range
;
Range
all
(
)
const
{
return
set
.
all
(
)
;
}
typedef
typename
HashSetImpl
:
:
Enum
Enum
;
void
clear
(
)
{
set
.
clear
(
)
;
}
void
finish
(
)
{
set
.
finish
(
)
;
}
bool
empty
(
)
const
{
return
set
.
empty
(
)
;
}
uint32_t
count
(
)
const
{
return
set
.
count
(
)
;
}
size_t
capacity
(
)
const
{
return
set
.
capacity
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
set
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
set
.
sizeOfIncludingThis
(
mallocSizeOf
)
;
}
bool
has
(
const
Lookup
&
l
)
const
{
return
set
.
has
(
l
)
;
}
bool
put
(
const
T
&
t
)
{
return
set
.
put
(
t
)
;
}
bool
putNew
(
const
T
&
t
)
{
return
set
.
putNew
(
t
)
;
}
void
remove
(
const
Lookup
&
l
)
{
set
.
remove
(
l
)
;
}
friend
void
AutoGCRooter
:
:
trace
(
JSTracer
*
trc
)
;
private
:
AutoHashSetRooter
(
const
AutoHashSetRooter
&
hmr
)
=
delete
;
AutoHashSetRooter
&
operator
=
(
const
AutoHashSetRooter
&
hmr
)
=
delete
;
HashSetImpl
set
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
JS_PUBLIC_API
(
CustomAutoRooter
)
:
private
AutoGCRooter
{
public
:
template
<
typename
CX
>
explicit
CustomAutoRooter
(
const
CX
&
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
AutoGCRooter
(
cx
CUSTOM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
friend
void
AutoGCRooter
:
:
trace
(
JSTracer
*
trc
)
;
protected
:
virtual
~
CustomAutoRooter
(
)
{
}
virtual
void
trace
(
JSTracer
*
trc
)
=
0
;
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
HandleValueArray
{
const
size_t
length_
;
const
Value
*
const
elements_
;
HandleValueArray
(
size_t
len
const
Value
*
elements
)
:
length_
(
len
)
elements_
(
elements
)
{
}
public
:
explicit
HandleValueArray
(
HandleValue
value
)
:
length_
(
1
)
elements_
(
value
.
address
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
AutoValueVector
&
values
)
:
length_
(
values
.
length
(
)
)
elements_
(
values
.
begin
(
)
)
{
}
template
<
size_t
N
>
MOZ_IMPLICIT
HandleValueArray
(
const
AutoValueArray
<
N
>
&
values
)
:
length_
(
N
)
elements_
(
values
.
begin
(
)
)
{
}
MOZ_IMPLICIT
HandleValueArray
(
const
JS
:
:
CallArgs
&
args
)
:
length_
(
args
.
length
(
)
)
elements_
(
args
.
array
(
)
)
{
}
static
HandleValueArray
fromMarkedLocation
(
size_t
len
const
Value
*
elements
)
{
return
HandleValueArray
(
len
elements
)
;
}
static
HandleValueArray
subarray
(
const
HandleValueArray
&
values
size_t
startIndex
size_t
len
)
{
MOZ_ASSERT
(
startIndex
+
len
<
=
values
.
length
(
)
)
;
return
HandleValueArray
(
len
values
.
begin
(
)
+
startIndex
)
;
}
static
HandleValueArray
empty
(
)
{
return
HandleValueArray
(
0
nullptr
)
;
}
size_t
length
(
)
const
{
return
length_
;
}
const
Value
*
begin
(
)
const
{
return
elements_
;
}
HandleValue
operator
[
]
(
size_t
i
)
const
{
MOZ_ASSERT
(
i
<
length_
)
;
return
HandleValue
:
:
fromMarkedLocation
(
&
elements_
[
i
]
)
;
}
}
;
}
struct
JSFreeOp
{
protected
:
JSRuntime
*
runtime_
;
explicit
JSFreeOp
(
JSRuntime
*
rt
)
:
runtime_
(
rt
)
{
}
public
:
JSRuntime
*
runtime
(
)
const
{
MOZ_ASSERT
(
runtime_
)
;
return
runtime_
;
}
}
;
typedef
enum
JSGCStatus
{
JSGC_BEGIN
JSGC_END
}
JSGCStatus
;
typedef
void
(
*
JSGCCallback
)
(
JSContext
*
cx
JSGCStatus
status
void
*
data
)
;
typedef
void
(
*
JSObjectsTenuredCallback
)
(
JSContext
*
cx
void
*
data
)
;
typedef
enum
JSFinalizeStatus
{
JSFINALIZE_GROUP_PREPARE
JSFINALIZE_GROUP_START
JSFINALIZE_GROUP_END
JSFINALIZE_COLLECTION_END
}
JSFinalizeStatus
;
typedef
void
(
*
JSFinalizeCallback
)
(
JSFreeOp
*
fop
JSFinalizeStatus
status
void
*
data
)
;
typedef
void
(
*
JSWeakPointerZonesCallback
)
(
JSContext
*
cx
void
*
data
)
;
typedef
void
(
*
JSWeakPointerCompartmentCallback
)
(
JSContext
*
cx
JSCompartment
*
comp
void
*
data
)
;
typedef
bool
(
*
JSInterruptCallback
)
(
JSContext
*
cx
)
;
typedef
JSObject
*
(
*
JSGetIncumbentGlobalCallback
)
(
JSContext
*
cx
)
;
typedef
bool
(
*
JSEnqueuePromiseJobCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
job
JS
:
:
HandleObject
allocationSite
JS
:
:
HandleObject
incumbentGlobal
void
*
data
)
;
enum
class
PromiseRejectionHandlingState
{
Unhandled
Handled
}
;
typedef
void
(
*
JSPromiseRejectionTrackerCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
promise
PromiseRejectionHandlingState
state
void
*
data
)
;
typedef
void
(
*
JSProcessPromiseCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
promise
)
;
typedef
enum
JSExnType
{
JSEXN_ERR
JSEXN_FIRST
=
JSEXN_ERR
JSEXN_INTERNALERR
JSEXN_EVALERR
JSEXN_RANGEERR
JSEXN_REFERENCEERR
JSEXN_SYNTAXERR
JSEXN_TYPEERR
JSEXN_URIERR
JSEXN_DEBUGGEEWOULDRUN
JSEXN_WASMCOMPILEERROR
JSEXN_WASMLINKERROR
JSEXN_WASMRUNTIMEERROR
JSEXN_ERROR_LIMIT
JSEXN_WARN
=
JSEXN_ERROR_LIMIT
JSEXN_NOTE
JSEXN_LIMIT
}
JSExnType
;
struct
JSErrorFormatString
{
const
char
*
name
;
const
char
*
format
;
uint16_t
argCount
;
int16_t
exnType
;
}
;
typedef
const
JSErrorFormatString
*
(
*
JSErrorCallback
)
(
void
*
userRef
const
unsigned
errorNumber
)
;
typedef
bool
(
*
JSLocaleToUpperCase
)
(
JSContext
*
cx
JS
:
:
HandleString
src
JS
:
:
MutableHandleValue
rval
)
;
typedef
bool
(
*
JSLocaleToLowerCase
)
(
JSContext
*
cx
JS
:
:
HandleString
src
JS
:
:
MutableHandleValue
rval
)
;
typedef
bool
(
*
JSLocaleCompare
)
(
JSContext
*
cx
JS
:
:
HandleString
src1
JS
:
:
HandleString
src2
JS
:
:
MutableHandleValue
rval
)
;
typedef
bool
(
*
JSLocaleToUnicode
)
(
JSContext
*
cx
const
char
*
src
JS
:
:
MutableHandleValue
rval
)
;
typedef
JSObject
*
(
*
JSWrapObjectCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
existing
JS
:
:
HandleObject
obj
)
;
typedef
void
(
*
JSPreWrapCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
scope
JS
:
:
HandleObject
obj
JS
:
:
HandleObject
objectPassedToWrap
JS
:
:
MutableHandleObject
retObj
)
;
struct
JSWrapObjectCallbacks
{
JSWrapObjectCallback
wrap
;
JSPreWrapCallback
preWrap
;
}
;
typedef
void
(
*
JSDestroyCompartmentCallback
)
(
JSFreeOp
*
fop
JSCompartment
*
compartment
)
;
typedef
size_t
(
*
JSSizeOfIncludingThisCompartmentCallback
)
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
JSCompartment
*
compartment
)
;
typedef
void
(
*
JSCompartmentNameCallback
)
(
JSContext
*
cx
JSCompartment
*
compartment
char
*
buf
size_t
bufsize
)
;
using
JSExternalStringSizeofCallback
=
size_t
(
*
)
(
JSString
*
str
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
static
MOZ_ALWAYS_INLINE
JS
:
:
Value
JS_NumberValue
(
double
d
)
{
int32_t
i
;
d
=
JS
:
:
CanonicalizeNaN
(
d
)
;
if
(
mozilla
:
:
NumberIsInt32
(
d
&
i
)
)
return
JS
:
:
Int32Value
(
i
)
;
return
JS
:
:
DoubleValue
(
d
)
;
}
JS_PUBLIC_API
(
bool
)
JS_StringHasBeenPinned
(
JSContext
*
cx
JSString
*
str
)
;
namespace
JS
{
class
MOZ_STACK_CLASS
SourceBufferHolder
final
{
public
:
enum
Ownership
{
NoOwnership
GiveOwnership
}
;
SourceBufferHolder
(
const
char16_t
*
data
size_t
dataLength
Ownership
ownership
)
:
data_
(
data
)
length_
(
dataLength
)
ownsChars_
(
ownership
=
=
GiveOwnership
)
{
static
const
char16_t
NullChar_
=
0
;
if
(
!
get
(
)
)
{
data_
=
&
NullChar_
;
length_
=
0
;
ownsChars_
=
false
;
}
}
SourceBufferHolder
(
SourceBufferHolder
&
&
other
)
:
data_
(
other
.
data_
)
length_
(
other
.
length_
)
ownsChars_
(
other
.
ownsChars_
)
{
other
.
data_
=
nullptr
;
other
.
length_
=
0
;
other
.
ownsChars_
=
false
;
}
~
SourceBufferHolder
(
)
{
if
(
ownsChars_
)
js_free
(
const_cast
<
char16_t
*
>
(
data_
)
)
;
}
const
char16_t
*
get
(
)
const
{
return
data_
;
}
size_t
length
(
)
const
{
return
length_
;
}
bool
ownsChars
(
)
const
{
return
ownsChars_
;
}
char16_t
*
take
(
)
{
MOZ_ASSERT
(
ownsChars_
)
;
ownsChars_
=
false
;
return
const_cast
<
char16_t
*
>
(
data_
)
;
}
private
:
SourceBufferHolder
(
SourceBufferHolder
&
)
=
delete
;
SourceBufferHolder
&
operator
=
(
SourceBufferHolder
&
)
=
delete
;
const
char16_t
*
data_
;
size_t
length_
;
bool
ownsChars_
;
}
;
struct
TranscodeSource
;
}
static
const
uint8_t
JSPROP_ENUMERATE
=
0x01
;
static
const
uint8_t
JSPROP_READONLY
=
0x02
;
static
const
uint8_t
JSPROP_PERMANENT
=
0x04
;
static
const
uint8_t
JSPROP_PROPOP_ACCESSORS
=
0x08
;
static
const
uint8_t
JSPROP_GETTER
=
0x10
;
static
const
uint8_t
JSPROP_SETTER
=
0x20
;
static
const
uint8_t
JSPROP_INTERNAL_USE_BIT
=
0x80
;
static
const
unsigned
JSFUN_CONSTRUCTOR
=
0x400
;
static
const
unsigned
JSFUN_FLAGS_MASK
=
0x400
;
static
const
unsigned
JSPROP_REDEFINE_NONCONFIGURABLE
=
0x1000
;
static
const
unsigned
JSPROP_RESOLVING
=
0x2000
;
static
const
unsigned
JSPROP_IGNORE_ENUMERATE
=
0x4000
;
static
const
unsigned
JSPROP_IGNORE_READONLY
=
0x8000
;
static
const
unsigned
JSPROP_IGNORE_PERMANENT
=
0x10000
;
static
const
unsigned
JSPROP_IGNORE_VALUE
=
0x20000
;
extern
JS_PUBLIC_API
(
int64_t
)
JS_Now
(
void
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
JS_GetNaNValue
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
JS_GetNegativeInfinityValue
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
JS_GetPositiveInfinityValue
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
JS_GetEmptyStringValue
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_GetEmptyString
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ValueToObject
(
JSContext
*
cx
JS
:
:
HandleValue
v
JS
:
:
MutableHandleObject
objp
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_ValueToFunction
(
JSContext
*
cx
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_ValueToConstructor
(
JSContext
*
cx
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_ValueToSource
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DoubleIsInt32
(
double
d
int32_t
*
ip
)
;
extern
JS_PUBLIC_API
(
JSType
)
JS_TypeOfValue
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
const
char
*
)
InformalValueTypeName
(
const
JS
:
:
Value
&
v
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_StrictlyEqual
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v1
JS
:
:
Handle
<
JS
:
:
Value
>
v2
bool
*
equal
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_LooselyEqual
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v1
JS
:
:
Handle
<
JS
:
:
Value
>
v2
bool
*
equal
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SameValue
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
Value
>
v1
JS
:
:
Handle
<
JS
:
:
Value
>
v2
bool
*
same
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsBuiltinEvalFunction
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsBuiltinFunctionConstructor
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
JSContext
*
)
JS_NewContext
(
uint32_t
maxbytes
uint32_t
maxNurseryBytes
=
JS
:
:
DefaultNurseryBytes
JSRuntime
*
parentRuntime
=
nullptr
)
;
extern
JS_PUBLIC_API
(
void
)
JS_YieldCooperativeContext
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ResumeCooperativeContext
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSContext
*
)
JS_NewCooperativeContext
(
JSContext
*
siblingContext
)
;
namespace
JS
{
struct
AutoRelinquishZoneGroups
{
explicit
AutoRelinquishZoneGroups
(
JSContext
*
cx
)
;
~
AutoRelinquishZoneGroups
(
)
;
private
:
JSContext
*
cx
;
mozilla
:
:
Vector
<
void
*
>
enterList
;
}
;
}
extern
JS_PUBLIC_API
(
void
)
JS_DestroyContext
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
void
*
)
JS_GetContextPrivate
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
void
)
JS_SetContextPrivate
(
JSContext
*
cx
void
*
data
)
;
extern
JS_PUBLIC_API
(
JSRuntime
*
)
JS_GetParentRuntime
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSRuntime
*
)
JS_GetRuntime
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_BeginRequest
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_EndRequest
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetFutexCanWait
(
JSContext
*
cx
)
;
namespace
JS
{
typedef
void
(
*
BeginSingleThreadedExecutionCallback
)
(
JSContext
*
cx
)
;
typedef
void
(
*
EndSingleThreadedExecutionCallback
)
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
SetSingleThreadedExecutionCallbacks
(
JSContext
*
cx
BeginSingleThreadedExecutionCallback
begin
EndSingleThreadedExecutionCallback
end
)
;
}
namespace
js
{
void
AssertHeapIsIdle
(
)
;
}
class
MOZ_RAII
JSAutoRequest
{
public
:
explicit
JSAutoRequest
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mContext
(
cx
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
JS_BeginRequest
(
mContext
)
;
}
~
JSAutoRequest
(
)
{
JS_EndRequest
(
mContext
)
;
}
protected
:
JSContext
*
mContext
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
#
if
0
private
:
static
void
*
operator
new
(
size_t
)
CPP_THROW_NEW
{
return
0
;
}
static
void
operator
delete
(
void
*
size_t
)
{
}
#
endif
}
;
extern
JS_PUBLIC_API
(
JSVersion
)
JS_GetVersion
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
const
char
*
)
JS_VersionToString
(
JSVersion
version
)
;
extern
JS_PUBLIC_API
(
JSVersion
)
JS_StringToVersion
(
const
char
*
string
)
;
namespace
JS
{
class
JS_PUBLIC_API
(
ContextOptions
)
{
public
:
ContextOptions
(
)
:
baseline_
(
true
)
ion_
(
true
)
asmJS_
(
true
)
wasm_
(
true
)
wasmBaseline_
(
true
)
wasmIon_
(
true
)
testWasmAwaitTier2_
(
false
)
throwOnAsmJSValidationFailure_
(
false
)
nativeRegExp_
(
true
)
asyncStack_
(
true
)
throwOnDebuggeeWouldRun_
(
true
)
dumpStackOnDebuggeeWouldRun_
(
false
)
werror_
(
false
)
strictMode_
(
false
)
extraWarnings_
(
false
)
forEachStatement_
(
false
)
streams_
(
false
)
#
ifdef
FUZZING
fuzzing_
(
false
)
#
endif
{
}
bool
baseline
(
)
const
{
return
baseline_
;
}
ContextOptions
&
setBaseline
(
bool
flag
)
{
baseline_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleBaseline
(
)
{
baseline_
=
!
baseline_
;
return
*
this
;
}
bool
ion
(
)
const
{
return
ion_
;
}
ContextOptions
&
setIon
(
bool
flag
)
{
ion_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleIon
(
)
{
ion_
=
!
ion_
;
return
*
this
;
}
bool
asmJS
(
)
const
{
return
asmJS_
;
}
ContextOptions
&
setAsmJS
(
bool
flag
)
{
asmJS_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleAsmJS
(
)
{
asmJS_
=
!
asmJS_
;
return
*
this
;
}
bool
wasm
(
)
const
{
return
wasm_
;
}
ContextOptions
&
setWasm
(
bool
flag
)
{
wasm_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleWasm
(
)
{
wasm_
=
!
wasm_
;
return
*
this
;
}
bool
streams
(
)
const
{
return
streams_
;
}
ContextOptions
&
setStreams
(
bool
flag
)
{
streams_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleStreams
(
)
{
streams_
=
!
streams_
;
return
*
this
;
}
bool
wasmBaseline
(
)
const
{
return
wasmBaseline_
;
}
ContextOptions
&
setWasmBaseline
(
bool
flag
)
{
wasmBaseline_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleWasmBaseline
(
)
{
wasmBaseline_
=
!
wasmBaseline_
;
return
*
this
;
}
bool
wasmIon
(
)
const
{
return
wasmIon_
;
}
ContextOptions
&
setWasmIon
(
bool
flag
)
{
wasmIon_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleWasmIon
(
)
{
wasmIon_
=
!
wasmIon_
;
return
*
this
;
}
bool
testWasmAwaitTier2
(
)
const
{
return
testWasmAwaitTier2_
;
}
ContextOptions
&
setTestWasmAwaitTier2
(
bool
flag
)
{
testWasmAwaitTier2_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleTestWasmAwaitTier2
(
)
{
testWasmAwaitTier2_
=
!
testWasmAwaitTier2_
;
return
*
this
;
}
bool
throwOnAsmJSValidationFailure
(
)
const
{
return
throwOnAsmJSValidationFailure_
;
}
ContextOptions
&
setThrowOnAsmJSValidationFailure
(
bool
flag
)
{
throwOnAsmJSValidationFailure_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleThrowOnAsmJSValidationFailure
(
)
{
throwOnAsmJSValidationFailure_
=
!
throwOnAsmJSValidationFailure_
;
return
*
this
;
}
bool
nativeRegExp
(
)
const
{
return
nativeRegExp_
;
}
ContextOptions
&
setNativeRegExp
(
bool
flag
)
{
nativeRegExp_
=
flag
;
return
*
this
;
}
bool
asyncStack
(
)
const
{
return
asyncStack_
;
}
ContextOptions
&
setAsyncStack
(
bool
flag
)
{
asyncStack_
=
flag
;
return
*
this
;
}
bool
throwOnDebuggeeWouldRun
(
)
const
{
return
throwOnDebuggeeWouldRun_
;
}
ContextOptions
&
setThrowOnDebuggeeWouldRun
(
bool
flag
)
{
throwOnDebuggeeWouldRun_
=
flag
;
return
*
this
;
}
bool
dumpStackOnDebuggeeWouldRun
(
)
const
{
return
dumpStackOnDebuggeeWouldRun_
;
}
ContextOptions
&
setDumpStackOnDebuggeeWouldRun
(
bool
flag
)
{
dumpStackOnDebuggeeWouldRun_
=
flag
;
return
*
this
;
}
bool
werror
(
)
const
{
return
werror_
;
}
ContextOptions
&
setWerror
(
bool
flag
)
{
werror_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleWerror
(
)
{
werror_
=
!
werror_
;
return
*
this
;
}
bool
strictMode
(
)
const
{
return
strictMode_
;
}
ContextOptions
&
setStrictMode
(
bool
flag
)
{
strictMode_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleStrictMode
(
)
{
strictMode_
=
!
strictMode_
;
return
*
this
;
}
bool
extraWarnings
(
)
const
{
return
extraWarnings_
;
}
ContextOptions
&
setExtraWarnings
(
bool
flag
)
{
extraWarnings_
=
flag
;
return
*
this
;
}
ContextOptions
&
toggleExtraWarnings
(
)
{
extraWarnings_
=
!
extraWarnings_
;
return
*
this
;
}
bool
forEachStatement
(
)
const
{
return
forEachStatement_
;
}
ContextOptions
&
setForEachStatement
(
bool
flag
)
{
forEachStatement_
=
flag
;
return
*
this
;
}
#
ifdef
FUZZING
bool
fuzzing
(
)
const
{
return
fuzzing_
;
}
ContextOptions
&
setFuzzing
(
bool
flag
)
{
fuzzing_
=
flag
;
return
*
this
;
}
#
endif
void
disableOptionsForSafeMode
(
)
{
setBaseline
(
false
)
;
setIon
(
false
)
;
setAsmJS
(
false
)
;
setWasm
(
false
)
;
setWasmBaseline
(
false
)
;
setWasmIon
(
false
)
;
setNativeRegExp
(
false
)
;
}
private
:
bool
baseline_
:
1
;
bool
ion_
:
1
;
bool
asmJS_
:
1
;
bool
wasm_
:
1
;
bool
wasmBaseline_
:
1
;
bool
wasmIon_
:
1
;
bool
testWasmAwaitTier2_
:
1
;
bool
throwOnAsmJSValidationFailure_
:
1
;
bool
nativeRegExp_
:
1
;
bool
asyncStack_
:
1
;
bool
throwOnDebuggeeWouldRun_
:
1
;
bool
dumpStackOnDebuggeeWouldRun_
:
1
;
bool
werror_
:
1
;
bool
strictMode_
:
1
;
bool
extraWarnings_
:
1
;
bool
forEachStatement_
:
1
;
bool
streams_
:
1
;
#
ifdef
FUZZING
bool
fuzzing_
:
1
;
#
endif
}
;
JS_PUBLIC_API
(
ContextOptions
&
)
ContextOptionsRef
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
bool
)
InitSelfHostedCode
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
void
)
AssertObjectBelongsToCurrentThread
(
JSObject
*
obj
)
;
}
extern
JS_PUBLIC_API
(
const
char
*
)
JS_GetImplementationVersion
(
void
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetDestroyCompartmentCallback
(
JSContext
*
cx
JSDestroyCompartmentCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetSizeOfIncludingThisCompartmentCallback
(
JSContext
*
cx
JSSizeOfIncludingThisCompartmentCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetCompartmentNameCallback
(
JSContext
*
cx
JSCompartmentNameCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetWrapObjectCallbacks
(
JSContext
*
cx
const
JSWrapObjectCallbacks
*
callbacks
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetExternalStringSizeofCallback
(
JSContext
*
cx
JSExternalStringSizeofCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetCompartmentPrivate
(
JSCompartment
*
compartment
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_GetCompartmentPrivate
(
JSCompartment
*
compartment
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetZoneUserData
(
JS
:
:
Zone
*
zone
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_GetZoneUserData
(
JS
:
:
Zone
*
zone
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_WrapObject
(
JSContext
*
cx
JS
:
:
MutableHandleObject
objp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_WrapValue
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_TransplantObject
(
JSContext
*
cx
JS
:
:
HandleObject
origobj
JS
:
:
HandleObject
target
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_RefreshCrossCompartmentWrappers
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
class
MOZ_RAII
JS_PUBLIC_API
(
JSAutoCompartment
)
{
JSContext
*
cx_
;
JSCompartment
*
oldCompartment_
;
public
:
JSAutoCompartment
(
JSContext
*
cx
JSObject
*
target
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
JSAutoCompartment
(
JSContext
*
cx
JSScript
*
target
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
JSAutoCompartment
(
)
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
JS_PUBLIC_API
(
JSAutoNullableCompartment
)
{
JSContext
*
cx_
;
JSCompartment
*
oldCompartment_
;
public
:
explicit
JSAutoNullableCompartment
(
JSContext
*
cx
JSObject
*
targetOrNull
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
;
~
JSAutoNullableCompartment
(
)
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
extern
JS_PUBLIC_API
(
JSCompartment
*
)
JS_EnterCompartment
(
JSContext
*
cx
JSObject
*
target
)
;
extern
JS_PUBLIC_API
(
void
)
JS_LeaveCompartment
(
JSContext
*
cx
JSCompartment
*
oldCompartment
)
;
typedef
void
(
*
JSIterateCompartmentCallback
)
(
JSContext
*
cx
void
*
data
JSCompartment
*
compartment
)
;
extern
JS_PUBLIC_API
(
void
)
JS_IterateCompartments
(
JSContext
*
cx
void
*
data
JSIterateCompartmentCallback
compartmentCallback
)
;
extern
JS_PUBLIC_API
(
void
)
JS_MarkCrossZoneId
(
JSContext
*
cx
jsid
id
)
;
extern
JS_PUBLIC_API
(
void
)
JS_MarkCrossZoneIdValue
(
JSContext
*
cx
const
JS
:
:
Value
&
value
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_InitStandardClasses
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ResolveStandardClass
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
bool
*
resolved
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_MayResolveStandardClass
(
const
JSAtomState
&
names
jsid
id
JSObject
*
maybeObj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_EnumerateStandardClasses
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_NewEnumerateStandardClasses
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
AutoIdVector
&
properties
bool
enumerableOnly
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetClassObject
(
JSContext
*
cx
JSProtoKey
key
JS
:
:
MutableHandle
<
JSObject
*
>
objp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetClassPrototype
(
JSContext
*
cx
JSProtoKey
key
JS
:
:
MutableHandle
<
JSObject
*
>
objp
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
JSProtoKey
)
IdentifyStandardInstance
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSProtoKey
)
IdentifyStandardPrototype
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSProtoKey
)
IdentifyStandardInstanceOrPrototype
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSProtoKey
)
IdentifyStandardConstructor
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
void
)
ProtoKeyToId
(
JSContext
*
cx
JSProtoKey
key
JS
:
:
MutableHandleId
idp
)
;
}
extern
JS_PUBLIC_API
(
JSProtoKey
)
JS_IdToProtoKey
(
JSContext
*
cx
JS
:
:
HandleId
id
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetFunctionPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
forObj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetObjectPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
forObj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetArrayPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
forObj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetErrorPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetIteratorPrototype
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetGlobalForObject
(
JSContext
*
cx
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsGlobalObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GlobalLexicalEnvironment
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasExtensibleLexicalEnvironment
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_ExtensibleLexicalEnvironment
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetGlobalForCompartmentOrNull
(
JSContext
*
cx
JSCompartment
*
c
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
JSObject
*
)
CurrentGlobalOrNull
(
JSContext
*
cx
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_InitReflectParse
(
JSContext
*
cx
JS
:
:
HandleObject
global
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProfilingFunctions
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineDebuggerObject
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
#
ifdef
JS_HAS_CTYPES
extern
JS_PUBLIC_API
(
bool
)
JS_InitCTypesClass
(
JSContext
*
cx
JS
:
:
HandleObject
global
)
;
typedef
char
*
(
*
JSCTypesUnicodeToNativeFun
)
(
JSContext
*
cx
const
char16_t
*
source
size_t
slen
)
;
struct
JSCTypesCallbacks
{
JSCTypesUnicodeToNativeFun
unicodeToNative
;
}
;
extern
JS_PUBLIC_API
(
void
)
JS_SetCTypesCallbacks
(
JSObject
*
ctypesObj
const
JSCTypesCallbacks
*
callbacks
)
;
#
endif
extern
JS_PUBLIC_API
(
void
*
)
JS_malloc
(
JSContext
*
cx
size_t
nbytes
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_realloc
(
JSContext
*
cx
void
*
p
size_t
oldBytes
size_t
newBytes
)
;
extern
JS_PUBLIC_API
(
void
)
JS_free
(
JSContext
*
cx
void
*
p
)
;
extern
JS_PUBLIC_API
(
void
)
JS_freeop
(
JSFreeOp
*
fop
void
*
p
)
;
extern
JS_PUBLIC_API
(
void
)
JS_updateMallocCounter
(
JSContext
*
cx
size_t
nbytes
)
;
extern
JS_PUBLIC_API
(
char
*
)
JS_strdup
(
JSContext
*
cx
const
char
*
s
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AddExtraGCRootsTracer
(
JSContext
*
cx
JSTraceDataOp
traceOp
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RemoveExtraGCRootsTracer
(
JSContext
*
cx
JSTraceDataOp
traceOp
void
*
data
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
IsIdleGCTaskNeeded
(
JSRuntime
*
rt
)
;
extern
JS_PUBLIC_API
(
void
)
RunIdleTimeGCTask
(
JSRuntime
*
rt
)
;
}
extern
JS_PUBLIC_API
(
void
)
JS_GC
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_MaybeGC
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetGCCallback
(
JSContext
*
cx
JSGCCallback
cb
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetObjectsTenuredCallback
(
JSContext
*
cx
JSObjectsTenuredCallback
cb
void
*
data
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AddFinalizeCallback
(
JSContext
*
cx
JSFinalizeCallback
cb
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RemoveFinalizeCallback
(
JSContext
*
cx
JSFinalizeCallback
cb
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AddWeakPointerZonesCallback
(
JSContext
*
cx
JSWeakPointerZonesCallback
cb
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RemoveWeakPointerZonesCallback
(
JSContext
*
cx
JSWeakPointerZonesCallback
cb
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AddWeakPointerCompartmentCallback
(
JSContext
*
cx
JSWeakPointerCompartmentCallback
cb
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RemoveWeakPointerCompartmentCallback
(
JSContext
*
cx
JSWeakPointerCompartmentCallback
cb
)
;
extern
JS_PUBLIC_API
(
void
)
JS_UpdateWeakPointerAfterGC
(
JS
:
:
Heap
<
JSObject
*
>
*
objp
)
;
extern
JS_PUBLIC_API
(
void
)
JS_UpdateWeakPointerAfterGCUnbarriered
(
JSObject
*
*
objp
)
;
typedef
enum
JSGCParamKey
{
JSGC_MAX_BYTES
=
0
JSGC_MAX_MALLOC_BYTES
=
1
JSGC_MAX_NURSERY_BYTES
=
2
JSGC_BYTES
=
3
JSGC_NUMBER
=
4
JSGC_MODE
=
6
JSGC_UNUSED_CHUNKS
=
7
JSGC_TOTAL_CHUNKS
=
8
JSGC_SLICE_TIME_BUDGET
=
9
JSGC_MARK_STACK_LIMIT
=
10
JSGC_HIGH_FREQUENCY_TIME_LIMIT
=
11
JSGC_HIGH_FREQUENCY_LOW_LIMIT
=
12
JSGC_HIGH_FREQUENCY_HIGH_LIMIT
=
13
JSGC_HIGH_FREQUENCY_HEAP_GROWTH_MAX
=
14
JSGC_HIGH_FREQUENCY_HEAP_GROWTH_MIN
=
15
JSGC_LOW_FREQUENCY_HEAP_GROWTH
=
16
JSGC_DYNAMIC_HEAP_GROWTH
=
17
JSGC_DYNAMIC_MARK_SLICE
=
18
JSGC_ALLOCATION_THRESHOLD
=
19
JSGC_MIN_EMPTY_CHUNK_COUNT
=
21
JSGC_MAX_EMPTY_CHUNK_COUNT
=
22
JSGC_COMPACTING_ENABLED
=
23
JSGC_REFRESH_FRAME_SLICES_ENABLED
=
24
JSGC_ALLOCATION_THRESHOLD_FACTOR
=
25
JSGC_ALLOCATION_THRESHOLD_FACTOR_AVOID_INTERRUPT
=
26
}
JSGCParamKey
;
extern
JS_PUBLIC_API
(
void
)
JS_SetGCParameter
(
JSContext
*
cx
JSGCParamKey
key
uint32_t
value
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ResetGCParameter
(
JSContext
*
cx
JSGCParamKey
key
)
;
extern
JS_PUBLIC_API
(
uint32_t
)
JS_GetGCParameter
(
JSContext
*
cx
JSGCParamKey
key
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetGCParametersBasedOnAvailableMemory
(
JSContext
*
cx
uint32_t
availMem
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewExternalString
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
const
JSStringFinalizer
*
fin
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewMaybeExternalString
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
const
JSStringFinalizer
*
fin
bool
*
allocatedExternal
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsExternalString
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
const
JSStringFinalizer
*
)
JS_GetExternalStringFinalizer
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetNativeStackQuota
(
JSContext
*
cx
size_t
systemCodeStackSize
size_t
trustedScriptStackSize
=
0
size_t
untrustedScriptStackSize
=
0
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ValueToId
(
JSContext
*
cx
JS
:
:
HandleValue
v
JS
:
:
MutableHandleId
idp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_StringToId
(
JSContext
*
cx
JS
:
:
HandleString
s
JS
:
:
MutableHandleId
idp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IdToValue
(
JSContext
*
cx
jsid
id
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
ToPrimitive
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JSType
hint
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
GetFirstArgumentAsTypeHint
(
JSContext
*
cx
CallArgs
args
JSType
*
result
)
;
}
template
<
typename
T
>
struct
JSConstScalarSpec
{
const
char
*
name
;
T
val
;
}
;
typedef
JSConstScalarSpec
<
double
>
JSConstDoubleSpec
;
typedef
JSConstScalarSpec
<
int32_t
>
JSConstIntegerSpec
;
struct
JSJitInfo
;
struct
JSNativeWrapper
{
JSNative
op
;
const
JSJitInfo
*
info
;
}
;
#
define
JSNATIVE_WRAPPER
(
native
)
{
{
native
nullptr
}
}
struct
JSPropertySpec
{
struct
SelfHostedWrapper
{
void
*
unused
;
const
char
*
funname
;
}
;
struct
ValueWrapper
{
uintptr_t
type
;
union
{
const
char
*
string
;
int32_t
int32
;
}
;
}
;
const
char
*
name
;
uint8_t
flags
;
union
{
struct
{
union
{
JSNativeWrapper
native
;
SelfHostedWrapper
selfHosted
;
}
getter
;
union
{
JSNativeWrapper
native
;
SelfHostedWrapper
selfHosted
;
}
setter
;
}
accessors
;
ValueWrapper
value
;
}
;
bool
isAccessor
(
)
const
{
return
!
(
flags
&
JSPROP_INTERNAL_USE_BIT
)
;
}
JS_PUBLIC_API
(
bool
)
getValue
(
JSContext
*
cx
JS
:
:
MutableHandleValue
value
)
const
;
bool
isSelfHosted
(
)
const
{
MOZ_ASSERT
(
isAccessor
(
)
)
;
#
ifdef
DEBUG
if
(
flags
&
JSPROP_GETTER
)
checkAccessorsAreSelfHosted
(
)
;
else
checkAccessorsAreNative
(
)
;
#
endif
return
(
flags
&
JSPROP_GETTER
)
;
}
static_assert
(
sizeof
(
SelfHostedWrapper
)
=
=
sizeof
(
JSNativeWrapper
)
"
JSPropertySpec
:
:
getter
/
setter
must
be
compact
"
)
;
static_assert
(
offsetof
(
SelfHostedWrapper
funname
)
=
=
offsetof
(
JSNativeWrapper
info
)
"
JS_SELF_HOSTED
*
macros
below
require
that
"
"
SelfHostedWrapper
:
:
funname
overlay
"
"
JSNativeWrapper
:
:
info
"
)
;
private
:
void
checkAccessorsAreNative
(
)
const
{
MOZ_ASSERT
(
accessors
.
getter
.
native
.
op
)
;
MOZ_ASSERT_IF
(
accessors
.
setter
.
native
.
info
accessors
.
setter
.
native
.
op
)
;
}
void
checkAccessorsAreSelfHosted
(
)
const
{
MOZ_ASSERT
(
!
accessors
.
getter
.
selfHosted
.
unused
)
;
MOZ_ASSERT
(
!
accessors
.
setter
.
selfHosted
.
unused
)
;
}
}
;
namespace
JS
{
namespace
detail
{
inline
int
CheckIsNative
(
JSNative
native
)
;
template
<
size_t
N
>
inline
int
CheckIsCharacterLiteral
(
const
char
(
&
arr
)
[
N
]
)
;
inline
int
CheckIsInt32
(
int32_t
value
)
;
inline
int
CheckIsGetterOp
(
JSGetterOp
op
)
;
inline
int
CheckIsSetterOp
(
JSSetterOp
op
)
;
}
}
#
define
JS_CAST_NATIVE_TO
(
v
To
)
\
(
static_cast
<
void
>
(
sizeof
(
JS
:
:
detail
:
:
CheckIsNative
(
v
)
)
)
\
reinterpret_cast
<
To
>
(
v
)
)
#
define
JS_CAST_STRING_TO
(
s
To
)
\
(
static_cast
<
void
>
(
sizeof
(
JS
:
:
detail
:
:
CheckIsCharacterLiteral
(
s
)
)
)
\
reinterpret_cast
<
To
>
(
s
)
)
#
define
JS_CAST_INT32_TO
(
s
To
)
\
(
static_cast
<
void
>
(
sizeof
(
JS
:
:
detail
:
:
CheckIsInt32
(
s
)
)
)
\
reinterpret_cast
<
To
>
(
s
)
)
#
define
JS_CHECK_ACCESSOR_FLAGS
(
flags
)
\
(
static_cast
<
mozilla
:
:
EnableIf
<
(
(
flags
)
&
~
(
JSPROP_ENUMERATE
|
JSPROP_PERMANENT
)
)
=
=
0
>
:
:
Type
>
(
0
)
\
(
flags
)
)
#
define
JS_PROPERTYOP_GETTER
(
v
)
\
(
static_cast
<
void
>
(
sizeof
(
JS
:
:
detail
:
:
CheckIsGetterOp
(
v
)
)
)
\
reinterpret_cast
<
JSNative
>
(
v
)
)
#
define
JS_PROPERTYOP_SETTER
(
v
)
\
(
static_cast
<
void
>
(
sizeof
(
JS
:
:
detail
:
:
CheckIsSetterOp
(
v
)
)
)
\
reinterpret_cast
<
JSNative
>
(
v
)
)
#
define
JS_PS_ACCESSOR_SPEC
(
name
getter
setter
flags
extraFlags
)
\
{
name
uint8_t
(
JS_CHECK_ACCESSOR_FLAGS
(
flags
)
|
extraFlags
)
\
{
{
getter
setter
}
}
}
#
define
JS_PS_VALUE_SPEC
(
name
value
flags
)
\
{
name
uint8_t
(
flags
|
JSPROP_INTERNAL_USE_BIT
)
\
{
{
value
JSNATIVE_WRAPPER
(
nullptr
)
}
}
}
#
define
SELFHOSTED_WRAPPER
(
name
)
\
{
{
nullptr
JS_CAST_STRING_TO
(
name
const
JSJitInfo
*
)
}
}
#
define
STRINGVALUE_WRAPPER
(
value
)
\
{
{
reinterpret_cast
<
JSNative
>
(
JSVAL_TYPE_STRING
)
JS_CAST_STRING_TO
(
value
const
JSJitInfo
*
)
}
}
#
define
INT32VALUE_WRAPPER
(
value
)
\
{
{
reinterpret_cast
<
JSNative
>
(
JSVAL_TYPE_INT32
)
JS_CAST_INT32_TO
(
value
const
JSJitInfo
*
)
}
}
#
define
JS_PSG
(
name
getter
flags
)
\
JS_PS_ACCESSOR_SPEC
(
name
JSNATIVE_WRAPPER
(
getter
)
JSNATIVE_WRAPPER
(
nullptr
)
flags
\
0
)
#
define
JS_PSGS
(
name
getter
setter
flags
)
\
JS_PS_ACCESSOR_SPEC
(
name
JSNATIVE_WRAPPER
(
getter
)
JSNATIVE_WRAPPER
(
setter
)
flags
\
0
)
#
define
JS_SYM_GET
(
symbol
getter
flags
)
\
JS_PS_ACCESSOR_SPEC
(
reinterpret_cast
<
const
char
*
>
(
uint32_t
(
:
:
JS
:
:
SymbolCode
:
:
symbol
)
+
1
)
\
JSNATIVE_WRAPPER
(
getter
)
JSNATIVE_WRAPPER
(
nullptr
)
flags
0
)
#
define
JS_SELF_HOSTED_GET
(
name
getterName
flags
)
\
JS_PS_ACCESSOR_SPEC
(
name
SELFHOSTED_WRAPPER
(
getterName
)
JSNATIVE_WRAPPER
(
nullptr
)
flags
\
JSPROP_GETTER
)
#
define
JS_SELF_HOSTED_GETSET
(
name
getterName
setterName
flags
)
\
JS_PS_ACCESSOR_SPEC
(
name
SELFHOSTED_WRAPPER
(
getterName
)
SELFHOSTED_WRAPPER
(
setterName
)
\
flags
JSPROP_GETTER
|
JSPROP_SETTER
)
#
define
JS_SELF_HOSTED_SYM_GET
(
symbol
getterName
flags
)
\
JS_PS_ACCESSOR_SPEC
(
reinterpret_cast
<
const
char
*
>
(
uint32_t
(
:
:
JS
:
:
SymbolCode
:
:
symbol
)
+
1
)
\
SELFHOSTED_WRAPPER
(
getterName
)
JSNATIVE_WRAPPER
(
nullptr
)
flags
\
JSPROP_GETTER
)
#
define
JS_STRING_PS
(
name
string
flags
)
\
JS_PS_VALUE_SPEC
(
name
STRINGVALUE_WRAPPER
(
string
)
flags
)
#
define
JS_STRING_SYM_PS
(
symbol
string
flags
)
\
JS_PS_VALUE_SPEC
(
reinterpret_cast
<
const
char
*
>
(
uint32_t
(
:
:
JS
:
:
SymbolCode
:
:
symbol
)
+
1
)
\
STRINGVALUE_WRAPPER
(
string
)
flags
)
#
define
JS_INT32_PS
(
name
value
flags
)
\
JS_PS_VALUE_SPEC
(
name
INT32VALUE_WRAPPER
(
value
)
flags
)
#
define
JS_PS_END
\
JS_PS_ACCESSOR_SPEC
(
nullptr
JSNATIVE_WRAPPER
(
nullptr
)
JSNATIVE_WRAPPER
(
nullptr
)
0
0
)
struct
JSFunctionSpec
{
const
char
*
name
;
JSNativeWrapper
call
;
uint16_t
nargs
;
uint16_t
flags
;
const
char
*
selfHostedName
;
}
;
#
define
JS_FS_END
JS_FN
(
nullptr
nullptr
0
0
)
#
define
JS_FN
(
name
call
nargs
flags
)
\
JS_FNSPEC
(
name
call
nullptr
nargs
flags
nullptr
)
#
define
JS_INLINABLE_FN
(
name
call
nargs
flags
native
)
\
JS_FNSPEC
(
name
call
&
js
:
:
jit
:
:
JitInfo_
#
#
native
nargs
flags
nullptr
)
#
define
JS_SYM_FN
(
symbol
call
nargs
flags
)
\
JS_SYM_FNSPEC
(
symbol
call
nullptr
nargs
flags
nullptr
)
#
define
JS_FNINFO
(
name
call
info
nargs
flags
)
\
JS_FNSPEC
(
name
call
info
nargs
flags
nullptr
)
#
define
JS_SELF_HOSTED_FN
(
name
selfHostedName
nargs
flags
)
\
JS_FNSPEC
(
name
nullptr
nullptr
nargs
flags
selfHostedName
)
#
define
JS_SELF_HOSTED_SYM_FN
(
symbol
selfHostedName
nargs
flags
)
\
JS_SYM_FNSPEC
(
symbol
nullptr
nullptr
nargs
flags
selfHostedName
)
#
define
JS_SYM_FNSPEC
(
symbol
call
info
nargs
flags
selfHostedName
)
\
JS_FNSPEC
(
reinterpret_cast
<
const
char
*
>
(
\
uint32_t
(
:
:
JS
:
:
SymbolCode
:
:
symbol
)
+
1
)
\
call
info
nargs
flags
selfHostedName
)
#
define
JS_FNSPEC
(
name
call
info
nargs
flags
selfHostedName
)
\
{
name
{
call
info
}
nargs
flags
selfHostedName
}
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_InitClass
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleObject
parent_proto
const
JSClass
*
clasp
JSNative
constructor
unsigned
nargs
const
JSPropertySpec
*
ps
const
JSFunctionSpec
*
fs
const
JSPropertySpec
*
static_ps
const
JSFunctionSpec
*
static_fs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_LinkConstructorAndPrototype
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
ctor
JS
:
:
Handle
<
JSObject
*
>
proto
)
;
extern
JS_PUBLIC_API
(
const
JSClass
*
)
JS_GetClass
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_InstanceOf
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
JSClass
*
clasp
JS
:
:
CallArgs
*
args
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasInstance
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JS
:
:
Value
>
v
bool
*
bp
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
OrdinaryHasInstance
(
JSContext
*
cx
HandleObject
objArg
HandleValue
v
bool
*
bp
)
;
}
extern
JS_PUBLIC_API
(
void
*
)
JS_GetPrivate
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetPrivate
(
JSObject
*
obj
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_GetInstancePrivate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
JSClass
*
clasp
JS
:
:
CallArgs
*
args
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetConstructor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
proto
)
;
namespace
JS
{
enum
ZoneSpecifier
{
SystemZone
ExistingZone
NewZoneInNewZoneGroup
NewZoneInSystemZoneGroup
NewZoneInExistingZoneGroup
}
;
class
JS_PUBLIC_API
(
CompartmentCreationOptions
)
{
public
:
CompartmentCreationOptions
(
)
:
addonId_
(
nullptr
)
traceGlobal_
(
nullptr
)
zoneSpec_
(
NewZoneInSystemZoneGroup
)
zonePointer_
(
nullptr
)
invisibleToDebugger_
(
false
)
mergeable_
(
false
)
preserveJitCode_
(
false
)
cloneSingletons_
(
false
)
sharedMemoryAndAtomics_
(
false
)
secureContext_
(
false
)
{
}
JSAddonId
*
addonIdOrNull
(
)
const
{
return
addonId_
;
}
CompartmentCreationOptions
&
setAddonId
(
JSAddonId
*
id
)
{
addonId_
=
id
;
return
*
this
;
}
JSTraceOp
getTrace
(
)
const
{
return
traceGlobal_
;
}
CompartmentCreationOptions
&
setTrace
(
JSTraceOp
op
)
{
traceGlobal_
=
op
;
return
*
this
;
}
void
*
zonePointer
(
)
const
{
return
zonePointer_
;
}
ZoneSpecifier
zoneSpecifier
(
)
const
{
return
zoneSpec_
;
}
CompartmentCreationOptions
&
setSystemZone
(
)
;
CompartmentCreationOptions
&
setExistingZone
(
JSObject
*
obj
)
;
CompartmentCreationOptions
&
setNewZoneInNewZoneGroup
(
)
;
CompartmentCreationOptions
&
setNewZoneInSystemZoneGroup
(
)
;
CompartmentCreationOptions
&
setNewZoneInExistingZoneGroup
(
JSObject
*
obj
)
;
bool
invisibleToDebugger
(
)
const
{
return
invisibleToDebugger_
;
}
CompartmentCreationOptions
&
setInvisibleToDebugger
(
bool
flag
)
{
invisibleToDebugger_
=
flag
;
return
*
this
;
}
bool
mergeable
(
)
const
{
return
mergeable_
;
}
CompartmentCreationOptions
&
setMergeable
(
bool
flag
)
{
mergeable_
=
flag
;
return
*
this
;
}
bool
preserveJitCode
(
)
const
{
return
preserveJitCode_
;
}
CompartmentCreationOptions
&
setPreserveJitCode
(
bool
flag
)
{
preserveJitCode_
=
flag
;
return
*
this
;
}
bool
cloneSingletons
(
)
const
{
return
cloneSingletons_
;
}
CompartmentCreationOptions
&
setCloneSingletons
(
bool
flag
)
{
cloneSingletons_
=
flag
;
return
*
this
;
}
bool
getSharedMemoryAndAtomicsEnabled
(
)
const
;
CompartmentCreationOptions
&
setSharedMemoryAndAtomicsEnabled
(
bool
flag
)
;
bool
secureContext
(
)
const
{
return
secureContext_
;
}
CompartmentCreationOptions
&
setSecureContext
(
bool
flag
)
{
secureContext_
=
flag
;
return
*
this
;
}
private
:
JSAddonId
*
addonId_
;
JSTraceOp
traceGlobal_
;
ZoneSpecifier
zoneSpec_
;
void
*
zonePointer_
;
bool
invisibleToDebugger_
;
bool
mergeable_
;
bool
preserveJitCode_
;
bool
cloneSingletons_
;
bool
sharedMemoryAndAtomics_
;
bool
secureContext_
;
}
;
class
JS_PUBLIC_API
(
CompartmentBehaviors
)
{
public
:
class
Override
{
public
:
Override
(
)
:
mode_
(
Default
)
{
}
bool
get
(
bool
defaultValue
)
const
{
if
(
mode_
=
=
Default
)
return
defaultValue
;
return
mode_
=
=
ForceTrue
;
}
void
set
(
bool
overrideValue
)
{
mode_
=
overrideValue
?
ForceTrue
:
ForceFalse
;
}
void
reset
(
)
{
mode_
=
Default
;
}
private
:
enum
Mode
{
Default
ForceTrue
ForceFalse
}
;
Mode
mode_
;
}
;
CompartmentBehaviors
(
)
:
version_
(
JSVERSION_UNKNOWN
)
discardSource_
(
false
)
disableLazyParsing_
(
false
)
singletonsAsTemplates_
(
true
)
{
}
JSVersion
version
(
)
const
{
return
version_
;
}
CompartmentBehaviors
&
setVersion
(
JSVersion
aVersion
)
{
MOZ_ASSERT
(
aVersion
!
=
JSVERSION_UNKNOWN
)
;
version_
=
aVersion
;
return
*
this
;
}
bool
discardSource
(
)
const
{
return
discardSource_
;
}
CompartmentBehaviors
&
setDiscardSource
(
bool
flag
)
{
discardSource_
=
flag
;
return
*
this
;
}
bool
disableLazyParsing
(
)
const
{
return
disableLazyParsing_
;
}
CompartmentBehaviors
&
setDisableLazyParsing
(
bool
flag
)
{
disableLazyParsing_
=
flag
;
return
*
this
;
}
bool
extraWarnings
(
JSContext
*
cx
)
const
;
Override
&
extraWarningsOverride
(
)
{
return
extraWarningsOverride_
;
}
bool
getSingletonsAsTemplates
(
)
const
{
return
singletonsAsTemplates_
;
}
CompartmentBehaviors
&
setSingletonsAsValues
(
)
{
singletonsAsTemplates_
=
false
;
return
*
this
;
}
private
:
JSVersion
version_
;
bool
discardSource_
;
bool
disableLazyParsing_
;
Override
extraWarningsOverride_
;
bool
singletonsAsTemplates_
;
}
;
class
JS_PUBLIC_API
(
CompartmentOptions
)
{
public
:
explicit
CompartmentOptions
(
)
:
creationOptions_
(
)
behaviors_
(
)
{
}
CompartmentOptions
(
const
CompartmentCreationOptions
&
compartmentCreation
const
CompartmentBehaviors
&
compartmentBehaviors
)
:
creationOptions_
(
compartmentCreation
)
behaviors_
(
compartmentBehaviors
)
{
}
CompartmentCreationOptions
&
creationOptions
(
)
{
return
creationOptions_
;
}
const
CompartmentCreationOptions
&
creationOptions
(
)
const
{
return
creationOptions_
;
}
CompartmentBehaviors
&
behaviors
(
)
{
return
behaviors_
;
}
const
CompartmentBehaviors
&
behaviors
(
)
const
{
return
behaviors_
;
}
private
:
CompartmentCreationOptions
creationOptions_
;
CompartmentBehaviors
behaviors_
;
}
;
JS_PUBLIC_API
(
const
CompartmentCreationOptions
&
)
CompartmentCreationOptionsRef
(
JSCompartment
*
compartment
)
;
JS_PUBLIC_API
(
const
CompartmentCreationOptions
&
)
CompartmentCreationOptionsRef
(
JSObject
*
obj
)
;
JS_PUBLIC_API
(
const
CompartmentCreationOptions
&
)
CompartmentCreationOptionsRef
(
JSContext
*
cx
)
;
JS_PUBLIC_API
(
CompartmentBehaviors
&
)
CompartmentBehaviorsRef
(
JSCompartment
*
compartment
)
;
JS_PUBLIC_API
(
CompartmentBehaviors
&
)
CompartmentBehaviorsRef
(
JSObject
*
obj
)
;
JS_PUBLIC_API
(
CompartmentBehaviors
&
)
CompartmentBehaviorsRef
(
JSContext
*
cx
)
;
enum
OnNewGlobalHookOption
{
FireOnNewGlobalHook
DontFireOnNewGlobalHook
}
;
}
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewGlobalObject
(
JSContext
*
cx
const
JSClass
*
clasp
JSPrincipals
*
principals
JS
:
:
OnNewGlobalHookOption
hookOption
const
JS
:
:
CompartmentOptions
&
options
)
;
extern
JS_PUBLIC_API
(
void
)
JS_GlobalObjectTraceHook
(
JSTracer
*
trc
JSObject
*
global
)
;
extern
JS_PUBLIC_API
(
void
)
JS_FireOnNewGlobalObject
(
JSContext
*
cx
JS
:
:
HandleObject
global
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewObject
(
JSContext
*
cx
const
JSClass
*
clasp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsNative
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewObjectWithGivenProto
(
JSContext
*
cx
const
JSClass
*
clasp
JS
:
:
Handle
<
JSObject
*
>
proto
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewPlainObject
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeepFreezeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_FreezeObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
namespace
JS
{
struct
JS_PUBLIC_API
(
PropertyDescriptor
)
{
JSObject
*
obj
;
unsigned
attrs
;
JSGetterOp
getter
;
JSSetterOp
setter
;
JS
:
:
Value
value
;
PropertyDescriptor
(
)
:
obj
(
nullptr
)
attrs
(
0
)
getter
(
nullptr
)
setter
(
nullptr
)
value
(
JS
:
:
UndefinedValue
(
)
)
{
}
static
void
trace
(
PropertyDescriptor
*
self
JSTracer
*
trc
)
{
self
-
>
trace
(
trc
)
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
}
namespace
js
{
template
<
typename
Wrapper
>
class
WrappedPtrOperations
<
JS
:
:
PropertyDescriptor
Wrapper
>
{
const
JS
:
:
PropertyDescriptor
&
desc
(
)
const
{
return
static_cast
<
const
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
bool
has
(
unsigned
bit
)
const
{
MOZ_ASSERT
(
bit
!
=
0
)
;
MOZ_ASSERT
(
(
bit
&
(
bit
-
1
)
)
=
=
0
)
;
return
(
desc
(
)
.
attrs
&
bit
)
!
=
0
;
}
bool
hasAny
(
unsigned
bits
)
const
{
return
(
desc
(
)
.
attrs
&
bits
)
!
=
0
;
}
bool
hasAll
(
unsigned
bits
)
const
{
return
(
desc
(
)
.
attrs
&
bits
)
=
=
bits
;
}
enum
{
SHADOWABLE
=
JSPROP_INTERNAL_USE_BIT
}
;
public
:
bool
isAccessorDescriptor
(
)
const
{
return
hasAny
(
JSPROP_GETTER
|
JSPROP_SETTER
)
;
}
bool
isGenericDescriptor
(
)
const
{
return
(
desc
(
)
.
attrs
&
(
JSPROP_GETTER
|
JSPROP_SETTER
|
JSPROP_IGNORE_READONLY
|
JSPROP_IGNORE_VALUE
)
)
=
=
(
JSPROP_IGNORE_READONLY
|
JSPROP_IGNORE_VALUE
)
;
}
bool
isDataDescriptor
(
)
const
{
return
!
isAccessorDescriptor
(
)
&
&
!
isGenericDescriptor
(
)
;
}
bool
hasConfigurable
(
)
const
{
return
!
has
(
JSPROP_IGNORE_PERMANENT
)
;
}
bool
configurable
(
)
const
{
MOZ_ASSERT
(
hasConfigurable
(
)
)
;
return
!
has
(
JSPROP_PERMANENT
)
;
}
bool
hasEnumerable
(
)
const
{
return
!
has
(
JSPROP_IGNORE_ENUMERATE
)
;
}
bool
enumerable
(
)
const
{
MOZ_ASSERT
(
hasEnumerable
(
)
)
;
return
has
(
JSPROP_ENUMERATE
)
;
}
bool
hasValue
(
)
const
{
return
!
isAccessorDescriptor
(
)
&
&
!
has
(
JSPROP_IGNORE_VALUE
)
;
}
JS
:
:
HandleValue
value
(
)
const
{
return
JS
:
:
HandleValue
:
:
fromMarkedLocation
(
&
desc
(
)
.
value
)
;
}
bool
hasWritable
(
)
const
{
return
!
isAccessorDescriptor
(
)
&
&
!
has
(
JSPROP_IGNORE_READONLY
)
;
}
bool
writable
(
)
const
{
MOZ_ASSERT
(
hasWritable
(
)
)
;
return
!
has
(
JSPROP_READONLY
)
;
}
bool
hasGetterObject
(
)
const
{
return
has
(
JSPROP_GETTER
)
;
}
JS
:
:
HandleObject
getterObject
(
)
const
{
MOZ_ASSERT
(
hasGetterObject
(
)
)
;
return
JS
:
:
HandleObject
:
:
fromMarkedLocation
(
reinterpret_cast
<
JSObject
*
const
*
>
(
&
desc
(
)
.
getter
)
)
;
}
bool
hasSetterObject
(
)
const
{
return
has
(
JSPROP_SETTER
)
;
}
JS
:
:
HandleObject
setterObject
(
)
const
{
MOZ_ASSERT
(
hasSetterObject
(
)
)
;
return
JS
:
:
HandleObject
:
:
fromMarkedLocation
(
reinterpret_cast
<
JSObject
*
const
*
>
(
&
desc
(
)
.
setter
)
)
;
}
bool
hasGetterOrSetter
(
)
const
{
return
desc
(
)
.
getter
|
|
desc
(
)
.
setter
;
}
JS
:
:
HandleObject
object
(
)
const
{
return
JS
:
:
HandleObject
:
:
fromMarkedLocation
(
&
desc
(
)
.
obj
)
;
}
unsigned
attributes
(
)
const
{
return
desc
(
)
.
attrs
;
}
JSGetterOp
getter
(
)
const
{
return
desc
(
)
.
getter
;
}
JSSetterOp
setter
(
)
const
{
return
desc
(
)
.
setter
;
}
void
assertValid
(
)
const
{
#
ifdef
DEBUG
MOZ_ASSERT
(
(
attributes
(
)
&
~
(
JSPROP_ENUMERATE
|
JSPROP_IGNORE_ENUMERATE
|
JSPROP_PERMANENT
|
JSPROP_IGNORE_PERMANENT
|
JSPROP_READONLY
|
JSPROP_IGNORE_READONLY
|
JSPROP_IGNORE_VALUE
|
JSPROP_GETTER
|
JSPROP_SETTER
|
JSPROP_REDEFINE_NONCONFIGURABLE
|
JSPROP_RESOLVING
|
SHADOWABLE
)
)
=
=
0
)
;
MOZ_ASSERT
(
!
hasAll
(
JSPROP_IGNORE_ENUMERATE
|
JSPROP_ENUMERATE
)
)
;
MOZ_ASSERT
(
!
hasAll
(
JSPROP_IGNORE_PERMANENT
|
JSPROP_PERMANENT
)
)
;
if
(
isAccessorDescriptor
(
)
)
{
MOZ_ASSERT
(
!
has
(
JSPROP_READONLY
)
)
;
MOZ_ASSERT
(
!
has
(
JSPROP_IGNORE_READONLY
)
)
;
MOZ_ASSERT
(
!
has
(
JSPROP_IGNORE_VALUE
)
)
;
MOZ_ASSERT
(
!
has
(
SHADOWABLE
)
)
;
MOZ_ASSERT
(
value
(
)
.
isUndefined
(
)
)
;
MOZ_ASSERT_IF
(
!
has
(
JSPROP_GETTER
)
!
getter
(
)
)
;
MOZ_ASSERT_IF
(
!
has
(
JSPROP_SETTER
)
!
setter
(
)
)
;
}
else
{
MOZ_ASSERT
(
!
hasAll
(
JSPROP_IGNORE_READONLY
|
JSPROP_READONLY
)
)
;
MOZ_ASSERT_IF
(
has
(
JSPROP_IGNORE_VALUE
)
value
(
)
.
isUndefined
(
)
)
;
}
MOZ_ASSERT_IF
(
has
(
JSPROP_RESOLVING
)
!
has
(
JSPROP_IGNORE_ENUMERATE
)
)
;
MOZ_ASSERT_IF
(
has
(
JSPROP_RESOLVING
)
!
has
(
JSPROP_IGNORE_PERMANENT
)
)
;
MOZ_ASSERT_IF
(
has
(
JSPROP_RESOLVING
)
!
has
(
JSPROP_IGNORE_READONLY
)
)
;
MOZ_ASSERT_IF
(
has
(
JSPROP_RESOLVING
)
!
has
(
JSPROP_IGNORE_VALUE
)
)
;
MOZ_ASSERT_IF
(
has
(
JSPROP_RESOLVING
)
!
has
(
JSPROP_REDEFINE_NONCONFIGURABLE
)
)
;
#
endif
}
void
assertComplete
(
)
const
{
#
ifdef
DEBUG
assertValid
(
)
;
MOZ_ASSERT
(
(
attributes
(
)
&
~
(
JSPROP_ENUMERATE
|
JSPROP_PERMANENT
|
JSPROP_READONLY
|
JSPROP_GETTER
|
JSPROP_SETTER
|
JSPROP_REDEFINE_NONCONFIGURABLE
|
JSPROP_RESOLVING
|
SHADOWABLE
)
)
=
=
0
)
;
MOZ_ASSERT_IF
(
isAccessorDescriptor
(
)
has
(
JSPROP_GETTER
)
&
&
has
(
JSPROP_SETTER
)
)
;
#
endif
}
void
assertCompleteIfFound
(
)
const
{
#
ifdef
DEBUG
if
(
object
(
)
)
assertComplete
(
)
;
#
endif
}
}
;
template
<
typename
Wrapper
>
class
MutableWrappedPtrOperations
<
JS
:
:
PropertyDescriptor
Wrapper
>
:
public
js
:
:
WrappedPtrOperations
<
JS
:
:
PropertyDescriptor
Wrapper
>
{
JS
:
:
PropertyDescriptor
&
desc
(
)
{
return
static_cast
<
Wrapper
*
>
(
this
)
-
>
get
(
)
;
}
public
:
void
clear
(
)
{
object
(
)
.
set
(
nullptr
)
;
setAttributes
(
0
)
;
setGetter
(
nullptr
)
;
setSetter
(
nullptr
)
;
value
(
)
.
setUndefined
(
)
;
}
void
initFields
(
JS
:
:
HandleObject
obj
JS
:
:
HandleValue
v
unsigned
attrs
JSGetterOp
getterOp
JSSetterOp
setterOp
)
{
object
(
)
.
set
(
obj
)
;
value
(
)
.
set
(
v
)
;
setAttributes
(
attrs
)
;
setGetter
(
getterOp
)
;
setSetter
(
setterOp
)
;
}
void
assign
(
JS
:
:
PropertyDescriptor
&
other
)
{
object
(
)
.
set
(
other
.
obj
)
;
setAttributes
(
other
.
attrs
)
;
setGetter
(
other
.
getter
)
;
setSetter
(
other
.
setter
)
;
value
(
)
.
set
(
other
.
value
)
;
}
void
setDataDescriptor
(
JS
:
:
HandleValue
v
unsigned
attrs
)
{
MOZ_ASSERT
(
(
attrs
&
~
(
JSPROP_ENUMERATE
|
JSPROP_PERMANENT
|
JSPROP_READONLY
|
JSPROP_IGNORE_ENUMERATE
|
JSPROP_IGNORE_PERMANENT
|
JSPROP_IGNORE_READONLY
)
)
=
=
0
)
;
object
(
)
.
set
(
nullptr
)
;
setAttributes
(
attrs
)
;
setGetter
(
nullptr
)
;
setSetter
(
nullptr
)
;
value
(
)
.
set
(
v
)
;
}
JS
:
:
MutableHandleObject
object
(
)
{
return
JS
:
:
MutableHandleObject
:
:
fromMarkedLocation
(
&
desc
(
)
.
obj
)
;
}
unsigned
&
attributesRef
(
)
{
return
desc
(
)
.
attrs
;
}
JSGetterOp
&
getter
(
)
{
return
desc
(
)
.
getter
;
}
JSSetterOp
&
setter
(
)
{
return
desc
(
)
.
setter
;
}
JS
:
:
MutableHandleValue
value
(
)
{
return
JS
:
:
MutableHandleValue
:
:
fromMarkedLocation
(
&
desc
(
)
.
value
)
;
}
void
setValue
(
JS
:
:
HandleValue
v
)
{
MOZ_ASSERT
(
!
(
desc
(
)
.
attrs
&
(
JSPROP_GETTER
|
JSPROP_SETTER
)
)
)
;
attributesRef
(
)
&
=
~
JSPROP_IGNORE_VALUE
;
value
(
)
.
set
(
v
)
;
}
void
setConfigurable
(
bool
configurable
)
{
setAttributes
(
(
desc
(
)
.
attrs
&
~
(
JSPROP_IGNORE_PERMANENT
|
JSPROP_PERMANENT
)
)
|
(
configurable
?
0
:
JSPROP_PERMANENT
)
)
;
}
void
setEnumerable
(
bool
enumerable
)
{
setAttributes
(
(
desc
(
)
.
attrs
&
~
(
JSPROP_IGNORE_ENUMERATE
|
JSPROP_ENUMERATE
)
)
|
(
enumerable
?
JSPROP_ENUMERATE
:
0
)
)
;
}
void
setWritable
(
bool
writable
)
{
MOZ_ASSERT
(
!
(
desc
(
)
.
attrs
&
(
JSPROP_GETTER
|
JSPROP_SETTER
)
)
)
;
setAttributes
(
(
desc
(
)
.
attrs
&
~
(
JSPROP_IGNORE_READONLY
|
JSPROP_READONLY
)
)
|
(
writable
?
0
:
JSPROP_READONLY
)
)
;
}
void
setAttributes
(
unsigned
attrs
)
{
desc
(
)
.
attrs
=
attrs
;
}
void
setGetter
(
JSGetterOp
op
)
{
desc
(
)
.
getter
=
op
;
}
void
setSetter
(
JSSetterOp
op
)
{
desc
(
)
.
setter
=
op
;
}
void
setGetterObject
(
JSObject
*
obj
)
{
desc
(
)
.
getter
=
reinterpret_cast
<
JSGetterOp
>
(
obj
)
;
desc
(
)
.
attrs
&
=
~
(
JSPROP_IGNORE_VALUE
|
JSPROP_IGNORE_READONLY
|
JSPROP_READONLY
)
;
desc
(
)
.
attrs
|
=
JSPROP_GETTER
;
}
void
setSetterObject
(
JSObject
*
obj
)
{
desc
(
)
.
setter
=
reinterpret_cast
<
JSSetterOp
>
(
obj
)
;
desc
(
)
.
attrs
&
=
~
(
JSPROP_IGNORE_VALUE
|
JSPROP_IGNORE_READONLY
|
JSPROP_READONLY
)
;
desc
(
)
.
attrs
|
=
JSPROP_SETTER
;
}
JS
:
:
MutableHandleObject
getterObject
(
)
{
MOZ_ASSERT
(
this
-
>
hasGetterObject
(
)
)
;
return
JS
:
:
MutableHandleObject
:
:
fromMarkedLocation
(
reinterpret_cast
<
JSObject
*
*
>
(
&
desc
(
)
.
getter
)
)
;
}
JS
:
:
MutableHandleObject
setterObject
(
)
{
MOZ_ASSERT
(
this
-
>
hasSetterObject
(
)
)
;
return
JS
:
:
MutableHandleObject
:
:
fromMarkedLocation
(
reinterpret_cast
<
JSObject
*
*
>
(
&
desc
(
)
.
setter
)
)
;
}
}
;
}
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
ObjectToCompletePropertyDescriptor
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleValue
descriptor
JS
:
:
MutableHandle
<
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
FromPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
MutableHandleValue
vp
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_GetPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
MutableHandleObject
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetPrototypeIfOrdinary
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isOrdinary
JS
:
:
MutableHandleObject
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleObject
proto
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsExtensible
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
extensible
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_PreventExtensions
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetImmutablePrototype
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
succeeded
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetOwnPropertyDescriptorById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetOwnUCPropertyDescriptor
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetPropertyDescriptorById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetPropertyDescriptor
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleValue
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JSNative
getter
JSNative
setter
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleObject
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleString
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
int32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
uint32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefinePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
double
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
HandleValue
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JSNative
getter
JSNative
setter
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
HandleObject
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
HandleString
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
int32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
uint32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
double
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
HandleValue
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JSNative
getter
JSNative
setter
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
HandleObject
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
HandleString
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
int32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
uint32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
double
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleValue
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JSNative
getter
JSNative
setter
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleObject
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleString
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
int32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
uint32_t
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
double
value
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasPropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
bool
*
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasOwnPropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_HasOwnProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ForwardGetPropertyTo
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleValue
receiver
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ForwardGetElementTo
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleObject
receiver
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetPropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ForwardSetPropertyTo
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleValue
v
JS
:
:
HandleValue
receiver
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetPropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleObject
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
HandleString
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
int32_t
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
uint32_t
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
double
v
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeletePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeleteProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeleteUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeleteElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
JS
:
:
ObjectOpResult
&
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeletePropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
jsid
id
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeleteProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DeleteElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_Enumerate
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
MutableHandle
<
JS
:
:
IdVector
>
props
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
IsCallable
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
IsConstructor
(
JSObject
*
obj
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_CallFunctionValue
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleValue
fval
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CallFunction
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleFunction
fun
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CallFunctionName
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
const
JS
:
:
HandleValueArray
&
args
JS
:
:
MutableHandleValue
rval
)
;
namespace
JS
{
static
inline
bool
Call
(
JSContext
*
cx
JS
:
:
HandleObject
thisObj
JS
:
:
HandleFunction
fun
const
JS
:
:
HandleValueArray
&
args
MutableHandleValue
rval
)
{
return
!
!
JS_CallFunction
(
cx
thisObj
fun
args
rval
)
;
}
static
inline
bool
Call
(
JSContext
*
cx
JS
:
:
HandleObject
thisObj
JS
:
:
HandleValue
fun
const
JS
:
:
HandleValueArray
&
args
MutableHandleValue
rval
)
{
return
!
!
JS_CallFunctionValue
(
cx
thisObj
fun
args
rval
)
;
}
static
inline
bool
Call
(
JSContext
*
cx
JS
:
:
HandleObject
thisObj
const
char
*
name
const
JS
:
:
HandleValueArray
&
args
MutableHandleValue
rval
)
{
return
!
!
JS_CallFunctionName
(
cx
thisObj
name
args
rval
)
;
}
extern
JS_PUBLIC_API
(
bool
)
Call
(
JSContext
*
cx
JS
:
:
HandleValue
thisv
JS
:
:
HandleValue
fun
const
JS
:
:
HandleValueArray
&
args
MutableHandleValue
rval
)
;
static
inline
bool
Call
(
JSContext
*
cx
JS
:
:
HandleValue
thisv
JS
:
:
HandleObject
funObj
const
JS
:
:
HandleValueArray
&
args
MutableHandleValue
rval
)
{
MOZ_ASSERT
(
funObj
)
;
JS
:
:
RootedValue
fun
(
cx
JS
:
:
ObjectValue
(
*
funObj
)
)
;
return
Call
(
cx
thisv
fun
args
rval
)
;
}
extern
JS_PUBLIC_API
(
bool
)
Construct
(
JSContext
*
cx
JS
:
:
HandleValue
fun
HandleObject
newTarget
const
JS
:
:
HandleValueArray
&
args
MutableHandleObject
objp
)
;
extern
JS_PUBLIC_API
(
bool
)
Construct
(
JSContext
*
cx
JS
:
:
HandleValue
fun
const
JS
:
:
HandleValueArray
&
args
MutableHandleObject
objp
)
;
}
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_New
(
JSContext
*
cx
JS
:
:
HandleObject
ctor
const
JS
:
:
HandleValueArray
&
args
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_DefineObject
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
const
JSClass
*
clasp
=
nullptr
unsigned
attrs
=
0
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineConstDoubles
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
JSConstDoubleSpec
*
cds
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineConstIntegers
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
JSConstIntegerSpec
*
cis
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineProperties
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
JSPropertySpec
*
ps
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AlreadyHasOwnPropertyById
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AlreadyHasOwnProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char
*
name
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AlreadyHasOwnUCProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
const
char16_t
*
name
size_t
namelen
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AlreadyHasOwnElement
(
JSContext
*
cx
JS
:
:
HandleObject
obj
uint32_t
index
bool
*
foundp
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewArrayObject
(
JSContext
*
cx
const
JS
:
:
HandleValueArray
&
contents
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewArrayObject
(
JSContext
*
cx
size_t
length
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsArrayObject
(
JSContext
*
cx
JS
:
:
HandleValue
value
bool
*
isArray
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsArrayObject
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isArray
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetArrayLength
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
uint32_t
*
lengthp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetArrayLength
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
uint32_t
length
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
IsMapObject
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isMap
)
;
extern
JS_PUBLIC_API
(
bool
)
IsSetObject
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isSet
)
;
}
JS_PUBLIC_API
(
void
)
JS_SetAllNonReservedSlotsToUndefined
(
JSContext
*
cx
JSObject
*
objArg
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewArrayBufferWithContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewArrayBufferWithExternalContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_StealArrayBufferContents
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_ExternalizeArrayBufferContents
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewMappedArrayBufferWithContents
(
JSContext
*
cx
size_t
nbytes
void
*
contents
)
;
extern
JS_PUBLIC_API
(
void
*
)
JS_CreateMappedArrayBufferContents
(
int
fd
size_t
offset
size_t
length
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReleaseMappedArrayBufferContents
(
void
*
contents
size_t
length
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
JS_GetReservedSlot
(
JSObject
*
obj
uint32_t
index
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetReservedSlot
(
JSObject
*
obj
uint32_t
index
const
JS
:
:
Value
&
v
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_NewFunction
(
JSContext
*
cx
JSNative
call
unsigned
nargs
unsigned
flags
const
char
*
name
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
JSFunction
*
)
GetSelfHostedFunction
(
JSContext
*
cx
const
char
*
selfHostedName
HandleId
id
unsigned
nargs
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
NewFunctionFromSpec
(
JSContext
*
cx
const
JSFunctionSpec
*
fs
HandleId
id
)
;
}
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetFunctionObject
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_GetFunctionId
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_GetFunctionDisplayId
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
uint16_t
)
JS_GetFunctionArity
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ObjectIsFunction
(
JSContext
*
cx
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsNativeFunction
(
JSObject
*
funobj
JSNative
call
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsConstructor
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DefineFunctions
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
JSFunctionSpec
*
fs
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_DefineFunction
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
name
JSNative
call
unsigned
nargs
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_DefineUCFunction
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char16_t
*
name
size_t
namelen
JSNative
call
unsigned
nargs
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
JS_DefineFunctionById
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
jsid
>
id
JSNative
call
unsigned
nargs
unsigned
attrs
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsFunctionBound
(
JSFunction
*
fun
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetBoundFunctionTarget
(
JSFunction
*
fun
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
JSObject
*
)
CloneFunctionObject
(
JSContext
*
cx
HandleObject
funobj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
CloneFunctionObject
(
JSContext
*
cx
HandleObject
funobj
AutoObjectVector
&
scopeChain
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_BufferIsCompilableUnit
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
char
*
utf8
size_t
length
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CompileScript
(
JSContext
*
cx
const
char
*
ascii
size_t
length
const
JS
:
:
CompileOptions
&
options
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CompileUCScript
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
const
JS
:
:
CompileOptions
&
options
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_GetGlobalFromScript
(
JSScript
*
script
)
;
extern
JS_PUBLIC_API
(
const
char
*
)
JS_GetScriptFilename
(
JSScript
*
script
)
;
extern
JS_PUBLIC_API
(
unsigned
)
JS_GetScriptBaseLineNumber
(
JSContext
*
cx
JSScript
*
script
)
;
extern
JS_PUBLIC_API
(
JSScript
*
)
JS_GetFunctionScript
(
JSContext
*
cx
JS
:
:
HandleFunction
fun
)
;
namespace
JS
{
enum
class
AsmJSOption
:
uint8_t
{
Enabled
Disabled
DisabledByDebugger
}
;
class
JS_FRIEND_API
(
TransitiveCompileOptions
)
{
protected
:
bool
mutedErrors_
;
const
char
*
filename_
;
const
char
*
introducerFilename_
;
const
char16_t
*
sourceMapURL_
;
TransitiveCompileOptions
(
)
:
mutedErrors_
(
false
)
filename_
(
nullptr
)
introducerFilename_
(
nullptr
)
sourceMapURL_
(
nullptr
)
version
(
JSVERSION_UNKNOWN
)
versionSet
(
false
)
utf8
(
false
)
selfHostingMode
(
false
)
canLazilyParse
(
true
)
strictOption
(
false
)
extraWarningsOption
(
false
)
forEachStatementOption
(
false
)
werrorOption
(
false
)
asmJSOption
(
AsmJSOption
:
:
Disabled
)
throwOnAsmJSValidationFailureOption
(
false
)
forceAsync
(
false
)
sourceIsLazy
(
false
)
allowHTMLComments
(
true
)
isProbablySystemOrAddonCode
(
false
)
introductionType
(
nullptr
)
introductionLineno
(
0
)
introductionOffset
(
0
)
hasIntroductionInfo
(
false
)
{
}
void
copyPODTransitiveOptions
(
const
TransitiveCompileOptions
&
rhs
)
;
public
:
bool
mutedErrors
(
)
const
{
return
mutedErrors_
;
}
const
char
*
filename
(
)
const
{
return
filename_
;
}
const
char
*
introducerFilename
(
)
const
{
return
introducerFilename_
;
}
const
char16_t
*
sourceMapURL
(
)
const
{
return
sourceMapURL_
;
}
virtual
JSObject
*
element
(
)
const
=
0
;
virtual
JSString
*
elementAttributeName
(
)
const
=
0
;
virtual
JSScript
*
introductionScript
(
)
const
=
0
;
JSVersion
version
;
bool
versionSet
;
bool
utf8
;
bool
selfHostingMode
;
bool
canLazilyParse
;
bool
strictOption
;
bool
extraWarningsOption
;
bool
forEachStatementOption
;
bool
werrorOption
;
AsmJSOption
asmJSOption
;
bool
throwOnAsmJSValidationFailureOption
;
bool
forceAsync
;
bool
sourceIsLazy
;
bool
allowHTMLComments
;
bool
isProbablySystemOrAddonCode
;
const
char
*
introductionType
;
unsigned
introductionLineno
;
uint32_t
introductionOffset
;
bool
hasIntroductionInfo
;
private
:
void
operator
=
(
const
TransitiveCompileOptions
&
)
=
delete
;
}
;
class
JS_FRIEND_API
(
ReadOnlyCompileOptions
)
:
public
TransitiveCompileOptions
{
friend
class
CompileOptions
;
protected
:
ReadOnlyCompileOptions
(
)
:
TransitiveCompileOptions
(
)
lineno
(
1
)
column
(
0
)
scriptSourceOffset
(
0
)
isRunOnce
(
false
)
noScriptRval
(
false
)
{
}
void
copyPODOptions
(
const
ReadOnlyCompileOptions
&
rhs
)
;
public
:
bool
mutedErrors
(
)
const
{
return
mutedErrors_
;
}
const
char
*
filename
(
)
const
{
return
filename_
;
}
const
char
*
introducerFilename
(
)
const
{
return
introducerFilename_
;
}
const
char16_t
*
sourceMapURL
(
)
const
{
return
sourceMapURL_
;
}
virtual
JSObject
*
element
(
)
const
=
0
;
virtual
JSString
*
elementAttributeName
(
)
const
=
0
;
virtual
JSScript
*
introductionScript
(
)
const
=
0
;
unsigned
lineno
;
unsigned
column
;
unsigned
scriptSourceOffset
;
bool
isRunOnce
;
bool
noScriptRval
;
private
:
void
operator
=
(
const
ReadOnlyCompileOptions
&
)
=
delete
;
}
;
class
JS_FRIEND_API
(
OwningCompileOptions
)
:
public
ReadOnlyCompileOptions
{
PersistentRootedObject
elementRoot
;
PersistentRootedString
elementAttributeNameRoot
;
PersistentRootedScript
introductionScriptRoot
;
public
:
explicit
OwningCompileOptions
(
JSContext
*
cx
)
;
~
OwningCompileOptions
(
)
;
JSObject
*
element
(
)
const
override
{
return
elementRoot
;
}
JSString
*
elementAttributeName
(
)
const
override
{
return
elementAttributeNameRoot
;
}
JSScript
*
introductionScript
(
)
const
override
{
return
introductionScriptRoot
;
}
bool
copy
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
rhs
)
;
bool
setFile
(
JSContext
*
cx
const
char
*
f
)
;
bool
setFileAndLine
(
JSContext
*
cx
const
char
*
f
unsigned
l
)
;
bool
setSourceMapURL
(
JSContext
*
cx
const
char16_t
*
s
)
;
bool
setIntroducerFilename
(
JSContext
*
cx
const
char
*
s
)
;
OwningCompileOptions
&
setLine
(
unsigned
l
)
{
lineno
=
l
;
return
*
this
;
}
OwningCompileOptions
&
setElement
(
JSObject
*
e
)
{
elementRoot
=
e
;
return
*
this
;
}
OwningCompileOptions
&
setElementAttributeName
(
JSString
*
p
)
{
elementAttributeNameRoot
=
p
;
return
*
this
;
}
OwningCompileOptions
&
setIntroductionScript
(
JSScript
*
s
)
{
introductionScriptRoot
=
s
;
return
*
this
;
}
OwningCompileOptions
&
setMutedErrors
(
bool
mute
)
{
mutedErrors_
=
mute
;
return
*
this
;
}
OwningCompileOptions
&
setVersion
(
JSVersion
v
)
{
version
=
v
;
versionSet
=
true
;
return
*
this
;
}
OwningCompileOptions
&
setUTF8
(
bool
u
)
{
utf8
=
u
;
return
*
this
;
}
OwningCompileOptions
&
setColumn
(
unsigned
c
)
{
column
=
c
;
return
*
this
;
}
OwningCompileOptions
&
setScriptSourceOffset
(
unsigned
o
)
{
scriptSourceOffset
=
o
;
return
*
this
;
}
OwningCompileOptions
&
setIsRunOnce
(
bool
once
)
{
isRunOnce
=
once
;
return
*
this
;
}
OwningCompileOptions
&
setNoScriptRval
(
bool
nsr
)
{
noScriptRval
=
nsr
;
return
*
this
;
}
OwningCompileOptions
&
setSelfHostingMode
(
bool
shm
)
{
selfHostingMode
=
shm
;
return
*
this
;
}
OwningCompileOptions
&
setCanLazilyParse
(
bool
clp
)
{
canLazilyParse
=
clp
;
return
*
this
;
}
OwningCompileOptions
&
setSourceIsLazy
(
bool
l
)
{
sourceIsLazy
=
l
;
return
*
this
;
}
OwningCompileOptions
&
setIntroductionType
(
const
char
*
t
)
{
introductionType
=
t
;
return
*
this
;
}
bool
setIntroductionInfo
(
JSContext
*
cx
const
char
*
introducerFn
const
char
*
intro
unsigned
line
JSScript
*
script
uint32_t
offset
)
{
if
(
!
setIntroducerFilename
(
cx
introducerFn
)
)
return
false
;
introductionType
=
intro
;
introductionLineno
=
line
;
introductionScriptRoot
=
script
;
introductionOffset
=
offset
;
hasIntroductionInfo
=
true
;
return
true
;
}
private
:
void
operator
=
(
const
CompileOptions
&
rhs
)
=
delete
;
}
;
class
MOZ_STACK_CLASS
JS_FRIEND_API
(
CompileOptions
)
final
:
public
ReadOnlyCompileOptions
{
RootedObject
elementRoot
;
RootedString
elementAttributeNameRoot
;
RootedScript
introductionScriptRoot
;
public
:
explicit
CompileOptions
(
JSContext
*
cx
JSVersion
version
=
JSVERSION_UNKNOWN
)
;
CompileOptions
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
rhs
)
:
ReadOnlyCompileOptions
(
)
elementRoot
(
cx
)
elementAttributeNameRoot
(
cx
)
introductionScriptRoot
(
cx
)
{
copyPODOptions
(
rhs
)
;
filename_
=
rhs
.
filename
(
)
;
introducerFilename_
=
rhs
.
introducerFilename
(
)
;
sourceMapURL_
=
rhs
.
sourceMapURL
(
)
;
elementRoot
=
rhs
.
element
(
)
;
elementAttributeNameRoot
=
rhs
.
elementAttributeName
(
)
;
introductionScriptRoot
=
rhs
.
introductionScript
(
)
;
}
CompileOptions
(
JSContext
*
cx
const
TransitiveCompileOptions
&
rhs
)
:
ReadOnlyCompileOptions
(
)
elementRoot
(
cx
)
elementAttributeNameRoot
(
cx
)
introductionScriptRoot
(
cx
)
{
copyPODTransitiveOptions
(
rhs
)
;
filename_
=
rhs
.
filename
(
)
;
introducerFilename_
=
rhs
.
introducerFilename
(
)
;
sourceMapURL_
=
rhs
.
sourceMapURL
(
)
;
elementRoot
=
rhs
.
element
(
)
;
elementAttributeNameRoot
=
rhs
.
elementAttributeName
(
)
;
introductionScriptRoot
=
rhs
.
introductionScript
(
)
;
}
JSObject
*
element
(
)
const
override
{
return
elementRoot
;
}
JSString
*
elementAttributeName
(
)
const
override
{
return
elementAttributeNameRoot
;
}
JSScript
*
introductionScript
(
)
const
override
{
return
introductionScriptRoot
;
}
CompileOptions
&
setFile
(
const
char
*
f
)
{
filename_
=
f
;
return
*
this
;
}
CompileOptions
&
setLine
(
unsigned
l
)
{
lineno
=
l
;
return
*
this
;
}
CompileOptions
&
setFileAndLine
(
const
char
*
f
unsigned
l
)
{
filename_
=
f
;
lineno
=
l
;
return
*
this
;
}
CompileOptions
&
setSourceMapURL
(
const
char16_t
*
s
)
{
sourceMapURL_
=
s
;
return
*
this
;
}
CompileOptions
&
setElement
(
JSObject
*
e
)
{
elementRoot
=
e
;
return
*
this
;
}
CompileOptions
&
setElementAttributeName
(
JSString
*
p
)
{
elementAttributeNameRoot
=
p
;
return
*
this
;
}
CompileOptions
&
setIntroductionScript
(
JSScript
*
s
)
{
introductionScriptRoot
=
s
;
return
*
this
;
}
CompileOptions
&
setMutedErrors
(
bool
mute
)
{
mutedErrors_
=
mute
;
return
*
this
;
}
CompileOptions
&
setVersion
(
JSVersion
v
)
{
version
=
v
;
versionSet
=
true
;
return
*
this
;
}
CompileOptions
&
setUTF8
(
bool
u
)
{
utf8
=
u
;
return
*
this
;
}
CompileOptions
&
setColumn
(
unsigned
c
)
{
column
=
c
;
return
*
this
;
}
CompileOptions
&
setScriptSourceOffset
(
unsigned
o
)
{
scriptSourceOffset
=
o
;
return
*
this
;
}
CompileOptions
&
setIsRunOnce
(
bool
once
)
{
isRunOnce
=
once
;
return
*
this
;
}
CompileOptions
&
setNoScriptRval
(
bool
nsr
)
{
noScriptRval
=
nsr
;
return
*
this
;
}
CompileOptions
&
setSelfHostingMode
(
bool
shm
)
{
selfHostingMode
=
shm
;
return
*
this
;
}
CompileOptions
&
setCanLazilyParse
(
bool
clp
)
{
canLazilyParse
=
clp
;
return
*
this
;
}
CompileOptions
&
setSourceIsLazy
(
bool
l
)
{
sourceIsLazy
=
l
;
return
*
this
;
}
CompileOptions
&
setIntroductionType
(
const
char
*
t
)
{
introductionType
=
t
;
return
*
this
;
}
CompileOptions
&
setIntroductionInfo
(
const
char
*
introducerFn
const
char
*
intro
unsigned
line
JSScript
*
script
uint32_t
offset
)
{
introducerFilename_
=
introducerFn
;
introductionType
=
intro
;
introductionLineno
=
line
;
introductionScriptRoot
=
script
;
introductionOffset
=
offset
;
hasIntroductionInfo
=
true
;
return
*
this
;
}
CompileOptions
&
maybeMakeStrictMode
(
bool
strict
)
{
strictOption
=
strictOption
|
|
strict
;
return
*
this
;
}
private
:
void
operator
=
(
const
CompileOptions
&
rhs
)
=
delete
;
}
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
FILE
*
file
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
Compile
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
filename
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
FILE
*
file
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileForNonSyntacticScope
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
filename
JS
:
:
MutableHandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
CanCompileOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
size_t
length
)
;
extern
JS_PUBLIC_API
(
bool
)
CanDecodeOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
size_t
length
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileOffThread
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
(
JSScript
*
)
FinishOffThreadScript
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
void
)
CancelOffThreadScript
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileOffThreadModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
FinishOffThreadModule
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
void
)
CancelOffThreadModule
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
bool
)
DecodeOffThreadScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
mozilla
:
:
Vector
<
uint8_t
>
&
buffer
size_t
cursor
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
(
bool
)
DecodeOffThreadScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
mozilla
:
:
Range
<
uint8_t
>
&
range
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
(
JSScript
*
)
FinishOffThreadScriptDecoder
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
void
)
CancelOffThreadScriptDecoder
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
bool
)
DecodeMultiOffThreadScripts
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
mozilla
:
:
Vector
<
TranscodeSource
>
&
sources
OffThreadCompileCallback
callback
void
*
callbackData
)
;
extern
JS_PUBLIC_API
(
bool
)
FinishMultiOffThreadScriptsDecoder
(
JSContext
*
cx
void
*
token
JS
:
:
MutableHandle
<
JS
:
:
ScriptVector
>
scripts
)
;
extern
JS_PUBLIC_API
(
void
)
CancelMultiOffThreadScriptsDecoder
(
JSContext
*
cx
void
*
token
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileFunction
(
JSContext
*
cx
AutoObjectVector
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char
*
name
unsigned
nargs
const
char
*
const
*
argnames
const
char16_t
*
chars
size_t
length
JS
:
:
MutableHandleFunction
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileFunction
(
JSContext
*
cx
AutoObjectVector
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char
*
name
unsigned
nargs
const
char
*
const
*
argnames
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleFunction
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileFunction
(
JSContext
*
cx
AutoObjectVector
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char
*
name
unsigned
nargs
const
char
*
const
*
argnames
const
char
*
bytes
size_t
length
JS
:
:
MutableHandleFunction
fun
)
;
}
extern
JS_PUBLIC_API
(
JSString
*
)
JS_DecompileScript
(
JSContext
*
cx
JS
:
:
Handle
<
JSScript
*
>
script
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_DecompileFunction
(
JSContext
*
cx
JS
:
:
Handle
<
JSFunction
*
>
fun
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
HandleScript
script
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
HandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
AutoObjectVector
&
envChain
JS
:
:
HandleScript
script
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteScript
(
JSContext
*
cx
JS
:
:
AutoObjectVector
&
envChain
JS
:
:
HandleScript
script
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
CloneAndExecuteScript
(
JSContext
*
cx
JS
:
:
Handle
<
JSScript
*
>
script
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
CloneAndExecuteScript
(
JSContext
*
cx
JS
:
:
AutoObjectVector
&
envChain
JS
:
:
Handle
<
JSScript
*
>
script
JS
:
:
MutableHandleValue
rval
)
;
}
namespace
JS
{
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
AutoObjectVector
&
envChain
const
ReadOnlyCompileOptions
&
options
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
AutoObjectVector
&
envChain
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
bytes
size_t
length
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
Evaluate
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
char
*
filename
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
JSFunction
*
)
GetModuleResolveHook
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
SetModuleResolveHook
(
JSContext
*
cx
JS
:
:
HandleFunction
func
)
;
extern
JS_PUBLIC_API
(
bool
)
CompileModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
SourceBufferHolder
&
srcBuf
JS
:
:
MutableHandleObject
moduleRecord
)
;
extern
JS_PUBLIC_API
(
void
)
SetModuleHostDefinedField
(
JSObject
*
module
const
JS
:
:
Value
&
value
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
GetModuleHostDefinedField
(
JSObject
*
module
)
;
extern
JS_PUBLIC_API
(
bool
)
ModuleInstantiate
(
JSContext
*
cx
JS
:
:
HandleObject
moduleRecord
)
;
extern
JS_PUBLIC_API
(
bool
)
ModuleEvaluate
(
JSContext
*
cx
JS
:
:
HandleObject
moduleRecord
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetRequestedModules
(
JSContext
*
cx
JS
:
:
HandleObject
moduleRecord
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
GetRequestedModuleSpecifier
(
JSContext
*
cx
JS
:
:
HandleValue
requestedModuleObject
)
;
extern
JS_PUBLIC_API
(
void
)
GetRequestedModuleSourcePos
(
JSContext
*
cx
JS
:
:
HandleValue
requestedModuleObject
uint32_t
*
lineNumber
uint32_t
*
columnNumber
)
;
extern
JS_PUBLIC_API
(
bool
)
IsModuleErrored
(
JSObject
*
moduleRecord
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
GetModuleError
(
JSObject
*
moduleRecord
)
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_CheckForInterrupt
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_AddInterruptCallback
(
JSContext
*
cx
JSInterruptCallback
callback
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_DisableInterruptCallback
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ResetInterruptCallback
(
JSContext
*
cx
bool
enable
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RequestInterruptCallback
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RequestInterruptCallbackCanWait
(
JSContext
*
cx
)
;
namespace
JS
{
extern
JS_PUBLIC_API
(
void
)
SetGetIncumbentGlobalCallback
(
JSContext
*
cx
JSGetIncumbentGlobalCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
SetEnqueuePromiseJobCallback
(
JSContext
*
cx
JSEnqueuePromiseJobCallback
callback
void
*
data
=
nullptr
)
;
extern
JS_PUBLIC_API
(
void
)
SetPromiseRejectionTrackerCallback
(
JSContext
*
cx
JSPromiseRejectionTrackerCallback
callback
void
*
data
=
nullptr
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
NewPromiseObject
(
JSContext
*
cx
JS
:
:
HandleObject
executor
JS
:
:
HandleObject
proto
=
nullptr
)
;
extern
JS_PUBLIC_API
(
bool
)
IsPromiseObject
(
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetPromiseConstructor
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetPromisePrototype
(
JSContext
*
cx
)
;
enum
class
PromiseState
{
Pending
Fulfilled
Rejected
}
;
extern
JS_PUBLIC_API
(
PromiseState
)
GetPromiseState
(
JS
:
:
HandleObject
promise
)
;
JS_PUBLIC_API
(
uint64_t
)
GetPromiseID
(
JS
:
:
HandleObject
promise
)
;
extern
JS_PUBLIC_API
(
JS
:
:
Value
)
GetPromiseResult
(
JS
:
:
HandleObject
promise
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetPromiseAllocationSite
(
JS
:
:
HandleObject
promise
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetPromiseResolutionSite
(
JS
:
:
HandleObject
promise
)
;
#
ifdef
DEBUG
extern
JS_PUBLIC_API
(
void
)
DumpPromiseAllocationSite
(
JSContext
*
cx
JS
:
:
HandleObject
promise
)
;
extern
JS_PUBLIC_API
(
void
)
DumpPromiseResolutionSite
(
JSContext
*
cx
JS
:
:
HandleObject
promise
)
;
#
endif
extern
JS_PUBLIC_API
(
JSObject
*
)
CallOriginalPromiseResolve
(
JSContext
*
cx
JS
:
:
HandleValue
resolutionValue
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
CallOriginalPromiseReject
(
JSContext
*
cx
JS
:
:
HandleValue
rejectionValue
)
;
extern
JS_PUBLIC_API
(
bool
)
ResolvePromise
(
JSContext
*
cx
JS
:
:
HandleObject
promiseObj
JS
:
:
HandleValue
resolutionValue
)
;
extern
JS_PUBLIC_API
(
bool
)
RejectPromise
(
JSContext
*
cx
JS
:
:
HandleObject
promiseObj
JS
:
:
HandleValue
rejectionValue
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
CallOriginalPromiseThen
(
JSContext
*
cx
JS
:
:
HandleObject
promise
JS
:
:
HandleObject
onResolve
JS
:
:
HandleObject
onReject
)
;
extern
JS_PUBLIC_API
(
bool
)
AddPromiseReactions
(
JSContext
*
cx
JS
:
:
HandleObject
promise
JS
:
:
HandleObject
onResolve
JS
:
:
HandleObject
onReject
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetWaitForAllPromise
(
JSContext
*
cx
const
JS
:
:
AutoObjectVector
&
promises
)
;
class
JS_PUBLIC_API
(
Dispatchable
)
{
protected
:
Dispatchable
(
)
=
default
;
virtual
~
Dispatchable
(
)
=
default
;
public
:
enum
MaybeShuttingDown
{
NotShuttingDown
ShuttingDown
}
;
virtual
void
run
(
JSContext
*
cx
MaybeShuttingDown
maybeShuttingDown
)
=
0
;
}
;
typedef
bool
(
*
DispatchToEventLoopCallback
)
(
void
*
closure
Dispatchable
*
dispatchable
)
;
extern
JS_PUBLIC_API
(
void
)
InitDispatchToEventLoop
(
JSContext
*
cx
DispatchToEventLoopCallback
callback
void
*
closure
)
;
class
JS_PUBLIC_API
(
StreamConsumer
)
{
protected
:
StreamConsumer
(
)
=
default
;
virtual
~
StreamConsumer
(
)
=
default
;
public
:
virtual
bool
consumeChunk
(
const
uint8_t
*
begin
size_t
length
)
=
0
;
enum
CloseReason
{
EndOfFile
Error
}
;
virtual
void
streamClosed
(
CloseReason
reason
)
=
0
;
}
;
enum
class
MimeType
{
Wasm
}
;
typedef
bool
(
*
ConsumeStreamCallback
)
(
JSContext
*
cx
JS
:
:
HandleObject
obj
MimeType
mimeType
StreamConsumer
*
consumer
)
;
extern
JS_PUBLIC_API
(
void
)
InitConsumeStreamCallback
(
JSContext
*
cx
ConsumeStreamCallback
callback
)
;
extern
JS_PUBLIC_API
(
void
)
ShutdownAsyncTasks
(
JSContext
*
cx
)
;
class
MOZ_STACK_CLASS
JS_PUBLIC_API
(
AutoSetAsyncStackForNewCalls
)
{
JSContext
*
cx
;
RootedObject
oldAsyncStack
;
const
char
*
oldAsyncCause
;
bool
oldAsyncCallIsExplicit
;
public
:
enum
class
AsyncCallKind
{
IMPLICIT
EXPLICIT
}
;
AutoSetAsyncStackForNewCalls
(
JSContext
*
cx
HandleObject
stack
const
char
*
asyncCause
AsyncCallKind
kind
=
AsyncCallKind
:
:
IMPLICIT
)
;
~
AutoSetAsyncStackForNewCalls
(
)
;
}
;
}
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewStringCopyN
(
JSContext
*
cx
const
char
*
s
size_t
n
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewStringCopyZ
(
JSContext
*
cx
const
char
*
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewStringCopyUTF8Z
(
JSContext
*
cx
const
JS
:
:
ConstUTF8CharsZ
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewStringCopyUTF8N
(
JSContext
*
cx
const
JS
:
:
UTF8Chars
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeAndPinJSString
(
JSContext
*
cx
JS
:
:
HandleString
str
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeStringN
(
JSContext
*
cx
const
char
*
s
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeString
(
JSContext
*
cx
const
char
*
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeAndPinStringN
(
JSContext
*
cx
const
char
*
s
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeAndPinString
(
JSContext
*
cx
const
char
*
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewUCString
(
JSContext
*
cx
char16_t
*
chars
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewUCStringCopyN
(
JSContext
*
cx
const
char16_t
*
s
size_t
n
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewUCStringCopyZ
(
JSContext
*
cx
const
char16_t
*
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeUCStringN
(
JSContext
*
cx
const
char16_t
*
s
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeUCString
(
JSContext
*
cx
const
char16_t
*
s
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeAndPinUCStringN
(
JSContext
*
cx
const
char16_t
*
s
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_AtomizeAndPinUCString
(
JSContext
*
cx
const
char16_t
*
s
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CompareStrings
(
JSContext
*
cx
JSString
*
str1
JSString
*
str2
int32_t
*
result
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_StringEqualsAscii
(
JSContext
*
cx
JSString
*
str
const
char
*
asciiBytes
bool
*
match
)
;
extern
JS_PUBLIC_API
(
size_t
)
JS_PutEscapedString
(
JSContext
*
cx
char
*
buffer
size_t
size
JSString
*
str
char
quote
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_FileEscapedString
(
FILE
*
fp
JSString
*
str
char
quote
)
;
extern
JS_PUBLIC_API
(
size_t
)
JS_GetStringLength
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_StringIsFlat
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_StringHasLatin1Chars
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
const
JS
:
:
Latin1Char
*
)
JS_GetLatin1StringCharsAndLength
(
JSContext
*
cx
const
JS
:
:
AutoRequireNoGC
&
nogc
JSString
*
str
size_t
*
length
)
;
extern
JS_PUBLIC_API
(
const
char16_t
*
)
JS_GetTwoByteStringCharsAndLength
(
JSContext
*
cx
const
JS
:
:
AutoRequireNoGC
&
nogc
JSString
*
str
size_t
*
length
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetStringCharAt
(
JSContext
*
cx
JSString
*
str
size_t
index
char16_t
*
res
)
;
extern
JS_PUBLIC_API
(
char16_t
)
JS_GetFlatStringCharAt
(
JSFlatString
*
str
size_t
index
)
;
extern
JS_PUBLIC_API
(
const
char16_t
*
)
JS_GetTwoByteExternalStringChars
(
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CopyStringChars
(
JSContext
*
cx
mozilla
:
:
Range
<
char16_t
>
dest
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
JSFlatString
*
)
JS_FlattenString
(
JSContext
*
cx
JSString
*
str
)
;
extern
JS_PUBLIC_API
(
const
JS
:
:
Latin1Char
*
)
JS_GetLatin1FlatStringChars
(
const
JS
:
:
AutoRequireNoGC
&
nogc
JSFlatString
*
str
)
;
extern
JS_PUBLIC_API
(
const
char16_t
*
)
JS_GetTwoByteFlatStringChars
(
const
JS
:
:
AutoRequireNoGC
&
nogc
JSFlatString
*
str
)
;
static
MOZ_ALWAYS_INLINE
JSFlatString
*
JSID_TO_FLAT_STRING
(
jsid
id
)
{
MOZ_ASSERT
(
JSID_IS_STRING
(
id
)
)
;
return
(
JSFlatString
*
)
(
JSID_BITS
(
id
)
)
;
}
static
MOZ_ALWAYS_INLINE
JSFlatString
*
JS_ASSERT_STRING_IS_FLAT
(
JSString
*
str
)
{
MOZ_ASSERT
(
JS_StringIsFlat
(
str
)
)
;
return
(
JSFlatString
*
)
str
;
}
static
MOZ_ALWAYS_INLINE
JSString
*
JS_FORGET_STRING_FLATNESS
(
JSFlatString
*
fstr
)
{
return
(
JSString
*
)
fstr
;
}
extern
JS_PUBLIC_API
(
bool
)
JS_FlatStringEqualsAscii
(
JSFlatString
*
str
const
char
*
asciiBytes
)
;
extern
JS_PUBLIC_API
(
size_t
)
JS_PutEscapedFlatString
(
char
*
buffer
size_t
size
JSFlatString
*
str
char
quote
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_NewDependentString
(
JSContext
*
cx
JS
:
:
HandleString
str
size_t
start
size_t
length
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_ConcatStrings
(
JSContext
*
cx
JS
:
:
HandleString
left
JS
:
:
HandleString
right
)
;
JS_PUBLIC_API
(
bool
)
JS_DecodeBytes
(
JSContext
*
cx
const
char
*
src
size_t
srclen
char16_t
*
dst
size_t
*
dstlenp
)
;
JS_PUBLIC_API
(
char
*
)
JS_EncodeString
(
JSContext
*
cx
JSString
*
str
)
;
JS_PUBLIC_API
(
char
*
)
JS_EncodeStringToUTF8
(
JSContext
*
cx
JS
:
:
HandleString
str
)
;
JS_PUBLIC_API
(
size_t
)
JS_GetStringEncodingLength
(
JSContext
*
cx
JSString
*
str
)
;
JS_PUBLIC_API
(
size_t
)
JS_EncodeStringToBuffer
(
JSContext
*
cx
JSString
*
str
char
*
buffer
size_t
length
)
;
class
MOZ_RAII
JSAutoByteString
{
public
:
JSAutoByteString
(
JSContext
*
cx
JSString
*
str
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mBytes
(
JS_EncodeString
(
cx
str
)
)
{
MOZ_ASSERT
(
cx
)
;
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
explicit
JSAutoByteString
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
:
mBytes
(
nullptr
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
JSAutoByteString
(
)
{
JS_free
(
nullptr
mBytes
)
;
}
void
initBytes
(
JS
:
:
UniqueChars
&
&
bytes
)
{
MOZ_ASSERT
(
!
mBytes
)
;
mBytes
=
bytes
.
release
(
)
;
}
char
*
encodeLatin1
(
JSContext
*
cx
JSString
*
str
)
{
MOZ_ASSERT
(
!
mBytes
)
;
MOZ_ASSERT
(
cx
)
;
mBytes
=
JS_EncodeString
(
cx
str
)
;
return
mBytes
;
}
char
*
encodeUtf8
(
JSContext
*
cx
JS
:
:
HandleString
str
)
{
MOZ_ASSERT
(
!
mBytes
)
;
MOZ_ASSERT
(
cx
)
;
mBytes
=
JS_EncodeStringToUTF8
(
cx
str
)
;
return
mBytes
;
}
void
clear
(
)
{
js_free
(
mBytes
)
;
mBytes
=
nullptr
;
}
char
*
ptr
(
)
const
{
return
mBytes
;
}
bool
operator
!
(
)
const
{
return
!
mBytes
;
}
size_t
length
(
)
const
{
if
(
!
mBytes
)
return
0
;
return
strlen
(
mBytes
)
;
}
private
:
char
*
mBytes
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
JSAutoByteString
(
const
JSAutoByteString
&
another
)
;
JSAutoByteString
&
operator
=
(
const
JSAutoByteString
&
another
)
;
}
;
namespace
JS
{
extern
JS_PUBLIC_API
(
JSAddonId
*
)
NewAddonId
(
JSContext
*
cx
JS
:
:
HandleString
str
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
StringOfAddonId
(
JSAddonId
*
id
)
;
extern
JS_PUBLIC_API
(
JSAddonId
*
)
AddonIdOfObject
(
JSObject
*
obj
)
;
}
namespace
JS
{
JS_PUBLIC_API
(
Symbol
*
)
NewSymbol
(
JSContext
*
cx
HandleString
description
)
;
JS_PUBLIC_API
(
Symbol
*
)
GetSymbolFor
(
JSContext
*
cx
HandleString
key
)
;
JS_PUBLIC_API
(
JSString
*
)
GetSymbolDescription
(
HandleSymbol
symbol
)
;
#
define
JS_FOR_EACH_WELL_KNOWN_SYMBOL
(
macro
)
\
macro
(
isConcatSpreadable
)
\
macro
(
iterator
)
\
macro
(
match
)
\
macro
(
replace
)
\
macro
(
search
)
\
macro
(
species
)
\
macro
(
hasInstance
)
\
macro
(
split
)
\
macro
(
toPrimitive
)
\
macro
(
toStringTag
)
\
macro
(
unscopables
)
\
macro
(
asyncIterator
)
enum
class
SymbolCode
:
uint32_t
{
#
define
JS_DEFINE_SYMBOL_ENUM
(
name
)
name
JS_FOR_EACH_WELL_KNOWN_SYMBOL
(
JS_DEFINE_SYMBOL_ENUM
)
#
undef
JS_DEFINE_SYMBOL_ENUM
Limit
InSymbolRegistry
=
0xfffffffe
UniqueSymbol
=
0xffffffff
}
;
const
size_t
WellKnownSymbolLimit
=
size_t
(
SymbolCode
:
:
Limit
)
;
JS_PUBLIC_API
(
SymbolCode
)
GetSymbolCode
(
Handle
<
Symbol
*
>
symbol
)
;
JS_PUBLIC_API
(
Symbol
*
)
GetWellKnownSymbol
(
JSContext
*
cx
SymbolCode
which
)
;
inline
bool
PropertySpecNameIsSymbol
(
const
char
*
name
)
{
uintptr_t
u
=
reinterpret_cast
<
uintptr_t
>
(
name
)
;
return
u
!
=
0
&
&
u
-
1
<
WellKnownSymbolLimit
;
}
JS_PUBLIC_API
(
bool
)
PropertySpecNameEqualsId
(
const
char
*
name
HandleId
id
)
;
JS_PUBLIC_API
(
bool
)
PropertySpecNameToPermanentId
(
JSContext
*
cx
const
char
*
name
jsid
*
idp
)
;
}
typedef
bool
(
*
JSONWriteCallback
)
(
const
char16_t
*
buf
uint32_t
len
void
*
data
)
;
JS_PUBLIC_API
(
bool
)
JS_Stringify
(
JSContext
*
cx
JS
:
:
MutableHandleValue
value
JS
:
:
HandleObject
replacer
JS
:
:
HandleValue
space
JSONWriteCallback
callback
void
*
data
)
;
namespace
JS
{
JS_PUBLIC_API
(
bool
)
ToJSONMaybeSafely
(
JSContext
*
cx
JS
:
:
HandleObject
input
JSONWriteCallback
callback
void
*
data
)
;
}
JS_PUBLIC_API
(
bool
)
JS_ParseJSON
(
JSContext
*
cx
const
char16_t
*
chars
uint32_t
len
JS
:
:
MutableHandleValue
vp
)
;
JS_PUBLIC_API
(
bool
)
JS_ParseJSON
(
JSContext
*
cx
JS
:
:
HandleString
str
JS
:
:
MutableHandleValue
vp
)
;
JS_PUBLIC_API
(
bool
)
JS_ParseJSONWithReviver
(
JSContext
*
cx
const
char16_t
*
chars
uint32_t
len
JS
:
:
HandleValue
reviver
JS
:
:
MutableHandleValue
vp
)
;
JS_PUBLIC_API
(
bool
)
JS_ParseJSONWithReviver
(
JSContext
*
cx
JS
:
:
HandleString
str
JS
:
:
HandleValue
reviver
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetDefaultLocale
(
JSRuntime
*
rt
const
char
*
locale
)
;
extern
JS_PUBLIC_API
(
JS
:
:
UniqueChars
)
JS_GetDefaultLocale
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ResetDefaultLocale
(
JSRuntime
*
rt
)
;
struct
JSLocaleCallbacks
{
JSLocaleToUpperCase
localeToUpperCase
;
JSLocaleToLowerCase
localeToLowerCase
;
JSLocaleCompare
localeCompare
;
JSLocaleToUnicode
localeToUnicode
;
}
;
extern
JS_PUBLIC_API
(
void
)
JS_SetLocaleCallbacks
(
JSRuntime
*
rt
const
JSLocaleCallbacks
*
callbacks
)
;
extern
JS_PUBLIC_API
(
const
JSLocaleCallbacks
*
)
JS_GetLocaleCallbacks
(
JSRuntime
*
rt
)
;
namespace
JS
{
const
uint16_t
MaxNumErrorArguments
=
10
;
}
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorASCII
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorLatin1
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorUTF8
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberASCII
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberASCIIVA
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
va_list
ap
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberLatin1
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
#
ifdef
va_start
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberLatin1VA
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
va_list
ap
)
;
#
endif
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberUTF8
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
#
ifdef
va_start
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberUTF8VA
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
va_list
ap
)
;
#
endif
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberUC
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportErrorNumberUCArray
(
JSContext
*
cx
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
const
char16_t
*
*
args
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportWarningASCII
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportWarningLatin1
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportWarningUTF8
(
JSContext
*
cx
const
char
*
format
.
.
.
)
MOZ_FORMAT_PRINTF
(
2
3
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportErrorFlagsAndNumberASCII
(
JSContext
*
cx
unsigned
flags
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportErrorFlagsAndNumberLatin1
(
JSContext
*
cx
unsigned
flags
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportErrorFlagsAndNumberUTF8
(
JSContext
*
cx
unsigned
flags
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ReportErrorFlagsAndNumberUC
(
JSContext
*
cx
unsigned
flags
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportOutOfMemory
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ReportAllocationOverflow
(
JSContext
*
cx
)
;
class
JSErrorBase
{
JS
:
:
ConstUTF8CharsZ
message_
;
public
:
JSErrorBase
(
)
:
filename
(
nullptr
)
lineno
(
0
)
column
(
0
)
errorNumber
(
0
)
ownsMessage_
(
false
)
{
}
~
JSErrorBase
(
)
{
freeMessage
(
)
;
}
const
char
*
filename
;
unsigned
lineno
;
unsigned
column
;
unsigned
errorNumber
;
private
:
bool
ownsMessage_
:
1
;
public
:
const
JS
:
:
ConstUTF8CharsZ
message
(
)
const
{
return
message_
;
}
void
initOwnedMessage
(
const
char
*
messageArg
)
{
initBorrowedMessage
(
messageArg
)
;
ownsMessage_
=
true
;
}
void
initBorrowedMessage
(
const
char
*
messageArg
)
{
MOZ_ASSERT
(
!
message_
)
;
message_
=
JS
:
:
ConstUTF8CharsZ
(
messageArg
strlen
(
messageArg
)
)
;
}
JSString
*
newMessageString
(
JSContext
*
cx
)
;
private
:
void
freeMessage
(
)
;
}
;
class
JSErrorNotes
{
public
:
class
Note
:
public
JSErrorBase
{
}
;
private
:
js
:
:
Vector
<
js
:
:
UniquePtr
<
Note
>
1
js
:
:
SystemAllocPolicy
>
notes_
;
public
:
JSErrorNotes
(
)
;
~
JSErrorNotes
(
)
;
bool
addNoteASCII
(
JSContext
*
cx
const
char
*
filename
unsigned
lineno
unsigned
column
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
bool
addNoteLatin1
(
JSContext
*
cx
const
char
*
filename
unsigned
lineno
unsigned
column
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
bool
addNoteUTF8
(
JSContext
*
cx
const
char
*
filename
unsigned
lineno
unsigned
column
JSErrorCallback
errorCallback
void
*
userRef
const
unsigned
errorNumber
.
.
.
)
;
JS_PUBLIC_API
(
size_t
)
length
(
)
;
js
:
:
UniquePtr
<
JSErrorNotes
>
copy
(
JSContext
*
cx
)
;
class
iterator
:
public
std
:
:
iterator
<
std
:
:
input_iterator_tag
js
:
:
UniquePtr
<
Note
>
>
{
js
:
:
UniquePtr
<
Note
>
*
note_
;
public
:
explicit
iterator
(
js
:
:
UniquePtr
<
Note
>
*
note
=
nullptr
)
:
note_
(
note
)
{
}
bool
operator
=
=
(
iterator
other
)
const
{
return
note_
=
=
other
.
note_
;
}
bool
operator
!
=
(
iterator
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
iterator
&
operator
+
+
(
)
{
note_
+
+
;
return
*
this
;
}
reference
operator
*
(
)
{
return
*
note_
;
}
}
;
JS_PUBLIC_API
(
iterator
)
begin
(
)
;
JS_PUBLIC_API
(
iterator
)
end
(
)
;
}
;
class
JSErrorReport
:
public
JSErrorBase
{
const
char16_t
*
linebuf_
;
size_t
linebufLength_
;
size_t
tokenOffset_
;
public
:
JSErrorReport
(
)
:
linebuf_
(
nullptr
)
linebufLength_
(
0
)
tokenOffset_
(
0
)
notes
(
nullptr
)
flags
(
0
)
exnType
(
0
)
isMuted
(
false
)
ownsLinebuf_
(
false
)
{
}
~
JSErrorReport
(
)
{
freeLinebuf
(
)
;
}
js
:
:
UniquePtr
<
JSErrorNotes
>
notes
;
unsigned
flags
;
int16_t
exnType
;
bool
isMuted
:
1
;
private
:
bool
ownsLinebuf_
:
1
;
public
:
const
char16_t
*
linebuf
(
)
const
{
return
linebuf_
;
}
size_t
linebufLength
(
)
const
{
return
linebufLength_
;
}
size_t
tokenOffset
(
)
const
{
return
tokenOffset_
;
}
void
initOwnedLinebuf
(
const
char16_t
*
linebufArg
size_t
linebufLengthArg
size_t
tokenOffsetArg
)
{
initBorrowedLinebuf
(
linebufArg
linebufLengthArg
tokenOffsetArg
)
;
ownsLinebuf_
=
true
;
}
void
initBorrowedLinebuf
(
const
char16_t
*
linebufArg
size_t
linebufLengthArg
size_t
tokenOffsetArg
)
;
private
:
void
freeLinebuf
(
)
;
}
;
#
define
JSREPORT_ERROR
0x0
/
*
pseudo
-
flag
for
default
case
*
/
#
define
JSREPORT_WARNING
0x1
/
*
reported
via
JS_ReportWarning
*
/
#
define
JSREPORT_EXCEPTION
0x2
/
*
exception
was
thrown
*
/
#
define
JSREPORT_STRICT
0x4
/
*
error
or
warning
due
to
strict
option
*
/
#
define
JSREPORT_USER_1
0x8
/
*
user
-
defined
flag
*
/
#
define
JSREPORT_IS_WARNING
(
flags
)
(
(
(
flags
)
&
JSREPORT_WARNING
)
!
=
0
)
#
define
JSREPORT_IS_EXCEPTION
(
flags
)
(
(
(
flags
)
&
JSREPORT_EXCEPTION
)
!
=
0
)
#
define
JSREPORT_IS_STRICT
(
flags
)
(
(
(
flags
)
&
JSREPORT_STRICT
)
!
=
0
)
namespace
JS
{
using
WarningReporter
=
void
(
*
)
(
JSContext
*
cx
JSErrorReport
*
report
)
;
extern
JS_PUBLIC_API
(
WarningReporter
)
SetWarningReporter
(
JSContext
*
cx
WarningReporter
reporter
)
;
extern
JS_PUBLIC_API
(
WarningReporter
)
GetWarningReporter
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
CreateError
(
JSContext
*
cx
JSExnType
type
HandleObject
stack
HandleString
fileName
uint32_t
lineNumber
uint32_t
columnNumber
JSErrorReport
*
report
HandleString
message
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
NewWeakMapObject
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
IsWeakMapObject
(
JSObject
*
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
GetWeakMapEntry
(
JSContext
*
cx
JS
:
:
HandleObject
mapObj
JS
:
:
HandleObject
key
JS
:
:
MutableHandleValue
val
)
;
extern
JS_PUBLIC_API
(
bool
)
SetWeakMapEntry
(
JSContext
*
cx
JS
:
:
HandleObject
mapObj
JS
:
:
HandleObject
key
JS
:
:
HandleValue
val
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
NewMapObject
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
uint32_t
)
MapSize
(
JSContext
*
cx
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
MapGet
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapHas
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
bool
*
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapSet
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
HandleValue
val
)
;
extern
JS_PUBLIC_API
(
bool
)
MapDelete
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
bool
*
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapClear
(
JSContext
*
cx
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
MapKeys
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapValues
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapEntries
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
MapForEach
(
JSContext
*
cx
HandleObject
obj
HandleValue
callbackFn
HandleValue
thisVal
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
NewSetObject
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
uint32_t
)
SetSize
(
JSContext
*
cx
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
SetHas
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
bool
*
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
SetDelete
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
bool
*
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
SetAdd
(
JSContext
*
cx
HandleObject
obj
HandleValue
key
)
;
extern
JS_PUBLIC_API
(
bool
)
SetClear
(
JSContext
*
cx
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
SetKeys
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
SetValues
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
SetEntries
(
JSContext
*
cx
HandleObject
obj
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
SetForEach
(
JSContext
*
cx
HandleObject
obj
HandleValue
callbackFn
HandleValue
thisVal
)
;
}
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewDateObject
(
JSContext
*
cx
int
year
int
mon
int
mday
int
hour
int
min
int
sec
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ObjectIsDate
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isDate
)
;
#
define
JSREG_FOLD
0x01u
/
*
fold
uppercase
to
lowercase
*
/
#
define
JSREG_GLOB
0x02u
/
*
global
exec
creates
array
of
matches
*
/
#
define
JSREG_MULTILINE
0x04u
/
*
treat
^
and
as
begin
and
end
of
line
*
/
#
define
JSREG_STICKY
0x08u
/
*
only
match
starting
at
lastIndex
*
/
#
define
JSREG_UNICODE
0x10u
/
*
unicode
*
/
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewRegExpObject
(
JSContext
*
cx
const
char
*
bytes
size_t
length
unsigned
flags
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewUCRegExpObject
(
JSContext
*
cx
const
char16_t
*
chars
size_t
length
unsigned
flags
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_SetRegExpInput
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleString
input
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ClearRegExpStatics
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteRegExp
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleObject
reobj
char16_t
*
chars
size_t
length
size_t
*
indexp
bool
test
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ExecuteRegExpNoStatics
(
JSContext
*
cx
JS
:
:
HandleObject
reobj
char16_t
*
chars
size_t
length
size_t
*
indexp
bool
test
JS
:
:
MutableHandleValue
rval
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_ObjectIsRegExp
(
JSContext
*
cx
JS
:
:
HandleObject
obj
bool
*
isRegExp
)
;
extern
JS_PUBLIC_API
(
unsigned
)
JS_GetRegExpFlags
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
JSString
*
)
JS_GetRegExpSource
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsExceptionPending
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetPendingException
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetPendingException
(
JSContext
*
cx
JS
:
:
HandleValue
v
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ClearPendingException
(
JSContext
*
cx
)
;
namespace
JS
{
class
JS_PUBLIC_API
(
AutoSaveExceptionState
)
{
private
:
JSContext
*
context
;
bool
wasPropagatingForcedReturn
;
bool
wasOverRecursed
;
bool
wasThrowing
;
RootedValue
exceptionValue
;
public
:
explicit
AutoSaveExceptionState
(
JSContext
*
cx
)
;
~
AutoSaveExceptionState
(
)
;
void
drop
(
)
{
wasPropagatingForcedReturn
=
false
;
wasOverRecursed
=
false
;
wasThrowing
=
false
;
exceptionValue
.
setUndefined
(
)
;
}
void
restore
(
)
;
}
;
}
extern
JS_PUBLIC_API
(
JSExceptionState
*
)
JS_SaveExceptionState
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
JS_RestoreExceptionState
(
JSContext
*
cx
JSExceptionState
*
state
)
;
extern
JS_PUBLIC_API
(
void
)
JS_DropExceptionState
(
JSContext
*
cx
JSExceptionState
*
state
)
;
extern
JS_PUBLIC_API
(
JSErrorReport
*
)
JS_ErrorFromException
(
JSContext
*
cx
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
ExceptionStackOrNull
(
JS
:
:
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
void
)
JS_AbortIfWrongThread
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
JS_NewObjectForConstructor
(
JSContext
*
cx
const
JSClass
*
clasp
const
JS
:
:
CallArgs
&
args
)
;
#
ifdef
JS_GC_ZEAL
#
define
JS_DEFAULT_ZEAL_FREQ
100
extern
JS_PUBLIC_API
(
void
)
JS_GetGCZealBits
(
JSContext
*
cx
uint32_t
*
zealBits
uint32_t
*
frequency
uint32_t
*
nextScheduled
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetGCZeal
(
JSContext
*
cx
uint8_t
zeal
uint32_t
frequency
)
;
extern
JS_PUBLIC_API
(
void
)
JS_ScheduleGC
(
JSContext
*
cx
uint32_t
count
)
;
#
endif
extern
JS_PUBLIC_API
(
void
)
JS_SetParallelParsingEnabled
(
JSContext
*
cx
bool
enabled
)
;
extern
JS_PUBLIC_API
(
void
)
JS_SetOffthreadIonCompilationEnabled
(
JSContext
*
cx
bool
enabled
)
;
#
define
JIT_COMPILER_OPTIONS
(
Register
)
\
Register
(
BASELINE_WARMUP_TRIGGER
"
baseline
.
warmup
.
trigger
"
)
\
Register
(
ION_WARMUP_TRIGGER
"
ion
.
warmup
.
trigger
"
)
\
Register
(
ION_GVN_ENABLE
"
ion
.
gvn
.
enable
"
)
\
Register
(
ION_FORCE_IC
"
ion
.
forceinlineCaches
"
)
\
Register
(
ION_ENABLE
"
ion
.
enable
"
)
\
Register
(
ION_INTERRUPT_WITHOUT_SIGNAL
"
ion
.
interrupt
-
without
-
signals
"
)
\
Register
(
ION_CHECK_RANGE_ANALYSIS
"
ion
.
check
-
range
-
analysis
"
)
\
Register
(
BASELINE_ENABLE
"
baseline
.
enable
"
)
\
Register
(
OFFTHREAD_COMPILATION_ENABLE
"
offthread
-
compilation
.
enable
"
)
\
Register
(
FULL_DEBUG_CHECKS
"
jit
.
full
-
debug
-
checks
"
)
\
Register
(
JUMP_THRESHOLD
"
jump
-
threshold
"
)
\
Register
(
SIMULATOR_ALWAYS_INTERRUPT
"
simulator
.
always
-
interrupt
"
)
\
Register
(
ASMJS_ATOMICS_ENABLE
"
asmjs
.
atomics
.
enable
"
)
\
Register
(
WASM_FOLD_OFFSETS
"
wasm
.
fold
-
offsets
"
)
typedef
enum
JSJitCompilerOption
{
#
define
JIT_COMPILER_DECLARE
(
key
str
)
\
JSJITCOMPILER_
#
#
key
JIT_COMPILER_OPTIONS
(
JIT_COMPILER_DECLARE
)
#
undef
JIT_COMPILER_DECLARE
JSJITCOMPILER_NOT_AN_OPTION
}
JSJitCompilerOption
;
extern
JS_PUBLIC_API
(
void
)
JS_SetGlobalJitCompilerOption
(
JSContext
*
cx
JSJitCompilerOption
opt
uint32_t
value
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_GetGlobalJitCompilerOption
(
JSContext
*
cx
JSJitCompilerOption
opt
uint32_t
*
valueOut
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IndexToId
(
JSContext
*
cx
uint32_t
index
JS
:
:
MutableHandleId
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_CharsToId
(
JSContext
*
cx
JS
:
:
TwoByteChars
chars
JS
:
:
MutableHandleId
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsIdentifier
(
JSContext
*
cx
JS
:
:
HandleString
str
bool
*
isIdentifier
)
;
extern
JS_PUBLIC_API
(
bool
)
JS_IsIdentifier
(
const
char16_t
*
chars
size_t
length
)
;
namespace
js
{
class
ScriptSource
;
}
namespace
JS
{
class
MOZ_RAII
JS_PUBLIC_API
(
AutoFilename
)
{
private
:
js
:
:
ScriptSource
*
ss_
;
mozilla
:
:
Variant
<
const
char
*
UniqueChars
>
filename_
;
AutoFilename
(
const
AutoFilename
&
)
=
delete
;
AutoFilename
&
operator
=
(
const
AutoFilename
&
)
=
delete
;
public
:
AutoFilename
(
)
:
ss_
(
nullptr
)
filename_
(
mozilla
:
:
AsVariant
<
const
char
*
>
(
nullptr
)
)
{
}
~
AutoFilename
(
)
{
reset
(
)
;
}
void
reset
(
)
;
void
setOwned
(
UniqueChars
&
&
filename
)
;
void
setUnowned
(
const
char
*
filename
)
;
void
setScriptSource
(
js
:
:
ScriptSource
*
ss
)
;
const
char
*
get
(
)
const
;
}
;
extern
JS_PUBLIC_API
(
bool
)
DescribeScriptedCaller
(
JSContext
*
cx
AutoFilename
*
filename
=
nullptr
unsigned
*
lineno
=
nullptr
unsigned
*
column
=
nullptr
)
;
extern
JS_PUBLIC_API
(
JSObject
*
)
GetScriptedCallerGlobal
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
HideScriptedCaller
(
JSContext
*
cx
)
;
extern
JS_PUBLIC_API
(
void
)
UnhideScriptedCaller
(
JSContext
*
cx
)
;
class
MOZ_RAII
AutoHideScriptedCaller
{
public
:
explicit
AutoHideScriptedCaller
(
JSContext
*
cx
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mContext
(
cx
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
HideScriptedCaller
(
mContext
)
;
}
~
AutoHideScriptedCaller
(
)
{
UnhideScriptedCaller
(
mContext
)
;
}
protected
:
JSContext
*
mContext
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
typedef
mozilla
:
:
Vector
<
uint8_t
>
TranscodeBuffer
;
typedef
mozilla
:
:
Range
<
uint8_t
>
TranscodeRange
;
struct
TranscodeSource
{
TranscodeSource
(
const
TranscodeRange
&
range_
const
char
*
file
uint32_t
line
)
:
range
(
range_
)
filename
(
file
)
lineno
(
line
)
{
}
const
TranscodeRange
range
;
const
char
*
filename
;
const
uint32_t
lineno
;
}
;
typedef
mozilla
:
:
Vector
<
JS
:
:
TranscodeSource
>
TranscodeSources
;
enum
TranscodeResult
{
TranscodeResult_Ok
=
0
TranscodeResult_Failure
=
0x100
TranscodeResult_Failure_BadBuildId
=
TranscodeResult_Failure
|
0x1
TranscodeResult_Failure_RunOnceNotSupported
=
TranscodeResult_Failure
|
0x2
TranscodeResult_Failure_AsmJSNotSupported
=
TranscodeResult_Failure
|
0x3
TranscodeResult_Failure_UnknownClassKind
=
TranscodeResult_Failure
|
0x4
TranscodeResult_Failure_WrongCompileOption
=
TranscodeResult_Failure
|
0x5
TranscodeResult_Failure_NotInterpretedFun
=
TranscodeResult_Failure
|
0x6
TranscodeResult_Throw
=
0x200
}
;
extern
JS_PUBLIC_API
(
TranscodeResult
)
EncodeScript
(
JSContext
*
cx
TranscodeBuffer
&
buffer
JS
:
:
HandleScript
script
)
;
extern
JS_PUBLIC_API
(
TranscodeResult
)
EncodeInterpretedFunction
(
JSContext
*
cx
TranscodeBuffer
&
buffer
JS
:
:
HandleObject
funobj
)
;
extern
JS_PUBLIC_API
(
TranscodeResult
)
DecodeScript
(
JSContext
*
cx
TranscodeBuffer
&
buffer
JS
:
:
MutableHandleScript
scriptp
size_t
cursorIndex
=
0
)
;
extern
JS_PUBLIC_API
(
TranscodeResult
)
DecodeScript
(
JSContext
*
cx
const
TranscodeRange
&
range
JS
:
:
MutableHandleScript
scriptp
)
;
extern
JS_PUBLIC_API
(
TranscodeResult
)
DecodeInterpretedFunction
(
JSContext
*
cx
TranscodeBuffer
&
buffer
JS
:
:
MutableHandleFunction
funp
size_t
cursorIndex
=
0
)
;
extern
JS_PUBLIC_API
(
bool
)
StartIncrementalEncoding
(
JSContext
*
cx
JS
:
:
HandleScript
script
)
;
extern
JS_PUBLIC_API
(
bool
)
FinishIncrementalEncoding
(
JSContext
*
cx
JS
:
:
HandleScript
script
TranscodeBuffer
&
buffer
)
;
}
namespace
js
{
enum
class
StackFormat
{
SpiderMonkey
V8
Default
}
;
extern
JS_PUBLIC_API
(
void
)
SetStackFormat
(
JSContext
*
cx
StackFormat
format
)
;
extern
JS_PUBLIC_API
(
StackFormat
)
GetStackFormat
(
JSContext
*
cx
)
;
}
namespace
JS
{
typedef
bool
(
*
OpenAsmJSCacheEntryForReadOp
)
(
HandleObject
global
const
char16_t
*
begin
const
char16_t
*
limit
size_t
*
size
const
uint8_t
*
*
memory
intptr_t
*
handle
)
;
typedef
void
(
*
CloseAsmJSCacheEntryForReadOp
)
(
size_t
size
const
uint8_t
*
memory
intptr_t
handle
)
;
enum
AsmJSCacheResult
{
AsmJSCache_Success
AsmJSCache_MIN
=
AsmJSCache_Success
AsmJSCache_ModuleTooSmall
AsmJSCache_SynchronousScript
AsmJSCache_QuotaExceeded
AsmJSCache_StorageInitFailure
AsmJSCache_Disabled_Internal
AsmJSCache_Disabled_ShellFlags
AsmJSCache_Disabled_JitInspector
AsmJSCache_InternalError
AsmJSCache_Disabled_PrivateBrowsing
AsmJSCache_LIMIT
}
;
typedef
AsmJSCacheResult
(
*
OpenAsmJSCacheEntryForWriteOp
)
(
HandleObject
global
const
char16_t
*
begin
const
char16_t
*
end
size_t
size
uint8_t
*
*
memory
intptr_t
*
handle
)
;
typedef
void
(
*
CloseAsmJSCacheEntryForWriteOp
)
(
size_t
size
uint8_t
*
memory
intptr_t
handle
)
;
struct
AsmJSCacheOps
{
OpenAsmJSCacheEntryForReadOp
openEntryForRead
;
CloseAsmJSCacheEntryForReadOp
closeEntryForRead
;
OpenAsmJSCacheEntryForWriteOp
openEntryForWrite
;
CloseAsmJSCacheEntryForWriteOp
closeEntryForWrite
;
}
;
extern
JS_PUBLIC_API
(
void
)
SetAsmJSCacheOps
(
JSContext
*
cx
const
AsmJSCacheOps
*
callbacks
)
;
typedef
js
:
:
Vector
<
char
0
js
:
:
SystemAllocPolicy
>
BuildIdCharVector
;
typedef
bool
(
*
BuildIdOp
)
(
BuildIdCharVector
*
buildId
)
;
extern
JS_PUBLIC_API
(
void
)
SetBuildIdOp
(
JSContext
*
cx
BuildIdOp
buildIdOp
)
;
class
WasmModuleListener
{
protected
:
virtual
~
WasmModuleListener
(
)
{
}
public
:
virtual
MozExternalRefCountType
MOZ_XPCOM_ABI
AddRef
(
)
=
0
;
virtual
MozExternalRefCountType
MOZ_XPCOM_ABI
Release
(
)
=
0
;
virtual
void
onCompilationComplete
(
)
=
0
;
}
;
struct
WasmModule
:
js
:
:
AtomicRefCounted
<
WasmModule
>
{
virtual
~
WasmModule
(
)
{
}
virtual
size_t
bytecodeSerializedSize
(
)
const
=
0
;
virtual
void
bytecodeSerialize
(
uint8_t
*
bytecodeBegin
size_t
bytecodeSize
)
const
=
0
;
virtual
bool
compilationComplete
(
)
const
=
0
;
virtual
bool
notifyWhenCompilationComplete
(
WasmModuleListener
*
listener
)
=
0
;
virtual
size_t
compiledSerializedSize
(
)
const
=
0
;
virtual
void
compiledSerialize
(
uint8_t
*
compiledBegin
size_t
compiledSize
)
const
=
0
;
virtual
JSObject
*
createObject
(
JSContext
*
cx
)
=
0
;
}
;
extern
JS_PUBLIC_API
(
bool
)
IsWasmModuleObject
(
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
RefPtr
<
WasmModule
>
)
GetWasmModule
(
HandleObject
obj
)
;
extern
JS_PUBLIC_API
(
bool
)
CompiledWasmModuleAssumptionsMatch
(
PRFileDesc
*
compiled
BuildIdCharVector
&
&
buildId
)
;
extern
JS_PUBLIC_API
(
RefPtr
<
WasmModule
>
)
DeserializeWasmModule
(
PRFileDesc
*
bytecode
PRFileDesc
*
maybeCompiled
BuildIdCharVector
&
&
buildId
JS
:
:
UniqueChars
filename
unsigned
line
unsigned
column
)
;
class
MOZ_STACK_CLASS
JS_PUBLIC_API
(
ForOfIterator
)
{
protected
:
JSContext
*
cx_
;
JS
:
:
RootedObject
iterator
;
uint32_t
index
;
static
const
uint32_t
NOT_ARRAY
=
UINT32_MAX
;
ForOfIterator
(
const
ForOfIterator
&
)
=
delete
;
ForOfIterator
&
operator
=
(
const
ForOfIterator
&
)
=
delete
;
public
:
explicit
ForOfIterator
(
JSContext
*
cx
)
:
cx_
(
cx
)
iterator
(
cx_
)
index
(
NOT_ARRAY
)
{
}
enum
NonIterableBehavior
{
ThrowOnNonIterable
AllowNonIterable
}
;
bool
init
(
JS
:
:
HandleValue
iterable
NonIterableBehavior
nonIterableBehavior
=
ThrowOnNonIterable
)
;
bool
next
(
JS
:
:
MutableHandleValue
val
bool
*
done
)
;
void
closeThrow
(
)
;
bool
valueIsIterable
(
)
const
{
return
iterator
;
}
private
:
inline
bool
nextFromOptimizedArray
(
MutableHandleValue
val
bool
*
done
)
;
bool
materializeArrayIterator
(
)
;
}
;
typedef
void
(
*
LargeAllocationFailureCallback
)
(
)
;
extern
JS_PUBLIC_API
(
void
)
SetProcessLargeAllocationFailureCallback
(
LargeAllocationFailureCallback
afc
)
;
typedef
void
(
*
OutOfMemoryCallback
)
(
JSContext
*
cx
void
*
data
)
;
extern
JS_PUBLIC_API
(
void
)
SetOutOfMemoryCallback
(
JSContext
*
cx
OutOfMemoryCallback
cb
void
*
data
)
;
struct
AllFrames
{
}
;
struct
MaxFrames
{
uint32_t
maxFrames
;
explicit
MaxFrames
(
uint32_t
max
)
:
maxFrames
(
max
)
{
MOZ_ASSERT
(
max
>
0
)
;
}
}
;
struct
JS_PUBLIC_API
(
FirstSubsumedFrame
)
{
JSContext
*
cx
;
JSPrincipals
*
principals
;
bool
ignoreSelfHosted
;
explicit
FirstSubsumedFrame
(
JSContext
*
cx
bool
ignoreSelfHostedFrames
=
true
)
;
explicit
FirstSubsumedFrame
(
JSContext
*
ctx
JSPrincipals
*
p
bool
ignoreSelfHostedFrames
=
true
)
:
cx
(
ctx
)
principals
(
p
)
ignoreSelfHosted
(
ignoreSelfHostedFrames
)
{
if
(
principals
)
JS_HoldPrincipals
(
principals
)
;
}
FirstSubsumedFrame
(
const
FirstSubsumedFrame
&
)
=
delete
;
FirstSubsumedFrame
&
operator
=
(
const
FirstSubsumedFrame
&
)
=
delete
;
FirstSubsumedFrame
(
FirstSubsumedFrame
&
&
rhs
)
:
principals
(
rhs
.
principals
)
ignoreSelfHosted
(
rhs
.
ignoreSelfHosted
)
{
MOZ_ASSERT
(
this
!
=
&
rhs
"
self
move
disallowed
"
)
;
rhs
.
principals
=
nullptr
;
}
FirstSubsumedFrame
&
operator
=
(
FirstSubsumedFrame
&
&
rhs
)
{
new
(
this
)
FirstSubsumedFrame
(
mozilla
:
:
Move
(
rhs
)
)
;
return
*
this
;
}
~
FirstSubsumedFrame
(
)
{
if
(
principals
)
JS_DropPrincipals
(
cx
principals
)
;
}
}
;
using
StackCapture
=
mozilla
:
:
Variant
<
AllFrames
MaxFrames
FirstSubsumedFrame
>
;
extern
JS_PUBLIC_API
(
bool
)
CaptureCurrentStack
(
JSContext
*
cx
MutableHandleObject
stackp
StackCapture
&
&
capture
=
StackCapture
(
AllFrames
(
)
)
)
;
extern
JS_PUBLIC_API
(
bool
)
CopyAsyncStack
(
JSContext
*
cx
HandleObject
asyncStack
HandleString
asyncCause
MutableHandleObject
stackp
unsigned
maxFrameCount
)
;
enum
class
SavedFrameResult
{
Ok
AccessDenied
}
;
enum
class
SavedFrameSelfHosted
{
Include
Exclude
}
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameSource
(
JSContext
*
cx
HandleObject
savedFrame
MutableHandleString
sourcep
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameLine
(
JSContext
*
cx
HandleObject
savedFrame
uint32_t
*
linep
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameColumn
(
JSContext
*
cx
HandleObject
savedFrame
uint32_t
*
columnp
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameFunctionDisplayName
(
JSContext
*
cx
HandleObject
savedFrame
MutableHandleString
namep
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameAsyncCause
(
JSContext
*
cx
HandleObject
savedFrame
MutableHandleString
asyncCausep
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameAsyncParent
(
JSContext
*
cx
HandleObject
savedFrame
MutableHandleObject
asyncParentp
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
SavedFrameResult
)
GetSavedFrameParent
(
JSContext
*
cx
HandleObject
savedFrame
MutableHandleObject
parentp
SavedFrameSelfHosted
selfHosted
=
SavedFrameSelfHosted
:
:
Include
)
;
extern
JS_PUBLIC_API
(
bool
)
BuildStackString
(
JSContext
*
cx
HandleObject
stack
MutableHandleString
stringp
size_t
indent
=
0
js
:
:
StackFormat
stackFormat
=
js
:
:
StackFormat
:
:
Default
)
;
extern
JS_PUBLIC_API
(
bool
)
IsSavedFrame
(
JSObject
*
obj
)
;
}
namespace
js
{
class
AutoStopwatch
;
struct
JS_PUBLIC_API
(
PerformanceGroup
)
{
PerformanceGroup
(
)
;
uint64_t
iteration
(
)
const
;
bool
isAcquired
(
uint64_t
it
)
const
;
bool
isAcquired
(
uint64_t
it
const
AutoStopwatch
*
owner
)
const
;
void
acquire
(
uint64_t
it
const
AutoStopwatch
*
owner
)
;
void
release
(
uint64_t
it
const
AutoStopwatch
*
owner
)
;
uint64_t
recentCycles
(
uint64_t
iteration
)
const
;
void
addRecentCycles
(
uint64_t
iteration
uint64_t
cycles
)
;
uint64_t
recentTicks
(
uint64_t
iteration
)
const
;
void
addRecentTicks
(
uint64_t
iteration
uint64_t
ticks
)
;
uint64_t
recentCPOW
(
uint64_t
iteration
)
const
;
void
addRecentCPOW
(
uint64_t
iteration
uint64_t
CPOW
)
;
void
resetRecentData
(
)
;
bool
isActive
(
)
const
;
void
setIsActive
(
bool
)
;
bool
isUsedInThisIteration
(
)
const
;
void
setIsUsedInThisIteration
(
bool
)
;
protected
:
virtual
void
Delete
(
)
=
0
;
private
:
uint64_t
recentCycles_
;
uint64_t
recentTicks_
;
uint64_t
recentCPOW_
;
uint64_t
iteration_
;
bool
isActive_
;
bool
isUsedInThisIteration_
;
const
AutoStopwatch
*
owner_
;
public
:
void
AddRef
(
)
;
void
Release
(
)
;
uint64_t
refCount_
;
}
;
using
PerformanceGroupVector
=
mozilla
:
:
Vector
<
RefPtr
<
js
:
:
PerformanceGroup
>
8
SystemAllocPolicy
>
;
extern
JS_PUBLIC_API
(
bool
)
FlushPerformanceMonitoring
(
JSContext
*
)
;
extern
JS_PUBLIC_API
(
void
)
ResetPerformanceMonitoring
(
JSContext
*
)
;
extern
JS_PUBLIC_API
(
void
)
DisposePerformanceMonitoring
(
JSContext
*
)
;
extern
JS_PUBLIC_API
(
bool
)
SetStopwatchIsMonitoringCPOW
(
JSContext
*
bool
)
;
extern
JS_PUBLIC_API
(
bool
)
GetStopwatchIsMonitoringCPOW
(
JSContext
*
)
;
extern
JS_PUBLIC_API
(
bool
)
SetStopwatchIsMonitoringJank
(
JSContext
*
bool
)
;
extern
JS_PUBLIC_API
(
bool
)
GetStopwatchIsMonitoringJank
(
JSContext
*
)
;
extern
JS_PUBLIC_API
(
void
)
GetPerfMonitoringTestCpuRescheduling
(
JSContext
*
uint64_t
*
stayed
uint64_t
*
moved
)
;
extern
JS_PUBLIC_API
(
void
)
AddCPOWPerformanceDelta
(
JSContext
*
uint64_t
delta
)
;
typedef
bool
(
*
StopwatchStartCallback
)
(
uint64_t
void
*
)
;
extern
JS_PUBLIC_API
(
bool
)
SetStopwatchStartCallback
(
JSContext
*
StopwatchStartCallback
void
*
)
;
typedef
bool
(
*
StopwatchCommitCallback
)
(
uint64_t
PerformanceGroupVector
&
void
*
)
;
extern
JS_PUBLIC_API
(
bool
)
SetStopwatchCommitCallback
(
JSContext
*
StopwatchCommitCallback
void
*
)
;
typedef
bool
(
*
GetGroupsCallback
)
(
JSContext
*
PerformanceGroupVector
&
void
*
)
;
extern
JS_PUBLIC_API
(
bool
)
SetGetPerformanceGroupsCallback
(
JSContext
*
GetGroupsCallback
void
*
)
;
}
namespace
js
{
enum
class
CompletionKind
{
Normal
Return
Throw
}
;
}
#
endif
