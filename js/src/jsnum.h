#
ifndef
jsnum_h
#
define
jsnum_h
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
vm
/
StringType
.
h
"
namespace
js
{
namespace
frontend
{
class
ParserAtomsTable
;
class
ParserAtom
;
}
class
GlobalObject
;
class
StringBuffer
;
extern
MOZ_MUST_USE
bool
InitRuntimeNumberState
(
JSRuntime
*
rt
)
;
extern
void
FinishRuntimeNumberState
(
JSRuntime
*
rt
)
;
extern
JSObject
*
InitNumberClass
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
template
<
AllowGC
allowGC
>
extern
JSString
*
NumberToString
(
JSContext
*
cx
double
d
)
;
extern
JSString
*
NumberToStringPure
(
JSContext
*
cx
double
d
)
;
extern
JSAtom
*
NumberToAtom
(
JSContext
*
cx
double
d
)
;
const
frontend
:
:
ParserAtom
*
NumberToParserAtom
(
JSContext
*
cx
frontend
:
:
ParserAtomsTable
&
parserAtoms
double
d
)
;
template
<
AllowGC
allowGC
>
extern
JSLinearString
*
Int32ToString
(
JSContext
*
cx
int32_t
i
)
;
extern
JSLinearString
*
Int32ToStringPure
(
JSContext
*
cx
int32_t
i
)
;
extern
JSAtom
*
Int32ToAtom
(
JSContext
*
cx
int32_t
si
)
;
const
frontend
:
:
ParserAtom
*
Int32ToParserAtom
(
JSContext
*
cx
frontend
:
:
ParserAtomsTable
&
parserAtoms
int32_t
si
)
;
extern
bool
IsInteger
(
const
Value
&
val
)
;
extern
bool
IsInteger
(
double
d
)
;
extern
MOZ_MUST_USE
bool
JS_FASTCALL
NumberValueToStringBuffer
(
JSContext
*
cx
const
Value
&
v
StringBuffer
&
sb
)
;
extern
JSLinearString
*
IndexToString
(
JSContext
*
cx
uint32_t
index
)
;
struct
ToCStringBuf
{
static
const
size_t
sbufSize
=
34
;
char
sbuf
[
sbufSize
]
;
char
*
dbuf
;
ToCStringBuf
(
)
;
~
ToCStringBuf
(
)
;
}
;
extern
char
*
NumberToCString
(
JSContext
*
cx
ToCStringBuf
*
cbuf
double
d
int
base
=
10
)
;
constexpr
double
DOUBLE_INTEGRAL_PRECISION_LIMIT
=
uint64_t
(
1
)
<
<
53
;
template
<
typename
CharT
>
extern
double
ParseDecimalNumber
(
const
mozilla
:
:
Range
<
const
CharT
>
chars
)
;
enum
class
IntegerSeparatorHandling
:
bool
{
None
SkipUnderscore
}
;
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
GetPrefixInteger
(
JSContext
*
cx
const
CharT
*
start
const
CharT
*
end
int
base
IntegerSeparatorHandling
separatorHandling
const
CharT
*
*
endp
double
*
dp
)
;
inline
const
char16_t
*
ToRawChars
(
const
char16_t
*
units
)
{
return
units
;
}
inline
const
unsigned
char
*
ToRawChars
(
const
unsigned
char
*
units
)
{
return
units
;
}
inline
const
unsigned
char
*
ToRawChars
(
const
mozilla
:
:
Utf8Unit
*
units
)
{
return
mozilla
:
:
Utf8AsUnsignedChars
(
units
)
;
}
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
GetFullInteger
(
JSContext
*
cx
const
CharT
*
start
const
CharT
*
end
int
base
IntegerSeparatorHandling
separatorHandling
double
*
dp
)
{
decltype
(
ToRawChars
(
start
)
)
realEnd
;
if
(
GetPrefixInteger
(
cx
ToRawChars
(
start
)
ToRawChars
(
end
)
base
separatorHandling
&
realEnd
dp
)
)
{
MOZ_ASSERT
(
end
=
=
static_cast
<
const
void
*
>
(
realEnd
)
)
;
return
true
;
}
return
false
;
}
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
GetDecimalInteger
(
JSContext
*
cx
const
CharT
*
start
const
CharT
*
end
double
*
dp
)
;
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
GetDecimalNonInteger
(
JSContext
*
cx
const
CharT
*
start
const
CharT
*
end
double
*
dp
)
;
template
<
typename
CharT
>
bool
CharsToNumber
(
JSContext
*
cx
const
CharT
*
chars
size_t
length
double
*
result
)
;
extern
MOZ_MUST_USE
bool
StringToNumber
(
JSContext
*
cx
JSString
*
str
double
*
result
)
;
extern
MOZ_MUST_USE
bool
StringToNumberPure
(
JSContext
*
cx
JSString
*
str
double
*
result
)
;
MOZ_ALWAYS_INLINE
MOZ_MUST_USE
bool
ToNumber
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
vp
.
isNumber
(
)
)
{
return
true
;
}
double
d
;
extern
JS_PUBLIC_API
bool
ToNumberSlow
(
JSContext
*
cx
HandleValue
v
double
*
dp
)
;
if
(
!
ToNumberSlow
(
cx
vp
&
d
)
)
{
return
false
;
}
vp
.
setNumber
(
d
)
;
return
true
;
}
bool
ToNumericSlow
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
;
MOZ_ALWAYS_INLINE
MOZ_MUST_USE
bool
ToNumeric
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
vp
.
isNumeric
(
)
)
{
return
true
;
}
return
ToNumericSlow
(
cx
vp
)
;
}
bool
ToInt32OrBigIntSlow
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
;
MOZ_ALWAYS_INLINE
MOZ_MUST_USE
bool
ToInt32OrBigInt
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
vp
.
isInt32
(
)
)
{
return
true
;
}
return
ToInt32OrBigIntSlow
(
cx
vp
)
;
}
}
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
js_strtod
(
JSContext
*
cx
const
CharT
*
begin
const
CharT
*
end
const
CharT
*
*
dEnd
double
*
d
)
;
namespace
js
{
template
<
typename
CharT
>
extern
MOZ_MUST_USE
bool
FullStringToDouble
(
JSContext
*
cx
const
CharT
*
begin
const
CharT
*
end
double
*
d
)
{
decltype
(
ToRawChars
(
begin
)
)
realEnd
;
if
(
js_strtod
(
cx
ToRawChars
(
begin
)
ToRawChars
(
end
)
&
realEnd
d
)
)
{
MOZ_ASSERT
(
end
=
=
static_cast
<
const
void
*
>
(
realEnd
)
)
;
return
true
;
}
return
false
;
}
extern
MOZ_MUST_USE
bool
ThisNumberValueForToLocaleString
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
extern
MOZ_MUST_USE
bool
num_valueOf
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
MOZ_ALWAYS_INLINE
bool
IsDefinitelyIndex
(
const
Value
&
v
uint32_t
*
indexp
)
{
if
(
v
.
isInt32
(
)
&
&
v
.
toInt32
(
)
>
=
0
)
{
*
indexp
=
v
.
toInt32
(
)
;
return
true
;
}
int32_t
i
;
if
(
v
.
isDouble
(
)
&
&
mozilla
:
:
NumberEqualsInt32
(
v
.
toDouble
(
)
&
i
)
&
&
i
>
=
0
)
{
*
indexp
=
uint32_t
(
i
)
;
return
true
;
}
if
(
v
.
isString
(
)
&
&
v
.
toString
(
)
-
>
hasIndexValue
(
)
)
{
*
indexp
=
v
.
toString
(
)
-
>
getIndexValue
(
)
;
return
true
;
}
return
false
;
}
static
MOZ_MUST_USE
inline
bool
ToInteger
(
JSContext
*
cx
HandleValue
v
double
*
dp
)
{
if
(
v
.
isInt32
(
)
)
{
*
dp
=
v
.
toInt32
(
)
;
return
true
;
}
if
(
v
.
isDouble
(
)
)
{
*
dp
=
v
.
toDouble
(
)
;
}
else
if
(
v
.
isString
(
)
&
&
v
.
toString
(
)
-
>
hasIndexValue
(
)
)
{
*
dp
=
v
.
toString
(
)
-
>
getIndexValue
(
)
;
return
true
;
}
else
{
extern
JS_PUBLIC_API
bool
ToNumberSlow
(
JSContext
*
cx
HandleValue
v
double
*
dp
)
;
if
(
!
ToNumberSlow
(
cx
v
dp
)
)
{
return
false
;
}
}
*
dp
=
JS
:
:
ToInteger
(
*
dp
)
;
return
true
;
}
extern
MOZ_MUST_USE
bool
ToIndexSlow
(
JSContext
*
cx
JS
:
:
HandleValue
v
const
unsigned
errorNumber
uint64_t
*
index
)
;
static
MOZ_MUST_USE
inline
bool
ToIndex
(
JSContext
*
cx
JS
:
:
HandleValue
v
const
unsigned
errorNumber
uint64_t
*
index
)
{
if
(
v
.
isInt32
(
)
)
{
int32_t
i
=
v
.
toInt32
(
)
;
if
(
i
>
=
0
)
{
*
index
=
uint64_t
(
i
)
;
return
true
;
}
}
return
ToIndexSlow
(
cx
v
errorNumber
index
)
;
}
static
MOZ_MUST_USE
inline
bool
ToIndex
(
JSContext
*
cx
JS
:
:
HandleValue
v
uint64_t
*
index
)
{
return
ToIndex
(
cx
v
JSMSG_BAD_INDEX
index
)
;
}
}
#
endif
