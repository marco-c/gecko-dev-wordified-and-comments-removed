#
ifndef
threading_Thread_h
#
define
threading_Thread_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IndexSequence
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
<
stdint
.
h
>
#
ifdef
XP_WIN
#
define
THREAD_RETURN_TYPE
unsigned
int
#
define
THREAD_CALL_API
__stdcall
#
else
#
define
THREAD_RETURN_TYPE
void
*
#
define
THREAD_CALL_API
#
endif
namespace
js
{
namespace
detail
{
template
<
typename
F
typename
.
.
.
Args
>
class
ThreadTrampoline
;
}
class
Thread
{
public
:
class
Id
{
class
PlatformData
;
void
*
platformData_
[
2
]
;
public
:
Id
(
)
;
Id
(
const
Id
&
)
=
default
;
Id
(
Id
&
&
)
=
default
;
Id
&
operator
=
(
const
Id
&
)
=
default
;
Id
&
operator
=
(
Id
&
&
)
=
default
;
bool
operator
=
=
(
const
Id
&
aOther
)
;
bool
operator
!
=
(
const
Id
&
aOther
)
{
return
!
operator
=
=
(
aOther
)
;
}
inline
PlatformData
*
platformData
(
)
;
inline
const
PlatformData
*
platformData
(
)
const
;
}
;
Thread
(
)
:
id_
(
Id
(
)
)
{
}
template
<
typename
F
typename
.
.
.
Args
>
explicit
Thread
(
F
&
&
f
Args
&
&
.
.
.
args
)
{
MOZ_RELEASE_ASSERT
(
init
(
mozilla
:
:
Forward
<
F
>
(
f
)
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
)
;
}
template
<
typename
F
typename
.
.
.
Args
>
MOZ_MUST_USE
bool
init
(
F
&
&
f
Args
&
&
.
.
.
args
)
{
MOZ_RELEASE_ASSERT
(
!
joinable
(
)
)
;
using
Trampoline
=
detail
:
:
ThreadTrampoline
<
F
Args
.
.
.
>
;
auto
trampoline
=
new
Trampoline
(
mozilla
:
:
Forward
<
F
>
(
f
)
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
;
MOZ_RELEASE_ASSERT
(
trampoline
)
;
return
create
(
Trampoline
:
:
Start
trampoline
)
;
}
~
Thread
(
)
{
MOZ_RELEASE_ASSERT
(
!
joinable
(
)
)
;
}
void
detach
(
)
;
void
join
(
)
;
bool
joinable
(
)
const
{
return
get_id
(
)
!
=
Id
(
)
;
}
Id
get_id
(
)
const
{
return
id_
;
}
Thread
(
Thread
&
&
aOther
)
;
Thread
&
operator
=
(
Thread
&
&
aOther
)
;
private
:
Thread
(
const
Thread
&
)
=
delete
;
void
operator
=
(
const
Thread
&
)
=
delete
;
Id
id_
;
MOZ_MUST_USE
bool
create
(
THREAD_RETURN_TYPE
(
THREAD_CALL_API
*
aMain
)
(
void
*
)
void
*
aArg
)
;
}
;
namespace
ThisThread
{
Thread
:
:
Id
GetId
(
)
;
void
SetName
(
const
char
*
name
)
;
}
namespace
detail
{
template
<
typename
F
typename
.
.
.
Args
>
class
ThreadTrampoline
{
F
f
;
mozilla
:
:
Tuple
<
Args
.
.
.
>
args
;
public
:
explicit
ThreadTrampoline
(
F
&
&
aF
Args
&
&
.
.
.
aArgs
)
:
f
(
mozilla
:
:
Forward
<
F
>
(
aF
)
)
args
(
mozilla
:
:
Forward
<
Args
>
(
aArgs
)
.
.
.
)
{
}
static
THREAD_RETURN_TYPE
THREAD_CALL_API
Start
(
void
*
aPack
)
{
auto
*
pack
=
static_cast
<
ThreadTrampoline
<
F
Args
.
.
.
>
*
>
(
aPack
)
;
pack
-
>
callMain
(
typename
mozilla
:
:
IndexSequenceFor
<
Args
.
.
.
>
:
:
Type
(
)
)
;
delete
pack
;
return
0
;
}
template
<
size_t
.
.
.
Indices
>
void
callMain
(
mozilla
:
:
IndexSequence
<
Indices
.
.
.
>
)
{
f
(
mozilla
:
:
Get
<
Indices
>
(
args
)
.
.
.
)
;
}
}
;
}
}
#
undef
THREAD_RETURN_TYPE
#
endif
