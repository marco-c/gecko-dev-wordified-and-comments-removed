#
ifndef
threading_ProtectedData_h
#
define
threading_ProtectedData_h
#
include
"
threading
/
Thread
.
h
"
namespace
js
{
#
define
DECLARE_ONE_BOOL_OPERATOR
(
OP
T
)
\
template
<
typename
U
>
\
bool
operator
OP
(
const
U
&
other
)
const
{
return
ref
(
)
OP
static_cast
<
T
>
(
other
)
;
}
#
define
DECLARE_BOOL_OPERATORS
(
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
=
=
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
!
=
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
<
=
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
>
=
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
<
T
)
\
DECLARE_ONE_BOOL_OPERATOR
(
>
T
)
class
MOZ_RAII
AutoNoteSingleThreadedRegion
{
public
:
#
ifdef
DEBUG
static
mozilla
:
:
Atomic
<
size_t
>
count
;
AutoNoteSingleThreadedRegion
(
)
{
count
+
+
;
}
~
AutoNoteSingleThreadedRegion
(
)
{
count
-
-
;
}
#
else
AutoNoteSingleThreadedRegion
(
)
{
}
#
endif
}
;
template
<
typename
Check
typename
T
>
class
ProtectedData
{
typedef
ProtectedData
<
Check
T
>
ThisType
;
public
:
template
<
typename
.
.
.
Args
>
explicit
ProtectedData
(
const
Check
&
check
Args
&
&
.
.
.
args
)
:
value
(
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
#
ifdef
DEBUG
check
(
check
)
#
endif
{
}
DECLARE_BOOL_OPERATORS
(
T
)
operator
const
T
&
(
)
const
{
return
ref
(
)
;
}
const
T
&
operator
-
>
(
)
const
{
return
ref
(
)
;
}
template
<
typename
U
>
ThisType
&
operator
=
(
const
U
&
p
)
{
this
-
>
ref
(
)
=
p
;
return
*
this
;
}
template
<
typename
U
>
T
&
operator
+
=
(
const
U
&
rhs
)
{
return
ref
(
)
+
=
rhs
;
}
template
<
typename
U
>
T
&
operator
-
=
(
const
U
&
rhs
)
{
return
ref
(
)
-
=
rhs
;
}
template
<
typename
U
>
T
&
operator
*
=
(
const
U
&
rhs
)
{
return
ref
(
)
*
=
rhs
;
}
template
<
typename
U
>
T
&
operator
/
=
(
const
U
&
rhs
)
{
return
ref
(
)
/
=
rhs
;
}
template
<
typename
U
>
T
&
operator
&
=
(
const
U
&
rhs
)
{
return
ref
(
)
&
=
rhs
;
}
template
<
typename
U
>
T
&
operator
|
=
(
const
U
&
rhs
)
{
return
ref
(
)
|
=
rhs
;
}
T
&
operator
+
+
(
)
{
return
+
+
ref
(
)
;
}
T
&
operator
-
-
(
)
{
return
-
-
ref
(
)
;
}
T
operator
+
+
(
int
)
{
return
ref
(
)
+
+
;
}
T
operator
-
-
(
int
)
{
return
ref
(
)
-
-
;
}
T
&
ref
(
)
{
#
ifdef
DEBUG
if
(
!
AutoNoteSingleThreadedRegion
:
:
count
)
check
.
check
(
)
;
#
endif
return
value
;
}
const
T
&
ref
(
)
const
{
#
ifdef
DEBUG
if
(
!
AutoNoteSingleThreadedRegion
:
:
count
)
check
.
check
(
)
;
#
endif
return
value
;
}
T
&
refNoCheck
(
)
{
return
value
;
}
const
T
&
refNoCheck
(
)
const
{
return
value
;
}
private
:
T
value
;
#
ifdef
DEBUG
Check
check
;
#
endif
}
;
template
<
typename
Check
typename
T
>
class
ProtectedDataNoCheckArgs
:
public
ProtectedData
<
Check
T
>
{
typedef
ProtectedDataNoCheckArgs
<
Check
T
>
ThisType
;
public
:
template
<
typename
.
.
.
Args
>
explicit
ProtectedDataNoCheckArgs
(
Args
&
&
.
.
.
args
)
:
ProtectedData
<
Check
T
>
(
Check
(
)
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
U
>
ThisType
&
operator
=
(
const
U
&
p
)
{
this
-
>
ref
(
)
=
p
;
return
*
this
;
}
}
;
class
ZoneGroup
;
template
<
typename
Check
typename
T
>
class
ProtectedDataZoneGroupArg
:
public
ProtectedData
<
Check
T
>
{
typedef
ProtectedDataZoneGroupArg
<
Check
T
>
ThisType
;
public
:
template
<
typename
.
.
.
Args
>
explicit
ProtectedDataZoneGroupArg
(
ZoneGroup
*
group
Args
&
&
.
.
.
args
)
:
ProtectedData
<
Check
T
>
(
Check
(
group
)
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
U
>
ThisType
&
operator
=
(
const
U
&
p
)
{
this
-
>
ref
(
)
=
p
;
return
*
this
;
}
}
;
class
CheckUnprotected
{
#
ifdef
DEBUG
public
:
inline
void
check
(
)
const
{
}
#
endif
}
;
template
<
typename
T
>
using
UnprotectedData
=
ProtectedDataNoCheckArgs
<
CheckUnprotected
T
>
;
class
CheckThreadLocal
{
#
ifdef
DEBUG
Thread
:
:
Id
id
;
public
:
CheckThreadLocal
(
)
:
id
(
ThisThread
:
:
GetId
(
)
)
{
}
inline
void
check
(
)
const
{
}
#
endif
}
;
template
<
typename
T
>
using
ThreadLocalData
=
ProtectedDataNoCheckArgs
<
CheckThreadLocal
T
>
;
enum
class
AllowedHelperThread
{
None
GCTask
IonCompile
GCTaskOrIonCompile
}
;
template
<
AllowedHelperThread
Helper
>
class
CheckActiveThread
{
public
:
void
check
(
)
const
;
}
;
template
<
typename
T
>
using
ActiveThreadData
=
ProtectedDataNoCheckArgs
<
CheckActiveThread
<
AllowedHelperThread
:
:
None
>
T
>
;
template
<
typename
T
>
using
ActiveThreadOrGCTaskData
=
ProtectedDataNoCheckArgs
<
CheckActiveThread
<
AllowedHelperThread
:
:
GCTask
>
T
>
;
template
<
typename
T
>
using
ActiveThreadOrIonCompileData
=
ProtectedDataNoCheckArgs
<
CheckActiveThread
<
AllowedHelperThread
:
:
IonCompile
>
T
>
;
template
<
AllowedHelperThread
Helper
>
class
CheckZoneGroup
{
#
ifdef
DEBUG
ZoneGroup
*
group
;
public
:
explicit
CheckZoneGroup
(
ZoneGroup
*
group
)
:
group
(
group
)
{
}
void
check
(
)
const
;
#
else
public
:
explicit
CheckZoneGroup
(
ZoneGroup
*
group
)
{
}
#
endif
}
;
template
<
typename
T
>
using
ZoneGroupData
=
ProtectedDataZoneGroupArg
<
CheckZoneGroup
<
AllowedHelperThread
:
:
None
>
T
>
;
template
<
typename
T
>
using
ZoneGroupOrGCTaskData
=
ProtectedDataZoneGroupArg
<
CheckZoneGroup
<
AllowedHelperThread
:
:
GCTask
>
T
>
;
template
<
typename
T
>
using
ZoneGroupOrIonCompileData
=
ProtectedDataZoneGroupArg
<
CheckZoneGroup
<
AllowedHelperThread
:
:
IonCompile
>
T
>
;
template
<
typename
T
>
using
ZoneGroupOrGCTaskOrIonCompileData
=
ProtectedDataZoneGroupArg
<
CheckZoneGroup
<
AllowedHelperThread
:
:
GCTaskOrIonCompile
>
T
>
;
enum
class
GlobalLock
{
GCLock
ExclusiveAccessLock
HelperThreadLock
}
;
template
<
GlobalLock
Lock
AllowedHelperThread
Helper
>
class
CheckGlobalLock
{
#
ifdef
DEBUG
public
:
void
check
(
)
const
;
#
endif
}
;
template
<
typename
T
>
using
GCLockData
=
ProtectedDataNoCheckArgs
<
CheckGlobalLock
<
GlobalLock
:
:
GCLock
AllowedHelperThread
:
:
None
>
T
>
;
template
<
typename
T
>
using
ExclusiveAccessLockData
=
ProtectedDataNoCheckArgs
<
CheckGlobalLock
<
GlobalLock
:
:
ExclusiveAccessLock
AllowedHelperThread
:
:
None
>
T
>
;
template
<
typename
T
>
using
ExclusiveAccessLockOrGCTaskData
=
ProtectedDataNoCheckArgs
<
CheckGlobalLock
<
GlobalLock
:
:
ExclusiveAccessLock
AllowedHelperThread
:
:
GCTask
>
T
>
;
template
<
typename
T
>
using
HelperThreadLockData
=
ProtectedDataNoCheckArgs
<
CheckGlobalLock
<
GlobalLock
:
:
HelperThreadLock
AllowedHelperThread
:
:
None
>
T
>
;
template
<
typename
Check
typename
T
>
class
ProtectedDataWriteOnce
{
typedef
ProtectedDataWriteOnce
<
Check
T
>
ThisType
;
public
:
template
<
typename
.
.
.
Args
>
explicit
ProtectedDataWriteOnce
(
Args
&
&
.
.
.
args
)
:
value
(
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
#
ifdef
DEBUG
nwrites
(
0
)
#
endif
{
}
DECLARE_BOOL_OPERATORS
(
T
)
operator
const
T
&
(
)
const
{
return
ref
(
)
;
}
const
T
&
operator
-
>
(
)
const
{
return
ref
(
)
;
}
template
<
typename
U
>
ThisType
&
operator
=
(
const
U
&
p
)
{
if
(
ref
(
)
!
=
p
)
this
-
>
writeRef
(
)
=
p
;
return
*
this
;
}
const
T
&
ref
(
)
const
{
return
value
;
}
T
&
writeRef
(
)
{
#
ifdef
DEBUG
if
(
!
AutoNoteSingleThreadedRegion
:
:
count
)
check
.
check
(
)
;
MOZ_ASSERT
(
+
+
nwrites
<
=
2
)
;
#
endif
return
value
;
}
private
:
T
value
;
#
ifdef
DEBUG
Check
check
;
size_t
nwrites
;
#
endif
}
;
template
<
typename
T
>
using
WriteOnceData
=
ProtectedDataWriteOnce
<
CheckUnprotected
T
>
;
template
<
typename
T
>
using
ExclusiveAccessLockWriteOnceData
=
ProtectedDataWriteOnce
<
CheckGlobalLock
<
GlobalLock
:
:
ExclusiveAccessLock
AllowedHelperThread
:
:
None
>
T
>
;
#
undef
DECLARE_ASSIGNMENT_OPERATOR
#
undef
DECLARE_ONE_BOOL_OPERATOR
#
undef
DECLARE_BOOL_OPERATORS
}
#
endif
