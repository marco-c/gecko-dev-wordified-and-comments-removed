#
ifndef
threading_Mutex_h
#
define
threading_Mutex_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
js
{
struct
MutexId
{
const
char
*
name
;
uint32_t
order
;
}
;
class
Mutex
:
public
mozilla
:
:
detail
:
:
MutexImpl
{
public
:
#
ifdef
DEBUG
static
bool
Init
(
)
;
static
void
ShutDown
(
)
;
#
else
static
bool
Init
(
)
{
return
true
;
}
static
void
ShutDown
(
)
{
}
#
endif
explicit
Mutex
(
const
MutexId
&
id
)
:
mozilla
:
:
detail
:
:
MutexImpl
(
mozilla
:
:
recordreplay
:
:
Behavior
:
:
DontPreserve
)
#
ifdef
DEBUG
id_
(
id
)
#
endif
{
MOZ_ASSERT
(
id_
.
order
!
=
0
)
;
}
#
ifdef
DEBUG
void
lock
(
)
;
void
unlock
(
)
;
#
else
using
MutexImpl
:
:
lock
;
using
MutexImpl
:
:
unlock
;
#
endif
#
ifdef
DEBUG
public
:
bool
ownedByCurrentThread
(
)
const
;
private
:
const
MutexId
id_
;
using
MutexVector
=
mozilla
:
:
Vector
<
const
Mutex
*
>
;
static
MOZ_THREAD_LOCAL
(
MutexVector
*
)
HeldMutexStack
;
static
MutexVector
&
heldMutexStack
(
)
;
#
endif
}
;
}
#
endif
