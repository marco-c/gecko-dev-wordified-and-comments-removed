#
ifndef
threading_Mutex_h
#
define
threading_Mutex_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
utility
>
#
include
"
threading
/
ThreadId
.
h
"
namespace
js
{
struct
MutexId
{
const
char
*
name
;
uint32_t
order
;
}
;
class
MutexImpl
:
public
mozilla
:
:
detail
:
:
MutexImpl
{
protected
:
MutexImpl
(
)
:
mozilla
:
:
detail
:
:
MutexImpl
(
)
{
}
friend
class
Mutex
;
}
;
class
Mutex
{
private
:
MutexImpl
impl_
;
public
:
#
ifdef
DEBUG
static
bool
Init
(
)
;
#
else
static
bool
Init
(
)
{
return
true
;
}
#
endif
explicit
Mutex
(
const
MutexId
&
id
)
#
ifdef
DEBUG
:
id_
(
id
)
#
endif
{
MOZ_ASSERT
(
id_
.
order
!
=
0
)
;
}
#
ifdef
DEBUG
void
lock
(
)
;
void
unlock
(
)
;
#
else
void
lock
(
)
{
impl_
.
lock
(
)
;
}
void
unlock
(
)
{
impl_
.
unlock
(
)
;
}
#
endif
#
ifdef
DEBUG
public
:
bool
isHeld
(
)
const
;
bool
ownedByCurrentThread
(
)
const
;
private
:
const
MutexId
id_
;
Mutex
*
prev_
=
nullptr
;
ThreadId
owningThread_
;
static
MOZ_THREAD_LOCAL
(
Mutex
*
)
HeldMutexStack
;
#
endif
private
:
#
ifdef
DEBUG
void
preLockChecks
(
)
const
;
void
postLockChecks
(
)
;
void
preUnlockChecks
(
)
;
#
endif
friend
class
ConditionVariable
;
}
;
}
#
endif
