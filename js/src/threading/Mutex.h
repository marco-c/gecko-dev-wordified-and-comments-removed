#
ifndef
threading_Mutex_h
#
define
threading_Mutex_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
js
{
namespace
detail
{
class
ConditionVariableImpl
;
class
MutexImpl
{
public
:
struct
PlatformData
;
MutexImpl
(
)
;
~
MutexImpl
(
)
;
bool
operator
=
=
(
const
MutexImpl
&
rhs
)
{
return
platformData_
=
=
rhs
.
platformData_
;
}
protected
:
void
lock
(
)
;
void
unlock
(
)
;
private
:
MutexImpl
(
const
MutexImpl
&
)
=
delete
;
void
operator
=
(
const
MutexImpl
&
)
=
delete
;
MutexImpl
(
MutexImpl
&
&
)
=
delete
;
void
operator
=
(
MutexImpl
&
&
)
=
delete
;
PlatformData
*
platformData
(
)
;
#
if
defined
(
__APPLE__
)
&
&
defined
(
__MACH__
)
&
&
defined
(
__i386__
)
void
*
platformData_
[
11
]
;
#
elif
defined
(
__APPLE__
)
&
&
defined
(
__MACH__
)
&
&
defined
(
__amd64__
)
void
*
platformData_
[
8
]
;
#
elif
defined
(
__linux__
)
void
*
platformData_
[
40
/
sizeof
(
void
*
)
]
;
#
elif
defined
(
_WIN32
)
void
*
platformData_
[
6
]
;
#
else
void
*
platformData_
[
64
/
sizeof
(
void
*
)
]
;
#
endif
friend
class
js
:
:
detail
:
:
ConditionVariableImpl
;
}
;
}
struct
MutexId
{
const
char
*
name
;
uint32_t
order
;
}
;
#
ifndef
DEBUG
class
Mutex
:
public
detail
:
:
MutexImpl
{
public
:
static
bool
Init
(
)
{
return
true
;
}
static
void
ShutDown
(
)
{
}
explicit
Mutex
(
const
MutexId
&
id
)
{
}
using
MutexImpl
:
:
lock
;
using
MutexImpl
:
:
unlock
;
}
;
#
else
class
Mutex
:
public
detail
:
:
MutexImpl
{
public
:
static
bool
Init
(
)
;
static
void
ShutDown
(
)
;
explicit
Mutex
(
const
MutexId
&
id
)
:
id_
(
id
)
{
MOZ_ASSERT
(
id_
.
order
!
=
0
)
;
}
void
lock
(
)
;
void
unlock
(
)
;
bool
ownedByCurrentThread
(
)
const
;
private
:
const
MutexId
id_
;
using
MutexVector
=
mozilla
:
:
Vector
<
const
Mutex
*
>
;
static
MOZ_THREAD_LOCAL
(
MutexVector
*
)
HeldMutexStack
;
static
MutexVector
&
heldMutexStack
(
)
;
}
;
#
endif
}
#
endif
