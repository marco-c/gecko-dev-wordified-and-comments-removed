#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
float
.
h
>
#
include
<
intrin
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
windows
.
h
>
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
Mutex
.
h
"
#
include
"
threading
/
windows
/
MutexPlatformData
.
h
"
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
InterlockedExchangeAdd
)
#
define
InterlockedExchangeAdd
(
addend
value
)
\
_InterlockedExchangeAdd
(
(
volatile
long
*
)
(
addend
)
(
long
)
(
value
)
)
#
endif
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
InterlockedIncrement
)
#
define
InterlockedIncrement
(
addend
)
\
_InterlockedIncrement
(
(
volatile
long
*
)
(
addend
)
)
#
endif
struct
js
:
:
ConditionVariableImpl
:
:
PlatformData
{
CONDITION_VARIABLE
cv_
;
}
;
js
:
:
detail
:
:
ConditionVariableImpl
:
:
ConditionVariableImpl
(
)
{
InitializeConditionVariable
(
&
platformData
(
)
-
>
cv_
)
;
}
void
js
:
:
detail
:
:
ConditionVariableImpl
:
:
notify_one
(
)
{
WakeConditionVariable
(
&
platformData
(
)
-
>
cv_
)
;
}
void
js
:
:
detail
:
:
ConditionVariableImpl
:
:
notify_all
(
)
{
WakeAllConditionVariable
(
&
platformData
(
)
-
>
cv_
)
;
}
void
js
:
:
detail
:
:
ConditionVariableImpl
:
:
wait
(
Mutex
&
lock
)
{
CRITICAL_SECTION
*
cs
=
&
lock
.
platformData
(
)
-
>
criticalSection
;
bool
r
=
SleepConditionVariableCS
(
&
platformData
(
)
-
>
cv_
cs
INFINITE
)
;
MOZ_RELEASE_ASSERT
(
r
)
;
}
js
:
:
CVStatus
js
:
:
detail
:
:
ConditionVariableImpl
:
:
wait_for
(
Mutex
&
lock
const
mozilla
:
:
TimeDuration
&
rel_time
)
{
CRITICAL_SECTION
*
cs
=
&
lock
.
platformData
(
)
-
>
criticalSection
;
double
msecd
=
rel_time
.
ToMilliseconds
(
)
;
DWORD
msec
=
msecd
<
0
.
0
?
0
:
msecd
>
UINT32_MAX
?
INFINITE
:
static_cast
<
DWORD
>
(
msecd
)
;
BOOL
r
=
SleepConditionVariableCS
(
&
platformData
(
)
-
>
cv_
cs
msec
)
;
if
(
r
)
return
CVStatus
:
:
NoTimeout
;
MOZ_RELEASE_ASSERT
(
GetLastError
(
)
=
=
ERROR_TIMEOUT
)
;
return
CVStatus
:
:
Timeout
;
}
js
:
:
detail
:
:
ConditionVariableImpl
:
:
~
ConditionVariableImpl
(
)
{
}
inline
js
:
:
detail
:
:
ConditionVariableImpl
:
:
PlatformData
*
js
:
:
detail
:
:
ConditionVariableImpl
:
:
platformData
(
)
{
static_assert
(
sizeof
platformData_
>
=
sizeof
(
PlatformData
)
"
platformData_
is
too
small
"
)
;
return
reinterpret_cast
<
PlatformData
*
>
(
platformData_
)
;
}
