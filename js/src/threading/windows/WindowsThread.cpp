#
include
"
jsutil
.
h
"
#
include
"
threading
/
Thread
.
h
"
#
include
"
threading
/
windows
/
ThreadPlatformData
.
h
"
namespace
js
{
inline
Thread
:
:
Id
:
:
PlatformData
*
Thread
:
:
Id
:
:
platformData
(
)
{
static_assert
(
sizeof
platformData_
>
=
sizeof
(
PlatformData
)
"
platformData_
is
too
small
"
)
;
return
reinterpret_cast
<
PlatformData
*
>
(
platformData_
)
;
}
inline
const
Thread
:
:
Id
:
:
PlatformData
*
Thread
:
:
Id
:
:
platformData
(
)
const
{
static_assert
(
sizeof
platformData_
>
=
sizeof
(
PlatformData
)
"
platformData_
is
too
small
"
)
;
return
reinterpret_cast
<
const
PlatformData
*
>
(
platformData_
)
;
}
Thread
:
:
Id
:
:
Id
(
)
{
platformData
(
)
-
>
handle
=
nullptr
;
platformData
(
)
-
>
id
=
0
;
}
bool
Thread
:
:
Id
:
:
operator
=
=
(
const
Id
&
aOther
)
const
{
return
platformData
(
)
-
>
id
=
=
aOther
.
platformData
(
)
-
>
id
;
}
bool
Thread
:
:
create
(
unsigned
int
(
__stdcall
*
aMain
)
(
void
*
)
void
*
aArg
)
{
uintptr_t
handle
=
_beginthreadex
(
nullptr
options_
.
stackSize
(
)
aMain
aArg
STACK_SIZE_PARAM_IS_A_RESERVATION
&
id_
.
platformData
(
)
-
>
id
)
;
if
(
!
handle
)
{
id_
=
Id
(
)
;
return
false
;
}
id_
.
platformData
(
)
-
>
handle
=
reinterpret_cast
<
HANDLE
>
(
handle
)
;
return
true
;
}
void
Thread
:
:
join
(
)
{
MOZ_RELEASE_ASSERT
(
joinable
(
)
)
;
DWORD
r
=
WaitForSingleObject
(
id_
.
platformData
(
)
-
>
handle
INFINITE
)
;
MOZ_RELEASE_ASSERT
(
r
=
=
WAIT_OBJECT_0
)
;
BOOL
success
=
CloseHandle
(
id_
.
platformData
(
)
-
>
handle
)
;
MOZ_RELEASE_ASSERT
(
success
)
;
id_
=
Id
(
)
;
}
void
Thread
:
:
detach
(
)
{
MOZ_RELEASE_ASSERT
(
joinable
(
)
)
;
BOOL
success
=
CloseHandle
(
id_
.
platformData
(
)
-
>
handle
)
;
MOZ_RELEASE_ASSERT
(
success
)
;
id_
=
Id
(
)
;
}
Thread
:
:
Id
ThisThread
:
:
GetId
(
)
{
Thread
:
:
Id
id
;
id
.
platformData
(
)
-
>
handle
=
GetCurrentThread
(
)
;
id
.
platformData
(
)
-
>
id
=
GetCurrentThreadId
(
)
;
MOZ_RELEASE_ASSERT
(
id
!
=
Thread
:
:
Id
(
)
)
;
return
id
;
}
void
ThisThread
:
:
SetName
(
const
char
*
name
)
{
MOZ_RELEASE_ASSERT
(
name
)
;
#
ifdef
_MSC_VER
static
const
DWORD
THREAD_NAME_EXCEPTION
=
0x406D1388
;
static
const
DWORD
THREAD_NAME_INFO_TYPE
=
0x1000
;
#
pragma
pack
(
push
8
)
struct
THREADNAME_INFO
{
DWORD
dwType
;
LPCSTR
szName
;
DWORD
dwThreadID
;
DWORD
dwFlags
;
}
;
#
pragma
pack
(
pop
)
THREADNAME_INFO
info
;
info
.
dwType
=
THREAD_NAME_INFO_TYPE
;
info
.
szName
=
name
;
info
.
dwThreadID
=
GetCurrentThreadId
(
)
;
info
.
dwFlags
=
0
;
__try
{
RaiseException
(
THREAD_NAME_EXCEPTION
0
sizeof
(
info
)
/
sizeof
(
ULONG_PTR
)
(
ULONG_PTR
*
)
&
info
)
;
}
__except
(
EXCEPTION_EXECUTE_HANDLER
)
{
}
#
endif
}
void
ThisThread
:
:
GetName
(
char
*
nameBuffer
size_t
len
)
{
MOZ_RELEASE_ASSERT
(
len
>
0
)
;
*
nameBuffer
=
'
\
0
'
;
}
}
