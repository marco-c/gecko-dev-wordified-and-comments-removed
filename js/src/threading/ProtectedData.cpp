#
include
"
threading
/
ProtectedData
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
gc
/
Heap
.
h
"
#
include
"
vm
/
HelperThreads
.
h
"
namespace
js
{
#
ifdef
DEBUG
mozilla
:
:
Atomic
<
size_t
>
AutoNoteSingleThreadedRegion
:
:
count
(
0
)
;
template
<
AllowedBackgroundThread
Background
>
static
inline
bool
OnBackgroundThread
(
)
{
if
(
Background
=
=
AllowedBackgroundThread
:
:
IonCompile
|
|
Background
=
=
AllowedBackgroundThread
:
:
GCTaskOrIonCompile
)
{
if
(
CurrentThreadIsIonCompiling
(
)
)
return
true
;
}
if
(
Background
=
=
AllowedBackgroundThread
:
:
GCTask
|
|
Background
=
=
AllowedBackgroundThread
:
:
GCTaskOrIonCompile
)
{
if
(
TlsContext
.
get
(
)
-
>
performingGC
|
|
TlsContext
.
get
(
)
-
>
runtime
(
)
-
>
gc
.
onBackgroundThread
(
)
)
return
true
;
}
return
false
;
}
template
<
AllowedBackgroundThread
Background
>
void
CheckActiveThread
<
Background
>
:
:
check
(
)
const
{
#
ifndef
XP_WIN
if
(
OnBackgroundThread
<
Background
>
(
)
)
return
;
JSContext
*
cx
=
TlsContext
.
get
(
)
;
MOZ_ASSERT
(
cx
=
=
cx
-
>
runtime
(
)
-
>
activeContext
)
;
#
endif
}
template
class
CheckActiveThread
<
AllowedBackgroundThread
:
:
None
>
;
template
class
CheckActiveThread
<
AllowedBackgroundThread
:
:
GCTask
>
;
template
class
CheckActiveThread
<
AllowedBackgroundThread
:
:
IonCompile
>
;
template
<
AllowedBackgroundThread
Background
>
void
CheckZoneGroup
<
Background
>
:
:
check
(
)
const
{
if
(
OnBackgroundThread
<
Background
>
(
)
)
return
;
if
(
group
)
{
}
else
{
MOZ_ASSERT
(
TlsContext
.
get
(
)
-
>
runtime
(
)
-
>
currentThreadHasExclusiveAccess
(
)
)
;
}
}
template
class
CheckZoneGroup
<
AllowedBackgroundThread
:
:
None
>
;
template
class
CheckZoneGroup
<
AllowedBackgroundThread
:
:
GCTask
>
;
template
class
CheckZoneGroup
<
AllowedBackgroundThread
:
:
IonCompile
>
;
template
class
CheckZoneGroup
<
AllowedBackgroundThread
:
:
GCTaskOrIonCompile
>
;
template
<
GlobalLock
Lock
AllowedBackgroundThread
Background
>
void
CheckGlobalLock
<
Lock
Background
>
:
:
check
(
)
const
{
if
(
OnBackgroundThread
<
Background
>
(
)
)
return
;
switch
(
Lock
)
{
case
GlobalLock
:
:
GCLock
:
MOZ_ASSERT
(
TlsContext
.
get
(
)
-
>
runtime
(
)
-
>
gc
.
currentThreadHasLockedGC
(
)
)
;
break
;
case
GlobalLock
:
:
ExclusiveAccessLock
:
MOZ_ASSERT
(
TlsContext
.
get
(
)
-
>
runtime
(
)
-
>
currentThreadHasExclusiveAccess
(
)
)
;
break
;
case
GlobalLock
:
:
HelperThreadLock
:
MOZ_ASSERT
(
HelperThreadState
(
)
.
isLockedByCurrentThread
(
)
)
;
break
;
}
}
template
class
CheckGlobalLock
<
GlobalLock
:
:
GCLock
AllowedBackgroundThread
:
:
None
>
;
template
class
CheckGlobalLock
<
GlobalLock
:
:
ExclusiveAccessLock
AllowedBackgroundThread
:
:
None
>
;
template
class
CheckGlobalLock
<
GlobalLock
:
:
ExclusiveAccessLock
AllowedBackgroundThread
:
:
GCTask
>
;
template
class
CheckGlobalLock
<
GlobalLock
:
:
HelperThreadLock
AllowedBackgroundThread
:
:
None
>
;
#
endif
}
