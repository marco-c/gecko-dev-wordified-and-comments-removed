#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
pthread
.
h
>
#
include
"
threading
/
Mutex
.
h
"
#
include
"
threading
/
posix
/
MutexPlatformData
.
h
"
js
:
:
Mutex
:
:
Mutex
(
)
{
int
r
=
pthread_mutex_init
(
&
platformData
(
)
-
>
ptMutex
NULL
)
;
MOZ_RELEASE_ASSERT
(
r
=
=
0
)
;
}
js
:
:
Mutex
:
:
~
Mutex
(
)
{
int
r
=
pthread_mutex_destroy
(
&
platformData
(
)
-
>
ptMutex
)
;
MOZ_RELEASE_ASSERT
(
r
=
=
0
)
;
}
void
js
:
:
Mutex
:
:
lock
(
)
{
int
r
=
pthread_mutex_lock
(
&
platformData
(
)
-
>
ptMutex
)
;
MOZ_RELEASE_ASSERT
(
r
=
=
0
)
;
}
void
js
:
:
Mutex
:
:
unlock
(
)
{
int
r
=
pthread_mutex_unlock
(
&
platformData
(
)
-
>
ptMutex
)
;
MOZ_RELEASE_ASSERT
(
r
=
=
0
)
;
}
js
:
:
Mutex
:
:
PlatformData
*
js
:
:
Mutex
:
:
platformData
(
)
{
static_assert
(
sizeof
(
platformData_
)
>
=
sizeof
(
PlatformData
)
"
platformData_
is
too
small
"
)
;
return
reinterpret_cast
<
PlatformData
*
>
(
platformData_
)
;
}
