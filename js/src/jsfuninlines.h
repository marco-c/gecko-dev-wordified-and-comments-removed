#
ifndef
jsfuninlines_h
#
define
jsfuninlines_h
#
include
"
jsfun
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
namespace
js
{
inline
const
char
*
GetFunctionNameBytes
(
JSContext
*
cx
JSFunction
*
fun
JSAutoByteString
*
bytes
)
{
if
(
JSAtom
*
name
=
fun
-
>
name
(
)
)
return
bytes
-
>
encodeLatin1
(
cx
name
)
;
return
js_anonymous_str
;
}
static
inline
JSObject
*
SkipEnvironmentObjects
(
JSObject
*
env
)
{
if
(
!
env
)
return
nullptr
;
while
(
env
-
>
is
<
EnvironmentObject
>
(
)
)
env
=
&
env
-
>
as
<
EnvironmentObject
>
(
)
.
enclosingEnvironment
(
)
;
return
env
;
}
inline
bool
CanReuseFunctionForClone
(
JSContext
*
cx
HandleFunction
fun
)
{
if
(
!
fun
-
>
isSingleton
(
)
)
return
false
;
if
(
fun
-
>
isInterpretedLazy
(
)
)
{
LazyScript
*
lazy
=
fun
-
>
lazyScript
(
)
;
if
(
lazy
-
>
hasBeenCloned
(
)
)
return
false
;
lazy
-
>
setHasBeenCloned
(
)
;
}
else
{
JSScript
*
script
=
fun
-
>
nonLazyScript
(
)
;
if
(
script
-
>
hasBeenCloned
(
)
)
return
false
;
script
-
>
setHasBeenCloned
(
)
;
}
return
true
;
}
inline
JSFunction
*
CloneFunctionObjectIfNotSingleton
(
JSContext
*
cx
HandleFunction
fun
HandleObject
parent
HandleObject
proto
=
nullptr
NewObjectKind
newKind
=
GenericObject
)
{
if
(
CanReuseFunctionForClone
(
cx
fun
)
)
{
RootedObject
obj
(
cx
SkipEnvironmentObjects
(
parent
)
)
;
ObjectOpResult
succeeded
;
if
(
proto
&
&
!
SetPrototype
(
cx
fun
proto
succeeded
)
)
return
nullptr
;
MOZ_ASSERT
(
!
proto
|
|
succeeded
)
;
fun
-
>
setEnvironment
(
parent
)
;
return
fun
;
}
gc
:
:
AllocKind
finalizeKind
=
gc
:
:
AllocKind
:
:
FUNCTION
;
gc
:
:
AllocKind
extendedFinalizeKind
=
gc
:
:
AllocKind
:
:
FUNCTION_EXTENDED
;
gc
:
:
AllocKind
kind
=
fun
-
>
isExtended
(
)
?
extendedFinalizeKind
:
finalizeKind
;
if
(
CanReuseScriptForClone
(
cx
-
>
compartment
(
)
fun
parent
)
)
return
CloneFunctionReuseScript
(
cx
fun
parent
kind
newKind
proto
)
;
RootedScript
script
(
cx
JSFunction
:
:
getOrCreateScript
(
cx
fun
)
)
;
if
(
!
script
)
return
nullptr
;
RootedScope
enclosingScope
(
cx
script
-
>
enclosingScope
(
)
)
;
return
CloneFunctionAndScript
(
cx
fun
parent
enclosingScope
kind
proto
)
;
}
}
#
endif
