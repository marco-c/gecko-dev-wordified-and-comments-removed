#
ifndef
jspubtd_h
#
define
jspubtd_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
jsprototypes
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
Result
.
h
"
#
include
"
js
/
TraceKind
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
if
defined
(
JS_GC_ZEAL
)
|
|
defined
(
DEBUG
)
#
define
JSGC_HASH_TABLE_CHECKS
#
endif
namespace
JS
{
class
AutoIdVector
;
class
CallArgs
;
template
<
typename
T
>
class
Rooted
;
class
JS_FRIEND_API
(
CompileOptions
)
;
class
JS_FRIEND_API
(
ReadOnlyCompileOptions
)
;
class
JS_FRIEND_API
(
OwningCompileOptions
)
;
class
JS_FRIEND_API
(
TransitiveCompileOptions
)
;
class
JS_PUBLIC_API
(
CompartmentOptions
)
;
class
Value
;
struct
Zone
;
}
enum
JSVersion
{
JSVERSION_ECMA_3
=
148
JSVERSION_1_6
=
160
JSVERSION_1_7
=
170
JSVERSION_1_8
=
180
JSVERSION_ECMA_5
=
185
JSVERSION_DEFAULT
=
0
JSVERSION_UNKNOWN
=
-
1
JSVERSION_LATEST
=
JSVERSION_ECMA_5
}
;
enum
JSType
{
JSTYPE_UNDEFINED
JSTYPE_OBJECT
JSTYPE_FUNCTION
JSTYPE_STRING
JSTYPE_NUMBER
JSTYPE_BOOLEAN
JSTYPE_NULL
JSTYPE_SYMBOL
JSTYPE_LIMIT
}
;
enum
JSProtoKey
{
#
define
PROTOKEY_AND_INITIALIZER
(
name
init
clasp
)
JSProto_
#
#
name
JS_FOR_EACH_PROTOTYPE
(
PROTOKEY_AND_INITIALIZER
)
#
undef
PROTOKEY_AND_INITIALIZER
JSProto_LIMIT
}
;
struct
JSClass
;
struct
JSCompartment
;
class
JSErrorReport
;
struct
JSExceptionState
;
struct
JSFunctionSpec
;
struct
JSLocaleCallbacks
;
struct
JSPrincipals
;
struct
JSPropertySpec
;
struct
JSRuntime
;
struct
JSSecurityCallbacks
;
struct
JSStructuredCloneCallbacks
;
struct
JSStructuredCloneReader
;
struct
JSStructuredCloneWriter
;
class
JS_PUBLIC_API
(
JSTracer
)
;
class
JSFlatString
;
typedef
bool
(
*
JSInitCallback
)
(
void
)
;
template
<
typename
T
>
struct
JSConstScalarSpec
;
typedef
JSConstScalarSpec
<
double
>
JSConstDoubleSpec
;
typedef
JSConstScalarSpec
<
int32_t
>
JSConstIntegerSpec
;
namespace
js
{
namespace
gc
{
class
AutoTraceSession
;
class
StoreBuffer
;
}
class
CooperatingContext
;
inline
JSCompartment
*
GetContextCompartment
(
const
JSContext
*
cx
)
;
inline
JS
:
:
Zone
*
GetContextZone
(
const
JSContext
*
cx
)
;
JS_FRIEND_API
(
bool
)
CurrentThreadCanAccessRuntime
(
const
JSRuntime
*
rt
)
;
#
ifdef
DEBUG
JS_FRIEND_API
(
bool
)
CurrentThreadIsPerformingGC
(
)
;
#
endif
}
namespace
JS
{
class
JS_PUBLIC_API
(
AutoEnterCycleCollection
)
;
class
JS_PUBLIC_API
(
AutoAssertOnBarrier
)
;
struct
JS_PUBLIC_API
(
PropertyDescriptor
)
;
typedef
void
(
*
OffThreadCompileCallback
)
(
void
*
token
void
*
callbackData
)
;
enum
class
HeapState
{
Idle
Tracing
MajorCollecting
MinorCollecting
CycleCollecting
}
;
JS_PUBLIC_API
(
HeapState
)
CurrentThreadHeapState
(
)
;
static
inline
bool
CurrentThreadIsHeapBusy
(
)
{
return
CurrentThreadHeapState
(
)
!
=
HeapState
:
:
Idle
;
}
static
inline
bool
CurrentThreadIsHeapTracing
(
)
{
return
CurrentThreadHeapState
(
)
=
=
HeapState
:
:
Tracing
;
}
static
inline
bool
CurrentThreadIsHeapMajorCollecting
(
)
{
return
CurrentThreadHeapState
(
)
=
=
HeapState
:
:
MajorCollecting
;
}
static
inline
bool
CurrentThreadIsHeapMinorCollecting
(
)
{
return
CurrentThreadHeapState
(
)
=
=
HeapState
:
:
MinorCollecting
;
}
static
inline
bool
CurrentThreadIsHeapCollecting
(
)
{
HeapState
state
=
CurrentThreadHeapState
(
)
;
return
state
=
=
HeapState
:
:
MajorCollecting
|
|
state
=
=
HeapState
:
:
MinorCollecting
;
}
static
inline
bool
CurrentThreadIsHeapCycleCollecting
(
)
{
return
CurrentThreadHeapState
(
)
=
=
HeapState
:
:
CycleCollecting
;
}
class
MOZ_STACK_CLASS
JS_PUBLIC_API
(
AutoEnterCycleCollection
)
{
#
ifdef
DEBUG
public
:
explicit
AutoEnterCycleCollection
(
JSRuntime
*
rt
)
;
~
AutoEnterCycleCollection
(
)
;
#
else
public
:
explicit
AutoEnterCycleCollection
(
JSRuntime
*
rt
)
{
}
~
AutoEnterCycleCollection
(
)
{
}
#
endif
}
;
class
RootingContext
;
template
<
>
struct
MapTypeToRootKind
<
void
*
>
{
static
const
RootKind
kind
=
RootKind
:
:
Traceable
;
}
;
using
RootedListHeads
=
mozilla
:
:
EnumeratedArray
<
RootKind
RootKind
:
:
Limit
Rooted
<
void
*
>
*
>
;
enum
StackKind
{
StackForSystemCode
StackForTrustedScript
StackForUntrustedScript
StackKindCount
}
;
class
JS_PUBLIC_API
(
AutoGCRooter
)
;
class
RootingContext
{
RootedListHeads
stackRoots_
;
template
<
typename
T
>
friend
class
JS
:
:
Rooted
;
JS
:
:
AutoGCRooter
*
autoGCRooters_
;
friend
class
JS
:
:
AutoGCRooter
;
public
:
RootingContext
(
)
;
void
traceStackRoots
(
JSTracer
*
trc
)
;
void
checkNoGCRooters
(
)
;
protected
:
JSCompartment
*
compartment_
;
JS
:
:
Zone
*
zone_
;
public
:
uintptr_t
nativeStackLimit
[
StackKindCount
]
;
static
const
RootingContext
*
get
(
const
JSContext
*
cx
)
{
return
reinterpret_cast
<
const
RootingContext
*
>
(
cx
)
;
}
static
RootingContext
*
get
(
JSContext
*
cx
)
{
return
reinterpret_cast
<
RootingContext
*
>
(
cx
)
;
}
friend
JSCompartment
*
js
:
:
GetContextCompartment
(
const
JSContext
*
cx
)
;
friend
JS
:
:
Zone
*
js
:
:
GetContextZone
(
const
JSContext
*
cx
)
;
}
;
class
JS_PUBLIC_API
(
AutoGCRooter
)
{
public
:
AutoGCRooter
(
JSContext
*
cx
ptrdiff_t
tag
)
:
AutoGCRooter
(
JS
:
:
RootingContext
:
:
get
(
cx
)
tag
)
{
}
AutoGCRooter
(
JS
:
:
RootingContext
*
cx
ptrdiff_t
tag
)
:
down
(
cx
-
>
autoGCRooters_
)
tag_
(
tag
)
stackTop
(
&
cx
-
>
autoGCRooters_
)
{
MOZ_ASSERT
(
this
!
=
*
stackTop
)
;
*
stackTop
=
this
;
}
~
AutoGCRooter
(
)
{
MOZ_ASSERT
(
this
=
=
*
stackTop
)
;
*
stackTop
=
down
;
}
inline
void
trace
(
JSTracer
*
trc
)
;
static
void
traceAll
(
const
js
:
:
CooperatingContext
&
target
JSTracer
*
trc
)
;
static
void
traceAllWrappers
(
const
js
:
:
CooperatingContext
&
target
JSTracer
*
trc
)
;
protected
:
AutoGCRooter
*
const
down
;
ptrdiff_t
tag_
;
enum
{
VALARRAY
=
-
2
PARSER
=
-
3
VALVECTOR
=
-
10
IDVECTOR
=
-
11
OBJVECTOR
=
-
14
IONMASM
=
-
19
WRAPVECTOR
=
-
20
WRAPPER
=
-
21
CUSTOM
=
-
26
}
;
static
ptrdiff_t
GetTag
(
const
Value
&
value
)
{
return
VALVECTOR
;
}
static
ptrdiff_t
GetTag
(
const
jsid
&
id
)
{
return
IDVECTOR
;
}
static
ptrdiff_t
GetTag
(
JSObject
*
obj
)
{
return
OBJVECTOR
;
}
private
:
AutoGCRooter
*
*
const
stackTop
;
AutoGCRooter
(
AutoGCRooter
&
ida
)
=
delete
;
void
operator
=
(
AutoGCRooter
&
ida
)
=
delete
;
}
;
}
namespace
js
{
inline
JSCompartment
*
GetContextCompartment
(
const
JSContext
*
cx
)
{
return
JS
:
:
RootingContext
:
:
get
(
cx
)
-
>
compartment_
;
}
inline
JS
:
:
Zone
*
GetContextZone
(
const
JSContext
*
cx
)
{
return
JS
:
:
RootingContext
:
:
get
(
cx
)
-
>
zone_
;
}
}
MOZ_BEGIN_EXTERN_C
typedef
struct
PRFileDesc
PRFileDesc
;
MOZ_END_EXTERN_C
#
endif
