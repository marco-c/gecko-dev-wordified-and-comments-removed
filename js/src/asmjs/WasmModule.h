#
ifndef
wasm_module_h
#
define
wasm_module_h
#
include
"
asmjs
/
WasmCode
.
h
"
#
include
"
asmjs
/
WasmTable
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
wasm
{
JSObject
*
CreateI64Object
(
JSContext
*
cx
int64_t
i64
)
;
bool
ReadI64Object
(
JSContext
*
cx
HandleValue
v
int64_t
*
i64
)
;
struct
LinkDataCacheablePod
{
uint32_t
functionCodeLength
;
uint32_t
globalDataLength
;
uint32_t
interruptOffset
;
uint32_t
outOfBoundsOffset
;
uint32_t
unalignedAccessOffset
;
uint32_t
badIndirectCallOffset
;
LinkDataCacheablePod
(
)
{
mozilla
:
:
PodZero
(
this
)
;
}
}
;
struct
LinkData
:
LinkDataCacheablePod
{
LinkDataCacheablePod
&
pod
(
)
{
return
*
this
;
}
const
LinkDataCacheablePod
&
pod
(
)
const
{
return
*
this
;
}
struct
InternalLink
{
enum
Kind
{
RawPointer
CodeLabel
InstructionImmediate
}
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
patchAtOffset
;
MOZ_INIT_OUTSIDE_CTOR
uint32_t
targetOffset
;
InternalLink
(
)
=
default
;
explicit
InternalLink
(
Kind
kind
)
;
bool
isRawPointerPatch
(
)
;
}
;
typedef
Vector
<
InternalLink
0
SystemAllocPolicy
>
InternalLinkVector
;
struct
SymbolicLinkArray
:
EnumeratedArray
<
SymbolicAddress
SymbolicAddress
:
:
Limit
Uint32Vector
>
{
WASM_DECLARE_SERIALIZABLE
(
SymbolicLinkArray
)
}
;
InternalLinkVector
internalLinks
;
SymbolicLinkArray
symbolicLinks
;
WASM_DECLARE_SERIALIZABLE
(
LinkData
)
}
;
typedef
UniquePtr
<
LinkData
>
UniqueLinkData
;
typedef
UniquePtr
<
const
LinkData
>
UniqueConstLinkData
;
struct
Import
{
CacheableChars
module
;
CacheableChars
func
;
DefinitionKind
kind
;
Import
(
)
=
default
;
Import
(
UniqueChars
&
&
module
UniqueChars
&
&
func
DefinitionKind
kind
)
:
module
(
Move
(
module
)
)
func
(
Move
(
func
)
)
kind
(
kind
)
{
}
WASM_DECLARE_SERIALIZABLE
(
Import
)
}
;
typedef
Vector
<
Import
0
SystemAllocPolicy
>
ImportVector
;
class
Export
{
CacheableChars
fieldName_
;
struct
CacheablePod
{
DefinitionKind
kind_
;
uint32_t
index_
;
}
pod
;
public
:
Export
(
)
=
default
;
explicit
Export
(
UniqueChars
fieldName
uint32_t
index
DefinitionKind
kind
)
;
explicit
Export
(
UniqueChars
fieldName
DefinitionKind
kind
)
;
const
char
*
fieldName
(
)
const
{
return
fieldName_
.
get
(
)
;
}
DefinitionKind
kind
(
)
const
{
return
pod
.
kind_
;
}
uint32_t
funcIndex
(
)
const
;
uint32_t
globalIndex
(
)
const
;
WASM_DECLARE_SERIALIZABLE
(
Export
)
}
;
typedef
Vector
<
Export
0
SystemAllocPolicy
>
ExportVector
;
struct
DataSegment
{
uint32_t
memoryOffset
;
uint32_t
bytecodeOffset
;
uint32_t
length
;
}
;
typedef
Vector
<
DataSegment
0
SystemAllocPolicy
>
DataSegmentVector
;
struct
ElemSegment
{
uint32_t
tableIndex
;
InitExpr
offset
;
Uint32Vector
elems
;
ElemSegment
(
)
=
default
;
ElemSegment
(
uint32_t
tableIndex
InitExpr
offset
Uint32Vector
&
&
elems
)
:
tableIndex
(
tableIndex
)
offset
(
offset
)
elems
(
Move
(
elems
)
)
{
}
WASM_DECLARE_SERIALIZABLE
(
ElemSegment
)
}
;
typedef
Vector
<
ElemSegment
0
SystemAllocPolicy
>
ElemSegmentVector
;
class
Module
:
public
RefCounted
<
Module
>
{
const
Bytes
code_
;
const
LinkData
linkData_
;
const
ImportVector
imports_
;
const
ExportVector
exports_
;
const
DataSegmentVector
dataSegments_
;
const
ElemSegmentVector
elemSegments_
;
const
SharedMetadata
metadata_
;
const
SharedBytes
bytecode_
;
bool
instantiateFunctions
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
)
const
;
bool
instantiateMemory
(
JSContext
*
cx
MutableHandleWasmMemoryObject
memory
)
const
;
bool
instantiateTable
(
JSContext
*
cx
MutableHandleWasmTableObject
table
SharedTableVector
*
tables
)
const
;
bool
initElems
(
JSContext
*
cx
HandleWasmInstanceObject
instanceObj
const
ValVector
&
globalImports
HandleWasmTableObject
tableObj
)
const
;
public
:
Module
(
Bytes
&
&
code
LinkData
&
&
linkData
ImportVector
&
&
imports
ExportVector
&
&
exports
DataSegmentVector
&
&
dataSegments
ElemSegmentVector
&
&
elemSegments
const
Metadata
&
metadata
const
ShareableBytes
&
bytecode
)
:
code_
(
Move
(
code
)
)
linkData_
(
Move
(
linkData
)
)
imports_
(
Move
(
imports
)
)
exports_
(
Move
(
exports
)
)
dataSegments_
(
Move
(
dataSegments
)
)
elemSegments_
(
Move
(
elemSegments
)
)
metadata_
(
&
metadata
)
bytecode_
(
&
bytecode
)
{
}
const
Metadata
&
metadata
(
)
const
{
return
*
metadata_
;
}
const
ImportVector
&
imports
(
)
const
{
return
imports_
;
}
bool
instantiate
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
HandleWasmTableObject
tableImport
HandleWasmMemoryObject
memoryImport
const
ValVector
&
globalImports
HandleObject
instanceProto
MutableHandleWasmInstanceObject
instanceObj
)
const
;
size_t
serializedSize
(
)
const
;
uint8_t
*
serialize
(
uint8_t
*
cursor
)
const
;
static
const
uint8_t
*
deserialize
(
const
uint8_t
*
cursor
RefPtr
<
Module
>
*
module
Metadata
*
maybeMetadata
=
nullptr
)
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
size_t
*
code
size_t
*
data
)
const
;
}
;
typedef
RefPtr
<
Module
>
SharedModule
;
}
}
#
endif
