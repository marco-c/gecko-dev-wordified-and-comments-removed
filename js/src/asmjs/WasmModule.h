#
ifndef
wasm_module_h
#
define
wasm_module_h
#
include
"
asmjs
/
WasmCode
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
class
ArrayBufferObjectMaybeShared
;
class
WasmInstanceObject
;
namespace
wasm
{
struct
LinkDataCacheablePod
{
uint32_t
functionCodeLength
;
uint32_t
globalDataLength
;
uint32_t
interruptOffset
;
uint32_t
outOfBoundsOffset
;
LinkDataCacheablePod
(
)
{
mozilla
:
:
PodZero
(
this
)
;
}
}
;
struct
LinkData
:
LinkDataCacheablePod
{
LinkDataCacheablePod
&
pod
(
)
{
return
*
this
;
}
const
LinkDataCacheablePod
&
pod
(
)
const
{
return
*
this
;
}
struct
InternalLink
{
enum
Kind
{
RawPointer
CodeLabel
InstructionImmediate
}
;
uint32_t
patchAtOffset
;
uint32_t
targetOffset
;
InternalLink
(
)
=
default
;
explicit
InternalLink
(
Kind
kind
)
;
bool
isRawPointerPatch
(
)
;
}
;
typedef
Vector
<
InternalLink
0
SystemAllocPolicy
>
InternalLinkVector
;
struct
SymbolicLinkArray
:
EnumeratedArray
<
SymbolicAddress
SymbolicAddress
:
:
Limit
Uint32Vector
>
{
WASM_DECLARE_SERIALIZABLE
(
SymbolicLinkArray
)
}
;
struct
FuncTable
{
uint32_t
globalDataOffset
;
Uint32Vector
elemOffsets
;
FuncTable
(
uint32_t
globalDataOffset
Uint32Vector
&
&
elemOffsets
)
:
globalDataOffset
(
globalDataOffset
)
elemOffsets
(
Move
(
elemOffsets
)
)
{
}
FuncTable
(
FuncTable
&
&
rhs
)
:
globalDataOffset
(
rhs
.
globalDataOffset
)
elemOffsets
(
Move
(
rhs
.
elemOffsets
)
)
{
}
FuncTable
(
)
=
default
;
WASM_DECLARE_SERIALIZABLE
(
FuncTable
)
}
;
typedef
Vector
<
FuncTable
0
SystemAllocPolicy
>
FuncTableVector
;
InternalLinkVector
internalLinks
;
SymbolicLinkArray
symbolicLinks
;
FuncTableVector
funcTables
;
WASM_DECLARE_SERIALIZABLE
(
LinkData
)
}
;
typedef
UniquePtr
<
LinkData
>
UniqueLinkData
;
typedef
UniquePtr
<
const
LinkData
>
UniqueConstLinkData
;
struct
ImportName
{
CacheableChars
module
;
CacheableChars
func
;
ImportName
(
)
=
default
;
ImportName
(
UniqueChars
&
&
module
UniqueChars
&
&
func
)
:
module
(
Move
(
module
)
)
func
(
Move
(
func
)
)
{
}
WASM_DECLARE_SERIALIZABLE
(
ImportName
)
}
;
typedef
Vector
<
ImportName
0
SystemAllocPolicy
>
ImportNameVector
;
static
const
uint32_t
MemoryExport
=
UINT32_MAX
;
struct
ExportMap
{
CacheableCharsVector
fieldNames
;
Uint32Vector
fieldsToExports
;
WASM_DECLARE_SERIALIZABLE
(
ExportMap
)
}
;
class
Module
{
const
Bytes
code_
;
const
LinkData
linkData_
;
const
ImportNameVector
importNames_
;
const
ExportMap
exportMap_
;
const
SharedMetadata
metadata_
;
const
SharedBytes
bytecode_
;
public
:
Module
(
Bytes
&
&
code
LinkData
&
&
linkData
ImportNameVector
&
&
importNames
ExportMap
&
&
exportMap
const
Metadata
&
metadata
const
ShareableBytes
&
bytecode
)
:
code_
(
Move
(
code
)
)
linkData_
(
Move
(
linkData
)
)
importNames_
(
Move
(
importNames
)
)
exportMap_
(
Move
(
exportMap
)
)
metadata_
(
&
metadata
)
bytecode_
(
&
bytecode
)
{
}
const
Metadata
&
metadata
(
)
const
{
return
*
metadata_
;
}
const
ImportNameVector
&
importNames
(
)
const
{
return
importNames_
;
}
bool
instantiate
(
JSContext
*
cx
Handle
<
FunctionVector
>
funcImports
Handle
<
ArrayBufferObjectMaybeShared
*
>
heap
MutableHandle
<
WasmInstanceObject
*
>
instanceObj
)
const
;
size_t
serializedSize
(
)
const
;
uint8_t
*
serialize
(
uint8_t
*
cursor
)
const
;
static
const
uint8_t
*
deserialize
(
ExclusiveContext
*
cx
const
uint8_t
*
cursor
UniquePtr
<
Module
>
*
module
Metadata
*
maybeMetadata
=
nullptr
)
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
size_t
*
code
size_t
*
data
)
const
;
}
;
typedef
UniquePtr
<
Module
>
UniqueModule
;
}
}
#
endif
