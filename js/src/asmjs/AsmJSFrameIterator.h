#
ifndef
asmjs_AsmJSFrameIterator_h
#
define
asmjs_AsmJSFrameIterator_h
#
include
<
stdint
.
h
>
#
include
"
asmjs
/
Wasm
.
h
"
#
include
"
js
/
ProfilingFrameIterator
.
h
"
class
JSAtom
;
namespace
js
{
class
AsmJSActivation
;
class
AsmJSModule
;
namespace
jit
{
class
MacroAssembler
;
class
Label
;
}
namespace
wasm
{
class
CallSite
;
}
class
AsmJSFrameIterator
{
const
AsmJSModule
*
module_
;
const
wasm
:
:
CallSite
*
callsite_
;
uint8_t
*
fp_
;
const
void
*
codeRange_
;
void
settle
(
)
;
public
:
explicit
AsmJSFrameIterator
(
)
:
module_
(
nullptr
)
{
}
explicit
AsmJSFrameIterator
(
const
AsmJSActivation
&
activation
)
;
void
operator
+
+
(
)
;
bool
done
(
)
const
{
return
!
fp_
;
}
JSAtom
*
functionDisplayAtom
(
)
const
;
unsigned
computeLine
(
uint32_t
*
column
)
const
;
}
;
class
AsmJSProfilingFrameIterator
{
const
AsmJSModule
*
module_
;
uint8_t
*
callerFP_
;
void
*
callerPC_
;
void
*
stackAddress_
;
wasm
:
:
ExitReason
exitReason_
;
const
void
*
codeRange_
;
void
initFromFP
(
const
AsmJSActivation
&
activation
)
;
public
:
AsmJSProfilingFrameIterator
(
)
:
codeRange_
(
nullptr
)
{
}
explicit
AsmJSProfilingFrameIterator
(
const
AsmJSActivation
&
activation
)
;
AsmJSProfilingFrameIterator
(
const
AsmJSActivation
&
activation
const
JS
:
:
ProfilingFrameIterator
:
:
RegisterState
&
state
)
;
void
operator
+
+
(
)
;
bool
done
(
)
const
{
return
!
codeRange_
;
}
void
*
stackAddress
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
stackAddress_
;
}
const
char
*
label
(
)
const
;
}
;
struct
AsmJSOffsets
{
MOZ_IMPLICIT
AsmJSOffsets
(
uint32_t
begin
=
0
uint32_t
end
=
0
)
:
begin
(
begin
)
end
(
end
)
{
}
uint32_t
begin
;
uint32_t
end
;
}
;
struct
AsmJSProfilingOffsets
:
AsmJSOffsets
{
MOZ_IMPLICIT
AsmJSProfilingOffsets
(
uint32_t
profilingReturn
=
0
)
:
AsmJSOffsets
(
)
profilingReturn
(
profilingReturn
)
{
}
uint32_t
profilingEntry
(
)
const
{
return
begin
;
}
uint32_t
profilingReturn
;
}
;
struct
AsmJSFunctionOffsets
:
AsmJSProfilingOffsets
{
MOZ_IMPLICIT
AsmJSFunctionOffsets
(
uint32_t
nonProfilingEntry
=
0
uint32_t
profilingJump
=
0
uint32_t
profilingEpilogue
=
0
)
:
AsmJSProfilingOffsets
(
)
nonProfilingEntry
(
nonProfilingEntry
)
profilingJump
(
profilingJump
)
profilingEpilogue
(
profilingEpilogue
)
{
}
uint32_t
nonProfilingEntry
;
uint32_t
profilingJump
;
uint32_t
profilingEpilogue
;
}
;
void
GenerateAsmJSExitPrologue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
wasm
:
:
ExitReason
reason
AsmJSProfilingOffsets
*
offsets
jit
:
:
Label
*
maybeEntry
=
nullptr
)
;
void
GenerateAsmJSExitEpilogue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
wasm
:
:
ExitReason
reason
AsmJSProfilingOffsets
*
offsets
)
;
void
GenerateAsmJSFunctionPrologue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
AsmJSFunctionOffsets
*
offsets
)
;
void
GenerateAsmJSFunctionEpilogue
(
jit
:
:
MacroAssembler
&
masm
unsigned
framePushed
AsmJSFunctionOffsets
*
offsets
)
;
}
#
endif
