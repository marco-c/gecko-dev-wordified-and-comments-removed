#
include
"
asmjs
/
WasmBinary
.
h
"
#
include
"
asmjs
/
WasmTypes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
wasm
;
bool
wasm
:
:
EncodeLocalEntries
(
Encoder
&
e
const
ValTypeVector
&
locals
)
{
uint32_t
numLocalEntries
=
0
;
ValType
prev
=
ValType
:
:
Limit
;
for
(
ValType
t
:
locals
)
{
if
(
t
!
=
prev
)
{
numLocalEntries
+
+
;
prev
=
t
;
}
}
if
(
!
e
.
writeVarU32
(
numLocalEntries
)
)
return
false
;
if
(
numLocalEntries
)
{
prev
=
locals
[
0
]
;
uint32_t
count
=
1
;
for
(
uint32_t
i
=
1
;
i
<
locals
.
length
(
)
;
i
+
+
count
+
+
)
{
if
(
prev
!
=
locals
[
i
]
)
{
if
(
!
e
.
writeVarU32
(
count
)
)
return
false
;
if
(
!
e
.
writeValType
(
prev
)
)
return
false
;
prev
=
locals
[
i
]
;
count
=
0
;
}
}
if
(
!
e
.
writeVarU32
(
count
)
)
return
false
;
if
(
!
e
.
writeValType
(
prev
)
)
return
false
;
}
return
true
;
}
bool
wasm
:
:
DecodeLocalEntries
(
Decoder
&
d
ValTypeVector
*
locals
)
{
uint32_t
numLocalEntries
;
if
(
!
d
.
readVarU32
(
&
numLocalEntries
)
)
return
false
;
for
(
uint32_t
i
=
0
;
i
<
numLocalEntries
;
i
+
+
)
{
uint32_t
count
;
if
(
!
d
.
readVarU32
(
&
count
)
)
return
false
;
if
(
MaxLocals
-
locals
-
>
length
(
)
<
count
)
return
false
;
ValType
type
;
if
(
!
d
.
readValType
(
&
type
)
)
return
false
;
if
(
!
locals
-
>
appendN
(
type
count
)
)
return
false
;
}
return
true
;
}
