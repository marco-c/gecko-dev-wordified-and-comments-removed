#
ifndef
wasm_ion_compile_h
#
define
wasm_ion_compile_h
#
include
"
asmjs
/
WasmBinary
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
ModuleGeneratorThreadView
;
typedef
Vector
<
jit
:
:
MIRType
8
SystemAllocPolicy
>
MIRTypeVector
;
typedef
jit
:
:
ABIArgIter
<
MIRTypeVector
>
ABIArgMIRTypeIter
;
typedef
jit
:
:
ABIArgIter
<
ValTypeVector
>
ABIArgValTypeIter
;
class
FuncBytecode
{
const
DeclaredSig
&
sig_
;
uint32_t
lineOrBytecode_
;
Uint32Vector
callSiteLineNums_
;
uint32_t
index_
;
unsigned
generateTime_
;
UniqueBytecode
bytecode_
;
public
:
FuncBytecode
(
uint32_t
index
const
DeclaredSig
&
sig
UniqueBytecode
bytecode
uint32_t
lineOrBytecode
Uint32Vector
&
&
callSiteLineNums
unsigned
generateTime
)
:
sig_
(
sig
)
lineOrBytecode_
(
lineOrBytecode
)
callSiteLineNums_
(
Move
(
callSiteLineNums
)
)
index_
(
index
)
generateTime_
(
generateTime
)
bytecode_
(
Move
(
bytecode
)
)
{
}
UniqueBytecode
recycleBytecode
(
)
{
return
Move
(
bytecode_
)
;
}
uint32_t
lineOrBytecode
(
)
const
{
return
lineOrBytecode_
;
}
const
Uint32Vector
&
callSiteLineNums
(
)
const
{
return
callSiteLineNums_
;
}
uint32_t
index
(
)
const
{
return
index_
;
}
const
DeclaredSig
&
sig
(
)
const
{
return
sig_
;
}
const
Bytecode
&
bytecode
(
)
const
{
return
*
bytecode_
;
}
unsigned
generateTime
(
)
const
{
return
generateTime_
;
}
}
;
typedef
UniquePtr
<
FuncBytecode
>
UniqueFuncBytecode
;
class
FuncCompileResults
{
jit
:
:
TempAllocator
alloc_
;
jit
:
:
MacroAssembler
masm_
;
FuncOffsets
offsets_
;
unsigned
compileTime_
;
FuncCompileResults
(
const
FuncCompileResults
&
)
=
delete
;
FuncCompileResults
&
operator
=
(
const
FuncCompileResults
&
)
=
delete
;
public
:
explicit
FuncCompileResults
(
LifoAlloc
&
lifo
)
:
alloc_
(
&
lifo
)
masm_
(
jit
:
:
MacroAssembler
:
:
AsmJSToken
(
)
alloc_
)
compileTime_
(
0
)
{
}
jit
:
:
TempAllocator
&
alloc
(
)
{
return
alloc_
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
FuncOffsets
&
offsets
(
)
{
return
offsets_
;
}
void
setCompileTime
(
unsigned
t
)
{
MOZ_ASSERT
(
!
compileTime_
)
;
compileTime_
=
t
;
}
unsigned
compileTime
(
)
const
{
return
compileTime_
;
}
}
;
class
IonCompileTask
{
JSRuntime
*
const
runtime_
;
ModuleGeneratorThreadView
&
mg_
;
LifoAlloc
lifo_
;
UniqueFuncBytecode
func_
;
mozilla
:
:
Maybe
<
FuncCompileResults
>
results_
;
IonCompileTask
(
const
IonCompileTask
&
)
=
delete
;
IonCompileTask
&
operator
=
(
const
IonCompileTask
&
)
=
delete
;
public
:
IonCompileTask
(
JSRuntime
*
rt
ModuleGeneratorThreadView
&
mg
size_t
defaultChunkSize
)
:
runtime_
(
rt
)
mg_
(
mg
)
lifo_
(
defaultChunkSize
)
func_
(
nullptr
)
{
}
JSRuntime
*
runtime
(
)
const
{
return
runtime_
;
}
LifoAlloc
&
lifo
(
)
{
return
lifo_
;
}
ModuleGeneratorThreadView
&
mg
(
)
const
{
return
mg_
;
}
void
init
(
UniqueFuncBytecode
func
)
{
MOZ_ASSERT
(
!
func_
)
;
func_
=
mozilla
:
:
Move
(
func
)
;
results_
.
emplace
(
lifo_
)
;
}
const
FuncBytecode
&
func
(
)
const
{
MOZ_ASSERT
(
func_
)
;
return
*
func_
;
}
FuncCompileResults
&
results
(
)
{
return
*
results_
;
}
void
reset
(
UniqueBytecode
*
recycled
)
{
if
(
func_
)
*
recycled
=
func_
-
>
recycleBytecode
(
)
;
func_
.
reset
(
nullptr
)
;
results_
.
reset
(
)
;
lifo_
.
releaseAll
(
)
;
}
}
;
bool
IonCompileFunction
(
IonCompileTask
*
task
)
;
}
}
#
endif
