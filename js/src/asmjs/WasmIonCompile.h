#
ifndef
asmjs_wasm_ion_compile_h
#
define
asmjs_wasm_ion_compile_h
#
include
"
asmjs
/
AsmJSFrameIterator
.
h
"
#
include
"
asmjs
/
WasmCompileArgs
.
h
"
#
include
"
asmjs
/
WasmIR
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
FunctionCompileResults
{
jit
:
:
MacroAssembler
masm_
;
AsmJSFunctionOffsets
offsets_
;
unsigned
compileTime_
;
public
:
FunctionCompileResults
(
)
:
masm_
(
jit
:
:
MacroAssembler
:
:
AsmJSToken
(
)
)
compileTime_
(
0
)
{
}
const
jit
:
:
MacroAssembler
&
masm
(
)
const
{
return
masm_
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
AsmJSFunctionOffsets
&
offsets
(
)
{
return
offsets_
;
}
const
AsmJSFunctionOffsets
&
offsets
(
)
const
{
return
offsets_
;
}
void
setCompileTime
(
unsigned
t
)
{
MOZ_ASSERT
(
!
compileTime_
)
;
compileTime_
=
t
;
}
unsigned
compileTime
(
)
const
{
return
compileTime_
;
}
}
;
struct
CompileTask
{
LifoAlloc
lifo
;
wasm
:
:
CompileArgs
args
;
JSRuntime
*
runtime
;
const
wasm
:
:
FuncIR
*
func
;
mozilla
:
:
Maybe
<
FunctionCompileResults
>
results
;
CompileTask
(
size_t
defaultChunkSize
wasm
:
:
CompileArgs
args
)
:
lifo
(
defaultChunkSize
)
args
(
args
)
runtime
(
nullptr
)
func
(
nullptr
)
{
}
void
init
(
JSRuntime
*
rt
const
wasm
:
:
FuncIR
*
func
)
{
this
-
>
runtime
=
rt
;
this
-
>
func
=
func
;
results
.
emplace
(
)
;
}
}
;
bool
CompileFunction
(
LifoAlloc
&
lifo
CompileArgs
args
const
FuncIR
&
func
FunctionCompileResults
*
results
)
;
}
}
#
endif
