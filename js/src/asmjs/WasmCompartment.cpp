#
include
"
asmjs
/
WasmCompartment
.
h
"
#
include
"
jscompartment
.
h
"
#
include
"
asmjs
/
WasmInstance
.
h
"
#
include
"
vm
/
Debugger
-
inl
.
h
"
using
namespace
js
;
using
namespace
wasm
;
Compartment
:
:
Compartment
(
Zone
*
zone
)
:
instances_
(
zone
InstanceObjectSet
(
)
)
activationCount_
(
0
)
profilingEnabled_
(
false
)
{
}
Compartment
:
:
~
Compartment
(
)
{
MOZ_ASSERT
(
activationCount_
=
=
0
)
;
MOZ_ASSERT
(
!
instances_
.
initialized
(
)
|
|
instances_
.
empty
(
)
)
;
}
bool
Compartment
:
:
registerInstance
(
JSContext
*
cx
HandleWasmInstanceObject
instanceObj
)
{
if
(
!
instanceObj
-
>
instance
(
)
.
ensureProfilingState
(
cx
profilingEnabled_
)
)
return
false
;
if
(
!
instances_
.
initialized
(
)
&
&
!
instances_
.
init
(
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
instances_
.
putNew
(
instanceObj
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
Debugger
:
:
onNewWasmInstance
(
cx
instanceObj
)
;
return
true
;
}
bool
Compartment
:
:
ensureProfilingState
(
JSContext
*
cx
)
{
bool
newProfilingEnabled
=
cx
-
>
spsProfiler
.
enabled
(
)
;
if
(
profilingEnabled_
=
=
newProfilingEnabled
)
return
true
;
if
(
activationCount_
>
0
)
return
true
;
for
(
InstanceObjectSet
:
:
Range
r
=
instances_
.
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
if
(
!
r
.
front
(
)
-
>
instance
(
)
.
ensureProfilingState
(
cx
newProfilingEnabled
)
)
return
false
;
}
profilingEnabled_
=
newProfilingEnabled
;
return
true
;
}
void
Compartment
:
:
addSizeOfExcludingThis
(
MallocSizeOf
mallocSizeOf
size_t
*
compartmentTables
)
{
*
compartmentTables
+
=
instances_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
