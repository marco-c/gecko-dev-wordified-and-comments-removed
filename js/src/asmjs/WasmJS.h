#
ifndef
wasm_js_h
#
define
wasm_js_h
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
TypedArrayObject
;
class
WasmInstanceObject
;
namespace
wasm
{
class
Module
;
class
Instance
;
typedef
UniquePtr
<
Module
>
UniqueModule
;
typedef
UniquePtr
<
Instance
>
UniqueInstance
;
bool
HasCompilerSupport
(
ExclusiveContext
*
cx
)
;
MOZ_MUST_USE
bool
Eval
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
code
HandleObject
importObj
MutableHandle
<
WasmInstanceObject
*
>
instanceObj
)
;
}
extern
const
Class
WasmClass
;
JSObject
*
InitWasmClass
(
JSContext
*
cx
HandleObject
global
)
;
extern
const
Class
WebAssemblyClass
;
JSObject
*
InitWebAssemblyClass
(
JSContext
*
cx
HandleObject
global
)
;
class
WasmModuleObject
:
public
NativeObject
{
static
const
unsigned
MODULE_SLOT
=
0
;
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
WasmModuleObject
*
create
(
ExclusiveContext
*
cx
wasm
:
:
UniqueModule
module
HandleObject
proto
=
nullptr
)
;
wasm
:
:
Module
&
module
(
)
const
;
}
;
typedef
Rooted
<
WasmModuleObject
*
>
RootedWasmModuleObject
;
typedef
Handle
<
WasmModuleObject
*
>
HandleWasmModuleObject
;
typedef
MutableHandle
<
WasmModuleObject
*
>
MutableHandleWasmModuleObject
;
class
WasmInstanceObject
:
public
NativeObject
{
static
const
unsigned
INSTANCE_SLOT
=
0
;
static
const
unsigned
EXPORTS_SLOT
=
1
;
static
const
ClassOps
classOps_
;
bool
isNewborn
(
)
const
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
2
;
static
const
Class
class_
;
static
WasmInstanceObject
*
create
(
ExclusiveContext
*
cx
HandleObject
proto
=
nullptr
)
;
void
init
(
wasm
:
:
UniqueInstance
module
)
;
void
initExportsObject
(
HandleObject
exportObj
)
;
wasm
:
:
Instance
&
instance
(
)
const
;
JSObject
&
exportsObject
(
)
const
;
}
;
typedef
GCVector
<
WasmInstanceObject
*
>
WasmInstanceObjectVector
;
typedef
Rooted
<
WasmInstanceObject
*
>
RootedWasmInstanceObject
;
typedef
Handle
<
WasmInstanceObject
*
>
HandleWasmInstanceObject
;
typedef
MutableHandle
<
WasmInstanceObject
*
>
MutableHandleWasmInstanceObject
;
}
#
endif
