#
ifndef
wasm_js_h
#
define
wasm_js_h
#
include
"
gc
/
Policy
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
js
{
class
TypedArrayObject
;
class
WasmInstanceObject
;
namespace
wasm
{
class
Module
;
class
Instance
;
class
Table
;
typedef
UniquePtr
<
Instance
>
UniqueInstance
;
bool
HasCompilerSupport
(
ExclusiveContext
*
cx
)
;
bool
IsI64Implemented
(
)
;
MOZ_MUST_USE
bool
Eval
(
JSContext
*
cx
Handle
<
TypedArrayObject
*
>
code
HandleObject
importObj
MutableHandle
<
WasmInstanceObject
*
>
instanceObj
)
;
extern
const
char
InstanceExportField
[
]
;
extern
bool
IsExportedFunction
(
JSFunction
*
fun
)
;
extern
bool
IsExportedFunction
(
const
Value
&
v
MutableHandleFunction
f
)
;
extern
Instance
&
ExportedFunctionToInstance
(
JSFunction
*
fun
)
;
extern
WasmInstanceObject
*
ExportedFunctionToInstanceObject
(
JSFunction
*
fun
)
;
extern
uint32_t
ExportedFunctionToIndex
(
JSFunction
*
fun
)
;
}
extern
const
Class
WasmClass
;
JSObject
*
InitWasmClass
(
JSContext
*
cx
HandleObject
global
)
;
extern
const
Class
WebAssemblyClass
;
JSObject
*
InitWebAssemblyClass
(
JSContext
*
cx
HandleObject
global
)
;
class
WasmModuleObject
:
public
NativeObject
{
static
const
unsigned
MODULE_SLOT
=
0
;
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmModuleObject
*
create
(
ExclusiveContext
*
cx
wasm
:
:
Module
&
module
HandleObject
proto
=
nullptr
)
;
wasm
:
:
Module
&
module
(
)
const
;
}
;
typedef
Rooted
<
WasmModuleObject
*
>
RootedWasmModuleObject
;
typedef
Handle
<
WasmModuleObject
*
>
HandleWasmModuleObject
;
typedef
MutableHandle
<
WasmModuleObject
*
>
MutableHandleWasmModuleObject
;
class
WasmInstanceObject
:
public
NativeObject
{
static
const
unsigned
INSTANCE_SLOT
=
0
;
static
const
unsigned
EXPORTS_SLOT
=
1
;
static
const
ClassOps
classOps_
;
bool
isNewborn
(
)
const
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
using
ExportMap
=
GCHashMap
<
uint32_t
ReadBarrieredFunction
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
;
using
WeakExportMap
=
JS
:
:
WeakCache
<
ExportMap
>
;
WeakExportMap
&
exports
(
)
const
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
2
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmInstanceObject
*
create
(
JSContext
*
cx
HandleObject
proto
)
;
void
init
(
wasm
:
:
UniqueInstance
instance
)
;
wasm
:
:
Instance
&
instance
(
)
const
;
static
bool
getExportedFunction
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
instanceObj
uint32_t
funcIndex
MutableHandleFunction
fun
)
;
}
;
typedef
GCVector
<
WasmInstanceObject
*
>
WasmInstanceObjectVector
;
typedef
Rooted
<
WasmInstanceObject
*
>
RootedWasmInstanceObject
;
typedef
Handle
<
WasmInstanceObject
*
>
HandleWasmInstanceObject
;
typedef
MutableHandle
<
WasmInstanceObject
*
>
MutableHandleWasmInstanceObject
;
class
WasmMemoryObject
:
public
NativeObject
{
static
const
unsigned
BUFFER_SLOT
=
0
;
static
const
ClassOps
classOps_
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
1
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmMemoryObject
*
create
(
ExclusiveContext
*
cx
Handle
<
ArrayBufferObjectMaybeShared
*
>
buffer
HandleObject
proto
)
;
ArrayBufferObjectMaybeShared
&
buffer
(
)
const
;
}
;
typedef
GCPtr
<
WasmMemoryObject
*
>
GCPtrWasmMemoryObject
;
typedef
Rooted
<
WasmMemoryObject
*
>
RootedWasmMemoryObject
;
typedef
Handle
<
WasmMemoryObject
*
>
HandleWasmMemoryObject
;
typedef
MutableHandle
<
WasmMemoryObject
*
>
MutableHandleWasmMemoryObject
;
class
WasmTableObject
:
public
NativeObject
{
static
const
unsigned
TABLE_SLOT
=
0
;
static
const
unsigned
INSTANCE_VECTOR_SLOT
=
1
;
static
const
ClassOps
classOps_
;
static
void
finalize
(
FreeOp
*
fop
JSObject
*
obj
)
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
static
bool
lengthGetterImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
lengthGetter
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
getImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
get
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
setImpl
(
JSContext
*
cx
const
CallArgs
&
args
)
;
static
bool
set
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
using
InstanceVector
=
GCVector
<
HeapPtr
<
WasmInstanceObject
*
>
0
SystemAllocPolicy
>
;
InstanceVector
&
instanceVector
(
)
const
;
public
:
static
const
unsigned
RESERVED_SLOTS
=
2
;
static
const
Class
class_
;
static
const
JSPropertySpec
properties
[
]
;
static
const
JSFunctionSpec
methods
[
]
;
static
bool
construct
(
JSContext
*
unsigned
Value
*
)
;
static
WasmTableObject
*
create
(
JSContext
*
cx
wasm
:
:
Table
&
table
)
;
bool
initialized
(
)
const
;
bool
init
(
JSContext
*
cx
HandleWasmInstanceObject
instanceObj
)
;
wasm
:
:
Table
&
table
(
)
const
;
bool
setInstance
(
JSContext
*
cx
uint32_t
index
HandleWasmInstanceObject
instanceObj
)
;
}
;
typedef
Rooted
<
WasmTableObject
*
>
RootedWasmTableObject
;
typedef
Handle
<
WasmTableObject
*
>
HandleWasmTableObject
;
typedef
MutableHandle
<
WasmTableObject
*
>
MutableHandleWasmTableObject
;
}
#
endif
