#
ifndef
wasm_generator_h
#
define
wasm_generator_h
#
include
"
asmjs
/
WasmBinary
.
h
"
#
include
"
asmjs
/
WasmIonCompile
.
h
"
#
include
"
asmjs
/
WasmModule
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
FunctionGenerator
;
struct
SlowFunction
{
SlowFunction
(
uint32_t
index
unsigned
ms
unsigned
lineOrBytecode
)
:
index
(
index
)
ms
(
ms
)
lineOrBytecode
(
lineOrBytecode
)
{
}
static
const
unsigned
msThreshold
=
250
;
uint32_t
index
;
unsigned
ms
;
unsigned
lineOrBytecode
;
}
;
typedef
Vector
<
SlowFunction
>
SlowFunctionVector
;
struct
TableModuleGeneratorData
{
uint32_t
globalDataOffset
;
uint32_t
numElems
;
Uint32Vector
elemFuncIndices
;
TableModuleGeneratorData
(
)
:
globalDataOffset
(
0
)
numElems
(
0
)
{
}
TableModuleGeneratorData
(
TableModuleGeneratorData
&
&
rhs
)
:
globalDataOffset
(
rhs
.
globalDataOffset
)
numElems
(
rhs
.
numElems
)
elemFuncIndices
(
Move
(
rhs
.
elemFuncIndices
)
)
{
}
}
;
typedef
Vector
<
TableModuleGeneratorData
0
SystemAllocPolicy
>
TableModuleGeneratorDataVector
;
struct
ImportModuleGeneratorData
{
const
DeclaredSig
*
sig
;
uint32_t
globalDataOffset
;
ImportModuleGeneratorData
(
)
:
sig
(
nullptr
)
globalDataOffset
(
0
)
{
}
explicit
ImportModuleGeneratorData
(
const
DeclaredSig
*
sig
)
:
sig
(
sig
)
globalDataOffset
(
0
)
{
}
}
;
typedef
Vector
<
ImportModuleGeneratorData
0
SystemAllocPolicy
>
ImportModuleGeneratorDataVector
;
struct
AsmJSGlobalVariable
{
ExprType
type
;
unsigned
globalDataOffset
;
bool
isConst
;
AsmJSGlobalVariable
(
ExprType
type
unsigned
offset
bool
isConst
)
:
type
(
type
)
globalDataOffset
(
offset
)
isConst
(
isConst
)
{
}
}
;
typedef
Vector
<
AsmJSGlobalVariable
0
SystemAllocPolicy
>
AsmJSGlobalVariableVector
;
struct
ModuleGeneratorData
{
ModuleKind
kind
;
uint32_t
numTableElems
;
DeclaredSigVector
sigs
;
TableModuleGeneratorDataVector
sigToTable
;
DeclaredSigPtrVector
funcSigs
;
ImportModuleGeneratorDataVector
imports
;
AsmJSGlobalVariableVector
globals
;
uint32_t
funcSigIndex
(
uint32_t
funcIndex
)
const
{
return
funcSigs
[
funcIndex
]
-
sigs
.
begin
(
)
;
}
explicit
ModuleGeneratorData
(
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
:
kind
(
kind
)
numTableElems
(
0
)
{
}
}
;
typedef
UniquePtr
<
ModuleGeneratorData
>
UniqueModuleGeneratorData
;
class
ModuleGeneratorThreadView
{
const
ModuleGeneratorData
&
shared_
;
public
:
explicit
ModuleGeneratorThreadView
(
const
ModuleGeneratorData
&
shared
)
:
shared_
(
shared
)
{
}
bool
isAsmJS
(
)
const
{
return
shared_
.
kind
=
=
ModuleKind
:
:
AsmJS
;
}
uint32_t
numTableElems
(
)
const
{
MOZ_ASSERT
(
!
isAsmJS
(
)
)
;
return
shared_
.
numTableElems
;
}
const
DeclaredSig
&
sig
(
uint32_t
sigIndex
)
const
{
return
shared_
.
sigs
[
sigIndex
]
;
}
const
TableModuleGeneratorData
&
sigToTable
(
uint32_t
sigIndex
)
const
{
return
shared_
.
sigToTable
[
sigIndex
]
;
}
const
DeclaredSig
&
funcSig
(
uint32_t
funcIndex
)
const
{
MOZ_ASSERT
(
shared_
.
funcSigs
[
funcIndex
]
)
;
return
*
shared_
.
funcSigs
[
funcIndex
]
;
}
const
ImportModuleGeneratorData
&
import
(
uint32_t
importIndex
)
const
{
MOZ_ASSERT
(
shared_
.
imports
[
importIndex
]
.
sig
)
;
return
shared_
.
imports
[
importIndex
]
;
}
const
AsmJSGlobalVariable
&
globalVar
(
uint32_t
globalIndex
)
const
{
return
shared_
.
globals
[
globalIndex
]
;
}
}
;
class
MOZ_STACK_CLASS
ModuleGenerator
{
typedef
UniquePtr
<
ModuleGeneratorThreadView
>
UniqueModuleGeneratorThreadView
;
typedef
HashMap
<
uint32_t
uint32_t
>
FuncIndexMap
;
ExclusiveContext
*
cx_
;
jit
:
:
JitContext
jcx_
;
UniqueModuleData
module_
;
UniqueExportMap
exportMap_
;
SlowFunctionVector
slowFuncs_
;
UniqueModuleGeneratorData
shared_
;
uint32_t
numSigs_
;
LifoAlloc
lifo_
;
jit
:
:
TempAllocator
alloc_
;
jit
:
:
MacroAssembler
masm_
;
Uint32Vector
funcIndexToCodeRange_
;
FuncIndexMap
funcIndexToExport_
;
uint32_t
lastPatchedCallsite_
;
uint32_t
startOfUnpatchedBranches_
;
JumpSiteArray
jumpThunks_
;
bool
parallel_
;
uint32_t
outstanding_
;
UniqueModuleGeneratorThreadView
threadView_
;
Vector
<
IonCompileTask
>
tasks_
;
Vector
<
IonCompileTask
*
>
freeTasks_
;
DebugOnly
<
FunctionGenerator
*
>
activeFunc_
;
DebugOnly
<
bool
>
finishedFuncs_
;
bool
finishOutstandingTask
(
)
;
bool
funcIsDefined
(
uint32_t
funcIndex
)
const
;
uint32_t
funcEntry
(
uint32_t
funcIndex
)
const
;
bool
convertOutOfRangeBranchesToThunks
(
)
;
bool
finishTask
(
IonCompileTask
*
task
)
;
bool
finishCodegen
(
StaticLinkData
*
link
)
;
bool
finishStaticLinkData
(
uint8_t
*
code
uint32_t
codeBytes
StaticLinkData
*
link
)
;
bool
addImport
(
const
Sig
&
sig
uint32_t
globalDataOffset
)
;
bool
startedFuncDefs
(
)
const
{
return
!
!
threadView_
;
}
bool
allocateGlobalBytes
(
uint32_t
bytes
uint32_t
align
uint32_t
*
globalDataOffset
)
;
public
:
explicit
ModuleGenerator
(
ExclusiveContext
*
cx
)
;
~
ModuleGenerator
(
)
;
bool
init
(
UniqueModuleGeneratorData
shared
UniqueChars
filename
)
;
bool
isAsmJS
(
)
const
{
return
module_
-
>
kind
=
=
ModuleKind
:
:
AsmJS
;
}
CompileArgs
args
(
)
const
{
return
module_
-
>
compileArgs
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
void
initHeapUsage
(
HeapUsage
heapUsage
)
;
bool
usesHeap
(
)
const
;
uint32_t
numSigs
(
)
const
{
return
numSigs_
;
}
const
DeclaredSig
&
sig
(
uint32_t
sigIndex
)
const
;
uint32_t
numFuncSigs
(
)
const
{
return
module_
-
>
numFuncs
;
}
const
DeclaredSig
&
funcSig
(
uint32_t
funcIndex
)
const
;
uint32_t
numImports
(
)
const
;
const
ImportModuleGeneratorData
&
import
(
uint32_t
index
)
const
;
bool
declareExport
(
UniqueChars
fieldName
uint32_t
funcIndex
uint32_t
*
exportIndex
=
nullptr
)
;
uint32_t
numExports
(
)
const
;
bool
addMemoryExport
(
UniqueChars
fieldName
)
;
bool
startFuncDefs
(
)
;
bool
startFuncDef
(
uint32_t
lineOrBytecode
FunctionGenerator
*
fg
)
;
bool
finishFuncDef
(
uint32_t
funcIndex
unsigned
generateTime
FunctionGenerator
*
fg
)
;
bool
finishFuncDefs
(
)
;
static
const
uint32_t
BadIndirectCall
=
UINT32_MAX
;
void
initSig
(
uint32_t
sigIndex
Sig
&
&
sig
)
;
bool
initFuncSig
(
uint32_t
funcIndex
uint32_t
sigIndex
)
;
bool
initImport
(
uint32_t
importIndex
uint32_t
sigIndex
)
;
bool
initSigTableLength
(
uint32_t
sigIndex
uint32_t
numElems
)
;
void
initSigTableElems
(
uint32_t
sigIndex
Uint32Vector
&
&
elemFuncIndices
)
;
bool
allocateGlobalVar
(
ValType
type
bool
isConst
uint32_t
*
index
)
;
const
AsmJSGlobalVariable
&
globalVar
(
unsigned
index
)
const
{
return
shared_
-
>
globals
[
index
]
;
}
bool
finish
(
CacheableCharsVector
&
&
prettyFuncNames
UniqueModuleData
*
module
UniqueStaticLinkData
*
staticLinkData
UniqueExportMap
*
exportMap
SlowFunctionVector
*
slowFuncs
)
;
}
;
class
MOZ_STACK_CLASS
FunctionGenerator
{
friend
class
ModuleGenerator
;
ModuleGenerator
*
m_
;
IonCompileTask
*
task_
;
UniqueBytecode
bytecode_
;
Uint32Vector
callSiteLineNums_
;
ValTypeVector
locals_
;
uint32_t
lineOrBytecode_
;
public
:
FunctionGenerator
(
)
:
m_
(
nullptr
)
task_
(
nullptr
)
lineOrBytecode_
(
0
)
{
}
Bytecode
&
bytecode
(
)
const
{
return
*
bytecode_
;
}
bool
addCallSiteLineNum
(
uint32_t
lineno
)
{
return
callSiteLineNums_
.
append
(
lineno
)
;
}
bool
addLocal
(
ValType
v
)
{
return
locals_
.
append
(
v
)
;
}
const
ValTypeVector
&
locals
(
)
const
{
return
locals_
;
}
}
;
}
}
#
endif
