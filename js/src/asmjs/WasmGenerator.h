#
ifndef
wasm_generator_h
#
define
wasm_generator_h
#
include
"
asmjs
/
WasmBinary
.
h
"
#
include
"
asmjs
/
WasmCompile
.
h
"
#
include
"
asmjs
/
WasmModule
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
FunctionGenerator
;
struct
FuncImportGenDesc
{
const
SigWithId
*
sig
;
uint32_t
globalDataOffset
;
FuncImportGenDesc
(
)
:
sig
(
nullptr
)
globalDataOffset
(
0
)
{
}
explicit
FuncImportGenDesc
(
const
SigWithId
*
sig
)
:
sig
(
sig
)
globalDataOffset
(
0
)
{
}
}
;
typedef
Vector
<
FuncImportGenDesc
0
SystemAllocPolicy
>
FuncImportGenDescVector
;
struct
ModuleGeneratorData
{
ModuleKind
kind
;
MemoryUsage
memoryUsage
;
mozilla
:
:
Atomic
<
uint32_t
>
minMemoryLength
;
Maybe
<
uint32_t
>
maxMemoryLength
;
uint32_t
firstFuncDefIndex
;
SigWithIdVector
sigs
;
SigWithIdPtrVector
funcDefSigs
;
FuncImportGenDescVector
funcImports
;
GlobalDescVector
globals
;
TableDescVector
tables
;
Uint32Vector
asmJSSigToTableIndex
;
explicit
ModuleGeneratorData
(
ModuleKind
kind
=
ModuleKind
:
:
Wasm
)
:
kind
(
kind
)
memoryUsage
(
MemoryUsage
:
:
None
)
minMemoryLength
(
0
)
firstFuncDefIndex
(
0
)
{
}
bool
isAsmJS
(
)
const
{
return
kind
=
=
ModuleKind
:
:
AsmJS
;
}
}
;
typedef
UniquePtr
<
ModuleGeneratorData
>
UniqueModuleGeneratorData
;
class
MOZ_STACK_CLASS
ModuleGenerator
{
typedef
HashSet
<
uint32_t
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
Uint32Set
;
typedef
Vector
<
IonCompileTask
0
SystemAllocPolicy
>
IonCompileTaskVector
;
typedef
Vector
<
IonCompileTask
*
0
SystemAllocPolicy
>
IonCompileTaskPtrVector
;
typedef
EnumeratedArray
<
Trap
Trap
:
:
Limit
ProfilingOffsets
>
TrapExitOffsetArray
;
bool
alwaysBaseline_
;
Assumptions
assumptions_
;
LinkData
linkData_
;
MutableMetadata
metadata_
;
ExportVector
exports_
;
ImportVector
imports_
;
DataSegmentVector
dataSegments_
;
ElemSegmentVector
elemSegments_
;
UniqueModuleGeneratorData
shared_
;
uint32_t
numSigs_
;
uint32_t
numTables_
;
LifoAlloc
lifo_
;
jit
:
:
JitContext
jcx_
;
jit
:
:
TempAllocator
masmAlloc_
;
jit
:
:
MacroAssembler
masm_
;
Uint32Vector
funcDefIndexToCodeRange_
;
Uint32Set
exportedFuncDefs_
;
uint32_t
lastPatchedCallsite_
;
uint32_t
startOfUnpatchedCallsites_
;
bool
parallel_
;
uint32_t
outstanding_
;
IonCompileTaskVector
tasks_
;
IonCompileTaskPtrVector
freeTasks_
;
DebugOnly
<
FunctionGenerator
*
>
activeFuncDef_
;
DebugOnly
<
bool
>
startedFuncDefs_
;
DebugOnly
<
bool
>
finishedFuncDefs_
;
MOZ_MUST_USE
bool
finishOutstandingTask
(
)
;
bool
funcIndexIsDef
(
uint32_t
funcIndex
)
const
;
uint32_t
funcIndexToDef
(
uint32_t
funcIndex
)
const
;
bool
funcIsDefined
(
uint32_t
funcDefIndex
)
const
;
const
CodeRange
&
funcDefCodeRange
(
uint32_t
funcDefIndex
)
const
;
MOZ_MUST_USE
bool
patchCallSites
(
TrapExitOffsetArray
*
maybeTrapExits
=
nullptr
)
;
MOZ_MUST_USE
bool
finishTask
(
IonCompileTask
*
task
)
;
MOZ_MUST_USE
bool
finishFuncDefExports
(
)
;
MOZ_MUST_USE
bool
finishCodegen
(
)
;
MOZ_MUST_USE
bool
finishLinkData
(
Bytes
&
code
)
;
MOZ_MUST_USE
bool
addFuncImport
(
const
Sig
&
sig
uint32_t
globalDataOffset
)
;
MOZ_MUST_USE
bool
allocateGlobalBytes
(
uint32_t
bytes
uint32_t
align
uint32_t
*
globalDataOff
)
;
MOZ_MUST_USE
bool
allocateGlobal
(
GlobalDesc
*
global
)
;
public
:
explicit
ModuleGenerator
(
ImportVector
&
&
imports
)
;
~
ModuleGenerator
(
)
;
MOZ_MUST_USE
bool
init
(
UniqueModuleGeneratorData
shared
const
CompileArgs
&
args
Metadata
*
maybeAsmJSMetadata
=
nullptr
)
;
bool
isAsmJS
(
)
const
{
return
metadata_
-
>
kind
=
=
ModuleKind
:
:
AsmJS
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
bool
usesMemory
(
)
const
{
return
UsesMemory
(
shared_
-
>
memoryUsage
)
;
}
uint32_t
minMemoryLength
(
)
const
{
return
shared_
-
>
minMemoryLength
;
}
uint32_t
numTables
(
)
const
{
return
numTables_
;
}
const
TableDescVector
&
tables
(
)
const
{
return
shared_
-
>
tables
;
}
uint32_t
numSigs
(
)
const
{
return
numSigs_
;
}
const
SigWithId
&
sig
(
uint32_t
sigIndex
)
const
;
uint32_t
numFuncDefs
(
)
const
{
return
shared_
-
>
funcDefSigs
.
length
(
)
;
}
const
SigWithId
&
funcDefSig
(
uint32_t
funcDefIndex
)
const
;
const
GlobalDescVector
&
globals
(
)
const
{
return
shared_
-
>
globals
;
}
uint32_t
numFuncImports
(
)
const
;
const
FuncImportGenDesc
&
funcImport
(
uint32_t
funcImportIndex
)
const
;
uint32_t
numFuncs
(
)
const
;
const
SigWithId
&
funcSig
(
uint32_t
funcIndex
)
const
;
MOZ_MUST_USE
bool
addFuncDefExport
(
UniqueChars
fieldName
uint32_t
funcIndex
)
;
MOZ_MUST_USE
bool
addTableExport
(
UniqueChars
fieldName
)
;
MOZ_MUST_USE
bool
addMemoryExport
(
UniqueChars
fieldName
)
;
MOZ_MUST_USE
bool
addGlobalExport
(
UniqueChars
fieldName
uint32_t
globalIndex
)
;
MOZ_MUST_USE
bool
startFuncDefs
(
)
;
MOZ_MUST_USE
bool
startFuncDef
(
uint32_t
lineOrBytecode
FunctionGenerator
*
fg
)
;
MOZ_MUST_USE
bool
finishFuncDef
(
uint32_t
funcDefIndex
FunctionGenerator
*
fg
)
;
MOZ_MUST_USE
bool
finishFuncDefs
(
)
;
bool
setStartFunction
(
uint32_t
funcIndex
)
;
void
setDataSegments
(
DataSegmentVector
&
&
segments
)
;
MOZ_MUST_USE
bool
addElemSegment
(
InitExpr
offset
Uint32Vector
&
&
elemFuncIndices
)
;
void
setFuncNames
(
NameInBytecodeVector
&
&
funcNames
)
;
void
initSig
(
uint32_t
sigIndex
Sig
&
&
sig
)
;
void
initFuncDefSig
(
uint32_t
funcIndex
uint32_t
sigIndex
)
;
MOZ_MUST_USE
bool
initImport
(
uint32_t
importIndex
uint32_t
sigIndex
)
;
MOZ_MUST_USE
bool
initSigTableLength
(
uint32_t
sigIndex
uint32_t
length
)
;
MOZ_MUST_USE
bool
initSigTableElems
(
uint32_t
sigIndex
Uint32Vector
&
&
elemFuncDefIndices
)
;
void
initMemoryUsage
(
MemoryUsage
memoryUsage
)
;
void
bumpMinMemoryLength
(
uint32_t
newMinMemoryLength
)
;
MOZ_MUST_USE
bool
addGlobal
(
ValType
type
bool
isConst
uint32_t
*
index
)
;
SharedModule
finish
(
const
ShareableBytes
&
bytecode
)
;
}
;
class
MOZ_STACK_CLASS
FunctionGenerator
{
friend
class
ModuleGenerator
;
ModuleGenerator
*
m_
;
IonCompileTask
*
task_
;
bool
usesSimd_
;
bool
usesAtomics_
;
Bytes
bytes_
;
Uint32Vector
callSiteLineNums_
;
uint32_t
lineOrBytecode_
;
public
:
FunctionGenerator
(
)
:
m_
(
nullptr
)
task_
(
nullptr
)
usesSimd_
(
false
)
usesAtomics_
(
false
)
lineOrBytecode_
(
0
)
{
}
bool
usesSimd
(
)
const
{
return
usesSimd_
;
}
void
setUsesSimd
(
)
{
usesSimd_
=
true
;
}
bool
usesAtomics
(
)
const
{
return
usesAtomics_
;
}
void
setUsesAtomics
(
)
{
usesAtomics_
=
true
;
}
Bytes
&
bytes
(
)
{
return
bytes_
;
}
MOZ_MUST_USE
bool
addCallSiteLineNum
(
uint32_t
lineno
)
{
return
callSiteLineNums_
.
append
(
lineno
)
;
}
}
;
}
}
#
endif
