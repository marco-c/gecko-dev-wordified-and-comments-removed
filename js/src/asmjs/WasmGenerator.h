#
ifndef
wasm_generator_h
#
define
wasm_generator_h
#
include
"
asmjs
/
WasmBinary
.
h
"
#
include
"
asmjs
/
WasmIonCompile
.
h
"
#
include
"
asmjs
/
WasmModule
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
FunctionGenerator
;
typedef
Vector
<
uint32_t
0
SystemAllocPolicy
>
Uint32Vector
;
struct
SlowFunction
{
SlowFunction
(
PropertyName
*
name
unsigned
ms
unsigned
line
unsigned
column
)
:
name
(
name
)
ms
(
ms
)
line
(
line
)
column
(
column
)
{
}
static
const
unsigned
msThreshold
=
250
;
PropertyName
*
name
;
unsigned
ms
;
unsigned
line
;
unsigned
column
;
}
;
typedef
Vector
<
SlowFunction
>
SlowFunctionVector
;
struct
ModuleImportGeneratorData
{
DeclaredSig
*
sig
;
uint32_t
globalDataOffset
;
}
;
typedef
Vector
<
ModuleImportGeneratorData
0
SystemAllocPolicy
>
ModuleImportGeneratorDataVector
;
struct
ModuleGeneratorData
{
DeclaredSigVector
sigs
;
DeclaredSigPtrVector
funcSigs
;
ModuleImportGeneratorDataVector
imports
;
}
;
typedef
UniquePtr
<
ModuleGeneratorData
>
UniqueModuleGeneratorData
;
class
ModuleGeneratorThreadView
{
const
ModuleGeneratorData
&
shared_
;
public
:
explicit
ModuleGeneratorThreadView
(
const
ModuleGeneratorData
&
shared
)
:
shared_
(
shared
)
{
}
const
DeclaredSig
&
sig
(
uint32_t
sigIndex
)
const
{
return
shared_
.
sigs
[
sigIndex
]
;
}
const
DeclaredSig
&
funcSig
(
uint32_t
funcIndex
)
const
{
MOZ_ASSERT
(
shared_
.
funcSigs
[
funcIndex
]
)
;
return
*
shared_
.
funcSigs
[
funcIndex
]
;
}
const
ModuleImportGeneratorData
&
import
(
uint32_t
importIndex
)
const
{
MOZ_ASSERT
(
shared_
.
imports
[
importIndex
]
.
sig
)
;
return
shared_
.
imports
[
importIndex
]
;
}
}
;
class
MOZ_STACK_CLASS
ModuleGenerator
{
typedef
UniquePtr
<
ModuleGeneratorThreadView
>
UniqueModuleGeneratorThreadView
;
typedef
HashMap
<
uint32_t
uint32_t
>
FuncIndexMap
;
ExclusiveContext
*
cx_
;
jit
:
:
JitContext
jcx_
;
UniqueModuleData
module_
;
UniqueStaticLinkData
link_
;
SlowFunctionVector
slowFuncs_
;
UniqueModuleGeneratorData
shared_
;
LifoAlloc
lifo_
;
jit
:
:
TempAllocator
alloc_
;
jit
:
:
MacroAssembler
masm_
;
Uint32Vector
funcEntryOffsets_
;
Uint32Vector
exportFuncIndices_
;
FuncIndexMap
funcIndexToExport_
;
bool
parallel_
;
uint32_t
outstanding_
;
UniqueModuleGeneratorThreadView
threadView_
;
Vector
<
IonCompileTask
>
tasks_
;
Vector
<
IonCompileTask
*
>
freeTasks_
;
DebugOnly
<
FunctionGenerator
*
>
activeFunc_
;
DebugOnly
<
bool
>
finishedFuncs_
;
bool
finishOutstandingTask
(
)
;
bool
finishTask
(
IonCompileTask
*
task
)
;
public
:
explicit
ModuleGenerator
(
ExclusiveContext
*
cx
)
;
~
ModuleGenerator
(
)
;
bool
init
(
UniqueModuleGeneratorData
shared
)
;
CompileArgs
args
(
)
const
{
return
module_
-
>
compileArgs
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
const
Uint32Vector
&
funcEntryOffsets
(
)
const
{
return
funcEntryOffsets_
;
}
bool
allocateGlobalBytes
(
uint32_t
bytes
uint32_t
align
uint32_t
*
globalDataOffset
)
;
bool
allocateGlobalVar
(
ValType
type
uint32_t
*
globalDataOffset
)
;
void
initSig
(
uint32_t
sigIndex
Sig
&
&
sig
)
;
const
DeclaredSig
&
sig
(
uint32_t
sigIndex
)
const
;
bool
initImport
(
uint32_t
importIndex
uint32_t
sigIndex
uint32_t
globalDataOffset
)
;
uint32_t
numImports
(
)
const
;
const
ModuleImportGeneratorData
&
import
(
uint32_t
index
)
const
;
bool
defineImport
(
uint32_t
index
ProfilingOffsets
interpExit
ProfilingOffsets
jitExit
)
;
bool
declareExport
(
uint32_t
funcIndex
uint32_t
*
exportIndex
)
;
uint32_t
numExports
(
)
const
;
uint32_t
exportFuncIndex
(
uint32_t
index
)
const
;
const
Sig
&
exportSig
(
uint32_t
index
)
const
;
bool
defineExport
(
uint32_t
index
Offsets
offsets
)
;
bool
initFuncSig
(
uint32_t
funcIndex
uint32_t
sigIndex
)
;
const
DeclaredSig
&
funcSig
(
uint32_t
funcIndex
)
const
;
bool
startFunc
(
PropertyName
*
name
unsigned
line
unsigned
column
UniqueBytecode
*
recycled
FunctionGenerator
*
fg
)
;
bool
finishFunc
(
uint32_t
funcIndex
UniqueBytecode
bytecode
unsigned
generateTime
FunctionGenerator
*
fg
)
;
bool
finishFuncs
(
)
;
bool
declareFuncPtrTable
(
uint32_t
numElems
uint32_t
*
index
)
;
uint32_t
funcPtrTableGlobalDataOffset
(
uint32_t
index
)
const
;
void
defineFuncPtrTable
(
uint32_t
index
const
Vector
<
uint32_t
>
&
elemFuncIndices
)
;
bool
defineInlineStub
(
Offsets
offsets
)
;
bool
defineSyncInterruptStub
(
ProfilingOffsets
offsets
)
;
bool
defineAsyncInterruptStub
(
Offsets
offsets
)
;
bool
defineOutOfBoundsStub
(
Offsets
offsets
)
;
bool
finish
(
HeapUsage
heapUsage
MutedErrorsBool
mutedErrors
CacheableChars
filename
CacheableTwoByteChars
displayURL
UniqueModuleData
*
module
UniqueStaticLinkData
*
staticLinkData
SlowFunctionVector
*
slowFuncs
)
;
}
;
class
MOZ_STACK_CLASS
FunctionGenerator
{
friend
class
ModuleGenerator
;
ModuleGenerator
*
m_
;
IonCompileTask
*
task_
;
SourceCoordsVector
callSourceCoords_
;
ValTypeVector
localVars_
;
PropertyName
*
name_
;
unsigned
line_
;
unsigned
column_
;
public
:
FunctionGenerator
(
)
:
m_
(
nullptr
)
task_
(
nullptr
)
name_
(
nullptr
)
line_
(
0
)
column_
(
0
)
{
}
bool
addSourceCoords
(
size_t
byteOffset
uint32_t
line
uint32_t
column
)
{
SourceCoords
sc
=
{
byteOffset
line
column
}
;
return
callSourceCoords_
.
append
(
sc
)
;
}
bool
addVariable
(
ValType
v
)
{
return
localVars_
.
append
(
v
)
;
}
}
;
}
}
#
endif
