#
ifndef
wasm_generator_h
#
define
wasm_generator_h
#
include
"
asmjs
/
WasmIonCompile
.
h
"
#
include
"
asmjs
/
WasmIR
.
h
"
#
include
"
asmjs
/
WasmModule
.
h
"
#
include
"
jit
/
MacroAssembler
.
h
"
namespace
js
{
namespace
wasm
{
class
FunctionGenerator
;
struct
SlowFunction
{
SlowFunction
(
PropertyName
*
name
unsigned
ms
unsigned
line
unsigned
column
)
:
name
(
name
)
ms
(
ms
)
line
(
line
)
column
(
column
)
{
}
static
const
unsigned
msThreshold
=
250
;
PropertyName
*
name
;
unsigned
ms
;
unsigned
line
;
unsigned
column
;
}
;
typedef
Vector
<
SlowFunction
>
SlowFunctionVector
;
class
MOZ_STACK_CLASS
ModuleGenerator
{
typedef
Vector
<
uint32_t
>
FuncOffsetVector
;
struct
SigHashPolicy
{
typedef
const
MallocSig
&
Lookup
;
static
HashNumber
hash
(
Lookup
l
)
{
return
l
.
hash
(
)
;
}
static
bool
match
(
const
LifoSig
*
lhs
Lookup
rhs
)
{
return
*
lhs
=
=
rhs
;
}
}
;
typedef
HashSet
<
const
LifoSig
*
SigHashPolicy
>
SigSet
;
ExclusiveContext
*
cx_
;
CompileArgs
args_
;
uint32_t
globalBytes_
;
ImportVector
imports_
;
ExportVector
exports_
;
CodeRangeVector
codeRanges_
;
CacheableCharsVector
funcNames_
;
UniqueStaticLinkData
staticLinkData_
;
SlowFunctionVector
slowFuncs_
;
LifoAlloc
lifo_
;
jit
:
:
JitContext
jcx_
;
jit
:
:
TempAllocator
alloc_
;
jit
:
:
MacroAssembler
masm_
;
SigSet
sigs_
;
bool
parallel_
;
uint32_t
outstanding_
;
Vector
<
IonCompileTask
>
tasks_
;
Vector
<
IonCompileTask
*
>
freeTasks_
;
uint32_t
funcBytes_
;
FuncOffsetVector
funcEntryOffsets_
;
DebugOnly
<
FunctionGenerator
*
>
activeFunc_
;
DebugOnly
<
bool
>
finishedFuncs_
;
bool
allocateGlobalBytes
(
uint32_t
bytes
uint32_t
align
uint32_t
*
globalDataOffset
)
;
bool
finishOutstandingTask
(
)
;
bool
finishTask
(
IonCompileTask
*
task
)
;
public
:
explicit
ModuleGenerator
(
ExclusiveContext
*
cx
)
;
~
ModuleGenerator
(
)
;
bool
init
(
)
;
CompileArgs
args
(
)
const
{
return
args_
;
}
jit
:
:
MacroAssembler
&
masm
(
)
{
return
masm_
;
}
const
FuncOffsetVector
&
funcEntryOffsets
(
)
const
{
return
funcEntryOffsets_
;
}
const
LifoSig
*
newLifoSig
(
const
MallocSig
&
sig
)
;
bool
allocateGlobalVar
(
ValType
type
uint32_t
*
globalDataOffset
)
;
bool
declareImport
(
MallocSig
&
&
sig
uint32_t
*
index
)
;
uint32_t
numDeclaredImports
(
)
const
;
uint32_t
importExitGlobalDataOffset
(
uint32_t
index
)
const
;
const
MallocSig
&
importSig
(
uint32_t
index
)
const
;
bool
defineImport
(
uint32_t
index
ProfilingOffsets
interpExit
ProfilingOffsets
jitExit
)
;
bool
declareExport
(
MallocSig
&
&
sig
uint32_t
funcIndex
uint32_t
*
index
)
;
uint32_t
numDeclaredExports
(
)
const
;
uint32_t
exportFuncIndex
(
uint32_t
index
)
const
;
const
MallocSig
&
exportSig
(
uint32_t
index
)
const
;
bool
defineExport
(
uint32_t
index
Offsets
offsets
)
;
bool
startFunc
(
PropertyName
*
name
unsigned
line
unsigned
column
FunctionGenerator
*
fg
)
;
bool
finishFunc
(
uint32_t
funcIndex
const
LifoSig
&
sig
unsigned
generateTime
FunctionGenerator
*
fg
)
;
bool
finishFuncs
(
)
;
bool
declareFuncPtrTable
(
uint32_t
numElems
uint32_t
*
index
)
;
uint32_t
funcPtrTableGlobalDataOffset
(
uint32_t
index
)
const
;
void
defineFuncPtrTable
(
uint32_t
index
const
Vector
<
uint32_t
>
&
elemFuncIndices
)
;
bool
defineInlineStub
(
Offsets
offsets
)
;
bool
defineSyncInterruptStub
(
ProfilingOffsets
offsets
)
;
bool
defineAsyncInterruptStub
(
Offsets
offsets
)
;
bool
defineOutOfBoundsStub
(
Offsets
offsets
)
;
Module
*
finish
(
Module
:
:
HeapBool
usesHeap
Module
:
:
SharedBool
sharedHeap
Module
:
:
MutedBool
mutedErrors
CacheableChars
filename
CacheableTwoByteChars
displayURL
UniqueStaticLinkData
*
staticLinkData
SlowFunctionVector
*
slowFuncs
)
;
}
;
class
MOZ_STACK_CLASS
FunctionGenerator
{
friend
class
ModuleGenerator
;
ModuleGenerator
*
m_
;
IonCompileTask
*
task_
;
FuncIR
*
func_
;
public
:
FunctionGenerator
(
)
:
m_
(
nullptr
)
task_
(
nullptr
)
func_
(
nullptr
)
{
}
FuncIR
&
func
(
)
const
{
MOZ_ASSERT
(
func_
)
;
return
*
func_
;
}
}
;
}
}
#
endif
