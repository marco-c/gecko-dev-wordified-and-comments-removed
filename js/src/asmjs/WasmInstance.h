#
ifndef
wasm_instance_h
#
define
wasm_instance_h
#
include
"
asmjs
/
WasmCode
.
h
"
#
include
"
gc
/
Barrier
.
h
"
namespace
js
{
class
WasmActivation
;
class
WasmInstanceObject
;
namespace
wasm
{
struct
ExportMap
;
struct
TypedFuncTable
{
uint32_t
globalDataOffset
;
uint32_t
numElems
;
TypedFuncTable
(
uint32_t
globalDataOffset
uint32_t
numElems
)
:
globalDataOffset
(
globalDataOffset
)
numElems
(
numElems
)
{
}
}
;
typedef
Vector
<
TypedFuncTable
0
SystemAllocPolicy
>
TypedFuncTableVector
;
class
Instance
{
const
UniqueCodeSegment
codeSegment_
;
const
SharedMetadata
metadata_
;
const
SharedBytes
maybeBytecode_
;
const
TypedFuncTableVector
typedFuncTables_
;
GCPtrWasmMemoryObject
memory_
;
bool
profilingEnabled_
;
CacheableCharsVector
funcLabels_
;
uint8_t
*
*
addressOfMemoryBase
(
)
const
;
FuncImportExit
&
funcImportToExit
(
const
FuncImport
&
fi
)
;
MOZ_MUST_USE
bool
toggleProfiling
(
JSContext
*
cx
)
;
friend
class
js
:
:
WasmActivation
;
WasmActivation
*
&
activation
(
)
;
friend
void
*
AddressOf
(
SymbolicAddress
ExclusiveContext
*
)
;
bool
callImport
(
JSContext
*
cx
uint32_t
funcImportIndex
unsigned
argc
const
uint64_t
*
argv
MutableHandleValue
rval
)
;
static
int32_t
callImport_void
(
int32_t
importIndex
int32_t
argc
uint64_t
*
argv
)
;
static
int32_t
callImport_i32
(
int32_t
importIndex
int32_t
argc
uint64_t
*
argv
)
;
static
int32_t
callImport_i64
(
int32_t
importIndex
int32_t
argc
uint64_t
*
argv
)
;
static
int32_t
callImport_f64
(
int32_t
importIndex
int32_t
argc
uint64_t
*
argv
)
;
template
<
class
T
>
friend
struct
js
:
:
MallocProvider
;
Instance
(
UniqueCodeSegment
codeSegment
const
Metadata
&
metadata
const
ShareableBytes
*
maybeBytecode
TypedFuncTableVector
&
&
typedFuncTables
HandleWasmMemoryObject
memory
)
;
public
:
static
bool
create
(
JSContext
*
cx
UniqueCodeSegment
codeSegment
const
Metadata
&
metadata
const
ShareableBytes
*
maybeBytecode
TypedFuncTableVector
&
&
typedFuncTables
HandleWasmMemoryObject
memoryObject
Handle
<
FunctionVector
>
funcImports
const
ExportMap
&
exports
HandleWasmInstanceObject
instanceObj
)
;
~
Instance
(
)
;
void
trace
(
JSTracer
*
trc
)
;
const
CodeSegment
&
codeSegment
(
)
const
{
return
*
codeSegment_
;
}
const
Metadata
&
metadata
(
)
const
{
return
*
metadata_
;
}
SharedMem
<
uint8_t
*
>
memoryBase
(
)
const
;
size_t
memoryLength
(
)
const
;
MOZ_MUST_USE
bool
callExport
(
JSContext
*
cx
uint32_t
exportIndex
CallArgs
args
)
;
bool
profilingEnabled
(
)
const
{
return
profilingEnabled_
;
}
const
char
*
profilingLabel
(
uint32_t
funcIndex
)
const
{
return
funcLabels_
[
funcIndex
]
.
get
(
)
;
}
JSString
*
createText
(
JSContext
*
cx
)
;
bool
getFuncName
(
JSContext
*
cx
uint32_t
funcIndex
TwoByteName
*
name
)
const
;
JSAtom
*
getFuncAtom
(
JSContext
*
cx
uint32_t
funcIndex
)
const
;
void
deoptimizeImportExit
(
uint32_t
funcImportIndex
)
;
const
CallSite
*
lookupCallSite
(
void
*
returnAddress
)
const
;
const
CodeRange
*
lookupCodeRange
(
void
*
pc
)
const
;
#
ifdef
ASMJS_MAY_USE_SIGNAL_HANDLERS
const
MemoryAccess
*
lookupMemoryAccess
(
void
*
pc
)
const
;
#
endif
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
size_t
*
code
size_t
*
data
)
const
;
}
;
typedef
UniquePtr
<
Instance
>
UniqueInstance
;
extern
bool
IsExportedFunction
(
JSFunction
*
fun
)
;
extern
Instance
&
ExportedFunctionToInstance
(
JSFunction
*
fun
)
;
extern
uint32_t
ExportedFunctionToExportIndex
(
JSFunction
*
fun
)
;
}
}
#
endif
