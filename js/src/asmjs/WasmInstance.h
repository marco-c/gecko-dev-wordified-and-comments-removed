#
ifndef
wasm_instance_h
#
define
wasm_instance_h
#
include
"
asmjs
/
WasmCode
.
h
"
#
include
"
asmjs
/
WasmTable
.
h
"
#
include
"
gc
/
Barrier
.
h
"
namespace
js
{
class
WasmActivation
;
class
WasmInstanceObject
;
namespace
wasm
{
class
Instance
{
JSCompartment
*
const
compartment_
;
const
UniqueCode
code_
;
GCPtrWasmMemoryObject
memory_
;
SharedTableVector
tables_
;
TlsData
tlsData_
;
JSContext
*
*
addressOfContextPtr
(
)
const
;
Instance
*
*
addressOfInstancePtr
(
)
const
;
uint8_t
*
*
addressOfMemoryBase
(
)
const
;
void
*
*
addressOfTableBase
(
size_t
tableIndex
)
const
;
const
void
*
*
addressOfSigId
(
const
SigIdDesc
&
sigId
)
const
;
FuncImportExit
&
funcImportToExit
(
const
FuncImport
&
fi
)
;
TlsData
*
tlsData
(
)
{
return
&
tlsData_
;
}
friend
void
*
AddressOf
(
SymbolicAddress
ExclusiveContext
*
)
;
static
int32_t
callImport_void
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_i32
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_i64
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
static
int32_t
callImport_f64
(
Instance
*
int32_t
int32_t
uint64_t
*
)
;
bool
callImport
(
JSContext
*
cx
uint32_t
funcImportIndex
unsigned
argc
const
uint64_t
*
argv
MutableHandleValue
rval
)
;
public
:
Instance
(
JSContext
*
cx
UniqueCode
code
HandleWasmMemoryObject
memory
SharedTableVector
&
&
tables
Handle
<
FunctionVector
>
funcImports
const
ValVector
&
globalImports
)
;
~
Instance
(
)
;
bool
init
(
JSContext
*
cx
)
;
void
trace
(
JSTracer
*
trc
)
;
JSContext
*
cx
(
)
const
{
return
*
addressOfContextPtr
(
)
;
}
JSCompartment
*
compartment
(
)
const
{
return
compartment_
;
}
Code
&
code
(
)
{
return
*
code_
;
}
const
Code
&
code
(
)
const
{
return
*
code_
;
}
const
CodeSegment
&
codeSegment
(
)
const
{
return
code_
-
>
segment
(
)
;
}
uint8_t
*
codeBase
(
)
const
{
return
code_
-
>
segment
(
)
.
base
(
)
;
}
const
Metadata
&
metadata
(
)
const
{
return
code_
-
>
metadata
(
)
;
}
const
SharedTableVector
&
tables
(
)
const
{
return
tables_
;
}
SharedMem
<
uint8_t
*
>
memoryBase
(
)
const
;
size_t
memoryLength
(
)
const
;
MOZ_MUST_USE
bool
callExport
(
JSContext
*
cx
uint32_t
funcIndex
CallArgs
args
)
;
void
deoptimizeImportExit
(
uint32_t
funcImportIndex
)
;
MOZ_MUST_USE
bool
ensureProfilingState
(
JSContext
*
cx
bool
enabled
)
;
void
addSizeOfMisc
(
MallocSizeOf
mallocSizeOf
Metadata
:
:
SeenSet
*
seenMetadata
ShareableBytes
:
:
SeenSet
*
seenBytes
Table
:
:
SeenSet
*
seenTables
size_t
*
code
size_t
*
data
)
const
;
}
;
typedef
UniquePtr
<
Instance
>
UniqueInstance
;
}
}
#
endif
