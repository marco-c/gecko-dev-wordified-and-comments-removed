#
ifndef
wasm_binary_to_experimental_text_h
#
define
wasm_binary_to_experimental_text_h
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
Class
.
h
"
namespace
js
{
class
StringBuffer
;
namespace
wasm
{
struct
ExperimentalTextFormatting
{
bool
allowAsciiOperators
:
1
;
bool
reduceParens
:
1
;
bool
groupBlocks
:
1
;
ExperimentalTextFormatting
(
)
:
allowAsciiOperators
(
true
)
reduceParens
(
true
)
groupBlocks
(
true
)
{
}
}
;
struct
ExprLoc
{
uint32_t
lineno
;
uint32_t
column
;
uint32_t
offset
;
ExprLoc
(
)
:
lineno
(
0
)
column
(
0
)
offset
(
0
)
{
}
ExprLoc
(
uint32_t
lineno_
uint32_t
column_
uint32_t
offset_
)
:
lineno
(
lineno_
)
column
(
column_
)
offset
(
offset_
)
{
}
}
;
typedef
mozilla
:
:
Vector
<
ExprLoc
0
TempAllocPolicy
>
ExprLocVector
;
struct
FunctionLoc
{
size_t
startExprsIndex
;
size_t
endExprsIndex
;
uint32_t
startLineno
;
uint32_t
endLineno
;
FunctionLoc
(
size_t
startExprsIndex_
size_t
endExprsIndex_
uint32_t
startLineno_
uint32_t
endLineno_
)
:
startExprsIndex
(
startExprsIndex_
)
endExprsIndex
(
endExprsIndex_
)
startLineno
(
startLineno_
)
endLineno
(
endLineno_
)
{
}
}
;
typedef
mozilla
:
:
Vector
<
FunctionLoc
0
TempAllocPolicy
>
FunctionLocVector
;
class
GeneratedSourceMap
{
ExprLocVector
exprlocs_
;
FunctionLocVector
functionlocs_
;
uint32_t
totalLines_
;
public
:
explicit
GeneratedSourceMap
(
JSContext
*
cx
)
:
exprlocs_
(
cx
)
functionlocs_
(
cx
)
totalLines_
(
0
)
{
}
ExprLocVector
&
exprlocs
(
)
{
return
exprlocs_
;
}
FunctionLocVector
&
functionlocs
(
)
{
return
functionlocs_
;
}
uint32_t
totalLines
(
)
{
return
totalLines_
;
}
void
setTotalLines
(
uint32_t
val
)
{
totalLines_
=
val
;
}
}
;
MOZ_MUST_USE
bool
BinaryToExperimentalText
(
JSContext
*
cx
const
uint8_t
*
bytes
size_t
length
StringBuffer
&
buffer
const
ExperimentalTextFormatting
&
formatting
=
ExperimentalTextFormatting
(
)
GeneratedSourceMap
*
sourceMap
=
nullptr
)
;
}
}
#
endif
