#
include
"
frontend
/
AsyncEmitter
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
NameOpEmitter
.
h
"
#
include
"
vm
/
AsyncFunctionResolveKind
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
bool
AsyncEmitter
:
:
prepareForParamsWithExpression
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Parameters
;
#
endif
rejectTryCatch_
.
emplace
(
bce_
TryEmitter
:
:
Kind
:
:
TryCatch
TryEmitter
:
:
ControlKind
:
:
NonSyntactic
)
;
return
rejectTryCatch_
-
>
emitTry
(
)
;
}
bool
AsyncEmitter
:
:
prepareForParamsWithoutExpression
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Parameters
;
#
endif
return
true
;
}
bool
AsyncEmitter
:
:
emitParamsEpilogue
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Parameters
)
;
if
(
rejectTryCatch_
)
{
if
(
!
emitRejectCatch
(
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
PostParams
;
#
endif
return
true
;
}
bool
AsyncEmitter
:
:
prepareForModule
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
MOZ_ASSERT
(
bce_
-
>
lookupName
(
bce_
-
>
cx
-
>
parserNames
(
)
.
dotGenerator
)
.
hasKnownSlot
(
)
)
;
NameOpEmitter
noe
(
bce_
bce_
-
>
cx
-
>
parserNames
(
)
.
dotGenerator
NameOpEmitter
:
:
Kind
:
:
Initialize
)
;
if
(
!
noe
.
prepareForRhs
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Generator
)
)
{
return
false
;
}
if
(
!
noe
.
emitAssignment
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
ModulePrologue
;
#
endif
return
true
;
}
bool
AsyncEmitter
:
:
prepareForBody
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
PostParams
|
|
state_
=
=
State
:
:
ModulePrologue
)
;
rejectTryCatch_
.
emplace
(
bce_
TryEmitter
:
:
Kind
:
:
TryCatch
TryEmitter
:
:
ControlKind
:
:
NonSyntactic
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Body
;
#
endif
return
rejectTryCatch_
-
>
emitTry
(
)
;
}
bool
AsyncEmitter
:
:
emitEnd
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
state_
=
=
State
:
:
Body
)
;
#
endif
if
(
!
emitFinalYield
(
)
)
{
return
false
;
}
if
(
!
emitRejectCatch
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
bool
AsyncEmitter
:
:
emitFinalYield
(
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Undefined
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitGetDotGeneratorInInnermostScope
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
AsyncResolve
uint8_t
(
AsyncFunctionResolveKind
:
:
Fulfill
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
SetRval
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitGetDotGeneratorInInnermostScope
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitYieldOp
(
JSOp
:
:
FinalYieldRval
)
)
{
return
false
;
}
return
true
;
}
bool
AsyncEmitter
:
:
emitRejectCatch
(
)
{
if
(
!
rejectTryCatch_
-
>
emitCatch
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitGetDotGeneratorInInnermostScope
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
AsyncResolve
uint8_t
(
AsyncFunctionResolveKind
:
:
Reject
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
SetRval
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitGetDotGeneratorInInnermostScope
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitYieldOp
(
JSOp
:
:
FinalYieldRval
)
)
{
return
false
;
}
if
(
!
rejectTryCatch_
-
>
emitEnd
(
)
)
{
return
false
;
}
rejectTryCatch_
.
reset
(
)
;
return
true
;
}
