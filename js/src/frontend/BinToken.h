#
ifndef
frontend_BinToken_h
#
define
frontend_BinToken_h
namespace
js
{
namespace
frontend
{
#
define
FOR_EACH_BIN_KIND
(
F
)
\
F
(
ArrayExpression
ArrayExpression
)
\
F
(
AssignmentExpression
AssignmentExpression
)
\
F
(
AssignmentOperator
AssignmentOperator
)
\
F
(
BinaryExpression
BinaryExpression
)
\
F
(
BinaryOperator
BinaryOperator
)
\
F
(
BINJS_Scope
BINJS
:
Scope
)
\
F
(
BlockStatement
BlockStatement
)
\
F
(
BooleanLiteral
BooleanLiteral
)
\
F
(
BracketExpression
BracketExpression
)
\
F
(
BreakStatement
BreakStatement
)
\
F
(
CallExpression
CallExpression
)
\
F
(
CatchClause
CatchClause
)
\
F
(
ComputedPropertyName
ComputedPropertyName
)
\
F
(
ConditionalExpression
ConditionalExpression
)
\
F
(
ContinueStatement
ContinueStatement
)
\
F
(
DebuggerStatement
DebuggerStatement
)
\
F
(
Declaration
Declaration
)
\
F
(
Directive
Directive
)
\
F
(
DirectiveLiteral
DirectiveLiteral
)
\
F
(
DotExpression
DotExpression
)
\
F
(
DoWhileStatement
DoWhileStatement
)
\
F
(
Elision
Elision
)
\
F
(
EmptyStatement
EmptyStatement
)
\
F
(
Expression
Expression
)
\
F
(
ExpressionStatement
ExpressionStatement
)
\
F
(
ForStatement
ForStatement
)
\
F
(
ForInStatement
ForInStatement
)
\
F
(
FunctionExpression
FunctionExpression
)
\
F
(
FunctionDeclaration
FunctionDeclaration
)
\
F
(
Identifier
Identifier
)
\
F
(
IfStatement
IfStatement
)
\
F
(
LabeledStatement
LabeledStatement
)
\
F
(
Literal
Literal
)
\
F
(
LogicalExpression
LogicalExpression
)
\
F
(
LogicalOperator
LogicalOperator
)
\
F
(
NewExpression
NewExpression
)
\
F
(
NullLiteral
NullLiteral
)
\
F
(
NumericLiteral
NumericLiteral
)
\
F
(
ObjectExpression
ObjectExpression
)
\
F
(
ObjectGetter
ObjectGetter
)
\
F
(
ObjectMethod
ObjectMethod
)
\
F
(
ObjectSetter
ObjectSetter
)
\
F
(
ObjectProperty
ObjectProperty
)
\
F
(
Pattern
Pattern
)
\
F
(
Program
Program
)
\
F
(
PropertyKind
PropertyKind
)
\
F
(
RegExpLiteral
RegExpLiteral
)
\
F
(
ReturnStatement
ReturnStatement
)
\
F
(
SequenceExpression
SequenceExpression
)
\
F
(
StringLiteral
StringLiteral
)
\
F
(
Statement
Statement
)
\
F
(
SwitchCase
SwitchCase
)
\
F
(
SwitchStatement
SwitchStatement
)
\
F
(
ThisExpression
ThisExpression
)
\
F
(
ThrowStatement
ThrowStatement
)
\
F
(
TryStatement
TryStatement
)
\
F
(
UnaryExpression
UnaryExpression
)
\
F
(
UnaryOperator
UnaryOperator
)
\
F
(
UpdateExpression
UpdateExpression
)
\
F
(
UpdateOperator
UpdateOperator
)
\
F
(
VariableDeclaration
VariableDeclaration
)
\
F
(
VariableDeclarator
VariableDeclarator
)
\
F
(
VariableKind
VariableKind
)
\
F
(
WhileStatement
WhileStatement
)
\
F
(
WithStatement
WithStatement
)
enum
class
BinKind
{
#
define
EMIT_ENUM
(
name
_
)
name
FOR_EACH_BIN_KIND
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
BINKIND_LIMIT
}
;
const
char
*
describeBinKind
(
const
BinKind
&
kind
)
;
#
define
FOR_EACH_BIN_FIELD
(
F
)
\
F
(
Alternate
alternate
)
\
F
(
Argument
argument
)
\
F
(
Arguments
arguments
)
\
F
(
BINJS_CapturedNames
BINJS
:
CapturedNames
)
\
F
(
BINJS_ConstDeclaredNames
BINJS
:
ConstDeclaredNames
)
\
F
(
BINJS_HasDirectEval
BINJS
:
HasDirectEval
)
\
F
(
BINJS_LetDeclaredNames
BINJS
:
LetDeclaredNames
)
\
F
(
BINJS_VarDeclaredNames
BINJS
:
VarDeclaredNames
)
\
F
(
BINJS_Scope
BINJS
:
Scope
)
\
F
(
Block
block
)
\
F
(
Callee
callee
)
\
F
(
Cases
cases
)
\
F
(
Consequent
consequent
)
\
F
(
Body
body
)
\
F
(
Declarations
declarations
)
\
F
(
Directives
directives
)
\
F
(
Discriminant
discriminant
)
\
F
(
Elements
elements
)
\
F
(
Expression
expression
)
\
F
(
Expressions
expressions
)
\
F
(
Finalizer
finalizer
)
\
F
(
Flags
flags
)
\
F
(
Handler
handler
)
\
F
(
Id
id
)
\
F
(
Init
init
)
\
F
(
Key
key
)
\
F
(
Kind
kind
)
\
F
(
Label
label
)
\
F
(
Left
left
)
\
F
(
Name
name
)
\
F
(
Object
object
)
\
F
(
Operator
operator
)
\
F
(
Param
param
)
\
F
(
Params
params
)
\
F
(
Pattern
pattern
)
\
F
(
Prefix
prefix
)
\
F
(
Properties
properties
)
\
F
(
Property
property
)
\
F
(
Right
right
)
\
F
(
Test
test
)
\
F
(
Update
update
)
\
F
(
Value
value
)
enum
class
BinField
{
#
define
EMIT_ENUM
(
name
_
)
name
FOR_EACH_BIN_FIELD
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
BINFIELD_LIMIT
}
;
const
char
*
describeBinField
(
const
BinField
&
kind
)
;
}
}
#
endif
