#
include
"
frontend
/
BinASTTokenReaderContext
.
h
"
#
include
"
mozilla
/
IntegerTypeTraits
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
<
string
.
h
>
#
include
"
ds
/
Sort
.
h
"
#
include
"
frontend
/
BinAST
-
macros
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
util
/
StringBuffer
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
#
include
"
vm
/
JSScript
.
h
"
namespace
js
{
namespace
frontend
{
#
ifdef
BINAST_CX_MAGIC_HEADER
const
char
CX_MAGIC_HEADER
[
]
=
"
\
x89
"
"
BJS
\
r
\
n
\
0
\
n
"
;
const
uint32_t
MAGIC_FORMAT_VERSION
=
2
;
#
endif
const
uint8_t
MAX_CODE_BIT_LENGTH
=
20
;
const
uint8_t
MAX_BIT_LENGTH_BIT_LENGTH
=
5
;
static_assert
(
1
<
<
(
MAX_BIT_LENGTH_BIT_LENGTH
-
1
)
<
MAX_CODE_BIT_LENGTH
"
MAX_BIT_LENGTH_BIT_LENGTH
-
1
bits
MUST
be
insufficient
to
"
"
store
MAX_CODE_BIT_LENGTH
"
)
;
static_assert
(
1
<
<
MAX_BIT_LENGTH_BIT_LENGTH
>
=
MAX_CODE_BIT_LENGTH
"
MAX_BIT_LENGTH
bits
MUST
be
sufficient
to
store
MAX_CODE_BIT_LENGTH
"
)
;
const
uint8_t
MAX_PREFIX_BIT_LENGTH
=
32
;
const
uint8_t
BIT_BUFFER_SIZE
=
64
;
const
uint8_t
BIT_BUFFER_READ_UNIT
=
8
;
const
uint32_t
MAX_NUMBER_OF_SYMBOLS
=
32768
;
const
uint32_t
MAX_LIST_LENGTH
=
std
:
:
min
(
(
uint32_t
)
32768
NativeObject
:
:
MAX_DENSE_ELEMENTS_COUNT
)
;
const
size_t
HUFFMAN_STACK_INITIAL_CAPACITY
=
1024
;
extern
const
size_t
SUM_LIMITS
[
BINAST_NUMBER_OF_SUM_TYPES
]
;
extern
const
BinASTKind
*
SUM_RESOLUTIONS
[
BINAST_NUMBER_OF_SUM_TYPES
]
;
extern
const
size_t
STRING_ENUM_LIMITS
[
BINASTSTRINGENUM_LIMIT
]
;
extern
const
BinASTVariant
*
STRING_ENUM_RESOLUTIONS
[
BINASTSTRINGENUM_LIMIT
]
;
using
Compression
=
BinASTTokenReaderContext
:
:
Compression
;
using
EndOfFilePolicy
=
BinASTTokenReaderContext
:
:
EndOfFilePolicy
;
#
define
WRAP_INTERFACE
(
TYPE
)
Interface
:
:
Maker
(
BinASTKind
:
:
TYPE
)
#
define
WRAP_MAYBE_INTERFACE
(
TYPE
)
MaybeInterface
:
:
Maker
(
BinASTKind
:
:
TYPE
)
#
define
WRAP_PRIMITIVE
(
TYPE
)
TYPE
#
define
WRAP_LIST
(
TYPE
_
)
List
:
:
Maker
(
BinASTList
:
:
TYPE
)
#
define
WRAP_SUM
(
TYPE
)
Sum
:
:
Maker
(
BinASTSum
:
:
TYPE
)
#
define
WRAP_MAYBE_SUM
(
TYPE
)
MaybeSum
:
:
Maker
(
BinASTSum
:
:
TYPE
)
#
define
WRAP_STRING_ENUM
(
TYPE
)
StringEnum
:
:
Maker
(
BinASTStringEnum
:
:
TYPE
)
#
define
WRAP_MAYBE_STRING_ENUM
(
TYPE
)
\
MaybeStringEnum
:
:
Maker
(
BinASTStringEnum
:
:
TYPE
)
using
CharSlice
=
BinaryASTSupport
:
:
CharSlice
;
using
Chars
=
BinASTTokenReaderContext
:
:
Chars
;
class
HuffmanPreludeReader
{
public
:
HuffmanPreludeReader
(
JSContext
*
cx
BinASTTokenReaderContext
&
reader
HuffmanDictionary
&
dictionary
)
:
cx_
(
cx
)
reader_
(
reader
)
dictionary_
(
dictionary
)
stack_
(
cx_
)
auxStorageLength_
(
cx_
)
{
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
run
(
size_t
initialCapacity
)
;
private
:
JSContext
*
cx_
;
BinASTTokenReaderContext
&
reader_
;
HuffmanDictionary
&
dictionary_
;
public
:
enum
TableHeader
:
uint8_t
{
SingleValue
=
0x00
MultipleValues
=
0x01
Unreachable
=
0x02
}
;
struct
EntryBase
{
const
NormalizedInterfaceAndField
identity_
;
explicit
EntryBase
(
const
NormalizedInterfaceAndField
identity
)
:
identity_
(
identity
)
{
}
}
;
struct
EntryIndexed
:
EntryBase
{
using
Indexed
=
Ok
;
explicit
EntryIndexed
(
const
NormalizedInterfaceAndField
identity
)
:
EntryBase
(
identity
)
{
}
}
;
struct
EntryExplicit
:
EntryBase
{
using
Explicit
=
Ok
;
explicit
EntryExplicit
(
const
NormalizedInterfaceAndField
identity
)
:
EntryBase
(
identity
)
{
}
}
;
struct
String
:
EntryExplicit
{
using
Table
=
HuffmanTableIndexedSymbolsLiteralString
;
explicit
String
(
const
NormalizedInterfaceAndField
identity
)
:
EntryExplicit
(
identity
)
{
}
}
;
using
IdentifierName
=
String
;
using
PropertyKey
=
String
;
struct
MaybeString
:
EntryExplicit
{
using
Table
=
HuffmanTableIndexedSymbolsOptionalLiteralString
;
explicit
MaybeString
(
const
NormalizedInterfaceAndField
identity
)
:
EntryExplicit
(
identity
)
{
}
}
;
using
MaybeIdentifierName
=
MaybeString
;
using
MaybePropertyKey
=
MaybeString
;
struct
Number
:
EntryExplicit
{
using
Table
=
HuffmanTableExplicitSymbolsF64
;
explicit
Number
(
const
NormalizedInterfaceAndField
identity
)
:
EntryExplicit
(
identity
)
{
}
}
;
struct
UnsignedLong
:
EntryExplicit
{
using
Table
=
HuffmanTableExplicitSymbolsU32
;
explicit
UnsignedLong
(
const
NormalizedInterfaceAndField
identity
)
:
EntryExplicit
(
identity
)
{
}
}
;
struct
Boolean
:
EntryIndexed
{
using
Table
=
HuffmanTableIndexedSymbolsBool
;
explicit
Boolean
(
const
NormalizedInterfaceAndField
identity
)
:
EntryIndexed
(
identity
)
{
}
inline
bool
lessThan
(
uint32_t
aIndex
uint32_t
bIndex
)
{
MOZ_ASSERT
(
aIndex
<
=
1
)
;
MOZ_ASSERT
(
bIndex
<
=
1
)
;
return
aIndex
<
bIndex
;
}
}
;
struct
Lazy
:
EntryExplicit
{
explicit
Lazy
(
const
NormalizedInterfaceAndField
identity
)
:
EntryExplicit
(
identity
)
{
}
}
;
struct
Interface
:
EntryIndexed
{
const
BinASTKind
kind_
;
Interface
(
const
NormalizedInterfaceAndField
identity
BinASTKind
kind
)
:
EntryIndexed
(
identity
)
kind_
(
kind
)
{
}
struct
Maker
{
const
BinASTKind
kind_
;
explicit
Maker
(
BinASTKind
kind
)
:
kind_
(
kind
)
{
}
Interface
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
Interface
(
identity
kind_
)
;
}
}
;
}
;
struct
MaybeInterface
:
EntryIndexed
{
using
Table
=
HuffmanTableIndexedSymbolsMaybeInterface
;
const
BinASTKind
kind_
;
inline
bool
lessThan
(
uint32_t
aIndex
uint32_t
bIndex
)
{
MOZ_ASSERT
(
aIndex
<
=
1
)
;
MOZ_ASSERT
(
bIndex
<
=
1
)
;
return
aIndex
<
bIndex
;
}
MaybeInterface
(
const
NormalizedInterfaceAndField
identity
BinASTKind
kind
)
:
EntryIndexed
(
identity
)
kind_
(
kind
)
{
}
size_t
maxMumberOfSymbols
(
)
const
{
return
2
;
}
struct
Maker
{
const
BinASTKind
kind_
;
explicit
Maker
(
BinASTKind
kind
)
:
kind_
(
kind
)
{
}
MaybeInterface
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
MaybeInterface
(
identity
kind_
)
;
}
}
;
}
;
struct
List
:
EntryExplicit
{
using
Table
=
HuffmanTableExplicitSymbolsListLength
;
const
BinASTList
contents_
;
List
(
const
NormalizedInterfaceAndField
identity
const
BinASTList
contents
)
:
EntryExplicit
(
identity
)
contents_
(
contents
)
{
}
struct
Maker
{
const
BinASTList
contents_
;
explicit
Maker
(
BinASTList
contents
)
:
contents_
(
contents
)
{
}
List
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
{
identity
contents_
}
;
}
}
;
}
;
struct
ListContents
:
EntryBase
{
explicit
ListContents
(
const
NormalizedInterfaceAndField
identity
)
:
EntryBase
(
identity
)
{
}
}
;
struct
Sum
:
EntryIndexed
{
using
Table
=
HuffmanTableIndexedSymbolsSum
;
const
BinASTSum
contents_
;
inline
bool
lessThan
(
uint32_t
aIndex
uint32_t
bIndex
)
{
MOZ_ASSERT
(
aIndex
<
=
maxNumberOfSymbols
(
)
)
;
MOZ_ASSERT
(
bIndex
<
=
maxNumberOfSymbols
(
)
)
;
const
size_t
aKey
=
getBinASTKindSortKey
(
interfaceAt
(
aIndex
)
)
;
const
size_t
bKey
=
getBinASTKindSortKey
(
interfaceAt
(
bIndex
)
)
;
return
aKey
<
bKey
;
}
Sum
(
const
NormalizedInterfaceAndField
identity
const
BinASTSum
contents
)
:
EntryIndexed
(
identity
)
contents_
(
contents
)
{
}
size_t
maxNumberOfSymbols
(
)
const
{
return
SUM_LIMITS
[
static_cast
<
size_t
>
(
contents_
)
]
;
}
BinASTKind
interfaceAt
(
size_t
index
)
const
{
MOZ_ASSERT
(
index
<
maxNumberOfSymbols
(
)
)
;
return
SUM_RESOLUTIONS
[
static_cast
<
size_t
>
(
contents_
)
]
[
index
]
;
}
struct
Maker
{
const
BinASTSum
contents_
;
explicit
Maker
(
BinASTSum
contents
)
:
contents_
(
contents
)
{
}
Sum
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
Sum
(
identity
contents_
)
;
}
}
;
}
;
struct
MaybeSum
:
EntryIndexed
{
using
Table
=
HuffmanTableIndexedSymbolsSum
;
const
BinASTSum
contents_
;
inline
bool
lessThan
(
uint32_t
aIndex
uint32_t
bIndex
)
{
return
aIndex
<
bIndex
;
}
MaybeSum
(
const
NormalizedInterfaceAndField
identity
const
BinASTSum
contents
)
:
EntryIndexed
(
identity
)
contents_
(
contents
)
{
}
size_t
maxNumberOfSymbols
(
)
const
{
return
SUM_LIMITS
[
static_cast
<
size_t
>
(
contents_
)
]
+
1
;
}
BinASTKind
interfaceAt
(
size_t
index
)
const
{
MOZ_ASSERT
(
index
<
maxNumberOfSymbols
(
)
)
;
if
(
index
=
=
0
)
{
return
BinASTKind
:
:
_Null
;
}
return
SUM_RESOLUTIONS
[
static_cast
<
size_t
>
(
contents_
)
]
[
index
-
1
]
;
}
struct
Maker
{
const
BinASTSum
contents_
;
explicit
Maker
(
BinASTSum
contents
)
:
contents_
(
contents
)
{
}
MaybeSum
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
MaybeSum
(
identity
contents_
)
;
}
}
;
}
;
struct
StringEnum
:
EntryIndexed
{
using
Table
=
HuffmanTableIndexedSymbolsStringEnum
;
inline
bool
lessThan
(
uint32_t
aIndex
uint32_t
bIndex
)
{
MOZ_ASSERT
(
aIndex
<
=
maxNumberOfSymbols
(
)
)
;
MOZ_ASSERT
(
bIndex
<
=
maxNumberOfSymbols
(
)
)
;
const
size_t
aKey
=
getBinASTVariantSortKey
(
variantAt
(
aIndex
)
)
;
const
size_t
bKey
=
getBinASTVariantSortKey
(
variantAt
(
bIndex
)
)
;
return
aKey
<
bKey
;
}
const
BinASTStringEnum
contents_
;
StringEnum
(
const
NormalizedInterfaceAndField
identity
const
BinASTStringEnum
contents
)
:
EntryIndexed
(
identity
)
contents_
(
contents
)
{
}
size_t
maxNumberOfSymbols
(
)
const
{
return
STRING_ENUM_LIMITS
[
static_cast
<
size_t
>
(
contents_
)
]
;
}
BinASTVariant
variantAt
(
size_t
index
)
const
{
MOZ_ASSERT
(
index
<
maxNumberOfSymbols
(
)
)
;
return
STRING_ENUM_RESOLUTIONS
[
static_cast
<
size_t
>
(
contents_
)
]
[
index
]
;
}
struct
Maker
{
const
BinASTStringEnum
contents_
;
explicit
Maker
(
BinASTStringEnum
contents
)
:
contents_
(
contents
)
{
}
StringEnum
operator
(
)
(
const
NormalizedInterfaceAndField
identity
)
{
return
StringEnum
(
identity
contents_
)
;
}
}
;
}
;
public
:
using
Entry
=
mozilla
:
:
Variant
<
Boolean
String
MaybeString
Number
UnsignedLong
Lazy
Interface
MaybeInterface
List
Sum
MaybeSum
StringEnum
>
;
#
ifdef
DEBUG
struct
PrintEntry
{
static
void
print
(
const
char
*
text
const
Entry
&
entry
)
{
fprintf
(
stderr
"
%
s
"
text
)
;
entry
.
match
(
PrintEntry
(
)
)
;
fprintf
(
stderr
"
\
n
"
)
;
}
void
operator
(
)
(
const
EntryBase
&
entry
)
{
fprintf
(
stderr
"
%
s
"
describeBinASTInterfaceAndField
(
entry
.
identity_
.
identity_
)
)
;
}
}
;
#
endif
private
:
Vector
<
Entry
>
stack_
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
pushValue
(
NormalizedInterfaceAndField
identity
const
List
&
list
)
{
auto
&
table
=
dictionary_
.
tableForListLength
(
list
.
contents_
)
;
if
(
table
.
is
<
HuffmanTableUnreachable
>
(
)
)
{
table
=
{
mozilla
:
:
VariantType
<
HuffmanTableInitializing
>
{
}
}
;
MOZ_TRY
(
(
readTable
<
HuffmanTableListLength
List
>
(
table
list
)
)
)
;
}
auto
&
lengthTable
=
table
.
as
<
HuffmanTableExplicitSymbolsListLength
>
(
)
;
bool
empty
=
true
;
for
(
auto
iter
:
lengthTable
)
{
if
(
iter
-
>
toListLength
(
)
>
0
)
{
empty
=
false
;
break
;
}
}
if
(
empty
)
{
return
Ok
(
)
;
}
switch
(
list
.
contents_
)
{
#
define
WRAP_LIST_2
(
_
CONTENT
)
CONTENT
#
define
EMIT_CASE
(
LIST_NAME
_CONTENT_TYPE
_HUMAN_NAME
TYPE
)
\
case
BinASTList
:
:
LIST_NAME
:
\
return
pushValue
(
list
.
identity_
TYPE
(
list
.
identity_
)
)
;
FOR_EACH_BIN_LIST
(
EMIT_CASE
WRAP_PRIMITIVE
WRAP_INTERFACE
WRAP_MAYBE_INTERFACE
WRAP_LIST_2
WRAP_SUM
WRAP_MAYBE_SUM
WRAP_STRING_ENUM
WRAP_MAYBE_STRING_ENUM
)
#
undef
EMIT_CASE
#
undef
WRAP_LIST_2
}
return
Ok
(
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
pushValue
(
NormalizedInterfaceAndField
identity
const
Interface
&
interface
)
{
auto
&
table
=
dictionary_
.
tableForField
(
identity
)
;
if
(
table
.
is
<
HuffmanTableUnreachable
>
(
)
)
{
HuffmanTableIndexedSymbolsSum
sum
(
cx_
)
;
MOZ_TRY
(
sum
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromKind
(
BinASTKind
(
interface
.
kind_
)
)
)
)
;
table
=
{
mozilla
:
:
VariantType
<
HuffmanTableIndexedSymbolsSum
>
{
}
std
:
:
move
(
sum
)
}
;
}
return
pushFields
(
interface
.
kind_
)
;
}
template
<
class
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
pushValue
(
NormalizedInterfaceAndField
identity
const
Entry
&
entry
)
{
auto
&
table
=
dictionary_
.
tableForField
(
identity
)
;
if
(
!
table
.
is
<
HuffmanTableUnreachable
>
(
)
)
{
return
Ok
(
)
;
}
table
=
{
mozilla
:
:
VariantType
<
HuffmanTableInitializing
>
{
}
}
;
BINJS_TRY
(
stack_
.
append
(
entry
)
)
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
pushFields
(
BinASTKind
tag
)
{
switch
(
tag
)
{
#
define
EMIT_FIELD
(
TAG_NAME
FIELD_NAME
FIELD_INDEX
FIELD_TYPE
_
)
\
MOZ_TRY
(
pushValue
(
NormalizedInterfaceAndField
(
\
BinASTInterfaceAndField
:
:
TAG_NAME
#
#
__
#
#
FIELD_NAME
)
\
FIELD_TYPE
(
NormalizedInterfaceAndField
(
\
BinASTInterfaceAndField
:
:
TAG_NAME
#
#
__
#
#
FIELD_NAME
)
)
)
)
;
#
define
EMIT_CASE
(
TAG_ENUM_NAME
_2
TAG_MACRO_NAME
)
\
case
BinASTKind
:
:
TAG_ENUM_NAME
:
{
\
FOR_EACH_BIN_FIELD_IN_INTERFACE_
#
#
TAG_MACRO_NAME
(
\
EMIT_FIELD
WRAP_PRIMITIVE
WRAP_INTERFACE
WRAP_MAYBE_INTERFACE
\
WRAP_LIST
WRAP_SUM
WRAP_MAYBE_SUM
WRAP_STRING_ENUM
\
WRAP_MAYBE_STRING_ENUM
)
;
\
break
;
\
}
FOR_EACH_BIN_KIND
(
EMIT_CASE
)
#
undef
EMIT_CASE
#
undef
EMIT_FIELD
}
return
Ok
(
)
;
}
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
readSymbol
(
const
Entry
&
size_t
index
)
;
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
readNumberOfSymbols
(
const
Entry
&
)
;
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readSingleValueTable
(
typename
Entry
:
:
Table
&
const
Entry
&
)
;
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readMultipleValuesTable
(
typename
Entry
:
:
Table
&
table
Entry
entry
)
{
BINJS_MOZ_TRY_DECL
(
numberOfSymbols
readNumberOfSymbols
<
Entry
>
(
entry
)
)
;
MOZ_ASSERT
(
numberOfSymbols
<
=
MAX_NUMBER_OF_SYMBOLS
)
;
if
(
numberOfSymbols
=
=
1
)
{
BINJS_MOZ_TRY_DECL
(
bitLength
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
bitLength
!
=
0
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
BINJS_MOZ_TRY_DECL
(
symbol
readSymbol
<
Entry
>
(
entry
0
)
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
symbol
)
)
;
return
Ok
(
)
;
}
MOZ_TRY
(
readMultipleValuesTableAndAssignCode
<
Entry
>
(
table
entry
numberOfSymbols
)
)
;
return
Ok
(
)
;
}
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
typename
Entry
:
:
Explicit
>
readMultipleValuesTableAndAssignCode
(
typename
Entry
:
:
Table
&
table
Entry
entry
uint32_t
numberOfSymbols
)
{
MOZ_ASSERT
(
auxStorageLength_
.
empty
(
)
)
;
BINJS_TRY
(
auxStorageLength_
.
reserve
(
numberOfSymbols
+
1
)
)
;
uint8_t
largestBitLength
=
0
;
for
(
size_t
i
=
0
;
i
<
numberOfSymbols
;
+
+
i
)
{
BINJS_MOZ_TRY_DECL
(
bitLength
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
bitLength
=
=
0
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
if
(
bitLength
>
largestBitLength
)
{
largestBitLength
=
bitLength
;
}
BINJS_TRY
(
auxStorageLength_
.
append
(
BitLengthAndIndex
(
bitLength
i
)
)
)
;
}
BINJS_TRY
(
auxStorageLength_
.
append
(
BitLengthAndIndex
(
MAX_CODE_BIT_LENGTH
numberOfSymbols
)
)
)
;
uint32_t
code
=
0
;
MOZ_TRY
(
table
.
initStart
(
cx_
numberOfSymbols
largestBitLength
)
)
;
for
(
size_t
i
=
0
;
i
<
numberOfSymbols
;
+
+
i
)
{
const
auto
bitLength
=
auxStorageLength_
[
i
]
.
bitLength_
;
const
auto
nextBitLength
=
auxStorageLength_
[
i
+
1
]
.
bitLength_
;
if
(
MOZ_UNLIKELY
(
bitLength
>
nextBitLength
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
BINJS_MOZ_TRY_DECL
(
symbol
readSymbol
<
Entry
>
(
entry
i
)
)
;
MOZ_TRY
(
table
.
addSymbol
(
code
bitLength
symbol
)
)
;
code
=
(
code
+
1
)
<
<
(
nextBitLength
-
bitLength
)
;
}
MOZ_TRY
(
table
.
initComplete
(
)
)
;
auxStorageLength_
.
clear
(
)
;
return
Ok
(
)
;
}
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
typename
Entry
:
:
Indexed
>
readMultipleValuesTableAndAssignCode
(
typename
Entry
:
:
Table
&
table
Entry
entry
uint32_t
numberOfSymbols
)
{
MOZ_ASSERT
(
auxStorageLength_
.
empty
(
)
)
;
BINJS_TRY
(
auxStorageLength_
.
reserve
(
numberOfSymbols
+
1
)
)
;
uint8_t
largestBitLength
=
0
;
for
(
size_t
i
=
0
;
i
<
numberOfSymbols
;
+
+
i
)
{
BINJS_MOZ_TRY_DECL
(
bitLength
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
bitLength
>
MAX_CODE_BIT_LENGTH
)
)
{
MOZ_CRASH
(
"
FIXME
:
Implement
error
"
)
;
}
if
(
bitLength
>
0
)
{
BINJS_TRY
(
auxStorageLength_
.
append
(
BitLengthAndIndex
(
bitLength
i
)
)
)
;
if
(
bitLength
>
largestBitLength
)
{
largestBitLength
=
bitLength
;
}
}
}
std
:
:
sort
(
auxStorageLength_
.
begin
(
)
auxStorageLength_
.
end
(
)
[
&
entry
]
(
const
BitLengthAndIndex
&
a
const
BitLengthAndIndex
&
b
)
-
>
bool
{
MOZ_ASSERT
(
a
.
index_
!
=
b
.
index_
)
;
if
(
a
.
bitLength_
<
b
.
bitLength_
)
{
return
true
;
}
if
(
a
.
bitLength_
>
b
.
bitLength_
)
{
return
false
;
}
return
entry
.
lessThan
(
a
.
index_
b
.
index_
)
;
}
)
;
BINJS_TRY
(
auxStorageLength_
.
emplaceBack
(
MAX_CODE_BIT_LENGTH
numberOfSymbols
)
)
;
uint32_t
code
=
0
;
MOZ_TRY
(
table
.
initStart
(
cx_
auxStorageLength_
.
length
(
)
-
1
largestBitLength
)
)
;
for
(
size_t
i
=
0
;
i
<
auxStorageLength_
.
length
(
)
-
1
;
+
+
i
)
{
const
auto
bitLength
=
auxStorageLength_
[
i
]
.
bitLength_
;
const
auto
nextBitLength
=
auxStorageLength_
[
i
+
1
]
.
bitLength_
;
MOZ_ASSERT
(
bitLength
>
0
)
;
MOZ_ASSERT
(
bitLength
<
=
nextBitLength
)
;
BINJS_MOZ_TRY_DECL
(
symbol
readSymbol
<
Entry
>
(
entry
auxStorageLength_
[
i
]
.
index_
)
)
;
MOZ_TRY
(
table
.
addSymbol
(
code
bitLength
symbol
)
)
;
code
=
(
code
+
1
)
<
<
(
nextBitLength
-
bitLength
)
;
}
MOZ_TRY
(
table
.
initComplete
(
)
)
;
auxStorageLength_
.
clear
(
)
;
return
Ok
(
)
;
}
template
<
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readTable
(
Entry
entry
)
{
auto
&
table
=
dictionary_
.
tableForField
(
entry
.
identity_
)
;
return
readTable
<
HuffmanTableValue
Entry
>
(
table
entry
)
;
}
template
<
typename
HuffmanTable
typename
Entry
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readTable
(
HuffmanTable
&
table
Entry
entry
)
{
if
(
MOZ_UNLIKELY
(
!
table
.
template
is
<
HuffmanTableInitializing
>
(
)
)
)
{
return
raiseDuplicateTableError
(
entry
.
identity_
)
;
}
uint8_t
headerByte
;
MOZ_TRY_VAR
(
headerByte
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
switch
(
headerByte
)
{
case
TableHeader
:
:
SingleValue
:
{
table
=
{
mozilla
:
:
VariantType
<
typename
Entry
:
:
Table
>
{
}
cx_
}
;
auto
&
tableRef
=
table
.
template
as
<
typename
Entry
:
:
Table
>
(
)
;
MOZ_TRY
(
(
readSingleValueTable
<
Entry
>
(
tableRef
entry
)
)
)
;
return
Ok
(
)
;
}
case
TableHeader
:
:
MultipleValues
:
{
table
=
{
mozilla
:
:
VariantType
<
typename
Entry
:
:
Table
>
{
}
cx_
}
;
auto
&
tableRef
=
table
.
template
as
<
typename
Entry
:
:
Table
>
(
)
;
MOZ_TRY
(
(
readMultipleValuesTable
<
Entry
>
(
tableRef
entry
)
)
)
;
return
Ok
(
)
;
}
case
TableHeader
:
:
Unreachable
:
return
Ok
(
)
;
default
:
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
}
private
:
struct
BitLengthAndIndex
{
BitLengthAndIndex
(
uint8_t
bitLength
size_t
index
)
:
bitLength_
(
bitLength
)
index_
(
index
)
{
}
uint8_t
bitLength_
;
size_t
index_
;
}
;
Vector
<
BitLengthAndIndex
>
auxStorageLength_
;
struct
ReadPoppedEntryMatcher
{
HuffmanPreludeReader
&
owner
;
explicit
ReadPoppedEntryMatcher
(
HuffmanPreludeReader
&
owner
)
:
owner
(
owner
)
{
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
Lazy
&
entry
)
{
return
Ok
(
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
Boolean
&
entry
)
{
return
owner
.
readTable
<
Boolean
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
Interface
&
entry
)
{
return
owner
.
pushFields
(
entry
.
kind_
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
MaybeInterface
&
entry
)
{
MOZ_TRY
(
(
owner
.
readTable
<
MaybeInterface
>
(
entry
)
)
)
;
const
auto
&
table
=
owner
.
dictionary_
.
tableForField
(
entry
.
identity_
)
;
if
(
table
.
is
<
HuffmanTableUnreachable
>
(
)
)
{
return
Ok
(
)
;
}
const
auto
&
tableRef
=
table
.
as
<
HuffmanTableIndexedSymbolsMaybeInterface
>
(
)
;
if
(
!
tableRef
.
isAlwaysNull
(
)
)
{
MOZ_TRY
(
owner
.
pushFields
(
entry
.
kind_
)
)
;
}
return
Ok
(
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
Sum
&
entry
)
{
MOZ_TRY
(
(
owner
.
readTable
<
Sum
>
(
entry
)
)
)
;
const
auto
&
table
=
owner
.
dictionary_
.
tableForField
(
entry
.
identity_
)
;
if
(
table
.
is
<
HuffmanTableInitializing
>
(
)
)
{
return
Ok
(
)
;
}
const
auto
&
tableRef
=
table
.
as
<
HuffmanTableIndexedSymbolsSum
>
(
)
;
for
(
auto
iter
:
tableRef
)
{
MOZ_TRY
(
owner
.
pushValue
(
entry
.
identity_
Interface
(
entry
.
identity_
iter
-
>
toKind
(
)
)
)
)
;
}
return
Ok
(
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
MaybeSum
&
entry
)
{
MOZ_TRY
(
(
owner
.
readTable
<
MaybeSum
>
(
entry
)
)
)
;
const
auto
&
table
=
owner
.
dictionary_
.
tableForField
(
entry
.
identity_
)
;
if
(
table
.
is
<
HuffmanTableUnreachable
>
(
)
)
{
return
Ok
(
)
;
}
const
auto
&
tableRef
=
table
.
as
<
HuffmanTableIndexedSymbolsSum
>
(
)
;
for
(
auto
iter
:
tableRef
)
{
MOZ_TRY
(
owner
.
pushValue
(
entry
.
identity_
Interface
(
entry
.
identity_
iter
-
>
toKind
(
)
)
)
)
;
}
return
Ok
(
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
Number
&
entry
)
{
return
owner
.
readTable
<
Number
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
String
&
entry
)
{
return
owner
.
readTable
<
String
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
MaybeString
&
entry
)
{
return
owner
.
readTable
<
MaybeString
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
StringEnum
&
entry
)
{
return
owner
.
readTable
<
StringEnum
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
UnsignedLong
&
entry
)
{
return
owner
.
readTable
<
UnsignedLong
>
(
entry
)
;
}
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
operator
(
)
(
const
List
&
)
{
MOZ_CRASH
(
"
Unreachable
"
)
;
return
Ok
(
)
;
}
}
;
template
<
typename
T
>
using
ErrorResult
=
BinASTTokenReaderBase
:
:
ErrorResult
<
T
>
;
MOZ_MUST_USE
ErrorResult
<
JS
:
:
Error
&
>
raiseDuplicateTableError
(
const
NormalizedInterfaceAndField
identity
)
{
return
reader_
.
raiseError
(
"
Duplicate
table
.
"
)
;
}
MOZ_MUST_USE
ErrorResult
<
JS
:
:
Error
&
>
raiseInvalidTableData
(
const
NormalizedInterfaceAndField
identity
)
{
return
reader_
.
raiseError
(
"
Invalid
data
while
reading
table
.
"
)
;
}
}
;
using
Boolean
=
HuffmanPreludeReader
:
:
Boolean
;
using
Interface
=
HuffmanPreludeReader
:
:
Interface
;
using
List
=
HuffmanPreludeReader
:
:
List
;
using
MaybeInterface
=
HuffmanPreludeReader
:
:
MaybeInterface
;
using
MaybeString
=
HuffmanPreludeReader
:
:
MaybeString
;
using
MaybeSum
=
HuffmanPreludeReader
:
:
MaybeSum
;
using
Number
=
HuffmanPreludeReader
:
:
Number
;
using
String
=
HuffmanPreludeReader
:
:
String
;
using
StringEnum
=
HuffmanPreludeReader
:
:
StringEnum
;
using
Sum
=
HuffmanPreludeReader
:
:
Sum
;
using
UnsignedLong
=
HuffmanPreludeReader
:
:
UnsignedLong
;
BinASTTokenReaderContext
:
:
BinASTTokenReaderContext
(
JSContext
*
cx
ErrorReporter
*
er
const
uint8_t
*
start
const
size_t
length
)
:
BinASTTokenReaderBase
(
cx
er
start
length
)
metadata_
(
nullptr
)
dictionary_
(
cx
)
posBeforeTree_
(
nullptr
)
{
MOZ_ASSERT
(
er
)
;
}
BinASTTokenReaderContext
:
:
~
BinASTTokenReaderContext
(
)
{
if
(
metadata_
&
&
metadataOwned_
=
=
MetadataOwnership
:
:
Owned
)
{
UniqueBinASTSourceMetadataPtr
ptr
(
metadata_
)
;
}
}
template
<
>
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readBuf
<
Compression
:
:
No
EndOfFilePolicy
:
:
RaiseError
>
(
uint8_t
*
bytes
uint32_t
&
len
)
{
return
Base
:
:
readBuf
(
bytes
len
)
;
}
template
<
>
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readBuf
<
Compression
:
:
No
EndOfFilePolicy
:
:
BestEffort
>
(
uint8_t
*
bytes
uint32_t
&
len
)
{
len
=
std
:
:
min
(
(
uint32_t
)
(
stop_
-
current_
)
len
)
;
return
Base
:
:
readBuf
(
bytes
len
)
;
}
template
<
>
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
handleEndOfStream
<
EndOfFilePolicy
:
:
RaiseError
>
(
)
{
return
raiseError
(
"
Unexpected
end
of
stream
"
)
;
}
template
<
>
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
handleEndOfStream
<
EndOfFilePolicy
:
:
BestEffort
>
(
)
{
return
Ok
(
)
;
}
template
<
>
JS
:
:
Result
<
uint8_t
>
BinASTTokenReaderContext
:
:
readByte
<
Compression
:
:
No
>
(
)
{
return
Base
:
:
readByte
(
)
;
}
BinASTSourceMetadata
*
BinASTTokenReaderContext
:
:
takeMetadata
(
)
{
MOZ_ASSERT
(
metadataOwned_
=
=
MetadataOwnership
:
:
Owned
)
;
metadataOwned_
=
MetadataOwnership
:
:
Unowned
;
return
metadata_
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
initFromScriptSource
(
ScriptSource
*
scriptSource
)
{
metadata_
=
scriptSource
-
>
binASTSourceMetadata
(
)
;
metadataOwned_
=
MetadataOwnership
:
:
Unowned
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readHeader
(
)
{
MOZ_ASSERT
(
!
posBeforeTree_
)
;
#
if
BINAST_CX_MAGIC_HEADER
MOZ_TRY
(
readConst
(
CX_MAGIC_HEADER
)
)
;
BINJS_MOZ_TRY_DECL
(
version
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
version
!
=
MAGIC_FORMAT_VERSION
)
)
{
return
raiseError
(
"
Format
version
not
implemented
"
)
;
}
#
endif
MOZ_TRY
(
readStringPrelude
(
)
)
;
MOZ_TRY
(
readHuffmanPrelude
(
)
)
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readStringPrelude
(
)
{
BINJS_MOZ_TRY_DECL
(
stringsNumberOfEntries
readVarU32
<
Compression
:
:
No
>
(
)
)
;
const
uint32_t
MAX_NUMBER_OF_STRINGS
=
32768
;
if
(
MOZ_UNLIKELY
(
stringsNumberOfEntries
>
MAX_NUMBER_OF_STRINGS
)
)
{
return
raiseError
(
"
Too
many
entries
in
strings
dictionary
"
)
;
}
Vector
<
BinASTKind
>
binASTKinds
(
cx_
)
;
BinASTSourceMetadata
*
metadata
=
BinASTSourceMetadata
:
:
Create
(
binASTKinds
stringsNumberOfEntries
)
;
if
(
MOZ_UNLIKELY
(
!
metadata
)
)
{
return
raiseOOM
(
)
;
}
auto
se
=
mozilla
:
:
MakeScopeExit
(
[
metadata
]
(
)
{
js_free
(
metadata
)
;
}
)
;
RootedAtom
atom
(
cx_
)
;
for
(
uint32_t
stringIndex
=
0
;
stringIndex
<
stringsNumberOfEntries
;
stringIndex
+
+
)
{
if
(
MOZ_UNLIKELY
(
current_
>
=
stop_
)
)
{
return
raiseError
(
"
End
of
file
reached
while
reading
strings
table
"
)
;
}
const
uint8_t
*
end
=
static_cast
<
const
uint8_t
*
>
(
memchr
(
current_
'
\
0
'
stop_
-
current_
)
)
;
if
(
MOZ_UNLIKELY
(
!
end
)
)
{
return
raiseError
(
"
Invalid
string
missing
NUL
"
)
;
}
const
char
*
start
=
reinterpret_cast
<
const
char
*
>
(
current_
)
;
BINJS_TRY_VAR
(
atom
AtomizeWTF8Chars
(
cx_
start
end
-
current_
)
)
;
metadata
-
>
getAtom
(
stringIndex
)
=
atom
;
current_
=
end
+
1
;
}
MOZ_ASSERT
(
!
metadata_
)
;
se
.
release
(
)
;
metadata_
=
metadata
;
metadataOwned_
=
MetadataOwnership
:
:
Owned
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readHuffmanPrelude
(
)
{
HuffmanPreludeReader
reader
{
cx_
*
this
dictionary_
}
;
return
reader
.
run
(
HUFFMAN_STACK_INITIAL_CAPACITY
)
;
}
BinASTTokenReaderContext
:
:
BitBuffer
:
:
BitBuffer
(
)
:
bits_
(
0
)
bitLength_
(
0
)
{
static_assert
(
sizeof
(
bits_
)
*
8
=
=
BIT_BUFFER_SIZE
"
Expecting
bitBuffer
to
match
BIT_BUFFER_SIZE
"
)
;
}
template
<
Compression
C
>
JS
:
:
Result
<
HuffmanLookup
>
BinASTTokenReaderContext
:
:
BitBuffer
:
:
getHuffmanLookup
(
BinASTTokenReaderContext
&
owner
)
{
if
(
bitLength_
<
=
MAX_PREFIX_BIT_LENGTH
)
{
uint8_t
bytes
[
8
]
=
{
}
;
uint32_t
bytesInBits
=
(
bitLength_
+
BIT_BUFFER_READ_UNIT
-
1
)
/
BIT_BUFFER_READ_UNIT
;
uint32_t
readLen
=
sizeof
(
bytes
)
-
bytesInBits
;
MOZ_TRY
(
(
owner
.
readBuf
<
Compression
:
:
No
EndOfFilePolicy
:
:
BestEffort
>
(
bytes
readLen
)
)
)
;
uint64_t
newBits
=
(
static_cast
<
uint64_t
>
(
bytes
[
0
]
)
<
<
56
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
1
]
)
<
<
48
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
2
]
)
<
<
40
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
3
]
)
<
<
32
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
4
]
)
<
<
24
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
5
]
)
<
<
16
)
|
(
static_cast
<
uint64_t
>
(
bytes
[
6
]
)
<
<
8
)
|
static_cast
<
uint64_t
>
(
bytes
[
7
]
)
;
static_assert
(
sizeof
(
bytes
)
=
=
sizeof
(
newBits
)
"
Expecting
bytes
array
to
match
size
of
newBits
"
)
;
newBits
>
>
=
(
BIT_BUFFER_READ_UNIT
*
(
sizeof
(
bytes
)
-
readLen
)
)
;
newBits
=
(
(
newBits
>
>
1
)
&
0x5555555555555555
)
|
(
(
newBits
&
0x5555555555555555
)
<
<
1
)
;
newBits
=
(
(
newBits
>
>
2
)
&
0x3333333333333333
)
|
(
(
newBits
&
0x3333333333333333
)
<
<
2
)
;
newBits
=
(
(
newBits
>
>
4
)
&
0x0F0F0F0F0F0F0F0F
)
|
(
(
newBits
&
0x0F0F0F0F0F0F0F0F
)
<
<
4
)
;
bitLength_
+
=
(
BIT_BUFFER_READ_UNIT
*
readLen
)
;
if
(
readLen
!
=
8
)
{
bits_
<
<
=
(
BIT_BUFFER_READ_UNIT
*
readLen
)
;
bits_
+
=
newBits
;
}
else
{
bits_
=
newBits
;
}
if
(
bitLength_
<
=
MAX_PREFIX_BIT_LENGTH
)
{
return
HuffmanLookup
(
bits_
bitLength_
)
;
}
}
const
uint64_t
bitPrefix
=
bits_
>
>
(
bitLength_
-
MAX_PREFIX_BIT_LENGTH
)
;
MOZ_ASSERT
(
bitPrefix
<
=
uint32_t
(
-
1
)
)
;
return
HuffmanLookup
(
bitPrefix
MAX_PREFIX_BIT_LENGTH
)
;
}
template
<
>
void
BinASTTokenReaderContext
:
:
BitBuffer
:
:
advanceBitBuffer
<
Compression
:
:
No
>
(
const
uint8_t
bitLength
)
{
MOZ_ASSERT
(
bitLength
<
=
bitLength_
)
;
bitLength_
-
=
bitLength
;
const
uint64_t
mask
=
bitLength_
=
=
0
?
0
:
uint64_t
(
-
1
)
>
>
(
BIT_BUFFER_SIZE
-
bitLength_
)
;
bits_
&
=
mask
;
MOZ_ASSERT_IF
(
bitLength_
!
=
BIT_BUFFER_SIZE
bits_
>
>
bitLength_
=
=
0
)
;
}
void
BinASTTokenReaderContext
:
:
traceMetadata
(
JSTracer
*
trc
)
{
if
(
metadata_
)
{
metadata_
-
>
trace
(
trc
)
;
}
}
MOZ_MUST_USE
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTTokenReaderContext
:
:
raiseInvalidValue
(
)
{
errorReporter_
-
>
errorNoOffset
(
JSMSG_BINAST
"
Invalid
value
"
)
;
return
cx_
-
>
alreadyReportedError
(
)
;
}
MOZ_MUST_USE
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTTokenReaderContext
:
:
raiseNotInPrelude
(
)
{
errorReporter_
-
>
errorNoOffset
(
JSMSG_BINAST
"
Value
is
not
in
prelude
"
)
;
return
cx_
-
>
alreadyReportedError
(
)
;
}
struct
ExtractBinASTInterfaceAndFieldMatcher
{
BinASTInterfaceAndField
operator
(
)
(
const
BinASTTokenReaderBase
:
:
FieldContext
&
context
)
{
return
context
.
position_
;
}
BinASTInterfaceAndField
operator
(
)
(
const
BinASTTokenReaderBase
:
:
ListContext
&
context
)
{
return
context
.
position_
;
}
BinASTInterfaceAndField
operator
(
)
(
const
BinASTTokenReaderBase
:
:
RootContext
&
)
{
MOZ_CRASH
(
"
The
root
context
has
no
interface
/
field
"
)
;
}
}
;
JS
:
:
Result
<
BinASTKind
>
BinASTTokenReaderContext
:
:
readTagFromTable
(
const
BinASTInterfaceAndField
&
identity
)
{
const
auto
&
table
=
dictionary_
.
tableForField
(
NormalizedInterfaceAndField
(
identity
)
)
;
BINJS_MOZ_TRY_DECL
(
bits_
(
bitBuffer
.
getHuffmanLookup
<
Compression
:
:
No
>
(
*
this
)
)
)
;
if
(
table
.
is
<
HuffmanTableIndexedSymbolsSum
>
(
)
)
{
const
auto
&
specialized
=
table
.
as
<
HuffmanTableIndexedSymbolsSum
>
(
)
;
const
auto
result
=
specialized
.
lookup
(
bits_
)
;
if
(
MOZ_UNLIKELY
(
!
result
.
isFound
(
)
)
)
{
return
raiseInvalidValue
(
)
;
}
bitBuffer
.
advanceBitBuffer
<
Compression
:
:
No
>
(
result
.
bitLength
(
)
)
;
return
result
.
value
(
)
.
toKind
(
)
;
}
MOZ_ASSERT
(
table
.
is
<
HuffmanTableIndexedSymbolsMaybeInterface
>
(
)
)
;
const
auto
&
specialized
=
table
.
as
<
HuffmanTableIndexedSymbolsMaybeInterface
>
(
)
;
const
auto
result
=
specialized
.
lookup
(
bits_
)
;
if
(
MOZ_UNLIKELY
(
!
result
.
isFound
(
)
)
)
{
return
raiseInvalidValue
(
)
;
}
bitBuffer
.
advanceBitBuffer
<
Compression
:
:
No
>
(
result
.
bitLength
(
)
)
;
return
result
.
value
(
)
.
toKind
(
)
;
}
template
<
typename
Table
>
JS
:
:
Result
<
BinASTSymbol
>
BinASTTokenReaderContext
:
:
readFieldFromTable
(
const
BinASTInterfaceAndField
&
identity
)
{
const
auto
&
table
=
dictionary_
.
tableForField
(
NormalizedInterfaceAndField
(
identity
)
)
;
if
(
MOZ_UNLIKELY
(
!
table
.
is
<
Table
>
(
)
)
)
{
return
raiseNotInPrelude
(
)
;
}
BINJS_MOZ_TRY_DECL
(
bits_
bitBuffer
.
getHuffmanLookup
<
Compression
:
:
No
>
(
*
this
)
)
;
const
auto
result
=
table
.
as
<
Table
>
(
)
.
lookup
(
bits_
)
;
if
(
MOZ_UNLIKELY
(
!
result
.
isFound
(
)
)
)
{
return
raiseInvalidValue
(
)
;
}
bitBuffer
.
advanceBitBuffer
<
Compression
:
:
No
>
(
result
.
bitLength
(
)
)
;
return
result
.
value
(
)
;
}
JS
:
:
Result
<
bool
>
BinASTTokenReaderContext
:
:
readBool
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableIndexedSymbolsBool
>
(
context
.
position_
)
)
;
return
result
.
toBool
(
)
;
}
JS
:
:
Result
<
double
>
BinASTTokenReaderContext
:
:
readDouble
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableExplicitSymbolsF64
>
(
context
.
position_
)
)
;
return
result
.
toDouble
(
)
;
}
JS
:
:
Result
<
JSAtom
*
>
BinASTTokenReaderContext
:
:
readMaybeAtom
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableIndexedSymbolsOptionalLiteralString
>
(
context
.
position_
)
)
;
return
result
.
toAtom
(
)
;
}
JS
:
:
Result
<
JSAtom
*
>
BinASTTokenReaderContext
:
:
readAtom
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableIndexedSymbolsLiteralString
>
(
context
.
position_
)
)
;
return
result
.
toAtom
(
)
;
}
JS
:
:
Result
<
JSAtom
*
>
BinASTTokenReaderContext
:
:
readMaybeIdentifierName
(
const
FieldContext
&
context
)
{
return
readMaybeAtom
(
context
)
;
}
JS
:
:
Result
<
JSAtom
*
>
BinASTTokenReaderContext
:
:
readIdentifierName
(
const
FieldContext
&
context
)
{
return
readAtom
(
context
)
;
}
JS
:
:
Result
<
JSAtom
*
>
BinASTTokenReaderContext
:
:
readPropertyKey
(
const
FieldContext
&
context
)
{
return
readAtom
(
context
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
readChars
(
Chars
&
out
const
FieldContext
&
)
{
return
raiseError
(
"
readChars
is
not
implemented
in
BinASTTokenReaderContext
"
)
;
}
JS
:
:
Result
<
BinASTVariant
>
BinASTTokenReaderContext
:
:
readVariant
(
const
ListContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableIndexedSymbolsStringEnum
>
(
context
.
position_
)
)
;
return
result
.
toVariant
(
)
;
}
JS
:
:
Result
<
BinASTVariant
>
BinASTTokenReaderContext
:
:
readVariant
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableIndexedSymbolsStringEnum
>
(
context
.
position_
)
)
;
return
result
.
toVariant
(
)
;
}
JS
:
:
Result
<
uint32_t
>
BinASTTokenReaderContext
:
:
readUnsignedLong
(
const
FieldContext
&
context
)
{
BINJS_MOZ_TRY_DECL
(
result
readFieldFromTable
<
HuffmanTableExplicitSymbolsU32
>
(
context
.
position_
)
)
;
return
result
.
toUnsignedLong
(
)
;
}
JS
:
:
Result
<
BinASTTokenReaderBase
:
:
SkippableSubTree
>
BinASTTokenReaderContext
:
:
readSkippableSubTree
(
const
FieldContext
&
)
{
return
raiseError
(
"
Not
Yet
Implemented
"
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterSum
(
BinASTKind
&
tag
const
FieldOrRootContext
&
context
)
{
return
context
.
match
(
[
this
&
tag
]
(
const
BinASTTokenReaderBase
:
:
FieldContext
&
asFieldContext
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_TRY_VAR
(
tag
readTagFromTable
(
asFieldContext
.
position_
)
)
;
return
Ok
(
)
;
}
[
&
tag
]
(
const
BinASTTokenReaderBase
:
:
RootContext
&
)
-
>
JS
:
:
Result
<
Ok
>
{
tag
=
BinASTKind
:
:
Script
;
return
Ok
(
)
;
}
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterSum
(
BinASTKind
&
tag
const
FieldOrListContext
&
context
)
{
return
context
.
match
(
[
this
&
tag
]
(
const
BinASTTokenReaderBase
:
:
FieldContext
&
asFieldContext
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_TRY_VAR
(
tag
readTagFromTable
(
asFieldContext
.
position_
)
)
;
return
Ok
(
)
;
}
[
this
&
tag
]
(
const
BinASTTokenReaderBase
:
:
ListContext
&
asListContext
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_TRY_VAR
(
tag
readTagFromTable
(
asListContext
.
position_
)
)
;
return
Ok
(
)
;
}
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterSum
(
BinASTKind
&
tag
const
RootContext
&
context
)
{
tag
=
BinASTKind
:
:
Script
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterSum
(
BinASTKind
&
tag
const
ListContext
&
context
)
{
MOZ_TRY_VAR
(
tag
readTagFromTable
(
context
.
position_
)
)
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterSum
(
BinASTKind
&
tag
const
FieldContext
&
context
)
{
MOZ_TRY_VAR
(
tag
readTagFromTable
(
context
.
position_
)
)
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
BinASTTokenReaderContext
:
:
enterList
(
uint32_t
&
items
const
ListContext
&
context
)
{
const
auto
identity
=
context
.
content_
;
const
auto
&
table
=
dictionary_
.
tableForListLength
(
identity
)
;
BINJS_MOZ_TRY_DECL
(
bits_
bitBuffer
.
getHuffmanLookup
<
Compression
:
:
No
>
(
*
this
)
)
;
const
auto
&
tableForLookup
=
table
.
as
<
HuffmanTableExplicitSymbolsListLength
>
(
)
;
const
auto
result
=
tableForLookup
.
lookup
(
bits_
)
;
if
(
MOZ_UNLIKELY
(
!
result
.
isFound
(
)
)
)
{
return
raiseInvalidValue
(
)
;
}
bitBuffer
.
advanceBitBuffer
<
Compression
:
:
No
>
(
result
.
bitLength
(
)
)
;
items
=
result
.
value
(
)
.
toListLength
(
)
;
return
Ok
(
)
;
}
template
<
Compression
compression
>
JS
:
:
Result
<
uint32_t
>
BinASTTokenReaderContext
:
:
readVarU32
(
)
{
uint32_t
result
=
0
;
uint32_t
shift
=
0
;
while
(
true
)
{
MOZ_ASSERT
(
shift
<
32
)
;
uint32_t
byte
;
MOZ_TRY_VAR
(
byte
readByte
<
compression
>
(
)
)
;
const
uint32_t
newResult
=
result
|
(
byte
&
0x7f
)
<
<
shift
;
if
(
MOZ_UNLIKELY
(
newResult
<
result
)
)
{
return
raiseError
(
"
Overflow
during
readVarU32
"
)
;
}
result
=
newResult
;
shift
+
=
7
;
if
(
(
byte
&
0x80
)
=
=
0
)
{
return
result
;
}
if
(
MOZ_UNLIKELY
(
shift
>
=
32
)
)
{
return
raiseError
(
"
Overflow
during
readVarU32
"
)
;
}
}
}
JS
:
:
Result
<
uint32_t
>
BinASTTokenReaderContext
:
:
readUnpackedLong
(
)
{
uint8_t
bytes
[
4
]
;
uint32_t
length
=
4
;
MOZ_TRY
(
(
readBuf
<
Compression
:
:
No
EndOfFilePolicy
:
:
RaiseError
>
(
bytes
length
)
)
)
;
const
uint32_t
result
=
uint32_t
(
bytes
[
0
]
)
<
<
24
|
uint32_t
(
bytes
[
1
]
)
<
<
16
|
uint32_t
(
bytes
[
2
]
)
<
<
8
|
uint32_t
(
bytes
[
3
]
)
;
return
result
;
}
HuffmanKey
:
:
HuffmanKey
(
const
uint32_t
bits
const
uint8_t
bitLength
)
:
bits_
(
bits
)
bitLength_
(
bitLength
)
{
MOZ_ASSERT
(
bitLength_
<
=
MAX_PREFIX_BIT_LENGTH
)
;
MOZ_ASSERT_IF
(
bitLength_
!
=
32
bits
>
>
bitLength
=
=
0
)
;
}
GenericHuffmanTable
:
:
Iterator
:
:
Iterator
(
typename
SingleEntryHuffmanTable
:
:
Iterator
&
&
iterator
)
:
implementation_
(
std
:
:
move
(
iterator
)
)
{
}
GenericHuffmanTable
:
:
Iterator
:
:
Iterator
(
typename
SingleLookupHuffmanTable
:
:
Iterator
&
&
iterator
)
:
implementation_
(
std
:
:
move
(
iterator
)
)
{
}
GenericHuffmanTable
:
:
Iterator
:
:
Iterator
(
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
&
iterator
)
:
implementation_
(
std
:
:
move
(
iterator
)
)
{
}
GenericHuffmanTable
:
:
Iterator
:
:
Iterator
(
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
&
iterator
)
:
implementation_
(
std
:
:
move
(
iterator
)
)
{
}
void
GenericHuffmanTable
:
:
Iterator
:
:
operator
+
+
(
)
{
implementation_
.
match
(
[
]
(
typename
SingleEntryHuffmanTable
:
:
Iterator
&
iterator
)
{
iterator
.
operator
+
+
(
)
;
}
[
]
(
typename
SingleLookupHuffmanTable
:
:
Iterator
&
iterator
)
{
iterator
.
operator
+
+
(
)
;
}
[
]
(
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
iterator
.
operator
+
+
(
)
;
}
[
]
(
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
iterator
.
operator
+
+
(
)
;
}
)
;
}
bool
GenericHuffmanTable
:
:
Iterator
:
:
operator
=
=
(
const
GenericHuffmanTable
:
:
Iterator
&
other
)
const
{
return
implementation_
.
match
(
[
other
]
(
const
typename
SingleEntryHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
=
=
other
.
implementation_
.
template
as
<
typename
SingleEntryHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
SingleLookupHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
=
=
other
.
implementation_
.
template
as
<
typename
SingleLookupHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
=
=
other
.
implementation_
.
template
as
<
typename
TwoLookupsHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
=
=
other
.
implementation_
.
template
as
<
typename
ThreeLookupsHuffmanTable
:
:
Iterator
>
(
)
;
}
)
;
}
bool
GenericHuffmanTable
:
:
Iterator
:
:
operator
!
=
(
const
GenericHuffmanTable
:
:
Iterator
&
other
)
const
{
return
implementation_
.
match
(
[
other
]
(
const
typename
SingleEntryHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
!
=
other
.
implementation_
.
template
as
<
typename
SingleEntryHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
SingleLookupHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
!
=
other
.
implementation_
.
template
as
<
typename
SingleLookupHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
!
=
other
.
implementation_
.
template
as
<
typename
TwoLookupsHuffmanTable
:
:
Iterator
>
(
)
;
}
[
other
]
(
const
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
!
=
other
.
implementation_
.
template
as
<
typename
ThreeLookupsHuffmanTable
:
:
Iterator
>
(
)
;
}
)
;
}
const
BinASTSymbol
*
GenericHuffmanTable
:
:
Iterator
:
:
operator
*
(
)
const
{
return
implementation_
.
match
(
[
]
(
const
typename
SingleEntryHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
*
(
)
;
}
[
]
(
const
typename
SingleLookupHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
*
(
)
;
}
[
]
(
const
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
*
(
)
;
}
[
]
(
const
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
*
(
)
;
}
)
;
}
const
BinASTSymbol
*
GenericHuffmanTable
:
:
Iterator
:
:
operator
-
>
(
)
const
{
return
implementation_
.
match
(
[
]
(
const
typename
SingleEntryHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
-
>
(
)
;
}
[
]
(
const
typename
SingleLookupHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
-
>
(
)
;
}
[
]
(
const
typename
TwoLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
-
>
(
)
;
}
[
]
(
const
typename
ThreeLookupsHuffmanTable
:
:
Iterator
&
iterator
)
{
return
iterator
.
operator
-
>
(
)
;
}
)
;
}
GenericHuffmanTable
:
:
GenericHuffmanTable
(
JSContext
*
)
:
implementation_
(
HuffmanTableUnreachable
{
}
)
{
}
JS
:
:
Result
<
Ok
>
GenericHuffmanTable
:
:
initComplete
(
)
{
return
implementation_
.
match
(
[
]
(
SingleEntryHuffmanTable
&
implementation
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_CRASH
(
"
SingleEntryHuffmanTable
shouldn
'
t
have
multiple
entries
!
"
)
;
}
[
]
(
SingleLookupHuffmanTable
&
implementation
)
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
initComplete
(
)
;
}
[
]
(
TwoLookupsHuffmanTable
&
implementation
)
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
initComplete
(
)
;
}
[
]
(
ThreeLookupsHuffmanTable
&
implementation
)
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
initComplete
(
)
;
}
[
]
(
HuffmanTableUnreachable
&
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_CRASH
(
"
GenericHuffmanTable
is
unitialized
!
"
)
;
}
)
;
}
typename
GenericHuffmanTable
:
:
Iterator
GenericHuffmanTable
:
:
begin
(
)
const
{
return
implementation_
.
match
(
[
]
(
const
SingleEntryHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
begin
(
)
)
;
}
[
]
(
const
SingleLookupHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
begin
(
)
)
;
}
[
]
(
const
TwoLookupsHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
begin
(
)
)
;
}
[
]
(
const
ThreeLookupsHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
begin
(
)
)
;
}
[
]
(
const
HuffmanTableUnreachable
&
)
-
>
GenericHuffmanTable
:
:
Iterator
{
MOZ_CRASH
(
"
GenericHuffmanTable
is
unitialized
!
"
)
;
}
)
;
}
typename
GenericHuffmanTable
:
:
Iterator
GenericHuffmanTable
:
:
end
(
)
const
{
return
implementation_
.
match
(
[
]
(
const
SingleEntryHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
end
(
)
)
;
}
[
]
(
const
SingleLookupHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
end
(
)
)
;
}
[
]
(
const
TwoLookupsHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
end
(
)
)
;
}
[
]
(
const
ThreeLookupsHuffmanTable
&
implementation
)
-
>
GenericHuffmanTable
:
:
Iterator
{
return
Iterator
(
implementation
.
end
(
)
)
;
}
[
]
(
const
HuffmanTableUnreachable
&
)
-
>
GenericHuffmanTable
:
:
Iterator
{
MOZ_CRASH
(
"
GenericHuffmanTable
is
unitialized
!
"
)
;
}
)
;
}
JS
:
:
Result
<
Ok
>
GenericHuffmanTable
:
:
initWithSingleValue
(
JSContext
*
cx
const
BinASTSymbol
&
value
)
{
MOZ_ASSERT
(
implementation_
.
template
is
<
HuffmanTableUnreachable
>
(
)
)
;
implementation_
=
{
mozilla
:
:
VariantType
<
SingleEntryHuffmanTable
>
{
}
value
}
;
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
GenericHuffmanTable
:
:
initStart
(
JSContext
*
cx
size_t
numberOfSymbols
uint8_t
largestBitLength
)
{
static_assert
(
MAX_CODE_BIT_LENGTH
<
=
ThreeLookupsHuffmanTable
:
:
MAX_BIT_LENGTH
"
ThreeLookupsHuffmanTable
cannot
hold
all
bit
lengths
"
)
;
MOZ_ASSERT
(
implementation_
.
template
is
<
HuffmanTableUnreachable
>
(
)
)
;
if
(
largestBitLength
<
=
SingleLookupHuffmanTable
:
:
MAX_BIT_LENGTH
)
{
implementation_
=
{
mozilla
:
:
VariantType
<
SingleLookupHuffmanTable
>
{
}
cx
SingleLookupHuffmanTable
:
:
Use
:
:
ToplevelTable
}
;
return
implementation_
.
template
as
<
SingleLookupHuffmanTable
>
(
)
.
initStart
(
cx
numberOfSymbols
largestBitLength
)
;
}
if
(
largestBitLength
<
=
TwoLookupsHuffmanTable
:
:
MAX_BIT_LENGTH
)
{
implementation_
=
{
mozilla
:
:
VariantType
<
TwoLookupsHuffmanTable
>
{
}
cx
}
;
return
implementation_
.
template
as
<
TwoLookupsHuffmanTable
>
(
)
.
initStart
(
cx
numberOfSymbols
largestBitLength
)
;
}
implementation_
=
{
mozilla
:
:
VariantType
<
ThreeLookupsHuffmanTable
>
{
}
cx
}
;
return
implementation_
.
template
as
<
ThreeLookupsHuffmanTable
>
(
)
.
initStart
(
cx
numberOfSymbols
largestBitLength
)
;
}
JS
:
:
Result
<
Ok
>
GenericHuffmanTable
:
:
addSymbol
(
uint32_t
bits
uint8_t
bitLength
const
BinASTSymbol
&
value
)
{
return
implementation_
.
match
(
[
]
(
SingleEntryHuffmanTable
&
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_CRASH
(
"
SingleEntryHuffmanTable
shouldn
'
t
have
multiple
entries
!
"
)
;
return
Ok
(
)
;
}
[
bits
bitLength
value
]
(
SingleLookupHuffmanTable
&
implementation
)
mutable
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
addSymbol
(
bits
bitLength
value
)
;
}
[
bits
bitLength
value
]
(
TwoLookupsHuffmanTable
&
implementation
)
mutable
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
addSymbol
(
bits
bitLength
value
)
;
}
[
bits
bitLength
value
=
value
]
(
ThreeLookupsHuffmanTable
&
implementation
)
mutable
-
>
JS
:
:
Result
<
Ok
>
{
return
implementation
.
addSymbol
(
bits
bitLength
value
)
;
}
[
]
(
HuffmanTableUnreachable
&
)
-
>
JS
:
:
Result
<
Ok
>
{
MOZ_CRASH
(
"
GenericHuffmanTable
is
unitialized
!
"
)
;
return
Ok
(
)
;
}
)
;
}
HuffmanLookupResult
GenericHuffmanTable
:
:
lookup
(
HuffmanLookup
key
)
const
{
return
implementation_
.
match
(
[
key
]
(
const
SingleEntryHuffmanTable
&
implementation
)
-
>
HuffmanLookupResult
{
return
implementation
.
lookup
(
key
)
;
}
[
key
]
(
const
SingleLookupHuffmanTable
&
implementation
)
-
>
HuffmanLookupResult
{
return
implementation
.
lookup
(
key
)
;
}
[
key
]
(
const
TwoLookupsHuffmanTable
&
implementation
)
-
>
HuffmanLookupResult
{
return
implementation
.
lookup
(
key
)
;
}
[
key
]
(
const
ThreeLookupsHuffmanTable
&
implementation
)
-
>
HuffmanLookupResult
{
return
implementation
.
lookup
(
key
)
;
}
[
]
(
const
HuffmanTableUnreachable
&
)
-
>
HuffmanLookupResult
{
MOZ_CRASH
(
"
GenericHuffmanTable
is
unitialized
!
"
)
;
}
)
;
}
template
<
int
N
>
JS
:
:
Result
<
Ok
>
NaiveHuffmanTable
<
N
>
:
:
initWithSingleValue
(
JSContext
*
cx
const
BinASTSymbol
&
value
)
{
MOZ_ASSERT
(
values_
.
empty
(
)
)
;
if
(
MOZ_UNLIKELY
(
!
values_
.
append
(
HuffmanEntry
(
0
0
value
)
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
return
Ok
(
)
;
}
template
<
int
N
>
JS
:
:
Result
<
Ok
>
NaiveHuffmanTable
<
N
>
:
:
initStart
(
JSContext
*
cx
size_t
numberOfSymbols
uint8_t
)
{
MOZ_ASSERT
(
values_
.
empty
(
)
)
;
if
(
MOZ_UNLIKELY
(
!
values_
.
initCapacity
(
numberOfSymbols
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
return
Ok
(
)
;
}
template
<
int
N
>
JS
:
:
Result
<
Ok
>
NaiveHuffmanTable
<
N
>
:
:
initComplete
(
)
{
MOZ_ASSERT
(
values_
.
length
(
)
<
=
N
)
;
return
Ok
(
)
;
}
template
<
int
N
>
JS
:
:
Result
<
Ok
>
NaiveHuffmanTable
<
N
>
:
:
addSymbol
(
uint32_t
bits
uint8_t
bitLength
const
BinASTSymbol
&
value
)
{
MOZ_ASSERT
(
bitLength
!
=
0
"
Adding
a
symbol
with
a
bitLength
of
0
doesn
'
t
make
sense
.
"
)
;
MOZ_ASSERT
(
values_
.
empty
(
)
|
|
values_
.
back
(
)
.
key
(
)
.
bitLength_
<
=
bitLength
"
Symbols
must
be
ranked
by
increasing
bits
length
"
)
;
MOZ_ASSERT_IF
(
bitLength
!
=
32
bits
>
>
bitLength
=
=
0
)
;
MOZ_ALWAYS_TRUE
(
values_
.
emplaceBack
(
bits
bitLength
value
)
)
;
return
Ok
(
)
;
}
template
<
int
N
>
HuffmanLookupResult
NaiveHuffmanTable
<
N
>
:
:
lookup
(
HuffmanLookup
key
)
const
{
for
(
const
auto
&
iter
:
values_
)
{
if
(
iter
.
key
(
)
.
bitLength_
>
key
.
bitLength_
)
{
break
;
}
const
uint32_t
keyBits
=
key
.
leadingBits
(
iter
.
key
(
)
.
bitLength_
)
;
if
(
keyBits
=
=
iter
.
key
(
)
.
bits_
)
{
return
HuffmanLookupResult
:
:
found
(
iter
.
key
(
)
.
bitLength_
&
iter
.
value
(
)
)
;
}
}
return
HuffmanLookupResult
:
:
notFound
(
)
;
}
SingleEntryHuffmanTable
:
:
Iterator
:
:
Iterator
(
const
BinASTSymbol
*
position
)
:
position_
(
position
)
{
}
void
SingleEntryHuffmanTable
:
:
Iterator
:
:
operator
+
+
(
)
{
position_
=
nullptr
;
}
const
BinASTSymbol
*
SingleEntryHuffmanTable
:
:
Iterator
:
:
operator
*
(
)
const
{
return
position_
;
}
const
BinASTSymbol
*
SingleEntryHuffmanTable
:
:
Iterator
:
:
operator
-
>
(
)
const
{
return
position_
;
}
bool
SingleEntryHuffmanTable
:
:
Iterator
:
:
operator
=
=
(
const
Iterator
&
other
)
const
{
return
position_
=
=
other
.
position_
;
}
bool
SingleEntryHuffmanTable
:
:
Iterator
:
:
operator
!
=
(
const
Iterator
&
other
)
const
{
return
position_
!
=
other
.
position_
;
}
HuffmanLookupResult
SingleEntryHuffmanTable
:
:
lookup
(
HuffmanLookup
key
)
const
{
return
HuffmanLookupResult
:
:
found
(
0
&
value_
)
;
}
SingleLookupHuffmanTable
:
:
Iterator
:
:
Iterator
(
const
HuffmanEntry
*
position
)
:
position_
(
position
)
{
}
void
SingleLookupHuffmanTable
:
:
Iterator
:
:
operator
+
+
(
)
{
position_
+
+
;
}
const
BinASTSymbol
*
SingleLookupHuffmanTable
:
:
Iterator
:
:
operator
*
(
)
const
{
return
&
position_
-
>
value
(
)
;
}
const
BinASTSymbol
*
SingleLookupHuffmanTable
:
:
Iterator
:
:
operator
-
>
(
)
const
{
return
&
position_
-
>
value
(
)
;
}
bool
SingleLookupHuffmanTable
:
:
Iterator
:
:
operator
=
=
(
const
Iterator
&
other
)
const
{
return
position_
=
=
other
.
position_
;
}
bool
SingleLookupHuffmanTable
:
:
Iterator
:
:
operator
!
=
(
const
Iterator
&
other
)
const
{
return
position_
!
=
other
.
position_
;
}
JS
:
:
Result
<
Ok
>
SingleLookupHuffmanTable
:
:
initStart
(
JSContext
*
cx
size_t
numberOfSymbols
uint8_t
largestBitLength
)
{
MOZ_ASSERT_IF
(
largestBitLength
!
=
32
(
uint32_t
(
1
)
<
<
largestBitLength
)
-
1
<
=
mozilla
:
:
MaxValue
<
InternalIndex
>
:
:
value
)
;
MOZ_ASSERT
(
values_
.
empty
(
)
)
;
largestBitLength_
=
largestBitLength
;
if
(
MOZ_UNLIKELY
(
!
values_
.
initCapacity
(
numberOfSymbols
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
const
size_t
saturatedLength
=
1
<
<
largestBitLength_
;
if
(
MOZ_UNLIKELY
(
!
saturated_
.
initCapacity
(
saturatedLength
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
for
(
size_t
i
=
0
;
i
<
saturatedLength
;
+
+
i
)
{
saturated_
.
infallibleAppend
(
InternalIndex
(
-
1
)
)
;
}
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
SingleLookupHuffmanTable
:
:
initComplete
(
)
{
MOZ_ASSERT
(
largestBitLength_
<
=
MAX_CODE_BIT_LENGTH
)
;
if
(
values_
.
length
(
)
=
=
0
)
{
MOZ_ASSERT
(
largestBitLength_
=
=
0
)
;
return
Ok
(
)
;
}
#
ifdef
DEBUG
bool
foundMaxBitLength
=
false
;
for
(
size_t
i
=
0
;
i
<
saturated_
.
length
(
)
;
+
+
i
)
{
const
uint8_t
index
=
saturated_
[
i
]
;
if
(
use_
!
=
Use
:
:
ToplevelTable
)
{
if
(
index
>
=
values_
.
length
(
)
)
{
continue
;
}
}
MOZ_ASSERT
(
values_
[
index
]
.
key
(
)
.
bitLength_
<
=
largestBitLength_
)
;
if
(
values_
[
index
]
.
key
(
)
.
bitLength_
=
=
largestBitLength_
)
{
foundMaxBitLength
=
true
;
}
}
MOZ_ASSERT
(
foundMaxBitLength
)
;
#
endif
return
Ok
(
)
;
}
JS
:
:
Result
<
Ok
>
SingleLookupHuffmanTable
:
:
addSymbol
(
uint32_t
bits
uint8_t
bitLength
const
BinASTSymbol
&
value
)
{
MOZ_ASSERT_IF
(
largestBitLength_
!
=
0
bitLength
!
=
0
)
;
MOZ_ASSERT_IF
(
bitLength
!
=
32
bits
>
>
bitLength
=
=
0
)
;
MOZ_ASSERT
(
bitLength
<
=
largestBitLength_
)
;
const
size_t
index
=
values_
.
length
(
)
;
values_
.
infallibleEmplaceBack
(
bits
bitLength
value
)
;
const
HuffmanLookup
base
(
bits
bitLength
)
;
for
(
size_t
i
:
base
.
suffixes
(
largestBitLength_
)
)
{
saturated_
[
i
]
=
index
;
}
return
Ok
(
)
;
}
HuffmanLookupResult
SingleLookupHuffmanTable
:
:
lookup
(
HuffmanLookup
key
)
const
{
if
(
values_
.
length
(
)
=
=
0
)
{
return
HuffmanLookupResult
:
:
notFound
(
)
;
}
const
uint32_t
bits
=
key
.
leadingBits
(
largestBitLength_
)
;
const
size_t
index
=
saturated_
[
bits
]
;
if
(
index
>
=
values_
.
length
(
)
)
{
MOZ_ASSERT
(
use_
=
=
Use
:
:
ShortKeys
)
;
return
HuffmanLookupResult
:
:
notFound
(
)
;
}
const
auto
&
entry
=
values_
[
index
]
;
return
HuffmanLookupResult
:
:
found
(
entry
.
key
(
)
.
bitLength_
&
entry
.
value
(
)
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
Iterator
(
const
HuffmanEntry
*
position
)
:
position_
(
position
)
{
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
void
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
operator
+
+
(
)
{
position_
+
+
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
const
BinASTSymbol
*
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
operator
*
(
)
const
{
return
&
position_
-
>
value
(
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
const
BinASTSymbol
*
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
operator
-
>
(
)
const
{
return
&
position_
-
>
value
(
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
bool
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
operator
=
=
(
const
Iterator
&
other
)
const
{
return
position_
=
=
other
.
position_
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
bool
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
Iterator
:
:
operator
!
=
(
const
Iterator
&
other
)
const
{
return
position_
!
=
other
.
position_
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
JS
:
:
Result
<
Ok
>
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
initStart
(
JSContext
*
cx
size_t
numberOfSymbols
uint8_t
largestBitLength
)
{
static_assert
(
PrefixBitLength
<
MAX_CODE_BIT_LENGTH
"
Invalid
PrefixBitLength
"
)
;
MOZ_ASSERT
(
values_
.
empty
(
)
)
;
MOZ_ASSERT
(
suffixTables_
.
empty
(
)
)
;
largestBitLength_
=
largestBitLength
;
if
(
MOZ_UNLIKELY
(
!
values_
.
initCapacity
(
numberOfSymbols
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
if
(
MOZ_UNLIKELY
(
!
suffixTables_
.
initCapacity
(
1
<
<
PrefixBitLength
)
)
)
{
return
cx
-
>
alreadyReportedError
(
)
;
}
return
Ok
(
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
JS
:
:
Result
<
Ok
>
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
addSymbol
(
uint32_t
bits
uint8_t
bitLength
const
BinASTSymbol
&
value
)
{
MOZ_ASSERT_IF
(
largestBitLength_
!
=
0
bitLength
!
=
0
)
;
MOZ_ASSERT
(
values_
.
empty
(
)
|
|
values_
.
back
(
)
.
key
(
)
.
bitLength_
<
=
bitLength
"
Symbols
must
be
ranked
by
increasing
bits
length
"
)
;
MOZ_ASSERT_IF
(
bitLength
!
=
32
bits
>
>
bitLength
=
=
0
)
;
values_
.
infallibleEmplaceBack
(
bits
bitLength
value
)
;
return
Ok
(
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
JS
:
:
Result
<
Ok
>
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
initComplete
(
)
{
struct
Bucket
{
Bucket
(
)
:
largestBitLength_
(
0
)
numberOfSymbols_
(
0
)
{
}
;
uint8_t
largestBitLength_
;
uint32_t
numberOfSymbols_
;
void
addSymbol
(
uint8_t
bitLength
)
{
+
+
numberOfSymbols_
;
if
(
bitLength
>
largestBitLength_
)
{
largestBitLength_
=
bitLength
;
}
}
}
;
Vector
<
Bucket
>
buckets
{
cx_
}
;
BINJS_TRY
(
buckets
.
resize
(
1
<
<
PrefixBitLength
)
)
;
Bucket
shortKeysBucket
;
for
(
const
auto
&
entry
:
values_
)
{
if
(
entry
.
key
(
)
.
bitLength_
<
=
SingleLookupHuffmanTable
:
:
MAX_BIT_LENGTH
)
{
shortKeysBucket
.
addSymbol
(
entry
.
key
(
)
.
bitLength_
)
;
continue
;
}
const
HuffmanLookup
lookup
(
entry
.
key
(
)
.
bits_
entry
.
key
(
)
.
bitLength_
)
;
const
auto
split
=
lookup
.
split
(
PrefixBitLength
)
;
MOZ_ASSERT_IF
(
split
.
suffix_
.
bitLength_
!
=
32
split
.
suffix_
.
bits_
>
>
split
.
suffix_
.
bitLength_
=
=
0
)
;
for
(
const
auto
index
:
lookup
.
suffixes
(
PrefixBitLength
)
)
{
Bucket
&
bucket
=
buckets
[
index
]
;
bucket
.
addSymbol
(
split
.
suffix_
.
bitLength_
)
;
}
}
for
(
auto
&
bucket
:
buckets
)
{
Subtable
sub
(
cx_
)
;
if
(
bucket
.
numberOfSymbols_
!
=
0
)
{
MOZ_TRY
(
sub
.
initStart
(
cx_
bucket
.
numberOfSymbols_
bucket
.
largestBitLength_
)
)
;
}
BINJS_TRY
(
suffixTables_
.
append
(
std
:
:
move
(
sub
)
)
)
;
}
MOZ_TRY
(
shortKeys_
.
initStart
(
cx_
shortKeysBucket
.
numberOfSymbols_
shortKeysBucket
.
largestBitLength_
)
)
;
for
(
size_t
i
=
0
;
i
<
values_
.
length
(
)
;
+
+
i
)
{
const
auto
&
entry
=
values_
[
i
]
;
if
(
entry
.
key
(
)
.
bitLength_
<
=
SingleLookupHuffmanTable
:
:
MAX_BIT_LENGTH
)
{
MOZ_TRY
(
shortKeys_
.
addSymbol
(
entry
.
key
(
)
.
bits_
entry
.
key
(
)
.
bitLength_
BinASTSymbol
:
:
fromSubtableIndex
(
i
)
)
)
;
continue
;
}
const
HuffmanLookup
lookup
(
entry
.
key
(
)
.
bits_
entry
.
key
(
)
.
bitLength_
)
;
const
auto
split
=
lookup
.
split
(
PrefixBitLength
)
;
MOZ_ASSERT_IF
(
split
.
suffix_
.
bitLength_
!
=
32
split
.
suffix_
.
bits_
>
>
split
.
suffix_
.
bitLength_
=
=
0
)
;
for
(
const
auto
index
:
lookup
.
suffixes
(
PrefixBitLength
)
)
{
auto
&
sub
=
suffixTables_
[
index
]
;
MOZ_TRY
(
sub
.
addSymbol
(
split
.
suffix_
.
bits_
split
.
suffix_
.
bitLength_
BinASTSymbol
:
:
fromSubtableIndex
(
i
)
)
)
;
}
}
MOZ_TRY
(
shortKeys_
.
initComplete
(
)
)
;
for
(
size_t
i
=
0
;
i
<
buckets
.
length
(
)
;
+
+
i
)
{
if
(
buckets
[
i
]
.
numberOfSymbols_
=
=
0
)
{
continue
;
}
auto
&
sub
=
suffixTables_
[
i
]
;
MOZ_TRY
(
sub
.
initComplete
(
)
)
;
}
return
Ok
(
)
;
}
template
<
typename
Subtable
uint8_t
PrefixBitLength
>
HuffmanLookupResult
MultiLookupHuffmanTable
<
Subtable
PrefixBitLength
>
:
:
lookup
(
HuffmanLookup
key
)
const
{
{
auto
subResult
=
shortKeys_
.
lookup
(
key
)
;
if
(
subResult
.
isFound
(
)
)
{
const
auto
&
result
=
values_
[
subResult
.
value
(
)
.
toSubtableIndex
(
)
]
;
return
HuffmanLookupResult
:
:
found
(
result
.
key
(
)
.
bitLength_
&
result
.
value
(
)
)
;
}
}
const
auto
split
=
key
.
split
(
PrefixBitLength
)
;
if
(
split
.
prefix_
.
bits_
>
=
suffixTables_
.
length
(
)
)
{
return
HuffmanLookupResult
:
:
notFound
(
)
;
}
const
Subtable
&
subtable
=
suffixTables_
[
split
.
prefix_
.
bits_
]
;
auto
subResult
=
subtable
.
lookup
(
split
.
suffix_
)
;
if
(
!
subResult
.
isFound
(
)
)
{
return
HuffmanLookupResult
:
:
notFound
(
)
;
}
const
auto
&
result
=
values_
[
subResult
.
value
(
)
.
toSubtableIndex
(
)
]
;
return
HuffmanLookupResult
:
:
found
(
result
.
key
(
)
.
bitLength_
&
result
.
value
(
)
)
;
}
const
size_t
SUM_LIMITS
[
]
{
#
define
WITH_SUM
(
_ENUM_NAME
_HUMAN_NAME
MACRO_NAME
_TYPE_NAME
)
\
BINAST_SUM_
#
#
MACRO_NAME
#
#
_LIMIT
FOR_EACH_BIN_SUM
(
WITH_SUM
)
#
undef
WITH_SUM
}
;
#
define
WITH_SUM_CONTENTS
(
_SUM_NAME
_INDEX
INTERFACE_NAME
_MACRO_NAME
\
_SPEC_NAME
)
\
BinASTKind
:
:
INTERFACE_NAME
#
define
WITH_SUM
(
_ENUM_NAME
_HUMAN_NAME
MACRO_NAME
_TYPE_NAME
)
\
const
BinASTKind
SUM_RESOLUTION_
#
#
MACRO_NAME
[
]
{
\
FOR_EACH_BIN_INTERFACE_IN_SUM_
#
#
MACRO_NAME
(
WITH_SUM_CONTENTS
)
}
;
FOR_EACH_BIN_SUM
(
WITH_SUM
)
#
undef
WITH_SUM
#
undef
WITH_SUM_CONTENTS
const
BinASTKind
*
SUM_RESOLUTIONS
[
BINAST_NUMBER_OF_SUM_TYPES
]
{
#
define
WITH_SUM
(
_ENUM_NAME
_HUMAN_NAME
MACRO_NAME
_TYPE_NAME
)
\
SUM_RESOLUTION_
#
#
MACRO_NAME
FOR_EACH_BIN_SUM
(
WITH_SUM
)
#
undef
WITH_SUM
}
;
const
size_t
STRING_ENUM_LIMITS
[
]
{
#
define
WITH_ENUM
(
name
_
MACRO_NAME
)
BIN_AST_STRING_ENUM_
#
#
MACRO_NAME
#
#
_LIMIT
FOR_EACH_BIN_STRING_ENUM
(
WITH_ENUM
)
#
undef
WITH_ENUM
}
;
#
define
WITH_ENUM_CONTENTS
(
_ENUM_NAME
VARIANT_NAME
_HUMAN_NAME
)
\
BinASTVariant
:
:
VARIANT_NAME
#
define
WITH_ENUM
(
_ENUM_NAME
_
MACRO_NAME
)
\
const
BinASTVariant
STRING_ENUM_RESOLUTION_
#
#
MACRO_NAME
[
]
{
\
FOR_EACH_BIN_VARIANT_IN_STRING_ENUM_
#
#
MACRO_NAME
#
#
_BY_WEBIDL_ORDER
(
\
WITH_ENUM_CONTENTS
)
}
;
FOR_EACH_BIN_STRING_ENUM
(
WITH_ENUM
)
#
undef
WITH_ENUM
#
undef
WITH_ENUM_CONTENTS
const
BinASTVariant
*
STRING_ENUM_RESOLUTIONS
[
BINASTSTRINGENUM_LIMIT
]
{
#
define
WITH_ENUM
(
name
_
MACRO_NAME
)
STRING_ENUM_RESOLUTION_
#
#
MACRO_NAME
FOR_EACH_BIN_STRING_ENUM
(
WITH_ENUM
)
#
undef
WITH_ENUM
}
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
run
(
size_t
initialCapacity
)
{
BINJS_TRY
(
stack_
.
reserve
(
initialCapacity
)
)
;
MOZ_TRY
(
pushFields
(
BinASTKind
:
:
Script
)
)
;
while
(
stack_
.
length
(
)
>
0
)
{
const
Entry
entry
=
stack_
.
popCopy
(
)
;
MOZ_TRY
(
entry
.
match
(
ReadPoppedEntryMatcher
(
*
this
)
)
)
;
}
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
Boolean
&
)
{
return
2
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
Boolean
&
size_t
index
)
{
MOZ_ASSERT
(
index
<
2
)
;
return
BinASTSymbol
:
:
fromBool
(
index
!
=
0
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
Boolean
>
(
Boolean
:
:
Table
&
table
const
Boolean
&
entry
)
{
uint8_t
indexByte
;
MOZ_TRY_VAR
(
indexByte
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
indexByte
>
=
2
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromBool
(
indexByte
!
=
0
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
MaybeInterface
&
)
{
return
2
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
MaybeInterface
&
entry
size_t
index
)
{
MOZ_ASSERT
(
index
<
2
)
;
return
BinASTSymbol
:
:
fromKind
(
index
=
=
0
?
BinASTKind
:
:
_Null
:
entry
.
kind_
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
MaybeInterface
>
(
MaybeInterface
:
:
Table
&
table
const
MaybeInterface
&
entry
)
{
uint8_t
indexByte
;
MOZ_TRY_VAR
(
indexByte
reader_
.
readByte
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
indexByte
>
=
2
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromKind
(
indexByte
=
=
0
?
BinASTKind
:
:
_Null
:
entry
.
kind_
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
Sum
&
sum
)
{
return
sum
.
maxNumberOfSymbols
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
Sum
&
entry
size_t
index
)
{
MOZ_ASSERT
(
index
<
entry
.
maxNumberOfSymbols
(
)
)
;
return
BinASTSymbol
:
:
fromKind
(
entry
.
interfaceAt
(
index
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
Sum
>
(
HuffmanTableIndexedSymbolsSum
&
table
const
Sum
&
sum
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
=
sum
.
maxNumberOfSymbols
(
)
)
)
{
return
raiseInvalidTableData
(
sum
.
identity_
)
;
}
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromKind
(
sum
.
interfaceAt
(
index
)
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
MaybeSum
&
sum
)
{
return
sum
.
maxNumberOfSymbols
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
MaybeSum
&
sum
size_t
index
)
{
MOZ_ASSERT
(
index
<
sum
.
maxNumberOfSymbols
(
)
)
;
return
BinASTSymbol
:
:
fromKind
(
sum
.
interfaceAt
(
index
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
MaybeSum
>
(
HuffmanTableIndexedSymbolsSum
&
table
const
MaybeSum
&
sum
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
=
sum
.
maxNumberOfSymbols
(
)
)
)
{
return
raiseInvalidTableData
(
sum
.
identity_
)
;
}
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromKind
(
sum
.
interfaceAt
(
index
)
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
Number
&
number
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_NUMBER_OF_SYMBOLS
)
)
{
return
raiseInvalidTableData
(
number
.
identity_
)
;
}
return
length
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
Number
&
number
size_t
)
{
uint8_t
bytes
[
8
]
;
MOZ_ASSERT
(
sizeof
(
bytes
)
=
=
sizeof
(
double
)
)
;
uint32_t
len
=
mozilla
:
:
ArrayLength
(
bytes
)
;
MOZ_TRY
(
(
reader_
.
readBuf
<
Compression
:
:
No
EndOfFilePolicy
:
:
RaiseError
>
(
reinterpret_cast
<
uint8_t
*
>
(
bytes
)
len
)
)
)
;
const
uint64_t
asInt
=
mozilla
:
:
BigEndian
:
:
readUint64
(
bytes
)
;
return
BinASTSymbol
:
:
fromDouble
(
JS
:
:
CanonicalizeNaN
(
mozilla
:
:
BitwiseCast
<
double
>
(
asInt
)
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
Number
>
(
HuffmanTableExplicitSymbolsF64
&
table
const
Number
&
number
)
{
BINJS_MOZ_TRY_DECL
(
value
readSymbol
(
number
0
)
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
value
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
List
&
list
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_NUMBER_OF_SYMBOLS
)
)
{
return
raiseInvalidTableData
(
list
.
identity_
)
;
}
return
length
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
List
&
list
size_t
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readUnpackedLong
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_LIST_LENGTH
)
)
{
return
raiseInvalidTableData
(
list
.
identity_
)
;
}
return
BinASTSymbol
:
:
fromListLength
(
length
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
List
>
(
HuffmanTableExplicitSymbolsListLength
&
table
const
List
&
list
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readUnpackedLong
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_LIST_LENGTH
)
)
{
return
raiseInvalidTableData
(
list
.
identity_
)
;
}
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromListLength
(
length
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
String
&
string
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_NUMBER_OF_SYMBOLS
|
|
length
>
reader_
.
metadata_
-
>
numStrings
(
)
)
)
{
return
raiseInvalidTableData
(
string
.
identity_
)
;
}
return
length
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
String
&
entry
size_t
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
reader_
.
metadata_
-
>
numStrings
(
)
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
return
BinASTSymbol
:
:
fromAtom
(
reader_
.
metadata_
-
>
getAtom
(
index
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
String
>
(
HuffmanTableIndexedSymbolsLiteralString
&
table
const
String
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
reader_
.
metadata_
-
>
numStrings
(
)
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
JSAtom
*
value
=
reader_
.
metadata_
-
>
getAtom
(
index
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromAtom
(
value
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
MaybeString
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_NUMBER_OF_SYMBOLS
|
|
length
>
reader_
.
metadata_
-
>
numStrings
(
)
+
1
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
return
length
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
MaybeString
&
entry
size_t
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
index
=
=
0
)
{
return
BinASTSymbol
:
:
fromAtom
(
nullptr
)
;
}
if
(
MOZ_UNLIKELY
(
index
>
reader_
.
metadata_
-
>
numStrings
(
)
+
1
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
return
BinASTSymbol
:
:
fromAtom
(
reader_
.
metadata_
-
>
getAtom
(
index
-
1
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
MaybeString
>
(
HuffmanTableIndexedSymbolsOptionalLiteralString
&
table
const
MaybeString
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
reader_
.
metadata_
-
>
numStrings
(
)
+
1
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
JSAtom
*
symbol
=
index
=
=
0
?
nullptr
:
reader_
.
metadata_
-
>
getAtom
(
index
-
1
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromAtom
(
symbol
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
StringEnum
&
entry
)
{
return
entry
.
maxNumberOfSymbols
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
StringEnum
&
entry
size_t
index
)
{
return
BinASTSymbol
:
:
fromVariant
(
entry
.
variantAt
(
index
)
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
StringEnum
>
(
HuffmanTableIndexedSymbolsStringEnum
&
table
const
StringEnum
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
index
>
entry
.
maxNumberOfSymbols
(
)
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
BinASTVariant
symbol
=
entry
.
variantAt
(
index
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromVariant
(
symbol
)
)
)
;
return
Ok
(
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
HuffmanPreludeReader
:
:
readNumberOfSymbols
(
const
UnsignedLong
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
length
reader_
.
readVarU32
<
Compression
:
:
No
>
(
)
)
;
if
(
MOZ_UNLIKELY
(
length
>
MAX_NUMBER_OF_SYMBOLS
)
)
{
return
raiseInvalidTableData
(
entry
.
identity_
)
;
}
return
length
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
BinASTSymbol
>
HuffmanPreludeReader
:
:
readSymbol
(
const
UnsignedLong
&
entry
size_t
)
{
BINJS_MOZ_TRY_DECL
(
result
reader_
.
readUnpackedLong
(
)
)
;
return
BinASTSymbol
:
:
fromUnsignedLong
(
result
)
;
}
template
<
>
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
HuffmanPreludeReader
:
:
readSingleValueTable
<
UnsignedLong
>
(
HuffmanTableExplicitSymbolsU32
&
table
const
UnsignedLong
&
entry
)
{
BINJS_MOZ_TRY_DECL
(
index
reader_
.
readUnpackedLong
(
)
)
;
MOZ_TRY
(
table
.
initWithSingleValue
(
cx_
BinASTSymbol
:
:
fromUnsignedLong
(
index
)
)
)
;
return
Ok
(
)
;
}
HuffmanDictionary
:
:
HuffmanDictionary
(
JSContext
*
cx
)
:
fields_
(
BINAST_PARAM_NUMBER_OF_INTERFACE_AND_FIELD
(
mozilla
:
:
AsVariant
(
HuffmanTableUnreachable
(
)
)
)
)
listLengths_
(
BINAST_PARAM_NUMBER_OF_LIST_TYPES
(
mozilla
:
:
AsVariant
(
HuffmanTableUnreachable
(
)
)
)
)
{
}
HuffmanTableValue
&
HuffmanDictionary
:
:
tableForField
(
NormalizedInterfaceAndField
index
)
{
return
fields_
[
static_cast
<
size_t
>
(
index
.
identity_
)
]
;
}
HuffmanTableListLength
&
HuffmanDictionary
:
:
tableForListLength
(
BinASTList
list
)
{
return
listLengths_
[
static_cast
<
size_t
>
(
list
)
]
;
}
uint32_t
HuffmanLookup
:
:
leadingBits
(
const
uint8_t
aBitLength
)
const
{
MOZ_ASSERT
(
aBitLength
<
=
bitLength_
)
;
const
uint32_t
result
=
(
aBitLength
=
=
0
)
?
0
:
bits_
>
>
uint32_t
(
bitLength_
-
aBitLength
)
;
return
result
;
}
Split
<
HuffmanLookup
>
HuffmanLookup
:
:
split
(
const
uint8_t
prefixLength
)
const
{
if
(
bitLength_
<
=
prefixLength
)
{
return
{
{
bits_
<
<
(
prefixLength
-
bitLength_
)
prefixLength
}
{
0
0
}
}
;
}
const
uint8_t
shift
=
bitLength_
-
prefixLength
;
switch
(
shift
)
{
case
0
:
return
{
{
bits_
prefixLength
}
{
0
0
}
}
;
case
32
:
return
{
{
0
prefixLength
}
{
bits_
shift
}
}
;
}
return
{
{
bits_
>
>
shift
prefixLength
}
{
bits_
&
(
mozilla
:
:
MaxValue
<
uint32_t
>
:
:
value
>
>
(
32
-
shift
)
)
shift
}
}
;
}
mozilla
:
:
detail
:
:
IntegerRange
<
size_t
>
HuffmanLookup
:
:
suffixes
(
uint8_t
expectedBitLength
)
const
{
if
(
expectedBitLength
<
=
bitLength_
)
{
const
uint8_t
shearing
=
bitLength_
-
expectedBitLength
;
const
size_t
first
=
size_t
(
bits_
)
>
>
shearing
;
const
size_t
last
=
first
;
return
mozilla
:
:
IntegerRange
<
size_t
>
(
first
last
+
1
)
;
}
const
uint8_t
padding
=
expectedBitLength
-
bitLength_
;
const
size_t
first
=
bits_
<
<
padding
;
const
size_t
last
=
first
+
(
size_t
(
-
1
)
>
>
(
8
*
sizeof
(
size_t
)
-
padding
)
)
;
return
mozilla
:
:
IntegerRange
<
size_t
>
(
first
last
+
1
)
;
}
}
}
