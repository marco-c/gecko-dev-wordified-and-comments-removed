#
ifndef
frontend_BytecodeEmitter_h
#
define
frontend_BytecodeEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
jsiter
.
h
"
#
include
"
jsopcode
.
h
"
#
include
"
jsscript
.
h
"
#
include
"
ds
/
InlineTable
.
h
"
#
include
"
frontend
/
EitherParser
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
namespace
js
{
namespace
frontend
{
class
CGConstList
{
Vector
<
Value
>
list
;
public
:
explicit
CGConstList
(
JSContext
*
cx
)
:
list
(
cx
)
{
}
MOZ_MUST_USE
bool
append
(
const
Value
&
v
)
{
MOZ_ASSERT_IF
(
v
.
isString
(
)
v
.
toString
(
)
-
>
isAtom
(
)
)
;
return
list
.
append
(
v
)
;
}
size_t
length
(
)
const
{
return
list
.
length
(
)
;
}
void
finish
(
ConstArray
*
array
)
;
}
;
struct
CGObjectList
{
uint32_t
length
;
ObjectBox
*
lastbox
;
CGObjectList
(
)
:
length
(
0
)
lastbox
(
nullptr
)
{
}
unsigned
add
(
ObjectBox
*
objbox
)
;
unsigned
indexOf
(
JSObject
*
obj
)
;
void
finish
(
ObjectArray
*
array
)
;
ObjectBox
*
find
(
uint32_t
index
)
;
}
;
struct
MOZ_STACK_CLASS
CGScopeList
{
Rooted
<
GCVector
<
Scope
*
>
>
vector
;
explicit
CGScopeList
(
JSContext
*
cx
)
:
vector
(
cx
GCVector
<
Scope
*
>
(
cx
)
)
{
}
bool
append
(
Scope
*
scope
)
{
return
vector
.
append
(
scope
)
;
}
uint32_t
length
(
)
const
{
return
vector
.
length
(
)
;
}
void
finish
(
ScopeArray
*
array
)
;
}
;
struct
CGTryNoteList
{
Vector
<
JSTryNote
>
list
;
explicit
CGTryNoteList
(
JSContext
*
cx
)
:
list
(
cx
)
{
}
MOZ_MUST_USE
bool
append
(
JSTryNoteKind
kind
uint32_t
stackDepth
size_t
start
size_t
end
)
;
size_t
length
(
)
const
{
return
list
.
length
(
)
;
}
void
finish
(
TryNoteArray
*
array
)
;
}
;
struct
CGScopeNote
:
public
ScopeNote
{
uint32_t
end
;
bool
startInPrologue
;
bool
endInPrologue
;
}
;
struct
CGScopeNoteList
{
Vector
<
CGScopeNote
>
list
;
explicit
CGScopeNoteList
(
JSContext
*
cx
)
:
list
(
cx
)
{
}
MOZ_MUST_USE
bool
append
(
uint32_t
scopeIndex
uint32_t
offset
bool
inPrologue
uint32_t
parent
)
;
void
recordEnd
(
uint32_t
index
uint32_t
offset
bool
inPrologue
)
;
size_t
length
(
)
const
{
return
list
.
length
(
)
;
}
void
finish
(
ScopeNoteArray
*
array
uint32_t
prologueLength
)
;
}
;
struct
CGYieldAndAwaitOffsetList
{
Vector
<
uint32_t
>
list
;
uint32_t
numYields
;
uint32_t
numAwaits
;
explicit
CGYieldAndAwaitOffsetList
(
JSContext
*
cx
)
:
list
(
cx
)
numYields
(
0
)
numAwaits
(
0
)
{
}
MOZ_MUST_USE
bool
append
(
uint32_t
offset
)
{
return
list
.
append
(
offset
)
;
}
size_t
length
(
)
const
{
return
list
.
length
(
)
;
}
void
finish
(
YieldAndAwaitOffsetArray
&
array
uint32_t
prologueLength
)
;
}
;
typedef
Vector
<
jsbytecode
0
>
BytecodeVector
;
typedef
Vector
<
jssrcnote
0
>
SrcNotesVector
;
struct
JumpTarget
{
ptrdiff_t
offset
;
}
;
struct
JumpList
{
JumpList
(
)
:
offset
(
-
1
)
{
}
ptrdiff_t
offset
;
void
push
(
jsbytecode
*
code
ptrdiff_t
jumpOffset
)
;
void
patchAll
(
jsbytecode
*
code
JumpTarget
target
)
;
}
;
enum
class
ValueUsage
{
WantValue
IgnoreValue
}
;
struct
MOZ_STACK_CLASS
BytecodeEmitter
{
class
TDZCheckCache
;
class
NestableControl
;
class
EmitterScope
;
SharedContext
*
const
sc
;
JSContext
*
const
cx
;
BytecodeEmitter
*
const
parent
;
Rooted
<
JSScript
*
>
script
;
Rooted
<
LazyScript
*
>
lazyScript
;
struct
EmitSection
{
BytecodeVector
code
;
SrcNotesVector
notes
;
ptrdiff_t
lastNoteOffset
;
uint32_t
currentLine
;
uint32_t
lastColumn
;
JumpTarget
lastTarget
;
EmitSection
(
JSContext
*
cx
uint32_t
lineNum
)
:
code
(
cx
)
notes
(
cx
)
lastNoteOffset
(
0
)
currentLine
(
lineNum
)
lastColumn
(
0
)
lastTarget
{
-
1
-
ptrdiff_t
(
JSOP_JUMPTARGET_LENGTH
)
}
{
}
}
;
EmitSection
prologue
main
*
current
;
EitherParser
<
FullParseHandler
>
parser
;
PooledMapPtr
<
AtomIndexMap
>
atomIndices
;
unsigned
firstLine
;
uint32_t
maxFixedSlots
;
uint32_t
maxStackDepth
;
int32_t
stackDepth
;
uint32_t
arrayCompDepth
;
unsigned
emitLevel
;
uint32_t
bodyScopeIndex
;
EmitterScope
*
varEmitterScope
;
NestableControl
*
innermostNestableControl
;
EmitterScope
*
innermostEmitterScope
;
TDZCheckCache
*
innermostTDZCheckCache
;
CGConstList
constList
;
CGObjectList
objectList
;
CGScopeList
scopeList
;
CGTryNoteList
tryNoteList
;
CGScopeNoteList
scopeNoteList
;
CGYieldAndAwaitOffsetList
yieldAndAwaitOffsetList
;
uint16_t
typesetCount
;
bool
hasSingletons
:
1
;
bool
hasTryFinally
:
1
;
bool
emittingRunOnceLambda
:
1
;
bool
isRunOnceLambda
(
)
;
enum
EmitterMode
{
Normal
SelfHosting
LazyFunction
}
;
const
EmitterMode
emitterMode
;
uint32_t
functionBodyEndPos
;
bool
functionBodyEndPosSet
;
BytecodeEmitter
(
BytecodeEmitter
*
parent
const
EitherParser
<
FullParseHandler
>
&
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
uint32_t
lineNum
EmitterMode
emitterMode
=
Normal
)
;
template
<
typename
CharT
>
BytecodeEmitter
(
BytecodeEmitter
*
parent
Parser
<
FullParseHandler
CharT
>
*
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
uint32_t
lineNum
EmitterMode
emitterMode
=
Normal
)
:
BytecodeEmitter
(
parent
EitherParser
<
FullParseHandler
>
(
parser
)
sc
script
lazyScript
lineNum
emitterMode
)
{
}
BytecodeEmitter
(
BytecodeEmitter
*
parent
const
EitherParser
<
FullParseHandler
>
&
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
TokenPos
bodyPosition
EmitterMode
emitterMode
=
Normal
)
;
template
<
typename
CharT
>
BytecodeEmitter
(
BytecodeEmitter
*
parent
Parser
<
FullParseHandler
CharT
>
*
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
TokenPos
bodyPosition
EmitterMode
emitterMode
=
Normal
)
:
BytecodeEmitter
(
parent
EitherParser
<
FullParseHandler
>
(
parser
)
sc
script
lazyScript
bodyPosition
emitterMode
)
{
}
MOZ_MUST_USE
bool
init
(
)
;
template
<
typename
Predicate
>
NestableControl
*
findInnermostNestableControl
(
Predicate
predicate
)
const
;
template
<
typename
T
>
T
*
findInnermostNestableControl
(
)
const
;
template
<
typename
T
typename
Predicate
>
T
*
findInnermostNestableControl
(
Predicate
predicate
)
const
;
NameLocation
lookupName
(
JSAtom
*
name
)
;
mozilla
:
:
Maybe
<
NameLocation
>
locationOfNameBoundInScope
(
JSAtom
*
name
EmitterScope
*
target
)
;
mozilla
:
:
Maybe
<
NameLocation
>
locationOfNameBoundInFunctionScope
(
JSAtom
*
name
EmitterScope
*
source
)
;
mozilla
:
:
Maybe
<
NameLocation
>
locationOfNameBoundInFunctionScope
(
JSAtom
*
name
)
{
return
locationOfNameBoundInFunctionScope
(
name
innermostEmitterScope
)
;
}
void
setVarEmitterScope
(
EmitterScope
*
emitterScope
)
{
MOZ_ASSERT
(
emitterScope
)
;
MOZ_ASSERT
(
!
varEmitterScope
)
;
varEmitterScope
=
emitterScope
;
}
Scope
*
bodyScope
(
)
const
{
return
scopeList
.
vector
[
bodyScopeIndex
]
;
}
Scope
*
outermostScope
(
)
const
{
return
scopeList
.
vector
[
0
]
;
}
Scope
*
innermostScope
(
)
const
;
MOZ_ALWAYS_INLINE
MOZ_MUST_USE
bool
makeAtomIndex
(
JSAtom
*
atom
uint32_t
*
indexp
)
{
MOZ_ASSERT
(
atomIndices
)
;
AtomIndexMap
:
:
AddPtr
p
=
atomIndices
-
>
lookupForAdd
(
atom
)
;
if
(
p
)
{
*
indexp
=
p
-
>
value
(
)
;
return
true
;
}
uint32_t
index
=
atomIndices
-
>
count
(
)
;
if
(
!
atomIndices
-
>
add
(
p
atom
index
)
)
return
false
;
*
indexp
=
index
;
return
true
;
}
bool
isInLoop
(
)
;
MOZ_MUST_USE
bool
checkSingletonContext
(
)
;
MOZ_MUST_USE
bool
checkRunOnceContext
(
)
;
bool
needsImplicitThis
(
)
;
MOZ_MUST_USE
bool
maybeSetDisplayURL
(
)
;
MOZ_MUST_USE
bool
maybeSetSourceMap
(
)
;
void
tellDebuggerAboutCompiledScript
(
JSContext
*
cx
)
;
inline
TokenStreamAnyChars
&
tokenStream
(
)
;
BytecodeVector
&
code
(
)
const
{
return
current
-
>
code
;
}
jsbytecode
*
code
(
ptrdiff_t
offset
)
const
{
return
current
-
>
code
.
begin
(
)
+
offset
;
}
ptrdiff_t
offset
(
)
const
{
return
current
-
>
code
.
end
(
)
-
current
-
>
code
.
begin
(
)
;
}
ptrdiff_t
prologueOffset
(
)
const
{
return
prologue
.
code
.
end
(
)
-
prologue
.
code
.
begin
(
)
;
}
void
switchToMain
(
)
{
current
=
&
main
;
}
void
switchToPrologue
(
)
{
current
=
&
prologue
;
}
bool
inPrologue
(
)
const
{
return
current
=
=
&
prologue
;
}
SrcNotesVector
&
notes
(
)
const
{
return
current
-
>
notes
;
}
ptrdiff_t
lastNoteOffset
(
)
const
{
return
current
-
>
lastNoteOffset
;
}
unsigned
currentLine
(
)
const
{
return
current
-
>
currentLine
;
}
unsigned
lastColumn
(
)
const
{
return
current
-
>
lastColumn
;
}
bool
lastOpcodeIsJumpTarget
(
)
const
{
return
offset
(
)
-
current
-
>
lastTarget
.
offset
=
=
ptrdiff_t
(
JSOP_JUMPTARGET_LENGTH
)
;
}
ptrdiff_t
lastNonJumpTargetOffset
(
)
const
{
return
lastOpcodeIsJumpTarget
(
)
?
current
-
>
lastTarget
.
offset
:
offset
(
)
;
}
void
setFunctionBodyEndPos
(
TokenPos
pos
)
{
functionBodyEndPos
=
pos
.
end
;
functionBodyEndPosSet
=
true
;
}
void
reportError
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
;
bool
reportExtraWarning
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
;
bool
reportStrictModeError
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
checkSideEffects
(
ParseNode
*
pn
bool
*
answer
)
;
#
ifdef
DEBUG
MOZ_MUST_USE
bool
checkStrictOrSloppy
(
JSOp
op
)
;
#
endif
MOZ_MUST_USE
bool
newSrcNote
(
SrcNoteType
type
unsigned
*
indexp
=
nullptr
)
;
MOZ_MUST_USE
bool
newSrcNote2
(
SrcNoteType
type
ptrdiff_t
offset
unsigned
*
indexp
=
nullptr
)
;
MOZ_MUST_USE
bool
newSrcNote3
(
SrcNoteType
type
ptrdiff_t
offset1
ptrdiff_t
offset2
unsigned
*
indexp
=
nullptr
)
;
void
copySrcNotes
(
jssrcnote
*
destination
uint32_t
nsrcnotes
)
;
MOZ_MUST_USE
bool
setSrcNoteOffset
(
unsigned
index
unsigned
which
ptrdiff_t
offset
)
;
MOZ_MUST_USE
bool
addToSrcNoteDelta
(
jssrcnote
*
sn
ptrdiff_t
delta
)
;
MOZ_MUST_USE
bool
finishTakingSrcNotes
(
uint32_t
*
out
)
;
enum
EmitLineNumberNote
{
EMIT_LINENOTE
SUPPRESS_LINENOTE
}
;
MOZ_MUST_USE
bool
emitTree
(
ParseNode
*
pn
ValueUsage
valueUsage
=
ValueUsage
:
:
WantValue
EmitLineNumberNote
emitLineNote
=
EMIT_LINENOTE
)
;
MOZ_MUST_USE
bool
emitTreeInBranch
(
ParseNode
*
pn
ValueUsage
valueUsage
=
ValueUsage
:
:
WantValue
)
;
MOZ_MUST_USE
bool
emitScript
(
ParseNode
*
body
)
;
MOZ_MUST_USE
bool
emitFunctionScript
(
ParseNode
*
body
)
;
void
checkTypeSet
(
JSOp
op
)
;
void
updateDepth
(
ptrdiff_t
target
)
;
MOZ_MUST_USE
bool
updateLineNumberNotes
(
uint32_t
offset
)
;
MOZ_MUST_USE
bool
updateSourceCoordNotes
(
uint32_t
offset
)
;
JSOp
strictifySetNameOp
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emitCheck
(
ptrdiff_t
delta
ptrdiff_t
*
offset
)
;
MOZ_MUST_USE
bool
emit1
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emit2
(
JSOp
op
uint8_t
op1
)
;
MOZ_MUST_USE
bool
emit3
(
JSOp
op
jsbytecode
op1
jsbytecode
op2
)
;
MOZ_MUST_USE
bool
emitDupAt
(
unsigned
slotFromTop
)
;
MOZ_MUST_USE
bool
emitPopN
(
unsigned
n
)
;
MOZ_MUST_USE
bool
emitCheckIsObj
(
CheckIsObjectKind
kind
)
;
MOZ_MUST_USE
bool
emitCheckIsCallable
(
CheckIsCallableKind
kind
)
;
MOZ_MUST_USE
bool
emitUint16Operand
(
JSOp
op
uint32_t
operand
)
;
MOZ_MUST_USE
bool
emitUint32Operand
(
JSOp
op
uint32_t
operand
)
;
MOZ_MUST_USE
bool
emitN
(
JSOp
op
size_t
extra
ptrdiff_t
*
offset
=
nullptr
)
;
MOZ_MUST_USE
bool
emitNumberOp
(
double
dval
)
;
MOZ_MUST_USE
bool
emitThisLiteral
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitGetFunctionThis
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitGetThisForSuperBase
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSetThis
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitCheckDerivedClassConstructorReturn
(
)
;
MOZ_MUST_USE
bool
emitJumpTarget
(
JumpTarget
*
target
)
;
MOZ_MUST_USE
bool
emitJumpNoFallthrough
(
JSOp
op
JumpList
*
jump
)
;
MOZ_MUST_USE
bool
emitJump
(
JSOp
op
JumpList
*
jump
)
;
MOZ_MUST_USE
bool
emitBackwardJump
(
JSOp
op
JumpTarget
target
JumpList
*
jump
JumpTarget
*
fallthrough
)
;
void
patchJumpsToTarget
(
JumpList
jump
JumpTarget
target
)
;
MOZ_MUST_USE
bool
emitJumpTargetAndPatch
(
JumpList
jump
)
;
MOZ_MUST_USE
bool
emitCall
(
JSOp
op
uint16_t
argc
ParseNode
*
pn
=
nullptr
)
;
MOZ_MUST_USE
bool
emitCallIncDec
(
ParseNode
*
incDec
)
;
MOZ_MUST_USE
bool
emitLoopHead
(
ParseNode
*
nextpn
JumpTarget
*
top
)
;
MOZ_MUST_USE
bool
emitLoopEntry
(
ParseNode
*
nextpn
JumpList
entryJump
)
;
MOZ_MUST_USE
bool
emitGoto
(
NestableControl
*
target
JumpList
*
jumplist
SrcNoteType
noteType
=
SRC_NULL
)
;
MOZ_MUST_USE
bool
emitIndex32
(
JSOp
op
uint32_t
index
)
;
MOZ_MUST_USE
bool
emitIndexOp
(
JSOp
op
uint32_t
index
)
;
MOZ_MUST_USE
bool
emitAtomOp
(
JSAtom
*
atom
JSOp
op
)
;
MOZ_MUST_USE
bool
emitAtomOp
(
ParseNode
*
pn
JSOp
op
)
;
MOZ_MUST_USE
bool
emitArrayLiteral
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitArray
(
ParseNode
*
pn
uint32_t
count
JSOp
op
)
;
MOZ_MUST_USE
bool
emitArrayComp
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitInternedScopeOp
(
uint32_t
index
JSOp
op
)
;
MOZ_MUST_USE
bool
emitInternedObjectOp
(
uint32_t
index
JSOp
op
)
;
MOZ_MUST_USE
bool
emitObjectOp
(
ObjectBox
*
objbox
JSOp
op
)
;
MOZ_MUST_USE
bool
emitObjectPairOp
(
ObjectBox
*
objbox1
ObjectBox
*
objbox2
JSOp
op
)
;
MOZ_MUST_USE
bool
emitRegExp
(
uint32_t
index
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitFunction
(
ParseNode
*
pn
bool
needsProto
=
false
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitObject
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
replaceNewInitWithNewObject
(
JSObject
*
obj
ptrdiff_t
offset
)
;
MOZ_MUST_USE
bool
emitHoistedFunctionsInList
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitPropertyList
(
ParseNode
*
pn
MutableHandlePlainObject
objp
PropListType
type
)
;
MOZ_MUST_USE
bool
emitLocalOp
(
JSOp
op
uint32_t
slot
)
;
MOZ_MUST_USE
bool
emitArgOp
(
JSOp
op
uint16_t
slot
)
;
MOZ_MUST_USE
bool
emitEnvCoordOp
(
JSOp
op
EnvironmentCoordinate
ec
)
;
MOZ_MUST_USE
bool
emitGetNameAtLocation
(
JSAtom
*
name
const
NameLocation
&
loc
bool
callContext
=
false
)
;
MOZ_MUST_USE
bool
emitGetNameAtLocationForCompoundAssignment
(
JSAtom
*
name
const
NameLocation
&
loc
)
;
MOZ_MUST_USE
bool
emitGetName
(
JSAtom
*
name
bool
callContext
=
false
)
{
return
emitGetNameAtLocation
(
name
lookupName
(
name
)
callContext
)
;
}
MOZ_MUST_USE
bool
emitGetName
(
ParseNode
*
pn
bool
callContext
=
false
)
;
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitSetOrInitializeNameAtLocation
(
HandleAtom
name
const
NameLocation
&
loc
RHSEmitter
emitRhs
bool
initialize
)
;
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitSetOrInitializeName
(
HandleAtom
name
RHSEmitter
emitRhs
bool
initialize
)
{
return
emitSetOrInitializeNameAtLocation
(
name
lookupName
(
name
)
emitRhs
initialize
)
;
}
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitSetName
(
ParseNode
*
pn
RHSEmitter
emitRhs
)
{
RootedAtom
name
(
cx
pn
-
>
name
(
)
)
;
return
emitSetName
(
name
emitRhs
)
;
}
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitSetName
(
HandleAtom
name
RHSEmitter
emitRhs
)
{
return
emitSetOrInitializeName
(
name
emitRhs
false
)
;
}
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitInitializeName
(
ParseNode
*
pn
RHSEmitter
emitRhs
)
{
RootedAtom
name
(
cx
pn
-
>
name
(
)
)
;
return
emitInitializeName
(
name
emitRhs
)
;
}
template
<
typename
RHSEmitter
>
MOZ_MUST_USE
bool
emitInitializeName
(
HandleAtom
name
RHSEmitter
emitRhs
)
{
return
emitSetOrInitializeName
(
name
emitRhs
true
)
;
}
MOZ_MUST_USE
bool
emitTDZCheckIfNeeded
(
JSAtom
*
name
const
NameLocation
&
loc
)
;
MOZ_MUST_USE
bool
emitNameIncDec
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDeclarationList
(
ParseNode
*
decls
)
;
MOZ_MUST_USE
bool
emitSingleDeclaration
(
ParseNode
*
decls
ParseNode
*
decl
ParseNode
*
initializer
)
;
MOZ_MUST_USE
bool
emitNewInit
(
JSProtoKey
key
)
;
MOZ_MUST_USE
bool
emitSingletonInitialiser
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitPrepareIteratorResult
(
)
;
MOZ_MUST_USE
bool
emitFinishIteratorResult
(
bool
done
)
;
MOZ_MUST_USE
bool
iteratorResultShape
(
unsigned
*
shape
)
;
MOZ_MUST_USE
bool
emitToIteratorResult
(
bool
done
)
;
MOZ_MUST_USE
bool
emitGetDotGenerator
(
)
;
MOZ_MUST_USE
bool
emitInitialYield
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitYield
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitYieldOp
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emitYieldStar
(
ParseNode
*
iter
)
;
MOZ_MUST_USE
bool
emitAwait
(
)
;
MOZ_MUST_USE
bool
emitAwait
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitPropLHS
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitPropOp
(
ParseNode
*
pn
JSOp
op
)
;
MOZ_MUST_USE
bool
emitPropIncDec
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitAsyncWrapperLambda
(
unsigned
index
bool
isArrow
)
;
MOZ_MUST_USE
bool
emitAsyncWrapper
(
unsigned
index
bool
needsHomeObject
bool
isArrow
bool
isStarGenerator
)
;
MOZ_MUST_USE
bool
emitComputedPropertyName
(
ParseNode
*
computedPropName
)
;
enum
class
EmitElemOption
{
Get
Set
Call
IncDec
CompoundAssign
Ref
}
;
MOZ_MUST_USE
bool
emitElemOperands
(
ParseNode
*
pn
EmitElemOption
opts
)
;
MOZ_MUST_USE
bool
emitElemOpBase
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emitElemOp
(
ParseNode
*
pn
JSOp
op
)
;
MOZ_MUST_USE
bool
emitElemIncDec
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitCatch
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitIf
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitWith
(
ParseNode
*
pn
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitLabeledStatement
(
const
LabeledStatement
*
pn
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitLexicalScope
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitLexicalScopeBody
(
ParseNode
*
body
EmitLineNumberNote
emitLineNote
=
EMIT_LINENOTE
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitSwitch
(
ParseNode
*
pn
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitTry
(
ParseNode
*
pn
)
;
enum
DestructuringFlavor
{
DestructuringDeclaration
DestructuringFormalParameterInVarScope
DestructuringAssignment
}
;
MOZ_MUST_USE
bool
emitDestructuringLHSRef
(
ParseNode
*
target
size_t
*
emitted
)
;
MOZ_MUST_USE
bool
emitSetOrInitializeDestructuring
(
ParseNode
*
target
DestructuringFlavor
flav
)
;
MOZ_MUST_USE
bool
emitDestructuringObjRestExclusionSet
(
ParseNode
*
pattern
)
;
MOZ_MUST_USE
bool
emitDestructuringOps
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
;
MOZ_MUST_USE
bool
emitDestructuringOpsArray
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
;
MOZ_MUST_USE
bool
emitDestructuringOpsObject
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
;
typedef
bool
(
*
DestructuringDeclEmitter
)
(
BytecodeEmitter
*
bce
ParseNode
*
pn
)
;
template
<
typename
NameEmitter
>
MOZ_MUST_USE
bool
emitDestructuringDeclsWithEmitter
(
ParseNode
*
pattern
NameEmitter
emitName
)
;
enum
class
CopyOption
{
Filtered
Unfiltered
}
;
MOZ_MUST_USE
bool
emitCopyDataProperties
(
CopyOption
option
)
;
MOZ_MUST_USE
bool
emitIterator
(
)
;
MOZ_MUST_USE
bool
emitAsyncIterator
(
)
;
MOZ_MUST_USE
bool
emitIteratorNext
(
ParseNode
*
pn
IteratorKind
kind
=
IteratorKind
:
:
Sync
bool
allowSelfHosted
=
false
)
;
MOZ_MUST_USE
bool
emitIteratorClose
(
IteratorKind
iterKind
=
IteratorKind
:
:
Sync
CompletionKind
completionKind
=
CompletionKind
:
:
Normal
bool
allowSelfHosted
=
false
)
;
template
<
typename
InnerEmitter
>
MOZ_MUST_USE
bool
wrapWithDestructuringIteratorCloseTryNote
(
int32_t
iterDepth
InnerEmitter
emitter
)
;
MOZ_MUST_USE
bool
emitDefault
(
ParseNode
*
defaultExpr
ParseNode
*
pattern
)
;
MOZ_MUST_USE
bool
setOrEmitSetFunName
(
ParseNode
*
maybeFun
HandleAtom
name
FunctionPrefixKind
prefixKind
)
;
MOZ_MUST_USE
bool
emitInitializer
(
ParseNode
*
initializer
ParseNode
*
pattern
)
;
MOZ_MUST_USE
bool
emitInitializerInBranch
(
ParseNode
*
initializer
ParseNode
*
pattern
)
;
MOZ_MUST_USE
bool
emitCallSiteObject
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitTemplateString
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitAssignment
(
ParseNode
*
lhs
JSOp
op
ParseNode
*
rhs
)
;
MOZ_MUST_USE
bool
emitReturn
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitStatement
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitStatementList
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDeleteName
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDeleteProperty
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDeleteElement
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDeleteExpression
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitTypeof
(
ParseNode
*
node
JSOp
op
)
;
MOZ_MUST_USE
bool
emitUnary
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitRightAssociative
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitLeftAssociative
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitLogical
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSequenceExpr
(
ParseNode
*
pn
ValueUsage
valueUsage
=
ValueUsage
:
:
WantValue
)
;
MOZ_NEVER_INLINE
MOZ_MUST_USE
bool
emitIncOrDec
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitConditionalExpression
(
ConditionalExpression
&
conditional
ValueUsage
valueUsage
=
ValueUsage
:
:
WantValue
)
;
bool
isRestParameter
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitCallOrNew
(
ParseNode
*
pn
ValueUsage
valueUsage
=
ValueUsage
:
:
WantValue
)
;
MOZ_MUST_USE
bool
emitSelfHostedCallFunction
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSelfHostedResumeGenerator
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSelfHostedForceInterpreter
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSelfHostedAllowContentIter
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSelfHostedDefineDataProperty
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSelfHostedHasOwn
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitComprehensionFor
(
ParseNode
*
compFor
)
;
MOZ_MUST_USE
bool
emitComprehensionForIn
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitComprehensionForInOrOfVariables
(
ParseNode
*
pn
bool
*
lexicalScope
)
;
MOZ_MUST_USE
bool
emitComprehensionForOf
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitDo
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitWhile
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitFor
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
=
nullptr
)
;
MOZ_MUST_USE
bool
emitCStyleFor
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
)
;
MOZ_MUST_USE
bool
emitForIn
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
)
;
MOZ_MUST_USE
bool
emitForOf
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
)
;
MOZ_MUST_USE
bool
emitInitializeForInOrOfTarget
(
ParseNode
*
forHead
)
;
MOZ_MUST_USE
bool
emitBreak
(
PropertyName
*
label
)
;
MOZ_MUST_USE
bool
emitContinue
(
PropertyName
*
label
)
;
MOZ_MUST_USE
bool
emitFunctionFormalParametersAndBody
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitFunctionFormalParameters
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitInitializeFunctionSpecialNames
(
)
;
MOZ_MUST_USE
bool
emitFunctionBody
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitLexicalInitialization
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSpread
(
bool
allowSelfHosted
=
false
)
;
MOZ_MUST_USE
bool
emitClass
(
ParseNode
*
pn
)
;
MOZ_MUST_USE
bool
emitSuperPropLHS
(
ParseNode
*
superBase
bool
isCall
=
false
)
;
MOZ_MUST_USE
bool
emitSuperPropOp
(
ParseNode
*
pn
JSOp
op
bool
isCall
=
false
)
;
MOZ_MUST_USE
bool
emitSuperElemOperands
(
ParseNode
*
pn
EmitElemOption
opts
=
EmitElemOption
:
:
Get
)
;
MOZ_MUST_USE
bool
emitSuperElemOp
(
ParseNode
*
pn
JSOp
op
bool
isCall
=
false
)
;
}
;
}
}
#
endif
