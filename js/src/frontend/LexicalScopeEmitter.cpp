#
include
"
frontend
/
LexicalScopeEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
LexicalScopeEmitter
:
:
LexicalScopeEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
LexicalScopeEmitter
:
:
emitScope
(
ScopeKind
kind
JS
:
:
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
MOZ_ASSERT
(
bindings
)
;
tdzCache_
.
emplace
(
bce_
)
;
emitterScope_
.
emplace
(
bce_
)
;
if
(
!
emitterScope_
-
>
enterLexical
(
bce_
kind
bindings
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Scope
;
#
endif
return
true
;
}
bool
LexicalScopeEmitter
:
:
emitEmptyScope
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
tdzCache_
.
emplace
(
bce_
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Scope
;
#
endif
return
true
;
}
bool
LexicalScopeEmitter
:
:
emitEnd
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Scope
)
;
if
(
emitterScope_
)
{
if
(
!
emitterScope_
-
>
leave
(
bce_
)
)
{
return
false
;
}
emitterScope_
.
reset
(
)
;
}
tdzCache_
.
reset
(
)
;
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
