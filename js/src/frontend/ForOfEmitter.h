#
ifndef
frontend_ForOfEmitter_h
#
define
frontend_ForOfEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
ForOfLoopControl
.
h
"
#
include
"
frontend
/
IteratorKind
.
h
"
#
include
"
frontend
/
SelfHostedIter
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
EmitterScope
;
class
MOZ_STACK_CLASS
ForOfEmitter
{
BytecodeEmitter
*
bce_
;
#
ifdef
DEBUG
int32_t
loopDepth_
=
0
;
#
endif
SelfHostedIter
selfHostedIter_
;
IteratorKind
iterKind_
;
mozilla
:
:
Maybe
<
ForOfLoopControl
>
loopInfo_
;
const
EmitterScope
*
headLexicalEmitterScope_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCacheForIteratedValue_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Iterated
Initialize
Body
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
ForOfEmitter
(
BytecodeEmitter
*
bce
const
EmitterScope
*
headLexicalEmitterScope
SelfHostedIter
selfHostedIter
IteratorKind
iterKind
)
;
[
[
nodiscard
]
]
bool
emitIterated
(
)
;
[
[
nodiscard
]
]
bool
emitInitialize
(
uint32_t
forPos
)
;
[
[
nodiscard
]
]
bool
emitBody
(
)
;
[
[
nodiscard
]
]
bool
emitEnd
(
uint32_t
iteratedPos
)
;
}
;
}
}
#
endif
