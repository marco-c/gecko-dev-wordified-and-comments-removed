#
include
"
frontend
/
AbstractScope
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
Scope
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
Scope
*
AbstractScope
:
:
maybeScope
(
)
const
{
return
scope_
;
}
ScopeKind
AbstractScope
:
:
kind
(
)
const
{
MOZ_ASSERT
(
maybeScope
(
)
)
;
return
maybeScope
(
)
-
>
kind
(
)
;
}
AbstractScope
AbstractScope
:
:
enclosing
(
)
const
{
MOZ_ASSERT
(
maybeScope
(
)
)
;
return
AbstractScope
(
maybeScope
(
)
-
>
enclosing
(
)
)
;
}
bool
AbstractScope
:
:
hasEnvironment
(
)
const
{
MOZ_ASSERT
(
maybeScope
(
)
)
;
return
maybeScope
(
)
-
>
hasEnvironment
(
)
;
}
bool
AbstractScope
:
:
isArrow
(
)
const
{
return
canonicalFunction
(
)
-
>
isArrow
(
)
;
}
JSFunction
*
AbstractScope
:
:
canonicalFunction
(
)
const
{
MOZ_ASSERT
(
is
<
FunctionScope
>
(
)
)
;
MOZ_ASSERT
(
maybeScope
(
)
)
;
return
maybeScope
(
)
-
>
as
<
FunctionScope
>
(
)
.
canonicalFunction
(
)
;
}
void
AbstractScope
:
:
trace
(
JSTracer
*
trc
)
{
JS
:
:
GCPolicy
<
ScopeType
>
:
:
trace
(
trc
&
scope_
"
AbstractScope
"
)
;
}
bool
AbstractScopeIter
:
:
hasSyntacticEnvironment
(
)
const
{
return
abstractScope
(
)
.
hasEnvironment
(
)
&
&
abstractScope
(
)
.
kind
(
)
!
=
ScopeKind
:
:
NonSyntactic
;
}
