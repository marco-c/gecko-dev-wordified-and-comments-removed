#
include
"
frontend
/
DefaultEmitter
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
DefaultEmitter
:
:
DefaultEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
DefaultEmitter
:
:
prepareForDefault
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
ifUndefined_
.
emplace
(
bce_
)
;
if
(
!
ifUndefined_
-
>
emitIf
(
Nothing
(
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOP_DUP
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOP_UNDEFINED
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOP_STRICTEQ
)
)
{
return
false
;
}
if
(
!
ifUndefined_
-
>
emitThen
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Default
;
#
endif
return
true
;
}
bool
DefaultEmitter
:
:
emitEnd
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Default
)
;
if
(
!
ifUndefined_
-
>
emitEnd
(
)
)
{
return
false
;
}
ifUndefined_
.
reset
(
)
;
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
