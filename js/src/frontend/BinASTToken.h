#
ifndef
frontend_BinASTToken_h
#
define
frontend_BinASTToken_h
#
include
<
stddef
.
h
>
#
include
"
jstypes
.
h
"
namespace
js
{
namespace
frontend
{
#
define
FOR_EACH_BIN_KIND
(
F
)
\
F
(
_Null
"
"
)
\
F
(
ArrayAssignmentTarget
"
ArrayAssignmentTarget
"
)
\
F
(
ArrayBinding
"
ArrayBinding
"
)
\
F
(
ArrayExpression
"
ArrayExpression
"
)
\
F
(
ArrowExpressionContentsWithExpression
\
"
ArrowExpressionContentsWithExpression
"
)
\
F
(
ArrowExpressionContentsWithFunctionBody
\
"
ArrowExpressionContentsWithFunctionBody
"
)
\
F
(
AssertedBlockScope
"
AssertedBlockScope
"
)
\
F
(
AssertedBoundName
"
AssertedBoundName
"
)
\
F
(
AssertedBoundNamesScope
"
AssertedBoundNamesScope
"
)
\
F
(
AssertedDeclaredName
"
AssertedDeclaredName
"
)
\
F
(
AssertedParameterName
"
AssertedParameterName
"
)
\
F
(
AssertedParameterScope
"
AssertedParameterScope
"
)
\
F
(
AssertedPositionalParameterName
"
AssertedPositionalParameterName
"
)
\
F
(
AssertedRestParameterName
"
AssertedRestParameterName
"
)
\
F
(
AssertedScriptGlobalScope
"
AssertedScriptGlobalScope
"
)
\
F
(
AssertedVarScope
"
AssertedVarScope
"
)
\
F
(
AssignmentExpression
"
AssignmentExpression
"
)
\
F
(
AssignmentTargetIdentifier
"
AssignmentTargetIdentifier
"
)
\
F
(
AssignmentTargetPropertyIdentifier
"
AssignmentTargetPropertyIdentifier
"
)
\
F
(
AssignmentTargetPropertyProperty
"
AssignmentTargetPropertyProperty
"
)
\
F
(
AssignmentTargetWithInitializer
"
AssignmentTargetWithInitializer
"
)
\
F
(
AwaitExpression
"
AwaitExpression
"
)
\
F
(
BinaryExpression
"
BinaryExpression
"
)
\
F
(
BindingIdentifier
"
BindingIdentifier
"
)
\
F
(
BindingPropertyIdentifier
"
BindingPropertyIdentifier
"
)
\
F
(
BindingPropertyProperty
"
BindingPropertyProperty
"
)
\
F
(
BindingWithInitializer
"
BindingWithInitializer
"
)
\
F
(
Block
"
Block
"
)
\
F
(
BreakStatement
"
BreakStatement
"
)
\
F
(
CallExpression
"
CallExpression
"
)
\
F
(
CatchClause
"
CatchClause
"
)
\
F
(
ClassDeclaration
"
ClassDeclaration
"
)
\
F
(
ClassElement
"
ClassElement
"
)
\
F
(
ClassExpression
"
ClassExpression
"
)
\
F
(
CompoundAssignmentExpression
"
CompoundAssignmentExpression
"
)
\
F
(
ComputedMemberAssignmentTarget
"
ComputedMemberAssignmentTarget
"
)
\
F
(
ComputedMemberExpression
"
ComputedMemberExpression
"
)
\
F
(
ComputedPropertyName
"
ComputedPropertyName
"
)
\
F
(
ConditionalExpression
"
ConditionalExpression
"
)
\
F
(
ContinueStatement
"
ContinueStatement
"
)
\
F
(
DataProperty
"
DataProperty
"
)
\
F
(
DebuggerStatement
"
DebuggerStatement
"
)
\
F
(
Directive
"
Directive
"
)
\
F
(
DoWhileStatement
"
DoWhileStatement
"
)
\
F
(
EagerArrowExpressionWithExpression
"
EagerArrowExpressionWithExpression
"
)
\
F
(
EagerArrowExpressionWithFunctionBody
\
"
EagerArrowExpressionWithFunctionBody
"
)
\
F
(
EagerFunctionDeclaration
"
EagerFunctionDeclaration
"
)
\
F
(
EagerFunctionExpression
"
EagerFunctionExpression
"
)
\
F
(
EagerGetter
"
EagerGetter
"
)
\
F
(
EagerMethod
"
EagerMethod
"
)
\
F
(
EagerSetter
"
EagerSetter
"
)
\
F
(
EmptyStatement
"
EmptyStatement
"
)
\
F
(
Export
"
Export
"
)
\
F
(
ExportAllFrom
"
ExportAllFrom
"
)
\
F
(
ExportDefault
"
ExportDefault
"
)
\
F
(
ExportFrom
"
ExportFrom
"
)
\
F
(
ExportFromSpecifier
"
ExportFromSpecifier
"
)
\
F
(
ExportLocalSpecifier
"
ExportLocalSpecifier
"
)
\
F
(
ExportLocals
"
ExportLocals
"
)
\
F
(
ExpressionStatement
"
ExpressionStatement
"
)
\
F
(
ForInOfBinding
"
ForInOfBinding
"
)
\
F
(
ForInStatement
"
ForInStatement
"
)
\
F
(
ForOfStatement
"
ForOfStatement
"
)
\
F
(
ForStatement
"
ForStatement
"
)
\
F
(
FormalParameters
"
FormalParameters
"
)
\
F
(
FunctionExpressionContents
"
FunctionExpressionContents
"
)
\
F
(
FunctionOrMethodContents
"
FunctionOrMethodContents
"
)
\
F
(
GetterContents
"
GetterContents
"
)
\
F
(
IdentifierExpression
"
IdentifierExpression
"
)
\
F
(
IfStatement
"
IfStatement
"
)
\
F
(
Import
"
Import
"
)
\
F
(
ImportNamespace
"
ImportNamespace
"
)
\
F
(
ImportSpecifier
"
ImportSpecifier
"
)
\
F
(
LabelledStatement
"
LabelledStatement
"
)
\
F
(
LazyArrowExpressionWithExpression
"
LazyArrowExpressionWithExpression
"
)
\
F
(
LazyArrowExpressionWithFunctionBody
\
"
LazyArrowExpressionWithFunctionBody
"
)
\
F
(
LazyFunctionDeclaration
"
LazyFunctionDeclaration
"
)
\
F
(
LazyFunctionExpression
"
LazyFunctionExpression
"
)
\
F
(
LazyGetter
"
LazyGetter
"
)
\
F
(
LazyMethod
"
LazyMethod
"
)
\
F
(
LazySetter
"
LazySetter
"
)
\
F
(
LiteralBooleanExpression
"
LiteralBooleanExpression
"
)
\
F
(
LiteralInfinityExpression
"
LiteralInfinityExpression
"
)
\
F
(
LiteralNullExpression
"
LiteralNullExpression
"
)
\
F
(
LiteralNumericExpression
"
LiteralNumericExpression
"
)
\
F
(
LiteralPropertyName
"
LiteralPropertyName
"
)
\
F
(
LiteralRegExpExpression
"
LiteralRegExpExpression
"
)
\
F
(
LiteralStringExpression
"
LiteralStringExpression
"
)
\
F
(
Module
"
Module
"
)
\
F
(
NewExpression
"
NewExpression
"
)
\
F
(
NewTargetExpression
"
NewTargetExpression
"
)
\
F
(
ObjectAssignmentTarget
"
ObjectAssignmentTarget
"
)
\
F
(
ObjectBinding
"
ObjectBinding
"
)
\
F
(
ObjectExpression
"
ObjectExpression
"
)
\
F
(
ReturnStatement
"
ReturnStatement
"
)
\
F
(
Script
"
Script
"
)
\
F
(
SetterContents
"
SetterContents
"
)
\
F
(
ShorthandProperty
"
ShorthandProperty
"
)
\
F
(
SpreadElement
"
SpreadElement
"
)
\
F
(
StaticMemberAssignmentTarget
"
StaticMemberAssignmentTarget
"
)
\
F
(
StaticMemberExpression
"
StaticMemberExpression
"
)
\
F
(
Super
"
Super
"
)
\
F
(
SwitchCase
"
SwitchCase
"
)
\
F
(
SwitchDefault
"
SwitchDefault
"
)
\
F
(
SwitchStatement
"
SwitchStatement
"
)
\
F
(
SwitchStatementWithDefault
"
SwitchStatementWithDefault
"
)
\
F
(
TemplateElement
"
TemplateElement
"
)
\
F
(
TemplateExpression
"
TemplateExpression
"
)
\
F
(
ThisExpression
"
ThisExpression
"
)
\
F
(
ThrowStatement
"
ThrowStatement
"
)
\
F
(
TryCatchStatement
"
TryCatchStatement
"
)
\
F
(
TryFinallyStatement
"
TryFinallyStatement
"
)
\
F
(
UnaryExpression
"
UnaryExpression
"
)
\
F
(
UpdateExpression
"
UpdateExpression
"
)
\
F
(
VariableDeclaration
"
VariableDeclaration
"
)
\
F
(
VariableDeclarator
"
VariableDeclarator
"
)
\
F
(
WhileStatement
"
WhileStatement
"
)
\
F
(
WithStatement
"
WithStatement
"
)
\
F
(
YieldExpression
"
YieldExpression
"
)
\
F
(
YieldStarExpression
"
YieldStarExpression
"
)
enum
class
BinASTKind
:
uint16_t
{
#
define
EMIT_ENUM
(
name
_
)
name
FOR_EACH_BIN_KIND
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
}
;
const
size_t
BINASTKIND_LIMIT
=
120
;
#
define
FOR_EACH_BIN_FIELD
(
F
)
\
F
(
Alternate
"
alternate
"
)
\
F
(
Arguments
"
arguments
"
)
\
F
(
Binding
"
binding
"
)
\
F
(
BindingScope
"
bindingScope
"
)
\
F
(
Body
"
body
"
)
\
F
(
BodyScope
"
bodyScope
"
)
\
F
(
BoundNames
"
boundNames
"
)
\
F
(
Callee
"
callee
"
)
\
F
(
Cases
"
cases
"
)
\
F
(
CatchClause
"
catchClause
"
)
\
F
(
Consequent
"
consequent
"
)
\
F
(
Contents
"
contents
"
)
\
F
(
ContentsSkip
"
contents_skip
"
)
\
F
(
Declaration
"
declaration
"
)
\
F
(
Declarators
"
declarators
"
)
\
F
(
DeclaredNames
"
declaredNames
"
)
\
F
(
DefaultBinding
"
defaultBinding
"
)
\
F
(
DefaultCase
"
defaultCase
"
)
\
F
(
Directives
"
directives
"
)
\
F
(
Discriminant
"
discriminant
"
)
\
F
(
Elements
"
elements
"
)
\
F
(
ExportedName
"
exportedName
"
)
\
F
(
Expression
"
expression
"
)
\
F
(
Finalizer
"
finalizer
"
)
\
F
(
Flags
"
flags
"
)
\
F
(
HasDirectEval
"
hasDirectEval
"
)
\
F
(
Index
"
index
"
)
\
F
(
Init
"
init
"
)
\
F
(
IsAsync
"
isAsync
"
)
\
F
(
IsCaptured
"
isCaptured
"
)
\
F
(
IsFunctionNameCaptured
"
isFunctionNameCaptured
"
)
\
F
(
IsGenerator
"
isGenerator
"
)
\
F
(
IsPrefix
"
isPrefix
"
)
\
F
(
IsSimpleParameterList
"
isSimpleParameterList
"
)
\
F
(
IsStatic
"
isStatic
"
)
\
F
(
IsThisCaptured
"
isThisCaptured
"
)
\
F
(
Items
"
items
"
)
\
F
(
Kind
"
kind
"
)
\
F
(
Label
"
label
"
)
\
F
(
Left
"
left
"
)
\
F
(
Length
"
length
"
)
\
F
(
Method
"
method
"
)
\
F
(
ModuleSpecifier
"
moduleSpecifier
"
)
\
F
(
Name
"
name
"
)
\
F
(
NamedExports
"
namedExports
"
)
\
F
(
NamedImports
"
namedImports
"
)
\
F
(
NamespaceBinding
"
namespaceBinding
"
)
\
F
(
Object
"
object
"
)
\
F
(
Operand
"
operand
"
)
\
F
(
Operator
"
operator
"
)
\
F
(
Param
"
param
"
)
\
F
(
ParamNames
"
paramNames
"
)
\
F
(
ParameterScope
"
parameterScope
"
)
\
F
(
Params
"
params
"
)
\
F
(
Pattern
"
pattern
"
)
\
F
(
PostDefaultCases
"
postDefaultCases
"
)
\
F
(
PreDefaultCases
"
preDefaultCases
"
)
\
F
(
Properties
"
properties
"
)
\
F
(
Property
"
property
"
)
\
F
(
RawValue
"
rawValue
"
)
\
F
(
Rest
"
rest
"
)
\
F
(
Right
"
right
"
)
\
F
(
Scope
"
scope
"
)
\
F
(
Statements
"
statements
"
)
\
F
(
Super
"
super
"
)
\
F
(
Tag
"
tag
"
)
\
F
(
Test
"
test
"
)
\
F
(
Update
"
update
"
)
\
F
(
Value
"
value
"
)
enum
class
BinASTField
:
uint16_t
{
#
define
EMIT_ENUM
(
name
_
)
name
FOR_EACH_BIN_FIELD
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
}
;
const
size_t
BINASTFIELD_LIMIT
=
69
;
const
size_t
BINAST_TOTAL_NUMBER_OF_FIELDS
=
275
;
#
define
FOR_EACH_BIN_VARIANT
(
F
)
\
F
(
AssertedDeclaredKindConstLexical
"
const
lexical
"
)
\
F
(
AssertedDeclaredKindNonConstLexical
"
non
-
const
lexical
"
)
\
F
(
AssertedDeclaredKindOrVariableDeclarationKindVar
"
var
"
)
\
F
(
BinaryOperatorBitAnd
"
&
"
)
\
F
(
BinaryOperatorBitOr
"
|
"
)
\
F
(
BinaryOperatorBitXor
"
^
"
)
\
F
(
BinaryOperatorComma
"
"
)
\
F
(
BinaryOperatorDiv
"
/
"
)
\
F
(
BinaryOperatorEq
"
=
=
"
)
\
F
(
BinaryOperatorGeqThan
"
>
=
"
)
\
F
(
BinaryOperatorGreaterThan
"
>
"
)
\
F
(
BinaryOperatorIn
"
in
"
)
\
F
(
BinaryOperatorInstanceof
"
instanceof
"
)
\
F
(
BinaryOperatorLeqThan
"
<
=
"
)
\
F
(
BinaryOperatorLessThan
"
<
"
)
\
F
(
BinaryOperatorLogicalAnd
"
&
&
"
)
\
F
(
BinaryOperatorLogicalOr
"
|
|
"
)
\
F
(
BinaryOperatorLsh
"
<
<
"
)
\
F
(
BinaryOperatorMod
"
%
"
)
\
F
(
BinaryOperatorMul
"
*
"
)
\
F
(
BinaryOperatorNeq
"
!
=
"
)
\
F
(
BinaryOperatorOrUnaryOperatorMinus
"
-
"
)
\
F
(
BinaryOperatorOrUnaryOperatorPlus
"
+
"
)
\
F
(
BinaryOperatorPow
"
*
*
"
)
\
F
(
BinaryOperatorRsh
"
>
>
"
)
\
F
(
BinaryOperatorStrictEq
"
=
=
=
"
)
\
F
(
BinaryOperatorStrictNeq
"
!
=
=
"
)
\
F
(
BinaryOperatorUrsh
"
>
>
>
"
)
\
F
(
CompoundAssignmentOperatorBitAndAssign
"
&
=
"
)
\
F
(
CompoundAssignmentOperatorBitOrAssign
"
|
=
"
)
\
F
(
CompoundAssignmentOperatorBitXorAssign
"
^
=
"
)
\
F
(
CompoundAssignmentOperatorDivAssign
"
/
=
"
)
\
F
(
CompoundAssignmentOperatorLshAssign
"
<
<
=
"
)
\
F
(
CompoundAssignmentOperatorMinusAssign
"
-
=
"
)
\
F
(
CompoundAssignmentOperatorModAssign
"
%
=
"
)
\
F
(
CompoundAssignmentOperatorMulAssign
"
*
=
"
)
\
F
(
CompoundAssignmentOperatorPlusAssign
"
+
=
"
)
\
F
(
CompoundAssignmentOperatorPowAssign
"
*
*
=
"
)
\
F
(
CompoundAssignmentOperatorRshAssign
"
>
>
=
"
)
\
F
(
CompoundAssignmentOperatorUrshAssign
"
>
>
>
=
"
)
\
F
(
UnaryOperatorBitNot
"
~
"
)
\
F
(
UnaryOperatorDelete
"
delete
"
)
\
F
(
UnaryOperatorNot
"
!
"
)
\
F
(
UnaryOperatorTypeof
"
typeof
"
)
\
F
(
UnaryOperatorVoid
"
void
"
)
\
F
(
UpdateOperatorDecr
"
-
-
"
)
\
F
(
UpdateOperatorIncr
"
+
+
"
)
\
F
(
VariableDeclarationKindConst
"
const
"
)
\
F
(
VariableDeclarationKindLet
"
let
"
)
enum
class
BinASTVariant
:
uint16_t
{
#
define
EMIT_ENUM
(
name
_
)
name
FOR_EACH_BIN_VARIANT
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
}
;
const
size_t
BINASTVARIANT_LIMIT
=
49
;
const
size_t
BINAST_TOTAL_NUMBER_OF_LISTS
=
22
;
const
char
*
describeBinASTKind
(
const
BinASTKind
&
kind
)
;
const
char
*
describeBinASTField
(
const
BinASTField
&
field
)
;
const
char
*
describeBinASTVariant
(
const
BinASTVariant
&
variant
)
;
}
}
#
endif
