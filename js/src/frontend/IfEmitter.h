#
ifndef
frontend_IfEmitter_h
#
define
frontend_IfEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
JumpList
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
BranchEmitterBase
{
protected
:
BytecodeEmitter
*
bce_
;
JumpList
jumpAroundThen_
;
JumpList
jumpsAroundElse_
;
int32_t
thenDepth_
=
0
;
enum
class
Kind
{
MayContainLexicalAccessInBranch
NoLexicalAccessInBranch
}
;
Kind
kind_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCache_
;
#
ifdef
DEBUG
int32_t
pushed_
=
0
;
bool
calculatedPushed_
=
false
;
#
endif
protected
:
BranchEmitterBase
(
BytecodeEmitter
*
bce
Kind
kind
)
;
MOZ_MUST_USE
bool
emitThenInternal
(
)
;
void
calculateOrCheckPushed
(
)
;
MOZ_MUST_USE
bool
emitElseInternal
(
)
;
MOZ_MUST_USE
bool
emitEndInternal
(
)
;
public
:
#
ifdef
DEBUG
int32_t
pushed
(
)
const
{
return
pushed_
;
}
int32_t
popped
(
)
const
{
return
-
pushed_
;
}
#
endif
}
;
class
MOZ_STACK_CLASS
IfEmitter
:
public
BranchEmitterBase
{
protected
:
#
ifdef
DEBUG
enum
class
State
{
Start
If
Then
ThenElse
Else
ElseIf
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
protected
:
IfEmitter
(
BytecodeEmitter
*
bce
Kind
kind
)
;
public
:
explicit
IfEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitIf
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
ifPos
)
;
MOZ_MUST_USE
bool
emitThen
(
)
;
MOZ_MUST_USE
bool
emitThenElse
(
)
;
MOZ_MUST_USE
bool
emitElseIf
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
ifPos
)
;
MOZ_MUST_USE
bool
emitElse
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
class
MOZ_STACK_CLASS
InternalIfEmitter
:
public
IfEmitter
{
public
:
explicit
InternalIfEmitter
(
BytecodeEmitter
*
bce
)
;
}
;
class
MOZ_STACK_CLASS
CondEmitter
:
public
BranchEmitterBase
{
#
ifdef
DEBUG
enum
class
State
{
Start
Cond
ThenElse
Else
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
explicit
CondEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitCond
(
)
;
MOZ_MUST_USE
bool
emitThenElse
(
)
;
MOZ_MUST_USE
bool
emitElse
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
}
}
#
endif
