#
include
"
frontend
/
BCEScriptStencil
.
h
"
#
include
"
frontend
/
AbstractScopePtr
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
BytecodeSection
.
h
"
#
include
"
vm
/
SharedStencil
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
BCEScriptStencil
:
:
BCEScriptStencil
(
BytecodeEmitter
&
bce
UniquePtr
<
ImmutableScriptData
>
immutableData
)
:
ScriptStencil
(
bce
.
cx
)
bce_
(
bce
)
{
init
(
bce
std
:
:
move
(
immutableData
)
)
;
}
void
BCEScriptStencil
:
:
init
(
BytecodeEmitter
&
bce
UniquePtr
<
ImmutableScriptData
>
immutableData
)
{
natoms
=
0
;
immutableFlags
=
bce
.
sc
-
>
immutableFlags
(
)
;
MOZ_ASSERT
(
bce
.
outermostScope
(
)
.
hasOnChain
(
ScopeKind
:
:
NonSyntactic
)
=
=
immutableFlags
.
hasFlag
(
ImmutableFlags
:
:
HasNonSyntacticScope
)
)
;
gcThings
=
bce
.
perScriptData
(
)
.
gcThingList
(
)
.
stealGCThings
(
)
;
immutableScriptData
=
std
:
:
move
(
immutableData
)
;
if
(
isFunction
(
)
)
{
FunctionBox
*
funbox
=
bce
.
sc
-
>
asFunctionBox
(
)
;
functionIndex
.
emplace
(
funbox
-
>
index
(
)
)
;
fieldInitializers
=
funbox
-
>
fieldInitializers
;
immutableFlags
.
setFlag
(
ImmutableFlags
:
:
HasMappedArgsObj
funbox
-
>
hasMappedArgsObj
(
)
)
;
if
(
bce
.
emitterMode
!
=
BytecodeEmitter
:
:
LazyFunction
)
{
immutableFlags
.
setFlag
(
ImmutableFlags
:
:
IsLikelyConstructorWrapper
funbox
-
>
isLikelyConstructorWrapper
(
)
)
;
}
}
}
void
BCEScriptStencil
:
:
initAtomMap
(
GCPtrAtom
*
atoms
)
const
{
}
