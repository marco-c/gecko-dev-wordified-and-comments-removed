#
ifndef
frontend_BytecodeCompiler_h
#
define
frontend_BytecodeCompiler_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
frontend
/
FunctionSyntaxKind
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
class
JSLinearString
;
namespace
JS
{
class
JS_PUBLIC_API
ReadOnlyCompileOptions
;
}
namespace
js
{
class
ModuleObject
;
class
ScriptSourceObject
;
class
FrontendContext
;
namespace
frontend
{
struct
CompilationInput
;
struct
CompilationStencil
;
struct
ExtensibleCompilationStencil
;
struct
CompilationGCOutput
;
class
ErrorReporter
;
class
FunctionBox
;
class
ParseNode
;
class
TaggedParserAtomIndex
;
class
ScopeBindingCache
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
already_AddRefed
<
CompilationStencil
>
ParseModuleToStencil
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
js
:
:
LifoAlloc
&
tempLifoAlloc
CompilationInput
&
input
ScopeBindingCache
*
scopeCache
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
already_AddRefed
<
CompilationStencil
>
ParseModuleToStencil
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
js
:
:
LifoAlloc
&
tempLifoAlloc
CompilationInput
&
input
ScopeBindingCache
*
scopeCache
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
UniquePtr
<
ExtensibleCompilationStencil
>
ParseModuleToExtensibleStencil
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
js
:
:
LifoAlloc
&
tempLifoAlloc
CompilationInput
&
input
ScopeBindingCache
*
scopeCache
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
UniquePtr
<
ExtensibleCompilationStencil
>
ParseModuleToExtensibleStencil
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
NativeStackLimit
stackLimit
js
:
:
LifoAlloc
&
tempLifoAlloc
CompilationInput
&
input
ScopeBindingCache
*
scopeCache
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunctionInNonSyntacticScope
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
Handle
<
Scope
*
>
enclosingScope
)
;
bool
IsIdentifier
(
JSLinearString
*
str
)
;
bool
IsIdentifierNameOrPrivateName
(
JSLinearString
*
str
)
;
bool
IsIdentifier
(
const
Latin1Char
*
chars
size_t
length
)
;
bool
IsIdentifier
(
const
char16_t
*
chars
size_t
length
)
;
bool
IsIdentifierASCII
(
char
c
)
;
bool
IsIdentifierASCII
(
char
c1
char
c2
)
;
bool
IsIdentifierNameOrPrivateName
(
const
Latin1Char
*
chars
size_t
length
)
;
bool
IsIdentifierNameOrPrivateName
(
const
char16_t
*
chars
size_t
length
)
;
bool
IsKeyword
(
TaggedParserAtomIndex
atom
)
;
}
}
#
endif
