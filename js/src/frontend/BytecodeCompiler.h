#
ifndef
frontend_BytecodeCompiler_h
#
define
frontend_BytecodeCompiler_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdint
.
h
>
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
frontend
/
FunctionSyntaxKind
.
h
"
#
include
"
frontend
/
ScriptIndex
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
ScopeKind
.
h
"
class
JSFunction
;
class
JSObject
;
class
JSScript
;
struct
JSContext
;
namespace
js
{
class
ModuleObject
;
class
FrontendContext
;
class
Scope
;
namespace
frontend
{
struct
CompilationInput
;
struct
CompilationStencil
;
struct
ExtensibleCompilationStencil
;
struct
CompilationGCOutput
;
class
ScopeBindingCache
;
extern
already_AddRefed
<
CompilationStencil
>
CompileGlobalScriptToStencilWithInput
(
JSContext
*
maybeCx
FrontendContext
*
fc
js
:
:
LifoAlloc
&
tempLifoAlloc
CompilationInput
&
input
ScopeBindingCache
*
scopeCache
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
[
[
nodiscard
]
]
extern
bool
InstantiateStencils
(
JSContext
*
cx
CompilationInput
&
input
const
CompilationStencil
&
stencil
CompilationGCOutput
&
gcOutput
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileGlobalScriptWithExtraBindings
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JS
:
:
PropertyKey
>
>
unwrappedBindingKeys
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JS
:
:
Value
>
>
unwrappedBindingValues
JS
:
:
MutableHandle
<
JSObject
*
>
env
)
;
extern
JSScript
*
CompileEvalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
Handle
<
js
:
:
Scope
*
>
enclosingScope
JS
:
:
Handle
<
JSObject
*
>
enclosingEnv
)
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunctionInNonSyntacticScope
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
JS
:
:
Handle
<
Scope
*
>
enclosingScope
)
;
extern
bool
DelazifyCanonicalScriptedFunction
(
JSContext
*
cx
FrontendContext
*
fc
JS
:
:
Handle
<
JSFunction
*
>
fun
)
;
enum
class
DelazifyFailureReason
{
Compressed
Other
}
;
extern
already_AddRefed
<
CompilationStencil
>
DelazifyCanonicalScriptedFunction
(
FrontendContext
*
fc
js
:
:
LifoAlloc
&
tempLifoAlloc
const
JS
:
:
PrefableCompileOptions
&
prefableOptions
ScopeBindingCache
*
scopeCache
CompilationStencil
&
context
ScriptIndex
scriptIndex
DelazifyFailureReason
*
failureReason
)
;
inline
bool
CanLazilyParse
(
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
{
return
!
options
.
discardSource
&
&
!
options
.
sourceIsLazy
&
&
!
options
.
forceFullParse
(
)
;
}
}
}
#
endif
