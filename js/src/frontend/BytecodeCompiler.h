#
ifndef
frontend_BytecodeCompiler_h
#
define
frontend_BytecodeCompiler_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
frontend
/
FunctionSyntaxKind
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
Scope
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
class
JSLinearString
;
namespace
js
{
class
ModuleObject
;
class
ScriptSourceObject
;
namespace
frontend
{
struct
CompilationStencil
;
struct
CompilationGCOutput
;
class
ErrorReporter
;
class
FunctionBox
;
class
ParseNode
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
ModuleObject
*
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
bool
ParseModuleToStencil
(
JSContext
*
cx
CompilationStencil
&
stencil
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
bool
ParseModuleToStencil
(
JSContext
*
cx
CompilationStencil
&
stencil
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
UniquePtr
<
CompilationStencil
>
ParseModuleToStencil
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
;
UniquePtr
<
CompilationStencil
>
ParseModuleToStencil
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
)
;
[
[
nodiscard
]
]
JSFunction
*
CompileStandaloneFunctionInNonSyntacticScope
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
frontend
:
:
FunctionSyntaxKind
syntaxKind
HandleScope
enclosingScope
)
;
bool
IsIdentifier
(
JSLinearString
*
str
)
;
bool
IsIdentifierNameOrPrivateName
(
JSLinearString
*
str
)
;
bool
IsIdentifier
(
const
Latin1Char
*
chars
size_t
length
)
;
bool
IsIdentifier
(
const
char16_t
*
chars
size_t
length
)
;
bool
IsIdentifierNameOrPrivateName
(
const
Latin1Char
*
chars
size_t
length
)
;
bool
IsIdentifierNameOrPrivateName
(
const
char16_t
*
chars
size_t
length
)
;
bool
IsKeyword
(
TaggedParserAtomIndex
atom
)
;
class
MOZ_STACK_CLASS
AutoFrontendTraceLog
{
#
ifdef
JS_TRACE_LOGGING
TraceLoggerThread
*
logger_
;
mozilla
:
:
Maybe
<
TraceLoggerEvent
>
frontendEvent_
;
mozilla
:
:
Maybe
<
AutoTraceLog
>
frontendLog_
;
mozilla
:
:
Maybe
<
AutoTraceLog
>
typeLog_
;
#
endif
public
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
reporter
)
;
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
reporter
FunctionBox
*
funbox
)
;
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
reporter
ParseNode
*
pn
)
;
}
;
}
}
#
endif
