#
include
"
frontend
/
CForEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
#
include
"
vm
/
Scope
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
CForEmitter
:
:
CForEmitter
(
BytecodeEmitter
*
bce
const
EmitterScope
*
headLexicalEmitterScopeForLet
)
:
bce_
(
bce
)
headLexicalEmitterScopeForLet_
(
headLexicalEmitterScopeForLet
)
{
}
bool
CForEmitter
:
:
emitInit
(
const
Maybe
<
uint32_t
>
&
initPos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
loopInfo_
.
emplace
(
bce_
StatementKind
:
:
ForLoop
)
;
if
(
initPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
initPos
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Init
;
#
endif
return
true
;
}
bool
CForEmitter
:
:
emitCond
(
const
Maybe
<
uint32_t
>
&
condPos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Init
)
;
if
(
headLexicalEmitterScopeForLet_
)
{
MOZ_ASSERT
(
headLexicalEmitterScopeForLet_
=
=
bce_
-
>
innermostEmitterScope
(
)
)
;
MOZ_ASSERT
(
headLexicalEmitterScopeForLet_
-
>
scope
(
bce_
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScopeForLet_
-
>
hasEnvironment
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_FRESHENLEXICALENV
)
)
{
return
false
;
}
}
}
if
(
!
bce_
-
>
newSrcNote
(
SRC_FOR
&
noteIndex_
)
)
{
return
false
;
}
if
(
!
loopInfo_
-
>
emitLoopHead
(
bce_
condPos
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Cond
;
#
endif
return
true
;
}
bool
CForEmitter
:
:
emitBody
(
Cond
cond
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Cond
)
;
cond_
=
cond
;
if
(
cond_
=
=
Cond
:
:
Present
)
{
if
(
!
bce_
-
>
emitJump
(
JSOP_IFEQ
&
loopInfo_
-
>
breaks
)
)
{
return
false
;
}
}
tdzCache_
.
emplace
(
bce_
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Body
;
#
endif
return
true
;
}
bool
CForEmitter
:
:
emitUpdate
(
Update
update
const
Maybe
<
uint32_t
>
&
updatePos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Body
)
;
update_
=
update
;
tdzCache_
.
reset
(
)
;
if
(
!
loopInfo_
-
>
emitContinueTarget
(
bce_
)
)
{
return
false
;
}
if
(
headLexicalEmitterScopeForLet_
)
{
MOZ_ASSERT
(
headLexicalEmitterScopeForLet_
=
=
bce_
-
>
innermostEmitterScope
(
)
)
;
MOZ_ASSERT
(
headLexicalEmitterScopeForLet_
-
>
scope
(
bce_
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScopeForLet_
-
>
hasEnvironment
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_FRESHENLEXICALENV
)
)
{
return
false
;
}
}
}
if
(
update_
=
=
Update
:
:
Present
)
{
tdzCache_
.
emplace
(
bce_
)
;
if
(
updatePos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
updatePos
)
)
{
return
false
;
}
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Update
;
#
endif
return
true
;
}
bool
CForEmitter
:
:
emitEnd
(
const
Maybe
<
uint32_t
>
&
forPos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Update
)
;
if
(
update_
=
=
Update
:
:
Present
)
{
tdzCache_
.
reset
(
)
;
if
(
!
bce_
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
}
if
(
cond_
=
=
Cond
:
:
Missing
&
&
update_
=
=
Update
:
:
Missing
)
{
if
(
forPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
forPos
)
)
{
return
false
;
}
}
}
if
(
!
loopInfo_
-
>
emitLoopEnd
(
bce_
JSOP_GOTO
)
)
{
return
false
;
}
if
(
!
bce_
-
>
setSrcNoteOffset
(
noteIndex_
SrcNote
:
:
For
:
:
BackJumpOffset
loopInfo_
-
>
loopEndOffsetFromLoopHead
(
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
addTryNote
(
JSTRY_LOOP
bce_
-
>
bytecodeSection
(
)
.
stackDepth
(
)
loopInfo_
-
>
headOffset
(
)
loopInfo_
-
>
breakTargetOffset
(
)
)
)
{
return
false
;
}
if
(
!
loopInfo_
-
>
patchBreaksAndContinues
(
bce_
)
)
{
return
false
;
}
loopInfo_
.
reset
(
)
;
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
