#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EitherParser
.
h
"
#
include
"
frontend
/
ErrorReporter
.
h
"
#
include
"
frontend
/
FoldConstants
.
h
"
#
ifdef
JS_ENABLE_SMOOSH
#
include
"
frontend
/
Frontend2
.
h
"
#
endif
#
include
"
frontend
/
ModuleSharedContext
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
GeneratorAndAsyncKind
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
ModuleBuilder
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
wasm
/
AsmJS
.
h
"
#
include
"
debugger
/
DebugAPI
-
inl
.
h
"
#
include
"
vm
/
EnvironmentObject
-
inl
.
h
"
#
include
"
vm
/
GeckoProfiler
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Utf8Unit
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
ReadOnlyCompileOptions
;
using
JS
:
:
SourceText
;
class
MOZ_RAII
AutoAssertReportedException
{
#
ifdef
DEBUG
JSContext
*
cx_
;
bool
check_
;
public
:
explicit
AutoAssertReportedException
(
JSContext
*
cx
)
:
cx_
(
cx
)
check_
(
true
)
{
}
void
reset
(
)
{
check_
=
false
;
}
~
AutoAssertReportedException
(
)
{
if
(
!
check_
)
{
return
;
}
if
(
!
cx_
-
>
isHelperThreadContext
(
)
)
{
MOZ_ASSERT
(
cx_
-
>
isExceptionPending
(
)
)
;
return
;
}
ParseTask
*
task
=
cx_
-
>
parseTask
(
)
;
MOZ_ASSERT
(
task
-
>
outOfMemory
|
|
task
-
>
overRecursed
|
|
!
task
-
>
errors
.
empty
(
)
)
;
}
#
else
public
:
explicit
AutoAssertReportedException
(
JSContext
*
)
{
}
void
reset
(
)
{
}
#
endif
}
;
static
bool
EmplaceEmitter
(
CompilationInfo
&
compilationInfo
CompilationState
&
compilationState
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sc
)
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
SourceAwareCompiler
{
protected
:
SourceText
<
Unit
>
&
sourceBuffer_
;
frontend
:
:
CompilationState
compilationState_
;
Maybe
<
Parser
<
SyntaxParseHandler
Unit
>
>
syntaxParser
;
Maybe
<
Parser
<
FullParseHandler
Unit
>
>
parser
;
using
TokenStreamPosition
=
frontend
:
:
TokenStreamPosition
<
Unit
>
;
protected
:
explicit
SourceAwareCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
sourceBuffer
js
:
:
Scope
*
enclosingScope
=
nullptr
JSObject
*
enclosingEnv
=
nullptr
)
:
sourceBuffer_
(
sourceBuffer
)
compilationState_
(
cx
allocScope
options
enclosingScope
enclosingEnv
)
{
MOZ_ASSERT
(
sourceBuffer_
.
get
(
)
!
=
nullptr
)
;
}
MOZ_MUST_USE
bool
createSourceAndParser
(
CompilationInfo
&
compilationInfo
)
;
void
assertSourceAndParserCreated
(
CompilationInput
&
compilationInput
)
const
{
MOZ_ASSERT
(
compilationInput
.
source
(
)
!
=
nullptr
)
;
MOZ_ASSERT
(
parser
.
isSome
(
)
)
;
}
void
assertSourceParserAndScriptCreated
(
CompilationInput
&
compilationInput
)
{
assertSourceAndParserCreated
(
compilationInput
)
;
}
MOZ_MUST_USE
bool
emplaceEmitter
(
CompilationInfo
&
compilationInfo
Maybe
<
BytecodeEmitter
>
&
emitter
SharedContext
*
sharedContext
)
{
return
EmplaceEmitter
(
compilationInfo
compilationState_
emitter
EitherParser
(
parser
.
ptr
(
)
)
sharedContext
)
;
}
bool
canHandleParseFailure
(
const
Directives
&
newDirectives
)
;
void
handleParseFailure
(
CompilationInfo
&
compilationInfo
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
CompilationInfo
:
:
RewindToken
&
startObj
)
;
public
:
frontend
:
:
CompilationState
&
compilationState
(
)
{
return
compilationState_
;
}
;
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ScriptCompiler
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
protected
:
using
Base
:
:
compilationState_
;
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
canHandleParseFailure
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
ScriptCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
sourceBuffer
js
:
:
Scope
*
enclosingScope
=
nullptr
JSObject
*
enclosingEnv
=
nullptr
)
:
Base
(
cx
allocScope
options
sourceBuffer
enclosingScope
enclosingEnv
)
{
}
using
Base
:
:
createSourceAndParser
;
bool
compileScript
(
CompilationInfo
&
compilationInfo
SharedContext
*
sc
CompilationGCOutput
&
gcOutput
)
;
}
;
static
void
tellDebuggerAboutCompiledScript
(
JSContext
*
cx
bool
hideScript
Handle
<
JSScript
*
>
script
)
{
if
(
cx
-
>
isHelperThreadContext
(
)
)
{
return
;
}
if
(
!
hideScript
)
{
DebugAPI
:
:
onNewScript
(
cx
script
)
;
}
}
template
<
typename
Unit
>
static
bool
CreateGlobalScript
(
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
Unit
>
&
srcBuf
ScopeKind
scopeKind
CompilationGCOutput
&
gcOutput
)
{
JSContext
*
cx
=
compilationInfo
.
cx
;
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
frontend
:
:
ScriptCompiler
<
Unit
>
compiler
(
cx
allocScope
compilationInfo
.
input
.
options
srcBuf
)
;
if
(
!
compiler
.
createSourceAndParser
(
compilationInfo
)
)
{
return
false
;
}
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
srcBuf
.
length
(
)
compilationInfo
.
input
.
options
.
lineno
compilationInfo
.
input
.
options
.
column
)
;
frontend
:
:
GlobalSharedContext
globalsc
(
cx
scopeKind
compilationInfo
compiler
.
compilationState
(
)
.
directives
extent
)
;
if
(
!
compiler
.
compileScript
(
compilationInfo
&
globalsc
gcOutput
)
)
{
return
false
;
}
tellDebuggerAboutCompiledScript
(
cx
compilationInfo
.
input
.
options
.
hideScriptFromDebugger
gcOutput
.
script
)
;
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
CompileGlobalScript
(
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
CompilationGCOutput
&
gcOutput
)
{
return
CreateGlobalScript
(
compilationInfo
srcBuf
scopeKind
gcOutput
)
;
}
bool
frontend
:
:
CompileGlobalScript
(
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
CompilationGCOutput
&
gcOutput
)
{
#
ifdef
JS_ENABLE_SMOOSH
if
(
compilationInfo
.
cx
-
>
options
(
)
.
trySmoosh
(
)
)
{
bool
unimplemented
=
false
;
JSContext
*
cx
=
compilationInfo
.
cx
;
JSRuntime
*
rt
=
cx
-
>
runtime
(
)
;
bool
result
=
Smoosh
:
:
compileGlobalScript
(
compilationInfo
srcBuf
gcOutput
&
unimplemented
)
;
if
(
!
unimplemented
)
{
if
(
!
compilationInfo
.
input
.
assignSource
(
cx
srcBuf
)
)
{
return
false
;
}
if
(
compilationInfo
.
cx
-
>
options
(
)
.
trackNotImplemented
(
)
)
{
rt
-
>
parserWatcherFile
.
put
(
"
1
"
)
;
}
return
result
;
}
if
(
compilationInfo
.
cx
-
>
options
(
)
.
trackNotImplemented
(
)
)
{
rt
-
>
parserWatcherFile
.
put
(
"
0
"
)
;
}
fprintf
(
stderr
"
Falling
back
!
\
n
"
)
;
}
#
endif
return
CreateGlobalScript
(
compilationInfo
srcBuf
scopeKind
gcOutput
)
;
}
template
<
typename
Unit
>
static
bool
CreateEvalScript
(
CompilationInfo
&
compilationInfo
SourceText
<
Unit
>
&
srcBuf
js
:
:
Scope
*
enclosingScope
JSObject
*
enclosingEnv
CompilationGCOutput
&
gcOutput
)
{
JSContext
*
cx
=
compilationInfo
.
cx
;
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
frontend
:
:
ScriptCompiler
<
Unit
>
compiler
(
cx
allocScope
compilationInfo
.
input
.
options
srcBuf
enclosingScope
enclosingEnv
)
;
if
(
!
compiler
.
createSourceAndParser
(
compilationInfo
)
)
{
return
false
;
}
uint32_t
len
=
srcBuf
.
length
(
)
;
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
len
compilationInfo
.
input
.
options
.
lineno
compilationInfo
.
input
.
options
.
column
)
;
frontend
:
:
EvalSharedContext
evalsc
(
cx
compilationInfo
compiler
.
compilationState
(
)
extent
)
;
if
(
!
compiler
.
compileScript
(
compilationInfo
&
evalsc
gcOutput
)
)
{
return
false
;
}
tellDebuggerAboutCompiledScript
(
cx
compilationInfo
.
input
.
options
.
hideScriptFromDebugger
gcOutput
.
script
)
;
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
CompileEvalScript
(
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
js
:
:
Scope
*
enclosingScope
JSObject
*
enclosingEnv
CompilationGCOutput
&
gcOutput
)
{
return
CreateEvalScript
(
compilationInfo
srcBuf
enclosingScope
enclosingEnv
gcOutput
)
;
}
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ModuleCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
compilationState_
;
using
Base
:
:
createSourceAndParser
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
parser
;
public
:
explicit
ModuleCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
sourceBuffer
js
:
:
Scope
*
enclosingScope
=
nullptr
JSObject
*
enclosingEnv
=
nullptr
)
:
Base
(
cx
allocScope
options
sourceBuffer
enclosingScope
enclosingEnv
)
{
}
bool
compile
(
CompilationInfo
&
compilationInfo
CompilationGCOutput
&
gcOutput
)
;
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
StandaloneFunctionCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceAndParserCreated
;
using
Base
:
:
canHandleParseFailure
;
using
Base
:
:
compilationState_
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
StandaloneFunctionCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
sourceBuffer
js
:
:
Scope
*
enclosingScope
=
nullptr
JSObject
*
enclosingEnv
=
nullptr
)
:
Base
(
cx
allocScope
options
sourceBuffer
enclosingScope
enclosingEnv
)
{
}
using
Base
:
:
createSourceAndParser
;
FunctionNode
*
parse
(
CompilationInfo
&
compilationInfo
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
;
bool
compile
(
CompilationInfo
&
compilationInfo
FunctionNode
*
parsedFunction
CompilationGCOutput
&
gcOutput
)
;
}
;
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
if
(
errorReporter
.
hasTokenizationStarted
(
)
)
{
line
=
errorReporter
.
options
(
)
.
lineno
;
column
=
errorReporter
.
options
(
)
.
column
;
}
else
{
errorReporter
.
currentLineAndColumn
(
&
line
&
column
)
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
FunctionBox
*
funbox
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
funbox
-
>
extent
(
)
.
lineno
funbox
-
>
extent
(
)
.
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
ParseNode
*
pn
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
errorReporter
.
lineAndColumnAt
(
pn
-
>
pn_pos
.
begin
&
line
&
column
)
;
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
static
bool
CanLazilyParse
(
const
CompilationInfo
&
compilationInfo
)
{
return
!
compilationInfo
.
input
.
options
.
discardSource
&
&
!
compilationInfo
.
input
.
options
.
sourceIsLazy
&
&
!
compilationInfo
.
input
.
options
.
forceFullParse
(
)
;
}
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
createSourceAndParser
(
CompilationInfo
&
compilationInfo
)
{
if
(
!
compilationInfo
.
input
.
assignSource
(
compilationInfo
.
cx
sourceBuffer_
)
)
{
return
false
;
}
if
(
CanLazilyParse
(
compilationInfo
)
)
{
syntaxParser
.
emplace
(
compilationInfo
.
cx
compilationInfo
.
input
.
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
false
compilationInfo
compilationState_
nullptr
nullptr
)
;
if
(
!
syntaxParser
-
>
checkOptions
(
)
)
{
return
false
;
}
}
parser
.
emplace
(
compilationInfo
.
cx
compilationInfo
.
input
.
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
true
compilationInfo
compilationState_
syntaxParser
.
ptrOr
(
nullptr
)
nullptr
)
;
parser
-
>
ss
=
compilationInfo
.
input
.
source
(
)
;
return
parser
-
>
checkOptions
(
)
;
}
static
bool
EmplaceEmitter
(
CompilationInfo
&
compilationInfo
CompilationState
&
compilationState
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sc
)
{
BytecodeEmitter
:
:
EmitterMode
emitterMode
=
sc
-
>
selfHosted
(
)
?
BytecodeEmitter
:
:
SelfHosting
:
BytecodeEmitter
:
:
Normal
;
emitter
.
emplace
(
nullptr
parser
sc
compilationInfo
compilationState
emitterMode
)
;
return
emitter
-
>
init
(
)
;
}
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
canHandleParseFailure
(
const
Directives
&
newDirectives
)
{
return
!
parser
-
>
anyChars
.
hadError
(
)
&
&
compilationState_
.
directives
!
=
newDirectives
;
}
template
<
typename
Unit
>
void
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
handleParseFailure
(
CompilationInfo
&
compilationInfo
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
CompilationInfo
:
:
RewindToken
&
startObj
)
{
MOZ_ASSERT
(
canHandleParseFailure
(
newDirectives
)
)
;
parser
-
>
tokenStream
.
rewind
(
startPosition
)
;
compilationInfo
.
rewind
(
startObj
)
;
MOZ_ASSERT_IF
(
compilationState_
.
directives
.
strict
(
)
newDirectives
.
strict
(
)
)
;
MOZ_ASSERT_IF
(
compilationState_
.
directives
.
asmJS
(
)
newDirectives
.
asmJS
(
)
)
;
compilationState_
.
directives
=
newDirectives
;
}
template
<
typename
Unit
>
bool
frontend
:
:
ScriptCompiler
<
Unit
>
:
:
compileScript
(
CompilationInfo
&
compilationInfo
SharedContext
*
sc
CompilationGCOutput
&
gcOutput
)
{
assertSourceParserAndScriptCreated
(
compilationInfo
.
input
)
;
TokenStreamPosition
startPosition
(
compilationState_
.
keepAtoms
parser
-
>
tokenStream
)
;
JSContext
*
cx
=
compilationInfo
.
cx
;
MOZ_ASSERT
(
compilationInfo
.
stencil
.
scriptData
.
length
(
)
=
=
CompilationInfo
:
:
TopLevelIndex
)
;
if
(
!
compilationInfo
.
stencil
.
scriptData
.
emplaceBack
(
cx
)
)
{
return
false
;
}
ParseNode
*
pn
;
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
parsing
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
if
(
sc
-
>
isEvalContext
(
)
)
{
pn
=
parser
-
>
evalBody
(
sc
-
>
asEvalContext
(
)
)
;
}
else
{
pn
=
parser
-
>
globalBody
(
sc
-
>
asGlobalContext
(
)
)
;
}
}
if
(
!
pn
)
{
MOZ_ASSERT
(
!
canHandleParseFailure
(
compilationState_
.
directives
)
)
;
return
false
;
}
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
emit
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
sc
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitScript
(
pn
)
)
{
return
false
;
}
if
(
!
compilationInfo
.
instantiateStencils
(
gcOutput
)
)
{
return
false
;
}
MOZ_ASSERT
(
gcOutput
.
script
)
;
}
if
(
!
compilationInfo
.
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
compilationInfo
.
input
.
source
(
)
-
>
tryCompressOffThread
(
cx
)
)
{
return
false
;
}
}
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
true
;
}
template
<
typename
Unit
>
bool
frontend
:
:
ModuleCompiler
<
Unit
>
:
:
compile
(
CompilationInfo
&
compilationInfo
CompilationGCOutput
&
gcOutput
)
{
if
(
!
createSourceAndParser
(
compilationInfo
)
)
{
return
false
;
}
JSContext
*
cx
=
compilationInfo
.
cx
;
MOZ_ASSERT
(
compilationInfo
.
stencil
.
scriptData
.
length
(
)
=
=
CompilationInfo
:
:
TopLevelIndex
)
;
if
(
!
compilationInfo
.
stencil
.
scriptData
.
emplaceBack
(
cx
)
)
{
return
false
;
}
ModuleBuilder
builder
(
cx
parser
.
ptr
(
)
)
;
StencilModuleMetadata
&
moduleMetadata
=
compilationInfo
.
stencil
.
moduleMetadata
;
uint32_t
len
=
this
-
>
sourceBuffer_
.
length
(
)
;
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
len
compilationInfo
.
input
.
options
.
lineno
compilationInfo
.
input
.
options
.
column
)
;
ModuleSharedContext
modulesc
(
cx
compilationInfo
builder
extent
)
;
ParseNode
*
pn
=
parser
-
>
moduleBody
(
&
modulesc
)
;
if
(
!
pn
)
{
return
false
;
}
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
&
modulesc
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitScript
(
pn
-
>
as
<
ModuleNode
>
(
)
.
body
(
)
)
)
{
return
false
;
}
builder
.
finishFunctionDecls
(
moduleMetadata
)
;
if
(
!
compilationInfo
.
instantiateStencils
(
gcOutput
)
)
{
return
false
;
}
MOZ_ASSERT
(
gcOutput
.
script
)
;
MOZ_ASSERT
(
gcOutput
.
module
)
;
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
compilationInfo
.
input
.
source
(
)
-
>
tryCompressOffThread
(
cx
)
)
{
return
false
;
}
}
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
true
;
}
template
<
typename
Unit
>
FunctionNode
*
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
parse
(
CompilationInfo
&
compilationInfo
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
assertSourceAndParserCreated
(
compilationInfo
.
input
)
;
TokenStreamPosition
startPosition
(
compilationState_
.
keepAtoms
parser
-
>
tokenStream
)
;
CompilationInfo
:
:
RewindToken
startObj
=
compilationInfo
.
getRewindToken
(
)
;
FunctionNode
*
fn
;
for
(
;
;
)
{
Directives
newDirectives
=
compilationState_
.
directives
;
fn
=
parser
-
>
standaloneFunction
(
parameterListEnd
syntaxKind
generatorKind
asyncKind
compilationState_
.
directives
&
newDirectives
)
;
if
(
fn
)
{
break
;
}
if
(
!
canHandleParseFailure
(
newDirectives
)
)
{
return
nullptr
;
}
handleParseFailure
(
compilationInfo
newDirectives
startPosition
startObj
)
;
}
return
fn
;
}
template
<
typename
Unit
>
bool
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
compile
(
CompilationInfo
&
compilationInfo
FunctionNode
*
parsedFunction
CompilationGCOutput
&
gcOutput
)
{
FunctionBox
*
funbox
=
parsedFunction
-
>
funbox
(
)
;
if
(
funbox
-
>
isInterpreted
(
)
)
{
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
funbox
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitFunctionScript
(
parsedFunction
TopLevelFunction
:
:
Yes
)
)
{
return
false
;
}
compilationInfo
.
stencil
.
scriptData
[
CompilationInfo
:
:
TopLevelIndex
]
.
extent
=
SourceExtent
{
0
sourceBuffer_
.
length
(
)
funbox
-
>
extent
(
)
.
toStringStart
funbox
-
>
extent
(
)
.
toStringEnd
compilationInfo
.
input
.
options
.
lineno
compilationInfo
.
input
.
options
.
column
}
;
}
else
{
MOZ_ASSERT
(
funbox
-
>
isAsmJSModule
(
)
)
;
MOZ_ASSERT
(
compilationInfo
.
stencil
.
asmJS
.
has
(
funbox
-
>
index
(
)
)
)
;
MOZ_ASSERT
(
compilationInfo
.
stencil
.
scriptData
[
CompilationInfo
:
:
TopLevelIndex
]
.
functionFlags
.
isAsmJSNative
(
)
)
;
}
if
(
!
compilationInfo
.
instantiateStencils
(
gcOutput
)
)
{
return
false
;
}
#
ifdef
DEBUG
JSFunction
*
fun
=
gcOutput
.
functions
[
CompilationInfo
:
:
TopLevelIndex
]
;
MOZ_ASSERT
(
fun
-
>
hasBytecode
(
)
|
|
IsAsmJSModule
(
fun
)
)
;
#
endif
if
(
!
compilationInfo
.
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
compilationInfo
.
input
.
source
(
)
-
>
tryCompressOffThread
(
compilationInfo
.
cx
)
)
{
return
false
;
}
}
return
true
;
}
template
<
typename
Unit
>
static
bool
InternalParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
Unit
>
&
srcBuf
CompilationGCOutput
&
gcOutput
)
{
MOZ_ASSERT
(
srcBuf
.
get
(
)
)
;
AutoAssertReportedException
assertException
(
cx
)
;
CompileOptions
options
(
cx
optionsInput
)
;
options
.
setForceStrictMode
(
)
;
options
.
setIsRunOnce
(
true
)
;
options
.
allowHTMLComments
=
false
;
CompilationInfo
compilationInfo
(
cx
options
)
;
if
(
!
compilationInfo
.
input
.
initForModule
(
cx
)
)
{
return
false
;
}
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
ModuleCompiler
<
Unit
>
compiler
(
cx
allocScope
compilationInfo
.
input
.
options
srcBuf
)
;
if
(
!
compiler
.
compile
(
compilationInfo
gcOutput
)
)
{
return
false
;
}
tellDebuggerAboutCompiledScript
(
cx
options
.
hideScriptFromDebugger
gcOutput
.
script
)
;
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
ParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
char16_t
>
&
srcBuf
CompilationGCOutput
&
gcOutput
)
{
return
InternalParseModule
(
cx
optionsInput
srcBuf
gcOutput
)
;
}
bool
frontend
:
:
ParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
Utf8Unit
>
&
srcBuf
CompilationGCOutput
&
gcOutput
)
{
return
InternalParseModule
(
cx
optionsInput
srcBuf
gcOutput
)
;
}
template
<
typename
Unit
>
static
ModuleObject
*
CreateModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
srcBuf
)
{
AutoAssertReportedException
assertException
(
cx
)
;
if
(
!
GlobalObject
:
:
ensureModulePrototypesCreated
(
cx
cx
-
>
global
(
)
)
)
{
return
nullptr
;
}
CompilationGCOutput
gcOutput
(
cx
)
;
if
(
!
ParseModule
(
cx
options
srcBuf
gcOutput
)
)
{
return
nullptr
;
}
if
(
!
ModuleObject
:
:
Freeze
(
cx
gcOutput
.
module
)
)
{
return
nullptr
;
}
assertException
.
reset
(
)
;
return
gcOutput
.
module
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CreateModule
(
cx
options
srcBuf
)
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
return
CreateModule
(
cx
options
srcBuf
)
;
}
template
<
typename
Unit
>
static
bool
CompileLazyFunctionImpl
(
JSContext
*
cx
Handle
<
BaseScript
*
>
lazy
const
Unit
*
units
size_t
length
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
lazy
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
lazy
-
>
isReadyForDelazification
(
)
)
;
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
JSFunction
*
>
fun
(
cx
lazy
-
>
function
(
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
options
.
setMutedErrors
(
lazy
-
>
mutedErrors
(
)
)
.
setFileAndLine
(
lazy
-
>
filename
(
)
lazy
-
>
lineno
(
)
)
.
setColumn
(
lazy
-
>
column
(
)
)
.
setScriptSourceOffset
(
lazy
-
>
sourceStart
(
)
)
.
setNoScriptRval
(
false
)
.
setSelfHostingMode
(
false
)
;
CompilationInfo
compilationInfo
(
cx
options
)
;
compilationInfo
.
input
.
initFromLazy
(
lazy
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
frontend
:
:
CompilationState
compilationState
(
cx
allocScope
options
fun
-
>
enclosingScope
(
)
)
;
Parser
<
FullParseHandler
Unit
>
parser
(
cx
options
units
length
true
compilationInfo
compilationState
nullptr
lazy
)
;
if
(
!
parser
.
checkOptions
(
)
)
{
return
false
;
}
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
delazify
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
FunctionNode
*
pn
=
parser
.
standaloneLazyFunction
(
fun
lazy
-
>
toStringStart
(
)
lazy
-
>
strict
(
)
lazy
-
>
generatorKind
(
)
lazy
-
>
asyncKind
(
)
)
;
if
(
!
pn
)
{
return
false
;
}
mozilla
:
:
DebugOnly
<
uint32_t
>
lazyFlags
=
static_cast
<
uint32_t
>
(
lazy
-
>
immutableFlags
(
)
)
;
BytecodeEmitter
bce
(
nullptr
&
parser
pn
-
>
funbox
(
)
compilationInfo
compilationState
BytecodeEmitter
:
:
LazyFunction
)
;
if
(
!
bce
.
init
(
pn
-
>
pn_pos
)
)
{
return
false
;
}
if
(
!
bce
.
emitFunctionScript
(
pn
TopLevelFunction
:
:
Yes
)
)
{
return
false
;
}
CompilationGCOutput
gcOutput
(
cx
)
;
if
(
!
compilationInfo
.
instantiateStencils
(
gcOutput
)
)
{
return
false
;
}
MOZ_ASSERT
(
lazyFlags
=
=
gcOutput
.
script
-
>
immutableFlags
(
)
)
;
MOZ_ASSERT
(
gcOutput
.
script
-
>
outermostScope
(
)
-
>
hasOnChain
(
ScopeKind
:
:
NonSyntactic
)
=
=
gcOutput
.
script
-
>
immutableFlags
(
)
.
hasFlag
(
JSScript
:
:
ImmutableFlags
:
:
HasNonSyntacticScope
)
)
;
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
CompileLazyFunction
(
JSContext
*
cx
Handle
<
BaseScript
*
>
lazy
const
char16_t
*
units
size_t
length
)
{
return
CompileLazyFunctionImpl
(
cx
lazy
units
length
)
;
}
bool
frontend
:
:
CompileLazyFunction
(
JSContext
*
cx
Handle
<
BaseScript
*
>
lazy
const
Utf8Unit
*
units
size_t
length
)
{
return
CompileLazyFunctionImpl
(
cx
lazy
units
length
)
;
}
static
JSFunction
*
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
HandleScope
enclosingScope
=
nullptr
)
{
AutoAssertReportedException
assertException
(
cx
)
;
RootedScope
scope
(
cx
enclosingScope
)
;
if
(
!
scope
)
{
scope
=
&
cx
-
>
global
(
)
-
>
emptyGlobalScope
(
)
;
}
CompilationInfo
compilationInfo
(
cx
options
)
;
if
(
!
compilationInfo
.
input
.
initForStandaloneFunction
(
cx
scope
)
)
{
return
nullptr
;
}
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
StandaloneFunctionCompiler
<
char16_t
>
compiler
(
cx
allocScope
compilationInfo
.
input
.
options
srcBuf
enclosingScope
)
;
if
(
!
compiler
.
createSourceAndParser
(
compilationInfo
)
)
{
return
nullptr
;
}
FunctionNode
*
parsedFunction
=
compiler
.
parse
(
compilationInfo
syntaxKind
generatorKind
asyncKind
parameterListEnd
)
;
if
(
!
parsedFunction
)
{
return
nullptr
;
}
CompilationGCOutput
gcOutput
(
cx
)
;
if
(
!
compiler
.
compile
(
compilationInfo
parsedFunction
gcOutput
)
)
{
return
nullptr
;
}
if
(
gcOutput
.
script
)
{
if
(
parameterListEnd
)
{
compilationInfo
.
input
.
source
(
)
-
>
setParameterListEnd
(
*
parameterListEnd
)
;
}
tellDebuggerAboutCompiledScript
(
cx
options
.
hideScriptFromDebugger
gcOutput
.
script
)
;
}
assertException
.
reset
(
)
;
return
gcOutput
.
functions
[
CompilationInfo
:
:
TopLevelIndex
]
;
}
JSFunction
*
frontend
:
:
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
HandleScope
enclosingScope
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
SyncFunction
enclosingScope
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
SyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneAsyncFunction
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
bool
frontend
:
:
CompilationInput
:
:
initScriptSource
(
JSContext
*
cx
)
{
ScriptSource
*
ss
=
cx
-
>
new_
<
ScriptSource
>
(
)
;
if
(
!
ss
)
{
return
false
;
}
setSource
(
ss
)
;
return
ss
-
>
initFromOptions
(
cx
options
)
;
}
