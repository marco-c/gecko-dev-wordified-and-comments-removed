#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
if
defined
(
JS_BUILD_BINAST
)
#
include
"
frontend
/
BinASTParser
.
h
"
#
endif
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EitherParser
.
h
"
#
include
"
frontend
/
ErrorReporter
.
h
"
#
include
"
frontend
/
FoldConstants
.
h
"
#
ifdef
JS_ENABLE_SMOOSH
#
include
"
frontend
/
Frontend2
.
h
"
#
endif
#
include
"
frontend
/
ModuleSharedContext
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
ModuleBuilder
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
wasm
/
AsmJS
.
h
"
#
include
"
debugger
/
DebugAPI
-
inl
.
h
"
#
include
"
vm
/
EnvironmentObject
-
inl
.
h
"
#
include
"
vm
/
GeckoProfiler
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Utf8Unit
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
ReadOnlyCompileOptions
;
using
JS
:
:
SourceText
;
class
MOZ_RAII
AutoAssertReportedException
{
#
ifdef
DEBUG
JSContext
*
cx_
;
bool
check_
;
public
:
explicit
AutoAssertReportedException
(
JSContext
*
cx
)
:
cx_
(
cx
)
check_
(
true
)
{
}
void
reset
(
)
{
check_
=
false
;
}
~
AutoAssertReportedException
(
)
{
if
(
!
check_
)
{
return
;
}
if
(
!
cx_
-
>
isHelperThreadContext
(
)
)
{
MOZ_ASSERT
(
cx_
-
>
isExceptionPending
(
)
)
;
return
;
}
ParseTask
*
task
=
cx_
-
>
parseTask
(
)
;
MOZ_ASSERT
(
task
-
>
outOfMemory
|
|
task
-
>
overRecursed
|
|
!
task
-
>
errors
.
empty
(
)
)
;
}
#
else
public
:
explicit
AutoAssertReportedException
(
JSContext
*
)
{
}
void
reset
(
)
{
}
#
endif
}
;
static
bool
InternalCreateScript
(
CompilationInfo
&
compilationinfo
HandleObject
functionOrGlobal
uint32_t
toStringStart
uint32_t
toStringEnd
uint32_t
sourceBufferLength
)
;
static
bool
EmplaceEmitter
(
CompilationInfo
&
compilationInfo
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sharedContext
)
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
SourceAwareCompiler
{
protected
:
SourceText
<
Unit
>
&
sourceBuffer_
;
Maybe
<
Parser
<
SyntaxParseHandler
Unit
>
>
syntaxParser
;
Maybe
<
Parser
<
FullParseHandler
Unit
>
>
parser
;
using
TokenStreamPosition
=
frontend
:
:
TokenStreamPosition
<
Unit
>
;
protected
:
explicit
SourceAwareCompiler
(
SourceText
<
Unit
>
&
sourceBuffer
)
:
sourceBuffer_
(
sourceBuffer
)
{
MOZ_ASSERT
(
sourceBuffer_
.
get
(
)
!
=
nullptr
)
;
}
MOZ_MUST_USE
bool
prepareScriptParse
(
LifoAllocScope
&
allocScope
CompilationInfo
&
compilationInfo
)
{
return
createSourceAndParser
(
allocScope
compilationInfo
)
&
&
createCompleteScript
(
compilationInfo
)
;
}
void
assertSourceAndParserCreated
(
CompilationInfo
&
compilationInfo
)
const
{
MOZ_ASSERT
(
compilationInfo
.
sourceObject
!
=
nullptr
)
;
MOZ_ASSERT
(
compilationInfo
.
sourceObject
-
>
source
(
)
!
=
nullptr
)
;
MOZ_ASSERT
(
parser
.
isSome
(
)
)
;
}
void
assertSourceParserAndScriptCreated
(
CompilationInfo
&
compilationInfo
)
{
assertSourceAndParserCreated
(
compilationInfo
)
;
MOZ_ASSERT
(
compilationInfo
.
script
!
=
nullptr
)
;
}
MOZ_MUST_USE
bool
emplaceEmitter
(
CompilationInfo
&
compilationInfo
Maybe
<
BytecodeEmitter
>
&
emitter
SharedContext
*
sharedContext
)
{
return
EmplaceEmitter
(
compilationInfo
emitter
EitherParser
(
parser
.
ptr
(
)
)
sharedContext
)
;
}
MOZ_MUST_USE
bool
createSourceAndParser
(
LifoAllocScope
&
allocScope
CompilationInfo
&
compilationInfo
)
;
MOZ_MUST_USE
bool
createCompleteScript
(
CompilationInfo
&
compilationInfo
)
{
JSContext
*
cx
=
compilationInfo
.
cx
;
RootedObject
global
(
cx
cx
-
>
global
(
)
)
;
uint32_t
toStringStart
=
0
;
uint32_t
len
=
sourceBuffer_
.
length
(
)
;
uint32_t
toStringEnd
=
len
;
return
InternalCreateScript
(
compilationInfo
global
toStringStart
toStringEnd
len
)
;
}
MOZ_MUST_USE
bool
handleParseFailure
(
CompilationInfo
&
compilationInfo
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
)
;
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ScriptCompiler
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
protected
:
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
ScriptCompiler
(
SourceText
<
Unit
>
&
srcBuf
)
:
Base
(
srcBuf
)
{
}
MOZ_MUST_USE
bool
prepareScriptParse
(
LifoAllocScope
&
allocScope
CompilationInfo
&
compilationInfo
)
{
return
Base
:
:
prepareScriptParse
(
allocScope
compilationInfo
)
;
}
JSScript
*
compileScript
(
CompilationInfo
&
compilationInfo
HandleObject
environment
SharedContext
*
sc
)
;
}
;
static
void
tellDebuggerAboutCompiledScript
(
JSContext
*
cx
Handle
<
JSScript
*
>
script
)
{
if
(
cx
-
>
isHelperThreadContext
(
)
)
{
return
;
}
DebugAPI
:
:
onNewScript
(
cx
script
)
;
}
template
<
typename
Unit
>
static
JSScript
*
CreateGlobalScript
(
CompilationInfo
&
compilationInfo
GlobalSharedContext
&
globalsc
JS
:
:
SourceText
<
Unit
>
&
srcBuf
)
{
AutoAssertReportedException
assertException
(
compilationInfo
.
cx
)
;
LifoAllocScope
allocScope
(
&
compilationInfo
.
cx
-
>
tempLifoAlloc
(
)
)
;
frontend
:
:
ScriptCompiler
<
Unit
>
compiler
(
srcBuf
)
;
if
(
!
compiler
.
prepareScriptParse
(
allocScope
compilationInfo
)
)
{
return
nullptr
;
}
if
(
!
compiler
.
compileScript
(
compilationInfo
nullptr
&
globalsc
)
)
{
return
nullptr
;
}
tellDebuggerAboutCompiledScript
(
compilationInfo
.
cx
compilationInfo
.
script
)
;
assertException
.
reset
(
)
;
return
compilationInfo
.
script
;
}
JSScript
*
frontend
:
:
CompileGlobalScript
(
CompilationInfo
&
compilationInfo
GlobalSharedContext
&
globalsc
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CreateGlobalScript
(
compilationInfo
globalsc
srcBuf
)
;
}
JSScript
*
frontend
:
:
CompileGlobalScript
(
CompilationInfo
&
compilationInfo
GlobalSharedContext
&
globalsc
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
#
ifdef
JS_ENABLE_SMOOSH
if
(
compilationInfo
.
cx
-
>
options
(
)
.
trySmoosh
(
)
)
{
bool
unimplemented
=
false
;
auto
script
=
Smoosh
:
:
compileGlobalScript
(
compilationInfo
srcBuf
&
unimplemented
)
;
if
(
!
unimplemented
)
{
return
script
;
}
fprintf
(
stderr
"
Falling
back
!
\
n
"
)
;
}
#
endif
return
CreateGlobalScript
(
compilationInfo
globalsc
srcBuf
)
;
}
template
<
typename
Unit
>
static
JSScript
*
CreateEvalScript
(
CompilationInfo
&
compilationInfo
EvalSharedContext
&
evalsc
JS
:
:
Handle
<
JSObject
*
>
environment
SourceText
<
Unit
>
&
srcBuf
)
{
AutoAssertReportedException
assertException
(
compilationInfo
.
cx
)
;
LifoAllocScope
allocScope
(
&
compilationInfo
.
cx
-
>
tempLifoAlloc
(
)
)
;
frontend
:
:
ScriptCompiler
<
Unit
>
compiler
(
srcBuf
)
;
if
(
!
compiler
.
prepareScriptParse
(
allocScope
compilationInfo
)
)
{
return
nullptr
;
}
if
(
!
compiler
.
compileScript
(
compilationInfo
environment
&
evalsc
)
)
{
return
nullptr
;
}
tellDebuggerAboutCompiledScript
(
compilationInfo
.
cx
compilationInfo
.
script
)
;
assertException
.
reset
(
)
;
return
compilationInfo
.
script
;
}
JSScript
*
frontend
:
:
CompileEvalScript
(
CompilationInfo
&
compilationInfo
EvalSharedContext
&
evalsc
JS
:
:
Handle
<
JSObject
*
>
environment
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CreateEvalScript
(
compilationInfo
evalsc
environment
srcBuf
)
;
}
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ModuleCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
createCompleteScript
;
using
Base
:
:
createSourceAndParser
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
parser
;
public
:
explicit
ModuleCompiler
(
SourceText
<
Unit
>
&
srcBuf
)
:
Base
(
srcBuf
)
{
}
ModuleObject
*
compile
(
CompilationInfo
&
compilationInfo
)
;
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
StandaloneFunctionCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceAndParserCreated
;
using
Base
:
:
createSourceAndParser
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
StandaloneFunctionCompiler
(
SourceText
<
Unit
>
&
srcBuf
)
:
Base
(
srcBuf
)
{
}
MOZ_MUST_USE
bool
prepare
(
LifoAllocScope
&
allocScope
CompilationInfo
&
compilationInfo
)
{
return
createSourceAndParser
(
allocScope
compilationInfo
)
;
}
FunctionNode
*
parse
(
CompilationInfo
&
compilationInfo
HandleFunction
fun
HandleScope
enclosingScope
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
;
MOZ_MUST_USE
bool
compile
(
MutableHandleFunction
fun
CompilationInfo
&
info
FunctionNode
*
parsedFunction
)
;
private
:
MOZ_MUST_USE
bool
createFunctionScript
(
CompilationInfo
&
compilationInfo
HandleObject
function
uint32_t
toStringStart
uint32_t
toStringEnd
)
{
return
InternalCreateScript
(
compilationInfo
function
toStringStart
toStringEnd
sourceBuffer_
.
length
(
)
)
;
}
}
;
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
if
(
errorReporter
.
hasTokenizationStarted
(
)
)
{
line
=
errorReporter
.
options
(
)
.
lineno
;
column
=
errorReporter
.
options
(
)
.
column
;
}
else
{
errorReporter
.
currentLineAndColumn
(
&
line
&
column
)
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
FunctionBox
*
funbox
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
funbox
-
>
extent
.
lineno
funbox
-
>
extent
.
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
ParseNode
*
pn
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
errorReporter
.
lineAndColumnAt
(
pn
-
>
pn_pos
.
begin
&
line
&
column
)
;
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
static
bool
CanLazilyParse
(
const
CompilationInfo
&
compilationInfo
)
{
return
!
compilationInfo
.
options
.
discardSource
&
&
!
compilationInfo
.
options
.
sourceIsLazy
&
&
!
compilationInfo
.
options
.
forceFullParse
(
)
;
}
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
createSourceAndParser
(
LifoAllocScope
&
allocScope
CompilationInfo
&
compilationInfo
)
{
if
(
!
compilationInfo
.
assignSource
(
sourceBuffer_
)
)
{
return
false
;
}
if
(
CanLazilyParse
(
compilationInfo
)
)
{
syntaxParser
.
emplace
(
compilationInfo
.
cx
compilationInfo
.
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
false
compilationInfo
nullptr
nullptr
compilationInfo
.
sourceObject
)
;
if
(
!
syntaxParser
-
>
checkOptions
(
)
)
{
return
false
;
}
}
parser
.
emplace
(
compilationInfo
.
cx
compilationInfo
.
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
true
compilationInfo
syntaxParser
.
ptrOr
(
nullptr
)
nullptr
compilationInfo
.
sourceObject
)
;
parser
-
>
ss
=
compilationInfo
.
sourceObject
-
>
source
(
)
;
return
parser
-
>
checkOptions
(
)
;
}
static
bool
InternalCreateScript
(
CompilationInfo
&
compilationInfo
HandleObject
functionOrGlobal
uint32_t
toStringStart
uint32_t
toStringEnd
uint32_t
sourceBufferLength
)
{
SourceExtent
extent
{
0
sourceBufferLength
toStringStart
toStringEnd
compilationInfo
.
options
.
lineno
compilationInfo
.
options
.
column
}
;
compilationInfo
.
script
=
JSScript
:
:
Create
(
compilationInfo
.
cx
functionOrGlobal
compilationInfo
.
options
compilationInfo
.
sourceObject
extent
)
;
return
compilationInfo
.
script
!
=
nullptr
;
}
static
bool
EmplaceEmitter
(
CompilationInfo
&
compilationInfo
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sharedContext
)
{
BytecodeEmitter
:
:
EmitterMode
emitterMode
=
compilationInfo
.
options
.
selfHostingMode
?
BytecodeEmitter
:
:
SelfHosting
:
BytecodeEmitter
:
:
Normal
;
emitter
.
emplace
(
nullptr
parser
sharedContext
compilationInfo
.
script
nullptr
compilationInfo
.
options
.
lineno
compilationInfo
.
options
.
column
compilationInfo
emitterMode
)
;
return
emitter
-
>
init
(
)
;
}
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
handleParseFailure
(
CompilationInfo
&
compilationInfo
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
)
{
if
(
parser
-
>
hadAbortedSyntaxParse
(
)
)
{
parser
-
>
clearAbortedSyntaxParse
(
)
;
}
else
if
(
parser
-
>
anyChars
.
hadError
(
)
|
|
compilationInfo
.
directives
=
=
newDirectives
)
{
return
false
;
}
parser
-
>
tokenStream
.
rewind
(
startPosition
)
;
MOZ_ASSERT_IF
(
compilationInfo
.
directives
.
strict
(
)
newDirectives
.
strict
(
)
)
;
MOZ_ASSERT_IF
(
compilationInfo
.
directives
.
asmJS
(
)
newDirectives
.
asmJS
(
)
)
;
compilationInfo
.
directives
=
newDirectives
;
return
true
;
}
template
<
typename
Unit
>
JSScript
*
frontend
:
:
ScriptCompiler
<
Unit
>
:
:
compileScript
(
CompilationInfo
&
compilationInfo
HandleObject
environment
SharedContext
*
sc
)
{
assertSourceParserAndScriptCreated
(
compilationInfo
)
;
TokenStreamPosition
startPosition
(
compilationInfo
.
keepAtoms
parser
-
>
tokenStream
)
;
JSContext
*
cx
=
compilationInfo
.
cx
;
for
(
;
;
)
{
ParseNode
*
pn
;
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
parsing
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
if
(
sc
-
>
isEvalContext
(
)
)
{
pn
=
parser
-
>
evalBody
(
sc
-
>
asEvalContext
(
)
)
;
}
else
{
pn
=
parser
-
>
globalBody
(
sc
-
>
asGlobalContext
(
)
)
;
}
}
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
emit
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
if
(
pn
)
{
if
(
!
parser
-
>
publishDeferredFunctions
(
)
)
{
return
nullptr
;
}
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
sc
)
)
{
return
nullptr
;
}
if
(
!
emitter
-
>
emitScript
(
pn
)
)
{
return
nullptr
;
}
break
;
}
if
(
!
handleParseFailure
(
compilationInfo
compilationInfo
.
directives
startPosition
)
)
{
return
nullptr
;
}
compilationInfo
.
usedNames
.
reset
(
)
;
parser
-
>
getTreeHolder
(
)
.
resetFunctionTree
(
)
;
}
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
recordParseEnded
(
)
;
if
(
!
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
tryCompressOffThread
(
cx
)
)
{
return
nullptr
;
}
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
compilationInfo
.
script
;
}
template
<
typename
Unit
>
ModuleObject
*
frontend
:
:
ModuleCompiler
<
Unit
>
:
:
compile
(
CompilationInfo
&
compilationInfo
)
{
if
(
!
createSourceAndParser
(
compilationInfo
.
allocScope
compilationInfo
)
|
|
!
createCompleteScript
(
compilationInfo
)
)
{
return
nullptr
;
}
JSContext
*
cx
=
compilationInfo
.
cx
;
Rooted
<
ModuleObject
*
>
module
(
cx
ModuleObject
:
:
create
(
cx
)
)
;
if
(
!
module
)
{
return
nullptr
;
}
ModuleBuilder
builder
(
cx
parser
.
ptr
(
)
)
;
RootedScope
enclosingScope
(
cx
&
cx
-
>
global
(
)
-
>
emptyGlobalScope
(
)
)
;
ModuleSharedContext
modulesc
(
cx
module
compilationInfo
enclosingScope
builder
)
;
ParseNode
*
pn
=
parser
-
>
moduleBody
(
&
modulesc
)
;
if
(
!
pn
)
{
return
nullptr
;
}
if
(
!
parser
-
>
publishDeferredFunctions
(
)
)
{
return
nullptr
;
}
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
&
modulesc
)
)
{
return
nullptr
;
}
if
(
!
emitter
-
>
emitScript
(
pn
-
>
as
<
ModuleNode
>
(
)
.
body
(
)
)
)
{
return
nullptr
;
}
if
(
!
builder
.
initModule
(
module
)
)
{
return
nullptr
;
}
module
-
>
initScriptSlots
(
compilationInfo
.
script
)
;
module
-
>
initStatusSlot
(
)
;
if
(
!
ModuleObject
:
:
createEnvironment
(
cx
module
)
)
{
return
nullptr
;
}
if
(
!
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
tryCompressOffThread
(
cx
)
)
{
return
nullptr
;
}
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
module
;
}
template
<
typename
Unit
>
FunctionNode
*
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
parse
(
CompilationInfo
&
compilationInfo
HandleFunction
fun
HandleScope
enclosingScope
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
MOZ_ASSERT
(
fun
)
;
MOZ_ASSERT
(
fun
-
>
isTenured
(
)
)
;
assertSourceAndParserCreated
(
compilationInfo
)
;
TokenStreamPosition
startPosition
(
compilationInfo
.
keepAtoms
parser
-
>
tokenStream
)
;
FunctionNode
*
fn
;
do
{
Directives
newDirectives
=
compilationInfo
.
directives
;
fn
=
parser
-
>
standaloneFunction
(
fun
enclosingScope
parameterListEnd
generatorKind
asyncKind
compilationInfo
.
directives
&
newDirectives
)
;
if
(
!
fn
&
&
!
handleParseFailure
(
compilationInfo
newDirectives
startPosition
)
)
{
return
nullptr
;
}
}
while
(
!
fn
)
;
return
fn
;
}
template
<
typename
Unit
>
bool
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
compile
(
MutableHandleFunction
fun
CompilationInfo
&
compilationInfo
FunctionNode
*
parsedFunction
)
{
FunctionBox
*
funbox
=
parsedFunction
-
>
funbox
(
)
;
if
(
funbox
-
>
isInterpreted
(
)
)
{
MOZ_ASSERT
(
fun
=
=
funbox
-
>
function
(
)
)
;
if
(
!
createFunctionScript
(
compilationInfo
fun
funbox
-
>
extent
.
toStringStart
funbox
-
>
extent
.
toStringEnd
)
)
{
return
false
;
}
if
(
!
parser
-
>
publishDeferredFunctions
(
)
)
{
return
false
;
}
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
compilationInfo
emitter
funbox
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitFunctionScript
(
parsedFunction
BytecodeEmitter
:
:
TopLevelFunction
:
:
Yes
)
)
{
return
false
;
}
}
else
{
fun
.
set
(
funbox
-
>
function
(
)
)
;
MOZ_ASSERT
(
IsAsmJSModule
(
fun
)
)
;
}
return
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
tryCompressOffThread
(
compilationInfo
.
cx
)
;
}
ScriptSourceObject
*
frontend
:
:
CreateScriptSourceObject
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
)
{
ScriptSource
*
ss
=
cx
-
>
new_
<
ScriptSource
>
(
)
;
if
(
!
ss
)
{
return
nullptr
;
}
ScriptSourceHolder
ssHolder
(
ss
)
;
if
(
!
ss
-
>
initFromOptions
(
cx
options
)
)
{
return
nullptr
;
}
RootedScriptSourceObject
sso
(
cx
ScriptSourceObject
:
:
create
(
cx
ss
)
)
;
if
(
!
sso
)
{
return
nullptr
;
}
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
ScriptSourceObject
:
:
initFromOptions
(
cx
sso
options
)
)
{
return
nullptr
;
}
}
return
sso
;
}
#
if
defined
(
JS_BUILD_BINAST
)
template
<
class
ParserT
>
static
JSScript
*
CompileGlobalBinASTScriptImpl
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
uint8_t
*
src
size_t
len
JS
:
:
BinASTFormat
format
ScriptSourceObject
*
*
sourceObjectOut
)
{
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationInfo
compilationInfo
(
cx
allocScope
options
)
;
if
(
!
compilationInfo
.
init
(
cx
)
)
{
return
nullptr
;
}
if
(
!
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
setBinASTSourceCopy
(
cx
src
len
)
)
{
return
nullptr
;
}
SourceExtent
extent
(
0
len
0
len
0
0
)
;
RootedScript
script
(
cx
JSScript
:
:
Create
(
cx
cx
-
>
global
(
)
options
compilationInfo
.
sourceObject
extent
)
)
;
if
(
!
script
)
{
return
nullptr
;
}
GlobalSharedContext
globalsc
(
cx
ScopeKind
:
:
Global
compilationInfo
compilationInfo
.
directives
compilationInfo
.
options
.
extraWarningsOption
)
;
frontend
:
:
BinASTParser
<
ParserT
>
parser
(
cx
compilationInfo
options
compilationInfo
.
sourceObject
)
;
ScriptSource
*
ss
=
compilationInfo
.
sourceObject
-
>
source
(
)
;
BinASTSourceMetadata
*
metadata
=
nullptr
;
auto
parsed
=
parser
.
parse
(
&
globalsc
ss
-
>
binASTSource
(
)
ss
-
>
length
(
)
&
metadata
)
;
if
(
parsed
.
isErr
(
)
)
{
return
nullptr
;
}
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
setBinASTSourceMetadata
(
metadata
)
;
BytecodeEmitter
bce
(
nullptr
&
parser
&
globalsc
script
nullptr
0
0
compilationInfo
)
;
if
(
!
bce
.
init
(
)
)
{
return
nullptr
;
}
ParseNode
*
pn
=
parsed
.
unwrap
(
)
;
if
(
!
bce
.
emitScript
(
pn
)
)
{
return
nullptr
;
}
if
(
sourceObjectOut
)
{
*
sourceObjectOut
=
compilationInfo
.
sourceObject
;
}
tellDebuggerAboutCompiledScript
(
cx
script
)
;
assertException
.
reset
(
)
;
return
script
;
}
JSScript
*
frontend
:
:
CompileGlobalBinASTScript
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
uint8_t
*
src
size_t
len
JS
:
:
BinASTFormat
format
ScriptSourceObject
*
*
sourceObjectOut
)
{
if
(
format
=
=
JS
:
:
BinASTFormat
:
:
Multipart
)
{
return
CompileGlobalBinASTScriptImpl
<
BinASTTokenReaderMultipart
>
(
cx
options
src
len
format
sourceObjectOut
)
;
}
MOZ_ASSERT
(
format
=
=
JS
:
:
BinASTFormat
:
:
Context
)
;
return
CompileGlobalBinASTScriptImpl
<
BinASTTokenReaderContext
>
(
cx
options
src
len
format
sourceObjectOut
)
;
}
#
endif
template
<
typename
Unit
>
static
ModuleObject
*
InternalParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
Unit
>
&
srcBuf
ScriptSourceObject
*
*
sourceObjectOut
)
{
MOZ_ASSERT
(
srcBuf
.
get
(
)
)
;
MOZ_ASSERT_IF
(
sourceObjectOut
*
sourceObjectOut
=
=
nullptr
)
;
AutoAssertReportedException
assertException
(
cx
)
;
CompileOptions
options
(
cx
optionsInput
)
;
options
.
setForceStrictMode
(
)
;
options
.
setIsRunOnce
(
true
)
;
options
.
allowHTMLComments
=
false
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationInfo
compilationInfo
(
cx
allocScope
options
)
;
if
(
!
compilationInfo
.
init
(
cx
)
)
{
return
nullptr
;
}
if
(
sourceObjectOut
)
{
*
sourceObjectOut
=
compilationInfo
.
sourceObject
;
}
ModuleCompiler
<
Unit
>
compiler
(
srcBuf
)
;
Rooted
<
ModuleObject
*
>
module
(
cx
compiler
.
compile
(
compilationInfo
)
)
;
if
(
!
module
)
{
return
nullptr
;
}
tellDebuggerAboutCompiledScript
(
cx
compilationInfo
.
script
)
;
assertException
.
reset
(
)
;
return
module
;
}
ModuleObject
*
frontend
:
:
ParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
char16_t
>
&
srcBuf
ScriptSourceObject
*
*
sourceObjectOut
)
{
return
InternalParseModule
(
cx
optionsInput
srcBuf
sourceObjectOut
)
;
}
ModuleObject
*
frontend
:
:
ParseModule
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
Utf8Unit
>
&
srcBuf
ScriptSourceObject
*
*
sourceObjectOut
)
{
return
InternalParseModule
(
cx
optionsInput
srcBuf
sourceObjectOut
)
;
}
template
<
typename
Unit
>
static
ModuleObject
*
CreateModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
srcBuf
)
{
AutoAssertReportedException
assertException
(
cx
)
;
if
(
!
GlobalObject
:
:
ensureModulePrototypesCreated
(
cx
cx
-
>
global
(
)
)
)
{
return
nullptr
;
}
RootedModuleObject
module
(
cx
ParseModule
(
cx
options
srcBuf
nullptr
)
)
;
if
(
!
module
)
{
return
nullptr
;
}
if
(
!
ModuleObject
:
:
Freeze
(
cx
module
)
)
{
return
nullptr
;
}
assertException
.
reset
(
)
;
return
module
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CreateModule
(
cx
options
srcBuf
)
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
return
CreateModule
(
cx
options
srcBuf
)
;
}
class
MOZ_STACK_CLASS
AutoAssertFunctionDelazificationCompletion
{
#
ifdef
DEBUG
RootedFunction
fun_
;
#
endif
void
checkIsLazy
(
)
{
MOZ_ASSERT
(
fun_
-
>
isInterpretedLazy
(
)
"
Function
should
remain
lazy
"
)
;
MOZ_ASSERT
(
!
fun_
-
>
lazyScript
(
)
-
>
hasScript
(
)
"
LazyScript
should
not
have
a
script
"
)
;
}
public
:
AutoAssertFunctionDelazificationCompletion
(
JSContext
*
cx
HandleFunction
fun
)
#
ifdef
DEBUG
:
fun_
(
cx
fun
)
#
endif
{
checkIsLazy
(
)
;
}
~
AutoAssertFunctionDelazificationCompletion
(
)
{
#
ifdef
DEBUG
if
(
!
fun_
)
{
return
;
}
#
endif
checkIsLazy
(
)
;
}
void
complete
(
)
{
MOZ_ASSERT
(
fun_
-
>
nonLazyScript
(
)
)
;
#
ifdef
DEBUG
fun_
=
nullptr
;
#
endif
}
}
;
static
void
CheckFlagsOnDelazification
(
uint32_t
lazy
uint32_t
nonLazy
)
{
#
ifdef
DEBUG
constexpr
uint32_t
NonLazyFlagsMask
=
uint32_t
(
BaseScript
:
:
ImmutableFlags
:
:
HasNonSyntacticScope
)
|
uint32_t
(
BaseScript
:
:
ImmutableFlags
:
:
FunctionHasExtraBodyVarScope
)
|
uint32_t
(
BaseScript
:
:
ImmutableFlags
:
:
NeedsFunctionEnvironmentObjects
)
;
constexpr
uint32_t
CustomFlagsMask
=
uint32_t
(
BaseScript
:
:
ImmutableFlags
:
:
IsLazyScript
)
|
uint32_t
(
BaseScript
:
:
ImmutableFlags
:
:
TreatAsRunOnce
)
;
constexpr
uint32_t
MatchedFlagsMask
=
~
(
NonLazyFlagsMask
|
CustomFlagsMask
)
;
MOZ_ASSERT
(
(
lazy
&
NonLazyFlagsMask
)
=
=
0
)
;
MOZ_ASSERT
(
(
lazy
&
MatchedFlagsMask
)
=
=
(
nonLazy
&
MatchedFlagsMask
)
)
;
#
endif
}
template
<
typename
Unit
>
static
bool
CompileLazyFunctionImpl
(
JSContext
*
cx
Handle
<
LazyScript
*
>
lazy
const
Unit
*
units
size_t
length
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
lazy
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
lazy
-
>
enclosingScriptHasEverBeenCompiled
(
)
)
;
MOZ_ASSERT
(
!
lazy
-
>
isBinAST
(
)
)
;
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
JSFunction
*
>
fun
(
cx
lazy
-
>
function
(
)
)
;
AutoAssertFunctionDelazificationCompletion
delazificationCompletion
(
cx
fun
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
options
.
setMutedErrors
(
lazy
-
>
mutedErrors
(
)
)
.
setFileAndLine
(
lazy
-
>
filename
(
)
lazy
-
>
lineno
(
)
)
.
setColumn
(
lazy
-
>
column
(
)
)
.
setScriptSourceOffset
(
lazy
-
>
sourceStart
(
)
)
.
setNoScriptRval
(
false
)
.
setSelfHostingMode
(
false
)
;
if
(
!
lazy
-
>
scriptSource
(
)
-
>
parseEnded
(
)
.
IsNull
(
)
)
{
const
mozilla
:
:
TimeDuration
delta
=
ReallyNow
(
)
-
lazy
-
>
scriptSource
(
)
-
>
parseEnded
(
)
;
const
int
HISTOGRAM
=
cx
-
>
runningWithTrustedPrincipals
(
)
?
JS_TELEMETRY_PRIVILEGED_PARSER_COMPILE_LAZY_AFTER_MS
:
JS_TELEMETRY_WEB_PARSER_COMPILE_LAZY_AFTER_MS
;
cx
-
>
runtime
(
)
-
>
addTelemetry
(
HISTOGRAM
delta
.
ToMilliseconds
(
)
)
;
}
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationInfo
compilationInfo
(
cx
allocScope
options
)
;
compilationInfo
.
initFromSourceObject
(
lazy
-
>
sourceObject
(
)
)
;
Parser
<
FullParseHandler
Unit
>
parser
(
cx
options
units
length
true
compilationInfo
nullptr
lazy
compilationInfo
.
sourceObject
)
;
if
(
!
parser
.
checkOptions
(
)
)
{
return
false
;
}
FunctionNode
*
pn
=
parser
.
standaloneLazyFunction
(
fun
lazy
-
>
toStringStart
(
)
lazy
-
>
strict
(
)
lazy
-
>
generatorKind
(
)
lazy
-
>
asyncKind
(
)
)
;
if
(
!
pn
)
{
return
false
;
}
if
(
!
parser
.
publishDeferredFunctions
(
)
)
{
return
false
;
}
Rooted
<
JSScript
*
>
script
(
cx
JSScript
:
:
CreateFromLazy
(
cx
lazy
)
)
;
if
(
!
script
)
{
return
false
;
}
FieldInitializers
fieldInitializers
=
FieldInitializers
:
:
Invalid
(
)
;
if
(
fun
-
>
isClassConstructor
(
)
)
{
fieldInitializers
=
lazy
-
>
getFieldInitializers
(
)
;
}
BytecodeEmitter
bce
(
nullptr
&
parser
pn
-
>
funbox
(
)
script
lazy
lazy
-
>
lineno
(
)
lazy
-
>
column
(
)
compilationInfo
BytecodeEmitter
:
:
LazyFunction
fieldInitializers
)
;
if
(
!
bce
.
init
(
pn
-
>
pn_pos
)
)
{
return
false
;
}
if
(
!
bce
.
emitFunctionScript
(
pn
BytecodeEmitter
:
:
TopLevelFunction
:
:
Yes
)
)
{
return
false
;
}
CheckFlagsOnDelazification
(
lazy
-
>
immutableFlags
(
)
script
-
>
immutableFlags
(
)
)
;
delazificationCompletion
.
complete
(
)
;
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
CompileLazyFunction
(
JSContext
*
cx
Handle
<
LazyScript
*
>
lazy
const
char16_t
*
units
size_t
length
)
{
return
CompileLazyFunctionImpl
(
cx
lazy
units
length
)
;
}
bool
frontend
:
:
CompileLazyFunction
(
JSContext
*
cx
Handle
<
LazyScript
*
>
lazy
const
Utf8Unit
*
units
size_t
length
)
{
return
CompileLazyFunctionImpl
(
cx
lazy
units
length
)
;
}
#
ifdef
JS_BUILD_BINAST
template
<
class
ParserT
>
static
bool
CompileLazyBinASTFunctionImpl
(
JSContext
*
cx
Handle
<
LazyScript
*
>
lazy
const
uint8_t
*
buf
size_t
length
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
lazy
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
lazy
-
>
enclosingScriptHasEverBeenCompiled
(
)
)
;
MOZ_ASSERT
(
lazy
-
>
isBinAST
(
)
)
;
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
JSFunction
*
>
fun
(
cx
lazy
-
>
function
(
)
)
;
AutoAssertFunctionDelazificationCompletion
delazificationCompletion
(
cx
fun
)
;
CompileOptions
options
(
cx
)
;
options
.
setMutedErrors
(
lazy
-
>
mutedErrors
(
)
)
.
setFileAndLine
(
lazy
-
>
filename
(
)
lazy
-
>
lineno
(
)
)
.
setColumn
(
lazy
-
>
column
(
)
)
.
setScriptSourceOffset
(
lazy
-
>
sourceStart
(
)
)
.
setNoScriptRval
(
false
)
.
setSelfHostingMode
(
false
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationInfo
compilationInfo
(
cx
allocScope
options
)
;
compilationInfo
.
initFromSourceObject
(
lazy
-
>
sourceObject
(
)
)
;
RootedScript
script
(
cx
JSScript
:
:
CreateFromLazy
(
cx
lazy
)
)
;
if
(
!
script
)
{
return
false
;
}
frontend
:
:
BinASTParser
<
ParserT
>
parser
(
cx
compilationInfo
options
compilationInfo
.
sourceObject
lazy
)
;
auto
parsed
=
parser
.
parseLazyFunction
(
lazy
-
>
scriptSource
(
)
lazy
-
>
sourceStart
(
)
)
;
if
(
parsed
.
isErr
(
)
)
{
return
false
;
}
FunctionNode
*
pn
=
parsed
.
unwrap
(
)
;
BytecodeEmitter
bce
(
nullptr
&
parser
pn
-
>
funbox
(
)
script
lazy
lazy
-
>
lineno
(
)
lazy
-
>
column
(
)
compilationInfo
BytecodeEmitter
:
:
LazyFunction
)
;
if
(
!
bce
.
init
(
pn
-
>
pn_pos
)
)
{
return
false
;
}
if
(
!
bce
.
emitFunctionScript
(
pn
BytecodeEmitter
:
:
TopLevelFunction
:
:
Yes
)
)
{
return
false
;
}
delazificationCompletion
.
complete
(
)
;
assertException
.
reset
(
)
;
return
script
;
}
bool
frontend
:
:
CompileLazyBinASTFunction
(
JSContext
*
cx
Handle
<
LazyScript
*
>
lazy
const
uint8_t
*
buf
size_t
length
)
{
if
(
lazy
-
>
scriptSource
(
)
-
>
binASTSourceMetadata
(
)
-
>
isMultipart
(
)
)
{
return
CompileLazyBinASTFunctionImpl
<
BinASTTokenReaderMultipart
>
(
cx
lazy
buf
length
)
;
}
MOZ_ASSERT
(
lazy
-
>
scriptSource
(
)
-
>
binASTSourceMetadata
(
)
-
>
isContext
(
)
)
;
return
CompileLazyBinASTFunctionImpl
<
BinASTTokenReaderContext
>
(
cx
lazy
buf
length
)
;
}
#
endif
static
bool
CompileStandaloneFunction
(
JSContext
*
cx
MutableHandleFunction
fun
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
HandleScope
enclosingScope
=
nullptr
)
{
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationInfo
compilationInfo
(
cx
allocScope
options
)
;
if
(
!
compilationInfo
.
init
(
cx
)
)
{
return
false
;
}
StandaloneFunctionCompiler
<
char16_t
>
compiler
(
srcBuf
)
;
if
(
!
compiler
.
prepare
(
allocScope
compilationInfo
)
)
{
return
false
;
}
RootedScope
scope
(
cx
enclosingScope
)
;
if
(
!
scope
)
{
scope
=
&
cx
-
>
global
(
)
-
>
emptyGlobalScope
(
)
;
}
FunctionNode
*
parsedFunction
=
compiler
.
parse
(
compilationInfo
fun
scope
generatorKind
asyncKind
parameterListEnd
)
;
if
(
!
parsedFunction
|
|
!
compiler
.
compile
(
fun
compilationInfo
parsedFunction
)
)
{
return
false
;
}
if
(
compilationInfo
.
script
)
{
if
(
parameterListEnd
)
{
compilationInfo
.
sourceObject
-
>
source
(
)
-
>
setParameterListEnd
(
*
parameterListEnd
)
;
}
tellDebuggerAboutCompiledScript
(
cx
compilationInfo
.
script
)
;
}
assertException
.
reset
(
)
;
return
true
;
}
bool
frontend
:
:
CompileStandaloneFunction
(
JSContext
*
cx
MutableHandleFunction
fun
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
HandleScope
enclosingScope
)
{
return
CompileStandaloneFunction
(
cx
fun
options
srcBuf
parameterListEnd
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
SyncFunction
enclosingScope
)
;
}
bool
frontend
:
:
CompileStandaloneGenerator
(
JSContext
*
cx
MutableHandleFunction
fun
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
return
CompileStandaloneFunction
(
cx
fun
options
srcBuf
parameterListEnd
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
SyncFunction
)
;
}
bool
frontend
:
:
CompileStandaloneAsyncFunction
(
JSContext
*
cx
MutableHandleFunction
fun
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
return
CompileStandaloneFunction
(
cx
fun
options
srcBuf
parameterListEnd
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
bool
frontend
:
:
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
MutableHandleFunction
fun
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
return
CompileStandaloneFunction
(
cx
fun
options
srcBuf
parameterListEnd
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
bool
frontend
:
:
CompilationInfo
:
:
init
(
JSContext
*
cx
)
{
sourceObject
=
CreateScriptSourceObject
(
cx
options
)
;
return
!
!
sourceObject
;
}
