#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EitherParser
.
h
"
#
include
"
frontend
/
ErrorReporter
.
h
"
#
include
"
frontend
/
FoldConstants
.
h
"
#
ifdef
JS_ENABLE_SMOOSH
#
include
"
frontend
/
Frontend2
.
h
"
#
endif
#
include
"
frontend
/
ModuleSharedContext
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
GeneratorAndAsyncKind
.
h
"
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
HelperThreadState
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
ModuleBuilder
.
h
"
#
include
"
vm
/
TraceLogging
.
h
"
#
include
"
wasm
/
AsmJS
.
h
"
#
include
"
debugger
/
DebugAPI
-
inl
.
h
"
#
include
"
vm
/
EnvironmentObject
-
inl
.
h
"
#
include
"
vm
/
GeckoProfiler
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
Utf8Unit
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
ReadOnlyCompileOptions
;
using
JS
:
:
SourceText
;
class
MOZ_RAII
AutoAssertReportedException
{
#
ifdef
DEBUG
JSContext
*
cx_
;
bool
check_
;
public
:
explicit
AutoAssertReportedException
(
JSContext
*
cx
)
:
cx_
(
cx
)
check_
(
true
)
{
}
void
reset
(
)
{
check_
=
false
;
}
~
AutoAssertReportedException
(
)
{
if
(
!
check_
)
{
return
;
}
if
(
!
cx_
-
>
isHelperThreadContext
(
)
)
{
MOZ_ASSERT
(
cx_
-
>
isExceptionPending
(
)
)
;
return
;
}
ParseTask
*
task
=
cx_
-
>
parseTask
(
)
;
MOZ_ASSERT
(
task
-
>
outOfMemory
|
|
task
-
>
overRecursed
|
|
!
task
-
>
errors
.
empty
(
)
)
;
}
#
else
public
:
explicit
AutoAssertReportedException
(
JSContext
*
)
{
}
void
reset
(
)
{
}
#
endif
}
;
static
bool
EmplaceEmitter
(
CompilationState
&
compilationState
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sc
)
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
SourceAwareCompiler
{
protected
:
SourceText
<
Unit
>
&
sourceBuffer_
;
CompilationState
compilationState_
;
Maybe
<
Parser
<
SyntaxParseHandler
Unit
>
>
syntaxParser
;
Maybe
<
Parser
<
FullParseHandler
Unit
>
>
parser
;
using
TokenStreamPosition
=
frontend
:
:
TokenStreamPosition
<
Unit
>
;
protected
:
explicit
SourceAwareCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
CompilationInput
&
input
SourceText
<
Unit
>
&
sourceBuffer
)
:
sourceBuffer_
(
sourceBuffer
)
compilationState_
(
cx
allocScope
input
)
{
MOZ_ASSERT
(
sourceBuffer_
.
get
(
)
!
=
nullptr
)
;
}
[
[
nodiscard
]
]
bool
init
(
JSContext
*
cx
InheritThis
inheritThis
=
InheritThis
:
:
No
JSObject
*
enclosingEnv
=
nullptr
)
{
if
(
!
compilationState_
.
init
(
cx
inheritThis
enclosingEnv
)
)
{
return
false
;
}
return
createSourceAndParser
(
cx
)
;
}
[
[
nodiscard
]
]
bool
createSourceAndParser
(
JSContext
*
cx
)
;
void
assertSourceAndParserCreated
(
)
const
{
MOZ_ASSERT
(
compilationState_
.
source
!
=
nullptr
)
;
MOZ_ASSERT
(
parser
.
isSome
(
)
)
;
}
void
assertSourceParserAndScriptCreated
(
)
{
assertSourceAndParserCreated
(
)
;
}
[
[
nodiscard
]
]
bool
emplaceEmitter
(
Maybe
<
BytecodeEmitter
>
&
emitter
SharedContext
*
sharedContext
)
{
return
EmplaceEmitter
(
compilationState_
emitter
EitherParser
(
parser
.
ptr
(
)
)
sharedContext
)
;
}
bool
canHandleParseFailure
(
const
Directives
&
newDirectives
)
;
void
handleParseFailure
(
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
CompilationState
:
:
RewindToken
&
startObj
)
;
public
:
CompilationState
&
compilationState
(
)
{
return
compilationState_
;
}
;
ExtensibleCompilationStencil
&
stencil
(
)
{
return
compilationState_
;
}
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ScriptCompiler
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
protected
:
using
Base
:
:
compilationState_
;
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
canHandleParseFailure
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
ScriptCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
CompilationInput
&
input
SourceText
<
Unit
>
&
sourceBuffer
)
:
Base
(
cx
allocScope
input
sourceBuffer
)
{
}
using
Base
:
:
init
;
using
Base
:
:
stencil
;
[
[
nodiscard
]
]
bool
compile
(
JSContext
*
cx
SharedContext
*
sc
)
;
}
;
#
ifdef
JS_ENABLE_SMOOSH
static
bool
TrySmoosh
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
UniquePtr
<
CompilationStencil
>
&
stencilOut
)
{
MOZ_ASSERT
(
!
stencilOut
)
;
if
(
!
cx
-
>
options
(
)
.
trySmoosh
(
)
)
{
return
true
;
}
JSRuntime
*
rt
=
cx
-
>
runtime
(
)
;
if
(
!
Smoosh
:
:
tryCompileGlobalScriptToStencil
(
cx
input
srcBuf
stencilOut
)
)
{
return
false
;
}
if
(
cx
-
>
options
(
)
.
trackNotImplemented
(
)
)
{
if
(
stencilOut
)
{
rt
-
>
parserWatcherFile
.
put
(
"
1
"
)
;
}
else
{
rt
-
>
parserWatcherFile
.
put
(
"
0
"
)
;
}
}
if
(
!
stencilOut
)
{
fprintf
(
stderr
"
Falling
back
!
\
n
"
)
;
return
true
;
}
return
stencilOut
-
>
source
-
>
assignSource
(
cx
input
.
options
srcBuf
)
;
}
static
bool
TrySmoosh
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
UniquePtr
<
CompilationStencil
>
&
stencilOut
)
{
MOZ_ASSERT
(
!
stencilOut
)
;
return
true
;
}
#
endif
template
<
typename
Unit
>
[
[
nodiscard
]
]
static
bool
CompileGlobalScriptToStencilAndMaybeInstantiate
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
Unit
>
&
srcBuf
ScopeKind
scopeKind
UniquePtr
<
CompilationStencil
>
*
stencilOut
CompilationGCOutput
*
gcOutputOut
)
{
MOZ_ASSERT_IF
(
stencilOut
!
gcOutputOut
)
;
MOZ_ASSERT_IF
(
!
stencilOut
gcOutputOut
)
;
#
ifdef
JS_ENABLE_SMOOSH
{
UniquePtr
<
CompilationStencil
>
stencil
;
if
(
!
TrySmoosh
(
cx
input
srcBuf
stencil
)
)
{
return
false
;
}
if
(
stencil
)
{
if
(
stencilOut
)
{
*
stencilOut
=
std
:
:
move
(
stencil
)
;
}
{
MOZ_ASSERT
(
gcOutputOut
)
;
if
(
!
InstantiateStencils
(
cx
input
*
stencil
*
gcOutputOut
)
)
{
return
false
;
}
}
return
true
;
}
}
#
endif
if
(
input
.
options
.
selfHostingMode
)
{
if
(
!
input
.
initForSelfHostingGlobal
(
cx
)
)
{
return
false
;
}
}
else
{
if
(
!
input
.
initForGlobal
(
cx
)
)
{
return
false
;
}
}
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
ScriptCompiler
<
Unit
>
compiler
(
cx
allocScope
input
srcBuf
)
;
if
(
!
compiler
.
init
(
cx
)
)
{
return
false
;
}
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
srcBuf
.
length
(
)
input
.
options
.
lineno
input
.
options
.
column
)
;
GlobalSharedContext
globalsc
(
cx
scopeKind
input
.
options
compiler
.
compilationState
(
)
.
directives
extent
)
;
if
(
!
compiler
.
compile
(
cx
&
globalsc
)
)
{
return
false
;
}
if
(
stencilOut
)
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
emit
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
auto
stencil
=
cx
-
>
make_unique
<
CompilationStencil
>
(
input
)
;
if
(
!
stencil
)
{
return
false
;
}
if
(
!
compiler
.
stencil
(
)
.
finish
(
cx
*
stencil
)
)
{
return
false
;
}
*
stencilOut
=
std
:
:
move
(
stencil
)
;
}
else
{
MOZ_ASSERT
(
gcOutputOut
)
;
BorrowingCompilationStencil
borrowingStencil
(
compiler
.
stencil
(
)
)
;
if
(
!
InstantiateStencils
(
cx
input
borrowingStencil
*
gcOutputOut
)
)
{
return
false
;
}
}
assertException
.
reset
(
)
;
return
true
;
}
template
<
typename
Unit
>
static
UniquePtr
<
CompilationStencil
>
CompileGlobalScriptToStencilImpl
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
Unit
>
&
srcBuf
ScopeKind
scopeKind
)
{
UniquePtr
<
CompilationStencil
>
stencil
;
if
(
!
CompileGlobalScriptToStencilAndMaybeInstantiate
(
cx
input
srcBuf
scopeKind
&
stencil
nullptr
)
)
{
return
nullptr
;
}
return
stencil
;
}
UniquePtr
<
CompilationStencil
>
frontend
:
:
CompileGlobalScriptToStencil
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
{
return
CompileGlobalScriptToStencilImpl
(
cx
input
srcBuf
scopeKind
)
;
}
UniquePtr
<
CompilationStencil
>
frontend
:
:
CompileGlobalScriptToStencil
(
JSContext
*
cx
CompilationInput
&
input
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
{
return
CompileGlobalScriptToStencilImpl
(
cx
input
srcBuf
scopeKind
)
;
}
bool
frontend
:
:
InstantiateStencils
(
JSContext
*
cx
CompilationInput
&
input
const
CompilationStencil
&
stencil
CompilationGCOutput
&
gcOutput
CompilationGCOutput
*
gcOutputForDelazification
)
{
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
stencil
instantiate
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
if
(
!
CompilationStencil
:
:
instantiateStencils
(
cx
input
stencil
gcOutput
gcOutputForDelazification
)
)
{
return
false
;
}
}
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
stencil
.
source
-
>
tryCompressOffThread
(
cx
)
)
{
return
false
;
}
Rooted
<
JSScript
*
>
script
(
cx
gcOutput
.
script
)
;
if
(
!
input
.
options
.
hideScriptFromDebugger
)
{
DebugAPI
:
:
onNewScript
(
cx
script
)
;
}
}
return
true
;
}
bool
frontend
:
:
PrepareForInstantiate
(
JSContext
*
cx
CompilationInput
&
input
const
CompilationStencil
&
stencil
CompilationGCOutput
&
gcOutput
CompilationGCOutput
*
gcOutputForDelazification
)
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
stencil
instantiate
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
return
CompilationStencil
:
:
prepareForInstantiate
(
cx
input
stencil
gcOutput
gcOutputForDelazification
)
;
}
template
<
typename
Unit
>
static
JSScript
*
CompileGlobalScriptImpl
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Unit
>
&
srcBuf
ScopeKind
scopeKind
)
{
Rooted
<
CompilationInput
>
input
(
cx
CompilationInput
(
options
)
)
;
Rooted
<
frontend
:
:
CompilationGCOutput
>
gcOutput
(
cx
)
;
if
(
!
CompileGlobalScriptToStencilAndMaybeInstantiate
(
cx
input
.
get
(
)
srcBuf
scopeKind
nullptr
gcOutput
.
address
(
)
)
)
{
return
nullptr
;
}
return
gcOutput
.
get
(
)
.
script
;
}
JSScript
*
frontend
:
:
CompileGlobalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
{
return
CompileGlobalScriptImpl
(
cx
options
srcBuf
scopeKind
)
;
}
JSScript
*
frontend
:
:
CompileGlobalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
{
return
CompileGlobalScriptImpl
(
cx
options
srcBuf
scopeKind
)
;
}
template
<
typename
Unit
>
static
JSScript
*
CompileEvalScriptImpl
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Unit
>
&
srcBuf
JS
:
:
Handle
<
js
:
:
Scope
*
>
enclosingScope
JS
:
:
Handle
<
JSObject
*
>
enclosingEnv
)
{
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
CompilationInput
>
input
(
cx
CompilationInput
(
options
)
)
;
if
(
!
input
.
get
(
)
.
initForEval
(
cx
enclosingScope
)
)
{
return
nullptr
;
}
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
ScriptCompiler
<
Unit
>
compiler
(
cx
allocScope
input
.
get
(
)
srcBuf
)
;
if
(
!
compiler
.
init
(
cx
InheritThis
:
:
Yes
enclosingEnv
)
)
{
return
nullptr
;
}
uint32_t
len
=
srcBuf
.
length
(
)
;
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
len
options
.
lineno
options
.
column
)
;
EvalSharedContext
evalsc
(
cx
compiler
.
compilationState
(
)
extent
)
;
if
(
!
compiler
.
compile
(
cx
&
evalsc
)
)
{
return
nullptr
;
}
Rooted
<
CompilationGCOutput
>
gcOutput
(
cx
)
;
{
BorrowingCompilationStencil
borrowingStencil
(
compiler
.
stencil
(
)
)
;
if
(
!
InstantiateStencils
(
cx
input
.
get
(
)
borrowingStencil
gcOutput
.
get
(
)
)
)
{
return
nullptr
;
}
}
assertException
.
reset
(
)
;
return
gcOutput
.
get
(
)
.
script
;
}
JSScript
*
frontend
:
:
CompileEvalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
Handle
<
js
:
:
Scope
*
>
enclosingScope
JS
:
:
Handle
<
JSObject
*
>
enclosingEnv
)
{
return
CompileEvalScriptImpl
(
cx
options
srcBuf
enclosingScope
enclosingEnv
)
;
}
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
ModuleCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceParserAndScriptCreated
;
using
Base
:
:
compilationState_
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
parser
;
public
:
explicit
ModuleCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
CompilationInput
&
input
SourceText
<
Unit
>
&
sourceBuffer
)
:
Base
(
cx
allocScope
input
sourceBuffer
)
{
}
using
Base
:
:
init
;
using
Base
:
:
stencil
;
[
[
nodiscard
]
]
bool
compile
(
JSContext
*
cx
)
;
}
;
template
<
typename
Unit
>
class
MOZ_STACK_CLASS
frontend
:
:
StandaloneFunctionCompiler
final
:
public
SourceAwareCompiler
<
Unit
>
{
using
Base
=
SourceAwareCompiler
<
Unit
>
;
using
Base
:
:
assertSourceAndParserCreated
;
using
Base
:
:
canHandleParseFailure
;
using
Base
:
:
compilationState_
;
using
Base
:
:
emplaceEmitter
;
using
Base
:
:
handleParseFailure
;
using
Base
:
:
parser
;
using
Base
:
:
sourceBuffer_
;
using
typename
Base
:
:
TokenStreamPosition
;
public
:
explicit
StandaloneFunctionCompiler
(
JSContext
*
cx
LifoAllocScope
&
allocScope
CompilationInput
&
input
SourceText
<
Unit
>
&
sourceBuffer
)
:
Base
(
cx
allocScope
input
sourceBuffer
)
{
}
using
Base
:
:
init
;
using
Base
:
:
stencil
;
private
:
FunctionNode
*
parse
(
JSContext
*
cx
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
;
public
:
[
[
nodiscard
]
]
bool
compile
(
JSContext
*
cx
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
;
}
;
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
if
(
errorReporter
.
hasTokenizationStarted
(
)
)
{
line
=
errorReporter
.
options
(
)
.
lineno
;
column
=
errorReporter
.
options
(
)
.
column
;
}
else
{
errorReporter
.
currentLineAndColumn
(
&
line
&
column
)
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
FunctionBox
*
funbox
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
funbox
-
>
extent
(
)
.
lineno
funbox
-
>
extent
(
)
.
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
AutoFrontendTraceLog
:
:
AutoFrontendTraceLog
(
JSContext
*
cx
const
TraceLoggerTextId
id
const
ErrorReporter
&
errorReporter
ParseNode
*
pn
)
#
ifdef
JS_TRACE_LOGGING
:
logger_
(
TraceLoggerForCurrentThread
(
cx
)
)
{
if
(
!
logger_
)
{
return
;
}
uint32_t
line
column
;
errorReporter
.
lineAndColumnAt
(
pn
-
>
pn_pos
.
begin
&
line
&
column
)
;
frontendEvent_
.
emplace
(
TraceLogger_Frontend
errorReporter
.
getFilename
(
)
line
column
)
;
frontendLog_
.
emplace
(
logger_
*
frontendEvent_
)
;
typeLog_
.
emplace
(
logger_
id
)
;
}
#
else
{
}
#
endif
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
createSourceAndParser
(
JSContext
*
cx
)
{
const
auto
&
options
=
compilationState_
.
input
.
options
;
if
(
!
compilationState_
.
source
-
>
assignSource
(
cx
options
sourceBuffer_
)
)
{
return
false
;
}
if
(
CanLazilyParse
(
options
)
)
{
syntaxParser
.
emplace
(
cx
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
false
compilationState_
nullptr
)
;
if
(
!
syntaxParser
-
>
checkOptions
(
)
)
{
return
false
;
}
}
parser
.
emplace
(
cx
options
sourceBuffer_
.
units
(
)
sourceBuffer_
.
length
(
)
true
compilationState_
syntaxParser
.
ptrOr
(
nullptr
)
)
;
parser
-
>
ss
=
compilationState_
.
source
.
get
(
)
;
return
parser
-
>
checkOptions
(
)
;
}
static
bool
EmplaceEmitter
(
CompilationState
&
compilationState
Maybe
<
BytecodeEmitter
>
&
emitter
const
EitherParser
&
parser
SharedContext
*
sc
)
{
BytecodeEmitter
:
:
EmitterMode
emitterMode
=
sc
-
>
selfHosted
(
)
?
BytecodeEmitter
:
:
SelfHosting
:
BytecodeEmitter
:
:
Normal
;
emitter
.
emplace
(
nullptr
parser
sc
compilationState
emitterMode
)
;
return
emitter
-
>
init
(
)
;
}
template
<
typename
Unit
>
bool
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
canHandleParseFailure
(
const
Directives
&
newDirectives
)
{
return
!
parser
-
>
anyChars
.
hadError
(
)
&
&
compilationState_
.
directives
!
=
newDirectives
;
}
template
<
typename
Unit
>
void
frontend
:
:
SourceAwareCompiler
<
Unit
>
:
:
handleParseFailure
(
const
Directives
&
newDirectives
TokenStreamPosition
&
startPosition
CompilationState
:
:
RewindToken
&
startObj
)
{
MOZ_ASSERT
(
canHandleParseFailure
(
newDirectives
)
)
;
parser
-
>
tokenStream
.
rewind
(
startPosition
)
;
compilationState_
.
rewind
(
startObj
)
;
MOZ_ASSERT_IF
(
compilationState_
.
directives
.
strict
(
)
newDirectives
.
strict
(
)
)
;
MOZ_ASSERT_IF
(
compilationState_
.
directives
.
asmJS
(
)
newDirectives
.
asmJS
(
)
)
;
compilationState_
.
directives
=
newDirectives
;
}
template
<
typename
Unit
>
bool
frontend
:
:
ScriptCompiler
<
Unit
>
:
:
compile
(
JSContext
*
cx
SharedContext
*
sc
)
{
assertSourceParserAndScriptCreated
(
)
;
TokenStreamPosition
startPosition
(
parser
-
>
tokenStream
)
;
MOZ_ASSERT
(
compilationState_
.
scriptData
.
length
(
)
=
=
CompilationStencil
:
:
TopLevelIndex
)
;
if
(
!
compilationState_
.
scriptData
.
emplaceBack
(
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
compilationState_
.
scriptExtra
.
emplaceBack
(
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
ParseNode
*
pn
;
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
parsing
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
if
(
sc
-
>
isEvalContext
(
)
)
{
pn
=
parser
-
>
evalBody
(
sc
-
>
asEvalContext
(
)
)
;
}
else
{
pn
=
parser
-
>
globalBody
(
sc
-
>
asGlobalContext
(
)
)
;
}
}
if
(
!
pn
)
{
MOZ_ASSERT
(
!
canHandleParseFailure
(
compilationState_
.
directives
)
)
;
return
false
;
}
{
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
emit
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
emitter
sc
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitScript
(
pn
)
)
{
return
false
;
}
}
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
true
;
}
template
<
typename
Unit
>
bool
frontend
:
:
ModuleCompiler
<
Unit
>
:
:
compile
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
compilationState_
.
scriptData
.
length
(
)
=
=
CompilationStencil
:
:
TopLevelIndex
)
;
if
(
!
compilationState_
.
scriptData
.
emplaceBack
(
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
!
compilationState_
.
scriptExtra
.
emplaceBack
(
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
ModuleBuilder
builder
(
cx
parser
.
ptr
(
)
)
;
const
auto
&
options
=
compilationState_
.
input
.
options
;
uint32_t
len
=
this
-
>
sourceBuffer_
.
length
(
)
;
SourceExtent
extent
=
SourceExtent
:
:
makeGlobalExtent
(
len
options
.
lineno
options
.
column
)
;
ModuleSharedContext
modulesc
(
cx
options
builder
extent
)
;
ParseNode
*
pn
=
parser
-
>
moduleBody
(
&
modulesc
)
;
if
(
!
pn
)
{
return
false
;
}
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
emitter
&
modulesc
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitScript
(
pn
-
>
as
<
ModuleNode
>
(
)
.
body
(
)
)
)
{
return
false
;
}
StencilModuleMetadata
&
moduleMetadata
=
*
compilationState_
.
moduleMetadata
;
builder
.
finishFunctionDecls
(
moduleMetadata
)
;
MOZ_ASSERT_IF
(
!
cx
-
>
isHelperThreadContext
(
)
!
cx
-
>
isExceptionPending
(
)
)
;
return
true
;
}
template
<
typename
Unit
>
FunctionNode
*
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
parse
(
JSContext
*
cx
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
assertSourceAndParserCreated
(
)
;
TokenStreamPosition
startPosition
(
parser
-
>
tokenStream
)
;
CompilationState
:
:
RewindToken
startObj
=
compilationState_
.
getRewindToken
(
)
;
FunctionNode
*
fn
;
for
(
;
;
)
{
Directives
newDirectives
=
compilationState_
.
directives
;
fn
=
parser
-
>
standaloneFunction
(
parameterListEnd
syntaxKind
generatorKind
asyncKind
compilationState_
.
directives
&
newDirectives
)
;
if
(
fn
)
{
break
;
}
if
(
!
canHandleParseFailure
(
newDirectives
)
)
{
return
nullptr
;
}
handleParseFailure
(
newDirectives
startPosition
startObj
)
;
}
return
fn
;
}
template
<
typename
Unit
>
bool
frontend
:
:
StandaloneFunctionCompiler
<
Unit
>
:
:
compile
(
JSContext
*
cx
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
const
Maybe
<
uint32_t
>
&
parameterListEnd
)
{
FunctionNode
*
parsedFunction
=
parse
(
cx
syntaxKind
generatorKind
asyncKind
parameterListEnd
)
;
if
(
!
parsedFunction
)
{
return
false
;
}
FunctionBox
*
funbox
=
parsedFunction
-
>
funbox
(
)
;
if
(
funbox
-
>
isInterpreted
(
)
)
{
Maybe
<
BytecodeEmitter
>
emitter
;
if
(
!
emplaceEmitter
(
emitter
funbox
)
)
{
return
false
;
}
if
(
!
emitter
-
>
emitFunctionScript
(
parsedFunction
)
)
{
return
false
;
}
const
auto
&
options
=
compilationState_
.
input
.
options
;
compilationState_
.
scriptExtra
[
CompilationStencil
:
:
TopLevelIndex
]
.
extent
=
SourceExtent
{
0
sourceBuffer_
.
length
(
)
funbox
-
>
extent
(
)
.
toStringStart
funbox
-
>
extent
(
)
.
toStringEnd
options
.
lineno
options
.
column
}
;
}
else
{
MOZ_ASSERT
(
funbox
-
>
isAsmJSModule
(
)
)
;
MOZ_ASSERT
(
compilationState_
.
asmJS
-
>
moduleMap
.
has
(
funbox
-
>
index
(
)
)
)
;
MOZ_ASSERT
(
compilationState_
.
scriptData
[
CompilationStencil
:
:
TopLevelIndex
]
.
functionFlags
.
isAsmJSNative
(
)
)
;
}
return
true
;
}
template
<
typename
Unit
>
static
UniquePtr
<
CompilationStencil
>
ParseModuleToStencilImpl
(
JSContext
*
cx
CompilationInput
&
input
SourceText
<
Unit
>
&
srcBuf
)
{
MOZ_ASSERT
(
srcBuf
.
get
(
)
)
;
if
(
!
input
.
initForModule
(
cx
)
)
{
return
nullptr
;
}
AutoAssertReportedException
assertException
(
cx
)
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
ModuleCompiler
<
Unit
>
compiler
(
cx
allocScope
input
srcBuf
)
;
if
(
!
compiler
.
init
(
cx
)
)
{
return
nullptr
;
}
if
(
!
compiler
.
compile
(
cx
)
)
{
return
nullptr
;
}
UniquePtr
<
CompilationStencil
>
stencil
(
cx
-
>
new_
<
CompilationStencil
>
(
input
)
)
;
if
(
!
stencil
)
{
return
nullptr
;
}
if
(
!
compiler
.
stencil
(
)
.
finish
(
cx
*
stencil
)
)
{
return
nullptr
;
}
assertException
.
reset
(
)
;
return
stencil
;
}
UniquePtr
<
CompilationStencil
>
frontend
:
:
ParseModuleToStencil
(
JSContext
*
cx
CompilationInput
&
input
SourceText
<
char16_t
>
&
srcBuf
)
{
return
ParseModuleToStencilImpl
(
cx
input
srcBuf
)
;
}
UniquePtr
<
CompilationStencil
>
frontend
:
:
ParseModuleToStencil
(
JSContext
*
cx
CompilationInput
&
input
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
return
ParseModuleToStencilImpl
(
cx
input
srcBuf
)
;
}
template
<
typename
Unit
>
static
ModuleObject
*
CompileModuleImpl
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
optionsInput
SourceText
<
Unit
>
&
srcBuf
)
{
AutoAssertReportedException
assertException
(
cx
)
;
if
(
!
GlobalObject
:
:
ensureModulePrototypesCreated
(
cx
cx
-
>
global
(
)
)
)
{
return
nullptr
;
}
CompileOptions
options
(
cx
optionsInput
)
;
options
.
setModule
(
)
;
Rooted
<
CompilationInput
>
input
(
cx
CompilationInput
(
options
)
)
;
UniquePtr
<
CompilationStencil
>
stencil
=
ParseModuleToStencil
(
cx
input
.
get
(
)
srcBuf
)
;
if
(
!
stencil
)
{
return
nullptr
;
}
Rooted
<
CompilationGCOutput
>
gcOutput
(
cx
)
;
if
(
!
InstantiateStencils
(
cx
input
.
get
(
)
*
stencil
gcOutput
.
get
(
)
)
)
{
return
nullptr
;
}
assertException
.
reset
(
)
;
return
gcOutput
.
get
(
)
.
module
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
char16_t
>
&
srcBuf
)
{
return
CompileModuleImpl
(
cx
options
srcBuf
)
;
}
ModuleObject
*
frontend
:
:
CompileModule
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
SourceText
<
Utf8Unit
>
&
srcBuf
)
{
return
CompileModuleImpl
(
cx
options
srcBuf
)
;
}
void
frontend
:
:
FillCompileOptionsForLazyFunction
(
JS
:
:
CompileOptions
&
options
JS
:
:
Handle
<
BaseScript
*
>
lazy
)
{
options
.
setMutedErrors
(
lazy
-
>
mutedErrors
(
)
)
.
setFileAndLine
(
lazy
-
>
filename
(
)
lazy
-
>
lineno
(
)
)
.
setColumn
(
lazy
-
>
column
(
)
)
.
setScriptSourceOffset
(
lazy
-
>
sourceStart
(
)
)
.
setNoScriptRval
(
false
)
.
setSelfHostingMode
(
false
)
;
}
template
<
typename
Unit
>
static
bool
CompileLazyFunctionToStencilImpl
(
JSContext
*
cx
CompilationInput
&
input
CompilationStencil
&
stencil
const
Unit
*
units
size_t
length
)
{
MOZ_ASSERT
(
cx
-
>
compartment
(
)
=
=
input
.
lazy
-
>
compartment
(
)
)
;
MOZ_ASSERT
(
input
.
lazy
-
>
isReadyForDelazification
(
)
)
;
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
JSFunction
*
>
fun
(
cx
input
.
lazy
-
>
function
(
)
)
;
InheritThis
inheritThis
=
fun
-
>
isArrow
(
)
?
InheritThis
:
:
Yes
:
InheritThis
:
:
No
;
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
CompilationState
compilationState
(
cx
allocScope
input
)
;
compilationState
.
setFunctionKey
(
input
.
lazy
)
;
MOZ_ASSERT
(
!
compilationState
.
isInitialStencil
(
)
)
;
if
(
!
compilationState
.
init
(
cx
inheritThis
)
)
{
return
false
;
}
Parser
<
FullParseHandler
Unit
>
parser
(
cx
input
.
options
units
length
true
compilationState
nullptr
)
;
if
(
!
parser
.
checkOptions
(
)
)
{
return
false
;
}
AutoGeckoProfilerEntry
pseudoFrame
(
cx
"
script
delazify
"
JS
:
:
ProfilingCategoryPair
:
:
JS_Parsing
)
;
FunctionNode
*
pn
=
parser
.
standaloneLazyFunction
(
fun
input
.
lazy
-
>
toStringStart
(
)
input
.
lazy
-
>
strict
(
)
input
.
lazy
-
>
generatorKind
(
)
input
.
lazy
-
>
asyncKind
(
)
)
;
if
(
!
pn
)
{
return
false
;
}
BytecodeEmitter
bce
(
nullptr
&
parser
pn
-
>
funbox
(
)
compilationState
BytecodeEmitter
:
:
LazyFunction
)
;
if
(
!
bce
.
init
(
pn
-
>
pn_pos
)
)
{
return
false
;
}
if
(
!
bce
.
emitFunctionScript
(
pn
)
)
{
return
false
;
}
bool
hadLazyScriptData
=
input
.
lazy
-
>
hasPrivateScriptData
(
)
;
bool
isRelazifiableAfterDelazify
=
input
.
lazy
-
>
isRelazifiableAfterDelazify
(
)
;
if
(
isRelazifiableAfterDelazify
&
&
!
hadLazyScriptData
)
{
compilationState
.
scriptData
[
CompilationStencil
:
:
TopLevelIndex
]
.
setAllowRelazify
(
)
;
}
if
(
!
compilationState
.
finish
(
cx
stencil
)
)
{
return
false
;
}
assertException
.
reset
(
)
;
return
true
;
}
[
[
nodiscard
]
]
bool
frontend
:
:
CompileLazyFunctionToStencil
(
JSContext
*
cx
CompilationInput
&
input
CompilationStencil
&
stencil
const
char16_t
*
units
size_t
length
)
{
return
CompileLazyFunctionToStencilImpl
(
cx
input
stencil
units
length
)
;
}
[
[
nodiscard
]
]
bool
frontend
:
:
CompileLazyFunctionToStencil
(
JSContext
*
cx
CompilationInput
&
input
CompilationStencil
&
stencil
const
mozilla
:
:
Utf8Unit
*
units
size_t
length
)
{
return
CompileLazyFunctionToStencilImpl
(
cx
input
stencil
units
length
)
;
}
bool
frontend
:
:
InstantiateStencilsForDelazify
(
JSContext
*
cx
CompilationInput
&
input
const
CompilationStencil
&
stencil
)
{
AutoAssertReportedException
assertException
(
cx
)
;
mozilla
:
:
DebugOnly
<
uint32_t
>
lazyFlags
=
static_cast
<
uint32_t
>
(
input
.
lazy
-
>
immutableFlags
(
)
)
;
Rooted
<
CompilationGCOutput
>
gcOutput
(
cx
)
;
if
(
!
CompilationStencil
:
:
instantiateStencils
(
cx
input
stencil
gcOutput
.
get
(
)
)
)
{
return
false
;
}
MOZ_ASSERT
(
lazyFlags
=
=
gcOutput
.
get
(
)
.
script
-
>
immutableFlags
(
)
)
;
MOZ_ASSERT
(
gcOutput
.
get
(
)
.
script
-
>
outermostScope
(
)
-
>
hasOnChain
(
ScopeKind
:
:
NonSyntactic
)
=
=
gcOutput
.
get
(
)
.
script
-
>
immutableFlags
(
)
.
hasFlag
(
JSScript
:
:
ImmutableFlags
:
:
HasNonSyntacticScope
)
)
;
assertException
.
reset
(
)
;
return
true
;
}
static
JSFunction
*
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
HandleScope
enclosingScope
=
nullptr
)
{
AutoAssertReportedException
assertException
(
cx
)
;
Rooted
<
CompilationInput
>
input
(
cx
CompilationInput
(
options
)
)
;
if
(
enclosingScope
)
{
if
(
!
input
.
get
(
)
.
initForStandaloneFunctionInNonSyntacticScope
(
cx
enclosingScope
)
)
{
return
nullptr
;
}
}
else
{
if
(
!
input
.
get
(
)
.
initForStandaloneFunction
(
cx
)
)
{
return
nullptr
;
}
}
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
InheritThis
inheritThis
=
(
syntaxKind
=
=
FunctionSyntaxKind
:
:
Arrow
)
?
InheritThis
:
:
Yes
:
InheritThis
:
:
No
;
StandaloneFunctionCompiler
<
char16_t
>
compiler
(
cx
allocScope
input
.
get
(
)
srcBuf
)
;
if
(
!
compiler
.
init
(
cx
inheritThis
)
)
{
return
nullptr
;
}
if
(
!
compiler
.
compile
(
cx
syntaxKind
generatorKind
asyncKind
parameterListEnd
)
)
{
return
nullptr
;
}
Rooted
<
CompilationGCOutput
>
gcOutput
(
cx
)
;
RefPtr
<
ScriptSource
>
source
;
{
BorrowingCompilationStencil
borrowingStencil
(
compiler
.
stencil
(
)
)
;
if
(
!
CompilationStencil
:
:
instantiateStencils
(
cx
input
.
get
(
)
borrowingStencil
gcOutput
.
get
(
)
)
)
{
return
nullptr
;
}
source
=
borrowingStencil
.
source
;
}
#
ifdef
DEBUG
JSFunction
*
fun
=
gcOutput
.
get
(
)
.
functions
[
CompilationStencil
:
:
TopLevelIndex
]
;
MOZ_ASSERT
(
fun
-
>
hasBytecode
(
)
|
|
IsAsmJSModule
(
fun
)
)
;
#
endif
if
(
!
cx
-
>
isHelperThreadContext
(
)
)
{
if
(
!
source
-
>
tryCompressOffThread
(
cx
)
)
{
return
nullptr
;
}
}
if
(
gcOutput
.
get
(
)
.
script
)
{
if
(
parameterListEnd
)
{
source
-
>
setParameterListEnd
(
*
parameterListEnd
)
;
}
MOZ_ASSERT
(
!
cx
-
>
isHelperThreadContext
(
)
)
;
Rooted
<
JSScript
*
>
script
(
cx
gcOutput
.
get
(
)
.
script
)
;
if
(
!
options
.
hideScriptFromDebugger
)
{
DebugAPI
:
:
onNewScript
(
cx
script
)
;
}
}
assertException
.
reset
(
)
;
return
gcOutput
.
get
(
)
.
functions
[
CompilationStencil
:
:
TopLevelIndex
]
;
}
JSFunction
*
frontend
:
:
CompileStandaloneFunction
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
SyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneGenerator
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
SyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneAsyncFunction
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneAsyncGenerator
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
)
{
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
Generator
FunctionAsyncKind
:
:
AsyncFunction
)
;
}
JSFunction
*
frontend
:
:
CompileStandaloneFunctionInNonSyntacticScope
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
const
Maybe
<
uint32_t
>
&
parameterListEnd
FunctionSyntaxKind
syntaxKind
HandleScope
enclosingScope
)
{
MOZ_ASSERT
(
enclosingScope
)
;
return
CompileStandaloneFunction
(
cx
options
srcBuf
parameterListEnd
syntaxKind
GeneratorKind
:
:
NotGenerator
FunctionAsyncKind
:
:
SyncFunction
enclosingScope
)
;
}
