#
ifndef
frontend_ElemOpEmitter_h
#
define
frontend_ElemOpEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
frontend
/
Token
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
ElemOpEmitter
{
public
:
enum
class
Kind
{
Get
Call
Set
Delete
PostIncrement
PreIncrement
PostDecrement
PreDecrement
SimpleAssignment
PropInit
CompoundAssignment
}
;
enum
class
ObjKind
{
Super
Other
}
;
private
:
BytecodeEmitter
*
bce_
;
Kind
kind_
;
ObjKind
objKind_
;
NameVisibility
visibility_
=
NameVisibility
:
:
Public
;
#
ifdef
DEBUG
enum
class
State
{
Start
Obj
Key
Get
Delete
IncDec
Rhs
Assignment
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
ElemOpEmitter
(
BytecodeEmitter
*
bce
Kind
kind
ObjKind
objKind
NameVisibility
visibility
)
;
private
:
[
[
nodiscard
]
]
bool
isCall
(
)
const
{
return
kind_
=
=
Kind
:
:
Call
;
}
[
[
nodiscard
]
]
bool
isSimpleAssignment
(
)
const
{
return
kind_
=
=
Kind
:
:
SimpleAssignment
;
}
bool
isPrivate
(
)
{
return
visibility_
=
=
NameVisibility
:
:
Private
;
}
[
[
nodiscard
]
]
bool
isPropInit
(
)
const
{
return
kind_
=
=
Kind
:
:
PropInit
;
}
[
[
nodiscard
]
]
bool
isPrivateGet
(
)
const
{
return
visibility_
=
=
NameVisibility
:
:
Private
&
&
kind_
=
=
Kind
:
:
Get
;
}
[
[
nodiscard
]
]
bool
isDelete
(
)
const
{
return
kind_
=
=
Kind
:
:
Delete
;
}
[
[
nodiscard
]
]
bool
isCompoundAssignment
(
)
const
{
return
kind_
=
=
Kind
:
:
CompoundAssignment
;
}
[
[
nodiscard
]
]
bool
isIncDec
(
)
const
{
return
isPostIncDec
(
)
|
|
isPreIncDec
(
)
;
}
[
[
nodiscard
]
]
bool
isPostIncDec
(
)
const
{
return
kind_
=
=
Kind
:
:
PostIncrement
|
|
kind_
=
=
Kind
:
:
PostDecrement
;
}
[
[
nodiscard
]
]
bool
isPreIncDec
(
)
const
{
return
kind_
=
=
Kind
:
:
PreIncrement
|
|
kind_
=
=
Kind
:
:
PreDecrement
;
}
[
[
nodiscard
]
]
bool
isInc
(
)
const
{
return
kind_
=
=
Kind
:
:
PostIncrement
|
|
kind_
=
=
Kind
:
:
PreIncrement
;
}
[
[
nodiscard
]
]
bool
isSuper
(
)
const
{
return
objKind_
=
=
ObjKind
:
:
Super
;
}
public
:
[
[
nodiscard
]
]
bool
prepareForObj
(
)
;
[
[
nodiscard
]
]
bool
prepareForKey
(
)
;
[
[
nodiscard
]
]
bool
emitGet
(
)
;
[
[
nodiscard
]
]
bool
prepareForRhs
(
)
;
[
[
nodiscard
]
]
bool
skipObjAndKeyAndRhs
(
)
;
[
[
nodiscard
]
]
bool
emitDelete
(
)
;
[
[
nodiscard
]
]
bool
emitAssignment
(
)
;
[
[
nodiscard
]
]
bool
emitIncDec
(
)
;
private
:
[
[
nodiscard
]
]
bool
emitPrivateGuard
(
)
;
[
[
nodiscard
]
]
bool
emitPrivateGuardForAssignment
(
)
;
}
;
}
}
#
endif
