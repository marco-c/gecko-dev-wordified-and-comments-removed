#
ifndef
frontend_NameAnalysisTypes_h
#
define
frontend_NameAnalysisTypes_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
<
stdint
.
h
>
#
include
<
type_traits
>
#
include
"
frontend
/
ParserAtom
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
BindingKind
.
h
"
#
include
"
vm
/
BytecodeFormatFlags
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
namespace
js
{
class
EnvironmentCoordinate
{
uint32_t
hops_
;
uint32_t
slot_
;
static_assert
(
ENVCOORD_HOPS_BITS
<
=
32
"
We
have
enough
bits
below
"
)
;
static_assert
(
ENVCOORD_SLOT_BITS
<
=
32
"
We
have
enough
bits
below
"
)
;
public
:
explicit
inline
EnvironmentCoordinate
(
jsbytecode
*
pc
)
:
hops_
(
GET_ENVCOORD_HOPS
(
pc
)
)
slot_
(
GET_ENVCOORD_SLOT
(
pc
+
ENVCOORD_HOPS_LEN
)
)
{
MOZ_ASSERT
(
JOF_OPTYPE
(
JSOp
(
*
pc
)
)
=
=
JOF_ENVCOORD
)
;
}
EnvironmentCoordinate
(
)
=
default
;
void
setHops
(
uint32_t
hops
)
{
MOZ_ASSERT
(
hops
<
ENVCOORD_HOPS_LIMIT
)
;
hops_
=
hops
;
}
void
setSlot
(
uint32_t
slot
)
{
MOZ_ASSERT
(
slot
<
ENVCOORD_SLOT_LIMIT
)
;
slot_
=
slot
;
}
uint32_t
hops
(
)
const
{
MOZ_ASSERT
(
hops_
<
ENVCOORD_HOPS_LIMIT
)
;
return
hops_
;
}
uint32_t
slot
(
)
const
{
MOZ_ASSERT
(
slot_
<
ENVCOORD_SLOT_LIMIT
)
;
return
slot_
;
}
bool
operator
=
=
(
const
EnvironmentCoordinate
&
rhs
)
const
{
return
hops
(
)
=
=
rhs
.
hops
(
)
&
&
slot
(
)
=
=
rhs
.
slot
(
)
;
}
}
;
namespace
frontend
{
enum
class
ParseGoal
:
uint8_t
{
Script
Module
}
;
enum
class
DeclarationKind
:
uint8_t
{
PositionalFormalParameter
FormalParameter
CoverArrowParameter
Var
Let
Const
Class
Import
BodyLevelFunction
ModuleBodyLevelFunction
LexicalFunction
SloppyLexicalFunction
VarForAnnexBLexicalFunction
SimpleCatchParameter
CatchParameter
PrivateName
Synthetic
PrivateMethod
}
;
static
inline
BindingKind
DeclarationKindToBindingKind
(
DeclarationKind
kind
)
{
switch
(
kind
)
{
case
DeclarationKind
:
:
PositionalFormalParameter
:
case
DeclarationKind
:
:
FormalParameter
:
case
DeclarationKind
:
:
CoverArrowParameter
:
return
BindingKind
:
:
FormalParameter
;
case
DeclarationKind
:
:
Var
:
case
DeclarationKind
:
:
BodyLevelFunction
:
case
DeclarationKind
:
:
ModuleBodyLevelFunction
:
case
DeclarationKind
:
:
VarForAnnexBLexicalFunction
:
return
BindingKind
:
:
Var
;
case
DeclarationKind
:
:
Let
:
case
DeclarationKind
:
:
Class
:
case
DeclarationKind
:
:
LexicalFunction
:
case
DeclarationKind
:
:
SloppyLexicalFunction
:
case
DeclarationKind
:
:
SimpleCatchParameter
:
case
DeclarationKind
:
:
CatchParameter
:
return
BindingKind
:
:
Let
;
case
DeclarationKind
:
:
Const
:
case
DeclarationKind
:
:
PrivateName
:
return
BindingKind
:
:
Const
;
case
DeclarationKind
:
:
Import
:
return
BindingKind
:
:
Import
;
case
DeclarationKind
:
:
Synthetic
:
return
BindingKind
:
:
Synthetic
;
case
DeclarationKind
:
:
PrivateMethod
:
return
BindingKind
:
:
PrivateMethod
;
}
MOZ_CRASH
(
"
Bad
DeclarationKind
"
)
;
}
static
inline
bool
DeclarationKindIsLexical
(
DeclarationKind
kind
)
{
return
BindingKindIsLexical
(
DeclarationKindToBindingKind
(
kind
)
)
;
}
enum
class
PrivateNameKind
:
uint8_t
{
None
Field
Method
Getter
Setter
GetterSetter
}
;
enum
class
ClosedOver
:
bool
{
No
=
false
Yes
=
true
}
;
class
DeclaredNameInfo
{
uint32_t
pos_
;
DeclarationKind
kind_
;
bool
closedOver_
;
PrivateNameKind
privateNameKind_
;
public
:
explicit
DeclaredNameInfo
(
DeclarationKind
kind
uint32_t
pos
ClosedOver
closedOver
=
ClosedOver
:
:
No
)
:
pos_
(
pos
)
kind_
(
kind
)
closedOver_
(
bool
(
closedOver
)
)
privateNameKind_
(
PrivateNameKind
:
:
None
)
{
}
DeclaredNameInfo
(
)
=
default
;
DeclarationKind
kind
(
)
const
{
return
kind_
;
}
static
const
uint32_t
npos
=
uint32_t
(
-
1
)
;
uint32_t
pos
(
)
const
{
return
pos_
;
}
void
alterKind
(
DeclarationKind
kind
)
{
kind_
=
kind
;
}
void
setClosedOver
(
)
{
closedOver_
=
true
;
}
bool
closedOver
(
)
const
{
return
closedOver_
;
}
void
setPrivateNameKind
(
PrivateNameKind
privateNameKind
)
{
privateNameKind_
=
privateNameKind
;
}
PrivateNameKind
privateNameKind
(
)
const
{
return
privateNameKind_
;
}
}
;
class
NameLocation
{
public
:
enum
class
Kind
:
uint8_t
{
Dynamic
Global
Intrinsic
NamedLambdaCallee
ArgumentSlot
FrameSlot
EnvironmentCoordinate
Import
DynamicAnnexBVar
}
;
private
:
Kind
kind_
;
BindingKind
bindingKind_
;
uint8_t
hops_
;
uint32_t
slot_
:
ENVCOORD_SLOT_BITS
;
static_assert
(
LOCALNO_BITS
=
=
ENVCOORD_SLOT_BITS
"
Frame
and
environment
slots
must
be
same
sized
.
"
)
;
NameLocation
(
Kind
kind
BindingKind
bindingKind
uint8_t
hops
=
UINT8_MAX
uint32_t
slot
=
ENVCOORD_SLOT_LIMIT
)
:
kind_
(
kind
)
bindingKind_
(
bindingKind
)
hops_
(
hops
)
slot_
(
slot
)
{
}
public
:
NameLocation
(
)
=
default
;
static
NameLocation
Dynamic
(
)
{
return
NameLocation
(
)
;
}
static
NameLocation
Global
(
BindingKind
bindKind
)
{
MOZ_ASSERT
(
bindKind
!
=
BindingKind
:
:
FormalParameter
)
;
return
NameLocation
(
Kind
:
:
Global
bindKind
)
;
}
static
NameLocation
Intrinsic
(
)
{
return
NameLocation
(
Kind
:
:
Intrinsic
BindingKind
:
:
Var
)
;
}
static
NameLocation
NamedLambdaCallee
(
)
{
return
NameLocation
(
Kind
:
:
NamedLambdaCallee
BindingKind
:
:
NamedLambdaCallee
)
;
}
static
NameLocation
ArgumentSlot
(
uint16_t
slot
)
{
return
NameLocation
(
Kind
:
:
ArgumentSlot
BindingKind
:
:
FormalParameter
0
slot
)
;
}
static
NameLocation
FrameSlot
(
BindingKind
bindKind
uint32_t
slot
)
{
MOZ_ASSERT
(
slot
<
LOCALNO_LIMIT
)
;
return
NameLocation
(
Kind
:
:
FrameSlot
bindKind
0
slot
)
;
}
static
NameLocation
EnvironmentCoordinate
(
BindingKind
bindKind
uint8_t
hops
uint32_t
slot
)
{
MOZ_ASSERT
(
slot
<
ENVCOORD_SLOT_LIMIT
)
;
return
NameLocation
(
Kind
:
:
EnvironmentCoordinate
bindKind
hops
slot
)
;
}
static
NameLocation
Import
(
)
{
return
NameLocation
(
Kind
:
:
Import
BindingKind
:
:
Import
)
;
}
static
NameLocation
DynamicAnnexBVar
(
)
{
return
NameLocation
(
Kind
:
:
DynamicAnnexBVar
BindingKind
:
:
Var
)
;
}
bool
operator
=
=
(
const
NameLocation
&
other
)
const
{
return
kind_
=
=
other
.
kind_
&
&
bindingKind_
=
=
other
.
bindingKind_
&
&
hops_
=
=
other
.
hops_
&
&
slot_
=
=
other
.
slot_
;
}
bool
operator
!
=
(
const
NameLocation
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
Kind
kind
(
)
const
{
return
kind_
;
}
uint16_t
argumentSlot
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
ArgumentSlot
)
;
return
mozilla
:
:
AssertedCast
<
uint16_t
>
(
slot_
)
;
}
uint32_t
frameSlot
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
FrameSlot
)
;
return
slot_
;
}
NameLocation
addHops
(
uint8_t
more
)
{
MOZ_ASSERT
(
hops_
<
ENVCOORD_HOPS_LIMIT
-
more
)
;
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
EnvironmentCoordinate
)
;
return
NameLocation
(
kind_
bindingKind_
hops_
+
more
slot_
)
;
}
class
EnvironmentCoordinate
environmentCoordinate
(
)
const
{
MOZ_ASSERT
(
kind_
=
=
Kind
:
:
EnvironmentCoordinate
)
;
class
EnvironmentCoordinate
coord
;
coord
.
setHops
(
hops_
)
;
coord
.
setSlot
(
slot_
)
;
return
coord
;
}
BindingKind
bindingKind
(
)
const
{
MOZ_ASSERT
(
kind_
!
=
Kind
:
:
Dynamic
)
;
return
bindingKind_
;
}
bool
isLexical
(
)
const
{
return
BindingKindIsLexical
(
bindingKind
(
)
)
;
}
bool
isConst
(
)
const
{
return
bindingKind
(
)
=
=
BindingKind
:
:
Const
;
}
bool
isSynthetic
(
)
const
{
return
bindingKind
(
)
=
=
BindingKind
:
:
Synthetic
;
}
bool
isPrivateMethod
(
)
const
{
return
bindingKind
(
)
=
=
BindingKind
:
:
PrivateMethod
;
}
bool
hasKnownSlot
(
)
const
{
return
kind_
=
=
Kind
:
:
ArgumentSlot
|
|
kind_
=
=
Kind
:
:
FrameSlot
|
|
kind_
=
=
Kind
:
:
EnvironmentCoordinate
;
}
}
;
using
AtomVector
=
Vector
<
TrivialTaggedParserAtomIndex
24
SystemAllocPolicy
>
;
class
FunctionBox
;
using
FunctionBoxVector
=
Vector
<
FunctionBox
*
24
SystemAllocPolicy
>
;
}
}
#
endif
