#
include
"
frontend
/
TokenStream
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
IntegerTypeTraits
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
ctype
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
jsatom
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
jscompartment
.
h
"
#
include
"
jsexn
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
frontend
/
ReservedWords
.
h
"
#
include
"
js
/
CharacterEncoding
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
HelperThreads
.
h
"
#
include
"
vm
/
StringBuffer
.
h
"
#
include
"
vm
/
Unicode
.
h
"
using
mozilla
:
:
ArrayLength
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
PodArrayZero
;
using
mozilla
:
:
PodAssign
;
using
mozilla
:
:
PodCopy
;
using
mozilla
:
:
PodZero
;
struct
ReservedWordInfo
{
const
char
*
chars
;
js
:
:
frontend
:
:
TokenKind
tokentype
;
}
;
static
const
ReservedWordInfo
reservedWords
[
]
=
{
#
define
RESERVED_WORD_INFO
(
word
name
type
)
\
{
js_
#
#
word
#
#
_str
js
:
:
frontend
:
:
type
}
FOR_EACH_JAVASCRIPT_RESERVED_WORD
(
RESERVED_WORD_INFO
)
#
undef
RESERVED_WORD_INFO
}
;
template
<
typename
CharT
>
static
const
ReservedWordInfo
*
FindReservedWord
(
const
CharT
*
s
size_t
length
)
{
MOZ_ASSERT
(
length
!
=
0
)
;
size_t
i
;
const
ReservedWordInfo
*
rw
;
const
char
*
chars
;
#
define
JSRW_LENGTH
(
)
length
#
define
JSRW_AT
(
column
)
s
[
column
]
#
define
JSRW_GOT_MATCH
(
index
)
i
=
(
index
)
;
goto
got_match
;
#
define
JSRW_TEST_GUESS
(
index
)
i
=
(
index
)
;
goto
test_guess
;
#
define
JSRW_NO_MATCH
(
)
goto
no_match
;
#
include
"
frontend
/
ReservedWordsGenerated
.
h
"
#
undef
JSRW_NO_MATCH
#
undef
JSRW_TEST_GUESS
#
undef
JSRW_GOT_MATCH
#
undef
JSRW_AT
#
undef
JSRW_LENGTH
got_match
:
return
&
reservedWords
[
i
]
;
test_guess
:
rw
=
&
reservedWords
[
i
]
;
chars
=
rw
-
>
chars
;
do
{
if
(
*
s
+
+
!
=
(
unsigned
char
)
(
*
chars
+
+
)
)
goto
no_match
;
}
while
(
-
-
length
!
=
0
)
;
return
rw
;
no_match
:
return
nullptr
;
}
static
const
ReservedWordInfo
*
FindReservedWord
(
JSLinearString
*
str
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
return
str
-
>
hasLatin1Chars
(
)
?
FindReservedWord
(
str
-
>
latin1Chars
(
nogc
)
str
-
>
length
(
)
)
:
FindReservedWord
(
str
-
>
twoByteChars
(
nogc
)
str
-
>
length
(
)
)
;
}
template
<
typename
CharT
>
static
bool
IsIdentifier
(
const
CharT
*
chars
size_t
length
)
{
using
namespace
js
;
if
(
length
=
=
0
)
return
false
;
if
(
!
unicode
:
:
IsIdentifierStart
(
char16_t
(
*
chars
)
)
)
return
false
;
const
CharT
*
end
=
chars
+
length
;
while
(
+
+
chars
!
=
end
)
{
if
(
!
unicode
:
:
IsIdentifierPart
(
char16_t
(
*
chars
)
)
)
return
false
;
}
return
true
;
}
static
uint32_t
GetSingleCodePoint
(
const
char16_t
*
*
p
const
char16_t
*
end
)
{
using
namespace
js
;
uint32_t
codePoint
;
if
(
MOZ_UNLIKELY
(
unicode
:
:
IsLeadSurrogate
(
*
*
p
)
)
&
&
*
p
+
1
<
end
)
{
char16_t
lead
=
*
*
p
;
char16_t
maybeTrail
=
*
(
*
p
+
1
)
;
if
(
unicode
:
:
IsTrailSurrogate
(
maybeTrail
)
)
{
*
p
+
=
2
;
return
unicode
:
:
UTF16Decode
(
lead
maybeTrail
)
;
}
}
codePoint
=
*
*
p
;
(
*
p
)
+
+
;
return
codePoint
;
}
static
bool
IsIdentifierMaybeNonBMP
(
const
char16_t
*
chars
size_t
length
)
{
using
namespace
js
;
if
(
IsIdentifier
(
chars
length
)
)
return
true
;
if
(
length
=
=
0
)
return
false
;
const
char16_t
*
p
=
chars
;
const
char16_t
*
end
=
chars
+
length
;
uint32_t
codePoint
;
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
!
unicode
:
:
IsIdentifierStart
(
codePoint
)
)
return
false
;
while
(
p
<
end
)
{
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
!
unicode
:
:
IsIdentifierPart
(
codePoint
)
)
return
false
;
}
return
true
;
}
namespace
js
{
namespace
frontend
{
bool
IsIdentifier
(
JSLinearString
*
str
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
return
str
-
>
hasLatin1Chars
(
)
?
:
:
IsIdentifier
(
str
-
>
latin1Chars
(
nogc
)
str
-
>
length
(
)
)
:
:
:
IsIdentifierMaybeNonBMP
(
str
-
>
twoByteChars
(
nogc
)
str
-
>
length
(
)
)
;
}
bool
IsIdentifier
(
const
char
*
chars
size_t
length
)
{
return
:
:
IsIdentifier
(
chars
length
)
;
}
bool
IsIdentifier
(
const
char16_t
*
chars
size_t
length
)
{
return
:
:
IsIdentifier
(
chars
length
)
;
}
bool
IsKeyword
(
JSLinearString
*
str
)
{
if
(
const
ReservedWordInfo
*
rw
=
FindReservedWord
(
str
)
)
return
TokenKindIsKeyword
(
rw
-
>
tokentype
)
;
return
false
;
}
TokenKind
ReservedWordTokenKind
(
PropertyName
*
str
)
{
if
(
const
ReservedWordInfo
*
rw
=
FindReservedWord
(
str
)
)
return
rw
-
>
tokentype
;
return
TOK_NAME
;
}
const
char
*
ReservedWordToCharZ
(
PropertyName
*
str
)
{
if
(
const
ReservedWordInfo
*
rw
=
FindReservedWord
(
str
)
)
return
ReservedWordToCharZ
(
rw
-
>
tokentype
)
;
return
nullptr
;
}
const
char
*
ReservedWordToCharZ
(
TokenKind
tt
)
{
MOZ_ASSERT
(
tt
!
=
TOK_NAME
)
;
switch
(
tt
)
{
#
define
EMIT_CASE
(
word
name
type
)
case
type
:
return
js_
#
#
word
#
#
_str
;
FOR_EACH_JAVASCRIPT_RESERVED_WORD
(
EMIT_CASE
)
#
undef
EMIT_CASE
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Not
a
reserved
word
PropertyName
.
"
)
;
}
return
nullptr
;
}
PropertyName
*
TokenStreamAnyChars
:
:
reservedWordToPropertyName
(
TokenKind
tt
)
const
{
MOZ_ASSERT
(
tt
!
=
TOK_NAME
)
;
switch
(
tt
)
{
#
define
EMIT_CASE
(
word
name
type
)
case
type
:
return
cx
-
>
names
(
)
.
name
;
FOR_EACH_JAVASCRIPT_RESERVED_WORD
(
EMIT_CASE
)
#
undef
EMIT_CASE
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Not
a
reserved
word
TokenKind
.
"
)
;
}
return
nullptr
;
}
TokenStreamAnyChars
:
:
SourceCoords
:
:
SourceCoords
(
JSContext
*
cx
uint32_t
ln
uint32_t
col
uint32_t
initialLineOffset
)
:
lineStartOffsets_
(
cx
)
initialLineNum_
(
ln
)
initialColumn_
(
col
)
lastLineIndex_
(
0
)
{
uint32_t
maxPtr
=
MAX_PTR
;
MOZ_ASSERT
(
lineStartOffsets_
.
capacity
(
)
>
=
2
)
;
MOZ_ALWAYS_TRUE
(
lineStartOffsets_
.
reserve
(
2
)
)
;
lineStartOffsets_
.
infallibleAppend
(
initialLineOffset
)
;
lineStartOffsets_
.
infallibleAppend
(
maxPtr
)
;
}
MOZ_ALWAYS_INLINE
bool
TokenStreamAnyChars
:
:
SourceCoords
:
:
add
(
uint32_t
lineNum
uint32_t
lineStartOffset
)
{
uint32_t
lineIndex
=
lineNumToIndex
(
lineNum
)
;
uint32_t
sentinelIndex
=
lineStartOffsets_
.
length
(
)
-
1
;
MOZ_ASSERT
(
lineStartOffsets_
[
0
]
<
=
lineStartOffset
&
&
lineStartOffsets_
[
sentinelIndex
]
=
=
MAX_PTR
)
;
if
(
lineIndex
=
=
sentinelIndex
)
{
uint32_t
maxPtr
=
MAX_PTR
;
if
(
!
lineStartOffsets_
.
append
(
maxPtr
)
)
{
static_assert
(
mozilla
:
:
IsSame
<
decltype
(
lineStartOffsets_
.
allocPolicy
(
)
)
TempAllocPolicy
&
>
:
:
value
"
this
function
'
s
caller
depends
on
it
reporting
an
"
"
error
on
failure
as
TempAllocPolicy
ensures
"
)
;
return
false
;
}
lineStartOffsets_
[
lineIndex
]
=
lineStartOffset
;
}
else
{
MOZ_ASSERT_IF
(
lineIndex
<
sentinelIndex
lineStartOffsets_
[
lineIndex
]
=
=
lineStartOffset
)
;
}
return
true
;
}
MOZ_ALWAYS_INLINE
bool
TokenStreamAnyChars
:
:
SourceCoords
:
:
fill
(
const
TokenStreamAnyChars
:
:
SourceCoords
&
other
)
{
MOZ_ASSERT
(
lineStartOffsets_
[
0
]
=
=
other
.
lineStartOffsets_
[
0
]
)
;
MOZ_ASSERT
(
lineStartOffsets_
.
back
(
)
=
=
MAX_PTR
)
;
MOZ_ASSERT
(
other
.
lineStartOffsets_
.
back
(
)
=
=
MAX_PTR
)
;
if
(
lineStartOffsets_
.
length
(
)
>
=
other
.
lineStartOffsets_
.
length
(
)
)
return
true
;
uint32_t
sentinelIndex
=
lineStartOffsets_
.
length
(
)
-
1
;
lineStartOffsets_
[
sentinelIndex
]
=
other
.
lineStartOffsets_
[
sentinelIndex
]
;
for
(
size_t
i
=
sentinelIndex
+
1
;
i
<
other
.
lineStartOffsets_
.
length
(
)
;
i
+
+
)
{
if
(
!
lineStartOffsets_
.
append
(
other
.
lineStartOffsets_
[
i
]
)
)
return
false
;
}
return
true
;
}
MOZ_ALWAYS_INLINE
uint32_t
TokenStreamAnyChars
:
:
SourceCoords
:
:
lineIndexOf
(
uint32_t
offset
)
const
{
uint32_t
iMin
iMax
iMid
;
if
(
lineStartOffsets_
[
lastLineIndex_
]
<
=
offset
)
{
if
(
offset
<
lineStartOffsets_
[
lastLineIndex_
+
1
]
)
return
lastLineIndex_
;
lastLineIndex_
+
+
;
if
(
offset
<
lineStartOffsets_
[
lastLineIndex_
+
1
]
)
return
lastLineIndex_
;
lastLineIndex_
+
+
;
if
(
offset
<
lineStartOffsets_
[
lastLineIndex_
+
1
]
)
{
return
lastLineIndex_
;
}
iMin
=
lastLineIndex_
+
1
;
MOZ_ASSERT
(
iMin
<
lineStartOffsets_
.
length
(
)
-
1
)
;
}
else
{
iMin
=
0
;
}
iMax
=
lineStartOffsets_
.
length
(
)
-
2
;
while
(
iMax
>
iMin
)
{
iMid
=
iMin
+
(
iMax
-
iMin
)
/
2
;
if
(
offset
>
=
lineStartOffsets_
[
iMid
+
1
]
)
iMin
=
iMid
+
1
;
else
iMax
=
iMid
;
}
MOZ_ASSERT
(
iMax
=
=
iMin
)
;
MOZ_ASSERT
(
lineStartOffsets_
[
iMin
]
<
=
offset
&
&
offset
<
lineStartOffsets_
[
iMin
+
1
]
)
;
lastLineIndex_
=
iMin
;
return
iMin
;
}
uint32_t
TokenStreamAnyChars
:
:
SourceCoords
:
:
lineNum
(
uint32_t
offset
)
const
{
uint32_t
lineIndex
=
lineIndexOf
(
offset
)
;
return
lineIndexToNum
(
lineIndex
)
;
}
uint32_t
TokenStreamAnyChars
:
:
SourceCoords
:
:
columnIndex
(
uint32_t
offset
)
const
{
return
lineIndexAndOffsetToColumn
(
lineIndexOf
(
offset
)
offset
)
;
}
void
TokenStreamAnyChars
:
:
SourceCoords
:
:
lineNumAndColumnIndex
(
uint32_t
offset
uint32_t
*
lineNum
uint32_t
*
column
)
const
{
uint32_t
lineIndex
=
lineIndexOf
(
offset
)
;
*
lineNum
=
lineIndexToNum
(
lineIndex
)
;
*
column
=
lineIndexAndOffsetToColumn
(
lineIndex
offset
)
;
}
#
ifdef
_MSC_VER
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4351
)
#
endif
TokenStreamAnyChars
:
:
TokenStreamAnyChars
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
StrictModeGetter
*
smg
)
:
srcCoords
(
cx
options
.
lineno
options
.
column
options
.
scriptSourceOffset
)
options_
(
options
)
tokens
(
)
cursor
(
)
lookahead
(
)
lineno
(
options
.
lineno
)
flags
(
)
linebase
(
0
)
prevLinebase
(
size_t
(
-
1
)
)
filename_
(
options
.
filename
(
)
)
displayURL_
(
nullptr
)
sourceMapURL_
(
nullptr
)
cx
(
cx
)
mutedErrors
(
options
.
mutedErrors
(
)
)
strictModeGetter
(
smg
)
{
PodArrayZero
(
isExprEnding
)
;
isExprEnding
[
TOK_COMMA
]
=
1
;
isExprEnding
[
TOK_SEMI
]
=
1
;
isExprEnding
[
TOK_COLON
]
=
1
;
isExprEnding
[
TOK_RP
]
=
1
;
isExprEnding
[
TOK_RB
]
=
1
;
isExprEnding
[
TOK_RC
]
=
1
;
}
template
<
typename
CharT
>
TokenStreamCharsBase
<
CharT
>
:
:
TokenStreamCharsBase
(
JSContext
*
cx
const
CharT
*
chars
size_t
length
size_t
startOffset
)
:
userbuf
(
chars
length
startOffset
)
tokenbuf
(
cx
)
{
}
template
<
class
AnyCharsAccess
>
TokenStreamChars
<
char16_t
AnyCharsAccess
>
:
:
TokenStreamChars
(
JSContext
*
cx
const
char16_t
*
base
size_t
length
size_t
startOffset
)
:
TokenStreamCharsBase
<
char16_t
>
(
cx
base
length
startOffset
)
{
}
template
<
typename
CharT
class
AnyCharsAccess
>
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
TokenStreamSpecific
(
JSContext
*
cx
const
ReadOnlyCompileOptions
&
options
const
CharT
*
base
size_t
length
)
:
TokenStreamChars
<
CharT
AnyCharsAccess
>
(
cx
base
length
options
.
scriptSourceOffset
)
{
}
#
ifdef
_MSC_VER
#
pragma
warning
(
pop
)
#
endif
bool
TokenStreamAnyChars
:
:
checkOptions
(
)
{
if
(
options
(
)
.
column
>
=
mozilla
:
:
MaxValue
<
int32_t
>
:
:
value
/
2
+
1
)
{
reportErrorNoOffset
(
JSMSG_BAD_COLUMN_NUMBER
)
;
return
false
;
}
return
true
;
}
#
if
defined
(
HAVE_GETC_UNLOCKED
)
#
define
fast_getc
getc_unlocked
#
elif
defined
(
HAVE__GETC_NOLOCK
)
#
define
fast_getc
_getc_nolock
#
else
#
define
fast_getc
getc
#
endif
MOZ_MUST_USE
MOZ_ALWAYS_INLINE
bool
TokenStreamAnyChars
:
:
internalUpdateLineInfoForEOL
(
uint32_t
lineStartOffset
)
{
prevLinebase
=
linebase
;
linebase
=
lineStartOffset
;
lineno
+
+
;
return
srcCoords
.
add
(
lineno
linebase
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
MOZ_MUST_USE
MOZ_ALWAYS_INLINE
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
updateLineInfoForEOL
(
)
{
return
anyCharsAccess
(
)
.
internalUpdateLineInfoForEOL
(
userbuf
.
offset
(
)
)
;
}
MOZ_ALWAYS_INLINE
void
TokenStreamAnyChars
:
:
updateFlagsForEOL
(
)
{
flags
.
isDirtyLine
=
false
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getChar
(
int32_t
*
cp
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
if
(
MOZ_UNLIKELY
(
!
userbuf
.
hasRawChars
(
)
)
)
{
anyChars
.
flags
.
isEOF
=
true
;
*
cp
=
EOF
;
return
true
;
}
int32_t
c
=
userbuf
.
getRawChar
(
)
;
do
{
if
(
MOZ_UNLIKELY
(
c
=
=
'
\
n
'
)
)
break
;
if
(
MOZ_UNLIKELY
(
c
=
=
'
\
r
'
)
)
{
if
(
MOZ_LIKELY
(
userbuf
.
hasRawChars
(
)
)
)
userbuf
.
matchRawChar
(
'
\
n
'
)
;
break
;
}
if
(
MOZ_UNLIKELY
(
c
=
=
unicode
:
:
LINE_SEPARATOR
|
|
c
=
=
unicode
:
:
PARA_SEPARATOR
)
)
break
;
*
cp
=
c
;
return
true
;
}
while
(
false
)
;
if
(
!
updateLineInfoForEOL
(
)
)
return
false
;
*
cp
=
'
\
n
'
;
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
int32_t
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getCharIgnoreEOL
(
)
{
if
(
MOZ_LIKELY
(
userbuf
.
hasRawChars
(
)
)
)
return
userbuf
.
getRawChar
(
)
;
anyCharsAccess
(
)
.
flags
.
isEOF
=
true
;
return
EOF
;
}
void
TokenStreamAnyChars
:
:
undoGetChar
(
)
{
MOZ_ASSERT
(
prevLinebase
!
=
size_t
(
-
1
)
)
;
linebase
=
prevLinebase
;
prevLinebase
=
size_t
(
-
1
)
;
lineno
-
-
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
ungetChar
(
int32_t
c
)
{
if
(
c
=
=
EOF
)
return
;
MOZ_ASSERT
(
!
userbuf
.
atStart
(
)
)
;
userbuf
.
ungetRawChar
(
)
;
if
(
c
=
=
'
\
n
'
)
{
#
ifdef
DEBUG
int32_t
c2
=
userbuf
.
peekRawChar
(
)
;
MOZ_ASSERT
(
TokenBuf
:
:
isRawEOLChar
(
c2
)
)
;
#
endif
if
(
!
userbuf
.
atStart
(
)
)
userbuf
.
matchRawCharBackwards
(
'
\
r
'
)
;
anyCharsAccess
(
)
.
undoGetChar
(
)
;
}
else
{
MOZ_ASSERT
(
userbuf
.
peekRawChar
(
)
=
=
c
)
;
}
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
ungetCharIgnoreEOL
(
int32_t
c
)
{
if
(
c
=
=
EOF
)
return
;
MOZ_ASSERT
(
!
userbuf
.
atStart
(
)
)
;
userbuf
.
ungetRawChar
(
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
peekChars
(
int
n
CharT
*
cp
)
{
int
i
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
int32_t
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
EOF
)
break
;
if
(
c
=
=
'
\
n
'
)
{
ungetCharIgnoreEOL
(
c
)
;
break
;
}
cp
[
i
]
=
char16_t
(
c
)
;
}
for
(
int
j
=
i
-
1
;
j
>
=
0
;
j
-
-
)
ungetCharIgnoreEOL
(
cp
[
j
]
)
;
return
i
=
=
n
;
}
template
<
typename
CharT
>
size_t
TokenStreamCharsBase
<
CharT
>
:
:
TokenBuf
:
:
findEOLMax
(
size_t
start
size_t
max
)
{
const
CharT
*
p
=
rawCharPtrAt
(
start
)
;
size_t
n
=
0
;
while
(
true
)
{
if
(
p
>
=
limit_
)
break
;
if
(
n
>
=
max
)
break
;
n
+
+
;
if
(
TokenBuf
:
:
isRawEOLChar
(
*
p
+
+
)
)
break
;
}
return
start
+
n
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
advance
(
size_t
position
)
{
const
CharT
*
end
=
userbuf
.
rawCharPtrAt
(
position
)
;
while
(
userbuf
.
addressOfNextRawChar
(
)
<
end
)
{
int32_t
c
;
if
(
!
getChar
(
&
c
)
)
return
false
;
}
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
Token
*
cur
=
&
anyChars
.
tokens
[
anyChars
.
cursor
]
;
cur
-
>
pos
.
begin
=
userbuf
.
offset
(
)
;
MOZ_MAKE_MEM_UNDEFINED
(
&
cur
-
>
type
sizeof
(
cur
-
>
type
)
)
;
anyChars
.
lookahead
=
0
;
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
tell
(
Position
*
pos
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
pos
-
>
buf
=
userbuf
.
addressOfNextRawChar
(
true
)
;
pos
-
>
flags
=
anyChars
.
flags
;
pos
-
>
lineno
=
anyChars
.
lineno
;
pos
-
>
linebase
=
anyChars
.
linebase
;
pos
-
>
prevLinebase
=
anyChars
.
prevLinebase
;
pos
-
>
lookahead
=
anyChars
.
lookahead
;
pos
-
>
currentToken
=
anyChars
.
currentToken
(
)
;
for
(
unsigned
i
=
0
;
i
<
anyChars
.
lookahead
;
i
+
+
)
pos
-
>
lookaheadTokens
[
i
]
=
anyChars
.
tokens
[
(
anyChars
.
cursor
+
1
+
i
)
&
ntokensMask
]
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
seek
(
const
Position
&
pos
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
userbuf
.
setAddressOfNextRawChar
(
pos
.
buf
true
)
;
anyChars
.
flags
=
pos
.
flags
;
anyChars
.
lineno
=
pos
.
lineno
;
anyChars
.
linebase
=
pos
.
linebase
;
anyChars
.
prevLinebase
=
pos
.
prevLinebase
;
anyChars
.
lookahead
=
pos
.
lookahead
;
anyChars
.
tokens
[
anyChars
.
cursor
]
=
pos
.
currentToken
;
for
(
unsigned
i
=
0
;
i
<
anyChars
.
lookahead
;
i
+
+
)
anyChars
.
tokens
[
(
anyChars
.
cursor
+
1
+
i
)
&
ntokensMask
]
=
pos
.
lookaheadTokens
[
i
]
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
seek
(
const
Position
&
pos
const
TokenStreamAnyChars
&
other
)
{
if
(
!
anyCharsAccess
(
)
.
srcCoords
.
fill
(
other
.
srcCoords
)
)
return
false
;
seek
(
pos
)
;
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
reportStrictModeErrorNumberVA
(
UniquePtr
<
JSErrorNotes
>
notes
uint32_t
offset
bool
strictMode
unsigned
errorNumber
va_list
*
args
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
if
(
!
strictMode
&
&
!
anyChars
.
options
(
)
.
extraWarningsOption
)
return
true
;
ErrorMetadata
metadata
;
if
(
!
computeErrorMetadata
(
&
metadata
offset
)
)
return
false
;
if
(
strictMode
)
{
ReportCompileError
(
anyChars
.
cx
Move
(
metadata
)
Move
(
notes
)
JSREPORT_ERROR
errorNumber
*
args
)
;
return
false
;
}
return
anyChars
.
compileWarning
(
Move
(
metadata
)
Move
(
notes
)
JSREPORT_WARNING
|
JSREPORT_STRICT
errorNumber
*
args
)
;
}
bool
TokenStreamAnyChars
:
:
compileWarning
(
ErrorMetadata
&
&
metadata
UniquePtr
<
JSErrorNotes
>
notes
unsigned
flags
unsigned
errorNumber
va_list
args
)
{
if
(
options
(
)
.
werrorOption
)
{
flags
&
=
~
JSREPORT_WARNING
;
ReportCompileError
(
cx
Move
(
metadata
)
Move
(
notes
)
flags
errorNumber
args
)
;
return
false
;
}
return
ReportCompileWarning
(
cx
Move
(
metadata
)
Move
(
notes
)
flags
errorNumber
args
)
;
}
void
TokenStreamAnyChars
:
:
computeErrorMetadataNoOffset
(
ErrorMetadata
*
err
)
{
err
-
>
isMuted
=
mutedErrors
;
err
-
>
filename
=
filename_
;
err
-
>
lineNumber
=
0
;
err
-
>
columnNumber
=
0
;
MOZ_ASSERT
(
err
-
>
lineOfContext
=
=
nullptr
)
;
}
bool
TokenStreamAnyChars
:
:
fillExcludingContext
(
ErrorMetadata
*
err
uint32_t
offset
)
{
err
-
>
isMuted
=
mutedErrors
;
if
(
!
filename_
&
&
!
cx
-
>
helperThread
(
)
)
{
NonBuiltinFrameIter
iter
(
cx
FrameIter
:
:
FOLLOW_DEBUGGER_EVAL_PREV_LINK
cx
-
>
compartment
(
)
-
>
principals
(
)
)
;
if
(
!
iter
.
done
(
)
&
&
iter
.
filename
(
)
)
{
err
-
>
filename
=
iter
.
filename
(
)
;
err
-
>
lineNumber
=
iter
.
computeLine
(
&
err
-
>
columnNumber
)
;
return
false
;
}
}
err
-
>
filename
=
filename_
;
srcCoords
.
lineNumAndColumnIndex
(
offset
&
err
-
>
lineNumber
&
err
-
>
columnNumber
)
;
return
true
;
}
bool
TokenStreamAnyChars
:
:
hasTokenizationStarted
(
)
const
{
return
isCurrentTokenType
(
TOK_EOF
)
&
&
!
isEOF
(
)
;
}
void
TokenStreamAnyChars
:
:
lineAndColumnAt
(
size_t
offset
uint32_t
*
line
uint32_t
*
column
)
const
{
srcCoords
.
lineNumAndColumnIndex
(
offset
line
column
)
;
}
void
TokenStreamAnyChars
:
:
currentLineAndColumn
(
uint32_t
*
line
uint32_t
*
column
)
const
{
uint32_t
offset
=
currentToken
(
)
.
pos
.
begin
;
srcCoords
.
lineNumAndColumnIndex
(
offset
line
column
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
computeErrorMetadata
(
ErrorMetadata
*
err
uint32_t
offset
)
{
if
(
offset
=
=
NoOffset
)
{
anyCharsAccess
(
)
.
computeErrorMetadataNoOffset
(
err
)
;
return
true
;
}
if
(
!
anyCharsAccess
(
)
.
fillExcludingContext
(
err
offset
)
)
return
true
;
return
computeLineOfContext
(
err
offset
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
computeLineOfContext
(
ErrorMetadata
*
err
uint32_t
offset
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
if
(
err
-
>
lineNumber
!
=
anyChars
.
lineno
)
return
true
;
constexpr
size_t
windowRadius
=
ErrorMetadata
:
:
lineOfContextRadius
;
MOZ_ASSERT
(
offset
>
=
anyChars
.
linebase
)
;
size_t
windowStart
=
(
offset
-
anyChars
.
linebase
>
windowRadius
)
?
offset
-
windowRadius
:
anyChars
.
linebase
;
if
(
windowStart
<
userbuf
.
startOffset
(
)
)
windowStart
=
userbuf
.
startOffset
(
)
;
size_t
windowEnd
=
userbuf
.
findEOLMax
(
offset
windowRadius
)
;
size_t
windowLength
=
windowEnd
-
windowStart
;
MOZ_ASSERT
(
windowLength
<
=
windowRadius
*
2
)
;
StringBuffer
windowBuf
(
anyChars
.
cx
)
;
if
(
!
windowBuf
.
append
(
rawCharPtrAt
(
windowStart
)
windowLength
)
|
|
!
windowBuf
.
append
(
'
\
0
'
)
)
{
return
false
;
}
err
-
>
lineOfContext
.
reset
(
windowBuf
.
stealChars
(
)
)
;
if
(
!
err
-
>
lineOfContext
)
return
false
;
err
-
>
lineLength
=
windowLength
;
err
-
>
tokenOffset
=
offset
-
windowStart
;
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
reportStrictModeError
(
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
bool
result
=
reportStrictModeErrorNumberVA
(
nullptr
anyChars
.
currentToken
(
)
.
pos
.
begin
anyChars
.
strictMode
(
)
errorNumber
&
args
)
;
va_end
(
args
)
;
return
result
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
reportError
(
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
ErrorMetadata
metadata
;
if
(
computeErrorMetadata
(
&
metadata
anyChars
.
currentToken
(
)
.
pos
.
begin
)
)
{
ReportCompileError
(
anyChars
.
cx
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
args
)
;
}
va_end
(
args
)
;
}
void
TokenStreamAnyChars
:
:
reportErrorNoOffsetVA
(
unsigned
errorNumber
va_list
args
)
{
ErrorMetadata
metadata
;
computeErrorMetadataNoOffset
(
&
metadata
)
;
ReportCompileError
(
cx
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
args
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
warning
(
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
ErrorMetadata
metadata
;
bool
result
=
computeErrorMetadata
(
&
metadata
anyCharsAccess
(
)
.
currentToken
(
)
.
pos
.
begin
)
&
&
anyCharsAccess
(
)
.
compileWarning
(
Move
(
metadata
)
nullptr
JSREPORT_WARNING
errorNumber
args
)
;
va_end
(
args
)
;
return
result
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
reportExtraWarningErrorNumberVA
(
UniquePtr
<
JSErrorNotes
>
notes
uint32_t
offset
unsigned
errorNumber
va_list
*
args
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
if
(
!
anyChars
.
options
(
)
.
extraWarningsOption
)
return
true
;
ErrorMetadata
metadata
;
if
(
!
computeErrorMetadata
(
&
metadata
offset
)
)
return
false
;
return
anyChars
.
compileWarning
(
Move
(
metadata
)
Move
(
notes
)
JSREPORT_STRICT
|
JSREPORT_WARNING
errorNumber
*
args
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
error
(
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
ErrorMetadata
metadata
;
if
(
computeErrorMetadata
(
&
metadata
anyChars
.
currentToken
(
)
.
pos
.
begin
)
)
ReportCompileError
(
anyChars
.
cx
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
args
)
;
va_end
(
args
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
void
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
errorAt
(
uint32_t
offset
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
ErrorMetadata
metadata
;
if
(
computeErrorMetadata
(
&
metadata
offset
)
)
ReportCompileError
(
anyChars
.
cx
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
args
)
;
va_end
(
args
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
uint32_t
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
peekUnicodeEscape
(
uint32_t
*
codePoint
)
{
int32_t
c
=
getCharIgnoreEOL
(
)
;
if
(
c
!
=
'
u
'
)
{
ungetCharIgnoreEOL
(
c
)
;
return
0
;
}
CharT
cp
[
3
]
;
uint32_t
length
;
c
=
getCharIgnoreEOL
(
)
;
if
(
JS7_ISHEX
(
c
)
&
&
peekChars
(
3
cp
)
&
&
JS7_ISHEX
(
cp
[
0
]
)
&
&
JS7_ISHEX
(
cp
[
1
]
)
&
&
JS7_ISHEX
(
cp
[
2
]
)
)
{
*
codePoint
=
(
JS7_UNHEX
(
c
)
<
<
12
)
|
(
JS7_UNHEX
(
cp
[
0
]
)
<
<
8
)
|
(
JS7_UNHEX
(
cp
[
1
]
)
<
<
4
)
|
JS7_UNHEX
(
cp
[
2
]
)
;
length
=
5
;
}
else
if
(
c
=
=
'
{
'
)
{
length
=
peekExtendedUnicodeEscape
(
codePoint
)
;
}
else
{
length
=
0
;
}
ungetCharIgnoreEOL
(
c
)
;
ungetCharIgnoreEOL
(
'
u
'
)
;
return
length
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
uint32_t
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
peekExtendedUnicodeEscape
(
uint32_t
*
codePoint
)
{
int32_t
c
=
getCharIgnoreEOL
(
)
;
uint32_t
leadingZeros
=
0
;
while
(
c
=
=
'
0
'
)
{
leadingZeros
+
+
;
c
=
getCharIgnoreEOL
(
)
;
}
CharT
cp
[
6
]
;
size_t
i
=
0
;
uint32_t
code
=
0
;
while
(
JS7_ISHEX
(
c
)
&
&
i
<
6
)
{
cp
[
i
+
+
]
=
c
;
code
=
code
<
<
4
|
JS7_UNHEX
(
c
)
;
c
=
getCharIgnoreEOL
(
)
;
}
uint32_t
length
;
if
(
c
=
=
'
}
'
&
&
(
leadingZeros
>
0
|
|
i
>
0
)
&
&
code
<
=
unicode
:
:
NonBMPMax
)
{
*
codePoint
=
code
;
length
=
leadingZeros
+
i
+
3
;
}
else
{
length
=
0
;
}
ungetCharIgnoreEOL
(
c
)
;
while
(
i
-
-
)
ungetCharIgnoreEOL
(
cp
[
i
]
)
;
while
(
leadingZeros
-
-
)
ungetCharIgnoreEOL
(
'
0
'
)
;
return
length
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
uint32_t
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
matchUnicodeEscapeIdStart
(
uint32_t
*
codePoint
)
{
uint32_t
length
=
peekUnicodeEscape
(
codePoint
)
;
if
(
length
>
0
&
&
unicode
:
:
IsIdentifierStart
(
*
codePoint
)
)
{
skipChars
(
length
)
;
return
length
;
}
return
0
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
matchUnicodeEscapeIdent
(
uint32_t
*
codePoint
)
{
uint32_t
length
=
peekUnicodeEscape
(
codePoint
)
;
if
(
length
>
0
&
&
unicode
:
:
IsIdentifierPart
(
*
codePoint
)
)
{
skipChars
(
length
)
;
return
true
;
}
return
false
;
}
template
<
typename
CharT
>
static
bool
CharsMatch
(
const
CharT
*
p
const
char
*
q
)
{
while
(
*
q
)
{
if
(
*
p
+
+
!
=
*
q
+
+
)
return
false
;
}
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getDirectives
(
bool
isMultiline
bool
shouldWarnDeprecated
)
{
return
getDisplayURL
(
isMultiline
shouldWarnDeprecated
)
&
&
getSourceMappingURL
(
isMultiline
shouldWarnDeprecated
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
MOZ_MUST_USE
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getDirective
(
bool
isMultiline
bool
shouldWarnDeprecated
const
char
*
directive
uint8_t
directiveLength
const
char
*
errorMsgPragma
UniquePtr
<
char16_t
[
]
JS
:
:
FreePolicy
>
*
destination
)
{
MOZ_ASSERT
(
directiveLength
<
=
18
)
;
char16_t
peeked
[
18
]
;
if
(
peekChars
(
directiveLength
peeked
)
&
&
CharsMatch
(
peeked
directive
)
)
{
if
(
shouldWarnDeprecated
)
{
if
(
!
warning
(
JSMSG_DEPRECATED_PRAGMA
errorMsgPragma
)
)
return
false
;
}
skipChars
(
directiveLength
)
;
tokenbuf
.
clear
(
)
;
do
{
int32_t
c
;
if
(
!
peekChar
(
&
c
)
)
return
false
;
if
(
c
=
=
EOF
|
|
unicode
:
:
IsSpaceOrBOM2
(
c
)
)
break
;
consumeKnownChar
(
c
)
;
if
(
isMultiline
&
&
c
=
=
'
*
'
)
{
int32_t
c2
;
if
(
!
peekChar
(
&
c2
)
)
return
false
;
if
(
c2
=
=
'
/
'
)
{
ungetChar
(
'
*
'
)
;
break
;
}
}
if
(
!
tokenbuf
.
append
(
c
)
)
return
false
;
}
while
(
true
)
;
if
(
tokenbuf
.
empty
(
)
)
{
return
true
;
}
size_t
length
=
tokenbuf
.
length
(
)
;
*
destination
=
anyCharsAccess
(
)
.
cx
-
>
template
make_pod_array
<
char16_t
>
(
length
+
1
)
;
if
(
!
*
destination
)
return
false
;
PodCopy
(
destination
-
>
get
(
)
tokenbuf
.
begin
(
)
length
)
;
(
*
destination
)
[
length
]
=
'
\
0
'
;
}
return
true
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getDisplayURL
(
bool
isMultiline
bool
shouldWarnDeprecated
)
{
static
const
char
sourceURLDirective
[
]
=
"
sourceURL
=
"
;
constexpr
uint8_t
sourceURLDirectiveLength
=
ArrayLength
(
sourceURLDirective
)
-
1
;
return
getDirective
(
isMultiline
shouldWarnDeprecated
sourceURLDirective
sourceURLDirectiveLength
"
sourceURL
"
&
anyCharsAccess
(
)
.
displayURL_
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getSourceMappingURL
(
bool
isMultiline
bool
shouldWarnDeprecated
)
{
static
const
char
sourceMappingURLDirective
[
]
=
"
sourceMappingURL
=
"
;
constexpr
uint8_t
sourceMappingURLDirectiveLength
=
ArrayLength
(
sourceMappingURLDirective
)
-
1
;
return
getDirective
(
isMultiline
shouldWarnDeprecated
sourceMappingURLDirective
sourceMappingURLDirectiveLength
"
sourceMappingURL
"
&
anyCharsAccess
(
)
.
sourceMapURL_
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
MOZ_ALWAYS_INLINE
Token
*
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
newToken
(
ptrdiff_t
adjust
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
cursor
=
(
anyChars
.
cursor
+
1
)
&
ntokensMask
;
Token
*
tp
=
&
anyChars
.
tokens
[
anyChars
.
cursor
]
;
tp
-
>
pos
.
begin
=
userbuf
.
offset
(
)
+
adjust
;
MOZ_MAKE_MEM_UNDEFINED
(
&
tp
-
>
pos
.
end
sizeof
(
tp
-
>
pos
.
end
)
)
;
return
tp
;
}
#
ifdef
DEBUG
static
bool
IsTokenSane
(
Token
*
tp
)
{
if
(
tp
-
>
type
>
=
TOK_LIMIT
|
|
tp
-
>
type
=
=
TOK_EOL
)
return
false
;
if
(
tp
-
>
pos
.
end
<
tp
-
>
pos
.
begin
)
return
false
;
return
true
;
}
#
endif
template
<
class
AnyCharsAccess
>
bool
TokenStreamChars
<
char16_t
AnyCharsAccess
>
:
:
matchTrailForLeadSurrogate
(
char16_t
lead
uint32_t
*
codePoint
)
{
static_assert
(
mozilla
:
:
IsBaseOf
<
TokenStreamChars
<
char16_t
AnyCharsAccess
>
TokenStreamSpecific
<
char16_t
AnyCharsAccess
>
>
:
:
value
"
static_cast
below
presumes
an
inheritance
relationship
"
)
;
auto
*
ts
=
static_cast
<
TokenStreamSpecific
<
char16_t
AnyCharsAccess
>
*
>
(
this
)
;
int32_t
maybeTrail
=
ts
-
>
getCharIgnoreEOL
(
)
;
if
(
!
unicode
:
:
IsTrailSurrogate
(
maybeTrail
)
)
{
ts
-
>
ungetCharIgnoreEOL
(
maybeTrail
)
;
return
false
;
}
*
codePoint
=
unicode
:
:
UTF16Decode
(
lead
maybeTrail
)
;
return
true
;
}
template
<
>
MOZ_MUST_USE
bool
TokenStreamCharsBase
<
char16_t
>
:
:
appendMultiUnitCodepointToTokenbuf
(
uint32_t
codepoint
)
{
char16_t
lead
trail
;
unicode
:
:
UTF16Encode
(
codepoint
&
lead
&
trail
)
;
return
tokenbuf
.
append
(
lead
)
&
&
tokenbuf
.
append
(
trail
)
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
putIdentInTokenbuf
(
const
CharT
*
identStart
)
{
const
CharT
*
tmp
=
userbuf
.
addressOfNextRawChar
(
)
;
userbuf
.
setAddressOfNextRawChar
(
identStart
)
;
tokenbuf
.
clear
(
)
;
for
(
;
;
)
{
int32_t
c
=
getCharIgnoreEOL
(
)
;
uint32_t
codePoint
;
if
(
isMultiUnitCodepoint
(
c
&
codePoint
)
)
{
if
(
!
unicode
:
:
IsIdentifierPart
(
codePoint
)
)
break
;
if
(
!
appendMultiUnitCodepointToTokenbuf
(
codePoint
)
)
{
userbuf
.
setAddressOfNextRawChar
(
tmp
)
;
return
false
;
}
continue
;
}
if
(
!
unicode
:
:
IsIdentifierPart
(
char16_t
(
c
)
)
)
{
uint32_t
qc
;
if
(
c
!
=
'
\
\
'
|
|
!
matchUnicodeEscapeIdent
(
&
qc
)
)
break
;
if
(
MOZ_UNLIKELY
(
unicode
:
:
IsSupplementary
(
qc
)
)
)
{
char16_t
lead
trail
;
unicode
:
:
UTF16Encode
(
qc
&
lead
&
trail
)
;
if
(
!
tokenbuf
.
append
(
lead
)
|
|
!
tokenbuf
.
append
(
trail
)
)
{
userbuf
.
setAddressOfNextRawChar
(
tmp
)
;
return
false
;
}
continue
;
}
c
=
qc
;
}
if
(
!
tokenbuf
.
append
(
c
)
)
{
userbuf
.
setAddressOfNextRawChar
(
tmp
)
;
return
false
;
}
}
userbuf
.
setAddressOfNextRawChar
(
tmp
)
;
return
true
;
}
enum
FirstCharKind
{
OneChar_Min
=
0
OneChar_Max
=
TOK_LIMIT
-
1
Space
=
TOK_LIMIT
Ident
Dec
String
EOL
BasePrefix
Other
LastCharKind
=
Other
}
;
#
define
T_COMMA
TOK_COMMA
#
define
T_COLON
TOK_COLON
#
define
T_BITNOT
TOK_BITNOT
#
define
Templat
String
#
define
_______
Other
static
const
uint8_t
firstCharKinds
[
]
=
{
_______
_______
_______
_______
_______
_______
_______
_______
_______
Space
EOL
Space
Space
EOL
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
_______
Space
_______
String
_______
Ident
_______
_______
String
TOK_LP
TOK_RP
_______
_______
T_COMMA
_______
_______
_______
BasePrefix
Dec
Dec
Dec
Dec
Dec
Dec
Dec
Dec
Dec
T_COLON
TOK_SEMI
_______
_______
_______
TOK_HOOK
_______
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
TOK_LB
_______
TOK_RB
_______
Ident
Templat
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
Ident
TOK_LC
_______
TOK_RC
T_BITNOT
_______
}
;
#
undef
T_COMMA
#
undef
T_COLON
#
undef
T_BITNOT
#
undef
Templat
#
undef
_______
static_assert
(
LastCharKind
<
(
1
<
<
(
sizeof
(
firstCharKinds
[
0
]
)
*
8
)
)
"
Elements
of
firstCharKinds
[
]
are
too
small
"
)
;
template
<
typename
CharT
class
AnyCharsAccess
>
MOZ_MUST_USE
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getTokenInternal
(
TokenKind
*
ttp
Modifier
modifier
)
{
int
c
;
uint32_t
qc
;
Token
*
tp
;
FirstCharKind
c1kind
;
const
CharT
*
numStart
;
bool
hasExp
;
DecimalPoint
decimalPoint
;
const
CharT
*
identStart
;
bool
hadUnicodeEscape
;
if
(
MOZ_UNLIKELY
(
modifier
=
=
TemplateTail
)
)
{
if
(
!
getStringOrTemplateToken
(
'
'
&
tp
)
)
goto
error
;
goto
out
;
}
retry
:
if
(
MOZ_UNLIKELY
(
!
userbuf
.
hasRawChars
(
)
)
)
{
tp
=
newToken
(
0
)
;
tp
-
>
type
=
TOK_EOF
;
anyCharsAccess
(
)
.
flags
.
isEOF
=
true
;
goto
out
;
}
c
=
userbuf
.
getRawChar
(
)
;
MOZ_ASSERT
(
c
!
=
EOF
)
;
if
(
MOZ_UNLIKELY
(
c
>
=
128
)
)
{
if
(
unicode
:
:
IsSpaceOrBOM2
(
c
)
)
{
if
(
c
=
=
unicode
:
:
LINE_SEPARATOR
|
|
c
=
=
unicode
:
:
PARA_SEPARATOR
)
{
if
(
!
updateLineInfoForEOL
(
)
)
goto
error
;
anyCharsAccess
(
)
.
updateFlagsForEOL
(
)
;
}
goto
retry
;
}
tp
=
newToken
(
-
1
)
;
identStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
static_assert
(
'
'
<
128
"
IdentifierStart
contains
'
'
but
as
!
IsUnicodeIDStart
(
'
'
)
"
"
ensure
that
'
'
is
never
handled
here
"
)
;
static_assert
(
'
_
'
<
128
"
IdentifierStart
contains
'
_
'
but
as
!
IsUnicodeIDStart
(
'
_
'
)
"
"
ensure
that
'
_
'
is
never
handled
here
"
)
;
if
(
unicode
:
:
IsUnicodeIDStart
(
char16_t
(
c
)
)
)
{
hadUnicodeEscape
=
false
;
goto
identifier
;
}
uint32_t
codePoint
;
if
(
isMultiUnitCodepoint
(
c
&
codePoint
)
&
&
unicode
:
:
IsUnicodeIDStart
(
codePoint
)
)
{
hadUnicodeEscape
=
false
;
goto
identifier
;
}
goto
badchar
;
}
c1kind
=
FirstCharKind
(
firstCharKinds
[
c
]
)
;
if
(
c1kind
<
=
OneChar_Max
)
{
tp
=
newToken
(
-
1
)
;
tp
-
>
type
=
TokenKind
(
c1kind
)
;
goto
out
;
}
if
(
c1kind
=
=
Space
)
goto
retry
;
if
(
c1kind
=
=
Ident
)
{
tp
=
newToken
(
-
1
)
;
identStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
hadUnicodeEscape
=
false
;
identifier
:
for
(
;
;
)
{
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
EOF
)
break
;
uint32_t
codePoint
;
if
(
isMultiUnitCodepoint
(
c
&
codePoint
)
)
{
if
(
!
unicode
:
:
IsIdentifierPart
(
codePoint
)
)
break
;
continue
;
}
if
(
!
unicode
:
:
IsIdentifierPart
(
char16_t
(
c
)
)
)
{
if
(
c
!
=
'
\
\
'
|
|
!
matchUnicodeEscapeIdent
(
&
qc
)
)
break
;
hadUnicodeEscape
=
true
;
}
}
ungetCharIgnoreEOL
(
c
)
;
const
CharT
*
chars
;
size_t
length
;
if
(
hadUnicodeEscape
)
{
if
(
!
putIdentInTokenbuf
(
identStart
)
)
goto
error
;
chars
=
tokenbuf
.
begin
(
)
;
length
=
tokenbuf
.
length
(
)
;
}
else
{
chars
=
identStart
;
length
=
userbuf
.
addressOfNextRawChar
(
)
-
identStart
;
}
if
(
!
hadUnicodeEscape
)
{
if
(
const
ReservedWordInfo
*
rw
=
FindReservedWord
(
chars
length
)
)
{
tp
-
>
type
=
rw
-
>
tokentype
;
goto
out
;
}
}
JSAtom
*
atom
=
atomizeChars
(
anyCharsAccess
(
)
.
cx
chars
length
)
;
if
(
!
atom
)
goto
error
;
tp
-
>
type
=
TOK_NAME
;
tp
-
>
setName
(
atom
-
>
asPropertyName
(
)
)
;
goto
out
;
}
if
(
c1kind
=
=
Dec
)
{
tp
=
newToken
(
-
1
)
;
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
decimal
:
decimalPoint
=
NoDecimal
;
hasExp
=
false
;
while
(
JS7_ISDEC
(
c
)
)
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
'
.
'
)
{
decimalPoint
=
HasDecimal
;
decimal_dot
:
do
{
c
=
getCharIgnoreEOL
(
)
;
}
while
(
JS7_ISDEC
(
c
)
)
;
}
if
(
c
=
=
'
e
'
|
|
c
=
=
'
E
'
)
{
hasExp
=
true
;
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
'
+
'
|
|
c
=
=
'
-
'
)
c
=
getCharIgnoreEOL
(
)
;
if
(
!
JS7_ISDEC
(
c
)
)
{
ungetCharIgnoreEOL
(
c
)
;
reportError
(
JSMSG_MISSING_EXPONENT
)
;
goto
error
;
}
do
{
c
=
getCharIgnoreEOL
(
)
;
}
while
(
JS7_ISDEC
(
c
)
)
;
}
ungetCharIgnoreEOL
(
c
)
;
if
(
c
!
=
EOF
)
{
if
(
unicode
:
:
IsIdentifierStart
(
char16_t
(
c
)
)
)
{
reportError
(
JSMSG_IDSTART_AFTER_NUMBER
)
;
goto
error
;
}
uint32_t
codePoint
;
if
(
isMultiUnitCodepoint
(
c
&
codePoint
)
&
&
unicode
:
:
IsIdentifierStart
(
codePoint
)
)
{
reportError
(
JSMSG_IDSTART_AFTER_NUMBER
)
;
goto
error
;
}
}
double
dval
;
if
(
!
(
(
decimalPoint
=
=
HasDecimal
)
|
|
hasExp
)
)
{
if
(
!
GetDecimalInteger
(
anyCharsAccess
(
)
.
cx
numStart
userbuf
.
addressOfNextRawChar
(
)
&
dval
)
)
{
goto
error
;
}
}
else
{
const
CharT
*
dummy
;
if
(
!
js_strtod
(
anyCharsAccess
(
)
.
cx
numStart
userbuf
.
addressOfNextRawChar
(
)
&
dummy
&
dval
)
)
{
goto
error
;
}
}
tp
-
>
type
=
TOK_NUMBER
;
tp
-
>
setNumber
(
dval
decimalPoint
)
;
goto
out
;
}
if
(
c1kind
=
=
String
)
{
if
(
!
getStringOrTemplateToken
(
c
&
tp
)
)
goto
error
;
goto
out
;
}
if
(
c1kind
=
=
EOL
)
{
if
(
c
=
=
'
\
r
'
&
&
userbuf
.
hasRawChars
(
)
)
userbuf
.
matchRawChar
(
'
\
n
'
)
;
if
(
!
updateLineInfoForEOL
(
)
)
goto
error
;
anyCharsAccess
(
)
.
updateFlagsForEOL
(
)
;
goto
retry
;
}
if
(
c1kind
=
=
BasePrefix
)
{
tp
=
newToken
(
-
1
)
;
int
radix
;
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
'
x
'
|
|
c
=
=
'
X
'
)
{
radix
=
16
;
c
=
getCharIgnoreEOL
(
)
;
if
(
!
JS7_ISHEX
(
c
)
)
{
ungetCharIgnoreEOL
(
c
)
;
reportError
(
JSMSG_MISSING_HEXDIGITS
)
;
goto
error
;
}
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
while
(
JS7_ISHEX
(
c
)
)
c
=
getCharIgnoreEOL
(
)
;
}
else
if
(
c
=
=
'
b
'
|
|
c
=
=
'
B
'
)
{
radix
=
2
;
c
=
getCharIgnoreEOL
(
)
;
if
(
c
!
=
'
0
'
&
&
c
!
=
'
1
'
)
{
ungetCharIgnoreEOL
(
c
)
;
reportError
(
JSMSG_MISSING_BINARY_DIGITS
)
;
goto
error
;
}
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
while
(
c
=
=
'
0
'
|
|
c
=
=
'
1
'
)
c
=
getCharIgnoreEOL
(
)
;
}
else
if
(
c
=
=
'
o
'
|
|
c
=
=
'
O
'
)
{
radix
=
8
;
c
=
getCharIgnoreEOL
(
)
;
if
(
c
<
'
0
'
|
|
c
>
'
7
'
)
{
ungetCharIgnoreEOL
(
c
)
;
reportError
(
JSMSG_MISSING_OCTAL_DIGITS
)
;
goto
error
;
}
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
while
(
'
0
'
<
=
c
&
&
c
<
=
'
7
'
)
c
=
getCharIgnoreEOL
(
)
;
}
else
if
(
JS7_ISDEC
(
c
)
)
{
radix
=
8
;
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
while
(
JS7_ISDEC
(
c
)
)
{
if
(
!
reportStrictModeError
(
JSMSG_DEPRECATED_OCTAL
)
)
goto
error
;
if
(
c
>
=
'
8
'
)
{
if
(
!
warning
(
JSMSG_BAD_OCTAL
c
=
=
'
8
'
?
"
08
"
:
"
09
"
)
)
goto
error
;
goto
decimal
;
}
c
=
getCharIgnoreEOL
(
)
;
}
}
else
{
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
1
;
goto
decimal
;
}
ungetCharIgnoreEOL
(
c
)
;
if
(
c
!
=
EOF
)
{
if
(
unicode
:
:
IsIdentifierStart
(
char16_t
(
c
)
)
)
{
reportError
(
JSMSG_IDSTART_AFTER_NUMBER
)
;
goto
error
;
}
uint32_t
codePoint
;
if
(
isMultiUnitCodepoint
(
c
&
codePoint
)
&
&
unicode
:
:
IsIdentifierStart
(
codePoint
)
)
{
reportError
(
JSMSG_IDSTART_AFTER_NUMBER
)
;
goto
error
;
}
}
double
dval
;
const
char16_t
*
dummy
;
if
(
!
GetPrefixInteger
(
anyCharsAccess
(
)
.
cx
numStart
userbuf
.
addressOfNextRawChar
(
)
radix
&
dummy
&
dval
)
)
{
goto
error
;
}
tp
-
>
type
=
TOK_NUMBER
;
tp
-
>
setNumber
(
dval
NoDecimal
)
;
goto
out
;
}
MOZ_ASSERT
(
c1kind
=
=
Other
)
;
tp
=
newToken
(
-
1
)
;
switch
(
c
)
{
case
'
.
'
:
c
=
getCharIgnoreEOL
(
)
;
if
(
JS7_ISDEC
(
c
)
)
{
numStart
=
userbuf
.
addressOfNextRawChar
(
)
-
2
;
decimalPoint
=
HasDecimal
;
hasExp
=
false
;
goto
decimal_dot
;
}
if
(
c
=
=
'
.
'
)
{
if
(
matchChar
(
'
.
'
)
)
{
tp
-
>
type
=
TOK_TRIPLEDOT
;
goto
out
;
}
}
ungetCharIgnoreEOL
(
c
)
;
tp
-
>
type
=
TOK_DOT
;
goto
out
;
case
'
=
'
:
if
(
matchChar
(
'
=
'
)
)
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_STRICTEQ
:
TOK_EQ
;
else
if
(
matchChar
(
'
>
'
)
)
tp
-
>
type
=
TOK_ARROW
;
else
tp
-
>
type
=
TOK_ASSIGN
;
goto
out
;
case
'
+
'
:
if
(
matchChar
(
'
+
'
)
)
tp
-
>
type
=
TOK_INC
;
else
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_ADDASSIGN
:
TOK_ADD
;
goto
out
;
case
'
\
\
'
:
{
uint32_t
escapeLength
=
matchUnicodeEscapeIdStart
(
&
qc
)
;
if
(
escapeLength
>
0
)
{
identStart
=
userbuf
.
addressOfNextRawChar
(
)
-
escapeLength
-
1
;
hadUnicodeEscape
=
true
;
goto
identifier
;
}
goto
badchar
;
}
case
'
|
'
:
if
(
matchChar
(
'
|
'
)
)
tp
-
>
type
=
TOK_OR
;
#
ifdef
ENABLE_PIPELINE_OPERATOR
else
if
(
matchChar
(
'
>
'
)
)
tp
-
>
type
=
TOK_PIPELINE
;
#
endif
else
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_BITORASSIGN
:
TOK_BITOR
;
goto
out
;
case
'
^
'
:
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_BITXORASSIGN
:
TOK_BITXOR
;
goto
out
;
case
'
&
'
:
if
(
matchChar
(
'
&
'
)
)
tp
-
>
type
=
TOK_AND
;
else
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_BITANDASSIGN
:
TOK_BITAND
;
goto
out
;
case
'
!
'
:
if
(
matchChar
(
'
=
'
)
)
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_STRICTNE
:
TOK_NE
;
else
tp
-
>
type
=
TOK_NOT
;
goto
out
;
case
'
<
'
:
if
(
anyCharsAccess
(
)
.
options
(
)
.
allowHTMLComments
)
{
if
(
matchChar
(
'
!
'
)
)
{
if
(
matchChar
(
'
-
'
)
)
{
if
(
matchChar
(
'
-
'
)
)
goto
skipline
;
ungetChar
(
'
-
'
)
;
}
ungetChar
(
'
!
'
)
;
}
}
if
(
matchChar
(
'
<
'
)
)
{
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_LSHASSIGN
:
TOK_LSH
;
}
else
{
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_LE
:
TOK_LT
;
}
goto
out
;
case
'
>
'
:
if
(
matchChar
(
'
>
'
)
)
{
if
(
matchChar
(
'
>
'
)
)
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_URSHASSIGN
:
TOK_URSH
;
else
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_RSHASSIGN
:
TOK_RSH
;
}
else
{
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_GE
:
TOK_GT
;
}
goto
out
;
case
'
*
'
:
if
(
matchChar
(
'
*
'
)
)
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_POWASSIGN
:
TOK_POW
;
else
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_MULASSIGN
:
TOK_MUL
;
goto
out
;
case
'
/
'
:
if
(
matchChar
(
'
/
'
)
)
{
if
(
!
peekChar
(
&
c
)
)
goto
error
;
if
(
c
=
=
'
'
|
|
c
=
=
'
#
'
)
{
consumeKnownChar
(
c
)
;
bool
shouldWarn
=
c
=
=
'
'
;
if
(
!
getDirectives
(
false
shouldWarn
)
)
goto
error
;
}
skipline
:
do
{
if
(
!
getChar
(
&
c
)
)
goto
error
;
}
while
(
c
!
=
EOF
&
&
c
!
=
'
\
n
'
)
;
ungetChar
(
c
)
;
anyCharsAccess
(
)
.
cursor
=
(
anyCharsAccess
(
)
.
cursor
-
1
)
&
ntokensMask
;
goto
retry
;
}
if
(
matchChar
(
'
*
'
)
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
unsigned
linenoBefore
=
anyChars
.
lineno
;
do
{
if
(
!
getChar
(
&
c
)
)
return
false
;
if
(
c
=
=
EOF
)
{
reportError
(
JSMSG_UNTERMINATED_COMMENT
)
;
goto
error
;
}
if
(
c
=
=
'
*
'
&
&
matchChar
(
'
/
'
)
)
break
;
if
(
c
=
=
'
'
|
|
c
=
=
'
#
'
)
{
bool
shouldWarn
=
c
=
=
'
'
;
if
(
!
getDirectives
(
true
shouldWarn
)
)
goto
error
;
}
}
while
(
true
)
;
if
(
linenoBefore
!
=
anyChars
.
lineno
)
anyChars
.
updateFlagsForEOL
(
)
;
anyChars
.
cursor
=
(
anyChars
.
cursor
-
1
)
&
ntokensMask
;
goto
retry
;
}
if
(
modifier
=
=
Operand
)
{
tokenbuf
.
clear
(
)
;
bool
inCharClass
=
false
;
do
{
if
(
!
getChar
(
&
c
)
)
goto
error
;
if
(
c
=
=
'
\
\
'
)
{
if
(
!
tokenbuf
.
append
(
c
)
)
goto
error
;
if
(
!
getChar
(
&
c
)
)
goto
error
;
}
else
if
(
c
=
=
'
[
'
)
{
inCharClass
=
true
;
}
else
if
(
c
=
=
'
]
'
)
{
inCharClass
=
false
;
}
else
if
(
c
=
=
'
/
'
&
&
!
inCharClass
)
{
break
;
}
if
(
c
=
=
'
\
n
'
|
|
c
=
=
EOF
)
{
ungetChar
(
c
)
;
reportError
(
JSMSG_UNTERMINATED_REGEXP
)
;
goto
error
;
}
if
(
!
tokenbuf
.
append
(
c
)
)
goto
error
;
}
while
(
true
)
;
RegExpFlag
reflags
=
NoFlags
;
unsigned
length
=
tokenbuf
.
length
(
)
+
1
;
while
(
true
)
{
if
(
!
peekChar
(
&
c
)
)
goto
error
;
if
(
c
=
=
'
g
'
&
&
!
(
reflags
&
GlobalFlag
)
)
reflags
=
RegExpFlag
(
reflags
|
GlobalFlag
)
;
else
if
(
c
=
=
'
i
'
&
&
!
(
reflags
&
IgnoreCaseFlag
)
)
reflags
=
RegExpFlag
(
reflags
|
IgnoreCaseFlag
)
;
else
if
(
c
=
=
'
m
'
&
&
!
(
reflags
&
MultilineFlag
)
)
reflags
=
RegExpFlag
(
reflags
|
MultilineFlag
)
;
else
if
(
c
=
=
'
y
'
&
&
!
(
reflags
&
StickyFlag
)
)
reflags
=
RegExpFlag
(
reflags
|
StickyFlag
)
;
else
if
(
c
=
=
'
u
'
&
&
!
(
reflags
&
UnicodeFlag
)
)
reflags
=
RegExpFlag
(
reflags
|
UnicodeFlag
)
;
else
break
;
if
(
!
getChar
(
&
c
)
)
goto
error
;
length
+
+
;
}
if
(
!
peekChar
(
&
c
)
)
goto
error
;
if
(
JS7_ISLET
(
c
)
)
{
char
buf
[
2
]
=
{
'
\
0
'
'
\
0
'
}
;
tp
-
>
pos
.
begin
+
=
length
+
1
;
buf
[
0
]
=
char
(
c
)
;
reportError
(
JSMSG_BAD_REGEXP_FLAG
buf
)
;
consumeKnownChar
(
c
)
;
goto
error
;
}
tp
-
>
type
=
TOK_REGEXP
;
tp
-
>
setRegExpFlags
(
reflags
)
;
goto
out
;
}
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_DIVASSIGN
:
TOK_DIV
;
goto
out
;
case
'
%
'
:
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_MODASSIGN
:
TOK_MOD
;
goto
out
;
case
'
-
'
:
if
(
matchChar
(
'
-
'
)
)
{
if
(
anyCharsAccess
(
)
.
options
(
)
.
allowHTMLComments
&
&
!
anyCharsAccess
(
)
.
flags
.
isDirtyLine
)
{
int32_t
c2
;
if
(
!
peekChar
(
&
c2
)
)
goto
error
;
if
(
c2
=
=
'
>
'
)
goto
skipline
;
}
tp
-
>
type
=
TOK_DEC
;
}
else
{
tp
-
>
type
=
matchChar
(
'
=
'
)
?
TOK_SUBASSIGN
:
TOK_SUB
;
}
goto
out
;
badchar
:
default
:
reportError
(
JSMSG_ILLEGAL_CHARACTER
)
;
goto
error
;
}
MOZ_CRASH
(
"
should
have
jumped
to
|
out
|
or
|
error
|
"
)
;
out
:
anyCharsAccess
(
)
.
flags
.
isDirtyLine
=
true
;
tp
-
>
pos
.
end
=
userbuf
.
offset
(
)
;
#
ifdef
DEBUG
tp
-
>
modifier
=
modifier
;
tp
-
>
modifierException
=
NoException
;
#
endif
MOZ_ASSERT
(
IsTokenSane
(
tp
)
)
;
*
ttp
=
tp
-
>
type
;
return
true
;
error
:
anyCharsAccess
(
)
.
flags
.
hadError
=
true
;
#
ifdef
DEBUG
userbuf
.
poison
(
)
;
#
endif
MOZ_MAKE_MEM_UNDEFINED
(
ttp
sizeof
(
*
ttp
)
)
;
return
false
;
}
template
<
typename
CharT
class
AnyCharsAccess
>
bool
TokenStreamSpecific
<
CharT
AnyCharsAccess
>
:
:
getStringOrTemplateToken
(
int
untilChar
Token
*
*
tp
)
{
int
c
;
int
nc
=
-
1
;
bool
parsingTemplate
=
(
untilChar
=
=
'
'
)
;
*
tp
=
newToken
(
-
1
)
;
tokenbuf
.
clear
(
)
;
while
(
(
c
=
getCharIgnoreEOL
(
)
)
!
=
untilChar
)
{
if
(
c
=
=
EOF
)
{
ungetCharIgnoreEOL
(
c
)
;
error
(
JSMSG_UNTERMINATED_STRING
)
;
return
false
;
}
if
(
c
=
=
'
\
\
'
)
{
if
(
!
getChar
(
&
c
)
)
return
false
;
switch
(
c
)
{
case
'
b
'
:
c
=
'
\
b
'
;
break
;
case
'
f
'
:
c
=
'
\
f
'
;
break
;
case
'
n
'
:
c
=
'
\
n
'
;
break
;
case
'
r
'
:
c
=
'
\
r
'
;
break
;
case
'
t
'
:
c
=
'
\
t
'
;
break
;
case
'
v
'
:
c
=
'
\
v
'
;
break
;
case
'
\
n
'
:
continue
;
case
'
u
'
:
{
uint32_t
code
=
0
;
int32_t
c2
;
if
(
!
peekChar
(
&
c2
)
)
return
false
;
uint32_t
start
=
userbuf
.
offset
(
)
-
2
;
if
(
c2
=
=
'
{
'
)
{
consumeKnownChar
(
'
{
'
)
;
bool
first
=
true
;
bool
valid
=
true
;
do
{
int32_t
c
=
getCharIgnoreEOL
(
)
;
if
(
c
=
=
EOF
)
{
if
(
parsingTemplate
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
InvalidEscapeType
:
:
Unicode
)
;
valid
=
false
;
break
;
}
reportInvalidEscapeError
(
start
InvalidEscapeType
:
:
Unicode
)
;
return
false
;
}
if
(
c
=
=
'
}
'
)
{
if
(
first
)
{
if
(
parsingTemplate
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
InvalidEscapeType
:
:
Unicode
)
;
valid
=
false
;
break
;
}
reportInvalidEscapeError
(
start
InvalidEscapeType
:
:
Unicode
)
;
return
false
;
}
break
;
}
if
(
!
JS7_ISHEX
(
c
)
)
{
if
(
parsingTemplate
)
{
ungetCharIgnoreEOL
(
c
)
;
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
InvalidEscapeType
:
:
Unicode
)
;
valid
=
false
;
break
;
}
reportInvalidEscapeError
(
start
InvalidEscapeType
:
:
Unicode
)
;
return
false
;
}
code
=
(
code
<
<
4
)
|
JS7_UNHEX
(
c
)
;
if
(
code
>
unicode
:
:
NonBMPMax
)
{
if
(
parsingTemplate
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
+
3
InvalidEscapeType
:
:
UnicodeOverflow
)
;
valid
=
false
;
break
;
}
reportInvalidEscapeError
(
start
+
3
InvalidEscapeType
:
:
UnicodeOverflow
)
;
return
false
;
}
first
=
false
;
}
while
(
true
)
;
if
(
!
valid
)
continue
;
MOZ_ASSERT
(
code
<
=
unicode
:
:
NonBMPMax
)
;
if
(
code
<
unicode
:
:
NonBMPMin
)
{
c
=
code
;
}
else
{
if
(
!
tokenbuf
.
append
(
unicode
:
:
LeadSurrogate
(
code
)
)
)
return
false
;
c
=
unicode
:
:
TrailSurrogate
(
code
)
;
}
break
;
}
CharT
cp
[
4
]
;
if
(
peekChars
(
4
cp
)
&
&
JS7_ISHEX
(
cp
[
0
]
)
&
&
JS7_ISHEX
(
cp
[
1
]
)
&
&
JS7_ISHEX
(
cp
[
2
]
)
&
&
JS7_ISHEX
(
cp
[
3
]
)
)
{
c
=
JS7_UNHEX
(
cp
[
0
]
)
;
c
=
(
c
<
<
4
)
+
JS7_UNHEX
(
cp
[
1
]
)
;
c
=
(
c
<
<
4
)
+
JS7_UNHEX
(
cp
[
2
]
)
;
c
=
(
c
<
<
4
)
+
JS7_UNHEX
(
cp
[
3
]
)
;
skipChars
(
4
)
;
}
else
{
if
(
parsingTemplate
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
InvalidEscapeType
:
:
Unicode
)
;
continue
;
}
reportInvalidEscapeError
(
start
InvalidEscapeType
:
:
Unicode
)
;
return
false
;
}
break
;
}
case
'
x
'
:
{
CharT
cp
[
2
]
;
if
(
peekChars
(
2
cp
)
&
&
JS7_ISHEX
(
cp
[
0
]
)
&
&
JS7_ISHEX
(
cp
[
1
]
)
)
{
c
=
(
JS7_UNHEX
(
cp
[
0
]
)
<
<
4
)
+
JS7_UNHEX
(
cp
[
1
]
)
;
skipChars
(
2
)
;
}
else
{
uint32_t
start
=
userbuf
.
offset
(
)
-
2
;
if
(
parsingTemplate
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
anyChars
.
setInvalidTemplateEscape
(
start
InvalidEscapeType
:
:
Hexadecimal
)
;
continue
;
}
reportInvalidEscapeError
(
start
InvalidEscapeType
:
:
Hexadecimal
)
;
return
false
;
}
break
;
}
default
:
if
(
JS7_ISOCT
(
c
)
)
{
int32_t
val
=
JS7_UNOCT
(
c
)
;
if
(
!
peekChar
(
&
c
)
)
return
false
;
if
(
val
!
=
0
|
|
JS7_ISDEC
(
c
)
)
{
TokenStreamAnyChars
&
anyChars
=
anyCharsAccess
(
)
;
if
(
parsingTemplate
)
{
anyChars
.
setInvalidTemplateEscape
(
userbuf
.
offset
(
)
-
2
InvalidEscapeType
:
:
Octal
)
;
continue
;
}
if
(
!
reportStrictModeError
(
JSMSG_DEPRECATED_OCTAL
)
)
return
false
;
anyChars
.
flags
.
sawOctalEscape
=
true
;
}
if
(
JS7_ISOCT
(
c
)
)
{
val
=
8
*
val
+
JS7_UNOCT
(
c
)
;
consumeKnownChar
(
c
)
;
if
(
!
peekChar
(
&
c
)
)
return
false
;
if
(
JS7_ISOCT
(
c
)
)
{
int32_t
save
=
val
;
val
=
8
*
val
+
JS7_UNOCT
(
c
)
;
if
(
val
<
=
0xFF
)
consumeKnownChar
(
c
)
;
else
val
=
save
;
}
}
c
=
char16_t
(
val
)
;
}
break
;
}
}
else
if
(
TokenBuf
:
:
isRawEOLChar
(
c
)
)
{
if
(
!
parsingTemplate
)
{
ungetCharIgnoreEOL
(
c
)
;
error
(
JSMSG_UNTERMINATED_STRING
)
;
return
false
;
}
if
(
c
=
=
'
\
r
'
)
{
c
=
'
\
n
'
;
if
(
userbuf
.
peekRawChar
(
)
=
=
'
\
n
'
)
skipCharsIgnoreEOL
(
1
)
;
}
if
(
!
updateLineInfoForEOL
(
)
)
return
false
;
anyCharsAccess
(
)
.
updateFlagsForEOL
(
)
;
}
else
if
(
parsingTemplate
&
&
c
=
=
'
'
)
{
if
(
(
nc
=
getCharIgnoreEOL
(
)
)
=
=
'
{
'
)
break
;
ungetCharIgnoreEOL
(
nc
)
;
}
if
(
!
tokenbuf
.
append
(
c
)
)
{
ReportOutOfMemory
(
anyCharsAccess
(
)
.
cx
)
;
return
false
;
}
}
JSAtom
*
atom
=
atomizeChars
(
anyCharsAccess
(
)
.
cx
tokenbuf
.
begin
(
)
tokenbuf
.
length
(
)
)
;
if
(
!
atom
)
return
false
;
if
(
!
parsingTemplate
)
{
(
*
tp
)
-
>
type
=
TOK_STRING
;
}
else
{
if
(
c
=
=
'
'
&
&
nc
=
=
'
{
'
)
(
*
tp
)
-
>
type
=
TOK_TEMPLATE_HEAD
;
else
(
*
tp
)
-
>
type
=
TOK_NO_SUBS_TEMPLATE
;
}
(
*
tp
)
-
>
setAtom
(
atom
)
;
return
true
;
}
const
char
*
TokenKindToDesc
(
TokenKind
tt
)
{
switch
(
tt
)
{
#
define
EMIT_CASE
(
name
desc
)
case
TOK_
#
#
name
:
return
desc
;
FOR_EACH_TOKEN_KIND
(
EMIT_CASE
)
#
undef
EMIT_CASE
case
TOK_LIMIT
:
MOZ_ASSERT_UNREACHABLE
(
"
TOK_LIMIT
should
not
be
passed
.
"
)
;
break
;
}
return
"
<
bad
TokenKind
>
"
;
}
#
ifdef
DEBUG
const
char
*
TokenKindToString
(
TokenKind
tt
)
{
switch
(
tt
)
{
#
define
EMIT_CASE
(
name
desc
)
case
TOK_
#
#
name
:
return
"
TOK_
"
#
name
;
FOR_EACH_TOKEN_KIND
(
EMIT_CASE
)
#
undef
EMIT_CASE
case
TOK_LIMIT
:
break
;
}
return
"
<
bad
TokenKind
>
"
;
}
#
endif
template
class
frontend
:
:
TokenStreamCharsBase
<
char16_t
>
;
template
class
frontend
:
:
TokenStreamChars
<
char16_t
frontend
:
:
TokenStreamAnyCharsAccess
>
;
template
class
frontend
:
:
TokenStreamSpecific
<
char16_t
frontend
:
:
TokenStreamAnyCharsAccess
>
;
template
class
frontend
:
:
TokenStreamChars
<
char16_t
frontend
:
:
ParserAnyCharsAccess
<
frontend
:
:
GeneralParser
<
frontend
:
:
FullParseHandler
char16_t
>
>
>
;
template
class
frontend
:
:
TokenStreamChars
<
char16_t
frontend
:
:
ParserAnyCharsAccess
<
frontend
:
:
GeneralParser
<
frontend
:
:
SyntaxParseHandler
char16_t
>
>
>
;
template
class
frontend
:
:
TokenStreamSpecific
<
char16_t
frontend
:
:
ParserAnyCharsAccess
<
frontend
:
:
GeneralParser
<
frontend
:
:
FullParseHandler
char16_t
>
>
>
;
template
class
frontend
:
:
TokenStreamSpecific
<
char16_t
frontend
:
:
ParserAnyCharsAccess
<
frontend
:
:
GeneralParser
<
frontend
:
:
SyntaxParseHandler
char16_t
>
>
>
;
}
}
JS_FRIEND_API
(
int
)
js_fgets
(
char
*
buf
int
size
FILE
*
file
)
{
int
n
i
c
;
bool
crflag
;
n
=
size
-
1
;
if
(
n
<
0
)
return
-
1
;
crflag
=
false
;
for
(
i
=
0
;
i
<
n
&
&
(
c
=
fast_getc
(
file
)
)
!
=
EOF
;
i
+
+
)
{
buf
[
i
]
=
c
;
if
(
c
=
=
'
\
n
'
)
{
i
+
+
;
break
;
}
if
(
crflag
)
{
ungetc
(
c
file
)
;
break
;
}
crflag
=
(
c
=
=
'
\
r
'
)
;
}
buf
[
i
]
=
'
\
0
'
;
return
i
;
}
