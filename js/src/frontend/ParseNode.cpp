#
include
"
frontend
/
ParseNode
-
inl
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
jscntxtinlines
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
ArrayLength
;
using
mozilla
:
:
IsFinite
;
#
ifdef
DEBUG
void
ParseNode
:
:
checkListConsistency
(
)
{
MOZ_ASSERT
(
isArity
(
PN_LIST
)
)
;
ParseNode
*
*
tail
;
uint32_t
count
=
0
;
if
(
pn_head
)
{
ParseNode
*
last
=
pn_head
;
ParseNode
*
pn
=
last
;
while
(
pn
)
{
last
=
pn
;
pn
=
pn
-
>
pn_next
;
count
+
+
;
}
tail
=
&
last
-
>
pn_next
;
}
else
{
tail
=
&
pn_head
;
}
MOZ_ASSERT
(
pn_tail
=
=
tail
)
;
MOZ_ASSERT
(
pn_count
=
=
count
)
;
}
#
endif
void
ParseNodeAllocator
:
:
freeNode
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
!
=
freelist
)
;
#
ifdef
DEBUG
memset
(
pn
0xab
sizeof
(
*
pn
)
)
;
#
endif
pn
-
>
pn_next
=
freelist
;
freelist
=
pn
;
}
namespace
{
class
NodeStack
{
public
:
NodeStack
(
)
:
top
(
nullptr
)
{
}
bool
empty
(
)
{
return
top
=
=
nullptr
;
}
void
push
(
ParseNode
*
pn
)
{
pn
-
>
pn_next
=
top
;
top
=
pn
;
}
void
pushList
(
ParseNode
*
pn
)
{
*
pn
-
>
pn_tail
=
top
;
top
=
pn
-
>
pn_head
;
}
ParseNode
*
pop
(
)
{
MOZ_ASSERT
(
!
empty
(
)
)
;
ParseNode
*
hold
=
top
;
top
=
top
-
>
pn_next
;
return
hold
;
}
private
:
ParseNode
*
top
;
}
;
}
enum
class
PushResult
{
Recyclable
CleanUpLater
}
;
static
PushResult
PushCodeNodeChildren
(
ParseNode
*
node
NodeStack
*
stack
)
{
MOZ_ASSERT
(
node
-
>
isArity
(
PN_CODE
)
)
;
node
-
>
pn_funbox
=
nullptr
;
if
(
node
-
>
pn_body
)
stack
-
>
push
(
node
-
>
pn_body
)
;
node
-
>
pn_body
=
nullptr
;
return
PushResult
:
:
CleanUpLater
;
}
static
PushResult
PushNameNodeChildren
(
ParseNode
*
node
NodeStack
*
stack
)
{
MOZ_ASSERT
(
node
-
>
isArity
(
PN_NAME
)
)
;
if
(
node
-
>
pn_expr
)
stack
-
>
push
(
node
-
>
pn_expr
)
;
node
-
>
pn_expr
=
nullptr
;
return
PushResult
:
:
Recyclable
;
}
static
PushResult
PushScopeNodeChildren
(
ParseNode
*
node
NodeStack
*
stack
)
{
MOZ_ASSERT
(
node
-
>
isArity
(
PN_SCOPE
)
)
;
if
(
node
-
>
scopeBody
(
)
)
stack
-
>
push
(
node
-
>
scopeBody
(
)
)
;
node
-
>
setScopeBody
(
nullptr
)
;
return
PushResult
:
:
Recyclable
;
}
static
PushResult
PushListNodeChildren
(
ParseNode
*
node
NodeStack
*
stack
)
{
MOZ_ASSERT
(
node
-
>
isArity
(
PN_LIST
)
)
;
node
-
>
checkListConsistency
(
)
;
stack
-
>
pushList
(
node
)
;
return
PushResult
:
:
Recyclable
;
}
static
PushResult
PushUnaryNodeChild
(
ParseNode
*
node
NodeStack
*
stack
)
{
MOZ_ASSERT
(
node
-
>
isArity
(
PN_UNARY
)
)
;
stack
-
>
push
(
node
-
>
pn_kid
)
;
return
PushResult
:
:
Recyclable
;
}
static
PushResult
PushNodeChildren
(
ParseNode
*
pn
NodeStack
*
stack
)
{
switch
(
pn
-
>
getKind
(
)
)
{
case
PNK_NOP
:
case
PNK_STRING
:
case
PNK_TEMPLATE_STRING
:
case
PNK_REGEXP
:
case
PNK_TRUE
:
case
PNK_FALSE
:
case
PNK_NULL
:
case
PNK_RAW_UNDEFINED
:
case
PNK_ELISION
:
case
PNK_GENERATOR
:
case
PNK_NUMBER
:
case
PNK_BREAK
:
case
PNK_CONTINUE
:
case
PNK_DEBUGGER
:
case
PNK_EXPORT_BATCH_SPEC
:
case
PNK_OBJECT_PROPERTY_NAME
:
case
PNK_POSHOLDER
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NULLARY
)
)
;
return
PushResult
:
:
Recyclable
;
case
PNK_TYPEOFNAME
:
case
PNK_TYPEOFEXPR
:
case
PNK_VOID
:
case
PNK_NOT
:
case
PNK_BITNOT
:
case
PNK_THROW
:
case
PNK_DELETENAME
:
case
PNK_DELETEPROP
:
case
PNK_DELETEELEM
:
case
PNK_DELETEEXPR
:
case
PNK_POS
:
case
PNK_NEG
:
case
PNK_PREINCREMENT
:
case
PNK_POSTINCREMENT
:
case
PNK_PREDECREMENT
:
case
PNK_POSTDECREMENT
:
case
PNK_COMPUTED_NAME
:
case
PNK_ARRAYPUSH
:
case
PNK_SPREAD
:
case
PNK_MUTATEPROTO
:
case
PNK_EXPORT
:
case
PNK_SUPERBASE
:
return
PushUnaryNodeChild
(
pn
stack
)
;
case
PNK_THIS
:
case
PNK_SEMI
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
if
(
pn
-
>
pn_kid
)
stack
-
>
push
(
pn
-
>
pn_kid
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_ASSIGN
:
case
PNK_ADDASSIGN
:
case
PNK_SUBASSIGN
:
case
PNK_BITORASSIGN
:
case
PNK_BITXORASSIGN
:
case
PNK_BITANDASSIGN
:
case
PNK_LSHASSIGN
:
case
PNK_RSHASSIGN
:
case
PNK_URSHASSIGN
:
case
PNK_MULASSIGN
:
case
PNK_DIVASSIGN
:
case
PNK_MODASSIGN
:
case
PNK_POWASSIGN
:
case
PNK_ELEM
:
case
PNK_IMPORT_SPEC
:
case
PNK_EXPORT_SPEC
:
case
PNK_COLON
:
case
PNK_SHORTHAND
:
case
PNK_DOWHILE
:
case
PNK_WHILE
:
case
PNK_SWITCH
:
case
PNK_CLASSMETHOD
:
case
PNK_NEWTARGET
:
case
PNK_SETTHIS
:
case
PNK_FOR
:
case
PNK_COMPREHENSIONFOR
:
case
PNK_WITH
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
stack
-
>
push
(
pn
-
>
pn_left
)
;
stack
-
>
push
(
pn
-
>
pn_right
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_CASE
:
case
PNK_CLASSNAMES
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
if
(
pn
-
>
pn_left
)
stack
-
>
push
(
pn
-
>
pn_left
)
;
stack
-
>
push
(
pn
-
>
pn_right
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_INITIALYIELD
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_kid
-
>
isKind
(
PNK_ASSIGN
)
&
&
pn
-
>
pn_kid
-
>
pn_left
-
>
isKind
(
PNK_NAME
)
&
&
pn
-
>
pn_kid
-
>
pn_right
-
>
isKind
(
PNK_GENERATOR
)
)
;
stack
-
>
push
(
pn
-
>
pn_kid
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_YIELD_STAR
:
case
PNK_YIELD
:
case
PNK_AWAIT
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
if
(
pn
-
>
pn_kid
)
stack
-
>
push
(
pn
-
>
pn_kid
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_RETURN
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
if
(
pn
-
>
pn_kid
)
stack
-
>
push
(
pn
-
>
pn_kid
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_IMPORT
:
case
PNK_EXPORT_FROM
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
MOZ_ASSERT_IF
(
pn
-
>
isKind
(
PNK_IMPORT
)
pn
-
>
pn_left
-
>
isKind
(
PNK_IMPORT_SPEC_LIST
)
)
;
MOZ_ASSERT_IF
(
pn
-
>
isKind
(
PNK_EXPORT_FROM
)
pn
-
>
pn_left
-
>
isKind
(
PNK_EXPORT_SPEC_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_left
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_right
-
>
isKind
(
PNK_STRING
)
)
;
stack
-
>
pushList
(
pn
-
>
pn_left
)
;
stack
-
>
push
(
pn
-
>
pn_right
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_EXPORT_DEFAULT
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
MOZ_ASSERT_IF
(
pn
-
>
pn_right
pn
-
>
pn_right
-
>
isKind
(
PNK_NAME
)
)
;
stack
-
>
push
(
pn
-
>
pn_left
)
;
if
(
pn
-
>
pn_right
)
stack
-
>
push
(
pn
-
>
pn_right
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_CONDITIONAL
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_FORIN
:
case
PNK_FOROF
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
MOZ_ASSERT
(
!
pn
-
>
pn_kid2
)
;
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_FORHEAD
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
if
(
pn
-
>
pn_kid1
)
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
if
(
pn
-
>
pn_kid2
)
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
if
(
pn
-
>
pn_kid3
)
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_CLASS
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
if
(
pn
-
>
pn_kid1
)
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
if
(
pn
-
>
pn_kid2
)
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_IF
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
if
(
pn
-
>
pn_kid3
)
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_TRY
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_kid2
|
|
pn
-
>
pn_kid3
)
;
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
if
(
pn
-
>
pn_kid2
)
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
if
(
pn
-
>
pn_kid3
)
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_CATCH
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
stack
-
>
push
(
pn
-
>
pn_kid1
)
;
if
(
pn
-
>
pn_kid2
)
stack
-
>
push
(
pn
-
>
pn_kid2
)
;
stack
-
>
push
(
pn
-
>
pn_kid3
)
;
return
PushResult
:
:
Recyclable
;
}
case
PNK_OR
:
case
PNK_AND
:
case
PNK_BITOR
:
case
PNK_BITXOR
:
case
PNK_BITAND
:
case
PNK_STRICTEQ
:
case
PNK_EQ
:
case
PNK_STRICTNE
:
case
PNK_NE
:
case
PNK_LT
:
case
PNK_LE
:
case
PNK_GT
:
case
PNK_GE
:
case
PNK_INSTANCEOF
:
case
PNK_IN
:
case
PNK_LSH
:
case
PNK_RSH
:
case
PNK_URSH
:
case
PNK_ADD
:
case
PNK_SUB
:
case
PNK_STAR
:
case
PNK_DIV
:
case
PNK_MOD
:
case
PNK_POW
:
case
PNK_COMMA
:
case
PNK_NEW
:
case
PNK_CALL
:
case
PNK_SUPERCALL
:
case
PNK_GENEXP
:
case
PNK_ARRAY
:
case
PNK_OBJECT
:
case
PNK_TEMPLATE_STRING_LIST
:
case
PNK_TAGGED_TEMPLATE
:
case
PNK_CALLSITEOBJ
:
case
PNK_VAR
:
case
PNK_CONST
:
case
PNK_LET
:
case
PNK_CATCHLIST
:
case
PNK_STATEMENTLIST
:
case
PNK_IMPORT_SPEC_LIST
:
case
PNK_EXPORT_SPEC_LIST
:
case
PNK_PARAMSBODY
:
case
PNK_CLASSMETHODLIST
:
return
PushListNodeChildren
(
pn
stack
)
;
case
PNK_ARRAYCOMP
:
{
#
ifdef
DEBUG
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_ARRAYCOMP
)
)
;
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_count
=
=
1
)
;
MOZ_ASSERT
(
pn
-
>
pn_head
-
>
isKind
(
PNK_LEXICALSCOPE
)
|
|
pn
-
>
pn_head
-
>
isKind
(
PNK_COMPREHENSIONFOR
)
)
;
#
endif
return
PushListNodeChildren
(
pn
stack
)
;
}
case
PNK_LABEL
:
case
PNK_DOT
:
case
PNK_NAME
:
return
PushNameNodeChildren
(
pn
stack
)
;
case
PNK_LEXICALSCOPE
:
return
PushScopeNodeChildren
(
pn
stack
)
;
case
PNK_FUNCTION
:
case
PNK_MODULE
:
return
PushCodeNodeChildren
(
pn
stack
)
;
case
PNK_LIMIT
:
MOZ_CRASH
(
"
invalid
node
kind
"
)
;
}
MOZ_CRASH
(
"
bad
ParseNodeKind
"
)
;
return
PushResult
:
:
CleanUpLater
;
}
void
ParseNodeAllocator
:
:
prepareNodeForMutation
(
ParseNode
*
pn
)
{
if
(
pn
-
>
isArity
(
PN_NULLARY
)
)
return
;
NodeStack
stack
;
PushNodeChildren
(
pn
&
stack
)
;
while
(
!
stack
.
empty
(
)
)
{
pn
=
stack
.
pop
(
)
;
if
(
PushNodeChildren
(
pn
&
stack
)
=
=
PushResult
:
:
Recyclable
)
freeNode
(
pn
)
;
}
}
ParseNode
*
ParseNodeAllocator
:
:
freeTree
(
ParseNode
*
pn
)
{
if
(
!
pn
)
return
nullptr
;
ParseNode
*
savedNext
=
pn
-
>
pn_next
;
NodeStack
stack
;
for
(
;
;
)
{
if
(
PushNodeChildren
(
pn
&
stack
)
=
=
PushResult
:
:
Recyclable
)
freeNode
(
pn
)
;
if
(
stack
.
empty
(
)
)
break
;
pn
=
stack
.
pop
(
)
;
}
return
savedNext
;
}
void
*
ParseNodeAllocator
:
:
allocNode
(
)
{
if
(
ParseNode
*
pn
=
freelist
)
{
freelist
=
pn
-
>
pn_next
;
return
pn
;
}
LifoAlloc
:
:
AutoFallibleScope
fallibleAllocator
(
&
alloc
)
;
void
*
p
=
alloc
.
alloc
(
sizeof
(
ParseNode
)
)
;
if
(
!
p
)
ReportOutOfMemory
(
cx
)
;
return
p
;
}
ParseNode
*
ParseNode
:
:
appendOrCreateList
(
ParseNodeKind
kind
JSOp
op
ParseNode
*
left
ParseNode
*
right
FullParseHandler
*
handler
ParseContext
*
pc
)
{
if
(
!
pc
-
>
useAsmOrInsideUseAsm
(
)
)
{
if
(
left
-
>
isKind
(
kind
)
&
&
left
-
>
isOp
(
op
)
&
&
(
CodeSpec
[
op
]
.
format
&
JOF_LEFTASSOC
|
|
(
kind
=
=
PNK_POW
&
&
!
left
-
>
pn_parens
)
)
)
{
ListNode
*
list
=
&
left
-
>
as
<
ListNode
>
(
)
;
list
-
>
append
(
right
)
;
list
-
>
pn_pos
.
end
=
right
-
>
pn_pos
.
end
;
return
list
;
}
}
ParseNode
*
list
=
handler
-
>
new_
<
ListNode
>
(
kind
op
left
)
;
if
(
!
list
)
return
nullptr
;
list
-
>
append
(
right
)
;
return
list
;
}
#
ifdef
DEBUG
static
const
char
*
const
parseNodeNames
[
]
=
{
#
define
STRINGIFY
(
name
)
#
name
FOR_EACH_PARSE_NODE_KIND
(
STRINGIFY
)
#
undef
STRINGIFY
}
;
void
frontend
:
:
DumpParseTree
(
ParseNode
*
pn
GenericPrinter
&
out
int
indent
)
{
if
(
pn
=
=
nullptr
)
out
.
put
(
"
#
NULL
"
)
;
else
pn
-
>
dump
(
out
indent
)
;
}
static
void
IndentNewLine
(
GenericPrinter
&
out
int
indent
)
{
out
.
putChar
(
'
\
n
'
)
;
for
(
int
i
=
0
;
i
<
indent
;
+
+
i
)
out
.
putChar
(
'
'
)
;
}
void
ParseNode
:
:
dump
(
GenericPrinter
&
out
)
{
dump
(
out
0
)
;
out
.
putChar
(
'
\
n
'
)
;
}
void
ParseNode
:
:
dump
(
)
{
js
:
:
Fprinter
out
(
stderr
)
;
dump
(
out
)
;
}
void
ParseNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
switch
(
pn_arity
)
{
case
PN_NULLARY
:
(
(
NullaryNode
*
)
this
)
-
>
dump
(
out
)
;
break
;
case
PN_UNARY
:
(
(
UnaryNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_BINARY
:
(
(
BinaryNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_TERNARY
:
(
(
TernaryNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_CODE
:
(
(
CodeNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_LIST
:
(
(
ListNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_NAME
:
(
(
NameNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
case
PN_SCOPE
:
(
(
LexicalScopeNode
*
)
this
)
-
>
dump
(
out
indent
)
;
break
;
default
:
out
.
printf
(
"
#
<
BAD
NODE
%
p
kind
=
%
u
arity
=
%
u
>
"
(
void
*
)
this
unsigned
(
getKind
(
)
)
unsigned
(
pn_arity
)
)
;
break
;
}
}
void
NullaryNode
:
:
dump
(
GenericPrinter
&
out
)
{
switch
(
getKind
(
)
)
{
case
PNK_TRUE
:
out
.
put
(
"
#
true
"
)
;
break
;
case
PNK_FALSE
:
out
.
put
(
"
#
false
"
)
;
break
;
case
PNK_NULL
:
out
.
put
(
"
#
null
"
)
;
break
;
case
PNK_RAW_UNDEFINED
:
out
.
put
(
"
#
undefined
"
)
;
break
;
case
PNK_NUMBER
:
{
ToCStringBuf
cbuf
;
const
char
*
cstr
=
NumberToCString
(
nullptr
&
cbuf
pn_dval
)
;
if
(
!
IsFinite
(
pn_dval
)
)
out
.
put
(
"
#
"
)
;
if
(
cstr
)
out
.
printf
(
"
%
s
"
cstr
)
;
else
out
.
printf
(
"
%
g
"
pn_dval
)
;
break
;
}
case
PNK_STRING
:
pn_atom
-
>
dumpCharsNoNewline
(
out
)
;
break
;
default
:
out
.
printf
(
"
(
%
s
)
"
parseNodeNames
[
getKind
(
)
]
)
;
}
}
void
UnaryNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
"
name
)
;
indent
+
=
strlen
(
name
)
+
2
;
DumpParseTree
(
pn_kid
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
void
BinaryNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
"
name
)
;
indent
+
=
strlen
(
name
)
+
2
;
DumpParseTree
(
pn_left
out
indent
)
;
IndentNewLine
(
out
indent
)
;
DumpParseTree
(
pn_right
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
void
TernaryNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
"
name
)
;
indent
+
=
strlen
(
name
)
+
2
;
DumpParseTree
(
pn_kid1
out
indent
)
;
IndentNewLine
(
out
indent
)
;
DumpParseTree
(
pn_kid2
out
indent
)
;
IndentNewLine
(
out
indent
)
;
DumpParseTree
(
pn_kid3
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
void
CodeNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
"
name
)
;
indent
+
=
strlen
(
name
)
+
2
;
DumpParseTree
(
pn_body
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
void
ListNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
[
"
name
)
;
if
(
pn_head
!
=
nullptr
)
{
indent
+
=
strlen
(
name
)
+
3
;
DumpParseTree
(
pn_head
out
indent
)
;
ParseNode
*
pn
=
pn_head
-
>
pn_next
;
while
(
pn
!
=
nullptr
)
{
IndentNewLine
(
out
indent
)
;
DumpParseTree
(
pn
out
indent
)
;
pn
=
pn
-
>
pn_next
;
}
}
out
.
printf
(
"
]
)
"
)
;
}
template
<
typename
CharT
>
static
void
DumpName
(
GenericPrinter
&
out
const
CharT
*
s
size_t
len
)
{
if
(
len
=
=
0
)
out
.
put
(
"
#
<
zero
-
length
name
>
"
)
;
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
char16_t
c
=
s
[
i
]
;
if
(
c
>
32
&
&
c
<
127
)
out
.
putChar
(
c
)
;
else
if
(
c
<
=
255
)
out
.
printf
(
"
\
\
x
%
02x
"
unsigned
(
c
)
)
;
else
out
.
printf
(
"
\
\
u
%
04x
"
unsigned
(
c
)
)
;
}
}
void
NameNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
if
(
isKind
(
PNK_NAME
)
|
|
isKind
(
PNK_DOT
)
)
{
if
(
isKind
(
PNK_DOT
)
)
out
.
put
(
"
(
.
"
)
;
if
(
!
pn_atom
)
{
out
.
put
(
"
#
<
null
name
>
"
)
;
}
else
if
(
getOp
(
)
=
=
JSOP_GETARG
&
&
pn_atom
-
>
length
(
)
=
=
0
)
{
out
.
put
(
"
(
#
<
zero
-
length
name
>
"
)
;
DumpParseTree
(
expr
(
)
out
indent
+
21
)
;
out
.
printf
(
"
)
"
)
;
}
else
{
JS
:
:
AutoCheckCannotGC
nogc
;
if
(
pn_atom
-
>
hasLatin1Chars
(
)
)
DumpName
(
out
pn_atom
-
>
latin1Chars
(
nogc
)
pn_atom
-
>
length
(
)
)
;
else
DumpName
(
out
pn_atom
-
>
twoByteChars
(
nogc
)
pn_atom
-
>
length
(
)
)
;
}
if
(
isKind
(
PNK_DOT
)
)
{
out
.
putChar
(
'
'
)
;
if
(
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
out
.
put
(
"
super
"
)
;
else
DumpParseTree
(
expr
(
)
out
indent
+
2
)
;
out
.
printf
(
"
)
"
)
;
}
return
;
}
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
"
name
)
;
indent
+
=
strlen
(
name
)
+
2
;
DumpParseTree
(
expr
(
)
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
void
LexicalScopeNode
:
:
dump
(
GenericPrinter
&
out
int
indent
)
{
const
char
*
name
=
parseNodeNames
[
getKind
(
)
]
;
out
.
printf
(
"
(
%
s
[
"
name
)
;
int
nameIndent
=
indent
+
strlen
(
name
)
+
3
;
if
(
!
isEmptyScope
(
)
)
{
LexicalScope
:
:
Data
*
bindings
=
scopeBindings
(
)
;
for
(
uint32_t
i
=
0
;
i
<
bindings
-
>
length
;
i
+
+
)
{
JSAtom
*
name
=
bindings
-
>
names
[
i
]
.
name
(
)
;
JS
:
:
AutoCheckCannotGC
nogc
;
if
(
name
-
>
hasLatin1Chars
(
)
)
DumpName
(
out
name
-
>
latin1Chars
(
nogc
)
name
-
>
length
(
)
)
;
else
DumpName
(
out
name
-
>
twoByteChars
(
nogc
)
name
-
>
length
(
)
)
;
if
(
i
<
bindings
-
>
length
-
1
)
IndentNewLine
(
out
nameIndent
)
;
}
}
out
.
putChar
(
'
]
'
)
;
indent
+
=
2
;
IndentNewLine
(
out
indent
)
;
DumpParseTree
(
scopeBody
(
)
out
indent
)
;
out
.
printf
(
"
)
"
)
;
}
#
endif
ObjectBox
:
:
ObjectBox
(
JSObject
*
object
ObjectBox
*
traceLink
)
:
object
(
object
)
traceLink
(
traceLink
)
emitLink
(
nullptr
)
{
MOZ_ASSERT
(
!
object
-
>
is
<
JSFunction
>
(
)
)
;
MOZ_ASSERT
(
object
-
>
isTenured
(
)
)
;
}
ObjectBox
:
:
ObjectBox
(
JSFunction
*
function
ObjectBox
*
traceLink
)
:
object
(
function
)
traceLink
(
traceLink
)
emitLink
(
nullptr
)
{
MOZ_ASSERT
(
object
-
>
is
<
JSFunction
>
(
)
)
;
MOZ_ASSERT
(
asFunctionBox
(
)
-
>
function
(
)
=
=
function
)
;
MOZ_ASSERT
(
object
-
>
isTenured
(
)
)
;
}
FunctionBox
*
ObjectBox
:
:
asFunctionBox
(
)
{
MOZ_ASSERT
(
isFunctionBox
(
)
)
;
return
static_cast
<
FunctionBox
*
>
(
this
)
;
}
void
ObjectBox
:
:
TraceList
(
JSTracer
*
trc
ObjectBox
*
listHead
)
{
for
(
ObjectBox
*
box
=
listHead
;
box
;
box
=
box
-
>
traceLink
)
box
-
>
trace
(
trc
)
;
}
void
ObjectBox
:
:
trace
(
JSTracer
*
trc
)
{
TraceRoot
(
trc
&
object
"
parser
.
object
"
)
;
}
void
FunctionBox
:
:
trace
(
JSTracer
*
trc
)
{
ObjectBox
:
:
trace
(
trc
)
;
if
(
enclosingScope_
)
TraceRoot
(
trc
&
enclosingScope_
"
funbox
-
enclosingScope
"
)
;
}
bool
js
:
:
frontend
:
:
IsAnonymousFunctionDefinition
(
ParseNode
*
pn
)
{
if
(
pn
-
>
isKind
(
PNK_FUNCTION
)
&
&
!
pn
-
>
pn_funbox
-
>
function
(
)
-
>
explicitName
(
)
)
return
true
;
if
(
pn
-
>
is
<
ClassNode
>
(
)
&
&
!
pn
-
>
as
<
ClassNode
>
(
)
.
names
(
)
)
return
true
;
return
false
;
}
