#
ifndef
frontend_BytecodeCompilation_h
#
define
frontend_BytecodeCompilation_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
frontend
/
ScriptIndex
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
ScopeKind
.
h
"
namespace
js
{
class
Scope
;
class
LifoAlloc
;
class
FrontendContext
;
namespace
frontend
{
struct
CompilationInput
;
struct
CompilationGCOutput
;
struct
CompilationStencil
;
struct
ExtensibleCompilationStencil
;
class
ScopeBindingCache
;
[
[
nodiscard
]
]
extern
bool
PrepareForInstantiate
(
JSContext
*
maybeCx
FrontendContext
*
fc
CompilationInput
&
input
const
CompilationStencil
&
stencil
CompilationGCOutput
&
gcOutput
)
;
[
[
nodiscard
]
]
extern
bool
InstantiateStencils
(
JSContext
*
cx
CompilationInput
&
input
const
CompilationStencil
&
stencil
CompilationGCOutput
&
gcOutput
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileEvalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
Handle
<
js
:
:
Scope
*
>
enclosingScope
JS
:
:
Handle
<
JSObject
*
>
enclosingEnv
)
;
}
}
#
endif
