#
ifndef
frontend_BytecodeCompilation_h
#
define
frontend_BytecodeCompilation_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
ParseContext
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Scope
.
h
"
class
JS_PUBLIC_API
JSFunction
;
class
JS_PUBLIC_API
JSObject
;
class
JSObject
;
namespace
js
{
class
Scope
;
namespace
frontend
{
struct
BytecodeEmitter
;
class
EitherParser
;
template
<
typename
Unit
>
class
SourceAwareCompiler
;
template
<
typename
Unit
>
class
ScriptCompiler
;
template
<
typename
Unit
>
class
ModuleCompiler
;
template
<
typename
Unit
>
class
StandaloneFunctionCompiler
;
extern
bool
CompileGlobalScriptToStencil
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
bool
CompileGlobalScriptToStencil
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
UniquePtr
<
CompilationInfo
>
CompileGlobalScriptToStencil
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
UniquePtr
<
CompilationInfo
>
CompileGlobalScriptToStencil
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
bool
InstantiateStencils
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
CompilationGCOutput
&
gcOutput
)
;
extern
bool
InstantiateStencils
(
JSContext
*
cx
CompilationInfoVector
&
compilationInfos
CompilationGCOutput
&
gcOutput
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileGlobalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
ScopeKind
scopeKind
)
;
extern
JSScript
*
CompileEvalScript
(
JSContext
*
cx
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
JS
:
:
Handle
<
js
:
:
Scope
*
>
enclosingScope
JS
:
:
Handle
<
JSObject
*
>
enclosingEnv
)
;
extern
void
FillCompileOptionsForLazyFunction
(
JS
:
:
CompileOptions
&
options
Handle
<
BaseScript
*
>
lazy
)
;
extern
MOZ_MUST_USE
bool
CompileLazyFunctionToStencil
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
JS
:
:
Handle
<
BaseScript
*
>
lazy
const
char16_t
*
units
size_t
length
)
;
extern
MOZ_MUST_USE
bool
CompileLazyFunctionToStencil
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
JS
:
:
Handle
<
BaseScript
*
>
lazy
const
mozilla
:
:
Utf8Unit
*
units
size_t
length
)
;
extern
bool
InstantiateStencilsForDelazify
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
)
;
extern
bool
PrepareForInstantiate
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
)
;
extern
bool
PrepareForInstantiate
(
JSContext
*
cx
CompilationInfoVector
&
compilationInfos
)
;
}
}
#
endif
