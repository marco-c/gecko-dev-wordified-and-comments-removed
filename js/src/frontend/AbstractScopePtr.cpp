#
include
"
frontend
/
AbstractScopePtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
GCVariant
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
ScopeStencil
&
AbstractScopePtr
:
:
scopeData
(
)
const
{
const
Deferred
&
data
=
scope_
.
as
<
Deferred
>
(
)
;
return
data
.
compilationState
.
scopeData
[
data
.
index
.
index
]
;
}
CompilationState
&
AbstractScopePtr
:
:
compilationState
(
)
const
{
const
Deferred
&
data
=
scope_
.
as
<
Deferred
>
(
)
;
return
data
.
compilationState
;
}
ScopeKind
AbstractScopePtr
:
:
kind
(
)
const
{
MOZ_ASSERT
(
!
isNullptr
(
)
)
;
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
kind
(
)
;
}
return
scope
(
)
-
>
kind
(
)
;
}
AbstractScopePtr
AbstractScopePtr
:
:
enclosing
(
)
const
{
MOZ_ASSERT
(
!
isNullptr
(
)
)
;
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
enclosing
(
compilationState
(
)
)
;
}
return
AbstractScopePtr
(
scope
(
)
-
>
enclosing
(
)
)
;
}
bool
AbstractScopePtr
:
:
hasEnvironment
(
)
const
{
MOZ_ASSERT
(
!
isNullptr
(
)
)
;
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
hasEnvironment
(
)
;
}
return
scope
(
)
-
>
hasEnvironment
(
)
;
}
bool
AbstractScopePtr
:
:
isArrow
(
)
const
{
MOZ_ASSERT
(
is
<
FunctionScope
>
(
)
)
;
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
isArrow
(
)
;
}
MOZ_ASSERT
(
scope
(
)
-
>
as
<
FunctionScope
>
(
)
.
canonicalFunction
(
)
)
;
return
scope
(
)
-
>
as
<
FunctionScope
>
(
)
.
canonicalFunction
(
)
-
>
isArrow
(
)
;
}
void
AbstractScopePtr
:
:
trace
(
JSTracer
*
trc
)
{
JS
:
:
GCPolicy
<
ScopeType
>
:
:
trace
(
trc
&
scope_
"
AbstractScopePtr
"
)
;
}
