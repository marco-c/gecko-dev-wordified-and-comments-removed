#
include
"
frontend
/
AbstractScopePtr
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
Scope
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
ScopeStencil
&
AbstractScopePtr
:
:
scopeData
(
)
const
{
MOZ_ASSERT
(
isScopeStencil
(
)
)
;
return
compilationState_
.
scopeData
[
index_
]
;
}
ScopeKind
AbstractScopePtr
:
:
kind
(
)
const
{
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
kind
(
)
;
}
return
compilationState_
.
scopeContext
.
enclosingScopeKind
;
}
AbstractScopePtr
AbstractScopePtr
:
:
enclosing
(
)
const
{
MOZ_ASSERT
(
isScopeStencil
(
)
)
;
return
scopeData
(
)
.
enclosing
(
compilationState_
)
;
}
bool
AbstractScopePtr
:
:
hasEnvironment
(
)
const
{
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
hasEnvironment
(
)
;
}
return
compilationState_
.
scopeContext
.
enclosingScopeHasEnvironment
;
}
bool
AbstractScopePtr
:
:
isArrow
(
)
const
{
MOZ_ASSERT
(
is
<
FunctionScope
>
(
)
)
;
if
(
isScopeStencil
(
)
)
{
return
scopeData
(
)
.
isArrow
(
)
;
}
return
compilationState_
.
scopeContext
.
enclosingScopeIsArrow
;
}
#
ifdef
DEBUG
bool
AbstractScopePtr
:
:
hasNonSyntacticScopeOnChain
(
)
const
{
if
(
isScopeStencil
(
)
)
{
if
(
kind
(
)
=
=
ScopeKind
:
:
NonSyntactic
)
{
return
true
;
}
return
enclosing
(
)
.
hasNonSyntacticScopeOnChain
(
)
;
}
return
compilationState_
.
scopeContext
.
hasNonSyntacticScopeOnChain
;
}
#
endif
