#
ifndef
frontend_StencilXdr_h
#
define
frontend_StencilXdr_h
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
ObjLiteral
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
vm
/
Scope
.
h
"
#
include
"
vm
/
Xdr
.
h
"
namespace
js
{
namespace
frontend
{
class
StencilXDR
{
public
:
template
<
XDRMode
mode
>
static
XDRResult
Script
(
XDRState
<
mode
>
*
xdr
ScriptStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
Scope
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
FunctionScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
VarScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
LexicalScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
EvalScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
GlobalScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
ModuleScopeData
(
XDRState
<
mode
>
*
xdr
ScopeStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
ObjLiteral
(
XDRState
<
mode
>
*
xdr
ObjLiteralStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
BigInt
(
XDRState
<
mode
>
*
xdr
BigIntStencil
&
stencil
)
;
template
<
XDRMode
mode
>
static
XDRResult
SharedData
(
js
:
:
XDRState
<
mode
>
*
xdr
RefPtr
<
SharedImmutableScriptData
>
&
sisd
)
;
}
;
}
}
#
endif
