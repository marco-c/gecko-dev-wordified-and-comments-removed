#
ifndef
frontend_Stencil_h
#
define
frontend_Stencil_h
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
RegExpFlags
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSScript
.
h
"
namespace
js
{
namespace
frontend
{
template
<
typename
Tag
>
struct
TypedIndex
{
explicit
TypedIndex
(
uint32_t
index
)
:
index
(
index
)
{
}
;
uint32_t
index
=
0
;
operator
size_t
(
)
const
{
return
index
;
}
}
;
enum
class
FunctionSyntaxKind
:
uint8_t
;
struct
LazyScriptCreationData
{
frontend
:
:
AtomVector
closedOverBindings
;
FunctionBoxVector
innerFunctionBoxes
;
bool
strict
=
false
;
mozilla
:
:
Maybe
<
FieldInitializers
>
fieldInitializers
;
explicit
LazyScriptCreationData
(
JSContext
*
cx
)
:
innerFunctionBoxes
(
cx
)
{
}
bool
init
(
JSContext
*
cx
const
frontend
:
:
AtomVector
&
COB
FunctionBoxVector
&
innerBoxes
bool
isStrict
)
{
strict
=
isStrict
;
if
(
!
innerFunctionBoxes
.
appendAll
(
innerBoxes
)
)
{
return
false
;
}
if
(
!
closedOverBindings
.
appendAll
(
COB
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
create
(
JSContext
*
cx
FunctionBox
*
funbox
HandleScriptSourceObject
sourceObject
)
;
}
;
struct
FunctionCreationData
{
FunctionCreationData
(
HandleAtom
atom
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
isSelfHosting
=
false
bool
inFunctionBox
=
false
)
;
FunctionCreationData
(
const
FunctionCreationData
&
data
)
:
atom
(
data
.
atom
)
kind
(
data
.
kind
)
generatorKind
(
data
.
generatorKind
)
asyncKind
(
data
.
asyncKind
)
allocKind
(
data
.
allocKind
)
flags
(
data
.
flags
)
isSelfHosting
(
data
.
isSelfHosting
)
lazyScriptData
(
mozilla
:
:
Nothing
(
)
)
{
MOZ_RELEASE_ASSERT
(
!
data
.
lazyScriptData
)
;
}
FunctionCreationData
(
FunctionCreationData
&
&
data
)
=
default
;
JSAtom
*
atom
=
nullptr
;
FunctionSyntaxKind
kind
;
GeneratorKind
generatorKind
=
GeneratorKind
:
:
NotGenerator
;
FunctionAsyncKind
asyncKind
=
FunctionAsyncKind
:
:
SyncFunction
;
gc
:
:
AllocKind
allocKind
=
gc
:
:
AllocKind
:
:
FUNCTION
;
FunctionFlags
flags
=
{
}
;
bool
isSelfHosting
=
false
;
mozilla
:
:
Maybe
<
LazyScriptCreationData
>
lazyScriptData
;
HandleAtom
getAtom
(
JSContext
*
cx
)
const
;
void
trace
(
JSTracer
*
trc
)
{
TraceNullableRoot
(
trc
&
atom
"
FunctionCreationData
atom
"
)
;
}
}
;
class
RegExpCreationData
{
UniquePtr
<
char16_t
[
]
JS
:
:
FreePolicy
>
buf_
;
size_t
length_
=
0
;
JS
:
:
RegExpFlags
flags_
;
public
:
RegExpCreationData
(
)
=
default
;
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
mozilla
:
:
Range
<
const
char16_t
>
range
JS
:
:
RegExpFlags
flags
)
{
length_
=
range
.
length
(
)
;
buf_
=
js
:
:
DuplicateString
(
cx
range
.
begin
(
)
.
get
(
)
range
.
length
(
)
)
;
if
(
!
buf_
)
{
return
false
;
}
flags_
=
flags
;
return
true
;
}
RegExpObject
*
createRegExp
(
JSContext
*
cx
)
const
;
}
;
using
RegExpIndex
=
TypedIndex
<
RegExpCreationData
>
;
}
}
#
endif
