#
ifndef
frontend_Stencil_h
#
define
frontend_Stencil_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
frontend
/
AbstractScope
.
h
"
#
include
"
frontend
/
NameAnalysisTypes
.
h
"
#
include
"
frontend
/
TypedIndex
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
RegExpFlags
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
util
/
Text
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
Scope
.
h
"
#
include
"
vm
/
ScopeKind
.
h
"
struct
JSContext
;
class
JSAtom
;
class
JSFunction
;
class
JSTracer
;
namespace
js
{
class
Shape
;
namespace
frontend
{
struct
CompilationInfo
;
class
FunctionBox
;
enum
class
FunctionSyntaxKind
:
uint8_t
;
struct
LazyScriptCreationData
{
frontend
:
:
AtomVector
closedOverBindings
;
FunctionBoxVector
innerFunctionBoxes
;
bool
strict
=
false
;
mozilla
:
:
Maybe
<
FieldInitializers
>
fieldInitializers
;
explicit
LazyScriptCreationData
(
JSContext
*
cx
)
:
innerFunctionBoxes
(
cx
)
{
}
bool
init
(
JSContext
*
cx
const
frontend
:
:
AtomVector
&
COB
FunctionBoxVector
&
innerBoxes
bool
isStrict
)
{
strict
=
isStrict
;
if
(
!
innerFunctionBoxes
.
appendAll
(
innerBoxes
)
)
{
return
false
;
}
if
(
!
closedOverBindings
.
appendAll
(
COB
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
create
(
JSContext
*
cx
FunctionBox
*
funbox
HandleScriptSourceObject
sourceObject
)
;
}
;
struct
FunctionCreationData
{
FunctionCreationData
(
HandleAtom
atom
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
isSelfHosting
=
false
bool
inFunctionBox
=
false
)
;
FunctionCreationData
(
const
FunctionCreationData
&
data
)
:
atom
(
data
.
atom
)
kind
(
data
.
kind
)
generatorKind
(
data
.
generatorKind
)
asyncKind
(
data
.
asyncKind
)
allocKind
(
data
.
allocKind
)
flags
(
data
.
flags
)
isSelfHosting
(
data
.
isSelfHosting
)
lazyScriptData
(
mozilla
:
:
Nothing
(
)
)
{
MOZ_RELEASE_ASSERT
(
!
data
.
lazyScriptData
)
;
}
FunctionCreationData
(
FunctionCreationData
&
&
data
)
=
default
;
JSAtom
*
atom
=
nullptr
;
FunctionSyntaxKind
kind
;
GeneratorKind
generatorKind
=
GeneratorKind
:
:
NotGenerator
;
FunctionAsyncKind
asyncKind
=
FunctionAsyncKind
:
:
SyncFunction
;
gc
:
:
AllocKind
allocKind
=
gc
:
:
AllocKind
:
:
FUNCTION
;
FunctionFlags
flags
=
{
}
;
bool
isSelfHosting
=
false
;
mozilla
:
:
Maybe
<
bool
>
typeForScriptedFunction
;
mozilla
:
:
Maybe
<
LazyScriptCreationData
>
lazyScriptData
;
HandleAtom
getAtom
(
JSContext
*
cx
)
const
;
void
setInferredName
(
JSAtom
*
name
)
{
MOZ_ASSERT
(
!
atom
)
;
MOZ_ASSERT
(
name
)
;
MOZ_ASSERT
(
!
flags
.
hasGuessedAtom
(
)
)
;
atom
=
name
;
flags
.
setInferredName
(
)
;
}
JSAtom
*
inferredName
(
)
const
{
MOZ_ASSERT
(
flags
.
hasInferredName
(
)
)
;
MOZ_ASSERT
(
atom
)
;
return
atom
;
}
bool
hasInferredName
(
)
const
{
return
flags
.
hasInferredName
(
)
;
}
void
trace
(
JSTracer
*
trc
)
{
TraceNullableRoot
(
trc
&
atom
"
FunctionCreationData
atom
"
)
;
}
}
;
class
RegExpCreationData
{
UniquePtr
<
char16_t
[
]
JS
:
:
FreePolicy
>
buf_
;
size_t
length_
=
0
;
JS
:
:
RegExpFlags
flags_
;
public
:
RegExpCreationData
(
)
=
default
;
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
mozilla
:
:
Range
<
const
char16_t
>
range
JS
:
:
RegExpFlags
flags
)
{
length_
=
range
.
length
(
)
;
buf_
=
js
:
:
DuplicateString
(
cx
range
.
begin
(
)
.
get
(
)
range
.
length
(
)
)
;
if
(
!
buf_
)
{
return
false
;
}
flags_
=
flags
;
return
true
;
}
RegExpObject
*
createRegExp
(
JSContext
*
cx
)
const
;
}
;
using
RegExpIndex
=
TypedIndex
<
RegExpCreationData
>
;
class
BigIntCreationData
{
UniqueTwoByteChars
buf_
;
size_t
length_
=
0
;
public
:
BigIntCreationData
(
)
=
default
;
MOZ_MUST_USE
bool
init
(
JSContext
*
cx
const
Vector
<
char16_t
32
>
&
buf
)
{
#
ifdef
DEBUG
for
(
char16_t
c
:
buf
)
{
MOZ_ASSERT
(
c
!
=
'
_
'
)
;
}
#
endif
length_
=
buf
.
length
(
)
;
buf_
=
js
:
:
DuplicateString
(
cx
buf
.
begin
(
)
buf
.
length
(
)
)
;
return
buf_
!
=
nullptr
;
}
BigInt
*
createBigInt
(
JSContext
*
cx
)
{
mozilla
:
:
Range
<
const
char16_t
>
source
(
buf_
.
get
(
)
length_
)
;
return
js
:
:
ParseBigIntLiteral
(
cx
source
)
;
}
bool
isZero
(
)
{
mozilla
:
:
Range
<
const
char16_t
>
source
(
buf_
.
get
(
)
length_
)
;
return
js
:
:
BigIntLiteralIsZero
(
source
)
;
}
}
;
using
BigIntIndex
=
TypedIndex
<
BigIntCreationData
>
;
class
ScopeCreationData
{
friend
class
js
:
:
AbstractScope
;
friend
class
js
:
:
GCMarker
;
AbstractScope
enclosing_
;
ScopeKind
kind_
;
HeapPtr
<
Shape
*
>
environmentShape_
=
{
}
;
HeapPtr
<
Scope
*
>
scope_
=
{
}
;
frontend
:
:
FunctionBox
*
funbox_
=
nullptr
;
UniquePtr
<
BaseScopeData
>
data_
;
public
:
ScopeCreationData
(
JSContext
*
cx
ScopeKind
kind
Handle
<
AbstractScope
>
enclosing
UniquePtr
<
BaseScopeData
>
data
=
{
}
Shape
*
environmentShape
=
nullptr
frontend
:
:
FunctionBox
*
funbox
=
nullptr
)
:
enclosing_
(
enclosing
)
kind_
(
kind
)
environmentShape_
(
environmentShape
)
funbox_
(
funbox
)
data_
(
std
:
:
move
(
data
)
)
{
}
ScopeKind
kind
(
)
const
{
return
kind_
;
}
AbstractScope
enclosing
(
)
{
return
enclosing_
;
}
bool
getOrCreateEnclosingScope
(
JSContext
*
cx
MutableHandleScope
scope
)
{
return
enclosing_
.
getOrCreateScope
(
cx
scope
)
;
}
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
Handle
<
FunctionScope
:
:
Data
*
>
dataArg
bool
hasParameterExprs
bool
needsEnvironment
frontend
:
:
FunctionBox
*
funbox
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
ScopeKind
kind
Handle
<
LexicalScope
:
:
Data
*
>
dataArg
uint32_t
firstFrameSlot
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
ScopeKind
kind
Handle
<
VarScope
:
:
Data
*
>
dataArg
uint32_t
firstFrameSlot
bool
needsEnvironment
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
ScopeKind
kind
Handle
<
GlobalScope
:
:
Data
*
>
dataArg
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
ScopeKind
kind
Handle
<
EvalScope
:
:
Data
*
>
dataArg
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
Handle
<
ModuleScope
:
:
Data
*
>
dataArg
HandleModuleObject
module
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
static
bool
create
(
JSContext
*
cx
frontend
:
:
CompilationInfo
&
compilationInfo
Handle
<
AbstractScope
>
enclosing
ScopeIndex
*
index
)
;
bool
hasEnvironment
(
)
const
{
return
Scope
:
:
hasEnvironment
(
kind
(
)
environmentShape_
)
;
}
bool
isArrow
(
)
const
;
JSFunction
*
canonicalFunction
(
)
const
;
bool
hasScope
(
)
const
{
return
scope_
!
=
nullptr
;
}
Scope
*
getScope
(
)
const
{
MOZ_ASSERT
(
hasScope
(
)
)
;
return
scope_
;
}
Scope
*
createScope
(
JSContext
*
cx
)
;
void
trace
(
JSTracer
*
trc
)
;
uint32_t
nextFrameSlot
(
)
const
;
private
:
template
<
typename
SpecificScopeType
>
typename
SpecificScopeType
:
:
Data
&
data
(
)
const
{
MOZ_ASSERT
(
data_
.
get
(
)
)
;
return
*
static_cast
<
typename
SpecificScopeType
:
:
Data
*
>
(
data_
.
get
(
)
)
;
}
template
<
typename
SpecificScopeType
>
UniquePtr
<
typename
SpecificScopeType
:
:
Data
>
releaseData
(
)
{
return
UniquePtr
<
typename
SpecificScopeType
:
:
Data
>
(
static_cast
<
typename
SpecificScopeType
:
:
Data
*
>
(
data_
.
release
(
)
)
)
;
}
template
<
typename
SpecificScopeType
>
Scope
*
createSpecificScope
(
JSContext
*
cx
)
;
template
<
typename
SpecificScopeType
>
uint32_t
nextFrameSlot
(
)
const
{
if
(
hasScope
(
)
)
{
return
getScope
(
)
-
>
template
as
<
SpecificScopeType
>
(
)
.
nextFrameSlot
(
)
;
}
return
data
<
SpecificScopeType
>
(
)
.
nextFrameSlot
;
}
}
;
class
ScriptStencil
{
public
:
unsigned
lineno
=
0
;
unsigned
column
=
0
;
uint32_t
natoms
=
0
;
uint32_t
ngcthings
=
0
;
uint32_t
numResumeOffsets
=
0
;
uint32_t
numScopeNotes
=
0
;
uint32_t
numTryNotes
=
0
;
uint32_t
mainOffset
=
0
;
uint32_t
nfixed
=
0
;
uint32_t
nslots
=
0
;
uint32_t
bodyScopeIndex
=
0
;
uint32_t
numICEntries
=
0
;
uint32_t
numBytecodeTypeSets
=
0
;
bool
strict
=
false
;
bool
bindingsAccessedDynamically
=
false
;
bool
hasCallSiteObj
=
false
;
bool
isForEval
=
false
;
bool
isModule
=
false
;
bool
isFunction
=
false
;
bool
hasNonSyntacticScope
=
false
;
bool
needsFunctionEnvironmentObjects
=
false
;
bool
hasModuleGoal
=
false
;
bool
hasInnerFunctions
=
false
;
mozilla
:
:
Span
<
const
jsbytecode
>
code
;
mozilla
:
:
Span
<
const
jssrcnote
>
notes
;
js
:
:
frontend
:
:
FunctionBox
*
functionBox
=
nullptr
;
virtual
bool
finishGCThings
(
JSContext
*
cx
mozilla
:
:
Span
<
JS
:
:
GCCellPtr
>
gcthings
)
const
=
0
;
virtual
void
initAtomMap
(
GCPtrAtom
*
atoms
)
const
=
0
;
virtual
void
finishResumeOffsets
(
mozilla
:
:
Span
<
uint32_t
>
resumeOffsets
)
const
=
0
;
virtual
void
finishScopeNotes
(
mozilla
:
:
Span
<
ScopeNote
>
scopeNotes
)
const
=
0
;
virtual
void
finishTryNotes
(
mozilla
:
:
Span
<
JSTryNote
>
tryNotes
)
const
=
0
;
virtual
void
finishInnerFunctions
(
)
const
=
0
;
}
;
}
}
namespace
JS
{
template
<
>
struct
GCPolicy
<
js
:
:
frontend
:
:
ScopeCreationData
*
>
{
static
void
trace
(
JSTracer
*
trc
js
:
:
frontend
:
:
ScopeCreationData
*
*
data
const
char
*
name
)
{
(
*
data
)
-
>
trace
(
trc
)
;
}
}
;
}
#
endif
