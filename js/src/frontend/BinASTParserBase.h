#
ifndef
frontend_BinASTParserBase_h
#
define
frontend_BinASTParserBase_h
#
include
<
stddef
.
h
>
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
frontend
/
FullParseHandler
.
h
"
#
include
"
frontend
/
ParseContext
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
namespace
js
{
namespace
frontend
{
class
BinASTParserBase
:
private
JS
:
:
AutoGCRooter
{
public
:
BinASTParserBase
(
JSContext
*
cx
LifoAlloc
&
alloc
UsedNameTracker
&
usedNames
HandleScriptSourceObject
sourceObject
Handle
<
LazyScript
*
>
lazyScript
)
;
~
BinASTParserBase
(
)
;
public
:
bool
hasUsedName
(
HandlePropertyName
name
)
;
virtual
void
doTrace
(
JSTracer
*
trc
)
{
}
void
trace
(
JSTracer
*
trc
)
{
TraceListNode
:
:
TraceList
(
trc
traceListHead_
)
;
doTrace
(
trc
)
;
}
public
:
ParseNode
*
allocParseNode
(
size_t
size
)
{
return
static_cast
<
ParseNode
*
>
(
nodeAlloc_
.
allocNode
(
size
)
)
;
}
JS_DECLARE_NEW_METHODS
(
new_
allocParseNode
inline
)
friend
void
TraceBinParser
(
JSTracer
*
trc
JS
:
:
AutoGCRooter
*
parser
)
;
protected
:
JSContext
*
cx_
;
protected
:
LifoAlloc
&
alloc_
;
TraceListNode
*
traceListHead_
;
UsedNameTracker
&
usedNames_
;
private
:
LifoAlloc
:
:
Mark
tempPoolMark_
;
ParseNodeAllocator
nodeAlloc_
;
protected
:
AutoKeepAtoms
keepAtoms_
;
RootedScriptSourceObject
sourceObject_
;
Rooted
<
LazyScript
*
>
lazyScript_
;
ParseContext
*
pc_
;
FullParseHandler
handler_
;
friend
class
BinParseContext
;
}
;
}
}
#
endif
