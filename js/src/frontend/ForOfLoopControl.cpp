#
include
"
frontend
/
ForOfLoopControl
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
IfEmitter
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
ForOfLoopControl
:
:
ForOfLoopControl
(
BytecodeEmitter
*
bce
int32_t
iterDepth
bool
allowSelfHosted
IteratorKind
iterKind
)
:
LoopControl
(
bce
StatementKind
:
:
ForOfLoop
)
iterDepth_
(
iterDepth
)
numYieldsAtBeginCodeNeedingIterClose_
(
UINT32_MAX
)
allowSelfHosted_
(
allowSelfHosted
)
iterKind_
(
iterKind
)
{
}
bool
ForOfLoopControl
:
:
emitBeginCodeNeedingIteratorClose
(
BytecodeEmitter
*
bce
)
{
tryCatch_
.
emplace
(
bce
TryEmitter
:
:
Kind
:
:
TryCatch
TryEmitter
:
:
ControlKind
:
:
NonSyntactic
)
;
if
(
!
tryCatch_
-
>
emitTry
(
)
)
{
return
false
;
}
MOZ_ASSERT
(
numYieldsAtBeginCodeNeedingIterClose_
=
=
UINT32_MAX
)
;
numYieldsAtBeginCodeNeedingIterClose_
=
bce
-
>
yieldAndAwaitOffsetList
.
numYields
;
return
true
;
}
bool
ForOfLoopControl
:
:
emitEndCodeNeedingIteratorClose
(
BytecodeEmitter
*
bce
)
{
if
(
!
tryCatch_
-
>
emitCatch
(
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_EXCEPTION
)
)
{
return
false
;
}
unsigned
slotFromTop
=
bce
-
>
stackDepth
-
iterDepth_
;
if
(
!
bce
-
>
emitDupAt
(
slotFromTop
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_UNDEFINED
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_STRICTNE
)
)
{
return
false
;
}
InternalIfEmitter
ifIteratorIsNotClosed
(
bce
)
;
if
(
!
ifIteratorIsNotClosed
.
emitThen
(
)
)
{
return
false
;
}
MOZ_ASSERT
(
slotFromTop
=
=
unsigned
(
bce
-
>
stackDepth
-
iterDepth_
)
)
;
if
(
!
bce
-
>
emitDupAt
(
slotFromTop
)
)
{
return
false
;
}
if
(
!
emitIteratorCloseInInnermostScope
(
bce
CompletionKind
:
:
Throw
)
)
{
return
false
;
}
if
(
!
ifIteratorIsNotClosed
.
emitEnd
(
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_THROW
)
)
{
return
false
;
}
uint32_t
numYieldsEmitted
=
bce
-
>
yieldAndAwaitOffsetList
.
numYields
;
if
(
numYieldsEmitted
>
numYieldsAtBeginCodeNeedingIterClose_
)
{
if
(
!
tryCatch_
-
>
emitFinally
(
)
)
{
return
false
;
}
InternalIfEmitter
ifGeneratorClosing
(
bce
)
;
if
(
!
bce
-
>
emit1
(
JSOP_ISGENCLOSING
)
)
{
return
false
;
}
if
(
!
ifGeneratorClosing
.
emitThen
(
)
)
{
return
false
;
}
if
(
!
bce
-
>
emitDupAt
(
slotFromTop
+
1
)
)
{
return
false
;
}
if
(
!
emitIteratorCloseInInnermostScope
(
bce
CompletionKind
:
:
Normal
)
)
{
return
false
;
}
if
(
!
ifGeneratorClosing
.
emitEnd
(
)
)
{
return
false
;
}
}
if
(
!
tryCatch_
-
>
emitEnd
(
)
)
{
return
false
;
}
tryCatch_
.
reset
(
)
;
numYieldsAtBeginCodeNeedingIterClose_
=
UINT32_MAX
;
return
true
;
}
bool
ForOfLoopControl
:
:
emitIteratorCloseInInnermostScope
(
BytecodeEmitter
*
bce
CompletionKind
completionKind
)
{
return
emitIteratorCloseInScope
(
bce
*
bce
-
>
innermostEmitterScope
(
)
completionKind
)
;
}
bool
ForOfLoopControl
:
:
emitIteratorCloseInScope
(
BytecodeEmitter
*
bce
EmitterScope
&
currentScope
CompletionKind
completionKind
)
{
ptrdiff_t
start
=
bce
-
>
offset
(
)
;
if
(
!
bce
-
>
emitIteratorCloseInScope
(
currentScope
iterKind_
completionKind
allowSelfHosted_
)
)
{
return
false
;
}
ptrdiff_t
end
=
bce
-
>
offset
(
)
;
return
bce
-
>
tryNoteList
.
append
(
JSTRY_FOR_OF_ITERCLOSE
0
start
end
)
;
}
bool
ForOfLoopControl
:
:
emitPrepareForNonLocalJumpFromScope
(
BytecodeEmitter
*
bce
EmitterScope
&
currentScope
bool
isTarget
)
{
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_SWAP
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_UNDEFINED
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_SWAP
)
)
{
return
false
;
}
if
(
!
emitIteratorCloseInScope
(
bce
currentScope
CompletionKind
:
:
Normal
)
)
{
return
false
;
}
if
(
isTarget
)
{
if
(
!
bce
-
>
emit1
(
JSOP_UNDEFINED
)
)
{
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_UNDEFINED
)
)
{
return
false
;
}
}
else
{
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
}
return
true
;
}
