#
include
"
frontend
/
JumpList
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
"
vm
/
BytecodeUtil
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
void
JumpList
:
:
push
(
jsbytecode
*
code
BytecodeOffset
jumpOffset
)
{
if
(
!
offset
.
valid
(
)
)
{
SET_JUMP_OFFSET
(
&
code
[
jumpOffset
.
value
(
)
]
END_OF_LIST_DELTA
)
;
}
else
{
SET_JUMP_OFFSET
(
&
code
[
jumpOffset
.
value
(
)
]
(
offset
-
jumpOffset
)
.
value
(
)
)
;
}
offset
=
jumpOffset
;
}
void
JumpList
:
:
patchAll
(
jsbytecode
*
code
JumpTarget
target
)
{
if
(
!
offset
.
valid
(
)
)
{
return
;
}
BytecodeOffsetDiff
delta
;
BytecodeOffset
jumpOffset
=
offset
;
while
(
true
)
{
jsbytecode
*
pc
=
&
code
[
jumpOffset
.
value
(
)
]
;
MOZ_ASSERT
(
IsJumpOpcode
(
JSOp
(
*
pc
)
)
)
;
delta
=
BytecodeOffsetDiff
(
GET_JUMP_OFFSET
(
pc
)
)
;
MOZ_ASSERT
(
delta
.
value
(
)
=
=
END_OF_LIST_DELTA
|
|
delta
.
value
(
)
<
0
)
;
BytecodeOffsetDiff
span
=
target
.
offset
-
jumpOffset
;
SET_JUMP_OFFSET
(
pc
span
.
value
(
)
)
;
if
(
delta
.
value
(
)
=
=
END_OF_LIST_DELTA
)
{
break
;
}
jumpOffset
+
=
delta
;
}
}
