#
ifndef
frontend_FrontendContext_h
#
define
frontend_FrontendContext_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stddef
.
h
>
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
Modules
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
ErrorReporting
.
h
"
#
include
"
vm
/
MallocProvider
.
h
"
#
include
"
vm
/
SharedScriptDataTableHolder
.
h
"
struct
JSContext
;
namespace
js
{
class
FrontendContext
;
namespace
frontend
{
class
NameCollectionPool
;
}
struct
FrontendErrors
{
FrontendErrors
(
)
=
default
;
mozilla
:
:
Maybe
<
CompileError
>
error
;
Vector
<
CompileError
0
SystemAllocPolicy
>
warnings
;
bool
overRecursed
=
false
;
bool
outOfMemory
=
false
;
bool
allocationOverflow
=
false
;
bool
hadErrors
(
)
const
{
return
outOfMemory
|
|
overRecursed
|
|
allocationOverflow
|
|
error
;
}
void
clearErrors
(
)
;
}
;
class
FrontendAllocator
:
public
MallocProvider
<
FrontendAllocator
>
{
private
:
FrontendContext
*
const
fc_
;
public
:
explicit
FrontendAllocator
(
FrontendContext
*
fc
)
:
fc_
(
fc
)
{
}
void
*
onOutOfMemory
(
js
:
:
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
=
nullptr
)
;
void
reportAllocationOverflow
(
)
;
}
;
class
FrontendContext
{
private
:
FrontendAllocator
alloc_
;
js
:
:
FrontendErrors
errors_
;
frontend
:
:
NameCollectionPool
*
nameCollectionPool_
;
bool
ownNameCollectionPool_
;
js
:
:
SharedScriptDataTableHolder
*
scriptDataTableHolder_
;
JS
:
:
ImportAssertionVector
supportedImportAssertions_
;
JS
:
:
NativeStackLimit
stackLimit_
=
JS
:
:
NativeStackLimitMax
;
#
ifdef
DEBUG
mozilla
:
:
Maybe
<
size_t
>
stackLimitThreadId_
;
#
endif
protected
:
JSContext
*
maybeCx_
=
nullptr
;
public
:
FrontendContext
(
)
:
alloc_
(
this
)
nameCollectionPool_
(
nullptr
)
ownNameCollectionPool_
(
false
)
scriptDataTableHolder_
(
&
js
:
:
globalSharedScriptDataTableHolder
)
supportedImportAssertions_
(
)
{
}
~
FrontendContext
(
)
;
void
setStackQuota
(
JS
:
:
NativeStackSize
stackSize
)
;
JS
:
:
NativeStackLimit
stackLimit
(
)
const
{
return
stackLimit_
;
}
bool
allocateOwnedPool
(
)
;
frontend
:
:
NameCollectionPool
&
nameCollectionPool
(
)
{
MOZ_ASSERT
(
nameCollectionPool_
"
Either
allocateOwnedPool
or
setCurrentJSContext
must
be
called
"
)
;
return
*
nameCollectionPool_
;
}
js
:
:
SharedScriptDataTableHolder
*
scriptDataTableHolder
(
)
{
MOZ_ASSERT
(
scriptDataTableHolder_
)
;
return
scriptDataTableHolder_
;
}
FrontendAllocator
*
getAllocator
(
)
{
return
&
alloc_
;
}
void
setCurrentJSContext
(
JSContext
*
cx
)
;
JSContext
*
maybeCurrentJSContext
(
)
{
return
maybeCx_
;
}
const
JS
:
:
ImportAssertionVector
&
getSupportedImportAssertions
(
)
const
{
return
supportedImportAssertions_
;
}
bool
setSupportedImportAssertions
(
const
JS
:
:
ImportAssertionVector
&
supportedImportAssertions
)
;
enum
class
Warning
{
Suppress
Report
}
;
void
convertToRuntimeError
(
JSContext
*
cx
Warning
warning
=
Warning
:
:
Report
)
;
mozilla
:
:
Maybe
<
CompileError
>
&
maybeError
(
)
{
return
errors_
.
error
;
}
Vector
<
CompileError
0
SystemAllocPolicy
>
&
warnings
(
)
{
return
errors_
.
warnings
;
}
void
reportError
(
js
:
:
CompileError
&
&
err
)
;
bool
reportWarning
(
js
:
:
CompileError
&
&
err
)
;
void
*
onOutOfMemory
(
js
:
:
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
=
nullptr
)
;
void
onAllocationOverflow
(
)
;
void
onOutOfMemory
(
)
;
void
onOverRecursed
(
)
;
void
recoverFromOutOfMemory
(
)
;
const
JSErrorFormatString
*
gcSafeCallback
(
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
)
;
bool
hadOutOfMemory
(
)
const
{
return
errors_
.
outOfMemory
;
}
bool
hadOverRecursed
(
)
const
{
return
errors_
.
overRecursed
;
}
bool
hadAllocationOverflow
(
)
const
{
return
errors_
.
allocationOverflow
;
}
bool
hadErrors
(
)
const
;
void
clearErrors
(
)
;
#
ifdef
__wasi__
void
incWasiRecursionDepth
(
)
;
void
decWasiRecursionDepth
(
)
;
bool
checkWasiRecursionLimit
(
)
;
#
endif
#
ifdef
DEBUG
void
setNativeStackLimitThread
(
)
;
void
assertNativeStackLimitThread
(
)
;
#
endif
private
:
void
ReportOutOfMemory
(
)
;
void
addPendingOutOfMemory
(
)
;
}
;
class
MOZ_STACK_CLASS
AutoReportFrontendContext
:
public
FrontendContext
{
JSContext
*
cx_
;
Warning
warning_
;
public
:
explicit
AutoReportFrontendContext
(
JSContext
*
cx
Warning
warning
=
Warning
:
:
Report
)
:
FrontendContext
(
)
cx_
(
cx
)
warning_
(
warning
)
{
setCurrentJSContext
(
cx_
)
;
MOZ_ASSERT
(
cx_
=
=
maybeCx_
)
;
}
~
AutoReportFrontendContext
(
)
{
if
(
cx_
)
{
convertToRuntimeErrorAndClear
(
)
;
}
}
void
clearAutoReport
(
)
{
cx_
=
nullptr
;
}
void
convertToRuntimeErrorAndClear
(
)
{
convertToRuntimeError
(
cx_
warning_
)
;
cx_
=
nullptr
;
}
}
;
class
ManualReportFrontendContext
:
public
FrontendContext
{
JSContext
*
cx_
;
#
ifdef
DEBUG
bool
handled_
=
false
;
#
endif
public
:
explicit
ManualReportFrontendContext
(
JSContext
*
cx
)
:
FrontendContext
(
)
cx_
(
cx
)
{
setCurrentJSContext
(
cx_
)
;
}
~
ManualReportFrontendContext
(
)
{
MOZ_ASSERT
(
handled_
)
;
}
void
ok
(
)
{
#
ifdef
DEBUG
handled_
=
true
;
#
endif
}
void
failure
(
)
{
#
ifdef
DEBUG
handled_
=
true
;
#
endif
convertToRuntimeError
(
cx_
)
;
}
}
;
extern
FrontendContext
*
NewFrontendContext
(
)
;
extern
void
DestroyFrontendContext
(
FrontendContext
*
fc
)
;
}
#
endif
