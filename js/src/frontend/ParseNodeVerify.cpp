#
include
"
frontend
/
ParseNodeVerify
.
h
"
#
include
"
frontend
/
ParseNodeVisitor
.
h
"
using
namespace
js
;
#
ifdef
DEBUG
namespace
js
{
namespace
frontend
{
class
ParseNodeVerifier
:
public
ParseNodeVisitor
<
ParseNodeVerifier
>
{
using
Base
=
ParseNodeVisitor
<
ParseNodeVerifier
>
;
const
LifoAlloc
&
alloc_
;
public
:
ParseNodeVerifier
(
JSContext
*
cx
const
LifoAlloc
&
alloc
)
:
Base
(
cx
)
alloc_
(
alloc
)
{
}
[
[
nodiscard
]
]
bool
visit
(
ParseNode
*
pn
)
{
JS_PARSE_NODE_ASSERT
(
alloc_
.
contains
(
pn
)
"
start
of
parse
node
is
in
alloc
"
)
;
JS_PARSE_NODE_ASSERT
(
alloc_
.
contains
(
(
unsigned
char
*
)
pn
+
pn
-
>
size
(
)
)
"
end
of
parse
node
is
in
alloc
"
)
;
if
(
pn
-
>
is
<
ListNode
>
(
)
)
{
pn
-
>
as
<
ListNode
>
(
)
.
checkConsistency
(
)
;
}
return
Base
:
:
visit
(
pn
)
;
}
}
;
}
}
bool
frontend
:
:
CheckParseTree
(
JSContext
*
cx
const
LifoAlloc
&
alloc
ParseNode
*
pn
)
{
ParseNodeVerifier
verifier
(
cx
alloc
)
;
return
verifier
.
visit
(
pn
)
;
}
#
endif
