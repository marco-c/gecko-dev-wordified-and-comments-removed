#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
<
string
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
jsatom
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
jsfun
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
jsopcode
.
h
"
#
include
"
jsscript
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
jsutil
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
frontend
/
TokenStream
.
h
"
#
include
"
vm
/
Debugger
.
h
"
#
include
"
vm
/
GeneratorObject
.
h
"
#
include
"
vm
/
Stack
.
h
"
#
include
"
wasm
/
AsmJS
.
h
"
#
include
"
jsatominlines
.
h
"
#
include
"
jsobjinlines
.
h
"
#
include
"
jsscriptinlines
.
h
"
#
include
"
frontend
/
ParseNode
-
inl
.
h
"
#
include
"
vm
/
EnvironmentObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
gc
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
AssertedCast
;
using
mozilla
:
:
DebugOnly
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
using
mozilla
:
:
NumberIsInt32
;
using
mozilla
:
:
PodCopy
;
using
mozilla
:
:
Some
;
class
BreakableControl
;
class
LabelControl
;
class
LoopControl
;
class
TryFinallyControl
;
static
bool
ParseNodeRequiresSpecialLineNumberNotes
(
ParseNode
*
pn
)
{
return
pn
-
>
getKind
(
)
=
=
PNK_WHILE
|
|
pn
-
>
getKind
(
)
=
=
PNK_FOR
;
}
class
BytecodeEmitter
:
:
TDZCheckCache
:
public
Nestable
<
BytecodeEmitter
:
:
TDZCheckCache
>
{
PooledMapPtr
<
CheckTDZMap
>
cache_
;
MOZ_MUST_USE
bool
ensureCache
(
BytecodeEmitter
*
bce
)
{
return
cache_
|
|
cache_
.
acquire
(
bce
-
>
cx
)
;
}
public
:
explicit
TDZCheckCache
(
BytecodeEmitter
*
bce
)
:
Nestable
<
TDZCheckCache
>
(
&
bce
-
>
innermostTDZCheckCache
)
cache_
(
bce
-
>
cx
-
>
frontendCollectionPool
(
)
)
{
}
Maybe
<
MaybeCheckTDZ
>
needsTDZCheck
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
;
MOZ_MUST_USE
bool
noteTDZCheck
(
BytecodeEmitter
*
bce
JSAtom
*
name
MaybeCheckTDZ
check
)
;
}
;
class
BytecodeEmitter
:
:
NestableControl
:
public
Nestable
<
BytecodeEmitter
:
:
NestableControl
>
{
StatementKind
kind_
;
EmitterScope
*
emitterScope_
;
protected
:
NestableControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
Nestable
<
NestableControl
>
(
&
bce
-
>
innermostNestableControl
)
kind_
(
kind
)
emitterScope_
(
bce
-
>
innermostEmitterScope
)
{
}
public
:
using
Nestable
<
NestableControl
>
:
:
enclosing
;
using
Nestable
<
NestableControl
>
:
:
findNearest
;
StatementKind
kind
(
)
const
{
return
kind_
;
}
EmitterScope
*
emitterScope
(
)
const
{
return
emitterScope_
;
}
template
<
typename
T
>
bool
is
(
)
const
;
template
<
typename
T
>
T
&
as
(
)
{
MOZ_ASSERT
(
this
-
>
is
<
T
>
(
)
)
;
return
static_cast
<
T
&
>
(
*
this
)
;
}
}
;
namespace
js
{
namespace
frontend
{
template
<
>
bool
BytecodeEmitter
:
:
NestableControl
:
:
is
<
BreakableControl
>
(
)
const
{
return
StatementKindIsUnlabeledBreakTarget
(
kind_
)
|
|
kind_
=
=
StatementKind
:
:
Label
;
}
template
<
>
bool
BytecodeEmitter
:
:
NestableControl
:
:
is
<
LabelControl
>
(
)
const
{
return
kind_
=
=
StatementKind
:
:
Label
;
}
template
<
>
bool
BytecodeEmitter
:
:
NestableControl
:
:
is
<
LoopControl
>
(
)
const
{
return
StatementKindIsLoop
(
kind_
)
;
}
template
<
>
bool
BytecodeEmitter
:
:
NestableControl
:
:
is
<
TryFinallyControl
>
(
)
const
{
return
kind_
=
=
StatementKind
:
:
Try
|
|
kind_
=
=
StatementKind
:
:
Finally
;
}
}
}
class
BreakableControl
:
public
BytecodeEmitter
:
:
NestableControl
{
public
:
JumpList
breaks
;
BreakableControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
NestableControl
(
bce
kind
)
{
MOZ_ASSERT
(
is
<
BreakableControl
>
(
)
)
;
}
MOZ_MUST_USE
bool
patchBreaks
(
BytecodeEmitter
*
bce
)
{
return
bce
-
>
emitJumpTargetAndPatch
(
breaks
)
;
}
}
;
class
LabelControl
:
public
BreakableControl
{
RootedAtom
label_
;
ptrdiff_t
startOffset_
;
public
:
LabelControl
(
BytecodeEmitter
*
bce
JSAtom
*
label
ptrdiff_t
startOffset
)
:
BreakableControl
(
bce
StatementKind
:
:
Label
)
label_
(
bce
-
>
cx
label
)
startOffset_
(
startOffset
)
{
}
HandleAtom
label
(
)
const
{
return
label_
;
}
ptrdiff_t
startOffset
(
)
const
{
return
startOffset_
;
}
}
;
class
LoopControl
:
public
BreakableControl
{
BytecodeEmitter
:
:
TDZCheckCache
tdzCache_
;
int32_t
stackDepth_
;
uint32_t
loopDepth_
;
bool
canIonOsr_
;
public
:
JumpTarget
continueTarget
;
JumpList
continues
;
LoopControl
(
BytecodeEmitter
*
bce
StatementKind
loopKind
)
:
BreakableControl
(
bce
loopKind
)
tdzCache_
(
bce
)
continueTarget
(
{
-
1
}
)
{
MOZ_ASSERT
(
is
<
LoopControl
>
(
)
)
;
LoopControl
*
enclosingLoop
=
findNearest
<
LoopControl
>
(
enclosing
(
)
)
;
stackDepth_
=
bce
-
>
stackDepth
;
loopDepth_
=
enclosingLoop
?
enclosingLoop
-
>
loopDepth_
+
1
:
1
;
int
loopSlots
;
if
(
loopKind
=
=
StatementKind
:
:
Spread
)
loopSlots
=
3
;
else
if
(
loopKind
=
=
StatementKind
:
:
ForInLoop
|
|
loopKind
=
=
StatementKind
:
:
ForOfLoop
)
loopSlots
=
2
;
else
loopSlots
=
0
;
MOZ_ASSERT
(
loopSlots
<
=
stackDepth_
)
;
if
(
enclosingLoop
)
{
canIonOsr_
=
(
enclosingLoop
-
>
canIonOsr_
&
&
stackDepth_
=
=
enclosingLoop
-
>
stackDepth_
+
loopSlots
)
;
}
else
{
canIonOsr_
=
stackDepth_
=
=
loopSlots
;
}
}
uint32_t
loopDepth
(
)
const
{
return
loopDepth_
;
}
bool
canIonOsr
(
)
const
{
return
canIonOsr_
;
}
MOZ_MUST_USE
bool
patchBreaksAndContinues
(
BytecodeEmitter
*
bce
)
{
MOZ_ASSERT
(
continueTarget
.
offset
!
=
-
1
)
;
if
(
!
patchBreaks
(
bce
)
)
return
false
;
bce
-
>
patchJumpsToTarget
(
continues
continueTarget
)
;
return
true
;
}
}
;
class
TryFinallyControl
:
public
BytecodeEmitter
:
:
NestableControl
{
bool
emittingSubroutine_
;
public
:
JumpList
gosubs
;
JumpList
guardJump
;
TryFinallyControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
NestableControl
(
bce
kind
)
emittingSubroutine_
(
false
)
{
MOZ_ASSERT
(
is
<
TryFinallyControl
>
(
)
)
;
}
void
setEmittingSubroutine
(
)
{
emittingSubroutine_
=
true
;
}
bool
emittingSubroutine
(
)
const
{
return
emittingSubroutine_
;
}
}
;
static
bool
ScopeKindIsInBody
(
ScopeKind
kind
)
{
return
kind
=
=
ScopeKind
:
:
Lexical
|
|
kind
=
=
ScopeKind
:
:
SimpleCatch
|
|
kind
=
=
ScopeKind
:
:
Catch
|
|
kind
=
=
ScopeKind
:
:
With
|
|
kind
=
=
ScopeKind
:
:
FunctionBodyVar
|
|
kind
=
=
ScopeKind
:
:
ParameterExpressionVar
;
}
static
inline
void
MarkAllBindingsClosedOver
(
LexicalScope
:
:
Data
&
data
)
{
BindingName
*
names
=
data
.
names
;
for
(
uint32_t
i
=
0
;
i
<
data
.
length
;
i
+
+
)
names
[
i
]
=
BindingName
(
names
[
i
]
.
name
(
)
true
)
;
}
class
BytecodeEmitter
:
:
EmitterScope
:
public
Nestable
<
BytecodeEmitter
:
:
EmitterScope
>
{
PooledMapPtr
<
NameLocationMap
>
nameCache_
;
Maybe
<
NameLocation
>
fallbackFreeNameLocation_
;
bool
hasEnvironment_
;
uint8_t
environmentChainLength_
;
uint32_t
nextFrameSlot_
;
uint32_t
scopeIndex_
;
uint32_t
noteIndex_
;
MOZ_MUST_USE
bool
ensureCache
(
BytecodeEmitter
*
bce
)
{
return
nameCache_
.
acquire
(
bce
-
>
cx
)
;
}
template
<
typename
BindingIter
>
MOZ_MUST_USE
bool
checkSlotLimits
(
BytecodeEmitter
*
bce
const
BindingIter
&
bi
)
{
if
(
bi
.
nextFrameSlot
(
)
>
=
LOCALNO_LIMIT
|
|
bi
.
nextEnvironmentSlot
(
)
>
=
ENVCOORD_SLOT_LIMIT
)
{
return
bce
-
>
reportError
(
nullptr
JSMSG_TOO_MANY_LOCALS
)
;
}
return
true
;
}
MOZ_MUST_USE
bool
checkEnvironmentChainLength
(
BytecodeEmitter
*
bce
)
{
uint32_t
hops
;
if
(
EmitterScope
*
emitterScope
=
enclosing
(
&
bce
)
)
hops
=
emitterScope
-
>
environmentChainLength_
;
else
hops
=
bce
-
>
sc
-
>
compilationEnclosingScope
(
)
-
>
environmentChainLength
(
)
;
if
(
hops
>
=
ENVCOORD_HOPS_LIMIT
-
1
)
return
bce
-
>
reportError
(
nullptr
JSMSG_TOO_DEEP
js_function_str
)
;
environmentChainLength_
=
mozilla
:
:
AssertedCast
<
uint8_t
>
(
hops
+
1
)
;
return
true
;
}
void
updateFrameFixedSlots
(
BytecodeEmitter
*
bce
const
BindingIter
&
bi
)
{
nextFrameSlot_
=
bi
.
nextFrameSlot
(
)
;
if
(
nextFrameSlot_
>
bce
-
>
maxFixedSlots
)
bce
-
>
maxFixedSlots
=
nextFrameSlot_
;
MOZ_ASSERT_IF
(
bce
-
>
sc
-
>
isFunctionBox
(
)
&
&
bce
-
>
sc
-
>
asFunctionBox
(
)
-
>
isGenerator
(
)
bce
-
>
maxFixedSlots
=
=
0
)
;
}
MOZ_MUST_USE
bool
putNameInCache
(
BytecodeEmitter
*
bce
JSAtom
*
name
NameLocation
loc
)
{
NameLocationMap
&
cache
=
*
nameCache_
;
NameLocationMap
:
:
AddPtr
p
=
cache
.
lookupForAdd
(
name
)
;
MOZ_ASSERT
(
!
p
)
;
if
(
!
cache
.
add
(
p
name
loc
)
)
{
ReportOutOfMemory
(
bce
-
>
cx
)
;
return
false
;
}
return
true
;
}
Maybe
<
NameLocation
>
lookupInCache
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
{
if
(
NameLocationMap
:
:
Ptr
p
=
nameCache_
-
>
lookup
(
name
)
)
return
Some
(
p
-
>
value
(
)
.
wrapped
)
;
if
(
fallbackFreeNameLocation_
&
&
nameCanBeFree
(
bce
name
)
)
return
fallbackFreeNameLocation_
;
return
Nothing
(
)
;
}
friend
bool
BytecodeEmitter
:
:
needsImplicitThis
(
)
;
EmitterScope
*
enclosing
(
BytecodeEmitter
*
*
bce
)
const
{
if
(
EmitterScope
*
inFrame
=
enclosingInFrame
(
)
)
return
inFrame
;
if
(
(
*
bce
)
-
>
parent
)
{
*
bce
=
(
*
bce
)
-
>
parent
;
return
(
*
bce
)
-
>
innermostEmitterScope
;
}
return
nullptr
;
}
Scope
*
enclosingScope
(
BytecodeEmitter
*
bce
)
const
{
if
(
EmitterScope
*
es
=
enclosing
(
&
bce
)
)
return
es
-
>
scope
(
bce
)
;
return
bce
-
>
sc
-
>
compilationEnclosingScope
(
)
;
}
static
bool
nameCanBeFree
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
{
return
name
!
=
bce
-
>
cx
-
>
names
(
)
.
dotGenerator
;
}
static
NameLocation
searchInEnclosingScope
(
JSAtom
*
name
Scope
*
scope
uint8_t
hops
)
;
NameLocation
searchAndCache
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
;
template
<
typename
ScopeCreator
>
MOZ_MUST_USE
bool
internScope
(
BytecodeEmitter
*
bce
ScopeCreator
createScope
)
;
template
<
typename
ScopeCreator
>
MOZ_MUST_USE
bool
internBodyScope
(
BytecodeEmitter
*
bce
ScopeCreator
createScope
)
;
MOZ_MUST_USE
bool
appendScopeNote
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
deadZoneFrameSlotRange
(
BytecodeEmitter
*
bce
uint32_t
slotStart
uint32_t
slotEnd
)
;
public
:
explicit
EmitterScope
(
BytecodeEmitter
*
bce
)
:
Nestable
<
EmitterScope
>
(
&
bce
-
>
innermostEmitterScope
)
nameCache_
(
bce
-
>
cx
-
>
frontendCollectionPool
(
)
)
hasEnvironment_
(
false
)
environmentChainLength_
(
0
)
nextFrameSlot_
(
0
)
scopeIndex_
(
ScopeNote
:
:
NoScopeIndex
)
noteIndex_
(
ScopeNote
:
:
NoScopeNoteIndex
)
{
}
void
dump
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
enterLexical
(
BytecodeEmitter
*
bce
ScopeKind
kind
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
;
MOZ_MUST_USE
bool
enterNamedLambda
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
;
MOZ_MUST_USE
bool
enterComprehensionFor
(
BytecodeEmitter
*
bce
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
;
MOZ_MUST_USE
bool
enterFunction
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
;
MOZ_MUST_USE
bool
enterFunctionExtraBodyVar
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
;
MOZ_MUST_USE
bool
enterParameterExpressionVar
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
enterGlobal
(
BytecodeEmitter
*
bce
GlobalSharedContext
*
globalsc
)
;
MOZ_MUST_USE
bool
enterEval
(
BytecodeEmitter
*
bce
EvalSharedContext
*
evalsc
)
;
MOZ_MUST_USE
bool
enterModule
(
BytecodeEmitter
*
module
ModuleSharedContext
*
modulesc
)
;
MOZ_MUST_USE
bool
enterWith
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
deadZoneFrameSlots
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
leave
(
BytecodeEmitter
*
bce
bool
nonLocal
=
false
)
;
uint32_t
index
(
)
const
{
MOZ_ASSERT
(
scopeIndex_
!
=
ScopeNote
:
:
NoScopeIndex
"
Did
you
forget
to
intern
a
Scope
?
"
)
;
return
scopeIndex_
;
}
uint32_t
noteIndex
(
)
const
{
return
noteIndex_
;
}
Scope
*
scope
(
const
BytecodeEmitter
*
bce
)
const
{
return
bce
-
>
scopeList
.
vector
[
index
(
)
]
;
}
bool
hasEnvironment
(
)
const
{
return
hasEnvironment_
;
}
uint32_t
frameSlotStart
(
)
const
{
if
(
EmitterScope
*
inFrame
=
enclosingInFrame
(
)
)
return
inFrame
-
>
nextFrameSlot_
;
return
0
;
}
uint32_t
frameSlotEnd
(
)
const
{
return
nextFrameSlot_
;
}
uint32_t
numFrameSlots
(
)
const
{
return
frameSlotEnd
(
)
-
frameSlotStart
(
)
;
}
EmitterScope
*
enclosingInFrame
(
)
const
{
return
Nestable
<
EmitterScope
>
:
:
enclosing
(
)
;
}
NameLocation
lookup
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
{
if
(
Maybe
<
NameLocation
>
loc
=
lookupInCache
(
bce
name
)
)
return
*
loc
;
return
searchAndCache
(
bce
name
)
;
}
Maybe
<
NameLocation
>
locationBoundInScope
(
BytecodeEmitter
*
bce
JSAtom
*
name
EmitterScope
*
target
)
;
}
;
void
BytecodeEmitter
:
:
EmitterScope
:
:
dump
(
BytecodeEmitter
*
bce
)
{
fprintf
(
stdout
"
EmitterScope
[
%
s
]
%
p
\
n
"
ScopeKindString
(
scope
(
bce
)
-
>
kind
(
)
)
this
)
;
for
(
NameLocationMap
:
:
Range
r
=
nameCache_
-
>
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
const
NameLocation
&
l
=
r
.
front
(
)
.
value
(
)
;
JSAutoByteString
bytes
;
if
(
!
AtomToPrintableString
(
bce
-
>
cx
r
.
front
(
)
.
key
(
)
&
bytes
)
)
return
;
if
(
l
.
kind
(
)
!
=
NameLocation
:
:
Kind
:
:
Dynamic
)
fprintf
(
stdout
"
%
s
%
s
"
BindingKindString
(
l
.
bindingKind
(
)
)
bytes
.
ptr
(
)
)
;
else
fprintf
(
stdout
"
%
s
"
bytes
.
ptr
(
)
)
;
switch
(
l
.
kind
(
)
)
{
case
NameLocation
:
:
Kind
:
:
Dynamic
:
fprintf
(
stdout
"
dynamic
\
n
"
)
;
break
;
case
NameLocation
:
:
Kind
:
:
Global
:
fprintf
(
stdout
"
global
\
n
"
)
;
break
;
case
NameLocation
:
:
Kind
:
:
Intrinsic
:
fprintf
(
stdout
"
intrinsic
\
n
"
)
;
break
;
case
NameLocation
:
:
Kind
:
:
NamedLambdaCallee
:
fprintf
(
stdout
"
named
lambda
callee
\
n
"
)
;
break
;
case
NameLocation
:
:
Kind
:
:
Import
:
fprintf
(
stdout
"
import
\
n
"
)
;
break
;
case
NameLocation
:
:
Kind
:
:
ArgumentSlot
:
fprintf
(
stdout
"
arg
slot
=
%
u
\
n
"
l
.
argumentSlot
(
)
)
;
break
;
case
NameLocation
:
:
Kind
:
:
FrameSlot
:
fprintf
(
stdout
"
frame
slot
=
%
u
\
n
"
l
.
frameSlot
(
)
)
;
break
;
case
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
:
fprintf
(
stdout
"
environment
hops
=
%
u
slot
=
%
u
\
n
"
l
.
environmentCoordinate
(
)
.
hops
(
)
l
.
environmentCoordinate
(
)
.
slot
(
)
)
;
break
;
case
NameLocation
:
:
Kind
:
:
DynamicAnnexBVar
:
fprintf
(
stdout
"
dynamic
annex
b
var
\
n
"
)
;
break
;
}
}
fprintf
(
stdout
"
\
n
"
)
;
}
template
<
typename
ScopeCreator
>
bool
BytecodeEmitter
:
:
EmitterScope
:
:
internScope
(
BytecodeEmitter
*
bce
ScopeCreator
createScope
)
{
RootedScope
enclosing
(
bce
-
>
cx
enclosingScope
(
bce
)
)
;
Scope
*
scope
=
createScope
(
bce
-
>
cx
enclosing
)
;
if
(
!
scope
)
return
false
;
hasEnvironment_
=
scope
-
>
hasEnvironment
(
)
;
scopeIndex_
=
bce
-
>
scopeList
.
length
(
)
;
return
bce
-
>
scopeList
.
append
(
scope
)
;
}
template
<
typename
ScopeCreator
>
bool
BytecodeEmitter
:
:
EmitterScope
:
:
internBodyScope
(
BytecodeEmitter
*
bce
ScopeCreator
createScope
)
{
MOZ_ASSERT
(
bce
-
>
bodyScopeIndex
=
=
UINT32_MAX
"
There
can
be
only
one
body
scope
"
)
;
bce
-
>
bodyScopeIndex
=
bce
-
>
scopeList
.
length
(
)
;
return
internScope
(
bce
createScope
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
appendScopeNote
(
BytecodeEmitter
*
bce
)
{
MOZ_ASSERT
(
ScopeKindIsInBody
(
scope
(
bce
)
-
>
kind
(
)
)
&
&
enclosingInFrame
(
)
"
Scope
notes
are
not
needed
for
body
-
level
scopes
.
"
)
;
noteIndex_
=
bce
-
>
scopeNoteList
.
length
(
)
;
return
bce
-
>
scopeNoteList
.
append
(
index
(
)
bce
-
>
offset
(
)
bce
-
>
inPrologue
(
)
enclosingInFrame
(
)
?
enclosingInFrame
(
)
-
>
noteIndex
(
)
:
ScopeNote
:
:
NoScopeNoteIndex
)
;
}
#
ifdef
DEBUG
static
bool
NameIsOnEnvironment
(
Scope
*
scope
JSAtom
*
name
)
{
for
(
BindingIter
bi
(
scope
)
;
bi
;
bi
+
+
)
{
if
(
bi
.
name
(
)
=
=
name
)
{
BindingLocation
:
:
Kind
kind
=
bi
.
location
(
)
.
kind
(
)
;
if
(
bi
.
hasArgumentSlot
(
)
)
{
JSScript
*
script
=
scope
-
>
as
<
FunctionScope
>
(
)
.
script
(
)
;
if
(
!
script
-
>
strict
(
)
&
&
!
script
-
>
functionHasParameterExprs
(
)
)
{
for
(
BindingIter
bi2
(
bi
)
;
bi2
&
&
bi2
.
hasArgumentSlot
(
)
;
bi2
+
+
)
{
if
(
bi2
.
name
(
)
=
=
name
)
kind
=
bi2
.
location
(
)
.
kind
(
)
;
}
}
}
return
kind
=
=
BindingLocation
:
:
Kind
:
:
Global
|
|
kind
=
=
BindingLocation
:
:
Kind
:
:
Environment
|
|
kind
=
=
BindingLocation
:
:
Kind
:
:
Import
;
}
}
return
true
;
}
#
endif
NameLocation
BytecodeEmitter
:
:
EmitterScope
:
:
searchInEnclosingScope
(
JSAtom
*
name
Scope
*
scope
uint8_t
hops
)
{
for
(
ScopeIter
si
(
scope
)
;
si
;
si
+
+
)
{
MOZ_ASSERT
(
NameIsOnEnvironment
(
si
.
scope
(
)
name
)
)
;
bool
hasEnv
=
si
.
hasSyntacticEnvironment
(
)
;
switch
(
si
.
kind
(
)
)
{
case
ScopeKind
:
:
Function
:
if
(
hasEnv
)
{
JSScript
*
script
=
si
.
scope
(
)
-
>
as
<
FunctionScope
>
(
)
.
script
(
)
;
if
(
script
-
>
funHasExtensibleScope
(
)
)
return
NameLocation
:
:
Dynamic
(
)
;
for
(
BindingIter
bi
(
si
.
scope
(
)
)
;
bi
;
bi
+
+
)
{
if
(
bi
.
name
(
)
!
=
name
)
continue
;
BindingLocation
bindLoc
=
bi
.
location
(
)
;
if
(
bi
.
hasArgumentSlot
(
)
&
&
!
script
-
>
strict
(
)
&
&
!
script
-
>
functionHasParameterExprs
(
)
)
{
for
(
BindingIter
bi2
(
bi
)
;
bi2
&
&
bi2
.
hasArgumentSlot
(
)
;
bi2
+
+
)
{
if
(
bi2
.
name
(
)
=
=
name
)
bindLoc
=
bi2
.
location
(
)
;
}
}
MOZ_ASSERT
(
bindLoc
.
kind
(
)
=
=
BindingLocation
:
:
Kind
:
:
Environment
)
;
return
NameLocation
:
:
EnvironmentCoordinate
(
bi
.
kind
(
)
hops
bindLoc
.
slot
(
)
)
;
}
}
break
;
case
ScopeKind
:
:
FunctionBodyVar
:
case
ScopeKind
:
:
ParameterExpressionVar
:
case
ScopeKind
:
:
Lexical
:
case
ScopeKind
:
:
NamedLambda
:
case
ScopeKind
:
:
StrictNamedLambda
:
case
ScopeKind
:
:
SimpleCatch
:
case
ScopeKind
:
:
Catch
:
if
(
hasEnv
)
{
for
(
BindingIter
bi
(
si
.
scope
(
)
)
;
bi
;
bi
+
+
)
{
if
(
bi
.
name
(
)
!
=
name
)
continue
;
BindingLocation
bindLoc
=
bi
.
location
(
)
;
MOZ_ASSERT
(
bindLoc
.
kind
(
)
=
=
BindingLocation
:
:
Kind
:
:
Environment
)
;
return
NameLocation
:
:
EnvironmentCoordinate
(
bi
.
kind
(
)
hops
bindLoc
.
slot
(
)
)
;
}
}
break
;
case
ScopeKind
:
:
Module
:
if
(
hasEnv
)
{
for
(
BindingIter
bi
(
si
.
scope
(
)
)
;
bi
;
bi
+
+
)
{
if
(
bi
.
name
(
)
!
=
name
)
continue
;
BindingLocation
bindLoc
=
bi
.
location
(
)
;
if
(
bindLoc
.
kind
(
)
=
=
BindingLocation
:
:
Kind
:
:
Import
)
{
MOZ_ASSERT
(
si
.
kind
(
)
=
=
ScopeKind
:
:
Module
)
;
return
NameLocation
:
:
Import
(
)
;
}
MOZ_ASSERT
(
bindLoc
.
kind
(
)
=
=
BindingLocation
:
:
Kind
:
:
Environment
)
;
return
NameLocation
:
:
EnvironmentCoordinate
(
bi
.
kind
(
)
hops
bindLoc
.
slot
(
)
)
;
}
}
break
;
case
ScopeKind
:
:
Eval
:
case
ScopeKind
:
:
StrictEval
:
if
(
!
hasEnv
&
&
si
.
scope
(
)
-
>
enclosing
(
)
-
>
is
<
GlobalScope
>
(
)
)
return
NameLocation
:
:
Global
(
BindingKind
:
:
Var
)
;
return
NameLocation
:
:
Dynamic
(
)
;
case
ScopeKind
:
:
Global
:
return
NameLocation
:
:
Global
(
BindingKind
:
:
Var
)
;
case
ScopeKind
:
:
With
:
case
ScopeKind
:
:
NonSyntactic
:
return
NameLocation
:
:
Dynamic
(
)
;
}
if
(
hasEnv
)
{
MOZ_ASSERT
(
hops
<
ENVCOORD_HOPS_LIMIT
-
1
)
;
hops
+
+
;
}
}
MOZ_CRASH
(
"
Malformed
scope
chain
"
)
;
}
NameLocation
BytecodeEmitter
:
:
EmitterScope
:
:
searchAndCache
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
{
Maybe
<
NameLocation
>
loc
;
uint8_t
hops
=
hasEnvironment
(
)
?
1
:
0
;
DebugOnly
<
bool
>
inCurrentScript
=
enclosingInFrame
(
)
;
for
(
EmitterScope
*
es
=
enclosing
(
&
bce
)
;
es
;
es
=
es
-
>
enclosing
(
&
bce
)
)
{
loc
=
es
-
>
lookupInCache
(
bce
name
)
;
if
(
loc
)
{
if
(
loc
-
>
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
)
*
loc
=
loc
-
>
addHops
(
hops
)
;
break
;
}
if
(
es
-
>
hasEnvironment
(
)
)
hops
+
+
;
#
ifdef
DEBUG
if
(
!
es
-
>
enclosingInFrame
(
)
)
inCurrentScript
=
false
;
#
endif
}
if
(
!
loc
)
{
inCurrentScript
=
false
;
loc
=
Some
(
searchInEnclosingScope
(
name
bce
-
>
sc
-
>
compilationEnclosingScope
(
)
hops
)
)
;
}
MOZ_ASSERT_IF
(
!
inCurrentScript
loc
-
>
kind
(
)
!
=
NameLocation
:
:
Kind
:
:
FrameSlot
)
;
if
(
!
putNameInCache
(
bce
name
*
loc
)
)
bce
-
>
cx
-
>
recoverFromOutOfMemory
(
)
;
return
*
loc
;
}
Maybe
<
NameLocation
>
BytecodeEmitter
:
:
EmitterScope
:
:
locationBoundInScope
(
BytecodeEmitter
*
bce
JSAtom
*
name
EmitterScope
*
target
)
{
uint8_t
extraHops
=
0
;
for
(
EmitterScope
*
es
=
this
;
es
!
=
target
;
es
=
es
-
>
enclosingInFrame
(
)
)
{
if
(
es
-
>
hasEnvironment
(
)
)
extraHops
+
+
;
}
Maybe
<
NameLocation
>
loc
;
if
(
NameLocationMap
:
:
Ptr
p
=
target
-
>
nameCache_
-
>
lookup
(
name
)
)
{
NameLocation
l
=
p
-
>
value
(
)
.
wrapped
;
if
(
l
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
)
loc
=
Some
(
l
.
addHops
(
extraHops
)
)
;
else
loc
=
Some
(
l
)
;
}
return
loc
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
deadZoneFrameSlotRange
(
BytecodeEmitter
*
bce
uint32_t
slotStart
uint32_t
slotEnd
)
{
if
(
slotStart
!
=
slotEnd
)
{
if
(
!
bce
-
>
emit1
(
JSOP_UNINITIALIZED
)
)
return
false
;
for
(
uint32_t
slot
=
slotStart
;
slot
<
slotEnd
;
slot
+
+
)
{
if
(
!
bce
-
>
emitLocalOp
(
JSOP_INITLEXICAL
slot
)
)
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
deadZoneFrameSlots
(
BytecodeEmitter
*
bce
)
{
return
deadZoneFrameSlotRange
(
bce
frameSlotStart
(
)
frameSlotEnd
(
)
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterLexical
(
BytecodeEmitter
*
bce
ScopeKind
kind
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
{
MOZ_ASSERT
(
kind
!
=
ScopeKind
:
:
NamedLambda
&
&
kind
!
=
ScopeKind
:
:
StrictNamedLambda
)
;
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
if
(
bce
-
>
sc
-
>
allBindingsClosedOver
(
)
)
MarkAllBindingsClosedOver
(
*
bindings
)
;
TDZCheckCache
*
tdzCache
=
bce
-
>
innermostTDZCheckCache
;
uint32_t
firstFrameSlot
=
frameSlotStart
(
)
;
BindingIter
bi
(
*
bindings
firstFrameSlot
false
)
;
for
(
;
bi
;
bi
+
+
)
{
if
(
!
checkSlotLimits
(
bce
bi
)
)
return
false
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
if
(
!
putNameInCache
(
bce
bi
.
name
(
)
loc
)
)
return
false
;
if
(
!
tdzCache
-
>
noteTDZCheck
(
bce
bi
.
name
(
)
CheckTDZ
)
)
return
false
;
}
updateFrameFixedSlots
(
bce
bi
)
;
auto
createScope
=
[
kind
bindings
firstFrameSlot
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
return
LexicalScope
:
:
create
(
cx
kind
bindings
firstFrameSlot
enclosing
)
;
}
;
if
(
!
internScope
(
bce
createScope
)
)
return
false
;
if
(
ScopeKindIsInBody
(
kind
)
&
&
hasEnvironment
(
)
)
{
if
(
!
bce
-
>
emitInternedScopeOp
(
index
(
)
JSOP_PUSHLEXICALENV
)
)
return
false
;
}
if
(
!
appendScopeNote
(
bce
)
)
return
false
;
if
(
!
deadZoneFrameSlotRange
(
bce
firstFrameSlot
frameSlotEnd
(
)
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterNamedLambda
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
MOZ_ASSERT
(
funbox
-
>
namedLambdaBindings
(
)
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
if
(
funbox
-
>
allBindingsClosedOver
(
)
)
MarkAllBindingsClosedOver
(
*
funbox
-
>
namedLambdaBindings
(
)
)
;
BindingIter
bi
(
*
funbox
-
>
namedLambdaBindings
(
)
LOCALNO_LIMIT
true
)
;
MOZ_ASSERT
(
bi
.
kind
(
)
=
=
BindingKind
:
:
NamedLambdaCallee
)
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
if
(
!
putNameInCache
(
bce
bi
.
name
(
)
loc
)
)
return
false
;
bi
+
+
;
MOZ_ASSERT
(
!
bi
"
There
should
be
exactly
one
binding
in
a
NamedLambda
scope
"
)
;
auto
createScope
=
[
funbox
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
ScopeKind
scopeKind
=
funbox
-
>
strict
(
)
?
ScopeKind
:
:
StrictNamedLambda
:
ScopeKind
:
:
NamedLambda
;
return
LexicalScope
:
:
create
(
cx
scopeKind
funbox
-
>
namedLambdaBindings
(
)
LOCALNO_LIMIT
enclosing
)
;
}
;
if
(
!
internScope
(
bce
createScope
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterComprehensionFor
(
BytecodeEmitter
*
bce
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
{
if
(
!
enterLexical
(
bce
ScopeKind
:
:
Lexical
bindings
)
)
return
false
;
auto
nop
=
[
]
(
BytecodeEmitter
*
const
NameLocation
&
bool
)
{
return
true
;
}
;
if
(
!
bce
-
>
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
RootedAtom
name
(
bce
-
>
cx
)
;
for
(
BindingIter
bi
(
*
bindings
frameSlotStart
(
)
false
)
;
bi
;
bi
+
+
)
{
name
=
bi
.
name
(
)
;
if
(
!
bce
-
>
emitInitializeName
(
name
nop
)
)
return
false
;
}
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterParameterExpressionVar
(
BytecodeEmitter
*
bce
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
uint32_t
firstFrameSlot
=
frameSlotStart
(
)
;
auto
createScope
=
[
firstFrameSlot
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
return
VarScope
:
:
create
(
cx
ScopeKind
:
:
ParameterExpressionVar
nullptr
firstFrameSlot
true
enclosing
)
;
}
;
if
(
!
internScope
(
bce
createScope
)
)
return
false
;
MOZ_ASSERT
(
hasEnvironment
(
)
)
;
if
(
!
bce
-
>
emitInternedScopeOp
(
index
(
)
JSOP_PUSHVARENV
)
)
return
false
;
if
(
!
appendScopeNote
(
bce
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterFunction
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
if
(
!
funbox
-
>
hasExtraBodyVarScope
(
)
)
bce
-
>
setVarEmitterScope
(
this
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
auto
bindings
=
funbox
-
>
functionScopeBindings
(
)
;
Maybe
<
uint32_t
>
lastLexicalSlot
;
if
(
bindings
)
{
NameLocationMap
&
cache
=
*
nameCache_
;
BindingIter
bi
(
*
bindings
funbox
-
>
hasParameterExprs
)
;
for
(
;
bi
;
bi
+
+
)
{
if
(
!
checkSlotLimits
(
bce
bi
)
)
return
false
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
NameLocationMap
:
:
AddPtr
p
=
cache
.
lookupForAdd
(
bi
.
name
(
)
)
;
if
(
p
)
{
MOZ_ASSERT
(
bi
.
kind
(
)
=
=
BindingKind
:
:
FormalParameter
)
;
MOZ_ASSERT
(
!
funbox
-
>
hasDestructuringArgs
)
;
MOZ_ASSERT
(
!
funbox
-
>
hasRest
(
)
)
;
p
-
>
value
(
)
=
loc
;
continue
;
}
if
(
!
cache
.
add
(
p
bi
.
name
(
)
loc
)
)
{
ReportOutOfMemory
(
bce
-
>
cx
)
;
return
false
;
}
}
updateFrameFixedSlots
(
bce
bi
)
;
}
else
{
nextFrameSlot_
=
0
;
}
if
(
!
funbox
-
>
hasParameterExprs
&
&
funbox
-
>
hasExtensibleScope
(
)
)
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
if
(
funbox
-
>
hasParameterExprs
&
&
nextFrameSlot_
)
{
uint32_t
paramFrameSlotEnd
=
0
;
for
(
BindingIter
bi
(
*
bindings
true
)
;
bi
;
bi
+
+
)
{
if
(
!
BindingKindIsLexical
(
bi
.
kind
(
)
)
)
break
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
FrameSlot
)
{
MOZ_ASSERT
(
paramFrameSlotEnd
<
=
loc
.
frameSlot
(
)
)
;
paramFrameSlotEnd
=
loc
.
frameSlot
(
)
+
1
;
}
}
if
(
!
deadZoneFrameSlotRange
(
bce
0
paramFrameSlotEnd
)
)
return
false
;
}
auto
createScope
=
[
funbox
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
RootedFunction
fun
(
cx
funbox
-
>
function
(
)
)
;
return
FunctionScope
:
:
create
(
cx
funbox
-
>
functionScopeBindings
(
)
funbox
-
>
hasParameterExprs
funbox
-
>
needsCallObjectRegardlessOfBindings
(
)
fun
enclosing
)
;
}
;
if
(
!
internBodyScope
(
bce
createScope
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterFunctionExtraBodyVar
(
BytecodeEmitter
*
bce
FunctionBox
*
funbox
)
{
MOZ_ASSERT
(
funbox
-
>
hasParameterExprs
)
;
MOZ_ASSERT
(
funbox
-
>
extraVarScopeBindings
(
)
|
|
funbox
-
>
needsExtraBodyVarEnvironmentRegardlessOfBindings
(
)
)
;
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
bce
-
>
setVarEmitterScope
(
this
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
uint32_t
firstFrameSlot
=
frameSlotStart
(
)
;
if
(
auto
bindings
=
funbox
-
>
extraVarScopeBindings
(
)
)
{
BindingIter
bi
(
*
bindings
firstFrameSlot
)
;
for
(
;
bi
;
bi
+
+
)
{
if
(
!
checkSlotLimits
(
bce
bi
)
)
return
false
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
if
(
!
putNameInCache
(
bce
bi
.
name
(
)
loc
)
)
return
false
;
}
updateFrameFixedSlots
(
bce
bi
)
;
}
else
{
nextFrameSlot_
=
firstFrameSlot
;
}
if
(
funbox
-
>
hasExtensibleScope
(
)
)
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
auto
createScope
=
[
funbox
firstFrameSlot
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
return
VarScope
:
:
create
(
cx
ScopeKind
:
:
FunctionBodyVar
funbox
-
>
extraVarScopeBindings
(
)
firstFrameSlot
funbox
-
>
needsExtraBodyVarEnvironmentRegardlessOfBindings
(
)
enclosing
)
;
}
;
if
(
!
internScope
(
bce
createScope
)
)
return
false
;
if
(
hasEnvironment
(
)
)
{
if
(
!
bce
-
>
emitInternedScopeOp
(
index
(
)
JSOP_PUSHVARENV
)
)
return
false
;
}
if
(
!
appendScopeNote
(
bce
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
class
DynamicBindingIter
:
public
BindingIter
{
public
:
explicit
DynamicBindingIter
(
GlobalSharedContext
*
sc
)
:
BindingIter
(
*
sc
-
>
bindings
)
{
}
explicit
DynamicBindingIter
(
EvalSharedContext
*
sc
)
:
BindingIter
(
*
sc
-
>
bindings
false
)
{
MOZ_ASSERT
(
!
sc
-
>
strict
(
)
)
;
}
JSOp
bindingOp
(
)
const
{
switch
(
kind
(
)
)
{
case
BindingKind
:
:
Var
:
return
JSOP_DEFVAR
;
case
BindingKind
:
:
Let
:
return
JSOP_DEFLET
;
case
BindingKind
:
:
Const
:
return
JSOP_DEFCONST
;
default
:
MOZ_CRASH
(
"
Bad
BindingKind
"
)
;
}
}
}
;
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterGlobal
(
BytecodeEmitter
*
bce
GlobalSharedContext
*
globalsc
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
bce
-
>
setVarEmitterScope
(
this
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
if
(
bce
-
>
emitterMode
=
=
BytecodeEmitter
:
:
SelfHosting
)
{
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Intrinsic
(
)
)
;
auto
createScope
=
[
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
MOZ_ASSERT
(
!
enclosing
)
;
return
&
cx
-
>
global
(
)
-
>
emptyGlobalScope
(
)
;
}
;
return
internBodyScope
(
bce
createScope
)
;
}
if
(
globalsc
-
>
bindings
)
{
for
(
DynamicBindingIter
bi
(
globalsc
)
;
bi
;
bi
+
+
)
{
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
JSAtom
*
name
=
bi
.
name
(
)
;
if
(
!
putNameInCache
(
bce
name
loc
)
)
return
false
;
if
(
bi
.
isTopLevelFunction
(
)
)
continue
;
if
(
!
bce
-
>
emitAtomOp
(
name
bi
.
bindingOp
(
)
)
)
return
false
;
}
}
if
(
globalsc
-
>
scopeKind
(
)
=
=
ScopeKind
:
:
Global
)
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Global
(
BindingKind
:
:
Var
)
)
;
else
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
auto
createScope
=
[
globalsc
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
MOZ_ASSERT
(
!
enclosing
)
;
return
GlobalScope
:
:
create
(
cx
globalsc
-
>
scopeKind
(
)
globalsc
-
>
bindings
)
;
}
;
return
internBodyScope
(
bce
createScope
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterEval
(
BytecodeEmitter
*
bce
EvalSharedContext
*
evalsc
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
bce
-
>
setVarEmitterScope
(
this
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
auto
createScope
=
[
evalsc
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
ScopeKind
scopeKind
=
evalsc
-
>
strict
(
)
?
ScopeKind
:
:
StrictEval
:
ScopeKind
:
:
Eval
;
return
EvalScope
:
:
create
(
cx
scopeKind
evalsc
-
>
bindings
enclosing
)
;
}
;
if
(
!
internBodyScope
(
bce
createScope
)
)
return
false
;
if
(
hasEnvironment
(
)
)
{
if
(
!
bce
-
>
emitInternedScopeOp
(
index
(
)
JSOP_PUSHVARENV
)
)
return
false
;
}
else
{
if
(
!
hasEnvironment
(
)
&
&
evalsc
-
>
bindings
)
{
for
(
DynamicBindingIter
bi
(
evalsc
)
;
bi
;
bi
+
+
)
{
MOZ_ASSERT
(
bi
.
bindingOp
(
)
=
=
JSOP_DEFVAR
)
;
if
(
bi
.
isTopLevelFunction
(
)
)
continue
;
if
(
!
bce
-
>
emitAtomOp
(
bi
.
name
(
)
JSOP_DEFVAR
)
)
return
false
;
}
}
if
(
scope
(
bce
)
-
>
enclosing
(
)
-
>
is
<
GlobalScope
>
(
)
)
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Global
(
BindingKind
:
:
Var
)
)
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterModule
(
BytecodeEmitter
*
bce
ModuleSharedContext
*
modulesc
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
bce
-
>
setVarEmitterScope
(
this
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
TDZCheckCache
*
tdzCache
=
bce
-
>
innermostTDZCheckCache
;
Maybe
<
uint32_t
>
firstLexicalFrameSlot
;
if
(
ModuleScope
:
:
Data
*
bindings
=
modulesc
-
>
bindings
)
{
BindingIter
bi
(
*
bindings
)
;
for
(
;
bi
;
bi
+
+
)
{
if
(
!
checkSlotLimits
(
bce
bi
)
)
return
false
;
NameLocation
loc
=
NameLocation
:
:
fromBinding
(
bi
.
kind
(
)
bi
.
location
(
)
)
;
if
(
!
putNameInCache
(
bce
bi
.
name
(
)
loc
)
)
return
false
;
if
(
BindingKindIsLexical
(
bi
.
kind
(
)
)
)
{
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
FrameSlot
&
&
!
firstLexicalFrameSlot
)
firstLexicalFrameSlot
=
Some
(
loc
.
frameSlot
(
)
)
;
if
(
!
tdzCache
-
>
noteTDZCheck
(
bce
bi
.
name
(
)
CheckTDZ
)
)
return
false
;
}
}
updateFrameFixedSlots
(
bce
bi
)
;
}
else
{
nextFrameSlot_
=
0
;
}
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Global
(
BindingKind
:
:
Var
)
)
;
if
(
firstLexicalFrameSlot
)
{
if
(
!
deadZoneFrameSlotRange
(
bce
*
firstLexicalFrameSlot
frameSlotEnd
(
)
)
)
return
false
;
}
auto
createScope
=
[
modulesc
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
return
ModuleScope
:
:
create
(
cx
modulesc
-
>
bindings
modulesc
-
>
module
(
)
enclosing
)
;
}
;
if
(
!
internBodyScope
(
bce
createScope
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
enterWith
(
BytecodeEmitter
*
bce
)
{
MOZ_ASSERT
(
this
=
=
bce
-
>
innermostEmitterScope
)
;
if
(
!
ensureCache
(
bce
)
)
return
false
;
fallbackFreeNameLocation_
=
Some
(
NameLocation
:
:
Dynamic
(
)
)
;
auto
createScope
=
[
]
(
ExclusiveContext
*
cx
HandleScope
enclosing
)
{
return
WithScope
:
:
create
(
cx
enclosing
)
;
}
;
if
(
!
internScope
(
bce
createScope
)
)
return
false
;
if
(
!
bce
-
>
emitInternedScopeOp
(
index
(
)
JSOP_ENTERWITH
)
)
return
false
;
if
(
!
appendScopeNote
(
bce
)
)
return
false
;
return
checkEnvironmentChainLength
(
bce
)
;
}
bool
BytecodeEmitter
:
:
EmitterScope
:
:
leave
(
BytecodeEmitter
*
bce
bool
nonLocal
)
{
MOZ_ASSERT_IF
(
!
nonLocal
this
=
=
bce
-
>
innermostEmitterScope
)
;
ScopeKind
kind
=
scope
(
bce
)
-
>
kind
(
)
;
switch
(
kind
)
{
case
ScopeKind
:
:
Lexical
:
case
ScopeKind
:
:
SimpleCatch
:
case
ScopeKind
:
:
Catch
:
if
(
!
bce
-
>
emit1
(
hasEnvironment
(
)
?
JSOP_POPLEXICALENV
:
JSOP_DEBUGLEAVELEXICALENV
)
)
return
false
;
break
;
case
ScopeKind
:
:
With
:
if
(
!
bce
-
>
emit1
(
JSOP_LEAVEWITH
)
)
return
false
;
break
;
case
ScopeKind
:
:
ParameterExpressionVar
:
MOZ_ASSERT
(
hasEnvironment
(
)
)
;
if
(
!
bce
-
>
emit1
(
JSOP_POPVARENV
)
)
return
false
;
break
;
case
ScopeKind
:
:
Function
:
case
ScopeKind
:
:
FunctionBodyVar
:
case
ScopeKind
:
:
NamedLambda
:
case
ScopeKind
:
:
StrictNamedLambda
:
case
ScopeKind
:
:
Eval
:
case
ScopeKind
:
:
StrictEval
:
case
ScopeKind
:
:
Global
:
case
ScopeKind
:
:
NonSyntactic
:
case
ScopeKind
:
:
Module
:
break
;
}
if
(
!
nonLocal
)
{
if
(
ScopeKindIsInBody
(
kind
)
)
{
uint32_t
offset
=
kind
=
=
ScopeKind
:
:
FunctionBodyVar
?
UINT32_MAX
:
bce
-
>
offset
(
)
;
bce
-
>
scopeNoteList
.
recordEnd
(
noteIndex_
offset
bce
-
>
inPrologue
(
)
)
;
}
}
return
true
;
}
Maybe
<
MaybeCheckTDZ
>
BytecodeEmitter
:
:
TDZCheckCache
:
:
needsTDZCheck
(
BytecodeEmitter
*
bce
JSAtom
*
name
)
{
if
(
!
ensureCache
(
bce
)
)
return
Nothing
(
)
;
CheckTDZMap
:
:
AddPtr
p
=
cache_
-
>
lookupForAdd
(
name
)
;
if
(
p
)
return
Some
(
p
-
>
value
(
)
.
wrapped
)
;
MaybeCheckTDZ
rv
=
CheckTDZ
;
for
(
TDZCheckCache
*
it
=
enclosing
(
)
;
it
;
it
=
it
-
>
enclosing
(
)
)
{
if
(
it
-
>
cache_
)
{
if
(
CheckTDZMap
:
:
Ptr
p2
=
it
-
>
cache_
-
>
lookup
(
name
)
)
{
rv
=
p2
-
>
value
(
)
;
break
;
}
}
}
if
(
!
cache_
-
>
add
(
p
name
rv
)
)
{
ReportOutOfMemory
(
bce
-
>
cx
)
;
return
Nothing
(
)
;
}
return
Some
(
rv
)
;
}
bool
BytecodeEmitter
:
:
TDZCheckCache
:
:
noteTDZCheck
(
BytecodeEmitter
*
bce
JSAtom
*
name
MaybeCheckTDZ
check
)
{
if
(
!
ensureCache
(
bce
)
)
return
false
;
CheckTDZMap
:
:
AddPtr
p
=
cache_
-
>
lookupForAdd
(
name
)
;
if
(
p
)
{
MOZ_ASSERT
(
!
check
"
TDZ
only
needs
to
be
checked
once
per
binding
per
basic
block
.
"
)
;
p
-
>
value
(
)
=
check
;
}
else
{
if
(
!
cache_
-
>
add
(
p
name
check
)
)
return
false
;
}
return
true
;
}
BytecodeEmitter
:
:
BytecodeEmitter
(
BytecodeEmitter
*
parent
Parser
<
FullParseHandler
>
*
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
uint32_t
lineNum
EmitterMode
emitterMode
)
:
sc
(
sc
)
cx
(
sc
-
>
context
)
parent
(
parent
)
script
(
cx
script
)
lazyScript
(
cx
lazyScript
)
prologue
(
cx
lineNum
)
main
(
cx
lineNum
)
current
(
&
main
)
parser
(
parser
)
atomIndices
(
cx
-
>
frontendCollectionPool
(
)
)
firstLine
(
lineNum
)
maxFixedSlots
(
0
)
maxStackDepth
(
0
)
stackDepth
(
0
)
arrayCompDepth
(
0
)
emitLevel
(
0
)
bodyScopeIndex
(
UINT32_MAX
)
varEmitterScope
(
nullptr
)
innermostNestableControl
(
nullptr
)
innermostEmitterScope
(
nullptr
)
innermostTDZCheckCache
(
nullptr
)
constList
(
cx
)
scopeList
(
cx
)
tryNoteList
(
cx
)
scopeNoteList
(
cx
)
yieldOffsetList
(
cx
)
typesetCount
(
0
)
hasSingletons
(
false
)
hasTryFinally
(
false
)
emittingRunOnceLambda
(
false
)
emitterMode
(
emitterMode
)
functionBodyEndPosSet
(
false
)
{
MOZ_ASSERT_IF
(
emitterMode
=
=
LazyFunction
lazyScript
)
;
}
BytecodeEmitter
:
:
BytecodeEmitter
(
BytecodeEmitter
*
parent
Parser
<
FullParseHandler
>
*
parser
SharedContext
*
sc
HandleScript
script
Handle
<
LazyScript
*
>
lazyScript
TokenPos
bodyPosition
EmitterMode
emitterMode
)
:
BytecodeEmitter
(
parent
parser
sc
script
lazyScript
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
bodyPosition
.
begin
)
emitterMode
)
{
setFunctionBodyEndPos
(
bodyPosition
)
;
}
bool
BytecodeEmitter
:
:
init
(
)
{
return
atomIndices
.
acquire
(
cx
)
;
}
template
<
typename
Predicate
>
BytecodeEmitter
:
:
NestableControl
*
BytecodeEmitter
:
:
findInnermostNestableControl
(
Predicate
predicate
)
const
{
return
NestableControl
:
:
findNearest
(
innermostNestableControl
predicate
)
;
}
template
<
typename
T
>
T
*
BytecodeEmitter
:
:
findInnermostNestableControl
(
)
const
{
return
NestableControl
:
:
findNearest
<
T
>
(
innermostNestableControl
)
;
}
template
<
typename
T
typename
Predicate
>
T
*
BytecodeEmitter
:
:
findInnermostNestableControl
(
Predicate
predicate
)
const
{
return
NestableControl
:
:
findNearest
<
T
>
(
innermostNestableControl
predicate
)
;
}
NameLocation
BytecodeEmitter
:
:
lookupName
(
JSAtom
*
name
)
{
return
innermostEmitterScope
-
>
lookup
(
this
name
)
;
}
Maybe
<
NameLocation
>
BytecodeEmitter
:
:
locationOfNameBoundInScope
(
JSAtom
*
name
EmitterScope
*
target
)
{
return
innermostEmitterScope
-
>
locationBoundInScope
(
this
name
target
)
;
}
Maybe
<
NameLocation
>
BytecodeEmitter
:
:
locationOfNameBoundInFunctionScope
(
JSAtom
*
name
EmitterScope
*
source
)
{
EmitterScope
*
funScope
=
source
;
while
(
!
funScope
-
>
scope
(
this
)
-
>
is
<
FunctionScope
>
(
)
)
funScope
=
funScope
-
>
enclosingInFrame
(
)
;
return
source
-
>
locationBoundInScope
(
this
name
funScope
)
;
}
bool
BytecodeEmitter
:
:
emitCheck
(
ptrdiff_t
delta
ptrdiff_t
*
offset
)
{
*
offset
=
code
(
)
.
length
(
)
;
if
(
code
(
)
.
capacity
(
)
=
=
0
&
&
!
code
(
)
.
reserve
(
1024
)
)
return
false
;
if
(
!
code
(
)
.
growBy
(
delta
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
void
BytecodeEmitter
:
:
updateDepth
(
ptrdiff_t
target
)
{
jsbytecode
*
pc
=
code
(
target
)
;
int
nuses
=
StackUses
(
nullptr
pc
)
;
int
ndefs
=
StackDefs
(
nullptr
pc
)
;
stackDepth
-
=
nuses
;
MOZ_ASSERT
(
stackDepth
>
=
0
)
;
stackDepth
+
=
ndefs
;
if
(
(
uint32_t
)
stackDepth
>
maxStackDepth
)
maxStackDepth
=
stackDepth
;
}
#
ifdef
DEBUG
bool
BytecodeEmitter
:
:
checkStrictOrSloppy
(
JSOp
op
)
{
if
(
IsCheckStrictOp
(
op
)
&
&
!
sc
-
>
strict
(
)
)
return
false
;
if
(
IsCheckSloppyOp
(
op
)
&
&
sc
-
>
strict
(
)
)
return
false
;
return
true
;
}
#
endif
bool
BytecodeEmitter
:
:
emit1
(
JSOp
op
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
1
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emit2
(
JSOp
op
uint8_t
op1
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
2
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
code
[
1
]
=
jsbytecode
(
op1
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emit3
(
JSOp
op
jsbytecode
op1
jsbytecode
op2
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
MOZ_ASSERT
(
!
IsArgOp
(
op
)
)
;
MOZ_ASSERT
(
!
IsLocalOp
(
op
)
)
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
3
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
code
[
1
]
=
op1
;
code
[
2
]
=
op2
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitN
(
JSOp
op
size_t
extra
ptrdiff_t
*
offset
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
ptrdiff_t
length
=
1
+
ptrdiff_t
(
extra
)
;
ptrdiff_t
off
;
if
(
!
emitCheck
(
length
&
off
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
off
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
if
(
CodeSpec
[
op
]
.
nuses
>
=
0
)
updateDepth
(
off
)
;
if
(
offset
)
*
offset
=
off
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitJumpTarget
(
JumpTarget
*
target
)
{
ptrdiff_t
off
=
offset
(
)
;
if
(
off
=
=
current
-
>
lastTarget
.
offset
+
ptrdiff_t
(
JSOP_JUMPTARGET_LENGTH
)
)
{
target
-
>
offset
=
current
-
>
lastTarget
.
offset
;
return
true
;
}
target
-
>
offset
=
off
;
current
-
>
lastTarget
.
offset
=
off
;
if
(
!
emit1
(
JSOP_JUMPTARGET
)
)
return
false
;
return
true
;
}
void
JumpList
:
:
push
(
jsbytecode
*
code
ptrdiff_t
jumpOffset
)
{
SET_JUMP_OFFSET
(
&
code
[
jumpOffset
]
offset
-
jumpOffset
)
;
offset
=
jumpOffset
;
}
void
JumpList
:
:
patchAll
(
jsbytecode
*
code
JumpTarget
target
)
{
ptrdiff_t
delta
;
for
(
ptrdiff_t
jumpOffset
=
offset
;
jumpOffset
!
=
-
1
;
jumpOffset
+
=
delta
)
{
jsbytecode
*
pc
=
&
code
[
jumpOffset
]
;
MOZ_ASSERT
(
IsJumpOpcode
(
JSOp
(
*
pc
)
)
|
|
JSOp
(
*
pc
)
=
=
JSOP_LABEL
)
;
delta
=
GET_JUMP_OFFSET
(
pc
)
;
MOZ_ASSERT
(
delta
<
0
)
;
ptrdiff_t
span
=
target
.
offset
-
jumpOffset
;
SET_JUMP_OFFSET
(
pc
span
)
;
}
}
bool
BytecodeEmitter
:
:
emitJumpNoFallthrough
(
JSOp
op
JumpList
*
jump
)
{
ptrdiff_t
offset
;
if
(
!
emitCheck
(
5
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
MOZ_ASSERT
(
-
1
<
=
jump
-
>
offset
&
&
jump
-
>
offset
<
offset
)
;
jump
-
>
push
(
this
-
>
code
(
0
)
offset
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitJump
(
JSOp
op
JumpList
*
jump
)
{
if
(
!
emitJumpNoFallthrough
(
op
jump
)
)
return
false
;
if
(
BytecodeFallsThrough
(
op
)
)
{
JumpTarget
fallthrough
;
if
(
!
emitJumpTarget
(
&
fallthrough
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitBackwardJump
(
JSOp
op
JumpTarget
target
JumpList
*
jump
JumpTarget
*
fallthrough
)
{
if
(
!
emitJumpNoFallthrough
(
op
jump
)
)
return
false
;
patchJumpsToTarget
(
*
jump
target
)
;
if
(
!
emitJumpTarget
(
fallthrough
)
)
return
false
;
return
true
;
}
void
BytecodeEmitter
:
:
patchJumpsToTarget
(
JumpList
jump
JumpTarget
target
)
{
MOZ_ASSERT
(
-
1
<
=
jump
.
offset
&
&
jump
.
offset
<
=
offset
(
)
)
;
MOZ_ASSERT
(
0
<
=
target
.
offset
&
&
target
.
offset
<
=
offset
(
)
)
;
MOZ_ASSERT_IF
(
jump
.
offset
!
=
-
1
&
&
target
.
offset
+
4
<
=
offset
(
)
BytecodeIsJumpTarget
(
JSOp
(
*
code
(
target
.
offset
)
)
)
)
;
jump
.
patchAll
(
code
(
0
)
target
)
;
}
bool
BytecodeEmitter
:
:
emitJumpTargetAndPatch
(
JumpList
jump
)
{
if
(
jump
.
offset
=
=
-
1
)
return
true
;
JumpTarget
target
;
if
(
!
emitJumpTarget
(
&
target
)
)
return
false
;
patchJumpsToTarget
(
jump
target
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitCall
(
JSOp
op
uint16_t
argc
ParseNode
*
pn
)
{
if
(
pn
&
&
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
return
emit3
(
op
ARGC_HI
(
argc
)
ARGC_LO
(
argc
)
)
;
}
bool
BytecodeEmitter
:
:
emitDupAt
(
unsigned
slotFromTop
)
{
MOZ_ASSERT
(
slotFromTop
<
unsigned
(
stackDepth
)
)
;
if
(
slotFromTop
>
=
JS_BIT
(
24
)
)
{
reportError
(
nullptr
JSMSG_TOO_MANY_LOCALS
)
;
return
false
;
}
ptrdiff_t
off
;
if
(
!
emitN
(
JSOP_DUPAT
3
&
off
)
)
return
false
;
jsbytecode
*
pc
=
code
(
off
)
;
SET_UINT24
(
pc
slotFromTop
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitCheckIsObj
(
CheckIsObjectKind
kind
)
{
return
emit2
(
JSOP_CHECKISOBJ
uint8_t
(
kind
)
)
;
}
static
inline
unsigned
LengthOfSetLine
(
unsigned
line
)
{
return
1
+
(
line
>
SN_4BYTE_OFFSET_MASK
?
4
:
1
)
;
}
bool
BytecodeEmitter
:
:
updateLineNumberNotes
(
uint32_t
offset
)
{
TokenStream
*
ts
=
&
parser
-
>
tokenStream
;
bool
onThisLine
;
if
(
!
ts
-
>
srcCoords
.
isOnThisLine
(
offset
currentLine
(
)
&
onThisLine
)
)
return
ts
-
>
reportError
(
JSMSG_OUT_OF_MEMORY
)
;
if
(
!
onThisLine
)
{
unsigned
line
=
ts
-
>
srcCoords
.
lineNum
(
offset
)
;
unsigned
delta
=
line
-
currentLine
(
)
;
current
-
>
currentLine
=
line
;
current
-
>
lastColumn
=
0
;
if
(
delta
>
=
LengthOfSetLine
(
line
)
)
{
if
(
!
newSrcNote2
(
SRC_SETLINE
ptrdiff_t
(
line
)
)
)
return
false
;
}
else
{
do
{
if
(
!
newSrcNote
(
SRC_NEWLINE
)
)
return
false
;
}
while
(
-
-
delta
!
=
0
)
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
updateSourceCoordNotes
(
uint32_t
offset
)
{
if
(
!
updateLineNumberNotes
(
offset
)
)
return
false
;
uint32_t
columnIndex
=
parser
-
>
tokenStream
.
srcCoords
.
columnIndex
(
offset
)
;
ptrdiff_t
colspan
=
ptrdiff_t
(
columnIndex
)
-
ptrdiff_t
(
current
-
>
lastColumn
)
;
if
(
colspan
!
=
0
)
{
if
(
!
SN_REPRESENTABLE_COLSPAN
(
colspan
)
)
return
true
;
if
(
!
newSrcNote2
(
SRC_COLSPAN
SN_COLSPAN_TO_OFFSET
(
colspan
)
)
)
return
false
;
current
-
>
lastColumn
=
columnIndex
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitLoopHead
(
ParseNode
*
nextpn
JumpTarget
*
top
)
{
if
(
nextpn
)
{
if
(
nextpn
-
>
isKind
(
PNK_LEXICALSCOPE
)
)
nextpn
=
nextpn
-
>
scopeBody
(
)
;
MOZ_ASSERT_IF
(
nextpn
-
>
isKind
(
PNK_STATEMENTLIST
)
nextpn
-
>
isArity
(
PN_LIST
)
)
;
if
(
nextpn
-
>
isKind
(
PNK_STATEMENTLIST
)
&
&
nextpn
-
>
pn_head
)
nextpn
=
nextpn
-
>
pn_head
;
if
(
!
updateSourceCoordNotes
(
nextpn
-
>
pn_pos
.
begin
)
)
return
false
;
}
*
top
=
{
offset
(
)
}
;
return
emit1
(
JSOP_LOOPHEAD
)
;
}
bool
BytecodeEmitter
:
:
emitLoopEntry
(
ParseNode
*
nextpn
JumpList
entryJump
)
{
if
(
nextpn
)
{
if
(
nextpn
-
>
isKind
(
PNK_LEXICALSCOPE
)
)
nextpn
=
nextpn
-
>
scopeBody
(
)
;
MOZ_ASSERT_IF
(
nextpn
-
>
isKind
(
PNK_STATEMENTLIST
)
nextpn
-
>
isArity
(
PN_LIST
)
)
;
if
(
nextpn
-
>
isKind
(
PNK_STATEMENTLIST
)
&
&
nextpn
-
>
pn_head
)
nextpn
=
nextpn
-
>
pn_head
;
if
(
!
updateSourceCoordNotes
(
nextpn
-
>
pn_pos
.
begin
)
)
return
false
;
}
JumpTarget
entry
{
offset
(
)
}
;
patchJumpsToTarget
(
entryJump
entry
)
;
LoopControl
&
loopInfo
=
innermostNestableControl
-
>
as
<
LoopControl
>
(
)
;
MOZ_ASSERT
(
loopInfo
.
loopDepth
(
)
>
0
)
;
uint8_t
loopDepthAndFlags
=
PackLoopEntryDepthHintAndFlags
(
loopInfo
.
loopDepth
(
)
loopInfo
.
canIonOsr
(
)
)
;
return
emit2
(
JSOP_LOOPENTRY
loopDepthAndFlags
)
;
}
void
BytecodeEmitter
:
:
checkTypeSet
(
JSOp
op
)
{
if
(
CodeSpec
[
op
]
.
format
&
JOF_TYPESET
)
{
if
(
typesetCount
<
UINT16_MAX
)
typesetCount
+
+
;
}
}
bool
BytecodeEmitter
:
:
emitUint16Operand
(
JSOp
op
uint32_t
operand
)
{
MOZ_ASSERT
(
operand
<
=
UINT16_MAX
)
;
if
(
!
emit3
(
op
UINT16_HI
(
operand
)
UINT16_LO
(
operand
)
)
)
return
false
;
checkTypeSet
(
op
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitUint32Operand
(
JSOp
op
uint32_t
operand
)
{
ptrdiff_t
off
;
if
(
!
emitN
(
op
4
&
off
)
)
return
false
;
SET_UINT32
(
code
(
off
)
operand
)
;
checkTypeSet
(
op
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
flushPops
(
int
*
npops
)
{
MOZ_ASSERT
(
*
npops
!
=
0
)
;
if
(
!
emitUint16Operand
(
JSOP_POPN
*
npops
)
)
return
false
;
*
npops
=
0
;
return
true
;
}
namespace
{
class
NonLocalExitControl
{
BytecodeEmitter
*
bce_
;
const
uint32_t
savedScopeNoteIndex_
;
const
int
savedDepth_
;
uint32_t
openScopeNoteIndex_
;
NonLocalExitControl
(
const
NonLocalExitControl
&
)
=
delete
;
MOZ_MUST_USE
bool
leaveScope
(
BytecodeEmitter
:
:
EmitterScope
*
scope
)
;
public
:
explicit
NonLocalExitControl
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
savedScopeNoteIndex_
(
bce
-
>
scopeNoteList
.
length
(
)
)
savedDepth_
(
bce
-
>
stackDepth
)
openScopeNoteIndex_
(
bce
-
>
innermostEmitterScope
-
>
noteIndex
(
)
)
{
}
~
NonLocalExitControl
(
)
{
for
(
uint32_t
n
=
savedScopeNoteIndex_
;
n
<
bce_
-
>
scopeNoteList
.
length
(
)
;
n
+
+
)
bce_
-
>
scopeNoteList
.
recordEnd
(
n
bce_
-
>
offset
(
)
bce_
-
>
inPrologue
(
)
)
;
bce_
-
>
stackDepth
=
savedDepth_
;
}
MOZ_MUST_USE
bool
prepareForNonLocalJump
(
BytecodeEmitter
:
:
NestableControl
*
target
)
;
MOZ_MUST_USE
bool
prepareForNonLocalJumpToOutermost
(
)
{
return
prepareForNonLocalJump
(
nullptr
)
;
}
}
;
bool
NonLocalExitControl
:
:
leaveScope
(
BytecodeEmitter
:
:
EmitterScope
*
es
)
{
if
(
!
es
-
>
leave
(
bce_
true
)
)
return
false
;
uint32_t
enclosingScopeIndex
=
ScopeNote
:
:
NoScopeIndex
;
if
(
es
-
>
enclosingInFrame
(
)
)
enclosingScopeIndex
=
es
-
>
enclosingInFrame
(
)
-
>
index
(
)
;
if
(
!
bce_
-
>
scopeNoteList
.
append
(
enclosingScopeIndex
bce_
-
>
offset
(
)
bce_
-
>
inPrologue
(
)
openScopeNoteIndex_
)
)
return
false
;
openScopeNoteIndex_
=
bce_
-
>
scopeNoteList
.
length
(
)
-
1
;
return
true
;
}
bool
NonLocalExitControl
:
:
prepareForNonLocalJump
(
BytecodeEmitter
:
:
NestableControl
*
target
)
{
using
NestableControl
=
BytecodeEmitter
:
:
NestableControl
;
using
EmitterScope
=
BytecodeEmitter
:
:
EmitterScope
;
EmitterScope
*
es
=
bce_
-
>
innermostEmitterScope
;
int
npops
=
0
;
auto
flushPops
=
[
&
npops
]
(
BytecodeEmitter
*
bce
)
{
if
(
npops
&
&
!
bce
-
>
flushPops
(
&
npops
)
)
return
false
;
return
true
;
}
;
for
(
NestableControl
*
control
=
bce_
-
>
innermostNestableControl
;
control
!
=
target
;
control
=
control
-
>
enclosing
(
)
)
{
for
(
;
es
!
=
control
-
>
emitterScope
(
)
;
es
=
es
-
>
enclosingInFrame
(
)
)
{
if
(
!
leaveScope
(
es
)
)
return
false
;
}
switch
(
control
-
>
kind
(
)
)
{
case
StatementKind
:
:
Finally
:
{
TryFinallyControl
&
finallyControl
=
control
-
>
as
<
TryFinallyControl
>
(
)
;
if
(
finallyControl
.
emittingSubroutine
(
)
)
{
npops
+
=
3
;
}
else
{
if
(
!
flushPops
(
bce_
)
)
return
false
;
if
(
!
bce_
-
>
emitJump
(
JSOP_GOSUB
&
finallyControl
.
gosubs
)
)
return
false
;
}
break
;
}
case
StatementKind
:
:
ForOfLoop
:
npops
+
=
2
;
break
;
case
StatementKind
:
:
ForInLoop
:
npops
+
=
1
;
if
(
!
flushPops
(
bce_
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_ENDITER
)
)
return
false
;
break
;
default
:
break
;
}
}
EmitterScope
*
targetEmitterScope
=
target
?
target
-
>
emitterScope
(
)
:
bce_
-
>
varEmitterScope
;
for
(
;
es
!
=
targetEmitterScope
;
es
=
es
-
>
enclosingInFrame
(
)
)
{
if
(
!
leaveScope
(
es
)
)
return
false
;
}
return
flushPops
(
bce_
)
;
}
}
bool
BytecodeEmitter
:
:
emitGoto
(
NestableControl
*
target
JumpList
*
jumplist
SrcNoteType
noteType
)
{
NonLocalExitControl
nle
(
this
)
;
if
(
!
nle
.
prepareForNonLocalJump
(
target
)
)
return
false
;
if
(
noteType
!
=
SRC_NULL
)
{
if
(
!
newSrcNote
(
noteType
)
)
return
false
;
}
return
emitJump
(
JSOP_GOTO
jumplist
)
;
}
Scope
*
BytecodeEmitter
:
:
innermostScope
(
)
const
{
return
innermostEmitterScope
-
>
scope
(
this
)
;
}
bool
BytecodeEmitter
:
:
emitIndex32
(
JSOp
op
uint32_t
index
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
const
size_t
len
=
1
+
UINT32_INDEX_LEN
;
MOZ_ASSERT
(
len
=
=
size_t
(
CodeSpec
[
op
]
.
length
)
)
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
len
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
SET_UINT32_INDEX
(
code
index
)
;
checkTypeSet
(
op
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitIndexOp
(
JSOp
op
uint32_t
index
)
{
MOZ_ASSERT
(
checkStrictOrSloppy
(
op
)
)
;
const
size_t
len
=
CodeSpec
[
op
]
.
length
;
MOZ_ASSERT
(
len
>
=
1
+
UINT32_INDEX_LEN
)
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
len
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
jsbytecode
(
op
)
;
SET_UINT32_INDEX
(
code
index
)
;
checkTypeSet
(
op
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitAtomOp
(
JSAtom
*
atom
JSOp
op
)
{
MOZ_ASSERT
(
atom
)
;
MOZ_ASSERT
(
JOF_OPTYPE
(
op
)
=
=
JOF_ATOM
)
;
MOZ_ASSERT_IF
(
op
=
=
JSOP_GETNAME
|
|
op
=
=
JSOP_GETGNAME
atom
!
=
cx
-
>
names
(
)
.
dotGenerator
)
;
if
(
op
=
=
JSOP_GETPROP
&
&
atom
=
=
cx
-
>
names
(
)
.
length
)
{
op
=
JSOP_LENGTH
;
}
uint32_t
index
;
if
(
!
makeAtomIndex
(
atom
&
index
)
)
return
false
;
return
emitIndexOp
(
op
index
)
;
}
bool
BytecodeEmitter
:
:
emitAtomOp
(
ParseNode
*
pn
JSOp
op
)
{
MOZ_ASSERT
(
pn
-
>
pn_atom
!
=
nullptr
)
;
return
emitAtomOp
(
pn
-
>
pn_atom
op
)
;
}
bool
BytecodeEmitter
:
:
emitInternedScopeOp
(
uint32_t
index
JSOp
op
)
{
MOZ_ASSERT
(
JOF_OPTYPE
(
op
)
=
=
JOF_SCOPE
)
;
MOZ_ASSERT
(
index
<
scopeList
.
length
(
)
)
;
return
emitIndex32
(
op
index
)
;
}
bool
BytecodeEmitter
:
:
emitInternedObjectOp
(
uint32_t
index
JSOp
op
)
{
MOZ_ASSERT
(
JOF_OPTYPE
(
op
)
=
=
JOF_OBJECT
)
;
MOZ_ASSERT
(
index
<
objectList
.
length
)
;
return
emitIndex32
(
op
index
)
;
}
bool
BytecodeEmitter
:
:
emitObjectOp
(
ObjectBox
*
objbox
JSOp
op
)
{
return
emitInternedObjectOp
(
objectList
.
add
(
objbox
)
op
)
;
}
bool
BytecodeEmitter
:
:
emitObjectPairOp
(
ObjectBox
*
objbox1
ObjectBox
*
objbox2
JSOp
op
)
{
uint32_t
index
=
objectList
.
add
(
objbox1
)
;
objectList
.
add
(
objbox2
)
;
return
emitInternedObjectOp
(
index
op
)
;
}
bool
BytecodeEmitter
:
:
emitRegExp
(
uint32_t
index
)
{
return
emitIndex32
(
JSOP_REGEXP
index
)
;
}
bool
BytecodeEmitter
:
:
emitLocalOp
(
JSOp
op
uint32_t
slot
)
{
MOZ_ASSERT
(
JOF_OPTYPE
(
op
)
!
=
JOF_ENVCOORD
)
;
MOZ_ASSERT
(
IsLocalOp
(
op
)
)
;
ptrdiff_t
off
;
if
(
!
emitN
(
op
LOCALNO_LEN
&
off
)
)
return
false
;
SET_LOCALNO
(
code
(
off
)
slot
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitArgOp
(
JSOp
op
uint16_t
slot
)
{
MOZ_ASSERT
(
IsArgOp
(
op
)
)
;
ptrdiff_t
off
;
if
(
!
emitN
(
op
ARGNO_LEN
&
off
)
)
return
false
;
SET_ARGNO
(
code
(
off
)
slot
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitEnvCoordOp
(
JSOp
op
EnvironmentCoordinate
ec
)
{
MOZ_ASSERT
(
JOF_OPTYPE
(
op
)
=
=
JOF_ENVCOORD
)
;
unsigned
n
=
ENVCOORD_HOPS_LEN
+
ENVCOORD_SLOT_LEN
;
MOZ_ASSERT
(
int
(
n
)
+
1
=
=
CodeSpec
[
op
]
.
length
)
;
ptrdiff_t
off
;
if
(
!
emitN
(
op
n
&
off
)
)
return
false
;
jsbytecode
*
pc
=
code
(
off
)
;
SET_ENVCOORD_HOPS
(
pc
ec
.
hops
(
)
)
;
pc
+
=
ENVCOORD_HOPS_LEN
;
SET_ENVCOORD_SLOT
(
pc
ec
.
slot
(
)
)
;
pc
+
=
ENVCOORD_SLOT_LEN
;
checkTypeSet
(
op
)
;
return
true
;
}
static
JSOp
GetIncDecInfo
(
ParseNodeKind
kind
bool
*
post
)
{
MOZ_ASSERT
(
kind
=
=
PNK_POSTINCREMENT
|
|
kind
=
=
PNK_PREINCREMENT
|
|
kind
=
=
PNK_POSTDECREMENT
|
|
kind
=
=
PNK_PREDECREMENT
)
;
*
post
=
kind
=
=
PNK_POSTINCREMENT
|
|
kind
=
=
PNK_POSTDECREMENT
;
return
(
kind
=
=
PNK_POSTINCREMENT
|
|
kind
=
=
PNK_PREINCREMENT
)
?
JSOP_ADD
:
JSOP_SUB
;
}
JSOp
BytecodeEmitter
:
:
strictifySetNameOp
(
JSOp
op
)
{
switch
(
op
)
{
case
JSOP_SETNAME
:
if
(
sc
-
>
strict
(
)
)
op
=
JSOP_STRICTSETNAME
;
break
;
case
JSOP_SETGNAME
:
if
(
sc
-
>
strict
(
)
)
op
=
JSOP_STRICTSETGNAME
;
break
;
default
:
;
}
return
op
;
}
bool
BytecodeEmitter
:
:
checkSideEffects
(
ParseNode
*
pn
bool
*
answer
)
{
JS_CHECK_RECURSION
(
cx
return
false
)
;
restart
:
switch
(
pn
-
>
getKind
(
)
)
{
case
PNK_NOP
:
case
PNK_STRING
:
case
PNK_TEMPLATE_STRING
:
case
PNK_REGEXP
:
case
PNK_TRUE
:
case
PNK_FALSE
:
case
PNK_NULL
:
case
PNK_ELISION
:
case
PNK_GENERATOR
:
case
PNK_NUMBER
:
case
PNK_OBJECT_PROPERTY_NAME
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NULLARY
)
)
;
*
answer
=
false
;
return
true
;
case
PNK_THIS
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
sc
-
>
needsThisTDZChecks
(
)
;
return
true
;
case
PNK_NEWTARGET
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_left
-
>
isKind
(
PNK_POSHOLDER
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_right
-
>
isKind
(
PNK_POSHOLDER
)
)
;
*
answer
=
false
;
return
true
;
case
PNK_BREAK
:
case
PNK_CONTINUE
:
case
PNK_DEBUGGER
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NULLARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_DOT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NAME
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_TYPEOFEXPR
:
case
PNK_VOID
:
case
PNK_NOT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
return
checkSideEffects
(
pn
-
>
pn_kid
answer
)
;
case
PNK_COMPUTED_NAME
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_TYPEOFNAME
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_MUTATEPROTO
:
case
PNK_ARRAYPUSH
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
return
checkSideEffects
(
pn
-
>
pn_kid
answer
)
;
case
PNK_PREINCREMENT
:
case
PNK_POSTINCREMENT
:
case
PNK_PREDECREMENT
:
case
PNK_POSTDECREMENT
:
case
PNK_THROW
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_BITNOT
:
case
PNK_POS
:
case
PNK_NEG
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_SPREAD
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_YIELD_STAR
:
case
PNK_YIELD
:
case
PNK_AWAIT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_DELETENAME
:
case
PNK_DELETEPROP
:
case
PNK_DELETEELEM
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_DELETEEXPR
:
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
ParseNode
*
expr
=
pn
-
>
pn_kid
;
return
checkSideEffects
(
expr
answer
)
;
}
case
PNK_SEMI
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
if
(
ParseNode
*
expr
=
pn
-
>
pn_kid
)
return
checkSideEffects
(
expr
answer
)
;
*
answer
=
false
;
return
true
;
case
PNK_ASSIGN
:
case
PNK_ADDASSIGN
:
case
PNK_SUBASSIGN
:
case
PNK_BITORASSIGN
:
case
PNK_BITXORASSIGN
:
case
PNK_BITANDASSIGN
:
case
PNK_LSHASSIGN
:
case
PNK_RSHASSIGN
:
case
PNK_URSHASSIGN
:
case
PNK_MULASSIGN
:
case
PNK_DIVASSIGN
:
case
PNK_MODASSIGN
:
case
PNK_POWASSIGN
:
case
PNK_SETTHIS
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_STATEMENTLIST
:
case
PNK_CATCHLIST
:
case
PNK_OR
:
case
PNK_AND
:
case
PNK_STRICTEQ
:
case
PNK_STRICTNE
:
case
PNK_COMMA
:
MOZ_ASSERT
(
pn
-
>
pn_count
>
0
)
;
MOZ_FALLTHROUGH
;
case
PNK_ARRAY
:
case
PNK_OBJECT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
for
(
ParseNode
*
item
=
pn
-
>
pn_head
;
item
;
item
=
item
-
>
pn_next
)
{
if
(
!
checkSideEffects
(
item
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
}
return
true
;
case
PNK_BITOR
:
case
PNK_BITXOR
:
case
PNK_BITAND
:
case
PNK_EQ
:
case
PNK_NE
:
case
PNK_LT
:
case
PNK_LE
:
case
PNK_GT
:
case
PNK_GE
:
case
PNK_INSTANCEOF
:
case
PNK_IN
:
case
PNK_LSH
:
case
PNK_RSH
:
case
PNK_URSH
:
case
PNK_ADD
:
case
PNK_SUB
:
case
PNK_STAR
:
case
PNK_DIV
:
case
PNK_MOD
:
case
PNK_POW
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_count
>
=
2
)
;
*
answer
=
true
;
return
true
;
case
PNK_COLON
:
case
PNK_CASE
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
if
(
!
checkSideEffects
(
pn
-
>
pn_left
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
return
checkSideEffects
(
pn
-
>
pn_right
answer
)
;
case
PNK_ELEM
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_IMPORT
:
case
PNK_EXPORT_FROM
:
case
PNK_EXPORT_DEFAULT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_EXPORT
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_UNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_DOWHILE
:
case
PNK_WHILE
:
case
PNK_FOR
:
case
PNK_COMPREHENSIONFOR
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_VAR
:
case
PNK_CONST
:
case
PNK_LET
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_IF
:
case
PNK_CONDITIONAL
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
if
(
!
checkSideEffects
(
pn
-
>
pn_kid1
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
if
(
!
checkSideEffects
(
pn
-
>
pn_kid2
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
if
(
(
pn
=
pn
-
>
pn_kid3
)
)
goto
restart
;
return
true
;
case
PNK_NEW
:
case
PNK_CALL
:
case
PNK_TAGGED_TEMPLATE
:
case
PNK_SUPERCALL
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_CLASS
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_WITH
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_RETURN
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_NAME
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NAME
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_SHORTHAND
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
*
answer
=
true
;
return
true
;
case
PNK_FUNCTION
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_CODE
)
)
;
*
answer
=
false
;
return
true
;
case
PNK_MODULE
:
*
answer
=
false
;
return
true
;
case
PNK_GENEXP
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
*
answer
=
false
;
return
true
;
case
PNK_TRY
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
if
(
!
checkSideEffects
(
pn
-
>
pn_kid1
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
if
(
ParseNode
*
catchList
=
pn
-
>
pn_kid2
)
{
MOZ_ASSERT
(
catchList
-
>
isKind
(
PNK_CATCHLIST
)
)
;
if
(
!
checkSideEffects
(
catchList
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
}
if
(
ParseNode
*
finallyBlock
=
pn
-
>
pn_kid3
)
{
if
(
!
checkSideEffects
(
finallyBlock
answer
)
)
return
false
;
}
return
true
;
case
PNK_CATCH
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_TERNARY
)
)
;
if
(
!
checkSideEffects
(
pn
-
>
pn_kid1
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
if
(
ParseNode
*
cond
=
pn
-
>
pn_kid2
)
{
if
(
!
checkSideEffects
(
cond
answer
)
)
return
false
;
if
(
*
answer
)
return
true
;
}
return
checkSideEffects
(
pn
-
>
pn_kid3
answer
)
;
case
PNK_SWITCH
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
if
(
!
checkSideEffects
(
pn
-
>
pn_left
answer
)
)
return
false
;
return
*
answer
|
|
checkSideEffects
(
pn
-
>
pn_right
answer
)
;
case
PNK_LABEL
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NAME
)
)
;
return
checkSideEffects
(
pn
-
>
expr
(
)
answer
)
;
case
PNK_LEXICALSCOPE
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_SCOPE
)
)
;
return
checkSideEffects
(
pn
-
>
scopeBody
(
)
answer
)
;
case
PNK_TEMPLATE_STRING_LIST
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_count
>
0
)
;
MOZ_ASSERT
(
(
pn
-
>
pn_count
%
2
)
=
=
1
"
template
strings
must
alternate
template
and
substitution
"
"
parts
"
)
;
*
answer
=
pn
-
>
pn_count
>
1
;
return
true
;
case
PNK_ARRAYCOMP
:
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_count
=
=
1
)
;
return
checkSideEffects
(
pn
-
>
pn_head
answer
)
;
case
PNK_PARAMSBODY
:
*
answer
=
true
;
return
true
;
case
PNK_FORIN
:
case
PNK_FOROF
:
case
PNK_FORHEAD
:
case
PNK_CLASSMETHOD
:
case
PNK_CLASSNAMES
:
case
PNK_CLASSMETHODLIST
:
case
PNK_IMPORT_SPEC_LIST
:
case
PNK_IMPORT_SPEC
:
case
PNK_EXPORT_BATCH_SPEC
:
case
PNK_EXPORT_SPEC_LIST
:
case
PNK_EXPORT_SPEC
:
case
PNK_CALLSITEOBJ
:
case
PNK_POSHOLDER
:
case
PNK_SUPERBASE
:
MOZ_CRASH
(
"
handled
by
parent
nodes
"
)
;
case
PNK_LIMIT
:
MOZ_CRASH
(
"
invalid
node
kind
"
)
;
}
MOZ_CRASH
(
"
invalid
unenumerated
ParseNodeKind
value
encountered
in
"
"
BytecodeEmitter
:
:
checkSideEffects
"
)
;
}
bool
BytecodeEmitter
:
:
isInLoop
(
)
{
return
findInnermostNestableControl
<
LoopControl
>
(
)
;
}
bool
BytecodeEmitter
:
:
checkSingletonContext
(
)
{
if
(
!
script
-
>
treatAsRunOnce
(
)
|
|
sc
-
>
isFunctionBox
(
)
|
|
isInLoop
(
)
)
return
false
;
hasSingletons
=
true
;
return
true
;
}
bool
BytecodeEmitter
:
:
checkRunOnceContext
(
)
{
return
checkSingletonContext
(
)
|
|
(
!
isInLoop
(
)
&
&
isRunOnceLambda
(
)
)
;
}
bool
BytecodeEmitter
:
:
needsImplicitThis
(
)
{
if
(
sc
-
>
inWith
(
)
)
return
true
;
for
(
EmitterScope
*
es
=
innermostEmitterScope
;
es
;
es
=
es
-
>
enclosingInFrame
(
)
)
{
if
(
es
-
>
scope
(
this
)
-
>
kind
(
)
=
=
ScopeKind
:
:
With
)
return
true
;
}
return
false
;
}
bool
BytecodeEmitter
:
:
maybeSetDisplayURL
(
)
{
if
(
tokenStream
(
)
-
>
hasDisplayURL
(
)
)
{
if
(
!
parser
-
>
ss
-
>
setDisplayURL
(
cx
tokenStream
(
)
-
>
displayURL
(
)
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
maybeSetSourceMap
(
)
{
if
(
tokenStream
(
)
-
>
hasSourceMapURL
(
)
)
{
MOZ_ASSERT
(
!
parser
-
>
ss
-
>
hasSourceMapURL
(
)
)
;
if
(
!
parser
-
>
ss
-
>
setSourceMapURL
(
cx
tokenStream
(
)
-
>
sourceMapURL
(
)
)
)
return
false
;
}
if
(
parser
-
>
options
(
)
.
sourceMapURL
(
)
)
{
if
(
parser
-
>
ss
-
>
hasSourceMapURL
(
)
)
{
if
(
!
parser
-
>
reportNoOffset
(
ParseWarning
false
JSMSG_ALREADY_HAS_PRAGMA
parser
-
>
ss
-
>
filename
(
)
"
/
/
#
sourceMappingURL
"
)
)
{
return
false
;
}
}
if
(
!
parser
-
>
ss
-
>
setSourceMapURL
(
cx
parser
-
>
options
(
)
.
sourceMapURL
(
)
)
)
return
false
;
}
return
true
;
}
void
BytecodeEmitter
:
:
tellDebuggerAboutCompiledScript
(
ExclusiveContext
*
cx
)
{
if
(
!
cx
-
>
isJSContext
(
)
)
return
;
if
(
emitterMode
!
=
LazyFunction
&
&
!
parent
)
{
Debugger
:
:
onNewScript
(
cx
-
>
asJSContext
(
)
script
)
;
}
}
inline
TokenStream
*
BytecodeEmitter
:
:
tokenStream
(
)
{
return
&
parser
-
>
tokenStream
;
}
bool
BytecodeEmitter
:
:
reportError
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
{
TokenPos
pos
=
pn
?
pn
-
>
pn_pos
:
tokenStream
(
)
-
>
currentToken
(
)
.
pos
;
va_list
args
;
va_start
(
args
errorNumber
)
;
bool
result
=
tokenStream
(
)
-
>
reportCompileErrorNumberVA
(
pos
.
begin
JSREPORT_ERROR
errorNumber
args
)
;
va_end
(
args
)
;
return
result
;
}
bool
BytecodeEmitter
:
:
reportStrictWarning
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
{
TokenPos
pos
=
pn
?
pn
-
>
pn_pos
:
tokenStream
(
)
-
>
currentToken
(
)
.
pos
;
va_list
args
;
va_start
(
args
errorNumber
)
;
bool
result
=
tokenStream
(
)
-
>
reportStrictWarningErrorNumberVA
(
pos
.
begin
errorNumber
args
)
;
va_end
(
args
)
;
return
result
;
}
bool
BytecodeEmitter
:
:
reportStrictModeError
(
ParseNode
*
pn
unsigned
errorNumber
.
.
.
)
{
TokenPos
pos
=
pn
?
pn
-
>
pn_pos
:
tokenStream
(
)
-
>
currentToken
(
)
.
pos
;
va_list
args
;
va_start
(
args
errorNumber
)
;
bool
result
=
tokenStream
(
)
-
>
reportStrictModeErrorNumberVA
(
pos
.
begin
sc
-
>
strict
(
)
errorNumber
args
)
;
va_end
(
args
)
;
return
result
;
}
bool
BytecodeEmitter
:
:
emitNewInit
(
JSProtoKey
key
)
{
const
size_t
len
=
1
+
UINT32_INDEX_LEN
;
ptrdiff_t
offset
;
if
(
!
emitCheck
(
len
&
offset
)
)
return
false
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
JSOP_NEWINIT
;
code
[
1
]
=
jsbytecode
(
key
)
;
code
[
2
]
=
0
;
code
[
3
]
=
0
;
code
[
4
]
=
0
;
checkTypeSet
(
JSOP_NEWINIT
)
;
updateDepth
(
offset
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
iteratorResultShape
(
unsigned
*
shape
)
{
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectKind
(
2
)
;
RootedPlainObject
obj
(
cx
NewBuiltinClassInstance
<
PlainObject
>
(
cx
kind
TenuredObject
)
)
;
if
(
!
obj
)
return
false
;
Rooted
<
jsid
>
value_id
(
cx
AtomToId
(
cx
-
>
names
(
)
.
value
)
)
;
Rooted
<
jsid
>
done_id
(
cx
AtomToId
(
cx
-
>
names
(
)
.
done
)
)
;
if
(
!
NativeDefineProperty
(
cx
obj
value_id
UndefinedHandleValue
nullptr
nullptr
JSPROP_ENUMERATE
)
)
{
return
false
;
}
if
(
!
NativeDefineProperty
(
cx
obj
done_id
UndefinedHandleValue
nullptr
nullptr
JSPROP_ENUMERATE
)
)
{
return
false
;
}
ObjectBox
*
objbox
=
parser
-
>
newObjectBox
(
obj
)
;
if
(
!
objbox
)
return
false
;
*
shape
=
objectList
.
add
(
objbox
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitPrepareIteratorResult
(
)
{
unsigned
shape
;
if
(
!
iteratorResultShape
(
&
shape
)
)
return
false
;
return
emitIndex32
(
JSOP_NEWOBJECT
shape
)
;
}
bool
BytecodeEmitter
:
:
emitFinishIteratorResult
(
bool
done
)
{
uint32_t
value_id
;
if
(
!
makeAtomIndex
(
cx
-
>
names
(
)
.
value
&
value_id
)
)
return
false
;
uint32_t
done_id
;
if
(
!
makeAtomIndex
(
cx
-
>
names
(
)
.
done
&
done_id
)
)
return
false
;
if
(
!
emitIndex32
(
JSOP_INITPROP
value_id
)
)
return
false
;
if
(
!
emit1
(
done
?
JSOP_TRUE
:
JSOP_FALSE
)
)
return
false
;
if
(
!
emitIndex32
(
JSOP_INITPROP
done_id
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitGetNameAtLocation
(
JSAtom
*
name
const
NameLocation
&
loc
bool
callContext
)
{
switch
(
loc
.
kind
(
)
)
{
case
NameLocation
:
:
Kind
:
:
Dynamic
:
if
(
!
emitAtomOp
(
name
JSOP_GETNAME
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
Global
:
if
(
!
emitAtomOp
(
name
JSOP_GETGNAME
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
Intrinsic
:
if
(
!
emitAtomOp
(
name
JSOP_GETINTRINSIC
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
NamedLambdaCallee
:
if
(
!
emit1
(
JSOP_CALLEE
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
Import
:
if
(
!
emitAtomOp
(
name
JSOP_GETIMPORT
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
ArgumentSlot
:
if
(
!
emitArgOp
(
JSOP_GETARG
loc
.
argumentSlot
(
)
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
FrameSlot
:
if
(
loc
.
isLexical
(
)
)
{
if
(
!
emitTDZCheckIfNeeded
(
name
loc
)
)
return
false
;
}
if
(
!
emitLocalOp
(
JSOP_GETLOCAL
loc
.
frameSlot
(
)
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
:
if
(
loc
.
isLexical
(
)
)
{
if
(
!
emitTDZCheckIfNeeded
(
name
loc
)
)
return
false
;
}
if
(
!
emitEnvCoordOp
(
JSOP_GETALIASEDVAR
loc
.
environmentCoordinate
(
)
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
DynamicAnnexBVar
:
MOZ_CRASH
(
"
Synthesized
vars
for
Annex
B
.
3
.
3
should
only
be
used
in
initialization
"
)
;
}
if
(
callContext
)
{
switch
(
loc
.
kind
(
)
)
{
case
NameLocation
:
:
Kind
:
:
Dynamic
:
{
JSOp
thisOp
=
needsImplicitThis
(
)
?
JSOP_IMPLICITTHIS
:
JSOP_GIMPLICITTHIS
;
if
(
!
emitAtomOp
(
name
thisOp
)
)
return
false
;
break
;
}
case
NameLocation
:
:
Kind
:
:
Global
:
if
(
!
emitAtomOp
(
name
JSOP_GIMPLICITTHIS
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
Intrinsic
:
case
NameLocation
:
:
Kind
:
:
NamedLambdaCallee
:
case
NameLocation
:
:
Kind
:
:
Import
:
case
NameLocation
:
:
Kind
:
:
ArgumentSlot
:
case
NameLocation
:
:
Kind
:
:
FrameSlot
:
case
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
:
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
DynamicAnnexBVar
:
MOZ_CRASH
(
"
Synthesized
vars
for
Annex
B
.
3
.
3
should
only
be
used
in
initialization
"
)
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitGetName
(
ParseNode
*
pn
bool
callContext
)
{
return
emitGetName
(
pn
-
>
name
(
)
callContext
)
;
}
template
<
typename
RHSEmitter
>
bool
BytecodeEmitter
:
:
emitSetOrInitializeNameAtLocation
(
HandleAtom
name
const
NameLocation
&
loc
RHSEmitter
emitRhs
bool
initialize
)
{
bool
emittedBindOp
=
false
;
switch
(
loc
.
kind
(
)
)
{
case
NameLocation
:
:
Kind
:
:
Dynamic
:
case
NameLocation
:
:
Kind
:
:
Import
:
case
NameLocation
:
:
Kind
:
:
DynamicAnnexBVar
:
{
uint32_t
atomIndex
;
if
(
!
makeAtomIndex
(
name
&
atomIndex
)
)
return
false
;
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
DynamicAnnexBVar
)
{
if
(
!
emit1
(
JSOP_BINDVAR
)
)
return
false
;
}
else
{
if
(
!
emitIndexOp
(
JSOP_BINDNAME
atomIndex
)
)
return
false
;
}
emittedBindOp
=
true
;
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
!
emitIndexOp
(
strictifySetNameOp
(
JSOP_SETNAME
)
atomIndex
)
)
return
false
;
break
;
}
case
NameLocation
:
:
Kind
:
:
Global
:
{
JSOp
op
;
uint32_t
atomIndex
;
if
(
!
makeAtomIndex
(
name
&
atomIndex
)
)
return
false
;
if
(
loc
.
isLexical
(
)
&
&
initialize
)
{
MOZ_ASSERT
(
innermostScope
(
)
-
>
is
<
GlobalScope
>
(
)
)
;
op
=
JSOP_INITGLEXICAL
;
}
else
{
if
(
!
emitIndexOp
(
JSOP_BINDGNAME
atomIndex
)
)
return
false
;
emittedBindOp
=
true
;
op
=
strictifySetNameOp
(
JSOP_SETGNAME
)
;
}
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
!
emitIndexOp
(
op
atomIndex
)
)
return
false
;
break
;
}
case
NameLocation
:
:
Kind
:
:
Intrinsic
:
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
!
emitAtomOp
(
name
JSOP_SETINTRINSIC
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
NamedLambdaCallee
:
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
sc
-
>
strict
(
)
&
&
!
emit1
(
JSOP_THROWSETCALLEE
)
)
return
false
;
break
;
case
NameLocation
:
:
Kind
:
:
ArgumentSlot
:
{
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
if
(
funbox
-
>
argumentsHasLocalBinding
(
)
&
&
!
funbox
-
>
hasMappedArgsObj
(
)
)
funbox
-
>
setDefinitelyNeedsArgsObj
(
)
;
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
!
emitArgOp
(
JSOP_SETARG
loc
.
argumentSlot
(
)
)
)
return
false
;
break
;
}
case
NameLocation
:
:
Kind
:
:
FrameSlot
:
{
JSOp
op
=
JSOP_SETLOCAL
;
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
loc
.
isLexical
(
)
)
{
if
(
initialize
)
{
op
=
JSOP_INITLEXICAL
;
}
else
{
if
(
loc
.
isConst
(
)
)
op
=
JSOP_THROWSETCONST
;
if
(
!
emitTDZCheckIfNeeded
(
name
loc
)
)
return
false
;
}
}
if
(
!
emitLocalOp
(
op
loc
.
frameSlot
(
)
)
)
return
false
;
if
(
op
=
=
JSOP_INITLEXICAL
)
{
if
(
!
innermostTDZCheckCache
-
>
noteTDZCheck
(
this
name
DontCheckTDZ
)
)
return
false
;
}
break
;
}
case
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
:
{
JSOp
op
=
JSOP_SETALIASEDVAR
;
if
(
!
emitRhs
(
this
loc
emittedBindOp
)
)
return
false
;
if
(
loc
.
isLexical
(
)
)
{
if
(
initialize
)
{
op
=
JSOP_INITALIASEDLEXICAL
;
}
else
{
if
(
loc
.
isConst
(
)
)
op
=
JSOP_THROWSETALIASEDCONST
;
if
(
!
emitTDZCheckIfNeeded
(
name
loc
)
)
return
false
;
}
}
if
(
loc
.
bindingKind
(
)
=
=
BindingKind
:
:
NamedLambdaCallee
)
{
op
=
JSOP_THROWSETALIASEDCONST
;
if
(
sc
-
>
strict
(
)
&
&
!
emitEnvCoordOp
(
op
loc
.
environmentCoordinate
(
)
)
)
return
false
;
}
else
{
if
(
!
emitEnvCoordOp
(
op
loc
.
environmentCoordinate
(
)
)
)
return
false
;
}
if
(
op
=
=
JSOP_INITALIASEDLEXICAL
)
{
if
(
!
innermostTDZCheckCache
-
>
noteTDZCheck
(
this
name
DontCheckTDZ
)
)
return
false
;
}
break
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitTDZCheckIfNeeded
(
JSAtom
*
name
const
NameLocation
&
loc
)
{
MOZ_ASSERT
(
loc
.
hasKnownSlot
(
)
)
;
MOZ_ASSERT
(
loc
.
isLexical
(
)
)
;
Maybe
<
MaybeCheckTDZ
>
check
=
innermostTDZCheckCache
-
>
needsTDZCheck
(
this
name
)
;
if
(
!
check
)
return
false
;
if
(
*
check
=
=
DontCheckTDZ
)
return
true
;
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
FrameSlot
)
{
if
(
!
emitLocalOp
(
JSOP_CHECKLEXICAL
loc
.
frameSlot
(
)
)
)
return
false
;
}
else
{
if
(
!
emitEnvCoordOp
(
JSOP_CHECKALIASEDLEXICAL
loc
.
environmentCoordinate
(
)
)
)
return
false
;
}
return
innermostTDZCheckCache
-
>
noteTDZCheck
(
this
name
DontCheckTDZ
)
;
}
bool
BytecodeEmitter
:
:
emitPropLHS
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_DOT
)
)
;
MOZ_ASSERT
(
!
pn
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
;
ParseNode
*
pn2
=
pn
-
>
pn_expr
;
if
(
pn2
-
>
isKind
(
PNK_DOT
)
&
&
!
pn2
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
ParseNode
*
pndot
=
pn2
;
ParseNode
*
pnup
=
nullptr
;
ParseNode
*
pndown
;
for
(
;
;
)
{
pndown
=
pndot
-
>
pn_expr
;
pndot
-
>
pn_expr
=
pnup
;
if
(
!
pndown
-
>
isKind
(
PNK_DOT
)
|
|
pndown
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
break
;
pnup
=
pndot
;
pndot
=
pndown
;
}
if
(
!
emitTree
(
pndown
)
)
return
false
;
do
{
if
(
!
emitAtomOp
(
pndot
JSOP_GETPROP
)
)
return
false
;
pnup
=
pndot
-
>
pn_expr
;
pndot
-
>
pn_expr
=
pndown
;
pndown
=
pndot
;
}
while
(
(
pndot
=
pnup
)
!
=
nullptr
)
;
return
true
;
}
return
emitTree
(
pn2
)
;
}
bool
BytecodeEmitter
:
:
emitSuperPropLHS
(
ParseNode
*
superBase
bool
isCall
)
{
if
(
!
emitGetThisForSuperBase
(
superBase
)
)
return
false
;
if
(
isCall
&
&
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_SUPERBASE
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitPropOp
(
ParseNode
*
pn
JSOp
op
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_NAME
)
)
;
if
(
!
emitPropLHS
(
pn
)
)
return
false
;
if
(
op
=
=
JSOP_CALLPROP
&
&
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
pn
op
)
)
return
false
;
if
(
op
=
=
JSOP_CALLPROP
&
&
!
emit1
(
JSOP_SWAP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSuperPropOp
(
ParseNode
*
pn
JSOp
op
bool
isCall
)
{
ParseNode
*
base
=
&
pn
-
>
as
<
PropertyAccess
>
(
)
.
expression
(
)
;
if
(
!
emitSuperPropLHS
(
base
isCall
)
)
return
false
;
if
(
!
emitAtomOp
(
pn
op
)
)
return
false
;
if
(
isCall
&
&
!
emit1
(
JSOP_SWAP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitPropIncDec
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
pn_kid
-
>
isKind
(
PNK_DOT
)
)
;
bool
post
;
bool
isSuper
=
pn
-
>
pn_kid
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
;
JSOp
binop
=
GetIncDecInfo
(
pn
-
>
getKind
(
)
&
post
)
;
if
(
isSuper
)
{
ParseNode
*
base
=
&
pn
-
>
pn_kid
-
>
as
<
PropertyAccess
>
(
)
.
expression
(
)
;
if
(
!
emitSuperPropLHS
(
base
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
}
else
{
if
(
!
emitPropLHS
(
pn
-
>
pn_kid
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
}
if
(
!
emitAtomOp
(
pn
-
>
pn_kid
isSuper
?
JSOP_GETPROP_SUPER
:
JSOP_GETPROP
)
)
return
false
;
if
(
!
emit1
(
JSOP_POS
)
)
return
false
;
if
(
post
&
&
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_ONE
)
)
return
false
;
if
(
!
emit1
(
binop
)
)
return
false
;
if
(
post
)
{
if
(
!
emit2
(
JSOP_PICK
2
+
isSuper
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
isSuper
)
{
if
(
!
emit2
(
JSOP_PICK
3
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
}
JSOp
setOp
=
isSuper
?
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP_SUPER
:
JSOP_SETPROP_SUPER
:
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP
:
JSOP_SETPROP
;
if
(
!
emitAtomOp
(
pn
-
>
pn_kid
setOp
)
)
return
false
;
if
(
post
&
&
!
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitNameIncDec
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
pn_kid
-
>
isKind
(
PNK_NAME
)
)
;
bool
post
;
JSOp
binop
=
GetIncDecInfo
(
pn
-
>
getKind
(
)
&
post
)
;
auto
emitRhs
=
[
pn
post
binop
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
loc
bool
emittedBindOp
)
{
JSAtom
*
name
=
pn
-
>
pn_kid
-
>
name
(
)
;
if
(
!
bce
-
>
emitGetNameAtLocation
(
name
loc
false
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_POS
)
)
return
false
;
if
(
post
&
&
!
bce
-
>
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_ONE
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
binop
)
)
return
false
;
if
(
post
&
&
emittedBindOp
)
{
if
(
!
bce
-
>
emit2
(
JSOP_PICK
2
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_SWAP
)
)
return
false
;
}
return
true
;
}
;
if
(
!
emitSetName
(
pn
-
>
pn_kid
emitRhs
)
)
return
false
;
if
(
post
&
&
!
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitElemOperands
(
ParseNode
*
pn
EmitElemOption
opts
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_BINARY
)
)
;
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
if
(
opts
=
=
EmitElemOption
:
:
IncDec
)
{
if
(
!
emit1
(
JSOP_CHECKOBJCOERCIBLE
)
)
return
false
;
}
else
if
(
opts
=
=
EmitElemOption
:
:
Call
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
}
if
(
!
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
if
(
opts
=
=
EmitElemOption
:
:
Set
)
{
if
(
!
emit2
(
JSOP_PICK
2
)
)
return
false
;
}
else
if
(
opts
=
=
EmitElemOption
:
:
IncDec
|
|
opts
=
=
EmitElemOption
:
:
CompoundAssign
)
{
if
(
!
emit1
(
JSOP_TOID
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitSuperElemOperands
(
ParseNode
*
pn
EmitElemOption
opts
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_ELEM
)
&
&
pn
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
;
if
(
!
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
if
(
opts
=
=
EmitElemOption
:
:
IncDec
|
|
opts
=
=
EmitElemOption
:
:
CompoundAssign
)
{
if
(
!
emit1
(
JSOP_TOID
)
)
return
false
;
}
if
(
!
emitGetThisForSuperBase
(
pn
-
>
pn_left
)
)
return
false
;
if
(
opts
=
=
EmitElemOption
:
:
Call
)
{
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emitDupAt
(
1
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_SUPERBASE
)
)
return
false
;
if
(
opts
=
=
EmitElemOption
:
:
Set
&
&
!
emit2
(
JSOP_PICK
3
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitElemOpBase
(
JSOp
op
)
{
if
(
!
emit1
(
op
)
)
return
false
;
checkTypeSet
(
op
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitElemOp
(
ParseNode
*
pn
JSOp
op
)
{
EmitElemOption
opts
=
EmitElemOption
:
:
Get
;
if
(
op
=
=
JSOP_CALLELEM
)
opts
=
EmitElemOption
:
:
Call
;
else
if
(
op
=
=
JSOP_SETELEM
|
|
op
=
=
JSOP_STRICTSETELEM
)
opts
=
EmitElemOption
:
:
Set
;
return
emitElemOperands
(
pn
opts
)
&
&
emitElemOpBase
(
op
)
;
}
bool
BytecodeEmitter
:
:
emitSuperElemOp
(
ParseNode
*
pn
JSOp
op
bool
isCall
)
{
EmitElemOption
opts
=
EmitElemOption
:
:
Get
;
if
(
isCall
)
opts
=
EmitElemOption
:
:
Call
;
else
if
(
op
=
=
JSOP_SETELEM_SUPER
|
|
op
=
=
JSOP_STRICTSETELEM_SUPER
)
opts
=
EmitElemOption
:
:
Set
;
if
(
!
emitSuperElemOperands
(
pn
opts
)
)
return
false
;
if
(
!
emitElemOpBase
(
op
)
)
return
false
;
if
(
isCall
&
&
!
emit1
(
JSOP_SWAP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitElemIncDec
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
pn_kid
-
>
isKind
(
PNK_ELEM
)
)
;
bool
isSuper
=
pn
-
>
pn_kid
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
;
if
(
isSuper
)
{
if
(
!
emitSuperElemOperands
(
pn
-
>
pn_kid
EmitElemOption
:
:
IncDec
)
)
return
false
;
}
else
{
if
(
!
emitElemOperands
(
pn
-
>
pn_kid
EmitElemOption
:
:
IncDec
)
)
return
false
;
}
bool
post
;
JSOp
binop
=
GetIncDecInfo
(
pn
-
>
getKind
(
)
&
post
)
;
JSOp
getOp
;
if
(
isSuper
)
{
if
(
!
emitDupAt
(
2
)
)
return
false
;
if
(
!
emitDupAt
(
2
)
)
return
false
;
if
(
!
emitDupAt
(
2
)
)
return
false
;
getOp
=
JSOP_GETELEM_SUPER
;
}
else
{
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
getOp
=
JSOP_GETELEM
;
}
if
(
!
emitElemOpBase
(
getOp
)
)
return
false
;
if
(
!
emit1
(
JSOP_POS
)
)
return
false
;
if
(
post
&
&
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_ONE
)
)
return
false
;
if
(
!
emit1
(
binop
)
)
return
false
;
if
(
post
)
{
if
(
isSuper
)
{
if
(
!
emit2
(
JSOP_PICK
4
)
)
return
false
;
}
if
(
!
emit2
(
JSOP_PICK
3
+
isSuper
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
3
+
isSuper
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
2
+
isSuper
)
)
return
false
;
}
JSOp
setOp
=
isSuper
?
(
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM_SUPER
:
JSOP_SETELEM_SUPER
)
:
(
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM
:
JSOP_SETELEM
)
;
if
(
!
emitElemOpBase
(
setOp
)
)
return
false
;
if
(
post
&
&
!
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitCallIncDec
(
ParseNode
*
incDec
)
{
MOZ_ASSERT
(
incDec
-
>
isKind
(
PNK_PREINCREMENT
)
|
|
incDec
-
>
isKind
(
PNK_POSTINCREMENT
)
|
|
incDec
-
>
isKind
(
PNK_PREDECREMENT
)
|
|
incDec
-
>
isKind
(
PNK_POSTDECREMENT
)
)
;
MOZ_ASSERT
(
incDec
-
>
pn_kid
-
>
isKind
(
PNK_CALL
)
)
;
ParseNode
*
call
=
incDec
-
>
pn_kid
;
if
(
!
emitTree
(
call
)
)
return
false
;
if
(
!
emit1
(
JSOP_POS
)
)
return
false
;
return
emitUint16Operand
(
JSOP_THROWMSG
JSMSG_BAD_LEFTSIDE_OF_ASS
)
;
}
bool
BytecodeEmitter
:
:
emitNumberOp
(
double
dval
)
{
int32_t
ival
;
if
(
NumberIsInt32
(
dval
&
ival
)
)
{
if
(
ival
=
=
0
)
return
emit1
(
JSOP_ZERO
)
;
if
(
ival
=
=
1
)
return
emit1
(
JSOP_ONE
)
;
if
(
(
int
)
(
int8_t
)
ival
=
=
ival
)
return
emit2
(
JSOP_INT8
uint8_t
(
int8_t
(
ival
)
)
)
;
uint32_t
u
=
uint32_t
(
ival
)
;
if
(
u
<
JS_BIT
(
16
)
)
{
if
(
!
emitUint16Operand
(
JSOP_UINT16
u
)
)
return
false
;
}
else
if
(
u
<
JS_BIT
(
24
)
)
{
ptrdiff_t
off
;
if
(
!
emitN
(
JSOP_UINT24
3
&
off
)
)
return
false
;
SET_UINT24
(
code
(
off
)
u
)
;
}
else
{
ptrdiff_t
off
;
if
(
!
emitN
(
JSOP_INT32
4
&
off
)
)
return
false
;
SET_INT32
(
code
(
off
)
ival
)
;
}
return
true
;
}
if
(
!
constList
.
append
(
DoubleValue
(
dval
)
)
)
return
false
;
return
emitIndex32
(
JSOP_DOUBLE
constList
.
length
(
)
-
1
)
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitSwitch
(
ParseNode
*
pn
)
{
ParseNode
*
cases
=
pn
-
>
pn_right
;
MOZ_ASSERT
(
cases
-
>
isKind
(
PNK_LEXICALSCOPE
)
|
|
cases
-
>
isKind
(
PNK_STATEMENTLIST
)
)
;
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
Maybe
<
TDZCheckCache
>
tdzCache
;
Maybe
<
EmitterScope
>
emitterScope
;
if
(
cases
-
>
isKind
(
PNK_LEXICALSCOPE
)
)
{
if
(
!
cases
-
>
isEmptyScope
(
)
)
{
tdzCache
.
emplace
(
this
)
;
emitterScope
.
emplace
(
this
)
;
if
(
!
emitterScope
-
>
enterLexical
(
this
ScopeKind
:
:
Lexical
cases
-
>
scopeBindings
(
)
)
)
return
false
;
}
cases
=
cases
-
>
scopeBody
(
)
;
if
(
cases
-
>
pn_xflags
&
PNX_FUNCDEFS
)
{
MOZ_ASSERT
(
emitterScope
)
;
for
(
ParseNode
*
caseNode
=
cases
-
>
pn_head
;
caseNode
;
caseNode
=
caseNode
-
>
pn_next
)
{
if
(
caseNode
-
>
pn_right
-
>
pn_xflags
&
PNX_FUNCDEFS
)
{
if
(
!
emitHoistedFunctionsInList
(
caseNode
-
>
pn_right
)
)
return
false
;
}
}
}
}
BreakableControl
controlInfo
(
this
StatementKind
:
:
Switch
)
;
ptrdiff_t
top
=
offset
(
)
;
uint32_t
caseCount
=
cases
-
>
pn_count
;
if
(
caseCount
>
JS_BIT
(
16
)
)
{
parser
-
>
tokenStream
.
reportError
(
JSMSG_TOO_MANY_CASES
)
;
return
false
;
}
JSOp
switchOp
=
JSOP_TABLESWITCH
;
uint32_t
tableLength
=
0
;
int32_t
low
high
;
bool
hasDefault
=
false
;
CaseClause
*
firstCase
=
cases
-
>
pn_head
?
&
cases
-
>
pn_head
-
>
as
<
CaseClause
>
(
)
:
nullptr
;
if
(
caseCount
=
=
0
|
|
(
caseCount
=
=
1
&
&
(
hasDefault
=
firstCase
-
>
isDefault
(
)
)
)
)
{
caseCount
=
0
;
low
=
0
;
high
=
-
1
;
}
else
{
Vector
<
jsbitmap
128
SystemAllocPolicy
>
intmap
;
int32_t
intmapBitLength
=
0
;
low
=
JSVAL_INT_MAX
;
high
=
JSVAL_INT_MIN
;
for
(
CaseClause
*
caseNode
=
firstCase
;
caseNode
;
caseNode
=
caseNode
-
>
next
(
)
)
{
if
(
caseNode
-
>
isDefault
(
)
)
{
hasDefault
=
true
;
caseCount
-
-
;
continue
;
}
if
(
switchOp
=
=
JSOP_CONDSWITCH
)
continue
;
MOZ_ASSERT
(
switchOp
=
=
JSOP_TABLESWITCH
)
;
ParseNode
*
caseValue
=
caseNode
-
>
caseExpression
(
)
;
if
(
caseValue
-
>
getKind
(
)
!
=
PNK_NUMBER
)
{
switchOp
=
JSOP_CONDSWITCH
;
continue
;
}
int32_t
i
;
if
(
!
NumberIsInt32
(
caseValue
-
>
pn_dval
&
i
)
)
{
switchOp
=
JSOP_CONDSWITCH
;
continue
;
}
if
(
unsigned
(
i
+
int
(
JS_BIT
(
15
)
)
)
>
=
unsigned
(
JS_BIT
(
16
)
)
)
{
switchOp
=
JSOP_CONDSWITCH
;
continue
;
}
if
(
i
<
low
)
low
=
i
;
if
(
i
>
high
)
high
=
i
;
if
(
i
<
0
)
i
+
=
JS_BIT
(
16
)
;
if
(
i
>
=
intmapBitLength
)
{
size_t
newLength
=
(
i
/
JS_BITMAP_NBITS
)
+
1
;
if
(
!
intmap
.
resize
(
newLength
)
)
return
false
;
intmapBitLength
=
newLength
*
JS_BITMAP_NBITS
;
}
if
(
JS_TEST_BIT
(
intmap
i
)
)
{
switchOp
=
JSOP_CONDSWITCH
;
continue
;
}
JS_SET_BIT
(
intmap
i
)
;
}
if
(
switchOp
=
=
JSOP_TABLESWITCH
)
{
tableLength
=
uint32_t
(
high
-
low
+
1
)
;
if
(
tableLength
>
=
JS_BIT
(
16
)
|
|
tableLength
>
2
*
caseCount
)
switchOp
=
JSOP_CONDSWITCH
;
}
}
unsigned
noteIndex
;
size_t
switchSize
;
if
(
switchOp
=
=
JSOP_CONDSWITCH
)
{
switchSize
=
0
;
if
(
!
newSrcNote3
(
SRC_CONDSWITCH
0
0
&
noteIndex
)
)
return
false
;
}
else
{
MOZ_ASSERT
(
switchOp
=
=
JSOP_TABLESWITCH
)
;
switchSize
=
size_t
(
JUMP_OFFSET_LEN
*
(
3
+
tableLength
)
)
;
if
(
!
newSrcNote2
(
SRC_TABLESWITCH
0
&
noteIndex
)
)
return
false
;
}
MOZ_ASSERT
(
top
=
=
offset
(
)
)
;
if
(
!
emitN
(
switchOp
switchSize
)
)
return
false
;
Vector
<
CaseClause
*
32
SystemAllocPolicy
>
table
;
JumpList
condSwitchDefaultOff
;
if
(
switchOp
=
=
JSOP_CONDSWITCH
)
{
unsigned
caseNoteIndex
;
bool
beforeCases
=
true
;
ptrdiff_t
lastCaseOffset
=
-
1
;
TDZCheckCache
tdzCache
(
this
)
;
for
(
CaseClause
*
caseNode
=
firstCase
;
caseNode
;
caseNode
=
caseNode
-
>
next
(
)
)
{
ParseNode
*
caseValue
=
caseNode
-
>
caseExpression
(
)
;
if
(
caseValue
)
{
if
(
!
emitTree
(
caseValue
caseValue
-
>
isLiteral
(
)
?
SUPPRESS_LINENOTE
:
EMIT_LINENOTE
)
)
{
return
false
;
}
}
if
(
!
beforeCases
)
{
if
(
!
setSrcNoteOffset
(
caseNoteIndex
0
offset
(
)
-
lastCaseOffset
)
)
return
false
;
}
if
(
!
caseValue
)
{
continue
;
}
if
(
!
newSrcNote2
(
SRC_NEXTCASE
0
&
caseNoteIndex
)
)
return
false
;
JumpList
caseJump
;
if
(
!
emitJump
(
JSOP_CASE
&
caseJump
)
)
return
false
;
caseNode
-
>
setOffset
(
caseJump
.
offset
)
;
lastCaseOffset
=
caseJump
.
offset
;
if
(
beforeCases
)
{
unsigned
noteCount
=
notes
(
)
.
length
(
)
;
if
(
!
setSrcNoteOffset
(
noteIndex
1
lastCaseOffset
-
top
)
)
return
false
;
unsigned
noteCountDelta
=
notes
(
)
.
length
(
)
-
noteCount
;
if
(
noteCountDelta
!
=
0
)
caseNoteIndex
+
=
noteCountDelta
;
beforeCases
=
false
;
}
}
if
(
!
hasDefault
&
&
!
beforeCases
&
&
!
setSrcNoteOffset
(
caseNoteIndex
0
offset
(
)
-
lastCaseOffset
)
)
{
return
false
;
}
if
(
!
emitJump
(
JSOP_DEFAULT
&
condSwitchDefaultOff
)
)
return
false
;
}
else
{
MOZ_ASSERT
(
switchOp
=
=
JSOP_TABLESWITCH
)
;
jsbytecode
*
pc
=
code
(
top
+
JUMP_OFFSET_LEN
)
;
SET_JUMP_OFFSET
(
pc
low
)
;
pc
+
=
JUMP_OFFSET_LEN
;
SET_JUMP_OFFSET
(
pc
high
)
;
pc
+
=
JUMP_OFFSET_LEN
;
if
(
tableLength
!
=
0
)
{
if
(
!
table
.
growBy
(
tableLength
)
)
return
false
;
for
(
CaseClause
*
caseNode
=
firstCase
;
caseNode
;
caseNode
=
caseNode
-
>
next
(
)
)
{
if
(
ParseNode
*
caseValue
=
caseNode
-
>
caseExpression
(
)
)
{
MOZ_ASSERT
(
caseValue
-
>
isKind
(
PNK_NUMBER
)
)
;
int32_t
i
=
int32_t
(
caseValue
-
>
pn_dval
)
;
MOZ_ASSERT
(
double
(
i
)
=
=
caseValue
-
>
pn_dval
)
;
i
-
=
low
;
MOZ_ASSERT
(
uint32_t
(
i
)
<
tableLength
)
;
MOZ_ASSERT
(
!
table
[
i
]
)
;
table
[
i
]
=
caseNode
;
}
}
}
}
JumpTarget
defaultOffset
{
-
1
}
;
for
(
CaseClause
*
caseNode
=
firstCase
;
caseNode
;
caseNode
=
caseNode
-
>
next
(
)
)
{
if
(
switchOp
=
=
JSOP_CONDSWITCH
&
&
!
caseNode
-
>
isDefault
(
)
)
{
JumpList
caseCond
;
caseCond
.
offset
=
caseNode
-
>
offset
(
)
;
if
(
!
emitJumpTargetAndPatch
(
caseCond
)
)
return
false
;
}
JumpTarget
here
;
if
(
!
emitJumpTarget
(
&
here
)
)
return
false
;
if
(
caseNode
-
>
isDefault
(
)
)
defaultOffset
=
here
;
caseNode
-
>
setOffset
(
here
.
offset
)
;
TDZCheckCache
tdzCache
(
this
)
;
if
(
!
emitTree
(
caseNode
-
>
statementList
(
)
)
)
return
false
;
}
if
(
!
hasDefault
)
{
if
(
!
emitJumpTarget
(
&
defaultOffset
)
)
return
false
;
}
MOZ_ASSERT
(
defaultOffset
.
offset
!
=
-
1
)
;
jsbytecode
*
pc
;
if
(
switchOp
=
=
JSOP_CONDSWITCH
)
{
pc
=
nullptr
;
patchJumpsToTarget
(
condSwitchDefaultOff
defaultOffset
)
;
}
else
{
MOZ_ASSERT
(
switchOp
=
=
JSOP_TABLESWITCH
)
;
pc
=
code
(
top
)
;
SET_JUMP_OFFSET
(
pc
defaultOffset
.
offset
-
top
)
;
pc
+
=
JUMP_OFFSET_LEN
;
}
if
(
!
setSrcNoteOffset
(
noteIndex
0
lastNonJumpTargetOffset
(
)
-
top
)
)
return
false
;
if
(
switchOp
=
=
JSOP_TABLESWITCH
)
{
pc
+
=
2
*
JUMP_OFFSET_LEN
;
for
(
uint32_t
i
=
0
;
i
<
tableLength
;
i
+
+
)
{
CaseClause
*
caseNode
=
table
[
i
]
;
ptrdiff_t
off
=
caseNode
?
caseNode
-
>
offset
(
)
-
top
:
0
;
SET_JUMP_OFFSET
(
pc
off
)
;
pc
+
=
JUMP_OFFSET_LEN
;
}
}
if
(
!
controlInfo
.
patchBreaks
(
this
)
)
return
false
;
if
(
emitterScope
&
&
!
emitterScope
-
>
leave
(
this
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
isRunOnceLambda
(
)
{
if
(
!
(
parent
&
&
parent
-
>
emittingRunOnceLambda
)
&
&
(
emitterMode
!
=
LazyFunction
|
|
!
lazyScript
-
>
treatAsRunOnce
(
)
)
)
{
return
false
;
}
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
return
!
funbox
-
>
argumentsHasLocalBinding
(
)
&
&
!
funbox
-
>
isGenerator
(
)
&
&
!
funbox
-
>
function
(
)
-
>
explicitName
(
)
;
}
bool
BytecodeEmitter
:
:
emitYieldOp
(
JSOp
op
)
{
if
(
op
=
=
JSOP_FINALYIELDRVAL
)
return
emit1
(
JSOP_FINALYIELDRVAL
)
;
MOZ_ASSERT
(
op
=
=
JSOP_INITIALYIELD
|
|
op
=
=
JSOP_YIELD
)
;
ptrdiff_t
off
;
if
(
!
emitN
(
op
3
&
off
)
)
return
false
;
uint32_t
yieldIndex
=
yieldOffsetList
.
length
(
)
;
if
(
yieldIndex
>
=
JS_BIT
(
24
)
)
{
reportError
(
nullptr
JSMSG_TOO_MANY_YIELDS
)
;
return
false
;
}
SET_UINT24
(
code
(
off
)
yieldIndex
)
;
if
(
!
yieldOffsetList
.
append
(
offset
(
)
)
)
return
false
;
return
emit1
(
JSOP_DEBUGAFTERYIELD
)
;
}
bool
BytecodeEmitter
:
:
emitSetThis
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_SETTHIS
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_left
-
>
isKind
(
PNK_NAME
)
)
;
RootedAtom
name
(
cx
pn
-
>
pn_left
-
>
name
(
)
)
;
auto
emitRhs
=
[
&
name
pn
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
if
(
!
bce
-
>
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
if
(
!
bce
-
>
emitGetName
(
name
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_CHECKTHISREINIT
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
;
NameLocation
loc
=
lookupName
(
name
)
;
NameLocation
lexicalLoc
;
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
FrameSlot
)
{
lexicalLoc
=
NameLocation
:
:
FrameSlot
(
BindingKind
:
:
Let
loc
.
frameSlot
(
)
)
;
}
else
if
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
EnvironmentCoordinate
)
{
EnvironmentCoordinate
coord
=
loc
.
environmentCoordinate
(
)
;
uint8_t
hops
=
AssertedCast
<
uint8_t
>
(
coord
.
hops
(
)
)
;
lexicalLoc
=
NameLocation
:
:
EnvironmentCoordinate
(
BindingKind
:
:
Let
hops
coord
.
slot
(
)
)
;
}
else
{
MOZ_ASSERT
(
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
Dynamic
)
;
lexicalLoc
=
loc
;
}
return
emitSetOrInitializeNameAtLocation
(
name
lexicalLoc
emitRhs
true
)
;
}
bool
BytecodeEmitter
:
:
emitScript
(
ParseNode
*
body
)
{
TDZCheckCache
tdzCache
(
this
)
;
EmitterScope
emitterScope
(
this
)
;
if
(
sc
-
>
isGlobalContext
(
)
)
{
switchToPrologue
(
)
;
if
(
!
emitterScope
.
enterGlobal
(
this
sc
-
>
asGlobalContext
(
)
)
)
return
false
;
switchToMain
(
)
;
}
else
if
(
sc
-
>
isEvalContext
(
)
)
{
switchToPrologue
(
)
;
if
(
!
emitterScope
.
enterEval
(
this
sc
-
>
asEvalContext
(
)
)
)
return
false
;
switchToMain
(
)
;
}
else
{
MOZ_ASSERT
(
sc
-
>
isModuleContext
(
)
)
;
if
(
!
emitterScope
.
enterModule
(
this
sc
-
>
asModuleContext
(
)
)
)
return
false
;
}
setFunctionBodyEndPos
(
body
-
>
pn_pos
)
;
if
(
sc
-
>
isEvalContext
(
)
&
&
!
sc
-
>
strict
(
)
&
&
body
-
>
isKind
(
PNK_LEXICALSCOPE
)
&
&
!
body
-
>
isEmptyScope
(
)
)
{
EmitterScope
lexicalEmitterScope
(
this
)
;
switchToPrologue
(
)
;
if
(
!
lexicalEmitterScope
.
enterLexical
(
this
ScopeKind
:
:
Lexical
body
-
>
scopeBindings
(
)
)
)
return
false
;
switchToMain
(
)
;
if
(
!
emitLexicalScopeBody
(
body
-
>
scopeBody
(
)
)
)
return
false
;
if
(
!
lexicalEmitterScope
.
leave
(
this
)
)
return
false
;
}
else
{
if
(
!
emitTree
(
body
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_RETRVAL
)
)
return
false
;
if
(
!
emitterScope
.
leave
(
this
)
)
return
false
;
if
(
!
JSScript
:
:
fullyInitFromEmitter
(
cx
script
this
)
)
return
false
;
if
(
!
maybeSetDisplayURL
(
)
|
|
!
maybeSetSourceMap
(
)
)
return
false
;
tellDebuggerAboutCompiledScript
(
cx
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitFunctionScript
(
ParseNode
*
body
)
{
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
Maybe
<
EmitterScope
>
namedLambdaEmitterScope
;
if
(
funbox
-
>
namedLambdaBindings
(
)
)
{
namedLambdaEmitterScope
.
emplace
(
this
)
;
if
(
!
namedLambdaEmitterScope
-
>
enterNamedLambda
(
this
funbox
)
)
return
false
;
}
if
(
isRunOnceLambda
(
)
)
{
script
-
>
setTreatAsRunOnce
(
)
;
MOZ_ASSERT
(
!
script
-
>
hasRunOnce
(
)
)
;
switchToPrologue
(
)
;
if
(
!
emit1
(
JSOP_RUNONCE
)
)
return
false
;
switchToMain
(
)
;
}
setFunctionBodyEndPos
(
body
-
>
pn_pos
)
;
if
(
!
emitTree
(
body
)
)
return
false
;
if
(
!
updateSourceCoordNotes
(
body
-
>
pn_pos
.
end
)
)
return
false
;
if
(
!
emit1
(
JSOP_RETRVAL
)
)
return
false
;
if
(
namedLambdaEmitterScope
)
{
if
(
!
namedLambdaEmitterScope
-
>
leave
(
this
)
)
return
false
;
namedLambdaEmitterScope
.
reset
(
)
;
}
if
(
!
JSScript
:
:
fullyInitFromEmitter
(
cx
script
this
)
)
return
false
;
if
(
emitterMode
!
=
LazyFunction
&
&
!
parent
)
{
if
(
!
maybeSetDisplayURL
(
)
|
|
!
maybeSetSourceMap
(
)
)
return
false
;
tellDebuggerAboutCompiledScript
(
cx
)
;
}
return
true
;
}
template
<
typename
NameEmitter
>
bool
BytecodeEmitter
:
:
emitDestructuringDeclsWithEmitter
(
ParseNode
*
pattern
NameEmitter
emitName
)
{
if
(
pattern
-
>
isKind
(
PNK_ARRAY
)
)
{
for
(
ParseNode
*
element
=
pattern
-
>
pn_head
;
element
;
element
=
element
-
>
pn_next
)
{
if
(
element
-
>
isKind
(
PNK_ELISION
)
)
continue
;
ParseNode
*
target
=
element
;
if
(
element
-
>
isKind
(
PNK_SPREAD
)
)
{
target
=
element
-
>
pn_kid
;
}
if
(
target
-
>
isKind
(
PNK_ASSIGN
)
)
target
=
target
-
>
pn_left
;
if
(
target
-
>
isKind
(
PNK_NAME
)
)
{
if
(
!
emitName
(
this
target
)
)
return
false
;
}
else
{
if
(
!
emitDestructuringDeclsWithEmitter
(
target
emitName
)
)
return
false
;
}
}
return
true
;
}
MOZ_ASSERT
(
pattern
-
>
isKind
(
PNK_OBJECT
)
)
;
for
(
ParseNode
*
member
=
pattern
-
>
pn_head
;
member
;
member
=
member
-
>
pn_next
)
{
MOZ_ASSERT
(
member
-
>
isKind
(
PNK_MUTATEPROTO
)
|
|
member
-
>
isKind
(
PNK_COLON
)
|
|
member
-
>
isKind
(
PNK_SHORTHAND
)
)
;
ParseNode
*
target
=
member
-
>
isKind
(
PNK_MUTATEPROTO
)
?
member
-
>
pn_kid
:
member
-
>
pn_right
;
if
(
target
-
>
isKind
(
PNK_ASSIGN
)
)
target
=
target
-
>
pn_left
;
if
(
target
-
>
isKind
(
PNK_NAME
)
)
{
if
(
!
emitName
(
this
target
)
)
return
false
;
}
else
{
if
(
!
emitDestructuringDeclsWithEmitter
(
target
emitName
)
)
return
false
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitDestructuringLHS
(
ParseNode
*
target
DestructuringFlavor
flav
)
{
if
(
target
-
>
isKind
(
PNK_SPREAD
)
)
target
=
target
-
>
pn_kid
;
else
if
(
target
-
>
isKind
(
PNK_ASSIGN
)
)
target
=
target
-
>
pn_left
;
if
(
target
-
>
isKind
(
PNK_ARRAY
)
|
|
target
-
>
isKind
(
PNK_OBJECT
)
)
{
if
(
!
emitDestructuringOps
(
target
flav
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
else
{
switch
(
target
-
>
getKind
(
)
)
{
case
PNK_NAME
:
{
auto
emitSwapScopeAndRhs
=
[
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
emittedBindOp
)
{
if
(
emittedBindOp
)
{
return
bce
-
>
emit1
(
JSOP_SWAP
)
;
}
return
true
;
}
;
RootedAtom
name
(
cx
target
-
>
name
(
)
)
;
switch
(
flav
)
{
case
DestructuringDeclaration
:
if
(
!
emitInitializeName
(
name
emitSwapScopeAndRhs
)
)
return
false
;
break
;
case
DestructuringFormalParameterInVarScope
:
{
EmitterScope
*
funScope
=
innermostEmitterScope
-
>
enclosingInFrame
(
)
;
NameLocation
paramLoc
=
*
locationOfNameBoundInScope
(
name
funScope
)
;
if
(
!
emitSetOrInitializeNameAtLocation
(
name
paramLoc
emitSwapScopeAndRhs
true
)
)
return
false
;
break
;
}
case
DestructuringAssignment
:
if
(
!
emitSetName
(
name
emitSwapScopeAndRhs
)
)
return
false
;
break
;
}
break
;
}
case
PNK_DOT
:
{
JSOp
setOp
;
if
(
target
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperPropLHS
(
&
target
-
>
as
<
PropertyAccess
>
(
)
.
expression
(
)
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
2
)
)
return
false
;
setOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP_SUPER
:
JSOP_SETPROP_SUPER
;
}
else
{
if
(
!
emitTree
(
target
-
>
pn_expr
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
setOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP
:
JSOP_SETPROP
;
}
if
(
!
emitAtomOp
(
target
setOp
)
)
return
false
;
break
;
}
case
PNK_ELEM
:
{
if
(
target
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
JSOp
setOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM_SUPER
:
JSOP_SETELEM_SUPER
;
if
(
!
emitSuperElemOp
(
target
setOp
)
)
return
false
;
}
else
{
JSOp
setOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM
:
JSOP_SETELEM
;
if
(
!
emitElemOp
(
target
setOp
)
)
return
false
;
}
break
;
}
case
PNK_CALL
:
MOZ_ASSERT_UNREACHABLE
(
"
Parser
:
:
reportIfNotValidSimpleAssignmentTarget
"
"
rejects
function
calls
as
assignment
"
"
targets
in
destructuring
assignments
"
)
;
break
;
default
:
MOZ_CRASH
(
"
emitDestructuringLHS
:
bad
lhs
kind
"
)
;
}
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitIteratorNext
(
ParseNode
*
pn
bool
allowSelfHosted
)
{
MOZ_ASSERT
(
allowSelfHosted
|
|
emitterMode
!
=
BytecodeEmitter
:
:
SelfHosting
"
.
next
(
)
iteration
is
prohibited
in
self
-
hosted
code
because
it
"
"
can
run
user
-
modifiable
iteration
code
"
)
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
next
JSOP_CALLPROP
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emitCall
(
JSOP_CALL
0
pn
)
)
return
false
;
if
(
!
emitCheckIsObj
(
CheckIsObjectKind
:
:
IteratorNext
)
)
return
false
;
checkTypeSet
(
JSOP_CALL
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitDefault
(
ParseNode
*
defaultExpr
ParseNode
*
pattern
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_STRICTEQ
)
)
return
false
;
if
(
!
newSrcNote
(
SRC_IF
)
)
return
false
;
JumpList
jump
;
if
(
!
emitJump
(
JSOP_IFEQ
&
jump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emitInitializerInBranch
(
defaultExpr
pattern
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
jump
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
setOrEmitSetFunName
(
ParseNode
*
maybeFun
HandleAtom
name
FunctionPrefixKind
prefixKind
)
{
if
(
maybeFun
-
>
isKind
(
PNK_FUNCTION
)
)
{
RootedFunction
fun
(
cx
maybeFun
-
>
pn_funbox
-
>
function
(
)
)
;
if
(
fun
-
>
hasCompileTimeName
(
)
)
{
#
ifdef
DEBUG
RootedAtom
funName
(
cx
NameToFunctionName
(
cx
name
prefixKind
)
)
;
if
(
!
funName
)
return
false
;
MOZ_ASSERT
(
funName
=
=
maybeFun
-
>
pn_funbox
-
>
function
(
)
-
>
compileTimeName
(
)
)
;
#
endif
return
true
;
}
RootedAtom
funName
(
cx
NameToFunctionName
(
cx
name
prefixKind
)
)
;
if
(
!
funName
)
return
false
;
fun
-
>
setCompileTimeName
(
name
)
;
return
true
;
}
uint32_t
nameIndex
;
if
(
!
makeAtomIndex
(
name
&
nameIndex
)
)
return
false
;
if
(
!
emitIndexOp
(
JSOP_STRING
nameIndex
)
)
return
false
;
uint8_t
kind
=
uint8_t
(
prefixKind
)
;
if
(
!
emit2
(
JSOP_SETFUNNAME
kind
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitInitializer
(
ParseNode
*
initializer
ParseNode
*
pattern
)
{
if
(
!
emitTree
(
initializer
)
)
return
false
;
if
(
!
pattern
-
>
isInParens
(
)
&
&
pattern
-
>
isKind
(
PNK_NAME
)
&
&
initializer
-
>
isDirectRHSAnonFunction
(
)
)
{
RootedAtom
name
(
cx
pattern
-
>
name
(
)
)
;
if
(
!
setOrEmitSetFunName
(
initializer
name
FunctionPrefixKind
:
:
None
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitInitializerInBranch
(
ParseNode
*
initializer
ParseNode
*
pattern
)
{
TDZCheckCache
tdzCache
(
this
)
;
return
emitInitializer
(
initializer
pattern
)
;
}
class
MOZ_STACK_CLASS
IfThenElseEmitter
{
BytecodeEmitter
*
bce_
;
JumpList
jumpAroundThen_
;
JumpList
jumpsAroundElse_
;
unsigned
noteIndex_
;
int32_t
thenDepth_
;
#
ifdef
DEBUG
int32_t
pushed_
;
bool
calculatedPushed_
;
#
endif
enum
State
{
Start
If
Cond
IfElse
Else
End
}
;
State
state_
;
public
:
explicit
IfThenElseEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
noteIndex_
(
-
1
)
thenDepth_
(
0
)
#
ifdef
DEBUG
pushed_
(
0
)
calculatedPushed_
(
false
)
#
endif
state_
(
Start
)
{
}
~
IfThenElseEmitter
(
)
{
}
private
:
bool
emitIf
(
State
nextState
)
{
MOZ_ASSERT
(
state_
=
=
Start
|
|
state_
=
=
Else
)
;
MOZ_ASSERT
(
nextState
=
=
If
|
|
nextState
=
=
IfElse
|
|
nextState
=
=
Cond
)
;
if
(
state_
=
=
Else
)
jumpAroundThen_
=
JumpList
(
)
;
SrcNoteType
type
=
nextState
=
=
If
?
SRC_IF
:
nextState
=
=
IfElse
?
SRC_IF_ELSE
:
SRC_COND
;
if
(
!
bce_
-
>
newSrcNote
(
type
&
noteIndex_
)
)
return
false
;
if
(
!
bce_
-
>
emitJump
(
JSOP_IFEQ
&
jumpAroundThen_
)
)
return
false
;
#
ifdef
DEBUG
thenDepth_
=
bce_
-
>
stackDepth
;
#
else
if
(
nextState
=
=
IfElse
|
|
nextState
=
=
Cond
)
thenDepth_
=
bce_
-
>
stackDepth
;
#
endif
state_
=
nextState
;
return
true
;
}
public
:
bool
emitIf
(
)
{
return
emitIf
(
If
)
;
}
bool
emitCond
(
)
{
return
emitIf
(
Cond
)
;
}
bool
emitIfElse
(
)
{
return
emitIf
(
IfElse
)
;
}
bool
emitElse
(
)
{
MOZ_ASSERT
(
state_
=
=
IfElse
|
|
state_
=
=
Cond
)
;
calculateOrCheckPushed
(
)
;
if
(
!
bce_
-
>
emitJump
(
JSOP_GOTO
&
jumpsAroundElse_
)
)
return
false
;
if
(
!
bce_
-
>
emitJumpTargetAndPatch
(
jumpAroundThen_
)
)
return
false
;
if
(
!
bce_
-
>
setSrcNoteOffset
(
noteIndex_
0
jumpsAroundElse_
.
offset
-
jumpAroundThen_
.
offset
)
)
{
return
false
;
}
bce_
-
>
stackDepth
=
thenDepth_
;
state_
=
Else
;
return
true
;
}
bool
emitEnd
(
)
{
MOZ_ASSERT
(
state_
=
=
If
|
|
state_
=
=
Else
)
;
calculateOrCheckPushed
(
)
;
if
(
state_
=
=
If
)
{
if
(
!
bce_
-
>
emitJumpTargetAndPatch
(
jumpAroundThen_
)
)
return
false
;
}
if
(
!
bce_
-
>
emitJumpTargetAndPatch
(
jumpsAroundElse_
)
)
return
false
;
state_
=
End
;
return
true
;
}
void
calculateOrCheckPushed
(
)
{
#
ifdef
DEBUG
if
(
!
calculatedPushed_
)
{
pushed_
=
bce_
-
>
stackDepth
-
thenDepth_
;
calculatedPushed_
=
true
;
}
else
{
MOZ_ASSERT
(
pushed_
=
=
bce_
-
>
stackDepth
-
thenDepth_
)
;
}
#
endif
}
#
ifdef
DEBUG
int32_t
pushed
(
)
const
{
return
pushed_
;
}
int32_t
popped
(
)
const
{
return
-
pushed_
;
}
#
endif
}
;
bool
BytecodeEmitter
:
:
emitDestructuringOpsArray
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
{
MOZ_ASSERT
(
pattern
-
>
isKind
(
PNK_ARRAY
)
)
;
MOZ_ASSERT
(
pattern
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
this
-
>
stackDepth
!
=
0
)
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitIterator
(
)
)
return
false
;
for
(
ParseNode
*
member
=
pattern
-
>
pn_head
;
member
;
member
=
member
-
>
pn_next
)
{
bool
isHead
=
member
=
=
pattern
-
>
pn_head
;
bool
hasNext
=
!
!
member
-
>
pn_next
;
if
(
member
-
>
isKind
(
PNK_SPREAD
)
)
{
IfThenElseEmitter
ifThenElse
(
this
)
;
if
(
!
isHead
)
{
if
(
!
ifThenElse
.
emitIfElse
(
)
)
return
false
;
if
(
!
emitUint32Operand
(
JSOP_NEWARRAY
0
)
)
return
false
;
if
(
!
ifThenElse
.
emitElse
(
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitUint32Operand
(
JSOP_NEWARRAY
0
)
)
return
false
;
if
(
!
emitNumberOp
(
0
)
)
return
false
;
if
(
!
emitSpread
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
isHead
)
{
if
(
!
ifThenElse
.
emitEnd
(
)
)
return
false
;
MOZ_ASSERT
(
ifThenElse
.
pushed
(
)
=
=
1
)
;
}
if
(
!
emitDestructuringLHS
(
member
flav
)
)
return
false
;
MOZ_ASSERT
(
!
hasNext
)
;
break
;
}
ParseNode
*
pndefault
=
nullptr
;
ParseNode
*
subpattern
=
member
;
if
(
subpattern
-
>
isKind
(
PNK_ASSIGN
)
)
{
pndefault
=
subpattern
-
>
pn_right
;
subpattern
=
subpattern
-
>
pn_left
;
}
bool
isElision
=
subpattern
-
>
isKind
(
PNK_ELISION
)
;
MOZ_ASSERT
(
!
subpattern
-
>
isKind
(
PNK_SPREAD
)
)
;
IfThenElseEmitter
ifAlreadyDone
(
this
)
;
if
(
!
isHead
)
{
if
(
hasNext
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
}
if
(
!
ifAlreadyDone
.
emitIfElse
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_NOP_DESTRUCTURING
)
)
return
false
;
if
(
!
ifAlreadyDone
.
emitElse
(
)
)
return
false
;
if
(
hasNext
)
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitIteratorNext
(
pattern
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
done
JSOP_GETPROP
)
)
return
false
;
if
(
hasNext
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
}
IfThenElseEmitter
ifDone
(
this
)
;
if
(
!
ifDone
.
emitIfElse
(
)
)
return
false
;
if
(
hasNext
)
{
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_NOP_DESTRUCTURING
)
)
return
false
;
if
(
!
ifDone
.
emitElse
(
)
)
return
false
;
if
(
hasNext
)
{
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
value
JSOP_GETPROP
)
)
return
false
;
if
(
!
ifDone
.
emitEnd
(
)
)
return
false
;
MOZ_ASSERT
(
ifDone
.
pushed
(
)
=
=
0
)
;
if
(
!
isHead
)
{
if
(
!
ifAlreadyDone
.
emitEnd
(
)
)
return
false
;
MOZ_ASSERT
(
ifAlreadyDone
.
pushed
(
)
=
=
1
)
;
}
if
(
pndefault
)
{
if
(
!
emitDefault
(
pndefault
subpattern
)
)
return
false
;
}
if
(
!
isElision
)
{
if
(
!
emitDestructuringLHS
(
subpattern
flav
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitComputedPropertyName
(
ParseNode
*
computedPropName
)
{
MOZ_ASSERT
(
computedPropName
-
>
isKind
(
PNK_COMPUTED_NAME
)
)
;
return
emitTree
(
computedPropName
-
>
pn_kid
)
&
&
emit1
(
JSOP_TOID
)
;
}
bool
BytecodeEmitter
:
:
emitDestructuringOpsObject
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
{
MOZ_ASSERT
(
pattern
-
>
isKind
(
PNK_OBJECT
)
)
;
MOZ_ASSERT
(
pattern
-
>
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
this
-
>
stackDepth
>
0
)
;
if
(
!
emitRequireObjectCoercible
(
)
)
return
false
;
for
(
ParseNode
*
member
=
pattern
-
>
pn_head
;
member
;
member
=
member
-
>
pn_next
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
bool
needsGetElem
=
true
;
ParseNode
*
subpattern
;
if
(
member
-
>
isKind
(
PNK_MUTATEPROTO
)
)
{
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
proto
JSOP_GETPROP
)
)
return
false
;
needsGetElem
=
false
;
subpattern
=
member
-
>
pn_kid
;
}
else
{
MOZ_ASSERT
(
member
-
>
isKind
(
PNK_COLON
)
|
|
member
-
>
isKind
(
PNK_SHORTHAND
)
)
;
ParseNode
*
key
=
member
-
>
pn_left
;
if
(
key
-
>
isKind
(
PNK_NUMBER
)
)
{
if
(
!
emitNumberOp
(
key
-
>
pn_dval
)
)
return
false
;
}
else
if
(
key
-
>
isKind
(
PNK_OBJECT_PROPERTY_NAME
)
|
|
key
-
>
isKind
(
PNK_STRING
)
)
{
PropertyName
*
name
=
key
-
>
pn_atom
-
>
asPropertyName
(
)
;
jsid
id
=
NameToId
(
name
)
;
if
(
id
!
=
IdToTypeId
(
id
)
)
{
if
(
!
emitTree
(
key
)
)
return
false
;
}
else
{
if
(
!
emitAtomOp
(
name
JSOP_GETPROP
)
)
return
false
;
needsGetElem
=
false
;
}
}
else
{
if
(
!
emitComputedPropertyName
(
key
)
)
return
false
;
}
subpattern
=
member
-
>
pn_right
;
}
if
(
needsGetElem
&
&
!
emitElemOpBase
(
JSOP_GETELEM
)
)
return
false
;
if
(
subpattern
-
>
isKind
(
PNK_ASSIGN
)
)
{
if
(
!
emitDefault
(
subpattern
-
>
pn_right
subpattern
-
>
pn_left
)
)
return
false
;
subpattern
=
subpattern
-
>
pn_left
;
}
if
(
!
emitDestructuringLHS
(
subpattern
flav
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitDestructuringOps
(
ParseNode
*
pattern
DestructuringFlavor
flav
)
{
if
(
pattern
-
>
isKind
(
PNK_ARRAY
)
)
return
emitDestructuringOpsArray
(
pattern
flav
)
;
return
emitDestructuringOpsObject
(
pattern
flav
)
;
}
bool
BytecodeEmitter
:
:
emitTemplateString
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
bool
pushedString
=
false
;
for
(
ParseNode
*
pn2
=
pn
-
>
pn_head
;
pn2
!
=
NULL
;
pn2
=
pn2
-
>
pn_next
)
{
bool
isString
=
(
pn2
-
>
getKind
(
)
=
=
PNK_STRING
|
|
pn2
-
>
getKind
(
)
=
=
PNK_TEMPLATE_STRING
)
;
if
(
isString
&
&
pn2
-
>
pn_atom
-
>
empty
(
)
)
continue
;
if
(
!
isString
)
{
if
(
!
updateSourceCoordNotes
(
pn2
-
>
pn_pos
.
begin
)
)
return
false
;
}
if
(
!
emitTree
(
pn2
)
)
return
false
;
if
(
!
isString
)
{
if
(
!
emit1
(
JSOP_TOSTRING
)
)
return
false
;
}
if
(
pushedString
)
{
if
(
!
emit1
(
JSOP_ADD
)
)
return
false
;
}
else
{
pushedString
=
true
;
}
}
if
(
!
pushedString
)
{
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
empty
JSOP_STRING
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitDeclarationList
(
ParseNode
*
declList
)
{
MOZ_ASSERT
(
declList
-
>
isArity
(
PN_LIST
)
)
;
ParseNode
*
next
;
for
(
ParseNode
*
decl
=
declList
-
>
pn_head
;
decl
;
decl
=
next
)
{
if
(
!
updateSourceCoordNotes
(
decl
-
>
pn_pos
.
begin
)
)
return
false
;
next
=
decl
-
>
pn_next
;
if
(
decl
-
>
isKind
(
PNK_ASSIGN
)
)
{
MOZ_ASSERT
(
decl
-
>
isOp
(
JSOP_NOP
)
)
;
ParseNode
*
pattern
=
decl
-
>
pn_left
;
MOZ_ASSERT
(
pattern
-
>
isKind
(
PNK_ARRAY
)
|
|
pattern
-
>
isKind
(
PNK_OBJECT
)
)
;
if
(
!
emitTree
(
decl
-
>
pn_right
)
)
return
false
;
if
(
!
emitDestructuringOps
(
pattern
DestructuringDeclaration
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
else
{
if
(
!
emitSingleDeclaration
(
declList
decl
decl
-
>
expr
(
)
)
)
return
false
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitSingleDeclaration
(
ParseNode
*
declList
ParseNode
*
decl
ParseNode
*
initializer
)
{
MOZ_ASSERT
(
decl
-
>
isKind
(
PNK_NAME
)
)
;
if
(
!
initializer
&
&
declList
-
>
isKind
(
PNK_VAR
)
)
return
true
;
auto
emitRhs
=
[
initializer
declList
decl
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
if
(
!
initializer
)
{
MOZ_ASSERT
(
declList
-
>
isKind
(
PNK_LET
)
"
var
declarations
without
initializers
handled
above
"
"
and
const
declarations
must
have
initializers
"
)
;
return
bce
-
>
emit1
(
JSOP_UNDEFINED
)
;
}
MOZ_ASSERT
(
initializer
)
;
return
bce
-
>
emitInitializer
(
initializer
decl
)
;
}
;
if
(
!
emitInitializeName
(
decl
emitRhs
)
)
return
false
;
return
emit1
(
JSOP_POP
)
;
}
static
bool
EmitAssignmentRhs
(
BytecodeEmitter
*
bce
ParseNode
*
rhs
uint8_t
offset
)
{
if
(
rhs
)
return
bce
-
>
emitTree
(
rhs
)
;
if
(
offset
!
=
1
&
&
!
bce
-
>
emit2
(
JSOP_PICK
offset
-
1
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitAssignment
(
ParseNode
*
lhs
JSOp
op
ParseNode
*
rhs
)
{
if
(
lhs
-
>
isKind
(
PNK_NAME
)
)
{
auto
emitRhs
=
[
op
lhs
rhs
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
lhsLoc
bool
emittedBindOp
)
{
if
(
op
!
=
JSOP_NOP
)
{
if
(
lhsLoc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
Dynamic
)
{
if
(
!
bce
-
>
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
bce
-
>
emitAtomOp
(
lhs
JSOP_GETXPROP
)
)
return
false
;
}
else
{
if
(
!
bce
-
>
emitGetNameAtLocation
(
lhs
-
>
name
(
)
lhsLoc
)
)
return
false
;
}
}
if
(
!
EmitAssignmentRhs
(
bce
rhs
emittedBindOp
?
2
:
1
)
)
return
false
;
if
(
!
lhs
-
>
isInParens
(
)
&
&
op
=
=
JSOP_NOP
&
&
rhs
&
&
rhs
-
>
isDirectRHSAnonFunction
(
)
)
{
RootedAtom
name
(
bce
-
>
cx
lhs
-
>
name
(
)
)
;
if
(
!
bce
-
>
setOrEmitSetFunName
(
rhs
name
FunctionPrefixKind
:
:
None
)
)
return
false
;
}
if
(
op
!
=
JSOP_NOP
&
&
!
bce
-
>
emit1
(
op
)
)
return
false
;
return
true
;
}
;
return
emitSetName
(
lhs
emitRhs
)
;
}
uint32_t
atomIndex
=
(
uint32_t
)
-
1
;
uint8_t
offset
=
1
;
switch
(
lhs
-
>
getKind
(
)
)
{
case
PNK_DOT
:
if
(
lhs
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperPropLHS
(
&
lhs
-
>
as
<
PropertyAccess
>
(
)
.
expression
(
)
)
)
return
false
;
offset
+
=
2
;
}
else
{
if
(
!
emitTree
(
lhs
-
>
expr
(
)
)
)
return
false
;
offset
+
=
1
;
}
if
(
!
makeAtomIndex
(
lhs
-
>
pn_atom
&
atomIndex
)
)
return
false
;
break
;
case
PNK_ELEM
:
{
MOZ_ASSERT
(
lhs
-
>
isArity
(
PN_BINARY
)
)
;
EmitElemOption
opt
=
op
=
=
JSOP_NOP
?
EmitElemOption
:
:
Get
:
EmitElemOption
:
:
CompoundAssign
;
if
(
lhs
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperElemOperands
(
lhs
opt
)
)
return
false
;
offset
+
=
3
;
}
else
{
if
(
!
emitElemOperands
(
lhs
opt
)
)
return
false
;
offset
+
=
2
;
}
break
;
}
case
PNK_ARRAY
:
case
PNK_OBJECT
:
break
;
case
PNK_CALL
:
if
(
!
emitTree
(
lhs
)
)
return
false
;
if
(
!
emitUint16Operand
(
JSOP_THROWMSG
JSMSG_BAD_LEFTSIDE_OF_ASS
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
break
;
default
:
MOZ_ASSERT
(
0
)
;
}
if
(
op
!
=
JSOP_NOP
)
{
MOZ_ASSERT
(
rhs
)
;
switch
(
lhs
-
>
getKind
(
)
)
{
case
PNK_DOT
:
{
JSOp
getOp
;
if
(
lhs
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
getOp
=
JSOP_GETPROP_SUPER
;
}
else
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
bool
isLength
=
(
lhs
-
>
pn_atom
=
=
cx
-
>
names
(
)
.
length
)
;
getOp
=
isLength
?
JSOP_LENGTH
:
JSOP_GETPROP
;
}
if
(
!
emitIndex32
(
getOp
atomIndex
)
)
return
false
;
break
;
}
case
PNK_ELEM
:
{
JSOp
elemOp
;
if
(
lhs
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitDupAt
(
2
)
)
return
false
;
if
(
!
emitDupAt
(
2
)
)
return
false
;
if
(
!
emitDupAt
(
2
)
)
return
false
;
elemOp
=
JSOP_GETELEM_SUPER
;
}
else
{
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
elemOp
=
JSOP_GETELEM
;
}
if
(
!
emitElemOpBase
(
elemOp
)
)
return
false
;
break
;
}
case
PNK_CALL
:
if
(
!
emit1
(
JSOP_NULL
)
)
return
false
;
break
;
default
:
;
}
}
if
(
!
EmitAssignmentRhs
(
this
rhs
offset
)
)
return
false
;
if
(
op
!
=
JSOP_NOP
)
{
if
(
!
newSrcNote
(
SRC_ASSIGNOP
)
)
return
false
;
if
(
!
emit1
(
op
)
)
return
false
;
}
switch
(
lhs
-
>
getKind
(
)
)
{
case
PNK_DOT
:
{
JSOp
setOp
=
lhs
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
?
(
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP_SUPER
:
JSOP_SETPROP_SUPER
)
:
(
sc
-
>
strict
(
)
?
JSOP_STRICTSETPROP
:
JSOP_SETPROP
)
;
if
(
!
emitIndexOp
(
setOp
atomIndex
)
)
return
false
;
break
;
}
case
PNK_CALL
:
break
;
case
PNK_ELEM
:
{
JSOp
setOp
=
lhs
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
?
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM_SUPER
:
JSOP_SETELEM_SUPER
:
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM
:
JSOP_SETELEM
;
if
(
!
emit1
(
setOp
)
)
return
false
;
break
;
}
case
PNK_ARRAY
:
case
PNK_OBJECT
:
if
(
!
emitDestructuringOps
(
lhs
DestructuringAssignment
)
)
return
false
;
break
;
default
:
MOZ_ASSERT
(
0
)
;
}
return
true
;
}
bool
ParseNode
:
:
getConstantValue
(
ExclusiveContext
*
cx
AllowConstantObjects
allowObjects
MutableHandleValue
vp
Value
*
compare
size_t
ncompare
NewObjectKind
newKind
)
{
MOZ_ASSERT
(
newKind
=
=
TenuredObject
|
|
newKind
=
=
SingletonObject
)
;
switch
(
getKind
(
)
)
{
case
PNK_NUMBER
:
vp
.
setNumber
(
pn_dval
)
;
return
true
;
case
PNK_TEMPLATE_STRING
:
case
PNK_STRING
:
vp
.
setString
(
pn_atom
)
;
return
true
;
case
PNK_TRUE
:
vp
.
setBoolean
(
true
)
;
return
true
;
case
PNK_FALSE
:
vp
.
setBoolean
(
false
)
;
return
true
;
case
PNK_NULL
:
vp
.
setNull
(
)
;
return
true
;
case
PNK_CALLSITEOBJ
:
case
PNK_ARRAY
:
{
unsigned
count
;
ParseNode
*
pn
;
if
(
allowObjects
=
=
DontAllowObjects
)
{
vp
.
setMagic
(
JS_GENERIC_MAGIC
)
;
return
true
;
}
ObjectGroup
:
:
NewArrayKind
arrayKind
=
ObjectGroup
:
:
NewArrayKind
:
:
Normal
;
if
(
allowObjects
=
=
ForCopyOnWriteArray
)
{
arrayKind
=
ObjectGroup
:
:
NewArrayKind
:
:
CopyOnWrite
;
allowObjects
=
DontAllowObjects
;
}
if
(
getKind
(
)
=
=
PNK_CALLSITEOBJ
)
{
count
=
pn_count
-
1
;
pn
=
pn_head
-
>
pn_next
;
}
else
{
MOZ_ASSERT
(
isOp
(
JSOP_NEWINIT
)
&
&
!
(
pn_xflags
&
PNX_NONCONST
)
)
;
count
=
pn_count
;
pn
=
pn_head
;
}
AutoValueVector
values
(
cx
)
;
if
(
!
values
.
appendN
(
MagicValue
(
JS_ELEMENTS_HOLE
)
count
)
)
return
false
;
size_t
idx
;
for
(
idx
=
0
;
pn
;
idx
+
+
pn
=
pn
-
>
pn_next
)
{
if
(
!
pn
-
>
getConstantValue
(
cx
allowObjects
values
[
idx
]
values
.
begin
(
)
idx
)
)
return
false
;
if
(
values
[
idx
]
.
isMagic
(
JS_GENERIC_MAGIC
)
)
{
vp
.
setMagic
(
JS_GENERIC_MAGIC
)
;
return
true
;
}
}
MOZ_ASSERT
(
idx
=
=
count
)
;
JSObject
*
obj
=
ObjectGroup
:
:
newArrayObject
(
cx
values
.
begin
(
)
values
.
length
(
)
newKind
arrayKind
)
;
if
(
!
obj
)
return
false
;
if
(
!
CombineArrayElementTypes
(
cx
obj
compare
ncompare
)
)
return
false
;
vp
.
setObject
(
*
obj
)
;
return
true
;
}
case
PNK_OBJECT
:
{
MOZ_ASSERT
(
isOp
(
JSOP_NEWINIT
)
)
;
MOZ_ASSERT
(
!
(
pn_xflags
&
PNX_NONCONST
)
)
;
if
(
allowObjects
=
=
DontAllowObjects
)
{
vp
.
setMagic
(
JS_GENERIC_MAGIC
)
;
return
true
;
}
MOZ_ASSERT
(
allowObjects
=
=
AllowObjects
)
;
Rooted
<
IdValueVector
>
properties
(
cx
IdValueVector
(
cx
)
)
;
RootedValue
value
(
cx
)
idvalue
(
cx
)
;
for
(
ParseNode
*
pn
=
pn_head
;
pn
;
pn
=
pn
-
>
pn_next
)
{
if
(
!
pn
-
>
pn_right
-
>
getConstantValue
(
cx
allowObjects
&
value
)
)
return
false
;
if
(
value
.
isMagic
(
JS_GENERIC_MAGIC
)
)
{
vp
.
setMagic
(
JS_GENERIC_MAGIC
)
;
return
true
;
}
ParseNode
*
pnid
=
pn
-
>
pn_left
;
if
(
pnid
-
>
isKind
(
PNK_NUMBER
)
)
{
idvalue
=
NumberValue
(
pnid
-
>
pn_dval
)
;
}
else
{
MOZ_ASSERT
(
pnid
-
>
isKind
(
PNK_OBJECT_PROPERTY_NAME
)
|
|
pnid
-
>
isKind
(
PNK_STRING
)
)
;
MOZ_ASSERT
(
pnid
-
>
pn_atom
!
=
cx
-
>
names
(
)
.
proto
)
;
idvalue
=
StringValue
(
pnid
-
>
pn_atom
)
;
}
RootedId
id
(
cx
)
;
if
(
!
ValueToId
<
CanGC
>
(
cx
idvalue
&
id
)
)
return
false
;
if
(
!
properties
.
append
(
IdValuePair
(
id
value
)
)
)
return
false
;
}
JSObject
*
obj
=
ObjectGroup
:
:
newPlainObject
(
cx
properties
.
begin
(
)
properties
.
length
(
)
newKind
)
;
if
(
!
obj
)
return
false
;
if
(
!
CombinePlainObjectPropertyTypes
(
cx
obj
compare
ncompare
)
)
return
false
;
vp
.
setObject
(
*
obj
)
;
return
true
;
}
default
:
MOZ_CRASH
(
"
Unexpected
node
"
)
;
}
return
false
;
}
bool
BytecodeEmitter
:
:
emitSingletonInitialiser
(
ParseNode
*
pn
)
{
NewObjectKind
newKind
=
(
pn
-
>
getKind
(
)
=
=
PNK_OBJECT
)
?
SingletonObject
:
TenuredObject
;
RootedValue
value
(
cx
)
;
if
(
!
pn
-
>
getConstantValue
(
cx
ParseNode
:
:
AllowObjects
&
value
nullptr
0
newKind
)
)
return
false
;
MOZ_ASSERT_IF
(
newKind
=
=
SingletonObject
value
.
toObject
(
)
.
isSingleton
(
)
)
;
ObjectBox
*
objbox
=
parser
-
>
newObjectBox
(
&
value
.
toObject
(
)
)
;
if
(
!
objbox
)
return
false
;
return
emitObjectOp
(
objbox
JSOP_OBJECT
)
;
}
bool
BytecodeEmitter
:
:
emitCallSiteObject
(
ParseNode
*
pn
)
{
RootedValue
value
(
cx
)
;
if
(
!
pn
-
>
getConstantValue
(
cx
ParseNode
:
:
AllowObjects
&
value
)
)
return
false
;
MOZ_ASSERT
(
value
.
isObject
(
)
)
;
ObjectBox
*
objbox1
=
parser
-
>
newObjectBox
(
&
value
.
toObject
(
)
)
;
if
(
!
objbox1
)
return
false
;
if
(
!
pn
-
>
as
<
CallSiteNode
>
(
)
.
getRawArrayValue
(
cx
&
value
)
)
return
false
;
MOZ_ASSERT
(
value
.
isObject
(
)
)
;
ObjectBox
*
objbox2
=
parser
-
>
newObjectBox
(
&
value
.
toObject
(
)
)
;
if
(
!
objbox2
)
return
false
;
return
emitObjectPairOp
(
objbox1
objbox2
JSOP_CALLSITEOBJ
)
;
}
JS_STATIC_ASSERT
(
JSOP_NOP_LENGTH
=
=
1
)
;
JS_STATIC_ASSERT
(
JSOP_POP_LENGTH
=
=
1
)
;
namespace
{
class
EmitLevelManager
{
BytecodeEmitter
*
bce
;
public
:
explicit
EmitLevelManager
(
BytecodeEmitter
*
bce
)
:
bce
(
bce
)
{
bce
-
>
emitLevel
+
+
;
}
~
EmitLevelManager
(
)
{
bce
-
>
emitLevel
-
-
;
}
}
;
}
bool
BytecodeEmitter
:
:
emitCatch
(
ParseNode
*
pn
)
{
TryFinallyControl
&
controlInfo
=
innermostNestableControl
-
>
as
<
TryFinallyControl
>
(
)
;
if
(
!
emit1
(
JSOP_EXCEPTION
)
)
return
false
;
if
(
pn
-
>
pn_kid2
&
&
!
emit1
(
JSOP_DUP
)
)
return
false
;
ParseNode
*
pn2
=
pn
-
>
pn_kid1
;
switch
(
pn2
-
>
getKind
(
)
)
{
case
PNK_ARRAY
:
case
PNK_OBJECT
:
if
(
!
emitDestructuringOps
(
pn2
DestructuringDeclaration
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
break
;
case
PNK_NAME
:
if
(
!
emitLexicalInitialization
(
pn2
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
break
;
default
:
MOZ_ASSERT
(
0
)
;
}
if
(
pn
-
>
pn_kid2
)
{
if
(
!
emitTree
(
pn
-
>
pn_kid2
)
)
return
false
;
JumpList
guardCheck
;
if
(
!
emitJump
(
JSOP_IFNE
&
guardCheck
)
)
return
false
;
{
NonLocalExitControl
nle
(
this
)
;
if
(
!
emit1
(
JSOP_THROWING
)
)
return
false
;
if
(
!
nle
.
prepareForNonLocalJump
(
&
controlInfo
)
)
return
false
;
if
(
!
emitJump
(
JSOP_GOTO
&
controlInfo
.
guardJump
)
)
return
false
;
}
if
(
!
emitJumpTargetAndPatch
(
guardCheck
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
emitTree
(
pn
-
>
pn_kid3
)
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitTry
(
ParseNode
*
pn
)
{
TryFinallyControl
controlInfo
(
this
pn
-
>
pn_kid3
?
StatementKind
:
:
Finally
:
StatementKind
:
:
Try
)
;
int
depth
=
stackDepth
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_TRY
&
noteIndex
)
)
return
false
;
if
(
!
emit1
(
JSOP_TRY
)
)
return
false
;
ptrdiff_t
tryStart
=
offset
(
)
;
if
(
!
emitTree
(
pn
-
>
pn_kid1
)
)
return
false
;
MOZ_ASSERT
(
depth
=
=
stackDepth
)
;
if
(
pn
-
>
pn_kid3
)
{
if
(
!
emitJump
(
JSOP_GOSUB
&
controlInfo
.
gosubs
)
)
return
false
;
}
if
(
!
setSrcNoteOffset
(
noteIndex
0
offset
(
)
-
tryStart
+
JSOP_TRY_LENGTH
)
)
return
false
;
JumpList
catchJump
;
if
(
!
emitJump
(
JSOP_GOTO
&
catchJump
)
)
return
false
;
JumpTarget
tryEnd
;
if
(
!
emitJumpTarget
(
&
tryEnd
)
)
return
false
;
ParseNode
*
catchList
=
pn
-
>
pn_kid2
;
if
(
catchList
)
{
MOZ_ASSERT
(
catchList
-
>
isKind
(
PNK_CATCHLIST
)
)
;
for
(
ParseNode
*
pn3
=
catchList
-
>
pn_head
;
pn3
;
pn3
=
pn3
-
>
pn_next
)
{
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_SETRVAL
)
)
return
false
;
MOZ_ASSERT
(
pn3
-
>
isKind
(
PNK_LEXICALSCOPE
)
)
;
if
(
!
emitTree
(
pn3
)
)
return
false
;
if
(
pn
-
>
pn_kid3
)
{
if
(
!
emitJump
(
JSOP_GOSUB
&
controlInfo
.
gosubs
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
}
if
(
!
emitJump
(
JSOP_GOTO
&
catchJump
)
)
return
false
;
if
(
controlInfo
.
guardJump
.
offset
!
=
-
1
)
{
if
(
!
emitJumpTargetAndPatch
(
controlInfo
.
guardJump
)
)
return
false
;
controlInfo
.
guardJump
.
offset
=
-
1
;
if
(
!
pn3
-
>
pn_next
)
{
if
(
!
emit1
(
JSOP_EXCEPTION
)
)
return
false
;
if
(
!
emit1
(
JSOP_THROW
)
)
return
false
;
}
}
}
}
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
JumpTarget
finallyStart
{
0
}
;
if
(
pn
-
>
pn_kid3
)
{
if
(
!
emitJumpTarget
(
&
finallyStart
)
)
return
false
;
patchJumpsToTarget
(
controlInfo
.
gosubs
finallyStart
)
;
controlInfo
.
setEmittingSubroutine
(
)
;
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_kid3
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emit1
(
JSOP_FINALLY
)
)
return
false
;
if
(
!
emit1
(
JSOP_GETRVAL
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_SETRVAL
)
)
return
false
;
if
(
!
emitTree
(
pn
-
>
pn_kid3
)
)
return
false
;
if
(
!
emit1
(
JSOP_SETRVAL
)
)
return
false
;
if
(
!
emit1
(
JSOP_RETSUB
)
)
return
false
;
hasTryFinally
=
true
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
}
if
(
!
emit1
(
JSOP_NOP
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
catchJump
)
)
return
false
;
if
(
catchList
&
&
!
tryNoteList
.
append
(
JSTRY_CATCH
depth
tryStart
tryEnd
.
offset
)
)
return
false
;
if
(
pn
-
>
pn_kid3
&
&
!
tryNoteList
.
append
(
JSTRY_FINALLY
depth
tryStart
finallyStart
.
offset
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitIf
(
ParseNode
*
pn
)
{
IfThenElseEmitter
ifThenElse
(
this
)
;
if_again
:
if
(
!
emitTreeInBranch
(
pn
-
>
pn_kid1
)
)
return
false
;
ParseNode
*
elseNode
=
pn
-
>
pn_kid3
;
if
(
elseNode
)
{
if
(
!
ifThenElse
.
emitIfElse
(
)
)
return
false
;
}
else
{
if
(
!
ifThenElse
.
emitIf
(
)
)
return
false
;
}
if
(
!
emitTreeInBranch
(
pn
-
>
pn_kid2
)
)
return
false
;
if
(
elseNode
)
{
if
(
!
ifThenElse
.
emitElse
(
)
)
return
false
;
if
(
elseNode
-
>
isKind
(
PNK_IF
)
)
{
pn
=
elseNode
;
goto
if_again
;
}
if
(
!
emitTreeInBranch
(
elseNode
)
)
return
false
;
}
if
(
!
ifThenElse
.
emitEnd
(
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitHoistedFunctionsInList
(
ParseNode
*
list
)
{
MOZ_ASSERT
(
list
-
>
pn_xflags
&
PNX_FUNCDEFS
)
;
for
(
ParseNode
*
pn
=
list
-
>
pn_head
;
pn
;
pn
=
pn
-
>
pn_next
)
{
ParseNode
*
maybeFun
=
pn
;
if
(
!
sc
-
>
strict
(
)
)
{
while
(
maybeFun
-
>
isKind
(
PNK_LABEL
)
)
maybeFun
=
maybeFun
-
>
as
<
LabeledStatement
>
(
)
.
statement
(
)
;
}
if
(
maybeFun
-
>
isKind
(
PNK_FUNCTION
)
&
&
maybeFun
-
>
functionIsHoisted
(
)
)
{
if
(
!
emitTree
(
maybeFun
)
)
return
false
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitLexicalScopeBody
(
ParseNode
*
body
EmitLineNumberNote
emitLineNote
)
{
if
(
body
-
>
isKind
(
PNK_STATEMENTLIST
)
&
&
body
-
>
pn_xflags
&
PNX_FUNCDEFS
)
{
if
(
!
emitHoistedFunctionsInList
(
body
)
)
return
false
;
}
return
emitTree
(
body
emitLineNote
)
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitLexicalScope
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_LEXICALSCOPE
)
)
;
TDZCheckCache
tdzCache
(
this
)
;
ParseNode
*
body
=
pn
-
>
scopeBody
(
)
;
if
(
pn
-
>
isEmptyScope
(
)
)
return
emitLexicalScopeBody
(
body
)
;
if
(
!
ParseNodeRequiresSpecialLineNumberNotes
(
body
)
)
{
ParseNode
*
pnForPos
=
body
;
if
(
body
-
>
isKind
(
PNK_STATEMENTLIST
)
&
&
body
-
>
pn_head
)
pnForPos
=
body
-
>
pn_head
;
if
(
!
updateLineNumberNotes
(
pnForPos
-
>
pn_pos
.
begin
)
)
return
false
;
}
EmitterScope
emitterScope
(
this
)
;
ScopeKind
kind
;
if
(
body
-
>
isKind
(
PNK_CATCH
)
)
kind
=
body
-
>
pn_kid1
-
>
isKind
(
PNK_NAME
)
?
ScopeKind
:
:
SimpleCatch
:
ScopeKind
:
:
Catch
;
else
kind
=
ScopeKind
:
:
Lexical
;
if
(
!
emitterScope
.
enterLexical
(
this
kind
pn
-
>
scopeBindings
(
)
)
)
return
false
;
if
(
body
-
>
isKind
(
PNK_FOR
)
)
{
if
(
!
emitFor
(
body
&
emitterScope
)
)
return
false
;
}
else
{
if
(
!
emitLexicalScopeBody
(
body
SUPPRESS_LINENOTE
)
)
return
false
;
}
return
emitterScope
.
leave
(
this
)
;
}
bool
BytecodeEmitter
:
:
emitWith
(
ParseNode
*
pn
)
{
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
EmitterScope
emitterScope
(
this
)
;
if
(
!
emitterScope
.
enterWith
(
this
)
)
return
false
;
if
(
!
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
return
emitterScope
.
leave
(
this
)
;
}
bool
BytecodeEmitter
:
:
emitRequireObjectCoercible
(
)
{
#
ifdef
DEBUG
auto
depth
=
this
-
>
stackDepth
;
#
endif
MOZ_ASSERT
(
depth
>
0
)
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
RequireObjectCoercible
JSOP_GETINTRINSIC
)
)
{
return
false
;
}
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
2
)
)
return
false
;
if
(
!
emitCall
(
JSOP_CALL
1
)
)
return
false
;
checkTypeSet
(
JSOP_CALL
)
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
MOZ_ASSERT
(
depth
=
=
this
-
>
stackDepth
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitIterator
(
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit2
(
JSOP_SYMBOL
uint8_t
(
JS
:
:
SymbolCode
:
:
iterator
)
)
)
return
false
;
if
(
!
emitElemOpBase
(
JSOP_CALLELEM
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emitCall
(
JSOP_CALLITER
0
)
)
return
false
;
checkTypeSet
(
JSOP_CALLITER
)
;
if
(
!
emitCheckIsObj
(
CheckIsObjectKind
:
:
GetIterator
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSpread
(
bool
allowSelfHosted
)
{
LoopControl
loopInfo
(
this
StatementKind
:
:
Spread
)
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR_OF
&
noteIndex
)
)
return
false
;
JumpList
initialJump
;
if
(
!
emitJump
(
JSOP_GOTO
&
initialJump
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
nullptr
&
top
)
)
return
false
;
this
-
>
stackDepth
+
+
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
{
#
ifdef
DEBUG
auto
loopDepth
=
this
-
>
stackDepth
;
#
endif
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
value
JSOP_GETPROP
)
)
return
false
;
if
(
!
emit1
(
JSOP_INITELEM_INC
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
-
1
)
;
if
(
!
emitLoopEntry
(
nullptr
initialJump
)
)
return
false
;
if
(
!
emitDupAt
(
2
)
)
return
false
;
if
(
!
emitIteratorNext
(
nullptr
allowSelfHosted
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
done
JSOP_GETPROP
)
)
return
false
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
top
&
beq
&
breakTarget
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
)
;
}
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
initialJump
.
offset
)
)
return
false
;
MOZ_ASSERT
(
loopInfo
.
breaks
.
offset
=
=
-
1
)
;
MOZ_ASSERT
(
loopInfo
.
continues
.
offset
=
=
-
1
)
;
if
(
!
tryNoteList
.
append
(
JSTRY_FOR_OF
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
3
)
)
return
false
;
return
emitUint16Operand
(
JSOP_POPN
2
)
;
}
bool
BytecodeEmitter
:
:
emitInitializeForInOrOfTarget
(
ParseNode
*
forHead
)
{
MOZ_ASSERT
(
forHead
-
>
isKind
(
PNK_FORIN
)
|
|
forHead
-
>
isKind
(
PNK_FOROF
)
)
;
MOZ_ASSERT
(
forHead
-
>
isArity
(
PN_TERNARY
)
)
;
MOZ_ASSERT
(
this
-
>
stackDepth
>
=
1
"
must
have
a
per
-
iteration
value
for
initializing
"
)
;
ParseNode
*
target
=
forHead
-
>
pn_kid1
;
MOZ_ASSERT
(
!
forHead
-
>
pn_kid2
)
;
if
(
!
parser
-
>
handler
.
isDeclarationList
(
target
)
)
return
emitAssignment
(
target
JSOP_NOP
nullptr
)
;
if
(
!
updateSourceCoordNotes
(
target
-
>
pn_pos
.
begin
)
)
return
false
;
MOZ_ASSERT
(
target
-
>
isForLoopDeclaration
(
)
)
;
target
=
parser
-
>
handler
.
singleBindingFromDeclaration
(
target
)
;
if
(
target
-
>
isKind
(
PNK_NAME
)
)
{
auto
emitSwapScopeAndRhs
=
[
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
emittedBindOp
)
{
if
(
emittedBindOp
)
{
MOZ_ASSERT
(
bce
-
>
stackDepth
>
=
2
)
;
return
bce
-
>
emit1
(
JSOP_SWAP
)
;
}
MOZ_ASSERT
(
bce
-
>
stackDepth
>
=
1
)
;
return
true
;
}
;
return
emitInitializeName
(
target
emitSwapScopeAndRhs
)
;
}
MOZ_ASSERT
(
!
target
-
>
isKind
(
PNK_ASSIGN
)
"
for
-
in
/
of
loop
destructuring
declarations
can
'
t
have
initializers
"
)
;
MOZ_ASSERT
(
target
-
>
isKind
(
PNK_ARRAY
)
|
|
target
-
>
isKind
(
PNK_OBJECT
)
)
;
return
emitDestructuringOps
(
target
DestructuringDeclaration
)
;
}
bool
BytecodeEmitter
:
:
emitForOf
(
ParseNode
*
forOfLoop
EmitterScope
*
headLexicalEmitterScope
)
{
MOZ_ASSERT
(
forOfLoop
-
>
isKind
(
PNK_FOR
)
)
;
MOZ_ASSERT
(
forOfLoop
-
>
isArity
(
PN_BINARY
)
)
;
ParseNode
*
forOfHead
=
forOfLoop
-
>
pn_left
;
MOZ_ASSERT
(
forOfHead
-
>
isKind
(
PNK_FOROF
)
)
;
MOZ_ASSERT
(
forOfHead
-
>
isArity
(
PN_TERNARY
)
)
;
ParseNode
*
forHeadExpr
=
forOfHead
-
>
pn_kid3
;
if
(
!
emitTree
(
forHeadExpr
)
)
return
false
;
if
(
!
emitIterator
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
LoopControl
loopInfo
(
this
StatementKind
:
:
ForOfLoop
)
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR_OF
&
noteIndex
)
)
return
false
;
JumpList
initialJump
;
if
(
!
emitJump
(
JSOP_GOTO
&
initialJump
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
nullptr
&
top
)
)
return
false
;
if
(
headLexicalEmitterScope
)
{
DebugOnly
<
ParseNode
*
>
forOfTarget
=
forOfHead
-
>
pn_kid1
;
MOZ_ASSERT
(
forOfTarget
-
>
isKind
(
PNK_LET
)
|
|
forOfTarget
-
>
isKind
(
PNK_CONST
)
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
=
=
innermostEmitterScope
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
-
>
scope
(
this
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScope
-
>
hasEnvironment
(
)
)
{
if
(
!
emit1
(
JSOP_RECREATELEXICALENV
)
)
return
false
;
}
if
(
!
headLexicalEmitterScope
-
>
deadZoneFrameSlots
(
this
)
)
return
false
;
}
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
{
#
ifdef
DEBUG
auto
loopDepth
=
this
-
>
stackDepth
;
#
endif
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
value
JSOP_GETPROP
)
)
return
false
;
if
(
!
emitInitializeForInOrOfTarget
(
forOfHead
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
"
the
stack
must
be
balanced
around
the
initializing
"
"
operation
"
)
;
ParseNode
*
forBody
=
forOfLoop
-
>
pn_right
;
if
(
!
emitTree
(
forBody
)
)
return
false
;
loopInfo
.
continueTarget
=
{
offset
(
)
}
;
if
(
!
emitLoopEntry
(
forHeadExpr
initialJump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitIteratorNext
(
forOfHead
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
done
JSOP_GETPROP
)
)
return
false
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
top
&
beq
&
breakTarget
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
)
;
}
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
initialJump
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_FOR_OF
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
return
emitUint16Operand
(
JSOP_POPN
2
)
;
}
bool
BytecodeEmitter
:
:
emitForIn
(
ParseNode
*
forInLoop
EmitterScope
*
headLexicalEmitterScope
)
{
MOZ_ASSERT
(
forInLoop
-
>
isKind
(
PNK_FOR
)
)
;
MOZ_ASSERT
(
forInLoop
-
>
isArity
(
PN_BINARY
)
)
;
MOZ_ASSERT
(
forInLoop
-
>
isOp
(
JSOP_ITER
)
)
;
ParseNode
*
forInHead
=
forInLoop
-
>
pn_left
;
MOZ_ASSERT
(
forInHead
-
>
isKind
(
PNK_FORIN
)
)
;
MOZ_ASSERT
(
forInHead
-
>
isArity
(
PN_TERNARY
)
)
;
ParseNode
*
forInTarget
=
forInHead
-
>
pn_kid1
;
if
(
parser
-
>
handler
.
isDeclarationList
(
forInTarget
)
)
{
ParseNode
*
decl
=
parser
-
>
handler
.
singleBindingFromDeclaration
(
forInTarget
)
;
if
(
decl
-
>
isKind
(
PNK_NAME
)
)
{
if
(
ParseNode
*
initializer
=
decl
-
>
expr
(
)
)
{
MOZ_ASSERT
(
forInTarget
-
>
isKind
(
PNK_VAR
)
"
for
-
in
initializers
are
only
permitted
for
|
var
|
declarations
"
)
;
if
(
!
updateSourceCoordNotes
(
decl
-
>
pn_pos
.
begin
)
)
return
false
;
auto
emitRhs
=
[
decl
initializer
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
return
bce
-
>
emitInitializer
(
initializer
decl
)
;
}
;
if
(
!
emitInitializeName
(
decl
emitRhs
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
}
ParseNode
*
expr
=
forInHead
-
>
pn_kid3
;
if
(
!
emitTree
(
expr
)
)
return
false
;
unsigned
iflags
=
forInLoop
-
>
pn_iflags
;
MOZ_ASSERT
(
0
=
=
(
iflags
&
~
(
JSITER_FOREACH
|
JSITER_ENUMERATE
)
)
)
;
if
(
!
emit2
(
JSOP_ITER
AssertedCast
<
uint8_t
>
(
iflags
)
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
LoopControl
loopInfo
(
this
StatementKind
:
:
ForInLoop
)
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR_IN
&
noteIndex
)
)
return
false
;
JumpList
initialJump
;
if
(
!
emitJump
(
JSOP_GOTO
&
initialJump
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
nullptr
&
top
)
)
return
false
;
if
(
headLexicalEmitterScope
)
{
MOZ_ASSERT
(
forInTarget
-
>
isKind
(
PNK_LET
)
|
|
forInTarget
-
>
isKind
(
PNK_CONST
)
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
=
=
innermostEmitterScope
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
-
>
scope
(
this
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScope
-
>
hasEnvironment
(
)
)
{
if
(
!
emit1
(
JSOP_RECREATELEXICALENV
)
)
return
false
;
}
if
(
!
headLexicalEmitterScope
-
>
deadZoneFrameSlots
(
this
)
)
return
false
;
}
{
#
ifdef
DEBUG
auto
loopDepth
=
this
-
>
stackDepth
;
#
endif
MOZ_ASSERT
(
loopDepth
>
=
2
)
;
if
(
!
emitInitializeForInOrOfTarget
(
forInHead
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
"
iterator
and
iterval
must
be
left
on
the
stack
"
)
;
}
ParseNode
*
forBody
=
forInLoop
-
>
pn_right
;
if
(
!
emitTree
(
forBody
)
)
return
false
;
loopInfo
.
continueTarget
=
{
offset
(
)
}
;
if
(
!
emitLoopEntry
(
nullptr
initialJump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_MOREITER
)
)
return
false
;
if
(
!
emit1
(
JSOP_ISNOITER
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
top
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
initialJump
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_FOR_IN
this
-
>
stackDepth
top
.
offset
offset
(
)
)
)
return
false
;
return
emit1
(
JSOP_ENDITER
)
;
}
bool
BytecodeEmitter
:
:
emitCStyleFor
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
)
{
LoopControl
loopInfo
(
this
StatementKind
:
:
ForLoop
)
;
ParseNode
*
forHead
=
pn
-
>
pn_left
;
ParseNode
*
forBody
=
pn
-
>
pn_right
;
bool
forLoopRequiresFreshening
=
false
;
if
(
ParseNode
*
init
=
forHead
-
>
pn_kid1
)
{
if
(
!
updateSourceCoordNotes
(
init
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emitTree
(
init
)
)
return
false
;
if
(
!
init
-
>
isForLoopDeclaration
(
)
)
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
forLoopRequiresFreshening
=
init
-
>
isKind
(
PNK_LET
)
&
&
headLexicalEmitterScope
;
if
(
forLoopRequiresFreshening
)
{
MOZ_ASSERT
(
headLexicalEmitterScope
=
=
innermostEmitterScope
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
-
>
scope
(
this
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScope
-
>
hasEnvironment
(
)
)
{
if
(
!
emit1
(
JSOP_FRESHENLEXICALENV
)
)
return
false
;
}
}
}
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR
&
noteIndex
)
)
return
false
;
if
(
!
emit1
(
JSOP_NOP
)
)
return
false
;
ptrdiff_t
tmp
=
offset
(
)
;
JumpList
jmp
;
if
(
forHead
-
>
pn_kid2
)
{
if
(
!
emitJump
(
JSOP_GOTO
&
jmp
)
)
return
false
;
}
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
forBody
&
top
)
)
return
false
;
if
(
jmp
.
offset
=
=
-
1
&
&
!
emitLoopEntry
(
forBody
jmp
)
)
return
false
;
if
(
!
emitTreeInBranch
(
forBody
)
)
return
false
;
if
(
!
emitJumpTarget
(
&
loopInfo
.
continueTarget
)
)
return
false
;
if
(
forLoopRequiresFreshening
)
{
MOZ_ASSERT
(
headLexicalEmitterScope
=
=
innermostEmitterScope
)
;
MOZ_ASSERT
(
headLexicalEmitterScope
-
>
scope
(
this
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScope
-
>
hasEnvironment
(
)
)
{
if
(
!
emit1
(
JSOP_FRESHENLEXICALENV
)
)
return
false
;
}
}
if
(
ParseNode
*
update
=
forHead
-
>
pn_kid3
)
{
TDZCheckCache
tdzCache
(
this
)
;
if
(
!
updateSourceCoordNotes
(
update
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emitTree
(
update
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
uint32_t
lineNum
=
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
pn
-
>
pn_pos
.
end
)
;
if
(
currentLine
(
)
!
=
lineNum
)
{
if
(
!
newSrcNote2
(
SRC_SETLINE
ptrdiff_t
(
lineNum
)
)
)
return
false
;
current
-
>
currentLine
=
lineNum
;
current
-
>
lastColumn
=
0
;
}
}
ptrdiff_t
tmp3
=
offset
(
)
;
if
(
forHead
-
>
pn_kid2
)
{
MOZ_ASSERT
(
jmp
.
offset
>
=
0
)
;
if
(
!
emitLoopEntry
(
forHead
-
>
pn_kid2
jmp
)
)
return
false
;
if
(
!
emitTree
(
forHead
-
>
pn_kid2
)
)
return
false
;
}
else
if
(
!
forHead
-
>
pn_kid3
)
{
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
}
if
(
!
setSrcNoteOffset
(
noteIndex
0
tmp3
-
tmp
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
1
loopInfo
.
continueTarget
.
offset
-
tmp
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
forHead
-
>
pn_kid2
?
JSOP_IFNE
:
JSOP_GOTO
top
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
2
beq
.
offset
-
tmp
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_LOOP
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitFor
(
ParseNode
*
pn
EmitterScope
*
headLexicalEmitterScope
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_FOR
)
)
;
if
(
pn
-
>
pn_left
-
>
isKind
(
PNK_FORHEAD
)
)
return
emitCStyleFor
(
pn
headLexicalEmitterScope
)
;
if
(
!
updateLineNumberNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
pn
-
>
pn_left
-
>
isKind
(
PNK_FORIN
)
)
return
emitForIn
(
pn
headLexicalEmitterScope
)
;
MOZ_ASSERT
(
pn
-
>
pn_left
-
>
isKind
(
PNK_FOROF
)
)
;
return
emitForOf
(
pn
headLexicalEmitterScope
)
;
}
bool
BytecodeEmitter
:
:
emitComprehensionForInOrOfVariables
(
ParseNode
*
pn
bool
*
lexicalScope
)
{
*
lexicalScope
=
pn
-
>
isKind
(
PNK_LEXICALSCOPE
)
;
if
(
*
lexicalScope
)
{
}
else
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_LET
)
)
;
MOZ_ASSERT
(
pn
-
>
pn_count
=
=
1
)
;
if
(
!
emitDeclarationList
(
pn
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitComprehensionForOf
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_COMPREHENSIONFOR
)
)
;
ParseNode
*
forHead
=
pn
-
>
pn_left
;
MOZ_ASSERT
(
forHead
-
>
isKind
(
PNK_FOROF
)
)
;
ParseNode
*
forHeadExpr
=
forHead
-
>
pn_kid3
;
ParseNode
*
forBody
=
pn
-
>
pn_right
;
ParseNode
*
loopDecl
=
forHead
-
>
pn_kid1
;
bool
lexicalScope
=
false
;
if
(
!
emitComprehensionForInOrOfVariables
(
loopDecl
&
lexicalScope
)
)
return
false
;
if
(
!
emitTree
(
forHeadExpr
)
)
return
false
;
if
(
!
emitIterator
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
TDZCheckCache
tdzCache
(
this
)
;
Maybe
<
EmitterScope
>
emitterScope
;
ParseNode
*
loopVariableName
;
if
(
lexicalScope
)
{
loopVariableName
=
parser
-
>
handler
.
singleBindingFromDeclaration
(
loopDecl
-
>
pn_expr
)
;
emitterScope
.
emplace
(
this
)
;
if
(
!
emitterScope
-
>
enterComprehensionFor
(
this
loopDecl
-
>
scopeBindings
(
)
)
)
return
false
;
}
else
{
loopVariableName
=
parser
-
>
handler
.
singleBindingFromDeclaration
(
loopDecl
)
;
}
LoopControl
loopInfo
(
this
StatementKind
:
:
ForOfLoop
)
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR_OF
&
noteIndex
)
)
return
false
;
JumpList
jmp
;
if
(
!
emitJump
(
JSOP_GOTO
&
jmp
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
nullptr
&
top
)
)
return
false
;
#
ifdef
DEBUG
int
loopDepth
=
this
-
>
stackDepth
;
#
endif
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
value
JSOP_GETPROP
)
)
return
false
;
if
(
!
emitAssignment
(
loopVariableName
JSOP_NOP
nullptr
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
)
;
if
(
!
emitTree
(
forBody
)
)
return
false
;
loopInfo
.
continueTarget
=
{
offset
(
)
}
;
if
(
!
emitLoopEntry
(
forHeadExpr
jmp
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitIteratorNext
(
forHead
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
done
JSOP_GETPROP
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
top
&
beq
&
breakTarget
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
)
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
jmp
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_FOR_OF
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
if
(
emitterScope
)
{
if
(
!
emitterScope
-
>
leave
(
this
)
)
return
false
;
emitterScope
.
reset
(
)
;
}
return
emitUint16Operand
(
JSOP_POPN
2
)
;
}
bool
BytecodeEmitter
:
:
emitComprehensionForIn
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_COMPREHENSIONFOR
)
)
;
ParseNode
*
forHead
=
pn
-
>
pn_left
;
MOZ_ASSERT
(
forHead
-
>
isKind
(
PNK_FORIN
)
)
;
ParseNode
*
forBody
=
pn
-
>
pn_right
;
ParseNode
*
loopDecl
=
forHead
-
>
pn_kid1
;
bool
lexicalScope
=
false
;
if
(
loopDecl
&
&
!
emitComprehensionForInOrOfVariables
(
loopDecl
&
lexicalScope
)
)
return
false
;
if
(
!
emitTree
(
forHead
-
>
pn_kid3
)
)
return
false
;
MOZ_ASSERT
(
pn
-
>
isOp
(
JSOP_ITER
)
)
;
if
(
!
emit2
(
JSOP_ITER
(
uint8_t
)
pn
-
>
pn_iflags
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
TDZCheckCache
tdzCache
(
this
)
;
Maybe
<
EmitterScope
>
emitterScope
;
if
(
lexicalScope
)
{
emitterScope
.
emplace
(
this
)
;
if
(
!
emitterScope
-
>
enterComprehensionFor
(
this
loopDecl
-
>
scopeBindings
(
)
)
)
return
false
;
}
LoopControl
loopInfo
(
this
StatementKind
:
:
ForInLoop
)
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_FOR_IN
&
noteIndex
)
)
return
false
;
JumpList
jmp
;
if
(
!
emitJump
(
JSOP_GOTO
&
jmp
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitLoopHead
(
nullptr
&
top
)
)
return
false
;
#
ifdef
DEBUG
int
loopDepth
=
this
-
>
stackDepth
;
#
endif
if
(
!
emitAssignment
(
forHead
-
>
pn_kid2
JSOP_NOP
nullptr
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
loopDepth
)
;
if
(
!
emitTree
(
forBody
)
)
return
false
;
loopInfo
.
continueTarget
=
{
offset
(
)
}
;
if
(
!
emitLoopEntry
(
nullptr
jmp
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_MOREITER
)
)
return
false
;
if
(
!
emit1
(
JSOP_ISNOITER
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
top
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
jmp
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
JumpTarget
endIter
{
offset
(
)
}
;
if
(
!
tryNoteList
.
append
(
JSTRY_FOR_IN
this
-
>
stackDepth
top
.
offset
endIter
.
offset
)
)
return
false
;
if
(
!
emit1
(
JSOP_ENDITER
)
)
return
false
;
if
(
emitterScope
)
{
if
(
!
emitterScope
-
>
leave
(
this
)
)
return
false
;
emitterScope
.
reset
(
)
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitComprehensionFor
(
ParseNode
*
compFor
)
{
MOZ_ASSERT
(
compFor
-
>
pn_left
-
>
isKind
(
PNK_FORIN
)
|
|
compFor
-
>
pn_left
-
>
isKind
(
PNK_FOROF
)
)
;
if
(
!
updateLineNumberNotes
(
compFor
-
>
pn_pos
.
begin
)
)
return
false
;
return
compFor
-
>
pn_left
-
>
isKind
(
PNK_FORIN
)
?
emitComprehensionForIn
(
compFor
)
:
emitComprehensionForOf
(
compFor
)
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitFunction
(
ParseNode
*
pn
bool
needsProto
)
{
FunctionBox
*
funbox
=
pn
-
>
pn_funbox
;
RootedFunction
fun
(
cx
funbox
-
>
function
(
)
)
;
RootedAtom
name
(
cx
fun
-
>
explicitName
(
)
)
;
MOZ_ASSERT_IF
(
fun
-
>
isInterpretedLazy
(
)
fun
-
>
lazyScript
(
)
)
;
if
(
funbox
-
>
wasEmitted
)
{
if
(
funbox
-
>
isAnnexB
)
{
auto
emitRhs
=
[
&
name
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
return
bce
-
>
emitGetName
(
name
)
;
}
;
Maybe
<
NameLocation
>
lhsLoc
=
locationOfNameBoundInScope
(
name
varEmitterScope
)
;
if
(
!
lhsLoc
&
&
sc
-
>
isFunctionBox
(
)
&
&
sc
-
>
asFunctionBox
(
)
-
>
hasExtraBodyVarScope
(
)
)
lhsLoc
=
locationOfNameBoundInScope
(
name
varEmitterScope
-
>
enclosingInFrame
(
)
)
;
if
(
!
lhsLoc
)
{
lhsLoc
=
Some
(
NameLocation
:
:
DynamicAnnexBVar
(
)
)
;
}
else
{
MOZ_ASSERT
(
lhsLoc
-
>
bindingKind
(
)
=
=
BindingKind
:
:
Var
|
|
lhsLoc
-
>
bindingKind
(
)
=
=
BindingKind
:
:
FormalParameter
|
|
(
lhsLoc
-
>
bindingKind
(
)
=
=
BindingKind
:
:
Let
&
&
sc
-
>
asFunctionBox
(
)
-
>
hasParameterExprs
)
)
;
}
if
(
!
emitSetOrInitializeNameAtLocation
(
name
*
lhsLoc
emitRhs
false
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
MOZ_ASSERT_IF
(
fun
-
>
hasScript
(
)
fun
-
>
nonLazyScript
(
)
)
;
MOZ_ASSERT
(
pn
-
>
functionIsHoisted
(
)
)
;
return
true
;
}
funbox
-
>
wasEmitted
=
true
;
if
(
fun
-
>
isInterpreted
(
)
)
{
bool
singleton
=
checkRunOnceContext
(
)
;
if
(
!
JSFunction
:
:
setTypeForScriptedFunction
(
cx
fun
singleton
)
)
return
false
;
SharedContext
*
outersc
=
sc
;
if
(
fun
-
>
isInterpretedLazy
(
)
)
{
ScriptSourceObject
*
source
=
&
script
-
>
sourceObject
(
)
-
>
as
<
ScriptSourceObject
>
(
)
;
fun
-
>
lazyScript
(
)
-
>
setEnclosingScopeAndSource
(
innermostScope
(
)
source
)
;
if
(
emittingRunOnceLambda
)
fun
-
>
lazyScript
(
)
-
>
setTreatAsRunOnce
(
)
;
}
else
{
MOZ_ASSERT_IF
(
outersc
-
>
strict
(
)
funbox
-
>
strictScript
)
;
Rooted
<
JSScript
*
>
parent
(
cx
script
)
;
MOZ_ASSERT
(
parent
-
>
getVersion
(
)
=
=
parser
-
>
options
(
)
.
version
)
;
MOZ_ASSERT
(
parent
-
>
mutedErrors
(
)
=
=
parser
-
>
options
(
)
.
mutedErrors
(
)
)
;
const
TransitiveCompileOptions
&
transitiveOptions
=
parser
-
>
options
(
)
;
CompileOptions
options
(
cx
transitiveOptions
)
;
Rooted
<
JSObject
*
>
sourceObject
(
cx
script
-
>
sourceObject
(
)
)
;
Rooted
<
JSScript
*
>
script
(
cx
JSScript
:
:
Create
(
cx
options
sourceObject
funbox
-
>
bufStart
funbox
-
>
bufEnd
)
)
;
if
(
!
script
)
return
false
;
BytecodeEmitter
bce2
(
this
parser
funbox
script
nullptr
pn
-
>
pn_pos
emitterMode
)
;
if
(
!
bce2
.
init
(
)
)
return
false
;
if
(
!
bce2
.
emitFunctionScript
(
pn
-
>
pn_body
)
)
return
false
;
if
(
funbox
-
>
isLikelyConstructorWrapper
(
)
)
script
-
>
setLikelyConstructorWrapper
(
)
;
}
if
(
outersc
-
>
isFunctionBox
(
)
)
outersc
-
>
asFunctionBox
(
)
-
>
setHasInnerFunctions
(
)
;
}
else
{
MOZ_ASSERT
(
IsAsmJSModule
(
fun
)
)
;
}
unsigned
index
=
objectList
.
add
(
pn
-
>
pn_funbox
)
;
if
(
!
pn
-
>
functionIsHoisted
(
)
)
{
MOZ_ASSERT
(
fun
-
>
isArrow
(
)
=
=
(
pn
-
>
getOp
(
)
=
=
JSOP_LAMBDA_ARROW
)
)
;
if
(
funbox
-
>
isAsync
(
)
)
{
MOZ_ASSERT
(
!
needsProto
)
;
return
emitAsyncWrapper
(
index
funbox
-
>
needsHomeObject
(
)
fun
-
>
isArrow
(
)
)
;
}
if
(
fun
-
>
isArrow
(
)
)
{
if
(
sc
-
>
allowNewTarget
(
)
)
{
if
(
!
emit1
(
JSOP_NEWTARGET
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_NULL
)
)
return
false
;
}
}
if
(
needsProto
)
{
MOZ_ASSERT
(
pn
-
>
getOp
(
)
=
=
JSOP_LAMBDA
)
;
pn
-
>
setOp
(
JSOP_FUNWITHPROTO
)
;
}
if
(
pn
-
>
getOp
(
)
=
=
JSOP_DEFFUN
)
{
if
(
!
emitIndex32
(
JSOP_LAMBDA
index
)
)
return
false
;
return
emit1
(
JSOP_DEFFUN
)
;
}
return
emitIndex32
(
pn
-
>
getOp
(
)
index
)
;
}
MOZ_ASSERT
(
!
needsProto
)
;
bool
topLevelFunction
;
if
(
sc
-
>
isFunctionBox
(
)
|
|
(
sc
-
>
isEvalContext
(
)
&
&
sc
-
>
strict
(
)
)
)
{
topLevelFunction
=
false
;
}
else
{
NameLocation
loc
=
lookupName
(
name
)
;
topLevelFunction
=
loc
.
kind
(
)
=
=
NameLocation
:
:
Kind
:
:
Dynamic
|
|
loc
.
bindingKind
(
)
=
=
BindingKind
:
:
Var
;
}
if
(
topLevelFunction
)
{
if
(
sc
-
>
isModuleContext
(
)
)
{
RootedModuleObject
module
(
cx
sc
-
>
asModuleContext
(
)
-
>
module
(
)
)
;
if
(
!
module
-
>
noteFunctionDeclaration
(
cx
name
fun
)
)
return
false
;
}
else
{
MOZ_ASSERT
(
sc
-
>
isGlobalContext
(
)
|
|
sc
-
>
isEvalContext
(
)
)
;
MOZ_ASSERT
(
pn
-
>
getOp
(
)
=
=
JSOP_NOP
)
;
switchToPrologue
(
)
;
if
(
funbox
-
>
isAsync
(
)
)
{
if
(
!
emitAsyncWrapper
(
index
fun
-
>
isMethod
(
)
fun
-
>
isArrow
(
)
)
)
return
false
;
}
else
{
if
(
!
emitIndex32
(
JSOP_LAMBDA
index
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_DEFFUN
)
)
return
false
;
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
switchToMain
(
)
;
}
}
else
{
bool
isAsync
=
funbox
-
>
isAsync
(
)
;
auto
emitLambda
=
[
index
isAsync
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
if
(
isAsync
)
{
return
bce
-
>
emitAsyncWrapper
(
index
false
false
)
;
}
return
bce
-
>
emitIndexOp
(
JSOP_LAMBDA
index
)
;
}
;
if
(
!
emitInitializeName
(
name
emitLambda
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitAsyncWrapperLambda
(
unsigned
index
bool
isArrow
)
{
if
(
isArrow
)
{
if
(
sc
-
>
allowNewTarget
(
)
)
{
if
(
!
emit1
(
JSOP_NEWTARGET
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_NULL
)
)
return
false
;
}
if
(
!
emitIndex32
(
JSOP_LAMBDA_ARROW
index
)
)
return
false
;
}
else
{
if
(
!
emitIndex32
(
JSOP_LAMBDA
index
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitAsyncWrapper
(
unsigned
index
bool
needsHomeObject
bool
isArrow
)
{
if
(
!
emitAsyncWrapperLambda
(
index
isArrow
)
)
return
false
;
if
(
needsHomeObject
)
{
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
}
if
(
!
emit1
(
JSOP_TOASYNC
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitDo
(
ParseNode
*
pn
)
{
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_WHILE
&
noteIndex
)
)
return
false
;
if
(
!
emit1
(
JSOP_NOP
)
)
return
false
;
unsigned
noteIndex2
;
if
(
!
newSrcNote
(
SRC_WHILE
&
noteIndex2
)
)
return
false
;
JumpTarget
top
;
if
(
!
emitLoopHead
(
pn
-
>
pn_left
&
top
)
)
return
false
;
LoopControl
loopInfo
(
this
StatementKind
:
:
DoLoop
)
;
JumpList
empty
;
if
(
!
emitLoopEntry
(
nullptr
empty
)
)
return
false
;
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
if
(
!
emitJumpTarget
(
&
loopInfo
.
continueTarget
)
)
return
false
;
if
(
!
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFNE
top
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_LOOP
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex2
0
beq
.
offset
-
top
.
offset
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
1
+
(
loopInfo
.
continueTarget
.
offset
-
top
.
offset
)
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitWhile
(
ParseNode
*
pn
)
{
if
(
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
pn
-
>
pn_pos
.
begin
)
=
=
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
pn
-
>
pn_pos
.
end
)
&
&
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
JumpTarget
top
{
-
1
}
;
if
(
!
emitJumpTarget
(
&
top
)
)
return
false
;
LoopControl
loopInfo
(
this
StatementKind
:
:
WhileLoop
)
;
loopInfo
.
continueTarget
=
top
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_WHILE
&
noteIndex
)
)
return
false
;
JumpList
jmp
;
if
(
!
emitJump
(
JSOP_GOTO
&
jmp
)
)
return
false
;
if
(
!
emitLoopHead
(
pn
-
>
pn_right
&
top
)
)
return
false
;
if
(
!
emitTreeInBranch
(
pn
-
>
pn_right
)
)
return
false
;
if
(
!
emitLoopEntry
(
pn
-
>
pn_left
jmp
)
)
return
false
;
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFNE
top
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_LOOP
stackDepth
top
.
offset
breakTarget
.
offset
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
beq
.
offset
-
jmp
.
offset
)
)
return
false
;
if
(
!
loopInfo
.
patchBreaksAndContinues
(
this
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitBreak
(
PropertyName
*
label
)
{
BreakableControl
*
target
;
SrcNoteType
noteType
;
if
(
label
)
{
auto
hasSameLabel
=
[
label
]
(
LabelControl
*
labelControl
)
{
return
labelControl
-
>
label
(
)
=
=
label
;
}
;
target
=
findInnermostNestableControl
<
LabelControl
>
(
hasSameLabel
)
;
noteType
=
SRC_BREAK2LABEL
;
}
else
{
auto
isNotLabel
=
[
]
(
BreakableControl
*
control
)
{
return
!
control
-
>
is
<
LabelControl
>
(
)
;
}
;
target
=
findInnermostNestableControl
<
BreakableControl
>
(
isNotLabel
)
;
noteType
=
(
target
-
>
kind
(
)
=
=
StatementKind
:
:
Switch
)
?
SRC_SWITCHBREAK
:
SRC_BREAK
;
}
return
emitGoto
(
target
&
target
-
>
breaks
noteType
)
;
}
bool
BytecodeEmitter
:
:
emitContinue
(
PropertyName
*
label
)
{
LoopControl
*
target
=
nullptr
;
if
(
label
)
{
NestableControl
*
control
=
innermostNestableControl
;
while
(
!
control
-
>
is
<
LabelControl
>
(
)
|
|
control
-
>
as
<
LabelControl
>
(
)
.
label
(
)
!
=
label
)
{
if
(
control
-
>
is
<
LoopControl
>
(
)
)
target
=
&
control
-
>
as
<
LoopControl
>
(
)
;
control
=
control
-
>
enclosing
(
)
;
}
}
else
{
target
=
findInnermostNestableControl
<
LoopControl
>
(
)
;
}
return
emitGoto
(
target
&
target
-
>
continues
SRC_CONTINUE
)
;
}
bool
BytecodeEmitter
:
:
emitGetFunctionThis
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
sc
-
>
thisBinding
(
)
=
=
ThisBinding
:
:
Function
)
;
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_NAME
)
)
;
MOZ_ASSERT
(
pn
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
dotThis
)
;
if
(
!
emitTree
(
pn
)
)
return
false
;
if
(
sc
-
>
needsThisTDZChecks
(
)
&
&
!
emit1
(
JSOP_CHECKTHIS
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitGetThisForSuperBase
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_SUPERBASE
)
)
;
return
emitGetFunctionThis
(
pn
-
>
pn_kid
)
;
}
bool
BytecodeEmitter
:
:
emitThisLiteral
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_THIS
)
)
;
if
(
ParseNode
*
thisName
=
pn
-
>
pn_kid
)
return
emitGetFunctionThis
(
thisName
)
;
if
(
sc
-
>
thisBinding
(
)
=
=
ThisBinding
:
:
Module
)
return
emit1
(
JSOP_UNDEFINED
)
;
MOZ_ASSERT
(
sc
-
>
thisBinding
(
)
=
=
ThisBinding
:
:
Global
)
;
return
emit1
(
JSOP_GLOBALTHIS
)
;
}
bool
BytecodeEmitter
:
:
emitCheckDerivedClassConstructorReturn
(
)
{
MOZ_ASSERT
(
lookupName
(
cx
-
>
names
(
)
.
dotThis
)
.
hasKnownSlot
(
)
)
;
if
(
!
emitGetName
(
cx
-
>
names
(
)
.
dotThis
)
)
return
false
;
if
(
!
emit1
(
JSOP_CHECKRETURN
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitReturn
(
ParseNode
*
pn
)
{
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
sc
-
>
isFunctionBox
(
)
&
&
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
)
{
if
(
!
emitPrepareIteratorResult
(
)
)
return
false
;
}
if
(
ParseNode
*
pn2
=
pn
-
>
pn_kid
)
{
if
(
!
emitTree
(
pn2
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
}
if
(
sc
-
>
isFunctionBox
(
)
&
&
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
)
{
if
(
!
emitFinishIteratorResult
(
true
)
)
return
false
;
}
MOZ_ASSERT
(
functionBodyEndPosSet
)
;
if
(
!
updateSourceCoordNotes
(
functionBodyEndPos
)
)
return
false
;
ptrdiff_t
top
=
offset
(
)
;
bool
isGenerator
=
sc
-
>
isFunctionBox
(
)
&
&
sc
-
>
asFunctionBox
(
)
-
>
isGenerator
(
)
;
bool
isDerivedClassConstructor
=
sc
-
>
isFunctionBox
(
)
&
&
sc
-
>
asFunctionBox
(
)
-
>
isDerivedClassConstructor
(
)
;
if
(
!
emit1
(
(
isGenerator
|
|
isDerivedClassConstructor
)
?
JSOP_SETRVAL
:
JSOP_RETURN
)
)
return
false
;
if
(
isDerivedClassConstructor
)
{
if
(
!
emitCheckDerivedClassConstructorReturn
(
)
)
return
false
;
}
NonLocalExitControl
nle
(
this
)
;
if
(
!
nle
.
prepareForNonLocalJumpToOutermost
(
)
)
return
false
;
if
(
isGenerator
)
{
NameLocation
loc
=
*
locationOfNameBoundInFunctionScope
(
cx
-
>
names
(
)
.
dotGenerator
varEmitterScope
)
;
if
(
!
emitGetNameAtLocation
(
cx
-
>
names
(
)
.
dotGenerator
loc
)
)
return
false
;
if
(
!
emitYieldOp
(
JSOP_FINALYIELDRVAL
)
)
return
false
;
}
else
if
(
isDerivedClassConstructor
)
{
MOZ_ASSERT
(
code
(
)
[
top
]
=
=
JSOP_SETRVAL
)
;
if
(
!
emit1
(
JSOP_RETRVAL
)
)
return
false
;
}
else
if
(
top
+
static_cast
<
ptrdiff_t
>
(
JSOP_RETURN_LENGTH
)
!
=
offset
(
)
)
{
code
(
)
[
top
]
=
JSOP_SETRVAL
;
if
(
!
emit1
(
JSOP_RETRVAL
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitYield
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
sc
-
>
isFunctionBox
(
)
)
;
if
(
pn
-
>
getOp
(
)
=
=
JSOP_YIELD
)
{
if
(
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
)
{
if
(
!
emitPrepareIteratorResult
(
)
)
return
false
;
}
if
(
pn
-
>
pn_left
)
{
if
(
!
emitTree
(
pn
-
>
pn_left
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
}
if
(
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
)
{
if
(
!
emitFinishIteratorResult
(
false
)
)
return
false
;
}
}
else
{
MOZ_ASSERT
(
pn
-
>
getOp
(
)
=
=
JSOP_INITIALYIELD
)
;
}
if
(
!
emitTree
(
pn
-
>
pn_right
)
)
return
false
;
if
(
!
emitYieldOp
(
pn
-
>
getOp
(
)
)
)
return
false
;
if
(
pn
-
>
getOp
(
)
=
=
JSOP_INITIALYIELD
&
&
!
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitYieldStar
(
ParseNode
*
iter
ParseNode
*
gen
)
{
MOZ_ASSERT
(
sc
-
>
isFunctionBox
(
)
)
;
MOZ_ASSERT
(
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
)
;
if
(
!
emitTree
(
iter
)
)
return
false
;
if
(
!
emitIterator
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
int
depth
=
stackDepth
;
MOZ_ASSERT
(
depth
>
=
2
)
;
JumpList
send
;
if
(
!
emitJump
(
JSOP_GOTO
&
send
)
)
return
false
;
unsigned
noteIndex
;
if
(
!
newSrcNote
(
SRC_TRY
&
noteIndex
)
)
return
false
;
JumpTarget
tryStart
{
offset
(
)
}
;
if
(
!
emit1
(
JSOP_TRY
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
if
(
!
emitTree
(
gen
)
)
return
false
;
if
(
!
emitYieldOp
(
JSOP_YIELD
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
noteIndex
0
offset
(
)
-
tryStart
.
offset
)
)
return
false
;
if
(
!
emitJump
(
JSOP_GOTO
&
send
)
)
return
false
;
JumpTarget
tryEnd
;
if
(
!
emitJumpTarget
(
&
tryEnd
)
)
return
false
;
stackDepth
=
uint32_t
(
depth
)
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_EXCEPTION
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
throw_
JSOP_STRING
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit1
(
JSOP_IN
)
)
return
false
;
JumpList
checkThrow
;
if
(
!
emitJump
(
JSOP_IFNE
&
checkThrow
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emit1
(
JSOP_THROW
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
checkThrow
)
)
return
false
;
stackDepth
=
uint32_t
(
depth
)
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
throw_
JSOP_CALLPROP
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
3
)
)
return
false
;
if
(
!
emitCall
(
JSOP_CALL
1
iter
)
)
return
false
;
checkTypeSet
(
JSOP_CALL
)
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
JumpList
checkResult
;
if
(
!
emitJump
(
JSOP_GOTO
&
checkResult
)
)
return
false
;
if
(
!
emit1
(
JSOP_NOP
)
)
return
false
;
if
(
!
tryNoteList
.
append
(
JSTRY_CATCH
depth
tryStart
.
offset
+
JSOP_TRY_LENGTH
tryEnd
.
offset
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
send
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
next
JSOP_CALLPROP
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
3
)
)
return
false
;
if
(
!
emitCall
(
JSOP_CALL
1
iter
)
)
return
false
;
if
(
!
emitCheckIsObj
(
CheckIsObjectKind
:
:
IteratorNext
)
)
return
false
;
checkTypeSet
(
JSOP_CALL
)
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
)
;
if
(
!
emitJumpTargetAndPatch
(
checkResult
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
done
JSOP_GETPROP
)
)
return
false
;
JumpList
beq
;
JumpTarget
breakTarget
{
-
1
}
;
if
(
!
emitBackwardJump
(
JSOP_IFEQ
tryStart
&
beq
&
breakTarget
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
value
JSOP_GETPROP
)
)
return
false
;
MOZ_ASSERT
(
this
-
>
stackDepth
=
=
depth
-
1
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitStatementList
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
for
(
ParseNode
*
pn2
=
pn
-
>
pn_head
;
pn2
;
pn2
=
pn2
-
>
pn_next
)
{
if
(
!
emitTree
(
pn2
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitStatement
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_SEMI
)
)
;
ParseNode
*
pn2
=
pn
-
>
pn_kid
;
if
(
!
pn2
)
return
true
;
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
bool
wantval
=
false
;
bool
useful
=
false
;
if
(
sc
-
>
isFunctionBox
(
)
)
MOZ_ASSERT
(
!
script
-
>
noScriptRval
(
)
)
;
else
useful
=
wantval
=
!
script
-
>
noScriptRval
(
)
;
if
(
!
useful
)
{
if
(
!
checkSideEffects
(
pn2
&
useful
)
)
return
false
;
if
(
innermostNestableControl
&
&
innermostNestableControl
-
>
is
<
LabelControl
>
(
)
&
&
innermostNestableControl
-
>
as
<
LabelControl
>
(
)
.
startOffset
(
)
>
=
offset
(
)
)
{
useful
=
true
;
}
}
if
(
useful
)
{
JSOp
op
=
wantval
?
JSOP_SETRVAL
:
JSOP_POP
;
MOZ_ASSERT_IF
(
pn2
-
>
isKind
(
PNK_ASSIGN
)
pn2
-
>
isOp
(
JSOP_NOP
)
)
;
if
(
!
emitTree
(
pn2
)
)
return
false
;
if
(
!
emit1
(
op
)
)
return
false
;
}
else
if
(
pn
-
>
isDirectivePrologueMember
(
)
)
{
}
else
{
if
(
JSAtom
*
atom
=
pn
-
>
isStringExprStatement
(
)
)
{
const
char
*
directive
=
nullptr
;
if
(
atom
=
=
cx
-
>
names
(
)
.
useStrict
)
{
if
(
!
sc
-
>
strictScript
)
directive
=
js_useStrict_str
;
}
else
if
(
atom
=
=
cx
-
>
names
(
)
.
useAsm
)
{
if
(
sc
-
>
isFunctionBox
(
)
)
{
if
(
IsAsmJSModule
(
sc
-
>
asFunctionBox
(
)
-
>
function
(
)
)
)
directive
=
js_useAsm_str
;
}
}
if
(
directive
)
{
if
(
!
reportStrictWarning
(
pn2
JSMSG_CONTRARY_NONDIRECTIVE
directive
)
)
return
false
;
}
}
else
{
current
-
>
currentLine
=
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
pn2
-
>
pn_pos
.
begin
)
;
current
-
>
lastColumn
=
0
;
if
(
!
reportStrictWarning
(
pn2
JSMSG_USELESS_EXPR
)
)
return
false
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitDeleteName
(
ParseNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
PNK_DELETENAME
)
)
;
MOZ_ASSERT
(
node
-
>
isArity
(
PN_UNARY
)
)
;
ParseNode
*
nameExpr
=
node
-
>
pn_kid
;
MOZ_ASSERT
(
nameExpr
-
>
isKind
(
PNK_NAME
)
)
;
return
emitAtomOp
(
nameExpr
JSOP_DELNAME
)
;
}
bool
BytecodeEmitter
:
:
emitDeleteProperty
(
ParseNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
PNK_DELETEPROP
)
)
;
MOZ_ASSERT
(
node
-
>
isArity
(
PN_UNARY
)
)
;
ParseNode
*
propExpr
=
node
-
>
pn_kid
;
MOZ_ASSERT
(
propExpr
-
>
isKind
(
PNK_DOT
)
)
;
if
(
propExpr
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emit1
(
JSOP_SUPERBASE
)
)
return
false
;
return
emitUint16Operand
(
JSOP_THROWMSG
JSMSG_CANT_DELETE_SUPER
)
;
}
JSOp
delOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTDELPROP
:
JSOP_DELPROP
;
return
emitPropOp
(
propExpr
delOp
)
;
}
bool
BytecodeEmitter
:
:
emitDeleteElement
(
ParseNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
PNK_DELETEELEM
)
)
;
MOZ_ASSERT
(
node
-
>
isArity
(
PN_UNARY
)
)
;
ParseNode
*
elemExpr
=
node
-
>
pn_kid
;
MOZ_ASSERT
(
elemExpr
-
>
isKind
(
PNK_ELEM
)
)
;
if
(
elemExpr
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitTree
(
elemExpr
-
>
pn_right
)
)
return
false
;
if
(
!
emit1
(
JSOP_SUPERBASE
)
)
return
false
;
if
(
!
emitUint16Operand
(
JSOP_THROWMSG
JSMSG_CANT_DELETE_SUPER
)
)
return
false
;
return
emit1
(
JSOP_POP
)
;
}
JSOp
delOp
=
sc
-
>
strict
(
)
?
JSOP_STRICTDELELEM
:
JSOP_DELELEM
;
return
emitElemOp
(
elemExpr
delOp
)
;
}
bool
BytecodeEmitter
:
:
emitDeleteExpression
(
ParseNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
PNK_DELETEEXPR
)
)
;
MOZ_ASSERT
(
node
-
>
isArity
(
PN_UNARY
)
)
;
ParseNode
*
expression
=
node
-
>
pn_kid
;
bool
useful
=
false
;
if
(
!
checkSideEffects
(
expression
&
useful
)
)
return
false
;
if
(
useful
)
{
if
(
!
emitTree
(
expression
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
emit1
(
JSOP_TRUE
)
;
}
static
const
char
*
SelfHostedCallFunctionName
(
JSAtom
*
name
ExclusiveContext
*
cx
)
{
if
(
name
=
=
cx
-
>
names
(
)
.
callFunction
)
return
"
callFunction
"
;
if
(
name
=
=
cx
-
>
names
(
)
.
callContentFunction
)
return
"
callContentFunction
"
;
if
(
name
=
=
cx
-
>
names
(
)
.
constructContentFunction
)
return
"
constructContentFunction
"
;
MOZ_CRASH
(
"
Unknown
self
-
hosted
call
function
name
"
)
;
}
bool
BytecodeEmitter
:
:
emitSelfHostedCallFunction
(
ParseNode
*
pn
)
{
ParseNode
*
pn2
=
pn
-
>
pn_head
;
const
char
*
errorName
=
SelfHostedCallFunctionName
(
pn2
-
>
name
(
)
cx
)
;
if
(
pn
-
>
pn_count
<
3
)
{
reportError
(
pn
JSMSG_MORE_ARGS_NEEDED
errorName
"
2
"
"
s
"
)
;
return
false
;
}
JSOp
callOp
=
pn
-
>
getOp
(
)
;
if
(
callOp
!
=
JSOP_CALL
)
{
reportError
(
pn
JSMSG_NOT_CONSTRUCTOR
errorName
)
;
return
false
;
}
bool
constructing
=
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
constructContentFunction
;
ParseNode
*
funNode
=
pn2
-
>
pn_next
;
if
(
constructing
)
callOp
=
JSOP_NEW
;
else
if
(
funNode
-
>
getKind
(
)
=
=
PNK_NAME
&
&
funNode
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
std_Function_apply
)
callOp
=
JSOP_FUNAPPLY
;
if
(
!
emitTree
(
funNode
)
)
return
false
;
#
ifdef
DEBUG
if
(
emitterMode
=
=
BytecodeEmitter
:
:
SelfHosting
&
&
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
callFunction
)
{
if
(
!
emit1
(
JSOP_DEBUGCHECKSELFHOSTED
)
)
return
false
;
}
#
endif
ParseNode
*
thisOrNewTarget
=
funNode
-
>
pn_next
;
if
(
constructing
)
{
if
(
!
emit1
(
JSOP_IS_CONSTRUCTING
)
)
return
false
;
}
else
{
if
(
!
emitTree
(
thisOrNewTarget
)
)
return
false
;
}
for
(
ParseNode
*
argpn
=
thisOrNewTarget
-
>
pn_next
;
argpn
;
argpn
=
argpn
-
>
pn_next
)
{
if
(
!
emitTree
(
argpn
)
)
return
false
;
}
if
(
constructing
)
{
if
(
!
emitTree
(
thisOrNewTarget
)
)
return
false
;
}
uint32_t
argc
=
pn
-
>
pn_count
-
3
;
if
(
!
emitCall
(
callOp
argc
)
)
return
false
;
checkTypeSet
(
callOp
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSelfHostedResumeGenerator
(
ParseNode
*
pn
)
{
if
(
pn
-
>
pn_count
!
=
4
)
{
reportError
(
pn
JSMSG_MORE_ARGS_NEEDED
"
resumeGenerator
"
"
1
"
"
s
"
)
;
return
false
;
}
ParseNode
*
funNode
=
pn
-
>
pn_head
;
ParseNode
*
genNode
=
funNode
-
>
pn_next
;
if
(
!
emitTree
(
genNode
)
)
return
false
;
ParseNode
*
valNode
=
genNode
-
>
pn_next
;
if
(
!
emitTree
(
valNode
)
)
return
false
;
ParseNode
*
kindNode
=
valNode
-
>
pn_next
;
MOZ_ASSERT
(
kindNode
-
>
isKind
(
PNK_STRING
)
)
;
uint16_t
operand
=
GeneratorObject
:
:
getResumeKind
(
cx
kindNode
-
>
pn_atom
)
;
MOZ_ASSERT
(
!
kindNode
-
>
pn_next
)
;
if
(
!
emitCall
(
JSOP_RESUME
operand
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSelfHostedForceInterpreter
(
ParseNode
*
pn
)
{
if
(
!
emit1
(
JSOP_FORCEINTERPRETER
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSelfHostedAllowContentSpread
(
ParseNode
*
pn
)
{
if
(
pn
-
>
pn_count
!
=
2
)
{
reportError
(
pn
JSMSG_MORE_ARGS_NEEDED
"
allowContentSpread
"
"
1
"
"
"
)
;
return
false
;
}
return
emitTree
(
pn
-
>
pn_head
-
>
pn_next
)
;
}
bool
BytecodeEmitter
:
:
isRestParameter
(
ParseNode
*
pn
bool
*
result
)
{
if
(
!
sc
-
>
isFunctionBox
(
)
)
{
*
result
=
false
;
return
true
;
}
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
RootedFunction
fun
(
cx
funbox
-
>
function
(
)
)
;
if
(
!
funbox
-
>
hasRest
(
)
)
{
*
result
=
false
;
return
true
;
}
if
(
!
pn
-
>
isKind
(
PNK_NAME
)
)
{
if
(
emitterMode
=
=
BytecodeEmitter
:
:
SelfHosting
&
&
pn
-
>
isKind
(
PNK_CALL
)
)
{
ParseNode
*
pn2
=
pn
-
>
pn_head
;
if
(
pn2
-
>
getKind
(
)
=
=
PNK_NAME
&
&
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
allowContentSpread
)
return
isRestParameter
(
pn2
-
>
pn_next
result
)
;
}
*
result
=
false
;
return
true
;
}
JSAtom
*
name
=
pn
-
>
name
(
)
;
Maybe
<
NameLocation
>
paramLoc
=
locationOfNameBoundInFunctionScope
(
name
)
;
if
(
paramLoc
&
&
lookupName
(
name
)
=
=
*
paramLoc
)
{
FunctionScope
:
:
Data
*
bindings
=
funbox
-
>
functionScopeBindings
(
)
;
if
(
bindings
-
>
nonPositionalFormalStart
>
0
)
{
JSAtom
*
paramName
=
bindings
-
>
names
[
bindings
-
>
nonPositionalFormalStart
-
1
]
.
name
(
)
;
*
result
=
paramName
&
&
name
=
=
paramName
;
return
true
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitOptimizeSpread
(
ParseNode
*
arg0
JumpList
*
jmp
bool
*
emitted
)
{
bool
result
=
false
;
if
(
!
isRestParameter
(
arg0
&
result
)
)
return
false
;
if
(
!
result
)
{
*
emitted
=
false
;
return
true
;
}
if
(
!
emitTree
(
arg0
)
)
return
false
;
if
(
!
emit1
(
JSOP_OPTIMIZE_SPREADCALL
)
)
return
false
;
if
(
!
emitJump
(
JSOP_IFNE
jmp
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
*
emitted
=
true
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitCallOrNew
(
ParseNode
*
pn
)
{
bool
callop
=
pn
-
>
isKind
(
PNK_CALL
)
|
|
pn
-
>
isKind
(
PNK_TAGGED_TEMPLATE
)
;
uint32_t
argc
=
pn
-
>
pn_count
-
1
;
if
(
argc
>
=
ARGC_LIMIT
)
{
parser
-
>
tokenStream
.
reportError
(
callop
?
JSMSG_TOO_MANY_FUN_ARGS
:
JSMSG_TOO_MANY_CON_ARGS
)
;
return
false
;
}
ParseNode
*
pn2
=
pn
-
>
pn_head
;
bool
spread
=
JOF_OPTYPE
(
pn
-
>
getOp
(
)
)
=
=
JOF_BYTE
;
switch
(
pn2
-
>
getKind
(
)
)
{
case
PNK_NAME
:
if
(
emitterMode
=
=
BytecodeEmitter
:
:
SelfHosting
&
&
!
spread
)
{
if
(
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
callFunction
|
|
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
callContentFunction
|
|
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
constructContentFunction
)
{
return
emitSelfHostedCallFunction
(
pn
)
;
}
if
(
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
resumeGenerator
)
return
emitSelfHostedResumeGenerator
(
pn
)
;
if
(
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
forceInterpreter
)
return
emitSelfHostedForceInterpreter
(
pn
)
;
if
(
pn2
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
allowContentSpread
)
return
emitSelfHostedAllowContentSpread
(
pn
)
;
}
if
(
!
emitGetName
(
pn2
callop
)
)
return
false
;
break
;
case
PNK_DOT
:
MOZ_ASSERT
(
emitterMode
!
=
BytecodeEmitter
:
:
SelfHosting
)
;
if
(
pn2
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperPropOp
(
pn2
JSOP_GETPROP_SUPER
callop
)
)
return
false
;
}
else
{
if
(
!
emitPropOp
(
pn2
callop
?
JSOP_CALLPROP
:
JSOP_GETPROP
)
)
return
false
;
}
break
;
case
PNK_ELEM
:
MOZ_ASSERT
(
emitterMode
!
=
BytecodeEmitter
:
:
SelfHosting
)
;
if
(
pn2
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperElemOp
(
pn2
JSOP_GETELEM_SUPER
callop
)
)
return
false
;
}
else
{
if
(
!
emitElemOp
(
pn2
callop
?
JSOP_CALLELEM
:
JSOP_GETELEM
)
)
return
false
;
if
(
callop
)
{
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
}
break
;
case
PNK_FUNCTION
:
MOZ_ASSERT
(
!
emittingRunOnceLambda
)
;
if
(
checkRunOnceContext
(
)
)
{
emittingRunOnceLambda
=
true
;
if
(
!
emitTree
(
pn2
)
)
return
false
;
emittingRunOnceLambda
=
false
;
}
else
{
if
(
!
emitTree
(
pn2
)
)
return
false
;
}
callop
=
false
;
break
;
case
PNK_SUPERBASE
:
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_SUPERCALL
)
)
;
MOZ_ASSERT
(
parser
-
>
handler
.
isSuperBase
(
pn2
)
)
;
if
(
!
emit1
(
JSOP_SUPERFUN
)
)
return
false
;
break
;
default
:
if
(
!
emitTree
(
pn2
)
)
return
false
;
callop
=
false
;
break
;
}
bool
isNewOp
=
pn
-
>
getOp
(
)
=
=
JSOP_NEW
|
|
pn
-
>
getOp
(
)
=
=
JSOP_SPREADNEW
|
|
pn
-
>
getOp
(
)
=
=
JSOP_SUPERCALL
|
|
pn
-
>
getOp
(
)
=
=
JSOP_SPREADSUPERCALL
;
if
(
!
callop
)
{
if
(
isNewOp
)
{
if
(
!
emit1
(
JSOP_IS_CONSTRUCTING
)
)
return
false
;
}
else
{
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
}
}
if
(
!
spread
)
{
for
(
ParseNode
*
pn3
=
pn2
-
>
pn_next
;
pn3
;
pn3
=
pn3
-
>
pn_next
)
{
if
(
!
emitTree
(
pn3
)
)
return
false
;
}
if
(
isNewOp
)
{
if
(
pn
-
>
isKind
(
PNK_SUPERCALL
)
)
{
if
(
!
emit1
(
JSOP_NEWTARGET
)
)
return
false
;
}
else
{
if
(
!
emitDupAt
(
argc
+
1
)
)
return
false
;
}
}
}
else
{
ParseNode
*
args
=
pn2
-
>
pn_next
;
JumpList
jmp
;
bool
optCodeEmitted
=
false
;
if
(
argc
=
=
1
)
{
if
(
!
emitOptimizeSpread
(
args
-
>
pn_kid
&
jmp
&
optCodeEmitted
)
)
return
false
;
}
if
(
!
emitArray
(
args
argc
JSOP_SPREADCALLARRAY
)
)
return
false
;
if
(
optCodeEmitted
)
{
if
(
!
emitJumpTargetAndPatch
(
jmp
)
)
return
false
;
}
if
(
isNewOp
)
{
if
(
pn
-
>
isKind
(
PNK_SUPERCALL
)
)
{
if
(
!
emit1
(
JSOP_NEWTARGET
)
)
return
false
;
}
else
{
if
(
!
emitDupAt
(
2
)
)
return
false
;
}
}
}
if
(
!
spread
)
{
if
(
!
emitCall
(
pn
-
>
getOp
(
)
argc
pn
)
)
return
false
;
}
else
{
if
(
!
emit1
(
pn
-
>
getOp
(
)
)
)
return
false
;
}
checkTypeSet
(
pn
-
>
getOp
(
)
)
;
if
(
pn
-
>
isOp
(
JSOP_EVAL
)
|
|
pn
-
>
isOp
(
JSOP_STRICTEVAL
)
|
|
pn
-
>
isOp
(
JSOP_SPREADEVAL
)
|
|
pn
-
>
isOp
(
JSOP_STRICTSPREADEVAL
)
)
{
uint32_t
lineNum
=
parser
-
>
tokenStream
.
srcCoords
.
lineNum
(
pn
-
>
pn_pos
.
begin
)
;
if
(
!
emitUint32Operand
(
JSOP_LINENO
lineNum
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitRightAssociative
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_POW
)
)
;
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
for
(
ParseNode
*
subexpr
=
pn
-
>
pn_head
;
subexpr
;
subexpr
=
subexpr
-
>
pn_next
)
{
if
(
!
emitTree
(
subexpr
)
)
return
false
;
}
for
(
uint32_t
i
=
0
;
i
<
pn
-
>
pn_count
-
1
;
i
+
+
)
{
if
(
!
emit1
(
JSOP_POW
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitLeftAssociative
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
if
(
!
emitTree
(
pn
-
>
pn_head
)
)
return
false
;
JSOp
op
=
pn
-
>
getOp
(
)
;
ParseNode
*
nextExpr
=
pn
-
>
pn_head
-
>
pn_next
;
do
{
if
(
!
emitTree
(
nextExpr
)
)
return
false
;
if
(
!
emit1
(
op
)
)
return
false
;
}
while
(
(
nextExpr
=
nextExpr
-
>
pn_next
)
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitLogical
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isArity
(
PN_LIST
)
)
;
TDZCheckCache
tdzCache
(
this
)
;
ParseNode
*
pn2
=
pn
-
>
pn_head
;
if
(
!
emitTree
(
pn2
)
)
return
false
;
JSOp
op
=
pn
-
>
getOp
(
)
;
JumpList
jump
;
if
(
!
emitJump
(
op
&
jump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
while
(
(
pn2
=
pn2
-
>
pn_next
)
-
>
pn_next
)
{
if
(
!
emitTree
(
pn2
)
)
return
false
;
if
(
!
emitJump
(
op
&
jump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
if
(
!
emitTree
(
pn2
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
jump
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitSequenceExpr
(
ParseNode
*
pn
)
{
for
(
ParseNode
*
child
=
pn
-
>
pn_head
;
;
child
=
child
-
>
pn_next
)
{
if
(
!
updateSourceCoordNotes
(
child
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emitTree
(
child
)
)
return
false
;
if
(
!
child
-
>
pn_next
)
break
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
true
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitIncOrDec
(
ParseNode
*
pn
)
{
switch
(
pn
-
>
pn_kid
-
>
getKind
(
)
)
{
case
PNK_DOT
:
return
emitPropIncDec
(
pn
)
;
case
PNK_ELEM
:
return
emitElemIncDec
(
pn
)
;
case
PNK_CALL
:
return
emitCallIncDec
(
pn
)
;
default
:
return
emitNameIncDec
(
pn
)
;
}
return
true
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitLabeledStatement
(
const
LabeledStatement
*
pn
)
{
uint32_t
index
;
if
(
!
makeAtomIndex
(
pn
-
>
label
(
)
&
index
)
)
return
false
;
JumpList
top
;
if
(
!
emitJump
(
JSOP_LABEL
&
top
)
)
return
false
;
LabelControl
controlInfo
(
this
pn
-
>
label
(
)
offset
(
)
)
;
if
(
!
emitTree
(
pn
-
>
statement
(
)
)
)
return
false
;
JumpTarget
brk
{
lastNonJumpTargetOffset
(
)
}
;
patchJumpsToTarget
(
top
brk
)
;
if
(
!
controlInfo
.
patchBreaks
(
this
)
)
return
false
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitConditionalExpression
(
ConditionalExpression
&
conditional
)
{
if
(
!
emitTree
(
&
conditional
.
condition
(
)
)
)
return
false
;
IfThenElseEmitter
ifThenElse
(
this
)
;
if
(
!
ifThenElse
.
emitCond
(
)
)
return
false
;
if
(
!
emitTreeInBranch
(
&
conditional
.
thenExpression
(
)
)
)
return
false
;
if
(
!
ifThenElse
.
emitElse
(
)
)
return
false
;
if
(
!
emitTreeInBranch
(
&
conditional
.
elseExpression
(
)
)
)
return
false
;
if
(
!
ifThenElse
.
emitEnd
(
)
)
return
false
;
MOZ_ASSERT
(
ifThenElse
.
pushed
(
)
=
=
1
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitPropertyList
(
ParseNode
*
pn
MutableHandlePlainObject
objp
PropListType
type
)
{
for
(
ParseNode
*
propdef
=
pn
-
>
pn_head
;
propdef
;
propdef
=
propdef
-
>
pn_next
)
{
if
(
!
updateSourceCoordNotes
(
propdef
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
propdef
-
>
isKind
(
PNK_MUTATEPROTO
)
)
{
MOZ_ASSERT
(
type
=
=
ObjectLiteral
)
;
if
(
!
emitTree
(
propdef
-
>
pn_kid
)
)
return
false
;
objp
.
set
(
nullptr
)
;
if
(
!
emit1
(
JSOP_MUTATEPROTO
)
)
return
false
;
continue
;
}
bool
extraPop
=
false
;
if
(
type
=
=
ClassBody
&
&
propdef
-
>
as
<
ClassMethod
>
(
)
.
isStatic
(
)
)
{
extraPop
=
true
;
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
ParseNode
*
key
=
propdef
-
>
pn_left
;
bool
isIndex
=
false
;
if
(
key
-
>
isKind
(
PNK_NUMBER
)
)
{
if
(
!
emitNumberOp
(
key
-
>
pn_dval
)
)
return
false
;
isIndex
=
true
;
}
else
if
(
key
-
>
isKind
(
PNK_OBJECT_PROPERTY_NAME
)
|
|
key
-
>
isKind
(
PNK_STRING
)
)
{
if
(
type
=
=
ClassBody
&
&
key
-
>
pn_atom
=
=
cx
-
>
names
(
)
.
constructor
&
&
!
propdef
-
>
as
<
ClassMethod
>
(
)
.
isStatic
(
)
)
{
continue
;
}
jsid
id
=
NameToId
(
key
-
>
pn_atom
-
>
asPropertyName
(
)
)
;
if
(
id
!
=
IdToTypeId
(
id
)
)
{
if
(
!
emitTree
(
key
)
)
return
false
;
isIndex
=
true
;
}
}
else
{
if
(
!
emitComputedPropertyName
(
key
)
)
return
false
;
isIndex
=
true
;
}
if
(
!
emitTree
(
propdef
-
>
pn_right
)
)
return
false
;
JSOp
op
=
propdef
-
>
getOp
(
)
;
MOZ_ASSERT
(
op
=
=
JSOP_INITPROP
|
|
op
=
=
JSOP_INITPROP_GETTER
|
|
op
=
=
JSOP_INITPROP_SETTER
)
;
FunctionPrefixKind
prefixKind
=
op
=
=
JSOP_INITPROP_GETTER
?
FunctionPrefixKind
:
:
Get
:
op
=
=
JSOP_INITPROP_SETTER
?
FunctionPrefixKind
:
:
Set
:
FunctionPrefixKind
:
:
None
;
if
(
op
=
=
JSOP_INITPROP_GETTER
|
|
op
=
=
JSOP_INITPROP_SETTER
)
objp
.
set
(
nullptr
)
;
if
(
propdef
-
>
pn_right
-
>
isKind
(
PNK_FUNCTION
)
&
&
propdef
-
>
pn_right
-
>
pn_funbox
-
>
needsHomeObject
(
)
)
{
MOZ_ASSERT
(
propdef
-
>
pn_right
-
>
pn_funbox
-
>
function
(
)
-
>
allowSuperProperty
(
)
)
;
bool
isAsync
=
propdef
-
>
pn_right
-
>
pn_funbox
-
>
isAsync
(
)
;
if
(
isAsync
)
{
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
if
(
!
emit2
(
JSOP_INITHOMEOBJECT
isIndex
+
isAsync
)
)
return
false
;
if
(
isAsync
)
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
if
(
type
=
=
ClassBody
)
{
switch
(
op
)
{
case
JSOP_INITPROP
:
op
=
JSOP_INITHIDDENPROP
;
break
;
case
JSOP_INITPROP_GETTER
:
op
=
JSOP_INITHIDDENPROP_GETTER
;
break
;
case
JSOP_INITPROP_SETTER
:
op
=
JSOP_INITHIDDENPROP_SETTER
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
op
"
)
;
}
}
if
(
isIndex
)
{
objp
.
set
(
nullptr
)
;
switch
(
op
)
{
case
JSOP_INITPROP
:
op
=
JSOP_INITELEM
;
break
;
case
JSOP_INITHIDDENPROP
:
op
=
JSOP_INITHIDDENELEM
;
break
;
case
JSOP_INITPROP_GETTER
:
op
=
JSOP_INITELEM_GETTER
;
break
;
case
JSOP_INITHIDDENPROP_GETTER
:
op
=
JSOP_INITHIDDENELEM_GETTER
;
break
;
case
JSOP_INITPROP_SETTER
:
op
=
JSOP_INITELEM_SETTER
;
break
;
case
JSOP_INITHIDDENPROP_SETTER
:
op
=
JSOP_INITHIDDENELEM_SETTER
;
break
;
default
:
MOZ_CRASH
(
"
Invalid
op
"
)
;
}
if
(
propdef
-
>
pn_right
-
>
isDirectRHSAnonFunction
(
)
)
{
if
(
!
emitDupAt
(
1
)
)
return
false
;
if
(
!
emit2
(
JSOP_SETFUNNAME
uint8_t
(
prefixKind
)
)
)
return
false
;
}
if
(
!
emit1
(
op
)
)
return
false
;
}
else
{
MOZ_ASSERT
(
key
-
>
isKind
(
PNK_OBJECT_PROPERTY_NAME
)
|
|
key
-
>
isKind
(
PNK_STRING
)
)
;
uint32_t
index
;
if
(
!
makeAtomIndex
(
key
-
>
pn_atom
&
index
)
)
return
false
;
if
(
objp
)
{
MOZ_ASSERT
(
type
=
=
ObjectLiteral
)
;
MOZ_ASSERT
(
!
IsHiddenInitOp
(
op
)
)
;
MOZ_ASSERT
(
!
objp
-
>
inDictionaryMode
(
)
)
;
Rooted
<
jsid
>
id
(
cx
AtomToId
(
key
-
>
pn_atom
)
)
;
RootedValue
undefinedValue
(
cx
UndefinedValue
(
)
)
;
if
(
!
NativeDefineProperty
(
cx
objp
id
undefinedValue
nullptr
nullptr
JSPROP_ENUMERATE
)
)
{
return
false
;
}
if
(
objp
-
>
inDictionaryMode
(
)
)
objp
.
set
(
nullptr
)
;
}
if
(
propdef
-
>
pn_right
-
>
isDirectRHSAnonFunction
(
)
)
{
RootedAtom
keyName
(
cx
key
-
>
pn_atom
)
;
if
(
!
setOrEmitSetFunName
(
propdef
-
>
pn_right
keyName
prefixKind
)
)
return
false
;
}
if
(
!
emitIndex32
(
op
index
)
)
return
false
;
}
if
(
extraPop
)
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
return
true
;
}
MOZ_NEVER_INLINE
bool
BytecodeEmitter
:
:
emitObject
(
ParseNode
*
pn
)
{
if
(
!
(
pn
-
>
pn_xflags
&
PNX_NONCONST
)
&
&
pn
-
>
pn_head
&
&
checkSingletonContext
(
)
)
return
emitSingletonInitialiser
(
pn
)
;
ptrdiff_t
offset
=
this
-
>
offset
(
)
;
if
(
!
emitNewInit
(
JSProto_Object
)
)
return
false
;
RootedPlainObject
obj
(
cx
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
GetGCObjectKind
(
pn
-
>
pn_count
)
;
obj
=
NewBuiltinClassInstance
<
PlainObject
>
(
cx
kind
TenuredObject
)
;
if
(
!
obj
)
return
false
;
if
(
!
emitPropertyList
(
pn
&
obj
ObjectLiteral
)
)
return
false
;
if
(
obj
)
{
ObjectBox
*
objbox
=
parser
-
>
newObjectBox
(
obj
)
;
if
(
!
objbox
)
return
false
;
static_assert
(
JSOP_NEWINIT_LENGTH
=
=
JSOP_NEWOBJECT_LENGTH
"
newinit
and
newobject
must
have
equal
length
to
edit
in
-
place
"
)
;
uint32_t
index
=
objectList
.
add
(
objbox
)
;
jsbytecode
*
code
=
this
-
>
code
(
offset
)
;
code
[
0
]
=
JSOP_NEWOBJECT
;
code
[
1
]
=
jsbytecode
(
index
>
>
24
)
;
code
[
2
]
=
jsbytecode
(
index
>
>
16
)
;
code
[
3
]
=
jsbytecode
(
index
>
>
8
)
;
code
[
4
]
=
jsbytecode
(
index
)
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitArrayComp
(
ParseNode
*
pn
)
{
if
(
!
emitNewInit
(
JSProto_Array
)
)
return
false
;
MOZ_ASSERT
(
stackDepth
>
0
)
;
uint32_t
saveDepth
=
arrayCompDepth
;
arrayCompDepth
=
(
uint32_t
)
(
stackDepth
-
1
)
;
if
(
!
emitTree
(
pn
-
>
pn_head
)
)
return
false
;
arrayCompDepth
=
saveDepth
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitArrayLiteral
(
ParseNode
*
pn
)
{
if
(
!
(
pn
-
>
pn_xflags
&
PNX_NONCONST
)
&
&
pn
-
>
pn_head
)
{
if
(
checkSingletonContext
(
)
)
{
return
emitSingletonInitialiser
(
pn
)
;
}
if
(
emitterMode
!
=
BytecodeEmitter
:
:
SelfHosting
&
&
pn
-
>
pn_count
!
=
0
)
{
RootedValue
value
(
cx
)
;
if
(
!
pn
-
>
getConstantValue
(
cx
ParseNode
:
:
ForCopyOnWriteArray
&
value
)
)
return
false
;
if
(
!
value
.
isMagic
(
JS_GENERIC_MAGIC
)
)
{
JSObject
*
obj
=
&
value
.
toObject
(
)
;
MOZ_ASSERT
(
obj
-
>
is
<
ArrayObject
>
(
)
&
&
obj
-
>
as
<
ArrayObject
>
(
)
.
denseElementsAreCopyOnWrite
(
)
)
;
ObjectBox
*
objbox
=
parser
-
>
newObjectBox
(
obj
)
;
if
(
!
objbox
)
return
false
;
return
emitObjectOp
(
objbox
JSOP_NEWARRAY_COPYONWRITE
)
;
}
}
}
return
emitArray
(
pn
-
>
pn_head
pn
-
>
pn_count
JSOP_NEWARRAY
)
;
}
bool
BytecodeEmitter
:
:
emitArray
(
ParseNode
*
pn
uint32_t
count
JSOp
op
)
{
MOZ_ASSERT
(
op
=
=
JSOP_NEWARRAY
|
|
op
=
=
JSOP_SPREADCALLARRAY
)
;
uint32_t
nspread
=
0
;
for
(
ParseNode
*
elt
=
pn
;
elt
;
elt
=
elt
-
>
pn_next
)
{
if
(
elt
-
>
isKind
(
PNK_SPREAD
)
)
nspread
+
+
;
}
static_assert
(
NativeObject
:
:
MAX_DENSE_ELEMENTS_COUNT
<
=
INT32_MAX
"
array
literals
'
maximum
length
must
not
exceed
limits
"
"
required
by
BaselineCompiler
:
:
emit_JSOP_NEWARRAY
"
"
BaselineCompiler
:
:
emit_JSOP_INITELEM_ARRAY
"
"
and
DoSetElemFallback
'
s
handling
of
JSOP_INITELEM_ARRAY
"
)
;
MOZ_ASSERT
(
count
>
=
nspread
)
;
MOZ_ASSERT
(
count
<
=
NativeObject
:
:
MAX_DENSE_ELEMENTS_COUNT
"
the
parser
must
throw
an
error
if
the
array
exceeds
maximum
"
"
length
"
)
;
if
(
!
emitUint32Operand
(
op
count
-
nspread
)
)
return
false
;
ParseNode
*
pn2
=
pn
;
uint32_t
index
;
bool
afterSpread
=
false
;
for
(
index
=
0
;
pn2
;
index
+
+
pn2
=
pn2
-
>
pn_next
)
{
if
(
!
afterSpread
&
&
pn2
-
>
isKind
(
PNK_SPREAD
)
)
{
afterSpread
=
true
;
if
(
!
emitNumberOp
(
index
)
)
return
false
;
}
if
(
!
updateSourceCoordNotes
(
pn2
-
>
pn_pos
.
begin
)
)
return
false
;
bool
allowSelfHostedSpread
=
false
;
if
(
pn2
-
>
isKind
(
PNK_ELISION
)
)
{
if
(
!
emit1
(
JSOP_HOLE
)
)
return
false
;
}
else
{
ParseNode
*
expr
;
if
(
pn2
-
>
isKind
(
PNK_SPREAD
)
)
{
expr
=
pn2
-
>
pn_kid
;
if
(
emitterMode
=
=
BytecodeEmitter
:
:
SelfHosting
&
&
expr
-
>
isKind
(
PNK_CALL
)
&
&
expr
-
>
pn_head
-
>
name
(
)
=
=
cx
-
>
names
(
)
.
allowContentSpread
)
{
allowSelfHostedSpread
=
true
;
}
}
else
{
expr
=
pn2
;
}
if
(
!
emitTree
(
expr
)
)
return
false
;
}
if
(
pn2
-
>
isKind
(
PNK_SPREAD
)
)
{
if
(
!
emitIterator
(
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
2
)
)
return
false
;
if
(
!
emit2
(
JSOP_PICK
2
)
)
return
false
;
if
(
!
emitSpread
(
allowSelfHostedSpread
)
)
return
false
;
}
else
if
(
afterSpread
)
{
if
(
!
emit1
(
JSOP_INITELEM_INC
)
)
return
false
;
}
else
{
if
(
!
emitUint32Operand
(
JSOP_INITELEM_ARRAY
index
)
)
return
false
;
}
}
MOZ_ASSERT
(
index
=
=
count
)
;
if
(
afterSpread
)
{
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitUnary
(
ParseNode
*
pn
)
{
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
JSOp
op
=
pn
-
>
getOp
(
)
;
ParseNode
*
pn2
=
pn
-
>
pn_kid
;
if
(
!
emitTree
(
pn2
)
)
return
false
;
return
emit1
(
op
)
;
}
bool
BytecodeEmitter
:
:
emitTypeof
(
ParseNode
*
node
JSOp
op
)
{
MOZ_ASSERT
(
op
=
=
JSOP_TYPEOF
|
|
op
=
=
JSOP_TYPEOFEXPR
)
;
if
(
!
updateSourceCoordNotes
(
node
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emitTree
(
node
-
>
pn_kid
)
)
return
false
;
return
emit1
(
op
)
;
}
bool
BytecodeEmitter
:
:
emitFunctionFormalParametersAndBody
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
isKind
(
PNK_PARAMSBODY
)
)
;
ParseNode
*
funBody
=
pn
-
>
last
(
)
;
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
TDZCheckCache
tdzCache
(
this
)
;
if
(
funbox
-
>
hasParameterExprs
)
{
EmitterScope
funEmitterScope
(
this
)
;
if
(
!
funEmitterScope
.
enterFunction
(
this
funbox
)
)
return
false
;
if
(
!
emitInitializeFunctionSpecialNames
(
)
)
return
false
;
if
(
!
emitFunctionFormalParameters
(
pn
)
)
return
false
;
{
Maybe
<
EmitterScope
>
extraVarEmitterScope
;
if
(
funbox
-
>
hasExtraBodyVarScope
(
)
)
{
extraVarEmitterScope
.
emplace
(
this
)
;
if
(
!
extraVarEmitterScope
-
>
enterFunctionExtraBodyVar
(
this
funbox
)
)
return
false
;
RootedAtom
name
(
cx
)
;
if
(
funbox
-
>
extraVarScopeBindings
(
)
&
&
funbox
-
>
functionScopeBindings
(
)
)
{
for
(
BindingIter
bi
(
*
funbox
-
>
functionScopeBindings
(
)
true
)
;
bi
;
bi
+
+
)
{
name
=
bi
.
name
(
)
;
if
(
!
locationOfNameBoundInScope
(
name
extraVarEmitterScope
.
ptr
(
)
)
)
continue
;
MOZ_ASSERT
(
name
!
=
cx
-
>
names
(
)
.
dotThis
&
&
name
!
=
cx
-
>
names
(
)
.
dotGenerator
)
;
NameLocation
paramLoc
=
*
locationOfNameBoundInScope
(
name
&
funEmitterScope
)
;
auto
emitRhs
=
[
&
name
&
paramLoc
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
return
bce
-
>
emitGetNameAtLocation
(
name
paramLoc
)
;
}
;
if
(
!
emitInitializeName
(
name
emitRhs
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
}
if
(
!
emitFunctionBody
(
funBody
)
)
return
false
;
if
(
extraVarEmitterScope
&
&
!
extraVarEmitterScope
-
>
leave
(
this
)
)
return
false
;
}
return
funEmitterScope
.
leave
(
this
)
;
}
EmitterScope
emitterScope
(
this
)
;
switchToPrologue
(
)
;
if
(
!
emitterScope
.
enterFunction
(
this
funbox
)
)
return
false
;
if
(
!
emitInitializeFunctionSpecialNames
(
)
)
return
false
;
switchToMain
(
)
;
if
(
!
emitFunctionFormalParameters
(
pn
)
)
return
false
;
if
(
!
emitFunctionBody
(
funBody
)
)
return
false
;
return
emitterScope
.
leave
(
this
)
;
}
bool
BytecodeEmitter
:
:
emitFunctionFormalParameters
(
ParseNode
*
pn
)
{
ParseNode
*
funBody
=
pn
-
>
last
(
)
;
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
EmitterScope
*
funScope
=
innermostEmitterScope
;
bool
hasParameterExprs
=
funbox
-
>
hasParameterExprs
;
bool
hasRest
=
funbox
-
>
hasRest
(
)
;
uint16_t
argSlot
=
0
;
for
(
ParseNode
*
arg
=
pn
-
>
pn_head
;
arg
!
=
funBody
;
arg
=
arg
-
>
pn_next
argSlot
+
+
)
{
ParseNode
*
bindingElement
=
arg
;
ParseNode
*
initializer
=
nullptr
;
if
(
arg
-
>
isKind
(
PNK_ASSIGN
)
)
{
bindingElement
=
arg
-
>
pn_left
;
initializer
=
arg
-
>
pn_right
;
}
MOZ_ASSERT
(
bindingElement
-
>
isKind
(
PNK_NAME
)
|
|
bindingElement
-
>
isKind
(
PNK_ARRAY
)
|
|
bindingElement
-
>
isKind
(
PNK_ARRAYCOMP
)
|
|
bindingElement
-
>
isKind
(
PNK_OBJECT
)
)
;
bool
isRest
=
hasRest
&
&
arg
-
>
pn_next
=
=
funBody
;
MOZ_ASSERT_IF
(
isRest
!
initializer
)
;
bool
isDestructuring
=
!
bindingElement
-
>
isKind
(
PNK_NAME
)
;
Maybe
<
EmitterScope
>
paramExprVarScope
;
if
(
funbox
-
>
hasDirectEvalInParameterExpr
&
&
(
isDestructuring
|
|
initializer
)
)
{
paramExprVarScope
.
emplace
(
this
)
;
if
(
!
paramExprVarScope
-
>
enterParameterExpressionVar
(
this
)
)
return
false
;
}
if
(
initializer
)
{
MOZ_ASSERT
(
hasParameterExprs
)
;
if
(
!
emitArgOp
(
JSOP_GETARG
argSlot
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_STRICTEQ
)
)
return
false
;
if
(
!
newSrcNote
(
SRC_IF
)
)
return
false
;
JumpList
jump
;
if
(
!
emitJump
(
JSOP_IFEQ
&
jump
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
emitInitializerInBranch
(
initializer
bindingElement
)
)
return
false
;
if
(
!
emitJumpTargetAndPatch
(
jump
)
)
return
false
;
}
else
if
(
isRest
)
{
if
(
!
emit1
(
JSOP_REST
)
)
return
false
;
checkTypeSet
(
JSOP_REST
)
;
}
if
(
isDestructuring
)
{
if
(
!
initializer
&
&
!
isRest
&
&
!
emitArgOp
(
JSOP_GETARG
argSlot
)
)
return
false
;
if
(
!
emitDestructuringOps
(
bindingElement
paramExprVarScope
?
DestructuringFormalParameterInVarScope
:
DestructuringDeclaration
)
)
{
return
false
;
}
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
else
{
RootedAtom
paramName
(
cx
bindingElement
-
>
name
(
)
)
;
NameLocation
paramLoc
=
*
locationOfNameBoundInScope
(
paramName
funScope
)
;
if
(
hasParameterExprs
)
{
auto
emitRhs
=
[
argSlot
initializer
isRest
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
if
(
!
initializer
&
&
!
isRest
)
return
bce
-
>
emitArgOp
(
JSOP_GETARG
argSlot
)
;
return
true
;
}
;
if
(
!
emitSetOrInitializeNameAtLocation
(
paramName
paramLoc
emitRhs
true
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
else
if
(
isRest
)
{
auto
nop
=
[
]
(
BytecodeEmitter
*
const
NameLocation
&
bool
)
{
return
true
;
}
;
if
(
!
emitSetOrInitializeNameAtLocation
(
paramName
paramLoc
nop
true
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
if
(
paramExprVarScope
)
{
if
(
!
paramExprVarScope
-
>
leave
(
this
)
)
return
false
;
}
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitInitializeFunctionSpecialNames
(
)
{
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
auto
emitInitializeFunctionSpecialName
=
[
]
(
BytecodeEmitter
*
bce
HandlePropertyName
name
JSOp
op
)
{
MOZ_ASSERT
(
bce
-
>
lookupName
(
name
)
.
hasKnownSlot
(
)
)
;
auto
emitInitial
=
[
op
]
(
BytecodeEmitter
*
bce
const
NameLocation
&
bool
)
{
return
bce
-
>
emit1
(
op
)
;
}
;
if
(
!
bce
-
>
emitInitializeName
(
name
emitInitial
)
)
return
false
;
if
(
!
bce
-
>
emit1
(
JSOP_POP
)
)
return
false
;
return
true
;
}
;
if
(
funbox
-
>
argumentsHasLocalBinding
(
)
)
{
if
(
!
emitInitializeFunctionSpecialName
(
this
cx
-
>
names
(
)
.
arguments
JSOP_ARGUMENTS
)
)
return
false
;
}
if
(
funbox
-
>
hasThisBinding
(
)
)
{
if
(
!
emitInitializeFunctionSpecialName
(
this
cx
-
>
names
(
)
.
dotThis
JSOP_FUNCTIONTHIS
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitFunctionBody
(
ParseNode
*
funBody
)
{
FunctionBox
*
funbox
=
sc
-
>
asFunctionBox
(
)
;
if
(
!
emitTree
(
funBody
)
)
return
false
;
if
(
funbox
-
>
isGenerator
(
)
)
{
if
(
funbox
-
>
isStarGenerator
(
)
&
&
!
emitPrepareIteratorResult
(
)
)
return
false
;
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
sc
-
>
asFunctionBox
(
)
-
>
isStarGenerator
(
)
&
&
!
emitFinishIteratorResult
(
true
)
)
return
false
;
if
(
!
emit1
(
JSOP_SETRVAL
)
)
return
false
;
NameLocation
loc
=
*
locationOfNameBoundInFunctionScope
(
cx
-
>
names
(
)
.
dotGenerator
)
;
if
(
!
emitGetNameAtLocation
(
cx
-
>
names
(
)
.
dotGenerator
loc
)
)
return
false
;
if
(
!
emitYieldOp
(
JSOP_FINALYIELDRVAL
)
)
return
false
;
}
else
{
if
(
hasTryFinally
)
{
if
(
!
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
if
(
!
emit1
(
JSOP_SETRVAL
)
)
return
false
;
}
}
if
(
funbox
-
>
isDerivedClassConstructor
(
)
)
{
if
(
!
emitCheckDerivedClassConstructorReturn
(
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitLexicalInitialization
(
ParseNode
*
pn
)
{
auto
assertLexical
=
[
]
(
BytecodeEmitter
*
const
NameLocation
&
loc
bool
emittedBindOp
)
{
MOZ_ASSERT
(
loc
.
isLexical
(
)
)
;
MOZ_ASSERT
(
!
emittedBindOp
)
;
return
true
;
}
;
return
emitInitializeName
(
pn
assertLexical
)
;
}
bool
BytecodeEmitter
:
:
emitClass
(
ParseNode
*
pn
)
{
ClassNode
&
classNode
=
pn
-
>
as
<
ClassNode
>
(
)
;
ClassNames
*
names
=
classNode
.
names
(
)
;
ParseNode
*
heritageExpression
=
classNode
.
heritage
(
)
;
ParseNode
*
classMethods
=
classNode
.
methodList
(
)
;
ParseNode
*
constructor
=
nullptr
;
for
(
ParseNode
*
mn
=
classMethods
-
>
pn_head
;
mn
;
mn
=
mn
-
>
pn_next
)
{
ClassMethod
&
method
=
mn
-
>
as
<
ClassMethod
>
(
)
;
ParseNode
&
methodName
=
method
.
name
(
)
;
if
(
!
method
.
isStatic
(
)
&
&
(
methodName
.
isKind
(
PNK_OBJECT_PROPERTY_NAME
)
|
|
methodName
.
isKind
(
PNK_STRING
)
)
&
&
methodName
.
pn_atom
=
=
cx
-
>
names
(
)
.
constructor
)
{
constructor
=
&
method
.
method
(
)
;
break
;
}
}
bool
savedStrictness
=
sc
-
>
setLocalStrictMode
(
true
)
;
Maybe
<
TDZCheckCache
>
tdzCache
;
Maybe
<
EmitterScope
>
emitterScope
;
if
(
names
)
{
tdzCache
.
emplace
(
this
)
;
emitterScope
.
emplace
(
this
)
;
if
(
!
emitterScope
-
>
enterLexical
(
this
ScopeKind
:
:
Lexical
classNode
.
scopeBindings
(
)
)
)
return
false
;
}
if
(
heritageExpression
)
{
if
(
!
emitTree
(
heritageExpression
)
)
return
false
;
if
(
!
emit1
(
JSOP_CLASSHERITAGE
)
)
return
false
;
if
(
!
emit1
(
JSOP_OBJWITHPROTO
)
)
return
false
;
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
}
else
{
if
(
!
emitNewInit
(
JSProto_Object
)
)
return
false
;
}
if
(
constructor
)
{
if
(
!
emitFunction
(
constructor
!
!
heritageExpression
)
)
return
false
;
if
(
constructor
-
>
pn_funbox
-
>
needsHomeObject
(
)
)
{
if
(
!
emit2
(
JSOP_INITHOMEOBJECT
0
)
)
return
false
;
}
}
else
{
JSAtom
*
name
=
names
?
names
-
>
innerBinding
(
)
-
>
pn_atom
:
cx
-
>
names
(
)
.
empty
;
if
(
heritageExpression
)
{
if
(
!
emitAtomOp
(
name
JSOP_DERIVEDCONSTRUCTOR
)
)
return
false
;
}
else
{
if
(
!
emitAtomOp
(
name
JSOP_CLASSCONSTRUCTOR
)
)
return
false
;
}
}
if
(
!
emit1
(
JSOP_SWAP
)
)
return
false
;
if
(
!
emit1
(
JSOP_DUP2
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
prototype
JSOP_INITLOCKEDPROP
)
)
return
false
;
if
(
!
emitAtomOp
(
cx
-
>
names
(
)
.
constructor
JSOP_INITHIDDENPROP
)
)
return
false
;
RootedPlainObject
obj
(
cx
)
;
if
(
!
emitPropertyList
(
classMethods
&
obj
ClassBody
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
if
(
names
)
{
ParseNode
*
innerName
=
names
-
>
innerBinding
(
)
;
if
(
!
emitLexicalInitialization
(
innerName
)
)
return
false
;
if
(
!
emitterScope
-
>
leave
(
this
)
)
return
false
;
emitterScope
.
reset
(
)
;
ParseNode
*
outerName
=
names
-
>
outerBinding
(
)
;
if
(
outerName
)
{
if
(
!
emitLexicalInitialization
(
outerName
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
}
MOZ_ALWAYS_TRUE
(
sc
-
>
setLocalStrictMode
(
savedStrictness
)
)
;
return
true
;
}
bool
BytecodeEmitter
:
:
emitTree
(
ParseNode
*
pn
EmitLineNumberNote
emitLineNote
)
{
JS_CHECK_RECURSION
(
cx
return
false
)
;
EmitLevelManager
elm
(
this
)
;
if
(
emitLineNote
=
=
EMIT_LINENOTE
&
&
!
ParseNodeRequiresSpecialLineNumberNotes
(
pn
)
)
{
if
(
!
updateLineNumberNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
}
switch
(
pn
-
>
getKind
(
)
)
{
case
PNK_FUNCTION
:
if
(
!
emitFunction
(
pn
)
)
return
false
;
break
;
case
PNK_PARAMSBODY
:
if
(
!
emitFunctionFormalParametersAndBody
(
pn
)
)
return
false
;
break
;
case
PNK_IF
:
if
(
!
emitIf
(
pn
)
)
return
false
;
break
;
case
PNK_SWITCH
:
if
(
!
emitSwitch
(
pn
)
)
return
false
;
break
;
case
PNK_WHILE
:
if
(
!
emitWhile
(
pn
)
)
return
false
;
break
;
case
PNK_DOWHILE
:
if
(
!
emitDo
(
pn
)
)
return
false
;
break
;
case
PNK_FOR
:
if
(
!
emitFor
(
pn
)
)
return
false
;
break
;
case
PNK_COMPREHENSIONFOR
:
if
(
!
emitComprehensionFor
(
pn
)
)
return
false
;
break
;
case
PNK_BREAK
:
if
(
!
emitBreak
(
pn
-
>
as
<
BreakStatement
>
(
)
.
label
(
)
)
)
return
false
;
break
;
case
PNK_CONTINUE
:
if
(
!
emitContinue
(
pn
-
>
as
<
ContinueStatement
>
(
)
.
label
(
)
)
)
return
false
;
break
;
case
PNK_WITH
:
if
(
!
emitWith
(
pn
)
)
return
false
;
break
;
case
PNK_TRY
:
if
(
!
emitTry
(
pn
)
)
return
false
;
break
;
case
PNK_CATCH
:
if
(
!
emitCatch
(
pn
)
)
return
false
;
break
;
case
PNK_VAR
:
if
(
!
emitDeclarationList
(
pn
)
)
return
false
;
break
;
case
PNK_RETURN
:
if
(
!
emitReturn
(
pn
)
)
return
false
;
break
;
case
PNK_YIELD_STAR
:
if
(
!
emitYieldStar
(
pn
-
>
pn_left
pn
-
>
pn_right
)
)
return
false
;
break
;
case
PNK_GENERATOR
:
if
(
!
emit1
(
JSOP_GENERATOR
)
)
return
false
;
break
;
case
PNK_YIELD
:
case
PNK_AWAIT
:
if
(
!
emitYield
(
pn
)
)
return
false
;
break
;
case
PNK_STATEMENTLIST
:
if
(
!
emitStatementList
(
pn
)
)
return
false
;
break
;
case
PNK_SEMI
:
if
(
!
emitStatement
(
pn
)
)
return
false
;
break
;
case
PNK_LABEL
:
if
(
!
emitLabeledStatement
(
&
pn
-
>
as
<
LabeledStatement
>
(
)
)
)
return
false
;
break
;
case
PNK_COMMA
:
if
(
!
emitSequenceExpr
(
pn
)
)
return
false
;
break
;
case
PNK_ASSIGN
:
case
PNK_ADDASSIGN
:
case
PNK_SUBASSIGN
:
case
PNK_BITORASSIGN
:
case
PNK_BITXORASSIGN
:
case
PNK_BITANDASSIGN
:
case
PNK_LSHASSIGN
:
case
PNK_RSHASSIGN
:
case
PNK_URSHASSIGN
:
case
PNK_MULASSIGN
:
case
PNK_DIVASSIGN
:
case
PNK_MODASSIGN
:
case
PNK_POWASSIGN
:
if
(
!
emitAssignment
(
pn
-
>
pn_left
pn
-
>
getOp
(
)
pn
-
>
pn_right
)
)
return
false
;
break
;
case
PNK_CONDITIONAL
:
if
(
!
emitConditionalExpression
(
pn
-
>
as
<
ConditionalExpression
>
(
)
)
)
return
false
;
break
;
case
PNK_OR
:
case
PNK_AND
:
if
(
!
emitLogical
(
pn
)
)
return
false
;
break
;
case
PNK_ADD
:
case
PNK_SUB
:
case
PNK_BITOR
:
case
PNK_BITXOR
:
case
PNK_BITAND
:
case
PNK_STRICTEQ
:
case
PNK_EQ
:
case
PNK_STRICTNE
:
case
PNK_NE
:
case
PNK_LT
:
case
PNK_LE
:
case
PNK_GT
:
case
PNK_GE
:
case
PNK_IN
:
case
PNK_INSTANCEOF
:
case
PNK_LSH
:
case
PNK_RSH
:
case
PNK_URSH
:
case
PNK_STAR
:
case
PNK_DIV
:
case
PNK_MOD
:
if
(
!
emitLeftAssociative
(
pn
)
)
return
false
;
break
;
case
PNK_POW
:
if
(
!
emitRightAssociative
(
pn
)
)
return
false
;
break
;
case
PNK_TYPEOFNAME
:
if
(
!
emitTypeof
(
pn
JSOP_TYPEOF
)
)
return
false
;
break
;
case
PNK_TYPEOFEXPR
:
if
(
!
emitTypeof
(
pn
JSOP_TYPEOFEXPR
)
)
return
false
;
break
;
case
PNK_THROW
:
case
PNK_VOID
:
case
PNK_NOT
:
case
PNK_BITNOT
:
case
PNK_POS
:
case
PNK_NEG
:
if
(
!
emitUnary
(
pn
)
)
return
false
;
break
;
case
PNK_PREINCREMENT
:
case
PNK_PREDECREMENT
:
case
PNK_POSTINCREMENT
:
case
PNK_POSTDECREMENT
:
if
(
!
emitIncOrDec
(
pn
)
)
return
false
;
break
;
case
PNK_DELETENAME
:
if
(
!
emitDeleteName
(
pn
)
)
return
false
;
break
;
case
PNK_DELETEPROP
:
if
(
!
emitDeleteProperty
(
pn
)
)
return
false
;
break
;
case
PNK_DELETEELEM
:
if
(
!
emitDeleteElement
(
pn
)
)
return
false
;
break
;
case
PNK_DELETEEXPR
:
if
(
!
emitDeleteExpression
(
pn
)
)
return
false
;
break
;
case
PNK_DOT
:
if
(
pn
-
>
as
<
PropertyAccess
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperPropOp
(
pn
JSOP_GETPROP_SUPER
)
)
return
false
;
}
else
{
if
(
!
emitPropOp
(
pn
JSOP_GETPROP
)
)
return
false
;
}
break
;
case
PNK_ELEM
:
if
(
pn
-
>
as
<
PropertyByValue
>
(
)
.
isSuper
(
)
)
{
if
(
!
emitSuperElemOp
(
pn
JSOP_GETELEM_SUPER
)
)
return
false
;
}
else
{
if
(
!
emitElemOp
(
pn
JSOP_GETELEM
)
)
return
false
;
}
break
;
case
PNK_NEW
:
case
PNK_TAGGED_TEMPLATE
:
case
PNK_CALL
:
case
PNK_GENEXP
:
case
PNK_SUPERCALL
:
if
(
!
emitCallOrNew
(
pn
)
)
return
false
;
break
;
case
PNK_LEXICALSCOPE
:
if
(
!
emitLexicalScope
(
pn
)
)
return
false
;
break
;
case
PNK_CONST
:
case
PNK_LET
:
if
(
!
emitDeclarationList
(
pn
)
)
return
false
;
break
;
case
PNK_IMPORT
:
MOZ_ASSERT
(
sc
-
>
isModuleContext
(
)
)
;
break
;
case
PNK_EXPORT
:
MOZ_ASSERT
(
sc
-
>
isModuleContext
(
)
)
;
if
(
pn
-
>
pn_kid
-
>
getKind
(
)
!
=
PNK_EXPORT_SPEC_LIST
)
{
if
(
!
emitTree
(
pn
-
>
pn_kid
)
)
return
false
;
}
break
;
case
PNK_EXPORT_DEFAULT
:
MOZ_ASSERT
(
sc
-
>
isModuleContext
(
)
)
;
if
(
!
emitTree
(
pn
-
>
pn_kid
)
)
return
false
;
if
(
pn
-
>
pn_right
)
{
if
(
!
emitLexicalInitialization
(
pn
-
>
pn_right
)
)
return
false
;
if
(
!
emit1
(
JSOP_POP
)
)
return
false
;
}
break
;
case
PNK_EXPORT_FROM
:
MOZ_ASSERT
(
sc
-
>
isModuleContext
(
)
)
;
break
;
case
PNK_ARRAYPUSH
:
if
(
!
emitTree
(
pn
-
>
pn_kid
)
)
return
false
;
if
(
!
emitDupAt
(
this
-
>
stackDepth
-
1
-
arrayCompDepth
)
)
return
false
;
if
(
!
emit1
(
JSOP_ARRAYPUSH
)
)
return
false
;
break
;
case
PNK_CALLSITEOBJ
:
if
(
!
emitCallSiteObject
(
pn
)
)
return
false
;
break
;
case
PNK_ARRAY
:
if
(
!
emitArrayLiteral
(
pn
)
)
return
false
;
break
;
case
PNK_ARRAYCOMP
:
if
(
!
emitArrayComp
(
pn
)
)
return
false
;
break
;
case
PNK_OBJECT
:
if
(
!
emitObject
(
pn
)
)
return
false
;
break
;
case
PNK_NAME
:
if
(
!
emitGetName
(
pn
)
)
return
false
;
break
;
case
PNK_TEMPLATE_STRING_LIST
:
if
(
!
emitTemplateString
(
pn
)
)
return
false
;
break
;
case
PNK_TEMPLATE_STRING
:
case
PNK_STRING
:
if
(
!
emitAtomOp
(
pn
JSOP_STRING
)
)
return
false
;
break
;
case
PNK_NUMBER
:
if
(
!
emitNumberOp
(
pn
-
>
pn_dval
)
)
return
false
;
break
;
case
PNK_REGEXP
:
if
(
!
emitRegExp
(
objectList
.
add
(
pn
-
>
as
<
RegExpLiteral
>
(
)
.
objbox
(
)
)
)
)
return
false
;
break
;
case
PNK_TRUE
:
case
PNK_FALSE
:
case
PNK_NULL
:
if
(
!
emit1
(
pn
-
>
getOp
(
)
)
)
return
false
;
break
;
case
PNK_THIS
:
if
(
!
emitThisLiteral
(
pn
)
)
return
false
;
break
;
case
PNK_DEBUGGER
:
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
begin
)
)
return
false
;
if
(
!
emit1
(
JSOP_DEBUGGER
)
)
return
false
;
break
;
case
PNK_NOP
:
MOZ_ASSERT
(
pn
-
>
getArity
(
)
=
=
PN_NULLARY
)
;
break
;
case
PNK_CLASS
:
if
(
!
emitClass
(
pn
)
)
return
false
;
break
;
case
PNK_NEWTARGET
:
if
(
!
emit1
(
JSOP_NEWTARGET
)
)
return
false
;
break
;
case
PNK_SETTHIS
:
if
(
!
emitSetThis
(
pn
)
)
return
false
;
break
;
case
PNK_POSHOLDER
:
MOZ_FALLTHROUGH_ASSERT
(
"
Should
never
try
to
emit
PNK_POSHOLDER
"
)
;
default
:
MOZ_ASSERT
(
0
)
;
}
if
(
emitLevel
=
=
1
)
{
if
(
!
updateSourceCoordNotes
(
pn
-
>
pn_pos
.
end
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
emitTreeInBranch
(
ParseNode
*
pn
)
{
TDZCheckCache
tdzCache
(
this
)
;
return
emitTree
(
pn
)
;
}
static
bool
AllocSrcNote
(
ExclusiveContext
*
cx
SrcNotesVector
&
notes
unsigned
*
index
)
{
if
(
notes
.
capacity
(
)
=
=
0
&
&
!
notes
.
reserve
(
256
)
)
return
false
;
if
(
!
notes
.
growBy
(
1
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
*
index
=
notes
.
length
(
)
-
1
;
return
true
;
}
bool
BytecodeEmitter
:
:
newSrcNote
(
SrcNoteType
type
unsigned
*
indexp
)
{
SrcNotesVector
&
notes
=
this
-
>
notes
(
)
;
unsigned
index
;
if
(
!
AllocSrcNote
(
cx
notes
&
index
)
)
return
false
;
ptrdiff_t
offset
=
this
-
>
offset
(
)
;
ptrdiff_t
delta
=
offset
-
lastNoteOffset
(
)
;
current
-
>
lastNoteOffset
=
offset
;
if
(
delta
>
=
SN_DELTA_LIMIT
)
{
do
{
ptrdiff_t
xdelta
=
Min
(
delta
SN_XDELTA_MASK
)
;
SN_MAKE_XDELTA
(
&
notes
[
index
]
xdelta
)
;
delta
-
=
xdelta
;
if
(
!
AllocSrcNote
(
cx
notes
&
index
)
)
return
false
;
}
while
(
delta
>
=
SN_DELTA_LIMIT
)
;
}
SN_MAKE_NOTE
(
&
notes
[
index
]
type
delta
)
;
for
(
int
n
=
(
int
)
js_SrcNoteSpec
[
type
]
.
arity
;
n
>
0
;
n
-
-
)
{
if
(
!
newSrcNote
(
SRC_NULL
)
)
return
false
;
}
if
(
indexp
)
*
indexp
=
index
;
return
true
;
}
bool
BytecodeEmitter
:
:
newSrcNote2
(
SrcNoteType
type
ptrdiff_t
offset
unsigned
*
indexp
)
{
unsigned
index
;
if
(
!
newSrcNote
(
type
&
index
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
index
0
offset
)
)
return
false
;
if
(
indexp
)
*
indexp
=
index
;
return
true
;
}
bool
BytecodeEmitter
:
:
newSrcNote3
(
SrcNoteType
type
ptrdiff_t
offset1
ptrdiff_t
offset2
unsigned
*
indexp
)
{
unsigned
index
;
if
(
!
newSrcNote
(
type
&
index
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
index
0
offset1
)
)
return
false
;
if
(
!
setSrcNoteOffset
(
index
1
offset2
)
)
return
false
;
if
(
indexp
)
*
indexp
=
index
;
return
true
;
}
bool
BytecodeEmitter
:
:
addToSrcNoteDelta
(
jssrcnote
*
sn
ptrdiff_t
delta
)
{
MOZ_ASSERT
(
current
=
=
&
main
)
;
MOZ_ASSERT
(
(
unsigned
)
delta
<
(
unsigned
)
SN_XDELTA_LIMIT
)
;
ptrdiff_t
base
=
SN_DELTA
(
sn
)
;
ptrdiff_t
limit
=
SN_IS_XDELTA
(
sn
)
?
SN_XDELTA_LIMIT
:
SN_DELTA_LIMIT
;
ptrdiff_t
newdelta
=
base
+
delta
;
if
(
newdelta
<
limit
)
{
SN_SET_DELTA
(
sn
newdelta
)
;
}
else
{
jssrcnote
xdelta
;
SN_MAKE_XDELTA
(
&
xdelta
delta
)
;
if
(
!
main
.
notes
.
insert
(
sn
xdelta
)
)
return
false
;
}
return
true
;
}
bool
BytecodeEmitter
:
:
setSrcNoteOffset
(
unsigned
index
unsigned
which
ptrdiff_t
offset
)
{
if
(
!
SN_REPRESENTABLE_OFFSET
(
offset
)
)
{
parser
-
>
tokenStream
.
reportError
(
JSMSG_NEED_DIET
js_script_str
)
;
return
false
;
}
SrcNotesVector
&
notes
=
this
-
>
notes
(
)
;
jssrcnote
*
sn
=
&
notes
[
index
]
;
MOZ_ASSERT
(
SN_TYPE
(
sn
)
!
=
SRC_XDELTA
)
;
MOZ_ASSERT
(
(
int
)
which
<
js_SrcNoteSpec
[
SN_TYPE
(
sn
)
]
.
arity
)
;
for
(
sn
+
+
;
which
;
sn
+
+
which
-
-
)
{
if
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
sn
+
=
3
;
}
if
(
offset
>
(
ptrdiff_t
)
SN_4BYTE_OFFSET_MASK
|
|
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
)
{
if
(
!
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
)
{
jssrcnote
dummy
=
0
;
if
(
!
(
sn
=
notes
.
insert
(
sn
dummy
)
)
|
|
!
(
sn
=
notes
.
insert
(
sn
dummy
)
)
|
|
!
(
sn
=
notes
.
insert
(
sn
dummy
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
*
sn
+
+
=
(
jssrcnote
)
(
SN_4BYTE_OFFSET_FLAG
|
(
offset
>
>
24
)
)
;
*
sn
+
+
=
(
jssrcnote
)
(
offset
>
>
16
)
;
*
sn
+
+
=
(
jssrcnote
)
(
offset
>
>
8
)
;
}
*
sn
=
(
jssrcnote
)
offset
;
return
true
;
}
bool
BytecodeEmitter
:
:
finishTakingSrcNotes
(
uint32_t
*
out
)
{
MOZ_ASSERT
(
current
=
=
&
main
)
;
unsigned
prologueCount
=
prologue
.
notes
.
length
(
)
;
if
(
prologueCount
&
&
prologue
.
currentLine
!
=
firstLine
)
{
switchToPrologue
(
)
;
if
(
!
newSrcNote2
(
SRC_SETLINE
ptrdiff_t
(
firstLine
)
)
)
return
false
;
switchToMain
(
)
;
}
else
{
ptrdiff_t
offset
=
prologueOffset
(
)
-
prologue
.
lastNoteOffset
;
MOZ_ASSERT
(
offset
>
=
0
)
;
if
(
offset
>
0
&
&
main
.
notes
.
length
(
)
!
=
0
)
{
jssrcnote
*
sn
=
main
.
notes
.
begin
(
)
;
ptrdiff_t
delta
=
SN_IS_XDELTA
(
sn
)
?
SN_XDELTA_MASK
-
(
*
sn
&
SN_XDELTA_MASK
)
:
SN_DELTA_MASK
-
(
*
sn
&
SN_DELTA_MASK
)
;
if
(
offset
<
delta
)
delta
=
offset
;
for
(
;
;
)
{
if
(
!
addToSrcNoteDelta
(
sn
delta
)
)
return
false
;
offset
-
=
delta
;
if
(
offset
=
=
0
)
break
;
delta
=
Min
(
offset
SN_XDELTA_MASK
)
;
sn
=
main
.
notes
.
begin
(
)
;
}
}
}
*
out
=
prologue
.
notes
.
length
(
)
+
main
.
notes
.
length
(
)
+
1
;
return
true
;
}
void
BytecodeEmitter
:
:
copySrcNotes
(
jssrcnote
*
destination
uint32_t
nsrcnotes
)
{
unsigned
prologueCount
=
prologue
.
notes
.
length
(
)
;
unsigned
mainCount
=
main
.
notes
.
length
(
)
;
unsigned
totalCount
=
prologueCount
+
mainCount
;
MOZ_ASSERT
(
totalCount
=
=
nsrcnotes
-
1
)
;
if
(
prologueCount
)
PodCopy
(
destination
prologue
.
notes
.
begin
(
)
prologueCount
)
;
PodCopy
(
destination
+
prologueCount
main
.
notes
.
begin
(
)
mainCount
)
;
SN_MAKE_TERMINATOR
(
&
destination
[
totalCount
]
)
;
}
void
CGConstList
:
:
finish
(
ConstArray
*
array
)
{
MOZ_ASSERT
(
length
(
)
=
=
array
-
>
length
)
;
for
(
unsigned
i
=
0
;
i
<
length
(
)
;
i
+
+
)
array
-
>
vector
[
i
]
=
list
[
i
]
;
}
unsigned
CGObjectList
:
:
add
(
ObjectBox
*
objbox
)
{
MOZ_ASSERT
(
!
objbox
-
>
emitLink
)
;
objbox
-
>
emitLink
=
lastbox
;
lastbox
=
objbox
;
return
length
+
+
;
}
unsigned
CGObjectList
:
:
indexOf
(
JSObject
*
obj
)
{
MOZ_ASSERT
(
length
>
0
)
;
unsigned
index
=
length
-
1
;
for
(
ObjectBox
*
box
=
lastbox
;
box
-
>
object
!
=
obj
;
box
=
box
-
>
emitLink
)
index
-
-
;
return
index
;
}
void
CGObjectList
:
:
finish
(
ObjectArray
*
array
)
{
MOZ_ASSERT
(
length
<
=
INDEX_LIMIT
)
;
MOZ_ASSERT
(
length
=
=
array
-
>
length
)
;
js
:
:
GCPtrObject
*
cursor
=
array
-
>
vector
+
array
-
>
length
;
ObjectBox
*
objbox
=
lastbox
;
do
{
-
-
cursor
;
MOZ_ASSERT
(
!
*
cursor
)
;
MOZ_ASSERT
(
objbox
-
>
object
-
>
isTenured
(
)
)
;
*
cursor
=
objbox
-
>
object
;
}
while
(
(
objbox
=
objbox
-
>
emitLink
)
!
=
nullptr
)
;
MOZ_ASSERT
(
cursor
=
=
array
-
>
vector
)
;
}
ObjectBox
*
CGObjectList
:
:
find
(
uint32_t
index
)
{
MOZ_ASSERT
(
index
<
length
)
;
ObjectBox
*
box
=
lastbox
;
for
(
unsigned
n
=
length
-
1
;
n
>
index
;
n
-
-
)
box
=
box
-
>
emitLink
;
return
box
;
}
void
CGScopeList
:
:
finish
(
ScopeArray
*
array
)
{
MOZ_ASSERT
(
length
(
)
<
=
INDEX_LIMIT
)
;
MOZ_ASSERT
(
length
(
)
=
=
array
-
>
length
)
;
for
(
uint32_t
i
=
0
;
i
<
length
(
)
;
i
+
+
)
array
-
>
vector
[
i
]
.
init
(
vector
[
i
]
)
;
}
bool
CGTryNoteList
:
:
append
(
JSTryNoteKind
kind
uint32_t
stackDepth
size_t
start
size_t
end
)
{
MOZ_ASSERT
(
start
<
=
end
)
;
MOZ_ASSERT
(
size_t
(
uint32_t
(
start
)
)
=
=
start
)
;
MOZ_ASSERT
(
size_t
(
uint32_t
(
end
)
)
=
=
end
)
;
JSTryNote
note
;
note
.
kind
=
kind
;
note
.
stackDepth
=
stackDepth
;
note
.
start
=
uint32_t
(
start
)
;
note
.
length
=
uint32_t
(
end
-
start
)
;
return
list
.
append
(
note
)
;
}
void
CGTryNoteList
:
:
finish
(
TryNoteArray
*
array
)
{
MOZ_ASSERT
(
length
(
)
=
=
array
-
>
length
)
;
for
(
unsigned
i
=
0
;
i
<
length
(
)
;
i
+
+
)
array
-
>
vector
[
i
]
=
list
[
i
]
;
}
bool
CGScopeNoteList
:
:
append
(
uint32_t
scopeIndex
uint32_t
offset
bool
inPrologue
uint32_t
parent
)
{
CGScopeNote
note
;
mozilla
:
:
PodZero
(
&
note
)
;
note
.
index
=
scopeIndex
;
note
.
start
=
offset
;
note
.
parent
=
parent
;
note
.
startInPrologue
=
inPrologue
;
return
list
.
append
(
note
)
;
}
void
CGScopeNoteList
:
:
recordEnd
(
uint32_t
index
uint32_t
offset
bool
inPrologue
)
{
MOZ_ASSERT
(
index
<
length
(
)
)
;
MOZ_ASSERT
(
list
[
index
]
.
length
=
=
0
)
;
list
[
index
]
.
end
=
offset
;
list
[
index
]
.
endInPrologue
=
inPrologue
;
}
void
CGScopeNoteList
:
:
finish
(
ScopeNoteArray
*
array
uint32_t
prologueLength
)
{
MOZ_ASSERT
(
length
(
)
=
=
array
-
>
length
)
;
for
(
unsigned
i
=
0
;
i
<
length
(
)
;
i
+
+
)
{
if
(
!
list
[
i
]
.
startInPrologue
)
list
[
i
]
.
start
+
=
prologueLength
;
if
(
!
list
[
i
]
.
endInPrologue
&
&
list
[
i
]
.
end
!
=
UINT32_MAX
)
list
[
i
]
.
end
+
=
prologueLength
;
MOZ_ASSERT
(
list
[
i
]
.
end
>
=
list
[
i
]
.
start
)
;
list
[
i
]
.
length
=
list
[
i
]
.
end
-
list
[
i
]
.
start
;
array
-
>
vector
[
i
]
=
list
[
i
]
;
}
}
void
CGYieldOffsetList
:
:
finish
(
YieldOffsetArray
&
array
uint32_t
prologueLength
)
{
MOZ_ASSERT
(
length
(
)
=
=
array
.
length
(
)
)
;
for
(
unsigned
i
=
0
;
i
<
length
(
)
;
i
+
+
)
array
[
i
]
=
prologueLength
+
list
[
i
]
;
}
const
JSSrcNoteSpec
js_SrcNoteSpec
[
]
=
{
#
define
DEFINE_SRC_NOTE_SPEC
(
sym
name
arity
)
{
name
arity
}
FOR_EACH_SRC_NOTE_TYPE
(
DEFINE_SRC_NOTE_SPEC
)
#
undef
DEFINE_SRC_NOTE_SPEC
}
;
static
int
SrcNoteArity
(
jssrcnote
*
sn
)
{
MOZ_ASSERT
(
SN_TYPE
(
sn
)
<
SRC_LAST
)
;
return
js_SrcNoteSpec
[
SN_TYPE
(
sn
)
]
.
arity
;
}
JS_FRIEND_API
(
unsigned
)
js
:
:
SrcNoteLength
(
jssrcnote
*
sn
)
{
unsigned
arity
;
jssrcnote
*
base
;
arity
=
SrcNoteArity
(
sn
)
;
for
(
base
=
sn
+
+
;
arity
;
sn
+
+
arity
-
-
)
{
if
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
sn
+
=
3
;
}
return
sn
-
base
;
}
JS_FRIEND_API
(
ptrdiff_t
)
js
:
:
GetSrcNoteOffset
(
jssrcnote
*
sn
unsigned
which
)
{
MOZ_ASSERT
(
SN_TYPE
(
sn
)
!
=
SRC_XDELTA
)
;
MOZ_ASSERT
(
(
int
)
which
<
SrcNoteArity
(
sn
)
)
;
for
(
sn
+
+
;
which
;
sn
+
+
which
-
-
)
{
if
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
sn
+
=
3
;
}
if
(
*
sn
&
SN_4BYTE_OFFSET_FLAG
)
{
return
(
ptrdiff_t
)
(
(
(
uint32_t
)
(
sn
[
0
]
&
SN_4BYTE_OFFSET_MASK
)
<
<
24
)
|
(
sn
[
1
]
<
<
16
)
|
(
sn
[
2
]
<
<
8
)
|
sn
[
3
]
)
;
}
return
(
ptrdiff_t
)
*
sn
;
}
