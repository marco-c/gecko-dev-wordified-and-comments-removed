#
include
"
frontend
/
BinASTParserBase
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
namespace
js
{
namespace
frontend
{
using
UsedNamePtr
=
UsedNameTracker
:
:
UsedNameMap
:
:
Ptr
;
BinASTParserBase
:
:
BinASTParserBase
(
JSContext
*
cx
LifoAlloc
&
alloc
UsedNameTracker
&
usedNames
HandleScriptSourceObject
sourceObject
Handle
<
LazyScript
*
>
lazyScript
)
:
AutoGCRooter
(
cx
AutoGCRooter
:
:
Tag
:
:
BinParser
)
cx_
(
cx
)
alloc_
(
alloc
)
traceListHead_
(
nullptr
)
usedNames_
(
usedNames
)
nodeAlloc_
(
cx
alloc
)
keepAtoms_
(
cx
)
sourceObject_
(
cx
sourceObject
)
lazyScript_
(
cx
lazyScript
)
pc_
(
nullptr
)
factory_
(
cx
alloc
nullptr
SourceKind
:
:
Binary
)
{
MOZ_ASSERT_IF
(
lazyScript
lazyScript
-
>
isBinAST
(
)
)
;
cx
-
>
frontendCollectionPool
(
)
.
addActiveCompilation
(
)
;
tempPoolMark_
=
alloc
.
mark
(
)
;
}
BinASTParserBase
:
:
~
BinASTParserBase
(
)
{
alloc_
.
release
(
tempPoolMark_
)
;
alloc_
.
freeAllIfHugeAndUnused
(
)
;
cx_
-
>
frontendCollectionPool
(
)
.
removeActiveCompilation
(
)
;
}
bool
BinASTParserBase
:
:
hasUsedName
(
HandlePropertyName
name
)
{
if
(
UsedNamePtr
p
=
usedNames_
.
lookup
(
name
)
)
{
return
p
-
>
value
(
)
.
isUsedInScript
(
pc_
-
>
scriptId
(
)
)
;
}
return
false
;
}
}
}
