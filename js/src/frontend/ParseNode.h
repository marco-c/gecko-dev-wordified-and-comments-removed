#
ifndef
frontend_ParseNode_h
#
define
frontend_ParseNode_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
TokenStream
.
h
"
#
include
"
vm
/
Printer
.
h
"
namespace
js
{
namespace
frontend
{
class
ParseContext
;
class
FullParseHandler
;
class
FunctionBox
;
class
ObjectBox
;
#
define
FOR_EACH_PARSE_NODE_KIND
(
F
)
\
F
(
EmptyStatement
)
\
F
(
ExpressionStatement
)
\
F
(
Comma
)
\
F
(
Conditional
)
\
F
(
Colon
)
\
F
(
Shorthand
)
\
F
(
Pos
)
\
F
(
Neg
)
\
F
(
PreIncrement
)
\
F
(
PostIncrement
)
\
F
(
PreDecrement
)
\
F
(
PostDecrement
)
\
F
(
Dot
)
\
F
(
Elem
)
\
F
(
Array
)
\
F
(
Elision
)
\
F
(
StatementList
)
\
F
(
Label
)
\
F
(
Object
)
\
F
(
Call
)
\
F
(
Name
)
\
F
(
ObjectPropertyName
)
\
F
(
ComputedName
)
\
F
(
Number
)
\
F
(
String
)
\
F
(
TemplateStringList
)
\
F
(
TemplateString
)
\
F
(
TaggedTemplate
)
\
F
(
CallSiteObj
)
\
F
(
RegExp
)
\
F
(
True
)
\
F
(
False
)
\
F
(
Null
)
\
F
(
RawUndefined
)
\
F
(
This
)
\
F
(
Function
)
\
F
(
Module
)
\
F
(
If
)
\
F
(
Switch
)
\
F
(
Case
)
\
F
(
While
)
\
F
(
DoWhile
)
\
F
(
For
)
\
F
(
Break
)
\
F
(
Continue
)
\
F
(
Var
)
\
F
(
Const
)
\
F
(
With
)
\
F
(
Return
)
\
F
(
New
)
\
/
*
Delete
operations
.
These
must
be
sequential
.
*
/
\
F
(
DeleteName
)
\
F
(
DeleteProp
)
\
F
(
DeleteElem
)
\
F
(
DeleteExpr
)
\
F
(
Try
)
\
F
(
Catch
)
\
F
(
Throw
)
\
F
(
Debugger
)
\
F
(
Generator
)
\
F
(
InitialYield
)
\
F
(
Yield
)
\
F
(
YieldStar
)
\
F
(
LexicalScope
)
\
F
(
Let
)
\
F
(
Import
)
\
F
(
ImportSpecList
)
\
F
(
ImportSpec
)
\
F
(
Export
)
\
F
(
ExportFrom
)
\
F
(
ExportDefault
)
\
F
(
ExportSpecList
)
\
F
(
ExportSpec
)
\
F
(
ExportBatchSpec
)
\
F
(
ForIn
)
\
F
(
ForOf
)
\
F
(
ForHead
)
\
F
(
ParamsBody
)
\
F
(
Spread
)
\
F
(
MutateProto
)
\
F
(
Class
)
\
F
(
ClassMethod
)
\
F
(
ClassMethodList
)
\
F
(
ClassNames
)
\
F
(
NewTarget
)
\
F
(
PosHolder
)
\
F
(
SuperBase
)
\
F
(
SuperCall
)
\
F
(
SetThis
)
\
\
/
*
Unary
operators
.
*
/
\
F
(
TypeOfName
)
\
F
(
TypeOfExpr
)
\
F
(
Void
)
\
F
(
Not
)
\
F
(
BitNot
)
\
F
(
Await
)
\
\
/
*
\
*
Binary
operators
.
\
*
These
must
be
in
the
same
order
as
TOK_OR
and
friends
in
TokenStream
.
h
.
\
*
/
\
F
(
Pipeline
)
\
F
(
Or
)
\
F
(
And
)
\
F
(
BitOr
)
\
F
(
BitXor
)
\
F
(
BitAnd
)
\
F
(
StrictEq
)
\
F
(
Eq
)
\
F
(
StrictNe
)
\
F
(
Ne
)
\
F
(
Lt
)
\
F
(
Le
)
\
F
(
Gt
)
\
F
(
Ge
)
\
F
(
InstanceOf
)
\
F
(
In
)
\
F
(
Lsh
)
\
F
(
Rsh
)
\
F
(
Ursh
)
\
F
(
Add
)
\
F
(
Sub
)
\
F
(
Star
)
\
F
(
Div
)
\
F
(
Mod
)
\
F
(
Pow
)
\
\
/
*
Assignment
operators
(
=
+
=
-
=
etc
.
)
.
*
/
\
/
*
ParseNode
:
:
isAssignment
assumes
all
these
are
consecutive
.
*
/
\
F
(
Assign
)
\
F
(
AddAssign
)
\
F
(
SubAssign
)
\
F
(
BitOrAssign
)
\
F
(
BitXorAssign
)
\
F
(
BitAndAssign
)
\
F
(
LshAssign
)
\
F
(
RshAssign
)
\
F
(
UrshAssign
)
\
F
(
MulAssign
)
\
F
(
DivAssign
)
\
F
(
ModAssign
)
\
F
(
PowAssign
)
enum
class
ParseNodeKind
:
uint16_t
{
#
define
EMIT_ENUM
(
name
)
name
FOR_EACH_PARSE_NODE_KIND
(
EMIT_ENUM
)
#
undef
EMIT_ENUM
Limit
BinOpFirst
=
ParseNodeKind
:
:
Pipeline
BinOpLast
=
ParseNodeKind
:
:
Pow
AssignmentStart
=
ParseNodeKind
:
:
Assign
AssignmentLast
=
ParseNodeKind
:
:
PowAssign
}
;
inline
bool
IsDeleteKind
(
ParseNodeKind
kind
)
{
return
ParseNodeKind
:
:
DeleteName
<
=
kind
&
&
kind
<
=
ParseNodeKind
:
:
DeleteExpr
;
}
inline
bool
IsTypeofKind
(
ParseNodeKind
kind
)
{
return
ParseNodeKind
:
:
TypeOfName
<
=
kind
&
&
kind
<
=
ParseNodeKind
:
:
TypeOfExpr
;
}
enum
ParseNodeArity
{
PN_NULLARY
PN_UNARY
PN_BINARY
PN_TERNARY
PN_CODE
PN_LIST
PN_NAME
PN_SCOPE
}
;
class
LoopControlStatement
;
class
BreakStatement
;
class
ContinueStatement
;
class
ConditionalExpression
;
class
PropertyAccess
;
class
ParseNode
{
ParseNodeKind
pn_type
;
uint8_t
pn_op
;
uint8_t
pn_arity
:
4
;
bool
pn_parens
:
1
;
bool
pn_rhs_anon_fun
:
1
;
ParseNode
(
const
ParseNode
&
other
)
=
delete
;
void
operator
=
(
const
ParseNode
&
other
)
=
delete
;
public
:
ParseNode
(
ParseNodeKind
kind
JSOp
op
ParseNodeArity
arity
)
:
pn_type
(
kind
)
pn_op
(
op
)
pn_arity
(
arity
)
pn_parens
(
false
)
pn_rhs_anon_fun
(
false
)
pn_pos
(
0
0
)
pn_next
(
nullptr
)
{
MOZ_ASSERT
(
kind
<
ParseNodeKind
:
:
Limit
)
;
memset
(
&
pn_u
0
sizeof
pn_u
)
;
}
ParseNode
(
ParseNodeKind
kind
JSOp
op
ParseNodeArity
arity
const
TokenPos
&
pos
)
:
pn_type
(
kind
)
pn_op
(
op
)
pn_arity
(
arity
)
pn_parens
(
false
)
pn_rhs_anon_fun
(
false
)
pn_pos
(
pos
)
pn_next
(
nullptr
)
{
MOZ_ASSERT
(
kind
<
ParseNodeKind
:
:
Limit
)
;
memset
(
&
pn_u
0
sizeof
pn_u
)
;
}
JSOp
getOp
(
)
const
{
return
JSOp
(
pn_op
)
;
}
void
setOp
(
JSOp
op
)
{
pn_op
=
op
;
}
bool
isOp
(
JSOp
op
)
const
{
return
getOp
(
)
=
=
op
;
}
ParseNodeKind
getKind
(
)
const
{
MOZ_ASSERT
(
pn_type
<
ParseNodeKind
:
:
Limit
)
;
return
pn_type
;
}
void
setKind
(
ParseNodeKind
kind
)
{
MOZ_ASSERT
(
kind
<
ParseNodeKind
:
:
Limit
)
;
pn_type
=
kind
;
}
bool
isKind
(
ParseNodeKind
kind
)
const
{
return
getKind
(
)
=
=
kind
;
}
ParseNodeArity
getArity
(
)
const
{
return
ParseNodeArity
(
pn_arity
)
;
}
bool
isArity
(
ParseNodeArity
a
)
const
{
return
getArity
(
)
=
=
a
;
}
void
setArity
(
ParseNodeArity
a
)
{
pn_arity
=
a
;
}
bool
isAssignment
(
)
const
{
ParseNodeKind
kind
=
getKind
(
)
;
return
ParseNodeKind
:
:
AssignmentStart
<
=
kind
&
&
kind
<
=
ParseNodeKind
:
:
AssignmentLast
;
}
bool
isBinaryOperation
(
)
const
{
ParseNodeKind
kind
=
getKind
(
)
;
return
ParseNodeKind
:
:
BinOpFirst
<
=
kind
&
&
kind
<
=
ParseNodeKind
:
:
BinOpLast
;
}
bool
isInParens
(
)
const
{
return
pn_parens
;
}
bool
isLikelyIIFE
(
)
const
{
return
isInParens
(
)
;
}
void
setInParens
(
bool
enabled
)
{
pn_parens
=
enabled
;
}
bool
isDirectRHSAnonFunction
(
)
const
{
return
pn_rhs_anon_fun
;
}
void
setDirectRHSAnonFunction
(
bool
enabled
)
{
pn_rhs_anon_fun
=
enabled
;
}
TokenPos
pn_pos
;
ParseNode
*
pn_next
;
union
{
struct
{
ParseNode
*
head
;
ParseNode
*
*
tail
;
uint32_t
count
;
uint32_t
xflags
;
}
list
;
struct
{
ParseNode
*
kid1
;
ParseNode
*
kid2
;
ParseNode
*
kid3
;
}
ternary
;
struct
{
ParseNode
*
left
;
ParseNode
*
right
;
union
{
unsigned
iflags
;
bool
isStatic
;
uint32_t
offset
;
}
;
}
binary
;
struct
{
ParseNode
*
kid
;
bool
prologue
;
}
unary
;
struct
{
union
{
JSAtom
*
atom
;
ObjectBox
*
objbox
;
FunctionBox
*
funbox
;
}
;
ParseNode
*
expr
;
}
name
;
struct
{
LexicalScope
:
:
Data
*
bindings
;
ParseNode
*
body
;
}
scope
;
struct
{
double
value
;
DecimalPoint
decimalPoint
;
}
number
;
class
{
friend
class
LoopControlStatement
;
PropertyName
*
label
;
}
loopControl
;
}
pn_u
;
#
define
pn_objbox
pn_u
.
name
.
objbox
#
define
pn_funbox
pn_u
.
name
.
funbox
#
define
pn_body
pn_u
.
name
.
expr
#
define
pn_head
pn_u
.
list
.
head
#
define
pn_tail
pn_u
.
list
.
tail
#
define
pn_count
pn_u
.
list
.
count
#
define
pn_xflags
pn_u
.
list
.
xflags
#
define
pn_kid1
pn_u
.
ternary
.
kid1
#
define
pn_kid2
pn_u
.
ternary
.
kid2
#
define
pn_kid3
pn_u
.
ternary
.
kid3
#
define
pn_left
pn_u
.
binary
.
left
#
define
pn_right
pn_u
.
binary
.
right
#
define
pn_pval
pn_u
.
binary
.
pval
#
define
pn_iflags
pn_u
.
binary
.
iflags
#
define
pn_kid
pn_u
.
unary
.
kid
#
define
pn_prologue
pn_u
.
unary
.
prologue
#
define
pn_atom
pn_u
.
name
.
atom
#
define
pn_objbox
pn_u
.
name
.
objbox
#
define
pn_expr
pn_u
.
name
.
expr
#
define
pn_dval
pn_u
.
number
.
value
public
:
static
ParseNode
*
appendOrCreateList
(
ParseNodeKind
kind
ParseNode
*
left
ParseNode
*
right
FullParseHandler
*
handler
ParseContext
*
pc
)
;
inline
PropertyName
*
name
(
)
const
;
inline
JSAtom
*
atom
(
)
const
;
ParseNode
*
expr
(
)
const
{
MOZ_ASSERT
(
pn_arity
=
=
PN_NAME
|
|
pn_arity
=
=
PN_CODE
)
;
return
pn_expr
;
}
bool
isEmptyScope
(
)
const
{
MOZ_ASSERT
(
pn_arity
=
=
PN_SCOPE
)
;
return
!
pn_u
.
scope
.
bindings
;
}
Handle
<
LexicalScope
:
:
Data
*
>
scopeBindings
(
)
const
{
MOZ_ASSERT
(
!
isEmptyScope
(
)
)
;
return
Handle
<
LexicalScope
:
:
Data
*
>
:
:
fromMarkedLocation
(
&
pn_u
.
scope
.
bindings
)
;
}
ParseNode
*
scopeBody
(
)
const
{
MOZ_ASSERT
(
pn_arity
=
=
PN_SCOPE
)
;
return
pn_u
.
scope
.
body
;
}
void
setScopeBody
(
ParseNode
*
body
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_SCOPE
)
;
pn_u
.
scope
.
body
=
body
;
}
#
define
PNX_FUNCDEFS
0x01
/
*
contains
top
-
level
function
statements
*
/
#
define
PNX_ARRAYHOLESPREAD
0x02
/
*
one
or
more
of
1
.
array
initialiser
has
holes
2
.
array
initializer
has
spread
node
*
/
#
define
PNX_NONCONST
0x04
/
*
initialiser
has
non
-
constants
*
/
bool
functionIsHoisted
(
)
const
{
MOZ_ASSERT
(
pn_arity
=
=
PN_CODE
&
&
getKind
(
)
=
=
ParseNodeKind
:
:
Function
)
;
MOZ_ASSERT
(
isOp
(
JSOP_LAMBDA
)
|
|
isOp
(
JSOP_LAMBDA_ARROW
)
|
|
isOp
(
JSOP_DEFFUN
)
|
|
isOp
(
JSOP_NOP
)
|
|
isOp
(
JSOP_GETLOCAL
)
|
|
isOp
(
JSOP_GETARG
)
|
|
isOp
(
JSOP_INITLEXICAL
)
)
;
return
!
isOp
(
JSOP_LAMBDA
)
&
&
!
isOp
(
JSOP_LAMBDA_ARROW
)
&
&
!
isOp
(
JSOP_DEFFUN
)
;
}
JSAtom
*
isStringExprStatement
(
)
const
{
if
(
getKind
(
)
=
=
ParseNodeKind
:
:
ExpressionStatement
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_UNARY
)
;
ParseNode
*
kid
=
pn_kid
;
if
(
kid
-
>
getKind
(
)
=
=
ParseNodeKind
:
:
String
&
&
!
kid
-
>
pn_parens
)
return
kid
-
>
pn_atom
;
}
return
nullptr
;
}
bool
isLiteral
(
)
const
{
return
isKind
(
ParseNodeKind
:
:
Number
)
|
|
isKind
(
ParseNodeKind
:
:
String
)
|
|
isKind
(
ParseNodeKind
:
:
True
)
|
|
isKind
(
ParseNodeKind
:
:
False
)
|
|
isKind
(
ParseNodeKind
:
:
Null
)
|
|
isKind
(
ParseNodeKind
:
:
RawUndefined
)
;
}
bool
isDirectivePrologueMember
(
)
const
{
return
pn_prologue
;
}
bool
isForLoopDeclaration
(
)
const
{
if
(
isKind
(
ParseNodeKind
:
:
Var
)
|
|
isKind
(
ParseNodeKind
:
:
Let
)
|
|
isKind
(
ParseNodeKind
:
:
Const
)
)
{
MOZ_ASSERT
(
isArity
(
PN_LIST
)
)
;
MOZ_ASSERT
(
pn_count
>
0
)
;
return
true
;
}
return
false
;
}
ParseNode
*
last
(
)
const
{
MOZ_ASSERT
(
pn_arity
=
=
PN_LIST
)
;
MOZ_ASSERT
(
pn_count
!
=
0
)
;
return
(
ParseNode
*
)
(
uintptr_t
(
pn_tail
)
-
offsetof
(
ParseNode
pn_next
)
)
;
}
void
initNumber
(
double
value
DecimalPoint
decimalPoint
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_NULLARY
)
;
MOZ_ASSERT
(
getKind
(
)
=
=
ParseNodeKind
:
:
Number
)
;
pn_u
.
number
.
value
=
value
;
pn_u
.
number
.
decimalPoint
=
decimalPoint
;
}
void
makeEmpty
(
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_LIST
)
;
pn_head
=
nullptr
;
pn_tail
=
&
pn_head
;
pn_count
=
0
;
pn_xflags
=
0
;
}
void
initList
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_LIST
)
;
if
(
pn
-
>
pn_pos
.
begin
<
pn_pos
.
begin
)
pn_pos
.
begin
=
pn
-
>
pn_pos
.
begin
;
pn_pos
.
end
=
pn
-
>
pn_pos
.
end
;
pn_head
=
pn
;
pn_tail
=
&
pn
-
>
pn_next
;
pn_count
=
1
;
pn_xflags
=
0
;
}
void
append
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn
-
>
pn_pos
.
begin
>
=
pn_pos
.
begin
)
;
appendWithoutOrderAssumption
(
pn
)
;
}
void
appendWithoutOrderAssumption
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_LIST
)
;
pn_pos
.
end
=
pn
-
>
pn_pos
.
end
;
*
pn_tail
=
pn
;
pn_tail
=
&
pn
-
>
pn_next
;
pn_count
+
+
;
}
void
prepend
(
ParseNode
*
pn
)
{
MOZ_ASSERT
(
pn_arity
=
=
PN_LIST
)
;
pn
-
>
pn_next
=
pn_head
;
pn_head
=
pn
;
if
(
pn_tail
=
=
&
pn_head
)
pn_tail
=
&
pn
-
>
pn_next
;
pn_count
+
+
;
}
void
checkListConsistency
(
)
#
ifndef
DEBUG
{
}
#
endif
;
enum
AllowConstantObjects
{
DontAllowObjects
=
0
AllowObjects
ForCopyOnWriteArray
}
;
MOZ_MUST_USE
bool
getConstantValue
(
JSContext
*
cx
AllowConstantObjects
allowObjects
MutableHandleValue
vp
Value
*
compare
=
nullptr
size_t
ncompare
=
0
NewObjectKind
newKind
=
TenuredObject
)
;
inline
bool
isConstant
(
)
;
template
<
class
NodeType
>
inline
bool
is
(
)
const
{
return
NodeType
:
:
test
(
*
this
)
;
}
template
<
class
NodeType
>
inline
NodeType
&
as
(
)
{
MOZ_ASSERT
(
NodeType
:
:
test
(
*
this
)
)
;
return
*
static_cast
<
NodeType
*
>
(
this
)
;
}
template
<
class
NodeType
>
inline
const
NodeType
&
as
(
)
const
{
MOZ_ASSERT
(
NodeType
:
:
test
(
*
this
)
)
;
return
*
static_cast
<
const
NodeType
*
>
(
this
)
;
}
#
ifdef
DEBUG
void
dump
(
)
;
void
dump
(
GenericPrinter
&
out
)
;
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
NullaryNode
:
public
ParseNode
{
NullaryNode
(
ParseNodeKind
kind
const
TokenPos
&
pos
)
:
ParseNode
(
kind
JSOP_NOP
PN_NULLARY
pos
)
{
}
NullaryNode
(
ParseNodeKind
kind
JSOp
op
const
TokenPos
&
pos
)
:
ParseNode
(
kind
op
PN_NULLARY
pos
)
{
}
NullaryNode
(
ParseNodeKind
kind
JSOp
op
const
TokenPos
&
pos
JSAtom
*
atom
)
:
ParseNode
(
kind
op
PN_NULLARY
pos
)
{
pn_atom
=
atom
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
)
;
#
endif
}
;
struct
UnaryNode
:
public
ParseNode
{
UnaryNode
(
ParseNodeKind
kind
const
TokenPos
&
pos
ParseNode
*
kid
)
:
ParseNode
(
kind
JSOP_NOP
PN_UNARY
pos
)
{
pn_kid
=
kid
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
BinaryNode
:
public
ParseNode
{
BinaryNode
(
ParseNodeKind
kind
JSOp
op
const
TokenPos
&
pos
ParseNode
*
left
ParseNode
*
right
)
:
ParseNode
(
kind
op
PN_BINARY
pos
)
{
pn_left
=
left
;
pn_right
=
right
;
}
BinaryNode
(
ParseNodeKind
kind
JSOp
op
ParseNode
*
left
ParseNode
*
right
)
:
ParseNode
(
kind
op
PN_BINARY
TokenPos
:
:
box
(
left
-
>
pn_pos
right
-
>
pn_pos
)
)
{
pn_left
=
left
;
pn_right
=
right
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
TernaryNode
:
public
ParseNode
{
TernaryNode
(
ParseNodeKind
kind
ParseNode
*
kid1
ParseNode
*
kid2
ParseNode
*
kid3
)
:
ParseNode
(
kind
JSOP_NOP
PN_TERNARY
TokenPos
(
(
kid1
?
kid1
:
kid2
?
kid2
:
kid3
)
-
>
pn_pos
.
begin
(
kid3
?
kid3
:
kid2
?
kid2
:
kid1
)
-
>
pn_pos
.
end
)
)
{
pn_kid1
=
kid1
;
pn_kid2
=
kid2
;
pn_kid3
=
kid3
;
}
TernaryNode
(
ParseNodeKind
kind
ParseNode
*
kid1
ParseNode
*
kid2
ParseNode
*
kid3
const
TokenPos
&
pos
)
:
ParseNode
(
kind
JSOP_NOP
PN_TERNARY
pos
)
{
pn_kid1
=
kid1
;
pn_kid2
=
kid2
;
pn_kid3
=
kid3
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
ListNode
:
public
ParseNode
{
ListNode
(
ParseNodeKind
kind
const
TokenPos
&
pos
)
:
ParseNode
(
kind
JSOP_NOP
PN_LIST
pos
)
{
makeEmpty
(
)
;
}
ListNode
(
ParseNodeKind
kind
JSOp
op
const
TokenPos
&
pos
)
:
ParseNode
(
kind
op
PN_LIST
pos
)
{
makeEmpty
(
)
;
}
ListNode
(
ParseNodeKind
kind
JSOp
op
ParseNode
*
kid
)
:
ParseNode
(
kind
op
PN_LIST
kid
-
>
pn_pos
)
{
initList
(
kid
)
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
return
node
.
isArity
(
PN_LIST
)
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
CodeNode
:
public
ParseNode
{
CodeNode
(
ParseNodeKind
kind
JSOp
op
const
TokenPos
&
pos
)
:
ParseNode
(
kind
op
PN_CODE
pos
)
{
MOZ_ASSERT
(
kind
=
=
ParseNodeKind
:
:
Function
|
|
kind
=
=
ParseNodeKind
:
:
Module
)
;
MOZ_ASSERT_IF
(
kind
=
=
ParseNodeKind
:
:
Module
op
=
=
JSOP_NOP
)
;
MOZ_ASSERT
(
op
=
=
JSOP_NOP
|
|
op
=
=
JSOP_LAMBDA_ARROW
|
|
op
=
=
JSOP_LAMBDA
)
;
MOZ_ASSERT
(
!
pn_body
)
;
MOZ_ASSERT
(
!
pn_objbox
)
;
}
public
:
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
NameNode
:
public
ParseNode
{
NameNode
(
ParseNodeKind
kind
JSOp
op
JSAtom
*
atom
const
TokenPos
&
pos
)
:
ParseNode
(
kind
op
PN_NAME
pos
)
{
pn_atom
=
atom
;
pn_expr
=
nullptr
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
struct
LexicalScopeNode
:
public
ParseNode
{
LexicalScopeNode
(
LexicalScope
:
:
Data
*
bindings
ParseNode
*
body
)
:
ParseNode
(
ParseNodeKind
:
:
LexicalScope
JSOP_NOP
PN_SCOPE
body
-
>
pn_pos
)
{
pn_u
.
scope
.
bindings
=
bindings
;
pn_u
.
scope
.
body
=
body
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
return
node
.
isKind
(
ParseNodeKind
:
:
LexicalScope
)
;
}
#
ifdef
DEBUG
void
dump
(
GenericPrinter
&
out
int
indent
)
;
#
endif
}
;
class
LabeledStatement
:
public
ParseNode
{
public
:
LabeledStatement
(
PropertyName
*
label
ParseNode
*
stmt
uint32_t
begin
)
:
ParseNode
(
ParseNodeKind
:
:
Label
JSOP_NOP
PN_NAME
TokenPos
(
begin
stmt
-
>
pn_pos
.
end
)
)
{
pn_atom
=
label
;
pn_expr
=
stmt
;
}
PropertyName
*
label
(
)
const
{
return
pn_atom
-
>
asPropertyName
(
)
;
}
ParseNode
*
statement
(
)
const
{
return
pn_expr
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Label
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NAME
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
CaseClause
:
public
BinaryNode
{
public
:
CaseClause
(
ParseNode
*
expr
ParseNode
*
stmts
uint32_t
begin
)
:
BinaryNode
(
ParseNodeKind
:
:
Case
JSOP_NOP
TokenPos
(
begin
stmts
-
>
pn_pos
.
end
)
expr
stmts
)
{
}
ParseNode
*
caseExpression
(
)
const
{
return
pn_left
;
}
bool
isDefault
(
)
const
{
return
!
caseExpression
(
)
;
}
ParseNode
*
statementList
(
)
const
{
return
pn_right
;
}
CaseClause
*
next
(
)
const
{
return
pn_next
?
&
pn_next
-
>
as
<
CaseClause
>
(
)
:
nullptr
;
}
uint32_t
offset
(
)
const
{
return
pn_u
.
binary
.
offset
;
}
void
setOffset
(
uint32_t
u
)
{
pn_u
.
binary
.
offset
=
u
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Case
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_BINARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
LoopControlStatement
:
public
ParseNode
{
protected
:
LoopControlStatement
(
ParseNodeKind
kind
PropertyName
*
label
const
TokenPos
&
pos
)
:
ParseNode
(
kind
JSOP_NOP
PN_NULLARY
pos
)
{
MOZ_ASSERT
(
kind
=
=
ParseNodeKind
:
:
Break
|
|
kind
=
=
ParseNodeKind
:
:
Continue
)
;
pn_u
.
loopControl
.
label
=
label
;
}
public
:
PropertyName
*
label
(
)
const
{
return
pn_u
.
loopControl
.
label
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Break
)
|
|
node
.
isKind
(
ParseNodeKind
:
:
Continue
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NULLARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
BreakStatement
:
public
LoopControlStatement
{
public
:
BreakStatement
(
PropertyName
*
label
const
TokenPos
&
pos
)
:
LoopControlStatement
(
ParseNodeKind
:
:
Break
label
pos
)
{
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Break
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NULLARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
ContinueStatement
:
public
LoopControlStatement
{
public
:
ContinueStatement
(
PropertyName
*
label
const
TokenPos
&
pos
)
:
LoopControlStatement
(
ParseNodeKind
:
:
Continue
label
pos
)
{
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Continue
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NULLARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
DebuggerStatement
:
public
ParseNode
{
public
:
explicit
DebuggerStatement
(
const
TokenPos
&
pos
)
:
ParseNode
(
ParseNodeKind
:
:
Debugger
JSOP_NOP
PN_NULLARY
pos
)
{
}
}
;
class
ConditionalExpression
:
public
ParseNode
{
public
:
ConditionalExpression
(
ParseNode
*
condition
ParseNode
*
thenExpr
ParseNode
*
elseExpr
)
:
ParseNode
(
ParseNodeKind
:
:
Conditional
JSOP_NOP
PN_TERNARY
TokenPos
(
condition
-
>
pn_pos
.
begin
elseExpr
-
>
pn_pos
.
end
)
)
{
MOZ_ASSERT
(
condition
)
;
MOZ_ASSERT
(
thenExpr
)
;
MOZ_ASSERT
(
elseExpr
)
;
pn_u
.
ternary
.
kid1
=
condition
;
pn_u
.
ternary
.
kid2
=
thenExpr
;
pn_u
.
ternary
.
kid3
=
elseExpr
;
}
ParseNode
&
condition
(
)
const
{
return
*
pn_u
.
ternary
.
kid1
;
}
ParseNode
&
thenExpression
(
)
const
{
return
*
pn_u
.
ternary
.
kid2
;
}
ParseNode
&
elseExpression
(
)
const
{
return
*
pn_u
.
ternary
.
kid3
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Conditional
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_TERNARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_NOP
)
)
;
return
match
;
}
}
;
class
ThisLiteral
:
public
UnaryNode
{
public
:
ThisLiteral
(
const
TokenPos
&
pos
ParseNode
*
thisName
)
:
UnaryNode
(
ParseNodeKind
:
:
This
pos
thisName
)
{
}
}
;
class
NullLiteral
:
public
ParseNode
{
public
:
explicit
NullLiteral
(
const
TokenPos
&
pos
)
:
ParseNode
(
ParseNodeKind
:
:
Null
JSOP_NULL
PN_NULLARY
pos
)
{
}
}
;
class
RawUndefinedLiteral
:
public
ParseNode
{
public
:
explicit
RawUndefinedLiteral
(
const
TokenPos
&
pos
)
:
ParseNode
(
ParseNodeKind
:
:
RawUndefined
JSOP_UNDEFINED
PN_NULLARY
pos
)
{
}
}
;
class
BooleanLiteral
:
public
ParseNode
{
public
:
BooleanLiteral
(
bool
b
const
TokenPos
&
pos
)
:
ParseNode
(
b
?
ParseNodeKind
:
:
True
:
ParseNodeKind
:
:
False
b
?
JSOP_TRUE
:
JSOP_FALSE
PN_NULLARY
pos
)
{
}
}
;
class
RegExpLiteral
:
public
NullaryNode
{
public
:
RegExpLiteral
(
ObjectBox
*
reobj
const
TokenPos
&
pos
)
:
NullaryNode
(
ParseNodeKind
:
:
RegExp
JSOP_REGEXP
pos
)
{
pn_objbox
=
reobj
;
}
ObjectBox
*
objbox
(
)
const
{
return
pn_objbox
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
RegExp
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NULLARY
)
)
;
MOZ_ASSERT_IF
(
match
node
.
isOp
(
JSOP_REGEXP
)
)
;
return
match
;
}
}
;
class
PropertyAccess
:
public
ParseNode
{
public
:
PropertyAccess
(
ParseNode
*
lhs
PropertyName
*
name
uint32_t
begin
uint32_t
end
)
:
ParseNode
(
ParseNodeKind
:
:
Dot
JSOP_NOP
PN_NAME
TokenPos
(
begin
end
)
)
{
MOZ_ASSERT
(
lhs
!
=
nullptr
)
;
MOZ_ASSERT
(
name
!
=
nullptr
)
;
pn_u
.
name
.
expr
=
lhs
;
pn_u
.
name
.
atom
=
name
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Dot
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_NAME
)
)
;
return
match
;
}
ParseNode
&
expression
(
)
const
{
return
*
pn_u
.
name
.
expr
;
}
PropertyName
&
name
(
)
const
{
return
*
pn_u
.
name
.
atom
-
>
asPropertyName
(
)
;
}
bool
isSuper
(
)
const
{
return
expression
(
)
.
isKind
(
ParseNodeKind
:
:
SuperBase
)
;
}
}
;
class
PropertyByValue
:
public
ParseNode
{
public
:
PropertyByValue
(
ParseNode
*
lhs
ParseNode
*
propExpr
uint32_t
begin
uint32_t
end
)
:
ParseNode
(
ParseNodeKind
:
:
Elem
JSOP_NOP
PN_BINARY
TokenPos
(
begin
end
)
)
{
pn_u
.
binary
.
left
=
lhs
;
pn_u
.
binary
.
right
=
propExpr
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Elem
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_BINARY
)
)
;
return
match
;
}
bool
isSuper
(
)
const
{
return
pn_left
-
>
isKind
(
ParseNodeKind
:
:
SuperBase
)
;
}
}
;
struct
CallSiteNode
:
public
ListNode
{
explicit
CallSiteNode
(
uint32_t
begin
)
:
ListNode
(
ParseNodeKind
:
:
CallSiteObj
TokenPos
(
begin
begin
+
1
)
)
{
}
static
bool
test
(
const
ParseNode
&
node
)
{
return
node
.
isKind
(
ParseNodeKind
:
:
CallSiteObj
)
;
}
MOZ_MUST_USE
bool
getRawArrayValue
(
JSContext
*
cx
MutableHandleValue
vp
)
{
return
pn_head
-
>
getConstantValue
(
cx
AllowObjects
vp
)
;
}
}
;
struct
ClassMethod
:
public
BinaryNode
{
ClassMethod
(
ParseNode
*
name
ParseNode
*
body
JSOp
op
bool
isStatic
)
:
BinaryNode
(
ParseNodeKind
:
:
ClassMethod
op
TokenPos
(
name
-
>
pn_pos
.
begin
body
-
>
pn_pos
.
end
)
name
body
)
{
pn_u
.
binary
.
isStatic
=
isStatic
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
ClassMethod
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_BINARY
)
)
;
return
match
;
}
ParseNode
&
name
(
)
const
{
return
*
pn_u
.
binary
.
left
;
}
ParseNode
&
method
(
)
const
{
return
*
pn_u
.
binary
.
right
;
}
bool
isStatic
(
)
const
{
return
pn_u
.
binary
.
isStatic
;
}
}
;
struct
ClassNames
:
public
BinaryNode
{
ClassNames
(
ParseNode
*
outerBinding
ParseNode
*
innerBinding
const
TokenPos
&
pos
)
:
BinaryNode
(
ParseNodeKind
:
:
ClassNames
JSOP_NOP
pos
outerBinding
innerBinding
)
{
MOZ_ASSERT_IF
(
outerBinding
outerBinding
-
>
isKind
(
ParseNodeKind
:
:
Name
)
)
;
MOZ_ASSERT
(
innerBinding
-
>
isKind
(
ParseNodeKind
:
:
Name
)
)
;
MOZ_ASSERT_IF
(
outerBinding
innerBinding
-
>
pn_atom
=
=
outerBinding
-
>
pn_atom
)
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
ClassNames
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_BINARY
)
)
;
return
match
;
}
ParseNode
*
outerBinding
(
)
const
{
return
pn_u
.
binary
.
left
;
}
ParseNode
*
innerBinding
(
)
const
{
return
pn_u
.
binary
.
right
;
}
}
;
struct
ClassNode
:
public
TernaryNode
{
ClassNode
(
ParseNode
*
names
ParseNode
*
heritage
ParseNode
*
methodsOrBlock
const
TokenPos
&
pos
)
:
TernaryNode
(
ParseNodeKind
:
:
Class
names
heritage
methodsOrBlock
pos
)
{
MOZ_ASSERT_IF
(
names
names
-
>
is
<
ClassNames
>
(
)
)
;
MOZ_ASSERT
(
methodsOrBlock
-
>
is
<
LexicalScopeNode
>
(
)
|
|
methodsOrBlock
-
>
isKind
(
ParseNodeKind
:
:
ClassMethodList
)
)
;
}
static
bool
test
(
const
ParseNode
&
node
)
{
bool
match
=
node
.
isKind
(
ParseNodeKind
:
:
Class
)
;
MOZ_ASSERT_IF
(
match
node
.
isArity
(
PN_TERNARY
)
)
;
return
match
;
}
ClassNames
*
names
(
)
const
{
return
pn_kid1
?
&
pn_kid1
-
>
as
<
ClassNames
>
(
)
:
nullptr
;
}
ParseNode
*
heritage
(
)
const
{
return
pn_kid2
;
}
ParseNode
*
methodList
(
)
const
{
if
(
pn_kid3
-
>
isKind
(
ParseNodeKind
:
:
ClassMethodList
)
)
return
pn_kid3
;
MOZ_ASSERT
(
pn_kid3
-
>
is
<
LexicalScopeNode
>
(
)
)
;
ParseNode
*
list
=
pn_kid3
-
>
scopeBody
(
)
;
MOZ_ASSERT
(
list
-
>
isKind
(
ParseNodeKind
:
:
ClassMethodList
)
)
;
return
list
;
}
Handle
<
LexicalScope
:
:
Data
*
>
scopeBindings
(
)
const
{
MOZ_ASSERT
(
pn_kid3
-
>
is
<
LexicalScopeNode
>
(
)
)
;
return
pn_kid3
-
>
scopeBindings
(
)
;
}
}
;
#
ifdef
DEBUG
void
DumpParseTree
(
ParseNode
*
pn
GenericPrinter
&
out
int
indent
=
0
)
;
#
endif
class
ParseNodeAllocator
{
public
:
explicit
ParseNodeAllocator
(
JSContext
*
cx
LifoAlloc
&
alloc
)
:
cx
(
cx
)
alloc
(
alloc
)
freelist
(
nullptr
)
{
}
void
*
allocNode
(
)
;
void
freeNode
(
ParseNode
*
pn
)
;
ParseNode
*
freeTree
(
ParseNode
*
pn
)
;
void
prepareNodeForMutation
(
ParseNode
*
pn
)
;
private
:
JSContext
*
cx
;
LifoAlloc
&
alloc
;
ParseNode
*
freelist
;
}
;
inline
bool
ParseNode
:
:
isConstant
(
)
{
switch
(
pn_type
)
{
case
ParseNodeKind
:
:
Number
:
case
ParseNodeKind
:
:
String
:
case
ParseNodeKind
:
:
TemplateString
:
case
ParseNodeKind
:
:
Null
:
case
ParseNodeKind
:
:
RawUndefined
:
case
ParseNodeKind
:
:
False
:
case
ParseNodeKind
:
:
True
:
return
true
;
case
ParseNodeKind
:
:
Array
:
case
ParseNodeKind
:
:
Object
:
return
!
(
pn_xflags
&
PNX_NONCONST
)
;
default
:
return
false
;
}
}
class
ObjectBox
{
public
:
JSObject
*
object
;
ObjectBox
(
JSObject
*
object
ObjectBox
*
traceLink
)
;
bool
isFunctionBox
(
)
{
return
object
-
>
is
<
JSFunction
>
(
)
;
}
FunctionBox
*
asFunctionBox
(
)
;
virtual
void
trace
(
JSTracer
*
trc
)
;
static
void
TraceList
(
JSTracer
*
trc
ObjectBox
*
listHead
)
;
protected
:
friend
struct
CGObjectList
;
ObjectBox
*
traceLink
;
ObjectBox
*
emitLink
;
ObjectBox
(
JSFunction
*
function
ObjectBox
*
traceLink
)
;
}
;
enum
ParseReportKind
{
ParseError
ParseWarning
ParseExtraWarning
ParseStrictError
}
;
enum
class
AccessorType
{
None
Getter
Setter
}
;
inline
JSOp
AccessorTypeToJSOp
(
AccessorType
atype
)
{
switch
(
atype
)
{
case
AccessorType
:
:
None
:
return
JSOP_INITPROP
;
case
AccessorType
:
:
Getter
:
return
JSOP_INITPROP_GETTER
;
case
AccessorType
:
:
Setter
:
return
JSOP_INITPROP_SETTER
;
default
:
MOZ_CRASH
(
"
unexpected
accessor
type
"
)
;
}
}
enum
FunctionSyntaxKind
{
Expression
Statement
Arrow
Method
ClassConstructor
DerivedClassConstructor
Getter
Setter
}
;
static
inline
bool
IsConstructorKind
(
FunctionSyntaxKind
kind
)
{
return
kind
=
=
ClassConstructor
|
|
kind
=
=
DerivedClassConstructor
;
}
static
inline
bool
IsMethodDefinitionKind
(
FunctionSyntaxKind
kind
)
{
return
kind
=
=
Method
|
|
IsConstructorKind
(
kind
)
|
|
kind
=
=
Getter
|
|
kind
=
=
Setter
;
}
static
inline
ParseNode
*
FunctionFormalParametersList
(
ParseNode
*
fn
unsigned
*
numFormals
)
{
MOZ_ASSERT
(
fn
-
>
isKind
(
ParseNodeKind
:
:
Function
)
)
;
ParseNode
*
argsBody
=
fn
-
>
pn_body
;
MOZ_ASSERT
(
argsBody
-
>
isKind
(
ParseNodeKind
:
:
ParamsBody
)
)
;
*
numFormals
=
argsBody
-
>
pn_count
;
if
(
*
numFormals
>
0
&
&
argsBody
-
>
last
(
)
-
>
isKind
(
ParseNodeKind
:
:
LexicalScope
)
&
&
argsBody
-
>
last
(
)
-
>
scopeBody
(
)
-
>
isKind
(
ParseNodeKind
:
:
StatementList
)
)
{
(
*
numFormals
)
-
-
;
}
MOZ_ASSERT
(
argsBody
-
>
isArity
(
PN_LIST
)
)
;
return
argsBody
-
>
pn_head
;
}
bool
IsAnonymousFunctionDefinition
(
ParseNode
*
pn
)
;
}
}
#
endif
