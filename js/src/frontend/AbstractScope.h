#
ifndef
frontend_AbstractScope_h
#
define
frontend_AbstractScope_h
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
vm
/
Scope
.
h
"
#
include
"
vm
/
ScopeKind
.
h
"
namespace
js
{
class
Scope
;
class
GlobalScope
;
class
EvalScope
;
class
GCMarker
;
using
HeapPtrScope
=
HeapPtr
<
Scope
*
>
;
class
AbstractScope
{
public
:
using
ScopeType
=
HeapPtrScope
;
private
:
ScopeType
scope_
=
{
}
;
public
:
friend
class
js
:
:
Scope
;
AbstractScope
(
)
{
}
explicit
AbstractScope
(
Scope
*
scope
)
:
scope_
(
scope
)
{
}
explicit
operator
bool
(
)
const
{
return
maybeScope
(
)
;
}
Scope
*
maybeScope
(
)
const
;
template
<
typename
T
>
bool
is
(
)
const
{
static_assert
(
std
:
:
is_base_of
<
Scope
T
>
:
:
value
"
Trying
to
ask
about
non
-
Scope
type
"
)
;
if
(
!
maybeScope
(
)
)
{
return
false
;
}
return
kind
(
)
=
=
T
:
:
classScopeKind_
;
}
ScopeKind
kind
(
)
const
;
AbstractScope
enclosing
(
)
const
;
bool
hasEnvironment
(
)
const
;
bool
isArrow
(
)
const
;
JSFunction
*
canonicalFunction
(
)
const
;
bool
hasOnChain
(
ScopeKind
kind
)
const
{
for
(
AbstractScope
it
=
*
this
;
it
;
it
=
it
.
enclosing
(
)
)
{
if
(
it
.
kind
(
)
=
=
kind
)
{
return
true
;
}
}
return
false
;
}
void
trace
(
JSTracer
*
trc
)
;
}
;
template
<
>
inline
bool
AbstractScope
:
:
is
<
GlobalScope
>
(
)
const
{
return
maybeScope
(
)
&
&
(
kind
(
)
=
=
ScopeKind
:
:
Global
|
|
kind
(
)
=
=
ScopeKind
:
:
NonSyntactic
)
;
}
template
<
>
inline
bool
AbstractScope
:
:
is
<
EvalScope
>
(
)
const
{
return
maybeScope
(
)
&
&
(
kind
(
)
=
=
ScopeKind
:
:
Eval
|
|
kind
(
)
=
=
ScopeKind
:
:
StrictEval
)
;
}
class
AbstractScopeIter
{
AbstractScope
scope_
;
public
:
explicit
AbstractScopeIter
(
const
AbstractScope
&
f
)
:
scope_
(
f
)
{
}
explicit
operator
bool
(
)
const
{
return
!
done
(
)
;
}
bool
done
(
)
const
{
return
!
scope_
;
}
ScopeKind
kind
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
scope_
)
;
return
scope_
.
kind
(
)
;
}
AbstractScope
abstractScope
(
)
const
{
return
scope_
;
}
void
operator
+
+
(
int
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
scope_
=
scope_
.
enclosing
(
)
;
}
bool
hasSyntacticEnvironment
(
)
const
;
void
trace
(
JSTracer
*
trc
)
{
if
(
scope_
)
{
scope_
.
trace
(
trc
)
;
}
}
;
}
;
}
#
endif
