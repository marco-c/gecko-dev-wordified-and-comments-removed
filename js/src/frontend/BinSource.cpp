#
include
"
frontend
/
BinSource
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
frontend
/
BinSource
-
macros
.
h
"
#
include
"
frontend
/
BinTokenReaderTester
.
h
"
#
include
"
frontend
/
FullParseHandler
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
vm
/
RegExpObject
.
h
"
#
include
"
frontend
/
ParseContext
-
inl
.
h
"
#
include
"
frontend
/
ParseNode
-
inl
.
h
"
using
namespace
mozilla
;
namespace
js
{
namespace
frontend
{
using
UsedNamePtr
=
UsedNameTracker
:
:
UsedNameMap
:
:
Ptr
;
template
<
typename
Tok
>
JS
:
:
Result
<
ParseNode
*
>
BinASTParser
<
Tok
>
:
:
parse
(
const
Vector
<
uint8_t
>
&
data
)
{
return
parse
(
data
.
begin
(
)
data
.
length
(
)
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
ParseNode
*
>
BinASTParser
<
Tok
>
:
:
parse
(
const
uint8_t
*
start
const
size_t
length
)
{
auto
result
=
parseAux
(
start
length
)
;
poison
(
)
;
return
result
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
ParseNode
*
>
BinASTParser
<
Tok
>
:
:
parseAux
(
const
uint8_t
*
start
const
size_t
length
)
{
tokenizer_
.
emplace
(
cx_
start
length
)
;
Directives
directives
(
options
(
)
.
strictOption
)
;
GlobalSharedContext
globalsc
(
cx_
ScopeKind
:
:
Global
directives
options
(
)
.
extraWarningsOption
)
;
BinParseContext
globalpc
(
cx_
this
&
globalsc
nullptr
)
;
if
(
!
globalpc
.
init
(
)
)
return
cx_
-
>
alreadyReportedError
(
)
;
ParseContext
:
:
VarScope
varScope
(
cx_
&
globalpc
usedNames_
)
;
if
(
!
varScope
.
init
(
&
globalpc
)
)
return
cx_
-
>
alreadyReportedError
(
)
;
MOZ_TRY
(
tokenizer_
-
>
readHeader
(
)
)
;
ParseNode
*
result
(
nullptr
)
;
MOZ_TRY_VAR
(
result
parseProgram
(
)
)
;
Maybe
<
GlobalScope
:
:
Data
*
>
bindings
=
NewGlobalScopeData
(
cx_
varScope
alloc_
parseContext_
)
;
if
(
!
bindings
)
return
cx_
-
>
alreadyReportedError
(
)
;
globalsc
.
bindings
=
*
bindings
;
return
result
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
FunctionBox
*
>
BinASTParser
<
Tok
>
:
:
buildFunctionBox
(
GeneratorKind
generatorKind
FunctionAsyncKind
functionAsyncKind
FunctionSyntaxKind
syntax
ParseNode
*
name
)
{
RootedAtom
atom
(
cx_
)
;
if
(
name
)
atom
=
name
-
>
name
(
)
;
RootedFunction
fun
(
cx_
)
;
BINJS_TRY_VAR
(
fun
AllocNewFunction
(
cx_
atom
syntax
generatorKind
functionAsyncKind
nullptr
)
)
;
BINJS_TRY_DECL
(
funbox
alloc_
.
new_
<
FunctionBox
>
(
cx_
traceListHead_
fun
0
Directives
(
parseContext_
)
false
generatorKind
functionAsyncKind
)
)
;
traceListHead_
=
funbox
;
funbox
-
>
initWithEnclosingParseContext
(
parseContext_
syntax
)
;
return
funbox
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
ParseNode
*
>
BinASTParser
<
Tok
>
:
:
buildFunction
(
const
size_t
start
const
BinKind
kind
ParseNode
*
name
ParseNode
*
params
ParseNode
*
body
FunctionBox
*
funbox
)
{
MOZ_TRY
(
checkFunctionClosedVars
(
)
)
;
TokenPos
pos
=
tokenizer_
-
>
pos
(
start
)
;
funbox
-
>
function
(
)
-
>
setArgCount
(
params
?
uint16_t
(
params
-
>
pn_count
)
:
0
)
;
params
-
>
appendWithoutOrderAssumption
(
body
)
;
bool
isStatement
=
kind
=
=
BinKind
:
:
EagerFunctionDeclaration
|
|
kind
=
=
BinKind
:
:
SkippableFunctionDeclaration
;
BINJS_TRY_DECL
(
result
isStatement
?
factory_
.
newFunctionStatement
(
pos
)
:
factory_
.
newFunctionExpression
(
pos
)
)
;
factory_
.
setFunctionBox
(
result
funbox
)
;
factory_
.
setFunctionFormalParametersAndBody
(
result
params
)
;
HandlePropertyName
dotThis
=
cx_
-
>
names
(
)
.
dotThis
;
const
bool
declareThis
=
hasUsedName
(
dotThis
)
|
|
funbox
-
>
bindingsAccessedDynamically
(
)
|
|
funbox
-
>
isDerivedClassConstructor
(
)
;
if
(
declareThis
)
{
ParseContext
:
:
Scope
&
funScope
=
parseContext_
-
>
functionScope
(
)
;
ParseContext
:
:
Scope
:
:
AddDeclaredNamePtr
p
=
funScope
.
lookupDeclaredNameForAdd
(
dotThis
)
;
MOZ_ASSERT
(
!
p
)
;
BINJS_TRY
(
funScope
.
addDeclaredName
(
parseContext_
p
dotThis
DeclarationKind
:
:
Var
DeclaredNameInfo
:
:
npos
)
)
;
funbox
-
>
setHasThisBinding
(
)
;
}
BINJS_TRY_DECL
(
bindings
NewFunctionScopeData
(
cx_
parseContext_
-
>
functionScope
(
)
false
alloc_
parseContext_
)
)
;
funbox
-
>
functionScopeBindings
(
)
.
set
(
*
bindings
)
;
if
(
funbox
-
>
function
(
)
-
>
isNamedLambda
(
)
)
{
BINJS_TRY_DECL
(
recursiveBinding
NewLexicalScopeData
(
cx_
parseContext_
-
>
namedLambdaScope
(
)
alloc_
parseContext_
)
)
;
funbox
-
>
namedLambdaBindings
(
)
.
set
(
*
recursiveBinding
)
;
}
return
result
;
}
static
bool
TryMarkCaptureInScope
(
ParseContext
:
:
Scope
&
scope
HandleAtom
atom
)
{
auto
name
=
scope
.
lookupDeclaredName
(
atom
)
;
if
(
!
name
)
return
false
;
name
-
>
value
(
)
-
>
setClosedOver
(
)
;
return
true
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
Ok
>
BinASTParser
<
Tok
>
:
:
parseAndUpdateCapturedNames
(
const
BinKind
kind
)
{
AutoList
guard
(
*
tokenizer_
)
;
uint32_t
length
=
0
;
MOZ_TRY
(
tokenizer_
-
>
enterList
(
length
guard
)
)
;
RootedAtom
name
(
cx_
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
+
+
i
)
{
name
=
nullptr
;
MOZ_TRY_VAR
(
name
tokenizer_
-
>
readAtom
(
)
)
;
if
(
kind
=
=
BinKind
:
:
AssertedParameterScope
)
{
MOZ_ASSERT
(
parseContext_
-
>
isFunctionBox
(
)
)
;
if
(
parseContext_
-
>
functionBox
(
)
-
>
function
(
)
-
>
isNamedLambda
(
)
)
{
if
(
TryMarkCaptureInScope
(
parseContext_
-
>
namedLambdaScope
(
)
name
)
)
continue
;
}
if
(
!
TryMarkCaptureInScope
(
parseContext_
-
>
functionScope
(
)
name
)
)
return
raiseUndeclaredCapture
(
name
)
;
continue
;
}
if
(
kind
=
=
BinKind
:
:
AssertedVarScope
)
{
if
(
TryMarkCaptureInScope
(
parseContext_
-
>
varScope
(
)
name
)
)
continue
;
}
if
(
!
TryMarkCaptureInScope
(
*
parseContext_
-
>
innermostScope
(
)
name
)
)
return
raiseUndeclaredCapture
(
name
)
;
}
MOZ_TRY
(
guard
.
done
(
)
)
;
return
Ok
(
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
Ok
>
BinASTParser
<
Tok
>
:
:
parseAndUpdateScopeNames
(
ParseContext
:
:
Scope
&
scope
DeclarationKind
kind
)
{
AutoList
guard
(
*
tokenizer_
)
;
uint32_t
length
=
0
;
MOZ_TRY
(
tokenizer_
-
>
enterList
(
length
guard
)
)
;
RootedAtom
name
(
cx_
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
+
+
i
)
{
name
=
nullptr
;
MOZ_TRY_VAR
(
name
tokenizer_
-
>
readAtom
(
)
)
;
auto
ptr
=
scope
.
lookupDeclaredNameForAdd
(
name
)
;
if
(
ptr
)
return
raiseError
(
"
Variable
redeclaration
"
)
;
BINJS_TRY
(
scope
.
addDeclaredName
(
parseContext_
ptr
name
.
get
(
)
kind
tokenizer_
-
>
offset
(
)
)
)
;
}
MOZ_TRY
(
guard
.
done
(
)
)
;
return
Ok
(
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
Ok
>
BinASTParser
<
Tok
>
:
:
checkBinding
(
JSAtom
*
name
)
{
ParseContext
:
:
Scope
&
scope
=
variableDeclarationKind_
=
=
VariableDeclarationKind
:
:
Var
?
parseContext_
-
>
varScope
(
)
:
*
parseContext_
-
>
innermostScope
(
)
;
auto
ptr
=
scope
.
lookupDeclaredName
(
name
-
>
asPropertyName
(
)
)
;
if
(
!
ptr
)
return
raiseMissingVariableInAssertedScope
(
name
)
;
return
Ok
(
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
Ok
>
BinASTParser
<
Tok
>
:
:
checkClosedVars
(
ParseContext
:
:
Scope
&
scope
)
{
for
(
ParseContext
:
:
Scope
:
:
BindingIter
bi
=
scope
.
bindings
(
parseContext_
)
;
bi
;
bi
+
+
)
{
if
(
UsedNamePtr
p
=
usedNames_
.
lookup
(
bi
.
name
(
)
)
)
{
bool
closedOver
;
p
-
>
value
(
)
.
noteBoundInScope
(
parseContext_
-
>
scriptId
(
)
scope
.
id
(
)
&
closedOver
)
;
if
(
closedOver
&
&
!
bi
.
closedOver
(
)
)
return
raiseInvalidClosedVar
(
bi
.
name
(
)
)
;
}
}
return
Ok
(
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
Ok
>
BinASTParser
<
Tok
>
:
:
checkFunctionClosedVars
(
)
{
MOZ_ASSERT
(
parseContext_
-
>
isFunctionBox
(
)
)
;
MOZ_TRY
(
checkClosedVars
(
*
parseContext_
-
>
innermostScope
(
)
)
)
;
MOZ_TRY
(
checkClosedVars
(
parseContext_
-
>
functionScope
(
)
)
)
;
if
(
parseContext_
-
>
functionBox
(
)
-
>
function
(
)
-
>
isNamedLambda
(
)
)
MOZ_TRY
(
checkClosedVars
(
parseContext_
-
>
namedLambdaScope
(
)
)
)
;
return
Ok
(
)
;
}
template
<
typename
Tok
>
JS
:
:
Result
<
ParseNode
*
>
BinASTParser
<
Tok
>
:
:
appendDirectivesToBody
(
ParseNode
*
body
ParseNode
*
directives
)
{
ParseNode
*
result
=
body
;
if
(
directives
&
&
directives
-
>
pn_count
>
=
1
)
{
MOZ_ASSERT
(
directives
-
>
isArity
(
PN_LIST
)
)
;
BINJS_TRY_DECL
(
prefix
factory_
.
newStatementList
(
directives
-
>
pn_head
-
>
pn_pos
)
)
;
for
(
ParseNode
*
iter
=
directives
-
>
pn_head
;
iter
!
=
nullptr
;
iter
=
iter
-
>
pn_next
)
{
BINJS_TRY_DECL
(
statement
factory_
.
newExprStatement
(
iter
iter
-
>
pn_pos
.
end
)
)
;
prefix
-
>
appendWithoutOrderAssumption
(
statement
)
;
}
ParseNode
*
iter
=
body
-
>
pn_head
;
while
(
iter
)
{
ParseNode
*
next
=
iter
-
>
pn_next
;
prefix
-
>
appendWithoutOrderAssumption
(
iter
)
;
iter
=
next
;
}
prefix
-
>
setKind
(
body
-
>
getKind
(
)
)
;
prefix
-
>
setOp
(
body
-
>
getOp
(
)
)
;
result
=
prefix
;
#
if
defined
(
DEBUG
)
result
-
>
checkListConsistency
(
)
;
#
endif
}
return
result
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseInvalidClosedVar
(
JSAtom
*
name
)
{
return
raiseError
(
"
Captured
variable
was
not
declared
as
captured
"
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseUndeclaredCapture
(
JSAtom
*
name
)
{
return
raiseError
(
"
Captured
variable
undeclared
in
scope
"
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseMissingVariableInAssertedScope
(
JSAtom
*
name
)
{
return
raiseError
(
"
Missing
variable
in
AssertedScope
"
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseMissingDirectEvalInAssertedScope
(
)
{
return
raiseError
(
"
Direct
call
to
eval
was
not
declared
in
AssertedScope
"
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseInvalidKind
(
const
char
*
superKind
const
BinKind
kind
)
{
Sprinter
out
(
cx_
)
;
BINJS_TRY
(
out
.
init
(
)
)
;
BINJS_TRY
(
out
.
printf
(
"
In
%
s
invalid
kind
%
s
"
superKind
describeBinKind
(
kind
)
)
)
;
return
raiseError
(
out
.
string
(
)
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseInvalidVariant
(
const
char
*
kind
const
BinVariant
value
)
{
Sprinter
out
(
cx_
)
;
BINJS_TRY
(
out
.
init
(
)
)
;
BINJS_TRY
(
out
.
printf
(
"
In
%
s
invalid
variant
'
%
s
'
"
kind
describeBinVariant
(
value
)
)
)
;
return
raiseError
(
out
.
string
(
)
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseMissingField
(
const
char
*
kind
const
BinField
field
)
{
Sprinter
out
(
cx_
)
;
BINJS_TRY
(
out
.
init
(
)
)
;
BINJS_TRY
(
out
.
printf
(
"
In
%
s
missing
field
'
%
s
'
"
kind
describeBinField
(
field
)
)
)
;
return
raiseError
(
out
.
string
(
)
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseEmpty
(
const
char
*
description
)
{
Sprinter
out
(
cx_
)
;
BINJS_TRY
(
out
.
init
(
)
)
;
BINJS_TRY
(
out
.
printf
(
"
Empty
%
s
"
description
)
)
;
return
raiseError
(
out
.
string
(
)
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseOOM
(
)
{
return
tokenizer_
-
>
raiseOOM
(
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseError
(
BinKind
kind
const
char
*
description
)
{
Sprinter
out
(
cx_
)
;
BINJS_TRY
(
out
.
init
(
)
)
;
BINJS_TRY
(
out
.
printf
(
"
In
%
s
"
description
)
)
;
return
tokenizer_
-
>
raiseError
(
out
.
string
(
)
)
;
}
template
<
typename
Tok
>
mozilla
:
:
GenericErrorResult
<
JS
:
:
Error
&
>
BinASTParser
<
Tok
>
:
:
raiseError
(
const
char
*
description
)
{
return
tokenizer_
-
>
raiseError
(
description
)
;
}
template
<
typename
Tok
>
void
BinASTParser
<
Tok
>
:
:
poison
(
)
{
tokenizer_
.
reset
(
)
;
}
template
<
typename
Tok
>
void
BinASTParser
<
Tok
>
:
:
reportErrorNoOffsetVA
(
unsigned
errorNumber
va_list
args
)
{
ErrorMetadata
metadata
;
metadata
.
filename
=
getFilename
(
)
;
metadata
.
lineNumber
=
0
;
metadata
.
columnNumber
=
offset
(
)
;
metadata
.
isMuted
=
options
(
)
.
mutedErrors
(
)
;
ReportCompileError
(
cx_
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
args
)
;
}
template
<
typename
Tok
>
void
BinASTParser
<
Tok
>
:
:
errorAtVA
(
uint32_t
offset
unsigned
errorNumber
va_list
*
args
)
{
ErrorMetadata
metadata
;
metadata
.
filename
=
getFilename
(
)
;
metadata
.
lineNumber
=
0
;
metadata
.
columnNumber
=
offset
;
metadata
.
isMuted
=
options
(
)
.
mutedErrors
(
)
;
ReportCompileError
(
cx_
Move
(
metadata
)
nullptr
JSREPORT_ERROR
errorNumber
*
args
)
;
}
template
<
typename
Tok
>
bool
BinASTParser
<
Tok
>
:
:
reportExtraWarningErrorNumberVA
(
UniquePtr
<
JSErrorNotes
>
notes
uint32_t
offset
unsigned
errorNumber
va_list
*
args
)
{
if
(
!
options
(
)
.
extraWarningsOption
)
return
true
;
ErrorMetadata
metadata
;
metadata
.
filename
=
getFilename
(
)
;
metadata
.
lineNumber
=
0
;
metadata
.
columnNumber
=
offset
;
metadata
.
isMuted
=
options
(
)
.
mutedErrors
(
)
;
if
(
options
(
)
.
werrorOption
)
{
ReportCompileError
(
cx_
Move
(
metadata
)
Move
(
notes
)
JSREPORT_STRICT
errorNumber
*
args
)
;
return
false
;
}
return
ReportCompileWarning
(
cx_
Move
(
metadata
)
Move
(
notes
)
JSREPORT_STRICT
|
JSREPORT_WARNING
errorNumber
*
args
)
;
}
bool
BinASTParserBase
:
:
hasUsedName
(
HandlePropertyName
name
)
{
if
(
UsedNamePtr
p
=
usedNames_
.
lookup
(
name
)
)
return
p
-
>
value
(
)
.
isUsedInScript
(
parseContext_
-
>
scriptId
(
)
)
;
return
false
;
}
void
TraceBinParser
(
JSTracer
*
trc
AutoGCRooter
*
parser
)
{
static_cast
<
BinASTParserBase
*
>
(
parser
)
-
>
trace
(
trc
)
;
}
template
class
BinASTParser
<
BinTokenReaderMultipart
>
;
template
class
BinASTParser
<
BinTokenReaderTester
>
;
}
}
