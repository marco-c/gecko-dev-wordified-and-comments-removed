#
ifndef
frontend_BinTokenReaderMultipart_h
#
define
frontend_BinTokenReaderMultipart_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
frontend
/
BinToken
.
h
"
#
include
"
frontend
/
BinTokenReaderBase
.
h
"
namespace
js
{
namespace
frontend
{
using
namespace
mozilla
;
using
namespace
JS
;
class
MOZ_STACK_CLASS
BinTokenReaderMultipart
:
public
BinTokenReaderBase
{
public
:
class
AutoList
;
class
AutoTuple
;
class
AutoTaggedTuple
;
using
CharSlice
=
BinaryASTSupport
:
:
CharSlice
;
class
BinFields
{
public
:
explicit
BinFields
(
JSContext
*
)
{
}
}
;
struct
Chars
:
public
CharSlice
{
explicit
Chars
(
JSContext
*
)
:
CharSlice
(
nullptr
0
)
{
}
Chars
(
const
char
*
start
const
uint32_t
byteLen
)
:
CharSlice
(
start
byteLen
)
{
}
Chars
(
const
Chars
&
other
)
=
default
;
}
;
public
:
BinTokenReaderMultipart
(
JSContext
*
cx
const
uint8_t
*
start
const
size_t
length
)
;
BinTokenReaderMultipart
(
JSContext
*
cx
const
Vector
<
uint8_t
>
&
chars
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readHeader
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
bool
>
readBool
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
double
>
readDouble
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
JSAtom
*
>
readMaybeAtom
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
JSAtom
*
>
readAtom
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
readChars
(
Chars
&
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Maybe
<
BinVariant
>
>
readMaybeVariant
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
BinVariant
>
readVariant
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
enterList
(
uint32_t
&
length
AutoList
&
guard
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
enterTaggedTuple
(
BinKind
&
tag
BinTokenReaderMultipart
:
:
BinFields
&
fields
AutoTaggedTuple
&
guard
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
enterUntaggedTuple
(
AutoTuple
&
guard
)
;
private
:
MOZ_MUST_USE
JS
:
:
Result
<
uint32_t
>
readInternalUint32
(
)
;
private
:
Vector
<
BinKind
>
grammarTable_
;
js
:
:
HashMap
<
uint32_t
BinVariant
DefaultHasher
<
uint32_t
>
SystemAllocPolicy
>
variantsTable_
;
using
AtomVector
=
GCVector
<
JSAtom
*
>
;
JS
:
:
Rooted
<
AtomVector
>
atomsTable_
;
Vector
<
Chars
>
slicesTable_
;
const
uint8_t
*
posBeforeTree_
;
BinTokenReaderMultipart
(
const
BinTokenReaderMultipart
&
)
=
delete
;
BinTokenReaderMultipart
(
BinTokenReaderMultipart
&
&
)
=
delete
;
BinTokenReaderMultipart
&
operator
=
(
BinTokenReaderMultipart
&
)
=
delete
;
public
:
class
MOZ_STACK_CLASS
AutoBase
{
protected
:
explicit
AutoBase
(
BinTokenReaderMultipart
&
reader
)
;
~
AutoBase
(
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
checkPosition
(
const
uint8_t
*
expectedPosition
)
;
friend
BinTokenReaderMultipart
;
void
init
(
)
;
bool
initialized_
;
BinTokenReaderMultipart
&
reader_
;
}
;
class
MOZ_STACK_CLASS
AutoList
:
public
AutoBase
{
public
:
explicit
AutoList
(
BinTokenReaderMultipart
&
reader
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
done
(
)
;
protected
:
friend
BinTokenReaderMultipart
;
void
init
(
)
;
}
;
class
MOZ_STACK_CLASS
AutoTaggedTuple
:
public
AutoBase
{
public
:
explicit
AutoTaggedTuple
(
BinTokenReaderMultipart
&
reader
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
done
(
)
;
}
;
class
MOZ_STACK_CLASS
AutoTuple
:
public
AutoBase
{
public
:
explicit
AutoTuple
(
BinTokenReaderMultipart
&
reader
)
;
MOZ_MUST_USE
JS
:
:
Result
<
Ok
>
done
(
)
;
}
;
template
<
size_t
N
>
static
bool
equals
(
const
Chars
&
left
const
char
(
&
right
)
[
N
]
)
{
MOZ_ASSERT
(
N
>
0
)
;
MOZ_ASSERT
(
right
[
N
-
1
]
=
=
0
)
;
if
(
left
.
byteLen_
+
1
!
=
N
)
return
false
;
if
(
!
std
:
:
equal
(
left
.
start_
left
.
start_
+
left
.
byteLen_
right
)
)
return
false
;
return
true
;
}
template
<
size_t
N
>
static
JS
:
:
Result
<
Ok
JS
:
:
Error
&
>
checkFields
(
const
BinKind
kind
const
BinFields
&
actual
const
BinField
(
&
expected
)
[
N
]
)
{
return
Ok
(
)
;
}
static
JS
:
:
Result
<
Ok
JS
:
:
Error
&
>
checkFields0
(
const
BinKind
kind
const
BinFields
&
actual
)
{
return
Ok
(
)
;
}
}
;
}
}
#
endif
