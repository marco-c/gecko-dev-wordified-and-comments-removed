#
ifndef
frontend_LexicalScopeEmitter_h
#
define
frontend_LexicalScopeEmitter_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
vm
/
Scope
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
LexicalScopeEmitter
{
BytecodeEmitter
*
bce_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCache_
;
mozilla
:
:
Maybe
<
EmitterScope
>
emitterScope_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Scope
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
explicit
LexicalScopeEmitter
(
BytecodeEmitter
*
bce
)
;
const
EmitterScope
&
emitterScope
(
)
const
{
return
*
emitterScope_
;
}
MOZ_MUST_USE
bool
emitScope
(
ScopeKind
kind
ParserLexicalScopeData
*
bindings
)
;
MOZ_MUST_USE
bool
emitEmptyScope
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
}
}
#
endif
