#
include
"
frontend
/
UsingEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
IfEmitter
.
h
"
#
include
"
vm
/
ThrowMsgKind
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
UsingEmitter
:
:
UsingEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
UsingEmitter
:
:
emitCheckDisposeMethod
(
JS
:
:
SymbolCode
hint
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
Symbol
uint8_t
(
hint
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
GetElem
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitCheckIsCallable
(
)
)
{
return
false
;
}
InternalIfEmitter
ifCallable
(
bce_
)
;
if
(
!
ifCallable
.
emitThenElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
ifCallable
.
emitElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
ThrowMsg
uint8_t
(
ThrowMsgKind
:
:
UsingWithoutDispose
)
)
)
{
return
false
;
}
if
(
!
ifCallable
.
emitEnd
(
)
)
{
return
false
;
}
return
true
;
}
bool
UsingEmitter
:
:
prepareForAssignment
(
Kind
kind
)
{
JS
:
:
SymbolCode
symdispose
;
switch
(
kind
)
{
case
Kind
:
:
Sync
:
symdispose
=
JS
:
:
SymbolCode
:
:
dispose
;
break
;
case
Kind
:
:
Async
:
MOZ_CRASH
(
"
Async
disposal
not
implemented
"
)
;
default
:
MOZ_CRASH
(
"
Invalid
kind
"
)
;
}
bce_
-
>
innermostEmitterScope
(
)
-
>
setHasDisposables
(
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
IsNullOrUndefined
)
)
{
return
false
;
}
InternalIfEmitter
ifValueNullOrUndefined
(
bce_
)
;
if
(
!
ifValueNullOrUndefined
.
emitThen
(
IfEmitter
:
:
ConditionKind
:
:
Negative
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitCheckIsObj
(
CheckIsObjectKind
:
:
Disposable
)
)
{
return
false
;
}
if
(
!
emitCheckDisposeMethod
(
symdispose
)
)
{
return
false
;
}
if
(
!
ifValueNullOrUndefined
.
emitEnd
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
AddDisposable
)
)
{
return
false
;
}
return
true
;
}
