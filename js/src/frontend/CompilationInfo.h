#
ifndef
frontend_CompilationInfo_h
#
define
frontend_CompilationInfo_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
frontend
/
ParserAtom
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
frontend
/
UsedNameTracker
.
h
"
#
include
"
js
/
GCVariant
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
RealmOptions
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
js
/
WasmModule
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Realm
.
h
"
namespace
js
{
class
JSONPrinter
;
namespace
frontend
{
struct
ScopeContext
{
bool
allowNewTarget
=
false
;
bool
allowSuperProperty
=
false
;
bool
allowSuperCall
=
false
;
bool
allowArguments
=
true
;
ThisBinding
thisBinding
=
ThisBinding
:
:
Global
;
bool
inWith
=
false
;
bool
inClass
=
false
;
mozilla
:
:
Maybe
<
MemberInitializers
>
memberInitializers
=
{
}
;
JS
:
:
Rooted
<
Scope
*
>
effectiveScope
;
explicit
ScopeContext
(
JSContext
*
cx
Scope
*
scope
JSObject
*
enclosingEnv
=
nullptr
)
:
effectiveScope
(
cx
determineEffectiveScope
(
scope
enclosingEnv
)
)
{
computeAllowSyntax
(
scope
)
;
computeThisBinding
(
effectiveScope
)
;
computeInWith
(
scope
)
;
computeExternalInitializers
(
scope
)
;
computeInClass
(
scope
)
;
}
private
:
void
computeAllowSyntax
(
Scope
*
scope
)
;
void
computeThisBinding
(
Scope
*
scope
)
;
void
computeInWith
(
Scope
*
scope
)
;
void
computeExternalInitializers
(
Scope
*
scope
)
;
void
computeInClass
(
Scope
*
scope
)
;
static
Scope
*
determineEffectiveScope
(
Scope
*
scope
JSObject
*
environment
)
;
}
;
struct
CompilationInfo
;
class
ScriptStencilIterable
{
public
:
class
ScriptAndFunction
{
public
:
ScriptStencil
&
stencil
;
HandleFunction
function
;
FunctionIndex
functionIndex
;
ScriptAndFunction
(
)
=
delete
;
ScriptAndFunction
(
ScriptStencil
&
stencil
HandleFunction
function
FunctionIndex
functionIndex
)
:
stencil
(
stencil
)
function
(
function
)
functionIndex
(
functionIndex
)
{
}
}
;
class
Iterator
{
size_t
index_
=
0
;
CompilationInfo
*
compilationInfo_
;
Iterator
(
CompilationInfo
*
compilationInfo
size_t
index
)
:
index_
(
index
)
compilationInfo_
(
compilationInfo
)
{
skipNonFunctions
(
)
;
}
public
:
explicit
Iterator
(
CompilationInfo
*
compilationInfo
)
:
compilationInfo_
(
compilationInfo
)
{
skipNonFunctions
(
)
;
}
Iterator
operator
+
+
(
)
{
next
(
)
;
skipNonFunctions
(
)
;
return
*
this
;
}
inline
void
next
(
)
;
inline
void
skipNonFunctions
(
)
;
bool
operator
!
=
(
const
Iterator
&
other
)
const
{
return
index_
!
=
other
.
index_
;
}
inline
ScriptAndFunction
operator
*
(
)
;
static
inline
Iterator
end
(
CompilationInfo
*
compilationInfo
)
;
}
;
CompilationInfo
*
compilationInfo_
;
explicit
ScriptStencilIterable
(
CompilationInfo
*
compilationInfo
)
:
compilationInfo_
(
compilationInfo
)
{
}
Iterator
begin
(
)
const
{
return
Iterator
(
compilationInfo_
)
;
}
Iterator
end
(
)
const
{
return
Iterator
:
:
end
(
compilationInfo_
)
;
}
}
;
struct
MOZ_RAII
CompilationInfo
{
static
constexpr
FunctionIndex
TopLevelIndex
=
FunctionIndex
(
0
)
;
JSContext
*
cx
;
const
JS
:
:
ReadOnlyCompileOptions
&
options
;
AutoKeepAtoms
keepAtoms
;
ParserAtomsTable
parserAtoms
;
Directives
directives
;
ScopeContext
scopeContext
;
JS
:
:
Rooted
<
JSScript
*
>
script
;
JS
:
:
Rooted
<
BaseScript
*
>
lazy
;
JS
:
:
Rooted
<
ModuleObject
*
>
module
;
UsedNameTracker
usedNames
;
LifoAllocScope
&
allocScope
;
Vector
<
RegExpStencil
>
regExpData
;
Vector
<
BigIntStencil
>
bigIntData
;
Vector
<
ObjLiteralStencil
>
objLiteralData
;
JS
:
:
RootedVector
<
JSFunction
*
>
functions
;
Vector
<
ScriptStencil
>
scriptData
;
JS
:
:
Rooted
<
Scope
*
>
enclosingScope
;
JS
:
:
RootedVector
<
js
:
:
Scope
*
>
scopes
;
Vector
<
ScopeStencil
>
scopeData
;
StencilModuleMetadata
moduleMetadata
;
HashMap
<
FunctionIndex
RefPtr
<
const
JS
:
:
WasmModule
>
>
asmJS
;
JS
:
:
Rooted
<
ScriptSourceHolder
>
source_
;
JS
:
:
Rooted
<
ScriptSourceObject
*
>
sourceObject
;
struct
RewindToken
{
size_t
scriptDataLength
=
0
;
size_t
asmJSCount
=
0
;
}
;
RewindToken
getRewindToken
(
)
;
void
rewind
(
const
RewindToken
&
pos
)
;
CompilationInfo
(
JSContext
*
cx
LifoAllocScope
&
alloc
const
JS
:
:
ReadOnlyCompileOptions
&
options
Scope
*
enclosingScope
=
nullptr
JSObject
*
enclosingEnv
=
nullptr
)
:
cx
(
cx
)
options
(
options
)
keepAtoms
(
cx
)
parserAtoms
(
cx
)
directives
(
options
.
forceStrictMode
(
)
)
scopeContext
(
cx
enclosingScope
enclosingEnv
)
script
(
cx
)
lazy
(
cx
)
module
(
cx
)
usedNames
(
cx
)
allocScope
(
alloc
)
regExpData
(
cx
)
bigIntData
(
cx
)
objLiteralData
(
cx
)
functions
(
cx
)
scriptData
(
cx
)
enclosingScope
(
cx
)
scopes
(
cx
)
scopeData
(
cx
)
moduleMetadata
(
cx
)
asmJS
(
cx
)
source_
(
cx
)
sourceObject
(
cx
)
{
}
bool
init
(
JSContext
*
cx
)
;
bool
initForStandaloneFunction
(
JSContext
*
cx
HandleScope
enclosingScope
)
{
if
(
!
init
(
cx
)
)
{
return
false
;
}
this
-
>
enclosingScope
=
enclosingScope
;
return
true
;
}
void
initFromLazy
(
BaseScript
*
lazy
)
{
this
-
>
lazy
=
lazy
;
this
-
>
enclosingScope
=
lazy
-
>
function
(
)
-
>
enclosingScope
(
)
;
}
void
setEnclosingScope
(
Scope
*
scope
)
{
enclosingScope
=
scope
;
}
ScriptSource
*
source
(
)
{
return
source_
.
get
(
)
.
get
(
)
;
}
void
setSource
(
ScriptSource
*
ss
)
{
return
source_
.
get
(
)
.
reset
(
ss
)
;
}
template
<
typename
Unit
>
MOZ_MUST_USE
bool
assignSource
(
JS
:
:
SourceText
<
Unit
>
&
sourceBuffer
)
{
return
source
(
)
-
>
assignSource
(
cx
options
sourceBuffer
)
;
}
MOZ_MUST_USE
bool
instantiateStencils
(
)
;
JSAtom
*
liftParserAtomToJSAtom
(
const
ParserAtom
*
parserAtom
)
{
return
parserAtom
-
>
toJSAtom
(
cx
)
.
unwrapOr
(
nullptr
)
;
}
const
ParserAtom
*
lowerJSAtomToParserAtom
(
JSAtom
*
atom
)
{
auto
result
=
parserAtoms
.
internJSAtom
(
cx
atom
)
;
return
result
.
unwrapOr
(
nullptr
)
;
}
CompilationInfo
(
const
CompilationInfo
&
)
=
delete
;
CompilationInfo
(
CompilationInfo
&
&
)
=
delete
;
CompilationInfo
&
operator
=
(
const
CompilationInfo
&
)
=
delete
;
CompilationInfo
&
operator
=
(
CompilationInfo
&
&
)
=
delete
;
ScriptStencilIterable
functionScriptStencils
(
)
{
return
ScriptStencilIterable
(
this
)
;
}
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_JITSPEW
)
void
dumpStencil
(
)
;
void
dumpStencil
(
js
:
:
JSONPrinter
&
json
)
;
#
endif
}
;
inline
void
ScriptStencilIterable
:
:
Iterator
:
:
next
(
)
{
MOZ_ASSERT
(
index_
<
compilationInfo_
-
>
scriptData
.
length
(
)
)
;
index_
+
+
;
}
inline
void
ScriptStencilIterable
:
:
Iterator
:
:
skipNonFunctions
(
)
{
size_t
length
=
compilationInfo_
-
>
scriptData
.
length
(
)
;
while
(
index_
<
length
)
{
if
(
compilationInfo_
-
>
scriptData
[
index_
]
.
isFunction
(
)
)
{
return
;
}
index_
+
+
;
}
}
inline
ScriptStencilIterable
:
:
ScriptAndFunction
ScriptStencilIterable
:
:
Iterator
:
:
operator
*
(
)
{
ScriptStencil
&
stencil
=
compilationInfo_
-
>
scriptData
[
index_
]
;
FunctionIndex
functionIndex
=
FunctionIndex
(
index_
)
;
return
ScriptAndFunction
(
stencil
compilationInfo_
-
>
functions
[
functionIndex
]
functionIndex
)
;
}
inline
ScriptStencilIterable
:
:
Iterator
ScriptStencilIterable
:
:
Iterator
:
:
end
(
CompilationInfo
*
compilationInfo
)
{
return
Iterator
(
compilationInfo
compilationInfo
-
>
scriptData
.
length
(
)
)
;
}
}
}
#
endif
