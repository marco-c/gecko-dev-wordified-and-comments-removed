#
ifndef
frontend_CForEmitter_h
#
define
frontend_CForEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
BytecodeControlStructures
.
h
"
#
include
"
frontend
/
BytecodeOffset
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
EmitterScope
;
class
MOZ_STACK_CLASS
CForEmitter
{
public
:
enum
class
Cond
{
Missing
Present
}
;
enum
class
Update
{
Missing
Present
}
;
private
:
BytecodeEmitter
*
bce_
;
Cond
cond_
=
Cond
:
:
Missing
;
Update
update_
=
Update
:
:
Missing
;
mozilla
:
:
Maybe
<
LoopControl
>
loopInfo_
;
const
EmitterScope
*
headLexicalEmitterScopeForLet_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCache_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Init
Cond
Body
Update
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
CForEmitter
(
BytecodeEmitter
*
bce
const
EmitterScope
*
headLexicalEmitterScopeForLet
)
;
[
[
nodiscard
]
]
bool
emitInit
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
initPos
)
;
[
[
nodiscard
]
]
bool
emitCond
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
condPos
)
;
[
[
nodiscard
]
]
bool
emitBody
(
Cond
cond
)
;
[
[
nodiscard
]
]
bool
emitUpdate
(
Update
update
const
mozilla
:
:
Maybe
<
uint32_t
>
&
updatePos
)
;
[
[
nodiscard
]
]
bool
emitEnd
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
forPos
)
;
}
;
}
}
#
endif
