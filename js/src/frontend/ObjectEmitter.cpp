#
include
"
frontend
/
ObjectEmitter
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
IfEmitter
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
vm
/
FunctionPrefixKind
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
PropertyEmitter
:
:
PropertyEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
PropertyEmitter
:
:
prepareForProtoValue
(
uint32_t
keyPos
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
bce_
-
>
updateSourceCoordNotes
(
keyPos
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ProtoValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitMutateProto
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
ProtoValue
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
MutateProto
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForSpreadOperand
(
uint32_t
spreadPos
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
bce_
-
>
updateSourceCoordNotes
(
spreadPos
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
SpreadOperand
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitSpread
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
SpreadOperand
)
;
if
(
!
bce_
-
>
emitCopyDataProperties
(
BytecodeEmitter
:
:
CopyOption
:
:
Unfiltered
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
MOZ_ALWAYS_INLINE
bool
PropertyEmitter
:
:
prepareForProp
(
uint32_t
keyPos
bool
isStatic
bool
isIndexOrComputed
)
{
isStatic_
=
isStatic
;
isIndexOrComputed_
=
isIndexOrComputed
;
if
(
!
bce_
-
>
updateSourceCoordNotes
(
keyPos
)
)
{
return
false
;
}
if
(
isStatic_
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
return
true
;
}
bool
PropertyEmitter
:
:
prepareForPrivateMethod
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
isClass_
)
;
isStatic_
=
false
;
isIndexOrComputed_
=
false
;
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
PrivateMethodValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForPrivateStaticMethod
(
uint32_t
keyPos
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
isClass_
)
;
if
(
!
prepareForProp
(
keyPos
true
true
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
PrivateStaticMethod
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForPropValue
(
uint32_t
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
false
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
PropValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForIndexPropKey
(
uint32_t
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
true
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
IndexKey
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForIndexPropValue
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
IndexKey
)
;
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
IndexValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForComputedPropKey
(
uint32_t
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
true
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ComputedKey
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForComputedPropValue
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
ComputedKey
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
ToPropertyKey
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ComputedValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInitHomeObject
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
PropValue
|
|
propertyState_
=
=
PropertyState
:
:
PrivateMethodValue
|
|
propertyState_
=
=
PropertyState
:
:
PrivateStaticMethod
|
|
propertyState_
=
=
PropertyState
:
:
IndexValue
|
|
propertyState_
=
=
PropertyState
:
:
ComputedValue
)
;
if
(
!
bce_
-
>
emitDupAt
(
1
+
isIndexOrComputed_
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
#
ifdef
DEBUG
if
(
propertyState_
=
=
PropertyState
:
:
PropValue
)
{
propertyState_
=
PropertyState
:
:
InitHomeObj
;
}
else
if
(
propertyState_
=
=
PropertyState
:
:
PrivateMethodValue
)
{
propertyState_
=
PropertyState
:
:
InitHomeObjForPrivateMethod
;
}
else
if
(
propertyState_
=
=
PropertyState
:
:
PrivateStaticMethod
)
{
propertyState_
=
PropertyState
:
:
InitHomeObjForPrivateStaticMethod
;
}
else
if
(
propertyState_
=
=
PropertyState
:
:
IndexValue
)
{
propertyState_
=
PropertyState
:
:
InitHomeObjForIndex
;
}
else
{
propertyState_
=
PropertyState
:
:
InitHomeObjForComputed
;
}
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInit
(
AccessorType
accessorType
TaggedParserAtomIndex
key
)
{
switch
(
accessorType
)
{
case
AccessorType
:
:
None
:
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenProp
:
JSOp
:
:
InitProp
key
)
;
case
AccessorType
:
:
Getter
:
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenPropGetter
:
JSOp
:
:
InitPropGetter
key
)
;
case
AccessorType
:
:
Setter
:
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenPropSetter
:
JSOp
:
:
InitPropSetter
key
)
;
}
MOZ_CRASH
(
"
Invalid
op
"
)
;
}
bool
PropertyEmitter
:
:
emitInitIndexOrComputed
(
AccessorType
accessorType
)
{
switch
(
accessorType
)
{
case
AccessorType
:
:
None
:
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElem
:
JSOp
:
:
InitElem
)
;
case
AccessorType
:
:
Getter
:
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemGetter
:
JSOp
:
:
InitElemGetter
)
;
case
AccessorType
:
:
Setter
:
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemSetter
:
JSOp
:
:
InitElemSetter
)
;
}
MOZ_CRASH
(
"
Invalid
op
"
)
;
}
bool
PropertyEmitter
:
:
emitPrivateStaticMethod
(
AccessorType
accessorType
)
{
MOZ_ASSERT
(
isClass_
)
;
switch
(
accessorType
)
{
case
AccessorType
:
:
None
:
return
emitInitIndexOrComputed
(
JSOp
:
:
InitLockedElem
)
;
case
AccessorType
:
:
Getter
:
return
emitInitIndexOrComputed
(
JSOp
:
:
InitHiddenElemGetter
)
;
case
AccessorType
:
:
Setter
:
return
emitInitIndexOrComputed
(
JSOp
:
:
InitHiddenElemSetter
)
;
}
MOZ_CRASH
(
"
Invalid
op
"
)
;
}
bool
PropertyEmitter
:
:
emitInit
(
JSOp
op
TaggedParserAtomIndex
key
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
PropValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObj
)
;
MOZ_ASSERT
(
op
=
=
JSOp
:
:
InitProp
|
|
op
=
=
JSOp
:
:
InitHiddenProp
|
|
op
=
=
JSOp
:
:
InitPropGetter
|
|
op
=
=
JSOp
:
:
InitHiddenPropGetter
|
|
op
=
=
JSOp
:
:
InitPropSetter
|
|
op
=
=
JSOp
:
:
InitHiddenPropSetter
)
;
if
(
!
bce_
-
>
emitAtomOp
(
op
key
)
)
{
return
false
;
}
if
(
!
emitPopClassConstructor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
skipInit
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
PrivateMethodValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForPrivateMethod
)
;
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInitIndexOrComputed
(
JSOp
op
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
IndexValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForIndex
|
|
propertyState_
=
=
PropertyState
:
:
ComputedValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForComputed
|
|
propertyState_
=
=
PropertyState
:
:
PrivateStaticMethod
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForPrivateStaticMethod
)
;
MOZ_ASSERT
(
op
=
=
JSOp
:
:
InitElem
|
|
op
=
=
JSOp
:
:
InitHiddenElem
|
|
op
=
=
JSOp
:
:
InitLockedElem
|
|
op
=
=
JSOp
:
:
InitElemGetter
|
|
op
=
=
JSOp
:
:
InitHiddenElemGetter
|
|
op
=
=
JSOp
:
:
InitElemSetter
|
|
op
=
=
JSOp
:
:
InitHiddenElemSetter
)
;
if
(
!
bce_
-
>
emit1
(
op
)
)
{
return
false
;
}
if
(
!
emitPopClassConstructor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitPopClassConstructor
(
)
{
if
(
isStatic_
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
return
true
;
}
ObjectEmitter
:
:
ObjectEmitter
(
BytecodeEmitter
*
bce
)
:
PropertyEmitter
(
bce
)
{
}
bool
ObjectEmitter
:
:
emitObject
(
size_t
propertyCount
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Start
)
;
uint8_t
propCount
=
(
propertyCount
>
255
)
?
255
:
uint8_t
(
propertyCount
)
;
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
NewInit
propCount
)
)
{
return
false
;
}
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
Object
;
#
endif
return
true
;
}
bool
ObjectEmitter
:
:
emitObjectWithTemplateOnStack
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Start
)
;
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
Object
;
#
endif
return
true
;
}
bool
ObjectEmitter
:
:
emitEnd
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Object
)
;
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
End
;
#
endif
return
true
;
}
AutoSaveLocalStrictMode
:
:
AutoSaveLocalStrictMode
(
SharedContext
*
sc
)
:
sc_
(
sc
)
{
savedStrictness_
=
sc_
-
>
setLocalStrictMode
(
true
)
;
}
AutoSaveLocalStrictMode
:
:
~
AutoSaveLocalStrictMode
(
)
{
if
(
sc_
)
{
restore
(
)
;
}
}
void
AutoSaveLocalStrictMode
:
:
restore
(
)
{
MOZ_ALWAYS_TRUE
(
sc_
-
>
setLocalStrictMode
(
savedStrictness_
)
)
;
sc_
=
nullptr
;
}
ClassEmitter
:
:
ClassEmitter
(
BytecodeEmitter
*
bce
)
:
PropertyEmitter
(
bce
)
strictMode_
(
bce
-
>
sc
)
{
isClass_
=
true
;
}
bool
ClassEmitter
:
:
emitScope
(
LexicalScope
:
:
ParserData
*
scopeBindings
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
)
;
tdzCache_
.
emplace
(
bce_
)
;
innerScope_
.
emplace
(
bce_
)
;
if
(
!
innerScope_
-
>
enterLexical
(
bce_
ScopeKind
:
:
Lexical
scopeBindings
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Scope
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitBodyScope
(
ClassBodyScope
:
:
ParserData
*
scopeBindings
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
|
|
classState_
=
=
ClassState
:
:
Scope
)
;
bodyTdzCache_
.
emplace
(
bce_
)
;
bodyScope_
.
emplace
(
bce_
)
;
if
(
!
bodyScope_
-
>
enterClassBody
(
bce_
ScopeKind
:
:
ClassBody
scopeBindings
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
BodyScope
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitClass
(
TaggedParserAtomIndex
name
TaggedParserAtomIndex
nameForAnonymousClass
bool
hasNameOnStack
uint8_t
membersCount
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
|
|
classState_
=
=
ClassState
:
:
Scope
|
|
classState_
=
=
ClassState
:
:
BodyScope
)
;
MOZ_ASSERT_IF
(
nameForAnonymousClass
|
|
hasNameOnStack
!
name
)
;
MOZ_ASSERT
(
!
(
nameForAnonymousClass
&
&
hasNameOnStack
)
)
;
name_
=
name
;
nameForAnonymousClass_
=
nameForAnonymousClass
;
hasNameOnStack_
=
hasNameOnStack
;
isDerived_
=
false
;
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
NewInit
membersCount
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Class
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitDerivedClass
(
TaggedParserAtomIndex
name
TaggedParserAtomIndex
nameForAnonymousClass
bool
hasNameOnStack
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
|
|
classState_
=
=
ClassState
:
:
Scope
|
|
classState_
=
=
ClassState
:
:
BodyScope
)
;
MOZ_ASSERT_IF
(
nameForAnonymousClass
|
|
hasNameOnStack
!
name
)
;
MOZ_ASSERT
(
!
nameForAnonymousClass
|
|
!
hasNameOnStack
)
;
name_
=
name
;
nameForAnonymousClass_
=
nameForAnonymousClass
;
hasNameOnStack_
=
hasNameOnStack
;
isDerived_
=
true
;
InternalIfEmitter
ifThenElse
(
bce_
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
CheckClassHeritage
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Null
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
StrictNe
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitThenElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
GetProp
TaggedParserAtomIndex
:
:
WellKnown
:
:
prototype
(
)
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitBuiltinObject
(
BuiltinObjectKind
:
:
FunctionPrototype
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Null
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitEnd
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
ObjWithProto
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Class
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitInitConstructor
(
bool
needsHomeObject
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Class
|
|
classState_
=
=
ClassState
:
:
InstanceMemberInitializersEnd
)
;
if
(
needsHomeObject
)
{
if
(
!
bce_
-
>
emitDupAt
(
1
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
}
if
(
!
initProtoAndCtor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
InitConstructor
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
initProtoAndCtor
(
)
{
if
(
hasNameOnStack_
)
{
if
(
!
bce_
-
>
emitDupAt
(
2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
SetFunName
uint8_t
(
FunctionPrefixKind
:
:
None
)
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
InitLockedProp
TaggedParserAtomIndex
:
:
WellKnown
:
:
prototype
(
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
InitHiddenProp
TaggedParserAtomIndex
:
:
WellKnown
:
:
constructor
(
)
)
)
{
return
false
;
}
return
true
;
}
bool
ClassEmitter
:
:
prepareForMemberInitializers
(
size_t
numInitializers
bool
isStatic
)
{
MOZ_ASSERT_IF
(
!
isStatic
classState_
=
=
ClassState
:
:
Class
)
;
MOZ_ASSERT_IF
(
isStatic
classState_
=
=
ClassState
:
:
InitConstructor
)
;
MOZ_ASSERT
(
memberState_
=
=
MemberState
:
:
Start
)
;
auto
initializers
=
isStatic
?
TaggedParserAtomIndex
:
:
WellKnown
:
:
dot_staticInitializers_
(
)
:
TaggedParserAtomIndex
:
:
WellKnown
:
:
dot_initializers_
(
)
;
initializersAssignment_
.
emplace
(
bce_
initializers
NameOpEmitter
:
:
Kind
:
:
Initialize
)
;
if
(
!
initializersAssignment_
-
>
prepareForRhs
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitUint32Operand
(
JSOp
:
:
NewArray
numInitializers
)
)
{
return
false
;
}
initializerIndex_
=
0
;
#
ifdef
DEBUG
if
(
isStatic
)
{
classState_
=
ClassState
:
:
StaticMemberInitializers
;
}
else
{
classState_
=
ClassState
:
:
InstanceMemberInitializers
;
}
numInitializers_
=
numInitializers
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
prepareForMemberInitializer
(
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
InstanceMemberInitializers
|
|
classState_
=
=
ClassState
:
:
StaticMemberInitializers
)
;
MOZ_ASSERT
(
memberState_
=
=
MemberState
:
:
Start
)
;
#
ifdef
DEBUG
memberState_
=
MemberState
:
:
Initializer
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitMemberInitializerHomeObject
(
bool
isStatic
)
{
MOZ_ASSERT
(
memberState_
=
=
MemberState
:
:
Initializer
)
;
if
(
isStatic
)
{
if
(
!
bce_
-
>
emitDupAt
(
3
)
)
{
return
false
;
}
}
else
{
if
(
!
bce_
-
>
emitDupAt
(
isDerived_
?
3
:
2
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
#
ifdef
DEBUG
memberState_
=
MemberState
:
:
InitializerWithHomeObject
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitStoreMemberInitializer
(
)
{
MOZ_ASSERT
(
memberState_
=
=
MemberState
:
:
Initializer
|
|
memberState_
=
=
MemberState
:
:
InitializerWithHomeObject
)
;
MOZ_ASSERT
(
initializerIndex_
<
numInitializers_
)
;
if
(
!
bce_
-
>
emitUint32Operand
(
JSOp
:
:
InitElemArray
initializerIndex_
)
)
{
return
false
;
}
initializerIndex_
+
+
;
#
ifdef
DEBUG
memberState_
=
MemberState
:
:
Start
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitMemberInitializersEnd
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
InstanceMemberInitializers
|
|
classState_
=
=
ClassState
:
:
StaticMemberInitializers
)
;
MOZ_ASSERT
(
memberState_
=
=
MemberState
:
:
Start
)
;
MOZ_ASSERT
(
initializerIndex_
=
=
numInitializers_
)
;
if
(
!
initializersAssignment_
-
>
emitAssignment
(
)
)
{
return
false
;
}
initializersAssignment_
.
reset
(
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
#
ifdef
DEBUG
if
(
classState_
=
=
ClassState
:
:
InstanceMemberInitializers
)
{
classState_
=
ClassState
:
:
InstanceMemberInitializersEnd
;
}
else
{
classState_
=
ClassState
:
:
StaticMemberInitializersEnd
;
}
#
endif
return
true
;
}
#
ifdef
ENABLE_DECORATORS
bool
ClassEmitter
:
:
prepareForExtraInitializers
(
TaggedParserAtomIndex
initializers
)
{
MOZ_ASSERT
(
initializers
=
=
TaggedParserAtomIndex
:
:
WellKnown
:
:
dot_instanceExtraInitializers_
(
)
)
;
NameOpEmitter
noe
(
bce_
initializers
NameOpEmitter
:
:
Kind
:
:
Initialize
)
;
if
(
!
noe
.
prepareForRhs
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitUint32Operand
(
JSOp
:
:
NewArray
0
)
)
{
return
false
;
}
if
(
!
noe
.
emitAssignment
(
)
)
{
return
false
;
}
return
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
;
}
#
endif
bool
ClassEmitter
:
:
emitBinding
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
InitConstructor
|
|
classState_
=
=
ClassState
:
:
InstanceMemberInitializersEnd
|
|
classState_
=
=
ClassState
:
:
StaticMemberInitializersEnd
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
name_
)
{
MOZ_ASSERT
(
innerScope_
.
isSome
(
)
)
;
if
(
!
bce_
-
>
emitLexicalInitialization
(
name_
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
BoundName
;
#
endif
return
true
;
}
#
ifdef
ENABLE_DECORATORS
bool
ClassEmitter
:
:
prepareForDecorators
(
)
{
return
leaveBodyAndInnerScope
(
)
;
}
#
endif
bool
ClassEmitter
:
:
leaveBodyAndInnerScope
(
)
{
if
(
bodyScope_
.
isSome
(
)
)
{
MOZ_ASSERT
(
bodyTdzCache_
.
isSome
(
)
)
;
if
(
!
bodyScope_
-
>
leave
(
bce_
)
)
{
return
false
;
}
bodyScope_
.
reset
(
)
;
bodyTdzCache_
.
reset
(
)
;
}
if
(
innerScope_
.
isSome
(
)
)
{
MOZ_ASSERT
(
tdzCache_
.
isSome
(
)
)
;
if
(
!
innerScope_
-
>
leave
(
bce_
)
)
{
return
false
;
}
innerScope_
.
reset
(
)
;
tdzCache_
.
reset
(
)
;
}
else
{
MOZ_ASSERT
(
tdzCache_
.
isNothing
(
)
)
;
}
return
true
;
}
bool
ClassEmitter
:
:
emitEnd
(
Kind
kind
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
BoundName
)
;
#
ifndef
ENABLE_DECORATORS
if
(
!
leaveBodyAndInnerScope
(
)
)
{
return
false
;
}
#
endif
if
(
kind
=
=
Kind
:
:
Declaration
)
{
MOZ_ASSERT
(
name_
)
;
if
(
!
bce_
-
>
emitLexicalInitialization
(
name_
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
strictMode_
.
restore
(
)
;
#
ifdef
DEBUG
classState_
=
ClassState
:
:
End
;
#
endif
return
true
;
}
