#
include
"
frontend
/
ObjectEmitter
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
IfEmitter
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
Id
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
ObjectGroup
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
gc
/
ObjectKind
-
inl
.
h
"
#
include
"
vm
/
JSAtom
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
PropertyEmitter
:
:
PropertyEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
PropertyEmitter
:
:
prepareForProtoValue
(
const
Maybe
<
uint32_t
>
&
keyPos
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
keyPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
keyPos
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ProtoValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitMutateProto
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
ProtoValue
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
MutateProto
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForSpreadOperand
(
const
Maybe
<
uint32_t
>
&
spreadPos
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
spreadPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
spreadPos
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
SpreadOperand
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitSpread
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
SpreadOperand
)
;
if
(
!
bce_
-
>
emitCopyDataProperties
(
BytecodeEmitter
:
:
CopyOption
:
:
Unfiltered
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
MOZ_ALWAYS_INLINE
bool
PropertyEmitter
:
:
prepareForProp
(
const
Maybe
<
uint32_t
>
&
keyPos
bool
isStatic
bool
isIndexOrComputed
)
{
isStatic_
=
isStatic
;
isIndexOrComputed_
=
isIndexOrComputed
;
if
(
keyPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
keyPos
)
)
{
return
false
;
}
}
if
(
isStatic_
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
return
true
;
}
bool
PropertyEmitter
:
:
prepareForPropValue
(
const
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
false
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
PropValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForIndexPropKey
(
const
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
true
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
IndexKey
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForIndexPropValue
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
IndexKey
)
;
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
IndexValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForComputedPropKey
(
const
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
if
(
!
prepareForProp
(
keyPos
kind
=
=
Kind
:
:
Static
true
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ComputedKey
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
prepareForComputedPropValue
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
ComputedKey
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
ToId
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
ComputedValue
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInitHomeObject
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
PropValue
|
|
propertyState_
=
=
PropertyState
:
:
IndexValue
|
|
propertyState_
=
=
PropertyState
:
:
ComputedValue
)
;
if
(
!
bce_
-
>
emitDupAt
(
1
+
isIndexOrComputed_
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
#
ifdef
DEBUG
if
(
propertyState_
=
=
PropertyState
:
:
PropValue
)
{
propertyState_
=
PropertyState
:
:
InitHomeObj
;
}
else
if
(
propertyState_
=
=
PropertyState
:
:
IndexValue
)
{
propertyState_
=
PropertyState
:
:
InitHomeObjForIndex
;
}
else
{
propertyState_
=
PropertyState
:
:
InitHomeObjForComputed
;
}
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInitProp
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
{
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenProp
:
JSOp
:
:
InitProp
key
)
;
}
bool
PropertyEmitter
:
:
emitInitGetter
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
{
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenPropGetter
:
JSOp
:
:
InitPropGetter
key
)
;
}
bool
PropertyEmitter
:
:
emitInitSetter
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
{
return
emitInit
(
isClass_
?
JSOp
:
:
InitHiddenPropSetter
:
JSOp
:
:
InitPropSetter
key
)
;
}
bool
PropertyEmitter
:
:
emitInitIndexProp
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElem
:
JSOp
:
:
InitElem
)
;
}
bool
PropertyEmitter
:
:
emitInitIndexGetter
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemGetter
:
JSOp
:
:
InitElemGetter
)
;
}
bool
PropertyEmitter
:
:
emitInitIndexSetter
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemSetter
:
JSOp
:
:
InitElemSetter
)
;
}
bool
PropertyEmitter
:
:
emitInitComputedProp
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElem
:
JSOp
:
:
InitElem
)
;
}
bool
PropertyEmitter
:
:
emitInitComputedGetter
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemGetter
:
JSOp
:
:
InitElemGetter
)
;
}
bool
PropertyEmitter
:
:
emitInitComputedSetter
(
)
{
return
emitInitIndexOrComputed
(
isClass_
?
JSOp
:
:
InitHiddenElemSetter
:
JSOp
:
:
InitElemSetter
)
;
}
bool
PropertyEmitter
:
:
emitInit
(
JSOp
op
JS
:
:
Handle
<
JSAtom
*
>
key
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
PropValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObj
)
;
MOZ_ASSERT
(
op
=
=
JSOp
:
:
InitProp
|
|
op
=
=
JSOp
:
:
InitHiddenProp
|
|
op
=
=
JSOp
:
:
InitPropGetter
|
|
op
=
=
JSOp
:
:
InitHiddenPropGetter
|
|
op
=
=
JSOp
:
:
InitPropSetter
|
|
op
=
=
JSOp
:
:
InitHiddenPropSetter
)
;
uint32_t
index
;
if
(
!
bce_
-
>
makeAtomIndex
(
key
&
index
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
op
index
)
)
{
return
false
;
}
if
(
!
emitPopClassConstructor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitInitIndexOrComputed
(
JSOp
op
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
IndexValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForIndex
|
|
propertyState_
=
=
PropertyState
:
:
ComputedValue
|
|
propertyState_
=
=
PropertyState
:
:
InitHomeObjForComputed
)
;
MOZ_ASSERT
(
op
=
=
JSOp
:
:
InitElem
|
|
op
=
=
JSOp
:
:
InitHiddenElem
|
|
op
=
=
JSOp
:
:
InitElemGetter
|
|
op
=
=
JSOp
:
:
InitHiddenElemGetter
|
|
op
=
=
JSOp
:
:
InitElemSetter
|
|
op
=
=
JSOp
:
:
InitHiddenElemSetter
)
;
if
(
!
bce_
-
>
emit1
(
op
)
)
{
return
false
;
}
if
(
!
emitPopClassConstructor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
propertyState_
=
PropertyState
:
:
Init
;
#
endif
return
true
;
}
bool
PropertyEmitter
:
:
emitPopClassConstructor
(
)
{
if
(
isStatic_
)
{
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
return
true
;
}
ObjectEmitter
:
:
ObjectEmitter
(
BytecodeEmitter
*
bce
)
:
PropertyEmitter
(
bce
)
{
}
bool
ObjectEmitter
:
:
emitObject
(
size_t
propertyCount
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Start
)
;
if
(
!
bce_
-
>
emitNewInit
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
Object
;
#
endif
return
true
;
}
bool
ObjectEmitter
:
:
emitObjectWithTemplateOnStack
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Start
)
;
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
Object
;
#
endif
return
true
;
}
bool
ObjectEmitter
:
:
emitEnd
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
objectState_
=
=
ObjectState
:
:
Object
)
;
#
ifdef
DEBUG
objectState_
=
ObjectState
:
:
End
;
#
endif
return
true
;
}
AutoSaveLocalStrictMode
:
:
AutoSaveLocalStrictMode
(
SharedContext
*
sc
)
:
sc_
(
sc
)
{
savedStrictness_
=
sc_
-
>
setLocalStrictMode
(
true
)
;
}
AutoSaveLocalStrictMode
:
:
~
AutoSaveLocalStrictMode
(
)
{
if
(
sc_
)
{
restore
(
)
;
}
}
void
AutoSaveLocalStrictMode
:
:
restore
(
)
{
MOZ_ALWAYS_TRUE
(
sc_
-
>
setLocalStrictMode
(
savedStrictness_
)
)
;
sc_
=
nullptr
;
}
ClassEmitter
:
:
ClassEmitter
(
BytecodeEmitter
*
bce
)
:
PropertyEmitter
(
bce
)
strictMode_
(
bce
-
>
sc
)
name_
(
bce
-
>
cx
)
nameForAnonymousClass_
(
bce
-
>
cx
)
{
isClass_
=
true
;
}
bool
ClassEmitter
:
:
emitScope
(
JS
:
:
Handle
<
LexicalScope
:
:
Data
*
>
scopeBindings
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
)
;
tdzCache_
.
emplace
(
bce_
)
;
innerScope_
.
emplace
(
bce_
)
;
if
(
!
innerScope_
-
>
enterLexical
(
bce_
ScopeKind
:
:
Lexical
scopeBindings
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Scope
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitClass
(
JS
:
:
Handle
<
JSAtom
*
>
name
JS
:
:
Handle
<
JSAtom
*
>
nameForAnonymousClass
bool
hasNameOnStack
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
|
|
classState_
=
=
ClassState
:
:
Scope
)
;
MOZ_ASSERT_IF
(
nameForAnonymousClass
|
|
hasNameOnStack
!
name
)
;
MOZ_ASSERT
(
!
(
nameForAnonymousClass
&
&
hasNameOnStack
)
)
;
name_
=
name
;
nameForAnonymousClass_
=
nameForAnonymousClass
;
hasNameOnStack_
=
hasNameOnStack
;
isDerived_
=
false
;
if
(
!
bce_
-
>
emitNewInit
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Class
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitDerivedClass
(
JS
:
:
Handle
<
JSAtom
*
>
name
JS
:
:
Handle
<
JSAtom
*
>
nameForAnonymousClass
bool
hasNameOnStack
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Start
|
|
classState_
=
=
ClassState
:
:
Scope
)
;
MOZ_ASSERT_IF
(
nameForAnonymousClass
|
|
hasNameOnStack
!
name
)
;
MOZ_ASSERT
(
!
nameForAnonymousClass
|
|
!
hasNameOnStack
)
;
name_
=
name
;
nameForAnonymousClass_
=
nameForAnonymousClass
;
hasNameOnStack_
=
hasNameOnStack
;
isDerived_
=
true
;
InternalIfEmitter
ifThenElse
(
bce_
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
CheckClassHeritage
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Null
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
StrictNe
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitThenElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
GetProp
bce_
-
>
cx
-
>
names
(
)
.
prototype
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitElse
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
BuiltinProto
JSProto_Function
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Null
)
)
{
return
false
;
}
if
(
!
ifThenElse
.
emitEnd
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
ObjWithProto
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
Class
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitInitConstructor
(
bool
needsHomeObject
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Class
|
|
classState_
=
=
ClassState
:
:
FieldInitializersEnd
)
;
if
(
needsHomeObject
)
{
if
(
!
bce_
-
>
emitDupAt
(
1
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
}
if
(
!
initProtoAndCtor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
InitConstructor
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitInitDefaultConstructor
(
uint32_t
classStart
uint32_t
classEnd
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Class
|
|
classState_
=
=
ClassState
:
:
FieldInitializersEnd
)
;
RootedAtom
className
(
bce_
-
>
cx
name_
)
;
if
(
!
className
)
{
if
(
nameForAnonymousClass_
)
{
className
=
nameForAnonymousClass_
;
}
else
{
className
=
bce_
-
>
cx
-
>
names
(
)
.
empty
;
}
}
uint32_t
atomIndex
;
if
(
!
bce_
-
>
makeAtomIndex
(
className
&
atomIndex
)
)
{
return
false
;
}
BytecodeOffset
off
;
if
(
isDerived_
)
{
if
(
!
bce_
-
>
emitN
(
JSOp
:
:
DerivedConstructor
12
&
off
)
)
{
return
false
;
}
}
else
{
if
(
!
bce_
-
>
emitN
(
JSOp
:
:
ClassConstructor
12
&
off
)
)
{
return
false
;
}
}
SetClassConstructorOperands
(
bce_
-
>
bytecodeSection
(
)
.
code
(
off
)
atomIndex
classStart
classEnd
)
;
if
(
!
initProtoAndCtor
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
InitConstructor
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
initProtoAndCtor
(
)
{
if
(
hasNameOnStack_
)
{
if
(
!
bce_
-
>
emitDupAt
(
2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOp
:
:
SetFunName
uint8_t
(
FunctionPrefixKind
:
:
None
)
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Dup2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
InitLockedProp
bce_
-
>
cx
-
>
names
(
)
.
prototype
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitAtomOp
(
JSOp
:
:
InitHiddenProp
bce_
-
>
cx
-
>
names
(
)
.
constructor
)
)
{
return
false
;
}
return
true
;
}
bool
ClassEmitter
:
:
prepareForFieldInitializers
(
size_t
numFields
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
Class
)
;
initializersAssignment_
.
emplace
(
bce_
bce_
-
>
cx
-
>
names
(
)
.
dotInitializers
.
toHandle
(
)
NameOpEmitter
:
:
Kind
:
:
Initialize
)
;
if
(
!
initializersAssignment_
-
>
prepareForRhs
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitUint32Operand
(
JSOp
:
:
NewArray
numFields
)
)
{
return
false
;
}
MOZ_ASSERT
(
fieldIndex_
=
=
0
)
;
#
ifdef
DEBUG
classState_
=
ClassState
:
:
FieldInitializers
;
numFields_
=
numFields
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitFieldInitializerHomeObject
(
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
FieldInitializers
)
;
if
(
!
bce_
-
>
emitDupAt
(
isDerived_
?
3
:
2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
InitHomeObject
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
FieldInitializerWithHomeObject
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitStoreFieldInitializer
(
)
{
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
FieldInitializers
|
|
classState_
=
=
ClassState
:
:
FieldInitializerWithHomeObject
)
;
MOZ_ASSERT
(
fieldIndex_
<
numFields_
)
;
if
(
!
bce_
-
>
emitUint32Operand
(
JSOp
:
:
InitElemArray
fieldIndex_
)
)
{
return
false
;
}
fieldIndex_
+
+
;
#
ifdef
DEBUG
classState_
=
ClassState
:
:
FieldInitializers
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitFieldInitializersEnd
(
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
FieldInitializers
|
|
classState_
=
=
ClassState
:
:
FieldInitializerWithHomeObject
)
;
MOZ_ASSERT
(
fieldIndex_
=
=
numFields_
)
;
if
(
!
initializersAssignment_
-
>
emitAssignment
(
)
)
{
return
false
;
}
initializersAssignment_
.
reset
(
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
#
ifdef
DEBUG
classState_
=
ClassState
:
:
FieldInitializersEnd
;
#
endif
return
true
;
}
bool
ClassEmitter
:
:
emitEnd
(
Kind
kind
)
{
MOZ_ASSERT
(
propertyState_
=
=
PropertyState
:
:
Start
|
|
propertyState_
=
=
PropertyState
:
:
Init
)
;
MOZ_ASSERT
(
classState_
=
=
ClassState
:
:
InitConstructor
|
|
classState_
=
=
ClassState
:
:
FieldInitializersEnd
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
name_
)
{
MOZ_ASSERT
(
tdzCache_
.
isSome
(
)
)
;
MOZ_ASSERT
(
innerScope_
.
isSome
(
)
)
;
if
(
!
bce_
-
>
emitLexicalInitialization
(
name_
)
)
{
return
false
;
}
if
(
!
innerScope_
-
>
leave
(
bce_
)
)
{
return
false
;
}
innerScope_
.
reset
(
)
;
if
(
kind
=
=
Kind
:
:
Declaration
)
{
if
(
!
bce_
-
>
emitLexicalInitialization
(
name_
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
}
tdzCache_
.
reset
(
)
;
}
else
if
(
innerScope_
.
isSome
(
)
)
{
MOZ_ASSERT
(
kind
=
=
Kind
:
:
Expression
)
;
MOZ_ASSERT
(
tdzCache_
.
isSome
(
)
)
;
if
(
!
innerScope_
-
>
leave
(
bce_
)
)
{
return
false
;
}
innerScope_
.
reset
(
)
;
tdzCache_
.
reset
(
)
;
}
else
{
MOZ_ASSERT
(
kind
=
=
Kind
:
:
Expression
)
;
MOZ_ASSERT
(
tdzCache_
.
isNothing
(
)
)
;
}
strictMode_
.
restore
(
)
;
#
ifdef
DEBUG
classState_
=
ClassState
:
:
End
;
#
endif
return
true
;
}
