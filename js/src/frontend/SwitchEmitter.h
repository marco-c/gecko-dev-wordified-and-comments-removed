#
ifndef
frontend_SwitchEmitter_h
#
define
frontend_SwitchEmitter_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
frontend
/
BytecodeControlStructures
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
JumpList
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
Scope
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
SwitchEmitter
{
public
:
enum
class
Kind
{
Table
Cond
}
;
class
MOZ_STACK_CLASS
TableGenerator
{
BytecodeEmitter
*
bce_
;
mozilla
:
:
Maybe
<
js
:
:
Vector
<
size_t
128
SystemAllocPolicy
>
>
intmap_
;
int32_t
intmapBitLength_
=
0
;
uint32_t
tableLength_
=
0
;
int32_t
low_
=
JSVAL_INT_MAX
high_
=
JSVAL_INT_MIN
;
bool
valid_
=
true
;
#
ifdef
DEBUG
bool
finished_
=
false
;
#
endif
public
:
explicit
TableGenerator
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
void
setInvalid
(
)
{
valid_
=
false
;
}
MOZ_MUST_USE
bool
isValid
(
)
const
{
return
valid_
;
}
MOZ_MUST_USE
bool
isInvalid
(
)
const
{
return
!
valid_
;
}
MOZ_MUST_USE
bool
addNumber
(
int32_t
caseValue
)
;
void
finish
(
uint32_t
caseCount
)
;
private
:
friend
SwitchEmitter
;
int32_t
low
(
)
const
{
MOZ_ASSERT
(
finished_
)
;
return
low_
;
}
int32_t
high
(
)
const
{
MOZ_ASSERT
(
finished_
)
;
return
high_
;
}
uint32_t
toCaseIndex
(
int32_t
caseValue
)
const
;
uint32_t
tableLength
(
)
const
;
}
;
private
:
BytecodeEmitter
*
bce_
;
Kind
kind_
=
Kind
:
:
Cond
;
bool
hasDefault_
=
false
;
unsigned
noteIndex_
=
0
;
unsigned
caseNoteIndex_
=
0
;
uint32_t
caseCount_
=
0
;
uint32_t
caseIndex_
=
0
;
ptrdiff_t
top_
=
0
;
ptrdiff_t
lastCaseOffset_
=
0
;
JumpTarget
defaultJumpTargetOffset_
=
{
-
1
}
;
JumpList
condSwitchDefaultOffset_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCacheLexical_
;
mozilla
:
:
Maybe
<
EmitterScope
>
emitterScope_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCacheCaseAndBody_
;
mozilla
:
:
Maybe
<
BreakableControl
>
controlInfo_
;
mozilla
:
:
Maybe
<
uint32_t
>
switchPos_
;
js
:
:
Vector
<
ptrdiff_t
32
SystemAllocPolicy
>
caseOffsets_
;
enum
class
State
{
Start
Discriminant
CaseCount
Lexical
Cond
Table
CaseValue
Case
CaseBody
DefaultBody
End
}
;
State
state_
=
State
:
:
Start
;
public
:
explicit
SwitchEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitDiscriminant
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
switchPos
)
;
MOZ_MUST_USE
bool
validateCaseCount
(
uint32_t
caseCount
)
;
MOZ_MUST_USE
bool
emitLexical
(
Handle
<
LexicalScope
:
:
Data
*
>
bindings
)
;
MOZ_MUST_USE
bool
emitCond
(
)
;
MOZ_MUST_USE
bool
emitTable
(
const
TableGenerator
&
tableGen
)
;
MOZ_MUST_USE
bool
prepareForCaseValue
(
)
;
MOZ_MUST_USE
bool
emitCaseJump
(
)
;
MOZ_MUST_USE
bool
emitCaseBody
(
)
;
MOZ_MUST_USE
bool
emitCaseBody
(
int32_t
caseValue
const
TableGenerator
&
tableGen
)
;
MOZ_MUST_USE
bool
emitDefaultBody
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
private
:
MOZ_MUST_USE
bool
emitCaseOrDefaultJump
(
uint32_t
caseIndex
bool
isDefault
)
;
MOZ_MUST_USE
bool
emitImplicitDefault
(
)
;
}
;
}
}
#
endif
