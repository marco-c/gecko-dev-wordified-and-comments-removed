#
include
"
frontend
/
DoWhileEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
DoWhileEmitter
:
:
DoWhileEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
bool
DoWhileEmitter
:
:
emitBody
(
const
Maybe
<
uint32_t
>
&
doPos
const
Maybe
<
uint32_t
>
&
bodyPos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
if
(
doPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
doPos
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Nop
)
)
{
return
false
;
}
loopInfo_
.
emplace
(
bce_
StatementKind
:
:
DoLoop
)
;
if
(
!
loopInfo_
-
>
emitLoopHead
(
bce_
bodyPos
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Body
;
#
endif
return
true
;
}
bool
DoWhileEmitter
:
:
emitCond
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Body
)
;
if
(
!
loopInfo_
-
>
emitContinueTarget
(
bce_
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Cond
;
#
endif
return
true
;
}
bool
DoWhileEmitter
:
:
emitEnd
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Cond
)
;
if
(
!
loopInfo_
-
>
emitLoopEnd
(
bce_
JSOp
:
:
IfNe
JSTRY_LOOP
)
)
{
return
false
;
}
loopInfo_
.
reset
(
)
;
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
