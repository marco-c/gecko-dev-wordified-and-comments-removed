#
include
"
js
/
experimental
/
CompileScript
.
h
"
#
include
"
frontend
/
BytecodeCompilation
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
frontend
/
FrontendContext
.
h
"
#
include
"
frontend
/
ScopeBindingCache
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
util
/
NativeStack
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
JS_PUBLIC_API
FrontendContext
*
JS
:
:
NewFrontendContext
(
)
{
MOZ_ASSERT
(
JS
:
:
detail
:
:
libraryInitState
=
=
JS
:
:
detail
:
:
InitState
:
:
Running
"
must
call
JS_Init
prior
to
creating
any
FrontendContexts
"
)
;
return
js
:
:
NewFrontendContext
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
DestroyFrontendContext
(
FrontendContext
*
fc
)
{
return
js
:
:
DestroyFrontendContext
(
fc
)
;
}
template
<
typename
CharT
>
static
already_AddRefed
<
JS
:
:
Stencil
>
CompileGlobalScriptToStencilImpl
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
NativeStackLimit
stackLimit
JS
:
:
SourceText
<
CharT
>
&
srcBuf
js
:
:
UniquePtr
<
js
:
:
frontend
:
:
CompilationInput
>
&
stencilInput
)
{
ScopeKind
scopeKind
=
ScopeKind
:
:
Global
;
JS
:
:
SourceText
<
CharT
>
data
(
std
:
:
move
(
srcBuf
)
)
;
stencilInput
=
fc
-
>
getAllocator
(
)
-
>
make_unique
<
frontend
:
:
CompilationInput
>
(
options
)
;
if
(
!
stencilInput
)
{
return
nullptr
;
}
frontend
:
:
NoScopeBindingCache
scopeCache
;
LifoAlloc
tempLifoAlloc
(
JSContext
:
:
TEMP_LIFO_ALLOC_PRIMARY_CHUNK_SIZE
)
;
RefPtr
<
frontend
:
:
CompilationStencil
>
stencil_
=
frontend
:
:
CompileGlobalScriptToStencil
(
nullptr
fc
stackLimit
tempLifoAlloc
*
stencilInput
&
scopeCache
data
scopeKind
)
;
return
stencil_
.
forget
(
)
;
}
already_AddRefed
<
JS
:
:
Stencil
>
JS
:
:
CompileGlobalScriptToStencil
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
NativeStackLimit
stackLimit
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
srcBuf
js
:
:
UniquePtr
<
js
:
:
frontend
:
:
CompilationInput
>
&
stencilInput
)
{
return
CompileGlobalScriptToStencilImpl
(
fc
options
stackLimit
srcBuf
stencilInput
)
;
}
already_AddRefed
<
JS
:
:
Stencil
>
JS
:
:
CompileGlobalScriptToStencil
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
JS
:
:
NativeStackLimit
stackLimit
JS
:
:
SourceText
<
char16_t
>
&
srcBuf
js
:
:
UniquePtr
<
js
:
:
frontend
:
:
CompilationInput
>
&
stencilInput
)
{
return
CompileGlobalScriptToStencilImpl
(
fc
options
stackLimit
srcBuf
stencilInput
)
;
}
bool
JS
:
:
PrepareForInstantiate
(
JS
:
:
FrontendContext
*
fc
CompilationInput
&
input
JS
:
:
Stencil
&
stencil
JS
:
:
InstantiationStorage
&
storage
)
{
if
(
!
storage
.
gcOutput_
)
{
storage
.
gcOutput_
=
fc
-
>
getAllocator
(
)
-
>
new_
<
js
:
:
frontend
:
:
CompilationGCOutput
>
(
)
;
if
(
!
storage
.
gcOutput_
)
{
return
false
;
}
}
return
CompilationStencil
:
:
prepareForInstantiate
(
fc
input
.
atomCache
stencil
*
storage
.
gcOutput_
)
;
}
