#
include
"
js
/
experimental
/
CompileScript
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
frontend
/
FrontendContext
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
JS_PUBLIC_API
FrontendContext
*
JS
:
:
NewFrontendContext
(
)
{
MOZ_ASSERT
(
JS
:
:
detail
:
:
libraryInitState
=
=
JS
:
:
detail
:
:
InitState
:
:
Running
"
must
call
JS_Init
prior
to
creating
any
FrontendContexts
"
)
;
return
js
:
:
NewFrontendContext
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
DestroyFrontendContext
(
FrontendContext
*
fc
)
{
return
js
:
:
DestroyFrontendContext
(
fc
)
;
}
JS_PUBLIC_API
void
JS
:
:
SetNativeStackQuota
(
JS
:
:
FrontendContext
*
fc
JS
:
:
NativeStackSize
stackSize
)
{
fc
-
>
setStackQuota
(
stackSize
)
;
}
JS_PUBLIC_API
JS
:
:
NativeStackSize
JS
:
:
ThreadStackQuotaForSize
(
size_t
stackSize
)
{
static
constexpr
double
RatioWithoutMargin
=
0
.
9
;
MOZ_ASSERT
(
double
(
stackSize
)
*
(
1
-
RatioWithoutMargin
)
>
js
:
:
MinimumStackLimitMargin
)
;
return
JS
:
:
NativeStackSize
(
double
(
stackSize
)
*
RatioWithoutMargin
)
;
}
JS_PUBLIC_API
bool
JS
:
:
HadFrontendErrors
(
JS
:
:
FrontendContext
*
fc
)
{
return
fc
-
>
hadErrors
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
JSContext
*
cx
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
{
return
fc
-
>
convertToRuntimeError
(
cx
)
;
}
JS_PUBLIC_API
const
JSErrorReport
*
JS
:
:
GetFrontendErrorReport
(
JS
:
:
FrontendContext
*
fc
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
{
if
(
!
fc
-
>
maybeError
(
)
.
isSome
(
)
)
{
return
nullptr
;
}
return
fc
-
>
maybeError
(
)
.
ptr
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
HadFrontendOverRecursed
(
JS
:
:
FrontendContext
*
fc
)
{
return
fc
-
>
hadOverRecursed
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
HadFrontendOutOfMemory
(
JS
:
:
FrontendContext
*
fc
)
{
return
fc
-
>
hadOutOfMemory
(
)
;
}
JS_PUBLIC_API
bool
JS
:
:
HadFrontendAllocationOverflow
(
JS
:
:
FrontendContext
*
fc
)
{
return
fc
-
>
hadAllocationOverflow
(
)
;
}
JS_PUBLIC_API
void
JS
:
:
ClearFrontendErrors
(
JS
:
:
FrontendContext
*
fc
)
{
fc
-
>
clearErrors
(
)
;
}
JS_PUBLIC_API
size_t
JS
:
:
GetFrontendWarningCount
(
JS
:
:
FrontendContext
*
fc
)
{
return
fc
-
>
warnings
(
)
.
length
(
)
;
}
JS_PUBLIC_API
const
JSErrorReport
*
JS
:
:
GetFrontendWarningAt
(
JS
:
:
FrontendContext
*
fc
size_t
index
const
JS
:
:
ReadOnlyCompileOptions
&
options
)
{
return
&
fc
-
>
warnings
(
)
[
index
]
;
}
bool
JS
:
:
PrepareForInstantiate
(
JS
:
:
FrontendContext
*
fc
JS
:
:
Stencil
&
stencil
JS
:
:
InstantiationStorage
&
storage
)
{
if
(
!
storage
.
gcOutput_
)
{
storage
.
gcOutput_
=
fc
-
>
getAllocator
(
)
-
>
new_
<
js
:
:
frontend
:
:
PreallocatedCompilationGCOutput
>
(
)
;
if
(
!
storage
.
gcOutput_
)
{
return
false
;
}
}
return
CompilationStencil
:
:
prepareForInstantiate
(
fc
stencil
*
storage
.
gcOutput_
)
;
}
