#
ifndef
frontend_ObjectEmitter_h
#
define
frontend_ObjectEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
frontend
/
BytecodeOffset
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
NameOpEmitter
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
ParserAtom
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Scope
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
SharedContext
;
class
MOZ_STACK_CLASS
PropertyEmitter
{
public
:
enum
class
Kind
{
Prototype
Static
}
;
protected
:
BytecodeEmitter
*
bce_
;
bool
isClass_
=
false
;
bool
isStatic_
=
false
;
bool
isIndexOrComputed_
=
false
;
#
ifdef
DEBUG
enum
class
PropertyState
{
Start
PropValue
InitHomeObj
IndexKey
IndexValue
InitHomeObjForIndex
ComputedKey
ComputedValue
InitHomeObjForComputed
ProtoValue
SpreadOperand
Init
}
;
PropertyState
propertyState_
=
PropertyState
:
:
Start
;
#
endif
public
:
explicit
PropertyEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
prepareForProtoValue
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
)
;
MOZ_MUST_USE
bool
emitMutateProto
(
)
;
MOZ_MUST_USE
bool
prepareForSpreadOperand
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
spreadPos
)
;
MOZ_MUST_USE
bool
emitSpread
(
)
;
MOZ_MUST_USE
bool
prepareForPropValue
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForIndexPropKey
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForIndexPropValue
(
)
;
MOZ_MUST_USE
bool
prepareForComputedPropKey
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForComputedPropValue
(
)
;
MOZ_MUST_USE
bool
emitInitHomeObject
(
)
;
MOZ_MUST_USE
bool
emitInit
(
AccessorType
accessorType
TaggedParserAtomIndex
key
)
;
MOZ_MUST_USE
bool
emitInitIndexOrComputed
(
AccessorType
accessorType
)
;
private
:
MOZ_MUST_USE
MOZ_ALWAYS_INLINE
bool
prepareForProp
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
bool
isStatic
bool
isComputed
)
;
MOZ_MUST_USE
bool
emitInit
(
JSOp
op
TaggedParserAtomIndex
key
)
;
MOZ_MUST_USE
bool
emitInitIndexOrComputed
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emitPopClassConstructor
(
)
;
}
;
class
MOZ_STACK_CLASS
ObjectEmitter
:
public
PropertyEmitter
{
private
:
#
ifdef
DEBUG
enum
class
ObjectState
{
Start
Object
End
}
;
ObjectState
objectState_
=
ObjectState
:
:
Start
;
#
endif
public
:
explicit
ObjectEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitObject
(
size_t
propertyCount
)
;
MOZ_MUST_USE
bool
emitObjectWithTemplateOnStack
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
class
MOZ_RAII
AutoSaveLocalStrictMode
{
SharedContext
*
sc_
;
bool
savedStrictness_
;
public
:
explicit
AutoSaveLocalStrictMode
(
SharedContext
*
sc
)
;
~
AutoSaveLocalStrictMode
(
)
;
void
restore
(
)
;
}
;
class
MOZ_STACK_CLASS
ClassEmitter
:
public
PropertyEmitter
{
public
:
enum
class
Kind
{
Expression
Declaration
}
;
private
:
bool
isDerived_
=
false
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCache_
;
mozilla
:
:
Maybe
<
EmitterScope
>
innerScope_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
bodyTdzCache_
;
mozilla
:
:
Maybe
<
EmitterScope
>
bodyScope_
;
AutoSaveLocalStrictMode
strictMode_
;
#
ifdef
DEBUG
enum
class
ClassState
{
Start
Scope
BodyScope
Class
InitConstructor
InstanceMemberInitializers
InstanceMemberInitializersEnd
StaticMemberInitializers
StaticMemberInitializersEnd
BoundName
End
}
;
ClassState
classState_
=
ClassState
:
:
Start
;
enum
class
MemberState
{
Start
Initializer
InitializerWithHomeObject
}
;
MemberState
memberState_
=
MemberState
:
:
Start
;
size_t
numInitializers_
=
0
;
#
endif
TaggedParserAtomIndex
name_
;
TaggedParserAtomIndex
nameForAnonymousClass_
;
bool
hasNameOnStack_
=
false
;
mozilla
:
:
Maybe
<
NameOpEmitter
>
initializersAssignment_
;
size_t
initializerIndex_
=
0
;
public
:
explicit
ClassEmitter
(
BytecodeEmitter
*
bce
)
;
bool
emitScope
(
LexicalScope
:
:
ParserData
*
scopeBindings
)
;
bool
emitBodyScope
(
LexicalScope
:
:
ParserData
*
scopeBindings
)
;
MOZ_MUST_USE
bool
emitClass
(
TaggedParserAtomIndex
name
TaggedParserAtomIndex
nameForAnonymousClass
bool
hasNameOnStack
)
;
MOZ_MUST_USE
bool
emitDerivedClass
(
TaggedParserAtomIndex
name
TaggedParserAtomIndex
nameForAnonymousClass
bool
hasNameOnStack
)
;
MOZ_MUST_USE
bool
emitInitConstructor
(
bool
needsHomeObject
)
;
MOZ_MUST_USE
bool
prepareForMemberInitializers
(
size_t
numInitializers
bool
isStatic
)
;
MOZ_MUST_USE
bool
prepareForMemberInitializer
(
)
;
MOZ_MUST_USE
bool
emitMemberInitializerHomeObject
(
bool
isStatic
)
;
MOZ_MUST_USE
bool
emitStoreMemberInitializer
(
)
;
MOZ_MUST_USE
bool
emitMemberInitializersEnd
(
)
;
MOZ_MUST_USE
bool
emitBinding
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
Kind
kind
)
;
private
:
MOZ_MUST_USE
bool
initProtoAndCtor
(
)
;
}
;
}
}
#
endif
