#
ifndef
frontend_ObjectEmitter_h
#
define
frontend_ObjectEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
BytecodeUtil
.
h
"
#
include
"
vm
/
JSAtom
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Scope
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
SharedContext
;
class
MOZ_STACK_CLASS
PropertyEmitter
{
public
:
enum
class
Kind
{
Prototype
Static
}
;
protected
:
BytecodeEmitter
*
bce_
;
bool
isClass_
=
false
;
bool
isStatic_
=
false
;
bool
isIndexOrComputed_
=
false
;
JS
:
:
Rooted
<
PlainObject
*
>
obj_
;
#
ifdef
DEBUG
enum
class
PropertyState
{
Start
PropValue
InitHomeObj
IndexKey
IndexValue
InitHomeObjForIndex
ComputedKey
ComputedValue
InitHomeObjForComputed
ProtoValue
SpreadOperand
Init
}
;
PropertyState
propertyState_
=
PropertyState
:
:
Start
;
#
endif
public
:
explicit
PropertyEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
prepareForProtoValue
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
)
;
MOZ_MUST_USE
bool
emitMutateProto
(
)
;
MOZ_MUST_USE
bool
prepareForSpreadOperand
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
spreadPos
)
;
MOZ_MUST_USE
bool
emitSpread
(
)
;
MOZ_MUST_USE
bool
prepareForPropValue
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForIndexPropKey
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForIndexPropValue
(
)
;
MOZ_MUST_USE
bool
prepareForComputedPropKey
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
Kind
kind
=
Kind
:
:
Prototype
)
;
MOZ_MUST_USE
bool
prepareForComputedPropValue
(
)
;
MOZ_MUST_USE
bool
emitInitHomeObject
(
bool
isAsyncNonGenerator
=
false
)
;
MOZ_MUST_USE
bool
emitInitProp
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
;
MOZ_MUST_USE
bool
emitInitGetter
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
;
MOZ_MUST_USE
bool
emitInitSetter
(
JS
:
:
Handle
<
JSAtom
*
>
key
)
;
MOZ_MUST_USE
bool
emitInitIndexProp
(
)
;
MOZ_MUST_USE
bool
emitInitIndexGetter
(
)
;
MOZ_MUST_USE
bool
emitInitIndexSetter
(
)
;
MOZ_MUST_USE
bool
emitInitComputedProp
(
)
;
MOZ_MUST_USE
bool
emitInitComputedGetter
(
)
;
MOZ_MUST_USE
bool
emitInitComputedSetter
(
)
;
private
:
MOZ_MUST_USE
MOZ_ALWAYS_INLINE
bool
prepareForProp
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
keyPos
bool
isStatic
bool
isComputed
)
;
MOZ_MUST_USE
bool
emitInit
(
JSOp
op
JS
:
:
Handle
<
JSAtom
*
>
key
)
;
MOZ_MUST_USE
bool
emitInitIndexOrComputed
(
JSOp
op
)
;
MOZ_MUST_USE
bool
emitPopClassConstructor
(
)
;
}
;
class
MOZ_STACK_CLASS
ObjectEmitter
:
public
PropertyEmitter
{
private
:
ptrdiff_t
top_
=
0
;
#
ifdef
DEBUG
enum
class
ObjectState
{
Start
Object
End
}
;
ObjectState
objectState_
=
ObjectState
:
:
Start
;
#
endif
public
:
explicit
ObjectEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitObject
(
size_t
propertyCount
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
class
MOZ_RAII
AutoSaveLocalStrictMode
{
SharedContext
*
sc_
;
bool
savedStrictness_
;
public
:
explicit
AutoSaveLocalStrictMode
(
SharedContext
*
sc
)
;
~
AutoSaveLocalStrictMode
(
)
;
void
restore
(
)
;
}
;
class
MOZ_STACK_CLASS
ClassEmitter
:
public
PropertyEmitter
{
public
:
enum
class
Kind
{
Expression
Declaration
}
;
private
:
bool
isDerived_
=
false
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCacheForInnerName_
;
mozilla
:
:
Maybe
<
EmitterScope
>
innerNameScope_
;
AutoSaveLocalStrictMode
strictMode_
;
#
ifdef
DEBUG
enum
class
ClassState
{
Start
Scope
Class
InitConstructor
End
}
;
ClassState
classState_
=
ClassState
:
:
Start
;
#
endif
JS
:
:
Rooted
<
JSAtom
*
>
name_
;
JS
:
:
Rooted
<
JSAtom
*
>
nameForAnonymousClass_
;
bool
hasNameOnStack_
=
false
;
public
:
explicit
ClassEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitScopeForNamedClass
(
JS
:
:
Handle
<
LexicalScope
:
:
Data
*
>
scopeBindings
)
;
MOZ_MUST_USE
bool
emitClass
(
JS
:
:
Handle
<
JSAtom
*
>
name
JS
:
:
Handle
<
JSAtom
*
>
nameForAnonymousClass
bool
hasNameOnStack
)
;
MOZ_MUST_USE
bool
emitDerivedClass
(
JS
:
:
Handle
<
JSAtom
*
>
name
JS
:
:
Handle
<
JSAtom
*
>
nameForAnonymousClass
bool
hasNameOnStack
)
;
MOZ_MUST_USE
bool
emitInitConstructor
(
bool
needsHomeObject
)
;
MOZ_MUST_USE
bool
emitInitDefaultConstructor
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
classStart
const
mozilla
:
:
Maybe
<
uint32_t
>
&
classEnd
)
;
MOZ_MUST_USE
bool
emitEnd
(
Kind
kind
)
;
private
:
MOZ_MUST_USE
bool
emitSetEmptyClassConstructorNameForDefaultCtor
(
)
;
MOZ_MUST_USE
bool
initProtoAndCtor
(
)
;
}
;
}
}
#
endif
