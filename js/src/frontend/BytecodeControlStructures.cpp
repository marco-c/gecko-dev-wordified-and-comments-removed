#
include
"
frontend
/
BytecodeControlStructures
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
NestableControl
:
:
NestableControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
Nestable
<
NestableControl
>
(
&
bce
-
>
innermostNestableControl
)
kind_
(
kind
)
emitterScope_
(
bce
-
>
innermostEmitterScopeNoCheck
(
)
)
{
}
BreakableControl
:
:
BreakableControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
NestableControl
(
bce
kind
)
{
MOZ_ASSERT
(
is
<
BreakableControl
>
(
)
)
;
}
bool
BreakableControl
:
:
patchBreaks
(
BytecodeEmitter
*
bce
)
{
return
bce
-
>
emitJumpTargetAndPatch
(
breaks
)
;
}
LabelControl
:
:
LabelControl
(
BytecodeEmitter
*
bce
JSAtom
*
label
BytecodeOffset
startOffset
)
:
BreakableControl
(
bce
StatementKind
:
:
Label
)
label_
(
bce
-
>
cx
label
)
startOffset_
(
startOffset
)
{
}
LoopControl
:
:
LoopControl
(
BytecodeEmitter
*
bce
StatementKind
loopKind
)
:
BreakableControl
(
bce
loopKind
)
tdzCache_
(
bce
)
{
MOZ_ASSERT
(
is
<
LoopControl
>
(
)
)
;
LoopControl
*
enclosingLoop
=
findNearest
<
LoopControl
>
(
enclosing
(
)
)
;
stackDepth_
=
bce
-
>
bytecodeSection
(
)
.
stackDepth
(
)
;
loopDepth_
=
enclosingLoop
?
enclosingLoop
-
>
loopDepth_
+
1
:
1
;
int
loopSlots
;
if
(
loopKind
=
=
StatementKind
:
:
Spread
)
{
loopSlots
=
4
;
}
else
if
(
loopKind
=
=
StatementKind
:
:
ForOfLoop
)
{
loopSlots
=
3
;
}
else
if
(
loopKind
=
=
StatementKind
:
:
ForInLoop
)
{
loopSlots
=
1
;
}
else
{
loopSlots
=
0
;
}
MOZ_ASSERT
(
loopSlots
<
=
stackDepth_
)
;
if
(
enclosingLoop
)
{
canIonOsr_
=
(
enclosingLoop
-
>
canIonOsr_
&
&
stackDepth_
=
=
enclosingLoop
-
>
stackDepth_
+
loopSlots
)
;
}
else
{
canIonOsr_
=
stackDepth_
=
=
loopSlots
;
}
}
bool
LoopControl
:
:
emitContinueTarget
(
BytecodeEmitter
*
bce
)
{
return
bce
-
>
emitJumpTargetAndPatch
(
continues
)
;
}
bool
LoopControl
:
:
emitSpecialBreakForDone
(
BytecodeEmitter
*
bce
)
{
MOZ_ASSERT
(
bce
-
>
bytecodeSection
(
)
.
stackDepth
(
)
=
=
stackDepth_
)
;
MOZ_ASSERT
(
bce
-
>
innermostNestableControl
=
=
this
)
;
if
(
!
bce
-
>
emitJump
(
JSOP_GOTO
&
breaks
)
)
{
return
false
;
}
return
true
;
}
bool
LoopControl
:
:
emitLoopHead
(
BytecodeEmitter
*
bce
const
Maybe
<
uint32_t
>
&
nextPos
)
{
if
(
nextPos
)
{
if
(
!
bce
-
>
updateSourceCoordNotes
(
*
nextPos
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
loopDepth_
>
0
)
;
head_
=
{
bce
-
>
bytecodeSection
(
)
.
offset
(
)
}
;
BytecodeOffset
off
;
if
(
!
bce
-
>
emitJumpTargetOp
(
JSOP_LOOPHEAD
&
off
)
)
{
return
false
;
}
SetLoopHeadDepthHintAndFlags
(
bce
-
>
bytecodeSection
(
)
.
code
(
off
)
loopDepth_
canIonOsr_
)
;
return
true
;
}
bool
LoopControl
:
:
emitLoopEnd
(
BytecodeEmitter
*
bce
JSOp
op
JSTryNoteKind
tryNoteKind
)
{
JumpList
beq
;
if
(
!
bce
-
>
emitBackwardJump
(
op
head_
&
beq
&
breakTarget_
)
)
{
return
false
;
}
if
(
!
patchBreaks
(
bce
)
)
{
return
false
;
}
if
(
!
bce
-
>
addTryNote
(
tryNoteKind
bce
-
>
bytecodeSection
(
)
.
stackDepth
(
)
headOffset
(
)
breakTargetOffset
(
)
)
)
{
return
false
;
}
return
true
;
}
TryFinallyControl
:
:
TryFinallyControl
(
BytecodeEmitter
*
bce
StatementKind
kind
)
:
NestableControl
(
bce
kind
)
emittingSubroutine_
(
false
)
{
MOZ_ASSERT
(
is
<
TryFinallyControl
>
(
)
)
;
}
