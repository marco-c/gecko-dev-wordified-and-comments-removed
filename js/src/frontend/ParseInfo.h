#
ifndef
frontend_ParseInfo_h
#
define
frontend_ParseInfo_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
frontend
/
FunctionTree
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
frontend
/
UsedNameTracker
.
h
"
#
include
"
js
/
RealmOptions
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
Realm
.
h
"
namespace
js
{
namespace
frontend
{
class
ParserBase
;
struct
MOZ_RAII
ParseInfo
{
enum
Mode
{
Eager
Deferred
}
;
UsedNameTracker
usedNames
;
LifoAllocScope
&
allocScope
;
FunctionTreeHolder
treeHolder
;
Mode
mode
;
Vector
<
RegExpCreationData
>
regExpData
;
Vector
<
BigIntCreationData
>
bigIntData
;
ParseInfo
(
JSContext
*
cx
LifoAllocScope
&
alloc
)
:
usedNames
(
cx
)
allocScope
(
alloc
)
treeHolder
(
cx
)
mode
(
cx
-
>
realm
(
)
-
>
behaviors
(
)
.
deferredParserAlloc
(
)
?
ParseInfo
:
:
Mode
:
:
Deferred
:
ParseInfo
:
:
Mode
:
:
Eager
)
regExpData
(
cx
)
bigIntData
(
cx
)
{
}
ParseInfo
(
const
ParseInfo
&
)
=
delete
;
ParseInfo
(
ParseInfo
&
&
)
=
delete
;
ParseInfo
&
operator
=
(
const
ParseInfo
&
)
=
delete
;
ParseInfo
&
operator
=
(
ParseInfo
&
&
)
=
delete
;
bool
isEager
(
)
{
return
mode
=
=
Mode
:
:
Eager
;
}
bool
isDeferred
(
)
{
return
mode
=
=
Mode
:
:
Deferred
;
}
}
;
}
}
#
endif
