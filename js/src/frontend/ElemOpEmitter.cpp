#
include
"
frontend
/
ElemOpEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
ElemOpEmitter
:
:
ElemOpEmitter
(
BytecodeEmitter
*
bce
Kind
kind
ObjKind
objKind
)
:
bce_
(
bce
)
kind_
(
kind
)
objKind_
(
objKind
)
{
}
bool
ElemOpEmitter
:
:
prepareForObj
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Obj
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
prepareForKey
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Obj
)
;
if
(
!
isSuper
(
)
&
&
isIncDec
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_CHECKOBJCOERCIBLE
)
)
{
return
false
;
}
}
if
(
isCall
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_DUP
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Key
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
emitGet
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Key
)
;
if
(
isIncDec
(
)
|
|
isCompoundAssignment
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_TOID
)
)
{
return
false
;
}
}
if
(
isSuper
(
)
)
{
if
(
!
bce_
-
>
emitSuperBase
(
)
)
{
return
false
;
}
}
if
(
isIncDec
(
)
|
|
isCompoundAssignment
(
)
)
{
if
(
isSuper
(
)
)
{
if
(
!
bce_
-
>
emitDupAt
(
2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitDupAt
(
2
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitDupAt
(
2
)
)
{
return
false
;
}
}
else
{
if
(
!
bce_
-
>
emit1
(
JSOP_DUP2
)
)
{
return
false
;
}
}
}
JSOp
op
;
if
(
isSuper
(
)
)
{
op
=
JSOP_GETELEM_SUPER
;
}
else
if
(
isCall
(
)
)
{
op
=
JSOP_CALLELEM
;
}
else
{
op
=
JSOP_GETELEM
;
}
if
(
!
bce_
-
>
emitElemOpBase
(
op
)
)
{
return
false
;
}
if
(
isCall
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_SWAP
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Get
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
prepareForRhs
(
)
{
MOZ_ASSERT
(
isSimpleAssignment
(
)
|
|
isPropInit
(
)
|
|
isCompoundAssignment
(
)
)
;
MOZ_ASSERT_IF
(
isSimpleAssignment
(
)
|
|
isPropInit
(
)
state_
=
=
State
:
:
Key
)
;
MOZ_ASSERT_IF
(
isCompoundAssignment
(
)
state_
=
=
State
:
:
Get
)
;
if
(
isSimpleAssignment
(
)
|
|
isPropInit
(
)
)
{
if
(
isSuper
(
)
)
{
if
(
!
bce_
-
>
emitSuperBase
(
)
)
{
return
false
;
}
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Rhs
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
skipObjAndKeyAndRhs
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
MOZ_ASSERT
(
isSimpleAssignment
(
)
|
|
isPropInit
(
)
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Rhs
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
emitDelete
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Key
)
;
MOZ_ASSERT
(
isDelete
(
)
)
;
if
(
isSuper
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_TOID
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitSuperBase
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitUint16Operand
(
JSOP_THROWMSG
JSMSG_CANT_DELETE_SUPER
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitPopN
(
2
)
)
{
return
false
;
}
}
else
{
JSOp
op
=
bce_
-
>
sc
-
>
strict
(
)
?
JSOP_STRICTDELELEM
:
JSOP_DELELEM
;
if
(
!
bce_
-
>
emitElemOpBase
(
op
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
Delete
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
emitAssignment
(
)
{
MOZ_ASSERT
(
isSimpleAssignment
(
)
|
|
isPropInit
(
)
|
|
isCompoundAssignment
(
)
)
;
MOZ_ASSERT
(
state_
=
=
State
:
:
Rhs
)
;
MOZ_ASSERT_IF
(
isPropInit
(
)
!
isSuper
(
)
)
;
JSOp
setOp
=
isPropInit
(
)
?
JSOP_INITELEM
:
isSuper
(
)
?
bce_
-
>
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM_SUPER
:
JSOP_SETELEM_SUPER
:
bce_
-
>
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM
:
JSOP_SETELEM
;
if
(
!
bce_
-
>
emitElemOpBase
(
setOp
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
Assignment
;
#
endif
return
true
;
}
bool
ElemOpEmitter
:
:
emitIncDec
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Key
)
;
MOZ_ASSERT
(
isIncDec
(
)
)
;
if
(
!
emitGet
(
)
)
{
return
false
;
}
MOZ_ASSERT
(
state_
=
=
State
:
:
Get
)
;
JSOp
incOp
=
isInc
(
)
?
JSOP_INC
:
JSOP_DEC
;
if
(
!
bce_
-
>
emit1
(
JSOP_TONUMERIC
)
)
{
return
false
;
}
if
(
isPostIncDec
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_DUP
)
)
{
return
false
;
}
}
if
(
!
bce_
-
>
emit1
(
incOp
)
)
{
return
false
;
}
if
(
isPostIncDec
(
)
)
{
if
(
isSuper
(
)
)
{
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
4
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
4
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
4
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
3
)
)
{
return
false
;
}
}
else
{
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
3
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
3
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit2
(
JSOP_PICK
2
)
)
{
return
false
;
}
}
}
JSOp
setOp
=
isSuper
(
)
?
(
bce_
-
>
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM_SUPER
:
JSOP_SETELEM_SUPER
)
:
(
bce_
-
>
sc
-
>
strict
(
)
?
JSOP_STRICTSETELEM
:
JSOP_SETELEM
)
;
if
(
!
bce_
-
>
emitElemOpBase
(
setOp
)
)
{
return
false
;
}
if
(
isPostIncDec
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_POP
)
)
{
return
false
;
}
}
#
ifdef
DEBUG
state_
=
State
:
:
IncDec
;
#
endif
return
true
;
}
