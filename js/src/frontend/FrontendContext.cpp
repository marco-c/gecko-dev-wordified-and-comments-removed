#
include
"
frontend
/
FrontendContext
.
h
"
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
include
<
process
.
h
>
#
else
#
include
<
pthread
.
h
>
#
endif
#
include
"
gc
/
GC
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
#
include
"
js
/
Modules
.
h
"
#
include
"
util
/
DifferentialTesting
.
h
"
#
include
"
util
/
NativeStack
.
h
"
#
include
"
vm
/
JSContext
.
h
"
using
namespace
js
;
void
FrontendErrors
:
:
clearErrors
(
)
{
error
.
reset
(
)
;
warnings
.
clear
(
)
;
overRecursed
=
false
;
outOfMemory
=
false
;
allocationOverflow
=
false
;
}
void
FrontendErrors
:
:
clearWarnings
(
)
{
warnings
.
clear
(
)
;
}
void
FrontendAllocator
:
:
reportAllocationOverflow
(
)
{
fc_
-
>
onAllocationOverflow
(
)
;
}
void
*
FrontendAllocator
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
return
fc_
-
>
onOutOfMemory
(
allocFunc
arena
nbytes
reallocPtr
)
;
}
FrontendContext
:
:
~
FrontendContext
(
)
{
if
(
ownNameCollectionPool_
)
{
MOZ_ASSERT
(
nameCollectionPool_
)
;
js_delete
(
nameCollectionPool_
)
;
}
}
bool
FrontendContext
:
:
setSupportedImportAssertions
(
const
JS
:
:
ImportAssertionVector
&
supportedImportAssertions
)
{
MOZ_ASSERT
(
supportedImportAssertions_
.
empty
(
)
)
;
if
(
!
supportedImportAssertions_
.
appendAll
(
supportedImportAssertions
)
)
{
ReportOutOfMemory
(
)
;
return
false
;
}
return
true
;
}
void
FrontendContext
:
:
setStackQuota
(
JS
:
:
NativeStackSize
stackSize
)
{
#
ifdef
__wasi__
stackLimit_
=
JS
:
:
WASINativeStackLimit
;
#
else
if
(
stackSize
=
=
0
)
{
stackLimit_
=
JS
:
:
NativeStackLimitMax
;
}
else
{
stackLimit_
=
JS
:
:
GetNativeStackLimit
(
GetNativeStackBase
(
)
stackSize
-
1
)
;
}
#
endif
#
ifdef
DEBUG
setNativeStackLimitThread
(
)
;
#
endif
}
bool
FrontendContext
:
:
allocateOwnedPool
(
)
{
MOZ_ASSERT
(
!
nameCollectionPool_
)
;
nameCollectionPool_
=
js_new
<
frontend
:
:
NameCollectionPool
>
(
)
;
if
(
!
nameCollectionPool_
)
{
return
false
;
}
ownNameCollectionPool_
=
true
;
return
true
;
}
bool
FrontendContext
:
:
hadErrors
(
)
const
{
if
(
maybeCx_
)
{
if
(
maybeCx_
-
>
isExceptionPending
(
)
)
{
return
true
;
}
}
return
errors_
.
hadErrors
(
)
;
}
void
FrontendContext
:
:
clearErrors
(
)
{
MOZ_ASSERT
(
!
maybeCx_
)
;
return
errors_
.
clearErrors
(
)
;
}
void
FrontendContext
:
:
clearWarnings
(
)
{
return
errors_
.
clearWarnings
(
)
;
}
void
*
FrontendContext
:
:
onOutOfMemory
(
AllocFunction
allocFunc
arena_id_t
arena
size_t
nbytes
void
*
reallocPtr
)
{
addPendingOutOfMemory
(
)
;
return
nullptr
;
}
void
FrontendContext
:
:
onAllocationOverflow
(
)
{
errors_
.
allocationOverflow
=
true
;
}
void
FrontendContext
:
:
onOutOfMemory
(
)
{
addPendingOutOfMemory
(
)
;
}
void
FrontendContext
:
:
onOverRecursed
(
)
{
errors_
.
overRecursed
=
true
;
}
void
FrontendContext
:
:
recoverFromOutOfMemory
(
)
{
if
(
maybeCx_
)
{
maybeCx_
-
>
recoverFromOutOfMemory
(
)
;
}
errors_
.
outOfMemory
=
false
;
}
const
JSErrorFormatString
*
FrontendContext
:
:
gcSafeCallback
(
JSErrorCallback
callback
void
*
userRef
const
unsigned
errorNumber
)
{
mozilla
:
:
Maybe
<
gc
:
:
AutoSuppressGC
>
suppressGC
;
if
(
maybeCx_
)
{
suppressGC
.
emplace
(
maybeCx_
)
;
}
return
callback
(
userRef
errorNumber
)
;
}
void
FrontendContext
:
:
reportError
(
CompileError
&
&
err
)
{
if
(
errors_
.
error
)
{
errors_
.
error
.
reset
(
)
;
}
errors_
.
error
.
emplace
(
std
:
:
move
(
err
)
)
;
}
bool
FrontendContext
:
:
reportWarning
(
CompileError
&
&
err
)
{
if
(
!
errors_
.
warnings
.
append
(
std
:
:
move
(
err
)
)
)
{
ReportOutOfMemory
(
)
;
return
false
;
}
return
true
;
}
void
FrontendContext
:
:
ReportOutOfMemory
(
)
{
if
(
SupportDifferentialTesting
(
)
)
{
fprintf
(
stderr
"
ReportOutOfMemory
called
\
n
"
)
;
}
addPendingOutOfMemory
(
)
;
}
void
FrontendContext
:
:
addPendingOutOfMemory
(
)
{
errors_
.
outOfMemory
=
true
;
}
void
FrontendContext
:
:
setCurrentJSContext
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
!
nameCollectionPool_
)
;
maybeCx_
=
cx
;
nameCollectionPool_
=
&
cx
-
>
frontendCollectionPool
(
)
;
scriptDataTableHolder_
=
&
cx
-
>
runtime
(
)
-
>
scriptDataTableHolder
(
)
;
stackLimit_
=
cx
-
>
stackLimitForCurrentPrincipal
(
)
;
#
ifdef
DEBUG
setNativeStackLimitThread
(
)
;
#
endif
}
bool
FrontendContext
:
:
convertToRuntimeError
(
JSContext
*
cx
Warning
warning
)
{
if
(
hadOutOfMemory
(
)
)
{
js
:
:
ReportOutOfMemory
(
cx
)
;
return
false
;
}
if
(
maybeError
(
)
)
{
if
(
!
maybeError
(
)
-
>
throwError
(
cx
)
)
{
return
false
;
}
}
if
(
warning
=
=
Warning
:
:
Report
)
{
for
(
CompileError
&
error
:
warnings
(
)
)
{
if
(
!
error
.
throwError
(
cx
)
)
{
return
false
;
}
}
}
if
(
hadOverRecursed
(
)
)
{
js
:
:
ReportOverRecursed
(
cx
)
;
}
if
(
hadAllocationOverflow
(
)
)
{
js
:
:
ReportAllocationOverflow
(
cx
)
;
}
MOZ_ASSERT
(
!
extraBindingsAreNotUsed
(
)
"
extraBindingsAreNotUsed
shouldn
'
t
escape
from
FrontendContext
"
)
;
return
true
;
}
#
ifdef
DEBUG
static
size_t
GetTid
(
)
{
#
if
defined
(
_WIN32
)
return
size_t
(
GetCurrentThreadId
(
)
)
;
#
else
return
size_t
(
pthread_self
(
)
)
;
#
endif
}
void
FrontendContext
:
:
setNativeStackLimitThread
(
)
{
stackLimitThreadId_
.
emplace
(
GetTid
(
)
)
;
}
void
FrontendContext
:
:
assertNativeStackLimitThread
(
)
{
if
(
!
stackLimitThreadId_
.
isSome
(
)
)
{
return
;
}
MOZ_ASSERT
(
*
stackLimitThreadId_
=
=
GetTid
(
)
)
;
}
#
endif
#
ifdef
__wasi__
void
FrontendContext
:
:
incWasiRecursionDepth
(
)
{
if
(
maybeCx_
)
{
IncWasiRecursionDepth
(
maybeCx_
)
;
}
}
void
FrontendContext
:
:
decWasiRecursionDepth
(
)
{
if
(
maybeCx_
)
{
DecWasiRecursionDepth
(
maybeCx_
)
;
}
}
bool
FrontendContext
:
:
checkWasiRecursionLimit
(
)
{
if
(
maybeCx_
)
{
return
CheckWasiRecursionLimit
(
maybeCx_
)
;
}
return
true
;
}
JS_PUBLIC_API
void
js
:
:
IncWasiRecursionDepth
(
FrontendContext
*
fc
)
{
fc
-
>
incWasiRecursionDepth
(
)
;
}
JS_PUBLIC_API
void
js
:
:
DecWasiRecursionDepth
(
FrontendContext
*
fc
)
{
fc
-
>
decWasiRecursionDepth
(
)
;
}
JS_PUBLIC_API
bool
js
:
:
CheckWasiRecursionLimit
(
FrontendContext
*
fc
)
{
return
fc
-
>
checkWasiRecursionLimit
(
)
;
}
#
endif
FrontendContext
*
js
:
:
NewFrontendContext
(
)
{
UniquePtr
<
FrontendContext
>
fc
=
MakeUnique
<
FrontendContext
>
(
)
;
if
(
!
fc
)
{
return
nullptr
;
}
if
(
!
fc
-
>
allocateOwnedPool
(
)
)
{
return
nullptr
;
}
return
fc
.
release
(
)
;
}
void
js
:
:
DestroyFrontendContext
(
FrontendContext
*
fc
)
{
js_delete_poison
(
fc
)
;
}
