#
include
"
frontend
/
FoldConstants
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
jslibmath
.
h
"
#
include
"
jsnum
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
ParseNodeVisitor
.
h
"
#
include
"
frontend
/
Parser
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
vm
/
StringType
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
JS
:
:
GenericNaN
;
using
JS
:
:
ToInt32
;
using
JS
:
:
ToUint32
;
using
mozilla
:
:
IsNaN
;
using
mozilla
:
:
IsNegative
;
using
mozilla
:
:
NegativeInfinity
;
using
mozilla
:
:
PositiveInfinity
;
static
bool
ContainsHoistedDeclaration
(
JSContext
*
cx
ParseNode
*
node
bool
*
result
)
;
static
bool
ListContainsHoistedDeclaration
(
JSContext
*
cx
ListNode
*
list
bool
*
result
)
{
for
(
ParseNode
*
node
:
list
-
>
contents
(
)
)
{
if
(
!
ContainsHoistedDeclaration
(
cx
node
result
)
)
{
return
false
;
}
if
(
*
result
)
{
return
true
;
}
}
*
result
=
false
;
return
true
;
}
static
bool
ContainsHoistedDeclaration
(
JSContext
*
cx
ParseNode
*
node
bool
*
result
)
{
if
(
!
CheckRecursionLimit
(
cx
)
)
{
return
false
;
}
restart
:
switch
(
node
-
>
getKind
(
)
)
{
case
ParseNodeKind
:
:
Var
:
*
result
=
true
;
return
true
;
case
ParseNodeKind
:
:
Let
:
case
ParseNodeKind
:
:
Const
:
MOZ_ASSERT
(
node
-
>
is
<
ListNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Class
:
MOZ_ASSERT
(
node
-
>
is
<
ClassNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Function
:
MOZ_ASSERT
(
node
-
>
is
<
CodeNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Module
:
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
EmptyStatement
:
MOZ_ASSERT
(
node
-
>
is
<
NullaryNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Debugger
:
MOZ_ASSERT
(
node
-
>
is
<
DebuggerStatement
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
ExpressionStatement
:
case
ParseNodeKind
:
:
Throw
:
case
ParseNodeKind
:
:
Return
:
MOZ_ASSERT
(
node
-
>
is
<
UnaryNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
InitialYield
:
case
ParseNodeKind
:
:
YieldStar
:
case
ParseNodeKind
:
:
Yield
:
MOZ_ASSERT
(
node
-
>
is
<
UnaryNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Break
:
case
ParseNodeKind
:
:
Continue
:
case
ParseNodeKind
:
:
Import
:
case
ParseNodeKind
:
:
ImportSpecList
:
case
ParseNodeKind
:
:
ImportSpec
:
case
ParseNodeKind
:
:
ExportFrom
:
case
ParseNodeKind
:
:
ExportDefault
:
case
ParseNodeKind
:
:
ExportSpecList
:
case
ParseNodeKind
:
:
ExportSpec
:
case
ParseNodeKind
:
:
Export
:
case
ParseNodeKind
:
:
ExportBatchSpec
:
case
ParseNodeKind
:
:
CallImport
:
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
DoWhile
:
return
ContainsHoistedDeclaration
(
cx
node
-
>
as
<
BinaryNode
>
(
)
.
left
(
)
result
)
;
case
ParseNodeKind
:
:
While
:
case
ParseNodeKind
:
:
With
:
return
ContainsHoistedDeclaration
(
cx
node
-
>
as
<
BinaryNode
>
(
)
.
right
(
)
result
)
;
case
ParseNodeKind
:
:
Label
:
return
ContainsHoistedDeclaration
(
cx
node
-
>
as
<
LabeledStatement
>
(
)
.
statement
(
)
result
)
;
case
ParseNodeKind
:
:
If
:
{
TernaryNode
*
ifNode
=
&
node
-
>
as
<
TernaryNode
>
(
)
;
ParseNode
*
consequent
=
ifNode
-
>
kid2
(
)
;
if
(
!
ContainsHoistedDeclaration
(
cx
consequent
result
)
)
{
return
false
;
}
if
(
*
result
)
{
return
true
;
}
if
(
(
node
=
ifNode
-
>
kid3
(
)
)
)
{
goto
restart
;
}
*
result
=
false
;
return
true
;
}
case
ParseNodeKind
:
:
Try
:
{
TernaryNode
*
tryNode
=
&
node
-
>
as
<
TernaryNode
>
(
)
;
MOZ_ASSERT
(
tryNode
-
>
kid2
(
)
|
|
tryNode
-
>
kid3
(
)
"
must
have
either
catch
or
finally
"
)
;
ParseNode
*
tryBlock
=
tryNode
-
>
kid1
(
)
;
if
(
!
ContainsHoistedDeclaration
(
cx
tryBlock
result
)
)
{
return
false
;
}
if
(
*
result
)
{
return
true
;
}
if
(
ParseNode
*
catchScope
=
tryNode
-
>
kid2
(
)
)
{
BinaryNode
*
catchNode
=
&
catchScope
-
>
as
<
LexicalScopeNode
>
(
)
.
scopeBody
(
)
-
>
as
<
BinaryNode
>
(
)
;
MOZ_ASSERT
(
catchNode
-
>
isKind
(
ParseNodeKind
:
:
Catch
)
)
;
ParseNode
*
catchStatements
=
catchNode
-
>
right
(
)
;
if
(
!
ContainsHoistedDeclaration
(
cx
catchStatements
result
)
)
{
return
false
;
}
if
(
*
result
)
{
return
true
;
}
}
if
(
ParseNode
*
finallyBlock
=
tryNode
-
>
kid3
(
)
)
{
return
ContainsHoistedDeclaration
(
cx
finallyBlock
result
)
;
}
*
result
=
false
;
return
true
;
}
case
ParseNodeKind
:
:
Switch
:
{
SwitchStatement
*
switchNode
=
&
node
-
>
as
<
SwitchStatement
>
(
)
;
return
ContainsHoistedDeclaration
(
cx
&
switchNode
-
>
lexicalForCaseList
(
)
result
)
;
}
case
ParseNodeKind
:
:
Case
:
{
CaseClause
*
caseClause
=
&
node
-
>
as
<
CaseClause
>
(
)
;
return
ContainsHoistedDeclaration
(
cx
caseClause
-
>
statementList
(
)
result
)
;
}
case
ParseNodeKind
:
:
For
:
{
ForNode
*
forNode
=
&
node
-
>
as
<
ForNode
>
(
)
;
TernaryNode
*
loopHead
=
forNode
-
>
head
(
)
;
MOZ_ASSERT
(
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForHead
)
|
|
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForIn
)
|
|
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForOf
)
)
;
if
(
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForHead
)
)
{
ParseNode
*
init
=
loopHead
-
>
kid1
(
)
;
if
(
init
&
&
init
-
>
isKind
(
ParseNodeKind
:
:
Var
)
)
{
*
result
=
true
;
return
true
;
}
}
else
{
MOZ_ASSERT
(
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForIn
)
|
|
loopHead
-
>
isKind
(
ParseNodeKind
:
:
ForOf
)
)
;
ParseNode
*
decl
=
loopHead
-
>
kid1
(
)
;
if
(
decl
&
&
decl
-
>
isKind
(
ParseNodeKind
:
:
Var
)
)
{
*
result
=
true
;
return
true
;
}
}
ParseNode
*
loopBody
=
forNode
-
>
body
(
)
;
return
ContainsHoistedDeclaration
(
cx
loopBody
result
)
;
}
case
ParseNodeKind
:
:
LexicalScope
:
{
LexicalScopeNode
*
scope
=
&
node
-
>
as
<
LexicalScopeNode
>
(
)
;
ParseNode
*
expr
=
scope
-
>
scopeBody
(
)
;
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
For
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
Function
)
)
{
return
ContainsHoistedDeclaration
(
cx
expr
result
)
;
}
MOZ_ASSERT
(
expr
-
>
isKind
(
ParseNodeKind
:
:
StatementList
)
)
;
return
ListContainsHoistedDeclaration
(
cx
&
scope
-
>
scopeBody
(
)
-
>
as
<
ListNode
>
(
)
result
)
;
}
case
ParseNodeKind
:
:
StatementList
:
return
ListContainsHoistedDeclaration
(
cx
&
node
-
>
as
<
ListNode
>
(
)
result
)
;
case
ParseNodeKind
:
:
ObjectPropertyName
:
case
ParseNodeKind
:
:
ComputedName
:
case
ParseNodeKind
:
:
Spread
:
case
ParseNodeKind
:
:
MutateProto
:
case
ParseNodeKind
:
:
Colon
:
case
ParseNodeKind
:
:
Shorthand
:
case
ParseNodeKind
:
:
Conditional
:
case
ParseNodeKind
:
:
TypeOfName
:
case
ParseNodeKind
:
:
TypeOfExpr
:
case
ParseNodeKind
:
:
Await
:
case
ParseNodeKind
:
:
Void
:
case
ParseNodeKind
:
:
Not
:
case
ParseNodeKind
:
:
BitNot
:
case
ParseNodeKind
:
:
DeleteName
:
case
ParseNodeKind
:
:
DeleteProp
:
case
ParseNodeKind
:
:
DeleteElem
:
case
ParseNodeKind
:
:
DeleteExpr
:
case
ParseNodeKind
:
:
Pos
:
case
ParseNodeKind
:
:
Neg
:
case
ParseNodeKind
:
:
PreIncrement
:
case
ParseNodeKind
:
:
PostIncrement
:
case
ParseNodeKind
:
:
PreDecrement
:
case
ParseNodeKind
:
:
PostDecrement
:
case
ParseNodeKind
:
:
Or
:
case
ParseNodeKind
:
:
And
:
case
ParseNodeKind
:
:
BitOr
:
case
ParseNodeKind
:
:
BitXor
:
case
ParseNodeKind
:
:
BitAnd
:
case
ParseNodeKind
:
:
StrictEq
:
case
ParseNodeKind
:
:
Eq
:
case
ParseNodeKind
:
:
StrictNe
:
case
ParseNodeKind
:
:
Ne
:
case
ParseNodeKind
:
:
Lt
:
case
ParseNodeKind
:
:
Le
:
case
ParseNodeKind
:
:
Gt
:
case
ParseNodeKind
:
:
Ge
:
case
ParseNodeKind
:
:
InstanceOf
:
case
ParseNodeKind
:
:
In
:
case
ParseNodeKind
:
:
Lsh
:
case
ParseNodeKind
:
:
Rsh
:
case
ParseNodeKind
:
:
Ursh
:
case
ParseNodeKind
:
:
Add
:
case
ParseNodeKind
:
:
Sub
:
case
ParseNodeKind
:
:
Star
:
case
ParseNodeKind
:
:
Div
:
case
ParseNodeKind
:
:
Mod
:
case
ParseNodeKind
:
:
Pow
:
case
ParseNodeKind
:
:
Assign
:
case
ParseNodeKind
:
:
AddAssign
:
case
ParseNodeKind
:
:
SubAssign
:
case
ParseNodeKind
:
:
BitOrAssign
:
case
ParseNodeKind
:
:
BitXorAssign
:
case
ParseNodeKind
:
:
BitAndAssign
:
case
ParseNodeKind
:
:
LshAssign
:
case
ParseNodeKind
:
:
RshAssign
:
case
ParseNodeKind
:
:
UrshAssign
:
case
ParseNodeKind
:
:
MulAssign
:
case
ParseNodeKind
:
:
DivAssign
:
case
ParseNodeKind
:
:
ModAssign
:
case
ParseNodeKind
:
:
PowAssign
:
case
ParseNodeKind
:
:
Comma
:
case
ParseNodeKind
:
:
Array
:
case
ParseNodeKind
:
:
Object
:
case
ParseNodeKind
:
:
PropertyName
:
case
ParseNodeKind
:
:
Dot
:
case
ParseNodeKind
:
:
Elem
:
case
ParseNodeKind
:
:
Arguments
:
case
ParseNodeKind
:
:
Call
:
case
ParseNodeKind
:
:
Name
:
case
ParseNodeKind
:
:
PrivateName
:
case
ParseNodeKind
:
:
TemplateString
:
case
ParseNodeKind
:
:
TemplateStringList
:
case
ParseNodeKind
:
:
TaggedTemplate
:
case
ParseNodeKind
:
:
CallSiteObj
:
case
ParseNodeKind
:
:
String
:
case
ParseNodeKind
:
:
RegExp
:
case
ParseNodeKind
:
:
True
:
case
ParseNodeKind
:
:
False
:
case
ParseNodeKind
:
:
Null
:
case
ParseNodeKind
:
:
RawUndefined
:
case
ParseNodeKind
:
:
This
:
case
ParseNodeKind
:
:
Elision
:
case
ParseNodeKind
:
:
Number
:
#
ifdef
ENABLE_BIGINT
case
ParseNodeKind
:
:
BigInt
:
#
endif
case
ParseNodeKind
:
:
New
:
case
ParseNodeKind
:
:
Generator
:
case
ParseNodeKind
:
:
ParamsBody
:
case
ParseNodeKind
:
:
Catch
:
case
ParseNodeKind
:
:
ForIn
:
case
ParseNodeKind
:
:
ForOf
:
case
ParseNodeKind
:
:
ForHead
:
case
ParseNodeKind
:
:
ClassMethod
:
case
ParseNodeKind
:
:
ClassField
:
case
ParseNodeKind
:
:
ClassMemberList
:
case
ParseNodeKind
:
:
ClassNames
:
case
ParseNodeKind
:
:
NewTarget
:
case
ParseNodeKind
:
:
ImportMeta
:
case
ParseNodeKind
:
:
PosHolder
:
case
ParseNodeKind
:
:
SuperCall
:
case
ParseNodeKind
:
:
SuperBase
:
case
ParseNodeKind
:
:
SetThis
:
MOZ_CRASH
(
"
ContainsHoistedDeclaration
should
have
indicated
false
on
"
"
some
parent
node
without
recurring
to
test
this
node
"
)
;
case
ParseNodeKind
:
:
Pipeline
:
MOZ_ASSERT
(
node
-
>
is
<
ListNode
>
(
)
)
;
*
result
=
false
;
return
true
;
case
ParseNodeKind
:
:
Limit
:
MOZ_CRASH
(
"
unexpected
ParseNodeKind
:
:
Limit
in
node
"
)
;
}
MOZ_CRASH
(
"
invalid
node
kind
"
)
;
}
static
bool
FoldType
(
JSContext
*
cx
ParseNode
*
pn
ParseNodeKind
kind
)
{
if
(
!
pn
-
>
isKind
(
kind
)
)
{
switch
(
kind
)
{
case
ParseNodeKind
:
:
Number
:
if
(
pn
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
{
double
d
;
if
(
!
StringToNumber
(
cx
pn
-
>
as
<
NameNode
>
(
)
.
atom
(
)
&
d
)
)
{
return
false
;
}
pn
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
pn
-
>
setOp
(
JSOP_DOUBLE
)
;
pn
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
d
)
;
pn
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
}
break
;
case
ParseNodeKind
:
:
String
:
if
(
pn
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
JSAtom
*
atom
=
NumberToAtom
(
cx
pn
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
)
;
if
(
!
atom
)
{
return
false
;
}
pn
-
>
setKind
(
ParseNodeKind
:
:
String
)
;
pn
-
>
setOp
(
JSOP_STRING
)
;
pn
-
>
as
<
NameNode
>
(
)
.
setAtom
(
atom
)
;
pn
-
>
as
<
NameNode
>
(
)
.
setInitializer
(
nullptr
)
;
}
break
;
default
:
MOZ_CRASH
(
"
Invalid
type
in
constant
folding
FoldType
"
)
;
}
}
return
true
;
}
static
bool
IsEffectless
(
ParseNode
*
node
)
{
return
node
-
>
isKind
(
ParseNodeKind
:
:
True
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
False
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
String
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
TemplateString
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Number
)
|
|
#
ifdef
ENABLE_BIGINT
node
-
>
isKind
(
ParseNodeKind
:
:
BigInt
)
|
|
#
endif
node
-
>
isKind
(
ParseNodeKind
:
:
Null
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
RawUndefined
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Function
)
;
}
enum
Truthiness
{
Truthy
Falsy
Unknown
}
;
static
Truthiness
Boolish
(
ParseNode
*
pn
)
{
switch
(
pn
-
>
getKind
(
)
)
{
case
ParseNodeKind
:
:
Number
:
return
(
pn
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
!
=
0
&
&
!
IsNaN
(
pn
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
)
)
?
Truthy
:
Falsy
;
#
ifdef
ENABLE_BIGINT
case
ParseNodeKind
:
:
BigInt
:
return
(
pn
-
>
as
<
BigIntLiteral
>
(
)
.
box
(
)
-
>
value
(
)
-
>
toBoolean
(
)
)
?
Truthy
:
Falsy
;
#
endif
case
ParseNodeKind
:
:
String
:
case
ParseNodeKind
:
:
TemplateString
:
return
(
pn
-
>
as
<
NameNode
>
(
)
.
atom
(
)
-
>
length
(
)
>
0
)
?
Truthy
:
Falsy
;
case
ParseNodeKind
:
:
True
:
case
ParseNodeKind
:
:
Function
:
return
Truthy
;
case
ParseNodeKind
:
:
False
:
case
ParseNodeKind
:
:
Null
:
case
ParseNodeKind
:
:
RawUndefined
:
return
Falsy
;
case
ParseNodeKind
:
:
Void
:
{
do
{
pn
=
pn
-
>
as
<
UnaryNode
>
(
)
.
kid
(
)
;
}
while
(
pn
-
>
isKind
(
ParseNodeKind
:
:
Void
)
)
;
return
IsEffectless
(
pn
)
?
Falsy
:
Unknown
;
}
default
:
return
Unknown
;
}
}
static
bool
SimplifyCondition
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
ParseNode
*
node
=
*
nodePtr
;
Truthiness
t
=
Boolish
(
node
)
;
if
(
t
!
=
Unknown
)
{
if
(
t
=
=
Truthy
)
{
node
-
>
setKind
(
ParseNodeKind
:
:
True
)
;
node
-
>
setOp
(
JSOP_TRUE
)
;
}
else
{
node
-
>
setKind
(
ParseNodeKind
:
:
False
)
;
node
-
>
setOp
(
JSOP_FALSE
)
;
}
}
return
true
;
}
static
bool
FoldTypeOfExpr
(
JSContext
*
cx
UnaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
TypeOfExpr
)
)
;
ParseNode
*
expr
=
node
-
>
kid
(
)
;
RootedPropertyName
result
(
cx
)
;
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
String
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
TemplateString
)
)
{
result
=
cx
-
>
names
(
)
.
string
;
}
else
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
result
=
cx
-
>
names
(
)
.
number
;
}
#
ifdef
ENABLE_BIGINT
else
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
BigInt
)
)
{
result
=
cx
-
>
names
(
)
.
bigint
;
}
#
endif
else
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Null
)
)
{
result
=
cx
-
>
names
(
)
.
object
;
}
else
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
True
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
False
)
)
{
result
=
cx
-
>
names
(
)
.
boolean
;
}
else
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Function
)
)
{
result
=
cx
-
>
names
(
)
.
function
;
}
if
(
result
)
{
node
-
>
setKind
(
ParseNodeKind
:
:
String
)
;
node
-
>
setOp
(
JSOP_NOP
)
;
node
-
>
as
<
NameNode
>
(
)
.
setAtom
(
result
)
;
node
-
>
as
<
NameNode
>
(
)
.
setInitializer
(
nullptr
)
;
}
return
true
;
}
static
bool
FoldDeleteExpr
(
JSContext
*
cx
UnaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
DeleteExpr
)
)
;
ParseNode
*
expr
=
node
-
>
kid
(
)
;
if
(
IsEffectless
(
expr
)
)
{
node
-
>
setKind
(
ParseNodeKind
:
:
True
)
;
node
-
>
setOp
(
JSOP_TRUE
)
;
}
return
true
;
}
static
bool
FoldDeleteElement
(
JSContext
*
cx
UnaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
DeleteElem
)
)
;
ParseNode
*
expr
=
node
-
>
kid
(
)
;
MOZ_ASSERT
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Elem
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
Dot
)
)
;
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Dot
)
)
{
node
-
>
setKind
(
ParseNodeKind
:
:
DeleteProp
)
;
}
return
true
;
}
static
bool
FoldNot
(
JSContext
*
cx
UnaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Not
)
)
;
if
(
!
SimplifyCondition
(
cx
node
-
>
unsafeKidReference
(
)
)
)
{
return
false
;
}
ParseNode
*
expr
=
node
-
>
kid
(
)
;
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
True
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
False
)
)
{
bool
newval
=
!
expr
-
>
isKind
(
ParseNodeKind
:
:
True
)
;
node
-
>
setKind
(
newval
?
ParseNodeKind
:
:
True
:
ParseNodeKind
:
:
False
)
;
node
-
>
setOp
(
newval
?
JSOP_TRUE
:
JSOP_FALSE
)
;
}
return
true
;
}
static
bool
FoldUnaryArithmetic
(
JSContext
*
cx
UnaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
BitNot
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Pos
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Neg
)
"
need
a
different
method
for
this
node
kind
"
)
;
ParseNode
*
expr
=
node
-
>
kid
(
)
;
if
(
expr
-
>
isKind
(
ParseNodeKind
:
:
Number
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
True
)
|
|
expr
-
>
isKind
(
ParseNodeKind
:
:
False
)
)
{
double
d
=
expr
-
>
isKind
(
ParseNodeKind
:
:
Number
)
?
expr
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
:
double
(
expr
-
>
isKind
(
ParseNodeKind
:
:
True
)
)
;
if
(
node
-
>
isKind
(
ParseNodeKind
:
:
BitNot
)
)
{
d
=
~
ToInt32
(
d
)
;
}
else
if
(
node
-
>
isKind
(
ParseNodeKind
:
:
Neg
)
)
{
d
=
-
d
;
}
else
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Pos
)
)
;
}
node
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
node
-
>
setOp
(
JSOP_DOUBLE
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
d
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
}
return
true
;
}
static
bool
FoldAndOr
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
ListNode
*
node
=
&
(
*
nodePtr
)
-
>
as
<
ListNode
>
(
)
;
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
And
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Or
)
)
;
bool
isOrNode
=
node
-
>
isKind
(
ParseNodeKind
:
:
Or
)
;
ParseNode
*
*
elem
=
node
-
>
unsafeHeadReference
(
)
;
do
{
Truthiness
t
=
Boolish
(
*
elem
)
;
if
(
t
=
=
Unknown
)
{
elem
=
&
(
*
elem
)
-
>
pn_next
;
continue
;
}
if
(
(
t
=
=
Truthy
)
=
=
isOrNode
)
{
for
(
ParseNode
*
next
=
(
*
elem
)
-
>
pn_next
;
next
;
next
=
next
-
>
pn_next
)
{
node
-
>
unsafeDecrementCount
(
)
;
}
(
*
elem
)
-
>
pn_next
=
nullptr
;
elem
=
&
(
*
elem
)
-
>
pn_next
;
break
;
}
MOZ_ASSERT
(
(
t
=
=
Truthy
)
=
=
!
isOrNode
)
;
if
(
(
*
elem
)
-
>
pn_next
)
{
ParseNode
*
elt
=
*
elem
;
*
elem
=
elt
-
>
pn_next
;
node
-
>
unsafeDecrementCount
(
)
;
}
else
{
elem
=
&
(
*
elem
)
-
>
pn_next
;
break
;
}
}
while
(
*
elem
)
;
node
-
>
unsafeReplaceTail
(
elem
)
;
if
(
node
-
>
count
(
)
=
=
1
)
{
ParseNode
*
first
=
node
-
>
head
(
)
;
ReplaceNode
(
nodePtr
first
)
;
}
return
true
;
}
static
bool
Fold
(
JSContext
*
cx
ParseNode
*
*
pnp
)
;
static
bool
FoldConditional
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
ParseNode
*
*
nextNode
=
nodePtr
;
do
{
nodePtr
=
nextNode
;
nextNode
=
nullptr
;
TernaryNode
*
node
=
&
(
*
nodePtr
)
-
>
as
<
TernaryNode
>
(
)
;
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Conditional
)
)
;
ParseNode
*
*
expr
=
node
-
>
unsafeKid1Reference
(
)
;
if
(
!
Fold
(
cx
expr
)
)
{
return
false
;
}
if
(
!
SimplifyCondition
(
cx
expr
)
)
{
return
false
;
}
ParseNode
*
*
ifTruthy
=
node
-
>
unsafeKid2Reference
(
)
;
if
(
!
Fold
(
cx
ifTruthy
)
)
{
return
false
;
}
ParseNode
*
*
ifFalsy
=
node
-
>
unsafeKid3Reference
(
)
;
if
(
(
*
ifFalsy
)
-
>
isKind
(
ParseNodeKind
:
:
Conditional
)
)
{
MOZ_ASSERT
(
(
*
ifFalsy
)
-
>
is
<
TernaryNode
>
(
)
)
;
nextNode
=
ifFalsy
;
}
else
{
if
(
!
Fold
(
cx
ifFalsy
)
)
{
return
false
;
}
}
Truthiness
t
=
Boolish
(
*
expr
)
;
if
(
t
=
=
Unknown
)
{
continue
;
}
ParseNode
*
replacement
=
t
=
=
Truthy
?
*
ifTruthy
:
*
ifFalsy
;
if
(
nextNode
)
{
nextNode
=
(
*
nextNode
=
=
replacement
)
?
nodePtr
:
nullptr
;
}
ReplaceNode
(
nodePtr
replacement
)
;
}
while
(
nextNode
)
;
return
true
;
}
static
bool
FoldIf
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
ParseNode
*
*
nextNode
=
nodePtr
;
do
{
nodePtr
=
nextNode
;
nextNode
=
nullptr
;
TernaryNode
*
node
=
&
(
*
nodePtr
)
-
>
as
<
TernaryNode
>
(
)
;
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
If
)
)
;
ParseNode
*
*
expr
=
node
-
>
unsafeKid1Reference
(
)
;
if
(
!
Fold
(
cx
expr
)
)
{
return
false
;
}
if
(
!
SimplifyCondition
(
cx
expr
)
)
{
return
false
;
}
ParseNode
*
*
consequent
=
node
-
>
unsafeKid2Reference
(
)
;
if
(
!
Fold
(
cx
consequent
)
)
{
return
false
;
}
ParseNode
*
*
alternative
=
node
-
>
unsafeKid3Reference
(
)
;
if
(
*
alternative
)
{
if
(
(
*
alternative
)
-
>
isKind
(
ParseNodeKind
:
:
If
)
)
{
MOZ_ASSERT
(
(
*
alternative
)
-
>
is
<
TernaryNode
>
(
)
)
;
nextNode
=
alternative
;
}
else
{
if
(
!
Fold
(
cx
alternative
)
)
{
return
false
;
}
}
}
Truthiness
t
=
Boolish
(
*
expr
)
;
if
(
t
=
=
Unknown
)
{
continue
;
}
ParseNode
*
replacement
;
ParseNode
*
discarded
;
if
(
t
=
=
Truthy
)
{
replacement
=
*
consequent
;
discarded
=
*
alternative
;
}
else
{
replacement
=
*
alternative
;
discarded
=
*
consequent
;
}
bool
performReplacement
=
true
;
if
(
discarded
)
{
bool
containsHoistedDecls
;
if
(
!
ContainsHoistedDeclaration
(
cx
discarded
&
containsHoistedDecls
)
)
{
return
false
;
}
performReplacement
=
!
containsHoistedDecls
;
}
if
(
!
performReplacement
)
{
continue
;
}
if
(
!
replacement
)
{
node
-
>
setKind
(
ParseNodeKind
:
:
StatementList
)
;
node
-
>
as
<
ListNode
>
(
)
.
makeEmpty
(
)
;
}
else
{
if
(
nextNode
)
{
nextNode
=
(
*
nextNode
=
=
replacement
)
?
nodePtr
:
nullptr
;
}
ReplaceNode
(
nodePtr
replacement
)
;
}
}
while
(
nextNode
)
;
return
true
;
}
static
double
ComputeBinary
(
ParseNodeKind
kind
double
left
double
right
)
{
if
(
kind
=
=
ParseNodeKind
:
:
Add
)
{
return
left
+
right
;
}
if
(
kind
=
=
ParseNodeKind
:
:
Sub
)
{
return
left
-
right
;
}
if
(
kind
=
=
ParseNodeKind
:
:
Star
)
{
return
left
*
right
;
}
if
(
kind
=
=
ParseNodeKind
:
:
Mod
)
{
return
NumberMod
(
left
right
)
;
}
if
(
kind
=
=
ParseNodeKind
:
:
Ursh
)
{
return
ToUint32
(
left
)
>
>
(
ToUint32
(
right
)
&
31
)
;
}
if
(
kind
=
=
ParseNodeKind
:
:
Div
)
{
return
NumberDiv
(
left
right
)
;
}
MOZ_ASSERT
(
kind
=
=
ParseNodeKind
:
:
Lsh
|
|
kind
=
=
ParseNodeKind
:
:
Rsh
)
;
int32_t
i
=
ToInt32
(
left
)
;
uint32_t
j
=
ToUint32
(
right
)
&
31
;
return
int32_t
(
(
kind
=
=
ParseNodeKind
:
:
Lsh
)
?
uint32_t
(
i
)
<
<
j
:
i
>
>
j
)
;
}
static
bool
FoldBinaryArithmetic
(
JSContext
*
cx
ListNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Sub
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Star
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Lsh
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Rsh
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Ursh
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Div
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
Mod
)
)
;
MOZ_ASSERT
(
node
-
>
count
(
)
>
=
2
)
;
ParseNode
*
*
listp
=
node
-
>
unsafeHeadReference
(
)
;
for
(
;
*
listp
;
listp
=
&
(
*
listp
)
-
>
pn_next
)
{
if
(
!
FoldType
(
cx
*
listp
ParseNodeKind
:
:
Number
)
)
{
return
false
;
}
}
node
-
>
unsafeReplaceTail
(
listp
)
;
ParseNode
*
elem
=
node
-
>
head
(
)
;
ParseNode
*
next
=
elem
-
>
pn_next
;
if
(
elem
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
ParseNodeKind
kind
=
node
-
>
getKind
(
)
;
while
(
true
)
{
if
(
!
next
|
|
!
next
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
break
;
}
double
d
=
ComputeBinary
(
kind
elem
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
next
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
)
;
next
=
next
-
>
pn_next
;
elem
-
>
pn_next
=
next
;
elem
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
elem
-
>
setOp
(
JSOP_DOUBLE
)
;
elem
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
d
)
;
elem
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
node
-
>
unsafeDecrementCount
(
)
;
}
if
(
node
-
>
count
(
)
=
=
1
)
{
MOZ_ASSERT
(
node
-
>
head
(
)
=
=
elem
)
;
MOZ_ASSERT
(
elem
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
;
double
d
=
elem
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
;
node
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
node
-
>
setOp
(
JSOP_DOUBLE
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
d
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
}
}
return
true
;
}
static
bool
FoldExponentiation
(
JSContext
*
cx
ListNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Pow
)
)
;
MOZ_ASSERT
(
node
-
>
count
(
)
>
=
2
)
;
ParseNode
*
*
listp
=
node
-
>
unsafeHeadReference
(
)
;
for
(
;
*
listp
;
listp
=
&
(
*
listp
)
-
>
pn_next
)
{
if
(
!
FoldType
(
cx
*
listp
ParseNodeKind
:
:
Number
)
)
{
return
false
;
}
}
node
-
>
unsafeReplaceTail
(
listp
)
;
if
(
node
-
>
count
(
)
>
2
)
{
return
true
;
}
ParseNode
*
base
=
node
-
>
head
(
)
;
ParseNode
*
exponent
=
base
-
>
pn_next
;
if
(
!
base
-
>
isKind
(
ParseNodeKind
:
:
Number
)
|
|
!
exponent
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
return
true
;
}
double
d1
=
base
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
;
double
d2
=
exponent
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
;
node
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
node
-
>
setOp
(
JSOP_DOUBLE
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
ecmaPow
(
d1
d2
)
)
;
node
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
return
true
;
}
static
bool
FoldElement
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
PropertyByValue
*
elem
=
&
(
*
nodePtr
)
-
>
as
<
PropertyByValue
>
(
)
;
ParseNode
*
expr
=
&
elem
-
>
expression
(
)
;
ParseNode
*
key
=
&
elem
-
>
key
(
)
;
PropertyName
*
name
=
nullptr
;
if
(
key
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
{
JSAtom
*
atom
=
key
-
>
as
<
NameNode
>
(
)
.
atom
(
)
;
uint32_t
index
;
if
(
atom
-
>
isIndex
(
&
index
)
)
{
key
-
>
setKind
(
ParseNodeKind
:
:
Number
)
;
key
-
>
setOp
(
JSOP_DOUBLE
)
;
key
-
>
as
<
NumericLiteral
>
(
)
.
setValue
(
index
)
;
key
-
>
as
<
NumericLiteral
>
(
)
.
setDecimalPoint
(
NoDecimal
)
;
}
else
{
name
=
atom
-
>
asPropertyName
(
)
;
}
}
else
if
(
key
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
double
number
=
key
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
;
if
(
number
!
=
ToUint32
(
number
)
)
{
JSAtom
*
atom
=
NumberToAtom
(
cx
number
)
;
if
(
!
atom
)
{
return
false
;
}
name
=
atom
-
>
asPropertyName
(
)
;
}
}
if
(
!
name
)
{
return
true
;
}
key
-
>
setKind
(
ParseNodeKind
:
:
PropertyName
)
;
key
-
>
setOp
(
JSOP_NOP
)
;
key
-
>
as
<
NameNode
>
(
)
.
setAtom
(
name
)
;
key
-
>
as
<
NameNode
>
(
)
.
setInitializer
(
nullptr
)
;
(
*
nodePtr
)
-
>
setKind
(
ParseNodeKind
:
:
Dot
)
;
(
*
nodePtr
)
-
>
setOp
(
JSOP_NOP
)
;
*
(
*
nodePtr
)
-
>
as
<
PropertyAccess
>
(
)
.
unsafeLeftReference
(
)
=
expr
;
*
(
*
nodePtr
)
-
>
as
<
PropertyAccess
>
(
)
.
unsafeRightReference
(
)
=
key
;
(
*
nodePtr
)
-
>
as
<
PropertyAccess
>
(
)
.
setInParens
(
elem
-
>
isInParens
(
)
)
;
return
true
;
}
static
bool
FoldAdd
(
JSContext
*
cx
ParseNode
*
*
nodePtr
)
{
ListNode
*
node
=
&
(
*
nodePtr
)
-
>
as
<
ListNode
>
(
)
;
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Add
)
)
;
MOZ_ASSERT
(
node
-
>
count
(
)
>
=
2
)
;
ParseNode
*
current
=
node
-
>
head
(
)
;
ParseNode
*
next
=
current
-
>
pn_next
;
if
(
current
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
do
{
if
(
!
next
-
>
isKind
(
ParseNodeKind
:
:
Number
)
)
{
break
;
}
NumericLiteral
*
num
=
&
current
-
>
as
<
NumericLiteral
>
(
)
;
num
-
>
setValue
(
num
-
>
value
(
)
+
next
-
>
as
<
NumericLiteral
>
(
)
.
value
(
)
)
;
current
-
>
pn_next
=
next
-
>
pn_next
;
next
=
current
-
>
pn_next
;
node
-
>
unsafeDecrementCount
(
)
;
}
while
(
next
)
;
}
do
{
if
(
!
next
)
{
break
;
}
if
(
current
-
>
isKind
(
ParseNodeKind
:
:
Number
)
&
&
next
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
{
if
(
!
FoldType
(
cx
current
ParseNodeKind
:
:
String
)
)
{
return
false
;
}
next
=
current
-
>
pn_next
;
}
do
{
if
(
current
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
{
break
;
}
current
=
next
;
next
=
next
-
>
pn_next
;
}
while
(
next
)
;
if
(
!
next
)
{
break
;
}
RootedString
combination
(
cx
)
;
RootedString
tmp
(
cx
)
;
do
{
MOZ_ASSERT
(
current
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
;
combination
=
current
-
>
as
<
NameNode
>
(
)
.
atom
(
)
;
do
{
if
(
!
FoldType
(
cx
next
ParseNodeKind
:
:
String
)
)
{
return
false
;
}
if
(
!
next
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
{
break
;
}
tmp
=
next
-
>
as
<
NameNode
>
(
)
.
atom
(
)
;
combination
=
ConcatStrings
<
CanGC
>
(
cx
combination
tmp
)
;
if
(
!
combination
)
{
return
false
;
}
next
=
next
-
>
pn_next
;
current
-
>
pn_next
=
next
;
node
-
>
unsafeDecrementCount
(
)
;
}
while
(
next
)
;
MOZ_ASSERT
(
current
-
>
isKind
(
ParseNodeKind
:
:
String
)
)
;
combination
=
AtomizeString
(
cx
combination
)
;
if
(
!
combination
)
{
return
false
;
}
current
-
>
as
<
NameNode
>
(
)
.
setAtom
(
&
combination
-
>
asAtom
(
)
)
;
if
(
!
next
)
{
break
;
}
current
=
next
;
next
=
current
-
>
pn_next
;
if
(
!
next
)
{
break
;
}
do
{
current
=
next
;
next
=
current
-
>
pn_next
;
if
(
!
FoldType
(
cx
current
ParseNodeKind
:
:
String
)
)
{
return
false
;
}
next
=
current
-
>
pn_next
;
}
while
(
!
current
-
>
isKind
(
ParseNodeKind
:
:
String
)
&
&
next
)
;
}
while
(
next
)
;
}
while
(
false
)
;
MOZ_ASSERT
(
!
next
"
must
have
considered
all
nodes
here
"
)
;
MOZ_ASSERT
(
!
current
-
>
pn_next
"
current
node
must
be
the
last
node
"
)
;
node
-
>
unsafeReplaceTail
(
&
current
-
>
pn_next
)
;
if
(
node
-
>
count
(
)
=
=
1
)
{
ReplaceNode
(
nodePtr
current
)
;
}
return
true
;
}
class
FoldVisitor
:
public
ParseNodeVisitor
<
FoldVisitor
>
{
using
Base
=
ParseNodeVisitor
;
public
:
explicit
FoldVisitor
(
JSContext
*
cx
)
:
ParseNodeVisitor
(
cx
)
{
}
bool
visitElem
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitElem
(
pn
)
&
&
FoldElement
(
cx
&
pn
)
;
}
bool
visitTypeOfExpr
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitTypeOfExpr
(
pn
)
&
&
FoldTypeOfExpr
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitDeleteExpr
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitDeleteExpr
(
pn
)
&
&
FoldDeleteExpr
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitDeleteElem
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitDeleteElem
(
pn
)
&
&
FoldDeleteElement
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitNot
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitNot
(
pn
)
&
&
FoldNot
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitBitNot
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitBitNot
(
pn
)
&
&
FoldUnaryArithmetic
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitPos
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitPos
(
pn
)
&
&
FoldUnaryArithmetic
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitNeg
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitNeg
(
pn
)
&
&
FoldUnaryArithmetic
(
cx
&
pn
-
>
as
<
UnaryNode
>
(
)
)
;
}
bool
visitPow
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitPow
(
pn
)
&
&
FoldExponentiation
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitStar
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitStar
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitDiv
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitDiv
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitMod
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitMod
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitAdd
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitAdd
(
pn
)
&
&
FoldAdd
(
cx
&
pn
)
;
}
bool
visitSub
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitSub
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitLsh
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitLsh
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitRsh
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitRsh
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitUrsh
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitUrsh
(
pn
)
&
&
FoldBinaryArithmetic
(
cx
&
pn
-
>
as
<
ListNode
>
(
)
)
;
}
bool
visitAnd
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitAnd
(
pn
)
&
&
FoldAndOr
(
cx
&
pn
)
;
}
bool
visitOr
(
ParseNode
*
&
pn
)
{
return
Base
:
:
visitOr
(
pn
)
&
&
FoldAndOr
(
cx
&
pn
)
;
}
bool
visitConditional
(
ParseNode
*
&
pn
)
{
return
FoldConditional
(
cx
&
pn
)
;
}
private
:
bool
internalVisitCall
(
BinaryNode
*
node
)
{
MOZ_ASSERT
(
node
-
>
isKind
(
ParseNodeKind
:
:
Call
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
SuperCall
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
New
)
|
|
node
-
>
isKind
(
ParseNodeKind
:
:
TaggedTemplate
)
)
;
ParseNode
*
callee
=
node
-
>
left
(
)
;
if
(
node
-
>
isKind
(
ParseNodeKind
:
:
New
)
|
|
!
callee
-
>
isInParens
(
)
|
|
callee
-
>
isKind
(
ParseNodeKind
:
:
Function
)
)
{
if
(
!
visit
(
*
node
-
>
unsafeLeftReference
(
)
)
)
{
return
false
;
}
}
if
(
!
visit
(
*
node
-
>
unsafeRightReference
(
)
)
)
{
return
false
;
}
return
true
;
}
public
:
bool
visitCall
(
ParseNode
*
&
pn
)
{
return
internalVisitCall
(
&
pn
-
>
as
<
BinaryNode
>
(
)
)
;
}
bool
visitNew
(
ParseNode
*
&
pn
)
{
return
internalVisitCall
(
&
pn
-
>
as
<
BinaryNode
>
(
)
)
;
}
bool
visitSuperCall
(
ParseNode
*
&
pn
)
{
return
internalVisitCall
(
&
pn
-
>
as
<
BinaryNode
>
(
)
)
;
}
bool
visitTaggedTemplate
(
ParseNode
*
&
pn
)
{
return
internalVisitCall
(
&
pn
-
>
as
<
BinaryNode
>
(
)
)
;
}
bool
visitIf
(
ParseNode
*
&
pn
)
{
return
FoldIf
(
cx
&
pn
)
;
}
bool
visitFor
(
ParseNode
*
&
pn
)
{
if
(
!
Base
:
:
visitFor
(
pn
)
)
{
return
false
;
}
ForNode
&
stmt
=
pn
-
>
as
<
ForNode
>
(
)
;
if
(
stmt
.
left
(
)
-
>
isKind
(
ParseNodeKind
:
:
ForHead
)
)
{
TernaryNode
&
head
=
stmt
.
left
(
)
-
>
as
<
TernaryNode
>
(
)
;
ParseNode
*
*
test
=
head
.
unsafeKid2Reference
(
)
;
if
(
*
test
)
{
if
(
!
SimplifyCondition
(
cx
test
)
)
{
return
false
;
}
if
(
(
*
test
)
-
>
isKind
(
ParseNodeKind
:
:
True
)
)
{
*
test
=
nullptr
;
}
}
}
return
true
;
}
bool
visitWhile
(
ParseNode
*
&
pn
)
{
BinaryNode
&
node
=
pn
-
>
as
<
BinaryNode
>
(
)
;
return
Base
:
:
visitWhile
(
pn
)
&
&
SimplifyCondition
(
cx
node
.
unsafeLeftReference
(
)
)
;
}
bool
visitDoWhile
(
ParseNode
*
&
pn
)
{
BinaryNode
&
node
=
pn
-
>
as
<
BinaryNode
>
(
)
;
return
Base
:
:
visitDoWhile
(
pn
)
&
&
SimplifyCondition
(
cx
node
.
unsafeRightReference
(
)
)
;
}
bool
visitFunction
(
ParseNode
*
&
pn
)
{
CodeNode
&
node
=
pn
-
>
as
<
CodeNode
>
(
)
;
if
(
node
.
funbox
(
)
-
>
useAsmOrInsideUseAsm
(
)
)
{
return
true
;
}
return
Base
:
:
visitFunction
(
pn
)
;
}
}
;
bool
Fold
(
JSContext
*
cx
ParseNode
*
*
pnp
)
{
FoldVisitor
visitor
(
cx
)
;
return
visitor
.
visit
(
*
pnp
)
;
}
bool
frontend
:
:
FoldConstants
(
JSContext
*
cx
ParseNode
*
*
pnp
PerHandlerParser
<
FullParseHandler
>
*
parser
)
{
if
(
parser
-
>
pc
-
>
useAsmOrInsideUseAsm
(
)
)
{
return
true
;
}
AutoTraceLog
traceLog
(
TraceLoggerForCurrentThread
(
cx
)
TraceLogger_BytecodeFoldConstants
)
;
return
Fold
(
cx
pnp
)
;
}
