#
ifndef
frontend_EitherParser_h
#
define
frontend_EitherParser_h
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
frontend
/
Parser
.
h
"
#
include
"
js
/
ColumnNumber
.
h
"
namespace
js
:
:
frontend
{
class
EitherParser
final
{
mozilla
:
:
Variant
<
Parser
<
FullParseHandler
char16_t
>
*
const
Parser
<
FullParseHandler
mozilla
:
:
Utf8Unit
>
*
const
>
parser
;
public
:
template
<
class
Parser
>
explicit
EitherParser
(
Parser
*
parser
)
:
parser
(
parser
)
{
}
const
ErrorReporter
&
errorReporter
(
)
const
{
return
parser
.
match
(
[
]
(
auto
*
parser
)
-
>
const
frontend
:
:
ErrorReporter
&
{
return
parser
-
>
tokenStream
;
}
)
;
}
void
computeLineAndColumn
(
uint32_t
offset
uint32_t
*
line
JS
:
:
LimitedColumnNumberZeroOrigin
*
column
)
const
{
return
parser
.
match
(
[
offset
line
column
]
(
auto
*
parser
)
-
>
void
{
parser
-
>
tokenStream
.
computeLineAndColumn
(
offset
line
column
)
;
}
)
;
}
ParserAtomsTable
&
parserAtoms
(
)
{
auto
&
base
=
parser
.
match
(
[
]
(
auto
*
parser
)
-
>
frontend
:
:
ParserSharedBase
&
{
return
*
parser
;
}
)
;
return
base
.
parserAtoms
(
)
;
}
}
;
}
#
endif
