#
ifndef
frontend_WhileEmitter_h
#
define
frontend_WhileEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
BytecodeControlStructures
.
h
"
#
include
"
frontend
/
TDZCheckCache
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
WhileEmitter
{
BytecodeEmitter
*
bce_
;
unsigned
noteIndex_
=
0
;
mozilla
:
:
Maybe
<
LoopControl
>
loopInfo_
;
mozilla
:
:
Maybe
<
TDZCheckCache
>
tdzCacheForBody_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Cond
Body
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
explicit
WhileEmitter
(
BytecodeEmitter
*
bce
)
;
MOZ_MUST_USE
bool
emitCond
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
whilePos
const
mozilla
:
:
Maybe
<
uint32_t
>
&
condPos
const
mozilla
:
:
Maybe
<
uint32_t
>
&
endPos
)
;
MOZ_MUST_USE
bool
emitBody
(
)
;
MOZ_MUST_USE
bool
emitEnd
(
)
;
}
;
}
}
#
endif
