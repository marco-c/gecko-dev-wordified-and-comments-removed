#
ifndef
frontend_ErrorReporter_h
#
define
frontend_ErrorReporter_h
#
include
<
stdarg
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
UniquePtr
.
h
"
class
JSErrorNotes
;
namespace
js
{
namespace
frontend
{
class
ErrorReporter
{
public
:
virtual
const
JS
:
:
ReadOnlyCompileOptions
&
options
(
)
const
=
0
;
virtual
void
lineAndColumnAt
(
size_t
offset
uint32_t
*
line
uint32_t
*
column
)
const
=
0
;
virtual
void
currentLineAndColumn
(
uint32_t
*
line
uint32_t
*
column
)
const
=
0
;
virtual
bool
isOnThisLine
(
size_t
offset
uint32_t
lineNum
bool
*
onThisLine
)
const
=
0
;
virtual
uint32_t
lineAt
(
size_t
offset
)
const
=
0
;
virtual
uint32_t
columnAt
(
size_t
offset
)
const
=
0
;
virtual
bool
hasTokenizationStarted
(
)
const
=
0
;
virtual
void
reportErrorNoOffsetVA
(
unsigned
errorNumber
va_list
*
args
)
=
0
;
virtual
const
char
*
getFilename
(
)
const
=
0
;
void
reportErrorNoOffset
(
unsigned
errorNumber
.
.
.
)
{
va_list
args
;
va_start
(
args
errorNumber
)
;
reportErrorNoOffsetVA
(
errorNumber
&
args
)
;
va_end
(
args
)
;
}
virtual
void
errorAtVA
(
uint32_t
offset
unsigned
errorNumber
va_list
*
args
)
=
0
;
virtual
bool
reportExtraWarningErrorNumberVA
(
UniquePtr
<
JSErrorNotes
>
notes
uint32_t
offset
unsigned
errorNumber
va_list
*
args
)
=
0
;
}
;
}
}
#
endif
