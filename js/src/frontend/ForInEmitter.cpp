#
include
"
frontend
/
ForInEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
EmitterScope
.
h
"
#
include
"
frontend
/
SourceNotes
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
#
include
"
vm
/
Scope
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
using
mozilla
:
:
Maybe
;
using
mozilla
:
:
Nothing
;
ForInEmitter
:
:
ForInEmitter
(
BytecodeEmitter
*
bce
const
EmitterScope
*
headLexicalEmitterScope
)
:
bce_
(
bce
)
headLexicalEmitterScope_
(
headLexicalEmitterScope
)
{
}
bool
ForInEmitter
:
:
emitIterated
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
)
;
tdzCacheForIteratedValue_
.
emplace
(
bce_
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Iterated
;
#
endif
return
true
;
}
bool
ForInEmitter
:
:
emitInitialize
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Iterated
)
;
tdzCacheForIteratedValue_
.
reset
(
)
;
if
(
!
bce_
-
>
emit1
(
JSOP_ITER
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_UNDEFINED
)
)
return
false
;
loopInfo_
.
emplace
(
bce_
StatementKind
:
:
ForInLoop
)
;
if
(
!
bce_
-
>
newSrcNote
(
SRC_FOR_IN
&
noteIndex_
)
)
return
false
;
if
(
!
loopInfo_
-
>
emitEntryJump
(
bce_
)
)
return
false
;
if
(
!
loopInfo_
-
>
emitLoopHead
(
bce_
Nothing
(
)
)
)
return
false
;
if
(
headLexicalEmitterScope_
)
{
MOZ_ASSERT
(
headLexicalEmitterScope_
=
=
bce_
-
>
innermostEmitterScope
(
)
)
;
MOZ_ASSERT
(
headLexicalEmitterScope_
-
>
scope
(
bce_
)
-
>
kind
(
)
=
=
ScopeKind
:
:
Lexical
)
;
if
(
headLexicalEmitterScope_
-
>
hasEnvironment
(
)
)
{
if
(
!
bce_
-
>
emit1
(
JSOP_RECREATELEXICALENV
)
)
return
false
;
}
if
(
!
headLexicalEmitterScope_
-
>
deadZoneFrameSlots
(
bce_
)
)
return
false
;
}
#
ifdef
DEBUG
loopDepth_
=
bce_
-
>
stackDepth
;
#
endif
MOZ_ASSERT
(
loopDepth_
>
=
2
)
;
if
(
!
bce_
-
>
emit1
(
JSOP_ITERNEXT
)
)
return
false
;
#
ifdef
DEBUG
state_
=
State
:
:
Initialize
;
#
endif
return
true
;
}
bool
ForInEmitter
:
:
emitBody
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Initialize
)
;
MOZ_ASSERT
(
bce_
-
>
stackDepth
=
=
loopDepth_
"
iterator
and
iterval
must
be
left
on
the
stack
"
)
;
#
ifdef
DEBUG
state_
=
State
:
:
Body
;
#
endif
return
true
;
}
bool
ForInEmitter
:
:
emitEnd
(
const
Maybe
<
uint32_t
>
&
forPos
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Body
)
;
loopInfo_
-
>
setContinueTarget
(
bce_
-
>
offset
(
)
)
;
if
(
forPos
)
{
if
(
!
bce_
-
>
updateSourceCoordNotes
(
*
forPos
)
)
return
false
;
}
if
(
!
loopInfo_
-
>
emitLoopEntry
(
bce_
Nothing
(
)
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_MOREITER
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_ISNOITER
)
)
return
false
;
if
(
!
loopInfo_
-
>
emitLoopEnd
(
bce_
JSOP_IFEQ
)
)
return
false
;
if
(
!
bce_
-
>
setSrcNoteOffset
(
noteIndex_
SrcNote
:
:
ForIn
:
:
BackJumpOffset
loopInfo_
-
>
loopEndOffsetFromEntryJump
(
)
)
)
{
return
false
;
}
if
(
!
loopInfo_
-
>
patchBreaksAndContinues
(
bce_
)
)
return
false
;
if
(
!
bce_
-
>
emit1
(
JSOP_POP
)
)
return
false
;
if
(
!
bce_
-
>
tryNoteList
.
append
(
JSTRY_FOR_IN
bce_
-
>
stackDepth
loopInfo_
-
>
headOffset
(
)
bce_
-
>
offset
(
)
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOP_ENDITER
)
)
return
false
;
loopInfo_
.
reset
(
)
;
#
ifdef
DEBUG
state_
=
State
:
:
End
;
#
endif
return
true
;
}
