#
ifndef
frontend_NameOpEmitter_h
#
define
frontend_NameOpEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
NameAnalysisTypes
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
NameOpEmitter
{
public
:
enum
class
Kind
{
Get
Call
PostIncrement
PreIncrement
PostDecrement
PreDecrement
SimpleAssignment
CompoundAssignment
Initialize
}
;
private
:
BytecodeEmitter
*
bce_
;
Kind
kind_
;
bool
emittedBindOp_
=
false
;
Handle
<
JSAtom
*
>
name_
;
uint32_t
atomIndex_
;
NameLocation
loc_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Get
IncDec
Rhs
Assignment
}
;
State
state_
=
State
:
:
Start
;
#
endif
public
:
NameOpEmitter
(
BytecodeEmitter
*
bce
Handle
<
JSAtom
*
>
name
Kind
kind
)
;
NameOpEmitter
(
BytecodeEmitter
*
bce
Handle
<
JSAtom
*
>
name
const
NameLocation
&
loc
Kind
kind
)
;
private
:
MOZ_MUST_USE
bool
isCall
(
)
const
{
return
kind_
=
=
Kind
:
:
Call
;
}
MOZ_MUST_USE
bool
isSimpleAssignment
(
)
const
{
return
kind_
=
=
Kind
:
:
SimpleAssignment
;
}
MOZ_MUST_USE
bool
isCompoundAssignment
(
)
const
{
return
kind_
=
=
Kind
:
:
CompoundAssignment
;
}
MOZ_MUST_USE
bool
isIncDec
(
)
const
{
return
isPostIncDec
(
)
|
|
isPreIncDec
(
)
;
}
MOZ_MUST_USE
bool
isPostIncDec
(
)
const
{
return
kind_
=
=
Kind
:
:
PostIncrement
|
|
kind_
=
=
Kind
:
:
PostDecrement
;
}
MOZ_MUST_USE
bool
isPreIncDec
(
)
const
{
return
kind_
=
=
Kind
:
:
PreIncrement
|
|
kind_
=
=
Kind
:
:
PreDecrement
;
}
MOZ_MUST_USE
bool
isInc
(
)
const
{
return
kind_
=
=
Kind
:
:
PostIncrement
|
|
kind_
=
=
Kind
:
:
PreIncrement
;
}
MOZ_MUST_USE
bool
isInitialize
(
)
const
{
return
kind_
=
=
Kind
:
:
Initialize
;
}
public
:
MOZ_MUST_USE
bool
emittedBindOp
(
)
const
{
return
emittedBindOp_
;
}
MOZ_MUST_USE
const
NameLocation
&
loc
(
)
const
{
return
loc_
;
}
MOZ_MUST_USE
bool
emitGet
(
)
;
MOZ_MUST_USE
bool
prepareForRhs
(
)
;
MOZ_MUST_USE
bool
emitAssignment
(
)
;
MOZ_MUST_USE
bool
emitIncDec
(
)
;
}
;
}
}
#
endif
