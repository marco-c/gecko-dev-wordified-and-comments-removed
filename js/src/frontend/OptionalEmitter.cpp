#
include
"
frontend
/
OptionalEmitter
.
h
"
#
include
"
frontend
/
BytecodeEmitter
.
h
"
#
include
"
frontend
/
IfEmitter
.
h
"
#
include
"
vm
/
Opcodes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
frontend
;
OptionalEmitter
:
:
OptionalEmitter
(
BytecodeEmitter
*
bce
int32_t
initialDepth
)
:
bce_
(
bce
)
tdzCache_
(
bce
)
initialDepth_
(
initialDepth
)
{
}
bool
OptionalEmitter
:
:
emitJumpShortCircuit
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
|
|
state_
=
=
State
:
:
ShortCircuit
|
|
state_
=
=
State
:
:
ShortCircuitForCall
)
;
MOZ_ASSERT
(
initialDepth_
+
1
=
=
bce_
-
>
bytecodeSection
(
)
.
stackDepth
(
)
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
IsNullOrUndefined
)
)
{
}
if
(
!
bce_
-
>
emitJump
(
JSOp
:
:
JumpIfTrue
&
jumpShortCircuit_
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
ShortCircuit
;
#
endif
return
true
;
}
bool
OptionalEmitter
:
:
emitJumpShortCircuitForCall
(
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Start
|
|
state_
=
=
State
:
:
ShortCircuit
|
|
state_
=
=
State
:
:
ShortCircuitForCall
)
;
int32_t
depth
=
bce_
-
>
bytecodeSection
(
)
.
stackDepth
(
)
;
MOZ_ASSERT
(
initialDepth_
+
2
=
=
depth
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
InternalIfEmitter
ifEmitter
(
bce_
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
IsNullOrUndefined
)
)
{
return
false
;
}
if
(
!
ifEmitter
.
emitThen
(
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitJump
(
JSOp
:
:
Goto
&
jumpShortCircuit_
)
)
{
return
false
;
}
if
(
!
ifEmitter
.
emitEnd
(
)
)
{
return
false
;
}
bce_
-
>
bytecodeSection
(
)
.
setStackDepth
(
depth
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Swap
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
ShortCircuitForCall
;
#
endif
return
true
;
}
bool
OptionalEmitter
:
:
emitOptionalJumpTarget
(
JSOp
op
Kind
kind
)
{
#
ifdef
DEBUG
int32_t
depth
=
bce_
-
>
bytecodeSection
(
)
.
stackDepth
(
)
;
#
endif
MOZ_ASSERT
(
state_
=
=
State
:
:
ShortCircuit
|
|
state_
=
=
State
:
:
ShortCircuitForCall
)
;
if
(
!
bce_
-
>
emitJump
(
JSOp
:
:
Goto
&
jumpFinish_
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emitJumpTargetAndPatch
(
jumpShortCircuit_
)
)
{
return
false
;
}
bce_
-
>
bytecodeSection
(
)
.
setStackDepth
(
initialDepth_
+
1
)
;
if
(
!
bce_
-
>
emit1
(
JSOp
:
:
Pop
)
)
{
return
false
;
}
if
(
!
bce_
-
>
emit1
(
op
)
)
{
return
false
;
}
if
(
kind
=
=
Kind
:
:
Reference
)
{
if
(
!
bce_
-
>
emit1
(
op
)
)
{
return
false
;
}
}
MOZ_ASSERT
(
depth
=
=
bce_
-
>
bytecodeSection
(
)
.
stackDepth
(
)
)
;
if
(
!
bce_
-
>
emitJumpTargetAndPatch
(
jumpFinish_
)
)
{
return
false
;
}
#
ifdef
DEBUG
state_
=
State
:
:
JumpEnd
;
#
endif
return
true
;
}
