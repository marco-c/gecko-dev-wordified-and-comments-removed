#
ifndef
frontend_ParseContext_h
#
define
frontend_ParseContext_h
#
include
"
ds
/
Nestable
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
frontend
/
CompilationInfo
.
h
"
#
include
"
frontend
/
ErrorReporter
.
h
"
#
include
"
frontend
/
ModuleSharedContext
.
h
"
#
include
"
frontend
/
NameAnalysisTypes
.
h
"
#
include
"
frontend
/
NameCollections
.
h
"
#
include
"
frontend
/
ParserAtom
.
h
"
#
include
"
frontend
/
ScriptIndex
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
frontend
/
UsedNameTracker
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
vm
/
GeneratorAndAsyncKind
.
h
"
#
include
"
vm
/
GeneratorObject
.
h
"
namespace
js
{
namespace
frontend
{
class
ParserBase
;
const
char
*
DeclarationKindString
(
DeclarationKind
kind
)
;
bool
DeclarationKindIsVar
(
DeclarationKind
kind
)
;
bool
DeclarationKindIsParameter
(
DeclarationKind
kind
)
;
class
ParseContext
:
public
Nestable
<
ParseContext
>
{
public
:
class
Statement
:
public
Nestable
<
Statement
>
{
StatementKind
kind_
;
public
:
using
Nestable
<
Statement
>
:
:
enclosing
;
using
Nestable
<
Statement
>
:
:
findNearest
;
Statement
(
ParseContext
*
pc
StatementKind
kind
)
:
Nestable
<
Statement
>
(
&
pc
-
>
innermostStatement_
)
kind_
(
kind
)
{
}
template
<
typename
T
>
inline
bool
is
(
)
const
;
template
<
typename
T
>
inline
T
&
as
(
)
;
StatementKind
kind
(
)
const
{
return
kind_
;
}
void
refineForKind
(
StatementKind
newForKind
)
{
MOZ_ASSERT
(
kind_
=
=
StatementKind
:
:
ForLoop
)
;
MOZ_ASSERT
(
newForKind
=
=
StatementKind
:
:
ForInLoop
|
|
newForKind
=
=
StatementKind
:
:
ForOfLoop
)
;
kind_
=
newForKind
;
}
}
;
class
LabelStatement
:
public
Statement
{
TaggedParserAtomIndex
label_
;
public
:
LabelStatement
(
ParseContext
*
pc
TaggedParserAtomIndex
label
)
:
Statement
(
pc
StatementKind
:
:
Label
)
label_
(
label
)
{
}
TaggedParserAtomIndex
label
(
)
const
{
return
label_
;
}
}
;
struct
ClassStatement
:
public
Statement
{
FunctionBox
*
constructorBox
;
explicit
ClassStatement
(
ParseContext
*
pc
)
:
Statement
(
pc
StatementKind
:
:
Class
)
constructorBox
(
nullptr
)
{
}
}
;
class
Scope
:
public
Nestable
<
Scope
>
{
PooledMapPtr
<
DeclaredNameMap
>
declared_
;
PooledVectorPtr
<
FunctionBoxVector
>
possibleAnnexBFunctionBoxes_
;
uint32_t
id_
;
uint32_t
sizeBits_
=
0
;
bool
maybeReportOOM
(
ParseContext
*
pc
bool
result
)
{
if
(
!
result
)
{
ReportOutOfMemory
(
pc
-
>
sc
(
)
-
>
cx_
)
;
}
return
result
;
}
public
:
using
DeclaredNamePtr
=
DeclaredNameMap
:
:
Ptr
;
using
AddDeclaredNamePtr
=
DeclaredNameMap
:
:
AddPtr
;
using
Nestable
<
Scope
>
:
:
enclosing
;
explicit
inline
Scope
(
ParserBase
*
parser
)
;
explicit
inline
Scope
(
JSContext
*
cx
ParseContext
*
pc
UsedNameTracker
&
usedNames
)
;
void
dump
(
ParseContext
*
pc
ParserBase
*
parser
)
;
uint32_t
id
(
)
const
{
return
id_
;
}
MOZ_MUST_USE
bool
init
(
ParseContext
*
pc
)
{
if
(
id_
=
=
UINT32_MAX
)
{
pc
-
>
errorReporter_
.
errorNoOffset
(
JSMSG_NEED_DIET
js_script_str
)
;
return
false
;
}
return
declared_
.
acquire
(
pc
-
>
sc
(
)
-
>
cx_
)
;
}
bool
isEmpty
(
)
const
{
return
declared_
-
>
all
(
)
.
empty
(
)
;
}
uint32_t
declaredCount
(
)
const
{
size_t
count
=
declared_
-
>
count
(
)
;
MOZ_ASSERT
(
count
<
=
UINT32_MAX
)
;
return
uint32_t
(
count
)
;
}
DeclaredNamePtr
lookupDeclaredName
(
TaggedParserAtomIndex
name
)
{
return
declared_
-
>
lookup
(
name
)
;
}
AddDeclaredNamePtr
lookupDeclaredNameForAdd
(
TaggedParserAtomIndex
name
)
{
return
declared_
-
>
lookupForAdd
(
name
)
;
}
MOZ_MUST_USE
bool
addDeclaredName
(
ParseContext
*
pc
AddDeclaredNamePtr
&
p
TaggedParserAtomIndex
name
DeclarationKind
kind
uint32_t
pos
ClosedOver
closedOver
=
ClosedOver
:
:
No
)
{
return
maybeReportOOM
(
pc
declared_
-
>
add
(
p
name
DeclaredNameInfo
(
kind
pos
closedOver
)
)
)
;
}
MOZ_MUST_USE
bool
addPossibleAnnexBFunctionBox
(
ParseContext
*
pc
FunctionBox
*
funbox
)
;
MOZ_MUST_USE
bool
propagateAndMarkAnnexBFunctionBoxes
(
ParseContext
*
pc
ParserBase
*
parser
)
;
bool
addCatchParameters
(
ParseContext
*
pc
Scope
&
catchParamScope
)
;
void
removeCatchParameters
(
ParseContext
*
pc
Scope
&
catchParamScope
)
;
void
useAsVarScope
(
ParseContext
*
pc
)
{
MOZ_ASSERT
(
!
pc
-
>
varScope_
)
;
pc
-
>
varScope_
=
this
;
}
void
setOwnStackSlotCount
(
uint32_t
ownSlotCount
)
{
uint32_t
slotCount
=
ownSlotCount
+
sizeBits_
;
if
(
slotCount
>
AbstractGeneratorObject
:
:
FixedSlotLimit
)
{
slotCount
=
sizeBits_
;
sizeBits_
=
UINT32_MAX
;
}
else
{
sizeBits_
=
0
;
}
if
(
Scope
*
parent
=
enclosing
(
)
)
{
if
(
slotCount
>
parent
-
>
sizeBits_
)
{
parent
-
>
sizeBits_
=
slotCount
;
}
}
}
bool
tooBigToOptimize
(
)
const
{
MOZ_ASSERT
(
sizeBits_
=
=
0
|
|
sizeBits_
=
=
UINT32_MAX
"
call
this
only
after
the
parser
leaves
the
scope
"
)
;
return
sizeBits_
!
=
0
;
}
class
BindingIter
{
friend
class
Scope
;
DeclaredNameMap
:
:
Range
declaredRange_
;
mozilla
:
:
DebugOnly
<
uint32_t
>
count_
;
bool
isVarScope_
;
BindingIter
(
Scope
&
scope
bool
isVarScope
)
:
declaredRange_
(
scope
.
declared_
-
>
all
(
)
)
count_
(
0
)
isVarScope_
(
isVarScope
)
{
settle
(
)
;
}
void
settle
(
)
{
if
(
isVarScope_
)
{
return
;
}
while
(
!
declaredRange_
.
empty
(
)
)
{
if
(
BindingKindIsLexical
(
kind
(
)
)
)
{
break
;
}
declaredRange_
.
popFront
(
)
;
}
}
public
:
bool
done
(
)
const
{
return
declaredRange_
.
empty
(
)
;
}
explicit
operator
bool
(
)
const
{
return
!
done
(
)
;
}
TaggedParserAtomIndex
name
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
declaredRange_
.
front
(
)
.
key
(
)
;
}
DeclarationKind
declarationKind
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
declaredRange_
.
front
(
)
.
value
(
)
-
>
kind
(
)
;
}
BindingKind
kind
(
)
{
return
DeclarationKindToBindingKind
(
declarationKind
(
)
)
;
}
bool
closedOver
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
declaredRange_
.
front
(
)
.
value
(
)
-
>
closedOver
(
)
;
}
void
setClosedOver
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
declaredRange_
.
front
(
)
.
value
(
)
-
>
setClosedOver
(
)
;
}
void
operator
+
+
(
int
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
count_
!
=
UINT32_MAX
)
;
declaredRange_
.
popFront
(
)
;
settle
(
)
;
}
}
;
inline
BindingIter
bindings
(
ParseContext
*
pc
)
;
}
;
class
VarScope
:
public
Scope
{
public
:
explicit
inline
VarScope
(
ParserBase
*
parser
)
;
explicit
inline
VarScope
(
JSContext
*
cx
ParseContext
*
pc
UsedNameTracker
&
usedNames
)
;
}
;
private
:
AutoFrontendTraceLog
traceLog_
;
SharedContext
*
sc_
;
ErrorReporter
&
errorReporter_
;
Statement
*
innermostStatement_
;
Scope
*
innermostScope_
;
mozilla
:
:
Maybe
<
Scope
>
namedLambdaScope_
;
mozilla
:
:
Maybe
<
Scope
>
functionScope_
;
Scope
*
varScope_
;
PooledVectorPtr
<
AtomVector
>
positionalFormalParameterNames_
;
PooledVectorPtr
<
AtomVector
>
closedOverBindingsForLazy_
;
public
:
Vector
<
ScriptIndex
4
>
innerFunctionIndexesForLazy
;
Directives
*
newDirectives
;
static
const
uint32_t
NoYieldOffset
=
UINT32_MAX
;
uint32_t
lastYieldOffset
;
static
const
uint32_t
NoAwaitOffset
=
UINT32_MAX
;
uint32_t
lastAwaitOffset
;
private
:
uint32_t
scriptId_
;
bool
superScopeNeedsHomeObject_
;
public
:
ParseContext
(
JSContext
*
cx
ParseContext
*
&
parent
SharedContext
*
sc
ErrorReporter
&
errorReporter
CompilationState
&
compilationState
Directives
*
newDirectives
bool
isFull
)
;
MOZ_MUST_USE
bool
init
(
)
;
SharedContext
*
sc
(
)
{
return
sc_
;
}
bool
isFunctionBox
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
;
}
FunctionBox
*
functionBox
(
)
{
return
sc_
-
>
asFunctionBox
(
)
;
}
Statement
*
innermostStatement
(
)
{
return
innermostStatement_
;
}
Scope
*
innermostScope
(
)
{
MOZ_ASSERT
(
innermostScope_
)
;
return
innermostScope_
;
}
Scope
&
namedLambdaScope
(
)
{
MOZ_ASSERT
(
functionBox
(
)
-
>
isNamedLambda
(
)
)
;
return
*
namedLambdaScope_
;
}
Scope
&
functionScope
(
)
{
MOZ_ASSERT
(
isFunctionBox
(
)
)
;
return
*
functionScope_
;
}
Scope
&
varScope
(
)
{
MOZ_ASSERT
(
varScope_
)
;
return
*
varScope_
;
}
bool
isFunctionExtraBodyVarScopeInnermost
(
)
{
return
isFunctionBox
(
)
&
&
functionBox
(
)
-
>
hasParameterExprs
&
&
innermostScope
(
)
=
=
varScope_
;
}
template
<
typename
Predicate
>
Statement
*
findInnermostStatement
(
Predicate
predicate
)
{
return
Statement
:
:
findNearest
(
innermostStatement_
predicate
)
;
}
template
<
typename
T
typename
Predicate
>
T
*
findInnermostStatement
(
Predicate
predicate
)
{
return
Statement
:
:
findNearest
<
T
>
(
innermostStatement_
predicate
)
;
}
template
<
typename
T
>
T
*
findInnermostStatement
(
)
{
return
Statement
:
:
findNearest
<
T
>
(
innermostStatement_
)
;
}
AtomVector
&
positionalFormalParameterNames
(
)
{
return
*
positionalFormalParameterNames_
;
}
AtomVector
&
closedOverBindingsForLazy
(
)
{
return
*
closedOverBindingsForLazy_
;
}
enum
class
BreakStatementError
{
ToughBreak
LabelNotFound
}
;
MOZ_MUST_USE
inline
JS
:
:
Result
<
Ok
BreakStatementError
>
checkBreakStatement
(
TaggedParserAtomIndex
label
)
;
enum
class
ContinueStatementError
{
NotInALoop
LabelNotFound
}
;
MOZ_MUST_USE
inline
JS
:
:
Result
<
Ok
ContinueStatementError
>
checkContinueStatement
(
TaggedParserAtomIndex
label
)
;
bool
atBodyLevel
(
)
{
return
!
innermostStatement_
;
}
bool
atGlobalLevel
(
)
{
return
atBodyLevel
(
)
&
&
sc_
-
>
isGlobalContext
(
)
;
}
bool
atModuleLevel
(
)
{
return
atBodyLevel
(
)
&
&
sc_
-
>
isModuleContext
(
)
;
}
bool
atTopLevel
(
)
{
return
atBodyLevel
(
)
&
&
sc_
-
>
isTopLevelContext
(
)
;
}
bool
atModuleTopLevel
(
)
{
return
sc_
-
>
isModuleContext
(
)
&
&
sc_
-
>
isTopLevelContext
(
)
;
}
bool
isOutermostOfCurrentCompile
(
)
const
{
MOZ_ASSERT
(
!
!
enclosing
(
)
=
=
!
!
scriptId
(
)
)
;
return
(
scriptId
(
)
=
=
0
)
;
}
void
setSuperScopeNeedsHomeObject
(
)
{
MOZ_ASSERT
(
sc_
-
>
allowSuperProperty
(
)
)
;
superScopeNeedsHomeObject_
=
true
;
}
bool
superScopeNeedsHomeObject
(
)
const
{
return
superScopeNeedsHomeObject_
;
}
bool
useAsmOrInsideUseAsm
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
&
&
sc_
-
>
asFunctionBox
(
)
-
>
useAsmOrInsideUseAsm
(
)
;
}
GeneratorKind
generatorKind
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
?
sc_
-
>
asFunctionBox
(
)
-
>
generatorKind
(
)
:
GeneratorKind
:
:
NotGenerator
;
}
bool
isGenerator
(
)
const
{
return
generatorKind
(
)
=
=
GeneratorKind
:
:
Generator
;
}
bool
isAsync
(
)
const
{
return
sc_
-
>
isSuspendableContext
(
)
&
&
sc_
-
>
asSuspendableContext
(
)
-
>
isAsync
(
)
;
}
bool
isGeneratorOrAsync
(
)
const
{
return
isGenerator
(
)
|
|
isAsync
(
)
;
}
bool
needsDotGeneratorName
(
)
const
{
return
isGeneratorOrAsync
(
)
;
}
FunctionAsyncKind
asyncKind
(
)
const
{
return
isAsync
(
)
?
FunctionAsyncKind
:
:
AsyncFunction
:
FunctionAsyncKind
:
:
SyncFunction
;
}
bool
isArrowFunction
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
&
&
sc_
-
>
asFunctionBox
(
)
-
>
isArrow
(
)
;
}
bool
isMethod
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
&
&
sc_
-
>
asFunctionBox
(
)
-
>
isMethod
(
)
;
}
bool
isGetterOrSetter
(
)
const
{
return
sc_
-
>
isFunctionBox
(
)
&
&
(
sc_
-
>
asFunctionBox
(
)
-
>
isGetter
(
)
|
|
sc_
-
>
asFunctionBox
(
)
-
>
isSetter
(
)
)
;
}
uint32_t
scriptId
(
)
const
{
return
scriptId_
;
}
bool
computeAnnexBAppliesToLexicalFunctionInInnermostScope
(
FunctionBox
*
funbox
ParserBase
*
parser
bool
*
annexBApplies
)
;
bool
tryDeclareVar
(
TaggedParserAtomIndex
name
ParserBase
*
parser
DeclarationKind
kind
uint32_t
beginPos
mozilla
:
:
Maybe
<
DeclarationKind
>
*
redeclaredKind
uint32_t
*
prevPos
)
;
bool
hasUsedName
(
const
UsedNameTracker
&
usedNames
TaggedParserAtomIndex
name
)
;
bool
hasUsedFunctionSpecialName
(
const
UsedNameTracker
&
usedNames
TaggedParserAtomIndex
name
)
;
bool
declareFunctionThis
(
const
UsedNameTracker
&
usedNames
bool
canSkipLazyClosedOverBindings
)
;
bool
declareFunctionArgumentsObject
(
const
UsedNameTracker
&
usedNames
bool
canSkipLazyClosedOverBindings
)
;
bool
declareDotGeneratorName
(
)
;
bool
declareTopLevelDotGeneratorName
(
)
;
private
:
MOZ_MUST_USE
bool
isVarRedeclaredInInnermostScope
(
TaggedParserAtomIndex
name
ParserBase
*
parser
DeclarationKind
kind
mozilla
:
:
Maybe
<
DeclarationKind
>
*
out
)
;
MOZ_MUST_USE
bool
isVarRedeclaredInEval
(
TaggedParserAtomIndex
name
ParserBase
*
parser
DeclarationKind
kind
mozilla
:
:
Maybe
<
DeclarationKind
>
*
out
)
;
enum
DryRunOption
{
NotDryRun
DryRunInnermostScopeOnly
}
;
template
<
DryRunOption
dryRunOption
>
bool
tryDeclareVarHelper
(
TaggedParserAtomIndex
name
ParserBase
*
parser
DeclarationKind
kind
uint32_t
beginPos
mozilla
:
:
Maybe
<
DeclarationKind
>
*
redeclaredKind
uint32_t
*
prevPos
)
;
}
;
}
}
#
endif
