#
ifndef
frontend_AsyncEmitter_h
#
define
frontend_AsyncEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
frontend
/
TryEmitter
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
AsyncEmitter
{
private
:
BytecodeEmitter
*
bce_
;
mozilla
:
:
Maybe
<
TryEmitter
>
rejectTryCatch_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Parameters
ModulePrologue
PostParams
Body
End
}
;
State
state_
=
State
:
:
Start
;
#
endif
[
[
nodiscard
]
]
bool
emitRejectCatch
(
)
;
[
[
nodiscard
]
]
bool
emitFinalYield
(
)
;
public
:
explicit
AsyncEmitter
(
BytecodeEmitter
*
bce
)
:
bce_
(
bce
)
{
}
;
[
[
nodiscard
]
]
bool
prepareForParamsWithoutExpressionOrDestructuring
(
)
;
[
[
nodiscard
]
]
bool
prepareForParamsWithExpressionOrDestructuring
(
)
;
[
[
nodiscard
]
]
bool
prepareForModule
(
)
;
[
[
nodiscard
]
]
bool
emitParamsEpilogue
(
)
;
[
[
nodiscard
]
]
bool
prepareForBody
(
)
;
[
[
nodiscard
]
]
bool
emitEndFunction
(
)
;
[
[
nodiscard
]
]
bool
emitEndModule
(
)
;
}
;
}
}
#
endif
