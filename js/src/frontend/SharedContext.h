#
ifndef
frontend_SharedContext_h
#
define
frontend_SharedContext_h
#
include
"
jsatom
.
h
"
#
include
"
jsopcode
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
jsscript
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
frontend
/
ParseMaps
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
TokenStream
.
h
"
#
include
"
vm
/
ScopeObject
.
h
"
namespace
js
{
namespace
frontend
{
class
AnyContextFlags
{
friend
class
SharedContext
;
bool
hasExplicitUseStrict
:
1
;
bool
bindingsAccessedDynamically
:
1
;
bool
hasDebuggerStatement
:
1
;
bool
hasDirectEval
:
1
;
public
:
AnyContextFlags
(
)
:
hasExplicitUseStrict
(
false
)
bindingsAccessedDynamically
(
false
)
hasDebuggerStatement
(
false
)
hasDirectEval
(
false
)
{
}
}
;
class
FunctionContextFlags
{
friend
class
FunctionBox
;
bool
mightAliasLocals
:
1
;
bool
hasExtensibleScope
:
1
;
bool
needsDeclEnvObject
:
1
;
bool
argumentsHasLocalBinding
:
1
;
bool
definitelyNeedsArgsObj
:
1
;
bool
needsHomeObject
:
1
;
bool
isDerivedClassConstructor
:
1
;
bool
hasThisBinding
:
1
;
public
:
FunctionContextFlags
(
)
:
mightAliasLocals
(
false
)
hasExtensibleScope
(
false
)
needsDeclEnvObject
(
false
)
argumentsHasLocalBinding
(
false
)
definitelyNeedsArgsObj
(
false
)
needsHomeObject
(
false
)
isDerivedClassConstructor
(
false
)
hasThisBinding
(
false
)
{
}
}
;
class
Directives
{
bool
strict_
;
bool
asmJS_
;
public
:
explicit
Directives
(
bool
strict
)
:
strict_
(
strict
)
asmJS_
(
false
)
{
}
template
<
typename
ParseHandler
>
explicit
Directives
(
ParseContext
<
ParseHandler
>
*
parent
)
;
void
setStrict
(
)
{
strict_
=
true
;
}
bool
strict
(
)
const
{
return
strict_
;
}
void
setAsmJS
(
)
{
asmJS_
=
true
;
}
bool
asmJS
(
)
const
{
return
asmJS_
;
}
Directives
&
operator
=
(
Directives
rhs
)
{
strict_
=
rhs
.
strict_
;
asmJS_
=
rhs
.
asmJS_
;
return
*
this
;
}
bool
operator
=
=
(
const
Directives
&
rhs
)
const
{
return
strict_
=
=
rhs
.
strict_
&
&
asmJS_
=
=
rhs
.
asmJS_
;
}
bool
operator
!
=
(
const
Directives
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
}
;
enum
class
ThisBinding
{
Global
Function
Module
}
;
class
SharedContext
{
public
:
ExclusiveContext
*
const
context
;
AnyContextFlags
anyCxFlags
;
bool
strictScript
;
bool
localStrict
;
bool
extraWarnings
;
private
:
ThisBinding
thisBinding_
;
bool
allowNewTarget_
;
bool
allowSuperProperty_
;
bool
allowSuperCall_
;
bool
inWith_
;
bool
needsThisTDZChecks_
;
bool
superScopeAlreadyNeedsHomeObject_
;
public
:
SharedContext
(
ExclusiveContext
*
cx
Directives
directives
bool
extraWarnings
)
:
context
(
cx
)
anyCxFlags
(
)
strictScript
(
directives
.
strict
(
)
)
localStrict
(
false
)
extraWarnings
(
extraWarnings
)
thisBinding_
(
ThisBinding
:
:
Global
)
allowNewTarget_
(
false
)
allowSuperProperty_
(
false
)
allowSuperCall_
(
false
)
inWith_
(
false
)
needsThisTDZChecks_
(
false
)
superScopeAlreadyNeedsHomeObject_
(
false
)
{
}
virtual
JSObject
*
staticScope
(
)
const
=
0
;
void
computeAllowSyntax
(
JSObject
*
staticScope
)
;
void
computeInWith
(
JSObject
*
staticScope
)
;
void
computeThisBinding
(
JSObject
*
staticScope
)
;
virtual
ObjectBox
*
toObjectBox
(
)
{
return
nullptr
;
}
bool
isObjectBox
(
)
{
return
toObjectBox
(
)
!
=
nullptr
;
}
bool
isFunctionBox
(
)
{
return
isObjectBox
(
)
&
&
toObjectBox
(
)
-
>
isFunctionBox
(
)
;
}
inline
FunctionBox
*
asFunctionBox
(
)
;
bool
isModuleBox
(
)
{
return
isObjectBox
(
)
&
&
toObjectBox
(
)
-
>
isModuleBox
(
)
;
}
inline
ModuleBox
*
asModuleBox
(
)
;
bool
isGlobalContext
(
)
{
return
!
toObjectBox
(
)
;
}
ThisBinding
thisBinding
(
)
const
{
return
thisBinding_
;
}
bool
allowNewTarget
(
)
const
{
return
allowNewTarget_
;
}
bool
allowSuperProperty
(
)
const
{
return
allowSuperProperty_
;
}
bool
allowSuperCall
(
)
const
{
return
allowSuperCall_
;
}
bool
inWith
(
)
const
{
return
inWith_
;
}
bool
needsThisTDZChecks
(
)
const
{
return
needsThisTDZChecks_
;
}
void
markSuperScopeNeedsHomeObject
(
)
;
bool
hasExplicitUseStrict
(
)
const
{
return
anyCxFlags
.
hasExplicitUseStrict
;
}
bool
bindingsAccessedDynamically
(
)
const
{
return
anyCxFlags
.
bindingsAccessedDynamically
;
}
bool
hasDebuggerStatement
(
)
const
{
return
anyCxFlags
.
hasDebuggerStatement
;
}
bool
hasDirectEval
(
)
const
{
return
anyCxFlags
.
hasDirectEval
;
}
void
setExplicitUseStrict
(
)
{
anyCxFlags
.
hasExplicitUseStrict
=
true
;
}
void
setBindingsAccessedDynamically
(
)
{
anyCxFlags
.
bindingsAccessedDynamically
=
true
;
}
void
setHasDebuggerStatement
(
)
{
anyCxFlags
.
hasDebuggerStatement
=
true
;
}
void
setHasDirectEval
(
)
{
anyCxFlags
.
hasDirectEval
=
true
;
}
inline
bool
allLocalsAliased
(
)
;
bool
strict
(
)
const
{
return
strictScript
|
|
localStrict
;
}
bool
setLocalStrictMode
(
bool
strict
)
{
bool
retVal
=
localStrict
;
localStrict
=
strict
;
return
retVal
;
}
bool
needStrictChecks
(
)
const
{
return
strict
(
)
|
|
extraWarnings
;
}
bool
isDotVariable
(
JSAtom
*
atom
)
const
{
return
atom
=
=
context
-
>
names
(
)
.
dotGenerator
|
|
atom
=
=
context
-
>
names
(
)
.
dotThis
;
}
}
;
class
MOZ_STACK_CLASS
GlobalSharedContext
:
public
SharedContext
{
Rooted
<
ScopeObject
*
>
staticScope_
;
public
:
GlobalSharedContext
(
ExclusiveContext
*
cx
ScopeObject
*
staticScope
Directives
directives
bool
extraWarnings
JSFunction
*
maybeEvalCaller
=
nullptr
)
:
SharedContext
(
cx
directives
extraWarnings
)
staticScope_
(
cx
staticScope
)
{
computeAllowSyntax
(
staticScope
)
;
computeInWith
(
staticScope
)
;
if
(
maybeEvalCaller
)
computeThisBinding
(
maybeEvalCaller
)
;
else
computeThisBinding
(
staticScope
)
;
}
JSObject
*
staticScope
(
)
const
override
{
return
staticScope_
;
}
}
;
class
FunctionBox
:
public
ObjectBox
public
SharedContext
{
public
:
Bindings
bindings
;
JSObject
*
enclosingStaticScope_
;
uint32_t
bufStart
;
uint32_t
bufEnd
;
uint32_t
startLine
;
uint32_t
startColumn
;
uint16_t
length
;
uint8_t
generatorKindBits_
;
bool
inGenexpLambda
:
1
;
bool
hasDestructuringArgs
:
1
;
bool
useAsm
:
1
;
bool
insideUseAsm
:
1
;
bool
wasEmitted
:
1
;
bool
usesArguments
:
1
;
bool
usesApply
:
1
;
bool
usesThis
:
1
;
FunctionContextFlags
funCxFlags
;
template
<
typename
ParseHandler
>
FunctionBox
(
ExclusiveContext
*
cx
ObjectBox
*
traceListHead
JSFunction
*
fun
JSObject
*
enclosingStaticScope
ParseContext
<
ParseHandler
>
*
pc
Directives
directives
bool
extraWarnings
GeneratorKind
generatorKind
)
;
ObjectBox
*
toObjectBox
(
)
override
{
return
this
;
}
JSFunction
*
function
(
)
const
{
return
&
object
-
>
as
<
JSFunction
>
(
)
;
}
JSObject
*
staticScope
(
)
const
override
{
return
function
(
)
;
}
JSObject
*
enclosingStaticScope
(
)
const
{
return
enclosingStaticScope_
;
}
GeneratorKind
generatorKind
(
)
const
{
return
GeneratorKindFromBits
(
generatorKindBits_
)
;
}
bool
isGenerator
(
)
const
{
return
generatorKind
(
)
!
=
NotGenerator
;
}
bool
isLegacyGenerator
(
)
const
{
return
generatorKind
(
)
=
=
LegacyGenerator
;
}
bool
isStarGenerator
(
)
const
{
return
generatorKind
(
)
=
=
StarGenerator
;
}
bool
isArrow
(
)
const
{
return
function
(
)
-
>
isArrow
(
)
;
}
void
setGeneratorKind
(
GeneratorKind
kind
)
{
MOZ_ASSERT
(
!
isGenerator
(
)
)
;
generatorKindBits_
=
GeneratorKindAsBits
(
kind
)
;
}
bool
mightAliasLocals
(
)
const
{
return
funCxFlags
.
mightAliasLocals
;
}
bool
hasExtensibleScope
(
)
const
{
return
funCxFlags
.
hasExtensibleScope
;
}
bool
needsDeclEnvObject
(
)
const
{
return
funCxFlags
.
needsDeclEnvObject
;
}
bool
hasThisBinding
(
)
const
{
return
funCxFlags
.
hasThisBinding
;
}
bool
argumentsHasLocalBinding
(
)
const
{
return
funCxFlags
.
argumentsHasLocalBinding
;
}
bool
definitelyNeedsArgsObj
(
)
const
{
return
funCxFlags
.
definitelyNeedsArgsObj
;
}
bool
needsHomeObject
(
)
const
{
return
funCxFlags
.
needsHomeObject
;
}
bool
isDerivedClassConstructor
(
)
const
{
return
funCxFlags
.
isDerivedClassConstructor
;
}
void
setMightAliasLocals
(
)
{
funCxFlags
.
mightAliasLocals
=
true
;
}
void
setHasExtensibleScope
(
)
{
funCxFlags
.
hasExtensibleScope
=
true
;
}
void
setNeedsDeclEnvObject
(
)
{
funCxFlags
.
needsDeclEnvObject
=
true
;
}
void
setHasThisBinding
(
)
{
funCxFlags
.
hasThisBinding
=
true
;
}
void
setArgumentsHasLocalBinding
(
)
{
funCxFlags
.
argumentsHasLocalBinding
=
true
;
}
void
setDefinitelyNeedsArgsObj
(
)
{
MOZ_ASSERT
(
funCxFlags
.
argumentsHasLocalBinding
)
;
funCxFlags
.
definitelyNeedsArgsObj
=
true
;
}
void
setNeedsHomeObject
(
)
{
MOZ_ASSERT
(
function
(
)
-
>
allowSuperProperty
(
)
)
;
funCxFlags
.
needsHomeObject
=
true
;
}
void
setDerivedClassConstructor
(
)
{
MOZ_ASSERT
(
function
(
)
-
>
isClassConstructor
(
)
)
;
funCxFlags
.
isDerivedClassConstructor
=
true
;
}
bool
hasDefaults
(
)
const
{
return
length
!
=
function
(
)
-
>
nargs
(
)
-
function
(
)
-
>
hasRest
(
)
;
}
bool
hasMappedArgsObj
(
)
const
{
return
!
strict
(
)
&
&
!
function
(
)
-
>
hasRest
(
)
&
&
!
hasDefaults
(
)
&
&
!
hasDestructuringArgs
;
}
bool
useAsmOrInsideUseAsm
(
)
const
{
return
useAsm
|
|
insideUseAsm
;
}
void
setStart
(
const
TokenStream
&
tokenStream
)
{
bufStart
=
tokenStream
.
currentToken
(
)
.
pos
.
begin
;
startLine
=
tokenStream
.
getLineno
(
)
;
startColumn
=
tokenStream
.
getColumn
(
)
;
}
bool
needsCallObject
(
)
{
return
bindings
.
hasAnyAliasedBindings
(
)
|
|
hasExtensibleScope
(
)
|
|
needsDeclEnvObject
(
)
|
|
needsHomeObject
(
)
|
|
isDerivedClassConstructor
(
)
|
|
isGenerator
(
)
;
}
}
;
class
ModuleBox
:
public
ObjectBox
public
SharedContext
{
public
:
Bindings
bindings
;
TraceableVector
<
JSAtom
*
>
exportNames
;
template
<
typename
ParseHandler
>
ModuleBox
(
ExclusiveContext
*
cx
ObjectBox
*
traceListHead
ModuleObject
*
module
ParseContext
<
ParseHandler
>
*
pc
)
;
ObjectBox
*
toObjectBox
(
)
override
{
return
this
;
}
ModuleObject
*
module
(
)
const
{
return
&
object
-
>
as
<
ModuleObject
>
(
)
;
}
JSObject
*
staticScope
(
)
const
override
{
return
module
(
)
;
}
}
;
inline
FunctionBox
*
SharedContext
:
:
asFunctionBox
(
)
{
MOZ_ASSERT
(
isFunctionBox
(
)
)
;
return
static_cast
<
FunctionBox
*
>
(
this
)
;
}
inline
ModuleBox
*
SharedContext
:
:
asModuleBox
(
)
{
MOZ_ASSERT
(
isModuleBox
(
)
)
;
return
static_cast
<
ModuleBox
*
>
(
this
)
;
}
inline
bool
SharedContext
:
:
allLocalsAliased
(
)
{
return
bindingsAccessedDynamically
(
)
|
|
(
isFunctionBox
(
)
&
&
asFunctionBox
(
)
-
>
isGenerator
(
)
)
;
}
enum
class
StmtType
:
uint16_t
{
LABEL
IF
ELSE
SEQ
BLOCK
SWITCH
WITH
CATCH
TRY
FINALLY
SUBROUTINE
DO_LOOP
FOR_LOOP
FOR_IN_LOOP
FOR_OF_LOOP
WHILE_LOOP
SPREAD
LIMIT
}
;
struct
StmtInfoBase
{
StmtType
type
;
bool
isBlockScope
:
1
;
bool
isForLetBlock
:
1
;
RootedAtom
label
;
Rooted
<
NestedScopeObject
*
>
staticScope
;
explicit
StmtInfoBase
(
ExclusiveContext
*
cx
)
:
isBlockScope
(
false
)
isForLetBlock
(
false
)
label
(
cx
)
staticScope
(
cx
)
{
}
bool
maybeScope
(
)
const
{
return
StmtType
:
:
BLOCK
<
=
type
&
&
type
<
=
StmtType
:
:
SUBROUTINE
&
&
type
!
=
StmtType
:
:
WITH
;
}
bool
linksScope
(
)
const
{
return
!
!
staticScope
;
}
bool
canBeBlockScope
(
)
{
return
type
=
=
StmtType
:
:
BLOCK
|
|
type
=
=
StmtType
:
:
SWITCH
|
|
type
=
=
StmtType
:
:
TRY
|
|
type
=
=
StmtType
:
:
FINALLY
|
|
type
=
=
StmtType
:
:
CATCH
;
}
StaticBlockObject
&
staticBlock
(
)
const
{
MOZ_ASSERT
(
staticScope
)
;
MOZ_ASSERT
(
isBlockScope
)
;
return
staticScope
-
>
as
<
StaticBlockObject
>
(
)
;
}
bool
isLoop
(
)
const
{
return
type
>
=
StmtType
:
:
DO_LOOP
;
}
bool
isTrying
(
)
const
{
return
StmtType
:
:
TRY
<
=
type
&
&
type
<
=
StmtType
:
:
SUBROUTINE
;
}
}
;
template
<
class
StmtInfo
>
class
MOZ_STACK_CLASS
StmtInfoStack
{
StmtInfo
*
innermostStmt_
;
StmtInfo
*
innermostScopeStmt_
;
public
:
explicit
StmtInfoStack
(
ExclusiveContext
*
cx
)
:
innermostStmt_
(
nullptr
)
innermostScopeStmt_
(
nullptr
)
{
}
StmtInfo
*
innermost
(
)
const
{
return
innermostStmt_
;
}
StmtInfo
*
innermostScopeStmt
(
)
const
{
return
innermostScopeStmt_
;
}
void
push
(
StmtInfo
*
stmt
StmtType
type
)
{
stmt
-
>
type
=
type
;
stmt
-
>
isBlockScope
=
false
;
stmt
-
>
isForLetBlock
=
false
;
stmt
-
>
label
=
nullptr
;
stmt
-
>
staticScope
=
nullptr
;
stmt
-
>
enclosing
=
innermostStmt_
;
stmt
-
>
enclosingScope
=
nullptr
;
innermostStmt_
=
stmt
;
}
void
pushNestedScope
(
StmtInfo
*
stmt
StmtType
type
NestedScopeObject
&
staticScope
)
{
push
(
stmt
type
)
;
linkAsInnermostScopeStmt
(
stmt
staticScope
)
;
}
void
pop
(
)
{
StmtInfo
*
stmt
=
innermostStmt_
;
innermostStmt_
=
stmt
-
>
enclosing
;
if
(
stmt
-
>
linksScope
(
)
)
innermostScopeStmt_
=
stmt
-
>
enclosingScope
;
}
void
linkAsInnermostScopeStmt
(
StmtInfo
*
stmt
NestedScopeObject
&
staticScope
)
{
MOZ_ASSERT
(
stmt
!
=
innermostScopeStmt_
)
;
MOZ_ASSERT
(
!
stmt
-
>
enclosingScope
)
;
stmt
-
>
enclosingScope
=
innermostScopeStmt_
;
innermostScopeStmt_
=
stmt
;
stmt
-
>
staticScope
=
&
staticScope
;
}
void
makeInnermostLexicalScope
(
StaticBlockObject
&
blockObj
)
{
MOZ_ASSERT
(
!
innermostStmt_
-
>
isBlockScope
)
;
MOZ_ASSERT
(
innermostStmt_
-
>
canBeBlockScope
(
)
)
;
innermostStmt_
-
>
isBlockScope
=
true
;
linkAsInnermostScopeStmt
(
innermostStmt_
blockObj
)
;
}
}
;
}
}
#
endif
