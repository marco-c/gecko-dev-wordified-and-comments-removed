#
ifndef
frontend_SharedContext_h
#
define
frontend_SharedContext_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
frontend
/
AbstractScopePtr
.
h
"
#
include
"
frontend
/
FunctionSyntaxKind
.
h
"
#
include
"
frontend
/
ParseNode
.
h
"
#
include
"
frontend
/
Stencil
.
h
"
#
include
"
js
/
WasmModule
.
h
"
#
include
"
vm
/
FunctionFlags
.
h
"
#
include
"
vm
/
GeneratorAndAsyncKind
.
h
"
#
include
"
vm
/
JSFunction
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
Scope
.
h
"
#
include
"
vm
/
SharedStencil
.
h
"
namespace
js
{
namespace
frontend
{
class
ParseContext
;
class
ScriptStencil
;
struct
ScopeContext
;
enum
class
StatementKind
:
uint8_t
{
Label
Block
If
Switch
With
Catch
Try
Finally
ForLoopLexicalHead
ForLoop
ForInLoop
ForOfLoop
DoLoop
WhileLoop
Class
Spread
YieldStar
}
;
static
inline
bool
StatementKindIsLoop
(
StatementKind
kind
)
{
return
kind
=
=
StatementKind
:
:
ForLoop
|
|
kind
=
=
StatementKind
:
:
ForInLoop
|
|
kind
=
=
StatementKind
:
:
ForOfLoop
|
|
kind
=
=
StatementKind
:
:
DoLoop
|
|
kind
=
=
StatementKind
:
:
WhileLoop
|
|
kind
=
=
StatementKind
:
:
Spread
|
|
kind
=
=
StatementKind
:
:
YieldStar
;
}
static
inline
bool
StatementKindIsUnlabeledBreakTarget
(
StatementKind
kind
)
{
return
StatementKindIsLoop
(
kind
)
|
|
kind
=
=
StatementKind
:
:
Switch
;
}
class
Directives
{
bool
strict_
;
bool
asmJS_
;
public
:
explicit
Directives
(
bool
strict
)
:
strict_
(
strict
)
asmJS_
(
false
)
{
}
explicit
Directives
(
ParseContext
*
parent
)
;
void
setStrict
(
)
{
strict_
=
true
;
}
bool
strict
(
)
const
{
return
strict_
;
}
void
setAsmJS
(
)
{
asmJS_
=
true
;
}
bool
asmJS
(
)
const
{
return
asmJS_
;
}
Directives
&
operator
=
(
Directives
rhs
)
{
strict_
=
rhs
.
strict_
;
asmJS_
=
rhs
.
asmJS_
;
return
*
this
;
}
bool
operator
=
=
(
const
Directives
&
rhs
)
const
{
return
strict_
=
=
rhs
.
strict_
&
&
asmJS_
=
=
rhs
.
asmJS_
;
}
bool
operator
!
=
(
const
Directives
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
}
;
enum
class
ThisBinding
:
uint8_t
{
Global
Module
Function
DerivedConstructor
}
;
class
GlobalSharedContext
;
class
EvalSharedContext
;
class
ModuleSharedContext
;
#
define
FLAG_GETTER
(
enumName
enumEntry
lowerName
name
)
\
public
:
\
bool
lowerName
(
)
const
{
return
hasFlag
(
enumName
:
:
enumEntry
)
;
}
#
define
FLAG_SETTER
(
enumName
enumEntry
lowerName
name
)
\
public
:
\
void
set
#
#
name
(
)
{
setFlag
(
enumName
:
:
enumEntry
)
;
}
\
void
set
#
#
name
(
bool
b
)
{
setFlag
(
enumName
:
:
enumEntry
b
)
;
}
#
define
IMMUTABLE_FLAG_GETTER_SETTER
(
lowerName
name
)
\
FLAG_GETTER
(
ImmutableFlags
name
lowerName
name
)
\
FLAG_SETTER
(
ImmutableFlags
name
lowerName
name
)
#
define
IMMUTABLE_FLAG_GETTER
(
lowerName
name
)
\
FLAG_GETTER
(
ImmutableFlags
name
lowerName
name
)
class
SharedContext
{
public
:
JSContext
*
const
cx_
;
protected
:
CompilationInfo
&
compilationInfo_
;
ImmutableScriptFlags
immutableFlags_
=
{
}
;
SourceExtent
extent_
=
{
}
;
protected
:
ThisBinding
thisBinding_
=
ThisBinding
:
:
Global
;
bool
allowNewTarget_
:
1
;
bool
allowSuperProperty_
:
1
;
bool
allowSuperCall_
:
1
;
bool
allowArguments_
:
1
;
bool
inWith_
:
1
;
bool
inClass_
:
1
;
bool
localStrict
:
1
;
bool
hasExplicitUseStrict_
:
1
;
bool
isScriptFieldCopiedToStencil
:
1
;
enum
class
Kind
:
uint8_t
{
FunctionBox
Global
Eval
Module
}
;
using
ImmutableFlags
=
ImmutableScriptFlagsEnum
;
MOZ_MUST_USE
bool
hasFlag
(
ImmutableFlags
flag
)
const
{
return
immutableFlags_
.
hasFlag
(
flag
)
;
}
void
setFlag
(
ImmutableFlags
flag
bool
b
=
true
)
{
MOZ_ASSERT
(
!
isScriptFieldCopiedToStencil
)
;
immutableFlags_
.
setFlag
(
flag
b
)
;
}
public
:
SharedContext
(
JSContext
*
cx
Kind
kind
CompilationInfo
&
compilationInfo
Directives
directives
SourceExtent
extent
)
;
IMMUTABLE_FLAG_GETTER_SETTER
(
isForEval
IsForEval
)
IMMUTABLE_FLAG_GETTER_SETTER
(
isModule
IsModule
)
IMMUTABLE_FLAG_GETTER_SETTER
(
isFunction
IsFunction
)
IMMUTABLE_FLAG_GETTER_SETTER
(
selfHosted
SelfHosted
)
IMMUTABLE_FLAG_GETTER_SETTER
(
forceStrict
ForceStrict
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasNonSyntacticScope
HasNonSyntacticScope
)
IMMUTABLE_FLAG_GETTER_SETTER
(
noScriptRval
NoScriptRval
)
IMMUTABLE_FLAG_GETTER
(
treatAsRunOnce
TreatAsRunOnce
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasModuleGoal
HasModuleGoal
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasInnerFunctions
HasInnerFunctions
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasDirectEval
HasDirectEval
)
IMMUTABLE_FLAG_GETTER_SETTER
(
bindingsAccessedDynamically
BindingsAccessedDynamically
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasCallSiteObj
HasCallSiteObj
)
const
SourceExtent
&
extent
(
)
const
{
return
extent_
;
}
bool
isFunctionBox
(
)
const
{
return
isFunction
(
)
;
}
inline
FunctionBox
*
asFunctionBox
(
)
;
bool
isModuleContext
(
)
const
{
return
isModule
(
)
;
}
inline
ModuleSharedContext
*
asModuleContext
(
)
;
bool
isGlobalContext
(
)
const
{
return
!
(
isFunction
(
)
|
|
isModule
(
)
|
|
isForEval
(
)
)
;
}
inline
GlobalSharedContext
*
asGlobalContext
(
)
;
bool
isEvalContext
(
)
const
{
return
isForEval
(
)
;
}
inline
EvalSharedContext
*
asEvalContext
(
)
;
bool
isTopLevelContext
(
)
const
{
return
!
isFunction
(
)
;
}
CompilationInfo
&
compilationInfo
(
)
const
{
return
compilationInfo_
;
}
ThisBinding
thisBinding
(
)
const
{
return
thisBinding_
;
}
bool
hasFunctionThisBinding
(
)
const
{
return
thisBinding
(
)
=
=
ThisBinding
:
:
Function
|
|
thisBinding
(
)
=
=
ThisBinding
:
:
DerivedConstructor
;
}
bool
needsThisTDZChecks
(
)
const
{
return
thisBinding
(
)
=
=
ThisBinding
:
:
DerivedConstructor
;
}
bool
isSelfHosted
(
)
const
{
return
selfHosted
(
)
;
}
bool
allowNewTarget
(
)
const
{
return
allowNewTarget_
;
}
bool
allowSuperProperty
(
)
const
{
return
allowSuperProperty_
;
}
bool
allowSuperCall
(
)
const
{
return
allowSuperCall_
;
}
bool
allowArguments
(
)
const
{
return
allowArguments_
;
}
bool
inWith
(
)
const
{
return
inWith_
;
}
bool
inClass
(
)
const
{
return
inClass_
;
}
bool
hasExplicitUseStrict
(
)
const
{
return
hasExplicitUseStrict_
;
}
void
setExplicitUseStrict
(
)
{
hasExplicitUseStrict_
=
true
;
}
ImmutableScriptFlags
immutableFlags
(
)
{
return
immutableFlags_
;
}
inline
bool
allBindingsClosedOver
(
)
;
bool
strict
(
)
const
{
return
hasFlag
(
ImmutableFlags
:
:
Strict
)
|
|
localStrict
;
}
void
setStrictScript
(
)
{
setFlag
(
ImmutableFlags
:
:
Strict
)
;
}
bool
setLocalStrictMode
(
bool
strict
)
{
bool
retVal
=
localStrict
;
localStrict
=
strict
;
return
retVal
;
}
void
copyScriptFields
(
ScriptStencil
&
stencil
)
;
}
;
class
MOZ_STACK_CLASS
GlobalSharedContext
:
public
SharedContext
{
ScopeKind
scopeKind_
;
public
:
Rooted
<
GlobalScope
:
:
Data
*
>
bindings
;
GlobalSharedContext
(
JSContext
*
cx
ScopeKind
scopeKind
CompilationInfo
&
compilationInfo
Directives
directives
SourceExtent
extent
)
:
SharedContext
(
cx
Kind
:
:
Global
compilationInfo
directives
extent
)
scopeKind_
(
scopeKind
)
bindings
(
cx
)
{
MOZ_ASSERT
(
scopeKind
=
=
ScopeKind
:
:
Global
|
|
scopeKind
=
=
ScopeKind
:
:
NonSyntactic
)
;
MOZ_ASSERT
(
thisBinding_
=
=
ThisBinding
:
:
Global
)
;
}
ScopeKind
scopeKind
(
)
const
{
return
scopeKind_
;
}
}
;
inline
GlobalSharedContext
*
SharedContext
:
:
asGlobalContext
(
)
{
MOZ_ASSERT
(
isGlobalContext
(
)
)
;
return
static_cast
<
GlobalSharedContext
*
>
(
this
)
;
}
class
MOZ_STACK_CLASS
EvalSharedContext
:
public
SharedContext
{
public
:
Rooted
<
EvalScope
:
:
Data
*
>
bindings
;
EvalSharedContext
(
JSContext
*
cx
CompilationInfo
&
compilationInfo
Directives
directives
SourceExtent
extent
)
;
}
;
inline
EvalSharedContext
*
SharedContext
:
:
asEvalContext
(
)
{
MOZ_ASSERT
(
isEvalContext
(
)
)
;
return
static_cast
<
EvalSharedContext
*
>
(
this
)
;
}
enum
class
HasHeritage
{
No
Yes
}
;
enum
class
TopLevelFunction
{
No
Yes
}
;
class
FunctionBox
:
public
SharedContext
{
friend
struct
GCThingList
;
FunctionBox
*
traceLink_
=
nullptr
;
mozilla
:
:
Maybe
<
ScopeIndex
>
enclosingScopeIndex_
;
LexicalScope
:
:
Data
*
namedLambdaBindings_
=
nullptr
;
FunctionScope
:
:
Data
*
functionScopeBindings_
=
nullptr
;
VarScope
:
:
Data
*
extraVarScopeBindings_
=
nullptr
;
JSAtom
*
atom_
=
nullptr
;
FunctionIndex
funcDataIndex_
=
FunctionIndex
(
-
1
)
;
FunctionFlags
flags_
=
{
}
;
uint16_t
length_
=
0
;
uint16_t
nargs_
=
0
;
mozilla
:
:
Maybe
<
MemberInitializers
>
memberInitializers_
=
{
}
;
public
:
FunctionNode
*
functionNode
=
nullptr
;
TopLevelFunction
isTopLevel_
=
TopLevelFunction
:
:
No
;
bool
emitBytecode
:
1
;
bool
isStandalone_
:
1
;
bool
wasEmitted_
:
1
;
bool
isSingleton_
:
1
;
bool
isAnnexB
:
1
;
bool
useAsm
:
1
;
bool
hasParameterExprs
:
1
;
bool
hasDestructuringArgs
:
1
;
bool
hasDuplicateParameters
:
1
;
bool
hasExprBody_
:
1
;
bool
usesApply
:
1
;
bool
usesThis
:
1
;
bool
usesReturn
:
1
;
bool
isFunctionFieldCopiedToStencil
:
1
;
FunctionBox
(
JSContext
*
cx
FunctionBox
*
traceListHead
SourceExtent
extent
CompilationInfo
&
compilationInfo
Directives
directives
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
JSAtom
*
explicitName
FunctionFlags
flags
FunctionIndex
index
TopLevelFunction
isTopLevel
)
;
MutableHandle
<
ScriptStencil
>
functionStencil
(
)
const
;
#
ifdef
DEBUG
bool
atomsAreKept
(
)
;
#
endif
MutableHandle
<
LexicalScope
:
:
Data
*
>
namedLambdaBindings
(
)
{
MOZ_ASSERT
(
atomsAreKept
(
)
)
;
return
MutableHandle
<
LexicalScope
:
:
Data
*
>
:
:
fromMarkedLocation
(
&
namedLambdaBindings_
)
;
}
MutableHandle
<
FunctionScope
:
:
Data
*
>
functionScopeBindings
(
)
{
MOZ_ASSERT
(
atomsAreKept
(
)
)
;
return
MutableHandle
<
FunctionScope
:
:
Data
*
>
:
:
fromMarkedLocation
(
&
functionScopeBindings_
)
;
}
MutableHandle
<
VarScope
:
:
Data
*
>
extraVarScopeBindings
(
)
{
MOZ_ASSERT
(
atomsAreKept
(
)
)
;
return
MutableHandle
<
VarScope
:
:
Data
*
>
:
:
fromMarkedLocation
(
&
extraVarScopeBindings_
)
;
}
void
initFromLazyFunction
(
JSFunction
*
fun
)
;
void
initStandalone
(
ScopeContext
&
scopeContext
FunctionFlags
flags
FunctionSyntaxKind
kind
)
;
void
initWithEnclosingParseContext
(
ParseContext
*
enclosing
FunctionFlags
flags
FunctionSyntaxKind
kind
)
;
void
setEnclosingScopeForInnerLazyFunction
(
ScopeIndex
scopeIndex
)
;
bool
isStandalone
(
)
const
{
return
isStandalone_
;
}
void
setIsStandalone
(
bool
isStandalone
)
{
MOZ_ASSERT
(
!
isFunctionFieldCopiedToStencil
)
;
isStandalone_
=
isStandalone
;
}
bool
wasEmitted
(
)
const
{
return
wasEmitted_
;
}
void
setWasEmitted
(
bool
wasEmitted
)
{
wasEmitted_
=
wasEmitted
;
if
(
isFunctionFieldCopiedToStencil
)
{
copyUpdatedWasEmitted
(
)
;
}
}
bool
isSingleton
(
)
const
{
return
isSingleton_
;
}
void
setIsSingleton
(
bool
isSingleton
)
{
isSingleton_
=
isSingleton
;
if
(
isFunctionFieldCopiedToStencil
)
{
copyUpdatedIsSingleton
(
)
;
}
}
MOZ_MUST_USE
bool
setAsmJSModule
(
const
JS
:
:
WasmModule
*
module
)
;
bool
isAsmJSModule
(
)
const
{
return
flags_
.
isAsmJSNative
(
)
;
}
bool
hasEnclosingScopeIndex
(
)
const
{
return
enclosingScopeIndex_
.
isSome
(
)
;
}
ScopeIndex
getEnclosingScopeIndex
(
)
const
{
return
*
enclosingScopeIndex_
;
}
IMMUTABLE_FLAG_GETTER_SETTER
(
isAsync
IsAsync
)
IMMUTABLE_FLAG_GETTER_SETTER
(
isGenerator
IsGenerator
)
IMMUTABLE_FLAG_GETTER_SETTER
(
funHasExtensibleScope
FunHasExtensibleScope
)
IMMUTABLE_FLAG_GETTER_SETTER
(
functionHasThisBinding
FunctionHasThisBinding
)
IMMUTABLE_FLAG_GETTER_SETTER
(
hasRest
HasRest
)
IMMUTABLE_FLAG_GETTER_SETTER
(
needsFunctionEnvironmentObjects
NeedsFunctionEnvironmentObjects
)
IMMUTABLE_FLAG_GETTER_SETTER
(
functionHasExtraBodyVarScope
FunctionHasExtraBodyVarScope
)
IMMUTABLE_FLAG_GETTER_SETTER
(
shouldDeclareArguments
ShouldDeclareArguments
)
IMMUTABLE_FLAG_GETTER_SETTER
(
argumentsHasVarBinding
ArgumentsHasVarBinding
)
bool
needsCallObjectRegardlessOfBindings
(
)
const
{
return
funHasExtensibleScope
(
)
|
|
isGenerator
(
)
|
|
isAsync
(
)
;
}
bool
needsExtraBodyVarEnvironmentRegardlessOfBindings
(
)
const
{
MOZ_ASSERT
(
hasParameterExprs
)
;
return
funHasExtensibleScope
(
)
;
}
bool
isLikelyConstructorWrapper
(
)
const
{
return
argumentsHasVarBinding
(
)
&
&
usesApply
&
&
usesThis
&
&
!
usesReturn
;
}
GeneratorKind
generatorKind
(
)
const
{
return
isGenerator
(
)
?
GeneratorKind
:
:
Generator
:
GeneratorKind
:
:
NotGenerator
;
}
FunctionAsyncKind
asyncKind
(
)
const
{
return
isAsync
(
)
?
FunctionAsyncKind
:
:
AsyncFunction
:
FunctionAsyncKind
:
:
SyncFunction
;
}
bool
needsFinalYield
(
)
const
{
return
isGenerator
(
)
|
|
isAsync
(
)
;
}
bool
needsDotGeneratorName
(
)
const
{
return
isGenerator
(
)
|
|
isAsync
(
)
;
}
bool
needsIteratorResult
(
)
const
{
return
isGenerator
(
)
&
&
!
isAsync
(
)
;
}
bool
needsPromiseResult
(
)
const
{
return
isAsync
(
)
&
&
!
isGenerator
(
)
;
}
bool
isArrow
(
)
const
{
return
flags_
.
isArrow
(
)
;
}
bool
isLambda
(
)
const
{
return
flags_
.
isLambda
(
)
;
}
bool
hasExprBody
(
)
const
{
return
hasExprBody_
;
}
void
setHasExprBody
(
)
{
MOZ_ASSERT
(
isArrow
(
)
)
;
hasExprBody_
=
true
;
}
bool
isNamedLambda
(
)
const
{
return
flags_
.
isNamedLambda
(
explicitName
(
)
!
=
nullptr
)
;
}
bool
isGetter
(
)
const
{
return
flags_
.
isGetter
(
)
;
}
bool
isSetter
(
)
const
{
return
flags_
.
isSetter
(
)
;
}
bool
isMethod
(
)
const
{
return
flags_
.
isMethod
(
)
;
}
bool
isClassConstructor
(
)
const
{
return
flags_
.
isClassConstructor
(
)
;
}
bool
isInterpreted
(
)
const
{
return
flags_
.
hasBaseScript
(
)
;
}
FunctionFlags
:
:
FunctionKind
kind
(
)
{
return
flags_
.
kind
(
)
;
}
bool
hasInferredName
(
)
const
{
return
flags_
.
hasInferredName
(
)
;
}
bool
hasGuessedAtom
(
)
const
{
return
flags_
.
hasGuessedAtom
(
)
;
}
JSAtom
*
displayAtom
(
)
const
{
return
atom_
;
}
JSAtom
*
explicitName
(
)
const
{
return
(
hasInferredName
(
)
|
|
hasGuessedAtom
(
)
)
?
nullptr
:
atom_
;
}
void
setInferredName
(
JSAtom
*
atom
)
{
atom_
=
atom
;
flags_
.
setInferredName
(
)
;
if
(
isFunctionFieldCopiedToStencil
)
{
copyUpdatedAtomAndFlags
(
)
;
}
}
void
setGuessedAtom
(
JSAtom
*
atom
)
{
atom_
=
atom
;
flags_
.
setGuessedAtom
(
)
;
if
(
isFunctionFieldCopiedToStencil
)
{
copyUpdatedAtomAndFlags
(
)
;
}
}
void
setAlwaysNeedsArgsObj
(
)
{
MOZ_ASSERT
(
argumentsHasVarBinding
(
)
)
;
setFlag
(
ImmutableFlags
:
:
AlwaysNeedsArgsObj
)
;
}
bool
needsHomeObject
(
)
const
{
return
hasFlag
(
ImmutableFlags
:
:
NeedsHomeObject
)
;
}
void
setNeedsHomeObject
(
)
{
MOZ_ASSERT
(
flags_
.
allowSuperProperty
(
)
)
;
setFlag
(
ImmutableFlags
:
:
NeedsHomeObject
)
;
}
bool
isDerivedClassConstructor
(
)
const
{
return
hasFlag
(
ImmutableFlags
:
:
IsDerivedClassConstructor
)
;
}
void
setDerivedClassConstructor
(
)
{
MOZ_ASSERT
(
flags_
.
isClassConstructor
(
)
)
;
setFlag
(
ImmutableFlags
:
:
IsDerivedClassConstructor
)
;
}
bool
isFieldInitializer
(
)
const
{
return
hasFlag
(
ImmutableFlags
:
:
IsFieldInitializer
)
;
}
void
setFieldInitializer
(
)
{
MOZ_ASSERT
(
flags_
.
isMethod
(
)
)
;
setFlag
(
ImmutableFlags
:
:
IsFieldInitializer
)
;
}
void
setTreatAsRunOnce
(
bool
treatAsRunOnce
)
{
immutableFlags_
.
setFlag
(
ImmutableFlags
:
:
TreatAsRunOnce
treatAsRunOnce
)
;
if
(
isScriptFieldCopiedToStencil
)
{
copyUpdatedImmutableFlags
(
)
;
}
}
bool
hasSimpleParameterList
(
)
const
{
return
!
hasRest
(
)
&
&
!
hasParameterExprs
&
&
!
hasDestructuringArgs
;
}
bool
hasMappedArgsObj
(
)
const
{
return
!
strict
(
)
&
&
hasSimpleParameterList
(
)
;
}
bool
shouldSuppressRunOnce
(
)
const
{
return
explicitName
(
)
|
|
argumentsHasVarBinding
(
)
|
|
isGenerator
(
)
|
|
isAsync
(
)
;
}
bool
useAsmOrInsideUseAsm
(
)
const
{
return
useAsm
;
}
void
setStart
(
uint32_t
offset
uint32_t
line
uint32_t
column
)
{
MOZ_ASSERT
(
!
isScriptFieldCopiedToStencil
)
;
extent_
.
sourceStart
=
offset
;
extent_
.
lineno
=
line
;
extent_
.
column
=
column
;
}
void
setEnd
(
uint32_t
end
)
{
MOZ_ASSERT
(
!
isScriptFieldCopiedToStencil
)
;
extent_
.
sourceEnd
=
end
;
extent_
.
toStringEnd
=
end
;
}
void
setCtorToStringEnd
(
uint32_t
end
)
{
extent_
.
toStringEnd
=
end
;
if
(
isScriptFieldCopiedToStencil
)
{
copyUpdatedExtent
(
)
;
}
}
void
setCtorFunctionHasThisBinding
(
)
{
immutableFlags_
.
setFlag
(
ImmutableFlags
:
:
FunctionHasThisBinding
true
)
;
if
(
isScriptFieldCopiedToStencil
)
{
copyUpdatedImmutableFlags
(
)
;
}
}
uint16_t
length
(
)
{
return
length_
;
}
void
setLength
(
uint16_t
length
)
{
length_
=
length
;
}
void
setArgCount
(
uint16_t
args
)
{
MOZ_ASSERT
(
!
isFunctionFieldCopiedToStencil
)
;
nargs_
=
args
;
}
size_t
nargs
(
)
{
return
nargs_
;
}
bool
hasMemberInitializers
(
)
const
{
return
memberInitializers_
.
isSome
(
)
;
}
const
MemberInitializers
&
memberInitializers
(
)
const
{
return
*
memberInitializers_
;
}
void
setMemberInitializers
(
MemberInitializers
memberInitializers
)
{
MOZ_ASSERT
(
memberInitializers_
.
isNothing
(
)
)
;
memberInitializers_
=
mozilla
:
:
Some
(
memberInitializers
)
;
if
(
isScriptFieldCopiedToStencil
)
{
copyUpdatedMemberInitializers
(
)
;
}
}
FunctionIndex
index
(
)
{
return
funcDataIndex_
;
}
void
trace
(
JSTracer
*
trc
)
;
static
void
TraceList
(
JSTracer
*
trc
FunctionBox
*
listHead
)
;
FunctionBox
*
traceLink
(
)
{
return
traceLink_
;
}
void
finishScriptFlags
(
)
;
void
copyScriptFields
(
ScriptStencil
&
stencil
)
;
void
copyFunctionFields
(
ScriptStencil
&
stencil
)
;
void
copyUpdatedImmutableFlags
(
)
;
void
copyUpdatedExtent
(
)
;
void
copyUpdatedMemberInitializers
(
)
;
void
copyUpdatedEnclosingScopeIndex
(
)
;
void
copyUpdatedAtomAndFlags
(
)
;
void
copyUpdatedWasEmitted
(
)
;
void
copyUpdatedIsSingleton
(
)
;
}
;
#
undef
FLAG_GETTER_SETTER
#
undef
IMMUTABLE_FLAG_GETTER_SETTER
inline
FunctionBox
*
SharedContext
:
:
asFunctionBox
(
)
{
MOZ_ASSERT
(
isFunctionBox
(
)
)
;
return
static_cast
<
FunctionBox
*
>
(
this
)
;
}
inline
bool
SharedContext
:
:
allBindingsClosedOver
(
)
{
return
bindingsAccessedDynamically
(
)
|
|
(
isFunctionBox
(
)
&
&
(
asFunctionBox
(
)
-
>
isGenerator
(
)
|
|
asFunctionBox
(
)
-
>
isAsync
(
)
)
)
;
}
}
}
#
endif
