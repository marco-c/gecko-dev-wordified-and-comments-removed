#
ifndef
frontend_Parser_h
#
define
frontend_Parser_h
#
include
"
mozilla
/
Array
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
jsiter
.
h
"
#
include
"
jspubtd
.
h
"
#
include
"
ds
/
Nestable
.
h
"
#
include
"
frontend
/
BytecodeCompiler
.
h
"
#
include
"
frontend
/
FullParseHandler
.
h
"
#
include
"
frontend
/
LanguageExtensions
.
h
"
#
include
"
frontend
/
NameAnalysisTypes
.
h
"
#
include
"
frontend
/
NameCollections
.
h
"
#
include
"
frontend
/
ParseContext
.
h
"
#
include
"
frontend
/
SharedContext
.
h
"
#
include
"
frontend
/
SyntaxParseHandler
.
h
"
#
include
"
frontend
/
TokenStream
.
h
"
namespace
js
{
class
ModuleObject
;
namespace
frontend
{
class
ParserBase
;
template
<
class
ParseHandler
typename
CharT
>
class
GeneralParser
;
class
SourceParseContext
:
public
ParseContext
{
public
:
template
<
typename
ParseHandler
typename
CharT
>
SourceParseContext
(
GeneralParser
<
ParseHandler
CharT
>
*
prs
SharedContext
*
sc
Directives
*
newDirectives
)
:
ParseContext
(
prs
-
>
context
prs
-
>
pc
sc
prs
-
>
anyChars
prs
-
>
usedNames
newDirectives
mozilla
:
:
IsSame
<
ParseHandler
FullParseHandler
>
:
:
value
)
{
}
}
;
template
<
>
inline
bool
ParseContext
:
:
Statement
:
:
is
<
ParseContext
:
:
LabelStatement
>
(
)
const
{
return
kind_
=
=
StatementKind
:
:
Label
;
}
template
<
>
inline
bool
ParseContext
:
:
Statement
:
:
is
<
ParseContext
:
:
ClassStatement
>
(
)
const
{
return
kind_
=
=
StatementKind
:
:
Class
;
}
template
<
typename
T
>
inline
T
&
ParseContext
:
:
Statement
:
:
as
(
)
{
MOZ_ASSERT
(
is
<
T
>
(
)
)
;
return
static_cast
<
T
&
>
(
*
this
)
;
}
inline
ParseContext
:
:
Scope
:
:
BindingIter
ParseContext
:
:
Scope
:
:
bindings
(
ParseContext
*
pc
)
{
return
BindingIter
(
*
this
pc
-
>
varScope_
=
=
this
|
|
pc
-
>
functionScope_
.
ptrOr
(
nullptr
)
=
=
this
)
;
}
inline
Directives
:
:
Directives
(
ParseContext
*
parent
)
:
strict_
(
parent
-
>
sc
(
)
-
>
strict
(
)
)
asmJS_
(
parent
-
>
useAsmOrInsideUseAsm
(
)
)
{
}
enum
VarContext
{
HoistVars
DontHoistVars
}
;
enum
PropListType
{
ObjectLiteral
ClassBody
DerivedClassBody
}
;
enum
class
PropertyType
{
Normal
Shorthand
CoverInitializedName
Getter
GetterNoExpressionClosure
Setter
SetterNoExpressionClosure
Method
GeneratorMethod
AsyncMethod
AsyncGeneratorMethod
Constructor
DerivedConstructor
}
;
enum
AwaitHandling
:
uint8_t
{
AwaitIsName
AwaitIsKeyword
AwaitIsModuleKeyword
}
;
template
<
class
ParseHandler
typename
CharT
>
class
AutoAwaitIsKeyword
;
class
ParserBase
:
public
StrictModeGetter
private
JS
:
:
AutoGCRooter
{
private
:
ParserBase
*
thisForCtor
(
)
{
return
this
;
}
friend
void
js
:
:
frontend
:
:
TraceParser
(
JSTracer
*
trc
JS
:
:
AutoGCRooter
*
parser
)
;
public
:
JSContext
*
const
context
;
LifoAlloc
&
alloc
;
TokenStreamAnyChars
anyChars
;
LifoAlloc
:
:
Mark
tempPoolMark
;
ObjectBox
*
traceListHead
;
ParseContext
*
pc
;
UsedNameTracker
&
usedNames
;
ScriptSource
*
ss
;
AutoKeepAtoms
keepAtoms
;
const
bool
foldConstants
:
1
;
protected
:
#
if
DEBUG
bool
checkOptionsCalled
:
1
;
#
endif
bool
isUnexpectedEOF_
:
1
;
uint8_t
awaitHandling_
:
2
;
public
:
bool
awaitIsKeyword
(
)
const
{
return
awaitHandling_
!
=
AwaitIsName
;
}
template
<
class
typename
>
friend
class
AutoAwaitIsKeyword
;
ParserBase
(
JSContext
*
cx
LifoAlloc
&
alloc
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
bool
foldConstants
UsedNameTracker
&
usedNames
)
;
~
ParserBase
(
)
;
bool
checkOptions
(
)
;
void
trace
(
JSTracer
*
trc
)
;
const
char
*
getFilename
(
)
const
{
return
anyChars
.
getFilename
(
)
;
}
TokenPos
pos
(
)
const
{
return
anyChars
.
currentToken
(
)
.
pos
;
}
bool
yieldExpressionsSupported
(
)
const
{
return
pc
-
>
isGenerator
(
)
;
}
virtual
bool
strictMode
(
)
{
return
pc
-
>
sc
(
)
-
>
strict
(
)
;
}
bool
setLocalStrictMode
(
bool
strict
)
{
MOZ_ASSERT
(
anyChars
.
debugHasNoLookahead
(
)
)
;
return
pc
-
>
sc
(
)
-
>
setLocalStrictMode
(
strict
)
;
}
const
ReadOnlyCompileOptions
&
options
(
)
const
{
return
anyChars
.
options
(
)
;
}
bool
isUnexpectedEOF
(
)
const
{
return
isUnexpectedEOF_
;
}
MOZ_MUST_USE
bool
warningNoOffset
(
unsigned
errorNumber
.
.
.
)
;
void
errorNoOffset
(
unsigned
errorNumber
.
.
.
)
;
bool
isValidStrictBinding
(
PropertyName
*
name
)
;
void
addTelemetry
(
DeprecatedLanguageExtension
e
)
;
bool
hasValidSimpleStrictParameterNames
(
)
;
JSFunction
*
newFunction
(
HandleAtom
atom
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
HandleObject
proto
)
;
class
Mark
{
friend
class
ParserBase
;
LifoAlloc
:
:
Mark
mark
;
ObjectBox
*
traceListHead
;
}
;
Mark
mark
(
)
const
{
Mark
m
;
m
.
mark
=
alloc
.
mark
(
)
;
m
.
traceListHead
=
traceListHead
;
return
m
;
}
void
release
(
Mark
m
)
{
alloc
.
release
(
m
.
mark
)
;
traceListHead
=
m
.
traceListHead
;
}
ObjectBox
*
newObjectBox
(
JSObject
*
obj
)
;
mozilla
:
:
Maybe
<
GlobalScope
:
:
Data
*
>
newGlobalScopeData
(
ParseContext
:
:
Scope
&
scope
)
;
mozilla
:
:
Maybe
<
ModuleScope
:
:
Data
*
>
newModuleScopeData
(
ParseContext
:
:
Scope
&
scope
)
;
mozilla
:
:
Maybe
<
EvalScope
:
:
Data
*
>
newEvalScopeData
(
ParseContext
:
:
Scope
&
scope
)
;
mozilla
:
:
Maybe
<
FunctionScope
:
:
Data
*
>
newFunctionScopeData
(
ParseContext
:
:
Scope
&
scope
bool
hasParameterExprs
)
;
mozilla
:
:
Maybe
<
VarScope
:
:
Data
*
>
newVarScopeData
(
ParseContext
:
:
Scope
&
scope
)
;
mozilla
:
:
Maybe
<
LexicalScope
:
:
Data
*
>
newLexicalScopeData
(
ParseContext
:
:
Scope
&
scope
)
;
protected
:
enum
InvokedPrediction
{
PredictUninvoked
=
false
PredictInvoked
=
true
}
;
enum
ForInitLocation
{
InForInit
NotInForInit
}
;
bool
noteUsedNameInternal
(
HandlePropertyName
name
)
;
bool
hasUsedName
(
HandlePropertyName
name
)
;
bool
hasUsedFunctionSpecialName
(
HandlePropertyName
name
)
;
bool
declareDotGeneratorName
(
)
;
}
;
inline
ParseContext
:
:
Scope
:
:
Scope
(
ParserBase
*
parser
)
:
Nestable
<
Scope
>
(
&
parser
-
>
pc
-
>
innermostScope_
)
declared_
(
parser
-
>
context
-
>
frontendCollectionPool
(
)
)
possibleAnnexBFunctionBoxes_
(
parser
-
>
context
-
>
frontendCollectionPool
(
)
)
id_
(
parser
-
>
usedNames
.
nextScopeId
(
)
)
{
}
inline
ParseContext
:
:
Scope
:
:
Scope
(
JSContext
*
cx
ParseContext
*
pc
UsedNameTracker
&
usedNames
)
:
Nestable
<
Scope
>
(
&
pc
-
>
innermostScope_
)
declared_
(
cx
-
>
frontendCollectionPool
(
)
)
possibleAnnexBFunctionBoxes_
(
cx
-
>
frontendCollectionPool
(
)
)
id_
(
usedNames
.
nextScopeId
(
)
)
{
}
inline
ParseContext
:
:
VarScope
:
:
VarScope
(
ParserBase
*
parser
)
:
Scope
(
parser
)
{
useAsVarScope
(
parser
-
>
pc
)
;
}
enum
FunctionCallBehavior
{
PermitAssignmentToFunctionCalls
ForbidAssignmentToFunctionCalls
}
;
template
<
class
ParseHandler
>
class
PerHandlerParser
:
public
ParserBase
{
private
:
using
Node
=
typename
ParseHandler
:
:
Node
;
protected
:
ParseHandler
handler
;
void
*
internalSyntaxParser_
;
protected
:
PerHandlerParser
(
JSContext
*
cx
LifoAlloc
&
alloc
const
ReadOnlyCompileOptions
&
options
const
char16_t
*
chars
size_t
length
bool
foldConstants
UsedNameTracker
&
usedNames
LazyScript
*
lazyOuterFunction
)
;
static
Node
null
(
)
{
return
ParseHandler
:
:
null
(
)
;
}
const
char
*
nameIsArgumentsOrEval
(
Node
node
)
;
bool
noteDestructuredPositionalFormalParameter
(
Node
fn
Node
destruct
)
;
bool
noteUsedName
(
HandlePropertyName
name
)
{
if
(
handler
.
canSkipLazyClosedOverBindings
(
)
)
return
true
;
return
ParserBase
:
:
noteUsedNameInternal
(
name
)
;
}
bool
propagateFreeNamesAndMarkClosedOverBindings
(
ParseContext
:
:
Scope
&
scope
)
;
bool
finishFunctionScopes
(
bool
isStandaloneFunction
)
;
Node
finishLexicalScope
(
ParseContext
:
:
Scope
&
scope
Node
body
)
;
bool
finishFunction
(
bool
isStandaloneFunction
=
false
)
;
bool
declareFunctionThis
(
)
;
inline
Node
newName
(
PropertyName
*
name
)
;
inline
Node
newName
(
PropertyName
*
name
TokenPos
pos
)
;
Node
newInternalDotName
(
HandlePropertyName
name
)
;
Node
newThisName
(
)
;
Node
newDotGeneratorName
(
)
;
inline
void
disableSyntaxParser
(
)
;
inline
bool
abortIfSyntaxParser
(
)
;
inline
bool
hadAbortedSyntaxParse
(
)
;
inline
void
clearAbortedSyntaxParse
(
)
;
public
:
bool
isValidSimpleAssignmentTarget
(
Node
node
FunctionCallBehavior
behavior
=
ForbidAssignmentToFunctionCalls
)
;
FunctionBox
*
newFunctionBox
(
Node
fn
JSFunction
*
fun
uint32_t
toStringStart
Directives
directives
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
)
;
}
;
#
define
ABORTED_SYNTAX_PARSE_SENTINEL
reinterpret_cast
<
void
*
>
(
0x1
)
template
<
>
inline
void
PerHandlerParser
<
SyntaxParseHandler
>
:
:
disableSyntaxParser
(
)
{
}
template
<
>
inline
bool
PerHandlerParser
<
SyntaxParseHandler
>
:
:
abortIfSyntaxParser
(
)
{
internalSyntaxParser_
=
ABORTED_SYNTAX_PARSE_SENTINEL
;
return
false
;
}
template
<
>
inline
bool
PerHandlerParser
<
SyntaxParseHandler
>
:
:
hadAbortedSyntaxParse
(
)
{
return
internalSyntaxParser_
=
=
ABORTED_SYNTAX_PARSE_SENTINEL
;
}
template
<
>
inline
void
PerHandlerParser
<
SyntaxParseHandler
>
:
:
clearAbortedSyntaxParse
(
)
{
internalSyntaxParser_
=
nullptr
;
}
#
undef
ABORTED_SYNTAX_PARSE_SENTINEL
template
<
>
inline
void
PerHandlerParser
<
FullParseHandler
>
:
:
disableSyntaxParser
(
)
{
internalSyntaxParser_
=
nullptr
;
}
template
<
>
inline
bool
PerHandlerParser
<
FullParseHandler
>
:
:
abortIfSyntaxParser
(
)
{
disableSyntaxParser
(
)
;
return
true
;
}
template
<
>
inline
bool
PerHandlerParser
<
FullParseHandler
>
:
:
hadAbortedSyntaxParse
(
)
{
return
false
;
}
template
<
>
inline
void
PerHandlerParser
<
FullParseHandler
>
:
:
clearAbortedSyntaxParse
(
)
{
}
enum
class
ExpressionClosure
{
Allowed
Forbidden
}
;
template
<
class
Parser
>
class
ParserAnyCharsAccess
{
public
:
using
TokenStreamSpecific
=
typename
Parser
:
:
TokenStream
;
using
TokenStreamChars
=
typename
TokenStreamSpecific
:
:
CharsBase
;
static
inline
TokenStreamAnyChars
&
anyChars
(
TokenStreamChars
*
ts
)
;
static
inline
const
TokenStreamAnyChars
&
anyChars
(
const
TokenStreamChars
*
ts
)
;
}
;
enum
YieldHandling
{
YieldIsName
YieldIsKeyword
}
;
enum
InHandling
{
InAllowed
InProhibited
}
;
enum
DefaultHandling
{
NameRequired
AllowDefaultName
}
;
enum
TripledotHandling
{
TripledotAllowed
TripledotProhibited
}
;
template
<
class
ParseHandler
typename
CharT
>
class
Parser
;
template
<
class
ParseHandler
typename
CharT
>
class
GeneralParser
:
public
PerHandlerParser
<
ParseHandler
>
{
private
:
using
Base
=
PerHandlerParser
<
ParseHandler
>
;
using
FinalParser
=
Parser
<
ParseHandler
CharT
>
;
using
Node
=
typename
ParseHandler
:
:
Node
;
using
typename
Base
:
:
InvokedPrediction
;
using
SyntaxParser
=
Parser
<
SyntaxParseHandler
CharT
>
;
protected
:
using
Modifier
=
TokenStreamShared
:
:
Modifier
;
using
Base
:
:
PredictUninvoked
;
using
Base
:
:
PredictInvoked
;
using
Base
:
:
alloc
;
using
Base
:
:
awaitIsKeyword
;
#
if
DEBUG
using
Base
:
:
checkOptionsCalled
;
#
endif
using
Base
:
:
finishFunctionScopes
;
using
Base
:
:
finishLexicalScope
;
using
Base
:
:
foldConstants
;
using
Base
:
:
getFilename
;
using
Base
:
:
hasUsedFunctionSpecialName
;
using
Base
:
:
hasValidSimpleStrictParameterNames
;
using
Base
:
:
isUnexpectedEOF_
;
using
Base
:
:
keepAtoms
;
using
Base
:
:
nameIsArgumentsOrEval
;
using
Base
:
:
newFunction
;
using
Base
:
:
newFunctionBox
;
using
Base
:
:
newName
;
using
Base
:
:
null
;
using
Base
:
:
options
;
using
Base
:
:
pos
;
using
Base
:
:
propagateFreeNamesAndMarkClosedOverBindings
;
using
Base
:
:
setLocalStrictMode
;
using
Base
:
:
traceListHead
;
using
Base
:
:
yieldExpressionsSupported
;
using
Base
:
:
disableSyntaxParser
;
using
Base
:
:
abortIfSyntaxParser
;
using
Base
:
:
hadAbortedSyntaxParse
;
using
Base
:
:
clearAbortedSyntaxParse
;
public
:
using
Base
:
:
anyChars
;
using
Base
:
:
context
;
using
Base
:
:
handler
;
using
Base
:
:
isValidSimpleAssignmentTarget
;
using
Base
:
:
pc
;
using
Base
:
:
usedNames
;
private
:
using
Base
:
:
declareDotGeneratorName
;
using
Base
:
:
declareFunctionThis
;
using
Base
:
:
finishFunction
;
using
Base
:
:
hasUsedName
;
using
Base
:
:
newDotGeneratorName
;
using
Base
:
:
newInternalDotName
;
using
Base
:
:
newThisName
;
using
Base
:
:
noteDestructuredPositionalFormalParameter
;
using
Base
:
:
noteUsedName
;
private
:
inline
FinalParser
*
asFinalParser
(
)
;
inline
const
FinalParser
*
asFinalParser
(
)
const
;
class
MOZ_STACK_CLASS
PossibleError
{
private
:
enum
class
ErrorKind
{
Expression
Destructuring
DestructuringWarning
}
;
enum
class
ErrorState
{
None
Pending
}
;
struct
Error
{
ErrorState
state_
=
ErrorState
:
:
None
;
uint32_t
offset_
;
unsigned
errorNumber_
;
}
;
GeneralParser
<
ParseHandler
CharT
>
&
parser_
;
Error
exprError_
;
Error
destructuringError_
;
Error
destructuringWarning_
;
Error
&
error
(
ErrorKind
kind
)
;
bool
hasError
(
ErrorKind
kind
)
;
void
setResolved
(
ErrorKind
kind
)
;
void
setPending
(
ErrorKind
kind
const
TokenPos
&
pos
unsigned
errorNumber
)
;
MOZ_MUST_USE
bool
checkForError
(
ErrorKind
kind
)
;
MOZ_MUST_USE
bool
checkForWarning
(
ErrorKind
kind
)
;
void
transferErrorTo
(
ErrorKind
kind
PossibleError
*
other
)
;
public
:
explicit
PossibleError
(
GeneralParser
<
ParseHandler
CharT
>
&
parser
)
;
bool
hasPendingDestructuringError
(
)
;
void
setPendingDestructuringErrorAt
(
const
TokenPos
&
pos
unsigned
errorNumber
)
;
void
setPendingDestructuringWarningAt
(
const
TokenPos
&
pos
unsigned
errorNumber
)
;
void
setPendingExpressionErrorAt
(
const
TokenPos
&
pos
unsigned
errorNumber
)
;
MOZ_MUST_USE
bool
checkForDestructuringErrorOrWarning
(
)
;
MOZ_MUST_USE
bool
checkForExpressionError
(
)
;
void
transferErrorsTo
(
PossibleError
*
other
)
;
}
;
private
:
using
Base
:
:
internalSyntaxParser_
;
protected
:
SyntaxParser
*
getSyntaxParser
(
)
const
{
return
reinterpret_cast
<
SyntaxParser
*
>
(
internalSyntaxParser_
)
;
}
void
setSyntaxParser
(
SyntaxParser
*
syntaxParser
)
{
internalSyntaxParser_
=
syntaxParser
;
}
public
:
using
TokenStream
=
TokenStreamSpecific
<
CharT
ParserAnyCharsAccess
<
GeneralParser
>
>
;
TokenStream
tokenStream
;
void
prepareNodeForMutation
(
Node
node
)
{
handler
.
prepareNodeForMutation
(
node
)
;
}
void
freeTree
(
Node
node
)
{
handler
.
freeTree
(
node
)
;
}
public
:
GeneralParser
(
JSContext
*
cx
LifoAlloc
&
alloc
const
ReadOnlyCompileOptions
&
options
const
CharT
*
chars
size_t
length
bool
foldConstants
UsedNameTracker
&
usedNames
SyntaxParser
*
syntaxParser
LazyScript
*
lazyOuterFunction
)
;
inline
void
setAwaitHandling
(
AwaitHandling
awaitHandling
)
;
Node
parse
(
)
;
void
error
(
unsigned
errorNumber
.
.
.
)
;
void
errorWithNotes
(
UniquePtr
<
JSErrorNotes
>
notes
unsigned
errorNumber
.
.
.
)
;
void
errorAt
(
uint32_t
offset
unsigned
errorNumber
.
.
.
)
;
void
errorWithNotesAt
(
UniquePtr
<
JSErrorNotes
>
notes
uint32_t
offset
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
strictModeError
(
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
strictModeErrorAt
(
uint32_t
offset
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
warning
(
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
warningAt
(
uint32_t
offset
unsigned
errorNumber
.
.
.
)
;
bool
warnOnceAboutExprClosure
(
)
;
MOZ_MUST_USE
bool
extraWarning
(
unsigned
errorNumber
.
.
.
)
;
MOZ_MUST_USE
bool
extraWarningAt
(
uint32_t
offset
unsigned
errorNumber
.
.
.
)
;
private
:
GeneralParser
*
thisForCtor
(
)
{
return
this
;
}
Node
noSubstitutionTaggedTemplate
(
)
;
Node
noSubstitutionUntaggedTemplate
(
)
;
Node
templateLiteral
(
YieldHandling
yieldHandling
)
;
bool
taggedTemplate
(
YieldHandling
yieldHandling
Node
nodeList
TokenKind
tt
)
;
bool
appendToCallSiteObj
(
Node
callSiteObj
)
;
bool
addExprAndGetNextTemplStrToken
(
YieldHandling
yieldHandling
Node
nodeList
TokenKind
*
ttp
)
;
inline
bool
trySyntaxParseInnerFunction
(
Node
funcNode
HandleFunction
fun
uint32_t
toStringStart
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
tryAnnexB
Directives
inheritedDirectives
Directives
*
newDirectives
)
;
inline
bool
skipLazyInnerFunction
(
Node
funcNode
uint32_t
toStringStart
FunctionSyntaxKind
kind
bool
tryAnnexB
)
;
public
:
Node
statementListItem
(
YieldHandling
yieldHandling
bool
canHaveDirectives
=
false
)
;
bool
innerFunctionForFunctionBox
(
Node
funcNode
ParseContext
*
outerpc
FunctionBox
*
funbox
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
Directives
*
newDirectives
)
;
bool
functionFormalParametersAndBody
(
InHandling
inHandling
YieldHandling
yieldHandling
Node
pn
FunctionSyntaxKind
kind
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
=
mozilla
:
:
Nothing
(
)
bool
isStandaloneFunction
=
false
)
;
private
:
Node
functionStmt
(
uint32_t
toStringStart
YieldHandling
yieldHandling
DefaultHandling
defaultHandling
FunctionAsyncKind
asyncKind
=
FunctionAsyncKind
:
:
SyncFunction
)
;
Node
functionExpr
(
uint32_t
toStringStart
ExpressionClosure
expressionClosureHandling
InvokedPrediction
invoked
FunctionAsyncKind
asyncKind
)
;
Node
statement
(
YieldHandling
yieldHandling
)
;
bool
maybeParseDirective
(
Node
list
Node
pn
bool
*
cont
)
;
Node
blockStatement
(
YieldHandling
yieldHandling
unsigned
errorNumber
=
JSMSG_CURLY_IN_COMPOUND
)
;
Node
doWhileStatement
(
YieldHandling
yieldHandling
)
;
Node
whileStatement
(
YieldHandling
yieldHandling
)
;
Node
forStatement
(
YieldHandling
yieldHandling
)
;
bool
forHeadStart
(
YieldHandling
yieldHandling
ParseNodeKind
*
forHeadKind
Node
*
forInitialPart
mozilla
:
:
Maybe
<
ParseContext
:
:
Scope
>
&
forLetImpliedScope
Node
*
forInOrOfExpression
)
;
Node
expressionAfterForInOrOf
(
ParseNodeKind
forHeadKind
YieldHandling
yieldHandling
)
;
Node
switchStatement
(
YieldHandling
yieldHandling
)
;
Node
continueStatement
(
YieldHandling
yieldHandling
)
;
Node
breakStatement
(
YieldHandling
yieldHandling
)
;
Node
returnStatement
(
YieldHandling
yieldHandling
)
;
Node
withStatement
(
YieldHandling
yieldHandling
)
;
Node
throwStatement
(
YieldHandling
yieldHandling
)
;
Node
tryStatement
(
YieldHandling
yieldHandling
)
;
Node
catchBlockStatement
(
YieldHandling
yieldHandling
ParseContext
:
:
Scope
&
catchParamScope
)
;
Node
debuggerStatement
(
)
;
Node
variableStatement
(
YieldHandling
yieldHandling
)
;
Node
labeledStatement
(
YieldHandling
yieldHandling
)
;
Node
labeledItem
(
YieldHandling
yieldHandling
)
;
Node
ifStatement
(
YieldHandling
yieldHandling
)
;
Node
consequentOrAlternative
(
YieldHandling
yieldHandling
)
;
bool
nextTokenContinuesLetDeclaration
(
TokenKind
next
)
;
Node
lexicalDeclaration
(
YieldHandling
yieldHandling
DeclarationKind
kind
)
;
inline
Node
importDeclaration
(
)
;
inline
bool
processExport
(
Node
node
)
;
inline
bool
processExportFrom
(
Node
node
)
;
Node
exportFrom
(
uint32_t
begin
Node
specList
)
;
Node
exportBatch
(
uint32_t
begin
)
;
inline
bool
checkLocalExportNames
(
Node
node
)
;
Node
exportClause
(
uint32_t
begin
)
;
Node
exportFunctionDeclaration
(
uint32_t
begin
uint32_t
toStringStart
FunctionAsyncKind
asyncKind
=
FunctionAsyncKind
:
:
SyncFunction
)
;
Node
exportVariableStatement
(
uint32_t
begin
)
;
Node
exportClassDeclaration
(
uint32_t
begin
)
;
Node
exportLexicalDeclaration
(
uint32_t
begin
DeclarationKind
kind
)
;
Node
exportDefaultFunctionDeclaration
(
uint32_t
begin
uint32_t
toStringStart
FunctionAsyncKind
asyncKind
=
FunctionAsyncKind
:
:
SyncFunction
)
;
Node
exportDefaultClassDeclaration
(
uint32_t
begin
)
;
Node
exportDefaultAssignExpr
(
uint32_t
begin
)
;
Node
exportDefault
(
uint32_t
begin
)
;
Node
exportDeclaration
(
)
;
Node
expressionStatement
(
YieldHandling
yieldHandling
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
declarationList
(
YieldHandling
yieldHandling
ParseNodeKind
kind
ParseNodeKind
*
forHeadKind
=
nullptr
Node
*
forInOrOfExpression
=
nullptr
)
;
Node
declarationPattern
(
DeclarationKind
declKind
TokenKind
tt
bool
initialDeclaration
YieldHandling
yieldHandling
ParseNodeKind
*
forHeadKind
Node
*
forInOrOfExpression
)
;
Node
declarationName
(
DeclarationKind
declKind
TokenKind
tt
bool
initialDeclaration
YieldHandling
yieldHandling
ParseNodeKind
*
forHeadKind
Node
*
forInOrOfExpression
)
;
bool
initializerInNameDeclaration
(
Node
binding
DeclarationKind
declKind
bool
initialDeclaration
YieldHandling
yieldHandling
ParseNodeKind
*
forHeadKind
Node
*
forInOrOfExpression
)
;
Node
expr
(
InHandling
inHandling
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
PossibleError
*
possibleError
=
nullptr
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
assignExpr
(
InHandling
inHandling
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
PossibleError
*
possibleError
=
nullptr
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
assignExprWithoutYieldOrAwait
(
YieldHandling
yieldHandling
)
;
Node
yieldExpression
(
InHandling
inHandling
)
;
Node
condExpr
(
InHandling
inHandling
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
ExpressionClosure
expressionClosureHandling
PossibleError
*
possibleError
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
orExpr
(
InHandling
inHandling
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
ExpressionClosure
expressionClosureHandling
PossibleError
*
possibleError
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
unaryExpr
(
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
ExpressionClosure
expressionClosureHandling
PossibleError
*
possibleError
=
nullptr
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
memberExpr
(
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
ExpressionClosure
expressionClosureHandling
TokenKind
tt
bool
allowCallSyntax
=
true
PossibleError
*
possibleError
=
nullptr
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
primaryExpr
(
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
ExpressionClosure
expressionClosureHandling
TokenKind
tt
PossibleError
*
possibleError
InvokedPrediction
invoked
=
PredictUninvoked
)
;
Node
exprInParens
(
InHandling
inHandling
YieldHandling
yieldHandling
TripledotHandling
tripledotHandling
PossibleError
*
possibleError
=
nullptr
)
;
bool
tryNewTarget
(
Node
&
newTarget
)
;
bool
checkAndMarkSuperScope
(
)
;
Node
methodDefinition
(
uint32_t
toStringStart
PropertyType
propType
HandleAtom
funName
)
;
bool
functionArguments
(
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
Node
funcpn
)
;
Node
functionDefinition
(
Node
funcNode
uint32_t
toStringStart
InHandling
inHandling
YieldHandling
yieldHandling
HandleAtom
name
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
tryAnnexB
=
false
)
;
enum
FunctionBodyType
{
StatementListBody
ExpressionBody
}
;
Node
functionBody
(
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
FunctionBodyType
type
)
;
Node
unaryOpExpr
(
YieldHandling
yieldHandling
ParseNodeKind
kind
uint32_t
begin
)
;
Node
condition
(
InHandling
inHandling
YieldHandling
yieldHandling
)
;
bool
argumentList
(
YieldHandling
yieldHandling
Node
listNode
bool
*
isSpread
PossibleError
*
possibleError
=
nullptr
)
;
Node
destructuringDeclaration
(
DeclarationKind
kind
YieldHandling
yieldHandling
TokenKind
tt
)
;
Node
destructuringDeclarationWithoutYieldOrAwait
(
DeclarationKind
kind
YieldHandling
yieldHandling
TokenKind
tt
)
;
inline
bool
checkExportedName
(
JSAtom
*
exportName
)
;
inline
bool
checkExportedNamesForDeclaration
(
Node
node
)
;
inline
bool
checkExportedNameForFunction
(
Node
node
)
;
inline
bool
checkExportedNameForClass
(
Node
node
)
;
inline
bool
checkExportedNameForClause
(
Node
node
)
;
enum
ClassContext
{
ClassStatement
ClassExpression
}
;
Node
classDefinition
(
YieldHandling
yieldHandling
ClassContext
classContext
DefaultHandling
defaultHandling
)
;
bool
checkBindingIdentifier
(
PropertyName
*
ident
uint32_t
offset
YieldHandling
yieldHandling
TokenKind
hint
=
TOK_LIMIT
)
;
PropertyName
*
labelOrIdentifierReference
(
YieldHandling
yieldHandling
)
;
PropertyName
*
labelIdentifier
(
YieldHandling
yieldHandling
)
{
return
labelOrIdentifierReference
(
yieldHandling
)
;
}
PropertyName
*
identifierReference
(
YieldHandling
yieldHandling
)
{
return
labelOrIdentifierReference
(
yieldHandling
)
;
}
Node
identifierReference
(
Handle
<
PropertyName
*
>
name
)
;
bool
matchLabel
(
YieldHandling
yieldHandling
MutableHandle
<
PropertyName
*
>
label
)
;
bool
matchInOrOf
(
bool
*
isForInp
bool
*
isForOfp
)
;
bool
declareFunctionArgumentsObject
(
)
;
bool
leaveInnerFunction
(
ParseContext
*
outerpc
)
;
private
:
bool
checkIncDecOperand
(
Node
operand
uint32_t
operandOffset
)
;
bool
checkStrictAssignment
(
Node
lhs
)
;
void
reportMissingClosing
(
unsigned
errorNumber
unsigned
noteNumber
uint32_t
openedPos
)
;
void
reportRedeclaration
(
HandlePropertyName
name
DeclarationKind
prevKind
TokenPos
pos
uint32_t
prevPos
)
;
bool
notePositionalFormalParameter
(
Node
fn
HandlePropertyName
name
uint32_t
beginPos
bool
disallowDuplicateParams
bool
*
duplicatedParam
)
;
bool
checkLexicalDeclarationDirectlyWithinBlock
(
ParseContext
:
:
Statement
&
stmt
DeclarationKind
kind
TokenPos
pos
)
;
Node
propertyName
(
YieldHandling
yieldHandling
const
mozilla
:
:
Maybe
<
DeclarationKind
>
&
maybeDecl
Node
propList
PropertyType
*
propType
MutableHandleAtom
propAtom
)
;
Node
computedPropertyName
(
YieldHandling
yieldHandling
const
mozilla
:
:
Maybe
<
DeclarationKind
>
&
maybeDecl
Node
literal
)
;
Node
arrayInitializer
(
YieldHandling
yieldHandling
PossibleError
*
possibleError
)
;
inline
Node
newRegExp
(
)
;
Node
objectLiteral
(
YieldHandling
yieldHandling
PossibleError
*
possibleError
)
;
Node
bindingInitializer
(
Node
lhs
DeclarationKind
kind
YieldHandling
yieldHandling
)
;
Node
bindingIdentifier
(
DeclarationKind
kind
YieldHandling
yieldHandling
)
;
Node
bindingIdentifierOrPattern
(
DeclarationKind
kind
YieldHandling
yieldHandling
TokenKind
tt
)
;
Node
objectBindingPattern
(
DeclarationKind
kind
YieldHandling
yieldHandling
)
;
Node
arrayBindingPattern
(
DeclarationKind
kind
YieldHandling
yieldHandling
)
;
enum
class
TargetBehavior
{
PermitAssignmentPattern
ForbidAssignmentPattern
}
;
bool
checkDestructuringAssignmentTarget
(
Node
expr
TokenPos
exprPos
PossibleError
*
exprPossibleError
PossibleError
*
possibleError
TargetBehavior
behavior
=
TargetBehavior
:
:
PermitAssignmentPattern
)
;
void
checkDestructuringAssignmentName
(
Node
name
TokenPos
namePos
PossibleError
*
possibleError
)
;
bool
checkDestructuringAssignmentElement
(
Node
expr
TokenPos
exprPos
PossibleError
*
exprPossibleError
PossibleError
*
possibleError
)
;
Node
newNumber
(
const
Token
&
tok
)
{
return
handler
.
newNumber
(
tok
.
number
(
)
tok
.
decimalPoint
(
)
tok
.
pos
)
;
}
protected
:
Node
stringLiteral
(
)
;
PropertyName
*
bindingIdentifier
(
YieldHandling
yieldHandling
)
;
bool
checkLabelOrIdentifierReference
(
PropertyName
*
ident
uint32_t
offset
YieldHandling
yieldHandling
TokenKind
hint
=
TOK_LIMIT
)
;
Node
statementList
(
YieldHandling
yieldHandling
)
;
bool
innerFunction
(
Node
funcNode
ParseContext
*
outerpc
HandleFunction
fun
uint32_t
toStringStart
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
tryAnnexB
Directives
inheritedDirectives
Directives
*
newDirectives
)
;
bool
matchOrInsertSemicolon
(
)
;
bool
noteDeclaredName
(
HandlePropertyName
name
DeclarationKind
kind
TokenPos
pos
)
;
private
:
JSAtom
*
prefixAccessorName
(
PropertyType
propType
HandleAtom
propAtom
)
;
inline
bool
asmJS
(
Node
list
)
;
}
;
template
<
typename
CharT
>
class
Parser
<
SyntaxParseHandler
CharT
>
final
:
public
GeneralParser
<
SyntaxParseHandler
CharT
>
{
using
Base
=
GeneralParser
<
SyntaxParseHandler
CharT
>
;
using
Node
=
SyntaxParseHandler
:
:
Node
;
using
SyntaxParser
=
Parser
<
SyntaxParseHandler
CharT
>
;
friend
class
GeneralParser
<
SyntaxParseHandler
CharT
>
;
public
:
using
Base
:
:
Base
;
using
typename
Base
:
:
Modifier
;
public
:
using
Base
:
:
anyChars
;
using
Base
:
:
clearAbortedSyntaxParse
;
using
Base
:
:
context
;
using
Base
:
:
hadAbortedSyntaxParse
;
using
Base
:
:
innerFunctionForFunctionBox
;
using
Base
:
:
tokenStream
;
private
:
using
Base
:
:
alloc
;
#
if
DEBUG
using
Base
:
:
checkOptionsCalled
;
#
endif
using
Base
:
:
error
;
using
Base
:
:
errorAt
;
using
Base
:
:
finishFunctionScopes
;
using
Base
:
:
functionFormalParametersAndBody
;
using
Base
:
:
handler
;
using
Base
:
:
innerFunction
;
using
Base
:
:
keepAtoms
;
using
Base
:
:
matchOrInsertSemicolon
;
using
Base
:
:
newFunctionBox
;
using
Base
:
:
newLexicalScopeData
;
using
Base
:
:
newModuleScopeData
;
using
Base
:
:
newName
;
using
Base
:
:
noteDeclaredName
;
using
Base
:
:
null
;
using
Base
:
:
options
;
using
Base
:
:
pc
;
using
Base
:
:
pos
;
using
Base
:
:
propagateFreeNamesAndMarkClosedOverBindings
;
using
Base
:
:
ss
;
using
Base
:
:
statementList
;
using
Base
:
:
stringLiteral
;
using
Base
:
:
usedNames
;
private
:
using
Base
:
:
abortIfSyntaxParser
;
using
Base
:
:
disableSyntaxParser
;
public
:
PropertyName
*
bindingIdentifier
(
YieldHandling
yieldHandling
)
{
return
Base
:
:
bindingIdentifier
(
yieldHandling
)
;
}
inline
void
setAwaitHandling
(
AwaitHandling
awaitHandling
)
;
Node
newRegExp
(
)
;
Node
moduleBody
(
ModuleSharedContext
*
modulesc
)
;
inline
Node
importDeclaration
(
)
;
inline
bool
processExport
(
Node
node
)
;
inline
bool
processExportFrom
(
Node
node
)
;
inline
bool
checkLocalExportNames
(
Node
node
)
;
inline
bool
checkExportedName
(
JSAtom
*
exportName
)
;
inline
bool
checkExportedNamesForDeclaration
(
Node
node
)
;
inline
bool
checkExportedNameForFunction
(
Node
node
)
;
inline
bool
checkExportedNameForClass
(
Node
node
)
;
inline
bool
checkExportedNameForClause
(
Node
node
)
;
bool
trySyntaxParseInnerFunction
(
Node
funcNode
HandleFunction
fun
uint32_t
toStringStart
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
tryAnnexB
Directives
inheritedDirectives
Directives
*
newDirectives
)
;
bool
skipLazyInnerFunction
(
Node
funcNode
uint32_t
toStringStart
FunctionSyntaxKind
kind
bool
tryAnnexB
)
;
bool
asmJS
(
Node
list
)
;
}
;
template
<
typename
CharT
>
class
Parser
<
FullParseHandler
CharT
>
final
:
public
GeneralParser
<
FullParseHandler
CharT
>
{
using
Base
=
GeneralParser
<
FullParseHandler
CharT
>
;
using
Node
=
FullParseHandler
:
:
Node
;
using
SyntaxParser
=
Parser
<
SyntaxParseHandler
CharT
>
;
friend
class
GeneralParser
<
FullParseHandler
CharT
>
;
public
:
using
Base
:
:
Base
;
using
typename
Base
:
:
Modifier
;
public
:
using
Base
:
:
anyChars
;
using
Base
:
:
clearAbortedSyntaxParse
;
using
Base
:
:
functionFormalParametersAndBody
;
using
Base
:
:
hadAbortedSyntaxParse
;
using
Base
:
:
handler
;
using
Base
:
:
newFunctionBox
;
using
Base
:
:
options
;
using
Base
:
:
pc
;
using
Base
:
:
pos
;
using
Base
:
:
ss
;
using
Base
:
:
tokenStream
;
private
:
using
Base
:
:
alloc
;
using
Base
:
:
checkLabelOrIdentifierReference
;
#
if
DEBUG
using
Base
:
:
checkOptionsCalled
;
#
endif
using
Base
:
:
context
;
using
Base
:
:
error
;
using
Base
:
:
errorAt
;
using
Base
:
:
finishFunctionScopes
;
using
Base
:
:
finishLexicalScope
;
using
Base
:
:
innerFunction
;
using
Base
:
:
innerFunctionForFunctionBox
;
using
Base
:
:
keepAtoms
;
using
Base
:
:
matchOrInsertSemicolon
;
using
Base
:
:
newEvalScopeData
;
using
Base
:
:
newFunctionScopeData
;
using
Base
:
:
newGlobalScopeData
;
using
Base
:
:
newLexicalScopeData
;
using
Base
:
:
newModuleScopeData
;
using
Base
:
:
newName
;
using
Base
:
:
newVarScopeData
;
using
Base
:
:
noteDeclaredName
;
using
Base
:
:
null
;
using
Base
:
:
propagateFreeNamesAndMarkClosedOverBindings
;
using
Base
:
:
statementList
;
using
Base
:
:
stringLiteral
;
using
Base
:
:
usedNames
;
using
Base
:
:
abortIfSyntaxParser
;
using
Base
:
:
disableSyntaxParser
;
using
Base
:
:
getSyntaxParser
;
using
Base
:
:
setSyntaxParser
;
public
:
PropertyName
*
bindingIdentifier
(
YieldHandling
yieldHandling
)
{
return
Base
:
:
bindingIdentifier
(
yieldHandling
)
;
}
friend
class
AutoAwaitIsKeyword
<
SyntaxParseHandler
CharT
>
;
inline
void
setAwaitHandling
(
AwaitHandling
awaitHandling
)
;
Node
newRegExp
(
)
;
Node
moduleBody
(
ModuleSharedContext
*
modulesc
)
;
Node
importDeclaration
(
)
;
bool
processExport
(
Node
node
)
;
bool
processExportFrom
(
Node
node
)
;
bool
checkLocalExportNames
(
Node
node
)
;
bool
checkExportedName
(
JSAtom
*
exportName
)
;
bool
checkExportedNamesForDeclaration
(
Node
node
)
;
bool
checkExportedNameForFunction
(
Node
node
)
;
bool
checkExportedNameForClass
(
Node
node
)
;
inline
bool
checkExportedNameForClause
(
Node
node
)
;
bool
trySyntaxParseInnerFunction
(
Node
funcNode
HandleFunction
fun
uint32_t
toStringStart
InHandling
inHandling
YieldHandling
yieldHandling
FunctionSyntaxKind
kind
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
bool
tryAnnexB
Directives
inheritedDirectives
Directives
*
newDirectives
)
;
bool
skipLazyInnerFunction
(
Node
funcNode
uint32_t
toStringStart
FunctionSyntaxKind
kind
bool
tryAnnexB
)
;
Node
evalBody
(
EvalSharedContext
*
evalsc
)
;
Node
standaloneLazyFunction
(
HandleFunction
fun
uint32_t
toStringStart
bool
strict
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
)
;
Node
standaloneFunction
(
HandleFunction
fun
HandleScope
enclosingScope
const
mozilla
:
:
Maybe
<
uint32_t
>
&
parameterListEnd
GeneratorKind
generatorKind
FunctionAsyncKind
asyncKind
Directives
inheritedDirectives
Directives
*
newDirectives
)
;
bool
checkStatementsEOF
(
)
;
Node
globalBody
(
GlobalSharedContext
*
globalsc
)
;
bool
namedImportsOrNamespaceImport
(
TokenKind
tt
Node
importSpecSet
)
;
PropertyName
*
importedBinding
(
)
{
return
bindingIdentifier
(
YieldIsName
)
;
}
bool
checkLocalExportName
(
PropertyName
*
ident
uint32_t
offset
)
{
return
checkLabelOrIdentifierReference
(
ident
offset
YieldIsName
)
;
}
bool
asmJS
(
Node
list
)
;
}
;
template
<
class
Parser
>
inline
TokenStreamAnyChars
&
ParserAnyCharsAccess
<
Parser
>
:
:
anyChars
(
TokenStreamChars
*
ts
)
{
auto
*
tss
=
static_cast
<
TokenStreamSpecific
*
>
(
ts
)
;
auto
tssAddr
=
reinterpret_cast
<
uintptr_t
>
(
tss
)
;
using
ActualTokenStreamType
=
decltype
(
static_cast
<
Parser
*
>
(
nullptr
)
-
>
tokenStream
)
;
static_assert
(
mozilla
:
:
IsSame
<
ActualTokenStreamType
TokenStreamSpecific
>
:
:
value
"
Parser
:
:
tokenStream
must
have
type
TokenStreamSpecific
"
)
;
uintptr_t
parserAddr
=
tssAddr
-
offsetof
(
Parser
tokenStream
)
;
return
reinterpret_cast
<
Parser
*
>
(
parserAddr
)
-
>
anyChars
;
}
template
<
class
Parser
>
inline
const
TokenStreamAnyChars
&
ParserAnyCharsAccess
<
Parser
>
:
:
anyChars
(
const
typename
Parser
:
:
TokenStream
:
:
CharsBase
*
ts
)
{
const
auto
*
tss
=
static_cast
<
const
TokenStreamSpecific
*
>
(
ts
)
;
auto
tssAddr
=
reinterpret_cast
<
uintptr_t
>
(
tss
)
;
using
ActualTokenStreamType
=
decltype
(
static_cast
<
Parser
*
>
(
nullptr
)
-
>
tokenStream
)
;
static_assert
(
mozilla
:
:
IsSame
<
ActualTokenStreamType
TokenStreamSpecific
>
:
:
value
"
Parser
:
:
tokenStream
must
have
type
TokenStreamSpecific
"
)
;
uintptr_t
parserAddr
=
tssAddr
-
offsetof
(
Parser
tokenStream
)
;
return
reinterpret_cast
<
const
Parser
*
>
(
parserAddr
)
-
>
anyChars
;
}
template
<
class
ParseHandler
typename
CharT
>
class
MOZ_STACK_CLASS
AutoAwaitIsKeyword
{
using
GeneralParser
=
frontend
:
:
GeneralParser
<
ParseHandler
CharT
>
;
private
:
GeneralParser
*
parser_
;
AwaitHandling
oldAwaitHandling_
;
public
:
AutoAwaitIsKeyword
(
GeneralParser
*
parser
AwaitHandling
awaitHandling
)
{
parser_
=
parser
;
oldAwaitHandling_
=
static_cast
<
AwaitHandling
>
(
parser_
-
>
awaitHandling_
)
;
if
(
oldAwaitHandling_
!
=
AwaitIsModuleKeyword
)
parser_
-
>
setAwaitHandling
(
awaitHandling
)
;
}
~
AutoAwaitIsKeyword
(
)
{
parser_
-
>
setAwaitHandling
(
oldAwaitHandling_
)
;
}
}
;
}
}
#
endif
