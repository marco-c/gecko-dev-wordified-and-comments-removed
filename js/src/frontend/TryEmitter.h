#
ifndef
frontend_TryEmitter_h
#
define
frontend_TryEmitter_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
stdint
.
h
>
#
include
"
frontend
/
BytecodeControlStructures
.
h
"
#
include
"
frontend
/
BytecodeOffset
.
h
"
#
include
"
frontend
/
JumpList
.
h
"
namespace
js
{
namespace
frontend
{
struct
BytecodeEmitter
;
class
MOZ_STACK_CLASS
TryEmitter
{
public
:
enum
class
Kind
{
TryCatch
TryCatchFinally
TryFinally
}
;
enum
class
ControlKind
{
Syntactic
NonSyntactic
}
;
private
:
BytecodeEmitter
*
bce_
;
Kind
kind_
;
ControlKind
controlKind_
;
mozilla
:
:
Maybe
<
TryFinallyControl
>
controlInfo_
;
int
depth_
;
BytecodeOffset
tryOpOffset_
;
JumpList
catchAndFinallyJump_
;
JumpTarget
tryEnd_
;
JumpTarget
finallyStart_
;
#
ifdef
DEBUG
enum
class
State
{
Start
Try
Catch
Finally
End
}
;
State
state_
;
#
endif
bool
hasCatch
(
)
const
{
return
kind_
=
=
Kind
:
:
TryCatch
|
|
kind_
=
=
Kind
:
:
TryCatchFinally
;
}
bool
hasFinally
(
)
const
{
return
kind_
=
=
Kind
:
:
TryCatchFinally
|
|
kind_
=
=
Kind
:
:
TryFinally
;
}
BytecodeOffset
offsetAfterTryOp
(
)
const
{
return
tryOpOffset_
+
BytecodeOffsetDiff
(
JSOpLength_Try
)
;
}
bool
shouldUpdateRval
(
)
const
;
[
[
nodiscard
]
]
bool
emitJumpToFinallyWithFallthrough
(
)
;
public
:
TryEmitter
(
BytecodeEmitter
*
bce
Kind
kind
ControlKind
controlKind
)
;
[
[
nodiscard
]
]
bool
emitTry
(
)
;
enum
class
ExceptionStack
:
bool
{
No
Yes
}
;
[
[
nodiscard
]
]
bool
emitCatch
(
ExceptionStack
stack
=
ExceptionStack
:
:
No
)
;
[
[
nodiscard
]
]
bool
emitFinally
(
const
mozilla
:
:
Maybe
<
uint32_t
>
&
finallyPos
=
mozilla
:
:
Nothing
(
)
)
;
[
[
nodiscard
]
]
bool
emitEnd
(
)
;
private
:
[
[
nodiscard
]
]
bool
emitTryEnd
(
)
;
[
[
nodiscard
]
]
bool
emitCatchEnd
(
)
;
[
[
nodiscard
]
]
bool
emitFinallyEnd
(
)
;
}
;
}
}
#
endif
