#
ifndef
intgemm_IntegerGemmIntrinsic_h
#
define
intgemm_IntegerGemmIntrinsic_h
#
include
<
stdint
.
h
>
namespace
js
{
namespace
wasm
{
class
Instance
;
}
namespace
intgemm
{
int32_t
IntrI8PrepareB
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixB
float
scale
float
zeroPoint
uint32_t
rowsB
uint32_t
colsB
uint32_t
outputMatrixB
uint8_t
*
memBase
)
;
int32_t
IntrI8PrepareBFromTransposed
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixBTransposed
float
scale
float
zeroPoint
uint32_t
rowsB
uint32_t
colsB
uint32_t
outputMatrixB
uint8_t
*
memBase
)
;
int32_t
IntrI8PrepareBFromQuantizedTransposed
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixBQuantizedTransposed
uint32_t
rowsB
uint32_t
colsB
uint32_t
outputMatrixB
uint8_t
*
memBase
)
;
int32_t
IntrI8PrepareA
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixA
float
scale
float
zeroPoint
uint32_t
rowsA
uint32_t
colsA
uint32_t
outputMatrixA
uint8_t
*
memBase
)
;
int32_t
IntrI8PrepareBias
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixBPrepared
float
scaleA
float
zeroPointA
float
scaleB
float
zeroPointB
uint32_t
rowsB
uint32_t
colsB
uint32_t
inputBias
uint32_t
output
uint8_t
*
memBase
)
;
int32_t
IntrI8MultiplyAndAddBias
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixAPrepared
float
scaleA
float
zeroPointA
uint32_t
inputMatrixBPrepared
float
scaleB
float
zeroPointB
uint32_t
inputBiasPrepared
float
unquantMultiplier
uint32_t
rowsA
uint32_t
width
uint32_t
colsB
uint32_t
output
uint8_t
*
memBase
)
;
int32_t
IntrI8SelectColumnsOfB
(
wasm
:
:
Instance
*
instance
uint32_t
inputMatrixBPrepared
uint32_t
rowsB
uint32_t
colsB
uint32_t
colIndexList
uint32_t
sizeColIndexList
uint32_t
output
uint8_t
*
memBase
)
;
}
}
#
endif
