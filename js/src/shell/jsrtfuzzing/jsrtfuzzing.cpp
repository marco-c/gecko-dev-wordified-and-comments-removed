#
include
"
shell
/
jsrtfuzzing
/
jsrtfuzzing
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdio
.
h
>
#
ifdef
LIBFUZZER
#
include
"
FuzzerDefs
.
h
"
#
endif
#
ifdef
AFLFUZZ
#
include
"
FuzzingInterface
.
h
"
#
endif
#
include
"
jsapi
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
Exception
.
h
"
#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
shell
/
jsshell
.
h
"
#
include
"
util
/
Text
.
h
"
#
include
"
vm
/
Interpreter
.
h
"
#
include
"
vm
/
TypedArrayObject
.
h
"
#
include
"
vm
/
ArrayBufferObject
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
static
JSContext
*
gCx
=
nullptr
;
static
std
:
:
string
gFuzzModuleName
;
static
void
CrashOnPendingException
(
)
{
if
(
JS_IsExceptionPending
(
gCx
)
)
{
JS
:
:
ExceptionStack
exnStack
(
gCx
)
;
(
void
)
JS
:
:
StealPendingExceptionStack
(
gCx
&
exnStack
)
;
JS
:
:
ErrorReportBuilder
report
(
gCx
)
;
if
(
!
report
.
init
(
gCx
exnStack
JS
:
:
ErrorReportBuilder
:
:
WithSideEffects
)
)
{
fprintf
(
stderr
"
out
of
memory
initializing
JS
:
:
ErrorReportBuilder
\
n
"
)
;
fflush
(
stderr
)
;
}
else
{
JS
:
:
PrintError
(
stderr
report
js
:
:
shell
:
:
reportWarnings
)
;
if
(
!
js
:
:
shell
:
:
PrintStackTrace
(
gCx
exnStack
.
stack
(
)
)
)
{
fputs
(
"
(
Unable
to
print
stack
trace
)
\
n
"
stderr
)
;
}
}
MOZ_CRASH
(
"
Unhandled
exception
from
JS
runtime
!
"
)
;
}
}
int
js
:
:
shell
:
:
FuzzJSRuntimeStart
(
JSContext
*
cx
int
*
argc
char
*
*
*
argv
)
{
gCx
=
cx
;
gFuzzModuleName
=
getenv
(
"
FUZZER
"
)
;
int
ret
=
FuzzJSRuntimeInit
(
argc
argv
)
;
if
(
ret
)
{
fprintf
(
stderr
"
Fuzzing
Interface
:
Error
:
Initialize
callback
failed
\
n
"
)
;
return
ret
;
}
#
ifdef
LIBFUZZER
fuzzer
:
:
FuzzerDriver
(
&
shell
:
:
sArgc
&
shell
:
:
sArgv
FuzzJSRuntimeFuzz
)
;
#
elif
AFLFUZZ
afl_interface_raw
(
FuzzJSRuntimeFuzz
)
;
#
endif
return
0
;
}
int
js
:
:
shell
:
:
FuzzJSRuntimeInit
(
int
*
argc
char
*
*
*
argv
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
gCx
)
;
JS
:
:
CompileOptions
opts
(
gCx
)
;
JS
:
:
EvaluateUtf8Path
(
gCx
opts
gFuzzModuleName
.
c_str
(
)
&
v
)
;
CrashOnPendingException
(
)
;
return
0
;
}
int
js
:
:
shell
:
:
FuzzJSRuntimeFuzz
(
const
uint8_t
*
buf
size_t
size
)
{
if
(
!
size
)
{
return
0
;
}
JS
:
:
Rooted
<
JSObject
*
>
arr
(
gCx
JS_NewUint8ClampedArray
(
gCx
size
)
)
;
if
(
!
arr
)
{
MOZ_CRASH
(
"
OOM
"
)
;
}
do
{
JS
:
:
AutoCheckCannotGC
nogc
;
bool
isShared
;
uint8_t
*
data
=
JS_GetUint8ClampedArrayData
(
arr
&
isShared
nogc
)
;
MOZ_RELEASE_ASSERT
(
!
isShared
)
;
memcpy
(
data
buf
size
)
;
}
while
(
false
)
;
JS
:
:
RootedValue
arrVal
(
gCx
JS
:
:
ObjectValue
(
*
arr
)
)
;
if
(
!
JS_SetProperty
(
gCx
gCx
-
>
global
(
)
"
fuzzBuf
"
arrVal
)
)
{
MOZ_CRASH
(
"
JS_SetProperty
failed
"
)
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
gCx
)
;
JS
:
:
CompileOptions
opts
(
gCx
)
;
static
const
char
data
[
]
=
"
JSFuzzIterate
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
if
(
!
srcBuf
.
init
(
gCx
data
js_strlen
(
data
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
{
return
1
;
}
if
(
!
JS
:
:
Evaluate
(
gCx
opts
.
setFileAndLine
(
__FILE__
__LINE__
)
srcBuf
&
v
)
&
&
!
JS_IsExceptionPending
(
gCx
)
)
{
return
1
;
}
CrashOnPendingException
(
)
;
int32_t
ret
=
0
;
if
(
!
JS
:
:
ToInt32
(
gCx
v
&
ret
)
)
{
MOZ_CRASH
(
"
Must
return
an
int32
compatible
return
value
!
"
)
;
}
return
ret
;
}
