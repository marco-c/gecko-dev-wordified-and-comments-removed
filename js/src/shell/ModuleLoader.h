#
ifndef
shell_ModuleLoader_h
#
define
shell_ModuleLoader_h
#
include
"
builtin
/
ModuleObject
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
namespace
js
{
namespace
shell
{
class
ModuleLoader
{
public
:
bool
init
(
JSContext
*
cx
HandleString
loadPath
)
;
bool
loadRootModule
(
JSContext
*
cx
HandleString
path
)
;
bool
registerTestModule
(
JSContext
*
cx
HandleObject
moduleRequest
Handle
<
ModuleObject
*
>
module
)
;
private
:
static
JSObject
*
ResolveImportedModule
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
)
;
static
bool
GetImportMetaProperties
(
JSContext
*
cx
HandleValue
privateValue
HandleObject
metaObject
)
;
static
bool
ImportModuleDynamically
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
HandleObject
promise
)
;
static
bool
GetSupportedImportAssertions
(
JSContext
*
cx
JS
:
:
ImportAssertionVector
&
values
)
;
static
bool
DynamicImportDelayFulfilled
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
static
bool
DynamicImportDelayRejected
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
bool
loadAndExecute
(
JSContext
*
cx
HandleString
path
MutableHandleValue
)
;
JSObject
*
resolveImportedModule
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
)
;
bool
populateImportMeta
(
JSContext
*
cx
HandleValue
privateValue
HandleObject
metaObject
)
;
bool
dynamicImport
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
HandleObject
promise
)
;
bool
doDynamicImport
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
HandleObject
promise
)
;
bool
tryDynamicImport
(
JSContext
*
cx
HandleValue
referencingPrivate
HandleObject
moduleRequest
HandleObject
promise
MutableHandleValue
rval
)
;
JSObject
*
loadAndParse
(
JSContext
*
cx
HandleString
path
)
;
bool
lookupModuleInRegistry
(
JSContext
*
cx
HandleString
path
MutableHandleObject
moduleOut
)
;
bool
addModuleToRegistry
(
JSContext
*
cx
HandleString
path
HandleObject
module
)
;
JSLinearString
*
resolve
(
JSContext
*
cx
HandleObject
moduleRequestArg
HandleValue
referencingInfo
)
;
bool
getScriptPath
(
JSContext
*
cx
HandleValue
privateValue
MutableHandle
<
JSLinearString
*
>
pathOut
)
;
JSLinearString
*
normalizePath
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
path
)
;
JSObject
*
getOrCreateModuleRegistry
(
JSContext
*
cx
)
;
JSString
*
fetchSource
(
JSContext
*
cx
Handle
<
JSLinearString
*
>
path
)
;
JSAtom
*
loadPathStr
=
nullptr
;
JSAtom
*
pathSeparatorStr
=
nullptr
;
}
JS_HAZ_NON_GC_POINTER
;
}
}
#
endif
