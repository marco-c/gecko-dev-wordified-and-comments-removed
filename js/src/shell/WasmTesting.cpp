#
include
"
shell
/
WasmTesting
.
h
"
#
include
<
inttypes
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
stddef
.
h
>
#
include
"
wasm
/
WasmTypes
.
h
"
using
namespace
js
;
using
namespace
js
:
:
wasm
;
extern
"
C
"
{
bool
wasm_text_to_binary
(
const
char16_t
*
text
size_t
text_len
uint8_t
*
*
out_bytes
size_t
*
out_bytes_len
uint8_t
*
*
out_error
size_t
*
out_error_len
)
;
void
wasm_code_offsets
(
const
uint8_t
*
bytes
size_t
bytes_len
uint32_t
*
*
out_offsets
size_t
*
out_offset_len
)
;
}
bool
wasm
:
:
TextToBinary
(
const
char16_t
*
text
size_t
textLen
Bytes
*
bytes
UniqueChars
*
error
)
{
uint8_t
*
outBytes
=
nullptr
;
size_t
outBytesLength
=
0
;
uint8_t
*
outError
=
nullptr
;
size_t
outErrorLength
=
0
;
bool
result
=
wasm_text_to_binary
(
text
textLen
&
outBytes
&
outBytesLength
&
outError
&
outErrorLength
)
;
if
(
result
)
{
MOZ_ASSERT
(
outBytes
)
;
MOZ_ASSERT
(
outBytesLength
>
0
)
;
bytes
-
>
replaceRawBuffer
(
outBytes
outBytesLength
)
;
return
true
;
}
MOZ_ASSERT
(
outError
)
;
MOZ_ASSERT
(
outErrorLength
>
0
)
;
*
error
=
UniqueChars
{
(
char
*
)
outError
}
;
return
false
;
}
void
wasm
:
:
CodeOffsets
(
const
uint8_t
*
bytes
size_t
bytesLen
Uint32Vector
*
offsets
)
{
uint32_t
*
outOffsets
=
nullptr
;
size_t
outOffsetsLength
=
0
;
wasm_code_offsets
(
bytes
bytesLen
&
outOffsets
&
outOffsetsLength
)
;
if
(
outOffsets
)
{
MOZ_ASSERT
(
outOffsetsLength
>
0
)
;
offsets
-
>
replaceRawBuffer
(
outOffsets
outOffsetsLength
)
;
}
else
{
offsets
-
>
clear
(
)
;
}
}
