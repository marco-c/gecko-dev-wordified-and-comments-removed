#
ifndef
jscompartmentinlines_h
#
define
jscompartmentinlines_h
#
include
"
jscompartment
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
jscntxtinlines
.
h
"
inline
void
JSCompartment
:
:
initGlobal
(
js
:
:
GlobalObject
&
global
)
{
MOZ_ASSERT
(
global
.
compartment
(
)
=
=
this
)
;
MOZ_ASSERT
(
!
global_
)
;
global_
.
set
(
&
global
)
;
}
js
:
:
GlobalObject
*
JSCompartment
:
:
maybeGlobal
(
)
const
{
MOZ_ASSERT_IF
(
global_
global_
-
>
compartment
(
)
=
=
this
)
;
return
global_
;
}
js
:
:
GlobalObject
*
JSCompartment
:
:
unsafeUnbarrieredMaybeGlobal
(
)
const
{
return
*
global_
.
unsafeGet
(
)
;
}
template
<
typename
T
>
js
:
:
AutoCompartment
:
:
AutoCompartment
(
JSContext
*
cx
const
T
&
target
)
:
cx_
(
cx
)
origin_
(
cx
-
>
compartment
(
)
)
maybeLock_
(
nullptr
)
{
cx_
-
>
enterCompartmentOf
(
target
)
;
}
js
:
:
AutoCompartment
:
:
AutoCompartment
(
JSContext
*
cx
JSCompartment
*
target
js
:
:
AutoLockForExclusiveAccess
*
maybeLock
)
:
cx_
(
cx
)
origin_
(
cx
-
>
compartment
(
)
)
maybeLock_
(
maybeLock
)
{
cx_
-
>
enterCompartment
(
target
maybeLock
)
;
}
js
:
:
AutoCompartment
:
:
~
AutoCompartment
(
)
{
cx_
-
>
leaveCompartment
(
origin_
maybeLock_
)
;
}
js
:
:
AutoAtomsCompartment
:
:
AutoAtomsCompartment
(
JSContext
*
cx
js
:
:
AutoLockForExclusiveAccess
&
lock
)
:
AutoCompartment
(
cx
cx
-
>
atomsCompartment
(
lock
)
&
lock
)
{
}
js
:
:
AutoCompartmentUnchecked
:
:
AutoCompartmentUnchecked
(
JSContext
*
cx
JSCompartment
*
target
)
:
AutoCompartment
(
cx
target
)
{
}
inline
bool
JSCompartment
:
:
wrap
(
JSContext
*
cx
JS
:
:
MutableHandleValue
vp
)
{
if
(
!
vp
.
isGCThing
(
)
)
return
true
;
if
(
vp
.
isSymbol
(
)
)
{
cx
-
>
markAtomValue
(
vp
)
;
return
true
;
}
if
(
vp
.
isString
(
)
)
{
JS
:
:
RootedString
str
(
cx
vp
.
toString
(
)
)
;
if
(
!
wrap
(
cx
&
str
)
)
return
false
;
vp
.
setString
(
str
)
;
return
true
;
}
MOZ_ASSERT
(
vp
.
isObject
(
)
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
JS
:
:
ObjectIsMarkedGray
(
&
vp
.
toObject
(
)
)
)
;
JS
:
:
RootedObject
cacheResult
(
cx
)
;
#
endif
JS
:
:
RootedValue
v
(
cx
vp
)
;
if
(
js
:
:
WrapperMap
:
:
Ptr
p
=
crossCompartmentWrappers
.
lookup
(
js
:
:
CrossCompartmentKey
(
v
)
)
)
{
#
ifdef
DEBUG
cacheResult
=
&
p
-
>
value
(
)
.
get
(
)
.
toObject
(
)
;
#
else
vp
.
set
(
p
-
>
value
(
)
.
get
(
)
)
;
return
true
;
#
endif
}
JS
:
:
RootedObject
obj
(
cx
&
vp
.
toObject
(
)
)
;
if
(
!
wrap
(
cx
&
obj
)
)
return
false
;
vp
.
setObject
(
*
obj
)
;
MOZ_ASSERT_IF
(
cacheResult
obj
=
=
cacheResult
)
;
return
true
;
}
#
endif
