#
ifndef
util_Poison_h
#
define
util_Poison_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
"
jstypes
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
util
/
DiagnosticAssertions
.
h
"
#
if
defined
(
JS_CRASH_DIAGNOSTICS
)
|
|
defined
(
JS_GC_ZEAL
)
#
define
JS_GC_POISONING
1
#
endif
namespace
mozilla
{
template
<
typename
T
>
static
MOZ_ALWAYS_INLINE
void
PodSet
(
T
*
aDst
const
T
&
aSrc
size_t
aNElem
)
{
for
(
const
T
*
dstend
=
aDst
+
aNElem
;
aDst
<
dstend
;
+
+
aDst
)
{
*
aDst
=
aSrc
;
}
}
}
const
uint8_t
JS_FRESH_NURSERY_PATTERN
=
0x2F
;
const
uint8_t
JS_SWEPT_NURSERY_PATTERN
=
0x2B
;
const
uint8_t
JS_ALLOCATED_NURSERY_PATTERN
=
0x2D
;
const
uint8_t
JS_FRESH_TENURED_PATTERN
=
0x4F
;
const
uint8_t
JS_MOVED_TENURED_PATTERN
=
0x49
;
const
uint8_t
JS_SWEPT_TENURED_PATTERN
=
0x4B
;
const
uint8_t
JS_ALLOCATED_TENURED_PATTERN
=
0x4D
;
const
uint8_t
JS_FREED_HEAP_PTR_PATTERN
=
0x6B
;
const
uint8_t
JS_FREED_CHUNK_PATTERN
=
0x8B
;
const
uint8_t
JS_FREED_ARENA_PATTERN
=
0x9B
;
const
uint8_t
JS_SWEPT_TI_PATTERN
=
0x6F
;
const
uint8_t
JS_FRESH_MARK_STACK_PATTERN
=
0x9F
;
const
uint8_t
JS_RESET_VALUE_PATTERN
=
0xBB
;
const
uint8_t
JS_POISONED_JSSCRIPT_DATA_PATTERN
=
0xDB
;
const
uint8_t
JS_OOB_PARSE_NODE_PATTERN
=
0xFF
;
const
uint8_t
JS_LIFO_UNDEFINED_PATTERN
=
0xcd
;
const
uint8_t
JS_LIFO_UNINITIALIZED_PATTERN
=
0xce
;
const
uint8_t
JS_NEW_NATIVE_ITERATOR_PATTERN
=
0xCC
;
const
uint8_t
JS_SCOPE_DATA_TRAILING_NAMES_PATTERN
=
0xCC
;
#
if
defined
(
JS_CODEGEN_X86
)
|
|
defined
(
JS_CODEGEN_X64
)
|
|
\
defined
(
JS_CODEGEN_NONE
)
#
define
JS_SWEPT_CODE_PATTERN
0xED
/
/
IN
instruction
crashes
in
user
mode
.
#
elif
defined
(
JS_CODEGEN_ARM
)
|
|
defined
(
JS_CODEGEN_ARM64
)
#
define
JS_SWEPT_CODE_PATTERN
0xA3
/
/
undefined
instruction
#
elif
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
#
define
JS_SWEPT_CODE_PATTERN
0x01
/
/
undefined
instruction
#
else
#
error
"
JS_SWEPT_CODE_PATTERN
not
defined
for
this
platform
"
#
endif
enum
class
MemCheckKind
:
uint8_t
{
MakeNoAccess
MakeUndefined
}
;
static
MOZ_ALWAYS_INLINE
void
SetMemCheckKind
(
void
*
ptr
size_t
bytes
MemCheckKind
kind
)
{
switch
(
kind
)
{
case
MemCheckKind
:
:
MakeUndefined
:
MOZ_MAKE_MEM_UNDEFINED
(
ptr
bytes
)
;
return
;
case
MemCheckKind
:
:
MakeNoAccess
:
MOZ_MAKE_MEM_NOACCESS
(
ptr
bytes
)
;
return
;
}
MOZ_CRASH
(
"
Invalid
kind
"
)
;
}
namespace
js
{
static
inline
void
PoisonImpl
(
void
*
ptr
uint8_t
value
size_t
num
)
{
#
if
defined
(
DEBUG
)
uintptr_t
poison
;
memset
(
&
poison
value
sizeof
(
poison
)
)
;
#
if
defined
(
JS_PUNBOX64
)
poison
=
poison
&
(
(
uintptr_t
(
1
)
<
<
JSVAL_TAG_SHIFT
)
-
1
)
;
#
endif
JS
:
:
Value
v
=
js
:
:
PoisonedObjectValue
(
poison
)
;
#
if
defined
(
JS_NUNBOX32
)
uintptr_t
begin_count
=
uintptr_t
(
ptr
)
%
sizeof
(
JS
:
:
Value
)
;
if
(
begin_count
)
{
uint8_t
*
begin
=
static_cast
<
uint8_t
*
>
(
ptr
)
;
mozilla
:
:
PodSet
(
begin
value
begin_count
)
;
ptr
=
begin
+
begin_count
;
num
-
=
begin_count
;
}
#
endif
MOZ_ASSERT
(
uintptr_t
(
ptr
)
%
sizeof
(
JS
:
:
Value
)
=
=
0
)
;
size_t
value_count
=
num
/
sizeof
(
v
)
;
size_t
byte_count
=
num
%
sizeof
(
v
)
;
mozilla
:
:
PodSet
(
reinterpret_cast
<
JS
:
:
Value
*
>
(
ptr
)
v
value_count
)
;
if
(
byte_count
)
{
uint8_t
*
bytes
=
static_cast
<
uint8_t
*
>
(
ptr
)
;
uint8_t
*
end
=
bytes
+
num
;
mozilla
:
:
PodSet
(
end
-
byte_count
value
byte_count
)
;
}
#
else
memset
(
ptr
value
num
)
;
#
endif
}
static
inline
void
AlwaysPoison
(
void
*
ptr
uint8_t
value
size_t
num
MemCheckKind
kind
)
{
PoisonImpl
(
ptr
value
num
)
;
SetMemCheckKind
(
ptr
num
kind
)
;
}
extern
bool
gDisablePoisoning
;
static
inline
void
Poison
(
void
*
ptr
uint8_t
value
size_t
num
MemCheckKind
kind
)
{
#
if
defined
(
JS_GC_POISONING
)
if
(
!
js
:
:
gDisablePoisoning
)
{
PoisonImpl
(
ptr
value
num
)
;
}
#
endif
SetMemCheckKind
(
ptr
num
kind
)
;
}
static
inline
void
DebugOnlyPoison
(
void
*
ptr
uint8_t
value
size_t
num
MemCheckKind
kind
)
{
#
if
defined
(
DEBUG
)
Poison
(
ptr
value
num
kind
)
;
#
else
SetMemCheckKind
(
ptr
num
kind
)
;
#
endif
}
}
#
endif
