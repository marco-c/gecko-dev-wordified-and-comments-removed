#
include
"
util
/
Identifier
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
util
/
Unicode
.
h
"
#
include
"
vm
/
StringType
.
h
"
using
namespace
js
;
bool
js
:
:
IsIdentifier
(
const
JSLinearString
*
str
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
MOZ_ASSERT
(
str
)
;
if
(
str
-
>
hasLatin1Chars
(
)
)
{
return
IsIdentifier
(
str
-
>
latin1Chars
(
nogc
)
str
-
>
length
(
)
)
;
}
return
IsIdentifier
(
str
-
>
twoByteChars
(
nogc
)
str
-
>
length
(
)
)
;
}
bool
js
:
:
IsIdentifierNameOrPrivateName
(
const
JSLinearString
*
str
)
{
JS
:
:
AutoCheckCannotGC
nogc
;
MOZ_ASSERT
(
str
)
;
if
(
str
-
>
hasLatin1Chars
(
)
)
{
return
IsIdentifierNameOrPrivateName
(
str
-
>
latin1Chars
(
nogc
)
str
-
>
length
(
)
)
;
}
return
IsIdentifierNameOrPrivateName
(
str
-
>
twoByteChars
(
nogc
)
str
-
>
length
(
)
)
;
}
bool
js
:
:
IsIdentifier
(
const
JS
:
:
Latin1Char
*
chars
size_t
length
)
{
if
(
length
=
=
0
)
{
return
false
;
}
if
(
!
unicode
:
:
IsIdentifierStart
(
char16_t
(
*
chars
)
)
)
{
return
false
;
}
const
JS
:
:
Latin1Char
*
end
=
chars
+
length
;
while
(
+
+
chars
!
=
end
)
{
if
(
!
unicode
:
:
IsIdentifierPart
(
char16_t
(
*
chars
)
)
)
{
return
false
;
}
}
return
true
;
}
bool
js
:
:
IsIdentifierASCII
(
char
c
)
{
return
unicode
:
:
IsIdentifierStartASCII
(
c
)
;
}
bool
js
:
:
IsIdentifierASCII
(
char
c1
char
c2
)
{
return
unicode
:
:
IsIdentifierStartASCII
(
c1
)
&
&
unicode
:
:
IsIdentifierPartASCII
(
c2
)
;
}
bool
js
:
:
IsIdentifierNameOrPrivateName
(
const
JS
:
:
Latin1Char
*
chars
size_t
length
)
{
if
(
length
=
=
0
)
{
return
false
;
}
if
(
*
chars
=
=
'
#
'
)
{
+
+
chars
;
-
-
length
;
}
return
IsIdentifier
(
chars
length
)
;
}
static
char32_t
GetSingleCodePoint
(
const
char16_t
*
*
p
const
char16_t
*
end
)
{
using
namespace
js
;
if
(
MOZ_UNLIKELY
(
unicode
:
:
IsLeadSurrogate
(
*
*
p
)
)
&
&
*
p
+
1
<
end
)
{
char16_t
lead
=
*
*
p
;
char16_t
maybeTrail
=
*
(
*
p
+
1
)
;
if
(
unicode
:
:
IsTrailSurrogate
(
maybeTrail
)
)
{
*
p
+
=
2
;
return
unicode
:
:
UTF16Decode
(
lead
maybeTrail
)
;
}
}
char32_t
codePoint
=
*
*
p
;
(
*
p
)
+
+
;
return
codePoint
;
}
bool
js
:
:
IsIdentifier
(
const
char16_t
*
chars
size_t
length
)
{
if
(
length
=
=
0
)
{
return
false
;
}
const
char16_t
*
p
=
chars
;
const
char16_t
*
end
=
chars
+
length
;
char32_t
codePoint
;
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
!
unicode
:
:
IsIdentifierStart
(
codePoint
)
)
{
return
false
;
}
while
(
p
<
end
)
{
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
!
unicode
:
:
IsIdentifierPart
(
codePoint
)
)
{
return
false
;
}
}
return
true
;
}
bool
js
:
:
IsIdentifierNameOrPrivateName
(
const
char16_t
*
chars
size_t
length
)
{
if
(
length
=
=
0
)
{
return
false
;
}
const
char16_t
*
p
=
chars
;
const
char16_t
*
end
=
chars
+
length
;
char32_t
codePoint
;
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
codePoint
=
=
'
#
'
)
{
if
(
length
=
=
1
)
{
return
false
;
}
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
}
if
(
!
unicode
:
:
IsIdentifierStart
(
codePoint
)
)
{
return
false
;
}
while
(
p
<
end
)
{
codePoint
=
GetSingleCodePoint
(
&
p
end
)
;
if
(
!
unicode
:
:
IsIdentifierPart
(
codePoint
)
)
{
return
false
;
}
}
return
true
;
}
