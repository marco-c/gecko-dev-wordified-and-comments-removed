#
ifndef
util_TrailingArray_h
#
define
util_TrailingArray_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
namespace
js
{
template
<
typename
T
>
static
void
DefaultInitializeElements
(
void
*
arrayPtr
size_t
nelem
)
{
uintptr_t
elem
=
reinterpret_cast
<
uintptr_t
>
(
arrayPtr
)
;
MOZ_ASSERT
(
elem
%
alignof
(
T
)
=
=
0
)
;
for
(
size_t
i
=
0
;
i
<
nelem
;
+
+
i
)
{
new
(
reinterpret_cast
<
void
*
>
(
elem
)
)
T
;
elem
+
=
sizeof
(
T
)
;
}
}
class
TrailingArray
{
protected
:
using
Offset
=
uint32_t
;
template
<
typename
T
>
T
*
offsetToPointer
(
Offset
offset
)
{
uintptr_t
base
=
reinterpret_cast
<
uintptr_t
>
(
this
)
;
return
reinterpret_cast
<
T
*
>
(
base
+
offset
)
;
}
template
<
typename
T
>
const
T
*
offsetToPointer
(
Offset
offset
)
const
{
uintptr_t
base
=
reinterpret_cast
<
uintptr_t
>
(
this
)
;
return
reinterpret_cast
<
const
T
*
>
(
base
+
offset
)
;
}
template
<
typename
T
>
void
initElements
(
Offset
offset
size_t
nelem
)
{
void
*
raw
=
offsetToPointer
<
void
>
(
offset
)
;
DefaultInitializeElements
<
T
>
(
raw
nelem
)
;
}
TrailingArray
(
)
=
default
;
public
:
TrailingArray
(
const
TrailingArray
&
)
=
delete
;
TrailingArray
&
operator
=
(
const
TrailingArray
&
)
=
delete
;
}
;
}
#
endif
