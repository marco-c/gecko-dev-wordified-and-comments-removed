#
ifndef
util_CheckedArithmetic_h
#
define
util_CheckedArithmetic_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Compiler
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
<
stdint
.
h
>
#
if
MOZ_IS_GCC
#
define
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
x
)
1
#
else
#
ifdef
__has_builtin
#
define
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
x
)
__has_builtin
(
x
)
#
endif
#
endif
#
ifndef
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
#
define
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
x
)
0
#
endif
namespace
js
{
[
[
nodiscard
]
]
inline
bool
SafeAdd
(
int32_t
one
int32_t
two
int32_t
*
res
)
{
#
if
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
__builtin_sadd_overflow
)
return
!
__builtin_sadd_overflow
(
one
two
res
)
;
#
else
*
res
=
uint32_t
(
one
)
+
uint32_t
(
two
)
;
int64_t
ores
=
(
int64_t
)
one
+
(
int64_t
)
two
;
return
ores
=
=
(
int64_t
)
*
res
;
#
endif
}
[
[
nodiscard
]
]
inline
bool
SafeSub
(
int32_t
one
int32_t
two
int32_t
*
res
)
{
#
if
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
__builtin_ssub_overflow
)
return
!
__builtin_ssub_overflow
(
one
two
res
)
;
#
else
*
res
=
uint32_t
(
one
)
-
uint32_t
(
two
)
;
int64_t
ores
=
(
int64_t
)
one
-
(
int64_t
)
two
;
return
ores
=
=
(
int64_t
)
*
res
;
#
endif
}
[
[
nodiscard
]
]
inline
bool
SafeMul
(
int32_t
one
int32_t
two
int32_t
*
res
)
{
#
if
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
__builtin_smul_overflow
)
return
!
__builtin_smul_overflow
(
one
two
res
)
;
#
else
*
res
=
uint32_t
(
one
)
*
uint32_t
(
two
)
;
int64_t
ores
=
(
int64_t
)
one
*
(
int64_t
)
two
;
return
ores
=
=
(
int64_t
)
*
res
;
#
endif
}
[
[
nodiscard
]
]
inline
bool
SafeMul
(
uint64_t
one
uint64_t
two
uint64_t
*
res
)
{
#
if
BUILTIN_CHECKED_ARITHMETIC_SUPPORTED
(
__builtin_mul_overflow
)
return
!
__builtin_mul_overflow
(
one
two
res
)
;
#
else
int
zeroes
=
mozilla
:
:
CountLeadingZeroes64
(
one
)
+
mozilla
:
:
CountLeadingZeroes64
(
two
)
;
if
(
zeroes
<
=
62
)
{
return
false
;
}
uint64_t
half
=
one
*
(
two
>
>
1
)
;
if
(
int64_t
(
half
)
<
0
)
{
return
false
;
}
*
res
=
half
*
2
;
if
(
two
&
1
)
{
*
res
+
=
one
;
if
(
*
res
<
one
)
{
return
false
;
}
}
return
true
;
#
endif
}
}
#
endif
