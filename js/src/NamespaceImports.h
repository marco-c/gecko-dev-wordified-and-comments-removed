#
ifndef
NamespaceImports_h
#
define
NamespaceImports_h
#
include
"
js
/
CallNonGenericMethod
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCVector
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
JS
{
class
Latin1Chars
;
class
Latin1CharsZ
;
class
ConstTwoByteChars
;
class
TwoByteChars
;
class
TwoByteCharsZ
;
class
UTF8Chars
;
class
UTF8CharsZ
;
using
AutoValueVector
=
AutoVector
<
Value
>
;
using
AutoIdVector
=
AutoVector
<
jsid
>
;
using
AutoObjectVector
=
AutoVector
<
JSObject
*
>
;
using
ValueVector
=
JS
:
:
GCVector
<
JS
:
:
Value
>
;
using
IdVector
=
JS
:
:
GCVector
<
jsid
>
;
using
ScriptVector
=
JS
:
:
GCVector
<
JSScript
*
>
;
class
MOZ_STACK_CLASS
SourceBufferHolder
;
class
HandleValueArray
;
class
ObjectOpResult
;
class
PropertyResult
;
enum
class
SymbolCode
:
uint32_t
;
#
ifdef
ENABLE_BIGINT
class
BigInt
;
#
endif
}
namespace
js
{
using
JS
:
:
Value
;
using
JS
:
:
BooleanValue
;
using
JS
:
:
DoubleValue
;
using
JS
:
:
Float32Value
;
using
JS
:
:
Int32Value
;
using
JS
:
:
MagicValue
;
using
JS
:
:
NullValue
;
using
JS
:
:
NumberValue
;
using
JS
:
:
ObjectOrNullValue
;
using
JS
:
:
ObjectValue
;
using
JS
:
:
PrivateUint32Value
;
using
JS
:
:
PrivateValue
;
using
JS
:
:
PrivateGCThingValue
;
using
JS
:
:
StringValue
;
using
JS
:
:
UndefinedValue
;
using
JS
:
:
Latin1Char
;
using
JS
:
:
Latin1Chars
;
using
JS
:
:
Latin1CharsZ
;
using
JS
:
:
ConstTwoByteChars
;
using
JS
:
:
TwoByteChars
;
using
JS
:
:
TwoByteCharsZ
;
using
JS
:
:
UTF8Chars
;
using
JS
:
:
UTF8CharsZ
;
using
JS
:
:
UniqueChars
;
using
JS
:
:
UniqueTwoByteChars
;
using
JS
:
:
Result
;
using
JS
:
:
Ok
;
using
JS
:
:
OOM
;
using
JS
:
:
AutoValueVector
;
using
JS
:
:
AutoIdVector
;
using
JS
:
:
AutoObjectVector
;
using
JS
:
:
ValueVector
;
using
JS
:
:
IdVector
;
using
JS
:
:
ScriptVector
;
using
JS
:
:
GCVector
;
using
JS
:
:
GCHashMap
;
using
JS
:
:
GCHashSet
;
using
JS
:
:
CallArgs
;
using
JS
:
:
CallNonGenericMethod
;
using
JS
:
:
CompileOptions
;
using
JS
:
:
IsAcceptableThis
;
using
JS
:
:
NativeImpl
;
using
JS
:
:
OwningCompileOptions
;
using
JS
:
:
ReadOnlyCompileOptions
;
using
JS
:
:
SourceBufferHolder
;
using
JS
:
:
TransitiveCompileOptions
;
using
JS
:
:
Rooted
;
using
JS
:
:
RootedFunction
;
using
JS
:
:
RootedId
;
using
JS
:
:
RootedObject
;
using
JS
:
:
RootedScript
;
using
JS
:
:
RootedString
;
using
JS
:
:
RootedSymbol
;
#
ifdef
ENABLE_BIGINT
using
JS
:
:
RootedBigInt
;
#
endif
using
JS
:
:
RootedValue
;
using
JS
:
:
PersistentRooted
;
using
JS
:
:
PersistentRootedFunction
;
using
JS
:
:
PersistentRootedId
;
using
JS
:
:
PersistentRootedObject
;
using
JS
:
:
PersistentRootedScript
;
using
JS
:
:
PersistentRootedString
;
using
JS
:
:
PersistentRootedSymbol
;
#
ifdef
ENABLE_BIGINT
using
JS
:
:
PersistentRootedBigInt
;
#
endif
using
JS
:
:
PersistentRootedValue
;
using
JS
:
:
Handle
;
using
JS
:
:
HandleFunction
;
using
JS
:
:
HandleId
;
using
JS
:
:
HandleObject
;
using
JS
:
:
HandleScript
;
using
JS
:
:
HandleString
;
using
JS
:
:
HandleSymbol
;
#
ifdef
ENABLE_BIGINT
using
JS
:
:
HandleBigInt
;
#
endif
using
JS
:
:
HandleValue
;
using
JS
:
:
MutableHandle
;
using
JS
:
:
MutableHandleFunction
;
using
JS
:
:
MutableHandleId
;
using
JS
:
:
MutableHandleObject
;
using
JS
:
:
MutableHandleScript
;
using
JS
:
:
MutableHandleString
;
using
JS
:
:
MutableHandleSymbol
;
#
ifdef
ENABLE_BIGINT
using
JS
:
:
MutableHandleBigInt
;
#
endif
using
JS
:
:
MutableHandleValue
;
using
JS
:
:
NullHandleValue
;
using
JS
:
:
UndefinedHandleValue
;
using
JS
:
:
TrueHandleValue
;
using
JS
:
:
FalseHandleValue
;
using
JS
:
:
HandleValueArray
;
using
JS
:
:
ObjectOpResult
;
using
JS
:
:
PropertyResult
;
using
JS
:
:
Compartment
;
using
JS
:
:
Realm
;
using
JS
:
:
Zone
;
using
JS
:
:
Symbol
;
using
JS
:
:
SymbolCode
;
#
ifdef
ENABLE_BIGINT
using
JS
:
:
BigInt
;
#
endif
}
#
endif
