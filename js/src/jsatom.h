#
ifndef
jsatom_h
#
define
jsatom_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
vm
/
CommonPropertyNames
.
h
"
class
JSAtom
;
class
JSAutoByteString
;
namespace
JS
{
class
Value
;
struct
Zone
;
}
namespace
js
{
extern
const
char
*
AtomToPrintableString
(
JSContext
*
cx
JSAtom
*
atom
JSAutoByteString
*
bytes
)
;
class
PropertyName
;
}
extern
bool
AtomIsPinned
(
JSContext
*
cx
JSAtom
*
atom
)
;
#
ifdef
DEBUG
extern
bool
AtomIsPinnedInRuntime
(
JSRuntime
*
rt
JSAtom
*
atom
)
;
#
endif
#
define
DECLARE_PROTO_STR
(
name
init
clasp
)
extern
const
char
js_
#
#
name
#
#
_str
[
]
;
JS_FOR_EACH_PROTOTYPE
(
DECLARE_PROTO_STR
)
#
undef
DECLARE_PROTO_STR
#
define
DECLARE_CONST_CHAR_STR
(
idpart
id
text
)
extern
const
char
js_
#
#
idpart
#
#
_str
[
]
;
FOR_EACH_COMMON_PROPERTYNAME
(
DECLARE_CONST_CHAR_STR
)
#
undef
DECLARE_CONST_CHAR_STR
extern
const
char
js_getter_str
[
]
;
extern
const
char
js_send_str
[
]
;
extern
const
char
js_setter_str
[
]
;
namespace
js
{
class
AutoLockForExclusiveAccess
;
void
TraceAtoms
(
JSTracer
*
trc
AutoLockForExclusiveAccess
&
lock
)
;
void
TracePermanentAtoms
(
JSTracer
*
trc
)
;
void
TraceWellKnownSymbols
(
JSTracer
*
trc
)
;
enum
PinningBehavior
{
DoNotPinAtom
=
false
PinAtom
=
true
}
;
extern
JSAtom
*
Atomize
(
JSContext
*
cx
const
char
*
bytes
size_t
length
js
:
:
PinningBehavior
pin
=
js
:
:
DoNotPinAtom
const
mozilla
:
:
Maybe
<
uint32_t
>
&
indexValue
=
mozilla
:
:
Nothing
(
)
)
;
template
<
typename
CharT
>
extern
JSAtom
*
AtomizeChars
(
JSContext
*
cx
const
CharT
*
chars
size_t
length
js
:
:
PinningBehavior
pin
=
js
:
:
DoNotPinAtom
)
;
extern
JSAtom
*
AtomizeUTF8Chars
(
JSContext
*
cx
const
char
*
utf8Chars
size_t
utf8ByteLength
)
;
extern
JSAtom
*
AtomizeString
(
JSContext
*
cx
JSString
*
str
js
:
:
PinningBehavior
pin
=
js
:
:
DoNotPinAtom
)
;
template
<
AllowGC
allowGC
>
extern
JSAtom
*
ToAtom
(
JSContext
*
cx
typename
MaybeRooted
<
JS
:
:
Value
allowGC
>
:
:
HandleType
v
)
;
enum
XDRMode
{
XDR_ENCODE
XDR_DECODE
}
;
template
<
XDRMode
mode
>
class
XDRState
;
template
<
XDRMode
mode
>
bool
XDRAtom
(
XDRState
<
mode
>
*
xdr
js
:
:
MutableHandleAtom
atomp
)
;
extern
JS
:
:
Handle
<
PropertyName
*
>
ClassName
(
JSProtoKey
key
JSContext
*
cx
)
;
namespace
gc
{
void
MergeAtomsAddedWhileSweeping
(
JSRuntime
*
rt
)
;
}
#
ifdef
DEBUG
bool
AtomIsMarked
(
JS
:
:
Zone
*
zone
JSAtom
*
atom
)
;
bool
AtomIsMarked
(
JS
:
:
Zone
*
zone
jsid
id
)
;
bool
AtomIsMarked
(
JS
:
:
Zone
*
zone
const
JS
:
:
Value
&
value
)
;
#
endif
}
#
endif
