#
include
"
new
-
regexp
/
RegExpAPI
.
h
"
#
include
"
new
-
regexp
/
regexp
-
parser
.
h
"
#
include
"
new
-
regexp
/
regexp
-
shim
.
h
"
#
include
"
new
-
regexp
/
regexp
.
h
"
namespace
js
{
namespace
irregexp
{
using
frontend
:
:
TokenStream
;
using
frontend
:
:
TokenStreamAnyChars
;
using
v8
:
:
internal
:
:
FlatStringReader
;
using
v8
:
:
internal
:
:
RegExpCompileData
;
using
v8
:
:
internal
:
:
RegExpParser
;
using
v8
:
:
internal
:
:
Zone
;
Isolate
*
CreateIsolate
(
JSContext
*
cx
)
{
auto
isolate
=
MakeUnique
<
Isolate
>
(
cx
)
;
if
(
!
isolate
|
|
!
isolate
-
>
init
(
)
)
{
return
nullptr
;
}
return
isolate
.
release
(
)
;
}
static
bool
CheckPatternSyntaxImpl
(
JSContext
*
cx
FlatStringReader
*
pattern
JS
:
:
RegExpFlags
flags
RegExpCompileData
*
result
)
{
LifoAllocScope
allocScope
(
&
cx
-
>
tempLifoAlloc
(
)
)
;
Zone
zone
(
allocScope
.
alloc
(
)
)
;
v8
:
:
internal
:
:
HandleScope
handleScope
(
cx
-
>
isolate
)
;
return
RegExpParser
:
:
ParseRegExp
(
cx
-
>
isolate
&
zone
pattern
flags
result
)
;
}
bool
CheckPatternSyntax
(
JSContext
*
cx
TokenStreamAnyChars
&
ts
const
mozilla
:
:
Range
<
const
char16_t
>
chars
JS
:
:
RegExpFlags
flags
)
{
FlatStringReader
reader
(
chars
.
begin
(
)
.
get
(
)
chars
.
length
(
)
)
;
RegExpCompileData
result
;
if
(
!
CheckPatternSyntaxImpl
(
cx
&
reader
flags
&
result
)
)
{
return
false
;
}
return
true
;
}
bool
CheckPatternSyntax
(
JSContext
*
cx
TokenStreamAnyChars
&
ts
HandleAtom
pattern
JS
:
:
RegExpFlags
flags
)
{
FlatStringReader
reader
(
pattern
)
;
RegExpCompileData
result
;
if
(
!
CheckPatternSyntaxImpl
(
cx
&
reader
flags
&
result
)
)
{
return
false
;
}
return
true
;
}
}
}
