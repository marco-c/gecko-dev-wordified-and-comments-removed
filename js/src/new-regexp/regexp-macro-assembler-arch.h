#
ifndef
RegexpMacroAssemblerArch_h
#
define
RegexpMacroAssemblerArch_h
#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
new
-
regexp
/
regexp
-
macro
-
assembler
.
h
"
namespace
v8
{
namespace
internal
{
class
SMRegExpMacroAssembler
final
:
public
NativeRegExpMacroAssembler
{
public
:
SMRegExpMacroAssembler
(
JSContext
*
cx
Isolate
*
isolate
js
:
:
jit
:
:
StackMacroAssembler
&
masm
Zone
*
zone
Mode
mode
uint32_t
num_capture_registers
)
;
virtual
~
SMRegExpMacroAssembler
(
)
{
}
virtual
int
stack_limit_slack
(
)
;
virtual
IrregexpImplementation
Implementation
(
)
;
virtual
bool
Succeed
(
)
;
virtual
void
Fail
(
)
;
virtual
void
AdvanceCurrentPosition
(
int
by
)
;
virtual
void
PopCurrentPosition
(
)
;
virtual
void
PushCurrentPosition
(
)
;
private
:
void
Push
(
js
:
:
jit
:
:
Register
value
)
;
void
Pop
(
js
:
:
jit
:
:
Register
target
)
;
inline
int
char_size
(
)
{
return
static_cast
<
int
>
(
mode_
)
;
}
inline
js
:
:
jit
:
:
Scale
factor
(
)
{
return
mode_
=
=
UC16
?
js
:
:
jit
:
:
TimesTwo
:
js
:
:
jit
:
:
TimesOne
;
}
JSContext
*
cx_
;
js
:
:
jit
:
:
StackMacroAssembler
&
masm_
;
js
:
:
jit
:
:
Register
current_character_
;
js
:
:
jit
:
:
Register
current_position_
;
js
:
:
jit
:
:
Register
input_end_pointer_
;
js
:
:
jit
:
:
Register
backtrack_stack_pointer_
;
js
:
:
jit
:
:
Register
temp0_
temp1_
temp2_
;
js
:
:
jit
:
:
Label
entry_label_
;
js
:
:
jit
:
:
Label
start_label_
;
js
:
:
jit
:
:
Label
success_label_
;
js
:
:
jit
:
:
Label
exit_label_
;
Mode
mode_
;
int
num_registers_
;
int
num_capture_registers_
;
js
:
:
jit
:
:
LiveGeneralRegisterSet
savedRegisters_
;
}
;
}
}
#
endif
