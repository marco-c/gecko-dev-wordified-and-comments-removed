#
ifndef
V8_UTIL_ZONE_H_
#
define
V8_UTIL_ZONE_H_
#
include
"
ds
/
LifoAlloc
.
h
"
namespace
v8
{
namespace
internal
{
class
Zone
{
public
:
Zone
(
size_t
defaultChunkSize
)
:
lifoAlloc_
(
defaultChunkSize
)
{
lifoAlloc_
.
setAsInfallibleByDefault
(
)
;
}
void
*
New
(
size_t
size
)
{
return
lifoAlloc_
.
alloc
(
size
)
;
}
void
DeleteAll
(
)
{
lifoAlloc_
.
freeAll
(
)
;
}
static
const
size_t
kExcessLimit
=
256
*
1024
*
1024
;
bool
excess_allocation
(
)
const
{
return
lifoAlloc_
.
peakSizeOfExcludingThis
(
)
>
kExcessLimit
;
}
private
:
js
:
:
LifoAlloc
lifoAlloc_
;
}
;
class
ZoneObject
{
public
:
void
*
operator
new
(
size_t
size
Zone
*
zone
)
{
return
zone
-
>
New
(
size
)
;
}
void
operator
delete
(
void
*
size_t
)
{
MOZ_CRASH
(
"
unreachable
"
)
;
}
void
operator
delete
(
void
*
pointer
Zone
*
zone
)
{
MOZ_CRASH
(
"
unreachable
"
)
;
}
}
;
}
}
#
endif
