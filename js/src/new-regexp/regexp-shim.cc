#
include
"
new
-
regexp
/
regexp
-
shim
.
h
"
namespace
v8
{
namespace
internal
{
void
PrintF
(
const
char
*
format
.
.
.
)
{
va_list
arguments
;
va_start
(
arguments
format
)
;
vprintf
(
format
arguments
)
;
va_end
(
arguments
)
;
}
void
PrintF
(
FILE
*
out
const
char
*
format
.
.
.
)
{
va_list
arguments
;
va_start
(
arguments
format
)
;
vfprintf
(
out
format
arguments
)
;
va_end
(
arguments
)
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
AsUC16
&
c
)
{
uint16_t
v
=
c
.
value
;
bool
isPrint
=
0x20
<
v
&
&
v
<
=
0x7e
;
char
buf
[
10
]
;
const
char
*
format
=
isPrint
?
"
%
c
"
:
(
v
<
=
0xFF
)
?
"
\
\
x
%
02x
"
:
"
\
\
u
%
04x
"
;
snprintf
(
buf
sizeof
(
buf
)
format
v
)
;
return
os
<
<
buf
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
AsUC32
&
c
)
{
int32_t
v
=
c
.
value
;
if
(
v
<
=
String
:
:
kMaxUtf16CodeUnit
)
{
return
os
<
<
AsUC16
(
v
)
;
}
char
buf
[
13
]
;
snprintf
(
buf
sizeof
(
buf
)
"
\
\
u
{
%
06x
}
"
v
)
;
return
os
<
<
buf
;
}
DisallowJavascriptExecution
:
:
DisallowJavascriptExecution
(
Isolate
*
isolate
)
:
nojs_
(
isolate
-
>
cx
(
)
)
{
}
bool
FLAG_correctness_fuzzer_suppressions
=
false
;
bool
FLAG_enable_regexp_unaligned_accesses
=
false
;
bool
FLAG_harmony_regexp_sequence
=
false
;
bool
FLAG_regexp_interpret_all
=
false
;
bool
FLAG_regexp_mode_modifiers
=
false
;
bool
FLAG_regexp_optimization
=
false
;
bool
FLAG_regexp_peephole_optimization
=
false
;
bool
FLAG_regexp_possessive_quantifier
=
false
;
bool
FLAG_regexp_tier_up
=
false
;
bool
FLAG_trace_regexp_assembler
=
false
;
bool
FLAG_trace_regexp_bytecodes
=
false
;
bool
FLAG_trace_regexp_parser
=
false
;
bool
FLAG_trace_regexp_peephole_optimization
=
false
;
}
}
