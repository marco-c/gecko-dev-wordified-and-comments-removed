#
include
"
mozilla
/
PodOperations
.
h
"
#
include
"
ds
/
Bitmap
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
using
namespace
js
;
BEGIN_TEST
(
testSparseBitmapBasics
)
{
SparseBitmap
bitmap
;
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
!
bitmap
.
getBit
(
i
)
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
!
bitmap
.
getBit
(
i
*
1000
)
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
=
2
)
{
bitmap
.
setBit
(
i
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
bitmap
.
getBit
(
i
)
=
=
(
(
i
%
2
)
=
=
0
)
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
=
2
)
{
bitmap
.
setBit
(
i
*
1000
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
bitmap
.
getBit
(
i
*
1000
)
=
=
(
(
i
%
2
)
=
=
0
)
)
;
}
SparseBitmap
other
;
for
(
size_t
i
=
1
;
i
<
100
;
i
+
=
2
)
{
other
.
setBit
(
i
*
1000
)
;
}
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
other
.
getBit
(
i
*
1000
)
=
=
(
(
i
%
2
)
!
=
0
)
)
;
}
bitmap
.
bitwiseOrWith
(
other
)
;
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
bitmap
.
getBit
(
i
*
1000
)
)
;
}
DenseBitmap
dense
;
size_t
wordCount
=
(
100
*
1000
)
/
JS_BITS_PER_WORD
+
1
;
CHECK
(
dense
.
ensureSpace
(
wordCount
)
)
;
other
.
bitwiseOrInto
(
dense
)
;
bitmap
.
bitwiseAndWith
(
dense
)
;
for
(
size_t
i
=
0
;
i
<
100
;
i
+
+
)
{
CHECK
(
bitmap
.
getBit
(
i
*
1000
)
=
=
(
(
i
%
2
)
!
=
0
)
)
;
}
return
true
;
}
END_TEST
(
testSparseBitmapBasics
)
BEGIN_TEST
(
testSparseBitmapExternalOR
)
{
const
size_t
wordCount
=
10
;
SparseBitmap
bitmap
;
for
(
size_t
i
=
0
;
i
<
wordCount
;
i
+
+
)
{
bitmap
.
setBit
(
i
*
JS_BITS_PER_WORD
+
i
)
;
}
uintptr_t
target
[
wordCount
]
;
mozilla
:
:
PodArrayZero
(
target
)
;
bitmap
.
bitwiseOrRangeInto
(
0
1
target
)
;
CHECK
(
target
[
0
]
=
=
1u
<
<
0
)
;
CHECK
(
target
[
1
]
=
=
0
)
;
mozilla
:
:
PodArrayZero
(
target
)
;
bitmap
.
bitwiseOrRangeInto
(
1
1
target
)
;
CHECK
(
target
[
0
]
=
=
1u
<
<
1
)
;
CHECK
(
target
[
1
]
=
=
0
)
;
mozilla
:
:
PodArrayZero
(
target
)
;
bitmap
.
bitwiseOrRangeInto
(
0
1
target
)
;
bitmap
.
bitwiseOrRangeInto
(
1
1
target
)
;
CHECK
(
target
[
0
]
=
=
(
(
1u
<
<
0
)
|
(
1u
<
<
1
)
)
)
;
mozilla
:
:
PodArrayZero
(
target
)
;
bitmap
.
bitwiseOrRangeInto
(
2
wordCount
-
2
target
)
;
for
(
size_t
i
=
0
;
i
<
wordCount
-
2
;
i
+
+
)
{
CHECK
(
target
[
i
]
=
=
(
1u
<
<
(
i
+
2
)
)
)
;
}
CHECK
(
target
[
wordCount
-
1
]
=
=
0
)
;
return
true
;
}
END_TEST
(
testSparseBitmapExternalOR
)
BEGIN_TEST
(
testSparseBitmapExternalAND
)
{
const
size_t
wordCount
=
4
;
SparseBitmap
bitmap
;
for
(
size_t
i
=
0
;
i
<
wordCount
;
i
+
+
)
{
bitmap
.
setBit
(
i
*
JS_BITS_PER_WORD
+
i
)
;
bitmap
.
setBit
(
i
*
JS_BITS_PER_WORD
+
i
+
1
)
;
}
uintptr_t
source
[
wordCount
]
;
CHECK
(
bitmap
.
getBit
(
0
)
)
;
CHECK
(
bitmap
.
getBit
(
1
)
)
;
source
[
0
]
=
~
(
1
<
<
1
)
;
bitmap
.
bitwiseAndRangeWith
(
0
1
source
)
;
CHECK
(
bitmap
.
getBit
(
0
)
)
;
CHECK
(
!
bitmap
.
getBit
(
1
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
+
1
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
+
2
)
)
;
source
[
0
]
=
~
(
1
<
<
2
)
;
bitmap
.
bitwiseAndRangeWith
(
1
1
source
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
+
1
)
)
;
CHECK
(
!
bitmap
.
getBit
(
JS_BITS_PER_WORD
+
2
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
2
+
2
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
2
+
3
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
3
+
3
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
3
+
4
)
)
;
source
[
0
]
=
~
(
1
<
<
3
)
;
source
[
1
]
=
~
(
1
<
<
4
)
;
bitmap
.
bitwiseAndRangeWith
(
2
2
source
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
2
+
2
)
)
;
CHECK
(
!
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
2
+
3
)
)
;
CHECK
(
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
3
+
3
)
)
;
CHECK
(
!
bitmap
.
getBit
(
JS_BITS_PER_WORD
*
3
+
4
)
)
;
return
true
;
}
END_TEST
(
testSparseBitmapExternalAND
)
