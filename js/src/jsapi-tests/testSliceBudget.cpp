#
include
"
js
/
SliceBudget
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
using
namespace
js
;
BEGIN_TEST
(
testSliceBudgetUnlimited
)
{
SliceBudget
budget
=
SliceBudget
:
:
unlimited
(
)
;
CHECK
(
budget
.
isUnlimited
(
)
)
;
CHECK
(
!
budget
.
isTimeBudget
(
)
)
;
CHECK
(
!
budget
.
isWorkBudget
(
)
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
1000000
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
return
true
;
}
END_TEST
(
testSliceBudgetUnlimited
)
BEGIN_TEST
(
testSliceBudgetWork
)
{
SliceBudget
budget
=
SliceBudget
(
WorkBudget
(
10000
)
)
;
CHECK
(
!
budget
.
isUnlimited
(
)
)
;
CHECK
(
budget
.
isWorkBudget
(
)
)
;
CHECK
(
!
budget
.
isTimeBudget
(
)
)
;
CHECK
(
budget
.
workBudget
(
)
=
=
10000
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
5000
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
5000
)
;
CHECK
(
budget
.
isOverBudget
(
)
)
;
return
true
;
}
END_TEST
(
testSliceBudgetWork
)
BEGIN_TEST
(
testSliceBudgetTime
)
{
SliceBudget
budget
=
SliceBudget
(
TimeBudget
(
10000
)
)
;
CHECK
(
!
budget
.
isUnlimited
(
)
)
;
CHECK
(
!
budget
.
isWorkBudget
(
)
)
;
CHECK
(
budget
.
isTimeBudget
(
)
)
;
CHECK
(
budget
.
timeBudget
(
)
=
=
10000
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
5000
)
;
budget
.
step
(
5000
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
return
true
;
}
END_TEST
(
testSliceBudgetTime
)
BEGIN_TEST
(
testSliceBudgetTimeZero
)
{
SliceBudget
budget
=
SliceBudget
(
TimeBudget
(
0
)
)
;
budget
.
step
(
1000
)
;
CHECK
(
budget
.
isOverBudget
(
)
)
;
return
true
;
}
END_TEST
(
testSliceBudgetTimeZero
)
BEGIN_TEST
(
testSliceBudgetInterruptibleTime
)
{
mozilla
:
:
Atomic
<
bool
>
wantInterrupt
(
false
)
;
static
constexpr
int64_t
LONG_TIME
=
100000
;
SliceBudget
budget
=
SliceBudget
(
TimeBudget
(
LONG_TIME
)
&
wantInterrupt
)
;
CHECK
(
!
budget
.
isUnlimited
(
)
)
;
CHECK
(
!
budget
.
isWorkBudget
(
)
)
;
CHECK
(
budget
.
isTimeBudget
(
)
)
;
CHECK
(
budget
.
timeBudget
(
)
=
=
LONG_TIME
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
500
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
wantInterrupt
=
true
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
1000
)
;
CHECK
(
budget
.
isOverBudget
(
)
)
;
CHECK
(
!
wantInterrupt
)
;
CHECK
(
budget
.
isOverBudget
(
)
)
;
budget
.
reset
(
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
budget
.
step
(
5
)
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
wantInterrupt
=
true
;
budget
.
step
(
2000
)
;
wantInterrupt
=
false
;
CHECK
(
!
budget
.
isOverBudget
(
)
)
;
return
true
;
}
END_TEST
(
testSliceBudgetInterruptibleTime
)
