#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
using
namespace
js
;
BEGIN_TEST
(
test_functionBinding
)
{
RootedFunction
fun
(
cx
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
options
.
setFileAndLine
(
__FILE__
__LINE__
)
;
const
char
s1chars
[
]
=
"
return
(
typeof
s1
)
=
=
'
undefined
'
;
"
;
JS
:
:
AutoObjectVector
emptyScopeChain
(
cx
)
;
CHECK
(
JS
:
:
CompileFunctionUtf8
(
cx
emptyScopeChain
options
"
s1
"
0
nullptr
s1chars
strlen
(
s1chars
)
&
fun
)
)
;
CHECK
(
fun
)
;
JS
:
:
AutoValueVector
args
(
cx
)
;
RootedValue
rval
(
cx
)
;
CHECK
(
JS
:
:
Call
(
cx
UndefinedHandleValue
fun
args
&
rval
)
)
;
CHECK
(
rval
.
isBoolean
(
)
)
;
CHECK
(
rval
.
toBoolean
(
)
)
;
const
char
s2chars
[
]
=
"
return
(
typeof
anonymous
)
=
=
'
undefined
'
;
"
;
CHECK
(
JS
:
:
CompileFunctionUtf8
(
cx
emptyScopeChain
options
"
s2
"
0
nullptr
s2chars
strlen
(
s2chars
)
&
fun
)
)
;
CHECK
(
fun
)
;
CHECK
(
JS
:
:
Call
(
cx
UndefinedHandleValue
fun
args
&
rval
)
)
;
CHECK
(
rval
.
isBoolean
(
)
)
;
CHECK
(
rval
.
toBoolean
(
)
)
;
const
char
s3chars
[
]
=
"
return
(
typeof
anonymous
)
=
=
'
undefined
'
;
"
;
CHECK
(
JS
:
:
CompileFunctionUtf8
(
cx
emptyScopeChain
options
nullptr
0
nullptr
s3chars
strlen
(
s3chars
)
&
fun
)
)
;
CHECK
(
fun
)
;
CHECK
(
JS
:
:
Call
(
cx
UndefinedHandleValue
fun
args
&
rval
)
)
;
CHECK
(
rval
.
isBoolean
(
)
)
;
CHECK
(
rval
.
toBoolean
(
)
)
;
return
true
;
}
END_TEST
(
test_functionBinding
)
