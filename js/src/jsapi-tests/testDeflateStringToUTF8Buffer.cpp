#
include
"
jsapi
-
tests
/
tests
.
h
"
using
namespace
JS
;
BEGIN_TEST
(
test_DeflateStringToUTF8Buffer
)
{
JSString
*
str
;
JSFlatString
*
flatStr
;
char
actual
[
100
]
;
auto
span
=
mozilla
:
:
MakeSpan
(
actual
)
;
str
=
JS_NewStringCopyZ
(
cx
"
Ohai
"
)
;
MOZ_RELEASE_ASSERT
(
str
)
;
flatStr
=
JS_FlattenString
(
cx
str
)
;
{
const
char
expected
[
]
=
{
0x4F
0x68
0x61
0x69
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
4u
)
;
}
{
const
char
expected
[
]
=
{
0x4F
0x68
0x61
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
3
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
3u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
0
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
0u
)
;
}
str
=
JS_NewUCStringCopyZ
(
cx
u
"
\
xD3
\
x68
\
xE3
\
xEF
"
)
;
MOZ_RELEASE_ASSERT
(
str
)
;
flatStr
=
JS_FlattenString
(
cx
str
)
;
{
const
unsigned
char
expected
[
]
=
{
0xC3
0x93
0x68
0xC3
0xA3
0xC3
0xAF
0x1
}
;
memset
(
actual
0x1
100
)
;
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xC3
0x93
0x68
0xC3
0xA3
0xC3
0xAF
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
7
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
7u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xC3
0x93
0x68
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
3
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
3u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xC3
0x93
0x68
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
4
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
3u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
0
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
0u
)
;
}
str
=
JS_NewUCStringCopyZ
(
cx
u
"
\
x038C
\
x0068
\
x0203
\
x0457
"
)
;
MOZ_RELEASE_ASSERT
(
str
)
;
flatStr
=
JS_FlattenString
(
cx
str
)
;
{
const
unsigned
char
expected
[
]
=
{
0xCE
0x8C
0x68
0xC8
0x83
0xD1
0x97
0x1
}
;
memset
(
actual
0x1
100
)
;
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xCE
0x8C
0x68
0xC8
0x83
0xD1
0x97
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
7
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
7u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xCE
0x8C
0x68
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
3
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
3u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0xCE
0x8C
0x68
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
4
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
3u
)
;
}
{
const
unsigned
char
expected
[
]
=
{
0x1
}
;
memset
(
actual
0x1
100
)
;
size_t
dstlen
=
JS
:
:
DeflateStringToUTF8Buffer
(
flatStr
span
.
To
(
0
)
)
;
CHECK_EQUAL
(
memcmp
(
actual
expected
sizeof
(
expected
)
)
0
)
;
CHECK_EQUAL
(
dstlen
0u
)
;
}
return
true
;
}
END_TEST
(
test_DeflateStringToUTF8Buffer
)
