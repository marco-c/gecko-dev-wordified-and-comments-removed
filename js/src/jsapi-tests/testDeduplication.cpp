#
include
<
string
.
h
>
#
include
"
jsfriendapi
.
h
"
#
include
"
gc
/
GC
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
StableStringChars
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
StringType
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
static
bool
SameChars
(
JSContext
*
cx
JSString
*
str1
JSString
*
str2
size_t
offset
)
{
JS
:
:
AutoCheckCannotGC
nogc
(
cx
)
;
const
JS
:
:
Latin1Char
*
chars1
=
JS
:
:
StringToLinearString
(
cx
str1
)
-
>
latin1Chars
(
nogc
)
;
const
JS
:
:
Latin1Char
*
chars2
=
JS
:
:
StringToLinearString
(
cx
str2
)
-
>
latin1Chars
(
nogc
)
;
return
chars1
=
=
chars2
+
offset
;
}
BEGIN_TEST
(
testDeduplication_ASSC
)
{
const
char
text
[
]
=
"
Andthebeastshallcomeforthsurroundedbyaroilingcloudofvengeance
.
"
"
Thehouseoftheunbelieversshallberazedandtheyshallbescorchedtoth
"
"
eearth
.
Theirtagsshallblinkuntiltheendofdays
.
"
;
JS
:
:
RootedString
original
(
cx
)
;
JS
:
:
RootedString
str
(
cx
)
;
JS
:
:
RootedString
dep
(
cx
)
;
JS
:
:
RootedString
depdep
(
cx
)
;
JS
:
:
RootedString
str2
(
cx
)
;
JS
:
:
RootedString
dep2
(
cx
)
;
JS
:
:
RootedString
depdep2
(
cx
)
;
{
js
:
:
gc
:
:
AutoSuppressGC
suppress
(
cx
)
;
original
=
JS_NewStringCopyZ
(
cx
text
)
;
CHECK
(
original
)
;
str
=
JS_NewStringCopyZ
(
cx
text
)
;
CHECK
(
str
)
;
dep
=
JS_NewDependentString
(
cx
str
10
100
)
;
CHECK
(
dep
)
;
depdep
=
JS_NewDependentString
(
cx
dep
10
80
)
;
CHECK
(
depdep
)
;
str2
=
JS_NewStringCopyZ
(
cx
text
)
;
CHECK
(
str2
)
;
dep2
=
JS_NewDependentString
(
cx
str2
10
100
)
;
CHECK
(
dep2
)
;
depdep2
=
JS_NewDependentString
(
cx
dep2
10
80
)
;
CHECK
(
depdep2
)
;
}
JS
:
:
AutoStableStringChars
stable
(
cx
)
;
CHECK
(
stable
.
init
(
cx
depdep
)
)
;
const
JS
:
:
Latin1Char
*
chars
=
stable
.
latin1Chars
(
)
;
CHECK
(
memcmp
(
chars
text
+
20
80
*
sizeof
(
JS
:
:
Latin1Char
)
)
=
=
0
)
;
CHECK
(
SameChars
(
cx
depdep
str
20
)
)
;
CHECK
(
!
SameChars
(
cx
depdep
original
20
)
)
;
CHECK
(
SameChars
(
cx
depdep2
str2
20
)
)
;
CHECK
(
!
SameChars
(
cx
depdep2
original
20
)
)
;
cx
-
>
minorGC
(
JS
:
:
GCReason
:
:
API
)
;
CHECK
(
SameChars
(
cx
depdep
str
20
)
)
;
CHECK
(
!
SameChars
(
cx
depdep
original
20
)
)
;
CHECK
(
SameChars
(
cx
depdep2
str2
20
)
)
;
CHECK
(
SameChars
(
cx
depdep2
original
20
)
)
;
return
true
;
}
END_TEST
(
testDeduplication_ASSC
)
