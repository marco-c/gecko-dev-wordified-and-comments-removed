#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
string_view
>
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
GlobalObject
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Warnings
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
static
bool
gIsCompilableUnitWarned
=
false
;
BEGIN_TEST
(
testIsCompilableUnit
)
{
JS
:
:
SetWarningReporter
(
cx
WarningReporter
)
;
{
static
constexpr
std
:
:
string_view
src
=
"
1
"
;
CHECK
(
JS_Utf8BufferIsCompilableUnit
(
cx
global
src
.
data
(
)
src
.
length
(
)
)
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
gIsCompilableUnitWarned
)
;
}
{
static
constexpr
std
:
:
string_view
src
=
"
1
+
"
;
CHECK
(
!
JS_Utf8BufferIsCompilableUnit
(
cx
global
src
.
data
(
)
src
.
length
(
)
)
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
gIsCompilableUnitWarned
)
;
}
{
static
constexpr
std
:
:
string_view
src
=
"
(
)
=
>
"
;
CHECK
(
!
JS_Utf8BufferIsCompilableUnit
(
cx
global
src
.
data
(
)
src
.
length
(
)
)
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
gIsCompilableUnitWarned
)
;
}
{
static
constexpr
std
:
:
string_view
src
=
"
(
)
=
>
{
return
;
unreachable
(
)
;
}
"
;
CHECK
(
JS_Utf8BufferIsCompilableUnit
(
cx
global
src
.
data
(
)
src
.
length
(
)
)
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
gIsCompilableUnitWarned
)
;
}
{
static
constexpr
std
:
:
string_view
src
=
"
\
x80
"
;
CHECK
(
JS_Utf8BufferIsCompilableUnit
(
cx
global
src
.
data
(
)
src
.
length
(
)
)
)
;
CHECK
(
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
gIsCompilableUnitWarned
)
;
JS_ClearPendingException
(
cx
)
;
}
return
true
;
}
static
void
WarningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
gIsCompilableUnitWarned
=
true
;
}
END_TEST
(
testIsCompilableUnit
)
;
