#
include
"
gc
/
Policy
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SweepingAPI
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testWeakCacheSet
)
{
JS
:
:
RootedObject
tenured1
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS
:
:
RootedObject
tenured2
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS_GC
(
cx
)
;
JS
:
:
RootedObject
nursery1
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS
:
:
RootedObject
nursery2
(
cx
JS_NewPlainObject
(
cx
)
)
;
using
ObjectSet
=
js
:
:
GCHashSet
<
JS
:
:
Heap
<
JSObject
*
>
js
:
:
MovableCellHasher
<
JS
:
:
Heap
<
JSObject
*
>
>
js
:
:
SystemAllocPolicy
>
;
using
Cache
=
JS
:
:
WeakCache
<
ObjectSet
>
;
auto
cache
=
Cache
(
JS
:
:
GetObjectZone
(
tenured1
)
ObjectSet
(
)
)
;
CHECK
(
cache
.
init
(
)
)
;
cache
.
put
(
tenured1
)
;
cache
.
put
(
tenured2
)
;
cache
.
put
(
nursery1
)
;
cache
.
put
(
nursery2
)
;
JS_GC
(
cx
)
;
CHECK
(
cache
.
has
(
tenured1
)
)
;
CHECK
(
cache
.
has
(
tenured2
)
)
;
CHECK
(
cache
.
has
(
nursery1
)
)
;
CHECK
(
cache
.
has
(
nursery2
)
)
;
tenured2
=
nursery2
=
nullptr
;
JS_GC
(
cx
)
;
CHECK
(
cache
.
has
(
tenured1
)
)
;
CHECK
(
cache
.
has
(
nursery1
)
)
;
CHECK
(
cache
.
count
(
)
=
=
2
)
;
return
true
;
}
END_TEST
(
testWeakCacheSet
)
BEGIN_TEST
(
testWeakCacheMap
)
{
JS
:
:
RootedObject
tenured1
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS
:
:
RootedObject
tenured2
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS_GC
(
cx
)
;
JS
:
:
RootedObject
nursery1
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS
:
:
RootedObject
nursery2
(
cx
JS_NewPlainObject
(
cx
)
)
;
using
ObjectMap
=
js
:
:
GCHashMap
<
JS
:
:
Heap
<
JSObject
*
>
uint32_t
js
:
:
MovableCellHasher
<
JS
:
:
Heap
<
JSObject
*
>
>
>
;
using
Cache
=
JS
:
:
WeakCache
<
ObjectMap
>
;
auto
cache
=
Cache
(
JS
:
:
GetObjectZone
(
tenured1
)
ObjectMap
(
cx
)
)
;
CHECK
(
cache
.
init
(
)
)
;
cache
.
put
(
tenured1
1
)
;
cache
.
put
(
tenured2
2
)
;
cache
.
put
(
nursery1
3
)
;
cache
.
put
(
nursery2
4
)
;
JS_GC
(
cx
)
;
CHECK
(
cache
.
has
(
tenured1
)
)
;
CHECK
(
cache
.
has
(
tenured2
)
)
;
CHECK
(
cache
.
has
(
nursery1
)
)
;
CHECK
(
cache
.
has
(
nursery2
)
)
;
tenured2
=
nursery2
=
nullptr
;
JS_GC
(
cx
)
;
CHECK
(
cache
.
has
(
tenured1
)
)
;
CHECK
(
cache
.
has
(
nursery1
)
)
;
CHECK
(
cache
.
count
(
)
=
=
2
)
;
return
true
;
}
END_TEST
(
testWeakCacheMap
)
