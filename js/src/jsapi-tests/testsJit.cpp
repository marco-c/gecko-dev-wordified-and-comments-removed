#
include
"
jsapi
-
tests
/
testsJit
.
h
"
#
include
"
jit
/
JitCommon
.
h
"
#
include
"
jit
/
Linker
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
void
PrepareJit
(
js
:
:
jit
:
:
MacroAssembler
&
masm
)
{
using
namespace
js
:
:
jit
;
#
if
defined
(
JS_CODEGEN_ARM64
)
masm
.
Mov
(
PseudoStackPointer64
sp
)
;
masm
.
SetStackPointer64
(
PseudoStackPointer64
)
;
#
endif
AllocatableRegisterSet
regs
(
RegisterSet
:
:
All
(
)
)
;
LiveRegisterSet
save
(
regs
.
asLiveSet
(
)
)
;
#
if
defined
(
JS_CODEGEN_ARM
)
save
.
add
(
js
:
:
jit
:
:
d15
)
;
#
endif
#
if
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
|
|
\
defined
(
JS_CODEGEN_LOONG64
)
|
|
defined
(
JS_CODEGEN_RISCV64
)
save
.
add
(
js
:
:
jit
:
:
ra
)
;
#
elif
defined
(
JS_USE_LINK_REGISTER
)
save
.
add
(
js
:
:
jit
:
:
lr
)
;
#
endif
masm
.
PushRegsInMask
(
save
)
;
}
bool
ExecuteJit
(
JSContext
*
cx
js
:
:
jit
:
:
MacroAssembler
&
masm
)
{
using
namespace
js
:
:
jit
;
AllocatableRegisterSet
regs
(
RegisterSet
:
:
All
(
)
)
;
LiveRegisterSet
save
(
regs
.
asLiveSet
(
)
)
;
#
if
defined
(
JS_CODEGEN_ARM
)
save
.
add
(
js
:
:
jit
:
:
d15
)
;
#
endif
#
if
defined
(
JS_CODEGEN_MIPS32
)
|
|
defined
(
JS_CODEGEN_MIPS64
)
|
|
\
defined
(
JS_CODEGEN_LOONG64
)
|
|
defined
(
JS_CODEGEN_RISCV64
)
save
.
add
(
js
:
:
jit
:
:
ra
)
;
#
elif
defined
(
JS_USE_LINK_REGISTER
)
save
.
add
(
js
:
:
jit
:
:
lr
)
;
#
endif
masm
.
PopRegsInMask
(
save
)
;
#
if
defined
(
JS_CODEGEN_ARM64
)
masm
.
abiret
(
)
;
masm
.
SetStackPointer64
(
PseudoStackPointer64
)
;
#
else
masm
.
abiret
(
)
;
#
endif
if
(
masm
.
oom
(
)
)
{
return
false
;
}
JitCode
*
code
=
nullptr
;
{
Linker
linker
(
masm
)
;
code
=
linker
.
newCode
(
cx
CodeKind
:
:
Other
)
;
if
(
!
code
)
{
return
false
;
}
}
JS
:
:
AutoSuppressGCAnalysis
suppress
;
EnterTest
test
=
code
-
>
as
<
EnterTest
>
(
)
;
CALL_GENERATED_0
(
test
)
;
return
true
;
}
