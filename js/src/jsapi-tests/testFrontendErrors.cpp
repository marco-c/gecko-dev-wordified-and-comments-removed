#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
string
.
h
>
#
include
"
frontend
/
FrontendContext
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
Exception
.
h
"
#
include
"
js
/
experimental
/
CompileScript
.
h
"
#
include
"
js
/
friend
/
ErrorMessages
.
h
"
#
include
"
js
/
friend
/
StackLimits
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Stack
.
h
"
#
include
"
js
/
Warnings
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
util
/
NativeStack
.
h
"
#
include
"
vm
/
ErrorObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Runtime
.
h
"
using
namespace
JS
;
BEGIN_TEST
(
testFrontendErrors_error
)
{
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
static
constexpr
JS
:
:
NativeStackSize
stackSize
=
128
*
sizeof
(
size_t
)
*
1024
;
JS
:
:
SetNativeStackQuota
(
fc
stackSize
)
;
JS
:
:
PrefableCompileOptions
prefableOptions
;
JS
:
:
CompileOptions
options
(
prefableOptions
)
;
const
char
*
filename
=
"
testFrontendErrors_error
.
js
"
;
options
.
setFile
(
filename
)
;
CHECK
(
!
JS
:
:
HadFrontendErrors
(
fc
)
)
;
{
const
char
source
[
]
=
"
syntax
error
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
fc
source
strlen
(
source
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompilationStorage
compileStorage
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
fc
options
srcBuf
compileStorage
)
;
CHECK
(
!
stencil
)
;
}
CHECK
(
JS
:
:
HadFrontendErrors
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOverRecursed
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOutOfMemory
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendAllocationOverflow
(
fc
)
)
;
CHECK
(
JS
:
:
GetFrontendWarningCount
(
fc
)
=
=
0
)
;
{
const
JSErrorReport
*
report
=
JS
:
:
GetFrontendErrorReport
(
fc
options
)
;
CHECK
(
report
)
;
CHECK
(
report
-
>
errorNumber
=
=
JSMSG_UNEXPECTED_TOKEN_NO_EXPECT
)
;
CHECK
(
report
-
>
filename
.
c_str
(
)
=
=
filename
)
;
}
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
warningReporter
)
;
bool
result
=
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
cx
fc
options
)
;
CHECK
(
result
)
;
CHECK
(
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
warningReporterCalled
)
;
CHECK
(
!
JS_IsThrowingOutOfMemory
(
cx
)
)
;
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exception
(
cx
)
;
CHECK
(
JS_GetPendingException
(
cx
&
exception
)
)
;
CHECK
(
exception
.
isObject
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
exceptionObj
(
cx
&
exception
.
toObject
(
)
)
;
const
JSErrorReport
*
report
=
JS_ErrorFromException
(
cx
exceptionObj
)
;
CHECK
(
report
)
;
CHECK
(
report
-
>
errorNumber
=
=
JSMSG_UNEXPECTED_TOKEN_NO_EXPECT
)
;
CHECK
(
report
-
>
filename
.
c_str
(
)
!
=
filename
)
;
CHECK
(
strcmp
(
report
-
>
filename
.
c_str
(
)
filename
)
=
=
0
)
;
}
JS_ClearPendingException
(
cx
)
;
JS
:
:
DestroyFrontendContext
(
fc
)
;
return
true
;
}
static
bool
warningReporterCalled
;
static
void
warningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
warningReporterCalled
=
true
;
}
END_TEST
(
testFrontendErrors_error
)
bool
cls_testFrontendErrors_error
:
:
warningReporterCalled
=
false
;
BEGIN_TEST
(
testFrontendErrors_warning
)
{
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
static
constexpr
JS
:
:
NativeStackSize
stackSize
=
128
*
sizeof
(
size_t
)
*
1024
;
JS
:
:
SetNativeStackQuota
(
fc
stackSize
)
;
JS
:
:
PrefableCompileOptions
prefableOptions
;
JS
:
:
CompileOptions
options
(
prefableOptions
)
;
options
.
setFile
(
filename
)
;
{
const
char
source
[
]
=
"
function
f
(
)
{
return
;
f
(
)
;
}
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
fc
source
strlen
(
source
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompilationStorage
compileStorage
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
fc
options
srcBuf
compileStorage
)
;
CHECK
(
stencil
)
;
}
CHECK
(
!
JS
:
:
HadFrontendErrors
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOverRecursed
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOutOfMemory
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendAllocationOverflow
(
fc
)
)
;
CHECK
(
JS
:
:
GetFrontendWarningCount
(
fc
)
=
=
1
)
;
{
const
JSErrorReport
*
report
=
JS
:
:
GetFrontendWarningAt
(
fc
0
options
)
;
CHECK
(
report
)
;
CHECK
(
report
-
>
errorNumber
=
=
JSMSG_STMT_AFTER_RETURN
)
;
CHECK
(
report
-
>
filename
.
c_str
(
)
=
=
filename
)
;
}
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
warningReporter
)
;
bool
result
=
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
cx
fc
options
)
;
CHECK
(
result
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
warningReporterCalled
)
;
CHECK
(
!
JS_IsThrowingOutOfMemory
(
cx
)
)
;
CHECK
(
errorNumberMatches
)
;
CHECK
(
filenameMatches
)
;
JS
:
:
DestroyFrontendContext
(
fc
)
;
return
true
;
}
static
const
char
*
filename
;
static
bool
warningReporterCalled
;
static
bool
errorNumberMatches
;
static
bool
filenameMatches
;
static
void
warningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
warningReporterCalled
=
true
;
errorNumberMatches
=
report
-
>
errorNumber
=
=
JSMSG_STMT_AFTER_RETURN
;
filenameMatches
=
report
-
>
filename
.
c_str
(
)
=
=
filename
;
}
END_TEST
(
testFrontendErrors_warning
)
const
char
*
cls_testFrontendErrors_warning
:
:
filename
=
"
testFrontendErrors_warning
.
js
"
;
bool
cls_testFrontendErrors_warning
:
:
warningReporterCalled
=
false
;
bool
cls_testFrontendErrors_warning
:
:
errorNumberMatches
=
false
;
bool
cls_testFrontendErrors_warning
:
:
filenameMatches
=
false
;
BEGIN_TEST
(
testFrontendErrors_oom
)
{
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
JS
:
:
PrefableCompileOptions
prefableOptions
;
JS
:
:
CompileOptions
options
(
prefableOptions
)
;
CHECK
(
!
JS
:
:
HadFrontendErrors
(
fc
)
)
;
js
:
:
ReportOutOfMemory
(
fc
)
;
CHECK
(
JS
:
:
HadFrontendErrors
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOverRecursed
(
fc
)
)
;
CHECK
(
JS
:
:
HadFrontendOutOfMemory
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendAllocationOverflow
(
fc
)
)
;
CHECK
(
JS
:
:
GetFrontendWarningCount
(
fc
)
=
=
0
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
warningReporter
)
;
bool
result
=
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
cx
fc
options
)
;
CHECK
(
!
result
)
;
CHECK
(
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
warningReporterCalled
)
;
CHECK
(
JS_IsThrowingOutOfMemory
(
cx
)
)
;
JS_ClearPendingException
(
cx
)
;
JS
:
:
DestroyFrontendContext
(
fc
)
;
return
true
;
}
static
bool
warningReporterCalled
;
static
void
warningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
warningReporterCalled
=
true
;
}
END_TEST
(
testFrontendErrors_oom
)
bool
cls_testFrontendErrors_oom
:
:
warningReporterCalled
=
false
;
BEGIN_TEST
(
testFrontendErrors_overRecursed
)
{
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
JS
:
:
PrefableCompileOptions
prefableOptions
;
JS
:
:
CompileOptions
options
(
prefableOptions
)
;
CHECK
(
!
JS
:
:
HadFrontendErrors
(
fc
)
)
;
js
:
:
ReportOverRecursed
(
fc
)
;
CHECK
(
JS
:
:
HadFrontendErrors
(
fc
)
)
;
CHECK
(
JS
:
:
HadFrontendOverRecursed
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOutOfMemory
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendAllocationOverflow
(
fc
)
)
;
CHECK
(
JS
:
:
GetFrontendWarningCount
(
fc
)
=
=
0
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
warningReporter
)
;
bool
result
=
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
cx
fc
options
)
;
CHECK
(
result
)
;
CHECK
(
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
warningReporterCalled
)
;
CHECK
(
!
JS_IsThrowingOutOfMemory
(
cx
)
)
;
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exception
(
cx
)
;
CHECK
(
JS_GetPendingException
(
cx
&
exception
)
)
;
CHECK
(
exception
.
isObject
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
exceptionObj
(
cx
&
exception
.
toObject
(
)
)
;
const
JSErrorReport
*
report
=
JS_ErrorFromException
(
cx
exceptionObj
)
;
CHECK
(
report
)
;
CHECK
(
report
-
>
errorNumber
=
=
JSMSG_OVER_RECURSED
)
;
}
JS_ClearPendingException
(
cx
)
;
JS
:
:
DestroyFrontendContext
(
fc
)
;
return
true
;
}
static
bool
warningReporterCalled
;
static
void
warningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
warningReporterCalled
=
true
;
}
END_TEST
(
testFrontendErrors_overRecursed
)
bool
cls_testFrontendErrors_overRecursed
:
:
warningReporterCalled
=
false
;
BEGIN_TEST
(
testFrontendErrors_allocationOverflow
)
{
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
JS
:
:
PrefableCompileOptions
prefableOptions
;
JS
:
:
CompileOptions
options
(
prefableOptions
)
;
CHECK
(
!
JS
:
:
HadFrontendErrors
(
fc
)
)
;
js
:
:
ReportAllocationOverflow
(
fc
)
;
CHECK
(
JS
:
:
HadFrontendErrors
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOverRecursed
(
fc
)
)
;
CHECK
(
!
JS
:
:
HadFrontendOutOfMemory
(
fc
)
)
;
CHECK
(
JS
:
:
HadFrontendAllocationOverflow
(
fc
)
)
;
CHECK
(
JS
:
:
GetFrontendWarningCount
(
fc
)
=
=
0
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
JS
:
:
SetWarningReporter
(
cx
warningReporter
)
;
bool
result
=
JS
:
:
ConvertFrontendErrorsToRuntimeErrors
(
cx
fc
options
)
;
CHECK
(
result
)
;
CHECK
(
JS_IsExceptionPending
(
cx
)
)
;
CHECK
(
!
warningReporterCalled
)
;
CHECK
(
!
JS_IsThrowingOutOfMemory
(
cx
)
)
;
{
JS
:
:
Rooted
<
JS
:
:
Value
>
exception
(
cx
)
;
CHECK
(
JS_GetPendingException
(
cx
&
exception
)
)
;
CHECK
(
exception
.
isObject
(
)
)
;
JS
:
:
Rooted
<
JSObject
*
>
exceptionObj
(
cx
&
exception
.
toObject
(
)
)
;
const
JSErrorReport
*
report
=
JS_ErrorFromException
(
cx
exceptionObj
)
;
CHECK
(
report
)
;
CHECK
(
report
-
>
errorNumber
=
=
JSMSG_ALLOC_OVERFLOW
)
;
}
JS_ClearPendingException
(
cx
)
;
JS
:
:
DestroyFrontendContext
(
fc
)
;
return
true
;
}
static
bool
warningReporterCalled
;
static
void
warningReporter
(
JSContext
*
cx
JSErrorReport
*
report
)
{
warningReporterCalled
=
true
;
}
END_TEST
(
testFrontendErrors_allocationOverflow
)
bool
cls_testFrontendErrors_allocationOverflow
:
:
warningReporterCalled
=
false
;
