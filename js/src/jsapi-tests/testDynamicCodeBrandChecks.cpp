#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testDynamicCodeBrandChecks_DefaultHostGetCodeForEval
)
{
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
eval
(
'
5
*
8
'
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
eval
(
{
myProp
:
41
}
)
;
"
&
v
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
JS
:
:
RootedValue
myProp
(
cx
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
myProp
"
&
myProp
)
)
;
CHECK
(
myProp
.
isNumber
(
)
&
&
myProp
.
toNumber
(
)
=
=
41
)
;
EVAL
(
"
eval
(
{
trustedCode
:
'
6
*
7
'
}
)
.
trustedCode
;
"
&
v
)
;
CHECK
(
v
.
isString
(
)
)
;
JSString
*
str
=
v
.
toString
(
)
;
CHECK
(
JS_LinearStringEqualsLiteral
(
JS_ASSERT_STRING_IS_LINEAR
(
str
)
"
6
*
7
"
)
)
;
EVAL
(
"
eval
(
{
trustedCode
:
42
}
)
.
trustedCode
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testDynamicCodeBrandChecks_DefaultHostGetCodeForEval
)
static
bool
ExtractTrustedCodeStringProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aCode
JS
:
:
MutableHandle
<
JSString
*
>
outCode
)
{
JS
:
:
RootedValue
value
(
aCx
)
;
if
(
!
JS_GetProperty
(
aCx
aCode
"
trustedCode
"
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
outCode
.
set
(
nullptr
)
;
return
true
;
}
if
(
value
.
isString
(
)
)
{
outCode
.
set
(
value
.
toString
(
)
)
;
return
true
;
}
JS_ReportErrorASCII
(
aCx
"
Unsupported
value
for
trustedCode
property
"
)
;
return
false
;
}
BEGIN_TEST
(
testDynamicCodeBrandChecks_CustomHostGetCodeForEval
)
{
JSSecurityCallbacks
securityCallbacksWithEvalAcceptingObject
=
{
nullptr
ExtractTrustedCodeStringProperty
nullptr
}
;
JS_SetSecurityCallbacks
(
cx
&
securityCallbacksWithEvalAcceptingObject
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
eval
(
'
5
*
8
'
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
eval
(
{
myProp
:
41
}
)
;
"
&
v
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
JS
:
:
RootedValue
myProp
(
cx
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
myProp
"
&
myProp
)
)
;
CHECK
(
myProp
.
isNumber
(
)
&
&
myProp
.
toNumber
(
)
=
=
41
)
;
EVAL
(
"
eval
(
{
trustedCode
:
'
6
*
7
'
}
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
6
*
7
)
;
CHECK
(
!
execDontReport
(
"
eval
(
{
trustedCode
:
6
*
7
}
)
;
"
__FILE__
__LINE__
)
)
;
cx
-
>
clearPendingException
(
)
;
return
true
;
}
END_TEST
(
testDynamicCodeBrandChecks_CustomHostGetCodeForEval
)
