#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testDynamicCodeBrandChecks_DefaultHostGetCodeForEval
)
{
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
eval
(
'
5
*
8
'
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
eval
(
{
myProp
:
41
}
)
;
"
&
v
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
JS
:
:
RootedValue
myProp
(
cx
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
myProp
"
&
myProp
)
)
;
CHECK
(
myProp
.
isNumber
(
)
&
&
myProp
.
toNumber
(
)
=
=
41
)
;
EVAL
(
"
eval
(
{
trustedCode
:
'
6
*
7
'
}
)
.
trustedCode
;
"
&
v
)
;
CHECK
(
v
.
isString
(
)
)
;
JSString
*
str
=
v
.
toString
(
)
;
CHECK
(
JS_LinearStringEqualsLiteral
(
JS_ASSERT_STRING_IS_LINEAR
(
str
)
"
6
*
7
"
)
)
;
EVAL
(
"
eval
(
{
trustedCode
:
42
}
)
.
trustedCode
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testDynamicCodeBrandChecks_DefaultHostGetCodeForEval
)
static
bool
ExtractTrustedCodeStringProperty
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aCode
JS
:
:
MutableHandle
<
JSString
*
>
outCode
)
{
JS
:
:
RootedValue
value
(
aCx
)
;
if
(
!
JS_GetProperty
(
aCx
aCode
"
trustedCode
"
&
value
)
)
{
return
false
;
}
if
(
value
.
isUndefined
(
)
)
{
outCode
.
set
(
nullptr
)
;
return
true
;
}
if
(
value
.
isString
(
)
)
{
outCode
.
set
(
value
.
toString
(
)
)
;
return
true
;
}
JS_ReportErrorASCII
(
aCx
"
Unsupported
value
for
trustedCode
property
"
)
;
return
false
;
}
BEGIN_TEST
(
testDynamicCodeBrandChecks_CustomHostGetCodeForEval
)
{
JSSecurityCallbacks
securityCallbacksWithEvalAcceptingObject
=
{
nullptr
ExtractTrustedCodeStringProperty
nullptr
}
;
JS_SetSecurityCallbacks
(
cx
&
securityCallbacksWithEvalAcceptingObject
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
eval
(
'
5
*
8
'
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
eval
(
{
myProp
:
41
}
)
;
"
&
v
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
JS
:
:
RootedValue
myProp
(
cx
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
myProp
"
&
myProp
)
)
;
CHECK
(
myProp
.
isNumber
(
)
&
&
myProp
.
toNumber
(
)
=
=
41
)
;
EVAL
(
"
eval
(
{
trustedCode
:
'
6
*
7
'
}
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
6
*
7
)
;
CHECK
(
!
execDontReport
(
"
eval
(
{
trustedCode
:
6
*
7
}
)
;
"
__FILE__
__LINE__
)
)
;
return
true
;
}
END_TEST
(
testDynamicCodeBrandChecks_CustomHostGetCodeForEval
)
const
char
*
customTypesSnippet
=
"
function
TrustedType
(
aTrustedCode
)
{
this
.
trustedCode
=
aTrustedCode
;
}
;
"
"
TrustedType
.
prototype
.
toString
=
function
(
)
{
return
this
.
trustedCode
;
}
;
"
"
function
CreateFakeTrustedType
(
aTrustedCode
aString
)
{
"
"
let
fake
=
new
TrustedType
(
aTrustedCode
)
;
"
"
fake
.
toString
=
(
)
=
>
{
return
aString
;
}
;
"
"
return
fake
;
"
"
}
;
"
;
BEGIN_TEST
(
testDynamicCodeBrandChecks_CustomHostEnsureCanCompileStrings
)
{
JSSecurityCallbacks
securityCallbacksWithCustomHostEnsureCanCompileStrings
=
{
StringifiedObjectsMatchTrustedCodeProperties
ExtractTrustedCodeStringProperty
nullptr
}
;
JS_SetSecurityCallbacks
(
cx
&
securityCallbacksWithCustomHostEnsureCanCompileStrings
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EXEC
(
customTypesSnippet
)
;
EVAL
(
"
eval
(
'
5
*
8
'
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
(
new
Function
(
'
a
'
'
b
'
'
return
a
*
b
'
)
)
(
6
7
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
42
)
;
EVAL
(
"
eval
(
new
TrustedType
(
'
5
*
8
'
)
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
(
new
Function
(
new
TrustedType
(
'
a
'
)
new
TrustedType
(
'
b
'
)
new
"
"
TrustedType
(
'
return
a
*
b
'
)
)
)
(
6
7
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
42
)
;
CHECK
(
!
execDontReport
(
"
new
Function
(
CreateFakeTrustedType
(
'
a
'
'
c
'
)
'
b
'
'
return
b
'
)
;
"
__FILE__
__LINE__
)
)
;
CHECK
(
!
execDontReport
(
"
new
Function
(
'
a
'
CreateFakeTrustedType
(
'
b
'
'
c
'
)
'
return
a
'
)
;
"
__FILE__
__LINE__
)
)
;
CHECK
(
!
execDontReport
(
"
new
Function
(
'
a
'
'
b
'
CreateFakeTrustedType
(
'
return
a
"
"
*
b
'
'
return
a
+
b
'
)
)
;
"
__FILE__
__LINE__
)
)
;
CHECK
(
!
execDontReport
(
"
new
Function
(
'
a
'
'
b
'
new
TrustedType
(
undefined
)
)
;
"
__FILE__
__LINE__
)
)
;
EVAL
(
"
eval
(
CreateFakeTrustedType
(
'
5
*
8
'
'
6
*
7
'
)
)
;
"
&
v
)
;
CHECK
(
v
.
isNumber
(
)
&
&
v
.
toNumber
(
)
=
=
40
)
;
EVAL
(
"
eval
(
new
TrustedType
(
undefined
)
)
;
"
&
v
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
JS
:
:
RootedValue
trustedCode
(
cx
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
trustedCode
"
&
trustedCode
)
)
;
CHECK
(
trustedCode
.
isUndefined
(
)
)
;
return
true
;
}
static
bool
StringifiedObjectsMatchTrustedCodeProperties
(
JSContext
*
aCx
JS
:
:
RuntimeCode
aKind
JS
:
:
Handle
<
JSString
*
>
aCodeString
JS
:
:
CompilationType
aCompilationType
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JSString
*
>
>
aParameterStrings
JS
:
:
Handle
<
JSString
*
>
aBodyString
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JS
:
:
Value
>
>
aParameterArgs
JS
:
:
Handle
<
JS
:
:
Value
>
aBodyArg
bool
*
aOutCanCompileStrings
)
{
bool
isTrusted
=
true
;
auto
comparePropertyAndString
=
[
&
aCx
&
isTrusted
]
(
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
JS
:
:
Handle
<
JSString
*
>
aString
)
{
if
(
!
aValue
.
isObject
(
)
)
{
return
true
;
}
JS
:
:
RootedObject
obj
(
aCx
&
aValue
.
toObject
(
)
)
;
JS
:
:
RootedString
trustedCode
(
aCx
)
;
if
(
!
ExtractTrustedCodeStringProperty
(
aCx
obj
&
trustedCode
)
)
{
return
false
;
}
if
(
!
trustedCode
)
{
JS_ReportErrorASCII
(
aCx
"
test
failed
trustedCode
property
is
undefined
"
)
;
return
false
;
}
bool
equals
;
if
(
!
EqualStrings
(
aCx
trustedCode
aString
&
equals
)
)
{
return
false
;
}
if
(
!
equals
)
{
isTrusted
=
false
;
}
return
true
;
}
;
if
(
!
comparePropertyAndString
(
aBodyArg
aBodyString
)
)
{
return
false
;
}
if
(
isTrusted
)
{
MOZ_ASSERT
(
aParameterArgs
.
length
(
)
=
=
aParameterStrings
.
length
(
)
)
;
for
(
size_t
index
=
0
;
index
<
aParameterArgs
.
length
(
)
;
index
+
+
)
{
if
(
!
comparePropertyAndString
(
aParameterArgs
[
index
]
aParameterStrings
[
index
]
)
)
{
return
false
;
}
if
(
!
isTrusted
)
{
break
;
}
}
}
*
aOutCanCompileStrings
=
isTrusted
;
return
true
;
}
END_TEST
(
testDynamicCodeBrandChecks_CustomHostEnsureCanCompileStrings
)
BEGIN_TEST
(
testDynamicCodeBrandChecks_RejectObjectForEval
)
{
JSSecurityCallbacks
securityCallbacksRejectObjectBody
=
{
DisallowObjectsAndFailOtherwise
ExtractTrustedCodeStringProperty
nullptr
}
;
JS_SetSecurityCallbacks
(
cx
&
securityCallbacksRejectObjectBody
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EXEC
(
customTypesSnippet
)
;
CHECK
(
!
execDontReport
(
"
eval
(
'
5
*
8
)
)
"
__FILE__
__LINE__
)
)
;
CHECK
(
!
execDontReport
(
"
eval
(
new
TrustedType
(
'
5
*
8
'
)
)
"
__FILE__
__LINE__
)
)
;
return
true
;
}
static
bool
DisallowObjectsAndFailOtherwise
(
JSContext
*
aCx
JS
:
:
RuntimeCode
aKind
JS
:
:
Handle
<
JSString
*
>
aCodeString
JS
:
:
CompilationType
aCompilationType
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JSString
*
>
>
aParameterStrings
JS
:
:
Handle
<
JSString
*
>
aBodyString
JS
:
:
Handle
<
JS
:
:
StackGCVector
<
JS
:
:
Value
>
>
aParameterArgs
JS
:
:
Handle
<
JS
:
:
Value
>
aBodyArg
bool
*
aOutCanCompileStrings
)
{
if
(
aBodyArg
.
isObject
(
)
)
{
*
aOutCanCompileStrings
=
false
;
return
true
;
}
JS_ReportErrorASCII
(
aCx
"
aBodyArg
is
not
an
Object
"
)
;
return
false
;
}
END_TEST
(
testDynamicCodeBrandChecks_RejectObjectForEval
)
