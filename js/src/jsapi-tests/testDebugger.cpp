#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
vm
/
JSContext
.
h
"
using
namespace
js
;
BEGIN_TEST
(
testDebugger_newScriptHook
)
{
CHECK
(
JS_DefineDebuggerObject
(
cx
global
)
)
;
JS
:
:
RealmOptions
options
;
JS
:
:
RootedObject
g
(
cx
JS_NewGlobalObject
(
cx
getGlobalClass
(
)
nullptr
JS
:
:
FireOnNewGlobalHook
options
)
)
;
CHECK
(
g
)
;
{
JSAutoRealm
ar
(
cx
g
)
;
CHECK
(
JS
:
:
InitRealmStandardClasses
(
cx
)
)
;
}
JS
:
:
RootedObject
gWrapper
(
cx
g
)
;
CHECK
(
JS_WrapObject
(
cx
&
gWrapper
)
)
;
JS
:
:
RootedValue
v
(
cx
JS
:
:
ObjectValue
(
*
gWrapper
)
)
;
CHECK
(
JS_SetProperty
(
cx
global
"
g
"
v
)
)
;
EXEC
(
"
var
dbg
=
Debugger
(
g
)
;
\
n
"
"
var
hits
=
0
;
\
n
"
"
dbg
.
onNewScript
=
function
(
s
)
{
\
n
"
"
hits
+
=
Number
(
s
instanceof
Debugger
.
Script
)
;
\
n
"
"
}
;
\
n
"
)
;
return
testIndirectEval
(
g
"
Math
.
abs
(
0
)
"
)
;
}
bool
testIndirectEval
(
JS
:
:
HandleObject
global
const
char
*
code
)
{
EXEC
(
"
hits
=
0
;
"
)
;
{
JSAutoRealm
ar
(
cx
global
)
;
JSString
*
codestr
=
JS_NewStringCopyZ
(
cx
code
)
;
CHECK
(
codestr
)
;
JS
:
:
RootedValue
arg
(
cx
JS
:
:
StringValue
(
codestr
)
)
;
JS
:
:
RootedValue
v
(
cx
)
;
CHECK
(
JS_CallFunctionName
(
cx
global
"
eval
"
HandleValueArray
(
arg
)
&
v
)
)
;
}
JS
:
:
RootedValue
hitsv
(
cx
)
;
EVAL
(
"
hits
"
&
hitsv
)
;
CHECK
(
hitsv
.
isInt32
(
1
)
)
;
return
true
;
}
END_TEST
(
testDebugger_newScriptHook
)
