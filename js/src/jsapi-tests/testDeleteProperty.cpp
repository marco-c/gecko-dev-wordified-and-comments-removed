#
include
"
js
/
Id
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testDeleteProperty
)
{
JS
:
:
RootedValue
val
(
cx
)
;
EVAL
(
"
var
obj
=
{
a
:
1
b
:
2
c
:
3
d
:
4
e
:
5
f
:
6
g
:
7
h
:
8
}
;
obj
"
&
val
)
;
CHECK
(
val
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
val
.
toObject
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
key
(
cx
)
;
auto
createPropertyKey
=
[
]
(
JSContext
*
cx
const
char
*
s
JS
:
:
MutableHandle
<
JS
:
:
PropertyKey
>
key
)
{
JSString
*
atom
=
JS_AtomizeString
(
cx
s
)
;
if
(
!
atom
)
{
return
false
;
}
key
.
set
(
JS
:
:
PropertyKey
:
:
NonIntAtom
(
atom
)
)
;
return
true
;
}
;
CHECK
(
JS_DeleteProperty
(
cx
obj
"
b
"
)
)
;
CHECK
(
createPropertyKey
(
cx
"
d
"
&
key
)
)
;
CHECK
(
JS_DeletePropertyById
(
cx
obj
key
)
)
;
JS
:
:
ObjectOpResult
result
;
CHECK
(
JS_DeleteProperty
(
cx
obj
"
e
"
result
)
)
;
CHECK
(
result
)
;
CHECK
(
createPropertyKey
(
cx
"
f
"
&
key
)
)
;
CHECK
(
JS_DeletePropertyById
(
cx
obj
key
result
)
)
;
CHECK
(
result
)
;
EVAL
(
"
JSON
.
stringify
(
obj
)
"
&
val
)
;
CHECK
(
val
.
isString
(
)
)
;
bool
match
=
false
;
CHECK
(
JS_StringEqualsAscii
(
cx
val
.
toString
(
)
"
{
\
"
a
\
"
:
1
\
"
c
\
"
:
3
\
"
g
\
"
:
7
\
"
h
\
"
:
8
}
"
&
match
)
)
;
CHECK
(
match
)
;
return
true
;
}
END_TEST
(
testDeleteProperty
)
