#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testGCOutOfMemory
)
{
static
const
char
source
[
]
=
"
var
max
=
0
;
(
function
(
)
{
"
"
var
array
=
[
]
;
"
"
for
(
;
;
+
+
max
)
"
"
array
.
push
(
{
}
)
;
"
"
array
=
[
]
;
array
.
push
(
0
)
;
"
"
}
)
(
)
;
"
;
JS
:
:
CompileOptions
opts
(
cx
)
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
source
strlen
(
source
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
RootedValue
root
(
cx
)
;
bool
ok
=
JS
:
:
Evaluate
(
cx
opts
srcBuf
&
root
)
;
CHECK
(
!
ok
)
;
CHECK
(
JS_GetPendingException
(
cx
&
root
)
)
;
CHECK
(
root
.
isString
(
)
)
;
bool
match
=
false
;
CHECK
(
JS_StringEqualsLiteral
(
cx
root
.
toString
(
)
"
out
of
memory
"
&
match
)
)
;
CHECK
(
match
)
;
JS_ClearPendingException
(
cx
)
;
JS_GC
(
cx
)
;
EVAL
(
"
(
function
(
)
{
"
"
var
array
=
[
]
;
"
"
for
(
var
i
=
max
>
>
2
;
i
!
=
0
;
)
{
"
"
-
-
i
;
"
"
array
.
push
(
{
}
)
;
"
"
}
"
"
}
)
(
)
;
"
&
root
)
;
CHECK
(
!
JS_IsExceptionPending
(
cx
)
)
;
return
true
;
}
virtual
JSContext
*
createContext
(
)
override
{
JSContext
*
cx
=
JS_NewContext
(
4
*
1024
*
1024
)
;
if
(
!
cx
)
{
return
nullptr
;
}
JS_SetGCParameter
(
cx
JSGC_MAX_NURSERY_BYTES
js
:
:
gc
:
:
ChunkSize
)
;
#
ifdef
JS_GC_ZEAL
JS_UnsetGCZeal
(
cx
uint8_t
(
js
:
:
gc
:
:
ZealMode
:
:
GenerationalGC
)
)
;
#
endif
return
cx
;
}
END_TEST
(
testGCOutOfMemory
)
