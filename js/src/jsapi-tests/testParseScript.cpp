#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
frontend
/
CompilationStencil
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
experimental
/
ParseScript
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
vm
/
ErrorReporting
.
h
"
using
namespace
JS
;
template
<
typename
T
>
static
void
dump
(
const
T
&
data
)
{
js
:
:
Fprinter
printer
(
stderr
)
;
js
:
:
JSONPrinter
json
(
printer
true
)
;
data
-
>
dump
(
json
)
;
printer
.
put
(
"
\
n
"
)
;
}
BEGIN_TEST
(
testParseScript
)
{
CHECK
(
testCompile
(
)
)
;
return
true
;
}
bool
testCompile
(
)
{
static
constexpr
std
:
:
string_view
src
=
"
42
\
n
"
;
static
constexpr
std
:
:
u16string_view
src_16
=
u
"
42
\
n
"
;
static_assert
(
src
.
length
(
)
=
=
src_16
.
length
(
)
"
Source
buffers
must
be
same
length
"
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
JS
:
:
SourceText
<
char16_t
>
buf16
;
CHECK
(
buf16
.
init
(
cx
src_16
.
data
(
)
src_16
.
length
(
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
buf8
;
CHECK
(
buf8
.
init
(
cx
src
.
data
(
)
src
.
length
(
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
FrontendContext
*
fc
=
JS
:
:
NewFrontendContext
(
)
;
CHECK
(
fc
)
;
auto
destroyFc
=
mozilla
:
:
MakeScopeExit
(
[
fc
]
{
JS
:
:
DestroyFrontendContext
(
fc
)
;
}
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
ParseGlobalScript
(
fc
options
cx
-
>
stackLimitForCurrentPrincipal
(
)
buf16
)
;
CHECK
(
stencil
)
;
CHECK
(
stencil
-
>
scriptExtra
.
size
(
)
=
=
1
)
;
CHECK
(
stencil
-
>
scriptExtra
[
0
]
.
extent
.
sourceStart
=
=
0
)
;
CHECK
(
stencil
-
>
scriptExtra
[
0
]
.
extent
.
sourceEnd
=
=
3
)
;
CHECK
(
stencil
-
>
scriptData
.
size
(
)
=
=
1
)
;
CHECK
(
stencil
-
>
scriptData
[
0
]
.
hasSharedData
(
)
)
;
CHECK
(
stencil
-
>
scriptData
[
0
]
.
gcThingsLength
=
=
1
)
;
stencil
=
ParseGlobalScript
(
fc
options
cx
-
>
stackLimitForCurrentPrincipal
(
)
buf8
)
;
CHECK
(
stencil
)
;
{
JS
:
:
SourceText
<
char16_t
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
src_16
.
data
(
)
src_16
.
length
(
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
stencil
=
ParseGlobalScript
(
fc
options
cx
-
>
stackLimitForCurrentPrincipal
(
)
srcBuf
)
;
CHECK
(
stencil
)
;
}
return
true
;
}
END_TEST
(
testParseScript
)
;
