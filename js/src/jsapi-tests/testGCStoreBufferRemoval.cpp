#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
using
namespace
JS
;
using
namespace
js
;
#
define
BAD_OBJECT_PTR
reinterpret_cast
<
JSObject
*
>
(
1
)
BEGIN_TEST
(
testGCStoreBufferRemoval
)
{
JS_GC
(
cx
)
;
JS
:
:
RootedObject
obj
(
cx
NurseryObject
(
)
)
;
CHECK
(
js
:
:
gc
:
:
IsInsideNursery
(
obj
.
get
(
)
)
)
;
JS_GC
(
cx
)
;
CHECK
(
!
js
:
:
gc
:
:
IsInsideNursery
(
obj
.
get
(
)
)
)
;
JS
:
:
RootedObject
tenuredObject
(
cx
obj
)
;
{
JSObject
*
punnedPtr
=
nullptr
;
HeapPtr
<
JSObject
*
>
*
relocPtr
=
reinterpret_cast
<
HeapPtr
<
JSObject
*
>
*
>
(
&
punnedPtr
)
;
new
(
relocPtr
)
HeapPtr
<
JSObject
*
>
;
*
relocPtr
=
NurseryObject
(
)
;
relocPtr
-
>
~
HeapPtr
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
new
(
relocPtr
)
HeapPtr
<
JSObject
*
>
;
*
relocPtr
=
NurseryObject
(
)
;
*
relocPtr
=
tenuredObject
;
relocPtr
-
>
~
HeapPtr
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
new
(
relocPtr
)
HeapPtr
<
JSObject
*
>
;
*
relocPtr
=
NurseryObject
(
)
;
*
relocPtr
=
nullptr
;
relocPtr
-
>
~
HeapPtr
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
}
{
Value
punnedValue
;
HeapPtr
<
Value
>
*
relocValue
=
reinterpret_cast
<
HeapPtr
<
Value
>
*
>
(
&
punnedValue
)
;
new
(
relocValue
)
HeapPtr
<
Value
>
;
*
relocValue
=
ObjectValue
(
*
NurseryObject
(
)
)
;
relocValue
-
>
~
HeapPtr
<
Value
>
(
)
;
punnedValue
=
js
:
:
PoisonedObjectValue
(
0x48
)
;
JS_GC
(
cx
)
;
new
(
relocValue
)
HeapPtr
<
Value
>
;
*
relocValue
=
ObjectValue
(
*
NurseryObject
(
)
)
;
*
relocValue
=
ObjectValue
(
*
tenuredObject
)
;
relocValue
-
>
~
HeapPtr
<
Value
>
(
)
;
punnedValue
=
js
:
:
PoisonedObjectValue
(
0x48
)
;
JS_GC
(
cx
)
;
new
(
relocValue
)
HeapPtr
<
Value
>
;
*
relocValue
=
ObjectValue
(
*
NurseryObject
(
)
)
;
*
relocValue
=
NullValue
(
)
;
relocValue
-
>
~
HeapPtr
<
Value
>
(
)
;
punnedValue
=
js
:
:
PoisonedObjectValue
(
0x48
)
;
JS_GC
(
cx
)
;
}
{
JSObject
*
punnedPtr
=
nullptr
;
JS
:
:
Heap
<
JSObject
*
>
*
heapPtr
=
reinterpret_cast
<
JS
:
:
Heap
<
JSObject
*
>
*
>
(
&
punnedPtr
)
;
new
(
heapPtr
)
JS
:
:
Heap
<
JSObject
*
>
;
*
heapPtr
=
NurseryObject
(
)
;
heapPtr
-
>
~
Heap
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
new
(
heapPtr
)
JS
:
:
Heap
<
JSObject
*
>
;
*
heapPtr
=
NurseryObject
(
)
;
*
heapPtr
=
tenuredObject
;
heapPtr
-
>
~
Heap
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
new
(
heapPtr
)
JS
:
:
Heap
<
JSObject
*
>
;
*
heapPtr
=
NurseryObject
(
)
;
*
heapPtr
=
nullptr
;
heapPtr
-
>
~
Heap
<
JSObject
*
>
(
)
;
punnedPtr
=
BAD_OBJECT_PTR
;
JS_GC
(
cx
)
;
}
return
true
;
}
JSObject
*
NurseryObject
(
)
{
return
JS_NewPlainObject
(
cx
)
;
}
END_TEST
(
testGCStoreBufferRemoval
)
#
undef
BAD_OBJECT_PTR
