#
include
<
string
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
Modules
.
h
"
#
include
"
js
/
OffThreadScriptCompilation
.
h
"
#
include
"
js
/
Transcoding
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
vm
/
Monitor
.
h
"
BEGIN_TEST
(
testStencil_Basic
)
{
const
char
*
chars
=
"
function
f
(
)
{
return
42
;
}
"
"
f
(
)
;
"
;
auto
result
=
basic_test
<
char
mozilla
:
:
Utf8Unit
>
(
chars
)
;
CHECK
(
result
)
;
const
char16_t
*
chars16
=
u
"
function
f
(
)
{
return
42
;
}
"
u
"
f
(
)
;
"
;
auto
result16
=
basic_test
<
char16_t
char16_t
>
(
chars16
)
;
CHECK
(
result16
)
;
return
true
;
}
template
<
typename
CharT
typename
SourceT
>
bool
basic_test
(
const
CharT
*
chars
)
{
size_t
length
=
std
:
:
char_traits
<
CharT
>
:
:
length
(
chars
)
;
JS
:
:
SourceText
<
SourceT
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
length
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
cx
options
srcBuf
)
;
CHECK
(
stencil
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
CHECK
(
script
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS_ExecuteScript
(
cx
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testStencil_Basic
)
BEGIN_TEST
(
testStencil_Module
)
{
const
char
*
chars
=
"
export
function
f
(
)
{
return
42
;
}
"
"
globalThis
.
x
=
f
(
)
;
"
;
auto
result
=
basic_test
<
char
mozilla
:
:
Utf8Unit
>
(
chars
)
;
CHECK
(
result
)
;
const
char16_t
*
chars16
=
u
"
export
function
f
(
)
{
return
42
;
}
"
u
"
globalThis
.
x
=
f
(
)
;
"
;
auto
result16
=
basic_test
<
char16_t
char16_t
>
(
chars16
)
;
CHECK
(
result16
)
;
return
true
;
}
template
<
typename
CharT
typename
SourceT
>
bool
basic_test
(
const
CharT
*
chars
)
{
size_t
length
=
std
:
:
char_traits
<
CharT
>
:
:
length
(
chars
)
;
JS
:
:
SourceText
<
SourceT
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
length
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileModuleScriptToStencil
(
cx
options
srcBuf
)
;
CHECK
(
stencil
)
;
JS
:
:
RootedObject
moduleObject
(
cx
JS
:
:
InstantiateModuleStencil
(
cx
options
stencil
)
)
;
CHECK
(
moduleObject
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS
:
:
ModuleInstantiate
(
cx
moduleObject
)
)
;
CHECK
(
JS
:
:
ModuleEvaluate
(
cx
moduleObject
&
rval
)
)
;
CHECK
(
rval
.
isUndefined
(
)
)
;
CHECK
(
JS_GetProperty
(
cx
global
"
x
"
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testStencil_Module
)
BEGIN_TEST
(
testStencil_NonSyntactic
)
{
const
char
*
chars
=
"
function
f
(
)
{
return
x
;
}
"
"
f
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
strlen
(
chars
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
options
.
setNonSyntacticScope
(
true
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
cx
options
srcBuf
)
;
CHECK
(
stencil
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
CHECK
(
script
)
;
JS
:
:
RootedObject
obj
(
cx
JS_NewPlainObject
(
cx
)
)
;
JS
:
:
RootedValue
val
(
cx
JS
:
:
Int32Value
(
42
)
)
;
CHECK
(
obj
)
;
CHECK
(
JS_SetProperty
(
cx
obj
"
x
"
val
)
)
;
JS
:
:
RootedObjectVector
chain
(
cx
)
;
CHECK
(
chain
.
append
(
obj
)
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS_ExecuteScript
(
cx
chain
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testStencil_NonSyntactic
)
BEGIN_TEST
(
testStencil_MultiGlobal
)
{
const
char
*
chars
=
"
function
f
(
)
{
return
42
;
}
"
"
f
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
strlen
(
chars
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
cx
options
srcBuf
)
;
CHECK
(
stencil
)
;
CHECK
(
RunInNewGlobal
(
cx
stencil
)
)
;
CHECK
(
RunInNewGlobal
(
cx
stencil
)
)
;
CHECK
(
RunInNewGlobal
(
cx
stencil
)
)
;
return
true
;
}
bool
RunInNewGlobal
(
JSContext
*
cx
RefPtr
<
JS
:
:
Stencil
>
stencil
)
{
JS
:
:
RootedObject
otherGlobal
(
cx
createGlobal
(
)
)
;
CHECK
(
otherGlobal
)
;
JSAutoRealm
ar
(
cx
otherGlobal
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
CHECK
(
script
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS_ExecuteScript
(
cx
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
END_TEST
(
testStencil_MultiGlobal
)
BEGIN_TEST
(
testStencil_Transcode
)
{
JS
:
:
SetProcessBuildIdOp
(
TestGetBuildId
)
;
JS
:
:
TranscodeBuffer
buffer
;
{
const
char
*
chars
=
"
function
f
(
)
{
return
42
;
}
"
"
f
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
strlen
(
chars
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
CompileGlobalScriptToStencil
(
cx
options
srcBuf
)
;
CHECK
(
stencil
)
;
JS
:
:
TranscodeResult
res
=
JS
:
:
EncodeStencil
(
cx
options
stencil
buffer
)
;
CHECK
(
res
=
=
JS
:
:
TranscodeResult
:
:
Ok
)
;
CHECK
(
!
buffer
.
empty
(
)
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
script
)
;
CHECK
(
JS_ExecuteScript
(
cx
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
}
CHECK
(
createGlobal
(
)
)
;
JSAutoRealm
ar
(
cx
global
)
;
bool
found
=
false
;
CHECK
(
JS_HasOwnProperty
(
cx
global
"
f
"
&
found
)
)
;
CHECK
(
!
found
)
;
{
JS
:
:
TranscodeRange
range
(
buffer
.
begin
(
)
buffer
.
length
(
)
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
RefPtr
<
JS
:
:
Stencil
>
stencil
;
JS
:
:
TranscodeResult
res
=
JS
:
:
DecodeStencil
(
cx
options
range
stencil
)
;
CHECK
(
res
=
=
JS
:
:
TranscodeResult
:
:
Ok
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
script
)
;
CHECK
(
JS_ExecuteScript
(
cx
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
}
return
true
;
}
static
bool
TestGetBuildId
(
JS
:
:
BuildIdCharVector
*
buildId
)
{
const
char
buildid
[
]
=
"
testXDR
"
;
return
buildId
-
>
append
(
buildid
sizeof
(
buildid
)
)
;
}
END_TEST
(
testStencil_Transcode
)
BEGIN_TEST
(
testStencil_OffThread
)
{
const
char
*
chars
=
"
function
f
(
)
{
return
42
;
}
"
"
f
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
strlen
(
chars
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
js
:
:
Monitor
monitor
(
js
:
:
mutexid
:
:
ShellOffThreadState
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
JS
:
:
OffThreadToken
*
token
;
options
.
forceAsync
=
true
;
CHECK
(
token
=
JS
:
:
CompileOffThread
(
cx
options
srcBuf
callback
&
monitor
)
)
;
{
js
:
:
gc
:
:
FinishGC
(
cx
)
;
js
:
:
AutoLockMonitor
lock
(
monitor
)
;
lock
.
wait
(
)
;
}
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
FinishOffThreadStencil
(
cx
token
)
;
CHECK
(
stencil
)
;
JS
:
:
RootedScript
script
(
cx
JS
:
:
InstantiateGlobalStencil
(
cx
options
stencil
)
)
;
CHECK
(
script
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS_ExecuteScript
(
cx
script
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
static
void
callback
(
JS
:
:
OffThreadToken
*
token
void
*
context
)
{
js
:
:
Monitor
&
monitor
=
*
static_cast
<
js
:
:
Monitor
*
>
(
context
)
;
js
:
:
AutoLockMonitor
lock
(
monitor
)
;
lock
.
notify
(
)
;
}
END_TEST
(
testStencil_OffThread
)
BEGIN_TEST
(
testStencil_OffThreadModule
)
{
const
char
*
chars
=
"
export
function
f
(
)
{
return
42
;
}
"
"
globalThis
.
x
=
f
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
CHECK
(
srcBuf
.
init
(
cx
chars
strlen
(
chars
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
;
js
:
:
Monitor
monitor
(
js
:
:
mutexid
:
:
ShellOffThreadState
)
;
JS
:
:
CompileOptions
options
(
cx
)
;
JS
:
:
OffThreadToken
*
token
;
options
.
forceAsync
=
true
;
CHECK
(
token
=
JS
:
:
CompileOffThreadModule
(
cx
options
srcBuf
callback
&
monitor
)
)
;
{
js
:
:
gc
:
:
FinishGC
(
cx
)
;
js
:
:
AutoLockMonitor
lock
(
monitor
)
;
lock
.
wait
(
)
;
}
RefPtr
<
JS
:
:
Stencil
>
stencil
=
JS
:
:
FinishOffThreadStencil
(
cx
token
)
;
CHECK
(
stencil
)
;
JS
:
:
RootedObject
moduleObject
(
cx
JS
:
:
InstantiateModuleStencil
(
cx
options
stencil
)
)
;
CHECK
(
moduleObject
)
;
JS
:
:
RootedValue
rval
(
cx
)
;
CHECK
(
JS
:
:
ModuleInstantiate
(
cx
moduleObject
)
)
;
CHECK
(
JS
:
:
ModuleEvaluate
(
cx
moduleObject
&
rval
)
)
;
CHECK
(
rval
.
isUndefined
(
)
)
;
CHECK
(
JS_GetProperty
(
cx
global
"
x
"
&
rval
)
)
;
CHECK
(
rval
.
isNumber
(
)
&
&
rval
.
toNumber
(
)
=
=
42
)
;
return
true
;
}
static
void
callback
(
JS
:
:
OffThreadToken
*
token
void
*
context
)
{
js
:
:
Monitor
&
monitor
=
*
static_cast
<
js
:
:
Monitor
*
>
(
context
)
;
js
:
:
AutoLockMonitor
lock
(
monitor
)
;
lock
.
notify
(
)
;
}
END_TEST
(
testStencil_OffThreadModule
)
