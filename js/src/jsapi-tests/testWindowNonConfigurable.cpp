#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
static
bool
windowProxy_defineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
obj
JS
:
:
HandleId
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
{
if
(
desc
.
hasConfigurable
(
)
&
&
!
desc
.
configurable
(
)
)
{
result
.
failCantDefineWindowNonConfigurable
(
)
;
return
true
;
}
return
NativeDefineProperty
(
cx
obj
.
as
<
js
:
:
NativeObject
>
(
)
id
desc
result
)
;
}
static
const
js
:
:
ObjectOps
windowProxy_objectOps
=
{
nullptr
windowProxy_defineProperty
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
nullptr
}
;
static
const
JSClass
windowProxy_class
=
{
"
WindowProxy
"
0
nullptr
nullptr
nullptr
&
windowProxy_objectOps
}
;
BEGIN_TEST
(
testWindowNonConfigurable
)
{
JS
:
:
RootedObject
obj
(
cx
JS_NewObject
(
cx
&
windowProxy_class
)
)
;
CHECK
(
obj
)
;
CHECK
(
JS_DefineProperty
(
cx
global
"
windowProxy
"
obj
0
)
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
Object
.
defineProperty
(
windowProxy
'
bar
'
{
value
:
1
configurable
:
"
"
false
}
)
"
&
v
)
;
CHECK
(
v
.
isNull
(
)
)
;
EVAL
(
"
Object
.
defineProperty
(
windowProxy
'
bar
'
{
value
:
1
configurable
:
"
"
true
}
)
"
&
v
)
;
CHECK
(
&
v
.
toObject
(
)
=
=
obj
)
;
EVAL
(
"
Reflect
.
defineProperty
(
windowProxy
'
foo
'
{
value
:
1
configurable
:
"
"
false
}
)
"
&
v
)
;
CHECK
(
v
.
isFalse
(
)
)
;
EVAL
(
"
Reflect
.
defineProperty
(
windowProxy
'
foo
'
{
value
:
1
configurable
:
"
"
true
}
)
"
&
v
)
;
CHECK
(
v
.
isTrue
(
)
)
;
return
true
;
}
END_TEST
(
testWindowNonConfigurable
)
