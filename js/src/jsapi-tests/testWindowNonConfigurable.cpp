#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
js
/
Proxy
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
class
WindowProxyHandler
:
public
js
:
:
ForwardingProxyHandler
{
public
:
constexpr
WindowProxyHandler
(
)
:
js
:
:
ForwardingProxyHandler
(
&
family
)
{
}
static
const
char
family
;
virtual
bool
defineProperty
(
JSContext
*
cx
JS
:
:
HandleObject
proxy
JS
:
:
HandleId
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
override
{
if
(
desc
.
hasConfigurable
(
)
&
&
!
desc
.
configurable
(
)
)
{
result
.
failCantDefineWindowNonConfigurable
(
)
;
return
true
;
}
return
ForwardingProxyHandler
:
:
defineProperty
(
cx
proxy
id
desc
result
)
;
}
}
;
const
char
WindowProxyHandler
:
:
family
=
0
;
static
const
JSClass
windowProxy_class
=
PROXY_CLASS_DEF
(
"
TestWindowProxy
"
JSCLASS_HAS_RESERVED_SLOTS
(
1
)
)
;
static
const
WindowProxyHandler
windowProxy_handler
;
BEGIN_TEST
(
testWindowNonConfigurable
)
{
JS
:
:
RootedObject
wrapped
(
cx
JS_NewObject
(
cx
nullptr
)
)
;
CHECK
(
wrapped
)
;
JS
:
:
RootedValue
wrappedVal
(
cx
JS
:
:
ObjectValue
(
*
wrapped
)
)
;
js
:
:
ProxyOptions
options
;
options
.
setClass
(
&
windowProxy_class
)
;
JS
:
:
RootedObject
obj
(
cx
NewProxyObject
(
cx
&
windowProxy_handler
wrappedVal
nullptr
options
)
)
;
CHECK
(
obj
)
;
CHECK
(
JS_DefineProperty
(
cx
global
"
windowProxy
"
obj
0
)
)
;
JS
:
:
RootedValue
v
(
cx
)
;
EVAL
(
"
Object
.
defineProperty
(
windowProxy
'
bar
'
{
value
:
1
configurable
:
"
"
false
}
)
"
&
v
)
;
CHECK
(
v
.
isNull
(
)
)
;
EVAL
(
"
Object
.
defineProperty
(
windowProxy
'
bar
'
{
value
:
1
configurable
:
"
"
true
}
)
"
&
v
)
;
CHECK
(
&
v
.
toObject
(
)
=
=
obj
)
;
EVAL
(
"
Reflect
.
defineProperty
(
windowProxy
'
foo
'
{
value
:
1
configurable
:
"
"
false
}
)
"
&
v
)
;
CHECK
(
v
.
isFalse
(
)
)
;
EVAL
(
"
Reflect
.
defineProperty
(
windowProxy
'
foo
'
{
value
:
1
configurable
:
"
"
true
}
)
"
&
v
)
;
CHECK
(
v
.
isTrue
(
)
)
;
return
true
;
}
END_TEST
(
testWindowNonConfigurable
)
