#
include
"
js
/
Id
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
js
/
Symbol
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testPropertyKeyGetterAndSetter
)
{
JS
:
:
Rooted
<
JSString
*
>
str
(
cx
JS_AtomizeString
(
cx
"
prop
"
)
)
;
CHECK
(
str
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
strId
(
cx
JS
:
:
PropertyKey
:
:
NonIntAtom
(
str
)
)
;
MOZ_ASSERT
(
strId
.
isString
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
symId
(
cx
JS
:
:
GetWellKnownSymbolKey
(
cx
JS
:
:
SymbolCode
:
:
iterator
)
)
;
MOZ_ASSERT
(
symId
.
isSymbol
(
)
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
numId
(
cx
JS
:
:
PropertyKey
:
:
Int
(
42
)
)
;
MOZ_ASSERT
(
numId
.
isInt
(
)
)
;
bool
match
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
strGetterId
(
cx
)
;
CHECK
(
JS
:
:
ToGetterId
(
cx
strId
&
strGetterId
)
)
;
CHECK
(
strGetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
strGetterId
.
toString
(
)
"
get
prop
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
strSetterId
(
cx
)
;
CHECK
(
JS
:
:
ToSetterId
(
cx
strId
&
strSetterId
)
)
;
CHECK
(
strSetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
strSetterId
.
toString
(
)
"
set
prop
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
symGetterId
(
cx
)
;
CHECK
(
JS
:
:
ToGetterId
(
cx
symId
&
symGetterId
)
)
;
CHECK
(
symGetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
symGetterId
.
toString
(
)
"
get
[
Symbol
.
iterator
]
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
symSetterId
(
cx
)
;
CHECK
(
JS
:
:
ToSetterId
(
cx
symId
&
symSetterId
)
)
;
CHECK
(
symSetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
symSetterId
.
toString
(
)
"
set
[
Symbol
.
iterator
]
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
numGetterId
(
cx
)
;
CHECK
(
JS
:
:
ToGetterId
(
cx
numId
&
numGetterId
)
)
;
CHECK
(
numGetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
numGetterId
.
toString
(
)
"
get
42
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
JS
:
:
PropertyKey
>
numSetterId
(
cx
)
;
CHECK
(
JS
:
:
ToSetterId
(
cx
numId
&
numSetterId
)
)
;
CHECK
(
numSetterId
.
isString
(
)
)
;
CHECK
(
JS_StringEqualsAscii
(
cx
numSetterId
.
toString
(
)
"
set
42
"
&
match
)
)
;
CHECK
(
match
)
;
return
true
;
}
END_TEST
(
testPropertyKeyGetterAndSetter
)
