#
include
"
jit
/
MacroAssembler
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
jsapi
-
tests
/
testsJit
.
h
"
#
include
"
jit
/
MacroAssembler
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
jit
;
#
if
defined
(
ENABLE_WASM_TAIL_CALLS
)
&
&
!
defined
(
JS_CODEGEN_NONE
)
BEGIN_TEST
(
testWasmCheckSlowCallMarkerHit
)
{
js
:
:
LifoAlloc
lifo
(
4096
)
;
TempAllocator
alloc
(
&
lifo
)
;
JitContext
jc
(
cx
)
;
StackMacroAssembler
masm
(
cx
alloc
)
;
AutoCreatedBy
acb
(
masm
__func__
)
;
PrepareJit
(
masm
)
;
Label
check
fail
end
;
masm
.
call
(
&
check
)
;
masm
.
wasmMarkSlowCall
(
)
;
masm
.
jump
(
&
end
)
;
masm
.
bind
(
&
check
)
;
#
ifdef
JS_USE_LINK_REGISTER
#
if
!
defined
(
JS_CODEGEN_LOONG64
)
&
&
!
defined
(
JS_CODEGEN_MIPS64
)
&
&
\
!
defined
(
JS_CODEGEN_RISCV64
)
static
constexpr
Register
ra
=
lr
;
#
endif
#
else
static
constexpr
Register
ra
=
ABINonArgReg2
;
masm
.
loadPtr
(
Address
(
StackPointer
0
)
ra
)
;
#
endif
masm
.
wasmCheckSlowCallsite
(
ra
&
fail
ABINonArgReg1
ABINonArgReg2
)
;
masm
.
abiret
(
)
;
masm
.
bind
(
&
fail
)
;
masm
.
printf
(
"
Failed
\
n
"
)
;
masm
.
breakpoint
(
)
;
masm
.
bind
(
&
end
)
;
return
ExecuteJit
(
cx
masm
)
;
}
END_TEST
(
testWasmCheckSlowCallMarkerHit
)
BEGIN_TEST
(
testWasmCheckSlowCallMarkerMiss
)
{
js
:
:
LifoAlloc
lifo
(
4096
)
;
TempAllocator
alloc
(
&
lifo
)
;
JitContext
jc
(
cx
)
;
StackMacroAssembler
masm
(
cx
alloc
)
;
AutoCreatedBy
acb
(
masm
__func__
)
;
PrepareJit
(
masm
)
;
Label
check
fast
end
;
masm
.
call
(
&
check
)
;
masm
.
nop
(
)
;
masm
.
jump
(
&
end
)
;
masm
.
bind
(
&
check
)
;
#
ifdef
JS_USE_LINK_REGISTER
#
if
!
defined
(
JS_CODEGEN_LOONG64
)
&
&
!
defined
(
JS_CODEGEN_MIPS64
)
&
&
\
!
defined
(
JS_CODEGEN_RISCV64
)
static
constexpr
Register
ra
=
lr
;
#
endif
#
else
static
constexpr
Register
ra
=
ABINonArgReg2
;
masm
.
loadPtr
(
Address
(
StackPointer
0
)
ra
)
;
#
endif
masm
.
wasmCheckSlowCallsite
(
ra
&
fast
ABINonArgReg1
ABINonArgReg2
)
;
masm
.
printf
(
"
Failed
\
n
"
)
;
masm
.
breakpoint
(
)
;
masm
.
bind
(
&
fast
)
;
masm
.
abiret
(
)
;
masm
.
bind
(
&
end
)
;
return
ExecuteJit
(
cx
masm
)
;
}
END_TEST
(
testWasmCheckSlowCallMarkerMiss
)
#
endif
