#
include
<
type_traits
>
#
include
"
jsfriendapi
.
h
"
#
include
"
js
/
ArrayBuffer
.
h
"
#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
js
/
ScalarType
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
using
namespace
js
;
template
<
class
ViewType
>
static
JSObject
*
CreateObj
(
JSContext
*
cx
size_t
len
)
{
return
ViewType
:
:
create
(
cx
len
)
.
asObject
(
)
;
}
template
<
>
JSObject
*
CreateObj
<
JS
:
:
DataView
>
(
JSContext
*
cx
size_t
len
)
{
JS
:
:
Rooted
<
JSObject
*
>
buffer
(
cx
JS
:
:
NewArrayBuffer
(
cx
len
)
)
;
if
(
!
buffer
)
{
return
nullptr
;
}
return
JS_NewDataView
(
cx
buffer
0
len
)
;
}
BEGIN_TEST
(
testArrayBufferOrView_type
)
{
JS
:
:
RealmOptions
options
;
JS
:
:
RootedObject
otherGlobal
(
cx
JS_NewGlobalObject
(
cx
basicGlobalClass
(
)
nullptr
JS
:
:
DontFireOnNewGlobalHook
options
)
)
;
CHECK
(
otherGlobal
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Uint8
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Int8
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Uint8Clamped
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Uint16
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Int16
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Uint32
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Int32
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Float32
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
TypedArray
<
Scalar
:
:
Float64
>
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
DataView
>
(
cx
otherGlobal
)
)
)
;
CHECK
(
(
TestType
<
JS
:
:
ArrayBuffer
>
(
cx
otherGlobal
)
)
)
;
return
true
;
}
template
<
class
APIType
>
bool
TestType
(
JSContext
*
cx
Handle
<
JSObject
*
>
otherGlobal
)
{
JS
:
:
Rooted
<
JSObject
*
>
obj
(
cx
CreateObj
<
APIType
>
(
cx
8
)
)
;
CHECK
(
obj
)
;
JS
:
:
Rooted
<
JS
:
:
ArrayBufferOrView
>
abov
(
cx
JS
:
:
ArrayBufferOrView
:
:
fromObject
(
obj
)
)
;
CHECK
(
abov
)
;
abov
=
JS
:
:
ArrayBufferOrView
:
:
unwrap
(
obj
)
;
CHECK
(
abov
)
;
if
constexpr
(
!
std
:
:
is_same_v
<
APIType
JS
:
:
Uint16Array
>
)
{
JS
:
:
Rooted
<
JS
:
:
Uint16Array
>
nope
(
cx
JS
:
:
Uint16Array
:
:
unwrap
(
obj
)
)
;
CHECK
(
!
nope
)
;
JS
:
:
Rooted
<
JSObject
*
>
u16array
(
cx
CreateObj
<
JS
:
:
Uint16Array
>
(
cx
10
)
)
;
CHECK
(
u16array
)
;
auto
deny
=
APIType
:
:
fromObject
(
u16array
)
;
CHECK
(
!
deny
)
;
deny
=
APIType
:
:
unwrap
(
u16array
)
;
CHECK
(
!
deny
)
;
}
CHECK_EQUAL
(
abov
.
asObject
(
)
obj
)
;
JS
:
:
Rooted
<
JSObject
*
>
wrapped
(
cx
)
;
{
AutoRealm
ar
(
cx
otherGlobal
)
;
wrapped
=
CreateObj
<
APIType
>
(
cx
8
)
;
CHECK
(
wrapped
)
;
}
CHECK
(
wrapped
-
>
compartment
(
)
=
=
otherGlobal
-
>
compartment
(
)
)
;
CHECK
(
JS_WrapObject
(
cx
&
wrapped
)
)
;
CHECK
(
wrapped
-
>
compartment
(
)
=
=
global
-
>
compartment
(
)
)
;
abov
=
JS
:
:
ArrayBufferOrView
:
:
fromObject
(
wrapped
)
;
CHECK
(
!
abov
)
;
abov
=
JS
:
:
ArrayBufferOrView
:
:
unwrap
(
wrapped
)
;
CHECK
(
abov
)
;
JS
:
:
Rooted
<
APIType
>
dummy
(
cx
APIType
:
:
fromObject
(
obj
)
)
;
CHECK
(
obj
)
;
CHECK
(
dummy
)
;
CHECK
(
dummy
.
asObject
(
)
)
;
return
true
;
}
END_TEST
(
testArrayBufferOrView_type
)
