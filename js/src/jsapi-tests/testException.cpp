#
include
"
js
/
CallAndConstruct
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
jsapi
-
tests
/
tests
.
h
"
BEGIN_TEST
(
testException_bug860435
)
{
JS
:
:
RootedValue
fun
(
cx
)
;
EVAL
(
"
ReferenceError
"
&
fun
)
;
CHECK
(
fun
.
isObject
(
)
)
;
JS
:
:
RootedValue
v
(
cx
)
;
CHECK
(
JS_CallFunctionValue
(
cx
global
fun
JS
:
:
HandleValueArray
:
:
empty
(
)
&
v
)
)
;
CHECK
(
v
.
isObject
(
)
)
;
JS
:
:
RootedObject
obj
(
cx
&
v
.
toObject
(
)
)
;
CHECK
(
JS_GetProperty
(
cx
obj
"
stack
"
&
v
)
)
;
CHECK
(
v
.
isString
(
)
)
;
return
true
;
}
END_TEST
(
testException_bug860435
)
BEGIN_TEST
(
testException_getCause
)
{
JS
:
:
RootedValue
err
(
cx
)
;
EVAL
(
"
new
Error
(
'
message
'
{
cause
:
new
Error
(
'
message
2
'
)
}
)
"
&
err
)
;
CHECK
(
err
.
isObject
(
)
)
;
JS
:
:
RootedString
msg
(
cx
JS
:
:
ToString
(
cx
err
)
)
;
CHECK
(
msg
)
;
bool
match
;
CHECK
(
JS_StringEqualsLiteral
(
cx
msg
"
Error
:
message
"
&
match
)
)
;
CHECK
(
match
)
;
JS
:
:
Rooted
<
mozilla
:
:
Maybe
<
JS
:
:
Value
>
>
maybeCause
(
cx
JS
:
:
GetExceptionCause
(
&
err
.
toObject
(
)
)
)
;
CHECK
(
maybeCause
.
isSome
(
)
)
;
JS
:
:
RootedValue
cause
(
cx
*
maybeCause
)
;
CHECK
(
cause
.
isObject
(
)
)
;
msg
=
JS
:
:
ToString
(
cx
cause
)
;
CHECK
(
msg
)
;
CHECK
(
JS_StringEqualsLiteral
(
cx
msg
"
Error
:
message
2
"
&
match
)
)
;
CHECK
(
match
)
;
maybeCause
=
JS
:
:
GetExceptionCause
(
&
cause
.
toObject
(
)
)
;
CHECK
(
maybeCause
.
isNothing
(
)
)
;
return
true
;
}
END_TEST
(
testException_getCause
)
BEGIN_TEST
(
testException_getCausePlainObject
)
{
JS
:
:
RootedObject
plain
(
cx
JS_NewPlainObject
(
cx
)
)
;
CHECK
(
plain
)
;
JS
:
:
Rooted
<
mozilla
:
:
Maybe
<
JS
:
:
Value
>
>
maybeCause
(
cx
JS
:
:
GetExceptionCause
(
plain
)
)
;
CHECK
(
maybeCause
.
isNothing
(
)
)
;
return
true
;
}
END_TEST
(
testException_getCausePlainObject
)
