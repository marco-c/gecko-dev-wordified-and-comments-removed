"
use
strict
"
;
var
ignoreIndirectCalls
=
{
"
mallocSizeOf
"
:
true
"
aMallocSizeOf
"
:
true
"
__conv
"
:
true
"
__convf
"
:
true
"
prerrortable
.
c
:
callback_newtable
"
:
true
"
mozalloc_oom
.
cpp
:
void
(
*
gAbortHandler
)
(
size_t
)
"
:
true
}
;
var
typesWithSafeConstructors
=
new
Set
(
[
"
mozilla
:
:
Maybe
"
"
mozilla
:
:
dom
:
:
Nullable
"
"
mozilla
:
:
dom
:
:
Optional
"
"
mozilla
:
:
UniquePtr
"
"
js
:
:
UniquePtr
"
]
)
;
var
resetterMethods
=
{
'
mozilla
:
:
Maybe
'
:
new
Set
(
[
"
reset
"
]
)
'
mozilla
:
:
UniquePtr
'
:
new
Set
(
[
"
reset
"
]
)
'
js
:
:
UniquePtr
'
:
new
Set
(
[
"
reset
"
]
)
'
mozilla
:
:
dom
:
:
Nullable
'
:
new
Set
(
[
"
SetNull
"
]
)
'
mozilla
:
:
dom
:
:
TypedArray_base
'
:
new
Set
(
[
"
Reset
"
]
)
'
RefPtr
'
:
new
Set
(
[
"
forget
"
]
)
'
nsCOMPtr
'
:
new
Set
(
[
"
forget
"
]
)
}
;
function
isRefcountedDtor
(
name
)
{
return
name
.
includes
(
"
:
:
~
RefPtr
(
"
)
|
|
name
.
includes
(
"
:
:
~
nsCOMPtr
(
"
)
;
}
function
indirectCallCannotGC
(
fullCaller
fullVariable
)
{
var
caller
=
readable
(
fullCaller
)
;
var
name
=
readable
(
fullVariable
)
;
if
(
name
in
ignoreIndirectCalls
)
return
true
;
if
(
name
=
=
"
mapper
"
&
&
caller
=
=
"
ptio
.
c
:
pt_MapError
"
)
return
true
;
if
(
name
=
=
"
params
"
&
&
caller
=
=
"
PR_ExplodeTime
"
)
return
true
;
if
(
/
CallDestroyScriptHook
/
.
test
(
caller
)
)
return
true
;
if
(
name
=
=
"
callback
"
&
&
caller
.
includes
(
"
js
:
:
ErrorToException
"
)
)
return
true
;
if
(
name
=
=
"
f
"
&
&
caller
.
includes
(
"
js
:
:
MathCache
:
:
lookup
"
)
)
return
true
;
if
(
name
=
=
"
func
"
&
&
caller
=
=
"
PR_CallOnce
"
)
return
true
;
return
false
;
}
var
ignoreClasses
=
{
"
JSStringFinalizer
"
:
true
"
SprintfState
"
:
true
"
SprintfStateStr
"
:
true
"
JSLocaleCallbacks
"
:
true
"
JSC
:
:
ExecutableAllocator
"
:
true
"
PRIOMethods
"
:
true
"
_MD_IOVector
"
:
true
"
malloc_table_t
"
:
true
"
malloc_hook_table_t
"
:
true
"
mozilla
:
:
MallocSizeOf
"
:
true
"
MozMallocSizeOf
"
:
true
}
;
var
ignoreCallees
=
{
"
js
:
:
Class
.
trace
"
:
true
"
js
:
:
Class
.
finalize
"
:
true
"
JSClassOps
.
trace
"
:
true
"
JSClassOps
.
finalize
"
:
true
"
JSRuntime
.
destroyPrincipals
"
:
true
"
icu_50
:
:
UObject
.
__deleting_dtor
"
:
true
"
mozilla
:
:
CycleCollectedJSRuntime
.
DescribeCustomObjects
"
:
true
"
mozilla
:
:
CycleCollectedJSRuntime
.
NoteCustomGCThingXPCOMChildren
"
:
true
"
PLDHashTableOps
.
hashKey
"
:
true
"
PLDHashTableOps
.
clearEntry
"
:
true
"
z_stream_s
.
zfree
"
:
true
"
z_stream_s
.
zalloc
"
:
true
"
GrGLInterface
.
fCallback
"
:
true
"
std
:
:
strstreambuf
.
_M_alloc_fun
"
:
true
"
std
:
:
strstreambuf
.
_M_free_fun
"
:
true
"
struct
js
:
:
gc
:
:
Callback
<
void
(
*
)
(
JSContext
*
void
*
)
>
.
op
"
:
true
"
mozilla
:
:
ThreadSharedFloatArrayBufferList
:
:
Storage
.
mFree
"
:
true
"
mozilla
:
:
SizeOfState
.
mMallocSizeOf
"
:
true
"
mozilla
:
:
gfx
:
:
SourceSurfaceRawData
.
mDeallocator
"
:
true
}
;
function
fieldCallCannotGC
(
csu
fullfield
)
{
if
(
csu
in
ignoreClasses
)
return
true
;
if
(
fullfield
in
ignoreCallees
)
return
true
;
return
false
;
}
function
ignoreEdgeUse
(
edge
variable
body
)
{
if
(
(
'
Name
'
in
variable
)
&
&
(
variable
.
Name
[
0
]
=
=
'
paramBuffer
'
)
)
{
if
(
body
.
BlockId
.
Kind
=
=
'
Function
'
&
&
body
.
BlockId
.
Variable
.
Name
[
0
]
=
=
'
PrepareAndDispatch
'
)
if
(
edge
.
Kind
=
=
'
Assign
'
&
&
edge
.
Type
.
Kind
=
=
'
Pointer
'
)
if
(
edge
.
Exp
[
0
]
.
Kind
=
=
'
Var
'
&
&
edge
.
Exp
[
1
]
.
Kind
=
=
'
Var
'
)
if
(
edge
.
Exp
[
1
]
.
Variable
.
Kind
=
=
'
Local
'
&
&
edge
.
Exp
[
1
]
.
Variable
.
Name
[
0
]
=
=
'
paramBuffer
'
)
return
true
;
}
if
(
edge
.
Kind
=
=
"
Call
"
)
{
var
callee
=
edge
.
Exp
[
0
]
;
if
(
callee
.
Kind
=
=
"
Var
"
)
{
var
name
=
callee
.
Variable
.
Name
[
0
]
;
if
(
/
~
DebugOnly
/
.
test
(
name
)
)
return
true
;
if
(
/
~
ScopedThreadSafeStringInspector
/
.
test
(
name
)
)
return
true
;
}
}
return
false
;
}
function
ignoreEdgeAddressTaken
(
edge
)
{
if
(
edge
.
Kind
=
=
"
Call
"
)
{
var
callee
=
edge
.
Exp
[
0
]
;
if
(
callee
.
Kind
=
=
"
Var
"
)
{
var
name
=
callee
.
Variable
.
Name
[
0
]
;
if
(
/
js
:
:
Invoke
\
(
/
.
test
(
name
)
)
return
true
;
}
}
return
false
;
}
var
ignoreFunctions
=
{
"
ptio
.
c
:
pt_MapError
"
:
true
"
je_malloc_printf
"
:
true
"
malloc_usable_size
"
:
true
"
vprintf_stderr
"
:
true
"
PR_ExplodeTime
"
:
true
"
PR_ErrorInstallTable
"
:
true
"
PR_SetThreadPrivate
"
:
true
"
uint8
NS_IsMainThread
(
)
"
:
true
"
void
*
std
:
:
_Locale_impl
:
:
~
_Locale_impl
(
int32
)
"
:
true
"
uint32
nsXPConnect
:
:
Release
(
)
"
:
true
"
uint32
nsAtom
:
:
Release
(
)
"
:
true
"
malloc
"
:
true
"
calloc
"
:
true
"
realloc
"
:
true
"
free
"
:
true
"
NS_LogInit
"
:
true
"
NS_LogTerm
"
:
true
"
NS_LogAddRef
"
:
true
"
NS_LogRelease
"
:
true
"
NS_LogCtor
"
:
true
"
NS_LogDtor
"
:
true
"
NS_LogCOMPtrAddRef
"
:
true
"
NS_LogCOMPtrRelease
"
:
true
"
NS_DebugBreak
"
:
true
"
void
test
:
:
RingbufferDumper
:
:
OnTestPartResult
(
testing
:
:
TestPartResult
*
)
"
:
true
"
float64
JS_GetCurrentEmbedderTime
(
)
"
:
true
"
JSObject
*
js
:
:
TenuringTracer
:
:
moveToTenuredSlow
(
JSObject
*
)
"
:
true
"
void
js
:
:
Nursery
:
:
freeMallocedBuffers
(
)
"
:
true
"
void
js
:
:
AutoEnterOOMUnsafeRegion
:
:
crash
(
uint64
int8
*
)
"
:
true
"
void
mozilla
:
:
dom
:
:
WorkerPrivate
:
:
AssertIsOnWorkerThread
(
)
const
"
:
true
"
EntryType
*
nsTHashtable
<
EntryType
>
:
:
PutEntry
(
nsTHashtable
<
EntryType
>
:
:
KeyType
const
fallible_t
&
)
[
with
EntryType
=
nsBaseHashtableET
<
nsCharPtrHashKey
nsAutoPtr
<
mozilla
:
:
LogModule
>
>
;
nsTHashtable
<
EntryType
>
:
:
KeyType
=
const
char
*
;
nsTHashtable
<
EntryType
>
:
:
fallible_t
=
mozilla
:
:
fallible_t
]
"
:
true
"
EntryType
*
nsTHashtable
<
EntryType
>
:
:
GetEntry
(
nsTHashtable
<
EntryType
>
:
:
KeyType
)
const
[
with
EntryType
=
nsBaseHashtableET
<
nsCharPtrHashKey
nsAutoPtr
<
mozilla
:
:
LogModule
>
>
;
nsTHashtable
<
EntryType
>
:
:
KeyType
=
const
char
*
]
"
:
true
"
EntryType
*
nsTHashtable
<
EntryType
>
:
:
PutEntry
(
nsTHashtable
<
EntryType
>
:
:
KeyType
)
[
with
EntryType
=
nsBaseHashtableET
<
nsPtrHashKey
<
const
mozilla
:
:
BlockingResourceBase
>
nsAutoPtr
<
mozilla
:
:
DeadlockDetector
<
mozilla
:
:
BlockingResourceBase
>
:
:
OrderingEntry
>
>
;
nsTHashtable
<
EntryType
>
:
:
KeyType
=
const
mozilla
:
:
BlockingResourceBase
*
]
"
:
true
"
EntryType
*
nsTHashtable
<
EntryType
>
:
:
GetEntry
(
nsTHashtable
<
EntryType
>
:
:
KeyType
)
const
[
with
EntryType
=
nsBaseHashtableET
<
nsPtrHashKey
<
const
mozilla
:
:
BlockingResourceBase
>
nsAutoPtr
<
mozilla
:
:
DeadlockDetector
<
mozilla
:
:
BlockingResourceBase
>
:
:
OrderingEntry
>
>
;
nsTHashtable
<
EntryType
>
:
:
KeyType
=
const
mozilla
:
:
BlockingResourceBase
*
]
"
:
true
"
iJIT_IsProfilingActive
"
:
true
"
iJIT_NotifyEvent
"
:
true
"
PR_GetCurrentThread
"
:
true
"
calloc
"
:
true
"
_PR_UnixInit
"
:
true
"
uint8
nsContentUtils
:
:
IsExpandedPrincipal
(
nsIPrincipal
*
)
"
:
true
"
void
mozilla
:
:
AutoProfilerLabel
:
:
~
AutoProfilerLabel
(
int32
)
"
:
true
"
void
mozilla
:
:
ProfilerLabelEnd
(
mozilla
:
:
Tuple
<
void
*
unsigned
int
>
*
)
"
:
true
"
mozilla
:
:
LogModule
*
mozilla
:
:
LogModule
:
:
Get
(
int8
*
)
"
:
true
"
nsCycleCollector
.
cpp
:
nsISupports
*
CanonicalizeXPCOMParticipant
(
nsISupports
*
)
"
:
true
"
void
mozilla
:
:
DeadlockDetector
<
T
>
:
:
Add
(
const
T
*
)
[
with
T
=
mozilla
:
:
BlockingResourceBase
]
"
:
true
"
void
mozilla
:
:
detail
:
:
log_print
(
mozilla
:
:
LogModule
*
int32
int8
*
)
"
:
true
"
uint8
XPCJSRuntime
:
:
DescribeCustomObjects
(
JSObject
*
JSClass
*
int8
[
72
]
*
)
[
72
]
)
const
"
:
true
"
uint64
nsCycleCollectingAutoRefCnt
:
:
incr
(
void
*
nsCycleCollectionParticipant
*
)
[
with
void
(
*
suspect
)
(
void
*
nsCycleCollectionParticipant
*
nsCycleCollectingAutoRefCnt
*
bool
*
)
=
NS_CycleCollectorSuspect3
;
uintptr_t
=
long
unsigned
int
]
"
:
true
"
uint8
v8
:
:
internal
:
:
RegExpDisjunction
:
:
SortConsecutiveAtoms
(
v8
:
:
internal
:
:
RegExpCompiler
*
)
"
:
true
"
uint8
nsAutoOwningEventTarget
:
:
IsCurrentThread
(
)
const
"
:
true
"
void
mozilla
:
:
dom
:
:
JSStreamConsumer
:
:
~
JSStreamConsumer
(
)
[
[
base_dtor
]
]
"
:
true
}
;
function
extraGCFunctions
(
readableNames
)
{
return
[
"
ffi_call
"
]
.
filter
(
f
=
>
f
in
readableNames
)
;
}
function
isProtobuf
(
name
)
{
return
name
.
match
(
/
\
bgoogle
:
:
protobuf
\
b
/
)
|
|
name
.
match
(
/
\
bmozilla
:
:
devtools
:
:
protobuf
\
b
/
)
;
}
function
isHeapSnapshotMockClass
(
name
)
{
return
name
.
match
(
/
\
bMockWriter
\
b
/
)
|
|
name
.
match
(
/
\
bMockDeserializedNode
\
b
/
)
;
}
function
isGTest
(
name
)
{
return
name
.
match
(
/
\
btesting
:
:
/
)
;
}
function
isICU
(
name
)
{
return
name
.
match
(
/
\
bicu_
\
d
+
:
:
/
)
|
|
name
.
match
(
/
u
(
prv_malloc
|
prv_realloc
|
prv_free
|
case_toFullLower
)
_
\
d
+
/
)
}
function
ignoreGCFunction
(
mangled
readableNames
)
{
if
(
!
(
mangled
in
readableNames
)
)
return
false
;
const
fun
=
readableNames
[
mangled
]
[
0
]
;
if
(
fun
in
ignoreFunctions
)
return
true
;
if
(
isProtobuf
(
fun
)
|
|
isICU
(
fun
)
)
return
true
;
if
(
isHeapSnapshotMockClass
(
fun
)
|
|
isGTest
(
fun
)
)
return
true
;
if
(
fun
.
includes
(
"
void
nsCOMPtr
<
T
>
:
:
Assert_NoQueryNeeded
(
)
"
)
)
return
true
;
if
(
fun
.
includes
(
"
UnwrapObjectInternal
"
)
&
&
fun
.
includes
(
"
mayBeWrapper
=
false
"
)
)
return
true
;
if
(
fun
.
includes
(
"
js
:
:
WeakMap
<
Key
Value
HashPolicy
>
:
:
getDelegate
(
"
)
)
return
true
;
if
(
/
refillFreeList
|
tryNew
/
.
test
(
fun
)
&
&
/
=
js
:
:
NoGC
/
.
test
(
fun
)
)
return
true
;
return
false
;
}
function
stripUCSAndNamespace
(
name
)
{
name
=
name
.
replace
(
/
(
struct
|
class
|
union
|
const
)
/
g
"
"
)
;
name
=
name
.
replace
(
/
(
js
:
:
ctypes
:
:
|
js
:
:
|
JS
:
:
|
mozilla
:
:
dom
:
:
|
mozilla
:
:
)
/
g
"
"
)
;
return
name
;
}
function
extraRootedGCThings
(
)
{
return
[
'
JSAddonId
'
]
;
}
function
extraRootedPointers
(
)
{
return
[
]
;
}
function
isRootedGCPointerTypeName
(
name
)
{
name
=
stripUCSAndNamespace
(
name
)
;
if
(
name
.
startsWith
(
'
MaybeRooted
<
'
)
)
return
/
\
(
js
:
:
AllowGC
\
)
1u
>
:
:
RootType
/
.
test
(
name
)
;
return
false
;
}
function
isUnsafeStorage
(
typeName
)
{
typeName
=
stripUCSAndNamespace
(
typeName
)
;
return
typeName
.
startsWith
(
'
UniquePtr
<
'
)
;
}
function
isLimitConstructor
(
typeInfo
edgeType
varName
)
{
if
(
edgeType
.
Kind
!
=
'
Function
'
)
return
0
;
if
(
!
(
'
TypeFunctionCSU
'
in
edgeType
)
)
return
0
;
if
(
edgeType
.
Type
.
Kind
!
=
'
Void
'
)
return
0
;
var
type
=
edgeType
.
TypeFunctionCSU
.
Type
.
Name
;
let
attrs
=
0
;
if
(
type
in
typeInfo
.
GCSuppressors
)
attrs
=
attrs
|
ATTR_GC_SUPPRESSED
;
var
[
mangled
unmangled
]
=
splitFunction
(
varName
[
0
]
)
;
if
(
mangled
.
search
(
/
C
\
d
[
EI
]
/
)
=
=
-
1
)
return
0
;
var
m
=
unmangled
.
match
(
/
(
[
~
\
w
]
+
)
(
?
:
<
.
*
>
)
?
\
(
/
)
;
if
(
!
m
)
return
0
;
var
type_stem
=
type
.
replace
(
/
\
w
+
:
:
/
g
'
'
)
.
replace
(
/
\
<
.
*
\
>
/
g
'
'
)
;
if
(
m
[
1
]
!
=
type_stem
)
return
0
;
return
attrs
;
}
function
isOverridableField
(
staticCSU
csu
field
)
{
if
(
field
=
=
"
AddRef
"
|
|
field
=
=
"
Release
"
)
return
false
;
if
(
csu
!
=
'
nsISupports
'
)
return
false
;
if
(
field
.
endsWith
(
"
"
)
)
return
false
;
if
(
field
=
=
'
GetCurrentJSContext
'
)
return
false
;
if
(
field
=
=
'
IsOnCurrentThread
'
)
return
false
;
if
(
field
=
=
'
GetNativeContext
'
)
return
false
;
if
(
field
=
=
"
GetGlobalJSObject
"
)
return
false
;
if
(
field
=
=
"
GetGlobalJSObjectPreserveColor
"
)
return
false
;
if
(
field
=
=
"
GetIsMainThread
"
)
return
false
;
if
(
field
=
=
"
GetThreadFromPRThread
"
)
return
false
;
if
(
field
=
=
"
DocAddSizeOfIncludingThis
"
)
return
false
;
if
(
field
=
=
"
ConstructUbiNode
"
)
return
false
;
if
(
field
=
=
"
isSystemOrAddonPrincipal
"
)
return
false
;
if
(
field
=
=
"
GetIsAddonOrExpandedAddonPrincipal
"
)
return
false
;
if
(
field
=
=
"
GetSiteOrigin
"
)
return
false
;
if
(
field
=
=
"
GetDomain
"
)
return
false
;
if
(
field
=
=
"
GetBaseDomain
"
)
return
false
;
if
(
field
=
=
"
GetOriginNoSuffix
"
)
return
false
;
if
(
field
=
=
"
GetScheme
"
)
return
false
;
if
(
field
=
=
"
GetAsciiHostPort
"
)
return
false
;
if
(
field
=
=
"
GetAsciiSpec
"
)
return
false
;
if
(
field
=
=
"
SchemeIs
"
)
return
false
;
if
(
staticCSU
=
=
'
nsIXPCScriptable
'
&
&
field
=
=
"
GetScriptableFlags
"
)
return
false
;
if
(
staticCSU
=
=
'
nsIXPConnectJSObjectHolder
'
&
&
field
=
=
'
GetJSObject
'
)
return
false
;
if
(
staticCSU
=
=
'
nsIXPConnect
'
&
&
field
=
=
'
GetSafeJSContext
'
)
return
false
;
if
(
staticCSU
=
=
'
nsIScriptSecurityManager
'
&
&
field
=
=
'
IsSystemPrincipal
'
)
return
false
;
if
(
staticCSU
=
=
'
nsIScriptContext
'
)
{
if
(
field
=
=
'
GetWindowProxy
'
|
|
field
=
=
'
GetWindowProxyPreserveColor
'
)
return
false
;
}
return
true
;
}
function
listNonGCPointers
(
)
{
return
[
'
NPIdentifier
'
]
;
}
function
isJSNative
(
mangled
)
{
return
mangled
.
endsWith
(
"
P9JSContextjPN2JS5ValueE
"
)
&
&
mangled
.
startsWith
(
"
_Z
"
)
;
}
