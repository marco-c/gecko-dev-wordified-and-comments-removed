"
use
strict
"
;
loadRelativeToScript
(
'
callgraph
.
js
'
)
;
var
theFunctionNameToFind
;
if
(
scriptArgs
[
0
]
=
=
'
-
-
function
'
)
{
theFunctionNameToFind
=
scriptArgs
[
1
]
;
scriptArgs
=
scriptArgs
.
slice
(
2
)
;
}
var
typeInfo_filename
=
scriptArgs
[
0
]
|
|
"
typeInfo
.
txt
"
;
var
callgraphOut_filename
=
scriptArgs
[
1
]
|
|
"
callgraph
.
txt
"
;
var
origOut
=
os
.
file
.
redirect
(
callgraphOut_filename
)
;
var
memoized
=
new
Map
(
)
;
var
memoizedCount
=
0
;
function
memo
(
name
)
{
if
(
!
memoized
.
has
(
name
)
)
{
let
id
=
memoized
.
size
+
1
;
memoized
.
set
(
name
"
"
+
id
)
;
print
(
#
{
id
}
{
name
}
)
;
}
return
memoized
.
get
(
name
)
;
}
var
lastline
;
function
printOnce
(
line
)
{
if
(
line
!
=
lastline
)
{
print
(
line
)
;
lastline
=
line
;
}
}
function
getAnnotations
(
body
)
{
var
all_annotations
=
{
}
;
for
(
var
v
of
(
body
.
DefineVariable
|
|
[
]
)
)
{
if
(
v
.
Variable
.
Kind
!
=
'
Func
'
)
continue
;
var
name
=
v
.
Variable
.
Name
[
0
]
;
var
annotations
=
all_annotations
[
name
]
=
[
]
;
for
(
var
ann
of
(
v
.
Type
.
Annotation
|
|
[
]
)
)
{
annotations
.
push
(
ann
.
Name
)
;
}
}
return
all_annotations
;
}
function
getTags
(
functionName
body
)
{
var
tags
=
new
Set
(
)
;
var
annotations
=
getAnnotations
(
body
)
;
if
(
functionName
in
annotations
)
{
for
(
var
[
annName
annValue
]
of
annotations
[
functionName
]
)
{
if
(
annName
=
=
'
Tag
'
)
tags
.
add
(
annValue
)
;
}
}
return
tags
;
}
function
processBody
(
functionName
body
)
{
if
(
!
(
'
PEdge
'
in
body
)
)
return
;
for
(
var
tag
of
getTags
(
functionName
body
)
.
values
(
)
)
print
(
"
T
"
+
memo
(
functionName
)
+
"
"
+
tag
)
;
var
seen
=
[
new
Set
(
)
new
Set
(
)
]
;
lastline
=
null
;
for
(
var
edge
of
body
.
PEdge
)
{
if
(
edge
.
Kind
!
=
"
Call
"
)
continue
;
var
edgeSuppressed
=
(
edge
.
Index
[
0
]
in
body
.
suppressed
)
;
for
(
var
callee
of
getCallees
(
edge
)
)
{
var
suppressed
=
Boolean
(
edgeSuppressed
|
|
callee
.
suppressed
)
;
var
prologue
=
suppressed
?
"
SUPPRESS_GC
"
:
"
"
;
prologue
+
=
memo
(
functionName
)
+
"
"
;
if
(
callee
.
kind
=
=
'
direct
'
)
{
if
(
!
seen
[
+
suppressed
]
.
has
(
callee
.
name
)
)
{
seen
[
+
suppressed
]
.
add
(
callee
.
name
)
;
printOnce
(
"
D
"
+
prologue
+
memo
(
callee
.
name
)
)
;
}
}
else
if
(
callee
.
kind
=
=
'
field
'
)
{
var
{
csu
field
isVirtual
}
=
callee
;
const
tag
=
isVirtual
?
'
V
'
:
'
F
'
;
printOnce
(
tag
+
"
"
+
prologue
+
"
CLASS
"
+
csu
+
"
FIELD
"
+
field
)
;
}
else
if
(
callee
.
kind
=
=
'
resolved
-
field
'
)
{
var
{
csu
field
callees
}
=
callee
;
var
fullFieldName
=
csu
+
"
.
"
+
field
;
if
(
!
virtualResolutionsSeen
.
has
(
fullFieldName
)
)
{
virtualResolutionsSeen
.
add
(
fullFieldName
)
;
for
(
var
target
of
callees
)
printOnce
(
"
R
"
+
memo
(
fullFieldName
)
+
"
"
+
memo
(
target
.
name
)
)
;
}
}
else
if
(
callee
.
kind
=
=
'
indirect
'
)
{
printOnce
(
"
I
"
+
prologue
+
"
VARIABLE
"
+
callee
.
variable
)
;
}
else
if
(
callee
.
kind
=
=
'
unknown
'
)
{
printOnce
(
"
I
"
+
prologue
+
"
VARIABLE
UNKNOWN
"
)
;
}
else
{
printErr
(
"
invalid
"
+
callee
.
kind
+
"
callee
"
)
;
debugger
;
}
}
}
}
var
typeInfo
=
loadTypeInfo
(
typeInfo_filename
)
;
loadTypes
(
"
src_comp
.
xdb
"
)
;
var
xdb
=
xdbLibrary
(
)
;
xdb
.
open
(
"
src_body
.
xdb
"
)
;
printErr
(
"
Finished
loading
data
structures
"
)
;
var
minStream
=
xdb
.
min_data_stream
(
)
;
var
maxStream
=
xdb
.
max_data_stream
(
)
;
if
(
theFunctionNameToFind
)
{
var
index
=
xdb
.
lookup_key
(
theFunctionNameToFind
)
;
if
(
!
index
)
{
printErr
(
"
Function
not
found
"
)
;
quit
(
1
)
;
}
minStream
=
maxStream
=
index
;
}
function
process
(
functionName
functionBodies
)
{
for
(
var
body
of
functionBodies
)
body
.
suppressed
=
[
]
;
for
(
var
body
of
functionBodies
)
{
for
(
var
[
pbody
id
]
of
allRAIIGuardedCallPoints
(
typeInfo
functionBodies
body
isSuppressConstructor
)
)
pbody
.
suppressed
[
id
]
=
true
;
}
for
(
var
body
of
functionBodies
)
processBody
(
functionName
body
)
;
var
markerPos
=
functionName
.
indexOf
(
internalMarker
)
;
if
(
markerPos
>
0
)
{
var
inChargeXTor
=
functionName
.
replace
(
internalMarker
"
"
)
;
printOnce
(
"
D
"
+
memo
(
inChargeXTor
)
+
"
"
+
memo
(
functionName
)
)
;
}
if
(
functionName
.
indexOf
(
"
C4
"
)
!
=
-
1
)
{
var
[
mangled
unmangled
]
=
splitFunction
(
functionName
)
;
for
(
let
[
synthetic
variant
]
of
[
[
'
C4E
'
'
C1E
'
]
[
'
C4E
'
'
C2E
'
]
[
'
C4E
'
'
C3E
'
]
[
'
C4I
'
'
C1I
'
]
[
'
C4I
'
'
C2I
'
]
[
'
C4I
'
'
C3I
'
]
]
)
{
if
(
mangled
.
indexOf
(
synthetic
)
=
=
-
1
)
continue
;
let
variant_mangled
=
mangled
.
replace
(
synthetic
variant
)
;
let
variant_full
=
variant_mangled
+
"
"
+
unmangled
;
printOnce
(
"
D
"
+
memo
(
variant_full
)
+
"
"
+
memo
(
functionName
)
)
;
}
}
if
(
functionName
.
indexOf
(
"
D4Ev
"
)
!
=
-
1
&
&
functionName
.
indexOf
(
"
:
:
~
"
)
!
=
-
1
)
{
const
not_in_charge_dtor
=
functionName
.
replace
(
"
(
int32
)
"
"
(
)
"
)
;
const
D0
=
not_in_charge_dtor
.
replace
(
"
D4Ev
"
"
D0Ev
"
)
;
const
D1
=
not_in_charge_dtor
.
replace
(
"
D4Ev
"
"
D1Ev
"
)
;
const
D2
=
not_in_charge_dtor
.
replace
(
"
D4Ev
"
"
D2Ev
"
)
;
printOnce
(
"
D
"
+
memo
(
D0
)
+
"
"
+
memo
(
D1
)
)
;
printOnce
(
"
D
"
+
memo
(
D1
)
+
"
"
+
memo
(
D2
)
)
;
printOnce
(
"
D
"
+
memo
(
D2
)
+
"
"
+
memo
(
functionName
)
)
;
}
}
for
(
var
nameIndex
=
minStream
;
nameIndex
<
=
maxStream
;
nameIndex
+
+
)
{
var
name
=
xdb
.
read_key
(
nameIndex
)
;
var
data
=
xdb
.
read_entry
(
name
)
;
process
(
name
.
readString
(
)
JSON
.
parse
(
data
.
readString
(
)
)
)
;
xdb
.
free_string
(
name
)
;
xdb
.
free_string
(
data
)
;
}
os
.
file
.
close
(
os
.
file
.
redirect
(
origOut
)
)
;
