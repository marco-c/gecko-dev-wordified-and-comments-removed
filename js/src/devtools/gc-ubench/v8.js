globalThis
.
loadRelativeToScript
=
load
;
load
(
"
shell
-
bench
.
js
"
)
;
var
V8
=
class
extends
Host
{
constructor
(
)
{
super
(
)
;
this
.
waitTA
=
new
Int32Array
(
new
SharedArrayBuffer
(
4
)
)
;
}
start_turn
(
)
{
}
end_turn
(
)
{
}
suspend
(
duration
)
{
const
response
=
Atomics
.
wait
(
this
.
waitTA
0
0
duration
*
1000
)
;
if
(
response
!
=
=
'
timed
-
out
'
)
{
throw
new
Exception
(
unexpected
response
from
Atomics
.
wait
:
{
response
}
)
;
}
}
features
=
{
haveMemorySizes
:
false
haveGCCounts
:
false
}
;
}
;
var
gHost
=
new
V8
(
)
;
run
(
arguments
)
;
print
(
"
\
nTest
results
:
\
n
"
)
;
report_results
(
)
;
