var
Sequencer
=
class
{
get
current
(
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
start
(
now
=
gHost
.
now
(
)
)
{
this
.
started
=
now
;
}
tick
(
now
=
gHost
.
now
(
)
)
{
if
(
this
.
done
(
)
)
{
throw
new
Error
(
"
tick
(
)
called
on
completed
sequencer
"
)
;
}
const
advanced
=
this
.
do_tick
(
now
)
;
if
(
advanced
)
{
this
.
started
=
now
;
}
return
advanced
;
}
do_tick
(
now
=
gHost
.
now
(
)
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
done
(
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
currentLoadElapsed
(
now
=
gHost
.
now
(
)
)
{
return
now
-
this
.
started
;
}
}
;
var
SingleMutatorSequencer
=
class
extends
Sequencer
{
constructor
(
mutator
duration_sec
)
{
super
(
)
;
this
.
mutator
=
mutator
;
if
(
!
(
duration_sec
>
0
)
)
{
throw
new
Error
(
invalid
duration
'
{
duration_sec
}
'
)
;
}
this
.
duration
=
duration_sec
*
1000
;
this
.
state
=
'
init
'
;
}
get
current
(
)
{
return
this
.
state
=
=
=
'
done
'
?
undefined
:
this
.
mutator
;
}
reset
(
)
{
this
.
state
=
'
init
'
;
}
start
(
now
=
gHost
.
now
(
)
)
{
if
(
this
.
state
!
=
=
'
init
'
)
{
throw
new
Error
(
"
cannot
restart
a
single
-
mutator
sequencer
"
)
;
}
super
.
start
(
now
)
;
this
.
state
=
'
running
'
;
}
do_tick
(
now
)
{
if
(
this
.
currentLoadElapsed
(
now
)
<
this
.
duration
)
{
return
false
;
}
this
.
state
=
'
done
'
;
return
true
;
}
done
(
)
{
return
this
.
state
=
=
=
'
done
'
;
}
}
;
var
ChainSequencer
=
class
extends
Sequencer
{
constructor
(
sequencers
)
{
super
(
)
;
this
.
sequencers
=
sequencers
;
this
.
idx
=
-
1
;
this
.
state
=
sequencers
.
length
?
'
init
'
:
'
done
'
;
}
get
current
(
)
{
return
this
.
idx
>
=
0
?
this
.
sequencers
[
this
.
idx
]
.
current
:
undefined
;
}
reset
(
)
{
this
.
state
=
'
init
'
;
this
.
idx
=
-
1
;
}
start
(
now
=
gHost
.
now
(
)
)
{
super
.
start
(
now
)
;
if
(
this
.
sequencers
.
length
=
=
=
0
)
{
this
.
state
=
'
done
'
;
return
;
}
this
.
idx
=
0
;
this
.
sequencers
[
0
]
.
start
(
now
)
;
this
.
state
=
'
running
'
;
}
do_tick
(
now
)
{
const
sequencer
=
this
.
sequencers
[
this
.
idx
]
;
if
(
!
sequencer
.
do_tick
(
now
)
)
{
return
false
;
}
this
.
idx
+
+
;
if
(
this
.
idx
<
this
.
sequencers
.
length
)
{
this
.
sequencers
[
this
.
idx
]
.
start
(
)
;
}
else
{
this
.
idx
=
-
1
;
this
.
state
=
'
done
'
;
}
return
true
;
}
done
(
)
{
return
this
.
state
=
=
=
'
done
'
;
}
}
;
