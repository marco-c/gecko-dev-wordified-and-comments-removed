var
Sequencer
=
class
{
get
current
(
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
start
(
now
=
gHost
.
now
(
)
)
{
this
.
started
=
now
;
}
tick
(
now
=
gHost
.
now
(
)
)
{
const
advanced
=
this
.
do_tick
(
now
)
;
if
(
advanced
)
{
this
.
started
=
now
;
}
return
advanced
;
}
do_tick
(
now
=
gHost
.
now
(
)
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
done
(
)
{
throw
new
Error
(
"
unimplemented
"
)
;
}
currentLoadElapsed
(
now
=
gHost
.
now
(
)
)
{
return
now
-
this
.
started
;
}
}
;
var
LoadCycle
=
class
extends
Sequencer
{
constructor
(
tests_to_run
duration_sec
)
{
super
(
)
;
this
.
queue
=
Array
.
from
(
tests_to_run
)
;
this
.
duration
=
duration_sec
*
1000
;
this
.
idx
=
-
1
;
}
get
current
(
)
{
return
this
.
queue
[
this
.
idx
]
;
}
start
(
now
=
gHost
.
now
(
)
)
{
super
.
start
(
now
)
;
this
.
idx
=
0
;
}
do_tick
(
now
)
{
if
(
this
.
currentLoadElapsed
(
now
)
<
this
.
duration
)
{
return
false
;
}
this
.
idx
+
+
;
if
(
this
.
idx
>
=
this
.
queue
.
length
)
{
this
.
idx
=
-
1
;
}
return
true
;
}
done
(
)
{
return
this
.
idx
=
=
-
1
;
}
}
;
