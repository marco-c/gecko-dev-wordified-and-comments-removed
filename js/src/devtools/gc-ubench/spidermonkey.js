loadRelativeToScript
(
"
shell
-
bench
.
js
"
)
;
var
SpiderMonkey
=
class
extends
Host
{
start_turn
(
)
{
}
end_turn
(
)
{
clearKeptObjects
(
)
;
maybegc
(
)
;
drainJobQueue
(
)
;
}
suspend
(
duration
)
{
sleep
(
duration
)
;
}
get
minorGCCount
(
)
{
return
performance
.
mozMemory
.
gc
.
minorGCCount
;
}
get
majorGCCount
(
)
{
return
performance
.
mozMemory
.
gc
.
majorGCCount
;
}
get
GCSliceCount
(
)
{
return
performance
.
mozMemory
.
gc
.
sliceCount
;
}
get
gcBytes
(
)
{
return
performance
.
mozMemory
.
gc
.
zone
.
gcBytes
;
}
get
gcAllocTrigger
(
)
{
return
performance
.
mozMemory
.
gc
.
zone
.
gcAllocTrigger
;
}
features
=
{
haveMemorySizes
:
true
haveGCCounts
:
true
}
;
}
;
var
gHost
=
new
SpiderMonkey
(
)
;
var
{
opts
rest
:
mutators
}
=
argparse
.
parse_args
(
scriptArgs
)
;
run
(
opts
mutators
)
;
print
(
"
\
nTest
results
:
\
n
"
)
;
report_results
(
)
;
var
outfile
=
"
spidermonkey
-
results
.
json
"
;
var
origOut
=
redirect
(
outfile
)
;
print
(
JSON
.
stringify
(
gPerf
.
results
)
)
;
redirect
(
origOut
)
;
print
(
Wrote
detailed
results
to
{
outfile
}
)
;
