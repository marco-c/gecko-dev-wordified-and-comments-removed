#
ifndef
debugger_Environment_h
#
define
debugger_Environment_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
NamespaceImports
.
h
"
#
include
"
debugger
/
Debugger
.
h
"
#
include
"
gc
/
Rooting
.
h
"
#
include
"
js
/
PropertySpec
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Scope
.
h
"
class
JS_PUBLIC_API
JSObject
;
struct
JS_PUBLIC_API
JSContext
;
class
JSTracer
;
namespace
js
{
class
GlobalObject
;
enum
class
DebuggerEnvironmentType
{
Declarative
With
Object
}
;
class
DebuggerEnvironment
:
public
NativeObject
{
public
:
enum
{
ENV_SLOT
OWNER_SLOT
RESERVED_SLOTS
}
;
static
const
JSClass
class_
;
static
NativeObject
*
initClass
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
HandleObject
dbgCtor
)
;
static
DebuggerEnvironment
*
create
(
JSContext
*
cx
HandleObject
proto
HandleObject
referent
HandleNativeObject
debugger
)
;
void
trace
(
JSTracer
*
trc
)
;
DebuggerEnvironmentType
type
(
)
const
;
mozilla
:
:
Maybe
<
ScopeKind
>
scopeKind
(
)
const
;
[
[
nodiscard
]
]
bool
getParent
(
JSContext
*
cx
MutableHandle
<
DebuggerEnvironment
*
>
result
)
const
;
[
[
nodiscard
]
]
bool
getObject
(
JSContext
*
cx
MutableHandle
<
DebuggerObject
*
>
result
)
const
;
[
[
nodiscard
]
]
bool
getCalleeScript
(
JSContext
*
cx
MutableHandle
<
DebuggerScript
*
>
result
)
const
;
bool
isDebuggee
(
)
const
;
bool
isOptimized
(
)
const
;
[
[
nodiscard
]
]
static
bool
getNames
(
JSContext
*
cx
Handle
<
DebuggerEnvironment
*
>
environment
MutableHandleIdVector
result
)
;
[
[
nodiscard
]
]
static
bool
find
(
JSContext
*
cx
Handle
<
DebuggerEnvironment
*
>
environment
HandleId
id
MutableHandle
<
DebuggerEnvironment
*
>
result
)
;
[
[
nodiscard
]
]
static
bool
getVariable
(
JSContext
*
cx
Handle
<
DebuggerEnvironment
*
>
environment
HandleId
id
MutableHandleValue
result
)
;
[
[
nodiscard
]
]
static
bool
setVariable
(
JSContext
*
cx
Handle
<
DebuggerEnvironment
*
>
environment
HandleId
id
HandleValue
value
)
;
bool
isInstance
(
)
const
;
Debugger
*
owner
(
)
const
;
Env
*
maybeReferent
(
)
const
{
return
maybePtrFromReservedSlot
<
Env
>
(
ENV_SLOT
)
;
}
Env
*
referent
(
)
const
{
Env
*
env
=
maybeReferent
(
)
;
MOZ_ASSERT
(
env
)
;
return
env
;
}
void
clearReferent
(
)
{
clearReservedSlotGCThingAsPrivate
(
ENV_SLOT
)
;
}
private
:
static
const
JSClassOps
classOps_
;
static
const
JSPropertySpec
properties_
[
]
;
static
const
JSFunctionSpec
methods_
[
]
;
bool
requireDebuggee
(
JSContext
*
cx
)
const
;
[
[
nodiscard
]
]
static
bool
construct
(
JSContext
*
cx
unsigned
argc
Value
*
vp
)
;
struct
CallData
;
}
;
}
#
endif
