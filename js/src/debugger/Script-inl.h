#
ifndef
debugger_Script_inl_h
#
define
debugger_Script_inl_h
#
include
"
debugger
/
Script
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
<
utility
>
#
include
"
jstypes
.
h
"
#
include
"
debugger
/
Debugger
.
h
"
#
include
"
gc
/
Cell
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
wasm
/
WasmJS
.
h
"
class
JS_PUBLIC_API
JSObject
;
js
:
:
gc
:
:
Cell
*
js
:
:
DebuggerScript
:
:
getReferentCell
(
)
const
{
return
static_cast
<
gc
:
:
Cell
*
>
(
getPrivate
(
)
)
;
}
js
:
:
DebuggerScriptReferent
js
:
:
DebuggerScript
:
:
getReferent
(
)
const
{
if
(
gc
:
:
Cell
*
cell
=
getReferentCell
(
)
)
{
if
(
cell
-
>
is
<
BaseScript
>
(
)
)
{
if
(
cell
-
>
as
<
BaseScript
>
(
)
-
>
isLazyScript
(
)
)
{
return
mozilla
:
:
AsVariant
(
cell
-
>
as
<
LazyScript
>
(
)
)
;
}
return
mozilla
:
:
AsVariant
(
cell
-
>
as
<
JSScript
>
(
)
)
;
}
MOZ_ASSERT
(
cell
-
>
is
<
JSObject
>
(
)
)
;
return
mozilla
:
:
AsVariant
(
&
static_cast
<
NativeObject
*
>
(
cell
)
-
>
as
<
WasmInstanceObject
>
(
)
)
;
}
return
mozilla
:
:
AsVariant
(
static_cast
<
JSScript
*
>
(
nullptr
)
)
;
}
js
:
:
BaseScript
*
js
:
:
DebuggerScript
:
:
getReferentScript
(
)
const
{
gc
:
:
Cell
*
cell
=
getReferentCell
(
)
;
return
cell
-
>
as
<
BaseScript
>
(
)
;
}
#
endif
