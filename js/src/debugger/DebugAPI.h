#
ifndef
debugger_DebugAPI_h
#
define
debugger_DebugAPI_h
#
include
"
vm
/
GlobalObject
.
h
"
#
include
"
vm
/
JSContext
.
h
"
namespace
js
{
class
AbstractGeneratorObject
;
class
PromiseObject
;
enum
class
ResumeMode
{
Continue
Throw
Terminate
Return
}
;
class
DebugAPI
{
public
:
friend
class
Debugger
;
static
void
traceIncomingCrossCompartmentEdges
(
JSTracer
*
tracer
)
;
static
MOZ_MUST_USE
bool
markIteratively
(
GCMarker
*
marker
)
;
static
void
traceAllForMovingGC
(
JSTracer
*
trc
)
;
static
void
sweepAll
(
FreeOp
*
fop
)
;
static
MOZ_MUST_USE
bool
findSweepGroupEdges
(
JSRuntime
*
rt
)
;
static
MOZ_MUST_USE
bool
handleBaselineOsr
(
JSContext
*
cx
InterpreterFrame
*
from
jit
:
:
BaselineFrame
*
to
)
;
static
MOZ_MUST_USE
bool
handleIonBailout
(
JSContext
*
cx
jit
:
:
RematerializedFrame
*
from
jit
:
:
BaselineFrame
*
to
)
;
static
void
handleUnrecoverableIonBailoutError
(
JSContext
*
cx
jit
:
:
RematerializedFrame
*
frame
)
;
static
void
propagateForcedReturn
(
JSContext
*
cx
AbstractFramePtr
frame
HandleValue
rval
)
;
static
MOZ_MUST_USE
bool
ensureExecutionObservabilityOfOsrFrame
(
JSContext
*
cx
AbstractFramePtr
osrSourceFrame
)
;
class
ExecutionObservableSet
{
public
:
typedef
HashSet
<
Zone
*
>
:
:
Range
ZoneRange
;
virtual
Zone
*
singleZone
(
)
const
{
return
nullptr
;
}
virtual
JSScript
*
singleScriptForZoneInvalidation
(
)
const
{
return
nullptr
;
}
virtual
const
HashSet
<
Zone
*
>
*
zones
(
)
const
{
return
nullptr
;
}
virtual
bool
shouldRecompileOrInvalidate
(
JSScript
*
script
)
const
=
0
;
virtual
bool
shouldMarkAsDebuggee
(
FrameIter
&
iter
)
const
=
0
;
}
;
static
inline
MOZ_MUST_USE
bool
checkNoExecute
(
JSContext
*
cx
HandleScript
script
)
;
static
inline
void
onNewScript
(
JSContext
*
cx
HandleScript
script
)
;
static
inline
void
onNewWasmInstance
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
wasmInstance
)
;
static
inline
ResumeMode
onEnterFrame
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
inline
ResumeMode
onResumeFrame
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
inline
ResumeMode
onDebuggerStatement
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
inline
ResumeMode
onExceptionUnwind
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
inline
MOZ_MUST_USE
bool
onLeaveFrame
(
JSContext
*
cx
AbstractFramePtr
frame
jsbytecode
*
pc
bool
ok
)
;
static
ResumeMode
onTrap
(
JSContext
*
cx
MutableHandleValue
vp
)
;
static
ResumeMode
onSingleStep
(
JSContext
*
cx
MutableHandleValue
vp
)
;
static
inline
void
onNewPromise
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
static
inline
void
onPromiseSettled
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
static
inline
MOZ_MUST_USE
bool
onNewGenerator
(
JSContext
*
cx
AbstractFramePtr
frame
Handle
<
AbstractGeneratorObject
*
>
genObj
)
;
static
inline
MOZ_MUST_USE
bool
onLogAllocationSite
(
JSContext
*
cx
JSObject
*
obj
HandleSavedFrame
frame
mozilla
:
:
TimeStamp
when
)
;
static
inline
void
onNewGlobalObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
bool
isObservedByDebuggerTrackingAllocations
(
const
GlobalObject
&
debuggee
)
;
private
:
static
void
slowPathOnNewScript
(
JSContext
*
cx
HandleScript
script
)
;
static
void
slowPathOnNewGlobalObject
(
JSContext
*
cx
Handle
<
GlobalObject
*
>
global
)
;
static
MOZ_MUST_USE
bool
slowPathOnLogAllocationSite
(
JSContext
*
cx
HandleObject
obj
HandleSavedFrame
frame
mozilla
:
:
TimeStamp
when
GlobalObject
:
:
DebuggerVector
&
dbgs
)
;
static
MOZ_MUST_USE
bool
slowPathOnLeaveFrame
(
JSContext
*
cx
AbstractFramePtr
frame
jsbytecode
*
pc
bool
ok
)
;
static
MOZ_MUST_USE
bool
slowPathOnNewGenerator
(
JSContext
*
cx
AbstractFramePtr
frame
Handle
<
AbstractGeneratorObject
*
>
genObj
)
;
static
MOZ_MUST_USE
bool
slowPathCheckNoExecute
(
JSContext
*
cx
HandleScript
script
)
;
static
ResumeMode
slowPathOnEnterFrame
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
ResumeMode
slowPathOnResumeFrame
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
ResumeMode
slowPathOnDebuggerStatement
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
ResumeMode
slowPathOnExceptionUnwind
(
JSContext
*
cx
AbstractFramePtr
frame
)
;
static
void
slowPathOnNewWasmInstance
(
JSContext
*
cx
Handle
<
WasmInstanceObject
*
>
wasmInstance
)
;
static
void
slowPathOnNewPromise
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
static
void
slowPathOnPromiseSettled
(
JSContext
*
cx
Handle
<
PromiseObject
*
>
promise
)
;
static
bool
inFrameMaps
(
AbstractFramePtr
frame
)
;
}
;
class
AutoSuppressDebuggeeNoExecuteChecks
{
EnterDebuggeeNoExecute
*
*
stack_
;
EnterDebuggeeNoExecute
*
prev_
;
public
:
explicit
AutoSuppressDebuggeeNoExecuteChecks
(
JSContext
*
cx
)
{
stack_
=
&
cx
-
>
noExecuteDebuggerTop
.
ref
(
)
;
prev_
=
*
stack_
;
*
stack_
=
nullptr
;
}
~
AutoSuppressDebuggeeNoExecuteChecks
(
)
{
MOZ_ASSERT
(
!
*
stack_
)
;
*
stack_
=
prev_
;
}
}
;
}
#
endif
