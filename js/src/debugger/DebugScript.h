#
ifndef
dbg_DebugScript_h
#
define
dbg_DebugScript_h
#
include
"
debugger
/
Debugger
.
h
"
namespace
js
{
class
DebugScript
{
friend
class
DebugAPI
;
uint32_t
generatorObserverCount
;
uint32_t
stepperCount
;
uint32_t
numSites
;
BreakpointSite
*
breakpoints
[
1
]
;
bool
needed
(
)
const
{
return
generatorObserverCount
>
0
|
|
stepperCount
>
0
|
|
numSites
>
0
;
}
static
size_t
allocSize
(
size_t
codeLength
)
{
return
offsetof
(
DebugScript
breakpoints
)
+
codeLength
*
sizeof
(
BreakpointSite
*
)
;
}
static
DebugScript
*
get
(
JSScript
*
script
)
;
static
DebugScript
*
getOrCreate
(
JSContext
*
cx
JSScript
*
script
)
;
public
:
static
BreakpointSite
*
getBreakpointSite
(
JSScript
*
script
jsbytecode
*
pc
)
;
static
BreakpointSite
*
getOrCreateBreakpointSite
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
)
;
static
void
destroyBreakpointSite
(
FreeOp
*
fop
JSScript
*
script
jsbytecode
*
pc
)
;
static
void
clearBreakpointsIn
(
FreeOp
*
fop
Realm
*
realm
Debugger
*
dbg
JSObject
*
handler
)
;
static
void
clearBreakpointsIn
(
FreeOp
*
fop
JSScript
*
script
Debugger
*
dbg
JSObject
*
handler
)
;
#
ifdef
DEBUG
static
uint32_t
getStepperCount
(
JSScript
*
script
)
;
#
endif
static
bool
incrementStepperCount
(
JSContext
*
cx
JSScript
*
script
)
;
static
void
decrementStepperCount
(
FreeOp
*
fop
JSScript
*
script
)
;
static
bool
incrementGeneratorObserverCount
(
JSContext
*
cx
JSScript
*
script
)
;
static
void
decrementGeneratorObserverCount
(
FreeOp
*
fop
JSScript
*
script
)
;
}
;
}
#
endif
