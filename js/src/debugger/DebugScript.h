#
ifndef
dbg_DebugScript_h
#
define
dbg_DebugScript_h
#
include
<
stddef
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jsapi
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
gc
/
WeakMap
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
namespace
JS
{
class
JS_PUBLIC_API
Realm
;
}
namespace
js
{
class
JSBreakpointSite
;
class
Debugger
;
class
DebugScriptObject
;
class
DebugScript
{
friend
class
DebugAPI
;
friend
class
DebugScriptObject
;
uint32_t
generatorObserverCount
;
uint32_t
stepperCount
;
size_t
codeLength
;
uint32_t
numSites
;
JSBreakpointSite
*
breakpoints
[
1
]
;
bool
needed
(
)
const
{
return
generatorObserverCount
>
0
|
|
stepperCount
>
0
|
|
numSites
>
0
;
}
static
size_t
allocSize
(
size_t
codeLength
)
{
return
offsetof
(
DebugScript
breakpoints
)
+
codeLength
*
sizeof
(
JSBreakpointSite
*
)
;
}
void
trace
(
JSTracer
*
trc
)
;
void
delete_
(
JSFreeOp
*
fop
DebugScriptObject
*
owner
)
;
static
DebugScript
*
get
(
JSScript
*
script
)
;
static
DebugScript
*
getOrCreate
(
JSContext
*
cx
HandleScript
script
)
;
public
:
static
JSBreakpointSite
*
getBreakpointSite
(
JSScript
*
script
jsbytecode
*
pc
)
;
static
JSBreakpointSite
*
getOrCreateBreakpointSite
(
JSContext
*
cx
HandleScript
script
jsbytecode
*
pc
)
;
static
void
destroyBreakpointSite
(
JSFreeOp
*
fop
JSScript
*
script
jsbytecode
*
pc
)
;
static
void
clearBreakpointsIn
(
JSFreeOp
*
fop
JSScript
*
script
Debugger
*
dbg
JSObject
*
handler
)
;
#
ifdef
DEBUG
static
uint32_t
getStepperCount
(
JSScript
*
script
)
;
#
endif
[
[
nodiscard
]
]
static
bool
incrementStepperCount
(
JSContext
*
cx
HandleScript
script
)
;
static
void
decrementStepperCount
(
JSFreeOp
*
fop
JSScript
*
script
)
;
[
[
nodiscard
]
]
static
bool
incrementGeneratorObserverCount
(
JSContext
*
cx
HandleScript
script
)
;
static
void
decrementGeneratorObserverCount
(
JSFreeOp
*
fop
JSScript
*
script
)
;
}
;
using
UniqueDebugScript
=
js
:
:
UniquePtr
<
DebugScript
JS
:
:
FreePolicy
>
;
class
DebugScriptObject
:
public
NativeObject
{
public
:
static
const
JSClass
class_
;
static
DebugScriptObject
*
create
(
JSContext
*
cx
UniqueDebugScript
debugScript
size_t
nbytes
)
;
DebugScript
*
debugScript
(
)
const
;
private
:
static
const
JSClassOps
classOps_
;
static
void
trace
(
JSTracer
*
trc
JSObject
*
obj
)
;
static
void
finalize
(
JSFreeOp
*
fop
JSObject
*
obj
)
;
}
;
class
DebugScriptMap
:
public
WeakMap
<
HeapPtr
<
JSScript
*
>
HeapPtr
<
DebugScriptObject
*
>
>
{
public
:
explicit
DebugScriptMap
(
JSContext
*
cx
)
:
WeakMap
(
cx
)
{
}
}
;
}
#
endif
