#
include
"
debugger
/
DebugScript
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
debugger
/
DebugAPI
.
h
"
#
include
"
debugger
/
Debugger
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Cell
.
h
"
#
include
"
gc
/
FreeOp
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
gc
/
ZoneAllocator
.
h
"
#
include
"
jit
/
BaselineJIT
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
vm
/
JSScript
.
h
"
#
include
"
vm
/
NativeObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
#
include
"
vm
/
Runtime
.
h
"
#
include
"
vm
/
Stack
.
h
"
#
include
"
gc
/
FreeOp
-
inl
.
h
"
#
include
"
gc
/
GC
-
inl
.
h
"
#
include
"
gc
/
Marking
-
inl
.
h
"
#
include
"
vm
/
JSContext
-
inl
.
h
"
#
include
"
vm
/
JSScript
-
inl
.
h
"
#
include
"
vm
/
Realm
-
inl
.
h
"
namespace
js
{
DebugScript
*
DebugScript
:
:
get
(
JSScript
*
script
)
{
MOZ_ASSERT
(
script
-
>
hasDebugScript
(
)
)
;
DebugScriptMap
*
map
=
script
-
>
zone
(
)
-
>
debugScriptMap
.
get
(
)
;
MOZ_ASSERT
(
map
)
;
DebugScriptMap
:
:
Ptr
p
=
map
-
>
lookup
(
script
)
;
MOZ_ASSERT
(
p
)
;
return
p
-
>
value
(
)
.
get
(
)
;
}
DebugScript
*
DebugScript
:
:
getOrCreate
(
JSContext
*
cx
JSScript
*
script
)
{
if
(
script
-
>
hasDebugScript
(
)
)
{
return
get
(
script
)
;
}
size_t
nbytes
=
allocSize
(
script
-
>
length
(
)
)
;
UniqueDebugScript
debug
(
reinterpret_cast
<
DebugScript
*
>
(
cx
-
>
pod_calloc
<
uint8_t
>
(
nbytes
)
)
)
;
if
(
!
debug
)
{
return
nullptr
;
}
if
(
!
script
-
>
zone
(
)
-
>
debugScriptMap
)
{
auto
map
=
cx
-
>
make_unique
<
DebugScriptMap
>
(
)
;
if
(
!
map
)
{
return
nullptr
;
}
script
-
>
zone
(
)
-
>
debugScriptMap
=
std
:
:
move
(
map
)
;
}
DebugScript
*
borrowed
=
debug
.
get
(
)
;
if
(
!
script
-
>
zone
(
)
-
>
debugScriptMap
-
>
putNew
(
script
std
:
:
move
(
debug
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
nullptr
;
}
script
-
>
setHasDebugScript
(
true
)
;
AddCellMemory
(
script
nbytes
MemoryUse
:
:
ScriptDebugScript
)
;
for
(
ActivationIterator
iter
(
cx
)
;
!
iter
.
done
(
)
;
+
+
iter
)
{
if
(
iter
-
>
isInterpreter
(
)
)
{
iter
-
>
asInterpreter
(
)
-
>
enableInterruptsIfRunning
(
script
)
;
}
}
return
borrowed
;
}
BreakpointSite
*
DebugScript
:
:
getBreakpointSite
(
JSScript
*
script
jsbytecode
*
pc
)
{
uint32_t
offset
=
script
-
>
pcToOffset
(
pc
)
;
return
script
-
>
hasDebugScript
(
)
?
get
(
script
)
-
>
breakpoints
[
offset
]
:
nullptr
;
}
BreakpointSite
*
DebugScript
:
:
getOrCreateBreakpointSite
(
JSContext
*
cx
JSScript
*
script
jsbytecode
*
pc
)
{
AutoRealm
ar
(
cx
script
)
;
DebugScript
*
debug
=
getOrCreate
(
cx
script
)
;
if
(
!
debug
)
{
return
nullptr
;
}
BreakpointSite
*
&
site
=
debug
-
>
breakpoints
[
script
-
>
pcToOffset
(
pc
)
]
;
if
(
!
site
)
{
site
=
cx
-
>
new_
<
JSBreakpointSite
>
(
script
pc
)
;
if
(
!
site
)
{
return
nullptr
;
}
debug
-
>
numSites
+
+
;
AddCellMemory
(
script
sizeof
(
JSBreakpointSite
)
MemoryUse
:
:
BreakpointSite
)
;
}
return
site
;
}
void
DebugScript
:
:
destroyBreakpointSite
(
JSFreeOp
*
fop
JSScript
*
script
jsbytecode
*
pc
)
{
DebugScript
*
debug
=
get
(
script
)
;
BreakpointSite
*
&
site
=
debug
-
>
breakpoints
[
script
-
>
pcToOffset
(
pc
)
]
;
MOZ_ASSERT
(
site
)
;
size_t
size
=
site
-
>
type
(
)
=
=
BreakpointSite
:
:
Type
:
:
JS
?
sizeof
(
JSBreakpointSite
)
:
sizeof
(
WasmBreakpointSite
)
;
fop
-
>
delete_
(
script
site
size
MemoryUse
:
:
BreakpointSite
)
;
site
=
nullptr
;
debug
-
>
numSites
-
-
;
if
(
!
debug
-
>
needed
(
)
)
{
DebugAPI
:
:
destroyDebugScript
(
fop
script
)
;
}
}
void
DebugScript
:
:
clearBreakpointsIn
(
JSFreeOp
*
fop
Realm
*
realm
Debugger
*
dbg
JSObject
*
handler
)
{
for
(
auto
script
=
realm
-
>
zone
(
)
-
>
cellIter
<
JSScript
>
(
)
;
!
script
.
done
(
)
;
script
.
next
(
)
)
{
if
(
script
-
>
realm
(
)
=
=
realm
&
&
script
-
>
hasDebugScript
(
)
)
{
clearBreakpointsIn
(
fop
script
dbg
handler
)
;
}
}
}
void
DebugScript
:
:
clearBreakpointsIn
(
JSFreeOp
*
fop
JSScript
*
script
Debugger
*
dbg
JSObject
*
handler
)
{
if
(
!
script
-
>
hasDebugScript
(
)
)
{
return
;
}
for
(
jsbytecode
*
pc
=
script
-
>
code
(
)
;
pc
<
script
-
>
codeEnd
(
)
;
pc
+
+
)
{
BreakpointSite
*
site
=
getBreakpointSite
(
script
pc
)
;
if
(
site
)
{
Breakpoint
*
nextbp
;
for
(
Breakpoint
*
bp
=
site
-
>
firstBreakpoint
(
)
;
bp
;
bp
=
nextbp
)
{
nextbp
=
bp
-
>
nextInSite
(
)
;
if
(
(
!
dbg
|
|
bp
-
>
debugger
=
=
dbg
)
&
&
(
!
handler
|
|
bp
-
>
getHandler
(
)
=
=
handler
)
)
{
bp
-
>
destroy
(
fop
)
;
}
}
}
}
}
#
ifdef
DEBUG
uint32_t
DebugScript
:
:
getStepperCount
(
JSScript
*
script
)
{
return
script
-
>
hasDebugScript
(
)
?
get
(
script
)
-
>
stepperCount
:
0
;
}
#
endif
bool
DebugScript
:
:
incrementStepperCount
(
JSContext
*
cx
JSScript
*
script
)
{
cx
-
>
check
(
script
)
;
MOZ_ASSERT
(
cx
-
>
realm
(
)
-
>
isDebuggee
(
)
)
;
AutoRealm
ar
(
cx
script
)
;
DebugScript
*
debug
=
getOrCreate
(
cx
script
)
;
if
(
!
debug
)
{
return
false
;
}
debug
-
>
stepperCount
+
+
;
if
(
debug
-
>
stepperCount
=
=
1
)
{
if
(
script
-
>
hasBaselineScript
(
)
)
{
script
-
>
baselineScript
(
)
-
>
toggleDebugTraps
(
script
nullptr
)
;
}
}
return
true
;
}
void
DebugScript
:
:
decrementStepperCount
(
JSFreeOp
*
fop
JSScript
*
script
)
{
DebugScript
*
debug
=
get
(
script
)
;
MOZ_ASSERT
(
debug
)
;
MOZ_ASSERT
(
debug
-
>
stepperCount
>
0
)
;
debug
-
>
stepperCount
-
-
;
if
(
debug
-
>
stepperCount
=
=
0
)
{
if
(
script
-
>
hasBaselineScript
(
)
)
{
script
-
>
baselineScript
(
)
-
>
toggleDebugTraps
(
script
nullptr
)
;
}
if
(
!
debug
-
>
needed
(
)
)
{
DebugAPI
:
:
destroyDebugScript
(
fop
script
)
;
}
}
}
bool
DebugScript
:
:
incrementGeneratorObserverCount
(
JSContext
*
cx
JSScript
*
script
)
{
cx
-
>
check
(
script
)
;
MOZ_ASSERT
(
cx
-
>
realm
(
)
-
>
isDebuggee
(
)
)
;
AutoRealm
ar
(
cx
script
)
;
DebugScript
*
debug
=
getOrCreate
(
cx
script
)
;
if
(
!
debug
)
{
return
false
;
}
debug
-
>
generatorObserverCount
+
+
;
MOZ_ASSERT_IF
(
script
-
>
hasBaselineScript
(
)
script
-
>
baselineScript
(
)
-
>
hasDebugInstrumentation
(
)
)
;
return
true
;
}
void
DebugScript
:
:
decrementGeneratorObserverCount
(
JSFreeOp
*
fop
JSScript
*
script
)
{
DebugScript
*
debug
=
get
(
script
)
;
MOZ_ASSERT
(
debug
)
;
MOZ_ASSERT
(
debug
-
>
generatorObserverCount
>
0
)
;
debug
-
>
generatorObserverCount
-
-
;
if
(
!
debug
-
>
needed
(
)
)
{
DebugAPI
:
:
destroyDebugScript
(
fop
script
)
;
}
}
void
DebugAPI
:
:
destroyDebugScript
(
JSFreeOp
*
fop
JSScript
*
script
)
{
if
(
script
-
>
hasDebugScript
(
)
)
{
DebugScriptMap
*
map
=
script
-
>
zone
(
)
-
>
debugScriptMap
.
get
(
)
;
MOZ_ASSERT
(
map
)
;
DebugScriptMap
:
:
Ptr
p
=
map
-
>
lookup
(
script
)
;
MOZ_ASSERT
(
p
)
;
DebugScript
*
debug
=
p
-
>
value
(
)
.
release
(
)
;
map
-
>
remove
(
p
)
;
script
-
>
setHasDebugScript
(
false
)
;
fop
-
>
free_
(
script
debug
DebugScript
:
:
allocSize
(
script
-
>
length
(
)
)
MemoryUse
:
:
ScriptDebugScript
)
;
}
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
DebugAPI
:
:
checkDebugScriptAfterMovingGC
(
DebugScript
*
ds
)
{
for
(
uint32_t
i
=
0
;
i
<
ds
-
>
numSites
;
i
+
+
)
{
BreakpointSite
*
site
=
ds
-
>
breakpoints
[
i
]
;
if
(
site
&
&
site
-
>
type
(
)
=
=
BreakpointSite
:
:
Type
:
:
JS
)
{
CheckGCThingAfterMovingGC
(
site
-
>
asJS
(
)
-
>
script
)
;
}
}
}
#
endif
void
DebugAPI
:
:
sweepBreakpointsSlow
(
JSFreeOp
*
fop
JSScript
*
script
)
{
bool
scriptGone
=
IsAboutToBeFinalizedUnbarriered
(
&
script
)
;
for
(
unsigned
i
=
0
;
i
<
script
-
>
length
(
)
;
i
+
+
)
{
BreakpointSite
*
site
=
DebugScript
:
:
getBreakpointSite
(
script
script
-
>
offsetToPC
(
i
)
)
;
if
(
!
site
)
{
continue
;
}
Breakpoint
*
nextbp
;
for
(
Breakpoint
*
bp
=
site
-
>
firstBreakpoint
(
)
;
bp
;
bp
=
nextbp
)
{
nextbp
=
bp
-
>
nextInSite
(
)
;
GCPtrNativeObject
&
dbgobj
=
bp
-
>
debugger
-
>
toJSObjectRef
(
)
;
MOZ_ASSERT_IF
(
script
-
>
zone
(
)
-
>
isGCSweeping
(
)
&
&
dbgobj
-
>
zone
(
)
-
>
isCollecting
(
)
dbgobj
-
>
zone
(
)
-
>
isGCSweeping
(
)
|
|
(
!
scriptGone
&
&
dbgobj
-
>
asTenured
(
)
.
isMarkedAny
(
)
)
)
;
bool
dying
=
scriptGone
|
|
IsAboutToBeFinalized
(
&
dbgobj
)
;
MOZ_ASSERT_IF
(
!
dying
!
IsAboutToBeFinalized
(
&
bp
-
>
getHandlerRef
(
)
)
)
;
if
(
dying
)
{
bp
-
>
destroy
(
fop
)
;
}
}
}
}
bool
DebugAPI
:
:
stepModeEnabledSlow
(
JSScript
*
script
)
{
return
DebugScript
:
:
get
(
script
)
-
>
stepperCount
>
0
;
}
bool
DebugAPI
:
:
hasBreakpointsAtSlow
(
JSScript
*
script
jsbytecode
*
pc
)
{
BreakpointSite
*
site
=
DebugScript
:
:
getBreakpointSite
(
script
pc
)
;
return
site
&
&
site
-
>
enabledCount
>
0
;
}
}
