#
ifndef
jsalloc_h
#
define
jsalloc_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
js
/
Utility
.
h
"
namespace
js
{
enum
class
AllocFunction
{
Malloc
Calloc
Realloc
}
;
struct
ContextFriendFields
;
class
SystemAllocPolicy
{
public
:
template
<
typename
T
>
T
*
maybe_pod_malloc
(
size_t
numElems
)
{
return
js_pod_malloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_calloc
(
size_t
numElems
)
{
return
js_pod_calloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_realloc
(
T
*
p
size_t
oldSize
size_t
newSize
)
{
return
js_pod_realloc
<
T
>
(
p
oldSize
newSize
)
;
}
template
<
typename
T
>
T
*
pod_malloc
(
size_t
numElems
)
{
return
maybe_pod_malloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
pod_calloc
(
size_t
numElems
)
{
return
maybe_pod_calloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
pod_realloc
(
T
*
p
size_t
oldSize
size_t
newSize
)
{
return
maybe_pod_realloc
<
T
>
(
p
oldSize
newSize
)
;
}
void
free_
(
void
*
p
)
{
js_free
(
p
)
;
}
void
reportAllocOverflow
(
)
const
{
}
bool
checkSimulatedOOM
(
)
const
{
return
!
js
:
:
oom
:
:
ShouldFailWithOOM
(
)
;
}
}
;
class
ExclusiveContext
;
void
ReportOutOfMemory
(
ExclusiveContext
*
cxArg
)
;
class
TempAllocPolicy
{
ContextFriendFields
*
const
cx_
;
JS_FRIEND_API
(
void
*
)
onOutOfMemory
(
AllocFunction
allocFunc
size_t
nbytes
void
*
reallocPtr
=
nullptr
)
;
template
<
typename
T
>
T
*
onOutOfMemoryTyped
(
AllocFunction
allocFunc
size_t
numElems
void
*
reallocPtr
=
nullptr
)
{
size_t
bytes
;
if
(
MOZ_UNLIKELY
(
!
CalculateAllocSize
<
T
>
(
numElems
&
bytes
)
)
)
return
nullptr
;
return
static_cast
<
T
*
>
(
onOutOfMemory
(
allocFunc
bytes
reallocPtr
)
)
;
}
public
:
MOZ_IMPLICIT
TempAllocPolicy
(
JSContext
*
cx
)
:
cx_
(
(
ContextFriendFields
*
)
cx
)
{
}
MOZ_IMPLICIT
TempAllocPolicy
(
ContextFriendFields
*
cx
)
:
cx_
(
cx
)
{
}
template
<
typename
T
>
T
*
maybe_pod_malloc
(
size_t
numElems
)
{
return
js_pod_malloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_calloc
(
size_t
numElems
)
{
return
js_pod_calloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_realloc
(
T
*
prior
size_t
oldSize
size_t
newSize
)
{
return
js_pod_realloc
<
T
>
(
prior
oldSize
newSize
)
;
}
template
<
typename
T
>
T
*
pod_malloc
(
size_t
numElems
)
{
T
*
p
=
maybe_pod_malloc
<
T
>
(
numElems
)
;
if
(
MOZ_UNLIKELY
(
!
p
)
)
p
=
onOutOfMemoryTyped
<
T
>
(
AllocFunction
:
:
Malloc
numElems
)
;
return
p
;
}
template
<
typename
T
>
T
*
pod_calloc
(
size_t
numElems
)
{
T
*
p
=
maybe_pod_calloc
<
T
>
(
numElems
)
;
if
(
MOZ_UNLIKELY
(
!
p
)
)
p
=
onOutOfMemoryTyped
<
T
>
(
AllocFunction
:
:
Calloc
numElems
)
;
return
p
;
}
template
<
typename
T
>
T
*
pod_realloc
(
T
*
prior
size_t
oldSize
size_t
newSize
)
{
T
*
p2
=
maybe_pod_realloc
<
T
>
(
prior
oldSize
newSize
)
;
if
(
MOZ_UNLIKELY
(
!
p2
)
)
p2
=
onOutOfMemoryTyped
<
T
>
(
AllocFunction
:
:
Realloc
newSize
prior
)
;
return
p2
;
}
void
free_
(
void
*
p
)
{
js_free
(
p
)
;
}
JS_FRIEND_API
(
void
)
reportAllocOverflow
(
)
const
;
bool
checkSimulatedOOM
(
)
const
{
if
(
js
:
:
oom
:
:
ShouldFailWithOOM
(
)
)
{
js
:
:
ReportOutOfMemory
(
reinterpret_cast
<
ExclusiveContext
*
>
(
cx_
)
)
;
return
false
;
}
return
true
;
}
}
;
}
#
endif
