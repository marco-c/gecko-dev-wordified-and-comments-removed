#
include
"
builtin
/
FinalizationGroupObject
.
h
"
#
include
"
gc
/
GCRuntime
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
gc
/
PrivateIterators
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
gc
;
bool
GCRuntime
:
:
registerWithFinalizationGroup
(
JSContext
*
cx
HandleObject
target
HandleObject
record
)
{
MOZ_ASSERT
(
!
IsCrossCompartmentWrapper
(
target
)
)
;
MOZ_ASSERT
(
UncheckedUnwrapWithoutExpose
(
record
)
-
>
is
<
FinalizationRecordObject
>
(
)
)
;
MOZ_ASSERT
(
target
-
>
compartment
(
)
=
=
record
-
>
compartment
(
)
)
;
auto
&
map
=
target
-
>
zone
(
)
-
>
finalizationRecordMap
(
)
;
auto
ptr
=
map
.
lookupForAdd
(
target
)
;
if
(
!
ptr
)
{
if
(
!
map
.
add
(
ptr
target
FinalizationRecordVector
(
target
-
>
zone
(
)
)
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
}
return
ptr
-
>
value
(
)
.
append
(
record
)
;
}
void
GCRuntime
:
:
markFinalizationGroupData
(
JSTracer
*
trc
)
{
for
(
GCZonesIter
zone
(
this
)
;
!
zone
.
done
(
)
;
zone
.
next
(
)
)
{
auto
&
map
=
zone
-
>
finalizationRecordMap
(
)
;
for
(
Zone
:
:
FinalizationRecordMap
:
:
Enum
e
(
map
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
e
.
front
(
)
.
value
(
)
.
trace
(
trc
)
;
}
}
}
void
GCRuntime
:
:
sweepFinalizationGroups
(
Zone
*
zone
)
{
auto
&
map
=
zone
-
>
finalizationRecordMap
(
)
;
for
(
Zone
:
:
FinalizationRecordMap
:
:
Enum
e
(
map
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
auto
&
records
=
e
.
front
(
)
.
value
(
)
;
if
(
IsAboutToBeFinalized
(
&
e
.
front
(
)
.
mutableKey
(
)
)
)
{
for
(
JSObject
*
obj
:
records
)
{
obj
=
UncheckedUnwrapWithoutExpose
(
obj
)
;
auto
record
=
&
obj
-
>
as
<
FinalizationRecordObject
>
(
)
;
FinalizationGroupObject
*
group
=
record
-
>
group
(
)
;
if
(
group
)
{
group
-
>
queueHoldingsToBeCleanedUp
(
record
-
>
holdings
(
)
)
;
queueFinalizationGroupForCleanup
(
group
)
;
}
}
e
.
removeFront
(
)
;
}
else
{
records
.
sweep
(
)
;
records
.
eraseIf
(
[
]
(
JSObject
*
obj
)
{
obj
=
UncheckedUnwrapWithoutExpose
(
obj
)
;
auto
record
=
&
obj
-
>
as
<
FinalizationRecordObject
>
(
)
;
return
!
record
-
>
group
(
)
;
}
)
;
}
}
}
void
GCRuntime
:
:
queueFinalizationGroupForCleanup
(
FinalizationGroupObject
*
group
)
{
if
(
!
group
-
>
isQueuedForCleanup
(
)
)
{
callHostCleanupFinalizationGroupCallback
(
group
)
;
group
-
>
setQueuedForCleanup
(
true
)
;
}
}
bool
GCRuntime
:
:
cleanupQueuedFinalizationGroup
(
JSContext
*
cx
HandleFinalizationGroupObject
group
)
{
group
-
>
setQueuedForCleanup
(
false
)
;
bool
ok
=
FinalizationGroupObject
:
:
cleanupQueuedHoldings
(
cx
group
)
;
return
ok
;
}
