#
ifndef
js_SweepingAPI_h
#
define
js_SweepingAPI_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
jstypes
.
h
"
#
include
"
js
/
GCAnnotations
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
namespace
js
{
namespace
gc
{
JS_PUBLIC_API
void
LockStoreBuffer
(
JSRuntime
*
runtime
)
;
JS_PUBLIC_API
void
UnlockStoreBuffer
(
JSRuntime
*
runtim
)
;
class
AutoLockStoreBuffer
{
JSRuntime
*
runtime
;
public
:
explicit
AutoLockStoreBuffer
(
JSRuntime
*
runtime
)
:
runtime
(
runtime
)
{
LockStoreBuffer
(
runtime
)
;
}
~
AutoLockStoreBuffer
(
)
{
UnlockStoreBuffer
(
runtime
)
;
}
}
;
}
}
namespace
JS
{
namespace
detail
{
class
WeakCacheBase
;
}
namespace
shadow
{
JS_PUBLIC_API
void
RegisterWeakCache
(
JS
:
:
Zone
*
zone
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
JS_PUBLIC_API
void
RegisterWeakCache
(
JSRuntime
*
rt
JS
:
:
detail
:
:
WeakCacheBase
*
cachep
)
;
}
namespace
detail
{
class
WeakCacheBase
:
public
mozilla
:
:
LinkedListElement
<
WeakCacheBase
>
{
WeakCacheBase
(
)
=
delete
;
explicit
WeakCacheBase
(
const
WeakCacheBase
&
)
=
delete
;
public
:
enum
NeedsLock
:
bool
{
LockStoreBuffer
=
true
DontLockStoreBuffer
=
false
}
;
explicit
WeakCacheBase
(
JS
:
:
Zone
*
zone
)
{
shadow
:
:
RegisterWeakCache
(
zone
this
)
;
}
explicit
WeakCacheBase
(
JSRuntime
*
rt
)
{
shadow
:
:
RegisterWeakCache
(
rt
this
)
;
}
WeakCacheBase
(
WeakCacheBase
&
&
other
)
=
default
;
virtual
~
WeakCacheBase
(
)
=
default
;
virtual
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needLock
)
=
0
;
virtual
bool
empty
(
)
=
0
;
virtual
bool
setIncrementalBarrierTracer
(
JSTracer
*
trc
)
{
return
false
;
}
virtual
bool
needsIncrementalBarrier
(
)
const
{
return
false
;
}
}
;
}
template
<
typename
T
>
class
WeakCache
:
protected
detail
:
:
WeakCacheBase
public
js
:
:
MutableWrappedPtrOperations
<
T
WeakCache
<
T
>
>
{
T
cache
;
public
:
using
Type
=
T
;
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
Zone
*
zone
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
zone
)
cache
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
JSRuntime
*
rt
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
rt
)
cache
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
const
T
&
get
(
)
const
{
return
cache
;
}
T
&
get
(
)
{
return
cache
;
}
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needsLock
)
override
{
mozilla
:
:
Maybe
<
js
:
:
gc
:
:
AutoLockStoreBuffer
>
lock
;
if
(
needsLock
)
{
lock
.
emplace
(
trc
-
>
runtime
(
)
)
;
}
GCPolicy
<
T
>
:
:
traceWeak
(
trc
&
cache
)
;
return
0
;
}
bool
empty
(
)
override
{
return
cache
.
empty
(
)
;
}
}
JS_HAZ_NON_GC_POINTER
;
template
<
typename
Key
typename
Value
typename
HashPolicy
typename
AllocPolicy
typename
MapEntryGCPolicy
>
class
WeakCache
<
GCHashMap
<
Key
Value
HashPolicy
AllocPolicy
MapEntryGCPolicy
>
>
final
:
protected
detail
:
:
WeakCacheBase
{
using
Map
=
GCHashMap
<
Key
Value
HashPolicy
AllocPolicy
MapEntryGCPolicy
>
;
using
Self
=
WeakCache
<
Map
>
;
Map
map
;
JSTracer
*
barrierTracer
=
nullptr
;
public
:
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
Zone
*
zone
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
zone
)
map
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
JSRuntime
*
rt
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
rt
)
map
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
~
WeakCache
(
)
{
MOZ_ASSERT
(
!
barrierTracer
)
;
}
bool
empty
(
)
override
{
return
map
.
empty
(
)
;
}
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needsLock
)
override
{
size_t
steps
=
map
.
count
(
)
;
mozilla
:
:
Maybe
<
typename
Map
:
:
Enum
>
e
;
e
.
emplace
(
map
)
;
map
.
traceWeakEntries
(
trc
e
.
ref
(
)
)
;
mozilla
:
:
Maybe
<
js
:
:
gc
:
:
AutoLockStoreBuffer
>
lock
;
if
(
needsLock
)
{
lock
.
emplace
(
trc
-
>
runtime
(
)
)
;
}
e
.
reset
(
)
;
return
steps
;
}
bool
setIncrementalBarrierTracer
(
JSTracer
*
trc
)
override
{
MOZ_ASSERT
(
bool
(
barrierTracer
)
!
=
bool
(
trc
)
)
;
barrierTracer
=
trc
;
return
true
;
}
bool
needsIncrementalBarrier
(
)
const
override
{
return
barrierTracer
;
}
private
:
using
Entry
=
typename
Map
:
:
Entry
;
static
bool
entryNeedsSweep
(
JSTracer
*
barrierTracer
const
Entry
&
prior
)
{
Key
key
(
prior
.
key
(
)
)
;
Value
value
(
prior
.
value
(
)
)
;
bool
needsSweep
=
!
MapEntryGCPolicy
:
:
traceWeak
(
barrierTracer
&
key
&
value
)
;
MOZ_ASSERT_IF
(
!
needsSweep
prior
.
key
(
)
=
=
key
)
;
MOZ_ASSERT_IF
(
!
needsSweep
prior
.
value
(
)
=
=
value
)
;
return
needsSweep
;
}
public
:
using
Lookup
=
typename
Map
:
:
Lookup
;
using
Ptr
=
typename
Map
:
:
Ptr
;
using
AddPtr
=
typename
Map
:
:
AddPtr
;
struct
Range
{
explicit
Range
(
Self
&
self
)
:
cache
(
self
)
range
(
self
.
map
.
all
(
)
)
{
settle
(
)
;
}
Range
(
)
=
default
;
bool
empty
(
)
const
{
return
range
.
empty
(
)
;
}
const
Entry
&
front
(
)
const
{
return
range
.
front
(
)
;
}
void
popFront
(
)
{
range
.
popFront
(
)
;
settle
(
)
;
}
private
:
Self
&
cache
;
typename
Map
:
:
Range
range
;
void
settle
(
)
{
if
(
JSTracer
*
trc
=
cache
.
barrierTracer
)
{
while
(
!
empty
(
)
&
&
entryNeedsSweep
(
trc
front
(
)
)
)
{
popFront
(
)
;
}
}
}
}
;
struct
Enum
:
public
Map
:
:
Enum
{
explicit
Enum
(
Self
&
cache
)
:
Map
:
:
Enum
(
cache
.
map
)
{
MOZ_ASSERT
(
!
cache
.
barrierTracer
)
;
}
}
;
Ptr
lookup
(
const
Lookup
&
l
)
const
{
Ptr
ptr
=
map
.
lookup
(
l
)
;
if
(
barrierTracer
&
&
ptr
&
&
entryNeedsSweep
(
barrierTracer
*
ptr
)
)
{
const_cast
<
Map
&
>
(
map
)
.
remove
(
ptr
)
;
return
Ptr
(
)
;
}
return
ptr
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
{
AddPtr
ptr
=
map
.
lookupForAdd
(
l
)
;
if
(
barrierTracer
&
&
ptr
&
&
entryNeedsSweep
(
barrierTracer
*
ptr
)
)
{
const_cast
<
Map
&
>
(
map
)
.
remove
(
ptr
)
;
return
map
.
lookupForAdd
(
l
)
;
}
return
ptr
;
}
Range
all
(
)
const
{
return
Range
(
*
const_cast
<
Self
*
>
(
this
)
)
;
}
bool
empty
(
)
const
{
MOZ_ASSERT
(
!
barrierTracer
)
;
return
map
.
empty
(
)
;
}
uint32_t
count
(
)
const
{
MOZ_ASSERT
(
!
barrierTracer
)
;
return
map
.
count
(
)
;
}
size_t
capacity
(
)
const
{
return
map
.
capacity
(
)
;
}
bool
has
(
const
Lookup
&
l
)
const
{
return
lookup
(
l
)
.
found
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
map
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
+
map
.
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
clear
(
)
{
MOZ_ASSERT
(
!
barrierTracer
)
;
map
.
clear
(
)
;
}
void
clearAndCompact
(
)
{
MOZ_ASSERT
(
!
barrierTracer
)
;
map
.
clearAndCompact
(
)
;
}
void
remove
(
Ptr
p
)
{
map
.
remove
(
p
)
;
}
void
remove
(
const
Lookup
&
l
)
{
Ptr
p
=
lookup
(
l
)
;
if
(
p
)
{
remove
(
p
)
;
}
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
add
(
AddPtr
&
p
KeyInput
&
&
k
ValueInput
&
&
v
)
{
return
map
.
add
(
p
std
:
:
forward
<
KeyInput
>
(
k
)
std
:
:
forward
<
ValueInput
>
(
v
)
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
relookupOrAdd
(
AddPtr
&
p
KeyInput
&
&
k
ValueInput
&
&
v
)
{
return
map
.
relookupOrAdd
(
p
std
:
:
forward
<
KeyInput
>
(
k
)
std
:
:
forward
<
ValueInput
>
(
v
)
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
put
(
KeyInput
&
&
k
ValueInput
&
&
v
)
{
return
map
.
put
(
std
:
:
forward
<
KeyInput
>
(
k
)
std
:
:
forward
<
ValueInput
>
(
v
)
)
;
}
template
<
typename
KeyInput
typename
ValueInput
>
bool
putNew
(
KeyInput
&
&
k
ValueInput
&
&
v
)
{
return
map
.
putNew
(
std
:
:
forward
<
KeyInput
>
(
k
)
std
:
:
forward
<
ValueInput
>
(
v
)
)
;
}
}
JS_HAZ_NON_GC_POINTER
;
template
<
typename
T
typename
HashPolicy
typename
AllocPolicy
>
class
WeakCache
<
GCHashSet
<
T
HashPolicy
AllocPolicy
>
>
final
:
protected
detail
:
:
WeakCacheBase
{
using
Set
=
GCHashSet
<
T
HashPolicy
AllocPolicy
>
;
using
Self
=
WeakCache
<
Set
>
;
Set
set
;
JSTracer
*
barrierTracer
=
nullptr
;
public
:
using
Entry
=
typename
Set
:
:
Entry
;
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
Zone
*
zone
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
zone
)
set
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
template
<
typename
.
.
.
Args
>
explicit
WeakCache
(
JSRuntime
*
rt
Args
&
&
.
.
.
args
)
:
WeakCacheBase
(
rt
)
set
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
size_t
traceWeak
(
JSTracer
*
trc
NeedsLock
needsLock
)
override
{
size_t
steps
=
set
.
count
(
)
;
mozilla
:
:
Maybe
<
typename
Set
:
:
Enum
>
e
;
e
.
emplace
(
set
)
;
set
.
traceWeakEntries
(
trc
e
.
ref
(
)
)
;
mozilla
:
:
Maybe
<
js
:
:
gc
:
:
AutoLockStoreBuffer
>
lock
;
if
(
needsLock
)
{
lock
.
emplace
(
trc
-
>
runtime
(
)
)
;
}
e
.
reset
(
)
;
return
steps
;
}
bool
empty
(
)
override
{
return
set
.
empty
(
)
;
}
bool
setIncrementalBarrierTracer
(
JSTracer
*
trc
)
override
{
MOZ_ASSERT
(
bool
(
barrierTracer
)
!
=
bool
(
trc
)
)
;
barrierTracer
=
trc
;
return
true
;
}
bool
needsIncrementalBarrier
(
)
const
override
{
return
barrierTracer
;
}
private
:
static
bool
entryNeedsSweep
(
JSTracer
*
barrierTracer
const
Entry
&
prior
)
{
Entry
entry
(
prior
)
;
bool
needsSweep
=
!
GCPolicy
<
T
>
:
:
traceWeak
(
barrierTracer
&
entry
)
;
MOZ_ASSERT_IF
(
!
needsSweep
prior
=
=
entry
)
;
return
needsSweep
;
}
public
:
using
Lookup
=
typename
Set
:
:
Lookup
;
using
Ptr
=
typename
Set
:
:
Ptr
;
using
AddPtr
=
typename
Set
:
:
AddPtr
;
struct
Range
{
explicit
Range
(
Self
&
self
)
:
cache
(
self
)
range
(
self
.
set
.
all
(
)
)
{
settle
(
)
;
}
Range
(
)
=
default
;
bool
empty
(
)
const
{
return
range
.
empty
(
)
;
}
const
Entry
&
front
(
)
const
{
return
range
.
front
(
)
;
}
void
popFront
(
)
{
range
.
popFront
(
)
;
settle
(
)
;
}
private
:
Self
&
cache
;
typename
Set
:
:
Range
range
;
void
settle
(
)
{
if
(
JSTracer
*
trc
=
cache
.
barrierTracer
)
{
while
(
!
empty
(
)
&
&
entryNeedsSweep
(
trc
front
(
)
)
)
{
popFront
(
)
;
}
}
}
}
;
struct
Enum
:
public
Set
:
:
Enum
{
explicit
Enum
(
Self
&
cache
)
:
Set
:
:
Enum
(
cache
.
set
)
{
MOZ_ASSERT
(
!
cache
.
barrierTracer
)
;
}
}
;
Ptr
lookup
(
const
Lookup
&
l
)
const
{
Ptr
ptr
=
set
.
lookup
(
l
)
;
if
(
barrierTracer
&
&
ptr
&
&
entryNeedsSweep
(
barrierTracer
*
ptr
)
)
{
const_cast
<
Set
&
>
(
set
)
.
remove
(
ptr
)
;
return
Ptr
(
)
;
}
return
ptr
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
{
AddPtr
ptr
=
set
.
lookupForAdd
(
l
)
;
if
(
barrierTracer
&
&
ptr
&
&
entryNeedsSweep
(
barrierTracer
*
ptr
)
)
{
const_cast
<
Set
&
>
(
set
)
.
remove
(
ptr
)
;
return
set
.
lookupForAdd
(
l
)
;
}
return
ptr
;
}
Range
all
(
)
const
{
return
Range
(
*
const_cast
<
Self
*
>
(
this
)
)
;
}
bool
empty
(
)
const
{
MOZ_ASSERT
(
!
barrierTracer
)
;
return
set
.
empty
(
)
;
}
uint32_t
count
(
)
const
{
MOZ_ASSERT
(
!
barrierTracer
)
;
return
set
.
count
(
)
;
}
size_t
capacity
(
)
const
{
return
set
.
capacity
(
)
;
}
bool
has
(
const
Lookup
&
l
)
const
{
return
lookup
(
l
)
.
found
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
set
.
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
return
mallocSizeOf
(
this
)
+
set
.
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
void
clear
(
)
{
MOZ_ASSERT
(
!
barrierTracer
)
;
set
.
clear
(
)
;
}
void
clearAndCompact
(
)
{
MOZ_ASSERT
(
!
barrierTracer
)
;
set
.
clearAndCompact
(
)
;
}
void
remove
(
Ptr
p
)
{
set
.
remove
(
p
)
;
}
void
remove
(
const
Lookup
&
l
)
{
Ptr
p
=
lookup
(
l
)
;
if
(
p
)
{
remove
(
p
)
;
}
}
template
<
typename
TInput
>
void
replaceKey
(
Ptr
p
const
Lookup
&
l
TInput
&
&
newValue
)
{
set
.
replaceKey
(
p
l
std
:
:
forward
<
TInput
>
(
newValue
)
)
;
}
template
<
typename
TInput
>
bool
add
(
AddPtr
&
p
TInput
&
&
t
)
{
return
set
.
add
(
p
std
:
:
forward
<
TInput
>
(
t
)
)
;
}
template
<
typename
TInput
>
bool
relookupOrAdd
(
AddPtr
&
p
const
Lookup
&
l
TInput
&
&
t
)
{
return
set
.
relookupOrAdd
(
p
l
std
:
:
forward
<
TInput
>
(
t
)
)
;
}
template
<
typename
TInput
>
bool
put
(
TInput
&
&
t
)
{
return
set
.
put
(
std
:
:
forward
<
TInput
>
(
t
)
)
;
}
template
<
typename
TInput
>
bool
putNew
(
TInput
&
&
t
)
{
return
set
.
putNew
(
std
:
:
forward
<
TInput
>
(
t
)
)
;
}
template
<
typename
TInput
>
bool
putNew
(
const
Lookup
&
l
TInput
&
&
t
)
{
return
set
.
putNew
(
l
std
:
:
forward
<
TInput
>
(
t
)
)
;
}
}
JS_HAZ_NON_GC_POINTER
;
}
#
endif
