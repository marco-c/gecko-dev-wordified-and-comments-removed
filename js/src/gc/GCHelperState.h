#
ifndef
gc_GCHelperState_h
#
define
gc_GCHelperState_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ConditionVariable
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
namespace
js
{
class
AutoLockHelperThreadState
;
namespace
gc
{
class
ArenaLists
;
}
class
GCHelperState
{
enum
State
{
IDLE
SWEEPING
}
;
JSRuntime
*
const
rt
;
ConditionVariable
done
;
ActiveThreadOrGCTaskData
<
State
>
state_
;
GCLockData
<
bool
>
hasThread
;
void
startBackgroundThread
(
State
newState
const
AutoLockGC
&
lock
const
AutoLockHelperThreadState
&
helperLock
)
;
void
waitForBackgroundThread
(
js
:
:
AutoLockGC
&
lock
)
;
State
state
(
const
AutoLockGC
&
)
;
void
setState
(
State
state
const
AutoLockGC
&
)
;
friend
class
js
:
:
gc
:
:
ArenaLists
;
static
void
freeElementsAndArray
(
void
*
*
array
void
*
*
end
)
{
MOZ_ASSERT
(
array
<
=
end
)
;
for
(
void
*
*
p
=
array
;
p
!
=
end
;
+
+
p
)
js_free
(
*
p
)
;
js_free
(
array
)
;
}
void
doSweep
(
AutoLockGC
&
lock
)
;
public
:
explicit
GCHelperState
(
JSRuntime
*
rt
)
:
rt
(
rt
)
done
(
)
state_
(
IDLE
)
{
}
JSRuntime
*
runtime
(
)
{
return
rt
;
}
void
finish
(
)
;
void
work
(
)
;
void
maybeStartBackgroundSweep
(
const
AutoLockGC
&
lock
const
AutoLockHelperThreadState
&
helperLock
)
;
void
startBackgroundShrink
(
const
AutoLockGC
&
lock
)
;
void
waitBackgroundSweepEnd
(
)
;
#
ifdef
DEBUG
bool
onBackgroundThread
(
)
;
#
endif
bool
isBackgroundSweeping
(
)
const
{
return
state_
=
=
SWEEPING
;
}
}
;
}
#
endif
