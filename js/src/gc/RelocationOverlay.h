#
ifndef
gc_RelocationOverlay_h
#
define
gc_RelocationOverlay_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
EndianUtils
.
h
"
#
include
<
stdint
.
h
>
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
Shape
.
h
"
namespace
js
{
namespace
gc
{
struct
Cell
;
class
RelocationOverlay
{
static
const
uint32_t
Relocated
=
js
:
:
gc
:
:
Relocated
;
uint32_t
preserve_
;
uint32_t
magic_
;
Cell
*
newLocation_
;
RelocationOverlay
*
next_
;
public
:
static
const
RelocationOverlay
*
fromCell
(
const
Cell
*
cell
)
{
return
reinterpret_cast
<
const
RelocationOverlay
*
>
(
cell
)
;
}
static
RelocationOverlay
*
fromCell
(
Cell
*
cell
)
{
return
reinterpret_cast
<
RelocationOverlay
*
>
(
cell
)
;
}
bool
isForwarded
(
)
const
{
(
void
)
preserve_
;
return
magic_
=
=
Relocated
;
}
Cell
*
forwardingAddress
(
)
const
{
MOZ_ASSERT
(
isForwarded
(
)
)
;
return
newLocation_
;
}
void
forwardTo
(
Cell
*
cell
)
;
RelocationOverlay
*
&
nextRef
(
)
{
MOZ_ASSERT
(
isForwarded
(
)
)
;
return
next_
;
}
RelocationOverlay
*
next
(
)
const
{
MOZ_ASSERT
(
isForwarded
(
)
)
;
return
next_
;
}
static
bool
isCellForwarded
(
const
Cell
*
cell
)
{
return
fromCell
(
cell
)
-
>
isForwarded
(
)
;
}
}
;
}
}
#
endif
