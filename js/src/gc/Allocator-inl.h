#
ifndef
gc_Allocator_inl_h
#
define
gc_Allocator_inl_h
#
include
"
gc
/
Allocator
.
h
"
#
include
"
gc
/
Cell
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
js
/
Class
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
gc
/
Nursery
-
inl
.
h
"
namespace
js
{
namespace
gc
{
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
T
*
CellAllocator
:
:
NewCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
{
static_assert
(
std
:
:
is_base_of_v
<
gc
:
:
Cell
T
>
)
;
if
constexpr
(
std
:
:
is_base_of_v
<
JSObject
T
>
)
{
return
NewObject
<
T
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
else
if
constexpr
(
std
:
:
is_base_of_v
<
JS
:
:
BigInt
T
>
)
{
return
NewBigInt
<
T
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
else
if
constexpr
(
std
:
:
is_base_of_v
<
JSString
T
>
&
&
!
std
:
:
is_base_of_v
<
JSAtom
T
>
&
&
!
std
:
:
is_base_of_v
<
JSExternalString
T
>
)
{
return
NewString
<
T
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
else
{
return
NewTenuredCell
<
T
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
T
*
CellAllocator
:
:
NewString
(
JSContext
*
cx
gc
:
:
Heap
heap
Args
&
&
.
.
.
args
)
{
static_assert
(
std
:
:
is_base_of_v
<
JSString
T
>
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
MapTypeToAllocKind
<
T
>
:
:
kind
;
void
*
ptr
=
AllocNurseryOrTenuredCell
<
JS
:
:
TraceKind
:
:
String
allowGC
>
(
cx
kind
sizeof
(
T
)
heap
nullptr
)
;
if
(
MOZ_UNLIKELY
(
!
ptr
)
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
ptr
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
typename
T
AllowGC
allowGC
>
T
*
CellAllocator
:
:
NewBigInt
(
JSContext
*
cx
Heap
heap
)
{
void
*
ptr
=
AllocNurseryOrTenuredCell
<
JS
:
:
TraceKind
:
:
BigInt
allowGC
>
(
cx
gc
:
:
AllocKind
:
:
BIGINT
sizeof
(
T
)
heap
nullptr
)
;
if
(
MOZ_UNLIKELY
(
!
ptr
)
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
ptr
)
T
(
)
;
}
template
<
typename
T
AllowGC
allowGC
>
T
*
CellAllocator
:
:
NewObject
(
JSContext
*
cx
gc
:
:
AllocKind
kind
gc
:
:
Heap
heap
const
JSClass
*
clasp
gc
:
:
AllocSite
*
site
)
{
MOZ_ASSERT
(
IsObjectAllocKind
(
kind
)
)
;
MOZ_ASSERT_IF
(
heap
!
=
gc
:
:
Heap
:
:
Tenured
&
&
clasp
-
>
hasFinalize
(
)
&
&
!
clasp
-
>
isProxyObject
(
)
CanNurseryAllocateFinalizedClass
(
clasp
)
)
;
size_t
thingSize
=
JSObject
:
:
thingSize
(
kind
)
;
void
*
cell
=
AllocNurseryOrTenuredCell
<
JS
:
:
TraceKind
:
:
Object
allowGC
>
(
cx
kind
thingSize
heap
site
)
;
if
(
MOZ_UNLIKELY
(
!
cell
)
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
cell
)
T
(
)
;
}
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
T
*
CellAllocator
:
:
NewTenuredCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
{
gc
:
:
AllocKind
kind
=
gc
:
:
MapTypeToAllocKind
<
T
>
:
:
kind
;
MOZ_ASSERT
(
Arena
:
:
thingSize
(
kind
)
=
=
sizeof
(
T
)
)
;
void
*
cell
=
AllocTenuredCell
<
allowGC
>
(
cx
kind
)
;
if
(
MOZ_UNLIKELY
(
!
cell
)
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
cell
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
JS
:
:
TraceKind
traceKind
AllowGC
allowGC
>
void
*
CellAllocator
:
:
AllocNurseryOrTenuredCell
(
JSContext
*
cx
gc
:
:
AllocKind
allocKind
size_t
thingSize
gc
:
:
Heap
heap
AllocSite
*
site
)
{
MOZ_ASSERT
(
IsNurseryAllocable
(
allocKind
)
)
;
MOZ_ASSERT
(
MapAllocToTraceKind
(
allocKind
)
=
=
traceKind
)
;
MOZ_ASSERT
(
thingSize
=
=
Arena
:
:
thingSize
(
allocKind
)
)
;
MOZ_ASSERT_IF
(
site
&
&
site
-
>
initialHeap
(
)
=
=
Heap
:
:
Tenured
heap
=
=
Heap
:
:
Tenured
)
;
if
(
!
PreAllocChecks
<
allowGC
>
(
cx
allocKind
)
)
{
return
nullptr
;
}
JS
:
:
Zone
*
zone
=
cx
-
>
zone
(
)
;
gc
:
:
Heap
minHeapToTenure
=
CheckedHeap
(
zone
-
>
minHeapToTenure
(
traceKind
)
)
;
if
(
CheckedHeap
(
heap
)
<
minHeapToTenure
)
{
if
(
!
site
)
{
site
=
zone
-
>
unknownAllocSite
(
traceKind
)
;
}
#
ifdef
JS_GC_ZEAL
site
=
MaybeGenerateMissingAllocSite
(
cx
traceKind
site
)
;
#
endif
void
*
ptr
=
cx
-
>
nursery
(
)
.
tryAllocateCell
(
site
thingSize
traceKind
)
;
if
(
MOZ_LIKELY
(
ptr
)
)
{
return
ptr
;
}
return
RetryNurseryAlloc
<
allowGC
>
(
cx
traceKind
allocKind
thingSize
site
)
;
}
return
AllocTenuredCellForNurseryAlloc
<
allowGC
>
(
cx
allocKind
)
;
}
MOZ_ALWAYS_INLINE
gc
:
:
Heap
CellAllocator
:
:
CheckedHeap
(
gc
:
:
Heap
heap
)
{
if
(
heap
>
Heap
:
:
Tenured
)
{
MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
(
"
Bad
gc
:
:
Heap
value
"
)
;
}
return
heap
;
}
}
}
#
endif
