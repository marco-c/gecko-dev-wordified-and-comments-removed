#
include
"
gc
/
FinalizationRegistry
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
builtin
/
FinalizationRegistryObject
.
h
"
#
include
"
gc
/
GCInternals
.
h
"
#
include
"
gc
/
GCRuntime
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
vm
/
JSContext
.
h
"
#
include
"
gc
/
PrivateIterators
-
inl
.
h
"
#
include
"
gc
/
WeakMap
-
inl
.
h
"
#
include
"
vm
/
JSObject
-
inl
.
h
"
#
include
"
vm
/
NativeObject
-
inl
.
h
"
using
namespace
js
;
using
namespace
js
:
:
gc
;
FinalizationObservers
:
:
FinalizationObservers
(
Zone
*
zone
)
:
zone
(
zone
)
registries
(
zone
)
recordMap
(
zone
)
crossZoneWrappers
(
zone
)
{
}
FinalizationObservers
:
:
~
FinalizationObservers
(
)
{
MOZ_ASSERT
(
registries
.
empty
(
)
)
;
MOZ_ASSERT
(
recordMap
.
empty
(
)
)
;
MOZ_ASSERT
(
crossZoneWrappers
.
empty
(
)
)
;
}
bool
GCRuntime
:
:
addFinalizationRegistry
(
JSContext
*
cx
Handle
<
FinalizationRegistryObject
*
>
registry
)
{
if
(
!
cx
-
>
zone
(
)
-
>
ensureFinalizationObservers
(
)
|
|
!
cx
-
>
zone
(
)
-
>
finalizationObservers
(
)
-
>
addRegistry
(
registry
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
FinalizationObservers
:
:
addRegistry
(
Handle
<
FinalizationRegistryObject
*
>
registry
)
{
return
registries
.
put
(
registry
)
;
}
bool
GCRuntime
:
:
registerWithFinalizationRegistry
(
JSContext
*
cx
HandleObject
target
HandleObject
record
)
{
MOZ_ASSERT
(
!
IsCrossCompartmentWrapper
(
target
)
)
;
MOZ_ASSERT
(
UncheckedUnwrapWithoutExpose
(
record
)
-
>
is
<
FinalizationRecordObject
>
(
)
)
;
MOZ_ASSERT
(
target
-
>
compartment
(
)
=
=
record
-
>
compartment
(
)
)
;
Zone
*
zone
=
cx
-
>
zone
(
)
;
if
(
!
zone
-
>
ensureFinalizationObservers
(
)
|
|
!
zone
-
>
finalizationObservers
(
)
-
>
addRecord
(
target
record
)
)
{
ReportOutOfMemory
(
cx
)
;
return
false
;
}
return
true
;
}
bool
FinalizationObservers
:
:
addRecord
(
HandleObject
target
HandleObject
record
)
{
MOZ_ASSERT
(
target
-
>
zone
(
)
=
=
zone
)
;
FinalizationRecordObject
*
unwrappedRecord
=
&
UncheckedUnwrapWithoutExpose
(
record
)
-
>
as
<
FinalizationRecordObject
>
(
)
;
Zone
*
registryZone
=
unwrappedRecord
-
>
zone
(
)
;
bool
crossZone
=
registryZone
!
=
zone
;
if
(
crossZone
&
&
!
addCrossZoneWrapper
(
record
)
)
{
return
false
;
}
auto
wrapperGuard
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
if
(
crossZone
)
{
removeCrossZoneWrapper
(
record
)
;
}
}
)
;
GlobalObject
*
registryGlobal
=
&
unwrappedRecord
-
>
global
(
)
;
auto
*
globalData
=
registryGlobal
-
>
getOrCreateFinalizationRegistryData
(
)
;
if
(
!
globalData
|
|
!
globalData
-
>
addRecord
(
unwrappedRecord
)
)
{
return
false
;
}
auto
globalDataGuard
=
mozilla
:
:
MakeScopeExit
(
[
&
]
{
globalData
-
>
removeRecord
(
unwrappedRecord
)
;
}
)
;
auto
ptr
=
recordMap
.
lookupForAdd
(
target
)
;
if
(
!
ptr
&
&
!
recordMap
.
add
(
ptr
target
RecordVector
(
zone
)
)
)
{
return
false
;
}
if
(
!
ptr
-
>
value
(
)
.
append
(
record
)
)
{
return
false
;
}
unwrappedRecord
-
>
setInRecordMap
(
true
)
;
globalDataGuard
.
release
(
)
;
wrapperGuard
.
release
(
)
;
return
true
;
}
bool
FinalizationObservers
:
:
addCrossZoneWrapper
(
JSObject
*
wrapper
)
{
MOZ_ASSERT
(
IsCrossCompartmentWrapper
(
wrapper
)
)
;
MOZ_ASSERT
(
UncheckedUnwrapWithoutExpose
(
wrapper
)
-
>
zone
(
)
!
=
zone
)
;
auto
ptr
=
crossZoneWrappers
.
lookupForAdd
(
wrapper
)
;
MOZ_ASSERT
(
!
ptr
)
;
return
crossZoneWrappers
.
add
(
ptr
wrapper
UndefinedValue
(
)
)
;
}
void
FinalizationObservers
:
:
removeCrossZoneWrapper
(
JSObject
*
wrapper
)
{
MOZ_ASSERT
(
IsCrossCompartmentWrapper
(
wrapper
)
)
;
MOZ_ASSERT
(
UncheckedUnwrapWithoutExpose
(
wrapper
)
-
>
zone
(
)
!
=
zone
)
;
auto
ptr
=
crossZoneWrappers
.
lookupForAdd
(
wrapper
)
;
MOZ_ASSERT
(
ptr
)
;
crossZoneWrappers
.
remove
(
ptr
)
;
}
static
FinalizationRecordObject
*
UnwrapFinalizationRecord
(
JSObject
*
obj
)
{
obj
=
UncheckedUnwrapWithoutExpose
(
obj
)
;
if
(
!
obj
-
>
is
<
FinalizationRecordObject
>
(
)
)
{
MOZ_ASSERT
(
JS_IsDeadWrapper
(
obj
)
)
;
return
nullptr
;
}
return
&
obj
-
>
as
<
FinalizationRecordObject
>
(
)
;
}
void
FinalizationObservers
:
:
clearRecords
(
)
{
#
ifdef
DEBUG
for
(
RecordMap
:
:
Enum
e
(
recordMap
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
for
(
JSObject
*
object
:
e
.
front
(
)
.
value
(
)
)
{
FinalizationRecordObject
*
record
=
UnwrapFinalizationRecord
(
object
)
;
if
(
record
&
&
record
-
>
zone
(
)
!
=
zone
)
{
removeCrossZoneWrapper
(
object
)
;
}
}
}
MOZ_ASSERT
(
crossZoneWrappers
.
empty
(
)
)
;
#
endif
recordMap
.
clear
(
)
;
crossZoneWrappers
.
clear
(
)
;
}
void
GCRuntime
:
:
traceWeakFinalizationRegistryEdges
(
JSTracer
*
trc
Zone
*
zone
)
{
FinalizationObservers
*
observers
=
zone
-
>
finalizationObservers
(
)
;
if
(
observers
)
{
observers
-
>
traceWeakEdges
(
trc
)
;
}
}
void
FinalizationObservers
:
:
traceRoots
(
JSTracer
*
trc
)
{
crossZoneWrappers
.
trace
(
trc
)
;
}
void
FinalizationObservers
:
:
traceWeakEdges
(
JSTracer
*
trc
)
{
GCRuntime
*
gc
=
&
trc
-
>
runtime
(
)
-
>
gc
;
for
(
RegistrySet
:
:
Enum
e
(
registries
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
auto
result
=
TraceWeakEdge
(
trc
&
e
.
mutableFront
(
)
"
FinalizationRegistry
"
)
;
if
(
result
.
isDead
(
)
)
{
auto
*
registry
=
&
result
.
initialTarget
(
)
-
>
as
<
FinalizationRegistryObject
>
(
)
;
registry
-
>
queue
(
)
-
>
setHasRegistry
(
false
)
;
e
.
removeFront
(
)
;
}
else
{
result
.
finalTarget
(
)
-
>
as
<
FinalizationRegistryObject
>
(
)
.
traceWeak
(
trc
)
;
}
}
for
(
RecordMap
:
:
Enum
e
(
recordMap
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
RecordVector
&
records
=
e
.
front
(
)
.
value
(
)
;
records
.
mutableEraseIf
(
[
&
]
(
HeapPtrObject
&
heapPtr
)
{
auto
result
=
TraceWeakEdge
(
trc
&
heapPtr
"
FinalizationRecord
"
)
;
JSObject
*
obj
=
result
.
isLive
(
)
?
result
.
finalTarget
(
)
:
result
.
initialTarget
(
)
;
FinalizationRecordObject
*
record
=
UnwrapFinalizationRecord
(
obj
)
;
bool
shouldRemove
=
!
result
.
isLive
(
)
|
|
shouldRemoveRecord
(
record
)
;
if
(
shouldRemove
&
&
record
&
&
record
-
>
isInRecordMap
(
)
)
{
updateForRemovedRecord
(
obj
record
)
;
}
return
shouldRemove
;
}
)
;
#
ifdef
DEBUG
for
(
JSObject
*
obj
:
records
)
{
MOZ_ASSERT
(
UnwrapFinalizationRecord
(
obj
)
-
>
isInRecordMap
(
)
)
;
}
#
endif
if
(
!
TraceWeakEdge
(
trc
&
e
.
front
(
)
.
mutableKey
(
)
"
FinalizationRecord
target
"
)
)
{
for
(
JSObject
*
obj
:
records
)
{
FinalizationRecordObject
*
record
=
UnwrapFinalizationRecord
(
obj
)
;
FinalizationQueueObject
*
queue
=
record
-
>
queue
(
)
;
updateForRemovedRecord
(
obj
record
)
;
queue
-
>
queueRecordToBeCleanedUp
(
record
)
;
gc
-
>
queueFinalizationRegistryForCleanup
(
queue
)
;
}
e
.
removeFront
(
)
;
}
}
}
bool
FinalizationObservers
:
:
shouldRemoveRecord
(
FinalizationRecordObject
*
record
)
{
return
!
record
|
|
!
record
-
>
isRegistered
(
)
|
|
!
record
-
>
queue
(
)
-
>
hasRegistry
(
)
;
}
void
FinalizationObservers
:
:
updateForRemovedRecord
(
JSObject
*
wrapper
FinalizationRecordObject
*
record
)
{
MOZ_ASSERT
(
record
-
>
isInRecordMap
(
)
)
;
Zone
*
registryZone
=
record
-
>
zone
(
)
;
if
(
registryZone
!
=
zone
)
{
removeCrossZoneWrapper
(
wrapper
)
;
}
GlobalObject
*
registryGlobal
=
&
record
-
>
global
(
)
;
auto
*
globalData
=
registryGlobal
-
>
maybeFinalizationRegistryData
(
)
;
globalData
-
>
removeRecord
(
record
)
;
AutoTouchingGrayThings
atgt
;
record
-
>
setInRecordMap
(
false
)
;
}
void
GCRuntime
:
:
nukeFinalizationRecordWrapper
(
JSObject
*
wrapper
FinalizationRecordObject
*
record
)
{
if
(
record
-
>
isInRecordMap
(
)
)
{
FinalizationRegistryObject
:
:
unregisterRecord
(
record
)
;
wrapper
-
>
zone
(
)
-
>
finalizationObservers
(
)
-
>
updateForRemovedRecord
(
wrapper
record
)
;
}
}
void
GCRuntime
:
:
queueFinalizationRegistryForCleanup
(
FinalizationQueueObject
*
queue
)
{
if
(
queue
-
>
isQueuedForCleanup
(
)
)
{
return
;
}
JSObject
*
object
=
UncheckedUnwrapWithoutExpose
(
queue
-
>
incumbentObject
(
)
)
;
MOZ_ASSERT
(
object
)
;
GlobalObject
*
incumbentGlobal
=
&
object
-
>
nonCCWGlobal
(
)
;
callHostCleanupFinalizationRegistryCallback
(
queue
-
>
doCleanupFunction
(
)
incumbentGlobal
)
;
AutoTouchingGrayThings
atgt
;
queue
-
>
setQueuedForCleanup
(
true
)
;
}
FinalizationRegistryGlobalData
:
:
FinalizationRegistryGlobalData
(
Zone
*
zone
)
:
recordSet
(
zone
)
{
}
bool
FinalizationRegistryGlobalData
:
:
addRecord
(
FinalizationRecordObject
*
record
)
{
return
recordSet
.
putNew
(
record
)
;
}
void
FinalizationRegistryGlobalData
:
:
removeRecord
(
FinalizationRecordObject
*
record
)
{
MOZ_ASSERT
(
recordSet
.
has
(
record
)
)
;
recordSet
.
remove
(
record
)
;
}
void
FinalizationRegistryGlobalData
:
:
trace
(
JSTracer
*
trc
)
{
recordSet
.
trace
(
trc
)
;
}
