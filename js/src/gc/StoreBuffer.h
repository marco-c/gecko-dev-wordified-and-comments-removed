#
ifndef
gc_StoreBuffer_h
#
define
gc_StoreBuffer_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrancyGuard
.
h
"
#
include
<
algorithm
>
#
include
"
jsalloc
.
h
"
#
include
"
ds
/
LifoAlloc
.
h
"
#
include
"
gc
/
Nursery
.
h
"
#
include
"
js
/
MemoryMetrics
.
h
"
namespace
js
{
namespace
gc
{
class
ArenaCellSet
;
class
BufferableRef
{
public
:
virtual
void
trace
(
JSTracer
*
trc
)
=
0
;
bool
maybeInRememberedSet
(
const
Nursery
&
)
const
{
return
true
;
}
}
;
typedef
HashSet
<
void
*
PointerHasher
<
void
*
3
>
SystemAllocPolicy
>
EdgeSet
;
static
const
size_t
LifoAllocBlockSize
=
1
<
<
13
;
class
StoreBuffer
{
friend
class
mozilla
:
:
ReentrancyGuard
;
static
const
size_t
LowAvailableThreshold
=
size_t
(
LifoAllocBlockSize
/
2
.
0
)
;
template
<
typename
T
>
struct
MonoTypeBuffer
{
typedef
HashSet
<
T
typename
T
:
:
Hasher
SystemAllocPolicy
>
StoreSet
;
StoreSet
stores_
;
T
last_
;
const
static
size_t
MaxEntries
=
48
*
1024
/
sizeof
(
T
)
;
explicit
MonoTypeBuffer
(
)
:
last_
(
T
(
)
)
{
}
~
MonoTypeBuffer
(
)
{
stores_
.
finish
(
)
;
}
MOZ_MUST_USE
bool
init
(
)
{
if
(
!
stores_
.
initialized
(
)
&
&
!
stores_
.
init
(
)
)
return
false
;
clear
(
)
;
return
true
;
}
void
clear
(
)
{
last_
=
T
(
)
;
if
(
stores_
.
initialized
(
)
)
stores_
.
clear
(
)
;
}
void
put
(
StoreBuffer
*
owner
const
T
&
t
)
{
MOZ_ASSERT
(
stores_
.
initialized
(
)
)
;
sinkStore
(
owner
)
;
last_
=
t
;
}
void
unput
(
StoreBuffer
*
owner
const
T
&
v
)
{
if
(
last_
=
=
v
)
{
last_
=
T
(
)
;
return
;
}
stores_
.
remove
(
v
)
;
}
void
sinkStore
(
StoreBuffer
*
owner
)
{
MOZ_ASSERT
(
stores_
.
initialized
(
)
)
;
if
(
last_
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
stores_
.
put
(
last_
)
)
oomUnsafe
.
crash
(
"
Failed
to
allocate
for
MonoTypeBuffer
:
:
put
.
"
)
;
}
last_
=
T
(
)
;
if
(
MOZ_UNLIKELY
(
stores_
.
count
(
)
>
MaxEntries
)
)
owner
-
>
setAboutToOverflow
(
)
;
}
bool
has
(
StoreBuffer
*
owner
const
T
&
v
)
{
sinkStore
(
owner
)
;
return
stores_
.
has
(
v
)
;
}
void
trace
(
StoreBuffer
*
owner
TenuringTracer
&
mover
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
return
stores_
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
private
:
MonoTypeBuffer
&
operator
=
(
const
MonoTypeBuffer
&
other
)
=
delete
;
}
;
struct
GenericBuffer
{
LifoAlloc
*
storage_
;
explicit
GenericBuffer
(
)
:
storage_
(
nullptr
)
{
}
~
GenericBuffer
(
)
{
js_delete
(
storage_
)
;
}
MOZ_MUST_USE
bool
init
(
)
{
if
(
!
storage_
)
storage_
=
js_new
<
LifoAlloc
>
(
LifoAllocBlockSize
)
;
clear
(
)
;
return
bool
(
storage_
)
;
}
void
clear
(
)
{
if
(
!
storage_
)
return
;
storage_
-
>
used
(
)
?
storage_
-
>
releaseAll
(
)
:
storage_
-
>
freeAll
(
)
;
}
bool
isAboutToOverflow
(
)
const
{
return
!
storage_
-
>
isEmpty
(
)
&
&
storage_
-
>
availableInCurrentChunk
(
)
<
LowAvailableThreshold
;
}
void
trace
(
StoreBuffer
*
owner
JSTracer
*
trc
)
;
template
<
typename
T
>
void
put
(
StoreBuffer
*
owner
const
T
&
t
)
{
MOZ_ASSERT
(
storage_
)
;
(
void
)
static_cast
<
const
BufferableRef
*
>
(
&
t
)
;
AutoEnterOOMUnsafeRegion
oomUnsafe
;
unsigned
size
=
sizeof
(
T
)
;
unsigned
*
sizep
=
storage_
-
>
pod_malloc
<
unsigned
>
(
)
;
if
(
!
sizep
)
oomUnsafe
.
crash
(
"
Failed
to
allocate
for
GenericBuffer
:
:
put
.
"
)
;
*
sizep
=
size
;
T
*
tp
=
storage_
-
>
new_
<
T
>
(
t
)
;
if
(
!
tp
)
oomUnsafe
.
crash
(
"
Failed
to
allocate
for
GenericBuffer
:
:
put
.
"
)
;
if
(
isAboutToOverflow
(
)
)
owner
-
>
setAboutToOverflow
(
)
;
}
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
return
storage_
?
storage_
-
>
sizeOfIncludingThis
(
mallocSizeOf
)
:
0
;
}
bool
isEmpty
(
)
{
return
!
storage_
|
|
storage_
-
>
isEmpty
(
)
;
}
private
:
GenericBuffer
&
operator
=
(
const
GenericBuffer
&
other
)
=
delete
;
}
;
template
<
typename
Edge
>
struct
PointerEdgeHasher
{
typedef
Edge
Lookup
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
return
uintptr_t
(
l
.
edge
)
>
>
3
;
}
static
bool
match
(
const
Edge
&
k
const
Lookup
&
l
)
{
return
k
=
=
l
;
}
}
;
struct
CellPtrEdge
{
Cell
*
*
edge
;
CellPtrEdge
(
)
:
edge
(
nullptr
)
{
}
explicit
CellPtrEdge
(
Cell
*
*
v
)
:
edge
(
v
)
{
}
bool
operator
=
=
(
const
CellPtrEdge
&
other
)
const
{
return
edge
=
=
other
.
edge
;
}
bool
operator
!
=
(
const
CellPtrEdge
&
other
)
const
{
return
edge
!
=
other
.
edge
;
}
bool
maybeInRememberedSet
(
const
Nursery
&
nursery
)
const
{
MOZ_ASSERT
(
IsInsideNursery
(
*
edge
)
)
;
return
!
nursery
.
isInside
(
edge
)
;
}
void
trace
(
TenuringTracer
&
mover
)
const
;
CellPtrEdge
tagged
(
)
const
{
return
CellPtrEdge
(
(
Cell
*
*
)
(
uintptr_t
(
edge
)
|
1
)
)
;
}
CellPtrEdge
untagged
(
)
const
{
return
CellPtrEdge
(
(
Cell
*
*
)
(
uintptr_t
(
edge
)
&
~
1
)
)
;
}
bool
isTagged
(
)
const
{
return
bool
(
uintptr_t
(
edge
)
&
1
)
;
}
explicit
operator
bool
(
)
const
{
return
edge
!
=
nullptr
;
}
typedef
PointerEdgeHasher
<
CellPtrEdge
>
Hasher
;
}
;
struct
ValueEdge
{
JS
:
:
Value
*
edge
;
ValueEdge
(
)
:
edge
(
nullptr
)
{
}
explicit
ValueEdge
(
JS
:
:
Value
*
v
)
:
edge
(
v
)
{
}
bool
operator
=
=
(
const
ValueEdge
&
other
)
const
{
return
edge
=
=
other
.
edge
;
}
bool
operator
!
=
(
const
ValueEdge
&
other
)
const
{
return
edge
!
=
other
.
edge
;
}
Cell
*
deref
(
)
const
{
return
edge
-
>
isGCThing
(
)
?
static_cast
<
Cell
*
>
(
edge
-
>
toGCThing
(
)
)
:
nullptr
;
}
bool
maybeInRememberedSet
(
const
Nursery
&
nursery
)
const
{
MOZ_ASSERT
(
IsInsideNursery
(
deref
(
)
)
)
;
return
!
nursery
.
isInside
(
edge
)
;
}
void
trace
(
TenuringTracer
&
mover
)
const
;
ValueEdge
tagged
(
)
const
{
return
ValueEdge
(
(
JS
:
:
Value
*
)
(
uintptr_t
(
edge
)
|
1
)
)
;
}
ValueEdge
untagged
(
)
const
{
return
ValueEdge
(
(
JS
:
:
Value
*
)
(
uintptr_t
(
edge
)
&
~
1
)
)
;
}
bool
isTagged
(
)
const
{
return
bool
(
uintptr_t
(
edge
)
&
1
)
;
}
explicit
operator
bool
(
)
const
{
return
edge
!
=
nullptr
;
}
typedef
PointerEdgeHasher
<
ValueEdge
>
Hasher
;
}
;
struct
SlotsEdge
{
const
static
int
SlotKind
=
0
;
const
static
int
ElementKind
=
1
;
uintptr_t
objectAndKind_
;
int32_t
start_
;
int32_t
count_
;
SlotsEdge
(
)
:
objectAndKind_
(
0
)
start_
(
0
)
count_
(
0
)
{
}
SlotsEdge
(
NativeObject
*
object
int
kind
int32_t
start
int32_t
count
)
:
objectAndKind_
(
uintptr_t
(
object
)
|
kind
)
start_
(
start
)
count_
(
count
)
{
MOZ_ASSERT
(
(
uintptr_t
(
object
)
&
1
)
=
=
0
)
;
MOZ_ASSERT
(
kind
<
=
1
)
;
MOZ_ASSERT
(
start
>
=
0
)
;
MOZ_ASSERT
(
count
>
0
)
;
}
NativeObject
*
object
(
)
const
{
return
reinterpret_cast
<
NativeObject
*
>
(
objectAndKind_
&
~
1
)
;
}
int
kind
(
)
const
{
return
(
int
)
(
objectAndKind_
&
1
)
;
}
bool
operator
=
=
(
const
SlotsEdge
&
other
)
const
{
return
objectAndKind_
=
=
other
.
objectAndKind_
&
&
start_
=
=
other
.
start_
&
&
count_
=
=
other
.
count_
;
}
bool
operator
!
=
(
const
SlotsEdge
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
bool
overlaps
(
const
SlotsEdge
&
other
)
const
{
if
(
objectAndKind_
!
=
other
.
objectAndKind_
)
return
false
;
auto
end
=
start_
+
count_
+
1
;
auto
start
=
start_
-
1
;
auto
otherEnd
=
other
.
start_
+
other
.
count_
;
return
(
start
<
=
other
.
start_
&
&
other
.
start_
<
=
end
)
|
|
(
start
<
=
otherEnd
&
&
otherEnd
<
=
end
)
;
}
void
merge
(
const
SlotsEdge
&
other
)
{
MOZ_ASSERT
(
overlaps
(
other
)
)
;
auto
end
=
Max
(
start_
+
count_
other
.
start_
+
other
.
count_
)
;
start_
=
Min
(
start_
other
.
start_
)
;
count_
=
end
-
start_
;
}
bool
maybeInRememberedSet
(
const
Nursery
&
n
)
const
{
return
!
IsInsideNursery
(
reinterpret_cast
<
Cell
*
>
(
object
(
)
)
)
;
}
void
trace
(
TenuringTracer
&
mover
)
const
;
explicit
operator
bool
(
)
const
{
return
objectAndKind_
!
=
0
;
}
typedef
struct
{
typedef
SlotsEdge
Lookup
;
static
HashNumber
hash
(
const
Lookup
&
l
)
{
return
l
.
objectAndKind_
^
l
.
start_
^
l
.
count_
;
}
static
bool
match
(
const
SlotsEdge
&
k
const
Lookup
&
l
)
{
return
k
=
=
l
;
}
}
Hasher
;
}
;
template
<
typename
Buffer
typename
Edge
>
void
unput
(
Buffer
&
buffer
const
Edge
&
edge
)
{
MOZ_ASSERT
(
!
JS
:
:
shadow
:
:
Runtime
:
:
asShadowRuntime
(
runtime_
)
-
>
isHeapBusy
(
)
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
if
(
!
isEnabled
(
)
)
return
;
mozilla
:
:
ReentrancyGuard
g
(
*
this
)
;
buffer
.
unput
(
this
edge
)
;
}
template
<
typename
Buffer
typename
Edge
>
void
put
(
Buffer
&
buffer
const
Edge
&
edge
)
{
MOZ_ASSERT
(
!
JS
:
:
shadow
:
:
Runtime
:
:
asShadowRuntime
(
runtime_
)
-
>
isHeapBusy
(
)
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtime_
)
)
;
if
(
!
isEnabled
(
)
)
return
;
mozilla
:
:
ReentrancyGuard
g
(
*
this
)
;
if
(
edge
.
maybeInRememberedSet
(
nursery_
)
)
buffer
.
put
(
this
edge
)
;
}
MonoTypeBuffer
<
ValueEdge
>
bufferVal
;
MonoTypeBuffer
<
CellPtrEdge
>
bufferCell
;
MonoTypeBuffer
<
SlotsEdge
>
bufferSlot
;
ArenaCellSet
*
bufferWholeCell
;
GenericBuffer
bufferGeneric
;
bool
cancelIonCompilations_
;
JSRuntime
*
runtime_
;
const
Nursery
&
nursery_
;
bool
aboutToOverflow_
;
bool
enabled_
;
#
ifdef
DEBUG
bool
mEntered
;
#
endif
public
:
explicit
StoreBuffer
(
JSRuntime
*
rt
const
Nursery
&
nursery
)
:
bufferVal
(
)
bufferCell
(
)
bufferSlot
(
)
bufferWholeCell
(
nullptr
)
bufferGeneric
(
)
cancelIonCompilations_
(
false
)
runtime_
(
rt
)
nursery_
(
nursery
)
aboutToOverflow_
(
false
)
enabled_
(
false
)
#
ifdef
DEBUG
mEntered
(
false
)
#
endif
{
}
bool
enable
(
)
;
void
disable
(
)
;
bool
isEnabled
(
)
const
{
return
enabled_
;
}
void
clear
(
)
;
bool
isAboutToOverflow
(
)
const
{
return
aboutToOverflow_
;
}
bool
cancelIonCompilations
(
)
const
{
return
cancelIonCompilations_
;
}
void
putValue
(
JS
:
:
Value
*
vp
)
{
put
(
bufferVal
ValueEdge
(
vp
)
)
;
}
void
unputValue
(
JS
:
:
Value
*
vp
)
{
unput
(
bufferVal
ValueEdge
(
vp
)
)
;
}
void
putCell
(
Cell
*
*
cellp
)
{
put
(
bufferCell
CellPtrEdge
(
cellp
)
)
;
}
void
unputCell
(
Cell
*
*
cellp
)
{
unput
(
bufferCell
CellPtrEdge
(
cellp
)
)
;
}
void
putSlot
(
NativeObject
*
obj
int
kind
int32_t
start
int32_t
count
)
{
SlotsEdge
edge
(
obj
kind
start
count
)
;
if
(
bufferSlot
.
last_
.
overlaps
(
edge
)
)
bufferSlot
.
last_
.
merge
(
edge
)
;
else
put
(
bufferSlot
edge
)
;
}
inline
void
putWholeCell
(
Cell
*
cell
)
;
template
<
typename
T
>
void
putGeneric
(
const
T
&
t
)
{
put
(
bufferGeneric
t
)
;
}
void
setShouldCancelIonCompilations
(
)
{
cancelIonCompilations_
=
true
;
}
void
traceValues
(
TenuringTracer
&
mover
)
{
bufferVal
.
trace
(
this
mover
)
;
}
void
traceCells
(
TenuringTracer
&
mover
)
{
bufferCell
.
trace
(
this
mover
)
;
}
void
traceSlots
(
TenuringTracer
&
mover
)
{
bufferSlot
.
trace
(
this
mover
)
;
}
void
traceGenericEntries
(
JSTracer
*
trc
)
{
bufferGeneric
.
trace
(
this
trc
)
;
}
void
traceWholeCells
(
TenuringTracer
&
mover
)
;
void
traceWholeCell
(
TenuringTracer
&
mover
JS
:
:
TraceKind
kind
Cell
*
cell
)
;
void
setAboutToOverflow
(
)
;
void
addToWholeCellBuffer
(
ArenaCellSet
*
set
)
;
void
addSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
JS
:
:
GCSizes
*
sizes
)
;
}
;
class
ArenaCellSet
{
friend
class
StoreBuffer
;
Arena
*
arena
;
ArenaCellSet
*
next
;
BitArray
<
ArenaCellCount
>
bits
;
public
:
explicit
ArenaCellSet
(
Arena
*
arena
)
;
bool
hasCell
(
const
TenuredCell
*
cell
)
const
{
return
hasCell
(
getCellIndex
(
cell
)
)
;
}
void
putCell
(
const
TenuredCell
*
cell
)
{
putCell
(
getCellIndex
(
cell
)
)
;
}
bool
isEmpty
(
)
const
{
return
this
=
=
&
Empty
;
}
bool
hasCell
(
size_t
cellIndex
)
const
;
void
putCell
(
size_t
cellIndex
)
;
void
check
(
)
const
;
static
ArenaCellSet
Empty
;
static
size_t
getCellIndex
(
const
TenuredCell
*
cell
)
;
static
void
getWordIndexAndMask
(
size_t
cellIndex
size_t
*
wordp
uint32_t
*
maskp
)
;
static
const
size_t
NurseryFreeThresholdBytes
=
64
*
1024
;
static
size_t
offsetOfArena
(
)
{
return
offsetof
(
ArenaCellSet
arena
)
;
}
static
size_t
offsetOfBits
(
)
{
return
offsetof
(
ArenaCellSet
bits
)
;
}
}
;
ArenaCellSet
*
AllocateWholeCellSet
(
Arena
*
arena
)
;
}
}
#
endif
