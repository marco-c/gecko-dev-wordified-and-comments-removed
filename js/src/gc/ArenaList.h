#
ifndef
gc_ArenaList_h
#
define
gc_ArenaList_h
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
SliceBudget
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
namespace
js
{
class
FreeOp
;
class
Nursery
;
class
TenuringTracer
;
namespace
gcstats
{
struct
Statistics
;
}
namespace
gc
{
class
Arena
;
struct
FinalizePhase
;
class
FreeSpan
;
class
TenuredCell
;
struct
SortedArenaListSegment
{
Arena
*
head
;
Arena
*
*
tailp
;
void
clear
(
)
{
head
=
nullptr
;
tailp
=
&
head
;
}
bool
isEmpty
(
)
const
{
return
tailp
=
=
&
head
;
}
inline
void
append
(
Arena
*
arena
)
;
void
linkTo
(
Arena
*
arena
)
{
*
tailp
=
arena
;
}
}
;
class
ArenaList
{
Arena
*
head_
;
Arena
*
*
cursorp_
;
inline
void
copy
(
const
ArenaList
&
other
)
;
public
:
inline
ArenaList
(
)
;
inline
ArenaList
(
const
ArenaList
&
other
)
;
inline
ArenaList
&
operator
=
(
const
ArenaList
&
other
)
;
inline
explicit
ArenaList
(
const
SortedArenaListSegment
&
segment
)
;
inline
void
check
(
)
const
;
inline
void
clear
(
)
;
inline
ArenaList
copyAndClear
(
)
;
inline
bool
isEmpty
(
)
const
;
inline
Arena
*
head
(
)
const
;
inline
bool
isCursorAtHead
(
)
const
;
inline
bool
isCursorAtEnd
(
)
const
;
inline
void
moveCursorToEnd
(
)
;
inline
Arena
*
arenaAfterCursor
(
)
const
;
inline
Arena
*
takeNextArena
(
)
;
inline
void
insertAtCursor
(
Arena
*
a
)
;
inline
void
insertBeforeCursor
(
Arena
*
a
)
;
inline
ArenaList
&
insertListWithCursorAtEnd
(
const
ArenaList
&
other
)
;
Arena
*
removeRemainingArenas
(
Arena
*
*
arenap
)
;
Arena
*
*
pickArenasToRelocate
(
size_t
&
arenaTotalOut
size_t
&
relocTotalOut
)
;
Arena
*
relocateArenas
(
Arena
*
toRelocate
Arena
*
relocated
js
:
:
SliceBudget
&
sliceBudget
gcstats
:
:
Statistics
&
stats
)
;
}
;
class
SortedArenaList
{
public
:
static
const
size_t
MinThingSize
=
16
;
static_assert
(
ArenaSize
<
=
4096
"
When
increasing
the
Arena
size
please
consider
how
"
\
"
this
will
affect
the
size
of
a
SortedArenaList
.
"
)
;
static_assert
(
MinThingSize
>
=
16
"
When
decreasing
the
minimum
thing
size
please
consider
"
\
"
how
this
will
affect
the
size
of
a
SortedArenaList
.
"
)
;
private
:
static
const
size_t
MaxThingsPerArena
=
(
ArenaSize
-
ArenaHeaderSize
)
/
MinThingSize
;
size_t
thingsPerArena_
;
SortedArenaListSegment
segments
[
MaxThingsPerArena
+
1
]
;
Arena
*
headAt
(
size_t
n
)
{
return
segments
[
n
]
.
head
;
}
Arena
*
*
tailAt
(
size_t
n
)
{
return
segments
[
n
]
.
tailp
;
}
public
:
inline
explicit
SortedArenaList
(
size_t
thingsPerArena
=
MaxThingsPerArena
)
;
inline
void
setThingsPerArena
(
size_t
thingsPerArena
)
;
inline
void
reset
(
size_t
thingsPerArena
=
MaxThingsPerArena
)
;
inline
void
insertAt
(
Arena
*
arena
size_t
nfree
)
;
inline
void
extractEmpty
(
Arena
*
*
empty
)
;
inline
ArenaList
toArenaList
(
)
;
}
;
enum
class
ShouldCheckThresholds
{
DontCheckThresholds
=
0
CheckThresholds
=
1
}
;
class
ArenaLists
{
JSRuntime
*
const
runtime_
;
ZoneData
<
AllAllocKindArray
<
FreeSpan
*
>
>
freeLists_
;
AllAllocKindArray
<
FreeSpan
*
>
&
freeLists
(
)
{
return
freeLists_
.
ref
(
)
;
}
const
AllAllocKindArray
<
FreeSpan
*
>
&
freeLists
(
)
const
{
return
freeLists_
.
ref
(
)
;
}
FreeSpan
*
freeList
(
AllocKind
i
)
const
{
return
freeLists
(
)
[
i
]
;
}
inline
void
setFreeList
(
AllocKind
i
FreeSpan
*
span
)
;
inline
void
clearFreeList
(
AllocKind
i
)
;
static
FreeSpan
placeholder
;
ZoneOrGCTaskData
<
AllAllocKindArray
<
ArenaList
>
>
arenaLists_
;
ArenaList
&
arenaLists
(
AllocKind
i
)
{
return
arenaLists_
.
ref
(
)
[
i
]
;
}
const
ArenaList
&
arenaLists
(
AllocKind
i
)
const
{
return
arenaLists_
.
ref
(
)
[
i
]
;
}
enum
BackgroundFinalizeStateEnum
{
BFS_DONE
BFS_RUN
}
;
typedef
mozilla
:
:
Atomic
<
BackgroundFinalizeStateEnum
mozilla
:
:
SequentiallyConsistent
>
BackgroundFinalizeState
;
UnprotectedData
<
AllAllocKindArray
<
BackgroundFinalizeState
>
>
backgroundFinalizeState_
;
BackgroundFinalizeState
&
backgroundFinalizeState
(
AllocKind
i
)
{
return
backgroundFinalizeState_
.
ref
(
)
[
i
]
;
}
const
BackgroundFinalizeState
&
backgroundFinalizeState
(
AllocKind
i
)
const
{
return
backgroundFinalizeState_
.
ref
(
)
[
i
]
;
}
ActiveThreadOrGCTaskData
<
AllAllocKindArray
<
Arena
*
>
>
arenaListsToSweep_
;
Arena
*
&
arenaListsToSweep
(
AllocKind
i
)
{
return
arenaListsToSweep_
.
ref
(
)
[
i
]
;
}
Arena
*
arenaListsToSweep
(
AllocKind
i
)
const
{
return
arenaListsToSweep_
.
ref
(
)
[
i
]
;
}
ZoneOrGCTaskData
<
AllocKind
>
incrementalSweptArenaKind
;
ZoneOrGCTaskData
<
ArenaList
>
incrementalSweptArenas
;
ZoneData
<
Arena
*
>
gcShapeArenasToUpdate
;
ZoneData
<
Arena
*
>
gcAccessorShapeArenasToUpdate
;
ZoneData
<
Arena
*
>
gcScriptArenasToUpdate
;
ZoneData
<
Arena
*
>
gcObjectGroupArenasToUpdate
;
ZoneData
<
Arena
*
>
savedEmptyArenas
;
public
:
explicit
ArenaLists
(
JSRuntime
*
rt
JS
:
:
Zone
*
zone
)
;
~
ArenaLists
(
)
;
const
void
*
addressOfFreeList
(
AllocKind
thingKind
)
const
{
return
reinterpret_cast
<
const
void
*
>
(
&
freeLists_
.
refNoCheck
(
)
[
thingKind
]
)
;
}
inline
Arena
*
getFirstArena
(
AllocKind
thingKind
)
const
;
inline
Arena
*
getFirstArenaToSweep
(
AllocKind
thingKind
)
const
;
inline
Arena
*
getFirstSweptArena
(
AllocKind
thingKind
)
const
;
inline
Arena
*
getArenaAfterCursor
(
AllocKind
thingKind
)
const
;
inline
bool
arenaListsAreEmpty
(
)
const
;
inline
void
unmarkAll
(
)
;
inline
bool
doneBackgroundFinalize
(
AllocKind
kind
)
const
;
inline
bool
needBackgroundFinalizeWait
(
AllocKind
kind
)
const
;
inline
void
clearFreeLists
(
)
;
inline
void
unmarkPreMarkedFreeCells
(
)
;
inline
bool
arenaIsInUse
(
Arena
*
arena
AllocKind
kind
)
const
;
MOZ_ALWAYS_INLINE
TenuredCell
*
allocateFromFreeList
(
AllocKind
thingKind
size_t
thingSize
)
;
void
adoptArenas
(
JSRuntime
*
runtime
ArenaLists
*
fromArenaLists
bool
targetZoneIsCollecting
)
;
bool
containsArena
(
JSRuntime
*
runtime
Arena
*
arena
)
;
inline
void
checkEmptyFreeLists
(
)
;
inline
bool
checkEmptyArenaLists
(
)
;
inline
void
checkEmptyFreeList
(
AllocKind
kind
)
;
bool
checkEmptyArenaList
(
AllocKind
kind
)
;
bool
relocateArenas
(
JS
:
:
Zone
*
zone
Arena
*
&
relocatedListOut
JS
:
:
gcreason
:
:
Reason
reason
js
:
:
SliceBudget
&
sliceBudget
gcstats
:
:
Statistics
&
stats
)
;
void
queueForegroundObjectsForSweep
(
FreeOp
*
fop
)
;
void
queueForegroundThingsForSweep
(
)
;
void
releaseForegroundSweptEmptyArenas
(
)
;
bool
foregroundFinalize
(
FreeOp
*
fop
AllocKind
thingKind
js
:
:
SliceBudget
&
sliceBudget
SortedArenaList
&
sweepList
)
;
static
void
backgroundFinalize
(
FreeOp
*
fop
Arena
*
listHead
Arena
*
*
empty
)
;
enum
KeepArenasEnum
{
RELEASE_ARENAS
KEEP_ARENAS
}
;
private
:
inline
void
queueForForegroundSweep
(
FreeOp
*
fop
const
FinalizePhase
&
phase
)
;
inline
void
queueForBackgroundSweep
(
FreeOp
*
fop
const
FinalizePhase
&
phase
)
;
inline
void
queueForForegroundSweep
(
AllocKind
thingKind
)
;
inline
void
queueForBackgroundSweep
(
AllocKind
thingKind
)
;
TenuredCell
*
allocateFromArena
(
JS
:
:
Zone
*
zone
AllocKind
thingKind
ShouldCheckThresholds
checkThresholds
)
;
inline
TenuredCell
*
allocateFromArenaInner
(
JS
:
:
Zone
*
zone
Arena
*
arena
AllocKind
kind
)
;
friend
class
GCRuntime
;
friend
class
js
:
:
Nursery
;
friend
class
js
:
:
TenuringTracer
;
}
;
}
}
#
endif
