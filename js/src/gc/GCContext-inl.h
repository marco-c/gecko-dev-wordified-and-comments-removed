#
ifndef
gc_GCContext_inl_h
#
define
gc_GCContext_inl_h
#
include
"
gc
/
GCContext
.
h
"
#
include
"
gc
/
ZoneAllocator
.
h
"
inline
void
JS
:
:
GCContext
:
:
free_
(
Cell
*
cell
void
*
p
size_t
nbytes
MemoryUse
use
)
{
if
(
p
)
{
removeCellMemory
(
cell
nbytes
use
)
;
js_free
(
p
)
;
}
}
template
<
class
T
>
inline
void
JS
:
:
GCContext
:
:
release
(
Cell
*
cell
T
*
p
size_t
nbytes
MemoryUse
use
)
{
if
(
p
)
{
removeCellMemory
(
cell
nbytes
use
)
;
p
-
>
Release
(
)
;
}
}
inline
void
JS
:
:
GCContext
:
:
removeCellMemory
(
Cell
*
cell
size_t
nbytes
MemoryUse
use
)
{
if
(
nbytes
&
&
cell
-
>
isTenured
(
)
)
{
auto
zone
=
js
:
:
ZoneAllocator
:
:
from
(
cell
-
>
asTenured
(
)
.
zoneFromAnyThread
(
)
)
;
zone
-
>
removeCellMemory
(
cell
nbytes
use
isFinalizing
(
)
)
;
}
}
#
endif
