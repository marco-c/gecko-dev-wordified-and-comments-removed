#
ifndef
gc_WeakMap_inl_h
#
define
gc_WeakMap_inl_h
#
include
"
gc
/
WeakMap
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
<
algorithm
>
#
include
<
type_traits
>
#
include
"
gc
/
Marking
.
h
"
#
include
"
gc
/
Zone
.
h
"
#
include
"
js
/
TraceKind
.
h
"
#
include
"
vm
/
JSContext
.
h
"
namespace
js
{
namespace
gc
{
namespace
detail
{
template
<
typename
T
>
static
CellColor
GetEffectiveColor
(
GCMarker
*
marker
const
T
&
item
)
{
Cell
*
cell
=
ToMarkable
(
item
)
;
if
(
!
cell
-
>
isTenured
(
)
)
{
return
CellColor
:
:
Black
;
}
const
TenuredCell
&
t
=
cell
-
>
asTenured
(
)
;
if
(
!
t
.
zoneFromAnyThread
(
)
-
>
shouldMarkInZone
(
marker
-
>
markColor
(
)
)
)
{
return
CellColor
:
:
Black
;
}
MOZ_ASSERT
(
t
.
runtimeFromAnyThread
(
)
=
=
marker
-
>
runtime
(
)
)
;
return
t
.
color
(
)
;
}
static
MOZ_MAYBE_UNUSED
JSObject
*
GetDelegateInternal
(
gc
:
:
Cell
*
key
)
{
return
nullptr
;
}
static
MOZ_MAYBE_UNUSED
JSObject
*
GetDelegateInternal
(
JSObject
*
key
)
{
JSObject
*
delegate
=
UncheckedUnwrapWithoutExpose
(
key
)
;
return
(
key
=
=
delegate
)
?
nullptr
:
delegate
;
}
template
<
typename
T
>
static
inline
JSObject
*
GetDelegate
(
const
T
&
key
)
{
return
GetDelegateInternal
(
key
)
;
}
template
<
>
inline
JSObject
*
GetDelegate
(
gc
:
:
Cell
*
const
&
)
=
delete
;
}
}
template
<
class
K
class
V
>
void
WeakMap
<
K
V
>
:
:
assertMapIsSameZoneWithValue
(
const
V
&
v
)
{
#
ifdef
DEBUG
gc
:
:
Cell
*
cell
=
gc
:
:
ToMarkable
(
v
)
;
if
(
cell
)
{
Zone
*
cellZone
=
cell
-
>
zoneFromAnyThread
(
)
;
MOZ_ASSERT
(
zone
(
)
=
=
cellZone
|
|
cellZone
-
>
isAtomsZone
(
)
)
;
}
#
endif
}
template
<
class
K
class
V
>
WeakMap
<
K
V
>
:
:
WeakMap
(
JSContext
*
cx
JSObject
*
memOf
)
:
WeakMap
(
cx
-
>
zone
(
)
memOf
)
{
}
template
<
class
K
class
V
>
WeakMap
<
K
V
>
:
:
WeakMap
(
JS
:
:
Zone
*
zone
JSObject
*
memOf
)
:
Base
(
zone
)
WeakMapBase
(
memOf
zone
)
{
using
ElemType
=
typename
K
:
:
ElementType
;
using
NonPtrType
=
std
:
:
remove_pointer_t
<
ElemType
>
;
static_assert
(
JS
:
:
IsCCTraceKind
(
NonPtrType
:
:
TraceKind
)
"
Object
'
s
TraceKind
should
be
added
to
CC
graph
.
"
)
;
zone
-
>
gcWeakMapList
(
)
.
insertFront
(
this
)
;
if
(
zone
-
>
gcState
(
)
>
Zone
:
:
Prepare
)
{
mapColor
=
CellColor
:
:
Black
;
}
}
template
<
class
K
class
V
>
bool
WeakMap
<
K
V
>
:
:
markEntry
(
GCMarker
*
marker
K
&
key
V
&
value
bool
populateWeakKeysTable
)
{
MOZ_ASSERT
(
mapColor
)
;
bool
marked
=
false
;
CellColor
markColor
=
marker
-
>
markColor
(
)
;
CellColor
keyColor
=
gc
:
:
detail
:
:
GetEffectiveColor
(
marker
key
)
;
JSObject
*
delegate
=
gc
:
:
detail
:
:
GetDelegate
(
key
)
;
if
(
delegate
)
{
CellColor
delegateColor
=
gc
:
:
detail
:
:
GetEffectiveColor
(
marker
delegate
)
;
CellColor
proxyPreserveColor
=
std
:
:
min
(
delegateColor
mapColor
)
;
if
(
keyColor
<
proxyPreserveColor
)
{
MOZ_ASSERT
(
markColor
>
=
proxyPreserveColor
)
;
if
(
markColor
=
=
proxyPreserveColor
)
{
TraceWeakMapKeyEdge
(
marker
zone
(
)
&
key
"
proxy
-
preserved
WeakMap
entry
key
"
)
;
MOZ_ASSERT
(
key
-
>
color
(
)
>
=
proxyPreserveColor
)
;
marked
=
true
;
keyColor
=
proxyPreserveColor
;
}
}
}
gc
:
:
Cell
*
cellValue
=
gc
:
:
ToMarkable
(
value
)
;
if
(
keyColor
)
{
if
(
cellValue
)
{
CellColor
targetColor
=
std
:
:
min
(
mapColor
keyColor
)
;
CellColor
valueColor
=
gc
:
:
detail
:
:
GetEffectiveColor
(
marker
cellValue
)
;
if
(
valueColor
<
targetColor
)
{
MOZ_ASSERT
(
markColor
>
=
targetColor
)
;
if
(
markColor
=
=
targetColor
)
{
TraceEdge
(
marker
&
value
"
WeakMap
entry
value
"
)
;
MOZ_ASSERT
(
cellValue
-
>
color
(
)
>
=
targetColor
)
;
marked
=
true
;
}
}
}
}
if
(
populateWeakKeysTable
)
{
if
(
keyColor
<
mapColor
)
{
MOZ_ASSERT
(
marker
-
>
weakMapAction
(
)
=
=
JS
:
:
WeakMapTraceAction
:
:
Expand
)
;
gc
:
:
TenuredCell
*
tenuredValue
=
nullptr
;
if
(
cellValue
&
&
cellValue
-
>
isTenured
(
)
)
{
tenuredValue
=
&
cellValue
-
>
asTenured
(
)
;
}
if
(
!
this
-
>
addImplicitEdges
(
key
delegate
tenuredValue
)
)
{
marker
-
>
abortLinearWeakMarking
(
)
;
}
}
}
return
marked
;
}
template
<
class
K
class
V
>
void
WeakMap
<
K
V
>
:
:
trace
(
JSTracer
*
trc
)
{
MOZ_ASSERT
(
isInList
(
)
)
;
TraceNullableEdge
(
trc
&
memberOf
"
WeakMap
owner
"
)
;
if
(
trc
-
>
isMarkingTracer
(
)
)
{
MOZ_ASSERT
(
trc
-
>
weakMapAction
(
)
=
=
JS
:
:
WeakMapTraceAction
:
:
Expand
)
;
auto
marker
=
GCMarker
:
:
fromTracer
(
trc
)
;
if
(
mapColor
<
marker
-
>
markColor
(
)
)
{
mapColor
=
marker
-
>
markColor
(
)
;
(
void
)
markEntries
(
marker
)
;
}
return
;
}
if
(
trc
-
>
weakMapAction
(
)
=
=
JS
:
:
WeakMapTraceAction
:
:
Skip
)
{
return
;
}
if
(
trc
-
>
weakMapAction
(
)
=
=
JS
:
:
WeakMapTraceAction
:
:
TraceKeysAndValues
)
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
TraceWeakMapKeyEdge
(
trc
zone
(
)
&
e
.
front
(
)
.
mutableKey
(
)
"
WeakMap
entry
key
"
)
;
}
}
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
TraceEdge
(
trc
&
r
.
front
(
)
.
value
(
)
"
WeakMap
entry
value
"
)
;
}
}
bool
WeakMapBase
:
:
addImplicitEdges
(
gc
:
:
Cell
*
key
gc
:
:
Cell
*
delegate
gc
:
:
TenuredCell
*
value
)
{
if
(
delegate
)
{
auto
&
edgeTable
=
delegate
-
>
zone
(
)
-
>
gcEphemeronEdges
(
delegate
)
;
auto
*
p
=
edgeTable
.
get
(
delegate
)
;
gc
:
:
EphemeronEdgeVector
newVector
;
gc
:
:
EphemeronEdgeVector
&
edges
=
p
?
p
-
>
value
:
newVector
;
gc
:
:
EphemeronEdge
keyEdge
{
mapColor
key
}
;
if
(
!
edges
.
append
(
keyEdge
)
)
{
return
false
;
}
if
(
value
)
{
gc
:
:
EphemeronEdge
valueEdge
{
mapColor
value
}
;
if
(
!
edges
.
append
(
valueEdge
)
)
{
return
false
;
}
}
if
(
!
p
)
{
return
edgeTable
.
put
(
delegate
std
:
:
move
(
newVector
)
)
;
}
return
true
;
}
if
(
!
value
)
{
return
true
;
}
auto
&
edgeTable
=
key
-
>
zone
(
)
-
>
gcEphemeronEdges
(
key
)
;
auto
*
p
=
edgeTable
.
get
(
key
)
;
gc
:
:
EphemeronEdge
valueEdge
{
mapColor
value
}
;
if
(
p
)
{
return
p
-
>
value
.
append
(
valueEdge
)
;
}
else
{
gc
:
:
EphemeronEdgeVector
edges
;
MOZ_ALWAYS_TRUE
(
edges
.
append
(
valueEdge
)
)
;
return
edgeTable
.
put
(
key
std
:
:
move
(
edges
)
)
;
}
}
template
<
class
K
class
V
>
bool
WeakMap
<
K
V
>
:
:
markEntries
(
GCMarker
*
marker
)
{
MOZ_ASSERT
(
mapColor
)
;
bool
markedAny
=
false
;
bool
populateWeakKeysTable
=
marker
-
>
incrementalWeakMapMarkingEnabled
|
|
marker
-
>
isWeakMarking
(
)
;
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
if
(
markEntry
(
marker
e
.
front
(
)
.
mutableKey
(
)
e
.
front
(
)
.
value
(
)
populateWeakKeysTable
)
)
{
markedAny
=
true
;
}
}
return
markedAny
;
}
template
<
class
K
class
V
>
void
WeakMap
<
K
V
>
:
:
traceWeakEdges
(
JSTracer
*
trc
)
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
if
(
!
TraceWeakEdge
(
trc
&
e
.
front
(
)
.
mutableKey
(
)
"
WeakMap
key
"
)
)
{
e
.
removeFront
(
)
;
}
}
#
if
DEBUG
assertEntriesNotAboutToBeFinalized
(
)
;
#
endif
}
template
<
class
K
class
V
>
void
WeakMap
<
K
V
>
:
:
traceMappings
(
WeakMapTracer
*
tracer
)
{
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
gc
:
:
Cell
*
key
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
key
(
)
)
;
gc
:
:
Cell
*
value
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
value
(
)
)
;
if
(
key
&
&
value
)
{
tracer
-
>
trace
(
memberOf
JS
:
:
GCCellPtr
(
r
.
front
(
)
.
key
(
)
.
get
(
)
)
JS
:
:
GCCellPtr
(
r
.
front
(
)
.
value
(
)
.
get
(
)
)
)
;
}
}
}
template
<
class
K
class
V
>
bool
WeakMap
<
K
V
>
:
:
findSweepGroupEdges
(
)
{
JS
:
:
AutoSuppressGCAnalysis
nogc
;
for
(
Range
r
=
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
const
K
&
key
=
r
.
front
(
)
.
key
(
)
;
JSObject
*
delegate
=
gc
:
:
detail
:
:
GetDelegate
(
key
)
;
if
(
!
delegate
)
{
continue
;
}
Zone
*
delegateZone
=
delegate
-
>
zone
(
)
;
Zone
*
keyZone
=
key
-
>
zone
(
)
;
if
(
delegateZone
!
=
keyZone
&
&
delegateZone
-
>
isGCMarking
(
)
&
&
keyZone
-
>
isGCMarking
(
)
)
{
if
(
!
delegateZone
-
>
addSweepGroupEdgeTo
(
keyZone
)
)
{
return
false
;
}
}
}
return
true
;
}
template
<
class
K
class
V
>
size_t
WeakMap
<
K
V
>
:
:
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
return
mallocSizeOf
(
this
)
+
shallowSizeOfExcludingThis
(
mallocSizeOf
)
;
}
#
if
DEBUG
template
<
class
K
class
V
>
void
WeakMap
<
K
V
>
:
:
assertEntriesNotAboutToBeFinalized
(
)
{
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
UnbarrieredKey
k
=
r
.
front
(
)
.
key
(
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalizedUnbarriered
(
k
)
)
;
JSObject
*
delegate
=
gc
:
:
detail
:
:
GetDelegate
(
k
)
;
if
(
delegate
)
{
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalizedUnbarriered
(
delegate
)
"
weakmap
marking
depends
on
a
key
tracing
its
delegate
"
)
;
}
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
r
.
front
(
)
.
value
(
)
)
)
;
}
}
#
endif
#
ifdef
JS_GC_ZEAL
template
<
class
K
class
V
>
bool
WeakMap
<
K
V
>
:
:
checkMarking
(
)
const
{
bool
ok
=
true
;
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
gc
:
:
Cell
*
key
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
key
(
)
)
;
gc
:
:
Cell
*
value
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
value
(
)
)
;
if
(
key
&
&
value
)
{
if
(
!
gc
:
:
CheckWeakMapEntryMarking
(
this
key
value
)
)
{
ok
=
false
;
}
}
}
return
ok
;
}
#
endif
}
#
endif
