#
ifndef
gc_FinalizationObservers_h
#
define
gc_FinalizationObservers_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
WeakMap
.
h
"
#
include
"
gc
/
ZoneAllocator
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
GCVector
.
h
"
namespace
js
{
class
FinalizationRegistryObject
;
class
FinalizationRecordObject
;
class
WeakRefObject
;
namespace
gc
{
class
FinalizationObservers
{
Zone
*
const
zone
;
using
RegistrySet
=
GCHashSet
<
HeapPtr
<
JSObject
*
>
StableCellHasher
<
HeapPtr
<
JSObject
*
>
>
ZoneAllocPolicy
>
;
RegistrySet
registries
;
using
RecordVector
=
GCVector
<
HeapPtr
<
JSObject
*
>
1
ZoneAllocPolicy
>
;
using
RecordMap
=
GCHashMap
<
HeapPtr
<
JSObject
*
>
RecordVector
StableCellHasher
<
HeapPtr
<
JSObject
*
>
>
ZoneAllocPolicy
>
;
RecordMap
recordMap
;
using
WrapperWeakSet
=
ObjectValueWeakMap
;
WrapperWeakSet
crossZoneRecords
;
using
WeakRefHeapPtrVector
=
GCVector
<
js
:
:
HeapPtr
<
JSObject
*
>
1
js
:
:
ZoneAllocPolicy
>
;
using
WeakRefMap
=
GCHashMap
<
HeapPtr
<
JSObject
*
>
WeakRefHeapPtrVector
StableCellHasher
<
HeapPtr
<
JSObject
*
>
>
ZoneAllocPolicy
>
;
WeakRefMap
weakRefMap
;
WrapperWeakSet
crossZoneWeakRefs
;
public
:
explicit
FinalizationObservers
(
Zone
*
zone
)
;
~
FinalizationObservers
(
)
;
bool
addRegistry
(
Handle
<
FinalizationRegistryObject
*
>
registry
)
;
bool
addRecord
(
HandleObject
target
HandleObject
record
)
;
void
clearRecords
(
)
;
void
updateForRemovedRecord
(
JSObject
*
wrapper
FinalizationRecordObject
*
record
)
;
bool
addWeakRefTarget
(
Handle
<
JSObject
*
>
target
Handle
<
JSObject
*
>
weakRef
)
;
void
removeWeakRefTarget
(
Handle
<
JSObject
*
>
target
Handle
<
WeakRefObject
*
>
weakRef
)
;
void
unregisterWeakRefWrapper
(
JSObject
*
wrapper
WeakRefObject
*
weakRef
)
;
void
traceRoots
(
JSTracer
*
trc
)
;
void
traceWeakEdges
(
JSTracer
*
trc
)
;
#
ifdef
DEBUG
void
checkTables
(
)
const
;
#
endif
private
:
bool
addCrossZoneWrapper
(
WrapperWeakSet
&
weakSet
JSObject
*
wrapper
)
;
void
removeCrossZoneWrapper
(
WrapperWeakSet
&
weakSet
JSObject
*
wrapper
)
;
void
updateForRemovedWeakRef
(
JSObject
*
wrapper
WeakRefObject
*
weakRef
)
;
void
traceWeakFinalizationRegistryEdges
(
JSTracer
*
trc
)
;
void
traceWeakWeakRefEdges
(
JSTracer
*
trc
)
;
void
traceWeakWeakRefVector
(
JSTracer
*
trc
WeakRefHeapPtrVector
&
weakRefs
JSObject
*
target
)
;
static
bool
shouldRemoveRecord
(
FinalizationRecordObject
*
record
)
;
}
;
class
FinalizationRegistryGlobalData
{
using
RecordSet
=
GCHashSet
<
HeapPtr
<
JSObject
*
>
StableCellHasher
<
HeapPtr
<
JSObject
*
>
>
ZoneAllocPolicy
>
;
RecordSet
recordSet
;
public
:
explicit
FinalizationRegistryGlobalData
(
Zone
*
zone
)
;
bool
addRecord
(
FinalizationRecordObject
*
record
)
;
void
removeRecord
(
FinalizationRecordObject
*
record
)
;
void
trace
(
JSTracer
*
trc
)
;
}
;
}
}
#
endif
