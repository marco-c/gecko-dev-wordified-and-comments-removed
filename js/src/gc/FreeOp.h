#
ifndef
gc_FreeOp_h
#
define
gc_FreeOp_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
jit
/
ExecutableAllocator
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Utility
.
h
"
#
include
"
js
/
Vector
.
h
"
struct
JSRuntime
;
namespace
js
{
class
FreeOp
:
public
JSFreeOp
{
Vector
<
void
*
0
SystemAllocPolicy
>
freeLaterList
;
jit
:
:
JitPoisonRangeVector
jitPoisonRanges
;
public
:
static
FreeOp
*
get
(
JSFreeOp
*
fop
)
{
return
static_cast
<
FreeOp
*
>
(
fop
)
;
}
explicit
FreeOp
(
JSRuntime
*
maybeRuntime
)
;
~
FreeOp
(
)
;
bool
onActiveCooperatingThread
(
)
const
{
return
runtime_
!
=
nullptr
;
}
bool
maybeOnHelperThread
(
)
const
{
return
!
runtime_
;
}
bool
isDefaultFreeOp
(
)
const
;
void
free_
(
void
*
p
)
{
js_free
(
p
)
;
}
void
freeLater
(
void
*
p
)
{
MOZ_ASSERT
(
!
isDefaultFreeOp
(
)
)
;
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
freeLaterList
.
append
(
p
)
)
oomUnsafe
.
crash
(
"
FreeOp
:
:
freeLater
"
)
;
}
bool
appendJitPoisonRange
(
const
jit
:
:
JitPoisonRange
&
range
)
{
MOZ_ASSERT
(
!
isDefaultFreeOp
(
)
)
;
return
jitPoisonRanges
.
append
(
range
)
;
}
template
<
class
T
>
void
delete_
(
T
*
p
)
{
if
(
p
)
{
p
-
>
~
T
(
)
;
free_
(
p
)
;
}
}
}
;
}
#
endif
