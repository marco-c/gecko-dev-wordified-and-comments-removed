#
ifndef
gc_Memory_h
#
define
gc_Memory_h
#
include
<
stddef
.
h
>
namespace
js
{
namespace
gc
{
void
InitMemorySubsystem
(
)
;
size_t
SystemPageSize
(
)
;
size_t
SystemAddressBits
(
)
;
size_t
VirtualMemoryLimit
(
)
;
bool
UsingScattershotAllocator
(
)
;
enum
class
StallAndRetry
:
bool
{
No
=
false
Yes
=
true
}
;
void
*
MapAlignedPages
(
size_t
length
size_t
alignment
StallAndRetry
stallAndRetry
=
StallAndRetry
:
:
No
)
;
void
UnmapPages
(
void
*
region
size_t
length
)
;
bool
DecommitEnabled
(
)
;
bool
MarkPagesUnusedSoft
(
void
*
region
size_t
length
)
;
bool
MarkPagesUnusedHard
(
void
*
region
size_t
length
)
;
void
MarkPagesInUseSoft
(
void
*
region
size_t
length
)
;
[
[
nodiscard
]
]
bool
MarkPagesInUseHard
(
void
*
region
size_t
length
)
;
size_t
GetPageFaultCount
(
)
;
void
*
AllocateMappedContent
(
int
fd
size_t
offset
size_t
length
size_t
alignment
)
;
void
DeallocateMappedContent
(
void
*
region
size_t
length
)
;
void
*
TestMapAlignedPagesLastDitch
(
size_t
length
size_t
alignment
)
;
void
ProtectPages
(
void
*
region
size_t
length
)
;
void
MakePagesReadOnly
(
void
*
region
size_t
length
)
;
void
UnprotectPages
(
void
*
region
size_t
length
)
;
}
}
#
endif
