#
ifndef
gc_BufferAllocator_h
#
define
gc_BufferAllocator_h
#
include
<
cstdint
>
#
include
<
stddef
.
h
>
#
include
<
utility
>
#
include
"
jstypes
.
h
"
#
include
"
ds
/
SlimLinkedList
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
class
JS_PUBLIC_API
JSTracer
;
namespace
JS
{
class
JS_PUBLIC_API
Zone
;
}
namespace
js
{
class
GCMarker
;
class
Nursery
;
namespace
gc
{
enum
class
AllocKind
:
uint8_t
;
struct
Cell
;
class
BufferAllocator
:
public
SlimLinkedListElement
<
BufferAllocator
>
{
public
:
static
constexpr
size_t
MinMediumAllocShift
=
8
;
static
constexpr
size_t
MaxMediumAllocShift
=
19
;
static
constexpr
size_t
MediumAllocClasses
=
MaxMediumAllocShift
-
MinMediumAllocShift
+
1
;
private
:
MainThreadOrGCTaskData
<
JS
:
:
Zone
*
>
zone
;
public
:
explicit
BufferAllocator
(
JS
:
:
Zone
*
zone
)
;
static
size_t
GetGoodAllocSize
(
size_t
requiredBytes
)
;
static
size_t
GetGoodElementCount
(
size_t
requiredElements
size_t
elementSize
)
;
static
size_t
GetGoodPower2AllocSize
(
size_t
requiredBytes
)
;
static
size_t
GetGoodPower2ElementCount
(
size_t
requiredElements
size_t
elementSize
)
;
static
bool
IsBufferAlloc
(
void
*
alloc
)
;
static
size_t
GetAllocSize
(
void
*
alloc
)
;
static
JS
:
:
Zone
*
GetAllocZone
(
void
*
alloc
)
;
static
bool
IsNurseryOwned
(
void
*
alloc
)
;
static
bool
IsMarkedBlack
(
void
*
alloc
)
;
static
void
TraceEdge
(
JSTracer
*
trc
Cell
*
owner
void
*
buffer
const
char
*
name
)
;
void
*
alloc
(
size_t
bytes
bool
nurseryOwned
)
;
void
*
allocInGC
(
size_t
bytes
bool
nurseryOwned
)
;
void
*
realloc
(
void
*
ptr
size_t
bytes
bool
nurseryOwned
)
;
void
free
(
void
*
ptr
)
;
private
:
static
bool
MarkTenuredAlloc
(
void
*
alloc
)
;
friend
class
js
:
:
GCMarker
;
void
markNurseryOwned
(
void
*
alloc
bool
ownerWasTenured
)
;
friend
class
js
:
:
Nursery
;
static
bool
IsSmallAllocSize
(
size_t
bytes
)
;
static
bool
IsSmallAlloc
(
void
*
alloc
)
;
void
*
allocSmall
(
size_t
bytes
bool
nurseryOwned
)
;
void
*
allocSmallInGC
(
size_t
bytes
bool
nurseryOwned
)
;
static
AllocKind
AllocKindForSmallAlloc
(
size_t
bytes
)
;
}
;
}
}
#
endif
