#
ifndef
gc_GCLock_h
#
define
gc_GCLock_h
#
include
"
vm
/
Runtime
.
h
"
namespace
js
{
class
AutoUnlockGC
;
class
MOZ_RAII
AutoLockGC
{
public
:
explicit
AutoLockGC
(
gc
:
:
GCRuntime
*
gc
)
:
gc
(
gc
)
{
lock
(
)
;
}
explicit
AutoLockGC
(
JSRuntime
*
rt
)
:
AutoLockGC
(
&
rt
-
>
gc
)
{
}
~
AutoLockGC
(
)
{
lockGuard_
.
reset
(
)
;
}
js
:
:
LockGuard
<
js
:
:
Mutex
>
&
guard
(
)
{
return
lockGuard_
.
ref
(
)
;
}
protected
:
void
lock
(
)
{
MOZ_ASSERT
(
lockGuard_
.
isNothing
(
)
)
;
lockGuard_
.
emplace
(
gc
-
>
lock
)
;
}
void
unlock
(
)
{
MOZ_ASSERT
(
lockGuard_
.
isSome
(
)
)
;
lockGuard_
.
reset
(
)
;
}
gc
:
:
GCRuntime
*
const
gc
;
private
:
mozilla
:
:
Maybe
<
js
:
:
LockGuard
<
js
:
:
Mutex
>
>
lockGuard_
;
AutoLockGC
(
const
AutoLockGC
&
)
=
delete
;
AutoLockGC
&
operator
=
(
const
AutoLockGC
&
)
=
delete
;
friend
class
AutoUnlockGC
;
}
;
class
MOZ_RAII
AutoLockGCBgAlloc
:
public
AutoLockGC
{
public
:
explicit
AutoLockGCBgAlloc
(
gc
:
:
GCRuntime
*
gc
)
:
AutoLockGC
(
gc
)
{
}
explicit
AutoLockGCBgAlloc
(
JSRuntime
*
rt
)
:
AutoLockGCBgAlloc
(
&
rt
-
>
gc
)
{
}
~
AutoLockGCBgAlloc
(
)
{
unlock
(
)
;
if
(
startBgAlloc
)
{
gc
-
>
startBackgroundAllocTaskIfIdle
(
)
;
}
}
void
tryToStartBackgroundAllocation
(
)
{
startBgAlloc
=
true
;
}
private
:
bool
startBgAlloc
=
false
;
}
;
class
MOZ_RAII
AutoUnlockGC
{
public
:
explicit
AutoUnlockGC
(
AutoLockGC
&
lock
)
:
lock
(
lock
)
{
lock
.
unlock
(
)
;
}
~
AutoUnlockGC
(
)
{
lock
.
lock
(
)
;
}
private
:
AutoLockGC
&
lock
;
AutoUnlockGC
(
const
AutoUnlockGC
&
)
=
delete
;
AutoUnlockGC
&
operator
=
(
const
AutoUnlockGC
&
)
=
delete
;
}
;
}
#
endif
