#
ifndef
gc_MallocedBlockCache_h
#
define
gc_MallocedBlockCache_h
#
include
"
ds
/
PointerAndUint7
.
h
"
#
include
"
js
/
AllocPolicy
.
h
"
#
include
"
js
/
Vector
.
h
"
#
include
"
util
/
Poison
.
h
"
namespace
js
{
namespace
gc
{
class
MallocedBlockCache
{
public
:
static
const
size_t
STEP
=
16
;
static
const
size_t
NUM_LISTS
=
32
;
static_assert
(
NUM_LISTS
<
=
(
1
<
<
7
)
)
;
static
const
size_t
OVERSIZE_BLOCK_LIST_ID
=
0
;
using
MallocedBlockVector
=
Vector
<
void
*
0
SystemAllocPolicy
>
;
MallocedBlockVector
lists
[
NUM_LISTS
]
;
~
MallocedBlockCache
(
)
;
static
inline
size_t
listIDForSize
(
size_t
size
)
;
[
[
nodiscard
]
]
inline
PointerAndUint7
alloc
(
size_t
size
)
;
[
[
nodiscard
]
]
MOZ_NEVER_INLINE
PointerAndUint7
allocSlow
(
size_t
size
)
;
inline
void
free
(
PointerAndUint7
blockAndListID
)
;
void
preen
(
double
percentOfBlocksToDiscard
)
;
void
clear
(
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
;
}
;
inline
size_t
MallocedBlockCache
:
:
listIDForSize
(
size_t
size
)
{
MOZ_ASSERT
(
size
>
0
)
;
size
=
js
:
:
RoundUp
(
size
STEP
)
;
size_t
i
=
size
/
STEP
;
MOZ_ASSERT
(
i
>
0
)
;
if
(
i
>
=
NUM_LISTS
)
{
return
OVERSIZE_BLOCK_LIST_ID
;
}
return
i
;
}
inline
PointerAndUint7
MallocedBlockCache
:
:
alloc
(
size_t
size
)
{
size_t
i
=
listIDForSize
(
size
)
;
MOZ_ASSERT
(
i
<
NUM_LISTS
)
;
if
(
MOZ_LIKELY
(
i
!
=
OVERSIZE_BLOCK_LIST_ID
&
&
!
lists
[
i
]
.
empty
(
)
)
)
{
MOZ_ASSERT
(
i
*
STEP
=
=
js
:
:
RoundUp
(
size
STEP
)
)
;
void
*
block
=
lists
[
i
]
.
popCopy
(
)
;
return
PointerAndUint7
(
block
i
)
;
}
return
allocSlow
(
size
)
;
}
inline
void
MallocedBlockCache
:
:
free
(
PointerAndUint7
blockAndListID
)
{
void
*
block
=
blockAndListID
.
pointer
(
)
;
uint32_t
listID
=
blockAndListID
.
uint7
(
)
;
MOZ_ASSERT
(
block
)
;
MOZ_ASSERT
(
listID
<
NUM_LISTS
)
;
if
(
MOZ_UNLIKELY
(
listID
=
=
OVERSIZE_BLOCK_LIST_ID
)
)
{
js_free
(
block
)
;
return
;
}
memset
(
block
JS_NOTINUSE_TRAILER_PATTERN
listID
*
STEP
)
;
MOZ_MAKE_MEM_UNDEFINED
(
block
listID
*
STEP
)
;
if
(
MOZ_UNLIKELY
(
!
lists
[
listID
]
.
append
(
block
)
)
)
{
js_free
(
block
)
;
}
}
}
}
#
endif
