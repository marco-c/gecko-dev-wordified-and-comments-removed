#
ifndef
gc_Marking_h
#
define
gc_Marking_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
vm
/
TaggedProto
.
h
"
class
JSLinearString
;
class
JSRope
;
class
JSTracer
;
struct
JSClass
;
namespace
js
{
class
BaseShape
;
class
GCMarker
;
class
NativeObject
;
class
ObjectGroup
;
class
Shape
;
class
WeakMapBase
;
namespace
jit
{
class
JitCode
;
}
namespace
gc
{
struct
Cell
;
class
TenuredCell
;
template
<
typename
T
>
bool
IsMarkedInternal
(
JSRuntime
*
rt
T
*
*
thing
)
;
template
<
typename
T
>
bool
IsAboutToBeFinalizedInternal
(
T
*
thingp
)
;
template
<
typename
T
>
bool
IsAboutToBeFinalizedInternal
(
T
*
*
thingp
)
;
template
<
typename
T
>
inline
bool
IsMarkedUnbarriered
(
JSRuntime
*
rt
T
*
thingp
)
{
return
IsMarkedInternal
(
rt
ConvertToBase
(
thingp
)
)
;
}
template
<
typename
T
>
inline
bool
IsMarked
(
JSRuntime
*
rt
BarrieredBase
<
T
>
*
thingp
)
{
return
IsMarkedInternal
(
rt
ConvertToBase
(
thingp
-
>
unbarrieredAddress
(
)
)
)
;
}
template
<
typename
T
>
inline
bool
IsAboutToBeFinalizedUnbarriered
(
T
*
thingp
)
{
return
IsAboutToBeFinalizedInternal
(
ConvertToBase
(
thingp
)
)
;
}
template
<
typename
T
>
inline
bool
IsAboutToBeFinalized
(
const
BarrieredBase
<
T
>
*
thingp
)
{
return
IsAboutToBeFinalizedInternal
(
ConvertToBase
(
thingp
-
>
unbarrieredAddress
(
)
)
)
;
}
inline
bool
IsAboutToBeFinalizedDuringMinorSweep
(
Cell
*
cell
)
;
inline
Cell
*
ToMarkable
(
const
Value
&
v
)
{
if
(
v
.
isGCThing
(
)
)
{
return
(
Cell
*
)
v
.
toGCThing
(
)
;
}
return
nullptr
;
}
inline
Cell
*
ToMarkable
(
Cell
*
cell
)
{
return
cell
;
}
bool
UnmarkGrayGCThingUnchecked
(
JSRuntime
*
rt
JS
:
:
GCCellPtr
thing
)
;
}
bool
UnmarkGrayShapeRecursively
(
Shape
*
shape
)
;
namespace
gc
{
template
<
typename
T
>
inline
bool
IsForwarded
(
const
T
*
t
)
;
template
<
typename
T
>
inline
T
*
Forwarded
(
const
T
*
t
)
;
inline
Value
Forwarded
(
const
JS
:
:
Value
&
value
)
;
template
<
typename
T
>
inline
T
MaybeForwarded
(
T
t
)
;
inline
const
JSClass
*
MaybeForwardedObjectClass
(
const
JSObject
*
obj
)
;
template
<
typename
T
>
inline
bool
MaybeForwardedObjectIs
(
JSObject
*
obj
)
;
template
<
typename
T
>
inline
T
&
MaybeForwardedObjectAs
(
JSObject
*
obj
)
;
void
VisitTraceList
(
JSTracer
*
trc
JSObject
*
obj
const
uint32_t
*
traceList
uint8_t
*
memory
)
;
#
ifdef
JSGC_HASH_TABLE_CHECKS
template
<
typename
T
>
inline
bool
IsGCThingValidAfterMovingGC
(
T
*
t
)
;
template
<
typename
T
>
inline
void
CheckGCThingAfterMovingGC
(
T
*
t
)
;
template
<
typename
T
>
inline
void
CheckGCThingAfterMovingGC
(
const
WeakHeapPtr
<
T
*
>
&
t
)
;
#
endif
}
#
ifdef
DEBUG
template
<
typename
T
>
void
CheckTracedThing
(
JSTracer
*
trc
T
*
thing
)
;
template
<
typename
T
>
void
CheckTracedThing
(
JSTracer
*
trc
const
T
&
thing
)
;
#
else
template
<
typename
T
>
inline
void
CheckTracedThing
(
JSTracer
*
trc
T
*
thing
)
{
}
template
<
typename
T
>
inline
void
CheckTracedThing
(
JSTracer
*
trc
const
T
&
thing
)
{
}
#
endif
}
#
endif
