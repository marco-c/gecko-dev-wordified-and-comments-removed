#
include
"
gc
/
MallocedBlockCache
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
using
js
:
:
PointerAndUint7
;
using
js
:
:
gc
:
:
MallocedBlockCache
;
MallocedBlockCache
:
:
~
MallocedBlockCache
(
)
{
clear
(
)
;
}
PointerAndUint7
MallocedBlockCache
:
:
allowSlow
(
size_t
size
)
{
MOZ_ASSERT
(
size
>
0
)
;
size
=
js
:
:
RoundUp
(
size
STEP
)
;
size_t
i
=
size
/
STEP
;
MOZ_ASSERT
(
i
>
0
)
;
if
(
MOZ_UNLIKELY
(
i
>
=
NUM_LISTS
)
)
{
void
*
p
=
js_malloc
(
size
)
;
return
PointerAndUint7
(
p
OVERSIZE_BLOCK_LIST_ID
)
;
}
MOZ_ASSERT
(
i
>
=
1
&
&
i
<
NUM_LISTS
)
;
MOZ_ASSERT
(
i
*
STEP
=
=
size
)
;
MOZ_RELEASE_ASSERT
(
lists
[
i
]
.
empty
(
)
)
;
void
*
p
=
js_malloc
(
size
)
;
if
(
MOZ_UNLIKELY
(
!
p
)
)
{
return
PointerAndUint7
(
nullptr
0
)
;
}
return
PointerAndUint7
(
p
i
)
;
}
void
MallocedBlockCache
:
:
preen
(
double
percentOfBlocksToDiscard
)
{
MOZ_ASSERT
(
percentOfBlocksToDiscard
>
=
0
.
0
&
&
percentOfBlocksToDiscard
<
=
100
.
0
)
;
MOZ_ASSERT
(
lists
[
OVERSIZE_BLOCK_LIST_ID
]
.
empty
(
)
)
;
for
(
size_t
listID
=
1
;
listID
<
NUM_LISTS
;
listID
+
+
)
{
MallocedBlockVector
&
list
=
lists
[
listID
]
;
size_t
numToFree
=
size_t
(
float
(
list
.
length
(
)
)
*
(
percentOfBlocksToDiscard
/
100
.
0
)
)
;
MOZ_RELEASE_ASSERT
(
numToFree
<
=
list
.
length
(
)
)
;
while
(
numToFree
>
0
)
{
void
*
block
=
list
.
popCopy
(
)
;
MOZ_ASSERT
(
block
)
;
js_free
(
block
)
;
numToFree
-
-
;
}
}
}
void
MallocedBlockCache
:
:
clear
(
)
{
MOZ_ASSERT
(
lists
[
OVERSIZE_BLOCK_LIST_ID
]
.
empty
(
)
)
;
for
(
size_t
i
=
1
;
i
<
NUM_LISTS
;
i
+
+
)
{
MallocedBlockVector
&
list
=
lists
[
i
]
;
for
(
void
*
&
block
:
list
)
{
MOZ_ASSERT
(
block
)
;
js_free
(
block
)
;
block
=
nullptr
;
}
list
.
clear
(
)
;
}
}
size_t
MallocedBlockCache
:
:
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
MOZ_ASSERT
(
lists
[
OVERSIZE_BLOCK_LIST_ID
]
.
empty
(
)
)
;
size_t
nBytes
=
0
;
for
(
const
MallocedBlockVector
&
list
:
lists
)
{
nBytes
+
=
list
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
void
*
block
:
list
)
{
MOZ_ASSERT
(
block
)
;
nBytes
+
=
mallocSizeOf
(
block
)
;
}
}
return
nBytes
;
}
