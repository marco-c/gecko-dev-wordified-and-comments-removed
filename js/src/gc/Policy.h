#
ifndef
gc_Policy_h
#
define
gc_Policy_h
#
include
<
type_traits
>
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
js
/
GCPolicyAPI
.
h
"
namespace
js
{
template
<
typename
T
>
struct
InternalGCPointerPolicy
:
public
JS
:
:
GCPointerPolicy
<
T
>
{
using
Type
=
std
:
:
remove_pointer_t
<
T
>
;
#
define
IS_BASE_OF_OR
(
_1
BaseType
_2
_3
)
std
:
:
is_base_of_v
<
BaseType
Type
>
|
|
static_assert
(
JS_FOR_EACH_TRACEKIND
(
IS_BASE_OF_OR
)
false
"
InternalGCPointerPolicy
must
only
be
used
for
GC
thing
pointers
"
)
;
#
undef
IS_BASE_OF_OR
static
void
preBarrier
(
T
v
)
{
if
(
v
)
{
Type
:
:
writeBarrierPre
(
v
)
;
}
}
static
void
postBarrier
(
T
*
vp
T
prev
T
next
)
{
if
(
*
vp
)
{
Type
:
:
writeBarrierPost
(
vp
prev
next
)
;
}
}
static
void
readBarrier
(
T
v
)
{
if
(
v
)
{
Type
:
:
readBarrier
(
v
)
;
}
}
static
void
trace
(
JSTracer
*
trc
T
*
vp
const
char
*
name
)
{
TraceNullableRoot
(
trc
vp
name
)
;
}
}
;
}
namespace
JS
{
template
<
typename
T
>
struct
GCPolicy
<
T
*
>
:
public
js
:
:
InternalGCPointerPolicy
<
T
*
>
{
}
;
template
<
typename
T
>
struct
GCPolicy
<
T
*
const
>
:
public
js
:
:
InternalGCPointerPolicy
<
T
*
const
>
{
}
;
template
<
typename
T
>
struct
GCPolicy
<
js
:
:
HeapPtr
<
T
>
>
{
static
void
trace
(
JSTracer
*
trc
js
:
:
HeapPtr
<
T
>
*
thingp
const
char
*
name
)
{
js
:
:
TraceNullableEdge
(
trc
thingp
name
)
;
}
static
bool
needsSweep
(
js
:
:
HeapPtr
<
T
>
*
thingp
)
{
return
js
:
:
gc
:
:
IsAboutToBeFinalized
(
thingp
)
;
}
static
bool
traceWeak
(
JSTracer
*
trc
js
:
:
HeapPtr
<
T
>
*
thingp
)
{
return
js
:
:
TraceWeakEdge
(
trc
thingp
"
traceWeak
"
)
;
}
}
;
template
<
typename
T
>
struct
GCPolicy
<
js
:
:
PreBarriered
<
T
>
>
{
static
void
trace
(
JSTracer
*
trc
js
:
:
PreBarriered
<
T
>
*
thingp
const
char
*
name
)
{
js
:
:
TraceNullableEdge
(
trc
thingp
name
)
;
}
static
bool
needsSweep
(
js
:
:
PreBarriered
<
T
>
*
thingp
)
{
return
js
:
:
gc
:
:
IsAboutToBeFinalized
(
thingp
)
;
}
}
;
template
<
typename
T
>
struct
GCPolicy
<
js
:
:
WeakHeapPtr
<
T
>
>
{
static
void
trace
(
JSTracer
*
trc
js
:
:
WeakHeapPtr
<
T
>
*
thingp
const
char
*
name
)
{
js
:
:
TraceEdge
(
trc
thingp
name
)
;
}
static
bool
needsSweep
(
js
:
:
WeakHeapPtr
<
T
>
*
thingp
)
{
return
js
:
:
gc
:
:
IsAboutToBeFinalized
(
thingp
)
;
}
static
bool
traceWeak
(
JSTracer
*
trc
js
:
:
WeakHeapPtr
<
T
>
*
thingp
)
{
return
js
:
:
TraceWeakEdge
(
trc
thingp
"
traceWeak
"
)
;
}
}
;
template
<
>
struct
GCPolicy
<
JS
:
:
GCCellPtr
>
{
static
void
trace
(
JSTracer
*
trc
JS
:
:
GCCellPtr
*
thingp
const
char
*
name
)
{
js
:
:
TraceGCCellPtrRoot
(
trc
thingp
name
)
;
}
}
;
}
#
endif
