#
ifndef
js_GCArray_h
#
define
js_GCArray_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
js
/
Value
.
h
"
namespace
js
{
template
<
typename
T
>
class
GCArray
{
const
uint32_t
size_
;
T
elements_
[
1
]
;
public
:
explicit
GCArray
(
uint32_t
size
)
:
size_
(
size
)
{
}
uint32_t
size
(
)
const
{
return
size_
;
}
const
T
&
operator
[
]
(
uint32_t
i
)
const
{
MOZ_ASSERT
(
i
<
size_
)
;
return
elements_
[
i
]
;
}
T
&
operator
[
]
(
uint32_t
i
)
{
MOZ_ASSERT
(
i
<
size_
)
;
return
elements_
[
i
]
;
}
const
T
*
begin
(
)
const
{
return
elements_
;
}
T
*
begin
(
)
{
return
elements_
;
}
const
T
*
end
(
)
const
{
return
elements_
+
size_
;
}
T
*
end
(
)
{
return
elements_
+
size_
;
}
void
trace
(
JSTracer
*
trc
)
{
TraceRange
(
trc
size
(
)
begin
(
)
"
array
element
"
)
;
}
static
constexpr
ptrdiff_t
offsetOfElements
(
)
{
return
offsetof
(
GCArray
elements_
)
;
}
static
size_t
bytesRequired
(
size_t
size
)
{
return
offsetOfElements
(
)
+
std
:
:
max
(
size
size_t
(
1
)
)
*
sizeof
(
T
)
;
}
}
;
template
<
typename
T
>
class
GCOwnedArray
{
using
StorageType
=
GCArray
<
PreAndPostBarrierWrapper
<
T
>
>
;
using
TenuredInterface
=
StorageType
;
using
NurseryInterface
=
GCArray
<
PreBarrierWrapper
<
T
>
>
;
StorageType
array
;
public
:
explicit
GCOwnedArray
(
uint32_t
size
)
:
array
(
size
)
{
}
uint32_t
size
(
)
const
{
return
array
.
size
(
)
;
}
const
T
&
operator
[
]
(
uint32_t
i
)
const
{
return
array
[
i
]
.
get
(
)
;
}
template
<
typename
F
>
void
withOwner
(
gc
:
:
Cell
*
owner
F
&
&
f
)
{
if
(
gc
:
:
IsInsideNursery
(
owner
)
)
{
f
(
nurseryOwned
(
)
)
;
}
else
{
f
(
tenuredOwned
(
)
)
;
}
}
void
setElement
(
gc
:
:
Cell
*
owner
uint32_t
i
const
T
&
newValue
)
{
withOwner
(
owner
[
&
]
(
auto
&
self
)
{
self
[
i
]
=
newValue
;
}
)
;
}
void
trace
(
JSTracer
*
trc
)
{
array
.
trace
(
trc
)
;
}
static
constexpr
ptrdiff_t
offsetOfElements
(
)
{
return
offsetof
(
GCOwnedArray
array
)
+
StorageType
:
:
offsetOfElements
(
)
;
}
static
size_t
bytesRequired
(
size_t
size
)
{
return
offsetof
(
GCOwnedArray
array
)
+
StorageType
:
:
bytesRequired
(
size
)
;
}
private
:
TenuredInterface
&
tenuredOwned
(
)
{
return
array
;
}
NurseryInterface
&
nurseryOwned
(
)
{
return
reinterpret_cast
<
NurseryInterface
&
>
(
array
)
;
}
}
;
}
#
endif
