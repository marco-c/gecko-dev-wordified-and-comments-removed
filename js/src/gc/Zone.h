#
ifndef
gc_Zone_h
#
define
gc_Zone_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
jscntxt
.
h
"
#
include
"
ds
/
SplayTree
.
h
"
#
include
"
gc
/
FindSCCs
.
h
"
#
include
"
gc
/
GCRuntime
.
h
"
#
include
"
js
/
GCHashTable
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
vm
/
MallocProvider
.
h
"
#
include
"
vm
/
RegExpShared
.
h
"
#
include
"
vm
/
TypeInference
.
h
"
namespace
js
{
namespace
jit
{
class
JitZone
;
}
namespace
gc
{
class
ZoneHeapThreshold
{
GCLockData
<
double
>
gcHeapGrowthFactor_
;
mozilla
:
:
Atomic
<
size_t
mozilla
:
:
Relaxed
>
gcTriggerBytes_
;
public
:
ZoneHeapThreshold
(
)
:
gcHeapGrowthFactor_
(
3
.
0
)
gcTriggerBytes_
(
0
)
{
}
double
gcHeapGrowthFactor
(
)
const
{
return
gcHeapGrowthFactor_
;
}
size_t
gcTriggerBytes
(
)
const
{
return
gcTriggerBytes_
;
}
double
allocTrigger
(
bool
highFrequencyGC
)
const
;
void
updateAfterGC
(
size_t
lastBytes
JSGCInvocationKind
gckind
const
GCSchedulingTunables
&
tunables
const
GCSchedulingState
&
state
const
AutoLockGC
&
lock
)
;
void
updateForRemovedArena
(
const
GCSchedulingTunables
&
tunables
)
;
private
:
static
double
computeZoneHeapGrowthFactorForHeapSize
(
size_t
lastBytes
const
GCSchedulingTunables
&
tunables
const
GCSchedulingState
&
state
)
;
static
size_t
computeZoneTriggerBytes
(
double
growthFactor
size_t
lastBytes
JSGCInvocationKind
gckind
const
GCSchedulingTunables
&
tunables
const
AutoLockGC
&
lock
)
;
}
;
struct
ZoneComponentFinder
:
public
ComponentFinder
<
JS
:
:
Zone
ZoneComponentFinder
>
{
ZoneComponentFinder
(
uintptr_t
sl
AutoLockForExclusiveAccess
&
lock
)
:
ComponentFinder
<
JS
:
:
Zone
ZoneComponentFinder
>
(
sl
)
lock
(
lock
)
{
}
AutoLockForExclusiveAccess
&
lock
;
}
;
struct
UniqueIdGCPolicy
{
static
bool
needsSweep
(
Cell
*
*
cell
uint64_t
*
value
)
;
}
;
using
UniqueIdMap
=
GCHashMap
<
Cell
*
uint64_t
PointerHasher
<
Cell
*
>
SystemAllocPolicy
UniqueIdGCPolicy
>
;
extern
uint64_t
NextCellUniqueId
(
JSRuntime
*
rt
)
;
template
<
typename
T
>
class
ZoneCellIter
;
}
class
MOZ_NON_TEMPORARY_CLASS
ExternalStringCache
{
static
const
size_t
NumEntries
=
4
;
mozilla
:
:
Array
<
JSString
*
NumEntries
>
entries_
;
ExternalStringCache
(
const
ExternalStringCache
&
)
=
delete
;
void
operator
=
(
const
ExternalStringCache
&
)
=
delete
;
public
:
ExternalStringCache
(
)
{
purge
(
)
;
}
void
purge
(
)
{
mozilla
:
:
PodArrayZero
(
entries_
)
;
}
MOZ_ALWAYS_INLINE
JSString
*
lookup
(
const
char16_t
*
chars
size_t
len
)
const
;
MOZ_ALWAYS_INLINE
void
put
(
JSString
*
s
)
;
}
;
}
namespace
JS
{
struct
Zone
:
public
JS
:
:
shadow
:
:
Zone
public
js
:
:
gc
:
:
GraphNodeBase
<
JS
:
:
Zone
>
public
js
:
:
MallocProvider
<
JS
:
:
Zone
>
{
explicit
Zone
(
JSRuntime
*
rt
js
:
:
ZoneGroup
*
group
)
;
~
Zone
(
)
;
MOZ_MUST_USE
bool
init
(
bool
isSystem
)
;
void
destroy
(
js
:
:
FreeOp
*
fop
)
;
private
:
js
:
:
ZoneGroup
*
const
group_
;
public
:
js
:
:
ZoneGroup
*
group
(
)
const
{
return
group_
;
}
static
size_t
offsetOfGroup
(
)
{
return
offsetof
(
Zone
group_
)
;
}
void
findOutgoingEdges
(
js
:
:
gc
:
:
ZoneComponentFinder
&
finder
)
;
void
discardJitCode
(
js
:
:
FreeOp
*
fop
bool
discardBaselineCode
=
true
)
;
void
addSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
size_t
*
typePool
size_t
*
regexpZone
size_t
*
jitZone
size_t
*
baselineStubsOptimized
size_t
*
cachedCFG
size_t
*
uniqueIdMap
size_t
*
shapeTables
size_t
*
atomsMarkBitmaps
)
;
template
<
typename
T
typename
.
.
.
Args
>
js
:
:
gc
:
:
ZoneCellIter
<
T
>
cellIter
(
Args
&
&
.
.
.
args
)
{
return
js
:
:
gc
:
:
ZoneCellIter
<
T
>
(
const_cast
<
Zone
*
>
(
this
)
mozilla
:
:
Forward
<
Args
>
(
args
)
.
.
.
)
;
}
MOZ_MUST_USE
void
*
onOutOfMemory
(
js
:
:
AllocFunction
allocFunc
size_t
nbytes
void
*
reallocPtr
=
nullptr
)
{
if
(
!
js
:
:
CurrentThreadCanAccessRuntime
(
runtime_
)
)
return
nullptr
;
return
runtimeFromActiveCooperatingThread
(
)
-
>
onOutOfMemory
(
allocFunc
nbytes
reallocPtr
)
;
}
void
reportAllocationOverflow
(
)
{
js
:
:
ReportAllocationOverflow
(
nullptr
)
;
}
void
beginSweepTypes
(
js
:
:
FreeOp
*
fop
bool
releaseTypes
)
;
bool
hasMarkedCompartments
(
)
;
void
scheduleGC
(
)
{
MOZ_ASSERT
(
!
CurrentThreadIsHeapBusy
(
)
)
;
gcScheduled_
=
true
;
}
void
unscheduleGC
(
)
{
gcScheduled_
=
false
;
}
bool
isGCScheduled
(
)
{
return
gcScheduled_
;
}
void
setPreservingCode
(
bool
preserving
)
{
gcPreserveCode_
=
preserving
;
}
bool
isPreservingCode
(
)
const
{
return
gcPreserveCode_
;
}
bool
canCollect
(
)
;
void
changeGCState
(
GCState
prev
GCState
next
)
{
MOZ_ASSERT
(
CurrentThreadIsHeapBusy
(
)
)
;
MOZ_ASSERT
(
gcState
(
)
=
=
prev
)
;
MOZ_ASSERT_IF
(
next
!
=
NoGC
canCollect
(
)
)
;
gcState_
=
next
;
}
bool
isCollecting
(
)
const
{
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtimeFromActiveCooperatingThread
(
)
)
)
;
return
isCollectingFromAnyThread
(
)
;
}
bool
isCollectingFromAnyThread
(
)
const
{
if
(
CurrentThreadIsHeapCollecting
(
)
)
return
gcState_
!
=
NoGC
;
else
return
needsIncrementalBarrier
(
)
;
}
bool
requireGCTracer
(
)
const
{
JSRuntime
*
rt
=
runtimeFromAnyThread
(
)
;
return
CurrentThreadIsHeapMajorCollecting
(
)
&
&
!
rt
-
>
gc
.
isHeapCompacting
(
)
&
&
gcState_
!
=
NoGC
;
}
bool
shouldMarkInZone
(
)
const
{
return
needsIncrementalBarrier
(
)
|
|
isGCMarking
(
)
;
}
uint64_t
gcNumber
(
)
;
bool
compileBarriers
(
)
const
{
return
compileBarriers
(
needsIncrementalBarrier
(
)
)
;
}
bool
compileBarriers
(
bool
needsIncrementalBarrier
)
const
{
return
needsIncrementalBarrier
|
|
runtimeFromActiveCooperatingThread
(
)
-
>
hasZealMode
(
js
:
:
gc
:
:
ZealMode
:
:
VerifierPre
)
;
}
void
setNeedsIncrementalBarrier
(
bool
needs
)
;
const
uint32_t
*
addressOfNeedsIncrementalBarrier
(
)
const
{
return
&
needsIncrementalBarrier_
;
}
js
:
:
jit
:
:
JitZone
*
getJitZone
(
JSContext
*
cx
)
{
return
jitZone_
?
jitZone_
:
createJitZone
(
cx
)
;
}
js
:
:
jit
:
:
JitZone
*
jitZone
(
)
{
return
jitZone_
;
}
bool
isAtomsZone
(
)
const
{
return
runtimeFromAnyThread
(
)
-
>
isAtomsZone
(
this
)
;
}
bool
isSelfHostingZone
(
)
const
{
return
runtimeFromAnyThread
(
)
-
>
isSelfHostingZone
(
this
)
;
}
void
prepareForCompacting
(
)
;
#
ifdef
DEBUG
unsigned
lastSweepGroupIndex
(
)
{
return
gcLastSweepGroupIndex
;
}
#
endif
void
sweepBreakpoints
(
js
:
:
FreeOp
*
fop
)
;
void
sweepUniqueIds
(
js
:
:
FreeOp
*
fop
)
;
void
sweepWeakMaps
(
)
;
void
sweepCompartments
(
js
:
:
FreeOp
*
fop
bool
keepAtleastOne
bool
lastGC
)
;
using
DebuggerVector
=
js
:
:
Vector
<
js
:
:
Debugger
*
0
js
:
:
SystemAllocPolicy
>
;
private
:
js
:
:
ZoneGroupData
<
DebuggerVector
*
>
debuggers
;
js
:
:
jit
:
:
JitZone
*
createJitZone
(
JSContext
*
cx
)
;
bool
isQueuedForBackgroundSweep
(
)
{
return
isOnList
(
)
;
}
js
:
:
ZoneGroupOrGCTaskData
<
js
:
:
gc
:
:
UniqueIdMap
>
uniqueIds_
;
js
:
:
gc
:
:
UniqueIdMap
&
uniqueIds
(
)
{
return
uniqueIds_
.
ref
(
)
;
}
public
:
bool
hasDebuggers
(
)
const
{
return
debuggers
&
&
debuggers
-
>
length
(
)
;
}
DebuggerVector
*
getDebuggers
(
)
const
{
return
debuggers
;
}
DebuggerVector
*
getOrCreateDebuggers
(
JSContext
*
cx
)
;
void
notifyObservingDebuggers
(
)
;
void
clearTables
(
)
;
js
:
:
ZoneGroupData
<
bool
>
suppressAllocationMetadataBuilder
;
js
:
:
gc
:
:
ArenaLists
arenas
;
js
:
:
TypeZone
types
;
private
:
js
:
:
ZoneGroupOrGCTaskData
<
mozilla
:
:
LinkedList
<
js
:
:
WeakMapBase
>
>
gcWeakMapList_
;
public
:
mozilla
:
:
LinkedList
<
js
:
:
WeakMapBase
>
&
gcWeakMapList
(
)
{
return
gcWeakMapList_
.
ref
(
)
;
}
typedef
js
:
:
Vector
<
JSCompartment
*
1
js
:
:
SystemAllocPolicy
>
CompartmentVector
;
private
:
js
:
:
ActiveThreadOrGCTaskData
<
CompartmentVector
>
compartments_
;
public
:
CompartmentVector
&
compartments
(
)
{
return
compartments_
.
ref
(
)
;
}
typedef
js
:
:
Vector
<
js
:
:
gc
:
:
Cell
*
0
js
:
:
SystemAllocPolicy
>
GrayRootVector
;
private
:
js
:
:
ZoneGroupOrGCTaskData
<
GrayRootVector
>
gcGrayRoots_
;
public
:
GrayRootVector
&
gcGrayRoots
(
)
{
return
gcGrayRoots_
.
ref
(
)
;
}
using
WeakEdges
=
js
:
:
Vector
<
js
:
:
gc
:
:
TenuredCell
*
*
0
js
:
:
SystemAllocPolicy
>
;
private
:
js
:
:
ZoneGroupOrGCTaskData
<
WeakEdges
>
gcWeakRefs_
;
public
:
WeakEdges
&
gcWeakRefs
(
)
{
return
gcWeakRefs_
.
ref
(
)
;
}
private
:
js
:
:
ZoneGroupOrGCTaskData
<
mozilla
:
:
LinkedList
<
detail
:
:
WeakCacheBase
>
>
weakCaches_
;
public
:
mozilla
:
:
LinkedList
<
detail
:
:
WeakCacheBase
>
&
weakCaches
(
)
{
return
weakCaches_
.
ref
(
)
;
}
void
registerWeakCache
(
detail
:
:
WeakCacheBase
*
cachep
)
{
weakCaches
(
)
.
insertBack
(
cachep
)
;
}
private
:
js
:
:
ZoneGroupOrGCTaskData
<
js
:
:
gc
:
:
WeakKeyTable
>
gcWeakKeys_
;
public
:
js
:
:
gc
:
:
WeakKeyTable
&
gcWeakKeys
(
)
{
return
gcWeakKeys_
.
ref
(
)
;
}
private
:
js
:
:
ZoneGroupData
<
ZoneSet
>
gcSweepGroupEdges_
;
public
:
ZoneSet
&
gcSweepGroupEdges
(
)
{
return
gcSweepGroupEdges_
.
ref
(
)
;
}
using
TypeDescrObjectSet
=
js
:
:
GCHashSet
<
JSObject
*
js
:
:
MovableCellHasher
<
JSObject
*
>
js
:
:
SystemAllocPolicy
>
;
private
:
js
:
:
ZoneGroupData
<
JS
:
:
WeakCache
<
TypeDescrObjectSet
>
>
typeDescrObjects_
;
js
:
:
gc
:
:
MemoryCounter
<
Zone
>
gcMallocCounter
;
js
:
:
gc
:
:
MemoryCounter
<
Zone
>
jitCodeCounter
;
public
:
js
:
:
RegExpZone
regExps
;
JS
:
:
WeakCache
<
TypeDescrObjectSet
>
&
typeDescrObjects
(
)
{
return
typeDescrObjects_
.
ref
(
)
;
}
bool
addTypeDescrObject
(
JSContext
*
cx
HandleObject
obj
)
;
bool
triggerGCForTooMuchMalloc
(
)
{
JSRuntime
*
rt
=
runtimeFromAnyThread
(
)
;
if
(
CurrentThreadCanAccessRuntime
(
rt
)
)
{
return
rt
-
>
gc
.
triggerZoneGC
(
this
JS
:
:
gcreason
:
:
TOO_MUCH_MALLOC
gcMallocCounter
.
bytes
(
)
gcMallocCounter
.
maxBytes
(
)
)
;
}
return
false
;
}
void
resetGCMallocBytes
(
)
{
gcMallocCounter
.
reset
(
)
;
}
void
setGCMaxMallocBytes
(
size_t
value
)
{
gcMallocCounter
.
setMax
(
value
)
;
}
void
updateMallocCounter
(
size_t
nbytes
)
{
gcMallocCounter
.
update
(
this
nbytes
)
;
}
size_t
GCMaxMallocBytes
(
)
const
{
return
gcMallocCounter
.
maxBytes
(
)
;
}
size_t
GCMallocBytes
(
)
const
{
return
gcMallocCounter
.
bytes
(
)
;
}
void
updateJitCodeMallocBytes
(
size_t
size
)
{
jitCodeCounter
.
update
(
this
size
)
;
}
void
resetAllMallocBytes
(
)
{
resetGCMallocBytes
(
)
;
jitCodeCounter
.
reset
(
)
;
}
bool
isTooMuchMalloc
(
)
const
{
return
gcMallocCounter
.
isTooMuchMalloc
(
)
|
|
jitCodeCounter
.
isTooMuchMalloc
(
)
;
}
private
:
js
:
:
ZoneGroupOrGCTaskData
<
js
:
:
SparseBitmap
>
markedAtoms_
;
js
:
:
ZoneGroupOrGCTaskData
<
js
:
:
AtomSet
>
atomCache_
;
js
:
:
ZoneGroupOrGCTaskData
<
js
:
:
ExternalStringCache
>
externalStringCache_
;
public
:
js
:
:
SparseBitmap
&
markedAtoms
(
)
{
return
markedAtoms_
.
ref
(
)
;
}
js
:
:
AtomSet
&
atomCache
(
)
{
return
atomCache_
.
ref
(
)
;
}
js
:
:
ExternalStringCache
&
externalStringCache
(
)
{
return
externalStringCache_
.
ref
(
)
;
}
;
js
:
:
gc
:
:
HeapUsage
usage
;
js
:
:
gc
:
:
ZoneHeapThreshold
threshold
;
js
:
:
UnprotectedData
<
size_t
>
gcDelayBytes
;
private
:
js
:
:
ZoneGroupData
<
js
:
:
PropertyTree
>
propertyTree_
;
public
:
js
:
:
PropertyTree
&
propertyTree
(
)
{
return
propertyTree_
.
ref
(
)
;
}
private
:
js
:
:
ZoneGroupData
<
js
:
:
BaseShapeSet
>
baseShapes_
;
public
:
js
:
:
BaseShapeSet
&
baseShapes
(
)
{
return
baseShapes_
.
ref
(
)
;
}
private
:
js
:
:
ZoneGroupData
<
js
:
:
InitialShapeSet
>
initialShapes_
;
public
:
js
:
:
InitialShapeSet
&
initialShapes
(
)
{
return
initialShapes_
.
ref
(
)
;
}
private
:
using
NurseryShapeVector
=
js
:
:
Vector
<
js
:
:
AccessorShape
*
0
js
:
:
SystemAllocPolicy
>
;
js
:
:
ZoneGroupData
<
NurseryShapeVector
>
nurseryShapes_
;
public
:
NurseryShapeVector
&
nurseryShapes
(
)
{
return
nurseryShapes_
.
ref
(
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkInitialShapesTableAfterMovingGC
(
)
;
void
checkBaseShapeTableAfterMovingGC
(
)
;
#
endif
void
fixupInitialShapeTable
(
)
;
void
fixupAfterMovingGC
(
)
;
js
:
:
ZoneGroupData
<
void
*
>
data
;
js
:
:
ZoneGroupData
<
bool
>
isSystem
;
bool
usedByHelperThread
(
)
{
return
!
isAtomsZone
(
)
&
&
group
(
)
-
>
usedByHelperThread
;
}
#
ifdef
DEBUG
js
:
:
ZoneGroupData
<
unsigned
>
gcLastSweepGroupIndex
;
#
endif
static
js
:
:
HashNumber
UniqueIdToHash
(
uint64_t
uid
)
{
return
mozilla
:
:
HashGeneric
(
uid
)
;
}
MOZ_MUST_USE
bool
getHashCode
(
js
:
:
gc
:
:
Cell
*
cell
js
:
:
HashNumber
*
hashp
)
{
uint64_t
uid
;
if
(
!
getOrCreateUniqueId
(
cell
&
uid
)
)
return
false
;
*
hashp
=
UniqueIdToHash
(
uid
)
;
return
true
;
}
MOZ_MUST_USE
bool
maybeGetUniqueId
(
js
:
:
gc
:
:
Cell
*
cell
uint64_t
*
uidp
)
{
MOZ_ASSERT
(
uidp
)
;
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
)
;
auto
p
=
uniqueIds
(
)
.
lookup
(
cell
)
;
if
(
p
)
*
uidp
=
p
-
>
value
(
)
;
return
p
.
found
(
)
;
}
MOZ_MUST_USE
bool
getOrCreateUniqueId
(
js
:
:
gc
:
:
Cell
*
cell
uint64_t
*
uidp
)
{
MOZ_ASSERT
(
uidp
)
;
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
|
|
js
:
:
CurrentThreadIsPerformingGC
(
)
)
;
auto
p
=
uniqueIds
(
)
.
lookupForAdd
(
cell
)
;
if
(
p
)
{
*
uidp
=
p
-
>
value
(
)
;
return
true
;
}
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
)
;
*
uidp
=
js
:
:
gc
:
:
NextCellUniqueId
(
runtimeFromAnyThread
(
)
)
;
if
(
!
uniqueIds
(
)
.
add
(
p
cell
*
uidp
)
)
return
false
;
if
(
IsInsideNursery
(
cell
)
&
&
!
group
(
)
-
>
nursery
(
)
.
addedUniqueIdToCell
(
cell
)
)
{
uniqueIds
(
)
.
remove
(
cell
)
;
return
false
;
}
return
true
;
}
js
:
:
HashNumber
getHashCodeInfallible
(
js
:
:
gc
:
:
Cell
*
cell
)
{
return
UniqueIdToHash
(
getUniqueIdInfallible
(
cell
)
)
;
}
uint64_t
getUniqueIdInfallible
(
js
:
:
gc
:
:
Cell
*
cell
)
{
uint64_t
uid
;
js
:
:
AutoEnterOOMUnsafeRegion
oomUnsafe
;
if
(
!
getOrCreateUniqueId
(
cell
&
uid
)
)
oomUnsafe
.
crash
(
"
failed
to
allocate
uid
"
)
;
return
uid
;
}
MOZ_MUST_USE
bool
hasUniqueId
(
js
:
:
gc
:
:
Cell
*
cell
)
{
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
|
|
js
:
:
CurrentThreadIsPerformingGC
(
)
)
;
return
uniqueIds
(
)
.
has
(
cell
)
;
}
void
transferUniqueId
(
js
:
:
gc
:
:
Cell
*
tgt
js
:
:
gc
:
:
Cell
*
src
)
{
MOZ_ASSERT
(
src
!
=
tgt
)
;
MOZ_ASSERT
(
!
IsInsideNursery
(
tgt
)
)
;
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
runtimeFromActiveCooperatingThread
(
)
)
)
;
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
)
;
uniqueIds
(
)
.
rekeyIfMoved
(
src
tgt
)
;
}
void
removeUniqueId
(
js
:
:
gc
:
:
Cell
*
cell
)
{
MOZ_ASSERT
(
js
:
:
CurrentThreadCanAccessZone
(
this
)
)
;
uniqueIds
(
)
.
remove
(
cell
)
;
}
void
adoptUniqueIds
(
JS
:
:
Zone
*
source
)
{
js
:
:
AutoEnterOOMUnsafeRegion
oomUnsafe
;
for
(
js
:
:
gc
:
:
UniqueIdMap
:
:
Enum
e
(
source
-
>
uniqueIds
(
)
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
MOZ_ASSERT
(
!
uniqueIds
(
)
.
has
(
e
.
front
(
)
.
key
(
)
)
)
;
if
(
!
uniqueIds
(
)
.
put
(
e
.
front
(
)
.
key
(
)
e
.
front
(
)
.
value
(
)
)
)
oomUnsafe
.
crash
(
"
failed
to
transfer
unique
ids
from
off
-
thread
"
)
;
}
source
-
>
uniqueIds
(
)
.
clear
(
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkUniqueIdTableAfterMovingGC
(
)
;
#
endif
bool
keepShapeTables
(
)
const
{
return
keepShapeTables_
;
}
void
setKeepShapeTables
(
bool
b
)
{
keepShapeTables_
=
b
;
}
void
deleteEmptyCompartment
(
JSCompartment
*
comp
)
;
private
:
js
:
:
ZoneGroupData
<
js
:
:
jit
:
:
JitZone
*
>
jitZone_
;
js
:
:
ActiveThreadData
<
bool
>
gcScheduled_
;
js
:
:
ZoneGroupData
<
bool
>
gcPreserveCode_
;
js
:
:
ZoneGroupData
<
bool
>
keepShapeTables_
;
friend
class
js
:
:
gc
:
:
ZoneList
;
static
Zone
*
const
NotOnList
;
js
:
:
ZoneGroupOrGCTaskData
<
Zone
*
>
listNext_
;
bool
isOnList
(
)
const
;
Zone
*
nextZone
(
)
const
;
friend
bool
js
:
:
CurrentThreadCanAccessZone
(
Zone
*
zone
)
;
friend
class
js
:
:
gc
:
:
GCRuntime
;
}
;
}
namespace
js
{
class
ZoneGroupsIter
{
gc
:
:
AutoEnterIteration
iterMarker
;
ZoneGroup
*
*
it
;
ZoneGroup
*
*
end
;
public
:
explicit
ZoneGroupsIter
(
JSRuntime
*
rt
)
:
iterMarker
(
&
rt
-
>
gc
)
{
it
=
rt
-
>
gc
.
groups
(
)
.
begin
(
)
;
end
=
rt
-
>
gc
.
groups
(
)
.
end
(
)
;
if
(
!
done
(
)
&
&
(
*
it
)
-
>
usedByHelperThread
)
next
(
)
;
}
bool
done
(
)
const
{
return
it
=
=
end
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
do
{
it
+
+
;
}
while
(
!
done
(
)
&
&
(
*
it
)
-
>
usedByHelperThread
)
;
}
ZoneGroup
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
*
it
;
}
operator
ZoneGroup
*
(
)
const
{
return
get
(
)
;
}
ZoneGroup
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
enum
ZoneSelector
{
WithAtoms
SkipAtoms
}
;
class
ZonesInGroupIter
{
gc
:
:
AutoEnterIteration
iterMarker
;
JS
:
:
Zone
*
*
it
;
JS
:
:
Zone
*
*
end
;
public
:
explicit
ZonesInGroupIter
(
ZoneGroup
*
group
)
:
iterMarker
(
&
group
-
>
runtime
-
>
gc
)
{
it
=
group
-
>
zones
(
)
.
begin
(
)
;
end
=
group
-
>
zones
(
)
.
end
(
)
;
}
bool
done
(
)
const
{
return
it
=
=
end
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
it
+
+
;
}
JS
:
:
Zone
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
*
it
;
}
operator
JS
:
:
Zone
*
(
)
const
{
return
get
(
)
;
}
JS
:
:
Zone
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
class
ZonesIter
{
ZoneGroupsIter
group
;
Maybe
<
ZonesInGroupIter
>
zone
;
JS
:
:
Zone
*
atomsZone
;
public
:
ZonesIter
(
JSRuntime
*
rt
ZoneSelector
selector
)
:
group
(
rt
)
atomsZone
(
selector
=
=
WithAtoms
?
rt
-
>
gc
.
atomsZone
.
ref
(
)
:
nullptr
)
{
if
(
!
atomsZone
&
&
!
done
(
)
)
next
(
)
;
}
bool
atAtomsZone
(
JSRuntime
*
rt
)
const
{
return
!
!
atomsZone
;
}
bool
done
(
)
const
{
return
!
atomsZone
&
&
group
.
done
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
if
(
atomsZone
)
atomsZone
=
nullptr
;
while
(
!
group
.
done
(
)
)
{
if
(
zone
.
isSome
(
)
)
zone
.
ref
(
)
.
next
(
)
;
else
zone
.
emplace
(
group
)
;
if
(
zone
.
ref
(
)
.
done
(
)
)
{
zone
.
reset
(
)
;
group
.
next
(
)
;
}
else
{
break
;
}
}
}
JS
:
:
Zone
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
atomsZone
?
atomsZone
:
zone
.
ref
(
)
.
get
(
)
;
}
operator
JS
:
:
Zone
*
(
)
const
{
return
get
(
)
;
}
JS
:
:
Zone
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
struct
CompartmentsInZoneIter
{
explicit
CompartmentsInZoneIter
(
JS
:
:
Zone
*
zone
)
:
zone
(
zone
)
{
it
=
zone
-
>
compartments
(
)
.
begin
(
)
;
}
bool
done
(
)
const
{
MOZ_ASSERT
(
it
)
;
return
it
<
zone
-
>
compartments
(
)
.
begin
(
)
|
|
it
>
=
zone
-
>
compartments
(
)
.
end
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
it
+
+
;
}
JSCompartment
*
get
(
)
const
{
MOZ_ASSERT
(
it
)
;
return
*
it
;
}
operator
JSCompartment
*
(
)
const
{
return
get
(
)
;
}
JSCompartment
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
private
:
JS
:
:
Zone
*
zone
;
JSCompartment
*
*
it
;
CompartmentsInZoneIter
(
)
:
zone
(
nullptr
)
it
(
nullptr
)
{
}
friend
class
mozilla
:
:
Maybe
<
CompartmentsInZoneIter
>
;
}
;
template
<
class
ZonesIterT
>
class
CompartmentsIterT
{
gc
:
:
AutoEnterIteration
iterMarker
;
ZonesIterT
zone
;
mozilla
:
:
Maybe
<
CompartmentsInZoneIter
>
comp
;
public
:
explicit
CompartmentsIterT
(
JSRuntime
*
rt
)
:
iterMarker
(
&
rt
-
>
gc
)
zone
(
rt
)
{
if
(
zone
.
done
(
)
)
comp
.
emplace
(
)
;
else
comp
.
emplace
(
zone
)
;
}
CompartmentsIterT
(
JSRuntime
*
rt
ZoneSelector
selector
)
:
iterMarker
(
&
rt
-
>
gc
)
zone
(
rt
selector
)
{
if
(
zone
.
done
(
)
)
comp
.
emplace
(
)
;
else
comp
.
emplace
(
zone
)
;
}
bool
done
(
)
const
{
return
zone
.
done
(
)
;
}
void
next
(
)
{
MOZ_ASSERT
(
!
done
(
)
)
;
MOZ_ASSERT
(
!
comp
.
ref
(
)
.
done
(
)
)
;
comp
-
>
next
(
)
;
if
(
comp
-
>
done
(
)
)
{
comp
.
reset
(
)
;
zone
.
next
(
)
;
if
(
!
zone
.
done
(
)
)
comp
.
emplace
(
zone
)
;
}
}
JSCompartment
*
get
(
)
const
{
MOZ_ASSERT
(
!
done
(
)
)
;
return
*
comp
;
}
operator
JSCompartment
*
(
)
const
{
return
get
(
)
;
}
JSCompartment
*
operator
-
>
(
)
const
{
return
get
(
)
;
}
}
;
typedef
CompartmentsIterT
<
ZonesIter
>
CompartmentsIter
;
class
ZoneAllocPolicy
{
Zone
*
const
zone
;
public
:
MOZ_IMPLICIT
ZoneAllocPolicy
(
Zone
*
zone
)
:
zone
(
zone
)
{
}
template
<
typename
T
>
T
*
maybe_pod_malloc
(
size_t
numElems
)
{
return
zone
-
>
maybe_pod_malloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_calloc
(
size_t
numElems
)
{
return
zone
-
>
maybe_pod_calloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
maybe_pod_realloc
(
T
*
p
size_t
oldSize
size_t
newSize
)
{
return
zone
-
>
maybe_pod_realloc
<
T
>
(
p
oldSize
newSize
)
;
}
template
<
typename
T
>
T
*
pod_malloc
(
size_t
numElems
)
{
return
zone
-
>
pod_malloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
pod_calloc
(
size_t
numElems
)
{
return
zone
-
>
pod_calloc
<
T
>
(
numElems
)
;
}
template
<
typename
T
>
T
*
pod_realloc
(
T
*
p
size_t
oldSize
size_t
newSize
)
{
return
zone
-
>
pod_realloc
<
T
>
(
p
oldSize
newSize
)
;
}
void
free_
(
void
*
p
)
{
js_free
(
p
)
;
}
void
reportAllocOverflow
(
)
const
{
}
MOZ_MUST_USE
bool
checkSimulatedOOM
(
)
const
{
return
!
js
:
:
oom
:
:
ShouldFailWithOOM
(
)
;
}
}
;
template
<
typename
T
>
struct
GCManagedDeletePolicy
{
struct
ClearEdgesTracer
:
public
JS
:
:
CallbackTracer
{
explicit
ClearEdgesTracer
(
JSContext
*
cx
)
:
CallbackTracer
(
cx
TraceWeakMapKeysValues
)
{
}
#
ifdef
DEBUG
TracerKind
getTracerKind
(
)
const
override
{
return
TracerKind
:
:
ClearEdges
;
}
#
endif
template
<
typename
S
>
void
clearEdge
(
S
*
*
thingp
)
{
InternalBarrierMethods
<
S
*
>
:
:
preBarrier
(
*
thingp
)
;
InternalBarrierMethods
<
S
*
>
:
:
postBarrier
(
thingp
*
thingp
nullptr
)
;
*
thingp
=
nullptr
;
}
void
onObjectEdge
(
JSObject
*
*
objp
)
override
{
clearEdge
(
objp
)
;
}
void
onStringEdge
(
JSString
*
*
strp
)
override
{
clearEdge
(
strp
)
;
}
void
onSymbolEdge
(
JS
:
:
Symbol
*
*
symp
)
override
{
clearEdge
(
symp
)
;
}
void
onScriptEdge
(
JSScript
*
*
scriptp
)
override
{
clearEdge
(
scriptp
)
;
}
void
onShapeEdge
(
js
:
:
Shape
*
*
shapep
)
override
{
clearEdge
(
shapep
)
;
}
void
onObjectGroupEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
override
{
clearEdge
(
groupp
)
;
}
void
onBaseShapeEdge
(
js
:
:
BaseShape
*
*
basep
)
override
{
clearEdge
(
basep
)
;
}
void
onJitCodeEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
override
{
clearEdge
(
codep
)
;
}
void
onLazyScriptEdge
(
js
:
:
LazyScript
*
*
lazyp
)
override
{
clearEdge
(
lazyp
)
;
}
void
onScopeEdge
(
js
:
:
Scope
*
*
scopep
)
override
{
clearEdge
(
scopep
)
;
}
void
onRegExpSharedEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
override
{
clearEdge
(
sharedp
)
;
}
void
onChild
(
const
JS
:
:
GCCellPtr
&
thing
)
override
{
MOZ_CRASH
(
)
;
}
}
;
void
operator
(
)
(
const
T
*
constPtr
)
{
if
(
constPtr
)
{
auto
ptr
=
const_cast
<
T
*
>
(
constPtr
)
;
ClearEdgesTracer
trc
(
TlsContext
.
get
(
)
)
;
ptr
-
>
trace
(
&
trc
)
;
js_delete
(
ptr
)
;
}
}
}
;
#
ifdef
DEBUG
inline
bool
IsClearEdgesTracer
(
JSTracer
*
trc
)
{
return
trc
-
>
isCallbackTracer
(
)
&
&
trc
-
>
asCallbackTracer
(
)
-
>
getTracerKind
(
)
=
=
JS
:
:
CallbackTracer
:
:
TracerKind
:
:
ClearEdges
;
}
#
endif
}
namespace
JS
{
template
<
>
struct
DeletePolicy
<
js
:
:
FunctionScope
:
:
Data
>
:
public
js
:
:
GCManagedDeletePolicy
<
js
:
:
FunctionScope
:
:
Data
>
{
}
;
template
<
>
struct
DeletePolicy
<
js
:
:
ModuleScope
:
:
Data
>
:
public
js
:
:
GCManagedDeletePolicy
<
js
:
:
ModuleScope
:
:
Data
>
{
}
;
}
#
endif
