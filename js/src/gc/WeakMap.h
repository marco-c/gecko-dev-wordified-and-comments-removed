#
ifndef
gc_WeakMap_h
#
define
gc_WeakMap_h
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
jsfriendapi
.
h
"
#
include
"
gc
/
DeletePolicy
.
h
"
#
include
"
gc
/
StoreBuffer
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
Realm
.
h
"
namespace
js
{
class
GCMarker
;
class
WeakMapBase
;
typedef
HashSet
<
WeakMapBase
*
DefaultHasher
<
WeakMapBase
*
>
SystemAllocPolicy
>
WeakMapSet
;
class
WeakMapBase
:
public
mozilla
:
:
LinkedListElement
<
WeakMapBase
>
{
friend
class
js
:
:
GCMarker
;
public
:
WeakMapBase
(
JSObject
*
memOf
JS
:
:
Zone
*
zone
)
;
virtual
~
WeakMapBase
(
)
;
Zone
*
zone
(
)
const
{
return
zone_
;
}
static
void
unmarkZone
(
JS
:
:
Zone
*
zone
)
;
static
void
traceZone
(
JS
:
:
Zone
*
zone
JSTracer
*
tracer
)
;
static
bool
markZoneIteratively
(
JS
:
:
Zone
*
zone
GCMarker
*
marker
)
;
static
bool
findInterZoneEdges
(
JS
:
:
Zone
*
zone
)
;
static
void
sweepZone
(
JS
:
:
Zone
*
zone
)
;
static
void
traceAllMappings
(
WeakMapTracer
*
tracer
)
;
static
bool
saveZoneMarkedWeakMaps
(
JS
:
:
Zone
*
zone
WeakMapSet
&
markedWeakMaps
)
;
static
void
restoreMarkedWeakMaps
(
WeakMapSet
&
markedWeakMaps
)
;
protected
:
virtual
void
trace
(
JSTracer
*
tracer
)
=
0
;
virtual
bool
findZoneEdges
(
)
=
0
;
virtual
void
sweep
(
)
=
0
;
virtual
void
traceMappings
(
WeakMapTracer
*
tracer
)
=
0
;
virtual
void
finish
(
)
=
0
;
virtual
void
markEntry
(
GCMarker
*
marker
gc
:
:
Cell
*
markedCell
JS
:
:
GCCellPtr
l
)
=
0
;
virtual
bool
markIteratively
(
GCMarker
*
marker
)
=
0
;
protected
:
GCPtrObject
memberOf
;
JS
:
:
Zone
*
zone_
;
bool
marked
;
}
;
template
<
typename
T
>
static
T
extractUnbarriered
(
const
WriteBarrieredBase
<
T
>
&
v
)
{
return
v
.
get
(
)
;
}
template
<
typename
T
>
static
T
*
extractUnbarriered
(
T
*
v
)
{
return
v
;
}
template
<
class
Key
class
Value
class
HashPolicy
=
DefaultHasher
<
Key
>
>
class
WeakMap
:
public
HashMap
<
Key
Value
HashPolicy
ZoneAllocPolicy
>
public
WeakMapBase
{
public
:
typedef
HashMap
<
Key
Value
HashPolicy
ZoneAllocPolicy
>
Base
;
typedef
typename
Base
:
:
Enum
Enum
;
typedef
typename
Base
:
:
Lookup
Lookup
;
typedef
typename
Base
:
:
Entry
Entry
;
typedef
typename
Base
:
:
Range
Range
;
typedef
typename
Base
:
:
Ptr
Ptr
;
typedef
typename
Base
:
:
AddPtr
AddPtr
;
explicit
WeakMap
(
JSContext
*
cx
JSObject
*
memOf
=
nullptr
)
:
Base
(
cx
-
>
zone
(
)
)
WeakMapBase
(
memOf
cx
-
>
zone
(
)
)
{
}
bool
init
(
uint32_t
len
=
16
)
{
if
(
!
Base
:
:
init
(
len
)
)
return
false
;
zone
(
)
-
>
gcWeakMapList
(
)
.
insertFront
(
this
)
;
marked
=
JS
:
:
IsIncrementalGCInProgress
(
TlsContext
.
get
(
)
)
;
return
true
;
}
Ptr
lookup
(
const
Lookup
&
l
)
const
{
Ptr
p
=
Base
:
:
lookup
(
l
)
;
if
(
p
)
exposeGCThingToActiveJS
(
p
-
>
value
(
)
)
;
return
p
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
const
{
AddPtr
p
=
Base
:
:
lookupForAdd
(
l
)
;
if
(
p
)
exposeGCThingToActiveJS
(
p
-
>
value
(
)
)
;
return
p
;
}
Ptr
lookupWithDefault
(
const
Key
&
k
const
Value
&
defaultValue
)
{
Ptr
p
=
Base
:
:
lookupWithDefault
(
k
defaultValue
)
;
if
(
p
)
exposeGCThingToActiveJS
(
p
-
>
value
(
)
)
;
return
p
;
}
using
Base
:
:
remove
;
void
markEntry
(
GCMarker
*
marker
gc
:
:
Cell
*
markedCell
JS
:
:
GCCellPtr
origKey
)
override
{
MOZ_ASSERT
(
marked
)
;
Ptr
p
=
Base
:
:
lookup
(
static_cast
<
Lookup
>
(
origKey
.
asCell
(
)
)
)
;
MOZ_ASSERT
(
p
.
found
(
)
)
;
Key
key
(
p
-
>
key
(
)
)
;
MOZ_ASSERT
(
(
markedCell
=
=
extractUnbarriered
(
key
)
)
|
|
(
markedCell
=
=
getDelegate
(
key
)
)
)
;
if
(
gc
:
:
IsMarked
(
marker
-
>
runtime
(
)
&
key
)
)
{
TraceEdge
(
marker
&
p
-
>
value
(
)
"
ephemeron
value
"
)
;
}
else
if
(
keyNeedsMark
(
key
)
)
{
TraceEdge
(
marker
&
p
-
>
value
(
)
"
WeakMap
ephemeron
value
"
)
;
TraceEdge
(
marker
&
key
"
proxy
-
preserved
WeakMap
ephemeron
key
"
)
;
MOZ_ASSERT
(
key
=
=
p
-
>
key
(
)
)
;
}
key
.
unsafeSet
(
nullptr
)
;
}
void
trace
(
JSTracer
*
trc
)
override
{
MOZ_ASSERT_IF
(
JS
:
:
CurrentThreadIsHeapBusy
(
)
isInList
(
)
)
;
TraceNullableEdge
(
trc
&
memberOf
"
WeakMap
owner
"
)
;
if
(
!
Base
:
:
initialized
(
)
)
return
;
if
(
trc
-
>
isMarkingTracer
(
)
)
{
MOZ_ASSERT
(
trc
-
>
weakMapAction
(
)
=
=
ExpandWeakMaps
)
;
marked
=
true
;
(
void
)
markIteratively
(
GCMarker
:
:
fromTracer
(
trc
)
)
;
return
;
}
if
(
trc
-
>
weakMapAction
(
)
=
=
DoNotTraceWeakMaps
)
return
;
if
(
trc
-
>
weakMapAction
(
)
=
=
TraceWeakMapKeysValues
)
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
TraceEdge
(
trc
&
e
.
front
(
)
.
mutableKey
(
)
"
WeakMap
entry
key
"
)
;
}
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
TraceEdge
(
trc
&
r
.
front
(
)
.
value
(
)
"
WeakMap
entry
value
"
)
;
}
protected
:
static
void
addWeakEntry
(
GCMarker
*
marker
JS
:
:
GCCellPtr
key
gc
:
:
WeakMarkable
markable
)
{
Zone
*
zone
=
key
.
asCell
(
)
-
>
asTenured
(
)
.
zone
(
)
;
auto
p
=
zone
-
>
gcWeakKeys
(
)
.
get
(
key
)
;
if
(
p
)
{
gc
:
:
WeakEntryVector
&
weakEntries
=
p
-
>
value
;
if
(
!
weakEntries
.
append
(
std
:
:
move
(
markable
)
)
)
marker
-
>
abortLinearWeakMarking
(
)
;
}
else
{
gc
:
:
WeakEntryVector
weakEntries
;
MOZ_ALWAYS_TRUE
(
weakEntries
.
append
(
std
:
:
move
(
markable
)
)
)
;
if
(
!
zone
-
>
gcWeakKeys
(
)
.
put
(
JS
:
:
GCCellPtr
(
key
)
std
:
:
move
(
weakEntries
)
)
)
marker
-
>
abortLinearWeakMarking
(
)
;
}
}
bool
markIteratively
(
GCMarker
*
marker
)
override
{
MOZ_ASSERT
(
marked
)
;
bool
markedAny
=
false
;
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
bool
keyIsMarked
=
gc
:
:
IsMarked
(
marker
-
>
runtime
(
)
&
e
.
front
(
)
.
mutableKey
(
)
)
;
if
(
!
keyIsMarked
&
&
keyNeedsMark
(
e
.
front
(
)
.
key
(
)
)
)
{
TraceEdge
(
marker
&
e
.
front
(
)
.
mutableKey
(
)
"
proxy
-
preserved
WeakMap
entry
key
"
)
;
keyIsMarked
=
true
;
markedAny
=
true
;
}
if
(
keyIsMarked
)
{
if
(
!
gc
:
:
IsMarked
(
marker
-
>
runtime
(
)
&
e
.
front
(
)
.
value
(
)
)
)
{
TraceEdge
(
marker
&
e
.
front
(
)
.
value
(
)
"
WeakMap
entry
value
"
)
;
markedAny
=
true
;
}
}
else
if
(
marker
-
>
isWeakMarkingTracer
(
)
)
{
JS
:
:
GCCellPtr
weakKey
(
extractUnbarriered
(
e
.
front
(
)
.
key
(
)
)
)
;
gc
:
:
WeakMarkable
markable
(
this
weakKey
)
;
addWeakEntry
(
marker
weakKey
markable
)
;
if
(
JSObject
*
delegate
=
getDelegate
(
e
.
front
(
)
.
key
(
)
)
)
addWeakEntry
(
marker
JS
:
:
GCCellPtr
(
delegate
)
markable
)
;
}
}
return
markedAny
;
}
JSObject
*
getDelegate
(
JSObject
*
key
)
const
{
JSWeakmapKeyDelegateOp
op
=
key
-
>
getClass
(
)
-
>
extWeakmapKeyDelegateOp
(
)
;
if
(
!
op
)
return
nullptr
;
JSObject
*
obj
=
op
(
key
)
;
if
(
!
obj
)
return
nullptr
;
MOZ_ASSERT
(
obj
-
>
runtimeFromMainThread
(
)
=
=
zone
(
)
-
>
runtimeFromMainThread
(
)
)
;
return
obj
;
}
JSObject
*
getDelegate
(
JSScript
*
script
)
const
{
return
nullptr
;
}
private
:
void
exposeGCThingToActiveJS
(
const
JS
:
:
Value
&
v
)
const
{
JS
:
:
ExposeValueToActiveJS
(
v
)
;
}
void
exposeGCThingToActiveJS
(
JSObject
*
obj
)
const
{
JS
:
:
ExposeObjectToActiveJS
(
obj
)
;
}
bool
keyNeedsMark
(
JSObject
*
key
)
const
{
JSObject
*
delegate
=
getDelegate
(
key
)
;
return
delegate
&
&
gc
:
:
IsMarkedUnbarriered
(
zone
(
)
-
>
runtimeFromMainThread
(
)
&
delegate
)
;
}
bool
keyNeedsMark
(
JSScript
*
script
)
const
{
return
false
;
}
bool
findZoneEdges
(
)
override
{
return
true
;
}
void
sweep
(
)
override
{
for
(
Enum
e
(
*
this
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
if
(
gc
:
:
IsAboutToBeFinalized
(
&
e
.
front
(
)
.
mutableKey
(
)
)
)
e
.
removeFront
(
)
;
}
assertEntriesNotAboutToBeFinalized
(
)
;
}
void
finish
(
)
override
{
Base
:
:
finish
(
)
;
}
void
traceMappings
(
WeakMapTracer
*
tracer
)
override
{
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
gc
:
:
Cell
*
key
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
key
(
)
)
;
gc
:
:
Cell
*
value
=
gc
:
:
ToMarkable
(
r
.
front
(
)
.
value
(
)
)
;
if
(
key
&
&
value
)
{
tracer
-
>
trace
(
memberOf
JS
:
:
GCCellPtr
(
r
.
front
(
)
.
key
(
)
.
get
(
)
)
JS
:
:
GCCellPtr
(
r
.
front
(
)
.
value
(
)
.
get
(
)
)
)
;
}
}
}
protected
:
void
assertEntriesNotAboutToBeFinalized
(
)
{
#
if
DEBUG
for
(
Range
r
=
Base
:
:
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
Key
k
(
r
.
front
(
)
.
key
(
)
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
&
k
)
)
;
MOZ_ASSERT
(
!
gc
:
:
IsAboutToBeFinalized
(
&
r
.
front
(
)
.
value
(
)
)
)
;
MOZ_ASSERT
(
k
=
=
r
.
front
(
)
.
key
(
)
)
;
}
#
endif
}
}
;
class
ObjectValueMap
:
public
WeakMap
<
HeapPtr
<
JSObject
*
>
HeapPtr
<
Value
>
MovableCellHasher
<
HeapPtr
<
JSObject
*
>
>
>
{
public
:
ObjectValueMap
(
JSContext
*
cx
JSObject
*
obj
)
:
WeakMap
<
HeapPtr
<
JSObject
*
>
HeapPtr
<
Value
>
MovableCellHasher
<
HeapPtr
<
JSObject
*
>
>
>
(
cx
obj
)
{
}
bool
findZoneEdges
(
)
override
;
}
;
class
ObjectWeakMap
{
ObjectValueMap
map
;
public
:
explicit
ObjectWeakMap
(
JSContext
*
cx
)
;
bool
init
(
)
;
JS
:
:
Zone
*
zone
(
)
const
{
return
map
.
zone
(
)
;
}
JSObject
*
lookup
(
const
JSObject
*
obj
)
;
bool
add
(
JSContext
*
cx
JSObject
*
obj
JSObject
*
target
)
;
void
clear
(
)
;
void
trace
(
JSTracer
*
trc
)
;
size_t
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
return
mallocSizeOf
(
this
)
+
sizeOfExcludingThis
(
mallocSizeOf
)
;
}
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkAfterMovingGC
(
)
;
#
endif
}
;
}
namespace
JS
{
template
<
>
struct
DeletePolicy
<
js
:
:
ObjectValueMap
>
:
public
js
:
:
GCManagedDeletePolicy
<
js
:
:
ObjectValueMap
>
{
}
;
}
#
endif
