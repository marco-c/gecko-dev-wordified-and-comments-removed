#
ifndef
gc_WeakMap_h
#
define
gc_WeakMap_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
gc
/
Tracer
.
h
"
#
include
"
gc
/
ZoneAllocator
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
HeapAPI
.
h
"
#
include
"
vm
/
JSObject
.
h
"
namespace
JS
{
class
Zone
;
}
namespace
js
{
class
GCMarker
;
class
WeakMapBase
;
struct
WeakMapTracer
;
extern
void
DumpWeakMapLog
(
JSRuntime
*
rt
)
;
namespace
gc
{
struct
WeakMarkable
;
#
if
defined
(
JS_GC_ZEAL
)
|
|
defined
(
DEBUG
)
bool
CheckWeakMapEntryMarking
(
const
WeakMapBase
*
map
Cell
*
key
Cell
*
value
)
;
#
endif
}
using
WeakMapColors
=
HashMap
<
WeakMapBase
*
js
:
:
gc
:
:
CellColor
DefaultHasher
<
WeakMapBase
*
>
SystemAllocPolicy
>
;
class
WeakMapBase
:
public
mozilla
:
:
LinkedListElement
<
WeakMapBase
>
{
friend
class
js
:
:
GCMarker
;
public
:
using
CellColor
=
js
:
:
gc
:
:
CellColor
;
WeakMapBase
(
JSObject
*
memOf
JS
:
:
Zone
*
zone
)
;
virtual
~
WeakMapBase
(
)
{
}
JS
:
:
Zone
*
zone
(
)
const
{
return
zone_
;
}
static
void
unmarkZone
(
JS
:
:
Zone
*
zone
)
;
static
bool
markZoneIteratively
(
JS
:
:
Zone
*
zone
GCMarker
*
marker
)
;
[
[
nodiscard
]
]
static
bool
findSweepGroupEdgesForZone
(
JS
:
:
Zone
*
atomsZone
JS
:
:
Zone
*
mapZone
)
;
static
void
sweepZoneAfterMinorGC
(
JS
:
:
Zone
*
zone
)
;
static
void
traceAllMappings
(
WeakMapTracer
*
tracer
)
;
static
bool
saveZoneMarkedWeakMaps
(
JS
:
:
Zone
*
zone
WeakMapColors
&
markedWeakMaps
)
;
static
void
restoreMarkedWeakMaps
(
WeakMapColors
&
markedWeakMaps
)
;
#
if
defined
(
JS_GC_ZEAL
)
|
|
defined
(
DEBUG
)
static
bool
checkMarkingForZone
(
JS
:
:
Zone
*
zone
)
;
#
endif
#
ifdef
JSGC_HASH_TABLE_CHECKS
static
void
checkWeakMapsAfterMovingGC
(
JS
:
:
Zone
*
zone
)
;
#
endif
protected
:
virtual
void
trace
(
JSTracer
*
tracer
)
=
0
;
virtual
bool
findSweepGroupEdges
(
Zone
*
atomsZone
)
=
0
;
virtual
void
traceWeakEdges
(
JSTracer
*
trc
)
=
0
;
virtual
void
traceMappings
(
WeakMapTracer
*
tracer
)
=
0
;
virtual
void
clearAndCompact
(
)
=
0
;
[
[
nodiscard
]
]
bool
addEphemeronEdgesForEntry
(
gc
:
:
MarkColor
mapColor
gc
:
:
Cell
*
key
gc
:
:
Cell
*
delegate
gc
:
:
TenuredCell
*
value
)
;
[
[
nodiscard
]
]
bool
addEphemeronEdge
(
gc
:
:
MarkColor
color
gc
:
:
Cell
*
src
gc
:
:
Cell
*
dst
)
;
virtual
bool
markEntries
(
GCMarker
*
marker
)
=
0
;
gc
:
:
CellColor
mapColor
(
)
const
{
return
gc
:
:
CellColor
(
uint32_t
(
mapColor_
)
)
;
}
void
setMapColor
(
gc
:
:
CellColor
newColor
)
{
mapColor_
=
uint32_t
(
newColor
)
;
}
bool
markMap
(
gc
:
:
MarkColor
markColor
)
;
#
ifdef
JS_GC_ZEAL
virtual
bool
checkMarking
(
)
const
=
0
;
virtual
bool
allowKeysInOtherZones
(
)
const
{
return
false
;
}
friend
bool
gc
:
:
CheckWeakMapEntryMarking
(
const
WeakMapBase
*
gc
:
:
Cell
*
gc
:
:
Cell
*
)
;
#
endif
#
ifdef
JSGC_HASH_TABLE_CHECKS
virtual
void
checkAfterMovingGC
(
)
const
=
0
;
#
endif
HeapPtr
<
JSObject
*
>
memberOf
;
JS
:
:
Zone
*
zone_
;
mozilla
:
:
Atomic
<
uint32_t
mozilla
:
:
Relaxed
>
mapColor_
;
bool
mayHaveKeyDelegates
=
false
;
bool
mayHaveSymbolKeys
=
false
;
friend
class
JS
:
:
Zone
;
}
;
template
<
class
Key
class
Value
>
class
WeakMap
:
public
WeakMapBase
{
using
BarrieredKey
=
HeapPtr
<
Key
>
;
using
BarrieredValue
=
HeapPtr
<
Value
>
;
using
Map
=
HashMap
<
HeapPtr
<
Key
>
HeapPtr
<
Value
>
StableCellHasher
<
HeapPtr
<
Key
>
>
ZoneAllocPolicy
>
;
using
UnbarrieredMap
=
HashMap
<
Key
Value
StableCellHasher
<
Key
>
ZoneAllocPolicy
>
;
UnbarrieredMap
map_
;
public
:
using
Lookup
=
typename
Map
:
:
Lookup
;
using
Entry
=
typename
Map
:
:
Entry
;
using
Range
=
typename
Map
:
:
Range
;
using
Ptr
=
typename
Map
:
:
Ptr
;
using
AddPtr
=
typename
Map
:
:
AddPtr
;
struct
Enum
:
public
Map
:
:
Enum
{
explicit
Enum
(
WeakMap
&
map
)
:
Map
:
:
Enum
(
map
.
map
(
)
)
{
}
}
;
explicit
WeakMap
(
JSContext
*
cx
JSObject
*
memOf
=
nullptr
)
;
explicit
WeakMap
(
JS
:
:
Zone
*
zone
JSObject
*
memOf
=
nullptr
)
;
~
WeakMap
(
)
override
;
Range
all
(
)
const
{
return
map
(
)
.
all
(
)
;
}
uint32_t
count
(
)
const
{
return
map
(
)
.
count
(
)
;
}
bool
empty
(
)
const
{
return
map
(
)
.
empty
(
)
;
}
bool
has
(
const
Lookup
&
lookup
)
const
{
return
map
(
)
.
has
(
lookup
)
;
}
void
remove
(
const
Lookup
&
lookup
)
{
return
map
(
)
.
remove
(
lookup
)
;
}
void
remove
(
Ptr
ptr
)
{
return
map
(
)
.
remove
(
ptr
)
;
}
size_t
shallowSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
map
(
)
.
shallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
shallowSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
shallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
Value
get
(
const
Lookup
&
l
)
{
Ptr
ptr
=
lookup
(
l
)
;
if
(
!
ptr
)
{
return
Value
(
)
;
}
return
ptr
-
>
value
(
)
;
}
Ptr
lookup
(
const
Lookup
&
l
)
const
{
Ptr
p
=
map
(
)
.
lookup
(
l
)
;
if
(
p
)
{
valueReadBarrier
(
p
-
>
value
(
)
)
;
}
return
p
;
}
Ptr
lookupUnbarriered
(
const
Lookup
&
l
)
const
{
return
map
(
)
.
lookup
(
l
)
;
}
AddPtr
lookupForAdd
(
const
Lookup
&
l
)
{
AddPtr
p
=
map
(
)
.
lookupForAdd
(
l
)
;
if
(
p
)
{
valueReadBarrier
(
p
-
>
value
(
)
)
;
}
return
p
;
}
[
[
nodiscard
]
]
bool
add
(
AddPtr
&
p
const
Key
&
k
const
Value
&
v
)
{
MOZ_ASSERT
(
gc
:
:
ToMarkable
(
k
)
)
;
keyWriteBarrier
(
k
)
;
return
map
(
)
.
add
(
p
k
v
)
;
}
[
[
nodiscard
]
]
bool
relookupOrAdd
(
AddPtr
&
p
const
Key
&
k
const
Value
&
v
)
{
MOZ_ASSERT
(
gc
:
:
ToMarkable
(
k
)
)
;
keyWriteBarrier
(
k
)
;
return
map
(
)
.
relookupOrAdd
(
p
k
v
)
;
}
[
[
nodiscard
]
]
bool
put
(
const
Key
&
k
const
Value
&
v
)
{
MOZ_ASSERT
(
gc
:
:
ToMarkable
(
k
)
)
;
keyWriteBarrier
(
k
)
;
return
map
(
)
.
put
(
k
v
)
;
}
[
[
nodiscard
]
]
bool
putNew
(
const
Key
&
k
const
Value
&
v
)
{
MOZ_ASSERT
(
gc
:
:
ToMarkable
(
k
)
)
;
keyWriteBarrier
(
k
)
;
return
map
(
)
.
putNew
(
k
v
)
;
}
void
putNewInfallible
(
const
Key
&
k
const
Value
&
v
)
{
MOZ_ASSERT
(
gc
:
:
ToMarkable
(
k
)
)
;
keyWriteBarrier
(
k
)
;
map
(
)
.
putNewInfallible
(
k
k
)
;
}
void
clear
(
)
{
map
(
)
.
clear
(
)
;
mayHaveSymbolKeys
=
false
;
mayHaveKeyDelegates
=
false
;
}
#
ifdef
DEBUG
bool
hasEntry
(
const
Key
&
key
const
Value
&
value
)
{
Ptr
p
=
map
(
)
.
lookup
(
key
)
;
return
p
&
&
p
-
>
value
(
)
=
=
value
;
}
#
endif
bool
markEntry
(
GCMarker
*
marker
gc
:
:
CellColor
mapColor
BarrieredKey
&
key
BarrieredValue
&
value
bool
populateWeakKeysTable
)
;
void
trace
(
JSTracer
*
trc
)
override
;
size_t
sizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
;
protected
:
inline
void
assertMapIsSameZoneWithValue
(
const
BarrieredValue
&
v
)
;
bool
markEntries
(
GCMarker
*
marker
)
override
;
bool
findSweepGroupEdges
(
Zone
*
atomsZone
)
override
;
#
if
DEBUG
void
assertEntriesNotAboutToBeFinalized
(
)
;
#
endif
#
ifdef
JS_GC_ZEAL
bool
checkMarking
(
)
const
override
;
#
endif
#
ifdef
JSGC_HASH_TABLE_CHECKS
void
checkAfterMovingGC
(
)
const
override
;
#
endif
private
:
Map
&
map
(
)
{
return
reinterpret_cast
<
Map
&
>
(
map_
)
;
}
const
Map
&
map
(
)
const
{
return
reinterpret_cast
<
const
Map
&
>
(
map_
)
;
}
static
void
valueReadBarrier
(
const
JS
:
:
Value
&
v
)
{
JS
:
:
ExposeValueToActiveJS
(
v
)
;
}
static
void
valueReadBarrier
(
JSObject
*
obj
)
{
JS
:
:
ExposeObjectToActiveJS
(
obj
)
;
}
void
keyWriteBarrier
(
const
JS
:
:
Value
&
v
)
{
if
(
v
.
isSymbol
(
)
)
{
mayHaveSymbolKeys
=
true
;
}
if
(
v
.
isObject
(
)
)
{
keyWriteBarrier
(
&
v
.
toObject
(
)
)
;
}
}
void
keyWriteBarrier
(
JSObject
*
key
)
{
JSObject
*
delegate
=
UncheckedUnwrapWithoutExpose
(
key
)
;
if
(
delegate
!
=
key
|
|
ObjectMayBeSwapped
(
key
)
)
{
mayHaveKeyDelegates
=
true
;
}
}
void
keyWriteBarrier
(
BaseScript
*
key
)
{
}
void
traceWeakEdges
(
JSTracer
*
trc
)
override
;
void
clearAndCompact
(
)
override
{
map
(
)
.
clear
(
)
;
map
(
)
.
compact
(
)
;
}
void
traceMappings
(
WeakMapTracer
*
tracer
)
override
;
}
;
using
ObjectValueWeakMap
=
WeakMap
<
JSObject
*
Value
>
;
using
ValueValueWeakMap
=
WeakMap
<
Value
Value
>
;
using
ObjectWeakMap
=
WeakMap
<
JSObject
*
JSObject
*
>
;
HashNumber
GetSymbolHash
(
JS
:
:
Symbol
*
sym
)
;
template
<
>
struct
StableCellHasher
<
HeapPtr
<
Value
>
>
{
using
Key
=
HeapPtr
<
Value
>
;
using
Lookup
=
Value
;
static
bool
maybeGetHash
(
const
Lookup
&
l
HashNumber
*
hashOut
)
{
if
(
l
.
isSymbol
(
)
)
{
*
hashOut
=
GetSymbolHash
(
l
.
toSymbol
(
)
)
;
return
true
;
}
return
StableCellHasher
<
gc
:
:
Cell
*
>
:
:
maybeGetHash
(
l
.
toGCThing
(
)
hashOut
)
;
}
static
bool
ensureHash
(
const
Lookup
&
l
HashNumber
*
hashOut
)
{
if
(
l
.
isSymbol
(
)
)
{
*
hashOut
=
GetSymbolHash
(
l
.
toSymbol
(
)
)
;
return
true
;
}
return
StableCellHasher
<
gc
:
:
Cell
*
>
:
:
ensureHash
(
l
.
toGCThing
(
)
hashOut
)
;
}
static
HashNumber
hash
(
const
Lookup
&
l
)
{
if
(
l
.
isSymbol
(
)
)
{
return
GetSymbolHash
(
l
.
toSymbol
(
)
)
;
}
return
StableCellHasher
<
gc
:
:
Cell
*
>
:
:
hash
(
l
.
toGCThing
(
)
)
;
}
static
bool
match
(
const
Key
&
k
const
Lookup
&
l
)
{
if
(
l
.
isSymbol
(
)
)
{
return
k
.
toSymbol
(
)
=
=
l
.
toSymbol
(
)
;
}
return
StableCellHasher
<
gc
:
:
Cell
*
>
:
:
match
(
k
.
toGCThing
(
)
l
.
toGCThing
(
)
)
;
}
}
;
}
#
endif
