#
ifndef
gc_Allocator_h
#
define
gc_Allocator_h
#
include
"
mozilla
/
OperatorNewExtensions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
JS
{
class
RootingContext
;
}
namespace
js
{
namespace
gc
{
class
AllocSite
;
struct
Cell
;
class
TenuredCell
;
class
CellAllocator
{
public
:
template
<
typename
T
js
:
:
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
inline
T
*
NewCell
(
JS
:
:
RootingContext
*
rcx
Args
&
&
.
.
.
args
)
;
private
:
template
<
AllowGC
allowGC
>
static
void
*
RetryNurseryAlloc
(
JS
:
:
RootingContext
*
rcx
JS
:
:
TraceKind
traceKind
AllocKind
allocKind
size_t
thingSize
AllocSite
*
site
)
;
template
<
AllowGC
allowGC
>
static
void
*
TryNewTenuredCell
(
JS
:
:
RootingContext
*
rcx
AllocKind
kind
size_t
thingSize
)
;
#
if
defined
(
DEBUG
)
|
|
defined
(
JS_GC_ZEAL
)
|
|
defined
(
JS_OOM_BREAKPOINT
)
template
<
AllowGC
allowGC
>
static
bool
PreAllocChecks
(
JS
:
:
RootingContext
*
rcx
AllocKind
kind
)
;
#
else
template
<
AllowGC
allowGC
>
static
bool
PreAllocChecks
(
JS
:
:
RootingContext
*
rcx
AllocKind
kind
)
{
return
true
;
}
#
endif
#
ifdef
DEBUG
static
void
CheckIncrementalZoneState
(
JSContext
*
cx
void
*
ptr
)
;
#
endif
static
inline
gc
:
:
Heap
CheckedHeap
(
gc
:
:
Heap
heap
)
;
template
<
JS
:
:
TraceKind
traceKind
AllowGC
allowGC
=
CanGC
>
static
void
*
AllocNurseryOrTenuredCell
(
JS
:
:
RootingContext
*
rcx
gc
:
:
AllocKind
allocKind
size_t
thingSize
gc
:
:
Heap
heap
AllocSite
*
site
)
;
template
<
AllowGC
allowGC
=
CanGC
>
static
void
*
AllocTenuredCell
(
JS
:
:
RootingContext
*
rcx
gc
:
:
AllocKind
kind
size_t
size
)
;
template
<
typename
T
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
T
*
NewString
(
JS
:
:
RootingContext
*
rcx
gc
:
:
Heap
heap
Args
&
&
.
.
.
args
)
;
template
<
typename
T
AllowGC
allowGC
>
static
T
*
NewBigInt
(
JS
:
:
RootingContext
*
rcx
Heap
heap
)
;
template
<
typename
T
AllowGC
allowGC
=
CanGC
>
static
T
*
NewObject
(
JS
:
:
RootingContext
*
rcx
gc
:
:
AllocKind
kind
gc
:
:
Heap
heap
const
JSClass
*
clasp
gc
:
:
AllocSite
*
site
=
nullptr
)
;
template
<
typename
T
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
T
*
NewTenuredCell
(
JS
:
:
RootingContext
*
rcx
Args
&
&
.
.
.
args
)
;
}
;
}
}
#
endif
