#
ifndef
gc_Allocator_h
#
define
gc_Allocator_h
#
include
"
mozilla
/
OperatorNewExtensions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
gc
/
GCEnum
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
namespace
gc
{
class
AllocSite
;
struct
Cell
;
class
TenuredCell
;
class
TenuringTracer
;
class
CellAllocator
{
public
:
template
<
typename
T
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
inline
T
*
NewCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
;
private
:
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
static
T
*
NewString
(
JSContext
*
cx
Heap
heap
Args
&
&
.
.
.
args
)
;
template
<
typename
T
AllowGC
allowGC
>
static
T
*
NewBigInt
(
JSContext
*
cx
Heap
heap
)
;
template
<
typename
T
AllowGC
allowGC
>
static
T
*
NewObject
(
JSContext
*
cx
AllocKind
kind
Heap
heap
const
JSClass
*
clasp
AllocSite
*
site
=
nullptr
)
;
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
static
T
*
NewTenuredCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
;
template
<
JS
:
:
TraceKind
traceKind
AllowGC
allowGC
>
static
void
*
AllocNurseryOrTenuredCell
(
JSContext
*
cx
AllocKind
allocKind
size_t
thingSize
Heap
heap
AllocSite
*
site
)
;
friend
class
TenuringTracer
;
template
<
AllowGC
allowGC
>
static
void
*
RetryNurseryAlloc
(
JSContext
*
cx
JS
:
:
TraceKind
traceKind
AllocKind
allocKind
size_t
thingSize
AllocSite
*
site
)
;
template
<
AllowGC
allowGC
>
static
void
*
AllocTenuredCellForNurseryAlloc
(
JSContext
*
cx
AllocKind
kind
)
;
template
<
AllowGC
allowGC
>
static
void
*
AllocTenuredCell
(
JSContext
*
cx
AllocKind
kind
)
;
template
<
AllowGC
allowGC
>
static
void
*
AllocTenuredCellUnchecked
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
;
static
void
*
RetryTenuredAlloc
(
JS
:
:
Zone
*
zone
AllocKind
kind
)
;
#
ifdef
JS_GC_ZEAL
static
AllocSite
*
MaybeGenerateMissingAllocSite
(
JSContext
*
cx
JS
:
:
TraceKind
traceKind
AllocSite
*
site
)
;
#
endif
#
ifdef
DEBUG
static
void
CheckIncrementalZoneState
(
JS
:
:
Zone
*
zone
void
*
ptr
)
;
#
endif
static
inline
Heap
CheckedHeap
(
Heap
heap
)
;
}
;
}
}
#
endif
