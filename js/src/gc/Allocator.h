#
ifndef
gc_Allocator_h
#
define
gc_Allocator_h
#
include
"
gc
/
Heap
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
class
JSFatInlineString
;
namespace
js
{
struct
Class
;
template
<
typename
T
AllowGC
allowGC
=
CanGC
>
T
*
Allocate
(
JSContext
*
cx
)
;
template
<
typename
AllowGC
allowGC
=
CanGC
>
JSObject
*
Allocate
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
nDynamicSlots
gc
:
:
InitialHeap
heap
const
Class
*
clasp
)
;
template
<
typename
StringAllocT
AllowGC
allowGC
=
CanGC
>
StringAllocT
*
AllocateString
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
;
template
<
typename
StringT
AllowGC
allowGC
=
CanGC
>
StringT
*
Allocate
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
{
return
static_cast
<
StringT
*
>
(
js
:
:
AllocateString
<
JSString
allowGC
>
(
cx
heap
)
)
;
}
template
<
>
inline
JSFatInlineString
*
Allocate
<
JSFatInlineString
CanGC
>
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
{
return
static_cast
<
JSFatInlineString
*
>
(
js
:
:
AllocateString
<
JSFatInlineString
CanGC
>
(
cx
heap
)
)
;
}
template
<
>
inline
JSFatInlineString
*
Allocate
<
JSFatInlineString
NoGC
>
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
{
return
static_cast
<
JSFatInlineString
*
>
(
js
:
:
AllocateString
<
JSFatInlineString
NoGC
>
(
cx
heap
)
)
;
}
}
#
endif
