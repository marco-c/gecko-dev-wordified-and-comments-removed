#
ifndef
gc_Allocator_h
#
define
gc_Allocator_h
#
include
"
mozilla
/
OperatorNewExtensions
.
h
"
#
include
<
stdint
.
h
>
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
namespace
js
{
enum
AllowGC
{
NoGC
=
0
CanGC
=
1
}
;
namespace
gc
{
class
AllocSite
;
struct
Cell
;
class
TenuredCell
;
class
CellAllocator
{
template
<
AllowGC
allowGC
=
CanGC
>
static
gc
:
:
Cell
*
AllocateStringCell
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
size
gc
:
:
InitialHeap
heap
)
;
template
<
typename
StringT
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
StringT
*
AllocateString
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
Args
&
&
.
.
.
args
)
{
static_assert
(
std
:
:
is_base_of_v
<
JSString
StringT
>
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
MapTypeToAllocKind
<
StringT
>
:
:
kind
;
gc
:
:
Cell
*
cell
=
AllocateStringCell
<
allowGC
>
(
cx
kind
sizeof
(
StringT
)
heap
)
;
if
(
!
cell
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
cell
)
StringT
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
public
:
template
<
typename
T
js
:
:
AllowGC
allowGC
=
CanGC
typename
.
.
.
Args
>
static
T
*
NewCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
;
}
;
namespace
detail
{
template
<
AllowGC
allowGC
=
CanGC
>
gc
:
:
TenuredCell
*
AllocateTenuredImpl
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
size
)
;
template
<
AllowGC
allowGC
=
CanGC
>
JSObject
*
AllocateObject
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
nDynamicSlots
gc
:
:
InitialHeap
heap
const
JSClass
*
clasp
gc
:
:
AllocSite
*
site
=
nullptr
)
;
template
<
AllowGC
allowGC
=
CanGC
>
JS
:
:
BigInt
*
AllocateBigInt
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
;
}
}
template
<
typename
T
AllowGC
allowGC
typename
.
.
.
Args
>
T
*
gc
:
:
CellAllocator
:
:
NewCell
(
JSContext
*
cx
Args
&
&
.
.
.
args
)
{
static_assert
(
std
:
:
is_base_of_v
<
gc
:
:
Cell
T
>
)
;
if
constexpr
(
std
:
:
is_base_of_v
<
JSString
T
>
&
&
!
std
:
:
is_base_of_v
<
JSAtom
T
>
&
&
!
std
:
:
is_base_of_v
<
JSExternalString
T
>
)
{
return
AllocateString
<
T
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
else
if
constexpr
(
std
:
:
is_base_of_v
<
JS
:
:
BigInt
T
>
)
{
return
gc
:
:
detail
:
:
AllocateBigInt
<
allowGC
>
(
cx
args
.
.
.
)
;
}
else
if
constexpr
(
std
:
:
is_base_of_v
<
JSObject
T
>
)
{
return
static_cast
<
T
*
>
(
gc
:
:
detail
:
:
AllocateObject
<
allowGC
>
(
cx
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
)
;
}
else
{
gc
:
:
AllocKind
kind
=
gc
:
:
MapTypeToAllocKind
<
T
>
:
:
kind
;
gc
:
:
TenuredCell
*
cell
=
gc
:
:
detail
:
:
AllocateTenuredImpl
<
allowGC
>
(
cx
kind
sizeof
(
T
)
)
;
if
(
!
cell
)
{
return
nullptr
;
}
return
new
(
mozilla
:
:
KnownNotNull
cell
)
T
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
}
#
endif
