#
ifndef
gc_Allocator_h
#
define
gc_Allocator_h
#
include
<
stdint
.
h
>
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
class
JSFatInlineString
;
namespace
js
{
namespace
gc
{
class
AllocSite
;
}
enum
AllowGC
{
NoGC
=
0
CanGC
=
1
}
;
template
<
typename
T
AllowGC
allowGC
=
CanGC
>
T
*
Allocate
(
JSContext
*
cx
)
;
template
<
AllowGC
allowGC
=
CanGC
>
JSObject
*
AllocateObject
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
nDynamicSlots
gc
:
:
InitialHeap
heap
const
JSClass
*
clasp
gc
:
:
AllocSite
*
site
=
nullptr
)
;
template
<
AllowGC
allowGC
=
CanGC
>
JSString
*
AllocateStringImpl
(
JSContext
*
cx
gc
:
:
AllocKind
kind
size_t
size
gc
:
:
InitialHeap
heap
)
;
template
<
typename
StringT
AllowGC
allowGC
=
CanGC
>
StringT
*
AllocateString
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
{
static_assert
(
std
:
:
is_base_of_v
<
JSString
StringT
>
)
;
gc
:
:
AllocKind
kind
=
gc
:
:
MapTypeToAllocKind
<
StringT
>
:
:
kind
;
JSString
*
string
=
AllocateStringImpl
<
allowGC
>
(
cx
kind
sizeof
(
StringT
)
heap
)
;
return
static_cast
<
StringT
*
>
(
string
)
;
}
template
<
AllowGC
allowGC
=
CanGC
>
JS
:
:
BigInt
*
AllocateBigInt
(
JSContext
*
cx
gc
:
:
InitialHeap
heap
)
;
}
#
endif
