#
ifndef
gc_DeletePolicy_h
#
define
gc_DeletePolicy_h
#
include
"
gc
/
Barrier
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
ifdef
ENABLE_BIGINT
#
include
"
vm
/
BigIntType
.
h
"
#
endif
namespace
js
{
namespace
gc
{
struct
ClearEdgesTracer
:
public
JS
:
:
CallbackTracer
{
ClearEdgesTracer
(
)
;
#
ifdef
DEBUG
TracerKind
getTracerKind
(
)
const
override
{
return
TracerKind
:
:
ClearEdges
;
}
#
endif
template
<
typename
T
>
inline
void
clearEdge
(
T
*
*
thingp
)
;
void
onObjectEdge
(
JSObject
*
*
objp
)
override
;
void
onStringEdge
(
JSString
*
*
strp
)
override
;
void
onSymbolEdge
(
JS
:
:
Symbol
*
*
symp
)
override
;
#
ifdef
ENABLE_BIGINT
void
onBigIntEdge
(
JS
:
:
BigInt
*
*
bip
)
override
;
#
endif
void
onScriptEdge
(
JSScript
*
*
scriptp
)
override
;
void
onShapeEdge
(
js
:
:
Shape
*
*
shapep
)
override
;
void
onObjectGroupEdge
(
js
:
:
ObjectGroup
*
*
groupp
)
override
;
void
onBaseShapeEdge
(
js
:
:
BaseShape
*
*
basep
)
override
;
void
onJitCodeEdge
(
js
:
:
jit
:
:
JitCode
*
*
codep
)
override
;
void
onLazyScriptEdge
(
js
:
:
LazyScript
*
*
lazyp
)
override
;
void
onScopeEdge
(
js
:
:
Scope
*
*
scopep
)
override
;
void
onRegExpSharedEdge
(
js
:
:
RegExpShared
*
*
sharedp
)
override
;
void
onChild
(
const
JS
:
:
GCCellPtr
&
thing
)
override
;
}
;
#
ifdef
DEBUG
inline
bool
IsClearEdgesTracer
(
JSTracer
*
trc
)
{
return
trc
-
>
isCallbackTracer
(
)
&
&
trc
-
>
asCallbackTracer
(
)
-
>
getTracerKind
(
)
=
=
JS
:
:
CallbackTracer
:
:
TracerKind
:
:
ClearEdges
;
}
#
endif
}
template
<
typename
T
>
struct
GCManagedDeletePolicy
{
void
operator
(
)
(
const
T
*
constPtr
)
{
if
(
constPtr
)
{
auto
ptr
=
const_cast
<
T
*
>
(
constPtr
)
;
if
(
JS
:
:
RuntimeHeapIsCollecting
(
)
)
{
MOZ_ASSERT
(
js
:
:
CurrentThreadIsGCSweeping
(
)
)
;
}
else
{
gc
:
:
ClearEdgesTracer
trc
;
ptr
-
>
trace
(
&
trc
)
;
}
js_delete
(
ptr
)
;
}
}
}
;
}
#
endif
