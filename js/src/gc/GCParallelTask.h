#
ifndef
gc_GCParallelTask_h
#
define
gc_GCParallelTask_h
#
include
"
threading
/
ProtectedData
.
h
"
struct
JSRuntime
;
namespace
js
{
class
GCParallelTask
{
JSRuntime
*
const
runtime_
;
enum
TaskState
{
NotStarted
Dispatched
Finished
}
;
UnprotectedData
<
TaskState
>
state
;
ActiveThreadOrGCTaskData
<
mozilla
:
:
TimeDuration
>
duration_
;
explicit
GCParallelTask
(
const
GCParallelTask
&
)
=
delete
;
protected
:
mozilla
:
:
Atomic
<
bool
>
cancel_
;
virtual
void
run
(
)
=
0
;
public
:
explicit
GCParallelTask
(
JSRuntime
*
runtime
)
:
runtime_
(
runtime
)
state
(
NotStarted
)
duration_
(
nullptr
)
{
}
GCParallelTask
(
GCParallelTask
&
&
other
)
:
runtime_
(
other
.
runtime_
)
state
(
other
.
state
)
duration_
(
nullptr
)
cancel_
(
false
)
{
}
virtual
~
GCParallelTask
(
)
;
JSRuntime
*
runtime
(
)
{
return
runtime_
;
}
mozilla
:
:
TimeDuration
duration
(
)
const
{
return
duration_
;
}
bool
start
(
)
;
void
join
(
)
;
bool
startWithLockHeld
(
AutoLockHelperThreadState
&
locked
)
;
void
joinWithLockHeld
(
AutoLockHelperThreadState
&
locked
)
;
void
runFromActiveCooperatingThread
(
JSRuntime
*
rt
)
;
enum
CancelMode
{
CancelNoWait
CancelAndWait
}
;
void
cancel
(
CancelMode
mode
=
CancelNoWait
)
{
cancel_
=
true
;
if
(
mode
=
=
CancelAndWait
)
join
(
)
;
}
bool
isRunningWithLockHeld
(
const
AutoLockHelperThreadState
&
locked
)
const
;
bool
isRunning
(
)
const
;
public
:
void
runFromHelperThread
(
AutoLockHelperThreadState
&
locked
)
;
}
;
}
#
endif
