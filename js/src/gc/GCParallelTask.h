#
ifndef
gc_GCParallelTask_h
#
define
gc_GCParallelTask_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
threading
/
ProtectedData
.
h
"
namespace
js
{
class
GCParallelTask
{
JSRuntime
*
const
runtime_
;
enum
class
State
{
NotStarted
Dispatched
Finished
}
;
UnprotectedData
<
State
>
state_
;
MainThreadOrGCTaskData
<
mozilla
:
:
TimeDuration
>
duration_
;
explicit
GCParallelTask
(
const
GCParallelTask
&
)
=
delete
;
protected
:
mozilla
:
:
Atomic
<
bool
mozilla
:
:
MemoryOrdering
:
:
ReleaseAcquire
>
cancel_
;
virtual
void
run
(
)
=
0
;
public
:
explicit
GCParallelTask
(
JSRuntime
*
runtime
)
:
runtime_
(
runtime
)
state_
(
State
:
:
NotStarted
)
duration_
(
nullptr
)
cancel_
(
false
)
{
}
GCParallelTask
(
GCParallelTask
&
&
other
)
:
runtime_
(
other
.
runtime_
)
state_
(
other
.
state_
)
duration_
(
nullptr
)
cancel_
(
false
)
{
}
virtual
~
GCParallelTask
(
)
;
JSRuntime
*
runtime
(
)
{
return
runtime_
;
}
mozilla
:
:
TimeDuration
duration
(
)
const
{
return
duration_
;
}
bool
start
(
)
;
void
join
(
)
;
bool
startWithLockHeld
(
AutoLockHelperThreadState
&
locked
)
;
void
joinWithLockHeld
(
AutoLockHelperThreadState
&
locked
)
;
void
runFromMainThread
(
JSRuntime
*
rt
)
;
void
cancelAndWait
(
)
{
cancel_
=
true
;
join
(
)
;
}
bool
isRunningWithLockHeld
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
isDispatched
(
lock
)
;
}
bool
isRunning
(
)
const
;
private
:
void
assertNotStarted
(
)
const
{
MOZ_ASSERT
(
state_
=
=
State
:
:
NotStarted
)
;
}
bool
isNotStarted
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
state_
=
=
State
:
:
NotStarted
;
}
bool
isDispatched
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
state_
=
=
State
:
:
Dispatched
;
}
bool
isFinished
(
const
AutoLockHelperThreadState
&
lock
)
const
{
return
state_
=
=
State
:
:
Finished
;
}
void
setDispatched
(
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
NotStarted
)
;
state_
=
State
:
:
Dispatched
;
}
void
setFinished
(
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Dispatched
)
;
state_
=
State
:
:
Finished
;
}
void
setNotStarted
(
const
AutoLockHelperThreadState
&
lock
)
{
MOZ_ASSERT
(
state_
=
=
State
:
:
Finished
)
;
state_
=
State
:
:
NotStarted
;
}
public
:
void
runFromHelperThread
(
AutoLockHelperThreadState
&
locked
)
;
}
;
}
#
endif
