#
include
"
gc
/
Barrier
.
h
"
#
include
"
gc
/
Marking
.
h
"
#
include
"
jit
/
JitContext
.
h
"
#
include
"
js
/
HashTable
.
h
"
#
include
"
js
/
shadow
/
Zone
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
vm
/
BigIntType
.
h
"
#
include
"
vm
/
EnvironmentObject
.
h
"
#
include
"
vm
/
GeneratorObject
.
h
"
#
include
"
vm
/
JSObject
.
h
"
#
include
"
vm
/
PropMap
.
h
"
#
include
"
wasm
/
WasmJS
.
h
"
#
include
"
gc
/
Zone
-
inl
.
h
"
namespace
js
{
bool
RuntimeFromMainThreadIsHeapMajorCollecting
(
JS
:
:
shadow
:
:
Zone
*
shadowZone
)
{
MOZ_ASSERT
(
CurrentThreadCanAccessRuntime
(
shadowZone
-
>
runtimeFromMainThread
(
)
)
)
;
return
JS
:
:
RuntimeHeapIsMajorCollecting
(
)
;
}
#
ifdef
DEBUG
bool
IsMarkedBlack
(
JSObject
*
obj
)
{
return
obj
-
>
isMarkedBlack
(
)
;
}
bool
HeapSlot
:
:
preconditionForSet
(
NativeObject
*
owner
Kind
kind
uint32_t
slot
)
const
{
if
(
kind
=
=
Slot
)
{
return
&
owner
-
>
getSlotRef
(
slot
)
=
=
this
;
}
uint32_t
numShifted
=
owner
-
>
getElementsHeader
(
)
-
>
numShiftedElements
(
)
;
MOZ_ASSERT
(
slot
>
=
numShifted
)
;
return
&
owner
-
>
getDenseElement
(
slot
-
numShifted
)
=
=
(
const
Value
*
)
this
;
}
void
HeapSlot
:
:
assertPreconditionForPostWriteBarrier
(
NativeObject
*
obj
Kind
kind
uint32_t
slot
const
Value
&
target
)
const
{
if
(
kind
=
=
Slot
)
{
MOZ_ASSERT
(
obj
-
>
getSlotAddressUnchecked
(
slot
)
-
>
get
(
)
=
=
target
)
;
}
else
{
uint32_t
numShifted
=
obj
-
>
getElementsHeader
(
)
-
>
numShiftedElements
(
)
;
MOZ_ASSERT
(
slot
>
=
numShifted
)
;
MOZ_ASSERT
(
static_cast
<
HeapSlot
*
>
(
obj
-
>
getDenseElements
(
)
+
(
slot
-
numShifted
)
)
-
>
get
(
)
=
=
target
)
;
}
if
(
!
obj
-
>
zone
(
)
-
>
isGCPreparing
(
)
)
{
AssertTargetIsNotGray
(
obj
)
;
}
}
bool
CurrentThreadIsIonCompiling
(
)
{
jit
:
:
JitContext
*
jcx
=
jit
:
:
MaybeGetJitContext
(
)
;
return
jcx
&
&
jcx
-
>
inIonBackend
(
)
;
}
#
endif
template
<
typename
T
>
bool
MovableCellHasher
<
T
>
:
:
maybeGetHash
(
const
Lookup
&
l
HashNumber
*
hashOut
)
{
if
(
!
l
)
{
*
hashOut
=
0
;
return
true
;
}
return
l
-
>
zoneFromAnyThread
(
)
-
>
maybeGetHashCode
(
l
hashOut
)
;
}
template
<
typename
T
>
bool
MovableCellHasher
<
T
>
:
:
ensureHash
(
const
Lookup
&
l
HashNumber
*
hashOut
)
{
if
(
!
l
)
{
*
hashOut
=
0
;
return
true
;
}
return
l
-
>
zoneFromAnyThread
(
)
-
>
getOrCreateHashCode
(
l
hashOut
)
;
}
template
<
typename
T
>
HashNumber
MovableCellHasher
<
T
>
:
:
hash
(
const
Lookup
&
l
)
{
if
(
!
l
)
{
return
0
;
}
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
l
-
>
zoneFromAnyThread
(
)
)
|
|
CurrentThreadIsPerformingGC
(
)
)
;
return
l
-
>
zoneFromAnyThread
(
)
-
>
getHashCodeInfallible
(
l
)
;
}
template
<
typename
T
>
bool
MovableCellHasher
<
T
>
:
:
match
(
const
Key
&
k
const
Lookup
&
l
)
{
if
(
k
=
=
l
)
{
return
true
;
}
if
(
!
k
|
|
!
l
)
{
return
false
;
}
MOZ_ASSERT
(
CurrentThreadCanAccessZone
(
l
-
>
zoneFromAnyThread
(
)
)
|
|
CurrentThreadIsPerformingGC
(
)
)
;
Zone
*
zone
=
k
-
>
zoneFromAnyThread
(
)
;
if
(
zone
!
=
l
-
>
zoneFromAnyThread
(
)
)
{
return
false
;
}
#
ifdef
DEBUG
if
(
!
zone
-
>
hasUniqueId
(
k
)
)
{
Key
key
=
k
;
MOZ_ASSERT
(
IsAboutToBeFinalizedUnbarriered
(
key
)
)
;
}
MOZ_ASSERT
(
zone
-
>
hasUniqueId
(
l
)
)
;
#
endif
uint64_t
keyId
;
if
(
!
zone
-
>
maybeGetUniqueId
(
k
&
keyId
)
)
{
return
false
;
}
return
keyId
=
=
zone
-
>
getUniqueIdInfallible
(
l
)
;
}
#
if
!
MOZ_IS_GCC
template
struct
JS_PUBLIC_API
MovableCellHasher
<
JSObject
*
>
;
#
endif
template
struct
JS_PUBLIC_API
MovableCellHasher
<
AbstractGeneratorObject
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
EnvironmentObject
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
GlobalObject
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
JSScript
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
BaseScript
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
PropMap
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
ScriptSourceObject
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
SavedFrame
*
>
;
template
struct
JS_PUBLIC_API
MovableCellHasher
<
WasmInstanceObject
*
>
;
}
JS_PUBLIC_API
void
JS
:
:
HeapObjectPostWriteBarrier
(
JSObject
*
*
objp
JSObject
*
prev
JSObject
*
next
)
{
MOZ_ASSERT
(
objp
)
;
js
:
:
InternalBarrierMethods
<
JSObject
*
>
:
:
postBarrier
(
objp
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapStringPostWriteBarrier
(
JSString
*
*
strp
JSString
*
prev
JSString
*
next
)
{
MOZ_ASSERT
(
strp
)
;
js
:
:
InternalBarrierMethods
<
JSString
*
>
:
:
postBarrier
(
strp
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapBigIntPostWriteBarrier
(
JS
:
:
BigInt
*
*
bip
JS
:
:
BigInt
*
prev
JS
:
:
BigInt
*
next
)
{
MOZ_ASSERT
(
bip
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
BigInt
*
>
:
:
postBarrier
(
bip
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapValuePostWriteBarrier
(
JS
:
:
Value
*
valuep
const
Value
&
prev
const
Value
&
next
)
{
MOZ_ASSERT
(
valuep
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
Value
>
:
:
postBarrier
(
valuep
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapObjectWriteBarriers
(
JSObject
*
*
objp
JSObject
*
prev
JSObject
*
next
)
{
MOZ_ASSERT
(
objp
)
;
js
:
:
InternalBarrierMethods
<
JSObject
*
>
:
:
preBarrier
(
prev
)
;
js
:
:
InternalBarrierMethods
<
JSObject
*
>
:
:
postBarrier
(
objp
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapStringWriteBarriers
(
JSString
*
*
strp
JSString
*
prev
JSString
*
next
)
{
MOZ_ASSERT
(
strp
)
;
js
:
:
InternalBarrierMethods
<
JSString
*
>
:
:
preBarrier
(
prev
)
;
js
:
:
InternalBarrierMethods
<
JSString
*
>
:
:
postBarrier
(
strp
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapBigIntWriteBarriers
(
JS
:
:
BigInt
*
*
bip
JS
:
:
BigInt
*
prev
JS
:
:
BigInt
*
next
)
{
MOZ_ASSERT
(
bip
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
BigInt
*
>
:
:
preBarrier
(
prev
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
BigInt
*
>
:
:
postBarrier
(
bip
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapScriptWriteBarriers
(
JSScript
*
*
scriptp
JSScript
*
prev
JSScript
*
next
)
{
MOZ_ASSERT
(
scriptp
)
;
js
:
:
InternalBarrierMethods
<
JSScript
*
>
:
:
preBarrier
(
prev
)
;
js
:
:
InternalBarrierMethods
<
JSScript
*
>
:
:
postBarrier
(
scriptp
prev
next
)
;
}
JS_PUBLIC_API
void
JS
:
:
HeapValueWriteBarriers
(
JS
:
:
Value
*
valuep
const
Value
&
prev
const
Value
&
next
)
{
MOZ_ASSERT
(
valuep
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
Value
>
:
:
preBarrier
(
prev
)
;
js
:
:
InternalBarrierMethods
<
JS
:
:
Value
>
:
:
postBarrier
(
valuep
prev
next
)
;
}
