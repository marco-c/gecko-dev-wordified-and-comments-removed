#
ifndef
gc_AtomMarking_h
#
define
gc_AtomMarking_h
#
include
"
NamespaceImports
.
h
"
#
include
"
gc
/
Heap
.
h
"
namespace
js
{
namespace
gc
{
class
AtomMarkingRuntime
{
Vector
<
size_t
0
SystemAllocPolicy
>
freeArenaIndexes
;
mozilla
:
:
Atomic
<
size_t
>
allocatedWords
;
public
:
typedef
Vector
<
uintptr_t
0
SystemAllocPolicy
>
Bitmap
;
AtomMarkingRuntime
(
)
:
allocatedWords
(
0
)
{
}
void
registerArena
(
Arena
*
arena
)
;
void
unregisterArena
(
Arena
*
arena
)
;
bool
computeBitmapFromChunkMarkBits
(
JSRuntime
*
runtime
Bitmap
&
bitmap
)
;
void
updateZoneBitmap
(
Zone
*
zone
const
Bitmap
&
bitmap
)
;
void
updateChunkMarkBits
(
JSRuntime
*
runtime
)
;
void
markAtom
(
ExclusiveContext
*
cx
TenuredCell
*
thing
)
;
void
markId
(
ExclusiveContext
*
cx
jsid
id
)
;
void
markAtomValue
(
ExclusiveContext
*
cx
const
Value
&
value
)
;
void
adoptMarkedAtoms
(
Zone
*
target
Zone
*
source
)
;
#
ifdef
DEBUG
bool
atomIsMarked
(
Zone
*
zone
Cell
*
thing
)
;
bool
idIsMarked
(
Zone
*
zone
jsid
id
)
;
bool
valueIsMarked
(
Zone
*
zone
const
Value
&
value
)
;
#
endif
}
;
}
}
#
endif
