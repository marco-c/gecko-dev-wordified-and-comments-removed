#
ifndef
gc_Tenuring_h
#
define
gc_Tenuring_h
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
gc
/
AllocKind
.
h
"
#
include
"
js
/
GCAPI
.
h
"
#
include
"
js
/
TracingAPI
.
h
"
#
include
"
util
/
Text
.
h
"
namespace
js
{
class
NativeObject
;
class
Nursery
;
class
PlainObject
;
namespace
wasm
{
class
AnyRef
;
}
namespace
gc
{
class
ArenaCellSet
;
class
RelocationOverlay
;
class
StringRelocationOverlay
;
template
<
typename
Key
>
struct
DeduplicationStringHasher
{
using
Lookup
=
Key
;
static
inline
HashNumber
hash
(
const
Lookup
&
lookup
)
;
static
MOZ_ALWAYS_INLINE
bool
match
(
const
Key
&
key
const
Lookup
&
lookup
)
;
}
;
class
TenuringTracer
final
:
public
JSTracer
{
Nursery
&
nursery_
;
size_t
promotedSize
=
0
;
size_t
promotedCells
=
0
;
gc
:
:
RelocationOverlay
*
objHead
=
nullptr
;
gc
:
:
StringRelocationOverlay
*
stringHead
=
nullptr
;
using
StringDeDupSet
=
HashSet
<
JSString
*
DeduplicationStringHasher
<
JSString
*
>
SystemAllocPolicy
>
;
mozilla
:
:
Maybe
<
StringDeDupSet
>
stringDeDupSet
;
bool
tenureEverything
;
bool
promotedToNursery
=
false
;
#
define
DEFINE_ON_EDGE_METHOD
(
name
type
_1
_2
)
\
void
on
#
#
name
#
#
Edge
(
type
*
*
thingp
const
char
*
name
)
override
;
JS_FOR_EACH_TRACEKIND
(
DEFINE_ON_EDGE_METHOD
)
#
undef
DEFINE_ON_EDGE_METHOD
public
:
TenuringTracer
(
JSRuntime
*
rt
Nursery
*
nursery
bool
tenureEverything
)
;
Nursery
&
nursery
(
)
{
return
nursery_
;
}
void
collectToObjectFixedPoint
(
)
;
void
collectToStringFixedPoint
(
)
;
size_t
getPromotedSize
(
)
const
;
size_t
getPromotedCells
(
)
const
;
void
traverse
(
JS
:
:
Value
*
thingp
)
;
void
traverse
(
wasm
:
:
AnyRef
*
thingp
)
;
void
traceObject
(
JSObject
*
obj
)
;
void
traceObjectSlots
(
NativeObject
*
nobj
uint32_t
start
uint32_t
end
)
;
void
traceObjectElements
(
JS
:
:
Value
*
vp
uint32_t
count
)
;
void
traceString
(
JSString
*
str
)
;
void
traceBigInt
(
JS
:
:
BigInt
*
bi
)
;
JSObject
*
promoteOrForward
(
JSObject
*
obj
)
;
JSString
*
promoteOrForward
(
JSString
*
str
)
;
JS
:
:
BigInt
*
promoteOrForward
(
JS
:
:
BigInt
*
bip
)
;
template
<
typename
T
>
void
traceBufferedCells
(
Arena
*
arena
ArenaCellSet
*
cells
)
;
class
AutoPromotedAnyToNursery
;
private
:
MOZ_ALWAYS_INLINE
JSObject
*
onNonForwardedNurseryObject
(
JSObject
*
obj
)
;
MOZ_ALWAYS_INLINE
JSString
*
onNonForwardedNurseryString
(
JSString
*
str
)
;
MOZ_ALWAYS_INLINE
JS
:
:
BigInt
*
onNonForwardedNurseryBigInt
(
JS
:
:
BigInt
*
bi
)
;
template
<
typename
CharT
>
void
relocateDependentStringChars
(
JSDependentString
*
tenuredDependentStr
JSLinearString
*
baseOrRelocOverlay
size_t
*
offset
bool
*
rootBaseNotYetForwarded
JSLinearString
*
*
rootBase
)
;
inline
void
insertIntoObjectFixupList
(
gc
:
:
RelocationOverlay
*
entry
)
;
inline
void
insertIntoStringFixupList
(
gc
:
:
StringRelocationOverlay
*
entry
)
;
template
<
typename
T
>
T
*
alloc
(
JS
:
:
Zone
*
zone
gc
:
:
AllocKind
kind
gc
:
:
Cell
*
src
)
;
template
<
JS
:
:
TraceKind
traceKind
>
void
*
allocCell
(
JS
:
:
Zone
*
zone
gc
:
:
AllocKind
allocKind
gc
:
:
Cell
*
src
)
;
JSString
*
allocString
(
JSString
*
src
JS
:
:
Zone
*
zone
gc
:
:
AllocKind
dstKind
)
;
bool
shouldTenure
(
Zone
*
zone
JS
:
:
TraceKind
traceKind
Cell
*
cell
)
;
inline
JSObject
*
promotePlainObject
(
PlainObject
*
src
)
;
JSObject
*
promoteObjectSlow
(
JSObject
*
src
)
;
JSString
*
promoteString
(
JSString
*
src
)
;
JS
:
:
BigInt
*
promoteBigInt
(
JS
:
:
BigInt
*
src
)
;
size_t
moveElements
(
NativeObject
*
dst
NativeObject
*
src
gc
:
:
AllocKind
dstKind
)
;
size_t
moveSlots
(
NativeObject
*
dst
NativeObject
*
src
)
;
size_t
moveString
(
JSString
*
dst
JSString
*
src
gc
:
:
AllocKind
dstKind
)
;
size_t
moveBigInt
(
JS
:
:
BigInt
*
dst
JS
:
:
BigInt
*
src
gc
:
:
AllocKind
dstKind
)
;
void
traceSlots
(
JS
:
:
Value
*
vp
JS
:
:
Value
*
end
)
;
}
;
}
}
#
endif
