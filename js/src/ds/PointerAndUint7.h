#
ifndef
gc_PointerAndUint7_h
#
define
gc_PointerAndUint7_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
stdint
.
h
>
namespace
js
{
#
ifdef
JS_64BIT
class
PointerAndUint7
final
{
uint64_t
val_
;
static
const
uint8_t
SHIFT_PTR
=
7
;
static
const
uint64_t
MASK_UINT7
=
(
uint64_t
(
1
)
<
<
SHIFT_PTR
)
-
1
;
static
inline
bool
isRepresentablePtr
(
void
*
ptr
)
{
int64_t
s
=
int64_t
(
ptr
)
;
s
>
>
=
(
64
-
SHIFT_PTR
-
1
)
;
uint64_t
u
=
uint64_t
(
s
)
;
u
+
=
1
;
return
u
<
=
uint64_t
(
1
)
;
}
static
inline
bool
isRepresentableUint7
(
uint32_t
uint7
)
{
return
uint7
<
=
MASK_UINT7
;
}
public
:
inline
PointerAndUint7
(
)
:
val_
(
0
)
{
}
inline
PointerAndUint7
(
void
*
ptr
uint32_t
uint7
)
:
val_
(
(
uint64_t
(
ptr
)
<
<
SHIFT_PTR
)
|
(
uint64_t
(
uint7
&
MASK_UINT7
)
)
)
{
MOZ_ASSERT
(
isRepresentablePtr
(
ptr
)
)
;
MOZ_ASSERT
(
isRepresentableUint7
(
uint7
)
)
;
}
inline
void
*
pointer
(
)
const
{
return
(
void
*
)
(
int64_t
(
val_
)
>
>
SHIFT_PTR
)
;
}
inline
uint32_t
uint7
(
)
const
{
return
uint32_t
(
val_
&
MASK_UINT7
)
;
}
}
;
static_assert
(
sizeof
(
void
*
)
=
=
8
)
;
static_assert
(
(
(
int64_t
(
1
)
<
<
63
)
>
>
63
)
=
=
int64_t
(
0xFFFFFFFFFFFFFFFFULL
)
)
;
#
else
class
PointerAndUint7
final
{
uint64_t
val_
;
static
const
uint8_t
SHIFT_PTR
=
32
;
static
const
uint64_t
MASK_UINT7
=
(
uint64_t
(
1
)
<
<
7
)
-
1
;
static
inline
bool
isRepresentableUint7
(
uint32_t
uint7
)
{
return
uint7
<
=
MASK_UINT7
;
}
public
:
inline
PointerAndUint7
(
)
:
val_
(
0
)
{
}
inline
PointerAndUint7
(
void
*
ptr
uint32_t
uint7
)
:
val_
(
(
uint64_t
(
uint32_t
(
ptr
)
)
<
<
SHIFT_PTR
)
|
(
uint64_t
(
uint7
)
&
MASK_UINT7
)
)
{
MOZ_ASSERT
(
isRepresentableUint7
(
uint7
)
)
;
}
inline
void
*
pointer
(
)
const
{
return
(
void
*
)
(
int32_t
(
val_
>
>
SHIFT_PTR
)
)
;
}
inline
uint32_t
uint7
(
)
const
{
return
uint32_t
(
val_
&
MASK_UINT7
)
;
}
}
;
static_assert
(
sizeof
(
void
*
)
=
=
4
)
;
#
endif
static_assert
(
sizeof
(
PointerAndUint7
)
=
=
8
)
;
}
#
endif
