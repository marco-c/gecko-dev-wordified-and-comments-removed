#
ifndef
ds_BitArray_h
#
define
ds_BitArray_h
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
TemplateLib
.
h
"
#
include
<
limits
.
h
>
#
include
<
string
.
h
>
#
include
"
jstypes
.
h
"
namespace
js
{
namespace
detail
{
template
<
typename
WordT
>
inline
uint_fast8_t
CountTrailingZeroes
(
WordT
word
)
;
template
<
>
inline
uint_fast8_t
CountTrailingZeroes
(
uint32_t
word
)
{
return
mozilla
:
:
CountTrailingZeroes32
(
word
)
;
}
template
<
>
inline
uint_fast8_t
CountTrailingZeroes
(
uint64_t
word
)
{
return
mozilla
:
:
CountTrailingZeroes64
(
word
)
;
}
}
template
<
size_t
nbits
>
class
BitArray
{
public
:
using
WordT
=
uint32_t
;
static
const
size_t
bitsPerElement
=
sizeof
(
WordT
)
*
CHAR_BIT
;
static
const
size_t
numSlots
=
nbits
/
bitsPerElement
+
(
nbits
%
bitsPerElement
=
=
0
?
0
:
1
)
;
private
:
static
const
size_t
paddingBits
=
(
numSlots
*
bitsPerElement
)
-
nbits
;
static_assert
(
paddingBits
<
bitsPerElement
"
More
padding
bits
than
expected
.
"
)
;
static
const
WordT
paddingMask
=
WordT
(
-
1
)
>
>
paddingBits
;
WordT
map
[
numSlots
]
;
public
:
constexpr
BitArray
(
)
:
map
(
)
{
}
;
void
clear
(
bool
value
)
{
memset
(
map
value
?
0xFF
:
0
sizeof
(
map
)
)
;
if
(
value
)
{
map
[
numSlots
-
1
]
&
=
paddingMask
;
}
}
inline
bool
get
(
size_t
offset
)
const
{
size_t
index
;
WordT
mask
;
getIndexAndMask
(
offset
&
index
&
mask
)
;
MOZ_ASSERT
(
index
<
nbits
)
;
return
map
[
index
]
&
mask
;
}
void
set
(
size_t
offset
)
{
size_t
index
;
WordT
mask
;
getIndexAndMask
(
offset
&
index
&
mask
)
;
map
[
index
]
|
=
mask
;
}
void
unset
(
size_t
offset
)
{
size_t
index
;
WordT
mask
;
getIndexAndMask
(
offset
&
index
&
mask
)
;
map
[
index
]
&
=
~
mask
;
}
bool
isAllClear
(
)
const
{
for
(
size_t
i
=
0
;
i
<
numSlots
;
i
+
+
)
{
if
(
map
[
i
]
)
{
return
false
;
}
}
return
true
;
}
WordT
getWord
(
size_t
elementIndex
)
const
{
MOZ_ASSERT
(
elementIndex
<
nbits
)
;
return
map
[
elementIndex
]
;
}
static
void
getIndexAndMask
(
size_t
offset
size_t
*
indexp
WordT
*
maskp
)
{
MOZ_ASSERT
(
offset
<
nbits
)
;
static_assert
(
bitsPerElement
=
=
32
"
unexpected
bitsPerElement
value
"
)
;
*
indexp
=
offset
/
bitsPerElement
;
*
maskp
=
WordT
(
1
)
<
<
(
offset
%
bitsPerElement
)
;
}
static
size_t
offsetOfMap
(
)
{
return
offsetof
(
BitArray
<
nbits
>
map
)
;
}
}
;
}
#
endif
