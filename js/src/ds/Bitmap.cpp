#
include
"
ds
/
Bitmap
.
h
"
using
namespace
js
;
SparseBitmap
:
:
~
SparseBitmap
(
)
{
if
(
data
.
initialized
(
)
)
{
for
(
Data
:
:
Range
r
(
data
.
all
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
js_delete
(
r
.
front
(
)
.
value
(
)
)
;
}
}
size_t
SparseBitmap
:
:
sizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
size_t
size
=
data
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
Data
:
:
Range
r
(
data
.
all
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
size
+
=
mallocSizeOf
(
r
.
front
(
)
.
value
(
)
)
;
return
size
;
}
SparseBitmap
:
:
BitBlock
&
SparseBitmap
:
:
getOrCreateBlock
(
size_t
blockId
)
{
Data
:
:
AddPtr
p
=
data
.
lookupForAdd
(
blockId
)
;
if
(
!
p
)
{
AutoEnterOOMUnsafeRegion
oomUnsafe
;
BitBlock
*
block
=
js_new
<
BitBlock
>
(
)
;
if
(
!
block
|
|
!
data
.
add
(
p
blockId
block
)
)
oomUnsafe
.
crash
(
"
Bitmap
OOM
"
)
;
PodZero
(
block
)
;
}
return
*
p
-
>
value
(
)
;
}
void
SparseBitmap
:
:
setBit
(
size_t
bit
)
{
size_t
word
=
bit
/
JS_BITS_PER_WORD
;
size_t
blockWord
=
blockStartWord
(
word
)
;
BitBlock
&
block
=
getOrCreateBlock
(
blockWord
/
WordsInBlock
)
;
block
[
word
-
blockWord
]
|
=
uintptr_t
(
1
)
<
<
(
bit
%
JS_BITS_PER_WORD
)
;
}
SparseBitmap
:
:
BitBlock
*
SparseBitmap
:
:
getBlock
(
size_t
blockId
)
const
{
Data
:
:
Ptr
p
=
data
.
lookup
(
blockId
)
;
return
p
?
p
-
>
value
(
)
:
nullptr
;
}
bool
SparseBitmap
:
:
getBit
(
size_t
bit
)
const
{
size_t
word
=
bit
/
JS_BITS_PER_WORD
;
size_t
blockWord
=
blockStartWord
(
word
)
;
BitBlock
*
block
=
getBlock
(
blockWord
/
WordsInBlock
)
;
if
(
block
)
return
(
*
block
)
[
word
-
blockWord
]
&
(
uintptr_t
(
1
)
<
<
(
bit
%
JS_BITS_PER_WORD
)
)
;
return
false
;
}
void
SparseBitmap
:
:
bitwiseAndWith
(
const
DenseBitmap
&
other
)
{
for
(
Data
:
:
Enum
e
(
data
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
BitBlock
&
block
=
*
e
.
front
(
)
.
value
(
)
;
size_t
blockWord
=
e
.
front
(
)
.
key
(
)
*
WordsInBlock
;
bool
anySet
=
false
;
size_t
numWords
=
wordIntersectCount
(
blockWord
other
)
;
for
(
size_t
i
=
0
;
i
<
numWords
;
i
+
+
)
{
block
[
i
]
&
=
other
.
word
(
blockWord
+
i
)
;
anySet
|
=
!
!
block
[
i
]
;
}
if
(
!
anySet
)
{
js_delete
(
&
block
)
;
e
.
removeFront
(
)
;
}
}
}
void
SparseBitmap
:
:
bitwiseOrWith
(
const
SparseBitmap
&
other
)
{
for
(
Data
:
:
Range
r
(
other
.
data
.
all
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
const
BitBlock
&
otherBlock
=
*
r
.
front
(
)
.
value
(
)
;
BitBlock
&
block
=
getOrCreateBlock
(
r
.
front
(
)
.
key
(
)
)
;
for
(
size_t
i
=
0
;
i
<
WordsInBlock
;
i
+
+
)
block
[
i
]
|
=
otherBlock
[
i
]
;
}
}
void
SparseBitmap
:
:
bitwiseOrInto
(
DenseBitmap
&
other
)
const
{
for
(
Data
:
:
Range
r
(
data
.
all
(
)
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
BitBlock
&
block
=
*
r
.
front
(
)
.
value
(
)
;
size_t
blockWord
=
r
.
front
(
)
.
key
(
)
*
WordsInBlock
;
size_t
numWords
=
wordIntersectCount
(
blockWord
other
)
;
#
ifdef
DEBUG
for
(
size_t
i
=
numWords
;
i
<
WordsInBlock
;
i
+
+
)
MOZ_ASSERT
(
!
block
[
i
]
)
;
#
endif
for
(
size_t
i
=
0
;
i
<
numWords
;
i
+
+
)
other
.
word
(
blockWord
+
i
)
|
=
block
[
i
]
;
}
}
void
SparseBitmap
:
:
bitwiseOrRangeInto
(
size_t
wordStart
size_t
numWords
uintptr_t
*
target
)
const
{
size_t
blockWord
=
blockStartWord
(
wordStart
)
;
MOZ_ASSERT
(
numWords
&
&
(
blockWord
=
=
blockStartWord
(
wordStart
+
numWords
-
1
)
)
)
;
BitBlock
*
block
=
getBlock
(
blockWord
/
WordsInBlock
)
;
if
(
block
)
{
for
(
size_t
i
=
0
;
i
<
numWords
;
i
+
+
)
target
[
i
]
|
=
(
*
block
)
[
wordStart
-
blockWord
+
i
]
;
}
}
