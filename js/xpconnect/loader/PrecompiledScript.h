#
ifndef
mozilla_dom_PrecompiledScript_h
#
define
mozilla_dom_PrecompiledScript_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
PrecompiledScriptBinding
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
JS
{
class
ReadOnlyCompileOptions
;
}
namespace
mozilla
{
namespace
dom
{
class
PrecompiledScript
:
public
nsISupports
public
nsWrapperCache
{
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS
(
PrecompiledScript
)
explicit
PrecompiledScript
(
nsISupports
*
aParent
RefPtr
<
JS
:
:
Stencil
>
aStencil
JS
:
:
ReadOnlyCompileOptions
&
aOptions
)
;
void
ExecuteInGlobal
(
JSContext
*
aCx
JS
:
:
HandleObject
aGlobal
JS
:
:
MutableHandleValue
aRval
ErrorResult
&
aRv
)
;
void
GetUrl
(
nsAString
&
aUrl
)
;
bool
HasReturnValue
(
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
PrecompiledScript
(
)
=
default
;
private
:
bool
IsBlackForCC
(
bool
aTracingNeeded
)
;
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
JS
:
:
Stencil
>
mStencil
;
nsCString
mURL
;
const
bool
mHasReturnValue
;
}
;
}
}
#
endif
