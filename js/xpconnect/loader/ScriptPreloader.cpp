#
include
"
mozilla
/
ScriptPreloader
.
h
"
#
include
"
ScriptPreloader
-
inl
.
h
"
#
include
"
mozilla
/
loader
/
ScriptCacheActors
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
FileUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
xpcpublic
.
h
"
#
define
DELAYED_STARTUP_TOPIC
"
browser
-
delayed
-
startup
-
finished
"
#
define
DOC_ELEM_INSERTED_TOPIC
"
document
-
element
-
inserted
"
#
define
CLEANUP_TOPIC
"
xpcom
-
shutdown
"
#
define
SHUTDOWN_TOPIC
"
quit
-
application
-
granted
"
#
define
CACHE_INVALIDATE_TOPIC
"
startupcache
-
invalidate
"
namespace
mozilla
{
namespace
{
static
LazyLogModule
gLog
(
"
ScriptPreloader
"
)
;
#
define
LOG
(
level
.
.
.
)
MOZ_LOG
(
gLog
LogLevel
:
:
level
(
__VA_ARGS__
)
)
}
using
mozilla
:
:
dom
:
:
AutoJSAPI
;
using
mozilla
:
:
dom
:
:
ContentChild
;
using
mozilla
:
:
dom
:
:
ContentParent
;
using
namespace
mozilla
:
:
loader
;
ProcessType
ScriptPreloader
:
:
sProcessType
;
nsresult
ScriptPreloader
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
script
-
preloader
/
heap
/
saved
-
scripts
"
KIND_HEAP
UNITS_BYTES
SizeOfHashEntries
<
ScriptStatus
:
:
Saved
>
(
mScripts
MallocSizeOf
)
"
Memory
used
to
hold
the
scripts
which
have
been
executed
in
this
"
"
session
and
will
be
written
to
the
startup
script
cache
file
.
"
)
;
MOZ_COLLECT_REPORT
(
"
explicit
/
script
-
preloader
/
heap
/
restored
-
scripts
"
KIND_HEAP
UNITS_BYTES
SizeOfHashEntries
<
ScriptStatus
:
:
Restored
>
(
mScripts
MallocSizeOf
)
"
Memory
used
to
hold
the
scripts
which
have
been
restored
from
the
"
"
startup
script
cache
file
but
have
not
been
executed
in
this
session
.
"
)
;
MOZ_COLLECT_REPORT
(
"
explicit
/
script
-
preloader
/
heap
/
other
"
KIND_HEAP
UNITS_BYTES
ShallowHeapSizeOfIncludingThis
(
MallocSizeOf
)
"
Memory
used
by
the
script
cache
service
itself
.
"
)
;
MOZ_COLLECT_REPORT
(
"
explicit
/
script
-
preloader
/
non
-
heap
/
memmapped
-
cache
"
KIND_NONHEAP
UNITS_BYTES
mCacheData
.
nonHeapSizeOfExcludingThis
(
)
"
The
memory
-
mapped
startup
script
cache
file
.
"
)
;
return
NS_OK
;
}
ScriptPreloader
&
ScriptPreloader
:
:
GetSingleton
(
)
{
static
RefPtr
<
ScriptPreloader
>
singleton
;
if
(
!
singleton
)
{
if
(
XRE_IsParentProcess
(
)
)
{
singleton
=
new
ScriptPreloader
(
)
;
singleton
-
>
mChildCache
=
&
GetChildSingleton
(
)
;
Unused
<
<
singleton
-
>
InitCache
(
)
;
}
else
{
singleton
=
&
GetChildSingleton
(
)
;
}
ClearOnShutdown
(
&
singleton
)
;
}
return
*
singleton
;
}
ScriptPreloader
&
ScriptPreloader
:
:
GetChildSingleton
(
)
{
static
RefPtr
<
ScriptPreloader
>
singleton
;
if
(
!
singleton
)
{
singleton
=
new
ScriptPreloader
(
)
;
if
(
XRE_IsParentProcess
(
)
)
{
Unused
<
<
singleton
-
>
InitCache
(
NS_LITERAL_STRING
(
"
scriptCache
-
child
"
)
)
;
}
ClearOnShutdown
(
&
singleton
)
;
}
return
*
singleton
;
}
void
ScriptPreloader
:
:
InitContentChild
(
ContentParent
&
parent
)
{
auto
&
cache
=
GetChildSingleton
(
)
;
auto
processType
=
GetChildProcessType
(
parent
.
GetRemoteType
(
)
)
;
bool
wantScriptData
=
!
cache
.
mInitializedProcesses
.
contains
(
processType
)
;
cache
.
mInitializedProcesses
+
=
processType
;
auto
fd
=
cache
.
mCacheData
.
cloneFileDescriptor
(
)
;
if
(
fd
.
IsValid
(
)
&
&
!
cache
.
mCacheInvalidated
)
{
Unused
<
<
parent
.
SendPScriptCacheConstructor
(
fd
wantScriptData
)
;
}
else
{
Unused
<
<
parent
.
SendPScriptCacheConstructor
(
NS_ERROR_FILE_NOT_FOUND
wantScriptData
)
;
}
}
ProcessType
ScriptPreloader
:
:
GetChildProcessType
(
const
nsAString
&
remoteType
)
{
if
(
remoteType
.
EqualsLiteral
(
EXTENSION_REMOTE_TYPE
)
)
{
return
ProcessType
:
:
Extension
;
}
return
ProcessType
:
:
Web
;
}
namespace
{
static
void
TraceOp
(
JSTracer
*
trc
void
*
data
)
{
auto
preloader
=
static_cast
<
ScriptPreloader
*
>
(
data
)
;
preloader
-
>
Trace
(
trc
)
;
}
}
void
ScriptPreloader
:
:
Trace
(
JSTracer
*
trc
)
{
for
(
auto
&
script
:
IterHash
(
mScripts
)
)
{
JS
:
:
TraceEdge
(
trc
&
script
-
>
mScript
"
ScriptPreloader
:
:
CachedScript
.
mScript
"
)
;
}
}
ScriptPreloader
:
:
ScriptPreloader
(
)
:
mMonitor
(
"
[
ScriptPreloader
.
mMonitor
]
"
)
mSaveMonitor
(
"
[
ScriptPreloader
.
mSaveMonitor
]
"
)
{
if
(
XRE_IsParentProcess
(
)
)
{
sProcessType
=
ProcessType
:
:
Parent
;
}
else
{
sProcessType
=
GetChildProcessType
(
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
GetRemoteType
(
)
)
;
}
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
MOZ_RELEASE_ASSERT
(
obs
)
;
if
(
XRE_IsParentProcess
(
)
)
{
obs
-
>
AddObserver
(
this
DELAYED_STARTUP_TOPIC
false
)
;
}
else
{
obs
-
>
AddObserver
(
this
DOC_ELEM_INSERTED_TOPIC
false
)
;
}
obs
-
>
AddObserver
(
this
SHUTDOWN_TOPIC
false
)
;
obs
-
>
AddObserver
(
this
CLEANUP_TOPIC
false
)
;
obs
-
>
AddObserver
(
this
CACHE_INVALIDATE_TOPIC
false
)
;
AutoSafeJSAPI
jsapi
;
JS_AddExtraGCRootsTracer
(
jsapi
.
cx
(
)
TraceOp
this
)
;
}
void
ScriptPreloader
:
:
ForceWriteCacheFile
(
)
{
if
(
mSaveThread
)
{
MonitorAutoLock
mal
(
mSaveMonitor
)
;
mal
.
Notify
(
)
;
}
}
void
ScriptPreloader
:
:
Cleanup
(
)
{
if
(
mSaveThread
)
{
MonitorAutoLock
mal
(
mSaveMonitor
)
;
while
(
!
mSaveComplete
&
&
mSaveThread
)
{
mal
.
Wait
(
)
;
}
}
mScripts
.
Clear
(
)
;
AutoSafeJSAPI
jsapi
;
JS_RemoveExtraGCRootsTracer
(
jsapi
.
cx
(
)
TraceOp
this
)
;
UnregisterWeakMemoryReporter
(
this
)
;
}
void
ScriptPreloader
:
:
InvalidateCache
(
)
{
MonitorAutoLock
mal
(
mMonitor
)
;
mCacheInvalidated
=
true
;
for
(
auto
&
script
:
IterHash
(
mScripts
)
)
{
if
(
script
-
>
mReadyToExecute
)
{
script
-
>
Cancel
(
)
;
script
.
Remove
(
)
;
}
}
if
(
mSaveComplete
&
&
mChildCache
)
{
mSaveComplete
=
false
;
Unused
<
<
NS_NewNamedThread
(
"
SaveScripts
"
getter_AddRefs
(
mSaveThread
)
this
)
;
}
}
nsresult
ScriptPreloader
:
:
Observe
(
nsISupports
*
subject
const
char
*
topic
const
char16_t
*
data
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
!
strcmp
(
topic
DELAYED_STARTUP_TOPIC
)
)
{
obs
-
>
RemoveObserver
(
this
DELAYED_STARTUP_TOPIC
)
;
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
mStartupFinished
=
true
;
if
(
mChildCache
)
{
Unused
<
<
NS_NewNamedThread
(
"
SaveScripts
"
getter_AddRefs
(
mSaveThread
)
this
)
;
}
}
else
if
(
!
strcmp
(
topic
DOC_ELEM_INSERTED_TOPIC
)
)
{
obs
-
>
RemoveObserver
(
this
DOC_ELEM_INSERTED_TOPIC
)
;
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
mStartupFinished
=
true
;
if
(
mChildActor
)
{
mChildActor
-
>
SendScriptsAndFinalize
(
mScripts
)
;
}
}
else
if
(
!
strcmp
(
topic
SHUTDOWN_TOPIC
)
)
{
ForceWriteCacheFile
(
)
;
}
else
if
(
!
strcmp
(
topic
CLEANUP_TOPIC
)
)
{
Cleanup
(
)
;
}
else
if
(
!
strcmp
(
topic
CACHE_INVALIDATE_TOPIC
)
)
{
InvalidateCache
(
)
;
}
return
NS_OK
;
}
Result
<
nsCOMPtr
<
nsIFile
>
nsresult
>
ScriptPreloader
:
:
GetCacheFile
(
const
nsAString
&
suffix
)
{
nsCOMPtr
<
nsIFile
>
cacheFile
;
NS_TRY
(
mProfD
-
>
Clone
(
getter_AddRefs
(
cacheFile
)
)
)
;
NS_TRY
(
cacheFile
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
startupCache
"
)
)
)
;
Unused
<
<
cacheFile
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
0777
)
;
NS_TRY
(
cacheFile
-
>
Append
(
mBaseName
+
suffix
)
)
;
return
Move
(
cacheFile
)
;
}
static
const
uint8_t
MAGIC
[
]
=
"
mozXDRcachev001
"
;
Result
<
Ok
nsresult
>
ScriptPreloader
:
:
OpenCache
(
)
{
NS_TRY
(
NS_GetSpecialDirectory
(
"
ProfLDS
"
getter_AddRefs
(
mProfD
)
)
)
;
nsCOMPtr
<
nsIFile
>
cacheFile
;
MOZ_TRY_VAR
(
cacheFile
GetCacheFile
(
NS_LITERAL_STRING
(
"
.
bin
"
)
)
)
;
bool
exists
;
NS_TRY
(
cacheFile
-
>
Exists
(
&
exists
)
)
;
if
(
exists
)
{
NS_TRY
(
cacheFile
-
>
MoveTo
(
nullptr
mBaseName
+
NS_LITERAL_STRING
(
"
-
current
.
bin
"
)
)
)
;
}
else
{
NS_TRY
(
cacheFile
-
>
SetLeafName
(
mBaseName
+
NS_LITERAL_STRING
(
"
-
current
.
bin
"
)
)
)
;
NS_TRY
(
cacheFile
-
>
Exists
(
&
exists
)
)
;
if
(
!
exists
)
{
return
Err
(
NS_ERROR_FILE_NOT_FOUND
)
;
}
}
MOZ_TRY
(
mCacheData
.
init
(
cacheFile
)
)
;
return
Ok
(
)
;
}
Result
<
Ok
nsresult
>
ScriptPreloader
:
:
InitCache
(
const
nsAString
&
basePath
)
{
mCacheInitialized
=
true
;
mBaseName
=
basePath
;
RegisterWeakMemoryReporter
(
this
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
Ok
(
)
;
}
MOZ_TRY
(
OpenCache
(
)
)
;
return
InitCacheInternal
(
)
;
}
Result
<
Ok
nsresult
>
ScriptPreloader
:
:
InitCache
(
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
cacheFile
ScriptCacheChild
*
cacheChild
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
)
;
mCacheInitialized
=
true
;
mChildActor
=
cacheChild
;
RegisterWeakMemoryReporter
(
this
)
;
if
(
cacheFile
.
isNothing
(
)
)
{
return
Ok
(
)
;
}
MOZ_TRY
(
mCacheData
.
init
(
cacheFile
.
ref
(
)
)
)
;
return
InitCacheInternal
(
)
;
}
Result
<
Ok
nsresult
>
ScriptPreloader
:
:
InitCacheInternal
(
)
{
auto
size
=
mCacheData
.
size
(
)
;
uint32_t
headerSize
;
if
(
size
<
sizeof
(
MAGIC
)
+
sizeof
(
headerSize
)
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
auto
data
=
mCacheData
.
get
<
uint8_t
>
(
)
;
auto
end
=
data
+
size
;
if
(
memcmp
(
MAGIC
data
.
get
(
)
sizeof
(
MAGIC
)
)
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
data
+
=
sizeof
(
MAGIC
)
;
headerSize
=
LittleEndian
:
:
readUint32
(
data
.
get
(
)
)
;
data
+
=
sizeof
(
headerSize
)
;
if
(
data
+
headerSize
>
end
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
AutoTArray
<
CachedScript
*
256
>
scripts
;
{
auto
cleanup
=
MakeScopeExit
(
[
&
]
(
)
{
mScripts
.
Clear
(
)
;
}
)
;
Range
<
uint8_t
>
header
(
data
data
+
headerSize
)
;
data
+
=
headerSize
;
InputBuffer
buf
(
header
)
;
size_t
offset
=
0
;
while
(
!
buf
.
finished
(
)
)
{
auto
script
=
MakeUnique
<
CachedScript
>
(
*
this
buf
)
;
MOZ_RELEASE_ASSERT
(
script
)
;
auto
scriptData
=
data
+
script
-
>
mOffset
;
if
(
scriptData
+
script
-
>
mSize
>
end
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
if
(
script
-
>
mOffset
!
=
offset
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
offset
+
=
script
-
>
mSize
;
script
-
>
mXDRRange
.
emplace
(
scriptData
scriptData
+
script
-
>
mSize
)
;
scripts
.
AppendElement
(
script
.
get
(
)
)
;
mScripts
.
Put
(
script
-
>
mCachePath
script
.
get
(
)
)
;
Unused
<
<
script
.
release
(
)
;
}
if
(
buf
.
error
(
)
)
{
return
Err
(
NS_ERROR_UNEXPECTED
)
;
}
cleanup
.
release
(
)
;
}
AutoJSAPI
jsapi
;
MOZ_RELEASE_ASSERT
(
jsapi
.
Init
(
xpc
:
:
CompilationScope
(
)
)
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
auto
start
=
TimeStamp
:
:
Now
(
)
;
LOG
(
Info
"
Off
-
thread
decoding
scripts
.
.
.
\
n
"
)
;
JS
:
:
CompileOptions
options
(
cx
JSVERSION_LATEST
)
;
for
(
auto
&
script
:
scripts
)
{
if
(
script
-
>
mProcessTypes
.
contains
(
CurrentProcessType
(
)
)
&
&
script
-
>
AsyncDecodable
(
)
&
&
JS
:
:
CanCompileOffThread
(
cx
options
script
-
>
mSize
)
)
{
DecodeScriptOffThread
(
cx
script
)
;
}
else
{
script
-
>
mReadyToExecute
=
true
;
}
}
LOG
(
Info
"
Initialized
decoding
in
%
fms
\
n
"
(
TimeStamp
:
:
Now
(
)
-
start
)
.
ToMilliseconds
(
)
)
;
return
Ok
(
)
;
}
static
inline
Result
<
Ok
nsresult
>
Write
(
PRFileDesc
*
fd
const
void
*
data
int32_t
len
)
{
if
(
PR_Write
(
fd
data
len
)
!
=
len
)
{
return
Err
(
NS_ERROR_FAILURE
)
;
}
return
Ok
(
)
;
}
void
ScriptPreloader
:
:
PrepareCacheWrite
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
cleanup
=
MakeScopeExit
(
[
&
]
(
)
{
if
(
mChildCache
)
{
mChildCache
-
>
PrepareCacheWrite
(
)
;
}
}
)
;
if
(
mDataPrepared
)
{
return
;
}
AutoSafeJSAPI
jsapi
;
bool
found
=
false
;
for
(
auto
&
script
:
IterHash
(
mScripts
Match
<
ScriptStatus
:
:
Saved
>
(
)
)
)
{
CachedScript
*
childScript
=
mChildCache
?
mChildCache
-
>
mScripts
.
Get
(
script
-
>
mCachePath
)
:
nullptr
;
if
(
childScript
&
&
!
childScript
-
>
mProcessTypes
.
isEmpty
(
)
)
{
childScript
-
>
UpdateLoadTime
(
script
-
>
mLoadTime
)
;
childScript
-
>
mProcessTypes
+
=
script
-
>
mProcessTypes
;
script
.
Remove
(
)
;
continue
;
}
if
(
!
(
script
-
>
mProcessTypes
=
=
script
-
>
mOriginalProcessTypes
)
)
{
found
=
true
;
}
if
(
!
script
-
>
mSize
&
&
!
script
-
>
XDREncode
(
jsapi
.
cx
(
)
)
)
{
script
.
Remove
(
)
;
}
else
{
script
-
>
mSize
=
script
-
>
Range
(
)
.
length
(
)
;
}
}
if
(
!
found
)
{
mSaveComplete
=
true
;
return
;
}
mDataPrepared
=
true
;
}
Result
<
Ok
nsresult
>
ScriptPreloader
:
:
WriteCache
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
if
(
!
mDataPrepared
&
&
!
mSaveComplete
)
{
MonitorAutoUnlock
mau
(
mSaveMonitor
)
;
NS_DispatchToMainThread
(
NewRunnableMethod
(
this
&
ScriptPreloader
:
:
PrepareCacheWrite
)
NS_DISPATCH_SYNC
)
;
}
if
(
mSaveComplete
)
{
return
Ok
(
)
;
}
nsCOMPtr
<
nsIFile
>
cacheFile
;
MOZ_TRY_VAR
(
cacheFile
GetCacheFile
(
NS_LITERAL_STRING
(
"
-
new
.
bin
"
)
)
)
;
bool
exists
;
NS_TRY
(
cacheFile
-
>
Exists
(
&
exists
)
)
;
if
(
exists
)
{
NS_TRY
(
cacheFile
-
>
Remove
(
false
)
)
;
}
{
AutoFDClose
fd
;
NS_TRY
(
cacheFile
-
>
OpenNSPRFileDesc
(
PR_WRONLY
|
PR_CREATE_FILE
0644
&
fd
.
rwget
(
)
)
)
;
nsTArray
<
CachedScript
*
>
scripts
;
for
(
auto
&
script
:
IterHash
(
mScripts
Match
<
ScriptStatus
:
:
Saved
>
(
)
)
)
{
scripts
.
AppendElement
(
script
)
;
}
scripts
.
Sort
(
CachedScript
:
:
Comparator
(
)
)
;
OutputBuffer
buf
;
size_t
offset
=
0
;
for
(
auto
script
:
scripts
)
{
script
-
>
mOffset
=
offset
;
script
-
>
Code
(
buf
)
;
offset
+
=
script
-
>
mSize
;
}
uint8_t
headerSize
[
4
]
;
LittleEndian
:
:
writeUint32
(
headerSize
buf
.
cursor
(
)
)
;
MOZ_TRY
(
Write
(
fd
MAGIC
sizeof
(
MAGIC
)
)
)
;
MOZ_TRY
(
Write
(
fd
headerSize
sizeof
(
headerSize
)
)
)
;
MOZ_TRY
(
Write
(
fd
buf
.
Get
(
)
buf
.
cursor
(
)
)
)
;
for
(
auto
script
:
scripts
)
{
MOZ_TRY
(
Write
(
fd
script
-
>
Range
(
)
.
begin
(
)
.
get
(
)
script
-
>
mSize
)
)
;
if
(
script
-
>
mScript
)
{
script
-
>
FreeData
(
)
;
}
}
}
NS_TRY
(
cacheFile
-
>
MoveTo
(
nullptr
mBaseName
+
NS_LITERAL_STRING
(
"
.
bin
"
)
)
)
;
return
Ok
(
)
;
}
nsresult
ScriptPreloader
:
:
Run
(
)
{
MonitorAutoLock
mal
(
mSaveMonitor
)
;
mal
.
Wait
(
10000
)
;
auto
result
=
WriteCache
(
)
;
Unused
<
<
NS_WARN_IF
(
result
.
isErr
(
)
)
;
result
=
mChildCache
-
>
WriteCache
(
)
;
Unused
<
<
NS_WARN_IF
(
result
.
isErr
(
)
)
;
mSaveComplete
=
true
;
NS_ReleaseOnMainThread
(
mSaveThread
.
forget
(
)
)
;
mal
.
NotifyAll
(
)
;
return
NS_OK
;
}
void
ScriptPreloader
:
:
NoteScript
(
const
nsCString
&
url
const
nsCString
&
cachePath
JS
:
:
HandleScript
jsscript
)
{
if
(
mStartupFinished
|
|
!
mCacheInitialized
|
|
cachePath
.
FindChar
(
'
?
'
)
>
=
0
)
{
return
;
}
NS_NAMED_LITERAL_CSTRING
(
mochikitPrefix
"
chrome
:
/
/
mochikit
/
"
)
;
if
(
StringHead
(
url
mochikitPrefix
.
Length
(
)
)
=
=
mochikitPrefix
)
{
return
;
}
auto
script
=
mScripts
.
LookupOrAdd
(
cachePath
*
this
url
cachePath
jsscript
)
;
if
(
!
script
-
>
mScript
)
{
MOZ_ASSERT
(
jsscript
)
;
script
-
>
mScript
=
jsscript
;
script
-
>
mReadyToExecute
=
true
;
}
script
-
>
UpdateLoadTime
(
TimeStamp
:
:
Now
(
)
)
;
script
-
>
mProcessTypes
+
=
CurrentProcessType
(
)
;
}
void
ScriptPreloader
:
:
NoteScript
(
const
nsCString
&
url
const
nsCString
&
cachePath
ProcessType
processType
nsTArray
<
uint8_t
>
&
&
xdrData
TimeStamp
loadTime
)
{
auto
script
=
mScripts
.
LookupOrAdd
(
cachePath
*
this
url
cachePath
nullptr
)
;
if
(
!
script
-
>
HasRange
(
)
)
{
MOZ_ASSERT
(
!
script
-
>
HasArray
(
)
)
;
script
-
>
mSize
=
xdrData
.
Length
(
)
;
script
-
>
mXDRData
.
construct
<
nsTArray
<
uint8_t
>
>
(
Forward
<
nsTArray
<
uint8_t
>
>
(
xdrData
)
)
;
auto
&
data
=
script
-
>
Array
(
)
;
script
-
>
mXDRRange
.
emplace
(
data
.
Elements
(
)
data
.
Length
(
)
)
;
}
if
(
!
script
-
>
mSize
&
&
!
script
-
>
mScript
)
{
mScripts
.
Remove
(
cachePath
)
;
return
;
}
script
-
>
UpdateLoadTime
(
loadTime
)
;
script
-
>
mProcessTypes
+
=
processType
;
}
JSScript
*
ScriptPreloader
:
:
GetCachedScript
(
JSContext
*
cx
const
nsCString
&
path
)
{
if
(
mChildCache
)
{
auto
script
=
mChildCache
-
>
GetCachedScript
(
cx
path
)
;
if
(
script
)
{
return
script
;
}
}
auto
script
=
mScripts
.
Get
(
path
)
;
if
(
script
)
{
return
WaitForCachedScript
(
cx
script
)
;
}
return
nullptr
;
}
JSScript
*
ScriptPreloader
:
:
WaitForCachedScript
(
JSContext
*
cx
CachedScript
*
script
)
{
if
(
!
script
-
>
mReadyToExecute
)
{
LOG
(
Info
"
Must
wait
for
async
script
load
:
%
s
\
n
"
script
-
>
mURL
.
get
(
)
)
;
auto
start
=
TimeStamp
:
:
Now
(
)
;
MonitorAutoLock
mal
(
mMonitor
)
;
if
(
!
script
-
>
mReadyToExecute
&
&
script
-
>
mSize
<
MAX_MAINTHREAD_DECODE_SIZE
)
{
LOG
(
Info
"
Script
is
small
enough
to
recompile
on
main
thread
\
n
"
)
;
script
-
>
mReadyToExecute
=
true
;
}
else
{
while
(
!
script
-
>
mReadyToExecute
)
{
mal
.
Wait
(
)
;
}
}
LOG
(
Info
"
Waited
%
fms
\
n
"
(
TimeStamp
:
:
Now
(
)
-
start
)
.
ToMilliseconds
(
)
)
;
}
return
script
-
>
GetJSScript
(
cx
)
;
}
void
ScriptPreloader
:
:
DecodeScriptOffThread
(
JSContext
*
cx
CachedScript
*
script
)
{
JS
:
:
CompileOptions
options
(
cx
JSVERSION_LATEST
)
;
options
.
setNoScriptRval
(
true
)
.
setFileAndLine
(
script
-
>
mURL
.
get
(
)
1
)
;
if
(
!
JS
:
:
DecodeOffThreadScript
(
cx
options
script
-
>
Range
(
)
OffThreadDecodeCallback
static_cast
<
void
*
>
(
script
)
)
)
{
script
-
>
mReadyToExecute
=
true
;
}
}
void
ScriptPreloader
:
:
CancelOffThreadParse
(
void
*
token
)
{
AutoSafeJSAPI
jsapi
;
JS
:
:
CancelOffThreadScriptDecoder
(
jsapi
.
cx
(
)
token
)
;
}
void
ScriptPreloader
:
:
OffThreadDecodeCallback
(
void
*
token
void
*
context
)
{
auto
script
=
static_cast
<
CachedScript
*
>
(
context
)
;
MonitorAutoLock
mal
(
script
-
>
mCache
.
mMonitor
)
;
if
(
script
-
>
mReadyToExecute
)
{
NS_DispatchToMainThread
(
NewRunnableMethod
<
void
*
>
(
&
script
-
>
mCache
&
ScriptPreloader
:
:
CancelOffThreadParse
token
)
)
;
return
;
}
script
-
>
mToken
=
token
;
script
-
>
mReadyToExecute
=
true
;
mal
.
NotifyAll
(
)
;
}
ScriptPreloader
:
:
CachedScript
:
:
CachedScript
(
ScriptPreloader
&
cache
InputBuffer
&
buf
)
:
mCache
(
cache
)
{
Code
(
buf
)
;
mOriginalProcessTypes
=
mProcessTypes
;
mProcessTypes
=
{
}
;
}
bool
ScriptPreloader
:
:
CachedScript
:
:
XDREncode
(
JSContext
*
cx
)
{
JSAutoCompartment
ac
(
cx
mScript
)
;
JS
:
:
RootedScript
jsscript
(
cx
mScript
)
;
mXDRData
.
construct
<
JS
:
:
TranscodeBuffer
>
(
)
;
JS
:
:
TranscodeResult
code
=
JS
:
:
EncodeScript
(
cx
Buffer
(
)
jsscript
)
;
if
(
code
=
=
JS
:
:
TranscodeResult_Ok
)
{
mXDRRange
.
emplace
(
Buffer
(
)
.
begin
(
)
Buffer
(
)
.
length
(
)
)
;
return
true
;
}
JS_ClearPendingException
(
cx
)
;
return
false
;
}
void
ScriptPreloader
:
:
CachedScript
:
:
Cancel
(
)
{
if
(
mToken
)
{
mCache
.
mMonitor
.
AssertCurrentThreadOwns
(
)
;
AutoSafeJSAPI
jsapi
;
JS
:
:
CancelOffThreadScriptDecoder
(
jsapi
.
cx
(
)
mToken
)
;
mReadyToExecute
=
true
;
mToken
=
nullptr
;
}
}
JSScript
*
ScriptPreloader
:
:
CachedScript
:
:
GetJSScript
(
JSContext
*
cx
)
{
MOZ_ASSERT
(
mReadyToExecute
)
;
if
(
mScript
)
{
return
mScript
;
}
if
(
!
mToken
)
{
MOZ_ASSERT
(
HasRange
(
)
)
;
JS
:
:
RootedScript
script
(
cx
)
;
if
(
JS
:
:
DecodeScript
(
cx
Range
(
)
&
script
)
)
{
mScript
=
script
;
if
(
mCache
.
mSaveComplete
)
{
FreeData
(
)
;
}
}
return
mScript
;
}
Maybe
<
JSAutoCompartment
>
ac
;
if
(
JS
:
:
CompartmentCreationOptionsRef
(
cx
)
.
addonIdOrNull
(
)
)
{
ac
.
emplace
(
cx
xpc
:
:
CompilationScope
(
)
)
;
}
mScript
=
JS
:
:
FinishOffThreadScriptDecoder
(
cx
mToken
)
;
mToken
=
nullptr
;
return
mScript
;
}
NS_IMPL_ISUPPORTS
(
ScriptPreloader
nsIObserver
nsIRunnable
nsIMemoryReporter
)
#
undef
LOG
}
