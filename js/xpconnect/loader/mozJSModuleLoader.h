#
ifndef
mozJSModuleLoader_h
#
define
mozJSModuleLoader_h
#
include
"
SyncModuleLoader
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
FileLocation
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
xpcpublic
.
h
"
class
nsIFile
;
class
ModuleLoaderInfo
;
namespace
mozilla
{
class
ScriptPreloader
;
}
namespace
JS
:
:
loader
{
class
ModuleLoadRequest
;
}
#
if
defined
(
NIGHTLY_BUILD
)
|
|
defined
(
MOZ_DEV_EDITION
)
|
|
defined
(
DEBUG
)
#
define
STARTUP_RECORDER_ENABLED
#
endif
namespace
mozilla
:
:
loader
{
class
NonSharedGlobalSyncModuleLoaderScope
;
}
class
mozJSModuleLoader
final
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
mozJSModuleLoader
)
;
nsresult
GetLoadedESModules
(
nsTArray
<
nsCString
>
&
aLoadedModules
)
;
nsresult
GetModuleImportStack
(
const
nsACString
&
aLocation
nsACString
&
aRetval
)
;
void
FindTargetObject
(
JSContext
*
aCx
JS
:
:
MutableHandleObject
aTargetObject
)
;
static
void
InitStatics
(
)
;
static
void
UnloadLoaders
(
)
;
static
void
ShutdownLoaders
(
)
;
static
mozJSModuleLoader
*
Get
(
)
{
MOZ_ASSERT
(
sSelf
"
Should
have
already
created
the
module
loader
"
)
;
return
sSelf
;
}
JSObject
*
GetSharedGlobal
(
)
{
MOZ_ASSERT
(
mLoaderGlobal
)
;
return
mLoaderGlobal
;
}
private
:
void
InitSharedGlobal
(
JSContext
*
aCx
)
;
void
InitSyncModuleLoaderForGlobal
(
nsIGlobalObject
*
aGlobal
)
;
void
DisconnectSyncModuleLoaderFromGlobal
(
)
;
friend
class
mozilla
:
:
loader
:
:
NonSharedGlobalSyncModuleLoaderScope
;
public
:
static
mozJSModuleLoader
*
GetDevToolsLoader
(
)
{
return
sDevToolsLoader
;
}
static
mozJSModuleLoader
*
GetOrCreateDevToolsLoader
(
JSContext
*
aCx
)
;
nsresult
ImportESModule
(
JSContext
*
aCx
const
nsACString
&
aResourceURI
JS
:
:
MutableHandleObject
aModuleNamespace
)
;
#
ifdef
STARTUP_RECORDER_ENABLED
void
RecordImportStack
(
JSContext
*
aCx
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
)
;
#
endif
nsresult
IsESModuleLoaded
(
const
nsACString
&
aResourceURI
bool
*
aRetval
)
;
bool
IsLoaderGlobal
(
JSObject
*
aObj
)
{
return
mLoaderGlobal
=
=
aObj
;
}
bool
IsDevToolsLoader
(
)
const
{
return
this
=
=
sDevToolsLoader
;
}
static
bool
IsSharedSystemGlobal
(
nsIGlobalObject
*
aGlobal
)
;
static
bool
IsDevToolsLoaderGlobal
(
nsIGlobalObject
*
aGlobal
)
;
static
nsresult
LoadSingleModuleScript
(
mozilla
:
:
loader
:
:
SyncModuleLoader
*
aModuleLoader
JSContext
*
aCx
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandleScript
aScriptOut
)
;
private
:
static
nsresult
ReadScriptOnMainThread
(
JSContext
*
aCx
const
nsCString
&
aLocation
nsCString
&
aData
)
;
static
nsresult
LoadSingleModuleScriptOnWorker
(
mozilla
:
:
loader
:
:
SyncModuleLoader
*
aModuleLoader
JSContext
*
aCx
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandleScript
aScriptOut
)
;
public
:
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
bool
DefineJSServices
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
protected
:
mozJSModuleLoader
(
)
;
~
mozJSModuleLoader
(
)
;
friend
class
XPCJSRuntime
;
private
:
static
mozilla
:
:
StaticRefPtr
<
mozJSModuleLoader
>
sSelf
;
static
mozilla
:
:
StaticRefPtr
<
mozJSModuleLoader
>
sDevToolsLoader
;
void
Unload
(
)
;
void
UnloadModules
(
)
;
void
CreateLoaderGlobal
(
JSContext
*
aCx
const
nsACString
&
aLocation
JS
:
:
MutableHandleObject
aGlobal
)
;
void
CreateDevToolsLoaderGlobal
(
JSContext
*
aCx
const
nsACString
&
aLocation
JS
:
:
MutableHandleObject
aGlobal
)
;
bool
CreateJSServices
(
JSContext
*
aCx
)
;
static
nsresult
GetSourceFile
(
nsIURI
*
aResolvedURI
nsIFile
*
*
aSourceFileOut
)
;
static
bool
LocationIsRealFile
(
nsIURI
*
aURI
)
;
static
void
SetModuleOptions
(
JS
:
:
CompileOptions
&
aOptions
)
;
static
nsresult
GetScriptForLocation
(
JSContext
*
aCx
ModuleLoaderInfo
&
aInfo
nsIFile
*
aModuleFile
bool
aUseMemMap
JS
:
:
MutableHandleScript
aScriptOut
char
*
*
aLocationOut
=
nullptr
)
;
static
JSScript
*
InstantiateStencil
(
JSContext
*
aCx
JS
:
:
Stencil
*
aStencil
)
;
class
ModuleEntry
{
public
:
explicit
ModuleEntry
(
JS
:
:
RootingContext
*
aRootingCx
)
:
obj
(
aRootingCx
)
exports
(
aRootingCx
)
thisObjectKey
(
aRootingCx
)
{
location
=
nullptr
;
}
~
ModuleEntry
(
)
{
Clear
(
)
;
}
void
Clear
(
)
{
if
(
obj
)
{
if
(
JS_HasExtensibleLexicalEnvironment
(
obj
)
)
{
JS
:
:
RootedObject
lexicalEnv
(
mozilla
:
:
dom
:
:
RootingCx
(
)
JS_ExtensibleLexicalEnvironment
(
obj
)
)
;
JS_SetAllNonReservedSlotsToUndefined
(
lexicalEnv
)
;
}
JS_SetAllNonReservedSlotsToUndefined
(
obj
)
;
obj
=
nullptr
;
thisObjectKey
=
nullptr
;
}
if
(
location
)
{
free
(
location
)
;
}
obj
=
nullptr
;
thisObjectKey
=
nullptr
;
location
=
nullptr
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
JS
:
:
PersistentRootedObject
obj
;
JS
:
:
PersistentRootedObject
exports
;
JS
:
:
PersistentRootedScript
thisObjectKey
;
char
*
location
;
nsCString
resolvedURL
;
}
;
#
ifdef
STARTUP_RECORDER_ENABLED
nsTHashMap
<
nsCStringHashKey
nsCString
>
mImportStacks
;
#
endif
bool
mInitialized
;
bool
mIsUnloaded
=
false
;
#
ifdef
DEBUG
bool
mIsInitializingLoaderGlobal
=
false
;
#
endif
JS
:
:
PersistentRooted
<
JSObject
*
>
mLoaderGlobal
;
JS
:
:
PersistentRooted
<
JSObject
*
>
mServicesObj
;
RefPtr
<
mozilla
:
:
loader
:
:
SyncModuleLoader
>
mModuleLoader
;
}
;
namespace
mozilla
:
:
loader
{
class
MOZ_STACK_CLASS
NonSharedGlobalSyncModuleLoaderScope
{
public
:
NonSharedGlobalSyncModuleLoaderScope
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
)
;
~
NonSharedGlobalSyncModuleLoaderScope
(
)
;
void
Finish
(
)
;
static
bool
IsActive
(
)
;
static
mozJSModuleLoader
*
ActiveLoader
(
)
;
static
void
InitStatics
(
)
;
private
:
RefPtr
<
mozJSModuleLoader
>
mLoader
;
static
MOZ_THREAD_LOCAL
(
mozJSModuleLoader
*
)
sTlsActiveLoader
;
RefPtr
<
JS
:
:
loader
:
:
ModuleLoaderBase
>
mAsyncModuleLoader
;
mozilla
:
:
Maybe
<
JS
:
:
loader
:
:
AutoOverrideModuleLoader
>
mMaybeOverride
;
}
;
}
#
endif
