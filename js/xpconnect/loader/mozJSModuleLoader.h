#
ifndef
mozJSModuleLoader_h
#
define
mozJSModuleLoader_h
#
include
"
ComponentModuleLoader
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
FileLocation
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
experimental
/
JSStencil
.
h
"
#
include
"
SkipCheckForBrokenURLOrZeroSized
.
h
"
#
include
"
xpcpublic
.
h
"
class
nsIFile
;
class
ModuleLoaderInfo
;
namespace
mozilla
{
class
ScriptPreloader
;
}
namespace
JS
:
:
loader
{
class
ModuleLoadRequest
;
}
#
if
defined
(
NIGHTLY_BUILD
)
|
|
defined
(
MOZ_DEV_EDITION
)
|
|
defined
(
DEBUG
)
#
define
STARTUP_RECORDER_ENABLED
#
endif
class
mozJSModuleLoader
final
:
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
void
GetLoadedModules
(
nsTArray
<
nsCString
>
&
aLoadedModules
)
;
nsresult
GetLoadedESModules
(
nsTArray
<
nsCString
>
&
aLoadedModules
)
;
nsresult
GetLoadedJSAndESModules
(
nsTArray
<
nsCString
>
&
aLoadedModules
)
;
nsresult
GetModuleImportStack
(
const
nsACString
&
aLocation
nsACString
&
aRetval
)
;
void
FindTargetObject
(
JSContext
*
aCx
JS
:
:
MutableHandleObject
aTargetObject
)
;
static
void
InitStatics
(
)
;
static
void
Unload
(
)
;
static
void
Shutdown
(
)
;
static
mozJSModuleLoader
*
Get
(
)
{
MOZ_ASSERT
(
sSelf
"
Should
have
already
created
the
module
loader
"
)
;
return
sSelf
;
}
nsresult
ImportInto
(
const
nsACString
&
aResourceURI
JS
:
:
HandleValue
aTargetObj
JSContext
*
aCx
uint8_t
aArgc
JS
:
:
MutableHandleValue
aRetval
)
;
nsresult
Import
(
JSContext
*
aCx
const
nsACString
&
aResourceURI
JS
:
:
MutableHandleObject
aModuleGlobal
JS
:
:
MutableHandleObject
aModuleExports
bool
aIgnoreExports
=
false
)
;
nsresult
ImportESModule
(
JSContext
*
aCx
const
nsACString
&
aResourceURI
JS
:
:
MutableHandleObject
aModuleNamespace
mozilla
:
:
loader
:
:
SkipCheckForBrokenURLOrZeroSized
aSkipCheck
=
mozilla
:
:
loader
:
:
SkipCheckForBrokenURLOrZeroSized
:
:
No
)
;
nsresult
TryFallbackToImportESModule
(
JSContext
*
aCx
const
nsACString
&
aResourceURI
JS
:
:
MutableHandleObject
aModuleGlobal
JS
:
:
MutableHandleObject
aModuleExports
bool
aIgnoreExports
)
;
nsresult
TryCachedFallbackToImportESModule
(
JSContext
*
aCx
const
nsACString
&
aResourceURI
JS
:
:
MutableHandleObject
aModuleGlobal
JS
:
:
MutableHandleObject
aModuleExports
bool
aIgnoreExports
bool
*
aFound
)
;
#
ifdef
STARTUP_RECORDER_ENABLED
void
RecordImportStack
(
JSContext
*
aCx
const
nsACString
&
aLocation
)
;
void
RecordImportStack
(
JSContext
*
aCx
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
)
;
#
endif
nsresult
Unload
(
const
nsACString
&
aResourceURI
)
;
nsresult
IsModuleLoaded
(
const
nsACString
&
aResourceURI
bool
*
aRetval
)
;
nsresult
IsJSModuleLoaded
(
const
nsACString
&
aResourceURI
bool
*
aRetval
)
;
nsresult
IsESModuleLoaded
(
const
nsACString
&
aResourceURI
bool
*
aRetval
)
;
bool
IsLoaderGlobal
(
JSObject
*
aObj
)
{
return
mLoaderGlobal
=
=
aObj
;
}
static
bool
IsTrustedScheme
(
nsIURI
*
aURI
)
;
static
nsresult
LoadSingleModuleScript
(
JSContext
*
aCx
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandleScript
aScriptOut
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
bool
DefineJSServices
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
protected
:
mozJSModuleLoader
(
)
;
~
mozJSModuleLoader
(
)
;
friend
class
XPCJSRuntime
;
private
:
static
mozilla
:
:
StaticRefPtr
<
mozJSModuleLoader
>
sSelf
;
void
UnloadModules
(
)
;
void
CreateLoaderGlobal
(
JSContext
*
aCx
const
nsACString
&
aLocation
JS
:
:
MutableHandleObject
aGlobal
)
;
bool
CreateJSServices
(
JSContext
*
aCx
)
;
JSObject
*
GetSharedGlobal
(
JSContext
*
aCx
)
;
static
nsresult
GetSourceFile
(
nsIURI
*
aResolvedURI
nsIFile
*
*
aSourceFileOut
)
;
static
bool
LocationIsRealFile
(
nsIURI
*
aURI
)
;
JSObject
*
PrepareObjectForLocation
(
JSContext
*
aCx
nsIFile
*
aModuleFile
nsIURI
*
aURI
bool
aRealFile
)
;
nsresult
ObjectForLocation
(
ModuleLoaderInfo
&
aInfo
nsIFile
*
aModuleFile
JS
:
:
MutableHandleObject
aObject
JS
:
:
MutableHandleScript
aTableScript
char
*
*
aLocation
bool
aCatchException
JS
:
:
MutableHandleValue
aException
)
;
static
nsresult
GetScriptForLocation
(
JSContext
*
aCx
ModuleLoaderInfo
&
aInfo
nsIFile
*
aModuleFile
bool
aUseMemMap
JS
:
:
MutableHandleScript
aScriptOut
char
*
*
aLocationOut
=
nullptr
)
;
static
already_AddRefed
<
JS
:
:
Stencil
>
CompileStencil
(
JSContext
*
aCx
const
JS
:
:
CompileOptions
&
aOptions
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
&
aSource
bool
aIsModule
)
;
static
JSScript
*
InstantiateStencil
(
JSContext
*
aCx
JS
:
:
Stencil
*
aStencil
bool
aIsModule
)
;
nsresult
ImportInto
(
const
nsACString
&
aLocation
JS
:
:
HandleObject
targetObj
JSContext
*
callercx
JS
:
:
MutableHandleObject
vp
)
;
class
ModuleEntry
{
public
:
explicit
ModuleEntry
(
JS
:
:
RootingContext
*
aRootingCx
)
:
obj
(
aRootingCx
)
exports
(
aRootingCx
)
thisObjectKey
(
aRootingCx
)
{
location
=
nullptr
;
}
~
ModuleEntry
(
)
{
Clear
(
)
;
}
void
Clear
(
)
{
if
(
obj
)
{
if
(
JS_HasExtensibleLexicalEnvironment
(
obj
)
)
{
JS
:
:
RootedObject
lexicalEnv
(
mozilla
:
:
dom
:
:
RootingCx
(
)
JS_ExtensibleLexicalEnvironment
(
obj
)
)
;
JS_SetAllNonReservedSlotsToUndefined
(
lexicalEnv
)
;
}
JS_SetAllNonReservedSlotsToUndefined
(
obj
)
;
obj
=
nullptr
;
thisObjectKey
=
nullptr
;
}
if
(
location
)
{
free
(
location
)
;
}
obj
=
nullptr
;
thisObjectKey
=
nullptr
;
location
=
nullptr
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
JS
:
:
PersistentRootedObject
obj
;
JS
:
:
PersistentRootedObject
exports
;
JS
:
:
PersistentRootedScript
thisObjectKey
;
char
*
location
;
nsCString
resolvedURL
;
}
;
class
FallbackModuleEntry
{
public
:
explicit
FallbackModuleEntry
(
JS
:
:
RootingContext
*
aRootingCx
)
:
globalProxy
(
aRootingCx
)
moduleNamespace
(
aRootingCx
)
{
}
~
FallbackModuleEntry
(
)
{
Clear
(
)
;
}
void
Clear
(
)
{
globalProxy
=
nullptr
;
moduleNamespace
=
nullptr
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
JS
:
:
PersistentRootedObject
globalProxy
;
JS
:
:
PersistentRootedObject
moduleNamespace
;
}
;
nsresult
ExtractExports
(
JSContext
*
aCx
ModuleLoaderInfo
&
aInfo
ModuleEntry
*
aMod
JS
:
:
MutableHandleObject
aExports
)
;
nsClassHashtable
<
nsCStringHashKey
ModuleEntry
>
mImports
;
nsTHashMap
<
nsCStringHashKey
ModuleEntry
*
>
mInProgressImports
;
nsClassHashtable
<
nsCStringHashKey
FallbackModuleEntry
>
mFallbackImports
;
#
ifdef
STARTUP_RECORDER_ENABLED
nsTHashMap
<
nsCStringHashKey
nsCString
>
mImportStacks
;
#
endif
nsClassHashtable
<
nsCStringHashKey
nsCString
>
mLocations
;
bool
mInitialized
;
#
ifdef
DEBUG
bool
mIsInitializingLoaderGlobal
=
false
;
#
endif
JS
:
:
PersistentRooted
<
JSObject
*
>
mLoaderGlobal
;
JS
:
:
PersistentRooted
<
JSObject
*
>
mServicesObj
;
RefPtr
<
mozilla
:
:
loader
:
:
ComponentModuleLoader
>
mModuleLoader
;
}
;
#
endif
