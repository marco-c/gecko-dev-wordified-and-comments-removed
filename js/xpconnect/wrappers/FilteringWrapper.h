#
ifndef
__FilteringWrapper_h__
#
define
__FilteringWrapper_h__
#
include
"
XrayWrapper
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
jswrapper
.
h
"
#
include
"
js
/
CallNonGenericMethod
.
h
"
namespace
JS
{
class
AutoIdVector
;
}
namespace
xpc
{
template
<
typename
Base
typename
Policy
>
class
FilteringWrapper
:
public
Base
{
public
:
constexpr
explicit
FilteringWrapper
(
unsigned
flags
)
:
Base
(
flags
)
{
}
virtual
bool
enter
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
js
:
:
Wrapper
:
:
Action
act
bool
mayThrow
bool
*
bp
)
const
override
;
virtual
bool
getOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
virtual
bool
ownPropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
AutoIdVector
&
props
)
const
override
;
virtual
bool
getPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
virtual
bool
getOwnEnumerablePropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
AutoIdVector
&
props
)
const
override
;
virtual
JSObject
*
enumerate
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
)
const
override
;
virtual
bool
call
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
const
JS
:
:
CallArgs
&
args
)
const
override
;
virtual
bool
construct
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
const
JS
:
:
CallArgs
&
args
)
const
override
;
virtual
bool
nativeCall
(
JSContext
*
cx
JS
:
:
IsAcceptableThis
test
JS
:
:
NativeImpl
impl
const
JS
:
:
CallArgs
&
args
)
const
override
;
virtual
bool
getPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
wrapper
JS
:
:
MutableHandleObject
protop
)
const
override
;
static
const
FilteringWrapper
singleton
;
}
;
class
CrossOriginXrayWrapper
:
public
SecurityXrayDOM
{
public
:
constexpr
explicit
CrossOriginXrayWrapper
(
unsigned
flags
)
:
SecurityXrayDOM
(
flags
)
{
}
virtual
bool
getOwnPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
virtual
bool
defineProperty
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
Handle
<
JS
:
:
PropertyDescriptor
>
desc
JS
:
:
ObjectOpResult
&
result
)
const
override
;
virtual
bool
ownPropertyKeys
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
AutoIdVector
&
props
)
const
override
;
virtual
bool
delete_
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
ObjectOpResult
&
result
)
const
override
;
virtual
bool
getPropertyDescriptor
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
wrapper
JS
:
:
Handle
<
jsid
>
id
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
desc
)
const
override
;
virtual
bool
setPrototype
(
JSContext
*
cx
JS
:
:
HandleObject
wrapper
JS
:
:
HandleObject
proto
JS
:
:
ObjectOpResult
&
result
)
const
override
;
}
;
bool
IsCrossOriginWhitelistedSymbol
(
JSContext
*
cx
JS
:
:
HandleId
id
)
;
}
#
endif
