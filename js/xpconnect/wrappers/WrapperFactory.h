#
ifndef
_xpc_WRAPPERFACTORY_H
#
define
_xpc_WRAPPERFACTORY_H
#
include
"
js
/
Wrapper
.
h
"
namespace
xpc
{
class
CrossOriginObjectWrapper
:
public
js
:
:
Wrapper
{
public
:
constexpr
explicit
CrossOriginObjectWrapper
(
)
:
js
:
:
Wrapper
(
CROSS_COMPARTMENT
false
true
)
{
}
bool
dynamicCheckedUnwrapAllowed
(
JS
:
:
Handle
<
JSObject
*
>
obj
JSContext
*
cx
)
const
override
;
static
const
CrossOriginObjectWrapper
singleton
;
}
;
class
WrapperFactory
{
public
:
enum
{
WAIVE_XRAY_WRAPPER_FLAG
=
js
:
:
Wrapper
:
:
LAST_USED_FLAG
<
<
1
IS_XRAY_WRAPPER_FLAG
=
WAIVE_XRAY_WRAPPER_FLAG
<
<
1
}
;
static
bool
HasWrapperFlag
(
JSObject
*
wrapper
unsigned
flag
)
{
unsigned
flags
=
0
;
js
:
:
UncheckedUnwrap
(
wrapper
true
&
flags
)
;
return
!
!
(
flags
&
flag
)
;
}
static
bool
IsXrayWrapper
(
JSObject
*
wrapper
)
{
return
HasWrapperFlag
(
wrapper
IS_XRAY_WRAPPER_FLAG
)
;
}
static
bool
IsCrossOriginWrapper
(
JSObject
*
obj
)
{
return
(
js
:
:
IsProxy
(
obj
)
&
&
js
:
:
GetProxyHandler
(
obj
)
=
=
&
CrossOriginObjectWrapper
:
:
singleton
)
;
}
static
bool
IsOpaqueWrapper
(
JSObject
*
obj
)
;
static
bool
HasWaiveXrayFlag
(
JSObject
*
wrapper
)
{
return
HasWrapperFlag
(
wrapper
WAIVE_XRAY_WRAPPER_FLAG
)
;
}
static
bool
IsCOW
(
JSObject
*
wrapper
)
;
static
JSObject
*
GetXrayWaiver
(
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
static
JSObject
*
CreateXrayWaiver
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
bool
allowExisting
=
false
)
;
static
JSObject
*
WaiveXray
(
JSContext
*
cx
JSObject
*
obj
)
;
static
bool
AllowWaiver
(
JS
:
:
Compartment
*
target
JS
:
:
Compartment
*
origin
)
;
static
bool
AllowWaiver
(
JSObject
*
wrapper
)
;
static
void
PrepareForWrapping
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
scope
JS
:
:
Handle
<
JSObject
*
>
origObj
JS
:
:
Handle
<
JSObject
*
>
obj
JS
:
:
Handle
<
JSObject
*
>
objectPassedToWrap
JS
:
:
MutableHandle
<
JSObject
*
>
retObj
)
;
static
JSObject
*
Rewrap
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
existing
JS
:
:
Handle
<
JSObject
*
>
obj
)
;
static
bool
WaiveXrayAndWrap
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JS
:
:
Value
>
vp
)
;
static
bool
WaiveXrayAndWrap
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
object
)
;
}
;
}
#
endif
