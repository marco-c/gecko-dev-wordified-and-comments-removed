"
use
strict
"
;
let
weak_ref_dead
=
function
(
r
)
{
return
!
SpecialPowers
.
nondeterministicGetWeakMapKeys
(
r
)
.
length
;
}
;
add_task
(
async
function
cc_xpcwn_dead
(
)
{
let
wnMap
=
new
WeakMap
(
)
;
let
container
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
{
let
str
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
str
.
data
=
"
canary123
"
;
container
.
appendElement
(
str
)
;
is
(
container
.
Count
(
)
1
"
The
array
should
have
one
element
"
)
;
wnMap
.
set
(
str
{
}
)
;
ok
(
!
weak_ref_dead
(
wnMap
)
"
weak
map
should
have
an
entry
"
)
;
str
=
null
;
}
SpecialPowers
.
forceGC
(
)
;
SpecialPowers
.
forceCC
(
)
;
ok
(
weak_ref_dead
(
wnMap
)
"
The
JS
reflector
has
been
freed
.
"
)
;
let
str2
=
container
.
GetElementAt
(
0
)
.
QueryInterface
(
Ci
.
nsISupportsString
)
;
is
(
str2
.
data
"
canary123
"
"
The
C
+
+
object
we
created
still
exists
.
"
)
;
}
)
;
add_task
(
async
function
cc_xpcwn_live
(
)
{
let
wnMap
=
new
WeakMap
(
)
;
let
container
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
let
str
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
str
.
data
=
"
canary345
"
;
container
.
appendElement
(
str
)
;
is
(
container
.
Count
(
)
1
"
The
array
should
have
one
element
"
)
;
wnMap
.
set
(
str
{
}
)
;
ok
(
!
weak_ref_dead
(
wnMap
)
"
weak
map
should
have
an
entry
"
)
;
SpecialPowers
.
forceGC
(
)
;
SpecialPowers
.
forceCC
(
)
;
ok
(
!
weak_ref_dead
(
wnMap
)
"
The
JS
reflector
hasn
'
t
been
freed
.
"
)
;
let
str2
=
container
.
GetElementAt
(
0
)
.
QueryInterface
(
Ci
.
nsISupportsString
)
;
is
(
str
str2
"
The
JS
reflector
is
the
same
"
)
;
is
(
str2
.
data
"
canary345
"
"
The
C
+
+
object
hasn
'
t
changed
"
)
;
}
)
;
