"
use
strict
"
;
let
make_weak_ref
=
function
(
obj
)
{
let
m
=
new
WeakMap
(
)
;
m
.
set
(
obj
{
}
)
;
return
m
;
}
;
let
weak_ref_dead
=
function
(
r
)
{
return
!
SpecialPowers
.
nondeterministicGetWeakMapKeys
(
r
)
.
length
;
}
;
add_task
(
async
function
gc_wwjs
(
)
{
const
TEST_PREF
=
"
wjs
.
pref1
"
;
let
wjs_weak_ref
=
null
;
let
observed_count
=
0
;
{
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
let
observer1
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISupportsWeakReference
"
]
)
observe
(
)
{
observed_count
+
=
1
;
info
(
TEST_PREF
+
"
pref
observer
.
"
)
;
}
}
;
Services
.
prefs
.
addObserver
(
TEST_PREF
observer1
true
)
;
info
(
"
Flipping
the
pref
"
+
TEST_PREF
)
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
true
)
;
is
(
observed_count
1
"
Ran
observer1
once
after
first
flip
.
"
)
;
wjs_weak_ref
=
make_weak_ref
(
observer1
)
;
}
info
(
"
Running
the
GC
.
"
)
;
SpecialPowers
.
forceGC
(
)
;
info
(
"
Flipping
the
pref
"
+
TEST_PREF
)
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
false
)
;
is
(
observed_count
1
"
After
GC
don
'
t
run
the
observer
.
"
)
;
ok
(
weak_ref_dead
(
wjs_weak_ref
)
"
WJS
with
weak
ref
should
be
freed
.
"
)
;
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
}
)
;
add_task
(
async
function
alive_wwjs
(
)
{
const
TEST_PREF
=
"
wjs
.
pref2
"
;
let
observed_count
=
0
;
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
let
observer2
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISupportsWeakReference
"
]
)
observe
(
)
{
observed_count
+
=
1
;
info
(
TEST_PREF
+
"
pref
observer
"
)
;
}
}
;
Services
.
prefs
.
addObserver
(
TEST_PREF
observer2
true
)
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
true
)
;
is
(
observed_count
1
"
Run
observer2
once
after
first
flip
.
"
)
;
await
new
Promise
(
resolve
=
>
SpecialPowers
.
exactGC
(
(
)
=
>
{
SpecialPowers
.
forceCC
(
)
;
SpecialPowers
.
forceGC
(
)
;
SpecialPowers
.
forceCC
(
)
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
false
)
;
is
(
observed_count
2
"
Run
observer2
again
after
second
flip
.
"
)
;
Services
.
prefs
.
removeObserver
(
TEST_PREF
observer2
)
;
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
resolve
(
)
;
}
)
)
;
}
)
;
add_task
(
async
function
cc_wwjs
(
)
{
const
TEST_PREF
=
"
wjs
.
pref3
"
;
let
wjs_weak_ref
=
null
;
let
observed_count
=
0
;
let
canary_count
;
{
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
let
canary
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
let
someString
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
someString
.
data
=
"
canary
"
;
canary
.
appendElement
(
someString
)
;
canary
.
appendElement
(
someString
)
;
is
(
canary
.
Count
(
)
2
"
The
canary
array
should
have
two
elements
"
)
;
let
observer3
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsISupportsWeakReference
"
]
)
canary
cycle
:
new
DOMMatrix
(
)
observe
(
)
{
observed_count
+
=
1
;
canary_count
=
this
.
canary
.
Count
(
)
;
info
(
TEST_PREF
+
"
pref
observer
.
Canary
count
:
"
+
canary_count
)
;
}
}
;
observer3
.
cycle
.
backEdge
=
observer3
;
Services
.
prefs
.
addObserver
(
TEST_PREF
observer3
true
)
;
info
(
"
Flipping
the
pref
"
+
TEST_PREF
)
;
canary_count
=
-
1
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
true
)
;
is
(
canary_count
2
"
Observer
ran
with
expected
value
while
observer3
is
alive
.
"
)
;
is
(
observed_count
1
"
Ran
observer3
once
after
first
flip
.
"
)
;
wjs_weak_ref
=
make_weak_ref
(
observer3
)
;
}
info
(
"
Running
the
GC
.
"
)
;
SpecialPowers
.
forceGC
(
)
;
info
(
"
Running
the
CC
.
"
)
;
SpecialPowers
.
forceCC
(
)
;
info
(
"
Flipping
the
pref
"
+
TEST_PREF
)
;
canary_count
=
-
1
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
false
)
;
isnot
(
canary_count
0
"
After
CC
don
'
t
run
the
observer
with
an
unlinked
canary
.
"
)
;
isnot
(
canary_count
2
"
After
CC
don
'
t
run
the
observer
after
it
is
garbage
.
"
)
;
is
(
canary_count
-
1
"
After
CC
don
'
t
run
the
observer
.
"
)
;
is
(
observed_count
1
"
After
CC
don
'
t
run
the
observer
.
"
)
;
ok
(
!
weak_ref_dead
(
wjs_weak_ref
)
"
WJS
with
weak
ref
shouldn
'
t
be
freed
by
the
CC
.
"
)
;
info
(
"
Running
the
GC
again
.
"
)
;
SpecialPowers
.
forceGC
(
)
;
ok
(
weak_ref_dead
(
wjs_weak_ref
)
"
WJS
with
weak
ref
should
be
freed
.
"
)
;
info
(
"
Flipping
the
pref
"
+
TEST_PREF
)
;
canary_count
=
-
1
;
Services
.
prefs
.
setBoolPref
(
TEST_PREF
true
)
;
isnot
(
canary_count
0
"
After
GC
don
'
t
run
the
observer
with
an
unlinked
canary
.
"
)
;
isnot
(
canary_count
2
"
After
GC
don
'
t
run
the
observer
after
it
is
garbage
.
"
)
;
is
(
canary_count
-
1
"
After
GC
don
'
t
run
the
observer
.
"
)
;
is
(
observed_count
1
"
After
GC
don
'
t
run
the
observer
.
"
)
;
Services
.
prefs
.
clearUserPref
(
TEST_PREF
)
;
}
)
;
