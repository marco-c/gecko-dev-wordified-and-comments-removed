var
EXPORTED_SYMBOLS
=
[
"
ReturnCodeChild
"
]
;
function
xpcWrap
(
obj
iface
)
{
let
ifacePointer
=
Cc
[
"
mozilla
.
org
/
supports
-
interface
-
pointer
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsInterfacePointer
)
;
ifacePointer
.
data
=
obj
;
return
ifacePointer
.
data
.
QueryInterface
(
iface
)
;
}
var
ReturnCodeChild
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIXPCTestReturnCodeChild
"
]
)
doIt
(
behaviour
)
{
switch
(
behaviour
)
{
case
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_THROW
:
throw
(
new
Error
(
"
a
requested
error
"
)
)
;
case
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_RETURN_SUCCESS
:
return
;
case
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_RETURN_RESULTCODE
:
Components
.
returnCode
=
Cr
.
NS_ERROR_FAILURE
;
return
;
case
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_NEST_RESULTCODES
:
Components
.
returnCode
=
Cr
.
NS_ERROR_UNEXPECTED
;
let
sub
=
xpcWrap
(
ReturnCodeChild
Ci
.
nsIXPCTestReturnCodeChild
)
;
let
childResult
=
Cr
.
NS_OK
;
try
{
sub
.
doIt
(
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_RETURN_RESULTCODE
)
;
}
catch
(
ex
)
{
childResult
=
ex
.
result
;
}
let
consoleService
=
Cc
[
"
mozilla
.
org
/
consoleservice
;
1
"
]
.
getService
(
Ci
.
nsIConsoleService
)
;
consoleService
.
logStringMessage
(
"
nested
child
returned
"
+
childResult
)
;
return
;
}
}
}
;
