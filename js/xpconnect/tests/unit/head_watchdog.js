var
{
PromiseTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
jsm
"
)
;
PromiseTestUtils
.
thisTestLeaksUncaughtRejectionsAndShouldBeFixed
(
)
;
var
gPrefs
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
function
setWatchdogEnabled
(
enabled
)
{
gPrefs
.
setBoolPref
(
"
dom
.
use_watchdog
"
enabled
)
;
}
function
isWatchdogEnabled
(
)
{
return
gPrefs
.
getBoolPref
(
"
dom
.
use_watchdog
"
)
;
}
function
setScriptTimeout
(
seconds
)
{
var
oldTimeout
=
gPrefs
.
getIntPref
(
"
dom
.
max_script_run_time
"
)
;
gPrefs
.
setIntPref
(
"
dom
.
max_script_run_time
"
seconds
)
;
return
oldTimeout
;
}
function
busyWait
(
ms
)
{
var
start
=
new
Date
(
)
;
while
(
(
new
Date
(
)
)
-
start
<
ms
)
{
}
}
function
do_log_info
(
aMessage
)
{
print
(
"
TEST
-
INFO
|
"
+
_TEST_FILE
+
"
|
"
+
aMessage
)
;
}
function
executeSoon
(
fn
)
{
var
tm
=
Cc
[
"
mozilla
.
org
/
thread
-
manager
;
1
"
]
.
getService
(
Ci
.
nsIThreadManager
)
;
tm
.
dispatchToMainThread
(
{
run
:
fn
}
)
;
}
function
checkWatchdog
(
expectInterrupt
)
{
var
oldTimeout
=
setScriptTimeout
(
1
)
;
var
lastWatchdogWakeup
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogWakeup
"
)
;
return
new
Promise
(
resolve
=
>
{
let
inBusyWait
=
false
;
setInterruptCallback
(
function
(
)
{
if
(
lastWatchdogWakeup
=
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogWakeup
"
)
)
{
return
true
;
}
if
(
!
inBusyWait
)
{
Assert
.
ok
(
true
"
Not
in
busy
wait
ignoring
interrupt
callback
"
)
;
return
true
;
}
Assert
.
ok
(
expectInterrupt
"
Interrupt
callback
fired
"
)
;
setInterruptCallback
(
undefined
)
;
setScriptTimeout
(
oldTimeout
)
;
executeSoon
(
resolve
)
;
return
false
;
}
)
;
executeSoon
(
function
(
)
{
inBusyWait
=
true
;
busyWait
(
3000
)
;
inBusyWait
=
false
;
Assert
.
ok
(
!
expectInterrupt
"
Interrupt
callback
didn
'
t
fire
"
)
;
setInterruptCallback
(
undefined
)
;
setScriptTimeout
(
oldTimeout
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
run_test
(
)
{
do_test_pending
(
)
;
testBody
(
)
.
then
(
(
)
=
>
{
do_test_finished
(
)
;
}
)
;
}
