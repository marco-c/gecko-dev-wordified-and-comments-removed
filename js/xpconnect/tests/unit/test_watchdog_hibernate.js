async
function
testBody
(
)
{
setWatchdogEnabled
(
true
)
;
var
now
=
Date
.
now
(
)
*
1000
;
var
startHibernation
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogHibernateStart
"
)
;
var
stopHibernation
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogHibernateStop
"
)
;
do_log_info
(
"
Pre
-
hibernation
statistics
:
"
)
;
do_log_info
(
"
now
:
"
+
now
/
1000000
)
;
do_log_info
(
"
startHibernation
:
"
+
startHibernation
/
1000000
)
;
do_log_info
(
"
stopHibernation
:
"
+
stopHibernation
/
1000000
)
;
Assert
.
ok
(
startHibernation
<
now
)
;
Assert
.
ok
(
stopHibernation
<
now
)
;
await
new
Promise
(
resolve
=
>
{
var
timer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
timer
.
initWithCallback
(
resolve
10000
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
simulateActivityCallback
(
false
)
;
}
)
;
simulateActivityCallback
(
true
)
;
busyWait
(
1000
)
;
var
stateChange
=
Cu
.
getWatchdogTimestamp
(
"
ContextStateChange
"
)
;
startHibernation
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogHibernateStart
"
)
;
stopHibernation
=
Cu
.
getWatchdogTimestamp
(
"
WatchdogHibernateStop
"
)
;
do_log_info
(
"
Post
-
hibernation
statistics
:
"
)
;
do_log_info
(
"
stateChange
:
"
+
stateChange
/
1000000
)
;
do_log_info
(
"
startHibernation
:
"
+
startHibernation
/
1000000
)
;
do_log_info
(
"
stopHibernation
:
"
+
stopHibernation
/
1000000
)
;
const
FUZZ_FACTOR
=
1
*
1000
*
1000
;
Assert
.
ok
(
stateChange
>
now
+
10
*
1000
*
1000
-
FUZZ_FACTOR
)
;
Assert
.
ok
(
startHibernation
>
now
+
2
*
1000
*
1000
-
FUZZ_FACTOR
)
;
Assert
.
ok
(
startHibernation
<
now
+
5
*
1000
*
1000
+
FUZZ_FACTOR
)
;
Assert
.
ok
(
stopHibernation
>
now
+
10
*
1000
*
1000
-
FUZZ_FACTOR
)
;
}
