const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
FooComponent
(
)
{
this
.
wrappedJSObject
=
this
;
}
FooComponent
.
prototype
=
{
classDescription
:
"
Foo
Component
"
classID
:
Components
.
ID
(
"
{
6b933fe6
-
6eba
-
4622
-
ac86
-
e4f654f1b474
}
"
)
contractID
:
"
mozilla
.
org
/
tests
/
module
-
importer
;
1
"
flags
:
0
get
interfaces
(
)
{
var
interfaces
=
[
Ci
.
nsIClassInfo
]
;
var
threw
=
true
;
try
{
thereIsNoSuchIdentifier
;
threw
=
false
;
}
catch
(
ex
)
{
Assert
.
ok
(
ex
.
lineNumber
=
=
26
)
;
}
Assert
.
ok
(
threw
)
;
return
interfaces
;
}
getScriptableHelper
:
function
getScriptableHelper
(
)
{
return
null
;
}
QueryInterface
:
function
QueryInterface
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIClassInfo
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
return
this
;
throw
Cr
.
NS_ERROR_NO_INTERFACE
;
}
}
;
function
BarComponent
(
)
{
}
BarComponent
.
prototype
=
{
classDescription
:
"
Module
importer
test
2
"
classID
:
Components
.
ID
(
"
{
708a896a
-
b48d
-
4bff
-
906e
-
fc2fd134b296
}
"
)
contractID
:
"
mozilla
.
org
/
tests
/
module
-
importer
;
2
"
flags
:
0
interfaces
:
[
Ci
.
nsIClassInfo
]
getScriptableHelper
:
function
getScriptableHelper
(
)
{
return
null
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIClassInfo
"
]
)
}
;
const
Assert
=
{
ok
(
cond
text
)
{
if
(
!
cond
)
throw
"
Failed
check
:
"
+
text
;
}
}
;
var
gComponentsArray
=
[
FooComponent
BarComponent
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
gComponentsArray
)
;
