var
XPCOMUtils
;
function
run_test
(
)
{
var
scope
=
{
}
;
var
exports
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
scope
)
;
Assert
.
equal
(
typeof
(
scope
.
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
scope
.
XPCOMUtils
.
defineLazyGetter
)
"
function
"
)
;
equal
(
scope
.
XPCOMUtils
exports
.
XPCOMUtils
)
;
deepEqual
(
Object
.
keys
(
scope
)
[
"
XPCOMUtils
"
]
)
;
deepEqual
(
Object
.
keys
(
exports
)
[
"
XPCOMUtils
"
]
)
;
exports
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
equal
(
scope
.
XPCOMUtils
exports
.
XPCOMUtils
)
;
deepEqual
(
Object
.
keys
(
exports
)
[
"
XPCOMUtils
"
]
)
;
Assert
.
throws
(
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
null
)
TypeError
)
;
Assert
.
equal
(
typeof
(
Cu
.
import
)
"
function
"
)
;
(
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
)
;
Assert
.
equal
(
typeof
(
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
XPCOMUtils
.
defineLazyGetter
)
"
function
"
)
;
var
scope2
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
scope2
)
;
Assert
.
equal
(
typeof
(
scope2
.
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
scope2
.
XPCOMUtils
.
defineLazyGetter
)
"
function
"
)
;
Assert
.
ok
(
scope2
.
XPCOMUtils
=
=
scope
.
XPCOMUtils
)
;
var
res
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
]
.
getService
(
Ci
.
nsIResProtocolHandler
)
;
var
resURI
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
.
newURI
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
dump
(
"
resURI
:
"
+
resURI
+
"
\
n
"
)
;
var
filePath
=
res
.
resolveURI
(
resURI
)
;
var
scope3
=
{
}
;
Assert
.
throws
(
(
)
=
>
ChromeUtils
.
import
(
filePath
scope3
)
/
SecurityError
/
"
Expecting
file
URI
not
to
be
imported
"
)
;
var
didThrow
=
false
;
try
{
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
"
wrong
"
)
;
}
catch
(
ex
)
{
print
(
"
exception
(
expected
)
:
"
+
ex
)
;
didThrow
=
true
;
}
Assert
.
ok
(
didThrow
)
;
var
scope4
=
{
}
;
const
wrongScheme
=
"
data
:
text
/
javascript
var
a
=
{
a
:
1
}
"
;
Assert
.
throws
(
(
)
=
>
ChromeUtils
.
import
(
wrongScheme
scope4
)
/
SecurityError
/
"
Expecting
data
URI
not
to
be
imported
"
)
;
}
