function
run_test
(
)
{
var
scope
=
{
}
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
scope
)
;
Assert
.
equal
(
typeof
(
scope
.
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
scope
.
XPCOMUtils
.
generateNSGetFactory
)
"
function
"
)
;
var
module
=
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
null
)
;
Assert
.
equal
(
typeof
(
XPCOMUtils
)
"
undefined
"
)
;
Assert
.
equal
(
typeof
(
module
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
module
.
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
module
.
XPCOMUtils
.
generateNSGetFactory
)
"
function
"
)
;
Assert
.
ok
(
scope
.
XPCOMUtils
=
=
module
.
XPCOMUtils
)
;
Assert
.
equal
(
typeof
(
Components
.
utils
.
import
)
"
function
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Assert
.
equal
(
typeof
(
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
XPCOMUtils
.
generateNSGetFactory
)
"
function
"
)
;
var
scope2
=
{
}
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
scope2
)
;
Assert
.
equal
(
typeof
(
scope2
.
XPCOMUtils
)
"
object
"
)
;
Assert
.
equal
(
typeof
(
scope2
.
XPCOMUtils
.
generateNSGetFactory
)
"
function
"
)
;
Assert
.
ok
(
scope2
.
XPCOMUtils
=
=
scope
.
XPCOMUtils
)
;
var
res
=
Components
.
classes
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
]
.
getService
(
Components
.
interfaces
.
nsIResProtocolHandler
)
;
var
resURI
=
res
.
newURI
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
dump
(
"
resURI
:
"
+
resURI
+
"
\
n
"
)
;
var
filePath
=
res
.
resolveURI
(
resURI
)
;
var
scope3
=
{
}
;
Assert
.
throws
(
(
)
=
>
Components
.
utils
.
import
(
filePath
scope3
)
/
NS_ERROR_UNEXPECTED
/
)
;
var
didThrow
=
false
;
try
{
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
"
wrong
"
)
;
}
catch
(
ex
)
{
print
(
"
exception
(
expected
)
:
"
+
ex
)
;
didThrow
=
true
;
}
Assert
.
ok
(
didThrow
)
;
do_load_manifest
(
"
component_import
.
manifest
"
)
;
const
contractID
=
"
mozilla
.
org
/
tests
/
module
-
importer
;
"
;
Assert
.
ok
(
(
contractID
+
"
1
"
)
in
Components
.
classes
)
;
var
foo
=
Components
.
classes
[
contractID
+
"
1
"
]
.
createInstance
(
Components
.
interfaces
.
nsIClassInfo
)
;
Assert
.
ok
(
Boolean
(
foo
)
)
;
Assert
.
ok
(
foo
.
contractID
=
=
contractID
+
"
1
"
)
;
var
interfaces
=
foo
.
getInterfaces
(
{
}
)
;
Assert
.
equal
(
interfaces
Components
.
interfaces
.
nsIClassInfo
.
number
)
;
const
cid
=
"
{
6b933fe6
-
6eba
-
4622
-
ac86
-
e4f654f1b474
}
"
;
Assert
.
ok
(
cid
in
Components
.
classesByID
)
;
foo
=
Components
.
classesByID
[
cid
]
.
createInstance
(
Components
.
interfaces
.
nsIClassInfo
)
;
Assert
.
ok
(
foo
.
contractID
=
=
contractID
+
"
1
"
)
;
Assert
.
ok
(
(
contractID
+
"
2
"
)
in
Components
.
classes
)
;
var
bar
=
Components
.
classes
[
contractID
+
"
2
"
]
.
createInstance
(
Components
.
interfaces
.
nsIClassInfo
)
;
Assert
.
ok
(
Boolean
(
bar
)
)
;
Assert
.
ok
(
bar
.
contractID
=
=
contractID
+
"
2
"
)
;
}
