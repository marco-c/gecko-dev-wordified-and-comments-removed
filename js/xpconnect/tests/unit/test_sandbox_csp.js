"
use
strict
"
;
function
isEvalAllowed
(
sandbox
)
{
try
{
Cu
.
evalInSandbox
(
"
eval
(
'
1234
'
)
"
sandbox
)
;
return
true
;
}
catch
(
e
)
{
Assert
.
equal
(
e
.
message
"
call
to
eval
(
)
blocked
by
CSP
"
"
Eval
error
msg
"
)
;
return
false
;
}
}
add_task
(
function
test_empty_csp
(
)
{
let
sand
=
Cu
.
Sandbox
(
[
"
http
:
/
/
example
.
com
/
"
]
{
sandboxContentSecurityPolicy
:
"
"
}
)
;
Assert
.
ok
(
isEvalAllowed
(
sand
)
"
eval
(
)
not
blocked
with
empty
CSP
string
"
)
;
}
)
;
add_task
(
function
test_undefined_csp
(
)
{
let
sand
=
Cu
.
Sandbox
(
[
"
http
:
/
/
example
.
com
/
"
]
{
sandboxContentSecurityPolicy
:
undefined
}
)
;
Assert
.
ok
(
isEvalAllowed
(
sand
)
"
eval
(
)
not
blocked
with
undefined
CSP
"
)
;
}
)
;
add_task
(
function
test_malformed_csp
(
)
{
let
sand
=
Cu
.
Sandbox
(
[
"
http
:
/
/
example
.
com
/
"
]
{
sandboxContentSecurityPolicy
:
"
This
is
not
a
valid
CSP
value
"
}
)
;
Assert
.
ok
(
isEvalAllowed
(
sand
)
"
eval
(
)
not
blocked
with
undefined
CSP
"
)
;
}
)
;
add_task
(
function
test_allowed_by_sandboxContentSecurityPolicy
(
)
{
let
sand
=
Cu
.
Sandbox
(
[
"
http
:
/
/
example
.
com
/
"
]
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
unsafe
-
eval
'
;
"
}
)
;
Assert
.
ok
(
isEvalAllowed
(
sand
)
"
eval
(
)
allowed
by
'
unsafe
-
eval
'
CSP
"
)
;
}
)
;
add_task
(
function
test_blocked_by_sandboxContentSecurityPolicy
(
)
{
let
sand
=
Cu
.
Sandbox
(
[
"
http
:
/
/
example
.
com
/
"
]
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
none
'
;
"
}
)
;
Assert
.
ok
(
Cu
.
getObjectPrincipal
(
sand
)
.
isExpandedPrincipal
"
Exp
principal
"
)
;
Assert
.
ok
(
!
isEvalAllowed
(
sand
)
"
eval
(
)
should
be
blocked
by
CSP
"
)
;
Assert
.
throws
(
(
)
=
>
sand
.
eval
(
"
123
"
)
/
EvalError
:
call
to
eval
\
(
\
)
blocked
by
CSP
/
"
sandbox
.
eval
(
)
is
also
blocked
by
CSP
"
)
;
}
)
;
add_task
(
function
test_sandboxContentSecurityPolicy_on_content_principal
(
)
{
Assert
.
throws
(
(
)
=
>
{
Cu
.
Sandbox
(
"
http
:
/
/
example
.
com
"
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
none
'
;
"
}
)
;
}
/
Error
:
sandboxContentSecurityPolicy
is
currently
only
supported
with
ExpandedPrincipals
/
"
sandboxContentSecurityPolicy
does
not
work
with
content
principal
"
)
;
}
)
;
add_task
(
function
test_sandboxContentSecurityPolicy_on_null_principal
(
)
{
Assert
.
throws
(
(
)
=
>
{
Cu
.
Sandbox
(
null
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
none
'
;
"
}
)
;
}
/
Error
:
sandboxContentSecurityPolicy
is
currently
only
supported
with
ExpandedPrincipals
/
"
sandboxContentSecurityPolicy
does
not
work
with
content
principal
"
)
;
}
)
;
add_task
(
function
test_sandboxContentSecurityPolicy_on_content_principal
(
)
{
Assert
.
throws
(
(
)
=
>
{
Cu
.
Sandbox
(
"
http
:
/
/
example
.
com
"
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
none
'
;
"
}
)
;
}
/
Error
:
sandboxContentSecurityPolicy
is
currently
only
supported
with
ExpandedPrincipals
/
"
sandboxContentSecurityPolicy
does
not
work
with
content
principal
"
)
;
}
)
;
add_task
(
function
test_sandboxContentSecurityPolicy_on_system_principal
(
)
{
const
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
Assert
.
throws
(
(
)
=
>
{
Cu
.
Sandbox
(
systemPrincipal
{
sandboxContentSecurityPolicy
:
"
script
-
src
'
none
'
;
"
}
)
;
}
/
Error
:
sandboxContentSecurityPolicy
is
currently
only
supported
with
ExpandedPrincipals
/
"
sandboxContentSecurityPolicy
does
not
work
with
system
principal
"
)
;
}
)
;
