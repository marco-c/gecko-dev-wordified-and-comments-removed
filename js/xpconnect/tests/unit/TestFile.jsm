var
EXPORTED_SYMBOLS
=
[
"
TestFile
"
]
;
const
Assert
=
{
ok
(
cond
text
)
{
if
(
!
cond
)
throw
"
Failed
check
:
"
+
text
;
}
}
;
var
TestFile
=
{
doTest
:
function
(
cb
)
{
var
file
=
Cc
[
"
mozilla
.
org
/
file
/
directory_service
;
1
"
]
.
getService
(
Ci
.
nsIProperties
)
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
xpcshell
.
toml
"
)
;
var
f1
f2
;
Promise
.
all
(
[
File
.
createFromFileName
(
file
.
path
)
.
then
(
f
=
>
{
f1
=
f
;
}
)
File
.
createFromNsIFile
(
file
)
.
then
(
f
=
>
{
f2
=
f
;
}
)
]
)
.
then
(
(
)
=
>
{
Assert
.
ok
(
f1
instanceof
File
"
Should
be
a
DOM
File
"
)
;
Assert
.
ok
(
f2
instanceof
File
"
Should
be
a
DOM
File
"
)
;
Assert
.
ok
(
f1
.
name
=
=
"
xpcshell
.
toml
"
"
Should
be
the
right
file
"
)
;
Assert
.
ok
(
f2
.
name
=
=
"
xpcshell
.
toml
"
"
Should
be
the
right
file
"
)
;
Assert
.
ok
(
f1
.
type
=
=
"
"
"
Should
be
the
right
type
"
)
;
Assert
.
ok
(
f2
.
type
=
=
"
"
"
Should
be
the
right
type
"
)
;
}
)
.
then
(
(
)
=
>
{
var
threw
=
false
;
try
{
var
f7
=
new
File
(
)
;
}
catch
(
e
)
{
threw
=
true
;
}
Assert
.
ok
(
threw
"
No
ctor
arguments
should
throw
"
)
;
var
threw
=
false
;
try
{
var
f7
=
new
File
(
Date
(
132131532
)
)
;
}
catch
(
e
)
{
threw
=
true
;
}
Assert
.
ok
(
threw
"
Passing
a
random
object
should
fail
"
)
;
var
dir
=
Cc
[
"
mozilla
.
org
/
file
/
directory_service
;
1
"
]
.
getService
(
Ci
.
nsIProperties
)
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
return
File
.
createFromNsIFile
(
dir
)
}
)
.
then
(
(
)
=
>
{
Assert
.
ok
(
false
"
Can
'
t
create
a
File
object
for
a
directory
"
)
;
}
(
)
=
>
{
Assert
.
ok
(
true
"
Can
'
t
create
a
File
object
for
a
directory
"
)
;
}
)
.
then
(
(
)
=
>
{
cb
(
true
)
;
}
)
;
}
}
;
