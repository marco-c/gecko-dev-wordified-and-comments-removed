function
TestInterfaceAll
(
)
{
}
TestInterfaceAll
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIXPCTestInterfaceA
"
"
nsIXPCTestInterfaceB
"
"
nsIXPCTestInterfaceC
"
]
)
name
:
"
TestInterfaceAllDefaultName
"
someInteger
:
42
}
;
function
newWrappedJS
(
)
{
return
xpcWrap
(
new
TestInterfaceAll
(
)
)
;
}
function
run_test
(
)
{
var
ifs
=
{
a
:
Ci
[
'
nsIXPCTestInterfaceA
'
]
b
:
Ci
[
'
nsIXPCTestInterfaceB
'
]
c
:
Ci
[
'
nsIXPCTestInterfaceC
'
]
}
;
for
(
let
i
=
0
;
i
<
2
;
+
+
i
)
play_with_tearoffs
(
ifs
)
;
}
function
play_with_tearoffs
(
ifs
)
{
var
instances
=
[
]
;
for
(
var
i
=
0
;
i
<
300
;
+
+
i
)
instances
.
push
(
newWrappedJS
(
)
.
QueryInterface
(
ifs
.
b
)
)
;
gc
(
)
;
instances
.
forEach
(
function
(
v
i
a
)
{
v
.
QueryInterface
(
ifs
.
a
)
;
}
)
;
instances
.
forEach
(
function
(
v
i
a
)
{
v
.
QueryInterface
(
ifs
.
c
)
;
}
)
;
Assert
.
ok
(
'
name
'
in
instances
[
10
]
'
Have
the
prop
from
A
/
B
'
)
;
Assert
.
ok
(
'
someInteger
'
in
instances
[
10
]
'
Have
the
prop
from
C
'
)
;
var
aTearOffs
=
instances
.
map
(
function
(
v
i
a
)
{
return
v
.
nsIXPCTestInterfaceA
;
}
)
;
var
bTearOffs
=
instances
.
map
(
function
(
v
i
a
)
{
return
v
.
nsIXPCTestInterfaceB
;
}
)
;
Assert
.
ok
(
'
name
'
in
aTearOffs
[
1
]
'
Have
the
prop
from
A
'
)
;
Assert
.
ok
(
!
(
'
someInteger
'
in
aTearOffs
[
1
]
)
'
Dont
have
the
prop
from
C
'
)
;
gc
(
)
;
for
(
var
i
=
0
;
i
<
instances
.
length
;
+
+
i
)
if
(
i
%
2
=
=
0
)
instances
[
i
]
=
null
;
gc
(
)
;
for
(
var
i
=
0
;
i
<
aTearOffs
.
length
;
+
+
i
)
if
(
i
%
3
=
=
0
)
aTearOffs
[
i
]
=
null
;
gc
(
)
;
for
(
var
i
=
0
;
i
<
bTearOffs
.
length
;
+
+
i
)
if
(
i
%
5
=
=
0
)
bTearOffs
[
i
]
=
null
;
gc
(
)
;
bTearOffs
=
0
;
gc
(
)
;
var
cTearOffs
=
instances
.
map
(
function
(
v
i
a
)
{
return
v
?
v
.
nsIXPCTestInterfaceC
:
null
;
}
)
;
Assert
.
ok
(
!
(
'
name
'
in
cTearOffs
[
1
]
)
'
Dont
have
the
prop
from
A
'
)
;
Assert
.
ok
(
'
someInteger
'
in
cTearOffs
[
1
]
'
have
the
prop
from
C
'
)
;
aTearOffs
=
null
;
gc
(
)
;
instances
=
null
;
gc
(
)
;
Assert
.
ok
(
true
"
Got
all
the
way
through
without
crashing
!
"
)
;
}
