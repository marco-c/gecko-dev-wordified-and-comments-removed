function
getConsoleMessages
(
)
{
let
consoleService
=
Cc
[
"
mozilla
.
org
/
consoleservice
;
1
"
]
.
getService
(
Ci
.
nsIConsoleService
)
;
let
messages
=
consoleService
.
getMessageArray
(
)
.
map
(
(
m
)
=
>
m
.
toString
(
)
)
;
consoleService
.
reset
(
)
;
return
messages
;
}
function
run_test
(
)
{
registerXPCTestComponents
(
)
;
test_simple
(
"
mozilla
.
org
/
js
/
xpc
/
test
/
native
/
ReturnCodeParent
;
1
"
)
;
test_nested
(
"
mozilla
.
org
/
js
/
xpc
/
test
/
native
/
ReturnCodeParent
;
1
"
)
;
test_simple
(
"
mozilla
.
org
/
js
/
xpc
/
test
/
native
/
ESMReturnCodeParent
;
1
"
)
;
test_nested
(
"
mozilla
.
org
/
js
/
xpc
/
test
/
native
/
ESMReturnCodeParent
;
1
"
)
;
}
function
test_simple
(
contractID
)
{
let
parent
=
Cc
[
contractID
]
.
createInstance
(
Ci
.
nsIXPCTestReturnCodeParent
)
;
let
result
;
getConsoleMessages
(
)
;
result
=
parent
.
callChild
(
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_THROW
)
;
Assert
.
equal
(
result
Cr
.
NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS
"
exception
caused
NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS
"
)
;
let
messages
=
getConsoleMessages
(
)
;
Assert
.
equal
(
messages
.
length
1
"
got
a
console
message
from
the
exception
"
)
;
Assert
.
ok
(
messages
[
0
]
.
includes
(
"
a
requested
error
"
)
"
got
the
message
text
"
)
;
result
=
parent
.
callChild
(
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_RETURN_SUCCESS
)
;
Assert
.
equal
(
result
Cr
.
NS_OK
"
success
is
success
"
)
;
Assert
.
deepEqual
(
getConsoleMessages
(
)
[
]
"
no
messages
reported
on
success
.
"
)
;
result
=
parent
.
callChild
(
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_RETURN_RESULTCODE
)
;
Assert
.
equal
(
result
Cr
.
NS_ERROR_FAILURE
"
NS_ERROR_FAILURE
was
seen
as
the
error
code
.
"
)
;
Assert
.
deepEqual
(
getConsoleMessages
(
)
[
]
"
no
messages
reported
with
.
returnCode
"
)
;
}
function
test_nested
(
contractID
)
{
let
parent
=
Cc
[
contractID
]
.
createInstance
(
Ci
.
nsIXPCTestReturnCodeParent
)
;
let
result
;
getConsoleMessages
(
)
;
result
=
parent
.
callChild
(
Ci
.
nsIXPCTestReturnCodeChild
.
CHILD_SHOULD_NEST_RESULTCODES
)
;
Assert
.
equal
(
result
Cr
.
NS_ERROR_UNEXPECTED
"
NS_ERROR_UNEXPECTED
was
seen
as
the
error
code
.
"
)
;
let
expected
=
[
"
nested
child
returned
"
+
Cr
.
NS_ERROR_FAILURE
]
;
Assert
.
deepEqual
(
getConsoleMessages
(
)
expected
"
got
the
correct
sub
-
error
"
)
;
}
