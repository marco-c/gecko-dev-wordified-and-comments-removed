var
sr
=
new
ShadowRealm
(
)
;
var
resolve
;
var
allSettled
=
new
Promise
(
(
resolved
)
=
>
{
resolve
=
resolved
}
)
;
self
.
onmessage
=
async
function
(
e
)
{
try
{
if
(
e
.
data
=
=
=
'
evaluate
'
)
{
sr
.
evaluate
(
"
var
s
=
'
PASS
set
string
in
realm
'
;
"
)
var
res
=
sr
.
evaluate
(
'
s
'
)
;
postMessage
(
res
)
;
return
;
}
if
(
e
.
data
=
=
'
import
'
)
{
var
import_worked
=
false
;
var
importValue_worked
=
false
;
var
importNested_worked
=
false
;
try
{
var
module
=
await
import
(
"
.
/
shadow_realm_module
.
js
"
)
;
if
(
module
.
x
!
=
1
)
{
throw
"
mismatch
"
;
}
import_worked
=
true
;
}
catch
(
e
)
{
}
try
{
await
sr
.
importValue
(
"
.
/
shadow_realm_module
.
js
"
'
x
'
)
.
then
(
(
x
)
=
>
{
if
(
x
=
=
1
)
{
importValue_worked
=
true
;
}
}
)
;
}
catch
(
e
)
{
}
try
{
sr
.
evaluate
(
var
imported
=
false
;
import
(
"
.
/
shadow_realm_module
.
js
"
)
.
then
(
(
module
)
=
>
{
if
(
module
.
x
=
=
1
)
{
imported
=
true
;
}
}
)
;
true
;
)
;
importNested_worked
=
sr
.
evaluate
(
"
imported
"
)
;
}
catch
(
e
)
{
}
if
(
importValue_worked
=
=
importNested_worked
)
{
postMessage
(
PASS
:
import
in
workers
{
import_worked
?
"
worked
"
:
"
failed
"
}
.
importValue
and
nested
import
all
{
importValue_worked
?
"
worked
"
:
"
failed
"
}
)
;
resolve
(
)
;
return
;
}
postMessage
(
FAIL
:
importValue
{
importValue_worked
}
import
{
import_worked
}
importNested
{
importNested_worked
}
)
;
resolve
(
)
;
return
;
}
if
(
e
.
data
=
=
'
finish
'
)
{
await
allSettled
;
postMessage
(
"
finish
"
)
;
return
;
}
}
catch
(
e
)
{
postMessage
(
"
FAIL
:
"
+
e
.
message
)
;
}
postMessage
(
'
Unknown
message
type
.
'
)
;
}
