#
include
"
xpcrtfuzzing
/
xpcrtfuzzing
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
<
stdio
.
h
>
#
include
"
FuzzingInterface
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
js
/
CompilationAndEvaluation
.
h
"
#
include
"
js
/
CompileOptions
.
h
"
#
include
"
js
/
Conversions
.
h
"
#
include
"
js
/
ErrorReport
.
h
"
#
include
"
js
/
Exception
.
h
"
#
include
"
js
/
experimental
/
TypedData
.
h
"
#
include
"
js
/
PropertyAndElement
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
SourceText
.
h
"
#
include
"
js
/
Value
.
h
"
using
mozilla
:
:
dom
:
:
AutoJSAPI
;
static
AutoJSAPI
*
gJsapi
=
nullptr
;
static
std
:
:
string
gFuzzModuleName
;
static
void
CrashOnPendingException
(
)
{
if
(
gJsapi
-
>
HasException
(
)
)
{
gJsapi
-
>
ReportException
(
)
;
MOZ_CRASH
(
"
Unhandled
exception
from
JS
runtime
!
"
)
;
}
}
int
FuzzXPCRuntimeStart
(
AutoJSAPI
*
jsapi
int
*
argc
char
*
*
*
argv
LibFuzzerDriver
fuzzerDriver
)
{
gFuzzModuleName
=
getenv
(
"
FUZZER
"
)
;
gJsapi
=
jsapi
;
int
ret
=
FuzzXPCRuntimeInit
(
)
;
if
(
ret
)
{
fprintf
(
stderr
"
Fuzzing
Interface
:
Error
:
Initialize
callback
failed
\
n
"
)
;
return
ret
;
}
return
fuzzerDriver
(
argc
argv
FuzzXPCRuntimeFuzz
)
;
}
int
FuzzXPCRuntimeInit
(
)
{
JSContext
*
cx
=
gJsapi
-
>
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
JS
:
:
CompileOptions
opts
(
cx
)
;
JS
:
:
EvaluateUtf8Path
(
cx
opts
gFuzzModuleName
.
c_str
(
)
&
v
)
;
CrashOnPendingException
(
)
;
return
0
;
}
int
FuzzXPCRuntimeFuzz
(
const
uint8_t
*
buf
size_t
size
)
{
if
(
!
size
)
{
return
0
;
}
JSContext
*
cx
=
gJsapi
-
>
cx
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
arr
(
cx
JS_NewUint8ClampedArray
(
cx
size
)
)
;
if
(
!
arr
)
{
MOZ_CRASH
(
"
OOM
"
)
;
}
do
{
JS
:
:
AutoCheckCannotGC
nogc
;
bool
isShared
;
uint8_t
*
data
=
JS_GetUint8ClampedArrayData
(
arr
&
isShared
nogc
)
;
MOZ_RELEASE_ASSERT
(
!
isShared
)
;
memcpy
(
data
buf
size
)
;
}
while
(
false
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
cx
JS
:
:
CurrentGlobalOrNull
(
cx
)
)
;
JS
:
:
RootedValue
arrVal
(
cx
JS
:
:
ObjectValue
(
*
arr
)
)
;
if
(
!
JS_SetProperty
(
cx
global
"
fuzzBuf
"
arrVal
)
)
{
MOZ_CRASH
(
"
JS_SetProperty
failed
"
)
;
}
JS
:
:
Rooted
<
JS
:
:
Value
>
v
(
cx
)
;
JS
:
:
CompileOptions
opts
(
cx
)
;
static
const
char
data
[
]
=
"
JSFuzzIterate
(
)
;
"
;
JS
:
:
SourceText
<
mozilla
:
:
Utf8Unit
>
srcBuf
;
if
(
!
srcBuf
.
init
(
cx
data
strlen
(
data
)
JS
:
:
SourceOwnership
:
:
Borrowed
)
)
{
return
1
;
}
if
(
!
JS
:
:
Evaluate
(
cx
opts
.
setFileAndLine
(
__FILE__
__LINE__
)
srcBuf
&
v
)
&
&
!
JS_IsExceptionPending
(
cx
)
)
{
return
1
;
}
CrashOnPendingException
(
)
;
int32_t
ret
=
0
;
if
(
!
ToInt32
(
cx
v
&
ret
)
)
{
MOZ_CRASH
(
"
Must
return
an
int32
compatible
return
value
!
"
)
;
}
return
ret
;
}
