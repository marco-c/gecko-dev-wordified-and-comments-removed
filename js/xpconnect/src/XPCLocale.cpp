#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsCollationCID
.
h
"
#
include
"
nsJSUtils
.
h
"
#
include
"
nsICollation
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsNativeCharsetUtils
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
mozilla
/
CycleCollectedJSContext
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
xpcpublic
.
h
"
using
namespace
JS
;
using
namespace
mozilla
;
using
mozilla
:
:
intl
:
:
LocaleService
;
class
XPCLocaleObserver
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
void
Init
(
)
;
private
:
virtual
~
XPCLocaleObserver
(
)
{
}
;
}
;
NS_IMPL_ISUPPORTS
(
XPCLocaleObserver
nsIObserver
)
;
void
XPCLocaleObserver
:
:
Init
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
observerService
-
>
AddObserver
(
this
"
intl
:
app
-
locales
-
changed
"
false
)
;
}
NS_IMETHODIMP
XPCLocaleObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
"
intl
:
app
-
locales
-
changed
"
)
)
{
JSRuntime
*
rt
=
CycleCollectedJSRuntime
:
:
Get
(
)
-
>
Runtime
(
)
;
if
(
!
xpc_LocalizeRuntime
(
rt
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
return
NS_OK
;
}
return
NS_ERROR_UNEXPECTED
;
}
struct
XPCLocaleCallbacks
:
public
JSLocaleCallbacks
{
XPCLocaleCallbacks
(
)
{
MOZ_COUNT_CTOR
(
XPCLocaleCallbacks
)
;
localeToUpperCase
=
nullptr
;
localeToLowerCase
=
nullptr
;
localeCompare
=
LocaleCompare
;
localeToUnicode
=
LocaleToUnicode
;
RefPtr
<
XPCLocaleObserver
>
locObs
=
new
XPCLocaleObserver
(
)
;
locObs
-
>
Init
(
)
;
}
~
XPCLocaleCallbacks
(
)
{
AssertThreadSafety
(
)
;
MOZ_COUNT_DTOR
(
XPCLocaleCallbacks
)
;
}
static
XPCLocaleCallbacks
*
This
(
JSContext
*
cx
)
{
return
This
(
JS_GetRuntime
(
cx
)
)
;
}
static
XPCLocaleCallbacks
*
This
(
JSRuntime
*
rt
)
{
const
JSLocaleCallbacks
*
lc
=
JS_GetLocaleCallbacks
(
rt
)
;
MOZ_ASSERT
(
lc
)
;
MOZ_ASSERT
(
lc
-
>
localeToUpperCase
=
=
nullptr
)
;
MOZ_ASSERT
(
lc
-
>
localeToLowerCase
=
=
nullptr
)
;
MOZ_ASSERT
(
lc
-
>
localeCompare
=
=
LocaleCompare
)
;
MOZ_ASSERT
(
lc
-
>
localeToUnicode
=
=
LocaleToUnicode
)
;
const
XPCLocaleCallbacks
*
ths
=
static_cast
<
const
XPCLocaleCallbacks
*
>
(
lc
)
;
ths
-
>
AssertThreadSafety
(
)
;
return
const_cast
<
XPCLocaleCallbacks
*
>
(
ths
)
;
}
static
bool
LocaleToUnicode
(
JSContext
*
cx
const
char
*
src
MutableHandleValue
rval
)
{
return
This
(
cx
)
-
>
ToUnicode
(
cx
src
rval
)
;
}
static
bool
LocaleCompare
(
JSContext
*
cx
HandleString
src1
HandleString
src2
MutableHandleValue
rval
)
{
return
This
(
cx
)
-
>
Compare
(
cx
src1
src2
rval
)
;
}
private
:
bool
Compare
(
JSContext
*
cx
HandleString
src1
HandleString
src2
MutableHandleValue
rval
)
{
nsresult
rv
;
if
(
!
mCollation
)
{
nsCOMPtr
<
nsICollationFactory
>
colFactory
=
do_CreateInstance
(
NS_COLLATIONFACTORY_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
colFactory
-
>
CreateCollation
(
getter_AddRefs
(
mCollation
)
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
xpc
:
:
Throw
(
cx
rv
)
;
return
false
;
}
}
nsAutoJSString
autoStr1
autoStr2
;
if
(
!
autoStr1
.
init
(
cx
src1
)
|
|
!
autoStr2
.
init
(
cx
src2
)
)
{
return
false
;
}
int32_t
result
;
rv
=
mCollation
-
>
CompareString
(
nsICollation
:
:
kCollationStrengthDefault
autoStr1
autoStr2
&
result
)
;
if
(
NS_FAILED
(
rv
)
)
{
xpc
:
:
Throw
(
cx
rv
)
;
return
false
;
}
rval
.
setInt32
(
result
)
;
return
true
;
}
bool
ToUnicode
(
JSContext
*
cx
const
char
*
src
MutableHandleValue
rval
)
{
nsAutoString
result
;
NS_CopyNativeToUnicode
(
nsDependentCString
(
src
)
result
)
;
JSString
*
ucstr
=
JS_NewUCStringCopyN
(
cx
result
.
get
(
)
result
.
Length
(
)
)
;
if
(
ucstr
)
{
rval
.
setString
(
ucstr
)
;
return
true
;
}
xpc
:
:
Throw
(
cx
NS_ERROR_OUT_OF_MEMORY
)
;
return
false
;
}
void
AssertThreadSafety
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
XPCLocaleCallbacks
)
;
}
nsCOMPtr
<
nsICollation
>
mCollation
;
NS_DECL_OWNINGTHREAD
}
;
bool
xpc_LocalizeRuntime
(
JSRuntime
*
rt
)
{
const
JSLocaleCallbacks
*
lc
=
JS_GetLocaleCallbacks
(
rt
)
;
if
(
!
lc
)
{
JS_SetLocaleCallbacks
(
rt
new
XPCLocaleCallbacks
(
)
)
;
}
if
(
Preferences
:
:
GetBool
(
"
javascript
.
use_us_english_locale
"
false
)
)
{
return
JS_SetDefaultLocale
(
rt
"
en
-
US
"
)
;
}
nsAutoCString
appLocaleStr
;
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
appLocaleStr
)
;
return
JS_SetDefaultLocale
(
rt
appLocaleStr
.
get
(
)
)
;
}
void
xpc_DelocalizeRuntime
(
JSRuntime
*
rt
)
{
const
XPCLocaleCallbacks
*
lc
=
XPCLocaleCallbacks
:
:
This
(
rt
)
;
JS_SetLocaleCallbacks
(
rt
nullptr
)
;
delete
lc
;
}
