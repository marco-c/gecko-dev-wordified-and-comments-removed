#
include
"
nscore
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
xpcpublic
.
h
"
using
namespace
JS
;
const
XPCStringConvert
:
:
LiteralExternalString
XPCStringConvert
:
:
sLiteralExternalString
;
const
XPCStringConvert
:
:
DOMStringExternalString
XPCStringConvert
:
:
sDOMStringExternalString
;
void
XPCStringConvert
:
:
LiteralExternalString
:
:
finalize
(
JS
:
:
Latin1Char
*
aChars
)
const
{
}
void
XPCStringConvert
:
:
LiteralExternalString
:
:
finalize
(
char16_t
*
aChars
)
const
{
}
size_t
XPCStringConvert
:
:
LiteralExternalString
:
:
sizeOfBuffer
(
const
JS
:
:
Latin1Char
*
aChars
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
size_t
XPCStringConvert
:
:
LiteralExternalString
:
:
sizeOfBuffer
(
const
char16_t
*
aChars
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
void
XPCStringConvert
:
:
DOMStringExternalString
:
:
finalize
(
JS
:
:
Latin1Char
*
aChars
)
const
{
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromData
(
aChars
)
;
buf
-
>
Release
(
)
;
}
void
XPCStringConvert
:
:
DOMStringExternalString
:
:
finalize
(
char16_t
*
aChars
)
const
{
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromData
(
aChars
)
;
buf
-
>
Release
(
)
;
}
size_t
XPCStringConvert
:
:
DOMStringExternalString
:
:
sizeOfBuffer
(
const
JS
:
:
Latin1Char
*
aChars
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
JS
:
:
AutoCheckCannotGC
autoCannotGC
;
const
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromData
(
const_cast
<
JS
:
:
Latin1Char
*
>
(
aChars
)
)
;
return
buf
-
>
SizeOfIncludingThisIfUnshared
(
aMallocSizeOf
)
;
}
size_t
XPCStringConvert
:
:
DOMStringExternalString
:
:
sizeOfBuffer
(
const
char16_t
*
aChars
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
JS
:
:
AutoCheckCannotGC
autoCannotGC
;
const
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromData
(
const_cast
<
char16_t
*
>
(
aChars
)
)
;
return
buf
-
>
SizeOfIncludingThisIfUnshared
(
aMallocSizeOf
)
;
}
bool
XPCStringConvert
:
:
ReadableToJSVal
(
JSContext
*
cx
const
nsAString
&
readable
nsStringBuffer
*
*
sharedBuffer
MutableHandleValue
vp
)
{
*
sharedBuffer
=
nullptr
;
uint32_t
length
=
readable
.
Length
(
)
;
if
(
readable
.
IsLiteral
(
)
)
{
return
StringLiteralToJSVal
(
cx
readable
.
BeginReading
(
)
length
vp
)
;
}
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromString
(
readable
)
;
if
(
buf
)
{
bool
shared
;
if
(
!
UCStringBufferToJSVal
(
cx
buf
length
vp
&
shared
)
)
{
return
false
;
}
if
(
shared
)
{
*
sharedBuffer
=
buf
;
}
return
true
;
}
JSString
*
str
=
JS_NewUCStringCopyN
(
cx
readable
.
BeginReading
(
)
length
)
;
if
(
!
str
)
{
return
false
;
}
vp
.
setString
(
str
)
;
return
true
;
}
bool
XPCStringConvert
:
:
Latin1ToJSVal
(
JSContext
*
cx
const
nsACString
&
latin1
nsStringBuffer
*
*
sharedBuffer
MutableHandleValue
vp
)
{
*
sharedBuffer
=
nullptr
;
uint32_t
length
=
latin1
.
Length
(
)
;
if
(
latin1
.
IsLiteral
(
)
)
{
return
StringLiteralToJSVal
(
cx
reinterpret_cast
<
const
JS
:
:
Latin1Char
*
>
(
latin1
.
BeginReading
(
)
)
length
vp
)
;
}
nsStringBuffer
*
buf
=
nsStringBuffer
:
:
FromString
(
latin1
)
;
if
(
buf
)
{
bool
shared
;
if
(
!
Latin1StringBufferToJSVal
(
cx
buf
length
vp
&
shared
)
)
{
return
false
;
}
if
(
shared
)
{
*
sharedBuffer
=
buf
;
}
return
true
;
}
JSString
*
str
=
JS_NewStringCopyN
(
cx
latin1
.
BeginReading
(
)
length
)
;
if
(
!
str
)
{
return
false
;
}
vp
.
setString
(
str
)
;
return
true
;
}
namespace
xpc
{
bool
NonVoidStringToJsval
(
JSContext
*
cx
nsAString
&
str
MutableHandleValue
rval
)
{
nsStringBuffer
*
sharedBuffer
;
if
(
!
XPCStringConvert
:
:
ReadableToJSVal
(
cx
str
&
sharedBuffer
rval
)
)
{
return
false
;
}
if
(
sharedBuffer
)
{
str
.
ForgetSharedBuffer
(
)
;
}
return
true
;
}
bool
NonVoidStringToJsval
(
JSContext
*
cx
const
nsAString
&
str
MutableHandleValue
rval
)
{
nsStringBuffer
*
sharedBuffer
;
if
(
!
XPCStringConvert
:
:
ReadableToJSVal
(
cx
str
&
sharedBuffer
rval
)
)
{
return
false
;
}
if
(
sharedBuffer
)
{
sharedBuffer
-
>
AddRef
(
)
;
}
return
true
;
}
}
