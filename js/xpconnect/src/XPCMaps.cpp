#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
xpcprivate
.
h
"
#
include
"
js
/
HashTable
.
h
"
using
namespace
mozilla
;
static
PLDHashNumber
HashIIDPtrKey
(
const
void
*
key
)
{
return
*
(
(
js
:
:
HashNumber
*
)
key
)
;
}
static
bool
MatchIIDPtrKey
(
const
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
return
(
(
const
nsID
*
)
key
)
-
>
Equals
(
*
(
(
const
nsID
*
)
(
(
PLDHashEntryStub
*
)
entry
)
-
>
key
)
)
;
}
static
PLDHashNumber
HashNativeKey
(
const
void
*
data
)
{
return
static_cast
<
const
XPCNativeSetKey
*
>
(
data
)
-
>
Hash
(
)
;
}
void
JSObject2WrappedJSMap
:
:
UpdateWeakPointersAfterGC
(
XPCJSRuntime
*
runtime
)
{
nsTArray
<
RefPtr
<
nsXPCWrappedJS
>
>
dying
;
for
(
Map
:
:
Enum
e
(
mTable
)
;
!
e
.
empty
(
)
;
e
.
popFront
(
)
)
{
nsXPCWrappedJS
*
wrapper
=
e
.
front
(
)
.
value
(
)
;
MOZ_ASSERT
(
wrapper
"
found
a
null
JS
wrapper
!
"
)
;
while
(
wrapper
)
{
#
ifdef
DEBUG
if
(
!
wrapper
-
>
IsSubjectToFinalization
(
)
)
{
JSObject
*
obj
=
wrapper
-
>
GetJSObjectPreserveColor
(
)
;
JSObject
*
prior
=
obj
;
JS_UpdateWeakPointerAfterGCUnbarriered
(
&
obj
)
;
MOZ_ASSERT
(
obj
=
=
prior
)
;
}
#
endif
if
(
wrapper
-
>
IsSubjectToFinalization
(
)
)
{
wrapper
-
>
UpdateObjectPointerAfterGC
(
)
;
if
(
!
wrapper
-
>
GetJSObjectPreserveColor
(
)
)
dying
.
AppendElement
(
dont_AddRef
(
wrapper
)
)
;
}
wrapper
=
wrapper
-
>
GetNextWrapper
(
)
;
}
JSObject
*
obj
=
e
.
front
(
)
.
key
(
)
;
JS_UpdateWeakPointerAfterGCUnbarriered
(
&
obj
)
;
if
(
!
obj
)
e
.
removeFront
(
)
;
else
e
.
front
(
)
.
mutableKey
(
)
=
obj
;
}
}
void
JSObject2WrappedJSMap
:
:
ShutdownMarker
(
)
{
for
(
Map
:
:
Range
r
=
mTable
.
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
{
nsXPCWrappedJS
*
wrapper
=
r
.
front
(
)
.
value
(
)
;
MOZ_ASSERT
(
wrapper
"
found
a
null
JS
wrapper
!
"
)
;
MOZ_ASSERT
(
wrapper
-
>
IsValid
(
)
"
found
an
invalid
JS
wrapper
!
"
)
;
wrapper
-
>
SystemIsBeingShutDown
(
)
;
}
}
size_t
JSObject2WrappedJSMap
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
sizeOfExcludingThis
(
mallocSizeOf
)
;
return
n
;
}
size_t
JSObject2WrappedJSMap
:
:
SizeOfWrappedJS
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
0
;
for
(
Map
:
:
Range
r
=
mTable
.
all
(
)
;
!
r
.
empty
(
)
;
r
.
popFront
(
)
)
n
+
=
r
.
front
(
)
.
value
(
)
-
>
SizeOfIncludingThis
(
mallocSizeOf
)
;
return
n
;
}
Native2WrappedNativeMap
*
Native2WrappedNativeMap
:
:
newMap
(
int
length
)
{
return
new
Native2WrappedNativeMap
(
length
)
;
}
Native2WrappedNativeMap
:
:
Native2WrappedNativeMap
(
int
length
)
:
mTable
(
PLDHashTable
:
:
StubOps
(
)
sizeof
(
Entry
)
length
)
{
}
size_t
Native2WrappedNativeMap
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
auto
iter
=
mTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
Native2WrappedNativeMap
:
:
Entry
*
>
(
iter
.
Get
(
)
)
;
n
+
=
mallocSizeOf
(
entry
-
>
value
)
;
}
return
n
;
}
const
struct
PLDHashTableOps
IID2WrappedJSClassMap
:
:
Entry
:
:
sOps
=
{
HashIIDPtrKey
MatchIIDPtrKey
PLDHashTable
:
:
MoveEntryStub
PLDHashTable
:
:
ClearEntryStub
}
;
IID2WrappedJSClassMap
*
IID2WrappedJSClassMap
:
:
newMap
(
int
length
)
{
return
new
IID2WrappedJSClassMap
(
length
)
;
}
IID2WrappedJSClassMap
:
:
IID2WrappedJSClassMap
(
int
length
)
:
mTable
(
&
Entry
:
:
sOps
sizeof
(
Entry
)
length
)
{
}
const
struct
PLDHashTableOps
IID2NativeInterfaceMap
:
:
Entry
:
:
sOps
=
{
HashIIDPtrKey
MatchIIDPtrKey
PLDHashTable
:
:
MoveEntryStub
PLDHashTable
:
:
ClearEntryStub
}
;
IID2NativeInterfaceMap
*
IID2NativeInterfaceMap
:
:
newMap
(
int
length
)
{
return
new
IID2NativeInterfaceMap
(
length
)
;
}
IID2NativeInterfaceMap
:
:
IID2NativeInterfaceMap
(
int
length
)
:
mTable
(
&
Entry
:
:
sOps
sizeof
(
Entry
)
length
)
{
}
size_t
IID2NativeInterfaceMap
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
auto
iter
=
mTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
IID2NativeInterfaceMap
:
:
Entry
*
>
(
iter
.
Get
(
)
)
;
n
+
=
entry
-
>
value
-
>
SizeOfIncludingThis
(
mallocSizeOf
)
;
}
return
n
;
}
ClassInfo2NativeSetMap
*
ClassInfo2NativeSetMap
:
:
newMap
(
int
length
)
{
return
new
ClassInfo2NativeSetMap
(
length
)
;
}
ClassInfo2NativeSetMap
:
:
ClassInfo2NativeSetMap
(
int
length
)
:
mTable
(
PLDHashTable
:
:
StubOps
(
)
sizeof
(
Entry
)
length
)
{
}
size_t
ClassInfo2NativeSetMap
:
:
ShallowSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
return
n
;
}
ClassInfo2WrappedNativeProtoMap
*
ClassInfo2WrappedNativeProtoMap
:
:
newMap
(
int
length
)
{
return
new
ClassInfo2WrappedNativeProtoMap
(
length
)
;
}
ClassInfo2WrappedNativeProtoMap
:
:
ClassInfo2WrappedNativeProtoMap
(
int
length
)
:
mTable
(
PLDHashTable
:
:
StubOps
(
)
sizeof
(
Entry
)
length
)
{
}
size_t
ClassInfo2WrappedNativeProtoMap
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
auto
iter
=
mTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
ClassInfo2WrappedNativeProtoMap
:
:
Entry
*
>
(
iter
.
Get
(
)
)
;
n
+
=
mallocSizeOf
(
entry
-
>
value
)
;
}
return
n
;
}
bool
NativeSetMap
:
:
Entry
:
:
Match
(
const
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
auto
Key
=
static_cast
<
const
XPCNativeSetKey
*
>
(
key
)
;
XPCNativeSet
*
SetInTable
=
(
(
Entry
*
)
entry
)
-
>
key_value
;
XPCNativeSet
*
Set
=
Key
-
>
GetBaseSet
(
)
;
XPCNativeInterface
*
Addition
=
Key
-
>
GetAddition
(
)
;
if
(
!
Set
)
{
return
(
SetInTable
-
>
GetInterfaceCount
(
)
=
=
1
&
&
SetInTable
-
>
GetInterfaceAt
(
0
)
=
=
Addition
)
|
|
(
SetInTable
-
>
GetInterfaceCount
(
)
=
=
2
&
&
SetInTable
-
>
GetInterfaceAt
(
1
)
=
=
Addition
)
;
}
if
(
!
Addition
&
&
Set
=
=
SetInTable
)
return
true
;
uint16_t
count
=
Set
-
>
GetInterfaceCount
(
)
+
(
Addition
?
1
:
0
)
;
if
(
count
!
=
SetInTable
-
>
GetInterfaceCount
(
)
)
return
false
;
uint16_t
Position
=
Key
-
>
GetPosition
(
)
;
XPCNativeInterface
*
*
CurrentInTable
=
SetInTable
-
>
GetInterfaceArray
(
)
;
XPCNativeInterface
*
*
Current
=
Set
-
>
GetInterfaceArray
(
)
;
for
(
uint16_t
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
Addition
&
&
i
=
=
Position
)
{
if
(
Addition
!
=
*
(
CurrentInTable
+
+
)
)
return
false
;
}
else
{
if
(
*
(
Current
+
+
)
!
=
*
(
CurrentInTable
+
+
)
)
return
false
;
}
}
return
true
;
}
const
struct
PLDHashTableOps
NativeSetMap
:
:
Entry
:
:
sOps
=
{
HashNativeKey
Match
PLDHashTable
:
:
MoveEntryStub
PLDHashTable
:
:
ClearEntryStub
}
;
NativeSetMap
*
NativeSetMap
:
:
newMap
(
int
length
)
{
return
new
NativeSetMap
(
length
)
;
}
NativeSetMap
:
:
NativeSetMap
(
int
length
)
:
mTable
(
&
Entry
:
:
sOps
sizeof
(
Entry
)
length
)
{
}
size_t
NativeSetMap
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
{
size_t
n
=
mallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
for
(
auto
iter
=
mTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
NativeSetMap
:
:
Entry
*
>
(
iter
.
Get
(
)
)
;
n
+
=
entry
-
>
key_value
-
>
SizeOfIncludingThis
(
mallocSizeOf
)
;
}
return
n
;
}
bool
IID2ThisTranslatorMap
:
:
Entry
:
:
Match
(
const
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
return
(
(
const
nsID
*
)
key
)
-
>
Equals
(
(
(
Entry
*
)
entry
)
-
>
key
)
;
}
void
IID2ThisTranslatorMap
:
:
Entry
:
:
Clear
(
PLDHashTable
*
table
PLDHashEntryHdr
*
entry
)
{
static_cast
<
Entry
*
>
(
entry
)
-
>
value
=
nullptr
;
memset
(
entry
0
table
-
>
EntrySize
(
)
)
;
}
const
struct
PLDHashTableOps
IID2ThisTranslatorMap
:
:
Entry
:
:
sOps
=
{
HashIIDPtrKey
Match
PLDHashTable
:
:
MoveEntryStub
Clear
}
;
IID2ThisTranslatorMap
*
IID2ThisTranslatorMap
:
:
newMap
(
int
length
)
{
return
new
IID2ThisTranslatorMap
(
length
)
;
}
IID2ThisTranslatorMap
:
:
IID2ThisTranslatorMap
(
int
length
)
:
mTable
(
&
Entry
:
:
sOps
sizeof
(
Entry
)
length
)
{
}
PLDHashNumber
XPCNativeScriptableSharedMap
:
:
Entry
:
:
Hash
(
const
void
*
key
)
{
PLDHashNumber
h
;
const
unsigned
char
*
s
;
XPCNativeScriptableShared
*
obj
=
(
XPCNativeScriptableShared
*
)
key
;
h
=
(
PLDHashNumber
)
obj
-
>
GetFlags
(
)
;
for
(
s
=
(
const
unsigned
char
*
)
obj
-
>
GetJSClass
(
)
-
>
name
;
*
s
!
=
'
\
0
'
;
s
+
+
)
h
=
RotateLeft
(
h
4
)
^
*
s
;
return
h
;
}
bool
XPCNativeScriptableSharedMap
:
:
Entry
:
:
Match
(
const
PLDHashEntryHdr
*
entry
const
void
*
key
)
{
XPCNativeScriptableShared
*
obj1
=
(
(
XPCNativeScriptableSharedMap
:
:
Entry
*
)
entry
)
-
>
key
;
XPCNativeScriptableShared
*
obj2
=
(
XPCNativeScriptableShared
*
)
key
;
if
(
obj1
-
>
GetFlags
(
)
!
=
obj2
-
>
GetFlags
(
)
)
return
false
;
const
char
*
name1
=
obj1
-
>
GetJSClass
(
)
-
>
name
;
const
char
*
name2
=
obj2
-
>
GetJSClass
(
)
-
>
name
;
if
(
!
name1
|
|
!
name2
)
return
name1
=
=
name2
;
return
0
=
=
strcmp
(
name1
name2
)
;
}
const
struct
PLDHashTableOps
XPCNativeScriptableSharedMap
:
:
Entry
:
:
sOps
=
{
Hash
Match
PLDHashTable
:
:
MoveEntryStub
PLDHashTable
:
:
ClearEntryStub
}
;
XPCNativeScriptableSharedMap
*
XPCNativeScriptableSharedMap
:
:
newMap
(
int
length
)
{
return
new
XPCNativeScriptableSharedMap
(
length
)
;
}
XPCNativeScriptableSharedMap
:
:
XPCNativeScriptableSharedMap
(
int
length
)
:
mTable
(
&
Entry
:
:
sOps
sizeof
(
Entry
)
length
)
{
}
bool
XPCNativeScriptableSharedMap
:
:
GetNewOrUsed
(
uint32_t
flags
char
*
name
XPCNativeScriptableInfo
*
si
)
{
NS_PRECONDITION
(
name
"
bad
param
"
)
;
NS_PRECONDITION
(
si
"
bad
param
"
)
;
RefPtr
<
XPCNativeScriptableShared
>
key
=
new
XPCNativeScriptableShared
(
flags
name
false
)
;
auto
entry
=
static_cast
<
Entry
*
>
(
mTable
.
Add
(
key
fallible
)
)
;
if
(
!
entry
)
return
false
;
RefPtr
<
XPCNativeScriptableShared
>
shared
=
entry
-
>
key
;
if
(
!
shared
)
{
shared
=
new
XPCNativeScriptableShared
(
flags
key
-
>
TransferNameOwnership
(
)
true
)
;
entry
-
>
key
=
shared
;
}
si
-
>
SetScriptableShared
(
shared
.
forget
(
)
)
;
return
true
;
}
XPCWrappedNativeProtoMap
*
XPCWrappedNativeProtoMap
:
:
newMap
(
int
length
)
{
return
new
XPCWrappedNativeProtoMap
(
length
)
;
}
XPCWrappedNativeProtoMap
:
:
XPCWrappedNativeProtoMap
(
int
length
)
:
mTable
(
PLDHashTable
:
:
StubOps
(
)
sizeof
(
PLDHashEntryStub
)
length
)
{
}
