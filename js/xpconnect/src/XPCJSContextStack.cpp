#
include
"
xpcprivate
.
h
"
#
include
"
XPCWrapper
.
h
"
#
include
"
nsDOMJSUtils
.
h
"
#
include
"
nsNullPrincipal
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
using
namespace
mozilla
;
using
namespace
JS
;
using
namespace
xpc
;
using
mozilla
:
:
dom
:
:
DestroyProtoAndIfaceCache
;
XPCJSContextStack
:
:
~
XPCJSContextStack
(
)
{
if
(
mSafeJSContext
)
{
JS_DestroyContextNoGC
(
mSafeJSContext
)
;
mSafeJSContext
=
nullptr
;
}
}
JSContext
*
XPCJSContextStack
:
:
Pop
(
)
{
MOZ_ASSERT
(
!
mStack
.
IsEmpty
(
)
)
;
uint32_t
idx
=
mStack
.
Length
(
)
-
1
;
JSContext
*
cx
=
mStack
[
idx
]
;
mStack
.
RemoveElementAt
(
idx
)
;
JSContext
*
newTop
;
if
(
idx
=
=
0
)
{
newTop
=
nullptr
;
}
else
{
newTop
=
mStack
[
idx
-
1
]
;
}
js
:
:
Debug_SetActiveJSContext
(
mRuntime
-
>
Runtime
(
)
newTop
)
;
return
cx
;
}
void
XPCJSContextStack
:
:
Push
(
JSContext
*
cx
)
{
js
:
:
Debug_SetActiveJSContext
(
mRuntime
-
>
Runtime
(
)
cx
)
;
mStack
.
AppendElement
(
cx
)
;
}
JSContext
*
XPCJSContextStack
:
:
GetSafeJSContext
(
)
{
MOZ_ASSERT
(
mSafeJSContext
)
;
return
mSafeJSContext
;
}
JSContext
*
XPCJSContextStack
:
:
InitSafeJSContext
(
)
{
MOZ_ASSERT
(
!
mSafeJSContext
)
;
mSafeJSContext
=
JS_NewContext
(
XPCJSRuntime
:
:
Get
(
)
-
>
Runtime
(
)
8192
)
;
if
(
!
mSafeJSContext
)
MOZ_CRASH
(
)
;
return
mSafeJSContext
;
}
