#
include
"
XPCSelfHostedShmem
.
h
"
#
include
"
xpcprivate
.
h
"
mozilla
:
:
StaticRefPtr
<
xpc
:
:
SelfHostedShmem
>
xpc
:
:
SelfHostedShmem
:
:
sSelfHostedXdr
;
NS_IMPL_ISUPPORTS
(
xpc
:
:
SelfHostedShmem
nsIMemoryReporter
)
xpc
:
:
SelfHostedShmem
&
xpc
:
:
SelfHostedShmem
:
:
GetSingleton
(
)
{
MOZ_ASSERT_IF
(
!
sSelfHostedXdr
NS_IsMainThread
(
)
)
;
if
(
!
sSelfHostedXdr
)
{
sSelfHostedXdr
=
new
SelfHostedShmem
;
}
return
*
sSelfHostedXdr
;
}
void
xpc
:
:
SelfHostedShmem
:
:
InitMemoryReporter
(
)
{
mozilla
:
:
RegisterWeakMemoryReporter
(
this
)
;
}
void
xpc
:
:
SelfHostedShmem
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sSelfHostedXdr
=
nullptr
;
}
void
xpc
:
:
SelfHostedShmem
:
:
InitFromParent
(
ContentType
aXdr
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mLen
"
Shouldn
'
t
call
this
more
than
once
"
)
;
size_t
len
=
aXdr
.
Length
(
)
;
auto
shm
=
mozilla
:
:
MakeUnique
<
base
:
:
SharedMemory
>
(
)
;
if
(
NS_WARN_IF
(
!
shm
-
>
CreateFreezeable
(
len
)
)
)
{
return
;
}
if
(
NS_WARN_IF
(
!
shm
-
>
Map
(
len
)
)
)
{
return
;
}
void
*
address
=
shm
-
>
memory
(
)
;
memcpy
(
address
aXdr
.
Elements
(
)
aXdr
.
LengthBytes
(
)
)
;
base
:
:
SharedMemory
roCopy
;
if
(
NS_WARN_IF
(
!
shm
-
>
ReadOnlyCopy
(
&
roCopy
)
)
)
{
return
;
}
mMem
=
std
:
:
move
(
shm
)
;
mHandle
=
roCopy
.
TakeHandle
(
)
;
mLen
=
len
;
}
bool
xpc
:
:
SelfHostedShmem
:
:
InitFromChild
(
:
:
base
:
:
SharedMemoryHandle
aHandle
size_t
aLen
)
{
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mLen
"
Shouldn
'
t
call
this
more
than
once
"
)
;
auto
shm
=
mozilla
:
:
MakeUnique
<
base
:
:
SharedMemory
>
(
)
;
if
(
NS_WARN_IF
(
!
shm
-
>
SetHandle
(
std
:
:
move
(
aHandle
)
true
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
shm
-
>
Map
(
aLen
)
)
)
{
return
false
;
}
mMem
=
std
:
:
move
(
shm
)
;
mLen
=
aLen
;
return
true
;
}
xpc
:
:
SelfHostedShmem
:
:
ContentType
xpc
:
:
SelfHostedShmem
:
:
Content
(
)
const
{
if
(
!
mMem
)
{
MOZ_ASSERT
(
mLen
=
=
0
)
;
return
ContentType
(
)
;
}
return
ContentType
(
reinterpret_cast
<
uint8_t
*
>
(
mMem
-
>
memory
(
)
)
mLen
)
;
}
const
mozilla
:
:
UniqueFileHandle
&
xpc
:
:
SelfHostedShmem
:
:
Handle
(
)
const
{
return
mHandle
;
}
NS_IMETHODIMP
xpc
:
:
SelfHostedShmem
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
if
(
XRE_IsParentProcess
(
)
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
js
-
non
-
window
/
shared
-
memory
/
self
-
hosted
-
xdr
"
KIND_NONHEAP
UNITS_BYTES
mLen
"
Memory
used
to
initialize
the
JS
engine
with
the
"
"
self
-
hosted
code
encoded
by
the
parent
process
.
"
)
;
}
return
NS_OK
;
}
