#
ifndef
__SANDBOXPRIVATE_H__
#
define
__SANDBOXPRIVATE_H__
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundUtils
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundSharedTypes
.
h
"
#
include
"
mozilla
/
net
/
CookieJarSettings
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
js
/
loader
/
ModuleLoaderBase
.
h
"
#
include
"
js
/
Object
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
class
SandboxPrivate
:
public
nsIGlobalObject
public
nsIScriptObjectPrincipal
public
nsSupportsWeakReference
public
mozilla
:
:
SupportsWeakPtr
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS_AMBIGUOUS
(
SandboxPrivate
nsIGlobalObject
)
static
void
Create
(
nsIPrincipal
*
principal
JS
:
:
Handle
<
JSObject
*
>
global
)
{
RefPtr
<
SandboxPrivate
>
sbp
=
new
SandboxPrivate
(
principal
)
;
sbp
-
>
SetWrapper
(
global
)
;
sbp
-
>
PreserveWrapper
(
ToSupports
(
sbp
.
get
(
)
)
)
;
nsIScriptObjectPrincipal
*
sop
=
static_cast
<
nsIScriptObjectPrincipal
*
>
(
sbp
.
forget
(
)
.
take
(
)
)
;
JS
:
:
SetObjectISupports
(
global
sop
)
;
}
static
SandboxPrivate
*
GetPrivate
(
JSObject
*
obj
)
{
nsIScriptObjectPrincipal
*
sop
=
JS
:
:
GetObjectISupports
<
nsIScriptObjectPrincipal
>
(
obj
)
;
return
static_cast
<
SandboxPrivate
*
>
(
sop
)
;
}
mozilla
:
:
OriginTrials
Trials
(
)
const
final
{
return
{
}
;
}
nsIPrincipal
*
GetPrincipal
(
)
override
{
return
mPrincipal
;
}
nsIPrincipal
*
GetEffectiveCookiePrincipal
(
)
override
{
return
mPrincipal
;
}
nsIPrincipal
*
GetEffectiveStoragePrincipal
(
)
override
{
return
mPrincipal
;
}
mozilla
:
:
Result
<
mozilla
:
:
ipc
:
:
PrincipalInfo
nsresult
>
GetStorageKey
(
)
override
{
mozilla
:
:
ipc
:
:
PrincipalInfo
principalInfo
;
nsresult
rv
=
PrincipalToPrincipalInfo
(
mPrincipal
&
principalInfo
)
;
if
(
principalInfo
.
type
(
)
!
=
mozilla
:
:
ipc
:
:
PrincipalInfo
:
:
TContentPrincipalInfo
&
&
principalInfo
.
type
(
)
!
=
mozilla
:
:
ipc
:
:
PrincipalInfo
:
:
TSystemPrincipalInfo
)
{
rv
=
NS_ERROR_DOM_SECURITY_ERR
;
}
if
(
NS_FAILED
(
rv
)
)
{
return
mozilla
:
:
Err
(
rv
)
;
}
return
std
:
:
move
(
principalInfo
)
;
}
nsIPrincipal
*
PartitionedPrincipal
(
)
override
{
return
mPrincipal
;
}
JSObject
*
GetGlobalJSObject
(
)
override
{
return
GetWrapper
(
)
;
}
JSObject
*
GetGlobalJSObjectPreserveColor
(
)
const
override
{
return
GetWrapperPreserveColor
(
)
;
}
mozilla
:
:
StorageAccess
GetStorageAccess
(
)
final
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mozilla
:
:
StaticPrefs
:
:
dom_serviceWorkers_testing_enabled
(
)
)
{
return
mozilla
:
:
StorageAccess
:
:
eAllow
;
}
nsCOMPtr
<
nsICookieJarSettings
>
cookieJarSettings
=
mozilla
:
:
net
:
:
CookieJarSettings
:
:
Create
(
mPrincipal
)
;
return
mozilla
:
:
StorageAllowedForServiceWorker
(
mPrincipal
cookieJarSettings
)
;
}
void
ForgetGlobalObject
(
JSObject
*
obj
)
{
ClearWrapper
(
obj
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
MOZ_CRASH
(
"
SandboxPrivate
doesn
'
t
use
DOM
bindings
!
"
)
;
}
JS
:
:
loader
:
:
ModuleLoaderBase
*
GetModuleLoader
(
JSContext
*
aCx
)
override
;
size_t
ObjectMoved
(
JSObject
*
obj
JSObject
*
old
)
{
UpdateWrapper
(
obj
old
)
;
return
0
;
}
private
:
explicit
SandboxPrivate
(
nsIPrincipal
*
principal
)
:
mPrincipal
(
principal
)
{
}
virtual
~
SandboxPrivate
(
)
=
default
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
RefPtr
<
JS
:
:
loader
:
:
ModuleLoaderBase
>
mModuleLoader
;
}
;
#
endif
