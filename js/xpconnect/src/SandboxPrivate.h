#
ifndef
__SANDBOXPRIVATE_H__
#
define
__SANDBOXPRIVATE_H__
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
class
SandboxPrivate
:
public
nsIGlobalObject
public
nsIScriptObjectPrincipal
public
nsSupportsWeakReference
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
SandboxPrivate
nsIGlobalObject
)
static
void
Create
(
nsIPrincipal
*
principal
JS
:
:
Handle
<
JSObject
*
>
global
)
{
RefPtr
<
SandboxPrivate
>
sbp
=
new
SandboxPrivate
(
principal
)
;
sbp
-
>
SetWrapper
(
global
)
;
sbp
-
>
PreserveWrapper
(
ToSupports
(
sbp
.
get
(
)
)
)
;
nsIScriptObjectPrincipal
*
sop
=
static_cast
<
nsIScriptObjectPrincipal
*
>
(
sbp
.
forget
(
)
.
take
(
)
)
;
mozilla
:
:
RecordReplayRegisterDeferredFinalizeThing
(
nullptr
nullptr
sop
)
;
JS_SetPrivate
(
global
sop
)
;
}
static
SandboxPrivate
*
GetPrivate
(
JSObject
*
obj
)
{
return
static_cast
<
SandboxPrivate
*
>
(
static_cast
<
nsIScriptObjectPrincipal
*
>
(
JS_GetPrivate
(
obj
)
)
)
;
}
nsIPrincipal
*
GetPrincipal
(
)
override
{
return
mPrincipal
;
}
nsIPrincipal
*
GetEffectiveStoragePrincipal
(
)
override
{
return
nullptr
;
}
JSObject
*
GetGlobalJSObject
(
)
override
{
return
GetWrapper
(
)
;
}
void
ForgetGlobalObject
(
JSObject
*
obj
)
{
ClearWrapper
(
obj
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
MOZ_CRASH
(
"
SandboxPrivate
doesn
'
t
use
DOM
bindings
!
"
)
;
}
size_t
ObjectMoved
(
JSObject
*
obj
JSObject
*
old
)
{
UpdateWrapper
(
obj
old
)
;
return
0
;
}
private
:
explicit
SandboxPrivate
(
nsIPrincipal
*
principal
)
:
mPrincipal
(
principal
)
{
}
virtual
~
SandboxPrivate
(
)
{
}
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
}
;
#
endif
