#
include
"
xpcprivate
.
h
"
#
include
"
StaticComponents
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
js
/
String
.
h
"
#
include
"
nsJSUtils
.
h
"
using
namespace
mozilla
;
using
namespace
JS
;
namespace
xpc
{
static
bool
Services_NewEnumerate
(
JSContext
*
cx
HandleObject
obj
MutableHandleIdVector
properties
bool
enumerableOnly
)
;
static
bool
Services_Resolve
(
JSContext
*
cx
HandleObject
obj
HandleId
id
bool
*
resolvedp
)
;
static
bool
Services_MayResolve
(
const
JSAtomState
&
names
jsid
id
JSObject
*
maybeObj
)
;
static
const
JSClassOps
sServices_ClassOps
=
{
nullptr
nullptr
nullptr
Services_NewEnumerate
Services_Resolve
Services_MayResolve
nullptr
nullptr
nullptr
nullptr
nullptr
}
;
static
const
JSClass
sServices_Class
=
{
"
JSServices
"
0
&
sServices_ClassOps
}
;
JSObject
*
NewJSServices
(
JSContext
*
cx
)
{
return
JS_NewObject
(
cx
&
sServices_Class
)
;
}
static
bool
Services_NewEnumerate
(
JSContext
*
cx
HandleObject
obj
MutableHandleIdVector
properties
bool
enumerableOnly
)
{
auto
services
=
xpcom
:
:
StaticComponents
:
:
GetJSServices
(
)
;
if
(
!
properties
.
reserve
(
services
.
Length
(
)
)
)
{
JS_ReportOutOfMemory
(
cx
)
;
return
false
;
}
RootedId
id
(
cx
)
;
RootedString
name
(
cx
)
;
for
(
const
auto
&
service
:
services
)
{
name
=
JS_AtomizeString
(
cx
service
.
Name
(
)
.
get
(
)
)
;
if
(
!
name
|
|
!
JS_StringToId
(
cx
name
&
id
)
)
{
return
false
;
}
properties
.
infallibleAppend
(
id
)
;
}
return
true
;
}
static
JSLinearString
*
GetNameIfLatin1
(
jsid
id
)
{
if
(
JSID_IS_STRING
(
id
)
)
{
JSLinearString
*
name
=
JSID_TO_LINEAR_STRING
(
id
)
;
if
(
JS
:
:
LinearStringHasLatin1Chars
(
name
)
)
{
return
name
;
}
}
return
nullptr
;
}
static
JSObject
*
GetService
(
JSContext
*
cx
const
xpcom
:
:
JSServiceEntry
&
service
ErrorResult
&
aRv
)
{
nsresult
rv
;
nsCOMPtr
<
nsISupports
>
inst
=
service
.
Module
(
)
.
GetService
(
&
rv
)
;
if
(
!
inst
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
auto
ifaces
=
service
.
Interfaces
(
)
;
if
(
ifaces
.
Length
(
)
=
=
0
)
{
if
(
nsCOMPtr
<
nsIXPConnectWrappedJS
>
wrappedJS
=
do_QueryInterface
(
inst
)
)
{
return
wrappedJS
-
>
GetJSObject
(
)
;
}
}
JS
:
:
RootedValue
val
(
cx
)
;
const
nsIID
*
iid
=
ifaces
.
Length
(
)
?
ifaces
[
0
]
:
nullptr
;
xpcObjectHelper
helper
(
inst
)
;
if
(
!
XPCConvert
:
:
NativeInterface2JSObject
(
cx
&
val
helper
iid
true
&
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
nullptr
;
}
if
(
ifaces
.
Length
(
)
>
1
)
{
auto
*
wn
=
XPCWrappedNative
:
:
Get
(
&
val
.
toObject
(
)
)
;
for
(
const
nsIID
*
iid
:
Span
(
ifaces
)
.
From
(
1
)
)
{
Unused
<
<
wn
-
>
FindTearOff
(
cx
*
iid
)
;
}
}
return
&
val
.
toObject
(
)
;
}
static
bool
Services_Resolve
(
JSContext
*
cx
HandleObject
obj
HandleId
id
bool
*
resolvedp
)
{
*
resolvedp
=
false
;
JSLinearString
*
name
=
GetNameIfLatin1
(
id
)
;
if
(
!
name
)
{
return
true
;
}
nsAutoJSLinearCString
nameStr
(
name
)
;
if
(
const
auto
*
service
=
xpcom
:
:
JSServiceEntry
:
:
Lookup
(
nameStr
)
)
{
*
resolvedp
=
true
;
ErrorResult
rv
;
JS
:
:
RootedValue
val
(
cx
)
;
val
.
setObjectOrNull
(
GetService
(
cx
*
service
rv
)
)
;
if
(
rv
.
MaybeSetPendingException
(
cx
)
)
{
return
false
;
}
return
JS_DefinePropertyById
(
cx
obj
id
val
JSPROP_ENUMERATE
)
;
}
return
true
;
}
static
bool
Services_MayResolve
(
const
JSAtomState
&
names
jsid
id
JSObject
*
maybeObj
)
{
if
(
JSLinearString
*
name
=
GetNameIfLatin1
(
id
)
)
{
nsAutoJSLinearCString
nameStr
(
name
)
;
return
xpcom
:
:
JSServiceEntry
:
:
Lookup
(
nameStr
)
;
}
return
false
;
}
}
