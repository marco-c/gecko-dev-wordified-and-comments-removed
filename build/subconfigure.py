import
argparse
import
errno
import
os
import
re
import
subprocess
import
sys
import
pickle
import
mozpack
.
path
as
mozpath
class
File
(
object
)
:
    
def
__init__
(
self
path
)
:
        
self
.
_path
=
path
        
self
.
_content
=
open
(
path
'
rb
'
)
.
read
(
)
        
stat
=
os
.
stat
(
path
)
        
self
.
_times
=
(
stat
.
st_atime
stat
.
st_mtime
)
    
property
    
def
path
(
self
)
:
        
return
self
.
_path
    
property
    
def
mtime
(
self
)
:
        
return
self
.
_times
[
1
]
    
property
    
def
modified
(
self
)
:
        
'
'
'
Returns
whether
the
file
was
modified
since
the
instance
was
        
created
.
Result
is
memoized
.
'
'
'
        
if
hasattr
(
self
'
_modified
'
)
:
            
return
self
.
_modified
        
modified
=
True
        
if
os
.
path
.
exists
(
self
.
_path
)
:
            
if
open
(
self
.
_path
'
rb
'
)
.
read
(
)
=
=
self
.
_content
:
                
modified
=
False
        
self
.
_modified
=
modified
        
return
modified
    
def
update_time
(
self
)
:
        
'
'
'
If
the
file
hasn
'
t
changed
since
the
instance
was
created
           
restore
its
old
modification
time
.
'
'
'
        
if
not
self
.
modified
:
            
os
.
utime
(
self
.
_path
self
.
_times
)
PRECIOUS_VARS
=
set
(
[
    
'
build_alias
'
    
'
host_alias
'
    
'
target_alias
'
    
'
CC
'
    
'
CFLAGS
'
    
'
LDFLAGS
'
    
'
LIBS
'
    
'
CPPFLAGS
'
    
'
CPP
'
    
'
CCC
'
    
'
CXXFLAGS
'
    
'
CXX
'
    
'
CCASFLAGS
'
    
'
CCAS
'
]
)
CONFIGURE_DATA
=
'
configure
.
pkl
'
def
maybe_clear_cache
(
data
)
:
    
env
=
dict
(
data
[
'
env
'
]
)
    
for
kind
in
(
'
target
'
'
host
'
'
build
'
)
:
        
arg
=
data
[
kind
]
        
if
arg
is
not
None
:
            
env
[
'
%
s_alias
'
%
kind
]
=
arg
    
for
arg
in
data
[
'
args
'
]
:
        
if
arg
[
:
1
]
!
=
'
-
'
and
'
=
'
in
arg
:
            
key
value
=
arg
.
split
(
'
=
'
1
)
            
env
[
key
]
=
value
    
comment
=
re
.
compile
(
r
'
^
\
s
+
#
'
)
    
cache
=
{
}
    
with
open
(
data
[
'
cache
-
file
'
]
)
as
f
:
        
for
line
in
f
:
            
if
not
comment
.
match
(
line
)
and
'
=
'
in
line
:
                
key
value
=
line
.
rstrip
(
os
.
linesep
)
.
split
(
'
=
'
1
)
                
if
value
[
:
1
]
=
=
"
'
"
:
                    
value
=
value
[
1
:
-
1
]
.
replace
(
"
'
\
\
'
'
"
"
'
"
)
                
cache
[
key
]
=
value
    
for
precious
in
PRECIOUS_VARS
:
        
if
'
ac_cv_env_
%
s_set
'
%
precious
not
in
cache
:
            
continue
        
is_set
=
cache
.
get
(
'
ac_cv_env_
%
s_set
'
%
precious
)
=
=
'
set
'
        
value
=
cache
.
get
(
'
ac_cv_env_
%
s_value
'
%
precious
)
if
is_set
else
None
        
if
value
!
=
env
.
get
(
precious
)
:
            
print
(
'
Removing
%
s
because
of
%
s
value
change
from
:
'
%
(
data
[
'
cache
-
file
'
]
precious
)
)
            
print
(
'
%
s
'
%
(
value
if
value
is
not
None
else
'
undefined
'
)
)
            
print
(
'
to
:
'
)
            
print
(
'
%
s
'
%
env
.
get
(
precious
'
undefined
'
)
)
            
os
.
remove
(
data
[
'
cache
-
file
'
]
)
            
return
True
    
return
False
def
prepare
(
srcdir
objdir
shell
args
)
:
    
parser
=
argparse
.
ArgumentParser
(
)
    
parser
.
add_argument
(
'
-
-
target
'
type
=
str
)
    
parser
.
add_argument
(
'
-
-
host
'
type
=
str
)
    
parser
.
add_argument
(
'
-
-
build
'
type
=
str
)
    
parser
.
add_argument
(
'
-
-
cache
-
file
'
type
=
str
)
    
parser
.
add_argument
(
'
-
-
srcdir
'
type
=
str
)
    
data_file
=
os
.
path
.
join
(
objdir
CONFIGURE_DATA
)
    
previous_args
=
None
    
if
os
.
path
.
exists
(
data_file
)
:
        
with
open
(
data_file
'
rb
'
)
as
f
:
            
data
=
pickle
.
load
(
f
)
            
previous_args
=
data
[
'
args
'
]
    
input
=
sys
.
stdin
.
read
(
)
    
if
input
:
        
data
=
{
a
:
b
for
[
a
b
]
in
eval
(
input
)
}
        
environ
=
{
a
:
b
for
a
b
in
data
[
'
env
'
]
}
        
for
var
in
(
'
HOME
'
'
TERM
'
'
PATH
'
'
TMPDIR
'
'
TMP
'
                    
'
TEMP
'
'
INCLUDE
'
)
:
            
if
var
in
environ
and
var
in
os
.
environ
:
                
environ
[
var
]
=
os
.
environ
[
var
]
        
args
=
data
[
'
args
'
]
    
else
:
        
environ
=
os
.
environ
    
args
others
=
parser
.
parse_known_args
(
args
)
    
data
=
{
        
'
target
'
:
args
.
target
        
'
host
'
:
args
.
host
        
'
build
'
:
args
.
build
        
'
args
'
:
others
        
'
shell
'
:
shell
        
'
srcdir
'
:
srcdir
        
'
env
'
:
environ
    
}
    
if
args
.
cache_file
:
        
data
[
'
cache
-
file
'
]
=
mozpath
.
normpath
(
mozpath
.
join
(
os
.
getcwd
(
)
                                                           
args
.
cache_file
)
)
    
else
:
        
data
[
'
cache
-
file
'
]
=
mozpath
.
join
(
objdir
'
config
.
cache
'
)
    
if
previous_args
is
not
None
:
        
data
[
'
previous
-
args
'
]
=
previous_args
    
try
:
        
os
.
makedirs
(
objdir
)
    
except
OSError
as
e
:
        
if
e
.
errno
!
=
errno
.
EEXIST
:
            
raise
    
with
open
(
data_file
'
wb
'
)
as
f
:
        
pickle
.
dump
(
data
f
)
def
prefix_lines
(
text
prefix
)
:
    
return
'
'
.
join
(
'
%
s
>
%
s
'
%
(
prefix
line
)
for
line
in
text
.
splitlines
(
True
)
)
def
execute_and_prefix
(
*
args
*
*
kwargs
)
:
    
prefix
=
kwargs
[
'
prefix
'
]
    
del
kwargs
[
'
prefix
'
]
    
proc
=
subprocess
.
Popen
(
*
args
stdout
=
subprocess
.
PIPE
                            
stderr
=
subprocess
.
STDOUT
*
*
kwargs
)
    
while
True
:
        
line
=
proc
.
stdout
.
readline
(
)
        
if
not
line
:
            
break
        
print
(
prefix_lines
(
line
.
rstrip
(
)
prefix
)
)
        
sys
.
stdout
.
flush
(
)
    
return
proc
.
wait
(
)
def
run
(
objdir
)
:
    
ret
=
0
    
with
open
(
os
.
path
.
join
(
objdir
CONFIGURE_DATA
)
'
rb
'
)
as
f
:
        
data
=
pickle
.
load
(
f
)
    
data
[
'
objdir
'
]
=
objdir
    
relobjdir
=
data
[
'
relobjdir
'
]
=
os
.
path
.
relpath
(
objdir
os
.
getcwd
(
)
)
    
cache_file
=
data
[
'
cache
-
file
'
]
    
cleared_cache
=
True
    
if
os
.
path
.
exists
(
cache_file
)
:
        
cleared_cache
=
maybe_clear_cache
(
data
)
    
configure
=
mozpath
.
join
(
data
[
'
srcdir
'
]
'
old
-
configure
'
)
    
config_status_path
=
mozpath
.
join
(
objdir
'
config
.
status
'
)
    
skip_configure
=
True
    
if
not
os
.
path
.
exists
(
config_status_path
)
:
        
skip_configure
=
False
        
config_status
=
None
    
else
:
        
config_status
=
File
(
config_status_path
)
        
config_status_deps
=
mozpath
.
join
(
objdir
'
config_status_deps
.
in
'
)
        
if
not
os
.
path
.
exists
(
config_status_deps
)
:
            
skip_configure
=
False
        
else
:
            
with
open
(
config_status_deps
'
r
'
)
as
fh
:
                
dep_files
=
fh
.
read
(
)
.
splitlines
(
)
+
[
configure
]
            
if
(
any
(
not
os
.
path
.
exists
(
f
)
or
(
config_status
.
mtime
<
os
.
path
.
getmtime
(
f
)
)
                    
for
f
in
dep_files
)
or
                
data
.
get
(
'
previous
-
args
'
data
[
'
args
'
]
)
!
=
data
[
'
args
'
]
or
                
cleared_cache
)
:
                
skip_configure
=
False
    
if
not
skip_configure
:
        
if
mozpath
.
normsep
(
relobjdir
)
=
=
'
js
/
src
'
:
            
command
=
[
                
sys
.
executable
                
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
'
.
.
'
'
configure
.
py
'
)
                
'
-
-
enable
-
project
=
js
'
            
]
            
data
[
'
env
'
]
[
'
OLD_CONFIGURE
'
]
=
os
.
path
.
join
(
                
os
.
path
.
dirname
(
configure
)
'
old
-
configure
'
)
        
else
:
            
command
=
[
data
[
'
shell
'
]
configure
]
        
for
kind
in
(
'
target
'
'
build
'
'
host
'
)
:
            
if
data
.
get
(
kind
)
is
not
None
:
                
command
+
=
[
'
-
-
%
s
=
%
s
'
%
(
kind
data
[
kind
]
)
]
        
command
+
=
data
[
'
args
'
]
        
command
+
=
[
'
-
-
cache
-
file
=
%
s
'
%
cache_file
]
        
command
+
=
[
'
-
-
no
-
create
'
]
        
print
(
prefix_lines
(
'
configuring
'
relobjdir
)
)
        
print
(
prefix_lines
(
'
running
%
s
'
%
'
'
.
join
(
command
[
:
-
1
]
)
relobjdir
)
)
        
sys
.
stdout
.
flush
(
)
        
returncode
=
execute_and_prefix
(
command
cwd
=
objdir
env
=
data
[
'
env
'
]
                                        
prefix
=
relobjdir
)
        
if
returncode
:
            
return
returncode
    
skip_config_status
=
True
    
if
mozpath
.
normsep
(
relobjdir
)
=
=
'
js
/
src
'
:
        
pass
    
elif
not
config_status
or
config_status
.
modified
:
        
if
os
.
path
.
exists
(
config_status_path
)
:
            
skip_config_status
=
False
    
if
not
skip_config_status
:
        
if
skip_configure
:
            
print
(
prefix_lines
(
'
running
config
.
status
'
relobjdir
)
)
            
sys
.
stdout
.
flush
(
)
        
ret
=
execute_and_prefix
(
[
data
[
'
shell
'
]
'
-
c
'
'
.
/
config
.
status
'
]
                                 
cwd
=
objdir
env
=
data
[
'
env
'
]
prefix
=
relobjdir
)
    
return
ret
def
subconfigure
(
args
)
:
    
parser
=
argparse
.
ArgumentParser
(
)
    
parser
.
add_argument
(
'
subconfigure
'
type
=
str
                        
help
=
'
Subconfigure
to
run
'
)
    
args
others
=
parser
.
parse_known_args
(
args
)
    
return
run
(
args
.
subconfigure
)
def
main
(
args
)
:
    
if
args
[
0
]
!
=
'
-
-
prepare
'
:
        
return
subconfigure
(
args
)
    
topsrcdir
=
os
.
path
.
abspath
(
args
[
1
]
)
    
subdir
=
args
[
2
]
    
if
'
:
'
in
subdir
:
        
srcdir
subdir
=
subdir
.
split
(
'
:
'
1
)
    
else
:
        
srcdir
=
subdir
    
srcdir
=
os
.
path
.
join
(
topsrcdir
srcdir
)
    
objdir
=
os
.
path
.
abspath
(
subdir
)
    
return
prepare
(
srcdir
objdir
args
[
3
]
args
[
4
:
]
)
if
__name__
=
=
'
__main__
'
:
    
sys
.
exit
(
main
(
sys
.
argv
[
1
:
]
)
)
