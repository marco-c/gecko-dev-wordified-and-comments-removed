#
include
<
ostream
>
#
include
<
istream
>
#
include
<
string
>
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
include
<
mozilla
/
Assertions
.
h
>
#
define
GLIBCXX_VERSION
(
a
b
c
)
(
(
(
a
)
<
<
16
)
|
(
(
b
)
<
<
8
)
|
(
c
)
)
#
if
MOZ_LIBSTDCXX_VERSION
>
=
GLIBCXX_VERSION
(
3
4
18
)
#
include
<
unordered_map
>
#
include
<
tr1
/
unordered_map
>
namespace
std
{
size_t
__attribute__
(
(
weak
)
)
__detail
:
:
_Prime_rehash_policy
:
:
_M_next_bkt
(
size_t
__n
)
const
{
tr1
:
:
__detail
:
:
_Prime_rehash_policy
policy
(
_M_max_load_factor
)
;
size_t
ret
=
policy
.
_M_next_bkt
(
__n
)
;
_M_next_resize
=
policy
.
_M_next_resize
;
return
ret
;
}
pair
<
bool
size_t
>
__attribute__
(
(
weak
)
)
__detail
:
:
_Prime_rehash_policy
:
:
_M_need_rehash
(
size_t
__n_bkt
size_t
__n_elt
size_t
__n_ins
)
const
{
tr1
:
:
__detail
:
:
_Prime_rehash_policy
policy
(
_M_max_load_factor
)
;
policy
.
_M_next_resize
=
_M_next_resize
;
pair
<
bool
size_t
>
ret
=
policy
.
_M_need_rehash
(
__n_bkt
__n_elt
__n_ins
)
;
_M_next_resize
=
policy
.
_M_next_resize
;
return
ret
;
}
}
#
endif
#
if
MOZ_LIBSTDCXX_VERSION
>
=
GLIBCXX_VERSION
(
3
4
20
)
namespace
std
{
void
__attribute__
(
(
weak
)
)
__throw_out_of_range_fmt
(
char
const
*
fmt
.
.
.
)
{
va_list
ap
;
char
buf
[
1024
]
;
va_start
(
ap
fmt
)
;
vsnprintf
(
buf
sizeof
(
buf
)
fmt
ap
)
;
buf
[
sizeof
(
buf
)
-
1
]
=
0
;
va_end
(
ap
)
;
__throw_range_error
(
buf
)
;
}
}
#
endif
#
if
MOZ_LIBSTDCXX_VERSION
>
=
GLIBCXX_VERSION
(
3
4
20
)
extern
"
C
"
void
__attribute__
(
(
weak
)
)
__cxa_throw_bad_array_new_length
(
)
{
MOZ_CRASH
(
)
;
}
#
endif
#
if
MOZ_LIBSTDCXX_VERSION
>
=
GLIBCXX_VERSION
(
3
4
21
)
namespace
std
{
__attribute__
(
(
weak
)
)
runtime_error
:
:
runtime_error
(
char
const
*
s
)
:
runtime_error
(
std
:
:
string
(
s
)
)
{
}
}
#
endif
