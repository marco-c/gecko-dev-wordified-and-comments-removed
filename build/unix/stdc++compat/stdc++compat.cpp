#
include
<
ostream
>
#
include
<
istream
>
#
include
<
sstream
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
include
<
mozilla
/
Assertions
.
h
>
#
include
<
cxxabi
.
h
>
#
define
_GLIBCXX_THREAD_ABI_COMPAT
1
#
include
<
thread
>
#
if
!
defined
(
__aarch64__
)
extern
"
C
"
int
__cxa_thread_atexit_impl
(
void
(
*
dtor
)
(
void
*
)
void
*
obj
void
*
dso_handle
)
{
return
__cxxabiv1
:
:
__cxa_thread_atexit
(
dtor
obj
dso_handle
)
;
}
namespace
std
{
void
__attribute__
(
(
weak
)
)
__throw_out_of_range_fmt
(
char
const
*
fmt
.
.
.
)
{
va_list
ap
;
char
buf
[
1024
]
;
va_start
(
ap
fmt
)
;
vsnprintf
(
buf
sizeof
(
buf
)
fmt
ap
)
;
buf
[
sizeof
(
buf
)
-
1
]
=
0
;
va_end
(
ap
)
;
__throw_range_error
(
buf
)
;
}
}
namespace
__cxxabiv1
{
extern
"
C
"
void
__attribute__
(
(
weak
)
)
__cxa_throw_bad_array_new_length
(
)
{
MOZ_CRASH
(
)
;
}
}
namespace
std
{
template
basic_ios
<
char
char_traits
<
char
>
>
:
:
operator
bool
(
)
const
;
}
#
if
!
defined
(
MOZ_ASAN
)
&
&
!
defined
(
MOZ_TSAN
)
void
operator
delete
(
void
*
ptr
size_t
size
)
noexcept
(
true
)
{
:
:
operator
delete
(
ptr
)
;
}
#
endif
namespace
std
{
__attribute__
(
(
weak
)
)
runtime_error
:
:
runtime_error
(
char
const
*
s
)
:
runtime_error
(
std
:
:
string
(
s
)
)
{
}
__attribute__
(
(
weak
)
)
out_of_range
:
:
out_of_range
(
char
const
*
s
)
:
out_of_range
(
std
:
:
string
(
s
)
)
{
}
__attribute__
(
(
weak
)
)
invalid_argument
:
:
invalid_argument
(
char
const
*
s
)
:
invalid_argument
(
std
:
:
string
(
s
)
)
{
}
}
namespace
std
{
__attribute__
(
(
weak
)
)
void
thread
:
:
_M_start_thread
(
shared_ptr
<
_Impl_base
>
impl
void
(
*
)
(
)
)
{
_M_start_thread
(
std
:
:
move
(
impl
)
)
;
}
}
#
endif
namespace
std
{
struct
StateWrapper
:
public
thread
:
:
_Impl_base
{
unique_ptr
<
thread
:
:
_State
>
mState
;
StateWrapper
(
unique_ptr
<
thread
:
:
_State
>
aState
)
:
mState
(
std
:
:
move
(
aState
)
)
{
}
void
_M_run
(
)
override
{
mState
-
>
_M_run
(
)
;
}
}
;
__attribute__
(
(
weak
)
)
void
thread
:
:
_M_start_thread
(
unique_ptr
<
_State
>
aState
void
(
*
)
(
)
)
{
auto
impl
=
std
:
:
make_shared
<
StateWrapper
>
(
std
:
:
move
(
aState
)
)
;
_M_start_thread
(
std
:
:
move
(
impl
)
)
;
}
__attribute__
(
(
weak
)
)
thread
:
:
_State
:
:
~
_State
(
)
=
default
;
#
if
_GLIBCXX_RELEASE
>
=
9
extern
"
C
"
__attribute__
(
(
visibility
(
"
hidden
"
)
)
)
bool
_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info
(
const
type_info
*
)
noexcept
{
return
false
;
}
#
endif
template
basic_string
<
char
char_traits
<
char
>
allocator
<
char
>
>
:
:
basic_string
(
const
basic_string
&
size_t
const
allocator
<
char
>
&
)
;
#
if
_GLIBCXX_RELEASE
>
=
9
template
basic_stringstream
<
char
char_traits
<
char
>
allocator
<
char
>
>
:
:
basic_stringstream
(
)
;
template
basic_ostringstream
<
char
char_traits
<
char
>
allocator
<
char
>
>
:
:
basic_ostringstream
(
)
;
template
char
*
basic_string
<
char
char_traits
<
char
>
allocator
<
char
>
>
:
:
data
(
)
noexcept
;
#
endif
#
if
_GLIBCXX_RELEASE
>
=
11
template
void
basic_string
<
char
char_traits
<
char
>
allocator
<
char
>
>
:
:
reserve
(
)
;
template
void
basic_string
<
wchar_t
char_traits
<
wchar_t
>
allocator
<
wchar_t
>
>
:
:
reserve
(
)
;
void
__attribute__
(
(
weak
)
)
__throw_bad_array_new_length
(
)
{
MOZ_CRASH
(
)
;
}
#
endif
}
