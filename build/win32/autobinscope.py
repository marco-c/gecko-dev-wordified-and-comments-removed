import
sys
import
subprocess
import
os
BINSCOPE_OUTPUT_LOGFILE
=
r
"
.
\
binscope_xml_output
.
log
"
if
len
(
sys
.
argv
)
<
3
:
    
print
(
"
"
"
usage
:
autobinscope
.
by
path_to_binary
path_to_symbols
[
log_file_path
]
"
    
log_file_path
is
optional
log
will
be
written
to
.
\
binscope_xml_output
.
log
by
default
"
"
"
)
    
sys
.
exit
(
0
)
binary_path
=
sys
.
argv
[
1
]
symbol_path
=
sys
.
argv
[
2
]
if
len
(
sys
.
argv
)
=
=
4
:
    
log_file_path
=
sys
.
argv
[
3
]
else
:
    
log_file_path
=
BINSCOPE_OUTPUT_LOGFILE
try
:
    
binscope_path
=
os
.
environ
[
'
BINSCOPE
'
]
except
KeyError
:
    
print
(
"
TEST
-
UNEXPECTED
-
FAIL
|
autobinscope
.
py
|
BINSCOPE
environment
variable
is
not
set
"
          
"
can
'
t
check
DEP
/
ASLR
etc
.
status
.
"
)
    
sys
.
exit
(
1
)
try
:
    
proc
=
subprocess
.
Popen
(
[
        
binscope_path
        
"
/
NoLogo
"
        
"
/
Target
"
binary_path
        
"
/
SymPath
"
symbol_path
        
"
/
SkippedChecks
"
"
ATLVersionCheck
"
        
"
/
Checks
"
"
ATLVulnCheck
"
        
"
/
SkippedChecks
"
"
AppContainerCheck
"
        
"
/
SkippedChecks
"
"
CompilerVersionCheck
"
        
"
/
Checks
"
"
DBCheck
"
        
"
/
Checks
"
"
DefaultGSCookieCheck
"
        
"
/
Checks
"
"
ExecutableImportsCheck
"
        
"
/
SkippedChecks
"
"
FunctionPointersCheck
"
        
"
/
SkippedChecks
"
"
GSCheck
"
        
"
/
Checks
"
"
GSFriendlyInitCheck
"
        
"
/
SkippedChecks
"
"
GSFunctionSafeBuffersCheck
"
        
"
/
Checks
"
"
HighEntropyVACheck
"
        
"
/
Checks
"
"
NXCheck
"
        
"
/
Checks
"
"
RSA32Check
"
        
"
/
Checks
"
"
SafeSEHCheck
"
        
"
/
Checks
"
"
SharedSectionCheck
"
        
"
/
SkippedChecks
"
"
VB6Check
"
        
"
/
Checks
"
"
WXCheck
"
    
]
stdout
=
subprocess
.
PIPE
stderr
=
subprocess
.
PIPE
)
except
WindowsError
(
errno
strerror
)
:
    
if
errno
!
=
2
and
errno
!
=
3
:
        
print
(
"
TEST
-
UNEXPECTED
-
FAIL
|
autobinscope
.
py
|
Unexpected
error
%
d
:
%
s
"
(
            
errno
strerror
)
)
        
sys
.
exit
(
1
)
    
else
:
        
print
(
"
TEST
-
UNEXPECTED
-
FAIL
|
autobinscope
.
py
|
Could
not
locate
binscope
at
location
:
"
              
"
%
s
\
n
"
%
binscope_path
)
        
sys
.
exit
(
1
)
proc
.
wait
(
)
output
=
proc
.
communicate
(
)
[
1
]
.
decode
(
'
utf
-
8
'
)
.
splitlines
(
)
errors
=
0
for
line
in
output
:
    
print
(
line
)
    
if
'
error
'
in
line
:
        
errors
+
=
1
if
proc
.
returncode
!
=
0
:
    
print
(
"
TEST
-
UNEXPECTED
-
FAIL
|
autobinscope
.
py
|
Binscope
returned
error
code
%
d
for
file
%
s
"
%
          
(
proc
.
returncode
binary_path
)
)
    
sys
.
exit
(
1
)
elif
errors
!
=
0
:
    
print
(
"
TEST
-
UNEXPECTED
-
FAIL
|
autobinscope
.
py
|
Binscope
reported
%
d
error
(
s
)
for
file
%
s
"
%
(
        
errors
binary_path
)
)
    
sys
.
exit
(
1
)
else
:
    
print
(
"
TEST
-
PASS
|
autobinscope
.
py
|
%
s
succeeded
"
%
binary_path
)
