from
__future__
import
unicode_literals
import
logging
import
mozunit
import
subprocess
import
unittest
from
os
import
path
from
buildconfig
import
substs
log
=
logging
.
getLogger
(
__name__
)
PLATFORMS
=
(
    
'
linux32
'
    
'
linux64
'
    
'
macosx64
'
    
'
win32
'
    
'
win64
'
)
class
TestCompareMozconfigs
(
unittest
.
TestCase
)
:
    
def
test_compare_mozconfigs
(
self
)
:
        
"
"
"
A
wrapper
script
that
calls
compare
-
mozconfig
.
py
        
based
on
the
platform
that
the
machine
is
building
for
"
"
"
        
for
platform
in
PLATFORMS
:
            
log
.
info
(
'
Comparing
platform
%
s
'
%
platform
)
            
python_exe
=
substs
[
'
PYTHON
'
]
            
topsrcdir
=
substs
[
'
top_srcdir
'
]
            
browser_dir
=
path
.
join
(
topsrcdir
'
browser
'
)
            
script_path
=
path
.
join
(
topsrcdir
'
build
/
compare
-
mozconfig
/
compare
-
mozconfigs
.
py
'
)
            
beta_mozconfig_path
=
path
.
join
(
browser_dir
'
config
/
mozconfigs
'
platform
'
beta
'
)
            
release_mozconfig_path
=
path
.
join
(
browser_dir
'
config
/
mozconfigs
'
platform
'
release
'
)
            
nightly_mozconfig_path
=
path
.
join
(
browser_dir
'
config
/
mozconfigs
'
platform
'
nightly
'
)
            
log
.
info
(
"
Comparing
beta
against
nightly
mozconfigs
"
)
            
ret_code
=
subprocess
.
call
(
[
python_exe
script_path
topsrcdir
                                        
platform
+
'
'
+
beta_mozconfig_path
+
                                        
'
'
+
nightly_mozconfig_path
]
)
            
self
.
assertEqual
(
0
ret_code
)
            
log
.
info
(
"
Comparing
release
against
nightly
mozconfigs
"
)
            
ret_code
=
subprocess
.
call
(
[
python_exe
script_path
topsrcdir
                                        
platform
+
'
'
+
release_mozconfig_path
+
                                        
'
'
+
nightly_mozconfig_path
]
)
            
self
.
assertEqual
(
0
ret_code
)
if
__name__
=
=
'
__main__
'
:
    
mozunit
.
main
(
)
