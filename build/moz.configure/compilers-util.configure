template
imports
(
"
textwrap
"
)
imports
(
_from
=
"
mozbuild
.
configure
"
_import
=
"
SandboxDependsFunction
"
)
def
compiler_class
(
compiler
host_or_target
)
:
is_target
=
host_or_target
is
target
class
Compiler
(
SandboxDependsFunction
)
:
def
_try_compile_or_link
(
self
includes
body
flags
ldflags
check_msg
when
onerror
)
:
if
ldflags
is
None
:
depends
(
dependable
(
flags
)
)
def
flags
(
flags
)
:
flags
=
list
(
flags
or
[
]
)
flags
.
append
(
"
-
c
"
)
return
flags
else
:
depends
(
compiler
dependable
(
ldflags
)
dependable
(
flags
)
when
=
when
)
def
flags
(
compiler
ldflags
flags
)
:
if
compiler
.
type
=
=
"
clang
-
cl
"
:
configure_error
(
"
checking
linker
flags
for
clang
-
cl
is
not
supported
yet
"
)
flags
=
list
(
flags
or
[
]
)
flags
.
extend
(
ldflags
)
return
flags
depends
(
dependable
(
includes
)
)
def
header
(
includes
)
:
includes
=
includes
or
[
]
return
[
"
#
include
<
%
s
>
"
%
f
for
f
in
includes
]
return
self
.
try_run
(
header
=
header
body
=
body
flags
=
flags
check_msg
=
check_msg
when
=
when
onerror
=
onerror
)
def
try_compile
(
self
includes
=
None
body
=
"
"
flags
=
None
check_msg
=
None
when
=
None
onerror
=
lambda
:
None
)
:
return
self
.
_try_compile_or_link
(
includes
=
includes
body
=
body
flags
=
flags
ldflags
=
None
check_msg
=
check_msg
when
=
when
onerror
=
onerror
)
def
try_link
(
self
ldflags
includes
=
None
body
=
"
"
flags
=
None
check_msg
=
None
when
=
None
onerror
=
lambda
:
None
)
:
return
self
.
_try_compile_or_link
(
includes
=
includes
body
=
body
flags
=
flags
ldflags
=
ldflags
check_msg
=
check_msg
when
=
when
onerror
=
onerror
)
def
try_run
(
self
header
=
None
body
=
"
"
flags
=
None
check_msg
=
None
when
=
None
onerror
=
lambda
:
None
)
:
source
=
textwrap
.
dedent
(
"
"
"
\
int
main
(
void
)
{
%
s
;
return
0
;
}
"
"
"
%
body
)
if
check_msg
:
def
checking_fn
(
fn
)
:
return
checking
(
check_msg
)
(
fn
)
else
:
def
checking_fn
(
fn
)
:
return
fn
if
not
isinstance
(
onerror
SandboxDependsFunction
)
:
onerror
=
dependable
(
lambda
:
onerror
)
depends
(
self
dependable
(
flags
)
extra_toolchain_flags
dependable
(
header
)
onerror
configure_cache
when
=
when
)
checking_fn
def
func
(
compiler
flags
extra_flags
header
onerror
configure_cache
)
:
flags
=
list
(
flags
or
[
]
)
if
is_target
:
flags
+
=
extra_flags
or
[
]
header
=
header
or
"
"
if
isinstance
(
header
(
list
tuple
)
)
:
header
=
"
\
n
"
.
join
(
header
)
if
header
:
header
+
=
"
\
n
"
if
(
try_invoke_compiler
(
configure_cache
[
compiler
.
compiler
]
+
compiler
.
flags
compiler
.
language
header
+
source
flags
onerror
=
onerror
wrapper
=
compiler
.
wrapper
)
is
not
None
)
:
return
True
return
func
compiler
.
__class__
=
Compiler
return
compiler
