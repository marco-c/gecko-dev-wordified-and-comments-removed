check_and_add_gcc_flag
(
'
-
fno
-
sized
-
deallocation
'
compiler
=
cxx_compiler
)
check_and_add_gcc_flag
(
'
-
fno
-
aligned
-
new
'
compiler
=
cxx_compiler
)
add_old_configure_assignment
(
'
_COMPILATION_CFLAGS
'
compilation_flags
.
cflags
)
add_old_configure_assignment
(
'
_COMPILATION_CXXFLAGS
'
compilation_flags
.
cxxflags
)
add_old_configure_assignment
(
'
_COMPILATION_HOST_CFLAGS
'
compilation_flags
.
host_cflags
)
add_old_configure_assignment
(
'
_COMPILATION_HOST_CXXFLAGS
'
compilation_flags
.
host_cxxflags
)
depends
(
rust_compile_flags
rust_warning_flags
)
def
rust_flags
(
compile_flags
warning_flags
)
:
return
compile_flags
+
warning_flags
set_config
(
'
MOZ_RUST_DEFAULT_FLAGS
'
rust_flags
)
js_option
(
'
-
-
disable
-
new
-
pass
-
manager
'
help
=
'
Use
the
legacy
LLVM
pass
manager
in
clang
builds
'
)
depends
(
'
-
-
enable
-
new
-
pass
-
manager
'
c_compiler
host
target
'
MOZ_PGO
'
lto
.
enabled
enable_fuzzing
)
def
new_pass_manager_flags
(
enabled
compiler
host
target
pgo
lto
enable_fuzzing
)
:
if
host
.
os
=
=
'
OSX
'
:
return
None
if
target
.
os
=
=
'
OSX
'
and
not
pgo
:
return
None
if
target
.
os
=
=
'
WINNT
'
and
target
.
cpu
=
=
'
aarch64
'
and
not
lto
:
return
None
if
enable_fuzzing
and
compiler
.
version
<
'
10
.
0
.
0
'
:
return
None
if
enabled
and
compiler
.
version
>
=
'
9
.
0
.
0
'
:
if
compiler
.
type
=
=
'
clang
'
:
return
[
'
-
fexperimental
-
new
-
pass
-
manager
'
]
elif
compiler
.
type
=
=
'
clang
-
cl
'
:
return
[
'
-
Xclang
'
'
-
fexperimental
-
new
-
pass
-
manager
'
]
set_config
(
'
MOZ_NEW_PASS_MANAGER_FLAGS
'
new_pass_manager_flags
)
