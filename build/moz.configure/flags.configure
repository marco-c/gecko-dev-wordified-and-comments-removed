check_and_add_gcc_flag
(
"
-
fno
-
sized
-
deallocation
"
compiler
=
cxx_compiler
)
check_and_add_gcc_flag
(
"
-
fno
-
aligned
-
new
"
compiler
=
cxx_compiler
)
add_old_configure_assignment
(
"
_COMPILATION_CFLAGS
"
compilation_flags
.
cflags
)
add_old_configure_assignment
(
"
_COMPILATION_CXXFLAGS
"
compilation_flags
.
cxxflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_CFLAGS
"
compilation_flags
.
host_cflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_CXXFLAGS
"
compilation_flags
.
host_cxxflags
)
option
(
"
-
-
disable
-
new
-
pass
-
manager
"
help
=
"
Use
the
legacy
LLVM
pass
manager
in
clang
builds
"
)
depends
(
"
-
-
enable
-
new
-
pass
-
manager
"
c_compiler
host
target
"
MOZ_PGO
"
enable_fuzzing
ubsan
)
def
new_pass_manager_flags
(
enabled
compiler
host
target
pgo
enable_fuzzing
ubsan
)
:
if
host
.
os
=
=
"
OSX
"
:
return
None
if
target
.
os
=
=
"
OSX
"
and
not
pgo
:
return
None
if
enable_fuzzing
and
compiler
.
version
<
"
10
.
0
.
0
"
:
return
None
if
ubsan
and
compiler
.
version
=
=
"
10
.
0
.
0
"
:
return
None
if
enabled
and
compiler
.
version
>
=
"
9
.
0
.
0
"
:
if
compiler
.
type
=
=
"
clang
"
:
return
[
"
-
fexperimental
-
new
-
pass
-
manager
"
]
elif
compiler
.
type
=
=
"
clang
-
cl
"
:
return
[
"
-
Xclang
"
"
-
fexperimental
-
new
-
pass
-
manager
"
]
set_config
(
"
MOZ_NEW_PASS_MANAGER_FLAGS
"
new_pass_manager_flags
)
depends
(
path_remapping
path_remappings
c_compiler
)
imports
(
_from
=
"
os
"
_import
=
"
sep
"
)
def
file_prefix_map_flags
(
path_remapping
path_remappings
compiler
)
:
if
"
c
"
not
in
path_remapping
:
return
[
]
if
(
compiler
.
type
=
=
"
gcc
"
and
compiler
.
version
<
"
8
.
1
"
)
or
(
compiler
.
type
in
(
"
clang
"
"
clang
-
cl
"
)
and
compiler
.
version
<
"
10
.
0
.
0
"
)
:
die
(
f
"
Compiler
of
type
{
compiler
.
type
}
and
version
{
compiler
.
version
}
"
"
does
not
support
-
-
enable
-
path
-
remapping
.
"
)
flags
=
[
]
for
old
new
in
path_remappings
:
for
flag
in
(
"
-
fdebug
-
prefix
-
map
"
"
-
fmacro
-
prefix
-
map
"
)
:
flag
=
f
"
{
flag
}
=
{
old
}
=
{
new
}
"
if
compiler
.
type
in
(
"
gcc
"
"
clang
"
)
:
flags
.
append
(
flag
)
elif
compiler
.
type
=
=
"
clang
-
cl
"
:
flags
.
extend
(
[
"
-
Xclang
"
flag
]
)
return
flags
set_config
(
"
MOZ_FILE_PREFIX_MAP_FLAGS
"
file_prefix_map_flags
)
