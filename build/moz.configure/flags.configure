check_and_add_flag
(
"
-
fno
-
sized
-
deallocation
"
compiler
=
cxx_compiler
)
check_and_add_flag
(
"
-
fno
-
aligned
-
new
"
compiler
=
cxx_compiler
)
add_old_configure_assignment
(
"
_COMPILATION_CFLAGS
"
compilation_flags
.
cflags
)
add_old_configure_assignment
(
"
_COMPILATION_CXXFLAGS
"
compilation_flags
.
cxxflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_CFLAGS
"
compilation_flags
.
host_cflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_CXXFLAGS
"
compilation_flags
.
host_cxxflags
)
option
(
"
-
-
disable
-
new
-
pass
-
manager
"
help
=
"
Use
the
legacy
LLVM
pass
manager
in
clang
builds
"
)
depends
(
"
-
-
enable
-
new
-
pass
-
manager
"
c_compiler
host
target
"
MOZ_PGO
"
enable_fuzzing
ubsan
)
def
pass_manager
(
enabled
compiler
host
target
pgo
enable_fuzzing
ubsan
)
:
if
compiler
.
type
not
in
(
"
clang
"
"
clang
-
cl
"
)
:
return
None
if
compiler
.
version
>
=
"
13
.
0
.
0
"
:
if
enabled
:
return
namespace
(
flags
=
None
enabled
=
True
)
if
compiler
.
type
=
=
"
clang
"
:
return
namespace
(
flags
=
[
"
-
flegacy
-
pass
-
manager
"
]
enabled
=
False
)
if
compiler
.
type
=
=
"
clang
-
cl
"
:
return
namespace
(
flags
=
[
"
-
Xclang
"
"
-
flegacy
-
pass
-
manager
"
]
enabled
=
False
)
if
not
enabled
:
if
compiler
.
version
>
=
"
15
.
0
.
0
"
:
die
(
"
-
-
disable
-
new
-
pass
-
manager
is
only
supported
with
clang
<
15
"
)
return
None
if
compiler
.
version
<
"
9
.
0
.
0
"
:
if
enabled
.
origin
!
=
"
default
"
:
die
(
"
-
-
enable
-
new
-
pass
-
manager
is
only
supported
with
clang
>
=
9
"
)
return
None
if
host
.
os
=
=
"
OSX
"
:
if
enabled
.
origin
!
=
"
default
"
:
die
(
"
-
-
enable
-
new
-
pass
-
manager
causes
problems
on
mac
hosts
with
clang
<
13
"
)
return
None
if
target
.
os
=
=
"
OSX
"
and
not
pgo
:
if
enabled
.
origin
!
=
"
default
"
:
die
(
"
-
-
enable
-
new
-
pass
-
manager
causes
problems
on
mac
builds
with
clang
<
13
"
)
return
None
if
enable_fuzzing
and
compiler
.
version
<
"
10
.
0
.
0
"
:
if
enabled
.
origin
!
=
"
default
"
:
die
(
"
-
-
enable
-
new
-
pass
-
manager
causes
problems
on
fuzzing
builds
with
clang
<
10
"
)
return
None
if
ubsan
and
compiler
.
version
=
=
"
10
.
0
.
0
"
:
if
enabled
.
origin
!
=
"
default
"
:
die
(
"
-
-
enable
-
new
-
pass
-
manager
causes
problems
with
ubsan
builds
with
clang
10
.
0
.
0
"
)
return
None
if
compiler
.
type
=
=
"
clang
"
:
return
namespace
(
flags
=
[
"
-
fexperimental
-
new
-
pass
-
manager
"
]
enabled
=
True
)
elif
compiler
.
type
=
=
"
clang
-
cl
"
:
return
namespace
(
flags
=
[
"
-
Xclang
"
"
-
fexperimental
-
new
-
pass
-
manager
"
]
enabled
=
True
)
set_config
(
"
MOZ_PASS_MANAGER_FLAGS
"
pass_manager
.
flags
)
depends
(
moz_debug
asan
target
"
-
-
enable
-
jemalloc
"
)
def
moz_no_debug_rtl
(
moz_debug
asan
target
enable_jemalloc
)
:
if
not
moz_debug
or
asan
:
return
True
if
enable_jemalloc
and
target
.
kernel
=
=
"
WINNT
"
:
return
True
set_config
(
"
MOZ_NO_DEBUG_RTL
"
moz_no_debug_rtl
)
depends
(
path_remapping
path_remappings
c_compiler
)
imports
(
_from
=
"
os
"
_import
=
"
sep
"
)
def
file_prefix_map_flags
(
path_remapping
path_remappings
compiler
)
:
if
"
c
"
not
in
path_remapping
:
return
[
]
if
(
compiler
.
type
=
=
"
gcc
"
and
compiler
.
version
<
"
8
.
1
"
)
or
(
compiler
.
type
in
(
"
clang
"
"
clang
-
cl
"
)
and
compiler
.
version
<
"
10
.
0
.
0
"
)
:
die
(
f
"
Compiler
of
type
{
compiler
.
type
}
and
version
{
compiler
.
version
}
"
"
does
not
support
-
-
enable
-
path
-
remapping
.
"
)
flags
=
[
]
for
old
new
in
path_remappings
:
for
flag
in
(
"
-
fdebug
-
prefix
-
map
"
"
-
fmacro
-
prefix
-
map
"
)
:
flag
=
f
"
{
flag
}
=
{
old
}
=
{
new
}
"
if
compiler
.
type
in
(
"
gcc
"
"
clang
"
)
:
flags
.
append
(
flag
)
elif
compiler
.
type
=
=
"
clang
-
cl
"
:
flags
.
extend
(
[
"
-
Xclang
"
flag
]
)
return
flags
set_config
(
"
MOZ_FILE_PREFIX_MAP_FLAGS
"
file_prefix_map_flags
)
depends
(
developer_options
when
=
building_with_gnu_cc
)
def
check_build_id_uuid
(
developer_options
)
:
return
developer_options
depends
(
developer_options
when
=
building_with_gnu_cc
)
def
check_build_id_sha1
(
developer_options
)
:
return
not
developer_options
check_and_add_flag
(
"
-
pipe
"
when
=
building_with_gcc
)
check_and_add_linker_flag
(
"
-
Wl
-
-
build
-
id
=
uuid
"
when
=
check_build_id_uuid
)
check_and_add_linker_flag
(
"
-
Wl
-
-
build
-
id
=
sha1
"
when
=
check_build_id_sha1
)
check_and_add_asm_flag
(
"
-
Wa
-
-
noexecstack
"
when
=
building_with_gnu_cc
)
check_and_add_linker_flag
(
"
-
Wl
-
z
noexecstack
"
when
=
building_with_gnu_cc
)
check_and_add_linker_flag
(
"
-
Wl
-
z
text
"
when
=
building_with_gnu_cc
)
check_and_add_linker_flag
(
"
-
Wl
-
z
relro
"
when
=
building_with_gnu_cc
)
check_and_add_linker_flag
(
"
-
Wl
-
z
now
"
when
=
building_with_gnu_cc
)
check_and_add_linker_flag
(
"
-
Wl
-
z
nocopyreloc
"
when
=
building_with_gnu_cc
)
check_and_add_linker_optimize_flag
(
"
-
Wl
-
dead_strip
"
when
=
target_is_darwin
&
~
dtrace
)
have_linker_support_ignore_unresolved
=
try_link
(
flags
=
[
"
-
Wl
-
-
ignore
-
unresolved
-
symbol
environ
"
]
check_msg
=
"
for
-
-
ignore
-
unresolved
-
symbol
option
to
the
linker
"
when
=
building_with_gnu_cc
&
gcc_use_gnu_ld
)
add_old_configure_assignment
(
"
HAVE_LINKER_SUPPORT_IGNORE_UNRESOLVED
"
have_linker_support_ignore_unresolved
)
depends
(
"
-
-
enable
-
address
-
sanitizer
"
building_with_gnu_cc
)
def
check_Bsymbolic
(
enable_asan
building_with_gnu_cc
)
:
return
enable_asan
and
building_with_gnu_cc
check_and_add_linker_flag
(
"
-
Wl
-
Bsymbolic
"
when
=
check_Bsymbolic
)
add_old_configure_assignment
(
"
_COMPILATION_ASFLAGS
"
asm_flags
.
asflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_ASFLAGS
"
asm_flags
.
host_asflags
)
add_old_configure_assignment
(
"
_COMPILATION_LDFLAGS
"
linker_flags
.
ldflags
)
add_old_configure_assignment
(
"
_COMPILATION_OPTIMIZE_LDFLAGS
"
linker_optimize_flags
.
ldflags
)
add_old_configure_assignment
(
"
_COMPILATION_HOST_LDFLAGS
"
linker_flags
.
host_ldflags
)
