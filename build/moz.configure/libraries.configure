template
def
check_clock_monotonic_support
(
lib
=
None
when
=
None
)
:
check_msg
=
"
for
clock_gettime
(
CLOCK_MONOTONIC
)
"
flags
=
[
]
if
lib
is
not
None
:
check_msg
+
=
f
"
in
{
lib
}
"
flags
.
append
(
f
"
-
l
{
lib
}
"
)
check_when
=
building_with_gnu_cc
if
when
is
not
None
:
check_when
&
=
when
return
try_link
(
includes
=
[
"
time
.
h
"
]
body
=
"
struct
timespec
ts
;
clock_gettime
(
CLOCK_MONOTONIC
&
ts
)
;
"
check_msg
=
check_msg
flags
=
flags
when
=
check_when
)
have_raw_clock_monotonic_support
=
check_clock_monotonic_support
(
)
have_rt_clock_monotonic_support
=
check_clock_monotonic_support
(
lib
=
"
rt
"
when
=
~
have_raw_clock_monotonic_support
)
set_define
(
"
HAVE_CLOCK_MONOTONIC
"
have_raw_clock_monotonic_support
|
have_rt_clock_monotonic_support
)
set_config
(
"
HAVE_CLOCK_MONOTONIC
"
have_raw_clock_monotonic_support
|
have_rt_clock_monotonic_support
)
set_config
(
"
REALTIME_LIBS
"
[
"
-
lrt
"
]
when
=
have_rt_clock_monotonic_support
)
have_res_ninit
=
try_link
(
includes
=
[
"
sys
/
types
.
h
"
"
netinet
/
in
.
h
"
"
arpa
/
nameser
.
h
"
"
resolv
.
h
"
]
body
=
"
int
foo
=
res_ninit
(
&
_res
)
;
"
check_msg
=
"
for
res_ninit
(
)
"
flags
=
depends
(
when
=
building_linux
)
(
[
"
-
D_BSD_SOURCE
=
1
"
]
)
when
=
building_with_gnu_cc
&
~
target_is_netbsd
&
~
target_is_openbsd
)
set_define
(
"
HAVE_RES_NINIT
"
have_res_ninit
)
with
only_when
(
building_with_gnu_cc
)
:
dladdr_check
=
check_symbol_in_libs
(
[
None
"
dl
"
]
symbol
=
"
dladdr
"
)
set_define
(
"
HAVE_DLADDR
"
depends
(
dladdr_check
)
(
lambda
check
:
"
1
"
if
check
.
found
else
"
0
"
)
)
with
only_when
(
~
target_is_darwin
)
:
check_header
(
"
dlfcn
.
h
"
)
dlopen_check
=
check_symbol_in_libs
(
[
"
dl
"
None
]
symbol
=
"
dlopen
"
)
set_config
(
"
DL_LIBS
"
[
"
-
ldl
"
]
when
=
depends
(
dlopen_check
)
(
lambda
check
:
check
.
lib
)
)
set_config
(
"
C_R_LIBS
"
[
"
-
lc_r
"
]
when
=
check_symbol_in_lib
(
"
c_r
"
symbol
=
"
gethostbyname_r
"
when
=
building_with_gnu_cc
)
)
set_config
(
"
SOCKET_LIBS
"
[
"
-
lsocket
"
]
when
=
check_symbol_in_lib
(
"
socket
"
symbol
=
"
socket
"
when
=
building_with_gnu_cc
)
)
