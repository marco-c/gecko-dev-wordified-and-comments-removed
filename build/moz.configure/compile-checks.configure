template
def
try_compile
(
includes
=
None
body
=
"
"
language
=
"
C
+
+
"
flags
=
None
check_msg
=
None
when
=
None
onerror
=
lambda
:
None
)
:
compiler
=
{
"
C
"
:
c_compiler
"
C
+
+
"
:
cxx_compiler
}
[
language
]
return
compiler
.
try_compile
(
includes
body
flags
check_msg
when
=
when
onerror
=
onerror
)
template
def
check_header
(
header
language
=
"
C
+
+
"
flags
=
None
includes
=
None
when
=
None
onerror
=
lambda
:
None
)
:
if
when
is
None
:
when
=
always
if
includes
:
includes
=
includes
[
:
]
else
:
includes
=
[
]
includes
.
append
(
header
)
have_header
=
try_compile
(
includes
=
includes
language
=
language
flags
=
flags
check_msg
=
"
for
%
s
"
%
header
when
=
when
onerror
=
onerror
)
header_var
=
"
HAVE_
%
s
"
%
(
header
.
upper
(
)
.
replace
(
"
-
"
"
_
"
)
.
replace
(
"
/
"
"
_
"
)
.
replace
(
"
.
"
"
_
"
)
)
set_define
(
header_var
have_header
)
return
have_header
template
def
check_headers
(
*
headers
*
*
kwargs
)
:
checks
=
[
]
for
header
in
headers
:
checks
.
append
(
check_header
(
header
*
*
kwargs
)
)
return
checks
depends
(
linker_ldflags
target
.
kernel
)
def
check_symbol_flags
(
linker_ldflags
kernel
)
:
if
kernel
=
=
"
WINNT
"
:
return
[
"
-
fuse
-
ld
=
lld
"
]
return
linker_ldflags
template
def
check_symbol
(
symbol
language
=
"
C
"
flags
=
None
when
=
None
onerror
=
lambda
:
None
)
:
if
when
is
None
:
when
=
always
compiler
extern_c
=
{
"
C
"
:
(
c_compiler
"
"
)
"
C
+
+
"
:
(
cxx_compiler
'
extern
"
C
"
'
)
}
[
language
]
comment
=
[
"
/
*
Override
any
gcc2
internal
prototype
to
avoid
an
error
.
*
/
"
"
/
*
We
use
char
because
int
might
match
the
return
type
of
a
gcc2
"
"
builtin
and
then
its
argument
prototype
would
still
apply
.
*
/
"
]
if
flags
:
depends
(
check_symbol_flags
dependable
(
flags
)
)
def
flags
(
base_flags
extra_flags
)
:
if
extra_flags
:
return
base_flags
+
extra_flags
return
base_flags
else
:
flags
=
check_symbol_flags
return
compiler
.
try_run
(
header
=
comment
+
[
"
%
schar
%
s
(
)
;
"
%
(
extern_c
symbol
)
]
body
=
"
%
s
(
)
;
"
%
symbol
flags
=
flags
check_msg
=
"
for
%
s
"
%
symbol
when
=
when
onerror
=
onerror
)
template
def
check_and_add_flags
(
flag
flags_collection
test_flags
compiler
=
None
when
=
None
check
=
True
)
:
if
compiler
is
not
None
:
compilers
=
(
compiler
)
else
:
compilers
=
(
c_compiler
cxx_compiler
)
if
when
is
None
:
when
=
always
results
=
[
]
if
test_flags
:
flags
=
test_flags
else
:
flags
=
[
flag
]
for
c
in
compilers
:
assert
c
in
{
c_compiler
cxx_compiler
host_c_compiler
host_cxx_compiler
}
lang
list_of_flags
=
{
c_compiler
:
(
"
C
"
flags_collection
.
cflags
)
cxx_compiler
:
(
"
C
+
+
"
flags_collection
.
cxxflags
)
host_c_compiler
:
(
"
host
C
"
flags_collection
.
host_cflags
)
host_cxx_compiler
:
(
"
host
C
+
+
"
flags_collection
.
host_cxxflags
)
}
[
c
]
depends
(
c
when
)
def
result
(
c
when
)
:
if
when
and
c
.
type
in
(
"
clang
"
"
gcc
"
)
:
return
True
if
check
:
depends
(
c
dependable
(
flags
)
)
def
flags
(
c
flags
)
:
if
c
.
type
=
=
"
clang
"
:
flags
+
=
[
"
-
Wno
-
error
=
unused
-
command
-
line
-
argument
"
]
return
flags
result
=
c
.
try_compile
(
flags
=
flags
when
=
result
check_msg
=
"
whether
the
%
s
compiler
supports
%
s
"
%
(
lang
flag
)
)
depends
(
result
list_of_flags
)
def
maybe_add_flag
(
result
list_of_flags
)
:
if
result
:
list_of_flags
.
append
(
flag
)
results
.
append
(
result
)
return
tuple
(
results
)
dependable
def
warnings_flags
(
)
:
return
namespace
(
cflags
=
[
]
cxxflags
=
[
]
host_cflags
=
[
]
host_cxxflags
=
[
]
)
template
def
check_and_add_gcc_warning
(
warning
compiler
=
None
when
=
None
check
=
True
)
:
if
warning
.
startswith
(
"
-
Wno
-
"
)
and
not
warning
.
startswith
(
"
-
Wno
-
error
=
"
)
:
flags
=
[
"
-
Werror
"
"
-
W
"
+
warning
[
5
:
]
]
elif
warning
.
startswith
(
"
-
Werror
=
"
)
:
flags
=
[
warning
]
else
:
flags
=
[
"
-
Werror
"
warning
]
return
check_and_add_flags
(
warning
warnings_flags
flags
compiler
=
compiler
when
=
when
check
=
check
)
template
def
add_gcc_warning
(
warning
compiler
=
None
when
=
None
)
:
check_and_add_gcc_warning
(
warning
compiler
when
check
=
False
)
dependable
def
compilation_flags
(
)
:
return
namespace
(
cflags
=
[
]
cxxflags
=
[
]
host_cflags
=
[
]
host_cxxflags
=
[
]
)
template
def
check_and_add_gcc_flag
(
flag
compiler
=
None
when
=
None
check
=
True
)
:
flags
=
[
"
-
Werror
"
flag
]
return
check_and_add_flags
(
flag
compilation_flags
flags
compiler
=
compiler
when
=
when
check
=
check
)
template
def
add_gcc_flag
(
warning
compiler
=
None
when
=
None
)
:
check_and_add_gcc_flag
(
warning
compiler
when
check
=
False
)
