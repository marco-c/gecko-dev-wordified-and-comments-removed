option
(
"
-
-
enable
-
warnings
-
as
-
errors
"
env
=
"
MOZ_ENABLE_WARNINGS_AS_ERRORS
"
default
=
depends
(
"
MOZ_AUTOMATION
"
)
(
lambda
x
:
bool
(
x
)
)
help
=
"
{
Enable
|
Disable
}
treating
warnings
as
errors
"
)
depends
(
"
-
-
enable
-
warnings
-
as
-
errors
"
)
def
warnings_as_errors
(
warnings_as_errors
)
:
if
not
warnings_as_errors
:
return
"
"
return
"
-
Werror
"
set_config
(
"
WARNINGS_AS_ERRORS
"
warnings_as_errors
)
not_clang_cl
=
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
!
=
"
clang
-
cl
"
)
add_warning
(
"
-
Wall
"
when
=
not_clang_cl
)
add_warning
(
"
-
W3
"
when
=
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
=
=
"
clang
-
cl
"
)
)
check_and_add_warning
(
"
-
Wbitfield
-
enum
-
conversion
"
)
check_and_add_warning
(
"
-
Wdeprecated
-
this
-
capture
"
cxx_compiler
)
add_warning
(
"
-
Wempty
-
body
"
)
check_and_add_warning
(
"
-
Wformat
-
type
-
confusion
"
)
add_warning
(
"
-
Wignored
-
qualifiers
"
)
add_warning
(
"
-
Wpointer
-
arith
"
)
check_and_add_warning
(
"
-
Wshadow
-
field
-
in
-
constructor
-
modified
"
)
add_warning
(
"
-
Wsign
-
compare
"
)
add_warning
(
"
-
Wtype
-
limits
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
tautological
-
type
-
limit
-
compare
"
)
add_warning
(
"
-
Wunreachable
-
code
"
)
check_and_add_warning
(
"
-
Wunreachable
-
code
-
return
"
)
check_and_add_warning
(
"
-
Wunused
-
but
-
set
-
parameter
"
when
=
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
in
(
"
clang
"
"
clang
-
cl
"
)
)
)
add_warning
(
"
-
Wno
-
invalid
-
offsetof
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wclass
-
varargs
"
)
check_and_add_warning
(
"
-
Wempty
-
init
-
stmt
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wfloat
-
overflow
-
conversion
"
)
check_and_add_warning
(
"
-
Wfloat
-
zero
-
conversion
"
)
check_and_add_warning
(
"
-
Wloop
-
analysis
"
)
check_and_add_warning
(
"
-
Wno
-
range
-
loop
-
analysis
"
)
check_and_add_warning
(
"
-
Wc
+
+
2a
-
compat
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wcomma
-
subscript
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wenum
-
compare
-
conditional
"
)
check_and_add_warning
(
"
-
Wenum
-
float
-
conversion
"
)
check_and_add_warning
(
"
-
Wno
-
ambiguous
-
reversed
-
operator
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
anon
-
enum
-
enum
-
conversion
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
enum
-
enum
-
conversion
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
pragma
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
this
-
capture
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
volatile
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
volatile
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wcomma
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wduplicated
-
cond
"
)
check_and_add_warning
(
"
-
Wimplicit
-
fallthrough
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wlogical
-
op
"
)
with
only_when
(
depends
(
target
)
(
lambda
t
:
t
.
kernel
=
=
"
Darwin
"
)
)
:
check_and_add_warning
(
"
-
Wduplicate
-
method
-
arg
"
)
check_and_add_warning
(
"
-
Wduplicate
-
method
-
match
"
)
check_and_add_warning
(
"
-
Wmissing
-
method
-
return
-
type
"
)
check_and_add_warning
(
"
-
Wobjc
-
signed
-
char
-
bool
"
)
check_and_add_warning
(
"
-
Wsemicolon
-
before
-
method
-
body
"
)
check_and_add_warning
(
"
-
Wsuper
-
class
-
method
-
mismatch
"
)
check_and_add_warning
(
"
-
Wstring
-
conversion
"
)
check_and_add_warning
(
"
-
Wno
-
inline
-
new
-
delete
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
error
=
maybe
-
uninitialized
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
declarations
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
array
-
bounds
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
free
-
nonheap
-
object
"
)
check_and_add_warning
(
"
-
Wno
-
multistatement
-
macros
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
class
-
memaccess
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
atomic
-
alignment
"
)
check_and_add_warning
(
"
-
Wno
-
error
=
deprecated
-
builtins
"
)
c_format_warning
cxx_format_warning
=
check_and_add_warning
(
"
-
Wformat
"
when
=
depends
(
target
)
(
lambda
t
:
t
.
kernel
!
=
"
WINNT
"
)
)
check_and_add_warning
(
"
-
Wformat
-
security
"
when
=
c_format_warning
&
cxx_format_warning
)
check_and_add_warning
(
"
-
Wformat
-
overflow
=
2
"
when
=
c_format_warning
&
cxx_format_warning
)
with
only_when
(
target_is_windows
)
:
check_and_add_warning
(
"
-
Wno
-
unknown
-
pragmas
"
)
with
only_when
(
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
=
=
"
clang
-
cl
"
)
)
:
check_and_add_warning
(
"
-
Wno
-
ignored
-
pragmas
"
)
check_and_add_warning
(
"
-
Wno
-
deprecated
-
declarations
"
)
check_and_add_warning
(
"
-
Wno
-
microsoft
-
enum
-
value
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
microsoft
-
include
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
invalid
-
noreturn
"
)
check_and_add_warning
(
"
-
Wno
-
inconsistent
-
missing
-
override
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
implicit
-
exception
-
spec
-
mismatch
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
microsoft
-
exception
-
spec
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
unused
-
local
-
typedef
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
ignored
-
attributes
"
cxx_compiler
)
check_and_add_warning
(
"
-
Wno
-
used
-
but
-
marked
-
unused
"
cxx_compiler
)
with
only_when
(
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
!
=
"
clang
-
cl
"
)
)
:
check_and_add_warning
(
"
-
Wno
-
unused
-
function
"
)
check_and_add_warning
(
"
-
Wno
-
conversion
-
null
"
)
check_and_add_warning
(
"
-
Wno
-
switch
"
)
check_and_add_warning
(
"
-
Wno
-
enum
-
compare
"
)
check_and_add_warning
(
"
-
Werror
=
implicit
-
function
-
declaration
"
c_compiler
)
check_and_add_warning
(
"
-
Wno
-
psabi
"
)
check_and_add_warning
(
"
-
Wno
-
missing
-
braces
"
when
=
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
=
=
"
clang
"
and
c
.
version
<
"
6
.
0
"
)
)
check_and_add_warning
(
"
-
Wthread
-
safety
"
when
=
depends
(
c_compiler
)
(
lambda
c
:
c
.
type
in
(
"
clang
"
"
clang
-
cl
"
)
and
c
.
version
>
=
"
8
.
0
"
)
)
check_and_add_warning
(
"
-
Werror
=
unguarded
-
availability
-
new
"
when
=
target_is_osx
)
check_and_add_warning
(
"
-
Wno
-
unknown
-
warning
-
option
"
)
set_config
(
"
WARNINGS_CFLAGS
"
warnings_flags
.
cflags
)
set_config
(
"
WARNINGS_CXXFLAGS
"
warnings_flags
.
cxxflags
)
set_config
(
"
WARNINGS_HOST_CFLAGS
"
warnings_flags
.
host_cflags
)
set_config
(
"
WARNINGS_HOST_CXXFLAGS
"
warnings_flags
.
host_cxxflags
)
