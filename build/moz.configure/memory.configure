depends
(
target
js_package
)
def
jemalloc_default
(
target
js_package
)
:
if
js_package
:
return
False
return
target
.
kernel
in
(
"
Darwin
"
"
Linux
"
"
WINNT
"
)
option
(
"
-
-
enable
-
jemalloc
"
env
=
"
MOZ_MEMORY
"
default
=
jemalloc_default
help
=
"
{
Replace
|
Do
not
replace
}
memory
allocator
with
jemalloc
"
)
set_config
(
"
MOZ_MEMORY
"
True
when
=
"
-
-
enable
-
jemalloc
"
)
set_define
(
"
MOZ_MEMORY
"
True
when
=
"
-
-
enable
-
jemalloc
"
)
add_old_configure_assignment
(
"
MOZ_MEMORY
"
True
when
=
"
-
-
enable
-
jemalloc
"
)
depends
(
milestone
build_project
)
def
replace_malloc_default
(
milestone
build_project
)
:
if
build_project
=
=
"
memory
"
:
return
True
if
milestone
.
is_early_beta_or_earlier
and
build_project
!
=
"
js
"
:
return
True
option
(
"
-
-
enable
-
replace
-
malloc
"
default
=
replace_malloc_default
when
=
"
-
-
enable
-
jemalloc
"
help
=
"
{
Enable
|
Disable
}
ability
to
dynamically
replace
the
malloc
implementation
"
)
set_config
(
"
MOZ_REPLACE_MALLOC
"
True
when
=
"
-
-
enable
-
replace
-
malloc
"
)
set_define
(
"
MOZ_REPLACE_MALLOC
"
True
when
=
"
-
-
enable
-
replace
-
malloc
"
)
depends
(
build_project
when
=
"
-
-
enable
-
replace
-
malloc
"
)
def
replace_malloc_static
(
build_project
)
:
if
build_project
!
=
"
memory
"
:
return
True
set_config
(
"
MOZ_REPLACE_MALLOC_STATIC
"
replace_malloc_static
)
depends
(
milestone
build_project
target
when
=
"
-
-
enable
-
jemalloc
"
)
def
phc_default
(
milestone
build_project
target
)
:
if
not
milestone
.
is_early_beta_or_earlier
:
return
False
if
build_project
=
=
"
js
"
:
return
False
return
(
(
target
.
os
=
=
"
GNU
"
and
target
.
kernel
=
=
"
Linux
"
and
target
.
bitness
=
=
64
)
or
(
target
.
kernel
=
=
"
WINNT
"
and
target
.
bitness
=
=
64
)
or
(
target
.
os
=
=
"
OSX
"
)
)
option
(
"
-
-
enable
-
phc
"
env
=
"
MOZ_PHC
"
default
=
phc_default
when
=
"
-
-
enable
-
jemalloc
"
help
=
"
{
Enable
|
Disable
}
PHC
(
Probabilistic
Memory
Checker
)
.
"
"
Also
enables
frame
pointers
when
needed
"
)
set_config
(
"
MOZ_PHC
"
True
when
=
"
-
-
enable
-
phc
"
)
depends
(
"
-
-
enable
-
phc
"
target
have_unwind
when
=
"
-
-
enable
-
jemalloc
"
)
def
phc_implies_frame_pointers
(
phc
target
have_unwind
)
:
if
not
phc
:
return
False
if
(
target
.
os
=
=
"
WINNT
"
and
target
.
cpu
=
=
"
x86
"
)
or
target
.
kernel
=
=
"
Darwin
"
:
return
True
if
(
target
.
cpu
in
(
"
x86
"
"
ppc
"
)
)
and
(
target
.
kernel
in
(
"
Darwin
"
"
Linux
"
)
)
:
return
not
have_unwind
return
False
imply_option
(
"
-
-
enable
-
frame
-
pointers
"
True
when
=
phc_implies_frame_pointers
)
with
only_when
(
depends
(
target
.
os
)
(
lambda
os
:
os
!
=
"
WINNT
"
)
)
:
set_define
(
"
HAVE_STRNDUP
"
check_symbol
(
"
strndup
"
)
)
set_define
(
"
HAVE_POSIX_MEMALIGN
"
check_symbol
(
"
posix_memalign
"
)
)
set_define
(
"
HAVE_MEMALIGN
"
check_symbol
(
"
memalign
"
)
)
set_define
(
"
HAVE_MALLOC_USABLE_SIZE
"
check_symbol
(
"
malloc_usable_size
"
)
)
