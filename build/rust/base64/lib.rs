pub
use
base64
:
:
engine
:
:
general_purpose
:
:
*
;
pub
use
base64
:
:
DecodeError
;
use
base64
:
:
Engine
;
pub
fn
decode
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
)
-
>
Result
<
Vec
<
u8
>
DecodeError
>
{
STANDARD
.
decode
(
input
)
}
pub
fn
encode
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
)
-
>
String
{
STANDARD
.
encode
(
input
)
}
pub
fn
decode_config
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
engine
:
GeneralPurpose
)
-
>
Result
<
Vec
<
u8
>
DecodeError
>
{
engine
.
decode
(
input
)
}
pub
fn
encode_config
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
engine
:
GeneralPurpose
)
-
>
String
{
engine
.
encode
(
input
)
}
pub
fn
encode_config_slice
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
engine
:
GeneralPurpose
output
:
&
mut
[
u8
]
)
-
>
usize
{
engine
.
encode_slice
(
input
output
)
.
expect
(
"
Output
buffer
too
small
"
)
}
pub
fn
encode_config_buf
<
T
:
AsRef
<
[
u8
]
>
>
(
input
:
T
engine
:
GeneralPurpose
buf
:
&
mut
String
)
{
engine
.
encode_string
(
input
buf
)
}
