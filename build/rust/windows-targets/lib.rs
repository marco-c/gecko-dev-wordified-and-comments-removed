use
proc_macro
:
:
TokenStream
;
use
quote
:
:
quote
;
use
syn
:
:
parse
:
:
{
Parse
ParseStream
Result
}
;
use
syn
:
:
{
parse_macro_input
Attribute
LitStr
Signature
}
;
struct
LinkMacroInput
{
library
:
LitStr
abi
:
LitStr
link_name
:
Option
<
LitStr
>
function
:
Signature
}
impl
Parse
for
LinkMacroInput
{
fn
parse
(
input
:
ParseStream
)
-
>
Result
<
Self
>
{
let
library
:
LitStr
=
input
.
parse
(
)
?
;
let
abi
:
LitStr
=
input
.
parse
(
)
?
;
let
link_name
:
Option
<
LitStr
>
=
input
.
parse
(
)
.
ok
(
)
;
let
_doc_comments
=
Attribute
:
:
parse_outer
(
input
)
?
;
let
function
:
Signature
=
input
.
parse
(
)
?
;
Ok
(
LinkMacroInput
{
library
abi
link_name
function
}
)
}
}
#
[
proc_macro
]
pub
fn
link
(
input
:
TokenStream
)
-
>
TokenStream
{
let
LinkMacroInput
{
library
abi
link_name
function
}
=
parse_macro_input
!
(
input
as
LinkMacroInput
)
;
let
link_name_attr
=
link_name
.
map
(
|
lit
|
quote
!
{
#
[
link_name
=
#
lit
]
}
)
;
let
library
=
library
.
value
(
)
;
let
library
=
library
.
strip_suffix
(
"
.
dll
"
)
.
unwrap_or
(
&
library
)
;
let
generated
=
quote
!
{
extern
#
abi
{
#
[
link
(
name
=
#
library
)
]
#
link_name_attr
pub
#
function
;
}
}
;
TokenStream
:
:
from
(
generated
)
}
