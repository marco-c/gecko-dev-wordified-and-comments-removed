#
include
"
NoDuplicateRefCntMemberChecker
.
h
"
#
include
"
CustomMatchers
.
h
"
void
NoDuplicateRefCntMemberChecker
:
:
registerMatchers
(
MatchFinder
*
AstMatcher
)
{
AstMatcher
-
>
addMatcher
(
cxxRecordDecl
(
)
.
bind
(
"
decl
"
)
this
)
;
}
void
NoDuplicateRefCntMemberChecker
:
:
check
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
const
CXXRecordDecl
*
D
=
Result
.
Nodes
.
getNodeAs
<
CXXRecordDecl
>
(
"
decl
"
)
;
const
FieldDecl
*
RefCntMember
=
getClassRefCntMember
(
D
)
;
const
FieldDecl
*
FoundRefCntBase
=
nullptr
;
if
(
!
D
-
>
hasDefinition
(
)
)
return
;
D
=
D
-
>
getDefinition
(
)
;
if
(
!
RefCntMember
&
&
D
-
>
getNumBases
(
)
<
2
)
{
return
;
}
for
(
auto
&
Base
:
D
-
>
bases
(
)
)
{
const
FieldDecl
*
BaseRefCntMember
=
getBaseRefCntMember
(
Base
.
getType
(
)
)
;
if
(
BaseRefCntMember
)
{
if
(
RefCntMember
)
{
const
char
*
Error
=
"
Refcounted
record
%
0
has
multiple
mRefCnt
members
"
;
const
char
*
Note1
=
"
Superclass
%
0
also
has
an
mRefCnt
member
"
;
const
char
*
Note2
=
"
Consider
using
the
_INHERITED
macros
for
AddRef
and
Release
here
"
;
diag
(
D
-
>
getLocStart
(
)
Error
DiagnosticIDs
:
:
Error
)
<
<
D
;
diag
(
BaseRefCntMember
-
>
getLocStart
(
)
Note1
DiagnosticIDs
:
:
Note
)
<
<
BaseRefCntMember
-
>
getParent
(
)
;
diag
(
RefCntMember
-
>
getLocStart
(
)
Note2
DiagnosticIDs
:
:
Note
)
;
}
if
(
FoundRefCntBase
)
{
const
char
*
Error
=
"
Refcounted
record
%
0
has
multiple
superclasses
"
"
with
mRefCnt
members
"
;
const
char
*
Note
=
"
Superclass
%
0
has
an
mRefCnt
member
"
;
diag
(
D
-
>
getLocStart
(
)
Error
DiagnosticIDs
:
:
Error
)
<
<
D
;
diag
(
BaseRefCntMember
-
>
getLocStart
(
)
Note
DiagnosticIDs
:
:
Note
)
<
<
BaseRefCntMember
-
>
getParent
(
)
;
diag
(
FoundRefCntBase
-
>
getLocStart
(
)
Note
DiagnosticIDs
:
:
Note
)
<
<
FoundRefCntBase
-
>
getParent
(
)
;
}
FoundRefCntBase
=
BaseRefCntMember
;
}
}
}
