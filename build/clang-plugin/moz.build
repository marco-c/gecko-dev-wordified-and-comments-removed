HostSharedLibrary
(
"
clang
-
plugin
"
)
HOST_SOURCES
+
=
[
"
!
ThirdPartyPaths
.
cpp
"
]
HOST_SOURCES
+
=
[
"
ArithmeticArgChecker
.
cpp
"
"
AssertAssignmentChecker
.
cpp
"
"
CanRunScriptChecker
.
cpp
"
"
CustomAttributes
.
cpp
"
"
CustomTypeAnnotation
.
cpp
"
"
DanglingOnTemporaryChecker
.
cpp
"
"
DiagnosticsMatcher
.
cpp
"
"
ExplicitImplicitChecker
.
cpp
"
"
ExplicitOperatorBoolChecker
.
cpp
"
"
GlobalVariableInitializationChecker
.
cpp
"
"
JSHandleRootedTypedefChecker
.
cpp
"
"
KnownLiveChecker
.
cpp
"
"
KungFuDeathGripChecker
.
cpp
"
"
MozCheckAction
.
cpp
"
"
MustOverrideChecker
.
cpp
"
"
MustReturnFromCallerChecker
.
cpp
"
"
NaNExprChecker
.
cpp
"
"
NeedsNoVTableTypeChecker
.
cpp
"
"
NoAddRefReleaseOnReturnChecker
.
cpp
"
"
NoAutoTypeChecker
.
cpp
"
"
NoDuplicateRefCntMemberChecker
.
cpp
"
"
NoExplicitMoveConstructorChecker
.
cpp
"
"
NoNewThreadsChecker
.
cpp
"
"
NonMemMovableMemberChecker
.
cpp
"
"
NonMemMovableTemplateArgChecker
.
cpp
"
"
NonParamInsideFunctionDeclChecker
.
cpp
"
"
NonTrivialTypeInFfiChecker
.
cpp
"
"
NoPrincipalGetURI
.
cpp
"
"
NoUsingNamespaceMozillaJavaChecker
.
cpp
"
"
OverrideBaseCallChecker
.
cpp
"
"
OverrideBaseCallUsageChecker
.
cpp
"
"
ParamTraitsEnumChecker
.
cpp
"
"
RefCountedCopyConstructorChecker
.
cpp
"
"
RefCountedInsideLambdaChecker
.
cpp
"
"
RefCountedThisInsideConstructorChecker
.
cpp
"
"
ScopeChecker
.
cpp
"
"
SprintfLiteralChecker
.
cpp
"
"
TrivialCtorDtorChecker
.
cpp
"
"
TrivialDtorChecker
.
cpp
"
"
VariableUsageHelpers
.
cpp
"
]
if
CONFIG
[
"
OS_ARCH
"
]
=
=
"
WINNT
"
:
HOST_DEFINES
[
"
TARGET_IS_WINDOWS
"
]
=
True
HOST_SOURCES
+
=
[
"
FopenUsageChecker
.
cpp
"
"
LoadLibraryUsageChecker
.
cpp
"
]
if
CONFIG
[
"
ENABLE_MOZSEARCH_PLUGIN
"
]
:
HOST_SOURCES
+
=
[
"
mozsearch
-
plugin
/
BindingOperations
.
cpp
"
"
mozsearch
-
plugin
/
FileOperations
.
cpp
"
"
mozsearch
-
plugin
/
from
-
clangd
/
HeuristicResolver
.
cpp
"
"
mozsearch
-
plugin
/
MozsearchIndexer
.
cpp
"
"
mozsearch
-
plugin
/
StringOperations
.
cpp
"
]
GeneratedFile
(
"
ThirdPartyPaths
.
cpp
"
script
=
"
ThirdPartyPaths
.
py
"
entry_point
=
"
generate
"
inputs
=
[
"
/
tools
/
rewriting
/
ThirdPartyPaths
.
txt
"
"
/
tools
/
rewriting
/
Generated
.
txt
"
]
)
GeneratedFile
(
"
ThreadAllows
.
h
"
script
=
"
ThreadAllows
.
py
"
entry_point
=
"
generate_file
"
inputs
=
[
"
/
build
/
clang
-
plugin
/
ThreadAllows
.
txt
"
"
/
build
/
clang
-
plugin
/
ThreadFileAllows
.
txt
"
]
)
HOST_COMPILE_FLAGS
[
"
STL
"
]
=
[
]
HOST_COMPILE_FLAGS
[
"
VISIBILITY
"
]
=
[
]
HOST_LDFLAGS
+
=
CONFIG
[
"
LLVM_LDFLAGS
"
]
if
CONFIG
[
"
HOST_OS_ARCH
"
]
=
=
"
Darwin
"
:
HOST_CXXFLAGS
+
=
[
"
-
stdlib
=
libc
+
+
"
]
HOST_LDFLAGS
+
=
[
"
-
Wl
-
flat_namespace
"
"
-
Wl
-
undefined
suppress
"
]
if
CONFIG
[
"
HOST_OS_ARCH
"
]
!
=
"
WINNT
"
:
HOST_CXXFLAGS
+
=
[
"
-
fPIC
"
]
HOST_LDFLAGS
+
=
[
"
-
shared
"
]
else
:
HOST_LDFLAGS
+
=
[
"
-
brepro
"
]
TEST_DIRS
+
=
[
"
tests
"
]
include
(
"
external
/
sources
.
mozbuild
"
)
if
CONFIG
[
"
ENABLE_CLANG_PLUGIN_ALPHA
"
]
:
HOST_DEFINES
[
"
MOZ_CLANG_PLUGIN_ALPHA
"
]
=
"
1
"
include
(
"
alpha
/
sources
.
mozbuild
"
)
if
CONFIG
[
"
HOST_OS_ARCH
"
]
=
=
"
WINNT
"
:
extra_cxxflags
=
[
"
-
GR
-
"
"
-
EHsc
"
]
HOST_DEFINES
[
"
LLVM_FORCE_USE_OLD_TOOLCHAIN
"
]
=
True
else
:
extra_cxxflags
=
[
"
-
fno
-
rtti
"
"
-
fno
-
exceptions
"
]
if
CONFIG
[
"
LLVM_CXXFLAGS
"
]
:
HOST_COMPILE_FLAGS
[
"
HOST_CXXFLAGS
"
]
=
CONFIG
[
"
LLVM_CXXFLAGS
"
]
+
extra_cxxflags
DEFINES
[
"
DEBUG
"
]
=
False
HOST_OS_LIBS
+
=
[
"
clangASTMatchers
"
]
if
CONFIG
[
"
HOST_OS_ARCH
"
]
=
=
"
WINNT
"
:
HOST_OS_LIBS
+
=
[
"
clang
"
]
