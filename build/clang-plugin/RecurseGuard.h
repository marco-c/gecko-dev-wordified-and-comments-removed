#
ifndef
RecurseGuard_h__
#
define
RecurseGuard_h__
#
include
"
Utils
.
h
"
template
<
typename
T
>
class
RecurseGuard
{
public
:
RecurseGuard
(
T
Thing
)
:
Thing
(
Thing
)
Set
(
new
DenseSet
<
T
>
(
)
)
Repeat
(
false
)
{
Set
-
>
insert
(
Thing
)
;
}
RecurseGuard
(
T
Thing
std
:
:
shared_ptr
<
DenseSet
<
T
>
>
&
Set
)
:
Thing
(
Thing
)
Set
(
Set
)
Repeat
(
false
)
{
Repeat
=
!
Set
-
>
insert
(
Thing
)
.
second
;
}
RecurseGuard
(
const
RecurseGuard
&
)
=
delete
;
RecurseGuard
(
RecurseGuard
&
&
Other
)
:
Thing
(
Other
.
Thing
)
Set
(
Other
.
Set
)
Repeat
(
Other
.
Repeat
)
{
Other
.
Repeat
=
true
;
}
~
RecurseGuard
(
)
{
if
(
!
Repeat
)
{
Set
-
>
erase
(
Thing
)
;
}
}
bool
isRepeat
(
)
{
return
Repeat
;
}
T
get
(
)
{
return
Thing
;
}
operator
T
(
)
{
return
Thing
;
}
T
operator
-
>
(
)
{
return
Thing
;
}
RecurseGuard
recurse
(
T
NewThing
)
{
return
RecurseGuard
(
NewThing
Set
)
;
}
private
:
T
Thing
;
std
:
:
shared_ptr
<
DenseSet
<
T
>
>
Set
;
bool
Repeat
;
}
;
#
endif
