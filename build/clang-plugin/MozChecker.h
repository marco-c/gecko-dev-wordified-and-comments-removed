#
ifndef
MozChecker_h__
#
define
MozChecker_h__
#
include
"
DiagnosticsMatcher
.
h
"
class
MozChecker
:
public
ASTConsumer
public
RecursiveASTVisitor
<
MozChecker
>
{
DiagnosticsEngine
&
Diag
;
const
CompilerInstance
&
CI
;
DiagnosticsMatcher
Matcher
;
public
:
MozChecker
(
const
CompilerInstance
&
CI
)
:
Diag
(
CI
.
getDiagnostics
(
)
)
CI
(
CI
)
{
}
virtual
~
MozChecker
(
)
{
}
ASTConsumerPtr
getOtherConsumer
(
)
{
return
Matcher
.
makeASTConsumer
(
)
;
}
virtual
void
HandleTranslationUnit
(
ASTContext
&
Ctx
)
override
;
static
bool
hasCustomAnnotation
(
const
Decl
*
D
const
char
*
Spelling
)
;
void
handleUnusedExprResult
(
const
Stmt
*
Statement
)
;
bool
VisitCXXRecordDecl
(
CXXRecordDecl
*
D
)
;
bool
VisitSwitchCase
(
SwitchCase
*
Statement
)
;
bool
VisitCompoundStmt
(
CompoundStmt
*
Statement
)
;
bool
VisitIfStmt
(
IfStmt
*
Statement
)
;
bool
VisitWhileStmt
(
WhileStmt
*
Statement
)
;
bool
VisitDoStmt
(
DoStmt
*
Statement
)
;
bool
VisitForStmt
(
ForStmt
*
Statement
)
;
bool
VisitBinComma
(
BinaryOperator
*
Op
)
;
}
;
#
endif
