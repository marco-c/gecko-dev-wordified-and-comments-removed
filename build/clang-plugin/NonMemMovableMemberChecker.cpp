#
include
"
NonMemMovableMemberChecker
.
h
"
#
include
"
CustomMatchers
.
h
"
MemMoveAnnotation
NonMemMovable
=
MemMoveAnnotation
(
)
;
void
NonMemMovableMemberChecker
:
:
registerMatcher
(
MatchFinder
&
AstMatcher
)
{
AstMatcher
.
addMatcher
(
cxxRecordDecl
(
needsMemMovableMembers
(
)
)
.
bind
(
"
decl
"
)
this
)
;
}
void
NonMemMovableMemberChecker
:
:
run
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
DiagnosticsEngine
&
Diag
=
Result
.
Context
-
>
getDiagnostics
(
)
;
unsigned
ErrorID
=
Diag
.
getDiagnosticIDs
(
)
-
>
getCustomDiagID
(
DiagnosticIDs
:
:
Error
"
class
%
0
cannot
have
non
-
memmovable
member
%
1
of
type
%
2
"
)
;
const
CXXRecordDecl
*
Declaration
=
Result
.
Nodes
.
getNodeAs
<
CXXRecordDecl
>
(
"
decl
"
)
;
for
(
const
FieldDecl
*
Field
:
Declaration
-
>
fields
(
)
)
{
QualType
Type
=
Field
-
>
getType
(
)
;
if
(
NonMemMovable
.
hasEffectiveAnnotation
(
Type
)
)
{
Diag
.
Report
(
Field
-
>
getLocation
(
)
ErrorID
)
<
<
Declaration
<
<
Field
<
<
Type
;
NonMemMovable
.
dumpAnnotationReason
(
Diag
Type
Declaration
-
>
getLocation
(
)
)
;
}
}
}
