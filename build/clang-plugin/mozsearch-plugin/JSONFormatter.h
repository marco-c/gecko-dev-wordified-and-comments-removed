#
ifndef
JSONFormatter_h
#
define
JSONFormatter_h
#
include
<
memory
>
#
include
<
string
>
class
JSONFormatter
{
struct
Property
{
const
char
*
Name
;
std
:
:
string
StringValue
;
int
IntValue
;
bool
IsString
;
Property
(
)
{
}
Property
(
const
char
*
Name
std
:
:
string
String
)
:
Name
(
Name
)
StringValue
(
std
:
:
move
(
String
)
)
IsString
(
true
)
{
}
Property
(
const
char
*
Name
int
Int
)
:
Name
(
Name
)
IntValue
(
Int
)
IsString
(
false
)
{
}
}
;
static
const
int
kMaxProperties
=
32
;
Property
Properties
[
kMaxProperties
]
;
int
PropertyCount
;
size_t
Length
;
std
:
:
string
escape
(
std
:
:
string
Input
)
;
public
:
JSONFormatter
(
)
:
PropertyCount
(
0
)
Length
(
0
)
{
}
void
add
(
const
char
*
Name
const
char
*
Value
)
;
void
add
(
const
char
*
Name
std
:
:
string
Value
)
;
void
add
(
const
char
*
Name
int
Value
)
;
void
format
(
std
:
:
string
&
Result
)
;
}
;
#
endif
