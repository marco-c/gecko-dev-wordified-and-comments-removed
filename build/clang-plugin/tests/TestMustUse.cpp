#
define
MOZ_MUST_USE
__attribute__
(
(
annotate
(
"
moz_must_use
"
)
)
)
class
MOZ_MUST_USE
MustUse
{
}
;
class
MayUse
{
}
;
MustUse
producesMustUse
(
)
;
MustUse
*
producesMustUsePointer
(
)
;
MustUse
&
producesMustUseRef
(
)
;
MayUse
producesMayUse
(
)
;
MayUse
*
producesMayUsePointer
(
)
;
MayUse
&
producesMayUseRef
(
)
;
void
use
(
MustUse
*
)
;
void
use
(
MustUse
&
)
;
void
use
(
MustUse
&
&
)
;
void
use
(
MayUse
*
)
;
void
use
(
MayUse
&
)
;
void
use
(
MayUse
&
&
)
;
void
use
(
bool
)
;
void
foo
(
)
{
MustUse
u
;
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
{
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
}
if
(
true
)
{
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
}
else
{
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
}
if
(
true
)
producesMustUse
(
)
;
else
producesMustUse
(
)
;
if
(
true
)
producesMustUsePointer
(
)
;
else
producesMustUsePointer
(
)
;
if
(
true
)
producesMustUseRef
(
)
;
else
producesMustUseRef
(
)
;
if
(
true
)
producesMayUse
(
)
;
else
producesMayUse
(
)
;
if
(
true
)
producesMayUsePointer
(
)
;
else
producesMayUsePointer
(
)
;
if
(
true
)
producesMayUseRef
(
)
;
else
producesMayUseRef
(
)
;
if
(
true
)
u
=
producesMustUse
(
)
;
else
u
=
producesMustUse
(
)
;
while
(
true
)
producesMustUse
(
)
;
while
(
true
)
producesMustUsePointer
(
)
;
while
(
true
)
producesMustUseRef
(
)
;
while
(
true
)
producesMayUse
(
)
;
while
(
true
)
producesMayUsePointer
(
)
;
while
(
true
)
producesMayUseRef
(
)
;
while
(
true
)
u
=
producesMustUse
(
)
;
do
producesMustUse
(
)
;
while
(
true
)
;
do
producesMustUsePointer
(
)
;
while
(
true
)
;
do
producesMustUseRef
(
)
;
while
(
true
)
;
do
producesMayUse
(
)
;
while
(
true
)
;
do
producesMayUsePointer
(
)
;
while
(
true
)
;
do
producesMayUseRef
(
)
;
while
(
true
)
;
do
u
=
producesMustUse
(
)
;
while
(
true
)
;
for
(
;
;
)
producesMustUse
(
)
;
for
(
;
;
)
producesMustUsePointer
(
)
;
for
(
;
;
)
producesMustUseRef
(
)
;
for
(
;
;
)
producesMayUse
(
)
;
for
(
;
;
)
producesMayUsePointer
(
)
;
for
(
;
;
)
producesMayUseRef
(
)
;
for
(
;
;
)
u
=
producesMustUse
(
)
;
for
(
producesMustUse
(
)
;
;
)
;
for
(
producesMustUsePointer
(
)
;
;
)
;
for
(
producesMustUseRef
(
)
;
;
)
;
for
(
producesMayUse
(
)
;
;
)
;
for
(
producesMayUsePointer
(
)
;
;
)
;
for
(
producesMayUseRef
(
)
;
;
)
;
for
(
u
=
producesMustUse
(
)
;
;
)
;
for
(
;
;
producesMustUse
(
)
)
;
for
(
;
;
producesMustUsePointer
(
)
)
;
for
(
;
;
producesMustUseRef
(
)
)
;
for
(
;
;
producesMayUse
(
)
)
;
for
(
;
;
producesMayUsePointer
(
)
)
;
for
(
;
;
producesMayUseRef
(
)
)
;
for
(
;
;
u
=
producesMustUse
(
)
)
;
use
(
(
producesMustUse
(
)
false
)
)
;
use
(
(
producesMustUsePointer
(
)
false
)
)
;
use
(
(
producesMustUseRef
(
)
false
)
)
;
use
(
(
producesMayUse
(
)
false
)
)
;
use
(
(
producesMayUsePointer
(
)
false
)
)
;
use
(
(
producesMayUseRef
(
)
false
)
)
;
use
(
(
u
=
producesMustUse
(
)
false
)
)
;
switch
(
1
)
{
case
1
:
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
case
2
:
producesMustUse
(
)
;
case
3
:
producesMustUsePointer
(
)
;
case
4
:
producesMustUseRef
(
)
;
case
5
:
producesMayUse
(
)
;
case
6
:
producesMayUsePointer
(
)
;
case
7
:
producesMayUseRef
(
)
;
case
8
:
u
=
producesMustUse
(
)
;
default
:
producesMustUse
(
)
;
producesMustUsePointer
(
)
;
producesMustUseRef
(
)
;
producesMayUse
(
)
;
producesMayUsePointer
(
)
;
producesMayUseRef
(
)
;
u
=
producesMustUse
(
)
;
}
use
(
producesMustUse
(
)
)
;
use
(
producesMustUsePointer
(
)
)
;
use
(
producesMustUseRef
(
)
)
;
use
(
producesMayUse
(
)
)
;
use
(
producesMayUsePointer
(
)
)
;
use
(
producesMayUseRef
(
)
)
;
use
(
u
=
producesMustUse
(
)
)
;
MustUse
a
=
producesMustUse
(
)
;
MustUse
*
b
=
producesMustUsePointer
(
)
;
MustUse
&
c
=
producesMustUseRef
(
)
;
MayUse
d
=
producesMayUse
(
)
;
MayUse
*
e
=
producesMayUsePointer
(
)
;
MayUse
&
f
=
producesMayUseRef
(
)
;
MustUse
g
=
u
=
producesMustUse
(
)
;
}
