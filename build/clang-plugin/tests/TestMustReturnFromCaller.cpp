#
include
<
cstddef
>
#
include
<
utility
>
#
define
MOZ_MUST_RETURN_FROM_CALLER
__attribute__
(
(
annotate
(
"
moz_must_return_from_caller
"
)
)
)
#
define
MOZ_MAY_CALL_AFTER_MUST_RETURN
__attribute__
(
(
annotate
(
"
moz_may_call_after_must_return
"
)
)
)
void
MOZ_MUST_RETURN_FROM_CALLER
Throw
(
)
{
}
void
DoAnythingElse
(
)
;
int
MakeAnInt
(
)
;
int
MOZ_MAY_CALL_AFTER_MUST_RETURN
SafeMakeInt
(
)
;
bool
Condition
(
)
;
template
<
typename
Func
>
class
ScopeExit
{
Func
exitFunction
;
bool
callOnDestruction
;
public
:
explicit
ScopeExit
(
Func
&
&
func
)
:
exitFunction
(
std
:
:
move
(
func
)
)
callOnDestruction
(
true
)
{
}
~
ScopeExit
(
)
{
if
(
callOnDestruction
)
{
exitFunction
(
)
;
}
}
void
release
(
)
{
callOnDestruction
=
false
;
}
}
;
template
<
typename
ExitFunction
>
ScopeExit
<
ExitFunction
>
MakeScopeExit
(
ExitFunction
&
&
func
)
{
return
ScopeExit
<
ExitFunction
>
(
std
:
:
move
(
func
)
)
;
}
class
Foo
{
public
:
__attribute__
(
(
annotate
(
"
moz_implicit
"
)
)
)
Foo
(
std
:
:
nullptr_t
)
;
Foo
(
)
;
}
;
void
a1
(
)
{
Throw
(
)
;
}
int
a2
(
)
{
Throw
(
)
;
return
MakeAnInt
(
)
;
}
int
a3
(
)
{
auto
atExit
=
MakeScopeExit
(
[
]
{
DoAnythingElse
(
)
;
}
)
;
Throw
(
)
;
return
5
;
}
int
a4
(
)
{
Throw
(
)
;
return
Condition
(
)
?
MakeAnInt
(
)
:
MakeAnInt
(
)
;
}
void
a5
(
)
{
Throw
(
)
;
DoAnythingElse
(
)
;
}
int
a6
(
)
{
Throw
(
)
;
DoAnythingElse
(
)
;
return
MakeAnInt
(
)
;
}
int
a7
(
)
{
Throw
(
)
;
DoAnythingElse
(
)
;
return
Condition
(
)
?
MakeAnInt
(
)
:
MakeAnInt
(
)
;
}
int
a8
(
)
{
Throw
(
)
;
return
SafeMakeInt
(
)
;
}
int
a9
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
SafeMakeInt
(
)
;
}
int
a10
(
)
{
auto
atExit
=
MakeScopeExit
(
[
]
{
DoAnythingElse
(
)
;
}
)
;
if
(
Condition
(
)
)
{
Throw
(
)
;
return
SafeMakeInt
(
)
;
}
atExit
.
release
(
)
;
DoAnythingElse
(
)
;
return
5
;
}
void
b1
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
}
int
b2
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
MakeAnInt
(
)
;
}
int
b3
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
5
;
}
int
b4
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
Condition
(
)
?
MakeAnInt
(
)
:
MakeAnInt
(
)
;
}
void
b5
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
DoAnythingElse
(
)
;
}
void
b6
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
DoAnythingElse
(
)
;
}
}
void
b7
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
return
;
}
DoAnythingElse
(
)
;
}
void
b8
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
DoAnythingElse
(
)
;
return
;
}
DoAnythingElse
(
)
;
}
void
b9
(
)
{
while
(
Condition
(
)
)
{
Throw
(
)
;
}
}
void
b10
(
)
{
while
(
Condition
(
)
)
{
Throw
(
)
;
return
;
}
}
void
b11
(
)
{
Throw
(
)
;
if
(
Condition
(
)
)
{
return
;
}
else
{
return
;
}
}
void
b12
(
)
{
switch
(
MakeAnInt
(
)
)
{
case
1
:
break
;
default
:
Throw
(
)
;
return
;
}
}
void
b13
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
;
}
Foo
b14
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
return
nullptr
;
}
return
nullptr
;
}
Foo
b15
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
nullptr
;
}
Foo
b16
(
)
{
if
(
Condition
(
)
)
{
Throw
(
)
;
}
return
Foo
(
)
;
}
