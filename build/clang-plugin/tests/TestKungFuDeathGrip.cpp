#
include
<
utility
>
#
define
MOZ_IMPLICIT
__attribute__
(
(
annotate
(
"
moz_implicit
"
)
)
)
template
<
typename
T
>
class
already_AddRefed
{
public
:
already_AddRefed
(
)
;
T
*
mPtr
;
}
;
template
<
typename
T
>
class
RefPtr
{
public
:
RefPtr
(
)
;
MOZ_IMPLICIT
RefPtr
(
T
*
aIn
)
;
MOZ_IMPLICIT
RefPtr
(
already_AddRefed
<
T
>
aIn
)
;
RefPtr
(
const
RefPtr
<
T
>
&
aOther
)
=
default
;
RefPtr
&
operator
=
(
const
RefPtr
<
T
>
&
)
=
default
;
RefPtr
(
RefPtr
<
T
>
&
&
)
;
RefPtr
&
operator
=
(
RefPtr
<
T
>
&
&
)
;
void
swap
(
RefPtr
<
T
>
&
aOther
)
;
~
RefPtr
(
)
;
T
*
mPtr
;
}
;
template
<
typename
T
>
class
nsCOMPtr
{
public
:
nsCOMPtr
(
)
;
MOZ_IMPLICIT
nsCOMPtr
(
T
*
aIn
)
;
MOZ_IMPLICIT
nsCOMPtr
(
already_AddRefed
<
T
>
aIn
)
;
~
nsCOMPtr
(
)
;
T
*
mPtr
;
}
;
class
Type
{
public
:
static
nsCOMPtr
<
Type
>
someStaticCOMPtr
;
void
f
(
nsCOMPtr
<
Type
>
ignoredArgument
Type
*
param
)
{
nsCOMPtr
<
Type
>
never_referenced
;
nsCOMPtr
<
Type
>
kfdg_t1
(
this
)
;
nsCOMPtr
<
Type
>
kfdg_t2
=
this
;
nsCOMPtr
<
Type
>
kfdg_t3
=
(
this
)
;
nsCOMPtr
<
Type
>
kfdg_m1
(
p
)
;
nsCOMPtr
<
Type
>
kfdg_m2
=
p
;
nsCOMPtr
<
Type
>
kfdg_m3
(
p
)
;
kfdg_m3
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
nsCOMPtr
<
Type
>
kfdg_m4
=
p
;
kfdg_m4
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
nsCOMPtr
<
Type
>
kfdg_a1
(
(
already_AddRefed
<
Type
>
(
)
)
)
;
nsCOMPtr
<
Type
>
kfdg_a2
=
already_AddRefed
<
Type
>
(
)
;
nsCOMPtr
<
Type
>
kfdg_p1
(
param
)
;
nsCOMPtr
<
Type
>
kfdg_p2
=
param
;
RefPtr
<
Type
>
never_referenced2
;
RefPtr
<
Type
>
kfdg_t4
(
this
)
;
RefPtr
<
Type
>
kfdg_t5
=
this
;
RefPtr
<
Type
>
kfdg_t6
=
(
this
)
;
RefPtr
<
Type
>
kfdg_m5
(
p
)
;
RefPtr
<
Type
>
kfdg_m6
=
p
;
RefPtr
<
Type
>
kfdg_m7
(
p
)
;
kfdg_m7
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
RefPtr
<
Type
>
kfdg_m8
=
p
;
kfdg_m8
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
RefPtr
<
Type
>
kfdg_a3
(
(
already_AddRefed
<
Type
>
(
)
)
)
;
RefPtr
<
Type
>
kfdg_a4
=
already_AddRefed
<
Type
>
(
)
;
RefPtr
<
Type
>
kfdg_p3
(
param
)
;
RefPtr
<
Type
>
kfdg_p4
=
param
;
}
Type
*
p
;
}
;
struct
Type2
{
void
f
(
)
{
mWeakRef
-
>
f
(
nullptr
nullptr
)
;
}
void
g
(
)
{
RefPtr
<
Type
>
kfdg
;
kfdg
.
swap
(
mStrongRef
)
;
f
(
)
;
}
void
h
(
)
{
RefPtr
<
Type
>
kfdg
=
std
:
:
move
(
mStrongRef
)
;
f
(
)
;
}
RefPtr
<
Type
>
mStrongRef
;
Type
*
mWeakRef
;
}
;
void
f
(
nsCOMPtr
<
Type
>
ignoredArgument
Type
*
param
)
{
nsCOMPtr
<
Type
>
never_referenced
;
Type
t
;
nsCOMPtr
<
Type
>
kfdg_m1
(
t
.
p
)
;
nsCOMPtr
<
Type
>
kfdg_m2
=
t
.
p
;
nsCOMPtr
<
Type
>
kfdg_m3
(
t
.
p
)
;
kfdg_m3
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
nsCOMPtr
<
Type
>
kfdg_m4
=
t
.
p
;
kfdg_m4
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
nsCOMPtr
<
Type
>
kfdg_a1
(
(
already_AddRefed
<
Type
>
(
)
)
)
;
nsCOMPtr
<
Type
>
kfdg_a2
=
already_AddRefed
<
Type
>
(
)
;
nsCOMPtr
<
Type
>
kfdg_p1
(
param
)
;
nsCOMPtr
<
Type
>
kfdg_p2
=
param
;
RefPtr
<
Type
>
never_referenced2
;
RefPtr
<
Type
>
kfdg_m5
(
t
.
p
)
;
RefPtr
<
Type
>
kfdg_m6
=
t
.
p
;
RefPtr
<
Type
>
kfdg_m7
(
t
.
p
)
;
kfdg_m7
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
RefPtr
<
Type
>
kfdg_m8
=
t
.
p
;
kfdg_m8
.
mPtr
-
>
f
(
nullptr
nullptr
)
;
RefPtr
<
Type
>
kfdg_a3
(
(
already_AddRefed
<
Type
>
(
)
)
)
;
RefPtr
<
Type
>
kfdg_a4
=
already_AddRefed
<
Type
>
(
)
;
RefPtr
<
Type
>
kfdg_p3
(
param
)
;
RefPtr
<
Type
>
kfdg_p4
=
param
;
}
nsCOMPtr
<
Type
>
Type
:
:
someStaticCOMPtr
(
nullptr
)
;
