#
define
MOZ_HEAP_CLASS
__attribute__
(
(
annotate
(
"
moz_heap_class
"
)
)
)
#
define
MOZ_IMPLICIT
__attribute__
(
(
annotate
(
"
moz_implicit
"
)
)
)
#
include
<
stddef
.
h
>
struct
MOZ_HEAP_CLASS
Heap
{
int
i
;
Heap
(
)
{
}
MOZ_IMPLICIT
Heap
(
int
a
)
{
}
Heap
(
int
a
int
b
)
{
}
void
*
operator
new
(
size_t
x
)
throw
(
)
{
return
0
;
}
void
*
operator
new
(
size_t
blah
char
*
buffer
)
{
return
buffer
;
}
}
;
template
<
class
T
>
struct
MOZ_HEAP_CLASS
TemplateClass
{
T
i
;
}
;
void
gobble
(
void
*
)
{
}
void
gobbleref
(
const
Heap
&
)
{
}
void
misuseHeapClass
(
int
len
)
{
Heap
invalid
;
Heap
alsoInvalid
[
2
]
;
static
Heap
invalidStatic
;
static
Heap
alsoInvalidStatic
[
2
]
;
gobble
(
&
invalid
)
;
gobble
(
&
invalidStatic
)
;
gobble
(
&
alsoInvalid
[
0
]
)
;
gobbleref
(
Heap
(
)
)
;
gobbleref
(
Heap
(
10
20
)
)
;
gobbleref
(
Heap
(
10
)
)
;
gobbleref
(
10
)
;
gobble
(
new
Heap
)
;
gobble
(
new
Heap
[
10
]
)
;
gobble
(
new
TemplateClass
<
int
>
)
;
gobble
(
len
<
=
5
?
&
invalid
:
new
Heap
)
;
char
buffer
[
sizeof
(
Heap
)
]
;
gobble
(
new
(
buffer
)
Heap
)
;
}
Heap
invalidStatic
;
struct
RandomClass
{
Heap
nonstaticMember
;
static
Heap
staticMember
;
}
;
struct
MOZ_HEAP_CLASS
RandomHeapClass
{
Heap
nonstaticMember
;
static
Heap
staticMember
;
}
;
struct
BadInherit
:
Heap
{
}
;
struct
MOZ_HEAP_CLASS
GoodInherit
:
Heap
{
}
;
void
useStuffWrongly
(
)
{
BadInherit
i
;
RandomClass
r
;
}
