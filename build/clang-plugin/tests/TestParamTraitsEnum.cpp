typedef
enum
{
BadFirst
BadSecond
BadThird
}
BadEnum
;
typedef
enum
{
NestedFirst
NestedSecond
}
NestedBadEnum
;
typedef
enum
{
GoodFirst
GoodSecond
GoodLast
}
GoodEnum
;
enum
RawEnum
{
RawFirst
RawLast
}
;
enum
class
ClassEnum
{
ClassFirst
ClassLast
}
;
template
<
class
P
>
struct
ParamTraits
;
template
<
typename
E
typename
EnumValidator
>
struct
EnumSerializer
{
typedef
E
paramType
;
}
;
template
<
typename
E
E
MinLegal
E
HighBound
>
class
ContiguousEnumValidator
{
}
;
template
<
typename
E
E
MinLegal
E
HighBound
>
struct
ContiguousEnumSerializer
:
EnumSerializer
<
E
ContiguousEnumValidator
<
E
MinLegal
HighBound
>
>
{
}
;
template
<
>
struct
ParamTraits
<
ClassEnum
>
{
typedef
ClassEnum
paramType
;
}
;
template
<
>
struct
ParamTraits
<
enum
RawEnum
>
{
typedef
enum
RawEnum
paramType
;
}
;
template
<
>
struct
ParamTraits
<
BadEnum
>
{
typedef
BadEnum
paramType
;
}
;
typedef
NestedBadEnum
NestedDefLevel1
;
typedef
NestedDefLevel1
NestedDefLevel2
;
template
<
>
struct
ParamTraits
<
NestedDefLevel2
>
{
typedef
NestedDefLevel2
paramType
;
}
;
typedef
int
IntTypedef
;
template
<
>
struct
ParamTraits
<
IntTypedef
>
{
typedef
IntTypedef
paramType
;
}
;
template
<
>
struct
ParamTraits
<
GoodEnum
>
:
public
ContiguousEnumSerializer
<
GoodEnum
GoodEnum
:
:
GoodFirst
GoodEnum
:
:
GoodLast
>
{
}
;
