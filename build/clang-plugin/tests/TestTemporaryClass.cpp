#
define
MOZ_TEMPORARY_CLASS
__attribute__
(
(
annotate
(
"
moz_temporary_class
"
)
)
)
#
define
MOZ_IMPLICIT
__attribute__
(
(
annotate
(
"
moz_implicit
"
)
)
)
#
include
<
stddef
.
h
>
struct
MOZ_TEMPORARY_CLASS
Temporary
{
int
i
;
Temporary
(
)
{
}
MOZ_IMPLICIT
Temporary
(
int
a
)
{
}
Temporary
(
int
a
int
b
)
{
}
void
*
operator
new
(
size_t
x
)
throw
(
)
{
return
0
;
}
void
*
operator
new
(
size_t
blah
char
*
buffer
)
{
return
buffer
;
}
}
;
template
<
class
T
>
struct
MOZ_TEMPORARY_CLASS
TemplateClass
{
T
i
;
}
;
void
gobble
(
void
*
)
{
}
void
gobbleref
(
const
Temporary
&
)
{
}
template
<
class
T
>
void
gobbleanyref
(
const
T
&
)
{
}
void
misuseNonTemporaryClass
(
int
len
)
{
Temporary
invalid
;
Temporary
alsoInvalid
[
2
]
;
static
Temporary
invalidStatic
;
static
Temporary
alsoInvalidStatic
[
2
]
;
gobble
(
&
invalid
)
;
gobble
(
&
invalidStatic
)
;
gobble
(
&
alsoInvalid
[
0
]
)
;
gobbleref
(
Temporary
(
)
)
;
gobbleref
(
Temporary
(
10
20
)
)
;
gobbleref
(
Temporary
(
10
)
)
;
gobbleref
(
10
)
;
gobbleanyref
(
TemplateClass
<
int
>
(
)
)
;
gobble
(
new
Temporary
)
;
gobble
(
new
Temporary
[
10
]
)
;
gobble
(
new
TemplateClass
<
int
>
)
;
gobble
(
len
<
=
5
?
&
invalid
:
new
Temporary
)
;
char
buffer
[
sizeof
(
Temporary
)
]
;
gobble
(
new
(
buffer
)
Temporary
)
;
}
void
defaultArg
(
const
Temporary
&
arg
=
Temporary
(
)
)
{
}
Temporary
invalidStatic
;
struct
RandomClass
{
Temporary
nonstaticMember
;
static
Temporary
staticMember
;
}
;
struct
BadInherit
:
Temporary
{
}
;
void
useStuffWrongly
(
)
{
gobbleanyref
(
BadInherit
(
)
)
;
gobbleanyref
(
RandomClass
(
)
)
;
}
