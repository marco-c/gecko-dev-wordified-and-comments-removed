#
include
<
functional
>
#
include
<
mozilla
/
RefPtr
.
h
>
#
include
<
nsCOMPtr
.
h
>
struct
RefCountedBase
{
void
AddRef
(
)
;
void
Release
(
)
;
}
;
struct
Bar
;
struct
Foo
:
RefCountedBase
{
void
foo
(
)
;
}
;
struct
Bar
:
RefCountedBase
{
Bar
(
)
{
RefPtr
<
Bar
>
self
=
this
;
auto
self2
=
RefPtr
(
this
)
;
auto
self3
=
RefPtr
{
this
}
;
RefPtr
<
Bar
>
self4
(
this
)
;
RefPtr
<
Bar
>
self5
{
this
}
;
[
self
=
RefPtr
{
this
}
]
{
}
(
)
;
refptr
(
RefPtr
{
this
}
)
;
refptr
(
this
)
;
}
explicit
Bar
(
float
f
)
{
RefPtr
<
Foo
>
foo
=
this
-
>
mFoo
;
foo
-
>
foo
(
)
;
auto
foo2
=
RefPtr
(
this
-
>
mFoo
)
;
foo2
-
>
foo
(
)
;
auto
foo3
=
RefPtr
{
this
-
>
mFoo
}
;
foo3
-
>
foo
(
)
;
}
explicit
Bar
(
short
i
)
;
explicit
Bar
(
int
i
)
:
mBar
(
this
)
{
}
explicit
Bar
(
int
i
int
i2
)
:
mBar
(
RefPtr
(
this
)
)
{
}
void
Init
(
)
{
RefPtr
<
Bar
>
self
=
this
;
auto
self2
=
RefPtr
(
this
)
;
auto
self3
=
RefPtr
{
this
}
;
}
void
refptr
(
const
RefPtr
<
Bar
>
&
aBar
)
{
}
RefPtr
<
Foo
>
mFoo
;
RefPtr
<
Bar
>
mBar
;
}
;
Bar
:
:
Bar
(
short
i
)
{
RefPtr
<
Bar
>
self
=
this
;
auto
self2
=
RefPtr
(
this
)
;
auto
self3
=
RefPtr
{
this
}
;
}
class
nsIBaz
:
public
nsISupports
{
public
:
nsIBaz
(
)
{
nsCOMPtr
<
nsISupports
>
baz
=
this
;
}
}
;
