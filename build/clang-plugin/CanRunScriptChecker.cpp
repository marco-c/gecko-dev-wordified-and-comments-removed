#
include
"
CanRunScriptChecker
.
h
"
#
include
"
CustomMatchers
.
h
"
void
CanRunScriptChecker
:
:
registerMatchers
(
MatchFinder
*
AstMatcher
)
{
auto
Refcounted
=
qualType
(
hasDeclaration
(
cxxRecordDecl
(
isRefCounted
(
)
)
)
)
;
auto
StackSmartPtr
=
ignoreTrivials
(
declRefExpr
(
to
(
varDecl
(
hasAutomaticStorageDuration
(
)
)
)
hasType
(
isSmartPtrToRefCounted
(
)
)
)
)
;
auto
ConstMemberOfThisSmartPtr
=
memberExpr
(
hasType
(
isSmartPtrToRefCounted
(
)
)
hasType
(
isConstQualified
(
)
)
hasObjectExpression
(
cxxThisExpr
(
)
)
)
;
auto
KnownLiveSmartPtr
=
anyOf
(
StackSmartPtr
ConstMemberOfThisSmartPtr
ignoreTrivials
(
cxxConstructExpr
(
hasType
(
isSmartPtrToRefCounted
(
)
)
)
)
)
;
auto
MozKnownLiveCall
=
ignoreTrivials
(
callExpr
(
callee
(
functionDecl
(
hasName
(
"
MOZ_KnownLive
"
)
)
)
)
)
;
auto
LocalKnownLive
=
anyOf
(
KnownLiveSmartPtr
MozKnownLiveCall
)
;
auto
InvalidArg
=
ignoreTrivialsConditional
(
anyOf
(
hasType
(
Refcounted
)
hasType
(
pointsTo
(
Refcounted
)
)
hasType
(
references
(
Refcounted
)
)
hasType
(
isSmartPtrToRefCounted
(
)
)
)
expr
(
unless
(
cxxThisExpr
(
)
)
unless
(
KnownLiveSmartPtr
)
unless
(
cxxMemberCallExpr
(
on
(
KnownLiveSmartPtr
)
)
)
unless
(
cxxOperatorCallExpr
(
anyOf
(
hasOverloadedOperatorName
(
"
*
"
)
hasOverloadedOperatorName
(
"
-
>
"
)
)
hasAnyArgument
(
LocalKnownLive
)
argumentCountIs
(
1
)
)
)
unless
(
declRefExpr
(
to
(
parmVarDecl
(
)
)
)
)
unless
(
declRefExpr
(
to
(
varDecl
(
isConstexpr
(
)
)
)
)
)
unless
(
cxxDefaultArgExpr
(
isNullDefaultArg
(
)
)
)
unless
(
cxxNullPtrLiteralExpr
(
)
)
unless
(
unaryOperator
(
unaryDereferenceOperator
(
)
hasUnaryOperand
(
anyOf
(
ignoreTrivials
(
declRefExpr
(
to
(
parmVarDecl
(
)
)
)
)
cxxThisExpr
(
)
ignoreTrivials
(
declRefExpr
(
to
(
varDecl
(
isConstexpr
(
)
)
)
)
)
)
)
)
)
unless
(
anyOf
(
MozKnownLiveCall
cxxMemberCallExpr
(
on
(
allOf
(
hasType
(
isSmartPtrToRefCounted
(
)
)
MozKnownLiveCall
)
)
)
)
)
expr
(
)
.
bind
(
"
invalidArg
"
)
)
)
;
auto
OptionalInvalidExplicitArg
=
anyOf
(
hasAnyArgument
(
InvalidArg
)
anything
(
)
)
;
AstMatcher
-
>
addMatcher
(
expr
(
anyOf
(
cxxMemberCallExpr
(
OptionalInvalidExplicitArg
anyOf
(
on
(
InvalidArg
)
anything
(
)
)
expr
(
)
.
bind
(
"
callExpr
"
)
)
callExpr
(
OptionalInvalidExplicitArg
expr
(
)
.
bind
(
"
callExpr
"
)
)
cxxConstructExpr
(
OptionalInvalidExplicitArg
expr
(
)
.
bind
(
"
constructExpr
"
)
)
)
anyOf
(
forFunction
(
functionDecl
(
)
.
bind
(
"
nonCanRunScriptParentFunction
"
)
)
anything
(
)
)
)
this
)
;
}
void
CanRunScriptChecker
:
:
onStartOfTranslationUnit
(
)
{
IsFuncSetBuilt
=
false
;
CanRunScriptFuncs
.
clear
(
)
;
}
namespace
{
class
FuncSetCallback
:
public
MatchFinder
:
:
MatchCallback
{
public
:
FuncSetCallback
(
CanRunScriptChecker
&
Checker
std
:
:
unordered_set
<
const
FunctionDecl
*
>
&
FuncSet
)
:
CanRunScriptFuncs
(
FuncSet
)
Checker
(
Checker
)
{
}
void
run
(
const
MatchFinder
:
:
MatchResult
&
Result
)
override
;
private
:
void
checkOverriddenMethods
(
const
CXXMethodDecl
*
Method
)
;
std
:
:
unordered_set
<
const
FunctionDecl
*
>
&
CanRunScriptFuncs
;
CanRunScriptChecker
&
Checker
;
}
;
void
FuncSetCallback
:
:
run
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
const
FunctionDecl
*
Func
;
if
(
auto
*
Lambda
=
Result
.
Nodes
.
getNodeAs
<
LambdaExpr
>
(
"
lambda
"
)
)
{
Func
=
Lambda
-
>
getCallOperator
(
)
;
if
(
!
Func
|
|
!
hasCustomAttribute
<
moz_can_run_script
>
(
Func
)
)
return
;
}
else
{
Func
=
Result
.
Nodes
.
getNodeAs
<
FunctionDecl
>
(
"
canRunScriptFunction
"
)
;
}
CanRunScriptFuncs
.
insert
(
Func
)
;
if
(
auto
*
Method
=
dyn_cast
<
CXXMethodDecl
>
(
Func
)
)
{
checkOverriddenMethods
(
Method
)
;
}
}
void
FuncSetCallback
:
:
checkOverriddenMethods
(
const
CXXMethodDecl
*
Method
)
{
for
(
auto
OverriddenMethod
:
Method
-
>
overridden_methods
(
)
)
{
if
(
!
hasCustomAttribute
<
moz_can_run_script
>
(
OverriddenMethod
)
)
{
const
char
*
ErrorNonCanRunScriptOverridden
=
"
functions
marked
as
MOZ_CAN_RUN_SCRIPT
cannot
override
functions
"
"
that
are
not
marked
MOZ_CAN_RUN_SCRIPT
"
;
const
char
*
NoteNonCanRunScriptOverridden
=
"
overridden
function
declared
here
"
;
Checker
.
diag
(
Method
-
>
getLocation
(
)
ErrorNonCanRunScriptOverridden
DiagnosticIDs
:
:
Error
)
;
Checker
.
diag
(
OverriddenMethod
-
>
getLocation
(
)
NoteNonCanRunScriptOverridden
DiagnosticIDs
:
:
Note
)
;
}
}
}
}
void
CanRunScriptChecker
:
:
buildFuncSet
(
ASTContext
*
Context
)
{
MatchFinder
Finder
;
FuncSetCallback
Callback
(
*
this
CanRunScriptFuncs
)
;
Finder
.
addMatcher
(
functionDecl
(
hasCanRunScriptAnnotation
(
)
)
.
bind
(
"
canRunScriptFunction
"
)
&
Callback
)
;
Finder
.
addMatcher
(
lambdaExpr
(
)
.
bind
(
"
lambda
"
)
&
Callback
)
;
Finder
.
matchAST
(
*
Context
)
;
}
void
CanRunScriptChecker
:
:
check
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
if
(
!
IsFuncSetBuilt
)
{
buildFuncSet
(
Result
.
Context
)
;
IsFuncSetBuilt
=
true
;
}
const
char
*
ErrorInvalidArg
=
"
arguments
must
all
be
strong
refs
or
parent
parameters
when
calling
a
"
"
function
marked
as
MOZ_CAN_RUN_SCRIPT
(
including
the
implicit
object
"
"
argument
)
"
;
const
char
*
ErrorNonCanRunScriptParent
=
"
functions
marked
as
MOZ_CAN_RUN_SCRIPT
can
only
be
called
from
"
"
functions
also
marked
as
MOZ_CAN_RUN_SCRIPT
"
;
const
char
*
NoteNonCanRunScriptParent
=
"
caller
function
declared
here
"
;
const
Expr
*
InvalidArg
=
Result
.
Nodes
.
getNodeAs
<
Expr
>
(
"
invalidArg
"
)
;
const
CallExpr
*
Call
=
Result
.
Nodes
.
getNodeAs
<
CallExpr
>
(
"
callExpr
"
)
;
if
(
Call
&
&
(
!
Call
-
>
getDirectCallee
(
)
|
|
!
CanRunScriptFuncs
.
count
(
Call
-
>
getDirectCallee
(
)
)
)
)
{
Call
=
nullptr
;
}
const
CXXConstructExpr
*
Construct
=
Result
.
Nodes
.
getNodeAs
<
CXXConstructExpr
>
(
"
constructExpr
"
)
;
if
(
Construct
&
&
(
!
Construct
-
>
getConstructor
(
)
|
|
!
CanRunScriptFuncs
.
count
(
Construct
-
>
getConstructor
(
)
)
)
)
{
Construct
=
nullptr
;
}
const
FunctionDecl
*
ParentFunction
=
Result
.
Nodes
.
getNodeAs
<
FunctionDecl
>
(
"
nonCanRunScriptParentFunction
"
)
;
if
(
ParentFunction
&
&
(
CanRunScriptFuncs
.
count
(
ParentFunction
)
|
|
hasCustomAttribute
<
moz_can_run_script_boundary
>
(
ParentFunction
)
)
)
{
ParentFunction
=
nullptr
;
}
SourceRange
CallRange
;
if
(
Call
)
{
CallRange
=
Call
-
>
getSourceRange
(
)
;
}
else
if
(
Construct
)
{
CallRange
=
Construct
-
>
getSourceRange
(
)
;
}
else
{
return
;
}
if
(
InvalidArg
)
{
diag
(
InvalidArg
-
>
getExprLoc
(
)
ErrorInvalidArg
DiagnosticIDs
:
:
Error
)
<
<
CallRange
;
}
if
(
ParentFunction
)
{
assert
(
!
hasCustomAttribute
<
moz_can_run_script
>
(
ParentFunction
)
&
&
"
Matcher
missed
something
"
)
;
diag
(
CallRange
.
getBegin
(
)
ErrorNonCanRunScriptParent
DiagnosticIDs
:
:
Error
)
<
<
CallRange
;
diag
(
ParentFunction
-
>
getCanonicalDecl
(
)
-
>
getLocation
(
)
NoteNonCanRunScriptParent
DiagnosticIDs
:
:
Note
)
;
}
}
