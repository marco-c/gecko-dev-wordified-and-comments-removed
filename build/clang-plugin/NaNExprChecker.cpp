#
include
"
NaNExprChecker
.
h
"
#
include
"
CustomMatchers
.
h
"
void
NaNExprChecker
:
:
registerMatcher
(
MatchFinder
&
AstMatcher
)
{
AstMatcher
.
addMatcher
(
binaryOperator
(
allOf
(
binaryEqualityOperator
(
)
hasLHS
(
hasIgnoringParenImpCasts
(
declRefExpr
(
hasType
(
qualType
(
(
isFloat
(
)
)
)
)
)
.
bind
(
"
lhs
"
)
)
)
hasRHS
(
hasIgnoringParenImpCasts
(
declRefExpr
(
hasType
(
qualType
(
(
isFloat
(
)
)
)
)
)
.
bind
(
"
rhs
"
)
)
)
unless
(
anyOf
(
isInSystemHeader
(
)
isInWhitelistForNaNExpr
(
)
)
)
)
)
.
bind
(
"
node
"
)
this
)
;
}
void
NaNExprChecker
:
:
run
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
if
(
!
Result
.
Context
-
>
getLangOpts
(
)
.
CPlusPlus
)
{
return
;
}
DiagnosticsEngine
&
Diag
=
Result
.
Context
-
>
getDiagnostics
(
)
;
unsigned
ErrorID
=
Diag
.
getDiagnosticIDs
(
)
-
>
getCustomDiagID
(
DiagnosticIDs
:
:
Error
"
comparing
a
floating
point
value
to
itself
for
"
"
NaN
checking
can
lead
to
incorrect
results
"
)
;
unsigned
NoteID
=
Diag
.
getDiagnosticIDs
(
)
-
>
getCustomDiagID
(
DiagnosticIDs
:
:
Note
"
consider
using
mozilla
:
:
IsNaN
instead
"
)
;
const
BinaryOperator
*
Expression
=
Result
.
Nodes
.
getNodeAs
<
BinaryOperator
>
(
"
node
"
)
;
const
DeclRefExpr
*
LHS
=
Result
.
Nodes
.
getNodeAs
<
DeclRefExpr
>
(
"
lhs
"
)
;
const
DeclRefExpr
*
RHS
=
Result
.
Nodes
.
getNodeAs
<
DeclRefExpr
>
(
"
rhs
"
)
;
const
ImplicitCastExpr
*
LHSExpr
=
dyn_cast
<
ImplicitCastExpr
>
(
Expression
-
>
getLHS
(
)
)
;
const
ImplicitCastExpr
*
RHSExpr
=
dyn_cast
<
ImplicitCastExpr
>
(
Expression
-
>
getRHS
(
)
)
;
if
(
LHS
-
>
getFoundDecl
(
)
=
=
RHS
-
>
getFoundDecl
(
)
&
&
LHSExpr
&
&
RHSExpr
&
&
std
:
:
distance
(
LHSExpr
-
>
child_begin
(
)
LHSExpr
-
>
child_end
(
)
)
=
=
1
&
&
std
:
:
distance
(
RHSExpr
-
>
child_begin
(
)
RHSExpr
-
>
child_end
(
)
)
=
=
1
&
&
*
LHSExpr
-
>
child_begin
(
)
=
=
LHS
&
&
*
RHSExpr
-
>
child_begin
(
)
=
=
RHS
)
{
Diag
.
Report
(
Expression
-
>
getLocStart
(
)
ErrorID
)
;
Diag
.
Report
(
Expression
-
>
getLocStart
(
)
NoteID
)
;
}
}
