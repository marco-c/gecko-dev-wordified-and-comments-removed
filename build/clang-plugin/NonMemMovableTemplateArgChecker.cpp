#
include
"
NonMemMovableTemplateArgChecker
.
h
"
#
include
"
CustomMatchers
.
h
"
void
NonMemMovableTemplateArgChecker
:
:
registerMatcher
(
MatchFinder
&
AstMatcher
)
{
AstMatcher
.
addMatcher
(
classTemplateSpecializationDecl
(
allOf
(
needsMemMovableTemplateArg
(
)
hasAnyTemplateArgument
(
refersToType
(
isNonMemMovable
(
)
)
)
)
)
.
bind
(
"
specialization
"
)
this
)
;
}
void
NonMemMovableTemplateArgChecker
:
:
run
(
const
MatchFinder
:
:
MatchResult
&
Result
)
{
DiagnosticsEngine
&
Diag
=
Result
.
Context
-
>
getDiagnostics
(
)
;
unsigned
ErrorID
=
Diag
.
getDiagnosticIDs
(
)
-
>
getCustomDiagID
(
DiagnosticIDs
:
:
Error
"
Cannot
instantiate
%
0
with
non
-
memmovable
template
argument
%
1
"
)
;
unsigned
Note1ID
=
Diag
.
getDiagnosticIDs
(
)
-
>
getCustomDiagID
(
DiagnosticIDs
:
:
Note
"
instantiation
of
%
0
requested
here
"
)
;
const
ClassTemplateSpecializationDecl
*
Specialization
=
Result
.
Nodes
.
getNodeAs
<
ClassTemplateSpecializationDecl
>
(
"
specialization
"
)
;
SourceLocation
RequestLoc
=
Specialization
-
>
getPointOfInstantiation
(
)
;
const
TemplateArgumentList
&
Args
=
Specialization
-
>
getTemplateInstantiationArgs
(
)
;
for
(
unsigned
i
=
0
;
i
<
Args
.
size
(
)
;
+
+
i
)
{
QualType
ArgType
=
Args
[
i
]
.
getAsType
(
)
;
if
(
NonMemMovable
.
hasEffectiveAnnotation
(
ArgType
)
)
{
Diag
.
Report
(
Specialization
-
>
getLocation
(
)
ErrorID
)
<
<
Specialization
<
<
ArgType
;
Diag
.
Report
(
RequestLoc
Note1ID
)
<
<
Specialization
;
NonMemMovable
.
dumpAnnotationReason
(
Diag
ArgType
RequestLoc
)
;
}
}
}
