#
include
"
Hal
.
h
"
#
include
"
HalLog
.
h
"
#
ifdef
USE_DBUS_GLIB
#
include
<
dbus
/
dbus
-
glib
.
h
>
#
include
<
dbus
/
dbus
-
glib
-
lowlevel
.
h
>
#
endif
#
include
<
mozilla
/
Attributes
.
h
>
#
include
<
mozilla
/
dom
/
battery
/
Constants
.
h
>
#
include
"
mozilla
/
GRefPtr
.
h
"
#
include
"
mozilla
/
GUniquePtr
.
h
"
#
include
<
cmath
>
using
namespace
mozilla
:
:
dom
:
:
battery
;
namespace
mozilla
:
:
hal_impl
{
class
UPowerClient
{
public
:
static
UPowerClient
*
GetInstance
(
)
;
void
BeginListening
(
)
;
void
StopListening
(
)
;
double
GetLevel
(
)
;
bool
IsCharging
(
)
;
double
GetRemainingTime
(
)
;
~
UPowerClient
(
)
;
private
:
UPowerClient
(
)
;
enum
States
{
eState_Unknown
=
0
eState_Charging
eState_Discharging
eState_Empty
eState_FullyCharged
eState_PendingCharge
eState_PendingDischarge
}
;
#
ifdef
USE_DBUS_GLIB
void
UpdateTrackedDeviceSync
(
)
;
already_AddRefed
<
GHashTable
>
GetDevicePropertiesSync
(
DBusGProxy
*
aProxy
)
;
void
GetDevicePropertiesAsync
(
DBusGProxy
*
aProxy
)
;
static
void
GetDevicePropertiesCallback
(
DBusGProxy
*
aProxy
DBusGProxyCall
*
aCall
void
*
aData
)
;
void
UpdateSavedInfo
(
GHashTable
*
aHashTable
)
;
static
void
DeviceChanged
(
DBusGProxy
*
aProxy
const
gchar
*
aObjectPath
UPowerClient
*
aListener
)
;
static
void
PropertiesChanged
(
DBusGProxy
*
aProxy
const
gchar
*
GHashTable
*
char
*
*
UPowerClient
*
aListener
)
;
static
DBusHandlerResult
ConnectionSignalFilter
(
DBusConnection
*
aConnection
DBusMessage
*
aMessage
void
*
aData
)
;
RefPtr
<
DBusGConnection
>
mDBusConnection
;
RefPtr
<
DBusGProxy
>
mUPowerProxy
;
GUniquePtr
<
gchar
>
mTrackedDevice
;
RefPtr
<
DBusGProxy
>
mTrackedDeviceProxy
;
#
endif
double
mLevel
;
bool
mCharging
;
double
mRemainingTime
;
static
UPowerClient
*
sInstance
;
static
const
guint
sDeviceTypeBattery
=
2
;
static
const
guint64
kUPowerUnknownRemainingTime
=
0
;
}
;
void
EnableBatteryNotifications
(
)
{
UPowerClient
:
:
GetInstance
(
)
-
>
BeginListening
(
)
;
}
void
DisableBatteryNotifications
(
)
{
UPowerClient
:
:
GetInstance
(
)
-
>
StopListening
(
)
;
}
void
GetCurrentBatteryInformation
(
hal
:
:
BatteryInformation
*
aBatteryInfo
)
{
UPowerClient
*
upowerClient
=
UPowerClient
:
:
GetInstance
(
)
;
aBatteryInfo
-
>
level
(
)
=
upowerClient
-
>
GetLevel
(
)
;
aBatteryInfo
-
>
charging
(
)
=
upowerClient
-
>
IsCharging
(
)
;
aBatteryInfo
-
>
remainingTime
(
)
=
upowerClient
-
>
GetRemainingTime
(
)
;
}
UPowerClient
*
UPowerClient
:
:
sInstance
=
nullptr
;
UPowerClient
*
UPowerClient
:
:
GetInstance
(
)
{
if
(
!
sInstance
)
{
sInstance
=
new
UPowerClient
(
)
;
}
return
sInstance
;
}
UPowerClient
:
:
UPowerClient
(
)
:
mLevel
(
kDefaultLevel
)
mCharging
(
kDefaultCharging
)
mRemainingTime
(
kDefaultRemainingTime
)
{
}
UPowerClient
:
:
~
UPowerClient
(
)
{
#
ifdef
USE_DBUS_GLIB
NS_ASSERTION
(
!
mDBusConnection
&
&
!
mUPowerProxy
&
&
!
mTrackedDevice
&
&
!
mTrackedDeviceProxy
"
The
observers
have
not
been
correctly
removed
!
"
"
(
StopListening
should
have
been
called
)
"
)
;
#
endif
}
void
UPowerClient
:
:
BeginListening
(
)
{
#
ifdef
USE_DBUS_GLIB
GUniquePtr
<
GError
>
error
;
mDBusConnection
=
dont_AddRef
(
dbus_g_bus_get
(
DBUS_BUS_SYSTEM
getter_Transfers
(
error
)
)
)
;
if
(
!
mDBusConnection
)
{
HAL_LOG
(
"
Failed
to
open
connection
to
bus
:
%
s
\
n
"
error
-
>
message
)
;
return
;
}
DBusConnection
*
dbusConnection
=
dbus_g_connection_get_connection
(
mDBusConnection
)
;
dbus_connection_set_exit_on_disconnect
(
dbusConnection
false
)
;
dbus_connection_add_filter
(
dbusConnection
ConnectionSignalFilter
this
nullptr
)
;
mUPowerProxy
=
dont_AddRef
(
dbus_g_proxy_new_for_name
(
mDBusConnection
"
org
.
freedesktop
.
UPower
"
"
/
org
/
freedesktop
/
UPower
"
"
org
.
freedesktop
.
UPower
"
)
)
;
UpdateTrackedDeviceSync
(
)
;
dbus_g_proxy_add_signal
(
mUPowerProxy
"
DeviceChanged
"
G_TYPE_STRING
G_TYPE_INVALID
)
;
dbus_g_proxy_connect_signal
(
mUPowerProxy
"
DeviceChanged
"
G_CALLBACK
(
DeviceChanged
)
this
nullptr
)
;
#
endif
}
void
UPowerClient
:
:
StopListening
(
)
{
#
ifdef
USE_DBUS_GLIB
if
(
!
mDBusConnection
)
{
return
;
}
dbus_connection_remove_filter
(
dbus_g_connection_get_connection
(
mDBusConnection
)
ConnectionSignalFilter
this
)
;
dbus_g_proxy_disconnect_signal
(
mUPowerProxy
"
DeviceChanged
"
G_CALLBACK
(
DeviceChanged
)
this
)
;
mTrackedDevice
=
nullptr
;
if
(
mTrackedDeviceProxy
)
{
dbus_g_proxy_disconnect_signal
(
mTrackedDeviceProxy
"
PropertiesChanged
"
G_CALLBACK
(
PropertiesChanged
)
this
)
;
mTrackedDeviceProxy
=
nullptr
;
}
mUPowerProxy
=
nullptr
;
mDBusConnection
=
nullptr
;
mLevel
=
kDefaultLevel
;
mCharging
=
kDefaultCharging
;
mRemainingTime
=
kDefaultRemainingTime
;
#
endif
}
#
ifdef
USE_DBUS_GLIB
void
UPowerClient
:
:
UpdateTrackedDeviceSync
(
)
{
GType
typeGPtrArray
=
dbus_g_type_get_collection
(
"
GPtrArray
"
DBUS_TYPE_G_OBJECT_PATH
)
;
GPtrArray
*
devices
=
nullptr
;
mTrackedDevice
=
nullptr
;
if
(
mTrackedDeviceProxy
)
{
dbus_g_proxy_disconnect_signal
(
mTrackedDeviceProxy
"
PropertiesChanged
"
G_CALLBACK
(
PropertiesChanged
)
this
)
;
mTrackedDeviceProxy
=
nullptr
;
}
GUniquePtr
<
GError
>
error
;
if
(
!
dbus_g_proxy_call
(
mUPowerProxy
"
EnumerateDevices
"
getter_Transfers
(
error
)
G_TYPE_INVALID
typeGPtrArray
&
devices
G_TYPE_INVALID
)
)
{
HAL_LOG
(
"
Error
:
%
s
\
n
"
error
-
>
message
)
;
return
;
}
for
(
guint
i
=
0
;
i
<
devices
-
>
len
;
+
+
i
)
{
GUniquePtr
<
gchar
>
devicePath
(
static_cast
<
gchar
*
>
(
g_ptr_array_index
(
devices
i
)
)
)
;
if
(
mTrackedDevice
)
{
continue
;
}
RefPtr
<
DBusGProxy
>
proxy
=
dont_AddRef
(
dbus_g_proxy_new_from_proxy
(
mUPowerProxy
"
org
.
freedesktop
.
DBus
.
Properties
"
devicePath
.
get
(
)
)
)
;
RefPtr
<
GHashTable
>
hashTable
(
GetDevicePropertiesSync
(
proxy
)
)
;
if
(
g_value_get_uint
(
static_cast
<
const
GValue
*
>
(
g_hash_table_lookup
(
hashTable
"
Type
"
)
)
)
=
=
sDeviceTypeBattery
)
{
UpdateSavedInfo
(
hashTable
)
;
mTrackedDevice
=
std
:
:
move
(
devicePath
)
;
mTrackedDeviceProxy
=
std
:
:
move
(
proxy
)
;
}
}
if
(
mTrackedDeviceProxy
)
{
dbus_g_proxy_add_signal
(
mTrackedDeviceProxy
"
PropertiesChanged
"
G_TYPE_STRING
dbus_g_type_get_map
(
"
GHashTable
"
G_TYPE_STRING
G_TYPE_VALUE
)
G_TYPE_STRV
G_TYPE_INVALID
)
;
dbus_g_proxy_connect_signal
(
mTrackedDeviceProxy
"
PropertiesChanged
"
G_CALLBACK
(
PropertiesChanged
)
this
nullptr
)
;
}
g_ptr_array_free
(
devices
true
)
;
}
void
UPowerClient
:
:
DeviceChanged
(
DBusGProxy
*
aProxy
const
gchar
*
aObjectPath
UPowerClient
*
aListener
)
{
if
(
!
aListener
-
>
mTrackedDevice
)
{
return
;
}
#
if
GLIB_MAJOR_VERSION
>
=
2
&
&
GLIB_MINOR_VERSION
>
=
16
if
(
g_strcmp0
(
aObjectPath
aListener
-
>
mTrackedDevice
.
get
(
)
)
)
{
#
else
if
(
g_ascii_strcasecmp
(
aObjectPath
aListener
-
>
mTrackedDevice
.
get
(
)
)
)
{
#
endif
return
;
}
aListener
-
>
GetDevicePropertiesAsync
(
aListener
-
>
mTrackedDeviceProxy
)
;
}
void
UPowerClient
:
:
PropertiesChanged
(
DBusGProxy
*
aProxy
const
gchar
*
GHashTable
*
char
*
*
UPowerClient
*
aListener
)
{
aListener
-
>
GetDevicePropertiesAsync
(
aListener
-
>
mTrackedDeviceProxy
)
;
}
DBusHandlerResult
UPowerClient
:
:
ConnectionSignalFilter
(
DBusConnection
*
aConnection
DBusMessage
*
aMessage
void
*
aData
)
{
if
(
dbus_message_is_signal
(
aMessage
DBUS_INTERFACE_LOCAL
"
Disconnected
"
)
)
{
static_cast
<
UPowerClient
*
>
(
aData
)
-
>
StopListening
(
)
;
}
return
DBUS_HANDLER_RESULT_NOT_YET_HANDLED
;
}
already_AddRefed
<
GHashTable
>
UPowerClient
:
:
GetDevicePropertiesSync
(
DBusGProxy
*
aProxy
)
{
GUniquePtr
<
GError
>
error
;
RefPtr
<
GHashTable
>
hashTable
;
GType
typeGHashTable
=
dbus_g_type_get_map
(
"
GHashTable
"
G_TYPE_STRING
G_TYPE_VALUE
)
;
if
(
!
dbus_g_proxy_call
(
aProxy
"
GetAll
"
getter_Transfers
(
error
)
G_TYPE_STRING
"
org
.
freedesktop
.
UPower
.
Device
"
G_TYPE_INVALID
typeGHashTable
hashTable
.
StartAssignment
(
)
G_TYPE_INVALID
)
)
{
HAL_LOG
(
"
Error
:
%
s
\
n
"
error
-
>
message
)
;
return
nullptr
;
}
return
hashTable
.
forget
(
)
;
}
void
UPowerClient
:
:
GetDevicePropertiesCallback
(
DBusGProxy
*
aProxy
DBusGProxyCall
*
aCall
void
*
aData
)
{
GUniquePtr
<
GError
>
error
;
RefPtr
<
GHashTable
>
hashTable
;
GType
typeGHashTable
=
dbus_g_type_get_map
(
"
GHashTable
"
G_TYPE_STRING
G_TYPE_VALUE
)
;
if
(
!
dbus_g_proxy_end_call
(
aProxy
aCall
getter_Transfers
(
error
)
typeGHashTable
hashTable
.
StartAssignment
(
)
G_TYPE_INVALID
)
)
{
HAL_LOG
(
"
Error
:
%
s
\
n
"
error
-
>
message
)
;
}
else
{
sInstance
-
>
UpdateSavedInfo
(
hashTable
)
;
hal
:
:
NotifyBatteryChange
(
hal
:
:
BatteryInformation
(
sInstance
-
>
mLevel
sInstance
-
>
mCharging
sInstance
-
>
mRemainingTime
)
)
;
g_hash_table_unref
(
hashTable
)
;
}
}
void
UPowerClient
:
:
GetDevicePropertiesAsync
(
DBusGProxy
*
aProxy
)
{
dbus_g_proxy_begin_call
(
aProxy
"
GetAll
"
GetDevicePropertiesCallback
nullptr
nullptr
G_TYPE_STRING
"
org
.
freedesktop
.
UPower
.
Device
"
G_TYPE_INVALID
)
;
}
void
UPowerClient
:
:
UpdateSavedInfo
(
GHashTable
*
aHashTable
)
{
bool
isFull
=
false
;
switch
(
g_value_get_uint
(
static_cast
<
const
GValue
*
>
(
g_hash_table_lookup
(
aHashTable
"
State
"
)
)
)
)
{
case
eState_Unknown
:
mCharging
=
kDefaultCharging
;
break
;
case
eState_FullyCharged
:
isFull
=
true
;
[
[
fallthrough
]
]
;
case
eState_Charging
:
case
eState_PendingCharge
:
mCharging
=
true
;
break
;
case
eState_Discharging
:
case
eState_Empty
:
case
eState_PendingDischarge
:
mCharging
=
false
;
break
;
}
if
(
isFull
)
{
mLevel
=
1
.
0
;
}
else
{
mLevel
=
round
(
g_value_get_double
(
static_cast
<
const
GValue
*
>
(
g_hash_table_lookup
(
aHashTable
"
Percentage
"
)
)
)
)
*
0
.
01
;
}
if
(
isFull
)
{
mRemainingTime
=
0
;
}
else
{
mRemainingTime
=
mCharging
?
g_value_get_int64
(
static_cast
<
const
GValue
*
>
(
g_hash_table_lookup
(
aHashTable
"
TimeToFull
"
)
)
)
:
g_value_get_int64
(
static_cast
<
const
GValue
*
>
(
g_hash_table_lookup
(
aHashTable
"
TimeToEmpty
"
)
)
)
;
if
(
mRemainingTime
=
=
kUPowerUnknownRemainingTime
)
{
mRemainingTime
=
kUnknownRemainingTime
;
}
}
}
#
endif
double
UPowerClient
:
:
GetLevel
(
)
{
return
mLevel
;
}
bool
UPowerClient
:
:
IsCharging
(
)
{
return
mCharging
;
}
double
UPowerClient
:
:
GetRemainingTime
(
)
{
return
mRemainingTime
;
}
}
