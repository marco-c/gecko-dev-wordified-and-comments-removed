#
include
"
Hal
.
h
"
#
include
"
GeneratedJNIWrappers
.
h
"
static
mozilla
:
:
java
:
:
ServiceAllocator
:
:
PriorityLevel
:
:
LocalRef
ToJavaPriorityLevel
(
const
ProcessPriority
aPriority
)
{
if
(
aPriority
>
=
PROCESS_PRIORITY_FOREGROUND
)
{
return
mozilla
:
:
java
:
:
ServiceAllocator
:
:
PriorityLevel
:
:
FOREGROUND
(
)
;
}
else
if
(
aPriority
<
=
PROCESS_PRIORITY_PREALLOC
&
&
aPriority
>
=
PROCESS_PRIORITY_BACKGROUND_PERCEIVABLE
)
{
return
mozilla
:
:
java
:
:
ServiceAllocator
:
:
PriorityLevel
:
:
BACKGROUND
(
)
;
}
return
mozilla
:
:
java
:
:
ServiceAllocator
:
:
PriorityLevel
:
:
IDLE
(
)
;
}
namespace
mozilla
{
namespace
hal_impl
{
bool
SetProcessPrioritySupported
(
)
{
return
true
;
}
void
SetProcessPriority
(
int
aPid
ProcessPriority
aPriority
)
{
if
(
aPriority
=
=
PROCESS_PRIORITY_MASTER
)
{
return
;
}
const
int32_t
intPriority
=
static_cast
<
int32_t
>
(
aPriority
)
;
if
(
intPriority
<
0
|
|
intPriority
>
=
NUM_PROCESS_PRIORITY
)
{
return
;
}
auto
contentProcType
=
java
:
:
GeckoProcessType
:
:
CONTENT
(
)
;
auto
selector
=
java
:
:
GeckoProcessManager
:
:
Selector
:
:
New
(
contentProcType
aPid
)
;
auto
priorityLevel
=
ToJavaPriorityLevel
(
aPriority
)
;
const
int32_t
relativeImportance
=
(
static_cast
<
int32_t
>
(
NUM_PROCESS_PRIORITY
)
-
1
)
-
intPriority
;
java
:
:
GeckoProcessManager
:
:
SetProcessPriority
(
selector
priorityLevel
relativeImportance
)
;
}
}
}
