#
include
"
Hal
.
h
"
#
include
"
HalLog
.
h
"
#
include
"
HalTypes
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
prsystem
.
h
"
#
include
<
fstream
>
namespace
mozilla
:
:
hal_impl
{
using
HeterogeneousCpuInfo
=
hal
:
:
HeterogeneousCpuInfo
;
mozilla
:
:
Maybe
<
HeterogeneousCpuInfo
>
CreateHeterogeneousCpuInfo
(
)
{
CheckedInt
<
size_t
>
cpuCount
=
PR_GetNumberOfProcessors
(
)
;
if
(
!
cpuCount
.
isValid
(
)
)
{
HAL_ERR
(
"
HeterogeneousCpuInfo
:
Failed
to
query
processor
count
"
)
;
return
Nothing
(
)
;
}
if
(
cpuCount
.
value
(
)
>
HeterogeneousCpuInfo
:
:
MAX_CPUS
)
{
HAL_ERR
(
"
HeterogeneousCpuInfo
:
Too
many
cpus
"
)
;
return
Nothing
(
)
;
}
std
:
:
vector
<
std
:
:
pair
<
int
int
>
>
cpu_freqs
;
cpu_freqs
.
reserve
(
cpuCount
.
value
(
)
)
;
for
(
size_t
i
=
0
;
i
<
cpuCount
.
value
(
)
;
i
+
+
)
{
std
:
:
stringstream
freq_filename
;
freq_filename
<
<
"
/
sys
/
devices
/
system
/
cpu
/
cpu
"
<
<
i
<
<
"
/
cpufreq
/
cpuinfo_max_freq
"
;
std
:
:
ifstream
ifs
(
freq_filename
.
str
(
)
)
;
if
(
!
ifs
)
{
HAL_ERR
(
"
HeterogeneousCpuInfo
:
Failed
to
open
file
%
s
"
freq_filename
.
str
(
)
.
c_str
(
)
)
;
return
Nothing
(
)
;
}
int
freq
;
if
(
!
(
ifs
>
>
freq
)
)
{
HAL_ERR
(
"
HeterogeneousCpuInfo
:
Failed
to
parse
file
%
s
"
freq_filename
.
str
(
)
.
c_str
(
)
)
;
return
Nothing
(
)
;
}
cpu_freqs
.
push_back
(
std
:
:
make_pair
(
i
freq
)
)
;
}
std
:
:
sort
(
cpu_freqs
.
begin
(
)
cpu_freqs
.
end
(
)
[
]
(
auto
lhs
auto
rhs
)
{
return
lhs
.
second
<
rhs
.
second
;
}
)
;
HeterogeneousCpuInfo
info
;
info
.
mTotalNumCpus
=
cpuCount
.
value
(
)
;
int
lowest_freq
=
cpu_freqs
.
front
(
)
.
second
;
int
highest_freq
=
cpu_freqs
.
back
(
)
.
second
;
for
(
const
auto
&
[
cpu
freq
]
:
cpu_freqs
)
{
if
(
freq
=
=
highest_freq
)
{
info
.
mBigCpus
[
cpu
]
=
true
;
}
else
if
(
freq
=
=
lowest_freq
)
{
info
.
mLittleCpus
[
cpu
]
=
true
;
}
else
{
info
.
mMediumCpus
[
cpu
]
=
true
;
}
}
HAL_LOG
(
"
HeterogeneousCpuInfo
:
little
:
%
zu
med
:
%
zu
big
:
%
zu
"
info
.
mLittleCpus
.
Count
(
)
info
.
mMediumCpus
.
Count
(
)
info
.
mBigCpus
.
Count
(
)
)
;
return
Some
(
info
)
;
}
const
Maybe
<
HeterogeneousCpuInfo
>
&
GetHeterogeneousCpuInfo
(
)
{
static
const
Maybe
<
HeterogeneousCpuInfo
>
cpuInfo
=
CreateHeterogeneousCpuInfo
(
)
;
return
cpuInfo
;
}
}
