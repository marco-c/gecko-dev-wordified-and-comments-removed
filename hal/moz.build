with
Files
(
'
*
*
'
)
:
BUG_COMPONENT
=
(
'
Core
'
'
Hardware
Abstraction
Layer
(
HAL
)
'
)
EXPORTS
.
mozilla
+
=
[
'
Hal
.
h
'
'
HalBatteryInformation
.
h
'
'
HalImpl
.
h
'
'
HalNetworkInformation
.
h
'
'
HalSandbox
.
h
'
'
HalScreenConfiguration
.
h
'
'
HalSensor
.
h
'
'
HalTypes
.
h
'
'
HalWakeLock
.
h
'
'
HalWakeLockInformation
.
h
'
]
EXPORTS
.
mozilla
.
fallback
+
=
[
'
fallback
/
FallbackScreenConfiguration
.
h
'
]
UNIFIED_SOURCES
+
=
[
'
HalWakeLock
.
cpp
'
'
sandbox
/
SandboxHal
.
cpp
'
'
WindowIdentifier
.
cpp
'
]
SOURCES
+
=
[
'
Hal
.
cpp
'
]
if
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
android
'
:
LOCAL_INCLUDES
+
=
[
'
/
widget
/
android
'
]
UNIFIED_SOURCES
+
=
[
'
android
/
AndroidSensor
.
cpp
'
'
fallback
/
FallbackProcessPriority
.
cpp
'
]
SOURCES
+
=
[
'
android
/
AndroidHal
.
cpp
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Linux
'
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackProcessPriority
.
cpp
'
'
fallback
/
FallbackScreenConfiguration
.
cpp
'
'
fallback
/
FallbackSensor
.
cpp
'
'
fallback
/
FallbackVibration
.
cpp
'
]
if
CONFIG
[
'
MOZ_ENABLE_DBUS
'
]
:
UNIFIED_SOURCES
+
=
[
'
linux
/
UPowerClient
.
cpp
'
]
else
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackBattery
.
cpp
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackScreenConfiguration
.
cpp
'
'
fallback
/
FallbackVibration
.
cpp
'
'
windows
/
WindowsProcessPriority
.
cpp
'
'
windows
/
WindowsSensor
.
cpp
'
]
SOURCES
+
=
[
'
windows
/
WindowsBattery
.
cpp
'
]
elif
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
cocoa
'
:
UNIFIED_SOURCES
+
=
[
'
cocoa
/
CocoaBattery
.
cpp
'
'
fallback
/
FallbackProcessPriority
.
cpp
'
'
fallback
/
FallbackScreenConfiguration
.
cpp
'
'
fallback
/
FallbackVibration
.
cpp
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
in
(
'
OpenBSD
'
'
NetBSD
'
'
FreeBSD
'
'
DragonFly
'
)
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackProcessPriority
.
cpp
'
'
fallback
/
FallbackScreenConfiguration
.
cpp
'
'
fallback
/
FallbackSensor
.
cpp
'
'
fallback
/
FallbackVibration
.
cpp
'
]
if
CONFIG
[
'
MOZ_ENABLE_DBUS
'
]
:
UNIFIED_SOURCES
+
=
[
'
linux
/
UPowerClient
.
cpp
'
]
else
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackBattery
.
cpp
'
]
else
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackBattery
.
cpp
'
'
fallback
/
FallbackProcessPriority
.
cpp
'
'
fallback
/
FallbackScreenConfiguration
.
cpp
'
'
fallback
/
FallbackSensor
.
cpp
'
'
fallback
/
FallbackVibration
.
cpp
'
]
if
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
!
=
'
android
'
:
UNIFIED_SOURCES
+
=
[
'
fallback
/
FallbackNetwork
.
cpp
'
]
if
CONFIG
[
'
MOZ_WIDGET_TOOLKIT
'
]
=
=
'
cocoa
'
:
UNIFIED_SOURCES
+
=
[
'
cocoa
/
CocoaSensor
.
mm
'
'
cocoa
/
smslib
.
mm
'
]
IPDL_SOURCES
=
[
'
sandbox
/
PHal
.
ipdl
'
]
include
(
'
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
'
)
FINAL_LIBRARY
=
'
xul
'
LOCAL_INCLUDES
+
=
[
'
/
dom
/
base
'
]
CFLAGS
+
=
CONFIG
[
'
GLIB_CFLAGS
'
]
CFLAGS
+
=
CONFIG
[
'
MOZ_DBUS_GLIB_CFLAGS
'
]
CXXFLAGS
+
=
CONFIG
[
'
GLIB_CFLAGS
'
]
CXXFLAGS
+
=
CONFIG
[
'
MOZ_DBUS_GLIB_CFLAGS
'
]
