#
ifndef
hal_gonk_GonkSensorsRegistryInterface_h
#
define
hal_gonk_GonkSensorsRegistryInterface_h
#
include
<
mozilla
/
ipc
/
DaemonRunnables
.
h
>
#
include
<
mozilla
/
ipc
/
DaemonSocketMessageHandlers
.
h
>
#
include
"
SensorsTypes
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
DaemonSocketPDU
;
class
DaemonSocketPDUHeader
;
}
}
namespace
mozilla
{
namespace
hal
{
class
SensorsInterface
;
using
mozilla
:
:
ipc
:
:
DaemonSocketPDU
;
using
mozilla
:
:
ipc
:
:
DaemonSocketPDUHeader
;
using
mozilla
:
:
ipc
:
:
DaemonSocketResultHandler
;
class
GonkSensorsRegistryResultHandler
:
public
DaemonSocketResultHandler
{
public
:
virtual
void
OnError
(
SensorsError
aError
)
;
virtual
void
RegisterModule
(
uint32_t
aProtocolVersion
)
;
virtual
void
UnregisterModule
(
)
;
protected
:
virtual
~
GonkSensorsRegistryResultHandler
(
)
;
}
;
class
GonkSensorsRegistryModule
{
public
:
enum
{
SERVICE_ID
=
0x00
}
;
enum
{
OPCODE_ERROR
=
0x00
OPCODE_REGISTER_MODULE
=
0x01
OPCODE_UNREGISTER_MODULE
=
0x02
}
;
virtual
nsresult
Send
(
DaemonSocketPDU
*
aPDU
DaemonSocketResultHandler
*
aRes
)
=
0
;
nsresult
RegisterModuleCmd
(
uint8_t
aId
GonkSensorsRegistryResultHandler
*
aRes
)
;
nsresult
UnregisterModuleCmd
(
uint8_t
aId
GonkSensorsRegistryResultHandler
*
aRes
)
;
protected
:
virtual
~
GonkSensorsRegistryModule
(
)
;
void
HandleSvc
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable0
<
GonkSensorsRegistryResultHandler
void
>
ResultRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable1
<
GonkSensorsRegistryResultHandler
void
uint32_t
uint32_t
>
Uint32ResultRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable1
<
GonkSensorsRegistryResultHandler
void
SensorsError
SensorsError
>
ErrorRunnable
;
void
ErrorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsRegistryResultHandler
*
aRes
)
;
void
RegisterModuleRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsRegistryResultHandler
*
aRes
)
;
void
UnregisterModuleRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsRegistryResultHandler
*
aRes
)
;
}
;
class
GonkSensorsRegistryInterface
final
{
public
:
GonkSensorsRegistryInterface
(
GonkSensorsRegistryModule
*
aModule
)
;
~
GonkSensorsRegistryInterface
(
)
;
void
RegisterModule
(
uint8_t
aId
GonkSensorsRegistryResultHandler
*
aRes
)
;
void
UnregisterModule
(
uint8_t
aId
GonkSensorsRegistryResultHandler
*
aRes
)
;
private
:
void
DispatchError
(
GonkSensorsRegistryResultHandler
*
aRes
SensorsError
aError
)
;
void
DispatchError
(
GonkSensorsRegistryResultHandler
*
aRes
nsresult
aRv
)
;
GonkSensorsRegistryModule
*
mModule
;
}
;
}
}
#
endif
