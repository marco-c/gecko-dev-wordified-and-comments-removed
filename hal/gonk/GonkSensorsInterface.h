#
ifndef
hal_gonk_GonkSensorsInterface_h
#
define
hal_gonk_GonkSensorsInterface_h
#
include
<
mozilla
/
ipc
/
DaemonSocketConsumer
.
h
>
#
include
<
mozilla
/
ipc
/
DaemonSocketMessageHandlers
.
h
>
#
include
<
mozilla
/
ipc
/
ListenSocketConsumer
.
h
>
#
include
<
mozilla
/
UniquePtr
.
h
>
#
include
"
SensorsTypes
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
DaemonSocket
;
class
ListenSocket
;
}
}
namespace
mozilla
{
namespace
hal
{
class
GonkSensorsPollInterface
;
class
GonkSensorsProtocol
;
class
GonkSensorsRegistryInterface
;
class
GonkSensorsResultHandler
:
public
mozilla
:
:
ipc
:
:
DaemonSocketResultHandler
{
public
:
virtual
void
OnError
(
SensorsError
aError
)
;
virtual
void
Connect
(
)
;
virtual
void
Disconnect
(
)
;
protected
:
virtual
~
GonkSensorsResultHandler
(
)
;
}
;
class
GonkSensorsNotificationHandler
{
public
:
virtual
void
BackendErrorNotification
(
bool
aCrashed
)
;
protected
:
virtual
~
GonkSensorsNotificationHandler
(
)
;
}
;
class
GonkSensorsInterface
final
:
public
mozilla
:
:
ipc
:
:
DaemonSocketConsumer
public
mozilla
:
:
ipc
:
:
ListenSocketConsumer
{
public
:
static
GonkSensorsInterface
*
GetInstance
(
)
;
void
SetNotificationHandler
(
GonkSensorsNotificationHandler
*
aNotificationHandler
)
;
void
Connect
(
GonkSensorsNotificationHandler
*
aNotificationHandler
GonkSensorsResultHandler
*
aRes
)
;
void
Disconnect
(
GonkSensorsResultHandler
*
aRes
)
;
GonkSensorsRegistryInterface
*
GetSensorsRegistryInterface
(
)
;
GonkSensorsPollInterface
*
GetSensorsPollInterface
(
)
;
private
:
enum
Channel
{
LISTEN_SOCKET
DATA_SOCKET
}
;
GonkSensorsInterface
(
)
;
~
GonkSensorsInterface
(
)
;
void
DispatchError
(
GonkSensorsResultHandler
*
aRes
SensorsError
aError
)
;
void
DispatchError
(
GonkSensorsResultHandler
*
aRes
nsresult
aRv
)
;
void
OnConnectSuccess
(
int
aIndex
)
override
;
void
OnConnectError
(
int
aIndex
)
override
;
void
OnDisconnect
(
int
aIndex
)
override
;
nsCString
mListenSocketName
;
RefPtr
<
mozilla
:
:
ipc
:
:
ListenSocket
>
mListenSocket
;
RefPtr
<
mozilla
:
:
ipc
:
:
DaemonSocket
>
mDataSocket
;
UniquePtr
<
GonkSensorsProtocol
>
mProtocol
;
nsTArray
<
RefPtr
<
GonkSensorsResultHandler
>
>
mResultHandlerQ
;
GonkSensorsNotificationHandler
*
mNotificationHandler
;
UniquePtr
<
GonkSensorsRegistryInterface
>
mRegistryInterface
;
UniquePtr
<
GonkSensorsPollInterface
>
mPollInterface
;
}
;
}
}
#
endif
