#
ifndef
hal_gonk_GonkSensorsPollInterface_h
#
define
hal_gonk_GonkSensorsPollInterface_h
#
include
<
mozilla
/
ipc
/
DaemonRunnables
.
h
>
#
include
<
mozilla
/
ipc
/
DaemonSocketMessageHandlers
.
h
>
#
include
"
SensorsTypes
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
DaemonSocketPDU
;
class
DaemonSocketPDUHeader
;
}
}
namespace
mozilla
{
namespace
hal
{
class
SensorsInterface
;
using
mozilla
:
:
ipc
:
:
DaemonSocketPDU
;
using
mozilla
:
:
ipc
:
:
DaemonSocketPDUHeader
;
using
mozilla
:
:
ipc
:
:
DaemonSocketResultHandler
;
class
GonkSensorsPollResultHandler
:
public
DaemonSocketResultHandler
{
public
:
virtual
void
OnError
(
SensorsError
aError
)
;
virtual
void
EnableSensor
(
)
;
virtual
void
DisableSensor
(
)
;
virtual
void
SetPeriod
(
)
;
protected
:
virtual
~
GonkSensorsPollResultHandler
(
)
;
}
;
class
GonkSensorsPollNotificationHandler
{
public
:
virtual
void
ErrorNotification
(
SensorsError
aError
)
;
virtual
void
SensorDetectedNotification
(
int32_t
aId
SensorsType
aType
float
aRange
float
aResolution
float
aPower
int32_t
aMinPeriod
int32_t
aMaxPeriod
SensorsTriggerMode
aTriggerMode
SensorsDeliveryMode
aDeliveryMode
)
;
virtual
void
SensorLostNotification
(
int32_t
aId
)
;
virtual
void
EventNotification
(
int32_t
aId
const
SensorsEvent
&
aEvent
)
;
protected
:
virtual
~
GonkSensorsPollNotificationHandler
(
)
;
}
;
class
GonkSensorsPollModule
{
public
:
class
NotificationHandlerWrapper
;
enum
{
SERVICE_ID
=
0x01
}
;
enum
{
OPCODE_ERROR
=
0x00
OPCODE_ENABLE_SENSOR
=
0x01
OPCODE_DISABLE_SENSOR
=
0x02
OPCODE_SET_PERIOD
=
0x03
}
;
enum
{
MIN_PROTOCOL_VERSION
=
1
MAX_PROTOCOL_VERSION
=
1
}
;
virtual
nsresult
Send
(
DaemonSocketPDU
*
aPDU
DaemonSocketResultHandler
*
aRes
)
=
0
;
nsresult
SetProtocolVersion
(
unsigned
long
aProtocolVersion
)
;
nsresult
EnableSensorCmd
(
int32_t
aId
GonkSensorsPollResultHandler
*
aRes
)
;
nsresult
DisableSensorCmd
(
int32_t
aId
GonkSensorsPollResultHandler
*
aRes
)
;
nsresult
SetPeriodCmd
(
int32_t
aId
uint64_t
aPeriod
GonkSensorsPollResultHandler
*
aRes
)
;
protected
:
GonkSensorsPollModule
(
)
;
virtual
~
GonkSensorsPollModule
(
)
;
void
HandleSvc
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
;
private
:
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable0
<
GonkSensorsPollResultHandler
void
>
ResultRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable1
<
GonkSensorsPollResultHandler
void
SensorsError
SensorsError
>
ErrorRunnable
;
void
ErrorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsPollResultHandler
*
aRes
)
;
void
EnableSensorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsPollResultHandler
*
aRes
)
;
void
DisableSensorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsPollResultHandler
*
aRes
)
;
void
SetPeriodRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
GonkSensorsPollResultHandler
*
aRes
)
;
void
HandleRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
;
typedef
mozilla
:
:
ipc
:
:
DaemonNotificationRunnable1
<
NotificationHandlerWrapper
void
SensorsError
>
ErrorNotification
;
typedef
mozilla
:
:
ipc
:
:
DaemonNotificationRunnable9
<
NotificationHandlerWrapper
void
int32_t
SensorsType
float
float
float
int32_t
int32_t
SensorsTriggerMode
SensorsDeliveryMode
>
SensorDetectedNotification
;
typedef
mozilla
:
:
ipc
:
:
DaemonNotificationRunnable1
<
NotificationHandlerWrapper
void
int32_t
>
SensorLostNotification
;
typedef
mozilla
:
:
ipc
:
:
DaemonNotificationRunnable2
<
NotificationHandlerWrapper
void
int32_t
SensorsEvent
int32_t
const
SensorsEvent
&
>
EventNotification
;
class
SensorDetectedInitOp
;
class
SensorLostInitOp
;
class
EventInitOp
;
void
ErrorNtf
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
)
;
void
SensorDetectedNtf
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
)
;
void
SensorLostNtf
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
)
;
void
EventNtf
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
)
;
void
HandleNtf
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
;
private
:
unsigned
long
mProtocolVersion
;
}
;
class
GonkSensorsPollInterface
final
{
public
:
GonkSensorsPollInterface
(
GonkSensorsPollModule
*
aModule
)
;
~
GonkSensorsPollInterface
(
)
;
void
SetNotificationHandler
(
GonkSensorsPollNotificationHandler
*
aNotificationHandler
)
;
nsresult
SetProtocolVersion
(
unsigned
long
aProtocolVersion
)
;
void
EnableSensor
(
int32_t
aId
GonkSensorsPollResultHandler
*
aRes
)
;
void
DisableSensor
(
int32_t
aId
GonkSensorsPollResultHandler
*
aRes
)
;
void
SetPeriod
(
int32_t
aId
uint64_t
aPeriod
GonkSensorsPollResultHandler
*
aRes
)
;
private
:
void
DispatchError
(
GonkSensorsPollResultHandler
*
aRes
SensorsError
aError
)
;
void
DispatchError
(
GonkSensorsPollResultHandler
*
aRes
nsresult
aRv
)
;
GonkSensorsPollModule
*
mModule
;
}
;
}
}
#
endif
