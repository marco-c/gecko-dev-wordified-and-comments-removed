#
include
"
Hal
.
h
"
#
include
"
HalTypes
.
h
"
#
include
"
mozilla
/
BitSet
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
:
:
hal_impl
{
static
mozilla
:
:
Maybe
<
hal
:
:
HeterogeneousCpuInfo
>
CreateHeterogeneousCpuInfo
(
)
{
ULONG
returnedLength
;
GetSystemCpuSetInformation
(
NULL
0
&
returnedLength
NULL
0
)
;
if
(
!
returnedLength
)
{
return
Nothing
(
)
;
}
AutoTArray
<
uint8_t
1024
>
cpuSets
;
cpuSets
.
SetLength
(
returnedLength
)
;
if
(
!
GetSystemCpuSetInformation
(
reinterpret_cast
<
SYSTEM_CPU_SET_INFORMATION
*
>
(
cpuSets
.
Elements
(
)
)
returnedLength
&
returnedLength
NULL
0
)
)
{
return
Nothing
(
)
;
}
hal
:
:
HeterogeneousCpuInfo
info
;
info
.
mTotalNumCpus
=
0
;
BYTE
maxEfficiencyClass
=
0
;
BYTE
minEfficiencyClass
=
UINT8_MAX
;
size_t
currentPosition
=
0
;
while
(
currentPosition
<
returnedLength
)
{
SYSTEM_CPU_SET_INFORMATION
&
set
=
*
reinterpret_cast
<
SYSTEM_CPU_SET_INFORMATION
*
>
(
cpuSets
.
Elements
(
)
+
currentPosition
)
;
currentPosition
+
=
set
.
Size
;
if
(
currentPosition
>
returnedLength
)
{
MOZ_ASSERT
(
false
)
;
return
Nothing
(
)
;
}
if
(
set
.
Type
!
=
CpuSetInformation
|
|
!
set
.
CpuSet
.
Id
)
{
continue
;
}
info
.
mTotalNumCpus
+
=
1
;
maxEfficiencyClass
=
std
:
:
max
(
maxEfficiencyClass
set
.
CpuSet
.
EfficiencyClass
)
;
minEfficiencyClass
=
std
:
:
min
(
minEfficiencyClass
set
.
CpuSet
.
EfficiencyClass
)
;
}
if
(
!
info
.
mTotalNumCpus
)
{
return
Nothing
(
)
;
}
currentPosition
=
0
;
size_t
currentCPU
=
0
;
while
(
currentPosition
<
returnedLength
)
{
if
(
currentCPU
>
=
32
)
{
break
;
}
SYSTEM_CPU_SET_INFORMATION
&
set
=
*
reinterpret_cast
<
SYSTEM_CPU_SET_INFORMATION
*
>
(
cpuSets
.
Elements
(
)
+
currentPosition
)
;
currentPosition
+
=
set
.
Size
;
MOZ_ASSERT
(
currentPosition
<
=
returnedLength
)
;
if
(
set
.
CpuSet
.
EfficiencyClass
=
=
maxEfficiencyClass
)
{
info
.
mBigCpus
[
currentCPU
+
+
]
=
true
;
}
else
if
(
set
.
CpuSet
.
EfficiencyClass
=
=
minEfficiencyClass
)
{
info
.
mLittleCpus
[
currentCPU
+
+
]
=
true
;
}
else
{
info
.
mMediumCpus
[
currentCPU
+
+
]
=
true
;
}
}
return
Some
(
info
)
;
}
const
Maybe
<
hal
:
:
HeterogeneousCpuInfo
>
&
GetHeterogeneousCpuInfo
(
)
{
static
const
Maybe
<
hal
:
:
HeterogeneousCpuInfo
>
cpuInfo
=
CreateHeterogeneousCpuInfo
(
)
;
return
cpuInfo
;
}
}
