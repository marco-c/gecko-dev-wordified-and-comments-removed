#
ifndef
mozilla_Hal_h
#
define
mozilla_Hal_h
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
hal_sandbox
/
PHal
.
h
"
#
include
"
mozilla
/
HalBatteryInformation
.
h
"
#
include
"
mozilla
/
HalNetworkInformation
.
h
"
#
include
"
mozilla
/
HalScreenConfiguration
.
h
"
#
include
"
mozilla
/
HalWakeLockInformation
.
h
"
#
include
"
mozilla
/
HalTypes
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
class
nsPIDOMWindowInner
;
#
ifndef
MOZ_HAL_NAMESPACE
#
define
MOZ_HAL_NAMESPACE
hal
#
define
MOZ_DEFINED_HAL_NAMESPACE
1
#
endif
namespace
mozilla
{
namespace
hal
{
class
WindowIdentifier
;
}
namespace
MOZ_HAL_NAMESPACE
{
void
Init
(
)
;
void
Shutdown
(
)
;
void
Vibrate
(
const
nsTArray
<
uint32_t
>
&
pattern
nsPIDOMWindowInner
*
aWindow
)
;
void
Vibrate
(
const
nsTArray
<
uint32_t
>
&
pattern
hal
:
:
WindowIdentifier
&
&
id
)
;
void
CancelVibrate
(
nsPIDOMWindowInner
*
aWindow
)
;
void
CancelVibrate
(
hal
:
:
WindowIdentifier
&
&
id
)
;
#
define
MOZ_DEFINE_HAL_OBSERVER
(
name_
)
\
void
Register
#
#
name_
#
#
Observer
(
hal
:
:
name_
#
#
Observer
*
aObserver
)
;
\
/
*
*
\
*
Inform
the
backend
a
|
name_
|
observer
unregistered
.
\
*
param
aObserver
The
observer
that
should
be
removed
.
\
*
/
\
void
Unregister
#
#
name_
#
#
Observer
(
hal
:
:
name_
#
#
Observer
*
aObserver
)
;
MOZ_DEFINE_HAL_OBSERVER
(
Battery
)
;
void
GetCurrentBatteryInformation
(
hal
:
:
BatteryInformation
*
aBatteryInfo
)
;
void
NotifyBatteryChange
(
const
hal
:
:
BatteryInformation
&
aBatteryInfo
)
;
void
RegisterSensorObserver
(
hal
:
:
SensorType
aSensor
hal
:
:
ISensorObserver
*
aObserver
)
;
void
UnregisterSensorObserver
(
hal
:
:
SensorType
aSensor
hal
:
:
ISensorObserver
*
aObserver
)
;
void
NotifySensorChange
(
const
hal
:
:
SensorData
&
aSensorData
)
;
void
EnableSensorNotifications
(
hal
:
:
SensorType
aSensor
)
;
void
DisableSensorNotifications
(
hal
:
:
SensorType
aSensor
)
;
MOZ_DEFINE_HAL_OBSERVER
(
Network
)
;
void
GetCurrentNetworkInformation
(
hal
:
:
NetworkInformation
*
aNetworkInfo
)
;
void
NotifyNetworkChange
(
const
hal
:
:
NetworkInformation
&
aNetworkInfo
)
;
void
EnableWakeLockNotifications
(
)
;
void
DisableWakeLockNotifications
(
)
;
MOZ_DEFINE_HAL_OBSERVER
(
WakeLock
)
;
void
ModifyWakeLock
(
const
nsAString
&
aTopic
hal
:
:
WakeLockControl
aLockAdjust
hal
:
:
WakeLockControl
aHiddenAdjust
uint64_t
aProcessID
=
hal
:
:
CONTENT_PROCESS_ID_UNKNOWN
)
;
void
GetWakeLockInfo
(
const
nsAString
&
aTopic
hal
:
:
WakeLockInformation
*
aWakeLockInfo
)
;
void
NotifyWakeLockChange
(
const
hal
:
:
WakeLockInformation
&
aWakeLockInfo
)
;
MOZ_DEFINE_HAL_OBSERVER
(
ScreenConfiguration
)
;
void
GetCurrentScreenConfiguration
(
hal
:
:
ScreenConfiguration
*
aScreenConfiguration
)
;
void
NotifyScreenConfigurationChange
(
const
hal
:
:
ScreenConfiguration
&
aScreenConfiguration
)
;
[
[
nodiscard
]
]
RefPtr
<
mozilla
:
:
MozPromise
<
bool
bool
false
>
>
LockScreenOrientation
(
const
hal
:
:
ScreenOrientation
&
aOrientation
)
;
void
UnlockScreenOrientation
(
)
;
void
SetProcessPriority
(
int
aPid
hal
:
:
ProcessPriority
aPriority
)
;
}
}
#
ifdef
MOZ_DEFINED_HAL_NAMESPACE
#
undef
MOZ_DEFINED_HAL_NAMESPACE
#
undef
MOZ_HAL_NAMESPACE
#
endif
#
endif
