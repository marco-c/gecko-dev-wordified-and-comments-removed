#
ifndef
mozilla_ConsoleReportCollector_h
#
define
mozilla_ConsoleReportCollector_h
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIConsoleReportCollector
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
net
{
class
ConsoleReportCollected
;
}
class
ConsoleReportCollector
final
:
public
nsIConsoleReportCollector
{
public
:
ConsoleReportCollector
(
)
;
void
AddConsoleReport
(
uint32_t
aErrorFlags
const
nsACString
&
aCategory
nsContentUtils
:
:
PropertiesFile
aPropertiesFile
const
nsACString
&
aSourceFileURI
uint32_t
aLineNumber
uint32_t
aColumnNumber
const
nsACString
&
aMessageName
const
nsTArray
<
nsString
>
&
aStringParams
)
override
;
void
FlushReportsToConsole
(
uint64_t
aInnerWindowID
ReportAction
aAction
=
ReportAction
:
:
Forget
)
override
;
void
FlushReportsToConsoleForServiceWorkerScope
(
const
nsACString
&
aScope
ReportAction
aAction
=
ReportAction
:
:
Forget
)
override
;
void
FlushConsoleReports
(
dom
:
:
Document
*
aDocument
ReportAction
aAction
=
ReportAction
:
:
Forget
)
override
;
void
FlushConsoleReports
(
nsILoadGroup
*
aLoadGroup
ReportAction
aAction
=
ReportAction
:
:
Forget
)
override
;
void
FlushConsoleReports
(
nsIConsoleReportCollector
*
aCollector
)
override
;
void
StealConsoleReports
(
nsTArray
<
net
:
:
ConsoleReportCollected
>
&
aReports
)
override
;
void
ClearConsoleReports
(
)
override
;
private
:
~
ConsoleReportCollector
(
)
;
struct
PendingReport
{
PendingReport
(
uint32_t
aErrorFlags
const
nsACString
&
aCategory
nsContentUtils
:
:
PropertiesFile
aPropertiesFile
const
nsACString
&
aSourceFileURI
uint32_t
aLineNumber
uint32_t
aColumnNumber
const
nsACString
&
aMessageName
const
nsTArray
<
nsString
>
&
aStringParams
)
:
mErrorFlags
(
aErrorFlags
)
mCategory
(
aCategory
)
mPropertiesFile
(
aPropertiesFile
)
mSourceFileURI
(
aSourceFileURI
)
mLineNumber
(
aLineNumber
)
mColumnNumber
(
aColumnNumber
)
mMessageName
(
aMessageName
)
mStringParams
(
aStringParams
.
Clone
(
)
)
{
}
const
uint32_t
mErrorFlags
;
const
nsCString
mCategory
;
const
nsContentUtils
:
:
PropertiesFile
mPropertiesFile
;
const
nsCString
mSourceFileURI
;
const
uint32_t
mLineNumber
;
const
uint32_t
mColumnNumber
;
const
nsCString
mMessageName
;
const
CopyableTArray
<
nsString
>
mStringParams
;
}
;
Mutex
mMutex
;
nsTArray
<
PendingReport
>
mPendingReports
GUARDED_BY
(
mMutex
)
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
}
;
}
#
endif
