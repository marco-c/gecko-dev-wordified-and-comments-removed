#
ifndef
mozilla_dom_Console_h
#
define
mozilla_dom_Console_h
#
include
"
domstubs
.
h
"
#
include
"
mozilla
/
dom
/
ConsoleBinding
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIConsoleAPIStorage
;
class
nsIGlobalObject
;
class
nsPIDOMWindowInner
;
class
nsIStackFrame
;
namespace
mozilla
:
:
dom
{
class
AnyCallback
;
class
ConsoleCallData
;
class
ConsoleInstance
;
class
ConsoleRunnable
;
class
ConsoleCallDataRunnable
;
class
ConsoleProfileRunnable
;
class
MainThreadConsoleData
;
class
Console
final
:
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
Console
nsIObserver
)
NS_DECL_NSIOBSERVER
static
already_AddRefed
<
Console
>
Create
(
JSContext
*
aCx
nsPIDOMWindowInner
*
aWindow
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
Console
>
CreateForWorklet
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
uint64_t
aOuterWindowID
uint64_t
aInnerWindowID
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Log
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Info
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Warn
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Error
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Exception
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Debug
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Table
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Trace
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Dir
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Dirxml
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Group
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
GroupCollapsed
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
GroupEnd
(
const
GlobalObject
&
aGlobal
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Time
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
)
;
MOZ_CAN_RUN_SCRIPT
static
void
TimeLog
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
TimeEnd
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
)
;
MOZ_CAN_RUN_SCRIPT
static
void
TimeStamp
(
const
GlobalObject
&
aGlobal
const
JS
:
:
Handle
<
JS
:
:
Value
>
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Profile
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
ProfileEnd
(
const
GlobalObject
&
aGlobal
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Assert
(
const
GlobalObject
&
aGlobal
bool
aCondition
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Count
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
)
;
MOZ_CAN_RUN_SCRIPT
static
void
CountReset
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Clear
(
const
GlobalObject
&
aGlobal
)
;
static
already_AddRefed
<
ConsoleInstance
>
CreateInstance
(
const
GlobalObject
&
aGlobal
const
ConsoleInstanceOptions
&
aOptions
)
;
void
ClearStorage
(
)
;
void
RetrieveConsoleEvents
(
JSContext
*
aCx
nsTArray
<
JS
:
:
Value
>
&
aEvents
ErrorResult
&
aRv
)
;
void
SetConsoleEventHandler
(
AnyCallback
*
aHandler
)
;
private
:
Console
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
uint64_t
aOuterWindowID
uint64_t
aInnerWIndowID
)
;
~
Console
(
)
;
void
Initialize
(
ErrorResult
&
aRv
)
;
void
Shutdown
(
)
;
enum
MethodName
{
MethodLog
MethodInfo
MethodWarn
MethodError
MethodException
MethodDebug
MethodTable
MethodTrace
MethodDir
MethodDirxml
MethodGroup
MethodGroupCollapsed
MethodGroupEnd
MethodTime
MethodTimeLog
MethodTimeEnd
MethodTimeStamp
MethodAssert
MethodCount
MethodCountReset
MethodClear
MethodProfile
MethodProfileEnd
}
;
static
already_AddRefed
<
Console
>
GetConsole
(
const
GlobalObject
&
aGlobal
)
;
static
already_AddRefed
<
Console
>
GetConsoleInternal
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
static
void
ProfileMethod
(
const
GlobalObject
&
aGlobal
MethodName
aName
const
nsAString
&
aAction
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
ProfileMethodInternal
(
JSContext
*
aCx
MethodName
aName
const
nsAString
&
aAction
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
static
void
ProfileMethodMainthread
(
JSContext
*
aCx
const
nsAString
&
aAction
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
Method
(
const
GlobalObject
&
aGlobal
MethodName
aName
const
nsAString
&
aString
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
MethodInternal
(
JSContext
*
aCx
MethodName
aName
const
nsAString
&
aString
const
Sequence
<
JS
:
:
Value
>
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
static
void
StringMethod
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
const
Sequence
<
JS
:
:
Value
>
&
aData
MethodName
aMethodName
const
nsAString
&
aMethodString
)
;
MOZ_CAN_RUN_SCRIPT
void
StringMethodInternal
(
JSContext
*
aCx
const
nsAString
&
aLabel
const
Sequence
<
JS
:
:
Value
>
&
aData
MethodName
aMethodName
const
nsAString
&
aMethodString
)
;
MainThreadConsoleData
*
GetOrCreateMainThreadData
(
)
;
bool
StoreCallData
(
JSContext
*
aCx
ConsoleCallData
*
aCallData
const
Sequence
<
JS
:
:
Value
>
&
aArguments
)
;
void
UnstoreCallData
(
ConsoleCallData
*
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
NotifyHandler
(
JSContext
*
aCx
const
Sequence
<
JS
:
:
Value
>
&
aArguments
ConsoleCallData
*
aData
)
;
static
bool
PopulateConsoleNotificationInTheTargetScope
(
JSContext
*
aCx
const
Sequence
<
JS
:
:
Value
>
&
aArguments
JS
:
:
Handle
<
JSObject
*
>
aTargetScope
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aEventValue
ConsoleCallData
*
aData
nsTArray
<
nsString
>
*
aGroupStack
)
;
enum
TimerStatus
{
eTimerUnknown
eTimerDone
eTimerAlreadyExists
eTimerDoesntExist
eTimerJSException
eTimerMaxReached
}
;
static
JS
:
:
Value
CreateTimerError
(
JSContext
*
aCx
const
nsAString
&
aLabel
TimerStatus
aStatus
)
;
TimerStatus
StartTimer
(
JSContext
*
aCx
const
JS
:
:
Value
&
aName
DOMHighResTimeStamp
aTimestamp
nsAString
&
aTimerLabel
DOMHighResTimeStamp
*
aTimerValue
)
;
static
JS
:
:
Value
CreateStartTimerValue
(
JSContext
*
aCx
const
nsAString
&
aTimerLabel
TimerStatus
aTimerStatus
)
;
TimerStatus
LogTimer
(
JSContext
*
aCx
const
JS
:
:
Value
&
aName
DOMHighResTimeStamp
aTimestamp
nsAString
&
aTimerLabel
double
*
aTimerDuration
bool
aCancelTimer
)
;
static
JS
:
:
Value
CreateLogOrEndTimerValue
(
JSContext
*
aCx
const
nsAString
&
aLabel
double
aDuration
TimerStatus
aStatus
)
;
bool
ArgumentsToValueList
(
const
Sequence
<
JS
:
:
Value
>
&
aData
Sequence
<
JS
:
:
Value
>
&
aSequence
)
const
;
uint32_t
IncreaseCounter
(
JSContext
*
aCx
const
Sequence
<
JS
:
:
Value
>
&
aData
nsAString
&
aCountLabel
)
;
uint32_t
ResetCounter
(
JSContext
*
aCx
const
Sequence
<
JS
:
:
Value
>
&
aData
nsAString
&
aCountLabel
)
;
static
bool
ShouldIncludeStackTrace
(
MethodName
aMethodName
)
;
void
AssertIsOnOwningThread
(
)
const
;
bool
IsShuttingDown
(
)
const
;
bool
MonotonicTimer
(
JSContext
*
aCx
MethodName
aMethodName
const
Sequence
<
JS
:
:
Value
>
&
aData
DOMHighResTimeStamp
*
aTimeStamp
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeExecuteDumpFunction
(
JSContext
*
aCx
const
nsAString
&
aMethodName
const
Sequence
<
JS
:
:
Value
>
&
aData
nsIStackFrame
*
aStack
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeExecuteDumpFunctionForTime
(
JSContext
*
aCx
MethodName
aMethodName
const
nsAString
&
aMethodString
uint64_t
aMonotonicTimer
const
JS
:
:
Value
&
aData
)
;
MOZ_CAN_RUN_SCRIPT
void
ExecuteDumpFunction
(
const
nsAString
&
aMessage
)
;
bool
ShouldProceed
(
MethodName
aName
)
const
;
uint32_t
WebIDLLogLevelToInteger
(
ConsoleLogLevel
aLevel
)
const
;
uint32_t
InternalLogLevelToInteger
(
MethodName
aName
)
const
;
class
ArgumentData
{
public
:
bool
Initialize
(
JSContext
*
aCx
const
Sequence
<
JS
:
:
Value
>
&
aArguments
)
;
void
Trace
(
const
TraceCallbacks
&
aCallbacks
void
*
aClosure
)
;
bool
PopulateArgumentsSequence
(
Sequence
<
JS
:
:
Value
>
&
aSequence
)
const
;
JSObject
*
Global
(
)
const
{
return
mGlobal
;
}
private
:
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
ArgumentData
)
;
}
NS_DECL_OWNINGTHREAD
;
JS
:
:
Heap
<
JSObject
*
>
mGlobal
;
nsTArray
<
JS
:
:
Heap
<
JS
:
:
Value
>
>
mArguments
;
}
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
nsTHashMap
<
nsStringHashKey
DOMHighResTimeStamp
>
mTimerRegistry
;
nsTHashMap
<
nsStringHashKey
uint32_t
>
mCounterRegistry
;
nsTArray
<
RefPtr
<
ConsoleCallData
>
>
mCallDataStorage
;
Vector
<
ArgumentData
>
mArgumentStorage
;
RefPtr
<
AnyCallback
>
mConsoleEventNotifier
;
RefPtr
<
MainThreadConsoleData
>
mMainThreadData
;
nsTArray
<
nsString
>
mGroupStack
;
uint64_t
mOuterID
;
uint64_t
mInnerID
;
nsString
mConsoleID
;
nsString
mPassedInnerID
;
RefPtr
<
ConsoleInstanceDumpCallback
>
mDumpFunction
;
bool
mDumpToStdout
;
nsString
mPrefix
;
bool
mChromeInstance
;
ConsoleLogLevel
mMaxLogLevel
;
nsString
mMaxLogLevelPref
;
enum
{
eUnknown
eInitialized
eShuttingDown
}
mStatus
;
mozilla
:
:
TimeStamp
mCreationTimeStamp
;
friend
class
ConsoleCallData
;
friend
class
ConsoleCallDataWorkletRunnable
;
friend
class
ConsoleInstance
;
friend
class
ConsoleProfileWorkerRunnable
;
friend
class
ConsoleProfileWorkletRunnable
;
friend
class
ConsoleRunnable
;
friend
class
ConsoleWorkerRunnable
;
friend
class
ConsoleWorkletRunnable
;
friend
class
MainThreadConsoleData
;
}
;
}
#
endif
