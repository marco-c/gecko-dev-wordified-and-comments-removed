#
include
"
mozilla
/
dom
/
OSFileSystem
.
h
"
#
include
"
mozilla
/
dom
/
Directory
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemUtils
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsIFile
.
h
"
namespace
mozilla
{
namespace
dom
{
OSFileSystem
:
:
OSFileSystem
(
const
nsAString
&
aRootDir
)
{
mLocalRootPath
=
aRootDir
;
mRequiresPermissionChecks
=
false
;
#
ifdef
DEBUG
mPermission
.
AssignLiteral
(
"
never
-
used
"
)
;
#
endif
}
void
OSFileSystem
:
:
Init
(
nsISupports
*
aParent
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
MOZ_ASSERT
(
!
mParent
"
No
duple
Init
(
)
calls
"
)
;
MOZ_ASSERT
(
aParent
)
;
mParent
=
aParent
;
#
ifdef
DEBUG
nsCOMPtr
<
nsIGlobalObject
>
obj
=
do_QueryInterface
(
aParent
)
;
MOZ_ASSERT
(
obj
)
;
#
endif
}
nsISupports
*
OSFileSystem
:
:
GetParentObject
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
return
mParent
;
}
void
OSFileSystem
:
:
GetRootName
(
nsAString
&
aRetval
)
const
{
aRetval
.
AssignLiteral
(
FILESYSTEM_DOM_PATH_SEPARATOR_LITERAL
)
;
}
bool
OSFileSystem
:
:
IsSafeFile
(
nsIFile
*
aFile
)
const
{
MOZ_CRASH
(
"
Don
'
t
use
OSFileSystem
with
the
Device
Storage
API
"
)
;
return
true
;
}
bool
OSFileSystem
:
:
IsSafeDirectory
(
Directory
*
aDir
)
const
{
MOZ_CRASH
(
"
Don
'
t
use
OSFileSystem
with
the
Device
Storage
API
"
)
;
return
true
;
}
void
OSFileSystem
:
:
Unlink
(
)
{
mParent
=
nullptr
;
}
void
OSFileSystem
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
{
OSFileSystem
*
tmp
=
this
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mParent
)
;
}
void
OSFileSystem
:
:
SerializeDOMPath
(
nsAString
&
aOutput
)
const
{
aOutput
=
mLocalRootPath
;
}
}
}
