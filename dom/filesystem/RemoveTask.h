#
ifndef
mozilla_dom_RemoveTask_h
#
define
mozilla_dom_RemoveTask_h
#
include
"
mozilla
/
dom
/
FileSystemTaskBase
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
define
REMOVE_TASK_PERMISSION
"
write
"
namespace
mozilla
{
namespace
dom
{
class
BlobImpl
;
class
Promise
;
class
RemoveTask
final
:
public
FileSystemTaskBase
{
public
:
static
already_AddRefed
<
RemoveTask
>
Create
(
FileSystemBase
*
aFileSystem
nsIFile
*
aDirPath
nsIFile
*
aTargetPath
bool
aRecursive
ErrorResult
&
aRv
)
;
virtual
~
RemoveTask
(
)
;
already_AddRefed
<
Promise
>
GetPromise
(
)
;
virtual
void
GetPermissionAccessType
(
nsCString
&
aAccess
)
const
override
;
protected
:
virtual
FileSystemParams
GetRequestParams
(
const
nsString
&
aSerializedDOMPath
ErrorResult
&
aRv
)
const
override
;
virtual
void
SetSuccessRequestResult
(
const
FileSystemResponseValue
&
aValue
ErrorResult
&
aRv
)
override
;
virtual
void
HandlerCallback
(
)
override
;
private
:
RemoveTask
(
FileSystemBase
*
aFileSystem
nsIFile
*
aDirPath
nsIFile
*
aTargetPath
bool
aRecursive
)
;
RefPtr
<
Promise
>
mPromise
;
nsCOMPtr
<
nsIFile
>
mDirPath
;
nsCOMPtr
<
nsIFile
>
mTargetPath
;
bool
mRecursive
;
bool
mReturnValue
;
}
;
class
RemoveTaskParent
final
:
public
FileSystemTaskParentBase
{
public
:
static
already_AddRefed
<
RemoveTaskParent
>
Create
(
FileSystemBase
*
aFileSystem
const
FileSystemRemoveParams
&
aParam
FileSystemRequestParent
*
aParent
ErrorResult
&
aRv
)
;
virtual
void
GetPermissionAccessType
(
nsCString
&
aAccess
)
const
override
;
protected
:
virtual
FileSystemResponseValue
GetSuccessRequestResult
(
ErrorResult
&
aRv
)
const
override
;
virtual
nsresult
IOWork
(
)
override
;
private
:
RemoveTaskParent
(
FileSystemBase
*
aFileSystem
const
FileSystemRemoveParams
&
aParam
FileSystemRequestParent
*
aParent
)
;
nsCOMPtr
<
nsIFile
>
mDirPath
;
nsCOMPtr
<
nsIFile
>
mTargetPath
;
bool
mRecursive
;
bool
mReturnValue
;
}
;
}
}
#
endif
