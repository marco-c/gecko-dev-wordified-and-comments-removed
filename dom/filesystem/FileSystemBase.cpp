#
include
"
mozilla
/
dom
/
FileSystemBase
.
h
"
#
include
"
DeviceStorageFileSystem
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
OSFileSystem
.
h
"
namespace
mozilla
{
namespace
dom
{
already_AddRefed
<
FileSystemBase
>
FileSystemBase
:
:
DeserializeDOMPath
(
const
nsAString
&
aString
)
{
if
(
StringBeginsWith
(
aString
NS_LITERAL_STRING
(
"
devicestorage
-
"
)
)
)
{
nsCharSeparatedTokenizer
tokenizer
(
aString
char16_t
(
'
-
'
)
)
;
tokenizer
.
nextToken
(
)
;
nsString
storageType
;
if
(
tokenizer
.
hasMoreTokens
(
)
)
{
storageType
=
tokenizer
.
nextToken
(
)
;
}
nsString
storageName
;
if
(
tokenizer
.
hasMoreTokens
(
)
)
{
storageName
=
tokenizer
.
nextToken
(
)
;
}
RefPtr
<
DeviceStorageFileSystem
>
f
=
new
DeviceStorageFileSystem
(
storageType
storageName
)
;
return
f
.
forget
(
)
;
}
return
RefPtr
<
OSFileSystem
>
(
new
OSFileSystem
(
aString
)
)
.
forget
(
)
;
}
FileSystemBase
:
:
FileSystemBase
(
)
:
mShutdown
(
false
)
mRequiresPermissionChecks
(
true
)
{
}
FileSystemBase
:
:
~
FileSystemBase
(
)
{
}
void
FileSystemBase
:
:
Shutdown
(
)
{
mShutdown
=
true
;
}
nsISupports
*
FileSystemBase
:
:
GetParentObject
(
)
const
{
return
nullptr
;
}
bool
FileSystemBase
:
:
GetRealPath
(
BlobImpl
*
aFile
nsIFile
*
*
aPath
)
const
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Should
be
on
parent
process
!
"
)
;
MOZ_ASSERT
(
aFile
"
aFile
Should
not
be
null
.
"
)
;
nsAutoString
filePath
;
ErrorResult
rv
;
aFile
-
>
GetMozFullPathInternal
(
filePath
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
false
;
}
rv
=
NS_NewNativeLocalFile
(
NS_ConvertUTF16toUTF8
(
filePath
)
true
aPath
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
false
;
}
return
true
;
}
bool
FileSystemBase
:
:
IsSafeFile
(
nsIFile
*
aFile
)
const
{
return
false
;
}
bool
FileSystemBase
:
:
IsSafeDirectory
(
Directory
*
aDir
)
const
{
return
false
;
}
bool
FileSystemBase
:
:
LocalPathToRealPath
(
const
nsAString
&
aLocalPath
nsAString
&
aRealPath
)
const
{
nsAutoString
path
;
FileSystemUtils
:
:
LocalPathToNormalizedPath
(
aLocalPath
path
)
;
if
(
!
FileSystemUtils
:
:
IsDescendantPath
(
mNormalizedLocalRootPath
path
)
)
{
aRealPath
.
Truncate
(
)
;
return
false
;
}
aRealPath
=
Substring
(
path
mNormalizedLocalRootPath
.
Length
(
)
)
;
return
true
;
}
}
}
