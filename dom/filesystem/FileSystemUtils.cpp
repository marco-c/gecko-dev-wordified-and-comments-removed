#
include
"
mozilla
/
dom
/
FileSystemUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
{
bool
TokenizerIgnoreNothing
(
char16_t
)
{
return
false
;
}
}
bool
FileSystemUtils
:
:
IsDescendantPath
(
const
nsAString
&
aPath
const
nsAString
&
aDescendantPath
)
{
if
(
!
aDescendantPath
.
Equals
(
aPath
)
&
&
!
StringBeginsWith
(
aDescendantPath
aPath
)
)
{
return
false
;
}
return
true
;
}
bool
FileSystemUtils
:
:
IsValidRelativeDOMPath
(
const
nsAString
&
aPath
nsTArray
<
nsString
>
&
aParts
)
{
if
(
aPath
.
IsEmpty
(
)
)
{
return
false
;
}
if
(
aPath
.
First
(
)
=
=
FILESYSTEM_DOM_PATH_SEPARATOR_CHAR
|
|
aPath
.
Last
(
)
=
=
FILESYSTEM_DOM_PATH_SEPARATOR_CHAR
)
{
return
false
;
}
constexpr
auto
kCurrentDir
=
u
"
.
"
_ns
;
constexpr
auto
kParentDir
=
u
"
.
.
"
_ns
;
nsCharSeparatedTokenizerTemplate
<
TokenizerIgnoreNothing
>
tokenizer
(
aPath
FILESYSTEM_DOM_PATH_SEPARATOR_CHAR
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
nsDependentSubstring
pathComponent
=
tokenizer
.
nextToken
(
)
;
if
(
pathComponent
.
IsEmpty
(
)
|
|
pathComponent
.
Equals
(
kCurrentDir
)
|
|
pathComponent
.
Equals
(
kParentDir
)
)
{
return
false
;
}
aParts
.
AppendElement
(
pathComponent
)
;
}
return
true
;
}
nsresult
FileSystemUtils
:
:
DispatchRunnable
(
nsIGlobalObject
*
aGlobal
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
aRunnable
;
nsCOMPtr
<
nsIEventTarget
>
target
;
if
(
!
aGlobal
)
{
target
=
GetMainThreadSerialEventTarget
(
)
;
}
else
{
target
=
aGlobal
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
}
MOZ_ASSERT
(
target
)
;
nsresult
rv
=
target
-
>
Dispatch
(
runnable
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
}
}
