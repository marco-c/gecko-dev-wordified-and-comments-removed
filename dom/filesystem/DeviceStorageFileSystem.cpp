#
include
"
mozilla
/
dom
/
DeviceStorageFileSystem
.
h
"
#
include
"
DeviceStorage
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
Directory
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsDeviceStorage
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsGlobalWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
DeviceStorageFileSystem
:
:
DeviceStorageFileSystem
(
const
nsAString
&
aStorageType
const
nsAString
&
aStorageName
)
:
mWindowId
(
0
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
mStorageType
=
aStorageType
;
mStorageName
=
aStorageName
;
mRequiresPermissionChecks
=
!
mozilla
:
:
Preferences
:
:
GetBool
(
"
device
.
storage
.
prompt
.
testing
"
false
)
;
nsresult
rv
=
DeviceStorageTypeChecker
:
:
GetPermissionForType
(
mStorageType
mPermission
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
nsCOMPtr
<
nsIFile
>
rootFile
;
DeviceStorageFile
:
:
GetRootDirectoryForType
(
aStorageType
aStorageName
getter_AddRefs
(
rootFile
)
)
;
NS_WARN_IF
(
!
rootFile
|
|
NS_FAILED
(
rootFile
-
>
GetPath
(
mLocalRootPath
)
)
)
;
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
DebugOnly
<
DeviceStorageTypeChecker
*
>
typeChecker
=
DeviceStorageTypeChecker
:
:
CreateOrGet
(
)
;
MOZ_ASSERT
(
typeChecker
)
;
}
DeviceStorageFileSystem
:
:
~
DeviceStorageFileSystem
(
)
{
}
already_AddRefed
<
FileSystemBase
>
DeviceStorageFileSystem
:
:
Clone
(
)
{
RefPtr
<
DeviceStorageFileSystem
>
fs
=
new
DeviceStorageFileSystem
(
mStorageType
mStorageName
)
;
fs
-
>
mWindowId
=
mWindowId
;
return
fs
.
forget
(
)
;
}
void
DeviceStorageFileSystem
:
:
Init
(
nsDOMDeviceStorage
*
aDeviceStorage
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
MOZ_ASSERT
(
aDeviceStorage
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
aDeviceStorage
-
>
GetOwner
(
)
;
MOZ_ASSERT
(
window
-
>
IsInnerWindow
(
)
)
;
mWindowId
=
window
-
>
WindowID
(
)
;
}
void
DeviceStorageFileSystem
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
mShutdown
=
true
;
}
nsISupports
*
DeviceStorageFileSystem
:
:
GetParentObject
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
nsGlobalWindow
*
window
=
nsGlobalWindow
:
:
GetInnerWindowWithId
(
mWindowId
)
;
MOZ_ASSERT_IF
(
!
mShutdown
window
)
;
return
window
?
window
-
>
AsInner
(
)
:
nullptr
;
}
void
DeviceStorageFileSystem
:
:
GetRootName
(
nsAString
&
aRetval
)
const
{
aRetval
=
mStorageName
;
}
bool
DeviceStorageFileSystem
:
:
IsSafeFile
(
nsIFile
*
aFile
)
const
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Should
be
on
parent
process
!
"
)
;
MOZ_ASSERT
(
aFile
)
;
nsCOMPtr
<
nsIFile
>
rootPath
;
nsresult
rv
=
NS_NewLocalFile
(
GetLocalRootPath
(
)
false
getter_AddRefs
(
rootPath
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
FileSystemUtils
:
:
IsDescendantPath
(
rootPath
aFile
)
)
)
{
return
false
;
}
DeviceStorageTypeChecker
*
typeChecker
=
DeviceStorageTypeChecker
:
:
CreateOrGet
(
)
;
MOZ_ASSERT
(
typeChecker
)
;
return
typeChecker
-
>
Check
(
mStorageType
aFile
)
;
}
bool
DeviceStorageFileSystem
:
:
IsSafeDirectory
(
Directory
*
aDir
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
!
"
)
;
MOZ_ASSERT
(
aDir
)
;
ErrorResult
rv
;
RefPtr
<
FileSystemBase
>
fs
=
aDir
-
>
GetFileSystem
(
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
rv
.
SuppressException
(
)
;
return
false
;
}
nsAutoString
fsSerialization
;
fs
-
>
SerializeDOMPath
(
fsSerialization
)
;
nsAutoString
thisSerialization
;
SerializeDOMPath
(
thisSerialization
)
;
return
fsSerialization
=
=
thisSerialization
;
}
void
DeviceStorageFileSystem
:
:
SerializeDOMPath
(
nsAString
&
aString
)
const
{
aString
.
AssignLiteral
(
"
devicestorage
-
"
)
;
aString
.
Append
(
mStorageType
)
;
aString
.
Append
(
'
-
'
)
;
aString
.
Append
(
mStorageName
)
;
}
}
}
