#
ifndef
mozilla_dom_FileSystemTaskBase_h
#
define
mozilla_dom_FileSystemTaskBase_h
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemRequestParent
.
h
"
#
include
"
mozilla
/
dom
/
PFileSystemRequestChild
.
h
"
#
include
"
nsIIPCBackgroundChildCreateCallback
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
BlobImpl
;
class
FileSystemBase
;
class
FileSystemParams
;
class
PBlobParent
;
class
FileSystemTaskChildBase
:
public
PFileSystemRequestChild
public
nsIIPCBackgroundChildCreateCallback
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIIPCBACKGROUNDCHILDCREATECALLBACK
void
Start
(
)
;
void
SetError
(
const
nsresult
&
aErrorCode
)
;
FileSystemBase
*
GetFileSystem
(
)
const
;
virtual
void
HandlerCallback
(
)
=
0
;
bool
HasError
(
)
const
{
return
NS_FAILED
(
mErrorValue
)
;
}
protected
:
explicit
FileSystemTaskChildBase
(
FileSystemBase
*
aFileSystem
)
;
virtual
~
FileSystemTaskChildBase
(
)
;
virtual
FileSystemParams
GetRequestParams
(
const
nsString
&
aSerializedDOMPath
ErrorResult
&
aRv
)
const
=
0
;
virtual
void
SetSuccessRequestResult
(
const
FileSystemResponseValue
&
aValue
ErrorResult
&
aRv
)
=
0
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
Recv__delete__
(
const
FileSystemResponseValue
&
value
)
override
;
nsresult
mErrorValue
;
RefPtr
<
FileSystemBase
>
mFileSystem
;
private
:
void
SetRequestResult
(
const
FileSystemResponseValue
&
aValue
)
;
}
;
class
FileSystemTaskParentBase
:
public
Runnable
{
public
:
void
Start
(
)
;
void
SetError
(
const
nsresult
&
aErrorCode
)
;
virtual
nsresult
IOWork
(
)
=
0
;
virtual
FileSystemResponseValue
GetSuccessRequestResult
(
ErrorResult
&
aRv
)
const
=
0
;
void
HandleResult
(
)
;
bool
HasError
(
)
const
{
return
NS_FAILED
(
mErrorValue
)
;
}
NS_IMETHOD
Run
(
)
override
;
virtual
nsresult
GetTargetPath
(
nsAString
&
aPath
)
const
=
0
;
private
:
FileSystemResponseValue
GetRequestResult
(
)
const
;
protected
:
FileSystemTaskParentBase
(
FileSystemBase
*
aFileSystem
const
FileSystemParams
&
aParam
FileSystemRequestParent
*
aParent
)
;
virtual
~
FileSystemTaskParentBase
(
)
;
nsresult
mErrorValue
;
RefPtr
<
FileSystemBase
>
mFileSystem
;
RefPtr
<
FileSystemRequestParent
>
mRequestParent
;
nsCOMPtr
<
nsIEventTarget
>
mBackgroundEventTarget
;
}
;
}
}
#
endif
