#
include
"
FileSystemRootDirectoryReader
.
h
"
#
include
"
CallbackRunnables
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemDirectoryReaderBinding
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemUtils
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
:
:
dom
{
namespace
{
class
EntriesCallbackRunnable
final
:
public
Runnable
{
public
:
EntriesCallbackRunnable
(
FileSystemEntriesCallback
*
aCallback
const
Sequence
<
RefPtr
<
FileSystemEntry
>
>
&
aEntries
)
:
Runnable
(
"
EntriesCallbackRunnable
"
)
mCallback
(
aCallback
)
mEntries
(
aEntries
)
{
MOZ_ASSERT
(
aCallback
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
Run
(
)
override
{
Sequence
<
OwningNonNull
<
FileSystemEntry
>
>
entries
;
for
(
uint32_t
i
=
0
;
i
<
mEntries
.
Length
(
)
;
+
+
i
)
{
if
(
!
entries
.
AppendElement
(
mEntries
[
i
]
.
forget
(
)
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
mCallback
-
>
Call
(
entries
)
;
return
NS_OK
;
}
private
:
const
RefPtr
<
FileSystemEntriesCallback
>
mCallback
;
Sequence
<
RefPtr
<
FileSystemEntry
>
>
mEntries
;
}
;
}
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
FileSystemRootDirectoryReader
FileSystemDirectoryReader
mEntries
)
NS_IMPL_ADDREF_INHERITED
(
FileSystemRootDirectoryReader
FileSystemDirectoryReader
)
NS_IMPL_RELEASE_INHERITED
(
FileSystemRootDirectoryReader
FileSystemDirectoryReader
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FileSystemRootDirectoryReader
)
NS_INTERFACE_MAP_END_INHERITING
(
FileSystemDirectoryReader
)
FileSystemRootDirectoryReader
:
:
FileSystemRootDirectoryReader
(
FileSystemDirectoryEntry
*
aParentEntry
FileSystem
*
aFileSystem
const
Sequence
<
RefPtr
<
FileSystemEntry
>
>
&
aEntries
)
:
FileSystemDirectoryReader
(
aParentEntry
aFileSystem
nullptr
)
mEntries
(
aEntries
)
mAlreadyRead
(
false
)
{
MOZ_ASSERT
(
aParentEntry
)
;
MOZ_ASSERT
(
aFileSystem
)
;
}
FileSystemRootDirectoryReader
:
:
~
FileSystemRootDirectoryReader
(
)
=
default
;
void
FileSystemRootDirectoryReader
:
:
ReadEntries
(
FileSystemEntriesCallback
&
aSuccessCallback
const
Optional
<
OwningNonNull
<
ErrorCallback
>
>
&
aErrorCallback
ErrorResult
&
aRv
)
{
if
(
mAlreadyRead
)
{
RefPtr
<
EmptyEntriesCallbackRunnable
>
runnable
=
new
EmptyEntriesCallbackRunnable
(
&
aSuccessCallback
)
;
aRv
=
FileSystemUtils
:
:
DispatchRunnable
(
GetParentObject
(
)
runnable
.
forget
(
)
)
;
return
;
}
mAlreadyRead
=
true
;
RefPtr
<
EntriesCallbackRunnable
>
runnable
=
new
EntriesCallbackRunnable
(
&
aSuccessCallback
mEntries
)
;
aRv
=
FileSystemUtils
:
:
DispatchRunnable
(
GetParentObject
(
)
runnable
.
forget
(
)
)
;
}
}
