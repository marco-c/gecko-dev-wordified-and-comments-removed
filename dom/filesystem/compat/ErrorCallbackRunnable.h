#
ifndef
mozilla_dom_ErrorCallbackRunnable_h
#
define
mozilla_dom_ErrorCallbackRunnable_h
#
include
"
mozilla
/
dom
/
DOMError
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ErrorCallbackRunnable
final
:
public
Runnable
{
public
:
explicit
ErrorCallbackRunnable
(
nsIGlobalObject
*
aGlobalObject
ErrorCallback
*
aCallback
nsresult
aError
=
NS_ERROR_DOM_NOT_SUPPORTED_ERR
)
:
mGlobal
(
aGlobalObject
)
mCallback
(
aCallback
)
mError
(
aError
)
{
MOZ_ASSERT
(
aGlobalObject
)
;
MOZ_ASSERT
(
aCallback
)
;
MOZ_ASSERT
(
NS_FAILED
(
aError
)
)
;
}
NS_IMETHOD
Run
(
)
override
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
mGlobal
)
;
if
(
NS_WARN_IF
(
!
window
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
DOMError
>
error
=
new
DOMError
(
window
mError
)
;
mCallback
-
>
HandleEvent
(
*
error
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
ErrorCallback
>
mCallback
;
nsresult
mError
;
}
;
}
}
#
endif
