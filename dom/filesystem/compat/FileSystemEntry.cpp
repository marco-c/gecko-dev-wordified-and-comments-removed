#
include
"
FileSystemEntry
.
h
"
#
include
"
DirectoryEntry
.
h
"
#
include
"
FileSystemFileEntry
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
FileSystemEntry
mParent
mFileSystem
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
FileSystemEntry
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
FileSystemEntry
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
FileSystemEntry
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
already_AddRefed
<
FileSystemEntry
>
FileSystemEntry
:
:
Create
(
nsIGlobalObject
*
aGlobalObject
const
OwningFileOrDirectory
&
aFileOrDirectory
FileSystem
*
aFileSystem
)
{
MOZ_ASSERT
(
aGlobalObject
)
;
MOZ_ASSERT
(
aFileSystem
)
;
RefPtr
<
FileSystemEntry
>
entry
;
if
(
aFileOrDirectory
.
IsFile
(
)
)
{
entry
=
new
FileSystemFileEntry
(
aGlobalObject
aFileOrDirectory
.
GetAsFile
(
)
aFileSystem
)
;
}
else
{
MOZ_ASSERT
(
aFileOrDirectory
.
IsDirectory
(
)
)
;
entry
=
new
DirectoryEntry
(
aGlobalObject
aFileOrDirectory
.
GetAsDirectory
(
)
aFileSystem
)
;
}
return
entry
.
forget
(
)
;
}
FileSystemEntry
:
:
FileSystemEntry
(
nsIGlobalObject
*
aGlobal
FileSystem
*
aFileSystem
)
:
mParent
(
aGlobal
)
mFileSystem
(
aFileSystem
)
{
MOZ_ASSERT
(
aGlobal
)
;
MOZ_ASSERT
(
aFileSystem
)
;
}
FileSystemEntry
:
:
~
FileSystemEntry
(
)
{
}
JSObject
*
FileSystemEntry
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
FileSystemEntryBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
