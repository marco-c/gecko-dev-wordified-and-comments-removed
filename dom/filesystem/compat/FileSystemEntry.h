#
ifndef
mozilla_dom_FileSystemEntry_h
#
define
mozilla_dom_FileSystemEntry_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
FileSystemBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
FileSystem
;
class
OwningFileOrDirectory
;
class
FileSystemEntry
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
FileSystemEntry
)
static
already_AddRefed
<
FileSystemEntry
>
Create
(
nsIGlobalObject
*
aGlobalObject
const
OwningFileOrDirectory
&
aFileOrDirectory
FileSystem
*
aFileSystem
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
bool
IsFile
(
)
const
{
return
false
;
}
virtual
bool
IsDirectory
(
)
const
{
return
false
;
}
virtual
void
GetName
(
nsAString
&
aName
ErrorResult
&
aRv
)
const
=
0
;
virtual
void
GetFullPath
(
nsAString
&
aFullPath
ErrorResult
&
aRv
)
const
=
0
;
void
GetParent
(
const
Optional
<
OwningNonNull
<
FileSystemEntryCallback
>
>
&
aSuccessCallback
const
Optional
<
OwningNonNull
<
ErrorCallback
>
>
&
aErrorCallback
)
;
FileSystem
*
Filesystem
(
)
const
{
return
mFileSystem
;
}
protected
:
FileSystemEntry
(
nsIGlobalObject
*
aGlobalObject
FileSystemEntry
*
aParentEntry
FileSystem
*
aFileSystem
)
;
virtual
~
FileSystemEntry
(
)
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mParent
;
RefPtr
<
FileSystemEntry
>
mParentEntry
;
RefPtr
<
FileSystem
>
mFileSystem
;
}
;
}
}
#
endif
