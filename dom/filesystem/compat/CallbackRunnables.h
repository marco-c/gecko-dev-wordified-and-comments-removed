#
ifndef
mozilla_dom_ErrorCallbackRunnable_h
#
define
mozilla_dom_ErrorCallbackRunnable_h
#
include
"
FileSystemDirectoryEntry
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
FileSystemEntriesCallback
;
class
EntryCallbackRunnable
final
:
public
Runnable
{
public
:
EntryCallbackRunnable
(
FileSystemEntryCallback
*
aCallback
FileSystemEntry
*
aEntry
)
;
NS_IMETHOD
Run
(
)
override
;
private
:
RefPtr
<
FileSystemEntryCallback
>
mCallback
;
RefPtr
<
FileSystemEntry
>
mEntry
;
}
;
class
ErrorCallbackRunnable
final
:
public
Runnable
{
public
:
ErrorCallbackRunnable
(
nsIGlobalObject
*
aGlobalObject
ErrorCallback
*
aCallback
nsresult
aError
)
;
NS_IMETHOD
Run
(
)
override
;
private
:
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
ErrorCallback
>
mCallback
;
nsresult
mError
;
}
;
class
EmptyEntriesCallbackRunnable
final
:
public
Runnable
{
public
:
explicit
EmptyEntriesCallbackRunnable
(
FileSystemEntriesCallback
*
aCallback
)
;
NS_IMETHOD
Run
(
)
override
;
private
:
RefPtr
<
FileSystemEntriesCallback
>
mCallback
;
}
;
class
GetEntryHelper
final
:
public
PromiseNativeHandler
{
public
:
NS_DECL_ISUPPORTS
GetEntryHelper
(
FileSystemDirectoryEntry
*
aParentEntry
FileSystem
*
aFileSystem
FileSystemEntryCallback
*
aSuccessCallback
ErrorCallback
*
aErrorCallback
FileSystemDirectoryEntry
:
:
GetInternalType
aType
)
;
virtual
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
virtual
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
private
:
~
GetEntryHelper
(
)
;
void
Error
(
nsresult
aError
)
;
RefPtr
<
FileSystemDirectoryEntry
>
mParentEntry
;
RefPtr
<
FileSystem
>
mFileSystem
;
RefPtr
<
FileSystemEntryCallback
>
mSuccessCallback
;
RefPtr
<
ErrorCallback
>
mErrorCallback
;
FileSystemDirectoryEntry
:
:
GetInternalType
mType
;
}
;
class
FileSystemEntryCallbackHelper
{
public
:
static
void
Call
(
const
Optional
<
OwningNonNull
<
FileSystemEntryCallback
>
>
&
aEntryCallback
FileSystemEntry
*
aEntry
)
;
}
;
class
ErrorCallbackHelper
{
public
:
static
void
Call
(
nsIGlobalObject
*
aGlobal
const
Optional
<
OwningNonNull
<
ErrorCallback
>
>
&
aErrorCallback
nsresult
aError
)
;
}
;
}
}
#
endif
