#
ifndef
mozilla_dom_CreateFileTask_h
#
define
mozilla_dom_CreateFileTask_h
#
include
"
mozilla
/
dom
/
FileSystemTaskBase
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
class
nsIInputStream
;
namespace
mozilla
{
namespace
dom
{
class
Blob
;
class
BlobImpl
;
class
Promise
;
class
CreateFileTask
final
:
public
FileSystemTaskBase
{
public
:
static
already_AddRefed
<
CreateFileTask
>
Create
(
FileSystemBase
*
aFileSystem
nsIFile
*
aFile
Blob
*
aBlobData
InfallibleTArray
<
uint8_t
>
&
aArrayData
bool
replace
ErrorResult
&
aRv
)
;
static
already_AddRefed
<
CreateFileTask
>
Create
(
FileSystemBase
*
aFileSystem
const
FileSystemCreateFileParams
&
aParam
FileSystemRequestParent
*
aParent
ErrorResult
&
aRv
)
;
virtual
~
CreateFileTask
(
)
;
already_AddRefed
<
Promise
>
GetPromise
(
)
;
virtual
void
GetPermissionAccessType
(
nsCString
&
aAccess
)
const
override
;
protected
:
virtual
FileSystemParams
GetRequestParams
(
const
nsString
&
aSerializedDOMPath
ErrorResult
&
aRv
)
const
override
;
virtual
FileSystemResponseValue
GetSuccessRequestResult
(
ErrorResult
&
aRv
)
const
override
;
virtual
void
SetSuccessRequestResult
(
const
FileSystemResponseValue
&
aValue
ErrorResult
&
aRv
)
override
;
virtual
nsresult
Work
(
)
override
;
virtual
void
HandlerCallback
(
)
override
;
private
:
CreateFileTask
(
FileSystemBase
*
aFileSystem
nsIFile
*
aFile
bool
aReplace
)
;
CreateFileTask
(
FileSystemBase
*
aFileSystem
const
FileSystemCreateFileParams
&
aParam
FileSystemRequestParent
*
aParent
)
;
void
GetOutputBufferSize
(
)
const
;
static
uint32_t
sOutputBufferSize
;
RefPtr
<
Promise
>
mPromise
;
nsCOMPtr
<
nsIFile
>
mTargetPath
;
RefPtr
<
Blob
>
mBlobData
;
nsCOMPtr
<
nsIInputStream
>
mBlobStream
;
InfallibleTArray
<
uint8_t
>
mArrayData
;
bool
mReplace
;
RefPtr
<
BlobImpl
>
mTargetBlobImpl
;
}
;
}
}
#
endif
