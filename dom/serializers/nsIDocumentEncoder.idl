#
include
"
nsISupports
.
idl
"
interface
nsIOutputStream
;
webidl
Document
;
webidl
Node
;
webidl
Range
;
webidl
Selection
;
%
{
C
+
+
class
nsINode
;
%
}
[
ptr
]
native
nsINodePtr
(
nsINode
)
;
[
scriptable
uuid
(
3d9371d8
-
a2ad
-
403e
-
8b0e
-
8885ad3562e3
)
]
interface
nsIDocumentEncoderNodeFixup
:
nsISupports
{
Node
fixupNode
(
in
Node
aNode
out
boolean
aSerializeCloneKids
)
;
}
;
[
scriptable
uuid
(
21f112df
-
d96f
-
47da
-
bfcb
-
5331273003d1
)
]
interface
nsIDocumentEncoder
:
nsISupports
{
const
unsigned
long
OutputSelectionOnly
=
(
1
<
<
0
)
;
const
unsigned
long
OutputFormatted
=
(
1
<
<
1
)
;
const
unsigned
long
OutputRaw
=
(
1
<
<
2
)
;
const
unsigned
long
OutputBodyOnly
=
(
1
<
<
3
)
;
const
unsigned
long
OutputPreformatted
=
(
1
<
<
4
)
;
const
unsigned
long
OutputWrap
=
(
1
<
<
5
)
;
const
unsigned
long
OutputFormatFlowed
=
(
1
<
<
6
)
;
const
unsigned
long
OutputAbsoluteLinks
=
(
1
<
<
7
)
;
const
unsigned
long
OutputCRLineBreak
=
(
1
<
<
9
)
;
const
unsigned
long
OutputLFLineBreak
=
(
1
<
<
10
)
;
const
unsigned
long
OutputNoScriptContent
=
(
1
<
<
11
)
;
const
unsigned
long
OutputNoFramesContent
=
(
1
<
<
12
)
;
const
unsigned
long
OutputNoFormattingInPre
=
(
1
<
<
13
)
;
const
unsigned
long
OutputEncodeBasicEntities
=
(
1
<
<
14
)
;
const
unsigned
long
OutputPersistNBSP
=
(
1
<
<
17
)
;
const
unsigned
long
OutputDontRewriteEncodingDeclaration
=
(
1
<
<
18
)
;
const
unsigned
long
SkipInvisibleContent
=
(
1
<
<
19
)
;
const
unsigned
long
OutputFormatDelSp
=
(
1
<
<
20
)
;
const
unsigned
long
OutputDropInvisibleBreak
=
(
1
<
<
21
)
;
const
unsigned
long
OutputIgnoreMozDirty
=
(
1
<
<
22
)
;
const
unsigned
long
OutputForPlainTextClipboardCopy
=
(
1
<
<
25
)
;
const
unsigned
long
OutputRubyAnnotation
=
(
1
<
<
26
)
;
const
unsigned
long
OutputDisallowLineBreaking
=
(
1
<
<
27
)
;
const
unsigned
long
RequiresReinitAfterOutput
=
(
1
<
<
28
)
;
const
unsigned
long
AllowCrossShadowBoundary
=
(
1
<
<
29
)
;
void
init
(
in
Document
aDocument
in
AString
aMimeType
in
unsigned
long
aFlags
)
;
[
noscript
]
void
nativeInit
(
in
Document
aDocument
in
AString
aMimeType
in
unsigned
long
aFlags
)
;
void
setSelection
(
in
Selection
aSelection
)
;
void
setRange
(
in
Range
aRange
)
;
void
setNode
(
in
Node
aNode
)
;
void
setContainerNode
(
in
Node
aContainer
)
;
void
setCharset
(
in
ACString
aCharset
)
;
void
setWrapColumn
(
in
unsigned
long
aWrapColumn
)
;
readonly
attribute
AString
mimeType
;
void
encodeToStream
(
in
nsIOutputStream
aStream
)
;
AString
encodeToString
(
)
;
AString
encodeToStringWithContext
(
out
AString
aContextString
out
AString
aInfoString
)
;
AString
encodeToStringWithMaxLength
(
in
unsigned
long
aMaxLength
)
;
void
setNodeFixup
(
in
nsIDocumentEncoderNodeFixup
aFixup
)
;
}
;
%
{
C
+
+
template
<
class
T
>
struct
already_AddRefed
;
bool
do_getDocumentTypeSupportedForEncoding
(
const
char
*
aContentType
)
;
already_AddRefed
<
nsIDocumentEncoder
>
do_createDocumentEncoder
(
const
char
*
aContentType
)
;
already_AddRefed
<
nsIDocumentEncoder
>
do_createHTMLCopyEncoder
(
)
;
%
}
