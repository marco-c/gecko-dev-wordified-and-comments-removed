#
include
"
WebBrowserPersistSerializeChild
.
h
"
#
include
<
algorithm
>
#
include
"
nsThreadUtils
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
WebBrowserPersistSerializeChild
nsIWebBrowserPersistWriteCompletion
nsIWebBrowserPersistURIMap
nsIOutputStream
)
WebBrowserPersistSerializeChild
:
:
WebBrowserPersistSerializeChild
(
const
WebBrowserPersistURIMap
&
aMap
)
:
mMap
(
aMap
)
{
}
WebBrowserPersistSerializeChild
:
:
~
WebBrowserPersistSerializeChild
(
)
=
default
;
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
OnFinish
(
nsIWebBrowserPersistDocument
*
aDocument
nsIOutputStream
*
aStream
const
nsACString
&
aContentType
nsresult
aStatus
)
{
MOZ_ASSERT
(
aStream
=
=
this
)
;
nsCString
contentType
(
aContentType
)
;
Send__delete__
(
this
contentType
aStatus
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
GetNumMappedURIs
(
uint32_t
*
aNum
)
{
*
aNum
=
static_cast
<
uint32_t
>
(
mMap
.
mapURIs
(
)
.
Length
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
GetURIMapping
(
uint32_t
aIndex
nsACString
&
aMapFrom
nsACString
&
aMapTo
)
{
if
(
aIndex
>
=
mMap
.
mapURIs
(
)
.
Length
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
aMapFrom
=
mMap
.
mapURIs
(
)
[
aIndex
]
.
mapFrom
(
)
;
aMapTo
=
mMap
.
mapURIs
(
)
[
aIndex
]
.
mapTo
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
GetTargetBaseURI
(
nsACString
&
aURI
)
{
aURI
=
mMap
.
targetBaseURI
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
Close
(
)
{
NS_WARNING
(
"
WebBrowserPersistSerializeChild
:
:
Close
(
)
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
Flush
(
)
{
NS_WARNING
(
"
WebBrowserPersistSerializeChild
:
:
Flush
(
)
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
Write
(
const
char
*
aBuf
uint32_t
aCount
uint32_t
*
aWritten
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
"
Fix
this
class
to
be
thread
-
safe
.
"
)
;
const
char
*
buf
=
aBuf
;
uint32_t
count
=
aCount
;
*
aWritten
=
0
;
while
(
count
>
0
)
{
uint32_t
toWrite
=
std
:
:
min
(
IPC
:
:
MAX_MESSAGE_SIZE
count
)
;
nsTArray
<
uint8_t
>
arrayBuf
;
arrayBuf
.
AppendElements
(
buf
toWrite
)
;
SendWriteData
(
std
:
:
move
(
arrayBuf
)
)
;
*
aWritten
+
=
toWrite
;
buf
+
=
toWrite
;
count
-
=
toWrite
;
}
return
NS_OK
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
WriteFrom
(
nsIInputStream
*
aFrom
uint32_t
aCount
uint32_t
*
aWritten
)
{
NS_WARNING
(
"
WebBrowserPersistSerializeChild
:
:
WriteFrom
(
)
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
WriteSegments
(
nsReadSegmentFun
aFun
void
*
aCtx
uint32_t
aCount
uint32_t
*
aWritten
)
{
NS_WARNING
(
"
WebBrowserPersistSerializeChild
:
:
WriteSegments
(
)
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
WebBrowserPersistSerializeChild
:
:
IsNonBlocking
(
bool
*
aNonBlocking
)
{
*
aNonBlocking
=
false
;
return
NS_OK
;
}
}
