#
ifndef
DOM_ENCODING_TEXTDECODERSTREAM_H_
#
define
DOM_ENCODING_TEXTDECODERSTREAM_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
TextDecoder
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
Decoder
;
class
Encoding
;
namespace
dom
{
class
ReadableStream
;
class
WritableStream
;
struct
TextDecoderOptions
;
class
TransformStream
;
}
}
namespace
mozilla
:
:
dom
{
class
TextDecoderStream
final
:
public
nsISupports
public
nsWrapperCache
public
TextDecoderCommon
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
TextDecoderStream
)
public
:
TextDecoderStream
(
nsISupports
*
aGlobal
const
Encoding
&
aEncoding
bool
aFatal
bool
aIgnoreBOM
TransformStream
&
aStream
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
mozilla
:
:
Decoder
*
Decoder
(
)
{
return
mDecoder
.
get
(
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
already_AddRefed
<
TextDecoderStream
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
const
TextDecoderOptions
&
aOptions
ErrorResult
&
aRv
)
;
ReadableStream
*
Readable
(
)
const
;
WritableStream
*
Writable
(
)
const
;
private
:
~
TextDecoderStream
(
)
;
nsCOMPtr
<
nsISupports
>
mGlobal
;
RefPtr
<
TransformStream
>
mStream
;
}
;
}
#
endif
