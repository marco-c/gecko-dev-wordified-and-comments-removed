#
include
"
mozilla
/
dom
/
TextDecoderStream
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TextDecoderStreamBinding
.
h
"
#
include
"
mozilla
/
dom
/
TransformerCallbackHelpers
.
h
"
#
include
"
mozilla
/
dom
/
TransformStream
.
h
"
#
include
"
mozilla
/
dom
/
UnionTypes
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TextDecoderStream
mGlobal
mStream
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TextDecoderStream
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TextDecoderStream
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TextDecoderStream
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
TextDecoderStream
:
:
TextDecoderStream
(
nsISupports
*
aGlobal
const
Encoding
&
aEncoding
bool
aFatal
bool
aIgnoreBOM
TransformStream
&
aStream
)
:
mGlobal
(
aGlobal
)
mStream
(
&
aStream
)
{
mFatal
=
aFatal
;
mIgnoreBOM
=
aIgnoreBOM
;
aEncoding
.
Name
(
mEncoding
)
;
if
(
aIgnoreBOM
)
{
mDecoder
=
aEncoding
.
NewDecoderWithoutBOMHandling
(
)
;
}
else
{
mDecoder
=
aEncoding
.
NewDecoderWithBOMRemoval
(
)
;
}
}
TextDecoderStream
:
:
~
TextDecoderStream
(
)
=
default
;
JSObject
*
TextDecoderStream
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TextDecoderStream_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
static
Span
<
const
uint8_t
>
ExtractSpanFromBufferSource
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aBufferSource
ErrorResult
&
aRv
)
{
if
(
!
aBufferSource
.
isObject
(
)
)
{
aRv
.
ThrowTypeError
(
"
Input
is
not
an
ArrayBuffer
nor
an
ArrayBufferView
"
)
;
return
Span
<
const
uint8_t
>
(
)
;
}
bool
tryNext
;
OwningArrayBufferViewOrArrayBuffer
bufferSource
;
if
(
bufferSource
.
TrySetToArrayBufferView
(
aCx
aBufferSource
tryNext
false
)
&
&
!
tryNext
)
{
ArrayBufferView
&
view
=
bufferSource
.
GetAsArrayBufferView
(
)
;
view
.
ComputeState
(
)
;
return
Span
(
view
.
Data
(
)
view
.
Length
(
)
)
;
}
if
(
!
tryNext
)
{
aRv
.
MightThrowJSException
(
)
;
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
Span
<
const
uint8_t
>
(
)
;
}
if
(
bufferSource
.
TrySetToArrayBuffer
(
aCx
aBufferSource
tryNext
false
)
&
&
!
tryNext
)
{
ArrayBuffer
&
buffer
=
bufferSource
.
GetAsArrayBuffer
(
)
;
buffer
.
ComputeState
(
)
;
return
Span
(
buffer
.
Data
(
)
buffer
.
Length
(
)
)
;
}
if
(
!
tryNext
)
{
aRv
.
MightThrowJSException
(
)
;
aRv
.
StealExceptionFromJSContext
(
aCx
)
;
return
Span
<
const
uint8_t
>
(
)
;
}
aRv
.
ThrowTypeError
(
"
Input
is
not
an
ArrayBuffer
nor
an
ArrayBufferView
"
)
;
return
Span
<
const
uint8_t
>
(
)
;
}
class
TextDecoderStreamAlgorithms
:
public
TransformerAlgorithmsWrapper
{
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
TextDecoderStreamAlgorithms
TransformerAlgorithmsBase
)
void
SetDecoderStream
(
TextDecoderStream
&
aStream
)
{
mDecoderStream
=
&
aStream
;
}
MOZ_CAN_RUN_SCRIPT
void
DecodeSpanAndEnqueue
(
JSContext
*
aCx
Span
<
const
uint8_t
>
aInput
bool
aFlush
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
{
CheckedInt
<
nsAString
:
:
size_type
>
needed
=
mDecoderStream
-
>
Decoder
(
)
-
>
MaxUTF16BufferLength
(
aInput
.
Length
(
)
)
;
if
(
!
needed
.
isValid
(
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
nsString
outDecodedString
;
auto
output
=
outDecodedString
.
GetMutableData
(
needed
.
value
(
)
fallible
)
;
if
(
!
output
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
mDecoderStream
-
>
DecodeNative
(
aInput
!
aFlush
outDecodedString
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
if
(
outDecodedString
.
Length
(
)
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
outputChunk
(
aCx
)
;
if
(
!
xpc
:
:
NonVoidStringToJsval
(
aCx
outDecodedString
&
outputChunk
)
)
{
JS_ClearPendingException
(
aCx
)
;
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
aController
.
Enqueue
(
aCx
outputChunk
aRv
)
;
}
}
MOZ_CAN_RUN_SCRIPT
void
TransformCallbackImpl
(
JS
:
:
Handle
<
JS
:
:
Value
>
aChunk
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
Span
<
const
uint8_t
>
input
=
ExtractSpanFromBufferSource
(
cx
aChunk
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
DecodeSpanAndEnqueue
(
cx
input
false
aController
aRv
)
;
}
MOZ_CAN_RUN_SCRIPT
void
FlushCallbackImpl
(
TransformStreamDefaultController
&
aController
ErrorResult
&
aRv
)
override
{
AutoJSAPI
jsapi
;
if
(
!
jsapi
.
Init
(
aController
.
GetParentObject
(
)
)
)
{
aRv
.
ThrowUnknownError
(
"
Internal
error
"
)
;
return
;
}
JSContext
*
cx
=
jsapi
.
cx
(
)
;
DecodeSpanAndEnqueue
(
cx
Span
<
const
uint8_t
>
(
)
true
aController
aRv
)
;
}
private
:
~
TextDecoderStreamAlgorithms
(
)
override
=
default
;
RefPtr
<
TextDecoderStream
>
mDecoderStream
;
}
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
TextDecoderStreamAlgorithms
TransformerAlgorithmsBase
mDecoderStream
)
NS_IMPL_ADDREF_INHERITED
(
TextDecoderStreamAlgorithms
TransformerAlgorithmsBase
)
NS_IMPL_RELEASE_INHERITED
(
TextDecoderStreamAlgorithms
TransformerAlgorithmsBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TextDecoderStreamAlgorithms
)
NS_INTERFACE_MAP_END_INHERITING
(
TransformerAlgorithmsBase
)
already_AddRefed
<
TextDecoderStream
>
TextDecoderStream
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aLabel
const
TextDecoderOptions
&
aOptions
ErrorResult
&
aRv
)
{
const
Encoding
*
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
aLabel
)
;
if
(
!
encoding
)
{
NS_ConvertUTF16toUTF8
label
(
aLabel
)
;
label
.
Trim
(
"
\
t
\
n
\
f
\
r
"
)
;
aRv
.
ThrowRangeError
<
MSG_ENCODING_NOT_SUPPORTED
>
(
label
)
;
return
nullptr
;
}
auto
algorithms
=
MakeRefPtr
<
TextDecoderStreamAlgorithms
>
(
)
;
RefPtr
<
TransformStream
>
transformStream
=
TransformStream
:
:
CreateGeneric
(
aGlobal
*
algorithms
aRv
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
auto
decoderStream
=
MakeRefPtr
<
TextDecoderStream
>
(
aGlobal
.
GetAsSupports
(
)
*
encoding
aOptions
.
mFatal
aOptions
.
mIgnoreBOM
*
transformStream
)
;
algorithms
-
>
SetDecoderStream
(
*
decoderStream
)
;
return
decoderStream
.
forget
(
)
;
}
ReadableStream
*
TextDecoderStream
:
:
Readable
(
)
const
{
return
mStream
-
>
Readable
(
)
;
}
WritableStream
*
TextDecoderStream
:
:
Writable
(
)
const
{
return
mStream
-
>
Writable
(
)
;
}
}
