#
ifndef
mozilla_dom_encodingutils_h_
#
define
mozilla_dom_encodingutils_h_
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
namespace
mozilla
{
namespace
dom
{
class
EncodingUtils
{
public
:
static
bool
FindEncodingForLabel
(
const
nsACString
&
aLabel
nsACString
&
aOutEncoding
)
;
static
bool
FindEncodingForLabel
(
const
nsAString
&
aLabel
nsACString
&
aOutEncoding
)
{
return
FindEncodingForLabel
(
NS_ConvertUTF16toUTF8
(
aLabel
)
aOutEncoding
)
;
}
static
bool
FindEncodingForLabelNoReplacement
(
const
nsACString
&
aLabel
nsACString
&
aOutEncoding
)
;
static
bool
FindEncodingForLabelNoReplacement
(
const
nsAString
&
aLabel
nsACString
&
aOutEncoding
)
{
return
FindEncodingForLabelNoReplacement
(
NS_ConvertUTF16toUTF8
(
aLabel
)
aOutEncoding
)
;
}
template
<
class
T
>
static
void
TrimSpaceCharacters
(
T
&
aString
)
{
aString
.
Trim
(
"
\
t
\
n
\
f
\
r
"
)
;
}
static
bool
IsAsciiCompatible
(
const
nsACString
&
aPreferredName
)
;
static
UniquePtr
<
Decoder
>
DecoderForEncoding
(
const
char
*
aEncoding
)
{
nsDependentCString
encoding
(
aEncoding
)
;
return
DecoderForEncoding
(
encoding
)
;
}
static
UniquePtr
<
Decoder
>
DecoderForEncoding
(
const
nsACString
&
aEncoding
)
;
static
UniquePtr
<
Encoder
>
EncoderForEncoding
(
const
char
*
aEncoding
)
{
nsDependentCString
encoding
(
aEncoding
)
;
return
EncoderForEncoding
(
encoding
)
;
}
static
UniquePtr
<
Encoder
>
EncoderForEncoding
(
const
nsACString
&
aEncoding
)
;
static
void
LangGroupForEncoding
(
const
nsACString
&
aEncoding
nsACString
&
aOutGroup
)
;
private
:
EncodingUtils
(
)
=
delete
;
}
;
}
}
#
endif
