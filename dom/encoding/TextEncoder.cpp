#
include
"
mozilla
/
dom
/
TextEncoder
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
nsReadableUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
void
TextEncoder
:
:
Init
(
)
{
}
void
TextEncoder
:
:
Encode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aObj
const
nsAString
&
aString
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
{
CheckedInt
<
uint32_t
>
bufLen
(
aString
.
Length
(
)
)
;
bufLen
*
=
3
;
if
(
!
bufLen
.
isValid
(
)
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
auto
data
=
mozilla
:
:
MakeUniqueFallible
<
uint8_t
[
]
>
(
bufLen
.
value
(
)
)
;
if
(
!
data
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
size_t
utf8Len
=
ConvertUTF16toUTF8
(
aString
MakeSpan
(
reinterpret_cast
<
char
*
>
(
data
.
get
(
)
)
bufLen
.
value
(
)
)
)
;
MOZ_ASSERT
(
utf8Len
<
=
bufLen
.
value
(
)
)
;
JSAutoRealm
ar
(
aCx
aObj
)
;
JSObject
*
outView
=
Uint8Array
:
:
Create
(
aCx
utf8Len
data
.
get
(
)
)
;
if
(
!
outView
)
{
aRv
.
Throw
(
NS_ERROR_OUT_OF_MEMORY
)
;
return
;
}
aRetval
.
set
(
outView
)
;
}
void
TextEncoder
:
:
GetEncoding
(
nsAString
&
aEncoding
)
{
aEncoding
.
AssignLiteral
(
"
utf
-
8
"
)
;
}
}
}
