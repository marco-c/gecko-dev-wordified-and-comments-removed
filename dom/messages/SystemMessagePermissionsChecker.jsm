"
use
strict
"
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppsUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PermissionsInstaller
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PermissionsTable
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
PermissionSettings
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
SystemMessagePermissionsChecker
"
"
SystemMessagePermissionsTable
"
]
;
function
debug
(
aStr
)
{
}
this
.
SystemMessagePermissionsTable
=
{
"
activity
"
:
{
}
"
alarm
"
:
{
"
alarms
"
:
[
]
}
"
bluetooth
-
dialer
-
command
"
:
{
"
telephony
"
:
[
]
}
"
bluetooth
-
cancel
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
hid
-
status
-
changed
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
pairing
-
request
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
opp
-
transfer
-
complete
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
opp
-
update
-
progress
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
opp
-
receiving
-
file
-
confirmation
"
:
{
"
bluetooth
"
:
[
]
}
"
bluetooth
-
opp
-
transfer
-
start
"
:
{
"
bluetooth
"
:
[
]
}
"
cellbroadcast
-
received
"
:
{
"
cellbroadcast
"
:
[
]
}
"
connection
"
:
{
}
"
captive
-
portal
"
:
{
"
wifi
-
manage
"
:
[
]
}
"
dummy
-
system
-
message
"
:
{
}
"
dummy
-
system
-
message2
"
:
{
}
"
headset
-
button
"
:
{
}
"
icc
-
stkcommand
"
:
{
"
settings
"
:
[
"
read
"
"
write
"
]
}
"
media
-
button
"
:
{
}
"
networkstats
-
alarm
"
:
{
"
networkstats
-
manage
"
:
[
]
}
"
notification
"
:
{
"
desktop
-
notification
"
:
[
]
}
"
push
"
:
{
"
push
"
:
[
]
}
"
push
-
register
"
:
{
"
push
"
:
[
]
}
"
request
-
sync
"
:
{
}
"
sms
-
delivery
-
success
"
:
{
"
sms
"
:
[
]
}
"
sms
-
delivery
-
error
"
:
{
"
sms
"
:
[
]
}
"
sms
-
read
-
success
"
:
{
"
sms
"
:
[
]
}
"
sms
-
received
"
:
{
"
sms
"
:
[
]
}
"
sms
-
sent
"
:
{
"
sms
"
:
[
]
}
"
sms
-
failed
"
:
{
"
sms
"
:
[
]
}
"
telephony
-
new
-
call
"
:
{
"
telephony
"
:
[
]
}
"
telephony
-
call
-
ended
"
:
{
"
telephony
"
:
[
]
}
"
ussd
-
received
"
:
{
"
mobileconnection
"
:
[
]
}
"
wappush
-
received
"
:
{
"
wappush
"
:
[
]
}
"
cdma
-
info
-
rec
-
received
"
:
{
"
mobileconnection
"
:
[
]
}
"
nfc
-
hci
-
event
-
transaction
"
:
{
"
nfc
-
hci
-
events
"
:
[
]
}
"
nfc
-
manager
-
tech
-
discovered
"
:
{
"
nfc
-
manager
"
:
[
]
}
"
nfc
-
manager
-
tech
-
lost
"
:
{
"
nfc
-
manager
"
:
[
]
}
"
nfc
-
manager
-
send
-
file
"
:
{
"
nfc
-
manager
"
:
[
]
}
"
wifip2p
-
pairing
-
request
"
:
{
"
wifi
-
manage
"
:
[
]
}
"
first
-
run
-
with
-
sim
"
:
{
"
settings
"
:
[
"
read
"
"
write
"
]
}
"
audiochannel
-
interruption
-
begin
"
:
{
}
"
audiochannel
-
interruption
-
ended
"
:
{
}
}
;
this
.
SystemMessagePermissionsChecker
=
{
getSystemMessagePermissions
:
function
getSystemMessagePermissions
(
aSysMsgName
)
{
debug
(
"
getSystemMessagePermissions
(
)
:
aSysMsgName
:
"
+
aSysMsgName
)
;
let
permNames
=
SystemMessagePermissionsTable
[
aSysMsgName
]
;
if
(
permNames
=
=
=
undefined
)
{
debug
(
"
'
"
+
aSysMsgName
+
"
'
is
not
associated
with
permissions
.
"
+
"
Please
add
them
to
the
SystemMessage
[
Prefix
]
PermissionsTable
.
"
)
;
return
null
;
}
let
object
=
{
}
;
for
(
let
permName
in
permNames
)
{
if
(
PermissionsTable
[
permName
]
=
=
=
undefined
)
{
debug
(
"
'
"
+
permName
+
"
'
for
'
"
+
aSysMsgName
+
"
'
is
invalid
.
"
+
"
Please
correct
it
in
the
SystemMessage
[
Prefix
]
PermissionsTable
.
"
)
;
return
null
;
}
let
access
=
permNames
[
permName
]
;
if
(
!
access
|
|
!
Array
.
isArray
(
access
)
)
{
debug
(
"
'
"
+
permName
+
"
'
is
not
associated
with
access
array
.
"
+
"
Please
correct
it
in
the
SystemMessage
[
Prefix
]
PermissionsTable
.
"
)
;
return
null
;
}
object
[
permName
]
=
appendAccessToPermName
(
permName
access
)
;
}
return
object
}
isSystemMessagePermittedToRegister
:
function
(
aSysMsgName
aManifestURL
aOrigin
aManifest
)
{
let
newManifest
=
new
ManifestHelper
(
aManifest
aOrigin
aManifestURL
)
;
let
launchUrl
=
newManifest
.
fullLaunchPath
(
)
;
return
this
.
isSystemMessagePermittedToSend
(
aSysMsgName
launchUrl
aManifestURL
)
;
}
isSystemMessagePermittedToSend
:
function
isSystemMessagePermittedToSend
(
aSysMsgName
aPageURL
aManifestURL
)
{
debug
(
"
isSystemMessagePermittedToSend
(
)
:
"
+
"
aSysMsgName
:
"
+
aSysMsgName
+
"
"
+
"
aPageURL
:
"
+
aPageURL
+
"
"
+
"
aManifestURL
:
"
+
aManifestURL
)
;
let
permNames
=
this
.
getSystemMessagePermissions
(
aSysMsgName
)
;
if
(
permNames
=
=
=
null
)
{
return
false
;
}
let
pageURI
=
Services
.
io
.
newURI
(
aPageURL
null
null
)
;
for
(
let
permName
in
permNames
)
{
let
permNamesWithAccess
=
permNames
[
permName
]
;
for
(
let
idx
in
permNamesWithAccess
)
{
if
(
PermissionSettingsModule
.
getPermission
(
permNamesWithAccess
[
idx
]
aManifestURL
pageURI
.
prePath
false
)
!
=
"
allow
"
)
{
debug
(
"
'
"
+
aSysMsgName
+
"
'
isn
'
t
permitted
by
'
"
+
permName
+
"
'
.
"
+
"
Please
add
the
permission
for
app
:
'
"
+
pageURI
.
prePath
+
"
'
.
"
)
;
return
false
;
}
}
}
return
true
;
}
}
;
