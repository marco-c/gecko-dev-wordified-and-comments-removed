#
include
"
XRPermissionRequest
.
h
"
#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS_CYCLE_COLLECTION_INHERITED_0
(
XRPermissionRequest
ContentPermissionRequestBase
)
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
XRPermissionRequest
ContentPermissionRequestBase
)
XRPermissionRequest
:
:
XRPermissionRequest
(
nsPIDOMWindowInner
*
aWindow
uint64_t
aWindowId
)
:
ContentPermissionRequestBase
(
aWindow
-
>
GetDoc
(
)
-
>
NodePrincipal
(
)
aWindow
NS_LITERAL_CSTRING
(
"
dom
.
vr
"
)
NS_LITERAL_CSTRING
(
"
xr
"
)
)
mWindowId
(
aWindowId
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aWindow
-
>
GetDoc
(
)
)
;
mPrincipal
=
aWindow
-
>
GetDoc
(
)
-
>
NodePrincipal
(
)
;
MOZ_ASSERT
(
mPrincipal
)
;
}
NS_IMETHODIMP
XRPermissionRequest
:
:
Cancel
(
)
{
nsGlobalWindowInner
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mWindowId
)
;
if
(
!
window
)
{
return
NS_OK
;
}
window
-
>
OnXRPermissionRequestCancel
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
XRPermissionRequest
:
:
Allow
(
JS
:
:
HandleValue
aChoices
)
{
MOZ_ASSERT
(
aChoices
.
isUndefined
(
)
)
;
nsGlobalWindowInner
*
window
=
nsGlobalWindowInner
:
:
GetInnerWindowWithId
(
mWindowId
)
;
if
(
!
window
)
{
return
NS_OK
;
}
window
-
>
OnXRPermissionRequestAllow
(
)
;
return
NS_OK
;
}
nsresult
XRPermissionRequest
:
:
Start
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
CheckPermissionDelegate
(
)
)
{
return
Cancel
(
)
;
}
PromptResult
pr
=
CheckPromptPrefs
(
)
;
if
(
pr
=
=
PromptResult
:
:
Granted
)
{
return
Allow
(
JS
:
:
UndefinedHandleValue
)
;
}
if
(
pr
=
=
PromptResult
:
:
Denied
)
{
return
Cancel
(
)
;
}
return
nsContentPermissionUtils
:
:
AskPermission
(
this
mWindow
)
;
}
}
}
