#
ifndef
mozilla_dom_XRRenderState_h_
#
define
mozilla_dom_XRRenderState_h_
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
WebXRBinding
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
namespace
dom
{
class
XRWebGLLayer
;
class
XRRenderState
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
XRRenderState
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
XRRenderState
)
explicit
XRRenderState
(
nsISupports
*
aParent
XRSession
*
aSession
)
;
explicit
XRRenderState
(
const
XRRenderState
&
aOther
)
;
void
SetDepthNear
(
double
aDepthNear
)
;
void
SetDepthFar
(
double
aDepthFar
)
;
void
SetInlineVerticalFieldOfView
(
double
aInlineVerticalFieldOfView
)
;
void
SetBaseLayer
(
XRWebGLLayer
*
aBaseLayer
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
double
DepthNear
(
)
;
double
DepthFar
(
)
;
Nullable
<
double
>
GetInlineVerticalFieldOfView
(
)
;
XRWebGLLayer
*
GetBaseLayer
(
)
;
void
SetOutputCanvas
(
HTMLCanvasElement
*
aCanvas
)
;
HTMLCanvasElement
*
GetOutputCanvas
(
)
const
;
void
SetCompositionDisabled
(
bool
aCompositionDisabled
)
;
bool
IsCompositionDisabled
(
)
const
;
protected
:
virtual
~
XRRenderState
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
XRSession
>
mSession
;
RefPtr
<
XRWebGLLayer
>
mBaseLayer
;
double
mDepthNear
;
double
mDepthFar
;
Nullable
<
double
>
mInlineVerticalFieldOfView
;
RefPtr
<
HTMLCanvasElement
>
mOutputCanvas
;
bool
mCompositionDisabled
;
}
;
}
}
#
endif
