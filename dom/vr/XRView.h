#
ifndef
mozilla_dom_XRView_h_
#
define
mozilla_dom_XRView_h_
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
WebXRBinding
.
h
"
#
include
"
gfxVR
.
h
"
namespace
mozilla
{
namespace
dom
{
enum
class
XREye
:
uint8_t
;
class
XRRigidTransform
;
class
XRView
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
XRView
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
XRView
)
explicit
XRView
(
nsISupports
*
aParent
const
XREye
&
aEye
const
gfx
:
:
Point3D
&
aPosition
const
gfx
:
:
Matrix4x4
&
aProjectionMatrix
)
;
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
XREye
Eye
(
)
const
;
void
GetProjectionMatrix
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
;
already_AddRefed
<
XRRigidTransform
>
GetTransform
(
ErrorResult
&
aRv
)
;
protected
:
virtual
~
XRView
(
)
;
void
LazyCreateMatrix
(
JS
:
:
Heap
<
JSObject
*
>
&
aArray
gfx
:
:
Matrix4x4
&
aMat
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aRetval
ErrorResult
&
aRv
)
;
nsCOMPtr
<
nsISupports
>
mParent
;
XREye
mEye
;
gfx
:
:
Point3D
mPosition
;
gfx
:
:
Matrix4x4
mProjectionMatrix
;
JS
:
:
Heap
<
JSObject
*
>
mJSProjectionMatrix
;
}
;
}
}
#
endif
