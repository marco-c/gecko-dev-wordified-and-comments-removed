#
ifndef
_mozilla_dom_Client_h
#
define
_mozilla_dom_Client_h
#
include
"
X11UndefineNone
.
h
"
#
include
"
mozilla
/
dom
/
ClientBinding
.
h
"
#
include
"
mozilla
/
StorageAccess
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
ClientHandle
;
class
ClientInfoAndState
;
struct
PostMessageOptions
;
class
Promise
;
template
<
typename
t
>
class
Sequence
;
class
Client
final
:
public
nsISupports
public
nsWrapperCache
{
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
UniquePtr
<
ClientInfoAndState
>
mData
;
RefPtr
<
ClientHandle
>
mHandle
;
~
Client
(
)
=
default
;
void
EnsureHandle
(
)
;
public
:
Client
(
nsIGlobalObject
*
aGlobal
const
ClientInfoAndState
&
aData
)
;
TimeStamp
CreationTime
(
)
const
;
TimeStamp
LastFocusTime
(
)
const
;
StorageAccess
GetStorageAccess
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
void
GetUrl
(
nsAString
&
aUrlOut
)
const
;
void
GetId
(
nsAString
&
aIdOut
)
const
;
ClientType
Type
(
)
const
;
FrameType
GetFrameType
(
)
const
;
VisibilityState
GetVisibilityState
(
)
const
;
bool
Focused
(
)
const
;
already_AddRefed
<
Promise
>
Focus
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Navigate
(
const
nsAString
&
aURL
ErrorResult
&
aRv
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
Sequence
<
JSObject
*
>
&
aTransferrable
ErrorResult
&
aRv
)
;
void
PostMessage
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aMessage
const
PostMessageOptions
&
aOptions
ErrorResult
&
aRv
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
mozilla
:
:
dom
:
:
Client
)
}
;
}
}
#
endif
