#
include
"
ClientSourceParent
.
h
"
#
include
"
ClientHandleParent
.
h
"
#
include
"
ClientManagerService
.
h
"
#
include
"
ClientSourceOpParent
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
IPCResult
;
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
IPCResult
ClientSourceParent
:
:
RecvTeardown
(
)
{
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
void
ClientSourceParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mService
-
>
RemoveSource
(
this
)
;
nsTArray
<
ClientHandleParent
*
>
handleList
(
mHandleList
)
;
for
(
ClientHandleParent
*
handle
:
handleList
)
{
Unused
<
<
ClientHandleParent
:
:
Send__delete__
(
handle
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mHandleList
.
IsEmpty
(
)
)
;
}
PClientSourceOpParent
*
ClientSourceParent
:
:
AllocPClientSourceOpParent
(
const
ClientOpConstructorArgs
&
aArgs
)
{
MOZ_ASSERT_UNREACHABLE
(
"
ClientSourceOpParent
should
be
explicitly
constructed
.
"
)
;
return
nullptr
;
}
bool
ClientSourceParent
:
:
DeallocPClientSourceOpParent
(
PClientSourceOpParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
ClientSourceParent
:
:
ClientSourceParent
(
const
ClientSourceConstructorArgs
&
aArgs
)
:
mClientInfo
(
aArgs
.
id
(
)
aArgs
.
type
(
)
aArgs
.
principalInfo
(
)
aArgs
.
creationTime
(
)
)
mService
(
ClientManagerService
:
:
GetOrCreateInstance
(
)
)
{
mService
-
>
AddSource
(
this
)
;
}
ClientSourceParent
:
:
~
ClientSourceParent
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mHandleList
.
IsEmpty
(
)
)
;
}
const
ClientInfo
&
ClientSourceParent
:
:
Info
(
)
const
{
return
mClientInfo
;
}
void
ClientSourceParent
:
:
AttachHandle
(
ClientHandleParent
*
aClientHandle
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aClientHandle
)
;
MOZ_ASSERT
(
!
mHandleList
.
Contains
(
aClientHandle
)
)
;
mHandleList
.
AppendElement
(
aClientHandle
)
;
}
void
ClientSourceParent
:
:
DetachHandle
(
ClientHandleParent
*
aClientHandle
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aClientHandle
)
;
MOZ_ASSERT
(
mHandleList
.
Contains
(
aClientHandle
)
)
;
mHandleList
.
RemoveElement
(
aClientHandle
)
;
}
}
}
