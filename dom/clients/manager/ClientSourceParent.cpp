#
include
"
ClientSourceParent
.
h
"
#
include
"
ClientHandleParent
.
h
"
#
include
"
ClientManagerService
.
h
"
#
include
"
ClientSourceOpParent
.
h
"
#
include
"
ClientValidation
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
dom
/
PClientManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerManager
.
h
"
#
include
"
mozilla
/
dom
/
ServiceWorkerUtils
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundParent
.
h
"
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
AssertIsOnBackgroundThread
;
using
mozilla
:
:
ipc
:
:
BackgroundParent
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
namespace
{
class
KillContentParentRunnable
final
:
public
Runnable
{
RefPtr
<
ContentParent
>
mContentParent
;
public
:
explicit
KillContentParentRunnable
(
RefPtr
<
ContentParent
>
&
&
aContentParent
)
:
Runnable
(
"
KillContentParentRunnable
"
)
mContentParent
(
std
:
:
move
(
aContentParent
)
)
{
MOZ_ASSERT
(
mContentParent
)
;
}
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mContentParent
-
>
KillHard
(
"
invalid
ClientSourceParent
actor
"
)
;
mContentParent
=
nullptr
;
return
NS_OK
;
}
}
;
}
void
ClientSourceParent
:
:
KillInvalidChild
(
)
{
RefPtr
<
ContentParent
>
process
=
BackgroundParent
:
:
GetContentParent
(
Manager
(
)
-
>
Manager
(
)
)
;
Unused
<
<
ClientSourceParent
:
:
Send__delete__
(
this
)
;
if
(
!
process
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
invalid
ClientSourceParent
in
non
-
e10s
"
)
;
return
;
}
nsCOMPtr
<
nsIRunnable
>
r
=
new
KillContentParentRunnable
(
std
:
:
move
(
process
)
)
;
MOZ_ALWAYS_SUCCEEDS
(
SchedulerGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
ClientSourceParent
:
:
RecvWorkerSyncPing
(
)
{
AssertIsOnBackgroundThread
(
)
;
return
IPC_OK
(
)
;
}
IPCResult
ClientSourceParent
:
:
RecvTeardown
(
)
{
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
IPCResult
ClientSourceParent
:
:
RecvExecutionReady
(
const
ClientSourceExecutionReadyArgs
&
aArgs
)
{
if
(
!
ClientIsValidCreationURL
(
mClientInfo
.
PrincipalInfo
(
)
aArgs
.
url
(
)
)
)
{
KillInvalidChild
(
)
;
return
IPC_OK
(
)
;
}
mClientInfo
.
SetURL
(
aArgs
.
url
(
)
)
;
mClientInfo
.
SetFrameType
(
aArgs
.
frameType
(
)
)
;
mExecutionReady
=
true
;
for
(
ClientHandleParent
*
handle
:
mHandleList
)
{
Unused
<
<
handle
-
>
SendExecutionReady
(
mClientInfo
.
ToIPC
(
)
)
;
}
mExecutionReadyPromise
.
ResolveIfExists
(
true
__func__
)
;
return
IPC_OK
(
)
;
}
;
IPCResult
ClientSourceParent
:
:
RecvFreeze
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mFrozen
)
;
mFrozen
=
true
;
for
(
ClientHandleParent
*
handle
:
mHandleList
.
Clone
(
)
)
{
Unused
<
<
ClientHandleParent
:
:
Send__delete__
(
handle
)
;
}
return
IPC_OK
(
)
;
}
IPCResult
ClientSourceParent
:
:
RecvThaw
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mFrozen
)
;
mFrozen
=
false
;
return
IPC_OK
(
)
;
}
IPCResult
ClientSourceParent
:
:
RecvInheritController
(
const
ClientControlledArgs
&
aArgs
)
{
mController
.
reset
(
)
;
mController
.
emplace
(
aArgs
.
serviceWorker
(
)
)
;
if
(
ServiceWorkerParentInterceptEnabled
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ClientSourceParent
:
:
RecvInheritController
"
[
clientInfo
=
mClientInfo
controller
=
mController
.
ref
(
)
]
(
)
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE_VOID
(
swm
)
;
swm
-
>
NoteInheritedController
(
clientInfo
controller
)
;
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SchedulerGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
return
IPC_OK
(
)
;
}
IPCResult
ClientSourceParent
:
:
RecvNoteDOMContentLoaded
(
)
{
if
(
mController
.
isSome
(
)
&
&
ServiceWorkerParentInterceptEnabled
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ClientSourceParent
:
:
RecvNoteDOMContentLoaded
"
[
clientInfo
=
mClientInfo
]
(
)
{
RefPtr
<
ServiceWorkerManager
>
swm
=
ServiceWorkerManager
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE_VOID
(
swm
)
;
swm
-
>
MaybeCheckNavigationUpdate
(
clientInfo
)
;
}
)
;
MOZ_ALWAYS_SUCCEEDS
(
SchedulerGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
)
;
}
return
IPC_OK
(
)
;
}
void
ClientSourceParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
DebugOnly
<
bool
>
removed
=
mService
-
>
RemoveSource
(
this
)
;
MOZ_ASSERT
(
removed
)
;
for
(
ClientHandleParent
*
handle
:
mHandleList
.
Clone
(
)
)
{
Unused
<
<
ClientHandleParent
:
:
Send__delete__
(
handle
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mHandleList
.
IsEmpty
(
)
)
;
}
PClientSourceOpParent
*
ClientSourceParent
:
:
AllocPClientSourceOpParent
(
const
ClientOpConstructorArgs
&
aArgs
)
{
MOZ_ASSERT_UNREACHABLE
(
"
ClientSourceOpParent
should
be
explicitly
constructed
.
"
)
;
return
nullptr
;
}
bool
ClientSourceParent
:
:
DeallocPClientSourceOpParent
(
PClientSourceOpParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
ClientSourceParent
:
:
ClientSourceParent
(
const
ClientSourceConstructorArgs
&
aArgs
const
Maybe
<
ContentParentId
>
&
aContentParentId
)
:
mClientInfo
(
aArgs
.
id
(
)
aArgs
.
type
(
)
aArgs
.
principalInfo
(
)
aArgs
.
creationTime
(
)
)
mContentParentId
(
aContentParentId
)
mService
(
ClientManagerService
:
:
GetOrCreateInstance
(
)
)
mExecutionReady
(
false
)
mFrozen
(
false
)
{
}
ClientSourceParent
:
:
~
ClientSourceParent
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mHandleList
.
IsEmpty
(
)
)
;
mExecutionReadyPromise
.
RejectIfExists
(
NS_ERROR_FAILURE
__func__
)
;
}
void
ClientSourceParent
:
:
Init
(
)
{
if
(
NS_WARN_IF
(
!
ClientIsValidPrincipalInfo
(
mClientInfo
.
PrincipalInfo
(
)
)
)
)
{
KillInvalidChild
(
)
;
return
;
}
if
(
NS_WARN_IF
(
!
mService
-
>
AddSource
(
this
)
)
)
{
KillInvalidChild
(
)
;
return
;
}
}
const
ClientInfo
&
ClientSourceParent
:
:
Info
(
)
const
{
return
mClientInfo
;
}
bool
ClientSourceParent
:
:
IsFrozen
(
)
const
{
return
mFrozen
;
}
bool
ClientSourceParent
:
:
ExecutionReady
(
)
const
{
return
mExecutionReady
;
}
RefPtr
<
GenericNonExclusivePromise
>
ClientSourceParent
:
:
ExecutionReadyPromise
(
)
{
MOZ_ASSERT
(
!
mExecutionReady
)
;
return
mExecutionReadyPromise
.
Ensure
(
__func__
)
;
}
const
Maybe
<
ServiceWorkerDescriptor
>
&
ClientSourceParent
:
:
GetController
(
)
const
{
return
mController
;
}
void
ClientSourceParent
:
:
ClearController
(
)
{
mController
.
reset
(
)
;
}
void
ClientSourceParent
:
:
AttachHandle
(
ClientHandleParent
*
aClientHandle
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aClientHandle
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mFrozen
)
;
MOZ_ASSERT
(
!
mHandleList
.
Contains
(
aClientHandle
)
)
;
mHandleList
.
AppendElement
(
aClientHandle
)
;
}
void
ClientSourceParent
:
:
DetachHandle
(
ClientHandleParent
*
aClientHandle
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aClientHandle
)
;
MOZ_ASSERT
(
mHandleList
.
Contains
(
aClientHandle
)
)
;
mHandleList
.
RemoveElement
(
aClientHandle
)
;
}
RefPtr
<
ClientOpPromise
>
ClientSourceParent
:
:
StartOp
(
ClientOpConstructorArgs
&
&
aArgs
)
{
RefPtr
<
ClientOpPromise
:
:
Private
>
promise
=
new
ClientOpPromise
:
:
Private
(
__func__
)
;
if
(
aArgs
.
type
(
)
=
=
ClientOpConstructorArgs
:
:
TClientControlledArgs
)
{
mController
.
reset
(
)
;
mController
.
emplace
(
aArgs
.
get_ClientControlledArgs
(
)
.
serviceWorker
(
)
)
;
}
ClientSourceOpParent
*
actor
=
new
ClientSourceOpParent
(
std
:
:
move
(
aArgs
)
promise
)
;
Unused
<
<
SendPClientSourceOpConstructor
(
actor
actor
-
>
Args
(
)
)
;
return
promise
;
}
}
}
