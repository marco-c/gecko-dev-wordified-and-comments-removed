#
include
"
ClientSourceOpParent
.
h
"
#
include
"
ClientSourceParent
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
IPCResult
;
void
ClientSourceOpParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mPromise
)
{
CopyableErrorResult
rv
;
rv
.
ThrowAbortError
(
"
Client
torn
down
"
)
;
mPromise
-
>
Reject
(
rv
__func__
)
;
mPromise
=
nullptr
;
}
}
IPCResult
ClientSourceOpParent
:
:
Recv__delete__
(
const
ClientOpResult
&
aResult
)
{
if
(
aResult
.
type
(
)
=
=
ClientOpResult
:
:
TCopyableErrorResult
&
&
aResult
.
get_CopyableErrorResult
(
)
.
Failed
(
)
)
{
if
(
mArgs
.
type
(
)
=
=
ClientOpConstructorArgs
:
:
TClientControlledArgs
)
{
auto
source
=
static_cast
<
ClientSourceParent
*
>
(
Manager
(
)
)
;
if
(
source
)
{
source
-
>
ClearController
(
)
;
}
}
mPromise
-
>
Reject
(
aResult
.
get_CopyableErrorResult
(
)
__func__
)
;
mPromise
=
nullptr
;
return
IPC_OK
(
)
;
}
mPromise
-
>
Resolve
(
aResult
__func__
)
;
mPromise
=
nullptr
;
return
IPC_OK
(
)
;
}
ClientSourceOpParent
:
:
ClientSourceOpParent
(
ClientOpConstructorArgs
&
&
aArgs
ClientOpPromise
:
:
Private
*
aPromise
)
:
mArgs
(
std
:
:
move
(
aArgs
)
)
mPromise
(
aPromise
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mPromise
)
;
}
ClientSourceOpParent
:
:
~
ClientSourceOpParent
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mPromise
)
;
}
}
}
