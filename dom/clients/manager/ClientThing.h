#
ifndef
_mozilla_dom_ClientThing_h
#
define
_mozilla_dom_ClientThing_h
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
template
<
typename
ActorType
>
class
ClientThing
{
ActorType
*
mActor
;
bool
mShutdown
;
protected
:
ClientThing
(
)
:
mActor
(
nullptr
)
mShutdown
(
false
)
{
}
~
ClientThing
(
)
{
ShutdownThing
(
)
;
}
ActorType
*
GetActor
(
)
const
{
return
mActor
;
}
bool
IsShutdown
(
)
const
{
return
mShutdown
;
}
template
<
typename
Callable
>
void
MaybeExecute
(
const
Callable
&
aSuccess
const
std
:
:
function
<
void
(
)
>
&
aFailure
=
[
]
{
}
)
{
if
(
mShutdown
)
{
aFailure
(
)
;
return
;
}
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
aSuccess
(
mActor
)
;
}
void
ActivateThing
(
ActorType
*
aActor
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mShutdown
)
;
mActor
=
aActor
;
mActor
-
>
SetOwner
(
this
)
;
}
void
ShutdownThing
(
)
{
if
(
mShutdown
)
{
return
;
}
mShutdown
=
true
;
if
(
mActor
)
{
mActor
-
>
RevokeOwner
(
this
)
;
mActor
-
>
MaybeStartTeardown
(
)
;
mActor
=
nullptr
;
}
OnShutdownThing
(
)
;
}
virtual
void
OnShutdownThing
(
)
{
}
public
:
void
RevokeActor
(
ActorType
*
aActor
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mActor
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mActor
=
=
aActor
)
;
mActor
-
>
RevokeOwner
(
this
)
;
mActor
=
nullptr
;
mShutdown
=
true
;
OnShutdownThing
(
)
;
}
}
;
}
}
#
endif
