#
include
"
ClientHandleChild
.
h
"
#
include
"
ClientHandleOpChild
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
IPCResult
;
IPCResult
ClientHandleChild
:
:
RecvExecutionReady
(
const
IPCClientInfo
&
aClientInfo
)
{
if
(
mHandle
)
{
mHandle
-
>
ExecutionReady
(
ClientInfo
(
aClientInfo
)
)
;
}
return
IPC_OK
(
)
;
}
void
ClientHandleChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mHandle
)
{
mHandle
-
>
RevokeActor
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mHandle
)
;
}
}
PClientHandleOpChild
*
ClientHandleChild
:
:
AllocPClientHandleOpChild
(
const
ClientOpConstructorArgs
&
aArgs
)
{
MOZ_ASSERT_UNREACHABLE
(
"
ClientHandleOpChild
must
be
explicitly
constructed
.
"
)
;
return
nullptr
;
}
bool
ClientHandleChild
:
:
DeallocPClientHandleOpChild
(
PClientHandleOpChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
ClientHandleChild
:
:
ClientHandleChild
(
)
:
mHandle
(
nullptr
)
mTeardownStarted
(
false
)
{
}
void
ClientHandleChild
:
:
SetOwner
(
ClientThing
<
ClientHandleChild
>
*
aThing
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mHandle
)
;
mHandle
=
static_cast
<
ClientHandle
*
>
(
aThing
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mHandle
)
;
}
void
ClientHandleChild
:
:
RevokeOwner
(
ClientThing
<
ClientHandleChild
>
*
aThing
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mHandle
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mHandle
=
=
static_cast
<
ClientHandle
*
>
(
aThing
)
)
;
mHandle
=
nullptr
;
}
void
ClientHandleChild
:
:
MaybeStartTeardown
(
)
{
if
(
mTeardownStarted
)
{
return
;
}
mTeardownStarted
=
true
;
Unused
<
<
SendTeardown
(
)
;
}
}
}
