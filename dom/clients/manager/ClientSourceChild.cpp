#
include
"
ClientSourceChild
.
h
"
#
include
"
ClientSourceOpChild
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
IPCResult
;
void
ClientSourceChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mSource
)
{
mSource
-
>
RevokeActor
(
this
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mSource
)
;
}
}
PClientSourceOpChild
*
ClientSourceChild
:
:
AllocPClientSourceOpChild
(
const
ClientOpConstructorArgs
&
aArgs
)
{
return
new
ClientSourceOpChild
(
)
;
}
bool
ClientSourceChild
:
:
DeallocPClientSourceOpChild
(
PClientSourceOpChild
*
aActor
)
{
delete
aActor
;
return
true
;
}
IPCResult
ClientSourceChild
:
:
RecvPClientSourceOpConstructor
(
PClientSourceOpChild
*
aActor
const
ClientOpConstructorArgs
&
aArgs
)
{
auto
actor
=
static_cast
<
ClientSourceOpChild
*
>
(
aActor
)
;
actor
-
>
Init
(
aArgs
)
;
return
IPC_OK
(
)
;
}
ClientSourceChild
:
:
ClientSourceChild
(
const
ClientSourceConstructorArgs
&
aArgs
)
:
mSource
(
nullptr
)
mTeardownStarted
(
false
)
{
}
void
ClientSourceChild
:
:
SetOwner
(
ClientThing
<
ClientSourceChild
>
*
aThing
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aThing
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mSource
)
;
mSource
=
aThing
;
}
void
ClientSourceChild
:
:
RevokeOwner
(
ClientThing
<
ClientSourceChild
>
*
aThing
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mSource
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mSource
=
=
aThing
)
;
mSource
=
nullptr
;
}
void
ClientSourceChild
:
:
MaybeStartTeardown
(
)
{
if
(
mTeardownStarted
)
{
return
;
}
mTeardownStarted
=
true
;
Unused
<
<
SendTeardown
(
)
;
}
}
}
