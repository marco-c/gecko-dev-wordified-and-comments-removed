#
ifndef
_mozilla_dom_ClientManagerService_h
#
define
_mozilla_dom_ClientManagerService_h
#
include
"
ClientOpPromise
.
h
"
#
include
"
nsDataHashtable
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PrincipalInfo
;
}
namespace
dom
{
class
ClientManagerParent
;
class
ClientSourceParent
;
class
ClientHandleParent
;
class
ContentParent
;
class
ClientManagerService
final
{
nsDataHashtable
<
nsIDHashKey
ClientSourceParent
*
>
mSourceTable
;
nsDataHashtable
<
nsIDHashKey
nsTArray
<
ClientHandleParent
*
>
>
mPendingHandles
;
nsTArray
<
ClientManagerParent
*
>
mManagerList
;
bool
mShutdown
;
ClientManagerService
(
)
;
~
ClientManagerService
(
)
;
void
Shutdown
(
)
;
public
:
static
already_AddRefed
<
ClientManagerService
>
GetOrCreateInstance
(
)
;
static
already_AddRefed
<
ClientManagerService
>
GetInstance
(
)
;
bool
AddSource
(
ClientSourceParent
*
aSource
)
;
bool
RemoveSource
(
ClientSourceParent
*
aSource
)
;
ClientSourceParent
*
FindSource
(
const
nsID
&
aID
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
)
;
void
WaitForSource
(
ClientHandleParent
*
aHandle
const
nsID
&
aID
)
;
void
StopWaitingForSource
(
ClientHandleParent
*
aHandle
const
nsID
&
aID
)
;
void
AddManager
(
ClientManagerParent
*
aManager
)
;
void
RemoveManager
(
ClientManagerParent
*
aManager
)
;
RefPtr
<
ClientOpPromise
>
Navigate
(
const
ClientNavigateArgs
&
aArgs
)
;
RefPtr
<
ClientOpPromise
>
MatchAll
(
const
ClientMatchAllArgs
&
aArgs
)
;
RefPtr
<
ClientOpPromise
>
Claim
(
const
ClientClaimArgs
&
aArgs
)
;
RefPtr
<
ClientOpPromise
>
GetInfoAndState
(
const
ClientGetInfoAndStateArgs
&
aArgs
)
;
RefPtr
<
ClientOpPromise
>
OpenWindow
(
const
ClientOpenWindowArgs
&
aArgs
already_AddRefed
<
ContentParent
>
aSourceProcess
)
;
bool
HasWindow
(
const
Maybe
<
ContentParentId
>
&
aContentParentId
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
nsID
&
aClientId
)
;
NS_INLINE_DECL_REFCOUNTING
(
mozilla
:
:
dom
:
:
ClientManagerService
)
}
;
}
}
#
endif
