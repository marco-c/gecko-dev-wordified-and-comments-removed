#
include
"
ClientHandleParent
.
h
"
#
include
"
ClientHandleOpParent
.
h
"
#
include
"
ClientManagerService
.
h
"
#
include
"
ClientSourceParent
.
h
"
#
include
"
mozilla
/
dom
/
ClientIPCTypes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
IPCResult
;
IPCResult
ClientHandleParent
:
:
RecvTeardown
(
)
{
Unused
<
<
Send__delete__
(
this
)
;
return
IPC_OK
(
)
;
}
void
ClientHandleParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
if
(
mSource
)
{
mSource
-
>
DetachHandle
(
this
)
;
mSource
=
nullptr
;
}
else
{
mService
-
>
StopWaitingForSource
(
this
mClientId
)
;
}
if
(
mSourcePromise
)
{
mSourcePromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
}
}
PClientHandleOpParent
*
ClientHandleParent
:
:
AllocPClientHandleOpParent
(
const
ClientOpConstructorArgs
&
aArgs
)
{
return
new
ClientHandleOpParent
(
)
;
}
bool
ClientHandleParent
:
:
DeallocPClientHandleOpParent
(
PClientHandleOpParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
IPCResult
ClientHandleParent
:
:
RecvPClientHandleOpConstructor
(
PClientHandleOpParent
*
aActor
const
ClientOpConstructorArgs
&
aArgs
)
{
auto
actor
=
static_cast
<
ClientHandleOpParent
*
>
(
aActor
)
;
actor
-
>
Init
(
std
:
:
move
(
const_cast
<
ClientOpConstructorArgs
&
>
(
aArgs
)
)
)
;
return
IPC_OK
(
)
;
}
ClientHandleParent
:
:
ClientHandleParent
(
)
:
mService
(
ClientManagerService
:
:
GetOrCreateInstance
(
)
)
mSource
(
nullptr
)
{
}
ClientHandleParent
:
:
~
ClientHandleParent
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mSource
)
;
}
void
ClientHandleParent
:
:
Init
(
const
IPCClientInfo
&
aClientInfo
)
{
mClientId
=
aClientInfo
.
id
(
)
;
mPrincipalInfo
=
aClientInfo
.
principalInfo
(
)
;
mSource
=
mService
-
>
FindSource
(
aClientInfo
.
id
(
)
aClientInfo
.
principalInfo
(
)
)
;
if
(
!
mSource
)
{
mService
-
>
WaitForSource
(
this
aClientInfo
.
id
(
)
)
;
return
;
}
mSource
-
>
AttachHandle
(
this
)
;
}
ClientSourceParent
*
ClientHandleParent
:
:
GetSource
(
)
const
{
return
mSource
;
}
RefPtr
<
SourcePromise
>
ClientHandleParent
:
:
EnsureSource
(
)
{
if
(
mSource
)
{
return
SourcePromise
:
:
CreateAndResolve
(
mSource
__func__
)
;
}
if
(
!
mSourcePromise
)
{
mSourcePromise
=
new
SourcePromise
:
:
Private
(
__func__
)
;
}
return
mSourcePromise
;
}
void
ClientHandleParent
:
:
FoundSource
(
ClientSourceParent
*
aSource
)
{
MOZ_ASSERT
(
aSource
-
>
Info
(
)
.
Id
(
)
=
=
mClientId
)
;
if
(
!
ClientMatchPrincipalInfo
(
aSource
-
>
Info
(
)
.
PrincipalInfo
(
)
mPrincipalInfo
)
)
{
if
(
mSourcePromise
)
{
mSourcePromise
-
>
Reject
(
NS_ERROR_FAILURE
__func__
)
;
}
Unused
<
<
Send__delete__
(
this
)
;
return
;
}
mSource
=
aSource
;
mSource
-
>
AttachHandle
(
this
)
;
if
(
mSourcePromise
)
{
mSourcePromise
-
>
Resolve
(
aSource
__func__
)
;
}
}
}
}
