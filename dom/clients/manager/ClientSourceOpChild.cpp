#
include
"
ClientSourceOpChild
.
h
"
#
include
"
ClientSource
.
h
"
#
include
"
ClientSourceChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
namespace
dom
{
ClientSource
*
ClientSourceOpChild
:
:
GetSource
(
)
const
{
auto
actor
=
static_cast
<
ClientSourceChild
*
>
(
Manager
(
)
)
;
return
actor
-
>
GetSource
(
)
;
}
template
<
typename
Method
typename
Args
>
void
ClientSourceOpChild
:
:
DoSourceOp
(
Method
aMethod
const
Args
&
aArgs
)
{
RefPtr
<
ClientOpPromise
>
promise
;
nsCOMPtr
<
nsISerialEventTarget
>
target
;
{
ClientSource
*
source
=
GetSource
(
)
;
if
(
!
source
)
{
CopyableErrorResult
rv
;
rv
.
Throw
(
NS_ERROR_DOM_ABORT_ERR
)
;
Unused
<
<
PClientSourceOpChild
:
:
Send__delete__
(
this
rv
)
;
return
;
}
target
=
source
-
>
EventTarget
(
)
;
promise
=
(
source
-
>
*
aMethod
)
(
aArgs
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
promise
)
;
promise
-
>
Then
(
target
__func__
[
this
promise
]
(
const
mozilla
:
:
dom
:
:
ClientOpResult
&
aResult
)
{
mPromiseRequestHolder
.
Complete
(
)
;
Unused
<
<
PClientSourceOpChild
:
:
Send__delete__
(
this
aResult
)
;
}
[
this
promise
]
(
const
CopyableErrorResult
&
aRv
)
{
mPromiseRequestHolder
.
Complete
(
)
;
Unused
<
<
PClientSourceOpChild
:
:
Send__delete__
(
this
aRv
)
;
}
)
-
>
Track
(
mPromiseRequestHolder
)
;
}
void
ClientSourceOpChild
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mPromiseRequestHolder
.
DisconnectIfExists
(
)
;
}
void
ClientSourceOpChild
:
:
Init
(
const
ClientOpConstructorArgs
&
aArgs
)
{
switch
(
aArgs
.
type
(
)
)
{
case
ClientOpConstructorArgs
:
:
TClientControlledArgs
:
{
DoSourceOp
(
&
ClientSource
:
:
Control
aArgs
.
get_ClientControlledArgs
(
)
)
;
break
;
}
case
ClientOpConstructorArgs
:
:
TClientFocusArgs
:
{
DoSourceOp
(
&
ClientSource
:
:
Focus
aArgs
.
get_ClientFocusArgs
(
)
)
;
break
;
}
case
ClientOpConstructorArgs
:
:
TClientPostMessageArgs
:
{
DoSourceOp
(
&
ClientSource
:
:
PostMessage
aArgs
.
get_ClientPostMessageArgs
(
)
)
;
break
;
}
case
ClientOpConstructorArgs
:
:
TClientClaimArgs
:
{
DoSourceOp
(
&
ClientSource
:
:
Claim
aArgs
.
get_ClientClaimArgs
(
)
)
;
break
;
}
case
ClientOpConstructorArgs
:
:
TClientGetInfoAndStateArgs
:
{
DoSourceOp
(
&
ClientSource
:
:
GetInfoAndState
aArgs
.
get_ClientGetInfoAndStateArgs
(
)
)
;
break
;
}
default
:
{
MOZ_ASSERT_UNREACHABLE
(
"
unknown
client
operation
!
"
)
;
break
;
}
}
}
}
}
