#
include
"
ClientHandleOpParent
.
h
"
#
include
"
ClientHandleParent
.
h
"
#
include
"
ClientSourceParent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
StructuredCloneData
.
h
"
#
include
"
mozilla
/
dom
/
PClientManagerParent
.
h
"
namespace
mozilla
:
:
dom
{
ClientSourceParent
*
ClientHandleOpParent
:
:
GetSource
(
)
const
{
auto
handle
=
static_cast
<
ClientHandleParent
*
>
(
Manager
(
)
)
;
return
handle
-
>
GetSource
(
)
;
}
void
ClientHandleOpParent
:
:
ActorDestroy
(
ActorDestroyReason
aReason
)
{
mPromiseRequestHolder
.
DisconnectIfExists
(
)
;
mSourcePromiseRequestHolder
.
DisconnectIfExists
(
)
;
}
void
ClientHandleOpParent
:
:
Init
(
ClientOpConstructorArgs
&
&
aArgs
)
{
RefPtr
<
ClientHandleParent
>
handle
=
static_cast
<
ClientHandleParent
*
>
(
Manager
(
)
)
;
handle
-
>
EnsureSource
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
this
handle
args
=
std
:
:
move
(
aArgs
)
]
(
bool
)
mutable
{
mSourcePromiseRequestHolder
.
Complete
(
)
;
auto
source
=
handle
-
>
GetSource
(
)
;
if
(
!
source
)
{
CopyableErrorResult
rv
;
rv
.
ThrowAbortError
(
"
Client
has
been
destroyed
"
)
;
Unused
<
<
PClientHandleOpParent
:
:
Send__delete__
(
this
rv
)
;
return
;
}
RefPtr
<
ClientOpPromise
>
p
;
if
(
args
.
type
(
)
=
=
ClientOpConstructorArgs
:
:
TClientPostMessageArgs
)
{
const
ClientPostMessageArgs
&
orig
=
args
.
get_ClientPostMessageArgs
(
)
;
ClientPostMessageArgs
rebuild
;
rebuild
.
serviceWorker
(
)
=
orig
.
serviceWorker
(
)
;
ipc
:
:
StructuredCloneData
data
;
data
.
BorrowFromClonedMessageData
(
orig
.
clonedData
(
)
)
;
if
(
!
data
.
BuildClonedMessageData
(
rebuild
.
clonedData
(
)
)
)
{
CopyableErrorResult
rv
;
rv
.
ThrowAbortError
(
"
Aborting
client
operation
"
)
;
Unused
<
<
PClientHandleOpParent
:
:
Send__delete__
(
this
rv
)
;
return
;
}
p
=
source
-
>
StartOp
(
std
:
:
move
(
rebuild
)
)
;
}
else
{
p
=
source
-
>
StartOp
(
std
:
:
move
(
args
)
)
;
}
p
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
this
]
(
const
ClientOpResult
&
aResult
)
{
mPromiseRequestHolder
.
Complete
(
)
;
Unused
<
<
PClientHandleOpParent
:
:
Send__delete__
(
this
aResult
)
;
}
[
this
]
(
const
CopyableErrorResult
&
aRv
)
{
mPromiseRequestHolder
.
Complete
(
)
;
Unused
<
<
PClientHandleOpParent
:
:
Send__delete__
(
this
aRv
)
;
}
)
-
>
Track
(
mPromiseRequestHolder
)
;
}
[
=
]
(
const
CopyableErrorResult
&
failure
)
{
mSourcePromiseRequestHolder
.
Complete
(
)
;
Unused
<
<
PClientHandleOpParent
:
:
Send__delete__
(
this
failure
)
;
return
;
}
)
-
>
Track
(
mSourcePromiseRequestHolder
)
;
}
}
