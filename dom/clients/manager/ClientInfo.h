#
ifndef
_mozilla_dom_ClientInfo_h
#
define
_mozilla_dom_ClientInfo_h
#
include
"
X11UndefineNone
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
class
nsIPrincipal
;
struct
nsID
;
namespace
mozilla
{
namespace
ipc
{
class
CSPInfo
;
class
PrincipalInfo
;
}
namespace
dom
{
class
IPCClientInfo
;
enum
class
FrameType
:
uint8_t
;
enum
class
ClientType
:
uint8_t
;
class
ClientInfo
final
{
UniquePtr
<
IPCClientInfo
>
mData
;
public
:
ClientInfo
(
const
nsID
&
aId
ClientType
aType
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
TimeStamp
&
aCreationTime
)
;
ClientInfo
(
const
ClientInfo
&
aRight
)
;
ClientInfo
&
operator
=
(
const
ClientInfo
&
aRight
)
;
ClientInfo
(
ClientInfo
&
&
aRight
)
noexcept
;
ClientInfo
&
operator
=
(
ClientInfo
&
&
aRight
)
noexcept
;
explicit
ClientInfo
(
const
IPCClientInfo
&
aData
)
;
~
ClientInfo
(
)
;
bool
operator
=
=
(
const
ClientInfo
&
aRight
)
const
;
bool
operator
!
=
(
const
ClientInfo
&
aRight
)
const
;
const
nsID
&
Id
(
)
const
;
void
SetAgentClusterId
(
const
nsID
&
aId
)
;
const
Maybe
<
nsID
>
&
AgentClusterId
(
)
const
;
ClientType
Type
(
)
const
;
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
PrincipalInfo
(
)
const
;
const
TimeStamp
&
CreationTime
(
)
const
;
const
nsCString
&
URL
(
)
const
;
void
SetURL
(
const
nsACString
&
aURL
)
;
mozilla
:
:
dom
:
:
FrameType
FrameType
(
)
const
;
void
SetFrameType
(
mozilla
:
:
dom
:
:
FrameType
aFrameType
)
;
const
IPCClientInfo
&
ToIPC
(
)
const
;
bool
IsPrivateBrowsing
(
)
const
;
Result
<
nsCOMPtr
<
nsIPrincipal
>
nsresult
>
GetPrincipal
(
)
const
;
const
Maybe
<
mozilla
:
:
ipc
:
:
CSPInfo
>
&
GetCspInfo
(
)
const
;
void
SetCspInfo
(
const
mozilla
:
:
ipc
:
:
CSPInfo
&
aCSPInfo
)
;
const
Maybe
<
mozilla
:
:
ipc
:
:
CSPInfo
>
&
GetPreloadCspInfo
(
)
const
;
void
SetPreloadCspInfo
(
const
mozilla
:
:
ipc
:
:
CSPInfo
&
aPreloadCSPInfo
)
;
}
;
}
}
#
endif
