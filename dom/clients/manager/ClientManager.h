#
ifndef
_mozilla_dom_ClientManager_h
#
define
_mozilla_dom_ClientManager_h
#
include
"
mozilla
/
dom
/
ClientOpPromise
.
h
"
#
include
"
mozilla
/
dom
/
ClientThing
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundSharedTypes
.
h
"
#
include
"
nsIPrincipal
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
PBackgroundChild
;
}
namespace
dom
{
class
ClientHandle
;
class
ClientInfo
;
class
ClientManagerChild
;
class
ClientOpConstructorArgs
;
class
ClientSource
;
enum
class
ClientType
:
uint8_t
;
namespace
workers
{
class
WorkerPrivate
;
}
class
ClientManager
final
:
public
ClientThing
<
ClientManagerChild
>
{
friend
class
ClientManagerChild
;
ClientManager
(
)
;
~
ClientManager
(
)
;
void
Shutdown
(
)
;
UniquePtr
<
ClientSource
>
CreateSourceInternal
(
ClientType
aType
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipal
)
;
already_AddRefed
<
ClientHandle
>
CreateHandleInternal
(
const
ClientInfo
&
aClientInfo
nsISerialEventTarget
*
aSerialEventTarget
)
;
already_AddRefed
<
ClientOpPromise
>
StartOp
(
const
ClientOpConstructorArgs
&
aArgs
nsISerialEventTarget
*
aSerialEventTarget
)
;
static
already_AddRefed
<
ClientManager
>
GetOrCreateForCurrentThread
(
)
;
mozilla
:
:
dom
:
:
workers
:
:
WorkerPrivate
*
GetWorkerPrivate
(
)
const
;
public
:
static
void
Startup
(
)
;
static
UniquePtr
<
ClientSource
>
CreateSource
(
ClientType
aType
nsIPrincipal
*
aPrincipal
)
;
static
UniquePtr
<
ClientSource
>
CreateSource
(
ClientType
aType
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipal
)
;
static
already_AddRefed
<
ClientHandle
>
CreateHandle
(
const
ClientInfo
&
aClientInfo
nsISerialEventTarget
*
aSerialEventTarget
)
;
NS_INLINE_DECL_REFCOUNTING
(
mozilla
:
:
dom
:
:
ClientManager
)
}
;
}
}
#
endif
