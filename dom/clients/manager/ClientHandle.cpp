#
include
"
ClientHandle
.
h
"
#
include
"
ClientHandleChild
.
h
"
#
include
"
ClientHandleOpChild
.
h
"
#
include
"
ClientManager
.
h
"
#
include
"
mozilla
/
dom
/
PClientManagerChild
.
h
"
namespace
mozilla
{
namespace
dom
{
ClientHandle
:
:
~
ClientHandle
(
)
{
Shutdown
(
)
;
}
void
ClientHandle
:
:
Shutdown
(
)
{
NS_ASSERT_OWNINGTHREAD
(
ClientSource
)
;
if
(
IsShutdown
(
)
)
{
return
;
}
ShutdownThing
(
)
;
mManager
=
nullptr
;
}
already_AddRefed
<
ClientOpPromise
>
ClientHandle
:
:
StartOp
(
const
ClientOpConstructorArgs
&
aArgs
)
{
RefPtr
<
ClientOpPromise
:
:
Private
>
promise
=
new
ClientOpPromise
:
:
Private
(
__func__
)
;
RefPtr
<
ClientHandle
>
kungFuGrip
=
this
;
promise
-
>
Then
(
mSerialEventTarget
__func__
[
kungFuGrip
]
(
const
ClientOpResult
&
)
{
}
[
kungFuGrip
]
(
nsresult
)
{
}
)
;
MaybeExecute
(
[
aArgs
promise
]
(
ClientHandleChild
*
aActor
)
{
ClientHandleOpChild
*
actor
=
new
ClientHandleOpChild
(
aArgs
promise
)
;
if
(
!
aActor
-
>
SendPClientHandleOpConstructor
(
actor
aArgs
)
)
{
return
;
}
}
)
;
RefPtr
<
ClientOpPromise
>
ref
=
promise
.
get
(
)
;
return
ref
.
forget
(
)
;
}
ClientHandle
:
:
ClientHandle
(
ClientManager
*
aManager
nsISerialEventTarget
*
aSerialEventTarget
const
ClientInfo
&
aClientInfo
)
:
mManager
(
aManager
)
mSerialEventTarget
(
aSerialEventTarget
)
mClientInfo
(
aClientInfo
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mManager
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mSerialEventTarget
)
;
MOZ_ASSERT
(
mSerialEventTarget
-
>
IsOnCurrentThread
(
)
)
;
}
void
ClientHandle
:
:
Activate
(
PClientManagerChild
*
aActor
)
{
NS_ASSERT_OWNINGTHREAD
(
ClientHandle
)
;
if
(
IsShutdown
(
)
)
{
return
;
}
PClientHandleChild
*
actor
=
aActor
-
>
SendPClientHandleConstructor
(
mClientInfo
.
ToIPC
(
)
)
;
if
(
!
actor
)
{
Shutdown
(
)
;
return
;
}
ActivateThing
(
static_cast
<
ClientHandleChild
*
>
(
actor
)
)
;
}
void
ClientHandle
:
:
ExecutionReady
(
const
ClientInfo
&
aClientInfo
)
{
mClientInfo
=
aClientInfo
;
}
const
ClientInfo
&
ClientHandle
:
:
Info
(
)
const
{
return
mClientInfo
;
}
}
}
