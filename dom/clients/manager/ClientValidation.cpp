#
include
"
ClientValidation
.
h
"
#
include
"
ClientPrefs
.
h
"
#
include
"
mozilla
/
net
/
MozURL
.
h
"
namespace
mozilla
{
namespace
dom
{
using
mozilla
:
:
ipc
:
:
ContentPrincipalInfo
;
using
mozilla
:
:
ipc
:
:
PrincipalInfo
;
using
mozilla
:
:
net
:
:
MozURL
;
bool
ClientIsValidPrincipalInfo
(
const
PrincipalInfo
&
aPrincipalInfo
)
{
switch
(
aPrincipalInfo
.
type
(
)
)
{
case
PrincipalInfo
:
:
TSystemPrincipalInfo
:
case
PrincipalInfo
:
:
TNullPrincipalInfo
:
{
return
true
;
}
case
PrincipalInfo
:
:
TContentPrincipalInfo
:
{
const
ContentPrincipalInfo
&
content
=
aPrincipalInfo
.
get_ContentPrincipalInfo
(
)
;
RefPtr
<
MozURL
>
specURL
;
nsresult
rv
=
MozURL
:
:
Init
(
getter_AddRefs
(
specURL
)
content
.
spec
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
RefPtr
<
MozURL
>
originURL
;
rv
=
MozURL
:
:
Init
(
getter_AddRefs
(
originURL
)
content
.
originNoSuffix
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
nsAutoCString
originOrigin
;
originURL
-
>
Origin
(
originOrigin
)
;
nsAutoCString
specOrigin
;
specURL
-
>
Origin
(
specOrigin
)
;
return
specOrigin
=
=
originOrigin
;
}
default
:
{
break
;
}
}
return
false
;
}
bool
ClientIsValidCreationURL
(
const
PrincipalInfo
&
aPrincipalInfo
const
nsACString
&
aURL
)
{
RefPtr
<
MozURL
>
url
;
nsresult
rv
=
MozURL
:
:
Init
(
getter_AddRefs
(
url
)
aURL
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
switch
(
aPrincipalInfo
.
type
(
)
)
{
case
PrincipalInfo
:
:
TContentPrincipalInfo
:
{
if
(
aURL
.
LowerCaseEqualsLiteral
(
"
about
:
blank
"
)
|
|
aURL
.
LowerCaseEqualsLiteral
(
"
about
:
srcdoc
"
)
)
{
return
true
;
}
const
ContentPrincipalInfo
&
content
=
aPrincipalInfo
.
get_ContentPrincipalInfo
(
)
;
RefPtr
<
MozURL
>
principalURL
;
rv
=
MozURL
:
:
Init
(
getter_AddRefs
(
principalURL
)
content
.
originNoSuffix
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
nsAutoCString
origin
;
url
-
>
Origin
(
origin
)
;
nsAutoCString
principalOrigin
;
principalURL
-
>
Origin
(
principalOrigin
)
;
if
(
principalOrigin
=
=
origin
)
{
return
true
;
}
nsDependentCSubstring
scheme
=
url
-
>
Scheme
(
)
;
if
(
scheme
.
LowerCaseEqualsLiteral
(
"
javascript
"
)
)
{
return
true
;
}
if
(
!
ClientPrefsGetDataURLUniqueOpaqueOrigin
(
)
&
&
scheme
.
LowerCaseEqualsLiteral
(
"
data
"
)
)
{
return
true
;
}
return
false
;
}
case
PrincipalInfo
:
:
TSystemPrincipalInfo
:
{
nsDependentCSubstring
scheme
=
url
-
>
Scheme
(
)
;
return
scheme
.
LowerCaseEqualsLiteral
(
"
about
"
)
|
|
scheme
.
LowerCaseEqualsLiteral
(
"
chrome
"
)
|
|
scheme
.
LowerCaseEqualsLiteral
(
"
resource
"
)
|
|
scheme
.
LowerCaseEqualsLiteral
(
"
blob
"
)
|
|
scheme
.
LowerCaseEqualsLiteral
(
"
javascript
"
)
|
|
scheme
.
LowerCaseEqualsLiteral
(
"
view
-
source
"
)
|
|
(
!
ClientPrefsGetDataURLUniqueOpaqueOrigin
(
)
&
&
scheme
.
LowerCaseEqualsLiteral
(
"
data
"
)
)
;
}
case
PrincipalInfo
:
:
TNullPrincipalInfo
:
{
return
true
;
}
default
:
{
break
;
}
}
return
false
;
}
}
}
