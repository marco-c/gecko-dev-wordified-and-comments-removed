#
ifndef
mozilla_dom_ReportingObserver_h
#
define
mozilla_dom_ReportingObserver_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BindingUtils
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIGlobalObject
;
namespace
mozilla
{
namespace
dom
{
class
Report
;
class
ReportingObserverCallback
;
struct
ReportingObserverOptions
;
class
ReportingObserver
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
ReportingObserver
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
ReportingObserver
)
static
already_AddRefed
<
ReportingObserver
>
Constructor
(
const
GlobalObject
&
aGlobal
ReportingObserverCallback
&
aCallback
const
ReportingObserverOptions
&
aOptions
ErrorResult
&
aRv
)
;
ReportingObserver
(
nsIGlobalObject
*
aGlobal
ReportingObserverCallback
&
aCallback
const
nsTArray
<
nsString
>
&
aTypes
bool
aBuffered
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mGlobal
;
}
void
Observe
(
)
;
void
Disconnect
(
)
;
void
TakeRecords
(
nsTArray
<
RefPtr
<
Report
>
>
&
aRecords
)
;
void
MaybeReport
(
Report
*
aReport
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeNotify
(
)
;
void
ForgetReports
(
)
;
private
:
~
ReportingObserver
(
)
;
nsTArray
<
RefPtr
<
Report
>
>
mReports
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
ReportingObserverCallback
>
mCallback
;
nsTArray
<
nsString
>
mTypes
;
bool
mBuffered
;
}
;
}
}
#
endif
