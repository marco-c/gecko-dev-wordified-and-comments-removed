#
include
"
mozilla
/
dom
/
TestingDeprecatedInterface
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
TestingDeprecatedInterface
mGlobal
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
TestingDeprecatedInterface
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
TestingDeprecatedInterface
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
TestingDeprecatedInterface
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
already_AddRefed
<
TestingDeprecatedInterface
>
TestingDeprecatedInterface
:
:
Constructor
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
MOZ_ASSERT
(
global
)
;
RefPtr
<
TestingDeprecatedInterface
>
obj
=
new
TestingDeprecatedInterface
(
global
)
;
return
obj
.
forget
(
)
;
}
TestingDeprecatedInterface
:
:
TestingDeprecatedInterface
(
nsIGlobalObject
*
aGlobal
)
:
mGlobal
(
aGlobal
)
{
}
TestingDeprecatedInterface
:
:
~
TestingDeprecatedInterface
(
)
=
default
;
JSObject
*
TestingDeprecatedInterface
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
TestingDeprecatedInterface_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
TestingDeprecatedInterface
:
:
DeprecatedMethod
(
)
const
{
}
bool
TestingDeprecatedInterface
:
:
DeprecatedAttribute
(
)
const
{
return
true
;
}
}
}
