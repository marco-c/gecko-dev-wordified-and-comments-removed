#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
dom
/
ReportingHeader
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIURI
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
TEST
(
ReportingEndpointsParser
Basic
)
{
nsCOMPtr
<
nsIURI
>
uri1
;
nsCOMPtr
<
nsIURI
>
uri2
;
nsresult
rv
=
NS_NewURI
(
getter_AddRefs
(
uri1
)
"
https
:
/
/
example
.
com
/
csp
-
reports
"
)
;
ASSERT_EQ
(
NS_OK
rv
)
;
rv
=
NS_NewURI
(
getter_AddRefs
(
uri2
)
"
https
:
/
/
example
.
com
/
hpkp
-
reports
"
)
;
ASSERT_EQ
(
NS_OK
rv
)
;
bool
urlEqual
=
false
;
UniquePtr
<
ReportingHeader
:
:
Client
>
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
!
client
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
!
client
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
\
"
https
:
/
/
example
.
com
/
csp
-
reports
\
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
client
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
Length
(
)
)
;
ASSERT_TRUE
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mName
.
EqualsLiteral
(
"
csp
-
endpoint
"
)
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
Length
(
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
ElementAt
(
0
)
.
mUrl
-
>
Equals
(
uri1
&
urlEqual
)
)
&
&
urlEqual
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
\
"
https
:
/
/
example
.
com
/
csp
-
reports
\
"
\
thpkp
-
endpoint
=
\
"
https
:
/
/
example
.
com
/
hpkp
-
reports
\
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
client
)
;
ASSERT_EQ
(
(
uint32_t
)
2
client
-
>
mGroups
.
Length
(
)
)
;
ASSERT_TRUE
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mName
.
EqualsLiteral
(
"
csp
-
endpoint
"
)
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
Length
(
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
ElementAt
(
0
)
.
mUrl
-
>
Equals
(
uri1
&
urlEqual
)
)
&
&
urlEqual
)
;
ASSERT_TRUE
(
client
-
>
mGroups
.
ElementAt
(
1
)
.
mName
.
EqualsLiteral
(
"
hpkp
-
endpoint
"
)
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
Length
(
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
client
-
>
mGroups
.
ElementAt
(
1
)
.
mEndpoints
.
ElementAt
(
0
)
.
mUrl
-
>
Equals
(
uri2
&
urlEqual
)
)
&
&
urlEqual
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
(
\
"
https
:
/
/
example
.
com
/
csp
-
reports
\
"
5
)
;
valid
"
_ns
uri1
)
;
ASSERT_TRUE
(
client
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
Length
(
)
)
;
ASSERT_TRUE
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mName
.
EqualsLiteral
(
"
csp
-
endpoint
"
)
)
;
ASSERT_EQ
(
(
uint32_t
)
1
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
Length
(
)
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
client
-
>
mGroups
.
ElementAt
(
0
)
.
mEndpoints
.
ElementAt
(
0
)
.
mUrl
-
>
Equals
(
uri1
&
urlEqual
)
)
&
&
urlEqual
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
\
"
\
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
client
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
\
"
Not
URL
syntax
\
"
"
_ns
uri1
)
;
ASSERT_TRUE
(
client
)
;
client
=
ReportingHeader
:
:
ParseReportingEndpointsHeader
(
"
csp
-
endpoint
=
1
"
_ns
uri1
)
;
ASSERT_TRUE
(
!
client
)
;
}
