#
ifndef
mozilla_dom_bluetooth_bluedroid_BluetoothPbapManager_h
#
define
mozilla_dom_bluetooth_bluedroid_BluetoothPbapManager_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
BluetoothProfileManagerBase
.
h
"
#
include
"
BluetoothSocketObserver
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothTypes
.
h
"
#
include
"
mozilla
/
ipc
/
SocketBase
.
h
"
#
include
"
ObexBase
.
h
"
class
nsIInputStream
;
namespace
mozilla
{
namespace
dom
{
class
Blob
;
class
BlobParent
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
enum
AppParameterTag
{
Order
=
0x01
SearchValue
=
0x02
SearchProperty
=
0x03
MaxListCount
=
0x04
ListStartOffset
=
0x05
PropertySelector
=
0x06
Format
=
0x07
PhonebookSize
=
0x08
NewMissedCalls
=
0x09
PrimaryVersionCounter
=
0x0A
SecondaryVersionCounter
=
0x0B
vCardSelector
=
0x0C
DatabaseIdentifier
=
0x0D
vCardSelectorOperator
=
0x0E
ResetNewMissedCalls
=
0x0F
PbapSupportedFeatures
=
0x10
}
;
class
BluetoothSocket
;
class
ObexHeaderSet
;
class
BluetoothPbapManager
:
public
BluetoothSocketObserver
public
BluetoothProfileManagerBase
{
public
:
BT_DECL_PROFILE_MGR_BASE
BT_DECL_SOCKET_OBSERVER
virtual
void
GetName
(
nsACString
&
aName
)
{
aName
.
AssignLiteral
(
"
PBAP
"
)
;
}
static
const
int
MAX_PACKET_LENGTH
=
0xFFFE
;
static
BluetoothPbapManager
*
Get
(
)
;
bool
Listen
(
)
;
bool
ReplyToPullPhonebook
(
BlobParent
*
aActor
uint16_t
aPhonebookSize
)
;
bool
ReplyToPullPhonebook
(
Blob
*
aBlob
uint16_t
aPhonebookSize
)
;
bool
ReplyToPullvCardListing
(
BlobParent
*
aActor
uint16_t
aPhonebookSize
)
;
bool
ReplyToPullvCardListing
(
Blob
*
aBlob
uint16_t
aPhonebookSize
)
;
bool
ReplyToPullvCardEntry
(
BlobParent
*
aActor
)
;
bool
ReplyToPullvCardEntry
(
Blob
*
aBlob
)
;
protected
:
virtual
~
BluetoothPbapManager
(
)
;
private
:
BluetoothPbapManager
(
)
;
bool
Init
(
)
;
void
HandleShutdown
(
)
;
void
ReplyToConnect
(
)
;
void
ReplyToDisconnectOrAbort
(
)
;
void
ReplyToSetPath
(
)
;
bool
ReplyToGet
(
uint16_t
aPhonebookSize
=
0
)
;
void
ReplyError
(
uint8_t
aError
)
;
void
SendObexData
(
uint8_t
*
aData
uint8_t
aOpcode
int
aSize
)
;
ObexResponseCode
SetPhoneBookPath
(
const
ObexHeaderSet
&
aHeader
uint8_t
flags
)
;
ObexResponseCode
NotifyPbapRequest
(
const
ObexHeaderSet
&
aHeader
)
;
void
AppendNamedValueByTagId
(
const
ObexHeaderSet
&
aHeader
InfallibleTArray
<
BluetoothNamedValue
>
&
aValues
const
AppParameterTag
aTagId
)
;
InfallibleTArray
<
uint32_t
>
PackPropertiesMask
(
uint8_t
*
aData
int
aSize
)
;
bool
CompareHeaderTarget
(
const
ObexHeaderSet
&
aHeader
)
;
bool
IsLegalPath
(
const
nsAString
&
aPath
)
;
bool
IsLegalPhonebookName
(
const
nsAString
&
aName
)
;
bool
GetInputStreamFromBlob
(
Blob
*
aBlob
)
;
void
AfterPbapConnected
(
)
;
void
AfterPbapDisconnected
(
)
;
bool
mPhonebookSizeRequired
;
bool
mConnected
;
nsString
mDeviceAddress
;
nsString
mCurrentPath
;
unsigned
int
mRemoteMaxPacketLength
;
nsRefPtr
<
BluetoothSocket
>
mSocket
;
nsRefPtr
<
BluetoothSocket
>
mServerSocket
;
nsCOMPtr
<
nsIInputStream
>
mVCardDataStream
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
