#
include
"
base
/
basictypes
.
h
"
#
include
"
BluetoothPbapManager
.
h
"
#
include
"
BluetoothService
.
h
"
#
include
"
BluetoothSocket
.
h
"
#
include
"
BluetoothUtils
.
h
"
#
include
"
BluetoothUuid
.
h
"
#
include
"
ObexBase
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothPbapParametersBinding
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
BlobParent
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
USING_BLUETOOTH_NAMESPACE
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
ipc
;
namespace
{
static
const
BluetoothUuid
kPbapPSE
=
{
{
0x00
0x00
0x11
0x2F
0x00
0x00
0x10
0x00
0x80
0x00
0x00
0x80
0x5F
0x9B
0x34
0xFB
}
}
;
static
const
BluetoothUuid
kPbapObexTarget
=
{
{
0x79
0x61
0x35
0xF0
0xF0
0xC5
0x11
0xD8
0x09
0x66
0x08
0x00
0x20
0x0C
0x9A
0x66
}
}
;
StaticRefPtr
<
BluetoothPbapManager
>
sPbapManager
;
static
bool
sInShutdown
=
false
;
}
BEGIN_BLUETOOTH_NAMESPACE
NS_IMETHODIMP
BluetoothPbapManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
sPbapManager
)
;
if
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
HandleShutdown
(
)
;
return
NS_OK
;
}
MOZ_ASSERT
(
false
"
PbapManager
got
unexpected
topic
!
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
void
BluetoothPbapManager
:
:
HandleShutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sInShutdown
=
true
;
Disconnect
(
nullptr
)
;
sPbapManager
=
nullptr
;
}
BluetoothPbapManager
:
:
BluetoothPbapManager
(
)
:
mPhonebookSizeRequired
(
false
)
mConnected
(
false
)
mRemoteMaxPacketLength
(
0
)
{
mDeviceAddress
.
AssignLiteral
(
BLUETOOTH_ADDRESS_NONE
)
;
mCurrentPath
.
AssignLiteral
(
"
"
)
;
}
BluetoothPbapManager
:
:
~
BluetoothPbapManager
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
obs
)
)
{
return
;
}
NS_WARN_IF
(
NS_FAILED
(
obs
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
)
;
}
bool
BluetoothPbapManager
:
:
Init
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
if
(
NS_WARN_IF
(
!
obs
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
NS_FAILED
(
obs
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
false
)
)
)
)
{
return
false
;
}
return
true
;
}
BluetoothPbapManager
*
BluetoothPbapManager
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sPbapManager
)
{
return
sPbapManager
;
}
if
(
NS_WARN_IF
(
sInShutdown
)
)
{
return
nullptr
;
}
BluetoothPbapManager
*
manager
=
new
BluetoothPbapManager
(
)
;
if
(
NS_WARN_IF
(
!
manager
-
>
Init
(
)
)
)
{
return
nullptr
;
}
sPbapManager
=
manager
;
return
sPbapManager
;
}
bool
BluetoothPbapManager
:
:
Listen
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
NS_WARN_IF
(
mSocket
)
)
{
return
false
;
}
if
(
mServerSocket
)
{
mServerSocket
-
>
Close
(
)
;
mServerSocket
=
nullptr
;
}
mServerSocket
=
new
BluetoothSocket
(
this
)
;
nsresult
rv
=
mServerSocket
-
>
Listen
(
NS_LITERAL_STRING
(
"
OBEX
Phonebook
Access
Server
"
)
kPbapPSE
BluetoothSocketType
:
:
RFCOMM
BluetoothReservedChannels
:
:
CHANNEL_PBAP_PSE
false
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
mServerSocket
=
nullptr
;
return
false
;
}
BT_LOGR
(
"
PBAP
socket
is
listening
"
)
;
return
true
;
}
void
BluetoothPbapManager
:
:
ReceiveSocketData
(
BluetoothSocket
*
aSocket
nsAutoPtr
<
UnixSocketBuffer
>
&
aMessage
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
int
receivedLength
=
aMessage
-
>
GetSize
(
)
;
if
(
receivedLength
<
1
|
|
receivedLength
>
MAX_PACKET_LENGTH
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
const
uint8_t
*
data
=
aMessage
-
>
GetData
(
)
;
uint8_t
opCode
=
data
[
0
]
;
ObexHeaderSet
pktHeaders
;
switch
(
opCode
)
{
case
ObexRequestCode
:
:
Connect
:
if
(
receivedLength
<
7
|
|
!
ParseHeaders
(
&
data
[
7
]
receivedLength
-
7
&
pktHeaders
)
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
if
(
!
CompareHeaderTarget
(
pktHeaders
)
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
mRemoteMaxPacketLength
=
(
(
static_cast
<
int
>
(
data
[
5
]
)
<
<
8
)
|
data
[
6
]
)
;
if
(
mRemoteMaxPacketLength
<
kObexLeastMaxSize
)
{
BT_LOGR
(
"
Remote
maximum
packet
length
%
d
is
smaller
than
%
d
bytes
"
mRemoteMaxPacketLength
kObexLeastMaxSize
)
;
mRemoteMaxPacketLength
=
0
;
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
ReplyToConnect
(
)
;
AfterPbapConnected
(
)
;
break
;
case
ObexRequestCode
:
:
Disconnect
:
case
ObexRequestCode
:
:
Abort
:
if
(
receivedLength
<
3
|
|
!
ParseHeaders
(
&
data
[
3
]
receivedLength
-
3
&
pktHeaders
)
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
ReplyToDisconnectOrAbort
(
)
;
AfterPbapDisconnected
(
)
;
break
;
case
ObexRequestCode
:
:
SetPath
:
{
if
(
receivedLength
<
5
|
|
!
ParseHeaders
(
&
data
[
5
]
receivedLength
-
5
&
pktHeaders
)
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
uint8_t
response
=
SetPhoneBookPath
(
data
[
3
]
pktHeaders
)
;
if
(
response
!
=
ObexResponseCode
:
:
Success
)
{
ReplyError
(
response
)
;
return
;
}
ReplyToSetPath
(
)
;
break
;
}
case
ObexRequestCode
:
:
Get
:
BT_LOGR
(
"
PBAP
shall
always
use
OBEX
GetFinal
instead
of
Get
.
"
)
;
case
ObexRequestCode
:
:
GetFinal
:
{
if
(
mVCardDataStream
)
{
if
(
!
ReplyToGet
(
)
)
{
BT_LOGR
(
"
Failed
to
reply
to
PBAP
GET
request
.
"
)
;
ReplyError
(
ObexResponseCode
:
:
InternalServerError
)
;
}
return
;
}
if
(
receivedLength
<
3
|
|
!
ParseHeaders
(
&
data
[
3
]
receivedLength
-
3
&
pktHeaders
)
)
{
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
return
;
}
nsString
type
;
pktHeaders
.
GetContentType
(
type
)
;
uint8_t
response
;
if
(
type
.
EqualsLiteral
(
"
x
-
bt
/
vcard
-
listing
"
)
)
{
response
=
PullvCardListing
(
pktHeaders
)
;
}
else
if
(
type
.
EqualsLiteral
(
"
x
-
bt
/
vcard
"
)
)
{
response
=
PullvCardEntry
(
pktHeaders
)
;
}
else
if
(
type
.
EqualsLiteral
(
"
x
-
bt
/
phonebook
"
)
)
{
response
=
PullPhonebook
(
pktHeaders
)
;
}
else
{
response
=
ObexResponseCode
:
:
BadRequest
;
BT_LOGR
(
"
Unknown
PBAP
request
type
:
%
s
"
NS_ConvertUTF16toUTF8
(
type
)
.
get
(
)
)
;
}
if
(
response
!
=
ObexResponseCode
:
:
Success
)
{
ReplyError
(
response
)
;
return
;
}
break
;
}
case
ObexRequestCode
:
:
Put
:
case
ObexRequestCode
:
:
PutFinal
:
ReplyError
(
ObexResponseCode
:
:
BadRequest
)
;
break
;
default
:
ReplyError
(
ObexResponseCode
:
:
NotImplemented
)
;
BT_LOGR
(
"
Unrecognized
ObexRequestCode
%
x
"
opCode
)
;
break
;
}
}
bool
BluetoothPbapManager
:
:
CompareHeaderTarget
(
const
ObexHeaderSet
&
aHeader
)
{
if
(
!
aHeader
.
Has
(
ObexHeaderId
:
:
Target
)
)
{
BT_LOGR
(
"
No
ObexHeaderId
:
:
Target
in
header
"
)
;
return
false
;
}
uint8_t
*
targetPtr
;
int
targetLength
;
aHeader
.
GetTarget
(
&
targetPtr
&
targetLength
)
;
if
(
targetLength
!
=
sizeof
(
BluetoothUuid
)
)
{
BT_LOGR
(
"
Length
mismatch
:
%
d
!
=
16
"
targetLength
)
;
return
false
;
}
for
(
uint8_t
i
=
0
;
i
<
sizeof
(
BluetoothUuid
)
;
i
+
+
)
{
if
(
targetPtr
[
i
]
!
=
kPbapObexTarget
.
mUuid
[
i
]
)
{
BT_LOGR
(
"
UUID
mismatch
:
received
target
[
%
d
]
=
0x
%
x
!
=
0x
%
x
"
i
targetPtr
[
i
]
kPbapObexTarget
.
mUuid
[
i
]
)
;
return
false
;
}
}
return
true
;
}
uint8_t
BluetoothPbapManager
:
:
SetPhoneBookPath
(
uint8_t
flags
const
ObexHeaderSet
&
aHeader
)
{
if
(
(
flags
>
>
1
)
!
=
1
)
{
BT_LOGR
(
"
Illegal
flags
[
0x
%
x
]
:
bits
1
~
7
must
be
0x01
"
flags
)
;
return
ObexResponseCode
:
:
BadRequest
;
}
nsString
newPath
=
mCurrentPath
;
if
(
flags
&
1
)
{
if
(
!
newPath
.
IsEmpty
(
)
)
{
newPath
=
StringHead
(
newPath
newPath
.
RFindChar
(
'
/
'
)
)
;
}
}
else
{
MOZ_ASSERT
(
aHeader
.
Has
(
ObexHeaderId
:
:
Name
)
)
;
nsString
childFolderName
;
aHeader
.
GetName
(
childFolderName
)
;
if
(
childFolderName
.
IsEmpty
(
)
)
{
newPath
.
AssignLiteral
(
"
"
)
;
}
else
{
newPath
.
AppendLiteral
(
"
/
"
)
;
newPath
.
Append
(
childFolderName
)
;
}
}
if
(
!
IsLegalPath
(
newPath
)
)
{
BT_LOGR
(
"
Illegal
phone
book
path
[
%
s
]
"
NS_ConvertUTF16toUTF8
(
newPath
)
.
get
(
)
)
;
return
ObexResponseCode
:
:
NotFound
;
}
mCurrentPath
=
newPath
;
BT_LOGR
(
"
current
path
[
%
s
]
"
NS_ConvertUTF16toUTF8
(
mCurrentPath
)
.
get
(
)
)
;
return
ObexResponseCode
:
:
Success
;
}
uint8_t
BluetoothPbapManager
:
:
PullPhonebook
(
const
ObexHeaderSet
&
aHeader
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothService
*
bs
=
BluetoothService
:
:
Get
(
)
;
if
(
!
bs
)
{
return
ObexResponseCode
:
:
PreconditionFailed
;
}
InfallibleTArray
<
BluetoothNamedValue
>
data
;
nsString
name
;
aHeader
.
GetName
(
name
)
;
AppendNamedValue
(
data
"
name
"
name
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
Format
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
PropertySelector
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
MaxListCount
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
ListStartOffset
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
vCardSelector
)
;
bs
-
>
DistributeSignal
(
NS_LITERAL_STRING
(
PULL_PHONEBOOK_REQ_ID
)
NS_LITERAL_STRING
(
KEY_ADAPTER
)
data
)
;
return
ObexResponseCode
:
:
Success
;
}
uint8_t
BluetoothPbapManager
:
:
PullvCardListing
(
const
ObexHeaderSet
&
aHeader
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothService
*
bs
=
BluetoothService
:
:
Get
(
)
;
if
(
!
bs
)
{
return
ObexResponseCode
:
:
PreconditionFailed
;
}
InfallibleTArray
<
BluetoothNamedValue
>
data
;
nsString
name
;
aHeader
.
GetName
(
name
)
;
AppendNamedValue
(
data
"
name
"
name
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
Order
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
SearchValue
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
SearchProperty
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
MaxListCount
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
ListStartOffset
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
vCardSelector
)
;
bs
-
>
DistributeSignal
(
NS_LITERAL_STRING
(
PULL_VCARD_LISTING_REQ_ID
)
NS_LITERAL_STRING
(
KEY_ADAPTER
)
data
)
;
return
ObexResponseCode
:
:
Success
;
}
uint8_t
BluetoothPbapManager
:
:
PullvCardEntry
(
const
ObexHeaderSet
&
aHeader
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothService
*
bs
=
BluetoothService
:
:
Get
(
)
;
if
(
!
bs
)
{
return
ObexResponseCode
:
:
PreconditionFailed
;
}
InfallibleTArray
<
BluetoothNamedValue
>
data
;
nsString
name
;
aHeader
.
GetName
(
name
)
;
AppendNamedValue
(
data
"
name
"
name
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
Format
)
;
AppendNamedValueByTagId
(
aHeader
data
AppParameterTag
:
:
PropertySelector
)
;
bs
-
>
DistributeSignal
(
NS_LITERAL_STRING
(
PULL_VCARD_ENTRY_REQ_ID
)
NS_LITERAL_STRING
(
KEY_ADAPTER
)
data
)
;
return
ObexResponseCode
:
:
Success
;
}
void
BluetoothPbapManager
:
:
AppendNamedValueByTagId
(
const
ObexHeaderSet
&
aHeader
InfallibleTArray
<
BluetoothNamedValue
>
&
aValues
const
AppParameterTag
aTagId
)
{
uint8_t
buf
[
64
]
;
if
(
!
aHeader
.
GetAppParameter
(
aTagId
buf
64
)
)
{
return
;
}
switch
(
aTagId
)
{
case
AppParameterTag
:
:
Order
:
{
using
namespace
mozilla
:
:
dom
:
:
vCardOrderTypeValues
;
uint32_t
order
=
buf
[
0
]
<
ArrayLength
(
strings
)
?
static_cast
<
uint32_t
>
(
buf
[
0
]
)
:
0
;
AppendNamedValue
(
aValues
"
order
"
order
)
;
break
;
}
case
AppParameterTag
:
:
SearchProperty
:
{
using
namespace
mozilla
:
:
dom
:
:
vCardSearchKeyTypeValues
;
uint32_t
searchKey
=
buf
[
0
]
<
ArrayLength
(
strings
)
?
static_cast
<
uint32_t
>
(
buf
[
0
]
)
:
0
;
AppendNamedValue
(
aValues
"
searchKey
"
searchKey
)
;
break
;
}
case
AppParameterTag
:
:
SearchValue
:
{
nsCString
text
(
(
char
*
)
buf
)
;
AppendNamedValue
(
aValues
"
searchText
"
text
)
;
break
;
}
case
AppParameterTag
:
:
MaxListCount
:
{
uint16_t
maxListCount
=
*
(
(
uint16_t
*
)
buf
)
;
maxListCount
=
(
maxListCount
>
>
8
)
|
(
maxListCount
<
<
8
)
;
mPhonebookSizeRequired
=
!
maxListCount
;
AppendNamedValue
(
aValues
"
maxListCount
"
static_cast
<
uint32_t
>
(
maxListCount
)
)
;
break
;
}
case
AppParameterTag
:
:
ListStartOffset
:
{
uint16_t
listStartOffset
=
*
(
(
uint16_t
*
)
buf
)
;
listStartOffset
=
(
listStartOffset
>
>
8
)
|
(
listStartOffset
<
<
8
)
;
AppendNamedValue
(
aValues
"
listStartOffset
"
static_cast
<
uint32_t
>
(
listStartOffset
)
)
;
break
;
}
case
AppParameterTag
:
:
PropertySelector
:
{
InfallibleTArray
<
uint32_t
>
props
=
PackPropertiesMask
(
buf
64
)
;
AppendNamedValue
(
aValues
"
propSelector
"
props
)
;
break
;
}
case
AppParameterTag
:
:
Format
:
{
bool
usevCard3
=
buf
[
0
]
;
AppendNamedValue
(
aValues
"
format
"
usevCard3
)
;
break
;
}
case
AppParameterTag
:
:
vCardSelector
:
{
InfallibleTArray
<
uint32_t
>
props
=
PackPropertiesMask
(
buf
64
)
;
bool
hasVCardSelectorOperator
=
aHeader
.
GetAppParameter
(
AppParameterTag
:
:
vCardSelectorOperator
buf
64
)
;
if
(
hasVCardSelectorOperator
&
&
buf
[
0
]
)
{
AppendNamedValue
(
aValues
"
vCardSelector_AND
"
BluetoothValue
(
props
)
)
;
}
else
{
AppendNamedValue
(
aValues
"
vCardSelector_OR
"
BluetoothValue
(
props
)
)
;
}
break
;
}
default
:
BT_LOGR
(
"
Unsupported
AppParameterTag
:
%
x
"
aTagId
)
;
break
;
}
}
bool
BluetoothPbapManager
:
:
IsLegalPath
(
const
nsAString
&
aPath
)
{
static
const
char
*
sLegalPaths
[
]
=
{
"
"
"
/
telecom
"
"
/
telecom
/
pb
"
"
/
telecom
/
ich
"
"
/
telecom
/
och
"
"
/
telecom
/
mch
"
"
/
telecom
/
cch
"
"
/
SIM1
"
"
/
SIM1
/
telecom
"
"
/
SIM1
/
telecom
/
pb
"
"
/
SIM1
/
telecom
/
ich
"
"
/
SIM1
/
telecom
/
och
"
"
/
SIM1
/
telecom
/
mch
"
"
/
SIM1
/
telecom
/
cch
"
}
;
NS_ConvertUTF16toUTF8
path
(
aPath
)
;
for
(
uint8_t
i
=
0
;
i
<
MOZ_ARRAY_LENGTH
(
sLegalPaths
)
;
i
+
+
)
{
if
(
!
strcmp
(
path
.
get
(
)
sLegalPaths
[
i
]
)
)
{
return
true
;
}
}
return
false
;
}
void
BluetoothPbapManager
:
:
AfterPbapConnected
(
)
{
mCurrentPath
.
AssignLiteral
(
"
"
)
;
mConnected
=
true
;
}
void
BluetoothPbapManager
:
:
AfterPbapDisconnected
(
)
{
mConnected
=
false
;
mRemoteMaxPacketLength
=
0
;
mPhonebookSizeRequired
=
false
;
if
(
mVCardDataStream
)
{
mVCardDataStream
-
>
Close
(
)
;
mVCardDataStream
=
nullptr
;
}
}
bool
BluetoothPbapManager
:
:
IsConnected
(
)
{
return
mConnected
;
}
void
BluetoothPbapManager
:
:
GetAddress
(
nsAString
&
aDeviceAddress
)
{
return
mSocket
-
>
GetAddress
(
aDeviceAddress
)
;
}
void
BluetoothPbapManager
:
:
ReplyToConnect
(
)
{
if
(
mConnected
)
{
return
;
}
uint8_t
res
[
kObexLeastMaxSize
]
;
int
index
=
7
;
res
[
3
]
=
0x10
;
res
[
4
]
=
0x00
;
res
[
5
]
=
BluetoothPbapManager
:
:
MAX_PACKET_LENGTH
>
>
8
;
res
[
6
]
=
(
uint8_t
)
BluetoothPbapManager
:
:
MAX_PACKET_LENGTH
;
index
+
=
AppendHeaderWho
(
&
res
[
index
]
kObexLeastMaxSize
kPbapObexTarget
.
mUuid
sizeof
(
BluetoothUuid
)
)
;
index
+
=
AppendHeaderConnectionId
(
&
res
[
index
]
0x01
)
;
SendObexData
(
res
ObexResponseCode
:
:
Success
index
)
;
}
void
BluetoothPbapManager
:
:
ReplyToDisconnectOrAbort
(
)
{
if
(
!
mConnected
)
{
return
;
}
uint8_t
res
[
kObexLeastMaxSize
]
;
int
index
=
kObexRespHeaderSize
;
SendObexData
(
res
ObexResponseCode
:
:
Success
index
)
;
}
void
BluetoothPbapManager
:
:
ReplyToSetPath
(
)
{
if
(
!
mConnected
)
{
return
;
}
uint8_t
res
[
kObexLeastMaxSize
]
;
int
index
=
kObexRespHeaderSize
;
SendObexData
(
res
ObexResponseCode
:
:
Success
index
)
;
}
InfallibleTArray
<
uint32_t
>
BluetoothPbapManager
:
:
PackPropertiesMask
(
uint8_t
*
aData
int
aSize
)
{
InfallibleTArray
<
uint32_t
>
propSelector
;
uint32_t
x
=
(
aData
[
7
]
<
<
0
)
|
(
aData
[
6
]
<
<
8
)
|
(
aData
[
5
]
<
<
16
)
|
(
aData
[
4
]
<
<
24
)
;
uint32_t
count
=
0
;
while
(
x
)
{
if
(
x
&
1
)
{
propSelector
.
AppendElement
(
count
)
;
}
+
+
count
;
x
>
>
=
1
;
}
return
propSelector
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullPhonebook
(
BlobParent
*
aActor
uint16_t
aPhonebookSize
)
{
nsRefPtr
<
BlobImpl
>
impl
=
aActor
-
>
GetBlobImpl
(
)
;
nsRefPtr
<
Blob
>
blob
=
Blob
:
:
Create
(
nullptr
impl
)
;
return
ReplyToPullPhonebook
(
blob
.
get
(
)
aPhonebookSize
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullPhonebook
(
Blob
*
aBlob
uint16_t
aPhonebookSize
)
{
if
(
!
mConnected
)
{
return
false
;
}
if
(
!
mPhonebookSizeRequired
&
&
!
GetInputStreamFromBlob
(
aBlob
)
)
{
ReplyError
(
ObexResponseCode
:
:
InternalServerError
)
;
return
false
;
}
return
ReplyToGet
(
aPhonebookSize
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullvCardListing
(
BlobParent
*
aActor
uint16_t
aPhonebookSize
)
{
nsRefPtr
<
BlobImpl
>
impl
=
aActor
-
>
GetBlobImpl
(
)
;
nsRefPtr
<
Blob
>
blob
=
Blob
:
:
Create
(
nullptr
impl
)
;
return
ReplyToPullvCardListing
(
blob
.
get
(
)
aPhonebookSize
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullvCardListing
(
Blob
*
aBlob
uint16_t
aPhonebookSize
)
{
if
(
!
mConnected
)
{
return
false
;
}
if
(
!
mPhonebookSizeRequired
&
&
!
GetInputStreamFromBlob
(
aBlob
)
)
{
ReplyError
(
ObexResponseCode
:
:
InternalServerError
)
;
return
false
;
}
return
ReplyToGet
(
aPhonebookSize
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullvCardEntry
(
BlobParent
*
aActor
)
{
nsRefPtr
<
BlobImpl
>
impl
=
aActor
-
>
GetBlobImpl
(
)
;
nsRefPtr
<
Blob
>
blob
=
Blob
:
:
Create
(
nullptr
impl
)
;
return
ReplyToPullvCardEntry
(
blob
.
get
(
)
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToPullvCardEntry
(
Blob
*
aBlob
)
{
if
(
!
mConnected
)
{
return
false
;
}
if
(
!
GetInputStreamFromBlob
(
aBlob
)
)
{
ReplyError
(
ObexResponseCode
:
:
InternalServerError
)
;
return
false
;
}
return
ReplyToGet
(
)
;
}
bool
BluetoothPbapManager
:
:
ReplyToGet
(
uint16_t
aPhonebookSize
)
{
MOZ_ASSERT
(
mRemoteMaxPacketLength
>
=
kObexLeastMaxSize
)
;
uint8_t
*
res
=
new
uint8_t
[
mRemoteMaxPacketLength
]
;
uint8_t
opcode
;
unsigned
int
index
=
kObexRespHeaderSize
;
if
(
mPhonebookSizeRequired
)
{
uint8_t
phonebookSize
[
2
]
;
phonebookSize
[
0
]
=
(
aPhonebookSize
&
0xFF00
)
>
>
8
;
phonebookSize
[
1
]
=
aPhonebookSize
&
0x00FF
;
uint8_t
appParameters
[
4
]
;
AppendAppParameter
(
appParameters
sizeof
(
appParameters
)
(
uint8_t
)
AppParameterTag
:
:
PhonebookSize
phonebookSize
sizeof
(
phonebookSize
)
)
;
index
+
=
AppendHeaderAppParameters
(
&
res
[
index
]
mRemoteMaxPacketLength
appParameters
sizeof
(
appParameters
)
)
;
opcode
=
ObexResponseCode
:
:
Success
;
index
+
=
AppendHeaderEndOfBody
(
&
res
[
index
]
)
;
mPhonebookSizeRequired
=
false
;
}
else
{
MOZ_ASSERT
(
mVCardDataStream
)
;
uint64_t
bytesAvailable
=
0
;
nsresult
rv
=
mVCardDataStream
-
>
Available
(
&
bytesAvailable
)
;
if
(
NS_FAILED
(
rv
)
)
{
BT_LOGR
(
"
Failed
to
get
available
bytes
from
input
stream
.
rv
=
0x
%
x
"
static_cast
<
uint32_t
>
(
rv
)
)
;
return
false
;
}
if
(
!
bytesAvailable
)
{
index
+
=
AppendHeaderEndOfBody
(
&
res
[
index
]
)
;
mVCardDataStream
-
>
Close
(
)
;
mVCardDataStream
=
nullptr
;
opcode
=
ObexResponseCode
:
:
Success
;
}
else
{
uint32_t
remainingPacketSize
=
mRemoteMaxPacketLength
-
kObexBodyHeaderSize
-
index
;
uint32_t
numRead
=
0
;
nsAutoArrayPtr
<
char
>
buf
(
new
char
[
remainingPacketSize
]
)
;
rv
=
mVCardDataStream
-
>
Read
(
buf
remainingPacketSize
&
numRead
)
;
if
(
NS_FAILED
(
rv
)
)
{
BT_LOGR
(
"
Failed
to
read
from
input
stream
.
rv
=
0x
%
x
"
static_cast
<
uint32_t
>
(
rv
)
)
;
return
false
;
}
MOZ_ASSERT
(
numRead
)
;
index
+
=
AppendHeaderBody
(
&
res
[
index
]
remainingPacketSize
(
uint8_t
*
)
buf
.
forget
(
)
numRead
)
;
opcode
=
ObexResponseCode
:
:
Continue
;
}
}
SendObexData
(
res
opcode
index
)
;
delete
[
]
res
;
return
true
;
}
bool
BluetoothPbapManager
:
:
GetInputStreamFromBlob
(
Blob
*
aBlob
)
{
if
(
mVCardDataStream
)
{
BT_LOGR
(
"
Shouldn
'
t
handle
multiple
PBAP
responses
simultaneously
"
)
;
mVCardDataStream
-
>
Close
(
)
;
mVCardDataStream
=
nullptr
;
}
ErrorResult
rv
;
aBlob
-
>
GetInternalStream
(
getter_AddRefs
(
mVCardDataStream
)
rv
)
;
if
(
rv
.
Failed
(
)
)
{
BT_LOGR
(
"
Failed
to
get
internal
stream
from
blob
.
rv
=
0x
%
x
"
rv
.
ErrorCodeAsInt
(
)
)
;
return
false
;
}
return
true
;
}
void
BluetoothPbapManager
:
:
ReplyError
(
uint8_t
aError
)
{
BT_LOGR
(
"
[
0x
%
x
]
"
aError
)
;
uint8_t
res
[
kObexLeastMaxSize
]
;
SendObexData
(
res
aError
kObexBodyHeaderSize
)
;
}
void
BluetoothPbapManager
:
:
SendObexData
(
uint8_t
*
aData
uint8_t
aOpcode
int
aSize
)
{
SetObexPacketInfo
(
aData
aOpcode
aSize
)
;
mSocket
-
>
SendSocketData
(
new
UnixSocketRawData
(
aData
aSize
)
)
;
}
void
BluetoothPbapManager
:
:
OnSocketConnectSuccess
(
BluetoothSocket
*
aSocket
)
{
MOZ_ASSERT
(
aSocket
)
;
MOZ_ASSERT
(
aSocket
=
=
mServerSocket
)
;
MOZ_ASSERT
(
!
mSocket
)
;
BT_LOGR
(
"
PBAP
socket
is
connected
"
)
;
mServerSocket
.
swap
(
mSocket
)
;
mSocket
-
>
GetAddress
(
mDeviceAddress
)
;
}
void
BluetoothPbapManager
:
:
OnSocketConnectError
(
BluetoothSocket
*
aSocket
)
{
mServerSocket
=
nullptr
;
mSocket
=
nullptr
;
}
void
BluetoothPbapManager
:
:
OnSocketDisconnect
(
BluetoothSocket
*
aSocket
)
{
MOZ_ASSERT
(
aSocket
)
;
if
(
aSocket
!
=
mSocket
)
{
return
;
}
AfterPbapDisconnected
(
)
;
mDeviceAddress
.
AssignLiteral
(
BLUETOOTH_ADDRESS_NONE
)
;
mSocket
=
nullptr
;
Listen
(
)
;
}
void
BluetoothPbapManager
:
:
Disconnect
(
BluetoothProfileController
*
aController
)
{
if
(
!
mSocket
)
{
BT_LOGR
(
"
No
ongoing
connection
to
disconnect
"
)
;
return
;
}
mSocket
-
>
Close
(
)
;
}
NS_IMPL_ISUPPORTS
(
BluetoothPbapManager
nsIObserver
)
void
BluetoothPbapManager
:
:
Connect
(
const
nsAString
&
aDeviceAddress
BluetoothProfileController
*
aController
)
{
MOZ_ASSERT
(
false
)
;
}
void
BluetoothPbapManager
:
:
OnGetServiceChannel
(
const
nsAString
&
aDeviceAddress
const
nsAString
&
aServiceUuid
int
aChannel
)
{
MOZ_ASSERT
(
false
)
;
}
void
BluetoothPbapManager
:
:
OnUpdateSdpRecords
(
const
nsAString
&
aDeviceAddress
)
{
MOZ_ASSERT
(
false
)
;
}
void
BluetoothPbapManager
:
:
OnConnect
(
const
nsAString
&
aErrorStr
)
{
MOZ_ASSERT
(
false
)
;
}
void
BluetoothPbapManager
:
:
OnDisconnect
(
const
nsAString
&
aErrorStr
)
{
MOZ_ASSERT
(
false
)
;
}
void
BluetoothPbapManager
:
:
Reset
(
)
{
MOZ_ASSERT
(
false
)
;
}
END_BLUETOOTH_NAMESPACE
