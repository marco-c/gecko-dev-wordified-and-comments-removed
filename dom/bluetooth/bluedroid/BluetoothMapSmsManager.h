#
ifndef
mozilla_dom_bluetooth_bluedroid_BluetoothMapSmsManager_h
#
define
mozilla_dom_bluetooth_bluedroid_BluetoothMapSmsManager_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
BluetoothMapFolder
.
h
"
#
include
"
BluetoothProfileManagerBase
.
h
"
#
include
"
BluetoothSocketObserver
.
h
"
#
include
"
mozilla
/
ipc
/
SocketBase
.
h
"
BEGIN_BLUETOOTH_NAMESPACE
struct
Map
{
enum
AppParametersTagId
{
MaxListCount
=
0x1
StartOffset
=
0x2
FilterMessageType
=
0x3
FilterPeriodBegin
=
0x4
FilterPeriodEnd
=
0x5
FilterReadStatus
=
0x6
FilterRecipient
=
0x7
FilterOriginator
=
0x8
FilterPriority
=
0x9
Attachment
=
0x0A
Transparent
=
0x0B
Retry
=
0x0C
NewMessage
=
0x0D
NotificationStatus
=
0x0E
MASInstanceId
=
0x0F
ParameterMask
=
0x10
FolderListingSize
=
0x11
MessagesListingSize
=
0x12
SubjectLength
=
0x13
Charset
=
0x14
FractionRequest
=
0x15
FractionDeliver
=
0x16
StatusIndicator
=
0x17
StatusValue
=
0x18
MSETime
=
0x19
}
;
}
;
class
BluetoothNamedValue
;
class
BluetoothSocket
;
class
ObexHeaderSet
;
class
BluetoothMapSmsManager
:
public
BluetoothSocketObserver
public
BluetoothProfileManagerBase
{
public
:
BT_DECL_PROFILE_MGR_BASE
BT_DECL_SOCKET_OBSERVER
virtual
void
GetName
(
nsACString
&
aName
)
{
aName
.
AssignLiteral
(
"
MapSms
"
)
;
}
static
const
int
MAX_PACKET_LENGTH
=
0xFFFE
;
static
const
int
MAX_INSTANCE_ID
=
255
;
static
const
int
SDP_MESSAGE_TYPE_EMAIL
=
0x01
;
static
const
int
SDP_MESSAGE_TYPE_SMS_GSM
=
0x02
;
static
const
int
SDP_MESSAGE_TYPE_SMS_CDMA
=
0x04
;
static
const
int
SDP_MESSAGE_TYPE_MMS
=
0x08
;
static
const
int
SDP_SMS_MMS_INSTANCE_ID
=
0
;
static
BluetoothMapSmsManager
*
Get
(
)
;
bool
Listen
(
)
;
protected
:
virtual
~
BluetoothMapSmsManager
(
)
;
private
:
BluetoothMapSmsManager
(
)
;
bool
Init
(
)
;
void
HandleShutdown
(
)
;
void
ReplyToConnect
(
)
;
void
ReplyToDisconnectOrAbort
(
)
;
void
ReplyToSetPath
(
)
;
void
ReplyToPut
(
)
;
void
ReplyError
(
uint8_t
aError
)
;
void
HandleNotificationRegistration
(
const
ObexHeaderSet
&
aHeader
)
;
void
HandleEventReport
(
const
ObexHeaderSet
&
aHeader
)
;
void
HandleSetMessageStatus
(
const
ObexHeaderSet
&
aHeader
)
;
void
HandleSmsMmsFolderListing
(
const
ObexHeaderSet
&
aHeader
)
;
void
HandleSmsMmsMsgListing
(
const
ObexHeaderSet
&
aHeader
)
;
void
HandleSmsMmsGetMessage
(
const
ObexHeaderSet
&
aHeader
)
;
void
AppendBtNamedValueByTagId
(
const
ObexHeaderSet
&
aHeader
InfallibleTArray
<
BluetoothNamedValue
>
&
aValues
const
Map
:
:
AppParametersTagId
aTagId
)
;
void
SendMasObexData
(
uint8_t
*
aData
uint8_t
aOpcode
int
aSize
)
;
void
SendMnsObexData
(
uint8_t
*
aData
uint8_t
aOpcode
int
aSize
)
;
uint8_t
SetPath
(
uint8_t
flags
const
ObexHeaderSet
&
aHeader
)
;
bool
CompareHeaderTarget
(
const
ObexHeaderSet
&
aHeader
)
;
void
AfterMapSmsConnected
(
)
;
void
AfterMapSmsDisconnected
(
)
;
void
CreateMnsObexConnection
(
)
;
void
DestroyMnsObexConnection
(
)
;
void
SendMnsConnectRequest
(
)
;
void
SendMnsDisconnectRequest
(
)
;
void
MnsDataHandler
(
mozilla
:
:
ipc
:
:
UnixSocketBuffer
*
aMessage
)
;
void
MasDataHandler
(
mozilla
:
:
ipc
:
:
UnixSocketBuffer
*
aMessage
)
;
void
BuildDefaultFolderStructure
(
)
;
BluetoothMapFolder
*
mCurrentFolder
;
nsRefPtr
<
BluetoothMapFolder
>
mRootFolder
;
int
mLastCommand
;
bool
mMasConnected
;
bool
mMnsConnected
;
bool
mNtfRequired
;
nsString
mDeviceAddress
;
unsigned
int
mRemoteMaxPacketLength
;
nsRefPtr
<
BluetoothSocket
>
mMasSocket
;
nsRefPtr
<
BluetoothSocket
>
mMasServerSocket
;
nsRefPtr
<
BluetoothSocket
>
mMnsSocket
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
