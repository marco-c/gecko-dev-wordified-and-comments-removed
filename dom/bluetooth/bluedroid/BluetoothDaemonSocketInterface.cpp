#
include
"
BluetoothDaemonSocketInterface
.
h
"
#
include
"
BluetoothSocketMessageWatcher
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
unused
.
h
"
BEGIN_BLUETOOTH_NAMESPACE
using
namespace
mozilla
:
:
ipc
;
const
int
BluetoothDaemonSocketModule
:
:
MAX_NUM_CLIENTS
=
1
;
nsresult
BluetoothDaemonSocketModule
:
:
ListenCmd
(
BluetoothSocketType
aType
const
nsAString
&
aServiceName
const
BluetoothUuid
&
aServiceUuid
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoPtr
<
DaemonSocketPDU
>
pdu
(
new
DaemonSocketPDU
(
SERVICE_ID
OPCODE_LISTEN
0
)
)
;
nsresult
rv
=
PackPDU
(
aType
PackConversion
<
nsAString
BluetoothServiceName
>
(
aServiceName
)
aServiceUuid
PackConversion
<
int
int32_t
>
(
aChannel
)
SocketFlags
(
aEncrypt
aAuth
)
*
pdu
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
Send
(
pdu
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
unused
<
<
pdu
.
forget
(
)
;
return
rv
;
}
nsresult
BluetoothDaemonSocketModule
:
:
ConnectCmd
(
const
BluetoothAddress
&
aBdAddr
BluetoothSocketType
aType
const
BluetoothUuid
&
aServiceUuid
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoPtr
<
DaemonSocketPDU
>
pdu
(
new
DaemonSocketPDU
(
SERVICE_ID
OPCODE_CONNECT
0
)
)
;
nsresult
rv
=
PackPDU
(
aBdAddr
aType
aServiceUuid
PackConversion
<
int
int32_t
>
(
aChannel
)
SocketFlags
(
aEncrypt
aAuth
)
*
pdu
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
Send
(
pdu
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
unused
<
<
pdu
.
forget
(
)
;
return
rv
;
}
template
<
typename
T
>
class
DeleteTask
final
:
public
Task
{
public
:
DeleteTask
(
T
*
aPtr
)
:
mPtr
(
aPtr
)
{
}
void
Run
(
)
override
{
mPtr
=
nullptr
;
}
private
:
nsAutoPtr
<
T
>
mPtr
;
}
;
class
BluetoothDaemonSocketModule
:
:
AcceptWatcher
final
:
public
SocketMessageWatcher
{
public
:
AcceptWatcher
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
:
SocketMessageWatcher
(
aFd
aRes
)
{
}
void
Proceed
(
BluetoothStatus
aStatus
)
override
{
if
(
aStatus
=
=
STATUS_SUCCESS
)
{
AcceptResultRunnable
:
:
Dispatch
(
GetResultHandler
(
)
&
BluetoothSocketResultHandler
:
:
Accept
ConstantInitOp3
<
int
BluetoothAddress
int
>
(
GetClientFd
(
)
GetBdAddress
(
)
GetConnectionStatus
(
)
)
)
;
}
else
{
ErrorRunnable
:
:
Dispatch
(
GetResultHandler
(
)
&
BluetoothSocketResultHandler
:
:
OnError
ConstantInitOp1
<
BluetoothStatus
>
(
aStatus
)
)
;
}
MessageLoopForIO
:
:
current
(
)
-
>
PostTask
(
FROM_HERE
new
DeleteTask
<
AcceptWatcher
>
(
this
)
)
;
}
}
;
nsresult
BluetoothDaemonSocketModule
:
:
AcceptCmd
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Task
*
t
=
new
SocketMessageWatcherTask
(
new
AcceptWatcher
(
aFd
aRes
)
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
t
)
;
return
NS_OK
;
}
nsresult
BluetoothDaemonSocketModule
:
:
CloseCmd
(
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Task
*
t
=
new
DeleteSocketMessageWatcherTask
(
aRes
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
t
)
;
return
NS_OK
;
}
void
BluetoothDaemonSocketModule
:
:
HandleSvc
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
{
static
void
(
BluetoothDaemonSocketModule
:
:
*
const
HandleRsp
[
]
)
(
const
DaemonSocketPDUHeader
&
DaemonSocketPDU
&
BluetoothSocketResultHandler
*
)
=
{
[
OPCODE_ERROR
]
=
&
BluetoothDaemonSocketModule
:
:
ErrorRsp
[
OPCODE_LISTEN
]
=
&
BluetoothDaemonSocketModule
:
:
ListenRsp
[
OPCODE_CONNECT
]
=
&
BluetoothDaemonSocketModule
:
:
ConnectRsp
}
;
if
(
NS_WARN_IF
(
MOZ_ARRAY_LENGTH
(
HandleRsp
)
<
=
aHeader
.
mOpcode
)
|
|
NS_WARN_IF
(
!
HandleRsp
[
aHeader
.
mOpcode
]
)
)
{
return
;
}
nsRefPtr
<
BluetoothSocketResultHandler
>
res
=
static_cast
<
BluetoothSocketResultHandler
*
>
(
aRes
)
;
if
(
!
res
)
{
return
;
}
(
this
-
>
*
(
HandleRsp
[
aHeader
.
mOpcode
]
)
)
(
aHeader
aPDU
res
)
;
}
uint8_t
BluetoothDaemonSocketModule
:
:
SocketFlags
(
bool
aEncrypt
bool
aAuth
)
{
return
(
0x01
*
aEncrypt
)
|
(
0x02
*
aAuth
)
;
}
void
BluetoothDaemonSocketModule
:
:
ErrorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
{
ErrorRunnable
:
:
Dispatch
(
aRes
&
BluetoothSocketResultHandler
:
:
OnError
UnpackPDUInitOp
(
aPDU
)
)
;
}
class
BluetoothDaemonSocketModule
:
:
ListenInitOp
final
:
private
PDUInitOp
{
public
:
ListenInitOp
(
DaemonSocketPDU
&
aPDU
)
:
PDUInitOp
(
aPDU
)
{
}
nsresult
operator
(
)
(
int
&
aArg1
)
const
{
DaemonSocketPDU
&
pdu
=
GetPDU
(
)
;
aArg1
=
pdu
.
AcquireFd
(
)
;
if
(
NS_WARN_IF
(
aArg1
<
0
)
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
WarnAboutTrailingData
(
)
;
return
NS_OK
;
}
}
;
void
BluetoothDaemonSocketModule
:
:
ListenRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
{
ListenResultRunnable
:
:
Dispatch
(
aRes
&
BluetoothSocketResultHandler
:
:
Listen
ListenInitOp
(
aPDU
)
)
;
}
class
BluetoothDaemonSocketModule
:
:
ConnectWatcher
final
:
public
SocketMessageWatcher
{
public
:
ConnectWatcher
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
:
SocketMessageWatcher
(
aFd
aRes
)
{
}
void
Proceed
(
BluetoothStatus
aStatus
)
override
{
if
(
aStatus
=
=
STATUS_SUCCESS
)
{
ConnectResultRunnable
:
:
Dispatch
(
GetResultHandler
(
)
&
BluetoothSocketResultHandler
:
:
Connect
ConstantInitOp3
<
int
BluetoothAddress
int
>
(
GetFd
(
)
GetBdAddress
(
)
GetConnectionStatus
(
)
)
)
;
}
else
{
ErrorRunnable
:
:
Dispatch
(
GetResultHandler
(
)
&
BluetoothSocketResultHandler
:
:
OnError
ConstantInitOp1
<
BluetoothStatus
>
(
aStatus
)
)
;
}
MessageLoopForIO
:
:
current
(
)
-
>
PostTask
(
FROM_HERE
new
DeleteTask
<
ConnectWatcher
>
(
this
)
)
;
}
}
;
void
BluetoothDaemonSocketModule
:
:
ConnectRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
{
int
fd
=
aPDU
.
AcquireFd
(
)
;
if
(
fd
<
0
)
{
ErrorRunnable
:
:
Dispatch
(
aRes
&
BluetoothSocketResultHandler
:
:
OnError
ConstantInitOp1
<
BluetoothStatus
>
(
STATUS_FAIL
)
)
;
return
;
}
Task
*
t
=
new
SocketMessageWatcherTask
(
new
ConnectWatcher
(
fd
aRes
)
)
;
XRE_GetIOMessageLoop
(
)
-
>
PostTask
(
FROM_HERE
t
)
;
}
BluetoothDaemonSocketInterface
:
:
BluetoothDaemonSocketInterface
(
BluetoothDaemonSocketModule
*
aModule
)
:
mModule
(
aModule
)
{
MOZ_ASSERT
(
mModule
)
;
}
BluetoothDaemonSocketInterface
:
:
~
BluetoothDaemonSocketInterface
(
)
{
}
void
BluetoothDaemonSocketInterface
:
:
Listen
(
BluetoothSocketType
aType
const
nsAString
&
aServiceName
const
BluetoothUuid
&
aServiceUuid
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
mModule
)
;
nsresult
rv
=
mModule
-
>
ListenCmd
(
aType
aServiceName
aServiceUuid
aChannel
aEncrypt
aAuth
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
DispatchError
(
aRes
rv
)
;
}
}
void
BluetoothDaemonSocketInterface
:
:
Connect
(
const
BluetoothAddress
&
aBdAddr
BluetoothSocketType
aType
const
BluetoothUuid
&
aServiceUuid
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
mModule
)
;
nsresult
rv
=
mModule
-
>
ConnectCmd
(
aBdAddr
aType
aServiceUuid
aChannel
aEncrypt
aAuth
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
DispatchError
(
aRes
rv
)
;
}
}
void
BluetoothDaemonSocketInterface
:
:
Accept
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
mModule
)
;
nsresult
rv
=
mModule
-
>
AcceptCmd
(
aFd
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
DispatchError
(
aRes
rv
)
;
}
}
void
BluetoothDaemonSocketInterface
:
:
Close
(
BluetoothSocketResultHandler
*
aRes
)
{
MOZ_ASSERT
(
mModule
)
;
nsresult
rv
=
mModule
-
>
CloseCmd
(
aRes
)
;
if
(
NS_FAILED
(
rv
)
)
{
DispatchError
(
aRes
rv
)
;
}
}
void
BluetoothDaemonSocketInterface
:
:
DispatchError
(
BluetoothSocketResultHandler
*
aRes
BluetoothStatus
aStatus
)
{
DaemonResultRunnable1
<
BluetoothSocketResultHandler
void
BluetoothStatus
BluetoothStatus
>
:
:
Dispatch
(
aRes
&
BluetoothSocketResultHandler
:
:
OnError
ConstantInitOp1
<
BluetoothStatus
>
(
aStatus
)
)
;
}
void
BluetoothDaemonSocketInterface
:
:
DispatchError
(
BluetoothSocketResultHandler
*
aRes
nsresult
aRv
)
{
BluetoothStatus
status
;
if
(
NS_WARN_IF
(
NS_FAILED
(
Convert
(
aRv
status
)
)
)
)
{
status
=
STATUS_FAIL
;
}
DispatchError
(
aRes
status
)
;
}
END_BLUETOOTH_NAMESPACE
