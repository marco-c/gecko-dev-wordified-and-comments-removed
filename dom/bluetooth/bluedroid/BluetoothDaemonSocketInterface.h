#
ifndef
mozilla_dom_bluetooth_bluedroid_BluetoothDaemonSocketInterface_h
#
define
mozilla_dom_bluetooth_bluedroid_BluetoothDaemonSocketInterface_h
#
include
"
BluetoothDaemonHelpers
.
h
"
#
include
"
BluetoothInterface
.
h
"
#
include
"
mozilla
/
ipc
/
DaemonRunnables
.
h
"
BEGIN_BLUETOOTH_NAMESPACE
using
mozilla
:
:
ipc
:
:
DaemonSocketPDU
;
using
mozilla
:
:
ipc
:
:
DaemonSocketPDUHeader
;
using
mozilla
:
:
ipc
:
:
DaemonSocketResultHandler
;
class
BluetoothDaemonSocketModule
{
public
:
enum
{
SERVICE_ID
=
0x02
}
;
enum
{
OPCODE_ERROR
=
0x00
OPCODE_LISTEN
=
0x01
OPCODE_CONNECT
=
0x02
}
;
static
const
int
MAX_NUM_CLIENTS
;
virtual
nsresult
Send
(
DaemonSocketPDU
*
aPDU
DaemonSocketResultHandler
*
aRes
)
=
0
;
nsresult
ListenCmd
(
BluetoothSocketType
aType
const
nsAString
&
aServiceName
const
uint8_t
aServiceUuid
[
16
]
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
;
nsresult
ConnectCmd
(
const
nsAString
&
aBdAddr
BluetoothSocketType
aType
const
uint8_t
aUuid
[
16
]
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
;
nsresult
AcceptCmd
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
;
nsresult
CloseCmd
(
BluetoothSocketResultHandler
*
aRes
)
;
protected
:
void
HandleSvc
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
DaemonSocketResultHandler
*
aRes
)
;
private
:
class
AcceptWatcher
;
class
ConnectWatcher
;
class
ListenInitOp
;
uint8_t
SocketFlags
(
bool
aEncrypt
bool
aAuth
)
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable0
<
BluetoothSocketResultHandler
void
>
ResultRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable1
<
BluetoothSocketResultHandler
void
int
int
>
IntResultRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable1
<
BluetoothSocketResultHandler
void
BluetoothStatus
BluetoothStatus
>
ErrorRunnable
;
typedef
mozilla
:
:
ipc
:
:
DaemonResultRunnable3
<
BluetoothSocketResultHandler
void
int
nsString
int
int
const
nsAString_internal
&
int
>
IntStringIntResultRunnable
;
void
ErrorRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
;
void
ListenRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
;
void
ConnectRsp
(
const
DaemonSocketPDUHeader
&
aHeader
DaemonSocketPDU
&
aPDU
BluetoothSocketResultHandler
*
aRes
)
;
}
;
class
BluetoothDaemonSocketInterface
final
:
public
BluetoothSocketInterface
{
public
:
BluetoothDaemonSocketInterface
(
BluetoothDaemonSocketModule
*
aModule
)
;
~
BluetoothDaemonSocketInterface
(
)
;
void
Listen
(
BluetoothSocketType
aType
const
nsAString
&
aServiceName
const
uint8_t
aServiceUuid
[
16
]
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
override
;
void
Connect
(
const
nsAString
&
aBdAddr
BluetoothSocketType
aType
const
uint8_t
aUuid
[
16
]
int
aChannel
bool
aEncrypt
bool
aAuth
BluetoothSocketResultHandler
*
aRes
)
override
;
void
Accept
(
int
aFd
BluetoothSocketResultHandler
*
aRes
)
override
;
void
Close
(
BluetoothSocketResultHandler
*
aRes
)
override
;
private
:
void
DispatchError
(
BluetoothSocketResultHandler
*
aRes
BluetoothStatus
aStatus
)
;
void
DispatchError
(
BluetoothSocketResultHandler
*
aRes
nsresult
aRv
)
;
BluetoothDaemonSocketModule
*
mModule
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
