#
include
"
base
/
basictypes
.
h
"
#
include
"
BluetoothAvrcpManager
.
h
"
#
include
"
BluetoothCommon
.
h
"
#
include
"
BluetoothService
.
h
"
#
include
"
BluetoothSocket
.
h
"
#
include
"
BluetoothUtils
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothTypes
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
;
USING_BLUETOOTH_NAMESPACE
#
define
AVRC_ID_REWIND
0x48
#
define
AVRC_ID_FAST_FOR
0x49
#
define
AVRC_KEY_PRESS_STATE
1
#
define
AVRC_KEY_RELEASE_STATE
0
#
define
AVRC_MAX_ATTR_STR_LEN
255
namespace
{
StaticRefPtr
<
BluetoothAvrcpManager
>
sBluetoothAvrcpManager
;
bool
sInShutdown
=
false
;
static
BluetoothAvrcpInterface
*
sBtAvrcpInterface
;
}
static
void
ConvertAttributeString
(
BluetoothAvrcpMediaAttribute
aAttrId
nsAString
&
aAttrStr
)
{
BluetoothAvrcpManager
*
avrcp
=
BluetoothAvrcpManager
:
:
Get
(
)
;
NS_ENSURE_TRUE_VOID
(
avrcp
)
;
switch
(
aAttrId
)
{
case
AVRCP_MEDIA_ATTRIBUTE_TITLE
:
avrcp
-
>
GetTitle
(
aAttrStr
)
;
if
(
aAttrStr
.
Length
(
)
>
=
AVRC_MAX_ATTR_STR_LEN
)
{
aAttrStr
.
Truncate
(
AVRC_MAX_ATTR_STR_LEN
-
1
)
;
BT_WARNING
(
"
Truncate
media
item
attribute
title
length
is
over
255
"
)
;
}
break
;
case
AVRCP_MEDIA_ATTRIBUTE_ARTIST
:
avrcp
-
>
GetArtist
(
aAttrStr
)
;
if
(
aAttrStr
.
Length
(
)
>
=
AVRC_MAX_ATTR_STR_LEN
)
{
aAttrStr
.
Truncate
(
AVRC_MAX_ATTR_STR_LEN
-
1
)
;
BT_WARNING
(
"
Truncate
media
item
attribute
artist
length
is
over
255
"
)
;
}
break
;
case
AVRCP_MEDIA_ATTRIBUTE_ALBUM
:
avrcp
-
>
GetAlbum
(
aAttrStr
)
;
if
(
aAttrStr
.
Length
(
)
>
=
AVRC_MAX_ATTR_STR_LEN
)
{
aAttrStr
.
Truncate
(
AVRC_MAX_ATTR_STR_LEN
-
1
)
;
BT_WARNING
(
"
Truncate
media
item
attribute
album
length
is
over
255
"
)
;
}
break
;
case
AVRCP_MEDIA_ATTRIBUTE_TRACK_NUM
:
aAttrStr
.
AppendInt
(
avrcp
-
>
GetMediaNumber
(
)
)
;
break
;
case
AVRCP_MEDIA_ATTRIBUTE_NUM_TRACKS
:
aAttrStr
.
AppendInt
(
avrcp
-
>
GetTotalMediaNumber
(
)
)
;
break
;
case
AVRCP_MEDIA_ATTRIBUTE_GENRE
:
aAttrStr
.
Truncate
(
)
;
break
;
case
AVRCP_MEDIA_ATTRIBUTE_PLAYING_TIME
:
aAttrStr
.
AppendInt
(
avrcp
-
>
GetDuration
(
)
)
;
break
;
}
}
NS_IMETHODIMP
BluetoothAvrcpManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
sBluetoothAvrcpManager
)
;
if
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
HandleShutdown
(
)
;
return
NS_OK
;
}
MOZ_ASSERT
(
false
"
BluetoothAvrcpManager
got
unexpected
topic
!
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
BluetoothAvrcpManager
:
:
BluetoothAvrcpManager
(
)
{
Reset
(
)
;
}
void
BluetoothAvrcpManager
:
:
Reset
(
)
{
mAvrcpConnected
=
false
;
mDuration
=
0
;
mMediaNumber
=
0
;
mTotalMediaCount
=
0
;
mPosition
=
0
;
mPlayStatus
=
ControlPlayStatus
:
:
PLAYSTATUS_STOPPED
;
}
class
BluetoothAvrcpManager
:
:
InitAvrcpResultHandler
final
:
public
BluetoothAvrcpResultHandler
{
public
:
InitAvrcpResultHandler
(
BluetoothProfileResultHandler
*
aRes
)
:
mRes
(
aRes
)
{
}
void
OnError
(
BluetoothStatus
aStatus
)
override
{
BT_WARNING
(
"
BluetoothAvrcpInterface
:
:
Init
failed
:
%
d
"
(
int
)
aStatus
)
;
if
(
mRes
)
{
if
(
aStatus
=
=
STATUS_UNSUPPORTED
)
{
mRes
-
>
Init
(
)
;
}
else
{
mRes
-
>
OnError
(
NS_ERROR_FAILURE
)
;
}
}
}
void
Init
(
)
override
{
if
(
mRes
)
{
mRes
-
>
Init
(
)
;
}
}
private
:
nsRefPtr
<
BluetoothProfileResultHandler
>
mRes
;
}
;
class
BluetoothAvrcpManager
:
:
OnErrorProfileResultHandlerRunnable
final
:
public
nsRunnable
{
public
:
OnErrorProfileResultHandlerRunnable
(
BluetoothProfileResultHandler
*
aRes
nsresult
aRv
)
:
mRes
(
aRes
)
mRv
(
aRv
)
{
MOZ_ASSERT
(
mRes
)
;
}
NS_IMETHOD
Run
(
)
override
{
mRes
-
>
OnError
(
mRv
)
;
return
NS_OK
;
}
private
:
nsRefPtr
<
BluetoothProfileResultHandler
>
mRes
;
nsresult
mRv
;
}
;
void
BluetoothAvrcpManager
:
:
InitAvrcpInterface
(
BluetoothProfileResultHandler
*
aRes
)
{
BluetoothInterface
*
btInf
=
BluetoothInterface
:
:
GetInstance
(
)
;
if
(
NS_WARN_IF
(
!
btInf
)
)
{
nsRefPtr
<
nsRunnable
>
r
=
new
OnErrorProfileResultHandlerRunnable
(
aRes
NS_ERROR_FAILURE
)
;
if
(
NS_FAILED
(
NS_DispatchToMainThread
(
r
)
)
)
{
BT_LOGR
(
"
Failed
to
dispatch
HFP
OnError
runnable
"
)
;
}
return
;
}
sBtAvrcpInterface
=
btInf
-
>
GetBluetoothAvrcpInterface
(
)
;
if
(
NS_WARN_IF
(
!
sBtAvrcpInterface
)
)
{
nsRefPtr
<
nsRunnable
>
r
=
new
OnErrorProfileResultHandlerRunnable
(
aRes
NS_ERROR_FAILURE
)
;
if
(
NS_FAILED
(
NS_DispatchToMainThread
(
r
)
)
)
{
BT_LOGR
(
"
Failed
to
dispatch
HFP
OnError
runnable
"
)
;
}
return
;
}
BluetoothAvrcpManager
*
avrcpManager
=
BluetoothAvrcpManager
:
:
Get
(
)
;
sBtAvrcpInterface
-
>
Init
(
avrcpManager
new
InitAvrcpResultHandler
(
aRes
)
)
;
}
BluetoothAvrcpManager
:
:
~
BluetoothAvrcpManager
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
services
:
:
GetObserverService
(
)
;
NS_ENSURE_TRUE_VOID
(
obs
)
;
if
(
NS_FAILED
(
obs
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
)
{
BT_WARNING
(
"
Failed
to
remove
shutdown
observer
!
"
)
;
}
}
BluetoothAvrcpManager
*
BluetoothAvrcpManager
:
:
Get
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sBluetoothAvrcpManager
)
{
return
sBluetoothAvrcpManager
;
}
NS_ENSURE_FALSE
(
sInShutdown
nullptr
)
;
BluetoothAvrcpManager
*
manager
=
new
BluetoothAvrcpManager
(
)
;
sBluetoothAvrcpManager
=
manager
;
return
sBluetoothAvrcpManager
;
}
class
BluetoothAvrcpManager
:
:
CleanupAvrcpResultHandler
final
:
public
BluetoothAvrcpResultHandler
{
public
:
CleanupAvrcpResultHandler
(
BluetoothProfileResultHandler
*
aRes
)
:
mRes
(
aRes
)
{
}
void
OnError
(
BluetoothStatus
aStatus
)
override
{
BT_WARNING
(
"
BluetoothAvrcpInterface
:
:
Cleanup
failed
:
%
d
"
(
int
)
aStatus
)
;
sBtAvrcpInterface
=
nullptr
;
if
(
mRes
)
{
if
(
aStatus
=
=
STATUS_UNSUPPORTED
)
{
mRes
-
>
Deinit
(
)
;
}
else
{
mRes
-
>
OnError
(
NS_ERROR_FAILURE
)
;
}
}
}
void
Cleanup
(
)
override
{
sBtAvrcpInterface
=
nullptr
;
if
(
mRes
)
{
mRes
-
>
Deinit
(
)
;
}
}
private
:
nsRefPtr
<
BluetoothProfileResultHandler
>
mRes
;
}
;
class
BluetoothAvrcpManager
:
:
CleanupAvrcpResultHandlerRunnable
final
:
public
nsRunnable
{
public
:
CleanupAvrcpResultHandlerRunnable
(
BluetoothProfileResultHandler
*
aRes
)
:
mRes
(
aRes
)
{
}
NS_IMETHOD
Run
(
)
override
{
sBtAvrcpInterface
=
nullptr
;
if
(
sBtAvrcpInterface
)
{
sBtAvrcpInterface
-
>
Cleanup
(
new
CleanupAvrcpResultHandler
(
mRes
)
)
;
}
else
if
(
mRes
)
{
mRes
-
>
Deinit
(
)
;
}
return
NS_OK
;
}
private
:
nsRefPtr
<
BluetoothProfileResultHandler
>
mRes
;
}
;
void
BluetoothAvrcpManager
:
:
DeinitAvrcpInterface
(
BluetoothProfileResultHandler
*
aRes
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sBtAvrcpInterface
)
{
sBtAvrcpInterface
-
>
Cleanup
(
new
CleanupAvrcpResultHandler
(
aRes
)
)
;
}
else
if
(
aRes
)
{
nsRefPtr
<
nsRunnable
>
r
=
new
CleanupAvrcpResultHandlerRunnable
(
aRes
)
;
if
(
NS_FAILED
(
NS_DispatchToMainThread
(
r
)
)
)
{
BT_LOGR
(
"
Failed
to
dispatch
cleanup
-
result
-
handler
runnable
"
)
;
}
}
}
void
BluetoothAvrcpManager
:
:
HandleShutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sInShutdown
=
true
;
Disconnect
(
nullptr
)
;
sBluetoothAvrcpManager
=
nullptr
;
}
class
BluetoothAvrcpManager
:
:
ConnectRunnable
final
:
public
nsRunnable
{
public
:
ConnectRunnable
(
BluetoothAvrcpManager
*
aManager
)
:
mManager
(
aManager
)
{
MOZ_ASSERT
(
mManager
)
;
}
NS_METHOD
Run
(
)
override
{
mManager
-
>
OnConnect
(
EmptyString
(
)
)
;
return
NS_OK
;
}
private
:
BluetoothAvrcpManager
*
mManager
;
}
;
void
BluetoothAvrcpManager
:
:
Connect
(
const
nsAString
&
aDeviceAddress
BluetoothProfileController
*
aController
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
aDeviceAddress
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
aController
)
;
mDeviceAddress
=
aDeviceAddress
;
mController
=
aController
;
SetConnected
(
true
)
;
NS_DispatchToMainThread
(
new
ConnectRunnable
(
this
)
)
;
}
class
BluetoothAvrcpManager
:
:
DisconnectRunnable
final
:
public
nsRunnable
{
public
:
DisconnectRunnable
(
BluetoothAvrcpManager
*
aManager
)
:
mManager
(
aManager
)
{
MOZ_ASSERT
(
mManager
)
;
}
NS_METHOD
Run
(
)
override
{
mManager
-
>
OnDisconnect
(
EmptyString
(
)
)
;
return
NS_OK
;
}
private
:
BluetoothAvrcpManager
*
mManager
;
}
;
void
BluetoothAvrcpManager
:
:
Disconnect
(
BluetoothProfileController
*
aController
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mController
)
;
mDeviceAddress
.
Truncate
(
)
;
mController
=
aController
;
SetConnected
(
false
)
;
NS_DispatchToMainThread
(
new
DisconnectRunnable
(
this
)
)
;
}
void
BluetoothAvrcpManager
:
:
OnConnect
(
const
nsAString
&
aErrorStr
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_TRUE_VOID
(
mController
)
;
nsRefPtr
<
BluetoothProfileController
>
controller
=
mController
.
forget
(
)
;
controller
-
>
NotifyCompletion
(
aErrorStr
)
;
}
void
BluetoothAvrcpManager
:
:
OnDisconnect
(
const
nsAString
&
aErrorStr
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_TRUE_VOID
(
mController
)
;
nsRefPtr
<
BluetoothProfileController
>
controller
=
mController
.
forget
(
)
;
controller
-
>
NotifyCompletion
(
aErrorStr
)
;
Reset
(
)
;
}
void
BluetoothAvrcpManager
:
:
OnGetServiceChannel
(
const
nsAString
&
aDeviceAddress
const
nsAString
&
aServiceUuid
int
aChannel
)
{
}
void
BluetoothAvrcpManager
:
:
OnUpdateSdpRecords
(
const
nsAString
&
aDeviceAddress
)
{
}
void
BluetoothAvrcpManager
:
:
GetAddress
(
nsAString
&
aDeviceAddress
)
{
aDeviceAddress
=
mDeviceAddress
;
}
bool
BluetoothAvrcpManager
:
:
IsConnected
(
)
{
return
mAvrcpConnected
;
}
void
BluetoothAvrcpManager
:
:
SetConnected
(
bool
aConnected
)
{
mAvrcpConnected
=
aConnected
;
if
(
!
aConnected
)
{
Reset
(
)
;
}
}
void
BluetoothAvrcpManager
:
:
UpdateMetaData
(
const
nsAString
&
aTitle
const
nsAString
&
aArtist
const
nsAString
&
aAlbum
uint64_t
aMediaNumber
uint64_t
aTotalMediaCount
uint32_t
aDuration
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_TRUE_VOID
(
sBtAvrcpInterface
)
;
if
(
mMediaNumber
!
=
aMediaNumber
&
&
mTrackChangedNotifyType
=
=
AVRCP_NTF_INTERIM
)
{
BluetoothAvrcpNotificationParam
param
;
for
(
int
i
=
0
;
i
<
AVRCP_UID_SIZE
;
+
+
i
)
{
param
.
mTrack
[
i
]
=
(
aMediaNumber
>
>
(
56
-
8
*
i
)
)
;
}
mTrackChangedNotifyType
=
AVRCP_NTF_CHANGED
;
sBtAvrcpInterface
-
>
RegisterNotificationRsp
(
AVRCP_EVENT_TRACK_CHANGE
AVRCP_NTF_CHANGED
param
nullptr
)
;
if
(
mPlayPosChangedNotifyType
=
=
AVRCP_NTF_INTERIM
)
{
param
.
mSongPos
=
mPosition
;
mPlayPosChangedNotifyType
=
AVRCP_NTF_CHANGED
;
sBtAvrcpInterface
-
>
RegisterNotificationRsp
(
AVRCP_EVENT_PLAY_POS_CHANGED
AVRCP_NTF_CHANGED
param
nullptr
)
;
}
}
mTitle
.
Assign
(
aTitle
)
;
mArtist
.
Assign
(
aArtist
)
;
mAlbum
.
Assign
(
aAlbum
)
;
mMediaNumber
=
aMediaNumber
;
mTotalMediaCount
=
aTotalMediaCount
;
mDuration
=
aDuration
;
}
void
BluetoothAvrcpManager
:
:
UpdatePlayStatus
(
uint32_t
aDuration
uint32_t
aPosition
ControlPlayStatus
aPlayStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_TRUE_VOID
(
sBtAvrcpInterface
)
;
sBtAvrcpInterface
-
>
GetPlayStatusRsp
(
aPlayStatus
aDuration
aPosition
nullptr
)
;
if
(
mPlayStatus
!
=
aPlayStatus
&
&
mPlayStatusChangedNotifyType
=
=
AVRCP_NTF_INTERIM
)
{
BluetoothAvrcpNotificationParam
param
;
param
.
mPlayStatus
=
aPlayStatus
;
mPlayStatusChangedNotifyType
=
AVRCP_NTF_CHANGED
;
sBtAvrcpInterface
-
>
RegisterNotificationRsp
(
AVRCP_EVENT_PLAY_STATUS_CHANGED
AVRCP_NTF_CHANGED
param
nullptr
)
;
}
if
(
mPosition
!
=
aPosition
&
&
mPlayPosChangedNotifyType
=
=
AVRCP_NTF_INTERIM
)
{
BluetoothAvrcpNotificationParam
param
;
param
.
mSongPos
=
aPosition
;
mPlayPosChangedNotifyType
=
AVRCP_NTF_CHANGED
;
sBtAvrcpInterface
-
>
RegisterNotificationRsp
(
AVRCP_EVENT_PLAY_POS_CHANGED
AVRCP_NTF_CHANGED
param
nullptr
)
;
}
mDuration
=
aDuration
;
mPosition
=
aPosition
;
mPlayStatus
=
aPlayStatus
;
}
void
BluetoothAvrcpManager
:
:
UpdateRegisterNotification
(
BluetoothAvrcpEvent
aEvent
uint32_t
aParam
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
NS_ENSURE_TRUE_VOID
(
sBtAvrcpInterface
)
;
BluetoothAvrcpNotificationParam
param
;
switch
(
aEvent
)
{
case
AVRCP_EVENT_PLAY_STATUS_CHANGED
:
mPlayStatusChangedNotifyType
=
AVRCP_NTF_INTERIM
;
param
.
mPlayStatus
=
mPlayStatus
;
break
;
case
AVRCP_EVENT_TRACK_CHANGE
:
mTrackChangedNotifyType
=
AVRCP_NTF_INTERIM
;
for
(
int
index
=
0
;
index
<
AVRCP_UID_SIZE
;
+
+
index
)
{
if
(
mPlayStatus
=
=
ControlPlayStatus
:
:
PLAYSTATUS_PLAYING
)
{
param
.
mTrack
[
index
]
=
0x0
;
}
else
{
param
.
mTrack
[
index
]
=
0xFF
;
}
}
break
;
case
AVRCP_EVENT_PLAY_POS_CHANGED
:
mPlayPosChangedNotifyType
=
AVRCP_NTF_INTERIM
;
if
(
mPlayStatus
=
=
ControlPlayStatus
:
:
PLAYSTATUS_PLAYING
)
{
param
.
mSongPos
=
mPosition
;
}
else
{
param
.
mSongPos
=
0xFFFFFFFF
;
}
mPlaybackInterval
=
aParam
;
break
;
case
AVRCP_EVENT_APP_SETTINGS_CHANGED
:
mAppSettingsChangedNotifyType
=
AVRCP_NTF_INTERIM
;
param
.
mNumAttr
=
2
;
param
.
mIds
[
0
]
=
AVRCP_PLAYER_ATTRIBUTE_REPEAT
;
param
.
mValues
[
0
]
=
AVRCP_PLAYER_VAL_OFF_REPEAT
;
param
.
mIds
[
1
]
=
AVRCP_PLAYER_ATTRIBUTE_SHUFFLE
;
param
.
mValues
[
1
]
=
AVRCP_PLAYER_VAL_OFF_SHUFFLE
;
break
;
default
:
break
;
}
sBtAvrcpInterface
-
>
RegisterNotificationRsp
(
aEvent
AVRCP_NTF_INTERIM
param
nullptr
)
;
}
void
BluetoothAvrcpManager
:
:
GetAlbum
(
nsAString
&
aAlbum
)
{
aAlbum
.
Assign
(
mAlbum
)
;
}
uint32_t
BluetoothAvrcpManager
:
:
GetDuration
(
)
{
return
mDuration
;
}
ControlPlayStatus
BluetoothAvrcpManager
:
:
GetPlayStatus
(
)
{
return
mPlayStatus
;
}
uint32_t
BluetoothAvrcpManager
:
:
GetPosition
(
)
{
return
mPosition
;
}
uint64_t
BluetoothAvrcpManager
:
:
GetMediaNumber
(
)
{
return
mMediaNumber
;
}
uint64_t
BluetoothAvrcpManager
:
:
GetTotalMediaNumber
(
)
{
return
mTotalMediaCount
;
}
void
BluetoothAvrcpManager
:
:
GetTitle
(
nsAString
&
aTitle
)
{
aTitle
.
Assign
(
mTitle
)
;
}
void
BluetoothAvrcpManager
:
:
GetArtist
(
nsAString
&
aArtist
)
{
aArtist
.
Assign
(
mArtist
)
;
}
void
BluetoothAvrcpManager
:
:
GetPlayStatusNotification
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothService
*
bs
=
BluetoothService
:
:
Get
(
)
;
if
(
!
bs
)
{
return
;
}
bs
-
>
DistributeSignal
(
NS_LITERAL_STRING
(
REQUEST_MEDIA_PLAYSTATUS_ID
)
NS_LITERAL_STRING
(
KEY_ADAPTER
)
)
;
}
void
BluetoothAvrcpManager
:
:
ListPlayerAppAttrNotification
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
ListPlayerAppValuesNotification
(
BluetoothAvrcpPlayerAttribute
aAttrId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
GetPlayerAppValueNotification
(
uint8_t
aNumAttrs
const
BluetoothAvrcpPlayerAttribute
*
aAttrs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
GetPlayerAppAttrsTextNotification
(
uint8_t
aNumAttrs
const
BluetoothAvrcpPlayerAttribute
*
aAttrs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
GetPlayerAppValuesTextNotification
(
uint8_t
aAttrId
uint8_t
aNumVals
const
uint8_t
*
aValues
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
SetPlayerAppValueNotification
(
const
BluetoothAvrcpPlayerSettings
&
aSettings
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
GetElementAttrNotification
(
uint8_t
aNumAttrs
const
BluetoothAvrcpMediaAttribute
*
aAttrs
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoArrayPtr
<
BluetoothAvrcpElementAttribute
>
attrs
(
new
BluetoothAvrcpElementAttribute
[
aNumAttrs
]
)
;
for
(
uint8_t
i
=
0
;
i
<
aNumAttrs
;
+
+
i
)
{
attrs
[
i
]
.
mId
=
aAttrs
[
i
]
;
ConvertAttributeString
(
static_cast
<
BluetoothAvrcpMediaAttribute
>
(
attrs
[
i
]
.
mId
)
attrs
[
i
]
.
mValue
)
;
}
MOZ_ASSERT
(
sBtAvrcpInterface
)
;
sBtAvrcpInterface
-
>
GetElementAttrRsp
(
aNumAttrs
attrs
nullptr
)
;
}
void
BluetoothAvrcpManager
:
:
RegisterNotificationNotification
(
BluetoothAvrcpEvent
aEvent
uint32_t
aParam
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
BluetoothAvrcpManager
*
avrcp
=
BluetoothAvrcpManager
:
:
Get
(
)
;
if
(
!
avrcp
)
{
return
;
}
avrcp
-
>
UpdateRegisterNotification
(
aEvent
aParam
)
;
}
void
BluetoothAvrcpManager
:
:
RemoteFeatureNotification
(
const
nsAString
&
aBdAddr
unsigned
long
aFeatures
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
VolumeChangeNotification
(
uint8_t
aVolume
uint8_t
aCType
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
BluetoothAvrcpManager
:
:
PassthroughCmdNotification
(
int
aId
int
aKeyState
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoString
name
;
NS_ENSURE_TRUE_VOID
(
aKeyState
=
=
AVRC_KEY_PRESS_STATE
|
|
aKeyState
=
=
AVRC_KEY_RELEASE_STATE
)
;
switch
(
aId
)
{
case
AVRC_ID_FAST_FOR
:
if
(
aKeyState
=
=
AVRC_KEY_PRESS_STATE
)
{
name
.
AssignLiteral
(
"
media
-
fast
-
forward
-
button
-
press
"
)
;
}
else
{
name
.
AssignLiteral
(
"
media
-
fast
-
forward
-
button
-
release
"
)
;
}
break
;
case
AVRC_ID_REWIND
:
if
(
aKeyState
=
=
AVRC_KEY_PRESS_STATE
)
{
name
.
AssignLiteral
(
"
media
-
rewind
-
button
-
press
"
)
;
}
else
{
name
.
AssignLiteral
(
"
media
-
rewind
-
button
-
release
"
)
;
}
break
;
default
:
BT_WARNING
(
"
Unable
to
handle
the
unknown
PassThrough
command
%
d
"
aId
)
;
return
;
}
NS_NAMED_LITERAL_STRING
(
type
"
media
-
button
"
)
;
BroadcastSystemMessage
(
type
BluetoothValue
(
name
)
)
;
}
NS_IMPL_ISUPPORTS
(
BluetoothAvrcpManager
nsIObserver
)
