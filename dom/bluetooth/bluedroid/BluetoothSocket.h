#
ifndef
mozilla_dom_bluetooth_bluedroid_BluetoothSocket_h
#
define
mozilla_dom_bluetooth_bluedroid_BluetoothSocket_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
mozilla
/
ipc
/
DataSocket
.
h
"
class
MessageLoop
;
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothSocketObserver
;
class
BluetoothSocketResultHandler
;
class
DroidSocketImpl
;
class
BluetoothSocket
final
:
public
mozilla
:
:
ipc
:
:
DataSocket
{
public
:
BluetoothSocket
(
BluetoothSocketObserver
*
aObserver
)
;
~
BluetoothSocket
(
)
;
nsresult
Connect
(
const
BluetoothAddress
&
aDeviceAddress
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
MessageLoop
*
aConsumerLoop
MessageLoop
*
aIOLoop
)
;
nsresult
Connect
(
const
BluetoothAddress
&
aDeviceAddress
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
)
;
nsresult
Listen
(
const
nsAString
&
aServiceName
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
MessageLoop
*
aConsumerLoop
MessageLoop
*
aIOLoop
)
;
nsresult
Listen
(
const
nsAString
&
aServiceName
const
BluetoothUuid
&
aServiceUuid
BluetoothSocketType
aType
int
aChannel
bool
aAuth
bool
aEncrypt
)
;
void
ReceiveSocketData
(
nsAutoPtr
<
mozilla
:
:
ipc
:
:
UnixSocketBuffer
>
&
aBuffer
)
;
inline
void
GetAddress
(
BluetoothAddress
&
aDeviceAddress
)
{
aDeviceAddress
=
mDeviceAddress
;
}
inline
void
SetAddress
(
const
BluetoothAddress
&
aDeviceAddress
)
{
mDeviceAddress
=
aDeviceAddress
;
}
inline
void
SetCurrentResultHandler
(
BluetoothSocketResultHandler
*
aRes
)
{
mCurrentRes
=
aRes
;
}
void
SendSocketData
(
mozilla
:
:
ipc
:
:
UnixSocketIOBuffer
*
aBuffer
)
override
;
void
Close
(
)
override
;
void
OnConnectSuccess
(
)
override
;
void
OnConnectError
(
)
override
;
void
OnDisconnect
(
)
override
;
private
:
BluetoothSocketObserver
*
mObserver
;
BluetoothSocketResultHandler
*
mCurrentRes
;
DroidSocketImpl
*
mImpl
;
BluetoothAddress
mDeviceAddress
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
