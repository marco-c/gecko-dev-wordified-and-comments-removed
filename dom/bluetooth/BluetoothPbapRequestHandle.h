#
ifndef
mozilla_dom_bluetooth_bluetoothpbaprequesthandle_h
#
define
mozilla_dom_bluetooth_bluetoothpbaprequesthandle_h
#
include
"
nsCOMPtr
.
h
"
#
include
"
mozilla
/
dom
/
DOMRequest
.
h
"
#
include
"
mozilla
/
dom
/
BlobSet
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Blob
;
class
DOMRequest
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothPbapRequestHandle
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
BluetoothPbapRequestHandle
)
static
already_AddRefed
<
BluetoothPbapRequestHandle
>
Create
(
nsPIDOMWindow
*
aOwner
)
;
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
DOMRequest
>
ReplyTovCardPulling
(
Blob
&
aBlob
ErrorResult
&
aRv
)
;
already_AddRefed
<
DOMRequest
>
ReplyToPhonebookPulling
(
Blob
&
aBlob
uint16_t
phonebookSize
ErrorResult
&
aRv
)
;
already_AddRefed
<
DOMRequest
>
ReplyTovCardListing
(
Blob
&
aBlob
uint16_t
phonebookSize
ErrorResult
&
aRv
)
;
private
:
BluetoothPbapRequestHandle
(
nsPIDOMWindow
*
aOwner
)
;
~
BluetoothPbapRequestHandle
(
)
;
nsCOMPtr
<
nsPIDOMWindow
>
mOwner
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
