#
ifndef
mozilla_dom_bluetooth_BluetoothReplyRunnable_h
#
define
mozilla_dom_bluetooth_BluetoothReplyRunnable_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
BluetoothCommon
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
js
/
Value
.
h
"
class
nsIDOMDOMRequest
;
namespace
mozilla
{
namespace
dom
{
class
Promise
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothReply
;
class
BluetoothReplyRunnable
:
public
nsRunnable
{
public
:
NS_DECL_NSIRUNNABLE
BluetoothReplyRunnable
(
nsIDOMDOMRequest
*
aReq
Promise
*
aPromise
=
nullptr
)
;
void
SetReply
(
BluetoothReply
*
aReply
)
;
void
SetError
(
const
nsAString
&
aErrorString
const
enum
BluetoothStatus
aErrorStatus
=
STATUS_FAIL
)
{
mErrorString
=
aErrorString
;
mErrorStatus
=
aErrorStatus
;
}
virtual
void
ReleaseMembers
(
)
;
protected
:
virtual
~
BluetoothReplyRunnable
(
)
;
virtual
bool
ParseSuccessfulReply
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
=
0
;
virtual
nsresult
FireErrorString
(
)
;
nsAutoPtr
<
BluetoothReply
>
mReply
;
RefPtr
<
Promise
>
mPromise
;
private
:
virtual
void
ParseErrorStatus
(
)
;
nsresult
FireReplySuccess
(
JS
:
:
Handle
<
JS
:
:
Value
>
aVal
)
;
virtual
void
OnSuccessFired
(
)
;
virtual
void
OnErrorFired
(
)
;
nsCOMPtr
<
nsIDOMDOMRequest
>
mDOMRequest
;
BluetoothStatus
mErrorStatus
;
nsString
mErrorString
;
}
;
class
BluetoothVoidReplyRunnable
:
public
BluetoothReplyRunnable
{
public
:
BluetoothVoidReplyRunnable
(
nsIDOMDOMRequest
*
aReq
Promise
*
aPromise
=
nullptr
)
;
~
BluetoothVoidReplyRunnable
(
)
;
protected
:
virtual
bool
ParseSuccessfulReply
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
override
{
aValue
.
setUndefined
(
)
;
return
true
;
}
}
;
class
BluetoothReplyTaskQueue
:
public
nsRunnable
{
public
:
NS_DECL_NSIRUNNABLE
class
SubReplyRunnable
:
public
BluetoothReplyRunnable
{
public
:
SubReplyRunnable
(
nsIDOMDOMRequest
*
aReq
Promise
*
aPromise
BluetoothReplyTaskQueue
*
aRootQueue
)
;
~
SubReplyRunnable
(
)
;
BluetoothReplyTaskQueue
*
GetRootQueue
(
)
const
;
private
:
virtual
void
OnSuccessFired
(
)
override
;
virtual
void
OnErrorFired
(
)
override
;
RefPtr
<
BluetoothReplyTaskQueue
>
mRootQueue
;
}
;
friend
class
BluetoothReplyTaskQueue
:
:
SubReplyRunnable
;
class
VoidSubReplyRunnable
:
public
SubReplyRunnable
{
public
:
VoidSubReplyRunnable
(
nsIDOMDOMRequest
*
aReq
Promise
*
aPromise
BluetoothReplyTaskQueue
*
aRootQueue
)
;
~
VoidSubReplyRunnable
(
)
;
protected
:
virtual
bool
ParseSuccessfulReply
(
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aValue
)
override
;
}
;
class
SubTask
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SubTask
)
public
:
SubTask
(
BluetoothReplyTaskQueue
*
aRootQueue
SubReplyRunnable
*
aReply
)
;
BluetoothReplyTaskQueue
*
GetRootQueue
(
)
const
;
SubReplyRunnable
*
GetReply
(
)
const
;
virtual
bool
Execute
(
)
=
0
;
protected
:
virtual
~
SubTask
(
)
;
private
:
RefPtr
<
BluetoothReplyTaskQueue
>
mRootQueue
;
RefPtr
<
SubReplyRunnable
>
mReply
;
}
;
BluetoothReplyTaskQueue
(
BluetoothReplyRunnable
*
aReply
)
;
void
AppendTask
(
already_AddRefed
<
SubTask
>
aTask
)
;
protected
:
~
BluetoothReplyTaskQueue
(
)
;
void
FireSuccessReply
(
)
;
void
FireErrorReply
(
)
;
private
:
void
Clear
(
)
;
void
OnSubReplySuccessFired
(
SubReplyRunnable
*
aSubReply
)
;
void
OnSubReplyErrorFired
(
SubReplyRunnable
*
aSubReply
)
;
virtual
void
OnSuccessFired
(
)
;
virtual
void
OnErrorFired
(
)
;
RefPtr
<
BluetoothReplyRunnable
>
mReply
;
nsTArray
<
RefPtr
<
SubTask
>
>
mTasks
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
