#
include
"
BluetoothGattReplyRunnable
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothTypes
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
using
namespace
mozilla
:
:
dom
;
USING_BLUETOOTH_NAMESPACE
BluetoothGattReplyRunnable
:
:
BluetoothGattReplyRunnable
(
Promise
*
aPromise
)
:
BluetoothReplyRunnable
(
nullptr
aPromise
)
{
MOZ_ASSERT
(
aPromise
)
;
}
void
BluetoothGattReplyRunnable
:
:
GattStatusToDOMStatus
(
const
BluetoothGattStatus
aGattStatus
nsresult
&
aDOMStatus
)
{
if
(
(
aGattStatus
>
=
GATT_STATUS_BEGIN_OF_APPLICATION_ERROR
)
&
&
(
aGattStatus
<
=
GATT_STATUS_END_OF_APPLICATION_ERROR
)
&
&
IsWrite
(
)
)
{
aDOMStatus
=
NS_ERROR_DOM_INVALID_MODIFICATION_ERR
;
return
;
}
switch
(
aGattStatus
)
{
case
GATT_STATUS_INVALID_ATTRIBUTE_LENGTH
:
aDOMStatus
=
NS_ERROR_DOM_INVALID_MODIFICATION_ERR
;
break
;
case
GATT_STATUS_ATTRIBUTE_NOT_LONG
:
aDOMStatus
=
NS_ERROR_DOM_INVALID_MODIFICATION_ERR
;
break
;
case
GATT_STATUS_INSUFFICIENT_AUTHENTICATION
:
case
GATT_STATUS_INSUFFICIENT_ENCRYPTION
:
case
GATT_STATUS_INSUFFICIENT_ENCRYPTION_KEY_SIZE
:
aDOMStatus
=
NS_ERROR_DOM_SECURITY_ERR
;
break
;
case
GATT_STATUS_INSUFFICIENT_AUTHORIZATION
:
aDOMStatus
=
NS_ERROR_DOM_SECURITY_ERR
;
break
;
case
GATT_STATUS_INVALID_HANDLE
:
case
GATT_STATUS_INVALID_PDU
:
case
GATT_STATUS_INVALID_OFFSET
:
case
GATT_STATUS_ATTRIBUTE_NOT_FOUND
:
case
GATT_STATUS_UNSUPPORTED_GROUP_TYPE
:
case
GATT_STATUS_READ_NOT_PERMITTED
:
case
GATT_STATUS_WRITE_NOT_PERMITTED
:
case
GATT_STATUS_REQUEST_NOT_SUPPORTED
:
case
GATT_STATUS_PREPARE_QUEUE_FULL
:
case
GATT_STATUS_INSUFFICIENT_RESOURCES
:
case
GATT_STATUS_UNLIKELY_ERROR
:
default
:
aDOMStatus
=
NS_ERROR_DOM_NOT_SUPPORTED_ERR
;
break
;
}
}
nsresult
BluetoothGattReplyRunnable
:
:
FireErrorString
(
)
{
MOZ_ASSERT
(
mReply
)
;
if
(
!
mPromise
|
|
mReply
-
>
type
(
)
!
=
BluetoothReply
:
:
TBluetoothReplyError
|
|
mReply
-
>
get_BluetoothReplyError
(
)
.
errorStatus
(
)
.
type
(
)
!
=
BluetoothErrorStatus
:
:
TBluetoothGattStatus
)
{
return
BluetoothReplyRunnable
:
:
FireErrorString
(
)
;
}
nsresult
domStatus
=
NS_OK
;
GattStatusToDOMStatus
(
mReply
-
>
get_BluetoothReplyError
(
)
.
errorStatus
(
)
.
get_BluetoothGattStatus
(
)
domStatus
)
;
nsresult
rv
=
NS_ERROR_GENERATE_FAILURE
(
NS_ERROR_MODULE_DOM
domStatus
)
;
mPromise
-
>
MaybeReject
(
rv
)
;
return
NS_OK
;
}
