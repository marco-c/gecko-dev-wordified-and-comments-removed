#
ifndef
mozilla_dom_bluetooth_BluetoothService_h
#
define
mozilla_dom_bluetooth_BluetoothService_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
BluetoothInterface
.
h
"
#
include
"
BluetoothProfileManagerBase
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Blob
;
class
BlobChild
;
class
BlobParent
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothManager
;
class
BluetoothNamedValue
;
class
BluetoothReplyRunnable
;
class
BluetoothSignal
;
typedef
mozilla
:
:
ObserverList
<
BluetoothSignal
>
BluetoothSignalObserverList
;
class
BluetoothService
:
public
nsIObserver
{
class
ToggleBtTask
;
friend
class
ToggleBtTask
;
class
StartupTask
;
friend
class
StartupTask
;
public
:
class
ToggleBtAck
:
public
nsRunnable
{
public
:
ToggleBtAck
(
bool
aEnabled
)
;
NS_IMETHOD
Run
(
)
;
private
:
bool
mEnabled
;
}
;
friend
class
ToggleBtAck
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
virtual
void
RegisterBluetoothSignalHandler
(
const
nsAString
&
aNodeName
BluetoothSignalObserver
*
aMsgHandler
)
;
virtual
void
UnregisterBluetoothSignalHandler
(
const
nsAString
&
aNodeName
BluetoothSignalObserver
*
aMsgHandler
)
;
void
UnregisterAllSignalHandlers
(
BluetoothSignalObserver
*
aMsgHandler
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
nsAString
&
aPath
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
nsAString
&
aPath
const
BluetoothValue
&
aValue
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
BluetoothAddress
&
aAddress
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
BluetoothAddress
&
aAddress
const
BluetoothValue
&
aValue
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
BluetoothUuid
&
aUuid
)
;
void
DistributeSignal
(
const
nsAString
&
aName
const
BluetoothUuid
&
aUuid
const
BluetoothValue
&
aValue
)
;
void
DistributeSignal
(
const
BluetoothSignal
&
aSignal
)
;
static
BluetoothService
*
Get
(
)
;
static
already_AddRefed
<
BluetoothService
>
FactoryCreate
(
)
{
RefPtr
<
BluetoothService
>
service
=
Get
(
)
;
return
service
.
forget
(
)
;
}
virtual
nsresult
GetAdaptersInternal
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
GetPairedDevicePropertiesInternal
(
const
nsTArray
<
BluetoothAddress
>
&
aDeviceAddresses
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
GetConnectedDevicePropertiesInternal
(
uint16_t
aServiceUuid
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
FetchUuidsInternal
(
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
StopDiscoveryInternal
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
StartDiscoveryInternal
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
StopLeScanInternal
(
const
BluetoothUuid
&
aScanUuid
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
StartLeScanInternal
(
const
nsTArray
<
BluetoothUuid
>
&
aServiceUuids
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
SetProperty
(
BluetoothObjectType
aType
const
BluetoothNamedValue
&
aValue
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
CreatePairedDeviceInternal
(
const
BluetoothAddress
&
aDeviceAddress
int
aTimeout
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
RemoveDeviceInternal
(
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
GetServiceChannel
(
const
BluetoothAddress
&
aDeviceAddress
const
BluetoothUuid
&
aServiceUuid
BluetoothProfileManagerBase
*
aManager
)
=
0
;
virtual
bool
UpdateSdpRecords
(
const
BluetoothAddress
&
aDeviceAddress
BluetoothProfileManagerBase
*
aManager
)
=
0
;
virtual
void
PinReplyInternal
(
const
BluetoothAddress
&
aDeviceAddress
bool
aAccept
const
BluetoothPinCode
&
aPinCode
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SspReplyInternal
(
const
BluetoothAddress
&
aDeviceAddress
BluetoothSspVariant
aVariant
bool
aAccept
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SetPinCodeInternal
(
const
BluetoothAddress
&
aDeviceAddress
const
BluetoothPinCode
&
aPinCode
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SetPasskeyInternal
(
const
BluetoothAddress
&
aDeviceAddress
uint32_t
aPasskey
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SetPairingConfirmationInternal
(
const
BluetoothAddress
&
aDeviceAddress
bool
aConfirm
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
Connect
(
const
BluetoothAddress
&
aDeviceAddress
uint32_t
aCod
uint16_t
aServiceUuid
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
Disconnect
(
const
BluetoothAddress
&
aDeviceAddress
uint16_t
aServiceUuid
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SendFile
(
const
BluetoothAddress
&
aDeviceAddress
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SendFile
(
const
BluetoothAddress
&
aDeviceAddress
Blob
*
aBlob
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
StopSendingFile
(
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ConfirmReceivingFile
(
const
BluetoothAddress
&
aDeviceAddress
bool
aConfirm
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ConnectSco
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
DisconnectSco
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
IsScoConnected
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SetObexPassword
(
const
nsAString
&
aPassword
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
RejectObexAuth
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyTovCardPulling
(
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyTovCardPulling
(
Blob
*
aBlob
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToPhonebookPulling
(
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
uint16_t
aPhonebookSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToPhonebookPulling
(
Blob
*
aBlob
uint16_t
aPhonebookSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyTovCardListing
(
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
uint16_t
aPhonebookSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyTovCardListing
(
Blob
*
aBlob
uint16_t
aPhonebookSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapFolderListing
(
long
aMasId
const
nsAString
&
aFolderlists
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapMessagesListing
(
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
long
aMasId
bool
aNewMessage
const
nsAString
&
aTimestamp
int
aSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapMessagesListing
(
long
aMasId
Blob
*
aBlob
bool
aNewMessage
const
nsAString
&
aTimestamp
int
aSize
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapGetMessage
(
BlobParent
*
aBlobParent
BlobChild
*
aBlobChild
long
aMasId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapGetMessage
(
Blob
*
aBlob
long
aMasId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapSetMessageStatus
(
long
aMasId
bool
aStatus
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapSendMessage
(
long
aMasId
const
nsAString
&
aHandleId
bool
aStatus
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ReplyToMapMessageUpdate
(
long
aMasId
bool
aStatus
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
#
ifdef
MOZ_B2G_RIL
virtual
void
AnswerWaitingCall
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
IgnoreWaitingCall
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
ToggleCalls
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
#
endif
virtual
void
SendMetaData
(
const
nsAString
&
aTitle
const
nsAString
&
aArtist
const
nsAString
&
aAlbum
int64_t
aMediaNumber
int64_t
aTotalMediaCount
int64_t
aDuration
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
SendPlayStatus
(
int64_t
aDuration
int64_t
aPosition
ControlPlayStatus
aPlayStatus
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
UpdatePlayStatus
(
uint32_t
aDuration
uint32_t
aPosition
ControlPlayStatus
aPlayStatus
)
=
0
;
virtual
nsresult
SendSinkMessage
(
const
nsAString
&
aDeviceAddresses
const
nsAString
&
aMessage
)
=
0
;
virtual
nsresult
SendInputMessage
(
const
nsAString
&
aDeviceAddresses
const
nsAString
&
aMessage
)
=
0
;
virtual
void
ConnectGattClientInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
DisconnectGattClientInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
DiscoverGattServicesInternal
(
const
BluetoothUuid
&
aAppUuid
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientStartNotificationsInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServId
const
BluetoothGattId
&
aCharId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientStopNotificationsInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServId
const
BluetoothGattId
&
aCharId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
UnregisterGattClientInternal
(
int
aClientIf
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientReadRemoteRssiInternal
(
int
aClientIf
const
BluetoothAddress
&
aDeviceAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientReadCharacteristicValueInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
const
BluetoothGattId
&
aCharacteristicId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientWriteCharacteristicValueInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
const
BluetoothGattId
&
aCharacteristicId
const
BluetoothGattWriteType
&
aWriteType
const
nsTArray
<
uint8_t
>
&
aValue
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientReadDescriptorValueInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
const
BluetoothGattId
&
aCharacteristicId
const
BluetoothGattId
&
aDescriptorId
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattClientWriteDescriptorValueInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
const
BluetoothGattId
&
aCharacteristicId
const
BluetoothGattId
&
aDescriptorId
const
nsTArray
<
uint8_t
>
&
aValue
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerConnectPeripheralInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerDisconnectPeripheralInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aAddress
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
UnregisterGattServerInternal
(
int
aServerIf
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerAddServiceInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
uint16_t
aHandleCount
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerAddIncludedServiceInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
const
BluetoothAttributeHandle
&
aIncludedServiceHandle
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerAddCharacteristicInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
const
BluetoothUuid
&
aCharacteristicUuid
BluetoothGattAttrPerm
aPermissions
BluetoothGattCharProp
aProperties
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerAddDescriptorInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
const
BluetoothAttributeHandle
&
aCharacteristicHandle
const
BluetoothUuid
&
aDescriptorUuid
BluetoothGattAttrPerm
aPermissions
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerRemoveServiceInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerStartServiceInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerStopServiceInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAttributeHandle
&
aServiceHandle
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerSendResponseInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aAddress
uint16_t
aStatus
int32_t
aRequestId
const
BluetoothGattResponse
&
aRsp
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
void
GattServerSendIndicationInternal
(
const
BluetoothUuid
&
aAppUuid
const
BluetoothAddress
&
aAddress
const
BluetoothAttributeHandle
&
aCharacteristicHandle
bool
aConfirm
const
nsTArray
<
uint8_t
>
&
aValue
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
bool
IsEnabled
(
)
const
{
return
mEnabled
;
}
bool
IsToggling
(
)
const
;
static
void
AcknowledgeToggleBt
(
bool
aEnabled
)
;
void
FireAdapterStateChanged
(
bool
aEnable
)
;
nsresult
EnableDisable
(
bool
aEnable
BluetoothReplyRunnable
*
aRunnable
)
;
virtual
nsresult
StartInternal
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
virtual
nsresult
StopInternal
(
BluetoothReplyRunnable
*
aRunnable
)
=
0
;
protected
:
BluetoothService
(
)
:
mEnabled
(
false
)
{
}
virtual
~
BluetoothService
(
)
;
bool
Init
(
)
;
void
Cleanup
(
)
;
nsresult
StartBluetooth
(
bool
aIsStartup
BluetoothReplyRunnable
*
aRunnable
)
;
nsresult
StopBluetooth
(
bool
aIsStartup
BluetoothReplyRunnable
*
aRunnable
)
;
nsresult
StartStopBluetooth
(
bool
aStart
bool
aIsStartup
BluetoothReplyRunnable
*
aRunnable
)
;
virtual
nsresult
HandleStartup
(
)
;
virtual
void
CompleteToggleBt
(
bool
aEnabled
)
;
nsresult
HandleStartupSettingsCheck
(
bool
aEnable
)
;
nsresult
HandleSettingsChanged
(
nsISupports
*
aSubject
)
;
virtual
nsresult
HandleShutdown
(
)
;
void
SetEnabled
(
bool
aEnabled
)
;
static
BluetoothService
*
Create
(
)
;
typedef
nsClassHashtable
<
nsStringHashKey
BluetoothSignalObserverList
>
BluetoothSignalObserverTable
;
BluetoothSignalObserverTable
mBluetoothSignalObserverTable
;
nsTArray
<
BluetoothSignal
>
mPendingPairReqSignals
;
bool
mEnabled
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
