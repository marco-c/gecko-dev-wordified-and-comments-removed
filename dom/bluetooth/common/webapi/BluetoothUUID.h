#
ifndef
mozilla_dom_BluetoothUUID_h
#
define
mozilla_dom_BluetoothUUID_h
#
include
"
mozilla
/
dom
/
BluetoothUUIDBinding
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
namespace
dom
{
class
StringOrUnsignedLong
;
class
BluetoothUUID
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
BluetoothUUID
)
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
void
HandleShutdown
(
)
;
static
void
GetService
(
const
GlobalObject
&
aGlobal
const
StringOrUnsignedLong
&
aName
nsAString
&
aReturn
ErrorResult
&
aRv
)
;
static
void
GetCharacteristic
(
const
GlobalObject
&
aGlobal
const
StringOrUnsignedLong
&
aName
nsAString
&
aReturn
ErrorResult
&
aRv
)
;
static
void
GetDescriptor
(
const
GlobalObject
&
aGlobal
const
StringOrUnsignedLong
&
aName
nsAString
&
aReturn
ErrorResult
&
aRv
)
;
static
void
CanonicalUUID
(
const
GlobalObject
&
aGlobal
uint32_t
aAlias
nsAString
&
aReturn
)
;
private
:
BluetoothUUID
(
nsPIDOMWindowInner
*
aOwner
)
;
~
BluetoothUUID
(
)
;
static
void
InitServiceTable
(
)
;
static
void
InitCharacteristicTable
(
)
;
static
void
InitDescriptorTable
(
)
;
enum
GattAttribute
{
SERVICE
CHARACTERISTIC
DESCRIPTOR
}
;
static
void
ResolveUUIDName
(
const
GlobalObject
&
aGlobal
const
StringOrUnsignedLong
&
aName
GattAttribute
aAttr
nsAString
&
aReturn
ErrorResult
&
aRv
)
;
static
bool
GetTable
(
GattAttribute
aAttr
const
nsAString
&
aString
uint32_t
&
aAlias
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mOwner
;
static
bool
sInShutdown
;
static
nsDataHashtable
<
nsStringHashKey
uint32_t
>
*
sUUIDServiceTable
;
static
nsDataHashtable
<
nsStringHashKey
uint32_t
>
*
sUUIDCharacteristicTable
;
static
nsDataHashtable
<
nsStringHashKey
uint32_t
>
*
sUUIDDescriptorTable
;
}
;
}
}
#
endif
