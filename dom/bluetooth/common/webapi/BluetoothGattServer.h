#
ifndef
mozilla_dom_bluetooth_BluetoothGattServer_h
#
define
mozilla_dom_bluetooth_BluetoothGattServer_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothGattServerBinding
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothCommon
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothSignal
;
class
BluetoothGattServer
final
:
public
DOMEventTargetHelper
public
BluetoothSignalObserver
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BluetoothGattServer
DOMEventTargetHelper
)
IMPL_EVENT_HANDLER
(
connectionstatechanged
)
;
already_AddRefed
<
Promise
>
Connect
(
const
nsAString
&
aAddress
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Disconnect
(
const
nsAString
&
aAddress
ErrorResult
&
aRv
)
;
void
Notify
(
const
BluetoothSignal
&
aData
)
;
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
void
DisconnectFromOwner
(
)
override
;
BluetoothGattServer
(
nsPIDOMWindow
*
aOwner
)
;
void
Invalidate
(
)
;
private
:
~
BluetoothGattServer
(
)
;
nsCOMPtr
<
nsPIDOMWindow
>
mOwner
;
nsString
mAppUuid
;
int
mServerIf
;
bool
mValid
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
