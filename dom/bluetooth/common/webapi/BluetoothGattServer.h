#
ifndef
mozilla_dom_bluetooth_BluetoothGattServer_h
#
define
mozilla_dom_bluetooth_BluetoothGattServer_h
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothGattServerBinding
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothCommon
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothGattService
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Promise
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothSignal
;
class
BluetoothGattServer
final
:
public
DOMEventTargetHelper
public
BluetoothSignalObserver
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
BluetoothGattServer
DOMEventTargetHelper
)
void
GetServices
(
nsTArray
<
RefPtr
<
BluetoothGattService
>
>
&
aServices
)
const
{
aServices
=
mServices
;
}
IMPL_EVENT_HANDLER
(
connectionstatechanged
)
;
IMPL_EVENT_HANDLER
(
attributereadreq
)
;
IMPL_EVENT_HANDLER
(
attributewritereq
)
;
already_AddRefed
<
Promise
>
Connect
(
const
nsAString
&
aAddress
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Disconnect
(
const
nsAString
&
aAddress
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
AddService
(
BluetoothGattService
&
aService
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
RemoveService
(
BluetoothGattService
&
aService
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
NotifyCharacteristicChanged
(
const
nsAString
&
aAddress
BluetoothGattCharacteristic
&
aCharacteristic
bool
aConfirm
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
SendResponse
(
const
nsAString
&
aAddress
uint16_t
aStatus
int32_t
aRequestId
ErrorResult
&
aRv
)
;
void
Notify
(
const
BluetoothSignal
&
aData
)
;
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
void
DisconnectFromOwner
(
)
override
;
BluetoothGattServer
(
nsPIDOMWindow
*
aOwner
)
;
void
Invalidate
(
)
;
private
:
~
BluetoothGattServer
(
)
;
class
AddIncludedServiceTask
;
class
AddCharacteristicTask
;
class
AddDescriptorTask
;
class
StartServiceTask
;
class
CancelAddServiceTask
;
class
AddServiceTaskQueue
;
class
AddServiceTask
;
class
RemoveServiceTask
;
friend
class
AddIncludedServiceTask
;
friend
class
AddCharacteristicTask
;
friend
class
AddDescriptorTask
;
friend
class
StartServiceTask
;
friend
class
CancelAddServiceTask
;
friend
class
AddServiceTaskQueue
;
friend
class
AddServiceTask
;
friend
class
RemoveServiceTask
;
struct
RequestData
{
RequestData
(
const
BluetoothAttributeHandle
&
aHandle
BluetoothGattCharacteristic
*
aCharacteristic
BluetoothGattDescriptor
*
aDescriptor
)
:
mHandle
(
aHandle
)
mCharacteristic
(
aCharacteristic
)
mDescriptor
(
aDescriptor
)
{
}
BluetoothAttributeHandle
mHandle
;
RefPtr
<
BluetoothGattCharacteristic
>
mCharacteristic
;
RefPtr
<
BluetoothGattDescriptor
>
mDescriptor
;
}
;
void
HandleServerRegistered
(
const
BluetoothValue
&
aValue
)
;
void
HandleServerUnregistered
(
const
BluetoothValue
&
aValue
)
;
void
HandleConnectionStateChanged
(
const
BluetoothValue
&
aValue
)
;
void
HandleServiceHandleUpdated
(
const
BluetoothValue
&
aValue
)
;
void
HandleCharacteristicHandleUpdated
(
const
BluetoothValue
&
aValue
)
;
void
HandleDescriptorHandleUpdated
(
const
BluetoothValue
&
aValue
)
;
void
HandleReadWriteRequest
(
const
BluetoothValue
&
aValue
const
nsAString
&
aString
)
;
nsCOMPtr
<
nsPIDOMWindow
>
mOwner
;
nsString
mAppUuid
;
int
mServerIf
;
bool
mValid
;
nsTArray
<
RefPtr
<
BluetoothGattService
>
>
mServices
;
RefPtr
<
BluetoothGattService
>
mPendingService
;
nsClassHashtable
<
nsUint32HashKey
RequestData
>
mRequestMap
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
