#
include
"
BluetoothCommon
.
h
"
#
include
"
BluetoothMapRequestHandle
.
h
"
#
include
"
BluetoothReplyRunnable
.
h
"
#
include
"
BluetoothService
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothMapRequestHandleBinding
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
using
namespace
mozilla
;
using
namespace
dom
;
USING_BLUETOOTH_NAMESPACE
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
BluetoothMapRequestHandle
mOwner
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
BluetoothMapRequestHandle
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
BluetoothMapRequestHandle
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
BluetoothMapRequestHandle
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
BluetoothMapRequestHandle
:
:
BluetoothMapRequestHandle
(
nsPIDOMWindow
*
aOwner
)
:
mOwner
(
aOwner
)
{
MOZ_ASSERT
(
aOwner
)
;
}
BluetoothMapRequestHandle
:
:
~
BluetoothMapRequestHandle
(
)
{
}
already_AddRefed
<
BluetoothMapRequestHandle
>
BluetoothMapRequestHandle
:
:
Create
(
nsPIDOMWindow
*
aOwner
)
{
MOZ_ASSERT
(
aOwner
)
;
nsRefPtr
<
BluetoothMapRequestHandle
>
handle
=
new
BluetoothMapRequestHandle
(
aOwner
)
;
return
handle
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToFolderListing
(
long
aMasId
const
nsAString
&
aFolderlists
ErrorResult
&
aRv
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToMessagesListing
(
long
aMasId
Blob
&
aBlob
bool
aNewMessage
const
nsAString
&
aTimestamp
int
aSize
ErrorResult
&
aRv
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToGetMessage
(
long
aMasId
Blob
&
aBlob
ErrorResult
&
aRv
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToSetMessageStatus
(
long
aMasId
bool
aStatus
ErrorResult
&
aRv
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToSendMessage
(
long
aMasId
bool
aStatus
ErrorResult
&
aRv
)
{
return
nullptr
;
}
already_AddRefed
<
Promise
>
BluetoothMapRequestHandle
:
:
ReplyToMessageUpdate
(
long
aMasId
bool
aStatus
ErrorResult
&
aRv
)
{
return
nullptr
;
}
JSObject
*
BluetoothMapRequestHandle
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
BluetoothMapRequestHandleBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
