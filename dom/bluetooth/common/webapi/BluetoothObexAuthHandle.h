#
ifndef
mozilla_dom_bluetooth_BluetoothObexAuthHandle_h
#
define
mozilla_dom_bluetooth_BluetoothObexAuthHandle_h
#
include
"
BluetoothCommon
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
Promise
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothObexAuthHandle
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
BluetoothObexAuthHandle
)
static
already_AddRefed
<
BluetoothObexAuthHandle
>
Create
(
nsPIDOMWindowInner
*
aOwner
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mOwner
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
Promise
>
SetPassword
(
const
nsAString
&
aPassword
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
Reject
(
ErrorResult
&
aRv
)
;
private
:
BluetoothObexAuthHandle
(
nsPIDOMWindowInner
*
aOwner
)
;
~
BluetoothObexAuthHandle
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mOwner
;
}
;
END_BLUETOOTH_NAMESPACE
#
endif
