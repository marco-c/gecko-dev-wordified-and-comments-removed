#
ifndef
mozilla_dom_bluetooth_BluetoothGattDescriptor_h
#
define
mozilla_dom_bluetooth_BluetoothGattDescriptor_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothGattDescriptorBinding
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothCommon
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
GattPermissions
;
}
}
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothGattCharacteristic
;
class
BluetoothSignal
;
class
BluetoothValue
;
class
BluetoothGattDescriptor
final
:
public
nsISupports
public
nsWrapperCache
public
BluetoothSignalObserver
{
friend
class
BluetoothGattServer
;
friend
class
BluetoothGattCharacteristic
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
BluetoothGattDescriptor
)
BluetoothGattCharacteristic
*
Characteristic
(
)
const
{
return
mCharacteristic
;
}
void
GetUuid
(
nsString
&
aUuidStr
)
const
{
aUuidStr
=
mUuidStr
;
}
void
GetValue
(
JSContext
*
cx
JS
:
:
MutableHandle
<
JSObject
*
>
aValue
)
const
;
void
GetPermissions
(
GattPermissions
&
aPermissions
)
const
;
already_AddRefed
<
Promise
>
ReadValue
(
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
WriteValue
(
const
RootedTypedArray
<
ArrayBuffer
>
&
aValue
ErrorResult
&
aRv
)
;
void
Notify
(
const
BluetoothSignal
&
aData
)
;
const
BluetoothAttributeHandle
&
GetDescriptorHandle
(
)
const
{
return
mDescriptorHandle
;
}
nsPIDOMWindow
*
GetParentObject
(
)
const
{
return
mOwner
;
}
void
GetUuid
(
BluetoothUuid
&
aUuid
)
const
;
BluetoothGattAttrPerm
GetPermissions
(
)
const
{
return
mPermissions
;
}
uint16_t
GetHandleCount
(
)
const
{
return
sHandleCount
;
}
const
nsTArray
<
uint8_t
>
&
GetValue
(
)
const
{
return
mValue
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
BluetoothGattDescriptor
(
nsPIDOMWindow
*
aOwner
BluetoothGattCharacteristic
*
aCharacteristic
const
BluetoothGattId
&
aDescriptorId
)
;
BluetoothGattDescriptor
(
nsPIDOMWindow
*
aOwner
BluetoothGattCharacteristic
*
aCharacteristic
const
nsAString
&
aDescriptorUuid
const
GattPermissions
&
aPermissions
const
ArrayBuffer
&
aValue
)
;
private
:
~
BluetoothGattDescriptor
(
)
;
void
HandleDescriptorValueUpdated
(
const
BluetoothValue
&
aValue
)
;
void
AssignAppUuid
(
const
nsAString
&
aAppUuid
)
;
void
AssignDescriptorHandle
(
const
BluetoothAttributeHandle
&
aDescriptorHandle
)
;
bool
IsActivated
(
)
const
{
return
mActive
;
}
nsCOMPtr
<
nsPIDOMWindow
>
mOwner
;
nsRefPtr
<
BluetoothGattCharacteristic
>
mCharacteristic
;
BluetoothGattId
mDescriptorId
;
nsString
mUuidStr
;
nsTArray
<
uint8_t
>
mValue
;
BluetoothGattAttrPerm
mPermissions
;
const
BluetoothAttRole
mAttRole
;
bool
mActive
;
BluetoothAttributeHandle
mDescriptorHandle
;
static
const
uint16_t
sHandleCount
;
}
;
END_BLUETOOTH_NAMESPACE
template
<
>
class
nsDefaultComparator
<
nsRefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattDescriptor
>
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothUuid
>
{
public
:
bool
Equals
(
const
nsRefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattDescriptor
>
&
aDesc
const
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothUuid
&
aUuid
)
const
{
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothUuid
uuid
;
aDesc
-
>
GetUuid
(
uuid
)
;
return
uuid
=
=
aUuid
;
}
}
;
template
<
>
class
nsDefaultComparator
<
nsRefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattDescriptor
>
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothAttributeHandle
>
{
public
:
bool
Equals
(
const
nsRefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattDescriptor
>
&
aDesc
const
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothAttributeHandle
&
aHandle
)
const
{
return
aDesc
-
>
GetDescriptorHandle
(
)
=
=
aHandle
;
}
}
;
#
endif
