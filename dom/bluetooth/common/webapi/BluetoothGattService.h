#
ifndef
mozilla_dom_bluetooth_BluetoothGattService_h
#
define
mozilla_dom_bluetooth_BluetoothGattService_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
BluetoothGattServiceBinding
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothCommon
.
h
"
#
include
"
mozilla
/
dom
/
bluetooth
/
BluetoothGattCharacteristic
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
BEGIN_BLUETOOTH_NAMESPACE
class
BluetoothGatt
;
class
BluetoothSignal
;
class
BluetoothValue
;
class
BluetoothGattService
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
BluetoothGatt
;
friend
class
BluetoothGattServer
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
BluetoothGattService
)
bool
IsPrimary
(
)
const
{
return
mServiceId
.
mIsPrimary
;
}
void
GetUuid
(
nsString
&
aUuidStr
)
const
{
aUuidStr
=
mUuidStr
;
}
int
InstanceId
(
)
const
{
return
mServiceId
.
mId
.
mInstanceId
;
}
void
GetIncludedServices
(
nsTArray
<
RefPtr
<
BluetoothGattService
>
>
&
aIncludedServices
)
const
{
aIncludedServices
=
mIncludedServices
;
}
void
GetCharacteristics
(
nsTArray
<
RefPtr
<
BluetoothGattCharacteristic
>
>
&
aCharacteristics
)
const
{
aCharacteristics
=
mCharacteristics
;
}
static
already_AddRefed
<
BluetoothGattService
>
Constructor
(
const
GlobalObject
&
aGlobal
const
BluetoothGattServiceInit
&
aInit
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
AddCharacteristic
(
const
nsAString
&
aCharacteristicUuid
const
GattPermissions
&
aPermissions
const
GattCharacteristicProperties
&
aProperties
const
ArrayBuffer
&
aValue
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
AddIncludedService
(
BluetoothGattService
&
aIncludedService
ErrorResult
&
aRv
)
;
const
nsAString
&
GetAppUuid
(
)
const
{
return
mAppUuid
;
}
const
BluetoothGattServiceId
&
GetServiceId
(
)
const
{
return
mServiceId
;
}
const
BluetoothAttributeHandle
&
GetServiceHandle
(
)
const
{
return
mServiceHandle
;
}
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mOwner
;
}
uint16_t
GetHandleCount
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
BluetoothGattService
(
nsPIDOMWindowInner
*
aOwner
const
nsAString
&
aAppUuid
const
BluetoothGattServiceId
&
aServiceId
)
;
BluetoothGattService
(
nsPIDOMWindowInner
*
aOwner
const
BluetoothGattServiceInit
&
aInit
)
;
private
:
~
BluetoothGattService
(
)
;
void
AssignIncludedServices
(
const
nsTArray
<
BluetoothGattServiceId
>
&
aServiceIds
)
;
void
AssignCharacteristics
(
const
nsTArray
<
BluetoothGattCharAttribute
>
&
aCharacteristics
)
;
void
AssignDescriptors
(
const
BluetoothGattId
&
aCharacteristicId
const
nsTArray
<
BluetoothGattId
>
&
aDescriptorIds
)
;
void
AssignAppUuid
(
const
nsAString
&
aAppUuid
)
;
void
AssignServiceHandle
(
const
BluetoothAttributeHandle
&
aServiceHandle
)
;
void
AssignCharacteristicHandle
(
const
BluetoothUuid
&
aCharacteristicUuid
const
BluetoothAttributeHandle
&
aCharacteristicHandle
)
;
void
AssignDescriptorHandle
(
const
BluetoothUuid
&
aDescriptorUuid
const
BluetoothAttributeHandle
&
aCharacteristicHandle
const
BluetoothAttributeHandle
&
aDescriptorHandle
)
;
bool
IsActivated
(
)
const
{
return
mActive
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
mOwner
;
nsString
mAppUuid
;
BluetoothGattServiceId
mServiceId
;
nsString
mUuidStr
;
nsTArray
<
RefPtr
<
BluetoothGattService
>
>
mIncludedServices
;
nsTArray
<
RefPtr
<
BluetoothGattCharacteristic
>
>
mCharacteristics
;
const
BluetoothAttRole
mAttRole
;
bool
mActive
;
BluetoothAttributeHandle
mServiceHandle
;
static
const
uint16_t
sHandleCount
;
}
;
END_BLUETOOTH_NAMESPACE
template
<
>
class
nsDefaultComparator
<
RefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattService
>
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattServiceId
>
{
public
:
bool
Equals
(
const
RefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattService
>
&
aService
const
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattServiceId
&
aServiceId
)
const
{
return
aService
-
>
GetServiceId
(
)
=
=
aServiceId
;
}
}
;
template
<
>
class
nsDefaultComparator
<
RefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattService
>
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothAttributeHandle
>
{
public
:
bool
Equals
(
const
RefPtr
<
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothGattService
>
&
aService
const
mozilla
:
:
dom
:
:
bluetooth
:
:
BluetoothAttributeHandle
&
aServiceHandle
)
const
{
return
aService
-
>
GetServiceHandle
(
)
=
=
aServiceHandle
;
}
}
;
#
endif
