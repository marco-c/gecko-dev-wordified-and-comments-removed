#
include
"
WorkletImpl
.
h
"
#
include
"
Worklet
.
h
"
#
include
"
WorkletThread
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
dom
/
RegisterWorkletBindings
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
WorkletBinding
.
h
"
namespace
mozilla
{
WorkletLoadInfo
:
:
WorkletLoadInfo
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
)
:
mInnerWindowID
(
aWindow
-
>
WindowID
(
)
)
mOriginAttributes
(
BasePrincipal
:
:
Cast
(
aPrincipal
)
-
>
OriginAttributesRef
(
)
)
mPrincipal
(
aPrincipal
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsPIDOMWindowOuter
*
outerWindow
=
aWindow
-
>
GetOuterWindow
(
)
;
if
(
outerWindow
)
{
mOuterWindowID
=
outerWindow
-
>
WindowID
(
)
;
}
else
{
mOuterWindowID
=
0
;
}
}
WorkletLoadInfo
:
:
~
WorkletLoadInfo
(
)
{
MOZ_ASSERT
(
!
mPrincipal
|
|
NS_IsMainThread
(
)
)
;
}
WorkletImpl
:
:
WorkletImpl
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
)
:
mWorkletLoadInfo
(
aWindow
aPrincipal
)
mTerminated
(
false
)
{
}
WorkletImpl
:
:
~
WorkletImpl
(
)
{
MOZ_ASSERT
(
!
mGlobalScope
)
;
}
JSObject
*
WorkletImpl
:
:
WrapWorklet
(
JSContext
*
aCx
dom
:
:
Worklet
*
aWorklet
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
dom
:
:
Worklet_Binding
:
:
Wrap
(
aCx
aWorklet
aGivenProto
)
;
}
dom
:
:
WorkletGlobalScope
*
WorkletImpl
:
:
GetGlobalScope
(
)
{
dom
:
:
WorkletThread
:
:
AssertIsOnWorkletThread
(
)
;
if
(
mGlobalScope
)
{
return
mGlobalScope
;
}
dom
:
:
AutoJSAPI
jsapi
;
jsapi
.
Init
(
)
;
JSContext
*
cx
=
jsapi
.
cx
(
)
;
mGlobalScope
=
ConstructGlobalScope
(
)
;
JS
:
:
Rooted
<
JSObject
*
>
global
(
cx
)
;
NS_ENSURE_TRUE
(
mGlobalScope
-
>
WrapGlobalObject
(
cx
&
global
)
nullptr
)
;
JSAutoRealm
ar
(
cx
global
)
;
if
(
!
dom
:
:
RegisterWorkletBindings
(
cx
global
)
)
{
return
nullptr
;
}
JS_FireOnNewGlobalObject
(
cx
global
)
;
return
mGlobalScope
;
}
void
WorkletImpl
:
:
NotifyWorkletFinished
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTerminated
)
{
return
;
}
SendControlMessage
(
NS_NewRunnableFunction
(
"
WorkletImpl
:
:
NotifyWorkletFinished
"
[
self
=
RefPtr
<
WorkletImpl
>
(
this
)
]
(
)
{
self
-
>
mGlobalScope
=
nullptr
;
}
)
)
;
mTerminated
=
true
;
if
(
mWorkletThread
)
{
mWorkletThread
-
>
Terminate
(
)
;
mWorkletThread
=
nullptr
;
}
mWorkletLoadInfo
.
mPrincipal
=
nullptr
;
}
nsresult
WorkletImpl
:
:
SendControlMessage
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mTerminated
)
{
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
if
(
!
mWorkletThread
)
{
mWorkletThread
=
dom
:
:
WorkletThread
:
:
Create
(
this
)
;
if
(
!
mWorkletThread
)
{
return
NS_ERROR_UNEXPECTED
;
}
}
return
mWorkletThread
-
>
DispatchRunnable
(
std
:
:
move
(
aRunnable
)
)
;
}
}
