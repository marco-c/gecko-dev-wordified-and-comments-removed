#
ifndef
mozilla_dom_WorkletFetchHandler_h
#
define
mozilla_dom_WorkletFetchHandler_h
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
#
include
"
nsIStreamLoader
.
h
"
namespace
mozilla
:
:
dom
{
class
Worklet
;
struct
WorkletOptions
;
class
WorkletScriptHandler
;
class
WorkletFetchHandler
final
:
public
nsISupports
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
static
already_AddRefed
<
Promise
>
Fetch
(
Worklet
*
aWorklet
JSContext
*
aCx
const
nsAString
&
aModuleURL
const
WorkletOptions
&
aOptions
ErrorResult
&
aRv
)
;
const
nsCString
&
URL
(
)
const
{
return
mURL
;
}
void
ExecutionFailed
(
nsresult
aRv
)
;
void
ExecutionSucceeded
(
)
;
private
:
WorkletFetchHandler
(
Worklet
*
aWorklet
const
nsACString
&
aURL
Promise
*
aPromise
)
;
~
WorkletFetchHandler
(
)
=
default
;
void
AddPromise
(
Promise
*
aPromise
)
;
void
RejectPromises
(
nsresult
aResult
)
;
void
ResolvePromises
(
)
;
RefPtr
<
Worklet
>
mWorklet
;
nsTArray
<
RefPtr
<
Promise
>
>
mPromises
;
enum
{
ePending
eRejected
eResolved
}
mStatus
;
nsresult
mErrorStatus
;
nsCString
mURL
;
}
;
class
WorkletScriptHandler
final
:
public
PromiseNativeHandler
public
nsIStreamLoaderObserver
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
explicit
WorkletScriptHandler
(
Worklet
*
aWorklet
)
;
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
NS_IMETHOD
OnStreamComplete
(
nsIStreamLoader
*
aLoader
nsISupports
*
aContext
nsresult
aStatus
uint32_t
aStringLen
const
uint8_t
*
aString
)
override
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
ErrorResult
&
aRv
)
override
;
void
HandleFailure
(
nsresult
aResult
)
;
private
:
~
WorkletScriptHandler
(
)
=
default
;
RefPtr
<
Worklet
>
mWorklet
;
}
;
}
#
endif
