#
ifndef
mozilla_dom_worklet_WorkletImpl_h
#
define
mozilla_dom_worklet_WorkletImpl_h
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
OriginAttributes
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundSharedTypes
.
h
"
class
nsPIDOMWindowInner
;
class
nsIPrincipal
;
class
nsIRunnable
;
namespace
mozilla
{
namespace
dom
{
class
Worklet
;
class
WorkletGlobalScope
;
class
WorkletThread
;
}
class
WorkletLoadInfo
{
public
:
explicit
WorkletLoadInfo
(
nsPIDOMWindowInner
*
aWindow
)
;
uint64_t
OuterWindowID
(
)
const
{
return
mOuterWindowID
;
}
uint64_t
InnerWindowID
(
)
const
{
return
mInnerWindowID
;
}
private
:
uint64_t
mOuterWindowID
;
const
uint64_t
mInnerWindowID
;
}
;
class
WorkletImpl
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WorkletImpl
)
;
virtual
JSObject
*
WrapWorklet
(
JSContext
*
aCx
dom
:
:
Worklet
*
aWorklet
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
;
virtual
nsresult
SendControlMessage
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
nsIPrincipal
*
Principal
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mPrincipal
;
}
void
NotifyWorkletFinished
(
)
;
virtual
nsContentPolicyType
ContentPolicyType
(
)
const
=
0
;
dom
:
:
WorkletGlobalScope
*
GetGlobalScope
(
)
;
const
WorkletLoadInfo
&
LoadInfo
(
)
const
{
return
mWorkletLoadInfo
;
}
const
OriginAttributes
&
OriginAttributesRef
(
)
const
{
return
mPrincipalInfo
.
get_NullPrincipalInfo
(
)
.
attrs
(
)
;
}
const
ipc
:
:
PrincipalInfo
&
PrincipalInfo
(
)
const
{
return
mPrincipalInfo
;
}
const
Maybe
<
nsID
>
&
GetAgentClusterId
(
)
const
{
return
mAgentClusterId
;
}
bool
IsSharedMemoryAllowed
(
)
const
{
return
mSharedMemoryAllowed
;
}
protected
:
WorkletImpl
(
nsPIDOMWindowInner
*
aWindow
nsIPrincipal
*
aPrincipal
)
;
virtual
~
WorkletImpl
(
)
;
virtual
already_AddRefed
<
dom
:
:
WorkletGlobalScope
>
ConstructGlobalScope
(
)
=
0
;
ipc
:
:
PrincipalInfo
mPrincipalInfo
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
const
WorkletLoadInfo
mWorkletLoadInfo
;
RefPtr
<
dom
:
:
WorkletThread
>
mWorkletThread
;
bool
mTerminated
;
RefPtr
<
dom
:
:
WorkletGlobalScope
>
mGlobalScope
;
bool
mFinishedOnExecutionThread
;
Maybe
<
nsID
>
mAgentClusterId
;
bool
mSharedMemoryAllowed
;
}
;
}
#
endif
