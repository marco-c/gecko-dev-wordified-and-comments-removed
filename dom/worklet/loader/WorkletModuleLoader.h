#
ifndef
mozilla_dom_worklet_WorkletModuleLoader_h
#
define
mozilla_dom_worklet_WorkletModuleLoader_h
#
include
"
js
/
loader
/
LoadContextBase
.
h
"
#
include
"
js
/
loader
/
ModuleLoaderBase
.
h
"
#
include
"
js
/
loader
/
ResolveResult
.
h
"
#
include
"
mozilla
/
dom
/
WorkletFetchHandler
.
h
"
namespace
mozilla
:
:
dom
{
namespace
loader
{
class
WorkletScriptLoader
:
public
JS
:
:
loader
:
:
ScriptLoaderInterface
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
WorkletScriptLoader
)
nsIURI
*
GetBaseURI
(
)
const
override
{
return
nullptr
;
}
void
ReportErrorToConsole
(
ScriptLoadRequest
*
aRequest
nsresult
aResult
)
const
override
{
}
void
ReportWarningToConsole
(
ScriptLoadRequest
*
aRequest
const
char
*
aMessageName
const
nsTArray
<
nsString
>
&
aParams
)
const
override
{
}
nsresult
FillCompileOptionsForRequest
(
JSContext
*
cx
ScriptLoadRequest
*
aRequest
JS
:
:
CompileOptions
*
aOptions
JS
:
:
MutableHandle
<
JSScript
*
>
aIntroductionScript
)
override
{
aOptions
-
>
setIntroductionType
(
"
Worklet
"
)
;
aOptions
-
>
setFileAndLine
(
aRequest
-
>
mURL
.
get
(
)
1
)
;
aOptions
-
>
setIsRunOnce
(
true
)
;
aOptions
-
>
setNoScriptRval
(
true
)
;
return
NS_OK
;
}
private
:
~
WorkletScriptLoader
(
)
=
default
;
}
;
class
WorkletModuleLoader
:
public
JS
:
:
loader
:
:
ModuleLoaderBase
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
WorkletModuleLoader
JS
:
:
loader
:
:
ModuleLoaderBase
)
WorkletModuleLoader
(
WorkletScriptLoader
*
aScriptLoader
nsIGlobalObject
*
aGlobalObject
)
;
void
InsertRequest
(
nsIURI
*
aURI
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
)
;
void
RemoveRequest
(
nsIURI
*
aURI
)
;
JS
:
:
loader
:
:
ModuleLoadRequest
*
GetRequest
(
nsIURI
*
aURI
)
const
;
bool
HasSetLocalizedStrings
(
)
const
{
return
(
bool
)
mLocalizedStrs
;
}
void
SetLocalizedStrings
(
const
nsTArray
<
nsString
>
*
aStrings
)
{
mLocalizedStrs
=
aStrings
;
}
private
:
~
WorkletModuleLoader
(
)
=
default
;
already_AddRefed
<
JS
:
:
loader
:
:
ModuleLoadRequest
>
CreateStaticImport
(
nsIURI
*
aURI
JS
:
:
ModuleType
aModuleType
JS
:
:
loader
:
:
ModuleLoadRequest
*
aParent
const
mozilla
:
:
dom
:
:
SRIMetadata
&
aSriMetadata
)
override
;
already_AddRefed
<
JS
:
:
loader
:
:
ModuleLoadRequest
>
CreateDynamicImport
(
JSContext
*
aCx
nsIURI
*
aURI
JS
:
:
ModuleType
aModuleType
LoadedScript
*
aMaybeActiveScript
JS
:
:
Handle
<
JSString
*
>
aSpecifier
JS
:
:
Handle
<
JSObject
*
>
aPromise
)
override
;
bool
CanStartLoad
(
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
nsresult
*
aRvOut
)
override
;
nsresult
StartFetch
(
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
)
override
;
nsresult
CompileFetchedModule
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
JS
:
:
CompileOptions
&
aOptions
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
override
;
nsresult
CompileJavaScriptModule
(
JSContext
*
aCx
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
;
nsresult
CompileJsonModule
(
JSContext
*
aCx
JS
:
:
CompileOptions
&
aOptions
ModuleLoadRequest
*
aRequest
JS
:
:
MutableHandle
<
JSObject
*
>
aModuleScript
)
;
void
OnModuleLoadComplete
(
JS
:
:
loader
:
:
ModuleLoadRequest
*
aRequest
)
override
;
nsresult
GetResolveFailureMessage
(
JS
:
:
loader
:
:
ResolveError
aError
const
nsAString
&
aSpecifier
nsAString
&
aResult
)
override
;
nsRefPtrHashtable
<
nsURIHashKey
JS
:
:
loader
:
:
ModuleLoadRequest
>
mFetchingRequests
;
const
nsTArray
<
nsString
>
*
mLocalizedStrs
=
nullptr
;
}
;
}
class
WorkletLoadContext
:
public
JS
:
:
loader
:
:
LoadContextBase
{
public
:
explicit
WorkletLoadContext
(
const
nsMainThreadPtrHandle
<
WorkletFetchHandler
>
&
aHandlerRef
)
:
JS
:
:
loader
:
:
LoadContextBase
(
JS
:
:
loader
:
:
ContextKind
:
:
Worklet
)
mHandlerRef
(
aHandlerRef
)
{
}
const
nsMainThreadPtrHandle
<
WorkletFetchHandler
>
&
GetHandlerRef
(
)
const
{
return
mHandlerRef
;
}
private
:
~
WorkletLoadContext
(
)
=
default
;
nsMainThreadPtrHandle
<
WorkletFetchHandler
>
mHandlerRef
;
}
;
}
#
endif
