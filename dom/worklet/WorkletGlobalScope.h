#
ifndef
mozilla_dom_WorkletGlobalScope_h
#
define
mozilla_dom_WorkletGlobalScope_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
define
WORKLET_IID
\
{
0x1b3f62e7
0xe357
0x44be
\
{
0xbf
0xe0
0xdf
0x85
0xe6
0x56
0x85
0xac
}
}
namespace
mozilla
{
class
WorkletImpl
;
namespace
dom
{
class
Console
;
class
WorkletGlobalScope
:
public
nsIGlobalObject
public
nsWrapperCache
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
WORKLET_IID
)
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
WorkletGlobalScope
)
explicit
WorkletGlobalScope
(
WorkletImpl
*
aImpl
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
nullptr
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
bool
WrapGlobalObject
(
JSContext
*
aCx
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
=
0
;
virtual
JSObject
*
GetGlobalJSObject
(
)
override
{
return
GetWrapper
(
)
;
}
already_AddRefed
<
Console
>
GetConsole
(
JSContext
*
aCx
ErrorResult
&
aRv
)
;
WorkletImpl
*
Impl
(
)
const
{
return
mImpl
;
}
void
Dump
(
const
Optional
<
nsAString
>
&
aString
)
const
;
protected
:
~
WorkletGlobalScope
(
)
;
;
private
:
const
RefPtr
<
WorkletImpl
>
mImpl
;
RefPtr
<
Console
>
mConsole
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
WorkletGlobalScope
WORKLET_IID
)
}
}
#
endif
