class
EmptyWorkletProcessor
extends
AudioWorkletProcessor
{
}
class
NoProcessWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
}
class
BadDescriptorsWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
"
A
string
"
;
}
}
class
GoodDescriptorsWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
'
myParam
'
defaultValue
:
0
.
707
}
]
;
}
}
class
DummyProcessWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
}
class
DescriptorsNoNameWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
defaultValue
:
0
.
707
}
]
;
}
}
class
DescriptorsDefaultValueNotNumberWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
"
test
"
defaultValue
:
"
test
"
}
]
;
}
}
class
DescriptorsMinValueNotNumberWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
"
test
"
minValue
:
"
test
"
}
]
;
}
}
class
DescriptorsMaxValueNotNumberWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
"
test
"
maxValue
:
"
test
"
}
]
;
}
}
class
DescriptorsDuplicatedNameWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
"
test
"
}
{
name
:
"
test
"
}
]
;
}
}
class
DescriptorsNotDictWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
42
]
;
}
}
class
DescriptorsOutOfRangeMinWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
'
test
'
defaultValue
:
0
minValue
:
1
maxValue
:
2
}
]
;
}
}
class
DescriptorsOutOfRangeMaxWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
'
test
'
defaultValue
:
3
minValue
:
1
maxValue
:
2
}
]
;
}
}
class
DescriptorsBadRangeMaxWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
'
test
'
defaultValue
:
1
.
5
minValue
:
2
maxValue
:
1
}
]
;
}
}
try
{
registerProcessor
(
"
sure
!
"
(
)
=
>
{
}
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
"
EmptyWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
my
-
worklet
-
processor
"
"
"
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
empty
-
worklet
-
processor
"
EmptyWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
no
-
worklet
-
processor
"
NoProcessWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
bad
-
descriptors
-
worklet
-
processor
"
BadDescriptorsWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
registerProcessor
(
"
good
-
descriptors
-
worklet
-
processor
"
GoodDescriptorsWorkletProcessor
)
;
registerProcessor
(
"
dummy
-
worklet
-
processor
"
DummyProcessWorkletProcessor
)
;
try
{
registerProcessor
(
"
dummy
-
worklet
-
processor
"
DummyProcessWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
no
-
name
-
worklet
-
processor
"
DescriptorsNoNameWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
default
-
value
-
not
-
number
-
worklet
-
processor
"
DescriptorsDefaultValueNotNumberWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
min
-
value
-
not
-
number
-
worklet
-
processor
"
DescriptorsMinValueNotNumberWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
max
-
value
-
not
-
number
-
worklet
-
processor
"
DescriptorsMaxValueNotNumberWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
duplicated
-
name
-
worklet
-
processor
"
DescriptorsDuplicatedNameWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
not
-
dict
-
worklet
-
processor
"
DescriptorsNotDictWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
out
-
of
-
range
-
min
-
worklet
-
processor
"
DescriptorsOutOfRangeMinWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
out
-
of
-
range
-
max
-
worklet
-
processor
"
DescriptorsOutOfRangeMaxWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
descriptors
-
bad
-
range
-
max
-
worklet
-
processor
"
DescriptorsBadRangeMaxWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
