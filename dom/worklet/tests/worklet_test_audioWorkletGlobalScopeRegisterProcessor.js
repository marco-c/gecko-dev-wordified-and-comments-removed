class
EmptyWorkletProcessor
extends
AudioWorkletProcessor
{
}
class
NoProcessWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
}
class
BadDescriptorsWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
"
A
string
"
;
}
}
class
GoodDescriptorsWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
static
get
parameterDescriptors
(
)
{
return
[
{
name
:
'
myParam
'
defaultValue
:
0
.
707
}
]
;
}
}
class
DummyProcessWorkletProcessor
extends
AudioWorkletProcessor
{
constructor
(
)
{
super
(
)
;
}
process
(
)
{
}
}
try
{
registerProcessor
(
"
sure
!
"
(
)
=
>
{
}
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
"
EmptyWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
my
-
worklet
-
processor
"
"
"
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
empty
-
worklet
-
processor
"
EmptyWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
no
-
worklet
-
processor
"
NoProcessWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
try
{
registerProcessor
(
"
bad
-
descriptors
-
worklet
-
processor
"
BadDescriptorsWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
registerProcessor
(
"
good
-
descriptors
-
worklet
-
processor
"
GoodDescriptorsWorkletProcessor
)
;
registerProcessor
(
"
dummy
-
worklet
-
processor
"
DummyProcessWorkletProcessor
)
;
try
{
registerProcessor
(
"
dummy
-
worklet
-
processor
"
DummyProcessWorkletProcessor
)
;
}
catch
(
e
)
{
console
.
log
(
e
)
}
