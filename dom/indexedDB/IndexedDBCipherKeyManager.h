#
ifndef
mozilla_dom_indexeddbcipherKeyManager_h
#
define
mozilla_dom_indexeddbcipherKeyManager_h
#
include
"
mozilla
/
dom
/
quota
/
IPCStreamCipherStrategy
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
:
:
dom
:
:
indexedDB
{
namespace
{
using
IndexedDBCipherStrategy
=
quota
:
:
IPCStreamCipherStrategy
;
using
CipherKey
=
IndexedDBCipherStrategy
:
:
KeyType
;
class
IndexedDBCipherKeyManager
{
public
:
using
PrivateBrowsingInfoHashtable
=
nsTHashMap
<
nsCStringHashKey
nsTHashMap
<
nsCStringHashKey
CipherKey
>
>
;
IndexedDBCipherKeyManager
(
)
:
mMutex
(
"
IndexedDBCipherKeyManager
"
)
{
}
;
Maybe
<
CipherKey
>
Get
(
const
nsACString
&
aStorageId
const
nsAString
&
aDatabaseName
const
nsACString
&
keyStoreId
=
"
default
"
_ns
)
;
CipherKey
Ensure
(
const
nsACString
&
aStorageId
const
nsAString
&
aDatabaseName
const
nsACString
&
keyStoreId
=
"
default
"
_ns
)
;
bool
RemoveKey
(
const
nsACString
&
aStorageId
const
nsAString
&
aDatabaseName
)
;
bool
RemoveAllKeysWithStorageId
(
const
nsACString
&
aStorageId
)
;
uint32_t
Count
(
)
;
private
:
mozilla
:
:
Mutex
mMutex
;
PrivateBrowsingInfoHashtable
mPrivateBrowsingInfoHashTable
;
nsTHashMap
<
nsCStringHashKey
nsTHashSet
<
nsCString
>
>
mStorageIdAndKeyIdHashMap
;
nsCString
GenerateKeyId
(
const
nsACString
&
aStorageId
const
nsAString
&
aDatabaseName
)
;
}
;
}
}
#
endif
