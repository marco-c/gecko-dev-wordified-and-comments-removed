#
ifndef
mozilla_dom_indexeddb_initializedonce_h__
#
define
mozilla_dom_indexeddb_initializedonce_h__
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
<
type_traits
>
namespace
mozilla
{
enum
struct
LazyInit
{
Allow
Forbid
}
;
template
<
typename
T
LazyInit
LazyInit
=
LazyInit
:
:
Forbid
>
class
InitializedOnce
final
{
public
:
template
<
typename
Dummy
=
void
>
explicit
InitializedOnce
(
std
:
:
enable_if_t
<
LazyInit
=
=
LazyInit
:
:
Allow
Dummy
>
*
=
nullptr
)
{
}
template
<
typename
.
.
.
Args
>
explicit
InitializedOnce
(
Args
&
&
.
.
.
aArgs
)
:
mMaybe
{
Some
(
T
{
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
}
)
}
{
}
InitializedOnce
&
operator
=
(
const
InitializedOnce
&
)
=
delete
;
InitializedOnce
&
operator
=
(
InitializedOnce
&
&
)
=
delete
;
template
<
typename
.
.
.
Args
typename
Dummy
=
void
>
std
:
:
enable_if_t
<
LazyInit
=
=
LazyInit
:
:
Allow
Dummy
>
init
(
Args
&
&
.
.
.
aArgs
)
{
MOZ_ASSERT
(
mMaybe
.
isNothing
(
)
)
;
MOZ_ASSERT
(
!
mWasReset
)
;
mMaybe
.
emplace
(
T
{
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
}
)
;
}
explicit
operator
bool
(
)
const
{
return
isSome
(
)
;
}
bool
isSome
(
)
const
{
return
mMaybe
.
isSome
(
)
;
}
bool
isNothing
(
)
const
{
return
mMaybe
.
isNothing
(
)
;
}
T
&
operator
*
(
)
{
return
*
mMaybe
;
}
T
*
operator
-
>
(
)
{
return
mMaybe
.
operator
-
>
(
)
;
}
std
:
:
add_const_t
<
T
>
&
operator
*
(
)
const
{
return
*
mMaybe
;
}
std
:
:
add_const_t
<
T
>
*
operator
-
>
(
)
const
{
return
mMaybe
.
operator
-
>
(
)
;
}
void
reset
(
)
{
MOZ_ASSERT
(
mMaybe
.
isSome
(
)
)
;
mMaybe
.
reset
(
)
;
#
ifdef
DEBUG
mWasReset
=
true
;
#
endif
}
private
:
Maybe
<
T
>
mMaybe
;
#
ifdef
DEBUG
bool
mWasReset
=
false
;
#
endif
}
;
}
#
endif
