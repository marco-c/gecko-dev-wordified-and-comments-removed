var
gActiveListeners
=
{
}
;
function
registerPopupEventHandler
(
eventName
callback
win
)
{
if
(
!
win
)
{
win
=
window
;
}
gActiveListeners
[
eventName
]
=
function
(
event
)
{
if
(
event
.
target
!
=
win
.
PopupNotifications
.
panel
)
{
return
;
}
win
.
PopupNotifications
.
panel
.
removeEventListener
(
eventName
gActiveListeners
[
eventName
]
)
;
delete
gActiveListeners
[
eventName
]
;
callback
.
call
(
win
.
PopupNotifications
.
panel
)
;
}
;
win
.
PopupNotifications
.
panel
.
addEventListener
(
eventName
gActiveListeners
[
eventName
]
)
;
}
function
unregisterPopupEventHandler
(
eventName
win
)
{
if
(
!
win
)
{
win
=
window
;
}
win
.
PopupNotifications
.
panel
.
removeEventListener
(
eventName
gActiveListeners
[
eventName
]
)
;
delete
gActiveListeners
[
eventName
]
;
}
function
unregisterAllPopupEventHandlers
(
win
)
{
if
(
!
win
)
{
win
=
window
;
}
for
(
let
eventName
in
gActiveListeners
)
{
win
.
PopupNotifications
.
panel
.
removeEventListener
(
eventName
gActiveListeners
[
eventName
]
)
;
}
gActiveListeners
=
{
}
;
}
function
triggerMainCommand
(
popup
)
{
info
(
"
triggering
main
command
"
)
;
let
notifications
=
popup
.
childNodes
;
ok
(
notifications
.
length
"
at
least
one
notification
displayed
"
)
;
let
notification
=
notifications
[
0
]
;
info
(
"
triggering
command
:
"
+
notification
.
getAttribute
(
"
buttonlabel
"
)
)
;
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
button
{
}
)
;
}
function
triggerSecondaryCommand
(
popup
win
)
{
if
(
!
win
)
{
win
=
window
;
}
info
(
"
triggering
secondary
command
"
)
;
let
notifications
=
popup
.
childNodes
;
ok
(
notifications
.
length
"
at
least
one
notification
displayed
"
)
;
let
notification
=
notifications
[
0
]
;
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
secondaryButton
{
}
win
)
;
}
function
dismissNotification
(
popup
)
{
info
(
"
dismissing
notification
"
)
;
executeSoon
(
function
(
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
)
;
}
function
waitForMessage
(
aMessage
browser
)
{
let
checkFn
=
function
(
)
{
}
;
checkFn
.
toSource
=
function
(
)
{
return
function
checkFn
(
event
)
{
let
message
=
{
aMessage
.
toSource
(
)
}
;
if
(
event
.
data
=
=
message
)
{
return
true
;
}
throw
new
Error
(
\
Unexpected
result
:
\
\
{
event
.
data
\
}
expected
\
\
{
message
\
}
\
)
;
}
;
}
;
return
BrowserTestUtils
.
waitForContentEvent
(
browser
.
selectedBrowser
"
message
"
true
checkFn
true
)
.
then
(
(
)
=
>
{
ok
(
true
"
Received
message
:
"
+
aMessage
)
;
}
)
;
}
function
dispatchEvent
(
eventName
)
{
info
(
"
dispatching
event
:
"
+
eventName
)
;
let
event
=
document
.
createEvent
(
"
Events
"
)
;
event
.
initEvent
(
eventName
false
false
)
;
gBrowser
.
selectedBrowser
.
contentWindow
.
dispatchEvent
(
event
)
;
}
function
setPermission
(
url
permission
originAttributes
=
{
}
)
{
let
uri
=
Services
.
io
.
newURI
(
url
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
originAttributes
)
;
Services
.
perms
.
addFromPrincipal
(
principal
permission
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
}
function
removePermission
(
url
permission
originAttributes
=
{
}
)
{
let
uri
=
Services
.
io
.
newURI
(
url
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
originAttributes
)
;
Services
.
perms
.
removeFromPrincipal
(
principal
permission
)
;
}
function
getPermission
(
url
permission
originAttributes
=
{
}
)
{
let
uri
=
Services
.
io
.
newURI
(
url
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
originAttributes
)
;
return
Services
.
perms
.
testPermissionFromPrincipal
(
principal
permission
)
;
}
