#
include
"
FileInfo
.
h
"
#
include
"
FileInfoImpl
.
h
"
#
include
"
FileInfoManager
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ArrayAlgorithm
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
array
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
:
:
indexedDB
;
class
SimpleFileManager
;
using
SimpleFileInfo
=
FileInfo
<
SimpleFileManager
>
;
struct
SimpleFileManagerStats
final
{
size_t
mAsyncDeleteFileCalls
=
0
;
size_t
mSyncDeleteFileCalls
=
0
;
}
;
class
SimpleFileManager
final
:
public
FileInfoManager
<
SimpleFileManager
>
public
AtomicSafeRefCounted
<
SimpleFileManager
>
{
public
:
using
FileInfoManager
<
SimpleFileManager
>
:
:
MutexType
;
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
SimpleFileManager
)
[
[
nodiscard
]
]
nsresult
AsyncDeleteFile
(
const
int64_t
aFileId
)
{
MOZ_RELEASE_ASSERT
(
!
ContainsFileInfo
(
aFileId
)
)
;
if
(
mStats
)
{
+
+
mStats
-
>
mAsyncDeleteFileCalls
;
}
return
NS_OK
;
}
[
[
nodiscard
]
]
nsresult
SyncDeleteFile
(
const
int64_t
aFileId
)
{
MOZ_RELEASE_ASSERT
(
!
ContainsFileInfo
(
aFileId
)
)
;
if
(
mStats
)
{
+
+
mStats
-
>
mSyncDeleteFileCalls
;
}
return
NS_OK
;
}
explicit
SimpleFileManager
(
SimpleFileManagerStats
*
aStats
=
nullptr
)
:
mStats
{
aStats
}
{
}
void
CreateDBOnlyFileInfos
(
)
{
for
(
const
auto
id
:
kDBOnlyFileInfoIds
)
{
MOZ_RELEASE_ASSERT
(
CreateFileInfo
(
Some
(
id
)
static_cast
<
nsrefcnt
>
(
1
)
)
)
;
}
}
static
MutexType
&
MutexInstance
(
)
MOZ_RETURN_CAPABILITY
(
sMutex
)
{
return
sMutex
;
}
static
constexpr
auto
kDBOnlyFileInfoIds
=
std
:
:
array
<
int64_t
3
>
{
{
10
20
30
}
}
;
private
:
inline
static
MutexType
sMutex
;
SimpleFileManagerStats
*
const
mStats
;
}
;
TEST
(
DOM_IndexedDB_SimpleFileManager
Invalidate
)
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
)
;
fileManager
-
>
Invalidate
(
)
;
ASSERT_TRUE
(
fileManager
-
>
Invalidated
(
)
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
Create
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
auto
fileInfo
=
fileManager
-
>
CreateFileInfo
(
)
;
int32_t
memRefCnt
dbRefCnt
;
fileInfo
-
>
GetReferences
(
&
memRefCnt
&
dbRefCnt
)
;
ASSERT_EQ
(
fileManager
&
fileInfo
-
>
Manager
(
)
)
;
ASSERT_EQ
(
1
memRefCnt
)
;
ASSERT_EQ
(
0
dbRefCnt
)
;
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
1u
stats
.
mAsyncDeleteFileCalls
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
CreateWithInitialDBRefCnt
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
fileManager
-
>
CreateDBOnlyFileInfos
(
)
;
for
(
const
auto
id
:
SimpleFileManager
:
:
kDBOnlyFileInfoIds
)
{
const
auto
fileInfo
=
fileManager
-
>
GetFileInfo
(
id
)
;
ASSERT_NE
(
nullptr
fileInfo
)
;
int32_t
memRefCnt
dbRefCnt
;
fileInfo
-
>
GetReferences
(
&
memRefCnt
&
dbRefCnt
)
;
ASSERT_EQ
(
fileManager
&
fileInfo
-
>
Manager
(
)
)
;
ASSERT_EQ
(
1
memRefCnt
)
;
ASSERT_EQ
(
1
dbRefCnt
)
;
}
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
CreateWithInitialDBRefCnt_Invalidate
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
fileManager
-
>
CreateDBOnlyFileInfos
(
)
;
const
auto
fileInfos
=
TransformIntoNewArray
(
SimpleFileManager
:
:
kDBOnlyFileInfoIds
[
&
fileManager
]
(
const
auto
id
)
{
return
fileManager
-
>
GetFileInfo
(
id
)
;
}
)
;
fileManager
-
>
Invalidate
(
)
;
for
(
const
auto
&
fileInfo
:
fileInfos
)
{
int32_t
memRefCnt
dbRefCnt
;
fileInfo
-
>
GetReferences
(
&
memRefCnt
&
dbRefCnt
)
;
ASSERT_EQ
(
1
memRefCnt
)
;
ASSERT_EQ
(
0
dbRefCnt
)
;
}
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
CreateWithInitialDBRefCnt_UpdateDBRefsToZero
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
fileManager
-
>
CreateDBOnlyFileInfos
(
)
;
const
auto
fileInfo
=
fileManager
-
>
GetFileInfo
(
SimpleFileManager
:
:
kDBOnlyFileInfoIds
[
0
]
)
;
fileInfo
-
>
UpdateDBRefs
(
-
1
)
;
int32_t
memRefCnt
dbRefCnt
;
fileInfo
-
>
GetReferences
(
&
memRefCnt
&
dbRefCnt
)
;
ASSERT_EQ
(
1
memRefCnt
)
;
ASSERT_EQ
(
0
dbRefCnt
)
;
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
1u
stats
.
mAsyncDeleteFileCalls
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
ReleaseWithFileManagerCleanup
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
fileManager
-
>
CreateDBOnlyFileInfos
(
)
;
auto
*
fileInfo
=
fileManager
-
>
CreateFileInfo
(
)
.
forget
(
)
.
take
(
)
;
fileInfo
-
>
Release
(
true
)
;
ASSERT_EQ
(
1u
stats
.
mSyncDeleteFileCalls
)
;
}
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
#
ifndef
DEBUG
TEST
(
DOM_IndexedDB_SimpleFileInfo
Invalidate_CreateFileInfo
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
fileManager
-
>
Invalidate
(
)
;
const
auto
fileInfo
=
fileManager
-
>
CreateFileInfo
(
)
;
Unused
<
<
fileInfo
;
ASSERT_EQ
(
nullptr
fileInfo
)
;
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
#
endif
TEST
(
DOM_IndexedDB_SimpleFileInfo
Invalidate_Release
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
const
auto
fileInfo
=
fileManager
-
>
CreateFileInfo
(
)
;
Unused
<
<
fileInfo
;
fileManager
-
>
Invalidate
(
)
;
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
TEST
(
DOM_IndexedDB_SimpleFileInfo
Invalidate_ReleaseWithFileManagerCleanup
)
{
auto
stats
=
SimpleFileManagerStats
{
}
;
{
const
auto
fileManager
=
MakeSafeRefPtr
<
SimpleFileManager
>
(
&
stats
)
;
auto
*
fileInfo
=
fileManager
-
>
CreateFileInfo
(
)
.
forget
(
)
.
take
(
)
;
fileManager
-
>
Invalidate
(
)
;
fileInfo
-
>
Release
(
true
)
;
}
ASSERT_EQ
(
0u
stats
.
mSyncDeleteFileCalls
)
;
ASSERT_EQ
(
0u
stats
.
mAsyncDeleteFileCalls
)
;
}
