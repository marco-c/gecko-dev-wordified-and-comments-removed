async
function
testSteps
(
)
{
const
cosmologicalConstant
=
31768
;
const
connectionIdleMaintenanceMS
=
2
*
1000
;
const
name
=
"
test_connection_idle_maintenance
"
;
const
abc
=
"
abcdefghijklmnopqrstuvwxyz
"
;
info
(
"
Creating
database
"
)
;
let
request
=
indexedDB
.
open
(
name
1
)
;
let
event
=
await
expectingUpgrade
(
request
)
;
let
database
=
event
.
target
.
result
;
let
objectStore
=
database
.
createObjectStore
(
name
)
;
for
(
let
i
=
0
;
i
<
10000
;
i
+
+
)
{
objectStore
.
add
(
abc
i
)
;
}
objectStore
.
clear
(
)
;
await
expectingSuccess
(
request
)
;
info
(
"
Getting
database
usage
before
maintenance
"
)
;
let
databaseUsageBeforeMaintenance
=
await
new
Promise
(
function
(
resolve
)
{
getCurrentUsage
(
function
(
request
)
{
resolve
(
request
.
result
.
databaseUsage
)
;
}
)
;
}
)
;
info
(
"
Waiting
for
maintenance
to
start
"
)
;
await
new
Promise
(
function
(
resolve
)
{
do_timeout
(
2
*
connectionIdleMaintenanceMS
resolve
)
;
}
)
;
info
(
"
Waiting
for
maintenance
to
finish
"
)
;
await
new
Promise
(
function
(
resolve
)
{
do_timeout
(
2
*
connectionIdleMaintenanceMS
resolve
)
;
}
)
;
info
(
"
Getting
database
usage
after
maintenance
"
)
;
let
databaseUsageAfterMaintenance
=
await
new
Promise
(
function
(
resolve
)
{
getCurrentUsage
(
function
(
request
)
{
resolve
(
request
.
result
.
databaseUsage
)
;
}
)
;
}
)
;
info
(
"
Database
usage
before
:
"
+
databaseUsageBeforeMaintenance
+
"
.
"
+
"
Database
usage
after
:
"
+
databaseUsageAfterMaintenance
)
;
ok
(
databaseUsageBeforeMaintenance
-
databaseUsageAfterMaintenance
>
=
cosmologicalConstant
"
Maintenance
significantly
decreased
database
usage
"
)
;
}
