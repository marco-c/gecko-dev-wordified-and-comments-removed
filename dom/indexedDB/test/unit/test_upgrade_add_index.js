var
testGenerator
=
testSteps
(
)
;
function
generateKey
(
)
{
let
algorithm
=
{
name
:
"
RSASSA
-
PKCS1
-
v1_5
"
hash
:
"
SHA
-
256
"
modulusLength
:
1024
publicExponent
:
new
Uint8Array
(
[
0x01
0x00
0x01
]
)
}
;
return
crypto
.
subtle
.
generateKey
(
algorithm
true
[
"
sign
"
"
verify
"
]
)
;
}
const
hasCrypto
=
"
crypto
"
in
this
;
function
*
testSteps
(
)
{
const
allData
=
[
]
;
if
(
hasCrypto
)
{
info
(
"
creating
crypto
key
"
)
;
generateKey
(
)
.
then
(
grabEventAndContinueHandler
)
;
let
key
=
yield
undefined
;
allData
.
push
(
{
id
:
1
what
:
"
crypto
"
data
:
key
}
)
;
}
else
{
info
(
"
not
storing
crypto
key
"
)
;
}
if
(
isWasmSupported
(
)
)
{
info
(
"
creating
wasm
"
)
;
getWasmBinary
(
"
(
module
(
func
(
nop
)
)
)
"
)
;
let
binary
=
yield
undefined
;
allData
.
push
(
{
id
:
2
what
:
"
wasm
"
data
:
getWasmModule
(
binary
)
}
)
;
}
else
{
info
(
"
not
storing
wasm
"
)
;
}
info
(
"
opening
initial
database
"
)
;
let
request
=
indexedDB
.
open
(
this
.
window
?
window
.
location
.
pathname
:
"
Splendid
Test
"
1
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
grabEventAndContinueHandler
;
let
event
=
yield
undefined
;
let
db
=
event
.
target
.
result
;
db
.
onerror
=
errorHandler
;
event
.
target
.
onsuccess
=
continueToNextStep
;
let
objectStore
=
db
.
createObjectStore
(
"
foo
"
{
keyPath
:
"
id
"
}
)
;
for
(
let
datum
of
allData
)
{
info
(
add
(
)
ing
{
datum
.
what
}
)
;
objectStore
.
add
(
datum
)
;
}
yield
undefined
;
info
(
"
closing
initial
database
"
)
;
db
.
close
(
)
;
info
(
"
opening
database
for
upgrade
to
v2
"
)
;
request
=
indexedDB
.
open
(
this
.
window
?
window
.
location
.
pathname
:
"
Splendid
Test
"
2
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
grabEventAndContinueHandler
;
event
=
yield
undefined
;
let
db2
=
event
.
target
.
result
;
db2
.
onerror
=
errorHandler
;
event
.
target
.
onsuccess
=
continueToNextStep
;
info
(
"
in
upgrade
creating
index
"
)
;
event
.
target
.
transaction
.
objectStore
(
"
foo
"
)
.
createIndex
(
"
foo
"
"
what
"
)
;
yield
undefined
;
info
(
"
upgrade
completed
"
)
;
finishTest
(
)
;
}
