var
testGenerator
=
testSteps
(
)
;
function
*
testSteps
(
)
{
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
)
;
}
)
;
const
name
=
"
Splendid
Test
"
;
const
version
=
1
;
const
origin
=
"
https
:
/
/
example
.
com
"
;
let
uri
=
Services
.
io
.
newURI
(
origin
)
;
Services
.
perms
.
add
(
uri
"
indexedDB
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
const
objectStoreName
=
"
Foo
"
;
const
data
=
{
key
:
1
value
:
"
bar
"
}
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
false
)
;
let
principal
=
getPrincipal
(
origin
)
;
let
request
=
indexedDB
.
openForPrincipal
(
principal
name
{
version
storage
:
"
persistent
"
}
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
grabEventAndContinueHandler
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
let
event
=
yield
undefined
;
is
(
event
.
type
"
upgradeneeded
"
"
Got
correct
event
type
"
)
;
let
db
=
event
.
target
.
result
;
db
.
onerror
=
errorHandler
;
let
objectStore
=
db
.
createObjectStore
(
objectStoreName
{
}
)
;
event
=
yield
undefined
;
is
(
event
.
type
"
success
"
"
Got
correct
event
type
"
)
;
is
(
db
.
name
name
"
Correct
name
"
)
;
is
(
db
.
version
version
"
Correct
version
"
)
;
is
(
db
.
storage
"
default
"
"
Correct
persistence
type
"
)
;
objectStore
=
db
.
transaction
(
[
objectStoreName
]
"
readwrite
"
)
.
objectStore
(
objectStoreName
)
;
request
=
objectStore
.
get
(
data
.
key
)
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
event
=
yield
undefined
;
is
(
event
.
target
.
result
undefined
"
Got
no
data
"
)
;
request
=
objectStore
.
add
(
data
.
value
data
.
key
)
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
event
=
yield
undefined
;
is
(
event
.
target
.
result
data
.
key
"
Got
correct
key
"
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
true
)
;
request
=
indexedDB
.
openForPrincipal
(
principal
name
{
version
storage
:
"
persistent
"
}
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
grabEventAndContinueHandler
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
event
=
yield
undefined
;
is
(
event
.
type
"
upgradeneeded
"
"
Got
correct
event
type
"
)
;
db
=
event
.
target
.
result
;
db
.
onerror
=
errorHandler
;
event
=
yield
undefined
;
is
(
event
.
type
"
success
"
"
Got
correct
event
type
"
)
;
is
(
db
.
name
name
"
Correct
name
"
)
;
is
(
db
.
version
version
"
Correct
version
"
)
;
is
(
db
.
storage
"
persistent
"
"
Correct
persistence
type
"
)
;
is
(
db
.
objectStoreNames
.
length
0
"
Got
no
data
"
)
;
finishTest
(
)
;
yield
undefined
;
}
