var
testGenerator
=
testSteps
(
)
;
function
*
testSteps
(
)
{
Services
.
prefs
.
setBoolPref
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
true
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
)
;
}
)
;
const
openParams
=
[
{
url
:
"
http
:
/
/
localhost
"
dbName
:
"
dbA
"
dbVersion
:
1
}
{
url
:
"
http
:
/
/
www
.
mozilla
.
org
"
dbName
:
"
dbB
"
dbVersion
:
1
}
{
url
:
"
http
:
/
/
www
.
mozilla
.
org
:
8080
"
dbName
:
"
dbC
"
dbVersion
:
1
}
{
url
:
"
https
:
/
/
www
.
mozilla
.
org
"
dbName
:
"
dbD
"
dbVersion
:
1
}
{
url
:
"
https
:
/
/
www
.
mozilla
.
org
:
8080
"
dbName
:
"
dbE
"
dbVersion
:
1
}
{
url
:
"
indexeddb
:
/
/
fx
-
devtools
"
dbName
:
"
dbF
"
dbOptions
:
{
version
:
1
storage
:
"
persistent
"
}
}
{
url
:
"
moz
-
safe
-
about
:
home
"
dbName
:
"
dbG
"
dbOptions
:
{
version
:
1
storage
:
"
persistent
"
}
}
{
url
:
"
file
:
/
/
/
Users
/
joe
/
"
dbName
:
"
dbH
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
Users
/
joe
/
index
.
html
"
dbName
:
"
dbI
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
c
:
/
Users
/
joe
/
"
dbName
:
"
dbJ
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
c
:
/
Users
/
joe
/
index
.
html
"
dbName
:
"
dbK
"
dbVersion
:
1
}
{
dbName
:
"
dbL
"
dbVersion
:
1
}
{
url
:
"
http
:
/
/
127
.
0
.
0
.
1
"
dbName
:
"
dbO
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
"
dbName
:
"
dbP
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
c
:
/
"
dbName
:
"
dbQ
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
Users
/
joe
/
c
+
+
/
index
.
html
"
dbName
:
"
dbR
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
Users
/
joe
/
c
/
/
/
index
.
html
"
dbName
:
"
dbR
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
+
/
index
.
html
"
dbName
:
"
dbS
"
dbVersion
:
1
}
{
url
:
"
file
:
/
/
/
/
/
index
.
html
"
dbName
:
"
dbS
"
dbVersion
:
1
}
{
url
:
"
resource
:
/
/
fx
-
share
-
addon
-
at
-
mozilla
-
dot
-
org
-
fx
-
share
-
addon
-
data
"
dbName
:
"
dbU
"
dbOptions
:
{
version
:
1
storage
:
"
persistent
"
}
}
{
url
:
"
http
:
/
/
localhost
:
81
"
dbName
:
"
dbV
"
dbOptions
:
{
version
:
1
storage
:
"
temporary
"
}
}
{
url
:
"
http
:
/
/
localhost
:
82
"
dbName
:
"
dbW
"
dbOptions
:
{
version
:
1
storage
:
"
temporary
"
}
}
{
url
:
"
http
:
/
/
localhost
"
dbName
:
"
dbZ
"
dbOptions
:
{
version
:
1
storage
:
"
temporary
"
}
}
]
;
function
openDatabase
(
params
)
{
let
request
;
if
(
"
url
"
in
params
)
{
let
principal
=
getPrincipal
(
params
.
url
)
;
if
(
"
dbVersion
"
in
params
)
{
request
=
indexedDB
.
openForPrincipal
(
principal
params
.
dbName
params
.
dbVersion
)
;
}
else
{
request
=
indexedDB
.
openForPrincipal
(
principal
params
.
dbName
params
.
dbOptions
)
;
}
}
else
if
(
"
dbVersion
"
in
params
)
{
request
=
indexedDB
.
open
(
params
.
dbName
params
.
dbVersion
)
;
}
else
{
request
=
indexedDB
.
open
(
params
.
dbName
params
.
dbOptions
)
;
}
return
request
;
}
clearAllDatabases
(
continueToNextStepSync
)
;
yield
undefined
;
installPackagedProfile
(
"
defaultStorageUpgrade_profile
"
)
;
for
(
let
params
of
openParams
)
{
let
request
=
openDatabase
(
params
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
unexpectedSuccessHandler
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
let
event
=
yield
undefined
;
is
(
event
.
type
"
success
"
"
Correct
event
type
"
)
;
}
resetAllDatabases
(
continueToNextStepSync
)
;
yield
undefined
;
for
(
let
params
of
openParams
)
{
let
request
=
openDatabase
(
params
)
;
request
.
onerror
=
errorHandler
;
request
.
onupgradeneeded
=
unexpectedSuccessHandler
;
request
.
onsuccess
=
grabEventAndContinueHandler
;
let
event
=
yield
undefined
;
is
(
event
.
type
"
success
"
"
Correct
event
type
"
)
;
}
finishTest
(
)
;
yield
undefined
;
}
