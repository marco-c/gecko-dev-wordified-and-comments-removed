#
ifndef
IndexedDatabaseInlines_h
#
define
IndexedDatabaseInlines_h
#
ifndef
mozilla_dom_indexeddatabase_h__
#
error
Must
include
IndexedDatabase
.
h
first
#
endif
#
include
"
FileInfo
.
h
"
#
include
"
IDBMutableFile
.
h
"
#
include
"
mozilla
/
dom
/
indexedDB
/
PBackgroundIDBSharedTypes
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
nsIInputStream
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
indexedDB
{
inline
StructuredCloneFile
:
:
StructuredCloneFile
(
)
:
mType
(
eBlob
)
mValid
(
true
)
{
MOZ_COUNT_CTOR
(
StructuredCloneFile
)
;
}
inline
StructuredCloneFile
:
:
~
StructuredCloneFile
(
)
{
MOZ_COUNT_DTOR
(
StructuredCloneFile
)
;
}
inline
bool
StructuredCloneFile
:
:
operator
=
=
(
const
StructuredCloneFile
&
aOther
)
const
{
return
this
-
>
mBlob
=
=
aOther
.
mBlob
&
&
this
-
>
mMutableFile
=
=
aOther
.
mMutableFile
&
&
this
-
>
mFileInfo
=
=
aOther
.
mFileInfo
&
&
this
-
>
mType
=
=
aOther
.
mType
&
&
this
-
>
mValid
=
=
aOther
.
mValid
;
}
inline
StructuredCloneReadInfo
:
:
StructuredCloneReadInfo
(
)
:
mDatabase
(
nullptr
)
{
MOZ_COUNT_CTOR
(
StructuredCloneReadInfo
)
;
}
inline
StructuredCloneReadInfo
:
:
StructuredCloneReadInfo
(
StructuredCloneReadInfo
&
&
aCloneReadInfo
)
:
mData
(
Move
(
aCloneReadInfo
.
mData
)
)
{
MOZ_ASSERT
(
&
aCloneReadInfo
!
=
this
)
;
MOZ_COUNT_CTOR
(
StructuredCloneReadInfo
)
;
mFiles
.
Clear
(
)
;
mFiles
.
SwapElements
(
aCloneReadInfo
.
mFiles
)
;
mDatabase
=
aCloneReadInfo
.
mDatabase
;
aCloneReadInfo
.
mDatabase
=
nullptr
;
}
inline
StructuredCloneReadInfo
:
:
StructuredCloneReadInfo
(
SerializedStructuredCloneReadInfo
&
&
aCloneReadInfo
)
:
mData
(
Move
(
aCloneReadInfo
.
data
(
)
.
data
)
)
mDatabase
(
nullptr
)
{
MOZ_COUNT_CTOR
(
StructuredCloneReadInfo
)
;
}
inline
StructuredCloneReadInfo
:
:
~
StructuredCloneReadInfo
(
)
{
MOZ_COUNT_DTOR
(
StructuredCloneReadInfo
)
;
}
inline
StructuredCloneReadInfo
&
StructuredCloneReadInfo
:
:
operator
=
(
StructuredCloneReadInfo
&
&
aCloneReadInfo
)
{
MOZ_ASSERT
(
&
aCloneReadInfo
!
=
this
)
;
mData
=
Move
(
aCloneReadInfo
.
mData
)
;
mFiles
.
Clear
(
)
;
mFiles
.
SwapElements
(
aCloneReadInfo
.
mFiles
)
;
mDatabase
=
aCloneReadInfo
.
mDatabase
;
aCloneReadInfo
.
mDatabase
=
nullptr
;
return
*
this
;
}
}
}
}
#
endif
