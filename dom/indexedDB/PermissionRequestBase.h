#
ifndef
mozilla_dom_indexeddb_permissionrequestbase_h__
#
define
mozilla_dom_indexeddb_permissionrequestbase_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIIDBPermissionsRequest
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
class
nsIPrincipal
;
namespace
mozilla
:
:
dom
{
class
Element
;
namespace
indexedDB
{
class
PermissionRequestBase
:
public
nsIObserver
public
nsIIDBPermissionsRequest
{
nsCOMPtr
<
Element
>
mOwnerElement
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
public
:
enum
PermissionValue
{
kPermissionAllowed
=
nsIPermissionManager
:
:
ALLOW_ACTION
kPermissionDenied
=
nsIPermissionManager
:
:
DENY_ACTION
kPermissionPrompt
=
nsIPermissionManager
:
:
PROMPT_ACTION
}
;
NS_DECL_ISUPPORTS
static
Result
<
PermissionValue
nsresult
>
GetCurrentPermission
(
nsIPrincipal
&
aPrincipal
)
;
static
PermissionValue
PermissionValueForIntPermission
(
uint32_t
aIntPermission
)
;
Result
<
PermissionValue
nsresult
>
PromptIfNeeded
(
)
;
protected
:
PermissionRequestBase
(
Element
*
aOwnerElement
nsIPrincipal
*
aPrincipal
)
;
virtual
~
PermissionRequestBase
(
)
;
virtual
void
OnPromptComplete
(
PermissionValue
aPermissionValue
)
=
0
;
private
:
void
SetExplicitPermission
(
nsIPrincipal
*
aPrincipal
uint32_t
aIntPermission
)
;
NS_DECL_NSIOBSERVER
NS_DECL_NSIIDBPERMISSIONSREQUEST
}
;
}
}
#
endif
