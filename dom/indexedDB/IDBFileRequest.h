#
ifndef
mozilla_dom_indexeddb_idbfilerequest_h__
#
define
mozilla_dom_indexeddb_idbfilerequest_h__
#
include
"
DOMRequest
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
FileRequestBase
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
template
<
class
>
struct
already_AddRefed
;
class
nsPIDOMWindow
;
namespace
mozilla
{
class
EventChainPreVisitor
;
namespace
dom
{
namespace
indexedDB
{
class
IDBFileHandle
;
class
IDBFileRequest
final
:
public
DOMRequest
public
FileRequestBase
{
RefPtr
<
IDBFileHandle
>
mFileHandle
;
bool
mWrapAsDOMRequest
;
public
:
static
already_AddRefed
<
IDBFileRequest
>
Create
(
nsPIDOMWindow
*
aOwner
IDBFileHandle
*
aFileHandle
bool
aWrapAsDOMRequest
)
;
IDBFileHandle
*
GetFileHandle
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mFileHandle
;
}
IDBFileHandle
*
GetLockedFile
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
GetFileHandle
(
)
;
}
IMPL_EVENT_HANDLER
(
progress
)
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
IDBFileRequest
DOMRequest
)
virtual
nsresult
PreHandleEvent
(
EventChainPreVisitor
&
aVisitor
)
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
virtual
FileHandleBase
*
FileHandle
(
)
const
override
;
virtual
void
OnProgress
(
uint64_t
aProgress
uint64_t
aProgressMax
)
override
;
virtual
void
SetResultCallback
(
ResultCallback
*
aCallback
)
override
;
virtual
void
SetError
(
nsresult
aError
)
override
;
private
:
IDBFileRequest
(
nsPIDOMWindow
*
aWindow
IDBFileHandle
*
aFileHandle
bool
aWrapAsDOMRequest
)
;
~
IDBFileRequest
(
)
;
void
FireProgressEvent
(
uint64_t
aLoaded
uint64_t
aTotal
)
;
}
;
}
}
}
#
endif
