#
ifndef
mozilla_dom_idbmutablefile_h__
#
define
mozilla_dom_idbmutablefile_h__
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
FileModeBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTHashSet
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
DOMRequest
;
class
File
;
class
IDBDatabase
;
class
IDBFileHandle
;
namespace
indexedDB
{
class
BackgroundMutableFileChild
;
}
class
IDBMutableFile
final
:
public
DOMEventTargetHelper
{
RefPtr
<
IDBDatabase
>
mDatabase
;
nsTHashSet
<
IDBFileHandle
*
>
mFileHandles
;
nsString
mName
;
nsString
mType
;
Atomic
<
bool
>
mInvalidated
;
public
:
IDBMutableFile
(
IDBDatabase
*
aDatabase
const
nsAString
&
aName
const
nsAString
&
aType
)
;
void
AssertIsOnOwningThread
(
)
const
#
ifdef
DEBUG
;
#
else
{
}
#
endif
void
ClearBackgroundActor
(
)
{
AssertIsOnOwningThread
(
)
;
}
const
nsString
&
Name
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mName
;
}
const
nsString
&
Type
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mType
;
}
void
SetLazyData
(
const
nsAString
&
aName
const
nsAString
&
aType
)
{
mName
=
aName
;
mType
=
aType
;
}
int64_t
GetFileId
(
)
const
;
void
Invalidate
(
)
;
bool
IsInvalidated
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mInvalidated
;
}
void
RegisterFileHandle
(
IDBFileHandle
*
aFileHandle
)
;
void
UnregisterFileHandle
(
IDBFileHandle
*
aFileHandle
)
;
void
AbortFileHandles
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
IDBMutableFile
DOMEventTargetHelper
)
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
{
return
nullptr
;
}
private
:
~
IDBMutableFile
(
)
;
}
;
}
}
#
endif
