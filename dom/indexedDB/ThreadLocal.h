#
ifndef
mozilla_dom_indexeddb_threadlocal_h__
#
define
mozilla_dom_indexeddb_threadlocal_h__
#
include
"
IDBTransaction
.
h
"
#
include
"
ProfilerHelpers
.
h
"
#
include
"
mozilla
/
dom
/
indexedDB
/
PBackgroundIDBSharedTypes
.
h
"
namespace
mozilla
:
:
dom
{
class
IDBFactory
;
namespace
indexedDB
{
class
ThreadLocal
{
friend
class
DefaultDelete
<
ThreadLocal
>
;
friend
IDBFactory
;
LoggingInfo
mLoggingInfo
;
Maybe
<
IDBTransaction
&
>
mCurrentTransaction
;
LoggingIdString
<
false
>
mLoggingIdString
;
NS_DECL_OWNINGTHREAD
public
:
ThreadLocal
(
)
=
delete
;
ThreadLocal
(
const
ThreadLocal
&
aOther
)
=
delete
;
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
ThreadLocal
)
;
}
const
LoggingInfo
&
GetLoggingInfo
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mLoggingInfo
;
}
const
nsID
&
Id
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mLoggingInfo
.
backgroundChildLoggingId
(
)
;
}
const
nsCString
&
IdString
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mLoggingIdString
;
}
int64_t
NextTransactionSN
(
IDBTransaction
:
:
Mode
aMode
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mLoggingInfo
.
nextTransactionSerialNumber
(
)
<
INT64_MAX
)
;
MOZ_ASSERT
(
mLoggingInfo
.
nextVersionChangeTransactionSerialNumber
(
)
>
INT64_MIN
)
;
if
(
aMode
=
=
IDBTransaction
:
:
Mode
:
:
VersionChange
)
{
return
mLoggingInfo
.
nextVersionChangeTransactionSerialNumber
(
)
-
-
;
}
return
mLoggingInfo
.
nextTransactionSerialNumber
(
)
+
+
;
}
uint64_t
NextRequestSN
(
)
{
AssertIsOnOwningThread
(
)
;
MOZ_ASSERT
(
mLoggingInfo
.
nextRequestSerialNumber
(
)
<
UINT64_MAX
)
;
return
mLoggingInfo
.
nextRequestSerialNumber
(
)
+
+
;
}
void
SetCurrentTransaction
(
Maybe
<
IDBTransaction
&
>
aCurrentTransaction
)
{
AssertIsOnOwningThread
(
)
;
mCurrentTransaction
=
aCurrentTransaction
;
}
Maybe
<
IDBTransaction
&
>
MaybeCurrentTransactionRef
(
)
const
{
AssertIsOnOwningThread
(
)
;
return
mCurrentTransaction
;
}
private
:
explicit
ThreadLocal
(
const
nsID
&
aBackgroundChildLoggingId
)
;
~
ThreadLocal
(
)
;
}
;
}
}
#
endif
