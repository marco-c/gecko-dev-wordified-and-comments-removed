#
ifndef
DOM_INDEXEDDB_FILEINFOIMPL_H_
#
define
DOM_INDEXEDDB_FILEINFOIMPL_H_
#
include
"
FileInfo
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
QuotaCommon
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsIFile
.
h
"
namespace
mozilla
{
namespace
dom
{
namespace
indexedDB
{
template
<
typename
FileManager
>
FileInfo
<
FileManager
>
:
:
FileInfo
(
const
typename
FileManager
:
:
FileManagerGuard
&
aGuard
SafeRefPtr
<
FileManager
>
aFileManager
const
int64_t
aFileId
const
nsrefcnt
aInitialDBRefCnt
)
:
mFileId
(
aFileId
)
mDBRefCnt
(
aInitialDBRefCnt
)
mFileManager
(
std
:
:
move
(
aFileManager
)
)
{
MOZ_ASSERT
(
mFileId
>
0
)
;
MOZ_ASSERT
(
mFileManager
)
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
AddRef
(
)
{
AutoLock
lock
(
FileManager
:
:
Mutex
(
)
)
;
LockedAddRef
(
)
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
Release
(
const
bool
aSyncDeleteFile
)
{
UpdateReferences
(
mRefCnt
-
1
aSyncDeleteFile
)
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
UpdateDBRefs
(
int32_t
aDelta
)
{
UpdateReferences
(
mDBRefCnt
aDelta
)
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
GetReferences
(
int32_t
*
const
aRefCnt
int32_t
*
const
aDBRefCnt
)
{
AutoLock
lock
(
FileManager
:
:
Mutex
(
)
)
;
if
(
aRefCnt
)
{
*
aRefCnt
=
mRefCnt
;
}
if
(
aDBRefCnt
)
{
*
aDBRefCnt
=
mDBRefCnt
;
}
}
template
<
typename
FileManager
>
FileManager
&
FileInfo
<
FileManager
>
:
:
Manager
(
)
const
{
return
*
mFileManager
;
}
template
<
typename
FileManager
>
int64_t
FileInfo
<
FileManager
>
:
:
Id
(
)
const
{
return
mFileId
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
UpdateReferences
(
ThreadSafeAutoRefCnt
&
aRefCount
const
int32_t
aDelta
const
bool
aSyncDeleteFile
)
{
bool
needsCleanup
;
{
AutoLock
lock
(
FileManager
:
:
Mutex
(
)
)
;
aRefCount
=
aRefCount
+
aDelta
;
if
(
mRefCnt
+
mDBRefCnt
>
0
)
{
return
;
}
mFileManager
-
>
RemoveFileInfo
(
Id
(
)
lock
)
;
needsCleanup
=
!
mFileManager
-
>
Invalidated
(
)
;
}
if
(
needsCleanup
)
{
if
(
aSyncDeleteFile
)
{
QM_WARNONLY_TRY
(
mFileManager
-
>
SyncDeleteFile
(
Id
(
)
)
)
;
}
else
{
Cleanup
(
)
;
}
}
delete
this
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
LockedAddRef
(
)
{
FileManager
:
:
Mutex
(
)
.
AssertCurrentThreadOwns
(
)
;
+
+
mRefCnt
;
}
template
<
typename
FileManager
>
bool
FileInfo
<
FileManager
>
:
:
LockedClearDBRefs
(
const
typename
FileManager
:
:
FileManagerGuard
&
)
{
FileManager
:
:
Mutex
(
)
.
AssertCurrentThreadOwns
(
)
;
mDBRefCnt
=
0
;
if
(
mRefCnt
)
{
return
true
;
}
MOZ_ASSERT
(
mFileManager
-
>
Invalidated
(
)
)
;
delete
this
;
return
false
;
}
template
<
typename
FileManager
>
void
FileInfo
<
FileManager
>
:
:
Cleanup
(
)
{
QM_WARNONLY_TRY
(
mFileManager
-
>
AsyncDeleteFile
(
Id
(
)
)
)
;
}
template
<
typename
FileManager
>
nsCOMPtr
<
nsIFile
>
FileInfo
<
FileManager
>
:
:
GetFileForFileInfo
(
)
const
{
const
nsCOMPtr
<
nsIFile
>
directory
=
Manager
(
)
.
GetDirectory
(
)
;
if
(
NS_WARN_IF
(
!
directory
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIFile
>
file
=
FileManager
:
:
GetFileForId
(
directory
Id
(
)
)
;
if
(
NS_WARN_IF
(
!
file
)
)
{
return
nullptr
;
}
return
file
;
}
}
}
}
#
endif
