#
ifndef
mozilla_dom_indexeddatabasemanager_h__
#
define
mozilla_dom_indexeddatabasemanager_h__
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
dom
/
quota
/
PersistenceType
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
namespace
mozilla
{
class
EventChainPostVisitor
;
namespace
dom
{
class
IDBFactory
;
namespace
indexedDB
{
class
BackgroundUtilsChild
;
class
FileManager
;
class
FileManagerInfo
;
}
class
IndexedDatabaseManager
final
{
typedef
mozilla
:
:
dom
:
:
quota
:
:
PersistenceType
PersistenceType
;
typedef
mozilla
:
:
dom
:
:
indexedDB
:
:
FileManager
FileManager
;
typedef
mozilla
:
:
dom
:
:
indexedDB
:
:
FileManagerInfo
FileManagerInfo
;
public
:
enum
LoggingMode
{
Logging_Disabled
=
0
Logging_Concise
Logging_Detailed
Logging_ConciseProfilerMarks
Logging_DetailedProfilerMarks
}
;
NS_INLINE_DECL_REFCOUNTING_WITH_DESTROY
(
IndexedDatabaseManager
Destroy
(
)
)
static
IndexedDatabaseManager
*
GetOrCreate
(
)
;
static
IndexedDatabaseManager
*
Get
(
)
;
static
bool
IsClosed
(
)
;
static
bool
IsMainProcess
(
)
#
ifdef
DEBUG
;
#
else
{
return
sIsMainProcess
;
}
#
endif
static
bool
InTestingMode
(
)
;
static
bool
FullSynchronous
(
)
;
static
LoggingMode
GetLoggingMode
(
)
#
ifdef
DEBUG
;
#
else
{
return
sLoggingMode
;
}
#
endif
static
mozilla
:
:
LogModule
*
GetLoggingModule
(
)
#
ifdef
DEBUG
;
#
else
{
return
sLoggingModule
;
}
#
endif
static
bool
ExperimentalFeaturesEnabled
(
)
;
static
bool
ExperimentalFeaturesEnabled
(
JSContext
*
aCx
JSObject
*
aGlobal
)
;
static
bool
IsFileHandleEnabled
(
)
;
static
uint32_t
DataThreshold
(
)
;
static
uint32_t
MaxSerializedMsgSize
(
)
;
static
bool
PreprocessingEnabled
(
)
;
static
int32_t
MaxPreloadExtraRecords
(
)
;
void
ClearBackgroundActor
(
)
;
MOZ_MUST_USE
RefPtr
<
FileManager
>
GetFileManager
(
PersistenceType
aPersistenceType
const
nsACString
&
aOrigin
const
nsAString
&
aDatabaseName
)
;
void
AddFileManager
(
FileManager
*
aFileManager
)
;
void
InvalidateAllFileManagers
(
)
;
void
InvalidateFileManagers
(
PersistenceType
aPersistenceType
const
nsACString
&
aOrigin
)
;
void
InvalidateFileManager
(
PersistenceType
aPersistenceType
const
nsACString
&
aOrigin
const
nsAString
&
aDatabaseName
)
;
nsresult
BlockAndGetFileReferences
(
PersistenceType
aPersistenceType
const
nsACString
&
aOrigin
const
nsAString
&
aDatabaseName
int64_t
aFileId
int32_t
*
aRefCnt
int32_t
*
aDBRefCnt
bool
*
aResult
)
;
nsresult
FlushPendingFileDeletions
(
)
;
static
const
nsCString
&
GetLocale
(
)
;
static
nsresult
CommonPostHandleEvent
(
EventChainPostVisitor
&
aVisitor
IDBFactory
*
aFactory
)
;
static
bool
ResolveSandboxBinding
(
JSContext
*
aCx
)
;
static
bool
DefineIndexedDB
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGlobal
)
;
private
:
IndexedDatabaseManager
(
)
;
~
IndexedDatabaseManager
(
)
;
nsresult
Init
(
)
;
void
Destroy
(
)
;
static
void
LoggingModePrefChangedCallback
(
const
char
*
aPrefName
void
*
aClosure
)
;
nsClassHashtable
<
nsCStringHashKey
FileManagerInfo
>
mFileManagerInfos
;
nsClassHashtable
<
nsRefPtrHashKey
<
FileManager
>
nsTArray
<
int64_t
>
>
mPendingDeleteInfos
;
nsCString
mLocale
;
indexedDB
:
:
BackgroundUtilsChild
*
mBackgroundActor
;
static
bool
sIsMainProcess
;
static
bool
sFullSynchronousMode
;
static
LazyLogModule
sLoggingModule
;
static
Atomic
<
LoggingMode
>
sLoggingMode
;
}
;
}
}
#
endif
