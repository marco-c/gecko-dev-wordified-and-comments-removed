#
ifndef
nsXBLPrototypeBinding_h__
#
define
nsXBLPrototypeBinding_h__
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsXBLDocumentInfo
.
h
"
#
include
"
nsXBLProtoImpl
.
h
"
#
include
"
nsXBLProtoImplMethod
.
h
"
#
include
"
nsXBLPrototypeHandler
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
class
nsAtom
;
class
nsIContent
;
class
nsXBLAttributeEntry
;
class
nsXBLBinding
;
class
nsXBLProtoImplField
;
class
nsXBLPrototypeBinding
final
:
public
mozilla
:
:
SupportsWeakPtr
<
nsXBLPrototypeBinding
>
{
public
:
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
nsXBLPrototypeBinding
)
mozilla
:
:
dom
:
:
Element
*
GetBindingElement
(
)
const
{
return
mBinding
;
}
void
SetBindingElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
nsIURI
*
BindingURI
(
)
const
{
return
mBindingURI
;
}
nsIURI
*
AlternateBindingURI
(
)
const
{
return
mAlternateBindingURI
;
}
nsIURI
*
DocURI
(
)
const
{
return
mXBLDocInfoWeak
-
>
DocumentURI
(
)
;
}
nsIURI
*
GetBaseBindingURI
(
)
const
{
return
mBaseBindingURI
;
}
bool
CompareBindingURI
(
nsIURI
*
aURI
)
const
;
bool
GetAllowScripts
(
)
const
;
nsresult
BindingAttached
(
nsIContent
*
aBoundElement
)
;
nsresult
BindingDetached
(
nsIContent
*
aBoundElement
)
;
nsXBLPrototypeHandler
*
GetPrototypeHandlers
(
)
{
return
mPrototypeHandler
;
}
void
SetPrototypeHandlers
(
nsXBLPrototypeHandler
*
aHandler
)
{
mPrototypeHandler
=
aHandler
;
}
nsXBLProtoImplAnonymousMethod
*
GetConstructor
(
)
;
nsresult
SetConstructor
(
nsXBLProtoImplAnonymousMethod
*
aConstructor
)
;
nsXBLProtoImplAnonymousMethod
*
GetDestructor
(
)
;
nsresult
SetDestructor
(
nsXBLProtoImplAnonymousMethod
*
aDestructor
)
;
nsXBLProtoImplField
*
FindField
(
const
nsString
&
aFieldName
)
const
{
return
mImplementation
?
mImplementation
-
>
FindField
(
aFieldName
)
:
nullptr
;
}
bool
ResolveAllFields
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
const
{
return
!
mImplementation
|
|
mImplementation
-
>
ResolveAllFields
(
cx
obj
)
;
}
void
UndefineFields
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
const
{
if
(
mImplementation
)
{
mImplementation
-
>
UndefineFields
(
cx
obj
)
;
}
}
const
nsString
&
ClassName
(
)
const
{
return
mImplementation
?
mImplementation
-
>
mClassName
:
EmptyString
(
)
;
}
nsresult
InitClass
(
const
nsString
&
aClassName
JSContext
*
aContext
JS
:
:
Handle
<
JSObject
*
>
aScriptObject
JS
:
:
MutableHandle
<
JSObject
*
>
aClassObject
bool
*
aNew
)
;
nsresult
ConstructInterfaceTable
(
const
nsAString
&
aImpls
)
;
void
SetImplementation
(
nsXBLProtoImpl
*
aImpl
)
{
mImplementation
=
aImpl
;
}
nsXBLProtoImpl
*
GetImplementation
(
)
{
return
mImplementation
;
}
nsresult
InstallImplementation
(
nsXBLBinding
*
aBinding
)
;
bool
HasImplementation
(
)
const
{
return
mImplementation
!
=
nullptr
;
}
void
AttributeChanged
(
nsAtom
*
aAttribute
int32_t
aNameSpaceID
bool
aRemoveFlag
mozilla
:
:
dom
:
:
Element
*
aChangedElement
nsIContent
*
aAnonymousContent
bool
aNotify
)
;
void
SetBasePrototype
(
nsXBLPrototypeBinding
*
aBinding
)
;
nsXBLPrototypeBinding
*
GetBasePrototype
(
)
{
return
mBaseBinding
;
}
nsXBLDocumentInfo
*
XBLDocumentInfo
(
)
const
{
return
mXBLDocInfoWeak
;
}
bool
IsChrome
(
)
{
return
mXBLDocInfoWeak
-
>
IsChrome
(
)
;
}
void
SetInitialAttributes
(
mozilla
:
:
dom
:
:
Element
*
aBoundElement
nsIContent
*
aAnonymousContent
)
;
nsAtom
*
GetBaseTag
(
int32_t
*
aNamespaceID
)
;
void
SetBaseTag
(
int32_t
aNamespaceID
nsAtom
*
aTag
)
;
bool
ImplementsInterface
(
REFNSIID
aIID
)
const
;
void
Initialize
(
)
;
nsresult
ResolveBaseBinding
(
)
;
const
nsCOMArray
<
nsXBLKeyEventHandler
>
*
GetKeyEventHandlers
(
)
{
if
(
!
mKeyHandlersRegistered
)
{
CreateKeyHandlers
(
)
;
mKeyHandlersRegistered
=
true
;
}
return
&
mKeyHandlers
;
}
private
:
nsresult
Read
(
nsIObjectInputStream
*
aStream
nsXBLDocumentInfo
*
aDocInfo
mozilla
:
:
dom
:
:
Document
*
aDocument
uint8_t
aFlags
)
;
public
:
static
nsresult
ReadNewBinding
(
nsIObjectInputStream
*
aStream
nsXBLDocumentInfo
*
aDocInfo
mozilla
:
:
dom
:
:
Document
*
aDocument
uint8_t
aFlags
)
;
nsresult
Write
(
nsIObjectOutputStream
*
aStream
)
;
nsresult
ReadContentNode
(
nsIObjectInputStream
*
aStream
mozilla
:
:
dom
:
:
Document
*
aDocument
nsNodeInfoManager
*
aNim
nsIContent
*
*
aChild
)
;
nsresult
WriteContentNode
(
nsIObjectOutputStream
*
aStream
nsIContent
*
aNode
)
;
nsresult
ReadNamespace
(
nsIObjectInputStream
*
aStream
int32_t
&
aNameSpaceID
)
;
nsresult
WriteNamespace
(
nsIObjectOutputStream
*
aStream
int32_t
aNameSpaceID
)
;
public
:
nsXBLPrototypeBinding
(
)
;
~
nsXBLPrototypeBinding
(
)
;
nsresult
Init
(
const
nsACString
&
aRef
nsXBLDocumentInfo
*
aInfo
mozilla
:
:
dom
:
:
Element
*
aElement
bool
aFirstBinding
=
false
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
const
;
void
Unlink
(
)
;
void
Trace
(
const
TraceCallbacks
&
aCallbacks
void
*
aClosure
)
const
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
public
:
mozilla
:
:
dom
:
:
Element
*
GetImmediateChild
(
nsAtom
*
aTag
)
;
mozilla
:
:
dom
:
:
Element
*
LocateInstance
(
mozilla
:
:
dom
:
:
Element
*
aBoundElt
nsIContent
*
aTemplRoot
nsIContent
*
aCopyRoot
mozilla
:
:
dom
:
:
Element
*
aTemplChild
)
;
bool
SimpleScopeChain
(
)
const
{
return
mSimpleScopeChain
;
}
bool
BindToUntrustedContent
(
)
const
{
return
mBindToUntrustedContent
;
}
typedef
nsClassHashtable
<
nsRefPtrHashKey
<
nsAtom
>
nsXBLAttributeEntry
>
InnerAttributeTable
;
protected
:
void
EnsureAttributeTable
(
)
;
void
AddToAttributeTable
(
int32_t
aSourceNamespaceID
nsAtom
*
aSourceTag
int32_t
aDestNamespaceID
nsAtom
*
aDestTag
mozilla
:
:
dom
:
:
Element
*
aContent
)
;
void
ConstructAttributeTable
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
void
CreateKeyHandlers
(
)
;
protected
:
nsCOMPtr
<
nsIURI
>
mBindingURI
;
nsCOMPtr
<
nsIURI
>
mAlternateBindingURI
;
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mBinding
;
nsAutoPtr
<
nsXBLPrototypeHandler
>
mPrototypeHandler
;
nsCOMPtr
<
nsIURI
>
mBaseBindingURI
;
nsXBLProtoImpl
*
mImplementation
;
mozilla
:
:
WeakPtr
<
nsXBLPrototypeBinding
>
mBaseBinding
;
bool
mCheckedBaseProto
;
bool
mKeyHandlersRegistered
;
bool
mBindToUntrustedContent
;
bool
mSimpleScopeChain
;
nsXBLDocumentInfo
*
mXBLDocInfoWeak
;
nsAutoPtr
<
nsClassHashtable
<
nsUint32HashKey
InnerAttributeTable
>
>
mAttributeTable
;
class
IIDHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
const
nsIID
&
KeyType
;
typedef
const
nsIID
*
KeyTypePointer
;
explicit
IIDHashKey
(
const
nsIID
*
aKey
)
:
mKey
(
*
aKey
)
{
}
IIDHashKey
(
const
IIDHashKey
&
aOther
)
:
mKey
(
aOther
.
GetKey
(
)
)
{
}
~
IIDHashKey
(
)
{
}
KeyType
GetKey
(
)
const
{
return
mKey
;
}
bool
KeyEquals
(
const
KeyTypePointer
aKey
)
const
{
return
mKey
.
Equals
(
*
aKey
)
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
&
aKey
;
}
static
PLDHashNumber
HashKey
(
const
KeyTypePointer
aKey
)
{
return
aKey
-
>
m0
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
nsIID
mKey
;
}
;
nsInterfaceHashtable
<
IIDHashKey
nsIContent
>
mInterfaceTable
;
nsCOMArray
<
nsXBLKeyEventHandler
>
mKeyHandlers
;
}
;
#
endif
