#
ifdef
MOZ_OLD_STYLE
#
include
"
nsIStyleRuleProcessor
.
h
"
#
endif
#
include
"
nsIDocument
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsXBLResourceLoader
.
h
"
#
include
"
nsXBLPrototypeResources
.
h
"
#
include
"
nsXBLPrototypeBinding
.
h
"
#
include
"
nsIDocumentObserver
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsLayoutCID
.
h
"
#
ifdef
MOZ_OLD_STYLE
#
include
"
nsCSSRuleProcessor
.
h
"
#
include
"
nsStyleSet
.
h
"
#
endif
#
include
"
mozilla
/
dom
/
URL
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
IsChromeURI
;
nsXBLPrototypeResources
:
:
nsXBLPrototypeResources
(
nsXBLPrototypeBinding
*
aBinding
)
{
MOZ_COUNT_CTOR
(
nsXBLPrototypeResources
)
;
mLoader
=
new
nsXBLResourceLoader
(
aBinding
this
)
;
}
nsXBLPrototypeResources
:
:
~
nsXBLPrototypeResources
(
)
{
MOZ_COUNT_DTOR
(
nsXBLPrototypeResources
)
;
if
(
mLoader
)
{
mLoader
-
>
mResources
=
nullptr
;
}
if
(
mServoStyleSet
)
{
mServoStyleSet
-
>
Shutdown
(
)
;
}
}
void
nsXBLPrototypeResources
:
:
AddResource
(
nsAtom
*
aResourceType
const
nsAString
&
aSrc
)
{
if
(
mLoader
)
mLoader
-
>
AddResource
(
aResourceType
aSrc
)
;
}
bool
nsXBLPrototypeResources
:
:
LoadResources
(
nsIContent
*
aBoundElement
)
{
if
(
mLoader
)
{
return
mLoader
-
>
LoadResources
(
aBoundElement
)
;
}
return
true
;
}
void
nsXBLPrototypeResources
:
:
AddResourceListener
(
nsIContent
*
aBoundElement
)
{
if
(
mLoader
)
mLoader
-
>
AddResourceListener
(
aBoundElement
)
;
}
nsresult
nsXBLPrototypeResources
:
:
FlushSkinSheets
(
)
{
if
(
mStyleSheetList
.
Length
(
)
=
=
0
)
return
NS_OK
;
nsCOMPtr
<
nsIDocument
>
doc
=
mLoader
-
>
mBinding
-
>
XBLDocumentInfo
(
)
-
>
GetDocument
(
)
;
if
(
!
doc
)
{
return
NS_OK
;
}
nsTArray
<
RefPtr
<
StyleSheet
>
>
oldSheets
;
oldSheets
.
SwapElements
(
mStyleSheetList
)
;
mozilla
:
:
css
:
:
Loader
*
cssLoader
=
doc
-
>
CSSLoader
(
)
;
for
(
size_t
i
=
0
count
=
oldSheets
.
Length
(
)
;
i
<
count
;
+
+
i
)
{
StyleSheet
*
oldSheet
=
oldSheets
[
i
]
;
nsIURI
*
uri
=
oldSheet
-
>
GetSheetURI
(
)
;
RefPtr
<
StyleSheet
>
newSheet
;
if
(
!
oldSheet
-
>
IsInline
(
)
&
&
IsChromeURI
(
uri
)
)
{
if
(
NS_FAILED
(
cssLoader
-
>
LoadSheetSync
(
uri
&
newSheet
)
)
)
continue
;
}
else
{
newSheet
=
oldSheet
;
}
mStyleSheetList
.
AppendElement
(
newSheet
)
;
}
if
(
doc
-
>
IsStyledByServo
(
)
)
{
if
(
auto
*
shell
=
doc
-
>
GetShell
(
)
)
{
MOZ_ASSERT
(
shell
-
>
GetPresContext
(
)
)
;
ComputeServoStyleSet
(
shell
-
>
GetPresContext
(
)
)
;
}
}
else
{
#
ifdef
MOZ_OLD_STYLE
GatherRuleProcessor
(
)
;
#
else
MOZ_CRASH
(
"
old
style
system
disabled
"
)
;
#
endif
}
return
NS_OK
;
}
nsresult
nsXBLPrototypeResources
:
:
Write
(
nsIObjectOutputStream
*
aStream
)
{
if
(
mLoader
)
return
mLoader
-
>
Write
(
aStream
)
;
return
NS_OK
;
}
void
nsXBLPrototypeResources
:
:
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
proto
mResources
mLoader
"
)
;
cb
.
NoteXPCOMChild
(
mLoader
)
;
#
ifdef
MOZ_OLD_STYLE
CycleCollectionNoteChild
(
cb
mRuleProcessor
.
get
(
)
"
mRuleProcessor
"
)
;
#
endif
ImplCycleCollectionTraverse
(
cb
mStyleSheetList
"
mStyleSheetList
"
)
;
}
void
nsXBLPrototypeResources
:
:
Unlink
(
)
{
mStyleSheetList
.
Clear
(
)
;
#
ifdef
MOZ_OLD_STYLE
mRuleProcessor
=
nullptr
;
#
endif
}
void
nsXBLPrototypeResources
:
:
ClearLoader
(
)
{
mLoader
=
nullptr
;
}
#
ifdef
MOZ_OLD_STYLE
void
nsXBLPrototypeResources
:
:
GatherRuleProcessor
(
)
{
nsTArray
<
RefPtr
<
CSSStyleSheet
>
>
sheets
(
mStyleSheetList
.
Length
(
)
)
;
for
(
StyleSheet
*
sheet
:
mStyleSheetList
)
{
MOZ_ASSERT
(
sheet
-
>
IsGecko
(
)
"
GatherRuleProcessor
must
only
be
called
for
"
"
nsXBLPrototypeResources
objects
with
Gecko
-
flavored
style
"
"
backends
"
)
;
sheets
.
AppendElement
(
sheet
-
>
AsGecko
(
)
)
;
}
mRuleProcessor
=
new
nsCSSRuleProcessor
(
Move
(
sheets
)
SheetType
:
:
Doc
nullptr
mRuleProcessor
)
;
}
#
endif
void
nsXBLPrototypeResources
:
:
ComputeServoStyleSet
(
nsPresContext
*
aPresContext
)
{
nsTArray
<
RefPtr
<
ServoStyleSheet
>
>
sheets
(
mStyleSheetList
.
Length
(
)
)
;
for
(
StyleSheet
*
sheet
:
mStyleSheetList
)
{
MOZ_ASSERT
(
sheet
-
>
IsServo
(
)
"
This
should
only
be
called
with
Servo
-
flavored
style
backend
!
"
)
;
sheets
.
AppendElement
(
sheet
-
>
AsServo
(
)
)
;
}
mServoStyleSet
=
ServoStyleSet
:
:
CreateXBLServoStyleSet
(
aPresContext
sheets
)
;
}
void
nsXBLPrototypeResources
:
:
AppendStyleSheet
(
StyleSheet
*
aSheet
)
{
mStyleSheetList
.
AppendElement
(
aSheet
)
;
}
void
nsXBLPrototypeResources
:
:
RemoveStyleSheet
(
StyleSheet
*
aSheet
)
{
mStyleSheetList
.
RemoveElement
(
aSheet
)
;
}
void
nsXBLPrototypeResources
:
:
InsertStyleSheetAt
(
size_t
aIndex
StyleSheet
*
aSheet
)
{
mStyleSheetList
.
InsertElementAt
(
aIndex
aSheet
)
;
}
StyleSheet
*
nsXBLPrototypeResources
:
:
StyleSheetAt
(
size_t
aIndex
)
const
{
return
mStyleSheetList
[
aIndex
]
;
}
size_t
nsXBLPrototypeResources
:
:
SheetCount
(
)
const
{
return
mStyleSheetList
.
Length
(
)
;
}
bool
nsXBLPrototypeResources
:
:
HasStyleSheets
(
)
const
{
return
!
mStyleSheetList
.
IsEmpty
(
)
;
}
void
nsXBLPrototypeResources
:
:
AppendStyleSheetsTo
(
nsTArray
<
StyleSheet
*
>
&
aResult
)
const
{
aResult
.
AppendElements
(
mStyleSheetList
)
;
}
