#
ifndef
nsXBLWindowKeyHandler_h__
#
define
nsXBLWindowKeyHandler_h__
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
layers
/
KeyboardMap
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
class
nsAtom
;
class
nsXBLPrototypeHandler
;
namespace
mozilla
{
class
EventListenerManager
;
class
WidgetKeyboardEvent
;
struct
IgnoreModifierState
;
namespace
dom
{
class
Element
;
class
EventTarget
;
class
KeyboardEvent
;
}
}
class
nsXBLWindowKeyHandler
:
public
nsIDOMEventListener
{
typedef
mozilla
:
:
EventListenerManager
EventListenerManager
;
typedef
mozilla
:
:
IgnoreModifierState
IgnoreModifierState
;
typedef
mozilla
:
:
layers
:
:
KeyboardMap
KeyboardMap
;
typedef
mozilla
:
:
dom
:
:
KeyboardEvent
KeyboardEvent
;
public
:
nsXBLWindowKeyHandler
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
)
;
void
InstallKeyboardEventListenersTo
(
EventListenerManager
*
aEventListenerManager
)
;
void
RemoveKeyboardEventListenersFrom
(
EventListenerManager
*
aEventListenerManager
)
;
static
KeyboardMap
CollectKeyboardShortcuts
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
protected
:
virtual
~
nsXBLWindowKeyHandler
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
WalkHandlers
(
KeyboardEvent
*
aKeyEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
WalkHandlersInternal
(
KeyboardEvent
*
aKeyEvent
bool
aExecute
bool
*
aOutReservedForChrome
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
bool
WalkHandlersAndExecute
(
KeyboardEvent
*
aKeyEvent
uint32_t
aCharCode
const
IgnoreModifierState
&
aIgnoreModifierState
bool
aExecute
bool
*
aOutReservedForChrome
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
void
HandleEventOnCaptureInDefaultEventGroup
(
KeyboardEvent
*
aEvent
)
;
MOZ_CAN_RUN_SCRIPT
void
HandleEventOnCaptureInSystemEventGroup
(
KeyboardEvent
*
aEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
HasHandlerForEvent
(
KeyboardEvent
*
aEvent
bool
*
aOutReservedForChrome
=
nullptr
)
;
bool
IsReservedKey
(
mozilla
:
:
WidgetKeyboardEvent
*
aKeyEvent
nsXBLPrototypeHandler
*
aHandler
)
;
nsresult
EnsureHandlers
(
)
;
bool
IsHTMLEditableFieldFocused
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
Element
>
GetElement
(
bool
*
aIsDisabled
=
nullptr
)
;
bool
GetElementForHandler
(
nsXBLPrototypeHandler
*
aHandler
mozilla
:
:
dom
:
:
Element
*
*
aElementForHandler
)
;
bool
IsExecutableElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
const
;
nsWeakPtr
mWeakPtrForElement
;
mozilla
:
:
dom
:
:
EventTarget
*
mTarget
;
nsXBLPrototypeHandler
*
mHandler
;
}
;
already_AddRefed
<
nsXBLWindowKeyHandler
>
NS_NewXBLWindowKeyHandler
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
dom
:
:
EventTarget
*
aTarget
)
;
#
endif
