#
ifndef
nsXBLService_h_
#
define
nsXBLService_h_
#
include
"
nsString
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
class
nsXBLBinding
;
class
nsXBLDocumentInfo
;
class
nsIContent
;
class
nsIURI
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
Element
;
class
EventTarget
;
}
}
class
nsXBLService
final
:
public
nsSupportsWeakReference
{
NS_DECL_ISUPPORTS
static
nsXBLService
*
gInstance
;
static
void
Init
(
)
;
static
void
Shutdown
(
)
{
NS_IF_RELEASE
(
gInstance
)
;
}
static
nsXBLService
*
GetInstance
(
)
{
return
gInstance
;
}
static
bool
IsChromeOrResourceURI
(
nsIURI
*
aURI
)
;
nsresult
LoadBindings
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsIURI
*
aURL
nsIPrincipal
*
aOriginPrincipal
nsXBLBinding
*
*
aBinding
)
;
nsresult
BindingReady
(
nsIContent
*
aBoundElement
nsIURI
*
aURI
bool
*
aIsReady
)
;
private
:
nsXBLService
(
)
;
virtual
~
nsXBLService
(
)
;
nsresult
LoadBindingDocumentInfo
(
nsIContent
*
aBoundElement
mozilla
:
:
dom
:
:
Document
*
aBoundDocument
nsIURI
*
aBindingURI
nsIPrincipal
*
aOriginPrincipal
bool
aForceSyncLoad
nsXBLDocumentInfo
*
*
aResult
)
;
protected
:
void
FlushStyleBindings
(
mozilla
:
:
dom
:
:
Element
*
)
;
nsresult
FetchBindingDocument
(
nsIContent
*
aBoundElement
mozilla
:
:
dom
:
:
Document
*
aBoundDocument
nsIURI
*
aDocumentURI
nsIURI
*
aBindingURI
nsIPrincipal
*
aOriginPrincipal
bool
aForceSyncLoad
mozilla
:
:
dom
:
:
Document
*
*
aResult
)
;
nsresult
GetBinding
(
nsIContent
*
aBoundElement
nsIURI
*
aURI
bool
aPeekFlag
nsIPrincipal
*
aOriginPrincipal
bool
*
aIsReady
nsXBLBinding
*
*
aResult
)
;
nsresult
GetBinding
(
nsIContent
*
aBoundElement
nsIURI
*
aURI
bool
aPeekFlag
nsIPrincipal
*
aOriginPrincipal
bool
*
aIsReady
nsXBLBinding
*
*
aResult
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
&
aDontExtendURIs
)
;
public
:
static
bool
gDisableChromeCache
;
static
bool
gAllowDataURIs
;
}
;
#
endif
