#
ifndef
nsXBLPrototypeResources_h__
#
define
nsXBLPrototypeResources_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
ServoStyleRuleMap
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
class
nsCSSRuleProcessor
;
class
nsAtom
;
class
nsIContent
;
class
nsXBLPrototypeBinding
;
class
nsXBLResourceLoader
;
struct
RawServoAuthorStyles
;
namespace
mozilla
{
class
CSSStyleSheet
;
class
ServoStyleSet
;
class
ServoStyleRuleMap
;
}
class
nsXBLPrototypeResources
{
public
:
explicit
nsXBLPrototypeResources
(
nsXBLPrototypeBinding
*
aBinding
)
;
~
nsXBLPrototypeResources
(
)
;
bool
LoadResources
(
nsIContent
*
aBoundElement
)
;
void
AddResource
(
nsAtom
*
aResourceType
const
nsAString
&
aSrc
)
;
void
AddResourceListener
(
nsIContent
*
aElement
)
;
nsresult
FlushSkinSheets
(
)
;
nsresult
Write
(
nsIObjectOutputStream
*
aStream
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
;
void
Unlink
(
)
;
void
ClearLoader
(
)
;
void
AppendStyleSheet
(
mozilla
:
:
StyleSheet
*
aSheet
)
;
void
RemoveStyleSheet
(
mozilla
:
:
StyleSheet
*
aSheet
)
;
void
InsertStyleSheetAt
(
size_t
aIndex
mozilla
:
:
StyleSheet
*
aSheet
)
;
mozilla
:
:
StyleSheet
*
StyleSheetAt
(
size_t
aIndex
)
const
{
return
mStyleSheetList
[
aIndex
]
;
}
size_t
SheetCount
(
)
const
{
return
mStyleSheetList
.
Length
(
)
;
}
bool
HasStyleSheets
(
)
const
{
return
!
mStyleSheetList
.
IsEmpty
(
)
;
}
void
AppendStyleSheetsTo
(
nsTArray
<
mozilla
:
:
StyleSheet
*
>
&
aResult
)
const
;
#
ifdef
MOZ_OLD_STYLE
void
GatherRuleProcessor
(
)
;
nsCSSRuleProcessor
*
GetRuleProcessor
(
)
const
{
return
mRuleProcessor
;
}
#
endif
const
RawServoAuthorStyles
*
GetServoStyles
(
)
const
{
return
mServoStyles
.
get
(
)
;
}
void
SyncServoStyles
(
)
;
mozilla
:
:
ServoStyleRuleMap
*
GetServoStyleRuleMap
(
)
;
void
ComputeServoStyles
(
const
mozilla
:
:
ServoStyleSet
&
aMasterStyleSet
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
RefPtr
<
nsXBLResourceLoader
>
mLoader
;
nsTArray
<
RefPtr
<
mozilla
:
:
StyleSheet
>
>
mStyleSheetList
;
#
ifdef
MOZ_OLD_STYLE
RefPtr
<
nsCSSRuleProcessor
>
mRuleProcessor
;
#
endif
mozilla
:
:
UniquePtr
<
RawServoAuthorStyles
>
mServoStyles
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
ServoStyleRuleMap
>
mStyleRuleMap
;
}
;
#
endif
