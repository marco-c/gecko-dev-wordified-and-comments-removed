#
ifndef
nsXBLPrototypeResources_h__
#
define
nsXBLPrototypeResources_h__
#
include
"
mozilla
/
StyleSheetHandle
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
class
nsCSSRuleProcessor
;
class
nsIAtom
;
class
nsIContent
;
class
nsXBLPrototypeBinding
;
class
nsXBLResourceLoader
;
namespace
mozilla
{
class
CSSStyleSheet
;
}
class
nsXBLPrototypeResources
{
public
:
explicit
nsXBLPrototypeResources
(
nsXBLPrototypeBinding
*
aBinding
)
;
~
nsXBLPrototypeResources
(
)
;
void
LoadResources
(
bool
*
aResult
)
;
void
AddResource
(
nsIAtom
*
aResourceType
const
nsAString
&
aSrc
)
;
void
AddResourceListener
(
nsIContent
*
aElement
)
;
nsresult
FlushSkinSheets
(
)
;
nsresult
Write
(
nsIObjectOutputStream
*
aStream
)
;
void
Traverse
(
nsCycleCollectionTraversalCallback
&
cb
)
;
void
Unlink
(
)
;
void
ClearLoader
(
)
;
void
AppendStyleSheet
(
mozilla
:
:
StyleSheetHandle
aSheet
)
;
void
RemoveStyleSheet
(
mozilla
:
:
StyleSheetHandle
aSheet
)
;
void
InsertStyleSheetAt
(
size_t
aIndex
mozilla
:
:
StyleSheetHandle
aSheet
)
;
mozilla
:
:
StyleSheetHandle
StyleSheetAt
(
size_t
aIndex
)
const
;
size_t
SheetCount
(
)
const
;
bool
HasStyleSheets
(
)
const
;
void
AppendStyleSheetsTo
(
nsTArray
<
mozilla
:
:
StyleSheetHandle
>
&
aResult
)
const
;
void
GatherRuleProcessor
(
)
;
nsCSSRuleProcessor
*
GetRuleProcessor
(
)
const
{
return
mRuleProcessor
;
}
private
:
RefPtr
<
nsXBLResourceLoader
>
mLoader
;
nsTArray
<
mozilla
:
:
StyleSheetHandle
:
:
RefPtr
>
mStyleSheetList
;
RefPtr
<
nsCSSRuleProcessor
>
mRuleProcessor
;
}
;
#
endif
