#
ifndef
nsXBLBinding_h_
#
define
nsXBLBinding_h_
#
include
"
nsXBLService
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsINodeList
.
h
"
#
ifdef
MOZ_OLD_STYLE
#
include
"
nsIStyleRuleProcessor
.
h
"
#
endif
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
js
/
TypeDecls
.
h
"
class
nsXBLPrototypeBinding
;
class
nsIContent
;
class
nsAtom
;
class
nsIDocument
;
namespace
mozilla
{
class
ServoStyleSet
;
namespace
dom
{
class
ShadowRoot
;
class
XBLChildrenElement
;
}
}
class
nsAnonymousContentList
;
class
nsXBLBinding
final
{
public
:
explicit
nsXBLBinding
(
nsXBLPrototypeBinding
*
aProtoBinding
)
;
nsXBLBinding
(
mozilla
:
:
dom
:
:
ShadowRoot
*
aShadowRoot
nsXBLPrototypeBinding
*
aProtoBinding
)
;
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
nsXBLBinding
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
nsXBLBinding
)
nsXBLPrototypeBinding
*
PrototypeBinding
(
)
const
{
return
mPrototypeBinding
;
}
nsIContent
*
GetAnonymousContent
(
)
{
return
mContent
.
get
(
)
;
}
nsXBLBinding
*
GetBindingWithContent
(
)
;
nsXBLBinding
*
GetBaseBinding
(
)
const
{
return
mNextBinding
;
}
void
SetBaseBinding
(
nsXBLBinding
*
aBinding
)
;
mozilla
:
:
dom
:
:
Element
*
GetBoundElement
(
)
{
return
mBoundElement
;
}
void
SetBoundElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
bool
LookupMember
(
JSContext
*
aCx
JS
:
:
Handle
<
jsid
>
aId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
)
;
bool
HasField
(
nsString
&
aName
)
;
protected
:
~
nsXBLBinding
(
)
;
bool
LookupMemberInternal
(
JSContext
*
aCx
nsString
&
aName
JS
:
:
Handle
<
jsid
>
aNameAsId
JS
:
:
MutableHandle
<
JS
:
:
PropertyDescriptor
>
aDesc
JS
:
:
Handle
<
JSObject
*
>
aXBLScope
)
;
public
:
void
MarkForDeath
(
)
;
bool
MarkedForDeath
(
)
const
{
return
mMarkedForDeath
;
}
bool
HasStyleSheets
(
)
const
;
bool
InheritsStyle
(
)
const
;
bool
ImplementsInterface
(
REFNSIID
aIID
)
const
;
void
GenerateAnonymousContent
(
)
;
void
BindAnonymousContent
(
nsIContent
*
aAnonParent
nsIContent
*
aElement
bool
aNativeAnon
)
;
static
void
UnbindAnonymousContent
(
nsIDocument
*
aDocument
nsIContent
*
aAnonParent
bool
aNullParent
=
true
)
;
void
InstallEventHandlers
(
)
;
nsresult
InstallImplementation
(
)
;
void
ExecuteAttachedHandler
(
)
;
void
ExecuteDetachedHandler
(
)
;
void
UnhookEventHandlers
(
)
;
nsAtom
*
GetBaseTag
(
int32_t
*
aNameSpaceID
)
;
nsXBLBinding
*
RootBinding
(
)
;
bool
ResolveAllFields
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
)
const
;
void
AttributeChanged
(
nsAtom
*
aAttribute
int32_t
aNameSpaceID
bool
aRemoveFlag
bool
aNotify
)
;
void
ChangeDocument
(
nsIDocument
*
aOldDocument
nsIDocument
*
aNewDocument
)
;
#
ifdef
MOZ_OLD_STYLE
void
WalkRules
(
nsIStyleRuleProcessor
:
:
EnumFunc
aFunc
void
*
aData
)
;
#
endif
mozilla
:
:
ServoStyleSet
*
GetServoStyleSet
(
)
const
;
static
nsresult
DoInitJSClass
(
JSContext
*
cx
JS
:
:
Handle
<
JSObject
*
>
obj
const
nsString
&
aClassName
nsXBLPrototypeBinding
*
aProtoBinding
JS
:
:
MutableHandle
<
JSObject
*
>
aClassObject
bool
*
aNew
)
;
bool
AllowScripts
(
)
;
mozilla
:
:
dom
:
:
XBLChildrenElement
*
FindInsertionPointFor
(
nsIContent
*
aChild
)
;
bool
HasFilteredInsertionPoints
(
)
{
return
!
mInsertionPoints
.
IsEmpty
(
)
;
}
mozilla
:
:
dom
:
:
XBLChildrenElement
*
GetDefaultInsertionPoint
(
)
{
return
mDefaultInsertionPoint
;
}
void
ClearInsertionPoints
(
)
;
nsAnonymousContentList
*
GetAnonymousNodeList
(
)
;
nsIURI
*
GetSourceDocURI
(
)
;
protected
:
bool
mMarkedForDeath
;
bool
mUsingContentXBLScope
;
bool
mIsShadowRootBinding
;
nsXBLPrototypeBinding
*
mPrototypeBinding
;
nsCOMPtr
<
nsIContent
>
mContent
;
RefPtr
<
nsXBLBinding
>
mNextBinding
;
mozilla
:
:
dom
:
:
Element
*
mBoundElement
;
RefPtr
<
mozilla
:
:
dom
:
:
XBLChildrenElement
>
mDefaultInsertionPoint
;
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
XBLChildrenElement
>
>
mInsertionPoints
;
RefPtr
<
nsAnonymousContentList
>
mAnonymousContentList
;
mozilla
:
:
dom
:
:
XBLChildrenElement
*
FindInsertionPointForInternal
(
nsIContent
*
aChild
)
;
}
;
#
endif
