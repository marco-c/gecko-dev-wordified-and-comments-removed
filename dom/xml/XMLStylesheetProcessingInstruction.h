#
ifndef
mozilla_dom_XMLStylesheetProcessingInstruction_h
#
define
mozilla_dom_XMLStylesheetProcessingInstruction_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
ProcessingInstruction
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsStyleLinkElement
.
h
"
namespace
mozilla
{
namespace
dom
{
class
XMLStylesheetProcessingInstruction
final
:
public
ProcessingInstruction
{
public
:
XMLStylesheetProcessingInstruction
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
const
nsAString
&
aData
)
:
ProcessingInstruction
(
std
:
:
move
(
aNodeInfo
)
aData
)
{
}
XMLStylesheetProcessingInstruction
(
nsNodeInfoManager
*
aNodeInfoManager
const
nsAString
&
aData
)
:
ProcessingInstruction
(
aNodeInfoManager
-
>
GetNodeInfo
(
nsGkAtoms
:
:
processingInstructionTagName
nullptr
kNameSpaceID_None
PROCESSING_INSTRUCTION_NODE
nsGkAtoms
:
:
xml_stylesheet
)
aData
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
XMLStylesheetProcessingInstruction
ProcessingInstruction
)
virtual
void
SetNodeValueInternal
(
const
nsAString
&
aNodeValue
mozilla
:
:
ErrorResult
&
aError
)
override
;
virtual
nsresult
BindToTree
(
Document
*
aDocument
nsIContent
*
aParent
nsIContent
*
aBindingParent
)
override
;
virtual
void
UnbindFromTree
(
bool
aDeep
=
true
bool
aNullParent
=
true
)
override
;
virtual
void
OverrideBaseURI
(
nsIURI
*
aNewBaseURI
)
override
;
void
GetCharset
(
nsAString
&
aCharset
)
override
;
virtual
void
SetData
(
const
nsAString
&
aData
mozilla
:
:
ErrorResult
&
rv
)
override
{
CharacterData
:
:
SetData
(
aData
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
;
}
Unused
<
<
UpdateStyleSheetInternal
(
nullptr
nullptr
ForceUpdate
:
:
Yes
)
;
}
protected
:
virtual
~
XMLStylesheetProcessingInstruction
(
)
;
nsCOMPtr
<
nsIURI
>
mOverriddenBaseURI
;
Maybe
<
SheetInfo
>
GetStyleSheetInfo
(
)
final
;
already_AddRefed
<
CharacterData
>
CloneDataNode
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
bool
aCloneText
)
const
final
;
}
;
}
}
#
endif
