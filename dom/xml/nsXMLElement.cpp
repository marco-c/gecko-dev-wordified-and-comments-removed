#
include
"
nsXMLElement
.
h
"
#
include
"
mozilla
/
dom
/
ElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsresult
NS_NewXMLElement
(
Element
*
*
aInstancePtrResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
{
RefPtr
<
nsXMLElement
>
it
=
new
nsXMLElement
(
std
:
:
move
(
aNodeInfo
)
)
;
it
.
forget
(
aInstancePtrResult
)
;
return
NS_OK
;
}
JSObject
*
nsXMLElement
:
:
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
Element_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
nsXMLElement
:
:
UnbindFromTree
(
bool
aDeep
bool
aNullParent
)
{
CSSPseudoElementType
pseudoType
=
GetPseudoElementType
(
)
;
bool
isBefore
=
pseudoType
=
=
CSSPseudoElementType
:
:
before
;
nsAtom
*
property
=
isBefore
?
nsGkAtoms
:
:
beforePseudoProperty
:
nsGkAtoms
:
:
afterPseudoProperty
;
switch
(
pseudoType
)
{
case
CSSPseudoElementType
:
:
before
:
case
CSSPseudoElementType
:
:
after
:
{
MOZ_ASSERT
(
GetParent
(
)
)
;
MOZ_ASSERT
(
GetParent
(
)
-
>
IsElement
(
)
)
;
GetParent
(
)
-
>
DeleteProperty
(
property
)
;
break
;
}
default
:
break
;
}
Element
:
:
UnbindFromTree
(
aDeep
aNullParent
)
;
}
NS_IMPL_ELEMENT_CLONE
(
nsXMLElement
)
