#
include
"
nsXMLElement
.
h
"
#
include
"
mozilla
/
dom
/
ElementBinding
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsresult
NS_NewXMLElement
(
Element
*
*
aInstancePtrResult
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
)
{
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
nodeInfo
(
std
:
:
move
(
aNodeInfo
)
)
;
auto
*
nim
=
nodeInfo
-
>
NodeInfoManager
(
)
;
RefPtr
<
nsXMLElement
>
it
=
new
(
nim
)
nsXMLElement
(
nodeInfo
.
forget
(
)
)
;
it
.
forget
(
aInstancePtrResult
)
;
return
NS_OK
;
}
void
nsXMLElement
:
:
UnbindFromTree
(
UnbindContext
&
aContext
)
{
nsAtom
*
property
;
switch
(
GetPseudoElementType
(
)
)
{
case
PseudoStyleType
:
:
marker
:
property
=
nsGkAtoms
:
:
markerPseudoProperty
;
break
;
case
PseudoStyleType
:
:
before
:
property
=
nsGkAtoms
:
:
beforePseudoProperty
;
break
;
case
PseudoStyleType
:
:
after
:
property
=
nsGkAtoms
:
:
afterPseudoProperty
;
break
;
default
:
property
=
nullptr
;
}
if
(
property
)
{
MOZ_ASSERT
(
GetParent
(
)
)
;
MOZ_ASSERT
(
GetParent
(
)
-
>
IsElement
(
)
)
;
GetParent
(
)
-
>
RemoveProperty
(
property
)
;
}
Element
:
:
UnbindFromTree
(
aContext
)
;
}
NS_IMPL_ELEMENT_CLONE
(
nsXMLElement
)
