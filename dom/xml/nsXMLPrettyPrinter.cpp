#
include
"
nsXMLPrettyPrinter
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsIDOMDocumentXBL
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsSyncLoadService
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIDOMElement
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsXBLService
.
h
"
#
include
"
nsIScriptSecurityManager
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
txMozillaXSLTProcessor
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
nsXMLPrettyPrinter
nsIDocumentObserver
nsIMutationObserver
)
nsXMLPrettyPrinter
:
:
nsXMLPrettyPrinter
(
)
:
mDocument
(
nullptr
)
mUnhookPending
(
false
)
{
}
nsXMLPrettyPrinter
:
:
~
nsXMLPrettyPrinter
(
)
{
NS_ASSERTION
(
!
mDocument
"
we
shouldn
'
t
be
referencing
the
document
still
"
)
;
}
nsresult
nsXMLPrettyPrinter
:
:
PrettyPrint
(
nsIDocument
*
aDocument
bool
*
aDidPrettyPrint
)
{
*
aDidPrettyPrint
=
false
;
nsCOMPtr
<
nsIPresShell
>
shell
=
aDocument
-
>
GetShell
(
)
;
if
(
!
shell
)
{
return
NS_OK
;
}
nsPIDOMWindowOuter
*
internalWin
=
aDocument
-
>
GetWindow
(
)
;
nsCOMPtr
<
Element
>
frameElem
;
if
(
internalWin
)
{
frameElem
=
internalWin
-
>
GetFrameElementInternal
(
)
;
}
if
(
frameElem
)
{
nsCOMPtr
<
nsICSSDeclaration
>
computedStyle
;
if
(
nsIDocument
*
frameOwnerDoc
=
frameElem
-
>
OwnerDoc
(
)
)
{
nsPIDOMWindowOuter
*
window
=
frameOwnerDoc
-
>
GetDefaultView
(
)
;
if
(
window
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
innerWindow
=
window
-
>
GetCurrentInnerWindow
(
)
;
ErrorResult
dummy
;
computedStyle
=
innerWindow
-
>
GetComputedStyle
(
*
frameElem
EmptyString
(
)
dummy
)
;
dummy
.
SuppressException
(
)
;
}
}
if
(
computedStyle
)
{
nsAutoString
visibility
;
computedStyle
-
>
GetPropertyValue
(
NS_LITERAL_STRING
(
"
visibility
"
)
visibility
)
;
if
(
!
visibility
.
EqualsLiteral
(
"
visible
"
)
)
{
return
NS_OK
;
}
}
}
if
(
!
Preferences
:
:
GetBool
(
"
layout
.
xml
.
prettyprint
"
true
)
)
{
return
NS_OK
;
}
*
aDidPrettyPrint
=
true
;
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIURI
>
xslUri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
xslUri
)
NS_LITERAL_CSTRING
(
"
chrome
:
/
/
global
/
content
/
xml
/
XMLPrettyPrint
.
xsl
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIDOMDocument
>
xslDocument
;
rv
=
nsSyncLoadService
:
:
LoadDocument
(
xslUri
nsIContentPolicy
:
:
TYPE_XSLT
nsContentUtils
:
:
GetSystemPrincipal
(
)
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL
nullptr
true
mozilla
:
:
net
:
:
RP_Unset
getter_AddRefs
(
xslDocument
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
txMozillaXSLTProcessor
>
transformer
=
new
txMozillaXSLTProcessor
(
)
;
ErrorResult
err
;
nsCOMPtr
<
nsIDocument
>
xslDoc
=
do_QueryInterface
(
xslDocument
)
;
transformer
-
>
ImportStylesheet
(
*
xslDoc
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
RefPtr
<
DocumentFragment
>
resultFragment
=
transformer
-
>
TransformToFragment
(
*
aDocument
*
aDocument
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
nsXBLService
*
xblService
=
nsXBLService
:
:
GetInstance
(
)
;
NS_ENSURE_TRUE
(
xblService
NS_ERROR_NOT_AVAILABLE
)
;
nsCOMPtr
<
nsIURI
>
bindingUri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
bindingUri
)
NS_LITERAL_STRING
(
"
chrome
:
/
/
global
/
content
/
xml
/
XMLPrettyPrint
.
xml
#
prettyprint
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
Element
>
rootElement
=
aDocument
-
>
GetRootElement
(
)
;
NS_ENSURE_TRUE
(
rootElement
NS_ERROR_UNEXPECTED
)
;
nsCOMPtr
<
nsIPrincipal
>
sysPrincipal
;
nsContentUtils
:
:
GetSecurityManager
(
)
-
>
GetSystemPrincipal
(
getter_AddRefs
(
sysPrincipal
)
)
;
if
(
!
shell
-
>
IsDestroying
(
)
)
{
shell
-
>
DestroyFramesForAndRestyle
(
rootElement
)
;
}
RefPtr
<
nsXBLBinding
>
unused
;
bool
ignored
;
rv
=
xblService
-
>
LoadBindings
(
rootElement
bindingUri
sysPrincipal
getter_AddRefs
(
unused
)
&
ignored
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
CustomEvent
>
event
=
NS_NewDOMCustomEvent
(
rootElement
nullptr
nullptr
)
;
MOZ_ASSERT
(
event
)
;
nsCOMPtr
<
nsIWritableVariant
>
resultFragmentVariant
=
new
nsVariant
(
)
;
rv
=
resultFragmentVariant
-
>
SetAsISupports
(
ToSupports
(
resultFragment
.
get
(
)
)
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
rv
=
event
-
>
InitCustomEvent
(
NS_LITERAL_STRING
(
"
prettyprint
-
dom
-
created
"
)
false
false
resultFragmentVariant
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
event
-
>
SetTrusted
(
true
)
;
bool
dummy
;
rv
=
rootElement
-
>
DispatchEvent
(
event
&
dummy
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aDocument
-
>
AddObserver
(
this
)
;
mDocument
=
aDocument
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
void
nsXMLPrettyPrinter
:
:
MaybeUnhook
(
nsIContent
*
aContent
)
{
if
(
(
!
aContent
|
|
!
aContent
-
>
GetBindingParent
(
)
)
&
&
!
mUnhookPending
)
{
mUnhookPending
=
true
;
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsXMLPrettyPrinter
:
:
Unhook
"
this
&
nsXMLPrettyPrinter
:
:
Unhook
)
)
;
}
}
void
nsXMLPrettyPrinter
:
:
Unhook
(
)
{
mDocument
-
>
RemoveObserver
(
this
)
;
nsCOMPtr
<
Element
>
element
=
mDocument
-
>
GetDocumentElement
(
)
;
if
(
element
)
{
mDocument
-
>
BindingManager
(
)
-
>
ClearBinding
(
element
)
;
}
mDocument
=
nullptr
;
NS_RELEASE_THIS
(
)
;
}
void
nsXMLPrettyPrinter
:
:
AttributeChanged
(
nsIDocument
*
aDocument
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MaybeUnhook
(
aElement
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentAppended
(
nsIDocument
*
aDocument
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
{
MaybeUnhook
(
aContainer
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentInserted
(
nsIDocument
*
aDocument
nsIContent
*
aContainer
nsIContent
*
aChild
)
{
MaybeUnhook
(
aContainer
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentRemoved
(
nsIDocument
*
aDocument
nsIContent
*
aContainer
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
MaybeUnhook
(
aContainer
)
;
}
void
nsXMLPrettyPrinter
:
:
NodeWillBeDestroyed
(
const
nsINode
*
aNode
)
{
mDocument
=
nullptr
;
NS_RELEASE_THIS
(
)
;
}
nsresult
NS_NewXMLPrettyPrinter
(
nsXMLPrettyPrinter
*
*
aPrinter
)
{
*
aPrinter
=
new
nsXMLPrettyPrinter
;
NS_ADDREF
(
*
aPrinter
)
;
return
NS_OK
;
}
