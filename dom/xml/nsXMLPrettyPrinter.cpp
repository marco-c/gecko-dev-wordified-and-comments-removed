#
include
"
nsXMLPrettyPrinter
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsSyncLoadService
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
mozilla
/
dom
/
DocumentFragment
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
dom
/
txMozillaXSLTProcessor
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
nsXMLPrettyPrinter
nsIDocumentObserver
nsIMutationObserver
)
nsXMLPrettyPrinter
:
:
nsXMLPrettyPrinter
(
)
:
mDocument
(
nullptr
)
mUnhookPending
(
false
)
{
}
nsXMLPrettyPrinter
:
:
~
nsXMLPrettyPrinter
(
)
{
NS_ASSERTION
(
!
mDocument
"
we
shouldn
'
t
be
referencing
the
document
still
"
)
;
}
nsresult
nsXMLPrettyPrinter
:
:
PrettyPrint
(
Document
*
aDocument
bool
*
aDidPrettyPrint
)
{
*
aDidPrettyPrint
=
false
;
if
(
!
Preferences
:
:
GetBool
(
"
layout
.
xml
.
prettyprint
"
true
)
)
{
return
NS_OK
;
}
RefPtr
<
Element
>
rootElement
=
aDocument
-
>
GetRootElement
(
)
;
NS_ENSURE_TRUE
(
rootElement
NS_ERROR_UNEXPECTED
)
;
if
(
rootElement
-
>
CanAttachShadowDOM
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
We
shouldn
'
t
be
getting
this
root
element
"
)
;
return
NS_ERROR_UNEXPECTED
;
}
*
aDidPrettyPrint
=
true
;
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIURI
>
xslUri
;
rv
=
NS_NewURI
(
getter_AddRefs
(
xslUri
)
"
chrome
:
/
/
global
/
content
/
xml
/
XMLPrettyPrint
.
xsl
"
_ns
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
Document
>
xslDocument
;
rv
=
nsSyncLoadService
:
:
LoadDocument
(
xslUri
nsIContentPolicy
:
:
TYPE_XSLT
nsContentUtils
:
:
GetSystemPrincipal
(
)
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_SEC_CONTEXT_IS_NULL
nullptr
aDocument
-
>
CookieJarSettings
(
)
true
ReferrerPolicy
:
:
_empty
getter_AddRefs
(
xslDocument
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
RefPtr
<
txMozillaXSLTProcessor
>
transformer
=
new
txMozillaXSLTProcessor
(
)
;
ErrorResult
err
;
transformer
-
>
ImportStylesheet
(
*
xslDocument
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
RefPtr
<
DocumentFragment
>
resultFragment
=
transformer
-
>
TransformToFragment
(
*
aDocument
*
aDocument
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
rootElement
-
>
AttachAndSetUAShadowRoot
(
Element
:
:
NotifyUAWidgetSetup
:
:
No
)
;
RefPtr
<
ShadowRoot
>
shadowRoot
=
rootElement
-
>
GetShadowRoot
(
)
;
MOZ_RELEASE_ASSERT
(
shadowRoot
&
&
shadowRoot
-
>
IsUAWidget
(
)
"
There
should
be
a
UA
Shadow
Root
here
.
"
)
;
shadowRoot
-
>
AppendChild
(
*
resultFragment
err
)
;
if
(
NS_WARN_IF
(
err
.
Failed
(
)
)
)
{
return
err
.
StealNSResult
(
)
;
}
aDocument
-
>
AddObserver
(
this
)
;
mDocument
=
aDocument
;
NS_ADDREF_THIS
(
)
;
return
NS_OK
;
}
void
nsXMLPrettyPrinter
:
:
MaybeUnhook
(
nsIContent
*
aContent
)
{
bool
isGeneratedContent
=
aContent
&
&
(
aContent
-
>
IsInNativeAnonymousSubtree
(
)
|
|
aContent
-
>
IsInShadowTree
(
)
)
;
if
(
!
isGeneratedContent
&
&
!
mUnhookPending
)
{
mUnhookPending
=
true
;
nsContentUtils
:
:
AddScriptRunner
(
NewRunnableMethod
(
"
nsXMLPrettyPrinter
:
:
Unhook
"
this
&
nsXMLPrettyPrinter
:
:
Unhook
)
)
;
}
}
void
nsXMLPrettyPrinter
:
:
Unhook
(
)
{
mDocument
-
>
RemoveObserver
(
this
)
;
nsCOMPtr
<
Element
>
element
=
mDocument
-
>
GetDocumentElement
(
)
;
if
(
element
)
{
element
-
>
UnattachShadow
(
)
;
}
mDocument
=
nullptr
;
NS_RELEASE_THIS
(
)
;
}
void
nsXMLPrettyPrinter
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MaybeUnhook
(
aElement
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
MaybeUnhook
(
aFirstNewContent
-
>
GetParent
(
)
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
MaybeUnhook
(
aChild
-
>
GetParent
(
)
)
;
}
void
nsXMLPrettyPrinter
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
MaybeUnhook
(
aChild
-
>
GetParent
(
)
)
;
}
void
nsXMLPrettyPrinter
:
:
NodeWillBeDestroyed
(
const
nsINode
*
aNode
)
{
mDocument
=
nullptr
;
NS_RELEASE_THIS
(
)
;
}
nsresult
NS_NewXMLPrettyPrinter
(
nsXMLPrettyPrinter
*
*
aPrinter
)
{
*
aPrinter
=
new
nsXMLPrettyPrinter
;
NS_ADDREF
(
*
aPrinter
)
;
return
NS_OK
;
}
