#
ifndef
mozilla_dom_ProcessingInstruction_h
#
define
mozilla_dom_ProcessingInstruction_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIDOMCharacterData
.
h
"
#
include
"
nsGenericDOMDataNode
.
h
"
#
include
"
nsAString
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ProcessingInstruction
:
public
nsGenericDOMDataNode
public
nsIDOMCharacterData
{
public
:
ProcessingInstruction
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
const
nsAString
&
aData
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_FORWARD_NSIDOMCHARACTERDATA
(
nsGenericDOMDataNode
:
:
)
using
nsGenericDOMDataNode
:
:
SetData
;
virtual
bool
IsNodeOfType
(
uint32_t
aFlags
)
const
override
;
virtual
nsGenericDOMDataNode
*
CloneDataNode
(
mozilla
:
:
dom
:
:
NodeInfo
*
aNodeInfo
bool
aCloneText
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
int32_t
aIndent
)
const
override
;
virtual
void
DumpContent
(
FILE
*
out
int32_t
aIndent
bool
aDumpAll
)
const
override
;
#
endif
virtual
nsIDOMNode
*
AsDOMNode
(
)
override
{
return
this
;
}
void
GetTarget
(
nsAString
&
aTarget
)
{
aTarget
=
NodeName
(
)
;
}
NS_IMPL_FROMCONTENT_HELPER
(
ProcessingInstruction
IsProcessingInstruction
(
)
)
protected
:
virtual
~
ProcessingInstruction
(
)
;
bool
GetAttrValue
(
nsAtom
*
aName
nsAString
&
aValue
)
;
virtual
JSObject
*
WrapNode
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
}
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
ProcessingInstruction
>
NS_NewXMLProcessingInstruction
(
nsNodeInfoManager
*
aNodeInfoManager
const
nsAString
&
aTarget
const
nsAString
&
aData
)
;
#
endif
