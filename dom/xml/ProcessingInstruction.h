#
ifndef
mozilla_dom_ProcessingInstruction_h
#
define
mozilla_dom_ProcessingInstruction_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
CharacterData
.
h
"
#
include
"
nsAString
.
h
"
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
class
StyleSheet
;
namespace
dom
{
class
ProcessingInstruction
:
public
CharacterData
{
public
:
ProcessingInstruction
(
already_AddRefed
<
mozilla
:
:
dom
:
:
NodeInfo
>
&
&
aNodeInfo
const
nsAString
&
aData
)
;
virtual
already_AddRefed
<
CharacterData
>
CloneDataNode
(
dom
:
:
NodeInfo
*
aNodeInfo
bool
aCloneText
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
int32_t
aIndent
)
const
override
;
virtual
void
DumpContent
(
FILE
*
out
int32_t
aIndent
bool
aDumpAll
)
const
override
;
#
endif
void
GetTarget
(
nsAString
&
aTarget
)
{
aTarget
=
NodeName
(
)
;
}
StyleSheet
*
GetSheetForBindings
(
)
const
;
NS_IMPL_FROMNODE_HELPER
(
ProcessingInstruction
IsProcessingInstruction
(
)
)
protected
:
virtual
~
ProcessingInstruction
(
)
;
bool
GetAttrValue
(
nsAtom
*
aName
nsAString
&
aValue
)
;
JSObject
*
WrapNode
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
}
;
}
}
already_AddRefed
<
mozilla
:
:
dom
:
:
ProcessingInstruction
>
NS_NewXMLProcessingInstruction
(
nsNodeInfoManager
*
aNodeInfoManager
const
nsAString
&
aTarget
const
nsAString
&
aData
)
;
#
endif
