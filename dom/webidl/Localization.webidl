dictionary
L10nIdArgs
{
UTF8String
?
id
=
null
;
L10nArgs
?
args
=
null
;
}
;
typedef
(
UTF8String
or
L10nIdArgs
)
L10nKey
;
dictionary
AttributeNameValue
{
required
UTF8String
name
;
required
UTF8String
value
;
}
;
dictionary
L10nMessage
{
UTF8String
?
value
=
null
;
sequence
<
AttributeNameValue
>
?
attributes
=
null
;
}
;
callback
GenerateBundles
=
Promise
<
any
>
(
sequence
<
DOMString
>
aResourceIds
)
;
callback
GenerateBundlesSync
=
any
(
sequence
<
DOMString
>
aResourceIds
)
;
dictionary
BundleGenerator
{
GenerateBundles
generateBundles
;
GenerateBundlesSync
generateBundlesSync
;
}
;
[
Func
=
"
IsChromeOrUAWidget
"
Exposed
=
Window
]
interface
Localization
{
[
Throws
]
constructor
(
sequence
<
UTF8String
>
aResourceIds
optional
boolean
aSync
=
false
optional
L10nRegistry
aRegistry
optional
sequence
<
UTF8String
>
aLocales
)
;
void
addResourceIds
(
sequence
<
DOMString
>
aResourceIds
)
;
unsigned
long
removeResourceIds
(
sequence
<
DOMString
>
aResourceIds
)
;
[
NewObject
]
Promise
<
UTF8String
?
>
formatValue
(
UTF8String
aId
optional
L10nArgs
aArgs
)
;
[
NewObject
]
Promise
<
sequence
<
UTF8String
?
>
>
formatValues
(
sequence
<
L10nKey
>
aKeys
)
;
[
NewObject
]
Promise
<
sequence
<
L10nMessage
?
>
>
formatMessages
(
sequence
<
L10nKey
>
aKeys
)
;
void
setAsync
(
)
;
[
NewObject
Throws
]
UTF8String
?
formatValueSync
(
UTF8String
aId
optional
L10nArgs
aArgs
)
;
[
NewObject
Throws
]
sequence
<
UTF8String
?
>
formatValuesSync
(
sequence
<
L10nKey
>
aKeys
)
;
[
NewObject
Throws
]
sequence
<
L10nMessage
?
>
formatMessagesSync
(
sequence
<
L10nKey
>
aKeys
)
;
}
;
[
GenerateInitFromJSON
GenerateConversionToJS
]
dictionary
L10nArgsHelperDict
{
required
L10nArgs
args
;
}
;
