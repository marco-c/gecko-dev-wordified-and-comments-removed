#
include
"
mozilla
/
dom
/
MIDIAccess
.
h
"
#
include
"
mozilla
/
dom
/
MIDIAccessManager
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPort
.
h
"
#
include
"
mozilla
/
dom
/
MIDIAccessBinding
.
h
"
#
include
"
mozilla
/
dom
/
MIDIConnectionEvent
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOptionsBinding
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOutputMapBinding
.
h
"
#
include
"
mozilla
/
dom
/
MIDIInputMapBinding
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOutputMap
.
h
"
#
include
"
mozilla
/
dom
/
MIDIInputMap
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOutput
.
h
"
#
include
"
mozilla
/
dom
/
MIDIInput
.
h
"
#
include
"
mozilla
/
dom
/
MIDITypes
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsContentPermissionHelper
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
MIDIAccess
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
MIDIAccess
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
MIDIAccess
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mInputMap
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mOutputMap
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mAccessPromise
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
MIDIAccess
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mInputMap
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mOutputMap
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mAccessPromise
)
tmp
-
>
Shutdown
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MIDIAccess
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
MIDIAccess
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
MIDIAccess
DOMEventTargetHelper
)
MIDIAccess
:
:
MIDIAccess
(
nsPIDOMWindowInner
*
aWindow
bool
aSysexEnabled
Promise
*
aAccessPromise
)
:
DOMEventTargetHelper
(
aWindow
)
mInputMap
(
new
MIDIInputMap
(
aWindow
)
)
mOutputMap
(
new
MIDIOutputMap
(
aWindow
)
)
mSysexEnabled
(
aSysexEnabled
)
mAccessPromise
(
aAccessPromise
)
mHasShutdown
(
false
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aAccessPromise
)
;
}
MIDIAccess
:
:
~
MIDIAccess
(
)
{
Shutdown
(
)
;
}
void
MIDIAccess
:
:
Shutdown
(
)
{
if
(
mHasShutdown
)
{
return
;
}
mDestructionObservers
.
Broadcast
(
void_t
(
)
)
;
if
(
MIDIAccessManager
:
:
IsRunning
(
)
)
{
MIDIAccessManager
:
:
Get
(
)
-
>
RemoveObserver
(
this
)
;
}
mHasShutdown
=
true
;
}
void
MIDIAccess
:
:
FireConnectionEvent
(
MIDIPort
*
aPort
)
{
MOZ_ASSERT
(
aPort
)
;
MIDIConnectionEventInit
init
;
init
.
mPort
=
aPort
;
nsAutoString
id
;
aPort
-
>
GetId
(
id
)
;
ErrorResult
rv
;
if
(
aPort
-
>
State
(
)
=
=
MIDIPortDeviceState
:
:
Disconnected
)
{
if
(
aPort
-
>
Type
(
)
=
=
MIDIPortType
:
:
Input
&
&
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mInputMap
id
rv
)
)
{
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Delete
(
mInputMap
id
rv
)
;
}
else
if
(
aPort
-
>
Type
(
)
=
=
MIDIPortType
:
:
Output
&
&
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mOutputMap
id
rv
)
)
{
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Delete
(
mOutputMap
id
rv
)
;
}
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
;
}
}
else
{
if
(
aPort
-
>
Type
(
)
=
=
MIDIPortType
:
:
Input
&
&
!
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mInputMap
id
rv
)
)
{
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
;
}
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Set
(
mInputMap
id
*
(
static_cast
<
MIDIInput
*
>
(
aPort
)
)
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
;
}
}
else
if
(
aPort
-
>
Type
(
)
=
=
MIDIPortType
:
:
Output
&
&
!
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mOutputMap
id
rv
)
)
{
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
;
}
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Set
(
mOutputMap
id
*
(
static_cast
<
MIDIOutput
*
>
(
aPort
)
)
rv
)
;
if
(
NS_WARN_IF
(
rv
.
Failed
(
)
)
)
{
return
;
}
}
}
RefPtr
<
MIDIConnectionEvent
>
event
=
MIDIConnectionEvent
:
:
Constructor
(
this
u
"
statechange
"
_ns
init
)
;
DispatchTrustedEvent
(
event
)
;
}
void
MIDIAccess
:
:
MaybeCreateMIDIPort
(
const
MIDIPortInfo
&
aInfo
ErrorResult
&
aRv
)
{
nsAutoString
id
(
aInfo
.
id
(
)
)
;
MIDIPortType
type
=
static_cast
<
MIDIPortType
>
(
aInfo
.
type
(
)
)
;
RefPtr
<
MIDIPort
>
port
;
if
(
type
=
=
MIDIPortType
:
:
Input
)
{
bool
hasPort
=
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mInputMap
id
aRv
)
;
if
(
hasPort
|
|
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
port
=
MIDIInput
:
:
Create
(
GetOwner
(
)
this
aInfo
mSysexEnabled
)
;
if
(
NS_WARN_IF
(
!
port
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
MIDIInputMap_Binding
:
:
MaplikeHelpers
:
:
Set
(
mInputMap
id
*
(
static_cast
<
MIDIInput
*
>
(
port
.
get
(
)
)
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
}
else
if
(
type
=
=
MIDIPortType
:
:
Output
)
{
bool
hasPort
=
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Has
(
mOutputMap
id
aRv
)
;
if
(
hasPort
|
|
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
port
=
MIDIOutput
:
:
Create
(
GetOwner
(
)
this
aInfo
mSysexEnabled
)
;
if
(
NS_WARN_IF
(
!
port
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
;
}
MIDIOutputMap_Binding
:
:
MaplikeHelpers
:
:
Set
(
mOutputMap
id
*
(
static_cast
<
MIDIOutput
*
>
(
port
.
get
(
)
)
)
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
;
}
}
else
{
MOZ_CRASH
(
"
We
shouldn
'
t
be
here
!
"
)
;
}
mDestructionObservers
.
AddObserver
(
port
)
;
if
(
!
mAccessPromise
)
{
FireConnectionEvent
(
port
)
;
}
}
void
MIDIAccess
:
:
Notify
(
const
MIDIPortList
&
aEvent
)
{
for
(
const
auto
&
port
:
aEvent
.
ports
(
)
)
{
ErrorResult
rv
;
MaybeCreateMIDIPort
(
port
rv
)
;
if
(
rv
.
Failed
(
)
)
{
if
(
!
mAccessPromise
)
{
return
;
}
mAccessPromise
-
>
MaybeReject
(
std
:
:
move
(
rv
)
)
;
mAccessPromise
=
nullptr
;
}
}
if
(
!
mAccessPromise
)
{
return
;
}
mAccessPromise
-
>
MaybeResolve
(
this
)
;
mAccessPromise
=
nullptr
;
}
JSObject
*
MIDIAccess
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MIDIAccess_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
MIDIAccess
:
:
RemovePortListener
(
MIDIAccessDestructionObserver
*
aObs
)
{
mDestructionObservers
.
RemoveObserver
(
aObs
)
;
}
}
