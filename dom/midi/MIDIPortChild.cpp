#
include
"
mozilla
/
dom
/
MIDIPortChild
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPort
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPortInterface
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
MIDIPortChild
:
:
MIDIPortChild
(
const
MIDIPortInfo
&
aPortInfo
bool
aSysexEnabled
MIDIPort
*
aPort
)
:
MIDIPortInterface
(
aPortInfo
aSysexEnabled
)
mDOMPort
(
aPort
)
mActorWasAlive
(
false
)
{
}
void
MIDIPortChild
:
:
Teardown
(
)
{
if
(
mDOMPort
)
{
mDOMPort
-
>
UnsetIPCPort
(
)
;
MOZ_ASSERT
(
!
mDOMPort
)
;
}
MIDIPortInterface
:
:
Shutdown
(
)
;
}
void
MIDIPortChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
MIDIPortChild
:
:
RecvReceive
(
nsTArray
<
MIDIMessage
>
&
&
aMsgs
)
{
if
(
mDOMPort
)
{
mDOMPort
-
>
Receive
(
aMsgs
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
MIDIPortChild
:
:
RecvUpdateStatus
(
const
uint32_t
&
aDeviceState
const
uint32_t
&
aConnectionState
)
{
MOZ_ASSERT
(
mDeviceState
=
=
MIDIPortDeviceState
:
:
Connected
|
|
(
mConnectionState
=
=
MIDIPortConnectionState
:
:
Closed
|
|
mConnectionState
=
=
MIDIPortConnectionState
:
:
Pending
)
)
;
mDeviceState
=
static_cast
<
MIDIPortDeviceState
>
(
aDeviceState
)
;
mConnectionState
=
static_cast
<
MIDIPortConnectionState
>
(
aConnectionState
)
;
if
(
mDOMPort
)
{
mDOMPort
-
>
FireStateChangeEvent
(
)
;
}
return
IPC_OK
(
)
;
}
void
MIDIPortChild
:
:
SetActorAlive
(
)
{
MOZ_ASSERT
(
!
mActorWasAlive
)
;
mActorWasAlive
=
true
;
AddRef
(
)
;
}
nsresult
MIDIPortChild
:
:
GenerateStableId
(
const
nsACString
&
aOrigin
)
{
const
size_t
kIdLength
=
64
;
mStableId
.
SetCapacity
(
kIdLength
)
;
mStableId
.
Append
(
Name
(
)
)
;
mStableId
.
Append
(
Manufacturer
(
)
)
;
mStableId
.
Append
(
Version
(
)
)
;
nsContentUtils
:
:
AnonymizeId
(
mStableId
aOrigin
nsContentUtils
:
:
OriginFormat
:
:
Plain
)
;
return
NS_OK
;
}
