#
include
"
mozilla
/
dom
/
MIDIOutput
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPortChild
.
h
"
#
include
"
mozilla
/
dom
/
MIDITypes
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOutputBinding
.
h
"
#
include
"
mozilla
/
dom
/
MIDIUtils
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
MIDIOutput
:
:
MIDIOutput
(
nsPIDOMWindowInner
*
aWindow
MIDIAccess
*
aMIDIAccessParent
)
:
MIDIPort
(
aWindow
aMIDIAccessParent
)
{
}
MIDIOutput
*
MIDIOutput
:
:
Create
(
nsPIDOMWindowInner
*
aWindow
MIDIAccess
*
aMIDIAccessParent
const
MIDIPortInfo
&
aPortInfo
const
bool
aSysexEnabled
)
{
MOZ_ASSERT
(
static_cast
<
MIDIPortType
>
(
aPortInfo
.
type
(
)
)
=
=
MIDIPortType
:
:
Output
)
;
auto
*
port
=
new
MIDIOutput
(
aWindow
aMIDIAccessParent
)
;
if
(
NS_WARN_IF
(
!
port
-
>
Initialize
(
aPortInfo
aSysexEnabled
)
)
)
{
return
nullptr
;
}
return
port
;
}
JSObject
*
MIDIOutput
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MIDIOutput_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
MIDIOutput
:
:
Send
(
const
Sequence
<
uint8_t
>
&
aData
const
Optional
<
double
>
&
aTimestamp
ErrorResult
&
aRv
)
{
if
(
mPort
-
>
DeviceState
(
)
=
=
MIDIPortDeviceState
:
:
Disconnected
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
TimeStamp
timestamp
;
if
(
aTimestamp
.
WasPassed
(
)
&
&
aTimestamp
.
Value
(
)
!
=
0
)
{
nsCOMPtr
<
Document
>
doc
=
GetOwner
(
)
-
>
GetDoc
(
)
;
if
(
!
doc
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_STATE_ERR
)
;
return
;
}
TimeDuration
ts_diff
=
TimeDuration
:
:
FromMilliseconds
(
aTimestamp
.
Value
(
)
)
;
timestamp
=
GetOwner
(
)
-
>
GetPerformance
(
)
-
>
GetDOMTiming
(
)
-
>
GetNavigationStartTimeStamp
(
)
+
ts_diff
;
}
else
{
timestamp
=
TimeStamp
:
:
Now
(
)
;
}
nsTArray
<
MIDIMessage
>
msgArray
;
MIDIUtils
:
:
ParseMessages
(
aData
timestamp
msgArray
)
;
if
(
msgArray
.
IsEmpty
(
)
)
{
aRv
.
ThrowTypeError
(
"
Empty
message
array
"
)
;
return
;
}
if
(
!
SysexEnabled
(
)
)
{
for
(
auto
&
msg
:
msgArray
)
{
if
(
MIDIUtils
:
:
IsSysexMessage
(
msg
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_ACCESS_ERR
)
;
return
;
}
}
}
mPort
-
>
SendSend
(
msgArray
)
;
}
void
MIDIOutput
:
:
Clear
(
)
{
if
(
mPort
-
>
ConnectionState
(
)
=
=
MIDIPortConnectionState
:
:
Closed
)
{
return
;
}
mPort
-
>
SendClear
(
)
;
}
