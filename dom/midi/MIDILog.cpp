#
include
"
MIDILog
.
h
"
#
include
"
mozilla
/
dom
/
MIDITypes
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPortBinding
.
h
"
mozilla
:
:
LazyLogModule
gWebMIDILog
(
"
WebMIDI
"
)
;
void
LogMIDIMessage
(
nsTArray
<
mozilla
:
:
dom
:
:
MIDIMessage
>
&
aMessages
const
nsAString
&
aPortId
mozilla
:
:
dom
:
:
MIDIPortType
aDirection
)
{
if
(
MOZ_LOG_TEST
(
gWebMIDILog
mozilla
:
:
LogLevel
:
:
Debug
)
)
{
if
(
MOZ_LOG_TEST
(
gWebMIDILog
mozilla
:
:
LogLevel
:
:
Verbose
)
)
{
for
(
auto
&
msg
:
aMessages
)
{
uint32_t
byteCount
=
msg
.
data
(
)
.
Length
(
)
;
nsAutoCString
logMessage
;
logMessage
.
AppendPrintf
(
"
%
s
%
s
length
=
%
u
"
NS_ConvertUTF16toUTF8
(
aPortId
)
.
get
(
)
aDirection
=
=
mozilla
:
:
dom
:
:
MIDIPortType
:
:
Input
?
"
-
>
"
:
"
<
-
"
byteCount
)
;
if
(
byteCount
<
=
3
)
{
logMessage
.
AppendPrintf
(
"
[
"
)
;
for
(
uint32_t
i
=
0
;
i
<
byteCount
-
1
;
i
+
+
)
{
logMessage
.
AppendPrintf
(
"
%
x
"
msg
.
data
(
)
[
i
]
)
;
}
logMessage
.
AppendPrintf
(
"
%
x
]
"
msg
.
data
(
)
[
byteCount
-
1
]
)
;
}
else
{
for
(
uint32_t
i
=
0
;
i
<
byteCount
;
i
+
+
)
{
if
(
!
(
i
%
8
)
)
{
logMessage
.
AppendPrintf
(
"
\
n
%
08u
:
\
t
"
i
)
;
}
logMessage
.
AppendPrintf
(
"
%
x
"
msg
.
data
(
)
[
i
]
)
;
}
}
MOZ_LOG
(
gWebMIDILog
mozilla
:
:
LogLevel
:
:
Verbose
(
"
%
s
"
logMessage
.
get
(
)
)
)
;
}
return
;
}
for
(
auto
&
msg
:
aMessages
)
{
LOG
(
"
%
s
%
s
%
zu
bytes
"
NS_ConvertUTF16toUTF8
(
aPortId
)
.
get
(
)
aDirection
=
=
mozilla
:
:
dom
:
:
MIDIPortType
:
:
Input
?
"
-
>
"
:
"
<
-
"
msg
.
data
(
)
.
Length
(
)
)
;
}
}
}
