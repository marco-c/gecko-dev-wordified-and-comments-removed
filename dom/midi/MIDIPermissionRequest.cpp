#
include
"
mozilla
/
dom
/
MIDIPermissionRequest
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
MIDIAccessManager
.
h
"
#
include
"
mozilla
/
dom
/
MIDIOptionsBinding
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
RandomNum
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
:
:
dom
;
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
MIDIPermissionRequest
ContentPermissionRequestBase
mPromise
)
NS_IMPL_QUERY_INTERFACE_CYCLE_COLLECTION_INHERITED
(
MIDIPermissionRequest
ContentPermissionRequestBase
nsIRunnable
)
NS_IMPL_ADDREF_INHERITED
(
MIDIPermissionRequest
ContentPermissionRequestBase
)
NS_IMPL_RELEASE_INHERITED
(
MIDIPermissionRequest
ContentPermissionRequestBase
)
MIDIPermissionRequest
:
:
MIDIPermissionRequest
(
nsPIDOMWindowInner
*
aWindow
Promise
*
aPromise
const
MIDIOptions
&
aOptions
)
:
ContentPermissionRequestBase
(
aWindow
-
>
GetDoc
(
)
-
>
NodePrincipal
(
)
aWindow
"
"
_ns
"
midi
"
_ns
)
mPromise
(
aPromise
)
mNeedsSysex
(
aOptions
.
mSysex
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aPromise
"
aPromise
should
not
be
null
!
"
)
;
MOZ_ASSERT
(
aWindow
-
>
GetDoc
(
)
)
;
mPrincipal
=
aWindow
-
>
GetDoc
(
)
-
>
NodePrincipal
(
)
;
MOZ_ASSERT
(
mPrincipal
)
;
}
NS_IMETHODIMP
MIDIPermissionRequest
:
:
GetTypes
(
nsIArray
*
*
aTypes
)
{
NS_ENSURE_ARG_POINTER
(
aTypes
)
;
nsTArray
<
nsString
>
options
;
if
(
mNeedsSysex
|
|
!
StaticPrefs
:
:
dom_sitepermsaddon_provider_enabled
(
)
)
{
options
.
AppendElement
(
u
"
sysex
"
_ns
)
;
}
return
nsContentPermissionUtils
:
:
CreatePermissionArray
(
mType
options
aTypes
)
;
}
NS_IMETHODIMP
MIDIPermissionRequest
:
:
Cancel
(
)
{
mCancelTimer
=
nullptr
;
if
(
StaticPrefs
:
:
dom_sitepermsaddon_provider_enabled
(
)
)
{
mPromise
-
>
MaybeRejectWithSecurityError
(
"
WebMIDI
requires
a
site
permission
add
-
on
to
activate
"
)
;
}
else
{
mPromise
-
>
MaybeRejectWithSecurityError
(
"
WebMIDI
requires
a
site
permission
add
-
on
to
activate
see
"
"
https
:
/
/
extensionworkshop
.
com
/
documentation
/
publish
/
"
"
site
-
permission
-
add
-
on
/
for
details
.
"
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
MIDIPermissionRequest
:
:
Allow
(
JS
:
:
Handle
<
JS
:
:
Value
>
aChoices
)
{
MOZ_ASSERT
(
aChoices
.
isUndefined
(
)
)
;
MIDIAccessManager
*
mgr
=
MIDIAccessManager
:
:
Get
(
)
;
mgr
-
>
CreateMIDIAccess
(
mWindow
mNeedsSysex
mPromise
)
;
return
NS_OK
;
}
NS_IMETHODIMP
MIDIPermissionRequest
:
:
Run
(
)
{
if
(
Preferences
:
:
GetBool
(
"
midi
.
prompt
.
testing
"
false
)
)
{
bool
allow
=
Preferences
:
:
GetBool
(
"
media
.
navigator
.
permission
.
disabled
"
false
)
;
if
(
allow
)
{
Allow
(
JS
:
:
UndefinedHandleValue
)
;
}
else
{
Cancel
(
)
;
}
return
NS_OK
;
}
nsCString
permName
=
"
midi
"
_ns
;
if
(
mNeedsSysex
|
|
!
StaticPrefs
:
:
dom_sitepermsaddon_provider_enabled
(
)
)
{
permName
.
Append
(
"
-
sysex
"
)
;
}
if
(
nsContentUtils
:
:
IsSitePermAllow
(
mPrincipal
permName
)
)
{
Allow
(
JS
:
:
UndefinedHandleValue
)
;
return
NS_OK
;
}
if
(
nsContentUtils
:
:
IsSitePermDeny
(
mPrincipal
permName
)
)
{
Cancel
(
)
;
return
NS_OK
;
}
if
(
StaticPrefs
:
:
dom_webmidi_gated
(
)
&
&
!
StaticPrefs
:
:
dom_sitepermsaddon_provider_enabled
(
)
&
&
!
nsContentUtils
:
:
HasSitePerm
(
mPrincipal
permName
)
&
&
!
mPrincipal
-
>
GetIsLoopbackHost
(
)
)
{
Cancel
(
)
;
return
NS_OK
;
}
if
(
StaticPrefs
:
:
dom_sitepermsaddon_provider_enabled
(
)
&
&
nsContentUtils
:
:
IsSitePermDeny
(
mPrincipal
"
install
"
_ns
)
&
&
!
mPrincipal
-
>
GetIsLoopbackHost
(
)
)
{
Cancel
(
)
;
return
NS_OK
;
}
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mozilla
:
:
ipc
:
:
PBackgroundChild
*
actor
=
mozilla
:
:
ipc
:
:
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actor
)
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
MIDIPermissionRequest
>
self
=
this
;
actor
-
>
SendHasMIDIDevice
(
[
=
]
(
bool
aHasDevices
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
aHasDevices
)
{
self
-
>
DoPrompt
(
)
;
}
else
{
uint32_t
baseDelayMS
=
3
*
1000
;
uint32_t
randomDelayMS
=
RandomUint64OrDie
(
)
%
(
10
*
1000
)
;
auto
delay
=
TimeDuration
:
:
FromMilliseconds
(
baseDelayMS
+
randomDelayMS
)
;
NS_NewTimerWithCallback
(
getter_AddRefs
(
self
-
>
mCancelTimer
)
[
=
]
(
auto
)
{
self
-
>
Cancel
(
)
;
}
delay
nsITimer
:
:
TYPE_ONE_SHOT
__func__
)
;
}
}
[
=
]
(
auto
)
{
self
-
>
Cancel
(
)
;
}
)
;
return
NS_OK
;
}
nsresult
MIDIPermissionRequest
:
:
DoPrompt
(
)
{
if
(
NS_FAILED
(
nsContentPermissionUtils
:
:
AskPermission
(
this
mWindow
)
)
)
{
Cancel
(
)
;
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
