#
include
"
MIDIMessageQueue
.
h
"
namespace
mozilla
{
namespace
dom
{
MIDIMessageQueue
:
:
MIDIMessageQueue
(
)
:
mMutex
(
"
MIDIMessageQueue
:
:
mMutex
"
)
{
}
class
MIDIMessageTimestampComparator
{
public
:
bool
Equals
(
const
MIDIMessage
&
a
const
MIDIMessage
&
b
)
const
{
return
a
.
timestamp
(
)
=
=
b
.
timestamp
(
)
;
}
bool
LessThan
(
const
MIDIMessage
&
a
const
MIDIMessage
&
b
)
const
{
return
a
.
timestamp
(
)
<
b
.
timestamp
(
)
;
}
}
;
void
MIDIMessageQueue
:
:
Add
(
nsTArray
<
MIDIMessage
>
&
aMsg
)
{
MutexAutoLock
lock
(
mMutex
)
;
for
(
auto
msg
:
aMsg
)
{
mMessageQueue
.
InsertElementSorted
(
msg
MIDIMessageTimestampComparator
(
)
)
;
}
}
void
MIDIMessageQueue
:
:
GetMessagesBefore
(
TimeStamp
aTimestamp
nsTArray
<
MIDIMessage
>
&
aMsgQueue
)
{
MutexAutoLock
lock
(
mMutex
)
;
int
i
=
0
;
for
(
auto
msg
:
mMessageQueue
)
{
if
(
aTimestamp
<
msg
.
timestamp
(
)
)
{
break
;
}
aMsgQueue
.
AppendElement
(
msg
)
;
i
+
+
;
}
if
(
i
>
0
)
{
mMessageQueue
.
RemoveElementsAt
(
0
i
)
;
}
}
void
MIDIMessageQueue
:
:
GetMessages
(
nsTArray
<
MIDIMessage
>
&
aMsgQueue
)
{
MutexAutoLock
lock
(
mMutex
)
;
aMsgQueue
.
AppendElements
(
mMessageQueue
)
;
mMessageQueue
.
Clear
(
)
;
}
void
MIDIMessageQueue
:
:
Clear
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mMessageQueue
.
Clear
(
)
;
}
void
MIDIMessageQueue
:
:
ClearAfterNow
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
int
i
=
0
;
for
(
auto
msg
:
mMessageQueue
)
{
if
(
now
<
msg
.
timestamp
(
)
)
{
break
;
}
i
+
+
;
}
if
(
i
>
0
)
{
mMessageQueue
.
RemoveElementsAt
(
0
i
)
;
}
}
}
}
