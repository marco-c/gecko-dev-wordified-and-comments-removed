#
ifndef
mozilla_dom_MIDIPort_h
#
define
mozilla_dom_MIDIPort_h
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Observer
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
MIDIAccess
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPortInterface
.
h
"
struct
JSContext
;
namespace
mozilla
:
:
dom
{
class
Promise
;
class
MIDIPortInfo
;
class
MIDIAccess
;
class
MIDIPortChangeEvent
;
class
MIDIPortChild
;
class
MIDIMessage
;
class
MIDIPort
:
public
DOMEventTargetHelper
public
MIDIAccessDestructionObserver
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
MIDIPort
DOMEventTargetHelper
)
protected
:
MIDIPort
(
nsPIDOMWindowInner
*
aWindow
MIDIAccess
*
aMIDIAccessParent
)
;
bool
Initialize
(
const
MIDIPortInfo
&
aPortInfo
bool
aSysexEnabled
)
;
virtual
~
MIDIPort
(
)
;
public
:
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
GetOwner
(
)
;
}
void
GetId
(
nsString
&
aRetVal
)
const
;
void
GetManufacturer
(
nsString
&
aRetVal
)
const
;
void
GetName
(
nsString
&
aRetVal
)
const
;
void
GetVersion
(
nsString
&
aRetVal
)
const
;
MIDIPortType
Type
(
)
const
;
MIDIPortConnectionState
Connection
(
)
const
;
MIDIPortDeviceState
State
(
)
const
;
bool
SysexEnabled
(
)
const
;
already_AddRefed
<
Promise
>
Open
(
)
;
already_AddRefed
<
Promise
>
Close
(
)
;
virtual
void
Notify
(
const
void_t
&
aVoid
)
override
;
void
FireStateChangeEvent
(
)
;
virtual
void
StateChange
(
)
;
virtual
void
Receive
(
const
nsTArray
<
MIDIMessage
>
&
aMsg
)
;
void
UnsetIPCPort
(
)
;
IMPL_EVENT_HANDLER
(
statechange
)
void
DisconnectFromOwner
(
)
override
;
protected
:
RefPtr
<
MIDIPortChild
>
mPort
;
private
:
void
KeepAliveOnStatechange
(
)
;
void
DontKeepAliveOnStatechange
(
)
;
MIDIAccess
*
mMIDIAccessParent
;
RefPtr
<
Promise
>
mOpeningPromise
;
RefPtr
<
Promise
>
mClosingPromise
;
bool
mKeepAlive
;
}
;
}
#
endif
