#
ifndef
mozilla_dom_midirMIDIPlatformService_h
#
define
mozilla_dom_midirMIDIPlatformService_h
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPlatformService
.
h
"
#
include
"
mozilla
/
dom
/
MIDITypes
.
h
"
#
include
"
mozilla
/
dom
/
midi
/
midir_impl_ffi_generated
.
h
"
class
nsIThread
;
struct
MidirWrapper
;
namespace
mozilla
:
:
dom
{
class
MIDIPortInterface
;
class
midirMIDIPlatformService
:
public
MIDIPlatformService
{
public
:
midirMIDIPlatformService
(
)
;
virtual
void
Init
(
)
override
;
virtual
void
Refresh
(
)
override
;
virtual
void
Open
(
MIDIPortParent
*
aPort
)
override
;
virtual
void
Stop
(
)
override
;
virtual
void
ScheduleSend
(
const
nsAString
&
aPort
)
override
;
virtual
void
ScheduleClose
(
MIDIPortParent
*
aPort
)
override
;
void
SendMessage
(
const
nsAString
&
aPort
const
MIDIMessage
&
aMessage
)
;
private
:
virtual
~
midirMIDIPlatformService
(
)
;
static
void
AddPort
(
const
nsString
*
aId
const
nsString
*
aName
bool
aInput
)
;
static
void
RemovePort
(
const
nsString
*
aId
const
nsString
*
aName
bool
aInput
)
;
static
void
CheckAndReceive
(
const
nsString
*
aId
const
uint8_t
*
aData
size_t
aLength
const
GeckoTimeStamp
*
aTimeStamp
uint64_t
aMicros
)
;
MidirWrapper
*
mImplementation
;
static
StaticMutex
gOwnerThreadMutex
;
static
nsCOMPtr
<
nsISerialEventTarget
>
gOwnerThread
MOZ_GUARDED_BY
(
gOwnerThreadMutex
)
;
}
;
}
#
endif
