#
include
"
mozilla
/
dom
/
MIDIAccessManager
.
h
"
#
include
"
mozilla
/
dom
/
MIDIAccess
.
h
"
#
include
"
mozilla
/
dom
/
MIDIManagerChild
.
h
"
#
include
"
mozilla
/
dom
/
MIDIPermissionRequest
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
dom
{
namespace
{
StaticRefPtr
<
MIDIAccessManager
>
gMIDIAccessManager
;
}
MIDIAccessManager
:
:
MIDIAccessManager
(
)
:
mHasPortList
(
false
)
mChild
(
nullptr
)
{
}
MIDIAccessManager
:
:
~
MIDIAccessManager
(
)
=
default
;
MIDIAccessManager
*
MIDIAccessManager
:
:
Get
(
)
{
if
(
!
gMIDIAccessManager
)
{
gMIDIAccessManager
=
new
MIDIAccessManager
(
)
;
ClearOnShutdown
(
&
gMIDIAccessManager
)
;
}
return
gMIDIAccessManager
;
}
bool
MIDIAccessManager
:
:
IsRunning
(
)
{
return
!
!
gMIDIAccessManager
;
}
already_AddRefed
<
Promise
>
MIDIAccessManager
:
:
RequestMIDIAccess
(
nsPIDOMWindowInner
*
aWindow
const
MIDIOptions
&
aOptions
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aWindow
)
;
nsCOMPtr
<
nsIGlobalObject
>
go
=
do_QueryInterface
(
aWindow
)
;
RefPtr
<
Promise
>
p
=
Promise
:
:
Create
(
go
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
nsCOMPtr
<
Document
>
doc
=
aWindow
-
>
GetDoc
(
)
;
if
(
NS_WARN_IF
(
!
doc
)
)
{
aRv
.
Throw
(
NS_ERROR_FAILURE
)
;
return
nullptr
;
}
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
doc
NS_LITERAL_STRING
(
"
midi
"
)
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
nullptr
;
}
nsCOMPtr
<
nsIRunnable
>
permRunnable
=
new
MIDIPermissionRequest
(
aWindow
p
aOptions
)
;
aRv
=
NS_DispatchToMainThread
(
permRunnable
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
nullptr
;
}
return
p
.
forget
(
)
;
}
bool
MIDIAccessManager
:
:
AddObserver
(
Observer
<
MIDIPortList
>
*
aObserver
)
{
mChangeObservers
.
AddObserver
(
aObserver
)
;
if
(
!
mChild
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
:
:
mozilla
:
:
ipc
:
:
PBackgroundChild
*
actor
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actor
)
)
{
return
false
;
}
RefPtr
<
MIDIManagerChild
>
mgr
(
new
MIDIManagerChild
(
)
)
;
PMIDIManagerChild
*
constructedMgr
=
actor
-
>
SendPMIDIManagerConstructor
(
mgr
)
;
if
(
NS_WARN_IF
(
!
constructedMgr
)
)
{
return
false
;
}
MOZ_ASSERT
(
constructedMgr
=
=
mgr
)
;
mChild
=
std
:
:
move
(
mgr
)
;
mChild
-
>
SetActorAlive
(
)
;
}
return
true
;
}
void
MIDIAccessManager
:
:
RemoveObserver
(
Observer
<
MIDIPortList
>
*
aObserver
)
{
mChangeObservers
.
RemoveObserver
(
aObserver
)
;
if
(
mChangeObservers
.
Length
(
)
=
=
0
)
{
if
(
mChild
)
{
mChild
-
>
Shutdown
(
)
;
mChild
=
nullptr
;
}
gMIDIAccessManager
=
nullptr
;
}
}
void
MIDIAccessManager
:
:
CreateMIDIAccess
(
nsPIDOMWindowInner
*
aWindow
bool
aNeedsSysex
Promise
*
aPromise
)
{
MOZ_ASSERT
(
aWindow
)
;
MOZ_ASSERT
(
aPromise
)
;
RefPtr
<
MIDIAccess
>
a
(
new
MIDIAccess
(
aWindow
aNeedsSysex
aPromise
)
)
;
if
(
NS_WARN_IF
(
!
AddObserver
(
a
)
)
)
{
aPromise
-
>
MaybeReject
(
NS_ERROR_FAILURE
)
;
return
;
}
if
(
!
mHasPortList
)
{
mAccessHolder
.
AppendElement
(
a
)
;
}
else
{
a
-
>
Notify
(
mPortList
)
;
}
}
void
MIDIAccessManager
:
:
Update
(
const
MIDIPortList
&
aPortList
)
{
mPortList
=
aPortList
;
mChangeObservers
.
Broadcast
(
aPortList
)
;
if
(
!
mHasPortList
)
{
mHasPortList
=
true
;
mAccessHolder
.
Clear
(
)
;
}
}
}
}
