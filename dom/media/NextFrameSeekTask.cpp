#
include
"
NextFrameSeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaSampleLog
;
#
define
SAMPLE_LOG
(
x
.
.
.
)
MOZ_LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
\
(
"
[
NextFrameSeekTask
]
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
)
)
namespace
media
{
NextFrameSeekTask
:
:
NextFrameSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
const
SeekTarget
&
aTarget
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentTime
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
)
:
SeekTask
(
aDecoderID
aThread
aReader
aTarget
)
mAudioQueue
(
aAudioQueue
)
mVideoQueue
(
aVideoQueue
)
mCurrentTime
(
aCurrentTime
)
mDuration
(
aDuration
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aInfo
.
HasVideo
(
)
)
;
}
NextFrameSeekTask
:
:
~
NextFrameSeekTask
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
NextFrameSeekTask
:
:
Discard
(
)
{
AssertOwnerThread
(
)
;
RejectIfExist
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mIsDiscarded
=
true
;
}
int64_t
NextFrameSeekTask
:
:
CalculateNewCurrentTime
(
)
const
{
AssertOwnerThread
(
)
;
return
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
;
}
void
NextFrameSeekTask
:
:
HandleAudioDecoded
(
MediaData
*
aAudio
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aAudio
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnAudioDecoded
[
%
lld
%
lld
]
"
aAudio
-
>
mTime
aAudio
-
>
GetEndTime
(
)
)
;
mSeekedAudioData
=
aAudio
;
MaybeFinishSeek
(
)
;
}
void
NextFrameSeekTask
:
:
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aVideo
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnVideoDecoded
[
%
lld
%
lld
]
"
aVideo
-
>
mTime
aVideo
-
>
GetEndTime
(
)
)
;
if
(
aVideo
-
>
mTime
>
mCurrentTime
)
{
mSeekedVideoData
=
aVideo
;
}
if
(
NeedMoreVideo
(
)
)
{
RequestVideoData
(
)
;
return
;
}
MaybeFinishSeek
(
)
;
}
void
NextFrameSeekTask
:
:
HandleNotDecoded
(
MediaData
:
:
Type
aType
const
MediaResult
&
aError
)
{
AssertOwnerThread
(
)
;
switch
(
aType
)
{
case
MediaData
:
:
AUDIO_DATA
:
{
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnAudioNotDecoded
(
aError
=
%
u
)
"
aError
.
Code
(
)
)
;
MaybeFinishSeek
(
)
;
break
;
}
case
MediaData
:
:
VIDEO_DATA
:
{
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnVideoNotDecoded
(
aError
=
%
u
)
"
aError
.
Code
(
)
)
;
if
(
aError
=
=
NS_ERROR_DOM_MEDIA_END_OF_STREAM
)
{
mIsVideoQueueFinished
=
true
;
}
if
(
NeedMoreVideo
(
)
)
{
switch
(
aError
.
Code
(
)
)
{
case
NS_ERROR_DOM_MEDIA_WAITING_FOR_DATA
:
mReader
-
>
WaitForData
(
MediaData
:
:
VIDEO_DATA
)
;
break
;
case
NS_ERROR_DOM_MEDIA_CANCELED
:
RequestVideoData
(
)
;
break
;
case
NS_ERROR_DOM_MEDIA_END_OF_STREAM
:
MOZ_ASSERT
(
false
"
Shouldn
'
t
want
more
data
for
ended
video
.
"
)
;
break
;
default
:
RejectIfExist
(
aError
__func__
)
;
break
;
}
return
;
}
MaybeFinishSeek
(
)
;
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
We
cannot
handle
RAW_DATA
or
NULL_DATA
here
.
"
)
;
}
}
void
NextFrameSeekTask
:
:
HandleAudioWaited
(
MediaData
:
:
Type
aType
)
{
AssertOwnerThread
(
)
;
MaybeFinishSeek
(
)
;
}
void
NextFrameSeekTask
:
:
HandleVideoWaited
(
MediaData
:
:
Type
aType
)
{
AssertOwnerThread
(
)
;
if
(
NeedMoreVideo
(
)
)
{
RequestVideoData
(
)
;
return
;
}
MaybeFinishSeek
(
)
;
}
void
NextFrameSeekTask
:
:
HandleNotWaited
(
const
WaitForDataRejectValue
&
aRejection
)
{
AssertOwnerThread
(
)
;
switch
(
aRejection
.
mType
)
{
case
MediaData
:
:
AUDIO_DATA
:
{
MaybeFinishSeek
(
)
;
break
;
}
case
MediaData
:
:
VIDEO_DATA
:
{
if
(
NeedMoreVideo
(
)
)
{
RejectIfExist
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
return
;
}
MaybeFinishSeek
(
)
;
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
We
cannot
handle
RAW_DATA
or
NULL_DATA
here
.
"
)
;
}
}
template
<
typename
Function
>
static
void
DiscardFrames
(
MediaQueue
<
MediaData
>
&
aQueue
const
Function
&
aCompare
)
{
while
(
aQueue
.
GetSize
(
)
>
0
)
{
if
(
aCompare
(
aQueue
.
PeekFront
(
)
-
>
mTime
)
)
{
RefPtr
<
MediaData
>
releaseMe
=
aQueue
.
PopFront
(
)
;
continue
;
}
break
;
}
}
RefPtr
<
NextFrameSeekTask
:
:
SeekTaskPromise
>
NextFrameSeekTask
:
:
Seek
(
)
{
AssertOwnerThread
(
)
;
auto
currentTime
=
mCurrentTime
;
DiscardFrames
(
mVideoQueue
[
currentTime
]
(
int64_t
aSampleTime
)
{
return
aSampleTime
<
=
currentTime
;
}
)
;
RefPtr
<
SeekTaskPromise
>
promise
=
mSeekTaskPromise
.
Ensure
(
__func__
)
;
if
(
!
IsVideoRequestPending
(
)
&
&
NeedMoreVideo
(
)
)
{
RequestVideoData
(
)
;
}
MaybeFinishSeek
(
)
;
return
promise
;
}
void
NextFrameSeekTask
:
:
RequestVideoData
(
)
{
AssertOwnerThread
(
)
;
mReader
-
>
RequestVideoData
(
false
media
:
:
TimeUnit
(
)
)
;
}
bool
NextFrameSeekTask
:
:
NeedMoreVideo
(
)
const
{
AssertOwnerThread
(
)
;
return
mVideoQueue
.
GetSize
(
)
=
=
0
&
&
!
mSeekedVideoData
&
&
!
mVideoQueue
.
IsFinished
(
)
&
&
!
mIsVideoQueueFinished
;
}
bool
NextFrameSeekTask
:
:
IsVideoRequestPending
(
)
const
{
AssertOwnerThread
(
)
;
return
mReader
-
>
IsRequestingVideoData
(
)
|
|
mReader
-
>
IsWaitingVideoData
(
)
;
}
bool
NextFrameSeekTask
:
:
IsAudioSeekComplete
(
)
const
{
AssertOwnerThread
(
)
;
return
!
mReader
-
>
IsRequestingAudioData
(
)
&
&
!
mReader
-
>
IsWaitingAudioData
(
)
;
}
bool
NextFrameSeekTask
:
:
IsVideoSeekComplete
(
)
const
{
AssertOwnerThread
(
)
;
return
!
IsVideoRequestPending
(
)
&
&
!
NeedMoreVideo
(
)
;
}
void
NextFrameSeekTask
:
:
MaybeFinishSeek
(
)
{
AssertOwnerThread
(
)
;
if
(
IsAudioSeekComplete
(
)
&
&
IsVideoSeekComplete
(
)
)
{
UpdateSeekTargetTime
(
)
;
auto
time
=
mTarget
.
GetTime
(
)
.
ToMicroseconds
(
)
;
DiscardFrames
(
mAudioQueue
[
time
]
(
int64_t
aSampleTime
)
{
return
aSampleTime
<
time
;
}
)
;
Resolve
(
__func__
)
;
}
}
void
NextFrameSeekTask
:
:
UpdateSeekTargetTime
(
)
{
AssertOwnerThread
(
)
;
RefPtr
<
MediaData
>
data
=
mVideoQueue
.
PeekFront
(
)
;
if
(
data
)
{
mTarget
.
SetTime
(
TimeUnit
:
:
FromMicroseconds
(
data
-
>
mTime
)
)
;
}
else
if
(
mSeekedVideoData
)
{
mTarget
.
SetTime
(
TimeUnit
:
:
FromMicroseconds
(
mSeekedVideoData
-
>
mTime
)
)
;
}
else
if
(
mIsVideoQueueFinished
|
|
mVideoQueue
.
AtEndOfStream
(
)
)
{
mTarget
.
SetTime
(
mDuration
)
;
}
else
{
MOZ_ASSERT
(
false
"
No
data
!
"
)
;
}
}
}
}
