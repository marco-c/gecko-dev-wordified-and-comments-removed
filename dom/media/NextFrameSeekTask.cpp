#
include
"
NextFrameSeekTask
.
h
"
#
include
"
MediaDecoderReaderWrapper
.
h
"
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
extern
LazyLogModule
gMediaDecoderLog
;
extern
LazyLogModule
gMediaSampleLog
;
#
undef
LOG
#
undef
DECODER_LOG
#
undef
VERBOSE_LOG
#
define
LOG
(
m
l
x
.
.
.
)
\
MOZ_LOG
(
m
l
(
"
[
NextFrameSeekTask
]
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
)
)
#
define
DECODER_LOG
(
x
.
.
.
)
\
LOG
(
gMediaDecoderLog
LogLevel
:
:
Debug
x
#
#
__VA_ARGS__
)
#
define
VERBOSE_LOG
(
x
.
.
.
)
\
LOG
(
gMediaDecoderLog
LogLevel
:
:
Verbose
x
#
#
__VA_ARGS__
)
#
define
SAMPLE_LOG
(
x
.
.
.
)
\
LOG
(
gMediaSampleLog
LogLevel
:
:
Debug
x
#
#
__VA_ARGS__
)
#
define
DECODER_WARN_HELPER
(
a
b
)
NS_WARNING
b
#
define
DECODER_WARN
(
x
.
.
.
)
\
DECODER_WARN_HELPER
(
0
(
nsPrintfCString
(
"
Decoder
=
%
p
"
x
mDecoderID
#
#
__VA_ARGS__
)
.
get
(
)
)
)
namespace
media
{
NextFrameSeekTask
:
:
NextFrameSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
SeekJob
&
&
aSeekJob
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentMediaTime
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
)
:
SeekTask
(
aDecoderID
aThread
aReader
Move
(
aSeekJob
)
)
mAudioQueue
(
aAudioQueue
)
mVideoQueue
(
aVideoQueue
)
mCurrentTimeBeforeSeek
(
aCurrentMediaTime
)
mDuration
(
aDuration
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aInfo
.
HasVideo
(
)
)
;
SetCallbacks
(
)
;
}
NextFrameSeekTask
:
:
~
NextFrameSeekTask
(
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
mIsDiscarded
)
;
}
void
NextFrameSeekTask
:
:
Discard
(
)
{
AssertOwnerThread
(
)
;
mSeekJob
.
RejectIfExists
(
__func__
)
;
RejectIfExist
(
__func__
)
;
CancelCallbacks
(
)
;
mIsDiscarded
=
true
;
}
bool
NextFrameSeekTask
:
:
NeedToResetMDSM
(
)
const
{
AssertOwnerThread
(
)
;
return
false
;
}
static
int64_t
FindNextFrame
(
MediaQueue
<
MediaData
>
&
aQueue
int64_t
aTime
)
{
AutoTArray
<
RefPtr
<
MediaData
>
16
>
frames
;
aQueue
.
GetFirstElements
(
aQueue
.
GetSize
(
)
&
frames
)
;
for
(
auto
&
&
frame
:
frames
)
{
if
(
frame
-
>
mTime
>
aTime
)
{
return
frame
-
>
mTime
;
}
}
return
-
1
;
}
static
void
DropFramesUntil
(
MediaQueue
<
MediaData
>
&
aQueue
int64_t
aTime
)
{
while
(
aQueue
.
GetSize
(
)
>
0
)
{
if
(
aQueue
.
PeekFront
(
)
-
>
mTime
<
aTime
)
{
RefPtr
<
MediaData
>
releaseMe
=
aQueue
.
PopFront
(
)
;
continue
;
}
break
;
}
}
static
void
DropAllFrames
(
MediaQueue
<
MediaData
>
&
aQueue
)
{
while
(
aQueue
.
GetSize
(
)
>
0
)
{
RefPtr
<
MediaData
>
releaseMe
=
aQueue
.
PopFront
(
)
;
}
}
static
void
DropAllMediaDataBeforeCurrentPosition
(
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
int64_t
const
aCurrentTimeBeforeSeek
)
{
int64_t
newPos
=
FindNextFrame
(
aVideoQueue
aCurrentTimeBeforeSeek
)
;
if
(
newPos
<
0
)
{
DropAllFrames
(
aVideoQueue
)
;
if
(
aVideoQueue
.
IsFinished
(
)
)
{
DropAllFrames
(
aAudioQueue
)
;
}
}
else
{
DropFramesUntil
(
aVideoQueue
newPos
)
;
DropFramesUntil
(
aAudioQueue
newPos
)
;
}
}
RefPtr
<
NextFrameSeekTask
:
:
SeekTaskPromise
>
NextFrameSeekTask
:
:
Seek
(
const
media
:
:
TimeUnit
&
)
{
AssertOwnerThread
(
)
;
DropAllMediaDataBeforeCurrentPosition
(
mAudioQueue
mVideoQueue
mCurrentTimeBeforeSeek
)
;
bool
hasPendingRequests
=
mReader
-
>
IsRequestingAudioData
(
)
|
|
mReader
-
>
IsWaitingAudioData
(
)
|
|
mReader
-
>
IsRequestingVideoData
(
)
|
|
mReader
-
>
IsWaitingVideoData
(
)
;
bool
needMoreVideo
=
mVideoQueue
.
GetSize
(
)
=
=
0
&
&
!
mVideoQueue
.
IsFinished
(
)
;
if
(
needMoreVideo
)
{
EnsureVideoDecodeTaskQueued
(
)
;
}
if
(
hasPendingRequests
|
|
needMoreVideo
)
{
return
mSeekTaskPromise
.
Ensure
(
__func__
)
;
}
UpdateSeekTargetTime
(
)
;
SeekTaskResolveValue
val
=
{
}
;
return
SeekTask
:
:
SeekTaskPromise
:
:
CreateAndResolve
(
val
__func__
)
;
}
bool
NextFrameSeekTask
:
:
IsVideoDecoding
(
)
const
{
AssertOwnerThread
(
)
;
return
!
mIsVideoQueueFinished
;
}
nsresult
NextFrameSeekTask
:
:
EnsureVideoDecodeTaskQueued
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
EnsureVideoDecodeTaskQueued
isDecoding
=
%
d
status
=
%
s
"
IsVideoDecoding
(
)
VideoRequestStatus
(
)
)
;
if
(
!
IsVideoDecoding
(
)
|
|
mReader
-
>
IsRequestingVideoData
(
)
|
|
mReader
-
>
IsWaitingVideoData
(
)
)
{
return
NS_OK
;
}
RequestVideoData
(
)
;
return
NS_OK
;
}
const
char
*
NextFrameSeekTask
:
:
VideoRequestStatus
(
)
{
AssertOwnerThread
(
)
;
if
(
mReader
-
>
IsRequestingVideoData
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mReader
-
>
IsWaitingVideoData
(
)
)
;
return
"
pending
"
;
}
else
if
(
mReader
-
>
IsWaitingVideoData
(
)
)
{
return
"
waiting
"
;
}
return
"
idle
"
;
}
void
NextFrameSeekTask
:
:
RequestVideoData
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
Queueing
video
task
-
queued
=
%
i
decoder
-
queued
=
%
o
"
!
!
mSeekedVideoData
mReader
-
>
SizeOfVideoQueueInFrames
(
)
)
;
mReader
-
>
RequestVideoData
(
false
media
:
:
TimeUnit
(
)
)
;
}
bool
NextFrameSeekTask
:
:
IsAudioSeekComplete
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
IsAudioSeekComplete
(
)
curTarVal
=
%
d
aqFin
=
%
d
aqSz
=
%
d
req
=
%
d
wait
=
%
d
"
mSeekJob
.
Exists
(
)
mIsAudioQueueFinished
!
!
mSeekedAudioData
mReader
-
>
IsRequestingAudioData
(
)
mReader
-
>
IsWaitingAudioData
(
)
)
;
return
!
mReader
-
>
IsRequestingAudioData
(
)
&
&
!
mReader
-
>
IsWaitingAudioData
(
)
;
}
bool
NextFrameSeekTask
:
:
IsVideoSeekComplete
(
)
{
AssertOwnerThread
(
)
;
SAMPLE_LOG
(
"
IsVideoSeekComplete
(
)
curTarVal
=
%
d
vqFin
=
%
d
vqSz
=
%
d
"
mSeekJob
.
Exists
(
)
mIsVideoQueueFinished
!
!
mSeekedVideoData
)
;
return
mIsVideoQueueFinished
|
|
mSeekedVideoData
;
}
void
NextFrameSeekTask
:
:
CheckIfSeekComplete
(
)
{
AssertOwnerThread
(
)
;
const
bool
audioSeekComplete
=
IsAudioSeekComplete
(
)
;
const
bool
videoSeekComplete
=
IsVideoSeekComplete
(
)
;
if
(
!
videoSeekComplete
)
{
if
(
NS_FAILED
(
EnsureVideoDecodeTaskQueued
(
)
)
)
{
DECODER_WARN
(
"
Failed
to
request
video
during
seek
"
)
;
RejectIfExist
(
__func__
)
;
}
}
SAMPLE_LOG
(
"
CheckIfSeekComplete
(
)
audioSeekComplete
=
%
d
videoSeekComplete
=
%
d
"
audioSeekComplete
videoSeekComplete
)
;
if
(
audioSeekComplete
&
&
videoSeekComplete
)
{
UpdateSeekTargetTime
(
)
;
Resolve
(
__func__
)
;
}
}
void
NextFrameSeekTask
:
:
OnAudioDecoded
(
MediaData
*
aAudioSample
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aAudioSample
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnAudioDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
aAudioSample
-
>
mTime
aAudioSample
-
>
GetEndTime
(
)
aAudioSample
-
>
mDiscontinuity
)
;
mSeekedAudioData
=
aAudioSample
;
CheckIfSeekComplete
(
)
;
}
void
NextFrameSeekTask
:
:
OnAudioNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnAudioNotDecoded
(
aReason
=
%
u
)
"
aReason
)
;
CheckIfSeekComplete
(
)
;
}
void
NextFrameSeekTask
:
:
OnVideoDecoded
(
MediaData
*
aVideoSample
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
aVideoSample
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnVideoDecoded
[
%
lld
%
lld
]
disc
=
%
d
"
aVideoSample
-
>
mTime
aVideoSample
-
>
GetEndTime
(
)
aVideoSample
-
>
mDiscontinuity
)
;
if
(
aVideoSample
-
>
mTime
>
mCurrentTimeBeforeSeek
)
{
mSeekedVideoData
=
aVideoSample
;
}
CheckIfSeekComplete
(
)
;
}
void
NextFrameSeekTask
:
:
OnVideoNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
{
AssertOwnerThread
(
)
;
MOZ_ASSERT
(
!
mSeekTaskPromise
.
IsEmpty
(
)
"
Seek
shouldn
'
t
be
finished
"
)
;
SAMPLE_LOG
(
"
OnVideoNotDecoded
(
aReason
=
%
u
)
"
aReason
)
;
if
(
aReason
=
=
MediaDecoderReader
:
:
DECODE_ERROR
)
{
if
(
mVideoQueue
.
GetSize
(
)
>
0
)
{
CheckIfSeekComplete
(
)
;
return
;
}
RejectIfExist
(
__func__
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
WAITING_FOR_DATA
)
{
MOZ_ASSERT
(
mReader
-
>
IsWaitForDataSupported
(
)
"
Readers
that
send
WAITING_FOR_DATA
need
to
implement
WaitForData
"
)
;
mReader
-
>
WaitForData
(
MediaData
:
:
VIDEO_DATA
)
;
mNeedToStopPrerollingVideo
=
true
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
CANCELED
)
{
EnsureVideoDecodeTaskQueued
(
)
;
return
;
}
if
(
aReason
=
=
MediaDecoderReader
:
:
END_OF_STREAM
)
{
mIsVideoQueueFinished
=
true
;
CheckIfSeekComplete
(
)
;
}
}
void
NextFrameSeekTask
:
:
SetCallbacks
(
)
{
AssertOwnerThread
(
)
;
mAudioCallback
=
mReader
-
>
AudioCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
AudioCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
*
>
(
)
)
{
OnAudioDecoded
(
aData
.
as
<
MediaData
*
>
(
)
)
;
}
else
{
OnAudioNotDecoded
(
aData
.
as
<
MediaDecoderReader
:
:
NotDecodedReason
>
(
)
)
;
}
}
)
;
mVideoCallback
=
mReader
-
>
VideoCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
VideoCallbackData
aData
)
{
typedef
Tuple
<
MediaData
*
TimeStamp
>
Type
;
if
(
aData
.
is
<
Type
>
(
)
)
{
OnVideoDecoded
(
Get
<
0
>
(
aData
.
as
<
Type
>
(
)
)
)
;
}
else
{
OnVideoNotDecoded
(
aData
.
as
<
MediaDecoderReader
:
:
NotDecodedReason
>
(
)
)
;
}
}
)
;
mAudioWaitCallback
=
mReader
-
>
AudioWaitCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
WaitCallbackData
aData
)
{
CheckIfSeekComplete
(
)
;
}
)
;
mVideoWaitCallback
=
mReader
-
>
VideoWaitCallback
(
)
.
Connect
(
OwnerThread
(
)
[
this
]
(
WaitCallbackData
aData
)
{
if
(
aData
.
is
<
MediaData
:
:
Type
>
(
)
)
{
EnsureVideoDecodeTaskQueued
(
)
;
}
}
)
;
}
void
NextFrameSeekTask
:
:
CancelCallbacks
(
)
{
AssertOwnerThread
(
)
;
mAudioCallback
.
Disconnect
(
)
;
mVideoCallback
.
Disconnect
(
)
;
mAudioWaitCallback
.
Disconnect
(
)
;
mVideoWaitCallback
.
Disconnect
(
)
;
}
void
NextFrameSeekTask
:
:
UpdateSeekTargetTime
(
)
{
AssertOwnerThread
(
)
;
RefPtr
<
MediaData
>
data
=
mVideoQueue
.
PeekFront
(
)
;
if
(
data
)
{
mSeekJob
.
mTarget
.
SetTime
(
TimeUnit
:
:
FromMicroseconds
(
data
-
>
mTime
)
)
;
}
else
if
(
mSeekedVideoData
)
{
mSeekJob
.
mTarget
.
SetTime
(
TimeUnit
:
:
FromMicroseconds
(
mSeekedVideoData
-
>
mTime
)
)
;
}
else
if
(
mIsVideoQueueFinished
|
|
mVideoQueue
.
AtEndOfStream
(
)
)
{
mSeekJob
.
mTarget
.
SetTime
(
mDuration
)
;
}
else
{
MOZ_ASSERT
(
false
"
No
data
!
"
)
;
}
}
}
}
