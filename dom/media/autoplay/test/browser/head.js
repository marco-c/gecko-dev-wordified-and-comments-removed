function
GetTestWebBasedURL
(
fileName
{
crossOrigin
=
false
}
=
{
}
)
{
const
origin
=
crossOrigin
?
"
http
:
/
/
example
.
org
"
:
"
http
:
/
/
example
.
com
"
;
return
(
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
origin
)
+
fileName
)
;
}
function
loadAutoplayVideo
(
browser
args
)
{
return
SpecialPowers
.
spawn
(
browser
[
args
]
async
args
=
>
{
info
(
"
-
create
a
new
autoplay
video
-
"
)
;
let
video
=
content
.
document
.
createElement
(
"
video
"
)
;
video
.
id
=
"
v1
"
;
video
.
didPlayPromise
=
new
Promise
(
resolve
=
>
{
video
.
addEventListener
(
"
playing
"
(
)
=
>
{
video
.
didPlay
=
true
;
resolve
(
)
;
}
{
once
:
true
}
)
;
video
.
addEventListener
(
"
blocked
"
(
)
=
>
{
video
.
didPlay
=
false
;
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
if
(
args
.
mode
=
=
"
autoplay
attribute
"
)
{
info
(
"
autoplay
attribute
set
to
true
"
)
;
video
.
autoplay
=
true
;
}
else
if
(
args
.
mode
=
=
"
call
play
"
)
{
info
(
"
will
call
play
(
)
when
reached
loadedmetadata
"
)
;
video
.
addEventListener
(
"
loadedmetadata
"
(
)
=
>
{
video
.
play
(
)
.
then
(
(
)
=
>
{
info
(
"
video
play
(
)
resolved
"
)
;
}
(
)
=
>
{
info
(
"
video
play
(
)
rejected
"
)
;
}
)
;
}
{
once
:
true
}
)
;
}
else
{
ok
(
false
"
Invalid
'
mode
'
arg
"
)
;
}
if
(
args
.
muted
)
{
video
.
muted
=
true
;
}
video
.
src
=
"
gizmo
.
mp4
"
;
content
.
document
.
body
.
appendChild
(
video
)
;
}
)
;
}
function
checkVideoDidPlay
(
browser
args
)
{
return
SpecialPowers
.
spawn
(
browser
[
args
]
async
args
=
>
{
let
video
=
content
.
document
.
getElementById
(
"
v1
"
)
;
await
video
.
didPlayPromise
;
is
(
video
.
didPlay
args
.
shouldPlay
args
.
name
+
"
should
"
+
(
!
args
.
shouldPlay
?
"
not
"
:
"
"
)
+
"
be
able
to
autoplay
"
)
;
video
.
src
=
"
"
;
content
.
document
.
body
.
remove
(
video
)
;
}
)
;
}
async
function
createTabAndSetupPolicyAssertFunc
(
url
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
window
.
gBrowser
url
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
_
=
>
{
content
.
video
=
content
.
document
.
createElement
(
"
video
"
)
;
content
.
ac
=
new
content
.
AudioContext
(
)
;
content
.
assertAutoplayPolicy
=
(
{
resultForElementType
resultForElement
resultForContextType
resultForContext
}
)
=
>
{
is
(
content
.
navigator
.
getAutoplayPolicy
(
"
mediaelement
"
)
resultForElementType
"
getAutoplayPolicy
(
'
mediaelement
'
)
returns
correct
value
"
)
;
is
(
content
.
navigator
.
getAutoplayPolicy
(
content
.
video
)
resultForElement
"
getAutoplayPolicy
(
content
.
video
)
returns
correct
value
"
)
;
is
(
content
.
navigator
.
getAutoplayPolicy
(
"
audiocontext
"
)
resultForContextType
"
getAutoplayPolicy
(
'
audiocontext
'
)
returns
correct
value
"
)
;
is
(
content
.
navigator
.
getAutoplayPolicy
(
content
.
ac
)
resultForContext
"
getAutoplayPolicy
(
content
.
ac
)
returns
correct
value
"
)
;
}
;
}
)
;
return
tab
;
}
