#
ifndef
ACCURATE_SEEK_TASK_H
#
define
ACCURATE_SEEK_TASK_H
#
include
"
SeekTask
.
h
"
#
include
"
MediaCallbackID
.
h
"
#
include
"
MediaDecoderReader
.
h
"
#
include
"
SeekJob
.
h
"
namespace
mozilla
{
class
AccurateSeekTask
final
:
public
SeekTask
{
public
:
AccurateSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
SeekJob
&
&
aSeekJob
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aDuration
int64_t
aCurrentMediaTime
)
;
void
Discard
(
)
override
;
RefPtr
<
SeekTaskPromise
>
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
override
;
bool
NeedToResetMDSM
(
)
const
override
;
private
:
~
AccurateSeekTask
(
)
;
void
EnsureVideoDecodeTaskQueued
(
)
;
void
EnsureAudioDecodeTaskQueued
(
)
;
const
char
*
AudioRequestStatus
(
)
;
const
char
*
VideoRequestStatus
(
)
;
nsresult
DropAudioUpToSeekTarget
(
MediaData
*
aSample
)
;
nsresult
DropVideoUpToSeekTarget
(
MediaData
*
aSample
)
;
void
CheckIfSeekComplete
(
)
;
void
OnSeekResolved
(
media
:
:
TimeUnit
)
;
void
OnSeekRejected
(
nsresult
aResult
)
;
void
OnAudioDecoded
(
MediaData
*
aAudioSample
)
;
void
OnAudioNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
;
void
OnVideoDecoded
(
MediaData
*
aVideoSample
)
;
void
OnVideoNotDecoded
(
MediaDecoderReader
:
:
NotDecodedReason
aReason
)
;
void
SetCallbacks
(
)
;
void
CancelCallbacks
(
)
;
const
int64_t
mCurrentTimeBeforeSeek
;
const
uint32_t
mAudioRate
;
bool
mDropAudioUntilNextDiscontinuity
;
bool
mDropVideoUntilNextDiscontinuity
;
bool
mDoneAudioSeeking
;
bool
mDoneVideoSeeking
;
RefPtr
<
MediaData
>
mFirstVideoFrameAfterSeek
;
MozPromiseRequestHolder
<
MediaDecoderReader
:
:
SeekPromise
>
mSeekRequest
;
MediaEventListener
mAudioCallback
;
MediaEventListener
mVideoCallback
;
MediaEventListener
mAudioWaitCallback
;
MediaEventListener
mVideoWaitCallback
;
}
;
}
#
endif
