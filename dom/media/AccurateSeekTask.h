#
ifndef
ACCURATE_SEEK_TASK_H
#
define
ACCURATE_SEEK_TASK_H
#
include
"
SeekTask
.
h
"
#
include
"
MediaDecoderReader
.
h
"
#
include
"
SeekJob
.
h
"
namespace
mozilla
{
class
AccurateSeekTask
final
:
public
SeekTask
{
public
:
AccurateSeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
const
SeekTarget
&
aTarget
const
MediaInfo
&
aInfo
const
media
:
:
TimeUnit
&
aEnd
int64_t
aCurrentMediaTime
)
;
void
Discard
(
)
override
;
RefPtr
<
SeekTaskPromise
>
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
override
;
bool
NeedToResetMDSM
(
)
const
override
;
int64_t
CalculateNewCurrentTime
(
)
const
override
;
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
override
;
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
override
;
void
HandleNotDecoded
(
MediaData
:
:
Type
aType
const
MediaResult
&
aError
)
override
;
void
HandleAudioWaited
(
MediaData
:
:
Type
aType
)
override
;
void
HandleVideoWaited
(
MediaData
:
:
Type
aType
)
override
;
void
HandleNotWaited
(
const
WaitForDataRejectValue
&
aRejection
)
override
;
private
:
~
AccurateSeekTask
(
)
;
void
RequestVideoData
(
)
;
void
RequestAudioData
(
)
;
nsresult
DropAudioUpToSeekTarget
(
MediaData
*
aSample
)
;
nsresult
DropVideoUpToSeekTarget
(
MediaData
*
aSample
)
;
void
MaybeFinishSeek
(
)
;
void
OnSeekResolved
(
media
:
:
TimeUnit
)
;
void
OnSeekRejected
(
nsresult
aResult
)
;
void
AdjustFastSeekIfNeeded
(
MediaData
*
aSample
)
;
const
media
:
:
TimeUnit
mCurrentTimeBeforeSeek
;
const
uint32_t
mAudioRate
;
bool
mDoneAudioSeeking
;
bool
mDoneVideoSeeking
;
RefPtr
<
MediaData
>
mFirstVideoFrameAfterSeek
;
MozPromiseRequestHolder
<
MediaDecoderReader
:
:
SeekPromise
>
mSeekRequest
;
}
;
}
#
endif
