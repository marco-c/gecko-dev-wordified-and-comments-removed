#
if
!
defined
(
MediaChannelStatistics_h_
)
#
define
MediaChannelStatistics_h_
namespace
mozilla
{
static
const
int64_t
RELIABLE_DATA_THRESHOLD
=
57
*
1460
;
class
MediaChannelStatistics
{
public
:
MediaChannelStatistics
(
)
=
default
;
MediaChannelStatistics
(
const
MediaChannelStatistics
&
)
=
default
;
MediaChannelStatistics
&
operator
=
(
const
MediaChannelStatistics
&
)
=
default
;
void
Reset
(
)
{
mLastStartTime
=
TimeStamp
(
)
;
mAccumulatedTime
=
TimeDuration
(
0
)
;
mAccumulatedBytes
=
0
;
mIsStarted
=
false
;
}
void
Start
(
)
{
if
(
mIsStarted
)
return
;
mLastStartTime
=
TimeStamp
:
:
Now
(
)
;
mIsStarted
=
true
;
}
void
Stop
(
)
{
if
(
!
mIsStarted
)
return
;
mAccumulatedTime
+
=
TimeStamp
:
:
Now
(
)
-
mLastStartTime
;
mIsStarted
=
false
;
}
void
AddBytes
(
int64_t
aBytes
)
{
if
(
!
mIsStarted
)
{
return
;
}
mAccumulatedBytes
+
=
aBytes
;
}
double
GetRateAtLastStop
(
bool
*
aReliable
)
{
double
seconds
=
mAccumulatedTime
.
ToSeconds
(
)
;
*
aReliable
=
(
seconds
>
=
1
.
0
)
|
|
(
mAccumulatedBytes
>
=
RELIABLE_DATA_THRESHOLD
)
;
if
(
seconds
<
=
0
.
0
)
return
0
.
0
;
return
static_cast
<
double
>
(
mAccumulatedBytes
)
/
seconds
;
}
double
GetRate
(
bool
*
aReliable
)
{
TimeDuration
time
=
mAccumulatedTime
;
if
(
mIsStarted
)
{
time
+
=
TimeStamp
:
:
Now
(
)
-
mLastStartTime
;
}
double
seconds
=
time
.
ToSeconds
(
)
;
*
aReliable
=
(
seconds
>
=
3
.
0
)
|
|
(
mAccumulatedBytes
>
=
RELIABLE_DATA_THRESHOLD
)
;
if
(
seconds
<
=
0
.
0
)
return
0
.
0
;
return
static_cast
<
double
>
(
mAccumulatedBytes
)
/
seconds
;
}
private
:
int64_t
mAccumulatedBytes
=
0
;
TimeDuration
mAccumulatedTime
;
TimeStamp
mLastStartTime
;
bool
mIsStarted
=
false
;
}
;
}
#
endif
