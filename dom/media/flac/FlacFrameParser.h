#
ifndef
FLAC_FRAME_PARSER_H_
#
define
FLAC_FRAME_PARSER_H_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
MediaDecoder
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaResource
.
h
"
namespace
mozilla
{
#
define
FLAC_MAX_CHANNELS
8
#
define
FLAC_MIN_BLOCKSIZE
16
#
define
FLAC_MAX_BLOCKSIZE
65535
#
define
FLAC_MIN_FRAME_SIZE
11
#
define
FLAC_MAX_FRAME_HEADER_SIZE
16
#
define
FLAC_MAX_FRAME_SIZE
(
FLAC_MAX_FRAME_HEADER_SIZE
\
+
FLAC_MAX_BLOCKSIZE
*
FLAC_MAX_CHANNELS
*
3
)
class
OpusParser
;
class
FlacFrameParser
{
public
:
FlacFrameParser
(
)
;
~
FlacFrameParser
(
)
;
bool
IsHeaderBlock
(
const
uint8_t
*
aPacket
size_t
aLength
)
const
;
uint32_t
HeaderBlockLength
(
const
uint8_t
*
aPacket
)
const
;
bool
DecodeHeaderBlock
(
const
uint8_t
*
aPacket
size_t
aLength
)
;
bool
HasFullMetadata
(
)
const
{
return
mFullMetadata
;
}
int64_t
BlockDuration
(
const
uint8_t
*
aPacket
size_t
aLength
)
const
;
MetadataTags
*
GetTags
(
)
const
;
AudioInfo
mInfo
;
private
:
bool
ReconstructFlacGranulepos
(
void
)
;
Maybe
<
uint32_t
>
mNumHeaders
;
uint32_t
mMinBlockSize
;
uint32_t
mMaxBlockSize
;
uint32_t
mMinFrameSize
;
uint32_t
mMaxFrameSize
;
uint64_t
mNumFrames
;
bool
mFullMetadata
;
uint32_t
mPacketCount
;
nsAutoPtr
<
OpusParser
>
mParser
;
}
;
}
#
endif
