#
ifndef
mozilla_dom_MediaKeyStatuses_h
#
define
mozilla_dom_MediaKeyStatuses_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CDMCaps
.
h
"
#
include
"
mozilla
/
dom
/
BufferSourceBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyStatusMapBinding
.
h
"
#
include
"
mozilla
/
dom
/
TypedArray
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
MediaKeyStatusMap
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
MediaKeyStatusMap
)
public
:
explicit
MediaKeyStatusMap
(
nsPIDOMWindowInner
*
aParent
)
;
protected
:
~
MediaKeyStatusMap
(
)
;
public
:
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Get
(
const
BufferSource
&
aKey
OwningMediaKeyStatusOrUndefined
&
aOutValue
ErrorResult
&
aOutRv
)
const
;
bool
Has
(
const
BufferSource
&
aKey
)
const
;
uint32_t
Size
(
)
const
;
uint32_t
GetIterableLength
(
)
const
;
TypedArrayCreator
<
ArrayBuffer
>
GetKeyAtIndex
(
uint32_t
aIndex
)
const
;
nsString
GetKeyIDAsHexString
(
uint32_t
aIndex
)
const
;
MediaKeyStatus
GetValueAtIndex
(
uint32_t
aIndex
)
const
;
void
Update
(
const
nsTArray
<
CDMCaps
:
:
KeyStatus
>
&
keys
)
;
private
:
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
struct
KeyStatus
{
KeyStatus
(
const
nsTArray
<
uint8_t
>
&
aKeyId
MediaKeyStatus
aStatus
)
:
mKeyId
(
aKeyId
.
Clone
(
)
)
mStatus
(
aStatus
)
{
}
bool
operator
=
=
(
const
KeyStatus
&
aOther
)
const
{
return
aOther
.
mKeyId
=
=
mKeyId
;
}
bool
operator
<
(
const
KeyStatus
&
aOther
)
const
{
const
nsTArray
<
uint8_t
>
&
other
=
aOther
.
mKeyId
;
const
nsTArray
<
uint8_t
>
&
self
=
mKeyId
;
size_t
length
=
std
:
:
min
<
size_t
>
(
other
.
Length
(
)
self
.
Length
(
)
)
;
int
cmp
=
memcmp
(
self
.
Elements
(
)
other
.
Elements
(
)
length
)
;
if
(
cmp
!
=
0
)
{
return
cmp
<
0
;
}
return
self
.
Length
(
)
<
=
other
.
Length
(
)
;
}
nsTArray
<
uint8_t
>
mKeyId
;
MediaKeyStatus
mStatus
;
}
;
const
KeyStatus
*
FindKey
(
const
BufferSource
&
aKey
)
const
;
nsTArray
<
KeyStatus
>
mStatuses
;
}
;
}
}
#
endif
