#
ifndef
CDMCaps_h_
#
define
CDMCaps_h_
#
include
"
gmp
-
decryption
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsString
.
h
"
#
include
"
SamplesWaitingForKey
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyStatusMapBinding
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
namespace
mozilla
{
class
CDMCaps
{
public
:
CDMCaps
(
)
;
~
CDMCaps
(
)
;
struct
KeyStatus
{
KeyStatus
(
const
CencKeyId
&
aId
const
nsString
&
aSessionId
dom
:
:
MediaKeyStatus
aStatus
)
:
mId
(
aId
)
mSessionId
(
aSessionId
)
mStatus
(
aStatus
)
{
}
KeyStatus
(
const
KeyStatus
&
aOther
)
:
mId
(
aOther
.
mId
)
mSessionId
(
aOther
.
mSessionId
)
mStatus
(
aOther
.
mStatus
)
{
}
bool
operator
=
=
(
const
KeyStatus
&
aOther
)
const
{
return
mId
=
=
aOther
.
mId
&
&
mSessionId
=
=
aOther
.
mSessionId
;
}
;
CencKeyId
mId
;
nsString
mSessionId
;
dom
:
:
MediaKeyStatus
mStatus
;
}
;
class
MOZ_STACK_CLASS
AutoLock
{
public
:
explicit
AutoLock
(
CDMCaps
&
aKeyCaps
)
;
~
AutoLock
(
)
;
bool
IsKeyUsable
(
const
CencKeyId
&
aKeyId
)
;
bool
SetKeyStatus
(
const
CencKeyId
&
aKeyId
const
nsString
&
aSessionId
const
dom
:
:
Optional
<
dom
:
:
MediaKeyStatus
>
&
aStatus
)
;
void
GetKeyStatusesForSession
(
const
nsAString
&
aSessionId
nsTArray
<
KeyStatus
>
&
aOutKeyStatuses
)
;
void
GetSessionIdsForKeyId
(
const
CencKeyId
&
aKeyId
nsTArray
<
nsCString
>
&
aOutSessionIds
)
;
bool
RemoveKeysForSession
(
const
nsString
&
aSessionId
)
;
void
NotifyWhenKeyIdUsable
(
const
CencKeyId
&
aKey
SamplesWaitingForKey
*
aSamplesWaiting
)
;
private
:
CDMCaps
&
mData
;
}
;
private
:
void
Lock
(
)
;
void
Unlock
(
)
;
struct
WaitForKeys
{
WaitForKeys
(
const
CencKeyId
&
aKeyId
SamplesWaitingForKey
*
aListener
)
:
mKeyId
(
aKeyId
)
mListener
(
aListener
)
{
}
CencKeyId
mKeyId
;
RefPtr
<
SamplesWaitingForKey
>
mListener
;
}
;
Monitor
mMonitor
;
nsTArray
<
KeyStatus
>
mKeyStatuses
;
nsTArray
<
WaitForKeys
>
mWaitForKeys
;
CDMCaps
(
const
CDMCaps
&
)
=
delete
;
CDMCaps
&
operator
=
(
const
CDMCaps
&
)
=
delete
;
}
;
}
#
endif
