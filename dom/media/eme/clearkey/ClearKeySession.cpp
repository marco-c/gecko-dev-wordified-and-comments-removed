#
include
"
ClearKeySession
.
h
"
#
include
<
assert
.
h
>
#
include
<
string
.
h
>
#
include
"
BigEndian
.
h
"
#
include
"
ClearKeyDecryptionManager
.
h
"
#
include
"
ClearKeyStorage
.
h
"
#
include
"
ClearKeyUtils
.
h
"
#
include
"
psshparser
/
PsshParser
.
h
"
using
namespace
mozilla
;
using
namespace
cdm
;
ClearKeySession
:
:
ClearKeySession
(
const
std
:
:
string
&
aSessionId
SessionType
aSessionType
)
:
mSessionId
(
aSessionId
)
mSessionType
(
aSessionType
)
{
CK_LOGD
(
"
ClearKeySession
ctor
%
p
"
this
)
;
}
ClearKeySession
:
:
~
ClearKeySession
(
)
{
CK_LOGD
(
"
ClearKeySession
dtor
%
p
"
this
)
;
}
bool
ClearKeySession
:
:
Init
(
InitDataType
aInitDataType
const
uint8_t
*
aInitData
uint32_t
aInitDataSize
)
{
CK_LOGD
(
"
ClearKeySession
:
:
Init
"
)
;
if
(
aInitDataType
=
=
InitDataType
:
:
kCenc
)
{
ParseCENCInitData
(
aInitData
aInitDataSize
mKeyIds
)
;
}
else
if
(
aInitDataType
=
=
InitDataType
:
:
kKeyIds
)
{
ClearKeyUtils
:
:
ParseKeyIdsInitData
(
aInitData
aInitDataSize
mKeyIds
)
;
}
else
if
(
aInitDataType
=
=
InitDataType
:
:
kWebM
&
&
aInitDataSize
<
=
kMaxWebmInitDataSize
)
{
std
:
:
vector
<
uint8_t
>
keyId
;
keyId
.
assign
(
aInitData
aInitData
+
aInitDataSize
)
;
mKeyIds
.
push_back
(
keyId
)
;
}
if
(
mKeyIds
.
empty
(
)
)
{
CK_LOGD
(
"
ClearKeySession
:
:
Init
failed
to
get
keyId
"
)
;
return
false
;
}
#
ifdef
WMF_CLEARKEY_DEBUG
for
(
const
auto
&
keyId
:
mKeyIds
)
{
CK_LOGARRAY
(
"
ClearKeySession
:
:
Init
KeyId
:
"
keyId
.
data
(
)
keyId
.
size
(
)
)
;
}
#
endif
return
true
;
}
SessionType
ClearKeySession
:
:
Type
(
)
const
{
return
mSessionType
;
}
void
ClearKeySession
:
:
AddKeyId
(
const
KeyId
&
aKeyId
)
{
mKeyIds
.
push_back
(
aKeyId
)
;
}
