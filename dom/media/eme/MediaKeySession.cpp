#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySession
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyError
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyMessageEvent
.
h
"
#
include
"
mozilla
/
dom
/
MediaEncryptedEvent
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyStatusMap
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySystemAccess
.
h
"
#
include
"
mozilla
/
dom
/
KeyIdsInitDataBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
mozilla
/
CDMProxy
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
EMEUtils
.
h
"
#
include
"
GMPUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
psshparser
/
PsshParser
.
h
"
#
include
<
ctime
>
namespace
mozilla
{
namespace
dom
{
NS_IMPL_CYCLE_COLLECTION_INHERITED
(
MediaKeySession
DOMEventTargetHelper
mMediaKeyError
mKeys
mKeyStatusMap
mClosed
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
MediaKeySession
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
MediaKeySession
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
MediaKeySession
DOMEventTargetHelper
)
static
uint32_t
sMediaKeySessionNum
=
0
;
static
const
uint32_t
MAX_KEY_ID_LENGTH
=
512
;
static
const
uint32_t
MAX_CENC_INIT_DATA_LENGTH
=
64
*
1024
;
MediaKeySession
:
:
MediaKeySession
(
JSContext
*
aCx
nsPIDOMWindowInner
*
aParent
MediaKeys
*
aKeys
const
nsAString
&
aKeySystem
MediaKeySessionType
aSessionType
ErrorResult
&
aRv
)
:
DOMEventTargetHelper
(
aParent
)
mKeys
(
aKeys
)
mKeySystem
(
aKeySystem
)
mSessionType
(
aSessionType
)
mToken
(
sMediaKeySessionNum
+
+
)
mIsClosed
(
false
)
mUninitialized
(
true
)
mKeyStatusMap
(
new
MediaKeyStatusMap
(
aParent
)
)
mExpiration
(
JS
:
:
GenericNaN
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
ctor
"
this
)
;
MOZ_ASSERT
(
aParent
)
;
if
(
aRv
.
Failed
(
)
)
{
return
;
}
mClosed
=
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeys
.
createSession
"
)
)
;
}
void
MediaKeySession
:
:
SetSessionId
(
const
nsAString
&
aSessionId
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
session
Id
set
"
this
NS_ConvertUTF16toUTF8
(
aSessionId
)
.
get
(
)
)
;
if
(
NS_WARN_IF
(
!
mSessionId
.
IsEmpty
(
)
)
)
{
return
;
}
mSessionId
=
aSessionId
;
mKeys
-
>
OnSessionIdReady
(
this
)
;
}
MediaKeySession
:
:
~
MediaKeySession
(
)
{
}
MediaKeyError
*
MediaKeySession
:
:
GetError
(
)
const
{
return
mMediaKeyError
;
}
void
MediaKeySession
:
:
GetKeySystem
(
nsString
&
aOutKeySystem
)
const
{
aOutKeySystem
.
Assign
(
mKeySystem
)
;
}
void
MediaKeySession
:
:
GetSessionId
(
nsString
&
aSessionId
)
const
{
aSessionId
=
GetSessionId
(
)
;
}
const
nsString
&
MediaKeySession
:
:
GetSessionId
(
)
const
{
return
mSessionId
;
}
JSObject
*
MediaKeySession
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaKeySessionBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
double
MediaKeySession
:
:
Expiration
(
)
const
{
return
mExpiration
;
}
Promise
*
MediaKeySession
:
:
Closed
(
)
const
{
return
mClosed
;
}
void
MediaKeySession
:
:
UpdateKeyStatusMap
(
)
{
MOZ_ASSERT
(
!
IsClosed
(
)
)
;
if
(
!
mKeys
-
>
GetCDMProxy
(
)
)
{
return
;
}
nsTArray
<
CDMCaps
:
:
KeyStatus
>
keyStatuses
;
{
CDMCaps
:
:
AutoLock
caps
(
mKeys
-
>
GetCDMProxy
(
)
-
>
Capabilites
(
)
)
;
caps
.
GetKeyStatusesForSession
(
mSessionId
keyStatuses
)
;
}
mKeyStatusMap
-
>
Update
(
keyStatuses
)
;
if
(
EME_LOG_ENABLED
(
)
)
{
nsAutoCString
message
(
nsPrintfCString
(
"
MediaKeySession
[
%
p
'
%
s
'
]
key
statuses
change
{
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
)
;
using
IntegerType
=
typename
std
:
:
underlying_type
<
MediaKeyStatus
>
:
:
type
;
for
(
const
CDMCaps
:
:
KeyStatus
&
status
:
keyStatuses
)
{
message
.
Append
(
nsPrintfCString
(
"
(
%
s
%
s
)
"
ToHexString
(
status
.
mId
)
.
get
(
)
MediaKeyStatusValues
:
:
strings
[
static_cast
<
IntegerType
>
(
status
.
mStatus
)
]
.
value
)
)
;
}
message
.
Append
(
"
}
"
)
;
EME_LOG
(
message
.
get
(
)
)
;
}
}
MediaKeyStatusMap
*
MediaKeySession
:
:
KeyStatuses
(
)
const
{
return
mKeyStatusMap
;
}
static
bool
ValidateInitData
(
const
nsTArray
<
uint8_t
>
&
aInitData
const
nsAString
&
aInitDataType
)
{
if
(
aInitDataType
.
LowerCaseEqualsLiteral
(
"
webm
"
)
)
{
return
aInitData
.
Length
(
)
<
=
MAX_KEY_ID_LENGTH
;
}
else
if
(
aInitDataType
.
LowerCaseEqualsLiteral
(
"
cenc
"
)
)
{
if
(
aInitData
.
Length
(
)
>
MAX_CENC_INIT_DATA_LENGTH
)
{
return
false
;
}
std
:
:
vector
<
std
:
:
vector
<
uint8_t
>
>
keyIds
;
return
ParseCENCInitData
(
aInitData
.
Elements
(
)
aInitData
.
Length
(
)
keyIds
)
;
}
else
if
(
aInitDataType
.
LowerCaseEqualsLiteral
(
"
keyids
"
)
)
{
if
(
aInitData
.
Length
(
)
>
MAX_KEY_ID_LENGTH
)
{
return
false
;
}
mozilla
:
:
dom
:
:
KeyIdsInitData
keyIds
;
nsString
json
;
nsDependentCSubstring
raw
(
reinterpret_cast
<
const
char
*
>
(
aInitData
.
Elements
(
)
)
aInitData
.
Length
(
)
)
;
if
(
NS_FAILED
(
nsContentUtils
:
:
ConvertStringFromEncoding
(
NS_LITERAL_CSTRING
(
"
UTF
-
8
"
)
raw
json
)
)
)
{
return
false
;
}
if
(
!
keyIds
.
Init
(
json
)
)
{
return
false
;
}
if
(
keyIds
.
mKids
.
Length
(
)
=
=
0
)
{
return
false
;
}
for
(
const
auto
&
kid
:
keyIds
.
mKids
)
{
if
(
kid
.
IsEmpty
(
)
)
{
return
false
;
}
}
}
return
true
;
}
already_AddRefed
<
Promise
>
MediaKeySession
:
:
GenerateRequest
(
const
nsAString
&
aInitDataType
const
ArrayBufferViewOrArrayBuffer
&
aInitData
ErrorResult
&
aRv
)
{
RefPtr
<
DetailedPromise
>
promise
(
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
generateRequest
"
)
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
IsClosed
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
failed
closed
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
Session
is
closed
in
MediaKeySession
.
generateRequest
(
)
"
)
)
;
return
promise
.
forget
(
)
;
}
if
(
!
mUninitialized
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
failed
uninitialized
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
Session
is
already
initialized
in
MediaKeySession
.
generateRequest
(
)
"
)
)
;
return
promise
.
forget
(
)
;
}
mUninitialized
=
false
;
if
(
aInitDataType
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
Empty
initDataType
passed
to
MediaKeySession
.
generateRequest
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
failed
empty
initDataType
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
uint8_t
>
data
;
CopyArrayBufferViewOrArrayBufferData
(
aInitData
data
)
;
if
(
data
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
Empty
initData
passed
to
MediaKeySession
.
generateRequest
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
failed
empty
initData
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
if
(
!
MediaKeySystemAccess
:
:
KeySystemSupportsInitDataType
(
mKeySystem
aInitDataType
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
NS_LITERAL_CSTRING
(
"
Unsupported
initDataType
passed
to
MediaKeySession
.
generateRequest
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
failed
unsupported
initDataType
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
if
(
!
ValidateInitData
(
data
aInitDataType
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
initData
sanitization
failed
in
MediaKeySession
.
generateRequest
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
initData
sanitization
failed
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
VIDEO_CDM_GENERATE_REQUEST_CALLED
ToCDMTypeTelemetryEnum
(
mKeySystem
)
)
;
nsAutoCString
hexInitData
(
ToHexString
(
data
)
)
;
PromiseId
pid
=
mKeys
-
>
StorePromise
(
promise
)
;
mKeys
-
>
ConnectPendingPromiseIdWithToken
(
pid
Token
(
)
)
;
mKeys
-
>
GetCDMProxy
(
)
-
>
CreateSession
(
Token
(
)
mSessionType
pid
aInitDataType
data
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
GenerateRequest
(
)
sent
"
"
promiseId
=
%
d
initData
=
'
%
s
'
initDataType
=
'
%
s
'
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
pid
hexInitData
.
get
(
)
NS_ConvertUTF16toUTF8
(
aInitDataType
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
MediaKeySession
:
:
Load
(
const
nsAString
&
aSessionId
ErrorResult
&
aRv
)
{
RefPtr
<
DetailedPromise
>
promise
(
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
load
"
)
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
IsClosed
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
Session
is
closed
in
MediaKeySession
.
load
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Load
(
)
failed
closed
"
this
NS_ConvertUTF16toUTF8
(
aSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
if
(
!
mUninitialized
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
Session
is
already
initialized
in
MediaKeySession
.
load
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Load
(
)
failed
uninitialized
"
this
NS_ConvertUTF16toUTF8
(
aSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
mUninitialized
=
false
;
if
(
aSessionId
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
Trying
to
load
a
session
with
empty
session
ID
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
Load
(
)
failed
no
sessionId
"
this
)
;
return
promise
.
forget
(
)
;
}
if
(
mSessionType
=
=
MediaKeySessionType
:
:
Temporary
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
Trying
to
load
(
)
into
a
non
-
persistent
session
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
Load
(
)
failed
can
'
t
load
in
a
non
-
persistent
session
"
this
)
;
return
promise
.
forget
(
)
;
}
RefPtr
<
MediaKeySession
>
session
(
mKeys
-
>
GetPendingSession
(
Token
(
)
)
)
;
MOZ_ASSERT
(
session
=
=
this
"
Session
should
be
awaiting
id
on
its
own
token
"
)
;
SetSessionId
(
aSessionId
)
;
PromiseId
pid
=
mKeys
-
>
StorePromise
(
promise
)
;
mKeys
-
>
GetCDMProxy
(
)
-
>
LoadSession
(
pid
aSessionId
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Load
(
)
sent
to
CDM
promiseId
=
%
d
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
pid
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
MediaKeySession
:
:
Update
(
const
ArrayBufferViewOrArrayBuffer
&
aResponse
ErrorResult
&
aRv
)
{
RefPtr
<
DetailedPromise
>
promise
(
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
update
"
)
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
IsCallable
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
Update
(
)
called
before
sessionId
set
by
CDM
"
this
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
Update
(
)
called
before
sessionId
set
by
CDM
"
)
)
;
return
promise
.
forget
(
)
;
}
nsTArray
<
uint8_t
>
data
;
if
(
IsClosed
(
)
|
|
!
mKeys
-
>
GetCDMProxy
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
Session
is
closed
or
was
not
properly
initialized
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Update
(
)
failed
session
is
closed
or
was
not
properly
initialised
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
CopyArrayBufferViewOrArrayBufferData
(
aResponse
data
)
;
if
(
data
.
IsEmpty
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_TYPE_ERR
NS_LITERAL_CSTRING
(
"
Empty
response
buffer
passed
to
MediaKeySession
.
update
(
)
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Update
(
)
failed
empty
response
buffer
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
nsAutoCString
hexResponse
(
ToHexString
(
data
)
)
;
PromiseId
pid
=
mKeys
-
>
StorePromise
(
promise
)
;
mKeys
-
>
GetCDMProxy
(
)
-
>
UpdateSession
(
mSessionId
pid
data
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Update
(
)
sent
to
CDM
"
"
promiseId
=
%
d
Response
=
'
%
s
'
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
pid
hexResponse
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
already_AddRefed
<
Promise
>
MediaKeySession
:
:
Close
(
ErrorResult
&
aRv
)
{
RefPtr
<
DetailedPromise
>
promise
(
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
close
"
)
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
IsClosed
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Close
(
)
already
closed
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
promise
-
>
MaybeResolveWithUndefined
(
)
;
return
promise
.
forget
(
)
;
}
if
(
!
IsCallable
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
Close
(
)
called
before
sessionId
set
by
CDM
"
this
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
Close
(
)
called
before
sessionId
set
by
CDM
"
)
)
;
return
promise
.
forget
(
)
;
}
if
(
!
mKeys
-
>
GetCDMProxy
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Close
(
)
null
CDMProxy
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
Close
(
)
lost
reference
to
CDM
"
)
)
;
return
promise
.
forget
(
)
;
}
PromiseId
pid
=
mKeys
-
>
StorePromise
(
promise
)
;
mKeys
-
>
GetCDMProxy
(
)
-
>
CloseSession
(
mSessionId
pid
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Close
(
)
sent
to
CDM
promiseId
=
%
d
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
pid
)
;
return
promise
.
forget
(
)
;
}
void
MediaKeySession
:
:
OnClosed
(
)
{
if
(
IsClosed
(
)
)
{
return
;
}
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
session
close
operation
complete
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
mIsClosed
=
true
;
mKeys
-
>
OnSessionClosed
(
this
)
;
mKeys
=
nullptr
;
mClosed
-
>
MaybeResolveWithUndefined
(
)
;
}
bool
MediaKeySession
:
:
IsClosed
(
)
const
{
return
mIsClosed
;
}
already_AddRefed
<
Promise
>
MediaKeySession
:
:
Remove
(
ErrorResult
&
aRv
)
{
RefPtr
<
DetailedPromise
>
promise
(
MakePromise
(
aRv
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
remove
"
)
)
)
;
if
(
aRv
.
Failed
(
)
)
{
return
nullptr
;
}
if
(
!
IsCallable
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
'
]
Remove
(
)
called
before
sessionId
set
by
CDM
"
this
)
;
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
MediaKeySession
.
Remove
(
)
called
before
sessionId
set
by
CDM
"
)
)
;
return
promise
.
forget
(
)
;
}
if
(
mSessionType
!
=
MediaKeySessionType
:
:
Persistent_license
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_ACCESS_ERR
NS_LITERAL_CSTRING
(
"
Calling
MediaKeySession
.
remove
(
)
on
non
-
persistent
session
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Remove
(
)
failed
sesion
not
persisrtent
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
if
(
IsClosed
(
)
|
|
!
mKeys
-
>
GetCDMProxy
(
)
)
{
promise
-
>
MaybeReject
(
NS_ERROR_DOM_INVALID_STATE_ERR
NS_LITERAL_CSTRING
(
"
MediaKeySesison
.
remove
(
)
called
but
session
is
not
active
"
)
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Remove
(
)
failed
already
session
closed
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
)
;
return
promise
.
forget
(
)
;
}
PromiseId
pid
=
mKeys
-
>
StorePromise
(
promise
)
;
mKeys
-
>
GetCDMProxy
(
)
-
>
RemoveSession
(
mSessionId
pid
)
;
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
Remove
(
)
sent
to
CDM
promiseId
=
%
d
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
pid
)
;
return
promise
.
forget
(
)
;
}
void
MediaKeySession
:
:
DispatchKeyMessage
(
MediaKeyMessageType
aMessageType
const
nsTArray
<
uint8_t
>
&
aMessage
)
{
if
(
EME_LOG_ENABLED
(
)
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
DispatchKeyMessage
(
)
type
=
%
s
message
=
'
%
s
'
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
MediaKeyMessageTypeValues
:
:
strings
[
uint32_t
(
aMessageType
)
]
.
value
ToHexString
(
aMessage
)
.
get
(
)
)
;
}
RefPtr
<
MediaKeyMessageEvent
>
event
(
MediaKeyMessageEvent
:
:
Constructor
(
this
aMessageType
aMessage
)
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
event
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
void
MediaKeySession
:
:
DispatchKeyError
(
uint32_t
aSystemCode
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
DispatchKeyError
(
)
systemCode
=
%
u
.
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
aSystemCode
)
;
RefPtr
<
MediaKeyError
>
event
(
new
MediaKeyError
(
this
aSystemCode
)
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
event
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
void
MediaKeySession
:
:
DispatchKeyStatusesChange
(
)
{
if
(
IsClosed
(
)
)
{
return
;
}
UpdateKeyStatusMap
(
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
this
NS_LITERAL_STRING
(
"
keystatuseschange
"
)
false
)
;
asyncDispatcher
-
>
PostDOMEvent
(
)
;
}
uint32_t
MediaKeySession
:
:
Token
(
)
const
{
return
mToken
;
}
already_AddRefed
<
DetailedPromise
>
MediaKeySession
:
:
MakePromise
(
ErrorResult
&
aRv
const
nsACString
&
aName
)
{
nsCOMPtr
<
nsIGlobalObject
>
global
=
do_QueryInterface
(
GetParentObject
(
)
)
;
if
(
!
global
)
{
NS_WARNING
(
"
Passed
non
-
global
to
MediaKeys
ctor
!
"
)
;
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
nullptr
;
}
return
DetailedPromise
:
:
Create
(
global
aRv
aName
)
;
}
void
MediaKeySession
:
:
SetExpiration
(
double
aSecondsSinceEpoch
)
{
EME_LOG
(
"
MediaKeySession
[
%
p
'
%
s
'
]
SetExpiry
(
%
.
12lf
)
(
%
.
2lf
hours
from
now
)
"
this
NS_ConvertUTF16toUTF8
(
mSessionId
)
.
get
(
)
aSecondsSinceEpoch
aSecondsSinceEpoch
-
double
(
time
(
0
)
)
/
(
60
*
60
)
)
;
mExpiration
=
aSecondsSinceEpoch
;
}
EventHandlerNonNull
*
MediaKeySession
:
:
GetOnkeystatuseschange
(
)
{
return
GetEventHandler
(
nsGkAtoms
:
:
onkeystatuseschange
EmptyString
(
)
)
;
}
void
MediaKeySession
:
:
SetOnkeystatuseschange
(
EventHandlerNonNull
*
aCallback
)
{
SetEventHandler
(
nsGkAtoms
:
:
onkeystatuseschange
EmptyString
(
)
aCallback
)
;
}
EventHandlerNonNull
*
MediaKeySession
:
:
GetOnmessage
(
)
{
return
GetEventHandler
(
nsGkAtoms
:
:
onmessage
EmptyString
(
)
)
;
}
void
MediaKeySession
:
:
SetOnmessage
(
EventHandlerNonNull
*
aCallback
)
{
SetEventHandler
(
nsGkAtoms
:
:
onmessage
EmptyString
(
)
aCallback
)
;
}
}
}
