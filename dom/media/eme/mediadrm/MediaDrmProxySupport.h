#
ifndef
MediaDrmProxySupport_H
#
define
MediaDrmProxySupport_H
#
include
"
mozilla
/
DecryptorProxyCallback
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
java
/
MediaDrmProxyWrappers
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
enum
MediaDrmSessionType
{
kKeyStreaming
=
1
kKeyOffline
=
2
kKeyRelease
=
3
}
;
#
ifndef
MDRMN_LOG
LogModule
*
GetMDRMNLog
(
)
;
#
define
MDRMN_LOG
(
x
.
.
.
)
\
MOZ_LOG
(
GetMDRMNLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
[
MediaDrmProxySupport
]
[
%
s
]
"
x
__FUNCTION__
#
#
__VA_ARGS__
)
)
#
endif
class
MediaDrmCDMCallbackProxy
;
class
MediaDrmProxySupport
final
{
public
:
explicit
MediaDrmProxySupport
(
const
nsAString
&
aKeySystem
)
;
~
MediaDrmProxySupport
(
)
;
nsresult
Init
(
UniquePtr
<
MediaDrmCDMCallbackProxy
>
&
&
aCallback
)
;
void
CreateSession
(
uint32_t
aCreateSessionToken
uint32_t
aPromiseId
const
nsCString
&
aInitDataType
const
nsTArray
<
uint8_t
>
&
aInitData
MediaDrmSessionType
aSessionType
)
;
void
UpdateSession
(
uint32_t
aPromiseId
const
nsCString
&
aSessionId
const
nsTArray
<
uint8_t
>
&
aResponse
)
;
void
CloseSession
(
uint32_t
aPromiseId
const
nsCString
&
aSessionId
)
;
void
Shutdown
(
)
;
const
nsString
&
GetMediaDrmStubId
(
)
const
{
return
mMediaDrmStubId
;
}
bool
SetServerCertificate
(
const
nsTArray
<
uint8_t
>
&
aCert
)
;
private
:
const
nsString
mKeySystem
;
java
:
:
MediaDrmProxy
:
:
GlobalRef
mBridgeProxy
;
java
:
:
MediaDrmProxy
:
:
NativeMediaDrmProxyCallbacks
:
:
GlobalRef
mJavaCallbacks
;
bool
mDestroyed
;
nsString
mMediaDrmStubId
;
}
;
}
#
endif
