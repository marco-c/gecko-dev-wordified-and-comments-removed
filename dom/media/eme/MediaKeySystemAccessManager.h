#
ifndef
DOM_MEDIA_MEDIAKEYSYSTEMACCESSMANAGER_H_
#
define
DOM_MEDIA_MEDIAKEYSYSTEMACCESSMANAGER_H_
#
include
"
DecoderDoctorDiagnostics
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySystemAccess
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsITimer
.
h
"
namespace
mozilla
:
:
dom
{
class
DetailedPromise
;
class
TestGMPVideoDecoder
;
struct
MediaKeySystemAccessRequest
{
MediaKeySystemAccessRequest
(
const
nsAString
&
aKeySystem
const
Sequence
<
MediaKeySystemConfiguration
>
&
aConfigs
)
:
mKeySystem
(
aKeySystem
)
mConfigs
(
aConfigs
)
{
}
virtual
~
MediaKeySystemAccessRequest
(
)
=
default
;
const
nsString
mKeySystem
;
const
Sequence
<
MediaKeySystemConfiguration
>
mConfigs
;
DecoderDoctorDiagnostics
mDiagnostics
;
}
;
class
MediaKeySystemAccessManager
final
:
public
nsIObserver
public
nsINamed
{
public
:
explicit
MediaKeySystemAccessManager
(
nsPIDOMWindowInner
*
aWindow
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
MediaKeySystemAccessManager
nsIObserver
)
NS_DECL_NSIOBSERVER
NS_DECL_NSINAMED
void
Request
(
DetailedPromise
*
aPromise
const
nsAString
&
aKeySystem
const
Sequence
<
MediaKeySystemConfiguration
>
&
aConfig
)
;
void
Shutdown
(
)
;
private
:
struct
PendingRequest
:
public
MediaKeySystemAccessRequest
{
enum
class
RequestType
{
Initial
Subsequent
}
;
PendingRequest
(
DetailedPromise
*
aPromise
const
nsAString
&
aKeySystem
const
Sequence
<
MediaKeySystemConfiguration
>
&
aConfigs
)
;
~
PendingRequest
(
)
;
RefPtr
<
DetailedPromise
>
mPromise
;
RequestType
mRequestType
=
RequestType
:
:
Initial
;
Maybe
<
MediaKeySystemConfiguration
>
mSupportedConfig
;
nsCOMPtr
<
nsITimer
>
mTimer
=
nullptr
;
void
RejectPromiseWithInvalidAccessError
(
const
nsACString
&
aReason
)
;
void
RejectPromiseWithNotSupportedError
(
const
nsACString
&
aReason
)
;
void
RejectPromiseWithTypeError
(
const
nsACString
&
aReason
)
;
void
ResolvePromise
(
MediaKeySystemAccess
*
aAccess
)
;
void
CancelTimer
(
)
;
}
;
void
CheckDoesAppAllowProtectedMedia
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
OnDoesAppAllowProtectedMedia
(
bool
aIsAllowed
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
CheckDoesWindowSupportProtectedMedia
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
OnDoesWindowSupportProtectedMedia
(
bool
aIsSupportedInWindow
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
RequestMediaKeySystemAccess
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
ProvideAccess
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
~
MediaKeySystemAccessManager
(
)
;
bool
EnsureObserversAdded
(
)
;
bool
AwaitInstall
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
void
RetryRequest
(
UniquePtr
<
PendingRequest
>
aRequest
)
;
nsTArray
<
UniquePtr
<
PendingRequest
>
>
mPendingAppApprovalRequests
;
nsTArray
<
UniquePtr
<
PendingRequest
>
>
mPendingInstallRequests
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
bool
mAddedObservers
=
false
;
Maybe
<
bool
>
mAppAllowsProtectedMedia
;
MozPromiseRequestHolder
<
MozPromise
<
bool
bool
true
>
>
mAppAllowsProtectedMediaPromiseRequest
;
}
;
}
#
endif
