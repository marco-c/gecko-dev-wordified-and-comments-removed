#
ifndef
mozilla_dom_mediakeys_h__
#
define
mozilla_dom_mediakeys_h__
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeysBinding
.
h
"
#
include
"
mozIGeckoMediaPluginService
.
h
"
#
include
"
mozilla
/
DetailedPromise
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
class
CDMProxy
;
namespace
dom
{
class
ArrayBufferViewOrArrayBuffer
;
class
MediaKeySession
;
class
HTMLMediaElement
;
typedef
nsRefPtrHashtable
<
nsStringHashKey
MediaKeySession
>
KeySessionHashMap
;
typedef
nsRefPtrHashtable
<
nsUint32HashKey
dom
:
:
DetailedPromise
>
PromiseHashMap
;
typedef
nsRefPtrHashtable
<
nsUint32HashKey
MediaKeySession
>
PendingKeySessionsHashMap
;
typedef
uint32_t
PromiseId
;
class
MediaKeys
final
:
public
nsISupports
public
nsWrapperCache
public
SupportsWeakPtr
<
MediaKeys
>
{
~
MediaKeys
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
MediaKeys
)
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
MediaKeys
)
MediaKeys
(
nsPIDOMWindowInner
*
aParentWindow
const
nsAString
&
aKeySystem
const
nsAString
&
aCDMVersion
bool
aDistinctiveIdentifierRequired
bool
aPersistentStateRequired
)
;
already_AddRefed
<
DetailedPromise
>
Init
(
ErrorResult
&
aRv
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsresult
Bind
(
HTMLMediaElement
*
aElement
)
;
void
Unbind
(
)
;
void
GetKeySystem
(
nsString
&
retval
)
const
;
already_AddRefed
<
MediaKeySession
>
CreateSession
(
JSContext
*
aCx
MediaKeySessionType
aSessionType
ErrorResult
&
aRv
)
;
already_AddRefed
<
DetailedPromise
>
SetServerCertificate
(
const
ArrayBufferViewOrArrayBuffer
&
aServerCertificate
ErrorResult
&
aRv
)
;
already_AddRefed
<
MediaKeySession
>
GetSession
(
const
nsAString
&
aSessionId
)
;
already_AddRefed
<
MediaKeySession
>
GetPendingSession
(
uint32_t
aToken
)
;
void
OnCDMCreated
(
PromiseId
aId
const
nsACString
&
aNodeId
const
uint32_t
aPluginId
)
;
void
OnSessionIdReady
(
MediaKeySession
*
aSession
)
;
void
OnSessionLoaded
(
PromiseId
aId
bool
aSuccess
)
;
void
OnSessionClosed
(
MediaKeySession
*
aSession
)
;
CDMProxy
*
GetCDMProxy
(
)
{
return
mProxy
;
}
already_AddRefed
<
DetailedPromise
>
MakePromise
(
ErrorResult
&
aRv
const
nsACString
&
aName
)
;
PromiseId
StorePromise
(
DetailedPromise
*
aPromise
)
;
void
RejectPromise
(
PromiseId
aId
nsresult
aExceptionCode
const
nsCString
&
aReason
)
;
void
ResolvePromise
(
PromiseId
aId
)
;
const
nsCString
&
GetNodeId
(
)
const
;
void
Shutdown
(
)
;
void
Terminated
(
)
;
bool
IsBoundToMediaElement
(
)
const
;
private
:
bool
IsInPrivateBrowsing
(
)
;
already_AddRefed
<
DetailedPromise
>
RetrievePromise
(
PromiseId
aId
)
;
RefPtr
<
CDMProxy
>
mProxy
;
RefPtr
<
HTMLMediaElement
>
mElement
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
const
nsString
mKeySystem
;
const
nsString
mCDMVersion
;
nsCString
mNodeId
;
KeySessionHashMap
mKeySessions
;
PromiseHashMap
mPromises
;
PendingKeySessionsHashMap
mPendingSessions
;
PromiseId
mCreatePromiseId
;
RefPtr
<
nsIPrincipal
>
mPrincipal
;
RefPtr
<
nsIPrincipal
>
mTopLevelPrincipal
;
const
bool
mDistinctiveIdentifierRequired
;
const
bool
mPersistentStateRequired
;
}
;
}
}
#
endif
