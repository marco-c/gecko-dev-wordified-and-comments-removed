#
ifndef
EME_LOG_H_
#
define
EME_LOG_H_
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeyStatusMapBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaKeySystemAccessBinding
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
enum
class
CryptoScheme
:
uint8_t
;
#
ifdef
MOZ_WMF_CDM
class
MFCDMCapabilitiesIPDL
;
#
endif
struct
KeySystemConfig
;
namespace
dom
{
class
ArrayBufferViewOrArrayBuffer
;
class
Document
;
}
#
ifndef
EME_LOG
LogModule
*
GetEMELog
(
)
;
#
define
EME_LOG
(
.
.
.
)
\
MOZ_LOG
(
GetEMELog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
EME_LOG_ENABLED
(
)
MOZ_LOG_TEST
(
GetEMELog
(
)
mozilla
:
:
LogLevel
:
:
Debug
)
#
endif
#
ifndef
EME_VERBOSE_LOG
LogModule
*
GetEMEVerboseLog
(
)
;
#
define
EME_VERBOSE_LOG
(
.
.
.
)
\
MOZ_LOG
(
GetEMEVerboseLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
else
#
ifndef
EME_LOG
#
define
EME_LOG
(
.
.
.
)
#
endif
#
ifndef
EME_VERBOSE_LOG
#
define
EME_VERBOSE_LOG
(
.
.
.
)
#
endif
#
endif
void
CopyArrayBufferViewOrArrayBufferData
(
const
dom
:
:
ArrayBufferViewOrArrayBuffer
&
aBufferOrView
nsTArray
<
uint8_t
>
&
aOutData
)
;
nsString
KeySystemToProxyName
(
const
nsAString
&
aKeySystem
)
;
bool
IsClearkeyKeySystem
(
const
nsAString
&
aKeySystem
)
;
bool
IsWidevineKeySystem
(
const
nsAString
&
aKeySystem
)
;
#
ifdef
MOZ_WMF_CDM
bool
IsPlayReadyEnabled
(
)
;
bool
IsPlayReadyKeySystemAndSupported
(
const
nsAString
&
aKeySystem
)
;
bool
IsWidevineHardwareDecryptionEnabled
(
)
;
bool
IsWidevineExperimentKeySystemAndSupported
(
const
nsAString
&
aKeySystem
)
;
bool
IsWMFClearKeySystemAndSupported
(
const
nsAString
&
aKeySystem
)
;
#
endif
enum
CDMType
{
eClearKey
=
0
ePrimetime
=
1
eWidevine
=
2
eUnknown
=
3
}
;
CDMType
ToCDMTypeTelemetryEnum
(
const
nsString
&
aKeySystem
)
;
const
char
*
ToMediaKeyStatusStr
(
dom
:
:
MediaKeyStatus
aStatus
)
;
bool
IsHardwareDecryptionSupported
(
const
dom
:
:
MediaKeySystemConfiguration
&
aConfig
)
;
bool
IsHardwareDecryptionSupported
(
const
KeySystemConfig
&
aConfig
)
;
const
char
*
EncryptionSchemeStr
(
const
CryptoScheme
&
aScheme
)
;
#
ifdef
MOZ_WMF_CDM
void
MFCDMCapabilitiesIPDLToKeySystemConfig
(
const
MFCDMCapabilitiesIPDL
&
aCDMConfig
KeySystemConfig
&
aKeySystemConfig
)
;
#
endif
bool
DoesKeySystemSupportClearLead
(
const
nsAString
&
aKeySystem
)
;
bool
CheckIfHarewareDRMConfigExists
(
const
nsTArray
<
dom
:
:
MediaKeySystemConfiguration
>
&
aConfigs
)
;
bool
DoesKeySystemSupportHardwareDecryption
(
const
nsAString
&
aKeySystem
)
;
void
DeprecationWarningLog
(
const
dom
:
:
Document
*
aDocument
const
char
*
aMsgName
)
;
}
#
endif
