#
ifndef
EME_LOG_H_
#
define
EME_LOG_H_
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
ArrayBufferViewOrArrayBuffer
;
}
#
ifndef
EME_LOG
LogModule
*
GetEMELog
(
)
;
#
define
EME_LOG
(
.
.
.
)
\
MOZ_LOG
(
GetEMELog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
EME_LOG_ENABLED
(
)
MOZ_LOG_TEST
(
GetEMELog
(
)
mozilla
:
:
LogLevel
:
:
Debug
)
#
endif
#
ifndef
EME_VERBOSE_LOG
LogModule
*
GetEMEVerboseLog
(
)
;
#
define
EME_VERBOSE_LOG
(
.
.
.
)
\
MOZ_LOG
(
GetEMEVerboseLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
else
#
ifndef
EME_LOG
#
define
EME_LOG
(
.
.
.
)
#
endif
#
ifndef
EME_VERBOSE_LOG
#
define
EME_VERBOSE_LOG
(
.
.
.
)
#
endif
#
endif
void
CopyArrayBufferViewOrArrayBufferData
(
const
dom
:
:
ArrayBufferViewOrArrayBuffer
&
aBufferOrView
nsTArray
<
uint8_t
>
&
aOutData
)
;
struct
ArrayData
{
explicit
ArrayData
(
const
uint8_t
*
aData
size_t
aLength
)
:
mData
(
aData
)
mLength
(
aLength
)
{
}
const
uint8_t
*
mData
;
const
size_t
mLength
;
bool
IsValid
(
)
const
{
return
mData
!
=
nullptr
&
&
mLength
!
=
0
;
}
bool
operator
=
=
(
const
nsTArray
<
uint8_t
>
&
aOther
)
const
{
return
mLength
=
=
aOther
.
Length
(
)
&
&
memcmp
(
mData
aOther
.
Elements
(
)
mLength
)
=
=
0
;
}
}
;
ArrayData
GetArrayBufferViewOrArrayBufferData
(
const
dom
:
:
ArrayBufferViewOrArrayBuffer
&
aBufferOrView
)
;
nsString
KeySystemToProxyName
(
const
nsAString
&
aKeySystem
)
;
bool
IsClearkeyKeySystem
(
const
nsAString
&
aKeySystem
)
;
bool
IsWidevineKeySystem
(
const
nsAString
&
aKeySystem
)
;
#
ifdef
MOZ_MF_CDM
bool
IsPlayReadyKeySystem
(
const
nsAString
&
aKeySystem
)
;
#
endif
enum
CDMType
{
eClearKey
=
0
ePrimetime
=
1
eWidevine
=
2
eUnknown
=
3
}
;
CDMType
ToCDMTypeTelemetryEnum
(
const
nsString
&
aKeySystem
)
;
}
#
endif
