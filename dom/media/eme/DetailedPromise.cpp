#
include
"
DetailedPromise
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
dom
/
DOMException
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
:
:
dom
{
DetailedPromise
:
:
DetailedPromise
(
nsIGlobalObject
*
aGlobal
const
nsACString
&
aName
)
:
Promise
(
aGlobal
)
mName
(
aName
)
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
}
DetailedPromise
:
:
~
DetailedPromise
(
)
{
}
void
DetailedPromise
:
:
LogRejectionReason
(
uint32_t
aErrorCode
const
nsACString
&
aReason
)
{
nsPrintfCString
msg
(
"
%
s
promise
rejected
0x
%
"
PRIx32
"
'
%
s
'
"
mName
.
get
(
)
aErrorCode
PromiseFlatCString
(
aReason
)
.
get
(
)
)
;
EME_LOG
(
"
%
s
"
msg
.
get
(
)
)
;
LogToBrowserConsole
(
NS_ConvertUTF8toUTF16
(
msg
)
)
;
}
void
DetailedPromise
:
:
MaybeReject
(
nsresult
aArg
const
nsACString
&
aReason
)
{
LogRejectionReason
(
static_cast
<
uint32_t
>
(
aArg
)
aReason
)
;
Promise
:
:
MaybeRejectWithDOMException
(
aArg
aReason
)
;
}
void
DetailedPromise
:
:
MaybeReject
(
ErrorResult
&
&
aArg
const
nsACString
&
aReason
)
{
LogRejectionReason
(
aArg
.
ErrorCodeAsInt
(
)
aReason
)
;
Promise
:
:
MaybeReject
(
std
:
:
move
(
aArg
)
)
;
}
already_AddRefed
<
DetailedPromise
>
DetailedPromise
:
:
Create
(
nsIGlobalObject
*
aGlobal
ErrorResult
&
aRv
const
nsACString
&
aName
)
{
RefPtr
<
DetailedPromise
>
promise
=
new
DetailedPromise
(
aGlobal
aName
)
;
promise
-
>
CreateWrapper
(
aRv
)
;
return
aRv
.
Failed
(
)
?
nullptr
:
promise
.
forget
(
)
;
}
}
