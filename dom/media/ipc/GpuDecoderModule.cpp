#
include
"
GpuDecoderModule
.
h
"
#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
using
namespace
layers
;
using
namespace
gfx
;
nsresult
GpuDecoderModule
:
:
Startup
(
)
{
if
(
!
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
mWrapped
-
>
Startup
(
)
;
}
bool
GpuDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
mWrapped
-
>
SupportsMimeType
(
aMimeType
aDiagnostics
)
;
}
bool
GpuDecoderModule
:
:
Supports
(
const
TrackInfo
&
aTrackInfo
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
mWrapped
-
>
Supports
(
aTrackInfo
aDiagnostics
)
;
}
static
inline
bool
IsRemoteAcceleratedCompositor
(
KnowsCompositor
*
aKnows
)
{
TextureFactoryIdentifier
ident
=
aKnows
-
>
GetTextureFactoryIdentifier
(
)
;
return
ident
.
mParentBackend
!
=
LayersBackend
:
:
LAYERS_BASIC
&
&
!
ident
.
mUsingSoftwareWebRender
&
&
ident
.
mParentProcessType
=
=
GeckoProcessType_GPU
;
}
already_AddRefed
<
MediaDataDecoder
>
GpuDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
if
(
!
StaticPrefs
:
:
media_gpu_process_decoder
(
)
|
|
!
aParams
.
mKnowsCompositor
|
|
!
IsRemoteAcceleratedCompositor
(
aParams
.
mKnowsCompositor
)
)
{
return
mWrapped
-
>
CreateVideoDecoder
(
aParams
)
;
}
RefPtr
<
GpuRemoteVideoDecoderChild
>
child
=
new
GpuRemoteVideoDecoderChild
(
)
;
MediaResult
result
(
NS_OK
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
dom
:
:
GpuDecoderModule
:
:
CreateVideoDecoder
"
[
&
]
(
)
{
result
=
child
-
>
InitIPDL
(
aParams
.
VideoConfig
(
)
aParams
.
mRate
.
mValue
aParams
.
mOptions
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
)
;
if
(
NS_FAILED
(
result
)
)
{
child
=
nullptr
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
task
)
;
if
(
NS_FAILED
(
result
)
)
{
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
result
;
}
return
nullptr
;
}
RefPtr
<
RemoteMediaDataDecoder
>
object
=
new
RemoteMediaDataDecoder
(
child
)
;
return
object
.
forget
(
)
;
}
}
