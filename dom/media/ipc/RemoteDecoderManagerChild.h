#
ifndef
include_dom_media_ipc_RemoteDecoderManagerChild_h
#
define
include_dom_media_ipc_RemoteDecoderManagerChild_h
#
include
"
GPUVideoImage
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
EnumTypeTraits
.
h
"
#
include
"
mozilla
/
PRemoteDecoderManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
VideoBridgeUtils
.
h
"
namespace
mozilla
{
class
RemoteDecoderChild
;
enum
class
RemoteDecodeIn
{
Unspecified
RddProcess
GpuProcess
UtilityProcess
SENTINEL
}
;
class
RemoteDecoderManagerChild
final
:
public
PRemoteDecoderManagerChild
public
mozilla
:
:
ipc
:
:
IShmemAllocator
public
mozilla
:
:
layers
:
:
IGPUVideoSurfaceManager
{
friend
class
PRemoteDecoderManagerChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteDecoderManagerChild
override
)
static
RemoteDecoderManagerChild
*
GetSingleton
(
RemoteDecodeIn
aLocation
)
;
static
void
Init
(
)
;
static
void
SetSupported
(
RemoteDecodeIn
aLocation
const
PDMFactory
:
:
MediaCodecsSupported
&
aSupported
)
;
static
bool
Supports
(
RemoteDecodeIn
aLocation
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
RemoteDecodeIn
aLocation
)
;
static
nsISerialEventTarget
*
GetManagerThread
(
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
void
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PRemoteDecoderManagerChild
:
:
AllocShmem
(
aSize
aShmType
aShmem
)
;
}
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PRemoteDecoderManagerChild
:
:
AllocUnsafeShmem
(
aSize
aShmType
aShmem
)
;
}
bool
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
static
void
InitForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
;
static
void
Shutdown
(
)
;
void
RunWhenGPUProcessRecreated
(
already_AddRefed
<
Runnable
>
aTask
)
;
RemoteDecodeIn
Location
(
)
const
{
return
mLocation
;
}
layers
:
:
VideoBridgeSource
GetSource
(
)
const
;
protected
:
void
InitIPDL
(
)
;
void
ActorDealloc
(
)
override
;
void
HandleFatalError
(
const
char
*
aMsg
)
const
override
;
PRemoteDecoderChild
*
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
aRemoteDecoderInfo
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
)
;
bool
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
;
private
:
explicit
RemoteDecoderManagerChild
(
RemoteDecodeIn
aLocation
)
;
~
RemoteDecoderManagerChild
(
)
=
default
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
Construct
(
RefPtr
<
RemoteDecoderChild
>
&
&
aChild
)
;
static
void
OpenForRDDProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
;
static
void
OpenForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
;
static
void
OpenForUtilityProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
;
static
RefPtr
<
GenericNonExclusivePromise
>
LaunchRDDProcessIfNeeded
(
)
;
static
RefPtr
<
GenericNonExclusivePromise
>
LaunchUtilityProcessIfNeeded
(
)
;
RefPtr
<
RemoteDecoderManagerChild
>
mIPDLSelfRef
;
const
RemoteDecodeIn
mLocation
;
}
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
RemoteDecodeIn
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
RemoteDecodeIn
mozilla
:
:
RemoteDecodeIn
:
:
Unspecified
mozilla
:
:
RemoteDecodeIn
:
:
SENTINEL
>
{
}
;
}
#
endif
