#
ifndef
include_ipc_VideoDecoderManagerChild_h
#
define
include_ipc_VideoDecoderManagerChild_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
PVideoDecoderManagerChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurface
;
}
class
VideoDecoderManagerChild
final
:
public
PVideoDecoderManagerChild
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
friend
class
PVideoDecoderManagerChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoDecoderManagerChild
)
static
VideoDecoderManagerChild
*
GetSingleton
(
)
;
static
nsIThread
*
GetManagerThread
(
)
;
static
AbstractThread
*
GetManagerAbstractThread
(
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
;
void
DeallocateSurfaceDescriptorGPUVideo
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
;
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PVideoDecoderManagerChild
:
:
AllocShmem
(
aSize
aShmType
aShmem
)
;
}
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PVideoDecoderManagerChild
:
:
AllocUnsafeShmem
(
aSize
aShmType
aShmem
)
;
}
bool
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
static
void
InitForContent
(
Endpoint
<
PVideoDecoderManagerChild
>
&
&
aVideoManager
)
;
static
void
Shutdown
(
)
;
void
RunWhenRecreated
(
already_AddRefed
<
Runnable
>
aTask
)
;
bool
CanSend
(
)
;
protected
:
void
InitIPDL
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
DeallocPVideoDecoderManagerChild
(
)
override
;
void
HandleFatalError
(
const
char
*
aMsg
)
const
override
;
PVideoDecoderChild
*
AllocPVideoDecoderChild
(
const
VideoInfo
&
aVideoInfo
const
float
&
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
bool
*
aSuccess
nsCString
*
aBlacklistedD3D11Driver
nsCString
*
aBlacklistedD3D9Driver
nsCString
*
aErrorDescription
)
override
;
bool
DeallocPVideoDecoderChild
(
PVideoDecoderChild
*
actor
)
override
;
private
:
static
void
InitializeThread
(
)
;
VideoDecoderManagerChild
(
)
:
mCanSend
(
false
)
{
}
~
VideoDecoderManagerChild
(
)
{
}
static
void
Open
(
Endpoint
<
PVideoDecoderManagerChild
>
&
&
aEndpoint
)
;
RefPtr
<
VideoDecoderManagerChild
>
mIPDLSelfRef
;
bool
mCanSend
;
}
;
}
#
endif
