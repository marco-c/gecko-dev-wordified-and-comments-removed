#
include
"
RemoteDecoderModule
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
ifdef
MOZ_AV1
#
include
"
AOMDecoder
.
h
"
#
endif
#
include
"
RemoteAudioDecoder
.
h
"
#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
VorbisDecoder
.
h
"
#
include
"
WAVDecoder
.
h
"
namespace
mozilla
{
using
base
:
:
Thread
;
using
dom
:
:
ContentChild
;
using
namespace
ipc
;
using
namespace
layers
;
RemoteDecoderModule
:
:
RemoteDecoderModule
(
)
:
mManagerThread
(
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
)
{
}
bool
RemoteDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
bool
supports
=
false
;
#
ifdef
MOZ_AV1
if
(
StaticPrefs
:
:
media_av1_enabled
(
)
)
{
supports
|
=
AOMDecoder
:
:
IsAV1
(
aMimeType
)
;
}
#
endif
if
(
StaticPrefs
:
:
media_rdd_vorbis_enabled
(
)
)
{
supports
|
=
VorbisDataDecoder
:
:
IsVorbis
(
aMimeType
)
;
}
if
(
StaticPrefs
:
:
media_rdd_wav_enabled
(
)
)
{
supports
|
=
WaveDataDecoder
:
:
IsWave
(
aMimeType
)
;
}
MOZ_LOG
(
sPDMLog
LogLevel
:
:
Debug
(
"
Sandbox
decoder
%
s
requested
type
"
supports
?
"
supports
"
:
"
rejects
"
)
)
;
return
supports
;
}
void
RemoteDecoderModule
:
:
LaunchRDDProcessIfNeeded
(
)
{
if
(
!
XRE_IsContentProcess
(
)
)
{
return
;
}
bool
needsLaunch
=
true
;
if
(
mManagerThread
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderModule
:
:
LaunchRDDProcessIfNeeded
-
CheckSend
"
[
&
]
(
)
{
if
(
RemoteDecoderManagerChild
:
:
GetRDDProcessSingleton
(
)
)
{
needsLaunch
=
!
RemoteDecoderManagerChild
:
:
GetRDDProcessSingleton
(
)
-
>
CanSend
(
)
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
mManagerThread
task
)
;
}
if
(
needsLaunch
)
{
ContentChild
:
:
GetSingleton
(
)
-
>
LaunchRDDProcess
(
)
;
mManagerThread
=
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
;
}
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
LaunchRDDProcessIfNeeded
(
)
;
if
(
!
mManagerThread
)
{
return
nullptr
;
}
RefPtr
<
RemoteAudioDecoderChild
>
child
=
new
RemoteAudioDecoderChild
(
)
;
MediaResult
result
(
NS_OK
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderModule
:
:
CreateAudioDecoder
"
[
&
]
(
)
{
result
=
child
-
>
InitIPDL
(
aParams
.
AudioConfig
(
)
aParams
.
mOptions
)
;
if
(
NS_FAILED
(
result
)
)
{
child
=
nullptr
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
mManagerThread
task
)
;
if
(
NS_FAILED
(
result
)
)
{
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
result
;
}
return
nullptr
;
}
RefPtr
<
RemoteMediaDataDecoder
>
object
=
new
RemoteMediaDataDecoder
(
child
mManagerThread
RemoteDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
)
;
return
object
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
LaunchRDDProcessIfNeeded
(
)
;
if
(
!
mManagerThread
)
{
return
nullptr
;
}
RefPtr
<
RemoteVideoDecoderChild
>
child
=
new
RemoteVideoDecoderChild
(
)
;
MediaResult
result
(
NS_OK
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderModule
:
:
CreateVideoDecoder
"
[
&
]
(
)
{
result
=
child
-
>
InitIPDL
(
aParams
.
VideoConfig
(
)
aParams
.
mRate
.
mValue
aParams
.
mOptions
aParams
.
mKnowsCompositor
?
&
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
:
nullptr
)
;
if
(
NS_FAILED
(
result
)
)
{
child
=
nullptr
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
mManagerThread
task
)
;
if
(
NS_FAILED
(
result
)
)
{
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
result
;
}
return
nullptr
;
}
RefPtr
<
RemoteMediaDataDecoder
>
object
=
new
RemoteMediaDataDecoder
(
child
mManagerThread
RemoteDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
)
;
return
object
.
forget
(
)
;
}
}
