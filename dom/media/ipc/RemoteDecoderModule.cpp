#
include
"
RemoteDecoderModule
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
ifdef
MOZ_AV1
#
include
"
AOMDecoder
.
h
"
#
endif
#
include
"
OpusDecoder
.
h
"
#
include
"
RemoteAudioDecoder
.
h
"
#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
VorbisDecoder
.
h
"
#
include
"
WAVDecoder
.
h
"
#
include
"
nsIXULRuntime
.
h
"
namespace
mozilla
{
using
dom
:
:
ContentChild
;
using
namespace
ipc
;
using
namespace
layers
;
void
RemoteDecoderModule
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
BrowserTabsRemoteAutostart
(
)
)
{
RemoteDecoderManagerChild
:
:
InitializeThread
(
)
;
}
}
already_AddRefed
<
PlatformDecoderModule
>
RemoteDecoderModule
:
:
Create
(
)
{
MOZ_ASSERT
(
!
XRE_IsGPUProcess
(
)
&
&
!
XRE_IsRDDProcess
(
)
"
Should
not
be
created
in
GPU
or
RDD
process
.
"
)
;
if
(
!
XRE_IsContentProcess
(
)
)
{
return
nullptr
;
}
return
MakeAndAddRef
<
RemoteDecoderModule
>
(
)
;
}
bool
RemoteDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
bool
supports
=
false
;
#
ifdef
MOZ_AV1
if
(
StaticPrefs
:
:
media_av1_enabled
(
)
)
{
supports
|
=
AOMDecoder
:
:
IsAV1
(
aMimeType
)
;
}
#
endif
#
if
!
defined
(
__MINGW32__
)
if
(
StaticPrefs
:
:
media_rdd_vorbis_enabled
(
)
)
{
supports
|
=
VorbisDataDecoder
:
:
IsVorbis
(
aMimeType
)
;
}
#
endif
if
(
StaticPrefs
:
:
media_rdd_wav_enabled
(
)
)
{
supports
|
=
WaveDataDecoder
:
:
IsWave
(
aMimeType
)
;
}
if
(
StaticPrefs
:
:
media_rdd_opus_enabled
(
)
)
{
supports
|
=
OpusDataDecoder
:
:
IsOpus
(
aMimeType
)
;
}
MOZ_LOG
(
sPDMLog
LogLevel
:
:
Debug
(
"
Sandbox
decoder
%
s
requested
type
"
supports
?
"
supports
"
:
"
rejects
"
)
)
;
return
supports
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
(
)
;
if
(
OpusDataDecoder
:
:
IsOpus
(
aParams
.
mConfig
.
mMimeType
)
&
&
IsDefaultPlaybackDeviceMono
(
)
)
{
CreateDecoderParams
params
=
aParams
;
params
.
mOptions
+
=
CreateDecoderParams
:
:
Option
:
:
DefaultPlaybackDeviceMono
;
return
RemoteDecoderManagerChild
:
:
CreateAudioDecoder
(
params
)
;
}
return
RemoteDecoderManagerChild
:
:
CreateAudioDecoder
(
aParams
)
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
(
)
;
return
RemoteDecoderManagerChild
:
:
CreateVideoDecoder
(
aParams
RemoteDecodeIn
:
:
RddProcess
)
;
}
}
