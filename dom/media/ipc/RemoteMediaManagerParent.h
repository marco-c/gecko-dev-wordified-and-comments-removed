#
ifndef
include_dom_media_ipc_RemoteMediaManagerParent_h
#
define
include_dom_media_ipc_RemoteMediaManagerParent_h
#
include
"
GPUVideoImage
.
h
"
#
include
"
mozilla
/
PRemoteMediaManagerParent
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
layers
/
VideoBridgeChild
.
h
"
namespace
mozilla
{
class
PDMFactory
;
class
PMFCDMParent
;
class
PMFMediaEngineParent
;
class
RemoteMediaManagerParent
final
:
public
PRemoteMediaManagerParent
public
layers
:
:
IGPUVideoSurfaceManager
{
friend
class
PRemoteMediaManagerParent
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteMediaManagerParent
override
)
static
bool
CreateForContent
(
Endpoint
<
PRemoteMediaManagerParent
>
&
&
aEndpoint
dom
:
:
ContentParentId
aContentId
)
;
static
bool
CreateVideoBridgeToOtherProcess
(
Endpoint
<
layers
:
:
PVideoBridgeChild
>
&
&
aEndpoint
)
;
void
StoreImage
(
const
SurfaceDescriptorGPUVideo
&
aSD
layers
:
:
Image
*
aImage
layers
:
:
TextureClient
*
aTexture
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
usable
from
the
parent
"
)
;
return
nullptr
;
}
already_AddRefed
<
layers
:
:
Image
>
TransferToImage
(
const
SurfaceDescriptorGPUVideo
&
aSD
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
ColorDepth
&
aColorDepth
gfx
:
:
YUVColorSpace
aYUVColorSpace
gfx
:
:
ColorSpace2
aColorPrimaries
gfx
:
:
TransferFunction
aTransferFunction
gfx
:
:
ColorRange
aColorRange
)
override
;
void
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
void
OnSetCurrent
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
usable
from
the
parent
"
)
;
}
static
bool
StartupThreads
(
)
;
static
void
ShutdownThreads
(
)
;
static
void
ShutdownVideoBridge
(
)
;
bool
OnManagerThread
(
)
;
static
void
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
)
;
PDMFactory
&
EnsurePDMFactory
(
)
;
const
dom
:
:
ContentParentId
&
GetContentId
(
)
const
{
return
mContentId
;
}
protected
:
PRemoteDecoderParent
*
AllocPRemoteDecoderParent
(
const
RemoteDecoderInfoIPDL
&
aRemoteDecoderInfo
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
const
Maybe
<
uint64_t
>
&
aMediaEngineId
const
Maybe
<
TrackingId
>
&
aTrackingId
PRemoteCDMParent
*
aCDM
)
;
bool
DeallocPRemoteDecoderParent
(
PRemoteDecoderParent
*
actor
)
;
already_AddRefed
<
PRemoteEncoderParent
>
AllocPRemoteEncoderParent
(
const
EncoderConfig
&
aConfig
)
;
PMFMediaEngineParent
*
AllocPMFMediaEngineParent
(
)
;
bool
DeallocPMFMediaEngineParent
(
PMFMediaEngineParent
*
actor
)
;
PMFCDMParent
*
AllocPMFCDMParent
(
const
nsAString
&
aKeySystem
)
;
bool
DeallocPMFCDMParent
(
PMFCDMParent
*
actor
)
;
PRemoteCDMParent
*
AllocPRemoteCDMParent
(
const
nsAString
&
aKeySystem
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReadback
(
const
SurfaceDescriptorGPUVideo
&
aSD
SurfaceDescriptor
*
aResult
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeallocateSurfaceDescriptorGPUVideo
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvOnSetCurrent
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
;
void
ActorDestroy
(
mozilla
:
:
ipc
:
:
IProtocol
:
:
ActorDestroyReason
)
override
;
private
:
RemoteMediaManagerParent
(
nsISerialEventTarget
*
aThread
dom
:
:
ContentParentId
aContentId
)
;
~
RemoteMediaManagerParent
(
)
;
void
Open
(
Endpoint
<
PRemoteMediaManagerParent
>
&
&
aEndpoint
)
;
std
:
:
map
<
uint64_t
RefPtr
<
layers
:
:
Image
>
>
mImageMap
;
std
:
:
map
<
uint64_t
RefPtr
<
layers
:
:
TextureClient
>
>
mTextureMap
;
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
RefPtr
<
PDMFactory
>
mPDMFactory
;
dom
:
:
ContentParentId
mContentId
;
}
;
}
#
endif
