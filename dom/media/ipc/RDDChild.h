#
ifndef
_include_dom_media_ipc_RDDChild_h_
#
define
_include_dom_media_ipc_RDDChild_h_
#
include
"
mozilla
/
PRDDChild
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterHelper
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
namespace
mozilla
{
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
class
SandboxBroker
;
#
endif
namespace
dom
{
class
MemoryReportRequestHost
;
}
class
RDDProcessHost
;
class
RDDChild
final
:
public
PRDDChild
public
ipc
:
:
CrashReporterHelper
<
GeckoProcessType_RDD
>
public
gfx
:
:
gfxVarReceiver
{
typedef
mozilla
:
:
dom
:
:
MemoryReportRequestHost
MemoryReportRequestHost
;
public
:
explicit
RDDChild
(
RDDProcessHost
*
aHost
)
;
~
RDDChild
(
)
;
bool
Init
(
bool
aStartMacSandbox
)
;
void
OnVarChanged
(
const
GfxVarUpdate
&
aVar
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddMemoryReport
(
const
MemoryReport
&
aReport
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvFinishMemoryReport
(
const
uint32_t
&
aGeneration
)
;
bool
SendRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aDMDFile
)
;
static
void
Destroy
(
UniquePtr
<
RDDChild
>
&
&
aChild
)
;
private
:
RDDProcessHost
*
mHost
;
UniquePtr
<
MemoryReportRequestHost
>
mMemoryReportRequest
;
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
UniquePtr
<
SandboxBroker
>
mSandboxBroker
;
#
endif
}
;
}
#
endif
