#
include
"
RDDParent
.
h
"
#
if
defined
(
XP_WIN
)
#
include
<
process
.
h
>
#
include
<
dwrite
.
h
>
#
endif
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
HangDetails
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerChild
.
h
"
#
include
"
mozilla
/
RemoteDecoderManagerParent
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
MemoryReportRequest
.
h
"
#
include
"
mozilla
/
ipc
/
CrashReporterClient
.
h
"
#
include
"
mozilla
/
ipc
/
ProcessChild
.
h
"
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
endif
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ChildProfilerController
.
h
"
#
endif
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
Sandbox
.
h
"
#
include
"
nsMacUtilsImpl
.
h
"
#
include
<
Carbon
/
Carbon
.
h
>
#
endif
#
include
"
nsDebugImpl
.
h
"
#
include
"
nsThreadManager
.
h
"
#
include
"
ProcessUtils
.
h
"
namespace
mozilla
{
using
namespace
ipc
;
static
RDDParent
*
sRDDParent
;
RDDParent
:
:
RDDParent
(
)
:
mLaunchTime
(
TimeStamp
:
:
Now
(
)
)
{
sRDDParent
=
this
;
}
RDDParent
:
:
~
RDDParent
(
)
{
sRDDParent
=
nullptr
;
}
RDDParent
*
RDDParent
:
:
GetSingleton
(
)
{
return
sRDDParent
;
}
bool
RDDParent
:
:
Init
(
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
MessageLoop
*
aIOLoop
IPC
:
:
Channel
*
aChannel
)
{
if
(
NS_WARN_IF
(
NS_FAILED
(
nsThreadManager
:
:
get
(
)
.
Init
(
)
)
)
)
{
return
false
;
}
if
(
NS_WARN_IF
(
!
Open
(
aChannel
aParentPid
aIOLoop
)
)
)
{
return
false
;
}
nsDebugImpl
:
:
SetMultiprocessMode
(
"
RDD
"
)
;
MessageChannel
*
channel
=
GetIPCChannel
(
)
;
if
(
channel
&
&
!
channel
-
>
SendBuildIDsMatchMessage
(
aParentBuildID
)
)
{
ProcessChild
:
:
QuickExit
(
)
;
}
CrashReporterClient
:
:
InitSingleton
(
this
)
;
if
(
NS_FAILED
(
NS_InitMinimalXPCOM
(
)
)
)
{
return
false
;
}
mozilla
:
:
ipc
:
:
SetThisProcessName
(
"
RDD
Process
"
)
;
return
true
;
}
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
extern
"
C
"
{
CGError
CGSSetDenyWindowServerConnections
(
bool
)
;
void
CGSShutdownServerConnections
(
)
;
}
;
static
void
StartRDDMacSandbox
(
)
{
CGSShutdownServerConnections
(
)
;
CGError
result
=
CGSSetDenyWindowServerConnections
(
true
)
;
MOZ_DIAGNOSTIC_ASSERT
(
result
=
=
kCGErrorSuccess
)
;
#
if
!
MOZ_DIAGNOSTIC_ASSERT_ENABLED
Unused
<
<
result
;
#
endif
nsAutoCString
appPath
;
nsMacUtilsImpl
:
:
GetAppPath
(
appPath
)
;
MacSandboxInfo
info
;
info
.
type
=
MacSandboxType_Utility
;
info
.
shouldLog
=
Preferences
:
:
GetBool
(
"
security
.
sandbox
.
logging
.
enabled
"
)
|
|
PR_GetEnv
(
"
MOZ_SANDBOX_LOGGING
"
)
;
info
.
appPath
.
assign
(
appPath
.
get
(
)
)
;
info
.
appBinaryPath
.
assign
(
"
/
dev
/
null
"
)
;
info
.
pluginInfo
.
pluginBinaryPath
.
assign
(
"
/
dev
/
null
"
)
;
std
:
:
string
err
;
bool
rv
=
mozilla
:
:
StartMacSandbox
(
info
err
)
;
if
(
!
rv
)
{
NS_WARNING
(
err
.
c_str
(
)
)
;
MOZ_CRASH
(
"
mozilla
:
:
StartMacSandbox
failed
"
)
;
}
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
RDDParent
:
:
RecvInit
(
const
Maybe
<
FileDescriptor
>
&
aBrokerFd
)
{
Unused
<
<
SendInitComplete
(
)
;
#
if
defined
(
MOZ_SANDBOX
)
#
if
defined
(
XP_MACOSX
)
StartRDDMacSandbox
(
)
;
#
elif
defined
(
XP_LINUX
)
int
fd
=
-
1
;
if
(
aBrokerFd
.
isSome
(
)
)
{
fd
=
aBrokerFd
.
value
(
)
.
ClonePlatformHandle
(
)
.
release
(
)
;
}
SetRemoteDataDecoderSandbox
(
fd
)
;
#
endif
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RDDParent
:
:
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
{
#
ifdef
MOZ_GECKO_PROFILER
mProfilerController
=
ChildProfilerController
:
:
Create
(
std
:
:
move
(
aEndpoint
)
)
;
#
endif
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RDDParent
:
:
RecvNewContentRemoteDecoderManager
(
Endpoint
<
PRemoteDecoderManagerParent
>
&
&
aEndpoint
)
{
if
(
!
RemoteDecoderManagerParent
:
:
CreateForContent
(
std
:
:
move
(
aEndpoint
)
)
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RDDParent
:
:
RecvRequestMemoryReport
(
const
uint32_t
&
aGeneration
const
bool
&
aAnonymize
const
bool
&
aMinimizeMemoryUsage
const
Maybe
<
FileDescriptor
>
&
aDMDFile
)
{
nsPrintfCString
processName
(
"
RDD
(
pid
%
u
)
"
(
unsigned
)
getpid
(
)
)
;
mozilla
:
:
dom
:
:
MemoryReportRequestClient
:
:
Start
(
aGeneration
aAnonymize
aMinimizeMemoryUsage
aDMDFile
processName
[
&
]
(
const
MemoryReport
&
aReport
)
{
Unused
<
<
GetSingleton
(
)
-
>
SendAddMemoryReport
(
aReport
)
;
}
[
&
]
(
const
uint32_t
&
aGeneration
)
{
return
GetSingleton
(
)
-
>
SendFinishMemoryReport
(
aGeneration
)
;
}
)
;
return
IPC_OK
(
)
;
}
void
RDDParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
if
(
AbnormalShutdown
=
=
aWhy
)
{
NS_WARNING
(
"
Shutting
down
RDD
process
early
due
to
a
crash
!
"
)
;
ProcessChild
:
:
QuickExit
(
)
;
}
#
ifndef
NS_FREE_PERMANENT_DATA
ProcessChild
:
:
QuickExit
(
)
;
#
endif
#
ifdef
MOZ_GECKO_PROFILER
if
(
mProfilerController
)
{
mProfilerController
-
>
Shutdown
(
)
;
mProfilerController
=
nullptr
;
}
#
endif
CrashReporterClient
:
:
DestroySingleton
(
)
;
XRE_ShutdownChildProcess
(
)
;
}
}
