#
ifndef
include_dom_media_ipc_RemoteDecoderParent_h
#
define
include_dom_media_ipc_RemoteDecoderParent_h
#
include
"
mozilla
/
PRemoteDecoderParent
.
h
"
#
include
"
mozilla
/
ShmemPool
.
h
"
namespace
mozilla
{
class
RemoteDecoderManagerParent
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
RemoteDecoderParent
:
public
PRemoteDecoderParent
{
friend
class
PRemoteDecoderParent
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteDecoderParent
)
RemoteDecoderParent
(
RemoteDecoderManagerParent
*
aParent
TaskQueue
*
aManagerTaskQueue
TaskQueue
*
aDecodeTaskQueue
)
;
void
Destroy
(
)
;
IPCResult
RecvInit
(
InitResolver
&
&
aResolver
)
;
IPCResult
RecvDecode
(
const
MediaRawDataIPDL
&
aData
DecodeResolver
&
&
aResolver
)
;
IPCResult
RecvFlush
(
FlushResolver
&
&
aResolver
)
;
IPCResult
RecvDrain
(
DrainResolver
&
&
aResolver
)
;
IPCResult
RecvShutdown
(
ShutdownResolver
&
&
aResolver
)
;
IPCResult
RecvSetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
protected
:
virtual
~
RemoteDecoderParent
(
)
;
bool
OnManagerThread
(
)
;
void
Error
(
const
MediaResult
&
aError
)
;
virtual
MediaResult
ProcessDecodedData
(
const
MediaDataDecoder
:
:
DecodedData
&
aDatam
DecodedOutputIPDL
&
aDecodedData
)
=
0
;
virtual
void
CleanupOnActorDestroy
(
)
{
}
RefPtr
<
RemoteDecoderManagerParent
>
mParent
;
RefPtr
<
RemoteDecoderParent
>
mIPDLSelfRef
;
RefPtr
<
TaskQueue
>
mManagerTaskQueue
;
RefPtr
<
TaskQueue
>
mDecodeTaskQueue
;
RefPtr
<
MediaDataDecoder
>
mDecoder
;
}
;
}
#
endif
