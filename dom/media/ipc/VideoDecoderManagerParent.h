#
ifndef
include_ipc_VideoDecoderManagerParent_h
#
define
include_ipc_VideoDecoderManagerParent_h
#
include
"
mozilla
/
PVideoDecoderManagerParent
.
h
"
namespace
mozilla
{
class
VideoDecoderManagerThreadHolder
;
class
VideoDecoderManagerParent
final
:
public
PVideoDecoderManagerParent
{
friend
class
PVideoDecoderManagerParent
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoDecoderManagerParent
)
static
bool
CreateForContent
(
Endpoint
<
PVideoDecoderManagerParent
>
&
&
aEndpoint
)
;
SurfaceDescriptorGPUVideo
StoreImage
(
layers
:
:
Image
*
aImage
layers
:
:
TextureClient
*
aTexture
)
;
static
void
StartupThreads
(
)
;
static
void
ShutdownThreads
(
)
;
static
void
ShutdownVideoBridge
(
)
;
bool
OnManagerThread
(
)
;
protected
:
PVideoDecoderParent
*
AllocPVideoDecoderParent
(
const
VideoInfo
&
aVideoInfo
const
float
&
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
bool
*
aSuccess
nsCString
*
aBlacklistedD3D11Driver
nsCString
*
aBlacklistedD3D9Driver
nsCString
*
aErrorDescription
)
;
bool
DeallocPVideoDecoderParent
(
PVideoDecoderParent
*
actor
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReadback
(
const
SurfaceDescriptorGPUVideo
&
aSD
SurfaceDescriptor
*
aResult
)
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvDeallocateSurfaceDescriptorGPUVideo
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
void
ActorDestroy
(
mozilla
:
:
ipc
:
:
IProtocol
:
:
ActorDestroyReason
)
override
;
void
DeallocPVideoDecoderManagerParent
(
)
override
;
private
:
explicit
VideoDecoderManagerParent
(
VideoDecoderManagerThreadHolder
*
aThreadHolder
)
;
~
VideoDecoderManagerParent
(
)
;
void
Open
(
Endpoint
<
PVideoDecoderManagerParent
>
&
&
aEndpoint
)
;
std
:
:
map
<
uint64_t
RefPtr
<
layers
:
:
Image
>
>
mImageMap
;
std
:
:
map
<
uint64_t
RefPtr
<
layers
:
:
TextureClient
>
>
mTextureMap
;
RefPtr
<
VideoDecoderManagerThreadHolder
>
mThreadHolder
;
}
;
}
#
endif
