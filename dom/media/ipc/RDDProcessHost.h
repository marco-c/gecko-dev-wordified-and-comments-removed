#
ifndef
_include_dom_media_ipc_RDDProcessHost_h_
#
define
_include_dom_media_ipc_RDDProcessHost_h_
#
include
"
mozilla
/
ipc
/
GeckoChildProcessHost
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
SharedPreferenceSerializer
;
}
}
class
nsITimer
;
namespace
mozilla
{
class
RDDChild
;
class
RDDProcessHost
final
:
public
mozilla
:
:
ipc
:
:
GeckoChildProcessHost
{
friend
class
RDDChild
;
public
:
class
Listener
{
public
:
virtual
void
OnProcessLaunchComplete
(
RDDProcessHost
*
aHost
)
{
}
virtual
void
OnProcessUnexpectedShutdown
(
RDDProcessHost
*
aHost
)
{
}
}
;
explicit
RDDProcessHost
(
Listener
*
listener
)
;
bool
Launch
(
StringVector
aExtraOpts
)
;
bool
WaitForLaunch
(
)
;
void
Shutdown
(
)
;
RDDChild
*
GetActor
(
)
const
{
return
mRDDChild
.
get
(
)
;
}
uint64_t
GetProcessToken
(
)
const
;
bool
IsConnected
(
)
const
{
return
!
!
mRDDChild
;
}
TimeStamp
GetLaunchTime
(
)
const
{
return
mLaunchTime
;
}
void
OnChannelConnected
(
int32_t
peer_pid
)
override
;
void
OnChannelError
(
)
override
;
void
SetListener
(
Listener
*
aListener
)
;
void
KillProcess
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
void
StaticFillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
;
static
MacSandboxType
GetMacSandboxType
(
)
;
#
endif
private
:
~
RDDProcessHost
(
)
;
void
OnChannelConnectedTask
(
)
;
void
OnChannelErrorTask
(
)
;
void
InitAfterConnect
(
bool
aSucceeded
)
;
void
OnChannelClosed
(
)
;
void
KillHard
(
const
char
*
aReason
)
;
void
DestroyProcess
(
)
;
#
if
defined
(
XP_MACOSX
)
&
&
defined
(
MOZ_SANDBOX
)
static
bool
sLaunchWithMacSandbox
;
bool
IsMacSandboxLaunchEnabled
(
)
override
{
return
sLaunchWithMacSandbox
;
}
void
FillMacSandboxInfo
(
MacSandboxInfo
&
aInfo
)
override
;
#
endif
DISALLOW_COPY_AND_ASSIGN
(
RDDProcessHost
)
;
Listener
*
mListener
;
mozilla
:
:
ipc
:
:
TaskFactory
<
RDDProcessHost
>
mTaskFactory
;
enum
class
LaunchPhase
{
Unlaunched
Waiting
Complete
}
;
LaunchPhase
mLaunchPhase
;
UniquePtr
<
RDDChild
>
mRDDChild
;
uint64_t
mProcessToken
;
UniquePtr
<
ipc
:
:
SharedPreferenceSerializer
>
mPrefSerializer
;
bool
mShutdownRequested
;
bool
mChannelClosed
;
TimeStamp
mLaunchTime
;
}
;
}
#
endif
