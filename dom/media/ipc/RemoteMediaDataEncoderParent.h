#
ifndef
include_dom_media_ipc_RemoteMediaDataEncoderParent_h
#
define
include_dom_media_ipc_RemoteMediaDataEncoderParent_h
#
include
"
mozilla
/
PRemoteEncoderParent
.
h
"
#
include
"
mozilla
/
ShmemRecycleAllocator
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
#
include
<
map
>
namespace
mozilla
{
namespace
layers
{
class
BufferRecycleBin
;
}
class
RemoteMediaManagerParent
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
RemoteMediaDataEncoderParent
final
:
public
ShmemRecycleAllocator
<
RemoteMediaDataEncoderParent
>
public
PRemoteEncoderParent
{
friend
class
PRemoteEncoderParent
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteMediaDataEncoderParent
final
)
explicit
RemoteMediaDataEncoderParent
(
const
EncoderConfig
&
aConfig
)
;
IPCResult
RecvConstruct
(
ConstructResolver
&
&
aResolver
)
;
IPCResult
RecvInit
(
InitResolver
&
&
aResolver
)
;
IPCResult
RecvEncode
(
const
EncodedInputIPDL
&
aData
EncodeResolver
&
&
aResolver
)
;
IPCResult
RecvReconfigure
(
EncoderConfigurationChangeList
*
aConfigurationChanges
ReconfigureResolver
&
&
aResolver
)
;
IPCResult
RecvDrain
(
DrainResolver
&
&
aResolver
)
;
IPCResult
RecvReleaseTicket
(
const
uint32_t
&
aTicketId
)
;
IPCResult
RecvShutdown
(
ShutdownResolver
&
&
aResolver
)
;
IPCResult
RecvSetBitrate
(
const
uint32_t
&
aBitrate
SetBitrateResolver
&
&
aResolver
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
protected
:
virtual
~
RemoteMediaDataEncoderParent
(
)
;
RefPtr
<
MediaDataEncoder
>
mEncoder
;
RefPtr
<
layers
:
:
BufferRecycleBin
>
mBufferRecycleBin
;
const
EncoderConfig
mConfig
;
std
:
:
map
<
uint32_t
RefPtr
<
ShmemRecycleTicket
>
>
mTickets
;
uint32_t
mTicketCounter
=
0
;
private
:
const
RefPtr
<
nsISerialEventTarget
>
mManagerThread
;
}
;
}
#
endif
