#
ifndef
include_dom_ipc_VideoDecoderParent_h
#
define
include_dom_ipc_VideoDecoderParent_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
PVideoDecoderParent
.
h
"
#
include
"
mozilla
/
layers
/
TextureForwarder
.
h
"
#
include
"
VideoDecoderManagerParent
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
ImageContainer
.
h
"
namespace
mozilla
{
namespace
dom
{
class
KnowsCompositorVideo
;
class
VideoDecoderParent
final
:
public
PVideoDecoderParent
public
MediaDataDecoderCallback
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoDecoderParent
)
VideoDecoderParent
(
VideoDecoderManagerParent
*
aParent
TaskQueue
*
aManagerTaskQueue
TaskQueue
*
aDecodeTaskQueue
)
;
void
Destroy
(
)
;
bool
RecvInit
(
const
VideoInfo
&
aVideoInfo
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
)
override
;
bool
RecvInput
(
const
MediaRawDataIPDL
&
aData
)
override
;
bool
RecvFlush
(
)
override
;
bool
RecvDrain
(
)
override
;
bool
RecvShutdown
(
)
override
;
bool
RecvSetSeekThreshold
(
const
int64_t
&
aTime
)
override
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
void
Output
(
MediaData
*
aData
)
override
;
void
Error
(
const
MediaResult
&
aError
)
override
;
void
InputExhausted
(
)
override
;
void
DrainComplete
(
)
override
;
bool
OnReaderTaskQueue
(
)
override
;
private
:
~
VideoDecoderParent
(
)
;
RefPtr
<
VideoDecoderManagerParent
>
mParent
;
RefPtr
<
VideoDecoderParent
>
mIPDLSelfRef
;
RefPtr
<
TaskQueue
>
mManagerTaskQueue
;
RefPtr
<
TaskQueue
>
mDecodeTaskQueue
;
RefPtr
<
MediaDataDecoder
>
mDecoder
;
RefPtr
<
KnowsCompositorVideo
>
mKnowsCompositor
;
bool
mDestroyed
;
}
;
}
}
#
endif
