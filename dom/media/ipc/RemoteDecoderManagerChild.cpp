#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteAudioDecoder
.
h
"
#
include
"
RemoteDecoderChild
.
h
"
#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
DataSurfaceHelpers
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
nsIObserver
.
h
"
namespace
mozilla
{
using
namespace
layers
;
using
namespace
gfx
;
StaticMutex
sLaunchMutex
;
static
StaticDataMutex
<
StaticRefPtr
<
nsIThread
>
>
sRemoteDecoderManagerChildThread
(
"
sRemoteDecoderManagerChildThread
"
)
;
static
StaticRefPtr
<
RemoteDecoderManagerChild
>
sRemoteDecoderManagerChildForRDDProcess
;
static
StaticRefPtr
<
RemoteDecoderManagerChild
>
sRemoteDecoderManagerChildForGPUProcess
;
static
UniquePtr
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
sRecreateTasks
;
class
ShutdownObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
protected
:
~
ShutdownObserver
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
ShutdownObserver
nsIObserver
)
;
NS_IMETHODIMP
ShutdownObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
;
RemoteDecoderManagerChild
:
:
Shutdown
(
)
;
return
NS_OK
;
}
StaticRefPtr
<
ShutdownObserver
>
sObserver
;
static
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
MaybeTextureFactoryIdentifier
(
const
SupportDecoderParams
&
aParams
)
{
return
aParams
.
mKnowsCompositor
?
Some
(
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
)
:
Nothing
(
)
;
}
void
RemoteDecoderManagerChild
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
if
(
!
*
remoteDecoderManagerThread
)
{
RefPtr
<
nsIThread
>
childThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
RemVidChild
"
getter_AddRefs
(
childThread
)
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
InitPBackground
"
[
]
(
)
{
ipc
:
:
PBackgroundChild
*
bgActor
=
ipc
:
:
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
NS_ASSERTION
(
bgActor
"
Failed
to
start
Background
channel
"
)
;
Unused
<
<
bgActor
;
}
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
*
remoteDecoderManagerThread
=
childThread
;
sRecreateTasks
=
MakeUnique
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
(
)
;
sObserver
=
new
ShutdownObserver
(
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
sObserver
)
;
}
}
void
RemoteDecoderManagerChild
:
:
InitForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Init
(
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
(
*
remoteDecoderManagerThread
)
-
>
Dispatch
(
NewRunnableFunction
(
"
InitForContentRunnable
"
&
OpenForGPUProcess
std
:
:
move
(
aVideoManager
)
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
sObserver
)
;
sObserver
=
nullptr
;
}
nsCOMPtr
<
nsIThread
>
childThread
;
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
childThread
=
remoteDecoderManagerThread
-
>
forget
(
)
;
}
if
(
childThread
)
{
MOZ_ALWAYS_SUCCEEDS
(
childThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
dom
:
:
RemoteDecoderManagerChild
:
:
Shutdown
"
[
]
(
)
{
if
(
sRemoteDecoderManagerChildForRDDProcess
&
&
sRemoteDecoderManagerChildForRDDProcess
-
>
CanSend
(
)
)
{
sRemoteDecoderManagerChildForRDDProcess
-
>
Close
(
)
;
}
sRemoteDecoderManagerChildForRDDProcess
=
nullptr
;
if
(
sRemoteDecoderManagerChildForGPUProcess
&
&
sRemoteDecoderManagerChildForGPUProcess
-
>
CanSend
(
)
)
{
sRemoteDecoderManagerChildForGPUProcess
-
>
Close
(
)
;
}
sRemoteDecoderManagerChildForGPUProcess
=
nullptr
;
ipc
:
:
BackgroundChild
:
:
CloseForCurrentThread
(
)
;
}
)
)
)
;
childThread
-
>
Shutdown
(
)
;
sRecreateTasks
=
nullptr
;
}
}
void
RemoteDecoderManagerChild
:
:
RunWhenGPUProcessRecreated
(
already_AddRefed
<
Runnable
>
aTask
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
auto
*
manager
=
GetSingleton
(
RemoteDecodeIn
:
:
GpuProcess
)
;
if
(
manager
&
&
manager
!
=
this
&
&
manager
-
>
CanSend
(
)
)
{
RefPtr
<
Runnable
>
task
=
aTask
;
task
-
>
Run
(
)
;
}
else
{
sRecreateTasks
-
>
AppendElement
(
aTask
)
;
}
}
RemoteDecoderManagerChild
*
RemoteDecoderManagerChild
:
:
GetSingleton
(
RemoteDecodeIn
aLocation
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
switch
(
aLocation
)
{
case
RemoteDecodeIn
:
:
GpuProcess
:
return
sRemoteDecoderManagerChildForGPUProcess
;
case
RemoteDecodeIn
:
:
RddProcess
:
return
sRemoteDecoderManagerChildForRDDProcess
;
default
:
MOZ_CRASH
(
"
Unexpected
RemoteDecode
variant
"
)
;
}
}
nsISerialEventTarget
*
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
return
*
remoteDecoderManagerThread
;
}
bool
RemoteDecoderManagerChild
:
:
Supports
(
RemoteDecodeIn
aLocation
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
bool
supports
=
false
;
DecoderDoctorDiagnostics
diagnostics
;
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
managerThread
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManager
:
:
Supports
"
[
&
]
(
)
{
auto
*
rdm
=
GetSingleton
(
aLocation
)
;
if
(
!
rdm
)
{
return
;
}
const
auto
&
trackInfo
=
aParams
.
mConfig
;
if
(
trackInfo
.
GetAsVideoInfo
(
)
)
{
VideoDecoderInfoIPDL
info
(
*
trackInfo
.
GetAsVideoInfo
(
)
aParams
.
mRate
.
mValue
)
;
Unused
<
<
rdm
-
>
SendSupports
(
info
MaybeTextureFactoryIdentifier
(
aParams
)
&
supports
&
diagnostics
)
;
}
else
if
(
trackInfo
.
GetAsAudioInfo
(
)
)
{
Unused
<
<
rdm
-
>
SendSupports
(
*
trackInfo
.
GetAsAudioInfo
(
)
Nothing
(
)
&
supports
&
diagnostics
)
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
}
if
(
aDiagnostics
)
{
*
aDiagnostics
=
diagnostics
;
}
return
supports
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderManagerChild
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
RefPtr
<
RemoteAudioDecoderChild
>
child
;
MediaResult
result
(
NS_ERROR_DOM_MEDIA_CANCELED
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderModule
:
:
CreateAudioDecoder
"
[
&
]
(
)
{
child
=
new
RemoteAudioDecoderChild
(
)
;
result
=
child
-
>
InitIPDL
(
aParams
.
AudioConfig
(
)
aParams
.
mOptions
)
;
if
(
NS_FAILED
(
result
)
)
{
child
=
nullptr
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
if
(
NS_FAILED
(
result
)
)
{
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
result
;
}
return
nullptr
;
}
RefPtr
<
RemoteMediaDataDecoder
>
object
=
new
RemoteMediaDataDecoder
(
child
)
;
return
object
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderManagerChild
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
MOZ_ASSERT
(
aLocation
!
=
RemoteDecodeIn
:
:
Unspecified
)
;
RefPtr
<
RemoteVideoDecoderChild
>
child
;
MediaResult
result
(
NS_ERROR_DOM_MEDIA_CANCELED
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
CreateVideoDecoder
"
[
&
]
(
)
{
child
=
new
RemoteVideoDecoderChild
(
aLocation
)
;
result
=
child
-
>
InitIPDL
(
aParams
.
VideoConfig
(
)
aParams
.
mRate
.
mValue
aParams
.
mOptions
aParams
.
mKnowsCompositor
?
&
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
:
nullptr
)
;
if
(
NS_FAILED
(
result
)
)
{
child
=
nullptr
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
if
(
NS_FAILED
(
result
)
)
{
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
result
;
}
return
nullptr
;
}
RefPtr
<
RemoteMediaDataDecoder
>
object
=
new
RemoteMediaDataDecoder
(
child
)
;
return
object
.
forget
(
)
;
}
void
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
(
RemoteDecodeIn
aLocation
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsContentProcess
(
)
"
Only
supported
from
a
content
process
.
"
)
;
if
(
aLocation
!
=
RemoteDecodeIn
:
:
RddProcess
)
{
return
;
}
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
bool
needsLaunch
=
true
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
-
CheckSend
"
[
&
]
(
)
{
auto
*
rps
=
GetSingleton
(
RemoteDecodeIn
:
:
RddProcess
)
;
needsLaunch
=
rps
?
!
rps
-
>
CanSend
(
)
:
true
;
}
)
;
if
(
NS_FAILED
(
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
)
)
{
return
;
}
;
if
(
needsLaunch
)
{
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
LaunchRDDProcess
"
[
&
]
(
)
{
ipc
:
:
PBackgroundChild
*
bgActor
=
ipc
:
:
BackgroundChild
:
:
GetForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
bgActor
)
)
{
return
;
}
nsresult
rv
;
Endpoint
<
PRemoteDecoderManagerChild
>
endpoint
;
Unused
<
<
bgActor
-
>
SendLaunchRDDProcess
(
&
rv
&
endpoint
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
OpenForRDDProcess
(
std
:
:
move
(
endpoint
)
)
;
}
}
)
)
;
}
}
PRemoteDecoderChild
*
RemoteDecoderManagerChild
:
:
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
bool
*
aSuccess
nsCString
*
)
{
MOZ_ASSERT
(
false
"
RemoteDecoderManagerChild
cannot
create
"
"
RemoteDecoderChild
classes
"
)
;
return
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
{
RemoteDecoderChild
*
child
=
static_cast
<
RemoteDecoderChild
*
>
(
actor
)
;
child
-
>
IPDLActorDestroyed
(
)
;
return
true
;
}
RemoteDecoderManagerChild
:
:
RemoteDecoderManagerChild
(
RemoteDecodeIn
aLocation
)
:
mLocation
(
aLocation
)
{
}
void
RemoteDecoderManagerChild
:
:
OpenForRDDProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
sRemoteDecoderManagerChildForRDDProcess
&
&
sRemoteDecoderManagerChildForRDDProcess
-
>
CanSend
(
)
)
{
return
;
}
sRemoteDecoderManagerChildForRDDProcess
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
RemoteDecodeIn
:
:
RddProcess
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
sRemoteDecoderManagerChildForRDDProcess
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
}
void
RemoteDecoderManagerChild
:
:
OpenForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
sRemoteDecoderManagerChildForGPUProcess
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
RemoteDecodeIn
:
:
GpuProcess
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
sRemoteDecoderManagerChildForGPUProcess
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
for
(
Runnable
*
task
:
*
sRecreateTasks
)
{
task
-
>
Run
(
)
;
}
sRecreateTasks
-
>
Clear
(
)
;
}
void
RemoteDecoderManagerChild
:
:
InitIPDL
(
)
{
mIPDLSelfRef
=
this
;
}
void
RemoteDecoderManagerChild
:
:
ActorDealloc
(
)
{
mIPDLSelfRef
=
nullptr
;
}
VideoBridgeSource
RemoteDecoderManagerChild
:
:
GetSource
(
)
const
{
switch
(
mLocation
)
{
case
RemoteDecodeIn
:
:
RddProcess
:
return
VideoBridgeSource
:
:
RddProcess
;
case
RemoteDecodeIn
:
:
GpuProcess
:
return
VideoBridgeSource
:
:
GpuProcess
;
default
:
MOZ_CRASH
(
"
Unexpected
RemoteDecode
variant
"
)
;
}
}
bool
RemoteDecoderManagerChild
:
:
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
false
;
}
if
(
!
managerThread
-
>
IsOnCurrentThread
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocShmem
"
[
self
=
RefPtr
{
this
}
shmem
=
aShmem
]
(
)
mutable
{
if
(
self
-
>
CanSend
(
)
)
{
self
-
>
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
shmem
)
;
}
}
)
)
)
;
return
true
;
}
return
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
aShmem
)
;
}
struct
SurfaceDescriptorUserData
{
SurfaceDescriptorUserData
(
RemoteDecoderManagerChild
*
aAllocator
SurfaceDescriptor
&
aSD
)
:
mAllocator
(
aAllocator
)
mSD
(
aSD
)
{
}
~
SurfaceDescriptorUserData
(
)
{
DestroySurfaceDescriptor
(
mAllocator
&
mSD
)
;
}
RefPtr
<
RemoteDecoderManagerChild
>
mAllocator
;
SurfaceDescriptor
mSD
;
}
;
void
DeleteSurfaceDescriptorUserData
(
void
*
aClosure
)
{
SurfaceDescriptorUserData
*
sd
=
reinterpret_cast
<
SurfaceDescriptorUserData
*
>
(
aClosure
)
;
delete
sd
;
}
already_AddRefed
<
SourceSurface
>
RemoteDecoderManagerChild
:
:
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
SurfaceDescriptor
sd
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
Readback
"
[
&
]
(
)
{
if
(
CanSend
(
)
)
{
SendReadback
(
aSD
&
sd
)
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
if
(
!
IsSurfaceDescriptorValid
(
sd
)
)
{
return
nullptr
;
}
RefPtr
<
DataSourceSurface
>
source
=
GetSurfaceForDescriptor
(
sd
)
;
if
(
!
source
)
{
DestroySurfaceDescriptor
(
this
&
sd
)
;
NS_WARNING
(
"
Failed
to
map
SurfaceDescriptor
in
Readback
"
)
;
return
nullptr
;
}
static
UserDataKey
sSurfaceDescriptor
;
source
-
>
AddUserData
(
&
sSurfaceDescriptor
new
SurfaceDescriptorUserData
(
this
sd
)
DeleteSurfaceDescriptorUserData
)
;
return
source
.
forget
(
)
;
}
void
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
"
[
ref
=
RefPtr
{
this
}
sd
=
aSD
]
(
)
{
if
(
ref
-
>
CanSend
(
)
)
{
ref
-
>
SendDeallocateSurfaceDescriptorGPUVideo
(
sd
)
;
}
}
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
HandleFatalError
(
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aMsg
OtherPid
(
)
)
;
}
}
