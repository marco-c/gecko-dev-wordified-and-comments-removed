#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
RemoteAudioDecoder
.
h
"
#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
DataSurfaceHelpers
.
h
"
#
include
"
mozilla
/
ipc
/
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
Endpoint
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
ifdef
MOZ_WMF_MEDIA_ENGINE
#
include
"
MFMediaEngineChild
.
h
"
#
endif
namespace
mozilla
{
using
namespace
layers
;
using
namespace
gfx
;
StaticMutex
sLaunchMutex
;
static
EnumeratedArray
<
RemoteDecodeIn
RemoteDecodeIn
:
:
SENTINEL
StaticRefPtr
<
GenericNonExclusivePromise
>
>
sLaunchPromises
MOZ_GUARDED_BY
(
sLaunchMutex
)
;
static
StaticDataMutex
<
StaticRefPtr
<
nsIThread
>
>
sRemoteDecoderManagerChildThread
(
"
sRemoteDecoderManagerChildThread
"
)
;
static
EnumeratedArray
<
RemoteDecodeIn
RemoteDecodeIn
:
:
SENTINEL
StaticRefPtr
<
RemoteDecoderManagerChild
>
>
sRemoteDecoderManagerChildForProcesses
;
static
UniquePtr
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
sRecreateTasks
;
StaticMutex
sProcessSupportedMutex
;
static
EnumeratedArray
<
RemoteDecodeIn
RemoteDecodeIn
:
:
SENTINEL
Maybe
<
media
:
:
MediaCodecsSupported
>
>
sProcessSupported
MOZ_GUARDED_BY
(
sProcessSupportedMutex
)
;
class
ShutdownObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
protected
:
~
ShutdownObserver
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
ShutdownObserver
nsIObserver
)
;
NS_IMETHODIMP
ShutdownObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
;
RemoteDecoderManagerChild
:
:
Shutdown
(
)
;
return
NS_OK
;
}
StaticRefPtr
<
ShutdownObserver
>
sObserver
;
void
RemoteDecoderManagerChild
:
:
Init
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
if
(
!
*
remoteDecoderManagerThread
)
{
RefPtr
<
nsIThread
>
childThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
RemVidChild
"
getter_AddRefs
(
childThread
)
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
InitPBackground
"
[
]
(
)
{
ipc
:
:
PBackgroundChild
*
bgActor
=
ipc
:
:
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
NS_WARNING_ASSERTION
(
bgActor
"
Failed
to
start
Background
channel
"
)
;
Unused
<
<
bgActor
;
}
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
*
remoteDecoderManagerThread
=
childThread
;
sRecreateTasks
=
MakeUnique
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
(
)
;
sObserver
=
new
ShutdownObserver
(
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
sObserver
)
;
}
}
void
RemoteDecoderManagerChild
:
:
InitForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Init
(
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
(
*
remoteDecoderManagerThread
)
-
>
Dispatch
(
NewRunnableFunction
(
"
InitForContentRunnable
"
&
OpenRemoteDecoderManagerChildForProcess
std
:
:
move
(
aVideoManager
)
RemoteDecodeIn
:
:
GpuProcess
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
sObserver
)
;
sObserver
=
nullptr
;
}
nsCOMPtr
<
nsIThread
>
childThread
;
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
childThread
=
remoteDecoderManagerThread
-
>
forget
(
)
;
}
if
(
childThread
)
{
MOZ_ALWAYS_SUCCEEDS
(
childThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
dom
:
:
RemoteDecoderManagerChild
:
:
Shutdown
"
[
]
(
)
{
for
(
auto
&
p
:
sRemoteDecoderManagerChildForProcesses
)
{
if
(
p
&
&
p
-
>
CanSend
(
)
)
{
p
-
>
Close
(
)
;
}
p
=
nullptr
;
}
{
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
for
(
auto
&
p
:
sLaunchPromises
)
{
p
=
nullptr
;
}
}
ipc
:
:
BackgroundChild
:
:
CloseForCurrentThread
(
)
;
}
)
)
)
;
childThread
-
>
Shutdown
(
)
;
sRecreateTasks
=
nullptr
;
}
}
void
RemoteDecoderManagerChild
:
:
RunWhenGPUProcessRecreated
(
already_AddRefed
<
Runnable
>
aTask
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
MOZ_ASSERT
(
managerThread
-
>
IsOnCurrentThread
(
)
)
;
auto
*
manager
=
GetSingleton
(
RemoteDecodeIn
:
:
GpuProcess
)
;
if
(
manager
&
&
manager
!
=
this
&
&
manager
-
>
CanSend
(
)
)
{
RefPtr
<
Runnable
>
task
=
aTask
;
task
-
>
Run
(
)
;
}
else
{
sRecreateTasks
-
>
AppendElement
(
aTask
)
;
}
}
RemoteDecoderManagerChild
*
RemoteDecoderManagerChild
:
:
GetSingleton
(
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
MOZ_ASSERT
(
managerThread
-
>
IsOnCurrentThread
(
)
)
;
switch
(
aLocation
)
{
case
RemoteDecodeIn
:
:
GpuProcess
:
case
RemoteDecodeIn
:
:
RddProcess
:
case
RemoteDecodeIn
:
:
UtilityProcess
:
return
sRemoteDecoderManagerChildForProcesses
[
aLocation
]
;
default
:
MOZ_CRASH
(
"
Unexpected
RemoteDecode
variant
"
)
;
return
nullptr
;
}
}
nsISerialEventTarget
*
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
return
*
remoteDecoderManagerThread
;
}
bool
RemoteDecoderManagerChild
:
:
Supports
(
RemoteDecodeIn
aLocation
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
Maybe
<
media
:
:
MediaCodecsSupported
>
supported
;
switch
(
aLocation
)
{
case
RemoteDecodeIn
:
:
GpuProcess
:
case
RemoteDecodeIn
:
:
RddProcess
:
case
RemoteDecodeIn
:
:
UtilityProcess
:
{
StaticMutexAutoLock
lock
(
sProcessSupportedMutex
)
;
supported
=
sProcessSupported
[
aLocation
]
;
break
;
}
default
:
return
false
;
}
if
(
!
supported
)
{
if
(
aLocation
=
=
RemoteDecodeIn
:
:
UtilityProcess
)
{
LaunchUtilityProcessIfNeeded
(
)
;
}
if
(
aLocation
=
=
RemoteDecodeIn
:
:
RddProcess
)
{
LaunchRDDProcessIfNeeded
(
)
;
}
return
true
;
}
return
PDMFactory
:
:
SupportsMimeType
(
aParams
.
MimeType
(
)
*
supported
aLocation
)
!
=
media
:
:
DecodeSupport
:
:
Unsupported
;
}
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
RemoteDecoderManagerChild
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
}
if
(
!
GetTrackSupport
(
aLocation
)
.
contains
(
TrackSupport
:
:
Audio
)
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_CANCELED
"
Remote
location
doesn
'
t
support
audio
decoding
"
)
__func__
)
;
}
bool
useUtilityAudioDecoding
=
StaticPrefs
:
:
media_utility_process_enabled
(
)
&
&
aLocation
=
=
RemoteDecodeIn
:
:
UtilityProcess
;
RefPtr
<
GenericNonExclusivePromise
>
launchPromise
=
useUtilityAudioDecoding
?
LaunchUtilityProcessIfNeeded
(
)
:
LaunchRDDProcessIfNeeded
(
)
;
return
launchPromise
-
>
Then
(
managerThread
__func__
[
params
=
CreateDecoderParamsForAsync
(
aParams
)
aLocation
]
(
bool
)
{
auto
child
=
MakeRefPtr
<
RemoteAudioDecoderChild
>
(
aLocation
)
;
MediaResult
result
=
child
-
>
InitIPDL
(
params
.
AudioConfig
(
)
params
.
mOptions
params
.
mMediaEngineId
)
;
if
(
NS_FAILED
(
result
)
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
result
__func__
)
;
}
return
Construct
(
std
:
:
move
(
child
)
aLocation
)
;
}
[
aLocation
]
(
nsresult
aResult
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
MediaResult
(
aResult
aLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
?
"
Couldn
'
t
start
GPU
process
"
:
(
aLocation
=
=
RemoteDecodeIn
:
:
RddProcess
?
"
Couldn
'
t
start
RDD
process
"
:
"
Couldn
'
t
start
Utility
process
"
)
)
__func__
)
;
}
)
;
}
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
RemoteDecoderManagerChild
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
}
if
(
!
aParams
.
mKnowsCompositor
&
&
aLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_NOT_SUPPORTED_ERR
__func__
)
;
}
if
(
!
GetTrackSupport
(
aLocation
)
.
contains
(
TrackSupport
:
:
Video
)
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_CANCELED
"
Remote
location
doesn
'
t
support
video
decoding
"
)
__func__
)
;
}
MOZ_ASSERT
(
aLocation
!
=
RemoteDecodeIn
:
:
Unspecified
)
;
RefPtr
<
GenericNonExclusivePromise
>
p
=
aLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
?
GenericNonExclusivePromise
:
:
CreateAndResolve
(
true
__func__
)
:
LaunchRDDProcessIfNeeded
(
)
;
return
p
-
>
Then
(
managerThread
__func__
[
aLocation
params
=
CreateDecoderParamsForAsync
(
aParams
)
]
(
bool
)
{
auto
child
=
MakeRefPtr
<
RemoteVideoDecoderChild
>
(
aLocation
)
;
MediaResult
result
=
child
-
>
InitIPDL
(
params
.
VideoConfig
(
)
params
.
mRate
.
mValue
params
.
mOptions
params
.
mKnowsCompositor
?
Some
(
params
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
)
:
Nothing
(
)
params
.
mMediaEngineId
)
;
if
(
NS_FAILED
(
result
)
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
result
__func__
)
;
}
return
Construct
(
std
:
:
move
(
child
)
aLocation
)
;
}
[
]
(
nsresult
aResult
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
MediaResult
(
aResult
"
Couldn
'
t
start
RDD
process
"
)
__func__
)
;
}
)
;
}
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
RemoteDecoderManagerChild
:
:
Construct
(
RefPtr
<
RemoteDecoderChild
>
&
&
aChild
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
}
MOZ_ASSERT
(
managerThread
-
>
IsOnCurrentThread
(
)
)
;
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
p
=
aChild
-
>
SendConstruct
(
)
-
>
Then
(
managerThread
__func__
[
child
=
std
:
:
move
(
aChild
)
]
(
MediaResult
aResult
)
{
if
(
NS_FAILED
(
aResult
)
)
{
child
-
>
DestroyIPDL
(
)
;
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
aResult
__func__
)
;
}
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndResolve
(
MakeRefPtr
<
RemoteMediaDataDecoder
>
(
child
)
__func__
)
;
}
[
aLocation
]
(
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
&
aReason
)
{
nsresult
err
=
(
(
aLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
)
|
|
(
aLocation
=
=
RemoteDecodeIn
:
:
RddProcess
)
)
?
NS_ERROR_DOM_MEDIA_REMOTE_DECODER_CRASHED_RDD_OR_GPU_ERR
:
NS_ERROR_DOM_MEDIA_REMOTE_DECODER_CRASHED_UTILITY_ERR
;
return
PlatformDecoderModule
:
:
CreateDecoderPromise
:
:
CreateAndReject
(
err
__func__
)
;
}
)
;
return
p
;
}
RefPtr
<
GenericNonExclusivePromise
>
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsContentProcess
(
)
"
Only
supported
from
a
content
process
.
"
)
;
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
auto
&
rddLaunchPromise
=
sLaunchPromises
[
RemoteDecodeIn
:
:
RddProcess
]
;
if
(
rddLaunchPromise
)
{
return
rddLaunchPromise
;
}
RefPtr
<
GenericNonExclusivePromise
>
p
=
InvokeAsync
(
managerThread
__func__
[
]
(
)
-
>
RefPtr
<
GenericNonExclusivePromise
>
{
auto
*
rps
=
GetSingleton
(
RemoteDecodeIn
:
:
RddProcess
)
;
if
(
rps
&
&
rps
-
>
CanSend
(
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
ipc
:
:
PBackgroundChild
*
bgActor
=
ipc
:
:
BackgroundChild
:
:
GetForCurrentThread
(
)
;
if
(
!
managerThread
|
|
NS_WARN_IF
(
!
bgActor
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
bgActor
-
>
SendEnsureRDDProcessAndCreateBridge
(
)
-
>
Then
(
managerThread
__func__
[
]
(
ipc
:
:
PBackgroundChild
:
:
EnsureRDDProcessAndCreateBridgePromise
:
:
ResolveOrRejectValue
&
&
aResult
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
|
|
aResult
.
IsReject
(
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
nsresult
rv
=
Get
<
0
>
(
aResult
.
ResolveValue
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
OpenRemoteDecoderManagerChildForProcess
(
Get
<
1
>
(
std
:
:
move
(
aResult
.
ResolveValue
(
)
)
)
RemoteDecodeIn
:
:
RddProcess
)
;
return
GenericNonExclusivePromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
)
;
p
=
p
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
]
(
const
GenericNonExclusivePromise
:
:
ResolveOrRejectValue
&
aResult
)
{
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
sLaunchPromises
[
RemoteDecodeIn
:
:
RddProcess
]
=
nullptr
;
return
GenericNonExclusivePromise
:
:
CreateAndResolveOrReject
(
aResult
__func__
)
;
}
)
;
rddLaunchPromise
=
p
;
return
rddLaunchPromise
;
}
RefPtr
<
GenericNonExclusivePromise
>
RemoteDecoderManagerChild
:
:
LaunchUtilityProcessIfNeeded
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
XRE_IsContentProcess
(
)
"
Only
supported
from
a
content
process
.
"
)
;
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
auto
&
utilityLaunchPromise
=
sLaunchPromises
[
RemoteDecodeIn
:
:
UtilityProcess
]
;
if
(
utilityLaunchPromise
)
{
return
utilityLaunchPromise
;
}
RefPtr
<
GenericNonExclusivePromise
>
p
=
InvokeAsync
(
managerThread
__func__
[
]
(
)
-
>
RefPtr
<
GenericNonExclusivePromise
>
{
auto
*
rps
=
GetSingleton
(
RemoteDecodeIn
:
:
UtilityProcess
)
;
if
(
rps
&
&
rps
-
>
CanSend
(
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
ipc
:
:
PBackgroundChild
*
bgActor
=
ipc
:
:
BackgroundChild
:
:
GetForCurrentThread
(
)
;
if
(
!
managerThread
|
|
NS_WARN_IF
(
!
bgActor
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
return
bgActor
-
>
SendEnsureUtilityProcessAndCreateBridge
(
)
-
>
Then
(
managerThread
__func__
[
]
(
ipc
:
:
PBackgroundChild
:
:
EnsureUtilityProcessAndCreateBridgePromise
:
:
ResolveOrRejectValue
&
&
aResult
)
-
>
RefPtr
<
GenericNonExclusivePromise
>
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
|
|
aResult
.
IsReject
(
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
NS_ERROR_FAILURE
__func__
)
;
}
nsresult
rv
=
Get
<
0
>
(
aResult
.
ResolveValue
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
GenericNonExclusivePromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
OpenRemoteDecoderManagerChildForProcess
(
Get
<
1
>
(
std
:
:
move
(
aResult
.
ResolveValue
(
)
)
)
RemoteDecodeIn
:
:
UtilityProcess
)
;
return
GenericNonExclusivePromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
)
;
p
=
p
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
]
(
const
GenericNonExclusivePromise
:
:
ResolveOrRejectValue
&
aResult
)
{
StaticMutexAutoLock
lock
(
sLaunchMutex
)
;
sLaunchPromises
[
RemoteDecodeIn
:
:
UtilityProcess
]
=
nullptr
;
return
GenericNonExclusivePromise
:
:
CreateAndResolveOrReject
(
aResult
__func__
)
;
}
)
;
utilityLaunchPromise
=
p
;
return
utilityLaunchPromise
;
}
TrackSupportSet
RemoteDecoderManagerChild
:
:
GetTrackSupport
(
RemoteDecodeIn
aLocation
)
{
switch
(
aLocation
)
{
case
RemoteDecodeIn
:
:
GpuProcess
:
{
TrackSupportSet
s
{
TrackSupport
:
:
Video
}
;
#
ifdef
MOZ_WMF_MEDIA_ENGINE
if
(
StaticPrefs
:
:
media_wmf_media_engine_enabled
(
)
)
{
s
-
=
TrackSupport
:
:
Video
;
}
#
endif
return
s
;
}
case
RemoteDecodeIn
:
:
RddProcess
:
{
TrackSupportSet
s
{
TrackSupport
:
:
Video
}
;
if
(
!
StaticPrefs
:
:
media_utility_process_enabled
(
)
)
{
s
+
=
TrackSupport
:
:
Audio
;
}
#
ifdef
MOZ_WMF_MEDIA_ENGINE
if
(
StaticPrefs
:
:
media_wmf_media_engine_enabled
(
)
)
{
s
+
=
TrackSupport
:
:
Audio
;
}
#
endif
return
s
;
}
case
RemoteDecodeIn
:
:
UtilityProcess
:
return
StaticPrefs
:
:
media_utility_process_enabled
(
)
?
TrackSupportSet
{
TrackSupport
:
:
Audio
}
:
TrackSupportSet
{
TrackSupport
:
:
None
}
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Undefined
location
!
"
)
;
}
return
TrackSupportSet
{
TrackSupport
:
:
None
}
;
}
PRemoteDecoderChild
*
RemoteDecoderManagerChild
:
:
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
const
Maybe
<
uint64_t
>
&
aMediaEngineId
)
{
MOZ_ASSERT
(
false
"
RemoteDecoderManagerChild
cannot
create
"
"
RemoteDecoderChild
classes
"
)
;
return
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
{
RemoteDecoderChild
*
child
=
static_cast
<
RemoteDecoderChild
*
>
(
actor
)
;
child
-
>
IPDLActorDestroyed
(
)
;
return
true
;
}
PMFMediaEngineChild
*
RemoteDecoderManagerChild
:
:
AllocPMFMediaEngineChild
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
RemoteDecoderManagerChild
cannot
create
MFMediaEngineChild
classes
"
)
;
return
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocPMFMediaEngineChild
(
PMFMediaEngineChild
*
actor
)
{
#
ifdef
MOZ_WMF_MEDIA_ENGINE
MFMediaEngineChild
*
child
=
static_cast
<
MFMediaEngineChild
*
>
(
actor
)
;
child
-
>
IPDLActorDestroyed
(
)
;
#
endif
return
true
;
}
RemoteDecoderManagerChild
:
:
RemoteDecoderManagerChild
(
RemoteDecodeIn
aLocation
)
:
mLocation
(
aLocation
)
{
MOZ_ASSERT
(
mLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
|
|
mLocation
=
=
RemoteDecodeIn
:
:
RddProcess
|
|
mLocation
=
=
RemoteDecodeIn
:
:
UtilityProcess
)
;
}
void
RemoteDecoderManagerChild
:
:
OpenRemoteDecoderManagerChildForProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
RemoteDecodeIn
aLocation
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
MOZ_ASSERT
(
managerThread
-
>
IsOnCurrentThread
(
)
)
;
auto
runRecreateTasksIfNeeded
=
MakeScopeExit
(
[
aLocation
]
(
)
{
if
(
aLocation
=
=
RemoteDecodeIn
:
:
GpuProcess
)
{
for
(
Runnable
*
task
:
*
sRecreateTasks
)
{
task
-
>
Run
(
)
;
}
sRecreateTasks
-
>
Clear
(
)
;
}
}
)
;
MOZ_ASSERT
(
aLocation
!
=
RemoteDecodeIn
:
:
SENTINEL
)
;
auto
&
remoteDecoderManagerChild
=
sRemoteDecoderManagerChildForProcesses
[
aLocation
]
;
if
(
aLocation
!
=
RemoteDecodeIn
:
:
GpuProcess
&
&
remoteDecoderManagerChild
&
&
remoteDecoderManagerChild
-
>
CanSend
(
)
)
{
return
;
}
remoteDecoderManagerChild
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
aLocation
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
remoteDecoderManagerChild
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
}
void
RemoteDecoderManagerChild
:
:
InitIPDL
(
)
{
mIPDLSelfRef
=
this
;
}
void
RemoteDecoderManagerChild
:
:
ActorDealloc
(
)
{
mIPDLSelfRef
=
nullptr
;
}
VideoBridgeSource
RemoteDecoderManagerChild
:
:
GetSource
(
)
const
{
switch
(
mLocation
)
{
case
RemoteDecodeIn
:
:
RddProcess
:
return
VideoBridgeSource
:
:
RddProcess
;
case
RemoteDecodeIn
:
:
GpuProcess
:
return
VideoBridgeSource
:
:
GpuProcess
;
default
:
MOZ_CRASH
(
"
Unexpected
RemoteDecode
variant
"
)
;
}
}
bool
RemoteDecoderManagerChild
:
:
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
false
;
}
if
(
!
managerThread
-
>
IsOnCurrentThread
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocShmem
"
[
self
=
RefPtr
{
this
}
shmem
=
aShmem
]
(
)
mutable
{
if
(
self
-
>
CanSend
(
)
)
{
self
-
>
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
shmem
)
;
}
}
)
)
)
;
return
true
;
}
return
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
aShmem
)
;
}
struct
SurfaceDescriptorUserData
{
SurfaceDescriptorUserData
(
RemoteDecoderManagerChild
*
aAllocator
SurfaceDescriptor
&
aSD
)
:
mAllocator
(
aAllocator
)
mSD
(
aSD
)
{
}
~
SurfaceDescriptorUserData
(
)
{
DestroySurfaceDescriptor
(
mAllocator
&
mSD
)
;
}
RefPtr
<
RemoteDecoderManagerChild
>
mAllocator
;
SurfaceDescriptor
mSD
;
}
;
void
DeleteSurfaceDescriptorUserData
(
void
*
aClosure
)
{
SurfaceDescriptorUserData
*
sd
=
reinterpret_cast
<
SurfaceDescriptorUserData
*
>
(
aClosure
)
;
delete
sd
;
}
already_AddRefed
<
SourceSurface
>
RemoteDecoderManagerChild
:
:
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
SurfaceDescriptor
sd
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
Readback
"
[
&
]
(
)
{
if
(
CanSend
(
)
)
{
SendReadback
(
aSD
&
sd
)
;
}
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
if
(
!
IsSurfaceDescriptorValid
(
sd
)
)
{
return
nullptr
;
}
RefPtr
<
DataSourceSurface
>
source
=
GetSurfaceForDescriptor
(
sd
)
;
if
(
!
source
)
{
DestroySurfaceDescriptor
(
this
&
sd
)
;
NS_WARNING
(
"
Failed
to
map
SurfaceDescriptor
in
Readback
"
)
;
return
nullptr
;
}
static
UserDataKey
sSurfaceDescriptor
;
source
-
>
AddUserData
(
&
sSurfaceDescriptor
new
SurfaceDescriptorUserData
(
this
sd
)
DeleteSurfaceDescriptorUserData
)
;
return
source
.
forget
(
)
;
}
void
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
"
[
ref
=
RefPtr
{
this
}
sd
=
aSD
]
(
)
{
if
(
ref
-
>
CanSend
(
)
)
{
ref
-
>
SendDeallocateSurfaceDescriptorGPUVideo
(
sd
)
;
}
}
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
HandleFatalError
(
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aMsg
OtherPid
(
)
)
;
}
void
RemoteDecoderManagerChild
:
:
SetSupported
(
RemoteDecodeIn
aLocation
const
media
:
:
MediaCodecsSupported
&
aSupported
)
{
switch
(
aLocation
)
{
case
RemoteDecodeIn
:
:
GpuProcess
:
case
RemoteDecodeIn
:
:
RddProcess
:
case
RemoteDecodeIn
:
:
UtilityProcess
:
{
StaticMutexAutoLock
lock
(
sProcessSupportedMutex
)
;
sProcessSupported
[
aLocation
]
=
Some
(
aSupported
)
;
break
;
}
default
:
MOZ_CRASH
(
"
Not
to
be
used
for
any
other
process
"
)
;
}
}
}
