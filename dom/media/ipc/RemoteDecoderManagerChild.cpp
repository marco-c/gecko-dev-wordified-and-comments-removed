#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteDecoderChild
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
DataSurfaceHelpers
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
<
mozilla
/
DataMutex
.
h
>
#
include
"
mozilla
/
SyncRunnable
.
h
"
namespace
mozilla
{
using
namespace
layers
;
using
namespace
gfx
;
StaticMutex
RemoteDecoderManagerChild
:
:
sLaunchMonitor
;
StaticDataMutex
<
StaticRefPtr
<
nsIThread
>
>
sRemoteDecoderManagerChildThread
(
"
sRemoteDecoderManagerChildThread
"
)
;
static
StaticRefPtr
<
RemoteDecoderManagerChild
>
sRemoteDecoderManagerChildForRDDProcess
;
static
StaticRefPtr
<
RemoteDecoderManagerChild
>
sRemoteDecoderManagerChildForGPUProcess
;
static
UniquePtr
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
sRecreateTasks
;
class
ShutdownObserver
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
protected
:
~
ShutdownObserver
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
ShutdownObserver
nsIObserver
)
;
NS_IMETHODIMP
ShutdownObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
MOZ_ASSERT
(
!
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
;
RemoteDecoderManagerChild
:
:
Shutdown
(
)
;
return
NS_OK
;
}
StaticRefPtr
<
ShutdownObserver
>
sObserver
;
void
RemoteDecoderManagerChild
:
:
InitializeThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
if
(
!
*
remoteDecoderManagerThread
)
{
RefPtr
<
nsIThread
>
childThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
RemVidChild
"
getter_AddRefs
(
childThread
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
*
remoteDecoderManagerThread
=
childThread
;
sRecreateTasks
=
MakeUnique
<
nsTArray
<
RefPtr
<
Runnable
>
>
>
(
)
;
sObserver
=
new
ShutdownObserver
(
)
;
nsContentUtils
:
:
RegisterShutdownObserver
(
sObserver
)
;
}
}
void
RemoteDecoderManagerChild
:
:
InitForRDDProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
InitializeThread
(
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
(
*
remoteDecoderManagerThread
)
-
>
Dispatch
(
NewRunnableFunction
(
"
InitForContentRunnable
"
&
OpenForRDDProcess
std
:
:
move
(
aVideoManager
)
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
InitForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
InitializeThread
(
)
;
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
MOZ_ALWAYS_SUCCEEDS
(
(
*
remoteDecoderManagerThread
)
-
>
Dispatch
(
NewRunnableFunction
(
"
InitForContentRunnable
"
&
OpenForGPUProcess
std
:
:
move
(
aVideoManager
)
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sObserver
)
{
nsContentUtils
:
:
UnregisterShutdownObserver
(
sObserver
)
;
sObserver
=
nullptr
;
}
nsCOMPtr
<
nsIThread
>
childThread
;
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
childThread
=
remoteDecoderManagerThread
-
>
forget
(
)
;
}
if
(
childThread
)
{
MOZ_ALWAYS_SUCCEEDS
(
childThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
dom
:
:
RemoteDecoderManagerChild
:
:
Shutdown
"
[
]
(
)
{
if
(
sRemoteDecoderManagerChildForRDDProcess
&
&
sRemoteDecoderManagerChildForRDDProcess
-
>
CanSend
(
)
)
{
sRemoteDecoderManagerChildForRDDProcess
-
>
Close
(
)
;
}
sRemoteDecoderManagerChildForRDDProcess
=
nullptr
;
if
(
sRemoteDecoderManagerChildForGPUProcess
&
&
sRemoteDecoderManagerChildForGPUProcess
-
>
CanSend
(
)
)
{
sRemoteDecoderManagerChildForGPUProcess
-
>
Close
(
)
;
}
sRemoteDecoderManagerChildForGPUProcess
=
nullptr
;
}
)
)
)
;
childThread
-
>
Shutdown
(
)
;
sRecreateTasks
=
nullptr
;
}
}
void
RemoteDecoderManagerChild
:
:
RunWhenGPUProcessRecreated
(
already_AddRefed
<
Runnable
>
aTask
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
GetGPUProcessSingleton
(
)
&
&
GetGPUProcessSingleton
(
)
!
=
this
&
&
GetGPUProcessSingleton
(
)
-
>
CanSend
(
)
)
{
RefPtr
<
Runnable
>
task
=
aTask
;
task
-
>
Run
(
)
;
}
else
{
sRecreateTasks
-
>
AppendElement
(
aTask
)
;
}
}
RemoteDecoderManagerChild
*
RemoteDecoderManagerChild
:
:
GetRDDProcessSingleton
(
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
return
sRemoteDecoderManagerChildForRDDProcess
;
}
RemoteDecoderManagerChild
*
RemoteDecoderManagerChild
:
:
GetGPUProcessSingleton
(
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
return
sRemoteDecoderManagerChildForGPUProcess
;
}
nsISerialEventTarget
*
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
{
auto
remoteDecoderManagerThread
=
sRemoteDecoderManagerChildThread
.
Lock
(
)
;
return
*
remoteDecoderManagerThread
;
}
void
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
(
)
{
if
(
!
XRE_IsContentProcess
(
)
)
{
return
;
}
StaticMutexAutoLock
mon
(
sLaunchMonitor
)
;
bool
needsLaunch
=
true
;
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
managerThread
)
{
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
LaunchRDDProcessIfNeeded
-
CheckSend
"
[
&
]
(
)
{
auto
*
rps
=
GetRDDProcessSingleton
(
)
;
needsLaunch
=
rps
?
!
rps
-
>
CanSend
(
)
:
true
;
}
)
;
SyncRunnable
:
:
DispatchToThread
(
managerThread
task
)
;
}
if
(
needsLaunch
)
{
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
LaunchRDDProcess
(
)
;
}
}
PRemoteDecoderChild
*
RemoteDecoderManagerChild
:
:
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
bool
*
aSuccess
nsCString
*
)
{
MOZ_ASSERT
(
false
"
RemoteDecoderManagerChild
cannot
create
"
"
RemoteDecoderChild
classes
"
)
;
return
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
{
RemoteDecoderChild
*
child
=
static_cast
<
RemoteDecoderChild
*
>
(
actor
)
;
child
-
>
IPDLActorDestroyed
(
)
;
return
true
;
}
RemoteDecoderManagerChild
:
:
RemoteDecoderManagerChild
(
layers
:
:
VideoBridgeSource
aSource
)
:
mSource
(
aSource
)
{
}
void
RemoteDecoderManagerChild
:
:
OpenForRDDProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
GetManagerThread
(
)
&
&
GetManagerThread
(
)
-
>
IsOnCurrentThread
(
)
)
;
if
(
sRemoteDecoderManagerChildForRDDProcess
&
&
sRemoteDecoderManagerChildForRDDProcess
-
>
CanSend
(
)
)
{
return
;
}
sRemoteDecoderManagerChildForRDDProcess
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
VideoBridgeSource
:
:
RddProcess
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
sRemoteDecoderManagerChildForRDDProcess
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
}
void
RemoteDecoderManagerChild
:
:
OpenForGPUProcess
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
{
sRemoteDecoderManagerChildForGPUProcess
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
VideoBridgeSource
:
:
GpuProcess
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
sRemoteDecoderManagerChildForGPUProcess
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
for
(
Runnable
*
task
:
*
sRecreateTasks
)
{
task
-
>
Run
(
)
;
}
sRecreateTasks
-
>
Clear
(
)
;
}
void
RemoteDecoderManagerChild
:
:
InitIPDL
(
)
{
mIPDLSelfRef
=
this
;
}
void
RemoteDecoderManagerChild
:
:
ActorDealloc
(
)
{
mIPDLSelfRef
=
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
false
;
}
if
(
!
managerThread
-
>
IsOnCurrentThread
(
)
)
{
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocShmem
"
[
self
=
RefPtr
{
this
}
shmem
=
aShmem
]
(
)
mutable
{
if
(
self
-
>
CanSend
(
)
)
{
self
-
>
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
shmem
)
;
}
}
)
)
)
;
return
true
;
}
return
PRemoteDecoderManagerChild
:
:
DeallocShmem
(
aShmem
)
;
}
struct
SurfaceDescriptorUserData
{
SurfaceDescriptorUserData
(
RemoteDecoderManagerChild
*
aAllocator
SurfaceDescriptor
&
aSD
)
:
mAllocator
(
aAllocator
)
mSD
(
aSD
)
{
}
~
SurfaceDescriptorUserData
(
)
{
DestroySurfaceDescriptor
(
mAllocator
&
mSD
)
;
}
RefPtr
<
RemoteDecoderManagerChild
>
mAllocator
;
SurfaceDescriptor
mSD
;
}
;
void
DeleteSurfaceDescriptorUserData
(
void
*
aClosure
)
{
SurfaceDescriptorUserData
*
sd
=
reinterpret_cast
<
SurfaceDescriptorUserData
*
>
(
aClosure
)
;
delete
sd
;
}
already_AddRefed
<
SourceSurface
>
RemoteDecoderManagerChild
:
:
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
nullptr
;
}
SynchronousTask
task
(
"
Readback
sync
"
)
;
RefPtr
<
RemoteDecoderManagerChild
>
ref
=
this
;
SurfaceDescriptor
sd
;
if
(
NS_FAILED
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
Readback
"
[
&
]
(
)
{
AutoCompleteTask
complete
(
&
task
)
;
if
(
ref
-
>
CanSend
(
)
)
{
ref
-
>
SendReadback
(
aSD
&
sd
)
;
}
}
)
)
)
)
{
return
nullptr
;
}
task
.
Wait
(
)
;
if
(
!
IsSurfaceDescriptorValid
(
sd
)
)
{
return
nullptr
;
}
RefPtr
<
DataSourceSurface
>
source
=
GetSurfaceForDescriptor
(
sd
)
;
if
(
!
source
)
{
DestroySurfaceDescriptor
(
this
&
sd
)
;
NS_WARNING
(
"
Failed
to
map
SurfaceDescriptor
in
Readback
"
)
;
return
nullptr
;
}
static
UserDataKey
sSurfaceDescriptor
;
source
-
>
AddUserData
(
&
sSurfaceDescriptor
new
SurfaceDescriptorUserData
(
this
sd
)
DeleteSurfaceDescriptorUserData
)
;
return
source
.
forget
(
)
;
}
void
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
{
nsCOMPtr
<
nsISerialEventTarget
>
managerThread
=
GetManagerThread
(
)
;
if
(
!
managerThread
)
{
return
;
}
MOZ_ALWAYS_SUCCEEDS
(
managerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
RemoteDecoderManagerChild
:
:
DeallocateSurfaceDescriptor
"
[
ref
=
RefPtr
{
this
}
sd
=
aSD
]
(
)
{
if
(
ref
-
>
CanSend
(
)
)
{
ref
-
>
SendDeallocateSurfaceDescriptorGPUVideo
(
sd
)
;
}
}
)
)
)
;
}
void
RemoteDecoderManagerChild
:
:
HandleFatalError
(
const
char
*
aMsg
)
const
{
dom
:
:
ContentChild
:
:
FatalErrorIfNotUsingGPUProcess
(
aMsg
OtherPid
(
)
)
;
}
}
