#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
RemoteDecoderChild
.
h
"
namespace
mozilla
{
StaticRefPtr
<
nsIThread
>
sRemoteDecoderManagerChildThread
;
StaticRefPtr
<
AbstractThread
>
sRemoteDecoderManagerChildAbstractThread
;
static
StaticRefPtr
<
RemoteDecoderManagerChild
>
sRemoteDecoderManagerChild
;
void
RemoteDecoderManagerChild
:
:
InitializeThread
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sRemoteDecoderManagerChildThread
)
{
RefPtr
<
nsIThread
>
childThread
;
nsresult
rv
=
NS_NewNamedThread
(
"
RemVidChild
"
getter_AddRefs
(
childThread
)
)
;
NS_ENSURE_SUCCESS_VOID
(
rv
)
;
sRemoteDecoderManagerChildThread
=
childThread
;
sRemoteDecoderManagerChildAbstractThread
=
AbstractThread
:
:
CreateXPCOMThreadWrapper
(
childThread
false
)
;
}
}
void
RemoteDecoderManagerChild
:
:
InitForContent
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aVideoManager
)
{
InitializeThread
(
)
;
sRemoteDecoderManagerChildThread
-
>
Dispatch
(
NewRunnableFunction
(
"
InitForContentRunnable
"
&
Open
std
:
:
move
(
aVideoManager
)
)
NS_DISPATCH_NORMAL
)
;
}
void
RemoteDecoderManagerChild
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sRemoteDecoderManagerChildThread
)
{
sRemoteDecoderManagerChildThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
dom
:
:
RemoteDecoderManagerChild
:
:
Shutdown
"
[
]
(
)
{
if
(
sRemoteDecoderManagerChild
&
&
sRemoteDecoderManagerChild
-
>
CanSend
(
)
)
{
sRemoteDecoderManagerChild
-
>
Close
(
)
;
sRemoteDecoderManagerChild
=
nullptr
;
}
}
)
NS_DISPATCH_NORMAL
)
;
sRemoteDecoderManagerChildAbstractThread
=
nullptr
;
sRemoteDecoderManagerChildThread
-
>
Shutdown
(
)
;
sRemoteDecoderManagerChildThread
=
nullptr
;
}
}
RemoteDecoderManagerChild
*
RemoteDecoderManagerChild
:
:
GetSingleton
(
)
{
MOZ_ASSERT
(
NS_GetCurrentThread
(
)
=
=
GetManagerThread
(
)
)
;
return
sRemoteDecoderManagerChild
;
}
nsIThread
*
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
{
return
sRemoteDecoderManagerChildThread
;
}
AbstractThread
*
RemoteDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
{
return
sRemoteDecoderManagerChildAbstractThread
;
}
PRemoteDecoderChild
*
RemoteDecoderManagerChild
:
:
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
const
CreateDecoderParams
:
:
OptionSet
&
bool
*
nsCString
*
)
{
MOZ_ASSERT
(
false
"
RemoteDecoderManagerChild
cannot
create
"
"
RemoteDecoderChild
classes
"
)
;
return
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
{
RemoteDecoderChild
*
child
=
static_cast
<
RemoteDecoderChild
*
>
(
actor
)
;
child
-
>
IPDLActorDestroyed
(
)
;
return
true
;
}
void
RemoteDecoderManagerChild
:
:
Open
(
Endpoint
<
PRemoteDecoderManagerChild
>
&
&
aEndpoint
)
{
MOZ_ASSERT
(
NS_GetCurrentThread
(
)
=
=
GetManagerThread
(
)
)
;
if
(
sRemoteDecoderManagerChild
&
&
sRemoteDecoderManagerChild
-
>
mCanSend
)
{
return
;
}
sRemoteDecoderManagerChild
=
nullptr
;
if
(
aEndpoint
.
IsValid
(
)
)
{
RefPtr
<
RemoteDecoderManagerChild
>
manager
=
new
RemoteDecoderManagerChild
(
)
;
if
(
aEndpoint
.
Bind
(
manager
)
)
{
sRemoteDecoderManagerChild
=
manager
;
manager
-
>
InitIPDL
(
)
;
}
}
}
void
RemoteDecoderManagerChild
:
:
InitIPDL
(
)
{
mCanSend
=
true
;
mIPDLSelfRef
=
this
;
}
void
RemoteDecoderManagerChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mCanSend
=
false
;
}
void
RemoteDecoderManagerChild
:
:
DeallocPRemoteDecoderManagerChild
(
)
{
mIPDLSelfRef
=
nullptr
;
}
bool
RemoteDecoderManagerChild
:
:
CanSend
(
)
{
MOZ_ASSERT
(
NS_GetCurrentThread
(
)
=
=
GetManagerThread
(
)
)
;
return
mCanSend
;
}
}
