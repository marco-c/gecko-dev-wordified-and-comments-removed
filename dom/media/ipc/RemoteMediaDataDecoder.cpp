#
include
"
RemoteMediaDataDecoder
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
IRemoteDecoderChild
.
h
"
namespace
mozilla
{
using
base
:
:
Thread
;
RemoteMediaDataDecoder
:
:
RemoteMediaDataDecoder
(
IRemoteDecoderChild
*
aChild
nsIThread
*
aManagerThread
AbstractThread
*
aAbstractManagerThread
)
:
mChild
(
aChild
)
mManagerThread
(
aManagerThread
)
mAbstractManagerThread
(
aAbstractManagerThread
)
{
}
RemoteMediaDataDecoder
:
:
~
RemoteMediaDataDecoder
(
)
{
RefPtr
<
IRemoteDecoderChild
>
child
=
mChild
.
forget
(
)
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
"
dom
:
:
RemoteMediaDataDecoder
:
:
~
RemoteMediaDataDecoder
"
[
child
]
(
)
{
MOZ_ASSERT
(
child
)
;
child
-
>
DestroyIPDL
(
)
;
}
)
;
child
=
nullptr
;
mManagerThread
-
>
Dispatch
(
task
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
RemoteMediaDataDecoder
:
:
Init
(
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
return
InvokeAsync
(
mAbstractManagerThread
__func__
[
self
]
(
)
{
return
self
-
>
mChild
-
>
Init
(
)
;
}
)
-
>
Then
(
mAbstractManagerThread
__func__
[
self
this
]
(
TrackType
aTrack
)
{
mDescription
=
mChild
-
>
GetDescriptionName
(
)
+
NS_LITERAL_CSTRING
(
"
(
remote
)
"
)
;
mIsHardwareAccelerated
=
mChild
-
>
IsHardwareAccelerated
(
mHardwareAcceleratedReason
)
;
mConversion
=
mChild
-
>
NeedsConversion
(
)
;
return
InitPromise
:
:
CreateAndResolve
(
aTrack
__func__
)
;
}
[
self
]
(
const
MediaResult
&
aError
)
{
return
InitPromise
:
:
CreateAndReject
(
aError
__func__
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteMediaDataDecoder
:
:
Decode
(
MediaRawData
*
aSample
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
RefPtr
<
MediaRawData
>
sample
=
aSample
;
return
InvokeAsync
(
mAbstractManagerThread
__func__
[
self
sample
]
(
)
{
return
self
-
>
mChild
-
>
Decode
(
sample
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
RemoteMediaDataDecoder
:
:
Flush
(
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
return
InvokeAsync
(
mAbstractManagerThread
__func__
[
self
]
(
)
{
return
self
-
>
mChild
-
>
Flush
(
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteMediaDataDecoder
:
:
Drain
(
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
return
InvokeAsync
(
mAbstractManagerThread
__func__
[
self
]
(
)
{
return
self
-
>
mChild
-
>
Drain
(
)
;
}
)
;
}
RefPtr
<
ShutdownPromise
>
RemoteMediaDataDecoder
:
:
Shutdown
(
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
return
InvokeAsync
(
mAbstractManagerThread
__func__
[
self
]
(
)
{
self
-
>
mChild
-
>
Shutdown
(
)
;
return
ShutdownPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
bool
RemoteMediaDataDecoder
:
:
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
aFailureReason
=
mHardwareAcceleratedReason
;
return
mIsHardwareAccelerated
;
}
void
RemoteMediaDataDecoder
:
:
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
RefPtr
<
RemoteMediaDataDecoder
>
self
=
this
;
media
:
:
TimeUnit
time
=
aTime
;
mManagerThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
dom
:
:
RemoteMediaDataDecoder
:
:
SetSeekThreshold
"
[
=
]
(
)
{
MOZ_ASSERT
(
self
-
>
mChild
)
;
self
-
>
mChild
-
>
SetSeekThreshold
(
time
)
;
}
)
NS_DISPATCH_NORMAL
)
;
}
MediaDataDecoder
:
:
ConversionRequired
RemoteMediaDataDecoder
:
:
NeedsConversion
(
)
const
{
return
mConversion
;
}
nsCString
RemoteMediaDataDecoder
:
:
GetDescriptionName
(
)
const
{
return
mDescription
;
}
}
