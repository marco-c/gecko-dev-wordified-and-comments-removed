#
ifndef
include_ipc_VideoDecoderChild_h
#
define
include_ipc_VideoDecoderChild_h
#
include
"
MediaResult
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
PVideoDecoderChild
.
h
"
#
include
"
IRemoteDecoderChild
.
h
"
namespace
mozilla
{
class
RemoteVideoDecoder
;
class
RemoteDecoderModule
;
class
VideoDecoderManagerChild
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
VideoDecoderChild
final
:
public
PVideoDecoderChild
public
IRemoteDecoderChild
{
friend
class
PVideoDecoderChild
;
public
:
explicit
VideoDecoderChild
(
)
;
IPCResult
RecvOutput
(
const
VideoDataIPDL
&
aData
)
;
IPCResult
RecvInputExhausted
(
)
;
IPCResult
RecvDrainComplete
(
)
;
IPCResult
RecvError
(
const
nsresult
&
aError
)
;
IPCResult
RecvInitComplete
(
const
nsCString
&
aDecoderDescription
const
bool
&
aHardware
const
nsCString
&
aHardwareReason
const
uint32_t
&
aConversion
)
;
IPCResult
RecvInitFailed
(
const
nsresult
&
aReason
)
;
IPCResult
RecvFlushComplete
(
)
;
IPCResult
RecvShutdownComplete
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
Init
(
)
override
;
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
nsCString
GetDescriptionName
(
)
const
override
;
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
MediaDataDecoder
:
:
ConversionRequired
NeedsConversion
(
)
const
override
;
void
DestroyIPDL
(
)
override
;
MOZ_IS_CLASS_INIT
MediaResult
InitIPDL
(
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
)
;
void
IPDLActorDestroyed
(
)
;
VideoDecoderManagerChild
*
GetManager
(
)
;
private
:
~
VideoDecoderChild
(
)
;
void
AssertOnManagerThread
(
)
const
;
RefPtr
<
VideoDecoderChild
>
mIPDLSelfRef
;
RefPtr
<
nsIThread
>
mThread
;
MozPromiseHolder
<
MediaDataDecoder
:
:
InitPromise
>
mInitPromise
;
MozPromiseHolder
<
MediaDataDecoder
:
:
DecodePromise
>
mDecodePromise
;
MozPromiseHolder
<
MediaDataDecoder
:
:
DecodePromise
>
mDrainPromise
;
MozPromiseHolder
<
MediaDataDecoder
:
:
FlushPromise
>
mFlushPromise
;
MozPromiseHolder
<
ShutdownPromise
>
mShutdownPromise
;
nsCString
mHardwareAcceleratedReason
;
nsCString
mDescription
;
bool
mCanSend
;
bool
mInitialized
;
bool
mIsHardwareAccelerated
;
MediaDataDecoder
:
:
ConversionRequired
mConversion
;
bool
mNeedNewDecoder
;
MediaDataDecoder
:
:
DecodedData
mDecodedData
;
nsCString
mBlacklistedD3D11Driver
;
nsCString
mBlacklistedD3D9Driver
;
TimeStamp
mGPUCrashTime
;
RefPtr
<
VideoDecoderChild
>
mShutdownSelfRef
;
}
;
}
#
endif
