#
include
"
RemoteDecoderChild
.
h
"
#
include
"
RemoteDecoderManagerChild
.
h
"
namespace
mozilla
{
RemoteDecoderChild
:
:
RemoteDecoderChild
(
)
:
mThread
(
RemoteDecoderManagerChild
:
:
GetManagerThread
(
)
)
{
}
RemoteDecoderChild
:
:
~
RemoteDecoderChild
(
)
{
AssertOnManagerThread
(
)
;
mInitPromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvInputExhausted
(
)
{
AssertOnManagerThread
(
)
;
mDecodePromise
.
ResolveIfExists
(
std
:
:
move
(
mDecodedData
)
__func__
)
;
mDecodedData
=
MediaDataDecoder
:
:
DecodedData
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvDrainComplete
(
)
{
AssertOnManagerThread
(
)
;
mDrainPromise
.
ResolveIfExists
(
std
:
:
move
(
mDecodedData
)
__func__
)
;
mDecodedData
=
MediaDataDecoder
:
:
DecodedData
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvError
(
const
nsresult
&
aError
)
{
AssertOnManagerThread
(
)
;
mDecodedData
=
MediaDataDecoder
:
:
DecodedData
(
)
;
mDecodePromise
.
RejectIfExists
(
aError
__func__
)
;
mDrainPromise
.
RejectIfExists
(
aError
__func__
)
;
mFlushPromise
.
RejectIfExists
(
aError
__func__
)
;
mShutdownPromise
.
ResolveIfExists
(
true
__func__
)
;
RefPtr
<
RemoteDecoderChild
>
kungFuDeathGrip
=
mShutdownSelfRef
.
forget
(
)
;
Unused
<
<
kungFuDeathGrip
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvInitComplete
(
const
TrackInfo
:
:
TrackType
&
trackType
const
nsCString
&
aDecoderDescription
const
ConversionRequired
&
aConversion
)
{
AssertOnManagerThread
(
)
;
mInitPromise
.
ResolveIfExists
(
trackType
__func__
)
;
mInitialized
=
true
;
mDescription
=
aDecoderDescription
;
mConversion
=
aConversion
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvInitFailed
(
const
nsresult
&
aReason
)
{
AssertOnManagerThread
(
)
;
mInitPromise
.
RejectIfExists
(
aReason
__func__
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvFlushComplete
(
)
{
AssertOnManagerThread
(
)
;
mFlushPromise
.
ResolveIfExists
(
true
__func__
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteDecoderChild
:
:
RecvShutdownComplete
(
)
{
AssertOnManagerThread
(
)
;
MOZ_ASSERT
(
mShutdownSelfRef
)
;
mShutdownPromise
.
ResolveIfExists
(
true
__func__
)
;
RefPtr
<
RemoteDecoderChild
>
kungFuDeathGrip
=
mShutdownSelfRef
.
forget
(
)
;
Unused
<
<
kungFuDeathGrip
;
return
IPC_OK
(
)
;
}
void
RemoteDecoderChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
MOZ_ASSERT
(
mCanSend
)
;
if
(
aWhy
=
=
AbnormalShutdown
)
{
MediaResult
error
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
)
;
mDecodePromise
.
RejectIfExists
(
error
__func__
)
;
mDrainPromise
.
RejectIfExists
(
error
__func__
)
;
mFlushPromise
.
RejectIfExists
(
error
__func__
)
;
mShutdownPromise
.
ResolveIfExists
(
true
__func__
)
;
RefPtr
<
RemoteDecoderChild
>
kungFuDeathGrip
=
mShutdownSelfRef
.
forget
(
)
;
Unused
<
<
kungFuDeathGrip
;
}
mCanSend
=
false
;
}
void
RemoteDecoderChild
:
:
DestroyIPDL
(
)
{
AssertOnManagerThread
(
)
;
if
(
mCanSend
)
{
PRemoteDecoderChild
:
:
Send__delete__
(
this
)
;
}
}
void
RemoteDecoderChild
:
:
IPDLActorDestroyed
(
)
{
mIPDLSelfRef
=
nullptr
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
RemoteDecoderChild
:
:
Init
(
)
{
AssertOnManagerThread
(
)
;
if
(
!
mIPDLSelfRef
|
|
!
mCanSend
)
{
return
MediaDataDecoder
:
:
InitPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
__func__
)
;
}
SendInit
(
)
;
return
mInitPromise
.
Ensure
(
__func__
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteDecoderChild
:
:
Decode
(
MediaRawData
*
aSample
)
{
AssertOnManagerThread
(
)
;
if
(
!
mCanSend
)
{
return
MediaDataDecoder
:
:
DecodePromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
__func__
)
;
}
Shmem
buffer
;
if
(
!
AllocShmem
(
aSample
-
>
Size
(
)
Shmem
:
:
SharedMemory
:
:
TYPE_BASIC
&
buffer
)
)
{
return
MediaDataDecoder
:
:
DecodePromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
__func__
)
;
}
memcpy
(
buffer
.
get
<
uint8_t
>
(
)
aSample
-
>
Data
(
)
aSample
-
>
Size
(
)
)
;
MediaRawDataIPDL
sample
(
MediaDataIPDL
(
aSample
-
>
mOffset
aSample
-
>
mTime
aSample
-
>
mTimecode
aSample
-
>
mDuration
aSample
-
>
mKeyframe
)
aSample
-
>
mEOS
std
:
:
move
(
buffer
)
)
;
SendInput
(
sample
)
;
return
mDecodePromise
.
Ensure
(
__func__
)
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
RemoteDecoderChild
:
:
Flush
(
)
{
AssertOnManagerThread
(
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mDrainPromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
if
(
!
mCanSend
)
{
return
MediaDataDecoder
:
:
FlushPromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
__func__
)
;
}
SendFlush
(
)
;
return
mFlushPromise
.
Ensure
(
__func__
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteDecoderChild
:
:
Drain
(
)
{
AssertOnManagerThread
(
)
;
if
(
!
mCanSend
)
{
return
MediaDataDecoder
:
:
DecodePromise
:
:
CreateAndReject
(
NS_ERROR_DOM_MEDIA_DECODE_ERR
__func__
)
;
}
SendDrain
(
)
;
return
mDrainPromise
.
Ensure
(
__func__
)
;
}
RefPtr
<
ShutdownPromise
>
RemoteDecoderChild
:
:
Shutdown
(
)
{
AssertOnManagerThread
(
)
;
mInitPromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mInitialized
=
false
;
if
(
!
mCanSend
)
{
return
ShutdownPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
SendShutdown
(
)
;
MOZ_ASSERT
(
!
mShutdownSelfRef
)
;
mShutdownSelfRef
=
this
;
return
mShutdownPromise
.
Ensure
(
__func__
)
;
}
bool
RemoteDecoderChild
:
:
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
AssertOnManagerThread
(
)
;
aFailureReason
=
mHardwareAcceleratedReason
;
return
mIsHardwareAccelerated
;
}
nsCString
RemoteDecoderChild
:
:
GetDescriptionName
(
)
const
{
AssertOnManagerThread
(
)
;
return
mDescription
;
}
void
RemoteDecoderChild
:
:
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
AssertOnManagerThread
(
)
;
if
(
mCanSend
)
{
SendSetSeekThreshold
(
aTime
)
;
}
}
MediaDataDecoder
:
:
ConversionRequired
RemoteDecoderChild
:
:
NeedsConversion
(
)
const
{
AssertOnManagerThread
(
)
;
return
mConversion
;
}
void
RemoteDecoderChild
:
:
AssertOnManagerThread
(
)
const
{
MOZ_ASSERT
(
NS_GetCurrentThread
(
)
=
=
mThread
)
;
}
RemoteDecoderManagerChild
*
RemoteDecoderChild
:
:
GetManager
(
)
{
if
(
!
mCanSend
)
{
return
nullptr
;
}
return
static_cast
<
RemoteDecoderManagerChild
*
>
(
Manager
(
)
)
;
}
}
