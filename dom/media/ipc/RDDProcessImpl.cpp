#
include
"
RDDProcessImpl
.
h
"
#
include
"
mozilla
/
ipc
/
IOThreadChild
.
h
"
#
include
"
mozilla
/
GeckoArgs
.
h
"
#
if
defined
(
XP_WIN
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
elif
defined
(
__OpenBSD__
)
&
&
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
prlink
.
h
"
#
endif
namespace
mozilla
{
using
namespace
ipc
;
RDDProcessImpl
:
:
~
RDDProcessImpl
(
)
=
default
;
bool
RDDProcessImpl
:
:
Init
(
int
aArgc
char
*
aArgv
[
]
)
{
#
if
defined
(
MOZ_SANDBOX
)
&
&
defined
(
XP_WIN
)
LoadLibraryW
(
L
"
mozavcodec
.
dll
"
)
;
LoadLibraryW
(
L
"
mozavutil
.
dll
"
)
;
mozilla
:
:
SandboxTarget
:
:
Instance
(
)
-
>
StartSandbox
(
)
;
#
elif
defined
(
__OpenBSD__
)
&
&
defined
(
MOZ_SANDBOX
)
PR_LoadLibrary
(
"
libmozavcodec
.
so
"
)
;
PR_LoadLibrary
(
"
libmozavutil
.
so
"
)
;
PR_LoadLibrary
(
"
libavcodec
.
so
"
)
;
StartOpenBSDSandbox
(
GeckoProcessType_RDD
)
;
#
endif
Maybe
<
const
char
*
>
parentBuildID
=
geckoargs
:
:
sParentBuildID
.
Get
(
aArgc
aArgv
)
;
if
(
parentBuildID
.
isNothing
(
)
)
{
return
false
;
}
if
(
!
ProcessChild
:
:
InitPrefs
(
aArgc
aArgv
)
)
{
return
false
;
}
return
mRDD
-
>
Init
(
TakeInitialEndpoint
(
)
*
parentBuildID
)
;
}
void
RDDProcessImpl
:
:
CleanUp
(
)
{
NS_ShutdownXPCOM
(
nullptr
)
;
}
}
