#
include
"
RemoteVideoDecoder
.
h
"
#
include
"
VideoDecoderChild
.
h
"
#
include
"
VideoDecoderManagerChild
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
namespace
mozilla
{
namespace
dom
{
using
base
:
:
Thread
;
using
namespace
ipc
;
using
namespace
layers
;
using
namespace
gfx
;
RemoteVideoDecoder
:
:
RemoteVideoDecoder
(
)
:
mActor
(
new
VideoDecoderChild
(
)
)
{
}
RemoteVideoDecoder
:
:
~
RemoteVideoDecoder
(
)
{
RefPtr
<
VideoDecoderChild
>
actor
=
mActor
;
RefPtr
<
Runnable
>
task
=
NS_NewRunnableFunction
(
[
actor
]
(
)
{
MOZ_ASSERT
(
actor
)
;
actor
-
>
DestroyIPDL
(
)
;
}
)
;
actor
=
nullptr
;
mActor
=
nullptr
;
VideoDecoderManagerChild
:
:
GetManagerThread
(
)
-
>
Dispatch
(
task
.
forget
(
)
NS_DISPATCH_NORMAL
)
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
RemoteVideoDecoder
:
:
Init
(
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
return
InvokeAsync
(
VideoDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
__func__
[
self
this
]
(
)
{
return
mActor
-
>
Init
(
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteVideoDecoder
:
:
Decode
(
MediaRawData
*
aSample
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
RefPtr
<
MediaRawData
>
sample
=
aSample
;
return
InvokeAsync
(
VideoDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
__func__
[
self
this
sample
]
(
)
{
return
mActor
-
>
Decode
(
sample
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
RemoteVideoDecoder
:
:
Flush
(
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
return
InvokeAsync
(
VideoDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
__func__
[
self
this
]
(
)
{
return
mActor
-
>
Flush
(
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
RemoteVideoDecoder
:
:
Drain
(
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
return
InvokeAsync
(
VideoDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
__func__
[
self
this
]
(
)
{
return
mActor
-
>
Drain
(
)
;
}
)
;
}
RefPtr
<
ShutdownPromise
>
RemoteVideoDecoder
:
:
Shutdown
(
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
return
InvokeAsync
(
VideoDecoderManagerChild
:
:
GetManagerAbstractThread
(
)
__func__
[
self
this
]
(
)
{
mActor
-
>
Shutdown
(
)
;
return
ShutdownPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
bool
RemoteVideoDecoder
:
:
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
return
mActor
-
>
IsHardwareAccelerated
(
aFailureReason
)
;
}
void
RemoteVideoDecoder
:
:
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
RefPtr
<
RemoteVideoDecoder
>
self
=
this
;
media
:
:
TimeUnit
time
=
aTime
;
VideoDecoderManagerChild
:
:
GetManagerThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
[
=
]
(
)
{
MOZ_ASSERT
(
self
-
>
mActor
)
;
self
-
>
mActor
-
>
SetSeekThreshold
(
time
)
;
}
)
NS_DISPATCH_NORMAL
)
;
}
MediaDataDecoder
:
:
ConversionRequired
RemoteVideoDecoder
:
:
NeedsConversion
(
)
const
{
return
mActor
-
>
NeedsConversion
(
)
;
}
nsresult
RemoteDecoderModule
:
:
Startup
(
)
{
if
(
!
VideoDecoderManagerChild
:
:
GetManagerThread
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
mWrapped
-
>
Startup
(
)
;
}
bool
RemoteDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
mWrapped
-
>
SupportsMimeType
(
aMimeType
aDiagnostics
)
;
}
bool
RemoteDecoderModule
:
:
Supports
(
const
TrackInfo
&
aTrackInfo
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
mWrapped
-
>
Supports
(
aTrackInfo
aDiagnostics
)
;
}
already_AddRefed
<
MediaDataDecoder
>
RemoteDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
if
(
!
MediaPrefs
:
:
PDMUseGPUDecoder
(
)
|
|
!
aParams
.
mKnowsCompositor
|
|
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
.
mParentProcessType
!
=
GeckoProcessType_GPU
)
{
return
mWrapped
-
>
CreateVideoDecoder
(
aParams
)
;
}
RefPtr
<
RemoteVideoDecoder
>
object
=
new
RemoteVideoDecoder
(
)
;
SynchronousTask
task
(
"
InitIPDL
"
)
;
bool
success
;
VideoDecoderManagerChild
:
:
GetManagerThread
(
)
-
>
Dispatch
(
NS_NewRunnableFunction
(
[
&
]
(
)
{
AutoCompleteTask
complete
(
&
task
)
;
success
=
object
-
>
mActor
-
>
InitIPDL
(
aParams
.
VideoConfig
(
)
aParams
.
mKnowsCompositor
-
>
GetTextureFactoryIdentifier
(
)
)
;
}
)
NS_DISPATCH_NORMAL
)
;
task
.
Wait
(
)
;
if
(
!
success
)
{
return
nullptr
;
}
return
object
.
forget
(
)
;
}
}
}
