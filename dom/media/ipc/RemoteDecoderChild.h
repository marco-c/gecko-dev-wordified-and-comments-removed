#
ifndef
include_dom_media_ipc_RemoteDecoderChild_h
#
define
include_dom_media_ipc_RemoteDecoderChild_h
#
include
<
functional
>
#
include
"
mozilla
/
PRemoteDecoderChild
.
h
"
#
include
"
mozilla
/
RemoteMediaManagerChild
.
h
"
#
include
"
mozilla
/
ShmemRecycleAllocator
.
h
"
namespace
mozilla
{
class
RemoteMediaManagerChild
;
using
mozilla
:
:
MediaDataDecoder
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
RemoteDecoderChild
:
public
ShmemRecycleAllocator
<
RemoteDecoderChild
>
public
PRemoteDecoderChild
{
friend
class
PRemoteDecoderChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteDecoderChild
)
;
explicit
RemoteDecoderChild
(
RemoteMediaIn
aLocation
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
Init
(
)
;
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
Decode
(
const
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
aSamples
)
;
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
Drain
(
)
;
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
Flush
(
)
;
RefPtr
<
mozilla
:
:
ShutdownPromise
>
Shutdown
(
)
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
;
nsCString
GetDescriptionName
(
)
const
;
nsCString
GetProcessName
(
)
const
;
nsCString
GetCodecName
(
)
const
;
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
;
MediaDataDecoder
:
:
ConversionRequired
NeedsConversion
(
)
const
;
bool
ShouldDecoderAlwaysBeRecycled
(
)
const
;
void
DestroyIPDL
(
)
;
void
IPDLActorDestroyed
(
)
;
RemoteMediaManagerChild
*
GetManager
(
)
;
protected
:
virtual
~
RemoteDecoderChild
(
)
;
void
AssertOnManagerThread
(
)
const
;
virtual
MediaResult
ProcessOutput
(
DecodedOutputIPDL
&
&
aDecodedData
)
=
0
;
virtual
void
RecordShutdownTelemetry
(
bool
aForAbnormalShutdown
)
{
}
RefPtr
<
RemoteDecoderChild
>
mIPDLSelfRef
;
MediaDataDecoder
:
:
DecodedData
mDecodedData
;
const
RemoteMediaIn
mLocation
;
private
:
const
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
MozPromiseHolder
<
MediaDataDecoder
:
:
InitPromise
>
mInitPromise
;
MozPromiseRequestHolder
<
PRemoteDecoderChild
:
:
InitPromise
>
mInitPromiseRequest
;
MozPromiseHolder
<
MediaDataDecoder
:
:
DecodePromise
>
mDecodePromise
;
MozPromiseHolder
<
MediaDataDecoder
:
:
DecodePromise
>
mDrainPromise
;
MozPromiseHolder
<
MediaDataDecoder
:
:
FlushPromise
>
mFlushPromise
;
MozPromiseHolder
<
mozilla
:
:
ShutdownPromise
>
mShutdownPromise
;
void
HandleRejectionError
(
const
ipc
:
:
ResponseRejectReason
&
aReason
std
:
:
function
<
void
(
const
MediaResult
&
)
>
&
&
aCallback
)
;
nsCString
mHardwareAcceleratedReason
;
nsCString
mDescription
;
nsCString
mProcessName
;
nsCString
mCodecName
;
bool
mIsHardwareAccelerated
=
false
;
bool
mRemoteDecoderCrashed
=
false
;
MediaDataDecoder
:
:
ConversionRequired
mConversion
=
MediaDataDecoder
:
:
ConversionRequired
:
:
kNeedNone
;
bool
mShouldDecoderAlwaysBeRecycled
=
false
;
}
;
}
#
endif
