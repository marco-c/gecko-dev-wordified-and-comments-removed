#
ifndef
include_dom_media_ipc_RemoteMediaManagerChild_h
#
define
include_dom_media_ipc_RemoteMediaManagerChild_h
#
include
<
functional
>
#
include
"
GPUVideoImage
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
ipc
/
EnumSerializer
.
h
"
#
include
"
mozilla
/
EnumTypeTraits
.
h
"
#
include
"
mozilla
/
PRemoteMediaManagerChild
.
h
"
#
include
"
mozilla
/
ipc
/
UtilityProcessSandboxing
.
h
"
#
include
"
mozilla
/
layers
/
VideoBridgeUtils
.
h
"
namespace
mozilla
{
class
PMFCDMChild
;
class
PMFMediaEngineChild
;
class
RemoteDecoderChild
;
class
RemoteMediaDataEncoderChild
;
enum
class
RemoteMediaIn
{
Unspecified
RddProcess
GpuProcess
UtilityProcess_Generic
UtilityProcess_AppleMedia
UtilityProcess_WMF
UtilityProcess_MFMediaEngineCDM
SENTINEL
}
;
enum
class
TrackSupport
{
None
DecodeAudio
DecodeVideo
EncodeAudio
EncodeVideo
}
;
using
TrackSupportSet
=
EnumSet
<
TrackSupport
uint8_t
>
;
class
RemoteMediaManagerChild
final
:
public
PRemoteMediaManagerChild
public
mozilla
:
:
ipc
:
:
IShmemAllocator
public
mozilla
:
:
layers
:
:
IGPUVideoSurfaceManager
{
friend
class
PRemoteMediaManagerChild
;
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RemoteMediaManagerChild
override
)
static
RemoteMediaManagerChild
*
GetSingleton
(
RemoteMediaIn
aLocation
)
;
static
void
Init
(
)
;
static
void
SetSupported
(
RemoteMediaIn
aLocation
const
media
:
:
MediaCodecsSupported
&
aSupported
)
;
static
bool
Supports
(
RemoteMediaIn
aLocation
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
RemoteMediaIn
aLocation
)
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
RemoteMediaIn
aLocation
)
;
static
media
:
:
EncodeSupportSet
Supports
(
RemoteMediaIn
aLocation
CodecType
aCodec
)
;
static
RefPtr
<
PlatformEncoderModule
:
:
CreateEncoderPromise
>
InitializeEncoder
(
RefPtr
<
RemoteMediaDataEncoderChild
>
&
&
aEncoder
const
EncoderConfig
&
aConfig
)
;
static
nsISerialEventTarget
*
GetManagerThread
(
)
;
static
TrackSupportSet
GetTrackSupport
(
RemoteMediaIn
aLocation
)
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
Readback
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
already_AddRefed
<
layers
:
:
Image
>
TransferToImage
(
const
SurfaceDescriptorGPUVideo
&
aSD
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
ColorDepth
&
aColorDepth
gfx
:
:
YUVColorSpace
aYUVColorSpace
gfx
:
:
ColorSpace2
aColorPrimaries
gfx
:
:
TransferFunction
aTransferFunction
gfx
:
:
ColorRange
aColorRange
)
override
;
void
DeallocateSurfaceDescriptor
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
void
OnSetCurrent
(
const
SurfaceDescriptorGPUVideo
&
aSD
)
override
;
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PRemoteMediaManagerChild
:
:
AllocShmem
(
aSize
aShmem
)
;
}
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
override
{
return
PRemoteMediaManagerChild
:
:
AllocUnsafeShmem
(
aSize
aShmem
)
;
}
bool
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
override
;
static
void
InitForGPUProcess
(
Endpoint
<
PRemoteMediaManagerChild
>
&
&
aVideoManager
)
;
static
void
Shutdown
(
)
;
static
void
HandleRejectionError
(
const
RemoteMediaManagerChild
*
aDyingManager
RemoteMediaIn
aLocation
const
mozilla
:
:
ipc
:
:
ResponseRejectReason
&
aReason
std
:
:
function
<
void
(
const
MediaResult
&
)
>
&
&
aCallback
)
;
static
void
RunWhenGPUProcessRecreated
(
const
RemoteMediaManagerChild
*
aDyingManager
already_AddRefed
<
Runnable
>
aTask
)
;
RemoteMediaIn
Location
(
)
const
{
return
mLocation
;
}
static
RefPtr
<
GenericNonExclusivePromise
>
LaunchUtilityProcessIfNeeded
(
RemoteMediaIn
aLocation
)
;
protected
:
void
HandleFatalError
(
const
char
*
aMsg
)
override
;
PRemoteDecoderChild
*
AllocPRemoteDecoderChild
(
const
RemoteDecoderInfoIPDL
&
aRemoteDecoderInfo
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
const
Maybe
<
uint64_t
>
&
aMediaEngineId
const
Maybe
<
TrackingId
>
&
aTrackingId
PRemoteCDMChild
*
aCDM
)
;
bool
DeallocPRemoteDecoderChild
(
PRemoteDecoderChild
*
actor
)
;
PMFMediaEngineChild
*
AllocPMFMediaEngineChild
(
)
;
bool
DeallocPMFMediaEngineChild
(
PMFMediaEngineChild
*
actor
)
;
PMFCDMChild
*
AllocPMFCDMChild
(
const
nsAString
&
aKeySystem
)
;
bool
DeallocPMFCDMChild
(
PMFCDMChild
*
actor
)
;
private
:
explicit
RemoteMediaManagerChild
(
RemoteMediaIn
aLocation
)
;
~
RemoteMediaManagerChild
(
)
=
default
;
static
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
Construct
(
RefPtr
<
RemoteDecoderChild
>
&
&
aChild
RemoteMediaIn
aLocation
)
;
static
void
OpenRemoteMediaManagerChildForProcess
(
Endpoint
<
PRemoteMediaManagerChild
>
&
&
aEndpoint
RemoteMediaIn
aLocation
)
;
static
RefPtr
<
GenericNonExclusivePromise
>
LaunchRDDProcessIfNeeded
(
)
;
const
RemoteMediaIn
mLocation
;
}
;
}
namespace
IPC
{
template
<
>
struct
ParamTraits
<
mozilla
:
:
RemoteMediaIn
>
:
public
ContiguousEnumSerializer
<
mozilla
:
:
RemoteMediaIn
mozilla
:
:
RemoteMediaIn
:
:
Unspecified
mozilla
:
:
RemoteMediaIn
:
:
SENTINEL
>
{
}
;
}
#
endif
