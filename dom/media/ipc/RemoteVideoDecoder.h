#
ifndef
include_dom_media_ipc_RemoteVideoDecoderChild_h
#
define
include_dom_media_ipc_RemoteVideoDecoderChild_h
#
include
"
RemoteDecoderChild
.
h
"
#
include
"
RemoteDecoderParent
.
h
"
namespace
mozilla
{
namespace
layers
{
class
BufferRecycleBin
;
}
}
namespace
mozilla
{
class
KnowsCompositorVideo
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
RemoteVideoDecoderChild
:
public
RemoteDecoderChild
{
public
:
explicit
RemoteVideoDecoderChild
(
bool
aRecreatedOnCrash
=
false
)
;
MOZ_IS_CLASS_INIT
MediaResult
InitIPDL
(
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
layers
:
:
TextureFactoryIdentifier
*
aIdentifier
)
;
MediaResult
ProcessOutput
(
const
DecodedOutputIPDL
&
aDecodedData
)
override
;
private
:
RefPtr
<
mozilla
:
:
layers
:
:
Image
>
DeserializeImage
(
const
SurfaceDescriptorBuffer
&
sdBuffer
const
IntSize
&
aPicSize
)
;
RefPtr
<
mozilla
:
:
layers
:
:
BufferRecycleBin
>
mBufferRecycleBin
;
}
;
class
GpuRemoteVideoDecoderChild
final
:
public
RemoteVideoDecoderChild
{
public
:
GpuRemoteVideoDecoderChild
(
)
;
MOZ_IS_CLASS_INIT
MediaResult
InitIPDL
(
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
)
;
}
;
class
RemoteVideoDecoderParent
final
:
public
RemoteDecoderParent
{
public
:
RemoteVideoDecoderParent
(
RemoteDecoderManagerParent
*
aParent
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
nsISerialEventTarget
*
aManagerThread
TaskQueue
*
aDecodeTaskQueue
bool
*
aSuccess
nsCString
*
aErrorDescription
)
;
protected
:
MediaResult
ProcessDecodedData
(
const
MediaDataDecoder
:
:
DecodedData
&
aData
DecodedOutputIPDL
&
aDecodedData
)
override
;
private
:
const
VideoInfo
mVideoInfo
;
RefPtr
<
KnowsCompositorVideo
>
mKnowsCompositor
;
}
;
}
#
endif
