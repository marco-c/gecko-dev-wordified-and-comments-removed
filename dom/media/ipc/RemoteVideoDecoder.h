#
ifndef
include_dom_media_ipc_RemoteVideoDecoderChild_h
#
define
include_dom_media_ipc_RemoteVideoDecoderChild_h
#
include
"
RemoteDecoderChild
.
h
"
#
include
"
RemoteDecoderManagerChild
.
h
"
#
include
"
RemoteDecoderParent
.
h
"
namespace
mozilla
:
:
layers
{
class
BufferRecycleBin
;
}
namespace
mozilla
{
class
KnowsCompositorVideo
:
public
layers
:
:
KnowsCompositor
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
KnowsCompositorVideo
override
)
layers
:
:
TextureForwarder
*
GetTextureForwarder
(
)
override
;
layers
:
:
LayersIPCActor
*
GetLayersIPCActor
(
)
override
;
static
already_AddRefed
<
KnowsCompositorVideo
>
TryCreateForIdentifier
(
const
layers
:
:
TextureFactoryIdentifier
&
aIdentifier
)
;
private
:
KnowsCompositorVideo
(
)
=
default
;
virtual
~
KnowsCompositorVideo
(
)
=
default
;
}
;
using
mozilla
:
:
ipc
:
:
IPCResult
;
class
RemoteVideoDecoderChild
:
public
RemoteDecoderChild
{
public
:
explicit
RemoteVideoDecoderChild
(
RemoteDecodeIn
aLocation
)
;
MOZ_IS_CLASS_INIT
MediaResult
InitIPDL
(
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
mozilla
:
:
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
aIdentifier
const
Maybe
<
uint64_t
>
&
aMediaEngineId
)
;
MediaResult
ProcessOutput
(
DecodedOutputIPDL
&
&
aDecodedData
)
override
;
private
:
RefPtr
<
mozilla
:
:
layers
:
:
BufferRecycleBin
>
mBufferRecycleBin
;
}
;
class
RemoteVideoDecoderParent
final
:
public
RemoteDecoderParent
{
public
:
RemoteVideoDecoderParent
(
RemoteDecoderManagerParent
*
aParent
const
VideoInfo
&
aVideoInfo
float
aFramerate
const
CreateDecoderParams
:
:
OptionSet
&
aOptions
const
Maybe
<
layers
:
:
TextureFactoryIdentifier
>
&
aIdentifier
nsISerialEventTarget
*
aManagerThread
TaskQueue
*
aDecodeTaskQueue
Maybe
<
uint64_t
>
aMediaEngineId
)
;
protected
:
IPCResult
RecvConstruct
(
ConstructResolver
&
&
aResolver
)
override
;
MediaResult
ProcessDecodedData
(
MediaDataDecoder
:
:
DecodedData
&
&
aData
DecodedOutputIPDL
&
aDecodedData
)
override
;
private
:
const
VideoInfo
mVideoInfo
;
const
float
mFramerate
;
RefPtr
<
KnowsCompositorVideo
>
mKnowsCompositor
;
}
;
}
#
endif
