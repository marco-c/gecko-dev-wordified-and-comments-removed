#
ifndef
include_dom_ipc_RemoteVideoDecoder_h
#
define
include_dom_ipc_RemoteVideoDecoder_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
MediaData
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
namespace
mozilla
{
namespace
dom
{
class
VideoDecoderChild
;
class
RemoteDecoderModule
;
class
RemoteVideoDecoder
:
public
MediaDataDecoder
{
public
:
friend
class
RemoteDecoderModule
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
RemoteVideoDecoder
"
;
}
private
:
RemoteVideoDecoder
(
)
;
~
RemoteVideoDecoder
(
)
;
RefPtr
<
VideoDecoderChild
>
mActor
;
}
;
class
RemoteDecoderModule
:
public
PlatformDecoderModule
{
public
:
explicit
RemoteDecoderModule
(
PlatformDecoderModule
*
aWrapped
)
:
mWrapped
(
aWrapped
)
{
}
nsresult
Startup
(
)
override
;
bool
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
override
;
bool
Supports
(
const
TrackInfo
&
aTrackInfo
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
override
;
ConversionRequired
DecoderNeedsConversion
(
const
TrackInfo
&
aConfig
)
const
override
;
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
override
;
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
override
{
return
nullptr
;
}
private
:
RefPtr
<
PlatformDecoderModule
>
mWrapped
;
}
;
}
}
#
endif
