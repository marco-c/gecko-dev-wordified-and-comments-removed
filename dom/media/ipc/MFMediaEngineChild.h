#
ifndef
DOM_MEDIA_IPC_MFMEDIAENGINECHILD_H_
#
define
DOM_MEDIA_IPC_MFMEDIAENGINECHILD_H_
#
include
"
ExternalEngineStateMachine
.
h
"
#
include
"
MFMediaEngineUtils
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
PMFMediaEngineChild
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
namespace
mozilla
{
class
MFMediaEngineWrapper
;
class
MFMediaEngineChild
final
:
public
PMFMediaEngineChild
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFMediaEngineChild
)
;
MFMediaEngineChild
(
MFMediaEngineWrapper
*
aOwner
FrameStatistics
*
aFrameStats
)
;
void
OwnerDestroyed
(
)
;
void
IPDLActorDestroyed
(
)
;
RefPtr
<
GenericNonExclusivePromise
>
Init
(
const
MediaInfo
&
aInfo
const
ExternalPlaybackEngine
:
:
InitFlagSet
&
aFlags
)
;
void
Shutdown
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestSample
(
TrackInfo
:
:
TrackType
aType
bool
aIsEnough
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateCurrentTime
(
double
aCurrentTimeInSecond
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyEvent
(
MFMediaEngineEvent
aEvent
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyError
(
const
MediaResult
&
aError
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateStatisticData
(
const
StatisticData
&
aData
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyResizing
(
uint32_t
aWidth
uint32_t
aHeight
)
;
nsISerialEventTarget
*
ManagerThread
(
)
{
return
mManagerThread
;
}
void
AssertOnManagerThread
(
)
const
{
MOZ_ASSERT
(
mManagerThread
-
>
IsOnCurrentThread
(
)
)
;
}
uint64_t
Id
(
)
const
{
return
mMediaEngineId
;
}
private
:
~
MFMediaEngineChild
(
)
=
default
;
uint64_t
GetUpdatedRenderedFrames
(
const
StatisticData
&
aData
)
;
uint64_t
GetUpdatedDroppedFrames
(
const
StatisticData
&
aData
)
;
MFMediaEngineWrapper
*
MOZ_NON_OWNING_REF
mOwner
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mManagerThread
;
Atomic
<
uint64_t
>
mMediaEngineId
;
RefPtr
<
MFMediaEngineChild
>
mIPDLSelfRef
;
MozPromiseHolder
<
GenericNonExclusivePromise
>
mInitPromiseHolder
;
MozPromiseRequestHolder
<
InitMediaEnginePromise
>
mInitEngineRequest
;
NotNull
<
FrameStatistics
*
>
const
MOZ_NON_OWNING_REF
mFrameStats
;
bool
mShutdown
=
false
;
Maybe
<
uint64_t
>
mAccumulatedPresentedFramesFromPrevEngine
;
Maybe
<
uint64_t
>
mAccumulatedDroppedFramesFromPrevEngine
;
}
;
class
MFMediaEngineWrapper
final
:
public
ExternalPlaybackEngine
{
public
:
MFMediaEngineWrapper
(
ExternalEngineStateMachine
*
aOwner
FrameStatistics
*
aFrameStats
)
;
~
MFMediaEngineWrapper
(
)
;
RefPtr
<
GenericNonExclusivePromise
>
Init
(
const
MediaInfo
&
aInfo
const
InitFlagSet
&
aFlags
)
override
;
void
Play
(
)
override
;
void
Pause
(
)
override
;
void
Seek
(
const
media
:
:
TimeUnit
&
aTargetTime
)
override
;
void
Shutdown
(
)
override
;
void
SetPlaybackRate
(
double
aPlaybackRate
)
override
;
void
SetVolume
(
double
aVolume
)
override
;
void
SetLooping
(
bool
aLooping
)
override
;
void
SetPreservesPitch
(
bool
aPreservesPitch
)
override
;
media
:
:
TimeUnit
GetCurrentPosition
(
)
override
;
void
NotifyEndOfStream
(
TrackInfo
:
:
TrackType
aType
)
override
;
uint64_t
Id
(
)
const
override
{
return
mEngine
-
>
Id
(
)
;
}
bool
IsInited
(
)
const
{
return
mEngine
-
>
Id
(
)
!
=
0
;
}
bool
SetCDMProxy
(
CDMProxy
*
aProxy
)
override
;
void
NotifyResizing
(
uint32_t
aWidth
uint32_t
aHeight
)
override
;
nsISerialEventTarget
*
ManagerThread
(
)
{
return
mEngine
-
>
ManagerThread
(
)
;
}
void
AssertOnManagerThread
(
)
const
{
mEngine
-
>
AssertOnManagerThread
(
)
;
}
private
:
friend
class
MFMediaEngineChild
;
void
UpdateCurrentTime
(
double
aCurrentTimeInSecond
)
;
void
NotifyEvent
(
ExternalEngineEvent
aEvent
)
;
void
NotifyError
(
const
MediaResult
&
aError
)
;
const
RefPtr
<
MFMediaEngineChild
>
mEngine
;
std
:
:
atomic
<
double
>
mCurrentTimeInSecond
;
}
;
}
#
endif
