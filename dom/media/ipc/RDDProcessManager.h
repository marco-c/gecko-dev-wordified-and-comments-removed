#
ifndef
_include_dom_media_ipc_RDDProcessManager_h_
#
define
_include_dom_media_ipc_RDDProcessManager_h_
#
include
"
mozilla
/
RDDProcessHost
.
h
"
#
include
"
mozilla
/
ipc
/
TaskFactory
.
h
"
namespace
mozilla
{
class
MemoryReportingProcess
;
class
PRemoteDecoderManagerChild
;
class
RDDChild
;
class
RDDProcessManager
final
:
public
RDDProcessHost
:
:
Listener
{
friend
class
RDDChild
;
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
RDDProcessManager
*
Get
(
)
;
~
RDDProcessManager
(
)
;
bool
LaunchRDDProcess
(
)
;
bool
IsRDDProcessLaunching
(
)
;
bool
EnsureRDDReady
(
)
;
bool
CreateContentBridge
(
base
:
:
ProcessId
aOtherProcess
mozilla
:
:
ipc
:
:
Endpoint
<
PRemoteDecoderManagerChild
>
*
aOutRemoteDecoderManager
)
;
void
OnProcessLaunchComplete
(
RDDProcessHost
*
aHost
)
override
;
void
OnProcessUnexpectedShutdown
(
RDDProcessHost
*
aHost
)
override
;
void
NotifyRemoteActorDestroyed
(
const
uint64_t
&
aProcessToken
)
;
void
KillProcess
(
)
;
base
:
:
ProcessId
RDDProcessPid
(
)
;
RefPtr
<
MemoryReportingProcess
>
GetProcessMemoryReporter
(
)
;
RDDChild
*
GetRDDChild
(
)
{
return
mRDDChild
;
}
bool
AttemptedRDDProcess
(
)
const
{
return
mNumProcessAttempts
>
0
;
}
RDDProcessHost
*
Process
(
)
{
return
mProcess
;
}
private
:
bool
CreateVideoBridge
(
)
;
void
OnXPCOMShutdown
(
)
;
void
OnPreferenceChange
(
const
char16_t
*
aData
)
;
RDDProcessManager
(
)
;
void
CleanShutdown
(
)
;
void
DestroyProcess
(
)
;
DISALLOW_COPY_AND_ASSIGN
(
RDDProcessManager
)
;
class
Observer
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
explicit
Observer
(
RDDProcessManager
*
aManager
)
;
protected
:
~
Observer
(
)
=
default
;
RDDProcessManager
*
mManager
;
}
;
friend
class
Observer
;
private
:
const
RefPtr
<
Observer
>
mObserver
;
mozilla
:
:
ipc
:
:
TaskFactory
<
RDDProcessManager
>
mTaskFactory
;
uint32_t
mNumProcessAttempts
=
0
;
RDDProcessHost
*
mProcess
=
nullptr
;
uint64_t
mProcessToken
=
0
;
RDDChild
*
mRDDChild
=
nullptr
;
nsTArray
<
mozilla
:
:
dom
:
:
Pref
>
mQueuedPrefs
;
}
;
}
#
endif
