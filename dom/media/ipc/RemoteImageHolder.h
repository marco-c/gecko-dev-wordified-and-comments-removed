#
ifndef
mozilla_dom_media_RemoteImageHolder_h
#
define
mozilla_dom_media_RemoteImageHolder_h
#
include
"
MediaData
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
VideoBridgeUtils
.
h
"
namespace
mozilla
{
namespace
layers
{
class
BufferRecycleBin
;
class
IGPUVideoSurfaceManager
;
}
class
RemoteImageHolder
final
{
friend
struct
ipc
:
:
IPDLParamTraits
<
RemoteImageHolder
>
;
public
:
RemoteImageHolder
(
)
=
default
;
RemoteImageHolder
(
layers
:
:
IGPUVideoSurfaceManager
*
aManager
layers
:
:
VideoBridgeSource
aSource
const
gfx
:
:
IntSize
&
aSize
const
layers
:
:
SurfaceDescriptor
&
aSD
)
:
mSource
(
aSource
)
mSize
(
aSize
)
mSD
(
aSD
)
mManager
(
aManager
)
mEmpty
(
false
)
{
}
RemoteImageHolder
(
RemoteImageHolder
&
&
aOther
)
:
mSource
(
aOther
.
mSource
)
mSize
(
aOther
.
mSize
)
mSD
(
aOther
.
mSD
)
mManager
(
aOther
.
mManager
)
mEmpty
(
aOther
.
mEmpty
)
{
aOther
.
mEmpty
=
true
;
}
RemoteImageHolder
(
const
RemoteImageHolder
&
aOther
)
=
delete
;
RemoteImageHolder
&
operator
=
(
const
RemoteImageHolder
&
aOther
)
=
delete
;
~
RemoteImageHolder
(
)
;
already_AddRefed
<
layers
:
:
Image
>
TransferToImage
(
layers
:
:
BufferRecycleBin
*
aBufferRecycleBin
=
nullptr
)
;
private
:
already_AddRefed
<
layers
:
:
Image
>
DeserializeImage
(
layers
:
:
BufferRecycleBin
*
aBufferRecycleBin
)
;
layers
:
:
VideoBridgeSource
mSource
=
layers
:
:
VideoBridgeSource
:
:
GpuProcess
;
gfx
:
:
IntSize
mSize
;
layers
:
:
SurfaceDescriptor
mSD
;
RefPtr
<
layers
:
:
IGPUVideoSurfaceManager
>
mManager
;
bool
mEmpty
=
true
;
}
;
template
<
>
struct
ipc
:
:
IPDLParamTraits
<
RemoteImageHolder
>
{
static
void
Write
(
IPC
:
:
Message
*
aMsg
IProtocol
*
aActor
RemoteImageHolder
&
&
aParam
)
;
static
bool
Read
(
const
IPC
:
:
Message
*
aMsg
PickleIterator
*
aIter
IProtocol
*
aActor
RemoteImageHolder
*
aResult
)
;
}
;
}
#
endif
