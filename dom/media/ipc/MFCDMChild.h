#
ifndef
DOM_MEDIA_IPC_MFCDMCHILD_H_
#
define
DOM_MEDIA_IPC_MFCDMCHILD_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
PMFCDMChild
.
h
"
namespace
mozilla
{
class
MFCDMChild
final
:
public
PMFCDMChild
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFCDMChild
)
;
explicit
MFCDMChild
(
const
nsAString
&
aKeySystem
)
;
using
CapabilitiesPromise
=
MozPromise
<
MFCDMCapabilitiesIPDL
nsresult
true
>
;
RefPtr
<
CapabilitiesPromise
>
GetCapabilities
(
)
;
template
<
typename
PromiseType
>
already_AddRefed
<
PromiseType
>
InvokeAsync
(
std
:
:
function
<
void
(
)
>
&
&
aCall
const
char
*
aCallerName
MozPromiseHolder
<
PromiseType
>
&
aPromise
)
;
using
InitPromise
=
MozPromise
<
MFCDMInitIPDL
nsresult
true
>
;
RefPtr
<
InitPromise
>
Init
(
const
nsAString
&
aOrigin
const
KeySystemConfig
:
:
Requirement
aPersistentState
const
KeySystemConfig
:
:
Requirement
aDistinctiveID
const
bool
aHWSecure
)
;
uint64_t
Id
(
)
const
{
return
mId
;
}
void
IPDLActorDestroyed
(
)
{
AssertOnManagerThread
(
)
;
mIPDLSelfRef
=
nullptr
;
if
(
!
mShutdown
)
{
mState
=
NS_ERROR_NOT_AVAILABLE
;
}
}
void
Shutdown
(
)
;
nsISerialEventTarget
*
ManagerThread
(
)
{
return
mManagerThread
;
}
void
AssertOnManagerThread
(
)
const
{
MOZ_ASSERT
(
mManagerThread
-
>
IsOnCurrentThread
(
)
)
;
}
private
:
~
MFCDMChild
(
)
=
default
;
using
RemotePromise
=
GenericNonExclusivePromise
;
RefPtr
<
RemotePromise
>
EnsureRemote
(
)
;
void
AssertSendable
(
)
;
const
nsString
mKeySystem
;
const
RefPtr
<
nsISerialEventTarget
>
mManagerThread
;
RefPtr
<
MFCDMChild
>
mIPDLSelfRef
;
RefPtr
<
RemotePromise
>
mRemotePromise
;
MozPromiseHolder
<
RemotePromise
>
mRemotePromiseHolder
;
MozPromiseRequestHolder
<
RemotePromise
>
mRemoteRequest
;
Atomic
<
nsresult
>
mState
;
MozPromiseHolder
<
CapabilitiesPromise
>
mCapabilitiesPromiseHolder
;
Atomic
<
bool
>
mShutdown
;
Atomic
<
uint64_t
>
mId
;
MozPromiseHolder
<
InitPromise
>
mInitPromiseHolder
;
using
InitIPDLPromise
=
MozPromise
<
mozilla
:
:
MFCDMInitResult
mozilla
:
:
ipc
:
:
ResponseRejectReason
true
>
;
MozPromiseRequestHolder
<
InitIPDLPromise
>
mInitRequest
;
}
;
}
#
endif
