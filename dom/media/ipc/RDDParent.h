#
ifndef
_include_dom_media_ipc_RDDParent_h__
#
define
_include_dom_media_ipc_RDDParent_h__
#
include
"
mozilla
/
PRDDParent
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
class
TimeStamp
;
class
ChildProfilerController
;
class
RDDParent
final
:
public
PRDDParent
{
public
:
RDDParent
(
)
;
~
RDDParent
(
)
;
static
RDDParent
*
GetSingleton
(
)
;
bool
Init
(
base
:
:
ProcessId
aParentPid
const
char
*
aParentBuildID
MessageLoop
*
aIOLoop
UniquePtr
<
IPC
:
:
Channel
>
aChannel
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInit
(
nsTArray
<
GfxVarUpdate
>
&
&
vars
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
aBrokerFd
const
bool
&
aCanRecordReleaseTelemetry
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitProfiler
(
Endpoint
<
PProfilerChild
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNewContentRemoteDecoderManager
(
Endpoint
<
PRemoteDecoderManagerParent
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitVideoBridge
(
Endpoint
<
PVideoBridgeChild
>
&
&
aEndpoint
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRequestMemoryReport
(
const
uint32_t
&
generation
const
bool
&
anonymize
const
bool
&
minimizeMemoryUsage
const
Maybe
<
ipc
:
:
FileDescriptor
>
&
DMDFile
const
RequestMemoryReportResolver
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvGetUntrustedModulesData
(
GetUntrustedModulesDataResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPreferenceUpdate
(
const
Pref
&
pref
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdateVar
(
const
GfxVarUpdate
&
pref
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
private
:
const
TimeStamp
mLaunchTime
;
#
ifdef
MOZ_GECKO_PROFILER
RefPtr
<
ChildProfilerController
>
mProfilerController
;
#
endif
}
;
}
#
endif
