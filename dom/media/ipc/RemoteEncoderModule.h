#
if
!
defined
(
RemoteEncoderModule_h_
)
#
define
RemoteEncoderModule_h_
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
RemoteMediaManagerChild
.
h
"
namespace
mozilla
{
class
RemoteEncoderModule
final
:
public
PlatformEncoderModule
{
public
:
static
already_AddRefed
<
PlatformEncoderModule
>
Create
(
RemoteMediaIn
aLocation
)
;
already_AddRefed
<
MediaDataEncoder
>
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
override
{
return
CreateEncoder
(
aConfig
aTaskQueue
)
;
}
already_AddRefed
<
MediaDataEncoder
>
CreateAudioEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
override
{
return
CreateEncoder
(
aConfig
aTaskQueue
)
;
}
RefPtr
<
PlatformEncoderModule
:
:
CreateEncoderPromise
>
AsyncCreateEncoder
(
const
EncoderConfig
&
aEncoderConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
override
;
media
:
:
EncodeSupportSet
Supports
(
const
EncoderConfig
&
aConfig
)
const
override
;
media
:
:
EncodeSupportSet
SupportsCodec
(
CodecType
aCodecType
)
const
override
;
const
char
*
GetName
(
)
const
override
;
private
:
already_AddRefed
<
MediaDataEncoder
>
CreateEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
;
template
<
typename
T
typename
.
.
.
Args
>
friend
already_AddRefed
<
T
>
MakeAndAddRef
(
Args
&
&
.
.
.
)
;
explicit
RemoteEncoderModule
(
RemoteMediaIn
aLocation
)
;
const
RemoteMediaIn
mLocation
;
}
;
}
#
endif
