#
ifndef
DOM_MEDIA_IPC_MFMEDIAENGINEPARENT_H_
#
define
DOM_MEDIA_IPC_MFMEDIAENGINEPARENT_H_
#
include
"
MediaInfo
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
PMFMediaEngineParent
.
h
"
namespace
mozilla
{
class
MFMediaEngineStream
;
class
RemoteDecoderManagerParent
;
class
MFMediaEngineParent
final
:
public
PMFMediaEngineParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFMediaEngineParent
)
;
explicit
MFMediaEngineParent
(
RemoteDecoderManagerParent
*
aManager
)
;
using
TrackType
=
TrackInfo
:
:
TrackType
;
static
MFMediaEngineParent
*
GetMediaEngineById
(
uint64_t
aId
)
;
MFMediaEngineStream
*
GetMediaEngineStream
(
TrackType
aType
const
CreateDecoderParams
&
aParam
)
;
uint64_t
Id
(
)
const
{
return
mMediaEngineId
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvInitMediaEngine
(
const
MediaEngineInfoIPDL
&
aInfo
InitMediaEngineResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyMediaInfo
(
const
MediaInfoIPDL
&
aInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPlay
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPause
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSeek
(
double
aTargetTimeInSecond
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetVolume
(
double
aVolume
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPlaybackRate
(
double
aPlaybackRate
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLooping
(
bool
aLooping
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyEndOfStream
(
TrackInfo
:
:
TrackType
aType
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
;
void
Destroy
(
)
;
private
:
~
MFMediaEngineParent
(
)
;
void
AssertOnManagerThread
(
)
const
;
static
inline
uint64_t
sMediaEngineIdx
=
0
;
const
uint64_t
mMediaEngineId
;
RefPtr
<
MFMediaEngineParent
>
mIPDLSelfRef
;
const
RefPtr
<
RemoteDecoderManagerParent
>
mManager
;
}
;
}
#
endif
