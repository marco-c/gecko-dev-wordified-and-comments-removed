#
ifndef
DOM_MEDIA_IPC_MFMEDIAENGINEPARENT_H_
#
define
DOM_MEDIA_IPC_MFMEDIAENGINEPARENT_H_
#
include
<
Mfidl
.
h
>
#
include
<
winnt
.
h
>
#
include
<
wrl
.
h
>
#
include
"
MediaInfo
.
h
"
#
include
"
MFMediaEngineExtra
.
h
"
#
include
"
MFMediaEngineNotify
.
h
"
#
include
"
MFMediaEngineUtils
.
h
"
#
include
"
MFMediaSource
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
PMFMediaEngineParent
.
h
"
namespace
mozilla
{
class
MFCDMProxy
;
class
MFContentProtectionManager
;
class
MFMediaEngineExtension
;
class
MFMediaEngineStreamWrapper
;
class
MFMediaSource
;
class
RemoteDecoderManagerParent
;
class
MFMediaEngineParent
final
:
public
PMFMediaEngineParent
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFMediaEngineParent
)
;
MFMediaEngineParent
(
RemoteDecoderManagerParent
*
aManager
nsISerialEventTarget
*
aManagerThread
)
;
using
TrackType
=
TrackInfo
:
:
TrackType
;
static
MFMediaEngineParent
*
GetMediaEngineById
(
uint64_t
aId
)
;
MFMediaEngineStreamWrapper
*
GetMediaEngineStream
(
TrackType
aType
const
CreateDecoderParams
&
aParam
)
;
uint64_t
Id
(
)
const
{
return
mMediaEngineId
;
}
mozilla
:
:
ipc
:
:
IPCResult
RecvInitMediaEngine
(
const
MediaEngineInfoIPDL
&
aInfo
InitMediaEngineResolver
&
&
aResolver
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyMediaInfo
(
const
MediaInfoIPDL
&
aInfo
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPlay
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPause
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSeek
(
double
aTargetTimeInSecond
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetCDMProxyId
(
uint64_t
aProxyId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetVolume
(
double
aVolume
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetPlaybackRate
(
double
aPlaybackRate
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvSetLooping
(
bool
aLooping
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyEndOfStream
(
TrackInfo
:
:
TrackType
aType
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvShutdown
(
)
;
void
Destroy
(
)
;
private
:
~
MFMediaEngineParent
(
)
;
void
CreateMediaEngine
(
)
;
void
InitializeVirtualVideoWindow
(
)
;
void
InitializeDXGIDeviceManager
(
)
;
void
AssertOnManagerThread
(
)
const
;
void
HandleMediaEngineEvent
(
MFMediaEngineEventWrapper
aEvent
)
;
void
HandleRequestSample
(
const
SampleRequest
&
aRequest
)
;
void
NotifyError
(
MF_MEDIA_ENGINE_ERR
aError
HRESULT
aResult
=
0
)
;
void
DestroyEngineIfExists
(
const
Maybe
<
MediaResult
>
&
aError
=
Nothing
(
)
)
;
void
EnsureDcompSurfaceHandle
(
)
;
void
UpdateStatisticsData
(
)
;
void
SetMediaSourceOnEngine
(
)
;
static
inline
uint64_t
sMediaEngineIdx
=
0
;
const
uint64_t
mMediaEngineId
;
RefPtr
<
MFMediaEngineParent
>
mIPDLSelfRef
;
const
RefPtr
<
RemoteDecoderManagerParent
>
mManager
;
const
RefPtr
<
nsISerialEventTarget
>
mManagerThread
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFMediaEngine
>
mMediaEngine
;
Microsoft
:
:
WRL
:
:
ComPtr
<
MFMediaEngineNotify
>
mMediaEngineNotify
;
Microsoft
:
:
WRL
:
:
ComPtr
<
MFMediaEngineExtension
>
mMediaEngineExtension
;
Microsoft
:
:
WRL
:
:
ComPtr
<
MFMediaSource
>
mMediaSource
;
#
ifdef
MOZ_WMF_CDM
Microsoft
:
:
WRL
:
:
ComPtr
<
MFContentProtectionManager
>
mContentProtectionManager
;
#
endif
MediaEventListener
mMediaEngineEventListener
;
MediaEventListener
mRequestSampleListener
;
bool
mIsCreatedMediaEngine
=
false
;
HWND
mVirtualVideoWindow
=
nullptr
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFDXGIDeviceManager
>
mDXGIDeviceManager
;
DWORD
mDisplayWidth
=
0
;
DWORD
mDisplayHeight
=
0
;
bool
mIsEnableDcompMode
=
false
;
float
mPlaybackRate
=
1
.
0
;
StatisticData
mCurrentPlaybackStatisticData
;
StatisticData
mPrevPlaybackStatisticData
;
}
;
}
#
endif
