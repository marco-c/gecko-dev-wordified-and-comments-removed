#
ifndef
MOZILLA_AUDIO_RING_BUFFER_H_
#
define
MOZILLA_AUDIO_RING_BUFFER_H_
#
include
"
AudioSampleFormat
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
<
functional
>
namespace
mozilla
{
class
AudioRingBuffer
final
{
public
:
explicit
AudioRingBuffer
(
int
aSizeInBytes
)
;
~
AudioRingBuffer
(
)
;
void
SetSampleFormat
(
AudioSampleFormat
aFormat
)
;
int
Write
(
const
Span
<
const
float
>
&
aBuffer
)
;
int
Write
(
const
Span
<
const
int16_t
>
&
aBuffer
)
;
int
Write
(
const
AudioRingBuffer
&
aBuffer
int
aSamples
)
;
int
WriteSilence
(
int
aSamples
)
;
int
Read
(
const
Span
<
float
>
&
aBuffer
)
;
int
Read
(
const
Span
<
int16_t
>
&
aBuffer
)
;
int
ReadNoCopy
(
std
:
:
function
<
int
(
const
Span
<
const
float
>
&
)
>
&
&
aCallable
)
;
int
ReadNoCopy
(
std
:
:
function
<
int
(
const
Span
<
const
int16_t
>
&
)
>
&
&
aCallable
)
;
int
Discard
(
int
aSamples
)
;
int
Clear
(
)
;
bool
IsFull
(
)
const
;
bool
IsEmpty
(
)
const
;
int
AvailableWrite
(
)
const
;
int
AvailableRead
(
)
const
;
private
:
class
AudioRingBufferPrivate
;
UniquePtr
<
AudioRingBufferPrivate
>
mPtr
;
}
;
}
#
endif
