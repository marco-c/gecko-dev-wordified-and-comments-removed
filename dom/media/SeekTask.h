#
ifndef
SEEK_TASK_H
#
define
SEEK_TASK_H
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
MediaResult
.
h
"
#
include
"
SeekTarget
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
MediaData
;
class
MediaDecoderReaderWrapper
;
namespace
media
{
class
TimeUnit
;
}
struct
SeekTaskResolveValue
{
RefPtr
<
MediaData
>
mSeekedAudioData
;
RefPtr
<
MediaData
>
mSeekedVideoData
;
bool
mIsAudioQueueFinished
;
bool
mIsVideoQueueFinished
;
}
;
struct
SeekTaskRejectValue
{
SeekTaskRejectValue
(
)
:
mIsAudioQueueFinished
(
false
)
mIsVideoQueueFinished
(
false
)
mError
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
)
{
}
bool
mIsAudioQueueFinished
;
bool
mIsVideoQueueFinished
;
MediaResult
mError
;
}
;
class
SeekTask
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
SeekTask
)
public
:
static
const
bool
IsExclusive
=
true
;
using
SeekTaskPromise
=
MozPromise
<
SeekTaskResolveValue
SeekTaskRejectValue
IsExclusive
>
;
virtual
void
Discard
(
)
=
0
;
virtual
RefPtr
<
SeekTaskPromise
>
Seek
(
const
media
:
:
TimeUnit
&
aDuration
)
=
0
;
virtual
bool
NeedToResetMDSM
(
)
const
=
0
;
virtual
int64_t
CalculateNewCurrentTime
(
)
const
=
0
;
virtual
void
HandleAudioDecoded
(
MediaData
*
aAudio
)
=
0
;
virtual
void
HandleVideoDecoded
(
MediaData
*
aVideo
TimeStamp
aDecodeStart
)
=
0
;
virtual
void
HandleNotDecoded
(
MediaData
:
:
Type
aType
const
MediaResult
&
aError
)
=
0
;
virtual
void
HandleAudioWaited
(
MediaData
:
:
Type
aType
)
=
0
;
virtual
void
HandleVideoWaited
(
MediaData
:
:
Type
aType
)
=
0
;
virtual
void
HandleNotWaited
(
const
WaitForDataRejectValue
&
aRejection
)
=
0
;
protected
:
SeekTask
(
const
void
*
aDecoderID
AbstractThread
*
aThread
MediaDecoderReaderWrapper
*
aReader
const
SeekTarget
&
aTarget
)
;
virtual
~
SeekTask
(
)
;
void
Resolve
(
const
char
*
aCallSite
)
;
void
RejectIfExist
(
const
MediaResult
&
aError
const
char
*
aCallSite
)
;
void
AssertOwnerThread
(
)
const
;
AbstractThread
*
OwnerThread
(
)
const
;
const
void
*
mDecoderID
;
const
RefPtr
<
AbstractThread
>
mOwnerThread
;
const
RefPtr
<
MediaDecoderReaderWrapper
>
mReader
;
SeekTarget
mTarget
;
MozPromiseHolder
<
SeekTaskPromise
>
mSeekTaskPromise
;
bool
mIsDiscarded
;
RefPtr
<
MediaData
>
mSeekedAudioData
;
RefPtr
<
MediaData
>
mSeekedVideoData
;
bool
mIsAudioQueueFinished
;
bool
mIsVideoQueueFinished
;
}
;
}
#
endif
