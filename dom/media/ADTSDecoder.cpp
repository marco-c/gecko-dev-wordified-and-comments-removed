#
include
"
ADTSDecoder
.
h
"
#
include
"
ADTSDemuxer
.
h
"
#
include
"
MediaContentType
.
h
"
#
include
"
MediaDecoderStateMachine
.
h
"
#
include
"
MediaFormatReader
.
h
"
#
include
"
PDMFactory
.
h
"
namespace
mozilla
{
MediaDecoder
*
ADTSDecoder
:
:
Clone
(
MediaDecoderOwner
*
aOwner
)
{
if
(
!
IsEnabled
(
)
)
return
nullptr
;
return
new
ADTSDecoder
(
aOwner
)
;
}
MediaDecoderStateMachine
*
ADTSDecoder
:
:
CreateStateMachine
(
)
{
RefPtr
<
MediaDecoderReader
>
reader
=
new
MediaFormatReader
(
this
new
ADTSDemuxer
(
GetResource
(
)
)
)
;
return
new
MediaDecoderStateMachine
(
this
reader
)
;
}
bool
ADTSDecoder
:
:
IsEnabled
(
)
{
RefPtr
<
PDMFactory
>
platform
=
new
PDMFactory
(
)
;
return
platform
-
>
SupportsMimeType
(
NS_LITERAL_CSTRING
(
"
audio
/
mp4a
-
latm
"
)
nullptr
)
;
}
bool
ADTSDecoder
:
:
IsSupportedType
(
const
MediaContentType
&
aContentType
)
{
if
(
aContentType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
audio
/
aac
"
)
|
|
aContentType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
audio
/
aacp
"
)
|
|
aContentType
.
Type
(
)
=
=
MEDIAMIMETYPE
(
"
audio
/
x
-
aac
"
)
)
{
return
IsEnabled
(
)
&
&
(
aContentType
.
ExtendedType
(
)
.
Codecs
(
)
.
IsEmpty
(
)
|
|
aContentType
.
ExtendedType
(
)
.
Codecs
(
)
.
AsString
(
)
.
EqualsASCII
(
"
aac
"
)
)
;
}
return
false
;
}
}
