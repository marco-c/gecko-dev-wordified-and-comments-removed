#
include
<
jni
.
h
>
#
ifdef
MOZ_AV1
#
include
"
AOMDecoder
.
h
"
#
endif
#
include
"
MediaInfo
.
h
"
#
include
"
RemoteDataDecoder
.
h
"
#
include
"
TheoraDecoder
.
h
"
#
include
"
VPXDecoder
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Components
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
java
/
HardwareCodecCapabilityUtilsWrappers
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsPromiseFlatString
.
h
"
#
include
"
prlog
.
h
"
#
undef
LOG
#
define
LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
\
sAndroidDecoderModuleLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
AndroidDecoderModule
(
%
p
)
:
:
%
s
:
"
arg
this
__func__
#
#
__VA_ARGS__
)
)
#
define
SLOG
(
arg
.
.
.
)
\
MOZ_LOG
(
sAndroidDecoderModuleLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
%
s
:
"
arg
__func__
#
#
__VA_ARGS__
)
)
using
namespace
mozilla
;
using
media
:
:
DecodeSupport
;
using
media
:
:
DecodeSupportSet
;
using
media
:
:
MCSInfo
;
using
media
:
:
MediaCodec
;
using
media
:
:
MediaCodecsSupport
;
using
media
:
:
MediaCodecsSupported
;
using
media
:
:
TimeUnit
;
namespace
mozilla
{
mozilla
:
:
LazyLogModule
sAndroidDecoderModuleLog
(
"
AndroidDecoderModule
"
)
;
nsCString
TranslateMimeType
(
const
nsACString
&
aMimeType
)
{
if
(
VPXDecoder
:
:
IsVPX
(
aMimeType
VPXDecoder
:
:
VP8
)
)
{
static
constexpr
auto
vp8
=
"
video
/
x
-
vnd
.
on2
.
vp8
"
_ns
;
return
vp8
;
}
if
(
VPXDecoder
:
:
IsVPX
(
aMimeType
VPXDecoder
:
:
VP9
)
)
{
static
constexpr
auto
vp9
=
"
video
/
x
-
vnd
.
on2
.
vp9
"
_ns
;
return
vp9
;
}
if
(
aMimeType
.
EqualsLiteral
(
"
video
/
av1
"
)
)
{
static
constexpr
auto
av1
=
"
video
/
av01
"
_ns
;
return
av1
;
}
return
nsCString
(
aMimeType
)
;
}
AndroidDecoderModule
:
:
AndroidDecoderModule
(
CDMProxy
*
aProxy
)
{
mProxy
=
static_cast
<
MediaDrmCDMProxy
*
>
(
aProxy
)
;
}
StaticAutoPtr
<
nsTArray
<
nsCString
>
>
AndroidDecoderModule
:
:
sSupportedSwMimeTypes
;
StaticAutoPtr
<
nsTArray
<
nsCString
>
>
AndroidDecoderModule
:
:
sSupportedHwMimeTypes
;
StaticAutoPtr
<
MediaCodecsSupported
>
AndroidDecoderModule
:
:
sSupportedCodecs
;
media
:
:
MediaCodecsSupported
AndroidDecoderModule
:
:
GetSupportedCodecs
(
)
{
if
(
!
sSupportedSwMimeTypes
|
|
!
sSupportedHwMimeTypes
|
|
!
sSupportedCodecs
)
{
SetSupportedMimeTypes
(
)
;
}
return
*
sSupportedCodecs
;
}
DecodeSupportSet
AndroidDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
)
{
if
(
!
sSupportedSwMimeTypes
)
{
SetSupportedMimeTypes
(
)
;
}
MediaCodec
codec
=
MCSInfo
:
:
GetMediaCodecFromMimeType
(
aMimeType
)
;
switch
(
codec
)
{
case
MediaCodec
:
:
VP8
:
if
(
!
gfx
:
:
gfxVars
:
:
UseVP8HwDecode
(
)
)
{
return
media
:
:
DecodeSupportSet
{
}
;
}
break
;
case
MediaCodec
:
:
VP9
:
if
(
!
gfx
:
:
gfxVars
:
:
UseVP9HwDecode
(
)
)
{
return
media
:
:
DecodeSupportSet
{
}
;
}
break
;
case
MediaCodec
:
:
Theora
:
SLOG
(
"
Rejecting
video
of
type
%
s
"
aMimeType
.
Data
(
)
)
;
return
media
:
:
DecodeSupportSet
{
}
;
case
MediaCodec
:
:
MP3
:
[
[
fallthrough
]
]
;
case
MediaCodec
:
:
Opus
:
[
[
fallthrough
]
]
;
case
MediaCodec
:
:
Vorbis
:
[
[
fallthrough
]
]
;
case
MediaCodec
:
:
Wave
:
[
[
fallthrough
]
]
;
case
MediaCodec
:
:
FLAC
:
SLOG
(
"
Rejecting
audio
of
type
%
s
"
aMimeType
.
Data
(
)
)
;
return
media
:
:
DecodeSupportSet
{
}
;
case
MediaCodec
:
:
H264
:
return
DecodeSupport
:
:
SoftwareDecode
;
case
MediaCodec
:
:
AV1
:
break
;
case
MediaCodec
:
:
SENTINEL
:
[
[
fallthrough
]
]
;
default
:
SLOG
(
"
Support
check
using
default
logic
for
%
s
"
aMimeType
.
Data
(
)
)
;
break
;
}
if
(
sSupportedHwMimeTypes
&
&
sSupportedHwMimeTypes
-
>
Contains
(
TranslateMimeType
(
aMimeType
)
)
)
{
return
DecodeSupport
:
:
HardwareDecode
;
}
if
(
sSupportedSwMimeTypes
&
&
sSupportedSwMimeTypes
-
>
Contains
(
TranslateMimeType
(
aMimeType
)
)
)
{
return
DecodeSupport
:
:
SoftwareDecode
;
}
return
media
:
:
DecodeSupportSet
{
}
;
}
nsTArray
<
nsCString
>
AndroidDecoderModule
:
:
GetSupportedMimeTypes
(
)
{
mozilla
:
:
jni
:
:
ObjectArray
:
:
LocalRef
supportedTypes
=
mozilla
:
:
java
:
:
HardwareCodecCapabilityUtils
:
:
GetDecoderSupportedMimeTypes
(
)
;
nsTArray
<
nsCString
>
st
=
nsTArray
<
nsCString
>
(
)
;
for
(
size_t
i
=
0
;
i
<
supportedTypes
-
>
Length
(
)
;
i
+
+
)
{
st
.
AppendElement
(
jni
:
:
String
:
:
LocalRef
(
supportedTypes
-
>
GetElement
(
i
)
)
-
>
ToCString
(
)
)
;
}
return
st
;
}
nsTArray
<
nsCString
>
AndroidDecoderModule
:
:
GetSupportedMimeTypesPrefixed
(
)
{
mozilla
:
:
jni
:
:
ObjectArray
:
:
LocalRef
supportedTypes
=
mozilla
:
:
java
:
:
HardwareCodecCapabilityUtils
:
:
GetDecoderSupportedMimeTypesWithAccelInfo
(
)
;
nsTArray
<
nsCString
>
st
=
nsTArray
<
nsCString
>
(
)
;
for
(
size_t
i
=
0
;
i
<
supportedTypes
-
>
Length
(
)
;
i
+
+
)
{
st
.
AppendElement
(
jni
:
:
String
:
:
LocalRef
(
supportedTypes
-
>
GetElement
(
i
)
)
-
>
ToCString
(
)
)
;
}
return
st
;
}
void
AndroidDecoderModule
:
:
SetSupportedMimeTypes
(
)
{
SetSupportedMimeTypes
(
GetSupportedMimeTypesPrefixed
(
)
)
;
}
void
AndroidDecoderModule
:
:
SetSupportedMimeTypes
(
nsTArray
<
nsCString
>
&
&
aSupportedTypes
)
{
if
(
sSupportedSwMimeTypes
&
&
sSupportedHwMimeTypes
&
&
sSupportedCodecs
)
{
return
;
}
if
(
!
sSupportedSwMimeTypes
)
{
sSupportedSwMimeTypes
=
new
nsTArray
<
nsCString
>
;
ClearOnShutdown
(
&
sSupportedSwMimeTypes
)
;
}
if
(
!
sSupportedHwMimeTypes
)
{
sSupportedHwMimeTypes
=
new
nsTArray
<
nsCString
>
;
ClearOnShutdown
(
&
sSupportedHwMimeTypes
)
;
}
if
(
!
sSupportedCodecs
)
{
sSupportedCodecs
=
new
MediaCodecsSupported
(
)
;
ClearOnShutdown
(
&
sSupportedCodecs
)
;
}
DecodeSupportSet
support
;
for
(
const
auto
&
s
:
aSupportedTypes
)
{
if
(
s
.
Length
(
)
<
4
)
{
SLOG
(
"
No
SW
/
HW
support
prefix
found
in
codec
string
%
s
"
s
.
Data
(
)
)
;
continue
;
}
const
auto
mimeType
=
Substring
(
s
3
)
;
if
(
mimeType
.
Length
(
)
=
=
0
)
{
SLOG
(
"
No
MIME
type
information
found
in
codec
string
%
s
"
s
.
Data
(
)
)
;
continue
;
}
const
auto
caps
=
Substring
(
s
0
2
)
;
if
(
caps
=
=
"
SW
"
_ns
)
{
sSupportedSwMimeTypes
-
>
AppendElement
(
mimeType
)
;
support
+
=
DecodeSupport
:
:
SoftwareDecode
;
}
else
if
(
caps
=
=
"
HW
"
_ns
)
{
sSupportedHwMimeTypes
-
>
AppendElement
(
mimeType
)
;
support
+
=
DecodeSupport
:
:
HardwareDecode
;
}
else
{
SLOG
(
"
Error
parsing
acceleration
info
from
JNI
codec
string
%
s
"
s
.
Data
(
)
)
;
continue
;
}
const
MediaCodec
codec
=
MCSInfo
:
:
GetMediaCodecFromMimeType
(
mimeType
)
;
if
(
codec
=
=
MediaCodec
:
:
SENTINEL
)
{
SLOG
(
"
Did
not
parse
string
%
s
to
specific
codec
"
s
.
Data
(
)
)
;
continue
;
}
*
sSupportedCodecs
+
=
MCSInfo
:
:
GetMediaCodecsSupportEnum
(
codec
support
)
;
}
}
DecodeSupportSet
AndroidDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
AndroidDecoderModule
:
:
SupportsMimeType
(
aMimeType
)
;
}
bool
AndroidDecoderModule
:
:
SupportsColorDepth
(
gfx
:
:
ColorDepth
aColorDepth
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
aColorDepth
=
=
gfx
:
:
ColorDepth
:
:
COLOR_8
|
|
aColorDepth
=
=
gfx
:
:
ColorDepth
:
:
COLOR_10
;
}
media
:
:
DecodeSupportSet
AndroidDecoderModule
:
:
Supports
(
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
media
:
:
DecodeSupportSet
support
=
PlatformDecoderModule
:
:
Supports
(
aParams
aDiagnostics
)
;
if
(
support
.
isEmpty
(
)
)
{
return
support
;
}
#
ifdef
MOZ_AV1
if
(
AOMDecoder
:
:
IsAV1
(
aParams
.
MimeType
(
)
)
&
&
(
!
StaticPrefs
:
:
media_av1_enabled
(
)
|
|
!
support
.
contains
(
media
:
:
DecodeSupport
:
:
HardwareDecode
)
)
)
{
return
media
:
:
DecodeSupportSet
{
}
;
}
#
endif
const
TrackInfo
&
trackInfo
=
aParams
.
mConfig
;
const
VideoInfo
*
videoInfo
=
trackInfo
.
GetAsVideoInfo
(
)
;
if
(
!
videoInfo
|
|
videoInfo
-
>
mColorDepth
!
=
gfx
:
:
ColorDepth
:
:
COLOR_10
)
{
return
support
;
}
return
java
:
:
HardwareCodecCapabilityUtils
:
:
Decodes10Bit
(
TranslateMimeType
(
aParams
.
MimeType
(
)
)
)
?
support
:
media
:
:
DecodeSupportSet
{
}
;
}
already_AddRefed
<
MediaDataDecoder
>
AndroidDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
if
(
aParams
.
VideoConfig
(
)
.
HasAlpha
(
)
)
{
return
nullptr
;
}
nsString
drmStubId
;
if
(
mProxy
)
{
drmStubId
=
mProxy
-
>
GetMediaDrmStubId
(
)
;
}
RefPtr
<
MediaDataDecoder
>
decoder
=
RemoteDataDecoder
:
:
CreateVideoDecoder
(
aParams
drmStubId
mProxy
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
AndroidDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
const
AudioInfo
&
config
=
aParams
.
AudioConfig
(
)
;
if
(
config
.
mBitDepth
!
=
16
)
{
return
nullptr
;
}
LOG
(
"
CreateAudioFormat
with
mimeType
=
%
s
mRate
=
%
d
channels
=
%
d
"
config
.
mMimeType
.
Data
(
)
config
.
mRate
config
.
mChannels
)
;
nsString
drmStubId
;
if
(
mProxy
)
{
drmStubId
=
mProxy
-
>
GetMediaDrmStubId
(
)
;
}
RefPtr
<
MediaDataDecoder
>
decoder
=
RemoteDataDecoder
:
:
CreateAudioDecoder
(
aParams
drmStubId
mProxy
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
PlatformDecoderModule
>
AndroidDecoderModule
:
:
Create
(
CDMProxy
*
aProxy
)
{
return
MakeAndAddRef
<
AndroidDecoderModule
>
(
aProxy
)
;
}
}
