#
ifndef
AndroidDecoderModule_h_
#
define
AndroidDecoderModule_h_
#
include
"
MediaCodecsSupport
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
MediaDrmCDMProxy
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
namespace
mozilla
{
class
AndroidDecoderModule
:
public
PlatformDecoderModule
{
template
<
typename
T
typename
.
.
.
Args
>
friend
already_AddRefed
<
T
>
MakeAndAddRef
(
Args
&
&
.
.
.
)
;
public
:
static
already_AddRefed
<
PlatformDecoderModule
>
Create
(
CDMProxy
*
aProxy
=
nullptr
)
;
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
override
;
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
override
;
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
override
;
static
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
)
;
static
nsTArray
<
nsCString
>
GetSupportedMimeTypes
(
)
;
static
void
SetSupportedMimeTypes
(
nsTArray
<
nsCString
>
&
&
aSupportedTypes
)
;
static
media
:
:
MediaCodecsSupported
GetSupportedCodecs
(
)
;
private
:
explicit
AndroidDecoderModule
(
CDMProxy
*
aProxy
=
nullptr
)
;
virtual
~
AndroidDecoderModule
(
)
=
default
;
RefPtr
<
MediaDrmCDMProxy
>
mProxy
;
static
StaticAutoPtr
<
nsTArray
<
nsCString
>
>
sSupportedSwMimeTypes
;
static
StaticAutoPtr
<
nsTArray
<
nsCString
>
>
sSupportedHwMimeTypes
;
static
StaticAutoPtr
<
media
:
:
MediaCodecsSupported
>
sSupportedCodecs
;
}
;
extern
LazyLogModule
sAndroidDecoderModuleLog
;
nsCString
TranslateMimeType
(
const
nsACString
&
aMimeType
)
;
}
#
endif
