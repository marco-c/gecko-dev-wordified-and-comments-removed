#
include
"
AndroidEncoderModule
.
h
"
#
include
"
AndroidDataEncoder
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
java
/
HardwareCodecCapabilityUtilsWrappers
.
h
"
namespace
mozilla
{
extern
LazyLogModule
sPEMLog
;
#
define
AND_PEM_LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
\
sPEMLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
AndroidEncoderModule
(
%
p
)
:
:
%
s
:
"
arg
this
__func__
#
#
__VA_ARGS__
)
)
bool
AndroidEncoderModule
:
:
SupportsCodec
(
CodecType
aCodec
)
const
{
return
(
aCodec
=
=
CodecType
:
:
H264
&
&
java
:
:
HardwareCodecCapabilityUtils
:
:
HasHWH264
(
true
)
)
|
|
(
aCodec
=
=
CodecType
:
:
VP8
&
&
java
:
:
HardwareCodecCapabilityUtils
:
:
HasHWVP8
(
true
)
)
|
|
(
aCodec
=
=
CodecType
:
:
VP9
&
&
java
:
:
HardwareCodecCapabilityUtils
:
:
HasHWVP9
(
true
)
)
;
}
bool
AndroidEncoderModule
:
:
Supports
(
const
EncoderConfig
&
aConfig
)
const
{
if
(
aConfig
.
mCodec
=
=
CodecType
:
:
H264
&
&
(
aConfig
.
mSize
.
width
=
=
0
|
|
aConfig
.
mSize
.
height
=
=
0
)
)
{
return
false
;
}
return
SupportsCodec
(
aConfig
.
mCodec
)
;
}
already_AddRefed
<
MediaDataEncoder
>
AndroidEncoderModule
:
:
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
if
(
!
Supports
(
aConfig
)
)
{
AND_PEM_LOG
(
"
Unsupported
codec
type
:
%
s
"
GetCodecTypeString
(
aConfig
.
mCodec
)
)
;
return
nullptr
;
}
return
MakeRefPtr
<
AndroidDataEncoder
>
(
aConfig
aTaskQueue
)
.
forget
(
)
;
}
}
#
undef
AND_PEM_LOG
