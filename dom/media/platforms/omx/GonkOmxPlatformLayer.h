#
if
!
defined
(
GonkOmxPlatformLayer_h_
)
#
define
GonkOmxPlatformLayer_h_
#
pragma
GCC
visibility
push
(
default
)
#
include
"
OmxPlatformLayer
.
h
"
#
include
"
OMX_Component
.
h
"
#
include
<
utils
/
RefBase
.
h
>
#
include
<
media
/
stagefright
/
OMXClient
.
h
>
namespace
android
{
class
MemoryDealer
;
class
IMemory
;
}
namespace
mozilla
{
class
GonkOmxObserver
;
class
GonkBufferData
:
public
OmxPromiseLayer
:
:
BufferData
{
protected
:
virtual
~
GonkBufferData
(
)
{
}
public
:
GonkBufferData
(
android
:
:
IOMX
:
:
buffer_id
aId
bool
aLiveInLocal
android
:
:
IMemory
*
aMemory
)
;
BufferID
ID
(
)
override
{
return
mId
;
}
bool
IsLocalBuffer
(
)
{
return
!
!
mLocalBuffer
.
get
(
)
;
}
android
:
:
IOMX
:
:
buffer_id
mId
;
nsAutoPtr
<
OMX_BUFFERHEADERTYPE
>
mLocalBuffer
;
}
;
class
GonkOmxPlatformLayer
:
public
OmxPlatformLayer
{
public
:
GonkOmxPlatformLayer
(
OmxDataDecoder
*
aDataDecoder
OmxPromiseLayer
*
aPromiseLayer
TaskQueue
*
aTaskQueue
)
;
nsresult
AllocateOmxBuffer
(
OMX_DIRTYPE
aType
BUFFERLIST
*
aBufferList
)
override
;
nsresult
ReleaseOmxBuffer
(
OMX_DIRTYPE
aType
BUFFERLIST
*
aBufferList
)
override
;
OMX_ERRORTYPE
GetState
(
OMX_STATETYPE
*
aType
)
override
;
OMX_ERRORTYPE
GetParameter
(
OMX_INDEXTYPE
aParamIndex
OMX_PTR
aComponentParameterStructure
OMX_U32
aComponentParameterSize
)
override
;
OMX_ERRORTYPE
SetParameter
(
OMX_INDEXTYPE
nIndex
OMX_PTR
aComponentParameterStructure
OMX_U32
aComponentParameterSize
)
override
;
OMX_ERRORTYPE
InitOmxToStateLoaded
(
const
TrackInfo
*
aInfo
)
override
;
OMX_ERRORTYPE
EmptyThisBuffer
(
BufferData
*
aData
)
override
;
OMX_ERRORTYPE
FillThisBuffer
(
BufferData
*
aData
)
override
;
OMX_ERRORTYPE
SendCommand
(
OMX_COMMANDTYPE
aCmd
OMX_U32
aParam1
OMX_PTR
aCmdData
)
override
;
nsresult
Shutdown
(
)
override
;
template
<
class
T
>
void
InitOmxParameter
(
T
*
aParam
)
;
protected
:
bool
LoadComponent
(
const
char
*
aName
)
;
friend
class
GonkOmxObserver
;
RefPtr
<
TaskQueue
>
mTaskQueue
;
android
:
:
sp
<
android
:
:
MemoryDealer
>
mMemoryDealer
[
2
]
;
android
:
:
sp
<
GonkOmxObserver
>
mOmxObserver
;
android
:
:
sp
<
android
:
:
IOMX
>
mOmx
;
android
:
:
IOMX
:
:
node_id
mNode
;
android
:
:
OMXClient
mOmxClient
;
uint32_t
mQuirks
;
bool
mUsingHardwareCodec
;
}
;
}
#
pragma
GCC
visibility
pop
#
endif
