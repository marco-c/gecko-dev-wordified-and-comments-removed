#
include
"
OmxCoreLibLinker
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
prlink
.
h
"
#
ifdef
LOG
#
undef
LOG
#
endif
#
define
LOG
(
arg
.
.
.
)
\
MOZ_LOG
(
sPDMLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
OmxCoreLibLinker
:
:
%
s
:
"
arg
__func__
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
OmxCoreLibLinker
:
:
LinkStatus
OmxCoreLibLinker
:
:
sLinkStatus
=
LinkStatus_INIT
;
const
char
*
OmxCoreLibLinker
:
:
sLibNames
[
]
=
{
"
libopenmaxil
.
so
"
"
libomxr_core
.
so
"
"
libomxil
-
bellagio
.
so
.
0
"
}
;
PRLibrary
*
OmxCoreLibLinker
:
:
sLinkedLib
=
nullptr
;
const
char
*
OmxCoreLibLinker
:
:
sLibName
=
nullptr
;
#
define
OMX_FUNC
(
func
)
void
(
*
func
)
(
)
;
#
include
"
OmxFunctionList
.
h
"
#
undef
OMX_FUNC
bool
OmxCoreLibLinker
:
:
TryLinkingLibrary
(
const
char
*
libName
)
{
PRLibSpec
lspec
;
lspec
.
type
=
PR_LibSpec_Pathname
;
lspec
.
value
.
pathname
=
libName
;
sLinkedLib
=
PR_LoadLibraryWithFlags
(
lspec
PR_LD_NOW
|
PR_LD_LOCAL
)
;
if
(
sLinkedLib
)
{
if
(
Bind
(
libName
)
)
{
sLibName
=
libName
;
LOG
(
"
Succeeded
to
load
%
s
"
libName
)
;
return
true
;
}
else
{
LOG
(
"
Failed
to
link
%
s
"
libName
)
;
}
Unlink
(
)
;
}
return
false
;
}
bool
OmxCoreLibLinker
:
:
Link
(
)
{
LOG
(
"
"
)
;
if
(
sLinkStatus
)
{
return
sLinkStatus
=
=
LinkStatus_SUCCEEDED
;
}
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsAutoCString
libPath
;
nsresult
rv
=
Preferences
:
:
GetCString
(
"
media
.
omx
.
core
-
lib
-
path
"
libPath
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
libPath
.
IsEmpty
(
)
)
{
if
(
TryLinkingLibrary
(
libPath
.
Data
(
)
)
)
{
sLinkStatus
=
LinkStatus_SUCCEEDED
;
return
true
;
}
}
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
sLibNames
)
;
i
+
+
)
{
if
(
TryLinkingLibrary
(
sLibNames
[
i
]
)
)
{
sLinkStatus
=
LinkStatus_SUCCEEDED
;
return
true
;
}
}
sLinkStatus
=
LinkStatus_FAILED
;
return
false
;
}
bool
OmxCoreLibLinker
:
:
Bind
(
const
char
*
aLibName
)
{
#
define
OMX_FUNC
(
func
)
\
{
\
if
(
!
(
func
=
(
typeof
(
func
)
)
PR_FindSymbol
(
sLinkedLib
#
func
)
)
)
{
\
LOG
(
"
Couldn
'
t
load
function
"
#
func
"
from
%
s
.
"
aLibName
)
;
\
return
false
;
\
}
\
}
#
include
"
OmxFunctionList
.
h
"
#
undef
OMX_FUNC
return
true
;
}
void
OmxCoreLibLinker
:
:
Unlink
(
)
{
LOG
(
"
"
)
;
if
(
sLinkedLib
)
{
PR_UnloadLibrary
(
sLinkedLib
)
;
sLinkedLib
=
nullptr
;
sLibName
=
nullptr
;
sLinkStatus
=
LinkStatus_INIT
;
}
}
}
