#
include
"
GonkMediaDataDecoder
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MediaCodecProxy
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
<
android
/
log
.
h
>
#
define
GMDD_LOG
(
.
.
.
)
__android_log_print
(
ANDROID_LOG_DEBUG
"
GonkMediaDataDecoder
"
__VA_ARGS__
)
extern
PRLogModuleInfo
*
GetPDMLog
(
)
;
#
define
LOG
(
.
.
.
)
MOZ_LOG
(
GetPDMLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
using
namespace
android
;
namespace
mozilla
{
nsresult
GonkDecoderManager
:
:
Shutdown
(
)
{
if
(
mDecoder
.
get
(
)
)
{
mDecoder
-
>
stop
(
)
;
mDecoder
-
>
ReleaseMediaResources
(
)
;
mDecoder
=
nullptr
;
}
mInitPromise
.
RejectIfExists
(
DecoderFailureReason
:
:
CANCELED
__func__
)
;
return
NS_OK
;
}
GonkMediaDataDecoder
:
:
GonkMediaDataDecoder
(
GonkDecoderManager
*
aManager
FlushableTaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
)
:
mTaskQueue
(
aTaskQueue
)
mCallback
(
aCallback
)
mManager
(
aManager
)
mSignaledEOS
(
false
)
mDrainComplete
(
false
)
{
MOZ_COUNT_CTOR
(
GonkMediaDataDecoder
)
;
}
GonkMediaDataDecoder
:
:
~
GonkMediaDataDecoder
(
)
{
MOZ_COUNT_DTOR
(
GonkMediaDataDecoder
)
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
GonkMediaDataDecoder
:
:
Init
(
)
{
mDrainComplete
=
false
;
return
mManager
-
>
Init
(
mCallback
)
;
}
nsresult
GonkMediaDataDecoder
:
:
Shutdown
(
)
{
nsresult
rv
=
mManager
-
>
Shutdown
(
)
;
mManager
=
nullptr
;
return
rv
;
}
nsresult
GonkMediaDataDecoder
:
:
Input
(
MediaRawData
*
aSample
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
NS_NewRunnableMethodWithArg
<
RefPtr
<
MediaRawData
>
>
(
this
&
GonkMediaDataDecoder
:
:
ProcessDecode
RefPtr
<
MediaRawData
>
(
aSample
)
)
)
;
mTaskQueue
-
>
Dispatch
(
runnable
.
forget
(
)
)
;
return
NS_OK
;
}
void
GonkMediaDataDecoder
:
:
ProcessDecode
(
MediaRawData
*
aSample
)
{
nsresult
rv
=
mManager
-
>
Input
(
aSample
)
;
if
(
rv
!
=
NS_OK
)
{
NS_WARNING
(
"
GonkMediaDataDecoder
failed
to
input
data
"
)
;
GMDD_LOG
(
"
Failed
to
input
data
err
:
%
d
"
int
(
rv
)
)
;
mCallback
-
>
Error
(
)
;
return
;
}
if
(
aSample
)
{
mLastStreamOffset
=
aSample
-
>
mOffset
;
}
ProcessOutput
(
)
;
}
void
GonkMediaDataDecoder
:
:
ProcessOutput
(
)
{
RefPtr
<
MediaData
>
output
;
nsresult
rv
=
NS_ERROR_ABORT
;
while
(
!
mDrainComplete
)
{
if
(
mSignaledEOS
&
&
mManager
-
>
HasQueuedSample
(
)
)
{
GMDD_LOG
(
"
ProcessOutput
:
drain
all
input
samples
"
)
;
rv
=
mManager
-
>
Input
(
nullptr
)
;
}
rv
=
mManager
-
>
Output
(
mLastStreamOffset
output
)
;
if
(
rv
=
=
NS_OK
)
{
mCallback
-
>
Output
(
output
)
;
continue
;
}
else
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
&
&
mSignaledEOS
)
{
continue
;
}
else
{
break
;
}
}
if
(
rv
=
=
NS_ERROR_NOT_AVAILABLE
&
&
!
mSignaledEOS
)
{
mCallback
-
>
InputExhausted
(
)
;
return
;
}
if
(
rv
!
=
NS_OK
)
{
NS_WARNING
(
"
GonkMediaDataDecoder
failed
to
output
data
"
)
;
GMDD_LOG
(
"
Failed
to
output
data
"
)
;
if
(
rv
=
=
NS_ERROR_ABORT
)
{
if
(
output
)
{
mCallback
-
>
Output
(
output
)
;
}
mCallback
-
>
DrainComplete
(
)
;
MOZ_ASSERT_IF
(
mSignaledEOS
!
mManager
-
>
HasQueuedSample
(
)
)
;
mSignaledEOS
=
false
;
mDrainComplete
=
true
;
return
;
}
GMDD_LOG
(
"
Callback
error
!
"
)
;
mCallback
-
>
Error
(
)
;
}
}
nsresult
GonkMediaDataDecoder
:
:
Flush
(
)
{
mTaskQueue
-
>
Flush
(
)
;
mDrainComplete
=
false
;
return
mManager
-
>
Flush
(
)
;
}
void
GonkMediaDataDecoder
:
:
ProcessDrain
(
)
{
ProcessDecode
(
nullptr
)
;
mSignaledEOS
=
true
;
ProcessOutput
(
)
;
}
nsresult
GonkMediaDataDecoder
:
:
Drain
(
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableMethod
(
this
&
GonkMediaDataDecoder
:
:
ProcessDrain
)
;
mTaskQueue
-
>
Dispatch
(
runnable
.
forget
(
)
)
;
return
NS_OK
;
}
}
