#
if
!
defined
(
GonkMediaDataDecoder_h_
)
#
define
GonkMediaDataDecoder_h_
#
include
"
PlatformDecoderModule
.
h
"
namespace
android
{
class
MediaCodecProxy
;
}
namespace
mozilla
{
class
MediaRawData
;
class
GonkDecoderManager
{
public
:
typedef
TrackInfo
:
:
TrackType
TrackType
;
typedef
MediaDataDecoder
:
:
InitPromise
InitPromise
;
typedef
MediaDataDecoder
:
:
DecoderFailureReason
DecoderFailureReason
;
virtual
~
GonkDecoderManager
(
)
{
}
virtual
nsRefPtr
<
InitPromise
>
Init
(
MediaDataDecoderCallback
*
aCallback
)
=
0
;
virtual
nsresult
Input
(
MediaRawData
*
aSample
)
=
0
;
virtual
nsresult
Output
(
int64_t
aStreamOffset
nsRefPtr
<
MediaData
>
&
aOutput
)
=
0
;
virtual
nsresult
Flush
(
)
=
0
;
nsresult
Shutdown
(
)
;
virtual
bool
HasQueuedSample
(
)
=
0
;
protected
:
nsRefPtr
<
MediaByteBuffer
>
mCodecSpecificData
;
nsAutoCString
mMimeType
;
android
:
:
sp
<
android
:
:
MediaCodecProxy
>
mDecoder
;
MozPromiseHolder
<
InitPromise
>
mInitPromise
;
}
;
class
GonkMediaDataDecoder
:
public
MediaDataDecoder
{
public
:
GonkMediaDataDecoder
(
GonkDecoderManager
*
aDecoderManager
FlushableTaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
)
;
~
GonkMediaDataDecoder
(
)
;
nsRefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
private
:
void
ProcessDecode
(
MediaRawData
*
aSample
)
;
void
ProcessOutput
(
)
;
void
ProcessDrain
(
)
;
RefPtr
<
FlushableTaskQueue
>
mTaskQueue
;
MediaDataDecoderCallback
*
mCallback
;
nsAutoPtr
<
GonkDecoderManager
>
mManager
;
int64_t
mLastStreamOffset
;
bool
mSignaledEOS
;
bool
mDrainComplete
;
}
;
}
#
endif
