#
if
!
defined
(
GonkAudioDecoderManager_h_
)
#
define
GonkAudioDecoderManager_h_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
GonkMediaDataDecoder
.
h
"
using
namespace
android
;
namespace
android
{
struct
MOZ_EXPORT
ALooper
;
class
MOZ_EXPORT
MediaBuffer
;
}
namespace
mozilla
{
class
GonkAudioDecoderManager
:
public
GonkDecoderManager
{
typedef
android
:
:
MediaCodecProxy
MediaCodecProxy
;
public
:
GonkAudioDecoderManager
(
const
AudioInfo
&
aConfig
)
;
virtual
~
GonkAudioDecoderManager
(
)
override
;
RefPtr
<
InitPromise
>
Init
(
MediaDataDecoderCallback
*
aCallback
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Output
(
int64_t
aStreamOffset
RefPtr
<
MediaData
>
&
aOutput
)
override
;
nsresult
Flush
(
)
override
;
bool
HasQueuedSample
(
)
override
;
private
:
bool
InitMediaCodecProxy
(
MediaDataDecoderCallback
*
aCallback
)
;
nsresult
CreateAudioData
(
int64_t
aStreamOffset
AudioData
*
*
aOutData
)
;
void
ReleaseAudioBuffer
(
)
;
int64_t
mLastDecodedTime
;
uint32_t
mAudioChannels
;
uint32_t
mAudioRate
;
const
uint32_t
mAudioProfile
;
MediaDataDecoderCallback
*
mReaderCallback
;
android
:
:
MediaBuffer
*
mAudioBuffer
;
android
:
:
sp
<
ALooper
>
mLooper
;
Monitor
mMonitor
;
nsTArray
<
RefPtr
<
MediaRawData
>
>
mQueueSample
;
}
;
}
#
endif
