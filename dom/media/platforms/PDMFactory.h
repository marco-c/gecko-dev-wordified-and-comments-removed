#
if
!
defined
(
PDMFactory_h_
)
#
define
PDMFactory_h_
#
include
"
DecoderDoctorDiagnostics
.
h
"
#
include
"
MediaCodecsSupport
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
utility
>
namespace
mozilla
{
class
CDMProxy
;
class
MediaDataDecoder
;
class
MediaResult
;
class
StaticMutex
;
struct
CreateDecoderParams
;
struct
CreateDecoderParamsForAsync
;
struct
SupportDecoderParams
;
enum
class
RemoteDecodeIn
;
using
PDMCreateDecoderPromise
=
PlatformDecoderModule
:
:
CreateDecoderPromise
;
class
PDMFactory
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PDMFactory
)
PDMFactory
(
)
;
RefPtr
<
PDMCreateDecoderPromise
>
CreateDecoder
(
const
CreateDecoderParams
&
aParams
)
;
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
)
const
;
media
:
:
DecodeSupportSet
Supports
(
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
;
void
SetCDMProxy
(
CDMProxy
*
aProxy
)
;
static
constexpr
int
kYUV400
=
0
;
static
constexpr
int
kYUV420
=
1
;
static
constexpr
int
kYUV422
=
2
;
static
constexpr
int
kYUV444
=
3
;
static
media
:
:
MediaCodecsSupported
Supported
(
bool
aForceRefresh
=
false
)
;
static
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
const
media
:
:
MediaCodecsSupported
&
aSupported
RemoteDecodeIn
aLocation
)
;
static
bool
AllDecodersAreRemote
(
)
;
private
:
virtual
~
PDMFactory
(
)
;
void
CreatePDMs
(
)
;
void
CreateNullPDM
(
)
;
void
CreateGpuPDMs
(
)
;
void
CreateRddPDMs
(
)
;
void
CreateUtilityPDMs
(
)
;
void
CreateContentPDMs
(
)
;
void
CreateDefaultPDMs
(
)
;
template
<
typename
DECODER_MODULE
typename
.
.
.
ARGS
>
bool
CreateAndStartupPDM
(
ARGS
&
&
.
.
.
aArgs
)
{
return
StartupPDM
(
DECODER_MODULE
:
:
Create
(
std
:
:
forward
<
ARGS
>
(
aArgs
)
.
.
.
)
)
;
}
bool
StartupPDM
(
already_AddRefed
<
PlatformDecoderModule
>
aPDM
bool
aInsertAtBeginning
=
false
)
;
already_AddRefed
<
PlatformDecoderModule
>
GetDecoderModule
(
const
SupportDecoderParams
&
aParams
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
;
RefPtr
<
PDMCreateDecoderPromise
>
CreateDecoderWithPDM
(
PlatformDecoderModule
*
aPDM
const
CreateDecoderParams
&
aParams
)
;
RefPtr
<
PDMCreateDecoderPromise
>
CheckAndMaybeCreateDecoder
(
CreateDecoderParamsForAsync
&
&
aParams
uint32_t
aIndex
Maybe
<
MediaResult
>
aEarlierError
=
Nothing
(
)
)
;
nsTArray
<
RefPtr
<
PlatformDecoderModule
>
>
mCurrentPDMs
;
RefPtr
<
PlatformDecoderModule
>
mEMEPDM
;
RefPtr
<
PlatformDecoderModule
>
mNullPDM
;
DecoderDoctorDiagnostics
:
:
FlagsSet
mFailureFlags
;
friend
class
RemoteVideoDecoderParent
;
static
void
EnsureInit
(
)
;
}
;
}
#
endif
