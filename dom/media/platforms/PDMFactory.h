#
if
!
defined
(
PDMFactory_h_
)
#
define
PDMFactory_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
class
CDMProxy
;
namespace
mozilla
{
class
DecoderDoctorDiagnostics
;
class
PDMFactoryImpl
;
template
<
class
T
>
class
StaticAutoPtr
;
class
PDMFactory
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PDMFactory
)
PDMFactory
(
)
;
already_AddRefed
<
MediaDataDecoder
>
CreateDecoder
(
const
TrackInfo
&
aConfig
TaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
DecoderDoctorDiagnostics
*
aDiagnostics
layers
:
:
LayersBackend
aLayersBackend
=
layers
:
:
LayersBackend
:
:
LAYERS_NONE
layers
:
:
ImageContainer
*
aImageContainer
=
nullptr
)
const
;
bool
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
;
#
ifdef
MOZ_EME
void
SetCDMProxy
(
CDMProxy
*
aProxy
)
;
#
endif
private
:
virtual
~
PDMFactory
(
)
;
void
CreatePDMs
(
)
;
bool
StartupPDM
(
PlatformDecoderModule
*
aPDM
)
;
already_AddRefed
<
PlatformDecoderModule
>
GetDecoder
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
;
already_AddRefed
<
MediaDataDecoder
>
CreateDecoderWithPDM
(
PlatformDecoderModule
*
aPDM
const
TrackInfo
&
aConfig
TaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
DecoderDoctorDiagnostics
*
aDiagnostics
layers
:
:
LayersBackend
aLayersBackend
layers
:
:
ImageContainer
*
aImageContainer
)
const
;
nsTArray
<
RefPtr
<
PlatformDecoderModule
>
>
mCurrentPDMs
;
RefPtr
<
PlatformDecoderModule
>
mEMEPDM
;
bool
mWMFFailedToLoad
=
false
;
bool
mFFmpegFailedToLoad
=
false
;
bool
mGMPPDMFailedToStartup
=
false
;
void
EnsureInit
(
)
const
;
template
<
class
T
>
friend
class
StaticAutoPtr
;
static
StaticAutoPtr
<
PDMFactoryImpl
>
sInstance
;
static
StaticMutex
sMonitor
;
}
;
}
#
endif
