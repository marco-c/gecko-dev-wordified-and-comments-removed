#
ifndef
mozilla_SimpleMap_h
#
define
mozilla_SimpleMap_h
#
include
"
mozilla
/
Pair
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
template
<
typename
T
>
class
SimpleMap
{
public
:
typedef
Pair
<
int64_t
T
>
Element
;
SimpleMap
(
)
:
mMutex
(
"
SimpleMap
"
)
{
}
void
Insert
(
int64_t
aKey
const
T
&
aValue
)
{
MutexAutoLock
lock
(
mMutex
)
;
mMap
.
AppendElement
(
MakePair
(
aKey
aValue
)
)
;
}
bool
Find
(
int64_t
aKey
T
&
aValue
)
{
MutexAutoLock
lock
(
mMutex
)
;
for
(
uint32_t
i
=
0
;
i
<
mMap
.
Length
(
)
;
i
+
+
)
{
Element
&
element
=
mMap
[
i
]
;
if
(
element
.
first
(
)
=
=
aKey
)
{
aValue
=
element
.
second
(
)
;
mMap
.
RemoveElementAt
(
i
)
;
return
true
;
}
}
return
false
;
}
void
Clear
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mMap
.
Clear
(
)
;
}
private
:
Mutex
mMutex
;
AutoTArray
<
Element
16
>
mMap
;
}
;
}
#
endif
