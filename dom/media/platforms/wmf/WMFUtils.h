#
ifndef
WMFUtils_h
#
define
WMFUtils_h
#
include
<
hstring
.
h
>
#
include
<
winstring
.
h
>
#
include
"
ImageTypes
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
WMF
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
static
const
GUID
CLSID_MSOpusDecoder
=
{
0x63e17c10
0x2d43
0x4c42
{
0x8f
0xe3
0x8d
0x8b
0x63
0xe4
0x6a
0x6a
}
}
;
enum
class
WMFStreamType
{
Unknown
H264
VP8
VP9
AV1
HEVC
MP3
AAC
OPUS
VORBIS
SENTINEL
}
;
bool
StreamTypeIsVideo
(
const
WMFStreamType
&
aType
)
;
bool
StreamTypeIsAudio
(
const
WMFStreamType
&
aType
)
;
const
char
*
StreamTypeToString
(
WMFStreamType
aStreamType
)
;
WMFStreamType
GetStreamTypeFromMimeType
(
const
nsCString
&
aMimeType
)
;
inline
int64_t
UsecsToHNs
(
int64_t
aUsecs
)
{
return
aUsecs
*
10
;
}
inline
int64_t
HNsToUsecs
(
int64_t
hNanoSecs
)
{
return
hNanoSecs
/
10
;
}
HRESULT
HNsToFrames
(
int64_t
aHNs
uint32_t
aRate
int64_t
*
aOutFrames
)
;
HRESULT
GetDefaultStride
(
IMFMediaType
*
aType
uint32_t
aWidth
uint32_t
*
aOutStride
)
;
Maybe
<
gfx
:
:
YUVColorSpace
>
GetYUVColorSpace
(
IMFMediaType
*
aType
)
;
int32_t
MFOffsetToInt32
(
const
MFOffset
&
aOffset
)
;
HRESULT
GetPictureRegion
(
IMFMediaType
*
aMediaType
gfx
:
:
IntRect
&
aOutPictureRegion
)
;
media
:
:
TimeUnit
GetSampleDuration
(
IMFSample
*
aSample
)
;
media
:
:
TimeUnit
GetSampleTime
(
IMFSample
*
aSample
)
;
inline
bool
IsFlagSet
(
DWORD
flags
DWORD
pattern
)
{
return
(
flags
&
pattern
)
=
=
pattern
;
}
nsString
GetProgramW6432Path
(
)
;
const
char
*
MFTMessageTypeToStr
(
MFT_MESSAGE_TYPE
aMsg
)
;
GUID
AudioMimeTypeToMediaFoundationSubtype
(
const
nsACString
&
aMimeType
)
;
GUID
VideoMimeTypeToMediaFoundationSubtype
(
const
nsACString
&
aMimeType
)
;
void
AACAudioSpecificConfigToUserData
(
uint8_t
aAACProfileLevelIndication
const
uint8_t
*
aAudioSpecConfig
uint32_t
aConfigLength
nsTArray
<
BYTE
>
&
aOutUserData
)
;
class
ScopedHString
final
{
public
:
explicit
ScopedHString
(
const
nsAString
&
aStr
)
{
WindowsCreateString
(
PromiseFlatString
(
aStr
)
.
get
(
)
aStr
.
Length
(
)
&
mString
)
;
}
explicit
ScopedHString
(
const
WCHAR
aCharArray
[
]
)
{
WindowsCreateString
(
aCharArray
wcslen
(
aCharArray
)
&
mString
)
;
}
~
ScopedHString
(
)
{
WindowsDeleteString
(
mString
)
;
}
const
HSTRING
&
Get
(
)
{
return
mString
;
}
private
:
HSTRING
mString
;
}
;
}
#
endif
