#
ifndef
DOM_MEDIA_PLATFORM_WMF_MFCDMEXTRA_H
#
define
DOM_MEDIA_PLATFORM_WMF_MFCDMEXTRA_H
#
if
defined
(
WINVER
)
&
&
WINVER
>
=
0x0A00
#
include
<
mfcontentdecryptionmodule
.
h
>
#
else
#
include
"
MFMediaEngineExtra
.
h
"
typedef
enum
MF_MEDIAKEYSESSION_TYPE
{
MF_MEDIAKEYSESSION_TYPE_TEMPORARY
=
0
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE
=
(
MF_MEDIAKEYSESSION_TYPE_TEMPORARY
+
1
)
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE
=
(
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE
+
1
)
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD
=
(
MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE
+
1
)
}
MF_MEDIAKEYSESSION_TYPE
;
typedef
enum
MF_MEDIAKEYSESSION_MESSAGETYPE
{
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST
=
0
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL
=
1
MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE
=
2
MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST
=
3
}
MF_MEDIAKEYSESSION_MESSAGETYPE
;
typedef
enum
MF_MEDIAKEY_STATUS
{
MF_MEDIAKEY_STATUS_USABLE
=
0
MF_MEDIAKEY_STATUS_EXPIRED
=
(
MF_MEDIAKEY_STATUS_USABLE
+
1
)
MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED
=
(
MF_MEDIAKEY_STATUS_EXPIRED
+
1
)
MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED
=
(
MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED
+
1
)
MF_MEDIAKEY_STATUS_STATUS_PENDING
=
(
MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED
+
1
)
MF_MEDIAKEY_STATUS_INTERNAL_ERROR
=
(
MF_MEDIAKEY_STATUS_STATUS_PENDING
+
1
)
MF_MEDIAKEY_STATUS_RELEASED
=
(
MF_MEDIAKEY_STATUS_INTERNAL_ERROR
+
1
)
MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED
=
(
MF_MEDIAKEY_STATUS_RELEASED
+
1
)
}
MF_MEDIAKEY_STATUS
;
typedef
struct
MFMediaKeyStatus
{
BYTE
*
pbKeyId
;
UINT
cbKeyId
;
MF_MEDIAKEY_STATUS
eMediaKeyStatus
;
}
MFMediaKeyStatus
;
EXTERN_GUID
(
MF_CONTENTDECRYPTIONMODULE_SERVICE
0x15320c45
0xff80
0x484a
0x9d
0xcb
0xd
0xf8
0x94
0xe6
0x9a
0x1
)
;
#
ifndef
__IMFContentDecryptionModuleSessionCallbacks_INTERFACE_DEFINED__
#
define
__IMFContentDecryptionModuleSessionCallbacks_INTERFACE_DEFINED__
EXTERN_C
const
IID
IID_IMFContentDecryptionModuleSessionCallbacks
;
MIDL_INTERFACE
(
"
3f96ee40
-
ad81
-
4096
-
8470
-
59a4b770f89a
"
)
IMFContentDecryptionModuleSessionCallbacks
:
public
IUnknown
{
public
:
virtual
HRESULT
STDMETHODCALLTYPE
KeyMessage
(
MF_MEDIAKEYSESSION_MESSAGETYPE
messageType
__RPC__in_ecount_full
(
messageSize
)
const
BYTE
*
message
DWORD
messageSize
__RPC__in
LPCWSTR
destinationURL
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
KeyStatusChanged
(
void
)
=
0
;
}
;
#
endif
#
ifndef
__IMFContentDecryptionModuleSession_INTERFACE_DEFINED__
#
define
__IMFContentDecryptionModuleSession_INTERFACE_DEFINED__
EXTERN_C
const
IID
IID_IMFContentDecryptionModuleSession
;
MIDL_INTERFACE
(
"
4e233efd
-
1dd2
-
49e8
-
b577
-
d63eee4c0d33
"
)
IMFContentDecryptionModuleSession
:
public
IUnknown
{
public
:
virtual
HRESULT
STDMETHODCALLTYPE
GetSessionId
(
__RPC__deref_out_opt
LPWSTR
*
sessionId
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetExpiration
(
__RPC__out
double
*
expiration
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetKeyStatuses
(
__RPC__deref_out_ecount_full_opt
(
*
numKeyStatuses
)
MFMediaKeyStatus
*
*
keyStatuses
__RPC__out
UINT
*
numKeyStatuses
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
Load
(
__RPC__in
LPCWSTR
sessionId
__RPC__out
BOOL
*
loaded
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GenerateRequest
(
__RPC__in
LPCWSTR
initDataType
__RPC__in_ecount_full
(
initDataSize
)
const
BYTE
*
initData
DWORD
initDataSize
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
Update
(
__RPC__in_ecount_full
(
responseSize
)
const
BYTE
*
response
DWORD
responseSize
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
Close
(
void
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
Remove
(
void
)
=
0
;
}
;
#
endif
#
ifndef
__IMFContentDecryptionModule_INTERFACE_DEFINED__
#
define
__IMFContentDecryptionModule_INTERFACE_DEFINED__
EXTERN_C
const
IID
IID_IMFContentDecryptionModule
;
MIDL_INTERFACE
(
"
87be986c
-
10be
-
4943
-
bf48
-
4b54ce1983a2
"
)
IMFContentDecryptionModule
:
public
IUnknown
{
public
:
virtual
HRESULT
STDMETHODCALLTYPE
SetContentEnabler
(
__RPC__in_opt
IMFContentEnabler
*
contentEnabler
__RPC__in_opt
IMFAsyncResult
*
result
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetSuspendNotify
(
__RPC__deref_out_opt
IMFCdmSuspendNotify
*
*
notify
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
SetPMPHostApp
(
__RPC__in_opt
IMFPMPHostApp
*
pmpHostApp
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
CreateSession
(
MF_MEDIAKEYSESSION_TYPE
sessionType
__RPC__in_opt
IMFContentDecryptionModuleSessionCallbacks
*
callbacks
__RPC__deref_out_opt
IMFContentDecryptionModuleSession
*
*
session
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
SetServerCertificate
(
__RPC__in_ecount_full
(
certificateSize
)
const
BYTE
*
certificate
DWORD
certificateSize
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
CreateTrustedInput
(
__RPC__in_ecount_full
(
contentInitDataSize
)
const
BYTE
*
contentInitData
DWORD
contentInitDataSize
__RPC__deref_out_opt
IMFTrustedInput
*
*
trustedInput
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetProtectionSystemIds
(
__RPC__deref_out_ecount_full_opt
(
*
count
)
GUID
*
*
systemIds
__RPC__out
DWORD
*
count
)
=
0
;
}
;
#
endif
#
ifndef
__IMFContentDecryptionModuleAccess_INTERFACE_DEFINED__
#
define
__IMFContentDecryptionModuleAccess_INTERFACE_DEFINED__
EXTERN_C
const
IID
IID_IMFContentDecryptionModuleAccess
;
MIDL_INTERFACE
(
"
a853d1f4
-
e2a0
-
4303
-
9edc
-
f1a68ee43136
"
)
IMFContentDecryptionModuleAccess
:
public
IUnknown
{
public
:
virtual
HRESULT
STDMETHODCALLTYPE
CreateContentDecryptionModule
(
__RPC__in_opt
IPropertyStore
*
contentDecryptionModuleProperties
__RPC__deref_out_opt
IMFContentDecryptionModule
*
*
contentDecryptionModule
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetConfiguration
(
__RPC__deref_out_opt
IPropertyStore
*
*
configuration
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
GetKeySystem
(
__RPC__deref_out_opt
LPWSTR
*
keySystem
)
=
0
;
}
;
#
endif
#
ifndef
__IMFContentDecryptionModuleFactory_INTERFACE_DEFINED__
#
define
__IMFContentDecryptionModuleFactory_INTERFACE_DEFINED__
EXTERN_C
const
IID
IID_IMFContentDecryptionModuleFactory
;
MIDL_INTERFACE
(
"
7d5abf16
-
4cbb
-
4e08
-
b977
-
9ba59049943e
"
)
IMFContentDecryptionModuleFactory
:
public
IUnknown
{
public
:
virtual
BOOL
STDMETHODCALLTYPE
IsTypeSupported
(
LPCWSTR
keySystem
LPCWSTR
contentType
)
=
0
;
virtual
HRESULT
STDMETHODCALLTYPE
CreateContentDecryptionModuleAccess
(
LPCWSTR
keySystem
IPropertyStore
*
*
configurations
DWORD
numConfigurations
IMFContentDecryptionModuleAccess
*
*
contentDecryptionModuleAccess
)
=
0
;
}
;
#
endif
#
endif
#
endif
