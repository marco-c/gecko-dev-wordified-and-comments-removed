#
ifndef
DOM_MEDIA_PLATFORM_WMF_MFCDMSESSION_H
#
define
DOM_MEDIA_PLATFORM_WMF_MFCDMSESSION_H
#
include
<
vector
>
#
include
<
wrl
.
h
>
#
include
<
wrl
/
client
.
h
>
#
include
"
MFCDMExtra
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
mozilla
/
PMFCDM
.
h
"
#
include
"
mozilla
/
KeySystemConfig
.
h
"
#
include
"
nsAString
.
h
"
namespace
mozilla
{
class
MFCDMSession
final
{
public
:
~
MFCDMSession
(
)
;
static
MFCDMSession
*
Create
(
KeySystemConfig
:
:
SessionType
aSessionType
IMFContentDecryptionModule
*
aCdm
nsISerialEventTarget
*
aManagerThread
)
;
HRESULT
GenerateRequest
(
const
nsAString
&
aInitDataType
const
uint8_t
*
aInitData
uint32_t
aInitDataSize
)
;
HRESULT
Load
(
const
nsAString
&
aSessionId
)
;
HRESULT
Update
(
const
nsTArray
<
uint8_t
>
&
aMessage
)
;
HRESULT
Close
(
)
;
HRESULT
Remove
(
)
;
MediaEventSource
<
MFCDMKeyMessage
>
&
KeyMessageEvent
(
)
{
return
mKeyMessageEvent
;
}
MediaEventSource
<
MFCDMKeyStatusChange
>
&
KeyChangeEvent
(
)
{
return
mKeyChangeEvent
;
}
MediaEventSource
<
MFCDMKeyExpiration
>
&
ExpirationEvent
(
)
{
return
mExpirationEvent
;
}
MediaEventSource
<
nsString
>
&
ClosedEvent
(
)
{
return
mClosedEvent
;
}
const
Maybe
<
nsString
>
&
SessionID
(
)
const
{
return
mSessionId
;
}
private
:
class
SessionCallbacks
;
MFCDMSession
(
IMFContentDecryptionModuleSession
*
aSession
SessionCallbacks
*
aCallback
nsISerialEventTarget
*
aManagerThread
)
;
MFCDMSession
(
const
MFCDMSession
&
)
=
delete
;
MFCDMSession
&
operator
=
(
const
MFCDMSession
&
)
=
delete
;
bool
RetrieveSessionId
(
)
;
void
OnSessionKeysChange
(
)
;
void
OnSessionKeyMessage
(
const
MF_MEDIAKEYSESSION_MESSAGETYPE
&
aType
const
nsTArray
<
uint8_t
>
&
aMessage
)
;
HRESULT
UpdateExpirationIfNeeded
(
)
;
void
AssertOnManagerThread
(
)
const
{
MOZ_ASSERT
(
mManagerThread
-
>
IsOnCurrentThread
(
)
)
;
}
const
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFContentDecryptionModuleSession
>
mSession
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mManagerThread
;
MediaEventProducer
<
MFCDMKeyMessage
>
mKeyMessageEvent
;
MediaEventProducer
<
MFCDMKeyStatusChange
>
mKeyChangeEvent
;
MediaEventProducer
<
MFCDMKeyExpiration
>
mExpirationEvent
;
MediaEventProducer
<
nsString
>
mClosedEvent
;
MediaEventListener
mKeyMessageListener
;
MediaEventListener
mKeyChangeListener
;
Maybe
<
nsString
>
mSessionId
;
double
mExpiredTimeMilliSecondsSinceEpoch
;
}
;
}
#
endif
