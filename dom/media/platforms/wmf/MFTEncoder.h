#
if
!
defined
(
MFTEncoder_h_
)
#
define
MFTEncoder_h_
#
include
<
functional
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
WMF
.
h
"
namespace
mozilla
{
class
MFTEncoder
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFTEncoder
)
HRESULT
Create
(
const
GUID
&
aSubtype
)
;
HRESULT
Destroy
(
)
;
HRESULT
SetMediaTypes
(
IMFMediaType
*
aInputType
IMFMediaType
*
aOutputType
)
;
HRESULT
SetModes
(
UINT32
aBitsPerSec
)
;
HRESULT
SetBitrate
(
UINT32
aBitsPerSec
)
;
HRESULT
CreateInputSample
(
RefPtr
<
IMFSample
>
*
aSample
size_t
aSize
)
;
HRESULT
PushInput
(
RefPtr
<
IMFSample
>
&
&
aInput
)
;
HRESULT
TakeOutput
(
nsTArray
<
RefPtr
<
IMFSample
>
>
&
aOutput
)
;
HRESULT
Drain
(
nsTArray
<
RefPtr
<
IMFSample
>
>
&
aOutput
)
;
HRESULT
GetMPEGSequenceHeader
(
nsTArray
<
UINT8
>
&
aHeader
)
;
static
nsCString
GetFriendlyName
(
const
GUID
&
aSubtype
)
;
struct
Info
final
{
GUID
mSubtype
;
nsCString
mName
;
}
;
private
:
~
MFTEncoder
(
)
{
Destroy
(
)
;
}
;
static
nsTArray
<
Info
>
&
Infos
(
)
;
static
nsTArray
<
Info
>
Enumerate
(
)
;
static
Maybe
<
Info
>
GetInfo
(
const
GUID
&
aSubtype
)
;
already_AddRefed
<
IMFActivate
>
CreateFactory
(
const
GUID
&
aSubtype
)
;
HRESULT
EnableAsync
(
)
;
HRESULT
GetStreamIDs
(
)
;
GUID
MatchInputSubtype
(
IMFMediaType
*
aInputType
)
;
HRESULT
SendMFTMessage
(
MFT_MESSAGE_TYPE
aMsg
ULONG_PTR
aData
)
;
HRESULT
ProcessEvents
(
)
;
HRESULT
ProcessInput
(
)
;
HRESULT
ProcessOutput
(
)
;
RefPtr
<
IMFTransform
>
mEncoder
;
RefPtr
<
IMFActivate
>
mFactory
;
RefPtr
<
ICodecAPI
>
mConfig
;
RefPtr
<
IMFMediaEventGenerator
>
mEventSource
;
DWORD
mInputStreamID
;
DWORD
mOutputStreamID
;
MFT_INPUT_STREAM_INFO
mInputStreamInfo
;
MFT_OUTPUT_STREAM_INFO
mOutputStreamInfo
;
bool
mOutputStreamProvidesSample
;
size_t
mNumNeedInput
;
enum
class
DrainState
{
DRAINED
DRAINABLE
DRAINING
}
;
DrainState
mDrainState
=
DrainState
:
:
DRAINABLE
;
nsRefPtrDeque
<
IMFSample
>
mPendingInputs
;
nsTArray
<
RefPtr
<
IMFSample
>
>
mOutputs
;
}
;
}
#
endif
