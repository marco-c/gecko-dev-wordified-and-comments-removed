#
ifndef
DOM_MEDIA_PLATFORM_WMF_MFTENCODER_H
#
define
DOM_MEDIA_PLATFORM_WMF_MFTENCODER_H
#
include
<
wrl
.
h
>
#
include
<
deque
>
#
include
<
functional
>
#
include
<
queue
>
#
include
"
EncoderConfig
.
h
"
#
include
"
WMF
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
MFTEncoder
final
{
public
:
struct
InputSample
{
RefPtr
<
IMFSample
>
mSample
{
}
;
bool
mKeyFrameRequested
=
false
;
}
;
using
MPEGHeader
=
nsTArray
<
UINT8
>
;
struct
OutputSample
{
RefPtr
<
IMFSample
>
mSample
{
}
;
MPEGHeader
mHeader
;
}
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFTEncoder
)
enum
class
HWPreference
{
HardwareOnly
SoftwareOnly
PreferHardware
PreferSoftware
}
;
explicit
MFTEncoder
(
const
HWPreference
aHWPreference
)
:
mHWPreference
(
aHWPreference
)
{
}
HRESULT
Create
(
const
GUID
&
aSubtype
const
gfx
:
:
IntSize
&
aFrameSize
const
EncoderConfig
:
:
CodecSpecific
&
aCodecSpecific
)
;
HRESULT
Destroy
(
)
;
HRESULT
SetMediaTypes
(
IMFMediaType
*
aInputType
IMFMediaType
*
aOutputType
)
;
HRESULT
SetModes
(
const
EncoderConfig
&
aConfig
)
;
HRESULT
SetBitrate
(
UINT32
aBitsPerSec
)
;
HRESULT
CreateInputSample
(
RefPtr
<
IMFSample
>
*
aSample
size_t
aSize
)
;
HRESULT
PushInput
(
const
InputSample
&
aInput
)
;
nsTArray
<
OutputSample
>
TakeOutput
(
)
;
HRESULT
Drain
(
nsTArray
<
OutputSample
>
&
aOutput
)
;
Result
<
MPEGHeader
HRESULT
>
GetMPEGSequenceHeader
(
)
;
static
nsCString
GetFriendlyName
(
const
GUID
&
aSubtype
)
;
struct
Info
final
{
GUID
mSubtype
;
nsCString
mName
;
}
;
struct
Factory
{
MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE
(
Provider
(
HW_AMD
HW_Intel
HW_NVIDIA
HW_Qualcomm
HW_Unknown
SW
)
)
Provider
mProvider
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFActivate
>
mActivate
;
nsCString
mName
;
Factory
(
Provider
aProvider
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFActivate
>
&
&
aActivate
)
;
Factory
(
Factory
&
&
aOther
)
=
default
;
Factory
(
const
Factory
&
aOther
)
=
delete
;
~
Factory
(
)
;
explicit
operator
bool
(
)
const
{
return
mActivate
;
}
HRESULT
Shutdown
(
)
;
}
;
private
:
using
Event
=
Result
<
MediaEventType
HRESULT
>
;
using
EventQueue
=
std
:
:
queue
<
MediaEventType
>
;
class
EventSource
final
{
public
:
EventSource
(
)
:
mImpl
(
Nothing
{
}
)
{
}
void
SetAsyncEventGenerator
(
already_AddRefed
<
IMFMediaEventGenerator
>
&
&
aAsyncEventGenerator
)
{
MOZ_ASSERT
(
mImpl
.
is
<
Nothing
>
(
)
)
;
mImpl
.
emplace
<
RefPtr
<
IMFMediaEventGenerator
>
>
(
aAsyncEventGenerator
)
;
}
void
InitSyncMFTEventQueue
(
)
{
MOZ_ASSERT
(
mImpl
.
is
<
Nothing
>
(
)
)
;
mImpl
.
emplace
<
UniquePtr
<
EventQueue
>
>
(
MakeUnique
<
EventQueue
>
(
)
)
;
}
bool
IsSync
(
)
const
{
return
mImpl
.
is
<
UniquePtr
<
EventQueue
>
>
(
)
;
}
Event
GetEvent
(
)
;
HRESULT
QueueSyncMFTEvent
(
MediaEventType
aEventType
)
;
private
:
Event
GetSyncMFTEvent
(
)
;
Variant
<
Nothing
RefPtr
<
IMFMediaEventGenerator
>
UniquePtr
<
EventQueue
>
>
mImpl
;
#
ifdef
DEBUG
bool
IsOnCurrentThread
(
)
;
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
#
endif
}
;
~
MFTEncoder
(
)
{
Destroy
(
)
;
}
;
static
nsTArray
<
Info
>
&
Infos
(
)
;
static
nsTArray
<
Info
>
Enumerate
(
)
;
static
Maybe
<
Info
>
GetInfo
(
const
GUID
&
aSubtype
)
;
HRESULT
UpdateOutputType
(
)
;
HRESULT
ProcessOutput
(
RefPtr
<
IMFSample
>
&
aSample
DWORD
&
aOutputStatus
DWORD
&
aBufferStatus
)
;
using
AsyncMFTResult
=
Result
<
bool
HRESULT
>
;
AsyncMFTResult
AttemptEnableAsync
(
)
;
HRESULT
GetStreamIDs
(
)
;
GUID
MatchInputSubtype
(
IMFMediaType
*
aInputType
)
;
HRESULT
SendMFTMessage
(
MFT_MESSAGE_TYPE
aMsg
ULONG_PTR
aData
)
;
HRESULT
ProcessEvents
(
)
;
HRESULT
ProcessEventsInternal
(
)
;
HRESULT
ProcessInput
(
)
;
HRESULT
ProcessOutput
(
)
;
MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE
(
DrainState
(
DRAINED
DRAINABLE
DRAINING
)
)
;
void
SetDrainState
(
DrainState
aState
)
;
const
HWPreference
mHWPreference
;
RefPtr
<
IMFTransform
>
mEncoder
;
Maybe
<
Factory
>
mFactory
;
RefPtr
<
ICodecAPI
>
mConfig
;
DWORD
mInputStreamID
;
DWORD
mOutputStreamID
;
MFT_INPUT_STREAM_INFO
mInputStreamInfo
;
MFT_OUTPUT_STREAM_INFO
mOutputStreamInfo
;
bool
mOutputStreamProvidesSample
;
size_t
mNumNeedInput
;
DrainState
mDrainState
=
DrainState
:
:
DRAINABLE
;
std
:
:
deque
<
InputSample
>
mPendingInputs
;
nsTArray
<
OutputSample
>
mOutputs
;
MPEGHeader
mOutputHeader
;
EventSource
mEventSource
;
}
;
}
#
endif
