#
ifndef
DOM_MEDIA_PLATFORM_WMF_MFTENCODER_H
#
define
DOM_MEDIA_PLATFORM_WMF_MFTENCODER_H
#
include
<
deque
>
#
include
<
functional
>
#
include
<
queue
>
#
include
<
wrl
.
h
>
#
include
"
EncoderConfig
.
h
"
#
include
"
WMF
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
MFTEventSource
;
class
MFTEncoder
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFTEncoder
)
struct
InputSample
{
RefPtr
<
IMFSample
>
mSample
{
}
;
bool
mKeyFrameRequested
=
false
;
}
;
using
MPEGHeader
=
nsTArray
<
UINT8
>
;
struct
OutputSample
{
RefPtr
<
IMFSample
>
mSample
{
}
;
MPEGHeader
mHeader
;
}
;
using
EncodedData
=
nsTArray
<
OutputSample
>
;
using
EncodePromise
=
MozPromise
<
EncodedData
MediaResult
true
>
;
enum
class
HWPreference
{
HardwareOnly
SoftwareOnly
PreferHardware
PreferSoftware
}
;
explicit
MFTEncoder
(
const
HWPreference
aHWPreference
)
:
mHWPreference
(
aHWPreference
)
{
}
HRESULT
Create
(
const
GUID
&
aSubtype
const
gfx
:
:
IntSize
&
aFrameSize
const
EncoderConfig
:
:
CodecSpecific
&
aCodecSpecific
)
;
HRESULT
Destroy
(
)
;
HRESULT
SetMediaTypes
(
IMFMediaType
*
aInputType
IMFMediaType
*
aOutputType
)
;
HRESULT
SetModes
(
const
EncoderConfig
&
aConfig
)
;
HRESULT
SetBitrate
(
UINT32
aBitsPerSec
)
;
RefPtr
<
EncodePromise
>
Encode
(
InputSample
&
&
aInput
)
;
RefPtr
<
EncodePromise
>
Drain
(
)
;
HRESULT
CreateInputSample
(
RefPtr
<
IMFSample
>
*
aSample
size_t
aSize
)
;
Result
<
MPEGHeader
HRESULT
>
GetMPEGSequenceHeader
(
)
;
static
nsCString
GetFriendlyName
(
const
GUID
&
aSubtype
)
;
struct
Info
final
{
GUID
mSubtype
;
nsCString
mName
;
}
;
struct
Factory
{
MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE
(
Provider
(
HW_AMD
HW_Intel
HW_NVIDIA
HW_Qualcomm
HW_Unknown
SW
)
)
Provider
mProvider
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFActivate
>
mActivate
;
nsCString
mName
;
Factory
(
Provider
aProvider
Microsoft
:
:
WRL
:
:
ComPtr
<
IMFActivate
>
&
&
aActivate
)
;
Factory
(
Factory
&
&
aOther
)
=
default
;
Factory
(
const
Factory
&
aOther
)
=
delete
;
~
Factory
(
)
;
explicit
operator
bool
(
)
const
{
return
mActivate
;
}
HRESULT
Shutdown
(
)
;
}
;
private
:
friend
class
MFTEventSource
;
~
MFTEncoder
(
)
{
Destroy
(
)
;
}
;
static
nsTArray
<
Info
>
&
Infos
(
)
;
static
nsTArray
<
Info
>
Enumerate
(
)
;
static
Maybe
<
Info
>
GetInfo
(
const
GUID
&
aSubtype
)
;
Result
<
EncodedData
MediaResult
>
EncodeSync
(
InputSample
&
&
aInput
)
;
Result
<
EncodedData
MediaResult
>
DrainSync
(
)
;
Result
<
EncodedData
HRESULT
>
PullOutputs
(
)
;
Result
<
EncodedData
MediaResult
>
EncodeAsync
(
InputSample
&
&
aInput
)
;
Result
<
EncodedData
MediaResult
>
DrainAsync
(
)
;
MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE
(
ProcessedResult
(
AllAvailableInputsProcessed
InputProcessed
OutputYielded
DrainComplete
)
)
;
using
ProcessedResults
=
EnumSet
<
ProcessedResult
>
;
Result
<
ProcessedResults
HRESULT
>
ProcessPendingEvents
(
)
;
Result
<
MediaEventType
HRESULT
>
GetPendingEvent
(
)
;
RefPtr
<
EncodePromise
>
EncodeWithAsyncCallback
(
InputSample
&
&
aInput
)
;
RefPtr
<
EncodePromise
>
DrainWithAsyncCallback
(
)
;
RefPtr
<
EncodePromise
>
PrepareForDrain
(
)
;
RefPtr
<
EncodePromise
>
StartDraining
(
)
;
void
EventHandler
(
MediaEventType
aEventType
HRESULT
aStatus
)
;
void
MaybeResolveOrRejectEncodePromise
(
)
;
void
MaybeResolveOrRejectDrainPromise
(
)
;
void
MaybeResolveOrRejectPreDrainPromise
(
)
;
void
MaybeResolveOrRejectAnyPendingPromise
(
const
MediaResult
&
aResult
=
NS_OK
)
;
Result
<
ProcessedResult
HRESULT
>
ProcessEvent
(
MediaEventType
aType
)
;
Result
<
ProcessedResult
HRESULT
>
ProcessInput
(
)
;
Result
<
ProcessedResult
HRESULT
>
ProcessOutput
(
)
;
Result
<
ProcessedResult
HRESULT
>
ProcessDrainComplete
(
)
;
class
OutputResult
{
public
:
explicit
OutputResult
(
already_AddRefed
<
IMFSample
>
aSample
)
:
mSample
(
aSample
)
mHeader
(
)
{
}
explicit
OutputResult
(
MPEGHeader
&
&
aHeader
)
:
mSample
(
nullptr
)
mHeader
(
std
:
:
move
(
aHeader
)
)
{
}
bool
IsSample
(
)
const
{
return
mSample
!
=
nullptr
;
}
bool
IsHeader
(
)
const
{
return
!
IsSample
(
)
;
}
already_AddRefed
<
IMFSample
>
TakeSample
(
)
{
MOZ_ASSERT
(
IsSample
(
)
)
;
return
mSample
.
forget
(
)
;
}
MPEGHeader
TakeHeader
(
)
{
MOZ_ASSERT
(
IsHeader
(
)
)
;
return
std
:
:
move
(
mHeader
)
;
}
private
:
RefPtr
<
IMFSample
>
mSample
;
MPEGHeader
mHeader
;
}
;
Result
<
OutputResult
HRESULT
>
GetOutputOrNewHeader
(
)
;
HRESULT
UpdateOutputType
(
)
;
HRESULT
ProcessOutput
(
RefPtr
<
IMFSample
>
&
aSample
DWORD
&
aOutputStatus
DWORD
&
aBufferStatus
)
;
HRESULT
ProcessInput
(
InputSample
&
&
aInput
)
;
bool
IsAsync
(
)
const
{
return
mAsyncEventSource
;
}
using
AsyncMFTResult
=
Result
<
bool
HRESULT
>
;
AsyncMFTResult
AttemptEnableAsync
(
)
;
HRESULT
GetStreamIDs
(
)
;
GUID
MatchInputSubtype
(
IMFMediaType
*
aInputType
)
;
HRESULT
SendMFTMessage
(
MFT_MESSAGE_TYPE
aMsg
ULONG_PTR
aData
)
;
MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE
(
State
(
Uninited
Initializing
Inited
Encoding
PreDraining
Draining
Error
)
)
;
void
SetState
(
State
aState
)
;
const
HWPreference
mHWPreference
;
RefPtr
<
IMFTransform
>
mEncoder
;
Maybe
<
Factory
>
mFactory
;
RefPtr
<
ICodecAPI
>
mConfig
;
DWORD
mInputStreamID
;
DWORD
mOutputStreamID
;
MFT_INPUT_STREAM_INFO
mInputStreamInfo
;
MFT_OUTPUT_STREAM_INFO
mOutputStreamInfo
;
bool
mOutputStreamProvidesSample
;
State
mState
=
State
:
:
Uninited
;
bool
mIsRealtime
=
false
;
size_t
mNumNeedInput
;
std
:
:
deque
<
InputSample
>
mPendingInputs
;
nsTArray
<
OutputSample
>
mOutputs
;
MPEGHeader
mOutputHeader
;
RefPtr
<
MFTEventSource
>
mAsyncEventSource
;
MediaResult
mPendingError
;
MozPromiseHolder
<
EncodePromise
>
mEncodePromise
;
MozPromiseHolder
<
EncodePromise
>
mDrainPromise
;
MozPromiseHolder
<
EncodePromise
>
mPreDrainPromise
;
nsCOMPtr
<
nsITimer
>
mTimer
;
}
;
class
MFTEventSource
final
:
public
IMFAsyncCallback
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MFTEventSource
)
explicit
MFTEventSource
(
already_AddRefed
<
IMFMediaEventGenerator
>
aEventGenerator
)
:
MFTEventSource
(
GetCurrentSerialEventTarget
(
)
nullptr
std
:
:
move
(
aEventGenerator
)
)
{
}
MFTEventSource
(
MFTEncoder
*
aEncoder
already_AddRefed
<
IMFMediaEventGenerator
>
aEventGenerator
)
:
MFTEventSource
(
GetCurrentSerialEventTarget
(
)
aEncoder
std
:
:
move
(
aEventGenerator
)
)
{
}
bool
CanForwardEvents
(
)
const
{
return
mEncoder
;
}
Result
<
MediaEventType
HRESULT
>
GetEvent
(
DWORD
aFlags
)
;
HRESULT
BeginEventListening
(
)
;
STDMETHODIMP
GetParameters
(
DWORD
*
aFlags
DWORD
*
aQueue
)
override
;
STDMETHODIMP
Invoke
(
IMFAsyncResult
*
aAsyncResult
)
override
;
STDMETHODIMP
QueryInterface
(
REFIID
aIID
void
*
*
aPPV
)
override
;
using
Id
=
size_t
;
const
Id
mId
;
private
:
MFTEventSource
(
nsISerialEventTarget
*
aEncoderThread
MFTEncoder
*
aEncoder
already_AddRefed
<
IMFMediaEventGenerator
>
aEventGenerator
)
;
~
MFTEventSource
(
)
;
static
Id
GenerateId
(
)
{
static
Id
sNextId
=
0
;
return
sNextId
+
+
;
}
const
nsCOMPtr
<
nsISerialEventTarget
>
mEncoderThread
;
const
RefPtr
<
MFTEncoder
>
mEncoder
;
DataMutex
<
RefPtr
<
IMFMediaEventGenerator
>
>
mEventGenerator
;
}
;
}
#
endif
