#
include
"
MFCDMProxy
.
h
"
#
include
"
MFMediaEngineUtils
.
h
"
namespace
mozilla
{
using
Microsoft
:
:
WRL
:
:
ComPtr
;
#
define
LOG
(
msg
.
.
.
)
\
MOZ_LOG
(
gMFMediaEngineLog
LogLevel
:
:
Debug
\
(
"
MFCDMProxy
=
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
MFCDMProxy
:
:
MFCDMProxy
(
IMFContentDecryptionModule
*
aCDM
)
:
mCDM
(
aCDM
)
{
LOG
(
"
MFCDMProxy
created
"
)
;
}
MFCDMProxy
:
:
~
MFCDMProxy
(
)
{
if
(
mTrustedInput
)
{
mTrustedInput
=
nullptr
;
}
for
(
auto
&
inputAuthorities
:
mInputTrustAuthorities
)
{
SHUTDOWN_IF_POSSIBLE
(
inputAuthorities
.
second
)
;
}
mInputTrustAuthorities
.
clear
(
)
;
if
(
mCDM
)
{
SHUTDOWN_IF_POSSIBLE
(
mCDM
)
;
mCDM
=
nullptr
;
}
LOG
(
"
MFCDMProxy
destroyed
"
)
;
}
HRESULT
MFCDMProxy
:
:
GetPMPServer
(
REFIID
aRiid
LPVOID
*
aPMPServerOut
)
{
ComPtr
<
IMFGetService
>
cdmServices
;
RETURN_IF_FAILED
(
mCDM
.
As
(
&
cdmServices
)
)
;
RETURN_IF_FAILED
(
cdmServices
-
>
GetService
(
MF_CONTENTDECRYPTIONMODULE_SERVICE
aRiid
aPMPServerOut
)
)
;
return
S_OK
;
}
HRESULT
MFCDMProxy
:
:
GetInputTrustAuthority
(
uint32_t
aStreamId
const
uint8_t
*
aContentInitData
uint32_t
aContentInitDataSize
REFIID
aRiid
IUnknown
*
*
aInputTrustAuthorityOut
)
{
if
(
mInputTrustAuthorities
.
count
(
aStreamId
)
)
{
RETURN_IF_FAILED
(
mInputTrustAuthorities
[
aStreamId
]
.
CopyTo
(
aInputTrustAuthorityOut
)
)
;
return
S_OK
;
}
if
(
!
mTrustedInput
)
{
RETURN_IF_FAILED
(
mCDM
-
>
CreateTrustedInput
(
aContentInitData
aContentInitDataSize
&
mTrustedInput
)
)
;
LOG
(
"
Created
a
trust
input
for
stream
%
u
"
aStreamId
)
;
}
ComPtr
<
IUnknown
>
unknown
;
RETURN_IF_FAILED
(
mTrustedInput
-
>
GetInputTrustAuthority
(
aStreamId
aRiid
&
unknown
)
)
;
ComPtr
<
IMFInputTrustAuthority
>
inputTrustAuthority
;
RETURN_IF_FAILED
(
unknown
.
As
(
&
inputTrustAuthority
)
)
;
RETURN_IF_FAILED
(
unknown
.
CopyTo
(
aInputTrustAuthorityOut
)
)
;
mInputTrustAuthorities
[
aStreamId
]
=
inputTrustAuthority
;
return
S_OK
;
}
HRESULT
MFCDMProxy
:
:
SetContentEnabler
(
IUnknown
*
aRequest
IMFAsyncResult
*
aResult
)
{
LOG
(
"
SetContentEnabler
"
)
;
ComPtr
<
IMFContentEnabler
>
contentEnabler
;
RETURN_IF_FAILED
(
aRequest
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
contentEnabler
)
)
)
;
return
mCDM
-
>
SetContentEnabler
(
contentEnabler
.
Get
(
)
aResult
)
;
}
void
MFCDMProxy
:
:
OnHardwareContextReset
(
)
{
LOG
(
"
OnHardwareContextReset
"
)
;
mTrustedInput
.
Reset
(
)
;
mInputTrustAuthorities
.
clear
(
)
;
}
#
undef
LOG
}
