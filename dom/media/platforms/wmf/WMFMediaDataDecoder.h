#
if
!
defined
(
WMFMediaDataDecoder_h_
)
#
define
WMFMediaDataDecoder_h_
#
include
"
MFTDecoder
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
WMF
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
MFTManager
{
public
:
virtual
~
MFTManager
(
)
{
}
virtual
HRESULT
Input
(
MediaRawData
*
aSample
)
=
0
;
virtual
HRESULT
Output
(
int64_t
aStreamOffset
RefPtr
<
MediaData
>
&
aOutput
)
=
0
;
virtual
void
Flush
(
)
{
mDecoder
-
>
Flush
(
)
;
mSeekTargetThreshold
.
reset
(
)
;
}
virtual
void
Drain
(
)
{
if
(
FAILED
(
mDecoder
-
>
SendMFTMessage
(
MFT_MESSAGE_COMMAND_DRAIN
0
)
)
)
{
NS_WARNING
(
"
Failed
to
send
DRAIN
command
to
MFT
"
)
;
}
}
virtual
void
Shutdown
(
)
=
0
;
virtual
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
return
false
;
}
virtual
TrackInfo
:
:
TrackType
GetType
(
)
=
0
;
virtual
nsCString
GetDescriptionName
(
)
const
=
0
;
virtual
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
mSeekTargetThreshold
=
Some
(
aTime
)
;
}
virtual
MediaDataDecoder
:
:
ConversionRequired
NeedsConversion
(
)
const
{
return
MediaDataDecoder
:
:
ConversionRequired
:
:
kNeedNone
;
}
protected
:
RefPtr
<
MFTDecoder
>
mDecoder
;
Maybe
<
media
:
:
TimeUnit
>
mSeekTargetThreshold
;
}
;
DDLoggedTypeDeclNameAndBase
(
WMFMediaDataDecoder
MediaDataDecoder
)
;
class
WMFMediaDataDecoder
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
WMFMediaDataDecoder
>
{
public
:
WMFMediaDataDecoder
(
MFTManager
*
aOutputSource
TaskQueue
*
aTaskQueue
)
;
~
WMFMediaDataDecoder
(
)
;
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
mMFTManager
?
mMFTManager
-
>
GetDescriptionName
(
)
:
NS_LITERAL_CSTRING
(
"
"
)
;
}
ConversionRequired
NeedsConversion
(
)
const
override
{
MOZ_ASSERT
(
mMFTManager
)
;
return
mMFTManager
-
>
NeedsConversion
(
)
;
}
virtual
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
private
:
RefPtr
<
DecodePromise
>
ProcessError
(
HRESULT
aError
const
char
*
aReason
)
;
RefPtr
<
DecodePromise
>
ProcessDecode
(
MediaRawData
*
aSample
)
;
HRESULT
ProcessOutput
(
DecodedData
&
aResults
)
;
RefPtr
<
FlushPromise
>
ProcessFlush
(
)
;
RefPtr
<
DecodePromise
>
ProcessDrain
(
)
;
RefPtr
<
ShutdownPromise
>
ProcessShutdown
(
)
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
nsAutoPtr
<
MFTManager
>
mMFTManager
;
int64_t
mLastStreamOffset
;
bool
mIsShutDown
=
false
;
enum
class
DrainStatus
{
DRAINED
DRAINABLE
DRAINING
}
;
DrainStatus
mDrainStatus
=
DrainStatus
:
:
DRAINED
;
bool
mHasSuccessfulOutput
=
false
;
bool
mRecordedError
=
false
;
}
;
}
#
endif
