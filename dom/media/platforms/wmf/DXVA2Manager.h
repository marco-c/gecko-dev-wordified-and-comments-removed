#
if
!
defined
(
DXVA2Manager_h_
)
#
define
DXVA2Manager_h_
#
include
"
MediaInfo
.
h
"
#
include
"
WMF
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
d3d11
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Image
;
class
ImageContainer
;
class
KnowsCompositor
;
}
class
DXVA2Manager
{
public
:
static
DXVA2Manager
*
CreateD3D11DXVA
(
layers
:
:
KnowsCompositor
*
aKnowsCompositor
nsACString
&
aFailureReason
ID3D11Device
*
aDevice
=
nullptr
)
;
virtual
IUnknown
*
GetDXVADeviceManager
(
)
=
0
;
virtual
HRESULT
CopyToImage
(
IMFSample
*
aVideoSample
const
gfx
:
:
IntRect
&
aRegion
layers
:
:
Image
*
*
aOutImage
)
=
0
;
virtual
HRESULT
CopyToImage
(
ID3D11Texture2D
*
aInputTexture
UINT
aSurfaceIndex
const
gfx
:
:
IntRect
&
aRegion
layers
:
:
Image
*
*
aOutImage
)
=
0
;
virtual
HRESULT
WrapTextureWithImage
(
IMFSample
*
aVideoSample
const
gfx
:
:
IntRect
&
aRegion
layers
:
:
Image
*
*
aOutImage
)
{
MOZ_CRASH
(
"
WrapTextureWithImage
not
implemented
on
this
manager
.
"
)
;
return
E_FAIL
;
}
virtual
HRESULT
WrapTextureWithImage
(
ID3D11Texture2D
*
aTexture
UINT
aSurfaceIndex
const
gfx
:
:
IntRect
&
aRegion
layers
:
:
Image
*
*
aOutImage
)
{
MOZ_CRASH
(
"
WrapTextureWithImage
not
implemented
on
this
manager
.
"
)
;
return
E_FAIL
;
}
virtual
HRESULT
CopyToBGRATexture
(
ID3D11Texture2D
*
aInTexture
uint32_t
aArrayIndex
ID3D11Texture2D
*
*
aOutTexture
)
{
MOZ_CRASH
(
"
CopyToBGRATexture
not
implemented
on
this
manager
.
"
)
;
return
E_FAIL
;
}
virtual
HRESULT
ConfigureForSize
(
IMFMediaType
*
aInputType
gfx
:
:
YUVColorSpace
aColorSpace
gfx
:
:
ColorRange
aColorRange
uint32_t
aWidth
uint32_t
aHeight
)
{
return
S_OK
;
}
virtual
HRESULT
ConfigureForSize
(
gfx
:
:
SurfaceFormat
aSurfaceFormat
gfx
:
:
YUVColorSpace
aColorSpace
gfx
:
:
ColorRange
aColorRange
uint32_t
aWidth
uint32_t
aHeight
)
{
MOZ_CRASH
(
"
ConfigureForSize
not
implemented
on
this
manager
.
"
)
;
return
E_FAIL
;
}
virtual
bool
IsD3D11
(
)
{
return
false
;
}
virtual
~
DXVA2Manager
(
)
;
virtual
bool
SupportsConfig
(
const
VideoInfo
&
aInfo
IMFMediaType
*
aInputType
IMFMediaType
*
aOutputType
)
=
0
;
virtual
void
BeforeShutdownVideoMFTDecoder
(
)
{
}
virtual
bool
SupportsZeroCopyNV12Texture
(
)
{
return
false
;
}
static
bool
IsNV12Supported
(
uint32_t
aVendorID
uint32_t
aDeviceID
const
nsAString
&
aDriverVersionString
)
;
virtual
ID3D11Device
*
GetD3D11Device
(
)
{
return
nullptr
;
}
protected
:
Mutex
mLock
MOZ_UNANNOTATED
;
DXVA2Manager
(
)
;
bool
IsUnsupportedResolution
(
const
uint32_t
&
aWidth
const
uint32_t
&
aHeight
const
float
&
aFramerate
)
const
;
bool
mIsAMDPreUVD4
=
false
;
}
;
}
#
endif
