#
ifndef
mozilla_AppleATDecoder_h
#
define
mozilla_AppleATDecoder_h
#
include
<
AudioToolbox
/
AudioToolbox
.
h
>
#
include
"
AudioConverter
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
{
class
TaskQueue
;
DDLoggedTypeDeclNameAndBase
(
AppleATDecoder
MediaDataDecoder
)
;
class
AppleATDecoder
final
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
AppleATDecoder
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AppleATDecoder
final
)
;
explicit
AppleATDecoder
(
const
AudioInfo
&
aConfig
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
"
apple
coremedia
decoder
"
_ns
;
}
nsCString
GetCodecName
(
)
const
override
;
AudioInfo
mConfig
;
nsTArray
<
uint8_t
>
mMagicCookie
;
bool
mFileStreamError
;
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
private
:
~
AppleATDecoder
(
)
;
AudioConverterRef
mConverter
;
AudioStreamBasicDescription
mOutputFormat
;
UInt32
mFormatID
;
AudioFileStreamID
mStream
;
nsTArray
<
RefPtr
<
MediaRawData
>
>
mQueuedSamples
;
UniquePtr
<
AudioConfig
:
:
ChannelLayout
>
mChannelLayout
;
UniquePtr
<
AudioConverter
>
mAudioConverter
;
DecodedData
mDecodedSamples
;
void
ProcessShutdown
(
)
;
MediaResult
DecodeSample
(
MediaRawData
*
aSample
)
;
MediaResult
GetInputAudioDescription
(
AudioStreamBasicDescription
&
aDesc
const
nsTArray
<
uint8_t
>
&
aExtraData
)
;
MediaResult
SetupDecoder
(
MediaRawData
*
aSample
)
;
nsresult
GetImplicitAACMagicCookie
(
MediaRawData
*
aSample
)
;
nsresult
SetupChannelLayout
(
)
;
uint32_t
mParsedFramesForAACMagicCookie
;
uint32_t
mEncoderDelay
=
0
;
uint64_t
mTotalMediaFrames
=
0
;
bool
mIsADTS
=
false
;
bool
mErrored
;
}
;
}
#
endif
