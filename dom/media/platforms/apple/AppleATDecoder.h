#
ifndef
mozilla_AppleATDecoder_h
#
define
mozilla_AppleATDecoder_h
#
include
<
AudioToolbox
/
AudioToolbox
.
h
>
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
AudioConverter
.
h
"
namespace
mozilla
{
class
TaskQueue
;
class
MediaDataDecoderCallback
;
class
AppleATDecoder
:
public
MediaDataDecoder
{
public
:
AppleATDecoder
(
const
AudioInfo
&
aConfig
TaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
)
;
virtual
~
AppleATDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
apple
CoreMedia
decoder
"
;
}
const
AudioInfo
&
mConfig
;
nsTArray
<
uint8_t
>
mMagicCookie
;
bool
mFileStreamError
;
private
:
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
MediaDataDecoderCallback
*
mCallback
;
AudioConverterRef
mConverter
;
AudioStreamBasicDescription
mOutputFormat
;
UInt32
mFormatID
;
AudioFileStreamID
mStream
;
nsTArray
<
RefPtr
<
MediaRawData
>
>
mQueuedSamples
;
UniquePtr
<
AudioConfig
:
:
ChannelLayout
>
mChannelLayout
;
UniquePtr
<
AudioConverter
>
mAudioConverter
;
Atomic
<
bool
>
mIsFlushing
;
void
ProcessFlush
(
)
;
void
SubmitSample
(
MediaRawData
*
aSample
)
;
nsresult
DecodeSample
(
MediaRawData
*
aSample
)
;
nsresult
GetInputAudioDescription
(
AudioStreamBasicDescription
&
aDesc
const
nsTArray
<
uint8_t
>
&
aExtraData
)
;
nsresult
SetupDecoder
(
MediaRawData
*
aSample
)
;
nsresult
GetImplicitAACMagicCookie
(
const
MediaRawData
*
aSample
)
;
nsresult
SetupChannelLayout
(
)
;
}
;
}
#
endif
