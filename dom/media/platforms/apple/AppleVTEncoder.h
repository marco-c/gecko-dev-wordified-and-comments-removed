#
ifndef
mozilla_AppleVTEncoder_h_
#
define
mozilla_AppleVTEncoder_h_
#
include
<
CoreMedia
/
CoreMedia
.
h
>
#
include
<
VideoToolbox
/
VideoToolbox
.
h
>
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
TimeUnits
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Image
;
}
class
AppleVTEncoder
final
:
public
MediaDataEncoder
{
public
:
using
Config
=
H264Config
;
AppleVTEncoder
(
const
Config
&
aConfig
RefPtr
<
TaskQueue
>
aTaskQueue
)
:
mConfig
(
aConfig
)
mTaskQueue
(
aTaskQueue
)
mFramesCompleted
(
false
)
mError
(
NS_OK
)
mSession
(
nullptr
)
{
MOZ_ASSERT
(
mTaskQueue
)
;
}
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
EncodePromise
>
Encode
(
const
MediaData
*
aSample
)
override
;
RefPtr
<
EncodePromise
>
Drain
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
RefPtr
<
GenericPromise
>
SetBitrate
(
Rate
aBitsPerSec
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
MOZ_ASSERT
(
mSession
)
;
return
mIsHardwareAccelerated
?
NS_LITERAL_CSTRING
(
"
apple
hardware
VT
encoder
"
)
:
NS_LITERAL_CSTRING
(
"
apple
software
VT
encoder
"
)
;
}
void
OutputFrame
(
CMSampleBufferRef
aBuffer
)
;
private
:
virtual
~
AppleVTEncoder
(
)
{
MOZ_ASSERT
(
!
mSession
)
;
}
RefPtr
<
EncodePromise
>
ProcessEncode
(
RefPtr
<
const
VideoData
>
aSample
)
;
void
ProcessOutput
(
RefPtr
<
MediaRawData
>
&
&
aOutput
)
;
void
ResolvePromise
(
)
;
RefPtr
<
EncodePromise
>
ProcessDrain
(
)
;
RefPtr
<
ShutdownPromise
>
ProcessShutdown
(
)
;
CFDictionaryRef
BuildSourceImageBufferAttributes
(
)
;
CVPixelBufferRef
CreateCVPixelBuffer
(
const
layers
:
:
Image
*
aSource
)
;
bool
WriteExtraData
(
MediaRawData
*
aDst
CMSampleBufferRef
aSrc
const
bool
aAsAnnexB
)
;
void
AssertOnTaskQueue
(
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
}
const
Config
mConfig
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
EncodedData
mEncodedData
;
bool
mFramesCompleted
;
RefPtr
<
MediaByteBuffer
>
mAvcc
;
MediaResult
mError
;
VTCompressionSessionRef
mSession
;
Atomic
<
bool
>
mIsHardwareAccelerated
;
Atomic
<
bool
>
mInited
;
}
;
}
#
endif
