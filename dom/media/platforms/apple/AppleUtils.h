#
ifndef
mozilla_AppleUtils_h
#
define
mozilla_AppleUtils_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
CoreFoundation
/
CFBase
.
h
>
#
include
<
CoreVideo
/
CVBuffer
.
h
>
#
ifndef
TARGET_OS_IPHONE
inline
bool
OSSupportsSVC
(
)
{
return
false
;
}
#
else
#
include
"
nsCocoaFeatures
.
h
"
inline
bool
OSSupportsSVC
(
)
{
return
nsCocoaFeatures
:
:
IsAtLeastVersion
(
11
3
0
)
;
}
#
endif
namespace
mozilla
{
template
<
class
T
class
F
F
relFunc
>
class
AutoObjRefRelease
{
public
:
MOZ_IMPLICIT
AutoObjRefRelease
(
T
aRef
)
:
mRef
(
aRef
)
{
}
~
AutoObjRefRelease
(
)
{
if
(
mRef
)
{
relFunc
(
mRef
)
;
}
}
operator
T
(
)
{
return
mRef
;
}
T
*
receive
(
)
{
return
&
mRef
;
}
private
:
AutoObjRefRelease
<
T
F
relFunc
>
&
operator
=
(
const
AutoObjRefRelease
<
T
F
relFunc
>
&
)
;
T
mRef
;
}
;
template
<
typename
T
>
using
AutoCFRelease
=
AutoObjRefRelease
<
T
decltype
(
&
CFRelease
)
&
CFRelease
>
;
template
<
typename
T
>
using
AutoCVBufferRelease
=
AutoObjRefRelease
<
T
decltype
(
&
CVBufferRelease
)
&
CVBufferRelease
>
;
template
<
class
T
>
class
CFRefPtr
{
public
:
explicit
CFRefPtr
(
T
aRef
)
:
mRef
(
aRef
)
{
if
(
mRef
)
{
CFRetain
(
mRef
)
;
}
}
CFRefPtr
(
const
CFRefPtr
<
T
>
&
aCFRefPtr
)
:
mRef
(
aCFRefPtr
.
mRef
)
{
if
(
mRef
)
{
CFRetain
(
mRef
)
;
}
}
CFRefPtr
<
T
>
&
operator
=
(
const
CFRefPtr
<
T
>
&
aCFRefPtr
)
{
if
(
mRef
=
=
aCFRefPtr
.
mRef
)
{
return
;
}
if
(
mRef
)
{
CFRelease
(
mRef
)
;
}
mRef
=
aCFRefPtr
.
mRef
;
if
(
mRef
)
{
CFRetain
(
mRef
)
;
}
return
*
this
;
}
~
CFRefPtr
(
)
{
if
(
mRef
)
{
CFRelease
(
mRef
)
;
}
}
operator
T
(
)
{
return
mRef
;
}
private
:
T
mRef
;
}
;
}
#
endif
