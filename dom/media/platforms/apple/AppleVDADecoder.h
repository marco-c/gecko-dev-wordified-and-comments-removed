#
ifndef
mozilla_AppleVDADecoder_h
#
define
mozilla_AppleVDADecoder_h
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
MP4Decoder
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
ReorderQueue
.
h
"
#
include
"
TimeUnits
.
h
"
#
include
"
VideoDecodeAcceleration
/
VDADecoder
.
h
"
namespace
mozilla
{
class
FlushableTaskQueue
;
class
MediaDataDecoderCallback
;
namespace
layers
{
class
ImageContainer
;
}
class
AppleVDADecoder
:
public
MediaDataDecoder
{
public
:
class
AppleFrameRef
{
public
:
media
:
:
TimeUnit
decode_timestamp
;
media
:
:
TimeUnit
composition_timestamp
;
media
:
:
TimeUnit
duration
;
int64_t
byte_offset
;
bool
is_sync_point
;
explicit
AppleFrameRef
(
const
MediaRawData
&
aSample
)
:
decode_timestamp
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
aSample
.
mTimecode
)
)
composition_timestamp
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
aSample
.
mTime
)
)
duration
(
media
:
:
TimeUnit
:
:
FromMicroseconds
(
aSample
.
mDuration
)
)
byte_offset
(
aSample
.
mOffset
)
is_sync_point
(
aSample
.
mKeyframe
)
{
}
AppleFrameRef
(
const
media
:
:
TimeUnit
&
aDts
const
media
:
:
TimeUnit
&
aPts
const
media
:
:
TimeUnit
&
aDuration
int64_t
aByte_offset
bool
aIs_sync_point
)
:
decode_timestamp
(
aDts
)
composition_timestamp
(
aPts
)
duration
(
aDuration
)
byte_offset
(
aByte_offset
)
is_sync_point
(
aIs_sync_point
)
{
}
}
;
static
already_AddRefed
<
AppleVDADecoder
>
CreateVDADecoder
(
const
VideoInfo
&
aConfig
FlushableTaskQueue
*
aVideoTaskQueue
MediaDataDecoderCallback
*
aCallback
layers
:
:
ImageContainer
*
aImageContainer
)
;
AppleVDADecoder
(
const
VideoInfo
&
aConfig
FlushableTaskQueue
*
aVideoTaskQueue
MediaDataDecoderCallback
*
aCallback
layers
:
:
ImageContainer
*
aImageContainer
)
;
virtual
~
AppleVDADecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
{
return
true
;
}
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
apple
VDA
decoder
"
;
}
nsresult
OutputFrame
(
CVPixelBufferRef
aImage
AppleFrameRef
aFrameRef
)
;
protected
:
void
AssertOnTaskQueueThread
(
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
}
virtual
void
ProcessFlush
(
)
;
virtual
void
ProcessDrain
(
)
;
virtual
void
ProcessShutdown
(
)
;
AppleFrameRef
*
CreateAppleFrameRef
(
const
MediaRawData
*
aSample
)
;
void
DrainReorderedFrames
(
)
;
void
ClearReorderedFrames
(
)
;
CFDictionaryRef
CreateOutputConfiguration
(
)
;
RefPtr
<
MediaByteBuffer
>
mExtraData
;
MediaDataDecoderCallback
*
mCallback
;
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
uint32_t
mPictureWidth
;
uint32_t
mPictureHeight
;
uint32_t
mDisplayWidth
;
uint32_t
mDisplayHeight
;
uint32_t
mMaxRefFrames
;
Atomic
<
uint32_t
>
mInputIncoming
;
Atomic
<
bool
>
mIsShutDown
;
const
bool
mUseSoftwareImages
;
const
bool
mIs106
;
Atomic
<
uint32_t
>
mQueuedSamples
;
Monitor
mMonitor
;
Atomic
<
bool
>
mIsFlushing
;
ReorderQueue
mReorderQueue
;
private
:
const
RefPtr
<
FlushableTaskQueue
>
mTaskQueue
;
VDADecoder
mDecoder
;
nsresult
InitializeSession
(
)
;
nsresult
ProcessDecode
(
MediaRawData
*
aSample
)
;
virtual
nsresult
DoDecode
(
MediaRawData
*
aSample
)
;
CFDictionaryRef
CreateDecoderSpecification
(
)
;
}
;
}
#
endif
