#
include
"
AppleEncoderModule
.
h
"
#
include
"
AppleVTEncoder
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
AppleUtils
.
h
"
using
mozilla
:
:
media
:
:
EncodeSupport
;
using
mozilla
:
:
media
:
:
EncodeSupportSet
;
namespace
mozilla
{
extern
LazyLogModule
sPEMLog
;
#
define
LOGE
(
fmt
.
.
.
)
\
MOZ_LOG
(
sPEMLog
mozilla
:
:
LogLevel
:
:
Error
\
(
"
[
AppleEncoderModule
]
%
s
:
"
fmt
__func__
#
#
__VA_ARGS__
)
)
#
define
LOGD
(
fmt
.
.
.
)
\
MOZ_LOG
(
sPEMLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
[
AppleEncoderModule
]
%
s
:
"
fmt
__func__
#
#
__VA_ARGS__
)
)
EncodeSupportSet
AppleEncoderModule
:
:
SupportsCodec
(
CodecType
aCodec
)
const
{
if
(
aCodec
!
=
CodecType
:
:
H264
)
{
return
EncodeSupportSet
{
}
;
}
return
EncodeSupportSet
{
EncodeSupport
:
:
HardwareEncode
EncodeSupport
:
:
SoftwareEncode
}
;
}
EncodeSupportSet
AppleEncoderModule
:
:
Supports
(
const
EncoderConfig
&
aConfig
)
const
{
if
(
!
CanLikelyEncode
(
aConfig
)
)
{
return
EncodeSupportSet
{
}
;
}
if
(
aConfig
.
mScalabilityMode
=
=
ScalabilityMode
:
:
L1T3
|
|
(
aConfig
.
mScalabilityMode
!
=
ScalabilityMode
:
:
None
&
&
!
OSSupportsSVC
(
)
)
)
{
return
EncodeSupportSet
{
}
;
}
return
SupportsCodec
(
aConfig
.
mCodec
)
;
}
already_AddRefed
<
MediaDataEncoder
>
AppleEncoderModule
:
:
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
RefPtr
<
MediaDataEncoder
>
encoder
(
new
AppleVTEncoder
(
aConfig
aTaskQueue
)
)
;
return
encoder
.
forget
(
)
;
}
#
undef
LOGE
#
undef
LOGD
}
