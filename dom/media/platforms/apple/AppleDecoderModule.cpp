#
include
"
AppleATDecoder
.
h
"
#
include
"
AppleDecoderModule
.
h
"
#
include
"
AppleVTDecoder
.
h
"
#
include
"
MacIOSurfaceImage
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
namespace
mozilla
{
bool
AppleDecoderModule
:
:
sInitialized
=
false
;
bool
AppleDecoderModule
:
:
sCanUseHardwareVideoDecoder
=
true
;
AppleDecoderModule
:
:
AppleDecoderModule
(
)
{
}
AppleDecoderModule
:
:
~
AppleDecoderModule
(
)
{
}
void
AppleDecoderModule
:
:
Init
(
)
{
if
(
sInitialized
)
{
return
;
}
MacIOSurfaceLib
:
:
LoadLibrary
(
)
;
sCanUseHardwareVideoDecoder
=
MacIOSurfaceLib
:
:
isInit
(
)
&
&
gfx
:
:
gfxVars
:
:
CanUseHardwareVideoDecoding
(
)
;
sInitialized
=
true
;
}
nsresult
AppleDecoderModule
:
:
Startup
(
)
{
if
(
!
sInitialized
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
already_AddRefed
<
MediaDataDecoder
>
AppleDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
RefPtr
<
MediaDataDecoder
>
decoder
=
new
AppleVTDecoder
(
aParams
.
VideoConfig
(
)
aParams
.
mTaskQueue
aParams
.
mImageContainer
aParams
.
mOptions
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
AppleDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
RefPtr
<
MediaDataDecoder
>
decoder
=
new
AppleATDecoder
(
aParams
.
AudioConfig
(
)
aParams
.
mTaskQueue
)
;
return
decoder
.
forget
(
)
;
}
bool
AppleDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
return
aMimeType
.
EqualsLiteral
(
"
audio
/
mpeg
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
audio
/
mp4a
-
latm
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
video
/
mp4
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
;
}
}
