#
if
!
defined
(
PEMFactory_h_
)
#
define
PEMFactory_h_
#
include
"
PlatformEncoderModule
.
h
"
namespace
mozilla
{
using
PEMCreateEncoderPromise
=
PlatformEncoderModule
:
:
CreateEncoderPromise
;
class
PEMFactory
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PEMFactory
)
PEMFactory
(
)
;
already_AddRefed
<
MediaDataEncoder
>
CreateEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
;
RefPtr
<
PlatformEncoderModule
:
:
CreateEncoderPromise
>
CreateEncoderAsync
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
;
bool
Supports
(
const
EncoderConfig
&
aConfig
)
const
;
bool
SupportsCodec
(
CodecType
aCodec
)
const
;
private
:
RefPtr
<
PlatformEncoderModule
:
:
CreateEncoderPromise
>
CheckAndMaybeCreateEncoder
(
const
EncoderConfig
&
aConfig
uint32_t
aIndex
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
;
RefPtr
<
PlatformEncoderModule
:
:
CreateEncoderPromise
>
CreateEncoderWithPEM
(
PlatformEncoderModule
*
aPEM
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
;
virtual
~
PEMFactory
(
)
=
default
;
already_AddRefed
<
PlatformEncoderModule
>
FindPEM
(
const
EncoderConfig
&
aConfig
)
const
;
nsTArray
<
RefPtr
<
PlatformEncoderModule
>
>
mCurrentPEMs
;
}
;
}
#
endif
