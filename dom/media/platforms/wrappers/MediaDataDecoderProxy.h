#
if
!
defined
(
MediaDataDecoderProxy_h_
)
#
define
MediaDataDecoderProxy_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
DDLoggedTypeDeclNameAndBase
(
MediaDataDecoderProxy
MediaDataDecoder
)
;
class
MediaDataDecoderProxy
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
MediaDataDecoderProxy
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaDataDecoderProxy
final
)
;
explicit
MediaDataDecoderProxy
(
already_AddRefed
<
MediaDataDecoder
>
aProxyDecoder
already_AddRefed
<
nsISerialEventTarget
>
aProxyThread
=
nullptr
)
:
mProxyDecoder
(
aProxyDecoder
)
mProxyThread
(
aProxyThread
)
{
DDLINKCHILD
(
"
proxy
decoder
"
mProxyDecoder
.
get
(
)
)
;
}
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
bool
CanDecodeBatch
(
)
const
override
;
RefPtr
<
DecodePromise
>
DecodeBatch
(
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
&
aSamples
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
nsCString
GetDescriptionName
(
)
const
override
;
nsCString
GetProcessName
(
)
const
override
;
nsCString
GetCodecName
(
)
const
override
;
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
bool
SupportDecoderRecycling
(
)
const
override
;
ConversionRequired
NeedsConversion
(
)
const
override
;
protected
:
~
MediaDataDecoderProxy
(
)
=
default
;
private
:
RefPtr
<
MediaDataDecoder
>
mProxyDecoder
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mProxyThread
;
#
if
defined
(
DEBUG
)
Atomic
<
bool
>
mIsShutdown
=
Atomic
<
bool
>
(
false
)
;
#
endif
}
;
}
#
endif
