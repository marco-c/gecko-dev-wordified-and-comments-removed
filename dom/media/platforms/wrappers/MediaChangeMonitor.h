#
ifndef
mozilla_H264Converter_h
#
define
mozilla_H264Converter_h
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
class
DecoderDoctorDiagnostics
;
DDLoggedTypeDeclNameAndBase
(
MediaChangeMonitor
MediaDataDecoder
)
;
class
MediaChangeMonitor
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
MediaChangeMonitor
>
{
public
:
MediaChangeMonitor
(
PlatformDecoderModule
*
aPDM
const
CreateDecoderParams
&
aParams
)
;
virtual
~
MediaChangeMonitor
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
nsCString
GetDescriptionName
(
)
const
override
{
if
(
mDecoder
)
{
return
mDecoder
-
>
GetDescriptionName
(
)
;
}
return
NS_LITERAL_CSTRING
(
"
MediaChangeMonitor
decoder
(
pending
)
"
)
;
}
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
bool
SupportDecoderRecycling
(
)
const
override
{
if
(
mDecoder
)
{
return
mDecoder
-
>
SupportDecoderRecycling
(
)
;
}
return
false
;
}
ConversionRequired
NeedsConversion
(
)
const
override
{
if
(
mDecoder
)
{
return
mDecoder
-
>
NeedsConversion
(
)
;
}
return
ConversionRequired
:
:
kNeedNone
;
}
MediaResult
GetLastError
(
)
const
{
return
mLastError
;
}
class
CodecChangeMonitor
{
public
:
virtual
bool
CanBeInstantiated
(
)
const
=
0
;
virtual
MediaResult
CheckForChange
(
MediaRawData
*
aSample
)
=
0
;
virtual
const
TrackInfo
&
Config
(
)
const
=
0
;
virtual
MediaResult
PrepareSample
(
MediaDataDecoder
:
:
ConversionRequired
aConversion
MediaRawData
*
aSample
)
=
0
;
virtual
~
CodecChangeMonitor
(
)
=
default
;
}
;
private
:
UniquePtr
<
CodecChangeMonitor
>
mChangeMonitor
;
void
AssertOnTaskQueue
(
)
const
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
}
bool
CanRecycleDecoder
(
)
const
;
MediaResult
CreateDecoder
(
DecoderDoctorDiagnostics
*
aDiagnostics
)
;
MediaResult
CreateDecoderAndInit
(
MediaRawData
*
aSample
)
;
MediaResult
CheckForChange
(
MediaRawData
*
aSample
)
;
void
DecodeFirstSample
(
MediaRawData
*
aSample
)
;
void
DrainThenFlushDecoder
(
MediaRawData
*
aPendingSample
)
;
void
FlushThenShutdownDecoder
(
MediaRawData
*
aPendingSample
)
;
RefPtr
<
ShutdownPromise
>
ShutdownDecoder
(
)
;
RefPtr
<
PlatformDecoderModule
>
mPDM
;
VideoInfo
mCurrentConfig
;
RefPtr
<
layers
:
:
KnowsCompositor
>
mKnowsCompositor
;
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
RefPtr
<
MediaDataDecoder
>
mDecoder
;
MozPromiseRequestHolder
<
InitPromise
>
mInitPromiseRequest
;
MozPromiseHolder
<
InitPromise
>
mInitPromise
;
MozPromiseRequestHolder
<
DecodePromise
>
mDecodePromiseRequest
;
MozPromiseHolder
<
DecodePromise
>
mDecodePromise
;
MozPromiseRequestHolder
<
FlushPromise
>
mFlushRequest
;
MediaDataDecoder
:
:
DecodedData
mPendingFrames
;
MozPromiseRequestHolder
<
DecodePromise
>
mDrainRequest
;
MozPromiseRequestHolder
<
ShutdownPromise
>
mShutdownRequest
;
RefPtr
<
ShutdownPromise
>
mShutdownPromise
;
MozPromiseHolder
<
FlushPromise
>
mFlushPromise
;
RefPtr
<
GMPCrashHelper
>
mGMPCrashHelper
;
MediaResult
mLastError
;
bool
mNeedKeyframe
=
true
;
const
TrackInfo
:
:
TrackType
mType
;
MediaEventProducer
<
TrackInfo
:
:
TrackType
>
*
const
mOnWaitingForKeyEvent
;
const
CreateDecoderParams
:
:
OptionSet
mDecoderOptions
;
const
CreateDecoderParams
:
:
VideoFrameRate
mRate
;
Maybe
<
bool
>
mCanRecycleDecoder
;
Maybe
<
MediaDataDecoder
:
:
ConversionRequired
>
mConversionRequired
;
Atomic
<
bool
>
mInConstructor
;
}
;
}
#
endif
