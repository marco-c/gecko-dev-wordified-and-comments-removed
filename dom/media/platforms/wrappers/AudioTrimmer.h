#
if
!
defined
(
AudioTrimmer_h_
)
#
define
AudioTrimmer_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
namespace
mozilla
{
DDLoggedTypeDeclNameAndBase
(
AudioTrimmer
MediaDataDecoder
)
;
class
AudioTrimmer
:
public
MediaDataDecoder
{
public
:
AudioTrimmer
(
already_AddRefed
<
MediaDataDecoder
>
aDecoder
const
CreateDecoderParams
&
aParams
)
:
mDecoder
(
aDecoder
)
mTaskQueue
(
aParams
.
mTaskQueue
)
{
}
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
bool
CanDecodeBatch
(
)
const
override
{
return
mDecoder
-
>
CanDecodeBatch
(
)
;
}
RefPtr
<
DecodePromise
>
DecodeBatch
(
nsTArray
<
RefPtr
<
MediaRawData
>
>
&
&
aSamples
)
override
{
return
mDecoder
-
>
DecodeBatch
(
std
:
:
move
(
aSamples
)
)
;
}
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
void
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
override
;
bool
SupportDecoderRecycling
(
)
const
override
;
ConversionRequired
NeedsConversion
(
)
const
override
;
private
:
RefPtr
<
DecodePromise
>
HandleDecodedResult
(
DecodePromise
:
:
ResolveOrRejectValue
&
&
aValue
MediaRawData
*
aRaw
)
;
RefPtr
<
MediaDataDecoder
>
mDecoder
;
RefPtr
<
TaskQueue
>
mTaskQueue
;
AutoTArray
<
Maybe
<
media
:
:
TimeInterval
>
2
>
mTrimmers
;
}
;
}
#
endif
