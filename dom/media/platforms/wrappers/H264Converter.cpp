#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
H264Converter
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
mp4_demuxer
/
AnnexB
.
h
"
#
include
"
mp4_demuxer
/
H264
.
h
"
namespace
mozilla
{
H264Converter
:
:
H264Converter
(
PlatformDecoderModule
*
aPDM
const
CreateDecoderParams
&
aParams
)
:
mPDM
(
aPDM
)
mOriginalConfig
(
aParams
.
VideoConfig
(
)
)
mCurrentConfig
(
aParams
.
VideoConfig
(
)
)
mKnowsCompositor
(
aParams
.
mKnowsCompositor
)
mImageContainer
(
aParams
.
mImageContainer
)
mTaskQueue
(
aParams
.
mTaskQueue
)
mDecoder
(
nullptr
)
mGMPCrashHelper
(
aParams
.
mCrashHelper
)
mLastError
(
NS_OK
)
mType
(
aParams
.
mType
)
mOnWaitingForKeyEvent
(
aParams
.
mOnWaitingForKeyEvent
)
mDecoderOptions
(
aParams
.
mOptions
)
{
CreateDecoder
(
aParams
.
mDiagnostics
)
;
}
H264Converter
:
:
~
H264Converter
(
)
{
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
H264Converter
:
:
Init
(
)
{
if
(
mDecoder
)
{
return
mDecoder
-
>
Init
(
)
;
}
return
MediaDataDecoder
:
:
InitPromise
:
:
CreateAndResolve
(
TrackType
:
:
kVideoTrack
__func__
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
H264Converter
:
:
Decode
(
MediaRawData
*
aSample
)
{
MOZ_RELEASE_ASSERT
(
!
mDecodePromiseRequest
.
Exists
(
)
&
&
!
mInitPromiseRequest
.
Exists
(
)
"
Can
'
t
request
a
new
decode
until
previous
one
completed
"
)
;
if
(
!
mp4_demuxer
:
:
AnnexB
:
:
ConvertSampleToAVCC
(
aSample
)
)
{
return
DecodePromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_OUT_OF_MEMORY
RESULT_DETAIL
(
"
ConvertSampleToAVCC
"
)
)
__func__
)
;
}
nsresult
rv
;
if
(
!
mDecoder
)
{
rv
=
CreateDecoderAndInit
(
aSample
)
;
if
(
rv
=
=
NS_ERROR_NOT_INITIALIZED
)
{
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
}
else
{
rv
=
CheckForSPSChange
(
aSample
)
;
}
if
(
rv
=
=
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
)
{
RefPtr
<
DecodePromise
>
p
=
mDecodePromise
.
Ensure
(
__func__
)
;
return
p
;
}
if
(
NS_FAILED
(
rv
)
)
{
return
DecodePromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Unable
to
create
H264
decoder
"
)
)
__func__
)
;
}
if
(
mNeedKeyframe
&
&
!
aSample
-
>
mKeyframe
)
{
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
if
(
!
mNeedAVCC
)
{
mNeedAVCC
=
Some
(
mDecoder
-
>
NeedsConversion
(
)
=
=
ConversionRequired
:
:
kNeedAVCC
)
;
}
if
(
!
*
mNeedAVCC
&
&
!
mp4_demuxer
:
:
AnnexB
:
:
ConvertSampleToAnnexB
(
aSample
mNeedKeyframe
)
)
{
return
DecodePromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_OUT_OF_MEMORY
RESULT_DETAIL
(
"
ConvertSampleToAnnexB
"
)
)
__func__
)
;
}
mNeedKeyframe
=
false
;
aSample
-
>
mExtraData
=
mCurrentConfig
.
mExtraData
;
return
mDecoder
-
>
Decode
(
aSample
)
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
H264Converter
:
:
Flush
(
)
{
mNeedKeyframe
=
true
;
if
(
mDecoder
)
{
return
mDecoder
-
>
Flush
(
)
;
}
return
FlushPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
H264Converter
:
:
Drain
(
)
{
mNeedKeyframe
=
true
;
if
(
mDecoder
)
{
return
mDecoder
-
>
Drain
(
)
;
}
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
RefPtr
<
ShutdownPromise
>
H264Converter
:
:
Shutdown
(
)
{
mInitPromiseRequest
.
DisconnectIfExists
(
)
;
mDecodePromiseRequest
.
DisconnectIfExists
(
)
;
mFlushRequest
.
DisconnectIfExists
(
)
;
mShutdownRequest
.
DisconnectIfExists
(
)
;
mPendingSample
=
nullptr
;
if
(
mShutdownPromise
)
{
return
mShutdownPromise
.
forget
(
)
;
}
if
(
mDecoder
)
{
RefPtr
<
MediaDataDecoder
>
decoder
=
mDecoder
.
forget
(
)
;
return
decoder
-
>
Shutdown
(
)
;
}
return
ShutdownPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
bool
H264Converter
:
:
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
if
(
mDecoder
)
{
return
mDecoder
-
>
IsHardwareAccelerated
(
aFailureReason
)
;
}
return
MediaDataDecoder
:
:
IsHardwareAccelerated
(
aFailureReason
)
;
}
void
H264Converter
:
:
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
if
(
mDecoder
)
{
mDecoder
-
>
SetSeekThreshold
(
aTime
)
;
}
else
{
MediaDataDecoder
:
:
SetSeekThreshold
(
aTime
)
;
}
}
nsresult
H264Converter
:
:
CreateDecoder
(
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
if
(
!
mp4_demuxer
:
:
AnnexB
:
:
HasSPS
(
mCurrentConfig
.
mExtraData
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
UpdateConfigFromExtraData
(
mCurrentConfig
.
mExtraData
)
;
mp4_demuxer
:
:
SPSData
spsdata
;
if
(
mp4_demuxer
:
:
H264
:
:
DecodeSPSFromExtraData
(
mCurrentConfig
.
mExtraData
spsdata
)
)
{
if
(
spsdata
.
profile_idc
=
=
244
|
|
spsdata
.
chroma_format_idc
=
=
PDMFactory
:
:
kYUV444
)
{
mLastError
=
NS_ERROR_FAILURE
;
if
(
aDiagnostics
)
{
aDiagnostics
-
>
SetVideoNotSupported
(
)
;
}
return
NS_ERROR_FAILURE
;
}
}
else
{
mLastError
=
NS_ERROR_FAILURE
;
return
NS_ERROR_FAILURE
;
}
mDecoder
=
mPDM
-
>
CreateVideoDecoder
(
{
mUseOriginalConfig
?
mOriginalConfig
:
mCurrentConfig
mTaskQueue
aDiagnostics
mImageContainer
mKnowsCompositor
mGMPCrashHelper
mType
mOnWaitingForKeyEvent
mDecoderOptions
}
)
;
if
(
!
mDecoder
)
{
mLastError
=
NS_ERROR_FAILURE
;
return
NS_ERROR_FAILURE
;
}
mUseOriginalConfig
=
false
;
mNeedKeyframe
=
true
;
return
NS_OK
;
}
nsresult
H264Converter
:
:
CreateDecoderAndInit
(
MediaRawData
*
aSample
)
{
RefPtr
<
MediaByteBuffer
>
extra_data
=
mp4_demuxer
:
:
AnnexB
:
:
ExtractExtraData
(
aSample
)
;
if
(
!
mp4_demuxer
:
:
AnnexB
:
:
HasSPS
(
extra_data
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
UpdateConfigFromExtraData
(
extra_data
)
;
nsresult
rv
=
CreateDecoder
(
nullptr
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mPendingSample
=
aSample
;
mDecoder
-
>
Init
(
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
this
&
H264Converter
:
:
OnDecoderInitDone
&
H264Converter
:
:
OnDecoderInitFailed
)
-
>
Track
(
mInitPromiseRequest
)
;
return
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
;
}
return
rv
;
}
void
H264Converter
:
:
OnDecoderInitDone
(
const
TrackType
aTrackType
)
{
mInitPromiseRequest
.
Complete
(
)
;
RefPtr
<
MediaRawData
>
sample
=
mPendingSample
.
forget
(
)
;
DecodeFirstSample
(
sample
)
;
}
void
H264Converter
:
:
OnDecoderInitFailed
(
const
MediaResult
&
aError
)
{
mInitPromiseRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Unable
to
initialize
H264
decoder
"
)
)
__func__
)
;
}
void
H264Converter
:
:
DecodeFirstSample
(
MediaRawData
*
aSample
)
{
if
(
mNeedKeyframe
&
&
!
aSample
-
>
mKeyframe
)
{
mDecodePromise
.
Resolve
(
DecodedData
(
)
__func__
)
;
return
;
}
mNeedKeyframe
=
false
;
mNeedAVCC
=
Some
(
mDecoder
-
>
NeedsConversion
(
)
=
=
ConversionRequired
:
:
kNeedAVCC
)
;
if
(
!
*
mNeedAVCC
&
&
!
mp4_demuxer
:
:
AnnexB
:
:
ConvertSampleToAnnexB
(
aSample
mNeedKeyframe
)
)
{
mDecodePromise
.
Reject
(
MediaResult
(
NS_ERROR_OUT_OF_MEMORY
RESULT_DETAIL
(
"
ConvertSampleToAnnexB
"
)
)
__func__
)
;
return
;
}
if
(
CanRecycleDecoder
(
)
)
{
mDecoder
-
>
ConfigurationChanged
(
mCurrentConfig
)
;
}
RefPtr
<
H264Converter
>
self
=
this
;
mDecoder
-
>
Decode
(
aSample
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
this
]
(
const
MediaDataDecoder
:
:
DecodedData
&
aResults
)
{
mDecodePromiseRequest
.
Complete
(
)
;
mDecodePromise
.
Resolve
(
aResults
__func__
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mDecodePromiseRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mDecodePromiseRequest
)
;
}
nsresult
H264Converter
:
:
CheckForSPSChange
(
MediaRawData
*
aSample
)
{
RefPtr
<
MediaByteBuffer
>
extra_data
=
mp4_demuxer
:
:
AnnexB
:
:
ExtractExtraData
(
aSample
)
;
if
(
!
mp4_demuxer
:
:
AnnexB
:
:
HasSPS
(
extra_data
)
|
|
mp4_demuxer
:
:
AnnexB
:
:
CompareExtraData
(
extra_data
mCurrentConfig
.
mExtraData
)
)
{
return
NS_OK
;
}
mPendingSample
=
aSample
;
if
(
CanRecycleDecoder
(
)
)
{
UpdateConfigFromExtraData
(
extra_data
)
;
RefPtr
<
H264Converter
>
self
=
this
;
mDecoder
-
>
Flush
(
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
this
]
(
)
{
mFlushRequest
.
Complete
(
)
;
DecodeFirstSample
(
mPendingSample
)
;
mPendingSample
=
nullptr
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mFlushRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mFlushRequest
)
;
mNeedKeyframe
=
true
;
return
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
;
}
RefPtr
<
H264Converter
>
self
=
this
;
mDecoder
-
>
Flush
(
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
this
]
(
)
{
mFlushRequest
.
Complete
(
)
;
mShutdownPromise
=
Shutdown
(
)
;
mShutdownPromise
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
this
]
(
)
{
mShutdownRequest
.
Complete
(
)
;
mShutdownPromise
=
nullptr
;
mNeedAVCC
.
reset
(
)
;
RefPtr
<
MediaRawData
>
sample
=
mPendingSample
.
forget
(
)
;
nsresult
rv
=
CreateDecoderAndInit
(
sample
)
;
if
(
rv
=
=
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
)
{
return
;
}
MOZ_ASSERT
(
NS_FAILED
(
rv
)
)
;
mDecodePromise
.
Reject
(
rv
__func__
)
;
return
;
}
[
]
{
MOZ_CRASH
(
"
Can
'
t
reach
here
'
"
)
;
}
)
-
>
Track
(
mShutdownRequest
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mFlushRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mFlushRequest
)
;
return
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
;
}
void
H264Converter
:
:
UpdateConfigFromExtraData
(
MediaByteBuffer
*
aExtraData
)
{
mp4_demuxer
:
:
SPSData
spsdata
;
if
(
mp4_demuxer
:
:
H264
:
:
DecodeSPSFromExtraData
(
aExtraData
spsdata
)
&
&
spsdata
.
pic_width
>
0
&
&
spsdata
.
pic_height
>
0
)
{
mp4_demuxer
:
:
H264
:
:
EnsureSPSIsSane
(
spsdata
)
;
mCurrentConfig
.
mImage
.
width
=
spsdata
.
pic_width
;
mCurrentConfig
.
mImage
.
height
=
spsdata
.
pic_height
;
mCurrentConfig
.
mDisplay
.
width
=
spsdata
.
display_width
;
mCurrentConfig
.
mDisplay
.
height
=
spsdata
.
display_height
;
}
mCurrentConfig
.
mExtraData
=
aExtraData
;
}
}
