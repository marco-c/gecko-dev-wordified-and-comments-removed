#
ifndef
mozilla_H264Converter_h
#
define
mozilla_H264Converter_h
#
include
"
PlatformDecoderModule
.
h
"
namespace
mozilla
{
class
H264Converter
:
public
MediaDataDecoder
{
public
:
H264Converter
(
PlatformDecoderModule
*
aPDM
const
VideoInfo
&
aConfig
layers
:
:
LayersBackend
aLayersBackend
layers
:
:
ImageContainer
*
aImageContainer
FlushableTaskQueue
*
aVideoTaskQueue
MediaDataDecoderCallback
*
aCallback
)
;
virtual
~
H264Converter
(
)
;
nsRefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
bool
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
override
;
static
bool
IsH264
(
const
TrackInfo
&
aConfig
)
;
private
:
nsresult
CreateDecoder
(
)
;
nsresult
CreateDecoderAndInit
(
MediaRawData
*
aSample
)
;
nsresult
CheckForSPSChange
(
MediaRawData
*
aSample
)
;
void
UpdateConfigFromExtraData
(
MediaByteBuffer
*
aExtraData
)
;
void
OnDecoderInitDone
(
const
TrackType
aTrackType
)
;
void
OnDecoderInitFailed
(
MediaDataDecoder
:
:
DecoderFailureReason
aReason
)
;
nsRefPtr
<
PlatformDecoderModule
>
mPDM
;
VideoInfo
mCurrentConfig
;
layers
:
:
LayersBackend
mLayersBackend
;
nsRefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
nsRefPtr
<
FlushableTaskQueue
>
mVideoTaskQueue
;
nsTArray
<
nsRefPtr
<
MediaRawData
>
>
mMediaRawSamples
;
MediaDataDecoderCallback
*
mCallback
;
nsRefPtr
<
MediaDataDecoder
>
mDecoder
;
MozPromiseRequestHolder
<
InitPromise
>
mInitPromiseRequest
;
bool
mNeedAVCC
;
nsresult
mLastError
;
}
;
}
#
endif
