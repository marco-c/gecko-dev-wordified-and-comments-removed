#
include
"
MediaChangeMonitor
.
h
"
#
include
"
AnnexB
.
h
"
#
include
"
DecoderDoctorDiagnostics
.
h
"
#
include
"
H264
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MP4Decoder
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
VPXDecoder
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
namespace
mozilla
{
class
H264ChangeMonitor
:
public
MediaChangeMonitor
:
:
CodecChangeMonitor
{
public
:
explicit
H264ChangeMonitor
(
const
VideoInfo
&
aInfo
)
:
mCurrentConfig
(
aInfo
)
{
if
(
CanBeInstantiated
(
)
)
{
UpdateConfigFromExtraData
(
aInfo
.
mExtraData
)
;
mPreviousExtraData
=
aInfo
.
mExtraData
;
}
}
bool
CanBeInstantiated
(
)
const
override
{
return
H264
:
:
HasSPS
(
mCurrentConfig
.
mExtraData
)
;
}
MediaResult
CheckForChange
(
MediaRawData
*
aSample
)
override
{
if
(
!
AnnexB
:
:
ConvertSampleToAVCC
(
aSample
)
)
{
return
MediaResult
(
NS_ERROR_OUT_OF_MEMORY
RESULT_DETAIL
(
"
ConvertSampleToAVCC
"
)
)
;
}
if
(
!
AnnexB
:
:
IsAVCC
(
aSample
)
)
{
return
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Invalid
H264
content
"
)
)
;
}
RefPtr
<
MediaByteBuffer
>
extra_data
=
aSample
-
>
mKeyframe
?
H264
:
:
ExtractExtraData
(
aSample
)
:
nullptr
;
if
(
!
H264
:
:
HasSPS
(
extra_data
)
&
&
!
H264
:
:
HasSPS
(
mCurrentConfig
.
mExtraData
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
if
(
!
H264
:
:
HasSPS
(
extra_data
)
)
{
if
(
!
H264
:
:
HasSPS
(
aSample
-
>
mExtraData
)
|
|
H264
:
:
CompareExtraData
(
aSample
-
>
mExtraData
mPreviousExtraData
)
)
{
return
NS_OK
;
}
extra_data
=
aSample
-
>
mExtraData
;
}
else
if
(
H264
:
:
CompareExtraData
(
extra_data
mCurrentConfig
.
mExtraData
)
)
{
return
NS_OK
;
}
mPreviousExtraData
=
aSample
-
>
mExtraData
;
UpdateConfigFromExtraData
(
extra_data
)
;
mNeedKeyframe
=
true
;
return
NS_ERROR_DOM_MEDIA_NEED_NEW_DECODER
;
}
const
TrackInfo
&
Config
(
)
const
override
{
return
mCurrentConfig
;
}
MediaResult
PrepareSample
(
MediaDataDecoder
:
:
ConversionRequired
aConversion
MediaRawData
*
aSample
)
override
{
if
(
aConversion
=
=
MediaDataDecoder
:
:
ConversionRequired
:
:
kNeedAnnexB
)
{
auto
res
=
AnnexB
:
:
ConvertSampleToAnnexB
(
aSample
mNeedKeyframe
)
;
if
(
res
.
isErr
(
)
)
{
return
MediaResult
(
res
.
unwrapErr
(
)
RESULT_DETAIL
(
"
ConvertSampleToAnnexB
"
)
)
;
}
}
if
(
aSample
-
>
mKeyframe
&
&
mNeedKeyframe
)
{
mNeedKeyframe
=
false
;
}
aSample
-
>
mExtraData
=
mCurrentConfig
.
mExtraData
;
aSample
-
>
mTrackInfo
=
mTrackInfo
;
return
NS_OK
;
}
private
:
void
UpdateConfigFromExtraData
(
MediaByteBuffer
*
aExtraData
)
{
SPSData
spsdata
;
if
(
H264
:
:
DecodeSPSFromExtraData
(
aExtraData
spsdata
)
&
&
spsdata
.
pic_width
>
0
&
&
spsdata
.
pic_height
>
0
)
{
H264
:
:
EnsureSPSIsSane
(
spsdata
)
;
mCurrentConfig
.
mImage
.
width
=
spsdata
.
pic_width
;
mCurrentConfig
.
mImage
.
height
=
spsdata
.
pic_height
;
mCurrentConfig
.
mDisplay
.
width
=
spsdata
.
display_width
;
mCurrentConfig
.
mDisplay
.
height
=
spsdata
.
display_height
;
}
mCurrentConfig
.
mExtraData
=
aExtraData
;
mTrackInfo
=
new
TrackInfoSharedPtr
(
mCurrentConfig
mStreamID
+
+
)
;
}
VideoInfo
mCurrentConfig
;
bool
mNeedKeyframe
=
true
;
uint32_t
mStreamID
=
0
;
RefPtr
<
TrackInfoSharedPtr
>
mTrackInfo
;
RefPtr
<
MediaByteBuffer
>
mPreviousExtraData
;
}
;
class
VPXChangeMonitor
:
public
MediaChangeMonitor
:
:
CodecChangeMonitor
{
public
:
explicit
VPXChangeMonitor
(
const
VideoInfo
&
aInfo
)
:
mCurrentConfig
(
aInfo
)
mCodec
(
VPXDecoder
:
:
IsVP8
(
aInfo
.
mMimeType
)
?
VPXDecoder
:
:
Codec
:
:
VP8
:
VPXDecoder
:
:
Codec
:
:
VP9
)
{
}
bool
CanBeInstantiated
(
)
const
override
{
return
true
;
}
MediaResult
CheckForChange
(
MediaRawData
*
aSample
)
override
{
if
(
aSample
-
>
mCrypto
.
mValid
)
{
return
NS_OK
;
}
if
(
!
aSample
-
>
mKeyframe
)
{
return
NS_OK
;
}
auto
dataSpan
=
MakeSpan
<
const
uint8_t
>
(
aSample
-
>
Data
(
)
aSample
-
>
Size
(
)
)
;
auto
dimensions
=
VPXDecoder
:
:
GetFrameSize
(
dataSpan
mCodec
)
;
int
profile
=
mCodec
=
=
VPXDecoder
:
:
Codec
:
:
VP9
?
VPXDecoder
:
:
GetVP9Profile
(
dataSpan
)
:
0
;
if
(
!
mSize
)
{
mSize
=
Some
(
dimensions
)
;
mProfile
=
Some
(
profile
)
;
return
NS_OK
;
}
if
(
mSize
.
ref
(
)
=
=
dimensions
&
&
mProfile
.
ref
(
)
=
=
profile
)
{
return
NS_OK
;
}
mSize
=
Some
(
dimensions
)
;
mProfile
=
Some
(
profile
)
;
mCurrentConfig
.
mDisplay
=
dimensions
;
return
NS_ERROR_DOM_MEDIA_NEED_NEW_DECODER
;
}
const
TrackInfo
&
Config
(
)
const
override
{
return
mCurrentConfig
;
}
MediaResult
PrepareSample
(
MediaDataDecoder
:
:
ConversionRequired
aConversion
MediaRawData
*
aSample
)
override
{
return
NS_OK
;
}
private
:
VideoInfo
mCurrentConfig
;
const
VPXDecoder
:
:
Codec
mCodec
;
Maybe
<
gfx
:
:
IntSize
>
mSize
;
Maybe
<
int
>
mProfile
;
}
;
MediaChangeMonitor
:
:
MediaChangeMonitor
(
PlatformDecoderModule
*
aPDM
const
CreateDecoderParams
&
aParams
)
:
mPDM
(
aPDM
)
mCurrentConfig
(
aParams
.
VideoConfig
(
)
)
mKnowsCompositor
(
aParams
.
mKnowsCompositor
)
mImageContainer
(
aParams
.
mImageContainer
)
mTaskQueue
(
aParams
.
mTaskQueue
)
mDecoder
(
nullptr
)
mGMPCrashHelper
(
aParams
.
mCrashHelper
)
mLastError
(
NS_OK
)
mType
(
aParams
.
mType
)
mOnWaitingForKeyEvent
(
aParams
.
mOnWaitingForKeyEvent
)
mDecoderOptions
(
aParams
.
mOptions
)
mRate
(
aParams
.
mRate
)
{
mInConstructor
=
true
;
if
(
VPXDecoder
:
:
IsVPX
(
mCurrentConfig
.
mMimeType
)
)
{
mChangeMonitor
=
MakeUnique
<
VPXChangeMonitor
>
(
mCurrentConfig
)
;
}
else
{
MOZ_ASSERT
(
MP4Decoder
:
:
IsH264
(
mCurrentConfig
.
mMimeType
)
)
;
mChangeMonitor
=
MakeUnique
<
H264ChangeMonitor
>
(
mCurrentConfig
)
;
}
mLastError
=
CreateDecoder
(
aParams
.
mDiagnostics
)
;
mInConstructor
=
false
;
}
MediaChangeMonitor
:
:
~
MediaChangeMonitor
(
)
{
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
MediaChangeMonitor
:
:
Init
(
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
]
(
)
-
>
RefPtr
<
InitPromise
>
{
if
(
mDecoder
)
{
RefPtr
<
InitPromise
>
p
=
mInitPromise
.
Ensure
(
__func__
)
;
mDecoder
-
>
Init
(
)
-
>
Then
(
mTaskQueue
__func__
[
self
this
]
(
InitPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
mInitPromiseRequest
.
Complete
(
)
;
if
(
aValue
.
IsResolve
(
)
)
{
mConversionRequired
=
Some
(
mDecoder
-
>
NeedsConversion
(
)
)
;
mCanRecycleDecoder
=
Some
(
CanRecycleDecoder
(
)
)
;
}
return
mInitPromise
.
ResolveOrRejectIfExists
(
std
:
:
move
(
aValue
)
__func__
)
;
}
)
-
>
Track
(
mInitPromiseRequest
)
;
return
p
;
}
return
MediaDataDecoder
:
:
InitPromise
:
:
CreateAndResolve
(
TrackType
:
:
kVideoTrack
__func__
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
MediaChangeMonitor
:
:
Decode
(
MediaRawData
*
aSample
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
RefPtr
<
MediaRawData
>
sample
=
aSample
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
sample
]
(
)
{
MOZ_RELEASE_ASSERT
(
mFlushPromise
.
IsEmpty
(
)
"
Flush
operatin
didn
'
t
complete
"
)
;
MOZ_RELEASE_ASSERT
(
!
mDecodePromiseRequest
.
Exists
(
)
&
&
!
mInitPromiseRequest
.
Exists
(
)
"
Can
'
t
request
a
new
decode
until
previous
one
completed
"
)
;
MediaResult
rv
=
CheckForChange
(
sample
)
;
if
(
rv
=
=
NS_ERROR_NOT_INITIALIZED
)
{
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
if
(
rv
=
=
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
)
{
RefPtr
<
DecodePromise
>
p
=
mDecodePromise
.
Ensure
(
__func__
)
;
return
p
;
}
if
(
NS_FAILED
(
rv
)
)
{
return
DecodePromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
if
(
mNeedKeyframe
&
&
!
sample
-
>
mKeyframe
)
{
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
rv
=
mChangeMonitor
-
>
PrepareSample
(
*
mConversionRequired
sample
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
DecodePromise
:
:
CreateAndReject
(
rv
__func__
)
;
}
mNeedKeyframe
=
false
;
return
mDecoder
-
>
Decode
(
sample
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
MediaChangeMonitor
:
:
Flush
(
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
]
(
)
{
mDecodePromiseRequest
.
DisconnectIfExists
(
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mNeedKeyframe
=
true
;
mPendingFrames
.
Clear
(
)
;
MOZ_RELEASE_ASSERT
(
mFlushPromise
.
IsEmpty
(
)
"
Previous
flush
didn
'
t
complete
"
)
;
if
(
mDrainRequest
.
Exists
(
)
|
|
mFlushRequest
.
Exists
(
)
|
|
mShutdownRequest
.
Exists
(
)
|
|
mInitPromiseRequest
.
Exists
(
)
)
{
RefPtr
<
FlushPromise
>
p
=
mFlushPromise
.
Ensure
(
__func__
)
;
return
p
;
}
if
(
mDecoder
)
{
return
mDecoder
-
>
Flush
(
)
;
}
return
FlushPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
MediaChangeMonitor
:
:
Drain
(
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
]
(
)
{
MOZ_RELEASE_ASSERT
(
!
mDrainRequest
.
Exists
(
)
)
;
mNeedKeyframe
=
true
;
if
(
mDecoder
)
{
return
mDecoder
-
>
Drain
(
)
;
}
return
DecodePromise
:
:
CreateAndResolve
(
DecodedData
(
)
__func__
)
;
}
)
;
}
RefPtr
<
ShutdownPromise
>
MediaChangeMonitor
:
:
Shutdown
(
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
]
(
)
{
mInitPromiseRequest
.
DisconnectIfExists
(
)
;
mInitPromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mDecodePromiseRequest
.
DisconnectIfExists
(
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mDrainRequest
.
DisconnectIfExists
(
)
;
mFlushRequest
.
DisconnectIfExists
(
)
;
mFlushPromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mShutdownRequest
.
DisconnectIfExists
(
)
;
if
(
mShutdownPromise
)
{
RefPtr
<
ShutdownPromise
>
p
=
mShutdownPromise
.
forget
(
)
;
return
p
;
}
return
ShutdownDecoder
(
)
;
}
)
;
}
RefPtr
<
ShutdownPromise
>
MediaChangeMonitor
:
:
ShutdownDecoder
(
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
return
InvokeAsync
(
mTaskQueue
__func__
[
self
this
]
(
)
{
mConversionRequired
.
reset
(
)
;
if
(
mDecoder
)
{
RefPtr
<
MediaDataDecoder
>
decoder
=
mDecoder
.
forget
(
)
;
return
decoder
-
>
Shutdown
(
)
;
}
return
ShutdownPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
bool
MediaChangeMonitor
:
:
IsHardwareAccelerated
(
nsACString
&
aFailureReason
)
const
{
if
(
mDecoder
)
{
return
mDecoder
-
>
IsHardwareAccelerated
(
aFailureReason
)
;
}
#
ifdef
MOZ_APPLEMEDIA
return
true
;
#
else
return
MediaDataDecoder
:
:
IsHardwareAccelerated
(
aFailureReason
)
;
#
endif
}
void
MediaChangeMonitor
:
:
SetSeekThreshold
(
const
media
:
:
TimeUnit
&
aTime
)
{
if
(
mDecoder
)
{
mDecoder
-
>
SetSeekThreshold
(
aTime
)
;
}
else
{
MediaDataDecoder
:
:
SetSeekThreshold
(
aTime
)
;
}
}
MediaResult
MediaChangeMonitor
:
:
CreateDecoder
(
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
MOZ_ASSERT
(
mInConstructor
|
|
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
!
mChangeMonitor
-
>
CanBeInstantiated
(
)
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
mCurrentConfig
=
*
mChangeMonitor
-
>
Config
(
)
.
GetAsVideoInfo
(
)
;
MediaResult
error
=
NS_OK
;
mDecoder
=
mPDM
-
>
CreateVideoDecoder
(
{
mCurrentConfig
mTaskQueue
aDiagnostics
mImageContainer
mKnowsCompositor
mGMPCrashHelper
mType
mOnWaitingForKeyEvent
mDecoderOptions
mRate
&
error
}
)
;
if
(
!
mDecoder
)
{
if
(
NS_FAILED
(
error
)
)
{
return
error
;
}
else
{
return
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Unable
to
create
decoder
"
)
)
;
}
}
DDLINKCHILD
(
"
decoder
"
mDecoder
.
get
(
)
)
;
mNeedKeyframe
=
true
;
return
NS_OK
;
}
MediaResult
MediaChangeMonitor
:
:
CreateDecoderAndInit
(
MediaRawData
*
aSample
)
{
AssertOnTaskQueue
(
)
;
MediaResult
rv
=
mChangeMonitor
-
>
CheckForChange
(
aSample
)
;
if
(
!
NS_SUCCEEDED
(
rv
)
&
&
rv
!
=
NS_ERROR_DOM_MEDIA_NEED_NEW_DECODER
)
{
return
rv
;
}
rv
=
CreateDecoder
(
nullptr
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
RefPtr
<
MediaRawData
>
sample
=
aSample
;
mDecoder
-
>
Init
(
)
-
>
Then
(
mTaskQueue
__func__
[
self
sample
this
]
(
const
TrackType
aTrackType
)
{
mInitPromiseRequest
.
Complete
(
)
;
mConversionRequired
=
Some
(
mDecoder
-
>
NeedsConversion
(
)
)
;
mCanRecycleDecoder
=
Some
(
CanRecycleDecoder
(
)
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Resolve
(
true
__func__
)
;
return
;
}
DecodeFirstSample
(
sample
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mInitPromiseRequest
.
Complete
(
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Reject
(
aError
__func__
)
;
return
;
}
mDecodePromise
.
Reject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Unable
to
initialize
H264
decoder
"
)
)
__func__
)
;
}
)
-
>
Track
(
mInitPromiseRequest
)
;
return
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
;
}
return
rv
;
}
bool
MediaChangeMonitor
:
:
CanRecycleDecoder
(
)
const
{
AssertOnTaskQueue
(
)
;
MOZ_ASSERT
(
mDecoder
)
;
return
StaticPrefs
:
:
MediaDecoderRecycleEnabled
(
)
&
&
mDecoder
-
>
SupportDecoderRecycling
(
)
;
}
void
MediaChangeMonitor
:
:
DecodeFirstSample
(
MediaRawData
*
aSample
)
{
AssertOnTaskQueue
(
)
;
if
(
mNeedKeyframe
&
&
!
aSample
-
>
mKeyframe
)
{
mDecodePromise
.
Resolve
(
std
:
:
move
(
mPendingFrames
)
__func__
)
;
mPendingFrames
=
DecodedData
(
)
;
return
;
}
MediaResult
rv
=
mChangeMonitor
-
>
PrepareSample
(
*
mConversionRequired
aSample
)
;
if
(
NS_FAILED
(
rv
)
)
{
mDecodePromise
.
Reject
(
rv
__func__
)
;
return
;
}
mNeedKeyframe
=
false
;
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
mDecoder
-
>
Decode
(
aSample
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
this
]
(
MediaDataDecoder
:
:
DecodedData
&
&
aResults
)
{
mDecodePromiseRequest
.
Complete
(
)
;
mPendingFrames
.
AppendElements
(
std
:
:
move
(
aResults
)
)
;
mDecodePromise
.
Resolve
(
std
:
:
move
(
mPendingFrames
)
__func__
)
;
mPendingFrames
=
DecodedData
(
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mDecodePromiseRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mDecodePromiseRequest
)
;
}
MediaResult
MediaChangeMonitor
:
:
CheckForChange
(
MediaRawData
*
aSample
)
{
AssertOnTaskQueue
(
)
;
if
(
!
mDecoder
)
{
return
CreateDecoderAndInit
(
aSample
)
;
}
MediaResult
rv
=
mChangeMonitor
-
>
CheckForChange
(
aSample
)
;
if
(
NS_SUCCEEDED
(
rv
)
|
|
rv
!
=
NS_ERROR_DOM_MEDIA_NEED_NEW_DECODER
)
{
return
rv
;
}
if
(
*
mCanRecycleDecoder
)
{
mNeedKeyframe
=
true
;
return
NS_OK
;
}
DrainThenFlushDecoder
(
aSample
)
;
return
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
;
}
void
MediaChangeMonitor
:
:
DrainThenFlushDecoder
(
MediaRawData
*
aPendingSample
)
{
AssertOnTaskQueue
(
)
;
RefPtr
<
MediaRawData
>
sample
=
aPendingSample
;
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
mDecoder
-
>
Drain
(
)
-
>
Then
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
__func__
[
self
sample
this
]
(
MediaDataDecoder
:
:
DecodedData
&
&
aResults
)
{
mDrainRequest
.
Complete
(
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Resolve
(
true
__func__
)
;
return
;
}
if
(
aResults
.
Length
(
)
>
0
)
{
mPendingFrames
.
AppendElements
(
std
:
:
move
(
aResults
)
)
;
DrainThenFlushDecoder
(
sample
)
;
return
;
}
FlushThenShutdownDecoder
(
sample
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mDrainRequest
.
Complete
(
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Reject
(
aError
__func__
)
;
return
;
}
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mDrainRequest
)
;
}
void
MediaChangeMonitor
:
:
FlushThenShutdownDecoder
(
MediaRawData
*
aPendingSample
)
{
AssertOnTaskQueue
(
)
;
RefPtr
<
MediaRawData
>
sample
=
aPendingSample
;
RefPtr
<
MediaChangeMonitor
>
self
=
this
;
mDecoder
-
>
Flush
(
)
-
>
Then
(
mTaskQueue
__func__
[
self
sample
this
]
(
)
{
mFlushRequest
.
Complete
(
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Resolve
(
true
__func__
)
;
return
;
}
mShutdownPromise
=
ShutdownDecoder
(
)
;
mShutdownPromise
-
>
Then
(
mTaskQueue
__func__
[
self
sample
this
]
(
)
{
mShutdownRequest
.
Complete
(
)
;
mShutdownPromise
=
nullptr
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Resolve
(
true
__func__
)
;
return
;
}
MediaResult
rv
=
CreateDecoderAndInit
(
sample
)
;
if
(
rv
=
=
NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER
)
{
return
;
}
MOZ_ASSERT
(
NS_FAILED
(
rv
)
)
;
mDecodePromise
.
Reject
(
rv
__func__
)
;
return
;
}
[
]
{
MOZ_CRASH
(
"
Can
'
t
reach
here
'
"
)
;
}
)
-
>
Track
(
mShutdownRequest
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mFlushRequest
.
Complete
(
)
;
if
(
!
mFlushPromise
.
IsEmpty
(
)
)
{
mFlushPromise
.
Reject
(
aError
__func__
)
;
return
;
}
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mFlushRequest
)
;
}
}
