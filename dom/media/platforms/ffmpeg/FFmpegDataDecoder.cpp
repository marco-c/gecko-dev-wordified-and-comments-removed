#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
<
string
.
h
>
#
ifdef
__GNUC__
#
include
<
unistd
.
h
>
#
endif
#
include
"
FFmpegLog
.
h
"
#
include
"
FFmpegDataDecoder
.
h
"
#
include
"
prsystem
.
h
"
namespace
mozilla
{
StaticMutex
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
sMonitor
;
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
FFmpegDataDecoder
(
FFmpegLibWrapper
*
aLib
FlushableTaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
AVCodecID
aCodecID
)
:
mLib
(
aLib
)
mTaskQueue
(
aTaskQueue
)
mCallback
(
aCallback
)
mCodecContext
(
nullptr
)
mFrame
(
NULL
)
mExtraData
(
nullptr
)
mCodecID
(
aCodecID
)
{
MOZ_ASSERT
(
aLib
)
;
MOZ_COUNT_CTOR
(
FFmpegDataDecoder
)
;
}
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
~
FFmpegDataDecoder
(
)
{
MOZ_COUNT_DTOR
(
FFmpegDataDecoder
)
;
}
nsresult
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
InitDecoder
(
)
{
FFMPEG_LOG
(
"
Initialising
FFmpeg
decoder
.
"
)
;
AVCodec
*
codec
=
FindAVCodec
(
mLib
mCodecID
)
;
if
(
!
codec
)
{
NS_WARNING
(
"
Couldn
'
t
find
ffmpeg
decoder
"
)
;
return
NS_ERROR_FAILURE
;
}
StaticMutexAutoLock
mon
(
sMonitor
)
;
if
(
!
(
mCodecContext
=
mLib
-
>
avcodec_alloc_context3
(
codec
)
)
)
{
NS_WARNING
(
"
Couldn
'
t
init
ffmpeg
context
"
)
;
return
NS_ERROR_FAILURE
;
}
mCodecContext
-
>
opaque
=
this
;
InitCodecContext
(
)
;
if
(
mExtraData
)
{
mCodecContext
-
>
extradata_size
=
mExtraData
-
>
Length
(
)
;
mExtraData
-
>
AppendElements
(
FF_INPUT_BUFFER_PADDING_SIZE
)
;
mCodecContext
-
>
extradata
=
mExtraData
-
>
Elements
(
)
;
}
else
{
mCodecContext
-
>
extradata_size
=
0
;
}
if
(
codec
-
>
capabilities
&
CODEC_CAP_DR1
)
{
mCodecContext
-
>
flags
|
=
CODEC_FLAG_EMU_EDGE
;
}
if
(
mLib
-
>
avcodec_open2
(
mCodecContext
codec
nullptr
)
<
0
)
{
NS_WARNING
(
"
Couldn
'
t
initialise
ffmpeg
decoder
"
)
;
mLib
-
>
avcodec_close
(
mCodecContext
)
;
mLib
-
>
av_freep
(
&
mCodecContext
)
;
return
NS_ERROR_FAILURE
;
}
if
(
mCodecContext
-
>
codec_type
=
=
AVMEDIA_TYPE_AUDIO
&
&
mCodecContext
-
>
sample_fmt
!
=
AV_SAMPLE_FMT_FLT
&
&
mCodecContext
-
>
sample_fmt
!
=
AV_SAMPLE_FMT_FLTP
&
&
mCodecContext
-
>
sample_fmt
!
=
AV_SAMPLE_FMT_S16
&
&
mCodecContext
-
>
sample_fmt
!
=
AV_SAMPLE_FMT_S16P
)
{
NS_WARNING
(
"
FFmpeg
audio
decoder
outputs
unsupported
audio
format
.
"
)
;
return
NS_ERROR_FAILURE
;
}
FFMPEG_LOG
(
"
FFmpeg
init
successful
.
"
)
;
return
NS_OK
;
}
nsresult
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
Shutdown
(
)
{
if
(
mTaskQueue
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
(
this
&
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
ProcessShutdown
)
;
mTaskQueue
-
>
Dispatch
(
runnable
.
forget
(
)
)
;
}
else
{
ProcessShutdown
(
)
;
}
return
NS_OK
;
}
nsresult
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
Flush
(
)
{
MOZ_ASSERT
(
mCallback
-
>
OnReaderTaskQueue
(
)
)
;
mTaskQueue
-
>
Flush
(
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
(
this
&
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
ProcessFlush
)
;
SyncRunnable
:
:
DispatchToThread
(
mTaskQueue
runnable
)
;
return
NS_OK
;
}
nsresult
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
Drain
(
)
{
MOZ_ASSERT
(
mCallback
-
>
OnReaderTaskQueue
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NewRunnableMethod
(
this
&
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
ProcessDrain
)
;
mTaskQueue
-
>
Dispatch
(
runnable
.
forget
(
)
)
;
return
NS_OK
;
}
void
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
ProcessFlush
(
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
mCodecContext
)
{
mLib
-
>
avcodec_flush_buffers
(
mCodecContext
)
;
}
}
void
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
ProcessShutdown
(
)
{
StaticMutexAutoLock
mon
(
sMonitor
)
;
if
(
mCodecContext
)
{
mLib
-
>
avcodec_close
(
mCodecContext
)
;
mLib
-
>
av_freep
(
&
mCodecContext
)
;
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
55
mLib
-
>
av_frame_free
(
&
mFrame
)
;
#
elif
LIBAVCODEC_VERSION_MAJOR
=
=
54
mLib
-
>
avcodec_free_frame
(
&
mFrame
)
;
#
else
delete
mFrame
;
mFrame
=
nullptr
;
#
endif
}
}
AVFrame
*
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
PrepareFrame
(
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
55
if
(
mFrame
)
{
mLib
-
>
av_frame_unref
(
mFrame
)
;
}
else
{
mFrame
=
mLib
-
>
av_frame_alloc
(
)
;
}
#
elif
LIBAVCODEC_VERSION_MAJOR
=
=
54
if
(
mFrame
)
{
mLib
-
>
avcodec_get_frame_defaults
(
mFrame
)
;
}
else
{
mFrame
=
mLib
-
>
avcodec_alloc_frame
(
)
;
}
#
else
delete
mFrame
;
mFrame
=
new
AVFrame
;
mLib
-
>
avcodec_get_frame_defaults
(
mFrame
)
;
#
endif
return
mFrame
;
}
AVCodec
*
FFmpegDataDecoder
<
LIBAV_VER
>
:
:
FindAVCodec
(
FFmpegLibWrapper
*
aLib
AVCodecID
aCodec
)
{
return
aLib
-
>
avcodec_find_decoder
(
aCodec
)
;
}
}
