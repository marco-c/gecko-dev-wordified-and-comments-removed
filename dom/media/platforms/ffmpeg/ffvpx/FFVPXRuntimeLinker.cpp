#
include
"
FFVPXRuntimeLinker
.
h
"
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
FFmpegLog
.
h
"
#
include
"
BinaryPath
.
h
"
#
include
"
mozilla
/
FileUtils
.
h
"
#
include
"
nsLocalFile
.
h
"
#
include
"
prmem
.
h
"
#
include
"
prlink
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
endif
namespace
mozilla
{
template
<
int
V
>
class
FFmpegDecoderModule
{
public
:
static
already_AddRefed
<
PlatformDecoderModule
>
Create
(
FFmpegLibWrapper
*
)
;
}
;
template
<
int
V
>
class
FFmpegEncoderModule
{
public
:
static
already_AddRefed
<
PlatformEncoderModule
>
Create
(
FFmpegLibWrapper
*
)
;
}
;
static
FFmpegLibWrapper
sFFVPXLib
;
StaticMutex
FFVPXRuntimeLinker
:
:
sMutex
;
FFVPXRuntimeLinker
:
:
LinkStatus
FFVPXRuntimeLinker
:
:
sLinkStatus
=
LinkStatus_INIT
;
static
PRLibrary
*
MozAVLink
(
nsIFile
*
aFile
)
{
PRLibSpec
lspec
;
PathString
path
=
aFile
-
>
NativePath
(
)
;
#
ifdef
XP_WIN
lspec
.
type
=
PR_LibSpec_PathnameU
;
lspec
.
value
.
pathname_u
=
path
.
get
(
)
;
#
else
#
if
defined
(
XP_OPENBSD
)
nsAutoCString
leaf
;
nsresult
rv
=
aFile
-
>
GetNativeLeafName
(
leaf
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
path
=
PathString
(
leaf
)
;
}
#
endif
lspec
.
type
=
PR_LibSpec_Pathname
;
lspec
.
value
.
pathname
=
path
.
get
(
)
;
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
PRLibrary
*
lib
=
PR_LoadLibraryWithFlags
(
lspec
PR_LD_NOW
|
PR_LD_GLOBAL
)
;
#
else
PRLibrary
*
lib
=
PR_LoadLibraryWithFlags
(
lspec
PR_LD_NOW
|
PR_LD_LOCAL
)
;
#
endif
if
(
!
lib
)
{
FFMPEGV_LOG
(
"
unable
to
load
library
%
s
"
aFile
-
>
HumanReadablePath
(
)
.
get
(
)
)
;
}
return
lib
;
}
bool
FFVPXRuntimeLinker
:
:
Init
(
)
{
StaticMutexAutoLock
lock
(
sMutex
)
;
if
(
sLinkStatus
)
{
return
sLinkStatus
=
=
LinkStatus_SUCCEEDED
;
}
sLinkStatus
=
LinkStatus_FAILED
;
#
ifdef
MOZ_WIDGET_GTK
sFFVPXLib
.
LinkVAAPILibs
(
)
;
#
endif
nsCOMPtr
<
nsIFile
>
libFile
;
if
(
NS_FAILED
(
mozilla
:
:
BinaryPath
:
:
GetFile
(
getter_AddRefs
(
libFile
)
)
)
)
{
return
false
;
}
#
ifdef
XP_DARWIN
if
(
!
XRE_IsParentProcess
(
)
&
&
(
XRE_GetChildProcBinPathType
(
XRE_GetProcessType
(
)
)
=
=
BinPathType
:
:
PluginContainer
)
)
{
nsCOMPtr
<
nsIFile
>
parentDir1
parentDir2
;
if
(
NS_FAILED
(
libFile
-
>
GetParent
(
getter_AddRefs
(
parentDir1
)
)
)
)
{
return
false
;
}
if
(
NS_FAILED
(
parentDir1
-
>
GetParent
(
getter_AddRefs
(
parentDir2
)
)
)
)
{
return
false
;
}
if
(
NS_FAILED
(
parentDir2
-
>
GetParent
(
getter_AddRefs
(
libFile
)
)
)
)
{
return
false
;
}
}
#
endif
if
(
NS_FAILED
(
libFile
-
>
SetNativeLeafName
(
MOZ_DLL_PREFIX
"
mozavutil
"
MOZ_DLL_SUFFIX
"
"
_ns
)
)
)
{
return
false
;
}
sFFVPXLib
.
mAVUtilLib
=
MozAVLink
(
libFile
)
;
if
(
NS_FAILED
(
libFile
-
>
SetNativeLeafName
(
MOZ_DLL_PREFIX
"
mozavcodec
"
MOZ_DLL_SUFFIX
"
"
_ns
)
)
)
{
return
false
;
}
sFFVPXLib
.
mAVCodecLib
=
MozAVLink
(
libFile
)
;
FFmpegLibWrapper
:
:
LinkResult
res
=
sFFVPXLib
.
Link
(
)
;
FFMPEGP_LOG
(
"
Link
result
:
%
s
"
FFmpegLibWrapper
:
:
LinkResultToString
(
res
)
)
;
if
(
res
=
=
FFmpegLibWrapper
:
:
LinkResult
:
:
Success
)
{
sLinkStatus
=
LinkStatus_SUCCEEDED
;
return
true
;
}
return
false
;
}
already_AddRefed
<
PlatformDecoderModule
>
FFVPXRuntimeLinker
:
:
CreateDecoder
(
)
{
if
(
!
Init
(
)
)
{
return
nullptr
;
}
return
FFmpegDecoderModule
<
FFVPX_VERSION
>
:
:
Create
(
&
sFFVPXLib
)
;
}
already_AddRefed
<
PlatformEncoderModule
>
FFVPXRuntimeLinker
:
:
CreateEncoder
(
)
{
if
(
!
Init
(
)
)
{
return
nullptr
;
}
return
FFmpegEncoderModule
<
FFVPX_VERSION
>
:
:
Create
(
&
sFFVPXLib
)
;
}
void
FFVPXRuntimeLinker
:
:
GetRDFTFuncs
(
FFmpegRDFTFuncs
*
aOutFuncs
)
{
[
]
(
)
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
MOZ_ASSERT
(
sLinkStatus
!
=
LinkStatus_INIT
)
;
}
(
)
;
if
(
sFFVPXLib
.
av_rdft_init
&
&
sFFVPXLib
.
av_rdft_calc
&
&
sFFVPXLib
.
av_rdft_end
)
{
aOutFuncs
-
>
init
=
sFFVPXLib
.
av_rdft_init
;
aOutFuncs
-
>
calc
=
sFFVPXLib
.
av_rdft_calc
;
aOutFuncs
-
>
end
=
sFFVPXLib
.
av_rdft_end
;
}
else
{
NS_WARNING
(
"
RDFT
functions
expected
but
not
found
"
)
;
*
aOutFuncs
=
FFmpegRDFTFuncs
(
)
;
}
}
}
