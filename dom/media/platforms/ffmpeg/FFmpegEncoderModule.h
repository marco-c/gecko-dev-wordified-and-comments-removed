#
ifndef
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGENCODERMODULE_H_
#
define
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGENCODERMODULE_H_
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
namespace
mozilla
{
extern
LazyLogModule
sPEMLog
;
template
<
int
V
>
class
FFmpegEncoderModule
final
:
public
PlatformEncoderModule
{
public
:
virtual
~
FFmpegEncoderModule
(
)
=
default
;
static
void
Init
(
FFmpegLibWrapper
*
aLib
)
;
static
already_AddRefed
<
PlatformEncoderModule
>
Create
(
FFmpegLibWrapper
*
aLib
)
{
RefPtr
<
PlatformEncoderModule
>
pem
=
new
FFmpegEncoderModule
(
aLib
)
;
return
pem
.
forget
(
)
;
}
media
:
:
EncodeSupportSet
Supports
(
const
EncoderConfig
&
aConfig
)
const
override
;
media
:
:
EncodeSupportSet
SupportsCodec
(
CodecType
aCodec
)
const
override
;
const
char
*
GetName
(
)
const
override
{
return
"
FFmpeg
Encoder
Module
"
;
}
already_AddRefed
<
MediaDataEncoder
>
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
override
;
already_AddRefed
<
MediaDataEncoder
>
CreateAudioEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
override
;
protected
:
explicit
FFmpegEncoderModule
(
FFmpegLibWrapper
*
aLib
)
:
mLib
(
aLib
)
{
MOZ_ASSERT
(
mLib
)
;
}
private
:
const
FFmpegLibWrapper
*
mLib
;
MOZ_RUNINIT
static
inline
nsTArray
<
uint32_t
>
sSupportedHWCodecs
;
}
;
}
#
endif
