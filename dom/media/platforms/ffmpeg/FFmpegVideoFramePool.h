#
ifndef
__FFmpegVideoFramePool_h__
#
define
__FFmpegVideoFramePool_h__
#
include
"
FFmpegVideoDecoder
.
h
"
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
mozilla
/
layers
/
DMABUFSurfaceImage
.
h
"
#
include
"
mozilla
/
widget
/
DMABufLibWrapper
.
h
"
#
include
"
mozilla
/
widget
/
DMABufSurface
.
h
"
namespace
mozilla
{
class
VideoFrameSurface
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoFrameSurface
)
VideoFrameSurface
(
)
{
}
;
virtual
void
LockVAAPIData
(
AVCodecContext
*
aAVCodecContext
AVFrame
*
aAVFrame
FFmpegLibWrapper
*
aLib
)
{
}
;
virtual
void
ReleaseVAAPIData
(
bool
aForFrameRecycle
=
true
)
{
}
;
virtual
bool
IsUsed
(
)
const
=
0
;
virtual
void
SetYUVColorSpace
(
mozilla
:
:
gfx
:
:
YUVColorSpace
aColorSpace
)
=
0
;
virtual
RefPtr
<
DMABufSurfaceYUV
>
GetDMABufSurface
(
)
{
return
nullptr
;
}
;
virtual
RefPtr
<
layers
:
:
Image
>
GetAsImage
(
)
=
0
;
VideoFrameSurface
(
const
VideoFrameSurface
&
)
=
delete
;
const
VideoFrameSurface
&
operator
=
(
VideoFrameSurface
const
&
)
=
delete
;
protected
:
virtual
~
VideoFrameSurface
(
)
{
}
;
}
;
class
VideoFrameSurfaceDMABuf
:
public
VideoFrameSurface
{
public
:
explicit
VideoFrameSurfaceDMABuf
(
DMABufSurface
*
aSurface
)
;
bool
IsUsed
(
)
const
{
return
mSurface
-
>
IsGlobalRefSet
(
)
;
}
void
SetYUVColorSpace
(
mozilla
:
:
gfx
:
:
YUVColorSpace
aColorSpace
)
{
mSurface
-
>
GetAsDMABufSurfaceYUV
(
)
-
>
SetYUVColorSpace
(
aColorSpace
)
;
}
RefPtr
<
DMABufSurfaceYUV
>
GetDMABufSurface
(
)
{
return
mSurface
-
>
GetAsDMABufSurfaceYUV
(
)
;
}
;
RefPtr
<
layers
:
:
Image
>
GetAsImage
(
)
;
protected
:
const
RefPtr
<
DMABufSurface
>
mSurface
;
protected
:
~
VideoFrameSurfaceDMABuf
(
)
{
}
;
}
;
class
VideoFrameSurfaceVAAPI
:
public
VideoFrameSurfaceDMABuf
{
public
:
explicit
VideoFrameSurfaceVAAPI
(
DMABufSurface
*
aSurface
)
;
void
LockVAAPIData
(
AVCodecContext
*
aAVCodecContext
AVFrame
*
aAVFrame
FFmpegLibWrapper
*
aLib
)
;
void
ReleaseVAAPIData
(
bool
aForFrameRecycle
)
;
private
:
~
VideoFrameSurfaceVAAPI
(
)
;
const
FFmpegLibWrapper
*
mLib
;
AVBufferRef
*
mAVHWFramesContext
;
AVBufferRef
*
mHWAVBuffer
;
}
;
class
VideoFramePool
final
{
public
:
explicit
VideoFramePool
(
bool
aUseVAAPI
)
;
~
VideoFramePool
(
)
;
RefPtr
<
VideoFrameSurface
>
GetVideoFrameSurface
(
VADRMPRIMESurfaceDescriptor
&
aVaDesc
)
;
RefPtr
<
VideoFrameSurface
>
GetVideoFrameSurface
(
AVPixelFormat
aPixelFormat
AVFrame
*
aFrame
)
;
void
ReleaseUnusedVAAPIFrames
(
)
;
private
:
RefPtr
<
VideoFrameSurface
>
GetFreeVideoFrameSurface
(
)
;
private
:
const
bool
mUseVAAPI
;
nsTArray
<
RefPtr
<
VideoFrameSurface
>
>
mDMABufSurfaces
;
}
;
}
#
endif
