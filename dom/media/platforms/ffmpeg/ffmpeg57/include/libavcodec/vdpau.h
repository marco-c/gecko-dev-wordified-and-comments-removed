#
ifndef
AVCODEC_VDPAU_H
#
define
AVCODEC_VDPAU_H
#
include
<
vdpau
/
vdpau
.
h
>
#
include
<
vdpau
/
vdpau_x11
.
h
>
#
include
"
libavutil
/
avconfig
.
h
"
#
include
"
libavutil
/
attributes
.
h
"
#
include
"
avcodec
.
h
"
#
include
"
version
.
h
"
#
if
FF_API_BUFS_VDPAU
union
AVVDPAUPictureInfo
{
VdpPictureInfoH264
h264
;
VdpPictureInfoMPEG1Or2
mpeg
;
VdpPictureInfoVC1
vc1
;
VdpPictureInfoMPEG4Part2
mpeg4
;
}
;
#
endif
struct
AVCodecContext
;
struct
AVFrame
;
typedef
int
(
*
AVVDPAU_Render2
)
(
struct
AVCodecContext
*
struct
AVFrame
*
const
VdpPictureInfo
*
uint32_t
const
VdpBitstreamBuffer
*
)
;
typedef
struct
AVVDPAUContext
{
VdpDecoder
decoder
;
VdpDecoderRender
*
render
;
#
if
FF_API_BUFS_VDPAU
attribute_deprecated
union
AVVDPAUPictureInfo
info
;
attribute_deprecated
int
bitstream_buffers_allocated
;
attribute_deprecated
int
bitstream_buffers_used
;
attribute_deprecated
VdpBitstreamBuffer
*
bitstream_buffers
;
#
endif
AVVDPAU_Render2
render2
;
}
AVVDPAUContext
;
AVVDPAUContext
*
av_alloc_vdpaucontext
(
void
)
;
AVVDPAU_Render2
av_vdpau_hwaccel_get_render2
(
const
AVVDPAUContext
*
)
;
void
av_vdpau_hwaccel_set_render2
(
AVVDPAUContext
*
AVVDPAU_Render2
)
;
int
av_vdpau_bind_context
(
AVCodecContext
*
avctx
VdpDevice
device
VdpGetProcAddress
*
get_proc_address
unsigned
flags
)
;
int
av_vdpau_get_surface_parameters
(
AVCodecContext
*
avctx
VdpChromaType
*
type
uint32_t
*
width
uint32_t
*
height
)
;
AVVDPAUContext
*
av_vdpau_alloc_context
(
void
)
;
#
if
FF_API_VDPAU_PROFILE
attribute_deprecated
int
av_vdpau_get_profile
(
AVCodecContext
*
avctx
VdpDecoderProfile
*
profile
)
;
#
endif
#
if
FF_API_CAP_VDPAU
#
define
FF_VDPAU_STATE_USED_FOR_RENDER
1
#
define
FF_VDPAU_STATE_USED_FOR_REFERENCE
2
struct
vdpau_render_state
{
VdpVideoSurface
surface
;
int
state
;
union
AVVDPAUPictureInfo
info
;
int
bitstream_buffers_allocated
;
int
bitstream_buffers_used
;
VdpBitstreamBuffer
*
bitstream_buffers
;
}
;
#
endif
#
endif
