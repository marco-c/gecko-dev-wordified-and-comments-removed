#
ifndef
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGDATAENCODER_H_
#
define
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGDATAENCODER_H_
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
SimpleMap
.
h
"
#
include
"
mozilla
/
ThreadSafety
.
h
"
#
include
"
FFmpegLibs
.
h
"
namespace
mozilla
{
template
<
int
V
>
AVCodecID
GetFFmpegEncoderCodecId
(
CodecType
aCodec
)
;
template
<
>
AVCodecID
GetFFmpegEncoderCodecId
<
LIBAV_VER
>
(
CodecType
aCodec
)
;
template
<
int
V
>
class
FFmpegDataEncoder
:
public
MediaDataEncoder
{
}
;
template
<
>
class
FFmpegDataEncoder
<
LIBAV_VER
>
:
public
MediaDataEncoder
{
using
DurationMap
=
SimpleMap
<
int64_t
>
;
public
:
FFmpegDataEncoder
(
const
FFmpegLibWrapper
*
aLib
AVCodecID
aCodecID
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
const
EncoderConfig
&
aConfig
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
EncodePromise
>
Encode
(
const
MediaData
*
aSample
)
override
;
RefPtr
<
ReconfigurationPromise
>
Reconfigure
(
const
RefPtr
<
const
EncoderConfigurationChangeList
>
&
aConfigurationChanges
)
override
;
RefPtr
<
EncodePromise
>
Drain
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
RefPtr
<
GenericPromise
>
SetBitrate
(
uint32_t
aBitRate
)
override
;
protected
:
RefPtr
<
InitPromise
>
ProcessInit
(
)
;
RefPtr
<
EncodePromise
>
ProcessEncode
(
RefPtr
<
const
MediaData
>
aSample
)
;
RefPtr
<
ReconfigurationPromise
>
ProcessReconfigure
(
const
RefPtr
<
const
EncoderConfigurationChangeList
>
&
aConfigurationChanges
)
;
RefPtr
<
EncodePromise
>
ProcessDrain
(
)
;
RefPtr
<
ShutdownPromise
>
ProcessShutdown
(
)
;
virtual
MediaResult
InitSpecific
(
)
=
0
;
AVCodec
*
InitCommon
(
)
;
MediaResult
FinishInitCommon
(
AVCodec
*
aCodec
)
;
void
ShutdownInternal
(
)
;
int
OpenCodecContext
(
const
AVCodec
*
aCodec
AVDictionary
*
*
aOptions
)
MOZ_EXCLUDES
(
sMutex
)
;
void
CloseCodecContext
(
)
MOZ_EXCLUDES
(
sMutex
)
;
bool
PrepareFrame
(
)
;
void
DestroyFrame
(
)
;
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
58
virtual
RefPtr
<
EncodePromise
>
EncodeWithModernAPIs
(
RefPtr
<
const
MediaData
>
aSample
)
;
RefPtr
<
EncodePromise
>
DrainWithModernAPIs
(
)
;
#
endif
virtual
RefPtr
<
MediaRawData
>
ToMediaRawData
(
AVPacket
*
aPacket
)
=
0
;
RefPtr
<
MediaRawData
>
ToMediaRawDataCommon
(
AVPacket
*
aPacket
)
;
virtual
Result
<
already_AddRefed
<
MediaByteBuffer
>
nsresult
>
GetExtraData
(
AVPacket
*
aPacket
)
=
0
;
void
ForceEnablingFFmpegDebugLogs
(
)
;
const
FFmpegLibWrapper
*
mLib
;
const
AVCodecID
mCodecID
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
EncoderConfig
mConfig
;
nsCString
mCodecName
;
AVCodecContext
*
mCodecContext
;
AVFrame
*
mFrame
;
DurationMap
mDurationMap
;
static
StaticMutex
sMutex
;
const
bool
mVideoCodec
;
}
;
}
#
endif
