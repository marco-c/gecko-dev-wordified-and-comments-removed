#
ifndef
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGVIDEOENCODER_H_
#
define
DOM_MEDIA_PLATFORMS_FFMPEG_FFMPEGVIDEOENCODER_H_
#
include
"
FFmpegDataEncoder
.
h
"
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
PlatformEncoderModule
.
h
"
#
include
"
SimpleMap
.
h
"
#
include
"
FFmpegLibs
.
h
"
namespace
mozilla
{
template
<
int
V
>
class
FFmpegVideoEncoder
:
public
MediaDataEncoder
{
}
;
template
<
>
class
FFmpegVideoEncoder
<
LIBAV_VER
>
:
public
FFmpegDataEncoder
<
LIBAV_VER
>
{
using
DurationMap
=
SimpleMap
<
int64_t
>
;
public
:
FFmpegVideoEncoder
(
const
FFmpegLibWrapper
*
aLib
AVCodecID
aCodecID
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
const
EncoderConfig
&
aConfig
)
;
nsCString
GetDescriptionName
(
)
const
override
;
protected
:
virtual
nsresult
InitSpecific
(
)
override
;
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
58
Result
<
EncodedData
nsresult
>
EncodeInputWithModernAPIs
(
RefPtr
<
const
MediaData
>
aSample
)
override
;
#
endif
bool
ScaleInputFrame
(
)
;
virtual
RefPtr
<
MediaRawData
>
ToMediaRawData
(
AVPacket
*
aPacket
)
override
;
Result
<
already_AddRefed
<
MediaByteBuffer
>
nsresult
>
GetExtraData
(
AVPacket
*
aPacket
)
override
;
void
ForceEnablingFFmpegDebugLogs
(
)
;
struct
SVCSettings
{
nsTArray
<
uint8_t
>
mTemporalLayerIds
;
std
:
:
pair
<
nsCString
nsCString
>
mSettingKeyValue
;
}
;
Maybe
<
SVCSettings
>
GetSVCSettings
(
)
;
struct
H264Settings
{
int
mProfile
;
int
mLevel
;
nsTArray
<
std
:
:
pair
<
nsCString
nsCString
>
>
mSettingKeyValuePairs
;
}
;
H264Settings
GetH264Settings
(
const
H264Specific
&
aH264Specific
)
;
struct
SVCInfo
{
explicit
SVCInfo
(
nsTArray
<
uint8_t
>
&
&
aTemporalLayerIds
)
:
mTemporalLayerIds
(
std
:
:
move
(
aTemporalLayerIds
)
)
mNextIndex
(
0
)
{
}
const
nsTArray
<
uint8_t
>
mTemporalLayerIds
;
size_t
mNextIndex
;
uint8_t
UpdateTemporalLayerId
(
)
;
}
;
Maybe
<
SVCInfo
>
mSVCInfo
{
}
;
}
;
}
#
endif
