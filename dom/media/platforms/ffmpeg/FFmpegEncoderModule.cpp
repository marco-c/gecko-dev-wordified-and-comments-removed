#
include
"
FFmpegEncoderModule
.
h
"
#
include
"
EncoderConfig
.
h
"
#
include
"
FFmpegLog
.
h
"
#
include
"
FFmpegAudioEncoder
.
h
"
#
include
"
FFmpegUtils
.
h
"
#
include
"
FFmpegVideoEncoder
.
h
"
#
ifdef
DEBUG
#
include
"
mozilla
/
AppShutdown
.
h
"
#
endif
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
#
include
"
FFmpegLibs
.
h
"
using
mozilla
:
:
media
:
:
EncodeSupport
;
using
mozilla
:
:
media
:
:
EncodeSupportSet
;
namespace
mozilla
{
template
<
int
V
>
void
FFmpegEncoderModule
<
V
>
:
:
Init
(
FFmpegLibWrapper
*
aLib
)
{
#
if
(
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
|
|
\
defined
(
MOZ_WIDGET_ANDROID
)
)
&
&
\
defined
(
MOZ_USE_HWDECODE
)
&
&
!
defined
(
MOZ_FFVPX_AUDIOONLY
)
#
ifdef
XP_WIN
if
(
!
XRE_IsGPUProcess
(
)
)
#
else
if
(
!
XRE_IsRDDProcess
(
)
)
#
endif
{
MOZ_LOG
(
sPEMLog
LogLevel
:
:
Debug
(
"
No
support
in
%
s
process
"
XRE_GetProcessTypeString
(
)
)
)
;
return
;
}
if
(
!
gfx
:
:
gfxVars
:
:
IsInitialized
(
)
)
{
MOZ_ASSERT
(
AppShutdown
:
:
IsInOrBeyond
(
ShutdownPhase
:
:
XPCOMShutdown
)
)
;
return
;
}
struct
CodecEntry
{
AVCodecID
mId
;
bool
mHwAllowed
;
}
;
const
CodecEntry
kCodecIDs
[
]
=
{
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
59
{
AV_CODEC_ID_AV1
gfx
:
:
gfxVars
:
:
UseAV1HwEncode
(
)
}
#
endif
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
55
{
AV_CODEC_ID_VP9
gfx
:
:
gfxVars
:
:
UseVP9HwEncode
(
)
}
#
endif
#
if
(
defined
(
MOZ_WIDGET_GTK
)
|
|
defined
(
MOZ_WIDGET_ANDROID
)
)
&
&
\
LIBAVCODEC_VERSION_MAJOR
>
=
54
{
AV_CODEC_ID_VP8
gfx
:
:
gfxVars
:
:
UseVP8HwEncode
(
)
}
#
endif
#
if
(
defined
(
MOZ_WIDGET_GTK
)
&
&
!
defined
(
FFVPX_VERSION
)
)
|
|
\
defined
(
MOZ_WIDGET_ANDROID
)
#
if
LIBAVCODEC_VERSION_MAJOR
>
=
55
{
AV_CODEC_ID_HEVC
gfx
:
:
gfxVars
:
:
UseHEVCHwEncode
(
)
}
#
endif
{
AV_CODEC_ID_H264
gfx
:
:
gfxVars
:
:
UseH264HwEncode
(
)
}
#
endif
}
;
auto
hwCodecs
=
sSupportedHWCodecs
.
Lock
(
)
;
hwCodecs
-
>
Clear
(
)
;
for
(
const
auto
&
entry
:
kCodecIDs
)
{
if
(
!
entry
.
mHwAllowed
)
{
MOZ_LOG
(
sPEMLog
LogLevel
:
:
Debug
(
"
Hw
codec
disabled
by
gfxVars
for
%
s
"
AVCodecToString
(
entry
.
mId
)
)
)
;
continue
;
}
const
auto
*
codec
=
FFmpegDataEncoder
<
V
>
:
:
FindHardwareEncoder
(
aLib
entry
.
mId
)
;
if
(
!
codec
)
{
MOZ_LOG
(
sPEMLog
LogLevel
:
:
Debug
(
"
No
hw
codec
or
encoder
for
%
s
"
AVCodecToString
(
entry
.
mId
)
)
)
;
continue
;
}
hwCodecs
-
>
AppendElement
(
entry
.
mId
)
;
MOZ_LOG
(
sPEMLog
LogLevel
:
:
Debug
(
"
Support
%
s
for
hw
encoding
"
AVCodecToString
(
entry
.
mId
)
)
)
;
}
#
endif
}
template
<
int
V
>
EncodeSupportSet
FFmpegEncoderModule
<
V
>
:
:
Supports
(
const
EncoderConfig
&
aConfig
)
const
{
if
(
!
CanLikelyEncode
(
aConfig
)
)
{
return
EncodeSupportSet
{
}
;
}
if
(
(
aConfig
.
mScalabilityMode
!
=
ScalabilityMode
:
:
None
)
)
{
if
(
aConfig
.
mCodec
=
=
CodecType
:
:
AV1
)
{
if
(
aConfig
.
mBitrateMode
!
=
BitrateMode
:
:
Constant
)
{
return
EncodeSupportSet
{
}
;
}
}
else
if
(
aConfig
.
mCodec
!
=
CodecType
:
:
VP8
&
&
aConfig
.
mCodec
!
=
CodecType
:
:
VP9
)
{
return
EncodeSupportSet
{
}
;
}
}
auto
support
=
SupportsCodec
(
aConfig
.
mCodec
)
;
if
(
aConfig
.
mHardwarePreference
=
=
HardwarePreference
:
:
RequireHardware
&
&
!
support
.
contains
(
EncodeSupport
:
:
HardwareEncode
)
)
{
return
{
}
;
}
if
(
aConfig
.
mHardwarePreference
=
=
HardwarePreference
:
:
RequireSoftware
&
&
!
support
.
contains
(
EncodeSupport
:
:
SoftwareEncode
)
)
{
return
{
}
;
}
return
support
;
}
template
<
int
V
>
EncodeSupportSet
FFmpegEncoderModule
<
V
>
:
:
SupportsCodec
(
CodecType
aCodec
)
const
{
AVCodecID
id
=
GetFFmpegEncoderCodecId
<
V
>
(
aCodec
)
;
if
(
id
=
=
AV_CODEC_ID_NONE
)
{
return
EncodeSupportSet
{
}
;
}
EncodeSupportSet
supports
;
#
ifdef
MOZ_USE_HWDECODE
if
(
StaticPrefs
:
:
media_ffvpx_hw_enabled
(
)
)
{
auto
hwCodecs
=
sSupportedHWCodecs
.
Lock
(
)
;
if
(
hwCodecs
-
>
Contains
(
static_cast
<
uint32_t
>
(
id
)
)
)
{
supports
+
=
EncodeSupport
:
:
HardwareEncode
;
}
}
#
endif
if
(
FFmpegDataEncoder
<
V
>
:
:
FindSoftwareEncoder
(
mLib
id
)
)
{
supports
+
=
EncodeSupport
:
:
SoftwareEncode
;
}
return
supports
;
}
template
<
int
V
>
already_AddRefed
<
MediaDataEncoder
>
FFmpegEncoderModule
<
V
>
:
:
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
AVCodecID
codecId
=
GetFFmpegEncoderCodecId
<
V
>
(
aConfig
.
mCodec
)
;
if
(
codecId
=
=
AV_CODEC_ID_NONE
)
{
FFMPEGV_LOG
(
"
No
ffmpeg
encoder
for
%
s
"
GetCodecTypeString
(
aConfig
.
mCodec
)
)
;
return
nullptr
;
}
RefPtr
<
MediaDataEncoder
>
encoder
=
new
FFmpegVideoEncoder
<
V
>
(
mLib
codecId
aTaskQueue
aConfig
)
;
FFMPEGV_LOG
(
"
ffmpeg
%
s
encoder
:
%
s
has
been
created
"
GetCodecTypeString
(
aConfig
.
mCodec
)
encoder
-
>
GetDescriptionName
(
)
.
get
(
)
)
;
return
encoder
.
forget
(
)
;
}
template
<
int
V
>
already_AddRefed
<
MediaDataEncoder
>
FFmpegEncoderModule
<
V
>
:
:
CreateAudioEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
AVCodecID
codecId
=
GetFFmpegEncoderCodecId
<
V
>
(
aConfig
.
mCodec
)
;
if
(
codecId
=
=
AV_CODEC_ID_NONE
)
{
FFMPEGV_LOG
(
"
No
ffmpeg
encoder
for
%
s
"
GetCodecTypeString
(
aConfig
.
mCodec
)
)
;
return
nullptr
;
}
RefPtr
<
MediaDataEncoder
>
encoder
=
new
FFmpegAudioEncoder
<
V
>
(
mLib
codecId
aTaskQueue
aConfig
)
;
FFMPEGA_LOG
(
"
ffmpeg
%
s
encoder
:
%
s
has
been
created
"
GetCodecTypeString
(
aConfig
.
mCodec
)
encoder
-
>
GetDescriptionName
(
)
.
get
(
)
)
;
return
encoder
.
forget
(
)
;
}
template
class
FFmpegEncoderModule
<
LIBAV_VER
>
;
}
