#
include
"
FFmpegEncoderModule
.
h
"
#
include
"
FFmpegLog
.
h
"
#
include
"
FFmpegAudioEncoder
.
h
"
#
include
"
FFmpegVideoEncoder
.
h
"
#
include
"
FFmpegLibs
.
h
"
namespace
mozilla
{
template
<
int
V
>
bool
FFmpegEncoderModule
<
V
>
:
:
Supports
(
const
EncoderConfig
&
aConfig
)
const
{
if
(
!
CanLikelyEncode
(
aConfig
)
)
{
return
false
;
}
return
SupportsCodec
(
aConfig
.
mCodec
)
!
=
AV_CODEC_ID_NONE
;
}
template
<
int
V
>
bool
FFmpegEncoderModule
<
V
>
:
:
SupportsCodec
(
CodecType
aCodec
)
const
{
return
GetFFmpegEncoderCodecId
<
V
>
(
aCodec
)
!
=
AV_CODEC_ID_NONE
;
}
template
<
int
V
>
already_AddRefed
<
MediaDataEncoder
>
FFmpegEncoderModule
<
V
>
:
:
CreateVideoEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
AVCodecID
codecId
=
GetFFmpegEncoderCodecId
<
V
>
(
aConfig
.
mCodec
)
;
if
(
codecId
=
=
AV_CODEC_ID_NONE
)
{
FFMPEGV_LOG
(
"
No
ffmpeg
encoder
for
%
s
"
GetCodecTypeString
(
aConfig
.
mCodec
)
)
;
return
nullptr
;
}
RefPtr
<
MediaDataEncoder
>
encoder
=
new
FFmpegVideoEncoder
<
V
>
(
mLib
codecId
aTaskQueue
aConfig
)
;
FFMPEGV_LOG
(
"
ffmpeg
%
s
encoder
:
%
s
has
been
created
"
GetCodecTypeString
(
aConfig
.
mCodec
)
encoder
-
>
GetDescriptionName
(
)
.
get
(
)
)
;
return
encoder
.
forget
(
)
;
}
template
<
int
V
>
already_AddRefed
<
MediaDataEncoder
>
FFmpegEncoderModule
<
V
>
:
:
CreateAudioEncoder
(
const
EncoderConfig
&
aConfig
const
RefPtr
<
TaskQueue
>
&
aTaskQueue
)
const
{
AVCodecID
codecId
=
GetFFmpegEncoderCodecId
<
V
>
(
aConfig
.
mCodec
)
;
if
(
codecId
=
=
AV_CODEC_ID_NONE
)
{
FFMPEGV_LOG
(
"
No
ffmpeg
encoder
for
%
s
"
GetCodecTypeString
(
aConfig
.
mCodec
)
)
;
return
nullptr
;
}
RefPtr
<
MediaDataEncoder
>
encoder
=
new
FFmpegAudioEncoder
<
V
>
(
mLib
codecId
aTaskQueue
aConfig
)
;
FFMPEGA_LOG
(
"
ffmpeg
%
s
encoder
:
%
s
has
been
created
"
GetCodecTypeString
(
aConfig
.
mCodec
)
encoder
-
>
GetDescriptionName
(
)
.
get
(
)
)
;
return
encoder
.
forget
(
)
;
}
template
class
FFmpegEncoderModule
<
LIBAV_VER
>
;
}
