#
ifndef
__FFmpegDecoderModule_h__
#
define
__FFmpegDecoderModule_h__
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
FFmpegAudioDecoder
.
h
"
#
include
"
FFmpegH264Decoder
.
h
"
namespace
mozilla
{
template
<
int
V
>
class
FFmpegDecoderModule
:
public
PlatformDecoderModule
{
public
:
static
already_AddRefed
<
PlatformDecoderModule
>
Create
(
)
{
RefPtr
<
PlatformDecoderModule
>
pdm
=
new
FFmpegDecoderModule
(
)
;
return
pdm
.
forget
(
)
;
}
FFmpegDecoderModule
(
)
{
}
virtual
~
FFmpegDecoderModule
(
)
{
}
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
VideoInfo
&
aConfig
layers
:
:
LayersBackend
aLayersBackend
layers
:
:
ImageContainer
*
aImageContainer
FlushableTaskQueue
*
aVideoTaskQueue
MediaDataDecoderCallback
*
aCallback
)
override
{
RefPtr
<
MediaDataDecoder
>
decoder
=
new
FFmpegH264Decoder
<
V
>
(
aVideoTaskQueue
aCallback
aConfig
aImageContainer
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
AudioInfo
&
aConfig
FlushableTaskQueue
*
aAudioTaskQueue
MediaDataDecoderCallback
*
aCallback
)
override
{
#
ifdef
USING_MOZFFVPX
return
nullptr
;
#
else
RefPtr
<
MediaDataDecoder
>
decoder
=
new
FFmpegAudioDecoder
<
V
>
(
aAudioTaskQueue
aCallback
aConfig
)
;
return
decoder
.
forget
(
)
;
#
endif
}
bool
SupportsMimeType
(
const
nsACString
&
aMimeType
)
const
override
{
#
ifdef
USING_MOZFFVPX
AVCodecID
audioCodec
=
AV_CODEC_ID_NONE
;
#
else
AVCodecID
audioCodec
=
FFmpegAudioDecoder
<
V
>
:
:
GetCodecId
(
aMimeType
)
;
#
endif
AVCodecID
videoCodec
=
FFmpegH264Decoder
<
V
>
:
:
GetCodecId
(
aMimeType
)
;
if
(
audioCodec
=
=
AV_CODEC_ID_NONE
&
&
videoCodec
=
=
AV_CODEC_ID_NONE
)
{
return
false
;
}
AVCodecID
codec
=
audioCodec
!
=
AV_CODEC_ID_NONE
?
audioCodec
:
videoCodec
;
return
!
!
FFmpegDataDecoder
<
V
>
:
:
FindAVCodec
(
codec
)
;
}
ConversionRequired
DecoderNeedsConversion
(
const
TrackInfo
&
aConfig
)
const
override
{
if
(
aConfig
.
IsVideo
(
)
&
&
(
aConfig
.
mMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
|
|
aConfig
.
mMimeType
.
EqualsLiteral
(
"
video
/
mp4
"
)
)
)
{
return
PlatformDecoderModule
:
:
kNeedAVCC
;
}
else
{
return
kNeedNone
;
}
}
}
;
}
#
endif
