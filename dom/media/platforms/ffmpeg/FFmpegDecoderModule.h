#
ifndef
__FFmpegDecoderModule_h__
#
define
__FFmpegDecoderModule_h__
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
FFmpegAudioDecoder
.
h
"
#
include
"
FFmpegVideoDecoder
.
h
"
#
include
"
MediaPrefs
.
h
"
namespace
mozilla
{
template
<
int
V
>
class
FFmpegDecoderModule
:
public
PlatformDecoderModule
{
public
:
static
already_AddRefed
<
PlatformDecoderModule
>
Create
(
FFmpegLibWrapper
*
aLib
)
{
RefPtr
<
PlatformDecoderModule
>
pdm
=
new
FFmpegDecoderModule
(
aLib
)
;
return
pdm
.
forget
(
)
;
}
explicit
FFmpegDecoderModule
(
FFmpegLibWrapper
*
aLib
)
:
mLib
(
aLib
)
{
}
virtual
~
FFmpegDecoderModule
(
)
{
}
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
override
{
if
(
aParams
.
VideoConfig
(
)
.
HasAlpha
(
)
)
{
return
nullptr
;
}
if
(
aParams
.
mOptions
.
contains
(
CreateDecoderParams
:
:
Option
:
:
LowLatency
)
&
&
!
MediaPrefs
:
:
PDMFFVPXLowLatencyEnabled
(
)
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoder
>
decoder
=
new
FFmpegVideoDecoder
<
V
>
(
mLib
aParams
.
mTaskQueue
aParams
.
VideoConfig
(
)
aParams
.
mImageContainer
aParams
.
mOptions
.
contains
(
CreateDecoderParams
:
:
Option
:
:
LowLatency
)
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
override
{
RefPtr
<
MediaDataDecoder
>
decoder
=
new
FFmpegAudioDecoder
<
V
>
(
mLib
aParams
.
mTaskQueue
aParams
.
AudioConfig
(
)
)
;
return
decoder
.
forget
(
)
;
}
bool
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
override
{
AVCodecID
videoCodec
=
FFmpegVideoDecoder
<
V
>
:
:
GetCodecId
(
aMimeType
)
;
AVCodecID
audioCodec
=
FFmpegAudioDecoder
<
V
>
:
:
GetCodecId
(
aMimeType
)
;
if
(
audioCodec
=
=
AV_CODEC_ID_NONE
&
&
videoCodec
=
=
AV_CODEC_ID_NONE
)
{
return
false
;
}
AVCodecID
codec
=
audioCodec
!
=
AV_CODEC_ID_NONE
?
audioCodec
:
videoCodec
;
return
!
!
FFmpegDataDecoder
<
V
>
:
:
FindAVCodec
(
mLib
codec
)
;
}
private
:
FFmpegLibWrapper
*
mLib
;
}
;
}
#
endif
