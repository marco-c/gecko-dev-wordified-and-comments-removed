#
ifndef
__FFmpegAACDecoder_h__
#
define
__FFmpegAACDecoder_h__
#
include
"
FFmpegDataDecoder
.
h
"
#
include
"
FFmpegLibWrapper
.
h
"
namespace
mozilla
{
template
<
int
V
>
class
FFmpegAudioDecoder
{
}
;
template
<
>
class
FFmpegAudioDecoder
<
LIBAV_VER
>
;
DDLoggedTypeNameAndBase
(
FFmpegAudioDecoder
<
LIBAV_VER
>
FFmpegDataDecoder
<
LIBAV_VER
>
)
;
template
<
>
class
FFmpegAudioDecoder
<
LIBAV_VER
>
:
public
FFmpegDataDecoder
<
LIBAV_VER
>
public
DecoderDoctorLifeLogger
<
FFmpegAudioDecoder
<
LIBAV_VER
>
>
{
public
:
FFmpegAudioDecoder
(
FFmpegLibWrapper
*
aLib
const
AudioInfo
&
aConfig
)
;
virtual
~
FFmpegAudioDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
void
InitCodecContext
(
)
MOZ_REQUIRES
(
sMutex
)
override
;
static
AVCodecID
GetCodecId
(
const
nsACString
&
aMimeType
)
;
nsCString
GetDescriptionName
(
)
const
override
{
#
ifdef
USING_MOZFFVPX
return
"
ffvpx
audio
decoder
"
_ns
;
#
else
return
"
ffmpeg
audio
decoder
"
_ns
;
#
endif
}
nsCString
GetCodecName
(
)
const
override
;
private
:
MediaResult
DoDecode
(
MediaRawData
*
aSample
uint8_t
*
aData
int
aSize
bool
*
aGotFrame
DecodedData
&
aResults
)
override
;
uint64_t
Padding
(
)
const
;
uint64_t
TotalFrames
(
)
const
;
uint64_t
mDecodedFrames
=
0
;
uint32_t
mEncoderDelay
=
0
;
uint32_t
mRemainingEncoderDelay
=
0
;
uint64_t
mEncoderPaddingOrTotalFrames
=
0
;
}
;
}
#
endif
