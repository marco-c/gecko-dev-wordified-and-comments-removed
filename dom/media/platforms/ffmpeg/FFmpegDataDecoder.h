#
ifndef
__FFmpegDataDecoder_h__
#
define
__FFmpegDataDecoder_h__
#
include
"
FFmpegLibWrapper
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
FFmpegLibs
.
h
"
namespace
mozilla
{
template
<
int
V
>
class
FFmpegDataDecoder
:
public
MediaDataDecoder
{
}
;
template
<
>
class
FFmpegDataDecoder
<
LIBAV_VER
>
;
DDLoggedTypeNameAndBase
(
FFmpegDataDecoder
<
LIBAV_VER
>
MediaDataDecoder
)
;
template
<
>
class
FFmpegDataDecoder
<
LIBAV_VER
>
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
FFmpegDataDecoder
<
LIBAV_VER
>
>
{
public
:
FFmpegDataDecoder
(
FFmpegLibWrapper
*
aLib
AVCodecID
aCodecID
)
;
virtual
~
FFmpegDataDecoder
(
)
;
static
bool
Link
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
=
0
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
static
AVCodec
*
FindAVCodec
(
FFmpegLibWrapper
*
aLib
AVCodecID
aCodec
)
;
protected
:
virtual
RefPtr
<
FlushPromise
>
ProcessFlush
(
)
;
virtual
void
ProcessShutdown
(
)
;
virtual
void
InitCodecContext
(
)
{
}
AVFrame
*
PrepareFrame
(
)
;
MediaResult
InitDecoder
(
)
;
MediaResult
AllocateExtraData
(
)
;
MediaResult
DoDecode
(
MediaRawData
*
aSample
bool
*
aGotFrame
DecodedData
&
aOutResults
)
;
FFmpegLibWrapper
*
mLib
;
AVCodecContext
*
mCodecContext
;
AVCodecParserContext
*
mCodecParser
;
AVFrame
*
mFrame
;
RefPtr
<
MediaByteBuffer
>
mExtraData
;
AVCodecID
mCodecID
;
protected
:
static
StaticMutex
sMutex
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
private
:
RefPtr
<
DecodePromise
>
ProcessDecode
(
MediaRawData
*
aSample
)
;
RefPtr
<
DecodePromise
>
ProcessDrain
(
)
;
virtual
MediaResult
DoDecode
(
MediaRawData
*
aSample
uint8_t
*
aData
int
aSize
bool
*
aGotFrame
MediaDataDecoder
:
:
DecodedData
&
aOutResults
)
=
0
;
virtual
bool
NeedParser
(
)
const
{
return
false
;
}
virtual
int
ParserFlags
(
)
const
{
return
PARSER_FLAG_COMPLETE_FRAMES
;
}
MozPromiseHolder
<
DecodePromise
>
mPromise
;
media
:
:
TimeUnit
mLastInputDts
;
}
;
}
#
endif
