#
include
"
PlatformDecoderModule
.
h
"
#
include
"
nsPrintfCString
.
h
"
namespace
mozilla
{
RefPtr
<
PlatformDecoderModule
:
:
CreateDecoderPromise
>
PlatformDecoderModule
:
:
AsyncCreateDecoder
(
const
CreateDecoderParams
&
aParams
)
{
RefPtr
<
MediaDataDecoder
>
decoder
;
if
(
aParams
.
mError
)
{
*
aParams
.
mError
=
NS_OK
;
}
if
(
aParams
.
mConfig
.
IsAudio
(
)
)
{
decoder
=
CreateAudioDecoder
(
aParams
)
;
}
else
if
(
aParams
.
mConfig
.
IsVideo
(
)
)
{
decoder
=
CreateAudioDecoder
(
aParams
)
;
}
if
(
!
decoder
)
{
if
(
aParams
.
mError
&
&
NS_FAILED
(
*
aParams
.
mError
)
)
{
return
CreateDecoderPromise
:
:
CreateAndReject
(
*
aParams
.
mError
__func__
)
;
}
return
CreateDecoderPromise
:
:
CreateAndReject
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
nsPrintfCString
(
"
Error
creating
decoder
for
%
s
"
aParams
.
mConfig
.
mMimeType
.
get
(
)
)
.
get
(
)
)
__func__
)
;
}
RefPtr
<
CreateDecoderPromise
>
p
=
decoder
-
>
Init
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
decoder
]
(
MediaDataDecoder
:
:
InitPromise
:
:
ResolveOrRejectValue
&
&
aValue
)
{
RefPtr
<
CreateDecoderPromise
>
p
;
if
(
aValue
.
IsReject
(
)
)
{
p
=
decoder
-
>
Shutdown
(
)
-
>
Then
(
GetCurrentSerialEventTarget
(
)
__func__
[
reject
=
aValue
.
RejectValue
(
)
]
(
)
{
return
CreateDecoderPromise
:
:
CreateAndReject
(
reject
__func__
)
;
}
)
;
}
else
{
p
=
CreateDecoderPromise
:
:
CreateAndResolve
(
decoder
__func__
)
;
}
return
p
;
}
)
;
return
p
;
}
}
