#
include
"
DummyMediaDataDecoder
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
StaticPrefs_media
.
h
"
namespace
mozilla
{
class
NullVideoDataCreator
:
public
DummyDataCreator
{
public
:
NullVideoDataCreator
(
)
=
default
;
already_AddRefed
<
MediaData
>
Create
(
MediaRawData
*
aSample
)
override
{
RefPtr
<
layers
:
:
PlanarYCbCrImage
>
image
=
new
layers
:
:
RecyclingPlanarYCbCrImage
(
new
layers
:
:
BufferRecycleBin
(
)
)
;
return
VideoData
:
:
CreateFromImage
(
gfx
:
:
IntSize
(
)
aSample
-
>
mOffset
aSample
-
>
mTime
aSample
-
>
mDuration
image
aSample
-
>
mKeyframe
aSample
-
>
mTimecode
)
;
}
}
;
class
NullDecoderModule
:
public
PlatformDecoderModule
{
public
:
const
char
*
Name
(
)
const
override
{
return
"
Null
"
;
}
already_AddRefed
<
MediaDataDecoder
>
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
override
{
if
(
StaticPrefs
:
:
media_test_null_decoder_creation_failure
(
)
)
{
return
nullptr
;
}
UniquePtr
<
DummyDataCreator
>
creator
=
MakeUnique
<
NullVideoDataCreator
>
(
)
;
RefPtr
<
MediaDataDecoder
>
decoder
=
new
DummyMediaDataDecoder
(
std
:
:
move
(
creator
)
"
null
media
data
decoder
"
_ns
aParams
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
override
{
MOZ_ASSERT
(
false
"
Audio
decoders
are
unsupported
.
"
)
;
return
nullptr
;
}
media
:
:
DecodeSupportSet
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
override
{
return
media
:
:
DecodeSupport
:
:
SoftwareDecode
;
}
}
;
already_AddRefed
<
PlatformDecoderModule
>
CreateNullDecoderModule
(
)
{
RefPtr
<
PlatformDecoderModule
>
pdm
=
new
NullDecoderModule
(
)
;
return
pdm
.
forget
(
)
;
}
}
