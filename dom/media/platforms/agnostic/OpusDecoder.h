#
if
!
defined
(
OpusDecoder_h_
)
#
define
OpusDecoder_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsTArray
.
h
"
struct
OpusMSDecoder
;
namespace
mozilla
{
class
OpusParser
;
DDLoggedTypeDeclNameAndBase
(
OpusDataDecoder
MediaDataDecoder
)
;
class
OpusDataDecoder
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
OpusDataDecoder
>
{
public
:
explicit
OpusDataDecoder
(
const
CreateDecoderParams
&
aParams
)
;
~
OpusDataDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
"
opus
audio
decoder
"
_ns
;
}
static
bool
IsOpus
(
const
nsACString
&
aMimeType
)
;
private
:
nsresult
DecodeHeader
(
const
unsigned
char
*
aData
size_t
aLength
)
;
const
AudioInfo
mInfo
;
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
UniquePtr
<
OpusParser
>
mOpusParser
;
OpusMSDecoder
*
mOpusDecoder
;
uint16_t
mSkip
;
bool
mDecodedHeader
;
bool
mPaddingDiscarded
;
int64_t
mFrames
;
Maybe
<
int64_t
>
mLastFrameTime
;
AutoTArray
<
uint8_t
8
>
mMappingTable
;
AudioConfig
:
:
ChannelLayout
:
:
ChannelMap
mChannelMap
;
bool
mDefaultPlaybackDeviceMono
;
}
;
}
#
endif
