#
if
!
defined
(
OpusDecoder_h_
)
#
define
OpusDecoder_h_
#
include
"
OpusParser
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
OpusDataDecoder
:
public
MediaDataDecoder
{
public
:
OpusDataDecoder
(
const
AudioInfo
&
aConfig
TaskQueue
*
aTaskQueue
MediaDataDecoderCallback
*
aCallback
)
;
~
OpusDataDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
opus
audio
decoder
"
;
}
static
bool
IsOpus
(
const
nsACString
&
aMimeType
)
;
private
:
nsresult
DecodeHeader
(
const
unsigned
char
*
aData
size_t
aLength
)
;
void
ProcessDecode
(
MediaRawData
*
aSample
)
;
int
DoDecode
(
MediaRawData
*
aSample
)
;
void
ProcessDrain
(
)
;
const
AudioInfo
&
mInfo
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
MediaDataDecoderCallback
*
mCallback
;
nsAutoPtr
<
OpusParser
>
mOpusParser
;
OpusMSDecoder
*
mOpusDecoder
;
uint16_t
mSkip
;
bool
mDecodedHeader
;
bool
mPaddingDiscarded
;
int64_t
mFrames
;
Maybe
<
int64_t
>
mLastFrameTime
;
uint8_t
mMappingTable
[
MAX_AUDIO_CHANNELS
]
;
Atomic
<
bool
>
mIsFlushing
;
}
;
}
#
endif
