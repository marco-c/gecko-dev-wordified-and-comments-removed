#
if
!
defined
(
VPXDecoder_h_
)
#
define
VPXDecoder_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
<
stdint
.
h
>
#
define
VPX_DONT_DEFINE_STDINT_TYPES
#
include
"
vpx
/
vp8dx
.
h
"
#
include
"
vpx
/
vpx_codec
.
h
"
#
include
"
vpx
/
vpx_decoder
.
h
"
namespace
mozilla
{
using
namespace
layers
;
class
VPXDecoder
:
public
MediaDataDecoder
{
public
:
explicit
VPXDecoder
(
const
CreateDecoderParams
&
aParams
)
;
~
VPXDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
libvpx
video
decoder
"
;
}
enum
Codec
:
uint8_t
{
VP8
=
1
<
<
0
VP9
=
1
<
<
1
}
;
static
bool
IsVPX
(
const
nsACString
&
aMimeType
uint8_t
aCodecMask
=
VP8
|
VP9
)
;
private
:
void
ProcessDecode
(
MediaRawData
*
aSample
)
;
int
DoDecode
(
MediaRawData
*
aSample
)
;
void
ProcessDrain
(
)
;
const
RefPtr
<
ImageContainer
>
mImageContainer
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
MediaDataDecoderCallback
*
mCallback
;
Atomic
<
bool
>
mIsFlushing
;
vpx_codec_ctx_t
mVPX
;
const
VideoInfo
&
mInfo
;
const
int
mCodec
;
}
;
}
#
endif
