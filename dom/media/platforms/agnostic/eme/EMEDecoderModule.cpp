#
include
"
EMEDecoderModule
.
h
"
#
include
<
inttypes
.
h
>
#
include
"
Adts
.
h
"
#
include
"
GMPDecoderModule
.
h
"
#
include
"
GMPService
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
PDMFactory
.
h
"
#
include
"
mozIGeckoMediaPluginService
.
h
"
#
include
"
mozilla
/
CDMProxy
.
h
"
#
include
"
mozilla
/
EMEUtils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
DecryptThroughputLimit
.
h
"
#
include
"
ChromiumCDMVideoDecoder
.
h
"
namespace
mozilla
{
typedef
MozPromiseRequestHolder
<
DecryptPromise
>
DecryptPromiseRequestHolder
;
extern
already_AddRefed
<
PlatformDecoderModule
>
CreateBlankDecoderModule
(
)
;
DDLoggedTypeDeclNameAndBase
(
EMEDecryptor
MediaDataDecoder
)
;
class
ADTSSampleConverter
{
public
:
explicit
ADTSSampleConverter
(
const
AudioInfo
&
aInfo
)
:
mNumChannels
(
aInfo
.
mChannels
)
mProfile
(
aInfo
.
mProfile
<
1
|
|
aInfo
.
mProfile
>
4
?
2
:
aInfo
.
mProfile
)
mFrequencyIndex
(
Adts
:
:
GetFrequencyIndex
(
aInfo
.
mRate
)
)
{
EME_LOG
(
"
ADTSSampleConvertor
(
)
:
aInfo
.
mProfile
=
%
"
PRIi8
"
aInfo
.
mExtendedProfile
=
%
"
PRIi8
aInfo
.
mProfile
aInfo
.
mExtendedProfile
)
;
if
(
aInfo
.
mProfile
<
1
|
|
aInfo
.
mProfile
>
4
)
{
EME_LOG
(
"
ADTSSampleConvertor
(
)
:
Profile
not
in
[
1
4
]
!
Samples
will
"
"
their
profile
set
to
2
!
"
)
;
}
}
bool
Convert
(
MediaRawData
*
aSample
)
const
{
return
Adts
:
:
ConvertSample
(
mNumChannels
mFrequencyIndex
mProfile
aSample
)
;
}
bool
Revert
(
MediaRawData
*
aSample
)
const
{
return
Adts
:
:
RevertSample
(
aSample
)
;
}
private
:
const
uint32_t
mNumChannels
;
const
uint8_t
mProfile
;
const
uint8_t
mFrequencyIndex
;
}
;
class
EMEDecryptor
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
EMEDecryptor
>
{
public
:
EMEDecryptor
(
MediaDataDecoder
*
aDecoder
CDMProxy
*
aProxy
TaskQueue
*
aDecodeTaskQueue
TrackInfo
:
:
TrackType
aType
MediaEventProducer
<
TrackInfo
:
:
TrackType
>
*
aOnWaitingForKey
UniquePtr
<
ADTSSampleConverter
>
aConverter
=
nullptr
)
:
mDecoder
(
aDecoder
)
mTaskQueue
(
aDecodeTaskQueue
)
mProxy
(
aProxy
)
mSamplesWaitingForKey
(
new
SamplesWaitingForKey
(
mProxy
aType
aOnWaitingForKey
)
)
mThroughputLimiter
(
aDecodeTaskQueue
)
mADTSSampleConverter
(
Move
(
aConverter
)
)
mIsShutdown
(
false
)
{
DDLINKCHILD
(
"
decoder
"
mDecoder
.
get
(
)
)
;
}
RefPtr
<
InitPromise
>
Init
(
)
override
{
MOZ_ASSERT
(
!
mIsShutdown
)
;
return
mDecoder
-
>
Init
(
)
;
}
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
MOZ_RELEASE_ASSERT
(
mDecrypts
.
Count
(
)
=
=
0
"
Can
only
process
one
sample
at
a
time
"
)
;
RefPtr
<
DecodePromise
>
p
=
mDecodePromise
.
Ensure
(
__func__
)
;
RefPtr
<
EMEDecryptor
>
self
=
this
;
mSamplesWaitingForKey
-
>
WaitIfKeyNotUsable
(
aSample
)
-
>
Then
(
mTaskQueue
__func__
[
self
]
(
RefPtr
<
MediaRawData
>
aSample
)
{
self
-
>
mKeyRequest
.
Complete
(
)
;
self
-
>
ThrottleDecode
(
aSample
)
;
}
[
self
]
(
)
{
self
-
>
mKeyRequest
.
Complete
(
)
;
}
)
-
>
Track
(
mKeyRequest
)
;
return
p
;
}
void
ThrottleDecode
(
MediaRawData
*
aSample
)
{
RefPtr
<
EMEDecryptor
>
self
=
this
;
mThroughputLimiter
.
Throttle
(
aSample
)
-
>
Then
(
mTaskQueue
__func__
[
self
]
(
RefPtr
<
MediaRawData
>
aSample
)
{
self
-
>
mThrottleRequest
.
Complete
(
)
;
self
-
>
AttemptDecode
(
aSample
)
;
}
[
self
]
(
)
{
self
-
>
mThrottleRequest
.
Complete
(
)
;
}
)
-
>
Track
(
mThrottleRequest
)
;
}
void
AttemptDecode
(
MediaRawData
*
aSample
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
if
(
mIsShutdown
)
{
NS_WARNING
(
"
EME
encrypted
sample
arrived
after
shutdown
"
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
return
;
}
if
(
mADTSSampleConverter
&
&
!
mADTSSampleConverter
-
>
Convert
(
aSample
)
)
{
mDecodePromise
.
RejectIfExists
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Failed
to
convert
encrypted
AAC
sample
to
ADTS
"
)
)
__func__
)
;
return
;
}
mDecrypts
.
Put
(
aSample
new
DecryptPromiseRequestHolder
(
)
)
;
mProxy
-
>
Decrypt
(
aSample
)
-
>
Then
(
mTaskQueue
__func__
this
&
EMEDecryptor
:
:
Decrypted
&
EMEDecryptor
:
:
Decrypted
)
-
>
Track
(
*
mDecrypts
.
Get
(
aSample
)
)
;
}
void
Decrypted
(
const
DecryptResult
&
aDecrypted
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
MOZ_ASSERT
(
aDecrypted
.
mSample
)
;
nsAutoPtr
<
DecryptPromiseRequestHolder
>
holder
;
mDecrypts
.
Remove
(
aDecrypted
.
mSample
&
holder
)
;
if
(
holder
)
{
holder
-
>
Complete
(
)
;
}
else
{
return
;
}
if
(
mADTSSampleConverter
&
&
!
mADTSSampleConverter
-
>
Revert
(
aDecrypted
.
mSample
)
)
{
mDecodePromise
.
RejectIfExists
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
Failed
to
revert
decrypted
ADTS
sample
to
AAC
"
)
)
__func__
)
;
return
;
}
if
(
mIsShutdown
)
{
NS_WARNING
(
"
EME
decrypted
sample
arrived
after
shutdown
"
)
;
return
;
}
if
(
aDecrypted
.
mStatus
=
=
eme
:
:
NoKeyErr
)
{
AttemptDecode
(
aDecrypted
.
mSample
)
;
}
else
if
(
aDecrypted
.
mStatus
!
=
eme
:
:
Ok
)
{
mDecodePromise
.
RejectIfExists
(
MediaResult
(
NS_ERROR_DOM_MEDIA_FATAL_ERR
RESULT_DETAIL
(
"
decrypted
.
mStatus
=
%
u
"
uint32_t
(
aDecrypted
.
mStatus
)
)
)
__func__
)
;
}
else
{
MOZ_ASSERT
(
!
mIsShutdown
)
;
UniquePtr
<
MediaRawDataWriter
>
writer
(
aDecrypted
.
mSample
-
>
CreateWriter
(
)
)
;
writer
-
>
mCrypto
=
CryptoSample
(
)
;
RefPtr
<
EMEDecryptor
>
self
=
this
;
mDecoder
-
>
Decode
(
aDecrypted
.
mSample
)
-
>
Then
(
mTaskQueue
__func__
[
self
]
(
const
DecodedData
&
aResults
)
{
self
-
>
mDecodeRequest
.
Complete
(
)
;
self
-
>
mDecodePromise
.
ResolveIfExists
(
aResults
__func__
)
;
}
[
self
]
(
const
MediaResult
&
aError
)
{
self
-
>
mDecodeRequest
.
Complete
(
)
;
self
-
>
mDecodePromise
.
RejectIfExists
(
aError
__func__
)
;
}
)
-
>
Track
(
mDecodeRequest
)
;
}
}
RefPtr
<
FlushPromise
>
Flush
(
)
override
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
mKeyRequest
.
DisconnectIfExists
(
)
;
mThrottleRequest
.
DisconnectIfExists
(
)
;
mDecodeRequest
.
DisconnectIfExists
(
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
mThroughputLimiter
.
Flush
(
)
;
for
(
auto
iter
=
mDecrypts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
DecryptPromiseRequestHolder
>
&
holder
=
iter
.
Data
(
)
;
holder
-
>
DisconnectIfExists
(
)
;
iter
.
Remove
(
)
;
}
RefPtr
<
SamplesWaitingForKey
>
k
=
mSamplesWaitingForKey
;
return
mDecoder
-
>
Flush
(
)
-
>
Then
(
mTaskQueue
__func__
[
k
]
(
)
{
k
-
>
Flush
(
)
;
return
FlushPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
)
;
}
RefPtr
<
DecodePromise
>
Drain
(
)
override
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
MOZ_ASSERT
(
mDecodePromise
.
IsEmpty
(
)
&
&
!
mDecodeRequest
.
Exists
(
)
"
Must
wait
for
decoding
to
complete
"
)
;
for
(
auto
iter
=
mDecrypts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
DecryptPromiseRequestHolder
>
&
holder
=
iter
.
Data
(
)
;
holder
-
>
DisconnectIfExists
(
)
;
iter
.
Remove
(
)
;
}
return
mDecoder
-
>
Drain
(
)
;
}
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
mIsShutdown
=
true
;
mSamplesWaitingForKey
=
nullptr
;
RefPtr
<
MediaDataDecoder
>
decoder
=
mDecoder
.
forget
(
)
;
mProxy
=
nullptr
;
return
decoder
-
>
Shutdown
(
)
;
}
nsCString
GetDescriptionName
(
)
const
override
{
return
mDecoder
-
>
GetDescriptionName
(
)
;
}
ConversionRequired
NeedsConversion
(
)
const
override
{
return
mDecoder
-
>
NeedsConversion
(
)
;
}
private
:
RefPtr
<
MediaDataDecoder
>
mDecoder
;
RefPtr
<
TaskQueue
>
mTaskQueue
;
RefPtr
<
CDMProxy
>
mProxy
;
nsClassHashtable
<
nsRefPtrHashKey
<
MediaRawData
>
DecryptPromiseRequestHolder
>
mDecrypts
;
RefPtr
<
SamplesWaitingForKey
>
mSamplesWaitingForKey
;
MozPromiseRequestHolder
<
SamplesWaitingForKey
:
:
WaitForKeyPromise
>
mKeyRequest
;
DecryptThroughputLimit
mThroughputLimiter
;
MozPromiseRequestHolder
<
DecryptThroughputLimit
:
:
ThrottlePromise
>
mThrottleRequest
;
MozPromiseHolder
<
DecodePromise
>
mDecodePromise
;
MozPromiseHolder
<
DecodePromise
>
mDrainPromise
;
MozPromiseHolder
<
FlushPromise
>
mFlushPromise
;
MozPromiseRequestHolder
<
DecodePromise
>
mDecodeRequest
;
UniquePtr
<
ADTSSampleConverter
>
mADTSSampleConverter
;
bool
mIsShutdown
;
}
;
EMEMediaDataDecoderProxy
:
:
EMEMediaDataDecoderProxy
(
already_AddRefed
<
AbstractThread
>
aProxyThread
CDMProxy
*
aProxy
const
CreateDecoderParams
&
aParams
)
:
MediaDataDecoderProxy
(
Move
(
aProxyThread
)
)
mTaskQueue
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
)
mSamplesWaitingForKey
(
new
SamplesWaitingForKey
(
aProxy
aParams
.
mType
aParams
.
mOnWaitingForKeyEvent
)
)
mProxy
(
aProxy
)
{
}
EMEMediaDataDecoderProxy
:
:
EMEMediaDataDecoderProxy
(
const
CreateDecoderParams
&
aParams
already_AddRefed
<
MediaDataDecoder
>
aProxyDecoder
CDMProxy
*
aProxy
)
:
MediaDataDecoderProxy
(
Move
(
aProxyDecoder
)
)
mTaskQueue
(
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
)
mSamplesWaitingForKey
(
new
SamplesWaitingForKey
(
aProxy
aParams
.
mType
aParams
.
mOnWaitingForKeyEvent
)
)
mProxy
(
aProxy
)
{
}
RefPtr
<
MediaDataDecoder
:
:
DecodePromise
>
EMEMediaDataDecoderProxy
:
:
Decode
(
MediaRawData
*
aSample
)
{
RefPtr
<
DecodePromise
>
p
=
mDecodePromise
.
Ensure
(
__func__
)
;
RefPtr
<
EMEMediaDataDecoderProxy
>
self
=
this
;
mSamplesWaitingForKey
-
>
WaitIfKeyNotUsable
(
aSample
)
-
>
Then
(
mTaskQueue
__func__
[
self
this
]
(
RefPtr
<
MediaRawData
>
aSample
)
{
mKeyRequest
.
Complete
(
)
;
MediaDataDecoderProxy
:
:
Decode
(
aSample
)
-
>
Then
(
mTaskQueue
__func__
[
self
this
]
(
const
DecodedData
&
aResults
)
{
mDecodeRequest
.
Complete
(
)
;
mDecodePromise
.
Resolve
(
aResults
__func__
)
;
}
[
self
this
]
(
const
MediaResult
&
aError
)
{
mDecodeRequest
.
Complete
(
)
;
mDecodePromise
.
Reject
(
aError
__func__
)
;
}
)
-
>
Track
(
mDecodeRequest
)
;
}
[
self
]
(
)
{
self
-
>
mKeyRequest
.
Complete
(
)
;
MOZ_CRASH
(
"
Should
never
get
here
"
)
;
}
)
-
>
Track
(
mKeyRequest
)
;
return
p
;
}
RefPtr
<
MediaDataDecoder
:
:
FlushPromise
>
EMEMediaDataDecoderProxy
:
:
Flush
(
)
{
mKeyRequest
.
DisconnectIfExists
(
)
;
mDecodeRequest
.
DisconnectIfExists
(
)
;
mDecodePromise
.
RejectIfExists
(
NS_ERROR_DOM_MEDIA_CANCELED
__func__
)
;
return
MediaDataDecoderProxy
:
:
Flush
(
)
;
}
RefPtr
<
ShutdownPromise
>
EMEMediaDataDecoderProxy
:
:
Shutdown
(
)
{
mSamplesWaitingForKey
=
nullptr
;
mProxy
=
nullptr
;
return
MediaDataDecoderProxy
:
:
Shutdown
(
)
;
}
EMEDecoderModule
:
:
EMEDecoderModule
(
CDMProxy
*
aProxy
PDMFactory
*
aPDM
)
:
mProxy
(
aProxy
)
mPDM
(
aPDM
)
{
}
EMEDecoderModule
:
:
~
EMEDecoderModule
(
)
{
}
static
already_AddRefed
<
MediaDataDecoderProxy
>
CreateDecoderWrapper
(
CDMProxy
*
aProxy
const
CreateDecoderParams
&
aParams
)
{
RefPtr
<
gmp
:
:
GeckoMediaPluginService
>
s
(
gmp
:
:
GeckoMediaPluginService
:
:
GetGeckoMediaPluginService
(
)
)
;
if
(
!
s
)
{
return
nullptr
;
}
RefPtr
<
AbstractThread
>
thread
(
s
-
>
GetAbstractGMPThread
(
)
)
;
if
(
!
thread
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoderProxy
>
decoder
(
new
EMEMediaDataDecoderProxy
(
thread
.
forget
(
)
aProxy
aParams
)
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
EMEDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
MOZ_ASSERT
(
aParams
.
mConfig
.
mCrypto
.
mValid
)
;
if
(
MediaPrefs
:
:
EMEBlankVideo
(
)
)
{
EME_LOG
(
"
EMEDecoderModule
:
:
CreateVideoDecoder
(
)
creating
a
blank
decoder
.
"
)
;
RefPtr
<
PlatformDecoderModule
>
m
(
CreateBlankDecoderModule
(
)
)
;
return
m
-
>
CreateVideoDecoder
(
aParams
)
;
}
if
(
SupportsMimeType
(
aParams
.
mConfig
.
mMimeType
nullptr
)
)
{
RefPtr
<
MediaDataDecoderProxy
>
wrapper
=
CreateDecoderWrapper
(
mProxy
aParams
)
;
auto
params
=
GMPVideoDecoderParams
(
aParams
)
;
wrapper
-
>
SetProxyTarget
(
new
ChromiumCDMVideoDecoder
(
params
mProxy
)
)
;
return
wrapper
.
forget
(
)
;
}
MOZ_ASSERT
(
mPDM
)
;
RefPtr
<
MediaDataDecoder
>
decoder
(
mPDM
-
>
CreateDecoder
(
aParams
)
)
;
if
(
!
decoder
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoder
>
emeDecoder
(
new
EMEDecryptor
(
decoder
mProxy
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
aParams
.
mType
aParams
.
mOnWaitingForKeyEvent
)
)
;
return
emeDecoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
EMEDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
MOZ_ASSERT
(
aParams
.
mConfig
.
mCrypto
.
mValid
)
;
MOZ_ASSERT
(
!
SupportsMimeType
(
aParams
.
mConfig
.
mMimeType
nullptr
)
)
;
MOZ_ASSERT
(
mPDM
)
;
if
(
MediaPrefs
:
:
EMEBlankAudio
(
)
)
{
EME_LOG
(
"
EMEDecoderModule
:
:
CreateAudioDecoder
(
)
creating
a
blank
decoder
.
"
)
;
RefPtr
<
PlatformDecoderModule
>
m
(
CreateBlankDecoderModule
(
)
)
;
return
m
-
>
CreateAudioDecoder
(
aParams
)
;
}
UniquePtr
<
ADTSSampleConverter
>
converter
=
nullptr
;
if
(
MP4Decoder
:
:
IsAAC
(
aParams
.
mConfig
.
mMimeType
)
)
{
converter
=
MakeUnique
<
ADTSSampleConverter
>
(
aParams
.
AudioConfig
(
)
)
;
}
RefPtr
<
MediaDataDecoder
>
decoder
(
mPDM
-
>
CreateDecoder
(
aParams
)
)
;
if
(
!
decoder
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoder
>
emeDecoder
(
new
EMEDecryptor
(
decoder
mProxy
AbstractThread
:
:
GetCurrent
(
)
-
>
AsTaskQueue
(
)
aParams
.
mType
aParams
.
mOnWaitingForKeyEvent
Move
(
converter
)
)
)
;
return
emeDecoder
.
forget
(
)
;
}
bool
EMEDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
Maybe
<
nsCString
>
gmp
;
gmp
.
emplace
(
NS_ConvertUTF16toUTF8
(
mProxy
-
>
KeySystem
(
)
)
)
;
return
GMPDecoderModule
:
:
SupportsMimeType
(
aMimeType
gmp
)
;
}
}
