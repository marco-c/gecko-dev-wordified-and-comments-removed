#
ifndef
DOM_MEDIA_PLATFORMS_AGNOSTIC_BYTESTREAMS_ANNEX_B_H_
#
define
DOM_MEDIA_PLATFORMS_AGNOSTIC_BYTESTREAMS_ANNEX_B_H_
#
include
"
ErrorList
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Result
.
h
"
template
<
class
>
class
nsTArray
;
namespace
mozilla
{
class
BufferReader
;
class
MediaRawData
;
class
MediaByteBuffer
;
class
AnnexB
{
public
:
struct
NALEntry
{
NALEntry
(
int64_t
aOffset
int64_t
aSize
)
:
mOffset
(
aOffset
)
mSize
(
aSize
)
{
MOZ_ASSERT
(
mOffset
>
=
0
)
;
MOZ_ASSERT
(
mSize
>
=
0
)
;
}
int64_t
mOffset
;
int64_t
mSize
;
}
;
static
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ConvertSampleToAnnexB
(
mozilla
:
:
MediaRawData
*
aSample
bool
aAddSPS
=
true
)
;
static
bool
ConvertSampleToAVCC
(
mozilla
:
:
MediaRawData
*
aSample
const
RefPtr
<
mozilla
:
:
MediaByteBuffer
>
&
aAVCCHeader
=
nullptr
)
;
static
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ConvertAVCCTo4BytesAVCC
(
mozilla
:
:
MediaRawData
*
aSample
)
;
static
already_AddRefed
<
mozilla
:
:
MediaByteBuffer
>
ConvertExtraDataToAnnexB
(
const
mozilla
:
:
MediaByteBuffer
*
aExtraData
)
;
static
bool
IsAVCC
(
const
mozilla
:
:
MediaRawData
*
aSample
)
;
static
bool
IsAnnexB
(
const
mozilla
:
:
MediaRawData
*
aSample
)
;
static
void
ParseNALEntries
(
const
Span
<
const
uint8_t
>
&
aSpan
nsTArray
<
AnnexB
:
:
NALEntry
>
&
aEntries
)
;
private
:
static
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ConvertSPSOrPPS
(
mozilla
:
:
BufferReader
&
aReader
uint8_t
aCount
mozilla
:
:
MediaByteBuffer
*
aAnnexB
)
;
static
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ConvertNALUTo4BytesNALU
(
mozilla
:
:
MediaRawData
*
aSample
uint8_t
aNALUSize
)
;
}
;
}
#
endif
