#
if
!
defined
(
DAV1DDecoder_h_
)
#
define
DAV1DDecoder_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
dav1d
/
dav1d
.
h
"
namespace
mozilla
{
DDLoggedTypeDeclNameAndBase
(
DAV1DDecoder
MediaDataDecoder
)
;
typedef
nsRefPtrHashtable
<
nsPtrHashKey
<
const
uint8_t
>
MediaRawData
>
MediaRawDataHashtable
;
class
DAV1DDecoder
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
DAV1DDecoder
>
{
public
:
explicit
DAV1DDecoder
(
const
CreateDecoderParams
&
aParams
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
NS_LITERAL_CSTRING
(
"
av1
libdav1d
video
decoder
"
)
;
}
void
ReleaseDataBuffer
(
const
uint8_t
*
buf
)
;
private
:
~
DAV1DDecoder
(
)
;
RefPtr
<
DecodePromise
>
InvokeDecode
(
MediaRawData
*
aSample
)
;
int
GetPicture
(
const
MediaRawData
*
aSample
DecodedData
&
aData
MediaResult
&
aResult
)
;
already_AddRefed
<
VideoData
>
ConstructImage
(
const
MediaRawData
*
aSample
const
Dav1dPicture
&
)
;
Dav1dContext
*
mContext
;
const
VideoInfo
&
mInfo
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
const
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
MediaRawDataHashtable
mDecodingBuffers
;
media
:
:
TimeUnit
mLastTimecode
;
media
:
:
TimeUnit
mLastDuration
;
int64_t
mLastOffset
=
0
;
}
;
}
#
endif
