#
if
!
defined
(
VorbisDecoder_h_
)
#
define
VorbisDecoder_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
AudioConverter
.
h
"
#
ifdef
MOZ_TREMOR
#
include
"
tremor
/
ivorbiscodec
.
h
"
#
else
#
include
"
vorbis
/
codec
.
h
"
#
endif
namespace
mozilla
{
class
VorbisDataDecoder
:
public
MediaDataDecoder
{
public
:
explicit
VorbisDataDecoder
(
const
CreateDecoderParams
&
aParams
)
;
~
VorbisDataDecoder
(
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
vorbis
audio
decoder
"
;
}
static
bool
IsVorbis
(
const
nsACString
&
aMimeType
)
;
static
const
AudioConfig
:
:
Channel
*
VorbisLayout
(
uint32_t
aChannels
)
;
private
:
nsresult
DecodeHeader
(
const
unsigned
char
*
aData
size_t
aLength
)
;
void
ProcessDecode
(
MediaRawData
*
aSample
)
;
int
DoDecode
(
MediaRawData
*
aSample
)
;
void
ProcessDrain
(
)
;
const
AudioInfo
&
mInfo
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
MediaDataDecoderCallback
*
mCallback
;
vorbis_info
mVorbisInfo
;
vorbis_comment
mVorbisComment
;
vorbis_dsp_state
mVorbisDsp
;
vorbis_block
mVorbisBlock
;
int64_t
mPacketCount
;
int64_t
mFrames
;
Maybe
<
int64_t
>
mLastFrameTime
;
UniquePtr
<
AudioConverter
>
mAudioConverter
;
Atomic
<
bool
>
mIsFlushing
;
}
;
}
#
endif
