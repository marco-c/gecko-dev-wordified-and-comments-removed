#
if
!
defined
(
VorbisDecoder_h_
)
#
define
VorbisDecoder_h_
#
include
"
AudioConverter
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
ifdef
MOZ_TREMOR
#
include
"
tremor
/
ivorbiscodec
.
h
"
#
else
#
include
"
vorbis
/
codec
.
h
"
#
endif
namespace
mozilla
{
DDLoggedTypeDeclNameAndBase
(
VorbisDataDecoder
MediaDataDecoder
)
;
class
VorbisDataDecoder
final
:
public
MediaDataDecoder
public
DecoderDoctorLifeLogger
<
VorbisDataDecoder
>
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VorbisDataDecoder
final
)
;
explicit
VorbisDataDecoder
(
const
CreateDecoderParams
&
aParams
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
"
vorbis
audio
decoder
"
_ns
;
}
nsCString
GetCodecName
(
)
const
override
{
return
"
vorbis
"
_ns
;
}
static
bool
IsVorbis
(
const
nsACString
&
aMimeType
)
;
static
const
AudioConfig
:
:
Channel
*
VorbisLayout
(
uint32_t
aChannels
)
;
private
:
~
VorbisDataDecoder
(
)
;
nsresult
DecodeHeader
(
const
unsigned
char
*
aData
size_t
aLength
)
;
const
AudioInfo
mInfo
;
nsCOMPtr
<
nsISerialEventTarget
>
mThread
;
vorbis_info
mVorbisInfo
;
vorbis_comment
mVorbisComment
;
vorbis_dsp_state
mVorbisDsp
;
vorbis_block
mVorbisBlock
;
int64_t
mPacketCount
;
int64_t
mFrames
;
Maybe
<
int64_t
>
mLastFrameTime
;
UniquePtr
<
AudioConverter
>
mAudioConverter
;
}
;
}
#
endif
