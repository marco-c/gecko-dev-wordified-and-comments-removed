#
if
!
defined
(
MediaDataDecoderProxy_h_
)
#
define
MediaDataDecoderProxy_h_
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
class
InputTask
:
public
nsRunnable
{
public
:
InputTask
(
MediaDataDecoder
*
aDecoder
MediaRawData
*
aSample
)
:
mDecoder
(
aDecoder
)
mSample
(
aSample
)
{
}
NS_IMETHOD
Run
(
)
{
mDecoder
-
>
Input
(
mSample
)
;
return
NS_OK
;
}
private
:
RefPtr
<
MediaDataDecoder
>
mDecoder
;
RefPtr
<
MediaRawData
>
mSample
;
}
;
template
<
typename
T
>
class
Condition
{
public
:
explicit
Condition
(
T
aValue
)
:
mMonitor
(
"
Condition
"
)
mCondition
(
aValue
)
{
}
void
Set
(
T
aValue
)
{
MonitorAutoLock
mon
(
mMonitor
)
;
mCondition
=
aValue
;
mon
.
NotifyAll
(
)
;
}
void
WaitUntil
(
T
aValue
)
{
MonitorAutoLock
mon
(
mMonitor
)
;
while
(
mCondition
!
=
aValue
)
{
mon
.
Wait
(
)
;
}
}
private
:
Monitor
mMonitor
;
T
mCondition
;
}
;
class
MediaDataDecoderProxy
;
class
MediaDataDecoderCallbackProxy
:
public
MediaDataDecoderCallback
{
public
:
MediaDataDecoderCallbackProxy
(
MediaDataDecoderProxy
*
aProxyDecoder
MediaDataDecoderCallback
*
aCallback
)
:
mProxyDecoder
(
aProxyDecoder
)
mProxyCallback
(
aCallback
)
{
}
void
Output
(
MediaData
*
aData
)
override
{
mProxyCallback
-
>
Output
(
aData
)
;
}
void
Error
(
)
override
;
void
InputExhausted
(
)
override
{
mProxyCallback
-
>
InputExhausted
(
)
;
}
void
DrainComplete
(
)
override
{
mProxyCallback
-
>
DrainComplete
(
)
;
}
void
ReleaseMediaResources
(
)
override
{
mProxyCallback
-
>
ReleaseMediaResources
(
)
;
}
void
FlushComplete
(
)
;
bool
OnReaderTaskQueue
(
)
override
{
return
mProxyCallback
-
>
OnReaderTaskQueue
(
)
;
}
private
:
MediaDataDecoderProxy
*
mProxyDecoder
;
MediaDataDecoderCallback
*
mProxyCallback
;
}
;
class
MediaDataDecoderProxy
:
public
MediaDataDecoder
{
public
:
MediaDataDecoderProxy
(
nsIThread
*
aProxyThread
MediaDataDecoderCallback
*
aCallback
)
:
mProxyThread
(
aProxyThread
)
mProxyCallback
(
this
aCallback
)
mFlushComplete
(
false
)
#
if
defined
(
DEBUG
)
mIsShutdown
(
false
)
#
endif
{
mProxyThreadWrapper
=
CreateXPCOMAbstractThreadWrapper
(
aProxyThread
false
)
;
}
MediaDataDecoderCallbackProxy
*
Callback
(
)
{
return
&
mProxyCallback
;
}
void
SetProxyTarget
(
MediaDataDecoder
*
aProxyDecoder
)
{
MOZ_ASSERT
(
aProxyDecoder
)
;
mProxyDecoder
=
aProxyDecoder
;
}
RefPtr
<
InitPromise
>
Init
(
)
override
;
nsresult
Input
(
MediaRawData
*
aSample
)
override
;
nsresult
Flush
(
)
override
;
nsresult
Drain
(
)
override
;
nsresult
Shutdown
(
)
override
;
const
char
*
GetDescriptionName
(
)
const
override
{
return
"
GMP
proxy
data
decoder
"
;
}
void
FlushComplete
(
)
;
private
:
RefPtr
<
InitPromise
>
InternalInit
(
)
;
#
ifdef
DEBUG
bool
IsOnProxyThread
(
)
{
return
NS_GetCurrentThread
(
)
=
=
mProxyThread
;
}
#
endif
friend
class
InputTask
;
friend
class
InitTask
;
RefPtr
<
MediaDataDecoder
>
mProxyDecoder
;
nsCOMPtr
<
nsIThread
>
mProxyThread
;
RefPtr
<
AbstractThread
>
mProxyThreadWrapper
;
MediaDataDecoderCallbackProxy
mProxyCallback
;
Condition
<
bool
>
mFlushComplete
;
#
if
defined
(
DEBUG
)
bool
mIsShutdown
;
#
endif
}
;
}
#
endif
