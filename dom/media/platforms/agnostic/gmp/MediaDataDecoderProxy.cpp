#
include
"
MediaDataDecoderProxy
.
h
"
#
include
"
MediaData
.
h
"
namespace
mozilla
{
void
MediaDataDecoderCallbackProxy
:
:
Error
(
)
{
mProxyCallback
-
>
Error
(
)
;
}
void
MediaDataDecoderCallbackProxy
:
:
FlushComplete
(
)
{
mProxyDecoder
-
>
FlushComplete
(
)
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
MediaDataDecoderProxy
:
:
InternalInit
(
)
{
MOZ_ASSERT
(
!
mIsShutdown
)
;
return
mProxyDecoder
-
>
Init
(
)
;
}
RefPtr
<
MediaDataDecoder
:
:
InitPromise
>
MediaDataDecoderProxy
:
:
Init
(
)
{
MOZ_ASSERT
(
!
mIsShutdown
)
;
return
InvokeAsync
(
mProxyThread
this
__func__
&
MediaDataDecoderProxy
:
:
InternalInit
)
;
}
nsresult
MediaDataDecoderProxy
:
:
Input
(
MediaRawData
*
aSample
)
{
MOZ_ASSERT
(
!
IsOnProxyThread
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
nsCOMPtr
<
nsIRunnable
>
task
(
new
InputTask
(
mProxyDecoder
aSample
)
)
;
mProxyThread
-
>
Dispatch
(
task
.
forget
(
)
)
;
return
NS_OK
;
}
nsresult
MediaDataDecoderProxy
:
:
Flush
(
)
{
MOZ_ASSERT
(
!
IsOnProxyThread
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
mFlushComplete
.
Set
(
false
)
;
mProxyThread
-
>
Dispatch
(
NewRunnableMethod
(
mProxyDecoder
&
MediaDataDecoder
:
:
Flush
)
)
;
mFlushComplete
.
WaitUntil
(
true
)
;
return
NS_OK
;
}
nsresult
MediaDataDecoderProxy
:
:
Drain
(
)
{
MOZ_ASSERT
(
!
IsOnProxyThread
(
)
)
;
MOZ_ASSERT
(
!
mIsShutdown
)
;
mProxyThread
-
>
Dispatch
(
NewRunnableMethod
(
mProxyDecoder
&
MediaDataDecoder
:
:
Drain
)
)
;
return
NS_OK
;
}
nsresult
MediaDataDecoderProxy
:
:
Shutdown
(
)
{
MOZ_ASSERT
(
!
mIsShutdown
)
;
#
if
defined
(
DEBUG
)
mIsShutdown
=
true
;
#
endif
nsresult
rv
=
mProxyThread
-
>
AsXPCOMThread
(
)
-
>
Dispatch
(
NewRunnableMethod
(
mProxyDecoder
&
MediaDataDecoder
:
:
Shutdown
)
NS_DISPATCH_SYNC
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
NS_OK
;
}
void
MediaDataDecoderProxy
:
:
FlushComplete
(
)
{
mFlushComplete
.
Set
(
true
)
;
}
}
