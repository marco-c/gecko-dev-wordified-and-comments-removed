#
if
!
defined
(
GMPVideoDecoder_h_
)
#
define
GMPVideoDecoder_h_
#
include
"
GMPVideoDecoderProxy
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
MediaDataDecoderProxy
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
PlatformDecoderModule
.
h
"
#
include
"
mozIGeckoMediaPluginService
.
h
"
namespace
mozilla
{
struct
MOZ_STACK_CLASS
GMPVideoDecoderParams
{
explicit
GMPVideoDecoderParams
(
const
CreateDecoderParams
&
aParams
)
;
const
VideoInfo
&
mConfig
;
layers
:
:
ImageContainer
*
mImageContainer
;
GMPCrashHelper
*
mCrashHelper
;
}
;
DDLoggedTypeDeclNameAndBase
(
GMPVideoDecoder
MediaDataDecoder
)
;
class
GMPVideoDecoder
:
public
MediaDataDecoder
public
GMPVideoDecoderCallbackProxy
public
DecoderDoctorLifeLogger
<
GMPVideoDecoder
>
{
public
:
explicit
GMPVideoDecoder
(
const
GMPVideoDecoderParams
&
aParams
)
;
RefPtr
<
InitPromise
>
Init
(
)
override
;
RefPtr
<
DecodePromise
>
Decode
(
MediaRawData
*
aSample
)
override
;
RefPtr
<
DecodePromise
>
Drain
(
)
override
;
RefPtr
<
FlushPromise
>
Flush
(
)
override
;
RefPtr
<
ShutdownPromise
>
Shutdown
(
)
override
;
nsCString
GetDescriptionName
(
)
const
override
{
return
"
gmp
video
decoder
"
_ns
;
}
ConversionRequired
NeedsConversion
(
)
const
override
{
return
mConvertToAnnexB
?
ConversionRequired
:
:
kNeedAnnexB
:
ConversionRequired
:
:
kNeedAVCC
;
}
void
Decoded
(
GMPVideoi420Frame
*
aDecodedFrame
)
override
;
void
ReceivedDecodedReferenceFrame
(
const
uint64_t
aPictureId
)
override
;
void
ReceivedDecodedFrame
(
const
uint64_t
aPictureId
)
override
;
void
InputDataExhausted
(
)
override
;
void
DrainComplete
(
)
override
;
void
ResetComplete
(
)
override
;
void
Error
(
GMPErr
aErr
)
override
;
void
Terminated
(
)
override
;
protected
:
virtual
void
InitTags
(
nsTArray
<
nsCString
>
&
aTags
)
;
virtual
nsCString
GetNodeId
(
)
;
virtual
GMPUniquePtr
<
GMPVideoEncodedFrame
>
CreateFrame
(
MediaRawData
*
aSample
)
;
virtual
const
VideoInfo
&
GetConfig
(
)
const
;
private
:
class
GMPInitDoneCallback
:
public
GetGMPVideoDecoderCallback
{
public
:
explicit
GMPInitDoneCallback
(
GMPVideoDecoder
*
aDecoder
)
:
mDecoder
(
aDecoder
)
{
}
void
Done
(
GMPVideoDecoderProxy
*
aGMP
GMPVideoHost
*
aHost
)
override
{
mDecoder
-
>
GMPInitDone
(
aGMP
aHost
)
;
}
private
:
RefPtr
<
GMPVideoDecoder
>
mDecoder
;
}
;
void
GMPInitDone
(
GMPVideoDecoderProxy
*
aGMP
GMPVideoHost
*
aHost
)
;
const
VideoInfo
mConfig
;
nsCOMPtr
<
mozIGeckoMediaPluginService
>
mMPS
;
GMPVideoDecoderProxy
*
mGMP
;
GMPVideoHost
*
mHost
;
bool
mConvertNALUnitLengths
;
MozPromiseHolder
<
InitPromise
>
mInitPromise
;
RefPtr
<
GMPCrashHelper
>
mCrashHelper
;
int64_t
mLastStreamOffset
=
0
;
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
MozPromiseHolder
<
DecodePromise
>
mDecodePromise
;
MozPromiseHolder
<
DecodePromise
>
mDrainPromise
;
MozPromiseHolder
<
FlushPromise
>
mFlushPromise
;
DecodedData
mDecodedData
;
bool
mConvertToAnnexB
=
false
;
}
;
}
#
endif
