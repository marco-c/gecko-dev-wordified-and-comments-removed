#
include
"
GMPDecoderModule
.
h
"
#
include
"
DecoderDoctorDiagnostics
.
h
"
#
include
"
GMPAudioDecoder
.
h
"
#
include
"
GMPVideoDecoder
.
h
"
#
include
"
MediaDataDecoderProxy
.
h
"
#
include
"
MediaPrefs
.
h
"
#
include
"
mozIGeckoMediaPluginService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
gmp
-
audio
-
decode
.
h
"
#
include
"
gmp
-
video
-
decode
.
h
"
#
ifdef
XP_WIN
#
include
"
WMFDecoderModule
.
h
"
#
endif
namespace
mozilla
{
GMPDecoderModule
:
:
GMPDecoderModule
(
)
{
}
GMPDecoderModule
:
:
~
GMPDecoderModule
(
)
{
}
static
already_AddRefed
<
MediaDataDecoderProxy
>
CreateDecoderWrapper
(
MediaDataDecoderCallback
*
aCallback
)
{
RefPtr
<
gmp
:
:
GeckoMediaPluginService
>
s
(
gmp
:
:
GeckoMediaPluginService
:
:
GetGeckoMediaPluginService
(
)
)
;
if
(
!
s
)
{
return
nullptr
;
}
RefPtr
<
AbstractThread
>
thread
(
s
-
>
GetAbstractGMPThread
(
)
)
;
if
(
!
thread
)
{
return
nullptr
;
}
RefPtr
<
MediaDataDecoderProxy
>
decoder
(
new
MediaDataDecoderProxy
(
thread
.
forget
(
)
aCallback
)
)
;
return
decoder
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
GMPDecoderModule
:
:
CreateVideoDecoder
(
const
CreateDecoderParams
&
aParams
)
{
if
(
!
aParams
.
mConfig
.
mMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
)
{
return
nullptr
;
}
if
(
aParams
.
mDiagnostics
)
{
const
Maybe
<
nsCString
>
preferredGMP
=
PreferredGMP
(
aParams
.
mConfig
.
mMimeType
)
;
if
(
preferredGMP
.
isSome
(
)
)
{
aParams
.
mDiagnostics
-
>
SetGMP
(
preferredGMP
.
value
(
)
)
;
}
}
RefPtr
<
MediaDataDecoderProxy
>
wrapper
=
CreateDecoderWrapper
(
aParams
.
mCallback
)
;
wrapper
-
>
SetProxyTarget
(
new
GMPVideoDecoder
(
aParams
.
VideoConfig
(
)
aParams
.
mLayersBackend
aParams
.
mImageContainer
aParams
.
mTaskQueue
wrapper
-
>
Callback
(
)
)
)
;
return
wrapper
.
forget
(
)
;
}
already_AddRefed
<
MediaDataDecoder
>
GMPDecoderModule
:
:
CreateAudioDecoder
(
const
CreateDecoderParams
&
aParams
)
{
if
(
!
aParams
.
mConfig
.
mMimeType
.
EqualsLiteral
(
"
audio
/
mp4a
-
latm
"
)
)
{
return
nullptr
;
}
if
(
aParams
.
mDiagnostics
)
{
const
Maybe
<
nsCString
>
preferredGMP
=
PreferredGMP
(
aParams
.
mConfig
.
mMimeType
)
;
if
(
preferredGMP
.
isSome
(
)
)
{
aParams
.
mDiagnostics
-
>
SetGMP
(
preferredGMP
.
value
(
)
)
;
}
}
RefPtr
<
MediaDataDecoderProxy
>
wrapper
=
CreateDecoderWrapper
(
aParams
.
mCallback
)
;
wrapper
-
>
SetProxyTarget
(
new
GMPAudioDecoder
(
aParams
.
AudioConfig
(
)
aParams
.
mTaskQueue
wrapper
-
>
Callback
(
)
)
)
;
return
wrapper
.
forget
(
)
;
}
PlatformDecoderModule
:
:
ConversionRequired
GMPDecoderModule
:
:
DecoderNeedsConversion
(
const
TrackInfo
&
aConfig
)
const
{
if
(
aConfig
.
IsVideo
(
)
)
{
return
kNeedAVCC
;
}
else
{
return
kNeedNone
;
}
}
static
bool
HasGMPFor
(
const
nsACString
&
aAPI
const
nsACString
&
aCodec
const
nsACString
&
aGMP
)
{
#
ifdef
XP_WIN
if
(
aGMP
.
EqualsLiteral
(
"
org
.
w3
.
clearkey
"
)
)
{
RefPtr
<
WMFDecoderModule
>
pdm
(
new
WMFDecoderModule
(
)
)
;
if
(
aCodec
.
EqualsLiteral
(
"
aac
"
)
&
&
!
pdm
-
>
SupportsMimeType
(
NS_LITERAL_CSTRING
(
"
audio
/
mp4a
-
latm
"
)
nullptr
)
)
{
return
false
;
}
if
(
aCodec
.
EqualsLiteral
(
"
h264
"
)
&
&
!
pdm
-
>
SupportsMimeType
(
NS_LITERAL_CSTRING
(
"
video
/
avc
"
)
nullptr
)
)
{
return
false
;
}
}
#
endif
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
HasPluginForAPI
must
be
called
on
the
main
thread
"
)
;
nsTArray
<
nsCString
>
tags
;
tags
.
AppendElement
(
aCodec
)
;
tags
.
AppendElement
(
aGMP
)
;
nsCOMPtr
<
mozIGeckoMediaPluginService
>
mps
=
do_GetService
(
"
mozilla
.
org
/
gecko
-
media
-
plugin
-
service
;
1
"
)
;
if
(
NS_WARN_IF
(
!
mps
)
)
{
return
false
;
}
bool
hasPlugin
=
false
;
if
(
NS_FAILED
(
mps
-
>
HasPluginForAPI
(
aAPI
&
tags
&
hasPlugin
)
)
)
{
return
false
;
}
return
hasPlugin
;
}
StaticMutex
sGMPCodecsMutex
;
struct
GMPCodecs
{
const
char
*
mKeySystem
;
bool
mHasAAC
;
bool
mHasH264
;
}
;
static
GMPCodecs
sGMPCodecs
[
]
=
{
{
"
org
.
w3
.
clearkey
"
false
false
}
{
"
com
.
adobe
.
primetime
"
false
false
}
{
"
com
.
widevine
.
alpha
"
false
false
}
}
;
void
GMPDecoderModule
:
:
UpdateUsableCodecs
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StaticMutexAutoLock
lock
(
sGMPCodecsMutex
)
;
for
(
GMPCodecs
&
gmp
:
sGMPCodecs
)
{
gmp
.
mHasAAC
=
HasGMPFor
(
NS_LITERAL_CSTRING
(
GMP_API_AUDIO_DECODER
)
NS_LITERAL_CSTRING
(
"
aac
"
)
nsDependentCString
(
gmp
.
mKeySystem
)
)
;
gmp
.
mHasH264
=
HasGMPFor
(
NS_LITERAL_CSTRING
(
GMP_API_VIDEO_DECODER
)
NS_LITERAL_CSTRING
(
"
h264
"
)
nsDependentCString
(
gmp
.
mKeySystem
)
)
;
}
}
void
GMPDecoderModule
:
:
Init
(
)
{
if
(
!
NS_IsMainThread
(
)
)
{
nsCOMPtr
<
nsIThread
>
mainThread
=
do_GetMainThread
(
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
=
NS_NewRunnableFunction
(
[
]
(
)
{
Init
(
)
;
}
)
;
SyncRunnable
:
:
DispatchToThread
(
mainThread
runnable
)
;
return
;
}
UpdateUsableCodecs
(
)
;
}
const
Maybe
<
nsCString
>
GMPDecoderModule
:
:
PreferredGMP
(
const
nsACString
&
aMimeType
)
{
Maybe
<
nsCString
>
rv
;
if
(
aMimeType
.
EqualsLiteral
(
"
audio
/
mp4a
-
latm
"
)
)
{
switch
(
MediaPrefs
:
:
GMPAACPreferred
(
)
)
{
case
1
:
rv
.
emplace
(
NS_LITERAL_CSTRING
(
"
org
.
w3
.
clearkey
"
)
)
;
break
;
case
2
:
rv
.
emplace
(
NS_LITERAL_CSTRING
(
"
com
.
adobe
.
primetime
"
)
)
;
break
;
default
:
break
;
}
}
if
(
aMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
video
/
mp4
"
)
)
{
switch
(
MediaPrefs
:
:
GMPH264Preferred
(
)
)
{
case
1
:
rv
.
emplace
(
NS_LITERAL_CSTRING
(
"
org
.
w3
.
clearkey
"
)
)
;
break
;
case
2
:
rv
.
emplace
(
NS_LITERAL_CSTRING
(
"
com
.
adobe
.
primetime
"
)
)
;
break
;
default
:
break
;
}
}
return
rv
;
}
bool
GMPDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
const
Maybe
<
nsCString
>
&
aGMP
)
{
const
bool
isAAC
=
aMimeType
.
EqualsLiteral
(
"
audio
/
mp4a
-
latm
"
)
;
const
bool
isH264
=
aMimeType
.
EqualsLiteral
(
"
video
/
avc
"
)
|
|
aMimeType
.
EqualsLiteral
(
"
video
/
mp4
"
)
;
StaticMutexAutoLock
lock
(
sGMPCodecsMutex
)
;
for
(
GMPCodecs
&
gmp
:
sGMPCodecs
)
{
if
(
isAAC
&
&
gmp
.
mHasAAC
&
&
(
aGMP
.
isNothing
(
)
|
|
aGMP
.
value
(
)
.
EqualsASCII
(
gmp
.
mKeySystem
)
)
)
{
return
true
;
}
if
(
isH264
&
&
gmp
.
mHasH264
&
&
(
aGMP
.
isNothing
(
)
|
|
aGMP
.
value
(
)
.
EqualsASCII
(
gmp
.
mKeySystem
)
)
)
{
return
true
;
}
}
return
false
;
}
bool
GMPDecoderModule
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
DecoderDoctorDiagnostics
*
aDiagnostics
)
const
{
const
Maybe
<
nsCString
>
preferredGMP
=
PreferredGMP
(
aMimeType
)
;
bool
rv
=
SupportsMimeType
(
aMimeType
preferredGMP
)
;
if
(
rv
&
&
aDiagnostics
&
&
preferredGMP
.
isSome
(
)
)
{
aDiagnostics
-
>
SetGMP
(
preferredGMP
.
value
(
)
)
;
}
return
rv
;
}
}
