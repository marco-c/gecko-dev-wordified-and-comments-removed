#
include
"
PEMFactory
.
h
"
#
ifdef
MOZ_APPLEMEDIA
#
include
"
AppleEncoderModule
.
h
"
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
AndroidEncoderModule
.
h
"
#
endif
#
ifdef
XP_WIN
#
include
"
WMFEncoderModule
.
h
"
#
endif
namespace
mozilla
{
LazyLogModule
sPEMLog
(
"
PlatformEncoderModule
"
)
;
PEMFactory
:
:
PEMFactory
(
)
{
#
ifdef
MOZ_APPLEMEDIA
RefPtr
<
PlatformEncoderModule
>
m
(
new
AppleEncoderModule
(
)
)
;
mModules
.
AppendElement
(
m
)
;
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
mModules
.
AppendElement
(
new
AndroidEncoderModule
(
)
)
;
#
endif
#
ifdef
XP_WIN
mModules
.
AppendElement
(
new
WMFEncoderModule
(
)
)
;
#
endif
}
bool
PEMFactory
:
:
SupportsMimeType
(
const
nsACString
&
aMimeType
)
const
{
for
(
auto
m
:
mModules
)
{
if
(
m
-
>
SupportsMimeType
(
aMimeType
)
)
{
return
true
;
}
}
return
false
;
}
already_AddRefed
<
MediaDataEncoder
>
PEMFactory
:
:
CreateEncoder
(
const
CreateEncoderParams
&
aParams
const
bool
aHardwareNotAllowed
)
{
const
TrackInfo
&
info
=
aParams
.
mConfig
;
RefPtr
<
PlatformEncoderModule
>
m
=
FindPEM
(
info
)
;
if
(
!
m
)
{
return
nullptr
;
}
return
info
.
IsVideo
(
)
?
m
-
>
CreateVideoEncoder
(
aParams
aHardwareNotAllowed
)
:
nullptr
;
}
already_AddRefed
<
PlatformEncoderModule
>
PEMFactory
:
:
FindPEM
(
const
TrackInfo
&
aTrackInfo
)
const
{
RefPtr
<
PlatformEncoderModule
>
found
;
for
(
auto
m
:
mModules
)
{
if
(
m
-
>
SupportsMimeType
(
aTrackInfo
.
mMimeType
)
)
{
found
=
m
;
break
;
}
}
return
found
.
forget
(
)
;
}
}
