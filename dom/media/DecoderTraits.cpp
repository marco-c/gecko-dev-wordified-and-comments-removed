#
include
"
DecoderTraits
.
h
"
#
include
"
MediaContentType
.
h
"
#
include
"
MediaDecoder
.
h
"
#
include
"
nsCharSeparatedTokenizer
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
OggDecoder
.
h
"
#
include
"
OggDemuxer
.
h
"
#
include
"
WebMDecoder
.
h
"
#
include
"
WebMDemuxer
.
h
"
#
ifdef
MOZ_ANDROID_OMX
#
include
"
AndroidMediaDecoder
.
h
"
#
include
"
AndroidMediaReader
.
h
"
#
include
"
AndroidMediaPluginHost
.
h
"
#
endif
#
ifdef
MOZ_DIRECTSHOW
#
include
"
DirectShowDecoder
.
h
"
#
include
"
DirectShowReader
.
h
"
#
endif
#
ifdef
MOZ_FMP4
#
include
"
MP4Decoder
.
h
"
#
include
"
MP4Demuxer
.
h
"
#
endif
#
include
"
MediaFormatReader
.
h
"
#
include
"
MP3Decoder
.
h
"
#
include
"
MP3Demuxer
.
h
"
#
include
"
WaveDecoder
.
h
"
#
include
"
WaveDemuxer
.
h
"
#
include
"
ADTSDecoder
.
h
"
#
include
"
ADTSDemuxer
.
h
"
#
include
"
FlacDecoder
.
h
"
#
include
"
FlacDemuxer
.
h
"
#
include
"
nsPluginHost
.
h
"
#
include
"
MediaPrefs
.
h
"
namespace
mozilla
{
template
<
class
String
>
static
bool
CodecListContains
(
char
const
*
const
*
aCodecs
const
String
&
aCodec
)
{
for
(
int32_t
i
=
0
;
aCodecs
[
i
]
;
+
+
i
)
{
if
(
aCodec
.
EqualsASCII
(
aCodecs
[
i
]
)
)
return
true
;
}
return
false
;
}
static
char
const
*
const
gHttpLiveStreamingTypes
[
]
=
{
"
application
/
vnd
.
apple
.
mpegurl
"
"
application
/
x
-
mpegurl
"
"
audio
/
x
-
mpegurl
"
nullptr
}
;
static
bool
IsHttpLiveStreamingType
(
const
nsACString
&
aType
)
{
return
CodecListContains
(
gHttpLiveStreamingTypes
aType
)
;
}
#
ifdef
MOZ_ANDROID_OMX
static
bool
IsAndroidMediaType
(
const
nsACString
&
aType
)
{
if
(
!
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
)
{
return
false
;
}
static
const
char
*
supportedTypes
[
]
=
{
"
audio
/
mpeg
"
"
audio
/
mp4
"
"
video
/
mp4
"
"
video
/
x
-
m4v
"
nullptr
}
;
return
CodecListContains
(
supportedTypes
aType
)
;
}
#
endif
#
ifdef
MOZ_DIRECTSHOW
static
bool
IsDirectShowSupportedType
(
const
nsACString
&
aType
)
{
return
DirectShowDecoder
:
:
GetSupportedCodecs
(
aType
nullptr
)
;
}
#
endif
bool
DecoderTraits
:
:
IsMP4SupportedType
(
const
MediaContentType
&
aType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
#
ifdef
MOZ_FMP4
return
MP4Decoder
:
:
IsSupportedType
(
aType
aDiagnostics
)
;
#
else
return
false
;
#
endif
}
static
CanPlayStatus
CanHandleCodecsType
(
const
MediaContentType
&
aType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
MOZ_ASSERT
(
aType
.
ExtendedType
(
)
.
HaveCodecs
(
)
)
;
const
MediaContentType
mimeType
(
aType
.
Type
(
)
)
;
char
const
*
const
*
codecList
=
nullptr
;
if
(
OggDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
if
(
OggDecoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
else
{
return
CANPLAY_NO
;
}
}
if
(
WaveDecoder
:
:
IsSupportedType
(
MediaContentType
(
mimeType
)
)
)
{
if
(
WaveDecoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
else
{
return
CANPLAY_NO
;
}
}
#
if
!
defined
(
MOZ_OMX_WEBM_DECODER
)
if
(
WebMDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
if
(
WebMDecoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
else
{
return
CANPLAY_NO
;
}
}
#
endif
#
ifdef
MOZ_FMP4
if
(
MP4Decoder
:
:
IsSupportedType
(
mimeType
nullptr
)
)
{
if
(
MP4Decoder
:
:
IsSupportedType
(
aType
aDiagnostics
)
)
{
return
CANPLAY_YES
;
}
else
{
return
CANPLAY_NO
;
}
}
#
endif
if
(
MP3Decoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
if
(
ADTSDecoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
if
(
FlacDecoder
:
:
IsSupportedType
(
aType
)
)
{
return
CANPLAY_YES
;
}
#
ifdef
MOZ_DIRECTSHOW
DirectShowDecoder
:
:
GetSupportedCodecs
(
aType
.
Type
(
)
.
AsString
(
)
&
codecList
)
;
#
endif
#
ifdef
MOZ_ANDROID_OMX
if
(
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
)
{
EnsureAndroidMediaPluginHost
(
)
-
>
FindDecoder
(
aType
.
Type
(
)
.
AsString
(
)
&
codecList
)
;
}
#
endif
if
(
!
codecList
)
{
return
CANPLAY_MAYBE
;
}
nsCharSeparatedTokenizer
tokenizer
(
aType
.
ExtendedType
(
)
.
Codecs
(
)
.
AsString
(
)
'
'
)
;
bool
expectMoreTokens
=
false
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
const
nsSubstring
&
token
=
tokenizer
.
nextToken
(
)
;
if
(
!
CodecListContains
(
codecList
token
)
)
{
return
CANPLAY_NO
;
}
expectMoreTokens
=
tokenizer
.
separatorAfterCurrentToken
(
)
;
}
if
(
expectMoreTokens
)
{
return
CANPLAY_NO
;
}
return
CANPLAY_YES
;
}
static
CanPlayStatus
CanHandleMediaType
(
const
MediaContentType
&
aType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
IsHttpLiveStreamingType
(
aType
.
Type
(
)
.
AsString
(
)
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
MEDIA_HLS_CANPLAY_REQUESTED
true
)
;
}
if
(
aType
.
ExtendedType
(
)
.
HaveCodecs
(
)
)
{
CanPlayStatus
result
=
CanHandleCodecsType
(
aType
aDiagnostics
)
;
if
(
result
=
=
CANPLAY_NO
|
|
result
=
=
CANPLAY_YES
)
{
return
result
;
}
}
const
MediaContentType
mimeType
(
aType
.
Type
(
)
)
;
if
(
OggDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
if
(
WaveDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
#
ifdef
MOZ_FMP4
if
(
MP4Decoder
:
:
IsSupportedType
(
mimeType
aDiagnostics
)
)
{
return
CANPLAY_MAYBE
;
}
#
endif
#
if
!
defined
(
MOZ_OMX_WEBM_DECODER
)
if
(
WebMDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
#
endif
if
(
MP3Decoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
if
(
ADTSDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
if
(
FlacDecoder
:
:
IsSupportedType
(
mimeType
)
)
{
return
CANPLAY_MAYBE
;
}
#
ifdef
MOZ_DIRECTSHOW
if
(
DirectShowDecoder
:
:
GetSupportedCodecs
(
mimeType
.
Type
(
)
.
AsString
(
)
nullptr
)
)
{
return
CANPLAY_MAYBE
;
}
#
endif
#
ifdef
MOZ_ANDROID_OMX
if
(
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
&
&
EnsureAndroidMediaPluginHost
(
)
-
>
FindDecoder
(
mimeType
.
Type
(
)
.
AsString
(
)
nullptr
)
)
{
return
CANPLAY_MAYBE
;
}
#
endif
return
CANPLAY_NO
;
}
CanPlayStatus
DecoderTraits
:
:
CanHandleContentType
(
const
MediaContentType
&
aContentType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
return
CanHandleMediaType
(
aContentType
aDiagnostics
)
;
}
bool
DecoderTraits
:
:
ShouldHandleMediaType
(
const
char
*
aMIMEType
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
Maybe
<
MediaContentType
>
contentType
=
MakeMediaContentType
(
aMIMEType
)
;
if
(
!
contentType
)
{
return
false
;
}
if
(
WaveDecoder
:
:
IsSupportedType
(
*
contentType
)
)
{
return
false
;
}
if
(
contentType
-
>
Type
(
)
=
=
MEDIAMIMETYPE
(
"
video
/
quicktime
"
)
)
{
RefPtr
<
nsPluginHost
>
pluginHost
=
nsPluginHost
:
:
GetInst
(
)
;
if
(
pluginHost
&
&
pluginHost
-
>
HavePluginForType
(
contentType
-
>
Type
(
)
.
AsString
(
)
)
)
{
return
false
;
}
}
return
CanHandleMediaType
(
*
contentType
aDiagnostics
)
!
=
CANPLAY_NO
;
}
static
already_AddRefed
<
MediaDecoder
>
InstantiateDecoder
(
const
MediaContentType
&
aType
MediaDecoderOwner
*
aOwner
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RefPtr
<
MediaDecoder
>
decoder
;
#
ifdef
MOZ_FMP4
if
(
MP4Decoder
:
:
IsSupportedType
(
aType
aDiagnostics
)
)
{
decoder
=
new
MP4Decoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
#
endif
if
(
MP3Decoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
MP3Decoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
if
(
ADTSDecoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
ADTSDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
if
(
OggDecoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
OggDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
if
(
WaveDecoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
WaveDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
if
(
FlacDecoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
FlacDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
#
ifdef
MOZ_ANDROID_OMX
if
(
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
&
&
EnsureAndroidMediaPluginHost
(
)
-
>
FindDecoder
(
aType
.
Type
(
)
.
AsString
(
)
nullptr
)
)
{
decoder
=
new
AndroidMediaDecoder
(
aOwner
aType
.
Type
(
)
.
AsString
(
)
)
;
return
decoder
.
forget
(
)
;
}
#
endif
if
(
WebMDecoder
:
:
IsSupportedType
(
aType
)
)
{
decoder
=
new
WebMDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
#
ifdef
MOZ_DIRECTSHOW
if
(
IsDirectShowSupportedType
(
aType
.
Type
(
)
.
AsString
(
)
)
)
{
decoder
=
new
DirectShowDecoder
(
aOwner
)
;
return
decoder
.
forget
(
)
;
}
#
endif
if
(
IsHttpLiveStreamingType
(
aType
.
Type
(
)
.
AsString
(
)
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
MEDIA_HLS_DECODER_SUCCESS
false
)
;
}
return
nullptr
;
}
already_AddRefed
<
MediaDecoder
>
DecoderTraits
:
:
CreateDecoder
(
const
nsACString
&
aType
MediaDecoderOwner
*
aOwner
DecoderDoctorDiagnostics
*
aDiagnostics
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
Maybe
<
MediaContentType
>
type
=
MakeMediaContentType
(
aType
)
;
if
(
!
type
)
{
return
nullptr
;
}
return
InstantiateDecoder
(
*
type
aOwner
aDiagnostics
)
;
}
MediaDecoderReader
*
DecoderTraits
:
:
CreateReader
(
const
nsACString
&
aType
AbstractMediaDecoder
*
aDecoder
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MediaDecoderReader
*
decoderReader
=
nullptr
;
if
(
!
aDecoder
)
{
return
decoderReader
;
}
Maybe
<
MediaContentType
>
type
=
MakeMediaContentType
(
aType
)
;
if
(
!
type
)
{
return
decoderReader
;
}
#
ifdef
MOZ_FMP4
if
(
MP4Decoder
:
:
IsSupportedType
(
*
type
nullptr
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
MP4Demuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
#
endif
if
(
MP3Decoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
mp3
:
:
MP3Demuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
if
(
ADTSDecoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
ADTSDemuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
if
(
WaveDecoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
WAVDemuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
if
(
FlacDecoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
FlacDemuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
if
(
OggDecoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
OggDemuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
#
ifdef
MOZ_ANDROID_OMX
if
(
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
&
&
EnsureAndroidMediaPluginHost
(
)
-
>
FindDecoder
(
aType
nullptr
)
)
{
decoderReader
=
new
AndroidMediaReader
(
aDecoder
aType
)
;
}
else
#
endif
if
(
WebMDecoder
:
:
IsSupportedType
(
*
type
)
)
{
decoderReader
=
new
MediaFormatReader
(
aDecoder
new
WebMDemuxer
(
aDecoder
-
>
GetResource
(
)
)
)
;
}
else
#
ifdef
MOZ_DIRECTSHOW
if
(
IsDirectShowSupportedType
(
aType
)
)
{
decoderReader
=
new
DirectShowReader
(
aDecoder
)
;
}
else
#
endif
if
(
false
)
{
}
return
decoderReader
;
}
bool
DecoderTraits
:
:
IsSupportedInVideoDocument
(
const
nsACString
&
aType
)
{
if
(
!
Preferences
:
:
GetBool
(
"
media
.
windows
-
media
-
foundation
.
play
-
stand
-
alone
"
true
)
|
|
!
Preferences
:
:
GetBool
(
"
media
.
play
-
stand
-
alone
"
true
)
)
{
return
false
;
}
Maybe
<
MediaContentType
>
type
=
MakeMediaContentType
(
aType
)
;
if
(
!
type
)
{
return
false
;
}
return
OggDecoder
:
:
IsSupportedType
(
*
type
)
|
|
WebMDecoder
:
:
IsSupportedType
(
*
type
)
|
|
#
ifdef
MOZ_ANDROID_OMX
(
MediaDecoder
:
:
IsAndroidMediaPluginEnabled
(
)
&
&
IsAndroidMediaType
(
aType
)
)
|
|
#
endif
#
ifdef
MOZ_FMP4
MP4Decoder
:
:
IsSupportedType
(
*
type
nullptr
)
|
|
#
endif
MP3Decoder
:
:
IsSupportedType
(
*
type
)
|
|
ADTSDecoder
:
:
IsSupportedType
(
*
type
)
|
|
FlacDecoder
:
:
IsSupportedType
(
*
type
)
|
|
#
ifdef
MOZ_DIRECTSHOW
IsDirectShowSupportedType
(
aType
)
|
|
#
endif
false
;
}
}
