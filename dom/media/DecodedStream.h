#
ifndef
DecodedStream_h_
#
define
DecodedStream_h_
#
include
"
nsTArray
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
nsRefPtr
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
namespace
mozilla
{
class
DecodedStream
;
class
DecodedStreamData
;
class
MediaData
;
class
MediaInputPort
;
class
MediaStream
;
class
MediaStreamGraph
;
class
OutputStreamListener
;
class
OutputStreamManager
;
class
ProcessedMediaStream
;
class
ReentrantMonitor
;
template
<
class
T
>
class
MediaQueue
;
namespace
layers
{
class
Image
;
}
class
OutputStreamData
{
public
:
~
OutputStreamData
(
)
;
void
Init
(
OutputStreamManager
*
aOwner
ProcessedMediaStream
*
aStream
)
;
void
Connect
(
MediaStream
*
aStream
)
;
bool
Disconnect
(
)
;
void
Remove
(
)
;
bool
Equals
(
MediaStream
*
aStream
)
{
return
mStream
=
=
aStream
;
}
private
:
OutputStreamManager
*
mOwner
;
nsRefPtr
<
ProcessedMediaStream
>
mStream
;
nsRefPtr
<
MediaInputPort
>
mPort
;
nsRefPtr
<
OutputStreamListener
>
mListener
;
}
;
class
OutputStreamManager
{
public
:
void
Add
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
;
void
Remove
(
MediaStream
*
aStream
)
;
bool
IsEmpty
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mStreams
.
IsEmpty
(
)
;
}
void
Connect
(
MediaStream
*
aStream
)
;
void
Disconnect
(
)
;
private
:
nsRefPtr
<
MediaStream
>
mInputStream
;
nsTArray
<
OutputStreamData
>
mStreams
;
}
;
class
DecodedStream
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DecodedStream
)
;
public
:
DecodedStream
(
MediaQueue
<
MediaData
>
&
aAudioQueue
MediaQueue
<
MediaData
>
&
aVideoQueue
)
;
nsRefPtr
<
GenericPromise
>
StartPlayback
(
int64_t
aStartTime
const
MediaInfo
&
aInfo
)
;
void
StopPlayback
(
)
;
void
DestroyData
(
)
;
void
RecreateData
(
)
;
void
AddOutput
(
ProcessedMediaStream
*
aStream
bool
aFinishWhenEnded
)
;
void
RemoveOutput
(
MediaStream
*
aStream
)
;
void
SetPlaying
(
bool
aPlaying
)
;
void
SetVolume
(
double
aVolume
)
;
void
SetSameOrigin
(
bool
aSameOrigin
)
;
int64_t
AudioEndTime
(
)
const
;
int64_t
GetPosition
(
)
const
;
bool
IsFinished
(
)
const
;
bool
HasConsumers
(
)
const
;
void
SendData
(
)
;
protected
:
virtual
~
DecodedStream
(
)
;
private
:
ReentrantMonitor
&
GetReentrantMonitor
(
)
const
;
void
RecreateData
(
MediaStreamGraph
*
aGraph
)
;
void
InitTracks
(
)
;
void
AdvanceTracks
(
)
;
void
SendAudio
(
double
aVolume
bool
aIsSameOrigin
)
;
void
SendVideo
(
bool
aIsSameOrigin
)
;
UniquePtr
<
DecodedStreamData
>
mData
;
OutputStreamManager
mOutputStreamManager
;
mutable
ReentrantMonitor
mMonitor
;
bool
mPlaying
;
double
mVolume
;
bool
mSameOrigin
;
Maybe
<
int64_t
>
mStartTime
;
MediaInfo
mInfo
;
MediaQueue
<
MediaData
>
&
mAudioQueue
;
MediaQueue
<
MediaData
>
&
mVideoQueue
;
}
;
}
#
endif
