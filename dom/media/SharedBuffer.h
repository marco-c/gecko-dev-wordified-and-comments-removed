#
ifndef
MOZILLA_SHAREDBUFFER_H_
#
define
MOZILLA_SHAREDBUFFER_H_
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
class
AudioBlockBuffer
;
class
ThreadSharedFloatArrayBufferList
;
class
ThreadSharedObject
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
ThreadSharedObject
)
bool
IsShared
(
)
{
return
mRefCnt
.
get
(
)
>
1
;
}
virtual
AudioBlockBuffer
*
AsAudioBlockBuffer
(
)
{
return
nullptr
;
}
;
virtual
ThreadSharedFloatArrayBufferList
*
AsThreadSharedFloatArrayBufferList
(
)
{
return
nullptr
;
}
;
virtual
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
protected
:
virtual
~
ThreadSharedObject
(
)
=
default
;
}
;
class
SharedBuffer
:
public
ThreadSharedObject
{
public
:
void
*
Data
(
)
{
return
this
+
1
;
}
static
already_AddRefed
<
SharedBuffer
>
Create
(
CheckedInt
<
size_t
>
&
aSize
const
fallible_t
&
)
{
CheckedInt
<
size_t
>
allocSize
=
AllocSize
(
aSize
fallible
)
;
if
(
!
allocSize
.
isValid
(
)
)
{
return
nullptr
;
}
void
*
m
=
operator
new
(
allocSize
.
value
(
)
fallible
)
;
if
(
!
m
)
{
return
nullptr
;
}
RefPtr
<
SharedBuffer
>
p
=
new
(
m
)
SharedBuffer
(
)
;
return
p
.
forget
(
)
;
}
static
already_AddRefed
<
SharedBuffer
>
Create
(
CheckedInt
<
size_t
>
&
aSize
)
{
void
*
m
=
operator
new
(
AllocSize
(
aSize
)
)
;
RefPtr
<
SharedBuffer
>
p
=
new
(
m
)
SharedBuffer
(
)
;
return
p
.
forget
(
)
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
private
:
static
CheckedInt
<
size_t
>
AllocSize
(
CheckedInt
<
size_t
>
aDataSize
const
fallible_t
&
)
{
CheckedInt
<
size_t
>
size
=
sizeof
(
SharedBuffer
)
;
size
+
=
aDataSize
;
return
size
;
}
static
size_t
AllocSize
(
CheckedInt
<
size_t
>
aDataSize
)
{
CheckedInt
<
size_t
>
size
=
AllocSize
(
aDataSize
fallible
)
;
if
(
!
size
.
isValid
(
)
)
{
MOZ_CRASH
(
)
;
}
return
size
.
value
(
)
;
}
SharedBuffer
(
)
{
NS_ASSERTION
(
(
reinterpret_cast
<
char
*
>
(
this
+
1
)
-
reinterpret_cast
<
char
*
>
(
this
)
)
%
4
=
=
0
"
SharedBuffers
should
be
at
least
4
-
byte
aligned
"
)
;
}
}
;
}
#
endif
