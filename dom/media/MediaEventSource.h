#
ifndef
MediaEventSource_h_
#
define
MediaEventSource_h_
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
IndexSequence
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
class
RevocableToken
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
RevocableToken
)
;
public
:
RevocableToken
(
)
:
mRevoked
(
false
)
{
}
void
Revoke
(
)
{
mRevoked
=
true
;
}
bool
IsRevoked
(
)
const
{
return
mRevoked
;
}
protected
:
virtual
~
RevocableToken
(
)
{
}
private
:
Atomic
<
bool
>
mRevoked
;
}
;
enum
class
ListenerPolicy
:
int8_t
{
Exclusive
NonExclusive
}
;
namespace
detail
{
template
<
typename
T
>
struct
EventTypeTraits
{
typedef
T
ArgType
;
}
;
template
<
>
struct
EventTypeTraits
<
void
>
{
typedef
bool
ArgType
;
}
;
template
<
typename
T
>
class
TakeArgsHelper
{
template
<
typename
C
>
static
FalseType
test
(
void
(
C
:
:
*
)
(
)
int
)
;
template
<
typename
C
>
static
FalseType
test
(
void
(
C
:
:
*
)
(
)
const
int
)
;
template
<
typename
C
>
static
FalseType
test
(
void
(
C
:
:
*
)
(
)
volatile
int
)
;
template
<
typename
C
>
static
FalseType
test
(
void
(
C
:
:
*
)
(
)
const
volatile
int
)
;
template
<
typename
F
>
static
FalseType
test
(
F
&
&
decltype
(
DeclVal
<
F
>
(
)
(
)
0
)
)
;
static
TrueType
test
(
.
.
.
)
;
public
:
typedef
decltype
(
test
(
DeclVal
<
T
>
(
)
0
)
)
Type
;
}
;
template
<
typename
T
>
struct
TakeArgs
:
public
TakeArgsHelper
<
T
>
:
:
Type
{
}
;
template
<
typename
T
>
struct
EventTarget
;
template
<
>
struct
EventTarget
<
nsIEventTarget
>
{
static
void
Dispatch
(
nsIEventTarget
*
aTarget
already_AddRefed
<
nsIRunnable
>
aTask
)
{
aTarget
-
>
Dispatch
(
Move
(
aTask
)
NS_DISPATCH_NORMAL
)
;
}
}
;
template
<
>
struct
EventTarget
<
AbstractThread
>
{
static
void
Dispatch
(
AbstractThread
*
aTarget
already_AddRefed
<
nsIRunnable
>
aTask
)
{
aTarget
-
>
Dispatch
(
Move
(
aTask
)
AbstractThread
:
:
DontAssertDispatchSuccess
)
;
}
}
;
template
<
typename
T
>
class
RawPtr
{
public
:
explicit
RawPtr
(
T
*
aPtr
)
:
mPtr
(
aPtr
)
{
}
T
*
get
(
)
const
{
return
mPtr
;
}
private
:
T
*
const
mPtr
;
}
;
template
<
typename
.
.
.
As
>
class
Listener
:
public
RevocableToken
{
public
:
template
<
typename
.
.
.
Ts
>
void
Dispatch
(
Ts
&
&
.
.
.
aEvents
)
{
if
(
CanTakeArgs
(
)
)
{
DispatchTask
(
NewRunnableMethod
<
typename
Decay
<
Ts
>
:
:
Type
&
&
.
.
.
>
(
this
&
Listener
:
:
ApplyWithArgs
Forward
<
Ts
>
(
aEvents
)
.
.
.
)
)
;
}
else
{
DispatchTask
(
NewRunnableMethod
(
this
&
Listener
:
:
ApplyWithNoArgs
)
)
;
}
}
protected
:
virtual
~
Listener
(
)
{
MOZ_ASSERT
(
IsRevoked
(
)
"
Must
disconnect
the
listener
.
"
)
;
}
private
:
virtual
void
DispatchTask
(
already_AddRefed
<
nsIRunnable
>
aTask
)
=
0
;
virtual
bool
CanTakeArgs
(
)
const
=
0
;
virtual
void
ApplyWithArgs
(
As
&
&
.
.
.
aEvents
)
=
0
;
virtual
void
ApplyWithNoArgs
(
)
=
0
;
}
;
template
<
typename
Target
typename
Function
typename
.
.
.
As
>
class
ListenerImpl
:
public
Listener
<
As
.
.
.
>
{
using
FunctionStorage
=
typename
Decay
<
Function
>
:
:
Type
;
public
:
template
<
typename
F
>
ListenerImpl
(
Target
*
aTarget
F
&
&
aFunction
)
:
mTarget
(
aTarget
)
mFunction
(
Forward
<
F
>
(
aFunction
)
)
{
}
private
:
void
DispatchTask
(
already_AddRefed
<
nsIRunnable
>
aTask
)
override
{
EventTarget
<
Target
>
:
:
Dispatch
(
mTarget
.
get
(
)
Move
(
aTask
)
)
;
}
bool
CanTakeArgs
(
)
const
override
{
return
TakeArgs
<
FunctionStorage
>
:
:
value
;
}
template
<
typename
F
>
typename
EnableIf
<
TakeArgs
<
F
>
:
:
value
void
>
:
:
Type
ApplyWithArgsImpl
(
const
F
&
aFunc
As
&
&
.
.
.
aEvents
)
{
aFunc
(
Move
(
aEvents
)
.
.
.
)
;
}
template
<
typename
F
>
typename
EnableIf
<
!
TakeArgs
<
F
>
:
:
value
void
>
:
:
Type
ApplyWithArgsImpl
(
const
F
&
aFunc
As
&
&
.
.
.
aEvents
)
{
MOZ_CRASH
(
"
Call
ApplyWithNoArgs
instead
.
"
)
;
}
void
ApplyWithArgs
(
As
&
&
.
.
.
aEvents
)
override
{
MOZ_RELEASE_ASSERT
(
TakeArgs
<
Function
>
:
:
value
)
;
if
(
!
RevocableToken
:
:
IsRevoked
(
)
)
{
ApplyWithArgsImpl
(
mFunction
Move
(
aEvents
)
.
.
.
)
;
}
}
template
<
typename
F
>
typename
EnableIf
<
TakeArgs
<
F
>
:
:
value
void
>
:
:
Type
ApplyWithNoArgsImpl
(
const
F
&
aFunc
)
{
MOZ_CRASH
(
"
Call
ApplyWithArgs
instead
.
"
)
;
}
template
<
typename
F
>
typename
EnableIf
<
!
TakeArgs
<
F
>
:
:
value
void
>
:
:
Type
ApplyWithNoArgsImpl
(
const
F
&
aFunc
)
{
aFunc
(
)
;
}
virtual
void
ApplyWithNoArgs
(
)
override
{
MOZ_RELEASE_ASSERT
(
!
TakeArgs
<
Function
>
:
:
value
)
;
if
(
!
RevocableToken
:
:
IsRevoked
(
)
)
{
ApplyWithNoArgsImpl
(
mFunction
)
;
}
}
const
RefPtr
<
Target
>
mTarget
;
FunctionStorage
mFunction
;
}
;
template
<
typename
Head
typename
.
.
.
Tails
>
struct
IsAnyReference
{
static
const
bool
value
=
IsReference
<
Head
>
:
:
value
|
|
IsAnyReference
<
Tails
.
.
.
>
:
:
value
;
}
;
template
<
typename
T
>
struct
IsAnyReference
<
T
>
{
static
const
bool
value
=
IsReference
<
T
>
:
:
value
;
}
;
}
template
<
ListenerPolicy
typename
.
.
.
Ts
>
class
MediaEventSourceImpl
;
class
MediaEventListener
{
template
<
ListenerPolicy
typename
.
.
.
Ts
>
friend
class
MediaEventSourceImpl
;
public
:
MediaEventListener
(
)
{
}
MediaEventListener
(
MediaEventListener
&
&
aOther
)
:
mToken
(
Move
(
aOther
.
mToken
)
)
{
}
MediaEventListener
&
operator
=
(
MediaEventListener
&
&
aOther
)
{
MOZ_ASSERT
(
!
mToken
"
Must
disconnect
the
listener
.
"
)
;
mToken
=
Move
(
aOther
.
mToken
)
;
return
*
this
;
}
~
MediaEventListener
(
)
{
MOZ_ASSERT
(
!
mToken
"
Must
disconnect
the
listener
.
"
)
;
}
void
Disconnect
(
)
{
mToken
-
>
Revoke
(
)
;
mToken
=
nullptr
;
}
void
DisconnectIfExists
(
)
{
if
(
mToken
)
{
Disconnect
(
)
;
}
}
private
:
explicit
MediaEventListener
(
RevocableToken
*
aToken
)
:
mToken
(
aToken
)
{
}
RefPtr
<
RevocableToken
>
mToken
;
}
;
template
<
ListenerPolicy
Lp
typename
.
.
.
Es
>
class
MediaEventSourceImpl
{
static_assert
(
!
detail
:
:
IsAnyReference
<
Es
.
.
.
>
:
:
value
"
Ref
-
type
not
supported
!
"
)
;
template
<
typename
T
>
using
ArgType
=
typename
detail
:
:
EventTypeTraits
<
T
>
:
:
ArgType
;
typedef
detail
:
:
Listener
<
ArgType
<
Es
>
.
.
.
>
Listener
;
template
<
typename
Target
typename
Func
>
using
ListenerImpl
=
detail
:
:
ListenerImpl
<
Target
Func
ArgType
<
Es
>
.
.
.
>
;
template
<
typename
Method
>
using
TakeArgs
=
detail
:
:
TakeArgs
<
Method
>
;
void
PruneListeners
(
)
{
int32_t
last
=
static_cast
<
int32_t
>
(
mListeners
.
Length
(
)
)
-
1
;
for
(
int32_t
i
=
last
;
i
>
=
0
;
-
-
i
)
{
if
(
mListeners
[
i
]
-
>
IsRevoked
(
)
)
{
mListeners
.
RemoveElementAt
(
i
)
;
}
}
}
template
<
typename
Target
typename
Function
>
MediaEventListener
ConnectInternal
(
Target
*
aTarget
Function
&
&
aFunction
)
{
MutexAutoLock
lock
(
mMutex
)
;
PruneListeners
(
)
;
MOZ_ASSERT
(
Lp
=
=
ListenerPolicy
:
:
NonExclusive
|
|
mListeners
.
IsEmpty
(
)
)
;
auto
l
=
mListeners
.
AppendElement
(
)
;
*
l
=
new
ListenerImpl
<
Target
Function
>
(
aTarget
Forward
<
Function
>
(
aFunction
)
)
;
return
MediaEventListener
(
*
l
)
;
}
template
<
typename
Target
typename
This
typename
Method
>
typename
EnableIf
<
TakeArgs
<
Method
>
:
:
value
MediaEventListener
>
:
:
Type
ConnectInternal
(
Target
*
aTarget
This
*
aThis
Method
aMethod
)
{
detail
:
:
RawPtr
<
This
>
thiz
(
aThis
)
;
return
ConnectInternal
(
aTarget
[
=
]
(
ArgType
<
Es
>
&
&
.
.
.
aEvents
)
{
(
thiz
.
get
(
)
-
>
*
aMethod
)
(
Move
(
aEvents
)
.
.
.
)
;
}
)
;
}
template
<
typename
Target
typename
This
typename
Method
>
typename
EnableIf
<
!
TakeArgs
<
Method
>
:
:
value
MediaEventListener
>
:
:
Type
ConnectInternal
(
Target
*
aTarget
This
*
aThis
Method
aMethod
)
{
detail
:
:
RawPtr
<
This
>
thiz
(
aThis
)
;
return
ConnectInternal
(
aTarget
[
=
]
(
)
{
(
thiz
.
get
(
)
-
>
*
aMethod
)
(
)
;
}
)
;
}
public
:
template
<
typename
Function
>
MediaEventListener
Connect
(
AbstractThread
*
aTarget
Function
&
&
aFunction
)
{
return
ConnectInternal
(
aTarget
Forward
<
Function
>
(
aFunction
)
)
;
}
template
<
typename
Function
>
MediaEventListener
Connect
(
nsIEventTarget
*
aTarget
Function
&
&
aFunction
)
{
return
ConnectInternal
(
aTarget
Forward
<
Function
>
(
aFunction
)
)
;
}
template
<
typename
This
typename
Method
>
MediaEventListener
Connect
(
AbstractThread
*
aTarget
This
*
aThis
Method
aMethod
)
{
return
ConnectInternal
(
aTarget
aThis
aMethod
)
;
}
template
<
typename
This
typename
Method
>
MediaEventListener
Connect
(
nsIEventTarget
*
aTarget
This
*
aThis
Method
aMethod
)
{
return
ConnectInternal
(
aTarget
aThis
aMethod
)
;
}
protected
:
MediaEventSourceImpl
(
)
:
mMutex
(
"
MediaEventSourceImpl
:
:
mMutex
"
)
{
}
template
<
typename
.
.
.
Ts
>
void
NotifyInternal
(
Ts
&
&
.
.
.
aEvents
)
{
MutexAutoLock
lock
(
mMutex
)
;
int32_t
last
=
static_cast
<
int32_t
>
(
mListeners
.
Length
(
)
)
-
1
;
for
(
int32_t
i
=
last
;
i
>
=
0
;
-
-
i
)
{
auto
&
&
l
=
mListeners
[
i
]
;
if
(
l
-
>
IsRevoked
(
)
)
{
mListeners
.
RemoveElementAt
(
i
)
;
continue
;
}
l
-
>
Dispatch
(
Forward
<
Ts
>
(
aEvents
)
.
.
.
)
;
}
}
private
:
Mutex
mMutex
;
nsTArray
<
RefPtr
<
Listener
>
>
mListeners
;
}
;
template
<
typename
.
.
.
Es
>
using
MediaEventSource
=
MediaEventSourceImpl
<
ListenerPolicy
:
:
NonExclusive
Es
.
.
.
>
;
template
<
typename
.
.
.
Es
>
using
MediaEventSourceExc
=
MediaEventSourceImpl
<
ListenerPolicy
:
:
Exclusive
Es
.
.
.
>
;
template
<
typename
.
.
.
Es
>
class
MediaEventProducer
:
public
MediaEventSource
<
Es
.
.
.
>
{
public
:
template
<
typename
.
.
.
Ts
>
void
Notify
(
Ts
&
&
.
.
.
aEvents
)
{
this
-
>
NotifyInternal
(
aEvents
.
.
.
)
;
}
}
;
template
<
>
class
MediaEventProducer
<
void
>
:
public
MediaEventSource
<
void
>
{
public
:
void
Notify
(
)
{
this
-
>
NotifyInternal
(
true
)
;
}
}
;
template
<
typename
.
.
.
Es
>
class
MediaEventProducerExc
:
public
MediaEventSourceExc
<
Es
.
.
.
>
{
public
:
template
<
typename
.
.
.
Ts
>
void
Notify
(
Ts
&
&
.
.
.
aEvents
)
{
this
-
>
NotifyInternal
(
Forward
<
Ts
>
(
aEvents
)
.
.
.
)
;
}
}
;
}
#
endif
