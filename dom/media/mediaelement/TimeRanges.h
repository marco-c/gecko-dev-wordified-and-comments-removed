#
ifndef
mozilla_dom_TimeRanges_h_
#
define
mozilla_dom_TimeRanges_h_
#
include
"
TimeUnits
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
TimeRanges
;
}
namespace
dom
{
class
TimeRanges
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
TimeRanges
)
TimeRanges
(
)
;
explicit
TimeRanges
(
nsISupports
*
aParent
)
;
explicit
TimeRanges
(
const
media
:
:
TimeIntervals
&
aTimeIntervals
)
;
explicit
TimeRanges
(
const
media
:
:
TimeRanges
&
aTimeRanges
)
;
TimeRanges
(
nsISupports
*
aParent
const
media
:
:
TimeIntervals
&
aTimeIntervals
)
;
TimeRanges
(
nsISupports
*
aParent
const
media
:
:
TimeRanges
&
aTimeRanges
)
;
media
:
:
TimeIntervals
ToTimeIntervals
(
)
const
;
void
Add
(
double
aStart
double
aEnd
)
;
double
GetStartTime
(
)
;
double
GetEndTime
(
)
;
void
Normalize
(
double
aTolerance
=
0
.
0
)
;
void
Union
(
const
TimeRanges
*
aOtherRanges
double
aTolerance
)
;
void
Intersection
(
const
TimeRanges
*
aOtherRanges
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsISupports
*
GetParentObject
(
)
const
;
uint32_t
Length
(
)
const
{
return
mRanges
.
Length
(
)
;
}
double
Start
(
uint32_t
aIndex
ErrorResult
&
aRv
)
const
;
double
End
(
uint32_t
aIndex
ErrorResult
&
aRv
)
const
;
double
Start
(
uint32_t
aIndex
)
const
{
return
mRanges
[
aIndex
]
.
mStart
;
}
double
End
(
uint32_t
aIndex
)
const
{
return
mRanges
[
aIndex
]
.
mEnd
;
}
void
Shift
(
double
aOffset
)
;
private
:
~
TimeRanges
(
)
;
struct
TimeRange
{
TimeRange
(
double
aStart
double
aEnd
)
:
mStart
(
aStart
)
mEnd
(
aEnd
)
{
}
double
mStart
;
double
mEnd
;
}
;
struct
CompareTimeRanges
{
bool
Equals
(
const
TimeRange
&
aTr1
const
TimeRange
&
aTr2
)
const
{
return
aTr1
.
mStart
=
=
aTr2
.
mStart
&
&
aTr1
.
mEnd
=
=
aTr2
.
mEnd
;
}
bool
LessThan
(
const
TimeRange
&
aTr1
const
TimeRange
&
aTr2
)
const
{
return
aTr1
.
mStart
<
aTr2
.
mStart
;
}
}
;
AutoTArray
<
TimeRange
4
>
mRanges
;
nsCOMPtr
<
nsISupports
>
mParent
;
public
:
typedef
nsTArray
<
TimeRange
>
:
:
index_type
index_type
;
static
const
index_type
NoIndex
=
index_type
(
-
1
)
;
index_type
Find
(
double
aTime
double
aTolerance
=
0
)
;
bool
Contains
(
double
aStart
double
aEnd
)
{
index_type
target
=
Find
(
aStart
)
;
if
(
target
=
=
NoIndex
)
{
return
false
;
}
return
mRanges
[
target
]
.
mEnd
>
=
aEnd
;
}
}
;
}
}
#
endif
