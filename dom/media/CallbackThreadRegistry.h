#
ifndef
CALLBACKTHREADREGISTRY_H
#
define
CALLBACKTHREADREGISTRY_H
#
include
<
GeckoProfiler
.
h
>
#
include
<
mozilla
/
DataMutex
.
h
>
#
include
<
nsTArray
.
h
>
#
include
<
cstdint
>
#
include
<
thread
>
namespace
mozilla
{
class
CallbackThreadRegistry
final
{
public
:
CallbackThreadRegistry
(
)
;
~
CallbackThreadRegistry
(
)
{
}
CallbackThreadRegistry
(
const
CallbackThreadRegistry
&
)
=
delete
;
CallbackThreadRegistry
&
operator
=
(
const
CallbackThreadRegistry
&
)
=
delete
;
CallbackThreadRegistry
(
CallbackThreadRegistry
&
&
)
=
delete
;
CallbackThreadRegistry
&
operator
=
(
CallbackThreadRegistry
&
&
)
=
delete
;
static
CallbackThreadRegistry
*
Get
(
)
;
void
Register
(
ProfilerThreadId
aThreadId
const
char
*
aName
)
;
void
Unregister
(
ProfilerThreadId
aThreadId
)
;
private
:
struct
ThreadUserCount
{
ProfilerThreadId
mId
;
int
mUserCount
=
0
;
}
;
DataMutex
<
nsTArray
<
ThreadUserCount
>
>
mThreadIds
;
}
;
}
#
endif
