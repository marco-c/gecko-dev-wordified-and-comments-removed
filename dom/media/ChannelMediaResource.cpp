#
include
"
ChannelMediaResource
.
h
"
#
include
"
mozilla
/
dom
/
HTMLMediaElement
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsICachingChannel
.
h
"
#
include
"
nsIClassOfService
.
h
"
#
include
"
nsNetUtil
.
h
"
static
const
uint32_t
HTTP_PARTIAL_RESPONSE_CODE
=
206
;
static
const
uint32_t
HTTP_OK_CODE
=
200
;
mozilla
:
:
LazyLogModule
gMediaResourceLog
(
"
MediaResource
"
)
;
#
define
LOG
(
msg
.
.
.
)
MOZ_LOG
(
gMediaResourceLog
mozilla
:
:
LogLevel
:
:
Debug
\
(
"
%
p
"
msg
this
#
#
__VA_ARGS__
)
)
namespace
mozilla
{
ChannelMediaResource
:
:
ChannelMediaResource
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
nsIURI
*
aURI
bool
aIsPrivateBrowsing
)
:
BaseMediaResource
(
aCallback
aChannel
aURI
)
mReopenOnError
(
false
)
mCacheStream
(
this
aIsPrivateBrowsing
)
mSuspendAgent
(
mChannel
)
{
}
ChannelMediaResource
:
:
ChannelMediaResource
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
nsIURI
*
aURI
const
MediaChannelStatistics
&
aStatistics
)
:
BaseMediaResource
(
aCallback
aChannel
aURI
)
mReopenOnError
(
false
)
mCacheStream
(
this
false
)
mChannelStatistics
(
aStatistics
)
mSuspendAgent
(
mChannel
)
{
}
ChannelMediaResource
:
:
~
ChannelMediaResource
(
)
{
MOZ_ASSERT
(
!
mChannel
)
;
MOZ_ASSERT
(
!
mListener
)
;
}
NS_IMPL_ISUPPORTS
(
ChannelMediaResource
:
:
Listener
nsIRequestObserver
nsIStreamListener
nsIChannelEventSink
nsIInterfaceRequestor
nsIThreadRetargetableStreamListener
)
nsresult
ChannelMediaResource
:
:
Listener
:
:
OnStartRequest
(
nsIRequest
*
aRequest
nsISupports
*
aContext
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mResource
)
return
NS_OK
;
return
mResource
-
>
OnStartRequest
(
aRequest
mOffset
)
;
}
nsresult
ChannelMediaResource
:
:
Listener
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsresult
aStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mResource
)
return
NS_OK
;
return
mResource
-
>
OnStopRequest
(
aRequest
aStatus
)
;
}
nsresult
ChannelMediaResource
:
:
Listener
:
:
OnDataAvailable
(
nsIRequest
*
aRequest
nsISupports
*
aContext
nsIInputStream
*
aStream
uint64_t
aOffset
uint32_t
aCount
)
{
RefPtr
<
ChannelMediaResource
>
res
;
{
MutexAutoLock
lock
(
mMutex
)
;
res
=
mResource
;
}
return
res
?
res
-
>
OnDataAvailable
(
mLoadID
aStream
aCount
)
:
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
Listener
:
:
AsyncOnChannelRedirect
(
nsIChannel
*
aOld
nsIChannel
*
aNew
uint32_t
aFlags
nsIAsyncVerifyRedirectCallback
*
cb
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsresult
rv
=
NS_OK
;
if
(
mResource
)
{
rv
=
mResource
-
>
OnChannelRedirect
(
aOld
aNew
aFlags
mOffset
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
cb
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
Listener
:
:
CheckListenerChain
(
)
{
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
Listener
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
return
QueryInterface
(
aIID
aResult
)
;
}
void
ChannelMediaResource
:
:
Listener
:
:
Revoke
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MutexAutoLock
lock
(
mMutex
)
;
mResource
=
nullptr
;
}
static
bool
IsPayloadCompressed
(
nsIHttpChannel
*
aChannel
)
{
nsAutoCString
encoding
;
Unused
<
<
aChannel
-
>
GetResponseHeader
(
NS_LITERAL_CSTRING
(
"
Content
-
Encoding
"
)
encoding
)
;
return
encoding
.
Length
(
)
>
0
;
}
nsresult
ChannelMediaResource
:
:
OnStartRequest
(
nsIRequest
*
aRequest
int64_t
aRequestOffset
)
{
NS_ASSERTION
(
mChannel
.
get
(
)
=
=
aRequest
"
Wrong
channel
!
"
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
NS_ENSURE_TRUE
(
owner
NS_ERROR_FAILURE
)
;
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
NS_ENSURE_TRUE
(
element
NS_ERROR_FAILURE
)
;
nsresult
status
;
nsresult
rv
=
aRequest
-
>
GetStatus
(
&
status
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
status
=
=
NS_BINDING_ABORTED
)
{
CloseChannel
(
)
;
return
status
;
}
if
(
element
-
>
ShouldCheckAllowOrigin
(
)
)
{
if
(
status
=
=
NS_ERROR_DOM_BAD_URI
)
{
mCallback
-
>
NotifyNetworkError
(
)
;
return
NS_ERROR_DOM_BAD_URI
;
}
}
nsCOMPtr
<
nsIHttpChannel
>
hc
=
do_QueryInterface
(
aRequest
)
;
bool
seekable
=
false
;
int64_t
startOffset
=
aRequestOffset
;
if
(
hc
)
{
uint32_t
responseStatus
=
0
;
Unused
<
<
hc
-
>
GetResponseStatus
(
&
responseStatus
)
;
bool
succeeded
=
false
;
Unused
<
<
hc
-
>
GetRequestSucceeded
(
&
succeeded
)
;
if
(
!
succeeded
&
&
NS_SUCCEEDED
(
status
)
)
{
if
(
responseStatus
=
=
HTTP_REQUESTED_RANGE_NOT_SATISFIABLE_CODE
)
{
mCacheStream
.
NotifyDataEnded
(
status
)
;
}
else
{
mCallback
-
>
NotifyNetworkError
(
)
;
}
CloseChannel
(
)
;
return
NS_OK
;
}
nsAutoCString
ranges
;
Unused
<
<
hc
-
>
GetResponseHeader
(
NS_LITERAL_CSTRING
(
"
Accept
-
Ranges
"
)
ranges
)
;
bool
acceptsRanges
=
ranges
.
EqualsLiteral
(
"
bytes
"
)
;
int64_t
contentLength
=
-
1
;
const
bool
isCompressed
=
IsPayloadCompressed
(
hc
)
;
if
(
!
isCompressed
)
{
hc
-
>
GetContentLength
(
&
contentLength
)
;
}
if
(
!
isCompressed
&
&
responseStatus
=
=
HTTP_PARTIAL_RESPONSE_CODE
)
{
int64_t
rangeStart
=
0
;
int64_t
rangeEnd
=
0
;
int64_t
rangeTotal
=
0
;
rv
=
ParseContentRangeHeader
(
hc
rangeStart
rangeEnd
rangeTotal
)
;
bool
gotRangeHeader
=
NS_SUCCEEDED
(
rv
)
;
if
(
gotRangeHeader
)
{
startOffset
=
rangeStart
;
if
(
rangeTotal
!
=
-
1
)
{
contentLength
=
std
:
:
max
(
contentLength
rangeTotal
)
;
}
}
acceptsRanges
=
gotRangeHeader
;
}
else
if
(
responseStatus
=
=
HTTP_OK_CODE
)
{
startOffset
=
0
;
if
(
aRequestOffset
>
0
)
{
acceptsRanges
=
false
;
}
}
if
(
aRequestOffset
=
=
0
&
&
contentLength
>
=
0
&
&
(
responseStatus
=
=
HTTP_OK_CODE
|
|
responseStatus
=
=
HTTP_PARTIAL_RESPONSE_CODE
)
)
{
mCacheStream
.
NotifyDataLength
(
contentLength
)
;
}
seekable
=
!
isCompressed
&
&
acceptsRanges
;
}
else
{
startOffset
=
0
;
}
UpdatePrincipal
(
)
;
mCacheStream
.
NotifyDataStarted
(
mLoadID
startOffset
)
;
mCacheStream
.
SetTransportSeekable
(
seekable
)
;
mChannelStatistics
.
Start
(
)
;
mReopenOnError
=
false
;
mSuspendAgent
.
UpdateSuspendedStatusIfNeeded
(
)
;
owner
-
>
DownloadProgressed
(
)
;
return
NS_OK
;
}
bool
ChannelMediaResource
:
:
IsTransportSeekable
(
)
{
return
mCacheStream
.
IsTransportSeekable
(
)
;
}
nsresult
ChannelMediaResource
:
:
ParseContentRangeHeader
(
nsIHttpChannel
*
aHttpChan
int64_t
&
aRangeStart
int64_t
&
aRangeEnd
int64_t
&
aRangeTotal
)
{
NS_ENSURE_ARG
(
aHttpChan
)
;
nsAutoCString
rangeStr
;
nsresult
rv
=
aHttpChan
-
>
GetResponseHeader
(
NS_LITERAL_CSTRING
(
"
Content
-
Range
"
)
rangeStr
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_FALSE
(
rangeStr
.
IsEmpty
(
)
NS_ERROR_ILLEGAL_VALUE
)
;
int32_t
spacePos
=
rangeStr
.
Find
(
NS_LITERAL_CSTRING
(
"
"
)
)
;
int32_t
dashPos
=
rangeStr
.
Find
(
NS_LITERAL_CSTRING
(
"
-
"
)
true
spacePos
)
;
int32_t
slashPos
=
rangeStr
.
Find
(
NS_LITERAL_CSTRING
(
"
/
"
)
true
dashPos
)
;
nsAutoCString
aRangeStartText
;
rangeStr
.
Mid
(
aRangeStartText
spacePos
+
1
dashPos
-
(
spacePos
+
1
)
)
;
aRangeStart
=
aRangeStartText
.
ToInteger64
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
0
<
=
aRangeStart
NS_ERROR_ILLEGAL_VALUE
)
;
nsAutoCString
aRangeEndText
;
rangeStr
.
Mid
(
aRangeEndText
dashPos
+
1
slashPos
-
(
dashPos
+
1
)
)
;
aRangeEnd
=
aRangeEndText
.
ToInteger64
(
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
aRangeStart
<
aRangeEnd
NS_ERROR_ILLEGAL_VALUE
)
;
nsAutoCString
aRangeTotalText
;
rangeStr
.
Right
(
aRangeTotalText
rangeStr
.
Length
(
)
-
(
slashPos
+
1
)
)
;
if
(
aRangeTotalText
[
0
]
=
=
'
*
'
)
{
aRangeTotal
=
-
1
;
}
else
{
aRangeTotal
=
aRangeTotalText
.
ToInteger64
(
&
rv
)
;
NS_ENSURE_TRUE
(
aRangeEnd
<
aRangeTotal
NS_ERROR_ILLEGAL_VALUE
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
LOG
(
"
Received
bytes
[
%
"
PRId64
"
]
to
[
%
"
PRId64
"
]
of
[
%
"
PRId64
"
]
for
decoder
[
%
p
]
"
aRangeStart
aRangeEnd
aRangeTotal
mCallback
.
get
(
)
)
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatus
)
{
NS_ASSERTION
(
mChannel
.
get
(
)
=
=
aRequest
"
Wrong
channel
!
"
)
;
NS_ASSERTION
(
!
mSuspendAgent
.
IsSuspended
(
)
"
How
can
OnStopRequest
fire
while
we
'
re
suspended
?
"
)
;
mChannelStatistics
.
Stop
(
)
;
if
(
mReopenOnError
&
&
aStatus
!
=
NS_ERROR_PARSED_DATA_CACHED
&
&
aStatus
!
=
NS_BINDING_ABORTED
&
&
(
GetOffset
(
)
=
=
0
|
|
(
GetLength
(
)
>
0
&
&
GetOffset
(
)
!
=
GetLength
(
)
&
&
mCacheStream
.
IsTransportSeekable
(
)
)
)
)
{
nsresult
rv
=
CacheClientSeek
(
GetOffset
(
)
false
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
return
rv
;
}
}
mCacheStream
.
NotifyDataEnded
(
aStatus
)
;
nsLoadFlags
loadFlags
;
DebugOnly
<
nsresult
>
rv
=
mChannel
-
>
GetLoadFlags
(
&
loadFlags
)
;
NS_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
GetLoadFlags
(
)
failed
!
"
)
;
if
(
loadFlags
&
nsIRequest
:
:
LOAD_BACKGROUND
)
{
ModifyLoadFlags
(
loadFlags
&
~
nsIRequest
:
:
LOAD_BACKGROUND
)
;
}
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
OnChannelRedirect
(
nsIChannel
*
aOld
nsIChannel
*
aNew
uint32_t
aFlags
int64_t
aOffset
)
{
mChannel
=
aNew
;
mSuspendAgent
.
NotifyChannelOpened
(
mChannel
)
;
return
SetupChannelHeaders
(
aOffset
)
;
}
nsresult
ChannelMediaResource
:
:
CopySegmentToCache
(
nsIInputStream
*
aInStream
void
*
aClosure
const
char
*
aFromSegment
uint32_t
aToOffset
uint32_t
aCount
uint32_t
*
aWriteCount
)
{
Closure
*
closure
=
static_cast
<
Closure
*
>
(
aClosure
)
;
closure
-
>
mResource
-
>
mCacheStream
.
NotifyDataReceived
(
closure
-
>
mLoadID
aCount
aFromSegment
)
;
*
aWriteCount
=
aCount
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
OnDataAvailable
(
uint32_t
aLoadID
nsIInputStream
*
aStream
uint32_t
aCount
)
{
RefPtr
<
ChannelMediaResource
>
self
=
this
;
nsCOMPtr
<
nsIRunnable
>
r
=
NS_NewRunnableFunction
(
"
ChannelMediaResource
:
:
OnDataAvailable
"
[
self
aCount
aLoadID
]
(
)
{
if
(
aLoadID
!
=
self
-
>
mLoadID
)
{
return
;
}
self
-
>
mChannelStatistics
.
AddBytes
(
aCount
)
;
}
)
;
mCallback
-
>
AbstractMainThread
(
)
-
>
Dispatch
(
r
.
forget
(
)
)
;
Closure
closure
{
aLoadID
this
}
;
uint32_t
count
=
aCount
;
while
(
count
>
0
)
{
uint32_t
read
;
nsresult
rv
=
aStream
-
>
ReadSegments
(
CopySegmentToCache
&
closure
count
&
read
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
NS_ASSERTION
(
read
>
0
"
Read
0
bytes
while
data
was
available
?
"
)
;
count
-
=
read
;
}
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
Open
(
nsIStreamListener
*
*
aStreamListener
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
MOZ_ASSERT
(
aStreamListener
)
;
MOZ_ASSERT
(
mChannel
)
;
int64_t
cl
=
-
1
;
nsCOMPtr
<
nsIHttpChannel
>
hc
=
do_QueryInterface
(
mChannel
)
;
if
(
hc
&
&
!
IsPayloadCompressed
(
hc
)
)
{
if
(
NS_FAILED
(
hc
-
>
GetContentLength
(
&
cl
)
)
)
{
cl
=
-
1
;
}
}
nsresult
rv
=
mCacheStream
.
Init
(
cl
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MOZ_ASSERT
(
GetOffset
(
)
=
=
0
"
Who
set
offset
already
?
"
)
;
mListener
=
new
Listener
(
this
0
+
+
mLoadID
)
;
*
aStreamListener
=
mListener
;
NS_ADDREF
(
*
aStreamListener
)
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
OpenChannel
(
int64_t
aOffset
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mChannel
)
;
MOZ_ASSERT
(
!
mListener
"
Listener
should
have
been
removed
by
now
"
)
;
mListener
=
new
Listener
(
this
aOffset
+
+
mLoadID
)
;
nsresult
rv
=
mChannel
-
>
SetNotificationCallbacks
(
mListener
.
get
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
SetupChannelHeaders
(
aOffset
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
mChannel
-
>
AsyncOpen2
(
mListener
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
NS_ENSURE_TRUE
(
owner
NS_ERROR_FAILURE
)
;
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
element
-
>
DownloadResumed
(
true
)
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
SetupChannelHeaders
(
int64_t
aOffset
)
{
nsCOMPtr
<
nsIHttpChannel
>
hc
=
do_QueryInterface
(
mChannel
)
;
if
(
hc
)
{
nsAutoCString
rangeString
(
"
bytes
=
"
)
;
rangeString
.
AppendInt
(
aOffset
)
;
rangeString
.
Append
(
'
-
'
)
;
nsresult
rv
=
hc
-
>
SetRequestHeader
(
NS_LITERAL_CSTRING
(
"
Range
"
)
rangeString
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
NS_ENSURE_TRUE
(
owner
NS_ERROR_FAILURE
)
;
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
NS_ENSURE_TRUE
(
element
NS_ERROR_FAILURE
)
;
element
-
>
SetRequestHeaders
(
hc
)
;
}
else
{
NS_ASSERTION
(
aOffset
=
=
0
"
Don
'
t
know
how
to
seek
on
this
channel
type
"
)
;
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
Close
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
CloseChannel
(
)
;
mCacheStream
.
Close
(
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIPrincipal
>
ChannelMediaResource
:
:
GetCurrentPrincipal
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
=
mCacheStream
.
GetCurrentPrincipal
(
)
;
return
principal
.
forget
(
)
;
}
bool
ChannelMediaResource
:
:
CanClone
(
)
{
return
mCacheStream
.
IsAvailableForSharing
(
)
;
}
already_AddRefed
<
BaseMediaResource
>
ChannelMediaResource
:
:
CloneData
(
MediaResourceCallback
*
aCallback
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
NS_ASSERTION
(
mCacheStream
.
IsAvailableForSharing
(
)
"
Stream
can
'
t
be
cloned
"
)
;
RefPtr
<
ChannelMediaResource
>
resource
=
new
ChannelMediaResource
(
aCallback
nullptr
mURI
mChannelStatistics
)
;
resource
-
>
mSuspendAgent
.
Suspend
(
)
;
resource
-
>
mCacheStream
.
InitAsClone
(
&
mCacheStream
)
;
resource
-
>
mChannelStatistics
.
Stop
(
)
;
return
resource
.
forget
(
)
;
}
void
ChannelMediaResource
:
:
CloseChannel
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Only
call
on
main
thread
"
)
;
mChannelStatistics
.
Stop
(
)
;
if
(
mChannel
)
{
mSuspendAgent
.
NotifyChannelClosing
(
)
;
mChannel
-
>
Cancel
(
NS_ERROR_PARSED_DATA_CACHED
)
;
mChannel
=
nullptr
;
}
if
(
mListener
)
{
mListener
-
>
Revoke
(
)
;
mListener
=
nullptr
;
}
}
nsresult
ChannelMediaResource
:
:
ReadFromCache
(
char
*
aBuffer
int64_t
aOffset
uint32_t
aCount
)
{
return
mCacheStream
.
ReadFromCache
(
aBuffer
aOffset
aCount
)
;
}
nsresult
ChannelMediaResource
:
:
ReadAt
(
int64_t
aOffset
char
*
aBuffer
uint32_t
aCount
uint32_t
*
aBytes
)
{
NS_ASSERTION
(
!
NS_IsMainThread
(
)
"
Don
'
t
call
on
main
thread
"
)
;
nsresult
rv
=
mCacheStream
.
ReadAt
(
aOffset
aBuffer
aCount
aBytes
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
DispatchBytesConsumed
(
*
aBytes
aOffset
)
;
}
return
rv
;
}
void
ChannelMediaResource
:
:
ThrottleReadahead
(
bool
bThrottle
)
{
mCacheStream
.
ThrottleReadahead
(
bThrottle
)
;
}
int64_t
ChannelMediaResource
:
:
Tell
(
)
{
return
mCacheStream
.
Tell
(
)
;
}
nsresult
ChannelMediaResource
:
:
GetCachedRanges
(
MediaByteRangeSet
&
aRanges
)
{
return
mCacheStream
.
GetCachedRanges
(
aRanges
)
;
}
void
ChannelMediaResource
:
:
Suspend
(
bool
aCloseImmediately
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
if
(
!
owner
)
{
return
;
}
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
if
(
!
element
)
{
return
;
}
if
(
mChannel
&
&
aCloseImmediately
&
&
mCacheStream
.
IsTransportSeekable
(
)
)
{
CloseChannel
(
)
;
element
-
>
DownloadSuspended
(
)
;
}
if
(
mSuspendAgent
.
Suspend
(
)
)
{
if
(
mChannel
)
{
mChannelStatistics
.
Stop
(
)
;
element
-
>
DownloadSuspended
(
)
;
}
}
}
void
ChannelMediaResource
:
:
Resume
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
if
(
!
owner
)
{
return
;
}
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
if
(
!
element
)
{
return
;
}
if
(
mSuspendAgent
.
Resume
(
)
)
{
if
(
mChannel
)
{
mChannelStatistics
.
Start
(
)
;
mReopenOnError
=
true
;
element
-
>
DownloadResumed
(
)
;
}
else
{
int64_t
totalLength
=
GetLength
(
)
;
if
(
totalLength
<
0
|
|
GetOffset
(
)
<
totalLength
)
{
CacheClientSeek
(
GetOffset
(
)
false
)
;
element
-
>
DownloadResumed
(
)
;
}
else
{
}
}
}
}
nsresult
ChannelMediaResource
:
:
RecreateChannel
(
)
{
nsLoadFlags
loadFlags
=
nsICachingChannel
:
:
LOAD_BYPASS_LOCAL_CACHE_IF_BUSY
|
nsIChannel
:
:
LOAD_CLASSIFY_URI
|
(
mLoadInBackground
?
nsIRequest
:
:
LOAD_BACKGROUND
:
0
)
;
MediaDecoderOwner
*
owner
=
mCallback
-
>
GetMediaOwner
(
)
;
if
(
!
owner
)
{
return
NS_OK
;
}
dom
:
:
HTMLMediaElement
*
element
=
owner
-
>
GetMediaElement
(
)
;
if
(
!
element
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsILoadGroup
>
loadGroup
=
element
-
>
GetDocumentLoadGroup
(
)
;
NS_ENSURE_TRUE
(
loadGroup
NS_ERROR_NULL_POINTER
)
;
nsSecurityFlags
securityFlags
=
element
-
>
ShouldCheckAllowOrigin
(
)
?
nsILoadInfo
:
:
SEC_REQUIRE_CORS_DATA_INHERITS
:
nsILoadInfo
:
:
SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS
;
MOZ_ASSERT
(
element
-
>
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
audio
nsGkAtoms
:
:
video
)
)
;
nsContentPolicyType
contentPolicyType
=
element
-
>
IsHTMLElement
(
nsGkAtoms
:
:
audio
)
?
nsIContentPolicy
:
:
TYPE_INTERNAL_AUDIO
:
nsIContentPolicy
:
:
TYPE_INTERNAL_VIDEO
;
nsCOMPtr
<
nsIPrincipal
>
loadingPrincipal
;
bool
setAttrs
=
nsContentUtils
:
:
GetLoadingPrincipalForXULNode
(
element
getter_AddRefs
(
loadingPrincipal
)
)
;
nsresult
rv
=
NS_NewChannelWithTriggeringPrincipal
(
getter_AddRefs
(
mChannel
)
mURI
element
loadingPrincipal
securityFlags
contentPolicyType
loadGroup
nullptr
loadFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
setAttrs
)
{
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
mChannel
-
>
GetLoadInfo
(
)
;
if
(
loadInfo
)
{
Unused
<
<
loadInfo
-
>
SetOriginAttributes
(
loadingPrincipal
-
>
OriginAttributesRef
(
)
)
;
}
}
nsCOMPtr
<
nsIClassOfService
>
cos
(
do_QueryInterface
(
mChannel
)
)
;
if
(
cos
)
{
cos
-
>
AddClassFlags
(
nsIClassOfService
:
:
DontThrottle
)
;
}
mSuspendAgent
.
NotifyChannelOpened
(
mChannel
)
;
mCacheStream
.
NotifyChannelRecreated
(
)
;
return
rv
;
}
void
ChannelMediaResource
:
:
CacheClientNotifyDataReceived
(
)
{
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
NewRunnableMethod
(
"
MediaResourceCallback
:
:
NotifyDataArrived
"
mCallback
.
get
(
)
&
MediaResourceCallback
:
:
NotifyDataArrived
)
)
;
}
void
ChannelMediaResource
:
:
CacheClientNotifyDataEnded
(
nsresult
aStatus
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mCallback
-
>
NotifyDataEnded
(
aStatus
)
;
}
void
ChannelMediaResource
:
:
CacheClientNotifyPrincipalChanged
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
mCallback
-
>
NotifyPrincipalChanged
(
)
;
}
void
ChannelMediaResource
:
:
UpdatePrincipal
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mChannel
)
;
nsCOMPtr
<
nsIPrincipal
>
principal
;
nsIScriptSecurityManager
*
secMan
=
nsContentUtils
:
:
GetSecurityManager
(
)
;
if
(
secMan
)
{
secMan
-
>
GetChannelResultPrincipal
(
mChannel
getter_AddRefs
(
principal
)
)
;
mCacheStream
.
UpdatePrincipal
(
principal
)
;
}
}
void
ChannelMediaResource
:
:
CacheClientNotifySuspendedStatusChanged
(
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
mCallback
-
>
NotifySuspendedStatusChanged
(
IsSuspendedByCache
(
)
)
;
}
nsresult
ChannelMediaResource
:
:
CacheClientSeek
(
int64_t
aOffset
bool
aResume
)
{
NS_ASSERTION
(
NS_IsMainThread
(
)
"
Don
'
t
call
on
non
-
main
thread
"
)
;
LOG
(
"
CacheClientSeek
requested
for
aOffset
[
%
"
PRId64
"
]
for
decoder
[
%
p
]
"
aOffset
mCallback
.
get
(
)
)
;
CloseChannel
(
)
;
if
(
aResume
)
{
mSuspendAgent
.
Resume
(
)
;
}
if
(
mSuspendAgent
.
IsSuspended
(
)
)
{
return
NS_OK
;
}
nsresult
rv
=
RecreateChannel
(
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
OpenChannel
(
aOffset
)
;
}
nsresult
ChannelMediaResource
:
:
CacheClientSuspend
(
)
{
Suspend
(
false
)
;
return
NS_OK
;
}
nsresult
ChannelMediaResource
:
:
CacheClientResume
(
)
{
Resume
(
)
;
return
NS_OK
;
}
int64_t
ChannelMediaResource
:
:
GetNextCachedData
(
int64_t
aOffset
)
{
return
mCacheStream
.
GetNextCachedData
(
aOffset
)
;
}
int64_t
ChannelMediaResource
:
:
GetCachedDataEnd
(
int64_t
aOffset
)
{
return
mCacheStream
.
GetCachedDataEnd
(
aOffset
)
;
}
bool
ChannelMediaResource
:
:
IsDataCachedToEndOfResource
(
int64_t
aOffset
)
{
return
mCacheStream
.
IsDataCachedToEndOfStream
(
aOffset
)
;
}
bool
ChannelMediaResource
:
:
IsSuspendedByCache
(
)
{
return
mCacheStream
.
AreAllStreamsForResourceSuspended
(
)
;
}
bool
ChannelMediaResource
:
:
IsSuspended
(
)
{
return
mSuspendAgent
.
IsSuspended
(
)
;
}
void
ChannelMediaResource
:
:
SetReadMode
(
MediaCacheStream
:
:
ReadMode
aMode
)
{
mCacheStream
.
SetReadMode
(
aMode
)
;
}
void
ChannelMediaResource
:
:
SetPlaybackRate
(
uint32_t
aBytesPerSecond
)
{
mCacheStream
.
SetPlaybackRate
(
aBytesPerSecond
)
;
}
void
ChannelMediaResource
:
:
Pin
(
)
{
mCacheStream
.
Pin
(
)
;
}
void
ChannelMediaResource
:
:
Unpin
(
)
{
mCacheStream
.
Unpin
(
)
;
}
double
ChannelMediaResource
:
:
GetDownloadRate
(
bool
*
aIsReliable
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mChannelStatistics
.
GetRate
(
aIsReliable
)
;
}
int64_t
ChannelMediaResource
:
:
GetLength
(
)
{
return
mCacheStream
.
GetLength
(
)
;
}
int64_t
ChannelMediaResource
:
:
GetOffset
(
)
const
{
return
mCacheStream
.
GetOffset
(
)
;
}
bool
ChannelSuspendAgent
:
:
Suspend
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
SuspendInternal
(
)
;
return
(
+
+
mSuspendCount
=
=
1
)
;
}
void
ChannelSuspendAgent
:
:
SuspendInternal
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mChannel
)
{
bool
isPending
=
false
;
nsresult
rv
=
mChannel
-
>
IsPending
(
&
isPending
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
isPending
&
&
!
mIsChannelSuspended
)
{
mChannel
-
>
Suspend
(
)
;
mIsChannelSuspended
=
true
;
}
}
}
bool
ChannelSuspendAgent
:
:
Resume
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
IsSuspended
(
)
"
Resume
without
suspend
!
"
)
;
-
-
mSuspendCount
;
if
(
mSuspendCount
=
=
0
)
{
if
(
mChannel
&
&
mIsChannelSuspended
)
{
mChannel
-
>
Resume
(
)
;
mIsChannelSuspended
=
false
;
}
return
true
;
}
return
false
;
}
void
ChannelSuspendAgent
:
:
UpdateSuspendedStatusIfNeeded
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
mIsChannelSuspended
&
&
IsSuspended
(
)
)
{
SuspendInternal
(
)
;
}
}
void
ChannelSuspendAgent
:
:
NotifyChannelOpened
(
nsIChannel
*
aChannel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aChannel
)
;
mChannel
=
aChannel
;
}
void
ChannelSuspendAgent
:
:
NotifyChannelClosing
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mChannel
)
;
if
(
mIsChannelSuspended
)
{
mChannel
-
>
Resume
(
)
;
mIsChannelSuspended
=
false
;
}
mChannel
=
nullptr
;
}
bool
ChannelSuspendAgent
:
:
IsSuspended
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
(
mSuspendCount
>
0
)
;
}
}
