#
ifndef
MediaDecoderOwner_h_
#
define
MediaDecoderOwner_h_
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MediaInfo
.
h
"
#
include
"
MediaSegment
.
h
"
#
include
"
nsSize
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
GMPCrashHelper
;
class
VideoFrameContainer
;
class
MediaInfo
;
class
MediaResult
;
namespace
dom
{
class
Document
;
class
HTMLMediaElement
;
}
class
MediaDecoderOwner
{
public
:
virtual
void
DownloadProgressed
(
)
=
0
;
virtual
void
DispatchAsyncEvent
(
const
nsAString
&
aName
)
=
0
;
virtual
void
UpdateReadyState
(
)
=
0
;
virtual
void
MaybeQueueTimeupdateEvent
(
)
=
0
;
virtual
bool
GetPaused
(
)
=
0
;
virtual
void
MetadataLoaded
(
const
MediaInfo
*
aInfo
UniquePtr
<
const
MetadataTags
>
aTags
)
=
0
;
virtual
void
FirstFrameLoaded
(
)
=
0
;
virtual
void
NetworkError
(
const
MediaResult
&
aError
)
=
0
;
virtual
void
DecodeError
(
const
MediaResult
&
aError
)
=
0
;
virtual
void
DecodeWarning
(
const
MediaResult
&
aError
)
=
0
;
virtual
bool
HasError
(
)
const
=
0
;
virtual
void
LoadAborted
(
)
=
0
;
virtual
void
PlaybackEnded
(
)
=
0
;
virtual
void
SeekStarted
(
)
=
0
;
virtual
void
SeekCompleted
(
)
=
0
;
virtual
void
SeekAborted
(
)
=
0
;
virtual
void
DownloadSuspended
(
)
=
0
;
virtual
void
NotifySuspendedByCache
(
bool
aSuspendedByCache
)
=
0
;
virtual
void
NotifyDecoderPrincipalChanged
(
)
=
0
;
enum
NextFrameStatus
{
NEXT_FRAME_AVAILABLE
NEXT_FRAME_UNAVAILABLE_BUFFERING
NEXT_FRAME_UNAVAILABLE_SEEKING
NEXT_FRAME_UNAVAILABLE
NEXT_FRAME_UNINITIALIZED
}
;
virtual
void
SetAudibleState
(
bool
aAudible
)
=
0
;
virtual
void
NotifyXPCOMShutdown
(
)
=
0
;
virtual
void
DispatchEncrypted
(
const
nsTArray
<
uint8_t
>
&
aInitData
const
nsAString
&
aInitDataType
)
=
0
;
virtual
void
NotifyWaitingForKey
(
)
{
}
virtual
AbstractThread
*
AbstractMainThread
(
)
const
{
return
nullptr
;
}
virtual
dom
:
:
HTMLMediaElement
*
GetMediaElement
(
)
{
return
nullptr
;
}
virtual
VideoFrameContainer
*
GetVideoFrameContainer
(
)
{
return
nullptr
;
}
virtual
mozilla
:
:
dom
:
:
Document
*
GetDocument
(
)
const
{
return
nullptr
;
}
virtual
already_AddRefed
<
GMPCrashHelper
>
CreateGMPCrashHelper
(
)
{
return
nullptr
;
}
enum
class
ImageSizeChanged
{
No
Yes
}
;
enum
class
ForceInvalidate
{
No
Yes
}
;
virtual
void
Invalidate
(
ImageSizeChanged
aImageSizeChanged
const
Maybe
<
nsIntSize
>
&
aNewIntrinsicSize
ForceInvalidate
aForceInvalidate
)
{
}
virtual
void
PrincipalHandleChangedForVideoFrameContainer
(
VideoFrameContainer
*
aContainer
const
PrincipalHandle
&
aNewPrincipalHandle
)
{
}
virtual
void
OnSecondaryVideoContainerInstalled
(
const
RefPtr
<
VideoFrameContainer
>
&
aSecondaryContainer
)
{
}
virtual
bool
IsActuallyInvisible
(
)
const
=
0
;
virtual
bool
ShouldResistFingerprinting
(
)
const
=
0
;
}
;
}
#
endif
