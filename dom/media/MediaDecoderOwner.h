#
ifndef
MediaDecoderOwner_h_
#
define
MediaDecoderOwner_h_
#
include
"
AbstractMediaDecoder
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
AbstractThread
;
class
GMPCrashHelper
;
class
VideoFrameContainer
;
class
MediaInfo
;
class
MediaResult
;
namespace
dom
{
class
HTMLMediaElement
;
}
class
MediaDecoderOwner
{
public
:
virtual
void
DownloadProgressed
(
)
=
0
;
virtual
nsresult
DispatchAsyncEvent
(
const
nsAString
&
aName
)
=
0
;
virtual
void
UpdateReadyState
(
)
=
0
;
virtual
void
FireTimeUpdate
(
bool
aPeriodic
)
=
0
;
virtual
dom
:
:
HTMLMediaElement
*
GetMediaElement
(
)
{
return
nullptr
;
}
virtual
AbstractThread
*
AbstractMainThread
(
)
const
=
0
;
virtual
bool
GetPaused
(
)
=
0
;
virtual
void
MetadataLoaded
(
const
MediaInfo
*
aInfo
nsAutoPtr
<
const
MetadataTags
>
aTags
)
=
0
;
virtual
void
FirstFrameLoaded
(
)
=
0
;
virtual
void
NetworkError
(
)
=
0
;
virtual
void
DecodeError
(
const
MediaResult
&
aError
)
=
0
;
virtual
void
DecodeWarning
(
const
MediaResult
&
aError
)
=
0
;
virtual
bool
HasError
(
)
const
=
0
;
virtual
void
LoadAborted
(
)
=
0
;
virtual
void
PlaybackEnded
(
)
=
0
;
virtual
void
SeekStarted
(
)
=
0
;
virtual
void
SeekCompleted
(
)
=
0
;
virtual
void
DownloadSuspended
(
)
=
0
;
virtual
void
DownloadResumed
(
bool
aForceNetworkLoading
=
false
)
=
0
;
virtual
void
NotifySuspendedByCache
(
bool
aIsSuspended
)
=
0
;
virtual
void
NotifyDecoderPrincipalChanged
(
)
=
0
;
enum
NextFrameStatus
{
NEXT_FRAME_AVAILABLE
NEXT_FRAME_UNAVAILABLE_BUFFERING
NEXT_FRAME_UNAVAILABLE_SEEKING
NEXT_FRAME_UNAVAILABLE
NEXT_FRAME_UNINITIALIZED
}
;
virtual
bool
IsActive
(
)
const
=
0
;
virtual
bool
IsHidden
(
)
const
=
0
;
virtual
VideoFrameContainer
*
GetVideoFrameContainer
(
)
=
0
;
virtual
void
SetAudibleState
(
bool
aAudible
)
=
0
;
virtual
void
NotifyXPCOMShutdown
(
)
=
0
;
virtual
void
DispatchEncrypted
(
const
nsTArray
<
uint8_t
>
&
aInitData
const
nsAString
&
aInitDataType
)
=
0
;
virtual
nsIDocument
*
GetDocument
(
)
const
=
0
;
virtual
void
ConstructMediaTracks
(
const
MediaInfo
*
aInfo
)
=
0
;
virtual
void
RemoveMediaTracks
(
)
=
0
;
virtual
already_AddRefed
<
GMPCrashHelper
>
CreateGMPCrashHelper
(
)
=
0
;
}
;
}
#
endif
