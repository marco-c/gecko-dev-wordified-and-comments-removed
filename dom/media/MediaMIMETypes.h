#
ifndef
MediaMIMETypes_h_
#
define
MediaMIMETypes_h_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
class
MediaExtendedMIMEType
{
public
:
const
nsACString
&
Type
(
)
const
{
return
mMIMEType
;
}
bool
HaveCodecs
(
)
const
{
return
mHaveCodecs
;
}
const
nsAString
&
GetCodecs
(
)
const
{
return
mCodecs
;
}
Maybe
<
int32_t
>
GetWidth
(
)
const
{
return
GetMaybeNumber
(
mWidth
)
;
}
Maybe
<
int32_t
>
GetHeight
(
)
const
{
return
GetMaybeNumber
(
mHeight
)
;
}
Maybe
<
int32_t
>
GetFramerate
(
)
const
{
return
GetMaybeNumber
(
mFramerate
)
;
}
Maybe
<
int32_t
>
GetBitrate
(
)
const
{
return
GetMaybeNumber
(
mBitrate
)
;
}
private
:
friend
Maybe
<
MediaExtendedMIMEType
>
MakeMediaExtendedMIMEType
(
const
nsAString
&
aType
)
;
MediaExtendedMIMEType
(
const
nsACString
&
aMIMEType
bool
aHaveCodecs
const
nsAString
&
aCodecs
int32_t
aWidth
int32_t
aHeight
int32_t
aFramerate
int32_t
aBitrate
)
;
Maybe
<
int32_t
>
GetMaybeNumber
(
int32_t
aNumber
)
const
{
return
(
aNumber
<
0
)
?
Maybe
<
int32_t
>
(
Nothing
(
)
)
:
Some
(
int32_t
(
aNumber
)
)
;
}
nsCString
mMIMEType
;
bool
mHaveCodecs
;
nsString
mCodecs
;
int32_t
mWidth
;
int32_t
mHeight
;
int32_t
mFramerate
;
int32_t
mBitrate
;
}
;
Maybe
<
MediaExtendedMIMEType
>
MakeMediaExtendedMIMEType
(
const
nsAString
&
aType
)
;
Maybe
<
MediaExtendedMIMEType
>
MakeMediaExtendedMIMEType
(
const
nsACString
&
aType
)
;
Maybe
<
MediaExtendedMIMEType
>
MakeMediaExtendedMIMEType
(
const
char
*
aType
)
;
}
#
endif
