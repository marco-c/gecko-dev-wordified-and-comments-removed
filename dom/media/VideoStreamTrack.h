#
ifndef
VIDEOSTREAMTRACK_H_
#
define
VIDEOSTREAMTRACK_H_
#
include
"
MediaStreamTrack
.
h
"
#
include
"
DOMMediaStream
.
h
"
namespace
mozilla
{
class
VideoFrameContainer
;
class
VideoOutput
;
namespace
dom
{
class
VideoStreamTrack
:
public
MediaStreamTrack
{
public
:
VideoStreamTrack
(
nsPIDOMWindowInner
*
aWindow
MediaStream
*
aInputStream
TrackID
aTrackID
MediaStreamTrackSource
*
aSource
const
MediaTrackConstraints
&
aConstraints
=
MediaTrackConstraints
(
)
)
;
void
Destroy
(
)
override
;
VideoStreamTrack
*
AsVideoStreamTrack
(
)
override
{
return
this
;
}
const
VideoStreamTrack
*
AsVideoStreamTrack
(
)
const
override
{
return
this
;
}
void
AddVideoOutput
(
VideoFrameContainer
*
aSink
)
;
void
AddVideoOutput
(
VideoOutput
*
aOutput
)
;
void
RemoveVideoOutput
(
VideoFrameContainer
*
aSink
)
;
void
RemoveVideoOutput
(
VideoOutput
*
aOutput
)
;
void
GetKind
(
nsAString
&
aKind
)
override
{
aKind
.
AssignLiteral
(
"
video
"
)
;
}
void
GetLabel
(
nsAString
&
aLabel
CallerType
aCallerType
)
override
;
protected
:
already_AddRefed
<
MediaStreamTrack
>
CloneInternal
(
)
override
{
return
do_AddRef
(
new
VideoStreamTrack
(
mWindow
Ended
(
)
?
nullptr
:
mInputStream
.
get
(
)
mTrackID
mSource
mConstraints
)
)
;
}
private
:
nsTArray
<
RefPtr
<
VideoOutput
>
>
mVideoOutputs
;
}
;
}
}
#
endif
