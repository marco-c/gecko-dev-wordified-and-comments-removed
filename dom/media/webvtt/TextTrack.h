#
ifndef
mozilla_dom_TextTrack_h
#
define
mozilla_dom_TextTrack_h
#
include
"
TimeUnits
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
DefineEnum
.
h
"
#
include
"
mozilla
/
dom
/
TextTrackBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
:
:
dom
{
class
TextTrackList
;
class
TextTrackCue
;
class
TextTrackCueList
;
class
HTMLTrackElement
;
class
HTMLMediaElement
;
enum
class
TextTrackSource
:
uint8_t
{
Track
AddTextTrack
MediaResourceSpecific
}
;
MOZ_DEFINE_ENUM_CLASS_WITH_BASE_AND_TOSTRING
(
TextTrackReadyState
uint8_t
(
NotLoaded
Loading
Loaded
FailedToLoad
)
)
;
class
TextTrack
final
:
public
DOMEventTargetHelper
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
TextTrack
DOMEventTargetHelper
)
TextTrack
(
nsPIDOMWindowInner
*
aOwnerWindow
TextTrackKind
aKind
const
nsAString
&
aLabel
const
nsAString
&
aLanguage
TextTrackMode
aMode
TextTrackReadyState
aReadyState
TextTrackSource
aTextTrackSource
)
;
TextTrack
(
nsPIDOMWindowInner
*
aOwnerWindow
TextTrackList
*
aTextTrackList
TextTrackKind
aKind
const
nsAString
&
aLabel
const
nsAString
&
aLanguage
TextTrackMode
aMode
TextTrackReadyState
aReadyState
TextTrackSource
aTextTrackSource
)
;
void
SetDefaultSettings
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
TextTrackKind
Kind
(
)
const
{
return
mKind
;
}
void
GetLabel
(
nsAString
&
aLabel
)
const
;
void
GetLanguage
(
nsAString
&
aLanguage
)
const
;
void
GetInBandMetadataTrackDispatchType
(
nsAString
&
aType
)
const
{
aType
=
mType
;
}
void
GetId
(
nsAString
&
aId
)
const
;
TextTrackMode
Mode
(
)
const
{
return
mMode
;
}
void
SetMode
(
TextTrackMode
aValue
)
;
TextTrackCueList
*
GetCues
(
)
const
{
if
(
mMode
=
=
TextTrackMode
:
:
Disabled
)
{
return
nullptr
;
}
return
mCueList
;
}
TextTrackCueList
*
GetActiveCues
(
)
;
void
GetActiveCueArray
(
nsTArray
<
RefPtr
<
TextTrackCue
>
>
&
aCues
)
;
TextTrackReadyState
ReadyState
(
)
const
;
void
SetReadyState
(
TextTrackReadyState
aState
)
;
void
AddCue
(
TextTrackCue
&
aCue
)
;
void
RemoveCue
(
TextTrackCue
&
aCue
ErrorResult
&
aRv
)
;
void
SetDirty
(
)
{
mDirty
=
true
;
}
void
SetCuesDirty
(
)
;
TextTrackList
*
GetTextTrackList
(
)
;
void
SetTextTrackList
(
TextTrackList
*
aTextTrackList
)
;
IMPL_EVENT_HANDLER
(
cuechange
)
HTMLTrackElement
*
GetTrackElement
(
)
;
void
SetTrackElement
(
HTMLTrackElement
*
aTrackElement
)
;
TextTrackSource
GetTextTrackSource
(
)
{
return
mTextTrackSource
;
}
void
SetCuesInactive
(
)
;
void
NotifyCueUpdated
(
TextTrackCue
*
aCue
)
;
void
DispatchAsyncTrustedEvent
(
const
nsString
&
aEventName
)
;
bool
IsLoaded
(
)
;
void
NotifyCueActiveStateChanged
(
TextTrackCue
*
aCue
)
;
void
GetOverlappingCurrentAndOtherCues
(
nsTArray
<
RefPtr
<
TextTrackCue
>
>
*
aCurrentCues
nsTArray
<
RefPtr
<
TextTrackCue
>
>
*
aOtherCues
const
media
:
:
TimeInterval
&
aInterval
)
const
;
void
ClearAllCues
(
)
;
private
:
~
TextTrack
(
)
;
HTMLMediaElement
*
GetMediaElement
(
)
const
;
RefPtr
<
TextTrackList
>
mTextTrackList
;
TextTrackKind
mKind
;
nsString
mLabel
;
nsString
mLanguage
;
nsString
mType
;
TextTrackMode
mMode
;
RefPtr
<
TextTrackCueList
>
mCueList
;
RefPtr
<
TextTrackCueList
>
mActiveCueList
;
RefPtr
<
HTMLTrackElement
>
mTrackElement
;
uint32_t
mCuePos
;
TextTrackReadyState
mReadyState
;
bool
mDirty
;
TextTrackSource
mTextTrackSource
;
}
;
}
#
endif
