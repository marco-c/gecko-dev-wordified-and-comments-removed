#
ifndef
mozilla_dom_media_ChannelMediaResource_h
#
define
mozilla_dom_media_ChannelMediaResource_h
#
include
"
MediaResource
.
h
"
namespace
mozilla
{
class
ChannelMediaResource
:
public
BaseMediaResource
{
public
:
ChannelMediaResource
(
MediaResourceCallback
*
aDecoder
nsIChannel
*
aChannel
nsIURI
*
aURI
bool
aIsPrivateBrowsing
)
;
ChannelMediaResource
(
MediaResourceCallback
*
aDecoder
nsIChannel
*
aChannel
nsIURI
*
aURI
const
MediaChannelStatistics
&
aStatistics
)
;
~
ChannelMediaResource
(
)
;
void
CacheClientNotifyDataReceived
(
)
;
void
CacheClientNotifyDataEnded
(
nsresult
aStatus
)
;
void
CacheClientNotifyPrincipalChanged
(
)
;
void
CacheClientNotifySuspendedStatusChanged
(
)
;
nsresult
CacheClientSeek
(
int64_t
aOffset
bool
aResume
)
;
nsresult
CacheClientSuspend
(
)
;
nsresult
CacheClientResume
(
)
;
bool
IsSuspended
(
)
;
void
ThrottleReadahead
(
bool
bThrottle
)
override
;
nsresult
Open
(
nsIStreamListener
*
*
aStreamListener
)
override
;
nsresult
Close
(
)
override
;
void
Suspend
(
bool
aCloseImmediately
)
override
;
void
Resume
(
)
override
;
already_AddRefed
<
nsIPrincipal
>
GetCurrentPrincipal
(
)
override
;
bool
CanClone
(
)
override
;
already_AddRefed
<
BaseMediaResource
>
CloneData
(
MediaResourceCallback
*
aDecoder
)
override
;
nsresult
ReadFromCache
(
char
*
aBuffer
int64_t
aOffset
uint32_t
aCount
)
override
;
void
SetReadMode
(
MediaCacheStream
:
:
ReadMode
aMode
)
override
;
void
SetPlaybackRate
(
uint32_t
aBytesPerSecond
)
override
;
nsresult
ReadAt
(
int64_t
offset
char
*
aBuffer
uint32_t
aCount
uint32_t
*
aBytes
)
override
;
bool
ShouldCacheReads
(
)
override
{
return
true
;
}
int64_t
Tell
(
)
override
;
void
Pin
(
)
override
;
void
Unpin
(
)
override
;
double
GetDownloadRate
(
bool
*
aIsReliable
)
override
;
int64_t
GetLength
(
)
override
;
int64_t
GetNextCachedData
(
int64_t
aOffset
)
override
;
int64_t
GetCachedDataEnd
(
int64_t
aOffset
)
override
;
bool
IsDataCachedToEndOfResource
(
int64_t
aOffset
)
override
;
bool
IsTransportSeekable
(
)
override
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
size_t
size
=
BaseMediaResource
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
;
size
+
=
mCacheStream
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
return
size
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
class
Listener
final
:
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsIChannelEventSink
public
nsIThreadRetargetableStreamListener
{
~
Listener
(
)
{
}
public
:
Listener
(
ChannelMediaResource
*
aResource
int64_t
aOffset
uint32_t
aLoadID
)
:
mResource
(
aResource
)
mOffset
(
aOffset
)
mLoadID
(
aLoadID
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
private
:
const
RefPtr
<
ChannelMediaResource
>
mResource
;
const
int64_t
mOffset
;
const
uint32_t
mLoadID
;
}
;
friend
class
Listener
;
nsresult
GetCachedRanges
(
MediaByteRangeSet
&
aRanges
)
override
;
protected
:
bool
IsSuspendedByCache
(
)
;
nsresult
OnStartRequest
(
nsIRequest
*
aRequest
int64_t
aRequestOffset
)
;
nsresult
OnStopRequest
(
nsIRequest
*
aRequest
nsresult
aStatus
)
;
nsresult
OnDataAvailable
(
uint32_t
aLoadID
nsIInputStream
*
aStream
uint32_t
aCount
)
;
nsresult
OnChannelRedirect
(
nsIChannel
*
aOld
nsIChannel
*
aNew
uint32_t
aFlags
int64_t
aOffset
)
;
nsresult
OpenChannel
(
int64_t
aOffset
)
;
nsresult
RecreateChannel
(
)
;
nsresult
SetupChannelHeaders
(
int64_t
aOffset
)
;
void
CloseChannel
(
)
;
void
UpdatePrincipal
(
)
;
int64_t
GetOffset
(
)
const
;
nsresult
ParseContentRangeHeader
(
nsIHttpChannel
*
aHttpChan
int64_t
&
aRangeStart
int64_t
&
aRangeEnd
int64_t
&
aRangeTotal
)
;
struct
Closure
{
uint32_t
mLoadID
;
ChannelMediaResource
*
mResource
;
}
;
static
nsresult
CopySegmentToCache
(
nsIInputStream
*
aInStream
void
*
aClosure
const
char
*
aFromSegment
uint32_t
aToOffset
uint32_t
aCount
uint32_t
*
aWriteCount
)
;
RefPtr
<
Listener
>
mListener
;
uint32_t
mLoadID
=
0
;
bool
mReopenOnError
;
MediaCacheStream
mCacheStream
;
MediaChannelStatistics
mChannelStatistics
;
ChannelSuspendAgent
mSuspendAgent
;
}
;
}
#
endif
