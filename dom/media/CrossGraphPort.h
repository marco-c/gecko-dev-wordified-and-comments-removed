#
ifndef
MOZILLA_CROSS_GRAPH_TRACK_H_
#
define
MOZILLA_CROSS_GRAPH_TRACK_H_
#
include
"
AudioDriftCorrection
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
ForwardedInputTrack
.
h
"
#
include
"
mozilla
/
SPSCQueue
.
h
"
namespace
mozilla
{
class
CrossGraphReceiver
;
}
namespace
mozilla
:
:
dom
{
class
AudioStreamTrack
;
}
namespace
mozilla
{
class
CrossGraphTransmitter
:
public
ForwardedInputTrack
{
friend
class
CrossGraphPort
;
public
:
CrossGraphTransmitter
(
TrackRate
aSampleRate
CrossGraphReceiver
*
aReceiver
)
;
virtual
CrossGraphTransmitter
*
AsCrossGraphTransmitter
(
)
override
{
return
this
;
}
void
ProcessInput
(
GraphTime
aFrom
GraphTime
aTo
uint32_t
aFlags
)
override
;
void
Destroy
(
)
override
;
private
:
RefPtr
<
CrossGraphReceiver
>
mReceiver
;
}
;
class
CrossGraphReceiver
:
public
ProcessedMediaTrack
{
public
:
explicit
CrossGraphReceiver
(
TrackRate
aSampleRate
TrackRate
aTransmitterRate
)
;
virtual
CrossGraphReceiver
*
AsCrossGraphReceiver
(
)
override
{
return
this
;
}
void
ProcessInput
(
GraphTime
aFrom
GraphTime
aTo
uint32_t
aFlags
)
override
;
int
EnqueueAudio
(
AudioChunk
&
aChunk
)
;
private
:
SPSCQueue
<
AudioChunk
>
mCrossThreadFIFO
{
30
}
;
bool
mTransmitterHasStarted
=
false
;
AudioDriftCorrection
mDriftCorrection
;
}
;
class
CrossGraphPort
final
{
public
:
static
CrossGraphPort
*
Connect
(
const
RefPtr
<
dom
:
:
AudioStreamTrack
>
&
aStreamTrack
MediaTrackGraph
*
aPartnerGraph
)
;
static
CrossGraphPort
*
Connect
(
const
RefPtr
<
dom
:
:
AudioStreamTrack
>
&
aStreamTrack
AudioDeviceInfo
*
aSink
nsPIDOMWindowInner
*
aWindow
)
;
~
CrossGraphPort
(
)
=
default
;
void
AddAudioOutput
(
void
*
aKey
)
;
void
RemoveAudioOutput
(
void
*
aKey
)
;
void
SetAudioOutputVolume
(
void
*
aKey
float
aVolume
)
;
void
Destroy
(
)
;
RefPtr
<
GenericPromise
>
EnsureConnected
(
)
;
private
:
explicit
CrossGraphPort
(
RefPtr
<
MediaInputPort
>
aPort
)
:
mSourcePort
(
std
:
:
move
(
aPort
)
)
mTransmitter
(
mSourcePort
-
>
GetDestination
(
)
-
>
AsCrossGraphTransmitter
(
)
)
{
}
RefPtr
<
CrossGraphTransmitter
>
GetTransmitter
(
)
;
RefPtr
<
CrossGraphReceiver
>
GetReceiver
(
)
;
RefPtr
<
MediaInputPort
>
mSourcePort
;
RefPtr
<
CrossGraphTransmitter
>
mTransmitter
;
}
;
}
#
endif
