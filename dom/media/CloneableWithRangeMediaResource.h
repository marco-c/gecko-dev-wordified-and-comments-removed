#
ifndef
mozilla_dom_media_CloneableWithRangeMediaResource_h
#
define
mozilla_dom_media_CloneableWithRangeMediaResource_h
#
include
"
BaseMediaResource
.
h
"
#
include
"
nsICloneableInputStream
.
h
"
namespace
mozilla
{
class
CloneableWithRangeMediaResource
:
public
BaseMediaResource
{
public
:
CloneableWithRangeMediaResource
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
nsIURI
*
aURI
nsIInputStream
*
aStream
uint64_t
aSize
)
:
BaseMediaResource
(
aCallback
aChannel
aURI
)
mStream
(
do_QueryInterface
(
aStream
)
)
mSize
(
aSize
)
mCurrentPosition
(
0
)
mInitialized
(
false
)
{
MOZ_ASSERT
(
mStream
)
;
}
~
CloneableWithRangeMediaResource
(
)
{
}
nsresult
Open
(
nsIStreamListener
*
*
aStreamListener
)
override
;
nsresult
Close
(
)
override
;
void
Suspend
(
bool
aCloseImmediately
)
override
{
}
void
Resume
(
)
override
{
}
already_AddRefed
<
nsIPrincipal
>
GetCurrentPrincipal
(
)
override
;
nsresult
ReadFromCache
(
char
*
aBuffer
int64_t
aOffset
uint32_t
aCount
)
override
;
void
SetReadMode
(
MediaCacheStream
:
:
ReadMode
aMode
)
override
{
}
void
SetPlaybackRate
(
uint32_t
aBytesPerSecond
)
override
{
}
nsresult
ReadAt
(
int64_t
aOffset
char
*
aBuffer
uint32_t
aCount
uint32_t
*
aBytes
)
override
;
bool
ShouldCacheReads
(
)
override
{
return
true
;
}
int64_t
Tell
(
)
override
;
void
Pin
(
)
override
{
}
void
Unpin
(
)
override
{
}
double
GetDownloadRate
(
bool
*
aIsReliable
)
override
{
*
aIsReliable
=
true
;
return
100
*
1024
*
1024
;
}
int64_t
GetLength
(
)
override
{
MaybeInitialize
(
)
;
return
mSize
;
}
int64_t
GetNextCachedData
(
int64_t
aOffset
)
override
{
MaybeInitialize
(
)
;
return
(
aOffset
<
(
int64_t
)
mSize
)
?
aOffset
:
-
1
;
}
int64_t
GetCachedDataEnd
(
int64_t
aOffset
)
override
{
MaybeInitialize
(
)
;
return
std
:
:
max
(
aOffset
(
int64_t
)
mSize
)
;
}
bool
IsDataCachedToEndOfResource
(
int64_t
aOffset
)
override
{
return
true
;
}
bool
IsTransportSeekable
(
)
override
{
return
true
;
}
nsresult
GetCachedRanges
(
MediaByteRangeSet
&
aRanges
)
override
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
BaseMediaResource
:
:
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
private
:
void
MaybeInitialize
(
)
;
nsCOMPtr
<
nsICloneableInputStreamWithRange
>
mStream
;
uint64_t
mSize
;
uint64_t
mCurrentPosition
;
bool
mInitialized
;
}
;
}
#
endif
