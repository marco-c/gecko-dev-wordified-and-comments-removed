#
include
"
CSFLog
.
h
"
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
prthread
.
h
"
mozilla
:
:
LazyLogModule
gSignalingLog
(
"
signaling
"
)
;
void
CSFLogV
(
CSFLogLevel
priority
const
char
*
sourceFile
int
sourceLine
const
char
*
tag
const
char
*
format
va_list
args
)
{
#
ifdef
STDOUT_LOGGING
printf
(
"
%
s
\
n
:
"
tag
)
;
vprintf
(
format
args
)
;
#
else
mozilla
:
:
LogLevel
level
=
static_cast
<
mozilla
:
:
LogLevel
>
(
static_cast
<
unsigned
int
>
(
priority
)
)
;
if
(
!
MOZ_LOG_TEST
(
gSignalingLog
level
)
)
{
return
;
}
const
char
*
lastSlash
=
sourceFile
;
while
(
*
sourceFile
)
{
if
(
*
sourceFile
=
=
'
/
'
|
|
*
sourceFile
=
=
'
\
\
'
)
{
lastSlash
=
sourceFile
;
}
sourceFile
+
+
;
}
sourceFile
=
lastSlash
;
if
(
*
sourceFile
=
=
'
/
'
|
|
*
sourceFile
=
=
'
\
\
'
)
{
sourceFile
+
+
;
}
#
define
MAX_MESSAGE_LENGTH
1024
char
message
[
MAX_MESSAGE_LENGTH
]
;
const
char
*
threadName
=
NULL
;
if
(
NS_IsMainThread
(
)
)
{
threadName
=
"
main
"
;
}
else
{
threadName
=
PR_GetThreadName
(
PR_GetCurrentThread
(
)
)
;
}
if
(
!
threadName
)
{
threadName
=
"
"
;
}
VsprintfLiteral
(
message
format
args
)
;
MOZ_LOG
(
gSignalingLog
level
(
"
[
%
s
|
%
s
]
%
s
:
%
d
:
%
s
"
threadName
tag
sourceFile
sourceLine
message
)
)
;
#
endif
}
void
CSFLog
(
CSFLogLevel
priority
const
char
*
sourceFile
int
sourceLine
const
char
*
tag
const
char
*
format
.
.
.
)
{
va_list
ap
;
va_start
(
ap
format
)
;
CSFLogV
(
priority
sourceFile
sourceLine
tag
format
ap
)
;
va_end
(
ap
)
;
}
int
CSFLogTestLevel
(
CSFLogLevel
priority
)
{
return
MOZ_LOG_TEST
(
gSignalingLog
static_cast
<
mozilla
:
:
LogLevel
>
(
static_cast
<
unsigned
int
>
(
priority
)
)
)
;
}
