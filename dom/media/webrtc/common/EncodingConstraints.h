#
ifndef
_ENCODING_CONSTRAINTS_H_
#
define
_ENCODING_CONSTRAINTS_H_
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
class
AudioEncodingConstraints
{
public
:
bool
operator
=
=
(
const
AudioEncodingConstraints
&
constraints
)
const
{
return
maxBitrateBps
=
=
constraints
.
maxBitrateBps
;
}
Maybe
<
uint32_t
>
maxBitrateBps
;
}
;
class
VideoEncodingConstraints
{
public
:
VideoEncodingConstraints
(
)
:
maxWidth
(
0
)
maxHeight
(
0
)
maxFs
(
0
)
maxBr
(
0
)
maxPps
(
0
)
maxMbps
(
0
)
maxCpb
(
0
)
maxDpb
(
0
)
scaleDownBy
(
1
.
0
)
{
}
bool
operator
=
=
(
const
VideoEncodingConstraints
&
constraints
)
const
{
return
maxWidth
=
=
constraints
.
maxWidth
&
&
maxHeight
=
=
constraints
.
maxHeight
&
&
maxFps
=
=
constraints
.
maxFps
&
&
maxFs
=
=
constraints
.
maxFs
&
&
maxBr
=
=
constraints
.
maxBr
&
&
maxPps
=
=
constraints
.
maxPps
&
&
maxMbps
=
=
constraints
.
maxMbps
&
&
maxCpb
=
=
constraints
.
maxCpb
&
&
maxDpb
=
=
constraints
.
maxDpb
&
&
scaleDownBy
=
=
constraints
.
scaleDownBy
;
}
bool
ResolutionEquals
(
const
VideoEncodingConstraints
&
constraints
)
const
{
return
maxWidth
=
=
constraints
.
maxWidth
&
&
maxHeight
=
=
constraints
.
maxHeight
&
&
maxFs
=
=
constraints
.
maxFs
&
&
scaleDownBy
=
=
constraints
.
scaleDownBy
;
}
uint32_t
maxWidth
;
uint32_t
maxHeight
;
Maybe
<
double
>
maxFps
;
uint32_t
maxFs
;
uint32_t
maxBr
;
uint32_t
maxPps
;
uint32_t
maxMbps
;
uint32_t
maxCpb
;
uint32_t
maxDpb
;
double
scaleDownBy
;
}
;
}
#
endif
