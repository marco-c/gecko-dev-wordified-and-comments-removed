#
ifndef
RTCIDENTITYPROVIDER_H_
#
define
RTCIDENTITYPROVIDER_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
RTCIdentityProviderBinding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
struct
RTCIdentityProvider
;
class
RTCIdentityProviderRegistrar
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
RTCIdentityProviderRegistrar
)
explicit
RTCIdentityProviderRegistrar
(
nsIGlobalObject
*
aGlobal
)
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
Register
(
const
RTCIdentityProvider
&
aIdp
)
;
bool
HasIdp
(
)
const
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
GenerateAssertion
(
const
nsAString
&
aContents
const
nsAString
&
aOrigin
const
RTCIdentityProviderOptions
&
aOptions
ErrorResult
&
aRv
)
;
MOZ_CAN_RUN_SCRIPT
already_AddRefed
<
Promise
>
ValidateAssertion
(
const
nsAString
&
assertion
const
nsAString
&
origin
ErrorResult
&
aRv
)
;
private
:
~
RTCIdentityProviderRegistrar
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mGlobal
;
RefPtr
<
GenerateAssertionCallback
>
mGenerateAssertionCallback
;
RefPtr
<
ValidateAssertionCallback
>
mValidateAssertionCallback
;
}
;
}
#
endif
