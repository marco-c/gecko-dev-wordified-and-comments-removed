#
ifndef
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
define
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
include
"
CamerasChild
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
MediaEngineSource
.
h
"
#
include
"
MediaTrackGraph
.
h
"
#
include
"
common_video
/
include
/
video_frame_buffer_pool
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_defines
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
namespace
webrtc
{
using
CaptureCapability
=
VideoCaptureCapability
;
}
namespace
mozilla
{
namespace
dom
{
enum
class
VideoResizeModeEnum
:
uint8_t
;
}
enum
DistanceCalculation
{
kFitness
kFeasibility
}
;
class
MediaEngineRemoteVideoSource
:
public
MediaEngineSource
public
camera
:
:
FrameRelay
{
~
MediaEngineRemoteVideoSource
(
)
;
struct
CapabilityCandidate
{
explicit
CapabilityCandidate
(
webrtc
:
:
CaptureCapability
aCapability
uint32_t
aDistance
=
0
)
:
mCapability
(
aCapability
)
mDistance
(
aDistance
)
{
}
const
webrtc
:
:
CaptureCapability
mCapability
;
uint32_t
mDistance
;
}
;
class
CapabilityComparator
{
public
:
bool
Equals
(
const
CapabilityCandidate
&
aCandidate
const
webrtc
:
:
CaptureCapability
&
aCapability
)
const
{
return
aCandidate
.
mCapability
=
=
aCapability
;
}
}
;
bool
ChooseCapability
(
const
NormalizedConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
webrtc
:
:
CaptureCapability
&
aCapability
const
DistanceCalculation
aCalculate
)
;
uint32_t
GetDistance
(
const
webrtc
:
:
CaptureCapability
&
aCandidate
const
NormalizedConstraintSet
&
aConstraints
const
DistanceCalculation
aCalculate
)
const
;
uint32_t
GetFitnessDistance
(
const
webrtc
:
:
CaptureCapability
&
aCandidate
const
NormalizedConstraintSet
&
aConstraints
)
const
;
uint32_t
GetFeasibilityDistance
(
const
webrtc
:
:
CaptureCapability
&
aCandidate
const
NormalizedConstraintSet
&
aConstraints
)
const
;
static
void
TrimLessFitCandidates
(
nsTArray
<
CapabilityCandidate
>
&
aSet
)
;
public
:
explicit
MediaEngineRemoteVideoSource
(
const
MediaDevice
*
aMediaDevice
)
;
void
OnCaptureEnded
(
)
override
;
int
DeliverFrame
(
uint8_t
*
aBuffer
const
camera
:
:
VideoFrameProperties
&
aProps
)
override
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
Deallocate
(
)
override
;
void
SetTrack
(
const
RefPtr
<
MediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipal
)
override
;
nsresult
Start
(
)
override
;
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
FocusOnSelectedSource
(
)
override
;
nsresult
Stop
(
)
override
;
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
NormalizedConstraintSet
*
>
&
aConstraintSets
const
MediaEnginePrefs
&
aPrefs
)
const
override
;
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
RefPtr
<
GenericNonExclusivePromise
>
GetFirstFramePromise
(
)
const
override
{
return
mFirstFramePromise
;
}
const
TrackingId
&
GetTrackingId
(
)
const
override
;
static
camera
:
:
CaptureEngine
CaptureEngine
(
dom
:
:
MediaSourceEnum
aMediaSource
)
;
MediaEventSource
<
void
>
*
CaptureEndedEvent
(
)
override
{
return
&
mCaptureEndedEvent
;
}
void
GetCapabilities
(
dom
:
:
MediaTrackCapabilities
&
aOutCapabilities
)
const
override
;
private
:
size_t
NumCapabilities
(
)
const
;
webrtc
:
:
CaptureCapability
&
GetCapability
(
size_t
aIndex
)
const
;
int
mCaptureId
=
-
1
;
const
camera
:
:
CaptureEngine
mCapEngine
;
TrackingId
mTrackingId
;
Maybe
<
TrackingId
>
mFrameDeliveringTrackingId
;
Mutex
mMutex
MOZ_UNANNOTATED
;
MediaEngineSourceState
mState
=
kReleased
;
RefPtr
<
SourceMediaTrack
>
mTrack
;
PrincipalHandle
mPrincipal
=
PRINCIPAL_HANDLE_NONE
;
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
webrtc
:
:
VideoFrameBufferPool
mRescalingBufferPool
;
gfx
:
:
IntSize
mImageSize
=
gfx
:
:
IntSize
(
0
0
)
;
struct
AtomicBool
{
Atomic
<
bool
>
mValue
;
}
;
const
RefPtr
<
media
:
:
Refcountable
<
AtomicBool
>
>
mSettingsUpdatedByFrame
;
const
RefPtr
<
media
:
:
Refcountable
<
dom
:
:
MediaTrackSettings
>
>
mSettings
;
const
RefPtr
<
media
:
:
Refcountable
<
dom
:
:
MediaTrackCapabilities
>
>
mTrackCapabilities
;
MozPromiseHolder
<
GenericNonExclusivePromise
>
mFirstFramePromiseHolder
;
RefPtr
<
GenericNonExclusivePromise
>
mFirstFramePromise
;
webrtc
:
:
CaptureCapability
mCapability
;
DistanceCalculation
mCalculation
;
Maybe
<
NormalizedConstraints
>
mConstraints
MOZ_GUARDED_BY
(
mMutex
)
;
UniquePtr
<
MediaEnginePrefs
>
mPrefs
;
mutable
nsTArray
<
UniquePtr
<
webrtc
:
:
CaptureCapability
>
>
mCapabilities
;
mutable
bool
mCapabilitiesAreHardcoded
=
false
;
const
RefPtr
<
const
MediaDevice
>
mMediaDevice
;
const
nsCString
mDeviceUUID
;
Maybe
<
nsString
>
mFacingMode
;
MediaEventProducer
<
void
>
mCaptureEndedEvent
;
}
;
}
#
endif
