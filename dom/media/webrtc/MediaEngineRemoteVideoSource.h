#
ifndef
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
define
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
include
"
prcvar
.
h
"
#
include
"
prthread
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
MediaEngineCameraVideoSource
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
NullTransport
.
h
"
namespace
mozilla
{
class
MediaEngineRemoteVideoSource
:
public
MediaEngineCameraVideoSource
public
camera
:
:
FrameRelay
{
typedef
MediaEngineCameraVideoSource
Super
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
void
FrameSizeChange
(
unsigned
int
w
unsigned
int
h
)
override
;
int
DeliverFrame
(
uint8_t
*
buffer
const
camera
:
:
VideoFrameProperties
&
properties
)
override
;
MediaEngineRemoteVideoSource
(
int
aIndex
mozilla
:
:
camera
:
:
CaptureEngine
aCapEngine
dom
:
:
MediaSourceEnum
aMediaSource
bool
aScary
=
false
const
char
*
aMonitorName
=
"
RemoteVideo
.
Monitor
"
)
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
AllocationHandle
*
*
aOutHandle
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
Deallocate
(
AllocationHandle
*
aHandle
)
override
;
nsresult
Start
(
SourceMediaStream
*
TrackID
const
PrincipalHandle
&
)
override
;
nsresult
Stop
(
SourceMediaStream
*
TrackID
)
override
;
nsresult
Restart
(
AllocationHandle
*
aHandle
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
override
;
void
NotifyPull
(
MediaStreamGraph
*
aGraph
SourceMediaStream
*
aSource
TrackID
aId
StreamTime
aDesiredTime
const
PrincipalHandle
&
aPrincipalHandle
)
override
;
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
mMediaSource
;
}
bool
ChooseCapability
(
const
NormalizedConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
webrtc
:
:
CaptureCapability
&
aCapability
const
DistanceCalculation
aCalculate
)
override
;
void
Refresh
(
int
aIndex
)
;
void
Shutdown
(
)
override
;
bool
GetScary
(
)
const
override
{
return
mScary
;
}
protected
:
~
MediaEngineRemoteVideoSource
(
)
{
}
private
:
void
Init
(
)
;
size_t
NumCapabilities
(
)
const
override
;
void
GetCapability
(
size_t
aIndex
webrtc
:
:
CaptureCapability
&
aOut
)
const
override
;
void
SetLastCapability
(
const
webrtc
:
:
CaptureCapability
&
aCapability
)
;
nsresult
UpdateSingleSource
(
const
AllocationHandle
*
aHandle
const
NormalizedConstraints
&
aNetConstraints
const
NormalizedConstraints
&
aNewConstraint
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
override
;
dom
:
:
MediaSourceEnum
mMediaSource
;
mozilla
:
:
camera
:
:
CaptureEngine
mCapEngine
;
webrtc
:
:
CaptureCapability
mLastCapability
;
bool
mScary
;
}
;
}
#
endif
