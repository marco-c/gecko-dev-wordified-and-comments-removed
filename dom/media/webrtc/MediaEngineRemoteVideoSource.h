#
ifndef
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
define
MEDIAENGINE_REMOTE_VIDEO_SOURCE_H_
#
include
"
prcvar
.
h
"
#
include
"
prthread
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
MediaEngineCameraVideoSource
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
webrtc
/
common
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_capture
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_render
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
NullTransport
.
h
"
namespace
webrtc
{
class
I420VideoFrame
;
}
namespace
mozilla
{
class
MediaEngineRemoteVideoSource
:
public
MediaEngineCameraVideoSource
public
webrtc
:
:
ExternalRenderer
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
int
FrameSizeChange
(
unsigned
int
w
unsigned
int
h
unsigned
int
streams
)
override
;
int
DeliverFrame
(
unsigned
char
*
buffer
size_t
size
uint32_t
time_stamp
int64_t
ntp_time
int64_t
render_time
void
*
handle
)
override
;
int
DeliverI420Frame
(
const
webrtc
:
:
I420VideoFrame
&
webrtc_frame
)
override
{
return
0
;
}
;
bool
IsTextureSupported
(
)
override
{
return
false
;
}
;
MediaEngineRemoteVideoSource
(
int
aIndex
mozilla
:
:
camera
:
:
CaptureEngine
aCapEngine
dom
:
:
MediaSourceEnum
aMediaSource
const
char
*
aMonitorName
=
"
RemoteVideo
.
Monitor
"
)
;
class
AllocationHandle
:
public
BaseAllocationHandle
{
public
:
AllocationHandle
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
)
:
mConstraints
(
aConstraints
)
{
}
private
:
~
AllocationHandle
(
)
override
{
}
public
:
NormalizedConstraints
mConstraints
;
}
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
nsACString
&
aOrigin
BaseAllocationHandle
*
*
aOutHandle
)
override
;
nsresult
Deallocate
(
BaseAllocationHandle
*
aHandle
)
override
;
nsresult
Start
(
SourceMediaStream
*
TrackID
const
PrincipalHandle
&
)
override
;
nsresult
Stop
(
SourceMediaStream
*
TrackID
)
override
;
nsresult
Restart
(
BaseAllocationHandle
*
aHandle
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
)
override
;
void
NotifyPull
(
MediaStreamGraph
*
aGraph
SourceMediaStream
*
aSource
TrackID
aId
StreamTime
aDesiredTime
const
PrincipalHandle
&
aPrincipalHandle
)
override
;
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
mMediaSource
;
}
bool
ChooseCapability
(
const
NormalizedConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
)
override
;
void
Refresh
(
int
aIndex
)
;
void
Shutdown
(
)
override
;
protected
:
~
MediaEngineRemoteVideoSource
(
)
{
Shutdown
(
)
;
}
private
:
void
Init
(
)
;
size_t
NumCapabilities
(
)
override
;
void
GetCapability
(
size_t
aIndex
webrtc
:
:
CaptureCapability
&
aOut
)
override
;
dom
:
:
MediaSourceEnum
mMediaSource
;
mozilla
:
:
camera
:
:
CaptureEngine
mCapEngine
;
nsTArray
<
RefPtr
<
AllocationHandle
>
>
mRegisteredHandles
;
}
;
}
#
endif
