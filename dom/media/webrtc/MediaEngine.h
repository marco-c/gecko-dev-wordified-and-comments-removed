#
ifndef
MEDIAENGINE_H_
#
define
MEDIAENGINE_H_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
mozilla
/
dom
/
VideoStreamTrack
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Blob
;
}
enum
{
kVideoTrack
=
1
kAudioTrack
=
2
kTrackCount
}
;
class
MediaEngineVideoSource
;
class
MediaEngineAudioSource
;
class
MediaEnginePrefs
;
enum
MediaEngineState
{
kAllocated
kStarted
kStopped
kReleased
}
;
class
MediaEngine
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEngine
)
static
const
int
DEFAULT_VIDEO_FPS
=
30
;
static
const
int
DEFAULT_VIDEO_MIN_FPS
=
10
;
static
const
int
DEFAULT_43_VIDEO_WIDTH
=
640
;
static
const
int
DEFAULT_43_VIDEO_HEIGHT
=
480
;
static
const
int
DEFAULT_169_VIDEO_WIDTH
=
1280
;
static
const
int
DEFAULT_169_VIDEO_HEIGHT
=
720
;
#
ifndef
MOZ_B2G
static
const
int
DEFAULT_SAMPLE_RATE
=
32000
;
#
else
static
const
int
DEFAULT_SAMPLE_RATE
=
16000
;
#
endif
static
const
int
USE_GRAPH_RATE
=
-
1
;
virtual
void
EnumerateVideoDevices
(
dom
:
:
MediaSourceEnum
nsTArray
<
RefPtr
<
MediaEngineVideoSource
>
>
*
)
=
0
;
virtual
void
EnumerateAudioDevices
(
dom
:
:
MediaSourceEnum
nsTArray
<
RefPtr
<
MediaEngineAudioSource
>
>
*
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
protected
:
virtual
~
MediaEngine
(
)
{
}
}
;
class
MediaEnginePhotoCallback
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEnginePhotoCallback
)
virtual
nsresult
PhotoComplete
(
already_AddRefed
<
dom
:
:
Blob
>
aBlob
)
=
0
;
virtual
nsresult
PhotoError
(
nsresult
aRv
)
=
0
;
protected
:
virtual
~
MediaEnginePhotoCallback
(
)
{
}
}
;
class
MediaEngineSource
:
public
nsISupports
{
public
:
static
const
unsigned
int
kMaxDeviceNameLength
=
128
;
static
const
unsigned
int
kMaxUniqueIdLength
=
256
;
virtual
~
MediaEngineSource
(
)
{
}
virtual
void
Shutdown
(
)
=
0
;
virtual
void
GetName
(
nsAString
&
)
=
0
;
virtual
void
GetUUID
(
nsACString
&
)
=
0
;
virtual
nsresult
Deallocate
(
)
=
0
;
virtual
nsresult
Start
(
SourceMediaStream
*
TrackID
const
PrincipalHandle
&
)
=
0
;
virtual
void
SetDirectListeners
(
bool
)
=
0
;
virtual
void
NotifyPull
(
MediaStreamGraph
*
aGraph
SourceMediaStream
*
aSource
TrackID
aId
StreamTime
aDesiredTime
const
PrincipalHandle
&
aPrincipalHandle
)
=
0
;
virtual
nsresult
Stop
(
SourceMediaStream
*
aSource
TrackID
aID
)
=
0
;
virtual
nsresult
Restart
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
)
=
0
;
virtual
bool
IsFake
(
)
=
0
;
virtual
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
=
0
;
virtual
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
=
0
;
bool
IsAvailable
(
)
{
if
(
mState
=
=
kAllocated
|
|
mState
=
=
kStarted
)
{
return
false
;
}
else
{
return
true
;
}
}
void
SetHasFakeTracks
(
bool
aHasFakeTracks
)
{
mHasFakeTracks
=
aHasFakeTracks
;
}
virtual
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
nsACString
&
aOrigin
)
=
0
;
virtual
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
dom
:
:
MediaTrackConstraintSet
*
>
&
aConstraintSets
const
nsString
&
aDeviceId
)
=
0
;
protected
:
explicit
MediaEngineSource
(
MediaEngineState
aState
)
:
mState
(
aState
)
#
ifdef
DEBUG
mOwningThread
(
PR_GetCurrentThread
(
)
)
#
endif
mHasFakeTracks
(
false
)
{
}
void
AssertIsOnOwningThread
(
)
{
MOZ_ASSERT
(
PR_GetCurrentThread
(
)
=
=
mOwningThread
)
;
}
MediaEngineState
mState
;
#
ifdef
DEBUG
PRThread
*
mOwningThread
;
#
endif
bool
mHasFakeTracks
;
}
;
class
MediaEnginePrefs
{
public
:
MediaEnginePrefs
(
)
:
mWidth
(
0
)
mHeight
(
0
)
mFPS
(
0
)
mMinFPS
(
0
)
mFreq
(
0
)
mAecOn
(
false
)
mAgcOn
(
false
)
mNoiseOn
(
false
)
mAec
(
0
)
mAgc
(
0
)
mNoise
(
0
)
mPlayoutDelay
(
0
)
mFullDuplex
(
false
)
mExtendedFilter
(
false
)
mDelayAgnostic
(
false
)
{
}
int32_t
mWidth
;
int32_t
mHeight
;
int32_t
mFPS
;
int32_t
mMinFPS
;
int32_t
mFreq
;
bool
mAecOn
;
bool
mAgcOn
;
bool
mNoiseOn
;
int32_t
mAec
;
int32_t
mAgc
;
int32_t
mNoise
;
int32_t
mPlayoutDelay
;
bool
mFullDuplex
;
bool
mExtendedFilter
;
bool
mDelayAgnostic
;
int32_t
GetWidth
(
bool
aHD
=
false
)
const
{
return
mWidth
?
mWidth
:
(
mHeight
?
(
mHeight
*
GetDefWidth
(
aHD
)
)
/
GetDefHeight
(
aHD
)
:
GetDefWidth
(
aHD
)
)
;
}
int32_t
GetHeight
(
bool
aHD
=
false
)
const
{
return
mHeight
?
mHeight
:
(
mWidth
?
(
mWidth
*
GetDefHeight
(
aHD
)
)
/
GetDefWidth
(
aHD
)
:
GetDefHeight
(
aHD
)
)
;
}
private
:
static
int32_t
GetDefWidth
(
bool
aHD
=
false
)
{
if
(
aHD
)
{
return
MediaEngine
:
:
DEFAULT_169_VIDEO_WIDTH
;
}
return
MediaEngine
:
:
DEFAULT_43_VIDEO_WIDTH
;
}
static
int32_t
GetDefHeight
(
bool
aHD
=
false
)
{
if
(
aHD
)
{
return
MediaEngine
:
:
DEFAULT_169_VIDEO_HEIGHT
;
}
return
MediaEngine
:
:
DEFAULT_43_VIDEO_HEIGHT
;
}
}
;
class
MediaEngineVideoSource
:
public
MediaEngineSource
{
public
:
virtual
~
MediaEngineVideoSource
(
)
{
}
protected
:
explicit
MediaEngineVideoSource
(
MediaEngineState
aState
)
:
MediaEngineSource
(
aState
)
{
}
MediaEngineVideoSource
(
)
:
MediaEngineSource
(
kReleased
)
{
}
}
;
class
MediaEngineAudioSource
:
public
MediaEngineSource
public
AudioDataListenerInterface
{
public
:
virtual
~
MediaEngineAudioSource
(
)
{
}
protected
:
explicit
MediaEngineAudioSource
(
MediaEngineState
aState
)
:
MediaEngineSource
(
aState
)
{
}
MediaEngineAudioSource
(
)
:
MediaEngineSource
(
kReleased
)
{
}
}
;
}
#
endif
