#
ifndef
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_CALLWORKERTHREAD_H_
#
define
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_CALLWORKERTHREAD_H_
#
include
"
mozilla
/
AbstractThread
.
h
"
#
include
"
nsIDirectTaskDispatcher
.
h
"
#
include
"
WebrtcTaskQueueWrapper
.
h
"
namespace
mozilla
{
class
CallWorkerThread
final
:
public
AbstractThread
public
nsIDirectTaskDispatcher
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIDIRECTTASKDISPATCHER
explicit
CallWorkerThread
(
UniquePtr
<
WebrtcTaskQueueWrapper
<
DeletionPolicy
:
:
NonBlocking
>
>
aWebrtcTaskQueue
)
:
AbstractThread
(
aWebrtcTaskQueue
-
>
mTaskQueue
-
>
SupportsTailDispatch
(
)
)
mWebrtcTaskQueue
(
std
:
:
move
(
aWebrtcTaskQueue
)
)
{
}
nsresult
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
DispatchReason
aReason
=
NormalDispatch
)
override
;
bool
IsCurrentThreadIn
(
)
const
override
;
TaskDispatcher
&
TailDispatcher
(
)
override
;
nsIEventTarget
*
AsEventTarget
(
)
override
;
NS_IMETHOD
DelayedDispatch
(
already_AddRefed
<
nsIRunnable
>
aEvent
uint32_t
aDelayMs
)
override
;
NS_IMETHOD
RegisterShutdownTask
(
nsITargetShutdownTask
*
aTask
)
override
;
NS_IMETHOD
UnregisterShutdownTask
(
nsITargetShutdownTask
*
aTask
)
override
;
const
UniquePtr
<
WebrtcTaskQueueWrapper
<
DeletionPolicy
:
:
NonBlocking
>
>
mWebrtcTaskQueue
;
protected
:
~
CallWorkerThread
(
)
=
default
;
}
;
}
#
endif
