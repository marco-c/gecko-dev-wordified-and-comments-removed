#
ifndef
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_WEBRTCCALLWRAPPER_H_
#
define
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_WEBRTCCALLWRAPPER_H_
#
include
<
set
>
#
include
"
nsISupportsImpl
.
h
"
#
include
"
api
/
video
/
builtin_video_bitrate_allocator_factory
.
h
"
#
include
"
call
/
call
.
h
"
namespace
mozilla
{
class
MediaSessionConduit
;
class
SharedWebrtcState
;
class
WebrtcCallWrapper
{
public
:
typedef
webrtc
:
:
Call
:
:
Config
Config
;
static
RefPtr
<
WebrtcCallWrapper
>
Create
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
aShutdownTicket
const
RefPtr
<
SharedWebrtcState
>
&
aSharedState
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WebrtcCallWrapper
)
WebrtcCallWrapper
(
const
WebrtcCallWrapper
&
)
=
delete
;
void
operator
=
(
const
WebrtcCallWrapper
&
)
=
delete
;
void
SetCall
(
UniquePtr
<
webrtc
:
:
Call
>
aCall
)
;
webrtc
:
:
Call
*
Call
(
)
const
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
;
void
RegisterConduit
(
MediaSessionConduit
*
conduit
)
;
void
UnregisterConduit
(
MediaSessionConduit
*
conduit
)
;
DOMHighResTimeStamp
GetNow
(
)
const
;
void
Destroy
(
)
;
const
dom
:
:
RTCStatsTimestampMaker
&
GetTimestampMaker
(
)
const
;
protected
:
virtual
~
WebrtcCallWrapper
(
)
;
WebrtcCallWrapper
(
RefPtr
<
SharedWebrtcState
>
aSharedState
UniquePtr
<
webrtc
:
:
VideoBitrateAllocatorFactory
>
aVideoBitrateAllocatorFactory
UniquePtr
<
webrtc
:
:
RtcEventLog
>
aEventLog
UniquePtr
<
webrtc
:
:
TaskQueueFactory
>
aTaskQueueFactory
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
aShutdownTicket
)
;
explicit
WebrtcCallWrapper
(
UniquePtr
<
webrtc
:
:
Call
>
aCall
)
;
const
RefPtr
<
SharedWebrtcState
>
mSharedState
;
std
:
:
set
<
MediaSessionConduit
*
>
mConduits
;
dom
:
:
RTCStatsTimestampMaker
mTimestampMaker
;
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mShutdownTicket
;
public
:
const
RefPtr
<
AbstractThread
>
mCallThread
;
const
RefPtr
<
webrtc
:
:
AudioDecoderFactory
>
mAudioDecoderFactory
;
const
UniquePtr
<
webrtc
:
:
VideoBitrateAllocatorFactory
>
mVideoBitrateAllocatorFactory
;
const
UniquePtr
<
webrtc
:
:
RtcEventLog
>
mEventLog
;
const
UniquePtr
<
webrtc
:
:
TaskQueueFactory
>
mTaskQueueFactory
;
protected
:
UniquePtr
<
webrtc
:
:
Call
>
mCall
;
}
;
}
#
endif
