#
include
"
WebrtcCallWrapper
.
h
"
#
include
"
jsapi
/
PeerConnectionCtx
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
TaskQueueWrapper
.
h
"
namespace
mozilla
{
RefPtr
<
WebrtcCallWrapper
>
WebrtcCallWrapper
:
:
Create
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
aShutdownTicket
const
RefPtr
<
SharedWebrtcState
>
&
aSharedState
)
{
auto
eventLog
=
MakeUnique
<
webrtc
:
:
RtcEventLogNull
>
(
)
;
auto
taskQueueFactory
=
MakeUnique
<
SharedThreadPoolWebRtcTaskQueueFactory
>
(
)
;
auto
videoBitrateAllocatorFactory
=
WrapUnique
(
webrtc
:
:
CreateBuiltinVideoBitrateAllocatorFactory
(
)
.
release
(
)
)
;
RefPtr
<
WebrtcCallWrapper
>
wrapper
=
new
WebrtcCallWrapper
(
aSharedState
std
:
:
move
(
videoBitrateAllocatorFactory
)
std
:
:
move
(
eventLog
)
std
:
:
move
(
taskQueueFactory
)
aTimestampMaker
std
:
:
move
(
aShutdownTicket
)
)
;
wrapper
-
>
mCallThread
-
>
Dispatch
(
NS_NewRunnableFunction
(
__func__
[
wrapper
aSharedState
]
{
webrtc
:
:
Call
:
:
Config
config
(
wrapper
-
>
mEventLog
.
get
(
)
)
;
config
.
audio_state
=
webrtc
:
:
AudioState
:
:
Create
(
aSharedState
-
>
mAudioStateConfig
)
;
config
.
task_queue_factory
=
wrapper
-
>
mTaskQueueFactory
.
get
(
)
;
config
.
trials
=
aSharedState
-
>
mTrials
.
get
(
)
;
wrapper
-
>
SetCall
(
WrapUnique
(
webrtc
:
:
Call
:
:
Create
(
config
aSharedState
-
>
GetModuleThread
(
)
)
)
)
;
}
)
)
;
return
wrapper
;
}
void
WebrtcCallWrapper
:
:
SetCall
(
UniquePtr
<
webrtc
:
:
Call
>
aCall
)
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
MOZ_ASSERT
(
!
mCall
)
;
mCall
=
std
:
:
move
(
aCall
)
;
}
webrtc
:
:
Call
*
WebrtcCallWrapper
:
:
Call
(
)
const
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
return
mCall
.
get
(
)
;
}
bool
WebrtcCallWrapper
:
:
UnsetRemoteSSRC
(
uint32_t
ssrc
)
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
for
(
auto
conduit
:
mConduits
)
{
if
(
!
conduit
-
>
UnsetRemoteSSRC
(
ssrc
)
)
{
return
false
;
}
}
return
true
;
}
void
WebrtcCallWrapper
:
:
RegisterConduit
(
MediaSessionConduit
*
conduit
)
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
mConduits
.
insert
(
conduit
)
;
}
void
WebrtcCallWrapper
:
:
UnregisterConduit
(
MediaSessionConduit
*
conduit
)
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
mConduits
.
erase
(
conduit
)
;
}
DOMHighResTimeStamp
WebrtcCallWrapper
:
:
GetNow
(
)
const
{
return
mTimestampMaker
.
GetNow
(
)
;
}
void
WebrtcCallWrapper
:
:
Destroy
(
)
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
mCall
=
nullptr
;
mShutdownTicket
=
nullptr
;
}
const
dom
:
:
RTCStatsTimestampMaker
&
WebrtcCallWrapper
:
:
GetTimestampMaker
(
)
const
{
return
mTimestampMaker
;
}
WebrtcCallWrapper
:
:
~
WebrtcCallWrapper
(
)
{
MOZ_ASSERT
(
!
mCall
)
;
}
WebrtcCallWrapper
:
:
WebrtcCallWrapper
(
RefPtr
<
SharedWebrtcState
>
aSharedState
UniquePtr
<
webrtc
:
:
VideoBitrateAllocatorFactory
>
aVideoBitrateAllocatorFactory
UniquePtr
<
webrtc
:
:
RtcEventLog
>
aEventLog
UniquePtr
<
webrtc
:
:
TaskQueueFactory
>
aTaskQueueFactory
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
aShutdownTicket
)
:
mSharedState
(
std
:
:
move
(
aSharedState
)
)
mTimestampMaker
(
aTimestampMaker
)
mShutdownTicket
(
std
:
:
move
(
aShutdownTicket
)
)
mCallThread
(
mSharedState
-
>
mCallWorkerThread
)
mAudioDecoderFactory
(
mSharedState
-
>
mAudioDecoderFactory
)
mVideoBitrateAllocatorFactory
(
std
:
:
move
(
aVideoBitrateAllocatorFactory
)
)
mEventLog
(
std
:
:
move
(
aEventLog
)
)
mTaskQueueFactory
(
std
:
:
move
(
aTaskQueueFactory
)
)
{
}
}
