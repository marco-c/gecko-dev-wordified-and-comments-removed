#
include
"
CallWorkerThread
.
h
"
namespace
mozilla
{
NS_IMPL_ISUPPORTS
(
CallWorkerThread
nsIDirectTaskDispatcher
nsISerialEventTarget
nsIEventTarget
)
;
nsresult
CallWorkerThread
:
:
Dispatch
(
already_AddRefed
<
nsIRunnable
>
aRunnable
DispatchReason
aReason
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
Dispatch
(
std
:
:
move
(
aRunnable
)
aReason
)
;
}
bool
CallWorkerThread
:
:
IsCurrentThreadIn
(
)
const
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
IsOnCurrentThreadInfallible
(
)
&
&
mWebrtcTaskQueue
-
>
IsCurrent
(
)
;
}
TaskDispatcher
&
CallWorkerThread
:
:
TailDispatcher
(
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
TailDispatcher
(
)
;
}
nsIEventTarget
*
CallWorkerThread
:
:
AsEventTarget
(
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
AsEventTarget
(
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
DelayedDispatch
(
already_AddRefed
<
nsIRunnable
>
aEvent
uint32_t
aDelayMs
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
DelayedDispatch
(
std
:
:
move
(
aEvent
)
aDelayMs
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
RegisterShutdownTask
(
nsITargetShutdownTask
*
aTask
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
RegisterShutdownTask
(
aTask
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
UnregisterShutdownTask
(
nsITargetShutdownTask
*
aTask
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
UnregisterShutdownTask
(
aTask
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
DispatchDirectTask
(
already_AddRefed
<
nsIRunnable
>
aEvent
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
DispatchDirectTask
(
std
:
:
move
(
aEvent
)
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
DrainDirectTasks
(
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
DrainDirectTasks
(
)
;
}
NS_IMETHODIMP
CallWorkerThread
:
:
HaveDirectTasks
(
bool
*
aValue
)
{
return
mWebrtcTaskQueue
-
>
mTaskQueue
-
>
HaveDirectTasks
(
aValue
)
;
}
}
