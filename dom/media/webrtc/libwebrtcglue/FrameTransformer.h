#
ifndef
MOZILLA_DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_FRAMETRANSFORMER_H_
#
define
MOZILLA_DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_FRAMETRANSFORMER_H_
#
include
<
map
>
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
libwebrtcglue
/
FrameTransformerProxy
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
jsapi
/
RTCRtpScriptTransformer
.
h
"
namespace
mozilla
{
class
FrameTransformer
:
public
webrtc
:
:
FrameTransformerInterface
{
public
:
explicit
FrameTransformer
(
bool
aVideo
)
;
virtual
~
FrameTransformer
(
)
;
void
SetProxy
(
FrameTransformerProxy
*
aProxy
)
;
void
Transform
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
override
;
void
OnTransformedFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
;
void
RegisterTransformedFrameCallback
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
aCallback
)
override
;
void
UnregisterTransformedFrameCallback
(
)
override
;
void
RegisterTransformedFrameSinkCallback
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
aCallback
uint32_t
aSsrc
)
override
;
void
UnregisterTransformedFrameSinkCallback
(
uint32_t
aSsrc
)
override
;
bool
IsVideo
(
)
const
{
return
mVideo
;
}
private
:
const
bool
mVideo
;
Mutex
mCallbacksMutex
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
mCallback
MOZ_GUARDED_BY
(
mCallbacksMutex
)
;
std
:
:
map
<
uint32_t
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
>
mCallbacksBySsrc
MOZ_GUARDED_BY
(
mCallbacksMutex
)
;
Mutex
mProxyMutex
;
RefPtr
<
FrameTransformerProxy
>
mProxy
MOZ_GUARDED_BY
(
mProxyMutex
)
;
}
;
}
#
endif
