#
include
"
libwebrtcglue
/
FrameTransformer
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
<
stdint
.
h
>
#
include
"
libwebrtcglue
/
FrameTransformerProxy
.
h
"
namespace
mozilla
{
FrameTransformer
:
:
FrameTransformer
(
bool
aVideo
)
:
webrtc
:
:
FrameTransformerInterface
(
)
mVideo
(
aVideo
)
mCallbacksMutex
(
"
FrameTransformer
:
:
mCallbacksMutex
"
)
mProxyMutex
(
"
FrameTransformer
:
:
mProxyMutex
"
)
{
}
FrameTransformer
:
:
~
FrameTransformer
(
)
{
if
(
mProxy
)
{
mProxy
-
>
SetLibwebrtcTransformer
(
nullptr
)
;
}
}
void
FrameTransformer
:
:
Transform
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
{
MutexAutoLock
lock
(
mProxyMutex
)
;
if
(
mProxy
)
{
mProxy
-
>
Transform
(
std
:
:
move
(
aFrame
)
)
;
return
;
}
OnTransformedFrame
(
std
:
:
move
(
aFrame
)
)
;
}
void
FrameTransformer
:
:
RegisterTransformedFrameCallback
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
aCallback
)
{
MutexAutoLock
lock
(
mCallbacksMutex
)
;
mCallback
=
aCallback
;
}
void
FrameTransformer
:
:
UnregisterTransformedFrameCallback
(
)
{
MutexAutoLock
lock
(
mCallbacksMutex
)
;
mCallback
=
nullptr
;
}
void
FrameTransformer
:
:
RegisterTransformedFrameSinkCallback
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
TransformedFrameCallback
>
aCallback
uint32_t
aSsrc
)
{
MutexAutoLock
lock
(
mCallbacksMutex
)
;
mCallbacksBySsrc
[
aSsrc
]
=
aCallback
;
}
void
FrameTransformer
:
:
UnregisterTransformedFrameSinkCallback
(
uint32_t
aSsrc
)
{
MutexAutoLock
lock
(
mCallbacksMutex
)
;
mCallbacksBySsrc
.
erase
(
aSsrc
)
;
}
void
FrameTransformer
:
:
OnTransformedFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
{
MutexAutoLock
lock
(
mCallbacksMutex
)
;
if
(
mCallback
)
{
mCallback
-
>
OnTransformedFrame
(
std
:
:
move
(
aFrame
)
)
;
}
else
if
(
auto
it
=
mCallbacksBySsrc
.
find
(
aFrame
-
>
GetSsrc
(
)
)
;
it
!
=
mCallbacksBySsrc
.
end
(
)
)
{
it
-
>
second
-
>
OnTransformedFrame
(
std
:
:
move
(
aFrame
)
)
;
}
}
void
FrameTransformer
:
:
SetProxy
(
FrameTransformerProxy
*
aProxy
)
{
MutexAutoLock
lock
(
mProxyMutex
)
;
if
(
mProxy
)
{
mProxy
-
>
SetLibwebrtcTransformer
(
nullptr
)
;
}
mProxy
=
aProxy
;
if
(
mProxy
)
{
mProxy
-
>
SetLibwebrtcTransformer
(
this
)
;
}
}
}
