#
ifndef
MEDIA_CONDUIT_ABSTRACTION_
#
define
MEDIA_CONDUIT_ABSTRACTION_
#
include
<
vector
>
#
include
<
set
>
#
include
"
CodecConfig
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
jsapi
/
PeerConnectionCtx
.
h
"
#
include
"
jsapi
/
RTCStatsReport
.
h
"
#
include
"
MediaConduitErrors
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
TaskQueueWrapper
.
h
"
#
include
"
VideoTypes
.
h
"
#
include
"
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
call
/
call
.
h
"
namespace
webrtc
{
class
VideoFrame
;
}
namespace
mozilla
{
namespace
dom
{
struct
RTCRtpSourceEntry
;
}
namespace
dom
{
struct
RTCRtpSourceEntry
;
}
enum
class
MediaSessionConduitLocalDirection
:
int
{
kSend
kRecv
}
;
class
VideoSessionConduit
;
class
AudioSessionConduit
;
class
RtpRtcpConfig
;
using
RtpExtList
=
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
;
class
TransportInterface
{
protected
:
virtual
~
TransportInterface
(
)
{
}
public
:
virtual
nsresult
SendRtpPacket
(
const
uint8_t
*
data
size_t
len
)
=
0
;
virtual
nsresult
SendRtcpPacket
(
const
uint8_t
*
data
size_t
len
)
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TransportInterface
)
}
;
class
VideoRenderer
{
protected
:
virtual
~
VideoRenderer
(
)
{
}
public
:
virtual
void
FrameSizeChange
(
unsigned
int
width
unsigned
int
height
)
=
0
;
virtual
void
RenderVideoFrame
(
const
webrtc
:
:
VideoFrameBuffer
&
buffer
uint32_t
time_stamp
int64_t
render_time
)
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoRenderer
)
}
;
class
MediaSessionConduit
{
protected
:
virtual
~
MediaSessionConduit
(
)
{
}
public
:
enum
Type
{
AUDIO
VIDEO
}
;
static
std
:
:
string
LocalDirectionToString
(
const
MediaSessionConduitLocalDirection
aDirection
)
{
return
aDirection
=
=
MediaSessionConduitLocalDirection
:
:
kSend
?
"
send
"
:
"
receive
"
;
}
virtual
Type
type
(
)
const
=
0
;
virtual
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
webrtc
:
:
RTPHeader
&
header
)
=
0
;
virtual
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
=
0
;
virtual
Maybe
<
DOMHighResTimeStamp
>
LastRtcpReceived
(
)
const
=
0
;
virtual
DOMHighResTimeStamp
GetNow
(
)
const
=
0
;
virtual
MediaConduitErrorCode
StopTransmitting
(
)
=
0
;
virtual
MediaConduitErrorCode
StartTransmitting
(
)
=
0
;
virtual
MediaConduitErrorCode
StopReceiving
(
)
=
0
;
virtual
MediaConduitErrorCode
StartReceiving
(
)
=
0
;
virtual
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
=
0
;
virtual
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
=
0
;
virtual
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
uint32_t
>
&
aSSRCs
const
std
:
:
vector
<
uint32_t
>
&
aRtxSSRCs
)
=
0
;
virtual
std
:
:
vector
<
uint32_t
>
GetLocalSSRCs
(
)
=
0
;
virtual
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
aExtensions
)
=
0
;
virtual
bool
GetRemoteSSRC
(
uint32_t
*
ssrc
)
=
0
;
virtual
bool
SetRemoteSSRC
(
uint32_t
ssrc
uint32_t
rtxSsrc
)
=
0
;
virtual
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
bool
SetLocalCNAME
(
const
char
*
cname
)
=
0
;
virtual
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
=
0
;
virtual
void
SetSyncGroup
(
const
std
:
:
string
&
group
)
=
0
;
virtual
void
GetRtpSources
(
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
=
0
;
virtual
bool
HasCodecPluginID
(
uint64_t
aPluginID
)
=
0
;
virtual
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
=
0
;
virtual
MediaConduitErrorCode
DeliverPacket
(
const
void
*
data
int
len
)
=
0
;
virtual
void
DeleteStreams
(
)
=
0
;
virtual
Maybe
<
RefPtr
<
AudioSessionConduit
>
>
AsAudioSessionConduit
(
)
=
0
;
virtual
Maybe
<
RefPtr
<
VideoSessionConduit
>
>
AsVideoSessionConduit
(
)
=
0
;
virtual
webrtc
:
:
Call
:
:
Stats
GetCallStats
(
)
const
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaSessionConduit
)
}
;
class
WebRtcCallWrapper
:
public
RefCounted
<
WebRtcCallWrapper
>
{
public
:
typedef
webrtc
:
:
Call
:
:
Config
Config
;
static
RefPtr
<
WebRtcCallWrapper
>
Create
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
SharedWebrtcState
*
aSharedState
webrtc
:
:
WebRtcKeyValueConfig
*
aTrials
)
{
auto
current
=
TaskQueueWrapper
:
:
MainAsCurrent
(
)
;
return
Create
(
aTimestampMaker
aSharedState
-
>
GetModuleThread
(
)
aSharedState
-
>
mAudioStateConfig
aSharedState
-
>
mAudioDecoderFactory
aTrials
)
;
}
static
RefPtr
<
WebRtcCallWrapper
>
Create
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
webrtc
:
:
SharedModuleThread
*
aModuleThread
const
webrtc
:
:
AudioState
:
:
Config
&
aAudioStateConfig
webrtc
:
:
AudioDecoderFactory
*
aAudioDecoderFactory
webrtc
:
:
WebRtcKeyValueConfig
*
aTrials
)
{
auto
current
=
TaskQueueWrapper
:
:
MainAsCurrent
(
)
;
auto
eventLog
=
MakeUnique
<
webrtc
:
:
RtcEventLogNull
>
(
)
;
webrtc
:
:
Call
:
:
Config
config
(
eventLog
.
get
(
)
)
;
config
.
audio_state
=
webrtc
:
:
AudioState
:
:
Create
(
aAudioStateConfig
)
;
auto
taskQueueFactory
=
MakeUnique
<
SharedThreadPoolWebRtcTaskQueueFactory
>
(
)
;
config
.
task_queue_factory
=
taskQueueFactory
.
get
(
)
;
config
.
trials
=
aTrials
;
return
new
WebRtcCallWrapper
(
aAudioDecoderFactory
WrapUnique
(
webrtc
:
:
Call
:
:
Create
(
config
aModuleThread
)
)
std
:
:
move
(
eventLog
)
std
:
:
move
(
taskQueueFactory
)
aTimestampMaker
)
;
}
static
RefPtr
<
WebRtcCallWrapper
>
Create
(
UniquePtr
<
webrtc
:
:
Call
>
aCall
)
{
return
new
WebRtcCallWrapper
(
std
:
:
move
(
aCall
)
)
;
}
WebRtcCallWrapper
(
const
WebRtcCallWrapper
&
)
=
delete
;
void
operator
=
(
const
WebRtcCallWrapper
&
)
=
delete
;
webrtc
:
:
Call
*
Call
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mCall
.
get
(
)
;
}
virtual
~
WebRtcCallWrapper
(
)
=
default
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
{
MOZ_ASSERT
(
TaskQueueWrapper
:
:
GetMainWorker
(
)
-
>
IsCurrent
(
)
)
;
for
(
auto
conduit
:
mConduits
)
{
if
(
!
conduit
-
>
UnsetRemoteSSRC
(
ssrc
)
)
{
return
false
;
}
}
return
true
;
}
void
RegisterConduit
(
MediaSessionConduit
*
conduit
)
{
MOZ_ASSERT
(
TaskQueueWrapper
:
:
GetMainWorker
(
)
-
>
IsCurrent
(
)
)
;
mConduits
.
insert
(
conduit
)
;
}
void
UnregisterConduit
(
MediaSessionConduit
*
conduit
)
{
MOZ_ASSERT
(
TaskQueueWrapper
:
:
GetMainWorker
(
)
-
>
IsCurrent
(
)
)
;
mConduits
.
erase
(
conduit
)
;
}
DOMHighResTimeStamp
GetNow
(
)
const
{
return
mTimestampMaker
.
GetNow
(
)
;
}
void
Destroy
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
current
=
TaskQueueWrapper
:
:
MainAsCurrent
(
)
;
mCall
=
nullptr
;
}
const
dom
:
:
RTCStatsTimestampMaker
&
GetTimestampMaker
(
)
const
{
return
mTimestampMaker
;
}
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
WebRtcCallWrapper
)
private
:
WebRtcCallWrapper
(
RefPtr
<
webrtc
:
:
AudioDecoderFactory
>
aAudioDecoderFactory
UniquePtr
<
webrtc
:
:
Call
>
aCall
UniquePtr
<
webrtc
:
:
RtcEventLog
>
aEventLog
UniquePtr
<
webrtc
:
:
TaskQueueFactory
>
aTaskQueueFactory
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
)
:
mTimestampMaker
(
aTimestampMaker
)
mAudioDecoderFactory
(
std
:
:
move
(
aAudioDecoderFactory
)
)
mEventLog
(
std
:
:
move
(
aEventLog
)
)
mTaskQueueFactory
(
std
:
:
move
(
aTaskQueueFactory
)
)
mCall
(
std
:
:
move
(
aCall
)
)
{
}
explicit
WebRtcCallWrapper
(
UniquePtr
<
webrtc
:
:
Call
>
aCall
)
:
mCall
(
std
:
:
move
(
aCall
)
)
{
MOZ_ASSERT
(
mCall
)
;
}
std
:
:
set
<
MediaSessionConduit
*
>
mConduits
;
dom
:
:
RTCStatsTimestampMaker
mTimestampMaker
;
public
:
const
RefPtr
<
webrtc
:
:
AudioDecoderFactory
>
mAudioDecoderFactory
;
const
UniquePtr
<
webrtc
:
:
RtcEventLog
>
mEventLog
;
const
UniquePtr
<
webrtc
:
:
TaskQueueFactory
>
mTaskQueueFactory
;
private
:
UniquePtr
<
webrtc
:
:
Call
>
mCall
;
}
;
class
CodecPluginID
{
public
:
virtual
~
CodecPluginID
(
)
{
}
virtual
uint64_t
PluginID
(
)
const
=
0
;
}
;
class
VideoEncoder
:
public
CodecPluginID
{
public
:
virtual
~
VideoEncoder
(
)
{
}
}
;
class
VideoDecoder
:
public
CodecPluginID
{
public
:
virtual
~
VideoDecoder
(
)
{
}
}
;
class
VideoSessionConduit
:
public
MediaSessionConduit
{
public
:
static
RefPtr
<
VideoSessionConduit
>
Create
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
)
;
enum
FrameRequestType
{
FrameRequestNone
FrameRequestFir
FrameRequestPli
FrameRequestUnknown
}
;
VideoSessionConduit
(
)
:
mFrameRequestMethod
(
FrameRequestNone
)
mUsingNackBasic
(
false
)
mUsingTmmbr
(
false
)
mUsingFEC
(
false
)
{
}
virtual
~
VideoSessionConduit
(
)
{
}
Type
type
(
)
const
override
{
return
VIDEO
;
}
Maybe
<
RefPtr
<
AudioSessionConduit
>
>
AsAudioSessionConduit
(
)
override
{
return
Nothing
(
)
;
}
Maybe
<
RefPtr
<
VideoSessionConduit
>
>
AsVideoSessionConduit
(
)
override
{
return
Some
(
RefPtr
<
VideoSessionConduit
>
(
this
)
)
;
}
virtual
MediaConduitErrorCode
AttachRenderer
(
RefPtr
<
mozilla
:
:
VideoRenderer
>
aRenderer
)
=
0
;
virtual
void
DetachRenderer
(
)
=
0
;
virtual
void
DisableSsrcChanges
(
)
=
0
;
bool
SetRemoteSSRC
(
uint32_t
ssrc
uint32_t
rtxSsrc
)
override
=
0
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
=
0
;
virtual
MediaConduitErrorCode
SendVideoFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureCodecMode
(
webrtc
:
:
VideoCodecMode
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
VideoCodecConfig
*
sendSessionConfig
const
RtpRtcpConfig
&
aRtpRtcpConfig
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
VideoCodecConfig
>
>
&
recvCodecConfigList
const
RtpRtcpConfig
&
aRtpRtcpConfig
)
=
0
;
FrameRequestType
FrameRequestMethod
(
)
const
{
return
mFrameRequestMethod
;
}
bool
UsingNackBasic
(
)
const
{
return
mUsingNackBasic
;
}
bool
UsingTmmbr
(
)
const
{
return
mUsingTmmbr
;
}
bool
UsingFEC
(
)
const
{
return
mUsingFEC
;
}
virtual
Maybe
<
webrtc
:
:
VideoReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
=
0
;
virtual
Maybe
<
webrtc
:
:
VideoSendStream
:
:
Stats
>
GetSenderStats
(
)
const
=
0
;
virtual
void
CollectTelemetryData
(
)
=
0
;
virtual
bool
AddFrameHistory
(
dom
:
:
Sequence
<
dom
:
:
RTCVideoFrameHistoryInternal
>
*
outHistories
)
const
=
0
;
protected
:
FrameRequestType
mFrameRequestMethod
;
bool
mUsingNackBasic
;
bool
mUsingTmmbr
;
bool
mUsingFEC
;
}
;
class
AudioSessionConduit
:
public
MediaSessionConduit
{
public
:
static
RefPtr
<
AudioSessionConduit
>
Create
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
)
;
virtual
~
AudioSessionConduit
(
)
{
}
Type
type
(
)
const
override
{
return
AUDIO
;
}
Maybe
<
RefPtr
<
AudioSessionConduit
>
>
AsAudioSessionConduit
(
)
override
{
return
Some
(
this
)
;
}
Maybe
<
RefPtr
<
VideoSessionConduit
>
>
AsVideoSessionConduit
(
)
override
{
return
Nothing
(
)
;
}
virtual
MediaConduitErrorCode
SendAudioFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
AudioFrame
>
frame
)
=
0
;
virtual
MediaConduitErrorCode
GetAudioFrame
(
int32_t
samplingFreqHz
webrtc
:
:
AudioFrame
*
frame
)
=
0
;
virtual
bool
IsSamplingFreqSupported
(
int
freq
)
const
=
0
;
virtual
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
AudioCodecConfig
*
sendCodecConfig
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
AudioCodecConfig
>
>
&
recvCodecConfigList
)
=
0
;
virtual
bool
SetDtmfPayloadType
(
unsigned
char
type
int
freq
)
=
0
;
virtual
bool
InsertDTMFTone
(
int
channel
int
eventCode
bool
outOfBand
int
lengthMs
int
attenuationDb
)
=
0
;
virtual
Maybe
<
webrtc
:
:
AudioReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
=
0
;
virtual
Maybe
<
webrtc
:
:
AudioSendStream
:
:
Stats
>
GetSenderStats
(
)
const
=
0
;
}
;
}
#
endif
