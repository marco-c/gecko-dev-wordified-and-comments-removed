#
include
"
TaskQueueWrapper
.
h
"
namespace
mozilla
{
namespace
{
class
MainWorker
{
public
:
const
UniquePtr
<
TaskQueueWrapper
>
mTaskQueue
;
MediaEventListener
mShutdownListener
;
const
UniquePtr
<
media
:
:
ShutdownBlockingTicket
>
mTicket
;
MainWorker
(
UniquePtr
<
TaskQueueWrapper
>
aTaskQueue
)
:
mTaskQueue
(
std
:
:
move
(
aTaskQueue
)
)
mTicket
(
MakeUnique
<
media
:
:
ShutdownBlockingTicket
>
(
u
"
MainWorker
:
:
mTicket
"
_ns
NS_LITERAL_STRING_FROM_CSTRING
(
__FILE__
)
__LINE__
)
)
{
}
}
;
UniquePtr
<
MainWorker
>
gMainWorker
;
}
TaskQueueWrapper
*
TaskQueueWrapper
:
:
GetMainWorker
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gMainWorker
)
{
gMainWorker
=
MakeUnique
<
MainWorker
>
(
MakeUnique
<
TaskQueueWrapper
>
(
MakeRefPtr
<
TaskQueue
>
(
do_AddRef
(
GetMainThreadEventTarget
(
)
)
"
MainWorker
"
)
)
)
;
gMainWorker
-
>
mShutdownListener
=
gMainWorker
-
>
mTicket
-
>
ShutdownEvent
(
)
.
Connect
(
GetMainThreadEventTarget
(
)
[
]
{
gMainWorker
-
>
mShutdownListener
.
Disconnect
(
)
;
gMainWorker
-
>
mTaskQueue
-
>
mTaskQueue
-
>
BeginShutdown
(
)
-
>
Then
(
GetMainThreadSerialEventTarget
(
)
__func__
[
worker
=
std
:
:
move
(
gMainWorker
)
]
{
Unused
<
<
worker
;
}
)
;
}
)
;
}
return
gMainWorker
-
>
mTaskQueue
.
get
(
)
;
}
}
