#
ifndef
MOZILLA_DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_FRAMETRANSFORMERPROXY_H_
#
define
MOZILLA_DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_FRAMETRANSFORMERPROXY_H_
#
include
<
list
>
#
include
<
memory
>
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsIEventTarget
;
namespace
webrtc
{
class
TransformableFrameInterface
;
class
VideoReceiveStreamInterface
;
}
namespace
mozilla
{
class
FrameTransformer
;
class
WebrtcVideoConduit
;
class
CopyableErrorResult
;
namespace
dom
{
class
RTCRtpScriptTransformer
;
class
RTCRtpSender
;
class
RTCRtpReceiver
;
}
class
FrameTransformerProxy
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
FrameTransformerProxy
)
;
FrameTransformerProxy
(
)
;
FrameTransformerProxy
(
const
FrameTransformerProxy
&
aRhs
)
=
delete
;
FrameTransformerProxy
(
FrameTransformerProxy
&
&
aRhs
)
=
delete
;
FrameTransformerProxy
&
operator
=
(
const
FrameTransformerProxy
&
aRhs
)
=
delete
;
FrameTransformerProxy
&
operator
=
(
FrameTransformerProxy
&
&
aRhs
)
=
delete
;
void
SetScriptTransformer
(
dom
:
:
RTCRtpScriptTransformer
&
aTransformer
)
;
void
ReleaseScriptTransformer
(
)
;
void
OnTransformedFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
;
Maybe
<
bool
>
IsVideo
(
)
const
;
void
SetLibwebrtcTransformer
(
FrameTransformer
*
aLibwebrtcTransformer
)
;
void
Transform
(
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
)
;
void
SetSender
(
dom
:
:
RTCRtpSender
*
aSender
)
;
void
SetReceiver
(
dom
:
:
RTCRtpReceiver
*
aReceiver
)
;
bool
RequestKeyFrame
(
)
;
void
KeyFrameRequestDone
(
)
;
bool
GenerateKeyFrame
(
const
Maybe
<
std
:
:
string
>
&
aRid
)
;
void
GenerateKeyFrameError
(
const
Maybe
<
std
:
:
string
>
&
aRid
const
CopyableErrorResult
&
aResult
)
;
private
:
virtual
~
FrameTransformerProxy
(
)
;
RefPtr
<
dom
:
:
RTCRtpScriptTransformer
>
mScriptTransformer
;
mutable
Mutex
mMutex
;
RefPtr
<
nsIEventTarget
>
mWorkerThread
MOZ_GUARDED_BY
(
mMutex
)
;
bool
mReleaseScriptTransformerCalled
MOZ_GUARDED_BY
(
mMutex
)
=
false
;
std
:
:
list
<
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
>
mQueue
MOZ_GUARDED_BY
(
mMutex
)
;
FrameTransformer
*
mLibwebrtcTransformer
MOZ_GUARDED_BY
(
mMutex
)
=
nullptr
;
RefPtr
<
dom
:
:
RTCRtpSender
>
mSender
MOZ_GUARDED_BY
(
mMutex
)
;
RefPtr
<
dom
:
:
RTCRtpReceiver
>
mReceiver
MOZ_GUARDED_BY
(
mMutex
)
;
Maybe
<
bool
>
mVideo
MOZ_GUARDED_BY
(
mMutex
)
;
}
;
}
#
endif
