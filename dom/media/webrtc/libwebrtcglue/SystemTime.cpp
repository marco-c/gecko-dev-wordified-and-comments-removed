#
include
"
SystemTime
.
h
"
#
include
"
TimeUnits
.
h
"
namespace
mozilla
{
RTCStatsTimestampMakerRealtimeClock
:
:
RTCStatsTimestampMakerRealtimeClock
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
)
:
mTimestampMaker
(
aTimestampMaker
)
{
}
webrtc
:
:
Timestamp
RTCStatsTimestampMakerRealtimeClock
:
:
CurrentTime
(
)
{
return
mTimestampMaker
.
GetNowRealtime
(
)
;
}
webrtc
:
:
NtpTime
RTCStatsTimestampMakerRealtimeClock
:
:
ConvertTimestampToNtpTime
(
webrtc
:
:
Timestamp
aRealtime
)
{
return
CreateNtp
(
mTimestampMaker
.
ConvertRealtimeTo1Jan1970
(
aRealtime
)
+
webrtc
:
:
TimeDelta
:
:
Seconds
(
webrtc
:
:
kNtpJan1970
)
)
;
}
TimeStamp
WebrtcSystemTimeBase
(
)
{
static
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
return
now
;
}
webrtc
:
:
Timestamp
WebrtcSystemTime
(
)
{
const
TimeStamp
base
=
WebrtcSystemTimeBase
(
)
;
const
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
return
webrtc
:
:
Timestamp
:
:
Micros
(
(
now
-
base
)
.
ToMicroseconds
(
)
)
;
}
webrtc
:
:
NtpTime
CreateNtp
(
webrtc
:
:
Timestamp
aTime
)
{
const
int64_t
timeNtpUs
=
aTime
.
us
(
)
;
const
uint32_t
seconds
=
static_cast
<
uint32_t
>
(
timeNtpUs
/
USECS_PER_S
)
;
constexpr
int64_t
fractionsPerSec
=
1LL
<
<
32
;
const
int64_t
fractionsUs
=
timeNtpUs
%
USECS_PER_S
;
const
uint32_t
fractions
=
(
fractionsUs
*
fractionsPerSec
)
/
USECS_PER_S
;
return
webrtc
:
:
NtpTime
(
seconds
fractions
)
;
}
}
namespace
rtc
{
int64_t
SystemTimeNanos
(
)
{
return
mozilla
:
:
WebrtcSystemTime
(
)
.
us
(
)
*
1000
;
}
}
