#
include
"
MediaConduitInterface
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
SystemTime
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
mozilla
{
void
MediaSessionConduit
:
:
GetRtpSources
(
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mSourcesUpdateNeeded
)
{
UpdateRtpSources
(
GetUpstreamRtpSources
(
)
)
;
OnSourcesUpdated
(
)
;
}
outSources
.
Clear
(
)
;
for
(
auto
&
[
key
entry
]
:
mSourcesCache
)
{
(
void
)
key
;
outSources
.
AppendElement
(
entry
)
;
}
struct
TimestampComparator
{
bool
LessThan
(
const
dom
:
:
RTCRtpSourceEntry
&
aLhs
const
dom
:
:
RTCRtpSourceEntry
&
aRhs
)
const
{
return
aLhs
.
mTimestamp
>
aRhs
.
mTimestamp
;
}
bool
Equals
(
const
dom
:
:
RTCRtpSourceEntry
&
aLhs
const
dom
:
:
RTCRtpSourceEntry
&
aRhs
)
const
{
return
aLhs
.
mTimestamp
=
=
aRhs
.
mTimestamp
;
}
}
;
outSources
.
Sort
(
TimestampComparator
(
)
)
;
}
static
double
rtpToDomAudioLevel
(
uint8_t
aAudioLevel
)
{
if
(
aAudioLevel
=
=
127
)
{
return
0
;
}
return
std
:
:
pow
(
10
-
aAudioLevel
/
20
.
0
)
;
}
void
MediaSessionConduit
:
:
UpdateRtpSources
(
const
std
:
:
vector
<
webrtc
:
:
RtpSource
>
&
aSources
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
auto
cache
=
std
:
:
move
(
mSourcesCache
)
;
for
(
const
auto
&
source
:
aSources
)
{
SourceKey
key
(
source
)
;
auto
it
=
cache
.
find
(
key
)
;
if
(
it
!
=
cache
.
end
(
)
)
{
mSourcesCache
[
key
]
=
it
-
>
second
;
continue
;
}
dom
:
:
RTCRtpSourceEntry
domEntry
;
domEntry
.
mSource
=
source
.
source_id
(
)
;
switch
(
source
.
source_type
(
)
)
{
case
webrtc
:
:
RtpSourceType
:
:
SSRC
:
domEntry
.
mSourceType
=
dom
:
:
RTCRtpSourceEntryType
:
:
Synchronization
;
break
;
case
webrtc
:
:
RtpSourceType
:
:
CSRC
:
domEntry
.
mSourceType
=
dom
:
:
RTCRtpSourceEntryType
:
:
Contributing
;
break
;
default
:
MOZ_CRASH
(
"
Unexpected
RTCRtpSourceEntryType
"
)
;
}
if
(
source
.
audio_level
(
)
)
{
domEntry
.
mAudioLevel
.
Construct
(
rtpToDomAudioLevel
(
*
source
.
audio_level
(
)
)
)
;
}
domEntry
.
mTimestamp
=
GetTimestampMaker
(
)
.
ReduceRealtimePrecision
(
webrtc
:
:
Timestamp
:
:
Millis
(
source
.
timestamp_ms
(
)
)
)
;
domEntry
.
mRtpTimestamp
=
source
.
rtp_timestamp
(
)
;
mSourcesCache
[
key
]
=
domEntry
;
}
}
void
MediaSessionConduit
:
:
OnSourcesUpdated
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mSourcesUpdateNeeded
)
;
mSourcesUpdateNeeded
=
false
;
AbstractThread
:
:
GetCurrent
(
)
-
>
TailDispatcher
(
)
.
AddDirectTask
(
NS_NewRunnableFunction
(
__func__
[
this
self
=
RefPtr
<
const
MediaSessionConduit
>
(
this
)
]
{
mSourcesUpdateNeeded
=
true
;
mSourcesCache
.
clear
(
)
;
}
)
)
;
}
void
MediaSessionConduit
:
:
InsertAudioLevelForContributingSource
(
const
uint32_t
aCsrcSource
const
int64_t
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasAudioLevel
const
uint8_t
aAudioLevel
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mSourcesUpdateNeeded
)
{
OnSourcesUpdated
(
)
;
}
dom
:
:
RTCRtpSourceEntry
domEntry
;
domEntry
.
mSource
=
aCsrcSource
;
domEntry
.
mSourceType
=
dom
:
:
RTCRtpSourceEntryType
:
:
Contributing
;
domEntry
.
mTimestamp
=
aTimestamp
;
domEntry
.
mRtpTimestamp
=
aRtpTimestamp
;
if
(
aHasAudioLevel
)
{
domEntry
.
mAudioLevel
.
Construct
(
rtpToDomAudioLevel
(
aAudioLevel
)
)
;
}
webrtc
:
:
Timestamp
libwebrtcNow
=
GetTimestampMaker
(
)
.
GetNowRealtime
(
)
;
double
jsNow
=
GetTimestampMaker
(
)
.
ReduceRealtimePrecision
(
libwebrtcNow
)
;
double
ago
=
jsNow
-
aTimestamp
;
webrtc
:
:
Timestamp
convertedTimestamp
=
libwebrtcNow
-
webrtc
:
:
TimeDelta
:
:
Millis
(
ago
)
;
SourceKey
key
(
convertedTimestamp
.
ms
<
uint32_t
>
(
)
aCsrcSource
)
;
mSourcesCache
[
key
]
=
domEntry
;
}
}
