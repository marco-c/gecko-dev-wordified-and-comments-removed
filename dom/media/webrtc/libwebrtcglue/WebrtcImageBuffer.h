#
ifndef
WebrtcImageBuffer_h__
#
define
WebrtcImageBuffer_h__
#
include
"
common_video
/
include
/
video_frame_buffer
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
ImageContainer
.
h
"
namespace
mozilla
{
namespace
layers
{
class
Image
;
}
class
ImageBuffer
:
public
webrtc
:
:
VideoFrameBuffer
{
public
:
explicit
ImageBuffer
(
RefPtr
<
layers
:
:
Image
>
&
&
aImage
)
:
mImage
(
std
:
:
move
(
aImage
)
)
{
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420BufferInterface
>
ToI420
(
)
override
{
RefPtr
<
layers
:
:
PlanarYCbCrImage
>
image
=
mImage
-
>
AsPlanarYCbCrImage
(
)
;
MOZ_ASSERT
(
image
)
;
if
(
!
image
)
{
return
nullptr
;
}
const
layers
:
:
PlanarYCbCrData
*
data
=
image
-
>
GetData
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420BufferInterface
>
buf
=
webrtc
:
:
WrapI420Buffer
(
data
-
>
mPictureRect
.
width
data
-
>
mPictureRect
.
height
data
-
>
mYChannel
data
-
>
mYStride
data
-
>
mCbChannel
data
-
>
mCbCrStride
data
-
>
mCrChannel
data
-
>
mCbCrStride
[
image
]
{
}
)
;
return
buf
;
}
Type
type
(
)
const
override
{
return
Type
:
:
kNative
;
}
int
width
(
)
const
override
{
return
mImage
-
>
GetSize
(
)
.
width
;
}
int
height
(
)
const
override
{
return
mImage
-
>
GetSize
(
)
.
height
;
}
RefPtr
<
layers
:
:
Image
>
GetNativeImage
(
)
const
{
return
mImage
;
}
private
:
const
RefPtr
<
layers
:
:
Image
>
mImage
;
}
;
}
#
endif
