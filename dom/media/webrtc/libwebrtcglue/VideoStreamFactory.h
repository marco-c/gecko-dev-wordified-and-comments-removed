#
ifndef
VideoStreamFactory_h
#
define
VideoStreamFactory_h
#
include
"
CodecConfig
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
EventTargetCapability
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
video
/
config
/
video_encoder_config
.
h
"
namespace
webrtc
{
class
VideoFrame
;
}
namespace
mozilla
{
class
VideoStreamFactory
:
public
webrtc
:
:
VideoEncoderConfig
:
:
VideoStreamFactoryInterface
{
public
:
struct
ResolutionAndBitrateLimits
{
int
resolution_in_mb
;
int
min_bitrate_bps
;
int
start_bitrate_bps
;
int
max_bitrate_bps
;
}
;
static
ResolutionAndBitrateLimits
GetLimitsFor
(
unsigned
int
aWidth
unsigned
int
aHeight
int
aCapBps
=
0
)
;
VideoStreamFactory
(
VideoCodecConfig
aConfig
int
aMinBitrate
int
aStartBitrate
int
aPrefMaxBitrate
int
aNegotiatedMaxBitrate
)
:
mMaxFramerateForAllStreams
(
std
:
:
numeric_limits
<
unsigned
int
>
:
:
max
(
)
)
mCodecConfig
(
std
:
:
forward
<
VideoCodecConfig
>
(
aConfig
)
)
mMinBitrate
(
aMinBitrate
)
mStartBitrate
(
aStartBitrate
)
mPrefMaxBitrate
(
aPrefMaxBitrate
)
mNegotiatedMaxBitrate
(
aNegotiatedMaxBitrate
)
{
}
std
:
:
vector
<
webrtc
:
:
VideoStream
>
CreateEncoderStreams
(
const
webrtc
:
:
FieldTrialsView
&
field_trials
int
aWidth
int
aHeight
const
webrtc
:
:
VideoEncoderConfig
&
aConfig
)
override
MOZ_EXCLUDES
(
mEncodeQueue
)
;
void
SetEncoderInfo
(
const
webrtc
:
:
VideoEncoder
:
:
EncoderInfo
&
aInfo
)
override
MOZ_EXCLUDES
(
mEncodeQueue
)
;
void
SelectMaxFramerate
(
int
aWidth
int
aHeight
const
VideoCodecConfig
:
:
Encoding
&
aEncoding
webrtc
:
:
VideoStream
&
aVideoStream
)
MOZ_REQUIRES
(
mEncodeQueue
)
;
void
SelectMaxFramerateForAllStreams
(
unsigned
short
aWidth
unsigned
short
aHeight
)
;
private
:
gfx
:
:
IntSize
CalculateScaledResolution
(
int
aWidth
int
aHeight
double
aScaleDownByResolution
)
MOZ_REQUIRES
(
mEncodeQueue
)
;
unsigned
int
SelectFrameRate
(
unsigned
int
aOldFramerate
unsigned
short
aSendingWidth
unsigned
short
aSendingHeight
)
;
Atomic
<
unsigned
int
>
mMaxFramerateForAllStreams
;
Maybe
<
EventTargetCapability
<
nsISerialEventTarget
>
>
mEncodeQueue
;
Maybe
<
int
>
mRequestedResolutionAlignment
MOZ_GUARDED_BY
(
mEncodeQueue
)
;
const
VideoCodecConfig
mCodecConfig
;
const
int
mMinBitrate
=
0
;
const
int
mStartBitrate
=
0
;
const
int
mPrefMaxBitrate
=
0
;
const
int
mNegotiatedMaxBitrate
=
0
;
}
;
}
#
endif
