#
ifndef
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_WEBRTCVIDEOCODECFACTORY_H_
#
define
DOM_MEDIA_WEBRTC_LIBWEBRTCGLUE_WEBRTCVIDEOCODECFACTORY_H_
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
MediaEventSource
.
h
"
namespace
mozilla
{
class
WebrtcVideoDecoderFactory
:
public
webrtc
:
:
VideoDecoderFactory
{
public
:
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
{
MOZ_CRASH
(
"
Unexpected
call
"
)
;
return
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
(
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoder
>
CreateVideoDecoder
(
const
webrtc
:
:
SdpVideoFormat
&
aFormat
)
override
;
}
;
class
WebrtcVideoEncoderFactory
:
public
webrtc
:
:
VideoEncoderFactory
{
class
InternalFactory
:
public
webrtc
:
:
VideoEncoderFactory
{
public
:
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
{
MOZ_CRASH
(
"
Unexpected
call
"
)
;
return
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
(
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
CreateVideoEncoder
(
const
webrtc
:
:
SdpVideoFormat
&
aFormat
)
override
;
bool
Supports
(
const
webrtc
:
:
SdpVideoFormat
&
aFormat
)
;
}
;
public
:
WebrtcVideoEncoderFactory
(
)
:
mInternalFactory
(
MakeUnique
<
InternalFactory
>
(
)
)
{
}
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
{
MOZ_CRASH
(
"
Unexpected
call
"
)
;
return
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
(
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
CreateVideoEncoder
(
const
webrtc
:
:
SdpVideoFormat
&
aFormat
)
override
;
private
:
const
UniquePtr
<
InternalFactory
>
mInternalFactory
;
}
;
}
#
endif
