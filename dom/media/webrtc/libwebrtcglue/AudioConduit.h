#
ifndef
AUDIO_SESSION_H_
#
define
AUDIO_SESSION_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
common
/
MediaEngineWrapper
.
h
"
#
include
"
RtpPacketQueue
.
h
"
namespace
mozilla
{
class
WebrtcAudioConduit
:
public
AudioSessionConduit
public
webrtc
:
:
RtcpEventObserver
public
webrtc
:
:
Transport
{
public
:
void
ReceivedRTPPacket
(
const
uint8_t
*
data
int
len
webrtc
:
:
RTPHeader
&
header
)
override
;
void
OnRtcpBye
(
)
override
;
void
OnRtcpTimeout
(
)
override
;
void
SetRtcpEventObserver
(
mozilla
:
:
RtcpEventObserver
*
observer
)
override
;
void
ReceivedRTCPPacket
(
const
uint8_t
*
data
int
len
)
override
;
Maybe
<
DOMHighResTimeStamp
>
LastRtcpReceived
(
)
const
override
;
DOMHighResTimeStamp
GetNow
(
)
const
override
;
MediaConduitErrorCode
StopTransmitting
(
)
override
;
MediaConduitErrorCode
StartTransmitting
(
)
override
;
MediaConduitErrorCode
StopReceiving
(
)
override
;
MediaConduitErrorCode
StartReceiving
(
)
override
;
MediaConduitErrorCode
StopTransmittingLocked
(
)
;
MediaConduitErrorCode
StartTransmittingLocked
(
)
;
MediaConduitErrorCode
StopReceivingLocked
(
)
;
MediaConduitErrorCode
StartReceivingLocked
(
)
;
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
AudioCodecConfig
&
codecConfig
)
override
;
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
AudioCodecConfig
>
&
codecConfigList
)
override
;
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
extensions
)
override
;
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SendAudioFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
AudioFrame
>
frame
)
override
;
MediaConduitErrorCode
GetAudioFrame
(
int32_t
samplingFreqHz
webrtc
:
:
AudioFrame
*
frame
)
override
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
bool
HasCodecPluginID
(
uint64_t
aPluginID
)
override
{
return
false
;
}
void
DeliverPacket
(
rtc
:
:
CopyOnWriteBuffer
packet
PacketType
type
)
override
;
void
Shutdown
(
)
override
;
WebrtcAudioConduit
(
RefPtr
<
WebrtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
)
;
virtual
~
WebrtcAudioConduit
(
)
;
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
uint32_t
>
&
aSSRCs
const
std
:
:
vector
<
uint32_t
>
&
aRtxSSRCs
)
override
;
std
:
:
vector
<
uint32_t
>
GetLocalSSRCs
(
)
override
;
bool
SetRemoteSSRC
(
uint32_t
ssrc
uint32_t
rtxSsrc
)
override
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
{
return
true
;
}
bool
GetRemoteSSRC
(
uint32_t
*
ssrc
)
override
;
bool
SetLocalCNAME
(
const
char
*
cname
)
override
;
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
override
;
void
SetSyncGroup
(
const
std
:
:
string
&
group
)
override
;
Maybe
<
webrtc
:
:
AudioReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
override
;
Maybe
<
webrtc
:
:
AudioSendStream
:
:
Stats
>
GetSenderStats
(
)
const
override
;
webrtc
:
:
Call
:
:
Stats
GetCallStats
(
)
const
override
;
bool
InsertDTMFTone
(
unsigned
char
payloadType
int
payloadFrequency
int
eventCode
int
lengthMs
)
override
;
bool
IsSamplingFreqSupported
(
int
freq
)
const
override
;
private
:
WebrtcAudioConduit
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
void
operator
=
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
bool
CodecConfigToWebRTCCodec
(
const
AudioCodecConfig
&
codecInfo
webrtc
:
:
AudioSendStream
:
:
Config
&
config
)
;
unsigned
int
GetNum10msSamplesForFrequency
(
int
samplingFreqHz
)
const
;
MediaConduitErrorCode
ValidateCodecConfig
(
const
AudioCodecConfig
&
codecInfo
bool
send
)
;
MediaConduitErrorCode
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
MediaConduitErrorCode
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
bool
RecreateSendStreamIfExists
(
)
;
bool
RecreateRecvStreamIfExists
(
)
;
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
const
RefPtr
<
WebrtcCallWrapper
>
mCall
;
webrtc
:
:
AudioReceiveStream
:
:
Config
mRecvStreamConfig
;
webrtc
:
:
AudioReceiveStream
*
mRecvStream
;
webrtc
:
:
AudioSendStream
:
:
Config
mSendStreamConfig
;
webrtc
:
:
AudioSendStream
*
mSendStream
;
Atomic
<
uint32_t
>
mRecvSSRC
;
RtpPacketQueue
mRtpPacketQueue
;
bool
mSendStreamRunning
;
bool
mRecvStreamRunning
;
bool
mDtmfEnabled
;
Mutex
mMutex
;
const
RefPtr
<
AbstractThread
>
mCallThread
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
Maybe
<
DOMHighResTimeStamp
>
mRttSec
;
Maybe
<
DOMHighResTimeStamp
>
mLastRtcpReceived
;
mozilla
:
:
RtcpEventObserver
*
mRtcpEventObserver
=
nullptr
;
}
;
}
#
endif
