#
ifndef
AUDIO_SESSION_H_
#
define
AUDIO_SESSION_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
RWLock
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
common
/
MediaEngineWrapper
.
h
"
#
include
"
RtpPacketQueue
.
h
"
namespace
mozilla
{
struct
DtmfEvent
;
class
WebrtcAudioConduit
:
public
AudioSessionConduit
public
webrtc
:
:
RtcpEventObserver
public
webrtc
:
:
Transport
{
public
:
void
ReceivedRTPPacket
(
const
uint8_t
*
data
int
len
webrtc
:
:
RTPHeader
&
header
)
override
;
void
OnRtcpBye
(
)
override
;
void
OnRtcpTimeout
(
)
override
;
void
ReceivedRTCPPacket
(
const
uint8_t
*
data
int
len
)
override
;
Maybe
<
DOMHighResTimeStamp
>
LastRtcpReceived
(
)
const
override
;
DOMHighResTimeStamp
GetNow
(
)
const
override
;
MediaConduitErrorCode
StopTransmittingLocked
(
)
;
MediaConduitErrorCode
StartTransmittingLocked
(
)
;
MediaConduitErrorCode
StopReceivingLocked
(
)
;
MediaConduitErrorCode
StartReceivingLocked
(
)
;
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SendAudioFrame
(
std
:
:
unique_ptr
<
webrtc
:
:
AudioFrame
>
frame
)
override
;
MediaConduitErrorCode
GetAudioFrame
(
int32_t
samplingFreqHz
webrtc
:
:
AudioFrame
*
frame
)
override
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
bool
HasCodecPluginID
(
uint64_t
aPluginID
)
const
override
{
return
false
;
}
void
DeliverPacket
(
rtc
:
:
CopyOnWriteBuffer
packet
PacketType
type
)
override
;
void
Shutdown
(
)
override
;
WebrtcAudioConduit
(
RefPtr
<
WebrtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
)
;
virtual
~
WebrtcAudioConduit
(
)
;
void
InitControl
(
AudioConduitControlInterface
*
aControl
)
override
;
void
OnDtmfEvent
(
const
DtmfEvent
&
aEvent
)
;
void
OnControlConfigChange
(
)
;
std
:
:
vector
<
uint32_t
>
GetLocalSSRCs
(
)
const
override
;
private
:
bool
OverrideRemoteSSRC
(
uint32_t
ssrc
)
;
public
:
void
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
{
}
bool
GetRemoteSSRC
(
uint32_t
*
ssrc
)
const
override
;
Maybe
<
webrtc
:
:
AudioReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
override
;
Maybe
<
webrtc
:
:
AudioSendStream
:
:
Stats
>
GetSenderStats
(
)
const
override
;
webrtc
:
:
Call
:
:
Stats
GetCallStats
(
)
const
override
;
bool
IsSamplingFreqSupported
(
int
freq
)
const
override
;
MediaEventSource
<
void
>
&
RtcpByeEvent
(
)
override
{
return
mRtcpByeEvent
;
}
MediaEventSource
<
void
>
&
RtcpTimeoutEvent
(
)
override
{
return
mRtcpTimeoutEvent
;
}
std
:
:
vector
<
webrtc
:
:
RtpSource
>
GetUpstreamRtpSources
(
)
const
override
;
private
:
WebrtcAudioConduit
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
void
operator
=
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
bool
CodecConfigToWebRTCCodec
(
const
AudioCodecConfig
&
codecInfo
webrtc
:
:
AudioSendStream
:
:
Config
&
config
)
;
unsigned
int
GetNum10msSamplesForFrequency
(
int
samplingFreqHz
)
const
;
static
MediaConduitErrorCode
ValidateCodecConfig
(
const
AudioCodecConfig
&
codecInfo
bool
send
)
;
static
RtpExtList
FilterExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
aExtensions
)
;
static
webrtc
:
:
SdpAudioFormat
CodecConfigToLibwebrtcFormat
(
const
AudioCodecConfig
&
aConfig
)
;
MediaConduitErrorCode
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
MediaConduitErrorCode
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
const
RefPtr
<
WebrtcCallWrapper
>
mCall
;
webrtc
:
:
AudioReceiveStream
:
:
Config
mRecvStreamConfig
;
webrtc
:
:
AudioReceiveStream
*
mRecvStream
;
webrtc
:
:
AudioSendStream
:
:
Config
mSendStreamConfig
;
webrtc
:
:
AudioSendStream
*
mSendStream
;
Atomic
<
uint32_t
>
mRecvSSRC
;
RtpPacketQueue
mRtpPacketQueue
;
bool
mSendStreamRunning
;
bool
mRecvStreamRunning
;
bool
mDtmfEnabled
;
mutable
RWLock
mLock
;
const
RefPtr
<
AbstractThread
>
mCallThread
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
struct
Control
{
Mirror
<
bool
>
mReceiving
;
Mirror
<
bool
>
mTransmitting
;
Mirror
<
Ssrcs
>
mLocalSsrcs
;
Mirror
<
std
:
:
string
>
mLocalCname
;
Mirror
<
std
:
:
string
>
mLocalMid
;
Mirror
<
Ssrc
>
mRemoteSsrc
;
Mirror
<
std
:
:
string
>
mSyncGroup
;
Mirror
<
RtpExtList
>
mLocalRecvRtpExtensions
;
Mirror
<
RtpExtList
>
mLocalSendRtpExtensions
;
Mirror
<
Maybe
<
AudioCodecConfig
>
>
mSendCodec
;
Mirror
<
std
:
:
vector
<
AudioCodecConfig
>
>
mRecvCodecs
;
MediaEventListener
mOnDtmfEventListener
;
Ssrc
mConfiguredRemoteSsrc
=
0
;
Maybe
<
AudioCodecConfig
>
mConfiguredSendCodec
;
std
:
:
vector
<
AudioCodecConfig
>
mConfiguredRecvCodecs
;
Control
(
)
=
delete
;
explicit
Control
(
const
RefPtr
<
AbstractThread
>
&
aCallThread
)
;
}
mControl
;
WatchManager
<
WebrtcAudioConduit
>
mWatchManager
;
Maybe
<
DOMHighResTimeStamp
>
mRttSec
;
Maybe
<
DOMHighResTimeStamp
>
mLastRtcpReceived
;
MediaEventProducer
<
void
>
mRtcpByeEvent
;
MediaEventProducer
<
void
>
mRtcpTimeoutEvent
;
}
;
}
#
endif
