#
include
"
VideoStreamFactory
.
h
"
#
include
"
common
/
browser_logging
/
CSFLog
.
h
"
#
include
"
VideoConduit
.
h
"
#
include
<
algorithm
>
#
include
"
api
/
video_codecs
/
video_codec
.
h
"
#
include
<
cmath
>
#
include
<
limits
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
TemplateLib
.
h
"
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
vector
>
#
include
"
video
/
config
/
video_encoder_config
.
h
"
template
<
class
t
>
void
ConstrainPreservingAspectRatio
(
uint16_t
aMaxWidth
uint16_t
aMaxHeight
t
*
aWidth
t
*
aHeight
)
{
if
(
(
(
*
aWidth
)
<
=
aMaxWidth
)
&
&
(
(
*
aHeight
)
<
=
aMaxHeight
)
)
{
return
;
}
if
(
(
*
aWidth
)
*
aMaxHeight
>
aMaxWidth
*
(
*
aHeight
)
)
{
(
*
aHeight
)
=
aMaxWidth
*
(
*
aHeight
)
/
(
*
aWidth
)
;
(
*
aWidth
)
=
aMaxWidth
;
}
else
{
(
*
aWidth
)
=
aMaxHeight
*
(
*
aWidth
)
/
(
*
aHeight
)
;
(
*
aHeight
)
=
aMaxHeight
;
}
}
namespace
mozilla
{
#
ifdef
LOGTAG
#
undef
LOGTAG
#
endif
#
define
LOGTAG
"
WebrtcVideoSessionConduit
"
#
define
DEFAULT_VIDEO_MAX_FRAMERATE
30u
#
define
MB_OF
(
w
h
)
\
(
(
unsigned
int
)
(
(
(
(
w
+
15
)
>
>
4
)
)
*
(
(
unsigned
int
)
(
(
h
+
15
)
>
>
4
)
)
)
)
static
VideoStreamFactory
:
:
ResolutionAndBitrateLimits
kResolutionAndBitrateLimits
[
]
=
{
{
MB_OF
(
1920
1200
)
KBPS
(
1500
)
KBPS
(
2000
)
KBPS
(
10000
)
}
{
MB_OF
(
1280
720
)
KBPS
(
1200
)
KBPS
(
1500
)
KBPS
(
5000
)
}
{
MB_OF
(
800
480
)
KBPS
(
200
)
KBPS
(
800
)
KBPS
(
2500
)
}
{
MB_OF
(
480
270
)
KBPS
(
150
)
KBPS
(
500
)
KBPS
(
2000
)
}
{
tl
:
:
Max
<
MB_OF
(
400
240
)
MB_OF
(
352
288
)
>
:
:
value
KBPS
(
125
)
KBPS
(
300
)
KBPS
(
1300
)
}
{
MB_OF
(
176
144
)
KBPS
(
100
)
KBPS
(
150
)
KBPS
(
500
)
}
{
0
KBPS
(
40
)
KBPS
(
80
)
KBPS
(
250
)
}
}
;
auto
VideoStreamFactory
:
:
GetLimitsFor
(
gfx
:
:
IntSize
aSize
int
aCapBps
)
-
>
ResolutionAndBitrateLimits
{
int
fs
=
MB_OF
(
aSize
.
width
aSize
.
height
)
;
for
(
const
auto
&
resAndLimits
:
kResolutionAndBitrateLimits
)
{
if
(
fs
>
resAndLimits
.
resolution_in_mb
&
&
(
aCapBps
=
=
0
|
|
resAndLimits
.
start_bitrate_bps
<
=
aCapBps
|
|
resAndLimits
.
resolution_in_mb
=
=
0
)
)
{
return
resAndLimits
;
}
}
MOZ_CRASH
(
"
Loop
should
have
handled
fallback
"
)
;
}
static
void
SelectBitrates
(
gfx
:
:
IntSize
size
int
min
int
start
int
cap
int
pref_cap
int
negotiated_cap
webrtc
:
:
VideoStream
&
aVideoStream
)
{
int
&
out_min
=
aVideoStream
.
min_bitrate_bps
;
int
&
out_start
=
aVideoStream
.
target_bitrate_bps
;
int
&
out_max
=
aVideoStream
.
max_bitrate_bps
;
VideoStreamFactory
:
:
ResolutionAndBitrateLimits
resAndLimits
=
VideoStreamFactory
:
:
GetLimitsFor
(
size
)
;
out_min
=
MinIgnoreZero
(
resAndLimits
.
min_bitrate_bps
cap
)
;
out_start
=
MinIgnoreZero
(
resAndLimits
.
start_bitrate_bps
cap
)
;
out_max
=
MinIgnoreZero
(
resAndLimits
.
max_bitrate_bps
cap
)
;
out_max
=
MinIgnoreZero
(
negotiated_cap
out_max
)
;
out_min
=
std
:
:
min
(
out_min
out_max
)
;
out_start
=
std
:
:
min
(
out_start
out_max
)
;
if
(
min
&
&
min
>
out_min
)
{
out_min
=
min
;
}
out_min
=
std
:
:
max
(
kViEMinCodecBitrate_bps
out_min
)
;
out_max
=
std
:
:
max
(
kViEMinCodecBitrate_bps
out_max
)
;
if
(
start
&
&
start
>
out_start
)
{
out_start
=
start
;
}
if
(
out_min
>
out_max
)
{
out_min
=
out_max
;
}
out_start
=
std
:
:
clamp
(
out_start
out_min
out_max
)
;
MOZ_ASSERT
(
pref_cap
=
=
0
|
|
out_max
<
=
pref_cap
)
;
}
void
VideoStreamFactory
:
:
SelectResolutionAndMaxFramerate
(
gfx
:
:
IntSize
aSize
const
VideoCodecConfig
:
:
Encoding
&
aEncoding
webrtc
:
:
VideoStream
&
aVideoStream
)
{
MOZ_ASSERT
(
aSize
.
width
>
0
)
;
MOZ_ASSERT
(
aSize
.
height
>
0
)
;
MOZ_ASSERT
(
aEncoding
.
constraints
.
scaleDownBy
>
=
1
.
0
)
;
gfx
:
:
IntSize
newSize
(
0
0
)
;
newSize
=
CalculateScaledResolution
(
aSize
aEncoding
.
constraints
.
scaleDownBy
)
;
if
(
newSize
.
width
=
=
0
|
|
newSize
.
height
=
=
0
)
{
return
;
}
uint16_t
max_width
=
mCodecConfig
.
mEncodingConstraints
.
maxWidth
;
uint16_t
max_height
=
mCodecConfig
.
mEncodingConstraints
.
maxHeight
;
if
(
max_width
|
|
max_height
)
{
max_width
=
max_width
?
max_width
:
UINT16_MAX
;
max_height
=
max_height
?
max_height
:
UINT16_MAX
;
ConstrainPreservingAspectRatio
(
max_width
max_height
&
newSize
.
width
&
newSize
.
height
)
;
}
MOZ_ASSERT
(
newSize
.
width
>
0
)
;
MOZ_ASSERT
(
newSize
.
height
>
0
)
;
aVideoStream
.
width
=
newSize
.
width
;
aVideoStream
.
height
=
newSize
.
height
;
SelectMaxFramerateForAllStreams
(
newSize
)
;
CSFLogInfo
(
LOGTAG
"
%
s
Input
frame
%
ux
%
u
RID
%
s
scaling
to
%
zux
%
zu
"
__FUNCTION__
aSize
.
width
aSize
.
height
aEncoding
.
rid
.
c_str
(
)
aVideoStream
.
width
aVideoStream
.
height
)
;
unsigned
int
max_framerate
=
SelectFrameRate
(
mMaxFramerateForAllStreams
{
aVideoStream
.
width
aVideoStream
.
height
}
)
;
max_framerate
=
std
:
:
min
(
WebrtcVideoConduit
:
:
ToLibwebrtcMaxFramerate
(
aEncoding
.
constraints
.
maxFps
)
max_framerate
)
;
if
(
max_framerate
>
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
{
max_framerate
=
DEFAULT_VIDEO_MAX_FRAMERATE
;
}
aVideoStream
.
max_framerate
=
static_cast
<
int
>
(
max_framerate
)
;
}
std
:
:
vector
<
webrtc
:
:
VideoStream
>
VideoStreamFactory
:
:
CreateEncoderStreams
(
const
webrtc
:
:
FieldTrialsView
&
field_trials
int
aWidth
int
aHeight
const
webrtc
:
:
VideoEncoderConfig
&
aConfig
)
{
const
size_t
streamCount
=
aConfig
.
number_of_streams
;
MOZ_RELEASE_ASSERT
(
streamCount
>
=
1
"
Should
request
at
least
one
stream
"
)
;
MOZ_RELEASE_ASSERT
(
streamCount
<
=
aConfig
.
simulcast_layers
.
size
(
)
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
streams
;
streams
.
reserve
(
streamCount
)
;
for
(
size_t
idx
=
0
;
idx
<
streamCount
;
+
+
idx
)
{
webrtc
:
:
VideoStream
video_stream
=
aConfig
.
simulcast_layers
[
idx
]
;
const
auto
&
encoding
=
mCodecConfig
.
mEncodings
[
idx
]
;
MOZ_ASSERT
(
video_stream
.
active
=
=
encoding
.
active
)
;
SelectResolutionAndMaxFramerate
(
{
aWidth
aHeight
}
encoding
video_stream
)
;
CSFLogInfo
(
LOGTAG
"
%
s
Stream
%
zu
with
RID
%
s
scaling
%
dx
%
d
-
>
%
zux
%
zu
;
scaleDownBy
=
%
.
2f
)
.
"
__FUNCTION__
idx
encoding
.
rid
.
c_str
(
)
aWidth
aHeight
video_stream
.
width
video_stream
.
height
encoding
.
constraints
.
scaleDownBy
)
;
if
(
video_stream
.
width
=
=
0
|
|
video_stream
.
height
=
=
0
)
{
CSFLogInfo
(
LOGTAG
"
%
s
Stream
with
RID
%
s
ignored
:
has
no
resolution
.
"
__FUNCTION__
encoding
.
rid
.
c_str
(
)
)
;
continue
;
}
CSFLogInfo
(
LOGTAG
"
%
s
Stream
with
RID
%
s
maxFps
=
%
d
(
global
max
fps
=
%
u
)
"
__FUNCTION__
encoding
.
rid
.
c_str
(
)
video_stream
.
max_framerate
(
unsigned
)
mMaxFramerateForAllStreams
)
;
SelectBitrates
(
{
video_stream
.
width
video_stream
.
height
}
mMinBitrate
mStartBitrate
encoding
.
constraints
.
maxBr
mPrefMaxBitrate
mNegotiatedMaxBitrate
video_stream
)
;
video_stream
.
bitrate_priority
=
aConfig
.
bitrate_priority
;
video_stream
.
max_qp
=
kQpMax
;
if
(
streamCount
>
1
)
{
video_stream
.
num_temporal_layers
=
2
;
}
if
(
mCodecConfig
.
mName
=
=
"
H264
"
)
{
if
(
mCodecConfig
.
mEncodingConstraints
.
maxMbps
>
0
)
{
CSFLogError
(
LOGTAG
"
%
s
H
.
264
max_mbps
not
supported
yet
"
__FUNCTION__
)
;
}
}
streams
.
push_back
(
video_stream
)
;
}
MOZ_RELEASE_ASSERT
(
streams
.
size
(
)
"
Should
configure
at
least
one
stream
"
)
;
return
streams
;
}
gfx
:
:
IntSize
VideoStreamFactory
:
:
CalculateScaledResolution
(
gfx
:
:
IntSize
aSize
double
aScaleDownByResolution
)
{
int
width
=
aSize
.
width
;
int
height
=
aSize
.
height
;
if
(
aScaleDownByResolution
>
1
)
{
width
=
static_cast
<
int
>
(
aSize
.
width
/
aScaleDownByResolution
)
;
height
=
static_cast
<
int
>
(
aSize
.
height
/
aScaleDownByResolution
)
;
}
if
(
mCodecConfig
.
mEncodingConstraints
.
maxFs
>
0
)
{
auto
currentFs
=
static_cast
<
unsigned
int
>
(
width
*
height
)
;
auto
maxFs
=
mCodecConfig
.
mEncodingConstraints
.
maxFs
*
16
*
16
;
if
(
currentFs
>
maxFs
)
{
if
(
aSize
.
width
>
aSize
.
height
)
{
auto
aspectRatio
=
static_cast
<
double
>
(
aSize
.
width
)
/
aSize
.
height
;
height
=
static_cast
<
int
>
(
std
:
:
sqrt
(
maxFs
/
aspectRatio
)
)
;
width
=
static_cast
<
int
>
(
height
*
aspectRatio
)
;
}
else
{
auto
aspectRatio
=
static_cast
<
double
>
(
aSize
.
height
)
/
aSize
.
width
;
width
=
static_cast
<
int
>
(
std
:
:
sqrt
(
maxFs
/
aspectRatio
)
)
;
height
=
static_cast
<
int
>
(
width
*
aspectRatio
)
;
}
}
}
return
gfx
:
:
IntSize
(
width
height
)
;
}
void
VideoStreamFactory
:
:
SelectMaxFramerateForAllStreams
(
gfx
:
:
IntSize
aSize
)
{
unsigned
int
framerate_all_streams
=
SelectFrameRate
(
mMaxFramerateForAllStreams
aSize
)
;
unsigned
int
maxFrameRate
=
mMaxFramerateForAllStreams
;
if
(
mMaxFramerateForAllStreams
!
=
framerate_all_streams
)
{
CSFLogDebug
(
LOGTAG
"
%
s
:
framerate
changing
to
%
u
(
from
%
u
)
"
__FUNCTION__
framerate_all_streams
maxFrameRate
)
;
mMaxFramerateForAllStreams
=
framerate_all_streams
;
}
}
unsigned
int
VideoStreamFactory
:
:
SelectFrameRate
(
unsigned
int
aOldFramerate
gfx
:
:
IntSize
aSize
)
{
unsigned
int
new_framerate
=
aOldFramerate
;
if
(
mCodecConfig
.
mEncodingConstraints
.
maxMbps
)
{
unsigned
int
cur_fs
mb_width
mb_height
;
mb_width
=
(
aSize
.
width
+
15
)
>
>
4
;
mb_height
=
(
aSize
.
height
+
15
)
>
>
4
;
cur_fs
=
mb_width
*
mb_height
;
if
(
cur_fs
>
0
)
{
new_framerate
=
mCodecConfig
.
mEncodingConstraints
.
maxMbps
/
cur_fs
;
}
}
new_framerate
=
std
:
:
min
(
new_framerate
WebrtcVideoConduit
:
:
ToLibwebrtcMaxFramerate
(
mCodecConfig
.
mEncodingConstraints
.
maxFps
)
)
;
return
new_framerate
;
}
}
