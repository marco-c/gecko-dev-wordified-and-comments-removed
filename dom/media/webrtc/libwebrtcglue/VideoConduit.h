#
ifndef
VIDEO_SESSION_H_
#
define
VIDEO_SESSION_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
common
/
MediaEngineWrapper
.
h
"
#
include
"
RunningStat
.
h
"
#
include
"
RtpPacketQueue
.
h
"
#
include
"
transport
/
runnable_utils
.
h
"
#
undef
FF
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
media
/
base
/
video_adapter
.
h
"
#
include
"
media
/
base
/
video_broadcaster
.
h
"
#
include
<
functional
>
#
include
<
memory
>
namespace
mozilla
{
#
define
KBPS
(
kbps
)
kbps
*
1000
const
int
kViEMinCodecBitrate_bps
=
KBPS
(
30
)
;
const
unsigned
int
kVideoMtu
=
1200
;
const
int
kQpMax
=
56
;
template
<
typename
T
>
T
MinIgnoreZero
(
const
T
&
a
const
T
&
b
)
{
return
std
:
:
min
(
a
?
a
:
b
b
?
b
:
a
)
;
}
class
VideoStreamFactory
;
class
WebrtcAudioConduit
;
class
WebrtcVideoEncoder
:
public
VideoEncoder
public
webrtc
:
:
VideoEncoder
{
}
;
class
WebrtcVideoDecoder
:
public
VideoDecoder
public
webrtc
:
:
VideoDecoder
{
}
;
class
WebrtcVideoConduit
:
public
VideoSessionConduit
public
webrtc
:
:
Transport
public
webrtc
:
:
VideoEncoderFactory
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
public
rtc
:
:
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
static
bool
HasH264Hardware
(
)
;
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
aExtensions
)
override
;
MediaConduitErrorCode
AttachRenderer
(
RefPtr
<
mozilla
:
:
VideoRenderer
>
aVideoRenderer
)
override
;
void
DetachRenderer
(
)
override
;
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
webrtc
:
:
RTPHeader
&
header
)
override
;
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
override
;
Maybe
<
DOMHighResTimeStamp
>
LastRtcpReceived
(
)
const
override
;
DOMHighResTimeStamp
GetNow
(
)
const
override
{
return
mCall
-
>
GetNow
(
)
;
}
MediaConduitErrorCode
StopTransmitting
(
)
override
;
MediaConduitErrorCode
StartTransmitting
(
)
override
;
MediaConduitErrorCode
StopReceiving
(
)
override
;
MediaConduitErrorCode
StartReceiving
(
)
override
;
MediaConduitErrorCode
StopTransmittingLocked
(
)
;
MediaConduitErrorCode
StartTransmittingLocked
(
)
;
MediaConduitErrorCode
StopReceivingLocked
(
)
;
MediaConduitErrorCode
StartReceivingLocked
(
)
;
MediaConduitErrorCode
ConfigureCodecMode
(
webrtc
:
:
VideoCodecMode
)
override
;
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
VideoCodecConfig
*
codecInfo
const
RtpRtcpConfig
&
aRtpRtcpConfig
)
override
;
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
VideoCodecConfig
>
>
&
codecConfigList
const
RtpRtcpConfig
&
aRtpRtcpConfig
)
override
;
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
void
SelectSendResolution
(
unsigned
short
width
unsigned
short
height
)
;
MediaConduitErrorCode
SendVideoFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
bool
SendRtp
(
const
uint8_t
*
packet
size_t
length
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
packet
size_t
length
)
override
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
AddOrUpdateSinkNotLocked
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
override
;
void
RemoveSinkNotLocked
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
;
void
OnSinkWantsChanged
(
const
rtc
:
:
VideoSinkWants
&
wants
)
;
uint64_t
CodecPluginID
(
)
override
;
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mPCHandle
=
aPCHandle
;
}
void
DeleteStreams
(
)
override
;
bool
Denoising
(
)
const
{
return
mDenoising
;
}
uint8_t
SpatialLayers
(
)
const
{
return
mSpatialLayers
;
}
uint8_t
TemporalLayers
(
)
const
{
return
mTemporalLayers
;
}
webrtc
:
:
VideoCodecMode
CodecMode
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mCodecMode
;
}
WebrtcVideoConduit
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
)
;
virtual
~
WebrtcVideoConduit
(
)
;
MediaConduitErrorCode
InitMain
(
)
;
virtual
MediaConduitErrorCode
Init
(
)
;
std
:
:
vector
<
uint32_t
>
GetLocalSSRCs
(
)
override
;
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
const
std
:
:
vector
<
uint32_t
>
&
rtxSsrcs
)
override
;
bool
GetRemoteSSRC
(
uint32_t
*
ssrc
)
override
;
bool
SetRemoteSSRC
(
uint32_t
ssrc
uint32_t
rtxSsrc
)
override
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
;
bool
SetLocalCNAME
(
const
char
*
cname
)
override
;
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
override
;
void
SetSyncGroup
(
const
std
:
:
string
&
group
)
override
;
bool
SetRemoteSSRCLocked
(
uint32_t
ssrc
uint32_t
rtxSsrc
)
;
Maybe
<
webrtc
:
:
VideoReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
override
;
Maybe
<
webrtc
:
:
VideoSendStream
:
:
Stats
>
GetSenderStats
(
)
const
override
;
webrtc
:
:
Call
:
:
Stats
GetCallStats
(
)
const
override
;
void
GetRtpSources
(
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
override
;
bool
AddFrameHistory
(
dom
:
:
Sequence
<
dom
:
:
RTCVideoFrameHistoryInternal
>
*
outHistories
)
const
override
;
uint64_t
MozVideoLatencyAvg
(
)
;
void
DisableSsrcChanges
(
)
override
{
ASSERT_ON_THREAD
(
mStsThread
)
;
mAllowSsrcChange
=
false
;
}
void
CollectTelemetryData
(
)
override
;
private
:
WebrtcVideoConduit
(
const
WebrtcVideoConduit
&
)
=
delete
;
void
operator
=
(
const
WebrtcVideoConduit
&
)
=
delete
;
void
DumpCodecDB
(
)
const
;
void
VideoLatencyUpdate
(
uint64_t
new_sample
)
;
MediaConduitErrorCode
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
MediaConduitErrorCode
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoder
>
CreateDecoder
(
webrtc
:
:
VideoCodecType
aType
)
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
CreateEncoder
(
webrtc
:
:
VideoCodecType
aType
)
;
std
:
:
vector
<
webrtc
:
:
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
;
CodecInfo
QueryVideoEncoder
(
const
webrtc
:
:
SdpVideoFormat
&
format
)
const
override
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
CreateVideoEncoder
(
const
webrtc
:
:
SdpVideoFormat
&
format
)
override
;
MediaConduitErrorCode
DeliverPacket
(
const
void
*
data
int
len
)
override
;
bool
RequiresNewSendStream
(
const
VideoCodecConfig
&
newConfig
)
const
;
mutable
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
RefPtr
<
mozilla
:
:
VideoRenderer
>
mRenderer
;
unsigned
short
mReceivingWidth
=
0
;
unsigned
short
mReceivingHeight
=
0
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
Mutex
mMutex
;
UniquePtr
<
cricket
:
:
VideoAdapter
>
mVideoAdapter
;
AutoTArray
<
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
1
>
mRegisteredSinks
;
rtc
:
:
VideoBroadcaster
mVideoBroadcaster
;
webrtc
:
:
I420BufferPool
mBufferPool
;
mozilla
:
:
Atomic
<
bool
>
mEngineTransmitting
;
mozilla
:
:
Atomic
<
bool
>
mEngineReceiving
;
nsTArray
<
UniquePtr
<
VideoCodecConfig
>
>
mRecvCodecList
;
UniquePtr
<
VideoCodecConfig
>
mCurSendCodecConfig
;
bool
mUpdateResolution
=
false
;
int
mSinkWantsPixelCount
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
;
RunningStat
mSendFramerate
;
RunningStat
mSendBitrate
;
RunningStat
mRecvFramerate
;
RunningStat
mRecvBitrate
;
webrtc
:
:
VideoReceiveStream
*
mRecvStream
=
nullptr
;
webrtc
:
:
VideoSendStream
*
mSendStream
=
nullptr
;
unsigned
short
mLastWidth
=
0
;
unsigned
short
mLastHeight
=
0
;
unsigned
int
mSendingFramerate
;
bool
mVideoLatencyTestEnable
=
false
;
uint64_t
mVideoLatencyAvg
=
0
;
int
mMinBitrate
=
0
;
int
mStartBitrate
=
0
;
int
mPrefMaxBitrate
=
0
;
int
mNegotiatedMaxBitrate
=
0
;
int
mMinBitrateEstimate
=
0
;
bool
mDenoising
=
false
;
bool
mLockScaling
=
false
;
uint8_t
mSpatialLayers
=
1
;
uint8_t
mTemporalLayers
=
1
;
static
const
unsigned
int
sAlphaNum
=
7
;
static
const
unsigned
int
sAlphaDen
=
8
;
static
const
unsigned
int
sRoundingPadding
=
1024
;
RefPtr
<
WebrtcAudioConduit
>
mSyncedTo
;
webrtc
:
:
VideoCodecMode
mActiveCodecMode
;
webrtc
:
:
VideoCodecMode
mCodecMode
;
const
RefPtr
<
WebRtcCallWrapper
>
mCall
;
webrtc
:
:
VideoSendStream
:
:
Config
mSendStreamConfig
;
webrtc
:
:
VideoEncoderConfig
mEncoderConfig
;
RefPtr
<
rtc
:
:
RefCountedObject
<
VideoStreamFactory
>
>
mVideoStreamFactory
;
webrtc
:
:
VideoReceiveStream
:
:
Config
mRecvStreamConfig
;
bool
mAllowSsrcChange
=
true
;
bool
mWaitingForInitialSsrc
=
true
;
Atomic
<
uint32_t
>
mRecvSSRC
;
Atomic
<
uint32_t
>
mRemoteSSRC
;
RtpPacketQueue
mRtpPacketQueue
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
mEncoder
;
std
:
:
vector
<
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoder
>
>
mDecoders
;
uint64_t
mSendCodecPluginID
=
0
;
uint64_t
mRecvCodecPluginID
=
0
;
std
:
:
string
mPCHandle
;
Maybe
<
DOMHighResTimeStamp
>
mLastRtcpReceived
;
dom
:
:
RTCVideoFrameHistoryInternal
mReceivedFrameHistory
;
}
;
}
#
endif
