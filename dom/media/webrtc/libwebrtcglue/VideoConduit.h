#
ifndef
VIDEO_SESSION_H_
#
define
VIDEO_SESSION_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
common
/
MediaEngineWrapper
.
h
"
#
include
"
RtpRtcpConfig
.
h
"
#
include
"
RunningStat
.
h
"
#
include
"
transport
/
runnable_utils
.
h
"
#
undef
FF
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
media
/
base
/
video_adapter
.
h
"
#
include
"
media
/
base
/
video_broadcaster
.
h
"
#
include
<
functional
>
#
include
<
memory
>
namespace
mozilla
{
#
define
KBPS
(
kbps
)
kbps
*
1000
const
int
kViEMinCodecBitrate_bps
=
KBPS
(
30
)
;
const
unsigned
int
kVideoMtu
=
1200
;
const
int
kQpMax
=
56
;
template
<
typename
T
>
T
MinIgnoreZero
(
const
T
&
a
const
T
&
b
)
{
return
std
:
:
min
(
a
?
a
:
b
b
?
b
:
a
)
;
}
class
VideoStreamFactory
;
class
WebrtcAudioConduit
;
class
WebrtcVideoEncoder
:
public
VideoEncoder
public
webrtc
:
:
VideoEncoder
{
}
;
class
WebrtcVideoDecoder
:
public
VideoDecoder
public
webrtc
:
:
VideoDecoder
{
}
;
class
WebrtcVideoConduit
:
public
VideoSessionConduit
public
webrtc
:
:
RtcpEventObserver
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
public
rtc
:
:
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
static
bool
HasH264Hardware
(
)
;
Maybe
<
int
>
ActiveSendPayloadType
(
)
const
override
;
Maybe
<
int
>
ActiveRecvPayloadType
(
)
const
override
;
MediaConduitErrorCode
AttachRenderer
(
RefPtr
<
mozilla
:
:
VideoRenderer
>
aVideoRenderer
)
override
;
void
DetachRenderer
(
)
override
;
Maybe
<
uint16_t
>
RtpSendBaseSeqFor
(
uint32_t
aSsrc
)
const
override
;
const
dom
:
:
RTCStatsTimestampMaker
&
GetTimestampMaker
(
)
const
override
;
void
StopTransmitting
(
)
;
void
StartTransmitting
(
)
;
void
StopReceiving
(
)
;
void
StartReceiving
(
)
;
void
SelectSendResolution
(
unsigned
short
width
unsigned
short
height
)
;
MediaConduitErrorCode
SendVideoFrame
(
webrtc
:
:
VideoFrame
aFrame
)
override
;
bool
SendRtp
(
const
uint8_t
*
aData
size_t
aLength
const
webrtc
:
:
PacketOptions
&
aOptions
)
override
;
bool
SendSenderRtcp
(
const
uint8_t
*
aData
size_t
aLength
)
override
;
bool
SendReceiverRtcp
(
const
uint8_t
*
aData
size_t
aLength
)
override
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
override
;
bool
HasCodecPluginID
(
uint64_t
aPluginID
)
const
override
;
RefPtr
<
GenericPromise
>
Shutdown
(
)
override
;
bool
Denoising
(
)
const
{
return
mDenoising
;
}
uint8_t
SpatialLayers
(
)
const
{
return
mSpatialLayers
;
}
uint8_t
TemporalLayers
(
)
const
{
return
mTemporalLayers
;
}
webrtc
:
:
VideoCodecMode
CodecMode
(
)
const
;
WebrtcVideoConduit
(
RefPtr
<
WebrtcCallWrapper
>
aCall
nsCOMPtr
<
nsISerialEventTarget
>
aStsThread
Options
aOptions
std
:
:
string
aPCHandle
)
;
virtual
~
WebrtcVideoConduit
(
)
;
void
InitControl
(
VideoConduitControlInterface
*
aControl
)
override
;
void
OnControlConfigChange
(
)
;
MediaConduitErrorCode
Init
(
)
;
Ssrcs
GetLocalSSRCs
(
)
const
override
;
Maybe
<
Ssrc
>
GetRemoteSSRC
(
)
const
override
;
void
UnsetRemoteSSRC
(
uint32_t
aSsrc
)
override
;
private
:
void
NotifyUnsetCurrentRemoteSSRC
(
)
;
void
SetRemoteSSRCConfig
(
uint32_t
aSsrc
uint32_t
aRtxSsrc
)
;
void
SetRemoteSSRCAndRestartAsNeeded
(
uint32_t
aSsrc
uint32_t
aRtxSsrc
)
;
public
:
void
EnsureLocalSSRC
(
)
;
void
EnsureRemoteSSRC
(
)
;
Maybe
<
webrtc
:
:
VideoReceiveStream
:
:
Stats
>
GetReceiverStats
(
)
const
override
;
Maybe
<
webrtc
:
:
VideoSendStream
:
:
Stats
>
GetSenderStats
(
)
const
override
;
Maybe
<
webrtc
:
:
Call
:
:
Stats
>
GetCallStats
(
)
const
override
;
bool
AddFrameHistory
(
dom
:
:
Sequence
<
dom
:
:
RTCVideoFrameHistoryInternal
>
*
outHistories
)
const
override
;
uint64_t
MozVideoLatencyAvg
(
)
;
void
DisableSsrcChanges
(
)
override
{
MOZ_ASSERT
(
mCallThread
-
>
IsOnCurrentThread
(
)
)
;
mAllowSsrcChange
=
false
;
}
void
CollectTelemetryData
(
)
override
;
void
OnRtpReceived
(
MediaPacket
&
&
aPacket
webrtc
:
:
RTPHeader
&
&
aHeader
)
;
void
OnRtcpReceived
(
MediaPacket
&
&
aPacket
)
;
void
OnRtcpBye
(
)
override
;
void
OnRtcpTimeout
(
)
override
;
void
SetTransportActive
(
bool
aActive
)
override
{
mTransportActive
=
aActive
;
if
(
!
aActive
)
{
mReceiverRtpEventListener
.
DisconnectIfExists
(
)
;
mReceiverRtcpEventListener
.
DisconnectIfExists
(
)
;
mSenderRtcpEventListener
.
DisconnectIfExists
(
)
;
}
}
MediaEventSourceExc
<
MediaPacket
>
&
SenderRtpSendEvent
(
)
override
{
return
mSenderRtpSendEvent
;
}
MediaEventSourceExc
<
MediaPacket
>
&
SenderRtcpSendEvent
(
)
override
{
return
mSenderRtcpSendEvent
;
}
MediaEventSourceExc
<
MediaPacket
>
&
ReceiverRtcpSendEvent
(
)
override
{
return
mReceiverRtcpSendEvent
;
}
void
ConnectReceiverRtpEvent
(
MediaEventSourceExc
<
MediaPacket
webrtc
:
:
RTPHeader
>
&
aEvent
)
override
{
mReceiverRtpEventListener
=
aEvent
.
Connect
(
mCallThread
[
this
self
=
RefPtr
<
WebrtcVideoConduit
>
(
this
)
]
(
MediaPacket
aPacket
webrtc
:
:
RTPHeader
aHeader
)
{
OnRtpReceived
(
std
:
:
move
(
aPacket
)
std
:
:
move
(
aHeader
)
)
;
}
)
;
}
void
ConnectReceiverRtcpEvent
(
MediaEventSourceExc
<
MediaPacket
>
&
aEvent
)
override
{
mReceiverRtcpEventListener
=
aEvent
.
Connect
(
mCallThread
[
this
self
=
RefPtr
<
WebrtcVideoConduit
>
(
this
)
]
(
MediaPacket
aPacket
)
{
OnRtcpReceived
(
std
:
:
move
(
aPacket
)
)
;
}
)
;
}
void
ConnectSenderRtcpEvent
(
MediaEventSourceExc
<
MediaPacket
>
&
aEvent
)
override
{
mSenderRtcpEventListener
=
aEvent
.
Connect
(
mCallThread
[
this
self
=
RefPtr
<
WebrtcVideoConduit
>
(
this
)
]
(
MediaPacket
aPacket
)
{
OnRtcpReceived
(
std
:
:
move
(
aPacket
)
)
;
}
)
;
}
std
:
:
vector
<
webrtc
:
:
RtpSource
>
GetUpstreamRtpSources
(
)
const
override
;
private
:
WebrtcVideoConduit
(
const
WebrtcVideoConduit
&
)
=
delete
;
void
operator
=
(
const
WebrtcVideoConduit
&
)
=
delete
;
void
DumpCodecDB
(
)
const
;
void
VideoLatencyUpdate
(
uint64_t
aNewSample
)
;
void
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
void
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
void
DeliverPacket
(
rtc
:
:
CopyOnWriteBuffer
packet
PacketType
type
)
override
;
MediaEventSource
<
void
>
&
RtcpByeEvent
(
)
override
{
return
mRtcpByeEvent
;
}
MediaEventSource
<
void
>
&
RtcpTimeoutEvent
(
)
override
{
return
mRtcpTimeoutEvent
;
}
bool
RequiresNewSendStream
(
const
VideoCodecConfig
&
newConfig
)
const
;
mutable
mozilla
:
:
ReentrantMonitor
mRendererMonitor
MOZ_UNANNOTATED
;
RefPtr
<
mozilla
:
:
VideoRenderer
>
mRenderer
;
unsigned
short
mReceivingWidth
=
0
;
unsigned
short
mReceivingHeight
=
0
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mCallThread
;
const
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
struct
Control
{
Mirror
<
bool
>
mReceiving
;
Mirror
<
bool
>
mTransmitting
;
Mirror
<
Ssrcs
>
mLocalSsrcs
;
Mirror
<
Ssrcs
>
mLocalRtxSsrcs
;
Mirror
<
std
:
:
string
>
mLocalCname
;
Mirror
<
std
:
:
string
>
mMid
;
Mirror
<
Ssrc
>
mRemoteSsrc
;
Mirror
<
Ssrc
>
mRemoteRtxSsrc
;
Mirror
<
std
:
:
string
>
mSyncGroup
;
Mirror
<
RtpExtList
>
mLocalRecvRtpExtensions
;
Mirror
<
RtpExtList
>
mLocalSendRtpExtensions
;
Mirror
<
Maybe
<
VideoCodecConfig
>
>
mSendCodec
;
Mirror
<
Maybe
<
RtpRtcpConfig
>
>
mSendRtpRtcpConfig
;
Mirror
<
std
:
:
vector
<
VideoCodecConfig
>
>
mRecvCodecs
;
Mirror
<
Maybe
<
RtpRtcpConfig
>
>
mRecvRtpRtcpConfig
;
Mirror
<
webrtc
:
:
VideoCodecMode
>
mCodecMode
;
Ssrc
mConfiguredRemoteSsrc
=
0
;
Ssrc
mConfiguredRemoteRtxSsrc
=
0
;
Maybe
<
VideoCodecConfig
>
mConfiguredSendCodec
;
Maybe
<
RtpRtcpConfig
>
mConfiguredSendRtpRtcpConfig
;
std
:
:
vector
<
VideoCodecConfig
>
mConfiguredRecvCodecs
;
Maybe
<
RtpRtcpConfig
>
mConfiguredRecvRtpRtcpConfig
;
Control
(
)
=
delete
;
explicit
Control
(
const
RefPtr
<
AbstractThread
>
&
aCallThread
)
;
}
mControl
;
WatchManager
<
WebrtcVideoConduit
>
mWatchManager
;
mutable
Mutex
mMutex
MOZ_UNANNOTATED
;
const
UniquePtr
<
WebrtcVideoDecoderFactory
>
mDecoderFactory
;
const
UniquePtr
<
WebrtcVideoEncoderFactory
>
mEncoderFactory
;
UniquePtr
<
cricket
:
:
VideoAdapter
>
mVideoAdapter
;
AutoTArray
<
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
1
>
mRegisteredSinks
;
rtc
:
:
VideoBroadcaster
mVideoBroadcaster
;
Atomic
<
bool
>
mUpdateSendResolution
{
false
}
;
webrtc
:
:
I420BufferPool
mBufferPool
;
mozilla
:
:
Atomic
<
bool
>
mEngineTransmitting
;
mozilla
:
:
Atomic
<
bool
>
mEngineReceiving
;
Maybe
<
VideoCodecConfig
>
mCurSendCodecConfig
;
RunningStat
mSendFramerate
;
RunningStat
mSendBitrate
;
RunningStat
mRecvFramerate
;
RunningStat
mRecvBitrate
;
webrtc
:
:
VideoReceiveStream
*
mRecvStream
=
nullptr
;
webrtc
:
:
VideoSendStream
*
mSendStream
=
nullptr
;
unsigned
short
mLastWidth
=
0
;
unsigned
short
mLastHeight
=
0
;
Maybe
<
uint64_t
>
mLastTimestampSendUs
;
Maybe
<
uint32_t
>
mLastRTPTimestampReceive
;
unsigned
int
mSendingFramerate
;
uint64_t
mVideoLatencyAvg
=
0
;
const
bool
mVideoLatencyTestEnable
;
const
int
mMinBitrate
;
const
int
mStartBitrate
;
const
int
mPrefMaxBitrate
;
const
int
mMinBitrateEstimate
;
int
mNegotiatedMaxBitrate
=
0
;
const
bool
mDenoising
;
const
bool
mLockScaling
;
const
uint8_t
mSpatialLayers
;
const
uint8_t
mTemporalLayers
;
static
const
unsigned
int
sAlphaNum
=
7
;
static
const
unsigned
int
sAlphaDen
=
8
;
static
const
unsigned
int
sRoundingPadding
=
1024
;
const
RefPtr
<
WebrtcCallWrapper
>
mCall
;
WebrtcSendTransport
mSendTransport
;
WebrtcReceiveTransport
mRecvTransport
;
webrtc
:
:
VideoSendStream
:
:
Config
mSendStreamConfig
;
webrtc
:
:
VideoEncoderConfig
mEncoderConfig
;
RefPtr
<
rtc
:
:
RefCountedObject
<
VideoStreamFactory
>
>
mVideoStreamFactory
;
webrtc
:
:
VideoReceiveStream
:
:
Config
mRecvStreamConfig
;
bool
mAllowSsrcChange
=
true
;
Atomic
<
uint32_t
>
mRecvSSRC
=
Atomic
<
uint32_t
>
(
0
)
;
Atomic
<
uint32_t
>
mRemoteSendSSRC
=
Atomic
<
uint32_t
>
(
0
)
;
nsTArray
<
uint64_t
>
mSendCodecPluginIDs
;
nsTArray
<
uint64_t
>
mRecvCodecPluginIDs
;
MediaEventListener
mSendPluginCreated
;
MediaEventListener
mSendPluginReleased
;
MediaEventListener
mRecvPluginCreated
;
MediaEventListener
mRecvPluginReleased
;
std
:
:
map
<
uint32_t
uint16_t
>
mRtpSendBaseSeqs
;
std
:
:
map
<
uint32_t
uint16_t
>
mRtpSendBaseSeqs_n
;
dom
:
:
RTCVideoFrameHistoryInternal
mReceivedFrameHistory
;
Atomic
<
bool
>
mTransportActive
=
Atomic
<
bool
>
(
false
)
;
MediaEventProducer
<
void
>
mRtcpByeEvent
;
MediaEventProducer
<
void
>
mRtcpTimeoutEvent
;
MediaEventProducerExc
<
MediaPacket
>
mSenderRtpSendEvent
;
MediaEventProducerExc
<
MediaPacket
>
mSenderRtcpSendEvent
;
MediaEventProducerExc
<
MediaPacket
>
mReceiverRtcpSendEvent
;
MediaEventListener
mSenderRtcpEventListener
;
MediaEventListener
mReceiverRtcpEventListener
;
MediaEventListener
mReceiverRtpEventListener
;
}
;
}
#
endif
