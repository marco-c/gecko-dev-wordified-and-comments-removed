#
ifndef
SINEWAVEGENERATOR_H_
#
define
SINEWAVEGENERATOR_H_
#
include
"
MediaSegment
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
template
<
typename
Sample
>
class
SineWaveGenerator
{
static_assert
(
std
:
:
is_same
<
Sample
int16_t
>
:
:
value
|
|
std
:
:
is_same
<
Sample
float
>
:
:
value
)
;
public
:
static
const
int
bytesPerSample
=
sizeof
(
Sample
)
;
static
const
int
millisecondsPerSecond
=
PR_MSEC_PER_SEC
;
static
constexpr
float
twopi
=
2
*
M_PI
;
SineWaveGenerator
(
uint32_t
aSampleRate
uint32_t
aFrequency
)
:
mPhase
(
0
.
)
mPhaseIncrement
(
twopi
*
aFrequency
/
aSampleRate
)
{
}
void
generate
(
Sample
*
aBuffer
TrackTicks
aFrameCount
uint32_t
aChannelCount
=
1
)
{
while
(
aFrameCount
-
-
)
{
Sample
value
=
sin
(
mPhase
)
*
Amplitude
(
)
;
for
(
uint32_t
channel
=
0
;
channel
<
aChannelCount
;
channel
+
+
)
{
*
aBuffer
+
+
=
value
;
}
mPhase
+
=
mPhaseIncrement
;
if
(
mPhase
>
twopi
)
{
mPhase
-
=
twopi
;
}
}
}
static
float
Amplitude
(
)
{
if
(
std
:
:
is_same
<
Sample
int16_t
>
:
:
value
)
{
return
3276
.
8
;
}
return
0
.
1f
;
}
private
:
double
mPhase
;
const
double
mPhaseIncrement
;
}
;
}
#
endif
