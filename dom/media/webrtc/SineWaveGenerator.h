#
ifndef
SINEWAVEGENERATOR_H_
#
define
SINEWAVEGENERATOR_H_
namespace
mozilla
{
class
SineWaveGenerator
{
public
:
static
const
int
bytesPerSample
=
2
;
static
const
int
millisecondsPerSecond
=
PR_MSEC_PER_SEC
;
explicit
SineWaveGenerator
(
uint32_t
aSampleRate
uint32_t
aFrequency
)
:
mTotalLength
(
aSampleRate
/
aFrequency
)
mReadLength
(
0
)
{
mAudioBuffer
=
MakeUnique
<
int16_t
[
]
>
(
mTotalLength
)
;
for
(
int
i
=
0
;
i
<
mTotalLength
;
i
+
+
)
{
mAudioBuffer
[
i
]
=
(
3276
.
8f
*
sin
(
2
*
M_PI
*
i
/
mTotalLength
)
)
;
}
}
void
generate
(
int16_t
*
aBuffer
int16_t
aLengthInSamples
)
{
int16_t
remaining
=
aLengthInSamples
;
while
(
remaining
)
{
int16_t
processSamples
=
0
;
if
(
mTotalLength
-
mReadLength
>
=
remaining
)
{
processSamples
=
remaining
;
}
else
{
processSamples
=
mTotalLength
-
mReadLength
;
}
memcpy
(
aBuffer
&
mAudioBuffer
[
mReadLength
]
processSamples
*
bytesPerSample
)
;
aBuffer
+
=
processSamples
;
mReadLength
+
=
processSamples
;
remaining
-
=
processSamples
;
if
(
mReadLength
=
=
mTotalLength
)
{
mReadLength
=
0
;
}
}
}
private
:
UniquePtr
<
int16_t
[
]
>
mAudioBuffer
;
int16_t
mTotalLength
;
int16_t
mReadLength
;
}
;
}
#
endif
