#
ifndef
mtransport_test_utils_h__
#
define
mtransport_test_utils_h__
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsPISocketTransportService
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
MtransportTestUtils
{
public
:
MtransportTestUtils
(
)
{
InitServices
(
)
;
}
~
MtransportTestUtils
(
)
=
default
;
void
InitServices
(
)
{
nsresult
rv
;
sts_target_
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
sts_
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
}
nsISerialEventTarget
*
sts_target
(
)
{
return
sts_target_
;
}
nsresult
SyncDispatchToSTS
(
nsIRunnable
*
aRunnable
)
{
return
SyncDispatchToSTS
(
do_AddRef
(
aRunnable
)
)
;
}
nsresult
SyncDispatchToSTS
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
{
return
NS_DispatchAndSpinEventLoopUntilComplete
(
"
MtransportTestUtils
:
:
SyncDispatchToSts
"
_ns
sts_target_
std
:
:
move
(
aRunnable
)
)
;
}
private
:
nsCOMPtr
<
nsISerialEventTarget
>
sts_target_
;
nsCOMPtr
<
nsPISocketTransportService
>
sts_
;
}
;
#
define
CHECK_ENVIRONMENT_FLAG
(
envname
)
\
char
*
test_flag
=
getenv
(
envname
)
;
\
if
(
!
test_flag
|
|
strcmp
(
test_flag
"
1
"
)
)
{
\
printf
(
"
To
run
this
test
set
%
s
=
1
in
your
environment
\
n
"
envname
)
;
\
exit
(
0
)
;
\
}
#
endif
