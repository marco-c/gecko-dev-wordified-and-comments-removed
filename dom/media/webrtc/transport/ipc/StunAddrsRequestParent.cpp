#
include
"
StunAddrsRequestParent
.
h
"
#
include
"
.
.
/
runnable_utils
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
transport
/
nricectx
.
h
"
#
include
"
transport
/
nricemediastream
.
h
"
#
include
"
transport
/
nricestunaddr
.
h
"
#
include
"
.
.
/
mdns_service
/
mdns_service
.
h
"
extern
"
C
"
{
#
include
"
local_addr
.
h
"
}
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
net
{
static
void
mdns_service_resolved
(
void
*
cb
const
char
*
hostname
const
char
*
addr
)
{
StunAddrsRequestParent
*
self
=
static_cast
<
StunAddrsRequestParent
*
>
(
cb
)
;
self
-
>
OnQueryComplete
(
nsCString
(
hostname
)
Some
(
nsCString
(
addr
)
)
)
;
}
void
mdns_service_timedout
(
void
*
cb
const
char
*
hostname
)
{
StunAddrsRequestParent
*
self
=
static_cast
<
StunAddrsRequestParent
*
>
(
cb
)
;
self
-
>
OnQueryComplete
(
nsCString
(
hostname
)
Nothing
(
)
)
;
}
StunAddrsRequestParent
:
:
StunAddrsRequestParent
(
)
:
mIPCClosed
(
false
)
{
NS_GetMainThread
(
getter_AddRefs
(
mMainThread
)
)
;
nsresult
res
;
mSTSThread
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
res
)
;
MOZ_ASSERT
(
mSTSThread
)
;
}
StunAddrsRequestParent
:
:
~
StunAddrsRequestParent
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvGetStunAddrs
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
RUN_ON_THREAD
(
mSTSThread
WrapRunnable
(
RefPtr
<
StunAddrsRequestParent
>
(
this
)
&
StunAddrsRequestParent
:
:
GetStunAddrs_s
)
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvRegisterMDNSHostname
(
const
nsCString
&
aHostname
const
nsCString
&
aAddress
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
if
(
mSharedMDNSService
)
{
mSharedMDNSService
-
>
RegisterHostname
(
aHostname
.
BeginReading
(
)
aAddress
.
BeginReading
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvQueryMDNSHostname
(
const
nsCString
&
aHostname
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
if
(
mSharedMDNSService
)
{
mSharedMDNSService
-
>
QueryHostname
(
this
aHostname
.
BeginReading
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvUnregisterMDNSHostname
(
const
nsCString
&
aHostname
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
if
(
mSharedMDNSService
)
{
mSharedMDNSService
-
>
UnregisterHostname
(
aHostname
.
BeginReading
(
)
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
Recv__delete__
(
)
{
mIPCClosed
=
true
;
return
IPC_OK
(
)
;
}
void
StunAddrsRequestParent
:
:
OnQueryComplete
(
const
nsCString
&
hostname
const
Maybe
<
nsCString
>
&
address
)
{
RUN_ON_THREAD
(
mMainThread
WrapRunnable
(
RefPtr
<
StunAddrsRequestParent
>
(
this
)
&
StunAddrsRequestParent
:
:
OnQueryComplete_m
hostname
address
)
NS_DISPATCH_NORMAL
)
;
}
void
StunAddrsRequestParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
mIPCClosed
=
true
;
if
(
mSharedMDNSService
)
{
mSharedMDNSService
=
nullptr
;
}
}
void
StunAddrsRequestParent
:
:
GetStunAddrs_s
(
)
{
ASSERT_ON_THREAD
(
mSTSThread
)
;
NrIceStunAddrArray
addrs
=
NrIceCtx
:
:
GetStunAddrs
(
)
;
if
(
mIPCClosed
)
{
return
;
}
RUN_ON_THREAD
(
mMainThread
WrapRunnable
(
RefPtr
<
StunAddrsRequestParent
>
(
this
)
&
StunAddrsRequestParent
:
:
SendStunAddrs_m
std
:
:
move
(
addrs
)
)
NS_DISPATCH_NORMAL
)
;
}
void
StunAddrsRequestParent
:
:
SendStunAddrs_m
(
const
NrIceStunAddrArray
&
addrs
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
;
}
if
(
!
mSharedMDNSService
)
{
std
:
:
ostringstream
o
;
char
buffer
[
16
]
;
for
(
auto
&
addr
:
addrs
)
{
nr_transport_addr
*
local_addr
=
const_cast
<
nr_transport_addr
*
>
(
&
addr
.
localAddr
(
)
.
addr
)
;
if
(
addr
.
localAddr
(
)
.
addr
.
ip_version
=
=
NR_IPV4
&
&
!
nr_transport_addr_is_loopback
(
local_addr
)
)
{
nr_transport_addr_get_addrstring
(
local_addr
buffer
16
)
;
o
<
<
buffer
<
<
"
;
"
;
}
}
std
:
:
string
addrstring
=
o
.
str
(
)
;
if
(
!
addrstring
.
empty
(
)
)
{
mSharedMDNSService
=
new
MDNSServiceWrapper
(
addrstring
)
;
}
}
Unused
<
<
SendOnStunAddrsAvailable
(
addrs
)
;
}
void
StunAddrsRequestParent
:
:
OnQueryComplete_m
(
const
nsCString
&
hostname
const
Maybe
<
nsCString
>
&
address
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
;
}
Unused
<
<
SendOnMDNSQueryComplete
(
hostname
address
)
;
}
StaticRefPtr
<
StunAddrsRequestParent
:
:
MDNSServiceWrapper
>
StunAddrsRequestParent
:
:
mSharedMDNSService
;
NS_IMPL_ADDREF
(
StunAddrsRequestParent
)
NS_IMPL_RELEASE
(
StunAddrsRequestParent
)
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
MDNSServiceWrapper
(
const
std
:
:
string
&
ifaddr
)
:
ifaddr
(
ifaddr
)
{
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
RegisterHostname
(
const
char
*
hostname
const
char
*
address
)
{
StartIfRequired
(
)
;
if
(
mMDNSService
)
{
mdns_service_register_hostname
(
mMDNSService
hostname
address
)
;
}
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
QueryHostname
(
void
*
data
const
char
*
hostname
)
{
StartIfRequired
(
)
;
if
(
mMDNSService
)
{
mdns_service_query_hostname
(
mMDNSService
data
mdns_service_resolved
mdns_service_timedout
hostname
)
;
}
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
UnregisterHostname
(
const
char
*
hostname
)
{
StartIfRequired
(
)
;
if
(
mMDNSService
)
{
mdns_service_unregister_hostname
(
mMDNSService
hostname
)
;
}
}
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
~
MDNSServiceWrapper
(
)
{
if
(
mMDNSService
)
{
mdns_service_stop
(
mMDNSService
)
;
mMDNSService
=
nullptr
;
}
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
StartIfRequired
(
)
{
if
(
!
mMDNSService
)
{
mMDNSService
=
mdns_service_start
(
ifaddr
.
c_str
(
)
)
;
}
}
NS_IMPL_ADDREF
(
StunAddrsRequestParent
:
:
MDNSServiceWrapper
)
NS_IMPL_RELEASE
(
StunAddrsRequestParent
:
:
MDNSServiceWrapper
)
}
