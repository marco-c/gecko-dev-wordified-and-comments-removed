#
include
"
WebrtcTCPSocketChild
.
h
"
#
include
"
LoadInfo
.
h
"
#
include
"
WebrtcTCPSocketCallback
.
h
"
#
include
"
WebrtcTCPSocketLog
.
h
"
#
include
"
mozilla
/
net
/
NeckoChild
.
h
"
#
include
"
mozilla
/
net
/
SocketProcessChild
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
:
:
net
{
mozilla
:
:
ipc
:
:
IPCResult
WebrtcTCPSocketChild
:
:
RecvOnClose
(
const
nsresult
&
aReason
)
{
LOG
(
(
"
WebrtcTCPSocketChild
:
:
RecvOnClose
%
p
\
n
"
this
)
)
;
MOZ_ASSERT
(
mProxyCallbacks
"
webrtc
TCP
callbacks
should
be
non
-
null
"
)
;
mProxyCallbacks
-
>
OnClose
(
aReason
)
;
mProxyCallbacks
=
nullptr
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebrtcTCPSocketChild
:
:
RecvOnConnected
(
const
nsACString
&
aProxyType
)
{
LOG
(
(
"
WebrtcTCPSocketChild
:
:
RecvOnConnected
%
p
\
n
"
this
)
)
;
MOZ_ASSERT
(
mProxyCallbacks
"
webrtc
TCP
callbacks
should
be
non
-
null
"
)
;
mProxyCallbacks
-
>
OnConnected
(
aProxyType
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
WebrtcTCPSocketChild
:
:
RecvOnRead
(
nsTArray
<
uint8_t
>
&
&
aReadData
)
{
LOG
(
(
"
WebrtcTCPSocketChild
:
:
RecvOnRead
%
p
\
n
"
this
)
)
;
MOZ_ASSERT
(
mProxyCallbacks
"
webrtc
TCP
callbacks
should
be
non
-
null
"
)
;
mProxyCallbacks
-
>
OnRead
(
std
:
:
move
(
aReadData
)
)
;
return
IPC_OK
(
)
;
}
WebrtcTCPSocketChild
:
:
WebrtcTCPSocketChild
(
WebrtcTCPSocketCallback
*
aProxyCallbacks
)
:
mProxyCallbacks
(
aProxyCallbacks
)
{
MOZ_COUNT_CTOR
(
WebrtcTCPSocketChild
)
;
LOG
(
(
"
WebrtcTCPSocketChild
:
:
WebrtcTCPSocketChild
%
p
\
n
"
this
)
)
;
}
WebrtcTCPSocketChild
:
:
~
WebrtcTCPSocketChild
(
)
{
MOZ_COUNT_DTOR
(
WebrtcTCPSocketChild
)
;
LOG
(
(
"
WebrtcTCPSocketChild
:
:
~
WebrtcTCPSocketChild
%
p
\
n
"
this
)
)
;
}
void
WebrtcTCPSocketChild
:
:
AsyncOpen
(
const
nsACString
&
aHost
const
int
&
aPort
const
nsACString
&
aLocalAddress
const
int
&
aLocalPort
bool
aUseTls
const
std
:
:
shared_ptr
<
NrSocketProxyConfig
>
&
aProxyConfig
)
{
LOG
(
(
"
WebrtcTCPSocketChild
:
:
AsyncOpen
%
p
%
s
:
%
d
\
n
"
this
PromiseFlatCString
(
aHost
)
.
get
(
)
aPort
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
not
main
thread
"
)
;
AddIPDLReference
(
)
;
Maybe
<
net
:
:
WebrtcProxyConfig
>
proxyConfig
;
Maybe
<
dom
:
:
TabId
>
tabId
;
if
(
aProxyConfig
)
{
proxyConfig
=
Some
(
aProxyConfig
-
>
GetConfig
(
)
)
;
tabId
=
Some
(
proxyConfig
-
>
tabId
(
)
)
;
}
if
(
IsNeckoChild
(
)
)
{
gNeckoChild
-
>
SendPWebrtcTCPSocketConstructor
(
this
tabId
)
;
}
else
if
(
IsSocketProcessChild
(
)
)
{
SocketProcessChild
:
:
GetSingleton
(
)
-
>
SendPWebrtcTCPSocketConstructor
(
this
tabId
)
;
}
SendAsyncOpen
(
aHost
aPort
aLocalAddress
aLocalPort
aUseTls
proxyConfig
)
;
}
}
