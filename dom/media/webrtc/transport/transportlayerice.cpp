#
include
<
string
>
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsNetCID
.
h
"
extern
"
C
"
{
#
include
"
ice_util
.
h
"
#
include
"
nr_api
.
h
"
#
include
"
transport_addr
.
h
"
}
#
include
"
logging
.
h
"
#
include
"
nricemediastream
.
h
"
#
include
"
transportlayerice
.
h
"
namespace
mozilla
{
#
ifdef
ERROR
#
undef
ERROR
#
endif
MOZ_MTLOG_MODULE
(
"
mtransport
"
)
TransportLayerIce
:
:
TransportLayerIce
(
)
:
stream_
(
nullptr
)
component_
(
0
)
{
}
TransportLayerIce
:
:
~
TransportLayerIce
(
)
{
}
void
TransportLayerIce
:
:
SetParameters
(
RefPtr
<
NrIceMediaStream
>
stream
int
component
)
{
if
(
!
stream
)
{
MOZ_ASSERT
(
false
)
;
return
;
}
stream_
=
stream
;
component_
=
component
;
PostSetup
(
)
;
}
void
TransportLayerIce
:
:
PostSetup
(
)
{
stream_
-
>
SignalReady
.
connect
(
this
&
TransportLayerIce
:
:
IceReady
)
;
stream_
-
>
SignalFailed
.
connect
(
this
&
TransportLayerIce
:
:
IceFailed
)
;
stream_
-
>
SignalPacketReceived
.
connect
(
this
&
TransportLayerIce
:
:
IcePacketReceived
)
;
if
(
stream_
-
>
state
(
)
=
=
NrIceMediaStream
:
:
ICE_OPEN
)
{
TL_SET_STATE
(
TS_OPEN
)
;
}
}
TransportResult
TransportLayerIce
:
:
SendPacket
(
MediaPacket
&
packet
)
{
CheckThread
(
)
;
nsresult
res
=
stream_
-
>
SendPacket
(
component_
packet
.
data
(
)
packet
.
len
(
)
)
;
int
len
=
packet
.
len
(
)
;
SignalPacketSending
(
this
packet
)
;
if
(
!
NS_SUCCEEDED
(
res
)
)
{
return
(
res
=
=
NS_BASE_STREAM_WOULD_BLOCK
)
?
TE_WOULDBLOCK
:
TE_ERROR
;
}
MOZ_MTLOG
(
ML_DEBUG
LAYER_INFO
<
<
"
SendPacket
(
"
<
<
packet
.
len
(
)
<
<
"
)
succeeded
"
)
;
return
len
;
}
void
TransportLayerIce
:
:
IceCandidate
(
NrIceMediaStream
*
stream
const
std
:
:
string
&
)
{
}
void
TransportLayerIce
:
:
IceReady
(
NrIceMediaStream
*
stream
)
{
CheckThread
(
)
;
if
(
stream
!
=
stream_
)
{
return
;
}
MOZ_MTLOG
(
ML_INFO
LAYER_INFO
<
<
"
ICE
Ready
(
"
<
<
stream
-
>
name
(
)
<
<
"
"
<
<
component_
<
<
"
)
"
)
;
TL_SET_STATE
(
TS_OPEN
)
;
}
void
TransportLayerIce
:
:
IceFailed
(
NrIceMediaStream
*
stream
)
{
CheckThread
(
)
;
if
(
stream
!
=
stream_
)
{
return
;
}
MOZ_MTLOG
(
ML_INFO
LAYER_INFO
<
<
"
ICE
Failed
(
"
<
<
stream
-
>
name
(
)
<
<
"
"
<
<
component_
<
<
"
)
"
)
;
TL_SET_STATE
(
TS_ERROR
)
;
}
void
TransportLayerIce
:
:
IcePacketReceived
(
NrIceMediaStream
*
stream
int
component
const
unsigned
char
*
data
int
len
)
{
CheckThread
(
)
;
if
(
component_
!
=
component
)
return
;
MOZ_MTLOG
(
ML_DEBUG
LAYER_INFO
<
<
"
PacketReceived
(
"
<
<
stream
-
>
name
(
)
<
<
"
"
<
<
component
<
<
"
"
<
<
len
<
<
"
)
"
)
;
MediaPacket
packet
;
packet
.
Copy
(
data
len
)
;
packet
.
Categorize
(
)
;
SignalPacketReceived
(
this
packet
)
;
}
}
