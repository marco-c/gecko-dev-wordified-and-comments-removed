#
ifndef
nricemediastream_h__
#
define
nricemediastream_h__
#
include
<
string
>
#
include
<
vector
>
#
include
"
sigslot
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nscore
.
h
"
#
include
"
m_cpp_utils
.
h
"
namespace
mozilla
{
typedef
struct
nr_ice_ctx_
nr_ice_ctx
;
typedef
struct
nr_ice_peer_ctx_
nr_ice_peer_ctx
;
typedef
struct
nr_ice_media_stream_
nr_ice_media_stream
;
class
NrIceCtx
;
struct
NrIceAddr
{
std
:
:
string
host
;
uint16_t
port
;
std
:
:
string
transport
;
}
;
struct
NrIceCandidate
{
enum
Type
{
ICE_HOST
ICE_SERVER_REFLEXIVE
ICE_PEER_REFLEXIVE
ICE_RELAYED
}
;
enum
TcpType
{
ICE_NONE
ICE_ACTIVE
ICE_PASSIVE
ICE_SO
}
;
NrIceAddr
cand_addr
;
NrIceAddr
local_addr
;
std
:
:
string
mdns_addr
;
Type
type
;
TcpType
tcp_type
;
std
:
:
string
codeword
;
std
:
:
string
label
;
bool
trickled
;
uint32_t
priority
;
bool
is_proxied
=
false
;
}
;
struct
NrIceCandidatePair
{
enum
State
{
STATE_FROZEN
STATE_WAITING
STATE_IN_PROGRESS
STATE_FAILED
STATE_SUCCEEDED
STATE_CANCELLED
}
;
State
state
;
uint64_t
priority
;
bool
nominated
;
bool
writable
;
bool
readable
;
bool
selected
;
NrIceCandidate
local
;
NrIceCandidate
remote
;
std
:
:
string
codeword
;
uint64_t
component_id
;
uint64_t
bytes_sent
;
uint64_t
bytes_recvd
;
uint64_t
ms_since_last_send
;
uint64_t
ms_since_last_recv
;
uint64_t
responses_recvd
;
uint64_t
current_rtt_ms
;
uint64_t
total_rtt_ms
;
}
;
class
NrIceMediaStream
{
public
:
enum
GatheringState
{
ICE_STREAM_GATHER_INIT
ICE_STREAM_GATHER_STARTED
ICE_STREAM_GATHER_COMPLETE
}
;
NrIceMediaStream
(
NrIceCtx
*
ctx
const
std
:
:
string
&
id
const
std
:
:
string
&
name
size_t
components
)
;
nsresult
SetIceCredentials
(
const
std
:
:
string
&
ufrag
const
std
:
:
string
&
pwd
)
;
nsresult
ConnectToPeer
(
const
std
:
:
string
&
ufrag
const
std
:
:
string
&
pwd
const
std
:
:
vector
<
std
:
:
string
>
&
peer_attrs
)
;
enum
State
{
ICE_CONNECTING
ICE_OPEN
ICE_CLOSED
}
;
State
state
(
)
const
{
return
state_
;
}
const
std
:
:
string
&
name
(
)
const
{
return
name_
;
}
std
:
:
vector
<
std
:
:
string
>
GetAttributes
(
)
const
;
nsresult
GetLocalCandidates
(
std
:
:
vector
<
NrIceCandidate
>
*
candidates
)
const
;
nsresult
GetRemoteCandidates
(
std
:
:
vector
<
NrIceCandidate
>
*
candidates
)
const
;
nsresult
GetCandidatePairs
(
std
:
:
vector
<
NrIceCandidatePair
>
*
out_pairs
)
const
;
nsresult
GetDefaultCandidate
(
int
component
NrIceCandidate
*
candidate
)
const
;
nsresult
ParseTrickleCandidate
(
const
std
:
:
string
&
candidate
const
std
:
:
string
&
ufrag
const
std
:
:
string
&
mdns_addr
)
;
nsresult
DisableComponent
(
int
component
)
;
nsresult
GetActivePair
(
int
component
UniquePtr
<
NrIceCandidate
>
*
local
UniquePtr
<
NrIceCandidate
>
*
remote
)
;
nsresult
GetConsentStatus
(
int
component
bool
*
can_send
struct
timeval
*
ts
)
;
size_t
components
(
)
const
{
return
components_
;
}
bool
HasStream
(
nr_ice_media_stream
*
stream
)
const
;
nsresult
SendPacket
(
int
component_id
const
unsigned
char
*
data
size_t
len
)
;
void
Ready
(
nr_ice_media_stream
*
stream
)
;
void
Failed
(
)
;
void
OnGatheringStarted
(
nr_ice_media_stream
*
stream
)
;
void
OnGatheringComplete
(
nr_ice_media_stream
*
stream
)
;
void
Close
(
)
;
const
std
:
:
string
&
GetId
(
)
const
{
return
id_
;
}
bool
AllGenerationsDoneGathering
(
)
const
;
bool
AnyGenerationIsConnected
(
)
const
;
sigslot
:
:
signal5
<
NrIceMediaStream
*
const
std
:
:
string
&
const
std
:
:
string
&
const
std
:
:
string
&
const
std
:
:
string
&
>
SignalCandidate
;
sigslot
:
:
signal2
<
const
std
:
:
string
&
NrIceMediaStream
:
:
GatheringState
>
SignalGatheringStateChange
;
sigslot
:
:
signal1
<
NrIceMediaStream
*
>
SignalReady
;
sigslot
:
:
signal1
<
NrIceMediaStream
*
>
SignalFailed
;
sigslot
:
:
signal4
<
NrIceMediaStream
*
int
const
unsigned
char
*
int
>
SignalPacketReceived
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
NrIceMediaStream
)
private
:
~
NrIceMediaStream
(
)
;
DISALLOW_COPY_ASSIGN
(
NrIceMediaStream
)
;
void
CloseStream
(
nr_ice_media_stream
*
*
stream
)
;
void
DeferredCloseOldStream
(
const
nr_ice_media_stream
*
old
)
;
nr_ice_media_stream
*
GetStreamForRemoteUfrag
(
const
std
:
:
string
&
ufrag
)
;
State
state_
;
RefPtr
<
NrIceCtx
>
ctx_
;
const
std
:
:
string
name_
;
const
size_t
components_
;
nr_ice_media_stream
*
stream_
;
nr_ice_media_stream
*
old_stream_
;
const
std
:
:
string
id_
;
}
;
}
#
endif
