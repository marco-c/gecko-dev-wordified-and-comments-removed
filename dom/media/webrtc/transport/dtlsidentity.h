#
ifndef
dtls_identity_h__
#
define
dtls_identity_h__
#
include
<
utility
>
#
include
<
vector
>
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
m_cpp_utils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
sslt
.
h
"
namespace
mozilla
{
class
DtlsDigest
{
public
:
const
static
size_t
kMaxDtlsDigestLength
=
HASH_LENGTH_MAX
;
DtlsDigest
(
)
=
default
;
explicit
DtlsDigest
(
const
nsACString
&
algorithm
)
:
algorithm_
(
algorithm
)
{
}
DtlsDigest
(
const
nsACString
&
algorithm
const
std
:
:
vector
<
uint8_t
>
&
value
)
:
algorithm_
(
algorithm
)
value_
(
value
)
{
MOZ_ASSERT
(
value
.
size
(
)
<
=
kMaxDtlsDigestLength
)
;
}
~
DtlsDigest
(
)
=
default
;
bool
operator
!
=
(
const
DtlsDigest
&
rhs
)
const
{
return
!
operator
=
=
(
rhs
)
;
}
bool
operator
=
=
(
const
DtlsDigest
&
rhs
)
const
{
if
(
algorithm_
!
=
rhs
.
algorithm_
)
{
return
false
;
}
return
value_
=
=
rhs
.
value_
;
}
nsCString
algorithm_
;
std
:
:
vector
<
uint8_t
>
value_
;
}
;
typedef
std
:
:
vector
<
DtlsDigest
>
DtlsDigestList
;
class
DtlsIdentity
final
{
public
:
DtlsIdentity
(
UniqueSECKEYPrivateKey
privkey
UniqueCERTCertificate
cert
SSLKEAType
authType
)
:
private_key_
(
std
:
:
move
(
privkey
)
)
cert_
(
std
:
:
move
(
cert
)
)
auth_type_
(
authType
)
{
}
nsresult
Serialize
(
nsTArray
<
uint8_t
>
*
aKeyDer
nsTArray
<
uint8_t
>
*
aCertDer
)
;
static
RefPtr
<
DtlsIdentity
>
Deserialize
(
const
nsTArray
<
uint8_t
>
&
aKeyDer
const
nsTArray
<
uint8_t
>
&
aCertDer
SSLKEAType
authType
)
;
static
RefPtr
<
DtlsIdentity
>
Generate
(
)
;
const
UniqueCERTCertificate
&
cert
(
)
const
{
return
cert_
;
}
const
UniqueSECKEYPrivateKey
&
privkey
(
)
const
{
return
private_key_
;
}
SSLKEAType
auth_type
(
)
const
{
return
auth_type_
;
}
nsresult
ComputeFingerprint
(
DtlsDigest
*
digest
)
const
;
static
nsresult
ComputeFingerprint
(
const
UniqueCERTCertificate
&
cert
DtlsDigest
*
digest
)
;
static
constexpr
nsLiteralCString
DEFAULT_HASH_ALGORITHM
=
"
sha
-
256
"
_ns
;
enum
{
HASH_ALGORITHM_MAX_LENGTH
=
64
}
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DtlsIdentity
)
private
:
~
DtlsIdentity
(
)
=
default
;
DISALLOW_COPY_ASSIGN
(
DtlsIdentity
)
;
UniqueSECKEYPrivateKey
private_key_
;
UniqueCERTCertificate
cert_
;
SSLKEAType
auth_type_
;
}
;
}
#
endif
