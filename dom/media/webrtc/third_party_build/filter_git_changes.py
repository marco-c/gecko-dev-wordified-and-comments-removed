import
argparse
import
importlib
import
re
import
sys
sys
.
path
.
insert
(
0
"
.
/
dom
/
media
/
webrtc
/
third_party_build
"
)
vendor_libwebrtc
=
importlib
.
import_module
(
"
vendor
-
libwebrtc
"
)
from
run_operations
import
run_git
def
filter_git_changes
(
github_path
commit_sha
diff_filter
)
:
    
command
=
[
        
"
git
"
        
"
show
"
        
"
-
-
oneline
"
        
"
-
-
name
-
status
"
        
"
-
-
pretty
=
format
:
"
        
None
if
not
diff_filter
else
"
-
-
diff
-
filter
=
{
}
"
.
format
(
diff_filter
)
        
commit_sha
    
]
    
command
=
"
"
.
join
(
[
x
for
x
in
command
if
x
is
not
None
]
)
    
stdout_lines
=
run_git
(
command
github_path
)
    
changed_files
=
[
line
.
strip
(
)
for
line
in
stdout_lines
]
    
changed_files
=
[
line
for
line
in
changed_files
if
line
!
=
"
"
]
    
exclude_file_list
=
vendor_libwebrtc
.
get_excluded_files
(
)
    
exclude_dir_list
=
vendor_libwebrtc
.
get_excluded_dirs
(
)
    
include_list
=
vendor_libwebrtc
.
get_included_path_overrides
(
)
    
regex_includes
=
"
|
"
.
join
(
[
"
^
.
\
t
{
}
"
.
format
(
i
)
for
i
in
include_list
]
)
    
included_files
=
[
        
path
for
path
in
changed_files
if
re
.
findall
(
regex_includes
path
)
    
]
    
regex_excludes
=
"
|
"
.
join
(
        
[
"
^
(
M
|
A
|
D
|
R
\
d
\
d
\
d
)
\
t
{
}
"
.
format
(
i
)
for
i
in
exclude_dir_list
]
    
)
    
files_not_excluded
=
[
        
path
for
path
in
changed_files
if
not
re
.
findall
(
regex_excludes
path
)
    
]
    
regex_excludes
=
"
|
"
.
join
(
[
"
^
.
\
t
{
}
"
.
format
(
i
)
for
i
in
exclude_file_list
]
)
    
files_not_excluded
=
[
        
path
for
path
in
files_not_excluded
if
not
re
.
findall
(
regex_excludes
path
)
    
]
    
return
included_files
+
files_not_excluded
if
__name__
=
=
"
__main__
"
:
    
parser
=
argparse
.
ArgumentParser
(
        
description
=
"
Get
relevant
change
count
from
an
upstream
git
commit
"
    
)
    
parser
.
add_argument
(
        
"
-
-
repo
-
path
"
        
required
=
True
        
help
=
"
path
to
libwebrtc
repo
"
    
)
    
parser
.
add_argument
(
"
-
-
commit
-
sha
"
required
=
True
help
=
"
sha
of
commit
to
examine
"
)
    
parser
.
add_argument
(
        
"
-
-
diff
-
filter
"
        
choices
=
(
"
A
"
"
D
"
"
R
"
)
        
help
=
"
filter
for
adds
(
A
)
deletes
(
D
)
or
renames
(
R
)
"
    
)
    
args
=
parser
.
parse_args
(
)
    
paths
=
filter_git_changes
(
args
.
repo_path
args
.
commit_sha
args
.
diff_filter
)
    
for
path
in
paths
:
        
print
(
path
)
