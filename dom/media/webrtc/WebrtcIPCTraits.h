#
ifndef
_WEBRTC_IPC_TRAITS_H_
#
define
_WEBRTC_IPC_TRAITS_H_
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
RTCConfigurationBinding
.
h
"
#
include
"
mozilla
/
media
/
webrtc
/
WebrtcGlobal
.
h
"
#
include
"
mozilla
/
dom
/
CandidateInfo
.
h
"
#
include
"
mozilla
/
MacroForEach
.
h
"
#
include
"
mtransport
/
transportlayerdtls
.
h
"
#
include
<
vector
>
namespace
mozilla
{
typedef
std
:
:
vector
<
std
:
:
string
>
StringVector
;
}
namespace
IPC
{
template
<
typename
T
>
struct
ParamTraits
<
std
:
:
vector
<
T
>
>
{
typedef
std
:
:
vector
<
T
>
paramType
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
aMsg
-
>
WriteUInt32
(
aParam
.
size
(
)
)
;
for
(
const
T
&
elem
:
aParam
)
{
WriteParam
(
aMsg
elem
)
;
}
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
uint32_t
size
;
if
(
!
aMsg
-
>
ReadUInt32
(
aIter
&
size
)
)
{
return
false
;
}
while
(
size
-
-
)
{
T
elem
;
if
(
!
ReadParam
(
aMsg
aIter
&
elem
)
)
{
return
false
;
}
aResult
-
>
emplace_back
(
std
:
:
move
(
elem
)
)
;
}
return
true
;
}
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
OwningStringOrStringSequence
>
{
typedef
mozilla
:
:
dom
:
:
OwningStringOrStringSequence
paramType
;
enum
Type
{
kUninitialized
kString
kStringSequence
}
;
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
if
(
aParam
.
IsString
(
)
)
{
aMsg
-
>
WriteInt16
(
kString
)
;
WriteParam
(
aMsg
aParam
.
GetAsString
(
)
)
;
}
else
if
(
aParam
.
IsStringSequence
(
)
)
{
aMsg
-
>
WriteInt16
(
kStringSequence
)
;
WriteParam
(
aMsg
aParam
.
GetAsStringSequence
(
)
)
;
}
else
{
aMsg
-
>
WriteInt16
(
kUninitialized
)
;
}
}
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
paramType
*
aResult
)
{
int16_t
type
;
if
(
!
aMsg
-
>
ReadInt16
(
aIter
&
type
)
)
{
return
false
;
}
switch
(
type
)
{
case
kUninitialized
:
aResult
-
>
Uninit
(
)
;
return
true
;
case
kString
:
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
SetAsString
(
)
)
;
case
kStringSequence
:
return
ReadParam
(
aMsg
aIter
&
aResult
-
>
SetAsStringSequence
(
)
)
;
}
return
false
;
}
}
;
template
<
typename
T
>
struct
WebidlEnumSerializer
:
public
ContiguousEnumSerializer
<
T
T
(
0
)
T
:
:
EndGuard_
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
RTCIceCredentialType
>
:
public
WebidlEnumSerializer
<
mozilla
:
:
dom
:
:
RTCIceCredentialType
>
{
}
;
template
<
>
struct
ParamTraits
<
mozilla
:
:
dom
:
:
RTCIceTransportPolicy
>
:
public
WebidlEnumSerializer
<
mozilla
:
:
dom
:
:
RTCIceTransportPolicy
>
{
}
;
static
void
WriteParams
(
Message
*
aMsg
)
{
}
template
<
typename
T0
typename
.
.
.
Tn
>
static
void
WriteParams
(
Message
*
aMsg
const
T0
&
aArg
const
Tn
&
.
.
.
aRemainingArgs
)
{
WriteParam
(
aMsg
aArg
)
;
WriteParams
(
aMsg
aRemainingArgs
.
.
.
)
;
}
static
bool
ReadParams
(
const
Message
*
aMsg
PickleIterator
*
aIter
)
{
return
true
;
}
template
<
typename
T0
typename
.
.
.
Tn
>
static
bool
ReadParams
(
const
Message
*
aMsg
PickleIterator
*
aIter
T0
&
aArg
Tn
&
.
.
.
aRemainingArgs
)
{
return
ReadParam
(
aMsg
aIter
&
aArg
)
&
&
ReadParams
(
aMsg
aIter
aRemainingArgs
.
.
.
)
;
}
#
define
ACCESS_PARAM_FIELD
(
Field
)
aParam
.
Field
#
define
DEFINE_IPC_SERIALIZER_WITH_FIELDS
(
Type
.
.
.
)
\
template
<
>
\
struct
ParamTraits
<
Type
>
{
\
typedef
Type
paramType
;
\
static
void
Write
(
Message
*
aMsg
const
paramType
&
aParam
)
{
\
WriteParams
(
aMsg
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
\
static
bool
Read
(
const
Message
*
aMsg
PickleIterator
*
aIter
\
paramType
*
aResult
)
{
\
paramType
&
aParam
=
*
aResult
;
\
return
ReadParams
(
aMsg
aIter
\
MOZ_FOR_EACH_SEPARATED
(
ACCESS_PARAM_FIELD
(
)
(
)
\
(
__VA_ARGS__
)
)
)
;
\
}
\
}
;
DEFINE_IPC_SERIALIZER_WITH_FIELDS
(
mozilla
:
:
dom
:
:
RTCIceServer
mCredential
mCredentialType
mUrl
mUrls
mUsername
)
DEFINE_IPC_SERIALIZER_WITH_FIELDS
(
mozilla
:
:
CandidateInfo
mCandidate
mUfrag
mDefaultHostRtp
mDefaultPortRtp
mDefaultHostRtcp
mDefaultPortRtcp
)
DEFINE_IPC_SERIALIZER_WITH_FIELDS
(
mozilla
:
:
DtlsDigest
algorithm_
value_
)
}
#
endif
