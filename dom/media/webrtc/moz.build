include
(
"
/
dom
/
media
/
webrtc
/
third_party_build
/
webrtc
.
mozbuild
"
)
with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Audio
/
Video
"
)
with
Files
(
"
PeerIdentity
.
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
common
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
jsep
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
libwebrtcglue
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
transportbridge
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
jsapi
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
with
Files
(
"
sdp
/
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
WebRTC
:
Signaling
"
)
EXPORTS
+
=
[
"
CubebDeviceEnumerator
.
h
"
"
MediaEngine
.
h
"
"
MediaEngineDefault
.
h
"
"
MediaEnginePrefs
.
h
"
"
MediaEngineSource
.
h
"
"
MediaTrackConstraints
.
h
"
"
SineWaveGenerator
.
h
"
]
SOURCES
+
=
[
"
CubebDeviceEnumerator
.
cpp
"
]
if
CONFIG
[
"
MOZ_WEBRTC
"
]
:
EXPORTS
+
=
[
"
MediaEngineRemoteVideoSource
.
h
"
"
MediaEngineWebRTC
.
h
"
"
MediaEngineWebRTCAudio
.
h
"
]
EXPORTS
.
mozilla
.
dom
+
=
[
"
RTCIdentityProviderRegistrar
.
h
"
]
UNIFIED_SOURCES
+
=
[
"
MediaEngineRemoteVideoSource
.
cpp
"
"
MediaEngineWebRTCAudio
.
cpp
"
"
RTCCertificate
.
cpp
"
"
RTCIdentityProviderRegistrar
.
cpp
"
]
SOURCES
+
=
[
"
MediaEngineWebRTC
.
cpp
"
]
LOCAL_INCLUDES
+
=
[
"
.
.
"
"
/
dom
/
base
"
"
/
dom
/
media
"
"
/
dom
/
media
/
webrtc
/
common
"
"
/
dom
/
media
/
webrtc
/
common
/
browser_logging
"
"
/
media
/
libyuv
/
libyuv
/
include
"
"
/
third_party
/
libwebrtc
"
]
if
CONFIG
[
"
MOZ_WEBRTC_SIGNALING
"
]
:
DIRS
+
=
[
"
common
"
"
jsapi
"
"
jsep
"
"
libwebrtcglue
"
"
sdp
"
"
third_party_build
"
"
transportbridge
"
]
if
CONFIG
[
"
CC_TYPE
"
]
=
=
"
clang
-
cl
"
:
CXXFLAGS
+
=
[
"
-
Wno
-
invalid
-
source
-
encoding
"
]
PREPROCESSED_IPDL_SOURCES
+
=
[
"
PMediaTransport
.
ipdl
"
"
PWebrtcGlobal
.
ipdl
"
]
UNIFIED_SOURCES
+
=
[
"
MediaEngineDefault
.
cpp
"
"
MediaEngineSource
.
cpp
"
"
MediaTrackConstraints
.
cpp
"
"
PeerIdentity
.
cpp
"
]
EXPORTS
.
mozilla
+
=
[
"
PeerIdentity
.
h
"
]
EXPORTS
.
mozilla
.
dom
+
=
[
"
RTCCertificate
.
h
"
]
include
(
"
/
ipc
/
chromium
/
chromium
-
config
.
mozbuild
"
)
CXXFLAGS
+
=
[
"
-
Wno
-
error
=
attributes
"
"
-
Wno
-
error
=
shadow
"
]
DEFINES
[
"
TRACING
"
]
=
True
FINAL_LIBRARY
=
"
xul
"
