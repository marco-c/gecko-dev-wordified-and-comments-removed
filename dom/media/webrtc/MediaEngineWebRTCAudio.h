#
ifndef
MediaEngineWebRTCAudio_h
#
define
MediaEngineWebRTCAudio_h
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
AudioPacketizer
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
DeviceInputTrack
.
h
"
#
include
"
MediaEnginePrefs
.
h
"
#
include
"
MediaEngineWebRTC
.
h
"
#
include
"
MediaTrackListener
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
mozilla
{
class
AudioInputProcessing
;
class
AudioProcessingTrack
;
class
WebrtcEnvironmentWrapper
;
class
MediaEngineWebRTCMicrophoneSource
:
public
MediaEngineSource
{
public
:
explicit
MediaEngineWebRTCMicrophoneSource
(
const
MediaDevice
*
aMediaDevice
)
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
Deallocate
(
)
override
;
void
SetTrack
(
const
RefPtr
<
MediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipal
)
override
;
nsresult
Start
(
)
override
;
nsresult
Stop
(
)
override
;
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
override
;
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
void
GetCapabilities
(
dom
:
:
MediaTrackCapabilities
&
aOutCapabilities
)
const
override
;
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
protected
:
~
MediaEngineWebRTCMicrophoneSource
(
)
=
default
;
private
:
nsresult
EvaluateSettings
(
const
NormalizedConstraints
&
aConstraintsUpdate
const
MediaEnginePrefs
&
aInPrefs
MediaEnginePrefs
*
aOutPrefs
const
char
*
*
aOutBadConstraint
)
;
void
ApplySettings
(
const
MediaEnginePrefs
&
aPrefs
)
;
PrincipalHandle
mPrincipal
=
PRINCIPAL_HANDLE_NONE
;
const
RefPtr
<
AudioDeviceInfo
>
mDeviceInfo
;
const
uint32_t
mDeviceMaxChannelCount
;
const
nsMainThreadPtrHandle
<
media
:
:
Refcountable
<
dom
:
:
MediaTrackSettings
>
>
mSettings
;
const
nsMainThreadPtrHandle
<
media
:
:
Refcountable
<
dom
:
:
MediaTrackCapabilities
>
>
mCapabilities
;
MediaEngineSourceState
mState
;
MediaEnginePrefs
mCurrentPrefs
;
RefPtr
<
AudioProcessingTrack
>
mTrack
;
RefPtr
<
AudioInputProcessing
>
mInputProcessing
;
}
;
class
AudioInputProcessing
:
public
AudioDataListener
{
public
:
explicit
AudioInputProcessing
(
uint32_t
aMaxChannelCount
)
;
void
Process
(
AudioProcessingTrack
*
aTrack
GraphTime
aFrom
GraphTime
aTo
AudioSegment
*
aInput
AudioSegment
*
aOutput
)
;
void
ProcessOutputData
(
AudioProcessingTrack
*
aTrack
const
AudioChunk
&
aChunk
)
;
bool
IsVoiceInput
(
MediaTrackGraph
*
aGraph
)
const
override
{
return
!
IsPassThrough
(
aGraph
)
|
|
mPlatformProcessingSetParams
!
=
CUBEB_INPUT_PROCESSING_PARAM_NONE
;
}
void
Start
(
MediaTrackGraph
*
aGraph
)
;
void
Stop
(
MediaTrackGraph
*
aGraph
)
;
void
DeviceChanged
(
MediaTrackGraph
*
aGraph
)
override
;
uint32_t
RequestedInputChannelCount
(
MediaTrackGraph
*
)
const
override
{
return
GetRequestedInputChannelCount
(
)
;
}
cubeb_input_processing_params
RequestedInputProcessingParams
(
MediaTrackGraph
*
aGraph
)
const
override
;
void
Disconnect
(
MediaTrackGraph
*
aGraph
)
override
;
void
NotifySetRequestedInputProcessingParams
(
MediaTrackGraph
*
aGraph
int
aGeneration
cubeb_input_processing_params
aRequestedParams
)
override
;
void
NotifySetRequestedInputProcessingParamsResult
(
MediaTrackGraph
*
aGraph
int
aGeneration
const
Result
<
cubeb_input_processing_params
int
>
&
aResult
)
override
;
void
PacketizeAndProcess
(
AudioProcessingTrack
*
aTrack
const
AudioSegment
&
aSegment
)
;
uint32_t
GetRequestedInputChannelCount
(
)
const
;
bool
IsPassThrough
(
MediaTrackGraph
*
aGraph
)
const
;
void
ApplySettings
(
MediaTrackGraph
*
aGraph
CubebUtils
:
:
AudioDeviceID
aDeviceID
const
MediaEnginePrefs
&
aSettings
)
;
const
webrtc
:
:
AudioProcessing
:
:
Config
&
AppliedConfig
(
MediaTrackGraph
*
aGraph
)
const
;
void
End
(
)
;
TrackTime
NumBufferedFrames
(
MediaTrackGraph
*
aGraph
)
const
;
static
uint32_t
GetPacketSize
(
TrackRate
aRate
)
{
return
webrtc
:
:
AudioProcessing
:
:
GetFrameSize
(
aRate
)
;
}
bool
IsEnded
(
)
const
{
return
mEnded
;
}
bool
HadAECAndDrift
(
)
const
{
return
mHadAECAndDrift
;
}
void
SetEnvironmentWrapper
(
AudioProcessingTrack
*
aTrack
RefPtr
<
WebrtcEnvironmentWrapper
>
aEnvWrapper
)
;
private
:
~
AudioInputProcessing
(
)
=
default
;
webrtc
:
:
AudioProcessing
:
:
Config
ConfigForPrefs
(
MediaTrackGraph
*
aGraph
const
MediaEnginePrefs
&
aPrefs
)
const
;
void
PassThroughChanged
(
MediaTrackGraph
*
aGraph
)
;
void
RequestedInputChannelCountChanged
(
MediaTrackGraph
*
aGraph
CubebUtils
:
:
AudioDeviceID
aDeviceId
)
;
void
EnsurePacketizer
(
AudioProcessingTrack
*
aTrack
)
;
void
EnsureAudioProcessing
(
AudioProcessingTrack
*
aTrack
)
;
void
ResetAudioProcessing
(
MediaTrackGraph
*
aGraph
)
;
void
ApplySettingsInternal
(
MediaTrackGraph
*
aGraph
const
MediaEnginePrefs
&
aSettings
)
;
PrincipalHandle
GetCheckedPrincipal
(
const
AudioSegment
&
aSegment
)
;
UniquePtr
<
webrtc
:
:
AudioProcessing
>
mAudioProcessing
;
bool
mHadAECAndDrift
=
false
;
Maybe
<
AudioPacketizer
<
AudioDataValue
float
>
>
mPacketizerInput
;
MediaEnginePrefs
mSettings
;
webrtc
:
:
AudioProcessing
:
:
Config
mAppliedConfig
;
bool
mPlatformProcessingEnabled
=
false
;
int
mPlatformProcessingSetGeneration
=
-
1
;
Maybe
<
int
>
mPlatformProcessingSetError
;
cubeb_input_processing_params
mPlatformProcessingSetParams
=
CUBEB_INPUT_PROCESSING_PARAM_NONE
;
AlignedFloatBuffer
mOutputBuffer
;
uint32_t
mOutputBufferChannelCount
=
0
;
uint32_t
mOutputBufferFrameCount
=
0
;
AlignedFloatBuffer
mInputBuffer
;
AlignedFloatBuffer
mDeinterleavedBuffer
;
AlignedFloatBuffer
mInputDownmixBuffer
;
AudioSegment
mSegment
;
bool
mEnabled
;
bool
mEnded
;
uint64_t
mPacketCount
;
AudioChunk
mSubChunk
;
AutoTArray
<
AudioDataValue
SilentChannel
:
:
AUDIO_PROCESSING_FRAMES
*
GUESS_AUDIO_CHANNELS
>
mInterleavedBuffer
;
std
:
:
deque
<
std
:
:
pair
<
TrackTime
PrincipalHandle
>
>
mChunksInPacketizer
;
RefPtr
<
WebrtcEnvironmentWrapper
>
mEnvWrapper
;
}
;
class
AudioProcessingTrack
:
public
DeviceInputConsumerTrack
{
RefPtr
<
AudioInputProcessing
>
mInputProcessing
;
explicit
AudioProcessingTrack
(
TrackRate
aSampleRate
)
:
DeviceInputConsumerTrack
(
aSampleRate
)
{
}
~
AudioProcessingTrack
(
)
=
default
;
public
:
void
Destroy
(
)
override
;
void
SetInputProcessing
(
RefPtr
<
AudioInputProcessing
>
aInputProcessing
)
;
static
AudioProcessingTrack
*
Create
(
MediaTrackGraph
*
aGraph
)
;
void
DestroyImpl
(
)
override
;
void
ProcessInput
(
GraphTime
aFrom
GraphTime
aTo
uint32_t
aFlags
)
override
;
uint32_t
NumberOfChannels
(
)
const
override
{
MOZ_DIAGNOSTIC_ASSERT
(
mInputProcessing
"
Must
set
mInputProcessing
before
exposing
to
content
"
)
;
return
mInputProcessing
-
>
GetRequestedInputChannelCount
(
)
;
}
void
NotifyOutputData
(
MediaTrackGraph
*
aGraph
const
AudioChunk
&
aChunk
)
;
AudioProcessingTrack
*
AsAudioProcessingTrack
(
)
override
{
return
this
;
}
private
:
void
SetInputProcessingImpl
(
RefPtr
<
AudioInputProcessing
>
aInputProcessing
)
;
}
;
class
MediaEngineWebRTCAudioCaptureSource
:
public
MediaEngineSource
{
public
:
explicit
MediaEngineWebRTCAudioCaptureSource
(
const
MediaDevice
*
aMediaDevice
)
;
static
nsString
GetUUID
(
)
;
static
nsString
GetGroupId
(
)
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
override
{
return
NS_OK
;
}
nsresult
Deallocate
(
)
override
{
return
NS_OK
;
}
void
SetTrack
(
const
RefPtr
<
MediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipal
)
override
;
nsresult
Start
(
)
override
;
nsresult
Stop
(
)
override
;
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
void
GetCapabilities
(
dom
:
:
MediaTrackCapabilities
&
aOutCapabilities
)
const
override
{
}
protected
:
virtual
~
MediaEngineWebRTCAudioCaptureSource
(
)
=
default
;
}
;
}
#
endif
