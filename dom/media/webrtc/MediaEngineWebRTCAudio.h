#
ifndef
MediaEngineWebRTCAudio_h
#
define
MediaEngineWebRTCAudio_h
#
include
"
AudioPacketizer
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
MediaEngineWebRTC
.
h
"
#
include
"
MediaTrackListener
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
mozilla
{
class
AudioInputProcessing
;
class
AudioInputProcessingPullListener
;
class
MediaEngineWebRTCMicrophoneSource
:
public
MediaEngineSource
{
public
:
MediaEngineWebRTCMicrophoneSource
(
RefPtr
<
AudioDeviceInfo
>
aInfo
const
nsString
&
aDeviceName
const
nsCString
&
aDeviceUUID
const
nsString
&
aDeviceGroup
uint32_t
aMaxChannelCount
bool
aDelayAgnostic
bool
aExtendedFilter
)
;
nsString
GetName
(
)
const
override
;
nsCString
GetUUID
(
)
const
override
;
nsString
GetGroupId
(
)
const
override
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
override
;
nsresult
Deallocate
(
)
override
;
void
SetTrack
(
const
RefPtr
<
SourceMediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipal
)
override
;
nsresult
Start
(
)
override
;
nsresult
Stop
(
)
override
;
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
override
;
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
dom
:
:
MediaSourceEnum
:
:
Microphone
;
}
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
Shutdown
(
)
override
;
protected
:
~
MediaEngineWebRTCMicrophoneSource
(
)
=
default
;
private
:
nsresult
EvaluateSettings
(
const
NormalizedConstraints
&
aConstraintsUpdate
const
MediaEnginePrefs
&
aInPrefs
MediaEnginePrefs
*
aOutPrefs
const
char
*
*
aOutBadConstraint
)
;
void
ApplySettings
(
const
MediaEnginePrefs
&
aPrefs
)
;
void
UpdateAECSettings
(
bool
aEnable
bool
aUseAecMobile
webrtc
:
:
EchoCancellation
:
:
SuppressionLevel
aLevel
)
;
void
UpdateAGCSettings
(
bool
aEnable
webrtc
:
:
GainControl
:
:
Mode
aMode
)
;
void
UpdateHPFSettings
(
bool
aEnable
)
;
void
UpdateNSSettings
(
bool
aEnable
webrtc
:
:
NoiseSuppression
:
:
Level
aLevel
)
;
void
UpdateAPMExtraOptions
(
bool
aExtendedFilter
bool
aDelayAgnostic
)
;
PrincipalHandle
mPrincipal
=
PRINCIPAL_HANDLE_NONE
;
const
RefPtr
<
AudioDeviceInfo
>
mDeviceInfo
;
const
bool
mDelayAgnostic
;
const
bool
mExtendedFilter
;
const
nsString
mDeviceName
;
const
nsCString
mDeviceUUID
;
const
nsString
mDeviceGroup
;
const
uint32_t
mDeviceMaxChannelCount
;
const
nsMainThreadPtrHandle
<
media
:
:
Refcountable
<
dom
:
:
MediaTrackSettings
>
>
mSettings
;
MediaEngineSourceState
mState
;
MediaEnginePrefs
mCurrentPrefs
;
RefPtr
<
SourceMediaTrack
>
mTrack
;
RefPtr
<
AudioInputProcessing
>
mInputProcessing
;
RefPtr
<
AudioInputProcessingPullListener
>
mPullListener
;
}
;
class
AudioInputProcessing
:
public
AudioDataListener
{
public
:
AudioInputProcessing
(
uint32_t
aMaxChannelCount
RefPtr
<
SourceMediaTrack
>
aTrack
const
PrincipalHandle
&
aPrincipalHandle
)
;
void
Pull
(
TrackTime
aEndOfAppendedData
TrackTime
aDesiredTime
)
;
void
NotifyOutputData
(
MediaTrackGraphImpl
*
aGraph
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
;
void
NotifyStarted
(
MediaTrackGraphImpl
*
aGraph
)
override
;
void
NotifyInputData
(
MediaTrackGraphImpl
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
;
bool
IsVoiceInput
(
MediaTrackGraphImpl
*
aGraph
)
const
override
{
return
!
PassThrough
(
aGraph
)
;
}
void
Start
(
)
;
void
Stop
(
)
;
void
DeviceChanged
(
MediaTrackGraphImpl
*
aGraph
)
override
;
uint32_t
RequestedInputChannelCount
(
MediaTrackGraphImpl
*
aGraph
)
override
{
return
GetRequestedInputChannelCount
(
aGraph
)
;
}
void
Disconnect
(
MediaTrackGraphImpl
*
aGraph
)
override
;
template
<
typename
T
>
void
InsertInGraph
(
const
T
*
aBuffer
size_t
aFrames
uint32_t
aChannels
)
;
void
PacketizeAndProcess
(
MediaTrackGraphImpl
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
;
void
SetPassThrough
(
bool
aPassThrough
)
;
uint32_t
GetRequestedInputChannelCount
(
MediaTrackGraphImpl
*
aGraphImpl
)
;
void
SetRequestedInputChannelCount
(
uint32_t
aRequestedInputChannelCount
)
;
bool
PassThrough
(
MediaTrackGraphImpl
*
aGraphImpl
)
const
;
void
UpdateAECSettings
(
bool
aEnable
bool
aUseAecMobile
webrtc
:
:
EchoCancellation
:
:
SuppressionLevel
aLevel
)
;
void
UpdateAGCSettings
(
bool
aEnable
webrtc
:
:
GainControl
:
:
Mode
aMode
)
;
void
UpdateHPFSettings
(
bool
aEnable
)
;
void
UpdateNSSettings
(
bool
aEnable
webrtc
:
:
NoiseSuppression
:
:
Level
aLevel
)
;
void
UpdateAPMExtraOptions
(
bool
aExtendedFilter
bool
aDelayAgnostic
)
;
void
End
(
)
;
private
:
~
AudioInputProcessing
(
)
=
default
;
const
RefPtr
<
SourceMediaTrack
>
mTrack
;
const
UniquePtr
<
webrtc
:
:
AudioProcessing
>
mAudioProcessing
;
UniquePtr
<
AudioPacketizer
<
AudioDataValue
float
>
>
mPacketizerInput
;
UniquePtr
<
AudioPacketizer
<
AudioDataValue
float
>
>
mPacketizerOutput
;
uint32_t
mRequestedInputChannelCount
;
bool
mSkipProcessing
;
AlignedFloatBuffer
mOutputBuffer
;
AlignedFloatBuffer
mInputBuffer
;
AlignedFloatBuffer
mDeinterleavedBuffer
;
AlignedFloatBuffer
mInputDownmixBuffer
;
#
ifdef
DEBUG
GraphTime
mLastCallbackAppendTime
;
#
endif
bool
mLiveFramesAppended
;
bool
mLiveSilenceAppended
;
const
PrincipalHandle
mPrincipal
;
bool
mEnabled
;
bool
mEnded
;
}
;
class
AudioInputProcessingPullListener
:
public
MediaTrackListener
{
public
:
explicit
AudioInputProcessingPullListener
(
RefPtr
<
AudioInputProcessing
>
aInputProcessing
)
:
mInputProcessing
(
std
:
:
move
(
aInputProcessing
)
)
{
MOZ_COUNT_CTOR
(
AudioInputProcessingPullListener
)
;
}
~
AudioInputProcessingPullListener
(
)
{
MOZ_COUNT_DTOR
(
AudioInputProcessingPullListener
)
;
}
void
NotifyPull
(
MediaTrackGraph
*
aGraph
TrackTime
aEndOfAppendedData
TrackTime
aDesiredTime
)
override
{
mInputProcessing
-
>
Pull
(
aEndOfAppendedData
aDesiredTime
)
;
}
const
RefPtr
<
AudioInputProcessing
>
mInputProcessing
;
}
;
class
MediaEngineWebRTCAudioCaptureSource
:
public
MediaEngineSource
{
public
:
explicit
MediaEngineWebRTCAudioCaptureSource
(
const
char
*
aUuid
)
{
}
nsString
GetName
(
)
const
override
;
nsCString
GetUUID
(
)
const
override
;
nsString
GetGroupId
(
)
const
override
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
uint64_t
aWindowID
const
char
*
*
aOutBadConstraint
)
override
{
return
NS_OK
;
}
nsresult
Deallocate
(
)
override
{
return
NS_OK
;
}
void
SetTrack
(
const
RefPtr
<
SourceMediaTrack
>
&
aTrack
const
PrincipalHandle
&
aPrincipal
)
override
;
nsresult
Start
(
)
override
;
nsresult
Stop
(
)
override
;
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
char
*
*
aOutBadConstraint
)
override
;
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
dom
:
:
MediaSourceEnum
:
:
AudioCapture
;
}
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
protected
:
virtual
~
MediaEngineWebRTCAudioCaptureSource
(
)
=
default
;
}
;
}
#
endif
