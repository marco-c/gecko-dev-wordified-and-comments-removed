#
ifndef
MEDIAENGINEWEBRTC_H_
#
define
MEDIAENGINEWEBRTC_H_
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
CubebUtils
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
MediaEngine
.
h
"
#
include
"
MediaEnginePrefs
.
h
"
#
include
"
MediaEngineSource
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
NullTransport
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
CubebDeviceEnumerator
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prcvar
.
h
"
#
include
"
prthread
.
h
"
#
undef
FF
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture_defines
.
h
"
namespace
mozilla
{
class
MediaEngineWebRTC
:
public
MediaEngine
{
typedef
MediaEngine
Super
;
public
:
explicit
MediaEngineWebRTC
(
MediaEnginePrefs
&
aPrefs
)
;
virtual
void
SetFakeDeviceChangeEvents
(
)
override
;
void
Shutdown
(
)
override
;
bool
SupportsDuplex
(
)
;
void
EnumerateDevices
(
uint64_t
aWindowId
dom
:
:
MediaSourceEnum
MediaSinkEnum
nsTArray
<
RefPtr
<
MediaDevice
>
>
*
)
override
;
private
:
~
MediaEngineWebRTC
(
)
=
default
;
void
EnumerateVideoDevices
(
uint64_t
aWindowId
camera
:
:
CaptureEngine
aCapEngine
nsTArray
<
RefPtr
<
MediaDevice
>
>
*
)
;
void
EnumerateMicrophoneDevices
(
uint64_t
aWindowId
nsTArray
<
RefPtr
<
MediaDevice
>
>
*
)
;
void
EnumerateSpeakerDevices
(
uint64_t
aWindowId
nsTArray
<
RefPtr
<
MediaDevice
>
>
*
)
;
Mutex
mMutex
;
RefPtr
<
mozilla
:
:
CubebDeviceEnumerator
>
mEnumerator
;
const
bool
mDelayAgnostic
;
const
bool
mExtendedFilter
;
bool
mHasTabVideoSource
;
}
;
}
#
endif
