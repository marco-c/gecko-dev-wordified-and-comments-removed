#
ifndef
MEDIAENGINEWEBRTC_H_
#
define
MEDIAENGINEWEBRTC_H_
#
include
"
prcvar
.
h
"
#
include
"
prthread
.
h
"
#
include
"
nsIThread
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
mozilla
/
dom
/
File
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
ipc
/
IPCMessageUtils
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
MediaEngineCameraVideoSource
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
AudioSegment
.
h
"
#
include
"
StreamTracks
.
h
"
#
include
"
MediaStreamGraph
.
h
"
#
include
"
cubeb
/
cubeb
.
h
"
#
include
"
CubebUtils
.
h
"
#
include
"
AudioPacketizer
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
webrtc
/
common
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_codec
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_hardware
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_network
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_audio_processing
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_volume_control
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_external_media
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_audio_processing
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
undef
FF
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture_defines
.
h
"
#
include
"
NullTransport
.
h
"
#
include
"
AudioOutputObserver
.
h
"
namespace
mozilla
{
class
MediaEngineWebRTCAudioCaptureSource
:
public
MediaEngineAudioSource
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
explicit
MediaEngineWebRTCAudioCaptureSource
(
const
char
*
aUuid
)
:
MediaEngineAudioSource
(
kReleased
)
{
}
void
GetName
(
nsAString
&
aName
)
const
override
;
void
GetUUID
(
nsACString
&
aUUID
)
const
override
;
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
AllocationHandle
*
*
aOutHandle
const
char
*
*
aOutBadConstraint
)
override
{
*
aOutHandle
=
nullptr
;
return
NS_OK
;
}
nsresult
Deallocate
(
AllocationHandle
*
aHandle
)
override
{
MOZ_ASSERT
(
!
aHandle
)
;
return
NS_OK
;
}
nsresult
Start
(
SourceMediaStream
*
aMediaStream
TrackID
aId
const
PrincipalHandle
&
aPrincipalHandle
)
override
;
nsresult
Stop
(
SourceMediaStream
*
aMediaStream
TrackID
aId
)
override
;
nsresult
Restart
(
AllocationHandle
*
aHandle
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
override
;
void
SetDirectListeners
(
bool
aDirect
)
override
{
}
void
NotifyOutputData
(
MediaStreamGraph
*
aGraph
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
{
}
void
DeviceChanged
(
)
override
{
}
void
NotifyInputData
(
MediaStreamGraph
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
{
}
void
NotifyPull
(
MediaStreamGraph
*
aGraph
SourceMediaStream
*
aSource
TrackID
aID
StreamTime
aDesiredTime
const
PrincipalHandle
&
aPrincipalHandle
)
override
{
}
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
dom
:
:
MediaSourceEnum
:
:
AudioCapture
;
}
bool
IsFake
(
)
override
{
return
false
;
}
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
NormalizedConstraintSet
*
>
&
aConstraintSets
const
nsString
&
aDeviceId
)
const
override
;
protected
:
virtual
~
MediaEngineWebRTCAudioCaptureSource
(
)
{
}
nsCString
mUUID
;
}
;
class
AudioInput
{
public
:
explicit
AudioInput
(
webrtc
:
:
VoiceEngine
*
aVoiceEngine
)
:
mVoiceEngine
(
aVoiceEngine
)
{
}
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AudioInput
)
virtual
int
GetNumOfRecordingDevices
(
int
&
aDevices
)
=
0
;
virtual
int
GetRecordingDeviceName
(
int
aIndex
char
(
&
aStrNameUTF8
)
[
128
]
char
aStrGuidUTF8
[
128
]
)
=
0
;
virtual
int
GetRecordingDeviceStatus
(
bool
&
aIsAvailable
)
=
0
;
virtual
void
StartRecording
(
SourceMediaStream
*
aStream
AudioDataListener
*
aListener
)
=
0
;
virtual
void
StopRecording
(
SourceMediaStream
*
aStream
)
=
0
;
virtual
int
SetRecordingDevice
(
int
aIndex
)
=
0
;
protected
:
virtual
~
AudioInput
(
)
{
}
webrtc
:
:
VoiceEngine
*
mVoiceEngine
;
}
;
class
AudioInputCubeb
final
:
public
AudioInput
{
public
:
explicit
AudioInputCubeb
(
webrtc
:
:
VoiceEngine
*
aVoiceEngine
int
aIndex
=
0
)
:
AudioInput
(
aVoiceEngine
)
mSelectedDevice
(
aIndex
)
mInUseCount
(
0
)
{
if
(
!
mDeviceIndexes
)
{
mDeviceIndexes
=
new
nsTArray
<
int
>
;
mDeviceNames
=
new
nsTArray
<
nsCString
>
;
mDefaultDevice
=
-
1
;
}
}
static
void
CleanupGlobalData
(
)
{
cubeb_device_collection_destroy
(
CubebUtils
:
:
GetCubebContext
(
)
&
mDevices
)
;
delete
mDeviceIndexes
;
mDeviceIndexes
=
nullptr
;
delete
mDeviceNames
;
mDeviceNames
=
nullptr
;
}
int
GetNumOfRecordingDevices
(
int
&
aDevices
)
{
#
ifdef
MOZ_WIDGET_ANDROID
aDevices
=
1
;
#
else
UpdateDeviceList
(
)
;
aDevices
=
mDeviceIndexes
-
>
Length
(
)
;
#
endif
return
0
;
}
static
int32_t
DeviceIndex
(
int
aIndex
)
{
if
(
aIndex
=
=
-
1
)
{
if
(
mDefaultDevice
=
=
-
1
)
{
aIndex
=
0
;
}
else
{
aIndex
=
mDefaultDevice
;
}
}
MOZ_ASSERT
(
mDeviceIndexes
)
;
if
(
aIndex
<
0
|
|
aIndex
>
=
(
int
)
mDeviceIndexes
-
>
Length
(
)
)
{
return
-
1
;
}
return
(
*
mDeviceIndexes
)
[
aIndex
]
;
}
static
StaticMutex
&
Mutex
(
)
{
return
sMutex
;
}
static
bool
GetDeviceID
(
int
aDeviceIndex
CubebUtils
:
:
AudioDeviceID
&
aID
)
{
sMutex
.
AssertCurrentThreadOwns
(
)
;
#
ifdef
MOZ_WIDGET_ANDROID
aID
=
nullptr
;
return
true
;
#
else
int
dev_index
=
DeviceIndex
(
aDeviceIndex
)
;
if
(
dev_index
!
=
-
1
)
{
aID
=
mDevices
.
device
[
dev_index
]
.
devid
;
return
true
;
}
return
false
;
#
endif
}
int
GetRecordingDeviceName
(
int
aIndex
char
(
&
aStrNameUTF8
)
[
128
]
char
aStrGuidUTF8
[
128
]
)
{
#
ifdef
MOZ_WIDGET_ANDROID
aStrNameUTF8
[
0
]
=
'
\
0
'
;
aStrGuidUTF8
[
0
]
=
'
\
0
'
;
#
else
int32_t
devindex
=
DeviceIndex
(
aIndex
)
;
if
(
mDevices
.
count
=
=
0
|
|
devindex
<
0
)
{
return
1
;
}
SprintfLiteral
(
aStrNameUTF8
"
%
s
%
s
"
aIndex
=
=
-
1
?
"
default
:
"
:
"
"
mDevices
.
device
[
devindex
]
.
friendly_name
)
;
aStrGuidUTF8
[
0
]
=
'
\
0
'
;
#
endif
return
0
;
}
int
GetRecordingDeviceStatus
(
bool
&
aIsAvailable
)
{
aIsAvailable
=
true
;
return
0
;
}
static
int
GetDeviceMaxChannels
(
int
aDeviceIndex
uint32_t
&
aChannels
)
{
#
ifdef
MOZ_WIDGET_ANDROID
aChannels
=
1
;
#
else
int32_t
devindex
=
DeviceIndex
(
aDeviceIndex
)
;
if
(
mDevices
.
count
=
=
0
|
|
devindex
<
0
)
{
return
1
;
}
aChannels
=
mDevices
.
device
[
devindex
]
.
max_channels
;
#
endif
return
0
;
}
void
StartRecording
(
SourceMediaStream
*
aStream
AudioDataListener
*
aListener
)
{
#
ifdef
MOZ_WIDGET_ANDROID
MOZ_ASSERT
(
mDevices
.
count
=
=
0
)
;
#
else
MOZ_ASSERT
(
mDevices
.
count
>
0
)
;
#
endif
if
(
mInUseCount
=
=
0
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEExternalMedia
>
ptrVoEXMedia
;
ptrVoEXMedia
=
webrtc
:
:
VoEExternalMedia
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
ptrVoEXMedia
)
{
ptrVoEXMedia
-
>
SetExternalRecordingStatus
(
true
)
;
}
mAnyInUse
=
true
;
}
mInUseCount
+
+
;
aStream
-
>
OpenAudioInput
(
mSelectedDevice
aListener
)
;
}
void
StopRecording
(
SourceMediaStream
*
aStream
)
{
aStream
-
>
CloseAudioInput
(
)
;
if
(
-
-
mInUseCount
=
=
0
)
{
mAnyInUse
=
false
;
}
}
int
SetRecordingDevice
(
int
aIndex
)
{
mSelectedDevice
=
aIndex
;
return
0
;
}
protected
:
~
AudioInputCubeb
(
)
{
MOZ_RELEASE_ASSERT
(
mInUseCount
=
=
0
)
;
}
private
:
void
UpdateDeviceList
(
)
;
int
mSelectedDevice
;
uint32_t
mInUseCount
;
static
nsTArray
<
int
>
*
mDeviceIndexes
;
static
int
mDefaultDevice
;
static
nsTArray
<
nsCString
>
*
mDeviceNames
;
static
cubeb_device_collection
mDevices
;
static
bool
mAnyInUse
;
static
StaticMutex
sMutex
;
}
;
class
AudioInputWebRTC
final
:
public
AudioInput
{
public
:
explicit
AudioInputWebRTC
(
webrtc
:
:
VoiceEngine
*
aVoiceEngine
)
:
AudioInput
(
aVoiceEngine
)
{
}
int
GetNumOfRecordingDevices
(
int
&
aDevices
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEHardware
>
ptrVoEHw
;
ptrVoEHw
=
webrtc
:
:
VoEHardware
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
!
ptrVoEHw
)
{
return
1
;
}
return
ptrVoEHw
-
>
GetNumOfRecordingDevices
(
aDevices
)
;
}
int
GetRecordingDeviceName
(
int
aIndex
char
(
&
aStrNameUTF8
)
[
128
]
char
aStrGuidUTF8
[
128
]
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEHardware
>
ptrVoEHw
;
ptrVoEHw
=
webrtc
:
:
VoEHardware
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
!
ptrVoEHw
)
{
return
1
;
}
return
ptrVoEHw
-
>
GetRecordingDeviceName
(
aIndex
aStrNameUTF8
aStrGuidUTF8
)
;
}
int
GetRecordingDeviceStatus
(
bool
&
aIsAvailable
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEHardware
>
ptrVoEHw
;
ptrVoEHw
=
webrtc
:
:
VoEHardware
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
!
ptrVoEHw
)
{
return
1
;
}
ptrVoEHw
-
>
GetRecordingDeviceStatus
(
aIsAvailable
)
;
return
0
;
}
void
StartRecording
(
SourceMediaStream
*
aStream
AudioDataListener
*
aListener
)
{
}
void
StopRecording
(
SourceMediaStream
*
aStream
)
{
}
int
SetRecordingDevice
(
int
aIndex
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEHardware
>
ptrVoEHw
;
ptrVoEHw
=
webrtc
:
:
VoEHardware
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
!
ptrVoEHw
)
{
return
1
;
}
return
ptrVoEHw
-
>
SetRecordingDevice
(
aIndex
)
;
}
protected
:
~
AudioInputWebRTC
(
)
{
}
}
;
class
WebRTCAudioDataListener
:
public
AudioDataListener
{
protected
:
virtual
~
WebRTCAudioDataListener
(
)
{
}
public
:
explicit
WebRTCAudioDataListener
(
MediaEngineAudioSource
*
aAudioSource
)
:
mMutex
(
"
WebRTCAudioDataListener
"
)
mAudioSource
(
aAudioSource
)
{
}
virtual
void
NotifyOutputData
(
MediaStreamGraph
*
aGraph
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mAudioSource
)
{
mAudioSource
-
>
NotifyOutputData
(
aGraph
aBuffer
aFrames
aRate
aChannels
)
;
}
}
virtual
void
NotifyInputData
(
MediaStreamGraph
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mAudioSource
)
{
mAudioSource
-
>
NotifyInputData
(
aGraph
aBuffer
aFrames
aRate
aChannels
)
;
}
}
virtual
void
DeviceChanged
(
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
mAudioSource
)
{
mAudioSource
-
>
DeviceChanged
(
)
;
}
}
void
Shutdown
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mAudioSource
=
nullptr
;
}
private
:
Mutex
mMutex
;
RefPtr
<
MediaEngineAudioSource
>
mAudioSource
;
}
;
class
MediaEngineWebRTCMicrophoneSource
:
public
MediaEngineAudioSource
public
webrtc
:
:
VoEMediaProcess
{
typedef
MediaEngineAudioSource
Super
;
public
:
MediaEngineWebRTCMicrophoneSource
(
webrtc
:
:
VoiceEngine
*
aVoiceEnginePtr
mozilla
:
:
AudioInput
*
aAudioInput
int
aIndex
const
char
*
name
const
char
*
uuid
)
;
void
GetName
(
nsAString
&
aName
)
const
override
;
void
GetUUID
(
nsACString
&
aUUID
)
const
override
;
nsresult
Deallocate
(
AllocationHandle
*
aHandle
)
override
;
nsresult
Start
(
SourceMediaStream
*
aStream
TrackID
aID
const
PrincipalHandle
&
aPrincipalHandle
)
override
;
nsresult
Stop
(
SourceMediaStream
*
aSource
TrackID
aID
)
override
;
nsresult
Restart
(
AllocationHandle
*
aHandle
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
override
;
void
SetDirectListeners
(
bool
aHasDirectListeners
)
override
{
}
;
void
NotifyPull
(
MediaStreamGraph
*
aGraph
SourceMediaStream
*
aSource
TrackID
aId
StreamTime
aDesiredTime
const
PrincipalHandle
&
aPrincipalHandle
)
override
;
void
NotifyOutputData
(
MediaStreamGraph
*
aGraph
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
;
void
NotifyInputData
(
MediaStreamGraph
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
;
void
DeviceChanged
(
)
override
;
bool
IsFake
(
)
override
{
return
false
;
}
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
dom
:
:
MediaSourceEnum
:
:
Microphone
;
}
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
NormalizedConstraintSet
*
>
&
aConstraintSets
const
nsString
&
aDeviceId
)
const
override
;
virtual
void
Process
(
int
channel
webrtc
:
:
ProcessingTypes
type
int16_t
audio10ms
[
]
size_t
length
int
samplingFreq
bool
isStereo
)
override
;
void
Shutdown
(
)
override
;
NS_DECL_THREADSAFE_ISUPPORTS
protected
:
~
MediaEngineWebRTCMicrophoneSource
(
)
{
}
private
:
nsresult
UpdateSingleSource
(
const
AllocationHandle
*
aHandle
const
NormalizedConstraints
&
aNetConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
override
;
void
SetLastPrefs
(
const
MediaEnginePrefs
&
aPrefs
)
;
bool
AllocChannel
(
)
;
void
FreeChannel
(
)
;
bool
InitEngine
(
)
;
void
DeInitEngine
(
)
;
bool
PassThrough
(
)
{
return
mSkipProcessing
;
}
template
<
typename
T
>
void
InsertInGraph
(
const
T
*
aBuffer
size_t
aFrames
uint32_t
aChannels
)
;
void
PacketizeAndProcess
(
MediaStreamGraph
*
aGraph
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
;
webrtc
:
:
VoiceEngine
*
mVoiceEngine
;
RefPtr
<
mozilla
:
:
AudioInput
>
mAudioInput
;
RefPtr
<
WebRTCAudioDataListener
>
mListener
;
static
int
sChannelsOpen
;
static
ScopedCustomReleasePtr
<
webrtc
:
:
VoEBase
>
mVoEBase
;
static
ScopedCustomReleasePtr
<
webrtc
:
:
VoEExternalMedia
>
mVoERender
;
static
ScopedCustomReleasePtr
<
webrtc
:
:
VoENetwork
>
mVoENetwork
;
static
ScopedCustomReleasePtr
<
webrtc
:
:
VoEAudioProcessing
>
mVoEProcessing
;
nsAutoPtr
<
AudioPacketizer
<
AudioDataValue
int16_t
>
>
mPacketizer
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEExternalMedia
>
mVoERenderListener
;
Monitor
mMonitor
;
nsTArray
<
RefPtr
<
SourceMediaStream
>
>
mSources
;
nsTArray
<
PrincipalHandle
>
mPrincipalHandles
;
int
mCapIndex
;
int
mChannel
;
MOZ_INIT_OUTSIDE_CTOR
TrackID
mTrackID
;
bool
mStarted
;
nsString
mDeviceName
;
nsCString
mDeviceUUID
;
int32_t
mSampleFrequency
;
uint64_t
mTotalFrames
;
uint64_t
mLastLogFrames
;
int32_t
mPlayoutDelay
;
NullTransport
*
mNullTransport
;
nsTArray
<
int16_t
>
mInputBuffer
;
bool
mSkipProcessing
;
MediaEnginePrefs
mLastPrefs
;
}
;
class
MediaEngineWebRTC
:
public
MediaEngine
{
typedef
MediaEngine
Super
;
public
:
explicit
MediaEngineWebRTC
(
MediaEnginePrefs
&
aPrefs
)
;
virtual
void
SetFakeDeviceChangeEvents
(
)
override
;
void
Shutdown
(
)
override
;
bool
SupportsDuplex
(
)
;
void
EnumerateVideoDevices
(
dom
:
:
MediaSourceEnum
nsTArray
<
RefPtr
<
MediaEngineVideoSource
>
>
*
)
override
;
void
EnumerateAudioDevices
(
dom
:
:
MediaSourceEnum
nsTArray
<
RefPtr
<
MediaEngineAudioSource
>
>
*
)
override
;
private
:
~
MediaEngineWebRTC
(
)
{
gFarendObserver
=
nullptr
;
}
nsCOMPtr
<
nsIThread
>
mThread
;
Mutex
mMutex
;
webrtc
:
:
VoiceEngine
*
mVoiceEngine
;
webrtc
:
:
Config
mConfig
;
RefPtr
<
mozilla
:
:
AudioInput
>
mAudioInput
;
bool
mFullDuplex
;
bool
mExtendedFilter
;
bool
mDelayAgnostic
;
bool
mHasTabVideoSource
;
nsRefPtrHashtable
<
nsStringHashKey
MediaEngineVideoSource
>
mVideoSources
;
nsRefPtrHashtable
<
nsStringHashKey
MediaEngineAudioSource
>
mAudioSources
;
}
;
}
#
endif
