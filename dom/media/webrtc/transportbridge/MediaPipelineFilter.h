#
ifndef
mediapipelinefilter_h__
#
define
mediapipelinefilter_h__
#
include
<
cstddef
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
webrtc
{
struct
RTPHeader
;
}
namespace
mozilla
{
class
MediaPipelineFilter
{
public
:
MediaPipelineFilter
(
)
=
default
;
explicit
MediaPipelineFilter
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
aExtMap
)
;
bool
Filter
(
const
webrtc
:
:
RTPHeader
&
header
)
;
void
AddRemoteSSRC
(
uint32_t
ssrc
)
;
void
SetRemoteMediaStreamId
(
const
Maybe
<
std
:
:
string
>
&
aMid
)
;
void
AddUniqueReceivePT
(
uint8_t
payload_type
)
;
void
AddDuplicateReceivePT
(
uint8_t
payload_type
)
;
void
Update
(
const
MediaPipelineFilter
&
filter_update
bool
signalingStable
)
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
GetExtmap
(
)
const
{
return
mExtMap
;
}
private
:
std
:
:
set
<
uint32_t
>
remote_ssrc_set_
;
std
:
:
set
<
uint8_t
>
receive_payload_type_set_
;
std
:
:
set
<
uint8_t
>
duplicate_payload_type_set_
;
Maybe
<
std
:
:
string
>
mRemoteMid
;
std
:
:
set
<
uint32_t
>
mRemoteMidBindings
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
mExtMap
;
}
;
}
#
endif
