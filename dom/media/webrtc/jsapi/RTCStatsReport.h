#
ifndef
RTCStatsReport_h_
#
define
RTCStatsReport_h_
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
mozilla
/
dom
/
AutoEntryScript
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceService
.
h
"
#
include
"
mozilla
/
dom
/
RTCStatsReportBinding
.
h
"
#
include
"
mozilla
/
dom
/
ToJSValue
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
prtime
.
h
"
namespace
mozilla
{
extern
TimeStamp
WebrtcSystemTimeBase
(
)
;
namespace
dom
{
class
RTCStatsTimestampMaker
{
public
:
RTCStatsTimestampMaker
(
)
;
explicit
RTCStatsTimestampMaker
(
nsPIDOMWindowInner
*
aWindow
)
;
DOMHighResTimeStamp
GetNow
(
)
const
;
webrtc
:
:
Timestamp
GetNowRealtime
(
)
const
;
webrtc
:
:
Timestamp
ConvertMozTimeToRealtime
(
TimeStamp
aMozTime
)
const
;
webrtc
:
:
Timestamp
ConvertRealtimeTo1Jan1970
(
webrtc
:
:
Timestamp
aRealtime
)
const
;
DOMHighResTimeStamp
ConvertNtpToDomTime
(
webrtc
:
:
Timestamp
aNtpTime
)
const
;
DOMHighResTimeStamp
ReduceRealtimePrecision
(
webrtc
:
:
Timestamp
aRealtime
)
const
;
const
uint64_t
mRandomTimelineSeed
;
const
TimeStamp
mStartRealtime
;
const
bool
mCrossOriginIsolated
;
const
DOMHighResTimeStamp
mStartWallClockRaw
;
}
;
typedef
MozPromise
<
UniquePtr
<
RTCStatsCollection
>
nsresult
true
>
RTCStatsPromise
;
typedef
MozPromise
<
UniquePtr
<
RTCStatsReportInternal
>
nsresult
true
>
RTCStatsReportPromise
;
class
RTCStatsReport
final
:
public
nsWrapperCache
{
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
RTCStatsReport
)
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS
(
RTCStatsReport
)
explicit
RTCStatsReport
(
nsPIDOMWindowInner
*
aParent
)
;
static
already_AddRefed
<
RTCStatsReport
>
Constructor
(
const
GlobalObject
&
aGlobal
)
;
void
Incorporate
(
RTCStatsCollection
&
aStats
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
~
RTCStatsReport
(
)
=
default
;
void
Set
(
const
nsAString
&
aKey
JS
:
:
Handle
<
JSObject
*
>
aValue
ErrorResult
&
aRv
)
;
template
<
typename
T
>
nsresult
SetRTCStats
(
Sequence
<
T
>
&
aValues
)
{
for
(
T
&
value
:
aValues
)
{
nsresult
rv
=
SetRTCStats
(
value
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
return
NS_OK
;
}
template
<
typename
T
>
nsresult
SetRTCStats
(
T
&
aValue
)
{
static_assert
(
std
:
:
is_base_of
<
RTCStats
T
>
:
:
value
"
SetRTCStats
is
for
setting
RTCStats
only
"
)
;
if
(
!
aValue
.
mId
.
WasPassed
(
)
)
{
return
NS_OK
;
}
const
nsString
key
(
aValue
.
mId
.
Value
(
)
)
;
AutoEntryScript
aes
(
mParent
-
>
AsGlobal
(
)
-
>
GetGlobalJSObject
(
)
"
RTCStatsReport
:
:
SetRTCStats
"
)
;
JSContext
*
cx
=
aes
.
cx
(
)
;
JS
:
:
Rooted
<
JS
:
:
Value
>
val
(
cx
)
;
if
(
!
ToJSValue
(
cx
std
:
:
forward
<
T
>
(
aValue
)
&
val
)
)
{
return
NS_ERROR_FAILURE
;
}
JS
:
:
Rooted
<
JSObject
*
>
jsObject
(
cx
&
val
.
toObject
(
)
)
;
ErrorResult
rv
;
Set
(
key
jsObject
rv
)
;
return
rv
.
StealNSResult
(
)
;
}
nsCOMPtr
<
nsPIDOMWindowInner
>
mParent
;
}
;
void
MergeStats
(
UniquePtr
<
dom
:
:
RTCStatsCollection
>
aFromStats
dom
:
:
RTCStatsCollection
*
aIntoStats
)
;
void
FlattenStats
(
nsTArray
<
UniquePtr
<
dom
:
:
RTCStatsCollection
>
>
aFromStats
dom
:
:
RTCStatsCollection
*
aIntoStats
)
;
}
}
#
endif
