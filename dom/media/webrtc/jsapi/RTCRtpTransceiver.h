#
ifndef
_TRANSCEIVERIMPL_H_
#
define
_TRANSCEIVERIMPL_H_
#
include
<
string
>
#
include
"
mozilla
/
dom
/
RTCRtpCapabilitiesBinding
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrack
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
jsep
/
JsepSession
.
h
"
#
include
"
transport
/
transportlayer
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpTransceiverBinding
.
h
"
#
include
"
RTCStatsReport
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
PeerIdentity
;
class
MediaSessionConduit
;
class
VideoSessionConduit
;
class
AudioSessionConduit
;
struct
AudioCodecConfig
;
class
VideoCodecConfig
;
class
MediaPipelineTransmit
;
class
MediaPipeline
;
class
MediaPipelineFilter
;
class
MediaTransportHandler
;
class
RTCStatsIdGenerator
;
class
WebrtcCallWrapper
;
class
JsepTrackNegotiatedDetails
;
class
PeerConnectionImpl
;
enum
class
PrincipalPrivacy
:
uint8_t
;
namespace
dom
{
class
RTCDtlsTransport
;
class
RTCDTMFSender
;
class
RTCRtpTransceiver
;
struct
RTCRtpSourceEntry
;
class
RTCRtpReceiver
;
class
RTCRtpSender
;
class
RTCRtpTransceiver
:
public
nsISupports
public
nsWrapperCache
{
public
:
RTCRtpTransceiver
(
nsPIDOMWindowInner
*
aWindow
bool
aPrivacyNeeded
PeerConnectionImpl
*
aPc
MediaTransportHandler
*
aTransportHandler
JsepSession
*
aJsepSession
const
std
:
:
string
&
aTransceiverId
bool
aIsVideo
nsISerialEventTarget
*
aStsThread
MediaStreamTrack
*
aSendTrack
WebrtcCallWrapper
*
aCallWrapper
RTCStatsIdGenerator
*
aIdGenerator
)
;
void
Init
(
const
RTCRtpTransceiverInit
&
aInit
ErrorResult
&
aRv
)
;
bool
IsValid
(
)
const
{
return
!
!
mConduit
;
}
nsresult
UpdateTransport
(
)
;
nsresult
UpdateConduit
(
)
;
void
UpdatePrincipalPrivacy
(
PrincipalPrivacy
aPrivacy
)
;
void
ResetSync
(
)
;
nsresult
SyncWithMatchingVideoConduits
(
nsTArray
<
RefPtr
<
RTCRtpTransceiver
>
>
&
transceivers
)
;
void
Close
(
)
;
void
BreakCycles
(
)
;
void
Unlink
(
)
;
bool
ConduitHasPluginID
(
uint64_t
aPluginID
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
RTCRtpReceiver
*
Receiver
(
)
const
{
return
mReceiver
;
}
RTCRtpSender
*
Sender
(
)
const
{
return
mSender
;
}
RTCDtlsTransport
*
GetDtlsTransport
(
)
const
{
return
mDtlsTransport
;
}
void
GetKind
(
nsAString
&
aKind
)
const
;
void
GetMid
(
nsAString
&
aMid
)
const
;
RTCRtpTransceiverDirection
Direction
(
)
const
{
if
(
mStopping
)
{
return
RTCRtpTransceiverDirection
:
:
Stopped
;
}
return
mDirection
;
}
void
SetDirection
(
RTCRtpTransceiverDirection
aDirection
ErrorResult
&
aRv
)
;
Nullable
<
RTCRtpTransceiverDirection
>
GetCurrentDirection
(
)
{
if
(
mStopped
)
{
return
RTCRtpTransceiverDirection
:
:
Stopped
;
}
return
mCurrentDirection
;
}
void
Stop
(
ErrorResult
&
aRv
)
;
void
SetCodecPreferences
(
const
nsTArray
<
RTCRtpCodec
>
&
aCodecs
ErrorResult
&
aRv
)
;
void
SetDirectionInternal
(
RTCRtpTransceiverDirection
aDirection
)
;
bool
HasBeenUsedToSend
(
)
const
{
return
mHasBeenUsedToSend
;
}
bool
CanSendDTMF
(
)
const
;
bool
Stopped
(
)
const
{
return
mStopped
;
}
bool
Stopping
(
)
const
{
return
mStopping
;
}
void
SyncToJsep
(
JsepSession
&
aSession
)
const
;
void
SyncFromJsep
(
const
JsepSession
&
aSession
)
;
std
:
:
string
GetMidAscii
(
)
const
;
void
SetDtlsTransport
(
RTCDtlsTransport
*
aDtlsTransport
)
;
void
SaveStateForRollback
(
)
;
void
RollbackToStableDtlsTransport
(
)
;
std
:
:
string
GetTransportId
(
)
const
{
return
mJsepTransceiver
.
mTransport
.
mTransportId
;
}
JsepTransceiver
&
GetJsepTransceiver
(
)
{
return
mJsepTransceiver
;
}
bool
IsVideo
(
)
const
;
bool
IsSending
(
)
const
;
bool
IsReceiving
(
)
const
;
bool
ShouldRemove
(
)
const
;
Maybe
<
const
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
&
>
GetNegotiatedSendCodecs
(
)
const
;
Maybe
<
const
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
&
>
GetNegotiatedRecvCodecs
(
)
const
;
struct
PayloadTypes
{
Maybe
<
int
>
mSendPayloadType
;
Maybe
<
int
>
mRecvPayloadType
;
}
;
using
ActivePayloadTypesPromise
=
MozPromise
<
PayloadTypes
nsresult
true
>
;
RefPtr
<
ActivePayloadTypesPromise
>
GetActivePayloadTypes
(
)
const
;
MediaSessionConduit
*
GetConduit
(
)
const
{
return
mConduit
;
}
const
std
:
:
string
&
GetJsepTransceiverId
(
)
const
{
return
mTransceiverId
;
}
void
SetRemovedFromPc
(
)
{
mHandlingUnlink
=
true
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
RTCRtpTransceiver
)
static
void
NegotiatedDetailsToAudioCodecConfigs
(
const
JsepTrackNegotiatedDetails
&
aDetails
std
:
:
vector
<
AudioCodecConfig
>
*
aConfigs
)
;
static
void
NegotiatedDetailsToVideoCodecConfigs
(
const
JsepTrackNegotiatedDetails
&
aDetails
std
:
:
vector
<
VideoCodecConfig
>
*
aConfigs
)
;
void
ChainToDomPromiseWithCodecStats
(
nsTArray
<
RefPtr
<
RTCStatsPromise
>
>
aStats
const
RefPtr
<
Promise
>
&
aDomPromise
)
;
static
RefPtr
<
RTCStatsPromise
>
ApplyCodecStats
(
nsTArray
<
RTCCodecStats
>
aCodecStats
nsTArray
<
std
:
:
tuple
<
RTCRtpTransceiver
*
RefPtr
<
RTCStatsPromise
:
:
AllPromiseType
>
>
>
aTransceiverStatsPromises
)
;
Canonical
<
std
:
:
string
>
&
CanonicalMid
(
)
{
return
mMid
;
}
Canonical
<
std
:
:
string
>
&
CanonicalSyncGroup
(
)
{
return
mSyncGroup
;
}
const
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
&
GetPreferredCodecs
(
)
{
return
mPreferredCodecs
;
}
bool
GetPreferredCodecsInUse
(
)
{
return
mPreferredCodecsInUse
;
}
private
:
virtual
~
RTCRtpTransceiver
(
)
;
void
InitAudio
(
)
;
void
InitVideo
(
const
TrackingId
&
aRecvTrackingId
)
;
void
InitConduitControl
(
)
;
void
StopImpl
(
)
;
void
StopTransceiving
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
RefPtr
<
PeerConnectionImpl
>
mPc
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
const
std
:
:
string
mTransceiverId
;
JsepTransceiver
mJsepTransceiver
;
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
RefPtr
<
WebrtcCallWrapper
>
mCallWrapper
;
RefPtr
<
MediaStreamTrack
>
mSendTrack
;
RefPtr
<
RTCStatsIdGenerator
>
mIdGenerator
;
RefPtr
<
MediaSessionConduit
>
mConduit
;
RefPtr
<
RTCDtlsTransport
>
mDtlsTransport
;
RefPtr
<
RTCDtlsTransport
>
mLastStableDtlsTransport
;
RefPtr
<
RTCRtpReceiver
>
mReceiver
;
RefPtr
<
RTCRtpSender
>
mSender
;
RTCRtpTransceiverDirection
mDirection
=
RTCRtpTransceiverDirection
:
:
Sendrecv
;
Nullable
<
RTCRtpTransceiverDirection
>
mCurrentDirection
;
bool
mStopped
=
false
;
bool
mStopping
=
false
;
bool
mShutdown
=
false
;
bool
mHasBeenUsedToSend
=
false
;
PrincipalPrivacy
mPrincipalPrivacy
;
bool
mShouldRemove
=
false
;
bool
mHasTransport
=
false
;
bool
mIsVideo
;
bool
mHandlingUnlink
=
false
;
std
:
:
string
mTransportId
;
Canonical
<
std
:
:
string
>
mMid
;
Canonical
<
std
:
:
string
>
mSyncGroup
;
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
mPreferredCodecs
;
bool
mPreferredCodecsInUse
=
false
;
}
;
}
}
#
endif
