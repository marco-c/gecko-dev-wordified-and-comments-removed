#
ifndef
_RTCRtpReceiver_h_
#
define
_RTCRtpReceiver_h_
#
include
<
vector
>
#
include
"
PerformanceRecorder
.
h
"
#
include
"
RTCStatsReport
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
libwebrtcglue
/
RtpRtcpConfig
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StateMirroring
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpCapabilitiesBinding
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpParametersBinding
.
h
"
#
include
"
mozilla
/
dom
/
RTCStatsReportBinding
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
transportbridge
/
MediaPipeline
.
h
"
class
nsPIDOMWindowInner
;
namespace
mozilla
{
class
MediaSessionConduit
;
class
MediaTransportHandler
;
class
JsepTransceiver
;
class
PeerConnectionImpl
;
enum
class
PrincipalPrivacy
:
uint8_t
;
class
RemoteTrackSource
;
namespace
dom
{
class
MediaStreamTrack
;
class
Promise
;
class
RTCDtlsTransport
;
struct
RTCRtpCapabilities
;
struct
RTCRtpContributingSource
;
struct
RTCRtpSynchronizationSource
;
class
RTCRtpTransceiver
;
class
RTCRtpScriptTransform
;
class
RTCStatsTimestampMaker
;
class
RTCRtpReceiver
:
public
nsISupports
public
nsWrapperCache
public
MediaPipelineReceiveControlInterface
{
public
:
RTCRtpReceiver
(
nsPIDOMWindowInner
*
aWindow
PrincipalPrivacy
aPrivacy
PeerConnectionImpl
*
aPc
MediaTransportHandler
*
aTransportHandler
AbstractThread
*
aCallThread
nsISerialEventTarget
*
aStsThread
MediaSessionConduit
*
aConduit
RTCRtpTransceiver
*
aTransceiver
const
TrackingId
&
aTrackingId
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
RTCRtpReceiver
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
MediaStreamTrack
*
Track
(
)
const
{
return
mTrack
;
}
RTCDtlsTransport
*
GetTransport
(
)
const
;
static
void
GetCapabilities
(
const
GlobalObject
&
const
nsAString
&
aKind
Nullable
<
dom
:
:
RTCRtpCapabilities
>
&
aResult
)
;
void
GetParameters
(
RTCRtpReceiveParameters
&
aParameters
)
const
;
already_AddRefed
<
Promise
>
GetStats
(
ErrorResult
&
aError
)
;
void
GetContributingSources
(
nsTArray
<
dom
:
:
RTCRtpContributingSource
>
&
aSources
)
;
void
GetSynchronizationSources
(
nsTArray
<
dom
:
:
RTCRtpSynchronizationSource
>
&
aSources
)
;
void
MozInsertAudioLevelForContributingSource
(
const
uint32_t
aSource
const
DOMHighResTimeStamp
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasLevel
const
uint8_t
aLevel
)
;
RTCRtpScriptTransform
*
GetTransform
(
)
const
{
return
mTransform
;
}
void
SetTransform
(
RTCRtpScriptTransform
*
aTransform
ErrorResult
&
aError
)
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
nsTArray
<
RefPtr
<
RTCStatsPromise
>
>
GetStatsInternal
(
bool
aSkipIceStats
=
false
)
;
Nullable
<
DOMHighResTimeStamp
>
GetJitterBufferTarget
(
ErrorResult
&
aError
)
const
{
return
mJitterBufferTarget
.
isSome
(
)
?
Nullable
(
mJitterBufferTarget
.
value
(
)
)
:
Nullable
<
DOMHighResTimeStamp
>
(
)
;
}
void
SetJitterBufferTarget
(
const
Nullable
<
DOMHighResTimeStamp
>
&
aTargetMs
ErrorResult
&
aError
)
;
void
Shutdown
(
)
;
void
BreakCycles
(
)
;
void
Unlink
(
)
;
void
Stop
(
)
;
bool
HasTrack
(
const
dom
:
:
MediaStreamTrack
*
aTrack
)
const
;
void
SyncToJsep
(
JsepTransceiver
&
aJsepTransceiver
)
const
;
void
SyncFromJsep
(
const
JsepTransceiver
&
aJsepTransceiver
)
;
const
std
:
:
vector
<
std
:
:
string
>
&
GetStreamIds
(
)
const
{
return
mStreamIds
;
}
struct
StreamAssociation
{
RefPtr
<
MediaStreamTrack
>
mTrack
;
std
:
:
string
mStreamId
;
}
;
struct
TrackEventInfo
{
RefPtr
<
RTCRtpReceiver
>
mReceiver
;
std
:
:
vector
<
std
:
:
string
>
mStreamIds
;
}
;
struct
StreamAssociationChanges
{
std
:
:
vector
<
RefPtr
<
RTCRtpReceiver
>
>
mReceiversToMute
;
std
:
:
vector
<
StreamAssociation
>
mStreamAssociationsRemoved
;
std
:
:
vector
<
StreamAssociation
>
mStreamAssociationsAdded
;
std
:
:
vector
<
TrackEventInfo
>
mTrackEvents
;
}
;
void
UpdateTransport
(
)
;
void
UpdateConduit
(
)
;
void
UpdateStreams
(
StreamAssociationChanges
*
aChanges
)
;
void
UpdatePrincipalPrivacy
(
PrincipalPrivacy
aPrivacy
)
;
void
RequestKeyFrame
(
)
;
void
OnRtcpBye
(
)
;
void
OnRtcpTimeout
(
)
;
void
SetTrackMuteFromRemoteSdp
(
)
;
void
OnRtpPacket
(
)
;
void
UpdateUnmuteBlockingState
(
)
;
void
UpdateReceiveTrackMute
(
)
;
Canonical
<
Ssrc
>
&
CanonicalSsrc
(
)
{
return
mSsrc
;
}
Canonical
<
Ssrc
>
&
CanonicalVideoRtxSsrc
(
)
{
return
mVideoRtxSsrc
;
}
Canonical
<
RtpExtList
>
&
CanonicalLocalRtpExtensions
(
)
{
return
mLocalRtpExtensions
;
}
Canonical
<
std
:
:
vector
<
AudioCodecConfig
>
>
&
CanonicalAudioCodecs
(
)
{
return
mAudioCodecs
;
}
Canonical
<
std
:
:
vector
<
VideoCodecConfig
>
>
&
CanonicalVideoCodecs
(
)
{
return
mVideoCodecs
;
}
Canonical
<
Maybe
<
RtpRtcpConfig
>
>
&
CanonicalVideoRtpRtcpConfig
(
)
{
return
mVideoRtpRtcpConfig
;
}
Canonical
<
bool
>
&
CanonicalReceiving
(
)
override
{
return
mReceiving
;
}
Canonical
<
RefPtr
<
FrameTransformerProxy
>
>
&
CanonicalFrameTransformerProxy
(
)
{
return
mFrameTransformerProxy
;
}
const
RTCStatsTimestampMaker
*
GetTimestampMaker
(
)
const
;
Maybe
<
gfx
:
:
IntSize
>
ReceivingSize
(
)
const
;
private
:
virtual
~
RTCRtpReceiver
(
)
;
void
UpdateVideoConduit
(
)
;
void
UpdateAudioConduit
(
)
;
std
:
:
string
GetMid
(
)
const
;
JsepTransceiver
&
GetJsepTransceiver
(
)
;
const
JsepTransceiver
&
GetJsepTransceiver
(
)
const
;
WatchManager
<
RTCRtpReceiver
>
mWatchManager
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
RefPtr
<
PeerConnectionImpl
>
mPc
;
bool
mHaveStartedReceiving
=
false
;
bool
mHaveSetupTransport
=
false
;
RefPtr
<
AbstractThread
>
mCallThread
;
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
mTrack
;
RefPtr
<
RemoteTrackSource
>
mTrackSource
;
RefPtr
<
MediaPipelineReceive
>
mPipeline
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
RefPtr
<
RTCRtpTransceiver
>
mTransceiver
;
RefPtr
<
RTCRtpScriptTransform
>
mTransform
;
std
:
:
vector
<
std
:
:
string
>
mStreamIds
;
bool
mRemoteSetSendBit
=
false
;
Watchable
<
bool
>
mReceiveTrackMute
{
true
"
RTCRtpReceiver
:
:
mReceiveTrackMute
"
}
;
bool
mReceptive
=
false
;
Maybe
<
DOMHighResTimeStamp
>
mJitterBufferTarget
;
RTCRtpReceiveParameters
mParameters
;
MediaEventListener
mRtcpByeListener
;
MediaEventListener
mRtcpTimeoutListener
;
MediaEventListener
mUnmuteListener
;
Canonical
<
Ssrc
>
mSsrc
;
Canonical
<
Ssrc
>
mVideoRtxSsrc
;
Canonical
<
RtpExtList
>
mLocalRtpExtensions
;
Canonical
<
std
:
:
vector
<
AudioCodecConfig
>
>
mAudioCodecs
;
Canonical
<
std
:
:
vector
<
VideoCodecConfig
>
>
mVideoCodecs
;
Canonical
<
Maybe
<
RtpRtcpConfig
>
>
mVideoRtpRtcpConfig
;
Canonical
<
bool
>
mReceiving
;
Canonical
<
RefPtr
<
FrameTransformerProxy
>
>
mFrameTransformerProxy
;
Mirror
<
Maybe
<
gfx
:
:
IntSize
>
>
mReceivingSize
;
}
;
}
}
#
endif
