#
include
"
RTCStatsReport
.
h
"
#
include
"
libwebrtcglue
/
SystemTime
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
nsRFPService
.
h
"
namespace
mozilla
:
:
dom
{
RTCStatsTimestampMaker
:
:
RTCStatsTimestampMaker
(
)
:
mRandomTimelineSeed
(
0
)
mStartRealtime
(
WebrtcSystemTimeBase
(
)
)
mCrossOriginIsolated
(
false
)
mStartWallClockRaw
(
PerformanceService
:
:
GetOrCreate
(
)
-
>
TimeOrigin
(
mStartRealtime
)
)
{
}
RTCStatsTimestampMaker
:
:
RTCStatsTimestampMaker
(
nsPIDOMWindowInner
*
aWindow
)
:
mRandomTimelineSeed
(
aWindow
&
&
aWindow
-
>
GetPerformance
(
)
?
aWindow
-
>
GetPerformance
(
)
-
>
GetRandomTimelineSeed
(
)
:
0
)
mStartRealtime
(
aWindow
&
&
aWindow
-
>
GetPerformance
(
)
?
aWindow
-
>
GetPerformance
(
)
-
>
CreationTimeStamp
(
)
:
WebrtcSystemTimeBase
(
)
)
mCrossOriginIsolated
(
aWindow
?
aWindow
-
>
AsGlobal
(
)
-
>
CrossOriginIsolated
(
)
:
false
)
mStartWallClockRaw
(
PerformanceService
:
:
GetOrCreate
(
)
-
>
TimeOrigin
(
mStartRealtime
)
)
{
}
DOMHighResTimeStamp
RTCStatsTimestampMaker
:
:
ReduceRealtimePrecision
(
webrtc
:
:
Timestamp
aRealtime
)
const
{
DOMHighResTimeStamp
realtime
=
aRealtime
.
ms
<
double
>
(
)
;
if
(
mRandomTimelineSeed
)
{
realtime
=
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
realtime
mRandomTimelineSeed
false
mCrossOriginIsolated
)
;
}
DOMHighResTimeStamp
start
=
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
mStartWallClockRaw
0
false
mCrossOriginIsolated
)
;
return
start
+
realtime
;
}
webrtc
:
:
Timestamp
RTCStatsTimestampMaker
:
:
ConvertRealtimeTo1Jan1970
(
webrtc
:
:
Timestamp
aRealtime
)
const
{
return
aRealtime
+
webrtc
:
:
TimeDelta
:
:
Millis
(
mStartWallClockRaw
)
;
}
DOMHighResTimeStamp
RTCStatsTimestampMaker
:
:
ConvertNtpToDomTime
(
webrtc
:
:
Timestamp
aNtpTime
)
const
{
const
auto
realtime
=
aNtpTime
-
webrtc
:
:
TimeDelta
:
:
Seconds
(
webrtc
:
:
kNtpJan1970
)
-
webrtc
:
:
TimeDelta
:
:
Millis
(
mStartWallClockRaw
)
;
return
ReduceRealtimePrecision
(
realtime
-
webrtc
:
:
TimeDelta
:
:
Micros
(
500
)
)
;
}
webrtc
:
:
Timestamp
RTCStatsTimestampMaker
:
:
ConvertMozTimeToRealtime
(
TimeStamp
aMozTime
)
const
{
return
webrtc
:
:
Timestamp
:
:
Micros
(
(
aMozTime
-
mStartRealtime
)
.
ToMicroseconds
(
)
)
;
}
DOMHighResTimeStamp
RTCStatsTimestampMaker
:
:
GetNow
(
)
const
{
return
ReduceRealtimePrecision
(
GetNowRealtime
(
)
)
;
}
webrtc
:
:
Timestamp
RTCStatsTimestampMaker
:
:
GetNowRealtime
(
)
const
{
return
ConvertMozTimeToRealtime
(
TimeStamp
:
:
Now
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
RTCStatsReport
mParent
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
RTCStatsReport
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
RTCStatsReport
Release
)
RTCStatsReport
:
:
RTCStatsReport
(
nsPIDOMWindowInner
*
aParent
)
:
mParent
(
aParent
)
{
}
already_AddRefed
<
RTCStatsReport
>
RTCStatsReport
:
:
Constructor
(
const
GlobalObject
&
aGlobal
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
(
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
)
;
RefPtr
<
RTCStatsReport
>
report
(
new
RTCStatsReport
(
window
)
)
;
return
report
.
forget
(
)
;
}
JSObject
*
RTCStatsReport
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
RTCStatsReport_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
RTCStatsReport
:
:
Incorporate
(
RTCStatsCollection
&
aStats
)
{
SetRTCStats
(
aStats
.
mIceCandidatePairStats
)
;
SetRTCStats
(
aStats
.
mIceCandidateStats
)
;
SetRTCStats
(
aStats
.
mInboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mOutboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRemoteInboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRemoteOutboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRtpContributingSourceStats
)
;
SetRTCStats
(
aStats
.
mTrickledIceCandidateStats
)
;
SetRTCStats
(
aStats
.
mDataChannelStats
)
;
}
void
RTCStatsReport
:
:
Set
(
const
nsAString
&
aKey
JS
:
:
Handle
<
JSObject
*
>
aValue
ErrorResult
&
aRv
)
{
RTCStatsReport_Binding
:
:
MaplikeHelpers
:
:
Set
(
this
aKey
aValue
aRv
)
;
}
void
MergeStats
(
UniquePtr
<
dom
:
:
RTCStatsCollection
>
aFromStats
dom
:
:
RTCStatsCollection
*
aIntoStats
)
{
auto
move
=
[
&
]
(
auto
&
aSource
auto
&
aDest
)
{
if
(
!
aDest
.
AppendElements
(
std
:
:
move
(
aSource
)
fallible
)
)
{
mozalloc_handle_oom
(
0
)
;
}
}
;
move
(
aFromStats
-
>
mIceCandidatePairStats
aIntoStats
-
>
mIceCandidatePairStats
)
;
move
(
aFromStats
-
>
mIceCandidateStats
aIntoStats
-
>
mIceCandidateStats
)
;
move
(
aFromStats
-
>
mInboundRtpStreamStats
aIntoStats
-
>
mInboundRtpStreamStats
)
;
move
(
aFromStats
-
>
mOutboundRtpStreamStats
aIntoStats
-
>
mOutboundRtpStreamStats
)
;
move
(
aFromStats
-
>
mRemoteInboundRtpStreamStats
aIntoStats
-
>
mRemoteInboundRtpStreamStats
)
;
move
(
aFromStats
-
>
mRemoteOutboundRtpStreamStats
aIntoStats
-
>
mRemoteOutboundRtpStreamStats
)
;
move
(
aFromStats
-
>
mCodecStats
aIntoStats
-
>
mCodecStats
)
;
move
(
aFromStats
-
>
mRtpContributingSourceStats
aIntoStats
-
>
mRtpContributingSourceStats
)
;
move
(
aFromStats
-
>
mTrickledIceCandidateStats
aIntoStats
-
>
mTrickledIceCandidateStats
)
;
move
(
aFromStats
-
>
mDataChannelStats
aIntoStats
-
>
mDataChannelStats
)
;
move
(
aFromStats
-
>
mRawLocalCandidates
aIntoStats
-
>
mRawLocalCandidates
)
;
move
(
aFromStats
-
>
mRawRemoteCandidates
aIntoStats
-
>
mRawRemoteCandidates
)
;
move
(
aFromStats
-
>
mVideoFrameHistories
aIntoStats
-
>
mVideoFrameHistories
)
;
move
(
aFromStats
-
>
mBandwidthEstimations
aIntoStats
-
>
mBandwidthEstimations
)
;
}
void
FlattenStats
(
nsTArray
<
UniquePtr
<
dom
:
:
RTCStatsCollection
>
>
aFromStats
dom
:
:
RTCStatsCollection
*
aIntoStats
)
{
for
(
auto
&
stats
:
aFromStats
)
{
MergeStats
(
std
:
:
move
(
stats
)
aIntoStats
)
;
}
}
}
