#
include
"
RTCStatsReport
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceService
.
h
"
#
include
"
nsRFPService
.
h
"
namespace
mozilla
:
:
dom
{
RTCStatsTimestampMaker
:
:
RTCStatsTimestampMaker
(
const
GlobalObject
*
aGlobal
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
-
>
GetAsSupports
(
)
)
;
if
(
window
)
{
mRandomTimelineSeed
=
window
-
>
GetPerformance
(
)
-
>
GetRandomTimelineSeed
(
)
;
mStartMonotonic
=
window
-
>
GetPerformance
(
)
-
>
CreationTimeStamp
(
)
;
mStartWallClockRaw
=
PerformanceService
:
:
GetOrCreate
(
)
-
>
TimeOrigin
(
mStartMonotonic
)
;
MOZ_ASSERT
(
window
-
>
AsGlobal
(
)
)
;
mCrossOriginIsolated
=
window
-
>
AsGlobal
(
)
-
>
CrossOriginIsolated
(
)
;
}
}
DOMHighResTimeStamp
RTCStatsTimestampMaker
:
:
GetNow
(
)
const
{
DOMHighResTimeStamp
msSinceStart
=
(
TimeStamp
:
:
Now
(
)
-
mStartMonotonic
)
.
ToMilliseconds
(
)
;
if
(
mRandomTimelineSeed
)
{
msSinceStart
=
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
msSinceStart
mRandomTimelineSeed
false
mCrossOriginIsolated
)
;
}
return
msSinceStart
+
nsRFPService
:
:
ReduceTimePrecisionAsMSecs
(
mStartWallClockRaw
0
false
mCrossOriginIsolated
)
;
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
RTCStatsReport
mParent
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
RTCStatsReport
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
RTCStatsReport
Release
)
RTCStatsReport
:
:
RTCStatsReport
(
nsPIDOMWindowInner
*
aParent
)
:
mParent
(
aParent
)
{
}
already_AddRefed
<
RTCStatsReport
>
RTCStatsReport
:
:
Constructor
(
const
GlobalObject
&
aGlobal
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
(
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
)
;
RefPtr
<
RTCStatsReport
>
report
(
new
RTCStatsReport
(
window
)
)
;
return
report
.
forget
(
)
;
}
JSObject
*
RTCStatsReport
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
RTCStatsReport_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
RTCStatsReport
:
:
Incorporate
(
RTCStatsCollection
&
aStats
)
{
SetRTCStats
(
aStats
.
mIceCandidatePairStats
)
;
SetRTCStats
(
aStats
.
mIceCandidateStats
)
;
SetRTCStats
(
aStats
.
mInboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mOutboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRemoteInboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRemoteOutboundRtpStreamStats
)
;
SetRTCStats
(
aStats
.
mRtpContributingSourceStats
)
;
SetRTCStats
(
aStats
.
mTrickledIceCandidateStats
)
;
SetRTCStats
(
aStats
.
mDataChannelStats
)
;
}
void
RTCStatsReport
:
:
Set
(
const
nsAString
&
aKey
JS
:
:
Handle
<
JSObject
*
>
aValue
ErrorResult
&
aRv
)
{
RTCStatsReport_Binding
:
:
MaplikeHelpers
:
:
Set
(
this
aKey
aValue
aRv
)
;
}
}
