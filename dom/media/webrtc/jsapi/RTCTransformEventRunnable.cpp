#
include
"
RTCTransformEventRunnable
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsLiteralString
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpScriptTransformer
.
h
"
#
include
"
mozilla
/
dom
/
RTCTransformEvent
.
h
"
#
include
"
mozilla
/
dom
/
RTCTransformEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
EventWithOptionsRunnable
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
RootedDictionary
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
js
/
Value
.
h
"
#
include
"
libwebrtcglue
/
FrameTransformerProxy
.
h
"
namespace
mozilla
:
:
dom
{
RTCTransformEventRunnable
:
:
RTCTransformEventRunnable
(
Worker
&
aWorker
FrameTransformerProxy
*
aProxy
)
:
EventWithOptionsRunnable
(
aWorker
)
mProxy
(
aProxy
)
{
}
RTCTransformEventRunnable
:
:
~
RTCTransformEventRunnable
(
)
=
default
;
already_AddRefed
<
Event
>
RTCTransformEventRunnable
:
:
BuildEvent
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
EventTarget
*
aTarget
JS
:
:
Handle
<
JS
:
:
Value
>
aTransformerOptions
)
{
RefPtr
<
RTCRtpScriptTransformer
>
transformer
=
new
RTCRtpScriptTransformer
(
aGlobal
)
;
nsresult
nrv
=
transformer
-
>
Init
(
aCx
aTransformerOptions
mWorkerPrivate
mProxy
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
nrv
)
)
)
{
return
nullptr
;
}
RootedDictionary
<
RTCTransformEventInit
>
init
(
aCx
)
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mTransformer
=
transformer
;
RefPtr
<
RTCTransformEvent
>
event
=
RTCTransformEvent
:
:
Constructor
(
aTarget
u
"
rtctransform
"
_ns
init
)
;
event
-
>
SetTrusted
(
true
)
;
return
event
.
forget
(
)
;
}
}
