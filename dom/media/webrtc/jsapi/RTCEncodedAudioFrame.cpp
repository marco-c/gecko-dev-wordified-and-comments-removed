#
include
"
jsapi
/
RTCEncodedAudioFrame
.
h
"
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
frame_transformer_factory
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
js
/
RootingAPI
.
h
"
#
include
"
jsapi
/
RTCEncodedFrameBase
.
h
"
#
include
"
jsapi
/
RTCRtpScriptTransform
.
h
"
#
include
"
mozilla
/
HoldDropJSObjects
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
RTCEncodedAudioFrameBinding
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpScriptTransformer
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneHolder
.
h
"
#
include
"
mozilla
/
dom
/
StructuredCloneTags
.
h
"
#
include
"
mozilla
/
fallible
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsIGlobalObject
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsWrapperCache
.
h
"
namespace
mozilla
:
:
dom
{
NS_IMPL_CYCLE_COLLECTION_CLASS
(
RTCEncodedAudioFrame
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
RTCEncodedAudioFrame
RTCEncodedFrameBase
)
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mOwner
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
RTCEncodedAudioFrame
RTCEncodedFrameBase
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mOwner
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
RTCEncodedAudioFrame
RTCEncodedFrameBase
)
NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_ADDREF_INHERITED
(
RTCEncodedAudioFrame
RTCEncodedFrameBase
)
NS_IMPL_RELEASE_INHERITED
(
RTCEncodedAudioFrame
RTCEncodedFrameBase
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
RTCEncodedAudioFrame
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_END_INHERITING
(
RTCEncodedFrameBase
)
RTCEncodedAudioFrame
:
:
RTCEncodedAudioFrame
(
nsIGlobalObject
*
aGlobal
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
uint64_t
aCounter
RTCRtpScriptTransformer
*
aOwner
)
:
RTCEncodedAudioFrameData
{
{
std
:
:
move
(
aFrame
)
aCounter
0
}
}
RTCEncodedFrameBase
(
aGlobal
static_cast
<
RTCEncodedFrameState
&
>
(
*
this
)
)
mOwner
(
aOwner
)
{
mMetadata
.
mSynchronizationSource
.
Construct
(
mFrame
-
>
GetSsrc
(
)
)
;
mMetadata
.
mPayloadType
.
Construct
(
mFrame
-
>
GetPayloadType
(
)
)
;
const
auto
&
audioFrame
(
static_cast
<
webrtc
:
:
TransformableAudioFrameInterface
&
>
(
*
mFrame
)
)
;
mMetadata
.
mContributingSources
.
Construct
(
)
;
for
(
const
auto
csrc
:
audioFrame
.
GetContributingSources
(
)
)
{
Unused
<
<
mMetadata
.
mContributingSources
.
Value
(
)
.
AppendElement
(
csrc
fallible
)
;
}
if
(
const
auto
optionalSeqNum
=
audioFrame
.
SequenceNumber
(
)
)
{
mMetadata
.
mSequenceNumber
.
Construct
(
*
optionalSeqNum
)
;
}
mozilla
:
:
HoldJSObjects
(
this
)
;
}
RTCEncodedAudioFrame
:
:
RTCEncodedAudioFrame
(
nsIGlobalObject
*
aGlobal
RTCEncodedAudioFrameData
&
&
aData
)
:
RTCEncodedAudioFrameData
{
{
std
:
:
move
(
aData
.
mFrame
)
aData
.
mCounter
aData
.
mTimestamp
}
std
:
:
move
(
aData
.
mMetadata
)
}
RTCEncodedFrameBase
(
aGlobal
static_cast
<
RTCEncodedFrameState
&
>
(
*
this
)
)
mOwner
(
nullptr
)
{
mozilla
:
:
HoldJSObjects
(
this
)
;
}
RTCEncodedAudioFrame
:
:
~
RTCEncodedAudioFrame
(
)
{
mData
=
nullptr
;
mozilla
:
:
DropJSObjects
(
this
)
;
}
JSObject
*
RTCEncodedAudioFrame
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
RTCEncodedAudioFrame_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
RTCEncodedAudioFrameData
RTCEncodedAudioFrameData
:
:
Clone
(
)
const
{
return
RTCEncodedAudioFrameData
{
{
webrtc
:
:
CloneAudioFrame
(
static_cast
<
webrtc
:
:
TransformableAudioFrameInterface
*
>
(
mFrame
.
get
(
)
)
)
}
RTCEncodedAudioFrameMetadata
(
mMetadata
)
}
;
}
nsIGlobalObject
*
RTCEncodedAudioFrame
:
:
GetParentObject
(
)
const
{
return
mGlobal
;
}
void
RTCEncodedAudioFrame
:
:
GetMetadata
(
RTCEncodedAudioFrameMetadata
&
aMetadata
)
const
{
aMetadata
=
mMetadata
;
}
bool
RTCEncodedAudioFrame
:
:
CheckOwner
(
RTCRtpScriptTransformer
*
aOwner
)
const
{
return
aOwner
=
=
mOwner
;
}
JSObject
*
RTCEncodedAudioFrame
:
:
ReadStructuredClone
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
JSStructuredCloneReader
*
aReader
RTCEncodedAudioFrameData
&
aData
)
{
JS
:
:
Rooted
<
JS
:
:
Value
>
value
(
aCx
JS
:
:
NullValue
(
)
)
;
{
auto
frame
=
MakeRefPtr
<
RTCEncodedAudioFrame
>
(
aGlobal
std
:
:
move
(
aData
)
)
;
if
(
!
GetOrCreateDOMReflector
(
aCx
frame
&
value
)
|
|
!
value
.
isObject
(
)
)
{
return
nullptr
;
}
}
return
value
.
toObjectOrNull
(
)
;
}
bool
RTCEncodedAudioFrame
:
:
WriteStructuredClone
(
JSStructuredCloneWriter
*
aWriter
StructuredCloneHolder
*
aHolder
)
const
{
AssertIsOnOwningThread
(
)
;
const
uint32_t
index
=
static_cast
<
uint32_t
>
(
aHolder
-
>
RtcEncodedAudioFrames
(
)
.
Length
(
)
)
;
aHolder
-
>
RtcEncodedAudioFrames
(
)
.
AppendElement
(
Clone
(
)
)
;
return
!
NS_WARN_IF
(
!
JS_WriteUint32Pair
(
aWriter
SCTAG_DOM_RTCENCODEDAUDIOFRAME
index
)
)
;
}
}
