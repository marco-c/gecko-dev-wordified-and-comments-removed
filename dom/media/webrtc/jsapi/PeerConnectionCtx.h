#
ifndef
peerconnectionctx_h___h__
#
define
peerconnectionctx_h___h__
#
include
<
map
>
#
include
<
string
>
#
include
"
MediaTransportHandler
.
h
"
#
include
"
mozIGeckoMediaPluginService
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
PeerConnectionImpl
.
h
"
namespace
mozilla
{
class
PeerConnectionCtxObserver
;
namespace
dom
{
class
WebrtcGlobalInformation
;
}
class
PeerConnectionCtx
{
public
:
static
nsresult
InitializeGlobal
(
nsIThread
*
mainThread
)
;
static
PeerConnectionCtx
*
GetInstance
(
)
;
static
bool
isActive
(
)
;
static
void
Destroy
(
)
;
bool
isReady
(
)
{
if
(
mGMPService
)
{
return
mGMPReady
;
}
return
true
;
}
void
queueJSEPOperation
(
nsIRunnable
*
aJSEPOperation
)
;
void
onGMPReady
(
)
;
bool
gmpHasH264
(
)
;
static
void
UpdateNetworkState
(
bool
online
)
;
RefPtr
<
MediaTransportHandler
>
GetTransportHandler
(
)
const
{
return
mTransportHandler
;
}
mozilla
:
:
dom
:
:
Sequence
<
mozilla
:
:
dom
:
:
RTCStatsReportInternal
>
mStatsForClosedPeerConnections
;
void
RemovePeerConnection
(
const
std
:
:
string
&
aKey
)
;
void
AddPeerConnection
(
const
std
:
:
string
&
aKey
PeerConnectionImpl
*
aPeerConnection
)
;
PeerConnectionImpl
*
GetPeerConnection
(
const
std
:
:
string
&
aKey
)
const
;
template
<
typename
Function
>
void
ForEachPeerConnection
(
Function
&
&
aFunction
)
const
;
private
:
std
:
:
map
<
const
std
:
:
string
PeerConnectionImpl
*
>
mPeerConnections
;
PeerConnectionCtx
(
)
:
mGMPReady
(
false
)
mTransportHandler
(
MediaTransportHandler
:
:
Create
(
GetMainThreadSerialEventTarget
(
)
)
)
{
}
PeerConnectionCtx
(
const
PeerConnectionCtx
&
other
)
=
delete
;
void
operator
=
(
const
PeerConnectionCtx
&
other
)
=
delete
;
virtual
~
PeerConnectionCtx
(
)
;
nsresult
Initialize
(
)
;
nsresult
Cleanup
(
)
;
void
initGMP
(
)
;
static
void
EverySecondTelemetryCallback_m
(
nsITimer
*
timer
void
*
)
;
nsCOMPtr
<
nsITimer
>
mTelemetryTimer
;
private
:
void
DeliverStats
(
UniquePtr
<
dom
:
:
RTCStatsReportInternal
>
&
&
aReport
)
;
std
:
:
map
<
nsString
UniquePtr
<
dom
:
:
RTCStatsReportInternal
>
>
mLastReports
;
nsCOMPtr
<
mozIGeckoMediaPluginService
>
mGMPService
;
bool
mGMPReady
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mQueuedJSEPOperations
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
static
PeerConnectionCtx
*
gInstance
;
public
:
static
nsIThread
*
gMainThread
;
static
mozilla
:
:
StaticRefPtr
<
mozilla
:
:
PeerConnectionCtxObserver
>
gPeerConnectionCtxObserver
;
}
;
}
#
endif
