#
ifndef
MOZILLA_DOM_MEDIA_WEBRTC_JSAPI_RTCENCODEDVIDEOFRAME_H_
#
define
MOZILLA_DOM_MEDIA_WEBRTC_JSAPI_RTCENCODEDVIDEOFRAME_H_
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
RTCEncodedFrameBase
.
h
"
#
include
"
mozilla
/
dom
/
RTCEncodedVideoFrameBinding
.
h
"
#
include
"
nsIGlobalObject
.
h
"
namespace
mozilla
:
:
dom
{
class
RTCRtpScriptTransformer
;
class
StructuredCloneHolder
;
struct
RTCEncodedVideoFrameData
:
RTCEncodedFrameState
{
RTCEncodedVideoFrameType
mType
;
RTCEncodedVideoFrameMetadata
mMetadata
;
Maybe
<
nsCString
>
mRid
;
[
[
nodiscard
]
]
RTCEncodedVideoFrameData
Clone
(
)
const
;
}
;
class
RTCEncodedVideoFrame
final
:
public
RTCEncodedVideoFrameData
public
RTCEncodedFrameBase
{
public
:
explicit
RTCEncodedVideoFrame
(
nsIGlobalObject
*
aGlobal
std
:
:
unique_ptr
<
webrtc
:
:
TransformableFrameInterface
>
aFrame
uint64_t
aCounter
RTCRtpScriptTransformer
*
aOwner
)
;
explicit
RTCEncodedVideoFrame
(
nsIGlobalObject
*
aGlobal
RTCEncodedVideoFrameData
&
&
aData
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
RTCEncodedVideoFrame
RTCEncodedFrameBase
)
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsIGlobalObject
*
GetParentObject
(
)
const
;
RTCEncodedVideoFrameType
Type
(
)
const
;
void
InitMetadata
(
)
;
void
GetMetadata
(
RTCEncodedVideoFrameMetadata
&
aMetadata
)
;
bool
CheckOwner
(
RTCRtpScriptTransformer
*
aOwner
)
const
override
;
bool
IsVideo
(
)
const
override
{
return
true
;
}
Maybe
<
nsCString
>
Rid
(
)
const
;
static
JSObject
*
ReadStructuredClone
(
JSContext
*
aCx
nsIGlobalObject
*
aGlobal
JSStructuredCloneReader
*
aReader
RTCEncodedVideoFrameData
&
aData
)
;
bool
WriteStructuredClone
(
JSStructuredCloneWriter
*
aWriter
StructuredCloneHolder
*
aHolder
)
const
;
private
:
virtual
~
RTCEncodedVideoFrame
(
)
;
RTCEncodedVideoFrame
(
const
RTCEncodedVideoFrame
&
)
=
delete
;
RTCEncodedVideoFrame
&
operator
=
(
const
RTCEncodedVideoFrame
&
)
=
delete
;
RTCEncodedVideoFrame
(
RTCEncodedVideoFrame
&
&
)
=
delete
;
RTCEncodedVideoFrame
&
operator
=
(
RTCEncodedVideoFrame
&
&
)
=
delete
;
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
RTCEncodedVideoFrame
)
;
}
RefPtr
<
RTCRtpScriptTransformer
>
mOwner
;
}
;
}
#
endif
