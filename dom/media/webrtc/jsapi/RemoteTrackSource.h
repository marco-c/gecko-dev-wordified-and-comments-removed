#
ifndef
_REMOTE_TRACK_SOURCE_H_
#
define
_REMOTE_TRACK_SOURCE_H_
#
include
"
MediaStreamTrack
.
h
"
#
include
"
MediaStreamError
.
h
"
namespace
mozilla
{
class
RemoteTrackSource
:
public
dom
:
:
MediaStreamTrackSource
{
public
:
explicit
RemoteTrackSource
(
SourceMediaTrack
*
aStream
nsIPrincipal
*
aPrincipal
const
nsString
&
aLabel
)
:
dom
:
:
MediaStreamTrackSource
(
aPrincipal
aLabel
)
mStream
(
aStream
)
{
}
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
override
{
return
dom
:
:
MediaSourceEnum
:
:
Other
;
}
RefPtr
<
ApplyConstraintsPromise
>
ApplyConstraints
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
dom
:
:
CallerType
aCallerType
)
override
{
return
ApplyConstraintsPromise
:
:
CreateAndReject
(
MakeRefPtr
<
MediaMgrError
>
(
dom
:
:
MediaStreamError
:
:
Name
:
:
OverconstrainedError
"
"
)
__func__
)
;
}
void
Stop
(
)
override
{
}
void
Disable
(
)
override
{
}
void
Enable
(
)
override
{
}
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
{
mPrincipal
=
aPrincipal
;
PrincipalChanged
(
)
;
}
void
SetMuted
(
bool
aMuted
)
{
MutedChanged
(
aMuted
)
;
}
void
ForceEnded
(
)
{
OverrideEnded
(
)
;
}
const
RefPtr
<
SourceMediaTrack
>
mStream
;
protected
:
virtual
~
RemoteTrackSource
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mStream
-
>
IsDestroyed
(
)
)
;
}
}
;
}
#
endif
