#
include
"
nsIPrefService
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
CamerasUtils
.
h
"
#
include
"
CSFLog
.
h
"
#
include
"
prenv
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
static
mozilla
:
:
LogModule
*
GetUserMediaLog
(
)
{
static
mozilla
:
:
LazyLogModule
sLog
(
"
GetUserMedia
"
)
;
return
sLog
;
}
#
include
"
MediaEngineWebRTC
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
nsIComponentRegistrar
.
h
"
#
include
"
MediaEngineTabVideoSource
.
h
"
#
include
"
MediaEngineRemoteVideoSource
.
h
"
#
include
"
CamerasChild
.
h
"
#
include
"
nsITabSource
.
h
"
#
include
"
MediaTrackConstraints
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
AndroidJNIWrapper
.
h
"
#
include
"
AndroidBridge
.
h
"
#
endif
#
if
defined
(
MOZ_B2G_CAMERA
)
&
&
defined
(
MOZ_WIDGET_GONK
)
#
include
"
ICameraControl
.
h
"
#
include
"
MediaEngineGonkVideoSource
.
h
"
#
endif
#
undef
LOG
#
define
LOG
(
args
)
MOZ_LOG
(
GetUserMediaLog
(
)
mozilla
:
:
LogLevel
:
:
Debug
args
)
namespace
mozilla
{
nsTArray
<
int
>
*
AudioInputCubeb
:
:
mDeviceIndexes
;
nsTArray
<
nsCString
>
*
AudioInputCubeb
:
:
mDeviceNames
;
cubeb_device_collection
*
AudioInputCubeb
:
:
mDevices
=
nullptr
;
bool
AudioInputCubeb
:
:
mAnyInUse
=
false
;
void
AudioInputCubeb
:
:
UpdateDeviceList
(
)
{
cubeb_device_collection
*
devices
=
nullptr
;
if
(
CUBEB_OK
!
=
cubeb_enumerate_devices
(
CubebUtils
:
:
GetCubebContext
(
)
CUBEB_DEVICE_TYPE_INPUT
&
devices
)
)
{
return
;
}
for
(
auto
&
device_index
:
(
*
mDeviceIndexes
)
)
{
device_index
=
-
1
;
}
for
(
uint32_t
i
=
0
;
i
<
devices
-
>
count
;
i
+
+
)
{
if
(
devices
-
>
device
[
i
]
-
>
type
=
=
CUBEB_DEVICE_TYPE_INPUT
&
&
(
devices
-
>
device
[
i
]
-
>
state
=
=
CUBEB_DEVICE_STATE_ENABLED
|
|
devices
-
>
device
[
i
]
-
>
state
=
=
CUBEB_DEVICE_STATE_UNPLUGGED
|
|
(
devices
-
>
device
[
i
]
-
>
state
=
=
CUBEB_DEVICE_STATE_DISABLED
&
&
strcmp
(
devices
-
>
device
[
i
]
-
>
friendly_name
"
Sine
source
at
440
Hz
"
)
=
=
0
)
)
)
{
auto
j
=
mDeviceNames
-
>
IndexOf
(
devices
-
>
device
[
i
]
-
>
device_id
)
;
if
(
j
!
=
nsTArray
<
nsCString
>
:
:
NoIndex
)
{
(
*
mDeviceIndexes
)
[
j
]
=
i
;
}
else
{
mDeviceIndexes
-
>
AppendElement
(
i
)
;
mDeviceNames
-
>
AppendElement
(
devices
-
>
device
[
i
]
-
>
device_id
)
;
}
}
}
if
(
mDevices
)
{
cubeb_device_collection_destroy
(
mDevices
)
;
}
mDevices
=
devices
;
}
MediaEngineWebRTC
:
:
MediaEngineWebRTC
(
MediaEnginePrefs
&
aPrefs
)
:
mMutex
(
"
mozilla
:
:
MediaEngineWebRTC
"
)
mVoiceEngine
(
nullptr
)
mAudioInput
(
nullptr
)
mAudioEngineInit
(
false
)
mFullDuplex
(
aPrefs
.
mFullDuplex
)
{
#
ifndef
MOZ_B2G_CAMERA
nsCOMPtr
<
nsIComponentRegistrar
>
compMgr
;
NS_GetComponentRegistrar
(
getter_AddRefs
(
compMgr
)
)
;
if
(
compMgr
)
{
compMgr
-
>
IsContractIDRegistered
(
NS_TABSOURCESERVICE_CONTRACTID
&
mHasTabVideoSource
)
;
}
#
else
#
ifdef
MOZ_WIDGET_GONK
AsyncLatencyLogger
:
:
Get
(
)
-
>
AddRef
(
)
;
#
endif
#
endif
gFarendObserver
=
new
AudioOutputObserver
(
)
;
NS_NewNamedThread
(
"
AudioGUM
"
getter_AddRefs
(
mThread
)
)
;
MOZ_ASSERT
(
mThread
)
;
}
void
MediaEngineWebRTC
:
:
EnumerateVideoDevices
(
dom
:
:
MediaSourceEnum
aMediaSource
nsTArray
<
RefPtr
<
MediaEngineVideoSource
>
>
*
aVSources
)
{
MutexAutoLock
lock
(
mMutex
)
;
#
if
defined
(
MOZ_B2G_CAMERA
)
&
&
defined
(
MOZ_WIDGET_GONK
)
if
(
aMediaSource
!
=
dom
:
:
MediaSourceEnum
:
:
Camera
)
{
return
;
}
int
num
=
0
;
nsresult
result
;
result
=
ICameraControl
:
:
GetNumberOfCameras
(
num
)
;
if
(
num
<
=
0
|
|
result
!
=
NS_OK
)
{
return
;
}
for
(
int
i
=
0
;
i
<
num
;
i
+
+
)
{
nsCString
cameraName
;
result
=
ICameraControl
:
:
GetCameraName
(
i
cameraName
)
;
if
(
result
!
=
NS_OK
)
{
continue
;
}
RefPtr
<
MediaEngineVideoSource
>
vSource
;
NS_ConvertUTF8toUTF16
uuid
(
cameraName
)
;
if
(
mVideoSources
.
Get
(
uuid
getter_AddRefs
(
vSource
)
)
)
{
aVSources
-
>
AppendElement
(
vSource
.
get
(
)
)
;
}
else
{
vSource
=
new
MediaEngineGonkVideoSource
(
i
)
;
mVideoSources
.
Put
(
uuid
vSource
)
;
aVSources
-
>
AppendElement
(
vSource
)
;
}
}
return
;
#
else
mozilla
:
:
camera
:
:
CaptureEngine
capEngine
=
mozilla
:
:
camera
:
:
InvalidEngine
;
#
ifdef
MOZ_WIDGET_ANDROID
JavaVM
*
jvm
;
JNIEnv
*
const
env
=
jni
:
:
GetEnvForThread
(
)
;
MOZ_ALWAYS_TRUE
(
!
env
-
>
GetJavaVM
(
&
jvm
)
)
;
if
(
webrtc
:
:
VideoEngine
:
:
SetAndroidObjects
(
jvm
)
!
=
0
)
{
LOG
(
(
"
VieCapture
:
SetAndroidObjects
Failed
"
)
)
;
return
;
}
#
endif
switch
(
aMediaSource
)
{
case
dom
:
:
MediaSourceEnum
:
:
Window
:
capEngine
=
mozilla
:
:
camera
:
:
WinEngine
;
break
;
case
dom
:
:
MediaSourceEnum
:
:
Application
:
capEngine
=
mozilla
:
:
camera
:
:
AppEngine
;
break
;
case
dom
:
:
MediaSourceEnum
:
:
Screen
:
capEngine
=
mozilla
:
:
camera
:
:
ScreenEngine
;
break
;
case
dom
:
:
MediaSourceEnum
:
:
Browser
:
capEngine
=
mozilla
:
:
camera
:
:
BrowserEngine
;
break
;
case
dom
:
:
MediaSourceEnum
:
:
Camera
:
capEngine
=
mozilla
:
:
camera
:
:
CameraEngine
;
break
;
default
:
MOZ_CRASH
(
"
No
valid
video
engine
"
)
;
break
;
}
int
num
;
num
=
mozilla
:
:
camera
:
:
GetChildAndCall
(
&
mozilla
:
:
camera
:
:
CamerasChild
:
:
NumberOfCaptureDevices
capEngine
)
;
if
(
num
<
=
0
)
{
return
;
}
for
(
int
i
=
0
;
i
<
num
;
i
+
+
)
{
char
deviceName
[
MediaEngineSource
:
:
kMaxDeviceNameLength
]
;
char
uniqueId
[
MediaEngineSource
:
:
kMaxUniqueIdLength
]
;
deviceName
[
0
]
=
'
\
0
'
;
uniqueId
[
0
]
=
'
\
0
'
;
int
error
;
error
=
mozilla
:
:
camera
:
:
GetChildAndCall
(
&
mozilla
:
:
camera
:
:
CamerasChild
:
:
GetCaptureDevice
capEngine
i
deviceName
sizeof
(
deviceName
)
uniqueId
sizeof
(
uniqueId
)
)
;
if
(
error
)
{
LOG
(
(
"
camera
:
GetCaptureDevice
:
Failed
%
d
"
error
)
)
;
continue
;
}
#
ifdef
DEBUG
LOG
(
(
"
Capture
Device
Index
%
d
Name
%
s
"
i
deviceName
)
)
;
webrtc
:
:
CaptureCapability
cap
;
int
numCaps
=
mozilla
:
:
camera
:
:
GetChildAndCall
(
&
mozilla
:
:
camera
:
:
CamerasChild
:
:
NumberOfCapabilities
capEngine
uniqueId
)
;
LOG
(
(
"
Number
of
Capabilities
%
d
"
numCaps
)
)
;
for
(
int
j
=
0
;
j
<
numCaps
;
j
+
+
)
{
if
(
mozilla
:
:
camera
:
:
GetChildAndCall
(
&
mozilla
:
:
camera
:
:
CamerasChild
:
:
GetCaptureCapability
capEngine
uniqueId
j
cap
)
!
=
0
)
{
break
;
}
LOG
(
(
"
type
=
%
d
width
=
%
d
height
=
%
d
maxFPS
=
%
d
"
cap
.
rawType
cap
.
width
cap
.
height
cap
.
maxFPS
)
)
;
}
#
endif
if
(
uniqueId
[
0
]
=
=
'
\
0
'
)
{
strncpy
(
uniqueId
deviceName
sizeof
(
uniqueId
)
)
;
uniqueId
[
sizeof
(
uniqueId
)
-
1
]
=
'
\
0
'
;
}
RefPtr
<
MediaEngineVideoSource
>
vSource
;
NS_ConvertUTF8toUTF16
uuid
(
uniqueId
)
;
if
(
mVideoSources
.
Get
(
uuid
getter_AddRefs
(
vSource
)
)
)
{
static_cast
<
MediaEngineRemoteVideoSource
*
>
(
vSource
.
get
(
)
)
-
>
Refresh
(
i
)
;
aVSources
-
>
AppendElement
(
vSource
.
get
(
)
)
;
}
else
{
vSource
=
new
MediaEngineRemoteVideoSource
(
i
capEngine
aMediaSource
)
;
mVideoSources
.
Put
(
uuid
vSource
)
;
aVSources
-
>
AppendElement
(
vSource
)
;
}
}
if
(
mHasTabVideoSource
|
|
dom
:
:
MediaSourceEnum
:
:
Browser
=
=
aMediaSource
)
{
aVSources
-
>
AppendElement
(
new
MediaEngineTabVideoSource
(
)
)
;
}
#
endif
}
void
MediaEngineWebRTC
:
:
EnumerateAudioDevices
(
dom
:
:
MediaSourceEnum
aMediaSource
nsTArray
<
RefPtr
<
MediaEngineAudioSource
>
>
*
aASources
)
{
ScopedCustomReleasePtr
<
webrtc
:
:
VoEBase
>
ptrVoEBase
;
MutexAutoLock
lock
(
mMutex
)
;
if
(
aMediaSource
=
=
dom
:
:
MediaSourceEnum
:
:
AudioCapture
)
{
RefPtr
<
MediaEngineWebRTCAudioCaptureSource
>
audioCaptureSource
=
new
MediaEngineWebRTCAudioCaptureSource
(
nullptr
)
;
aASources
-
>
AppendElement
(
audioCaptureSource
)
;
return
;
}
#
ifdef
MOZ_WIDGET_ANDROID
jobject
context
=
mozilla
:
:
AndroidBridge
:
:
Bridge
(
)
-
>
GetGlobalContextRef
(
)
;
JavaVM
*
jvm
;
JNIEnv
*
const
env
=
jni
:
:
GetEnvForThread
(
)
;
MOZ_ALWAYS_TRUE
(
!
env
-
>
GetJavaVM
(
&
jvm
)
)
;
if
(
webrtc
:
:
VoiceEngine
:
:
SetAndroidObjects
(
jvm
(
void
*
)
context
)
!
=
0
)
{
LOG
(
(
"
VoiceEngine
:
SetAndroidObjects
Failed
"
)
)
;
return
;
}
#
endif
if
(
!
mVoiceEngine
)
{
mVoiceEngine
=
webrtc
:
:
VoiceEngine
:
:
Create
(
)
;
if
(
!
mVoiceEngine
)
{
return
;
}
}
ptrVoEBase
=
webrtc
:
:
VoEBase
:
:
GetInterface
(
mVoiceEngine
)
;
if
(
!
ptrVoEBase
)
{
return
;
}
if
(
!
mAudioEngineInit
)
{
if
(
ptrVoEBase
-
>
Init
(
)
<
0
)
{
return
;
}
mAudioEngineInit
=
true
;
}
if
(
!
mAudioInput
)
{
if
(
mFullDuplex
)
{
mAudioInput
=
new
mozilla
:
:
AudioInputCubeb
(
mVoiceEngine
)
;
}
else
{
mAudioInput
=
new
mozilla
:
:
AudioInputWebRTC
(
mVoiceEngine
)
;
}
}
int
nDevices
=
0
;
mAudioInput
-
>
GetNumOfRecordingDevices
(
nDevices
)
;
int
i
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
|
|
defined
(
MOZ_WIDGET_GONK
)
i
=
0
;
#
else
i
=
-
1
;
#
endif
for
(
;
i
<
nDevices
;
i
+
+
)
{
char
deviceName
[
128
]
;
char
uniqueId
[
128
]
;
deviceName
[
0
]
=
'
\
0
'
;
uniqueId
[
0
]
=
'
\
0
'
;
int
error
=
mAudioInput
-
>
GetRecordingDeviceName
(
i
deviceName
uniqueId
)
;
if
(
error
)
{
LOG
(
(
"
VoEHardware
:
GetRecordingDeviceName
:
Failed
%
d
"
error
)
)
;
continue
;
}
if
(
uniqueId
[
0
]
=
=
'
\
0
'
)
{
MOZ_ASSERT
(
sizeof
(
deviceName
)
=
=
sizeof
(
uniqueId
)
)
;
strcpy
(
uniqueId
deviceName
)
;
}
RefPtr
<
MediaEngineAudioSource
>
aSource
;
NS_ConvertUTF8toUTF16
uuid
(
uniqueId
)
;
if
(
mAudioSources
.
Get
(
uuid
getter_AddRefs
(
aSource
)
)
)
{
aASources
-
>
AppendElement
(
aSource
.
get
(
)
)
;
}
else
{
AudioInput
*
audioinput
=
mAudioInput
;
if
(
mFullDuplex
)
{
audioinput
=
new
mozilla
:
:
AudioInputCubeb
(
mVoiceEngine
i
)
;
}
aSource
=
new
MediaEngineWebRTCMicrophoneSource
(
mThread
mVoiceEngine
audioinput
i
deviceName
uniqueId
)
;
mAudioSources
.
Put
(
uuid
aSource
)
;
aASources
-
>
AppendElement
(
aSource
)
;
}
}
}
void
MediaEngineWebRTC
:
:
Shutdown
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
LOG
(
(
"
%
s
"
__FUNCTION__
)
)
;
for
(
auto
iter
=
mVideoSources
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
MediaEngineVideoSource
*
source
=
iter
.
UserData
(
)
;
if
(
source
)
{
source
-
>
Shutdown
(
)
;
}
}
for
(
auto
iter
=
mAudioSources
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
MediaEngineAudioSource
*
source
=
iter
.
UserData
(
)
;
if
(
source
)
{
source
-
>
Shutdown
(
)
;
}
}
mVideoSources
.
Clear
(
)
;
mAudioSources
.
Clear
(
)
;
if
(
mVoiceEngine
)
{
mVoiceEngine
-
>
SetTraceCallback
(
nullptr
)
;
webrtc
:
:
VoiceEngine
:
:
Delete
(
mVoiceEngine
)
;
}
mVoiceEngine
=
nullptr
;
mozilla
:
:
camera
:
:
Shutdown
(
)
;
AudioInputCubeb
:
:
CleanupGlobalData
(
)
;
if
(
mThread
)
{
mThread
-
>
Shutdown
(
)
;
mThread
=
nullptr
;
}
}
}
