#
ifndef
CUBEBDEVICEENUMERATOR_H_
#
define
CUBEBDEVICEENUMERATOR_H_
#
include
"
AudioDeviceInfo
.
h
"
#
include
"
CubebUtils
.
h
"
#
include
"
cubeb
/
cubeb
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
media
{
template
<
typename
T
>
class
Refcountable
;
}
class
CubebDeviceEnumerator
final
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CubebDeviceEnumerator
)
static
CubebDeviceEnumerator
*
GetInstance
(
)
;
static
void
Shutdown
(
)
;
using
AudioDeviceSet
=
media
:
:
Refcountable
<
nsTArray
<
RefPtr
<
AudioDeviceInfo
>
>
>
;
RefPtr
<
const
AudioDeviceSet
>
EnumerateAudioInputDevices
(
)
;
RefPtr
<
const
AudioDeviceSet
>
EnumerateAudioOutputDevices
(
)
;
enum
class
Side
{
INPUT
OUTPUT
}
;
already_AddRefed
<
AudioDeviceInfo
>
DeviceInfoFromName
(
const
nsString
&
aName
Side
aSide
)
;
MediaEventSource
<
void
>
&
OnAudioInputDeviceListChange
(
)
{
return
mOnInputDeviceListChange
;
}
MediaEventSource
<
void
>
&
OnAudioOutputDeviceListChange
(
)
{
return
mOnOutputDeviceListChange
;
}
RefPtr
<
AudioDeviceInfo
>
DefaultDevice
(
Side
aSide
)
;
private
:
CubebDeviceEnumerator
(
)
;
~
CubebDeviceEnumerator
(
)
;
static
void
InputAudioDeviceListChanged_s
(
cubeb
*
aContext
void
*
aUser
)
;
static
void
OutputAudioDeviceListChanged_s
(
cubeb
*
aContext
void
*
aUser
)
;
void
AudioDeviceListChanged
(
Side
aSide
)
;
RefPtr
<
const
AudioDeviceSet
>
EnumerateAudioDevices
(
Side
aSide
)
;
Mutex
mMutex
;
RefPtr
<
const
AudioDeviceSet
>
mInputDevices
;
RefPtr
<
const
AudioDeviceSet
>
mOutputDevices
;
bool
mManualInputInvalidation
;
bool
mManualOutputInvalidation
;
MediaEventProducer
<
void
>
mOnInputDeviceListChange
;
MediaEventProducer
<
void
>
mOnOutputDeviceListChange
;
}
;
typedef
CubebDeviceEnumerator
Enumerator
;
typedef
CubebDeviceEnumerator
:
:
Side
EnumeratorSide
;
}
#
endif
