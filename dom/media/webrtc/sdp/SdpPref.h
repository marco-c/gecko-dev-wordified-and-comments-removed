#
ifndef
_SDPPREF_H_
#
define
_SDPPREF_H_
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
<
string
>
#
include
<
unordered_map
>
namespace
mozilla
{
class
SdpParser
;
class
SdpPref
{
private
:
static
constexpr
const
char
PRIMARY_PREF
[
]
=
"
media
.
peerconnection
.
sdp
.
parser
"
;
static
constexpr
const
char
ALTERNATE_PREF
[
]
=
"
media
.
peerconnection
.
sdp
.
alternate_parse_mode
"
;
static
constexpr
const
char
STRICT_SUCCESS_PREF
[
]
=
"
media
.
peerconnection
.
sdp
.
strict_success
"
;
static
constexpr
const
char
DEFAULT
[
]
=
"
default
"
;
public
:
enum
class
Parsers
{
Sipcc
WebRtcSdp
}
;
enum
class
AlternateParseModes
{
Parallel
Failover
Never
}
;
private
:
template
<
class
T
>
static
auto
Pref
(
const
std
:
:
string
&
aPrefName
const
std
:
:
unordered_map
<
std
:
:
string
T
>
&
aMap
)
-
>
T
{
MOZ_ASSERT
(
aMap
.
find
(
DEFAULT
)
!
=
aMap
.
end
(
)
)
;
nsCString
value
;
if
(
NS_FAILED
(
Preferences
:
:
GetCString
(
aPrefName
.
c_str
(
)
value
)
)
)
{
return
aMap
.
at
(
DEFAULT
)
;
}
const
auto
found
=
aMap
.
find
(
value
.
get
(
)
)
;
if
(
found
!
=
aMap
.
end
(
)
)
{
return
found
-
>
second
;
}
return
aMap
.
at
(
DEFAULT
)
;
}
static
auto
Parser
(
)
-
>
Parsers
;
static
auto
AlternateParseMode
(
)
-
>
AlternateParseModes
;
public
:
static
auto
StrictSuccess
(
)
-
>
bool
;
static
auto
Primary
(
)
-
>
UniquePtr
<
SdpParser
>
;
static
auto
Secondary
(
)
-
>
Maybe
<
UniquePtr
<
SdpParser
>
>
;
static
auto
Failover
(
)
-
>
Maybe
<
UniquePtr
<
SdpParser
>
>
;
}
;
}
#
endif
