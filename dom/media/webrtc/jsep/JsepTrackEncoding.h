#
ifndef
_JESPTRACKENCODING_H_
#
define
_JESPTRACKENCODING_H_
#
include
<
vector
>
#
include
"
common
/
EncodingConstraints
.
h
"
#
include
"
jsep
/
JsepCodecDescription
.
h
"
namespace
mozilla
{
class
JsepTrackEncoding
{
public
:
JsepTrackEncoding
(
)
=
default
;
JsepTrackEncoding
(
const
JsepTrackEncoding
&
orig
)
{
*
this
=
orig
;
}
JsepTrackEncoding
(
JsepTrackEncoding
&
&
aOrig
)
=
default
;
JsepTrackEncoding
&
operator
=
(
const
JsepTrackEncoding
&
aRhs
)
{
if
(
this
!
=
&
aRhs
)
{
mRid
=
aRhs
.
mRid
;
mCodecs
.
clear
(
)
;
for
(
const
auto
&
codec
:
aRhs
.
mCodecs
)
{
mCodecs
.
emplace_back
(
codec
-
>
Clone
(
)
)
;
}
}
return
*
this
;
}
const
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
&
GetCodecs
(
)
const
{
return
mCodecs
;
}
void
AddCodec
(
const
JsepCodecDescription
&
codec
)
{
mCodecs
.
emplace_back
(
codec
.
Clone
(
)
)
;
}
bool
HasFormat
(
const
std
:
:
string
&
format
)
const
{
for
(
const
auto
&
codec
:
mCodecs
)
{
if
(
codec
-
>
mDefaultPt
=
=
format
)
{
return
true
;
}
}
return
false
;
}
std
:
:
string
mRid
;
private
:
std
:
:
vector
<
UniquePtr
<
JsepCodecDescription
>
>
mCodecs
;
}
;
}
#
endif
