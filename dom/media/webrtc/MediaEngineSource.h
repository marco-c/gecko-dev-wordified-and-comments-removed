#
ifndef
MediaEngineSource_h
#
define
MediaEngineSource_h
#
include
"
MediaSegment
.
h
"
#
include
"
MediaTrackConstraints
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrackBinding
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ThreadSafeWeakPtr
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
TrackID
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Blob
;
struct
MediaTrackSettings
;
}
namespace
ipc
{
class
PrincipalInfo
;
}
class
MediaEnginePhotoCallback
;
class
MediaEnginePrefs
;
class
SourceMediaStream
;
class
MediaEnginePhotoCallback
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEnginePhotoCallback
)
virtual
nsresult
PhotoComplete
(
already_AddRefed
<
dom
:
:
Blob
>
aBlob
)
=
0
;
virtual
nsresult
PhotoError
(
nsresult
aRv
)
=
0
;
protected
:
virtual
~
MediaEnginePhotoCallback
(
)
=
default
;
}
;
enum
MediaEngineSourceState
{
kAllocated
kStarted
kStopped
kReleased
}
;
class
MediaEngineSourceInterface
{
public
:
virtual
bool
IsFake
(
)
const
=
0
;
virtual
nsString
GetName
(
)
const
=
0
;
virtual
nsCString
GetUUID
(
)
const
=
0
;
virtual
nsString
GetGroupId
(
)
const
=
0
;
virtual
dom
:
:
MediaSourceEnum
GetMediaSource
(
)
const
=
0
;
virtual
bool
GetScary
(
)
const
=
0
;
virtual
RefPtr
<
GenericNonExclusivePromise
>
GetFirstFramePromise
(
)
const
{
return
nullptr
;
}
virtual
nsresult
Allocate
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
mozilla
:
:
ipc
:
:
PrincipalInfo
&
aPrincipalInfo
const
char
*
*
aOutBadConstraint
)
=
0
;
virtual
void
SetTrack
(
const
RefPtr
<
SourceMediaStream
>
&
aStream
TrackID
aTrackID
const
PrincipalHandle
&
aPrincipal
)
=
0
;
virtual
nsresult
Start
(
)
=
0
;
virtual
nsresult
FocusOnSelectedSource
(
)
=
0
;
virtual
nsresult
Reconfigure
(
const
dom
:
:
MediaTrackConstraints
&
aConstraints
const
MediaEnginePrefs
&
aPrefs
const
nsString
&
aDeviceId
const
char
*
*
aOutBadConstraint
)
=
0
;
virtual
nsresult
Stop
(
)
=
0
;
virtual
nsresult
Deallocate
(
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
virtual
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
=
0
;
virtual
uint32_t
GetBestFitnessDistance
(
const
nsTArray
<
const
NormalizedConstraintSet
*
>
&
aConstraintSets
const
nsString
&
aDeviceId
)
const
=
0
;
virtual
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
=
0
;
}
;
class
MediaEngineSource
:
public
MediaEngineSourceInterface
{
public
:
static
const
unsigned
int
kMaxDeviceNameLength
=
128
;
static
const
unsigned
int
kMaxUniqueIdLength
=
256
;
static
bool
IsVideo
(
dom
:
:
MediaSourceEnum
aSource
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaEngineSource
)
NS_DECL_OWNINGTHREAD
void
AssertIsOnOwningThread
(
)
const
{
NS_ASSERT_OWNINGTHREAD
(
MediaEngineSource
)
;
}
bool
IsFake
(
)
const
override
;
bool
GetScary
(
)
const
override
;
nsresult
FocusOnSelectedSource
(
)
override
;
void
Shutdown
(
)
override
;
nsresult
TakePhoto
(
MediaEnginePhotoCallback
*
aCallback
)
override
;
void
GetSettings
(
dom
:
:
MediaTrackSettings
&
aOutSettings
)
const
override
;
protected
:
virtual
~
MediaEngineSource
(
)
;
}
;
}
#
endif
