#
ifndef
BaseMediaResource_h
#
define
BaseMediaResource_h
#
include
"
MediaResource
.
h
"
#
include
"
MediaResourceCallback
.
h
"
#
include
"
MediaCache
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIStreamListener
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
BaseMediaResource
:
public
MediaResource
{
public
:
static
already_AddRefed
<
BaseMediaResource
>
Create
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
bool
aIsPrivateBrowsing
)
;
virtual
void
ThrottleReadahead
(
bool
bThrottle
)
{
}
virtual
void
SetPlaybackRate
(
uint32_t
aBytesPerSecond
)
=
0
;
virtual
double
GetDownloadRate
(
bool
*
aIsReliable
)
=
0
;
void
SetLoadInBackground
(
bool
aLoadInBackground
)
;
virtual
void
Suspend
(
bool
aCloseImmediately
)
=
0
;
virtual
void
Resume
(
)
=
0
;
virtual
void
SetReadMode
(
MediaCacheStream
:
:
ReadMode
aMode
)
=
0
;
virtual
bool
IsTransportSeekable
(
)
=
0
;
virtual
already_AddRefed
<
nsIPrincipal
>
GetCurrentPrincipal
(
)
=
0
;
virtual
nsresult
Open
(
nsIStreamListener
*
*
aStreamListener
)
=
0
;
virtual
bool
CanClone
(
)
{
return
false
;
}
virtual
already_AddRefed
<
BaseMediaResource
>
CloneData
(
MediaResourceCallback
*
aCallback
)
{
return
nullptr
;
}
bool
IsLiveStream
(
)
{
return
GetLength
(
)
=
=
-
1
;
}
virtual
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
virtual
nsCString
GetDebugInfo
(
)
{
return
nsCString
(
)
;
}
protected
:
BaseMediaResource
(
MediaResourceCallback
*
aCallback
nsIChannel
*
aChannel
nsIURI
*
aURI
)
:
mCallback
(
aCallback
)
mChannel
(
aChannel
)
mURI
(
aURI
)
mLoadInBackground
(
false
)
{
}
virtual
~
BaseMediaResource
(
)
{
}
void
ModifyLoadFlags
(
nsLoadFlags
aFlags
)
;
RefPtr
<
MediaResourceCallback
>
mCallback
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIURI
>
mURI
;
bool
mLoadInBackground
;
}
;
}
#
endif
