#
ifndef
TRACING_H
#
define
TRACING_H
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
cstdio
>
#
include
"
AsyncLogger
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
if
defined
(
_MSC_VER
)
#
define
FUNCTION_SIGNATURE
__FUNCSIG__
#
elif
defined
(
__GNUC__
)
#
define
FUNCTION_SIGNATURE
__PRETTY_FUNCTION__
#
endif
extern
mozilla
:
:
AsyncLogger
gAudioCallbackTraceLogger
;
void
StartAudioCallbackTracing
(
)
;
void
StopAudioCallbackTracing
(
)
;
#
ifdef
TRACING
#
define
TRACE_AUDIO_CALLBACK
(
)
\
AutoTracer
trace
(
gAudioCallbackTraceLogger
FUNCTION_SIGNATURE
)
;
#
define
TRACE_AUDIO_CALLBACK_BUDGET
(
aFrames
aSampleRate
)
\
AutoTracer
budget
(
gAudioCallbackTraceLogger
"
Real
-
time
budget
"
\
AutoTracer
:
:
EventType
:
:
BUDGET
aFrames
aSampleRate
)
;
#
define
TRACE_AUDIO_CALLBACK_COMMENT
(
aFmt
.
.
.
)
\
AutoTracer
trace
(
gAudioCallbackTraceLogger
FUNCTION_SIGNATURE
\
AutoTracer
:
:
EventType
:
:
DURATION
aFmt
#
#
__VA_ARGS__
)
;
#
define
TRACE
(
)
\
AutoTracer
trace
(
gAudioCallbackTraceLogger
FUNCTION_SIGNATURE
)
;
#
define
TRACE_COMMENT
(
aFmt
.
.
.
)
\
AutoTracer
trace
(
gAudioCallbackTraceLogger
FUNCTION_SIGNATURE
\
AutoTracer
:
:
EventType
:
:
DURATION
aFmt
#
#
__VA_ARGS__
)
;
#
else
#
define
TRACE
(
)
#
define
TRACE_AUDIO_CALLBACK_BUDGET
(
aFrames
aSampleRate
)
#
define
TRACE_COMMENT
(
aFmt
.
.
.
)
#
endif
class
MOZ_RAII
AutoTracer
{
public
:
static
const
int32_t
BUFFER_SIZE
=
mozilla
:
:
AsyncLogger
:
:
MAX_MESSAGE_LENGTH
/
2
;
enum
class
EventType
{
DURATION
BUDGET
}
;
AutoTracer
(
mozilla
:
:
AsyncLogger
&
aLogger
const
char
*
aLocation
EventType
aEventType
=
EventType
:
:
DURATION
const
char
*
aComment
=
nullptr
)
;
template
<
typename
.
.
.
Args
>
AutoTracer
(
mozilla
:
:
AsyncLogger
&
aLogger
const
char
*
aLocation
EventType
aEventType
const
char
*
aFormat
Args
.
.
.
aArgs
)
:
mLogger
(
aLogger
)
mLocation
(
aLocation
)
mComment
(
mBuffer
)
mEventType
(
aEventType
)
{
MOZ_ASSERT
(
aEventType
=
=
EventType
:
:
DURATION
)
;
if
(
aLogger
.
Enabled
(
)
)
{
int32_t
size
=
snprintf
(
mBuffer
BUFFER_SIZE
aFormat
aArgs
.
.
.
)
;
size
=
std
:
:
min
(
size
BUFFER_SIZE
-
1
)
;
mBuffer
[
size
]
=
0
;
PrintEvent
(
aLocation
"
perf
"
mComment
mozilla
:
:
AsyncLogger
:
:
TracingPhase
:
:
BEGIN
)
;
}
}
AutoTracer
(
mozilla
:
:
AsyncLogger
&
aLogger
const
char
*
aLocation
EventType
aEventType
uint64_t
aFrames
uint64_t
aSampleRate
)
;
~
AutoTracer
(
)
;
private
:
void
PrintEvent
(
const
char
*
aName
const
char
*
aCategory
const
char
*
aComment
mozilla
:
:
AsyncLogger
:
:
TracingPhase
aPhase
)
;
void
PrintBudget
(
const
char
*
aName
const
char
*
aCategory
uint64_t
aDuration
uint64_t
aFrames
uint64_t
aSampleRate
)
;
mozilla
:
:
AsyncLogger
&
mLogger
;
const
char
*
mLocation
;
const
char
*
mComment
;
char
mBuffer
[
BUFFER_SIZE
]
;
const
EventType
mEventType
;
}
;
#
endif
