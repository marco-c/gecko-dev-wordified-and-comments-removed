#
ifndef
MEDIA_PREFS_H
#
define
MEDIA_PREFS_H
#
define
DECL_MEDIA_PREF
(
Pref
Name
Type
Default
)
\
public
:
\
static
const
Type
&
Name
(
)
{
MOZ_ASSERT
(
SingletonExists
(
)
)
;
return
GetSingleton
(
)
.
mPref
#
#
Name
.
mValue
;
}
\
private
:
\
static
const
char
*
Get
#
#
Name
#
#
PrefName
(
)
{
return
Pref
;
}
\
static
Type
Get
#
#
Name
#
#
PrefDefault
(
)
{
return
Default
;
}
\
PrefTemplate
<
Type
Get
#
#
Name
#
#
PrefDefault
Get
#
#
Name
#
#
PrefName
>
mPref
#
#
Name
namespace
mozilla
{
template
<
class
T
>
class
StaticAutoPtr
;
class
MediaPrefs
final
{
private
:
template
<
class
T
T
Default
(
)
const
char
*
Pref
(
)
>
class
PrefTemplate
{
public
:
PrefTemplate
(
)
:
mValue
(
Default
(
)
)
{
Register
(
Pref
(
)
)
;
}
T
mValue
;
private
:
void
Register
(
const
char
*
aPreference
)
{
AssertMainThread
(
)
;
PrefAddVarCache
(
&
mValue
aPreference
mValue
)
;
}
}
;
DECL_MEDIA_PREF
(
"
accessibility
.
monoaudio
.
enable
"
MonoAudio
bool
false
)
;
DECL_MEDIA_PREF
(
"
media
.
resampling
.
enabled
"
AudioSinkResampling
bool
false
)
;
DECL_MEDIA_PREF
(
"
media
.
resampling
.
rate
"
AudioSinkResampleRate
uint32_t
48000
)
;
DECL_MEDIA_PREF
(
"
media
.
forcestereo
.
enabled
"
AudioSinkForceStereo
bool
true
)
;
public
:
static
MediaPrefs
&
GetSingleton
(
)
;
static
bool
SingletonExists
(
)
;
private
:
template
<
class
T
>
friend
class
StaticAutoPtr
;
static
StaticAutoPtr
<
MediaPrefs
>
sInstance
;
static
void
PrefAddVarCache
(
bool
*
const
char
*
bool
)
;
static
void
PrefAddVarCache
(
int32_t
*
const
char
*
int32_t
)
;
static
void
PrefAddVarCache
(
uint32_t
*
const
char
*
uint32_t
)
;
static
void
PrefAddVarCache
(
float
*
const
char
*
float
)
;
static
void
AssertMainThread
(
)
;
MediaPrefs
(
)
;
MediaPrefs
(
const
MediaPrefs
&
)
=
delete
;
MediaPrefs
&
operator
=
(
const
MediaPrefs
&
)
=
delete
;
}
;
#
undef
DECL_MEDIA_PREF
/
*
Don
'
t
need
it
outside
of
this
file
*
/
}
#
endif
