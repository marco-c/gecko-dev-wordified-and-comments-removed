#
if
!
defined
(
MediaQueue_h_
)
#
define
MediaQueue_h_
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
MediaEventSource
.
h
"
namespace
mozilla
{
template
<
class
T
>
class
MediaQueueDeallocator
:
public
nsDequeFunctor
{
virtual
void
*
operator
(
)
(
void
*
aObject
)
{
RefPtr
<
T
>
releaseMe
=
dont_AddRef
(
static_cast
<
T
*
>
(
aObject
)
)
;
return
nullptr
;
}
}
;
template
<
class
T
>
class
MediaQueue
:
private
nsDeque
{
public
:
MediaQueue
(
)
:
nsDeque
(
new
MediaQueueDeallocator
<
T
>
(
)
)
mReentrantMonitor
(
"
mediaqueue
"
)
mEndOfStream
(
false
)
{
}
~
MediaQueue
(
)
{
Reset
(
)
;
}
inline
size_t
GetSize
(
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
nsDeque
:
:
GetSize
(
)
;
}
inline
void
Push
(
T
*
aItem
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
MOZ_ASSERT
(
aItem
)
;
NS_ADDREF
(
aItem
)
;
MOZ_ASSERT
(
aItem
-
>
GetEndTime
(
)
>
=
aItem
-
>
mTime
)
;
nsDeque
:
:
Push
(
aItem
)
;
mPushEvent
.
Notify
(
RefPtr
<
T
>
(
aItem
)
)
;
}
inline
void
PushFront
(
T
*
aItem
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
MOZ_ASSERT
(
aItem
)
;
NS_ADDREF
(
aItem
)
;
nsDeque
:
:
PushFront
(
aItem
)
;
}
inline
already_AddRefed
<
T
>
PopFront
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
RefPtr
<
T
>
rv
=
dont_AddRef
(
static_cast
<
T
*
>
(
nsDeque
:
:
PopFront
(
)
)
)
;
if
(
rv
)
{
mPopEvent
.
Notify
(
rv
)
;
}
return
rv
.
forget
(
)
;
}
inline
RefPtr
<
T
>
Peek
(
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
static_cast
<
T
*
>
(
nsDeque
:
:
Peek
(
)
)
;
}
inline
RefPtr
<
T
>
PeekFront
(
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
static_cast
<
T
*
>
(
nsDeque
:
:
PeekFront
(
)
)
;
}
void
Reset
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
while
(
GetSize
(
)
>
0
)
{
RefPtr
<
T
>
x
=
dont_AddRef
(
static_cast
<
T
*
>
(
nsDeque
:
:
PopFront
(
)
)
)
;
}
mEndOfStream
=
false
;
}
bool
AtEndOfStream
(
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
GetSize
(
)
=
=
0
&
&
mEndOfStream
;
}
bool
IsFinished
(
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
return
mEndOfStream
;
}
void
Finish
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
mEndOfStream
=
true
;
mFinishEvent
.
Notify
(
)
;
}
int64_t
Duration
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
if
(
GetSize
(
)
=
=
0
)
{
return
0
;
}
T
*
last
=
static_cast
<
T
*
>
(
nsDeque
:
:
Peek
(
)
)
;
T
*
first
=
static_cast
<
T
*
>
(
nsDeque
:
:
PeekFront
(
)
)
;
return
last
-
>
GetEndTime
(
)
-
first
-
>
mTime
;
}
void
LockedForEach
(
nsDequeFunctor
&
aFunctor
)
const
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
ForEach
(
aFunctor
)
;
}
void
GetElementsAfter
(
int64_t
aTime
nsTArray
<
RefPtr
<
T
>
>
*
aResult
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
if
(
GetSize
(
)
=
=
0
)
return
;
size_t
i
;
for
(
i
=
GetSize
(
)
-
1
;
i
>
0
;
-
-
i
)
{
T
*
v
=
static_cast
<
T
*
>
(
ObjectAt
(
i
)
)
;
if
(
v
-
>
GetEndTime
(
)
<
aTime
)
break
;
}
for
(
;
i
<
GetSize
(
)
;
+
+
i
)
{
RefPtr
<
T
>
elem
=
static_cast
<
T
*
>
(
ObjectAt
(
static_cast
<
size_t
>
(
i
)
)
)
;
aResult
-
>
AppendElement
(
elem
)
;
}
}
void
GetFirstElements
(
uint32_t
aMaxElements
nsTArray
<
RefPtr
<
T
>
>
*
aResult
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
for
(
size_t
i
=
0
;
i
<
aMaxElements
&
&
i
<
GetSize
(
)
;
+
+
i
)
{
*
aResult
-
>
AppendElement
(
)
=
static_cast
<
T
*
>
(
ObjectAt
(
i
)
)
;
}
}
uint32_t
FrameCount
(
)
{
ReentrantMonitorAutoEnter
mon
(
mReentrantMonitor
)
;
uint32_t
frames
=
0
;
for
(
size_t
i
=
0
;
i
<
GetSize
(
)
;
+
+
i
)
{
T
*
v
=
static_cast
<
T
*
>
(
ObjectAt
(
i
)
)
;
frames
+
=
v
-
>
mFrames
;
}
return
frames
;
}
MediaEventSource
<
RefPtr
<
T
>
>
&
PopEvent
(
)
{
return
mPopEvent
;
}
MediaEventSource
<
RefPtr
<
T
>
>
&
PushEvent
(
)
{
return
mPushEvent
;
}
MediaEventSource
<
void
>
&
FinishEvent
(
)
{
return
mFinishEvent
;
}
private
:
mutable
ReentrantMonitor
mReentrantMonitor
;
MediaEventProducer
<
RefPtr
<
T
>
>
mPopEvent
;
MediaEventProducer
<
RefPtr
<
T
>
>
mPushEvent
;
MediaEventProducer
<
void
>
mFinishEvent
;
bool
mEndOfStream
;
}
;
}
#
endif
