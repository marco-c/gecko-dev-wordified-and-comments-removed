#
if
!
defined
(
MediaQueue_h_
)
#
define
MediaQueue_h_
#
include
<
type_traits
>
#
include
"
mozilla
/
RecursiveMutex
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
nsDeque
.
h
"
#
include
"
MediaEventSource
.
h
"
#
include
"
TimeUnits
.
h
"
namespace
mozilla
{
class
AudioData
;
template
<
class
T
>
class
MediaQueueDeallocator
:
public
nsDequeFunctor
<
T
>
{
virtual
void
operator
(
)
(
T
*
aObject
)
override
{
RefPtr
<
T
>
releaseMe
=
dont_AddRef
(
aObject
)
;
}
}
;
template
<
class
T
>
class
MediaQueue
:
private
nsDeque
<
T
>
{
public
:
MediaQueue
(
)
:
nsDeque
<
T
>
(
new
MediaQueueDeallocator
<
T
>
(
)
)
mRecursiveMutex
(
"
mediaqueue
"
)
mEndOfStream
(
false
)
{
}
~
MediaQueue
(
)
{
Reset
(
)
;
}
inline
size_t
GetSize
(
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
return
nsDeque
<
T
>
:
:
GetSize
(
)
;
}
inline
void
Push
(
T
*
aItem
)
{
MOZ_DIAGNOSTIC_ASSERT
(
aItem
)
;
Push
(
do_AddRef
(
aItem
)
)
;
}
inline
void
Push
(
already_AddRefed
<
T
>
aItem
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
T
*
item
=
aItem
.
take
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
item
)
;
MOZ_DIAGNOSTIC_ASSERT
(
item
-
>
GetEndTime
(
)
>
=
item
-
>
mTime
)
;
nsDeque
<
T
>
:
:
Push
(
item
)
;
mPushEvent
.
Notify
(
RefPtr
<
T
>
(
item
)
)
;
if
(
mEndOfStream
)
{
mEndOfStream
=
false
;
}
}
inline
already_AddRefed
<
T
>
PopFront
(
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
RefPtr
<
T
>
rv
=
dont_AddRef
(
nsDeque
<
T
>
:
:
PopFront
(
)
)
;
if
(
rv
)
{
MOZ_DIAGNOSTIC_ASSERT
(
rv
-
>
GetEndTime
(
)
>
=
rv
-
>
mTime
)
;
mPopFrontEvent
.
Notify
(
rv
)
;
}
return
rv
.
forget
(
)
;
}
inline
already_AddRefed
<
T
>
PopBack
(
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
RefPtr
<
T
>
rv
=
dont_AddRef
(
nsDeque
<
T
>
:
:
Pop
(
)
)
;
return
rv
.
forget
(
)
;
}
inline
RefPtr
<
T
>
PeekFront
(
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
return
nsDeque
<
T
>
:
:
PeekFront
(
)
;
}
inline
RefPtr
<
T
>
PeekBack
(
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
return
nsDeque
<
T
>
:
:
Peek
(
)
;
}
void
Reset
(
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
while
(
GetSize
(
)
>
0
)
{
RefPtr
<
T
>
x
=
dont_AddRef
(
nsDeque
<
T
>
:
:
PopFront
(
)
)
;
}
mEndOfStream
=
false
;
}
bool
AtEndOfStream
(
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
return
GetSize
(
)
=
=
0
&
&
mEndOfStream
;
}
bool
IsFinished
(
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
return
mEndOfStream
;
}
void
Finish
(
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
if
(
!
mEndOfStream
)
{
mEndOfStream
=
true
;
mFinishEvent
.
Notify
(
)
;
}
}
int64_t
Duration
(
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
if
(
GetSize
(
)
=
=
0
)
{
return
0
;
}
T
*
last
=
nsDeque
<
T
>
:
:
Peek
(
)
;
T
*
first
=
nsDeque
<
T
>
:
:
PeekFront
(
)
;
return
(
last
-
>
GetEndTime
(
)
-
first
-
>
mTime
)
.
ToMicroseconds
(
)
;
}
void
LockedForEach
(
nsDequeFunctor
<
T
>
&
aFunctor
)
const
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
nsDeque
<
T
>
:
:
ForEach
(
aFunctor
)
;
}
void
GetElementsAfter
(
int64_t
aTime
nsTArray
<
RefPtr
<
T
>
>
*
aResult
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
if
(
GetSize
(
)
=
=
0
)
return
;
size_t
i
;
for
(
i
=
GetSize
(
)
-
1
;
i
>
0
;
-
-
i
)
{
T
*
v
=
nsDeque
<
T
>
:
:
ObjectAt
(
i
)
;
if
(
v
-
>
GetEndTime
(
)
.
ToMicroseconds
(
)
<
aTime
)
break
;
}
for
(
;
i
<
GetSize
(
)
;
+
+
i
)
{
RefPtr
<
T
>
elem
=
nsDeque
<
T
>
:
:
ObjectAt
(
i
)
;
aResult
-
>
AppendElement
(
elem
)
;
}
}
void
GetElementsAfter
(
const
media
:
:
TimeUnit
&
aTime
nsTArray
<
RefPtr
<
T
>
>
*
aResult
)
{
GetElementsAfter
(
aTime
.
ToMicroseconds
(
)
aResult
)
;
}
void
GetFirstElements
(
uint32_t
aMaxElements
nsTArray
<
RefPtr
<
T
>
>
*
aResult
)
{
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
for
(
size_t
i
=
0
;
i
<
aMaxElements
&
&
i
<
GetSize
(
)
;
+
+
i
)
{
*
aResult
-
>
AppendElement
(
)
=
nsDeque
<
T
>
:
:
ObjectAt
(
i
)
;
}
}
uint32_t
AudioFramesCount
(
)
{
static_assert
(
std
:
:
is_same_v
<
T
AudioData
>
"
Only
usable
with
MediaQueue
<
AudioData
>
"
)
;
RecursiveMutexAutoLock
lock
(
mRecursiveMutex
)
;
uint32_t
frames
=
0
;
for
(
size_t
i
=
0
;
i
<
GetSize
(
)
;
+
+
i
)
{
T
*
v
=
nsDeque
<
T
>
:
:
ObjectAt
(
i
)
;
frames
+
=
v
-
>
Frames
(
)
;
}
return
frames
;
}
MediaEventSource
<
RefPtr
<
T
>
>
&
PopFrontEvent
(
)
{
return
mPopFrontEvent
;
}
MediaEventSource
<
RefPtr
<
T
>
>
&
PushEvent
(
)
{
return
mPushEvent
;
}
MediaEventSource
<
void
>
&
FinishEvent
(
)
{
return
mFinishEvent
;
}
private
:
mutable
RecursiveMutex
mRecursiveMutex
;
MediaEventProducer
<
RefPtr
<
T
>
>
mPopFrontEvent
;
MediaEventProducer
<
RefPtr
<
T
>
>
mPushEvent
;
MediaEventProducer
<
void
>
mFinishEvent
;
bool
mEndOfStream
;
}
;
}
#
endif
