#
ifndef
MOZILLA_MEDIATRACKGRAPHIMPL_H_
#
define
MOZILLA_MEDIATRACKGRAPHIMPL_H_
#
include
"
MediaTrackGraph
.
h
"
#
include
"
AudioMixer
.
h
"
#
include
"
GraphDriver
.
h
"
#
include
"
DeviceInputTrack
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Monitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
AsyncLogger
.
h
"
namespace
mozilla
{
namespace
media
{
class
ShutdownBlocker
;
}
class
AudioContextOperationControlMessage
;
template
<
typename
T
>
class
LinkedList
;
class
GraphRunner
;
class
DeviceInputTrackManager
{
public
:
DeviceInputTrackManager
(
)
=
default
;
NativeInputTrack
*
GetNativeInputTrack
(
)
;
DeviceInputTrack
*
GetDeviceInputTrack
(
CubebUtils
:
:
AudioDeviceID
aID
)
;
NonNativeInputTrack
*
GetFirstNonNativeInputTrack
(
)
;
void
Add
(
DeviceInputTrack
*
aTrack
)
;
void
Remove
(
DeviceInputTrack
*
aTrack
)
;
private
:
RefPtr
<
NativeInputTrack
>
mNativeInputTrack
;
nsTArray
<
RefPtr
<
NonNativeInputTrack
>
>
mNonNativeInputTracks
;
}
;
struct
TrackUpdate
{
RefPtr
<
MediaTrack
>
mTrack
;
TrackTime
mNextMainThreadCurrentTime
;
bool
mNextMainThreadEnded
;
}
;
class
ControlMessage
{
public
:
explicit
ControlMessage
(
MediaTrack
*
aTrack
)
:
mTrack
(
aTrack
)
{
MOZ_COUNT_CTOR
(
ControlMessage
)
;
}
MOZ_COUNTED_DTOR_VIRTUAL
(
ControlMessage
)
virtual
void
Run
(
)
=
0
;
virtual
void
RunDuringShutdown
(
)
{
}
MediaTrack
*
GetTrack
(
)
{
return
mTrack
;
}
protected
:
MediaTrack
*
mTrack
;
}
;
class
MessageBlock
{
public
:
nsTArray
<
UniquePtr
<
ControlMessage
>
>
mMessages
;
}
;
class
MediaTrackGraphImpl
:
public
MediaTrackGraph
public
GraphInterface
public
nsIMemoryReporter
public
nsIThreadObserver
public
nsITimerCallback
public
nsINamed
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
NS_DECL_NSITHREADOBSERVER
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
explicit
MediaTrackGraphImpl
(
GraphDriverType
aGraphDriverRequested
GraphRunType
aRunTypeRequested
TrackRate
aSampleRate
uint32_t
aChannelCount
CubebUtils
:
:
AudioDeviceID
aOutputDeviceID
nsISerialEventTarget
*
aMainThread
)
;
static
MediaTrackGraphImpl
*
GetInstance
(
GraphDriverType
aGraphDriverRequested
uint64_t
aWindowID
TrackRate
aSampleRate
CubebUtils
:
:
AudioDeviceID
aOutputDeviceID
nsISerialEventTarget
*
aMainThread
)
;
static
MediaTrackGraphImpl
*
GetInstanceIfExists
(
uint64_t
aWindowID
TrackRate
aSampleRate
CubebUtils
:
:
AudioDeviceID
aOutputDeviceID
)
;
bool
OnGraphThreadOrNotRunning
(
)
const
override
;
bool
OnGraphThread
(
)
const
override
;
bool
Destroyed
(
)
const
override
;
#
ifdef
DEBUG
bool
InDriverIteration
(
const
GraphDriver
*
aDriver
)
const
override
;
#
endif
void
Destroy
(
)
;
void
RunInStableState
(
bool
aSourceIsMTG
)
;
void
EnsureRunInStableState
(
)
;
void
ApplyTrackUpdate
(
TrackUpdate
*
aUpdate
)
MOZ_REQUIRES
(
mMonitor
)
;
virtual
void
AppendMessage
(
UniquePtr
<
ControlMessage
>
aMessage
)
;
void
Dispatch
(
already_AddRefed
<
nsIRunnable
>
&
&
aRunnable
)
;
void
ForceShutDown
(
)
;
bool
AddShutdownBlocker
(
)
;
void
RemoveShutdownBlocker
(
)
;
void
Init
(
)
;
static
void
FinishCollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
const
nsTArray
<
AudioNodeSizes
>
&
aAudioTrackSizes
)
;
void
CollectSizesForMemoryReport
(
already_AddRefed
<
nsIHandleReportCallback
>
aHandleReport
already_AddRefed
<
nsISupports
>
aHandlerData
)
;
bool
UpdateMainThreadState
(
)
;
IterationResult
OneIteration
(
GraphTime
aStateTime
GraphTime
aIterationEnd
AudioMixer
*
aMixer
)
override
;
IterationResult
OneIterationImpl
(
GraphTime
aStateTime
GraphTime
aIterationEnd
AudioMixer
*
aMixer
)
;
void
SignalMainThreadCleanup
(
)
;
GraphTime
IterationEnd
(
)
const
;
void
EnsureStableStateEventPosted
(
)
MOZ_REQUIRES
(
mMonitor
)
;
void
PrepareUpdatesToMainThreadState
(
bool
aFinalUpdate
)
MOZ_REQUIRES
(
mMonitor
)
;
bool
ShouldUpdateMainThread
(
)
;
void
UpdateCurrentTimeForTracks
(
GraphTime
aPrevCurrentTime
)
;
void
ProcessChunkMetadata
(
GraphTime
aPrevCurrentTime
)
;
template
<
typename
C
typename
Chunk
>
void
ProcessChunkMetadataForInterval
(
MediaTrack
*
aTrack
C
&
aSegment
TrackTime
aStart
TrackTime
aEnd
)
;
void
RunMessagesInQueue
(
)
;
void
UpdateGraph
(
GraphTime
aEndBlockingDecisions
)
;
void
SwapMessageQueues
(
)
MOZ_REQUIRES
(
mMonitor
)
{
MOZ_ASSERT
(
OnGraphThreadOrNotRunning
(
)
)
;
mMonitor
.
AssertCurrentThreadOwns
(
)
;
MOZ_ASSERT
(
mFrontMessageQueue
.
IsEmpty
(
)
)
;
mFrontMessageQueue
.
SwapElements
(
mBackMessageQueue
)
;
if
(
!
mFrontMessageQueue
.
IsEmpty
(
)
)
{
EnsureNextIteration
(
)
;
}
}
void
Process
(
AudioMixer
*
aMixer
)
;
void
RunMessageAfterProcessing
(
UniquePtr
<
ControlMessage
>
aMessage
)
;
void
NotifyWhenGraphStarted
(
RefPtr
<
MediaTrack
>
aTrack
MozPromiseHolder
<
GraphStartedPromise
>
&
&
aHolder
)
;
void
ApplyAudioContextOperationImpl
(
AudioContextOperationControlMessage
*
aMessage
)
;
bool
AudioTrackPresent
(
)
;
void
CheckDriver
(
)
;
void
UpdateTrackOrder
(
)
;
static
GraphTime
RoundUpToEndOfAudioBlock
(
GraphTime
aTime
)
;
static
GraphTime
RoundUpToNextAudioBlock
(
GraphTime
aTime
)
;
void
ProduceDataForTracksBlockByBlock
(
uint32_t
aTrackIndex
TrackRate
aSampleRate
)
;
GraphTime
WillUnderrun
(
MediaTrack
*
aTrack
GraphTime
aEndBlockingDecisions
)
;
TrackTime
GraphTimeToTrackTimeWithBlocking
(
const
MediaTrack
*
aTrack
GraphTime
aTime
)
const
;
void
CreateOrDestroyAudioTracks
(
MediaTrack
*
aTrack
)
;
struct
TrackKeyAndVolume
{
MediaTrack
*
mTrack
;
void
*
mKey
;
float
mVolume
;
}
;
TrackTime
PlayAudio
(
AudioMixer
*
aMixer
const
TrackKeyAndVolume
&
aTkv
GraphTime
aPlayedTime
)
;
DeviceInputTrack
*
GetDeviceInputTrackMainThread
(
CubebUtils
:
:
AudioDeviceID
aID
)
;
NativeInputTrack
*
GetNativeInputTrackMainThread
(
)
;
void
OpenAudioInputImpl
(
DeviceInputTrack
*
aTrack
)
;
virtual
void
OpenAudioInput
(
DeviceInputTrack
*
aTrack
)
override
;
void
CloseAudioInputImpl
(
DeviceInputTrack
*
aTrack
)
;
virtual
void
CloseAudioInput
(
DeviceInputTrack
*
aTrack
)
override
;
void
RegisterAudioOutput
(
MediaTrack
*
aTrack
void
*
aKey
)
;
void
UnregisterAudioOutput
(
MediaTrack
*
aTrack
void
*
aKey
)
;
void
UnregisterAllAudioOutputs
(
MediaTrack
*
aTrack
)
;
void
SetAudioOutputVolume
(
MediaTrack
*
aTrack
void
*
aKey
float
aVolume
)
;
void
ReevaluateInputDevice
(
CubebUtils
:
:
AudioDeviceID
aID
)
;
void
NotifyOutputData
(
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
)
override
;
void
NotifyInputStopped
(
)
override
;
void
NotifyInputData
(
const
AudioDataValue
*
aBuffer
size_t
aFrames
TrackRate
aRate
uint32_t
aChannels
uint32_t
aAlreadyBuffered
)
override
;
void
DeviceChanged
(
)
override
;
void
DeviceChangedImpl
(
)
;
TrackTime
GetDesiredBufferEnd
(
MediaTrack
*
aTrack
)
;
bool
IsEmpty
(
)
const
{
MOZ_ASSERT
(
OnGraphThreadOrNotRunning
(
)
|
|
(
NS_IsMainThread
(
)
&
&
LifecycleStateRef
(
)
>
=
LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP
)
)
;
return
mTracks
.
IsEmpty
(
)
&
&
mSuspendedTracks
.
IsEmpty
(
)
&
&
mPortCount
=
=
0
;
}
void
AddTrackGraphThread
(
MediaTrack
*
aTrack
)
;
void
RemoveTrackGraphThread
(
MediaTrack
*
aTrack
)
;
void
RemoveTrack
(
MediaTrack
*
aTrack
)
;
void
DestroyPort
(
MediaInputPort
*
aPort
)
;
void
SetTrackOrderDirty
(
)
{
MOZ_ASSERT
(
OnGraphThreadOrNotRunning
(
)
)
;
mTrackOrderDirty
=
true
;
}
uint32_t
AudioOutputChannelCount
(
)
const
;
void
SetMaxOutputChannelCount
(
uint32_t
aMaxChannelCount
)
;
double
AudioOutputLatency
(
)
;
uint32_t
AudioInputChannelCount
(
CubebUtils
:
:
AudioDeviceID
aID
)
;
AudioInputType
AudioInputDevicePreference
(
CubebUtils
:
:
AudioDeviceID
aID
)
;
double
MediaTimeToSeconds
(
GraphTime
aTime
)
const
{
NS_ASSERTION
(
aTime
>
-
TRACK_TIME_MAX
&
&
aTime
<
=
TRACK_TIME_MAX
"
Bad
time
"
)
;
return
static_cast
<
double
>
(
aTime
)
/
GraphRate
(
)
;
}
void
PausedIndefinitly
(
)
;
void
ResumedFromPaused
(
)
;
GraphDriver
*
CurrentDriver
(
)
const
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
#
ifdef
DEBUG
if
(
!
OnGraphThreadOrNotRunning
(
)
)
{
mMonitor
.
AssertCurrentThreadOwns
(
)
;
}
#
endif
return
mDriver
;
}
void
SetCurrentDriver
(
GraphDriver
*
aDriver
)
{
MOZ_ASSERT_IF
(
mGraphDriverRunning
InDriverIteration
(
mDriver
)
)
;
MOZ_ASSERT_IF
(
!
mGraphDriverRunning
NS_IsMainThread
(
)
)
;
MonitorAutoLock
lock
(
GetMonitor
(
)
)
;
mDriver
=
aDriver
;
}
GraphDriver
*
NextDriver
(
)
const
{
MOZ_ASSERT
(
OnGraphThread
(
)
)
;
return
mNextDriver
;
}
bool
Switching
(
)
const
{
return
NextDriver
(
)
;
}
void
SwitchAtNextIteration
(
GraphDriver
*
aNextDriver
)
;
Monitor
&
GetMonitor
(
)
{
return
mMonitor
;
}
void
EnsureNextIteration
(
)
{
CurrentDriver
(
)
-
>
EnsureNextIteration
(
)
;
}
void
RegisterCaptureTrackForWindow
(
uint64_t
aWindowId
ProcessedMediaTrack
*
aCaptureTrack
)
;
void
UnregisterCaptureTrackForWindow
(
uint64_t
aWindowId
)
;
already_AddRefed
<
MediaInputPort
>
ConnectToCaptureTrack
(
uint64_t
aWindowId
MediaTrack
*
aMediaTrack
)
;
Watchable
<
GraphTime
>
&
CurrentTime
(
)
override
;
void
InterruptJS
(
)
;
class
TrackSet
{
public
:
class
iterator
{
public
:
explicit
iterator
(
MediaTrackGraphImpl
&
aGraph
)
:
mGraph
(
&
aGraph
)
mArrayNum
(
-
1
)
mArrayIndex
(
0
)
{
+
+
(
*
this
)
;
}
iterator
(
)
:
mGraph
(
nullptr
)
mArrayNum
(
2
)
mArrayIndex
(
0
)
{
}
MediaTrack
*
operator
*
(
)
{
return
Array
(
)
-
>
ElementAt
(
mArrayIndex
)
;
}
iterator
operator
+
+
(
)
{
+
+
mArrayIndex
;
while
(
mArrayNum
<
2
&
&
(
mArrayNum
<
0
|
|
mArrayIndex
>
=
Array
(
)
-
>
Length
(
)
)
)
{
+
+
mArrayNum
;
mArrayIndex
=
0
;
}
return
*
this
;
}
bool
operator
=
=
(
const
iterator
&
aOther
)
const
{
return
mArrayNum
=
=
aOther
.
mArrayNum
&
&
mArrayIndex
=
=
aOther
.
mArrayIndex
;
}
bool
operator
!
=
(
const
iterator
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
private
:
nsTArray
<
MediaTrack
*
>
*
Array
(
)
{
return
mArrayNum
=
=
0
?
&
mGraph
-
>
mTracks
:
&
mGraph
-
>
mSuspendedTracks
;
}
MediaTrackGraphImpl
*
mGraph
;
int
mArrayNum
;
uint32_t
mArrayIndex
;
}
;
explicit
TrackSet
(
MediaTrackGraphImpl
&
aGraph
)
:
mGraph
(
aGraph
)
{
}
iterator
begin
(
)
{
return
iterator
(
mGraph
)
;
}
iterator
end
(
)
{
return
iterator
(
)
;
}
private
:
MediaTrackGraphImpl
&
mGraph
;
}
;
TrackSet
AllTracks
(
)
{
return
TrackSet
(
*
this
)
;
}
const
RefPtr
<
GraphRunner
>
mGraphRunner
;
size_t
mMainThreadTrackCount
=
0
;
size_t
mMainThreadPortCount
=
0
;
RefPtr
<
GraphDriver
>
mDriver
;
RefPtr
<
GraphDriver
>
mNextDriver
;
nsTArray
<
MediaTrack
*
>
mTracks
;
nsTArray
<
MediaTrack
*
>
mSuspendedTracks
;
uint32_t
mFirstCycleBreaker
;
GraphTime
mStateComputedTime
=
0
;
GraphTime
mProcessedTime
=
0
;
GraphTime
mIterationEndTime
=
0
;
GraphTime
mEndTime
;
TimeStamp
mLastMainThreadUpdate
;
int32_t
mPortCount
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mPendingUpdateRunnables
;
CubebUtils
:
:
AudioDeviceID
mOutputDeviceID
;
class
PendingResumeOperation
{
public
:
explicit
PendingResumeOperation
(
AudioContextOperationControlMessage
*
aMessage
)
;
void
Apply
(
MediaTrackGraphImpl
*
aGraph
)
;
void
Abort
(
)
;
MediaTrack
*
DestinationTrack
(
)
const
{
return
mDestinationTrack
;
}
private
:
RefPtr
<
MediaTrack
>
mDestinationTrack
;
nsTArray
<
RefPtr
<
MediaTrack
>
>
mTracks
;
MozPromiseHolder
<
AudioContextOperationPromise
>
mHolder
;
}
;
AutoTArray
<
PendingResumeOperation
1
>
mPendingResumeOperations
;
Monitor
mMonitor
;
nsTArray
<
TrackUpdate
>
mTrackUpdates
MOZ_GUARDED_BY
(
mMonitor
)
;
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
mUpdateRunnables
MOZ_GUARDED_BY
(
mMonitor
)
;
nsTArray
<
MessageBlock
>
mFrontMessageQueue
;
nsTArray
<
MessageBlock
>
mBackMessageQueue
MOZ_GUARDED_BY
(
mMonitor
)
;
bool
MessagesQueued
(
)
const
MOZ_REQUIRES
(
mMonitor
)
{
mMonitor
.
AssertCurrentThreadOwns
(
)
;
return
!
mBackMessageQueue
.
IsEmpty
(
)
;
}
enum
LifecycleState
{
LIFECYCLE_THREAD_NOT_STARTED
LIFECYCLE_RUNNING
LIFECYCLE_WAITING_FOR_MAIN_THREAD_CLEANUP
LIFECYCLE_WAITING_FOR_THREAD_SHUTDOWN
LIFECYCLE_WAITING_FOR_TRACK_DESTRUCTION
}
;
LifecycleState
mLifecycleState
MOZ_GUARDED_BY
(
mMonitor
)
;
LifecycleState
&
LifecycleStateRef
(
)
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
#
if
DEBUG
if
(
mGraphDriverRunning
)
{
mMonitor
.
AssertCurrentThreadOwns
(
)
;
}
else
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
#
endif
return
mLifecycleState
;
}
const
LifecycleState
&
LifecycleStateRef
(
)
const
MOZ_NO_THREAD_SAFETY_ANALYSIS
{
#
if
DEBUG
if
(
mGraphDriverRunning
)
{
mMonitor
.
AssertCurrentThreadOwns
(
)
;
}
else
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
#
endif
return
mLifecycleState
;
}
bool
mForceShutDownReceived
=
false
;
bool
mInterruptJSCalled
MOZ_GUARDED_BY
(
mMonitor
)
=
false
;
RefPtr
<
media
:
:
ShutdownBlocker
>
mShutdownBlocker
;
bool
mPostedRunInStableStateEvent
MOZ_GUARDED_BY
(
mMonitor
)
;
JSContext
*
mJSContext
MOZ_GUARDED_BY
(
mMonitor
)
=
nullptr
;
nsTArray
<
UniquePtr
<
ControlMessage
>
>
mCurrentTaskMessageQueue
;
Atomic
<
bool
>
mGraphDriverRunning
;
bool
mPostedRunInStableState
;
const
bool
mRealtime
;
bool
mTrackOrderDirty
;
const
RefPtr
<
nsISerialEventTarget
>
mMainThread
;
nsCOMPtr
<
nsITimer
>
mShutdownTimer
;
protected
:
virtual
~
MediaTrackGraphImpl
(
)
;
private
:
MOZ_DEFINE_MALLOC_SIZE_OF
(
MallocSizeOf
)
void
SetNewNativeInput
(
)
;
RefPtr
<
MediaTrackGraphImpl
>
mSelfRef
;
struct
WindowAndTrack
{
uint64_t
mWindowId
;
RefPtr
<
ProcessedMediaTrack
>
mCaptureTrackSink
;
}
;
nsTArray
<
WindowAndTrack
>
mWindowCaptureTracks
;
nsTArray
<
TrackKeyAndVolume
>
mAudioOutputs
;
const
float
mGlobalVolume
;
#
ifdef
DEBUG
bool
mCanRunMessagesSynchronously
;
#
endif
Watchable
<
GraphTime
>
mMainThreadGraphTime
;
GraphTime
mNextMainThreadGraphTime
MOZ_GUARDED_BY
(
mMonitor
)
=
0
;
double
mAudioOutputLatency
;
uint32_t
mMaxOutputChannelCount
;
DeviceInputTrackManager
mDeviceInputTrackManagerMainThread
;
DeviceInputTrackManager
mDeviceInputTrackManagerGraphThread
;
}
;
}
#
endif
